
root/bin/lwIPKit.elf:     file format elf32-littlearm


Disassembly of section .text:

00100000 <_start>:
  100000:	e1a0d003 	mov	sp, r3
  100004:	ebffffff 	bl	100008 <_start_c>

00100008 <_start_c>:
  100008:	e3a0c000 	mov	ip, #0
  10000c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  100010:	e59f3018 	ldr	r3, [pc, #24]	; 100030 <_start_c+0x28>
  100014:	e24dd00c 	sub	sp, sp, #12
  100018:	e5901000 	ldr	r1, [r0]
  10001c:	e2802004 	add	r2, r0, #4
  100020:	e88d1008 	stm	sp, {r3, ip}
  100024:	e59f0008 	ldr	r0, [pc, #8]	; 100034 <_start_c+0x2c>
  100028:	e59f3008 	ldr	r3, [pc, #8]	; 100038 <_start_c+0x30>
  10002c:	eb00e139 	bl	138518 <__libc_start_main>
  100030:	001449f0 	.word	0x001449f0
  100034:	00103bc4 	.word	0x00103bc4
  100038:	001449e4 	.word	0x001449e4

0010003c <deregister_tm_clones>:
  10003c:	e59f0018 	ldr	r0, [pc, #24]	; 10005c <deregister_tm_clones+0x20>
  100040:	e59f3018 	ldr	r3, [pc, #24]	; 100060 <deregister_tm_clones+0x24>
  100044:	e1530000 	cmp	r3, r0
  100048:	012fff1e 	bxeq	lr
  10004c:	e59f3010 	ldr	r3, [pc, #16]	; 100064 <deregister_tm_clones+0x28>
  100050:	e3530000 	cmp	r3, #0
  100054:	012fff1e 	bxeq	lr
  100058:	e12fff13 	bx	r3
  10005c:	0014d3e8 	.word	0x0014d3e8
  100060:	0014d3e8 	.word	0x0014d3e8
  100064:	00000000 	.word	0x00000000

00100068 <register_tm_clones>:
  100068:	e59f0024 	ldr	r0, [pc, #36]	; 100094 <register_tm_clones+0x2c>
  10006c:	e59f1024 	ldr	r1, [pc, #36]	; 100098 <register_tm_clones+0x30>
  100070:	e0411000 	sub	r1, r1, r0
  100074:	e1a01141 	asr	r1, r1, #2
  100078:	e0811fa1 	add	r1, r1, r1, lsr #31
  10007c:	e1b010c1 	asrs	r1, r1, #1
  100080:	012fff1e 	bxeq	lr
  100084:	e59f3010 	ldr	r3, [pc, #16]	; 10009c <register_tm_clones+0x34>
  100088:	e3530000 	cmp	r3, #0
  10008c:	012fff1e 	bxeq	lr
  100090:	e12fff13 	bx	r3
  100094:	0014d3e8 	.word	0x0014d3e8
  100098:	0014d3e8 	.word	0x0014d3e8
  10009c:	00000000 	.word	0x00000000

001000a0 <__do_global_dtors_aux>:
  1000a0:	e92d4010 	push	{r4, lr}
  1000a4:	e59f402c 	ldr	r4, [pc, #44]	; 1000d8 <__do_global_dtors_aux+0x38>
  1000a8:	e5d43000 	ldrb	r3, [r4]
  1000ac:	e3530000 	cmp	r3, #0
  1000b0:	18bd8010 	popne	{r4, pc}
  1000b4:	ebffffe0 	bl	10003c <deregister_tm_clones>
  1000b8:	e59f301c 	ldr	r3, [pc, #28]	; 1000dc <__do_global_dtors_aux+0x3c>
  1000bc:	e3530000 	cmp	r3, #0
  1000c0:	0a000001 	beq	1000cc <__do_global_dtors_aux+0x2c>
  1000c4:	e59f0014 	ldr	r0, [pc, #20]	; 1000e0 <__do_global_dtors_aux+0x40>
  1000c8:	e320f000 	nop	{0}
  1000cc:	e3a03001 	mov	r3, #1
  1000d0:	e5c43000 	strb	r3, [r4]
  1000d4:	e8bd8010 	pop	{r4, pc}
  1000d8:	0014d3e8 	.word	0x0014d3e8
  1000dc:	00000000 	.word	0x00000000
  1000e0:	0014c4a8 	.word	0x0014c4a8

001000e4 <frame_dummy>:
  1000e4:	e59f3020 	ldr	r3, [pc, #32]	; 10010c <frame_dummy+0x28>
  1000e8:	e3530000 	cmp	r3, #0
  1000ec:	0a000005 	beq	100108 <frame_dummy+0x24>
  1000f0:	e92d4010 	push	{r4, lr}
  1000f4:	e59f1014 	ldr	r1, [pc, #20]	; 100110 <frame_dummy+0x2c>
  1000f8:	e59f0014 	ldr	r0, [pc, #20]	; 100114 <frame_dummy+0x30>
  1000fc:	e320f000 	nop	{0}
  100100:	e8bd4010 	pop	{r4, lr}
  100104:	eaffffd7 	b	100068 <register_tm_clones>
  100108:	eaffffd6 	b	100068 <register_tm_clones>
  10010c:	00000000 	.word	0x00000000
  100110:	0014d3ec 	.word	0x0014d3ec
  100114:	0014c4a8 	.word	0x0014c4a8

00100118 <rt_channel_open>:

#include <sys/rtt_syscall.h>
#include <rtthread.h>

int rt_channel_open(const char *name, int flags)
{
  100118:	e92d4800 	push	{fp, lr}
  10011c:	e28db004 	add	fp, sp, #4
  100120:	e24dd008 	sub	sp, sp, #8
  100124:	e50b0008 	str	r0, [fp, #-8]
  100128:	e50b100c 	str	r1, [fp, #-12]
    return syscall(_NRSYS_channel_open, name, flags);
  10012c:	e51b200c 	ldr	r2, [fp, #-12]
  100130:	e51b1008 	ldr	r1, [fp, #-8]
  100134:	e3a0002c 	mov	r0, #44	; 0x2c
  100138:	eb00ee66 	bl	13bad8 <syscall>
  10013c:	e1a03000 	mov	r3, r0
}
  100140:	e1a00003 	mov	r0, r3
  100144:	e24bd004 	sub	sp, fp, #4
  100148:	e8bd8800 	pop	{fp, pc}

0010014c <rt_channel_close>:

rt_err_t rt_channel_close(int fd)
{
  10014c:	e92d4800 	push	{fp, lr}
  100150:	e28db004 	add	fp, sp, #4
  100154:	e24dd008 	sub	sp, sp, #8
  100158:	e50b0008 	str	r0, [fp, #-8]
    return syscall(_NRSYS_channel_close, fd);
  10015c:	e51b1008 	ldr	r1, [fp, #-8]
  100160:	e3a0002d 	mov	r0, #45	; 0x2d
  100164:	eb00ee5b 	bl	13bad8 <syscall>
  100168:	e1a03000 	mov	r3, r0
}
  10016c:	e1a00003 	mov	r0, r3
  100170:	e24bd004 	sub	sp, fp, #4
  100174:	e8bd8800 	pop	{fp, pc}

00100178 <rt_channel_send_recv>:

rt_err_t rt_channel_send_recv(int fd, rt_channel_msg_t data, rt_channel_msg_t data_ret)
{
  100178:	e92d4800 	push	{fp, lr}
  10017c:	e28db004 	add	fp, sp, #4
  100180:	e24dd018 	sub	sp, sp, #24
  100184:	e50b0008 	str	r0, [fp, #-8]
  100188:	e50b100c 	str	r1, [fp, #-12]
  10018c:	e50b2010 	str	r2, [fp, #-16]
    return syscall(_NRSYS_channel_send_recv_timeout, fd, data, data_ret, RT_WAITING_FOREVER);
  100190:	e3e03000 	mvn	r3, #0
  100194:	e58d3000 	str	r3, [sp]
  100198:	e51b3010 	ldr	r3, [fp, #-16]
  10019c:	e51b200c 	ldr	r2, [fp, #-12]
  1001a0:	e51b1008 	ldr	r1, [fp, #-8]
  1001a4:	e3a0002f 	mov	r0, #47	; 0x2f
  1001a8:	eb00ee4a 	bl	13bad8 <syscall>
  1001ac:	e1a03000 	mov	r3, r0
}
  1001b0:	e1a00003 	mov	r0, r3
  1001b4:	e24bd004 	sub	sp, fp, #4
  1001b8:	e8bd8800 	pop	{fp, pc}

001001bc <rt_channel_send_recv_timeout>:

rt_err_t rt_channel_send_recv_timeout(int fd, rt_channel_msg_t data, rt_channel_msg_t data_ret, rt_int32_t time)
{
  1001bc:	e92d4800 	push	{fp, lr}
  1001c0:	e28db004 	add	fp, sp, #4
  1001c4:	e24dd018 	sub	sp, sp, #24
  1001c8:	e50b0008 	str	r0, [fp, #-8]
  1001cc:	e50b100c 	str	r1, [fp, #-12]
  1001d0:	e50b2010 	str	r2, [fp, #-16]
  1001d4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return syscall(_NRSYS_channel_send_recv_timeout, fd, data, data_ret, time);
  1001d8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1001dc:	e58d3000 	str	r3, [sp]
  1001e0:	e51b3010 	ldr	r3, [fp, #-16]
  1001e4:	e51b200c 	ldr	r2, [fp, #-12]
  1001e8:	e51b1008 	ldr	r1, [fp, #-8]
  1001ec:	e3a0002f 	mov	r0, #47	; 0x2f
  1001f0:	eb00ee38 	bl	13bad8 <syscall>
  1001f4:	e1a03000 	mov	r3, r0
}
  1001f8:	e1a00003 	mov	r0, r3
  1001fc:	e24bd004 	sub	sp, fp, #4
  100200:	e8bd8800 	pop	{fp, pc}

00100204 <rt_channel_send>:

rt_err_t rt_channel_send(int fd, rt_channel_msg_t data)
{
  100204:	e92d4800 	push	{fp, lr}
  100208:	e28db004 	add	fp, sp, #4
  10020c:	e24dd008 	sub	sp, sp, #8
  100210:	e50b0008 	str	r0, [fp, #-8]
  100214:	e50b100c 	str	r1, [fp, #-12]
    return syscall(_NRSYS_channel_send, fd, data);
  100218:	e51b200c 	ldr	r2, [fp, #-12]
  10021c:	e51b1008 	ldr	r1, [fp, #-8]
  100220:	e3a0002e 	mov	r0, #46	; 0x2e
  100224:	eb00ee2b 	bl	13bad8 <syscall>
  100228:	e1a03000 	mov	r3, r0
}
  10022c:	e1a00003 	mov	r0, r3
  100230:	e24bd004 	sub	sp, fp, #4
  100234:	e8bd8800 	pop	{fp, pc}

00100238 <rt_channel_reply>:

rt_err_t rt_channel_reply(int fd, rt_channel_msg_t data)
{
  100238:	e92d4800 	push	{fp, lr}
  10023c:	e28db004 	add	fp, sp, #4
  100240:	e24dd008 	sub	sp, sp, #8
  100244:	e50b0008 	str	r0, [fp, #-8]
  100248:	e50b100c 	str	r1, [fp, #-12]
    return syscall(_NRSYS_channel_reply, fd, data);
  10024c:	e51b200c 	ldr	r2, [fp, #-12]
  100250:	e51b1008 	ldr	r1, [fp, #-8]
  100254:	e3a00030 	mov	r0, #48	; 0x30
  100258:	eb00ee1e 	bl	13bad8 <syscall>
  10025c:	e1a03000 	mov	r3, r0
}
  100260:	e1a00003 	mov	r0, r3
  100264:	e24bd004 	sub	sp, fp, #4
  100268:	e8bd8800 	pop	{fp, pc}

0010026c <rt_channel_recv>:

rt_err_t rt_channel_recv(int fd, rt_channel_msg_t data)
{
  10026c:	e92d4800 	push	{fp, lr}
  100270:	e28db004 	add	fp, sp, #4
  100274:	e24dd008 	sub	sp, sp, #8
  100278:	e50b0008 	str	r0, [fp, #-8]
  10027c:	e50b100c 	str	r1, [fp, #-12]
    return syscall(_NRSYS_channel_recv_timeout, fd, data, RT_WAITING_FOREVER);
  100280:	e3e03000 	mvn	r3, #0
  100284:	e51b200c 	ldr	r2, [fp, #-12]
  100288:	e51b1008 	ldr	r1, [fp, #-8]
  10028c:	e3a00031 	mov	r0, #49	; 0x31
  100290:	eb00ee10 	bl	13bad8 <syscall>
  100294:	e1a03000 	mov	r3, r0
}
  100298:	e1a00003 	mov	r0, r3
  10029c:	e24bd004 	sub	sp, fp, #4
  1002a0:	e8bd8800 	pop	{fp, pc}

001002a4 <rt_channel_recv_timeout>:

rt_err_t rt_channel_recv_timeout(int fd, rt_channel_msg_t data, rt_int32_t time)
{
  1002a4:	e92d4800 	push	{fp, lr}
  1002a8:	e28db004 	add	fp, sp, #4
  1002ac:	e24dd010 	sub	sp, sp, #16
  1002b0:	e50b0008 	str	r0, [fp, #-8]
  1002b4:	e50b100c 	str	r1, [fp, #-12]
  1002b8:	e50b2010 	str	r2, [fp, #-16]
    return syscall(_NRSYS_channel_recv_timeout, fd, data, time);
  1002bc:	e51b3010 	ldr	r3, [fp, #-16]
  1002c0:	e51b200c 	ldr	r2, [fp, #-12]
  1002c4:	e51b1008 	ldr	r1, [fp, #-8]
  1002c8:	e3a00031 	mov	r0, #49	; 0x31
  1002cc:	eb00ee01 	bl	13bad8 <syscall>
  1002d0:	e1a03000 	mov	r3, r0
}
  1002d4:	e1a00003 	mov	r0, r3
  1002d8:	e24bd004 	sub	sp, fp, #4
  1002dc:	e8bd8800 	pop	{fp, pc}

001002e0 <rt_channel_peek>:

rt_err_t rt_channel_peek(int fd, rt_channel_msg_t data)
{
  1002e0:	e92d4800 	push	{fp, lr}
  1002e4:	e28db004 	add	fp, sp, #4
  1002e8:	e24dd008 	sub	sp, sp, #8
  1002ec:	e50b0008 	str	r0, [fp, #-8]
  1002f0:	e50b100c 	str	r1, [fp, #-12]
    return syscall(_NRSYS_channel_recv_timeout, fd, data, 0);
  1002f4:	e3a03000 	mov	r3, #0
  1002f8:	e51b200c 	ldr	r2, [fp, #-12]
  1002fc:	e51b1008 	ldr	r1, [fp, #-8]
  100300:	e3a00031 	mov	r0, #49	; 0x31
  100304:	eb00edf3 	bl	13bad8 <syscall>
  100308:	e1a03000 	mov	r3, r0
}
  10030c:	e1a00003 	mov	r0, r3
  100310:	e24bd004 	sub	sp, fp, #4
  100314:	e8bd8800 	pop	{fp, pc}

00100318 <rt_completion_init>:
 * 2019-10-01     Bernard      code cleanup
 */
#include <rtdevice.h>

void rt_completion_init(struct rt_completion *completion)
{
  100318:	e92d4800 	push	{fp, lr}
  10031c:	e28db004 	add	fp, sp, #4
  100320:	e24dd008 	sub	sp, sp, #8
  100324:	e50b0008 	str	r0, [fp, #-8]
    if (completion && completion->flag == 0)
  100328:	e51b3008 	ldr	r3, [fp, #-8]
  10032c:	e3530000 	cmp	r3, #0
  100330:	0a00000d 	beq	10036c <rt_completion_init+0x54>
  100334:	e51b3008 	ldr	r3, [fp, #-8]
  100338:	e5933000 	ldr	r3, [r3]
  10033c:	e3530000 	cmp	r3, #0
  100340:	1a000009 	bne	10036c <rt_completion_init+0x54>
    {
        completion->flag = 0x5A5A;
  100344:	e51b3008 	ldr	r3, [fp, #-8]
  100348:	e3052a5a 	movw	r2, #23130	; 0x5a5a
  10034c:	e5832000 	str	r2, [r3]
        completion->wait_event = rt_event_create("completion", RT_IPC_FLAG_FIFO);
  100350:	e3a01000 	mov	r1, #0
  100354:	e30409fc 	movw	r0, #18940	; 0x49fc
  100358:	e3400014 	movt	r0, #20
  10035c:	eb0005e5 	bl	101af8 <rt_event_create>
  100360:	e1a02000 	mov	r2, r0
  100364:	e51b3008 	ldr	r3, [fp, #-8]
  100368:	e5832004 	str	r2, [r3, #4]
    }
}
  10036c:	e320f000 	nop	{0}
  100370:	e24bd004 	sub	sp, fp, #4
  100374:	e8bd8800 	pop	{fp, pc}

00100378 <rt_completion_wait>:

rt_err_t rt_completion_wait(struct rt_completion *completion,
    rt_int32_t timeout)
{
  100378:	e92d4800 	push	{fp, lr}
  10037c:	e28db004 	add	fp, sp, #4
  100380:	e24dd018 	sub	sp, sp, #24
  100384:	e50b0010 	str	r0, [fp, #-16]
  100388:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    rt_err_t ret;
    rt_uint32_t recv = 0;
  10038c:	e3a03000 	mov	r3, #0
  100390:	e50b300c 	str	r3, [fp, #-12]

    ret = rt_event_recv(completion->wait_event, 0x01, RT_EVENT_FLAG_OR | RT_EVENT_FLAG_CLEAR, timeout, &recv);
  100394:	e51b3010 	ldr	r3, [fp, #-16]
  100398:	e5930004 	ldr	r0, [r3, #4]
  10039c:	e24b300c 	sub	r3, fp, #12
  1003a0:	e58d3000 	str	r3, [sp]
  1003a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1003a8:	e3a02006 	mov	r2, #6
  1003ac:	e3a01001 	mov	r1, #1
  1003b0:	eb000684 	bl	101dc8 <rt_event_recv>
  1003b4:	e50b0008 	str	r0, [fp, #-8]

    return ret;
  1003b8:	e51b3008 	ldr	r3, [fp, #-8]
}
  1003bc:	e1a00003 	mov	r0, r3
  1003c0:	e24bd004 	sub	sp, fp, #4
  1003c4:	e8bd8800 	pop	{fp, pc}

001003c8 <rt_completion_done>:

void rt_completion_done(struct rt_completion *completion)
{
  1003c8:	e92d4800 	push	{fp, lr}
  1003cc:	e28db004 	add	fp, sp, #4
  1003d0:	e24dd008 	sub	sp, sp, #8
  1003d4:	e50b0008 	str	r0, [fp, #-8]
    rt_event_send(completion->wait_event, 0x01);
  1003d8:	e51b3008 	ldr	r3, [fp, #-8]
  1003dc:	e5933004 	ldr	r3, [r3, #4]
  1003e0:	e3a01001 	mov	r1, #1
  1003e4:	e1a00003 	mov	r0, r3
  1003e8:	eb000658 	bl	101d50 <rt_event_send>
}
  1003ec:	e320f000 	nop	{0}
  1003f0:	e24bd004 	sub	sp, fp, #4
  1003f4:	e8bd8800 	pop	{fp, pc}

001003f8 <rt_device_init>:

#include <sys/rtt_syscall.h>
#include <rtthread.h>

rt_err_t rt_device_init(rt_device_t dev)
{
  1003f8:	e92d4800 	push	{fp, lr}
  1003fc:	e28db004 	add	fp, sp, #4
  100400:	e24dd008 	sub	sp, sp, #8
  100404:	e50b0008 	str	r0, [fp, #-8]
    return syscall(_NRSYS_rt_device_init, dev);
  100408:	e51b1008 	ldr	r1, [fp, #-8]
  10040c:	e3a0003b 	mov	r0, #59	; 0x3b
  100410:	eb00edb0 	bl	13bad8 <syscall>
  100414:	e1a03000 	mov	r3, r0
}
  100418:	e1a00003 	mov	r0, r3
  10041c:	e24bd004 	sub	sp, fp, #4
  100420:	e8bd8800 	pop	{fp, pc}

00100424 <rt_device_register>:

rt_err_t rt_device_register(rt_device_t dev,
        const char *name,
        rt_uint16_t flags)
{
  100424:	e92d4800 	push	{fp, lr}
  100428:	e28db004 	add	fp, sp, #4
  10042c:	e24dd010 	sub	sp, sp, #16
  100430:	e50b0008 	str	r0, [fp, #-8]
  100434:	e50b100c 	str	r1, [fp, #-12]
  100438:	e1a03002 	mov	r3, r2
  10043c:	e14b30be 	strh	r3, [fp, #-14]
    return syscall(_NRSYS_rt_device_register, dev, name, flags);
  100440:	e15b30be 	ldrh	r3, [fp, #-14]
  100444:	e51b200c 	ldr	r2, [fp, #-12]
  100448:	e51b1008 	ldr	r1, [fp, #-8]
  10044c:	e3a0003c 	mov	r0, #60	; 0x3c
  100450:	eb00eda0 	bl	13bad8 <syscall>
  100454:	e1a03000 	mov	r3, r0
}
  100458:	e1a00003 	mov	r0, r3
  10045c:	e24bd004 	sub	sp, fp, #4
  100460:	e8bd8800 	pop	{fp, pc}

00100464 <rt_device_control>:

rt_err_t rt_device_control(rt_device_t dev, int cmd, void *arg)
{
  100464:	e92d4800 	push	{fp, lr}
  100468:	e28db004 	add	fp, sp, #4
  10046c:	e24dd010 	sub	sp, sp, #16
  100470:	e50b0008 	str	r0, [fp, #-8]
  100474:	e50b100c 	str	r1, [fp, #-12]
  100478:	e50b2010 	str	r2, [fp, #-16]
    return syscall(_NRSYS_rt_device_control, dev, cmd, arg);
  10047c:	e51b3010 	ldr	r3, [fp, #-16]
  100480:	e51b200c 	ldr	r2, [fp, #-12]
  100484:	e51b1008 	ldr	r1, [fp, #-8]
  100488:	e3a0003d 	mov	r0, #61	; 0x3d
  10048c:	eb00ed91 	bl	13bad8 <syscall>
  100490:	e1a03000 	mov	r3, r0
}
  100494:	e1a00003 	mov	r0, r3
  100498:	e24bd004 	sub	sp, fp, #4
  10049c:	e8bd8800 	pop	{fp, pc}

001004a0 <rt_device_find>:

rt_device_t rt_device_find(const char *name)
{
  1004a0:	e92d4800 	push	{fp, lr}
  1004a4:	e28db004 	add	fp, sp, #4
  1004a8:	e24dd008 	sub	sp, sp, #8
  1004ac:	e50b0008 	str	r0, [fp, #-8]
    return (rt_device_t)syscall(_NRSYS_rt_device_find, name);
  1004b0:	e51b1008 	ldr	r1, [fp, #-8]
  1004b4:	e3a0003e 	mov	r0, #62	; 0x3e
  1004b8:	eb00ed86 	bl	13bad8 <syscall>
  1004bc:	e1a03000 	mov	r3, r0
}
  1004c0:	e1a00003 	mov	r0, r3
  1004c4:	e24bd004 	sub	sp, fp, #4
  1004c8:	e8bd8800 	pop	{fp, pc}

001004cc <rt_device_open>:

rt_err_t rt_device_open(rt_device_t dev, rt_uint16_t oflag)
{
  1004cc:	e92d4800 	push	{fp, lr}
  1004d0:	e28db004 	add	fp, sp, #4
  1004d4:	e24dd008 	sub	sp, sp, #8
  1004d8:	e50b0008 	str	r0, [fp, #-8]
  1004dc:	e1a03001 	mov	r3, r1
  1004e0:	e14b30ba 	strh	r3, [fp, #-10]
    return syscall(_NRSYS_rt_device_open, dev, oflag);
  1004e4:	e15b30ba 	ldrh	r3, [fp, #-10]
  1004e8:	e1a02003 	mov	r2, r3
  1004ec:	e51b1008 	ldr	r1, [fp, #-8]
  1004f0:	e3a0003f 	mov	r0, #63	; 0x3f
  1004f4:	eb00ed77 	bl	13bad8 <syscall>
  1004f8:	e1a03000 	mov	r3, r0
}
  1004fc:	e1a00003 	mov	r0, r3
  100500:	e24bd004 	sub	sp, fp, #4
  100504:	e8bd8800 	pop	{fp, pc}

00100508 <rt_device_close>:

rt_err_t rt_device_close(rt_device_t dev)
{
  100508:	e92d4800 	push	{fp, lr}
  10050c:	e28db004 	add	fp, sp, #4
  100510:	e24dd008 	sub	sp, sp, #8
  100514:	e50b0008 	str	r0, [fp, #-8]
    return syscall(_NRSYS_rt_device_close, dev);
  100518:	e51b1008 	ldr	r1, [fp, #-8]
  10051c:	e3a00040 	mov	r0, #64	; 0x40
  100520:	eb00ed6c 	bl	13bad8 <syscall>
  100524:	e1a03000 	mov	r3, r0
}
  100528:	e1a00003 	mov	r0, r3
  10052c:	e24bd004 	sub	sp, fp, #4
  100530:	e8bd8800 	pop	{fp, pc}

00100534 <rt_device_read>:

rt_size_t rt_device_read(rt_device_t dev,
        rt_off_t    pos,
        void       *buffer,
        rt_size_t   size)
{
  100534:	e92d4800 	push	{fp, lr}
  100538:	e28db004 	add	fp, sp, #4
  10053c:	e24dd018 	sub	sp, sp, #24
  100540:	e50b0008 	str	r0, [fp, #-8]
  100544:	e50b100c 	str	r1, [fp, #-12]
  100548:	e50b2010 	str	r2, [fp, #-16]
  10054c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return syscall(_NRSYS_rt_device_read, dev, pos, buffer, size);
  100550:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  100554:	e58d3000 	str	r3, [sp]
  100558:	e51b3010 	ldr	r3, [fp, #-16]
  10055c:	e51b200c 	ldr	r2, [fp, #-12]
  100560:	e51b1008 	ldr	r1, [fp, #-8]
  100564:	e3a00041 	mov	r0, #65	; 0x41
  100568:	eb00ed5a 	bl	13bad8 <syscall>
  10056c:	e1a03000 	mov	r3, r0
}
  100570:	e1a00003 	mov	r0, r3
  100574:	e24bd004 	sub	sp, fp, #4
  100578:	e8bd8800 	pop	{fp, pc}

0010057c <rt_device_write>:

rt_size_t rt_device_write(rt_device_t dev,
        rt_off_t    pos,
        const void *buffer,
        rt_size_t   size)
{
  10057c:	e92d4800 	push	{fp, lr}
  100580:	e28db004 	add	fp, sp, #4
  100584:	e24dd018 	sub	sp, sp, #24
  100588:	e50b0008 	str	r0, [fp, #-8]
  10058c:	e50b100c 	str	r1, [fp, #-12]
  100590:	e50b2010 	str	r2, [fp, #-16]
  100594:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return syscall(_NRSYS_rt_device_write, dev, pos, buffer, size);;
  100598:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10059c:	e58d3000 	str	r3, [sp]
  1005a0:	e51b3010 	ldr	r3, [fp, #-16]
  1005a4:	e51b200c 	ldr	r2, [fp, #-12]
  1005a8:	e51b1008 	ldr	r1, [fp, #-8]
  1005ac:	e3a00042 	mov	r0, #66	; 0x42
  1005b0:	eb00ed48 	bl	13bad8 <syscall>
  1005b4:	e1a03000 	mov	r3, r0
}
  1005b8:	e1a00003 	mov	r0, r3
  1005bc:	e24bd004 	sub	sp, fp, #4
  1005c0:	e8bd8800 	pop	{fp, pc}

001005c4 <closesocket>:
#include <netinet/in.h>
#include <fcntl.h>
#include <time.h>

int closesocket(int s)
{
  1005c4:	e92d4800 	push	{fp, lr}
  1005c8:	e28db004 	add	fp, sp, #4
  1005cc:	e24dd008 	sub	sp, sp, #8
  1005d0:	e50b0008 	str	r0, [fp, #-8]
    return (int)syscall(_NRSYS_closesocket, s);
  1005d4:	e51b1008 	ldr	r1, [fp, #-8]
  1005d8:	e3a00053 	mov	r0, #83	; 0x53
  1005dc:	eb00ed3d 	bl	13bad8 <syscall>
  1005e0:	e1a03000 	mov	r3, r0
}
  1005e4:	e1a00003 	mov	r0, r3
  1005e8:	e24bd004 	sub	sp, fp, #4
  1005ec:	e8bd8800 	pop	{fp, pc}

001005f0 <getaddrinfo>:

int getaddrinfo(const char *restrict host, const char *restrict serv, const struct addrinfo *restrict hint, struct addrinfo **restrict res)
{
  1005f0:	e92d4800 	push	{fp, lr}
  1005f4:	e28db004 	add	fp, sp, #4
  1005f8:	e24dd020 	sub	sp, sp, #32
  1005fc:	e50b0010 	str	r0, [fp, #-16]
  100600:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  100604:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  100608:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    struct addrinfo *ret = NULL;
  10060c:	e3a03000 	mov	r3, #0
  100610:	e50b3008 	str	r3, [fp, #-8]

    ret = (struct addrinfo *) malloc(sizeof(struct addrinfo) + sizeof(struct sockaddr));
  100614:	e3a00030 	mov	r0, #48	; 0x30
  100618:	eb00f0eb 	bl	13c9cc <malloc>
  10061c:	e1a03000 	mov	r3, r0
  100620:	e50b3008 	str	r3, [fp, #-8]
    if (ret)
  100624:	e51b3008 	ldr	r3, [fp, #-8]
  100628:	e3530000 	cmp	r3, #0
  10062c:	0a000011 	beq	100678 <getaddrinfo+0x88>
    {
        ret->ai_addr = (struct sockaddr *)(ret + 1);
  100630:	e51b3008 	ldr	r3, [fp, #-8]
  100634:	e2832020 	add	r2, r3, #32
  100638:	e51b3008 	ldr	r3, [fp, #-8]
  10063c:	e5832014 	str	r2, [r3, #20]

        /* invoke syscall */
        int result = syscall(_NRSYS_getaddrinfo, host, serv, hint, ret);
  100640:	e51b3008 	ldr	r3, [fp, #-8]
  100644:	e58d3000 	str	r3, [sp]
  100648:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10064c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  100650:	e51b1010 	ldr	r1, [fp, #-16]
  100654:	e3a00054 	mov	r0, #84	; 0x54
  100658:	eb00ed1e 	bl	13bad8 <syscall>
  10065c:	e50b000c 	str	r0, [fp, #-12]
        if (result == 0)
  100660:	e51b300c 	ldr	r3, [fp, #-12]
  100664:	e3530000 	cmp	r3, #0
  100668:	1a000002 	bne	100678 <getaddrinfo+0x88>
        {
            *res = ret;
  10066c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100670:	e51b2008 	ldr	r2, [fp, #-8]
  100674:	e5832000 	str	r2, [r3]
        }
    }

    return 0;
  100678:	e3a03000 	mov	r3, #0
}
  10067c:	e1a00003 	mov	r0, r3
  100680:	e24bd004 	sub	sp, fp, #4
  100684:	e8bd8800 	pop	{fp, pc}

00100688 <freeaddrinfo>:

void freeaddrinfo(struct addrinfo *p)
{
  100688:	e92d4800 	push	{fp, lr}
  10068c:	e28db004 	add	fp, sp, #4
  100690:	e24dd008 	sub	sp, sp, #8
  100694:	e50b0008 	str	r0, [fp, #-8]
    /* p->ai_canonname, p->ai_next should be NULL. */
    free(p);
  100698:	e51b0008 	ldr	r0, [fp, #-8]
  10069c:	eb00f286 	bl	13d0bc <free>
}
  1006a0:	e320f000 	nop	{0}
  1006a4:	e24bd004 	sub	sp, fp, #4
  1006a8:	e8bd8800 	pop	{fp, pc}

001006ac <gethostbyname2_r>:

int gethostbyname2_r(const char *name, int af, struct hostent *ret,
                    char *buf, size_t buflen,
                    struct hostent **result, int *err)
{
  1006ac:	e92d4800 	push	{fp, lr}
  1006b0:	e28db004 	add	fp, sp, #4
  1006b4:	e24dd020 	sub	sp, sp, #32
  1006b8:	e50b0008 	str	r0, [fp, #-8]
  1006bc:	e50b100c 	str	r1, [fp, #-12]
  1006c0:	e50b2010 	str	r2, [fp, #-16]
  1006c4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return syscall(_NRSYS_gethostbyname2_r, name, af, ret, buf, buflen, result, err);
  1006c8:	e59b300c 	ldr	r3, [fp, #12]
  1006cc:	e58d300c 	str	r3, [sp, #12]
  1006d0:	e59b3008 	ldr	r3, [fp, #8]
  1006d4:	e58d3008 	str	r3, [sp, #8]
  1006d8:	e59b3004 	ldr	r3, [fp, #4]
  1006dc:	e58d3004 	str	r3, [sp, #4]
  1006e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1006e4:	e58d3000 	str	r3, [sp]
  1006e8:	e51b3010 	ldr	r3, [fp, #-16]
  1006ec:	e51b200c 	ldr	r2, [fp, #-12]
  1006f0:	e51b1008 	ldr	r1, [fp, #-8]
  1006f4:	e3a00055 	mov	r0, #85	; 0x55
  1006f8:	eb00ecf6 	bl	13bad8 <syscall>
  1006fc:	e1a03000 	mov	r3, r0
}
  100700:	e1a00003 	mov	r0, r3
  100704:	e24bd004 	sub	sp, fp, #4
  100708:	e8bd8800 	pop	{fp, pc}

0010070c <setnonblocking>:

/* set non-blocking */
int setnonblocking(int fd)
{
  10070c:	e92d4800 	push	{fp, lr}
  100710:	e28db004 	add	fp, sp, #4
  100714:	e24dd010 	sub	sp, sp, #16
  100718:	e50b0010 	str	r0, [fp, #-16]
    int old_option = fcntl( fd, F_GETFL, 0);
  10071c:	e3a02000 	mov	r2, #0
  100720:	e3a01003 	mov	r1, #3
  100724:	e51b0010 	ldr	r0, [fp, #-16]
  100728:	eb00dfd8 	bl	138690 <fcntl>
  10072c:	e50b0008 	str	r0, [fp, #-8]
    int new_option = old_option | O_NONBLOCK;
  100730:	e51b3008 	ldr	r3, [fp, #-8]
  100734:	e3833b02 	orr	r3, r3, #2048	; 0x800
  100738:	e50b300c 	str	r3, [fp, #-12]
    if (fcntl(fd, F_SETFL, new_option) == -1)
  10073c:	e51b200c 	ldr	r2, [fp, #-12]
  100740:	e3a01004 	mov	r1, #4
  100744:	e51b0010 	ldr	r0, [fp, #-16]
  100748:	eb00dfd0 	bl	138690 <fcntl>
  10074c:	e1a03000 	mov	r3, r0
  100750:	e3730001 	cmn	r3, #1
  100754:	1a000004 	bne	10076c <setnonblocking+0x60>
    {
        printf("Set noblocking error!\n");
  100758:	e3040a08 	movw	r0, #18952	; 0x4a08
  10075c:	e3400014 	movt	r0, #20
  100760:	eb00f540 	bl	13dc68 <puts>
        return 1;
  100764:	e3a03001 	mov	r3, #1
  100768:	ea000000 	b	100770 <setnonblocking+0x64>
    }
    return old_option;
  10076c:	e51b3008 	ldr	r3, [fp, #-8]
}
  100770:	e1a00003 	mov	r0, r3
  100774:	e24bd004 	sub	sp, fp, #4
  100778:	e8bd8800 	pop	{fp, pc}

0010077c <socketpair>:

int socketpair(int domain, int type, int protocol, int sv[2])
{
  10077c:	e92d4810 	push	{r4, fp, lr}
  100780:	e28db008 	add	fp, sp, #8
  100784:	e24ddf43 	sub	sp, sp, #268	; 0x10c
  100788:	e50b0100 	str	r0, [fp, #-256]	; 0xffffff00
  10078c:	e50b1104 	str	r1, [fp, #-260]	; 0xfffffefc
  100790:	e50b2108 	str	r2, [fp, #-264]	; 0xfffffef8
  100794:	e50b310c 	str	r3, [fp, #-268]	; 0xfffffef4
    int listenfd = -1, acceptfd = -1, clientfd = -1;
  100798:	e3e03000 	mvn	r3, #0
  10079c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  1007a0:	e3e03000 	mvn	r3, #0
  1007a4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  1007a8:	e3e03000 	mvn	r3, #0
  1007ac:	e50b3010 	str	r3, [fp, #-16]
    /* for server, accept, client */
    struct sockaddr_in saddr, aaddr, caddr;
    socklen_t len = sizeof(struct sockaddr_in);
  1007b0:	e3a03010 	mov	r3, #16
  1007b4:	e50b3064 	str	r3, [fp, #-100]	; 0xffffff9c
    int on = 1;
  1007b8:	e3a03001 	mov	r3, #1
  1007bc:	e50b3068 	str	r3, [fp, #-104]	; 0xffffff98
    int fdopt;
    int rt_port;

    /* for select */
    int maxfdp = 0;
  1007c0:	e3a03000 	mov	r3, #0
  1007c4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    int rst;
    fd_set rfd;
    struct timeval timeout = {0, 1000};
  1007c8:	e3a02000 	mov	r2, #0
  1007cc:	e3a03000 	mov	r3, #0
  1007d0:	e14b2ffc 	strd	r2, [fp, #-252]	; 0xffffff04
  1007d4:	e3a03ffa 	mov	r3, #1000	; 0x3e8
  1007d8:	e50b30f4 	str	r3, [fp, #-244]	; 0xffffff0c

    /* server socket */
    if ((listenfd = socket(domain, type, protocol)) < 0)
  1007dc:	e51b2108 	ldr	r2, [fp, #-264]	; 0xfffffef8
  1007e0:	e51b1104 	ldr	r1, [fp, #-260]	; 0xfffffefc
  1007e4:	e51b0100 	ldr	r0, [fp, #-256]	; 0xffffff00
  1007e8:	eb00f3b2 	bl	13d6b8 <socket>
  1007ec:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
  1007f0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1007f4:	e3530000 	cmp	r3, #0
  1007f8:	aa00000f 	bge	10083c <socketpair+0xc0>
    {
        printf("Create listenfd socket error: %s(errno: %d)\n", strerror(errno), errno);
  1007fc:	eb00df54 	bl	138554 <__errno_location>
  100800:	e1a03000 	mov	r3, r0
  100804:	e5933000 	ldr	r3, [r3]
  100808:	e1a00003 	mov	r0, r3
  10080c:	eb00df72 	bl	1385dc <strerror>
  100810:	e1a04000 	mov	r4, r0
  100814:	eb00df4e 	bl	138554 <__errno_location>
  100818:	e1a03000 	mov	r3, r0
  10081c:	e5933000 	ldr	r3, [r3]
  100820:	e1a02003 	mov	r2, r3
  100824:	e1a01004 	mov	r1, r4
  100828:	e3040a20 	movw	r0, #18976	; 0x4a20
  10082c:	e3400014 	movt	r0, #20
  100830:	eb00f4fe 	bl	13dc30 <printf>
        return -1;
  100834:	e3e03000 	mvn	r3, #0
  100838:	ea000117 	b	100c9c <socketpair+0x520>
    }
    /* non-blocking */
    setnonblocking(listenfd);
  10083c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  100840:	ebffffb1 	bl	10070c <setnonblocking>

    /* get random port: 5001~65001 */
    srand((unsigned)time(NULL));
  100844:	e3a00000 	mov	r0, #0
  100848:	eb0106dc 	bl	1423c0 <time>
  10084c:	e1a02000 	mov	r2, r0
  100850:	e1a03001 	mov	r3, r1
  100854:	e1a03002 	mov	r3, r2
  100858:	e1a00003 	mov	r0, r3
  10085c:	eb00f3e2 	bl	13d7ec <srand>
    rt_port = rand() % 60000 + 5001;
  100860:	eb00f3e7 	bl	13d804 <rand>
  100864:	e1a02000 	mov	r2, r0
  100868:	e30b3273 	movw	r3, #45683	; 0xb273
  10086c:	e34435e7 	movt	r3, #17895	; 0x45e7
  100870:	e0c10392 	smull	r0, r1, r2, r3
  100874:	e1a01741 	asr	r1, r1, #14
  100878:	e1a03fc2 	asr	r3, r2, #31
  10087c:	e0413003 	sub	r3, r1, r3
  100880:	e30e1a60 	movw	r1, #60000	; 0xea60
  100884:	e0030391 	mul	r3, r1, r3
  100888:	e0423003 	sub	r3, r2, r3
  10088c:	e2833d4e 	add	r3, r3, #4992	; 0x1380
  100890:	e2833009 	add	r3, r3, #9
  100894:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8

    /* bind and listen */
    memset(&saddr, 0, sizeof(saddr));
  100898:	e24b3040 	sub	r3, fp, #64	; 0x40
  10089c:	e3a02010 	mov	r2, #16
  1008a0:	e3a01000 	mov	r1, #0
  1008a4:	e1a00003 	mov	r0, r3
  1008a8:	eb01000f 	bl	1408ec <memset>
    memset(&aaddr, 0, sizeof(aaddr));
  1008ac:	e24b3050 	sub	r3, fp, #80	; 0x50
  1008b0:	e3a02010 	mov	r2, #16
  1008b4:	e3a01000 	mov	r1, #0
  1008b8:	e1a00003 	mov	r0, r3
  1008bc:	eb01000a 	bl	1408ec <memset>
    saddr.sin_family = domain;
  1008c0:	e51b3100 	ldr	r3, [fp, #-256]	; 0xffffff00
  1008c4:	e6ff3073 	uxth	r3, r3
  1008c8:	e14b34b0 	strh	r3, [fp, #-64]	; 0xffffffc0
    saddr.sin_port = htons(rt_port);
  1008cc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1008d0:	e6ff3073 	uxth	r3, r3
  1008d4:	e1a00003 	mov	r0, r3
  1008d8:	eb00f344 	bl	13d5f0 <htons>
  1008dc:	e1a03000 	mov	r3, r0
  1008e0:	e14b33be 	strh	r3, [fp, #-62]	; 0xffffffc2
    saddr.sin_addr.s_addr = htonl(INADDR_ANY);
  1008e4:	e3a00000 	mov	r0, #0
  1008e8:	eb00f33b 	bl	13d5dc <htonl>
  1008ec:	e1a03000 	mov	r3, r0
  1008f0:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4

    if (setsockopt(listenfd, SOL_SOCKET, SO_REUSEADDR, (const char*)&on, sizeof(int)) < 0)
  1008f4:	e24b2068 	sub	r2, fp, #104	; 0x68
  1008f8:	e3a03004 	mov	r3, #4
  1008fc:	e58d3000 	str	r3, [sp]
  100900:	e1a03002 	mov	r3, r2
  100904:	e3a02002 	mov	r2, #2
  100908:	e3a01001 	mov	r1, #1
  10090c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  100910:	eb00f34f 	bl	13d654 <setsockopt>
  100914:	e1a03000 	mov	r3, r0
  100918:	e3530000 	cmp	r3, #0
  10091c:	aa000003 	bge	100930 <socketpair+0x1b4>
    {
        perror("Setsockopt reuseadd failed");
  100920:	e3040a50 	movw	r0, #19024	; 0x4a50
  100924:	e3400014 	movt	r0, #20
  100928:	eb00f477 	bl	13db0c <perror>
        goto __exit;
  10092c:	ea0000cf 	b	100c70 <socketpair+0x4f4>
    }

    if (bind(listenfd, (struct sockaddr*)&saddr, sizeof(saddr)) == -1)
  100930:	e24b3040 	sub	r3, fp, #64	; 0x40
  100934:	e3a02010 	mov	r2, #16
  100938:	e1a01003 	mov	r1, r3
  10093c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  100940:	eb00f300 	bl	13d548 <bind>
  100944:	e1a03000 	mov	r3, r0
  100948:	e3730001 	cmn	r3, #1
  10094c:	1a00000e 	bne	10098c <socketpair+0x210>
    {
        printf("Bind socket error: %s(errno: %d), fd=%d\n", strerror(errno), errno, listenfd);
  100950:	eb00deff 	bl	138554 <__errno_location>
  100954:	e1a03000 	mov	r3, r0
  100958:	e5933000 	ldr	r3, [r3]
  10095c:	e1a00003 	mov	r0, r3
  100960:	eb00df1d 	bl	1385dc <strerror>
  100964:	e1a04000 	mov	r4, r0
  100968:	eb00def9 	bl	138554 <__errno_location>
  10096c:	e1a03000 	mov	r3, r0
  100970:	e5932000 	ldr	r2, [r3]
  100974:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100978:	e1a01004 	mov	r1, r4
  10097c:	e3040a6c 	movw	r0, #19052	; 0x4a6c
  100980:	e3400014 	movt	r0, #20
  100984:	eb00f4a9 	bl	13dc30 <printf>
        goto __exit;
  100988:	ea0000b8 	b	100c70 <socketpair+0x4f4>
    }

    if (listen(listenfd, 10) == -1)
  10098c:	e3a0100a 	mov	r1, #10
  100990:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  100994:	eb00f31a 	bl	13d604 <listen>
  100998:	e1a03000 	mov	r3, r0
  10099c:	e3730001 	cmn	r3, #1
  1009a0:	1a00000e 	bne	1009e0 <socketpair+0x264>
    {
        printf("Listen socket error: %s(errno: %d)\n", strerror(errno), errno);
  1009a4:	eb00deea 	bl	138554 <__errno_location>
  1009a8:	e1a03000 	mov	r3, r0
  1009ac:	e5933000 	ldr	r3, [r3]
  1009b0:	e1a00003 	mov	r0, r3
  1009b4:	eb00df08 	bl	1385dc <strerror>
  1009b8:	e1a04000 	mov	r4, r0
  1009bc:	eb00dee4 	bl	138554 <__errno_location>
  1009c0:	e1a03000 	mov	r3, r0
  1009c4:	e5933000 	ldr	r3, [r3]
  1009c8:	e1a02003 	mov	r2, r3
  1009cc:	e1a01004 	mov	r1, r4
  1009d0:	e3040a98 	movw	r0, #19096	; 0x4a98
  1009d4:	e3400014 	movt	r0, #20
  1009d8:	eb00f494 	bl	13dc30 <printf>
        goto __exit;
  1009dc:	ea0000a3 	b	100c70 <socketpair+0x4f4>
    }

    /* client socket */
    if ((clientfd = socket(domain, type, protocol)) < 0)
  1009e0:	e51b2108 	ldr	r2, [fp, #-264]	; 0xfffffef8
  1009e4:	e51b1104 	ldr	r1, [fp, #-260]	; 0xfffffefc
  1009e8:	e51b0100 	ldr	r0, [fp, #-256]	; 0xffffff00
  1009ec:	eb00f331 	bl	13d6b8 <socket>
  1009f0:	e50b0010 	str	r0, [fp, #-16]
  1009f4:	e51b3010 	ldr	r3, [fp, #-16]
  1009f8:	e3530000 	cmp	r3, #0
  1009fc:	aa00000e 	bge	100a3c <socketpair+0x2c0>
    {
        printf("Create clientfd socket error: %s(errno: %d)\n", strerror(errno), errno);
  100a00:	eb00ded3 	bl	138554 <__errno_location>
  100a04:	e1a03000 	mov	r3, r0
  100a08:	e5933000 	ldr	r3, [r3]
  100a0c:	e1a00003 	mov	r0, r3
  100a10:	eb00def1 	bl	1385dc <strerror>
  100a14:	e1a04000 	mov	r4, r0
  100a18:	eb00decd 	bl	138554 <__errno_location>
  100a1c:	e1a03000 	mov	r3, r0
  100a20:	e5933000 	ldr	r3, [r3]
  100a24:	e1a02003 	mov	r2, r3
  100a28:	e1a01004 	mov	r1, r4
  100a2c:	e3040abc 	movw	r0, #19132	; 0x4abc
  100a30:	e3400014 	movt	r0, #20
  100a34:	eb00f47d 	bl	13dc30 <printf>
        goto __exit;
  100a38:	ea00008c 	b	100c70 <socketpair+0x4f4>
    }

    /* non-blocking */
    fdopt = setnonblocking(clientfd);
  100a3c:	e51b0010 	ldr	r0, [fp, #-16]
  100a40:	ebffff31 	bl	10070c <setnonblocking>
  100a44:	e50b002c 	str	r0, [fp, #-44]	; 0xffffffd4
    /* client connect */
    memset(&caddr, 0, sizeof(caddr));
  100a48:	e24b3060 	sub	r3, fp, #96	; 0x60
  100a4c:	e3a02010 	mov	r2, #16
  100a50:	e3a01000 	mov	r1, #0
  100a54:	e1a00003 	mov	r0, r3
  100a58:	eb00ffa3 	bl	1408ec <memset>
    caddr.sin_family = domain;
  100a5c:	e51b3100 	ldr	r3, [fp, #-256]	; 0xffffff00
  100a60:	e6ff3073 	uxth	r3, r3
  100a64:	e14b36b0 	strh	r3, [fp, #-96]	; 0xffffffa0
    caddr.sin_port =htons(rt_port);
  100a68:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  100a6c:	e6ff3073 	uxth	r3, r3
  100a70:	e1a00003 	mov	r0, r3
  100a74:	eb00f2dd 	bl	13d5f0 <htons>
  100a78:	e1a03000 	mov	r3, r0
  100a7c:	e14b35be 	strh	r3, [fp, #-94]	; 0xffffffa2
    caddr.sin_addr.s_addr=htonl(INADDR_ANY);
  100a80:	e3a00000 	mov	r0, #0
  100a84:	eb00f2d4 	bl	13d5dc <htonl>
  100a88:	e1a03000 	mov	r3, r0
  100a8c:	e50b305c 	str	r3, [fp, #-92]	; 0xffffffa4
    connect(clientfd, (struct sockaddr*)&caddr, sizeof(caddr));
  100a90:	e24b3060 	sub	r3, fp, #96	; 0x60
  100a94:	e3a02010 	mov	r2, #16
  100a98:	e1a01003 	mov	r1, r3
  100a9c:	e51b0010 	ldr	r0, [fp, #-16]
  100aa0:	eb00f2be 	bl	13d5a0 <connect>

    /* do select */
    FD_ZERO(&rfd);
  100aa4:	e24b30e8 	sub	r3, fp, #232	; 0xe8
  100aa8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  100aac:	e3a03020 	mov	r3, #32
  100ab0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  100ab4:	ea000007 	b	100ad8 <socketpair+0x35c>
  100ab8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  100abc:	e2832004 	add	r2, r3, #4
  100ac0:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  100ac4:	e3a02000 	mov	r2, #0
  100ac8:	e5832000 	str	r2, [r3]
  100acc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  100ad0:	e2433001 	sub	r3, r3, #1
  100ad4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  100ad8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  100adc:	e3530000 	cmp	r3, #0
  100ae0:	1afffff4 	bne	100ab8 <socketpair+0x33c>
    FD_SET(listenfd, &rfd);
  100ae4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100ae8:	e1a022a3 	lsr	r2, r3, #5
  100aec:	e1a03102 	lsl	r3, r2, #2
  100af0:	e24b100c 	sub	r1, fp, #12
  100af4:	e0813003 	add	r3, r1, r3
  100af8:	e51310dc 	ldr	r1, [r3, #-220]	; 0xffffff24
  100afc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100b00:	e203301f 	and	r3, r3, #31
  100b04:	e3a00001 	mov	r0, #1
  100b08:	e1a03310 	lsl	r3, r0, r3
  100b0c:	e1811003 	orr	r1, r1, r3
  100b10:	e1a03102 	lsl	r3, r2, #2
  100b14:	e24b200c 	sub	r2, fp, #12
  100b18:	e0823003 	add	r3, r2, r3
  100b1c:	e50310dc 	str	r1, [r3, #-220]	; 0xffffff24
    FD_SET(clientfd, &rfd);
  100b20:	e51b3010 	ldr	r3, [fp, #-16]
  100b24:	e1a022a3 	lsr	r2, r3, #5
  100b28:	e1a03102 	lsl	r3, r2, #2
  100b2c:	e24b100c 	sub	r1, fp, #12
  100b30:	e0813003 	add	r3, r1, r3
  100b34:	e51310dc 	ldr	r1, [r3, #-220]	; 0xffffff24
  100b38:	e51b3010 	ldr	r3, [fp, #-16]
  100b3c:	e203301f 	and	r3, r3, #31
  100b40:	e3a00001 	mov	r0, #1
  100b44:	e1a03310 	lsl	r3, r0, r3
  100b48:	e1811003 	orr	r1, r1, r3
  100b4c:	e1a03102 	lsl	r3, r2, #2
  100b50:	e24b200c 	sub	r2, fp, #12
  100b54:	e0823003 	add	r3, r2, r3
  100b58:	e50310dc 	str	r1, [r3, #-220]	; 0xffffff24
    maxfdp = listenfd > clientfd ? listenfd+1 : clientfd+1;
  100b5c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  100b60:	e51b3010 	ldr	r3, [fp, #-16]
  100b64:	e1520003 	cmp	r2, r3
  100b68:	da000002 	ble	100b78 <socketpair+0x3fc>
  100b6c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100b70:	e2833001 	add	r3, r3, #1
  100b74:	ea000001 	b	100b80 <socketpair+0x404>
  100b78:	e51b3010 	ldr	r3, [fp, #-16]
  100b7c:	e2833001 	add	r3, r3, #1
  100b80:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    rst = select(maxfdp, &rfd, NULL, NULL, &timeout);
  100b84:	e24b10e8 	sub	r1, fp, #232	; 0xe8
  100b88:	e24b30fc 	sub	r3, fp, #252	; 0xfc
  100b8c:	e58d3000 	str	r3, [sp]
  100b90:	e3a03000 	mov	r3, #0
  100b94:	e3a02000 	mov	r2, #0
  100b98:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  100b9c:	eb00f32a 	bl	13d84c <select>
  100ba0:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
    switch(rst)
  100ba4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  100ba8:	e3730001 	cmn	r3, #1
  100bac:	0a000002 	beq	100bbc <socketpair+0x440>
  100bb0:	e3530000 	cmp	r3, #0
  100bb4:	0a000004 	beq	100bcc <socketpair+0x450>
  100bb8:	ea000007 	b	100bdc <socketpair+0x460>
    {
    case -1:
        perror("select error");
  100bbc:	e3040aec 	movw	r0, #19180	; 0x4aec
  100bc0:	e3400014 	movt	r0, #20
  100bc4:	eb00f3d0 	bl	13db0c <perror>
        goto __exit;
  100bc8:	ea000028 	b	100c70 <socketpair+0x4f4>
        break;
    case 0:
        perror("continue");
  100bcc:	e3040afc 	movw	r0, #19196	; 0x4afc
  100bd0:	e3400014 	movt	r0, #20
  100bd4:	eb00f3cc 	bl	13db0c <perror>
        break;
  100bd8:	ea000024 	b	100c70 <socketpair+0x4f4>
    default:
        if (FD_ISSET(listenfd, &rfd))
  100bdc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100be0:	e1a032a3 	lsr	r3, r3, #5
  100be4:	e1a03103 	lsl	r3, r3, #2
  100be8:	e24b200c 	sub	r2, fp, #12
  100bec:	e0823003 	add	r3, r2, r3
  100bf0:	e51320dc 	ldr	r2, [r3, #-220]	; 0xffffff24
  100bf4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100bf8:	e203301f 	and	r3, r3, #31
  100bfc:	e1a03332 	lsr	r3, r2, r3
  100c00:	e2033001 	and	r3, r3, #1
  100c04:	e3530000 	cmp	r3, #0
  100c08:	0a000017 	beq	100c6c <socketpair+0x4f0>
        {
            if ((acceptfd = accept(listenfd, (struct sockaddr*)&caddr, &len)) > 0)
  100c0c:	e24b2064 	sub	r2, fp, #100	; 0x64
  100c10:	e24b3060 	sub	r3, fp, #96	; 0x60
  100c14:	e1a01003 	mov	r1, r3
  100c18:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  100c1c:	eb00f23a 	bl	13d50c <accept>
  100c20:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  100c24:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  100c28:	e3530000 	cmp	r3, #0
  100c2c:	da00000c 	ble	100c64 <socketpair+0x4e8>
            {
                close(listenfd);
  100c30:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  100c34:	eb0105ed 	bl	1423f0 <close>
                /* set old optional back */
                fcntl(clientfd, F_SETFL, fdopt);
  100c38:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  100c3c:	e3a01004 	mov	r1, #4
  100c40:	e51b0010 	ldr	r0, [fp, #-16]
  100c44:	eb00de91 	bl	138690 <fcntl>
                sv[0] = clientfd;
  100c48:	e51b310c 	ldr	r3, [fp, #-268]	; 0xfffffef4
  100c4c:	e51b2010 	ldr	r2, [fp, #-16]
  100c50:	e5832000 	str	r2, [r3]
                sv[1] = acceptfd;
  100c54:	e51b310c 	ldr	r3, [fp, #-268]	; 0xfffffef4
  100c58:	e2833004 	add	r3, r3, #4
  100c5c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  100c60:	e5832000 	str	r2, [r3]
            }

            return 0;
  100c64:	e3a03000 	mov	r3, #0
  100c68:	ea00000b 	b	100c9c <socketpair+0x520>
        }
    }

__exit:
  100c6c:	e320f000 	nop	{0}
    if (listenfd >= 0) close(listenfd);
  100c70:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100c74:	e3530000 	cmp	r3, #0
  100c78:	ba000001 	blt	100c84 <socketpair+0x508>
  100c7c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  100c80:	eb0105da 	bl	1423f0 <close>
    if (clientfd >= 0) close(clientfd);
  100c84:	e51b3010 	ldr	r3, [fp, #-16]
  100c88:	e3530000 	cmp	r3, #0
  100c8c:	ba000001 	blt	100c98 <socketpair+0x51c>
  100c90:	e51b0010 	ldr	r0, [fp, #-16]
  100c94:	eb0105d5 	bl	1423f0 <close>

    return -1;
  100c98:	e3e03000 	mvn	r3, #0
}
  100c9c:	e1a00003 	mov	r0, r3
  100ca0:	e24bd008 	sub	sp, fp, #8
  100ca4:	e8bd8810 	pop	{r4, fp, pc}

00100ca8 <rt_mutex_create>:
            return RT_EIO;\
        }\
    } while (0)

rt_mutex_t rt_mutex_create(const char *name, rt_uint8_t flag)
{
  100ca8:	e92d4800 	push	{fp, lr}
  100cac:	e28db004 	add	fp, sp, #4
  100cb0:	e24dd010 	sub	sp, sp, #16
  100cb4:	e50b0010 	str	r0, [fp, #-16]
  100cb8:	e1a03001 	mov	r3, r1
  100cbc:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    RT_USER_IPC_CREATE(RT_Object_Class_Mutex, _NRSYS_mutex_create, name, flag);
  100cc0:	e3a00008 	mov	r0, #8
  100cc4:	eb00ef40 	bl	13c9cc <malloc>
  100cc8:	e1a03000 	mov	r3, r0
  100ccc:	e50b3008 	str	r3, [fp, #-8]
  100cd0:	e51b3008 	ldr	r3, [fp, #-8]
  100cd4:	e3530000 	cmp	r3, #0
  100cd8:	1a000001 	bne	100ce4 <rt_mutex_create+0x3c>
  100cdc:	e3a03000 	mov	r3, #0
  100ce0:	ea000015 	b	100d3c <rt_mutex_create+0x94>
  100ce4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  100ce8:	e1a02003 	mov	r2, r3
  100cec:	e51b1010 	ldr	r1, [fp, #-16]
  100cf0:	e3a00016 	mov	r0, #22
  100cf4:	eb00eb77 	bl	13bad8 <syscall>
  100cf8:	e1a03000 	mov	r3, r0
  100cfc:	e1a02003 	mov	r2, r3
  100d00:	e51b3008 	ldr	r3, [fp, #-8]
  100d04:	e5832004 	str	r2, [r3, #4]
  100d08:	e51b3008 	ldr	r3, [fp, #-8]
  100d0c:	e5933004 	ldr	r3, [r3, #4]
  100d10:	e3530000 	cmp	r3, #0
  100d14:	0a000003 	beq	100d28 <rt_mutex_create+0x80>
  100d18:	e51b3008 	ldr	r3, [fp, #-8]
  100d1c:	e3a02003 	mov	r2, #3
  100d20:	e5832000 	str	r2, [r3]
  100d24:	ea000003 	b	100d38 <rt_mutex_create+0x90>
  100d28:	e51b0008 	ldr	r0, [fp, #-8]
  100d2c:	eb00f0e2 	bl	13d0bc <free>
  100d30:	e3a03000 	mov	r3, #0
  100d34:	e50b3008 	str	r3, [fp, #-8]
  100d38:	e51b3008 	ldr	r3, [fp, #-8]
}
  100d3c:	e1a00003 	mov	r0, r3
  100d40:	e24bd004 	sub	sp, fp, #4
  100d44:	e8bd8800 	pop	{fp, pc}

00100d48 <rt_mutex_init>:

rt_err_t rt_mutex_init(rt_mutex_t mutex, const char *name, rt_uint8_t flag)
{
  100d48:	e92d4800 	push	{fp, lr}
  100d4c:	e28db004 	add	fp, sp, #4
  100d50:	e24dd010 	sub	sp, sp, #16
  100d54:	e50b0008 	str	r0, [fp, #-8]
  100d58:	e50b100c 	str	r1, [fp, #-12]
  100d5c:	e1a03002 	mov	r3, r2
  100d60:	e54b300d 	strb	r3, [fp, #-13]
    RT_USER_IPC_INIT(mutex, RT_Object_Class_Mutex, _NRSYS_mutex_create, name, flag);
  100d64:	e51b3008 	ldr	r3, [fp, #-8]
  100d68:	e3530000 	cmp	r3, #0
  100d6c:	1a000001 	bne	100d78 <rt_mutex_init+0x30>
  100d70:	e3a03008 	mov	r3, #8
  100d74:	ea000012 	b	100dc4 <rt_mutex_init+0x7c>
  100d78:	e55b300d 	ldrb	r3, [fp, #-13]
  100d7c:	e1a02003 	mov	r2, r3
  100d80:	e51b100c 	ldr	r1, [fp, #-12]
  100d84:	e3a00016 	mov	r0, #22
  100d88:	eb00eb52 	bl	13bad8 <syscall>
  100d8c:	e1a03000 	mov	r3, r0
  100d90:	e1a02003 	mov	r2, r3
  100d94:	e51b3008 	ldr	r3, [fp, #-8]
  100d98:	e5832004 	str	r2, [r3, #4]
  100d9c:	e51b3008 	ldr	r3, [fp, #-8]
  100da0:	e5933004 	ldr	r3, [r3, #4]
  100da4:	e3530000 	cmp	r3, #0
  100da8:	0a000004 	beq	100dc0 <rt_mutex_init+0x78>
  100dac:	e51b3008 	ldr	r3, [fp, #-8]
  100db0:	e3a02003 	mov	r2, #3
  100db4:	e5832000 	str	r2, [r3]
  100db8:	e3a03000 	mov	r3, #0
  100dbc:	ea000000 	b	100dc4 <rt_mutex_init+0x7c>
  100dc0:	e3a03001 	mov	r3, #1
}
  100dc4:	e1a00003 	mov	r0, r3
  100dc8:	e24bd004 	sub	sp, fp, #4
  100dcc:	e8bd8800 	pop	{fp, pc}

00100dd0 <rt_mutex_delete>:

rt_err_t rt_mutex_delete(rt_mutex_t mutex)
{
  100dd0:	e92d4800 	push	{fp, lr}
  100dd4:	e28db004 	add	fp, sp, #4
  100dd8:	e24dd010 	sub	sp, sp, #16
  100ddc:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DELETE(mutex, RT_Object_Class_Mutex, _NRSYS_mutex_delete);
  100de0:	e51b3010 	ldr	r3, [fp, #-16]
  100de4:	e3530000 	cmp	r3, #0
  100de8:	0a000003 	beq	100dfc <rt_mutex_delete+0x2c>
  100dec:	e51b3010 	ldr	r3, [fp, #-16]
  100df0:	e5933004 	ldr	r3, [r3, #4]
  100df4:	e3530000 	cmp	r3, #0
  100df8:	1a000001 	bne	100e04 <rt_mutex_delete+0x34>
  100dfc:	e3a03008 	mov	r3, #8
  100e00:	ea000013 	b	100e54 <rt_mutex_delete+0x84>
  100e04:	e51b3010 	ldr	r3, [fp, #-16]
  100e08:	e5933000 	ldr	r3, [r3]
  100e0c:	e3530003 	cmp	r3, #3
  100e10:	0a000001 	beq	100e1c <rt_mutex_delete+0x4c>
  100e14:	e3a03008 	mov	r3, #8
  100e18:	ea00000d 	b	100e54 <rt_mutex_delete+0x84>
  100e1c:	e51b3010 	ldr	r3, [fp, #-16]
  100e20:	e5933004 	ldr	r3, [r3, #4]
  100e24:	e1a01003 	mov	r1, r3
  100e28:	e3a00017 	mov	r0, #23
  100e2c:	eb00eb29 	bl	13bad8 <syscall>
  100e30:	e50b0008 	str	r0, [fp, #-8]
  100e34:	e51b3008 	ldr	r3, [fp, #-8]
  100e38:	e3530000 	cmp	r3, #0
  100e3c:	0a000001 	beq	100e48 <rt_mutex_delete+0x78>
  100e40:	e51b3008 	ldr	r3, [fp, #-8]
  100e44:	ea000002 	b	100e54 <rt_mutex_delete+0x84>
  100e48:	e51b0010 	ldr	r0, [fp, #-16]
  100e4c:	eb00f09a 	bl	13d0bc <free>
  100e50:	e3a03000 	mov	r3, #0
}
  100e54:	e1a00003 	mov	r0, r3
  100e58:	e24bd004 	sub	sp, fp, #4
  100e5c:	e8bd8800 	pop	{fp, pc}

00100e60 <rt_mutex_detach>:

rt_err_t rt_mutex_detach(rt_mutex_t mutex)
{
  100e60:	e92d4800 	push	{fp, lr}
  100e64:	e28db004 	add	fp, sp, #4
  100e68:	e24dd010 	sub	sp, sp, #16
  100e6c:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DETACH(mutex, RT_Object_Class_Mutex, _NRSYS_mutex_delete);
  100e70:	e51b3010 	ldr	r3, [fp, #-16]
  100e74:	e3530000 	cmp	r3, #0
  100e78:	0a000003 	beq	100e8c <rt_mutex_detach+0x2c>
  100e7c:	e51b3010 	ldr	r3, [fp, #-16]
  100e80:	e5933004 	ldr	r3, [r3, #4]
  100e84:	e3530000 	cmp	r3, #0
  100e88:	1a000001 	bne	100e94 <rt_mutex_detach+0x34>
  100e8c:	e3a03008 	mov	r3, #8
  100e90:	ea000017 	b	100ef4 <rt_mutex_detach+0x94>
  100e94:	e51b3010 	ldr	r3, [fp, #-16]
  100e98:	e5933000 	ldr	r3, [r3]
  100e9c:	e3530003 	cmp	r3, #3
  100ea0:	0a000001 	beq	100eac <rt_mutex_detach+0x4c>
  100ea4:	e3a03008 	mov	r3, #8
  100ea8:	ea000011 	b	100ef4 <rt_mutex_detach+0x94>
  100eac:	e51b3010 	ldr	r3, [fp, #-16]
  100eb0:	e5933004 	ldr	r3, [r3, #4]
  100eb4:	e1a01003 	mov	r1, r3
  100eb8:	e3a00017 	mov	r0, #23
  100ebc:	eb00eb05 	bl	13bad8 <syscall>
  100ec0:	e50b0008 	str	r0, [fp, #-8]
  100ec4:	e51b3008 	ldr	r3, [fp, #-8]
  100ec8:	e3530000 	cmp	r3, #0
  100ecc:	0a000001 	beq	100ed8 <rt_mutex_detach+0x78>
  100ed0:	e51b3008 	ldr	r3, [fp, #-8]
  100ed4:	ea000006 	b	100ef4 <rt_mutex_detach+0x94>
  100ed8:	e51b3010 	ldr	r3, [fp, #-16]
  100edc:	e3a02000 	mov	r2, #0
  100ee0:	e5832000 	str	r2, [r3]
  100ee4:	e51b3010 	ldr	r3, [fp, #-16]
  100ee8:	e3a02000 	mov	r2, #0
  100eec:	e5832004 	str	r2, [r3, #4]
  100ef0:	e3a03000 	mov	r3, #0
}
  100ef4:	e1a00003 	mov	r0, r3
  100ef8:	e24bd004 	sub	sp, fp, #4
  100efc:	e8bd8800 	pop	{fp, pc}

00100f00 <rt_mutex_take>:

rt_err_t rt_mutex_take(rt_mutex_t mutex, rt_int32_t time)
{
  100f00:	e92d4800 	push	{fp, lr}
  100f04:	e28db004 	add	fp, sp, #4
  100f08:	e24dd008 	sub	sp, sp, #8
  100f0c:	e50b0008 	str	r0, [fp, #-8]
  100f10:	e50b100c 	str	r1, [fp, #-12]
    RT_USER_IPC_CHECK(mutex, RT_Object_Class_Mutex);
  100f14:	e51b3008 	ldr	r3, [fp, #-8]
  100f18:	e3530000 	cmp	r3, #0
  100f1c:	0a000003 	beq	100f30 <rt_mutex_take+0x30>
  100f20:	e51b3008 	ldr	r3, [fp, #-8]
  100f24:	e5933004 	ldr	r3, [r3, #4]
  100f28:	e3530000 	cmp	r3, #0
  100f2c:	1a000001 	bne	100f38 <rt_mutex_take+0x38>
  100f30:	e3a03008 	mov	r3, #8
  100f34:	ea00000c 	b	100f6c <rt_mutex_take+0x6c>
  100f38:	e51b3008 	ldr	r3, [fp, #-8]
  100f3c:	e5933000 	ldr	r3, [r3]
  100f40:	e3530003 	cmp	r3, #3
  100f44:	0a000001 	beq	100f50 <rt_mutex_take+0x50>
  100f48:	e3a03008 	mov	r3, #8
  100f4c:	ea000006 	b	100f6c <rt_mutex_take+0x6c>
    return syscall(_NRSYS_mutex_take, mutex->data, time);
  100f50:	e51b3008 	ldr	r3, [fp, #-8]
  100f54:	e5933004 	ldr	r3, [r3, #4]
  100f58:	e51b200c 	ldr	r2, [fp, #-12]
  100f5c:	e1a01003 	mov	r1, r3
  100f60:	e3a00018 	mov	r0, #24
  100f64:	eb00eadb 	bl	13bad8 <syscall>
  100f68:	e1a03000 	mov	r3, r0
}
  100f6c:	e1a00003 	mov	r0, r3
  100f70:	e24bd004 	sub	sp, fp, #4
  100f74:	e8bd8800 	pop	{fp, pc}

00100f78 <rt_mutex_release>:

rt_err_t rt_mutex_release(rt_mutex_t mutex)
{
  100f78:	e92d4800 	push	{fp, lr}
  100f7c:	e28db004 	add	fp, sp, #4
  100f80:	e24dd008 	sub	sp, sp, #8
  100f84:	e50b0008 	str	r0, [fp, #-8]
    RT_USER_IPC_CHECK(mutex, RT_Object_Class_Mutex);
  100f88:	e51b3008 	ldr	r3, [fp, #-8]
  100f8c:	e3530000 	cmp	r3, #0
  100f90:	0a000003 	beq	100fa4 <rt_mutex_release+0x2c>
  100f94:	e51b3008 	ldr	r3, [fp, #-8]
  100f98:	e5933004 	ldr	r3, [r3, #4]
  100f9c:	e3530000 	cmp	r3, #0
  100fa0:	1a000001 	bne	100fac <rt_mutex_release+0x34>
  100fa4:	e3a03008 	mov	r3, #8
  100fa8:	ea00000b 	b	100fdc <rt_mutex_release+0x64>
  100fac:	e51b3008 	ldr	r3, [fp, #-8]
  100fb0:	e5933000 	ldr	r3, [r3]
  100fb4:	e3530003 	cmp	r3, #3
  100fb8:	0a000001 	beq	100fc4 <rt_mutex_release+0x4c>
  100fbc:	e3a03008 	mov	r3, #8
  100fc0:	ea000005 	b	100fdc <rt_mutex_release+0x64>
    return syscall(_NRSYS_mutex_release, mutex->data);
  100fc4:	e51b3008 	ldr	r3, [fp, #-8]
  100fc8:	e5933004 	ldr	r3, [r3, #4]
  100fcc:	e1a01003 	mov	r1, r3
  100fd0:	e3a00019 	mov	r0, #25
  100fd4:	eb00eabf 	bl	13bad8 <syscall>
  100fd8:	e1a03000 	mov	r3, r0
}
  100fdc:	e1a00003 	mov	r0, r3
  100fe0:	e24bd004 	sub	sp, fp, #4
  100fe4:	e8bd8800 	pop	{fp, pc}

00100fe8 <rt_sem_create>:

rt_sem_t rt_sem_create(const char *name, rt_uint32_t value, rt_uint8_t flag)
{
  100fe8:	e92d4800 	push	{fp, lr}
  100fec:	e28db004 	add	fp, sp, #4
  100ff0:	e24dd018 	sub	sp, sp, #24
  100ff4:	e50b0010 	str	r0, [fp, #-16]
  100ff8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  100ffc:	e1a03002 	mov	r3, r2
  101000:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
    RT_USER_IPC_CREATE(RT_Object_Class_Semaphore, _NRSYS_sem_create, name, value, flag);
  101004:	e3a00008 	mov	r0, #8
  101008:	eb00ee6f 	bl	13c9cc <malloc>
  10100c:	e1a03000 	mov	r3, r0
  101010:	e50b3008 	str	r3, [fp, #-8]
  101014:	e51b3008 	ldr	r3, [fp, #-8]
  101018:	e3530000 	cmp	r3, #0
  10101c:	1a000001 	bne	101028 <rt_sem_create+0x40>
  101020:	e3a03000 	mov	r3, #0
  101024:	ea000015 	b	101080 <rt_sem_create+0x98>
  101028:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  10102c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  101030:	e51b1010 	ldr	r1, [fp, #-16]
  101034:	e3a00012 	mov	r0, #18
  101038:	eb00eaa6 	bl	13bad8 <syscall>
  10103c:	e1a03000 	mov	r3, r0
  101040:	e1a02003 	mov	r2, r3
  101044:	e51b3008 	ldr	r3, [fp, #-8]
  101048:	e5832004 	str	r2, [r3, #4]
  10104c:	e51b3008 	ldr	r3, [fp, #-8]
  101050:	e5933004 	ldr	r3, [r3, #4]
  101054:	e3530000 	cmp	r3, #0
  101058:	0a000003 	beq	10106c <rt_sem_create+0x84>
  10105c:	e51b3008 	ldr	r3, [fp, #-8]
  101060:	e3a02002 	mov	r2, #2
  101064:	e5832000 	str	r2, [r3]
  101068:	ea000003 	b	10107c <rt_sem_create+0x94>
  10106c:	e51b0008 	ldr	r0, [fp, #-8]
  101070:	eb00f011 	bl	13d0bc <free>
  101074:	e3a03000 	mov	r3, #0
  101078:	e50b3008 	str	r3, [fp, #-8]
  10107c:	e51b3008 	ldr	r3, [fp, #-8]
}
  101080:	e1a00003 	mov	r0, r3
  101084:	e24bd004 	sub	sp, fp, #4
  101088:	e8bd8800 	pop	{fp, pc}

0010108c <rt_sem_init>:

rt_err_t rt_sem_init(rt_sem_t sem,
                     const char *name,
                     rt_uint32_t value,
                     rt_uint8_t  flag)
{
  10108c:	e92d4800 	push	{fp, lr}
  101090:	e28db004 	add	fp, sp, #4
  101094:	e24dd010 	sub	sp, sp, #16
  101098:	e50b0008 	str	r0, [fp, #-8]
  10109c:	e50b100c 	str	r1, [fp, #-12]
  1010a0:	e50b2010 	str	r2, [fp, #-16]
  1010a4:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    RT_USER_IPC_INIT(sem, RT_Object_Class_Semaphore, _NRSYS_sem_create, name, value, flag);
  1010a8:	e51b3008 	ldr	r3, [fp, #-8]
  1010ac:	e3530000 	cmp	r3, #0
  1010b0:	1a000001 	bne	1010bc <rt_sem_init+0x30>
  1010b4:	e3a03008 	mov	r3, #8
  1010b8:	ea000012 	b	101108 <rt_sem_init+0x7c>
  1010bc:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  1010c0:	e51b2010 	ldr	r2, [fp, #-16]
  1010c4:	e51b100c 	ldr	r1, [fp, #-12]
  1010c8:	e3a00012 	mov	r0, #18
  1010cc:	eb00ea81 	bl	13bad8 <syscall>
  1010d0:	e1a03000 	mov	r3, r0
  1010d4:	e1a02003 	mov	r2, r3
  1010d8:	e51b3008 	ldr	r3, [fp, #-8]
  1010dc:	e5832004 	str	r2, [r3, #4]
  1010e0:	e51b3008 	ldr	r3, [fp, #-8]
  1010e4:	e5933004 	ldr	r3, [r3, #4]
  1010e8:	e3530000 	cmp	r3, #0
  1010ec:	0a000004 	beq	101104 <rt_sem_init+0x78>
  1010f0:	e51b3008 	ldr	r3, [fp, #-8]
  1010f4:	e3a02002 	mov	r2, #2
  1010f8:	e5832000 	str	r2, [r3]
  1010fc:	e3a03000 	mov	r3, #0
  101100:	ea000000 	b	101108 <rt_sem_init+0x7c>
  101104:	e3a03001 	mov	r3, #1
}
  101108:	e1a00003 	mov	r0, r3
  10110c:	e24bd004 	sub	sp, fp, #4
  101110:	e8bd8800 	pop	{fp, pc}

00101114 <rt_sem_delete>:

rt_err_t rt_sem_delete(rt_sem_t sem)
{
  101114:	e92d4800 	push	{fp, lr}
  101118:	e28db004 	add	fp, sp, #4
  10111c:	e24dd010 	sub	sp, sp, #16
  101120:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DELETE(sem, RT_Object_Class_Semaphore, _NRSYS_sem_delete);
  101124:	e51b3010 	ldr	r3, [fp, #-16]
  101128:	e3530000 	cmp	r3, #0
  10112c:	0a000003 	beq	101140 <rt_sem_delete+0x2c>
  101130:	e51b3010 	ldr	r3, [fp, #-16]
  101134:	e5933004 	ldr	r3, [r3, #4]
  101138:	e3530000 	cmp	r3, #0
  10113c:	1a000001 	bne	101148 <rt_sem_delete+0x34>
  101140:	e3a03008 	mov	r3, #8
  101144:	ea000013 	b	101198 <rt_sem_delete+0x84>
  101148:	e51b3010 	ldr	r3, [fp, #-16]
  10114c:	e5933000 	ldr	r3, [r3]
  101150:	e3530002 	cmp	r3, #2
  101154:	0a000001 	beq	101160 <rt_sem_delete+0x4c>
  101158:	e3a03008 	mov	r3, #8
  10115c:	ea00000d 	b	101198 <rt_sem_delete+0x84>
  101160:	e51b3010 	ldr	r3, [fp, #-16]
  101164:	e5933004 	ldr	r3, [r3, #4]
  101168:	e1a01003 	mov	r1, r3
  10116c:	e3a00013 	mov	r0, #19
  101170:	eb00ea58 	bl	13bad8 <syscall>
  101174:	e50b0008 	str	r0, [fp, #-8]
  101178:	e51b3008 	ldr	r3, [fp, #-8]
  10117c:	e3530000 	cmp	r3, #0
  101180:	0a000001 	beq	10118c <rt_sem_delete+0x78>
  101184:	e51b3008 	ldr	r3, [fp, #-8]
  101188:	ea000002 	b	101198 <rt_sem_delete+0x84>
  10118c:	e51b0010 	ldr	r0, [fp, #-16]
  101190:	eb00efc9 	bl	13d0bc <free>
  101194:	e3a03000 	mov	r3, #0
}
  101198:	e1a00003 	mov	r0, r3
  10119c:	e24bd004 	sub	sp, fp, #4
  1011a0:	e8bd8800 	pop	{fp, pc}

001011a4 <rt_sem_detach>:

rt_err_t rt_sem_detach(rt_sem_t sem)
{
  1011a4:	e92d4800 	push	{fp, lr}
  1011a8:	e28db004 	add	fp, sp, #4
  1011ac:	e24dd010 	sub	sp, sp, #16
  1011b0:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DETACH(sem, RT_Object_Class_Semaphore, _NRSYS_sem_delete);
  1011b4:	e51b3010 	ldr	r3, [fp, #-16]
  1011b8:	e3530000 	cmp	r3, #0
  1011bc:	0a000003 	beq	1011d0 <rt_sem_detach+0x2c>
  1011c0:	e51b3010 	ldr	r3, [fp, #-16]
  1011c4:	e5933004 	ldr	r3, [r3, #4]
  1011c8:	e3530000 	cmp	r3, #0
  1011cc:	1a000001 	bne	1011d8 <rt_sem_detach+0x34>
  1011d0:	e3a03008 	mov	r3, #8
  1011d4:	ea000017 	b	101238 <rt_sem_detach+0x94>
  1011d8:	e51b3010 	ldr	r3, [fp, #-16]
  1011dc:	e5933000 	ldr	r3, [r3]
  1011e0:	e3530002 	cmp	r3, #2
  1011e4:	0a000001 	beq	1011f0 <rt_sem_detach+0x4c>
  1011e8:	e3a03008 	mov	r3, #8
  1011ec:	ea000011 	b	101238 <rt_sem_detach+0x94>
  1011f0:	e51b3010 	ldr	r3, [fp, #-16]
  1011f4:	e5933004 	ldr	r3, [r3, #4]
  1011f8:	e1a01003 	mov	r1, r3
  1011fc:	e3a00013 	mov	r0, #19
  101200:	eb00ea34 	bl	13bad8 <syscall>
  101204:	e50b0008 	str	r0, [fp, #-8]
  101208:	e51b3008 	ldr	r3, [fp, #-8]
  10120c:	e3530000 	cmp	r3, #0
  101210:	0a000001 	beq	10121c <rt_sem_detach+0x78>
  101214:	e51b3008 	ldr	r3, [fp, #-8]
  101218:	ea000006 	b	101238 <rt_sem_detach+0x94>
  10121c:	e51b3010 	ldr	r3, [fp, #-16]
  101220:	e3a02000 	mov	r2, #0
  101224:	e5832000 	str	r2, [r3]
  101228:	e51b3010 	ldr	r3, [fp, #-16]
  10122c:	e3a02000 	mov	r2, #0
  101230:	e5832004 	str	r2, [r3, #4]
  101234:	e3a03000 	mov	r3, #0
}
  101238:	e1a00003 	mov	r0, r3
  10123c:	e24bd004 	sub	sp, fp, #4
  101240:	e8bd8800 	pop	{fp, pc}

00101244 <rt_sem_release>:

rt_err_t rt_sem_release(rt_sem_t sem)
{
  101244:	e92d4800 	push	{fp, lr}
  101248:	e28db004 	add	fp, sp, #4
  10124c:	e24dd008 	sub	sp, sp, #8
  101250:	e50b0008 	str	r0, [fp, #-8]
    RT_USER_IPC_CHECK(sem, RT_Object_Class_Semaphore);
  101254:	e51b3008 	ldr	r3, [fp, #-8]
  101258:	e3530000 	cmp	r3, #0
  10125c:	0a000003 	beq	101270 <rt_sem_release+0x2c>
  101260:	e51b3008 	ldr	r3, [fp, #-8]
  101264:	e5933004 	ldr	r3, [r3, #4]
  101268:	e3530000 	cmp	r3, #0
  10126c:	1a000001 	bne	101278 <rt_sem_release+0x34>
  101270:	e3a03008 	mov	r3, #8
  101274:	ea00000b 	b	1012a8 <rt_sem_release+0x64>
  101278:	e51b3008 	ldr	r3, [fp, #-8]
  10127c:	e5933000 	ldr	r3, [r3]
  101280:	e3530002 	cmp	r3, #2
  101284:	0a000001 	beq	101290 <rt_sem_release+0x4c>
  101288:	e3a03008 	mov	r3, #8
  10128c:	ea000005 	b	1012a8 <rt_sem_release+0x64>
    return syscall(_NRSYS_sem_release, sem->data);
  101290:	e51b3008 	ldr	r3, [fp, #-8]
  101294:	e5933004 	ldr	r3, [r3, #4]
  101298:	e1a01003 	mov	r1, r3
  10129c:	e3a00015 	mov	r0, #21
  1012a0:	eb00ea0c 	bl	13bad8 <syscall>
  1012a4:	e1a03000 	mov	r3, r0
}
  1012a8:	e1a00003 	mov	r0, r3
  1012ac:	e24bd004 	sub	sp, fp, #4
  1012b0:	e8bd8800 	pop	{fp, pc}

001012b4 <rt_sem_take>:

rt_err_t rt_sem_take(rt_sem_t sem, rt_int32_t time)
{
  1012b4:	e92d4800 	push	{fp, lr}
  1012b8:	e28db004 	add	fp, sp, #4
  1012bc:	e24dd008 	sub	sp, sp, #8
  1012c0:	e50b0008 	str	r0, [fp, #-8]
  1012c4:	e50b100c 	str	r1, [fp, #-12]
    RT_USER_IPC_CHECK(sem, RT_Object_Class_Semaphore);
  1012c8:	e51b3008 	ldr	r3, [fp, #-8]
  1012cc:	e3530000 	cmp	r3, #0
  1012d0:	0a000003 	beq	1012e4 <rt_sem_take+0x30>
  1012d4:	e51b3008 	ldr	r3, [fp, #-8]
  1012d8:	e5933004 	ldr	r3, [r3, #4]
  1012dc:	e3530000 	cmp	r3, #0
  1012e0:	1a000001 	bne	1012ec <rt_sem_take+0x38>
  1012e4:	e3a03008 	mov	r3, #8
  1012e8:	ea00000c 	b	101320 <rt_sem_take+0x6c>
  1012ec:	e51b3008 	ldr	r3, [fp, #-8]
  1012f0:	e5933000 	ldr	r3, [r3]
  1012f4:	e3530002 	cmp	r3, #2
  1012f8:	0a000001 	beq	101304 <rt_sem_take+0x50>
  1012fc:	e3a03008 	mov	r3, #8
  101300:	ea000006 	b	101320 <rt_sem_take+0x6c>
    return syscall(_NRSYS_sem_take, sem->data, time);
  101304:	e51b3008 	ldr	r3, [fp, #-8]
  101308:	e5933004 	ldr	r3, [r3, #4]
  10130c:	e51b200c 	ldr	r2, [fp, #-12]
  101310:	e1a01003 	mov	r1, r3
  101314:	e3a00014 	mov	r0, #20
  101318:	eb00e9ee 	bl	13bad8 <syscall>
  10131c:	e1a03000 	mov	r3, r0
}
  101320:	e1a00003 	mov	r0, r3
  101324:	e24bd004 	sub	sp, fp, #4
  101328:	e8bd8800 	pop	{fp, pc}

0010132c <rt_mb_create>:

rt_mailbox_t rt_mb_create(const char *name, rt_size_t size, rt_uint8_t flag)
{
  10132c:	e92d4800 	push	{fp, lr}
  101330:	e28db004 	add	fp, sp, #4
  101334:	e24dd018 	sub	sp, sp, #24
  101338:	e50b0010 	str	r0, [fp, #-16]
  10133c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  101340:	e1a03002 	mov	r3, r2
  101344:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
    RT_USER_IPC_CREATE(RT_Object_Class_MailBox, _NRSYS_mb_create, name, size, flag);
  101348:	e3a00008 	mov	r0, #8
  10134c:	eb00ed9e 	bl	13c9cc <malloc>
  101350:	e1a03000 	mov	r3, r0
  101354:	e50b3008 	str	r3, [fp, #-8]
  101358:	e51b3008 	ldr	r3, [fp, #-8]
  10135c:	e3530000 	cmp	r3, #0
  101360:	1a000001 	bne	10136c <rt_mb_create+0x40>
  101364:	e3a03000 	mov	r3, #0
  101368:	ea000015 	b	1013c4 <rt_mb_create+0x98>
  10136c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  101370:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  101374:	e51b1010 	ldr	r1, [fp, #-16]
  101378:	e3a0001e 	mov	r0, #30
  10137c:	eb00e9d5 	bl	13bad8 <syscall>
  101380:	e1a03000 	mov	r3, r0
  101384:	e1a02003 	mov	r2, r3
  101388:	e51b3008 	ldr	r3, [fp, #-8]
  10138c:	e5832004 	str	r2, [r3, #4]
  101390:	e51b3008 	ldr	r3, [fp, #-8]
  101394:	e5933004 	ldr	r3, [r3, #4]
  101398:	e3530000 	cmp	r3, #0
  10139c:	0a000003 	beq	1013b0 <rt_mb_create+0x84>
  1013a0:	e51b3008 	ldr	r3, [fp, #-8]
  1013a4:	e3a02005 	mov	r2, #5
  1013a8:	e5832000 	str	r2, [r3]
  1013ac:	ea000003 	b	1013c0 <rt_mb_create+0x94>
  1013b0:	e51b0008 	ldr	r0, [fp, #-8]
  1013b4:	eb00ef40 	bl	13d0bc <free>
  1013b8:	e3a03000 	mov	r3, #0
  1013bc:	e50b3008 	str	r3, [fp, #-8]
  1013c0:	e51b3008 	ldr	r3, [fp, #-8]
}
  1013c4:	e1a00003 	mov	r0, r3
  1013c8:	e24bd004 	sub	sp, fp, #4
  1013cc:	e8bd8800 	pop	{fp, pc}

001013d0 <rt_mb_init>:
rt_err_t rt_mb_init(rt_mailbox_t mb,
                    const char  *name,
                    void        *msgpool,
                    rt_size_t    size,
                    rt_uint8_t   flag)
{
  1013d0:	e92d4800 	push	{fp, lr}
  1013d4:	e28db004 	add	fp, sp, #4
  1013d8:	e24dd010 	sub	sp, sp, #16
  1013dc:	e50b0008 	str	r0, [fp, #-8]
  1013e0:	e50b100c 	str	r1, [fp, #-12]
  1013e4:	e50b2010 	str	r2, [fp, #-16]
  1013e8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    RT_USER_IPC_INIT(mb, RT_Object_Class_MailBox, _NRSYS_mb_create, name, size, flag);
  1013ec:	e51b3008 	ldr	r3, [fp, #-8]
  1013f0:	e3530000 	cmp	r3, #0
  1013f4:	1a000001 	bne	101400 <rt_mb_init+0x30>
  1013f8:	e3a03008 	mov	r3, #8
  1013fc:	ea000012 	b	10144c <rt_mb_init+0x7c>
  101400:	e5db3004 	ldrb	r3, [fp, #4]
  101404:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  101408:	e51b100c 	ldr	r1, [fp, #-12]
  10140c:	e3a0001e 	mov	r0, #30
  101410:	eb00e9b0 	bl	13bad8 <syscall>
  101414:	e1a03000 	mov	r3, r0
  101418:	e1a02003 	mov	r2, r3
  10141c:	e51b3008 	ldr	r3, [fp, #-8]
  101420:	e5832004 	str	r2, [r3, #4]
  101424:	e51b3008 	ldr	r3, [fp, #-8]
  101428:	e5933004 	ldr	r3, [r3, #4]
  10142c:	e3530000 	cmp	r3, #0
  101430:	0a000004 	beq	101448 <rt_mb_init+0x78>
  101434:	e51b3008 	ldr	r3, [fp, #-8]
  101438:	e3a02005 	mov	r2, #5
  10143c:	e5832000 	str	r2, [r3]
  101440:	e3a03000 	mov	r3, #0
  101444:	ea000000 	b	10144c <rt_mb_init+0x7c>
  101448:	e3a03001 	mov	r3, #1
}
  10144c:	e1a00003 	mov	r0, r3
  101450:	e24bd004 	sub	sp, fp, #4
  101454:	e8bd8800 	pop	{fp, pc}

00101458 <rt_mb_delete>:


rt_err_t rt_mb_delete(rt_mailbox_t mb)
{
  101458:	e92d4800 	push	{fp, lr}
  10145c:	e28db004 	add	fp, sp, #4
  101460:	e24dd010 	sub	sp, sp, #16
  101464:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DELETE(mb, RT_Object_Class_MailBox, _NRSYS_mb_delete);
  101468:	e51b3010 	ldr	r3, [fp, #-16]
  10146c:	e3530000 	cmp	r3, #0
  101470:	0a000003 	beq	101484 <rt_mb_delete+0x2c>
  101474:	e51b3010 	ldr	r3, [fp, #-16]
  101478:	e5933004 	ldr	r3, [r3, #4]
  10147c:	e3530000 	cmp	r3, #0
  101480:	1a000001 	bne	10148c <rt_mb_delete+0x34>
  101484:	e3a03008 	mov	r3, #8
  101488:	ea000013 	b	1014dc <rt_mb_delete+0x84>
  10148c:	e51b3010 	ldr	r3, [fp, #-16]
  101490:	e5933000 	ldr	r3, [r3]
  101494:	e3530005 	cmp	r3, #5
  101498:	0a000001 	beq	1014a4 <rt_mb_delete+0x4c>
  10149c:	e3a03008 	mov	r3, #8
  1014a0:	ea00000d 	b	1014dc <rt_mb_delete+0x84>
  1014a4:	e51b3010 	ldr	r3, [fp, #-16]
  1014a8:	e5933004 	ldr	r3, [r3, #4]
  1014ac:	e1a01003 	mov	r1, r3
  1014b0:	e3a0001f 	mov	r0, #31
  1014b4:	eb00e987 	bl	13bad8 <syscall>
  1014b8:	e50b0008 	str	r0, [fp, #-8]
  1014bc:	e51b3008 	ldr	r3, [fp, #-8]
  1014c0:	e3530000 	cmp	r3, #0
  1014c4:	0a000001 	beq	1014d0 <rt_mb_delete+0x78>
  1014c8:	e51b3008 	ldr	r3, [fp, #-8]
  1014cc:	ea000002 	b	1014dc <rt_mb_delete+0x84>
  1014d0:	e51b0010 	ldr	r0, [fp, #-16]
  1014d4:	eb00eef8 	bl	13d0bc <free>
  1014d8:	e3a03000 	mov	r3, #0
}
  1014dc:	e1a00003 	mov	r0, r3
  1014e0:	e24bd004 	sub	sp, fp, #4
  1014e4:	e8bd8800 	pop	{fp, pc}

001014e8 <rt_mb_detach>:

rt_err_t rt_mb_detach(rt_mailbox_t mb)
{
  1014e8:	e92d4800 	push	{fp, lr}
  1014ec:	e28db004 	add	fp, sp, #4
  1014f0:	e24dd010 	sub	sp, sp, #16
  1014f4:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DETACH(mb, RT_Object_Class_MailBox, _NRSYS_mb_delete);
  1014f8:	e51b3010 	ldr	r3, [fp, #-16]
  1014fc:	e3530000 	cmp	r3, #0
  101500:	0a000003 	beq	101514 <rt_mb_detach+0x2c>
  101504:	e51b3010 	ldr	r3, [fp, #-16]
  101508:	e5933004 	ldr	r3, [r3, #4]
  10150c:	e3530000 	cmp	r3, #0
  101510:	1a000001 	bne	10151c <rt_mb_detach+0x34>
  101514:	e3a03008 	mov	r3, #8
  101518:	ea000017 	b	10157c <rt_mb_detach+0x94>
  10151c:	e51b3010 	ldr	r3, [fp, #-16]
  101520:	e5933000 	ldr	r3, [r3]
  101524:	e3530005 	cmp	r3, #5
  101528:	0a000001 	beq	101534 <rt_mb_detach+0x4c>
  10152c:	e3a03008 	mov	r3, #8
  101530:	ea000011 	b	10157c <rt_mb_detach+0x94>
  101534:	e51b3010 	ldr	r3, [fp, #-16]
  101538:	e5933004 	ldr	r3, [r3, #4]
  10153c:	e1a01003 	mov	r1, r3
  101540:	e3a0001f 	mov	r0, #31
  101544:	eb00e963 	bl	13bad8 <syscall>
  101548:	e50b0008 	str	r0, [fp, #-8]
  10154c:	e51b3008 	ldr	r3, [fp, #-8]
  101550:	e3530000 	cmp	r3, #0
  101554:	0a000001 	beq	101560 <rt_mb_detach+0x78>
  101558:	e51b3008 	ldr	r3, [fp, #-8]
  10155c:	ea000006 	b	10157c <rt_mb_detach+0x94>
  101560:	e51b3010 	ldr	r3, [fp, #-16]
  101564:	e3a02000 	mov	r2, #0
  101568:	e5832000 	str	r2, [r3]
  10156c:	e51b3010 	ldr	r3, [fp, #-16]
  101570:	e3a02000 	mov	r2, #0
  101574:	e5832004 	str	r2, [r3, #4]
  101578:	e3a03000 	mov	r3, #0
}
  10157c:	e1a00003 	mov	r0, r3
  101580:	e24bd004 	sub	sp, fp, #4
  101584:	e8bd8800 	pop	{fp, pc}

00101588 <rt_mb_send_wait>:

rt_err_t rt_mb_send_wait(rt_mailbox_t mb,
        rt_ubase_t   value,
        rt_int32_t   timeout)
{
  101588:	e92d4800 	push	{fp, lr}
  10158c:	e28db004 	add	fp, sp, #4
  101590:	e24dd010 	sub	sp, sp, #16
  101594:	e50b0008 	str	r0, [fp, #-8]
  101598:	e50b100c 	str	r1, [fp, #-12]
  10159c:	e50b2010 	str	r2, [fp, #-16]
    RT_USER_IPC_CHECK(mb, RT_Object_Class_MailBox);
  1015a0:	e51b3008 	ldr	r3, [fp, #-8]
  1015a4:	e3530000 	cmp	r3, #0
  1015a8:	0a000003 	beq	1015bc <rt_mb_send_wait+0x34>
  1015ac:	e51b3008 	ldr	r3, [fp, #-8]
  1015b0:	e5933004 	ldr	r3, [r3, #4]
  1015b4:	e3530000 	cmp	r3, #0
  1015b8:	1a000001 	bne	1015c4 <rt_mb_send_wait+0x3c>
  1015bc:	e3a03008 	mov	r3, #8
  1015c0:	ea00000c 	b	1015f8 <rt_mb_send_wait+0x70>
  1015c4:	e51b3008 	ldr	r3, [fp, #-8]
  1015c8:	e5933000 	ldr	r3, [r3]
  1015cc:	e3530005 	cmp	r3, #5
  1015d0:	0a000001 	beq	1015dc <rt_mb_send_wait+0x54>
  1015d4:	e3a03008 	mov	r3, #8
  1015d8:	ea000006 	b	1015f8 <rt_mb_send_wait+0x70>
    return syscall(_NRSYS_mb_send_wait, mb->data, value, timeout);
  1015dc:	e51b3008 	ldr	r3, [fp, #-8]
  1015e0:	e5931004 	ldr	r1, [r3, #4]
  1015e4:	e51b3010 	ldr	r3, [fp, #-16]
  1015e8:	e51b200c 	ldr	r2, [fp, #-12]
  1015ec:	e3a00021 	mov	r0, #33	; 0x21
  1015f0:	eb00e938 	bl	13bad8 <syscall>
  1015f4:	e1a03000 	mov	r3, r0
}
  1015f8:	e1a00003 	mov	r0, r3
  1015fc:	e24bd004 	sub	sp, fp, #4
  101600:	e8bd8800 	pop	{fp, pc}

00101604 <rt_mb_send>:

rt_err_t rt_mb_send(rt_mailbox_t mb, rt_ubase_t value)
{
  101604:	e92d4800 	push	{fp, lr}
  101608:	e28db004 	add	fp, sp, #4
  10160c:	e24dd008 	sub	sp, sp, #8
  101610:	e50b0008 	str	r0, [fp, #-8]
  101614:	e50b100c 	str	r1, [fp, #-12]
    RT_USER_IPC_CHECK(mb, RT_Object_Class_MailBox);
  101618:	e51b3008 	ldr	r3, [fp, #-8]
  10161c:	e3530000 	cmp	r3, #0
  101620:	0a000003 	beq	101634 <rt_mb_send+0x30>
  101624:	e51b3008 	ldr	r3, [fp, #-8]
  101628:	e5933004 	ldr	r3, [r3, #4]
  10162c:	e3530000 	cmp	r3, #0
  101630:	1a000001 	bne	10163c <rt_mb_send+0x38>
  101634:	e3a03008 	mov	r3, #8
  101638:	ea00000c 	b	101670 <rt_mb_send+0x6c>
  10163c:	e51b3008 	ldr	r3, [fp, #-8]
  101640:	e5933000 	ldr	r3, [r3]
  101644:	e3530005 	cmp	r3, #5
  101648:	0a000001 	beq	101654 <rt_mb_send+0x50>
  10164c:	e3a03008 	mov	r3, #8
  101650:	ea000006 	b	101670 <rt_mb_send+0x6c>
    return syscall(_NRSYS_mb_send, mb->data, value);
  101654:	e51b3008 	ldr	r3, [fp, #-8]
  101658:	e5933004 	ldr	r3, [r3, #4]
  10165c:	e51b200c 	ldr	r2, [fp, #-12]
  101660:	e1a01003 	mov	r1, r3
  101664:	e3a00020 	mov	r0, #32
  101668:	eb00e91a 	bl	13bad8 <syscall>
  10166c:	e1a03000 	mov	r3, r0
}
  101670:	e1a00003 	mov	r0, r3
  101674:	e24bd004 	sub	sp, fp, #4
  101678:	e8bd8800 	pop	{fp, pc}

0010167c <rt_mb_recv>:

rt_err_t rt_mb_recv(rt_mailbox_t mb, rt_ubase_t *value, rt_int32_t timeout)
{
  10167c:	e92d4800 	push	{fp, lr}
  101680:	e28db004 	add	fp, sp, #4
  101684:	e24dd010 	sub	sp, sp, #16
  101688:	e50b0008 	str	r0, [fp, #-8]
  10168c:	e50b100c 	str	r1, [fp, #-12]
  101690:	e50b2010 	str	r2, [fp, #-16]
    RT_USER_IPC_CHECK(mb, RT_Object_Class_MailBox);
  101694:	e51b3008 	ldr	r3, [fp, #-8]
  101698:	e3530000 	cmp	r3, #0
  10169c:	0a000003 	beq	1016b0 <rt_mb_recv+0x34>
  1016a0:	e51b3008 	ldr	r3, [fp, #-8]
  1016a4:	e5933004 	ldr	r3, [r3, #4]
  1016a8:	e3530000 	cmp	r3, #0
  1016ac:	1a000001 	bne	1016b8 <rt_mb_recv+0x3c>
  1016b0:	e3a03008 	mov	r3, #8
  1016b4:	ea00000c 	b	1016ec <rt_mb_recv+0x70>
  1016b8:	e51b3008 	ldr	r3, [fp, #-8]
  1016bc:	e5933000 	ldr	r3, [r3]
  1016c0:	e3530005 	cmp	r3, #5
  1016c4:	0a000001 	beq	1016d0 <rt_mb_recv+0x54>
  1016c8:	e3a03008 	mov	r3, #8
  1016cc:	ea000006 	b	1016ec <rt_mb_recv+0x70>
    return syscall(_NRSYS_mb_recv, mb->data, value, timeout);
  1016d0:	e51b3008 	ldr	r3, [fp, #-8]
  1016d4:	e5931004 	ldr	r1, [r3, #4]
  1016d8:	e51b3010 	ldr	r3, [fp, #-16]
  1016dc:	e51b200c 	ldr	r2, [fp, #-12]
  1016e0:	e3a00022 	mov	r0, #34	; 0x22
  1016e4:	eb00e8fb 	bl	13bad8 <syscall>
  1016e8:	e1a03000 	mov	r3, r0
}
  1016ec:	e1a00003 	mov	r0, r3
  1016f0:	e24bd004 	sub	sp, fp, #4
  1016f4:	e8bd8800 	pop	{fp, pc}

001016f8 <rt_mq_create>:

rt_mq_t rt_mq_create(const char *name,
                     rt_size_t   msg_size,
                     rt_size_t   max_msgs,
                     rt_uint8_t  flag)
{
  1016f8:	e92d4800 	push	{fp, lr}
  1016fc:	e28db004 	add	fp, sp, #4
  101700:	e24dd020 	sub	sp, sp, #32
  101704:	e50b0010 	str	r0, [fp, #-16]
  101708:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10170c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  101710:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
    RT_USER_IPC_CREATE(RT_Object_Class_MessageQueue, _NRSYS_mq_create, name, msg_size, max_msgs, flag);
  101714:	e3a00008 	mov	r0, #8
  101718:	eb00ecab 	bl	13c9cc <malloc>
  10171c:	e1a03000 	mov	r3, r0
  101720:	e50b3008 	str	r3, [fp, #-8]
  101724:	e51b3008 	ldr	r3, [fp, #-8]
  101728:	e3530000 	cmp	r3, #0
  10172c:	1a000001 	bne	101738 <rt_mq_create+0x40>
  101730:	e3a03000 	mov	r3, #0
  101734:	ea000017 	b	101798 <rt_mq_create+0xa0>
  101738:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
  10173c:	e58d3000 	str	r3, [sp]
  101740:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  101744:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  101748:	e51b1010 	ldr	r1, [fp, #-16]
  10174c:	e3a00023 	mov	r0, #35	; 0x23
  101750:	eb00e8e0 	bl	13bad8 <syscall>
  101754:	e1a03000 	mov	r3, r0
  101758:	e1a02003 	mov	r2, r3
  10175c:	e51b3008 	ldr	r3, [fp, #-8]
  101760:	e5832004 	str	r2, [r3, #4]
  101764:	e51b3008 	ldr	r3, [fp, #-8]
  101768:	e5933004 	ldr	r3, [r3, #4]
  10176c:	e3530000 	cmp	r3, #0
  101770:	0a000003 	beq	101784 <rt_mq_create+0x8c>
  101774:	e51b3008 	ldr	r3, [fp, #-8]
  101778:	e3a02006 	mov	r2, #6
  10177c:	e5832000 	str	r2, [r3]
  101780:	ea000003 	b	101794 <rt_mq_create+0x9c>
  101784:	e51b0008 	ldr	r0, [fp, #-8]
  101788:	eb00ee4b 	bl	13d0bc <free>
  10178c:	e3a03000 	mov	r3, #0
  101790:	e50b3008 	str	r3, [fp, #-8]
  101794:	e51b3008 	ldr	r3, [fp, #-8]
}
  101798:	e1a00003 	mov	r0, r3
  10179c:	e24bd004 	sub	sp, fp, #4
  1017a0:	e8bd8800 	pop	{fp, pc}

001017a4 <rt_mq_init>:
                    const char *name,
                    void       *msgpool,
                    rt_size_t   msg_size,
                    rt_size_t   pool_size,
                    rt_uint8_t  flag)
{
  1017a4:	e92d4800 	push	{fp, lr}
  1017a8:	e28db004 	add	fp, sp, #4
  1017ac:	e24dd018 	sub	sp, sp, #24
  1017b0:	e50b0008 	str	r0, [fp, #-8]
  1017b4:	e50b100c 	str	r1, [fp, #-12]
  1017b8:	e50b2010 	str	r2, [fp, #-16]
  1017bc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    RT_USER_IPC_INIT(mq, RT_Object_Class_MessageQueue, _NRSYS_mq_create, name, msg_size, pool_size/msg_size, flag);
  1017c0:	e51b3008 	ldr	r3, [fp, #-8]
  1017c4:	e3530000 	cmp	r3, #0
  1017c8:	1a000001 	bne	1017d4 <rt_mq_init+0x30>
  1017cc:	e3a03008 	mov	r3, #8
  1017d0:	ea000019 	b	10183c <rt_mq_init+0x98>
  1017d4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1017d8:	e59b0004 	ldr	r0, [fp, #4]
  1017dc:	eb00d9c3 	bl	137ef0 <__udivsi3>
  1017e0:	e1a03000 	mov	r3, r0
  1017e4:	e1a02003 	mov	r2, r3
  1017e8:	e5db3008 	ldrb	r3, [fp, #8]
  1017ec:	e58d3000 	str	r3, [sp]
  1017f0:	e1a03002 	mov	r3, r2
  1017f4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1017f8:	e51b100c 	ldr	r1, [fp, #-12]
  1017fc:	e3a00023 	mov	r0, #35	; 0x23
  101800:	eb00e8b4 	bl	13bad8 <syscall>
  101804:	e1a03000 	mov	r3, r0
  101808:	e1a02003 	mov	r2, r3
  10180c:	e51b3008 	ldr	r3, [fp, #-8]
  101810:	e5832004 	str	r2, [r3, #4]
  101814:	e51b3008 	ldr	r3, [fp, #-8]
  101818:	e5933004 	ldr	r3, [r3, #4]
  10181c:	e3530000 	cmp	r3, #0
  101820:	0a000004 	beq	101838 <rt_mq_init+0x94>
  101824:	e51b3008 	ldr	r3, [fp, #-8]
  101828:	e3a02006 	mov	r2, #6
  10182c:	e5832000 	str	r2, [r3]
  101830:	e3a03000 	mov	r3, #0
  101834:	ea000000 	b	10183c <rt_mq_init+0x98>
  101838:	e3a03001 	mov	r3, #1
}
  10183c:	e1a00003 	mov	r0, r3
  101840:	e24bd004 	sub	sp, fp, #4
  101844:	e8bd8800 	pop	{fp, pc}

00101848 <rt_mq_delete>:

rt_err_t rt_mq_delete(rt_mq_t mq)
{
  101848:	e92d4800 	push	{fp, lr}
  10184c:	e28db004 	add	fp, sp, #4
  101850:	e24dd010 	sub	sp, sp, #16
  101854:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DELETE(mq, RT_Object_Class_MessageQueue, _NRSYS_mq_delete);
  101858:	e51b3010 	ldr	r3, [fp, #-16]
  10185c:	e3530000 	cmp	r3, #0
  101860:	0a000003 	beq	101874 <rt_mq_delete+0x2c>
  101864:	e51b3010 	ldr	r3, [fp, #-16]
  101868:	e5933004 	ldr	r3, [r3, #4]
  10186c:	e3530000 	cmp	r3, #0
  101870:	1a000001 	bne	10187c <rt_mq_delete+0x34>
  101874:	e3a03008 	mov	r3, #8
  101878:	ea000013 	b	1018cc <rt_mq_delete+0x84>
  10187c:	e51b3010 	ldr	r3, [fp, #-16]
  101880:	e5933000 	ldr	r3, [r3]
  101884:	e3530006 	cmp	r3, #6
  101888:	0a000001 	beq	101894 <rt_mq_delete+0x4c>
  10188c:	e3a03008 	mov	r3, #8
  101890:	ea00000d 	b	1018cc <rt_mq_delete+0x84>
  101894:	e51b3010 	ldr	r3, [fp, #-16]
  101898:	e5933004 	ldr	r3, [r3, #4]
  10189c:	e1a01003 	mov	r1, r3
  1018a0:	e3a00024 	mov	r0, #36	; 0x24
  1018a4:	eb00e88b 	bl	13bad8 <syscall>
  1018a8:	e50b0008 	str	r0, [fp, #-8]
  1018ac:	e51b3008 	ldr	r3, [fp, #-8]
  1018b0:	e3530000 	cmp	r3, #0
  1018b4:	0a000001 	beq	1018c0 <rt_mq_delete+0x78>
  1018b8:	e51b3008 	ldr	r3, [fp, #-8]
  1018bc:	ea000002 	b	1018cc <rt_mq_delete+0x84>
  1018c0:	e51b0010 	ldr	r0, [fp, #-16]
  1018c4:	eb00edfc 	bl	13d0bc <free>
  1018c8:	e3a03000 	mov	r3, #0
}
  1018cc:	e1a00003 	mov	r0, r3
  1018d0:	e24bd004 	sub	sp, fp, #4
  1018d4:	e8bd8800 	pop	{fp, pc}

001018d8 <rt_mq_detach>:

rt_err_t rt_mq_detach(rt_mq_t mq)
{
  1018d8:	e92d4800 	push	{fp, lr}
  1018dc:	e28db004 	add	fp, sp, #4
  1018e0:	e24dd010 	sub	sp, sp, #16
  1018e4:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DETACH(mq, RT_Object_Class_MessageQueue, _NRSYS_mq_delete);
  1018e8:	e51b3010 	ldr	r3, [fp, #-16]
  1018ec:	e3530000 	cmp	r3, #0
  1018f0:	0a000003 	beq	101904 <rt_mq_detach+0x2c>
  1018f4:	e51b3010 	ldr	r3, [fp, #-16]
  1018f8:	e5933004 	ldr	r3, [r3, #4]
  1018fc:	e3530000 	cmp	r3, #0
  101900:	1a000001 	bne	10190c <rt_mq_detach+0x34>
  101904:	e3a03008 	mov	r3, #8
  101908:	ea000017 	b	10196c <rt_mq_detach+0x94>
  10190c:	e51b3010 	ldr	r3, [fp, #-16]
  101910:	e5933000 	ldr	r3, [r3]
  101914:	e3530006 	cmp	r3, #6
  101918:	0a000001 	beq	101924 <rt_mq_detach+0x4c>
  10191c:	e3a03008 	mov	r3, #8
  101920:	ea000011 	b	10196c <rt_mq_detach+0x94>
  101924:	e51b3010 	ldr	r3, [fp, #-16]
  101928:	e5933004 	ldr	r3, [r3, #4]
  10192c:	e1a01003 	mov	r1, r3
  101930:	e3a00024 	mov	r0, #36	; 0x24
  101934:	eb00e867 	bl	13bad8 <syscall>
  101938:	e50b0008 	str	r0, [fp, #-8]
  10193c:	e51b3008 	ldr	r3, [fp, #-8]
  101940:	e3530000 	cmp	r3, #0
  101944:	0a000001 	beq	101950 <rt_mq_detach+0x78>
  101948:	e51b3008 	ldr	r3, [fp, #-8]
  10194c:	ea000006 	b	10196c <rt_mq_detach+0x94>
  101950:	e51b3010 	ldr	r3, [fp, #-16]
  101954:	e3a02000 	mov	r2, #0
  101958:	e5832000 	str	r2, [r3]
  10195c:	e51b3010 	ldr	r3, [fp, #-16]
  101960:	e3a02000 	mov	r2, #0
  101964:	e5832004 	str	r2, [r3, #4]
  101968:	e3a03000 	mov	r3, #0
}
  10196c:	e1a00003 	mov	r0, r3
  101970:	e24bd004 	sub	sp, fp, #4
  101974:	e8bd8800 	pop	{fp, pc}

00101978 <rt_mq_send>:

rt_err_t rt_mq_send(rt_mq_t mq, const void *buffer, rt_size_t size)
{
  101978:	e92d4800 	push	{fp, lr}
  10197c:	e28db004 	add	fp, sp, #4
  101980:	e24dd010 	sub	sp, sp, #16
  101984:	e50b0008 	str	r0, [fp, #-8]
  101988:	e50b100c 	str	r1, [fp, #-12]
  10198c:	e50b2010 	str	r2, [fp, #-16]
    RT_USER_IPC_CHECK(mq, RT_Object_Class_MessageQueue);
  101990:	e51b3008 	ldr	r3, [fp, #-8]
  101994:	e3530000 	cmp	r3, #0
  101998:	0a000003 	beq	1019ac <rt_mq_send+0x34>
  10199c:	e51b3008 	ldr	r3, [fp, #-8]
  1019a0:	e5933004 	ldr	r3, [r3, #4]
  1019a4:	e3530000 	cmp	r3, #0
  1019a8:	1a000001 	bne	1019b4 <rt_mq_send+0x3c>
  1019ac:	e3a03008 	mov	r3, #8
  1019b0:	ea00000c 	b	1019e8 <rt_mq_send+0x70>
  1019b4:	e51b3008 	ldr	r3, [fp, #-8]
  1019b8:	e5933000 	ldr	r3, [r3]
  1019bc:	e3530006 	cmp	r3, #6
  1019c0:	0a000001 	beq	1019cc <rt_mq_send+0x54>
  1019c4:	e3a03008 	mov	r3, #8
  1019c8:	ea000006 	b	1019e8 <rt_mq_send+0x70>
    return syscall(_NRSYS_mq_send, mq->data, buffer, size);
  1019cc:	e51b3008 	ldr	r3, [fp, #-8]
  1019d0:	e5931004 	ldr	r1, [r3, #4]
  1019d4:	e51b3010 	ldr	r3, [fp, #-16]
  1019d8:	e51b200c 	ldr	r2, [fp, #-12]
  1019dc:	e3a00025 	mov	r0, #37	; 0x25
  1019e0:	eb00e83c 	bl	13bad8 <syscall>
  1019e4:	e1a03000 	mov	r3, r0
}
  1019e8:	e1a00003 	mov	r0, r3
  1019ec:	e24bd004 	sub	sp, fp, #4
  1019f0:	e8bd8800 	pop	{fp, pc}

001019f4 <rt_mq_urgent>:

rt_err_t rt_mq_urgent(rt_mq_t mq, const void *buffer, rt_size_t size)
{
  1019f4:	e92d4800 	push	{fp, lr}
  1019f8:	e28db004 	add	fp, sp, #4
  1019fc:	e24dd010 	sub	sp, sp, #16
  101a00:	e50b0008 	str	r0, [fp, #-8]
  101a04:	e50b100c 	str	r1, [fp, #-12]
  101a08:	e50b2010 	str	r2, [fp, #-16]
    RT_USER_IPC_CHECK(mq, RT_Object_Class_MessageQueue);
  101a0c:	e51b3008 	ldr	r3, [fp, #-8]
  101a10:	e3530000 	cmp	r3, #0
  101a14:	0a000003 	beq	101a28 <rt_mq_urgent+0x34>
  101a18:	e51b3008 	ldr	r3, [fp, #-8]
  101a1c:	e5933004 	ldr	r3, [r3, #4]
  101a20:	e3530000 	cmp	r3, #0
  101a24:	1a000001 	bne	101a30 <rt_mq_urgent+0x3c>
  101a28:	e3a03008 	mov	r3, #8
  101a2c:	ea00000c 	b	101a64 <rt_mq_urgent+0x70>
  101a30:	e51b3008 	ldr	r3, [fp, #-8]
  101a34:	e5933000 	ldr	r3, [r3]
  101a38:	e3530006 	cmp	r3, #6
  101a3c:	0a000001 	beq	101a48 <rt_mq_urgent+0x54>
  101a40:	e3a03008 	mov	r3, #8
  101a44:	ea000006 	b	101a64 <rt_mq_urgent+0x70>
    return syscall(_NRSYS_mq_urgent, mq->data, buffer, size);
  101a48:	e51b3008 	ldr	r3, [fp, #-8]
  101a4c:	e5931004 	ldr	r1, [r3, #4]
  101a50:	e51b3010 	ldr	r3, [fp, #-16]
  101a54:	e51b200c 	ldr	r2, [fp, #-12]
  101a58:	e3a00026 	mov	r0, #38	; 0x26
  101a5c:	eb00e81d 	bl	13bad8 <syscall>
  101a60:	e1a03000 	mov	r3, r0
}
  101a64:	e1a00003 	mov	r0, r3
  101a68:	e24bd004 	sub	sp, fp, #4
  101a6c:	e8bd8800 	pop	{fp, pc}

00101a70 <rt_mq_recv>:

rt_err_t rt_mq_recv(rt_mq_t    mq,
                    void      *buffer,
                    rt_size_t  size,
                    rt_int32_t timeout)
{
  101a70:	e92d4800 	push	{fp, lr}
  101a74:	e28db004 	add	fp, sp, #4
  101a78:	e24dd018 	sub	sp, sp, #24
  101a7c:	e50b0008 	str	r0, [fp, #-8]
  101a80:	e50b100c 	str	r1, [fp, #-12]
  101a84:	e50b2010 	str	r2, [fp, #-16]
  101a88:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    RT_USER_IPC_CHECK(mq, RT_Object_Class_MessageQueue);
  101a8c:	e51b3008 	ldr	r3, [fp, #-8]
  101a90:	e3530000 	cmp	r3, #0
  101a94:	0a000003 	beq	101aa8 <rt_mq_recv+0x38>
  101a98:	e51b3008 	ldr	r3, [fp, #-8]
  101a9c:	e5933004 	ldr	r3, [r3, #4]
  101aa0:	e3530000 	cmp	r3, #0
  101aa4:	1a000001 	bne	101ab0 <rt_mq_recv+0x40>
  101aa8:	e3a03008 	mov	r3, #8
  101aac:	ea00000e 	b	101aec <rt_mq_recv+0x7c>
  101ab0:	e51b3008 	ldr	r3, [fp, #-8]
  101ab4:	e5933000 	ldr	r3, [r3]
  101ab8:	e3530006 	cmp	r3, #6
  101abc:	0a000001 	beq	101ac8 <rt_mq_recv+0x58>
  101ac0:	e3a03008 	mov	r3, #8
  101ac4:	ea000008 	b	101aec <rt_mq_recv+0x7c>
    return syscall(_NRSYS_mq_recv, mq->data, buffer, size, timeout);
  101ac8:	e51b3008 	ldr	r3, [fp, #-8]
  101acc:	e5931004 	ldr	r1, [r3, #4]
  101ad0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  101ad4:	e58d3000 	str	r3, [sp]
  101ad8:	e51b3010 	ldr	r3, [fp, #-16]
  101adc:	e51b200c 	ldr	r2, [fp, #-12]
  101ae0:	e3a00027 	mov	r0, #39	; 0x27
  101ae4:	eb00e7fb 	bl	13bad8 <syscall>
  101ae8:	e1a03000 	mov	r3, r0
}
  101aec:	e1a00003 	mov	r0, r3
  101af0:	e24bd004 	sub	sp, fp, #4
  101af4:	e8bd8800 	pop	{fp, pc}

00101af8 <rt_event_create>:

rt_event_t rt_event_create(const char *name, rt_uint8_t flag)
{
  101af8:	e92d4800 	push	{fp, lr}
  101afc:	e28db004 	add	fp, sp, #4
  101b00:	e24dd010 	sub	sp, sp, #16
  101b04:	e50b0010 	str	r0, [fp, #-16]
  101b08:	e1a03001 	mov	r3, r1
  101b0c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    RT_USER_IPC_CREATE(RT_Object_Class_Event, _NRSYS_event_create, name, flag);
  101b10:	e3a00008 	mov	r0, #8
  101b14:	eb00ebac 	bl	13c9cc <malloc>
  101b18:	e1a03000 	mov	r3, r0
  101b1c:	e50b3008 	str	r3, [fp, #-8]
  101b20:	e51b3008 	ldr	r3, [fp, #-8]
  101b24:	e3530000 	cmp	r3, #0
  101b28:	1a000001 	bne	101b34 <rt_event_create+0x3c>
  101b2c:	e3a03000 	mov	r3, #0
  101b30:	ea000015 	b	101b8c <rt_event_create+0x94>
  101b34:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  101b38:	e1a02003 	mov	r2, r3
  101b3c:	e51b1010 	ldr	r1, [fp, #-16]
  101b40:	e3a0001a 	mov	r0, #26
  101b44:	eb00e7e3 	bl	13bad8 <syscall>
  101b48:	e1a03000 	mov	r3, r0
  101b4c:	e1a02003 	mov	r2, r3
  101b50:	e51b3008 	ldr	r3, [fp, #-8]
  101b54:	e5832004 	str	r2, [r3, #4]
  101b58:	e51b3008 	ldr	r3, [fp, #-8]
  101b5c:	e5933004 	ldr	r3, [r3, #4]
  101b60:	e3530000 	cmp	r3, #0
  101b64:	0a000003 	beq	101b78 <rt_event_create+0x80>
  101b68:	e51b3008 	ldr	r3, [fp, #-8]
  101b6c:	e3a02004 	mov	r2, #4
  101b70:	e5832000 	str	r2, [r3]
  101b74:	ea000003 	b	101b88 <rt_event_create+0x90>
  101b78:	e51b0008 	ldr	r0, [fp, #-8]
  101b7c:	eb00ed4e 	bl	13d0bc <free>
  101b80:	e3a03000 	mov	r3, #0
  101b84:	e50b3008 	str	r3, [fp, #-8]
  101b88:	e51b3008 	ldr	r3, [fp, #-8]
}
  101b8c:	e1a00003 	mov	r0, r3
  101b90:	e24bd004 	sub	sp, fp, #4
  101b94:	e8bd8800 	pop	{fp, pc}

00101b98 <rt_event_init>:

rt_err_t rt_event_init(rt_event_t event, const char *name, rt_uint8_t flag)
{
  101b98:	e92d4800 	push	{fp, lr}
  101b9c:	e28db004 	add	fp, sp, #4
  101ba0:	e24dd010 	sub	sp, sp, #16
  101ba4:	e50b0008 	str	r0, [fp, #-8]
  101ba8:	e50b100c 	str	r1, [fp, #-12]
  101bac:	e1a03002 	mov	r3, r2
  101bb0:	e54b300d 	strb	r3, [fp, #-13]
    RT_USER_IPC_INIT(event, RT_Object_Class_Event, _NRSYS_event_create, name, flag);
  101bb4:	e51b3008 	ldr	r3, [fp, #-8]
  101bb8:	e3530000 	cmp	r3, #0
  101bbc:	1a000001 	bne	101bc8 <rt_event_init+0x30>
  101bc0:	e3a03008 	mov	r3, #8
  101bc4:	ea000012 	b	101c14 <rt_event_init+0x7c>
  101bc8:	e55b300d 	ldrb	r3, [fp, #-13]
  101bcc:	e1a02003 	mov	r2, r3
  101bd0:	e51b100c 	ldr	r1, [fp, #-12]
  101bd4:	e3a0001a 	mov	r0, #26
  101bd8:	eb00e7be 	bl	13bad8 <syscall>
  101bdc:	e1a03000 	mov	r3, r0
  101be0:	e1a02003 	mov	r2, r3
  101be4:	e51b3008 	ldr	r3, [fp, #-8]
  101be8:	e5832004 	str	r2, [r3, #4]
  101bec:	e51b3008 	ldr	r3, [fp, #-8]
  101bf0:	e5933004 	ldr	r3, [r3, #4]
  101bf4:	e3530000 	cmp	r3, #0
  101bf8:	0a000004 	beq	101c10 <rt_event_init+0x78>
  101bfc:	e51b3008 	ldr	r3, [fp, #-8]
  101c00:	e3a02004 	mov	r2, #4
  101c04:	e5832000 	str	r2, [r3]
  101c08:	e3a03000 	mov	r3, #0
  101c0c:	ea000000 	b	101c14 <rt_event_init+0x7c>
  101c10:	e3a03001 	mov	r3, #1
}
  101c14:	e1a00003 	mov	r0, r3
  101c18:	e24bd004 	sub	sp, fp, #4
  101c1c:	e8bd8800 	pop	{fp, pc}

00101c20 <rt_event_delete>:

rt_err_t rt_event_delete(rt_event_t event)
{
  101c20:	e92d4800 	push	{fp, lr}
  101c24:	e28db004 	add	fp, sp, #4
  101c28:	e24dd010 	sub	sp, sp, #16
  101c2c:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DELETE(event, RT_Object_Class_Event, _NRSYS_event_delete);
  101c30:	e51b3010 	ldr	r3, [fp, #-16]
  101c34:	e3530000 	cmp	r3, #0
  101c38:	0a000003 	beq	101c4c <rt_event_delete+0x2c>
  101c3c:	e51b3010 	ldr	r3, [fp, #-16]
  101c40:	e5933004 	ldr	r3, [r3, #4]
  101c44:	e3530000 	cmp	r3, #0
  101c48:	1a000001 	bne	101c54 <rt_event_delete+0x34>
  101c4c:	e3a03008 	mov	r3, #8
  101c50:	ea000013 	b	101ca4 <rt_event_delete+0x84>
  101c54:	e51b3010 	ldr	r3, [fp, #-16]
  101c58:	e5933000 	ldr	r3, [r3]
  101c5c:	e3530004 	cmp	r3, #4
  101c60:	0a000001 	beq	101c6c <rt_event_delete+0x4c>
  101c64:	e3a03008 	mov	r3, #8
  101c68:	ea00000d 	b	101ca4 <rt_event_delete+0x84>
  101c6c:	e51b3010 	ldr	r3, [fp, #-16]
  101c70:	e5933004 	ldr	r3, [r3, #4]
  101c74:	e1a01003 	mov	r1, r3
  101c78:	e3a0001b 	mov	r0, #27
  101c7c:	eb00e795 	bl	13bad8 <syscall>
  101c80:	e50b0008 	str	r0, [fp, #-8]
  101c84:	e51b3008 	ldr	r3, [fp, #-8]
  101c88:	e3530000 	cmp	r3, #0
  101c8c:	0a000001 	beq	101c98 <rt_event_delete+0x78>
  101c90:	e51b3008 	ldr	r3, [fp, #-8]
  101c94:	ea000002 	b	101ca4 <rt_event_delete+0x84>
  101c98:	e51b0010 	ldr	r0, [fp, #-16]
  101c9c:	eb00ed06 	bl	13d0bc <free>
  101ca0:	e3a03000 	mov	r3, #0
}
  101ca4:	e1a00003 	mov	r0, r3
  101ca8:	e24bd004 	sub	sp, fp, #4
  101cac:	e8bd8800 	pop	{fp, pc}

00101cb0 <rt_event_detach>:

rt_err_t rt_event_detach(rt_event_t event)
{
  101cb0:	e92d4800 	push	{fp, lr}
  101cb4:	e28db004 	add	fp, sp, #4
  101cb8:	e24dd010 	sub	sp, sp, #16
  101cbc:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DETACH(event, RT_Object_Class_Event, _NRSYS_event_delete);
  101cc0:	e51b3010 	ldr	r3, [fp, #-16]
  101cc4:	e3530000 	cmp	r3, #0
  101cc8:	0a000003 	beq	101cdc <rt_event_detach+0x2c>
  101ccc:	e51b3010 	ldr	r3, [fp, #-16]
  101cd0:	e5933004 	ldr	r3, [r3, #4]
  101cd4:	e3530000 	cmp	r3, #0
  101cd8:	1a000001 	bne	101ce4 <rt_event_detach+0x34>
  101cdc:	e3a03008 	mov	r3, #8
  101ce0:	ea000017 	b	101d44 <rt_event_detach+0x94>
  101ce4:	e51b3010 	ldr	r3, [fp, #-16]
  101ce8:	e5933000 	ldr	r3, [r3]
  101cec:	e3530004 	cmp	r3, #4
  101cf0:	0a000001 	beq	101cfc <rt_event_detach+0x4c>
  101cf4:	e3a03008 	mov	r3, #8
  101cf8:	ea000011 	b	101d44 <rt_event_detach+0x94>
  101cfc:	e51b3010 	ldr	r3, [fp, #-16]
  101d00:	e5933004 	ldr	r3, [r3, #4]
  101d04:	e1a01003 	mov	r1, r3
  101d08:	e3a0001b 	mov	r0, #27
  101d0c:	eb00e771 	bl	13bad8 <syscall>
  101d10:	e50b0008 	str	r0, [fp, #-8]
  101d14:	e51b3008 	ldr	r3, [fp, #-8]
  101d18:	e3530000 	cmp	r3, #0
  101d1c:	0a000001 	beq	101d28 <rt_event_detach+0x78>
  101d20:	e51b3008 	ldr	r3, [fp, #-8]
  101d24:	ea000006 	b	101d44 <rt_event_detach+0x94>
  101d28:	e51b3010 	ldr	r3, [fp, #-16]
  101d2c:	e3a02000 	mov	r2, #0
  101d30:	e5832000 	str	r2, [r3]
  101d34:	e51b3010 	ldr	r3, [fp, #-16]
  101d38:	e3a02000 	mov	r2, #0
  101d3c:	e5832004 	str	r2, [r3, #4]
  101d40:	e3a03000 	mov	r3, #0
}
  101d44:	e1a00003 	mov	r0, r3
  101d48:	e24bd004 	sub	sp, fp, #4
  101d4c:	e8bd8800 	pop	{fp, pc}

00101d50 <rt_event_send>:

rt_err_t rt_event_send(rt_event_t event, rt_uint32_t set)
{
  101d50:	e92d4800 	push	{fp, lr}
  101d54:	e28db004 	add	fp, sp, #4
  101d58:	e24dd008 	sub	sp, sp, #8
  101d5c:	e50b0008 	str	r0, [fp, #-8]
  101d60:	e50b100c 	str	r1, [fp, #-12]
    RT_USER_IPC_CHECK(event, RT_Object_Class_Event);
  101d64:	e51b3008 	ldr	r3, [fp, #-8]
  101d68:	e3530000 	cmp	r3, #0
  101d6c:	0a000003 	beq	101d80 <rt_event_send+0x30>
  101d70:	e51b3008 	ldr	r3, [fp, #-8]
  101d74:	e5933004 	ldr	r3, [r3, #4]
  101d78:	e3530000 	cmp	r3, #0
  101d7c:	1a000001 	bne	101d88 <rt_event_send+0x38>
  101d80:	e3a03008 	mov	r3, #8
  101d84:	ea00000c 	b	101dbc <rt_event_send+0x6c>
  101d88:	e51b3008 	ldr	r3, [fp, #-8]
  101d8c:	e5933000 	ldr	r3, [r3]
  101d90:	e3530004 	cmp	r3, #4
  101d94:	0a000001 	beq	101da0 <rt_event_send+0x50>
  101d98:	e3a03008 	mov	r3, #8
  101d9c:	ea000006 	b	101dbc <rt_event_send+0x6c>
    return syscall(_NRSYS_event_send, event->data, set);
  101da0:	e51b3008 	ldr	r3, [fp, #-8]
  101da4:	e5933004 	ldr	r3, [r3, #4]
  101da8:	e51b200c 	ldr	r2, [fp, #-12]
  101dac:	e1a01003 	mov	r1, r3
  101db0:	e3a0001c 	mov	r0, #28
  101db4:	eb00e747 	bl	13bad8 <syscall>
  101db8:	e1a03000 	mov	r3, r0
}
  101dbc:	e1a00003 	mov	r0, r3
  101dc0:	e24bd004 	sub	sp, fp, #4
  101dc4:	e8bd8800 	pop	{fp, pc}

00101dc8 <rt_event_recv>:
rt_err_t rt_event_recv(rt_event_t   event,
                       rt_uint32_t  set,
                       rt_uint8_t   opt,
                       rt_int32_t   timeout,
                       rt_uint32_t *recved)
{
  101dc8:	e92d4800 	push	{fp, lr}
  101dcc:	e28db004 	add	fp, sp, #4
  101dd0:	e24dd018 	sub	sp, sp, #24
  101dd4:	e50b0008 	str	r0, [fp, #-8]
  101dd8:	e50b100c 	str	r1, [fp, #-12]
  101ddc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  101de0:	e1a03002 	mov	r3, r2
  101de4:	e54b300d 	strb	r3, [fp, #-13]
    RT_USER_IPC_CHECK(event, RT_Object_Class_Event);
  101de8:	e51b3008 	ldr	r3, [fp, #-8]
  101dec:	e3530000 	cmp	r3, #0
  101df0:	0a000003 	beq	101e04 <rt_event_recv+0x3c>
  101df4:	e51b3008 	ldr	r3, [fp, #-8]
  101df8:	e5933004 	ldr	r3, [r3, #4]
  101dfc:	e3530000 	cmp	r3, #0
  101e00:	1a000001 	bne	101e0c <rt_event_recv+0x44>
  101e04:	e3a03008 	mov	r3, #8
  101e08:	ea000011 	b	101e54 <rt_event_recv+0x8c>
  101e0c:	e51b3008 	ldr	r3, [fp, #-8]
  101e10:	e5933000 	ldr	r3, [r3]
  101e14:	e3530004 	cmp	r3, #4
  101e18:	0a000001 	beq	101e24 <rt_event_recv+0x5c>
  101e1c:	e3a03008 	mov	r3, #8
  101e20:	ea00000b 	b	101e54 <rt_event_recv+0x8c>
    return syscall(_NRSYS_event_recv, event->data, set, opt, timeout, recved);
  101e24:	e51b3008 	ldr	r3, [fp, #-8]
  101e28:	e5931004 	ldr	r1, [r3, #4]
  101e2c:	e55b200d 	ldrb	r2, [fp, #-13]
  101e30:	e59b3004 	ldr	r3, [fp, #4]
  101e34:	e58d3004 	str	r3, [sp, #4]
  101e38:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  101e3c:	e58d3000 	str	r3, [sp]
  101e40:	e1a03002 	mov	r3, r2
  101e44:	e51b200c 	ldr	r2, [fp, #-12]
  101e48:	e3a0001d 	mov	r0, #29
  101e4c:	eb00e721 	bl	13bad8 <syscall>
  101e50:	e1a03000 	mov	r3, r0
}
  101e54:	e1a00003 	mov	r0, r3
  101e58:	e24bd004 	sub	sp, fp, #4
  101e5c:	e8bd8800 	pop	{fp, pc}

00101e60 <rt_tick_get>:

rt_tick_t rt_tick_get(void)
{
  101e60:	e92d4800 	push	{fp, lr}
  101e64:	e28db004 	add	fp, sp, #4
    return (rt_tick_t)syscall(_NRSYS_rt_tick_get);
  101e68:	e3a00061 	mov	r0, #97	; 0x61
  101e6c:	eb00e719 	bl	13bad8 <syscall>
  101e70:	e1a03000 	mov	r3, r0
}
  101e74:	e1a00003 	mov	r0, r3
  101e78:	e8bd8800 	pop	{fp, pc}

00101e7c <rt_thread_mdelay>:

rt_err_t rt_thread_mdelay(rt_int32_t ms)
{
  101e7c:	e92d4800 	push	{fp, lr}
  101e80:	e28db004 	add	fp, sp, #4
  101e84:	e24dd008 	sub	sp, sp, #8
  101e88:	e50b0008 	str	r0, [fp, #-8]
    return (rt_err_t)syscall(_NRSYS_rt_thread_mdelay, ms);
  101e8c:	e51b1008 	ldr	r1, [fp, #-8]
  101e90:	e3a00066 	mov	r0, #102	; 0x66
  101e94:	eb00e70f 	bl	13bad8 <syscall>
  101e98:	e1a03000 	mov	r3, r0
}
  101e9c:	e1a00003 	mov	r0, r3
  101ea0:	e24bd004 	sub	sp, fp, #4
  101ea4:	e8bd8800 	pop	{fp, pc}

00101ea8 <lwp_shmget>:

int lwp_shmget(size_t key, size_t size, int create)
{
  101ea8:	e92d4800 	push	{fp, lr}
  101eac:	e28db004 	add	fp, sp, #4
  101eb0:	e24dd010 	sub	sp, sp, #16
  101eb4:	e50b0008 	str	r0, [fp, #-8]
  101eb8:	e50b100c 	str	r1, [fp, #-12]
  101ebc:	e50b2010 	str	r2, [fp, #-16]
    return (int)syscall(_NRSYS_shmget, key, size, create);
  101ec0:	e51b3010 	ldr	r3, [fp, #-16]
  101ec4:	e51b200c 	ldr	r2, [fp, #-12]
  101ec8:	e51b1008 	ldr	r1, [fp, #-8]
  101ecc:	e3a00037 	mov	r0, #55	; 0x37
  101ed0:	eb00e700 	bl	13bad8 <syscall>
  101ed4:	e1a03000 	mov	r3, r0
}
  101ed8:	e1a00003 	mov	r0, r3
  101edc:	e24bd004 	sub	sp, fp, #4
  101ee0:	e8bd8800 	pop	{fp, pc}

00101ee4 <lwp_shmrm>:

int lwp_shmrm(int id)
{
  101ee4:	e92d4800 	push	{fp, lr}
  101ee8:	e28db004 	add	fp, sp, #4
  101eec:	e24dd008 	sub	sp, sp, #8
  101ef0:	e50b0008 	str	r0, [fp, #-8]
    return (int)syscall(_NRSYS_shmrm, id);
  101ef4:	e51b1008 	ldr	r1, [fp, #-8]
  101ef8:	e3a00038 	mov	r0, #56	; 0x38
  101efc:	eb00e6f5 	bl	13bad8 <syscall>
  101f00:	e1a03000 	mov	r3, r0
}
  101f04:	e1a00003 	mov	r0, r3
  101f08:	e24bd004 	sub	sp, fp, #4
  101f0c:	e8bd8800 	pop	{fp, pc}

00101f10 <lwp_shmat>:

void* lwp_shmat(int id, void* shm_vaddr)
{
  101f10:	e92d4800 	push	{fp, lr}
  101f14:	e28db004 	add	fp, sp, #4
  101f18:	e24dd008 	sub	sp, sp, #8
  101f1c:	e50b0008 	str	r0, [fp, #-8]
  101f20:	e50b100c 	str	r1, [fp, #-12]
    return (void*)syscall(_NRSYS_shmat, id, shm_vaddr);
  101f24:	e51b200c 	ldr	r2, [fp, #-12]
  101f28:	e51b1008 	ldr	r1, [fp, #-8]
  101f2c:	e3a00039 	mov	r0, #57	; 0x39
  101f30:	eb00e6e8 	bl	13bad8 <syscall>
  101f34:	e1a03000 	mov	r3, r0
}
  101f38:	e1a00003 	mov	r0, r3
  101f3c:	e24bd004 	sub	sp, fp, #4
  101f40:	e8bd8800 	pop	{fp, pc}

00101f44 <lwp_shmdt>:

int lwp_shmdt(void* shm_vaddr)
{
  101f44:	e92d4800 	push	{fp, lr}
  101f48:	e28db004 	add	fp, sp, #4
  101f4c:	e24dd008 	sub	sp, sp, #8
  101f50:	e50b0008 	str	r0, [fp, #-8]
    return (int)syscall(_NRSYS_shmdt, shm_vaddr);
  101f54:	e51b1008 	ldr	r1, [fp, #-8]
  101f58:	e3a0003a 	mov	r0, #58	; 0x3a
  101f5c:	eb00e6dd 	bl	13bad8 <syscall>
  101f60:	e1a03000 	mov	r3, r0
}
  101f64:	e1a00003 	mov	r0, r3
  101f68:	e24bd004 	sub	sp, fp, #4
  101f6c:	e8bd8800 	pop	{fp, pc}

00101f70 <exec>:

int exec(char *filename, int argc, char **argv, char **envp)
{
  101f70:	e92d4800 	push	{fp, lr}
  101f74:	e28db004 	add	fp, sp, #4
  101f78:	e24dd018 	sub	sp, sp, #24
  101f7c:	e50b0008 	str	r0, [fp, #-8]
  101f80:	e50b100c 	str	r1, [fp, #-12]
  101f84:	e50b2010 	str	r2, [fp, #-16]
  101f88:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return (int)syscall(_NRSYS_exec, filename, argc, argv, envp);
  101f8c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  101f90:	e58d3000 	str	r3, [sp]
  101f94:	e51b3010 	ldr	r3, [fp, #-16]
  101f98:	e51b200c 	ldr	r2, [fp, #-12]
  101f9c:	e51b1008 	ldr	r1, [fp, #-8]
  101fa0:	e3a0000d 	mov	r0, #13
  101fa4:	eb00e6cb 	bl	13bad8 <syscall>
  101fa8:	e1a03000 	mov	r3, r0
}
  101fac:	e1a00003 	mov	r0, r3
  101fb0:	e24bd004 	sub	sp, fp, #4
  101fb4:	e8bd8800 	pop	{fp, pc}

00101fb8 <lwp_kill>:

int lwp_kill(pid_t pid, int sig)
{
  101fb8:	e92d4800 	push	{fp, lr}
  101fbc:	e28db004 	add	fp, sp, #4
  101fc0:	e24dd008 	sub	sp, sp, #8
  101fc4:	e50b0008 	str	r0, [fp, #-8]
  101fc8:	e50b100c 	str	r1, [fp, #-12]
    return (int)syscall(_NRSYS_kill, pid, sig);
  101fcc:	e51b200c 	ldr	r2, [fp, #-12]
  101fd0:	e51b1008 	ldr	r1, [fp, #-8]
  101fd4:	e3a0000e 	mov	r0, #14
  101fd8:	eb00e6be 	bl	13bad8 <syscall>
  101fdc:	e1a03000 	mov	r3, r0
}
  101fe0:	e1a00003 	mov	r0, r3
  101fe4:	e24bd004 	sub	sp, fp, #4
  101fe8:	e8bd8800 	pop	{fp, pc}

00101fec <lwp_tkill>:

int lwp_tkill(int tid, int sig)
{
  101fec:	e92d4800 	push	{fp, lr}
  101ff0:	e28db004 	add	fp, sp, #4
  101ff4:	e24dd008 	sub	sp, sp, #8
  101ff8:	e50b0008 	str	r0, [fp, #-8]
  101ffc:	e50b100c 	str	r1, [fp, #-12]
    return (int)syscall(_NRSYS_tkill, tid, sig);
  102000:	e51b200c 	ldr	r2, [fp, #-12]
  102004:	e51b1008 	ldr	r1, [fp, #-8]
  102008:	e3a00069 	mov	r0, #105	; 0x69
  10200c:	eb00e6b1 	bl	13bad8 <syscall>
  102010:	e1a03000 	mov	r3, r0
}
  102014:	e1a00003 	mov	r0, r3
  102018:	e24bd004 	sub	sp, fp, #4
  10201c:	e8bd8800 	pop	{fp, pc}

00102020 <waitpid>:

pid_t waitpid(pid_t pid, int *status, int options)
{
  102020:	e92d4800 	push	{fp, lr}
  102024:	e28db004 	add	fp, sp, #4
  102028:	e24dd010 	sub	sp, sp, #16
  10202c:	e50b0008 	str	r0, [fp, #-8]
  102030:	e50b100c 	str	r1, [fp, #-12]
  102034:	e50b2010 	str	r2, [fp, #-16]
    return (int)syscall(_NRSYS_waitpid, pid, status, options);
  102038:	e51b3010 	ldr	r3, [fp, #-16]
  10203c:	e51b200c 	ldr	r2, [fp, #-12]
  102040:	e51b1008 	ldr	r1, [fp, #-8]
  102044:	e3a0006e 	mov	r0, #110	; 0x6e
  102048:	eb00e6a2 	bl	13bad8 <syscall>
  10204c:	e1a03000 	mov	r3, r0
}
  102050:	e1a00003 	mov	r0, r3
  102054:	e24bd004 	sub	sp, fp, #4
  102058:	e8bd8800 	pop	{fp, pc}

0010205c <rt_get_errno>:

rt_err_t rt_get_errno(void)
{
  10205c:	e92d4800 	push	{fp, lr}
  102060:	e28db004 	add	fp, sp, #4
    return (rt_err_t)syscall(_NRSYS_rt_get_errno);
  102064:	e3a0007a 	mov	r0, #122	; 0x7a
  102068:	eb00e69a 	bl	13bad8 <syscall>
  10206c:	e1a03000 	mov	r3, r0
}
  102070:	e1a00003 	mov	r0, r3
  102074:	e8bd8800 	pop	{fp, pc}

00102078 <rt_thread_find>:
#include <pthread.h>

void __pthread_init_run(void (*enter)(void *parameter), void *parameter);

rt_thread_t rt_thread_find(char *name)
{
  102078:	e92d4800 	push	{fp, lr}
  10207c:	e28db004 	add	fp, sp, #4
  102080:	e24dd008 	sub	sp, sp, #8
  102084:	e50b0008 	str	r0, [fp, #-8]
    return (rt_thread_t)syscall(_NRSYS_rt_thread_find, name);
  102088:	e51b1008 	ldr	r1, [fp, #-8]
  10208c:	e3a00044 	mov	r0, #68	; 0x44
  102090:	eb00e690 	bl	13bad8 <syscall>
  102094:	e1a03000 	mov	r3, r0
}
  102098:	e1a00003 	mov	r0, r3
  10209c:	e24bd004 	sub	sp, fp, #4
  1020a0:	e8bd8800 	pop	{fp, pc}

001020a4 <rt_thread_user_entry>:
    void (*entry)(void *parameter);
    void *parameter;
};

static void rt_thread_user_entry(void *arg)
{
  1020a4:	e92d4800 	push	{fp, lr}
  1020a8:	e28db004 	add	fp, sp, #4
  1020ac:	e24dd018 	sub	sp, sp, #24
  1020b0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    struct rt_thread_startup_ucontext *ucontext;
    void (*entry)(void *parameter);
    void *parameter;

    ucontext = (struct rt_thread_startup_ucontext *)arg;
  1020b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1020b8:	e50b3008 	str	r3, [fp, #-8]
    entry = ucontext->entry;
  1020bc:	e51b3008 	ldr	r3, [fp, #-8]
  1020c0:	e5933000 	ldr	r3, [r3]
  1020c4:	e50b300c 	str	r3, [fp, #-12]
    parameter = ucontext->parameter;
  1020c8:	e51b3008 	ldr	r3, [fp, #-8]
  1020cc:	e5933004 	ldr	r3, [r3, #4]
  1020d0:	e50b3010 	str	r3, [fp, #-16]
    rt_free(ucontext);
  1020d4:	e51b0008 	ldr	r0, [fp, #-8]
  1020d8:	eb0003b7 	bl	102fbc <rt_free>

    __pthread_init_run(entry, parameter);
  1020dc:	e51b1010 	ldr	r1, [fp, #-16]
  1020e0:	e51b000c 	ldr	r0, [fp, #-12]
  1020e4:	eb010056 	bl	142244 <__pthread_init_run>
}
  1020e8:	e320f000 	nop	{0}
  1020ec:	e24bd004 	sub	sp, fp, #4
  1020f0:	e8bd8800 	pop	{fp, pc}

001020f4 <rt_thread_create>:
        void (*entry)(void *parameter),
        void       *parameter,
        rt_uint32_t stack_size,
        rt_uint8_t  priority,
        rt_uint32_t tick)
{
  1020f4:	e92d4800 	push	{fp, lr}
  1020f8:	e28db004 	add	fp, sp, #4
  1020fc:	e24dd030 	sub	sp, sp, #48	; 0x30
  102100:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  102104:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  102108:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  10210c:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
    rt_thread_t thread;
    void * arg[] = {(void *)name, (void*)entry, (void*)parameter, (void*)(size_t)stack_size, (void*)(size_t)priority, (void*)(size_t)tick};
  102110:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  102114:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  102118:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10211c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  102120:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  102124:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  102128:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  10212c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  102130:	e5db3004 	ldrb	r3, [fp, #4]
  102134:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  102138:	e59b3008 	ldr	r3, [fp, #8]
  10213c:	e50b3010 	str	r3, [fp, #-16]
    struct rt_thread_startup_ucontext *ucontext;

    ucontext = rt_malloc(sizeof *ucontext);
  102140:	e3a00008 	mov	r0, #8
  102144:	eb000392 	bl	102f94 <rt_malloc>
  102148:	e50b0008 	str	r0, [fp, #-8]
    if (!ucontext)
  10214c:	e51b3008 	ldr	r3, [fp, #-8]
  102150:	e3530000 	cmp	r3, #0
  102154:	1a000001 	bne	102160 <rt_thread_create+0x6c>
    {
        return RT_NULL;
  102158:	e3a03000 	mov	r3, #0
  10215c:	ea000016 	b	1021bc <rt_thread_create+0xc8>
    }
    ucontext->entry = entry;
  102160:	e51b3008 	ldr	r3, [fp, #-8]
  102164:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  102168:	e5832000 	str	r2, [r3]
    ucontext->parameter = parameter;
  10216c:	e51b3008 	ldr	r3, [fp, #-8]
  102170:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  102174:	e5832004 	str	r2, [r3, #4]
    arg[1] = rt_thread_user_entry;
  102178:	e30230a4 	movw	r3, #8356	; 0x20a4
  10217c:	e3403010 	movt	r3, #16
  102180:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    arg[2] = ucontext;
  102184:	e51b3008 	ldr	r3, [fp, #-8]
  102188:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    thread = (rt_thread_t)syscall(_NRSYS_thread_create, arg);
  10218c:	e24b3024 	sub	r3, fp, #36	; 0x24
  102190:	e1a01003 	mov	r1, r3
  102194:	e3a00028 	mov	r0, #40	; 0x28
  102198:	eb00e64e 	bl	13bad8 <syscall>
  10219c:	e1a03000 	mov	r3, r0
  1021a0:	e50b300c 	str	r3, [fp, #-12]
    if (!thread)
  1021a4:	e51b300c 	ldr	r3, [fp, #-12]
  1021a8:	e3530000 	cmp	r3, #0
  1021ac:	1a000001 	bne	1021b8 <rt_thread_create+0xc4>
    {
        rt_free(ucontext);
  1021b0:	e51b0008 	ldr	r0, [fp, #-8]
  1021b4:	eb000380 	bl	102fbc <rt_free>
    }
    return thread;
  1021b8:	e51b300c 	ldr	r3, [fp, #-12]
}
  1021bc:	e1a00003 	mov	r0, r3
  1021c0:	e24bd004 	sub	sp, fp, #4
  1021c4:	e8bd8800 	pop	{fp, pc}

001021c8 <rt_thread_startup>:

rt_err_t rt_thread_startup(rt_thread_t thread)
{
  1021c8:	e92d4800 	push	{fp, lr}
  1021cc:	e28db004 	add	fp, sp, #4
  1021d0:	e24dd008 	sub	sp, sp, #8
  1021d4:	e50b0008 	str	r0, [fp, #-8]
    return syscall(_NRSYS_thread_startup, thread);
  1021d8:	e51b1008 	ldr	r1, [fp, #-8]
  1021dc:	e3a0002a 	mov	r0, #42	; 0x2a
  1021e0:	eb00e63c 	bl	13bad8 <syscall>
  1021e4:	e1a03000 	mov	r3, r0
}
  1021e8:	e1a00003 	mov	r0, r3
  1021ec:	e24bd004 	sub	sp, fp, #4
  1021f0:	e8bd8800 	pop	{fp, pc}

001021f4 <rt_thread_self>:

rt_thread_t rt_thread_self(void)
{
  1021f4:	e92d4800 	push	{fp, lr}
  1021f8:	e28db004 	add	fp, sp, #4
    return (rt_thread_t)syscall(_NRSYS_thread_self);
  1021fc:	e3a0002b 	mov	r0, #43	; 0x2b
  102200:	eb00e634 	bl	13bad8 <syscall>
  102204:	e1a03000 	mov	r3, r0
}
  102208:	e1a00003 	mov	r0, r3
  10220c:	e8bd8800 	pop	{fp, pc}

00102210 <rt_thread_delete>:

rt_err_t rt_thread_delete(rt_thread_t thread)
{
  102210:	e92d4800 	push	{fp, lr}
  102214:	e28db004 	add	fp, sp, #4
  102218:	e24dd008 	sub	sp, sp, #8
  10221c:	e50b0008 	str	r0, [fp, #-8]
    return syscall(_NRSYS_thread_delete, thread);
  102220:	e51b1008 	ldr	r1, [fp, #-8]
  102224:	e3a00029 	mov	r0, #41	; 0x29
  102228:	eb00e62a 	bl	13bad8 <syscall>
  10222c:	e1a03000 	mov	r3, r0
}
  102230:	e1a00003 	mov	r0, r3
  102234:	e24bd004 	sub	sp, fp, #4
  102238:	e8bd8800 	pop	{fp, pc}

0010223c <rt_enter_critical>:

void rt_enter_critical(void)
{
  10223c:	e92d4800 	push	{fp, lr}
  102240:	e28db004 	add	fp, sp, #4
    syscall(_NRSYS_enter_critical);
  102244:	e3a00032 	mov	r0, #50	; 0x32
  102248:	eb00e622 	bl	13bad8 <syscall>
}
  10224c:	e320f000 	nop	{0}
  102250:	e8bd8800 	pop	{fp, pc}

00102254 <rt_exit_critical>:

void rt_exit_critical(void)
{
  102254:	e92d4800 	push	{fp, lr}
  102258:	e28db004 	add	fp, sp, #4
    syscall(_NRSYS_exit_critical);
  10225c:	e3a00033 	mov	r0, #51	; 0x33
  102260:	eb00e61c 	bl	13bad8 <syscall>
}
  102264:	e320f000 	nop	{0}
  102268:	e8bd8800 	pop	{fp, pc}

0010226c <cacheflush>:

int cacheflush(void *addr, int size, int cache)
{
  10226c:	e92d4800 	push	{fp, lr}
  102270:	e28db004 	add	fp, sp, #4
  102274:	e24dd010 	sub	sp, sp, #16
  102278:	e50b0008 	str	r0, [fp, #-8]
  10227c:	e50b100c 	str	r1, [fp, #-12]
  102280:	e50b2010 	str	r2, [fp, #-16]
    return syscall(_NRSYS_cacheflush, addr, size, cache);
  102284:	e51b3010 	ldr	r3, [fp, #-16]
  102288:	e51b200c 	ldr	r2, [fp, #-12]
  10228c:	e51b1008 	ldr	r1, [fp, #-8]
  102290:	e3a0006b 	mov	r0, #107	; 0x6b
  102294:	eb00e60f 	bl	13bad8 <syscall>
  102298:	e1a03000 	mov	r3, r0
}
  10229c:	e1a00003 	mov	r0, r3
  1022a0:	e24bd004 	sub	sp, fp, #4
  1022a4:	e8bd8800 	pop	{fp, pc}

001022a8 <rt_list_init>:
 * @brief initialize a list
 *
 * @param l list to be initialized
 */
rt_inline void rt_list_init(rt_list_t *l)
{
  1022a8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1022ac:	e28db000 	add	fp, sp, #0
  1022b0:	e24dd00c 	sub	sp, sp, #12
  1022b4:	e50b0008 	str	r0, [fp, #-8]
    l->next = l->prev = l;
  1022b8:	e51b3008 	ldr	r3, [fp, #-8]
  1022bc:	e51b2008 	ldr	r2, [fp, #-8]
  1022c0:	e5832004 	str	r2, [r3, #4]
  1022c4:	e51b3008 	ldr	r3, [fp, #-8]
  1022c8:	e5932004 	ldr	r2, [r3, #4]
  1022cc:	e51b3008 	ldr	r3, [fp, #-8]
  1022d0:	e5832000 	str	r2, [r3]
}
  1022d4:	e320f000 	nop	{0}
  1022d8:	e28bd000 	add	sp, fp, #0
  1022dc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1022e0:	e12fff1e 	bx	lr

001022e4 <rt_list_insert_after>:
 *
 * @param l list to insert it
 * @param n new node to be inserted
 */
rt_inline void rt_list_insert_after(rt_list_t *l, rt_list_t *n)
{
  1022e4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1022e8:	e28db000 	add	fp, sp, #0
  1022ec:	e24dd00c 	sub	sp, sp, #12
  1022f0:	e50b0008 	str	r0, [fp, #-8]
  1022f4:	e50b100c 	str	r1, [fp, #-12]
    l->next->prev = n;
  1022f8:	e51b3008 	ldr	r3, [fp, #-8]
  1022fc:	e5933000 	ldr	r3, [r3]
  102300:	e51b200c 	ldr	r2, [fp, #-12]
  102304:	e5832004 	str	r2, [r3, #4]
    n->next = l->next;
  102308:	e51b3008 	ldr	r3, [fp, #-8]
  10230c:	e5932000 	ldr	r2, [r3]
  102310:	e51b300c 	ldr	r3, [fp, #-12]
  102314:	e5832000 	str	r2, [r3]

    l->next = n;
  102318:	e51b3008 	ldr	r3, [fp, #-8]
  10231c:	e51b200c 	ldr	r2, [fp, #-12]
  102320:	e5832000 	str	r2, [r3]
    n->prev = l;
  102324:	e51b300c 	ldr	r3, [fp, #-12]
  102328:	e51b2008 	ldr	r2, [fp, #-8]
  10232c:	e5832004 	str	r2, [r3, #4]
}
  102330:	e320f000 	nop	{0}
  102334:	e28bd000 	add	sp, fp, #0
  102338:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10233c:	e12fff1e 	bx	lr

00102340 <rt_list_remove>:
/**
 * @brief remove node from list.
 * @param n the node to remove from the list.
 */
rt_inline void rt_list_remove(rt_list_t *n)
{
  102340:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  102344:	e28db000 	add	fp, sp, #0
  102348:	e24dd00c 	sub	sp, sp, #12
  10234c:	e50b0008 	str	r0, [fp, #-8]
    n->next->prev = n->prev;
  102350:	e51b3008 	ldr	r3, [fp, #-8]
  102354:	e5933000 	ldr	r3, [r3]
  102358:	e51b2008 	ldr	r2, [fp, #-8]
  10235c:	e5922004 	ldr	r2, [r2, #4]
  102360:	e5832004 	str	r2, [r3, #4]
    n->prev->next = n->next;
  102364:	e51b3008 	ldr	r3, [fp, #-8]
  102368:	e5933004 	ldr	r3, [r3, #4]
  10236c:	e51b2008 	ldr	r2, [fp, #-8]
  102370:	e5922000 	ldr	r2, [r2]
  102374:	e5832000 	str	r2, [r3]

    n->next = n->prev = n;
  102378:	e51b3008 	ldr	r3, [fp, #-8]
  10237c:	e51b2008 	ldr	r2, [fp, #-8]
  102380:	e5832004 	str	r2, [r3, #4]
  102384:	e51b3008 	ldr	r3, [fp, #-8]
  102388:	e5932004 	ldr	r2, [r3, #4]
  10238c:	e51b3008 	ldr	r3, [fp, #-8]
  102390:	e5832000 	str	r2, [r3]
}
  102394:	e320f000 	nop	{0}
  102398:	e28bd000 	add	sp, fp, #0
  10239c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1023a0:	e12fff1e 	bx	lr

001023a4 <rt_list_isempty>:
/**
 * @brief tests whether a list is empty
 * @param l the list to test.
 */
rt_inline int rt_list_isempty(const rt_list_t *l)
{
  1023a4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1023a8:	e28db000 	add	fp, sp, #0
  1023ac:	e24dd00c 	sub	sp, sp, #12
  1023b0:	e50b0008 	str	r0, [fp, #-8]
    return l->next == l;
  1023b4:	e51b3008 	ldr	r3, [fp, #-8]
  1023b8:	e5933000 	ldr	r3, [r3]
  1023bc:	e51b2008 	ldr	r2, [fp, #-8]
  1023c0:	e1520003 	cmp	r2, r3
  1023c4:	03a03001 	moveq	r3, #1
  1023c8:	13a03000 	movne	r3, #0
  1023cc:	e6ef3073 	uxtb	r3, r3
}
  1023d0:	e1a00003 	mov	r0, r3
  1023d4:	e28bd000 	add	sp, fp, #0
  1023d8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1023dc:	e12fff1e 	bx	lr

001023e0 <_rt_timer_init>:
static void _rt_timer_init(rt_timer_t timer,
                           void (*timeout)(void *parameter),
                           void      *parameter,
                           rt_tick_t  time,
                           rt_uint8_t flag)
{
  1023e0:	e92d4800 	push	{fp, lr}
  1023e4:	e28db004 	add	fp, sp, #4
  1023e8:	e24dd018 	sub	sp, sp, #24
  1023ec:	e50b0010 	str	r0, [fp, #-16]
  1023f0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1023f4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  1023f8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    int i;

    /* set flag */
    timer->parent.flag  = flag;
  1023fc:	e51b3010 	ldr	r3, [fp, #-16]
  102400:	e5db2004 	ldrb	r2, [fp, #4]
  102404:	e5c32009 	strb	r2, [r3, #9]

    /* set deactivated */
    timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
  102408:	e51b3010 	ldr	r3, [fp, #-16]
  10240c:	e5d33009 	ldrb	r3, [r3, #9]
  102410:	e3c33001 	bic	r3, r3, #1
  102414:	e6ef2073 	uxtb	r2, r3
  102418:	e51b3010 	ldr	r3, [fp, #-16]
  10241c:	e5c32009 	strb	r2, [r3, #9]

    timer->timeout_func = timeout;
  102420:	e51b3010 	ldr	r3, [fp, #-16]
  102424:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  102428:	e583201c 	str	r2, [r3, #28]
    timer->parameter    = parameter;
  10242c:	e51b3010 	ldr	r3, [fp, #-16]
  102430:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  102434:	e5832020 	str	r2, [r3, #32]

    timer->timeout_tick = 0;
  102438:	e51b3010 	ldr	r3, [fp, #-16]
  10243c:	e3a02000 	mov	r2, #0
  102440:	e5832028 	str	r2, [r3, #40]	; 0x28
    timer->init_tick    = time;
  102444:	e51b3010 	ldr	r3, [fp, #-16]
  102448:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  10244c:	e5832024 	str	r2, [r3, #36]	; 0x24

    /* initialize timer list */
    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
  102450:	e3a03000 	mov	r3, #0
  102454:	e50b3008 	str	r3, [fp, #-8]
  102458:	ea00000a 	b	102488 <_rt_timer_init+0xa8>
    {
        rt_list_init(&(timer->row[i]));
  10245c:	e51b3008 	ldr	r3, [fp, #-8]
  102460:	e2833002 	add	r3, r3, #2
  102464:	e1a03183 	lsl	r3, r3, #3
  102468:	e51b2010 	ldr	r2, [fp, #-16]
  10246c:	e0823003 	add	r3, r2, r3
  102470:	e2833004 	add	r3, r3, #4
  102474:	e1a00003 	mov	r0, r3
  102478:	ebffff8a 	bl	1022a8 <rt_list_init>
    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
  10247c:	e51b3008 	ldr	r3, [fp, #-8]
  102480:	e2833001 	add	r3, r3, #1
  102484:	e50b3008 	str	r3, [fp, #-8]
  102488:	e51b3008 	ldr	r3, [fp, #-8]
  10248c:	e3530000 	cmp	r3, #0
  102490:	dafffff1 	ble	10245c <_rt_timer_init+0x7c>
    }
}
  102494:	e320f000 	nop	{0}
  102498:	e24bd004 	sub	sp, fp, #4
  10249c:	e8bd8800 	pop	{fp, pc}

001024a0 <rt_timer_list_next_timeout>:

/* the fist timer always in the last row */
static rt_tick_t rt_timer_list_next_timeout(rt_list_t timer_list[])
{
  1024a0:	e92d4800 	push	{fp, lr}
  1024a4:	e28db004 	add	fp, sp, #4
  1024a8:	e24dd010 	sub	sp, sp, #16
  1024ac:	e50b0010 	str	r0, [fp, #-16]
    struct rt_timer *timer;

    if (rt_list_isempty(&timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1]))
  1024b0:	e51b0010 	ldr	r0, [fp, #-16]
  1024b4:	ebffffba 	bl	1023a4 <rt_list_isempty>
  1024b8:	e1a03000 	mov	r3, r0
  1024bc:	e3530000 	cmp	r3, #0
  1024c0:	0a000001 	beq	1024cc <rt_timer_list_next_timeout+0x2c>
        return RT_TICK_MAX;
  1024c4:	e3e03000 	mvn	r3, #0
  1024c8:	ea000005 	b	1024e4 <rt_timer_list_next_timeout+0x44>

    timer = rt_list_entry(timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1].next,
  1024cc:	e51b3010 	ldr	r3, [fp, #-16]
  1024d0:	e5933000 	ldr	r3, [r3]
  1024d4:	e2433014 	sub	r3, r3, #20
  1024d8:	e50b3008 	str	r3, [fp, #-8]
                          struct rt_timer, row[RT_TIMER_SKIP_LIST_LEVEL - 1]);

    return timer->timeout_tick;
  1024dc:	e51b3008 	ldr	r3, [fp, #-8]
  1024e0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
}
  1024e4:	e1a00003 	mov	r0, r3
  1024e8:	e24bd004 	sub	sp, fp, #4
  1024ec:	e8bd8800 	pop	{fp, pc}

001024f0 <_rt_timer_remove>:

rt_inline void _rt_timer_remove(rt_timer_t timer)
{
  1024f0:	e92d4800 	push	{fp, lr}
  1024f4:	e28db004 	add	fp, sp, #4
  1024f8:	e24dd010 	sub	sp, sp, #16
  1024fc:	e50b0010 	str	r0, [fp, #-16]
    int i;

    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
  102500:	e3a03000 	mov	r3, #0
  102504:	e50b3008 	str	r3, [fp, #-8]
  102508:	ea00000a 	b	102538 <_rt_timer_remove+0x48>
    {
        rt_list_remove(&timer->row[i]);
  10250c:	e51b3008 	ldr	r3, [fp, #-8]
  102510:	e2833002 	add	r3, r3, #2
  102514:	e1a03183 	lsl	r3, r3, #3
  102518:	e51b2010 	ldr	r2, [fp, #-16]
  10251c:	e0823003 	add	r3, r2, r3
  102520:	e2833004 	add	r3, r3, #4
  102524:	e1a00003 	mov	r0, r3
  102528:	ebffff84 	bl	102340 <rt_list_remove>
    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
  10252c:	e51b3008 	ldr	r3, [fp, #-8]
  102530:	e2833001 	add	r3, r3, #1
  102534:	e50b3008 	str	r3, [fp, #-8]
  102538:	e51b3008 	ldr	r3, [fp, #-8]
  10253c:	e3530000 	cmp	r3, #0
  102540:	dafffff1 	ble	10250c <_rt_timer_remove+0x1c>
    }
}
  102544:	e320f000 	nop	{0}
  102548:	e24bd004 	sub	sp, fp, #4
  10254c:	e8bd8800 	pop	{fp, pc}

00102550 <rt_timer_init>:
                   const char *name,
                   void (*timeout)(void *parameter),
                   void       *parameter,
                   rt_tick_t   time,
                   rt_uint8_t  flag)
{
  102550:	e92d4800 	push	{fp, lr}
  102554:	e28db004 	add	fp, sp, #4
  102558:	e24dd018 	sub	sp, sp, #24
  10255c:	e50b0008 	str	r0, [fp, #-8]
  102560:	e50b100c 	str	r1, [fp, #-12]
  102564:	e50b2010 	str	r2, [fp, #-16]
  102568:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    _rt_timer_init(timer, timeout, parameter, time, flag);
  10256c:	e5db3008 	ldrb	r3, [fp, #8]
  102570:	e58d3000 	str	r3, [sp]
  102574:	e59b3004 	ldr	r3, [fp, #4]
  102578:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  10257c:	e51b1010 	ldr	r1, [fp, #-16]
  102580:	e51b0008 	ldr	r0, [fp, #-8]
  102584:	ebffff95 	bl	1023e0 <_rt_timer_init>
}
  102588:	e320f000 	nop	{0}
  10258c:	e24bd004 	sub	sp, fp, #4
  102590:	e8bd8800 	pop	{fp, pc}

00102594 <rt_timer_detach>:
 * @param timer the static timer object
 *
 * @return the operation status, RT_EOK on OK; RT_ERROR on error
 */
rt_err_t rt_timer_detach(rt_timer_t timer)
{
  102594:	e92d4800 	push	{fp, lr}
  102598:	e28db004 	add	fp, sp, #4
  10259c:	e24dd008 	sub	sp, sp, #8
  1025a0:	e50b0008 	str	r0, [fp, #-8]

    /* make sure take mutex */
    while(rt_mutex_take(mutex, RT_WAITING_FOREVER) != RT_EOK);
  1025a4:	e320f000 	nop	{0}
  1025a8:	e30d3408 	movw	r3, #54280	; 0xd408
  1025ac:	e3403014 	movt	r3, #20
  1025b0:	e5933000 	ldr	r3, [r3]
  1025b4:	e3e01000 	mvn	r1, #0
  1025b8:	e1a00003 	mov	r0, r3
  1025bc:	ebfffa4f 	bl	100f00 <rt_mutex_take>
  1025c0:	e1a03000 	mov	r3, r0
  1025c4:	e3530000 	cmp	r3, #0
  1025c8:	1afffff6 	bne	1025a8 <rt_timer_detach+0x14>

    _rt_timer_remove(timer);
  1025cc:	e51b0008 	ldr	r0, [fp, #-8]
  1025d0:	ebffffc6 	bl	1024f0 <_rt_timer_remove>

    /* release mutex */
    rt_mutex_release(mutex);
  1025d4:	e30d3408 	movw	r3, #54280	; 0xd408
  1025d8:	e3403014 	movt	r3, #20
  1025dc:	e5933000 	ldr	r3, [r3]
  1025e0:	e1a00003 	mov	r0, r3
  1025e4:	ebfffa63 	bl	100f78 <rt_mutex_release>

    return RT_EOK;
  1025e8:	e3a03000 	mov	r3, #0
}
  1025ec:	e1a00003 	mov	r0, r3
  1025f0:	e24bd004 	sub	sp, fp, #4
  1025f4:	e8bd8800 	pop	{fp, pc}

001025f8 <rt_timer_create>:
rt_timer_t rt_timer_create(const char *name,
                           void (*timeout)(void *parameter),
                           void       *parameter,
                           rt_tick_t   time,
                           rt_uint8_t  flag)
{
  1025f8:	e92d4800 	push	{fp, lr}
  1025fc:	e28db004 	add	fp, sp, #4
  102600:	e24dd020 	sub	sp, sp, #32
  102604:	e50b0010 	str	r0, [fp, #-16]
  102608:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10260c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  102610:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    struct rt_timer *timer;

    /* allocate a timer object */
    timer = (struct rt_timer *)malloc(sizeof(struct rt_timer));
  102614:	e3a0002c 	mov	r0, #44	; 0x2c
  102618:	eb00e8eb 	bl	13c9cc <malloc>
  10261c:	e1a03000 	mov	r3, r0
  102620:	e50b3008 	str	r3, [fp, #-8]
    if (timer == RT_NULL)
  102624:	e51b3008 	ldr	r3, [fp, #-8]
  102628:	e3530000 	cmp	r3, #0
  10262c:	1a000001 	bne	102638 <rt_timer_create+0x40>
    {
        return RT_NULL;
  102630:	e3a03000 	mov	r3, #0
  102634:	ea000007 	b	102658 <rt_timer_create+0x60>
    }

    _rt_timer_init(timer, timeout, parameter, time, flag);
  102638:	e5db3004 	ldrb	r3, [fp, #4]
  10263c:	e58d3000 	str	r3, [sp]
  102640:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  102644:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  102648:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10264c:	e51b0008 	ldr	r0, [fp, #-8]
  102650:	ebffff62 	bl	1023e0 <_rt_timer_init>

    return timer;
  102654:	e51b3008 	ldr	r3, [fp, #-8]
}
  102658:	e1a00003 	mov	r0, r3
  10265c:	e24bd004 	sub	sp, fp, #4
  102660:	e8bd8800 	pop	{fp, pc}

00102664 <rt_timer_delete>:
 * @param timer the timer to be deleted
 *
 * @return the operation status, RT_EOK on OK; RT_ERROR on error
 */
rt_err_t rt_timer_delete(rt_timer_t timer)
{
  102664:	e92d4800 	push	{fp, lr}
  102668:	e28db004 	add	fp, sp, #4
  10266c:	e24dd008 	sub	sp, sp, #8
  102670:	e50b0008 	str	r0, [fp, #-8]

    /* make sure take mutex */
    while(rt_mutex_take(mutex, RT_WAITING_FOREVER) != RT_EOK);
  102674:	e320f000 	nop	{0}
  102678:	e30d3408 	movw	r3, #54280	; 0xd408
  10267c:	e3403014 	movt	r3, #20
  102680:	e5933000 	ldr	r3, [r3]
  102684:	e3e01000 	mvn	r1, #0
  102688:	e1a00003 	mov	r0, r3
  10268c:	ebfffa1b 	bl	100f00 <rt_mutex_take>
  102690:	e1a03000 	mov	r3, r0
  102694:	e3530000 	cmp	r3, #0
  102698:	1afffff6 	bne	102678 <rt_timer_delete+0x14>

    _rt_timer_remove(timer);
  10269c:	e51b0008 	ldr	r0, [fp, #-8]
  1026a0:	ebffff92 	bl	1024f0 <_rt_timer_remove>

    /*free timer object */
    free(timer);
  1026a4:	e51b0008 	ldr	r0, [fp, #-8]
  1026a8:	eb00ea83 	bl	13d0bc <free>

    /* release mutex */
    rt_mutex_release(mutex);
  1026ac:	e30d3408 	movw	r3, #54280	; 0xd408
  1026b0:	e3403014 	movt	r3, #20
  1026b4:	e5933000 	ldr	r3, [r3]
  1026b8:	e1a00003 	mov	r0, r3
  1026bc:	ebfffa2d 	bl	100f78 <rt_mutex_release>

    return RT_EOK;
  1026c0:	e3a03000 	mov	r3, #0
}
  1026c4:	e1a00003 	mov	r0, r3
  1026c8:	e24bd004 	sub	sp, fp, #4
  1026cc:	e8bd8800 	pop	{fp, pc}

001026d0 <rt_timer_start>:
 * @param timer the timer to be started
 *
 * @return the operation status, RT_EOK on OK, -RT_ERROR on error
 */
rt_err_t rt_timer_start(rt_timer_t timer)
{
  1026d0:	e92d4800 	push	{fp, lr}
  1026d4:	e28db004 	add	fp, sp, #4
  1026d8:	e24dd020 	sub	sp, sp, #32
  1026dc:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
    rt_list_t *row_head[RT_TIMER_SKIP_LIST_LEVEL];
    unsigned int tst_nr;
    static unsigned int random_nr;

    /* make sure take mutex */
    while(rt_mutex_take(mutex, RT_WAITING_FOREVER) != RT_EOK);
  1026e0:	e320f000 	nop	{0}
  1026e4:	e30d3408 	movw	r3, #54280	; 0xd408
  1026e8:	e3403014 	movt	r3, #20
  1026ec:	e5933000 	ldr	r3, [r3]
  1026f0:	e3e01000 	mvn	r1, #0
  1026f4:	e1a00003 	mov	r0, r3
  1026f8:	ebfffa00 	bl	100f00 <rt_mutex_take>
  1026fc:	e1a03000 	mov	r3, r0
  102700:	e3530000 	cmp	r3, #0
  102704:	1afffff6 	bne	1026e4 <rt_timer_start+0x14>
    /* remove timer from list */
    _rt_timer_remove(timer);
  102708:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10270c:	ebffff77 	bl	1024f0 <_rt_timer_remove>
    /* change status of timer */
    timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
  102710:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  102714:	e5d33009 	ldrb	r3, [r3, #9]
  102718:	e3c33001 	bic	r3, r3, #1
  10271c:	e6ef2073 	uxtb	r2, r3
  102720:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  102724:	e5c32009 	strb	r2, [r3, #9]
    /* release mutex */
    rt_mutex_release(mutex);
  102728:	e30d3408 	movw	r3, #54280	; 0xd408
  10272c:	e3403014 	movt	r3, #20
  102730:	e5933000 	ldr	r3, [r3]
  102734:	e1a00003 	mov	r0, r3
  102738:	ebfffa0e 	bl	100f78 <rt_mutex_release>

    /*
     * get timeout tick,
     * the max timeout tick shall not great than RT_TICK_MAX/2
     */
    timer->timeout_tick = rt_tick_get() + timer->init_tick;
  10273c:	ebfffdc7 	bl	101e60 <rt_tick_get>
  102740:	e1a02000 	mov	r2, r0
  102744:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  102748:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  10274c:	e0822003 	add	r2, r2, r3
  102750:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  102754:	e5832028 	str	r2, [r3, #40]	; 0x28

    /* make sure take mutex */
    while(rt_mutex_take(mutex, RT_WAITING_FOREVER) != RT_EOK);
  102758:	e320f000 	nop	{0}
  10275c:	e30d3408 	movw	r3, #54280	; 0xd408
  102760:	e3403014 	movt	r3, #20
  102764:	e5933000 	ldr	r3, [r3]
  102768:	e3e01000 	mvn	r1, #0
  10276c:	e1a00003 	mov	r0, r3
  102770:	ebfff9e2 	bl	100f00 <rt_mutex_take>
  102774:	e1a03000 	mov	r3, r0
  102778:	e3530000 	cmp	r3, #0
  10277c:	1afffff6 	bne	10275c <rt_timer_start+0x8c>

    /* insert timer to soft timer list */
    timer_list = rt_soft_timer_list;
  102780:	e30d3410 	movw	r3, #54288	; 0xd410
  102784:	e3403014 	movt	r3, #20
  102788:	e50b3010 	str	r3, [fp, #-16]

    row_head[0]  = &timer_list[0];
  10278c:	e51b3010 	ldr	r3, [fp, #-16]
  102790:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    for (row_lvl = 0; row_lvl < RT_TIMER_SKIP_LIST_LEVEL; row_lvl++)
  102794:	e3a03000 	mov	r3, #0
  102798:	e50b3008 	str	r3, [fp, #-8]
  10279c:	ea000047 	b	1028c0 <rt_timer_start+0x1f0>
    {
        for (; row_head[row_lvl] != timer_list[row_lvl].prev;
             row_head[row_lvl]  = row_head[row_lvl]->next)
        {
            struct rt_timer *t;
            rt_list_t *p = row_head[row_lvl]->next;
  1027a0:	e51b3008 	ldr	r3, [fp, #-8]
  1027a4:	e1a03103 	lsl	r3, r3, #2
  1027a8:	e24b2004 	sub	r2, fp, #4
  1027ac:	e0823003 	add	r3, r2, r3
  1027b0:	e5133018 	ldr	r3, [r3, #-24]	; 0xffffffe8
  1027b4:	e5933000 	ldr	r3, [r3]
  1027b8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

            /* fix up the entry pointer */
            t = rt_list_entry(p, struct rt_timer, row[row_lvl]);
  1027bc:	e51b3008 	ldr	r3, [fp, #-8]
  1027c0:	e1a03183 	lsl	r3, r3, #3
  1027c4:	e2833014 	add	r3, r3, #20
  1027c8:	e2633000 	rsb	r3, r3, #0
  1027cc:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1027d0:	e0823003 	add	r3, r2, r3
  1027d4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
            /* If we have two timers that timeout at the same time, it's
             * preferred that the timer inserted early get called early.
             * So insert the new timer to the end the the some-timeout timer
             * list.
             */
            if ((t->timeout_tick - timer->timeout_tick) == 0)
  1027d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1027dc:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  1027e0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1027e4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  1027e8:	e1520003 	cmp	r2, r3
  1027ec:	0a000007 	beq	102810 <rt_timer_start+0x140>
            {
                continue;
            }
            else if ((t->timeout_tick - timer->timeout_tick) < RT_TICK_MAX / 2)
  1027f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1027f4:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  1027f8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1027fc:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  102800:	e0423003 	sub	r3, r2, r3
  102804:	e373010a 	cmn	r3, #-2147483646	; 0x80000002
  102808:	9a000019 	bls	102874 <rt_timer_start+0x1a4>
  10280c:	ea000000 	b	102814 <rt_timer_start+0x144>
                continue;
  102810:	e320f000 	nop	{0}
             row_head[row_lvl]  = row_head[row_lvl]->next)
  102814:	e51b3008 	ldr	r3, [fp, #-8]
  102818:	e1a03103 	lsl	r3, r3, #2
  10281c:	e24b2004 	sub	r2, fp, #4
  102820:	e0823003 	add	r3, r2, r3
  102824:	e5133018 	ldr	r3, [r3, #-24]	; 0xffffffe8
  102828:	e5932000 	ldr	r2, [r3]
  10282c:	e51b3008 	ldr	r3, [fp, #-8]
  102830:	e1a03103 	lsl	r3, r3, #2
  102834:	e24b1004 	sub	r1, fp, #4
  102838:	e0813003 	add	r3, r1, r3
  10283c:	e5032018 	str	r2, [r3, #-24]	; 0xffffffe8
        for (; row_head[row_lvl] != timer_list[row_lvl].prev;
  102840:	e51b3008 	ldr	r3, [fp, #-8]
  102844:	e1a03103 	lsl	r3, r3, #2
  102848:	e24b2004 	sub	r2, fp, #4
  10284c:	e0823003 	add	r3, r2, r3
  102850:	e5132018 	ldr	r2, [r3, #-24]	; 0xffffffe8
  102854:	e51b3008 	ldr	r3, [fp, #-8]
  102858:	e1a03183 	lsl	r3, r3, #3
  10285c:	e51b1010 	ldr	r1, [fp, #-16]
  102860:	e0813003 	add	r3, r1, r3
  102864:	e5933004 	ldr	r3, [r3, #4]
  102868:	e1520003 	cmp	r2, r3
  10286c:	1affffcb 	bne	1027a0 <rt_timer_start+0xd0>
  102870:	ea000000 	b	102878 <rt_timer_start+0x1a8>
            {
                break;
  102874:	e320f000 	nop	{0}
            }
        }
        if (row_lvl != RT_TIMER_SKIP_LIST_LEVEL - 1)
  102878:	e51b3008 	ldr	r3, [fp, #-8]
  10287c:	e3530000 	cmp	r3, #0
  102880:	0a00000b 	beq	1028b4 <rt_timer_start+0x1e4>
            row_head[row_lvl + 1] = row_head[row_lvl] + 1;
  102884:	e51b3008 	ldr	r3, [fp, #-8]
  102888:	e1a03103 	lsl	r3, r3, #2
  10288c:	e24b2004 	sub	r2, fp, #4
  102890:	e0823003 	add	r3, r2, r3
  102894:	e5132018 	ldr	r2, [r3, #-24]	; 0xffffffe8
  102898:	e51b3008 	ldr	r3, [fp, #-8]
  10289c:	e2833001 	add	r3, r3, #1
  1028a0:	e2822008 	add	r2, r2, #8
  1028a4:	e1a03103 	lsl	r3, r3, #2
  1028a8:	e24b1004 	sub	r1, fp, #4
  1028ac:	e0813003 	add	r3, r1, r3
  1028b0:	e5032018 	str	r2, [r3, #-24]	; 0xffffffe8
    for (row_lvl = 0; row_lvl < RT_TIMER_SKIP_LIST_LEVEL; row_lvl++)
  1028b4:	e51b3008 	ldr	r3, [fp, #-8]
  1028b8:	e2833001 	add	r3, r3, #1
  1028bc:	e50b3008 	str	r3, [fp, #-8]
  1028c0:	e51b3008 	ldr	r3, [fp, #-8]
  1028c4:	e3530000 	cmp	r3, #0
  1028c8:	0affffdc 	beq	102840 <rt_timer_start+0x170>

    /* Interestingly, this super simple timer insert counter works very very
     * well on distributing the list height uniformly. By means of "very very
     * well", I mean it beats the randomness of timer->timeout_tick very easily
     * (actually, the timeout_tick is not random and easy to be attacked). */
    random_nr++;
  1028cc:	e30d3418 	movw	r3, #54296	; 0xd418
  1028d0:	e3403014 	movt	r3, #20
  1028d4:	e5933000 	ldr	r3, [r3]
  1028d8:	e2832001 	add	r2, r3, #1
  1028dc:	e30d3418 	movw	r3, #54296	; 0xd418
  1028e0:	e3403014 	movt	r3, #20
  1028e4:	e5832000 	str	r2, [r3]
    tst_nr = random_nr;
  1028e8:	e30d3418 	movw	r3, #54296	; 0xd418
  1028ec:	e3403014 	movt	r3, #20
  1028f0:	e5933000 	ldr	r3, [r3]
  1028f4:	e50b300c 	str	r3, [fp, #-12]

    rt_list_insert_after(row_head[RT_TIMER_SKIP_LIST_LEVEL - 1],
  1028f8:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1028fc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  102900:	e2833014 	add	r3, r3, #20
  102904:	e1a01003 	mov	r1, r3
  102908:	e1a00002 	mov	r0, r2
  10290c:	ebfffe74 	bl	1022e4 <rt_list_insert_after>
                         &(timer->row[RT_TIMER_SKIP_LIST_LEVEL - 1]));
    for (row_lvl = 2; row_lvl <= RT_TIMER_SKIP_LIST_LEVEL; row_lvl++)
  102910:	e3a03002 	mov	r3, #2
  102914:	e50b3008 	str	r3, [fp, #-8]
  102918:	ea000018 	b	102980 <rt_timer_start+0x2b0>
    {
        if (!(tst_nr & RT_TIMER_SKIP_LIST_MASK))
  10291c:	e51b300c 	ldr	r3, [fp, #-12]
  102920:	e2033003 	and	r3, r3, #3
  102924:	e3530000 	cmp	r3, #0
  102928:	1a000018 	bne	102990 <rt_timer_start+0x2c0>
            rt_list_insert_after(row_head[RT_TIMER_SKIP_LIST_LEVEL - row_lvl],
  10292c:	e51b3008 	ldr	r3, [fp, #-8]
  102930:	e2633001 	rsb	r3, r3, #1
  102934:	e1a03103 	lsl	r3, r3, #2
  102938:	e24b2004 	sub	r2, fp, #4
  10293c:	e0823003 	add	r3, r2, r3
  102940:	e5130018 	ldr	r0, [r3, #-24]	; 0xffffffe8
                                 &(timer->row[RT_TIMER_SKIP_LIST_LEVEL - row_lvl]));
  102944:	e51b3008 	ldr	r3, [fp, #-8]
  102948:	e2633001 	rsb	r3, r3, #1
            rt_list_insert_after(row_head[RT_TIMER_SKIP_LIST_LEVEL - row_lvl],
  10294c:	e2833002 	add	r3, r3, #2
  102950:	e1a03183 	lsl	r3, r3, #3
  102954:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  102958:	e0823003 	add	r3, r2, r3
  10295c:	e2833004 	add	r3, r3, #4
  102960:	e1a01003 	mov	r1, r3
  102964:	ebfffe5e 	bl	1022e4 <rt_list_insert_after>
        else
            break;
        /* Shift over the bits we have tested. Works well with 1 bit and 2
         * bits. */
        tst_nr >>= (RT_TIMER_SKIP_LIST_MASK + 1) >> 1;
  102968:	e51b300c 	ldr	r3, [fp, #-12]
  10296c:	e1a03123 	lsr	r3, r3, #2
  102970:	e50b300c 	str	r3, [fp, #-12]
    for (row_lvl = 2; row_lvl <= RT_TIMER_SKIP_LIST_LEVEL; row_lvl++)
  102974:	e51b3008 	ldr	r3, [fp, #-8]
  102978:	e2833001 	add	r3, r3, #1
  10297c:	e50b3008 	str	r3, [fp, #-8]
  102980:	e51b3008 	ldr	r3, [fp, #-8]
  102984:	e3530001 	cmp	r3, #1
  102988:	9affffe3 	bls	10291c <rt_timer_start+0x24c>
  10298c:	ea000000 	b	102994 <rt_timer_start+0x2c4>
            break;
  102990:	e320f000 	nop	{0}
    }

    timer->parent.flag |= RT_TIMER_FLAG_ACTIVATED;
  102994:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  102998:	e5d33009 	ldrb	r3, [r3, #9]
  10299c:	e3833001 	orr	r3, r3, #1
  1029a0:	e6ef2073 	uxtb	r2, r3
  1029a4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1029a8:	e5c32009 	strb	r2, [r3, #9]

    /* release mutex */
    rt_mutex_release(mutex);
  1029ac:	e30d3408 	movw	r3, #54280	; 0xd408
  1029b0:	e3403014 	movt	r3, #20
  1029b4:	e5933000 	ldr	r3, [r3]
  1029b8:	e1a00003 	mov	r0, r3
  1029bc:	ebfff96d 	bl	100f78 <rt_mutex_release>

    /* update hardware timer */
    rt_hw_timer_update();
  1029c0:	eb0000cc 	bl	102cf8 <rt_hw_timer_update>

    return RT_EOK;
  1029c4:	e3a03000 	mov	r3, #0
}
  1029c8:	e1a00003 	mov	r0, r3
  1029cc:	e24bd004 	sub	sp, fp, #4
  1029d0:	e8bd8800 	pop	{fp, pc}

001029d4 <rt_timer_stop>:
 * @param timer the timer to be stopped
 *
 * @return the operation status, RT_EOK on OK, -RT_ERROR on error
 */
rt_err_t rt_timer_stop(rt_timer_t timer)
{
  1029d4:	e92d4800 	push	{fp, lr}
  1029d8:	e28db004 	add	fp, sp, #4
  1029dc:	e24dd008 	sub	sp, sp, #8
  1029e0:	e50b0008 	str	r0, [fp, #-8]
    if (!(timer->parent.flag & RT_TIMER_FLAG_ACTIVATED))
  1029e4:	e51b3008 	ldr	r3, [fp, #-8]
  1029e8:	e5d33009 	ldrb	r3, [r3, #9]
  1029ec:	e2033001 	and	r3, r3, #1
  1029f0:	e3530000 	cmp	r3, #0
  1029f4:	1a000001 	bne	102a00 <rt_timer_stop+0x2c>
        return -RT_ERROR;
  1029f8:	e3e03000 	mvn	r3, #0
  1029fc:	ea000017 	b	102a60 <rt_timer_stop+0x8c>

    /* make sure take mutex */
    while(rt_mutex_take(mutex, RT_WAITING_FOREVER) != RT_EOK);
  102a00:	e320f000 	nop	{0}
  102a04:	e30d3408 	movw	r3, #54280	; 0xd408
  102a08:	e3403014 	movt	r3, #20
  102a0c:	e5933000 	ldr	r3, [r3]
  102a10:	e3e01000 	mvn	r1, #0
  102a14:	e1a00003 	mov	r0, r3
  102a18:	ebfff938 	bl	100f00 <rt_mutex_take>
  102a1c:	e1a03000 	mov	r3, r0
  102a20:	e3530000 	cmp	r3, #0
  102a24:	1afffff6 	bne	102a04 <rt_timer_stop+0x30>

    _rt_timer_remove(timer);
  102a28:	e51b0008 	ldr	r0, [fp, #-8]
  102a2c:	ebfffeaf 	bl	1024f0 <_rt_timer_remove>

    /* release mutex */
    rt_mutex_release(mutex);
  102a30:	e30d3408 	movw	r3, #54280	; 0xd408
  102a34:	e3403014 	movt	r3, #20
  102a38:	e5933000 	ldr	r3, [r3]
  102a3c:	e1a00003 	mov	r0, r3
  102a40:	ebfff94c 	bl	100f78 <rt_mutex_release>

    /* change stat */
    timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
  102a44:	e51b3008 	ldr	r3, [fp, #-8]
  102a48:	e5d33009 	ldrb	r3, [r3, #9]
  102a4c:	e3c33001 	bic	r3, r3, #1
  102a50:	e6ef2073 	uxtb	r2, r3
  102a54:	e51b3008 	ldr	r3, [fp, #-8]
  102a58:	e5c32009 	strb	r2, [r3, #9]

    return RT_EOK;
  102a5c:	e3a03000 	mov	r3, #0
}
  102a60:	e1a00003 	mov	r0, r3
  102a64:	e24bd004 	sub	sp, fp, #4
  102a68:	e8bd8800 	pop	{fp, pc}

00102a6c <rt_timer_control>:
 * @param arg the argument
 *
 * @return RT_EOK
 */
rt_err_t rt_timer_control(rt_timer_t timer, int cmd, void *arg)
{
  102a6c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  102a70:	e28db000 	add	fp, sp, #0
  102a74:	e24dd014 	sub	sp, sp, #20
  102a78:	e50b0008 	str	r0, [fp, #-8]
  102a7c:	e50b100c 	str	r1, [fp, #-12]
  102a80:	e50b2010 	str	r2, [fp, #-16]
    switch (cmd)
  102a84:	e51b300c 	ldr	r3, [fp, #-12]
  102a88:	e3530008 	cmp	r3, #8
  102a8c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  102a90:	ea000032 	b	102b60 <rt_timer_control+0xf4>
  102a94:	00102acc 	.word	0x00102acc
  102a98:	00102ab8 	.word	0x00102ab8
  102a9c:	00102ae0 	.word	0x00102ae0
  102aa0:	00102afc 	.word	0x00102afc
  102aa4:	00102b60 	.word	0x00102b60
  102aa8:	00102b18 	.word	0x00102b18
  102aac:	00102b2c 	.word	0x00102b2c
  102ab0:	00102b3c 	.word	0x00102b3c
  102ab4:	00102b50 	.word	0x00102b50
    {
    case RT_TIMER_CTRL_GET_TIME:
        *(rt_tick_t *)arg = timer->init_tick;
  102ab8:	e51b3008 	ldr	r3, [fp, #-8]
  102abc:	e5932024 	ldr	r2, [r3, #36]	; 0x24
  102ac0:	e51b3010 	ldr	r3, [fp, #-16]
  102ac4:	e5832000 	str	r2, [r3]
        break;
  102ac8:	ea000024 	b	102b60 <rt_timer_control+0xf4>

    case RT_TIMER_CTRL_SET_TIME:
        timer->init_tick = *(rt_tick_t *)arg;
  102acc:	e51b3010 	ldr	r3, [fp, #-16]
  102ad0:	e5932000 	ldr	r2, [r3]
  102ad4:	e51b3008 	ldr	r3, [fp, #-8]
  102ad8:	e5832024 	str	r2, [r3, #36]	; 0x24
        break;
  102adc:	ea00001f 	b	102b60 <rt_timer_control+0xf4>

    case RT_TIMER_CTRL_SET_ONESHOT:
        timer->parent.flag &= ~RT_TIMER_FLAG_PERIODIC;
  102ae0:	e51b3008 	ldr	r3, [fp, #-8]
  102ae4:	e5d33009 	ldrb	r3, [r3, #9]
  102ae8:	e3c33002 	bic	r3, r3, #2
  102aec:	e6ef2073 	uxtb	r2, r3
  102af0:	e51b3008 	ldr	r3, [fp, #-8]
  102af4:	e5c32009 	strb	r2, [r3, #9]
        break;
  102af8:	ea000018 	b	102b60 <rt_timer_control+0xf4>

    case RT_TIMER_CTRL_SET_PERIODIC:
        timer->parent.flag |= RT_TIMER_FLAG_PERIODIC;
  102afc:	e51b3008 	ldr	r3, [fp, #-8]
  102b00:	e5d33009 	ldrb	r3, [r3, #9]
  102b04:	e3833002 	orr	r3, r3, #2
  102b08:	e6ef2073 	uxtb	r2, r3
  102b0c:	e51b3008 	ldr	r3, [fp, #-8]
  102b10:	e5c32009 	strb	r2, [r3, #9]
        break;
  102b14:	ea000011 	b	102b60 <rt_timer_control+0xf4>

    case RT_TIMER_CTRL_GET_FUNC:
        *(void **)arg = timer->timeout_func;
  102b18:	e51b3008 	ldr	r3, [fp, #-8]
  102b1c:	e593201c 	ldr	r2, [r3, #28]
  102b20:	e51b3010 	ldr	r3, [fp, #-16]
  102b24:	e5832000 	str	r2, [r3]
        break;
  102b28:	ea00000c 	b	102b60 <rt_timer_control+0xf4>

    case RT_TIMER_CTRL_SET_FUNC:
        timer->timeout_func = (void (*)(void*))arg;
  102b2c:	e51b2010 	ldr	r2, [fp, #-16]
  102b30:	e51b3008 	ldr	r3, [fp, #-8]
  102b34:	e583201c 	str	r2, [r3, #28]
        break;
  102b38:	ea000008 	b	102b60 <rt_timer_control+0xf4>

    case RT_TIMER_CTRL_GET_PARM:
        *(void **)arg = timer->parameter;
  102b3c:	e51b3008 	ldr	r3, [fp, #-8]
  102b40:	e5932020 	ldr	r2, [r3, #32]
  102b44:	e51b3010 	ldr	r3, [fp, #-16]
  102b48:	e5832000 	str	r2, [r3]
        break;
  102b4c:	ea000003 	b	102b60 <rt_timer_control+0xf4>

    case RT_TIMER_CTRL_SET_PARM:
        timer->parameter = arg;
  102b50:	e51b3008 	ldr	r3, [fp, #-8]
  102b54:	e51b2010 	ldr	r2, [fp, #-16]
  102b58:	e5832020 	str	r2, [r3, #32]
        break;
  102b5c:	e320f000 	nop	{0}
    }

    return RT_EOK;
  102b60:	e3a03000 	mov	r3, #0
}
  102b64:	e1a00003 	mov	r0, r3
  102b68:	e28bd000 	add	sp, fp, #0
  102b6c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  102b70:	e12fff1e 	bx	lr

00102b74 <rt_soft_timer_check>:
/**
 * This function will check timer list, if a timeout event happens, the
 * corresponding timeout function will be invoked.
 */
void rt_soft_timer_check(void)
{
  102b74:	e92d4800 	push	{fp, lr}
  102b78:	e28db004 	add	fp, sp, #4
  102b7c:	e24dd010 	sub	sp, sp, #16
    rt_list_t *n;
    struct rt_timer *t;

    RT_DEBUG_LOG(RT_DEBUG_TIMER, ("software timer check enter\n"));

    current_tick = rt_tick_get();
  102b80:	ebfffcb6 	bl	101e60 <rt_tick_get>
  102b84:	e50b0008 	str	r0, [fp, #-8]

    /* make sure take mutex */
    while(rt_mutex_take(mutex, RT_WAITING_FOREVER) != RT_EOK);
  102b88:	e320f000 	nop	{0}
  102b8c:	e30d3408 	movw	r3, #54280	; 0xd408
  102b90:	e3403014 	movt	r3, #20
  102b94:	e5933000 	ldr	r3, [r3]
  102b98:	e3e01000 	mvn	r1, #0
  102b9c:	e1a00003 	mov	r0, r3
  102ba0:	ebfff8d6 	bl	100f00 <rt_mutex_take>
  102ba4:	e1a03000 	mov	r3, r0
  102ba8:	e3530000 	cmp	r3, #0
  102bac:	1afffff6 	bne	102b8c <rt_soft_timer_check+0x18>

    for (n = rt_soft_timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1].next;
  102bb0:	e30d3410 	movw	r3, #54288	; 0xd410
  102bb4:	e3403014 	movt	r3, #20
  102bb8:	e5933000 	ldr	r3, [r3]
  102bbc:	e50b300c 	str	r3, [fp, #-12]
  102bc0:	ea00003d 	b	102cbc <rt_soft_timer_check+0x148>
         n != &(rt_soft_timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1]);)
    {
        t = rt_list_entry(n, struct rt_timer, row[RT_TIMER_SKIP_LIST_LEVEL - 1]);
  102bc4:	e51b300c 	ldr	r3, [fp, #-12]
  102bc8:	e2433014 	sub	r3, r3, #20
  102bcc:	e50b3010 	str	r3, [fp, #-16]

        /*
         * It supposes that the new tick shall less than the half duration of
         * tick max.
         */
        if ((current_tick - t->timeout_tick) < RT_TICK_MAX / 2)
  102bd0:	e51b3010 	ldr	r3, [fp, #-16]
  102bd4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  102bd8:	e51b2008 	ldr	r2, [fp, #-8]
  102bdc:	e0423003 	sub	r3, r2, r3
  102be0:	e373010a 	cmn	r3, #-2147483646	; 0x80000002
  102be4:	8a00003a 	bhi	102cd4 <rt_soft_timer_check+0x160>
        {
            /* move node to the next */
            n = n->next;
  102be8:	e51b300c 	ldr	r3, [fp, #-12]
  102bec:	e5933000 	ldr	r3, [r3]
  102bf0:	e50b300c 	str	r3, [fp, #-12]

            /* remove timer from timer list firstly */
            _rt_timer_remove(t);
  102bf4:	e51b0010 	ldr	r0, [fp, #-16]
  102bf8:	ebfffe3c 	bl	1024f0 <_rt_timer_remove>

            /* release mutex */
            rt_mutex_release(mutex);
  102bfc:	e30d3408 	movw	r3, #54280	; 0xd408
  102c00:	e3403014 	movt	r3, #20
  102c04:	e5933000 	ldr	r3, [r3]
  102c08:	e1a00003 	mov	r0, r3
  102c0c:	ebfff8d9 	bl	100f78 <rt_mutex_release>
            /* call timeout function */
            t->timeout_func(t->parameter);
  102c10:	e51b3010 	ldr	r3, [fp, #-16]
  102c14:	e593301c 	ldr	r3, [r3, #28]
  102c18:	e51b2010 	ldr	r2, [fp, #-16]
  102c1c:	e5922020 	ldr	r2, [r2, #32]
  102c20:	e1a00002 	mov	r0, r2
  102c24:	e12fff33 	blx	r3

            /* re-get tick */
            current_tick = rt_tick_get();
  102c28:	ebfffc8c 	bl	101e60 <rt_tick_get>
  102c2c:	e50b0008 	str	r0, [fp, #-8]

            RT_DEBUG_LOG(RT_DEBUG_TIMER, ("current tick: %d\n", current_tick));

            /* make sure take mutex */
            while(rt_mutex_take(mutex, RT_WAITING_FOREVER) != RT_EOK);
  102c30:	e320f000 	nop	{0}
  102c34:	e30d3408 	movw	r3, #54280	; 0xd408
  102c38:	e3403014 	movt	r3, #20
  102c3c:	e5933000 	ldr	r3, [r3]
  102c40:	e3e01000 	mvn	r1, #0
  102c44:	e1a00003 	mov	r0, r3
  102c48:	ebfff8ac 	bl	100f00 <rt_mutex_take>
  102c4c:	e1a03000 	mov	r3, r0
  102c50:	e3530000 	cmp	r3, #0
  102c54:	1afffff6 	bne	102c34 <rt_soft_timer_check+0xc0>


            if ((t->parent.flag & RT_TIMER_FLAG_PERIODIC) &&
  102c58:	e51b3010 	ldr	r3, [fp, #-16]
  102c5c:	e5d33009 	ldrb	r3, [r3, #9]
  102c60:	e2033002 	and	r3, r3, #2
  102c64:	e3530000 	cmp	r3, #0
  102c68:	0a00000d 	beq	102ca4 <rt_soft_timer_check+0x130>
                    (t->parent.flag & RT_TIMER_FLAG_ACTIVATED))
  102c6c:	e51b3010 	ldr	r3, [fp, #-16]
  102c70:	e5d33009 	ldrb	r3, [r3, #9]
  102c74:	e2033001 	and	r3, r3, #1
            if ((t->parent.flag & RT_TIMER_FLAG_PERIODIC) &&
  102c78:	e3530000 	cmp	r3, #0
  102c7c:	0a000008 	beq	102ca4 <rt_soft_timer_check+0x130>
            {
                /* start it */
                t->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
  102c80:	e51b3010 	ldr	r3, [fp, #-16]
  102c84:	e5d33009 	ldrb	r3, [r3, #9]
  102c88:	e3c33001 	bic	r3, r3, #1
  102c8c:	e6ef2073 	uxtb	r2, r3
  102c90:	e51b3010 	ldr	r3, [fp, #-16]
  102c94:	e5c32009 	strb	r2, [r3, #9]
                rt_timer_start(t);
  102c98:	e51b0010 	ldr	r0, [fp, #-16]
  102c9c:	ebfffe8b 	bl	1026d0 <rt_timer_start>
  102ca0:	ea000005 	b	102cbc <rt_soft_timer_check+0x148>
            }
            else
            {
                /* stop timer */
                t->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
  102ca4:	e51b3010 	ldr	r3, [fp, #-16]
  102ca8:	e5d33009 	ldrb	r3, [r3, #9]
  102cac:	e3c33001 	bic	r3, r3, #1
  102cb0:	e6ef2073 	uxtb	r2, r3
  102cb4:	e51b3010 	ldr	r3, [fp, #-16]
  102cb8:	e5c32009 	strb	r2, [r3, #9]
    for (n = rt_soft_timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1].next;
  102cbc:	e51b200c 	ldr	r2, [fp, #-12]
  102cc0:	e30d3410 	movw	r3, #54288	; 0xd410
  102cc4:	e3403014 	movt	r3, #20
  102cc8:	e1520003 	cmp	r2, r3
  102ccc:	1affffbc 	bne	102bc4 <rt_soft_timer_check+0x50>
  102cd0:	ea000000 	b	102cd8 <rt_soft_timer_check+0x164>
            }
        }
        else break; /* not check anymore */
  102cd4:	e320f000 	nop	{0}
    }

    /* release mutex */
    rt_mutex_release(mutex);
  102cd8:	e30d3408 	movw	r3, #54280	; 0xd408
  102cdc:	e3403014 	movt	r3, #20
  102ce0:	e5933000 	ldr	r3, [r3]
  102ce4:	e1a00003 	mov	r0, r3
  102ce8:	ebfff8a2 	bl	100f78 <rt_mutex_release>

    RT_DEBUG_LOG(RT_DEBUG_TIMER, ("software timer check leave\n"));
}
  102cec:	e320f000 	nop	{0}
  102cf0:	e24bd004 	sub	sp, fp, #4
  102cf4:	e8bd8800 	pop	{fp, pc}

00102cf8 <rt_hw_timer_update>:

/* update hardware timer */
static void rt_hw_timer_update(void)
{
  102cf8:	e92d4800 	push	{fp, lr}
  102cfc:	e28db004 	add	fp, sp, #4
  102d00:	e24dd008 	sub	sp, sp, #8
    rt_tick_t next_timeout;
    rt_tick_t current_tick;

    /* get the next timeout tick */
    next_timeout = rt_timer_list_next_timeout(rt_soft_timer_list);
  102d04:	e30d0410 	movw	r0, #54288	; 0xd410
  102d08:	e3400014 	movt	r0, #20
  102d0c:	ebfffde3 	bl	1024a0 <rt_timer_list_next_timeout>
  102d10:	e1a03000 	mov	r3, r0
  102d14:	e50b300c 	str	r3, [fp, #-12]
    if (next_timeout == RT_TICK_MAX)
  102d18:	e51b300c 	ldr	r3, [fp, #-12]
  102d1c:	e3730001 	cmn	r3, #1
  102d20:	0a00001f 	beq	102da4 <rt_hw_timer_update+0xac>
        /* no software timer exist, return. */
        return;
    }

    /* get current tick */
    current_tick = rt_tick_get();
  102d24:	ebfffc4d 	bl	101e60 <rt_tick_get>
  102d28:	e50b0008 	str	r0, [fp, #-8]

    if ((next_timeout - current_tick) < RT_TICK_MAX / 2)
  102d2c:	e51b200c 	ldr	r2, [fp, #-12]
  102d30:	e51b3008 	ldr	r3, [fp, #-8]
  102d34:	e0423003 	sub	r3, r2, r3
  102d38:	e373010a 	cmn	r3, #-2147483646	; 0x80000002
  102d3c:	8a00001a 	bhi	102dac <rt_hw_timer_update+0xb4>
    {
        syscall(_NRSYS_timer_stop, hw_timer);
  102d40:	e30d3404 	movw	r3, #54276	; 0xd404
  102d44:	e3403014 	movt	r3, #20
  102d48:	e5933000 	ldr	r3, [r3]
  102d4c:	e1a01003 	mov	r1, r3
  102d50:	e3a00072 	mov	r0, #114	; 0x72
  102d54:	eb00e35f 	bl	13bad8 <syscall>
        /* get the delta timeout tick */
        next_timeout = next_timeout - current_tick;
  102d58:	e51b200c 	ldr	r2, [fp, #-12]
  102d5c:	e51b3008 	ldr	r3, [fp, #-8]
  102d60:	e0423003 	sub	r3, r2, r3
  102d64:	e50b300c 	str	r3, [fp, #-12]
        syscall(_NRSYS_timer_control,
  102d68:	e30d3404 	movw	r3, #54276	; 0xd404
  102d6c:	e3403014 	movt	r3, #20
  102d70:	e5931000 	ldr	r1, [r3]
  102d74:	e24b300c 	sub	r3, fp, #12
  102d78:	e3a02000 	mov	r2, #0
  102d7c:	e3a00073 	mov	r0, #115	; 0x73
  102d80:	eb00e354 	bl	13bad8 <syscall>
                hw_timer,
                RT_TIMER_CTRL_SET_TIME,
                &next_timeout);
        syscall(_NRSYS_timer_start, hw_timer);
  102d84:	e30d3404 	movw	r3, #54276	; 0xd404
  102d88:	e3403014 	movt	r3, #20
  102d8c:	e5933000 	ldr	r3, [r3]
  102d90:	e1a01003 	mov	r1, r3
  102d94:	e3a00071 	mov	r0, #113	; 0x71
  102d98:	eb00e34e 	bl	13bad8 <syscall>
    }
    return;
  102d9c:	e320f000 	nop	{0}
  102da0:	ea000001 	b	102dac <rt_hw_timer_update+0xb4>
        return;
  102da4:	e320f000 	nop	{0}
  102da8:	ea000000 	b	102db0 <rt_hw_timer_update+0xb8>
    return;
  102dac:	e320f000 	nop	{0}
}
  102db0:	e24bd004 	sub	sp, fp, #4
  102db4:	e8bd8800 	pop	{fp, pc}

00102db8 <rt_thread_timer_handler>:

/* timer signal handler */
static void rt_thread_timer_handler(void)
{
  102db8:	e92d4800 	push	{fp, lr}
  102dbc:	e28db004 	add	fp, sp, #4
    /* update hardware timer */
    rt_hw_timer_update();
  102dc0:	ebffffcc 	bl	102cf8 <rt_hw_timer_update>
    /* check software timer */
    rt_soft_timer_check();
  102dc4:	ebffff6a 	bl	102b74 <rt_soft_timer_check>
}
  102dc8:	e320f000 	nop	{0}
  102dcc:	e8bd8800 	pop	{fp, pc}

00102dd0 <timer_thread_entry>:

static void timer_thread_entry(void* parameter)
{
  102dd0:	e92d4800 	push	{fp, lr}
  102dd4:	e28db004 	add	fp, sp, #4
  102dd8:	e24dd010 	sub	sp, sp, #16
  102ddc:	e50b0010 	str	r0, [fp, #-16]
    while (1)
    {
        rt_err_t ret;
        ret = rt_sem_take(sem, RT_WAITING_FOREVER);
  102de0:	e30d340c 	movw	r3, #54284	; 0xd40c
  102de4:	e3403014 	movt	r3, #20
  102de8:	e5933000 	ldr	r3, [r3]
  102dec:	e3e01000 	mvn	r1, #0
  102df0:	e1a00003 	mov	r0, r3
  102df4:	ebfff92e 	bl	1012b4 <rt_sem_take>
  102df8:	e50b0008 	str	r0, [fp, #-8]
        if (ret != RT_EOK)
  102dfc:	e51b3008 	ldr	r3, [fp, #-8]
  102e00:	e3530000 	cmp	r3, #0
  102e04:	1a000001 	bne	102e10 <timer_thread_entry+0x40>
        {
            break;
        }
        rt_thread_timer_handler();
  102e08:	ebffffea 	bl	102db8 <rt_thread_timer_handler>
    {
  102e0c:	eafffff3 	b	102de0 <timer_thread_entry+0x10>
            break;
  102e10:	e320f000 	nop	{0}
    }
}
  102e14:	e320f000 	nop	{0}
  102e18:	e24bd004 	sub	sp, fp, #4
  102e1c:	e8bd8800 	pop	{fp, pc}

00102e20 <rt_system_timer_init>:

void rt_system_timer_init(rt_uint32_t timer_stack_size)
{
  102e20:	e92d4800 	push	{fp, lr}
  102e24:	e28db004 	add	fp, sp, #4
  102e28:	e24dd018 	sub	sp, sp, #24
  102e2c:	e50b0010 	str	r0, [fp, #-16]
    int i;
    rt_thread_t tid;

    if (!sem)
  102e30:	e30d340c 	movw	r3, #54284	; 0xd40c
  102e34:	e3403014 	movt	r3, #20
  102e38:	e5933000 	ldr	r3, [r3]
  102e3c:	e3530000 	cmp	r3, #0
  102e40:	1a000008 	bne	102e68 <rt_system_timer_init+0x48>
    {
        sem = rt_sem_create("u_timer", 0, RT_IPC_FLAG_FIFO);
  102e44:	e3a02000 	mov	r2, #0
  102e48:	e3a01000 	mov	r1, #0
  102e4c:	e3040b08 	movw	r0, #19208	; 0x4b08
  102e50:	e3400014 	movt	r0, #20
  102e54:	ebfff863 	bl	100fe8 <rt_sem_create>
  102e58:	e1a02000 	mov	r2, r0
  102e5c:	e30d340c 	movw	r3, #54284	; 0xd40c
  102e60:	e3403014 	movt	r3, #20
  102e64:	e5832000 	str	r2, [r3]
    }

    if (!mutex)
  102e68:	e30d3408 	movw	r3, #54280	; 0xd408
  102e6c:	e3403014 	movt	r3, #20
  102e70:	e5933000 	ldr	r3, [r3]
  102e74:	e3530000 	cmp	r3, #0
  102e78:	1a000007 	bne	102e9c <rt_system_timer_init+0x7c>
    {
        mutex = rt_mutex_create("utm_mutex", RT_IPC_FLAG_FIFO);
  102e7c:	e3a01000 	mov	r1, #0
  102e80:	e3040b10 	movw	r0, #19216	; 0x4b10
  102e84:	e3400014 	movt	r0, #20
  102e88:	ebfff786 	bl	100ca8 <rt_mutex_create>
  102e8c:	e1a02000 	mov	r2, r0
  102e90:	e30d3408 	movw	r3, #54280	; 0xd408
  102e94:	e3403014 	movt	r3, #20
  102e98:	e5832000 	str	r2, [r3]
    }

    for (i = 0;
  102e9c:	e3a03000 	mov	r3, #0
  102ea0:	e50b3008 	str	r3, [fp, #-8]
  102ea4:	ea000009 	b	102ed0 <rt_system_timer_init+0xb0>
         i < sizeof(rt_soft_timer_list) / sizeof(rt_soft_timer_list[0]);
         i++)
    {
        rt_list_init(rt_soft_timer_list + i);
  102ea8:	e51b3008 	ldr	r3, [fp, #-8]
  102eac:	e1a02183 	lsl	r2, r3, #3
  102eb0:	e30d3410 	movw	r3, #54288	; 0xd410
  102eb4:	e3403014 	movt	r3, #20
  102eb8:	e0823003 	add	r3, r2, r3
  102ebc:	e1a00003 	mov	r0, r3
  102ec0:	ebfffcf8 	bl	1022a8 <rt_list_init>
         i++)
  102ec4:	e51b3008 	ldr	r3, [fp, #-8]
  102ec8:	e2833001 	add	r3, r3, #1
  102ecc:	e50b3008 	str	r3, [fp, #-8]
    for (i = 0;
  102ed0:	e51b3008 	ldr	r3, [fp, #-8]
  102ed4:	e3530000 	cmp	r3, #0
  102ed8:	0afffff2 	beq	102ea8 <rt_system_timer_init+0x88>
    }

    /* initial hardware timer */
    if (!hw_timer)
  102edc:	e30d3404 	movw	r3, #54276	; 0xd404
  102ee0:	e3403014 	movt	r3, #20
  102ee4:	e5933000 	ldr	r3, [r3]
  102ee8:	e3530000 	cmp	r3, #0
  102eec:	1a00000f 	bne	102f30 <rt_system_timer_init+0x110>
    {
        hw_timer = (rt_timer_t)syscall(_NRSYS_timer_create,
                "u_timer",
                sem->data, //SIG_HW_TIMER,
  102ef0:	e30d340c 	movw	r3, #54284	; 0xd40c
  102ef4:	e3403014 	movt	r3, #20
  102ef8:	e5933000 	ldr	r3, [r3]
        hw_timer = (rt_timer_t)syscall(_NRSYS_timer_create,
  102efc:	e5932004 	ldr	r2, [r3, #4]
  102f00:	e3a03000 	mov	r3, #0
  102f04:	e58d3000 	str	r3, [sp]
  102f08:	e3a03000 	mov	r3, #0
  102f0c:	e3041b08 	movw	r1, #19208	; 0x4b08
  102f10:	e3401014 	movt	r1, #20
  102f14:	e3a0006f 	mov	r0, #111	; 0x6f
  102f18:	eb00e2ee 	bl	13bad8 <syscall>
  102f1c:	e1a03000 	mov	r3, r0
  102f20:	e1a02003 	mov	r2, r3
  102f24:	e30d3404 	movw	r3, #54276	; 0xd404
  102f28:	e3403014 	movt	r3, #20
  102f2c:	e5832000 	str	r2, [r3]
                0,
                RT_TIMER_FLAG_ONE_SHOT|RT_TIMER_FLAG_HARD_TIMER);
    }

    if (timer_stack_size < 4096)
  102f30:	e51b3010 	ldr	r3, [fp, #-16]
  102f34:	e3530a01 	cmp	r3, #4096	; 0x1000
  102f38:	2a000001 	bcs	102f44 <rt_system_timer_init+0x124>
    {
        timer_stack_size = 4096;
  102f3c:	e3a03a01 	mov	r3, #4096	; 0x1000
  102f40:	e50b3010 	str	r3, [fp, #-16]
    }

    tid = rt_thread_create("u_timer", timer_thread_entry, RT_NULL,
  102f44:	e3a0300a 	mov	r3, #10
  102f48:	e58d3004 	str	r3, [sp, #4]
  102f4c:	e3a03002 	mov	r3, #2
  102f50:	e58d3000 	str	r3, [sp]
  102f54:	e51b3010 	ldr	r3, [fp, #-16]
  102f58:	e3a02000 	mov	r2, #0
  102f5c:	e3021dd0 	movw	r1, #11728	; 0x2dd0
  102f60:	e3401010 	movt	r1, #16
  102f64:	e3040b08 	movw	r0, #19208	; 0x4b08
  102f68:	e3400014 	movt	r0, #20
  102f6c:	ebfffc60 	bl	1020f4 <rt_thread_create>
  102f70:	e50b000c 	str	r0, [fp, #-12]
            timer_stack_size, 2, 10);
    if (tid)
  102f74:	e51b300c 	ldr	r3, [fp, #-12]
  102f78:	e3530000 	cmp	r3, #0
  102f7c:	0a000001 	beq	102f88 <rt_system_timer_init+0x168>
    {
        rt_thread_startup(tid);
  102f80:	e51b000c 	ldr	r0, [fp, #-12]
  102f84:	ebfffc8f 	bl	1021c8 <rt_thread_startup>
    }
}
  102f88:	e320f000 	nop	{0}
  102f8c:	e24bd004 	sub	sp, fp, #4
  102f90:	e8bd8800 	pop	{fp, pc}

00102f94 <rt_malloc>:
#include <stdarg.h>

#include <rtthread.h>

void *rt_malloc(rt_size_t nbytes)
{
  102f94:	e92d4800 	push	{fp, lr}
  102f98:	e28db004 	add	fp, sp, #4
  102f9c:	e24dd008 	sub	sp, sp, #8
  102fa0:	e50b0008 	str	r0, [fp, #-8]
    return malloc(nbytes);
  102fa4:	e51b0008 	ldr	r0, [fp, #-8]
  102fa8:	eb00e687 	bl	13c9cc <malloc>
  102fac:	e1a03000 	mov	r3, r0
}
  102fb0:	e1a00003 	mov	r0, r3
  102fb4:	e24bd004 	sub	sp, fp, #4
  102fb8:	e8bd8800 	pop	{fp, pc}

00102fbc <rt_free>:

void rt_free(void *ptr)
{
  102fbc:	e92d4800 	push	{fp, lr}
  102fc0:	e28db004 	add	fp, sp, #4
  102fc4:	e24dd008 	sub	sp, sp, #8
  102fc8:	e50b0008 	str	r0, [fp, #-8]
    return free(ptr);
  102fcc:	e51b0008 	ldr	r0, [fp, #-8]
  102fd0:	eb00e839 	bl	13d0bc <free>
}
  102fd4:	e24bd004 	sub	sp, fp, #4
  102fd8:	e8bd8800 	pop	{fp, pc}

00102fdc <rt_realloc>:

void *rt_realloc(void *ptr, rt_size_t nbytes)
{
  102fdc:	e92d4800 	push	{fp, lr}
  102fe0:	e28db004 	add	fp, sp, #4
  102fe4:	e24dd008 	sub	sp, sp, #8
  102fe8:	e50b0008 	str	r0, [fp, #-8]
  102fec:	e50b100c 	str	r1, [fp, #-12]
    return realloc(ptr, nbytes);
  102ff0:	e51b100c 	ldr	r1, [fp, #-12]
  102ff4:	e51b0008 	ldr	r0, [fp, #-8]
  102ff8:	eb00e83e 	bl	13d0f8 <realloc>
  102ffc:	e1a03000 	mov	r3, r0
}
  103000:	e1a00003 	mov	r0, r3
  103004:	e24bd004 	sub	sp, fp, #4
  103008:	e8bd8800 	pop	{fp, pc}

0010300c <rt_calloc>:

void *rt_calloc(rt_size_t count, rt_size_t size)
{
  10300c:	e92d4800 	push	{fp, lr}
  103010:	e28db004 	add	fp, sp, #4
  103014:	e24dd008 	sub	sp, sp, #8
  103018:	e50b0008 	str	r0, [fp, #-8]
  10301c:	e50b100c 	str	r1, [fp, #-12]
    return calloc(count, size);
  103020:	e51b100c 	ldr	r1, [fp, #-12]
  103024:	e51b0008 	ldr	r0, [fp, #-8]
  103028:	eb00e7ec 	bl	13cfe0 <calloc>
  10302c:	e1a03000 	mov	r3, r0
}
  103030:	e1a00003 	mov	r0, r3
  103034:	e24bd004 	sub	sp, fp, #4
  103038:	e8bd8800 	pop	{fp, pc}

0010303c <rt_snprintf>:

rt_int32_t rt_snprintf(char *buf, rt_size_t size, const char *format, ...)
{
  10303c:	e92d000c 	push	{r2, r3}
  103040:	e92d4800 	push	{fp, lr}
  103044:	e28db004 	add	fp, sp, #4
  103048:	e24dd010 	sub	sp, sp, #16
  10304c:	e50b0010 	str	r0, [fp, #-16]
  103050:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int ret;
    va_list ap;
    va_start(ap, format);
  103054:	e28b3008 	add	r3, fp, #8
  103058:	e50b300c 	str	r3, [fp, #-12]
    ret = vsnprintf(buf, size, format, ap);
  10305c:	e51b300c 	ldr	r3, [fp, #-12]
  103060:	e59b2004 	ldr	r2, [fp, #4]
  103064:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  103068:	e51b0010 	ldr	r0, [fp, #-16]
  10306c:	eb00f47f 	bl	140270 <vsnprintf>
  103070:	e50b0008 	str	r0, [fp, #-8]
    va_end(ap);
    return ret;
  103074:	e51b3008 	ldr	r3, [fp, #-8]
}
  103078:	e1a00003 	mov	r0, r3
  10307c:	e24bd004 	sub	sp, fp, #4
  103080:	e8bd4800 	pop	{fp, lr}
  103084:	e28dd008 	add	sp, sp, #8
  103088:	e12fff1e 	bx	lr

0010308c <rt_sprintf>:

rt_int32_t rt_sprintf(char *buf, const char *format, ...)
{
  10308c:	e92d000e 	push	{r1, r2, r3}
  103090:	e92d4800 	push	{fp, lr}
  103094:	e28db004 	add	fp, sp, #4
  103098:	e24dd014 	sub	sp, sp, #20
  10309c:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    int ret;
    va_list ap;
    va_start(ap, format);
  1030a0:	e28b3008 	add	r3, fp, #8
  1030a4:	e50b3010 	str	r3, [fp, #-16]
    ret = vsprintf(buf, format, ap);
  1030a8:	e51b2010 	ldr	r2, [fp, #-16]
  1030ac:	e59b1004 	ldr	r1, [fp, #4]
  1030b0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1030b4:	eb00f4a4 	bl	14034c <vsprintf>
  1030b8:	e50b000c 	str	r0, [fp, #-12]
    va_end(ap);
    return ret;
  1030bc:	e51b300c 	ldr	r3, [fp, #-12]
}
  1030c0:	e1a00003 	mov	r0, r3
  1030c4:	e24bd004 	sub	sp, fp, #4
  1030c8:	e8bd4800 	pop	{fp, lr}
  1030cc:	e28dd00c 	add	sp, sp, #12
  1030d0:	e12fff1e 	bx	lr

001030d4 <rt_vsnprintf>:

rt_int32_t rt_vsnprintf(char *buf,
    rt_size_t size,
    const char *fmt,
    va_list args)
{
  1030d4:	e92d4800 	push	{fp, lr}
  1030d8:	e28db004 	add	fp, sp, #4
  1030dc:	e24dd010 	sub	sp, sp, #16
  1030e0:	e50b0008 	str	r0, [fp, #-8]
  1030e4:	e50b100c 	str	r1, [fp, #-12]
  1030e8:	e50b2010 	str	r2, [fp, #-16]
  1030ec:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return (rt_int32_t)vsnprintf(buf, size, fmt, args);
  1030f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1030f4:	e51b2010 	ldr	r2, [fp, #-16]
  1030f8:	e51b100c 	ldr	r1, [fp, #-12]
  1030fc:	e51b0008 	ldr	r0, [fp, #-8]
  103100:	eb00f45a 	bl	140270 <vsnprintf>
  103104:	e1a03000 	mov	r3, r0
}
  103108:	e1a00003 	mov	r0, r3
  10310c:	e24bd004 	sub	sp, fp, #4
  103110:	e8bd8800 	pop	{fp, pc}

00103114 <rt_kprintf>:

void rt_kprintf(const char *fmt, ...)
{
  103114:	e92d000f 	push	{r0, r1, r2, r3}
  103118:	e92d4800 	push	{fp, lr}
  10311c:	e28db004 	add	fp, sp, #4
  103120:	e24dd060 	sub	sp, sp, #96	; 0x60
    int ret;
    va_list ap;
    char buf[81];

    va_start(ap, fmt);
  103124:	e28b3008 	add	r3, fp, #8
  103128:	e50b300c 	str	r3, [fp, #-12]
    ret = vsnprintf(buf, 81, fmt, ap);
  10312c:	e24b0060 	sub	r0, fp, #96	; 0x60
  103130:	e51b300c 	ldr	r3, [fp, #-12]
  103134:	e59b2004 	ldr	r2, [fp, #4]
  103138:	e3a01051 	mov	r1, #81	; 0x51
  10313c:	eb00f44b 	bl	140270 <vsnprintf>
  103140:	e50b0008 	str	r0, [fp, #-8]
    va_end(ap);
    if (ret > 0)
  103144:	e51b3008 	ldr	r3, [fp, #-8]
  103148:	e3530000 	cmp	r3, #0
  10314c:	da000004 	ble	103164 <rt_kprintf+0x50>
        printf("%s", buf);
  103150:	e24b3060 	sub	r3, fp, #96	; 0x60
  103154:	e1a01003 	mov	r1, r3
  103158:	e3040b1c 	movw	r0, #19228	; 0x4b1c
  10315c:	e3400014 	movt	r0, #20
  103160:	eb00eab2 	bl	13dc30 <printf>
}
  103164:	e320f000 	nop	{0}
  103168:	e24bd004 	sub	sp, fp, #4
  10316c:	e8bd4800 	pop	{fp, lr}
  103170:	e28dd010 	add	sp, sp, #16
  103174:	e12fff1e 	bx	lr

00103178 <rt_strdup>:

char *rt_strdup(const char* s)
{
  103178:	e92d4800 	push	{fp, lr}
  10317c:	e28db004 	add	fp, sp, #4
  103180:	e24dd008 	sub	sp, sp, #8
  103184:	e50b0008 	str	r0, [fp, #-8]
    return strdup(s);
  103188:	e51b0008 	ldr	r0, [fp, #-8]
  10318c:	eb00f65b 	bl	140b00 <strdup>
  103190:	e1a03000 	mov	r3, r0
}
  103194:	e1a00003 	mov	r0, r3
  103198:	e24bd004 	sub	sp, fp, #4
  10319c:	e8bd8800 	pop	{fp, pc}

001031a0 <rt_strstr>:

char *rt_strstr(const char *s1, const char *s2)
{
  1031a0:	e92d4800 	push	{fp, lr}
  1031a4:	e28db004 	add	fp, sp, #4
  1031a8:	e24dd008 	sub	sp, sp, #8
  1031ac:	e50b0008 	str	r0, [fp, #-8]
  1031b0:	e50b100c 	str	r1, [fp, #-12]
    return strstr(s1, s2);
  1031b4:	e51b100c 	ldr	r1, [fp, #-12]
  1031b8:	e51b0008 	ldr	r0, [fp, #-8]
  1031bc:	eb00f796 	bl	14101c <strstr>
  1031c0:	e1a03000 	mov	r3, r0
}
  1031c4:	e1a00003 	mov	r0, r3
  1031c8:	e24bd004 	sub	sp, fp, #4
  1031cc:	e8bd8800 	pop	{fp, pc}

001031d0 <rt_strcmp>:

rt_int32_t rt_strcmp(const char *cs, const char *ct)
{
  1031d0:	e92d4800 	push	{fp, lr}
  1031d4:	e28db004 	add	fp, sp, #4
  1031d8:	e24dd008 	sub	sp, sp, #8
  1031dc:	e50b0008 	str	r0, [fp, #-8]
  1031e0:	e50b100c 	str	r1, [fp, #-12]
    return (rt_int32_t)strcmp(cs, ct);
  1031e4:	e51b100c 	ldr	r1, [fp, #-12]
  1031e8:	e51b0008 	ldr	r0, [fp, #-8]
  1031ec:	eb00f62d 	bl	140aa8 <strcmp>
  1031f0:	e1a03000 	mov	r3, r0
}
  1031f4:	e1a00003 	mov	r0, r3
  1031f8:	e24bd004 	sub	sp, fp, #4
  1031fc:	e8bd8800 	pop	{fp, pc}

00103200 <rt_strlen>:

rt_size_t rt_strlen(const char *src)
{
  103200:	e92d4800 	push	{fp, lr}
  103204:	e28db004 	add	fp, sp, #4
  103208:	e24dd008 	sub	sp, sp, #8
  10320c:	e50b0008 	str	r0, [fp, #-8]
    return strlen(src);
  103210:	e51b0008 	ldr	r0, [fp, #-8]
  103214:	eb00f645 	bl	140b30 <strlen>
  103218:	e1a03000 	mov	r3, r0
}
  10321c:	e1a00003 	mov	r0, r3
  103220:	e24bd004 	sub	sp, fp, #4
  103224:	e8bd8800 	pop	{fp, pc}

00103228 <rt_strncmp>:

rt_int32_t rt_strncmp(const char *cs, const char *ct, rt_ubase_t count)
{
  103228:	e92d4800 	push	{fp, lr}
  10322c:	e28db004 	add	fp, sp, #4
  103230:	e24dd010 	sub	sp, sp, #16
  103234:	e50b0008 	str	r0, [fp, #-8]
  103238:	e50b100c 	str	r1, [fp, #-12]
  10323c:	e50b2010 	str	r2, [fp, #-16]
    return strncmp(cs, ct, count);
  103240:	e51b2010 	ldr	r2, [fp, #-16]
  103244:	e51b100c 	ldr	r1, [fp, #-12]
  103248:	e51b0008 	ldr	r0, [fp, #-8]
  10324c:	eb00f663 	bl	140be0 <strncmp>
  103250:	e1a03000 	mov	r3, r0
}
  103254:	e1a00003 	mov	r0, r3
  103258:	e24bd004 	sub	sp, fp, #4
  10325c:	e8bd8800 	pop	{fp, pc}

00103260 <rt_strncpy>:

char *rt_strncpy(char *dest, const char *src, rt_ubase_t n)
{
  103260:	e92d4800 	push	{fp, lr}
  103264:	e28db004 	add	fp, sp, #4
  103268:	e24dd010 	sub	sp, sp, #16
  10326c:	e50b0008 	str	r0, [fp, #-8]
  103270:	e50b100c 	str	r1, [fp, #-12]
  103274:	e50b2010 	str	r2, [fp, #-16]
    return strncpy(dest, src, n);
  103278:	e51b2010 	ldr	r2, [fp, #-16]
  10327c:	e51b100c 	ldr	r1, [fp, #-12]
  103280:	e51b0008 	ldr	r0, [fp, #-8]
  103284:	eb00f67a 	bl	140c74 <strncpy>
  103288:	e1a03000 	mov	r3, r0
}
  10328c:	e1a00003 	mov	r0, r3
  103290:	e24bd004 	sub	sp, fp, #4
  103294:	e8bd8800 	pop	{fp, pc}

00103298 <rt_strcasecmp>:

rt_uint32_t rt_strcasecmp(const char *a, const char *b)
{
  103298:	e92d4800 	push	{fp, lr}
  10329c:	e28db004 	add	fp, sp, #4
  1032a0:	e24dd008 	sub	sp, sp, #8
  1032a4:	e50b0008 	str	r0, [fp, #-8]
  1032a8:	e50b100c 	str	r1, [fp, #-12]
    return strcasecmp(a, b);
  1032ac:	e51b100c 	ldr	r1, [fp, #-12]
  1032b0:	e51b0008 	ldr	r0, [fp, #-8]
  1032b4:	eb00f5d3 	bl	140a08 <strcasecmp>
  1032b8:	e1a03000 	mov	r3, r0
}
  1032bc:	e1a00003 	mov	r0, r3
  1032c0:	e24bd004 	sub	sp, fp, #4
  1032c4:	e8bd8800 	pop	{fp, pc}

001032c8 <rt_memset>:

void *rt_memset(void *src, int c, rt_ubase_t n)
{
  1032c8:	e92d4800 	push	{fp, lr}
  1032cc:	e28db004 	add	fp, sp, #4
  1032d0:	e24dd010 	sub	sp, sp, #16
  1032d4:	e50b0008 	str	r0, [fp, #-8]
  1032d8:	e50b100c 	str	r1, [fp, #-12]
  1032dc:	e50b2010 	str	r2, [fp, #-16]
    return memset(src, c, n);
  1032e0:	e51b2010 	ldr	r2, [fp, #-16]
  1032e4:	e51b100c 	ldr	r1, [fp, #-12]
  1032e8:	e51b0008 	ldr	r0, [fp, #-8]
  1032ec:	eb00f57e 	bl	1408ec <memset>
  1032f0:	e1a03000 	mov	r3, r0
}
  1032f4:	e1a00003 	mov	r0, r3
  1032f8:	e24bd004 	sub	sp, fp, #4
  1032fc:	e8bd8800 	pop	{fp, pc}

00103300 <rt_memcpy>:

void *rt_memcpy(void *dest, const void *src, rt_ubase_t n)
{
  103300:	e92d4800 	push	{fp, lr}
  103304:	e28db004 	add	fp, sp, #4
  103308:	e24dd010 	sub	sp, sp, #16
  10330c:	e50b0008 	str	r0, [fp, #-8]
  103310:	e50b100c 	str	r1, [fp, #-12]
  103314:	e50b2010 	str	r2, [fp, #-16]
    return memcpy(dest, src, n);
  103318:	e51b2010 	ldr	r2, [fp, #-16]
  10331c:	e51b100c 	ldr	r1, [fp, #-12]
  103320:	e51b0008 	ldr	r0, [fp, #-8]
  103324:	eb00f438 	bl	14040c <memcpy>
  103328:	e1a03000 	mov	r3, r0
}
  10332c:	e1a00003 	mov	r0, r3
  103330:	e24bd004 	sub	sp, fp, #4
  103334:	e8bd8800 	pop	{fp, pc}

00103338 <rt_memcmp>:

rt_int32_t rt_memcmp(const void *cs, const void *ct, rt_ubase_t count)
{
  103338:	e92d4800 	push	{fp, lr}
  10333c:	e28db004 	add	fp, sp, #4
  103340:	e24dd010 	sub	sp, sp, #16
  103344:	e50b0008 	str	r0, [fp, #-8]
  103348:	e50b100c 	str	r1, [fp, #-12]
  10334c:	e50b2010 	str	r2, [fp, #-16]
    return memcmp(cs, ct, count);
  103350:	e51b2010 	ldr	r2, [fp, #-16]
  103354:	e51b100c 	ldr	r1, [fp, #-12]
  103358:	e51b0008 	ldr	r0, [fp, #-8]
  10335c:	eb00f4e9 	bl	140708 <memcmp>
  103360:	e1a03000 	mov	r3, r0
}
  103364:	e1a00003 	mov	r0, r3
  103368:	e24bd004 	sub	sp, fp, #4
  10336c:	e8bd8800 	pop	{fp, pc}

00103370 <rt_memmove>:

void *rt_memmove(void *dest, const void *src, rt_ubase_t n)
{
  103370:	e92d4800 	push	{fp, lr}
  103374:	e28db004 	add	fp, sp, #4
  103378:	e24dd010 	sub	sp, sp, #16
  10337c:	e50b0008 	str	r0, [fp, #-8]
  103380:	e50b100c 	str	r1, [fp, #-12]
  103384:	e50b2010 	str	r2, [fp, #-16]
    return memmove(dest, src, n);
  103388:	e51b2010 	ldr	r2, [fp, #-16]
  10338c:	e51b100c 	ldr	r1, [fp, #-12]
  103390:	e51b0008 	ldr	r0, [fp, #-8]
  103394:	eb00f4ee 	bl	140754 <memmove>
  103398:	e1a03000 	mov	r3, r0
}
  10339c:	e1a00003 	mov	r0, r3
  1033a0:	e24bd004 	sub	sp, fp, #4
  1033a4:	e8bd8800 	pop	{fp, pc}

001033a8 <rt_tick_from_millisecond>:

rt_tick_t rt_tick_from_millisecond(rt_int32_t ms)
{
  1033a8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1033ac:	e28db000 	add	fp, sp, #0
  1033b0:	e24dd014 	sub	sp, sp, #20
  1033b4:	e50b0010 	str	r0, [fp, #-16]
    rt_tick_t tick;

    if (ms < 0)
  1033b8:	e51b3010 	ldr	r3, [fp, #-16]
  1033bc:	e3530000 	cmp	r3, #0
  1033c0:	aa000002 	bge	1033d0 <rt_tick_from_millisecond+0x28>
    {
        tick = (rt_tick_t)RT_WAITING_FOREVER;
  1033c4:	e3e03000 	mvn	r3, #0
  1033c8:	e50b3008 	str	r3, [fp, #-8]
  1033cc:	ea000021 	b	103458 <rt_tick_from_millisecond+0xb0>
    }
    else
    {
        tick = RT_TICK_PER_SECOND * (ms / 1000);
  1033d0:	e51b1010 	ldr	r1, [fp, #-16]
  1033d4:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  1033d8:	e3413062 	movt	r3, #4194	; 0x1062
  1033dc:	e0c32391 	smull	r2, r3, r1, r3
  1033e0:	e1a02343 	asr	r2, r3, #6
  1033e4:	e1a03fc1 	asr	r3, r1, #31
  1033e8:	e0423003 	sub	r3, r2, r3
  1033ec:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  1033f0:	e0030392 	mul	r3, r2, r3
  1033f4:	e50b3008 	str	r3, [fp, #-8]
        tick += (RT_TICK_PER_SECOND * (ms % 1000) + 999) / 1000;
  1033f8:	e51b2010 	ldr	r2, [fp, #-16]
  1033fc:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  103400:	e3413062 	movt	r3, #4194	; 0x1062
  103404:	e0c10392 	smull	r0, r1, r2, r3
  103408:	e1a01341 	asr	r1, r1, #6
  10340c:	e1a03fc2 	asr	r3, r2, #31
  103410:	e0413003 	sub	r3, r1, r3
  103414:	e3a01ffa 	mov	r1, #1000	; 0x3e8
  103418:	e0030391 	mul	r3, r1, r3
  10341c:	e0423003 	sub	r3, r2, r3
  103420:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  103424:	e0030392 	mul	r3, r2, r3
  103428:	e2833ff9 	add	r3, r3, #996	; 0x3e4
  10342c:	e2833003 	add	r3, r3, #3
  103430:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  103434:	e3412062 	movt	r2, #4194	; 0x1062
  103438:	e0c10293 	smull	r0, r1, r3, r2
  10343c:	e1a02341 	asr	r2, r1, #6
  103440:	e1a03fc3 	asr	r3, r3, #31
  103444:	e0423003 	sub	r3, r2, r3
  103448:	e1a02003 	mov	r2, r3
  10344c:	e51b3008 	ldr	r3, [fp, #-8]
  103450:	e0833002 	add	r3, r3, r2
  103454:	e50b3008 	str	r3, [fp, #-8]
    }

    /* return the calculated tick */
    return tick;
  103458:	e51b3008 	ldr	r3, [fp, #-8]
}
  10345c:	e1a00003 	mov	r0, r3
  103460:	e28bd000 	add	sp, fp, #0
  103464:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  103468:	e12fff1e 	bx	lr

0010346c <rt_malloc_align>:
 * @param align the alignment size
 *
 * @return the allocated memory block on successful, otherwise returns RT_NULL
 */
void *rt_malloc_align(rt_size_t size, rt_size_t align)
{
  10346c:	e92d4800 	push	{fp, lr}
  103470:	e28db004 	add	fp, sp, #4
  103474:	e24dd018 	sub	sp, sp, #24
  103478:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10347c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    void *align_ptr;
    int uintptr_size;
    rt_size_t align_size;

    /* sizeof pointer */
    uintptr_size = sizeof(void*);
  103480:	e3a03004 	mov	r3, #4
  103484:	e50b3010 	str	r3, [fp, #-16]
    uintptr_size -= 1;
  103488:	e51b3010 	ldr	r3, [fp, #-16]
  10348c:	e2433001 	sub	r3, r3, #1
  103490:	e50b3010 	str	r3, [fp, #-16]

    /* align the alignment size to uintptr size byte */
    align = ((align + uintptr_size) & ~uintptr_size);
  103494:	e51b2010 	ldr	r2, [fp, #-16]
  103498:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10349c:	e0823003 	add	r3, r2, r3
  1034a0:	e51b2010 	ldr	r2, [fp, #-16]
  1034a4:	e1e02002 	mvn	r2, r2
  1034a8:	e0033002 	and	r3, r3, r2
  1034ac:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    /* get total aligned size */
    align_size = ((size + uintptr_size) & ~uintptr_size) + align;
  1034b0:	e51b2010 	ldr	r2, [fp, #-16]
  1034b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1034b8:	e0823003 	add	r3, r2, r3
  1034bc:	e51b2010 	ldr	r2, [fp, #-16]
  1034c0:	e1e02002 	mvn	r2, r2
  1034c4:	e0033002 	and	r3, r3, r2
  1034c8:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1034cc:	e0823003 	add	r3, r2, r3
  1034d0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    /* allocate memory block from heap */
    ptr = rt_malloc(align_size);
  1034d4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1034d8:	ebfffead 	bl	102f94 <rt_malloc>
  1034dc:	e50b0008 	str	r0, [fp, #-8]
    if (ptr != RT_NULL)
  1034e0:	e51b3008 	ldr	r3, [fp, #-8]
  1034e4:	e3530000 	cmp	r3, #0
  1034e8:	0a000019 	beq	103554 <rt_malloc_align+0xe8>
    {
        /* the allocated memory block is aligned */
        if (((rt_ubase_t)ptr & (align - 1)) == 0)
  1034ec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1034f0:	e2432001 	sub	r2, r3, #1
  1034f4:	e51b3008 	ldr	r3, [fp, #-8]
  1034f8:	e0033002 	and	r3, r3, r2
  1034fc:	e3530000 	cmp	r3, #0
  103500:	1a000004 	bne	103518 <rt_malloc_align+0xac>
        {
            align_ptr = (void *)((rt_ubase_t)ptr + align);
  103504:	e51b2008 	ldr	r2, [fp, #-8]
  103508:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10350c:	e0823003 	add	r3, r2, r3
  103510:	e50b300c 	str	r3, [fp, #-12]
  103514:	ea000007 	b	103538 <rt_malloc_align+0xcc>
        }
        else
        {
            align_ptr = (void *)(((rt_ubase_t)ptr + (align - 1)) & ~(align - 1));
  103518:	e51b2008 	ldr	r2, [fp, #-8]
  10351c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  103520:	e0823003 	add	r3, r2, r3
  103524:	e2432001 	sub	r2, r3, #1
  103528:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10352c:	e2633000 	rsb	r3, r3, #0
  103530:	e0033002 	and	r3, r3, r2
  103534:	e50b300c 	str	r3, [fp, #-12]
        }

        /* set the pointer before alignment pointer to the real pointer */
        *((rt_ubase_t *)((rt_ubase_t)align_ptr - sizeof(void *))) = (rt_ubase_t)ptr;
  103538:	e51b300c 	ldr	r3, [fp, #-12]
  10353c:	e2433004 	sub	r3, r3, #4
  103540:	e1a02003 	mov	r2, r3
  103544:	e51b3008 	ldr	r3, [fp, #-8]
  103548:	e5823000 	str	r3, [r2]

        ptr = align_ptr;
  10354c:	e51b300c 	ldr	r3, [fp, #-12]
  103550:	e50b3008 	str	r3, [fp, #-8]
    }

    return ptr;
  103554:	e51b3008 	ldr	r3, [fp, #-8]
}
  103558:	e1a00003 	mov	r0, r3
  10355c:	e24bd004 	sub	sp, fp, #4
  103560:	e8bd8800 	pop	{fp, pc}

00103564 <rt_free_align>:
 * rt_malloc_align function and address is aligned.
 *
 * @param ptr the memory block pointer
 */
void rt_free_align(void *ptr)
{
  103564:	e92d4800 	push	{fp, lr}
  103568:	e28db004 	add	fp, sp, #4
  10356c:	e24dd010 	sub	sp, sp, #16
  103570:	e50b0010 	str	r0, [fp, #-16]
    void *real_ptr;

    real_ptr = (void *) * (rt_ubase_t *)((rt_ubase_t)ptr - sizeof(void *));
  103574:	e51b3010 	ldr	r3, [fp, #-16]
  103578:	e2433004 	sub	r3, r3, #4
  10357c:	e5933000 	ldr	r3, [r3]
  103580:	e50b3008 	str	r3, [fp, #-8]
    rt_free(real_ptr);
  103584:	e51b0008 	ldr	r0, [fp, #-8]
  103588:	ebfffe8b 	bl	102fbc <rt_free>
}
  10358c:	e320f000 	nop	{0}
  103590:	e24bd004 	sub	sp, fp, #4
  103594:	e8bd8800 	pop	{fp, pc}

00103598 <rt_assert_handler>:

void rt_assert_handler(const char *ex_string, const char *func, rt_size_t line)
{
  103598:	e92d4800 	push	{fp, lr}
  10359c:	e28db004 	add	fp, sp, #4
  1035a0:	e24dd010 	sub	sp, sp, #16
  1035a4:	e50b0008 	str	r0, [fp, #-8]
  1035a8:	e50b100c 	str	r1, [fp, #-12]
  1035ac:	e50b2010 	str	r2, [fp, #-16]
    printf("UserAPP: (%s) assertion failed at function:%s, line number:%d \n", ex_string, func, (int)line);
  1035b0:	e51b3010 	ldr	r3, [fp, #-16]
  1035b4:	e51b200c 	ldr	r2, [fp, #-12]
  1035b8:	e51b1008 	ldr	r1, [fp, #-8]
  1035bc:	e3040b20 	movw	r0, #19232	; 0x4b20
  1035c0:	e3400014 	movt	r0, #20
  1035c4:	eb00e999 	bl	13dc30 <printf>
    exit(-1);
  1035c8:	e3e00000 	mvn	r0, #0
  1035cc:	eb00d428 	bl	138674 <exit>

001035d0 <channel_cmd_recv>:
    /* send the command and not wait for the result */
    rt_channel_send(channel, &chn_msg);
}

rt_inline void *channel_cmd_recv(int channel)
{
  1035d0:	e92d4800 	push	{fp, lr}
  1035d4:	e28db004 	add	fp, sp, #4
  1035d8:	e24dd018 	sub	sp, sp, #24
  1035dc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    RT_ASSERT(channel >= 0);
  1035e0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1035e4:	e3530000 	cmp	r3, #0
  1035e8:	aa000005 	bge	103604 <channel_cmd_recv+0x34>
  1035ec:	e3a02027 	mov	r2, #39	; 0x27
  1035f0:	e3041d7c 	movw	r1, #19836	; 0x4d7c
  1035f4:	e3401014 	movt	r1, #20
  1035f8:	e3040b60 	movw	r0, #19296	; 0x4b60
  1035fc:	e3400014 	movt	r0, #20
  103600:	ebffffe4 	bl	103598 <rt_assert_handler>

    struct rt_channel_msg chn_msg;
    chn_msg.type = RT_CHANNEL_RAW;
  103604:	e3a03000 	mov	r3, #0
  103608:	e50b3010 	str	r3, [fp, #-16]
    rt_channel_recv(channel, &chn_msg);
  10360c:	e24b3014 	sub	r3, fp, #20
  103610:	e1a01003 	mov	r1, r3
  103614:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  103618:	ebfff313 	bl	10026c <rt_channel_recv>

    return chn_msg.u.d;
  10361c:	e51b300c 	ldr	r3, [fp, #-12]
}
  103620:	e1a00003 	mov	r0, r3
  103624:	e24bd004 	sub	sp, fp, #4
  103628:	e8bd8800 	pop	{fp, pc}

0010362c <channel_cmd_reply>:

rt_inline void channel_cmd_reply(int channel, void *cmd)
{
  10362c:	e92d4800 	push	{fp, lr}
  103630:	e28db004 	add	fp, sp, #4
  103634:	e24dd018 	sub	sp, sp, #24
  103638:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10363c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(channel >= 0);
  103640:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  103644:	e3530000 	cmp	r3, #0
  103648:	aa000005 	bge	103664 <channel_cmd_reply+0x38>
  10364c:	e3a02032 	mov	r2, #50	; 0x32
  103650:	e3041d90 	movw	r1, #19856	; 0x4d90
  103654:	e3401014 	movt	r1, #20
  103658:	e3040b60 	movw	r0, #19296	; 0x4b60
  10365c:	e3400014 	movt	r0, #20
  103660:	ebffffcc 	bl	103598 <rt_assert_handler>

    struct rt_channel_msg chn_msg;
    chn_msg.type = RT_CHANNEL_RAW;
  103664:	e3a03000 	mov	r3, #0
  103668:	e50b3010 	str	r3, [fp, #-16]
    chn_msg.u.d = cmd;
  10366c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  103670:	e50b300c 	str	r3, [fp, #-12]

    rt_channel_reply(channel, &chn_msg);
  103674:	e24b3014 	sub	r3, fp, #20
  103678:	e1a01003 	mov	r1, r3
  10367c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  103680:	ebfff2ec 	bl	100238 <rt_channel_reply>
}
  103684:	e320f000 	nop	{0}
  103688:	e24bd004 	sub	sp, fp, #4
  10368c:	e8bd8800 	pop	{fp, pc}

00103690 <stack_init>:
 *  0: initialization completes successfully, further actions can be carried on
 *  1: initialization has been done before, we could do anything but another
 *  initialization
 */
int stack_init(void)
{
  103690:	e92d4800 	push	{fp, lr}
  103694:	e28db004 	add	fp, sp, #4
    /* stack channel as a flag whether the stack has been initialized */
    stack_channel = rt_channel_open(chn_name, O_CREAT);
  103698:	e30d3010 	movw	r3, #53264	; 0xd010
  10369c:	e3403014 	movt	r3, #20
  1036a0:	e5933000 	ldr	r3, [r3]
  1036a4:	e3a01040 	mov	r1, #64	; 0x40
  1036a8:	e1a00003 	mov	r0, r3
  1036ac:	ebfff299 	bl	100118 <rt_channel_open>
  1036b0:	e1a02000 	mov	r2, r0
  1036b4:	e30d300c 	movw	r3, #53260	; 0xd00c
  1036b8:	e3403014 	movt	r3, #20
  1036bc:	e5832000 	str	r2, [r3]
    if (stack_channel < 0) return 1;    /* initialization has been done */
  1036c0:	e30d300c 	movw	r3, #53260	; 0xd00c
  1036c4:	e3403014 	movt	r3, #20
  1036c8:	e5933000 	ldr	r3, [r3]
  1036cc:	e3530000 	cmp	r3, #0
  1036d0:	aa000001 	bge	1036dc <stack_init+0x4c>
  1036d4:	e3a03001 	mov	r3, #1
  1036d8:	ea000001 	b	1036e4 <stack_init+0x54>

    /* start the TCPIP thread */
    lwip_system_init();
  1036dc:	eb001a22 	bl	109f6c <lwip_system_init>
    return 0;
  1036e0:	e3a03000 	mov	r3, #0
}
  1036e4:	e1a00003 	mov	r0, r3
  1036e8:	e8bd8800 	pop	{fp, pc}

001036ec <stack_run>:

int stack_run(void)
{
  1036ec:	e92d4800 	push	{fp, lr}
  1036f0:	e28db004 	add	fp, sp, #4
  1036f4:	e24dd050 	sub	sp, sp, #80	; 0x50
    struct channel_cmd *cmd;

    /* run stack event loop */
    while (1)
    {
        int shmid = (int)(size_t)channel_cmd_recv(stack_channel);
  1036f8:	e30d300c 	movw	r3, #53260	; 0xd00c
  1036fc:	e3403014 	movt	r3, #20
  103700:	e5933000 	ldr	r3, [r3]
  103704:	e1a00003 	mov	r0, r3
  103708:	ebffffb0 	bl	1035d0 <channel_cmd_recv>
  10370c:	e1a03000 	mov	r3, r0
  103710:	e50b300c 	str	r3, [fp, #-12]
        if (shmid >= 0)
  103714:	e51b300c 	ldr	r3, [fp, #-12]
  103718:	e3530000 	cmp	r3, #0
  10371c:	ba00011d 	blt	103b98 <stack_run+0x4ac>
        {
            cmd = lwp_shmat(shmid, NULL);
  103720:	e3a01000 	mov	r1, #0
  103724:	e51b000c 	ldr	r0, [fp, #-12]
  103728:	ebfff9f8 	bl	101f10 <lwp_shmat>
  10372c:	e50b0010 	str	r0, [fp, #-16]
            if (!cmd)
  103730:	e51b3010 	ldr	r3, [fp, #-16]
  103734:	e3530000 	cmp	r3, #0
  103738:	1a000002 	bne	103748 <stack_run+0x5c>
            {
                lwp_shmrm(shmid);
  10373c:	e51b000c 	ldr	r0, [fp, #-12]
  103740:	ebfff9e7 	bl	101ee4 <lwp_shmrm>
                continue;
  103744:	ea000116 	b	103ba4 <stack_run+0x4b8>
            }

            switch (cmd->cmd)
  103748:	e51b3010 	ldr	r3, [fp, #-16]
  10374c:	e5933000 	ldr	r3, [r3]
  103750:	e2433014 	sub	r3, r3, #20
  103754:	e3530009 	cmp	r3, #9
  103758:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  10375c:	ea00010f 	b	103ba0 <stack_run+0x4b4>
  103760:	00103788 	.word	0x00103788
  103764:	00103ba0 	.word	0x00103ba0
  103768:	001037e8 	.word	0x001037e8
  10376c:	0010384c 	.word	0x0010384c
  103770:	00103898 	.word	0x00103898
  103774:	001038fc 	.word	0x001038fc
  103778:	00103958 	.word	0x00103958
  10377c:	00103a48 	.word	0x00103a48
  103780:	00103ba0 	.word	0x00103ba0
  103784:	00103b14 	.word	0x00103b14
            {
            /* handle socket requests */
            case UNET_SRV_CMD_SOCKET:
                domain = (int)(size_t)cmd->argv[0];
  103788:	e51b3010 	ldr	r3, [fp, #-16]
  10378c:	e5933004 	ldr	r3, [r3, #4]
  103790:	e50b3044 	str	r3, [fp, #-68]	; 0xffffffbc
                type = (int)(size_t)cmd->argv[1];
  103794:	e51b3010 	ldr	r3, [fp, #-16]
  103798:	e5933008 	ldr	r3, [r3, #8]
  10379c:	e50b3048 	str	r3, [fp, #-72]	; 0xffffffb8
                protocol = (int)(size_t)cmd->argv[2];
  1037a0:	e51b3010 	ldr	r3, [fp, #-16]
  1037a4:	e593300c 	ldr	r3, [r3, #12]
  1037a8:	e50b304c 	str	r3, [fp, #-76]	; 0xffffffb4
                socket = socket_internal(domain, type, protocol);
  1037ac:	e51b204c 	ldr	r2, [fp, #-76]	; 0xffffffb4
  1037b0:	e51b1048 	ldr	r1, [fp, #-72]	; 0xffffffb8
  1037b4:	e51b0044 	ldr	r0, [fp, #-68]	; 0xffffffbc
  1037b8:	eb0016e8 	bl	109360 <socket_internal>
  1037bc:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
                lwp_shmdt(cmd);
  1037c0:	e51b0010 	ldr	r0, [fp, #-16]
  1037c4:	ebfff9de 	bl	101f44 <lwp_shmdt>
                channel_cmd_reply(stack_channel, (void *)(size_t)socket);
  1037c8:	e30d300c 	movw	r3, #53260	; 0xd00c
  1037cc:	e3403014 	movt	r3, #20
  1037d0:	e5933000 	ldr	r3, [r3]
  1037d4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1037d8:	e1a01002 	mov	r1, r2
  1037dc:	e1a00003 	mov	r0, r3
  1037e0:	ebffff91 	bl	10362c <channel_cmd_reply>
                break;
  1037e4:	ea0000ee 	b	103ba4 <stack_run+0x4b8>

            case UNET_SRV_CMD_BIND:
                socket = (int)(size_t)cmd->argv[0];
  1037e8:	e51b3010 	ldr	r3, [fp, #-16]
  1037ec:	e5933004 	ldr	r3, [r3, #4]
  1037f0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                psockaddr = (void *)(size_t)cmd + UNET_CMD_OFFSET;
  1037f4:	e51b3010 	ldr	r3, [fp, #-16]
  1037f8:	e283301c 	add	r3, r3, #28
  1037fc:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
                len = (int)(size_t)cmd->argv[1];
  103800:	e51b3010 	ldr	r3, [fp, #-16]
  103804:	e5933008 	ldr	r3, [r3, #8]
  103808:	e50b3040 	str	r3, [fp, #-64]	; 0xffffffc0

                result = bind_internal(socket, psockaddr, len);
  10380c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  103810:	e1a02003 	mov	r2, r3
  103814:	e51b1038 	ldr	r1, [fp, #-56]	; 0xffffffc8
  103818:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  10381c:	eb00162d 	bl	1090d8 <bind_internal>
  103820:	e50b0008 	str	r0, [fp, #-8]

                lwp_shmdt(cmd);
  103824:	e51b0010 	ldr	r0, [fp, #-16]
  103828:	ebfff9c5 	bl	101f44 <lwp_shmdt>
                channel_cmd_reply(stack_channel, (void *)(size_t)result);
  10382c:	e30d300c 	movw	r3, #53260	; 0xd00c
  103830:	e3403014 	movt	r3, #20
  103834:	e5933000 	ldr	r3, [r3]
  103838:	e51b2008 	ldr	r2, [fp, #-8]
  10383c:	e1a01002 	mov	r1, r2
  103840:	e1a00003 	mov	r0, r3
  103844:	ebffff78 	bl	10362c <channel_cmd_reply>
                break;
  103848:	ea0000d5 	b	103ba4 <stack_run+0x4b8>

            case UNET_SRV_CMD_LISTEN:
                socket = (int)(size_t)cmd->argv[0];
  10384c:	e51b3010 	ldr	r3, [fp, #-16]
  103850:	e5933004 	ldr	r3, [r3, #4]
  103854:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

                result = listen_internal(socket, (int)(size_t)cmd->argv[1]);
  103858:	e51b3010 	ldr	r3, [fp, #-16]
  10385c:	e5933008 	ldr	r3, [r3, #8]
  103860:	e1a01003 	mov	r1, r3
  103864:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103868:	eb001651 	bl	1091b4 <listen_internal>
  10386c:	e50b0008 	str	r0, [fp, #-8]

                lwp_shmdt(cmd);
  103870:	e51b0010 	ldr	r0, [fp, #-16]
  103874:	ebfff9b2 	bl	101f44 <lwp_shmdt>
                channel_cmd_reply(stack_channel, (void *)(size_t)result);
  103878:	e30d300c 	movw	r3, #53260	; 0xd00c
  10387c:	e3403014 	movt	r3, #20
  103880:	e5933000 	ldr	r3, [r3]
  103884:	e51b2008 	ldr	r2, [fp, #-8]
  103888:	e1a01002 	mov	r1, r2
  10388c:	e1a00003 	mov	r0, r3
  103890:	ebffff65 	bl	10362c <channel_cmd_reply>
                break;
  103894:	ea0000c2 	b	103ba4 <stack_run+0x4b8>

            case UNET_SRV_CMD_CONNECT:
                socket = (int)(size_t)cmd->argv[0];
  103898:	e51b3010 	ldr	r3, [fp, #-16]
  10389c:	e5933004 	ldr	r3, [r3, #4]
  1038a0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                psockaddr = (void *)(size_t)cmd + UNET_CMD_OFFSET;
  1038a4:	e51b3010 	ldr	r3, [fp, #-16]
  1038a8:	e283301c 	add	r3, r3, #28
  1038ac:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
                len = (int)(size_t)cmd->argv[1];
  1038b0:	e51b3010 	ldr	r3, [fp, #-16]
  1038b4:	e5933008 	ldr	r3, [r3, #8]
  1038b8:	e50b3040 	str	r3, [fp, #-64]	; 0xffffffc0

                result = connect_internal(socket, psockaddr, len);
  1038bc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1038c0:	e1a02003 	mov	r2, r3
  1038c4:	e51b1038 	ldr	r1, [fp, #-56]	; 0xffffffc8
  1038c8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1038cc:	eb001612 	bl	10911c <connect_internal>
  1038d0:	e50b0008 	str	r0, [fp, #-8]

                lwp_shmdt(cmd);
  1038d4:	e51b0010 	ldr	r0, [fp, #-16]
  1038d8:	ebfff999 	bl	101f44 <lwp_shmdt>
                channel_cmd_reply(stack_channel, (void *)(size_t)result);
  1038dc:	e30d300c 	movw	r3, #53260	; 0xd00c
  1038e0:	e3403014 	movt	r3, #20
  1038e4:	e5933000 	ldr	r3, [r3]
  1038e8:	e51b2008 	ldr	r2, [fp, #-8]
  1038ec:	e1a01002 	mov	r1, r2
  1038f0:	e1a00003 	mov	r0, r3
  1038f4:	ebffff4c 	bl	10362c <channel_cmd_reply>
                break;
  1038f8:	ea0000a9 	b	103ba4 <stack_run+0x4b8>

            case UNET_SRV_CMD_ACCEPT:
                socket = (int)(size_t)cmd->argv[0];
  1038fc:	e51b3010 	ldr	r3, [fp, #-16]
  103900:	e5933004 	ldr	r3, [r3, #4]
  103904:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                psockaddr = (void *)(size_t)cmd + UNET_CMD_OFFSET;
  103908:	e51b3010 	ldr	r3, [fp, #-16]
  10390c:	e283301c 	add	r3, r3, #28
  103910:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
                result = accept_internal(socket, psockaddr, (socklen_t *)&cmd->argv[1]);
  103914:	e51b3010 	ldr	r3, [fp, #-16]
  103918:	e2833008 	add	r3, r3, #8
  10391c:	e1a02003 	mov	r2, r3
  103920:	e51b1038 	ldr	r1, [fp, #-56]	; 0xffffffc8
  103924:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103928:	eb001582 	bl	108f38 <accept_internal>
  10392c:	e50b0008 	str	r0, [fp, #-8]
                lwp_shmdt(cmd);
  103930:	e51b0010 	ldr	r0, [fp, #-16]
  103934:	ebfff982 	bl	101f44 <lwp_shmdt>
                channel_cmd_reply(stack_channel, (void *)(size_t)result);
  103938:	e30d300c 	movw	r3, #53260	; 0xd00c
  10393c:	e3403014 	movt	r3, #20
  103940:	e5933000 	ldr	r3, [r3]
  103944:	e51b2008 	ldr	r2, [fp, #-8]
  103948:	e1a01002 	mov	r1, r2
  10394c:	e1a00003 	mov	r0, r3
  103950:	ebffff35 	bl	10362c <channel_cmd_reply>
                break;
  103954:	ea000092 	b	103ba4 <stack_run+0x4b8>

            case UNET_SRV_CMD_SENDTO:
                socket = (int)(size_t)cmd->argv[0];
  103958:	e51b3010 	ldr	r3, [fp, #-16]
  10395c:	e5933004 	ldr	r3, [r3, #4]
  103960:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                size = (size_t)cmd->argv[1];
  103964:	e51b3010 	ldr	r3, [fp, #-16]
  103968:	e5933008 	ldr	r3, [r3, #8]
  10396c:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
                flags = (int)(size_t)cmd->argv[2];
  103970:	e51b3010 	ldr	r3, [fp, #-16]
  103974:	e593300c 	ldr	r3, [r3, #12]
  103978:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
                tolen = (int)(size_t)cmd->argv[3];
  10397c:	e51b3010 	ldr	r3, [fp, #-16]
  103980:	e5933010 	ldr	r3, [r3, #16]
  103984:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
                data = (void *)(size_t)cmd + UNET_CMD_OFFSET;
  103988:	e51b3010 	ldr	r3, [fp, #-16]
  10398c:	e283301c 	add	r3, r3, #28
  103990:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc

                if(tolen  == 0)
  103994:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  103998:	e3530000 	cmp	r3, #0
  10399c:	1a000006 	bne	1039bc <stack_run+0x2d0>
                {
                    result = send_internal(socket, data, size, flags);
  1039a0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1039a4:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  1039a8:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  1039ac:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1039b0:	eb00163c 	bl	1092a8 <send_internal>
  1039b4:	e50b0008 	str	r0, [fp, #-8]
  1039b8:	ea00000f 	b	1039fc <stack_run+0x310>
                }
                else
                {
                    psockaddr = (void *)(size_t)cmd + UNET_CMD_OFFSET + size;
  1039bc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1039c0:	e283301c 	add	r3, r3, #28
  1039c4:	e51b2010 	ldr	r2, [fp, #-16]
  1039c8:	e0823003 	add	r3, r2, r3
  1039cc:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
                    result = sendto_internal(socket, data, size, flags, psockaddr, tolen);
  1039d0:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  1039d4:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  1039d8:	e58d3004 	str	r3, [sp, #4]
  1039dc:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1039e0:	e58d3000 	str	r3, [sp]
  1039e4:	e1a03002 	mov	r3, r2
  1039e8:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  1039ec:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  1039f0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1039f4:	eb001642 	bl	109304 <sendto_internal>
  1039f8:	e50b0008 	str	r0, [fp, #-8]
                }
                if(result <= 0)
  1039fc:	e51b3008 	ldr	r3, [fp, #-8]
  103a00:	e3530000 	cmp	r3, #0
  103a04:	ca000005 	bgt	103a20 <stack_run+0x334>
                {
                    rt_kprintf("%s line %d sendto error\n",__func__,__LINE__);
  103a08:	e3a02088 	mov	r2, #136	; 0x88
  103a0c:	e3041d70 	movw	r1, #19824	; 0x4d70
  103a10:	e3401014 	movt	r1, #20
  103a14:	e3040b78 	movw	r0, #19320	; 0x4b78
  103a18:	e3400014 	movt	r0, #20
  103a1c:	ebfffdbc 	bl	103114 <rt_kprintf>
                }
                lwp_shmdt(cmd);
  103a20:	e51b0010 	ldr	r0, [fp, #-16]
  103a24:	ebfff946 	bl	101f44 <lwp_shmdt>
                channel_cmd_reply(stack_channel, (void *)(size_t)result);
  103a28:	e30d300c 	movw	r3, #53260	; 0xd00c
  103a2c:	e3403014 	movt	r3, #20
  103a30:	e5933000 	ldr	r3, [r3]
  103a34:	e51b2008 	ldr	r2, [fp, #-8]
  103a38:	e1a01002 	mov	r1, r2
  103a3c:	e1a00003 	mov	r0, r3
  103a40:	ebfffef9 	bl	10362c <channel_cmd_reply>
                break;
  103a44:	ea000056 	b	103ba4 <stack_run+0x4b8>

            case UNET_SRV_CMD_RECVFROM:
                socket = (int)(size_t)cmd->argv[0];
  103a48:	e51b3010 	ldr	r3, [fp, #-16]
  103a4c:	e5933004 	ldr	r3, [r3, #4]
  103a50:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                size = (size_t)cmd->argv[1];
  103a54:	e51b3010 	ldr	r3, [fp, #-16]
  103a58:	e5933008 	ldr	r3, [r3, #8]
  103a5c:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
                flags = (int)(size_t)cmd->argv[2];
  103a60:	e51b3010 	ldr	r3, [fp, #-16]
  103a64:	e593300c 	ldr	r3, [r3, #12]
  103a68:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
                fromlen = (socklen_t*)cmd->argv[3];
  103a6c:	e51b3010 	ldr	r3, [fp, #-16]
  103a70:	e5933010 	ldr	r3, [r3, #16]
  103a74:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
                data = (void *)(size_t)cmd + UNET_CMD_OFFSET;
  103a78:	e51b3010 	ldr	r3, [fp, #-16]
  103a7c:	e283301c 	add	r3, r3, #28
  103a80:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc

                if(fromlen == RT_NULL)
  103a84:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  103a88:	e3530000 	cmp	r3, #0
  103a8c:	1a000006 	bne	103aac <stack_run+0x3c0>
                {
                    result = recv_internal(socket, data, size, flags);
  103a90:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103a94:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  103a98:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  103a9c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103aa0:	eb0015d2 	bl	1091f0 <recv_internal>
  103aa4:	e50b0008 	str	r0, [fp, #-8]
  103aa8:	ea00000f 	b	103aec <stack_run+0x400>
                }
                else
                {
                    psockaddr =  (void *)(size_t)cmd + UNET_CMD_OFFSET + size;
  103aac:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  103ab0:	e283301c 	add	r3, r3, #28
  103ab4:	e51b2010 	ldr	r2, [fp, #-16]
  103ab8:	e0823003 	add	r3, r2, r3
  103abc:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
                    result = recvfrom_internal(socket, data, size, flags , psockaddr, fromlen);
  103ac0:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  103ac4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  103ac8:	e58d3004 	str	r3, [sp, #4]
  103acc:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  103ad0:	e58d3000 	str	r3, [sp]
  103ad4:	e1a03002 	mov	r3, r2
  103ad8:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  103adc:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  103ae0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103ae4:	eb0015d8 	bl	10924c <recvfrom_internal>
  103ae8:	e50b0008 	str	r0, [fp, #-8]
                }

                lwp_shmdt(cmd);
  103aec:	e51b0010 	ldr	r0, [fp, #-16]
  103af0:	ebfff913 	bl	101f44 <lwp_shmdt>
                channel_cmd_reply(stack_channel, (void *)(size_t)result);
  103af4:	e30d300c 	movw	r3, #53260	; 0xd00c
  103af8:	e3403014 	movt	r3, #20
  103afc:	e5933000 	ldr	r3, [r3]
  103b00:	e51b2008 	ldr	r2, [fp, #-8]
  103b04:	e1a01002 	mov	r1, r2
  103b08:	e1a00003 	mov	r0, r3
  103b0c:	ebfffec6 	bl	10362c <channel_cmd_reply>
                break;
  103b10:	ea000023 	b	103ba4 <stack_run+0x4b8>

            case UNET_SRV_CMD_SETSOCKOPT:
            {
                socket = (int)(size_t)cmd->argv[0];
  103b14:	e51b3010 	ldr	r3, [fp, #-16]
  103b18:	e5933004 	ldr	r3, [r3, #4]
  103b1c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                int level = (int)(size_t)cmd->argv[1];
  103b20:	e51b3010 	ldr	r3, [fp, #-16]
  103b24:	e5933008 	ldr	r3, [r3, #8]
  103b28:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
                int opt = (int)(size_t)cmd->argv[2];
  103b2c:	e51b3010 	ldr	r3, [fp, #-16]
  103b30:	e593300c 	ldr	r3, [r3, #12]
  103b34:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
                socklen = (socklen_t)(size_t)cmd->argv[3];
  103b38:	e51b3010 	ldr	r3, [fp, #-16]
  103b3c:	e5933010 	ldr	r3, [r3, #16]
  103b40:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
                void *optval =  (void *)(size_t)cmd + UNET_CMD_OFFSET;
  103b44:	e51b3010 	ldr	r3, [fp, #-16]
  103b48:	e283301c 	add	r3, r3, #28
  103b4c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc

                result = setsockopt_internal(socket, level, opt, optval, socklen);
  103b50:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  103b54:	e58d3000 	str	r3, [sp]
  103b58:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  103b5c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  103b60:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  103b64:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103b68:	eb00157c 	bl	109160 <setsockopt_internal>
  103b6c:	e50b0008 	str	r0, [fp, #-8]

                lwp_shmdt(cmd);
  103b70:	e51b0010 	ldr	r0, [fp, #-16]
  103b74:	ebfff8f2 	bl	101f44 <lwp_shmdt>
                channel_cmd_reply(stack_channel, (void *)(size_t)result);
  103b78:	e30d300c 	movw	r3, #53260	; 0xd00c
  103b7c:	e3403014 	movt	r3, #20
  103b80:	e5933000 	ldr	r3, [r3]
  103b84:	e51b2008 	ldr	r2, [fp, #-8]
  103b88:	e1a01002 	mov	r1, r2
  103b8c:	e1a00003 	mov	r0, r3
  103b90:	ebfffea5 	bl	10362c <channel_cmd_reply>
                break;
  103b94:	ea000002 	b	103ba4 <stack_run+0x4b8>
            }

            default :
                break;
            }
        }
  103b98:	e320f000 	nop	{0}
  103b9c:	eafffed5 	b	1036f8 <stack_run+0xc>
                break;
  103ba0:	e320f000 	nop	{0}
    {
  103ba4:	eafffed3 	b	1036f8 <stack_run+0xc>

00103ba8 <lwipkit_usage>:
    return 0;
}

/* lwIPKit initialization should be done once at most */
static void lwipkit_usage(void)
{
  103ba8:	e92d4800 	push	{fp, lr}
  103bac:	e28db004 	add	fp, sp, #4
    printf("lwIPKit Usage:\n"
  103bb0:	e3040b94 	movw	r0, #19348	; 0x4b94
  103bb4:	e3400014 	movt	r0, #20
  103bb8:	eb00e82a 	bl	13dc68 <puts>
            "\tlwIPKit               :  run lwIPKit, wait for ethdev to attach\n"
            "\tlwIPKit attach   <eth>:  attach the device <eth> to lwIPKit\n"
            "\tlwIPKit deattach <eth>:  de-attach the device <eth> from lwIPKit\n"
            "\tlwIPKit default  <eth>:  set <eth> as the default device\n"
            "\tlwIPKit status        :  show the status of running lwIPKIt\n");
}
  103bbc:	e320f000 	nop	{0}
  103bc0:	e8bd8800 	pop	{fp, pc}

00103bc4 <main>:

int main(int argc, char **argv)
{
  103bc4:	e92d4800 	push	{fp, lr}
  103bc8:	e28db004 	add	fp, sp, #4
  103bcc:	e24dd010 	sub	sp, sp, #16
  103bd0:	e50b0010 	str	r0, [fp, #-16]
  103bd4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int initialized = 0;
  103bd8:	e3a03000 	mov	r3, #0
  103bdc:	e50b3008 	str	r3, [fp, #-8]

    /* we want to run lwIPKit as a server */
    if (argc < 2)
  103be0:	e51b3010 	ldr	r3, [fp, #-16]
  103be4:	e3530001 	cmp	r3, #1
  103be8:	ca000032 	bgt	103cb8 <main+0xf4>
    {        
        printf("lwIPKit: starts to run as the server");
  103bec:	e3040cdc 	movw	r0, #19676	; 0x4cdc
  103bf0:	e3400014 	movt	r0, #20
  103bf4:	eb00e80d 	bl	13dc30 <printf>
        initialized = stack_init();
  103bf8:	ebfffea4 	bl	103690 <stack_init>
  103bfc:	e50b0008 	str	r0, [fp, #-8]
        if (initialized < 0)
  103c00:	e51b3008 	ldr	r3, [fp, #-8]
  103c04:	e3530000 	cmp	r3, #0
  103c08:	aa000004 	bge	103c20 <main+0x5c>
        {
            printf(" ...failed!\n");
  103c0c:	e3040d04 	movw	r0, #19716	; 0x4d04
  103c10:	e3400014 	movt	r0, #20
  103c14:	eb00e813 	bl	13dc68 <puts>
            return -1;
  103c18:	e3e03000 	mvn	r3, #0
  103c1c:	ea000027 	b	103cc0 <main+0xfc>
        }
        else if (initialized > 0)   /* valid lwIPKit process exists */
  103c20:	e51b3008 	ldr	r3, [fp, #-8]
  103c24:	e3530000 	cmp	r3, #0
  103c28:	da000004 	ble	103c40 <main+0x7c>
        {
            printf(" ...skipped! Already initialized\n");
  103c2c:	e3040d10 	movw	r0, #19728	; 0x4d10
  103c30:	e3400014 	movt	r0, #20
  103c34:	eb00e80b 	bl	13dc68 <puts>
            return 0;
  103c38:	e3a03000 	mov	r3, #0
  103c3c:	ea00001f 	b	103cc0 <main+0xfc>
        }
        else
        {
            printf(" ...succeeded!\n");
  103c40:	e3040d34 	movw	r0, #19764	; 0x4d34
  103c44:	e3400014 	movt	r0, #20
  103c48:	eb00e806 	bl	13dc68 <puts>
            printf("lwIPKit: init eth dev...");
  103c4c:	e3040d44 	movw	r0, #19780	; 0x4d44
  103c50:	e3400014 	movt	r0, #20
  103c54:	eb00e7f5 	bl	13dc30 <printf>
            initialized = imx6ul_eth_init();
  103c58:	eb00c59d 	bl	1352d4 <imx6ul_eth_init>
  103c5c:	e50b0008 	str	r0, [fp, #-8]
            if (initialized < 0)
  103c60:	e51b3008 	ldr	r3, [fp, #-8]
  103c64:	e3530000 	cmp	r3, #0
  103c68:	aa000004 	bge	103c80 <main+0xbc>
            {
                printf(" ...failed!\n");
  103c6c:	e3040d04 	movw	r0, #19716	; 0x4d04
  103c70:	e3400014 	movt	r0, #20
  103c74:	eb00e7fb 	bl	13dc68 <puts>
                return -1;
  103c78:	e3e03000 	mvn	r3, #0
  103c7c:	ea00000f 	b	103cc0 <main+0xfc>
            }
            else if (initialized > 0)   /* valid lwIPKit process exists */
  103c80:	e51b3008 	ldr	r3, [fp, #-8]
  103c84:	e3530000 	cmp	r3, #0
  103c88:	da000004 	ble	103ca0 <main+0xdc>
            {
                printf(" ...skipped! Already initialized\n");
  103c8c:	e3040d10 	movw	r0, #19728	; 0x4d10
  103c90:	e3400014 	movt	r0, #20
  103c94:	eb00e7f3 	bl	13dc68 <puts>
                return 0;
  103c98:	e3a03000 	mov	r3, #0
  103c9c:	ea000007 	b	103cc0 <main+0xfc>
            } 
            else 
            {
                printf(" ...succeeded\n");
  103ca0:	e3040d60 	movw	r0, #19808	; 0x4d60
  103ca4:	e3400014 	movt	r0, #20
  103ca8:	eb00e7ee 	bl	13dc68 <puts>
                dfs_init();
  103cac:	eb00160b 	bl	1094e0 <dfs_init>
                sal_init();
  103cb0:	eb000afb 	bl	1068a4 <sal_init>
            }

            stack_run();            /* handle network requests, never return */
  103cb4:	ebfffe8c 	bl	1036ec <stack_run>
        }
    }

    lwipkit_usage();
  103cb8:	ebffffba 	bl	103ba8 <lwipkit_usage>
    return -1;
  103cbc:	e3e03000 	mvn	r3, #0
}
  103cc0:	e1a00003 	mov	r0, r3
  103cc4:	e24bd004 	sub	sp, fp, #4
  103cc8:	e8bd8800 	pop	{fp, pc}

00103ccc <channel_compose_cmd>:
#include "channel.h"

static int _shm_key = -1;
int channel_compose_cmd(uint32_t cmd, void *arg0, void *arg1, void *arg2,
    void *arg3, void *arg4, void *arg5, size_t datalen)
{
  103ccc:	e92d4800 	push	{fp, lr}
  103cd0:	e28db004 	add	fp, sp, #4
  103cd4:	e24dd020 	sub	sp, sp, #32
  103cd8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  103cdc:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  103ce0:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  103ce4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    int shmid;
    void *shm_vaddr = NULL;
  103ce8:	e3a03000 	mov	r3, #0
  103cec:	e50b3008 	str	r3, [fp, #-8]
    struct channel_cmd *pcmd = NULL;
  103cf0:	e3a03000 	mov	r3, #0
  103cf4:	e50b300c 	str	r3, [fp, #-12]

    /* the shared memory includes the command and the possible data */
    size_t len = datalen + CHANNEL_CMD_OFFSET;
  103cf8:	e59b3010 	ldr	r3, [fp, #16]
  103cfc:	e283301c 	add	r3, r3, #28
  103d00:	e50b3010 	str	r3, [fp, #-16]

    /* use the current thread ID to label the shared memory */
    if (_shm_key == -1)_shm_key = (int)(unsigned long)rt_thread_self();
  103d04:	e30d3014 	movw	r3, #53268	; 0xd014
  103d08:	e3403014 	movt	r3, #20
  103d0c:	e5933000 	ldr	r3, [r3]
  103d10:	e3730001 	cmn	r3, #1
  103d14:	1a000005 	bne	103d30 <channel_compose_cmd+0x64>
  103d18:	ebfff935 	bl	1021f4 <rt_thread_self>
  103d1c:	e1a03000 	mov	r3, r0
  103d20:	e1a02003 	mov	r2, r3
  103d24:	e30d3014 	movw	r3, #53268	; 0xd014
  103d28:	e3403014 	movt	r3, #20
  103d2c:	e5832000 	str	r2, [r3]
    _shm_key = _shm_key + 2;
  103d30:	e30d3014 	movw	r3, #53268	; 0xd014
  103d34:	e3403014 	movt	r3, #20
  103d38:	e5933000 	ldr	r3, [r3]
  103d3c:	e2832002 	add	r2, r3, #2
  103d40:	e30d3014 	movw	r3, #53268	; 0xd014
  103d44:	e3403014 	movt	r3, #20
  103d48:	e5832000 	str	r2, [r3]

    shmid = lwp_shmget(_shm_key, len, 1);    /* create a new shared-memory */
  103d4c:	e30d3014 	movw	r3, #53268	; 0xd014
  103d50:	e3403014 	movt	r3, #20
  103d54:	e5933000 	ldr	r3, [r3]
  103d58:	e3a02001 	mov	r2, #1
  103d5c:	e51b1010 	ldr	r1, [fp, #-16]
  103d60:	e1a00003 	mov	r0, r3
  103d64:	ebfff84f 	bl	101ea8 <lwp_shmget>
  103d68:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    if (shmid == -1)
  103d6c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103d70:	e3730001 	cmn	r3, #1
  103d74:	1a00000a 	bne	103da4 <channel_compose_cmd+0xd8>
    {
        rt_kprintf("%s :Fail to allocate a shared memory! _shm_key %ld\n",__func__,_shm_key);
  103d78:	e30d3014 	movw	r3, #53268	; 0xd014
  103d7c:	e3403014 	movt	r3, #20
  103d80:	e5933000 	ldr	r3, [r3]
  103d84:	e1a02003 	mov	r2, r3
  103d88:	e3041e14 	movw	r1, #19988	; 0x4e14
  103d8c:	e3401014 	movt	r1, #20
  103d90:	e3040da4 	movw	r0, #19876	; 0x4da4
  103d94:	e3400014 	movt	r0, #20
  103d98:	ebfffcdd 	bl	103114 <rt_kprintf>
        return -1;
  103d9c:	e3e03000 	mvn	r3, #0
  103da0:	ea000027 	b	103e44 <channel_compose_cmd+0x178>
    }

    /* get the start address of the shared memory */
    shm_vaddr = lwp_shmat(shmid, NULL);
  103da4:	e3a01000 	mov	r1, #0
  103da8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103dac:	ebfff857 	bl	101f10 <lwp_shmat>
  103db0:	e50b0008 	str	r0, [fp, #-8]
    if (shm_vaddr == NULL)
  103db4:	e51b3008 	ldr	r3, [fp, #-8]
  103db8:	e3530000 	cmp	r3, #0
  103dbc:	1a000006 	bne	103ddc <channel_compose_cmd+0x110>
    {
        printf("The allocated shared memory doesn't have a valid address!\n");
  103dc0:	e3040dd8 	movw	r0, #19928	; 0x4dd8
  103dc4:	e3400014 	movt	r0, #20
  103dc8:	eb00e7a6 	bl	13dc68 <puts>
        lwp_shmrm(shmid);
  103dcc:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103dd0:	ebfff843 	bl	101ee4 <lwp_shmrm>
        return -1;
  103dd4:	e3e03000 	mvn	r3, #0
  103dd8:	ea000019 	b	103e44 <channel_compose_cmd+0x178>
    }

    /* prepare the command structure */
    pcmd = (struct channel_cmd *) shm_vaddr;
  103ddc:	e51b3008 	ldr	r3, [fp, #-8]
  103de0:	e50b300c 	str	r3, [fp, #-12]

    pcmd->cmd = cmd;
  103de4:	e51b300c 	ldr	r3, [fp, #-12]
  103de8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  103dec:	e5832000 	str	r2, [r3]
    pcmd->argv[0] = arg0;
  103df0:	e51b300c 	ldr	r3, [fp, #-12]
  103df4:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  103df8:	e5832004 	str	r2, [r3, #4]
    pcmd->argv[1] = arg1;
  103dfc:	e51b300c 	ldr	r3, [fp, #-12]
  103e00:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  103e04:	e5832008 	str	r2, [r3, #8]
    pcmd->argv[2] = arg2;
  103e08:	e51b300c 	ldr	r3, [fp, #-12]
  103e0c:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  103e10:	e583200c 	str	r2, [r3, #12]
    pcmd->argv[3] = arg3;
  103e14:	e51b300c 	ldr	r3, [fp, #-12]
  103e18:	e59b2004 	ldr	r2, [fp, #4]
  103e1c:	e5832010 	str	r2, [r3, #16]
    pcmd->argv[4] = arg4;
  103e20:	e51b300c 	ldr	r3, [fp, #-12]
  103e24:	e59b2008 	ldr	r2, [fp, #8]
  103e28:	e5832014 	str	r2, [r3, #20]
    pcmd->argv[5] = arg5;
  103e2c:	e51b300c 	ldr	r3, [fp, #-12]
  103e30:	e59b200c 	ldr	r2, [fp, #12]
  103e34:	e5832018 	str	r2, [r3, #24]

    lwp_shmdt(shm_vaddr);
  103e38:	e51b0008 	ldr	r0, [fp, #-8]
  103e3c:	ebfff840 	bl	101f44 <lwp_shmdt>

    return shmid;
  103e40:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
}
  103e44:	e1a00003 	mov	r0, r3
  103e48:	e24bd004 	sub	sp, fp, #4
  103e4c:	e8bd8800 	pop	{fp, pc}

00103e50 <channel_cmd_send_recv>:
{
  103e50:	e92d4800 	push	{fp, lr}
  103e54:	e28db004 	add	fp, sp, #4
  103e58:	e24dd018 	sub	sp, sp, #24
  103e5c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  103e60:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(channel >= 0);
  103e64:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  103e68:	e3530000 	cmp	r3, #0
  103e6c:	aa000005 	bge	103e88 <channel_cmd_send_recv+0x38>
  103e70:	e3a0200a 	mov	r2, #10
  103e74:	e3041e70 	movw	r1, #20080	; 0x4e70
  103e78:	e3401014 	movt	r1, #20
  103e7c:	e3040e28 	movw	r0, #20008	; 0x4e28
  103e80:	e3400014 	movt	r0, #20
  103e84:	ebfffdc3 	bl	103598 <rt_assert_handler>
    chn_msg.type   = RT_CHANNEL_RAW;
  103e88:	e3a03000 	mov	r3, #0
  103e8c:	e50b3010 	str	r3, [fp, #-16]
    chn_msg.u.d    = cmd;
  103e90:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  103e94:	e50b300c 	str	r3, [fp, #-12]
    rt_channel_send_recv(channel, &chn_msg, &chn_msg);
  103e98:	e24b2014 	sub	r2, fp, #20
  103e9c:	e24b3014 	sub	r3, fp, #20
  103ea0:	e1a01003 	mov	r1, r3
  103ea4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  103ea8:	ebfff0b2 	bl	100178 <rt_channel_send_recv>
    return chn_msg.u.d;
  103eac:	e51b300c 	ldr	r3, [fp, #-12]
}
  103eb0:	e1a00003 	mov	r0, r3
  103eb4:	e24bd004 	sub	sp, fp, #4
  103eb8:	e8bd8800 	pop	{fp, pc}

00103ebc <channel_cmd_recv>:
{
  103ebc:	e92d4800 	push	{fp, lr}
  103ec0:	e28db004 	add	fp, sp, #4
  103ec4:	e24dd018 	sub	sp, sp, #24
  103ec8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    RT_ASSERT(channel >= 0);
  103ecc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  103ed0:	e3530000 	cmp	r3, #0
  103ed4:	aa000005 	bge	103ef0 <channel_cmd_recv+0x34>
  103ed8:	e3a02027 	mov	r2, #39	; 0x27
  103edc:	e3041e5c 	movw	r1, #20060	; 0x4e5c
  103ee0:	e3401014 	movt	r1, #20
  103ee4:	e3040e28 	movw	r0, #20008	; 0x4e28
  103ee8:	e3400014 	movt	r0, #20
  103eec:	ebfffda9 	bl	103598 <rt_assert_handler>
    chn_msg.type = RT_CHANNEL_RAW;
  103ef0:	e3a03000 	mov	r3, #0
  103ef4:	e50b3010 	str	r3, [fp, #-16]
    rt_channel_recv(channel, &chn_msg);
  103ef8:	e24b3014 	sub	r3, fp, #20
  103efc:	e1a01003 	mov	r1, r3
  103f00:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  103f04:	ebfff0d8 	bl	10026c <rt_channel_recv>
    return chn_msg.u.d;
  103f08:	e51b300c 	ldr	r3, [fp, #-12]
}
  103f0c:	e1a00003 	mov	r0, r3
  103f10:	e24bd004 	sub	sp, fp, #4
  103f14:	e8bd8800 	pop	{fp, pc}

00103f18 <ipc_service_init>:
const char *ueth_srv_name = "ipc_srv";
static int ueth_int_channel = -1;
const char *ueth_int_name = "ueth_int";

rt_err_t ipc_service_init()
{
  103f18:	e92d4800 	push	{fp, lr}
  103f1c:	e28db004 	add	fp, sp, #4
    ueth_ueth_srv_channel = rt_channel_open(ueth_srv_name, O_RDWR);
  103f20:	e30d301c 	movw	r3, #53276	; 0xd01c
  103f24:	e3403014 	movt	r3, #20
  103f28:	e5933000 	ldr	r3, [r3]
  103f2c:	e3a01002 	mov	r1, #2
  103f30:	e1a00003 	mov	r0, r3
  103f34:	ebfff077 	bl	100118 <rt_channel_open>
  103f38:	e1a02000 	mov	r2, r0
  103f3c:	e30d3018 	movw	r3, #53272	; 0xd018
  103f40:	e3403014 	movt	r3, #20
  103f44:	e5832000 	str	r2, [r3]
    if (ueth_ueth_srv_channel < 0)
  103f48:	e30d3018 	movw	r3, #53272	; 0xd018
  103f4c:	e3403014 	movt	r3, #20
  103f50:	e5933000 	ldr	r3, [r3]
  103f54:	e3530000 	cmp	r3, #0
  103f58:	aa000008 	bge	103f80 <ipc_service_init+0x68>
    {
        printf("open %s failed\n", ueth_srv_name);
  103f5c:	e30d301c 	movw	r3, #53276	; 0xd01c
  103f60:	e3403014 	movt	r3, #20
  103f64:	e5933000 	ldr	r3, [r3]
  103f68:	e1a01003 	mov	r1, r3
  103f6c:	e3040e4c 	movw	r0, #20044	; 0x4e4c
  103f70:	e3400014 	movt	r0, #20
  103f74:	eb00e72d 	bl	13dc30 <printf>
        return RT_ERROR;
  103f78:	e3a03001 	mov	r3, #1
  103f7c:	ea000018 	b	103fe4 <ipc_service_init+0xcc>
    }

    ueth_int_channel = rt_channel_open(ueth_int_name, O_RDWR);
  103f80:	e30d3024 	movw	r3, #53284	; 0xd024
  103f84:	e3403014 	movt	r3, #20
  103f88:	e5933000 	ldr	r3, [r3]
  103f8c:	e3a01002 	mov	r1, #2
  103f90:	e1a00003 	mov	r0, r3
  103f94:	ebfff05f 	bl	100118 <rt_channel_open>
  103f98:	e1a02000 	mov	r2, r0
  103f9c:	e30d3020 	movw	r3, #53280	; 0xd020
  103fa0:	e3403014 	movt	r3, #20
  103fa4:	e5832000 	str	r2, [r3]
    if (ueth_int_channel < 0)
  103fa8:	e30d3020 	movw	r3, #53280	; 0xd020
  103fac:	e3403014 	movt	r3, #20
  103fb0:	e5933000 	ldr	r3, [r3]
  103fb4:	e3530000 	cmp	r3, #0
  103fb8:	aa000008 	bge	103fe0 <ipc_service_init+0xc8>
    {
        printf("open %s failed\n", ueth_int_name);
  103fbc:	e30d3024 	movw	r3, #53284	; 0xd024
  103fc0:	e3403014 	movt	r3, #20
  103fc4:	e5933000 	ldr	r3, [r3]
  103fc8:	e1a01003 	mov	r1, r3
  103fcc:	e3040e4c 	movw	r0, #20044	; 0x4e4c
  103fd0:	e3400014 	movt	r0, #20
  103fd4:	eb00e715 	bl	13dc30 <printf>
        return RT_ERROR;
  103fd8:	e3a03001 	mov	r3, #1
  103fdc:	ea000000 	b	103fe4 <ipc_service_init+0xcc>
    }

    return RT_EOK;
  103fe0:	e3a03000 	mov	r3, #0
}
  103fe4:	e1a00003 	mov	r0, r3
  103fe8:	e8bd8800 	pop	{fp, pc}

00103fec <ueth_int_recv>:

void ueth_int_recv(void)
{
  103fec:	e92d4800 	push	{fp, lr}
  103ff0:	e28db004 	add	fp, sp, #4
    channel_cmd_recv(ueth_int_channel);
  103ff4:	e30d3020 	movw	r3, #53280	; 0xd020
  103ff8:	e3403014 	movt	r3, #20
  103ffc:	e5933000 	ldr	r3, [r3]
  104000:	e1a00003 	mov	r0, r3
  104004:	ebffffac 	bl	103ebc <channel_cmd_recv>
}
  104008:	e320f000 	nop	{0}
  10400c:	e8bd8800 	pop	{fp, pc}

00104010 <ueth_v2p>:

void *ueth_v2p(void * addr)
{
  104010:	e92d4800 	push	{fp, lr}
  104014:	e28db004 	add	fp, sp, #4
  104018:	e24dd028 	sub	sp, sp, #40	; 0x28
  10401c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    void* thread_self = rt_thread_self();
  104020:	ebfff873 	bl	1021f4 <rt_thread_self>
  104024:	e50b000c 	str	r0, [fp, #-12]
    int shmid = channel_compose_cmd3(UETH_V2P_REQ, (void*)0, thread_self, addr, 0);
  104028:	e3a03000 	mov	r3, #0
  10402c:	e58d300c 	str	r3, [sp, #12]
  104030:	e3a03000 	mov	r3, #0
  104034:	e58d3008 	str	r3, [sp, #8]
  104038:	e3a03000 	mov	r3, #0
  10403c:	e58d3004 	str	r3, [sp, #4]
  104040:	e3a03000 	mov	r3, #0
  104044:	e58d3000 	str	r3, [sp]
  104048:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10404c:	e51b200c 	ldr	r2, [fp, #-12]
  104050:	e3a01000 	mov	r1, #0
  104054:	e3a00005 	mov	r0, #5
  104058:	ebffff1b 	bl	103ccc <channel_compose_cmd>
  10405c:	e50b0010 	str	r0, [fp, #-16]
    void *res = RT_NULL;
  104060:	e3a03000 	mov	r3, #0
  104064:	e50b3008 	str	r3, [fp, #-8]
    struct channel_cmd *cmd  = (struct channel_cmd *)lwp_shmat(shmid, NULL);
  104068:	e3a01000 	mov	r1, #0
  10406c:	e51b0010 	ldr	r0, [fp, #-16]
  104070:	ebfff7a6 	bl	101f10 <lwp_shmat>
  104074:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    if (cmd) 
  104078:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10407c:	e3530000 	cmp	r3, #0
  104080:	0a000009 	beq	1040ac <ueth_v2p+0x9c>
    {
        res = channel_cmd_send_recv(ueth_ueth_srv_channel, (void*)(size_t)shmid);
  104084:	e30d3018 	movw	r3, #53272	; 0xd018
  104088:	e3403014 	movt	r3, #20
  10408c:	e5933000 	ldr	r3, [r3]
  104090:	e51b2010 	ldr	r2, [fp, #-16]
  104094:	e1a01002 	mov	r1, r2
  104098:	e1a00003 	mov	r0, r3
  10409c:	ebffff6b 	bl	103e50 <channel_cmd_send_recv>
  1040a0:	e50b0008 	str	r0, [fp, #-8]
        lwp_shmdt(cmd);
  1040a4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1040a8:	ebfff7a5 	bl	101f44 <lwp_shmdt>
    }

    lwp_shmrm(shmid);
  1040ac:	e51b0010 	ldr	r0, [fp, #-16]
  1040b0:	ebfff78b 	bl	101ee4 <lwp_shmrm>
    return res;
  1040b4:	e51b3008 	ldr	r3, [fp, #-8]

}
  1040b8:	e1a00003 	mov	r0, r3
  1040bc:	e24bd004 	sub	sp, fp, #4
  1040c0:	e8bd8800 	pop	{fp, pc}

001040c4 <ueth_remap>:

void *ueth_remap(void * addr, int type, size_t size) 
{
  1040c4:	e92d4800 	push	{fp, lr}
  1040c8:	e28db004 	add	fp, sp, #4
  1040cc:	e24dd030 	sub	sp, sp, #48	; 0x30
  1040d0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1040d4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  1040d8:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
    void* thread_self = rt_thread_self();
  1040dc:	ebfff844 	bl	1021f4 <rt_thread_self>
  1040e0:	e50b000c 	str	r0, [fp, #-12]
    int shmid = channel_compose_cmd4(UETH_REMAP_REQ, (void*)0, thread_self, (void*)type, addr, sizeof(size_t));
  1040e4:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1040e8:	e3a03004 	mov	r3, #4
  1040ec:	e58d300c 	str	r3, [sp, #12]
  1040f0:	e3a03000 	mov	r3, #0
  1040f4:	e58d3008 	str	r3, [sp, #8]
  1040f8:	e3a03000 	mov	r3, #0
  1040fc:	e58d3004 	str	r3, [sp, #4]
  104100:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  104104:	e58d3000 	str	r3, [sp]
  104108:	e1a03002 	mov	r3, r2
  10410c:	e51b200c 	ldr	r2, [fp, #-12]
  104110:	e3a01000 	mov	r1, #0
  104114:	e3a00001 	mov	r0, #1
  104118:	ebfffeeb 	bl	103ccc <channel_compose_cmd>
  10411c:	e50b0010 	str	r0, [fp, #-16]
    void *res = RT_NULL;
  104120:	e3a03000 	mov	r3, #0
  104124:	e50b3008 	str	r3, [fp, #-8]
    struct channel_cmd *cmd  = (struct channel_cmd *)lwp_shmat(shmid, NULL);
  104128:	e3a01000 	mov	r1, #0
  10412c:	e51b0010 	ldr	r0, [fp, #-16]
  104130:	ebfff776 	bl	101f10 <lwp_shmat>
  104134:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    if (cmd) 
  104138:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10413c:	e3530000 	cmp	r3, #0
  104140:	0a00000d 	beq	10417c <ueth_remap+0xb8>
    {
        memcpy(CHANNEL_CMD_DATA(cmd), (void*)&size, sizeof(size_t));
  104144:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  104148:	e283301c 	add	r3, r3, #28
  10414c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  104150:	e5832000 	str	r2, [r3]
        res = channel_cmd_send_recv(ueth_ueth_srv_channel, (void*)(size_t)shmid);
  104154:	e30d3018 	movw	r3, #53272	; 0xd018
  104158:	e3403014 	movt	r3, #20
  10415c:	e5933000 	ldr	r3, [r3]
  104160:	e51b2010 	ldr	r2, [fp, #-16]
  104164:	e1a01002 	mov	r1, r2
  104168:	e1a00003 	mov	r0, r3
  10416c:	ebffff37 	bl	103e50 <channel_cmd_send_recv>
  104170:	e50b0008 	str	r0, [fp, #-8]
        lwp_shmdt(cmd);
  104174:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  104178:	ebfff771 	bl	101f44 <lwp_shmdt>
    }

    lwp_shmrm(shmid);
  10417c:	e51b0010 	ldr	r0, [fp, #-16]
  104180:	ebfff757 	bl	101ee4 <lwp_shmrm>
    return res;
  104184:	e51b3008 	ldr	r3, [fp, #-8]
}
  104188:	e1a00003 	mov	r0, r3
  10418c:	e24bd004 	sub	sp, fp, #4
  104190:	e8bd8800 	pop	{fp, pc}

00104194 <ueth_gpioinit>:

void ueth_gpioinit(void *gpio, size_t size) 
{
  104194:	e92d4800 	push	{fp, lr}
  104198:	e28db004 	add	fp, sp, #4
  10419c:	e24dd020 	sub	sp, sp, #32
  1041a0:	e50b0010 	str	r0, [fp, #-16]
  1041a4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int shmid = channel_compose_cmd1(UETH_GPIOINIT_REQ, (void*)0, size);
  1041a8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1041ac:	e58d300c 	str	r3, [sp, #12]
  1041b0:	e3a03000 	mov	r3, #0
  1041b4:	e58d3008 	str	r3, [sp, #8]
  1041b8:	e3a03000 	mov	r3, #0
  1041bc:	e58d3004 	str	r3, [sp, #4]
  1041c0:	e3a03000 	mov	r3, #0
  1041c4:	e58d3000 	str	r3, [sp]
  1041c8:	e3a03000 	mov	r3, #0
  1041cc:	e3a02000 	mov	r2, #0
  1041d0:	e3a01000 	mov	r1, #0
  1041d4:	e3a00002 	mov	r0, #2
  1041d8:	ebfffebb 	bl	103ccc <channel_compose_cmd>
  1041dc:	e50b0008 	str	r0, [fp, #-8]
    struct channel_cmd *cmd = (struct channel_cmd*)lwp_shmat(shmid, NULL);
  1041e0:	e3a01000 	mov	r1, #0
  1041e4:	e51b0008 	ldr	r0, [fp, #-8]
  1041e8:	ebfff748 	bl	101f10 <lwp_shmat>
  1041ec:	e50b000c 	str	r0, [fp, #-12]
    if (cmd)
  1041f0:	e51b300c 	ldr	r3, [fp, #-12]
  1041f4:	e3530000 	cmp	r3, #0
  1041f8:	0a00000e 	beq	104238 <ueth_gpioinit+0xa4>
    {
        memcpy(CHANNEL_CMD_DATA(cmd), gpio, size);
  1041fc:	e51b300c 	ldr	r3, [fp, #-12]
  104200:	e283301c 	add	r3, r3, #28
  104204:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  104208:	e51b1010 	ldr	r1, [fp, #-16]
  10420c:	e1a00003 	mov	r0, r3
  104210:	eb00f07d 	bl	14040c <memcpy>
        channel_cmd_send_recv(ueth_ueth_srv_channel, (void *)(size_t)shmid);
  104214:	e30d3018 	movw	r3, #53272	; 0xd018
  104218:	e3403014 	movt	r3, #20
  10421c:	e5933000 	ldr	r3, [r3]
  104220:	e51b2008 	ldr	r2, [fp, #-8]
  104224:	e1a01002 	mov	r1, r2
  104228:	e1a00003 	mov	r0, r3
  10422c:	ebffff07 	bl	103e50 <channel_cmd_send_recv>
        lwp_shmdt(cmd);
  104230:	e51b000c 	ldr	r0, [fp, #-12]
  104234:	ebfff742 	bl	101f44 <lwp_shmdt>
    }

    lwp_shmrm(shmid);
  104238:	e51b0008 	ldr	r0, [fp, #-8]
  10423c:	ebfff728 	bl	101ee4 <lwp_shmrm>
}
  104240:	e320f000 	nop	{0}
  104244:	e24bd004 	sub	sp, fp, #4
  104248:	e8bd8800 	pop	{fp, pc}

0010424c <ueth_init_clock>:

void ueth_init_clock() 
{
  10424c:	e92d4800 	push	{fp, lr}
  104250:	e28db004 	add	fp, sp, #4
  104254:	e24dd018 	sub	sp, sp, #24
    int shmid = channel_compose_cmd1(UETH_CLOCKINIT_REQ, (void*)0, 0);
  104258:	e3a03000 	mov	r3, #0
  10425c:	e58d300c 	str	r3, [sp, #12]
  104260:	e3a03000 	mov	r3, #0
  104264:	e58d3008 	str	r3, [sp, #8]
  104268:	e3a03000 	mov	r3, #0
  10426c:	e58d3004 	str	r3, [sp, #4]
  104270:	e3a03000 	mov	r3, #0
  104274:	e58d3000 	str	r3, [sp]
  104278:	e3a03000 	mov	r3, #0
  10427c:	e3a02000 	mov	r2, #0
  104280:	e3a01000 	mov	r1, #0
  104284:	e3a00003 	mov	r0, #3
  104288:	ebfffe8f 	bl	103ccc <channel_compose_cmd>
  10428c:	e50b0008 	str	r0, [fp, #-8]
    struct channel_cmd *cmd = (struct channel_cmd*)lwp_shmat(shmid, NULL);
  104290:	e3a01000 	mov	r1, #0
  104294:	e51b0008 	ldr	r0, [fp, #-8]
  104298:	ebfff71c 	bl	101f10 <lwp_shmat>
  10429c:	e50b000c 	str	r0, [fp, #-12]
    if (cmd)
  1042a0:	e51b300c 	ldr	r3, [fp, #-12]
  1042a4:	e3530000 	cmp	r3, #0
  1042a8:	0a000008 	beq	1042d0 <ueth_init_clock+0x84>
    {
        channel_cmd_send_recv(ueth_ueth_srv_channel, (void *)(size_t)shmid);
  1042ac:	e30d3018 	movw	r3, #53272	; 0xd018
  1042b0:	e3403014 	movt	r3, #20
  1042b4:	e5933000 	ldr	r3, [r3]
  1042b8:	e51b2008 	ldr	r2, [fp, #-8]
  1042bc:	e1a01002 	mov	r1, r2
  1042c0:	e1a00003 	mov	r0, r3
  1042c4:	ebfffee1 	bl	103e50 <channel_cmd_send_recv>
        lwp_shmdt(cmd);
  1042c8:	e51b000c 	ldr	r0, [fp, #-12]
  1042cc:	ebfff71c 	bl	101f44 <lwp_shmdt>
    }

    lwp_shmrm(shmid);
  1042d0:	e51b0008 	ldr	r0, [fp, #-8]
  1042d4:	ebfff702 	bl	101ee4 <lwp_shmrm>
}
  1042d8:	e320f000 	nop	{0}
  1042dc:	e24bd004 	sub	sp, fp, #4
  1042e0:	e8bd8800 	pop	{fp, pc}

001042e4 <ueth_hw_interrupt_install>:

void ueth_hw_interrupt_install(int vector, void * param) {
  1042e4:	e92d4800 	push	{fp, lr}
  1042e8:	e28db004 	add	fp, sp, #4
  1042ec:	e24dd020 	sub	sp, sp, #32
  1042f0:	e50b0010 	str	r0, [fp, #-16]
  1042f4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int shmid = channel_compose_cmd3(UETH_INSTALL_INTERRUPT_REQ, (void*)0, (void*)vector, param, 0);
  1042f8:	e51b2010 	ldr	r2, [fp, #-16]
  1042fc:	e3a03000 	mov	r3, #0
  104300:	e58d300c 	str	r3, [sp, #12]
  104304:	e3a03000 	mov	r3, #0
  104308:	e58d3008 	str	r3, [sp, #8]
  10430c:	e3a03000 	mov	r3, #0
  104310:	e58d3004 	str	r3, [sp, #4]
  104314:	e3a03000 	mov	r3, #0
  104318:	e58d3000 	str	r3, [sp]
  10431c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  104320:	e3a01000 	mov	r1, #0
  104324:	e3a00006 	mov	r0, #6
  104328:	ebfffe67 	bl	103ccc <channel_compose_cmd>
  10432c:	e50b0008 	str	r0, [fp, #-8]
    struct channel_cmd *cmd = (struct channel_cmd*)lwp_shmat(shmid, NULL);
  104330:	e3a01000 	mov	r1, #0
  104334:	e51b0008 	ldr	r0, [fp, #-8]
  104338:	ebfff6f4 	bl	101f10 <lwp_shmat>
  10433c:	e50b000c 	str	r0, [fp, #-12]
    if (cmd)
  104340:	e51b300c 	ldr	r3, [fp, #-12]
  104344:	e3530000 	cmp	r3, #0
  104348:	0a000008 	beq	104370 <ueth_hw_interrupt_install+0x8c>
    {
        channel_cmd_send_recv(ueth_ueth_srv_channel, (void *)(size_t)shmid);
  10434c:	e30d3018 	movw	r3, #53272	; 0xd018
  104350:	e3403014 	movt	r3, #20
  104354:	e5933000 	ldr	r3, [r3]
  104358:	e51b2008 	ldr	r2, [fp, #-8]
  10435c:	e1a01002 	mov	r1, r2
  104360:	e1a00003 	mov	r0, r3
  104364:	ebfffeb9 	bl	103e50 <channel_cmd_send_recv>
        lwp_shmdt(cmd);
  104368:	e51b000c 	ldr	r0, [fp, #-12]
  10436c:	ebfff6f4 	bl	101f44 <lwp_shmdt>
        
    }
    
    lwp_shmrm(shmid);
  104370:	e51b0008 	ldr	r0, [fp, #-8]
  104374:	ebfff6da 	bl	101ee4 <lwp_shmrm>
  104378:	e320f000 	nop	{0}
  10437c:	e24bd004 	sub	sp, fp, #4
  104380:	e8bd8800 	pop	{fp, pc}

00104384 <inet_ioctlsocket>:

#include "sal.h"
#include "netdev.h"

int inet_ioctlsocket(int socket, long cmd, void *arg)
{
  104384:	e92d4800 	push	{fp, lr}
  104388:	e28db004 	add	fp, sp, #4
  10438c:	e24dd010 	sub	sp, sp, #16
  104390:	e50b0008 	str	r0, [fp, #-8]
  104394:	e50b100c 	str	r1, [fp, #-12]
  104398:	e50b2010 	str	r2, [fp, #-16]
    switch (cmd)
  10439c:	e51b300c 	ldr	r3, [fp, #-12]
  1043a0:	e2433003 	sub	r3, r3, #3
  1043a4:	e3530001 	cmp	r3, #1
  1043a8:	8a000006 	bhi	1043c8 <inet_ioctlsocket+0x44>
    {
    case F_GETFL:
    case F_SETFL:
        return unet_fcntl(socket, cmd, (int)(unsigned long) arg);
  1043ac:	e51b3010 	ldr	r3, [fp, #-16]
  1043b0:	e1a02003 	mov	r2, r3
  1043b4:	e51b100c 	ldr	r1, [fp, #-12]
  1043b8:	e51b0008 	ldr	r0, [fp, #-8]
  1043bc:	eb00123d 	bl	108cb8 <unet_fcntl>
  1043c0:	e1a03000 	mov	r3, r0
  1043c4:	ea000004 	b	1043dc <inet_ioctlsocket+0x58>

    default:
        return unet_ioctl(socket, cmd, arg);
  1043c8:	e51b2010 	ldr	r2, [fp, #-16]
  1043cc:	e51b100c 	ldr	r1, [fp, #-12]
  1043d0:	e51b0008 	ldr	r0, [fp, #-8]
  1043d4:	eb001245 	bl	108cf0 <unet_ioctl>
  1043d8:	e1a03000 	mov	r3, r0
    }
}
  1043dc:	e1a00003 	mov	r0, r3
  1043e0:	e24bd004 	sub	sp, fp, #4
  1043e4:	e8bd8800 	pop	{fp, pc}

001043e8 <sal_unet_netdev_set_pf_info>:
    &unet_netdb_ops,
};

/* Set lwIP network interface device protocol family information */
int sal_unet_netdev_set_pf_info(struct netdev *netdev)
{
  1043e8:	e92d4800 	push	{fp, lr}
  1043ec:	e28db004 	add	fp, sp, #4
  1043f0:	e24dd008 	sub	sp, sp, #8
  1043f4:	e50b0008 	str	r0, [fp, #-8]
    RT_ASSERT(netdev);
  1043f8:	e51b3008 	ldr	r3, [fp, #-8]
  1043fc:	e3530000 	cmp	r3, #0
  104400:	1a000005 	bne	10441c <sal_unet_netdev_set_pf_info+0x34>
  104404:	e3a0204e 	mov	r2, #78	; 0x4e
  104408:	e3041eec 	movw	r1, #20204	; 0x4eec
  10440c:	e3401014 	movt	r1, #20
  104410:	e3040ee4 	movw	r0, #20196	; 0x4ee4
  104414:	e3400014 	movt	r0, #20
  104418:	ebfffc5e 	bl	103598 <rt_assert_handler>

    netdev->sal_user_data = (void *)(unsigned long) &unet_inet_family;
  10441c:	e51b2008 	ldr	r2, [fp, #-8]
  104420:	e3043ed4 	movw	r3, #20180	; 0x4ed4
  104424:	e3403014 	movt	r3, #20
  104428:	e582303c 	str	r3, [r2, #60]	; 0x3c
    return 0;
  10442c:	e3a03000 	mov	r3, #0
}
  104430:	e1a00003 	mov	r0, r3
  104434:	e24bd004 	sub	sp, fp, #4
  104438:	e8bd8800 	pop	{fp, pc}

0010443c <ueth_device_find>:
#define MAX_DEV_NUM 3
static eth_device_node ueth_dev_list[MAX_DEV_NUM];
static char ueth_dev_list_valid[MAX_DEV_NUM];

rt_device_t ueth_device_find(const char *name)
{
  10443c:	e92d4800 	push	{fp, lr}
  104440:	e28db004 	add	fp, sp, #4
  104444:	e24dd010 	sub	sp, sp, #16
  104448:	e50b0010 	str	r0, [fp, #-16]
    for (int i = 0; i < MAX_DEV_NUM; i++)
  10444c:	e3a03000 	mov	r3, #0
  104450:	e50b3008 	str	r3, [fp, #-8]
  104454:	ea00001f 	b	1044d8 <ueth_device_find+0x9c>
    {
        if (ueth_dev_list_valid[i])
  104458:	e30d3440 	movw	r3, #54336	; 0xd440
  10445c:	e3403014 	movt	r3, #20
  104460:	e51b2008 	ldr	r2, [fp, #-8]
  104464:	e0833002 	add	r3, r3, r2
  104468:	e5d33000 	ldrb	r3, [r3]
  10446c:	e3530000 	cmp	r3, #0
  104470:	0a000015 	beq	1044cc <ueth_device_find+0x90>
        {
            if (strncmp(ueth_dev_list[i].name, name, 8) == 0)
  104474:	e51b3008 	ldr	r3, [fp, #-8]
  104478:	e3a0200c 	mov	r2, #12
  10447c:	e0020392 	mul	r2, r2, r3
  104480:	e30d341c 	movw	r3, #54300	; 0xd41c
  104484:	e3403014 	movt	r3, #20
  104488:	e0823003 	add	r3, r2, r3
  10448c:	e2833004 	add	r3, r3, #4
  104490:	e3a02008 	mov	r2, #8
  104494:	e51b1010 	ldr	r1, [fp, #-16]
  104498:	e1a00003 	mov	r0, r3
  10449c:	eb00f1cf 	bl	140be0 <strncmp>
  1044a0:	e1a03000 	mov	r3, r0
  1044a4:	e3530000 	cmp	r3, #0
  1044a8:	1a000007 	bne	1044cc <ueth_device_find+0x90>
            {  
                return ueth_dev_list[i].dev;
  1044ac:	e30d341c 	movw	r3, #54300	; 0xd41c
  1044b0:	e3403014 	movt	r3, #20
  1044b4:	e51b2008 	ldr	r2, [fp, #-8]
  1044b8:	e3a0100c 	mov	r1, #12
  1044bc:	e0020291 	mul	r2, r1, r2
  1044c0:	e0833002 	add	r3, r3, r2
  1044c4:	e5933000 	ldr	r3, [r3]
  1044c8:	ea000006 	b	1044e8 <ueth_device_find+0xac>
    for (int i = 0; i < MAX_DEV_NUM; i++)
  1044cc:	e51b3008 	ldr	r3, [fp, #-8]
  1044d0:	e2833001 	add	r3, r3, #1
  1044d4:	e50b3008 	str	r3, [fp, #-8]
  1044d8:	e51b3008 	ldr	r3, [fp, #-8]
  1044dc:	e3530002 	cmp	r3, #2
  1044e0:	daffffdc 	ble	104458 <ueth_device_find+0x1c>
            }
        }
    }

    return RT_NULL;
  1044e4:	e3a03000 	mov	r3, #0
}
  1044e8:	e1a00003 	mov	r0, r3
  1044ec:	e24bd004 	sub	sp, fp, #4
  1044f0:	e8bd8800 	pop	{fp, pc}

001044f4 <ueth_device_register>:

rt_err_t ueth_device_register(rt_device_t dev, const char *name, rt_uint16_t flags)
{
  1044f4:	e92d4800 	push	{fp, lr}
  1044f8:	e28db004 	add	fp, sp, #4
  1044fc:	e24dd018 	sub	sp, sp, #24
  104500:	e50b0010 	str	r0, [fp, #-16]
  104504:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  104508:	e1a03002 	mov	r3, r2
  10450c:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
    if (dev == RT_NULL)
  104510:	e51b3010 	ldr	r3, [fp, #-16]
  104514:	e3530000 	cmp	r3, #0
  104518:	1a000001 	bne	104524 <ueth_device_register+0x30>
        return -RT_ERROR;
  10451c:	e3e03000 	mvn	r3, #0
  104520:	ea000042 	b	104630 <ueth_device_register+0x13c>

    if (ueth_device_find(name) != RT_NULL)
  104524:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  104528:	ebffffc3 	bl	10443c <ueth_device_find>
  10452c:	e1a03000 	mov	r3, r0
  104530:	e3530000 	cmp	r3, #0
  104534:	0a000001 	beq	104540 <ueth_device_register+0x4c>
        return -RT_ERROR;
  104538:	e3e03000 	mvn	r3, #0
  10453c:	ea00003b 	b	104630 <ueth_device_register+0x13c>

    int ueth_dev_list_index = 0;
  104540:	e3a03000 	mov	r3, #0
  104544:	e50b3008 	str	r3, [fp, #-8]
    while (ueth_dev_list_index < MAX_DEV_NUM)
  104548:	ea000009 	b	104574 <ueth_device_register+0x80>
    {
        if (!ueth_dev_list_valid[ueth_dev_list_index])
  10454c:	e30d3440 	movw	r3, #54336	; 0xd440
  104550:	e3403014 	movt	r3, #20
  104554:	e51b2008 	ldr	r2, [fp, #-8]
  104558:	e0833002 	add	r3, r3, r2
  10455c:	e5d33000 	ldrb	r3, [r3]
  104560:	e3530000 	cmp	r3, #0
  104564:	0a000006 	beq	104584 <ueth_device_register+0x90>
        {
            break;
        }
        ueth_dev_list_index++;
  104568:	e51b3008 	ldr	r3, [fp, #-8]
  10456c:	e2833001 	add	r3, r3, #1
  104570:	e50b3008 	str	r3, [fp, #-8]
    while (ueth_dev_list_index < MAX_DEV_NUM)
  104574:	e51b3008 	ldr	r3, [fp, #-8]
  104578:	e3530002 	cmp	r3, #2
  10457c:	dafffff2 	ble	10454c <ueth_device_register+0x58>
  104580:	ea000000 	b	104588 <ueth_device_register+0x94>
            break;
  104584:	e320f000 	nop	{0}
    }

    if (ueth_dev_list_index == MAX_DEV_NUM)
  104588:	e51b3008 	ldr	r3, [fp, #-8]
  10458c:	e3530003 	cmp	r3, #3
  104590:	1a000001 	bne	10459c <ueth_device_register+0xa8>
    {
        return -RT_ERROR;
  104594:	e3e03000 	mvn	r3, #0
  104598:	ea000024 	b	104630 <ueth_device_register+0x13c>
    }
    
    strcpy(ueth_dev_list[ueth_dev_list_index].name, name);
  10459c:	e51b3008 	ldr	r3, [fp, #-8]
  1045a0:	e3a0200c 	mov	r2, #12
  1045a4:	e0020392 	mul	r2, r2, r3
  1045a8:	e30d341c 	movw	r3, #54300	; 0xd41c
  1045ac:	e3403014 	movt	r3, #20
  1045b0:	e0823003 	add	r3, r2, r3
  1045b4:	e2833004 	add	r3, r3, #4
  1045b8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1045bc:	e1a00003 	mov	r0, r3
  1045c0:	eb00f149 	bl	140aec <strcpy>
    ueth_dev_list[ueth_dev_list_index].dev = dev;
  1045c4:	e30d341c 	movw	r3, #54300	; 0xd41c
  1045c8:	e3403014 	movt	r3, #20
  1045cc:	e51b2008 	ldr	r2, [fp, #-8]
  1045d0:	e3a0100c 	mov	r1, #12
  1045d4:	e0020291 	mul	r2, r1, r2
  1045d8:	e0833002 	add	r3, r3, r2
  1045dc:	e51b2010 	ldr	r2, [fp, #-16]
  1045e0:	e5832000 	str	r2, [r3]
    ueth_dev_list_valid[ueth_dev_list_index] = 1;
  1045e4:	e30d3440 	movw	r3, #54336	; 0xd440
  1045e8:	e3403014 	movt	r3, #20
  1045ec:	e51b2008 	ldr	r2, [fp, #-8]
  1045f0:	e0833002 	add	r3, r3, r2
  1045f4:	e3a02001 	mov	r2, #1
  1045f8:	e5c32000 	strb	r2, [r3]
    dev->flag = flags;
  1045fc:	e51b3010 	ldr	r3, [fp, #-16]
  104600:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  104604:	e1c321bc 	strh	r2, [r3, #28]
    dev->ref_count = 0;
  104608:	e51b3010 	ldr	r3, [fp, #-16]
  10460c:	e3a02000 	mov	r2, #0
  104610:	e5c32020 	strb	r2, [r3, #32]
    dev->open_flag = 0;
  104614:	e51b3010 	ldr	r3, [fp, #-16]
  104618:	e3a02000 	mov	r2, #0
  10461c:	e1c321be 	strh	r2, [r3, #30]

    dev->parent.type = RT_Object_Class_Device;
  104620:	e51b3010 	ldr	r3, [fp, #-16]
  104624:	e3a02009 	mov	r2, #9
  104628:	e5c32008 	strb	r2, [r3, #8]

    return RT_EOK;
  10462c:	e3a03000 	mov	r3, #0
}
  104630:	e1a00003 	mov	r0, r3
  104634:	e24bd004 	sub	sp, fp, #4
  104638:	e8bd8800 	pop	{fp, pc}

0010463c <ueth_device_unregister>:

rt_err_t ueth_device_unregister(rt_device_t dev)
{
  10463c:	e92d4800 	push	{fp, lr}
  104640:	e28db004 	add	fp, sp, #4
  104644:	e24dd010 	sub	sp, sp, #16
  104648:	e50b0010 	str	r0, [fp, #-16]
    RT_ASSERT(dev != RT_NULL);
  10464c:	e51b3010 	ldr	r3, [fp, #-16]
  104650:	e3530000 	cmp	r3, #0
  104654:	1a000005 	bne	104670 <ueth_device_unregister+0x34>
  104658:	e3a02048 	mov	r2, #72	; 0x48
  10465c:	e3041f7c 	movw	r1, #20348	; 0x4f7c
  104660:	e3401014 	movt	r1, #20
  104664:	e3040f08 	movw	r0, #20232	; 0x4f08
  104668:	e3400014 	movt	r0, #20
  10466c:	ebfffbc9 	bl	103598 <rt_assert_handler>
    RT_ASSERT(dev->parent.type == RT_Object_Class_Device);
  104670:	e51b3010 	ldr	r3, [fp, #-16]
  104674:	e5d33008 	ldrb	r3, [r3, #8]
  104678:	e3530009 	cmp	r3, #9
  10467c:	0a000005 	beq	104698 <ueth_device_unregister+0x5c>
  104680:	e3a02049 	mov	r2, #73	; 0x49
  104684:	e3041f7c 	movw	r1, #20348	; 0x4f7c
  104688:	e3401014 	movt	r1, #20
  10468c:	e3040f18 	movw	r0, #20248	; 0x4f18
  104690:	e3400014 	movt	r0, #20
  104694:	ebfffbbf 	bl	103598 <rt_assert_handler>

    for (int i = 0; i < MAX_DEV_NUM; i++)
  104698:	e3a03000 	mov	r3, #0
  10469c:	e50b3008 	str	r3, [fp, #-8]
  1046a0:	ea000019 	b	10470c <ueth_device_unregister+0xd0>
    {
        if (ueth_dev_list_valid[i] && dev == ueth_dev_list[i].dev)
  1046a4:	e30d3440 	movw	r3, #54336	; 0xd440
  1046a8:	e3403014 	movt	r3, #20
  1046ac:	e51b2008 	ldr	r2, [fp, #-8]
  1046b0:	e0833002 	add	r3, r3, r2
  1046b4:	e5d33000 	ldrb	r3, [r3]
  1046b8:	e3530000 	cmp	r3, #0
  1046bc:	0a00000f 	beq	104700 <ueth_device_unregister+0xc4>
  1046c0:	e30d341c 	movw	r3, #54300	; 0xd41c
  1046c4:	e3403014 	movt	r3, #20
  1046c8:	e51b2008 	ldr	r2, [fp, #-8]
  1046cc:	e3a0100c 	mov	r1, #12
  1046d0:	e0020291 	mul	r2, r1, r2
  1046d4:	e0833002 	add	r3, r3, r2
  1046d8:	e5933000 	ldr	r3, [r3]
  1046dc:	e51b2010 	ldr	r2, [fp, #-16]
  1046e0:	e1520003 	cmp	r2, r3
  1046e4:	1a000005 	bne	104700 <ueth_device_unregister+0xc4>
        {
            ueth_dev_list_valid[i] = 0;
  1046e8:	e30d3440 	movw	r3, #54336	; 0xd440
  1046ec:	e3403014 	movt	r3, #20
  1046f0:	e51b2008 	ldr	r2, [fp, #-8]
  1046f4:	e0833002 	add	r3, r3, r2
  1046f8:	e3a02000 	mov	r2, #0
  1046fc:	e5c32000 	strb	r2, [r3]
    for (int i = 0; i < MAX_DEV_NUM; i++)
  104700:	e51b3008 	ldr	r3, [fp, #-8]
  104704:	e2833001 	add	r3, r3, #1
  104708:	e50b3008 	str	r3, [fp, #-8]
  10470c:	e51b3008 	ldr	r3, [fp, #-8]
  104710:	e3530002 	cmp	r3, #2
  104714:	daffffe2 	ble	1046a4 <ueth_device_unregister+0x68>
        }
    }

    return RT_EOK;
  104718:	e3a03000 	mov	r3, #0
}
  10471c:	e1a00003 	mov	r0, r3
  104720:	e24bd004 	sub	sp, fp, #4
  104724:	e8bd8800 	pop	{fp, pc}

00104728 <ueth_device_init>:

rt_err_t ueth_device_init(rt_device_t dev)
{
  104728:	e92d4800 	push	{fp, lr}
  10472c:	e28db004 	add	fp, sp, #4
  104730:	e24dd010 	sub	sp, sp, #16
  104734:	e50b0010 	str	r0, [fp, #-16]
    rt_err_t result = RT_EOK;
  104738:	e3a03000 	mov	r3, #0
  10473c:	e50b3008 	str	r3, [fp, #-8]

    RT_ASSERT(dev != RT_NULL);
  104740:	e51b3010 	ldr	r3, [fp, #-16]
  104744:	e3530000 	cmp	r3, #0
  104748:	1a000005 	bne	104764 <ueth_device_init+0x3c>
  10474c:	e3a0205a 	mov	r2, #90	; 0x5a
  104750:	e3041f94 	movw	r1, #20372	; 0x4f94
  104754:	e3401014 	movt	r1, #20
  104758:	e3040f08 	movw	r0, #20232	; 0x4f08
  10475c:	e3400014 	movt	r0, #20
  104760:	ebfffb8c 	bl	103598 <rt_assert_handler>
    RT_ASSERT(dev->parent.type == RT_Object_Class_Device);
  104764:	e51b3010 	ldr	r3, [fp, #-16]
  104768:	e5d33008 	ldrb	r3, [r3, #8]
  10476c:	e3530009 	cmp	r3, #9
  104770:	0a000005 	beq	10478c <ueth_device_init+0x64>
  104774:	e3a0205b 	mov	r2, #91	; 0x5b
  104778:	e3041f94 	movw	r1, #20372	; 0x4f94
  10477c:	e3401014 	movt	r1, #20
  104780:	e3040f18 	movw	r0, #20248	; 0x4f18
  104784:	e3400014 	movt	r0, #20
  104788:	ebfffb82 	bl	103598 <rt_assert_handler>

    /* get device_init handler */
    if (DEV_INIT != RT_NULL)
  10478c:	e51b3010 	ldr	r3, [fp, #-16]
  104790:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  104794:	e5933000 	ldr	r3, [r3]
  104798:	e3530000 	cmp	r3, #0
  10479c:	0a00001a 	beq	10480c <ueth_device_init+0xe4>
    {
        if (!(dev->flag & RT_DEVICE_FLAG_ACTIVATED))
  1047a0:	e51b3010 	ldr	r3, [fp, #-16]
  1047a4:	e1d331bc 	ldrh	r3, [r3, #28]
  1047a8:	e2033010 	and	r3, r3, #16
  1047ac:	e3530000 	cmp	r3, #0
  1047b0:	1a000015 	bne	10480c <ueth_device_init+0xe4>
        {
            result = DEV_INIT(dev);
  1047b4:	e51b3010 	ldr	r3, [fp, #-16]
  1047b8:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  1047bc:	e5933000 	ldr	r3, [r3]
  1047c0:	e51b0010 	ldr	r0, [fp, #-16]
  1047c4:	e12fff33 	blx	r3
  1047c8:	e50b0008 	str	r0, [fp, #-8]
            if (result != RT_EOK)
  1047cc:	e51b3008 	ldr	r3, [fp, #-8]
  1047d0:	e3530000 	cmp	r3, #0
  1047d4:	0a000006 	beq	1047f4 <ueth_device_init+0xcc>
            {
                printf("To initialize device:%s failed. The error code is %ld\n",
                           dev->parent.name, result);
  1047d8:	e51b3010 	ldr	r3, [fp, #-16]
                printf("To initialize device:%s failed. The error code is %ld\n",
  1047dc:	e51b2008 	ldr	r2, [fp, #-8]
  1047e0:	e1a01003 	mov	r1, r3
  1047e4:	e3040f44 	movw	r0, #20292	; 0x4f44
  1047e8:	e3400014 	movt	r0, #20
  1047ec:	eb00e50f 	bl	13dc30 <printf>
  1047f0:	ea000005 	b	10480c <ueth_device_init+0xe4>
            }
            else
            {
                dev->flag |= RT_DEVICE_FLAG_ACTIVATED;
  1047f4:	e51b3010 	ldr	r3, [fp, #-16]
  1047f8:	e1d331bc 	ldrh	r3, [r3, #28]
  1047fc:	e3833010 	orr	r3, r3, #16
  104800:	e6ff2073 	uxth	r2, r3
  104804:	e51b3010 	ldr	r3, [fp, #-16]
  104808:	e1c321bc 	strh	r2, [r3, #28]
            }
        }
    }

    return result;
  10480c:	e51b3008 	ldr	r3, [fp, #-8]
}
  104810:	e1a00003 	mov	r0, r3
  104814:	e24bd004 	sub	sp, fp, #4
  104818:	e8bd8800 	pop	{fp, pc}

0010481c <ueth_device_close>:

rt_err_t ueth_device_close(rt_device_t dev)
{
  10481c:	e92d4800 	push	{fp, lr}
  104820:	e28db004 	add	fp, sp, #4
  104824:	e24dd010 	sub	sp, sp, #16
  104828:	e50b0010 	str	r0, [fp, #-16]
    rt_err_t result = RT_EOK;
  10482c:	e3a03000 	mov	r3, #0
  104830:	e50b3008 	str	r3, [fp, #-8]

    RT_ASSERT(dev != RT_NULL);
  104834:	e51b3010 	ldr	r3, [fp, #-16]
  104838:	e3530000 	cmp	r3, #0
  10483c:	1a000005 	bne	104858 <ueth_device_close+0x3c>
  104840:	e3a02076 	mov	r2, #118	; 0x76
  104844:	e3041fa8 	movw	r1, #20392	; 0x4fa8
  104848:	e3401014 	movt	r1, #20
  10484c:	e3040f08 	movw	r0, #20232	; 0x4f08
  104850:	e3400014 	movt	r0, #20
  104854:	ebfffb4f 	bl	103598 <rt_assert_handler>
    RT_ASSERT(dev->parent.type == RT_Object_Class_Device);
  104858:	e51b3010 	ldr	r3, [fp, #-16]
  10485c:	e5d33008 	ldrb	r3, [r3, #8]
  104860:	e3530009 	cmp	r3, #9
  104864:	0a000005 	beq	104880 <ueth_device_close+0x64>
  104868:	e3a02077 	mov	r2, #119	; 0x77
  10486c:	e3041fa8 	movw	r1, #20392	; 0x4fa8
  104870:	e3401014 	movt	r1, #20
  104874:	e3040f18 	movw	r0, #20248	; 0x4f18
  104878:	e3400014 	movt	r0, #20
  10487c:	ebfffb45 	bl	103598 <rt_assert_handler>

    if (dev->ref_count == 0)
  104880:	e51b3010 	ldr	r3, [fp, #-16]
  104884:	e5d33020 	ldrb	r3, [r3, #32]
  104888:	e3530000 	cmp	r3, #0
  10488c:	1a000001 	bne	104898 <ueth_device_close+0x7c>
        return -RT_ERROR;
  104890:	e3e03000 	mvn	r3, #0
  104894:	ea000020 	b	10491c <ueth_device_close+0x100>

    dev->ref_count--;
  104898:	e51b3010 	ldr	r3, [fp, #-16]
  10489c:	e5d33020 	ldrb	r3, [r3, #32]
  1048a0:	e2433001 	sub	r3, r3, #1
  1048a4:	e6ef2073 	uxtb	r2, r3
  1048a8:	e51b3010 	ldr	r3, [fp, #-16]
  1048ac:	e5c32020 	strb	r2, [r3, #32]

    if (dev->ref_count != 0)
  1048b0:	e51b3010 	ldr	r3, [fp, #-16]
  1048b4:	e5d33020 	ldrb	r3, [r3, #32]
  1048b8:	e3530000 	cmp	r3, #0
  1048bc:	0a000001 	beq	1048c8 <ueth_device_close+0xac>
        return RT_EOK;
  1048c0:	e3a03000 	mov	r3, #0
  1048c4:	ea000014 	b	10491c <ueth_device_close+0x100>

    /* call device_close interface */
    if (DEV_CLOSE != RT_NULL)
  1048c8:	e51b3010 	ldr	r3, [fp, #-16]
  1048cc:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  1048d0:	e5933008 	ldr	r3, [r3, #8]
  1048d4:	e3530000 	cmp	r3, #0
  1048d8:	0a000005 	beq	1048f4 <ueth_device_close+0xd8>
    {
        result = DEV_CLOSE(dev);
  1048dc:	e51b3010 	ldr	r3, [fp, #-16]
  1048e0:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  1048e4:	e5933008 	ldr	r3, [r3, #8]
  1048e8:	e51b0010 	ldr	r0, [fp, #-16]
  1048ec:	e12fff33 	blx	r3
  1048f0:	e50b0008 	str	r0, [fp, #-8]
    }

    /* set open flag */
    if (result == RT_EOK || result == -RT_ENOSYS)
  1048f4:	e51b3008 	ldr	r3, [fp, #-8]
  1048f8:	e3530000 	cmp	r3, #0
  1048fc:	0a000002 	beq	10490c <ueth_device_close+0xf0>
  104900:	e51b3008 	ldr	r3, [fp, #-8]
  104904:	e3730006 	cmn	r3, #6
  104908:	1a000002 	bne	104918 <ueth_device_close+0xfc>
        dev->open_flag = RT_DEVICE_OFLAG_CLOSE;
  10490c:	e51b3010 	ldr	r3, [fp, #-16]
  104910:	e3a02000 	mov	r2, #0
  104914:	e1c321be 	strh	r2, [r3, #30]

    return result;
  104918:	e51b3008 	ldr	r3, [fp, #-8]
}
  10491c:	e1a00003 	mov	r0, r3
  104920:	e24bd004 	sub	sp, fp, #4
  104924:	e8bd8800 	pop	{fp, pc}

00104928 <ueth_device_control>:

rt_err_t ueth_device_control(rt_device_t dev, int cmd, void *arg)
{
  104928:	e92d4800 	push	{fp, lr}
  10492c:	e28db004 	add	fp, sp, #4
  104930:	e24dd010 	sub	sp, sp, #16
  104934:	e50b0008 	str	r0, [fp, #-8]
  104938:	e50b100c 	str	r1, [fp, #-12]
  10493c:	e50b2010 	str	r2, [fp, #-16]
    RT_ASSERT(dev != RT_NULL);
  104940:	e51b3008 	ldr	r3, [fp, #-8]
  104944:	e3530000 	cmp	r3, #0
  104948:	1a000005 	bne	104964 <ueth_device_control+0x3c>
  10494c:	e3a02090 	mov	r2, #144	; 0x90
  104950:	e3041fbc 	movw	r1, #20412	; 0x4fbc
  104954:	e3401014 	movt	r1, #20
  104958:	e3040f08 	movw	r0, #20232	; 0x4f08
  10495c:	e3400014 	movt	r0, #20
  104960:	ebfffb0c 	bl	103598 <rt_assert_handler>
    RT_ASSERT(dev->parent.type == RT_Object_Class_Device);
  104964:	e51b3008 	ldr	r3, [fp, #-8]
  104968:	e5d33008 	ldrb	r3, [r3, #8]
  10496c:	e3530009 	cmp	r3, #9
  104970:	0a000005 	beq	10498c <ueth_device_control+0x64>
  104974:	e3a02091 	mov	r2, #145	; 0x91
  104978:	e3041fbc 	movw	r1, #20412	; 0x4fbc
  10497c:	e3401014 	movt	r1, #20
  104980:	e3040f18 	movw	r0, #20248	; 0x4f18
  104984:	e3400014 	movt	r0, #20
  104988:	ebfffb02 	bl	103598 <rt_assert_handler>

    /* call device_write interface */
    if (DEV_CONTROL != RT_NULL)
  10498c:	e51b3008 	ldr	r3, [fp, #-8]
  104990:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  104994:	e5933014 	ldr	r3, [r3, #20]
  104998:	e3530000 	cmp	r3, #0
  10499c:	0a000008 	beq	1049c4 <ueth_device_control+0x9c>
    {
        return DEV_CONTROL(dev, cmd, arg);
  1049a0:	e51b3008 	ldr	r3, [fp, #-8]
  1049a4:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  1049a8:	e5933014 	ldr	r3, [r3, #20]
  1049ac:	e51b2010 	ldr	r2, [fp, #-16]
  1049b0:	e51b100c 	ldr	r1, [fp, #-12]
  1049b4:	e51b0008 	ldr	r0, [fp, #-8]
  1049b8:	e12fff33 	blx	r3
  1049bc:	e1a03000 	mov	r3, r0
  1049c0:	ea000000 	b	1049c8 <ueth_device_control+0xa0>
    }

    return -RT_ENOSYS;
  1049c4:	e3e03005 	mvn	r3, #5
  1049c8:	e1a00003 	mov	r0, r3
  1049cc:	e24bd004 	sub	sp, fp, #4
  1049d0:	e8bd8800 	pop	{fp, pc}

001049d4 <rt_slist_init>:
 * @brief initialize a single list
 *
 * @param l the single list to be initialized
 */
rt_inline void rt_slist_init(rt_slist_t *l)
{
  1049d4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1049d8:	e28db000 	add	fp, sp, #0
  1049dc:	e24dd00c 	sub	sp, sp, #12
  1049e0:	e50b0008 	str	r0, [fp, #-8]
    l->next = RT_NULL;
  1049e4:	e51b3008 	ldr	r3, [fp, #-8]
  1049e8:	e3a02000 	mov	r2, #0
  1049ec:	e5832000 	str	r2, [r3]
}
  1049f0:	e320f000 	nop	{0}
  1049f4:	e28bd000 	add	sp, fp, #0
  1049f8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1049fc:	e12fff1e 	bx	lr

00104a00 <rt_slist_append>:

rt_inline void rt_slist_append(rt_slist_t *l, rt_slist_t *n)
{
  104a00:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  104a04:	e28db000 	add	fp, sp, #0
  104a08:	e24dd014 	sub	sp, sp, #20
  104a0c:	e50b0010 	str	r0, [fp, #-16]
  104a10:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    struct rt_slist_node *node;

    node = l;
  104a14:	e51b3010 	ldr	r3, [fp, #-16]
  104a18:	e50b3008 	str	r3, [fp, #-8]
    while (node->next) node = node->next;
  104a1c:	ea000002 	b	104a2c <rt_slist_append+0x2c>
  104a20:	e51b3008 	ldr	r3, [fp, #-8]
  104a24:	e5933000 	ldr	r3, [r3]
  104a28:	e50b3008 	str	r3, [fp, #-8]
  104a2c:	e51b3008 	ldr	r3, [fp, #-8]
  104a30:	e5933000 	ldr	r3, [r3]
  104a34:	e3530000 	cmp	r3, #0
  104a38:	1afffff8 	bne	104a20 <rt_slist_append+0x20>

    /* append the node to the tail */
    node->next = n;
  104a3c:	e51b3008 	ldr	r3, [fp, #-8]
  104a40:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  104a44:	e5832000 	str	r2, [r3]
    n->next = RT_NULL;
  104a48:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  104a4c:	e3a02000 	mov	r2, #0
  104a50:	e5832000 	str	r2, [r3]
}
  104a54:	e320f000 	nop	{0}
  104a58:	e28bd000 	add	sp, fp, #0
  104a5c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  104a60:	e12fff1e 	bx	lr

00104a64 <rt_slist_remove>:

    return len;
}

rt_inline rt_slist_t *rt_slist_remove(rt_slist_t *l, rt_slist_t *n)
{
  104a64:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  104a68:	e28db000 	add	fp, sp, #0
  104a6c:	e24dd014 	sub	sp, sp, #20
  104a70:	e50b0010 	str	r0, [fp, #-16]
  104a74:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    /* remove slist head */
    struct rt_slist_node *node = l;
  104a78:	e51b3010 	ldr	r3, [fp, #-16]
  104a7c:	e50b3008 	str	r3, [fp, #-8]
    while (node->next && node->next != n) node = node->next;
  104a80:	ea000002 	b	104a90 <rt_slist_remove+0x2c>
  104a84:	e51b3008 	ldr	r3, [fp, #-8]
  104a88:	e5933000 	ldr	r3, [r3]
  104a8c:	e50b3008 	str	r3, [fp, #-8]
  104a90:	e51b3008 	ldr	r3, [fp, #-8]
  104a94:	e5933000 	ldr	r3, [r3]
  104a98:	e3530000 	cmp	r3, #0
  104a9c:	0a000004 	beq	104ab4 <rt_slist_remove+0x50>
  104aa0:	e51b3008 	ldr	r3, [fp, #-8]
  104aa4:	e5933000 	ldr	r3, [r3]
  104aa8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  104aac:	e1520003 	cmp	r2, r3
  104ab0:	1afffff3 	bne	104a84 <rt_slist_remove+0x20>

    /* remove node */
    if (node->next != (rt_slist_t *)0) node->next = node->next->next;
  104ab4:	e51b3008 	ldr	r3, [fp, #-8]
  104ab8:	e5933000 	ldr	r3, [r3]
  104abc:	e3530000 	cmp	r3, #0
  104ac0:	0a000004 	beq	104ad8 <rt_slist_remove+0x74>
  104ac4:	e51b3008 	ldr	r3, [fp, #-8]
  104ac8:	e5933000 	ldr	r3, [r3]
  104acc:	e5932000 	ldr	r2, [r3]
  104ad0:	e51b3008 	ldr	r3, [fp, #-8]
  104ad4:	e5832000 	str	r2, [r3]

    return l;
  104ad8:	e51b3010 	ldr	r3, [fp, #-16]
}
  104adc:	e1a00003 	mov	r0, r3
  104ae0:	e28bd000 	add	sp, fp, #0
  104ae4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  104ae8:	e12fff1e 	bx	lr

00104aec <rt_slist_next>:

    return l;
}

rt_inline rt_slist_t *rt_slist_next(rt_slist_t *n)
{
  104aec:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  104af0:	e28db000 	add	fp, sp, #0
  104af4:	e24dd00c 	sub	sp, sp, #12
  104af8:	e50b0008 	str	r0, [fp, #-8]
    return n->next;
  104afc:	e51b3008 	ldr	r3, [fp, #-8]
  104b00:	e5933000 	ldr	r3, [r3]
}
  104b04:	e1a00003 	mov	r0, r3
  104b08:	e28bd000 	add	sp, fp, #0
  104b0c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  104b10:	e12fff1e 	bx	lr

00104b14 <netdev_register>:
 *
 * @return  0: registered successfully
 *         -1: registered failed
 */
int netdev_register(struct netdev *netdev, const char *name, void *user_data)
{
  104b14:	e92d4810 	push	{r4, fp, lr}
  104b18:	e28db008 	add	fp, sp, #8
  104b1c:	e24dd01c 	sub	sp, sp, #28
  104b20:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  104b24:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  104b28:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
    // rt_base_t level;
    uint16_t flags_mask;
    int index;

    RT_ASSERT(netdev);
  104b2c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  104b30:	e3530000 	cmp	r3, #0
  104b34:	1a000005 	bne	104b50 <netdev_register+0x3c>
  104b38:	e3a02032 	mov	r2, #50	; 0x32
  104b3c:	e3051330 	movw	r1, #21296	; 0x5330
  104b40:	e3401014 	movt	r1, #20
  104b44:	e3040fd0 	movw	r0, #20432	; 0x4fd0
  104b48:	e3400014 	movt	r0, #20
  104b4c:	ebfffa91 	bl	103598 <rt_assert_handler>
    RT_ASSERT(name);
  104b50:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  104b54:	e3530000 	cmp	r3, #0
  104b58:	1a000005 	bne	104b74 <netdev_register+0x60>
  104b5c:	e3a02033 	mov	r2, #51	; 0x33
  104b60:	e3051330 	movw	r1, #21296	; 0x5330
  104b64:	e3401014 	movt	r1, #20
  104b68:	e3040fd8 	movw	r0, #20440	; 0x4fd8
  104b6c:	e3400014 	movt	r0, #20
  104b70:	ebfffa88 	bl	103598 <rt_assert_handler>

    /* clean network interface device */
    flags_mask = NETDEV_FLAG_UP | NETDEV_FLAG_LINK_UP | NETDEV_FLAG_INTERNET_UP | NETDEV_FLAG_DHCP;
  104b74:	e3003185 	movw	r3, #389	; 0x185
  104b78:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
    netdev->flags &= ~flags_mask;
  104b7c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  104b80:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  104b84:	e6bf2073 	sxth	r2, r3
  104b88:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  104b8c:	e1e03003 	mvn	r3, r3
  104b90:	e6bf3073 	sxth	r3, r3
  104b94:	e0033002 	and	r3, r3, r2
  104b98:	e6bf3073 	sxth	r3, r3
  104b9c:	e6ff2073 	uxth	r2, r3
  104ba0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  104ba4:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a

    ip_addr_set_zero(&(netdev->ip_addr));
  104ba8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  104bac:	e3a02000 	mov	r2, #0
  104bb0:	e583200c 	str	r2, [r3, #12]
    ip_addr_set_zero(&(netdev->netmask));
  104bb4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  104bb8:	e3a02000 	mov	r2, #0
  104bbc:	e5832010 	str	r2, [r3, #16]
    ip_addr_set_zero(&(netdev->gw));
  104bc0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  104bc4:	e3a02000 	mov	r2, #0
  104bc8:	e5832014 	str	r2, [r3, #20]
    {
        ip_addr_set_zero(&(netdev->ip6_addr[index]));
        IP_SET_TYPE_VAL(netdev->ip_addr, IPADDR_TYPE_V6);
    }
#endif /* NETDEV_IPV6 */
    for (index = 0; index < NETDEV_DNS_SERVERS_NUM; index++)
  104bcc:	e3a03000 	mov	r3, #0
  104bd0:	e50b3010 	str	r3, [fp, #-16]
  104bd4:	ea000007 	b	104bf8 <netdev_register+0xe4>
    {
        ip_addr_set_zero(&(netdev->dns_servers[index]));
  104bd8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  104bdc:	e51b2010 	ldr	r2, [fp, #-16]
  104be0:	e2822006 	add	r2, r2, #6
  104be4:	e3a01000 	mov	r1, #0
  104be8:	e7831102 	str	r1, [r3, r2, lsl #2]
    for (index = 0; index < NETDEV_DNS_SERVERS_NUM; index++)
  104bec:	e51b3010 	ldr	r3, [fp, #-16]
  104bf0:	e2833001 	add	r3, r3, #1
  104bf4:	e50b3010 	str	r3, [fp, #-16]
  104bf8:	e51b3010 	ldr	r3, [fp, #-16]
  104bfc:	e3530001 	cmp	r3, #1
  104c00:	9afffff4 	bls	104bd8 <netdev_register+0xc4>
        IP_SET_TYPE_VAL(netdev->ip_addr, IPADDR_TYPE_V4);
    }
    netdev->status_callback = RT_NULL;
  104c04:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  104c08:	e3a02000 	mov	r2, #0
  104c0c:	e5832034 	str	r2, [r3, #52]	; 0x34
    netdev->addr_callback = RT_NULL;
  104c10:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  104c14:	e3a02000 	mov	r2, #0
  104c18:	e5832038 	str	r2, [r3, #56]	; 0x38

    /* fill network interface device */
    rt_strncpy(netdev->name, name, rt_strlen(name));
  104c1c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  104c20:	e2834004 	add	r4, r3, #4
  104c24:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  104c28:	ebfff974 	bl	103200 <rt_strlen>
  104c2c:	e1a03000 	mov	r3, r0
  104c30:	e1a02003 	mov	r2, r3
  104c34:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  104c38:	e1a00004 	mov	r0, r4
  104c3c:	ebfff987 	bl	103260 <rt_strncpy>
    netdev->user_data = user_data;
  104c40:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  104c44:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  104c48:	e5832040 	str	r2, [r3, #64]	; 0x40

    /* initialize current network interface device single list */
    rt_slist_init(&(netdev->list));
  104c4c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  104c50:	e1a00003 	mov	r0, r3
  104c54:	ebffff5e 	bl	1049d4 <rt_slist_init>

    // level = rt_hw_interrupt_disable();

    if (netdev_list == RT_NULL)
  104c58:	e30e3ce8 	movw	r3, #60648	; 0xece8
  104c5c:	e3403014 	movt	r3, #20
  104c60:	e5933000 	ldr	r3, [r3]
  104c64:	e3530000 	cmp	r3, #0
  104c68:	1a000008 	bne	104c90 <netdev_register+0x17c>
    {
        netdev_list = netdev;
  104c6c:	e30e3ce8 	movw	r3, #60648	; 0xece8
  104c70:	e3403014 	movt	r3, #20
  104c74:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  104c78:	e5832000 	str	r2, [r3]
        netdev_default = netdev;
  104c7c:	e30e3ce4 	movw	r3, #60644	; 0xece4
  104c80:	e3403014 	movt	r3, #20
  104c84:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  104c88:	e5832000 	str	r2, [r3]
  104c8c:	ea000007 	b	104cb0 <netdev_register+0x19c>
    }
    else
    {
        /* tail insertion */
        rt_slist_append(&(netdev_list->list), &(netdev->list));
  104c90:	e30e3ce8 	movw	r3, #60648	; 0xece8
  104c94:	e3403014 	movt	r3, #20
  104c98:	e5933000 	ldr	r3, [r3]
  104c9c:	e1a02003 	mov	r2, r3
  104ca0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  104ca4:	e1a01003 	mov	r1, r3
  104ca8:	e1a00002 	mov	r0, r2
  104cac:	ebffff53 	bl	104a00 <rt_slist_append>
    }

    // rt_hw_interrupt_enable(level);

    return RT_EOK;
  104cb0:	e3a03000 	mov	r3, #0
}
  104cb4:	e1a00003 	mov	r0, r3
  104cb8:	e24bd008 	sub	sp, fp, #8
  104cbc:	e8bd8810 	pop	{r4, fp, pc}

00104cc0 <netdev_unregister>:
 *
 * @return  0: unregistered successfully
 *         -1: unregistered failed
 */
int netdev_unregister(struct netdev *netdev)
{
  104cc0:	e92d4800 	push	{fp, lr}
  104cc4:	e28db004 	add	fp, sp, #4
  104cc8:	e24dd010 	sub	sp, sp, #16
  104ccc:	e50b0010 	str	r0, [fp, #-16]
    // rt_base_t level;
    rt_slist_t *node = RT_NULL;
  104cd0:	e3a03000 	mov	r3, #0
  104cd4:	e50b3008 	str	r3, [fp, #-8]
    struct netdev *cur_netdev = RT_NULL;
  104cd8:	e3a03000 	mov	r3, #0
  104cdc:	e50b300c 	str	r3, [fp, #-12]

    RT_ASSERT(netdev);
  104ce0:	e51b3010 	ldr	r3, [fp, #-16]
  104ce4:	e3530000 	cmp	r3, #0
  104ce8:	1a000005 	bne	104d04 <netdev_unregister+0x44>
  104cec:	e3a02077 	mov	r2, #119	; 0x77
  104cf0:	e3051340 	movw	r1, #21312	; 0x5340
  104cf4:	e3401014 	movt	r1, #20
  104cf8:	e3040fd0 	movw	r0, #20432	; 0x4fd0
  104cfc:	e3400014 	movt	r0, #20
  104d00:	ebfffa24 	bl	103598 <rt_assert_handler>

    if (netdev_list == RT_NULL)
  104d04:	e30e3ce8 	movw	r3, #60648	; 0xece8
  104d08:	e3403014 	movt	r3, #20
  104d0c:	e5933000 	ldr	r3, [r3]
  104d10:	e3530000 	cmp	r3, #0
  104d14:	1a000001 	bne	104d20 <netdev_unregister+0x60>
    {
        return -RT_ERROR;
  104d18:	e3e03000 	mvn	r3, #0
  104d1c:	ea000045 	b	104e38 <netdev_unregister+0x178>
    }

    // level = rt_hw_interrupt_disable();

    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  104d20:	e30e3ce8 	movw	r3, #60648	; 0xece8
  104d24:	e3403014 	movt	r3, #20
  104d28:	e5933000 	ldr	r3, [r3]
  104d2c:	e50b3008 	str	r3, [fp, #-8]
  104d30:	ea000030 	b	104df8 <netdev_unregister+0x138>
    {
        cur_netdev = rt_slist_entry(node, struct netdev, list);
  104d34:	e51b3008 	ldr	r3, [fp, #-8]
  104d38:	e50b300c 	str	r3, [fp, #-12]
        if (cur_netdev == netdev)
  104d3c:	e51b200c 	ldr	r2, [fp, #-12]
  104d40:	e51b3010 	ldr	r3, [fp, #-16]
  104d44:	e1520003 	cmp	r2, r3
  104d48:	1a000027 	bne	104dec <netdev_unregister+0x12c>
        {
            /* find this network interface device in network interface device list */
            if (netdev_list == netdev && rt_slist_next(&netdev_list->list) == RT_NULL)
  104d4c:	e30e3ce8 	movw	r3, #60648	; 0xece8
  104d50:	e3403014 	movt	r3, #20
  104d54:	e5933000 	ldr	r3, [r3]
  104d58:	e51b2010 	ldr	r2, [fp, #-16]
  104d5c:	e1520003 	cmp	r2, r3
  104d60:	1a00000c 	bne	104d98 <netdev_unregister+0xd8>
  104d64:	e30e3ce8 	movw	r3, #60648	; 0xece8
  104d68:	e3403014 	movt	r3, #20
  104d6c:	e5933000 	ldr	r3, [r3]
  104d70:	e1a00003 	mov	r0, r3
  104d74:	ebffff5c 	bl	104aec <rt_slist_next>
  104d78:	e1a03000 	mov	r3, r0
  104d7c:	e3530000 	cmp	r3, #0
  104d80:	1a000004 	bne	104d98 <netdev_unregister+0xd8>
            {
                netdev_list = RT_NULL;
  104d84:	e30e3ce8 	movw	r3, #60648	; 0xece8
  104d88:	e3403014 	movt	r3, #20
  104d8c:	e3a02000 	mov	r2, #0
  104d90:	e5832000 	str	r2, [r3]
  104d94:	ea000007 	b	104db8 <netdev_unregister+0xf8>
            }
            else
            {
                rt_slist_remove(&(netdev_list->list), &(cur_netdev->list));
  104d98:	e30e3ce8 	movw	r3, #60648	; 0xece8
  104d9c:	e3403014 	movt	r3, #20
  104da0:	e5933000 	ldr	r3, [r3]
  104da4:	e1a02003 	mov	r2, r3
  104da8:	e51b300c 	ldr	r3, [fp, #-12]
  104dac:	e1a01003 	mov	r1, r3
  104db0:	e1a00002 	mov	r0, r2
  104db4:	ebffff2a 	bl	104a64 <rt_slist_remove>
            }
            if (netdev_default == netdev)
  104db8:	e30e3ce4 	movw	r3, #60644	; 0xece4
  104dbc:	e3403014 	movt	r3, #20
  104dc0:	e5933000 	ldr	r3, [r3]
  104dc4:	e51b2010 	ldr	r2, [fp, #-16]
  104dc8:	e1520003 	cmp	r2, r3
  104dcc:	1a00000d 	bne	104e08 <netdev_unregister+0x148>
            {
                netdev_default = netdev_list;
  104dd0:	e30e3ce8 	movw	r3, #60648	; 0xece8
  104dd4:	e3403014 	movt	r3, #20
  104dd8:	e5932000 	ldr	r2, [r3]
  104ddc:	e30e3ce4 	movw	r3, #60644	; 0xece4
  104de0:	e3403014 	movt	r3, #20
  104de4:	e5832000 	str	r2, [r3]
            }
            break;
  104de8:	ea000006 	b	104e08 <netdev_unregister+0x148>
    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  104dec:	e51b0008 	ldr	r0, [fp, #-8]
  104df0:	ebffff3d 	bl	104aec <rt_slist_next>
  104df4:	e50b0008 	str	r0, [fp, #-8]
  104df8:	e51b3008 	ldr	r3, [fp, #-8]
  104dfc:	e3530000 	cmp	r3, #0
  104e00:	1affffcb 	bne	104d34 <netdev_unregister+0x74>
  104e04:	ea000000 	b	104e0c <netdev_unregister+0x14c>
            break;
  104e08:	e320f000 	nop	{0}
        }
    }
    // rt_hw_interrupt_enable(level);

    if (cur_netdev == netdev)
  104e0c:	e51b200c 	ldr	r2, [fp, #-12]
  104e10:	e51b3010 	ldr	r3, [fp, #-16]
  104e14:	e1520003 	cmp	r2, r3
  104e18:	1a000005 	bne	104e34 <netdev_unregister+0x174>
    {
#ifdef RT_USING_SAL
        extern int sal_netdev_cleanup(struct netdev *netdev);
        sal_netdev_cleanup(netdev);
  104e1c:	e51b0010 	ldr	r0, [fp, #-16]
  104e20:	eb000823 	bl	106eb4 <sal_netdev_cleanup>
#endif
        rt_memset(netdev, 0, sizeof(*netdev));
  104e24:	e3a02044 	mov	r2, #68	; 0x44
  104e28:	e3a01000 	mov	r1, #0
  104e2c:	e51b0010 	ldr	r0, [fp, #-16]
  104e30:	ebfff924 	bl	1032c8 <rt_memset>
    }

    return -RT_ERROR;
  104e34:	e3e03000 	mvn	r3, #0
}
  104e38:	e1a00003 	mov	r0, r3
  104e3c:	e24bd004 	sub	sp, fp, #4
  104e40:	e8bd8800 	pop	{fp, pc}

00104e44 <netdev_get_first_by_flags>:
 *
 * @return != NULL: network interface device object
 *            NULL: get failed
 */
struct netdev *netdev_get_first_by_flags(uint16_t flags)
{
  104e44:	e92d4800 	push	{fp, lr}
  104e48:	e28db004 	add	fp, sp, #4
  104e4c:	e24dd010 	sub	sp, sp, #16
  104e50:	e1a03000 	mov	r3, r0
  104e54:	e14b30be 	strh	r3, [fp, #-14]
    // rt_base_t level;
    rt_slist_t *node = RT_NULL;
  104e58:	e3a03000 	mov	r3, #0
  104e5c:	e50b3008 	str	r3, [fp, #-8]
    struct netdev *netdev = RT_NULL;
  104e60:	e3a03000 	mov	r3, #0
  104e64:	e50b300c 	str	r3, [fp, #-12]

    if (netdev_list == RT_NULL)
  104e68:	e30e3ce8 	movw	r3, #60648	; 0xece8
  104e6c:	e3403014 	movt	r3, #20
  104e70:	e5933000 	ldr	r3, [r3]
  104e74:	e3530000 	cmp	r3, #0
  104e78:	1a000001 	bne	104e84 <netdev_get_first_by_flags+0x40>
    {
        return RT_NULL;
  104e7c:	e3a03000 	mov	r3, #0
  104e80:	ea000019 	b	104eec <netdev_get_first_by_flags+0xa8>
    }

    // level = rt_hw_interrupt_disable();

    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  104e84:	e30e3ce8 	movw	r3, #60648	; 0xece8
  104e88:	e3403014 	movt	r3, #20
  104e8c:	e5933000 	ldr	r3, [r3]
  104e90:	e50b3008 	str	r3, [fp, #-8]
  104e94:	ea000010 	b	104edc <netdev_get_first_by_flags+0x98>
    {
        netdev = rt_slist_entry(node, struct netdev, list);
  104e98:	e51b3008 	ldr	r3, [fp, #-8]
  104e9c:	e50b300c 	str	r3, [fp, #-12]
        if (netdev && (netdev->flags & flags) != 0)
  104ea0:	e51b300c 	ldr	r3, [fp, #-12]
  104ea4:	e3530000 	cmp	r3, #0
  104ea8:	0a000008 	beq	104ed0 <netdev_get_first_by_flags+0x8c>
  104eac:	e51b300c 	ldr	r3, [fp, #-12]
  104eb0:	e1d322ba 	ldrh	r2, [r3, #42]	; 0x2a
  104eb4:	e15b30be 	ldrh	r3, [fp, #-14]
  104eb8:	e0033002 	and	r3, r3, r2
  104ebc:	e6ff3073 	uxth	r3, r3
  104ec0:	e3530000 	cmp	r3, #0
  104ec4:	0a000001 	beq	104ed0 <netdev_get_first_by_flags+0x8c>
        {
            // rt_hw_interrupt_enable(level);
            return netdev;
  104ec8:	e51b300c 	ldr	r3, [fp, #-12]
  104ecc:	ea000006 	b	104eec <netdev_get_first_by_flags+0xa8>
    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  104ed0:	e51b0008 	ldr	r0, [fp, #-8]
  104ed4:	ebffff04 	bl	104aec <rt_slist_next>
  104ed8:	e50b0008 	str	r0, [fp, #-8]
  104edc:	e51b3008 	ldr	r3, [fp, #-8]
  104ee0:	e3530000 	cmp	r3, #0
  104ee4:	1affffeb 	bne	104e98 <netdev_get_first_by_flags+0x54>
        }
    }

    // rt_hw_interrupt_enable(level);

    return RT_NULL;
  104ee8:	e3a03000 	mov	r3, #0
}
  104eec:	e1a00003 	mov	r0, r3
  104ef0:	e24bd004 	sub	sp, fp, #4
  104ef4:	e8bd8800 	pop	{fp, pc}

00104ef8 <netdev_get_by_ipaddr>:
 *
 * @return != NULL: network interface device object
 *            NULL: get failed
 */
struct netdev *netdev_get_by_ipaddr(ip_addr_t *ip_addr)
{
  104ef8:	e92d4800 	push	{fp, lr}
  104efc:	e28db004 	add	fp, sp, #4
  104f00:	e24dd010 	sub	sp, sp, #16
  104f04:	e50b0010 	str	r0, [fp, #-16]
    // rt_base_t level;
    rt_slist_t *node = RT_NULL;
  104f08:	e3a03000 	mov	r3, #0
  104f0c:	e50b3008 	str	r3, [fp, #-8]
    struct netdev *netdev = RT_NULL;
  104f10:	e3a03000 	mov	r3, #0
  104f14:	e50b300c 	str	r3, [fp, #-12]

    if (netdev_list == RT_NULL)
  104f18:	e30e3ce8 	movw	r3, #60648	; 0xece8
  104f1c:	e3403014 	movt	r3, #20
  104f20:	e5933000 	ldr	r3, [r3]
  104f24:	e3530000 	cmp	r3, #0
  104f28:	1a000001 	bne	104f34 <netdev_get_by_ipaddr+0x3c>
    {
        return RT_NULL;
  104f2c:	e3a03000 	mov	r3, #0
  104f30:	ea000018 	b	104f98 <netdev_get_by_ipaddr+0xa0>
    }

    // level = rt_hw_interrupt_disable();

    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  104f34:	e30e3ce8 	movw	r3, #60648	; 0xece8
  104f38:	e3403014 	movt	r3, #20
  104f3c:	e5933000 	ldr	r3, [r3]
  104f40:	e50b3008 	str	r3, [fp, #-8]
  104f44:	ea00000f 	b	104f88 <netdev_get_by_ipaddr+0x90>
    {
        netdev = rt_slist_entry(node, struct netdev, list);
  104f48:	e51b3008 	ldr	r3, [fp, #-8]
  104f4c:	e50b300c 	str	r3, [fp, #-12]
        if (netdev && ip_addr_cmp(&(netdev->ip_addr), ip_addr))
  104f50:	e51b300c 	ldr	r3, [fp, #-12]
  104f54:	e3530000 	cmp	r3, #0
  104f58:	0a000007 	beq	104f7c <netdev_get_by_ipaddr+0x84>
  104f5c:	e51b300c 	ldr	r3, [fp, #-12]
  104f60:	e593200c 	ldr	r2, [r3, #12]
  104f64:	e51b3010 	ldr	r3, [fp, #-16]
  104f68:	e5933000 	ldr	r3, [r3]
  104f6c:	e1520003 	cmp	r2, r3
  104f70:	1a000001 	bne	104f7c <netdev_get_by_ipaddr+0x84>
        {
            // rt_hw_interrupt_enable(level);
            return netdev;
  104f74:	e51b300c 	ldr	r3, [fp, #-12]
  104f78:	ea000006 	b	104f98 <netdev_get_by_ipaddr+0xa0>
    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  104f7c:	e51b0008 	ldr	r0, [fp, #-8]
  104f80:	ebfffed9 	bl	104aec <rt_slist_next>
  104f84:	e50b0008 	str	r0, [fp, #-8]
  104f88:	e51b3008 	ldr	r3, [fp, #-8]
  104f8c:	e3530000 	cmp	r3, #0
  104f90:	1affffec 	bne	104f48 <netdev_get_by_ipaddr+0x50>
        }
    }

    // rt_hw_interrupt_enable(level);

    return RT_NULL;
  104f94:	e3a03000 	mov	r3, #0
}
  104f98:	e1a00003 	mov	r0, r3
  104f9c:	e24bd004 	sub	sp, fp, #4
  104fa0:	e8bd8800 	pop	{fp, pc}

00104fa4 <netdev_get_by_name>:
 *
 * @return != NULL: network interface device object
 *            NULL: get failed
 */
struct netdev *netdev_get_by_name(const char *name)
{
  104fa4:	e92d4810 	push	{r4, fp, lr}
  104fa8:	e28db008 	add	fp, sp, #8
  104fac:	e24dd014 	sub	sp, sp, #20
  104fb0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    // rt_base_t level;
    rt_slist_t *node = RT_NULL;
  104fb4:	e3a03000 	mov	r3, #0
  104fb8:	e50b3010 	str	r3, [fp, #-16]
    struct netdev *netdev = RT_NULL;
  104fbc:	e3a03000 	mov	r3, #0
  104fc0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

    if (netdev_list == RT_NULL)
  104fc4:	e30e3ce8 	movw	r3, #60648	; 0xece8
  104fc8:	e3403014 	movt	r3, #20
  104fcc:	e5933000 	ldr	r3, [r3]
  104fd0:	e3530000 	cmp	r3, #0
  104fd4:	1a000001 	bne	104fe0 <netdev_get_by_name+0x3c>
    {
        return RT_NULL;
  104fd8:	e3a03000 	mov	r3, #0
  104fdc:	ea000020 	b	105064 <netdev_get_by_name+0xc0>
    }

    // level = rt_hw_interrupt_disable();

    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  104fe0:	e30e3ce8 	movw	r3, #60648	; 0xece8
  104fe4:	e3403014 	movt	r3, #20
  104fe8:	e5933000 	ldr	r3, [r3]
  104fec:	e50b3010 	str	r3, [fp, #-16]
  104ff0:	ea000017 	b	105054 <netdev_get_by_name+0xb0>
    {
        netdev = rt_slist_entry(node, struct netdev, list);
  104ff4:	e51b3010 	ldr	r3, [fp, #-16]
  104ff8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        if (netdev && (rt_strncmp(netdev->name, name, rt_strlen(netdev->name)) == 0))
  104ffc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105000:	e3530000 	cmp	r3, #0
  105004:	0a00000f 	beq	105048 <netdev_get_by_name+0xa4>
  105008:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10500c:	e2834004 	add	r4, r3, #4
  105010:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105014:	e2833004 	add	r3, r3, #4
  105018:	e1a00003 	mov	r0, r3
  10501c:	ebfff877 	bl	103200 <rt_strlen>
  105020:	e1a03000 	mov	r3, r0
  105024:	e1a02003 	mov	r2, r3
  105028:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  10502c:	e1a00004 	mov	r0, r4
  105030:	ebfff87c 	bl	103228 <rt_strncmp>
  105034:	e1a03000 	mov	r3, r0
  105038:	e3530000 	cmp	r3, #0
  10503c:	1a000001 	bne	105048 <netdev_get_by_name+0xa4>
        {
            // rt_hw_interrupt_enable(level);
            return netdev;
  105040:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105044:	ea000006 	b	105064 <netdev_get_by_name+0xc0>
    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  105048:	e51b0010 	ldr	r0, [fp, #-16]
  10504c:	ebfffea6 	bl	104aec <rt_slist_next>
  105050:	e50b0010 	str	r0, [fp, #-16]
  105054:	e51b3010 	ldr	r3, [fp, #-16]
  105058:	e3530000 	cmp	r3, #0
  10505c:	1affffe4 	bne	104ff4 <netdev_get_by_name+0x50>
        }
    }

    // rt_hw_interrupt_enable(level);

    return RT_NULL;
  105060:	e3a03000 	mov	r3, #0
}
  105064:	e1a00003 	mov	r0, r3
  105068:	e24bd008 	sub	sp, fp, #8
  10506c:	e8bd8810 	pop	{r4, fp, pc}

00105070 <netdev_get_by_family>:
 *
 * @return != NULL: network interface device object
 *            NULL: get failed
 */
struct netdev *netdev_get_by_family(int family)
{
  105070:	e92d4800 	push	{fp, lr}
  105074:	e28db004 	add	fp, sp, #4
  105078:	e24dd018 	sub	sp, sp, #24
  10507c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    // rt_base_t level;
    rt_slist_t *node = RT_NULL;
  105080:	e3a03000 	mov	r3, #0
  105084:	e50b3008 	str	r3, [fp, #-8]
    struct netdev *netdev = RT_NULL;
  105088:	e3a03000 	mov	r3, #0
  10508c:	e50b300c 	str	r3, [fp, #-12]
    struct sal_proto_family *pf = RT_NULL;
  105090:	e3a03000 	mov	r3, #0
  105094:	e50b3010 	str	r3, [fp, #-16]

    if (netdev_list == RT_NULL)
  105098:	e30e3ce8 	movw	r3, #60648	; 0xece8
  10509c:	e3403014 	movt	r3, #20
  1050a0:	e5933000 	ldr	r3, [r3]
  1050a4:	e3530000 	cmp	r3, #0
  1050a8:	1a000001 	bne	1050b4 <netdev_get_by_family+0x44>
    {
        return RT_NULL;
  1050ac:	e3a03000 	mov	r3, #0
  1050b0:	ea000048 	b	1051d8 <netdev_get_by_family+0x168>
    }

    // level = rt_hw_interrupt_disable();

    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  1050b4:	e30e3ce8 	movw	r3, #60648	; 0xece8
  1050b8:	e3403014 	movt	r3, #20
  1050bc:	e5933000 	ldr	r3, [r3]
  1050c0:	e50b3008 	str	r3, [fp, #-8]
  1050c4:	ea00001b 	b	105138 <netdev_get_by_family+0xc8>
    {
        netdev = rt_slist_entry(node, struct netdev, list);
  1050c8:	e51b3008 	ldr	r3, [fp, #-8]
  1050cc:	e50b300c 	str	r3, [fp, #-12]
        pf = (struct sal_proto_family *) netdev->sal_user_data;
  1050d0:	e51b300c 	ldr	r3, [fp, #-12]
  1050d4:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  1050d8:	e50b3010 	str	r3, [fp, #-16]
        if (pf && pf->skt_ops && pf->family == family && netdev_is_up(netdev))
  1050dc:	e51b3010 	ldr	r3, [fp, #-16]
  1050e0:	e3530000 	cmp	r3, #0
  1050e4:	0a000010 	beq	10512c <netdev_get_by_family+0xbc>
  1050e8:	e51b3010 	ldr	r3, [fp, #-16]
  1050ec:	e5933008 	ldr	r3, [r3, #8]
  1050f0:	e3530000 	cmp	r3, #0
  1050f4:	0a00000c 	beq	10512c <netdev_get_by_family+0xbc>
  1050f8:	e51b3010 	ldr	r3, [fp, #-16]
  1050fc:	e5933000 	ldr	r3, [r3]
  105100:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  105104:	e1520003 	cmp	r2, r3
  105108:	1a000007 	bne	10512c <netdev_get_by_family+0xbc>
  10510c:	e51b300c 	ldr	r3, [fp, #-12]
  105110:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  105114:	e2033001 	and	r3, r3, #1
  105118:	e6ef3073 	uxtb	r3, r3
  10511c:	e3530000 	cmp	r3, #0
  105120:	0a000001 	beq	10512c <netdev_get_by_family+0xbc>
        {
            // rt_hw_interrupt_enable(level);
            return netdev;
  105124:	e51b300c 	ldr	r3, [fp, #-12]
  105128:	ea00002a 	b	1051d8 <netdev_get_by_family+0x168>
    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  10512c:	e51b0008 	ldr	r0, [fp, #-8]
  105130:	ebfffe6d 	bl	104aec <rt_slist_next>
  105134:	e50b0008 	str	r0, [fp, #-8]
  105138:	e51b3008 	ldr	r3, [fp, #-8]
  10513c:	e3530000 	cmp	r3, #0
  105140:	1affffe0 	bne	1050c8 <netdev_get_by_family+0x58>
        }
    }

    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  105144:	e30e3ce8 	movw	r3, #60648	; 0xece8
  105148:	e3403014 	movt	r3, #20
  10514c:	e5933000 	ldr	r3, [r3]
  105150:	e50b3008 	str	r3, [fp, #-8]
  105154:	ea00001b 	b	1051c8 <netdev_get_by_family+0x158>
    {
        netdev = rt_slist_entry(node, struct netdev, list);
  105158:	e51b3008 	ldr	r3, [fp, #-8]
  10515c:	e50b300c 	str	r3, [fp, #-12]
        pf = (struct sal_proto_family *) netdev->sal_user_data;
  105160:	e51b300c 	ldr	r3, [fp, #-12]
  105164:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  105168:	e50b3010 	str	r3, [fp, #-16]
        if (pf && pf->skt_ops && pf->sec_family == family && netdev_is_up(netdev))
  10516c:	e51b3010 	ldr	r3, [fp, #-16]
  105170:	e3530000 	cmp	r3, #0
  105174:	0a000010 	beq	1051bc <netdev_get_by_family+0x14c>
  105178:	e51b3010 	ldr	r3, [fp, #-16]
  10517c:	e5933008 	ldr	r3, [r3, #8]
  105180:	e3530000 	cmp	r3, #0
  105184:	0a00000c 	beq	1051bc <netdev_get_by_family+0x14c>
  105188:	e51b3010 	ldr	r3, [fp, #-16]
  10518c:	e5933004 	ldr	r3, [r3, #4]
  105190:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  105194:	e1520003 	cmp	r2, r3
  105198:	1a000007 	bne	1051bc <netdev_get_by_family+0x14c>
  10519c:	e51b300c 	ldr	r3, [fp, #-12]
  1051a0:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1051a4:	e2033001 	and	r3, r3, #1
  1051a8:	e6ef3073 	uxtb	r3, r3
  1051ac:	e3530000 	cmp	r3, #0
  1051b0:	0a000001 	beq	1051bc <netdev_get_by_family+0x14c>
        {
            // rt_hw_interrupt_enable(level);
            return netdev;
  1051b4:	e51b300c 	ldr	r3, [fp, #-12]
  1051b8:	ea000006 	b	1051d8 <netdev_get_by_family+0x168>
    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  1051bc:	e51b0008 	ldr	r0, [fp, #-8]
  1051c0:	ebfffe49 	bl	104aec <rt_slist_next>
  1051c4:	e50b0008 	str	r0, [fp, #-8]
  1051c8:	e51b3008 	ldr	r3, [fp, #-8]
  1051cc:	e3530000 	cmp	r3, #0
  1051d0:	1affffe0 	bne	105158 <netdev_get_by_family+0xe8>
        }
    }

    // rt_hw_interrupt_enable(level);

    return RT_NULL;
  1051d4:	e3a03000 	mov	r3, #0
}
  1051d8:	e1a00003 	mov	r0, r3
  1051dc:	e24bd004 	sub	sp, fp, #4
  1051e0:	e8bd8800 	pop	{fp, pc}

001051e4 <netdev_family_get>:
 * @param netdev network interface device object
 *
 * @return the network interface device family type
 */
int netdev_family_get(struct netdev *netdev)
{
  1051e4:	e92d4800 	push	{fp, lr}
  1051e8:	e28db004 	add	fp, sp, #4
  1051ec:	e24dd008 	sub	sp, sp, #8
  1051f0:	e50b0008 	str	r0, [fp, #-8]
    RT_ASSERT(netdev);
  1051f4:	e51b3008 	ldr	r3, [fp, #-8]
  1051f8:	e3530000 	cmp	r3, #0
  1051fc:	1a000005 	bne	105218 <netdev_family_get+0x34>
  105200:	e300214e 	movw	r2, #334	; 0x14e
  105204:	e3051354 	movw	r1, #21332	; 0x5354
  105208:	e3401014 	movt	r1, #20
  10520c:	e3040fd0 	movw	r0, #20432	; 0x4fd0
  105210:	e3400014 	movt	r0, #20
  105214:	ebfff8df 	bl	103598 <rt_assert_handler>

    return ((struct sal_proto_family *)netdev->sal_user_data)->family;
  105218:	e51b3008 	ldr	r3, [fp, #-8]
  10521c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  105220:	e5933000 	ldr	r3, [r3]
}
  105224:	e1a00003 	mov	r0, r3
  105228:	e24bd004 	sub	sp, fp, #4
  10522c:	e8bd8800 	pop	{fp, pc}

00105230 <netdev_set_default>:
 * This function will set default network interface device.
 *
 * @param netdev the network interface device to change
 */
void netdev_set_default(struct netdev *netdev)
{
  105230:	e92d4800 	push	{fp, lr}
  105234:	e28db004 	add	fp, sp, #4
  105238:	e24dd008 	sub	sp, sp, #8
  10523c:	e50b0008 	str	r0, [fp, #-8]
    if (netdev)
  105240:	e51b3008 	ldr	r3, [fp, #-8]
  105244:	e3530000 	cmp	r3, #0
  105248:	0a00000d 	beq	105284 <netdev_set_default+0x54>
    {
        netdev_default = netdev;
  10524c:	e30e3ce4 	movw	r3, #60644	; 0xece4
  105250:	e3403014 	movt	r3, #20
  105254:	e51b2008 	ldr	r2, [fp, #-8]
  105258:	e5832000 	str	r2, [r3]

        if (netdev->ops->set_default)
  10525c:	e51b3008 	ldr	r3, [fp, #-8]
  105260:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105264:	e593301c 	ldr	r3, [r3, #28]
  105268:	e3530000 	cmp	r3, #0
  10526c:	0a000004 	beq	105284 <netdev_set_default+0x54>
        {
            /* set default network interface device in the current network stack */
            netdev->ops->set_default(netdev);
  105270:	e51b3008 	ldr	r3, [fp, #-8]
  105274:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105278:	e593301c 	ldr	r3, [r3, #28]
  10527c:	e51b0008 	ldr	r0, [fp, #-8]
  105280:	e12fff33 	blx	r3
        }
        LOG_D("Setting default network interface device name(%s) successfully.", netdev->name);
    }
}
  105284:	e320f000 	nop	{0}
  105288:	e24bd004 	sub	sp, fp, #4
  10528c:	e8bd8800 	pop	{fp, pc}

00105290 <netdev_set_up>:
 *
 * @return  0: set status successfully
 *         -1: set status failed
 */
int netdev_set_up(struct netdev *netdev)
{
  105290:	e92d4800 	push	{fp, lr}
  105294:	e28db004 	add	fp, sp, #4
  105298:	e24dd008 	sub	sp, sp, #8
  10529c:	e50b0008 	str	r0, [fp, #-8]
    RT_ASSERT(netdev);
  1052a0:	e51b3008 	ldr	r3, [fp, #-8]
  1052a4:	e3530000 	cmp	r3, #0
  1052a8:	1a000005 	bne	1052c4 <netdev_set_up+0x34>
  1052ac:	e3002173 	movw	r2, #371	; 0x173
  1052b0:	e3051368 	movw	r1, #21352	; 0x5368
  1052b4:	e3401014 	movt	r1, #20
  1052b8:	e3040fd0 	movw	r0, #20432	; 0x4fd0
  1052bc:	e3400014 	movt	r0, #20
  1052c0:	ebfff8b4 	bl	103598 <rt_assert_handler>

    if (!netdev->ops || !netdev->ops->set_up)
  1052c4:	e51b3008 	ldr	r3, [fp, #-8]
  1052c8:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  1052cc:	e3530000 	cmp	r3, #0
  1052d0:	0a000004 	beq	1052e8 <netdev_set_up+0x58>
  1052d4:	e51b3008 	ldr	r3, [fp, #-8]
  1052d8:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  1052dc:	e5933000 	ldr	r3, [r3]
  1052e0:	e3530000 	cmp	r3, #0
  1052e4:	1a00000d 	bne	105320 <netdev_set_up+0x90>
    {
        LOG_E("The network interface device(%s) not support to set status.", netdev->name);
  1052e8:	e3040fe0 	movw	r0, #20448	; 0x4fe0
  1052ec:	e3400014 	movt	r0, #20
  1052f0:	ebfff787 	bl	103114 <rt_kprintf>
  1052f4:	e51b3008 	ldr	r3, [fp, #-8]
  1052f8:	e2833004 	add	r3, r3, #4
  1052fc:	e1a01003 	mov	r1, r3
  105300:	e3040ff4 	movw	r0, #20468	; 0x4ff4
  105304:	e3400014 	movt	r0, #20
  105308:	ebfff781 	bl	103114 <rt_kprintf>
  10530c:	e3050030 	movw	r0, #20528	; 0x5030
  105310:	e3400014 	movt	r0, #20
  105314:	ebfff77e 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105318:	e3e03000 	mvn	r3, #0
  10531c:	ea00000d 	b	105358 <netdev_set_up+0xc8>
    }

    /* network interface device status flags check */
    if (netdev_is_up(netdev))
  105320:	e51b3008 	ldr	r3, [fp, #-8]
  105324:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  105328:	e2033001 	and	r3, r3, #1
  10532c:	e6ef3073 	uxtb	r3, r3
  105330:	e3530000 	cmp	r3, #0
  105334:	0a000001 	beq	105340 <netdev_set_up+0xb0>
    {
        return RT_EOK;
  105338:	e3a03000 	mov	r3, #0
  10533c:	ea000005 	b	105358 <netdev_set_up+0xc8>
    }

    /* execute enable network interface device operations by network interface device driver */
    return netdev->ops->set_up(netdev);
  105340:	e51b3008 	ldr	r3, [fp, #-8]
  105344:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105348:	e5933000 	ldr	r3, [r3]
  10534c:	e51b0008 	ldr	r0, [fp, #-8]
  105350:	e12fff33 	blx	r3
  105354:	e1a03000 	mov	r3, r0
}
  105358:	e1a00003 	mov	r0, r3
  10535c:	e24bd004 	sub	sp, fp, #4
  105360:	e8bd8800 	pop	{fp, pc}

00105364 <netdev_set_down>:
 *
 * @return  0: set status successfully
 *         -1: set sttaus failed
 */
int netdev_set_down(struct netdev *netdev)
{
  105364:	e92d4800 	push	{fp, lr}
  105368:	e28db004 	add	fp, sp, #4
  10536c:	e24dd008 	sub	sp, sp, #8
  105370:	e50b0008 	str	r0, [fp, #-8]
    RT_ASSERT(netdev);
  105374:	e51b3008 	ldr	r3, [fp, #-8]
  105378:	e3530000 	cmp	r3, #0
  10537c:	1a000005 	bne	105398 <netdev_set_down+0x34>
  105380:	e300218e 	movw	r2, #398	; 0x18e
  105384:	e3051378 	movw	r1, #21368	; 0x5378
  105388:	e3401014 	movt	r1, #20
  10538c:	e3040fd0 	movw	r0, #20432	; 0x4fd0
  105390:	e3400014 	movt	r0, #20
  105394:	ebfff87f 	bl	103598 <rt_assert_handler>

    if (!netdev->ops || !netdev->ops->set_down)
  105398:	e51b3008 	ldr	r3, [fp, #-8]
  10539c:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  1053a0:	e3530000 	cmp	r3, #0
  1053a4:	0a000004 	beq	1053bc <netdev_set_down+0x58>
  1053a8:	e51b3008 	ldr	r3, [fp, #-8]
  1053ac:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  1053b0:	e5933004 	ldr	r3, [r3, #4]
  1053b4:	e3530000 	cmp	r3, #0
  1053b8:	1a00000d 	bne	1053f4 <netdev_set_down+0x90>
    {
        LOG_E("The network interface device(%s) not support to set status.", netdev->name);
  1053bc:	e3040fe0 	movw	r0, #20448	; 0x4fe0
  1053c0:	e3400014 	movt	r0, #20
  1053c4:	ebfff752 	bl	103114 <rt_kprintf>
  1053c8:	e51b3008 	ldr	r3, [fp, #-8]
  1053cc:	e2833004 	add	r3, r3, #4
  1053d0:	e1a01003 	mov	r1, r3
  1053d4:	e3040ff4 	movw	r0, #20468	; 0x4ff4
  1053d8:	e3400014 	movt	r0, #20
  1053dc:	ebfff74c 	bl	103114 <rt_kprintf>
  1053e0:	e3050030 	movw	r0, #20528	; 0x5030
  1053e4:	e3400014 	movt	r0, #20
  1053e8:	ebfff749 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  1053ec:	e3e03000 	mvn	r3, #0
  1053f0:	ea00000c 	b	105428 <netdev_set_down+0xc4>
    }

    /* network interface device status flags check */
    if (!netdev_is_up(netdev))
  1053f4:	e51b3008 	ldr	r3, [fp, #-8]
  1053f8:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1053fc:	e2033001 	and	r3, r3, #1
  105400:	e3530000 	cmp	r3, #0
  105404:	1a000001 	bne	105410 <netdev_set_down+0xac>
    {
        return RT_EOK;
  105408:	e3a03000 	mov	r3, #0
  10540c:	ea000005 	b	105428 <netdev_set_down+0xc4>
    }

    /* execute disable network interface device operations by network interface driver */
    return netdev->ops->set_down(netdev);
  105410:	e51b3008 	ldr	r3, [fp, #-8]
  105414:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105418:	e5933004 	ldr	r3, [r3, #4]
  10541c:	e51b0008 	ldr	r0, [fp, #-8]
  105420:	e12fff33 	blx	r3
  105424:	e1a03000 	mov	r3, r0
}
  105428:	e1a00003 	mov	r0, r3
  10542c:	e24bd004 	sub	sp, fp, #4
  105430:	e8bd8800 	pop	{fp, pc}

00105434 <netdev_dhcp_enabled>:
 *
 * @return  0: set DHCP status successfully
 *         -1: set DHCP status failed
 */
int netdev_dhcp_enabled(struct netdev *netdev, rt_bool_t is_enabled)
{
  105434:	e92d4800 	push	{fp, lr}
  105438:	e28db004 	add	fp, sp, #4
  10543c:	e24dd008 	sub	sp, sp, #8
  105440:	e50b0008 	str	r0, [fp, #-8]
  105444:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(netdev);
  105448:	e51b3008 	ldr	r3, [fp, #-8]
  10544c:	e3530000 	cmp	r3, #0
  105450:	1a000005 	bne	10546c <netdev_dhcp_enabled+0x38>
  105454:	e30021ab 	movw	r2, #427	; 0x1ab
  105458:	e3051388 	movw	r1, #21384	; 0x5388
  10545c:	e3401014 	movt	r1, #20
  105460:	e3040fd0 	movw	r0, #20432	; 0x4fd0
  105464:	e3400014 	movt	r0, #20
  105468:	ebfff84a 	bl	103598 <rt_assert_handler>

    if (!netdev->ops || !netdev->ops->set_dhcp)
  10546c:	e51b3008 	ldr	r3, [fp, #-8]
  105470:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105474:	e3530000 	cmp	r3, #0
  105478:	0a000004 	beq	105490 <netdev_dhcp_enabled+0x5c>
  10547c:	e51b3008 	ldr	r3, [fp, #-8]
  105480:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105484:	e5933010 	ldr	r3, [r3, #16]
  105488:	e3530000 	cmp	r3, #0
  10548c:	1a00000d 	bne	1054c8 <netdev_dhcp_enabled+0x94>
    {
        LOG_E("The network interface device(%s) not support to set DHCP status.", netdev->name);
  105490:	e3040fe0 	movw	r0, #20448	; 0x4fe0
  105494:	e3400014 	movt	r0, #20
  105498:	ebfff71d 	bl	103114 <rt_kprintf>
  10549c:	e51b3008 	ldr	r3, [fp, #-8]
  1054a0:	e2833004 	add	r3, r3, #4
  1054a4:	e1a01003 	mov	r1, r3
  1054a8:	e3050038 	movw	r0, #20536	; 0x5038
  1054ac:	e3400014 	movt	r0, #20
  1054b0:	ebfff717 	bl	103114 <rt_kprintf>
  1054b4:	e3050030 	movw	r0, #20528	; 0x5030
  1054b8:	e3400014 	movt	r0, #20
  1054bc:	ebfff714 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  1054c0:	e3e03000 	mvn	r3, #0
  1054c4:	ea00000f 	b	105508 <netdev_dhcp_enabled+0xd4>
    }

    /* network interface device DHCP flags check */
    if (netdev_is_dhcp_enabled(netdev) == is_enabled)
  1054c8:	e51b3008 	ldr	r3, [fp, #-8]
  1054cc:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1054d0:	e1a03423 	lsr	r3, r3, #8
  1054d4:	e2033001 	and	r3, r3, #1
  1054d8:	e51b200c 	ldr	r2, [fp, #-12]
  1054dc:	e1520003 	cmp	r2, r3
  1054e0:	1a000001 	bne	1054ec <netdev_dhcp_enabled+0xb8>
    {
        return RT_EOK;
  1054e4:	e3a03000 	mov	r3, #0
  1054e8:	ea000006 	b	105508 <netdev_dhcp_enabled+0xd4>
    }

    /* execute network interface device DHCP capability control operations */
    return netdev->ops->set_dhcp(netdev, is_enabled);
  1054ec:	e51b3008 	ldr	r3, [fp, #-8]
  1054f0:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  1054f4:	e5933010 	ldr	r3, [r3, #16]
  1054f8:	e51b100c 	ldr	r1, [fp, #-12]
  1054fc:	e51b0008 	ldr	r0, [fp, #-8]
  105500:	e12fff33 	blx	r3
  105504:	e1a03000 	mov	r3, r0
}
  105508:	e1a00003 	mov	r0, r3
  10550c:	e24bd004 	sub	sp, fp, #4
  105510:	e8bd8800 	pop	{fp, pc}

00105514 <netdev_set_ipaddr>:
 *
 * @return  0: set IP address successfully
 *         -1: set IP address failed
 */
int netdev_set_ipaddr(struct netdev *netdev, const ip_addr_t *ip_addr)
{
  105514:	e92d4810 	push	{r4, fp, lr}
  105518:	e28db008 	add	fp, sp, #8
  10551c:	e24dd00c 	sub	sp, sp, #12
  105520:	e50b0010 	str	r0, [fp, #-16]
  105524:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    RT_ASSERT(netdev);
  105528:	e51b3010 	ldr	r3, [fp, #-16]
  10552c:	e3530000 	cmp	r3, #0
  105530:	1a000005 	bne	10554c <netdev_set_ipaddr+0x38>
  105534:	e3a02f72 	mov	r2, #456	; 0x1c8
  105538:	e305139c 	movw	r1, #21404	; 0x539c
  10553c:	e3401014 	movt	r1, #20
  105540:	e3040fd0 	movw	r0, #20432	; 0x4fd0
  105544:	e3400014 	movt	r0, #20
  105548:	ebfff812 	bl	103598 <rt_assert_handler>
    RT_ASSERT(ip_addr);
  10554c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105550:	e3530000 	cmp	r3, #0
  105554:	1a000005 	bne	105570 <netdev_set_ipaddr+0x5c>
  105558:	e30021c9 	movw	r2, #457	; 0x1c9
  10555c:	e305139c 	movw	r1, #21404	; 0x539c
  105560:	e3401014 	movt	r1, #20
  105564:	e305007c 	movw	r0, #20604	; 0x507c
  105568:	e3400014 	movt	r0, #20
  10556c:	ebfff809 	bl	103598 <rt_assert_handler>

    if (!netdev->ops || !netdev->ops->set_addr_info)
  105570:	e51b3010 	ldr	r3, [fp, #-16]
  105574:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105578:	e3530000 	cmp	r3, #0
  10557c:	0a000004 	beq	105594 <netdev_set_ipaddr+0x80>
  105580:	e51b3010 	ldr	r3, [fp, #-16]
  105584:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105588:	e5933008 	ldr	r3, [r3, #8]
  10558c:	e3530000 	cmp	r3, #0
  105590:	1a00000d 	bne	1055cc <netdev_set_ipaddr+0xb8>
    {
        LOG_E("The network interface device(%s) not support to set IP address.", netdev->name);
  105594:	e3040fe0 	movw	r0, #20448	; 0x4fe0
  105598:	e3400014 	movt	r0, #20
  10559c:	ebfff6dc 	bl	103114 <rt_kprintf>
  1055a0:	e51b3010 	ldr	r3, [fp, #-16]
  1055a4:	e2833004 	add	r3, r3, #4
  1055a8:	e1a01003 	mov	r1, r3
  1055ac:	e3050084 	movw	r0, #20612	; 0x5084
  1055b0:	e3400014 	movt	r0, #20
  1055b4:	ebfff6d6 	bl	103114 <rt_kprintf>
  1055b8:	e3050030 	movw	r0, #20528	; 0x5030
  1055bc:	e3400014 	movt	r0, #20
  1055c0:	ebfff6d3 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  1055c4:	e3e03000 	mvn	r3, #0
  1055c8:	ea00001d 	b	105644 <netdev_set_ipaddr+0x130>
    }

    if (netdev_is_dhcp_enabled(netdev))
  1055cc:	e51b3010 	ldr	r3, [fp, #-16]
  1055d0:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1055d4:	e1a03423 	lsr	r3, r3, #8
  1055d8:	e2033001 	and	r3, r3, #1
  1055dc:	e6ef3073 	uxtb	r3, r3
  1055e0:	e3530000 	cmp	r3, #0
  1055e4:	0a00000d 	beq	105620 <netdev_set_ipaddr+0x10c>
    {
        LOG_E("The network interface device(%s) DHCP capability is enable, not support set IP address.", netdev->name);
  1055e8:	e3040fe0 	movw	r0, #20448	; 0x4fe0
  1055ec:	e3400014 	movt	r0, #20
  1055f0:	ebfff6c7 	bl	103114 <rt_kprintf>
  1055f4:	e51b3010 	ldr	r3, [fp, #-16]
  1055f8:	e2833004 	add	r3, r3, #4
  1055fc:	e1a01003 	mov	r1, r3
  105600:	e30500c4 	movw	r0, #20676	; 0x50c4
  105604:	e3400014 	movt	r0, #20
  105608:	ebfff6c1 	bl	103114 <rt_kprintf>
  10560c:	e3050030 	movw	r0, #20528	; 0x5030
  105610:	e3400014 	movt	r0, #20
  105614:	ebfff6be 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105618:	e3e03000 	mvn	r3, #0
  10561c:	ea000008 	b	105644 <netdev_set_ipaddr+0x130>
    }

     /* execute network interface device set IP address operations */
    return netdev->ops->set_addr_info(netdev, (ip_addr_t *)ip_addr, RT_NULL, RT_NULL);
  105620:	e51b3010 	ldr	r3, [fp, #-16]
  105624:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105628:	e5934008 	ldr	r4, [r3, #8]
  10562c:	e3a03000 	mov	r3, #0
  105630:	e3a02000 	mov	r2, #0
  105634:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  105638:	e51b0010 	ldr	r0, [fp, #-16]
  10563c:	e12fff34 	blx	r4
  105640:	e1a03000 	mov	r3, r0
}
  105644:	e1a00003 	mov	r0, r3
  105648:	e24bd008 	sub	sp, fp, #8
  10564c:	e8bd8810 	pop	{r4, fp, pc}

00105650 <netdev_set_netmask>:
 *
 * @return  0: set netmask address successfully
 *         -1: set netmask address failed
 */
int netdev_set_netmask(struct netdev *netdev, const ip_addr_t *netmask)
{
  105650:	e92d4810 	push	{r4, fp, lr}
  105654:	e28db008 	add	fp, sp, #8
  105658:	e24dd00c 	sub	sp, sp, #12
  10565c:	e50b0010 	str	r0, [fp, #-16]
  105660:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    RT_ASSERT(netdev);
  105664:	e51b3010 	ldr	r3, [fp, #-16]
  105668:	e3530000 	cmp	r3, #0
  10566c:	1a000005 	bne	105688 <netdev_set_netmask+0x38>
  105670:	e30021e6 	movw	r2, #486	; 0x1e6
  105674:	e30513b0 	movw	r1, #21424	; 0x53b0
  105678:	e3401014 	movt	r1, #20
  10567c:	e3040fd0 	movw	r0, #20432	; 0x4fd0
  105680:	e3400014 	movt	r0, #20
  105684:	ebfff7c3 	bl	103598 <rt_assert_handler>
    RT_ASSERT(netmask);
  105688:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10568c:	e3530000 	cmp	r3, #0
  105690:	1a000005 	bne	1056ac <netdev_set_netmask+0x5c>
  105694:	e30021e7 	movw	r2, #487	; 0x1e7
  105698:	e30513b0 	movw	r1, #21424	; 0x53b0
  10569c:	e3401014 	movt	r1, #20
  1056a0:	e305011c 	movw	r0, #20764	; 0x511c
  1056a4:	e3400014 	movt	r0, #20
  1056a8:	ebfff7ba 	bl	103598 <rt_assert_handler>

    if (!netdev->ops || !netdev->ops->set_addr_info)
  1056ac:	e51b3010 	ldr	r3, [fp, #-16]
  1056b0:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  1056b4:	e3530000 	cmp	r3, #0
  1056b8:	0a000004 	beq	1056d0 <netdev_set_netmask+0x80>
  1056bc:	e51b3010 	ldr	r3, [fp, #-16]
  1056c0:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  1056c4:	e5933008 	ldr	r3, [r3, #8]
  1056c8:	e3530000 	cmp	r3, #0
  1056cc:	1a00000d 	bne	105708 <netdev_set_netmask+0xb8>
    {
        LOG_E("The network interface device(%s) not support to set netmask address.", netdev->name);
  1056d0:	e3040fe0 	movw	r0, #20448	; 0x4fe0
  1056d4:	e3400014 	movt	r0, #20
  1056d8:	ebfff68d 	bl	103114 <rt_kprintf>
  1056dc:	e51b3010 	ldr	r3, [fp, #-16]
  1056e0:	e2833004 	add	r3, r3, #4
  1056e4:	e1a01003 	mov	r1, r3
  1056e8:	e3050124 	movw	r0, #20772	; 0x5124
  1056ec:	e3400014 	movt	r0, #20
  1056f0:	ebfff687 	bl	103114 <rt_kprintf>
  1056f4:	e3050030 	movw	r0, #20528	; 0x5030
  1056f8:	e3400014 	movt	r0, #20
  1056fc:	ebfff684 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105700:	e3e03000 	mvn	r3, #0
  105704:	ea00001d 	b	105780 <netdev_set_netmask+0x130>
    }

    if (netdev_is_dhcp_enabled(netdev))
  105708:	e51b3010 	ldr	r3, [fp, #-16]
  10570c:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  105710:	e1a03423 	lsr	r3, r3, #8
  105714:	e2033001 	and	r3, r3, #1
  105718:	e6ef3073 	uxtb	r3, r3
  10571c:	e3530000 	cmp	r3, #0
  105720:	0a00000d 	beq	10575c <netdev_set_netmask+0x10c>
    {
        LOG_E("The network interface device(%s) DHCP capability is enable, not support set netmask address.", netdev->name);
  105724:	e3040fe0 	movw	r0, #20448	; 0x4fe0
  105728:	e3400014 	movt	r0, #20
  10572c:	ebfff678 	bl	103114 <rt_kprintf>
  105730:	e51b3010 	ldr	r3, [fp, #-16]
  105734:	e2833004 	add	r3, r3, #4
  105738:	e1a01003 	mov	r1, r3
  10573c:	e305016c 	movw	r0, #20844	; 0x516c
  105740:	e3400014 	movt	r0, #20
  105744:	ebfff672 	bl	103114 <rt_kprintf>
  105748:	e3050030 	movw	r0, #20528	; 0x5030
  10574c:	e3400014 	movt	r0, #20
  105750:	ebfff66f 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105754:	e3e03000 	mvn	r3, #0
  105758:	ea000008 	b	105780 <netdev_set_netmask+0x130>
    }

    /* execute network interface device set netmask address operations */
    return netdev->ops->set_addr_info(netdev, RT_NULL, (ip_addr_t *)netmask, RT_NULL);
  10575c:	e51b3010 	ldr	r3, [fp, #-16]
  105760:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105764:	e5934008 	ldr	r4, [r3, #8]
  105768:	e3a03000 	mov	r3, #0
  10576c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  105770:	e3a01000 	mov	r1, #0
  105774:	e51b0010 	ldr	r0, [fp, #-16]
  105778:	e12fff34 	blx	r4
  10577c:	e1a03000 	mov	r3, r0
}
  105780:	e1a00003 	mov	r0, r3
  105784:	e24bd008 	sub	sp, fp, #8
  105788:	e8bd8810 	pop	{r4, fp, pc}

0010578c <netdev_set_gw>:
 *
 * @return  0: set gateway address successfully
 *         -1: set gateway address failed
 */
int netdev_set_gw(struct netdev *netdev, const ip_addr_t *gw)
{
  10578c:	e92d4810 	push	{r4, fp, lr}
  105790:	e28db008 	add	fp, sp, #8
  105794:	e24dd00c 	sub	sp, sp, #12
  105798:	e50b0010 	str	r0, [fp, #-16]
  10579c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    RT_ASSERT(netdev);
  1057a0:	e51b3010 	ldr	r3, [fp, #-16]
  1057a4:	e3530000 	cmp	r3, #0
  1057a8:	1a000005 	bne	1057c4 <netdev_set_gw+0x38>
  1057ac:	e3a02f81 	mov	r2, #516	; 0x204
  1057b0:	e30513c4 	movw	r1, #21444	; 0x53c4
  1057b4:	e3401014 	movt	r1, #20
  1057b8:	e3040fd0 	movw	r0, #20432	; 0x4fd0
  1057bc:	e3400014 	movt	r0, #20
  1057c0:	ebfff774 	bl	103598 <rt_assert_handler>
    RT_ASSERT(gw);
  1057c4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1057c8:	e3530000 	cmp	r3, #0
  1057cc:	1a000005 	bne	1057e8 <netdev_set_gw+0x5c>
  1057d0:	e3002205 	movw	r2, #517	; 0x205
  1057d4:	e30513c4 	movw	r1, #21444	; 0x53c4
  1057d8:	e3401014 	movt	r1, #20
  1057dc:	e30501cc 	movw	r0, #20940	; 0x51cc
  1057e0:	e3400014 	movt	r0, #20
  1057e4:	ebfff76b 	bl	103598 <rt_assert_handler>

    if (!netdev->ops || !netdev->ops->set_addr_info)
  1057e8:	e51b3010 	ldr	r3, [fp, #-16]
  1057ec:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  1057f0:	e3530000 	cmp	r3, #0
  1057f4:	0a000004 	beq	10580c <netdev_set_gw+0x80>
  1057f8:	e51b3010 	ldr	r3, [fp, #-16]
  1057fc:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105800:	e5933008 	ldr	r3, [r3, #8]
  105804:	e3530000 	cmp	r3, #0
  105808:	1a00000d 	bne	105844 <netdev_set_gw+0xb8>
    {
        LOG_E("The network interface device(%s) not support to set gateway address.", netdev->name);
  10580c:	e3040fe0 	movw	r0, #20448	; 0x4fe0
  105810:	e3400014 	movt	r0, #20
  105814:	ebfff63e 	bl	103114 <rt_kprintf>
  105818:	e51b3010 	ldr	r3, [fp, #-16]
  10581c:	e2833004 	add	r3, r3, #4
  105820:	e1a01003 	mov	r1, r3
  105824:	e30501d0 	movw	r0, #20944	; 0x51d0
  105828:	e3400014 	movt	r0, #20
  10582c:	ebfff638 	bl	103114 <rt_kprintf>
  105830:	e3050030 	movw	r0, #20528	; 0x5030
  105834:	e3400014 	movt	r0, #20
  105838:	ebfff635 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  10583c:	e3e03000 	mvn	r3, #0
  105840:	ea00001d 	b	1058bc <netdev_set_gw+0x130>
    }

    if (netdev_is_dhcp_enabled(netdev))
  105844:	e51b3010 	ldr	r3, [fp, #-16]
  105848:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  10584c:	e1a03423 	lsr	r3, r3, #8
  105850:	e2033001 	and	r3, r3, #1
  105854:	e6ef3073 	uxtb	r3, r3
  105858:	e3530000 	cmp	r3, #0
  10585c:	0a00000d 	beq	105898 <netdev_set_gw+0x10c>
    {
        LOG_E("The network interface device(%s) DHCP capability is enable, not support set gateway address.", netdev->name);
  105860:	e3040fe0 	movw	r0, #20448	; 0x4fe0
  105864:	e3400014 	movt	r0, #20
  105868:	ebfff629 	bl	103114 <rt_kprintf>
  10586c:	e51b3010 	ldr	r3, [fp, #-16]
  105870:	e2833004 	add	r3, r3, #4
  105874:	e1a01003 	mov	r1, r3
  105878:	e3050218 	movw	r0, #21016	; 0x5218
  10587c:	e3400014 	movt	r0, #20
  105880:	ebfff623 	bl	103114 <rt_kprintf>
  105884:	e3050030 	movw	r0, #20528	; 0x5030
  105888:	e3400014 	movt	r0, #20
  10588c:	ebfff620 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105890:	e3e03000 	mvn	r3, #0
  105894:	ea000008 	b	1058bc <netdev_set_gw+0x130>
    }

    /* execute network interface device set gateway address operations */
    return netdev->ops->set_addr_info(netdev, RT_NULL, RT_NULL, (ip_addr_t *)gw);
  105898:	e51b3010 	ldr	r3, [fp, #-16]
  10589c:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  1058a0:	e5934008 	ldr	r4, [r3, #8]
  1058a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1058a8:	e3a02000 	mov	r2, #0
  1058ac:	e3a01000 	mov	r1, #0
  1058b0:	e51b0010 	ldr	r0, [fp, #-16]
  1058b4:	e12fff34 	blx	r4
  1058b8:	e1a03000 	mov	r3, r0
}
  1058bc:	e1a00003 	mov	r0, r3
  1058c0:	e24bd008 	sub	sp, fp, #8
  1058c4:	e8bd8810 	pop	{r4, fp, pc}

001058c8 <netdev_set_dns_server>:
 *
 * @return  0: set netmask address successfully
 *         -1: set netmask address failed
 */
int netdev_set_dns_server(struct netdev *netdev, uint8_t dns_num, const ip_addr_t *dns_server)
{
  1058c8:	e92d4800 	push	{fp, lr}
  1058cc:	e28db004 	add	fp, sp, #4
  1058d0:	e24dd010 	sub	sp, sp, #16
  1058d4:	e50b0008 	str	r0, [fp, #-8]
  1058d8:	e1a03001 	mov	r3, r1
  1058dc:	e50b2010 	str	r2, [fp, #-16]
  1058e0:	e54b3009 	strb	r3, [fp, #-9]
    RT_ASSERT(netdev);
  1058e4:	e51b3008 	ldr	r3, [fp, #-8]
  1058e8:	e3530000 	cmp	r3, #0
  1058ec:	1a000005 	bne	105908 <netdev_set_dns_server+0x40>
  1058f0:	e3002222 	movw	r2, #546	; 0x222
  1058f4:	e30513d4 	movw	r1, #21460	; 0x53d4
  1058f8:	e3401014 	movt	r1, #20
  1058fc:	e3040fd0 	movw	r0, #20432	; 0x4fd0
  105900:	e3400014 	movt	r0, #20
  105904:	ebfff723 	bl	103598 <rt_assert_handler>
    RT_ASSERT(dns_server);
  105908:	e51b3010 	ldr	r3, [fp, #-16]
  10590c:	e3530000 	cmp	r3, #0
  105910:	1a000005 	bne	10592c <netdev_set_dns_server+0x64>
  105914:	e3002223 	movw	r2, #547	; 0x223
  105918:	e30513d4 	movw	r1, #21460	; 0x53d4
  10591c:	e3401014 	movt	r1, #20
  105920:	e3050278 	movw	r0, #21112	; 0x5278
  105924:	e3400014 	movt	r0, #20
  105928:	ebfff71a 	bl	103598 <rt_assert_handler>

    if (dns_num >= NETDEV_DNS_SERVERS_NUM)
  10592c:	e55b3009 	ldrb	r3, [fp, #-9]
  105930:	e3530001 	cmp	r3, #1
  105934:	9a00000e 	bls	105974 <netdev_set_dns_server+0xac>
    {
        LOG_E("The number of DNS servers(%d) set exceeds the maximum number(%d).", dns_num + 1, NETDEV_DNS_SERVERS_NUM);
  105938:	e3040fe0 	movw	r0, #20448	; 0x4fe0
  10593c:	e3400014 	movt	r0, #20
  105940:	ebfff5f3 	bl	103114 <rt_kprintf>
  105944:	e55b3009 	ldrb	r3, [fp, #-9]
  105948:	e2833001 	add	r3, r3, #1
  10594c:	e3a02002 	mov	r2, #2
  105950:	e1a01003 	mov	r1, r3
  105954:	e3050284 	movw	r0, #21124	; 0x5284
  105958:	e3400014 	movt	r0, #20
  10595c:	ebfff5ec 	bl	103114 <rt_kprintf>
  105960:	e3050030 	movw	r0, #20528	; 0x5030
  105964:	e3400014 	movt	r0, #20
  105968:	ebfff5e9 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  10596c:	e3e03000 	mvn	r3, #0
  105970:	ea00001e 	b	1059f0 <netdev_set_dns_server+0x128>
    }

    if (!netdev->ops || !netdev->ops->set_dns_server)
  105974:	e51b3008 	ldr	r3, [fp, #-8]
  105978:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  10597c:	e3530000 	cmp	r3, #0
  105980:	0a000004 	beq	105998 <netdev_set_dns_server+0xd0>
  105984:	e51b3008 	ldr	r3, [fp, #-8]
  105988:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  10598c:	e593300c 	ldr	r3, [r3, #12]
  105990:	e3530000 	cmp	r3, #0
  105994:	1a00000d 	bne	1059d0 <netdev_set_dns_server+0x108>
    {
        LOG_E("The network interface device(%s) not support to set DNS server address.", netdev->name);
  105998:	e3040fe0 	movw	r0, #20448	; 0x4fe0
  10599c:	e3400014 	movt	r0, #20
  1059a0:	ebfff5db 	bl	103114 <rt_kprintf>
  1059a4:	e51b3008 	ldr	r3, [fp, #-8]
  1059a8:	e2833004 	add	r3, r3, #4
  1059ac:	e1a01003 	mov	r1, r3
  1059b0:	e30502c8 	movw	r0, #21192	; 0x52c8
  1059b4:	e3400014 	movt	r0, #20
  1059b8:	ebfff5d5 	bl	103114 <rt_kprintf>
  1059bc:	e3050030 	movw	r0, #20528	; 0x5030
  1059c0:	e3400014 	movt	r0, #20
  1059c4:	ebfff5d2 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  1059c8:	e3e03000 	mvn	r3, #0
  1059cc:	ea000007 	b	1059f0 <netdev_set_dns_server+0x128>
    }

    /* execute network interface device set DNS server address operations */
    return netdev->ops->set_dns_server(netdev, dns_num, (ip_addr_t *)dns_server);
  1059d0:	e51b3008 	ldr	r3, [fp, #-8]
  1059d4:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  1059d8:	e593300c 	ldr	r3, [r3, #12]
  1059dc:	e55b1009 	ldrb	r1, [fp, #-9]
  1059e0:	e51b2010 	ldr	r2, [fp, #-16]
  1059e4:	e51b0008 	ldr	r0, [fp, #-8]
  1059e8:	e12fff33 	blx	r3
  1059ec:	e1a03000 	mov	r3, r0
}
  1059f0:	e1a00003 	mov	r0, r3
  1059f4:	e24bd004 	sub	sp, fp, #4
  1059f8:	e8bd8800 	pop	{fp, pc}

001059fc <netdev_set_status_callback>:
 *
 * @param netdev the network interface device to change
 * @param status_callback the callback be called when the status has been changed.
 */
void netdev_set_status_callback(struct netdev *netdev, netdev_callback_fn status_callback)
{
  1059fc:	e92d4800 	push	{fp, lr}
  105a00:	e28db004 	add	fp, sp, #4
  105a04:	e24dd008 	sub	sp, sp, #8
  105a08:	e50b0008 	str	r0, [fp, #-8]
  105a0c:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(netdev);
  105a10:	e51b3008 	ldr	r3, [fp, #-8]
  105a14:	e3530000 	cmp	r3, #0
  105a18:	1a000005 	bne	105a34 <netdev_set_status_callback+0x38>
  105a1c:	e300223d 	movw	r2, #573	; 0x23d
  105a20:	e30513ec 	movw	r1, #21484	; 0x53ec
  105a24:	e3401014 	movt	r1, #20
  105a28:	e3040fd0 	movw	r0, #20432	; 0x4fd0
  105a2c:	e3400014 	movt	r0, #20
  105a30:	ebfff6d8 	bl	103598 <rt_assert_handler>
    RT_ASSERT(status_callback);
  105a34:	e51b300c 	ldr	r3, [fp, #-12]
  105a38:	e3530000 	cmp	r3, #0
  105a3c:	1a000005 	bne	105a58 <netdev_set_status_callback+0x5c>
  105a40:	e300223e 	movw	r2, #574	; 0x23e
  105a44:	e30513ec 	movw	r1, #21484	; 0x53ec
  105a48:	e3401014 	movt	r1, #20
  105a4c:	e3050310 	movw	r0, #21264	; 0x5310
  105a50:	e3400014 	movt	r0, #20
  105a54:	ebfff6cf 	bl	103598 <rt_assert_handler>

    netdev->status_callback = status_callback;
  105a58:	e51b3008 	ldr	r3, [fp, #-8]
  105a5c:	e51b200c 	ldr	r2, [fp, #-12]
  105a60:	e5832034 	str	r2, [r3, #52]	; 0x34
}
  105a64:	e320f000 	nop	{0}
  105a68:	e24bd004 	sub	sp, fp, #4
  105a6c:	e8bd8800 	pop	{fp, pc}

00105a70 <netdev_set_addr_callback>:
 *
 * @param netdev the network interface device to change
 * @param addr_callback the callback be called when the address has been changed.
 */
void netdev_set_addr_callback(struct netdev *netdev, netdev_callback_fn addr_callback)
{
  105a70:	e92d4800 	push	{fp, lr}
  105a74:	e28db004 	add	fp, sp, #4
  105a78:	e24dd008 	sub	sp, sp, #8
  105a7c:	e50b0008 	str	r0, [fp, #-8]
  105a80:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(netdev);
  105a84:	e51b3008 	ldr	r3, [fp, #-8]
  105a88:	e3530000 	cmp	r3, #0
  105a8c:	1a000005 	bne	105aa8 <netdev_set_addr_callback+0x38>
  105a90:	e300224b 	movw	r2, #587	; 0x24b
  105a94:	e3051408 	movw	r1, #21512	; 0x5408
  105a98:	e3401014 	movt	r1, #20
  105a9c:	e3040fd0 	movw	r0, #20432	; 0x4fd0
  105aa0:	e3400014 	movt	r0, #20
  105aa4:	ebfff6bb 	bl	103598 <rt_assert_handler>
    RT_ASSERT(addr_callback);
  105aa8:	e51b300c 	ldr	r3, [fp, #-12]
  105aac:	e3530000 	cmp	r3, #0
  105ab0:	1a000005 	bne	105acc <netdev_set_addr_callback+0x5c>
  105ab4:	e3a02f93 	mov	r2, #588	; 0x24c
  105ab8:	e3051408 	movw	r1, #21512	; 0x5408
  105abc:	e3401014 	movt	r1, #20
  105ac0:	e3050320 	movw	r0, #21280	; 0x5320
  105ac4:	e3400014 	movt	r0, #20
  105ac8:	ebfff6b2 	bl	103598 <rt_assert_handler>

    netdev->addr_callback = addr_callback;
  105acc:	e51b3008 	ldr	r3, [fp, #-8]
  105ad0:	e51b200c 	ldr	r2, [fp, #-12]
  105ad4:	e5832038 	str	r2, [r3, #56]	; 0x38
}
  105ad8:	e320f000 	nop	{0}
  105adc:	e24bd004 	sub	sp, fp, #4
  105ae0:	e8bd8800 	pop	{fp, pc}

00105ae4 <netdev_low_level_set_ipaddr>:
 *
 * @param netdev the network interface device to change
 * @param ipaddr the new IP address
 */
void netdev_low_level_set_ipaddr(struct netdev *netdev, const ip_addr_t *ip_addr)
{
  105ae4:	e92d4800 	push	{fp, lr}
  105ae8:	e28db004 	add	fp, sp, #4
  105aec:	e24dd008 	sub	sp, sp, #8
  105af0:	e50b0008 	str	r0, [fp, #-8]
  105af4:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(ip_addr);
  105af8:	e51b300c 	ldr	r3, [fp, #-12]
  105afc:	e3530000 	cmp	r3, #0
  105b00:	1a000005 	bne	105b1c <netdev_low_level_set_ipaddr+0x38>
  105b04:	e300225b 	movw	r2, #603	; 0x25b
  105b08:	e3051424 	movw	r1, #21540	; 0x5424
  105b0c:	e3401014 	movt	r1, #20
  105b10:	e305007c 	movw	r0, #20604	; 0x507c
  105b14:	e3400014 	movt	r0, #20
  105b18:	ebfff69e 	bl	103598 <rt_assert_handler>

    if (netdev && ip_addr_cmp(&(netdev->ip_addr), ip_addr) == 0)
  105b1c:	e51b3008 	ldr	r3, [fp, #-8]
  105b20:	e3530000 	cmp	r3, #0
  105b24:	0a000025 	beq	105bc0 <netdev_low_level_set_ipaddr+0xdc>
  105b28:	e51b3008 	ldr	r3, [fp, #-8]
  105b2c:	e593200c 	ldr	r2, [r3, #12]
  105b30:	e51b300c 	ldr	r3, [fp, #-12]
  105b34:	e5933000 	ldr	r3, [r3]
  105b38:	e1520003 	cmp	r2, r3
  105b3c:	0a00001f 	beq	105bc0 <netdev_low_level_set_ipaddr+0xdc>
    {
        ip_addr_copy(netdev->ip_addr, *ip_addr);
  105b40:	e51b300c 	ldr	r3, [fp, #-12]
  105b44:	e5932000 	ldr	r2, [r3]
  105b48:	e51b3008 	ldr	r3, [fp, #-8]
  105b4c:	e583200c 	str	r2, [r3, #12]

#ifdef RT_USING_SAL
        /* set network interface device flags to internet up */
        if (netdev_is_up(netdev) && netdev_is_link_up(netdev))
  105b50:	e51b3008 	ldr	r3, [fp, #-8]
  105b54:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  105b58:	e2033001 	and	r3, r3, #1
  105b5c:	e6ef3073 	uxtb	r3, r3
  105b60:	e3530000 	cmp	r3, #0
  105b64:	0a00000c 	beq	105b9c <netdev_low_level_set_ipaddr+0xb8>
  105b68:	e51b3008 	ldr	r3, [fp, #-8]
  105b6c:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  105b70:	e1a03123 	lsr	r3, r3, #2
  105b74:	e2033001 	and	r3, r3, #1
  105b78:	e6ef3073 	uxtb	r3, r3
  105b7c:	e3530000 	cmp	r3, #0
  105b80:	0a000005 	beq	105b9c <netdev_low_level_set_ipaddr+0xb8>
        {
            // sal_check_netdev_internet_up(netdev);
            // check_netdev_internet_up_work(netdev);
            netdev->flags |= NETDEV_FLAG_INTERNET_UP;
  105b84:	e51b3008 	ldr	r3, [fp, #-8]
  105b88:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  105b8c:	e3833080 	orr	r3, r3, #128	; 0x80
  105b90:	e6ff2073 	uxth	r2, r3
  105b94:	e51b3008 	ldr	r3, [fp, #-8]
  105b98:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
        }
#endif /* RT_USING_SAL */

        /* execute IP address change callback function */
        if (netdev->addr_callback)
  105b9c:	e51b3008 	ldr	r3, [fp, #-8]
  105ba0:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  105ba4:	e3530000 	cmp	r3, #0
  105ba8:	0a000004 	beq	105bc0 <netdev_low_level_set_ipaddr+0xdc>
        {
            netdev->addr_callback(netdev, NETDEV_CB_ADDR_IP);
  105bac:	e51b3008 	ldr	r3, [fp, #-8]
  105bb0:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  105bb4:	e3a01000 	mov	r1, #0
  105bb8:	e51b0008 	ldr	r0, [fp, #-8]
  105bbc:	e12fff33 	blx	r3
        }
    }
}
  105bc0:	e320f000 	nop	{0}
  105bc4:	e24bd004 	sub	sp, fp, #4
  105bc8:	e8bd8800 	pop	{fp, pc}

00105bcc <netdev_low_level_set_netmask>:
 *
 * @param netdev the network interface device to change
 * @param netmask the new netmask address
 */
void netdev_low_level_set_netmask(struct netdev *netdev, const ip_addr_t *netmask)
{
  105bcc:	e92d4800 	push	{fp, lr}
  105bd0:	e28db004 	add	fp, sp, #4
  105bd4:	e24dd008 	sub	sp, sp, #8
  105bd8:	e50b0008 	str	r0, [fp, #-8]
  105bdc:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(netmask);
  105be0:	e51b300c 	ldr	r3, [fp, #-12]
  105be4:	e3530000 	cmp	r3, #0
  105be8:	1a000005 	bne	105c04 <netdev_low_level_set_netmask+0x38>
  105bec:	e3a02f9f 	mov	r2, #636	; 0x27c
  105bf0:	e3051440 	movw	r1, #21568	; 0x5440
  105bf4:	e3401014 	movt	r1, #20
  105bf8:	e305011c 	movw	r0, #20764	; 0x511c
  105bfc:	e3400014 	movt	r0, #20
  105c00:	ebfff664 	bl	103598 <rt_assert_handler>

    if (netdev && ip_addr_cmp(&(netdev->netmask), netmask) == 0)
  105c04:	e51b3008 	ldr	r3, [fp, #-8]
  105c08:	e3530000 	cmp	r3, #0
  105c0c:	0a00002d 	beq	105cc8 <netdev_low_level_set_netmask+0xfc>
  105c10:	e51b3008 	ldr	r3, [fp, #-8]
  105c14:	e5932010 	ldr	r2, [r3, #16]
  105c18:	e51b300c 	ldr	r3, [fp, #-12]
  105c1c:	e5933000 	ldr	r3, [r3]
  105c20:	e1520003 	cmp	r2, r3
  105c24:	0a000027 	beq	105cc8 <netdev_low_level_set_netmask+0xfc>
    {
        ip_addr_copy(netdev->netmask, *netmask);
  105c28:	e51b300c 	ldr	r3, [fp, #-12]
  105c2c:	e5932000 	ldr	r2, [r3]
  105c30:	e51b3008 	ldr	r3, [fp, #-8]
  105c34:	e5832010 	str	r2, [r3, #16]

#ifdef RT_USING_SAL
        /* set network interface device flags to internet up */
        if (netdev_is_up(netdev) && netdev_is_link_up(netdev) &&
  105c38:	e51b3008 	ldr	r3, [fp, #-8]
  105c3c:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  105c40:	e2033001 	and	r3, r3, #1
  105c44:	e6ef3073 	uxtb	r3, r3
  105c48:	e3530000 	cmp	r3, #0
  105c4c:	0a000014 	beq	105ca4 <netdev_low_level_set_netmask+0xd8>
  105c50:	e51b3008 	ldr	r3, [fp, #-8]
  105c54:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  105c58:	e1a03123 	lsr	r3, r3, #2
  105c5c:	e2033001 	and	r3, r3, #1
  105c60:	e6ef3073 	uxtb	r3, r3
  105c64:	e3530000 	cmp	r3, #0
  105c68:	0a00000d 	beq	105ca4 <netdev_low_level_set_netmask+0xd8>
                !ip_addr_isany(&(netdev->ip_addr)))
  105c6c:	e51b3008 	ldr	r3, [fp, #-8]
  105c70:	e283300c 	add	r3, r3, #12
        if (netdev_is_up(netdev) && netdev_is_link_up(netdev) &&
  105c74:	e3530000 	cmp	r3, #0
  105c78:	0a000009 	beq	105ca4 <netdev_low_level_set_netmask+0xd8>
                !ip_addr_isany(&(netdev->ip_addr)))
  105c7c:	e51b3008 	ldr	r3, [fp, #-8]
  105c80:	e593300c 	ldr	r3, [r3, #12]
  105c84:	e3530000 	cmp	r3, #0
  105c88:	0a000005 	beq	105ca4 <netdev_low_level_set_netmask+0xd8>
        {
            // sal_check_netdev_internet_up(netdev);
            // check_netdev_internet_up_work(netdev);
            netdev->flags |= NETDEV_FLAG_INTERNET_UP;
  105c8c:	e51b3008 	ldr	r3, [fp, #-8]
  105c90:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  105c94:	e3833080 	orr	r3, r3, #128	; 0x80
  105c98:	e6ff2073 	uxth	r2, r3
  105c9c:	e51b3008 	ldr	r3, [fp, #-8]
  105ca0:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
        }
#endif /* RT_USING_SAL */

        /* execute netmask address change callback function */
        if (netdev->addr_callback)
  105ca4:	e51b3008 	ldr	r3, [fp, #-8]
  105ca8:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  105cac:	e3530000 	cmp	r3, #0
  105cb0:	0a000004 	beq	105cc8 <netdev_low_level_set_netmask+0xfc>
        {
            netdev->addr_callback(netdev, NETDEV_CB_ADDR_NETMASK);
  105cb4:	e51b3008 	ldr	r3, [fp, #-8]
  105cb8:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  105cbc:	e3a01001 	mov	r1, #1
  105cc0:	e51b0008 	ldr	r0, [fp, #-8]
  105cc4:	e12fff33 	blx	r3
        }
    }
}
  105cc8:	e320f000 	nop	{0}
  105ccc:	e24bd004 	sub	sp, fp, #4
  105cd0:	e8bd8800 	pop	{fp, pc}

00105cd4 <netdev_low_level_set_gw>:
 *
 * @param netdev the network interface device to change
 * @param gateway the new gateway address
 */
void netdev_low_level_set_gw(struct netdev *netdev, const ip_addr_t *gw)
{
  105cd4:	e92d4800 	push	{fp, lr}
  105cd8:	e28db004 	add	fp, sp, #4
  105cdc:	e24dd008 	sub	sp, sp, #8
  105ce0:	e50b0008 	str	r0, [fp, #-8]
  105ce4:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(gw);
  105ce8:	e51b300c 	ldr	r3, [fp, #-12]
  105cec:	e3530000 	cmp	r3, #0
  105cf0:	1a000005 	bne	105d0c <netdev_low_level_set_gw+0x38>
  105cf4:	e300229e 	movw	r2, #670	; 0x29e
  105cf8:	e3051460 	movw	r1, #21600	; 0x5460
  105cfc:	e3401014 	movt	r1, #20
  105d00:	e30501cc 	movw	r0, #20940	; 0x51cc
  105d04:	e3400014 	movt	r0, #20
  105d08:	ebfff622 	bl	103598 <rt_assert_handler>

    if (netdev && ip_addr_cmp(&(netdev->gw), gw) == 0)
  105d0c:	e51b3008 	ldr	r3, [fp, #-8]
  105d10:	e3530000 	cmp	r3, #0
  105d14:	0a00002d 	beq	105dd0 <netdev_low_level_set_gw+0xfc>
  105d18:	e51b3008 	ldr	r3, [fp, #-8]
  105d1c:	e5932014 	ldr	r2, [r3, #20]
  105d20:	e51b300c 	ldr	r3, [fp, #-12]
  105d24:	e5933000 	ldr	r3, [r3]
  105d28:	e1520003 	cmp	r2, r3
  105d2c:	0a000027 	beq	105dd0 <netdev_low_level_set_gw+0xfc>
    {
        ip_addr_copy(netdev->gw, *gw);
  105d30:	e51b300c 	ldr	r3, [fp, #-12]
  105d34:	e5932000 	ldr	r2, [r3]
  105d38:	e51b3008 	ldr	r3, [fp, #-8]
  105d3c:	e5832014 	str	r2, [r3, #20]

#ifdef RT_USING_SAL
        /* set network interface device flags to internet up */
        if (netdev_is_up(netdev) && netdev_is_link_up(netdev) &&
  105d40:	e51b3008 	ldr	r3, [fp, #-8]
  105d44:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  105d48:	e2033001 	and	r3, r3, #1
  105d4c:	e6ef3073 	uxtb	r3, r3
  105d50:	e3530000 	cmp	r3, #0
  105d54:	0a000014 	beq	105dac <netdev_low_level_set_gw+0xd8>
  105d58:	e51b3008 	ldr	r3, [fp, #-8]
  105d5c:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  105d60:	e1a03123 	lsr	r3, r3, #2
  105d64:	e2033001 	and	r3, r3, #1
  105d68:	e6ef3073 	uxtb	r3, r3
  105d6c:	e3530000 	cmp	r3, #0
  105d70:	0a00000d 	beq	105dac <netdev_low_level_set_gw+0xd8>
                !ip_addr_isany(&(netdev->ip_addr)))
  105d74:	e51b3008 	ldr	r3, [fp, #-8]
  105d78:	e283300c 	add	r3, r3, #12
        if (netdev_is_up(netdev) && netdev_is_link_up(netdev) &&
  105d7c:	e3530000 	cmp	r3, #0
  105d80:	0a000009 	beq	105dac <netdev_low_level_set_gw+0xd8>
                !ip_addr_isany(&(netdev->ip_addr)))
  105d84:	e51b3008 	ldr	r3, [fp, #-8]
  105d88:	e593300c 	ldr	r3, [r3, #12]
  105d8c:	e3530000 	cmp	r3, #0
  105d90:	0a000005 	beq	105dac <netdev_low_level_set_gw+0xd8>
        {
            // sal_check_netdev_internet_up(netdev);
            // check_netdev_internet_up_work(netdev);
            netdev->flags |= NETDEV_FLAG_INTERNET_UP;
  105d94:	e51b3008 	ldr	r3, [fp, #-8]
  105d98:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  105d9c:	e3833080 	orr	r3, r3, #128	; 0x80
  105da0:	e6ff2073 	uxth	r2, r3
  105da4:	e51b3008 	ldr	r3, [fp, #-8]
  105da8:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
        }
#endif /* RT_USING_SAL */

        /* execute gateway address change callback function */
        if (netdev->addr_callback)
  105dac:	e51b3008 	ldr	r3, [fp, #-8]
  105db0:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  105db4:	e3530000 	cmp	r3, #0
  105db8:	0a000004 	beq	105dd0 <netdev_low_level_set_gw+0xfc>
        {
            netdev->addr_callback(netdev, NETDEV_CB_ADDR_GATEWAY);
  105dbc:	e51b3008 	ldr	r3, [fp, #-8]
  105dc0:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  105dc4:	e3a01002 	mov	r1, #2
  105dc8:	e51b0008 	ldr	r0, [fp, #-8]
  105dcc:	e12fff33 	blx	r3
        }
    }
}
  105dd0:	e320f000 	nop	{0}
  105dd4:	e24bd004 	sub	sp, fp, #4
  105dd8:	e8bd8800 	pop	{fp, pc}

00105ddc <netdev_low_level_set_dns_server>:
 * @param netdev the network interface device to change
 * @param dns_server the new DNS server address
 *
 */
void netdev_low_level_set_dns_server(struct netdev *netdev, uint8_t dns_num, const ip_addr_t *dns_server)
{
  105ddc:	e92d4800 	push	{fp, lr}
  105de0:	e28db004 	add	fp, sp, #4
  105de4:	e24dd018 	sub	sp, sp, #24
  105de8:	e50b0010 	str	r0, [fp, #-16]
  105dec:	e1a03001 	mov	r3, r1
  105df0:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  105df4:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    int index;

    RT_ASSERT(dns_server);
  105df8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  105dfc:	e3530000 	cmp	r3, #0
  105e00:	1a000005 	bne	105e1c <netdev_low_level_set_dns_server+0x40>
  105e04:	e30022c3 	movw	r2, #707	; 0x2c3
  105e08:	e3051478 	movw	r1, #21624	; 0x5478
  105e0c:	e3401014 	movt	r1, #20
  105e10:	e3050278 	movw	r0, #21112	; 0x5278
  105e14:	e3400014 	movt	r0, #20
  105e18:	ebfff5de 	bl	103598 <rt_assert_handler>

    if (netdev == RT_NULL)
  105e1c:	e51b3010 	ldr	r3, [fp, #-16]
  105e20:	e3530000 	cmp	r3, #0
  105e24:	0a000023 	beq	105eb8 <netdev_low_level_set_dns_server+0xdc>
    {
        return;
    }
    /* check DNS servers is exist */
    for (index = 0; index < NETDEV_DNS_SERVERS_NUM; index++)
  105e28:	e3a03000 	mov	r3, #0
  105e2c:	e50b3008 	str	r3, [fp, #-8]
  105e30:	ea00000a 	b	105e60 <netdev_low_level_set_dns_server+0x84>
    {
        if (ip_addr_cmp(&(netdev->dns_servers[index]), dns_server))
  105e34:	e51b3010 	ldr	r3, [fp, #-16]
  105e38:	e51b2008 	ldr	r2, [fp, #-8]
  105e3c:	e2822006 	add	r2, r2, #6
  105e40:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  105e44:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  105e48:	e5933000 	ldr	r3, [r3]
  105e4c:	e1520003 	cmp	r2, r3
  105e50:	0a00001a 	beq	105ec0 <netdev_low_level_set_dns_server+0xe4>
    for (index = 0; index < NETDEV_DNS_SERVERS_NUM; index++)
  105e54:	e51b3008 	ldr	r3, [fp, #-8]
  105e58:	e2833001 	add	r3, r3, #1
  105e5c:	e50b3008 	str	r3, [fp, #-8]
  105e60:	e51b3008 	ldr	r3, [fp, #-8]
  105e64:	e3530001 	cmp	r3, #1
  105e68:	9afffff1 	bls	105e34 <netdev_low_level_set_dns_server+0x58>
        {
            return;
        }
    }

    if (dns_num < NETDEV_DNS_SERVERS_NUM)
  105e6c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  105e70:	e3530001 	cmp	r3, #1
  105e74:	8a000012 	bhi	105ec4 <netdev_low_level_set_dns_server+0xe8>
    {
        ip_addr_copy(netdev->dns_servers[dns_num], *dns_server);
  105e78:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  105e7c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  105e80:	e5931000 	ldr	r1, [r3]
  105e84:	e51b3010 	ldr	r3, [fp, #-16]
  105e88:	e2822006 	add	r2, r2, #6
  105e8c:	e7831102 	str	r1, [r3, r2, lsl #2]

        /* execute DNS servers address change callback function */
        if (netdev->addr_callback)
  105e90:	e51b3010 	ldr	r3, [fp, #-16]
  105e94:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  105e98:	e3530000 	cmp	r3, #0
  105e9c:	0a000008 	beq	105ec4 <netdev_low_level_set_dns_server+0xe8>
        {
            netdev->addr_callback(netdev, NETDEV_CB_ADDR_DNS_SERVER);
  105ea0:	e51b3010 	ldr	r3, [fp, #-16]
  105ea4:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  105ea8:	e3a01003 	mov	r1, #3
  105eac:	e51b0010 	ldr	r0, [fp, #-16]
  105eb0:	e12fff33 	blx	r3
  105eb4:	ea000002 	b	105ec4 <netdev_low_level_set_dns_server+0xe8>
        return;
  105eb8:	e320f000 	nop	{0}
  105ebc:	ea000000 	b	105ec4 <netdev_low_level_set_dns_server+0xe8>
            return;
  105ec0:	e320f000 	nop	{0}
        }
    }
}
  105ec4:	e24bd004 	sub	sp, fp, #4
  105ec8:	e8bd8800 	pop	{fp, pc}

00105ecc <netdev_low_level_set_status>:
 *
 * @param netdev the network interface device to change
 * @param is_up the new status
 */
void netdev_low_level_set_status(struct netdev *netdev, rt_bool_t is_up)
{
  105ecc:	e92d4800 	push	{fp, lr}
  105ed0:	e28db004 	add	fp, sp, #4
  105ed4:	e24dd008 	sub	sp, sp, #8
  105ed8:	e50b0008 	str	r0, [fp, #-8]
  105edc:	e50b100c 	str	r1, [fp, #-12]
    if (netdev && netdev_is_up(netdev) != is_up)
  105ee0:	e51b3008 	ldr	r3, [fp, #-8]
  105ee4:	e3530000 	cmp	r3, #0
  105ee8:	0a000024 	beq	105f80 <netdev_low_level_set_status+0xb4>
  105eec:	e51b3008 	ldr	r3, [fp, #-8]
  105ef0:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  105ef4:	e2033001 	and	r3, r3, #1
  105ef8:	e51b200c 	ldr	r2, [fp, #-12]
  105efc:	e1520003 	cmp	r2, r3
  105f00:	0a00001e 	beq	105f80 <netdev_low_level_set_status+0xb4>
    {
        if (is_up)
  105f04:	e51b300c 	ldr	r3, [fp, #-12]
  105f08:	e3530000 	cmp	r3, #0
  105f0c:	0a000006 	beq	105f2c <netdev_low_level_set_status+0x60>
        {
            netdev->flags |= NETDEV_FLAG_UP;
  105f10:	e51b3008 	ldr	r3, [fp, #-8]
  105f14:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  105f18:	e3833001 	orr	r3, r3, #1
  105f1c:	e6ff2073 	uxth	r2, r3
  105f20:	e51b3008 	ldr	r3, [fp, #-8]
  105f24:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
  105f28:	ea000005 	b	105f44 <netdev_low_level_set_status+0x78>
        }
        else
        {
            netdev->flags &= ~NETDEV_FLAG_UP;
  105f2c:	e51b3008 	ldr	r3, [fp, #-8]
  105f30:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  105f34:	e3c33001 	bic	r3, r3, #1
  105f38:	e6ff2073 	uxth	r2, r3
  105f3c:	e51b3008 	ldr	r3, [fp, #-8]
  105f40:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
            netdev_auto_change_default(netdev);
#endif /* NETDEV_USING_AUTO_DEFAULT */
        }

        /* execute  network interface device status change callback function */
        if (netdev->status_callback)
  105f44:	e51b3008 	ldr	r3, [fp, #-8]
  105f48:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  105f4c:	e3530000 	cmp	r3, #0
  105f50:	0a00000a 	beq	105f80 <netdev_low_level_set_status+0xb4>
        {
            netdev->status_callback(netdev, is_up ? NETDEV_CB_STATUS_UP : NETDEV_CB_STATUS_DOWN);
  105f54:	e51b3008 	ldr	r3, [fp, #-8]
  105f58:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  105f5c:	e51b200c 	ldr	r2, [fp, #-12]
  105f60:	e3520000 	cmp	r2, #0
  105f64:	0a000001 	beq	105f70 <netdev_low_level_set_status+0xa4>
  105f68:	e3a02004 	mov	r2, #4
  105f6c:	ea000000 	b	105f74 <netdev_low_level_set_status+0xa8>
  105f70:	e3a02005 	mov	r2, #5
  105f74:	e1a01002 	mov	r1, r2
  105f78:	e51b0008 	ldr	r0, [fp, #-8]
  105f7c:	e12fff33 	blx	r3
        }
    }
}
  105f80:	e320f000 	nop	{0}
  105f84:	e24bd004 	sub	sp, fp, #4
  105f88:	e8bd8800 	pop	{fp, pc}

00105f8c <netdev_low_level_set_link_status>:
 *
 * @param netdev the network interface device to change
 * @param is_up the new link status
 */
void netdev_low_level_set_link_status(struct netdev *netdev, rt_bool_t is_up)
{
  105f8c:	e92d4800 	push	{fp, lr}
  105f90:	e28db004 	add	fp, sp, #4
  105f94:	e24dd008 	sub	sp, sp, #8
  105f98:	e50b0008 	str	r0, [fp, #-8]
  105f9c:	e50b100c 	str	r1, [fp, #-12]
    if (netdev && netdev_is_link_up(netdev) != is_up)
  105fa0:	e51b3008 	ldr	r3, [fp, #-8]
  105fa4:	e3530000 	cmp	r3, #0
  105fa8:	0a00003f 	beq	1060ac <netdev_low_level_set_link_status+0x120>
  105fac:	e51b3008 	ldr	r3, [fp, #-8]
  105fb0:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  105fb4:	e1a03123 	lsr	r3, r3, #2
  105fb8:	e2033001 	and	r3, r3, #1
  105fbc:	e51b200c 	ldr	r2, [fp, #-12]
  105fc0:	e1520003 	cmp	r2, r3
  105fc4:	0a000038 	beq	1060ac <netdev_low_level_set_link_status+0x120>
    {
        if (is_up)
  105fc8:	e51b300c 	ldr	r3, [fp, #-12]
  105fcc:	e3530000 	cmp	r3, #0
  105fd0:	0a00001a 	beq	106040 <netdev_low_level_set_link_status+0xb4>
        {
            netdev->flags |= NETDEV_FLAG_LINK_UP;
  105fd4:	e51b3008 	ldr	r3, [fp, #-8]
  105fd8:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  105fdc:	e3833004 	orr	r3, r3, #4
  105fe0:	e6ff2073 	uxth	r2, r3
  105fe4:	e51b3008 	ldr	r3, [fp, #-8]
  105fe8:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a

#ifdef RT_USING_SAL
            /* set network interface device flags to internet up */
            if (netdev_is_up(netdev) && !ip_addr_isany(&(netdev->ip_addr)))
  105fec:	e51b3008 	ldr	r3, [fp, #-8]
  105ff0:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  105ff4:	e2033001 	and	r3, r3, #1
  105ff8:	e6ef3073 	uxtb	r3, r3
  105ffc:	e3530000 	cmp	r3, #0
  106000:	0a00001a 	beq	106070 <netdev_low_level_set_link_status+0xe4>
  106004:	e51b3008 	ldr	r3, [fp, #-8]
  106008:	e283300c 	add	r3, r3, #12
  10600c:	e3530000 	cmp	r3, #0
  106010:	0a000016 	beq	106070 <netdev_low_level_set_link_status+0xe4>
  106014:	e51b3008 	ldr	r3, [fp, #-8]
  106018:	e593300c 	ldr	r3, [r3, #12]
  10601c:	e3530000 	cmp	r3, #0
  106020:	0a000012 	beq	106070 <netdev_low_level_set_link_status+0xe4>
            {
                // sal_check_netdev_internet_up(netdev);
                // check_netdev_internet_up_work(netdev);
                netdev->flags |= NETDEV_FLAG_INTERNET_UP;
  106024:	e51b3008 	ldr	r3, [fp, #-8]
  106028:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  10602c:	e3833080 	orr	r3, r3, #128	; 0x80
  106030:	e6ff2073 	uxth	r2, r3
  106034:	e51b3008 	ldr	r3, [fp, #-8]
  106038:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
  10603c:	ea00000b 	b	106070 <netdev_low_level_set_link_status+0xe4>
            }
#endif /* RT_USING_SAL */
        }
        else
        {
            netdev->flags &= ~NETDEV_FLAG_LINK_UP;
  106040:	e51b3008 	ldr	r3, [fp, #-8]
  106044:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106048:	e3c33004 	bic	r3, r3, #4
  10604c:	e6ff2073 	uxth	r2, r3
  106050:	e51b3008 	ldr	r3, [fp, #-8]
  106054:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a

            /* set network interface device flags to internet down */
            netdev->flags &= ~NETDEV_FLAG_INTERNET_UP;
  106058:	e51b3008 	ldr	r3, [fp, #-8]
  10605c:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106060:	e3c33080 	bic	r3, r3, #128	; 0x80
  106064:	e6ff2073 	uxth	r2, r3
  106068:	e51b3008 	ldr	r3, [fp, #-8]
  10606c:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
            /* change to the first link_up network interface device automatically */
            netdev_auto_change_default(netdev);
#endif /* NETDEV_USING_AUTO_DEFAULT */

        /* execute link status change callback function */
        if (netdev->status_callback)
  106070:	e51b3008 	ldr	r3, [fp, #-8]
  106074:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  106078:	e3530000 	cmp	r3, #0
  10607c:	0a00000a 	beq	1060ac <netdev_low_level_set_link_status+0x120>
        {
            netdev->status_callback(netdev, is_up ? NETDEV_CB_STATUS_LINK_UP : NETDEV_CB_STATUS_LINK_DOWN);
  106080:	e51b3008 	ldr	r3, [fp, #-8]
  106084:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  106088:	e51b200c 	ldr	r2, [fp, #-12]
  10608c:	e3520000 	cmp	r2, #0
  106090:	0a000001 	beq	10609c <netdev_low_level_set_link_status+0x110>
  106094:	e3a02006 	mov	r2, #6
  106098:	ea000000 	b	1060a0 <netdev_low_level_set_link_status+0x114>
  10609c:	e3a02007 	mov	r2, #7
  1060a0:	e1a01002 	mov	r1, r2
  1060a4:	e51b0008 	ldr	r0, [fp, #-8]
  1060a8:	e12fff33 	blx	r3
        }
    }
}
  1060ac:	e320f000 	nop	{0}
  1060b0:	e24bd004 	sub	sp, fp, #4
  1060b4:	e8bd8800 	pop	{fp, pc}

001060b8 <netdev_low_level_set_dhcp_status>:
 *
 * @param netdev the network interface device to change
 * @param is_up the new DHCP status
 */
void netdev_low_level_set_dhcp_status(struct netdev *netdev, rt_bool_t is_enable)
{
  1060b8:	e92d4800 	push	{fp, lr}
  1060bc:	e28db004 	add	fp, sp, #4
  1060c0:	e24dd008 	sub	sp, sp, #8
  1060c4:	e50b0008 	str	r0, [fp, #-8]
  1060c8:	e50b100c 	str	r1, [fp, #-12]
    if (netdev && netdev_is_dhcp_enabled(netdev) != is_enable)
  1060cc:	e51b3008 	ldr	r3, [fp, #-8]
  1060d0:	e3530000 	cmp	r3, #0
  1060d4:	0a000025 	beq	106170 <netdev_low_level_set_dhcp_status+0xb8>
  1060d8:	e51b3008 	ldr	r3, [fp, #-8]
  1060dc:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1060e0:	e1a03423 	lsr	r3, r3, #8
  1060e4:	e2033001 	and	r3, r3, #1
  1060e8:	e51b200c 	ldr	r2, [fp, #-12]
  1060ec:	e1520003 	cmp	r2, r3
  1060f0:	0a00001e 	beq	106170 <netdev_low_level_set_dhcp_status+0xb8>
    {
        if (is_enable)
  1060f4:	e51b300c 	ldr	r3, [fp, #-12]
  1060f8:	e3530000 	cmp	r3, #0
  1060fc:	0a000006 	beq	10611c <netdev_low_level_set_dhcp_status+0x64>
        {
            netdev->flags |= NETDEV_FLAG_DHCP;
  106100:	e51b3008 	ldr	r3, [fp, #-8]
  106104:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106108:	e3833c01 	orr	r3, r3, #256	; 0x100
  10610c:	e6ff2073 	uxth	r2, r3
  106110:	e51b3008 	ldr	r3, [fp, #-8]
  106114:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
  106118:	ea000005 	b	106134 <netdev_low_level_set_dhcp_status+0x7c>
        }
        else
        {
            netdev->flags &= ~NETDEV_FLAG_DHCP;
  10611c:	e51b3008 	ldr	r3, [fp, #-8]
  106120:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106124:	e3c33c01 	bic	r3, r3, #256	; 0x100
  106128:	e6ff2073 	uxth	r2, r3
  10612c:	e51b3008 	ldr	r3, [fp, #-8]
  106130:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
        }

        /* execute DHCP status change callback function */
        if (netdev->status_callback)
  106134:	e51b3008 	ldr	r3, [fp, #-8]
  106138:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10613c:	e3530000 	cmp	r3, #0
  106140:	0a00000a 	beq	106170 <netdev_low_level_set_dhcp_status+0xb8>
        {
            netdev->status_callback(netdev, is_enable ? NETDEV_CB_STATUS_DHCP_ENABLE : NETDEV_CB_STATUS_DHCP_DISABLE);
  106144:	e51b3008 	ldr	r3, [fp, #-8]
  106148:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10614c:	e51b200c 	ldr	r2, [fp, #-12]
  106150:	e3520000 	cmp	r2, #0
  106154:	0a000001 	beq	106160 <netdev_low_level_set_dhcp_status+0xa8>
  106158:	e3a0200a 	mov	r2, #10
  10615c:	ea000000 	b	106164 <netdev_low_level_set_dhcp_status+0xac>
  106160:	e3a0200b 	mov	r2, #11
  106164:	e1a01002 	mov	r1, r2
  106168:	e51b0008 	ldr	r0, [fp, #-8]
  10616c:	e12fff33 	blx	r3
        }
    }
}
  106170:	e320f000 	nop	{0}
  106174:	e24bd004 	sub	sp, fp, #4
  106178:	e8bd8800 	pop	{fp, pc}

0010617c <netdev_ip4addr_aton>:
 * @param cp IP address in ascii representation (e.g. "127.0.0.1")
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int netdev_ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
  10617c:	e92d4800 	push	{fp, lr}
  106180:	e28db004 	add	fp, sp, #4
  106184:	e24dd028 	sub	sp, sp, #40	; 0x28
  106188:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10618c:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
    uint32_t val;
    uint8_t base;
    char c;
    uint32_t parts[4];
    uint32_t *pp = parts;
  106190:	e24b3020 	sub	r3, fp, #32
  106194:	e50b3010 	str	r3, [fp, #-16]

    c = *cp;
  106198:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10619c:	e5d33000 	ldrb	r3, [r3]
  1061a0:	e54b300a 	strb	r3, [fp, #-10]
        /*
         * Collect number up to ``.''.
         * Values are specified as for C:
         * 0x=hex, 0=octal, 1-9=decimal.
         */
        if (!isdigit(c))
  1061a4:	e55b300a 	ldrb	r3, [fp, #-10]
  1061a8:	e353002f 	cmp	r3, #47	; 0x2f
  1061ac:	9a000002 	bls	1061bc <netdev_ip4addr_aton+0x40>
  1061b0:	e55b300a 	ldrb	r3, [fp, #-10]
  1061b4:	e3530039 	cmp	r3, #57	; 0x39
  1061b8:	9a000001 	bls	1061c4 <netdev_ip4addr_aton+0x48>
        {
            return 0;
  1061bc:	e3a03000 	mov	r3, #0
  1061c0:	ea0000f7 	b	1065a4 <netdev_ip4addr_aton+0x428>
        }
        val = 0;
  1061c4:	e3a03000 	mov	r3, #0
  1061c8:	e50b3008 	str	r3, [fp, #-8]
        base = 10;
  1061cc:	e3a0300a 	mov	r3, #10
  1061d0:	e54b3009 	strb	r3, [fp, #-9]
        if (c == '0')
  1061d4:	e55b300a 	ldrb	r3, [fp, #-10]
  1061d8:	e3530030 	cmp	r3, #48	; 0x30
  1061dc:	1a000016 	bne	10623c <netdev_ip4addr_aton+0xc0>
        {
            c = *++cp;
  1061e0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1061e4:	e2833001 	add	r3, r3, #1
  1061e8:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  1061ec:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1061f0:	e5d33000 	ldrb	r3, [r3]
  1061f4:	e54b300a 	strb	r3, [fp, #-10]
            if (c == 'x' || c == 'X')
  1061f8:	e55b300a 	ldrb	r3, [fp, #-10]
  1061fc:	e3530078 	cmp	r3, #120	; 0x78
  106200:	0a000002 	beq	106210 <netdev_ip4addr_aton+0x94>
  106204:	e55b300a 	ldrb	r3, [fp, #-10]
  106208:	e3530058 	cmp	r3, #88	; 0x58
  10620c:	1a000008 	bne	106234 <netdev_ip4addr_aton+0xb8>
            {
                base = 16;
  106210:	e3a03010 	mov	r3, #16
  106214:	e54b3009 	strb	r3, [fp, #-9]
                c = *++cp;
  106218:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10621c:	e2833001 	add	r3, r3, #1
  106220:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  106224:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106228:	e5d33000 	ldrb	r3, [r3]
  10622c:	e54b300a 	strb	r3, [fp, #-10]
  106230:	ea000001 	b	10623c <netdev_ip4addr_aton+0xc0>
            }
            else
            {
                base = 8;
  106234:	e3a03008 	mov	r3, #8
  106238:	e54b3009 	strb	r3, [fp, #-9]
            }
        }
        for (;;)
        {
            if (isdigit(c))
  10623c:	e55b300a 	ldrb	r3, [fp, #-10]
  106240:	e353002f 	cmp	r3, #47	; 0x2f
  106244:	9a000010 	bls	10628c <netdev_ip4addr_aton+0x110>
  106248:	e55b300a 	ldrb	r3, [fp, #-10]
  10624c:	e3530039 	cmp	r3, #57	; 0x39
  106250:	8a00000d 	bhi	10628c <netdev_ip4addr_aton+0x110>
            {
                val = (val * base) + (uint32_t) (c - '0');
  106254:	e55b3009 	ldrb	r3, [fp, #-9]
  106258:	e51b2008 	ldr	r2, [fp, #-8]
  10625c:	e0020392 	mul	r2, r2, r3
  106260:	e55b300a 	ldrb	r3, [fp, #-10]
  106264:	e0823003 	add	r3, r2, r3
  106268:	e2433030 	sub	r3, r3, #48	; 0x30
  10626c:	e50b3008 	str	r3, [fp, #-8]
                c = *++cp;
  106270:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106274:	e2833001 	add	r3, r3, #1
  106278:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  10627c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106280:	e5d33000 	ldrb	r3, [r3]
  106284:	e54b300a 	strb	r3, [fp, #-10]
  106288:	ea00002a 	b	106338 <netdev_ip4addr_aton+0x1bc>
            }
            else if (base == 16 && isxdigit(c))
  10628c:	e55b3009 	ldrb	r3, [fp, #-9]
  106290:	e3530010 	cmp	r3, #16
  106294:	1a000028 	bne	10633c <netdev_ip4addr_aton+0x1c0>
  106298:	e55b300a 	ldrb	r3, [fp, #-10]
  10629c:	e353002f 	cmp	r3, #47	; 0x2f
  1062a0:	9a000002 	bls	1062b0 <netdev_ip4addr_aton+0x134>
  1062a4:	e55b300a 	ldrb	r3, [fp, #-10]
  1062a8:	e3530039 	cmp	r3, #57	; 0x39
  1062ac:	9a00000b 	bls	1062e0 <netdev_ip4addr_aton+0x164>
  1062b0:	e55b300a 	ldrb	r3, [fp, #-10]
  1062b4:	e3530060 	cmp	r3, #96	; 0x60
  1062b8:	9a000002 	bls	1062c8 <netdev_ip4addr_aton+0x14c>
  1062bc:	e55b300a 	ldrb	r3, [fp, #-10]
  1062c0:	e3530066 	cmp	r3, #102	; 0x66
  1062c4:	9a000005 	bls	1062e0 <netdev_ip4addr_aton+0x164>
  1062c8:	e55b300a 	ldrb	r3, [fp, #-10]
  1062cc:	e3530040 	cmp	r3, #64	; 0x40
  1062d0:	9a000019 	bls	10633c <netdev_ip4addr_aton+0x1c0>
  1062d4:	e55b300a 	ldrb	r3, [fp, #-10]
  1062d8:	e3530046 	cmp	r3, #70	; 0x46
  1062dc:	8a000016 	bhi	10633c <netdev_ip4addr_aton+0x1c0>
            {
                val = (val << 4) | (uint32_t) (c + 10 - (islower(c) ? 'a' : 'A'));
  1062e0:	e51b3008 	ldr	r3, [fp, #-8]
  1062e4:	e1a03203 	lsl	r3, r3, #4
  1062e8:	e55b200a 	ldrb	r2, [fp, #-10]
  1062ec:	e282100a 	add	r1, r2, #10
  1062f0:	e55b200a 	ldrb	r2, [fp, #-10]
  1062f4:	e3520060 	cmp	r2, #96	; 0x60
  1062f8:	9a000004 	bls	106310 <netdev_ip4addr_aton+0x194>
  1062fc:	e55b200a 	ldrb	r2, [fp, #-10]
  106300:	e352007a 	cmp	r2, #122	; 0x7a
  106304:	8a000001 	bhi	106310 <netdev_ip4addr_aton+0x194>
  106308:	e3a02061 	mov	r2, #97	; 0x61
  10630c:	ea000000 	b	106314 <netdev_ip4addr_aton+0x198>
  106310:	e3a02041 	mov	r2, #65	; 0x41
  106314:	e0412002 	sub	r2, r1, r2
  106318:	e1833002 	orr	r3, r3, r2
  10631c:	e50b3008 	str	r3, [fp, #-8]
                c = *++cp;
  106320:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106324:	e2833001 	add	r3, r3, #1
  106328:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  10632c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106330:	e5d33000 	ldrb	r3, [r3]
  106334:	e54b300a 	strb	r3, [fp, #-10]
            if (isdigit(c))
  106338:	eaffffbf 	b	10623c <netdev_ip4addr_aton+0xc0>
            else
            {
                break;
            }
        }
        if (c == '.')
  10633c:	e55b300a 	ldrb	r3, [fp, #-10]
  106340:	e353002e 	cmp	r3, #46	; 0x2e
  106344:	1a000012 	bne	106394 <netdev_ip4addr_aton+0x218>
             * Internet format:
             *  a.b.c.d
             *  a.b.c   (with c treated as 16 bits)
             *  a.b (with b treated as 24 bits)
             */
            if (pp >= parts + 3)
  106348:	e24b3020 	sub	r3, fp, #32
  10634c:	e283300c 	add	r3, r3, #12
  106350:	e51b2010 	ldr	r2, [fp, #-16]
  106354:	e1520003 	cmp	r2, r3
  106358:	3a000001 	bcc	106364 <netdev_ip4addr_aton+0x1e8>
            {
                return 0;
  10635c:	e3a03000 	mov	r3, #0
  106360:	ea00008f 	b	1065a4 <netdev_ip4addr_aton+0x428>
            }
            *pp++ = val;
  106364:	e51b3010 	ldr	r3, [fp, #-16]
  106368:	e2832004 	add	r2, r3, #4
  10636c:	e50b2010 	str	r2, [fp, #-16]
  106370:	e51b2008 	ldr	r2, [fp, #-8]
  106374:	e5832000 	str	r2, [r3]
            c = *++cp;
  106378:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10637c:	e2833001 	add	r3, r3, #1
  106380:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  106384:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106388:	e5d33000 	ldrb	r3, [r3]
  10638c:	e54b300a 	strb	r3, [fp, #-10]
        if (!isdigit(c))
  106390:	eaffff83 	b	1061a4 <netdev_ip4addr_aton+0x28>
        }
        else
        {
            break;
  106394:	e320f000 	nop	{0}
        }
    }
    /*
     * Check for trailing characters.
     */
    if (c != '\0' && !isspace(c))
  106398:	e55b300a 	ldrb	r3, [fp, #-10]
  10639c:	e3530000 	cmp	r3, #0
  1063a0:	0a000013 	beq	1063f4 <netdev_ip4addr_aton+0x278>
  1063a4:	e55b300a 	ldrb	r3, [fp, #-10]
  1063a8:	e3530020 	cmp	r3, #32
  1063ac:	0a000010 	beq	1063f4 <netdev_ip4addr_aton+0x278>
  1063b0:	e55b300a 	ldrb	r3, [fp, #-10]
  1063b4:	e353000c 	cmp	r3, #12
  1063b8:	0a00000d 	beq	1063f4 <netdev_ip4addr_aton+0x278>
  1063bc:	e55b300a 	ldrb	r3, [fp, #-10]
  1063c0:	e353000a 	cmp	r3, #10
  1063c4:	0a00000a 	beq	1063f4 <netdev_ip4addr_aton+0x278>
  1063c8:	e55b300a 	ldrb	r3, [fp, #-10]
  1063cc:	e353000d 	cmp	r3, #13
  1063d0:	0a000007 	beq	1063f4 <netdev_ip4addr_aton+0x278>
  1063d4:	e55b300a 	ldrb	r3, [fp, #-10]
  1063d8:	e3530009 	cmp	r3, #9
  1063dc:	0a000004 	beq	1063f4 <netdev_ip4addr_aton+0x278>
  1063e0:	e55b300a 	ldrb	r3, [fp, #-10]
  1063e4:	e353000b 	cmp	r3, #11
  1063e8:	0a000001 	beq	1063f4 <netdev_ip4addr_aton+0x278>
    {
        return 0;
  1063ec:	e3a03000 	mov	r3, #0
  1063f0:	ea00006b 	b	1065a4 <netdev_ip4addr_aton+0x428>
    }
    /*
     * Concoct the address according to
     * the number of parts specified.
     */
    switch (pp - parts + 1)
  1063f4:	e51b2010 	ldr	r2, [fp, #-16]
  1063f8:	e24b3020 	sub	r3, fp, #32
  1063fc:	e0423003 	sub	r3, r2, r3
  106400:	e1a03143 	asr	r3, r3, #2
  106404:	e2833001 	add	r3, r3, #1
  106408:	e3530004 	cmp	r3, #4
  10640c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  106410:	ea000048 	b	106538 <netdev_ip4addr_aton+0x3bc>
  106414:	00106428 	.word	0x00106428
  106418:	00106554 	.word	0x00106554
  10641c:	00106430 	.word	0x00106430
  106420:	00106470 	.word	0x00106470
  106424:	001064c8 	.word	0x001064c8
    {

    case 0:
        return 0; /* initial nondigit */
  106428:	e3a03000 	mov	r3, #0
  10642c:	ea00005c 	b	1065a4 <netdev_ip4addr_aton+0x428>

    case 1: /* a -- 32 bits */
        break;

    case 2: /* a.b -- 8.24 bits */
        if (val > 0xffffffUL)
  106430:	e51b3008 	ldr	r3, [fp, #-8]
  106434:	e3530401 	cmp	r3, #16777216	; 0x1000000
  106438:	3a000001 	bcc	106444 <netdev_ip4addr_aton+0x2c8>
        {
            return 0;
  10643c:	e3a03000 	mov	r3, #0
  106440:	ea000057 	b	1065a4 <netdev_ip4addr_aton+0x428>
        }
        if (parts[0] > 0xff)
  106444:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  106448:	e35300ff 	cmp	r3, #255	; 0xff
  10644c:	9a000001 	bls	106458 <netdev_ip4addr_aton+0x2dc>
        {
            return 0;
  106450:	e3a03000 	mov	r3, #0
  106454:	ea000052 	b	1065a4 <netdev_ip4addr_aton+0x428>
        }
        val |= parts[0] << 24;
  106458:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10645c:	e1a03c03 	lsl	r3, r3, #24
  106460:	e51b2008 	ldr	r2, [fp, #-8]
  106464:	e1823003 	orr	r3, r2, r3
  106468:	e50b3008 	str	r3, [fp, #-8]
        break;
  10646c:	ea000039 	b	106558 <netdev_ip4addr_aton+0x3dc>

    case 3: /* a.b.c -- 8.8.16 bits */
        if (val > 0xffff)
  106470:	e51b3008 	ldr	r3, [fp, #-8]
  106474:	e3530801 	cmp	r3, #65536	; 0x10000
  106478:	3a000001 	bcc	106484 <netdev_ip4addr_aton+0x308>
        {
            return 0;
  10647c:	e3a03000 	mov	r3, #0
  106480:	ea000047 	b	1065a4 <netdev_ip4addr_aton+0x428>
        }
        if ((parts[0] > 0xff) || (parts[1] > 0xff))
  106484:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  106488:	e35300ff 	cmp	r3, #255	; 0xff
  10648c:	8a000002 	bhi	10649c <netdev_ip4addr_aton+0x320>
  106490:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  106494:	e35300ff 	cmp	r3, #255	; 0xff
  106498:	9a000001 	bls	1064a4 <netdev_ip4addr_aton+0x328>
        {
            return 0;
  10649c:	e3a03000 	mov	r3, #0
  1064a0:	ea00003f 	b	1065a4 <netdev_ip4addr_aton+0x428>
        }
        val |= (parts[0] << 24) | (parts[1] << 16);
  1064a4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1064a8:	e1a02c03 	lsl	r2, r3, #24
  1064ac:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1064b0:	e1a03803 	lsl	r3, r3, #16
  1064b4:	e1823003 	orr	r3, r2, r3
  1064b8:	e51b2008 	ldr	r2, [fp, #-8]
  1064bc:	e1823003 	orr	r3, r2, r3
  1064c0:	e50b3008 	str	r3, [fp, #-8]
        break;
  1064c4:	ea000023 	b	106558 <netdev_ip4addr_aton+0x3dc>

    case 4: /* a.b.c.d -- 8.8.8.8 bits */
        if (val > 0xff)
  1064c8:	e51b3008 	ldr	r3, [fp, #-8]
  1064cc:	e35300ff 	cmp	r3, #255	; 0xff
  1064d0:	9a000001 	bls	1064dc <netdev_ip4addr_aton+0x360>
        {
            return 0;
  1064d4:	e3a03000 	mov	r3, #0
  1064d8:	ea000031 	b	1065a4 <netdev_ip4addr_aton+0x428>
        }
        if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff))
  1064dc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1064e0:	e35300ff 	cmp	r3, #255	; 0xff
  1064e4:	8a000005 	bhi	106500 <netdev_ip4addr_aton+0x384>
  1064e8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1064ec:	e35300ff 	cmp	r3, #255	; 0xff
  1064f0:	8a000002 	bhi	106500 <netdev_ip4addr_aton+0x384>
  1064f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1064f8:	e35300ff 	cmp	r3, #255	; 0xff
  1064fc:	9a000001 	bls	106508 <netdev_ip4addr_aton+0x38c>
        {
            return 0;
  106500:	e3a03000 	mov	r3, #0
  106504:	ea000026 	b	1065a4 <netdev_ip4addr_aton+0x428>
        }
        val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
  106508:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10650c:	e1a02c03 	lsl	r2, r3, #24
  106510:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  106514:	e1a03803 	lsl	r3, r3, #16
  106518:	e1822003 	orr	r2, r2, r3
  10651c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  106520:	e1a03403 	lsl	r3, r3, #8
  106524:	e1823003 	orr	r3, r2, r3
  106528:	e51b2008 	ldr	r2, [fp, #-8]
  10652c:	e1823003 	orr	r3, r2, r3
  106530:	e50b3008 	str	r3, [fp, #-8]
        break;
  106534:	ea000007 	b	106558 <netdev_ip4addr_aton+0x3dc>
    default:
        RT_ASSERT(0);
  106538:	e3a020a7 	mov	r2, #167	; 0xa7
  10653c:	e305149c 	movw	r1, #21660	; 0x549c
  106540:	e3401014 	movt	r1, #20
  106544:	e3050498 	movw	r0, #21656	; 0x5498
  106548:	e3400014 	movt	r0, #20
  10654c:	ebfff411 	bl	103598 <rt_assert_handler>
        break;
  106550:	ea000000 	b	106558 <netdev_ip4addr_aton+0x3dc>
        break;
  106554:	e320f000 	nop	{0}
    }
    if (addr)
  106558:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10655c:	e3530000 	cmp	r3, #0
  106560:	0a00000e 	beq	1065a0 <netdev_ip4addr_aton+0x424>
    {
        ip4_addr_set_u32(addr, htonl(val));
  106564:	e51b3008 	ldr	r3, [fp, #-8]
  106568:	e1a02c03 	lsl	r2, r3, #24
  10656c:	e51b3008 	ldr	r3, [fp, #-8]
  106570:	e1a03403 	lsl	r3, r3, #8
  106574:	e20338ff 	and	r3, r3, #16711680	; 0xff0000
  106578:	e1822003 	orr	r2, r2, r3
  10657c:	e51b3008 	ldr	r3, [fp, #-8]
  106580:	e1a03423 	lsr	r3, r3, #8
  106584:	e2033cff 	and	r3, r3, #65280	; 0xff00
  106588:	e1822003 	orr	r2, r2, r3
  10658c:	e51b3008 	ldr	r3, [fp, #-8]
  106590:	e1a03c23 	lsr	r3, r3, #24
  106594:	e1822003 	orr	r2, r2, r3
  106598:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10659c:	e5832000 	str	r2, [r3]
    }
    return 1;
  1065a0:	e3a03001 	mov	r3, #1
}
  1065a4:	e1a00003 	mov	r0, r3
  1065a8:	e24bd004 	sub	sp, fp, #4
  1065ac:	e8bd8800 	pop	{fp, pc}

001065b0 <netdev_ip4addr_ntoa_r>:
 * @param buflen length of buf
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *netdev_ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
  1065b0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1065b4:	e28db000 	add	fp, sp, #0
  1065b8:	e24dd034 	sub	sp, sp, #52	; 0x34
  1065bc:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  1065c0:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  1065c4:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
    char *rp;
    uint8_t *ap;
    uint8_t rem;
    uint8_t n;
    uint8_t i;
    int len = 0;
  1065c8:	e3a03000 	mov	r3, #0
  1065cc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

    s_addr = ip4_addr_get_u32(addr);
  1065d0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1065d4:	e5933000 	ldr	r3, [r3]
  1065d8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    rp = buf;
  1065dc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1065e0:	e50b3008 	str	r3, [fp, #-8]
    ap = (uint8_t *) &s_addr;
  1065e4:	e24b301c 	sub	r3, fp, #28
  1065e8:	e50b300c 	str	r3, [fp, #-12]
    for (n = 0; n < 4; n++)
  1065ec:	e3a03000 	mov	r3, #0
  1065f0:	e54b300d 	strb	r3, [fp, #-13]
  1065f4:	ea00004b 	b	106728 <netdev_ip4addr_ntoa_r+0x178>
    {
        i = 0;
  1065f8:	e3a03000 	mov	r3, #0
  1065fc:	e54b300e 	strb	r3, [fp, #-14]
        do
        {
            rem = *ap % (uint8_t) 10;
  106600:	e51b300c 	ldr	r3, [fp, #-12]
  106604:	e5d31000 	ldrb	r1, [r3]
  106608:	e30c3ccd 	movw	r3, #52429	; 0xcccd
  10660c:	e34c3ccc 	movt	r3, #52428	; 0xcccc
  106610:	e0832391 	umull	r2, r3, r1, r3
  106614:	e1a031a3 	lsr	r3, r3, #3
  106618:	e3a0200a 	mov	r2, #10
  10661c:	e0030392 	mul	r3, r2, r3
  106620:	e0413003 	sub	r3, r1, r3
  106624:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
            *ap /= (uint8_t) 10;
  106628:	e51b300c 	ldr	r3, [fp, #-12]
  10662c:	e5d32000 	ldrb	r2, [r3]
  106630:	e30c3ccd 	movw	r3, #52429	; 0xcccd
  106634:	e34c3ccc 	movt	r3, #52428	; 0xcccc
  106638:	e0832392 	umull	r2, r3, r2, r3
  10663c:	e1a031a3 	lsr	r3, r3, #3
  106640:	e6ef2073 	uxtb	r2, r3
  106644:	e51b300c 	ldr	r3, [fp, #-12]
  106648:	e5c32000 	strb	r2, [r3]
            inv[i++] = (char) ('0' + rem);
  10664c:	e55b300e 	ldrb	r3, [fp, #-14]
  106650:	e2832001 	add	r2, r3, #1
  106654:	e54b200e 	strb	r2, [fp, #-14]
  106658:	e1a01003 	mov	r1, r3
  10665c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  106660:	e2833030 	add	r3, r3, #48	; 0x30
  106664:	e6ef2073 	uxtb	r2, r3
  106668:	e24b3004 	sub	r3, fp, #4
  10666c:	e0833001 	add	r3, r3, r1
  106670:	e543201c 	strb	r2, [r3, #-28]	; 0xffffffe4
        } while (*ap);
  106674:	e51b300c 	ldr	r3, [fp, #-12]
  106678:	e5d33000 	ldrb	r3, [r3]
  10667c:	e3530000 	cmp	r3, #0
  106680:	1affffde 	bne	106600 <netdev_ip4addr_ntoa_r+0x50>
        while (i--)
  106684:	ea00000f 	b	1066c8 <netdev_ip4addr_ntoa_r+0x118>
        {
            if (len++ >= buflen)
  106688:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10668c:	e2832001 	add	r2, r3, #1
  106690:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
  106694:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  106698:	e1520003 	cmp	r2, r3
  10669c:	ca000001 	bgt	1066a8 <netdev_ip4addr_ntoa_r+0xf8>
            {
                return NULL;
  1066a0:	e3a03000 	mov	r3, #0
  1066a4:	ea000029 	b	106750 <netdev_ip4addr_ntoa_r+0x1a0>
            }
            *rp++ = inv[i];
  1066a8:	e55b200e 	ldrb	r2, [fp, #-14]
  1066ac:	e51b3008 	ldr	r3, [fp, #-8]
  1066b0:	e2831001 	add	r1, r3, #1
  1066b4:	e50b1008 	str	r1, [fp, #-8]
  1066b8:	e24b1004 	sub	r1, fp, #4
  1066bc:	e0812002 	add	r2, r1, r2
  1066c0:	e552201c 	ldrb	r2, [r2, #-28]	; 0xffffffe4
  1066c4:	e5c32000 	strb	r2, [r3]
        while (i--)
  1066c8:	e55b300e 	ldrb	r3, [fp, #-14]
  1066cc:	e2432001 	sub	r2, r3, #1
  1066d0:	e54b200e 	strb	r2, [fp, #-14]
  1066d4:	e3530000 	cmp	r3, #0
  1066d8:	1affffea 	bne	106688 <netdev_ip4addr_ntoa_r+0xd8>
        }
        if (len++ >= buflen)
  1066dc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1066e0:	e2832001 	add	r2, r3, #1
  1066e4:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
  1066e8:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  1066ec:	e1520003 	cmp	r2, r3
  1066f0:	ca000001 	bgt	1066fc <netdev_ip4addr_ntoa_r+0x14c>
        {
            return NULL;
  1066f4:	e3a03000 	mov	r3, #0
  1066f8:	ea000014 	b	106750 <netdev_ip4addr_ntoa_r+0x1a0>
        }
        *rp++ = '.';
  1066fc:	e51b3008 	ldr	r3, [fp, #-8]
  106700:	e2832001 	add	r2, r3, #1
  106704:	e50b2008 	str	r2, [fp, #-8]
  106708:	e3a0202e 	mov	r2, #46	; 0x2e
  10670c:	e5c32000 	strb	r2, [r3]
        ap++;
  106710:	e51b300c 	ldr	r3, [fp, #-12]
  106714:	e2833001 	add	r3, r3, #1
  106718:	e50b300c 	str	r3, [fp, #-12]
    for (n = 0; n < 4; n++)
  10671c:	e55b300d 	ldrb	r3, [fp, #-13]
  106720:	e2833001 	add	r3, r3, #1
  106724:	e54b300d 	strb	r3, [fp, #-13]
  106728:	e55b300d 	ldrb	r3, [fp, #-13]
  10672c:	e3530003 	cmp	r3, #3
  106730:	9affffb0 	bls	1065f8 <netdev_ip4addr_ntoa_r+0x48>
    }
    *--rp = 0;
  106734:	e51b3008 	ldr	r3, [fp, #-8]
  106738:	e2433001 	sub	r3, r3, #1
  10673c:	e50b3008 	str	r3, [fp, #-8]
  106740:	e51b3008 	ldr	r3, [fp, #-8]
  106744:	e3a02000 	mov	r2, #0
  106748:	e5c32000 	strb	r2, [r3]
    return buf;
  10674c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
}
  106750:	e1a00003 	mov	r0, r3
  106754:	e28bd000 	add	sp, fp, #0
  106758:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10675c:	e12fff1e 	bx	lr

00106760 <netdev_ip4addr_ntoa>:
 * @param addr ip address in network order to convert
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *netdev_ip4addr_ntoa(const ip4_addr_t *addr)
{
  106760:	e92d4800 	push	{fp, lr}
  106764:	e28db004 	add	fp, sp, #4
  106768:	e24dd008 	sub	sp, sp, #8
  10676c:	e50b0008 	str	r0, [fp, #-8]
    static char str[IP4ADDR_STRLEN_MAX];
    return netdev_ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
  106770:	e3a02010 	mov	r2, #16
  106774:	e30d1444 	movw	r1, #54340	; 0xd444
  106778:	e3401014 	movt	r1, #20
  10677c:	e51b0008 	ldr	r0, [fp, #-8]
  106780:	ebffff8a 	bl	1065b0 <netdev_ip4addr_ntoa_r>
  106784:	e1a03000 	mov	r3, r0
}
  106788:	e1a00003 	mov	r0, r3
  10678c:	e24bd004 	sub	sp, fp, #4
  106790:	e8bd8800 	pop	{fp, pc}

00106794 <netdev_ipaddr_addr>:
 *
 * @param cp IP address in ascii representation (e.g. "127.0.0.1")
 * @return ip address in network order
 */
in_addr_t netdev_ipaddr_addr(const char *cp)
{
  106794:	e92d4800 	push	{fp, lr}
  106798:	e28db004 	add	fp, sp, #4
  10679c:	e24dd010 	sub	sp, sp, #16
  1067a0:	e50b0010 	str	r0, [fp, #-16]
    ip4_addr_t val;

    if (netdev_ip4addr_aton(cp, &val)) {
  1067a4:	e24b3008 	sub	r3, fp, #8
  1067a8:	e1a01003 	mov	r1, r3
  1067ac:	e51b0010 	ldr	r0, [fp, #-16]
  1067b0:	ebfffe71 	bl	10617c <netdev_ip4addr_aton>
  1067b4:	e1a03000 	mov	r3, r0
  1067b8:	e3530000 	cmp	r3, #0
  1067bc:	0a000001 	beq	1067c8 <netdev_ipaddr_addr+0x34>
        return ip4_addr_get_u32(&val);
  1067c0:	e51b3008 	ldr	r3, [fp, #-8]
  1067c4:	ea000000 	b	1067cc <netdev_ipaddr_addr+0x38>
    }
    return (IPADDR_NONE);
  1067c8:	e3e03000 	mvn	r3, #0
}
  1067cc:	e1a00003 	mov	r0, r3
  1067d0:	e24bd004 	sub	sp, fp, #4
  1067d4:	e8bd8800 	pop	{fp, pc}

001067d8 <netdev_inet_ntop>:

#endif /* NETDEV_IPV6 */

const char *
netdev_inet_ntop(int af, const void *src, char *dst, int32_t size)
{
  1067d8:	e92d4800 	push	{fp, lr}
  1067dc:	e28db004 	add	fp, sp, #4
  1067e0:	e24dd018 	sub	sp, sp, #24
  1067e4:	e50b0010 	str	r0, [fp, #-16]
  1067e8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1067ec:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  1067f0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
#define AF_INET         2
#define AF_INET6        10

    const char *ret = NULL;
  1067f4:	e3a03000 	mov	r3, #0
  1067f8:	e50b3008 	str	r3, [fp, #-8]
    int size_int = (int)size;
  1067fc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  106800:	e50b300c 	str	r3, [fp, #-12]
    if (size_int < 0)
  106804:	e51b300c 	ldr	r3, [fp, #-12]
  106808:	e3530000 	cmp	r3, #0
  10680c:	aa000001 	bge	106818 <netdev_inet_ntop+0x40>
    {
        return NULL;
  106810:	e3a03000 	mov	r3, #0
  106814:	ea00000a 	b	106844 <netdev_inet_ntop+0x6c>
    }
    switch (af)
  106818:	e51b3010 	ldr	r3, [fp, #-16]
  10681c:	e3530002 	cmp	r3, #2
  106820:	0a000002 	beq	106830 <netdev_inet_ntop+0x58>
#if NETDEV_IPV6
    case AF_INET6:
        return netdev_ip6addr_ntoa_r((const ip6_addr_t *)src, dst, size_int);
#endif
    default:
        break;
  106824:	e320f000 	nop	{0}
    }
    return ret;
  106828:	e51b3008 	ldr	r3, [fp, #-8]
  10682c:	ea000004 	b	106844 <netdev_inet_ntop+0x6c>
        return netdev_ip4addr_ntoa_r((const ip4_addr_t *)src, dst, size_int);
  106830:	e51b200c 	ldr	r2, [fp, #-12]
  106834:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  106838:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  10683c:	ebffff5b 	bl	1065b0 <netdev_ip4addr_ntoa_r>
  106840:	e1a03000 	mov	r3, r0
}
  106844:	e1a00003 	mov	r0, r3
  106848:	e24bd004 	sub	sp, fp, #4
  10684c:	e8bd8800 	pop	{fp, pc}

00106850 <netdev_inet_pton>:

int
netdev_inet_pton(int af, const char *src, void *dst)
{
  106850:	e92d4800 	push	{fp, lr}
  106854:	e28db004 	add	fp, sp, #4
  106858:	e24dd018 	sub	sp, sp, #24
  10685c:	e50b0010 	str	r0, [fp, #-16]
  106860:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  106864:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
#define AF_INET         2
#define AF_INET6        10

    int err;
    switch (af)
  106868:	e51b3010 	ldr	r3, [fp, #-16]
  10686c:	e3530002 	cmp	r3, #2
  106870:	1a000004 	bne	106888 <netdev_inet_pton+0x38>
    {
#if NETDEV_IPV4
    case AF_INET:
        err = netdev_ip4addr_aton(src, (ip4_addr_t *)dst);
  106874:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  106878:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  10687c:	ebfffe3e 	bl	10617c <netdev_ip4addr_aton>
  106880:	e50b0008 	str	r0, [fp, #-8]
        break;
  106884:	ea000002 	b	106894 <netdev_inet_pton+0x44>
        }
        break;
    }
#endif
    default:
        err = -1;
  106888:	e3e03000 	mvn	r3, #0
  10688c:	e50b3008 	str	r3, [fp, #-8]
        break;
  106890:	e320f000 	nop	{0}
    }
    return err;
  106894:	e51b3008 	ldr	r3, [fp, #-8]
}
  106898:	e1a00003 	mov	r0, r3
  10689c:	e24bd004 	sub	sp, fp, #4
  1068a0:	e8bd8800 	pop	{fp, pc}

001068a4 <sal_init>:
 *
 * @return result  0: initialize success
 *                -1: initialize failed
 */
int sal_init(void)
{
  1068a4:	e92d4800 	push	{fp, lr}
  1068a8:	e28db004 	add	fp, sp, #4
  1068ac:	e24dd008 	sub	sp, sp, #8
    int cn;

    if (init_ok)
  1068b0:	e30d3484 	movw	r3, #54404	; 0xd484
  1068b4:	e3403014 	movt	r3, #20
  1068b8:	e5933000 	ldr	r3, [r3]
  1068bc:	e3530000 	cmp	r3, #0
  1068c0:	0a000001 	beq	1068cc <sal_init+0x28>
    {
        LOG_D("Socket Abstraction Layer is already initialized.");
        return 0;
  1068c4:	e3a03000 	mov	r3, #0
  1068c8:	ea000032 	b	106998 <sal_init+0xf4>
    }

    /* init sal socket table */
    cn = SOCKET_TABLE_STEP_LEN < SAL_SOCKETS_NUM ? SOCKET_TABLE_STEP_LEN : SAL_SOCKETS_NUM;
  1068cc:	e3a03004 	mov	r3, #4
  1068d0:	e50b3008 	str	r3, [fp, #-8]
    socket_table.max_socket = cn;
  1068d4:	e51b2008 	ldr	r2, [fp, #-8]
  1068d8:	e30d3454 	movw	r3, #54356	; 0xd454
  1068dc:	e3403014 	movt	r3, #20
  1068e0:	e5832000 	str	r2, [r3]
    socket_table.sockets = rt_calloc(1, cn * sizeof(struct sal_socket *));
  1068e4:	e51b3008 	ldr	r3, [fp, #-8]
  1068e8:	e1a03103 	lsl	r3, r3, #2
  1068ec:	e1a01003 	mov	r1, r3
  1068f0:	e3a00001 	mov	r0, #1
  1068f4:	ebfff1c4 	bl	10300c <rt_calloc>
  1068f8:	e1a02000 	mov	r2, r0
  1068fc:	e30d3454 	movw	r3, #54356	; 0xd454
  106900:	e3403014 	movt	r3, #20
  106904:	e5832004 	str	r2, [r3, #4]
    if (socket_table.sockets == RT_NULL)
  106908:	e30d3454 	movw	r3, #54356	; 0xd454
  10690c:	e3403014 	movt	r3, #20
  106910:	e5933004 	ldr	r3, [r3, #4]
  106914:	e3530000 	cmp	r3, #0
  106918:	1a00000a 	bne	106948 <sal_init+0xa4>
    {
        LOG_E("No memory for socket table.\n");
  10691c:	e30504b0 	movw	r0, #21680	; 0x54b0
  106920:	e3400014 	movt	r0, #20
  106924:	ebfff1fa 	bl	103114 <rt_kprintf>
  106928:	e30504c4 	movw	r0, #21700	; 0x54c4
  10692c:	e3400014 	movt	r0, #20
  106930:	ebfff1f7 	bl	103114 <rt_kprintf>
  106934:	e30504e4 	movw	r0, #21732	; 0x54e4
  106938:	e3400014 	movt	r0, #20
  10693c:	ebfff1f4 	bl	103114 <rt_kprintf>
        return -1;
  106940:	e3e03000 	mvn	r3, #0
  106944:	ea000013 	b	106998 <sal_init+0xf4>
    }

    /* create sal socket lock */
    rt_mutex_init(&sal_core_lock, "sal_lock", RT_IPC_FLAG_FIFO);
  106948:	e3a02000 	mov	r2, #0
  10694c:	e30514ec 	movw	r1, #21740	; 0x54ec
  106950:	e3401014 	movt	r1, #20
  106954:	e30d045c 	movw	r0, #54364	; 0xd45c
  106958:	e3400014 	movt	r0, #20
  10695c:	ebffe8f9 	bl	100d48 <rt_mutex_init>

    LOG_I("Socket Abstraction Layer initialize success.");
  106960:	e30504f8 	movw	r0, #21752	; 0x54f8
  106964:	e3400014 	movt	r0, #20
  106968:	ebfff1e9 	bl	103114 <rt_kprintf>
  10696c:	e305050c 	movw	r0, #21772	; 0x550c
  106970:	e3400014 	movt	r0, #20
  106974:	ebfff1e6 	bl	103114 <rt_kprintf>
  106978:	e30504e4 	movw	r0, #21732	; 0x54e4
  10697c:	e3400014 	movt	r0, #20
  106980:	ebfff1e3 	bl	103114 <rt_kprintf>
    init_ok = RT_TRUE;
  106984:	e30d3484 	movw	r3, #54404	; 0xd484
  106988:	e3403014 	movt	r3, #20
  10698c:	e3a02001 	mov	r2, #1
  106990:	e5832000 	str	r2, [r3]

    return 0;
  106994:	e3a03000 	mov	r3, #0
}
  106998:	e1a00003 	mov	r0, r3
  10699c:	e24bd004 	sub	sp, fp, #4
  1069a0:	e8bd8800 	pop	{fp, pc}

001069a4 <check_netdev_internet_up_work>:

/* check SAL network interface device internet status */
void check_netdev_internet_up_work(void *work_data)
{
  1069a4:	e92d4810 	push	{r4, fp, lr}
  1069a8:	e28db008 	add	fp, sp, #8
  1069ac:	e24dd0ac 	sub	sp, sp, #172	; 0xac
  1069b0:	e50b00a8 	str	r0, [fp, #-168]	; 0xffffff58
#define SAL_INTERNET_PORT      8101

#define SAL_INTERNET_MONTH_LEN 4
#define SAL_INTERNET_DATE_LEN  16

    int index, sockfd = -1, result = 0;
  1069b4:	e3e03000 	mvn	r3, #0
  1069b8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1069bc:	e3a03000 	mov	r3, #0
  1069c0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    struct sockaddr_in server_addr;
    struct hostent *host;
    struct timeval timeout;
    struct netdev *netdev = (struct netdev *)work_data;
  1069c4:	e51b30a8 	ldr	r3, [fp, #-168]	; 0xffffff58
  1069c8:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    socklen_t addr_len = sizeof(struct sockaddr_in);
  1069cc:	e3a03010 	mov	r3, #16
  1069d0:	e50b3050 	str	r3, [fp, #-80]	; 0xffffffb0
    char send_data[SAL_INTERNET_BUFF_LEN], recv_data = 0;
  1069d4:	e3a03000 	mov	r3, #0
  1069d8:	e54b305d 	strb	r3, [fp, #-93]	; 0xffffffa3

    const char month[][SAL_INTERNET_MONTH_LEN] = {"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"};
  1069dc:	e3053560 	movw	r3, #21856	; 0x5560
  1069e0:	e3403014 	movt	r3, #20
  1069e4:	e24bc090 	sub	ip, fp, #144	; 0x90
  1069e8:	e1a0e003 	mov	lr, r3
  1069ec:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
  1069f0:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
  1069f4:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
  1069f8:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
  1069fc:	e89e000f 	ldm	lr, {r0, r1, r2, r3}
  106a00:	e88c000f 	stm	ip, {r0, r1, r2, r3}
    char date[SAL_INTERNET_DATE_LEN];
    int moth_num = 0;
  106a04:	e3a03000 	mov	r3, #0
  106a08:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    struct sal_proto_family *pf = (struct sal_proto_family *) netdev->sal_user_data;
  106a0c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  106a10:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  106a14:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
    const struct sal_socket_ops *skt_ops;

    /* get network interface socket operations */
    if (pf == RT_NULL || pf->skt_ops == RT_NULL)
  106a18:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106a1c:	e3530000 	cmp	r3, #0
  106a20:	0a000003 	beq	106a34 <check_netdev_internet_up_work+0x90>
  106a24:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106a28:	e5933008 	ldr	r3, [r3, #8]
  106a2c:	e3530000 	cmp	r3, #0
  106a30:	1a000002 	bne	106a40 <check_netdev_internet_up_work+0x9c>
    {
        result = -RT_ERROR;
  106a34:	e3e03000 	mvn	r3, #0
  106a38:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        goto __exit;
  106a3c:	ea0000bc 	b	106d34 <check_netdev_internet_up_work+0x390>
    }

    host = (struct hostent *) pf->netdb_ops->gethostbyname(SAL_INTERNET_HOST);
  106a40:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106a44:	e593300c 	ldr	r3, [r3, #12]
  106a48:	e5933000 	ldr	r3, [r3]
  106a4c:	e305053c 	movw	r0, #21820	; 0x553c
  106a50:	e3400014 	movt	r0, #20
  106a54:	e12fff33 	blx	r3
  106a58:	e50b002c 	str	r0, [fp, #-44]	; 0xffffffd4
    if (host == RT_NULL)
  106a5c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  106a60:	e3530000 	cmp	r3, #0
  106a64:	1a000002 	bne	106a74 <check_netdev_internet_up_work+0xd0>
    {
        result = -RT_ERROR;
  106a68:	e3e03000 	mvn	r3, #0
  106a6c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        goto __exit;
  106a70:	ea0000af 	b	106d34 <check_netdev_internet_up_work+0x390>
    }

    skt_ops = pf->skt_ops;
  106a74:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106a78:	e5933008 	ldr	r3, [r3, #8]
  106a7c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    if ((sockfd = skt_ops->socket(AF_INET, SOCK_DGRAM, 0)) < 0)
  106a80:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  106a84:	e5933000 	ldr	r3, [r3]
  106a88:	e3a02000 	mov	r2, #0
  106a8c:	e3a01002 	mov	r1, #2
  106a90:	e3a00002 	mov	r0, #2
  106a94:	e12fff33 	blx	r3
  106a98:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  106a9c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  106aa0:	e3530000 	cmp	r3, #0
  106aa4:	aa000002 	bge	106ab4 <check_netdev_internet_up_work+0x110>
    {
        result = -RT_ERROR;
  106aa8:	e3e03000 	mvn	r3, #0
  106aac:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        goto __exit;
  106ab0:	ea00009f 	b	106d34 <check_netdev_internet_up_work+0x390>
    }
    
    server_addr.sin_family = AF_INET;
  106ab4:	e3a03002 	mov	r3, #2
  106ab8:	e54b303b 	strb	r3, [fp, #-59]	; 0xffffffc5
    server_addr.sin_port = htons(SAL_INTERNET_PORT);
  106abc:	e30a351f 	movw	r3, #42271	; 0xa51f
  106ac0:	e34f3fff 	movt	r3, #65535	; 0xffff
  106ac4:	e14b33ba 	strh	r3, [fp, #-58]	; 0xffffffc6
    server_addr.sin_addr = *((struct in_addr *)host->h_addr);
  106ac8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  106acc:	e5933010 	ldr	r3, [r3, #16]
  106ad0:	e5933000 	ldr	r3, [r3]
  106ad4:	e5933000 	ldr	r3, [r3]
  106ad8:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
    rt_memset(&(server_addr.sin_zero), 0, sizeof(server_addr.sin_zero));
  106adc:	e24b303c 	sub	r3, fp, #60	; 0x3c
  106ae0:	e2833008 	add	r3, r3, #8
  106ae4:	e3a02008 	mov	r2, #8
  106ae8:	e3a01000 	mov	r1, #0
  106aec:	e1a00003 	mov	r0, r3
  106af0:	ebfff1f4 	bl	1032c8 <rt_memset>

    timeout.tv_sec = SAL_INTERNET_TIMEOUT;
  106af4:	e3a02002 	mov	r2, #2
  106af8:	e3a03000 	mov	r3, #0
  106afc:	e14b24fc 	strd	r2, [fp, #-76]	; 0xffffffb4
    timeout.tv_usec = 0;
  106b00:	e3a03000 	mov	r3, #0
  106b04:	e50b3044 	str	r3, [fp, #-68]	; 0xffffffbc

    /* set receive and send timeout */
    skt_ops->setsockopt(sockfd, SOL_SOCKET, SO_RCVTIMEO, (void *) &timeout, sizeof(timeout));
  106b08:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  106b0c:	e5934024 	ldr	r4, [r3, #36]	; 0x24
  106b10:	e24b204c 	sub	r2, fp, #76	; 0x4c
  106b14:	e3a03010 	mov	r3, #16
  106b18:	e58d3000 	str	r3, [sp]
  106b1c:	e1a03002 	mov	r3, r2
  106b20:	e3012006 	movw	r2, #4102	; 0x1006
  106b24:	e3001fff 	movw	r1, #4095	; 0xfff
  106b28:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  106b2c:	e12fff34 	blx	r4
    skt_ops->setsockopt(sockfd, SOL_SOCKET, SO_SNDTIMEO, (void *) &timeout, sizeof(timeout));
  106b30:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  106b34:	e5934024 	ldr	r4, [r3, #36]	; 0x24
  106b38:	e24b204c 	sub	r2, fp, #76	; 0x4c
  106b3c:	e3a03010 	mov	r3, #16
  106b40:	e58d3000 	str	r3, [sp]
  106b44:	e1a03002 	mov	r3, r2
  106b48:	e3012005 	movw	r2, #4101	; 0x1005
  106b4c:	e3001fff 	movw	r1, #4095	; 0xfff
  106b50:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  106b54:	e12fff34 	blx	r4

    /* get build moth value*/
    rt_memset(date, 0x00, SAL_INTERNET_DATE_LEN);
  106b58:	e24b30a0 	sub	r3, fp, #160	; 0xa0
  106b5c:	e3a02010 	mov	r2, #16
  106b60:	e3a01000 	mov	r1, #0
  106b64:	e1a00003 	mov	r0, r3
  106b68:	ebfff1d6 	bl	1032c8 <rt_memset>
    rt_snprintf(date, SAL_INTERNET_DATE_LEN, "%s", __DATE__);
  106b6c:	e24b00a0 	sub	r0, fp, #160	; 0xa0
  106b70:	e3053550 	movw	r3, #21840	; 0x5550
  106b74:	e3403014 	movt	r3, #20
  106b78:	e305255c 	movw	r2, #21852	; 0x555c
  106b7c:	e3402014 	movt	r2, #20
  106b80:	e3a01010 	mov	r1, #16
  106b84:	ebfff12c 	bl	10303c <rt_snprintf>

    for (index = 0; index < sizeof(month) / SAL_INTERNET_MONTH_LEN; index++)
  106b88:	e3a03000 	mov	r3, #0
  106b8c:	e50b3010 	str	r3, [fp, #-16]
  106b90:	ea000011 	b	106bdc <check_netdev_internet_up_work+0x238>
    {
        if (rt_memcmp(date, month[index], SAL_INTERNET_MONTH_LEN - 1) == 0)
  106b94:	e24b2090 	sub	r2, fp, #144	; 0x90
  106b98:	e51b3010 	ldr	r3, [fp, #-16]
  106b9c:	e1a03103 	lsl	r3, r3, #2
  106ba0:	e0821003 	add	r1, r2, r3
  106ba4:	e24b30a0 	sub	r3, fp, #160	; 0xa0
  106ba8:	e3a02003 	mov	r2, #3
  106bac:	e1a00003 	mov	r0, r3
  106bb0:	ebfff1e0 	bl	103338 <rt_memcmp>
  106bb4:	e1a03000 	mov	r3, r0
  106bb8:	e3530000 	cmp	r3, #0
  106bbc:	1a000003 	bne	106bd0 <check_netdev_internet_up_work+0x22c>
        {
            moth_num = index + 1;
  106bc0:	e51b3010 	ldr	r3, [fp, #-16]
  106bc4:	e2833001 	add	r3, r3, #1
  106bc8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
            break;
  106bcc:	ea000005 	b	106be8 <check_netdev_internet_up_work+0x244>
    for (index = 0; index < sizeof(month) / SAL_INTERNET_MONTH_LEN; index++)
  106bd0:	e51b3010 	ldr	r3, [fp, #-16]
  106bd4:	e2833001 	add	r3, r3, #1
  106bd8:	e50b3010 	str	r3, [fp, #-16]
  106bdc:	e51b3010 	ldr	r3, [fp, #-16]
  106be0:	e353000b 	cmp	r3, #11
  106be4:	9affffea 	bls	106b94 <check_netdev_internet_up_work+0x1f0>
        }
    }

    /* not find build month */
    if (moth_num == 0 || moth_num > sizeof(month) / SAL_INTERNET_MONTH_LEN)
  106be8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  106bec:	e3530000 	cmp	r3, #0
  106bf0:	0a000002 	beq	106c00 <check_netdev_internet_up_work+0x25c>
  106bf4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  106bf8:	e353000c 	cmp	r3, #12
  106bfc:	9a000002 	bls	106c0c <check_netdev_internet_up_work+0x268>
    {
        result = -RT_ERROR;
  106c00:	e3e03000 	mvn	r3, #0
  106c04:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        goto __exit;
  106c08:	ea000049 	b	106d34 <check_netdev_internet_up_work+0x390>
    }

    rt_memset(send_data, 0x00, SAL_INTERNET_BUFF_LEN);
  106c0c:	e24b305c 	sub	r3, fp, #92	; 0x5c
  106c10:	e3a0200c 	mov	r2, #12
  106c14:	e3a01000 	mov	r1, #0
  106c18:	e1a00003 	mov	r0, r3
  106c1c:	ebfff1a9 	bl	1032c8 <rt_memset>
    send_data[0] = SAL_INTERNET_VERSION;
  106c20:	e3a03000 	mov	r3, #0
  106c24:	e54b305c 	strb	r3, [fp, #-92]	; 0xffffffa4
    for (index = 0; index < netdev->hwaddr_len; index++)
  106c28:	e3a03000 	mov	r3, #0
  106c2c:	e50b3010 	str	r3, [fp, #-16]
  106c30:	ea000010 	b	106c78 <check_netdev_internet_up_work+0x2d4>
    {
        send_data[index + 1] = netdev->hwaddr[index] + moth_num;
  106c34:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  106c38:	e51b3010 	ldr	r3, [fp, #-16]
  106c3c:	e0823003 	add	r3, r2, r3
  106c40:	e2833021 	add	r3, r3, #33	; 0x21
  106c44:	e5d31000 	ldrb	r1, [r3]
  106c48:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  106c4c:	e6ef2073 	uxtb	r2, r3
  106c50:	e51b3010 	ldr	r3, [fp, #-16]
  106c54:	e2833001 	add	r3, r3, #1
  106c58:	e0812002 	add	r2, r1, r2
  106c5c:	e6ef2072 	uxtb	r2, r2
  106c60:	e24b100c 	sub	r1, fp, #12
  106c64:	e0813003 	add	r3, r1, r3
  106c68:	e5432050 	strb	r2, [r3, #-80]	; 0xffffffb0
    for (index = 0; index < netdev->hwaddr_len; index++)
  106c6c:	e51b3010 	ldr	r3, [fp, #-16]
  106c70:	e2833001 	add	r3, r3, #1
  106c74:	e50b3010 	str	r3, [fp, #-16]
  106c78:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  106c7c:	e5d33020 	ldrb	r3, [r3, #32]
  106c80:	e1a02003 	mov	r2, r3
  106c84:	e51b3010 	ldr	r3, [fp, #-16]
  106c88:	e1530002 	cmp	r3, r2
  106c8c:	baffffe8 	blt	106c34 <check_netdev_internet_up_work+0x290>
    }
    send_data[9] = RT_VERSION;
  106c90:	e3a03005 	mov	r3, #5
  106c94:	e54b3053 	strb	r3, [fp, #-83]	; 0xffffffad
    send_data[10] = RT_SUBVERSION;
  106c98:	e3a03000 	mov	r3, #0
  106c9c:	e54b3052 	strb	r3, [fp, #-82]	; 0xffffffae
    send_data[11] = RT_REVISION;
  106ca0:	e3a03000 	mov	r3, #0
  106ca4:	e54b3051 	strb	r3, [fp, #-81]	; 0xffffffaf

    skt_ops->sendto(sockfd, send_data, SAL_INTERNET_BUFF_LEN, 0,
  106ca8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  106cac:	e5934018 	ldr	r4, [r3, #24]
  106cb0:	e24b105c 	sub	r1, fp, #92	; 0x5c
  106cb4:	e3a03010 	mov	r3, #16
  106cb8:	e58d3004 	str	r3, [sp, #4]
  106cbc:	e24b303c 	sub	r3, fp, #60	; 0x3c
  106cc0:	e58d3000 	str	r3, [sp]
  106cc4:	e3a03000 	mov	r3, #0
  106cc8:	e3a0200c 	mov	r2, #12
  106ccc:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  106cd0:	e12fff34 	blx	r4
                    (struct sockaddr *)&server_addr, sizeof(struct sockaddr));

    result = skt_ops->recvfrom(sockfd, &recv_data, sizeof(recv_data), 0, (struct sockaddr *)&server_addr, &addr_len);
  106cd4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  106cd8:	e593401c 	ldr	r4, [r3, #28]
  106cdc:	e24b105d 	sub	r1, fp, #93	; 0x5d
  106ce0:	e24b3050 	sub	r3, fp, #80	; 0x50
  106ce4:	e58d3004 	str	r3, [sp, #4]
  106ce8:	e24b303c 	sub	r3, fp, #60	; 0x3c
  106cec:	e58d3000 	str	r3, [sp]
  106cf0:	e3a03000 	mov	r3, #0
  106cf4:	e3a02001 	mov	r2, #1
  106cf8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  106cfc:	e12fff34 	blx	r4
  106d00:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    if (result < 0)
  106d04:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  106d08:	e3530000 	cmp	r3, #0
  106d0c:	ba000005 	blt	106d28 <check_netdev_internet_up_work+0x384>
    {
        goto __exit;
    }

    if (recv_data == RT_FALSE)
  106d10:	e55b305d 	ldrb	r3, [fp, #-93]	; 0xffffffa3
  106d14:	e3530000 	cmp	r3, #0
  106d18:	1a000004 	bne	106d30 <check_netdev_internet_up_work+0x38c>
    {
        result = -RT_ERROR;
  106d1c:	e3e03000 	mvn	r3, #0
  106d20:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        goto __exit;
  106d24:	ea000002 	b	106d34 <check_netdev_internet_up_work+0x390>
        goto __exit;
  106d28:	e320f000 	nop	{0}
  106d2c:	ea000000 	b	106d34 <check_netdev_internet_up_work+0x390>
    }

__exit:
  106d30:	e320f000 	nop	{0}
    if (result > 0)
  106d34:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  106d38:	e3530000 	cmp	r3, #0
  106d3c:	da000006 	ble	106d5c <check_netdev_internet_up_work+0x3b8>
    {
        LOG_D("Set network interface device(%s) internet status up.", netdev->name);
        netdev->flags |= NETDEV_FLAG_INTERNET_UP;
  106d40:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  106d44:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106d48:	e3833080 	orr	r3, r3, #128	; 0x80
  106d4c:	e6ff2073 	uxth	r2, r3
  106d50:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  106d54:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
  106d58:	ea000005 	b	106d74 <check_netdev_internet_up_work+0x3d0>
    }
    else
    {
        LOG_D("Set network interface device(%s) internet status down.", netdev->name);
        netdev->flags &= ~NETDEV_FLAG_INTERNET_UP;
  106d5c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  106d60:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106d64:	e3c33080 	bic	r3, r3, #128	; 0x80
  106d68:	e6ff2073 	uxth	r2, r3
  106d6c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  106d70:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
    }

    if (sockfd >= 0)
  106d74:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  106d78:	e3530000 	cmp	r3, #0
  106d7c:	ba000003 	blt	106d90 <check_netdev_internet_up_work+0x3ec>
    {
        skt_ops->closesocket(sockfd);
  106d80:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  106d84:	e5933004 	ldr	r3, [r3, #4]
  106d88:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  106d8c:	e12fff33 	blx	r3
    }
}
  106d90:	e320f000 	nop	{0}
  106d94:	e24bd008 	sub	sp, fp, #8
  106d98:	e8bd8810 	pop	{r4, fp, pc}

00106d9c <sal_get_socket>:
 * @param socket sal socket index
 *
 * @return sal socket object of the current sal socket index
 */
struct sal_socket *sal_get_socket(int socket)
{
  106d9c:	e92d4800 	push	{fp, lr}
  106da0:	e28db004 	add	fp, sp, #4
  106da4:	e24dd010 	sub	sp, sp, #16
  106da8:	e50b0010 	str	r0, [fp, #-16]
    struct sal_socket_table *st = &socket_table;
  106dac:	e30d3454 	movw	r3, #54356	; 0xd454
  106db0:	e3403014 	movt	r3, #20
  106db4:	e50b3008 	str	r3, [fp, #-8]

    if (socket < 0 || socket >= (int) st->max_socket)
  106db8:	e51b3010 	ldr	r3, [fp, #-16]
  106dbc:	e3530000 	cmp	r3, #0
  106dc0:	ba000005 	blt	106ddc <sal_get_socket+0x40>
  106dc4:	e51b3008 	ldr	r3, [fp, #-8]
  106dc8:	e5933000 	ldr	r3, [r3]
  106dcc:	e1a02003 	mov	r2, r3
  106dd0:	e51b3010 	ldr	r3, [fp, #-16]
  106dd4:	e1530002 	cmp	r3, r2
  106dd8:	ba000001 	blt	106de4 <sal_get_socket+0x48>
    {
        return RT_NULL;
  106ddc:	e3a03000 	mov	r3, #0
  106de0:	ea000015 	b	106e3c <sal_get_socket+0xa0>
    }

    socket = socket - SAL_SOCKET_OFFSET;
    /* check socket structure valid or not */
    RT_ASSERT(st->sockets[socket]->magic == SAL_SOCKET_MAGIC);
  106de4:	e51b3008 	ldr	r3, [fp, #-8]
  106de8:	e5932004 	ldr	r2, [r3, #4]
  106dec:	e51b3010 	ldr	r3, [fp, #-16]
  106df0:	e1a03103 	lsl	r3, r3, #2
  106df4:	e0823003 	add	r3, r2, r3
  106df8:	e5933000 	ldr	r3, [r3]
  106dfc:	e5933000 	ldr	r3, [r3]
  106e00:	e3052a10 	movw	r2, #23056	; 0x5a10
  106e04:	e1530002 	cmp	r3, r2
  106e08:	0a000005 	beq	106e24 <sal_get_socket+0x88>
  106e0c:	e300211b 	movw	r2, #283	; 0x11b
  106e10:	e3051684 	movw	r1, #22148	; 0x5684
  106e14:	e3401014 	movt	r1, #20
  106e18:	e3050590 	movw	r0, #21904	; 0x5590
  106e1c:	e3400014 	movt	r0, #20
  106e20:	ebfff1dc 	bl	103598 <rt_assert_handler>

    return st->sockets[socket];
  106e24:	e51b3008 	ldr	r3, [fp, #-8]
  106e28:	e5932004 	ldr	r2, [r3, #4]
  106e2c:	e51b3010 	ldr	r3, [fp, #-16]
  106e30:	e1a03103 	lsl	r3, r3, #2
  106e34:	e0823003 	add	r3, r2, r3
  106e38:	e5933000 	ldr	r3, [r3]
}
  106e3c:	e1a00003 	mov	r0, r3
  106e40:	e24bd004 	sub	sp, fp, #4
  106e44:	e8bd8800 	pop	{fp, pc}

00106e48 <sal_lock>:
 * This function will lock sal socket.
 *
 * @note please don't invoke it on ISR.
 */
static void sal_lock(void)
{
  106e48:	e92d4800 	push	{fp, lr}
  106e4c:	e28db004 	add	fp, sp, #4
  106e50:	e24dd008 	sub	sp, sp, #8
    rt_err_t result;

    result = rt_mutex_take(&sal_core_lock, RT_WAITING_FOREVER);
  106e54:	e3e01000 	mvn	r1, #0
  106e58:	e30d045c 	movw	r0, #54364	; 0xd45c
  106e5c:	e3400014 	movt	r0, #20
  106e60:	ebffe826 	bl	100f00 <rt_mutex_take>
  106e64:	e50b0008 	str	r0, [fp, #-8]
    if (result != RT_EOK)
  106e68:	e51b3008 	ldr	r3, [fp, #-8]
  106e6c:	e3530000 	cmp	r3, #0
  106e70:	0a000005 	beq	106e8c <sal_lock+0x44>
    {
        RT_ASSERT(0);
  106e74:	e3a02f4b 	mov	r2, #300	; 0x12c
  106e78:	e3051694 	movw	r1, #22164	; 0x5694
  106e7c:	e3401014 	movt	r1, #20
  106e80:	e30505c0 	movw	r0, #21952	; 0x55c0
  106e84:	e3400014 	movt	r0, #20
  106e88:	ebfff1c2 	bl	103598 <rt_assert_handler>
    }
}
  106e8c:	e320f000 	nop	{0}
  106e90:	e24bd004 	sub	sp, fp, #4
  106e94:	e8bd8800 	pop	{fp, pc}

00106e98 <sal_unlock>:
 * This function will lock sal socket.
 *
 * @note please don't invoke it on ISR.
 */
static void sal_unlock(void)
{
  106e98:	e92d4800 	push	{fp, lr}
  106e9c:	e28db004 	add	fp, sp, #4
    rt_mutex_release(&sal_core_lock);
  106ea0:	e30d045c 	movw	r0, #54364	; 0xd45c
  106ea4:	e3400014 	movt	r0, #20
  106ea8:	ebffe832 	bl	100f78 <rt_mutex_release>
}
  106eac:	e320f000 	nop	{0}
  106eb0:	e8bd8800 	pop	{fp, pc}

00106eb4 <sal_netdev_cleanup>:
 * This function will clean the netdev.
 *
 * @note please don't invoke it on ISR.
 */
int sal_netdev_cleanup(struct netdev *netdev)
{
  106eb4:	e92d4800 	push	{fp, lr}
  106eb8:	e28db004 	add	fp, sp, #4
  106ebc:	e24dd010 	sub	sp, sp, #16
  106ec0:	e50b0010 	str	r0, [fp, #-16]
    int idx = 0, find_dev;
  106ec4:	e3a03000 	mov	r3, #0
  106ec8:	e50b3008 	str	r3, [fp, #-8]

    do
    {
        find_dev = 0;
  106ecc:	e3a03000 	mov	r3, #0
  106ed0:	e50b300c 	str	r3, [fp, #-12]
        sal_lock();
  106ed4:	ebffffdb 	bl	106e48 <sal_lock>
        for (idx = 0; idx < socket_table.max_socket; idx++)
  106ed8:	e3a03000 	mov	r3, #0
  106edc:	e50b3008 	str	r3, [fp, #-8]
  106ee0:	ea000019 	b	106f4c <sal_netdev_cleanup+0x98>
        {
            if (socket_table.sockets[idx] && socket_table.sockets[idx]->netdev == netdev)
  106ee4:	e30d3454 	movw	r3, #54356	; 0xd454
  106ee8:	e3403014 	movt	r3, #20
  106eec:	e5932004 	ldr	r2, [r3, #4]
  106ef0:	e51b3008 	ldr	r3, [fp, #-8]
  106ef4:	e1a03103 	lsl	r3, r3, #2
  106ef8:	e0823003 	add	r3, r2, r3
  106efc:	e5933000 	ldr	r3, [r3]
  106f00:	e3530000 	cmp	r3, #0
  106f04:	0a00000d 	beq	106f40 <sal_netdev_cleanup+0x8c>
  106f08:	e30d3454 	movw	r3, #54356	; 0xd454
  106f0c:	e3403014 	movt	r3, #20
  106f10:	e5932004 	ldr	r2, [r3, #4]
  106f14:	e51b3008 	ldr	r3, [fp, #-8]
  106f18:	e1a03103 	lsl	r3, r3, #2
  106f1c:	e0823003 	add	r3, r2, r3
  106f20:	e5933000 	ldr	r3, [r3]
  106f24:	e5933014 	ldr	r3, [r3, #20]
  106f28:	e51b2010 	ldr	r2, [fp, #-16]
  106f2c:	e1520003 	cmp	r2, r3
  106f30:	1a000002 	bne	106f40 <sal_netdev_cleanup+0x8c>
            {
                find_dev = 1;
  106f34:	e3a03001 	mov	r3, #1
  106f38:	e50b300c 	str	r3, [fp, #-12]
                break;
  106f3c:	ea000008 	b	106f64 <sal_netdev_cleanup+0xb0>
        for (idx = 0; idx < socket_table.max_socket; idx++)
  106f40:	e51b3008 	ldr	r3, [fp, #-8]
  106f44:	e2833001 	add	r3, r3, #1
  106f48:	e50b3008 	str	r3, [fp, #-8]
  106f4c:	e30d3454 	movw	r3, #54356	; 0xd454
  106f50:	e3403014 	movt	r3, #20
  106f54:	e5932000 	ldr	r2, [r3]
  106f58:	e51b3008 	ldr	r3, [fp, #-8]
  106f5c:	e1520003 	cmp	r2, r3
  106f60:	8affffdf 	bhi	106ee4 <sal_netdev_cleanup+0x30>
            }
        }
        sal_unlock();
  106f64:	ebffffcb 	bl	106e98 <sal_unlock>
        if (find_dev)
  106f68:	e51b300c 	ldr	r3, [fp, #-12]
  106f6c:	e3530000 	cmp	r3, #0
  106f70:	0a000001 	beq	106f7c <sal_netdev_cleanup+0xc8>
        {
            rt_thread_mdelay(100);
  106f74:	e3a00064 	mov	r0, #100	; 0x64
  106f78:	ebffebbf 	bl	101e7c <rt_thread_mdelay>
        }
    }
    while (find_dev);
  106f7c:	e51b300c 	ldr	r3, [fp, #-12]
  106f80:	e3530000 	cmp	r3, #0
  106f84:	1affffd0 	bne	106ecc <sal_netdev_cleanup+0x18>

    return 0;
  106f88:	e3a03000 	mov	r3, #0
}
  106f8c:	e1a00003 	mov	r0, r3
  106f90:	e24bd004 	sub	sp, fp, #4
  106f94:	e8bd8800 	pop	{fp, pc}

00106f98 <socket_init>:
 *         -1 : input the wrong family
 *         -2 : input the wrong socket type
 *         -3 : get network interface failed
 */
static int socket_init(int family, int type, int protocol, struct sal_socket **res)
{
  106f98:	e92d4800 	push	{fp, lr}
  106f9c:	e28db004 	add	fp, sp, #4
  106fa0:	e24dd028 	sub	sp, sp, #40	; 0x28
  106fa4:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  106fa8:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  106fac:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  106fb0:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4

    struct sal_socket *sock;
    struct sal_proto_family *pf;
    struct netdev *netdv_def = netdev_default;
  106fb4:	e30e3ce4 	movw	r3, #60644	; 0xece4
  106fb8:	e3403014 	movt	r3, #20
  106fbc:	e5933000 	ldr	r3, [r3]
  106fc0:	e50b300c 	str	r3, [fp, #-12]
    struct netdev *netdev = RT_NULL;
  106fc4:	e3a03000 	mov	r3, #0
  106fc8:	e50b3010 	str	r3, [fp, #-16]
    rt_bool_t flag = RT_FALSE;
  106fcc:	e3a03000 	mov	r3, #0
  106fd0:	e50b3008 	str	r3, [fp, #-8]

    if (family < 0 || family > AF_MAX)
  106fd4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  106fd8:	e3530000 	cmp	r3, #0
  106fdc:	ba000002 	blt	106fec <socket_init+0x54>
  106fe0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  106fe4:	e353002f 	cmp	r3, #47	; 0x2f
  106fe8:	da000001 	ble	106ff4 <socket_init+0x5c>
    {
        return -1;
  106fec:	e3e03000 	mvn	r3, #0
  106ff0:	ea000050 	b	107138 <socket_init+0x1a0>
    }

    if (type < 0 || type > SOCK_MAX)
  106ff4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  106ff8:	e3530000 	cmp	r3, #0
  106ffc:	ba000004 	blt	107014 <socket_init+0x7c>
  107000:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  107004:	e3a03001 	mov	r3, #1
  107008:	e3403008 	movt	r3, #8
  10700c:	e1520003 	cmp	r2, r3
  107010:	da000001 	ble	10701c <socket_init+0x84>
    {
        return -2;
  107014:	e3e03001 	mvn	r3, #1
  107018:	ea000046 	b	107138 <socket_init+0x1a0>
    }

    sock = *res;
  10701c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  107020:	e5933000 	ldr	r3, [r3]
  107024:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    sock->domain = family;
  107028:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10702c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  107030:	e5832008 	str	r2, [r3, #8]
    sock->type = type;
  107034:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107038:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  10703c:	e583200c 	str	r2, [r3, #12]
    sock->protocol = protocol;
  107040:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107044:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  107048:	e5832010 	str	r2, [r3, #16]

    if (netdv_def && netdev_is_up(netdv_def))
  10704c:	e51b300c 	ldr	r3, [fp, #-12]
  107050:	e3530000 	cmp	r3, #0
  107054:	0a00001e 	beq	1070d4 <socket_init+0x13c>
  107058:	e51b300c 	ldr	r3, [fp, #-12]
  10705c:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  107060:	e2033001 	and	r3, r3, #1
  107064:	e6ef3073 	uxtb	r3, r3
  107068:	e3530000 	cmp	r3, #0
  10706c:	0a000018 	beq	1070d4 <socket_init+0x13c>
    {
        /* check default network interface device protocol family */
        pf = (struct sal_proto_family *) netdv_def->sal_user_data;
  107070:	e51b300c 	ldr	r3, [fp, #-12]
  107074:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  107078:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        if (pf != RT_NULL && pf->skt_ops && (pf->family == family || pf->sec_family == family))
  10707c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  107080:	e3530000 	cmp	r3, #0
  107084:	0a000012 	beq	1070d4 <socket_init+0x13c>
  107088:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10708c:	e5933008 	ldr	r3, [r3, #8]
  107090:	e3530000 	cmp	r3, #0
  107094:	0a00000e 	beq	1070d4 <socket_init+0x13c>
  107098:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10709c:	e5933000 	ldr	r3, [r3]
  1070a0:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1070a4:	e1520003 	cmp	r2, r3
  1070a8:	0a000004 	beq	1070c0 <socket_init+0x128>
  1070ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1070b0:	e5933004 	ldr	r3, [r3, #4]
  1070b4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1070b8:	e1520003 	cmp	r2, r3
  1070bc:	1a000004 	bne	1070d4 <socket_init+0x13c>
        {
            sock->netdev = netdv_def;
  1070c0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1070c4:	e51b200c 	ldr	r2, [fp, #-12]
  1070c8:	e5832014 	str	r2, [r3, #20]
            flag = RT_TRUE;
  1070cc:	e3a03001 	mov	r3, #1
  1070d0:	e50b3008 	str	r3, [fp, #-8]
        }
    }

    if (flag == RT_FALSE)
  1070d4:	e51b3008 	ldr	r3, [fp, #-8]
  1070d8:	e3530000 	cmp	r3, #0
  1070dc:	1a000014 	bne	107134 <socket_init+0x19c>
    {
        /* get network interface device by protocol family */
        netdev = netdev_get_by_family(family);
  1070e0:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1070e4:	ebfff7e1 	bl	105070 <netdev_get_by_family>
  1070e8:	e50b0010 	str	r0, [fp, #-16]
        if (netdev == RT_NULL)
  1070ec:	e51b3010 	ldr	r3, [fp, #-16]
  1070f0:	e3530000 	cmp	r3, #0
  1070f4:	1a00000b 	bne	107128 <socket_init+0x190>
        {
            LOG_E("not find network interface device by protocol family(%d).", family);
  1070f8:	e30504b0 	movw	r0, #21680	; 0x54b0
  1070fc:	e3400014 	movt	r0, #20
  107100:	ebfff003 	bl	103114 <rt_kprintf>
  107104:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  107108:	e30505c4 	movw	r0, #21956	; 0x55c4
  10710c:	e3400014 	movt	r0, #20
  107110:	ebffefff 	bl	103114 <rt_kprintf>
  107114:	e30504e4 	movw	r0, #21732	; 0x54e4
  107118:	e3400014 	movt	r0, #20
  10711c:	ebffeffc 	bl	103114 <rt_kprintf>
            return -3;
  107120:	e3e03002 	mvn	r3, #2
  107124:	ea000003 	b	107138 <socket_init+0x1a0>
        }

        sock->netdev = netdev;
  107128:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10712c:	e51b2010 	ldr	r2, [fp, #-16]
  107130:	e5832014 	str	r2, [r3, #20]
    }

    return 0;
  107134:	e3a03000 	mov	r3, #0
}
  107138:	e1a00003 	mov	r0, r3
  10713c:	e24bd004 	sub	sp, fp, #4
  107140:	e8bd8800 	pop	{fp, pc}

00107144 <socket_alloc>:

static int socket_alloc(struct sal_socket_table *st, int f_socket)
{
  107144:	e92d4810 	push	{r4, fp, lr}
  107148:	e28db008 	add	fp, sp, #8
  10714c:	e24dd01c 	sub	sp, sp, #28
  107150:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  107154:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
    int idx;

    /* find an empty socket entry */
    for (idx = f_socket; idx < (int) st->max_socket; idx++)
  107158:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  10715c:	e50b3010 	str	r3, [fp, #-16]
  107160:	ea00000a 	b	107190 <socket_alloc+0x4c>
    {
        if (st->sockets[idx] == RT_NULL)
  107164:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107168:	e5932004 	ldr	r2, [r3, #4]
  10716c:	e51b3010 	ldr	r3, [fp, #-16]
  107170:	e1a03103 	lsl	r3, r3, #2
  107174:	e0823003 	add	r3, r2, r3
  107178:	e5933000 	ldr	r3, [r3]
  10717c:	e3530000 	cmp	r3, #0
  107180:	0a000009 	beq	1071ac <socket_alloc+0x68>
    for (idx = f_socket; idx < (int) st->max_socket; idx++)
  107184:	e51b3010 	ldr	r3, [fp, #-16]
  107188:	e2833001 	add	r3, r3, #1
  10718c:	e50b3010 	str	r3, [fp, #-16]
  107190:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107194:	e5933000 	ldr	r3, [r3]
  107198:	e1a02003 	mov	r2, r3
  10719c:	e51b3010 	ldr	r3, [fp, #-16]
  1071a0:	e1530002 	cmp	r3, r2
  1071a4:	baffffee 	blt	107164 <socket_alloc+0x20>
  1071a8:	ea000000 	b	1071b0 <socket_alloc+0x6c>
        {
            break;
  1071ac:	e320f000 	nop	{0}
        }
    }

    /* allocate a larger sockte container */
    if (idx == (int) st->max_socket &&  st->max_socket < SAL_SOCKETS_NUM)
  1071b0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1071b4:	e5933000 	ldr	r3, [r3]
  1071b8:	e1a02003 	mov	r2, r3
  1071bc:	e51b3010 	ldr	r3, [fp, #-16]
  1071c0:	e1530002 	cmp	r3, r2
  1071c4:	1a00002e 	bne	107284 <socket_alloc+0x140>
  1071c8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1071cc:	e5933000 	ldr	r3, [r3]
  1071d0:	e353001f 	cmp	r3, #31
  1071d4:	8a00002a 	bhi	107284 <socket_alloc+0x140>
    {
        int cnt, index;
        struct sal_socket **sockets;

        /* increase the number of socket with 4 step length */
        cnt = st->max_socket + SOCKET_TABLE_STEP_LEN;
  1071d8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1071dc:	e5933000 	ldr	r3, [r3]
  1071e0:	e2833004 	add	r3, r3, #4
  1071e4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        cnt = cnt > SAL_SOCKETS_NUM ? SAL_SOCKETS_NUM : cnt;
  1071e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1071ec:	e3530020 	cmp	r3, #32
  1071f0:	b1a03003 	movlt	r3, r3
  1071f4:	a3a03020 	movge	r3, #32
  1071f8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

        sockets = rt_realloc(st->sockets, cnt * sizeof(struct sal_socket *));
  1071fc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107200:	e5932004 	ldr	r2, [r3, #4]
  107204:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  107208:	e1a03103 	lsl	r3, r3, #2
  10720c:	e1a01003 	mov	r1, r3
  107210:	e1a00002 	mov	r0, r2
  107214:	ebffef70 	bl	102fdc <rt_realloc>
  107218:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
        if (sockets == RT_NULL)
  10721c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  107220:	e3530000 	cmp	r3, #0
  107224:	0a00003a 	beq	107314 <socket_alloc+0x1d0>
            goto __result; /* return st->max_socket */

        /* clean the new allocated fds */
        for (index = st->max_socket; index < cnt; index++)
  107228:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10722c:	e5933000 	ldr	r3, [r3]
  107230:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  107234:	ea000008 	b	10725c <socket_alloc+0x118>
        {
            sockets[index] = RT_NULL;
  107238:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10723c:	e1a03103 	lsl	r3, r3, #2
  107240:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  107244:	e0823003 	add	r3, r2, r3
  107248:	e3a02000 	mov	r2, #0
  10724c:	e5832000 	str	r2, [r3]
        for (index = st->max_socket; index < cnt; index++)
  107250:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107254:	e2833001 	add	r3, r3, #1
  107258:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  10725c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  107260:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  107264:	e1520003 	cmp	r2, r3
  107268:	bafffff2 	blt	107238 <socket_alloc+0xf4>
        }

        st->sockets = sockets;
  10726c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107270:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  107274:	e5832004 	str	r2, [r3, #4]
        st->max_socket = cnt;
  107278:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10727c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107280:	e5832000 	str	r2, [r3]
    }

    /* allocate  'struct sal_socket' */
    if (idx < (int) st->max_socket && st->sockets[idx] == RT_NULL)
  107284:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107288:	e5933000 	ldr	r3, [r3]
  10728c:	e1a02003 	mov	r2, r3
  107290:	e51b3010 	ldr	r3, [fp, #-16]
  107294:	e1530002 	cmp	r3, r2
  107298:	aa00001f 	bge	10731c <socket_alloc+0x1d8>
  10729c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1072a0:	e5932004 	ldr	r2, [r3, #4]
  1072a4:	e51b3010 	ldr	r3, [fp, #-16]
  1072a8:	e1a03103 	lsl	r3, r3, #2
  1072ac:	e0823003 	add	r3, r2, r3
  1072b0:	e5933000 	ldr	r3, [r3]
  1072b4:	e3530000 	cmp	r3, #0
  1072b8:	1a000017 	bne	10731c <socket_alloc+0x1d8>
    {
        st->sockets[idx] = rt_calloc(1, sizeof(struct sal_socket));
  1072bc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1072c0:	e5932004 	ldr	r2, [r3, #4]
  1072c4:	e51b3010 	ldr	r3, [fp, #-16]
  1072c8:	e1a03103 	lsl	r3, r3, #2
  1072cc:	e0824003 	add	r4, r2, r3
  1072d0:	e3a0101c 	mov	r1, #28
  1072d4:	e3a00001 	mov	r0, #1
  1072d8:	ebffef4b 	bl	10300c <rt_calloc>
  1072dc:	e1a03000 	mov	r3, r0
  1072e0:	e5843000 	str	r3, [r4]
        if (st->sockets[idx] == RT_NULL)
  1072e4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1072e8:	e5932004 	ldr	r2, [r3, #4]
  1072ec:	e51b3010 	ldr	r3, [fp, #-16]
  1072f0:	e1a03103 	lsl	r3, r3, #2
  1072f4:	e0823003 	add	r3, r2, r3
  1072f8:	e5933000 	ldr	r3, [r3]
  1072fc:	e3530000 	cmp	r3, #0
  107300:	1a000005 	bne	10731c <socket_alloc+0x1d8>
        {
            idx = st->max_socket;
  107304:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107308:	e5933000 	ldr	r3, [r3]
  10730c:	e50b3010 	str	r3, [fp, #-16]
  107310:	ea000002 	b	107320 <socket_alloc+0x1dc>
            goto __result; /* return st->max_socket */
  107314:	e320f000 	nop	{0}
  107318:	ea000000 	b	107320 <socket_alloc+0x1dc>
        }
    }

__result:
  10731c:	e320f000 	nop	{0}
    return idx;
  107320:	e51b3010 	ldr	r3, [fp, #-16]
}
  107324:	e1a00003 	mov	r0, r3
  107328:	e24bd008 	sub	sp, fp, #8
  10732c:	e8bd8810 	pop	{r4, fp, pc}

00107330 <socket_free>:

static void socket_free(struct sal_socket_table *st, int idx)
{
  107330:	e92d4800 	push	{fp, lr}
  107334:	e28db004 	add	fp, sp, #4
  107338:	e24dd010 	sub	sp, sp, #16
  10733c:	e50b0010 	str	r0, [fp, #-16]
  107340:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    struct sal_socket *sock;

    sock = st->sockets[idx];
  107344:	e51b3010 	ldr	r3, [fp, #-16]
  107348:	e5932004 	ldr	r2, [r3, #4]
  10734c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107350:	e1a03103 	lsl	r3, r3, #2
  107354:	e0823003 	add	r3, r2, r3
  107358:	e5933000 	ldr	r3, [r3]
  10735c:	e50b3008 	str	r3, [fp, #-8]
    st->sockets[idx] = RT_NULL;
  107360:	e51b3010 	ldr	r3, [fp, #-16]
  107364:	e5932004 	ldr	r2, [r3, #4]
  107368:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10736c:	e1a03103 	lsl	r3, r3, #2
  107370:	e0823003 	add	r3, r2, r3
  107374:	e3a02000 	mov	r2, #0
  107378:	e5832000 	str	r2, [r3]
    rt_free(sock);
  10737c:	e51b0008 	ldr	r0, [fp, #-8]
  107380:	ebffef0d 	bl	102fbc <rt_free>
}
  107384:	e320f000 	nop	{0}
  107388:	e24bd004 	sub	sp, fp, #4
  10738c:	e8bd8800 	pop	{fp, pc}

00107390 <socket_new>:

static int socket_new(void)
{
  107390:	e92d4800 	push	{fp, lr}
  107394:	e28db004 	add	fp, sp, #4
  107398:	e24dd010 	sub	sp, sp, #16
    struct sal_socket *sock;
    struct sal_socket_table *st = &socket_table;
  10739c:	e30d3454 	movw	r3, #54356	; 0xd454
  1073a0:	e3403014 	movt	r3, #20
  1073a4:	e50b300c 	str	r3, [fp, #-12]
    int idx;

    sal_lock();
  1073a8:	ebfffea6 	bl	106e48 <sal_lock>

    /* find an empty sal socket entry */
    idx = socket_alloc(st, 0);
  1073ac:	e3a01000 	mov	r1, #0
  1073b0:	e51b000c 	ldr	r0, [fp, #-12]
  1073b4:	ebffff62 	bl	107144 <socket_alloc>
  1073b8:	e50b0008 	str	r0, [fp, #-8]

    /* can't find an empty sal socket entry */
    if (idx == (int) st->max_socket)
  1073bc:	e51b300c 	ldr	r3, [fp, #-12]
  1073c0:	e5933000 	ldr	r3, [r3]
  1073c4:	e1a02003 	mov	r2, r3
  1073c8:	e51b3008 	ldr	r3, [fp, #-8]
  1073cc:	e1530002 	cmp	r3, r2
  1073d0:	1a000002 	bne	1073e0 <socket_new+0x50>
    {
        idx = -(1 + SAL_SOCKET_OFFSET);
  1073d4:	e3e03000 	mvn	r3, #0
  1073d8:	e50b3008 	str	r3, [fp, #-8]
        goto __result;
  1073dc:	ea000012 	b	10742c <socket_new+0x9c>
    }

    sock = st->sockets[idx];
  1073e0:	e51b300c 	ldr	r3, [fp, #-12]
  1073e4:	e5932004 	ldr	r2, [r3, #4]
  1073e8:	e51b3008 	ldr	r3, [fp, #-8]
  1073ec:	e1a03103 	lsl	r3, r3, #2
  1073f0:	e0823003 	add	r3, r2, r3
  1073f4:	e5933000 	ldr	r3, [r3]
  1073f8:	e50b3010 	str	r3, [fp, #-16]
    sock->socket = idx + SAL_SOCKET_OFFSET;
  1073fc:	e51b3010 	ldr	r3, [fp, #-16]
  107400:	e51b2008 	ldr	r2, [fp, #-8]
  107404:	e5832004 	str	r2, [r3, #4]
    sock->magic = SAL_SOCKET_MAGIC;
  107408:	e51b3010 	ldr	r3, [fp, #-16]
  10740c:	e3052a10 	movw	r2, #23056	; 0x5a10
  107410:	e5832000 	str	r2, [r3]
    sock->netdev = RT_NULL;
  107414:	e51b3010 	ldr	r3, [fp, #-16]
  107418:	e3a02000 	mov	r2, #0
  10741c:	e5832014 	str	r2, [r3, #20]
    sock->user_data = RT_NULL;
  107420:	e51b3010 	ldr	r3, [fp, #-16]
  107424:	e3a02000 	mov	r2, #0
  107428:	e5832018 	str	r2, [r3, #24]
#ifdef SAL_USING_TLS
    sock->user_data_tls = RT_NULL;
#endif

__result:
    sal_unlock();
  10742c:	ebfffe99 	bl	106e98 <sal_unlock>
    return idx + SAL_SOCKET_OFFSET;
  107430:	e51b3008 	ldr	r3, [fp, #-8]
}
  107434:	e1a00003 	mov	r0, r3
  107438:	e24bd004 	sub	sp, fp, #4
  10743c:	e8bd8800 	pop	{fp, pc}

00107440 <socket_delete>:

static void socket_delete(int socket)
{
  107440:	e92d4800 	push	{fp, lr}
  107444:	e28db004 	add	fp, sp, #4
  107448:	e24dd018 	sub	sp, sp, #24
  10744c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    struct sal_socket *sock;
    struct sal_socket_table *st = &socket_table;
  107450:	e30d3454 	movw	r3, #54356	; 0xd454
  107454:	e3403014 	movt	r3, #20
  107458:	e50b3008 	str	r3, [fp, #-8]
    int idx;

    idx = socket - SAL_SOCKET_OFFSET;
  10745c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  107460:	e50b300c 	str	r3, [fp, #-12]
    if (idx < 0 || idx >= (int) st->max_socket)
  107464:	e51b300c 	ldr	r3, [fp, #-12]
  107468:	e3530000 	cmp	r3, #0
  10746c:	ba00001d 	blt	1074e8 <socket_delete+0xa8>
  107470:	e51b3008 	ldr	r3, [fp, #-8]
  107474:	e5933000 	ldr	r3, [r3]
  107478:	e1a02003 	mov	r2, r3
  10747c:	e51b300c 	ldr	r3, [fp, #-12]
  107480:	e1530002 	cmp	r3, r2
  107484:	aa000017 	bge	1074e8 <socket_delete+0xa8>
    {
        return;
    }
    sal_lock();
  107488:	ebfffe6e 	bl	106e48 <sal_lock>
    sock = sal_get_socket(socket);
  10748c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  107490:	ebfffe41 	bl	106d9c <sal_get_socket>
  107494:	e50b0010 	str	r0, [fp, #-16]
    RT_ASSERT(sock != RT_NULL);
  107498:	e51b3010 	ldr	r3, [fp, #-16]
  10749c:	e3530000 	cmp	r3, #0
  1074a0:	1a000005 	bne	1074bc <socket_delete+0x7c>
  1074a4:	e3002203 	movw	r2, #515	; 0x203
  1074a8:	e30516a0 	movw	r1, #22176	; 0x56a0
  1074ac:	e3401014 	movt	r1, #20
  1074b0:	e3050600 	movw	r0, #22016	; 0x5600
  1074b4:	e3400014 	movt	r0, #20
  1074b8:	ebfff036 	bl	103598 <rt_assert_handler>
    sock->magic = 0;
  1074bc:	e51b3010 	ldr	r3, [fp, #-16]
  1074c0:	e3a02000 	mov	r2, #0
  1074c4:	e5832000 	str	r2, [r3]
    sock->netdev = RT_NULL;
  1074c8:	e51b3010 	ldr	r3, [fp, #-16]
  1074cc:	e3a02000 	mov	r2, #0
  1074d0:	e5832014 	str	r2, [r3, #20]
    socket_free(st, idx);
  1074d4:	e51b100c 	ldr	r1, [fp, #-12]
  1074d8:	e51b0008 	ldr	r0, [fp, #-8]
  1074dc:	ebffff93 	bl	107330 <socket_free>
    sal_unlock();
  1074e0:	ebfffe6c 	bl	106e98 <sal_unlock>
  1074e4:	ea000000 	b	1074ec <socket_delete+0xac>
        return;
  1074e8:	e320f000 	nop	{0}
}
  1074ec:	e24bd004 	sub	sp, fp, #4
  1074f0:	e8bd8800 	pop	{fp, pc}

001074f4 <sal_accept>:

int sal_accept(int socket, struct sockaddr *addr, socklen_t *addrlen)
{
  1074f4:	e92d4800 	push	{fp, lr}
  1074f8:	e28db004 	add	fp, sp, #4
  1074fc:	e24dd028 	sub	sp, sp, #40	; 0x28
  107500:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  107504:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  107508:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
    int new_socket;
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  10750c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  107510:	ebfffe21 	bl	106d9c <sal_get_socket>
  107514:	e50b0008 	str	r0, [fp, #-8]
  107518:	e51b3008 	ldr	r3, [fp, #-8]
  10751c:	e3530000 	cmp	r3, #0
  107520:	1a000001 	bne	10752c <sal_accept+0x38>
  107524:	e3e03000 	mvn	r3, #0
  107528:	ea000059 	b	107694 <sal_accept+0x1a0>

    /* check the network interface is up status */
    SAL_NETDEV_IS_UP(sock->netdev);
  10752c:	e51b3008 	ldr	r3, [fp, #-8]
  107530:	e5933014 	ldr	r3, [r3, #20]
  107534:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  107538:	e2033001 	and	r3, r3, #1
  10753c:	e3530000 	cmp	r3, #0
  107540:	1a000001 	bne	10754c <sal_accept+0x58>
  107544:	e3e03000 	mvn	r3, #0
  107548:	ea000051 	b	107694 <sal_accept+0x1a0>

    /* check the network interface socket operations */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, accept);
  10754c:	e51b3008 	ldr	r3, [fp, #-8]
  107550:	e5933014 	ldr	r3, [r3, #20]
  107554:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  107558:	e50b300c 	str	r3, [fp, #-12]
  10755c:	e51b300c 	ldr	r3, [fp, #-12]
  107560:	e5933008 	ldr	r3, [r3, #8]
  107564:	e5933014 	ldr	r3, [r3, #20]
  107568:	e3530000 	cmp	r3, #0
  10756c:	1a000001 	bne	107578 <sal_accept+0x84>
  107570:	e3e03000 	mvn	r3, #0
  107574:	ea000046 	b	107694 <sal_accept+0x1a0>

    new_socket = pf->skt_ops->accept((int)(size_t)sock->user_data, addr, addrlen);
  107578:	e51b300c 	ldr	r3, [fp, #-12]
  10757c:	e5933008 	ldr	r3, [r3, #8]
  107580:	e5933014 	ldr	r3, [r3, #20]
  107584:	e51b2008 	ldr	r2, [fp, #-8]
  107588:	e5922018 	ldr	r2, [r2, #24]
  10758c:	e1a00002 	mov	r0, r2
  107590:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  107594:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  107598:	e12fff33 	blx	r3
  10759c:	e50b0010 	str	r0, [fp, #-16]
    if (new_socket != -1)
  1075a0:	e51b3010 	ldr	r3, [fp, #-16]
  1075a4:	e3730001 	cmn	r3, #1
  1075a8:	0a000038 	beq	107690 <sal_accept+0x19c>
        int retval;
        int new_sal_socket;
        struct sal_socket *new_sock;

        /* allocate a new socket structure and registered socket options */
        new_sal_socket = socket_new();
  1075ac:	ebffff77 	bl	107390 <socket_new>
  1075b0:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
        new_sock = sal_get_socket(new_sal_socket);
  1075b4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1075b8:	ebfffdf7 	bl	106d9c <sal_get_socket>
  1075bc:	e1a03000 	mov	r3, r0
  1075c0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
        if (new_sock == RT_NULL)
  1075c4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1075c8:	e3530000 	cmp	r3, #0
  1075cc:	1a000006 	bne	1075ec <sal_accept+0xf8>
        {
            pf->skt_ops->closesocket(new_socket);
  1075d0:	e51b300c 	ldr	r3, [fp, #-12]
  1075d4:	e5933008 	ldr	r3, [r3, #8]
  1075d8:	e5933004 	ldr	r3, [r3, #4]
  1075dc:	e51b0010 	ldr	r0, [fp, #-16]
  1075e0:	e12fff33 	blx	r3
            return -1;
  1075e4:	e3e03000 	mvn	r3, #0
  1075e8:	ea000029 	b	107694 <sal_accept+0x1a0>
        }

        retval = socket_init(sock->domain, sock->type, sock->protocol, &new_sock);
  1075ec:	e51b3008 	ldr	r3, [fp, #-8]
  1075f0:	e5930008 	ldr	r0, [r3, #8]
  1075f4:	e51b3008 	ldr	r3, [fp, #-8]
  1075f8:	e593100c 	ldr	r1, [r3, #12]
  1075fc:	e51b3008 	ldr	r3, [fp, #-8]
  107600:	e5932010 	ldr	r2, [r3, #16]
  107604:	e24b301c 	sub	r3, fp, #28
  107608:	ebfffe62 	bl	106f98 <socket_init>
  10760c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
        if (retval < 0)
  107610:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  107614:	e3530000 	cmp	r3, #0
  107618:	aa000017 	bge	10767c <sal_accept+0x188>
        {
            pf->skt_ops->closesocket(new_socket);
  10761c:	e51b300c 	ldr	r3, [fp, #-12]
  107620:	e5933008 	ldr	r3, [r3, #8]
  107624:	e5933004 	ldr	r3, [r3, #4]
  107628:	e51b0010 	ldr	r0, [fp, #-16]
  10762c:	e12fff33 	blx	r3
            rt_memset(new_sock, 0x00, sizeof(struct sal_socket));
  107630:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  107634:	e3a0201c 	mov	r2, #28
  107638:	e3a01000 	mov	r1, #0
  10763c:	e1a00003 	mov	r0, r3
  107640:	ebffef20 	bl	1032c8 <rt_memset>
            /* socket init failed, delete socket */
            socket_delete(new_sal_socket);
  107644:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  107648:	ebffff7c 	bl	107440 <socket_delete>
            LOG_E("New socket registered failed, return error %d.", retval);
  10764c:	e30504b0 	movw	r0, #21680	; 0x54b0
  107650:	e3400014 	movt	r0, #20
  107654:	ebffeeae 	bl	103114 <rt_kprintf>
  107658:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  10765c:	e3050610 	movw	r0, #22032	; 0x5610
  107660:	e3400014 	movt	r0, #20
  107664:	ebffeeaa 	bl	103114 <rt_kprintf>
  107668:	e30504e4 	movw	r0, #21732	; 0x54e4
  10766c:	e3400014 	movt	r0, #20
  107670:	ebffeea7 	bl	103114 <rt_kprintf>
            return -1;
  107674:	e3e03000 	mvn	r3, #0
  107678:	ea000005 	b	107694 <sal_accept+0x1a0>
        }

        /* socket structure user_data used to store the acquired new socket */
        new_sock->user_data = (void *)(size_t)new_socket;
  10767c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  107680:	e51b2010 	ldr	r2, [fp, #-16]
  107684:	e5832018 	str	r2, [r3, #24]

        return new_sal_socket;
  107688:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10768c:	ea000000 	b	107694 <sal_accept+0x1a0>
    }

    return -1;
  107690:	e3e03000 	mvn	r3, #0
}
  107694:	e1a00003 	mov	r0, r3
  107698:	e24bd004 	sub	sp, fp, #4
  10769c:	e8bd8800 	pop	{fp, pc}

001076a0 <sal_sockaddr_to_ipaddr>:

static void sal_sockaddr_to_ipaddr(const struct sockaddr *name, ip_addr_t *local_ipaddr)
{
  1076a0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1076a4:	e28db000 	add	fp, sp, #0
  1076a8:	e24dd014 	sub	sp, sp, #20
  1076ac:	e50b0010 	str	r0, [fp, #-16]
  1076b0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    const struct sockaddr_in *svr_addr = (const struct sockaddr_in *) name;
  1076b4:	e51b3010 	ldr	r3, [fp, #-16]
  1076b8:	e50b3008 	str	r3, [fp, #-8]

#if NETDEV_IPV4 && NETDEV_IPV6
    local_ipaddr->u_addr.ip4.addr = svr_addr->sin_addr.s_addr;
    local_ipaddr->type = IPADDR_TYPE_V4;
#elif NETDEV_IPV4
    local_ipaddr->addr = svr_addr->sin_addr.s_addr;
  1076bc:	e51b3008 	ldr	r3, [fp, #-8]
  1076c0:	e5932004 	ldr	r2, [r3, #4]
  1076c4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1076c8:	e5832000 	str	r2, [r3]
#elif NETDEV_IPV6
#error "not only support IPV6"
#endif /* NETDEV_IPV4 && NETDEV_IPV6*/
}
  1076cc:	e320f000 	nop	{0}
  1076d0:	e28bd000 	add	sp, fp, #0
  1076d4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1076d8:	e12fff1e 	bx	lr

001076dc <sal_bind>:

int sal_bind(int socket, const struct sockaddr *name, socklen_t namelen)
{
  1076dc:	e92d4800 	push	{fp, lr}
  1076e0:	e28db004 	add	fp, sp, #4
  1076e4:	e24dd030 	sub	sp, sp, #48	; 0x30
  1076e8:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  1076ec:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  1076f0:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
    struct sal_socket *sock;
    struct sal_proto_family *pf;
    ip_addr_t input_ipaddr;

    RT_ASSERT(name);
  1076f4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1076f8:	e3530000 	cmp	r3, #0
  1076fc:	1a000005 	bne	107718 <sal_bind+0x3c>
  107700:	e3002251 	movw	r2, #593	; 0x251
  107704:	e30516b0 	movw	r1, #22192	; 0x56b0
  107708:	e3401014 	movt	r1, #20
  10770c:	e3050640 	movw	r0, #22080	; 0x5640
  107710:	e3400014 	movt	r0, #20
  107714:	ebffef9f 	bl	103598 <rt_assert_handler>

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  107718:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  10771c:	ebfffd9e 	bl	106d9c <sal_get_socket>
  107720:	e50b0008 	str	r0, [fp, #-8]
  107724:	e51b3008 	ldr	r3, [fp, #-8]
  107728:	e3530000 	cmp	r3, #0
  10772c:	1a000001 	bne	107738 <sal_bind+0x5c>
  107730:	e3e03000 	mvn	r3, #0
  107734:	ea000062 	b	1078c4 <sal_bind+0x1e8>

    /* bind network interface by ip address */
    sal_sockaddr_to_ipaddr(name, &input_ipaddr);
  107738:	e24b3020 	sub	r3, fp, #32
  10773c:	e1a01003 	mov	r1, r3
  107740:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
  107744:	ebffffd5 	bl	1076a0 <sal_sockaddr_to_ipaddr>

    /* check input ipaddr is default netdev ipaddr */
    if (!ip_addr_isany_val(input_ipaddr))
  107748:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10774c:	e3530000 	cmp	r3, #0
  107750:	0a000046 	beq	107870 <sal_bind+0x194>
    {
        struct sal_proto_family *input_pf = RT_NULL, *local_pf = RT_NULL;
  107754:	e3a03000 	mov	r3, #0
  107758:	e50b300c 	str	r3, [fp, #-12]
  10775c:	e3a03000 	mov	r3, #0
  107760:	e50b3010 	str	r3, [fp, #-16]
        struct netdev *new_netdev = RT_NULL;
  107764:	e3a03000 	mov	r3, #0
  107768:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

        new_netdev = netdev_get_by_ipaddr(&input_ipaddr);
  10776c:	e24b3020 	sub	r3, fp, #32
  107770:	e1a00003 	mov	r0, r3
  107774:	ebfff5df 	bl	104ef8 <netdev_get_by_ipaddr>
  107778:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
        if (new_netdev == RT_NULL)
  10777c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107780:	e3530000 	cmp	r3, #0
  107784:	1a000001 	bne	107790 <sal_bind+0xb4>
        {
            return -1;
  107788:	e3e03000 	mvn	r3, #0
  10778c:	ea00004c 	b	1078c4 <sal_bind+0x1e8>
        }

        /* get input and local ip address proto_family */
        SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, local_pf, bind);
  107790:	e51b3008 	ldr	r3, [fp, #-8]
  107794:	e5933014 	ldr	r3, [r3, #20]
  107798:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10779c:	e50b3010 	str	r3, [fp, #-16]
  1077a0:	e51b3010 	ldr	r3, [fp, #-16]
  1077a4:	e5933008 	ldr	r3, [r3, #8]
  1077a8:	e5933008 	ldr	r3, [r3, #8]
  1077ac:	e3530000 	cmp	r3, #0
  1077b0:	1a000001 	bne	1077bc <sal_bind+0xe0>
  1077b4:	e3e03000 	mvn	r3, #0
  1077b8:	ea000041 	b	1078c4 <sal_bind+0x1e8>
        SAL_NETDEV_SOCKETOPS_VALID(new_netdev, input_pf, bind);
  1077bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1077c0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  1077c4:	e50b300c 	str	r3, [fp, #-12]
  1077c8:	e51b300c 	ldr	r3, [fp, #-12]
  1077cc:	e5933008 	ldr	r3, [r3, #8]
  1077d0:	e5933008 	ldr	r3, [r3, #8]
  1077d4:	e3530000 	cmp	r3, #0
  1077d8:	1a000001 	bne	1077e4 <sal_bind+0x108>
  1077dc:	e3e03000 	mvn	r3, #0
  1077e0:	ea000037 	b	1078c4 <sal_bind+0x1e8>

        /* check the network interface protocol family type */
        if (input_pf->family != local_pf->family)
  1077e4:	e51b300c 	ldr	r3, [fp, #-12]
  1077e8:	e5932000 	ldr	r2, [r3]
  1077ec:	e51b3010 	ldr	r3, [fp, #-16]
  1077f0:	e5933000 	ldr	r3, [r3]
  1077f4:	e1520003 	cmp	r2, r3
  1077f8:	0a00001c 	beq	107870 <sal_bind+0x194>
        {
            int new_socket = -1;
  1077fc:	e3e03000 	mvn	r3, #0
  107800:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

            /* protocol family is different, close old socket and create new socket by input ip address */
            local_pf->skt_ops->closesocket(socket);
  107804:	e51b3010 	ldr	r3, [fp, #-16]
  107808:	e5933008 	ldr	r3, [r3, #8]
  10780c:	e5933004 	ldr	r3, [r3, #4]
  107810:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  107814:	e12fff33 	blx	r3

            new_socket = input_pf->skt_ops->socket(input_pf->family, sock->type, sock->protocol);
  107818:	e51b300c 	ldr	r3, [fp, #-12]
  10781c:	e5933008 	ldr	r3, [r3, #8]
  107820:	e5933000 	ldr	r3, [r3]
  107824:	e51b200c 	ldr	r2, [fp, #-12]
  107828:	e5920000 	ldr	r0, [r2]
  10782c:	e51b2008 	ldr	r2, [fp, #-8]
  107830:	e592100c 	ldr	r1, [r2, #12]
  107834:	e51b2008 	ldr	r2, [fp, #-8]
  107838:	e5922010 	ldr	r2, [r2, #16]
  10783c:	e12fff33 	blx	r3
  107840:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
            if (new_socket < 0)
  107844:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  107848:	e3530000 	cmp	r3, #0
  10784c:	aa000001 	bge	107858 <sal_bind+0x17c>
            {
                return -1;
  107850:	e3e03000 	mvn	r3, #0
  107854:	ea00001a 	b	1078c4 <sal_bind+0x1e8>
            }
            sock->netdev = new_netdev;
  107858:	e51b3008 	ldr	r3, [fp, #-8]
  10785c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  107860:	e5832014 	str	r2, [r3, #20]
            sock->user_data = (void *)(size_t)new_socket;
  107864:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  107868:	e51b3008 	ldr	r3, [fp, #-8]
  10786c:	e5832018 	str	r2, [r3, #24]
        }
    }

    /* check and get protocol families by the network interface device */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, bind);
  107870:	e51b3008 	ldr	r3, [fp, #-8]
  107874:	e5933014 	ldr	r3, [r3, #20]
  107878:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10787c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  107880:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  107884:	e5933008 	ldr	r3, [r3, #8]
  107888:	e5933008 	ldr	r3, [r3, #8]
  10788c:	e3530000 	cmp	r3, #0
  107890:	1a000001 	bne	10789c <sal_bind+0x1c0>
  107894:	e3e03000 	mvn	r3, #0
  107898:	ea000009 	b	1078c4 <sal_bind+0x1e8>
    return pf->skt_ops->bind((int)(size_t)sock->user_data, name, namelen);
  10789c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1078a0:	e5933008 	ldr	r3, [r3, #8]
  1078a4:	e5933008 	ldr	r3, [r3, #8]
  1078a8:	e51b2008 	ldr	r2, [fp, #-8]
  1078ac:	e5922018 	ldr	r2, [r2, #24]
  1078b0:	e1a00002 	mov	r0, r2
  1078b4:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  1078b8:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  1078bc:	e12fff33 	blx	r3
  1078c0:	e1a03000 	mov	r3, r0
}
  1078c4:	e1a00003 	mov	r0, r3
  1078c8:	e24bd004 	sub	sp, fp, #4
  1078cc:	e8bd8800 	pop	{fp, pc}

001078d0 <sal_shutdown>:

int sal_shutdown(int socket, int how)
{
  1078d0:	e92d4800 	push	{fp, lr}
  1078d4:	e28db004 	add	fp, sp, #4
  1078d8:	e24dd018 	sub	sp, sp, #24
  1078dc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1078e0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    struct sal_socket *sock;
    struct sal_proto_family *pf;
    int error = 0;
  1078e4:	e3a03000 	mov	r3, #0
  1078e8:	e50b3008 	str	r3, [fp, #-8]

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  1078ec:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1078f0:	ebfffd29 	bl	106d9c <sal_get_socket>
  1078f4:	e50b000c 	str	r0, [fp, #-12]
  1078f8:	e51b300c 	ldr	r3, [fp, #-12]
  1078fc:	e3530000 	cmp	r3, #0
  107900:	1a000001 	bne	10790c <sal_shutdown+0x3c>
  107904:	e3e03000 	mvn	r3, #0
  107908:	ea00001b 	b	10797c <sal_shutdown+0xac>

    /* shutdown operation not need to check network interface status */
    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, shutdown);
  10790c:	e51b300c 	ldr	r3, [fp, #-12]
  107910:	e5933014 	ldr	r3, [r3, #20]
  107914:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  107918:	e50b3010 	str	r3, [fp, #-16]
  10791c:	e51b3010 	ldr	r3, [fp, #-16]
  107920:	e5933008 	ldr	r3, [r3, #8]
  107924:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  107928:	e3530000 	cmp	r3, #0
  10792c:	1a000001 	bne	107938 <sal_shutdown+0x68>
  107930:	e3e03000 	mvn	r3, #0
  107934:	ea000010 	b	10797c <sal_shutdown+0xac>

    if (pf->skt_ops->shutdown((int)(size_t)sock->user_data, how) == 0)
  107938:	e51b3010 	ldr	r3, [fp, #-16]
  10793c:	e5933008 	ldr	r3, [r3, #8]
  107940:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  107944:	e51b200c 	ldr	r2, [fp, #-12]
  107948:	e5922018 	ldr	r2, [r2, #24]
  10794c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  107950:	e1a00002 	mov	r0, r2
  107954:	e12fff33 	blx	r3
  107958:	e1a03000 	mov	r3, r0
  10795c:	e3530000 	cmp	r3, #0
  107960:	1a000002 	bne	107970 <sal_shutdown+0xa0>
            {
                return -1;
            }
        }
#endif
        error = 0;
  107964:	e3a03000 	mov	r3, #0
  107968:	e50b3008 	str	r3, [fp, #-8]
  10796c:	ea000001 	b	107978 <sal_shutdown+0xa8>
    }
    else
    {
        error = -1;
  107970:	e3e03000 	mvn	r3, #0
  107974:	e50b3008 	str	r3, [fp, #-8]
    }


    return error;
  107978:	e51b3008 	ldr	r3, [fp, #-8]
}
  10797c:	e1a00003 	mov	r0, r3
  107980:	e24bd004 	sub	sp, fp, #4
  107984:	e8bd8800 	pop	{fp, pc}

00107988 <sal_getpeername>:

int sal_getpeername(int socket, struct sockaddr *name, socklen_t *namelen)
{
  107988:	e92d4800 	push	{fp, lr}
  10798c:	e28db004 	add	fp, sp, #4
  107990:	e24dd018 	sub	sp, sp, #24
  107994:	e50b0010 	str	r0, [fp, #-16]
  107998:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10799c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  1079a0:	e51b0010 	ldr	r0, [fp, #-16]
  1079a4:	ebfffcfc 	bl	106d9c <sal_get_socket>
  1079a8:	e50b0008 	str	r0, [fp, #-8]
  1079ac:	e51b3008 	ldr	r3, [fp, #-8]
  1079b0:	e3530000 	cmp	r3, #0
  1079b4:	1a000001 	bne	1079c0 <sal_getpeername+0x38>
  1079b8:	e3e03000 	mvn	r3, #0
  1079bc:	ea000014 	b	107a14 <sal_getpeername+0x8c>

    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, getpeername);
  1079c0:	e51b3008 	ldr	r3, [fp, #-8]
  1079c4:	e5933014 	ldr	r3, [r3, #20]
  1079c8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  1079cc:	e50b300c 	str	r3, [fp, #-12]
  1079d0:	e51b300c 	ldr	r3, [fp, #-12]
  1079d4:	e5933008 	ldr	r3, [r3, #8]
  1079d8:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  1079dc:	e3530000 	cmp	r3, #0
  1079e0:	1a000001 	bne	1079ec <sal_getpeername+0x64>
  1079e4:	e3e03000 	mvn	r3, #0
  1079e8:	ea000009 	b	107a14 <sal_getpeername+0x8c>

    return pf->skt_ops->getpeername((int)(size_t)sock->user_data, name, namelen);
  1079ec:	e51b300c 	ldr	r3, [fp, #-12]
  1079f0:	e5933008 	ldr	r3, [r3, #8]
  1079f4:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  1079f8:	e51b2008 	ldr	r2, [fp, #-8]
  1079fc:	e5922018 	ldr	r2, [r2, #24]
  107a00:	e1a00002 	mov	r0, r2
  107a04:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  107a08:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  107a0c:	e12fff33 	blx	r3
  107a10:	e1a03000 	mov	r3, r0
}
  107a14:	e1a00003 	mov	r0, r3
  107a18:	e24bd004 	sub	sp, fp, #4
  107a1c:	e8bd8800 	pop	{fp, pc}

00107a20 <sal_getsockname>:

int sal_getsockname(int socket, struct sockaddr *name, socklen_t *namelen)
{
  107a20:	e92d4800 	push	{fp, lr}
  107a24:	e28db004 	add	fp, sp, #4
  107a28:	e24dd018 	sub	sp, sp, #24
  107a2c:	e50b0010 	str	r0, [fp, #-16]
  107a30:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  107a34:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  107a38:	e51b0010 	ldr	r0, [fp, #-16]
  107a3c:	ebfffcd6 	bl	106d9c <sal_get_socket>
  107a40:	e50b0008 	str	r0, [fp, #-8]
  107a44:	e51b3008 	ldr	r3, [fp, #-8]
  107a48:	e3530000 	cmp	r3, #0
  107a4c:	1a000001 	bne	107a58 <sal_getsockname+0x38>
  107a50:	e3e03000 	mvn	r3, #0
  107a54:	ea000014 	b	107aac <sal_getsockname+0x8c>

    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, getsockname);
  107a58:	e51b3008 	ldr	r3, [fp, #-8]
  107a5c:	e5933014 	ldr	r3, [r3, #20]
  107a60:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  107a64:	e50b300c 	str	r3, [fp, #-12]
  107a68:	e51b300c 	ldr	r3, [fp, #-12]
  107a6c:	e5933008 	ldr	r3, [r3, #8]
  107a70:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  107a74:	e3530000 	cmp	r3, #0
  107a78:	1a000001 	bne	107a84 <sal_getsockname+0x64>
  107a7c:	e3e03000 	mvn	r3, #0
  107a80:	ea000009 	b	107aac <sal_getsockname+0x8c>

    return pf->skt_ops->getsockname((int)(size_t)sock->user_data, name, namelen);
  107a84:	e51b300c 	ldr	r3, [fp, #-12]
  107a88:	e5933008 	ldr	r3, [r3, #8]
  107a8c:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  107a90:	e51b2008 	ldr	r2, [fp, #-8]
  107a94:	e5922018 	ldr	r2, [r2, #24]
  107a98:	e1a00002 	mov	r0, r2
  107a9c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  107aa0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  107aa4:	e12fff33 	blx	r3
  107aa8:	e1a03000 	mov	r3, r0
}
  107aac:	e1a00003 	mov	r0, r3
  107ab0:	e24bd004 	sub	sp, fp, #4
  107ab4:	e8bd8800 	pop	{fp, pc}

00107ab8 <sal_getsockopt>:

int sal_getsockopt(int socket, int level, int optname, void *optval, socklen_t *optlen)
{
  107ab8:	e92d4810 	push	{r4, fp, lr}
  107abc:	e28db008 	add	fp, sp, #8
  107ac0:	e24dd024 	sub	sp, sp, #36	; 0x24
  107ac4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  107ac8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  107acc:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  107ad0:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  107ad4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  107ad8:	ebfffcaf 	bl	106d9c <sal_get_socket>
  107adc:	e50b0010 	str	r0, [fp, #-16]
  107ae0:	e51b3010 	ldr	r3, [fp, #-16]
  107ae4:	e3530000 	cmp	r3, #0
  107ae8:	1a000001 	bne	107af4 <sal_getsockopt+0x3c>
  107aec:	e3e03000 	mvn	r3, #0
  107af0:	ea000017 	b	107b54 <sal_getsockopt+0x9c>

    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, getsockopt);
  107af4:	e51b3010 	ldr	r3, [fp, #-16]
  107af8:	e5933014 	ldr	r3, [r3, #20]
  107afc:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  107b00:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  107b04:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107b08:	e5933008 	ldr	r3, [r3, #8]
  107b0c:	e5933020 	ldr	r3, [r3, #32]
  107b10:	e3530000 	cmp	r3, #0
  107b14:	1a000001 	bne	107b20 <sal_getsockopt+0x68>
  107b18:	e3e03000 	mvn	r3, #0
  107b1c:	ea00000c 	b	107b54 <sal_getsockopt+0x9c>

    return pf->skt_ops->getsockopt((int)(size_t)sock->user_data, level, optname, optval, optlen);
  107b20:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107b24:	e5933008 	ldr	r3, [r3, #8]
  107b28:	e5934020 	ldr	r4, [r3, #32]
  107b2c:	e51b3010 	ldr	r3, [fp, #-16]
  107b30:	e5933018 	ldr	r3, [r3, #24]
  107b34:	e1a00003 	mov	r0, r3
  107b38:	e59b3004 	ldr	r3, [fp, #4]
  107b3c:	e58d3000 	str	r3, [sp]
  107b40:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  107b44:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  107b48:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  107b4c:	e12fff34 	blx	r4
  107b50:	e1a03000 	mov	r3, r0
}
  107b54:	e1a00003 	mov	r0, r3
  107b58:	e24bd008 	sub	sp, fp, #8
  107b5c:	e8bd8810 	pop	{r4, fp, pc}

00107b60 <sal_setsockopt>:

int sal_setsockopt(int socket, int level, int optname, const void *optval, socklen_t optlen)
{
  107b60:	e92d4810 	push	{r4, fp, lr}
  107b64:	e28db008 	add	fp, sp, #8
  107b68:	e24dd024 	sub	sp, sp, #36	; 0x24
  107b6c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  107b70:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  107b74:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  107b78:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  107b7c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  107b80:	ebfffc85 	bl	106d9c <sal_get_socket>
  107b84:	e50b0010 	str	r0, [fp, #-16]
  107b88:	e51b3010 	ldr	r3, [fp, #-16]
  107b8c:	e3530000 	cmp	r3, #0
  107b90:	1a000001 	bne	107b9c <sal_setsockopt+0x3c>
  107b94:	e3e03000 	mvn	r3, #0
  107b98:	ea000017 	b	107bfc <sal_setsockopt+0x9c>

    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, setsockopt);
  107b9c:	e51b3010 	ldr	r3, [fp, #-16]
  107ba0:	e5933014 	ldr	r3, [r3, #20]
  107ba4:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  107ba8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  107bac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107bb0:	e5933008 	ldr	r3, [r3, #8]
  107bb4:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  107bb8:	e3530000 	cmp	r3, #0
  107bbc:	1a000001 	bne	107bc8 <sal_setsockopt+0x68>
  107bc0:	e3e03000 	mvn	r3, #0
  107bc4:	ea00000c 	b	107bfc <sal_setsockopt+0x9c>
    else
    {
        return pf->skt_ops->setsockopt((int) sock->user_data, level, optname, optval, optlen);
    }
#else
    return pf->skt_ops->setsockopt((int)(size_t)sock->user_data, level, optname, optval, optlen);
  107bc8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107bcc:	e5933008 	ldr	r3, [r3, #8]
  107bd0:	e5934024 	ldr	r4, [r3, #36]	; 0x24
  107bd4:	e51b3010 	ldr	r3, [fp, #-16]
  107bd8:	e5933018 	ldr	r3, [r3, #24]
  107bdc:	e1a00003 	mov	r0, r3
  107be0:	e59b3004 	ldr	r3, [fp, #4]
  107be4:	e58d3000 	str	r3, [sp]
  107be8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  107bec:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  107bf0:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  107bf4:	e12fff34 	blx	r4
  107bf8:	e1a03000 	mov	r3, r0
#endif /* SAL_USING_TLS */
}
  107bfc:	e1a00003 	mov	r0, r3
  107c00:	e24bd008 	sub	sp, fp, #8
  107c04:	e8bd8810 	pop	{r4, fp, pc}

00107c08 <sal_connect>:

int sal_connect(int socket, const struct sockaddr *name, socklen_t namelen)
{
  107c08:	e92d4800 	push	{fp, lr}
  107c0c:	e28db004 	add	fp, sp, #4
  107c10:	e24dd020 	sub	sp, sp, #32
  107c14:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  107c18:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  107c1c:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
    struct sal_socket *sock;
    struct sal_proto_family *pf;
    int ret;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  107c20:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  107c24:	ebfffc5c 	bl	106d9c <sal_get_socket>
  107c28:	e50b0008 	str	r0, [fp, #-8]
  107c2c:	e51b3008 	ldr	r3, [fp, #-8]
  107c30:	e3530000 	cmp	r3, #0
  107c34:	1a000001 	bne	107c40 <sal_connect+0x38>
  107c38:	e3e03000 	mvn	r3, #0
  107c3c:	ea00001d 	b	107cb8 <sal_connect+0xb0>

    /* check the network interface is up status */
    SAL_NETDEV_IS_UP(sock->netdev);
  107c40:	e51b3008 	ldr	r3, [fp, #-8]
  107c44:	e5933014 	ldr	r3, [r3, #20]
  107c48:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  107c4c:	e2033001 	and	r3, r3, #1
  107c50:	e3530000 	cmp	r3, #0
  107c54:	1a000001 	bne	107c60 <sal_connect+0x58>
  107c58:	e3e03000 	mvn	r3, #0
  107c5c:	ea000015 	b	107cb8 <sal_connect+0xb0>
    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, connect);
  107c60:	e51b3008 	ldr	r3, [fp, #-8]
  107c64:	e5933014 	ldr	r3, [r3, #20]
  107c68:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  107c6c:	e50b300c 	str	r3, [fp, #-12]
  107c70:	e51b300c 	ldr	r3, [fp, #-12]
  107c74:	e5933008 	ldr	r3, [r3, #8]
  107c78:	e5933010 	ldr	r3, [r3, #16]
  107c7c:	e3530000 	cmp	r3, #0
  107c80:	1a000001 	bne	107c8c <sal_connect+0x84>
  107c84:	e3e03000 	mvn	r3, #0
  107c88:	ea00000a 	b	107cb8 <sal_connect+0xb0>

    ret = pf->skt_ops->connect((int)(size_t)sock->user_data, name, namelen);
  107c8c:	e51b300c 	ldr	r3, [fp, #-12]
  107c90:	e5933008 	ldr	r3, [r3, #8]
  107c94:	e5933010 	ldr	r3, [r3, #16]
  107c98:	e51b2008 	ldr	r2, [fp, #-8]
  107c9c:	e5922018 	ldr	r2, [r2, #24]
  107ca0:	e1a00002 	mov	r0, r2
  107ca4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  107ca8:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  107cac:	e12fff33 	blx	r3
  107cb0:	e50b0010 	str	r0, [fp, #-16]

        return ret;
    }
#endif

    return ret;
  107cb4:	e51b3010 	ldr	r3, [fp, #-16]
}
  107cb8:	e1a00003 	mov	r0, r3
  107cbc:	e24bd004 	sub	sp, fp, #4
  107cc0:	e8bd8800 	pop	{fp, pc}

00107cc4 <sal_listen>:

int sal_listen(int socket, int backlog)
{
  107cc4:	e92d4800 	push	{fp, lr}
  107cc8:	e28db004 	add	fp, sp, #4
  107ccc:	e24dd010 	sub	sp, sp, #16
  107cd0:	e50b0010 	str	r0, [fp, #-16]
  107cd4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  107cd8:	e51b0010 	ldr	r0, [fp, #-16]
  107cdc:	ebfffc2e 	bl	106d9c <sal_get_socket>
  107ce0:	e50b0008 	str	r0, [fp, #-8]
  107ce4:	e51b3008 	ldr	r3, [fp, #-8]
  107ce8:	e3530000 	cmp	r3, #0
  107cec:	1a000001 	bne	107cf8 <sal_listen+0x34>
  107cf0:	e3e03000 	mvn	r3, #0
  107cf4:	ea000013 	b	107d48 <sal_listen+0x84>

    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, listen);
  107cf8:	e51b3008 	ldr	r3, [fp, #-8]
  107cfc:	e5933014 	ldr	r3, [r3, #20]
  107d00:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  107d04:	e50b300c 	str	r3, [fp, #-12]
  107d08:	e51b300c 	ldr	r3, [fp, #-12]
  107d0c:	e5933008 	ldr	r3, [r3, #8]
  107d10:	e593300c 	ldr	r3, [r3, #12]
  107d14:	e3530000 	cmp	r3, #0
  107d18:	1a000001 	bne	107d24 <sal_listen+0x60>
  107d1c:	e3e03000 	mvn	r3, #0
  107d20:	ea000008 	b	107d48 <sal_listen+0x84>

    return pf->skt_ops->listen((int)(size_t)sock->user_data, backlog);
  107d24:	e51b300c 	ldr	r3, [fp, #-12]
  107d28:	e5933008 	ldr	r3, [r3, #8]
  107d2c:	e593300c 	ldr	r3, [r3, #12]
  107d30:	e51b2008 	ldr	r2, [fp, #-8]
  107d34:	e5922018 	ldr	r2, [r2, #24]
  107d38:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  107d3c:	e1a00002 	mov	r0, r2
  107d40:	e12fff33 	blx	r3
  107d44:	e1a03000 	mov	r3, r0
}
  107d48:	e1a00003 	mov	r0, r3
  107d4c:	e24bd004 	sub	sp, fp, #4
  107d50:	e8bd8800 	pop	{fp, pc}

00107d54 <sal_recvfrom>:

int sal_recvfrom(int socket, void *mem, size_t len, int flags,
                 struct sockaddr *from, socklen_t *fromlen)
{
  107d54:	e92d4810 	push	{r4, fp, lr}
  107d58:	e28db008 	add	fp, sp, #8
  107d5c:	e24dd024 	sub	sp, sp, #36	; 0x24
  107d60:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  107d64:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  107d68:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  107d6c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  107d70:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  107d74:	ebfffc08 	bl	106d9c <sal_get_socket>
  107d78:	e50b0010 	str	r0, [fp, #-16]
  107d7c:	e51b3010 	ldr	r3, [fp, #-16]
  107d80:	e3530000 	cmp	r3, #0
  107d84:	1a000001 	bne	107d90 <sal_recvfrom+0x3c>
  107d88:	e3e03000 	mvn	r3, #0
  107d8c:	ea000021 	b	107e18 <sal_recvfrom+0xc4>

    /* check the network interface is up status  */
    SAL_NETDEV_IS_UP(sock->netdev);
  107d90:	e51b3010 	ldr	r3, [fp, #-16]
  107d94:	e5933014 	ldr	r3, [r3, #20]
  107d98:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  107d9c:	e2033001 	and	r3, r3, #1
  107da0:	e3530000 	cmp	r3, #0
  107da4:	1a000001 	bne	107db0 <sal_recvfrom+0x5c>
  107da8:	e3e03000 	mvn	r3, #0
  107dac:	ea000019 	b	107e18 <sal_recvfrom+0xc4>
    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, recvfrom);
  107db0:	e51b3010 	ldr	r3, [fp, #-16]
  107db4:	e5933014 	ldr	r3, [r3, #20]
  107db8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  107dbc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  107dc0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107dc4:	e5933008 	ldr	r3, [r3, #8]
  107dc8:	e593301c 	ldr	r3, [r3, #28]
  107dcc:	e3530000 	cmp	r3, #0
  107dd0:	1a000001 	bne	107ddc <sal_recvfrom+0x88>
  107dd4:	e3e03000 	mvn	r3, #0
  107dd8:	ea00000e 	b	107e18 <sal_recvfrom+0xc4>
    else
    {
        return pf->skt_ops->recvfrom((int)(size_t)sock->user_data, mem, len, flags, from, fromlen);
    }
#else
    return pf->skt_ops->recvfrom((int)(size_t)sock->user_data, mem, len, flags, from, fromlen);
  107ddc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107de0:	e5933008 	ldr	r3, [r3, #8]
  107de4:	e593401c 	ldr	r4, [r3, #28]
  107de8:	e51b3010 	ldr	r3, [fp, #-16]
  107dec:	e5933018 	ldr	r3, [r3, #24]
  107df0:	e1a00003 	mov	r0, r3
  107df4:	e59b3008 	ldr	r3, [fp, #8]
  107df8:	e58d3004 	str	r3, [sp, #4]
  107dfc:	e59b3004 	ldr	r3, [fp, #4]
  107e00:	e58d3000 	str	r3, [sp]
  107e04:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  107e08:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  107e0c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  107e10:	e12fff34 	blx	r4
  107e14:	e1a03000 	mov	r3, r0
#endif
}
  107e18:	e1a00003 	mov	r0, r3
  107e1c:	e24bd008 	sub	sp, fp, #8
  107e20:	e8bd8810 	pop	{r4, fp, pc}

00107e24 <sal_sendto>:

int sal_sendto(int socket, const void *dataptr, size_t size, int flags,
               const struct sockaddr *to, socklen_t tolen)
{
  107e24:	e92d4810 	push	{r4, fp, lr}
  107e28:	e28db008 	add	fp, sp, #8
  107e2c:	e24dd024 	sub	sp, sp, #36	; 0x24
  107e30:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  107e34:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  107e38:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  107e3c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  107e40:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  107e44:	ebfffbd4 	bl	106d9c <sal_get_socket>
  107e48:	e50b0010 	str	r0, [fp, #-16]
  107e4c:	e51b3010 	ldr	r3, [fp, #-16]
  107e50:	e3530000 	cmp	r3, #0
  107e54:	1a000001 	bne	107e60 <sal_sendto+0x3c>
  107e58:	e3e03000 	mvn	r3, #0
  107e5c:	ea000021 	b	107ee8 <sal_sendto+0xc4>

    /* check the network interface is up status  */
    SAL_NETDEV_IS_UP(sock->netdev);
  107e60:	e51b3010 	ldr	r3, [fp, #-16]
  107e64:	e5933014 	ldr	r3, [r3, #20]
  107e68:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  107e6c:	e2033001 	and	r3, r3, #1
  107e70:	e3530000 	cmp	r3, #0
  107e74:	1a000001 	bne	107e80 <sal_sendto+0x5c>
  107e78:	e3e03000 	mvn	r3, #0
  107e7c:	ea000019 	b	107ee8 <sal_sendto+0xc4>
    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, sendto);
  107e80:	e51b3010 	ldr	r3, [fp, #-16]
  107e84:	e5933014 	ldr	r3, [r3, #20]
  107e88:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  107e8c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  107e90:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107e94:	e5933008 	ldr	r3, [r3, #8]
  107e98:	e5933018 	ldr	r3, [r3, #24]
  107e9c:	e3530000 	cmp	r3, #0
  107ea0:	1a000001 	bne	107eac <sal_sendto+0x88>
  107ea4:	e3e03000 	mvn	r3, #0
  107ea8:	ea00000e 	b	107ee8 <sal_sendto+0xc4>
    else
    {
        return pf->skt_ops->sendto((int) sock->user_data, dataptr, size, flags, to, tolen);
    }
#else
    return pf->skt_ops->sendto((int)(size_t)sock->user_data, dataptr, size, flags, to, tolen);
  107eac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107eb0:	e5933008 	ldr	r3, [r3, #8]
  107eb4:	e5934018 	ldr	r4, [r3, #24]
  107eb8:	e51b3010 	ldr	r3, [fp, #-16]
  107ebc:	e5933018 	ldr	r3, [r3, #24]
  107ec0:	e1a00003 	mov	r0, r3
  107ec4:	e59b3008 	ldr	r3, [fp, #8]
  107ec8:	e58d3004 	str	r3, [sp, #4]
  107ecc:	e59b3004 	ldr	r3, [fp, #4]
  107ed0:	e58d3000 	str	r3, [sp]
  107ed4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  107ed8:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  107edc:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  107ee0:	e12fff34 	blx	r4
  107ee4:	e1a03000 	mov	r3, r0
#endif
}
  107ee8:	e1a00003 	mov	r0, r3
  107eec:	e24bd008 	sub	sp, fp, #8
  107ef0:	e8bd8810 	pop	{r4, fp, pc}

00107ef4 <sal_socket>:

int sal_socket(int domain, int type, int protocol)
{
  107ef4:	e92d4800 	push	{fp, lr}
  107ef8:	e28db004 	add	fp, sp, #4
  107efc:	e24dd028 	sub	sp, sp, #40	; 0x28
  107f00:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  107f04:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  107f08:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
    int socket, proto_socket;
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* allocate a new socket and registered socket options */
    socket = socket_new();
  107f0c:	ebfffd1f 	bl	107390 <socket_new>
  107f10:	e50b0008 	str	r0, [fp, #-8]
    if (socket < 0)
  107f14:	e51b3008 	ldr	r3, [fp, #-8]
  107f18:	e3530000 	cmp	r3, #0
  107f1c:	aa000001 	bge	107f28 <sal_socket+0x34>
    {
        return -1;
  107f20:	e3e03000 	mvn	r3, #0
  107f24:	ea000040 	b	10802c <sal_socket+0x138>
    }

    /* get sal socket object by socket descriptor */
    sock = sal_get_socket(socket);
  107f28:	e51b0008 	ldr	r0, [fp, #-8]
  107f2c:	ebfffb9a 	bl	106d9c <sal_get_socket>
  107f30:	e1a03000 	mov	r3, r0
  107f34:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    if (sock == RT_NULL)
  107f38:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  107f3c:	e3530000 	cmp	r3, #0
  107f40:	1a000003 	bne	107f54 <sal_socket+0x60>
    {
        socket_delete(socket);
  107f44:	e51b0008 	ldr	r0, [fp, #-8]
  107f48:	ebfffd3c 	bl	107440 <socket_delete>
        return -1;
  107f4c:	e3e03000 	mvn	r3, #0
  107f50:	ea000035 	b	10802c <sal_socket+0x138>
    }

    /* Initialize sal socket object */
    retval = socket_init(domain, type, protocol, &sock);
  107f54:	e24b3018 	sub	r3, fp, #24
  107f58:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  107f5c:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  107f60:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  107f64:	ebfffc0b 	bl	106f98 <socket_init>
  107f68:	e50b000c 	str	r0, [fp, #-12]
    if (retval < 0)
  107f6c:	e51b300c 	ldr	r3, [fp, #-12]
  107f70:	e3530000 	cmp	r3, #0
  107f74:	aa00000d 	bge	107fb0 <sal_socket+0xbc>
    {
        LOG_E("SAL socket protocol family input failed, return error %d.", retval);
  107f78:	e30504b0 	movw	r0, #21680	; 0x54b0
  107f7c:	e3400014 	movt	r0, #20
  107f80:	ebffec63 	bl	103114 <rt_kprintf>
  107f84:	e51b100c 	ldr	r1, [fp, #-12]
  107f88:	e3050648 	movw	r0, #22088	; 0x5648
  107f8c:	e3400014 	movt	r0, #20
  107f90:	ebffec5f 	bl	103114 <rt_kprintf>
  107f94:	e30504e4 	movw	r0, #21732	; 0x54e4
  107f98:	e3400014 	movt	r0, #20
  107f9c:	ebffec5c 	bl	103114 <rt_kprintf>
        socket_delete(socket);
  107fa0:	e51b0008 	ldr	r0, [fp, #-8]
  107fa4:	ebfffd25 	bl	107440 <socket_delete>
        return -1;
  107fa8:	e3e03000 	mvn	r3, #0
  107fac:	ea00001e 	b	10802c <sal_socket+0x138>
    }

    /* valid the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, socket);
  107fb0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  107fb4:	e5933014 	ldr	r3, [r3, #20]
  107fb8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  107fbc:	e50b3010 	str	r3, [fp, #-16]
  107fc0:	e51b3010 	ldr	r3, [fp, #-16]
  107fc4:	e5933008 	ldr	r3, [r3, #8]
  107fc8:	e5933000 	ldr	r3, [r3]
  107fcc:	e3530000 	cmp	r3, #0
  107fd0:	1a000001 	bne	107fdc <sal_socket+0xe8>
  107fd4:	e3e03000 	mvn	r3, #0
  107fd8:	ea000013 	b	10802c <sal_socket+0x138>

    proto_socket = pf->skt_ops->socket(domain, type, protocol);
  107fdc:	e51b3010 	ldr	r3, [fp, #-16]
  107fe0:	e5933008 	ldr	r3, [r3, #8]
  107fe4:	e5933000 	ldr	r3, [r3]
  107fe8:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  107fec:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  107ff0:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  107ff4:	e12fff33 	blx	r3
  107ff8:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    if (proto_socket >= 0)
  107ffc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108000:	e3530000 	cmp	r3, #0
  108004:	ba000005 	blt	108020 <sal_socket+0x12c>
                socket_delete(socket);
                return -1;
            }
        }
#endif
        sock->user_data = (void *)(size_t)proto_socket;
  108008:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10800c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  108010:	e5832018 	str	r2, [r3, #24]
        return sock->socket;
  108014:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  108018:	e5933004 	ldr	r3, [r3, #4]
  10801c:	ea000002 	b	10802c <sal_socket+0x138>
    }
    socket_delete(socket);
  108020:	e51b0008 	ldr	r0, [fp, #-8]
  108024:	ebfffd05 	bl	107440 <socket_delete>
    return -1;
  108028:	e3e03000 	mvn	r3, #0
}
  10802c:	e1a00003 	mov	r0, r3
  108030:	e24bd004 	sub	sp, fp, #4
  108034:	e8bd8800 	pop	{fp, pc}

00108038 <sal_closesocket>:

int sal_closesocket(int socket)
{
  108038:	e92d4800 	push	{fp, lr}
  10803c:	e28db004 	add	fp, sp, #4
  108040:	e24dd018 	sub	sp, sp, #24
  108044:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    struct sal_socket *sock;
    struct sal_proto_family *pf;
    int error = 0;
  108048:	e3a03000 	mov	r3, #0
  10804c:	e50b3008 	str	r3, [fp, #-8]

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  108050:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  108054:	ebfffb50 	bl	106d9c <sal_get_socket>
  108058:	e50b000c 	str	r0, [fp, #-12]
  10805c:	e51b300c 	ldr	r3, [fp, #-12]
  108060:	e3530000 	cmp	r3, #0
  108064:	1a000001 	bne	108070 <sal_closesocket+0x38>
  108068:	e3e03000 	mvn	r3, #0
  10806c:	ea00001c 	b	1080e4 <sal_closesocket+0xac>

    /* clsoesocket operation not need to vaild network interface status */
    /* valid the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, socket);
  108070:	e51b300c 	ldr	r3, [fp, #-12]
  108074:	e5933014 	ldr	r3, [r3, #20]
  108078:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10807c:	e50b3010 	str	r3, [fp, #-16]
  108080:	e51b3010 	ldr	r3, [fp, #-16]
  108084:	e5933008 	ldr	r3, [r3, #8]
  108088:	e5933000 	ldr	r3, [r3]
  10808c:	e3530000 	cmp	r3, #0
  108090:	1a000001 	bne	10809c <sal_closesocket+0x64>
  108094:	e3e03000 	mvn	r3, #0
  108098:	ea000011 	b	1080e4 <sal_closesocket+0xac>

    if (pf->skt_ops->closesocket((int)(size_t)sock->user_data) == 0)
  10809c:	e51b3010 	ldr	r3, [fp, #-16]
  1080a0:	e5933008 	ldr	r3, [r3, #8]
  1080a4:	e5933004 	ldr	r3, [r3, #4]
  1080a8:	e51b200c 	ldr	r2, [fp, #-12]
  1080ac:	e5922018 	ldr	r2, [r2, #24]
  1080b0:	e1a00002 	mov	r0, r2
  1080b4:	e12fff33 	blx	r3
  1080b8:	e1a03000 	mov	r3, r0
  1080bc:	e3530000 	cmp	r3, #0
  1080c0:	1a000002 	bne	1080d0 <sal_closesocket+0x98>
            {
                return -1;
            }
        }
#endif
        error = 0;
  1080c4:	e3a03000 	mov	r3, #0
  1080c8:	e50b3008 	str	r3, [fp, #-8]
  1080cc:	ea000001 	b	1080d8 <sal_closesocket+0xa0>
    }
    else
    {
        error = -1;
  1080d0:	e3e03000 	mvn	r3, #0
  1080d4:	e50b3008 	str	r3, [fp, #-8]
    }

    /* delete socket */
    socket_delete(socket);
  1080d8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1080dc:	ebfffcd7 	bl	107440 <socket_delete>

    return error;
  1080e0:	e51b3008 	ldr	r3, [fp, #-8]
}
  1080e4:	e1a00003 	mov	r0, r3
  1080e8:	e24bd004 	sub	sp, fp, #4
  1080ec:	e8bd8800 	pop	{fp, pc}

001080f0 <sal_ioctlsocket>:

int sal_ioctlsocket(int socket, long cmd, void *arg)
{
  1080f0:	e92d4800 	push	{fp, lr}
  1080f4:	e28db004 	add	fp, sp, #4
  1080f8:	e24dd028 	sub	sp, sp, #40	; 0x28
  1080fc:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  108100:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  108104:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
    struct sal_socket *sock;
    struct sal_proto_family *pf;
    struct sockaddr_in *addr_in = RT_NULL;
  108108:	e3a03000 	mov	r3, #0
  10810c:	e50b3008 	str	r3, [fp, #-8]
    struct sockaddr *addr = RT_NULL;
  108110:	e3a03000 	mov	r3, #0
  108114:	e50b300c 	str	r3, [fp, #-12]
    ip_addr_t input_ipaddr;
    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  108118:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10811c:	ebfffb1e 	bl	106d9c <sal_get_socket>
  108120:	e50b0010 	str	r0, [fp, #-16]
  108124:	e51b3010 	ldr	r3, [fp, #-16]
  108128:	e3530000 	cmp	r3, #0
  10812c:	1a000001 	bne	108138 <sal_ioctlsocket+0x48>
  108130:	e3e03000 	mvn	r3, #0
  108134:	ea000086 	b	108354 <sal_ioctlsocket+0x264>
    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, ioctlsocket);
  108138:	e51b3010 	ldr	r3, [fp, #-16]
  10813c:	e5933014 	ldr	r3, [r3, #20]
  108140:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108144:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  108148:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10814c:	e5933008 	ldr	r3, [r3, #8]
  108150:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  108154:	e3530000 	cmp	r3, #0
  108158:	1a000001 	bne	108164 <sal_ioctlsocket+0x74>
  10815c:	e3e03000 	mvn	r3, #0
  108160:	ea00007b 	b	108354 <sal_ioctlsocket+0x264>

    struct sal_ifreq *ifr = (struct sal_ifreq *)arg;
  108164:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  108168:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

    if((sock->domain == AF_INET)&&(sock->netdev)&&(ifr != RT_NULL))
  10816c:	e51b3010 	ldr	r3, [fp, #-16]
  108170:	e5933008 	ldr	r3, [r3, #8]
  108174:	e3530002 	cmp	r3, #2
  108178:	1a000068 	bne	108320 <sal_ioctlsocket+0x230>
  10817c:	e51b3010 	ldr	r3, [fp, #-16]
  108180:	e5933014 	ldr	r3, [r3, #20]
  108184:	e3530000 	cmp	r3, #0
  108188:	0a000064 	beq	108320 <sal_ioctlsocket+0x230>
  10818c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  108190:	e3530000 	cmp	r3, #0
  108194:	0a000061 	beq	108320 <sal_ioctlsocket+0x230>
    {
        switch (cmd)
  108198:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  10819c:	e2433c89 	sub	r3, r3, #35072	; 0x8900
  1081a0:	e2433015 	sub	r3, r3, #21
  1081a4:	e3530012 	cmp	r3, #18
  1081a8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  1081ac:	ea00005d 	b	108328 <sal_ioctlsocket+0x238>
  1081b0:	001081fc 	.word	0x001081fc
  1081b4:	00108224 	.word	0x00108224
  1081b8:	00108328 	.word	0x00108328
  1081bc:	00108328 	.word	0x00108328
  1081c0:	00108328 	.word	0x00108328
  1081c4:	00108328 	.word	0x00108328
  1081c8:	00108260 	.word	0x00108260
  1081cc:	00108288 	.word	0x00108288
  1081d0:	00108328 	.word	0x00108328
  1081d4:	00108328 	.word	0x00108328
  1081d8:	00108328 	.word	0x00108328
  1081dc:	00108328 	.word	0x00108328
  1081e0:	00108300 	.word	0x00108300
  1081e4:	00108328 	.word	0x00108328
  1081e8:	00108328 	.word	0x00108328
  1081ec:	00108328 	.word	0x00108328
  1081f0:	00108328 	.word	0x00108328
  1081f4:	00108328 	.word	0x00108328
  1081f8:	001082c4 	.word	0x001082c4
        {
        case SIOCGIFADDR:
            addr_in = (struct sockaddr_in *)&(ifr->ifr_ifru.ifru_addr);
  1081fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  108200:	e2833010 	add	r3, r3, #16
  108204:	e50b3008 	str	r3, [fp, #-8]
#if NETDEV_IPV4 && NETDEV_IPV6
            addr_in->sin_addr.s_addr = sock->netdev->ip_addr.u_addr.ip4.addr;
#elif NETDEV_IPV4
            addr_in->sin_addr.s_addr = sock->netdev->ip_addr.addr;
  108208:	e51b3010 	ldr	r3, [fp, #-16]
  10820c:	e5933014 	ldr	r3, [r3, #20]
  108210:	e593200c 	ldr	r2, [r3, #12]
  108214:	e51b3008 	ldr	r3, [fp, #-8]
  108218:	e5832004 	str	r2, [r3, #4]
#elif NETDEV_IPV6
#error "not only support IPV6"
#endif /* NETDEV_IPV4 && NETDEV_IPV6*/
            return 0;
  10821c:	e3a03000 	mov	r3, #0
  108220:	ea00004b 	b	108354 <sal_ioctlsocket+0x264>

        case SIOCSIFADDR:
            addr = (struct sockaddr *)&(ifr->ifr_ifru.ifru_addr);
  108224:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  108228:	e2833010 	add	r3, r3, #16
  10822c:	e50b300c 	str	r3, [fp, #-12]
            sal_sockaddr_to_ipaddr(addr,&input_ipaddr);
  108230:	e24b301c 	sub	r3, fp, #28
  108234:	e1a01003 	mov	r1, r3
  108238:	e51b000c 	ldr	r0, [fp, #-12]
  10823c:	ebfffd17 	bl	1076a0 <sal_sockaddr_to_ipaddr>
            netdev_set_ipaddr(sock->netdev,&input_ipaddr);
  108240:	e51b3010 	ldr	r3, [fp, #-16]
  108244:	e5933014 	ldr	r3, [r3, #20]
  108248:	e24b201c 	sub	r2, fp, #28
  10824c:	e1a01002 	mov	r1, r2
  108250:	e1a00003 	mov	r0, r3
  108254:	ebfff4ae 	bl	105514 <netdev_set_ipaddr>
            return 0;    
  108258:	e3a03000 	mov	r3, #0
  10825c:	ea00003c 	b	108354 <sal_ioctlsocket+0x264>

        case SIOCGIFNETMASK:
            addr_in = (struct sockaddr_in *)&(ifr->ifr_ifru.ifru_netmask);
  108260:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  108264:	e2833010 	add	r3, r3, #16
  108268:	e50b3008 	str	r3, [fp, #-8]
#if NETDEV_IPV4 && NETDEV_IPV6
            addr_in->sin_addr.s_addr = sock->netdev->netmask.u_addr.ip4.addr;
#elif NETDEV_IPV4
            addr_in->sin_addr.s_addr = sock->netdev->netmask.addr;
  10826c:	e51b3010 	ldr	r3, [fp, #-16]
  108270:	e5933014 	ldr	r3, [r3, #20]
  108274:	e5932010 	ldr	r2, [r3, #16]
  108278:	e51b3008 	ldr	r3, [fp, #-8]
  10827c:	e5832004 	str	r2, [r3, #4]
#elif NETDEV_IPV6
#error "not only support IPV6"
#endif /* NETDEV_IPV4 && NETDEV_IPV6*/
            return 0;
  108280:	e3a03000 	mov	r3, #0
  108284:	ea000032 	b	108354 <sal_ioctlsocket+0x264>

        case SIOCSIFNETMASK:
            addr = (struct sockaddr *)&(ifr->ifr_ifru.ifru_netmask);
  108288:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10828c:	e2833010 	add	r3, r3, #16
  108290:	e50b300c 	str	r3, [fp, #-12]
            sal_sockaddr_to_ipaddr(addr,&input_ipaddr);
  108294:	e24b301c 	sub	r3, fp, #28
  108298:	e1a01003 	mov	r1, r3
  10829c:	e51b000c 	ldr	r0, [fp, #-12]
  1082a0:	ebfffcfe 	bl	1076a0 <sal_sockaddr_to_ipaddr>
            netdev_set_netmask(sock->netdev,&input_ipaddr);
  1082a4:	e51b3010 	ldr	r3, [fp, #-16]
  1082a8:	e5933014 	ldr	r3, [r3, #20]
  1082ac:	e24b201c 	sub	r2, fp, #28
  1082b0:	e1a01002 	mov	r1, r2
  1082b4:	e1a00003 	mov	r0, r3
  1082b8:	ebfff4e4 	bl	105650 <netdev_set_netmask>
            return 0;            
  1082bc:	e3a03000 	mov	r3, #0
  1082c0:	ea000023 	b	108354 <sal_ioctlsocket+0x264>

        case SIOCGIFHWADDR:
            addr = (struct sockaddr *)&(ifr->ifr_ifru.ifru_hwaddr);
  1082c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1082c8:	e2833010 	add	r3, r3, #16
  1082cc:	e50b300c 	str	r3, [fp, #-12]
            rt_memcpy(addr->sa_data,sock->netdev->hwaddr,sock->netdev->hwaddr_len);
  1082d0:	e51b300c 	ldr	r3, [fp, #-12]
  1082d4:	e2830002 	add	r0, r3, #2
  1082d8:	e51b3010 	ldr	r3, [fp, #-16]
  1082dc:	e5933014 	ldr	r3, [r3, #20]
  1082e0:	e2831021 	add	r1, r3, #33	; 0x21
  1082e4:	e51b3010 	ldr	r3, [fp, #-16]
  1082e8:	e5933014 	ldr	r3, [r3, #20]
  1082ec:	e5d33020 	ldrb	r3, [r3, #32]
  1082f0:	e1a02003 	mov	r2, r3
  1082f4:	ebffec01 	bl	103300 <rt_memcpy>
            return 0;
  1082f8:	e3a03000 	mov	r3, #0
  1082fc:	ea000014 	b	108354 <sal_ioctlsocket+0x264>

        case SIOCGIFMTU:
            ifr->ifr_ifru.ifru_mtu = sock->netdev->mtu;
  108300:	e51b3010 	ldr	r3, [fp, #-16]
  108304:	e5933014 	ldr	r3, [r3, #20]
  108308:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  10830c:	e1a02003 	mov	r2, r3
  108310:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  108314:	e5832010 	str	r2, [r3, #16]
            return 0;            
  108318:	e3a03000 	mov	r3, #0
  10831c:	ea00000c 	b	108354 <sal_ioctlsocket+0x264>

        default:
            break;
        }
    }
  108320:	e320f000 	nop	{0}
  108324:	ea000000 	b	10832c <sal_ioctlsocket+0x23c>
            break;
  108328:	e320f000 	nop	{0}
    return pf->skt_ops->ioctlsocket((int)(size_t)sock->user_data, cmd, arg);
  10832c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108330:	e5933008 	ldr	r3, [r3, #8]
  108334:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  108338:	e51b2010 	ldr	r2, [fp, #-16]
  10833c:	e5922018 	ldr	r2, [r2, #24]
  108340:	e1a00002 	mov	r0, r2
  108344:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  108348:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  10834c:	e12fff33 	blx	r3
  108350:	e1a03000 	mov	r3, r0
}
  108354:	e1a00003 	mov	r0, r3
  108358:	e24bd004 	sub	sp, fp, #4
  10835c:	e8bd8800 	pop	{fp, pc}

00108360 <sal_poll>:

#ifdef SAL_USING_POSIX
int sal_poll(struct dfs_fd *file, struct rt_pollreq *req)
{
  108360:	e92d4800 	push	{fp, lr}
  108364:	e28db004 	add	fp, sp, #4
  108368:	e24dd018 	sub	sp, sp, #24
  10836c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  108370:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    struct sal_socket *sock;
    struct sal_proto_family *pf;
    int socket = (int)(size_t)file->fnode->data;
  108374:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  108378:	e5933018 	ldr	r3, [r3, #24]
  10837c:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  108380:	e50b3008 	str	r3, [fp, #-8]

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  108384:	e51b0008 	ldr	r0, [fp, #-8]
  108388:	ebfffa83 	bl	106d9c <sal_get_socket>
  10838c:	e50b000c 	str	r0, [fp, #-12]
  108390:	e51b300c 	ldr	r3, [fp, #-12]
  108394:	e3530000 	cmp	r3, #0
  108398:	1a000001 	bne	1083a4 <sal_poll+0x44>
  10839c:	e3e03000 	mvn	r3, #0
  1083a0:	ea000019 	b	10840c <sal_poll+0xac>

    /* check the network interface is up status  */
    SAL_NETDEV_IS_UP(sock->netdev);
  1083a4:	e51b300c 	ldr	r3, [fp, #-12]
  1083a8:	e5933014 	ldr	r3, [r3, #20]
  1083ac:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1083b0:	e2033001 	and	r3, r3, #1
  1083b4:	e3530000 	cmp	r3, #0
  1083b8:	1a000001 	bne	1083c4 <sal_poll+0x64>
  1083bc:	e3e03000 	mvn	r3, #0
  1083c0:	ea000011 	b	10840c <sal_poll+0xac>
    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, poll);
  1083c4:	e51b300c 	ldr	r3, [fp, #-12]
  1083c8:	e5933014 	ldr	r3, [r3, #20]
  1083cc:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  1083d0:	e50b3010 	str	r3, [fp, #-16]
  1083d4:	e51b3010 	ldr	r3, [fp, #-16]
  1083d8:	e5933008 	ldr	r3, [r3, #8]
  1083dc:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  1083e0:	e3530000 	cmp	r3, #0
  1083e4:	1a000001 	bne	1083f0 <sal_poll+0x90>
  1083e8:	e3e03000 	mvn	r3, #0
  1083ec:	ea000006 	b	10840c <sal_poll+0xac>

    return pf->skt_ops->poll(file, req);
  1083f0:	e51b3010 	ldr	r3, [fp, #-16]
  1083f4:	e5933008 	ldr	r3, [r3, #8]
  1083f8:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  1083fc:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108400:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  108404:	e12fff33 	blx	r3
  108408:	e1a03000 	mov	r3, r0
}
  10840c:	e1a00003 	mov	r0, r3
  108410:	e24bd004 	sub	sp, fp, #4
  108414:	e8bd8800 	pop	{fp, pc}

00108418 <sal_gethostbyname>:
#endif

struct hostent *sal_gethostbyname(const char *name)
{
  108418:	e92d4800 	push	{fp, lr}
  10841c:	e28db004 	add	fp, sp, #4
  108420:	e24dd010 	sub	sp, sp, #16
  108424:	e50b0010 	str	r0, [fp, #-16]
    struct netdev *netdev = netdev_default;
  108428:	e30e3ce4 	movw	r3, #60644	; 0xece4
  10842c:	e3403014 	movt	r3, #20
  108430:	e5933000 	ldr	r3, [r3]
  108434:	e50b3008 	str	r3, [fp, #-8]
    struct sal_proto_family *pf;

    if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, gethostbyname))
  108438:	e51b3008 	ldr	r3, [fp, #-8]
  10843c:	e3530000 	cmp	r3, #0
  108440:	0a000017 	beq	1084a4 <sal_gethostbyname+0x8c>
  108444:	e51b3008 	ldr	r3, [fp, #-8]
  108448:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  10844c:	e2033001 	and	r3, r3, #1
  108450:	e6ef3073 	uxtb	r3, r3
  108454:	e3530000 	cmp	r3, #0
  108458:	0a000011 	beq	1084a4 <sal_gethostbyname+0x8c>
  10845c:	e51b3008 	ldr	r3, [fp, #-8]
  108460:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108464:	e50b300c 	str	r3, [fp, #-12]
  108468:	e51b300c 	ldr	r3, [fp, #-12]
  10846c:	e3530000 	cmp	r3, #0
  108470:	0a00000b 	beq	1084a4 <sal_gethostbyname+0x8c>
  108474:	e51b300c 	ldr	r3, [fp, #-12]
  108478:	e593300c 	ldr	r3, [r3, #12]
  10847c:	e5933000 	ldr	r3, [r3]
  108480:	e3530000 	cmp	r3, #0
  108484:	0a000006 	beq	1084a4 <sal_gethostbyname+0x8c>
    {
        return pf->netdb_ops->gethostbyname(name);
  108488:	e51b300c 	ldr	r3, [fp, #-12]
  10848c:	e593300c 	ldr	r3, [r3, #12]
  108490:	e5933000 	ldr	r3, [r3]
  108494:	e51b0010 	ldr	r0, [fp, #-16]
  108498:	e12fff33 	blx	r3
  10849c:	e1a03000 	mov	r3, r0
  1084a0:	ea00001e 	b	108520 <sal_gethostbyname+0x108>
    }
    else
    {
        /* get the first network interface device with up status */
        netdev = netdev_get_first_by_flags(NETDEV_FLAG_UP);
  1084a4:	e3a00001 	mov	r0, #1
  1084a8:	ebfff265 	bl	104e44 <netdev_get_first_by_flags>
  1084ac:	e50b0008 	str	r0, [fp, #-8]
        if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, gethostbyname))
  1084b0:	e51b3008 	ldr	r3, [fp, #-8]
  1084b4:	e3530000 	cmp	r3, #0
  1084b8:	0a000017 	beq	10851c <sal_gethostbyname+0x104>
  1084bc:	e51b3008 	ldr	r3, [fp, #-8]
  1084c0:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1084c4:	e2033001 	and	r3, r3, #1
  1084c8:	e6ef3073 	uxtb	r3, r3
  1084cc:	e3530000 	cmp	r3, #0
  1084d0:	0a000011 	beq	10851c <sal_gethostbyname+0x104>
  1084d4:	e51b3008 	ldr	r3, [fp, #-8]
  1084d8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  1084dc:	e50b300c 	str	r3, [fp, #-12]
  1084e0:	e51b300c 	ldr	r3, [fp, #-12]
  1084e4:	e3530000 	cmp	r3, #0
  1084e8:	0a00000b 	beq	10851c <sal_gethostbyname+0x104>
  1084ec:	e51b300c 	ldr	r3, [fp, #-12]
  1084f0:	e593300c 	ldr	r3, [r3, #12]
  1084f4:	e5933000 	ldr	r3, [r3]
  1084f8:	e3530000 	cmp	r3, #0
  1084fc:	0a000006 	beq	10851c <sal_gethostbyname+0x104>
        {
            return pf->netdb_ops->gethostbyname(name);
  108500:	e51b300c 	ldr	r3, [fp, #-12]
  108504:	e593300c 	ldr	r3, [r3, #12]
  108508:	e5933000 	ldr	r3, [r3]
  10850c:	e51b0010 	ldr	r0, [fp, #-16]
  108510:	e12fff33 	blx	r3
  108514:	e1a03000 	mov	r3, r0
  108518:	ea000000 	b	108520 <sal_gethostbyname+0x108>
        }
    }

    return RT_NULL;
  10851c:	e3a03000 	mov	r3, #0
}
  108520:	e1a00003 	mov	r0, r3
  108524:	e24bd004 	sub	sp, fp, #4
  108528:	e8bd8800 	pop	{fp, pc}

0010852c <sal_gethostbyname_r>:

int sal_gethostbyname_r(const char *name, struct hostent *ret, char *buf,
                        size_t buflen, struct hostent **result, int *h_errnop)
{
  10852c:	e92d4810 	push	{r4, fp, lr}
  108530:	e28db008 	add	fp, sp, #8
  108534:	e24dd024 	sub	sp, sp, #36	; 0x24
  108538:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10853c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  108540:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  108544:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    struct netdev *netdev = netdev_default;
  108548:	e30e3ce4 	movw	r3, #60644	; 0xece4
  10854c:	e3403014 	movt	r3, #20
  108550:	e5933000 	ldr	r3, [r3]
  108554:	e50b3010 	str	r3, [fp, #-16]
    struct sal_proto_family *pf;

    if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, gethostbyname_r))
  108558:	e51b3010 	ldr	r3, [fp, #-16]
  10855c:	e3530000 	cmp	r3, #0
  108560:	0a00001e 	beq	1085e0 <sal_gethostbyname_r+0xb4>
  108564:	e51b3010 	ldr	r3, [fp, #-16]
  108568:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  10856c:	e2033001 	and	r3, r3, #1
  108570:	e6ef3073 	uxtb	r3, r3
  108574:	e3530000 	cmp	r3, #0
  108578:	0a000018 	beq	1085e0 <sal_gethostbyname_r+0xb4>
  10857c:	e51b3010 	ldr	r3, [fp, #-16]
  108580:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108584:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  108588:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10858c:	e3530000 	cmp	r3, #0
  108590:	0a000012 	beq	1085e0 <sal_gethostbyname_r+0xb4>
  108594:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108598:	e593300c 	ldr	r3, [r3, #12]
  10859c:	e5933004 	ldr	r3, [r3, #4]
  1085a0:	e3530000 	cmp	r3, #0
  1085a4:	0a00000d 	beq	1085e0 <sal_gethostbyname_r+0xb4>
    {
        return pf->netdb_ops->gethostbyname_r(name, ret, buf, buflen, result, h_errnop);
  1085a8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1085ac:	e593300c 	ldr	r3, [r3, #12]
  1085b0:	e5934004 	ldr	r4, [r3, #4]
  1085b4:	e59b3008 	ldr	r3, [fp, #8]
  1085b8:	e58d3004 	str	r3, [sp, #4]
  1085bc:	e59b3004 	ldr	r3, [fp, #4]
  1085c0:	e58d3000 	str	r3, [sp]
  1085c4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1085c8:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1085cc:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1085d0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1085d4:	e12fff34 	blx	r4
  1085d8:	e1a03000 	mov	r3, r0
  1085dc:	ea000025 	b	108678 <sal_gethostbyname_r+0x14c>
    }
    else
    {
        /* get the first network interface device with up status */
        netdev = netdev_get_first_by_flags(NETDEV_FLAG_UP);
  1085e0:	e3a00001 	mov	r0, #1
  1085e4:	ebfff216 	bl	104e44 <netdev_get_first_by_flags>
  1085e8:	e50b0010 	str	r0, [fp, #-16]
        if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, gethostbyname_r))
  1085ec:	e51b3010 	ldr	r3, [fp, #-16]
  1085f0:	e3530000 	cmp	r3, #0
  1085f4:	0a00001e 	beq	108674 <sal_gethostbyname_r+0x148>
  1085f8:	e51b3010 	ldr	r3, [fp, #-16]
  1085fc:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108600:	e2033001 	and	r3, r3, #1
  108604:	e6ef3073 	uxtb	r3, r3
  108608:	e3530000 	cmp	r3, #0
  10860c:	0a000018 	beq	108674 <sal_gethostbyname_r+0x148>
  108610:	e51b3010 	ldr	r3, [fp, #-16]
  108614:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108618:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  10861c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108620:	e3530000 	cmp	r3, #0
  108624:	0a000012 	beq	108674 <sal_gethostbyname_r+0x148>
  108628:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10862c:	e593300c 	ldr	r3, [r3, #12]
  108630:	e5933004 	ldr	r3, [r3, #4]
  108634:	e3530000 	cmp	r3, #0
  108638:	0a00000d 	beq	108674 <sal_gethostbyname_r+0x148>
        {
            return pf->netdb_ops->gethostbyname_r(name, ret, buf, buflen, result, h_errnop);
  10863c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108640:	e593300c 	ldr	r3, [r3, #12]
  108644:	e5934004 	ldr	r4, [r3, #4]
  108648:	e59b3008 	ldr	r3, [fp, #8]
  10864c:	e58d3004 	str	r3, [sp, #4]
  108650:	e59b3004 	ldr	r3, [fp, #4]
  108654:	e58d3000 	str	r3, [sp]
  108658:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  10865c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  108660:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108664:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  108668:	e12fff34 	blx	r4
  10866c:	e1a03000 	mov	r3, r0
  108670:	ea000000 	b	108678 <sal_gethostbyname_r+0x14c>
        }
    }

    return -1;
  108674:	e3e03000 	mvn	r3, #0
}
  108678:	e1a00003 	mov	r0, r3
  10867c:	e24bd008 	sub	sp, fp, #8
  108680:	e8bd8810 	pop	{r4, fp, pc}

00108684 <sal_getaddrinfo>:

int sal_getaddrinfo(const char *nodename,
                    const char *servname,
                    const struct addrinfo *hints,
                    struct addrinfo **res)
{
  108684:	e92d4810 	push	{r4, fp, lr}
  108688:	e28db008 	add	fp, sp, #8
  10868c:	e24dd01c 	sub	sp, sp, #28
  108690:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  108694:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  108698:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  10869c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    struct netdev *netdev = netdev_default;
  1086a0:	e30e3ce4 	movw	r3, #60644	; 0xece4
  1086a4:	e3403014 	movt	r3, #20
  1086a8:	e5933000 	ldr	r3, [r3]
  1086ac:	e50b3010 	str	r3, [fp, #-16]
    struct sal_proto_family *pf;

    if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, getaddrinfo))
  1086b0:	e51b3010 	ldr	r3, [fp, #-16]
  1086b4:	e3530000 	cmp	r3, #0
  1086b8:	0a00001a 	beq	108728 <sal_getaddrinfo+0xa4>
  1086bc:	e51b3010 	ldr	r3, [fp, #-16]
  1086c0:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1086c4:	e2033001 	and	r3, r3, #1
  1086c8:	e6ef3073 	uxtb	r3, r3
  1086cc:	e3530000 	cmp	r3, #0
  1086d0:	0a000014 	beq	108728 <sal_getaddrinfo+0xa4>
  1086d4:	e51b3010 	ldr	r3, [fp, #-16]
  1086d8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  1086dc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1086e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1086e4:	e3530000 	cmp	r3, #0
  1086e8:	0a00000e 	beq	108728 <sal_getaddrinfo+0xa4>
  1086ec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1086f0:	e593300c 	ldr	r3, [r3, #12]
  1086f4:	e5933008 	ldr	r3, [r3, #8]
  1086f8:	e3530000 	cmp	r3, #0
  1086fc:	0a000009 	beq	108728 <sal_getaddrinfo+0xa4>
    {
        return pf->netdb_ops->getaddrinfo(nodename, servname, hints, res);
  108700:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108704:	e593300c 	ldr	r3, [r3, #12]
  108708:	e5934008 	ldr	r4, [r3, #8]
  10870c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  108710:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  108714:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108718:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  10871c:	e12fff34 	blx	r4
  108720:	e1a03000 	mov	r3, r0
  108724:	ea000021 	b	1087b0 <sal_getaddrinfo+0x12c>
    }
    else
    {
        /* get the first network interface device with up status */
        netdev = netdev_get_first_by_flags(NETDEV_FLAG_UP);
  108728:	e3a00001 	mov	r0, #1
  10872c:	ebfff1c4 	bl	104e44 <netdev_get_first_by_flags>
  108730:	e50b0010 	str	r0, [fp, #-16]
        if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, getaddrinfo))
  108734:	e51b3010 	ldr	r3, [fp, #-16]
  108738:	e3530000 	cmp	r3, #0
  10873c:	0a00001a 	beq	1087ac <sal_getaddrinfo+0x128>
  108740:	e51b3010 	ldr	r3, [fp, #-16]
  108744:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108748:	e2033001 	and	r3, r3, #1
  10874c:	e6ef3073 	uxtb	r3, r3
  108750:	e3530000 	cmp	r3, #0
  108754:	0a000014 	beq	1087ac <sal_getaddrinfo+0x128>
  108758:	e51b3010 	ldr	r3, [fp, #-16]
  10875c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108760:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  108764:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108768:	e3530000 	cmp	r3, #0
  10876c:	0a00000e 	beq	1087ac <sal_getaddrinfo+0x128>
  108770:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108774:	e593300c 	ldr	r3, [r3, #12]
  108778:	e5933008 	ldr	r3, [r3, #8]
  10877c:	e3530000 	cmp	r3, #0
  108780:	0a000009 	beq	1087ac <sal_getaddrinfo+0x128>
        {
            return pf->netdb_ops->getaddrinfo(nodename, servname, hints, res);
  108784:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108788:	e593300c 	ldr	r3, [r3, #12]
  10878c:	e5934008 	ldr	r4, [r3, #8]
  108790:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  108794:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  108798:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  10879c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1087a0:	e12fff34 	blx	r4
  1087a4:	e1a03000 	mov	r3, r0
  1087a8:	ea000000 	b	1087b0 <sal_getaddrinfo+0x12c>
        }
    }

    return -1;
  1087ac:	e3e03000 	mvn	r3, #0
}
  1087b0:	e1a00003 	mov	r0, r3
  1087b4:	e24bd008 	sub	sp, fp, #8
  1087b8:	e8bd8810 	pop	{r4, fp, pc}

001087bc <sal_freeaddrinfo>:

void sal_freeaddrinfo(struct addrinfo *ai)
{
  1087bc:	e92d4800 	push	{fp, lr}
  1087c0:	e28db004 	add	fp, sp, #4
  1087c4:	e24dd010 	sub	sp, sp, #16
  1087c8:	e50b0010 	str	r0, [fp, #-16]
    struct netdev *netdev = netdev_default;
  1087cc:	e30e3ce4 	movw	r3, #60644	; 0xece4
  1087d0:	e3403014 	movt	r3, #20
  1087d4:	e5933000 	ldr	r3, [r3]
  1087d8:	e50b3008 	str	r3, [fp, #-8]
    struct sal_proto_family *pf;

    if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, freeaddrinfo))
  1087dc:	e51b3008 	ldr	r3, [fp, #-8]
  1087e0:	e3530000 	cmp	r3, #0
  1087e4:	0a000016 	beq	108844 <sal_freeaddrinfo+0x88>
  1087e8:	e51b3008 	ldr	r3, [fp, #-8]
  1087ec:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1087f0:	e2033001 	and	r3, r3, #1
  1087f4:	e6ef3073 	uxtb	r3, r3
  1087f8:	e3530000 	cmp	r3, #0
  1087fc:	0a000010 	beq	108844 <sal_freeaddrinfo+0x88>
  108800:	e51b3008 	ldr	r3, [fp, #-8]
  108804:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108808:	e50b300c 	str	r3, [fp, #-12]
  10880c:	e51b300c 	ldr	r3, [fp, #-12]
  108810:	e3530000 	cmp	r3, #0
  108814:	0a00000a 	beq	108844 <sal_freeaddrinfo+0x88>
  108818:	e51b300c 	ldr	r3, [fp, #-12]
  10881c:	e593300c 	ldr	r3, [r3, #12]
  108820:	e593300c 	ldr	r3, [r3, #12]
  108824:	e3530000 	cmp	r3, #0
  108828:	0a000005 	beq	108844 <sal_freeaddrinfo+0x88>
    {
        pf->netdb_ops->freeaddrinfo(ai);
  10882c:	e51b300c 	ldr	r3, [fp, #-12]
  108830:	e593300c 	ldr	r3, [r3, #12]
  108834:	e593300c 	ldr	r3, [r3, #12]
  108838:	e51b0010 	ldr	r0, [fp, #-16]
  10883c:	e12fff33 	blx	r3
        if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, freeaddrinfo))
        {
            pf->netdb_ops->freeaddrinfo(ai);
        }
    }
}
  108840:	ea00001b 	b	1088b4 <sal_freeaddrinfo+0xf8>
        netdev = netdev_get_first_by_flags(NETDEV_FLAG_UP);
  108844:	e3a00001 	mov	r0, #1
  108848:	ebfff17d 	bl	104e44 <netdev_get_first_by_flags>
  10884c:	e50b0008 	str	r0, [fp, #-8]
        if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, freeaddrinfo))
  108850:	e51b3008 	ldr	r3, [fp, #-8]
  108854:	e3530000 	cmp	r3, #0
  108858:	0a000015 	beq	1088b4 <sal_freeaddrinfo+0xf8>
  10885c:	e51b3008 	ldr	r3, [fp, #-8]
  108860:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108864:	e2033001 	and	r3, r3, #1
  108868:	e6ef3073 	uxtb	r3, r3
  10886c:	e3530000 	cmp	r3, #0
  108870:	0a00000f 	beq	1088b4 <sal_freeaddrinfo+0xf8>
  108874:	e51b3008 	ldr	r3, [fp, #-8]
  108878:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10887c:	e50b300c 	str	r3, [fp, #-12]
  108880:	e51b300c 	ldr	r3, [fp, #-12]
  108884:	e3530000 	cmp	r3, #0
  108888:	0a000009 	beq	1088b4 <sal_freeaddrinfo+0xf8>
  10888c:	e51b300c 	ldr	r3, [fp, #-12]
  108890:	e593300c 	ldr	r3, [r3, #12]
  108894:	e593300c 	ldr	r3, [r3, #12]
  108898:	e3530000 	cmp	r3, #0
  10889c:	0a000004 	beq	1088b4 <sal_freeaddrinfo+0xf8>
            pf->netdb_ops->freeaddrinfo(ai);
  1088a0:	e51b300c 	ldr	r3, [fp, #-12]
  1088a4:	e593300c 	ldr	r3, [r3, #12]
  1088a8:	e593300c 	ldr	r3, [r3, #12]
  1088ac:	e51b0010 	ldr	r0, [fp, #-16]
  1088b0:	e12fff33 	blx	r3
}
  1088b4:	e320f000 	nop	{0}
  1088b8:	e24bd004 	sub	sp, fp, #4
  1088bc:	e8bd8800 	pop	{fp, pc}

001088c0 <unet_socket>:
 * socket options. To solve the issue, we do it separately in 2 steps.
 */
#define INTF_SOCK_NONBLOCK  04000
#define IMPL_SOCK_NONBLOCK  1
int unet_socket(int domain, int type, int protocol)
{
  1088c0:	e92d4800 	push	{fp, lr}
  1088c4:	e28db004 	add	fp, sp, #4
  1088c8:	e24dd018 	sub	sp, sp, #24
  1088cc:	e50b0010 	str	r0, [fp, #-16]
  1088d0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1088d4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    int socket;

    /* filter-out socket options: SOCK_NONBLOCK & SOCK_CLOEXEC (not supported) */
    int flag = type & INTF_SOCK_NONBLOCK;
  1088d8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1088dc:	e2033b02 	and	r3, r3, #2048	; 0x800
  1088e0:	e50b3008 	str	r3, [fp, #-8]
    type &= ~INTF_SOCK_NONBLOCK;
  1088e4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1088e8:	e3c33b02 	bic	r3, r3, #2048	; 0x800
  1088ec:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

    socket = lwip_socket(domain, type, protocol);
  1088f0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1088f4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1088f8:	e51b0010 	ldr	r0, [fp, #-16]
  1088fc:	eb00281f 	bl	112980 <lwip_socket>
  108900:	e50b000c 	str	r0, [fp, #-12]

    /* handle the socket options */
    if (socket >= 0 && flag != 0)
  108904:	e51b300c 	ldr	r3, [fp, #-12]
  108908:	e3530000 	cmp	r3, #0
  10890c:	ba000006 	blt	10892c <unet_socket+0x6c>
  108910:	e51b3008 	ldr	r3, [fp, #-8]
  108914:	e3530000 	cmp	r3, #0
  108918:	0a000003 	beq	10892c <unet_socket+0x6c>
        unet_fcntl(socket, F_SETFL, flag);
  10891c:	e51b2008 	ldr	r2, [fp, #-8]
  108920:	e3a01004 	mov	r1, #4
  108924:	e51b000c 	ldr	r0, [fp, #-12]
  108928:	eb0000e2 	bl	108cb8 <unet_fcntl>

    return socket;
  10892c:	e51b300c 	ldr	r3, [fp, #-12]
}
  108930:	e1a00003 	mov	r0, r3
  108934:	e24bd004 	sub	sp, fp, #4
  108938:	e8bd8800 	pop	{fp, pc}

0010893c <unet_close>:

int unet_close(int socket)
{
  10893c:	e92d4800 	push	{fp, lr}
  108940:	e28db004 	add	fp, sp, #4
  108944:	e24dd010 	sub	sp, sp, #16
  108948:	e50b0010 	str	r0, [fp, #-16]
    int result = lwip_close(socket);
  10894c:	e51b0010 	ldr	r0, [fp, #-16]
  108950:	eb0022f4 	bl	111528 <lwip_close>
  108954:	e50b0008 	str	r0, [fp, #-8]

    return result;
  108958:	e51b3008 	ldr	r3, [fp, #-8]
}
  10895c:	e1a00003 	mov	r0, r3
  108960:	e24bd004 	sub	sp, fp, #4
  108964:	e8bd8800 	pop	{fp, pc}

00108968 <unet_bind>:

int unet_bind(int socket, const struct sockaddr *name, socklen_t namelen)
{
  108968:	e92d4800 	push	{fp, lr}
  10896c:	e28db004 	add	fp, sp, #4
  108970:	e24dd010 	sub	sp, sp, #16
  108974:	e50b0008 	str	r0, [fp, #-8]
  108978:	e50b100c 	str	r1, [fp, #-12]
  10897c:	e50b2010 	str	r2, [fp, #-16]
    return lwip_bind(socket, name, namelen);
  108980:	e51b2010 	ldr	r2, [fp, #-16]
  108984:	e51b100c 	ldr	r1, [fp, #-12]
  108988:	e51b0008 	ldr	r0, [fp, #-8]
  10898c:	eb00227f 	bl	111390 <lwip_bind>
  108990:	e1a03000 	mov	r3, r0
}
  108994:	e1a00003 	mov	r0, r3
  108998:	e24bd004 	sub	sp, fp, #4
  10899c:	e8bd8800 	pop	{fp, pc}

001089a0 <unet_listen>:

int unet_listen(int socket, int backlog)
{
  1089a0:	e92d4800 	push	{fp, lr}
  1089a4:	e28db004 	add	fp, sp, #4
  1089a8:	e24dd008 	sub	sp, sp, #8
  1089ac:	e50b0008 	str	r0, [fp, #-8]
  1089b0:	e50b100c 	str	r1, [fp, #-12]
    return lwip_listen(socket, backlog);
  1089b4:	e51b100c 	ldr	r1, [fp, #-12]
  1089b8:	e51b0008 	ldr	r0, [fp, #-8]
  1089bc:	eb002398 	bl	111824 <lwip_listen>
  1089c0:	e1a03000 	mov	r3, r0
}
  1089c4:	e1a00003 	mov	r0, r3
  1089c8:	e24bd004 	sub	sp, fp, #4
  1089cc:	e8bd8800 	pop	{fp, pc}

001089d0 <unet_connect>:

int unet_connect(int socket, const struct sockaddr *name, socklen_t namelen)
{
  1089d0:	e92d4800 	push	{fp, lr}
  1089d4:	e28db004 	add	fp, sp, #4
  1089d8:	e24dd010 	sub	sp, sp, #16
  1089dc:	e50b0008 	str	r0, [fp, #-8]
  1089e0:	e50b100c 	str	r1, [fp, #-12]
  1089e4:	e50b2010 	str	r2, [fp, #-16]
    return lwip_connect(socket, name, namelen);
  1089e8:	e51b2010 	ldr	r2, [fp, #-16]
  1089ec:	e51b100c 	ldr	r1, [fp, #-12]
  1089f0:	e51b0008 	ldr	r0, [fp, #-8]
  1089f4:	eb002315 	bl	111650 <lwip_connect>
  1089f8:	e1a03000 	mov	r3, r0
}
  1089fc:	e1a00003 	mov	r0, r3
  108a00:	e24bd004 	sub	sp, fp, #4
  108a04:	e8bd8800 	pop	{fp, pc}

00108a08 <unet_accept>:

int unet_accept(int socket, struct sockaddr *addr, socklen_t *addrlen)
{
  108a08:	e92d4800 	push	{fp, lr}
  108a0c:	e28db004 	add	fp, sp, #4
  108a10:	e24dd010 	sub	sp, sp, #16
  108a14:	e50b0008 	str	r0, [fp, #-8]
  108a18:	e50b100c 	str	r1, [fp, #-12]
  108a1c:	e50b2010 	str	r2, [fp, #-16]
    socket = lwip_accept(socket, addr, addrlen);
  108a20:	e51b2010 	ldr	r2, [fp, #-16]
  108a24:	e51b100c 	ldr	r1, [fp, #-12]
  108a28:	e51b0008 	ldr	r0, [fp, #-8]
  108a2c:	eb002149 	bl	110f58 <lwip_accept>
  108a30:	e50b0008 	str	r0, [fp, #-8]

    return socket;
  108a34:	e51b3008 	ldr	r3, [fp, #-8]
}
  108a38:	e1a00003 	mov	r0, r3
  108a3c:	e24bd004 	sub	sp, fp, #4
  108a40:	e8bd8800 	pop	{fp, pc}

00108a44 <unet_sendto>:

int unet_sendto(int socket, const void *data, size_t size, int flags, const struct sockaddr *to, socklen_t tolen)
{
  108a44:	e92d4800 	push	{fp, lr}
  108a48:	e28db004 	add	fp, sp, #4
  108a4c:	e24dd020 	sub	sp, sp, #32
  108a50:	e50b0010 	str	r0, [fp, #-16]
  108a54:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  108a58:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  108a5c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    int result;
    if(tolen  == 0)
  108a60:	e59b3008 	ldr	r3, [fp, #8]
  108a64:	e3530000 	cmp	r3, #0
  108a68:	1a00000a 	bne	108a98 <unet_sendto+0x54>
    {
        result = lwip_sendto(socket, data, size, flags, RT_NULL, RT_NULL);
  108a6c:	e3a03000 	mov	r3, #0
  108a70:	e58d3004 	str	r3, [sp, #4]
  108a74:	e3a03000 	mov	r3, #0
  108a78:	e58d3000 	str	r3, [sp]
  108a7c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  108a80:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  108a84:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  108a88:	e51b0010 	ldr	r0, [fp, #-16]
  108a8c:	eb002727 	bl	112730 <lwip_sendto>
  108a90:	e50b0008 	str	r0, [fp, #-8]
  108a94:	ea000009 	b	108ac0 <unet_sendto+0x7c>
    }
    else
    {
        result = lwip_sendto(socket, data, size, flags, to, tolen);
  108a98:	e59b3008 	ldr	r3, [fp, #8]
  108a9c:	e58d3004 	str	r3, [sp, #4]
  108aa0:	e59b3004 	ldr	r3, [fp, #4]
  108aa4:	e58d3000 	str	r3, [sp]
  108aa8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  108aac:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  108ab0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  108ab4:	e51b0010 	ldr	r0, [fp, #-16]
  108ab8:	eb00271c 	bl	112730 <lwip_sendto>
  108abc:	e50b0008 	str	r0, [fp, #-8]
    }
    if(result <= 0)
  108ac0:	e51b3008 	ldr	r3, [fp, #-8]
  108ac4:	e3530000 	cmp	r3, #0
  108ac8:	ca000005 	bgt	108ae4 <unet_sendto+0xa0>
    {
        rt_kprintf("%s line %d sendto error\n",__func__,__LINE__);
  108acc:	e3a02055 	mov	r2, #85	; 0x55
  108ad0:	e30516d8 	movw	r1, #22232	; 0x56d8
  108ad4:	e3401014 	movt	r1, #20
  108ad8:	e30506bc 	movw	r0, #22204	; 0x56bc
  108adc:	e3400014 	movt	r0, #20
  108ae0:	ebffe98b 	bl	103114 <rt_kprintf>
    }
    return result;
  108ae4:	e51b3008 	ldr	r3, [fp, #-8]
}
  108ae8:	e1a00003 	mov	r0, r3
  108aec:	e24bd004 	sub	sp, fp, #4
  108af0:	e8bd8800 	pop	{fp, pc}

00108af4 <unet_recvfrom>:

int unet_recvfrom(int socket, void *mem, size_t size, int flags, struct sockaddr *from, socklen_t *fromlen)
{
  108af4:	e92d4800 	push	{fp, lr}
  108af8:	e28db004 	add	fp, sp, #4
  108afc:	e24dd018 	sub	sp, sp, #24
  108b00:	e50b0008 	str	r0, [fp, #-8]
  108b04:	e50b100c 	str	r1, [fp, #-12]
  108b08:	e50b2010 	str	r2, [fp, #-16]
  108b0c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    if(from && fromlen)
  108b10:	e59b3004 	ldr	r3, [fp, #4]
  108b14:	e3530000 	cmp	r3, #0
  108b18:	0a00000d 	beq	108b54 <unet_recvfrom+0x60>
  108b1c:	e59b3008 	ldr	r3, [fp, #8]
  108b20:	e3530000 	cmp	r3, #0
  108b24:	0a00000a 	beq	108b54 <unet_recvfrom+0x60>
    {
        return lwip_recvfrom(socket, mem, size, flags, from, fromlen);
  108b28:	e59b3008 	ldr	r3, [fp, #8]
  108b2c:	e58d3004 	str	r3, [sp, #4]
  108b30:	e59b3004 	ldr	r3, [fp, #4]
  108b34:	e58d3000 	str	r3, [sp]
  108b38:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108b3c:	e51b2010 	ldr	r2, [fp, #-16]
  108b40:	e51b100c 	ldr	r1, [fp, #-12]
  108b44:	e51b0008 	ldr	r0, [fp, #-8]
  108b48:	eb00238d 	bl	111984 <lwip_recvfrom>
  108b4c:	e1a03000 	mov	r3, r0
  108b50:	ea000009 	b	108b7c <unet_recvfrom+0x88>
    }
    else
    {
        return lwip_recvfrom(socket, mem, size, flags, RT_NULL, RT_NULL);
  108b54:	e3a03000 	mov	r3, #0
  108b58:	e58d3004 	str	r3, [sp, #4]
  108b5c:	e3a03000 	mov	r3, #0
  108b60:	e58d3000 	str	r3, [sp]
  108b64:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108b68:	e51b2010 	ldr	r2, [fp, #-16]
  108b6c:	e51b100c 	ldr	r1, [fp, #-12]
  108b70:	e51b0008 	ldr	r0, [fp, #-8]
  108b74:	eb002382 	bl	111984 <lwip_recvfrom>
  108b78:	e1a03000 	mov	r3, r0
    }
}
  108b7c:	e1a00003 	mov	r0, r3
  108b80:	e24bd004 	sub	sp, fp, #4
  108b84:	e8bd8800 	pop	{fp, pc}

00108b88 <unet_getsockopt>:

int unet_getsockopt(int socket, int level, int optname, void *optval, socklen_t *optlen)
{
  108b88:	e92d4800 	push	{fp, lr}
  108b8c:	e28db004 	add	fp, sp, #4
  108b90:	e24dd018 	sub	sp, sp, #24
  108b94:	e50b0008 	str	r0, [fp, #-8]
  108b98:	e50b100c 	str	r1, [fp, #-12]
  108b9c:	e50b2010 	str	r2, [fp, #-16]
  108ba0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return lwip_getsockopt(socket, level, optname, optval, optlen);
  108ba4:	e59b3004 	ldr	r3, [fp, #4]
  108ba8:	e58d3000 	str	r3, [sp]
  108bac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108bb0:	e51b2010 	ldr	r2, [fp, #-16]
  108bb4:	e51b100c 	ldr	r1, [fp, #-12]
  108bb8:	e51b0008 	ldr	r0, [fp, #-8]
  108bbc:	eb002c85 	bl	113dd8 <lwip_getsockopt>
  108bc0:	e1a03000 	mov	r3, r0
}
  108bc4:	e1a00003 	mov	r0, r3
  108bc8:	e24bd004 	sub	sp, fp, #4
  108bcc:	e8bd8800 	pop	{fp, pc}

00108bd0 <unet_setsockopt>:

int unet_setsockopt(int socket, int level, int optname, const void *optval, socklen_t optlen)
{
  108bd0:	e92d4800 	push	{fp, lr}
  108bd4:	e28db004 	add	fp, sp, #4
  108bd8:	e24dd018 	sub	sp, sp, #24
  108bdc:	e50b0008 	str	r0, [fp, #-8]
  108be0:	e50b100c 	str	r1, [fp, #-12]
  108be4:	e50b2010 	str	r2, [fp, #-16]
  108be8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return lwip_setsockopt(socket, level, optname, optval, optlen);
  108bec:	e59b3004 	ldr	r3, [fp, #4]
  108bf0:	e58d3000 	str	r3, [sp]
  108bf4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108bf8:	e51b2010 	ldr	r2, [fp, #-16]
  108bfc:	e51b100c 	ldr	r1, [fp, #-12]
  108c00:	e51b0008 	ldr	r0, [fp, #-8]
  108c04:	eb002f3b 	bl	1148f8 <lwip_setsockopt>
  108c08:	e1a03000 	mov	r3, r0
}
  108c0c:	e1a00003 	mov	r0, r3
  108c10:	e24bd004 	sub	sp, fp, #4
  108c14:	e8bd8800 	pop	{fp, pc}

00108c18 <unet_shutdown>:

int unet_shutdown(int socket, int how)
{
  108c18:	e92d4800 	push	{fp, lr}
  108c1c:	e28db004 	add	fp, sp, #4
  108c20:	e24dd008 	sub	sp, sp, #8
  108c24:	e50b0008 	str	r0, [fp, #-8]
  108c28:	e50b100c 	str	r1, [fp, #-12]
    return lwip_shutdown(socket, how);
  108c2c:	e51b100c 	ldr	r1, [fp, #-12]
  108c30:	e51b0008 	ldr	r0, [fp, #-8]
  108c34:	eb002b6d 	bl	1139f0 <lwip_shutdown>
  108c38:	e1a03000 	mov	r3, r0
}
  108c3c:	e1a00003 	mov	r0, r3
  108c40:	e24bd004 	sub	sp, fp, #4
  108c44:	e8bd8800 	pop	{fp, pc}

00108c48 <unet_getpeername>:

int unet_getpeername(int socket, struct sockaddr *name, socklen_t *namelen)
{
  108c48:	e92d4800 	push	{fp, lr}
  108c4c:	e28db004 	add	fp, sp, #4
  108c50:	e24dd010 	sub	sp, sp, #16
  108c54:	e50b0008 	str	r0, [fp, #-8]
  108c58:	e50b100c 	str	r1, [fp, #-12]
  108c5c:	e50b2010 	str	r2, [fp, #-16]
    return lwip_getpeername(socket, name, namelen);
  108c60:	e51b2010 	ldr	r2, [fp, #-16]
  108c64:	e51b100c 	ldr	r1, [fp, #-12]
  108c68:	e51b0008 	ldr	r0, [fp, #-8]
  108c6c:	eb002c3b 	bl	113d60 <lwip_getpeername>
  108c70:	e1a03000 	mov	r3, r0
}
  108c74:	e1a00003 	mov	r0, r3
  108c78:	e24bd004 	sub	sp, fp, #4
  108c7c:	e8bd8800 	pop	{fp, pc}

00108c80 <unet_getsockname>:

int unet_getsockname(int socket, struct sockaddr *name, socklen_t *namelen)
{
  108c80:	e92d4800 	push	{fp, lr}
  108c84:	e28db004 	add	fp, sp, #4
  108c88:	e24dd010 	sub	sp, sp, #16
  108c8c:	e50b0008 	str	r0, [fp, #-8]
  108c90:	e50b100c 	str	r1, [fp, #-12]
  108c94:	e50b2010 	str	r2, [fp, #-16]
    return lwip_getsockname(socket, name, namelen);
  108c98:	e51b2010 	ldr	r2, [fp, #-16]
  108c9c:	e51b100c 	ldr	r1, [fp, #-12]
  108ca0:	e51b0008 	ldr	r0, [fp, #-8]
  108ca4:	eb002c3c 	bl	113d9c <lwip_getsockname>
  108ca8:	e1a03000 	mov	r3, r0
}
  108cac:	e1a00003 	mov	r0, r3
  108cb0:	e24bd004 	sub	sp, fp, #4
  108cb4:	e8bd8800 	pop	{fp, pc}

00108cb8 <unet_fcntl>:

int unet_fcntl(int socket, int cmd, int val)
{
  108cb8:	e92d4800 	push	{fp, lr}
  108cbc:	e28db004 	add	fp, sp, #4
  108cc0:	e24dd010 	sub	sp, sp, #16
  108cc4:	e50b0008 	str	r0, [fp, #-8]
  108cc8:	e50b100c 	str	r1, [fp, #-12]
  108ccc:	e50b2010 	str	r2, [fp, #-16]
    return lwip_fcntl(socket, cmd, val);
  108cd0:	e51b2010 	ldr	r2, [fp, #-16]
  108cd4:	e51b100c 	ldr	r1, [fp, #-12]
  108cd8:	e51b0008 	ldr	r0, [fp, #-8]
  108cdc:	eb003251 	bl	115628 <lwip_fcntl>
  108ce0:	e1a03000 	mov	r3, r0
}
  108ce4:	e1a00003 	mov	r0, r3
  108ce8:	e24bd004 	sub	sp, fp, #4
  108cec:	e8bd8800 	pop	{fp, pc}

00108cf0 <unet_ioctl>:

/* Observe the 'real' IOCTL operations in unet 'api/sockets.c' and find that
 * 'argp' is used as an integer pointer. */
int unet_ioctl(int socket, long cmd, void *argp)
{
  108cf0:	e92d4800 	push	{fp, lr}
  108cf4:	e28db004 	add	fp, sp, #4
  108cf8:	e24dd010 	sub	sp, sp, #16
  108cfc:	e50b0008 	str	r0, [fp, #-8]
  108d00:	e50b100c 	str	r1, [fp, #-12]
  108d04:	e50b2010 	str	r2, [fp, #-16]
    return lwip_ioctl(socket, cmd, argp);
  108d08:	e51b2010 	ldr	r2, [fp, #-16]
  108d0c:	e51b100c 	ldr	r1, [fp, #-12]
  108d10:	e51b0008 	ldr	r0, [fp, #-8]
  108d14:	eb00319c 	bl	11538c <lwip_ioctl>
  108d18:	e1a03000 	mov	r3, r0
}
  108d1c:	e1a00003 	mov	r0, r3
  108d20:	e24bd004 	sub	sp, fp, #4
  108d24:	e8bd8800 	pop	{fp, pc}

00108d28 <unet_gethostbyname>:
#include <stdio.h>
struct hostent* unet_gethostbyname(const char *name)
{
  108d28:	e92d4800 	push	{fp, lr}
  108d2c:	e28db004 	add	fp, sp, #4
  108d30:	e24dd008 	sub	sp, sp, #8
  108d34:	e50b0008 	str	r0, [fp, #-8]
    static struct hostent s_hostent, *p_hostent = RT_NULL;
    static char *s_aliases;
    static ip_addr_t s_hostent_addr;
    static ip_addr_t *s_phostent_addr[2];
    static char s_hostname[DNS_MAX_NAME_LENGTH + 1];
    p_hostent = lwip_gethostbyname(name);
  108d38:	e51b0008 	ldr	r0, [fp, #-8]
  108d3c:	eb001d00 	bl	110144 <lwip_gethostbyname>
  108d40:	e1a02000 	mov	r2, r0
  108d44:	e30d3488 	movw	r3, #54408	; 0xd488
  108d48:	e3403014 	movt	r3, #20
  108d4c:	e5832000 	str	r2, [r3]
    memset(&s_hostent, 0, sizeof(s_hostent));
  108d50:	e3a02014 	mov	r2, #20
  108d54:	e3a01000 	mov	r1, #0
  108d58:	e30d048c 	movw	r0, #54412	; 0xd48c
  108d5c:	e3400014 	movt	r0, #20
  108d60:	eb00dee1 	bl	1408ec <memset>
    /* fill hostent */
    s_hostent_addr = *((ip_addr_t *) p_hostent->h_addr);
  108d64:	e30d3488 	movw	r3, #54408	; 0xd488
  108d68:	e3403014 	movt	r3, #20
  108d6c:	e5933000 	ldr	r3, [r3]
  108d70:	e5933010 	ldr	r3, [r3, #16]
  108d74:	e5932000 	ldr	r2, [r3]
  108d78:	e30d34a0 	movw	r3, #54432	; 0xd4a0
  108d7c:	e3403014 	movt	r3, #20
  108d80:	e5922000 	ldr	r2, [r2]
  108d84:	e5832000 	str	r2, [r3]
    s_phostent_addr[0] = &s_hostent_addr;
  108d88:	e30d34a4 	movw	r3, #54436	; 0xd4a4
  108d8c:	e3403014 	movt	r3, #20
  108d90:	e30d24a0 	movw	r2, #54432	; 0xd4a0
  108d94:	e3402014 	movt	r2, #20
  108d98:	e5832000 	str	r2, [r3]
    s_phostent_addr[1] = NULL;
  108d9c:	e30d34a4 	movw	r3, #54436	; 0xd4a4
  108da0:	e3403014 	movt	r3, #20
  108da4:	e3a02000 	mov	r2, #0
  108da8:	e5832004 	str	r2, [r3, #4]
    strncpy(s_hostname, name, DNS_MAX_NAME_LENGTH);
  108dac:	e3a02c01 	mov	r2, #256	; 0x100
  108db0:	e51b1008 	ldr	r1, [fp, #-8]
  108db4:	e30d04ac 	movw	r0, #54444	; 0xd4ac
  108db8:	e3400014 	movt	r0, #20
  108dbc:	eb00dfac 	bl	140c74 <strncpy>
    s_hostname[DNS_MAX_NAME_LENGTH] = 0;
  108dc0:	e30d34ac 	movw	r3, #54444	; 0xd4ac
  108dc4:	e3403014 	movt	r3, #20
  108dc8:	e3a02000 	mov	r2, #0
  108dcc:	e5c32100 	strb	r2, [r3, #256]	; 0x100
    s_hostent.h_name = s_hostname;
  108dd0:	e30d348c 	movw	r3, #54412	; 0xd48c
  108dd4:	e3403014 	movt	r3, #20
  108dd8:	e30d24ac 	movw	r2, #54444	; 0xd4ac
  108ddc:	e3402014 	movt	r2, #20
  108de0:	e5832000 	str	r2, [r3]
    s_aliases = NULL;
  108de4:	e30d35b0 	movw	r3, #54704	; 0xd5b0
  108de8:	e3403014 	movt	r3, #20
  108dec:	e3a02000 	mov	r2, #0
  108df0:	e5832000 	str	r2, [r3]
    s_hostent.h_aliases = &s_aliases;
  108df4:	e30d348c 	movw	r3, #54412	; 0xd48c
  108df8:	e3403014 	movt	r3, #20
  108dfc:	e30d25b0 	movw	r2, #54704	; 0xd5b0
  108e00:	e3402014 	movt	r2, #20
  108e04:	e5832004 	str	r2, [r3, #4]
    s_hostent.h_addrtype = AF_INET;
  108e08:	e30d348c 	movw	r3, #54412	; 0xd48c
  108e0c:	e3403014 	movt	r3, #20
  108e10:	e3a02002 	mov	r2, #2
  108e14:	e5832008 	str	r2, [r3, #8]
    s_hostent.h_length = sizeof(ip_addr_t);
  108e18:	e30d348c 	movw	r3, #54412	; 0xd48c
  108e1c:	e3403014 	movt	r3, #20
  108e20:	e3a02004 	mov	r2, #4
  108e24:	e583200c 	str	r2, [r3, #12]
    s_hostent.h_addr_list = (char**)&s_phostent_addr;
  108e28:	e30d348c 	movw	r3, #54412	; 0xd48c
  108e2c:	e3403014 	movt	r3, #20
  108e30:	e30d24a4 	movw	r2, #54436	; 0xd4a4
  108e34:	e3402014 	movt	r2, #20
  108e38:	e5832010 	str	r2, [r3, #16]
    p_hostent = &s_hostent;
  108e3c:	e30d3488 	movw	r3, #54408	; 0xd488
  108e40:	e3403014 	movt	r3, #20
  108e44:	e30d248c 	movw	r2, #54412	; 0xd48c
  108e48:	e3402014 	movt	r2, #20
  108e4c:	e5832000 	str	r2, [r3]

    return p_hostent;
  108e50:	e30d3488 	movw	r3, #54408	; 0xd488
  108e54:	e3403014 	movt	r3, #20
  108e58:	e5933000 	ldr	r3, [r3]
}
  108e5c:	e1a00003 	mov	r0, r3
  108e60:	e24bd004 	sub	sp, fp, #4
  108e64:	e8bd8800 	pop	{fp, pc}

00108e68 <unet_gethostbyname_r>:

int unet_gethostbyname_r(const char *name, struct hostent *ret, char *buf, size_t buflen, struct hostent **result, int *h_errnop)
{
  108e68:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  108e6c:	e28db000 	add	fp, sp, #0
  108e70:	e24dd014 	sub	sp, sp, #20
  108e74:	e50b0008 	str	r0, [fp, #-8]
  108e78:	e50b100c 	str	r1, [fp, #-12]
  108e7c:	e50b2010 	str	r2, [fp, #-16]
  108e80:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return 0;
  108e84:	e3a03000 	mov	r3, #0
}
  108e88:	e1a00003 	mov	r0, r3
  108e8c:	e28bd000 	add	sp, fp, #0
  108e90:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  108e94:	e12fff1e 	bx	lr

00108e98 <unet_getaddrinfo>:

int unet_getaddrinfo(const char *nodename, const char *servname, const struct addrinfo *hints, struct addrinfo **res)
{
  108e98:	e92d4800 	push	{fp, lr}
  108e9c:	e28db004 	add	fp, sp, #4
  108ea0:	e24dd010 	sub	sp, sp, #16
  108ea4:	e50b0008 	str	r0, [fp, #-8]
  108ea8:	e50b100c 	str	r1, [fp, #-12]
  108eac:	e50b2010 	str	r2, [fp, #-16]
  108eb0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return lwip_getaddrinfo(nodename, servname, hints, res);
  108eb4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108eb8:	e51b2010 	ldr	r2, [fp, #-16]
  108ebc:	e51b100c 	ldr	r1, [fp, #-12]
  108ec0:	e51b0008 	ldr	r0, [fp, #-8]
  108ec4:	eb001d6c 	bl	11047c <lwip_getaddrinfo>
  108ec8:	e1a03000 	mov	r3, r0
}
  108ecc:	e1a00003 	mov	r0, r3
  108ed0:	e24bd004 	sub	sp, fp, #4
  108ed4:	e8bd8800 	pop	{fp, pc}

00108ed8 <unet_freeaddrinfo>:

void unet_freeaddrinfo(struct addrinfo *ai)
{
  108ed8:	e92d4800 	push	{fp, lr}
  108edc:	e28db004 	add	fp, sp, #4
  108ee0:	e24dd008 	sub	sp, sp, #8
  108ee4:	e50b0008 	str	r0, [fp, #-8]
    lwip_freeaddrinfo(ai);
  108ee8:	e51b0008 	ldr	r0, [fp, #-8]
  108eec:	eb001d4f 	bl	110430 <lwip_freeaddrinfo>
}
  108ef0:	e320f000 	nop	{0}
  108ef4:	e24bd004 	sub	sp, fp, #4
  108ef8:	e8bd8800 	pop	{fp, pc}

00108efc <rt_list_init>:
{
  108efc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  108f00:	e28db000 	add	fp, sp, #0
  108f04:	e24dd00c 	sub	sp, sp, #12
  108f08:	e50b0008 	str	r0, [fp, #-8]
    l->next = l->prev = l;
  108f0c:	e51b3008 	ldr	r3, [fp, #-8]
  108f10:	e51b2008 	ldr	r2, [fp, #-8]
  108f14:	e5832004 	str	r2, [r3, #4]
  108f18:	e51b3008 	ldr	r3, [fp, #-8]
  108f1c:	e5932004 	ldr	r2, [r3, #4]
  108f20:	e51b3008 	ldr	r3, [fp, #-8]
  108f24:	e5832000 	str	r2, [r3]
}
  108f28:	e320f000 	nop	{0}
  108f2c:	e28bd000 	add	sp, fp, #0
  108f30:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  108f34:	e12fff1e 	bx	lr

00108f38 <accept_internal>:
#include "dfs_net.h"

#include "sal_socket.h"

int accept_internal(int s, struct sockaddr *addr, socklen_t *addrlen)
{
  108f38:	e92d4810 	push	{r4, fp, lr}
  108f3c:	e28db008 	add	fp, sp, #8
  108f40:	e24dd024 	sub	sp, sp, #36	; 0x24
  108f44:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  108f48:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  108f4c:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
    int new_socket = -1;
  108f50:	e3e03000 	mvn	r3, #0
  108f54:	e50b3010 	str	r3, [fp, #-16]
    int socket = dfs_net_getsocket(s);
  108f58:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  108f5c:	eb000352 	bl	109cac <dfs_net_getsocket>
  108f60:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec

    new_socket = sal_accept(socket, addr, addrlen);
  108f64:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  108f68:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  108f6c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  108f70:	ebfff95f 	bl	1074f4 <sal_accept>
  108f74:	e50b0010 	str	r0, [fp, #-16]
    if (new_socket != -1)
  108f78:	e51b3010 	ldr	r3, [fp, #-16]
  108f7c:	e3730001 	cmn	r3, #1
  108f80:	0a000050 	beq	1090c8 <accept_internal+0x190>
        /* this is a new socket, create it in file system fd */
        int fd;
        struct dfs_fd *d;

        /* allocate a fd */
        fd = fd_new();
  108f84:	eb000272 	bl	109954 <fd_new>
  108f88:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
        if (fd < 0)
  108f8c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  108f90:	e3530000 	cmp	r3, #0
  108f94:	aa000003 	bge	108fa8 <accept_internal+0x70>
        {
            sal_closesocket(new_socket);
  108f98:	e51b0010 	ldr	r0, [fp, #-16]
  108f9c:	ebfffc25 	bl	108038 <sal_closesocket>
            return -ENOMEM;
  108fa0:	e3e0300b 	mvn	r3, #11
  108fa4:	ea000048 	b	1090cc <accept_internal+0x194>
        }

        d = fd_get(fd);
  108fa8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  108fac:	eb00029d 	bl	109a28 <fd_get>
  108fb0:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
        if(d)
  108fb4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  108fb8:	e3530000 	cmp	r3, #0
  108fbc:	0a00003d 	beq	1090b8 <accept_internal+0x180>
        {
            /* this is a socket fd */
            d->fnode = (struct dfs_fnode *)rt_malloc(sizeof(struct dfs_fnode));
  108fc0:	e3a00028 	mov	r0, #40	; 0x28
  108fc4:	ebffe7f2 	bl	102f94 <rt_malloc>
  108fc8:	e1a02000 	mov	r2, r0
  108fcc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  108fd0:	e5832018 	str	r2, [r3, #24]
            if (!d->fnode)
  108fd4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  108fd8:	e5933018 	ldr	r3, [r3, #24]
  108fdc:	e3530000 	cmp	r3, #0
  108fe0:	1a000003 	bne	108ff4 <accept_internal+0xbc>
            {
                /* release fd */
                fd_release(fd);
  108fe4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  108fe8:	eb0002ed 	bl	109ba4 <fd_release>
                return -ENOMEM;
  108fec:	e3e0300b 	mvn	r3, #11
  108ff0:	ea000035 	b	1090cc <accept_internal+0x194>
            }
            rt_memset(d->fnode, 0, sizeof(struct dfs_fnode));
  108ff4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  108ff8:	e5933018 	ldr	r3, [r3, #24]
  108ffc:	e3a02028 	mov	r2, #40	; 0x28
  109000:	e3a01000 	mov	r1, #0
  109004:	e1a00003 	mov	r0, r3
  109008:	ebffe8ae 	bl	1032c8 <rt_memset>
            rt_list_init(&d->fnode->list);
  10900c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109010:	e5933018 	ldr	r3, [r3, #24]
  109014:	e2833010 	add	r3, r3, #16
  109018:	e1a00003 	mov	r0, r3
  10901c:	ebffffb6 	bl	108efc <rt_list_init>

            d->fnode->type = FT_SOCKET;
  109020:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109024:	e5933018 	ldr	r3, [r3, #24]
  109028:	e3a02001 	mov	r2, #1
  10902c:	e1c320b0 	strh	r2, [r3]
            d->fnode->path = NULL;
  109030:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109034:	e5933018 	ldr	r3, [r3, #24]
  109038:	e3a02000 	mov	r2, #0
  10903c:	e5832004 	str	r2, [r3, #4]
            d->fnode->fullpath = NULL;
  109040:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109044:	e5933018 	ldr	r3, [r3, #24]
  109048:	e3a02000 	mov	r2, #0
  10904c:	e5832008 	str	r2, [r3, #8]
            d->fnode->ref_count = 1;
  109050:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109054:	e5933018 	ldr	r3, [r3, #24]
  109058:	e3a02001 	mov	r2, #1
  10905c:	e583200c 	str	r2, [r3, #12]
            d->fnode->fops = dfs_net_get_fops();
  109060:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109064:	e5934018 	ldr	r4, [r3, #24]
  109068:	eb0003ae 	bl	109f28 <dfs_net_get_fops>
  10906c:	e1a03000 	mov	r3, r0
  109070:	e5843018 	str	r3, [r4, #24]
            d->flags = O_RDWR; /* set flags as read and write */
  109074:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109078:	e3a02002 	mov	r2, #2
  10907c:	e5832004 	str	r2, [r3, #4]
            d->fnode->size = 0;
  109080:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109084:	e5933018 	ldr	r3, [r3, #24]
  109088:	e3a02000 	mov	r2, #0
  10908c:	e5832020 	str	r2, [r3, #32]
            d->pos = 0;
  109090:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  109094:	e3a02000 	mov	r2, #0
  109098:	e3a03000 	mov	r3, #0
  10909c:	e1c121f0 	strd	r2, [r1, #16]

            /* set socket to the data of dfs_fd */
            d->fnode->data = (void *)(size_t)new_socket;
  1090a0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1090a4:	e5933018 	ldr	r3, [r3, #24]
  1090a8:	e51b2010 	ldr	r2, [fp, #-16]
  1090ac:	e5832024 	str	r2, [r3, #36]	; 0x24

            return fd;
  1090b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1090b4:	ea000004 	b	1090cc <accept_internal+0x194>
        }

        sal_closesocket(new_socket);
  1090b8:	e51b0010 	ldr	r0, [fp, #-16]
  1090bc:	ebfffbdd 	bl	108038 <sal_closesocket>
        return -ENOMEM;
  1090c0:	e3e0300b 	mvn	r3, #11
  1090c4:	ea000000 	b	1090cc <accept_internal+0x194>
    }

    return -1;
  1090c8:	e3e03000 	mvn	r3, #0
}
  1090cc:	e1a00003 	mov	r0, r3
  1090d0:	e24bd008 	sub	sp, fp, #8
  1090d4:	e8bd8810 	pop	{r4, fp, pc}

001090d8 <bind_internal>:

int bind_internal(int s, const struct sockaddr *name, socklen_t namelen)
{
  1090d8:	e92d4800 	push	{fp, lr}
  1090dc:	e28db004 	add	fp, sp, #4
  1090e0:	e24dd018 	sub	sp, sp, #24
  1090e4:	e50b0010 	str	r0, [fp, #-16]
  1090e8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1090ec:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    int socket = dfs_net_getsocket(s);
  1090f0:	e51b0010 	ldr	r0, [fp, #-16]
  1090f4:	eb0002ec 	bl	109cac <dfs_net_getsocket>
  1090f8:	e50b0008 	str	r0, [fp, #-8]
        server_addr.sin_addr.s_addr = inet_addr("127.0.0.1");
        return sal_bind(socket, (struct sockaddr *)&server_addr, namelen);
    }
#endif /* SAL_USING_AF_UNIX */

    return sal_bind(socket, name, namelen);
  1090fc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  109100:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  109104:	e51b0008 	ldr	r0, [fp, #-8]
  109108:	ebfff973 	bl	1076dc <sal_bind>
  10910c:	e1a03000 	mov	r3, r0
}
  109110:	e1a00003 	mov	r0, r3
  109114:	e24bd004 	sub	sp, fp, #4
  109118:	e8bd8800 	pop	{fp, pc}

0010911c <connect_internal>:

int connect_internal(int s, const struct sockaddr *name, socklen_t namelen)
{
  10911c:	e92d4800 	push	{fp, lr}
  109120:	e28db004 	add	fp, sp, #4
  109124:	e24dd018 	sub	sp, sp, #24
  109128:	e50b0010 	str	r0, [fp, #-16]
  10912c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  109130:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    int socket = dfs_net_getsocket(s);
  109134:	e51b0010 	ldr	r0, [fp, #-16]
  109138:	eb0002db 	bl	109cac <dfs_net_getsocket>
  10913c:	e50b0008 	str	r0, [fp, #-8]
        server_addr.sin_addr.s_addr = inet_addr("127.0.0.1");
        return sal_connect(socket, (struct sockaddr *)&server_addr, namelen);
    }
#endif /* SAL_USING_AF_UNIX */

    return sal_connect(socket, name, namelen);
  109140:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  109144:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  109148:	e51b0008 	ldr	r0, [fp, #-8]
  10914c:	ebfffaad 	bl	107c08 <sal_connect>
  109150:	e1a03000 	mov	r3, r0
}
  109154:	e1a00003 	mov	r0, r3
  109158:	e24bd004 	sub	sp, fp, #4
  10915c:	e8bd8800 	pop	{fp, pc}

00109160 <setsockopt_internal>:

int setsockopt_internal(int s, int level, int optname, const void *optval, socklen_t optlen)
{
  109160:	e92d4800 	push	{fp, lr}
  109164:	e28db004 	add	fp, sp, #4
  109168:	e24dd020 	sub	sp, sp, #32
  10916c:	e50b0010 	str	r0, [fp, #-16]
  109170:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  109174:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  109178:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    int socket = dfs_net_getsocket(s);
  10917c:	e51b0010 	ldr	r0, [fp, #-16]
  109180:	eb0002c9 	bl	109cac <dfs_net_getsocket>
  109184:	e50b0008 	str	r0, [fp, #-8]

    return sal_setsockopt(socket, level, optname, optval, optlen);
  109188:	e59b3004 	ldr	r3, [fp, #4]
  10918c:	e58d3000 	str	r3, [sp]
  109190:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109194:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  109198:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10919c:	e51b0008 	ldr	r0, [fp, #-8]
  1091a0:	ebfffa6e 	bl	107b60 <sal_setsockopt>
  1091a4:	e1a03000 	mov	r3, r0
}
  1091a8:	e1a00003 	mov	r0, r3
  1091ac:	e24bd004 	sub	sp, fp, #4
  1091b0:	e8bd8800 	pop	{fp, pc}

001091b4 <listen_internal>:

int listen_internal(int s, int backlog)
{
  1091b4:	e92d4800 	push	{fp, lr}
  1091b8:	e28db004 	add	fp, sp, #4
  1091bc:	e24dd010 	sub	sp, sp, #16
  1091c0:	e50b0010 	str	r0, [fp, #-16]
  1091c4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int socket = dfs_net_getsocket(s);
  1091c8:	e51b0010 	ldr	r0, [fp, #-16]
  1091cc:	eb0002b6 	bl	109cac <dfs_net_getsocket>
  1091d0:	e50b0008 	str	r0, [fp, #-8]

    return sal_listen(socket, backlog);
  1091d4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1091d8:	e51b0008 	ldr	r0, [fp, #-8]
  1091dc:	ebfffab8 	bl	107cc4 <sal_listen>
  1091e0:	e1a03000 	mov	r3, r0
}
  1091e4:	e1a00003 	mov	r0, r3
  1091e8:	e24bd004 	sub	sp, fp, #4
  1091ec:	e8bd8800 	pop	{fp, pc}

001091f0 <recv_internal>:


int recv_internal(int s, void *mem, size_t len, int flags)
{
  1091f0:	e92d4800 	push	{fp, lr}
  1091f4:	e28db004 	add	fp, sp, #4
  1091f8:	e24dd020 	sub	sp, sp, #32
  1091fc:	e50b0010 	str	r0, [fp, #-16]
  109200:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  109204:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  109208:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    int socket = dfs_net_getsocket(s);
  10920c:	e51b0010 	ldr	r0, [fp, #-16]
  109210:	eb0002a5 	bl	109cac <dfs_net_getsocket>
  109214:	e50b0008 	str	r0, [fp, #-8]

    return sal_recvfrom(socket, mem, len, flags, NULL, NULL);
  109218:	e3a03000 	mov	r3, #0
  10921c:	e58d3004 	str	r3, [sp, #4]
  109220:	e3a03000 	mov	r3, #0
  109224:	e58d3000 	str	r3, [sp]
  109228:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10922c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  109230:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  109234:	e51b0008 	ldr	r0, [fp, #-8]
  109238:	ebfffac5 	bl	107d54 <sal_recvfrom>
  10923c:	e1a03000 	mov	r3, r0
}
  109240:	e1a00003 	mov	r0, r3
  109244:	e24bd004 	sub	sp, fp, #4
  109248:	e8bd8800 	pop	{fp, pc}

0010924c <recvfrom_internal>:

int recvfrom_internal(int s, void *mem, size_t len, int flags,
             struct sockaddr *from, socklen_t *fromlen)
{
  10924c:	e92d4800 	push	{fp, lr}
  109250:	e28db004 	add	fp, sp, #4
  109254:	e24dd020 	sub	sp, sp, #32
  109258:	e50b0010 	str	r0, [fp, #-16]
  10925c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  109260:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  109264:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    int socket = dfs_net_getsocket(s);
  109268:	e51b0010 	ldr	r0, [fp, #-16]
  10926c:	eb00028e 	bl	109cac <dfs_net_getsocket>
  109270:	e50b0008 	str	r0, [fp, #-8]

    return sal_recvfrom(socket, mem, len, flags, from, fromlen);
  109274:	e59b3008 	ldr	r3, [fp, #8]
  109278:	e58d3004 	str	r3, [sp, #4]
  10927c:	e59b3004 	ldr	r3, [fp, #4]
  109280:	e58d3000 	str	r3, [sp]
  109284:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109288:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10928c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  109290:	e51b0008 	ldr	r0, [fp, #-8]
  109294:	ebfffaae 	bl	107d54 <sal_recvfrom>
  109298:	e1a03000 	mov	r3, r0
}
  10929c:	e1a00003 	mov	r0, r3
  1092a0:	e24bd004 	sub	sp, fp, #4
  1092a4:	e8bd8800 	pop	{fp, pc}

001092a8 <send_internal>:

int send_internal(int s, const void *dataptr, size_t size, int flags)
{
  1092a8:	e92d4800 	push	{fp, lr}
  1092ac:	e28db004 	add	fp, sp, #4
  1092b0:	e24dd020 	sub	sp, sp, #32
  1092b4:	e50b0010 	str	r0, [fp, #-16]
  1092b8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1092bc:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  1092c0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    int socket = dfs_net_getsocket(s);
  1092c4:	e51b0010 	ldr	r0, [fp, #-16]
  1092c8:	eb000277 	bl	109cac <dfs_net_getsocket>
  1092cc:	e50b0008 	str	r0, [fp, #-8]

    return sal_sendto(socket, dataptr, size, flags, NULL, 0);
  1092d0:	e3a03000 	mov	r3, #0
  1092d4:	e58d3004 	str	r3, [sp, #4]
  1092d8:	e3a03000 	mov	r3, #0
  1092dc:	e58d3000 	str	r3, [sp]
  1092e0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1092e4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1092e8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1092ec:	e51b0008 	ldr	r0, [fp, #-8]
  1092f0:	ebfffacb 	bl	107e24 <sal_sendto>
  1092f4:	e1a03000 	mov	r3, r0
}
  1092f8:	e1a00003 	mov	r0, r3
  1092fc:	e24bd004 	sub	sp, fp, #4
  109300:	e8bd8800 	pop	{fp, pc}

00109304 <sendto_internal>:

int sendto_internal(int s, const void *dataptr, size_t size, int flags,
           const struct sockaddr *to, socklen_t tolen)
{
  109304:	e92d4800 	push	{fp, lr}
  109308:	e28db004 	add	fp, sp, #4
  10930c:	e24dd020 	sub	sp, sp, #32
  109310:	e50b0010 	str	r0, [fp, #-16]
  109314:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  109318:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  10931c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    int socket = dfs_net_getsocket(s);
  109320:	e51b0010 	ldr	r0, [fp, #-16]
  109324:	eb000260 	bl	109cac <dfs_net_getsocket>
  109328:	e50b0008 	str	r0, [fp, #-8]

    return sal_sendto(socket, dataptr, size, flags, to, tolen);
  10932c:	e59b3008 	ldr	r3, [fp, #8]
  109330:	e58d3004 	str	r3, [sp, #4]
  109334:	e59b3004 	ldr	r3, [fp, #4]
  109338:	e58d3000 	str	r3, [sp]
  10933c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109340:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  109344:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  109348:	e51b0008 	ldr	r0, [fp, #-8]
  10934c:	ebfffab4 	bl	107e24 <sal_sendto>
  109350:	e1a03000 	mov	r3, r0
}
  109354:	e1a00003 	mov	r0, r3
  109358:	e24bd004 	sub	sp, fp, #4
  10935c:	e8bd8800 	pop	{fp, pc}

00109360 <socket_internal>:

int socket_internal(int domain, int type, int protocol)
{
  109360:	e92d4810 	push	{r4, fp, lr}
  109364:	e28db008 	add	fp, sp, #8
  109368:	e24dd024 	sub	sp, sp, #36	; 0x24
  10936c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  109370:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  109374:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
    int fd;
    int socket;
    struct dfs_fd *d;

    /* allocate a fd */
    fd = fd_new();
  109378:	eb000175 	bl	109954 <fd_new>
  10937c:	e50b0010 	str	r0, [fp, #-16]
    if (fd < 0)
  109380:	e51b3010 	ldr	r3, [fp, #-16]
  109384:	e3530000 	cmp	r3, #0
  109388:	aa000001 	bge	109394 <socket_internal+0x34>
    {
        return -ENOMEM;
  10938c:	e3e0300b 	mvn	r3, #11
  109390:	ea00004f 	b	1094d4 <socket_internal+0x174>
    }
    d = fd_get(fd);
  109394:	e51b0010 	ldr	r0, [fp, #-16]
  109398:	eb0001a2 	bl	109a28 <fd_get>
  10939c:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    d->fnode = (struct dfs_fnode *)rt_malloc(sizeof(struct dfs_fnode));
  1093a0:	e3a00028 	mov	r0, #40	; 0x28
  1093a4:	ebffe6fa 	bl	102f94 <rt_malloc>
  1093a8:	e1a02000 	mov	r2, r0
  1093ac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1093b0:	e5832018 	str	r2, [r3, #24]
    if (!d->fnode)
  1093b4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1093b8:	e5933018 	ldr	r3, [r3, #24]
  1093bc:	e3530000 	cmp	r3, #0
  1093c0:	1a000003 	bne	1093d4 <socket_internal+0x74>
    {
        /* release fd */
        fd_release(fd);
  1093c4:	e51b0010 	ldr	r0, [fp, #-16]
  1093c8:	eb0001f5 	bl	109ba4 <fd_release>
        return -ENOMEM;
  1093cc:	e3e0300b 	mvn	r3, #11
  1093d0:	ea00003f 	b	1094d4 <socket_internal+0x174>
    {
        domain = AF_INET;
    }
#endif /* SAL_USING_AF_UNIX */
    /* create socket  and then put it to the dfs_fd */
    socket = sal_socket(domain, type, protocol);
  1093d4:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  1093d8:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  1093dc:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1093e0:	ebfffac3 	bl	107ef4 <sal_socket>
  1093e4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    if (socket >= 0)
  1093e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1093ec:	e3530000 	cmp	r3, #0
  1093f0:	ba000030 	blt	1094b8 <socket_internal+0x158>
    {
        rt_memset(d->fnode, 0, sizeof(struct dfs_fnode));
  1093f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1093f8:	e5933018 	ldr	r3, [r3, #24]
  1093fc:	e3a02028 	mov	r2, #40	; 0x28
  109400:	e3a01000 	mov	r1, #0
  109404:	e1a00003 	mov	r0, r3
  109408:	ebffe7ae 	bl	1032c8 <rt_memset>
        rt_list_init(&d->fnode->list);
  10940c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109410:	e5933018 	ldr	r3, [r3, #24]
  109414:	e2833010 	add	r3, r3, #16
  109418:	e1a00003 	mov	r0, r3
  10941c:	ebfffeb6 	bl	108efc <rt_list_init>
        /* this is a socket fd */
        d->fnode->type = FT_SOCKET;
  109420:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109424:	e5933018 	ldr	r3, [r3, #24]
  109428:	e3a02001 	mov	r2, #1
  10942c:	e1c320b0 	strh	r2, [r3]
        d->fnode->path = NULL;
  109430:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109434:	e5933018 	ldr	r3, [r3, #24]
  109438:	e3a02000 	mov	r2, #0
  10943c:	e5832004 	str	r2, [r3, #4]
        d->fnode->fullpath = NULL;
  109440:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109444:	e5933018 	ldr	r3, [r3, #24]
  109448:	e3a02000 	mov	r2, #0
  10944c:	e5832008 	str	r2, [r3, #8]
        d->fnode->ref_count = 1;
  109450:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109454:	e5933018 	ldr	r3, [r3, #24]
  109458:	e3a02001 	mov	r2, #1
  10945c:	e583200c 	str	r2, [r3, #12]
        d->fnode->fops = dfs_net_get_fops();
  109460:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109464:	e5934018 	ldr	r4, [r3, #24]
  109468:	eb0002ae 	bl	109f28 <dfs_net_get_fops>
  10946c:	e1a03000 	mov	r3, r0
  109470:	e5843018 	str	r3, [r4, #24]

        d->flags = O_RDWR; /* set flags as read and write */
  109474:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109478:	e3a02002 	mov	r2, #2
  10947c:	e5832004 	str	r2, [r3, #4]
        d->fnode->size = 0;
  109480:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109484:	e5933018 	ldr	r3, [r3, #24]
  109488:	e3a02000 	mov	r2, #0
  10948c:	e5832020 	str	r2, [r3, #32]
        d->pos = 0;
  109490:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  109494:	e3a02000 	mov	r2, #0
  109498:	e3a03000 	mov	r3, #0
  10949c:	e1c121f0 	strd	r2, [r1, #16]

        /* set socket to the data of dfs_fd */
        d->fnode->data = (void *)(size_t)socket;
  1094a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1094a4:	e5933018 	ldr	r3, [r3, #24]
  1094a8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1094ac:	e5832024 	str	r2, [r3, #36]	; 0x24
        /* release fd */
        fd_release(fd);
        return -ENOMEM;
    }

    return fd;
  1094b0:	e51b3010 	ldr	r3, [fp, #-16]
  1094b4:	ea000006 	b	1094d4 <socket_internal+0x174>
        rt_free(d->fnode);
  1094b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1094bc:	e5933018 	ldr	r3, [r3, #24]
  1094c0:	e1a00003 	mov	r0, r3
  1094c4:	ebffe6bc 	bl	102fbc <rt_free>
        fd_release(fd);
  1094c8:	e51b0010 	ldr	r0, [fp, #-16]
  1094cc:	eb0001b4 	bl	109ba4 <fd_release>
        return -ENOMEM;
  1094d0:	e3e0300b 	mvn	r3, #11
  1094d4:	e1a00003 	mov	r0, r3
  1094d8:	e24bd008 	sub	sp, fp, #8
  1094dc:	e8bd8810 	pop	{r4, fp, pc}

001094e0 <dfs_init>:

/**
 * this function will initialize device file system.
 */
int dfs_init(void)
{
  1094e0:	e92d4800 	push	{fp, lr}
  1094e4:	e28db004 	add	fp, sp, #4
    static rt_bool_t init_ok = RT_FALSE;

    if (init_ok)
  1094e8:	e30d360c 	movw	r3, #54796	; 0xd60c
  1094ec:	e3403014 	movt	r3, #20
  1094f0:	e5933000 	ldr	r3, [r3]
  1094f4:	e3530000 	cmp	r3, #0
  1094f8:	0a000004 	beq	109510 <dfs_init+0x30>
    {
        rt_kprintf("dfs already init.\n");
  1094fc:	e30506e4 	movw	r0, #22244	; 0x56e4
  109500:	e3400014 	movt	r0, #20
  109504:	ebffe702 	bl	103114 <rt_kprintf>
        return 0;
  109508:	e3a03000 	mov	r3, #0
  10950c:	ea000016 	b	10956c <dfs_init+0x8c>
    }

    /* init fnode hash table */
    dfs_fnode_mgr_init();
  109510:	eb0001c6 	bl	109c30 <dfs_fnode_mgr_init>

    /* clean fd table */
    memset(&_fdtab, 0, sizeof(_fdtab));
  109514:	e3a02008 	mov	r2, #8
  109518:	e3a01000 	mov	r1, #0
  10951c:	e30d0604 	movw	r0, #54788	; 0xd604
  109520:	e3400014 	movt	r0, #20
  109524:	eb00dcf0 	bl	1408ec <memset>

    /* create device filesystem lock */
    rt_mutex_init(&fslock, "fslock", RT_IPC_FLAG_FIFO);
  109528:	e3a02000 	mov	r2, #0
  10952c:	e30516f8 	movw	r1, #22264	; 0x56f8
  109530:	e3401014 	movt	r1, #20
  109534:	e30d05b4 	movw	r0, #54708	; 0xd5b4
  109538:	e3400014 	movt	r0, #20
  10953c:	ebffde01 	bl	100d48 <rt_mutex_init>
    rt_mutex_init(&fdlock, "fdlock", RT_IPC_FLAG_FIFO);
  109540:	e3a02000 	mov	r2, #0
  109544:	e3051700 	movw	r1, #22272	; 0x5700
  109548:	e3401014 	movt	r1, #20
  10954c:	e30d05dc 	movw	r0, #54748	; 0xd5dc
  109550:	e3400014 	movt	r0, #20
  109554:	ebffddfb 	bl	100d48 <rt_mutex_init>

    init_ok = RT_TRUE;
  109558:	e30d360c 	movw	r3, #54796	; 0xd60c
  10955c:	e3403014 	movt	r3, #20
  109560:	e3a02001 	mov	r2, #1
  109564:	e5832000 	str	r2, [r3]

    return 0;
  109568:	e3a03000 	mov	r3, #0
}
  10956c:	e1a00003 	mov	r0, r3
  109570:	e8bd8800 	pop	{fp, pc}

00109574 <dfs_lock>:
 * this function will lock device file system.
 *
 * @note please don't invoke it on ISR.
 */
void dfs_lock(void)
{
  109574:	e92d4800 	push	{fp, lr}
  109578:	e28db004 	add	fp, sp, #4
  10957c:	e24dd008 	sub	sp, sp, #8
    rt_err_t result = -RT_EBUSY;
  109580:	e3e03006 	mvn	r3, #6
  109584:	e50b3008 	str	r3, [fp, #-8]

    while (result == -RT_EBUSY)
  109588:	ea000004 	b	1095a0 <dfs_lock+0x2c>
    {
        result = rt_mutex_take(&fslock, RT_WAITING_FOREVER);
  10958c:	e3e01000 	mvn	r1, #0
  109590:	e30d05b4 	movw	r0, #54708	; 0xd5b4
  109594:	e3400014 	movt	r0, #20
  109598:	ebffde58 	bl	100f00 <rt_mutex_take>
  10959c:	e50b0008 	str	r0, [fp, #-8]
    while (result == -RT_EBUSY)
  1095a0:	e51b3008 	ldr	r3, [fp, #-8]
  1095a4:	e3730007 	cmn	r3, #7
  1095a8:	0afffff7 	beq	10958c <dfs_lock+0x18>
    }

    if (result != RT_EOK)
  1095ac:	e51b3008 	ldr	r3, [fp, #-8]
  1095b0:	e3530000 	cmp	r3, #0
  1095b4:	0a000005 	beq	1095d0 <dfs_lock+0x5c>
    {
        RT_ASSERT(0);
  1095b8:	e3a0203d 	mov	r2, #61	; 0x3d
  1095bc:	e3051774 	movw	r1, #22388	; 0x5774
  1095c0:	e3401014 	movt	r1, #20
  1095c4:	e3050708 	movw	r0, #22280	; 0x5708
  1095c8:	e3400014 	movt	r0, #20
  1095cc:	ebffe7f1 	bl	103598 <rt_assert_handler>
    }
}
  1095d0:	e320f000 	nop	{0}
  1095d4:	e24bd004 	sub	sp, fp, #4
  1095d8:	e8bd8800 	pop	{fp, pc}

001095dc <dfs_fd_lock>:

void dfs_fd_lock(void)
{
  1095dc:	e92d4800 	push	{fp, lr}
  1095e0:	e28db004 	add	fp, sp, #4
  1095e4:	e24dd008 	sub	sp, sp, #8
    rt_err_t result = -RT_EBUSY;
  1095e8:	e3e03006 	mvn	r3, #6
  1095ec:	e50b3008 	str	r3, [fp, #-8]

    while (result == -RT_EBUSY)
  1095f0:	ea000004 	b	109608 <dfs_fd_lock+0x2c>
    {
        result = rt_mutex_take(&fdlock, RT_WAITING_FOREVER);
  1095f4:	e3e01000 	mvn	r1, #0
  1095f8:	e30d05dc 	movw	r0, #54748	; 0xd5dc
  1095fc:	e3400014 	movt	r0, #20
  109600:	ebffde3e 	bl	100f00 <rt_mutex_take>
  109604:	e50b0008 	str	r0, [fp, #-8]
    while (result == -RT_EBUSY)
  109608:	e51b3008 	ldr	r3, [fp, #-8]
  10960c:	e3730007 	cmn	r3, #7
  109610:	0afffff7 	beq	1095f4 <dfs_fd_lock+0x18>
    }

    if (result != RT_EOK)
  109614:	e51b3008 	ldr	r3, [fp, #-8]
  109618:	e3530000 	cmp	r3, #0
  10961c:	0a000005 	beq	109638 <dfs_fd_lock+0x5c>
    {
        RT_ASSERT(0);
  109620:	e3a0204c 	mov	r2, #76	; 0x4c
  109624:	e3051780 	movw	r1, #22400	; 0x5780
  109628:	e3401014 	movt	r1, #20
  10962c:	e3050708 	movw	r0, #22280	; 0x5708
  109630:	e3400014 	movt	r0, #20
  109634:	ebffe7d7 	bl	103598 <rt_assert_handler>
    }
}
  109638:	e320f000 	nop	{0}
  10963c:	e24bd004 	sub	sp, fp, #4
  109640:	e8bd8800 	pop	{fp, pc}

00109644 <dfs_unlock>:
 * this function will lock device file system.
 *
 * @note please don't invoke it on ISR.
 */
void dfs_unlock(void)
{
  109644:	e92d4800 	push	{fp, lr}
  109648:	e28db004 	add	fp, sp, #4
    rt_mutex_release(&fslock);
  10964c:	e30d05b4 	movw	r0, #54708	; 0xd5b4
  109650:	e3400014 	movt	r0, #20
  109654:	ebffde47 	bl	100f78 <rt_mutex_release>
}
  109658:	e320f000 	nop	{0}
  10965c:	e8bd8800 	pop	{fp, pc}

00109660 <dfs_fd_unlock>:

void dfs_fd_unlock(void)
{
  109660:	e92d4800 	push	{fp, lr}
  109664:	e28db004 	add	fp, sp, #4
    rt_mutex_release(&fdlock);
  109668:	e30d05dc 	movw	r0, #54748	; 0xd5dc
  10966c:	e3400014 	movt	r0, #20
  109670:	ebffde40 	bl	100f78 <rt_mutex_release>
}
  109674:	e320f000 	nop	{0}
  109678:	e8bd8800 	pop	{fp, pc}

0010967c <fd_slot_expand>:

static int fd_slot_expand(struct dfs_fdtable *fdt, int fd)
{
  10967c:	e92d4800 	push	{fp, lr}
  109680:	e28db004 	add	fp, sp, #4
  109684:	e24dd018 	sub	sp, sp, #24
  109688:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10968c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    int nr;
    int index;
    struct dfs_fd **fds = NULL;
  109690:	e3a03000 	mov	r3, #0
  109694:	e50b3010 	str	r3, [fp, #-16]

    if (fd < fdt->maxfd)
  109698:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10969c:	e5932000 	ldr	r2, [r3]
  1096a0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1096a4:	e1520003 	cmp	r2, r3
  1096a8:	9a000001 	bls	1096b4 <fd_slot_expand+0x38>
    {
        return fd;
  1096ac:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1096b0:	ea000032 	b	109780 <fd_slot_expand+0x104>
    }
    if (fd >= DFS_FD_MAX)
  1096b4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1096b8:	e353001f 	cmp	r3, #31
  1096bc:	da000001 	ble	1096c8 <fd_slot_expand+0x4c>
    {
        return -1;
  1096c0:	e3e03000 	mvn	r3, #0
  1096c4:	ea00002d 	b	109780 <fd_slot_expand+0x104>
    }

    nr = ((fd + 4) & ~3);
  1096c8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1096cc:	e2833004 	add	r3, r3, #4
  1096d0:	e3c33003 	bic	r3, r3, #3
  1096d4:	e50b3008 	str	r3, [fp, #-8]
    if (nr > DFS_FD_MAX)
  1096d8:	e51b3008 	ldr	r3, [fp, #-8]
  1096dc:	e3530020 	cmp	r3, #32
  1096e0:	da000001 	ble	1096ec <fd_slot_expand+0x70>
    {
        nr = DFS_FD_MAX;
  1096e4:	e3a03020 	mov	r3, #32
  1096e8:	e50b3008 	str	r3, [fp, #-8]
    }
    fds = (struct dfs_fd **)rt_realloc(fdt->fds, nr * sizeof(struct dfs_fd *));
  1096ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1096f0:	e5932004 	ldr	r2, [r3, #4]
  1096f4:	e51b3008 	ldr	r3, [fp, #-8]
  1096f8:	e1a03103 	lsl	r3, r3, #2
  1096fc:	e1a01003 	mov	r1, r3
  109700:	e1a00002 	mov	r0, r2
  109704:	ebffe634 	bl	102fdc <rt_realloc>
  109708:	e50b0010 	str	r0, [fp, #-16]
    if (!fds)
  10970c:	e51b3010 	ldr	r3, [fp, #-16]
  109710:	e3530000 	cmp	r3, #0
  109714:	1a000001 	bne	109720 <fd_slot_expand+0xa4>
    {
        return -1;
  109718:	e3e03000 	mvn	r3, #0
  10971c:	ea000017 	b	109780 <fd_slot_expand+0x104>
    }

    /* clean the new allocated fds */
    for (index = fdt->maxfd; index < nr; index++)
  109720:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  109724:	e5933000 	ldr	r3, [r3]
  109728:	e50b300c 	str	r3, [fp, #-12]
  10972c:	ea000008 	b	109754 <fd_slot_expand+0xd8>
    {
        fds[index] = NULL;
  109730:	e51b300c 	ldr	r3, [fp, #-12]
  109734:	e1a03103 	lsl	r3, r3, #2
  109738:	e51b2010 	ldr	r2, [fp, #-16]
  10973c:	e0823003 	add	r3, r2, r3
  109740:	e3a02000 	mov	r2, #0
  109744:	e5832000 	str	r2, [r3]
    for (index = fdt->maxfd; index < nr; index++)
  109748:	e51b300c 	ldr	r3, [fp, #-12]
  10974c:	e2833001 	add	r3, r3, #1
  109750:	e50b300c 	str	r3, [fp, #-12]
  109754:	e51b200c 	ldr	r2, [fp, #-12]
  109758:	e51b3008 	ldr	r3, [fp, #-8]
  10975c:	e1520003 	cmp	r2, r3
  109760:	bafffff2 	blt	109730 <fd_slot_expand+0xb4>
    }
    fdt->fds   = fds;
  109764:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  109768:	e51b2010 	ldr	r2, [fp, #-16]
  10976c:	e5832004 	str	r2, [r3, #4]
    fdt->maxfd = nr;
  109770:	e51b2008 	ldr	r2, [fp, #-8]
  109774:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  109778:	e5832000 	str	r2, [r3]

    return fd;
  10977c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
}
  109780:	e1a00003 	mov	r0, r3
  109784:	e24bd004 	sub	sp, fp, #4
  109788:	e8bd8800 	pop	{fp, pc}

0010978c <fd_slot_alloc>:

static int fd_slot_alloc(struct dfs_fdtable *fdt, int startfd)
{
  10978c:	e92d4800 	push	{fp, lr}
  109790:	e28db004 	add	fp, sp, #4
  109794:	e24dd010 	sub	sp, sp, #16
  109798:	e50b0010 	str	r0, [fp, #-16]
  10979c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int idx;

    /* find an empty fd slot */
    for (idx = startfd; idx < (int)fdt->maxfd; idx++)
  1097a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1097a4:	e50b3008 	str	r3, [fp, #-8]
  1097a8:	ea00000c 	b	1097e0 <fd_slot_alloc+0x54>
    {
        if (fdt->fds[idx] == RT_NULL)
  1097ac:	e51b3010 	ldr	r3, [fp, #-16]
  1097b0:	e5932004 	ldr	r2, [r3, #4]
  1097b4:	e51b3008 	ldr	r3, [fp, #-8]
  1097b8:	e1a03103 	lsl	r3, r3, #2
  1097bc:	e0823003 	add	r3, r2, r3
  1097c0:	e5933000 	ldr	r3, [r3]
  1097c4:	e3530000 	cmp	r3, #0
  1097c8:	1a000001 	bne	1097d4 <fd_slot_alloc+0x48>
        {
            return idx;
  1097cc:	e51b3008 	ldr	r3, [fp, #-8]
  1097d0:	ea00001a 	b	109840 <fd_slot_alloc+0xb4>
    for (idx = startfd; idx < (int)fdt->maxfd; idx++)
  1097d4:	e51b3008 	ldr	r3, [fp, #-8]
  1097d8:	e2833001 	add	r3, r3, #1
  1097dc:	e50b3008 	str	r3, [fp, #-8]
  1097e0:	e51b3010 	ldr	r3, [fp, #-16]
  1097e4:	e5933000 	ldr	r3, [r3]
  1097e8:	e1a02003 	mov	r2, r3
  1097ec:	e51b3008 	ldr	r3, [fp, #-8]
  1097f0:	e1530002 	cmp	r3, r2
  1097f4:	baffffec 	blt	1097ac <fd_slot_alloc+0x20>
        }
    }

    idx = fdt->maxfd;
  1097f8:	e51b3010 	ldr	r3, [fp, #-16]
  1097fc:	e5933000 	ldr	r3, [r3]
  109800:	e50b3008 	str	r3, [fp, #-8]
    if (idx < startfd)
  109804:	e51b2008 	ldr	r2, [fp, #-8]
  109808:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10980c:	e1520003 	cmp	r2, r3
  109810:	aa000001 	bge	10981c <fd_slot_alloc+0x90>
    {
        idx = startfd;
  109814:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109818:	e50b3008 	str	r3, [fp, #-8]
    }
    if (fd_slot_expand(fdt, idx) < 0)
  10981c:	e51b1008 	ldr	r1, [fp, #-8]
  109820:	e51b0010 	ldr	r0, [fp, #-16]
  109824:	ebffff94 	bl	10967c <fd_slot_expand>
  109828:	e1a03000 	mov	r3, r0
  10982c:	e3530000 	cmp	r3, #0
  109830:	aa000001 	bge	10983c <fd_slot_alloc+0xb0>
    {
        return -1;
  109834:	e3e03000 	mvn	r3, #0
  109838:	ea000000 	b	109840 <fd_slot_alloc+0xb4>
    }
    return idx;
  10983c:	e51b3008 	ldr	r3, [fp, #-8]
}
  109840:	e1a00003 	mov	r0, r3
  109844:	e24bd004 	sub	sp, fp, #4
  109848:	e8bd8800 	pop	{fp, pc}

0010984c <fd_alloc>:

static int fd_alloc(struct dfs_fdtable *fdt, int startfd)
{
  10984c:	e92d4800 	push	{fp, lr}
  109850:	e28db004 	add	fp, sp, #4
  109854:	e24dd010 	sub	sp, sp, #16
  109858:	e50b0010 	str	r0, [fp, #-16]
  10985c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int idx;
    struct dfs_fd *fd = NULL;
  109860:	e3a03000 	mov	r3, #0
  109864:	e50b3008 	str	r3, [fp, #-8]

    idx = fd_slot_alloc(fdt, startfd);
  109868:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10986c:	e51b0010 	ldr	r0, [fp, #-16]
  109870:	ebffffc5 	bl	10978c <fd_slot_alloc>
  109874:	e50b000c 	str	r0, [fp, #-12]

    /* allocate  'struct dfs_fd' */
    if (idx < 0)
  109878:	e51b300c 	ldr	r3, [fp, #-12]
  10987c:	e3530000 	cmp	r3, #0
  109880:	aa000001 	bge	10988c <fd_alloc+0x40>
    {
        return -1;
  109884:	e3e03000 	mvn	r3, #0
  109888:	ea00001a 	b	1098f8 <fd_alloc+0xac>
    }
    fd = (struct dfs_fd *)rt_calloc(1, sizeof(struct dfs_fd));
  10988c:	e3a01020 	mov	r1, #32
  109890:	e3a00001 	mov	r0, #1
  109894:	ebffe5dc 	bl	10300c <rt_calloc>
  109898:	e50b0008 	str	r0, [fp, #-8]
    if (!fd)
  10989c:	e51b3008 	ldr	r3, [fp, #-8]
  1098a0:	e3530000 	cmp	r3, #0
  1098a4:	1a000001 	bne	1098b0 <fd_alloc+0x64>
    {
        return -1;
  1098a8:	e3e03000 	mvn	r3, #0
  1098ac:	ea000011 	b	1098f8 <fd_alloc+0xac>
    }
    fd->ref_count = 1;
  1098b0:	e51b3008 	ldr	r3, [fp, #-8]
  1098b4:	e3a02001 	mov	r2, #1
  1098b8:	e5832008 	str	r2, [r3, #8]
    fd->magic = DFS_FD_MAGIC;
  1098bc:	e51b2008 	ldr	r2, [fp, #-8]
  1098c0:	e30f3dfd 	movw	r3, #65021	; 0xfdfd
  1098c4:	e34f3fff 	movt	r3, #65535	; 0xffff
  1098c8:	e1c230b0 	strh	r3, [r2]
    fd->fnode = NULL;
  1098cc:	e51b3008 	ldr	r3, [fp, #-8]
  1098d0:	e3a02000 	mov	r2, #0
  1098d4:	e5832018 	str	r2, [r3, #24]
    fdt->fds[idx] = fd;
  1098d8:	e51b3010 	ldr	r3, [fp, #-16]
  1098dc:	e5932004 	ldr	r2, [r3, #4]
  1098e0:	e51b300c 	ldr	r3, [fp, #-12]
  1098e4:	e1a03103 	lsl	r3, r3, #2
  1098e8:	e0823003 	add	r3, r2, r3
  1098ec:	e51b2008 	ldr	r2, [fp, #-8]
  1098f0:	e5832000 	str	r2, [r3]

    return idx;
  1098f4:	e51b300c 	ldr	r3, [fp, #-12]
}
  1098f8:	e1a00003 	mov	r0, r3
  1098fc:	e24bd004 	sub	sp, fp, #4
  109900:	e8bd8800 	pop	{fp, pc}

00109904 <fdt_fd_new>:
 * This function will allocate a file descriptor.
 *
 * @return -1 on failed or the allocated file descriptor.
 */
int fdt_fd_new(struct dfs_fdtable *fdt)
{
  109904:	e92d4800 	push	{fp, lr}
  109908:	e28db004 	add	fp, sp, #4
  10990c:	e24dd010 	sub	sp, sp, #16
  109910:	e50b0010 	str	r0, [fp, #-16]
    int idx;

    /* lock filesystem */
    dfs_fd_lock();
  109914:	ebffff30 	bl	1095dc <dfs_fd_lock>

    /* find an empty fd entry */
    idx = fd_alloc(fdt, DFS_STDIO_OFFSET);
  109918:	e3a01003 	mov	r1, #3
  10991c:	e51b0010 	ldr	r0, [fp, #-16]
  109920:	ebffffc9 	bl	10984c <fd_alloc>
  109924:	e50b0008 	str	r0, [fp, #-8]

    /* can't find an empty fd entry */
    if (idx < 0)
  109928:	e51b3008 	ldr	r3, [fp, #-8]
  10992c:	e3530000 	cmp	r3, #0
  109930:	aa000002 	bge	109940 <fdt_fd_new+0x3c>
    {
        rt_kprintf("DFS fd new is failed! Could not found an empty fd entry.");
  109934:	e305070c 	movw	r0, #22284	; 0x570c
  109938:	e3400014 	movt	r0, #20
  10993c:	ebffe5f4 	bl	103114 <rt_kprintf>
    }

    dfs_fd_unlock();
  109940:	ebffff46 	bl	109660 <dfs_fd_unlock>
    return idx;
  109944:	e51b3008 	ldr	r3, [fp, #-8]
}
  109948:	e1a00003 	mov	r0, r3
  10994c:	e24bd004 	sub	sp, fp, #4
  109950:	e8bd8800 	pop	{fp, pc}

00109954 <fd_new>:

int fd_new(void)
{
  109954:	e92d4800 	push	{fp, lr}
  109958:	e28db004 	add	fp, sp, #4
  10995c:	e24dd008 	sub	sp, sp, #8
    struct dfs_fdtable *fdt = NULL;
  109960:	e3a03000 	mov	r3, #0
  109964:	e50b3008 	str	r3, [fp, #-8]

    fdt = dfs_fdtable_get();
  109968:	eb000099 	bl	109bd4 <dfs_fdtable_get>
  10996c:	e50b0008 	str	r0, [fp, #-8]
    return fdt_fd_new(fdt);
  109970:	e51b0008 	ldr	r0, [fp, #-8]
  109974:	ebffffe2 	bl	109904 <fdt_fd_new>
  109978:	e1a03000 	mov	r3, r0
}
  10997c:	e1a00003 	mov	r0, r3
  109980:	e24bd004 	sub	sp, fp, #4
  109984:	e8bd8800 	pop	{fp, pc}

00109988 <fdt_fd_get>:
 * @return NULL on on this file descriptor or the file descriptor structure
 * pointer.
 */

struct dfs_fd *fdt_fd_get(struct dfs_fdtable* fdt, int fd)
{
  109988:	e92d4800 	push	{fp, lr}
  10998c:	e28db004 	add	fp, sp, #4
  109990:	e24dd010 	sub	sp, sp, #16
  109994:	e50b0010 	str	r0, [fp, #-16]
  109998:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    struct dfs_fd *d;

    if (fd < 0 || fd >= (int)fdt->maxfd)
  10999c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1099a0:	e3530000 	cmp	r3, #0
  1099a4:	ba000005 	blt	1099c0 <fdt_fd_get+0x38>
  1099a8:	e51b3010 	ldr	r3, [fp, #-16]
  1099ac:	e5933000 	ldr	r3, [r3]
  1099b0:	e1a02003 	mov	r2, r3
  1099b4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1099b8:	e1530002 	cmp	r3, r2
  1099bc:	ba000001 	blt	1099c8 <fdt_fd_get+0x40>
    {
        return NULL;
  1099c0:	e3a03000 	mov	r3, #0
  1099c4:	ea000014 	b	109a1c <fdt_fd_get+0x94>
    }

    dfs_fd_lock();
  1099c8:	ebffff03 	bl	1095dc <dfs_fd_lock>
    d = fdt->fds[fd];
  1099cc:	e51b3010 	ldr	r3, [fp, #-16]
  1099d0:	e5932004 	ldr	r2, [r3, #4]
  1099d4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1099d8:	e1a03103 	lsl	r3, r3, #2
  1099dc:	e0823003 	add	r3, r2, r3
  1099e0:	e5933000 	ldr	r3, [r3]
  1099e4:	e50b3008 	str	r3, [fp, #-8]

    /* check dfs_fd valid or not */
    if ((d == NULL) || (d->magic != DFS_FD_MAGIC))
  1099e8:	e51b3008 	ldr	r3, [fp, #-8]
  1099ec:	e3530000 	cmp	r3, #0
  1099f0:	0a000004 	beq	109a08 <fdt_fd_get+0x80>
  1099f4:	e51b3008 	ldr	r3, [fp, #-8]
  1099f8:	e1d330b0 	ldrh	r3, [r3]
  1099fc:	e30f2dfd 	movw	r2, #65021	; 0xfdfd
  109a00:	e1530002 	cmp	r3, r2
  109a04:	0a000002 	beq	109a14 <fdt_fd_get+0x8c>
    {
        dfs_fd_unlock();
  109a08:	ebffff14 	bl	109660 <dfs_fd_unlock>
        return NULL;
  109a0c:	e3a03000 	mov	r3, #0
  109a10:	ea000001 	b	109a1c <fdt_fd_get+0x94>
    }

    dfs_fd_unlock();
  109a14:	ebffff11 	bl	109660 <dfs_fd_unlock>

    return d;
  109a18:	e51b3008 	ldr	r3, [fp, #-8]
}
  109a1c:	e1a00003 	mov	r0, r3
  109a20:	e24bd004 	sub	sp, fp, #4
  109a24:	e8bd8800 	pop	{fp, pc}

00109a28 <fd_get>:

struct dfs_fd *fd_get(int fd)
{
  109a28:	e92d4800 	push	{fp, lr}
  109a2c:	e28db004 	add	fp, sp, #4
  109a30:	e24dd010 	sub	sp, sp, #16
  109a34:	e50b0010 	str	r0, [fp, #-16]
    struct dfs_fdtable *fdt;

    fdt = dfs_fdtable_get();
  109a38:	eb000065 	bl	109bd4 <dfs_fdtable_get>
  109a3c:	e50b0008 	str	r0, [fp, #-8]
    return fdt_fd_get(fdt, fd);
  109a40:	e51b1010 	ldr	r1, [fp, #-16]
  109a44:	e51b0008 	ldr	r0, [fp, #-8]
  109a48:	ebffffce 	bl	109988 <fdt_fd_get>
  109a4c:	e1a03000 	mov	r3, r0
}
  109a50:	e1a00003 	mov	r0, r3
  109a54:	e24bd004 	sub	sp, fp, #4
  109a58:	e8bd8800 	pop	{fp, pc}

00109a5c <fdt_fd_release>:
 * @ingroup Fd
 *
 * This function will put the file descriptor.
 */
void fdt_fd_release(struct dfs_fdtable* fdt, int fd)
{
  109a5c:	e92d4800 	push	{fp, lr}
  109a60:	e28db004 	add	fp, sp, #4
  109a64:	e24dd010 	sub	sp, sp, #16
  109a68:	e50b0010 	str	r0, [fp, #-16]
  109a6c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    struct dfs_fd *fd_slot = NULL;
  109a70:	e3a03000 	mov	r3, #0
  109a74:	e50b3008 	str	r3, [fp, #-8]

    RT_ASSERT(fdt != NULL);
  109a78:	e51b3010 	ldr	r3, [fp, #-16]
  109a7c:	e3530000 	cmp	r3, #0
  109a80:	1a000005 	bne	109a9c <fdt_fd_release+0x40>
  109a84:	e300210b 	movw	r2, #267	; 0x10b
  109a88:	e305178c 	movw	r1, #22412	; 0x578c
  109a8c:	e3401014 	movt	r1, #20
  109a90:	e3050748 	movw	r0, #22344	; 0x5748
  109a94:	e3400014 	movt	r0, #20
  109a98:	ebffe6be 	bl	103598 <rt_assert_handler>

    dfs_fd_lock();
  109a9c:	ebfffece 	bl	1095dc <dfs_fd_lock>

    if ((fd < 0) || (fd >= fdt->maxfd))
  109aa0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109aa4:	e3530000 	cmp	r3, #0
  109aa8:	ba000004 	blt	109ac0 <fdt_fd_release+0x64>
  109aac:	e51b3010 	ldr	r3, [fp, #-16]
  109ab0:	e5932000 	ldr	r2, [r3]
  109ab4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109ab8:	e1520003 	cmp	r2, r3
  109abc:	8a000001 	bhi	109ac8 <fdt_fd_release+0x6c>
    {
        dfs_fd_unlock();
  109ac0:	ebfffee6 	bl	109660 <dfs_fd_unlock>
        return;
  109ac4:	ea000034 	b	109b9c <fdt_fd_release+0x140>
    }

    fd_slot = fdt->fds[fd];
  109ac8:	e51b3010 	ldr	r3, [fp, #-16]
  109acc:	e5932004 	ldr	r2, [r3, #4]
  109ad0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109ad4:	e1a03103 	lsl	r3, r3, #2
  109ad8:	e0823003 	add	r3, r2, r3
  109adc:	e5933000 	ldr	r3, [r3]
  109ae0:	e50b3008 	str	r3, [fp, #-8]
    if (fd_slot == NULL)
  109ae4:	e51b3008 	ldr	r3, [fp, #-8]
  109ae8:	e3530000 	cmp	r3, #0
  109aec:	1a000001 	bne	109af8 <fdt_fd_release+0x9c>
    {
        dfs_fd_unlock();
  109af0:	ebfffeda 	bl	109660 <dfs_fd_unlock>
        return;
  109af4:	ea000028 	b	109b9c <fdt_fd_release+0x140>
    }
    fdt->fds[fd] = NULL;
  109af8:	e51b3010 	ldr	r3, [fp, #-16]
  109afc:	e5932004 	ldr	r2, [r3, #4]
  109b00:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109b04:	e1a03103 	lsl	r3, r3, #2
  109b08:	e0823003 	add	r3, r2, r3
  109b0c:	e3a02000 	mov	r2, #0
  109b10:	e5832000 	str	r2, [r3]

    /* check fd */
    RT_ASSERT(fd_slot->magic == DFS_FD_MAGIC);
  109b14:	e51b3008 	ldr	r3, [fp, #-8]
  109b18:	e1d330b0 	ldrh	r3, [r3]
  109b1c:	e30f2dfd 	movw	r2, #65021	; 0xfdfd
  109b20:	e1530002 	cmp	r3, r2
  109b24:	0a000005 	beq	109b40 <fdt_fd_release+0xe4>
  109b28:	e300211e 	movw	r2, #286	; 0x11e
  109b2c:	e305178c 	movw	r1, #22412	; 0x578c
  109b30:	e3401014 	movt	r1, #20
  109b34:	e3050754 	movw	r0, #22356	; 0x5754
  109b38:	e3400014 	movt	r0, #20
  109b3c:	ebffe695 	bl	103598 <rt_assert_handler>

    fd_slot->ref_count--;
  109b40:	e51b3008 	ldr	r3, [fp, #-8]
  109b44:	e5933008 	ldr	r3, [r3, #8]
  109b48:	e2432001 	sub	r2, r3, #1
  109b4c:	e51b3008 	ldr	r3, [fp, #-8]
  109b50:	e5832008 	str	r2, [r3, #8]

    /* clear this fd entry */
    if (fd_slot->ref_count == 0)
  109b54:	e51b3008 	ldr	r3, [fp, #-8]
  109b58:	e5933008 	ldr	r3, [r3, #8]
  109b5c:	e3530000 	cmp	r3, #0
  109b60:	1a00000c 	bne	109b98 <fdt_fd_release+0x13c>
    {
        struct dfs_fnode *fnode = fd_slot->fnode;
  109b64:	e51b3008 	ldr	r3, [fp, #-8]
  109b68:	e5933018 	ldr	r3, [r3, #24]
  109b6c:	e50b300c 	str	r3, [fp, #-12]
        if (fnode)
  109b70:	e51b300c 	ldr	r3, [fp, #-12]
  109b74:	e3530000 	cmp	r3, #0
  109b78:	0a000004 	beq	109b90 <fdt_fd_release+0x134>
        {
            fnode->ref_count--;
  109b7c:	e51b300c 	ldr	r3, [fp, #-12]
  109b80:	e593300c 	ldr	r3, [r3, #12]
  109b84:	e2432001 	sub	r2, r3, #1
  109b88:	e51b300c 	ldr	r3, [fp, #-12]
  109b8c:	e583200c 	str	r2, [r3, #12]
        }
        rt_free(fd_slot);
  109b90:	e51b0008 	ldr	r0, [fp, #-8]
  109b94:	ebffe508 	bl	102fbc <rt_free>
    }
    dfs_fd_unlock();
  109b98:	ebfffeb0 	bl	109660 <dfs_fd_unlock>
}
  109b9c:	e24bd004 	sub	sp, fp, #4
  109ba0:	e8bd8800 	pop	{fp, pc}

00109ba4 <fd_release>:

void fd_release(int fd)
{
  109ba4:	e92d4800 	push	{fp, lr}
  109ba8:	e28db004 	add	fp, sp, #4
  109bac:	e24dd010 	sub	sp, sp, #16
  109bb0:	e50b0010 	str	r0, [fp, #-16]
    struct dfs_fdtable *fdt;

    fdt = dfs_fdtable_get();
  109bb4:	eb000006 	bl	109bd4 <dfs_fdtable_get>
  109bb8:	e50b0008 	str	r0, [fp, #-8]
    fdt_fd_release(fdt, fd);
  109bbc:	e51b1010 	ldr	r1, [fp, #-16]
  109bc0:	e51b0008 	ldr	r0, [fp, #-8]
  109bc4:	ebffffa4 	bl	109a5c <fdt_fd_release>
}
  109bc8:	e320f000 	nop	{0}
  109bcc:	e24bd004 	sub	sp, fp, #4
  109bd0:	e8bd8800 	pop	{fp, pc}

00109bd4 <dfs_fdtable_get>:

/**
 * This function will get the file descriptor table of current process.
 */
struct dfs_fdtable *dfs_fdtable_get(void)
{
  109bd4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  109bd8:	e28db000 	add	fp, sp, #0
    return &_fdtab;
  109bdc:	e30d3604 	movw	r3, #54788	; 0xd604
  109be0:	e3403014 	movt	r3, #20
}
  109be4:	e1a00003 	mov	r0, r3
  109be8:	e28bd000 	add	sp, fp, #0
  109bec:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  109bf0:	e12fff1e 	bx	lr

00109bf4 <rt_list_init>:
{
  109bf4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  109bf8:	e28db000 	add	fp, sp, #0
  109bfc:	e24dd00c 	sub	sp, sp, #12
  109c00:	e50b0008 	str	r0, [fp, #-8]
    l->next = l->prev = l;
  109c04:	e51b3008 	ldr	r3, [fp, #-8]
  109c08:	e51b2008 	ldr	r2, [fp, #-8]
  109c0c:	e5832004 	str	r2, [r3, #4]
  109c10:	e51b3008 	ldr	r3, [fp, #-8]
  109c14:	e5932004 	ldr	r2, [r3, #4]
  109c18:	e51b3008 	ldr	r3, [fp, #-8]
  109c1c:	e5832000 	str	r2, [r3]
}
  109c20:	e320f000 	nop	{0}
  109c24:	e28bd000 	add	sp, fp, #0
  109c28:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  109c2c:	e12fff1e 	bx	lr

00109c30 <dfs_fnode_mgr_init>:
};

static struct dfs_fnode_mgr dfs_fm;

void dfs_fnode_mgr_init(void)
{
  109c30:	e92d4800 	push	{fp, lr}
  109c34:	e28db004 	add	fp, sp, #4
  109c38:	e24dd008 	sub	sp, sp, #8
    int i = 0;
  109c3c:	e3a03000 	mov	r3, #0
  109c40:	e50b3008 	str	r3, [fp, #-8]

    rt_mutex_init(&dfs_fm.lock, "dfs_mgr", RT_IPC_FLAG_PRIO);
  109c44:	e3a02001 	mov	r2, #1
  109c48:	e305179c 	movw	r1, #22428	; 0x579c
  109c4c:	e3401014 	movt	r1, #20
  109c50:	e30d0610 	movw	r0, #54800	; 0xd610
  109c54:	e3400014 	movt	r0, #20
  109c58:	ebffdc3a 	bl	100d48 <rt_mutex_init>
    for (i = 0; i < DFS_FNODE_HASH_NR; i++)
  109c5c:	e3a03000 	mov	r3, #0
  109c60:	e50b3008 	str	r3, [fp, #-8]
  109c64:	ea00000a 	b	109c94 <dfs_fnode_mgr_init+0x64>
    {
        rt_list_init(&dfs_fm.head[i]);
  109c68:	e51b3008 	ldr	r3, [fp, #-8]
  109c6c:	e2833005 	add	r3, r3, #5
  109c70:	e1a02183 	lsl	r2, r3, #3
  109c74:	e30d3610 	movw	r3, #54800	; 0xd610
  109c78:	e3403014 	movt	r3, #20
  109c7c:	e0823003 	add	r3, r2, r3
  109c80:	e1a00003 	mov	r0, r3
  109c84:	ebffffda 	bl	109bf4 <rt_list_init>
    for (i = 0; i < DFS_FNODE_HASH_NR; i++)
  109c88:	e51b3008 	ldr	r3, [fp, #-8]
  109c8c:	e2833001 	add	r3, r3, #1
  109c90:	e50b3008 	str	r3, [fp, #-8]
  109c94:	e51b3008 	ldr	r3, [fp, #-8]
  109c98:	e353007f 	cmp	r3, #127	; 0x7f
  109c9c:	dafffff1 	ble	109c68 <dfs_fnode_mgr_init+0x38>
    }
  109ca0:	e320f000 	nop	{0}
  109ca4:	e24bd004 	sub	sp, fp, #4
  109ca8:	e8bd8800 	pop	{fp, pc}

00109cac <dfs_net_getsocket>:
#include "dfs.h"
#include "dfs_net.h"
#include "../netdev/sal_socket.h"

int dfs_net_getsocket(int fd)
{
  109cac:	e92d4800 	push	{fp, lr}
  109cb0:	e28db004 	add	fp, sp, #4
  109cb4:	e24dd010 	sub	sp, sp, #16
  109cb8:	e50b0010 	str	r0, [fp, #-16]
    int socket;
    struct dfs_fd *_dfs_fd;

    _dfs_fd = fd_get(fd);
  109cbc:	e51b0010 	ldr	r0, [fp, #-16]
  109cc0:	ebffff58 	bl	109a28 <fd_get>
  109cc4:	e50b000c 	str	r0, [fp, #-12]
    if (_dfs_fd == NULL) return -1;
  109cc8:	e51b300c 	ldr	r3, [fp, #-12]
  109ccc:	e3530000 	cmp	r3, #0
  109cd0:	1a000001 	bne	109cdc <dfs_net_getsocket+0x30>
  109cd4:	e3e03000 	mvn	r3, #0
  109cd8:	ea00000c 	b	109d10 <dfs_net_getsocket+0x64>

    if (_dfs_fd->fnode->type != FT_SOCKET) socket = -1;
  109cdc:	e51b300c 	ldr	r3, [fp, #-12]
  109ce0:	e5933018 	ldr	r3, [r3, #24]
  109ce4:	e1d330b0 	ldrh	r3, [r3]
  109ce8:	e3530001 	cmp	r3, #1
  109cec:	0a000002 	beq	109cfc <dfs_net_getsocket+0x50>
  109cf0:	e3e03000 	mvn	r3, #0
  109cf4:	e50b3008 	str	r3, [fp, #-8]
  109cf8:	ea000003 	b	109d0c <dfs_net_getsocket+0x60>
    else socket = (int)(size_t)_dfs_fd->fnode->data;
  109cfc:	e51b300c 	ldr	r3, [fp, #-12]
  109d00:	e5933018 	ldr	r3, [r3, #24]
  109d04:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  109d08:	e50b3008 	str	r3, [fp, #-8]

    return socket;
  109d0c:	e51b3008 	ldr	r3, [fp, #-8]
}
  109d10:	e1a00003 	mov	r0, r3
  109d14:	e24bd004 	sub	sp, fp, #4
  109d18:	e8bd8800 	pop	{fp, pc}

00109d1c <dfs_net_ioctl>:

static int dfs_net_ioctl(struct dfs_fd* file, int cmd, void* args)
{
  109d1c:	e92d4800 	push	{fp, lr}
  109d20:	e28db004 	add	fp, sp, #4
  109d24:	e24dd018 	sub	sp, sp, #24
  109d28:	e50b0010 	str	r0, [fp, #-16]
  109d2c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  109d30:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    int ret;
    int socket = (int)(size_t)file->fnode->data;
  109d34:	e51b3010 	ldr	r3, [fp, #-16]
  109d38:	e5933018 	ldr	r3, [r3, #24]
  109d3c:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  109d40:	e50b3008 	str	r3, [fp, #-8]

    ret = sal_ioctlsocket(socket, cmd, args);
  109d44:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  109d48:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  109d4c:	e51b0008 	ldr	r0, [fp, #-8]
  109d50:	ebfff8e6 	bl	1080f0 <sal_ioctlsocket>
  109d54:	e50b000c 	str	r0, [fp, #-12]
    if (ret < 0)
  109d58:	e51b300c 	ldr	r3, [fp, #-12]
  109d5c:	e3530000 	cmp	r3, #0
  109d60:	aa000006 	bge	109d80 <dfs_net_ioctl+0x64>
    {
        ret = rt_get_errno();
  109d64:	ebffe0bc 	bl	10205c <rt_get_errno>
  109d68:	e50b000c 	str	r0, [fp, #-12]
        return (ret > 0) ? (-ret) : ret;
  109d6c:	e51b300c 	ldr	r3, [fp, #-12]
  109d70:	e3530000 	cmp	r3, #0
  109d74:	b2633000 	rsblt	r3, r3, #0
  109d78:	e2633000 	rsb	r3, r3, #0
  109d7c:	ea000000 	b	109d84 <dfs_net_ioctl+0x68>
    }
    return ret;
  109d80:	e51b300c 	ldr	r3, [fp, #-12]
}
  109d84:	e1a00003 	mov	r0, r3
  109d88:	e24bd004 	sub	sp, fp, #4
  109d8c:	e8bd8800 	pop	{fp, pc}

00109d90 <dfs_net_read>:

static int dfs_net_read(struct dfs_fd* file, void *buf, size_t count)
{
  109d90:	e92d4800 	push	{fp, lr}
  109d94:	e28db004 	add	fp, sp, #4
  109d98:	e24dd020 	sub	sp, sp, #32
  109d9c:	e50b0010 	str	r0, [fp, #-16]
  109da0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  109da4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    int ret;
    int socket = (int)(size_t)file->fnode->data;
  109da8:	e51b3010 	ldr	r3, [fp, #-16]
  109dac:	e5933018 	ldr	r3, [r3, #24]
  109db0:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  109db4:	e50b3008 	str	r3, [fp, #-8]

    ret = sal_recvfrom(socket, buf, count, 0, NULL, NULL);
  109db8:	e3a03000 	mov	r3, #0
  109dbc:	e58d3004 	str	r3, [sp, #4]
  109dc0:	e3a03000 	mov	r3, #0
  109dc4:	e58d3000 	str	r3, [sp]
  109dc8:	e3a03000 	mov	r3, #0
  109dcc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  109dd0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  109dd4:	e51b0008 	ldr	r0, [fp, #-8]
  109dd8:	ebfff7dd 	bl	107d54 <sal_recvfrom>
  109ddc:	e50b000c 	str	r0, [fp, #-12]
    if (ret < 0)
  109de0:	e51b300c 	ldr	r3, [fp, #-12]
  109de4:	e3530000 	cmp	r3, #0
  109de8:	aa000006 	bge	109e08 <dfs_net_read+0x78>
    {
        ret = rt_get_errno();
  109dec:	ebffe09a 	bl	10205c <rt_get_errno>
  109df0:	e50b000c 	str	r0, [fp, #-12]
        return (ret > 0) ? (-ret) : ret;
  109df4:	e51b300c 	ldr	r3, [fp, #-12]
  109df8:	e3530000 	cmp	r3, #0
  109dfc:	b2633000 	rsblt	r3, r3, #0
  109e00:	e2633000 	rsb	r3, r3, #0
  109e04:	ea000000 	b	109e0c <dfs_net_read+0x7c>
    }
    return ret;
  109e08:	e51b300c 	ldr	r3, [fp, #-12]
}
  109e0c:	e1a00003 	mov	r0, r3
  109e10:	e24bd004 	sub	sp, fp, #4
  109e14:	e8bd8800 	pop	{fp, pc}

00109e18 <dfs_net_write>:

static int dfs_net_write(struct dfs_fd *file, const void *buf, size_t count)
{
  109e18:	e92d4800 	push	{fp, lr}
  109e1c:	e28db004 	add	fp, sp, #4
  109e20:	e24dd020 	sub	sp, sp, #32
  109e24:	e50b0010 	str	r0, [fp, #-16]
  109e28:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  109e2c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    int ret;
    int socket = (int)(size_t)file->fnode->data;
  109e30:	e51b3010 	ldr	r3, [fp, #-16]
  109e34:	e5933018 	ldr	r3, [r3, #24]
  109e38:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  109e3c:	e50b3008 	str	r3, [fp, #-8]
    
    ret = sal_sendto(socket, buf, count, 0, NULL, 0);
  109e40:	e3a03000 	mov	r3, #0
  109e44:	e58d3004 	str	r3, [sp, #4]
  109e48:	e3a03000 	mov	r3, #0
  109e4c:	e58d3000 	str	r3, [sp]
  109e50:	e3a03000 	mov	r3, #0
  109e54:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  109e58:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  109e5c:	e51b0008 	ldr	r0, [fp, #-8]
  109e60:	ebfff7ef 	bl	107e24 <sal_sendto>
  109e64:	e50b000c 	str	r0, [fp, #-12]
    if (ret < 0)
  109e68:	e51b300c 	ldr	r3, [fp, #-12]
  109e6c:	e3530000 	cmp	r3, #0
  109e70:	aa000006 	bge	109e90 <dfs_net_write+0x78>
    {
        ret = rt_get_errno();
  109e74:	ebffe078 	bl	10205c <rt_get_errno>
  109e78:	e50b000c 	str	r0, [fp, #-12]
        return (ret > 0) ? (-ret) : ret;
  109e7c:	e51b300c 	ldr	r3, [fp, #-12]
  109e80:	e3530000 	cmp	r3, #0
  109e84:	b2633000 	rsblt	r3, r3, #0
  109e88:	e2633000 	rsb	r3, r3, #0
  109e8c:	ea000000 	b	109e94 <dfs_net_write+0x7c>
    }
    return ret;
  109e90:	e51b300c 	ldr	r3, [fp, #-12]
}
  109e94:	e1a00003 	mov	r0, r3
  109e98:	e24bd004 	sub	sp, fp, #4
  109e9c:	e8bd8800 	pop	{fp, pc}

00109ea0 <dfs_net_close>:
static int dfs_net_close(struct dfs_fd* file)
{
  109ea0:	e92d4800 	push	{fp, lr}
  109ea4:	e28db004 	add	fp, sp, #4
  109ea8:	e24dd010 	sub	sp, sp, #16
  109eac:	e50b0010 	str	r0, [fp, #-16]
    int socket;
    int ret = 0;
  109eb0:	e3a03000 	mov	r3, #0
  109eb4:	e50b3008 	str	r3, [fp, #-8]

    if (file->fnode->ref_count == 1)
  109eb8:	e51b3010 	ldr	r3, [fp, #-16]
  109ebc:	e5933018 	ldr	r3, [r3, #24]
  109ec0:	e593300c 	ldr	r3, [r3, #12]
  109ec4:	e3530001 	cmp	r3, #1
  109ec8:	1a000006 	bne	109ee8 <dfs_net_close+0x48>
    {
        socket = (int)(size_t)file->fnode->data;
  109ecc:	e51b3010 	ldr	r3, [fp, #-16]
  109ed0:	e5933018 	ldr	r3, [r3, #24]
  109ed4:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  109ed8:	e50b300c 	str	r3, [fp, #-12]
        ret = sal_closesocket(socket);
  109edc:	e51b000c 	ldr	r0, [fp, #-12]
  109ee0:	ebfff854 	bl	108038 <sal_closesocket>
  109ee4:	e50b0008 	str	r0, [fp, #-8]
    }
    return ret;
  109ee8:	e51b3008 	ldr	r3, [fp, #-8]
}
  109eec:	e1a00003 	mov	r0, r3
  109ef0:	e24bd004 	sub	sp, fp, #4
  109ef4:	e8bd8800 	pop	{fp, pc}

00109ef8 <dfs_net_poll>:

static int dfs_net_poll(struct dfs_fd *file, struct rt_pollreq *req)
{
  109ef8:	e92d4800 	push	{fp, lr}
  109efc:	e28db004 	add	fp, sp, #4
  109f00:	e24dd008 	sub	sp, sp, #8
  109f04:	e50b0008 	str	r0, [fp, #-8]
  109f08:	e50b100c 	str	r1, [fp, #-12]
    extern int sal_poll(struct dfs_fd *file, struct rt_pollreq *req);

    return sal_poll(file, req);
  109f0c:	e51b100c 	ldr	r1, [fp, #-12]
  109f10:	e51b0008 	ldr	r0, [fp, #-8]
  109f14:	ebfff911 	bl	108360 <sal_poll>
  109f18:	e1a03000 	mov	r3, r0
}
  109f1c:	e1a00003 	mov	r0, r3
  109f20:	e24bd004 	sub	sp, fp, #4
  109f24:	e8bd8800 	pop	{fp, pc}

00109f28 <dfs_net_get_fops>:
    dfs_net_write,
    dfs_net_poll,
};

const struct dfs_file_ops *dfs_net_get_fops(void)
{
  109f28:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  109f2c:	e28db000 	add	fp, sp, #0
    return &_net_fops;
  109f30:	e30537a4 	movw	r3, #22436	; 0x57a4
  109f34:	e3403014 	movt	r3, #20
}
  109f38:	e1a00003 	mov	r0, r3
  109f3c:	e28bd000 	add	sp, fp, #0
  109f40:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  109f44:	e12fff1e 	bx	lr

00109f48 <tcpip_init_done_callback>:

/*
 * Initialize the ethernetif layer and set network interface device up
 */
static void tcpip_init_done_callback(void *arg)
{
  109f48:	e92d4800 	push	{fp, lr}
  109f4c:	e28db004 	add	fp, sp, #4
  109f50:	e24dd008 	sub	sp, sp, #8
  109f54:	e50b0008 	str	r0, [fp, #-8]
    rt_sem_release((rt_sem_t)arg);
  109f58:	e51b0008 	ldr	r0, [fp, #-8]
  109f5c:	ebffdcb8 	bl	101244 <rt_sem_release>
}
  109f60:	e320f000 	nop	{0}
  109f64:	e24bd004 	sub	sp, fp, #4
  109f68:	e8bd8800 	pop	{fp, pc}

00109f6c <lwip_system_init>:
/**
 * LwIP system initialization
 */
extern int eth_system_device_init_private(void);
int lwip_system_init(void)
{
  109f6c:	e92d4800 	push	{fp, lr}
  109f70:	e28db004 	add	fp, sp, #4
  109f74:	e24dd010 	sub	sp, sp, #16
    struct rt_semaphore *done_sem;
    static rt_bool_t init_ok = RT_FALSE;

    if (init_ok)
  109f78:	e30d3a40 	movw	r3, #55872	; 0xda40
  109f7c:	e3403014 	movt	r3, #20
  109f80:	e5933000 	ldr	r3, [r3]
  109f84:	e3530000 	cmp	r3, #0
  109f88:	0a000004 	beq	109fa0 <lwip_system_init+0x34>
    {
        rt_kprintf("lwip system already init.\n");
  109f8c:	e30507b8 	movw	r0, #22456	; 0x57b8
  109f90:	e3400014 	movt	r0, #20
  109f94:	ebffe45e 	bl	103114 <rt_kprintf>
        return 0;
  109f98:	e3a03000 	mov	r3, #0
  109f9c:	ea00003c 	b	10a094 <lwip_system_init+0x128>
    }

    eth_system_device_init_private();
  109fa0:	eb007e81 	bl	1299ac <eth_system_device_init_private>

    /* set default netif to NULL */
    netif_default = RT_NULL;
  109fa4:	e3043fb8 	movw	r3, #20408	; 0x4fb8
  109fa8:	e3403057 	movt	r3, #87	; 0x57
  109fac:	e3a02000 	mov	r2, #0
  109fb0:	e5832000 	str	r2, [r3]
    done_sem = rt_sem_create("done", 0, RT_IPC_FLAG_FIFO);
  109fb4:	e3a02000 	mov	r2, #0
  109fb8:	e3a01000 	mov	r1, #0
  109fbc:	e30507d4 	movw	r0, #22484	; 0x57d4
  109fc0:	e3400014 	movt	r0, #20
  109fc4:	ebffdc07 	bl	100fe8 <rt_sem_create>
  109fc8:	e50b0008 	str	r0, [fp, #-8]

    if (done_sem == RT_NULL)
  109fcc:	e51b3008 	ldr	r3, [fp, #-8]
  109fd0:	e3530000 	cmp	r3, #0
  109fd4:	1a000008 	bne	109ffc <lwip_system_init+0x90>
    {
        LWIP_ASSERT("Failed to create semaphore", 0);
  109fd8:	e30507dc 	movw	r0, #22492	; 0x57dc
  109fdc:	e3400014 	movt	r0, #20
  109fe0:	ebffe44b 	bl	103114 <rt_kprintf>
  109fe4:	e3a0105e 	mov	r1, #94	; 0x5e
  109fe8:	e30507f8 	movw	r0, #22520	; 0x57f8
  109fec:	e3400014 	movt	r0, #20
  109ff0:	eb0002c7 	bl	10ab14 <sys_arch_assert>

        return -1;
  109ff4:	e3e03000 	mvn	r3, #0
  109ff8:	ea000025 	b	10a094 <lwip_system_init+0x128>
    }

    tcpip_init(tcpip_init_done_callback, (void *)done_sem);
  109ffc:	e51b1008 	ldr	r1, [fp, #-8]
  10a000:	e3090f48 	movw	r0, #40776	; 0x9f48
  10a004:	e3400010 	movt	r0, #16
  10a008:	eb00303e 	bl	116108 <tcpip_init>

    /* waiting for initialization done */
    if (rt_sem_take(done_sem, RT_WAITING_FOREVER) != RT_EOK)
  10a00c:	e3e01000 	mvn	r1, #0
  10a010:	e51b0008 	ldr	r0, [fp, #-8]
  10a014:	ebffdca6 	bl	1012b4 <rt_sem_take>
  10a018:	e1a03000 	mov	r3, r0
  10a01c:	e3530000 	cmp	r3, #0
  10a020:	0a000003 	beq	10a034 <lwip_system_init+0xc8>
    {
        rt_sem_delete(done_sem);
  10a024:	e51b0008 	ldr	r0, [fp, #-8]
  10a028:	ebffdc39 	bl	101114 <rt_sem_delete>

        return -1;
  10a02c:	e3e03000 	mvn	r3, #0
  10a030:	ea000017 	b	10a094 <lwip_system_init+0x128>
    }
    rt_sem_delete(done_sem);
  10a034:	e51b0008 	ldr	r0, [fp, #-8]
  10a038:	ebffdc35 	bl	101114 <rt_sem_delete>

        netifapi_netif_set_addr(netif_default, &ipaddr, &netmask, &gw);
    }
#endif

    rt_thread_t tid = rt_thread_create("tcpip_mb_timer", tcpip_mb_timer_entry, NULL, 1024, 25, 10); 
  10a03c:	e3a0300a 	mov	r3, #10
  10a040:	e58d3004 	str	r3, [sp, #4]
  10a044:	e3a03019 	mov	r3, #25
  10a048:	e58d3000 	str	r3, [sp]
  10a04c:	e3a03b01 	mov	r3, #1024	; 0x400
  10a050:	e3a02000 	mov	r2, #0
  10a054:	e30a1560 	movw	r1, #42336	; 0xa560
  10a058:	e3401010 	movt	r1, #16
  10a05c:	e3050828 	movw	r0, #22568	; 0x5828
  10a060:	e3400014 	movt	r0, #20
  10a064:	ebffe022 	bl	1020f4 <rt_thread_create>
  10a068:	e50b000c 	str	r0, [fp, #-12]
    if (tid) rt_thread_startup(tid);
  10a06c:	e51b300c 	ldr	r3, [fp, #-12]
  10a070:	e3530000 	cmp	r3, #0
  10a074:	0a000001 	beq	10a080 <lwip_system_init+0x114>
  10a078:	e51b000c 	ldr	r0, [fp, #-12]
  10a07c:	ebffe051 	bl	1021c8 <rt_thread_startup>

    init_ok = RT_TRUE;
  10a080:	e30d3a40 	movw	r3, #55872	; 0xda40
  10a084:	e3403014 	movt	r3, #20
  10a088:	e3a02001 	mov	r2, #1
  10a08c:	e5832000 	str	r2, [r3]

    return 0;
  10a090:	e3a03000 	mov	r3, #0
}
  10a094:	e1a00003 	mov	r0, r3
  10a098:	e24bd004 	sub	sp, fp, #4
  10a09c:	e8bd8800 	pop	{fp, pc}

0010a0a0 <sys_init>:

void sys_init(void)
{
  10a0a0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10a0a4:	e28db000 	add	fp, sp, #0
    /* nothing on RT-Thread porting */
}
  10a0a8:	e320f000 	nop	{0}
  10a0ac:	e28bd000 	add	sp, fp, #0
  10a0b0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10a0b4:	e12fff1e 	bx	lr

0010a0b8 <lwip_sys_init>:

void lwip_sys_init(void)
{
  10a0b8:	e92d4800 	push	{fp, lr}
  10a0bc:	e28db004 	add	fp, sp, #4
    lwip_system_init();
  10a0c0:	ebffffa9 	bl	109f6c <lwip_system_init>
}
  10a0c4:	e320f000 	nop	{0}
  10a0c8:	e8bd8800 	pop	{fp, pc}

0010a0cc <sys_sem_new>:
 * Create a new semaphore
 *
 * @return the operation status, ERR_OK on OK; others on error
 */
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
  10a0cc:	e92d4800 	push	{fp, lr}
  10a0d0:	e28db004 	add	fp, sp, #4
  10a0d4:	e24dd020 	sub	sp, sp, #32
  10a0d8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10a0dc:	e1a03001 	mov	r3, r1
  10a0e0:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
    char tname[RT_NAME_MAX];
    sys_sem_t tmpsem;

    RT_DEBUG_NOT_IN_INTERRUPT;

    rt_snprintf(tname, RT_NAME_MAX, "%s%d", SYS_LWIP_SEM_NAME, counter);
  10a0e4:	e30d3a44 	movw	r3, #55876	; 0xda44
  10a0e8:	e3403014 	movt	r3, #20
  10a0ec:	e1d330b0 	ldrh	r3, [r3]
  10a0f0:	e24b0010 	sub	r0, fp, #16
  10a0f4:	e58d3000 	str	r3, [sp]
  10a0f8:	e3053838 	movw	r3, #22584	; 0x5838
  10a0fc:	e3403014 	movt	r3, #20
  10a100:	e305283c 	movw	r2, #22588	; 0x583c
  10a104:	e3402014 	movt	r2, #20
  10a108:	e3a01008 	mov	r1, #8
  10a10c:	ebffe3ca 	bl	10303c <rt_snprintf>
    counter ++;
  10a110:	e30d3a44 	movw	r3, #55876	; 0xda44
  10a114:	e3403014 	movt	r3, #20
  10a118:	e1d330b0 	ldrh	r3, [r3]
  10a11c:	e2833001 	add	r3, r3, #1
  10a120:	e6ff2073 	uxth	r2, r3
  10a124:	e30d3a44 	movw	r3, #55876	; 0xda44
  10a128:	e3403014 	movt	r3, #20
  10a12c:	e1c320b0 	strh	r2, [r3]

    tmpsem = rt_sem_create(tname, count, RT_IPC_FLAG_FIFO);
  10a130:	e55b1019 	ldrb	r1, [fp, #-25]	; 0xffffffe7
  10a134:	e24b3010 	sub	r3, fp, #16
  10a138:	e3a02000 	mov	r2, #0
  10a13c:	e1a00003 	mov	r0, r3
  10a140:	ebffdba8 	bl	100fe8 <rt_sem_create>
  10a144:	e50b0008 	str	r0, [fp, #-8]
    if (tmpsem == RT_NULL)
  10a148:	e51b3008 	ldr	r3, [fp, #-8]
  10a14c:	e3530000 	cmp	r3, #0
  10a150:	1a000001 	bne	10a15c <sys_sem_new+0x90>
        return ERR_MEM;
  10a154:	e3e03000 	mvn	r3, #0
  10a158:	ea000003 	b	10a16c <sys_sem_new+0xa0>
    else
    {
        *sem = tmpsem;
  10a15c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10a160:	e51b2008 	ldr	r2, [fp, #-8]
  10a164:	e5832000 	str	r2, [r3]

        return ERR_OK;
  10a168:	e3a03000 	mov	r3, #0
    }
}
  10a16c:	e1a00003 	mov	r0, r3
  10a170:	e24bd004 	sub	sp, fp, #4
  10a174:	e8bd8800 	pop	{fp, pc}

0010a178 <sys_sem_free>:

/*
 * Deallocate a semaphore
 */
void sys_sem_free(sys_sem_t *sem)
{
  10a178:	e92d4800 	push	{fp, lr}
  10a17c:	e28db004 	add	fp, sp, #4
  10a180:	e24dd008 	sub	sp, sp, #8
  10a184:	e50b0008 	str	r0, [fp, #-8]
    RT_DEBUG_NOT_IN_INTERRUPT;
    rt_sem_delete(*sem);
  10a188:	e51b3008 	ldr	r3, [fp, #-8]
  10a18c:	e5933000 	ldr	r3, [r3]
  10a190:	e1a00003 	mov	r0, r3
  10a194:	ebffdbde 	bl	101114 <rt_sem_delete>
}
  10a198:	e320f000 	nop	{0}
  10a19c:	e24bd004 	sub	sp, fp, #4
  10a1a0:	e8bd8800 	pop	{fp, pc}

0010a1a4 <sys_sem_signal>:

/*
 * Signal a semaphore
 */
void sys_sem_signal(sys_sem_t *sem)
{
  10a1a4:	e92d4800 	push	{fp, lr}
  10a1a8:	e28db004 	add	fp, sp, #4
  10a1ac:	e24dd008 	sub	sp, sp, #8
  10a1b0:	e50b0008 	str	r0, [fp, #-8]
    rt_sem_release(*sem);
  10a1b4:	e51b3008 	ldr	r3, [fp, #-8]
  10a1b8:	e5933000 	ldr	r3, [r3]
  10a1bc:	e1a00003 	mov	r0, r3
  10a1c0:	ebffdc1f 	bl	101244 <rt_sem_release>
}
  10a1c4:	e320f000 	nop	{0}
  10a1c8:	e24bd004 	sub	sp, fp, #4
  10a1cc:	e8bd8800 	pop	{fp, pc}

0010a1d0 <sys_arch_sem_wait>:
 *         spent waiting for the semaphore to be signaled; If the semaphore isn't signaled
 *         within the specified time, it will return SYS_ARCH_TIMEOUT; If the thread doesn't
 *         wait for the semaphore, it will return zero
 */
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
  10a1d0:	e92d4800 	push	{fp, lr}
  10a1d4:	e28db004 	add	fp, sp, #4
  10a1d8:	e24dd018 	sub	sp, sp, #24
  10a1dc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10a1e0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    u32_t tick;

    RT_DEBUG_NOT_IN_INTERRUPT;

    /* get the begin tick */
    tick = rt_tick_get();
  10a1e4:	ebffdf1d 	bl	101e60 <rt_tick_get>
  10a1e8:	e50b000c 	str	r0, [fp, #-12]
    if (timeout == 0)
  10a1ec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10a1f0:	e3530000 	cmp	r3, #0
  10a1f4:	1a000002 	bne	10a204 <sys_arch_sem_wait+0x34>
        t = RT_WAITING_FOREVER;
  10a1f8:	e3e03000 	mvn	r3, #0
  10a1fc:	e50b3008 	str	r3, [fp, #-8]
  10a200:	ea000007 	b	10a224 <sys_arch_sem_wait+0x54>
    else
    {
        /* convert msecond to os tick */
        if (timeout < (1000/RT_TICK_PER_SECOND))
  10a204:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10a208:	e3530000 	cmp	r3, #0
  10a20c:	1a000002 	bne	10a21c <sys_arch_sem_wait+0x4c>
            t = 1;
  10a210:	e3a03001 	mov	r3, #1
  10a214:	e50b3008 	str	r3, [fp, #-8]
  10a218:	ea000001 	b	10a224 <sys_arch_sem_wait+0x54>
        else
            t = timeout / (1000/RT_TICK_PER_SECOND);
  10a21c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10a220:	e50b3008 	str	r3, [fp, #-8]
    }

    ret = rt_sem_take(*sem, t);
  10a224:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10a228:	e5933000 	ldr	r3, [r3]
  10a22c:	e51b1008 	ldr	r1, [fp, #-8]
  10a230:	e1a00003 	mov	r0, r3
  10a234:	ebffdc1e 	bl	1012b4 <rt_sem_take>
  10a238:	e50b0010 	str	r0, [fp, #-16]

    if (ret == -RT_ETIMEOUT)
  10a23c:	e51b3010 	ldr	r3, [fp, #-16]
  10a240:	e3730002 	cmn	r3, #2
  10a244:	1a000001 	bne	10a250 <sys_arch_sem_wait+0x80>
        return SYS_ARCH_TIMEOUT;
  10a248:	e3e03000 	mvn	r3, #0
  10a24c:	ea00000f 	b	10a290 <sys_arch_sem_wait+0xc0>
    else
    {
        if (ret == RT_EOK)
  10a250:	e51b3010 	ldr	r3, [fp, #-16]
  10a254:	e3530000 	cmp	r3, #0
  10a258:	1a000001 	bne	10a264 <sys_arch_sem_wait+0x94>
            ret = 1;
  10a25c:	e3a03001 	mov	r3, #1
  10a260:	e50b3010 	str	r3, [fp, #-16]
    }

    /* get elapse msecond */
    tick = rt_tick_get() - tick;
  10a264:	ebffdefd 	bl	101e60 <rt_tick_get>
  10a268:	e1a02000 	mov	r2, r0
  10a26c:	e51b300c 	ldr	r3, [fp, #-12]
  10a270:	e0423003 	sub	r3, r2, r3
  10a274:	e50b300c 	str	r3, [fp, #-12]

    /* convert tick to msecond */
    tick = tick * (1000 / RT_TICK_PER_SECOND);
    if (tick == 0)
  10a278:	e51b300c 	ldr	r3, [fp, #-12]
  10a27c:	e3530000 	cmp	r3, #0
  10a280:	1a000001 	bne	10a28c <sys_arch_sem_wait+0xbc>
        tick = 1;
  10a284:	e3a03001 	mov	r3, #1
  10a288:	e50b300c 	str	r3, [fp, #-12]

    return tick;
  10a28c:	e51b300c 	ldr	r3, [fp, #-12]
}
  10a290:	e1a00003 	mov	r0, r3
  10a294:	e24bd004 	sub	sp, fp, #4
  10a298:	e8bd8800 	pop	{fp, pc}

0010a29c <sys_sem_valid>:
#ifndef sys_sem_valid
/** Check if a semaphore is valid/allocated:
 *  return 1 for valid, 0 for invalid
 */
rt_ubase_t sys_sem_valid(sys_sem_t *sem)
{
  10a29c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10a2a0:	e28db000 	add	fp, sp, #0
  10a2a4:	e24dd00c 	sub	sp, sp, #12
  10a2a8:	e50b0008 	str	r0, [fp, #-8]
    return (rt_ubase_t)(*sem);
  10a2ac:	e51b3008 	ldr	r3, [fp, #-8]
  10a2b0:	e5933000 	ldr	r3, [r3]
}
  10a2b4:	e1a00003 	mov	r0, r3
  10a2b8:	e28bd000 	add	sp, fp, #0
  10a2bc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10a2c0:	e12fff1e 	bx	lr

0010a2c4 <sys_sem_set_invalid>:

#ifndef sys_sem_set_invalid
/** Set a semaphore invalid so that sys_sem_valid returns 0
 */
void sys_sem_set_invalid(sys_sem_t *sem)
{
  10a2c4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10a2c8:	e28db000 	add	fp, sp, #0
  10a2cc:	e24dd00c 	sub	sp, sp, #12
  10a2d0:	e50b0008 	str	r0, [fp, #-8]
    *sem = RT_NULL;
  10a2d4:	e51b3008 	ldr	r3, [fp, #-8]
  10a2d8:	e3a02000 	mov	r2, #0
  10a2dc:	e5832000 	str	r2, [r3]
}
  10a2e0:	e320f000 	nop	{0}
  10a2e4:	e28bd000 	add	sp, fp, #0
  10a2e8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10a2ec:	e12fff1e 	bx	lr

0010a2f0 <sys_mutex_new>:
/** Create a new mutex
 * @param mutex pointer to the mutex to create
 * @return a new mutex
 */
err_t sys_mutex_new(sys_mutex_t *mutex)
{
  10a2f0:	e92d4800 	push	{fp, lr}
  10a2f4:	e28db004 	add	fp, sp, #4
  10a2f8:	e24dd020 	sub	sp, sp, #32
  10a2fc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    char tname[RT_NAME_MAX];
    sys_mutex_t tmpmutex;

    RT_DEBUG_NOT_IN_INTERRUPT;

    rt_snprintf(tname, RT_NAME_MAX, "%s%d", SYS_LWIP_MUTEX_NAME, counter);
  10a300:	e30d3a46 	movw	r3, #55878	; 0xda46
  10a304:	e3403014 	movt	r3, #20
  10a308:	e1d330b0 	ldrh	r3, [r3]
  10a30c:	e24b0010 	sub	r0, fp, #16
  10a310:	e58d3000 	str	r3, [sp]
  10a314:	e3053844 	movw	r3, #22596	; 0x5844
  10a318:	e3403014 	movt	r3, #20
  10a31c:	e305283c 	movw	r2, #22588	; 0x583c
  10a320:	e3402014 	movt	r2, #20
  10a324:	e3a01008 	mov	r1, #8
  10a328:	ebffe343 	bl	10303c <rt_snprintf>
    counter ++;
  10a32c:	e30d3a46 	movw	r3, #55878	; 0xda46
  10a330:	e3403014 	movt	r3, #20
  10a334:	e1d330b0 	ldrh	r3, [r3]
  10a338:	e2833001 	add	r3, r3, #1
  10a33c:	e6ff2073 	uxth	r2, r3
  10a340:	e30d3a46 	movw	r3, #55878	; 0xda46
  10a344:	e3403014 	movt	r3, #20
  10a348:	e1c320b0 	strh	r2, [r3]

    tmpmutex = rt_mutex_create(tname, RT_IPC_FLAG_FIFO);
  10a34c:	e24b3010 	sub	r3, fp, #16
  10a350:	e3a01000 	mov	r1, #0
  10a354:	e1a00003 	mov	r0, r3
  10a358:	ebffda52 	bl	100ca8 <rt_mutex_create>
  10a35c:	e50b0008 	str	r0, [fp, #-8]
    if (tmpmutex == RT_NULL)
  10a360:	e51b3008 	ldr	r3, [fp, #-8]
  10a364:	e3530000 	cmp	r3, #0
  10a368:	1a000001 	bne	10a374 <sys_mutex_new+0x84>
        return ERR_MEM;
  10a36c:	e3e03000 	mvn	r3, #0
  10a370:	ea000003 	b	10a384 <sys_mutex_new+0x94>
    else
    {
        *mutex = tmpmutex;
  10a374:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10a378:	e51b2008 	ldr	r2, [fp, #-8]
  10a37c:	e5832000 	str	r2, [r3]

        return ERR_OK;
  10a380:	e3a03000 	mov	r3, #0
    }
}
  10a384:	e1a00003 	mov	r0, r3
  10a388:	e24bd004 	sub	sp, fp, #4
  10a38c:	e8bd8800 	pop	{fp, pc}

0010a390 <sys_mutex_lock>:

/** Lock a mutex
 * @param mutex the mutex to lock
 */
void sys_mutex_lock(sys_mutex_t *mutex)
{
  10a390:	e92d4800 	push	{fp, lr}
  10a394:	e28db004 	add	fp, sp, #4
  10a398:	e24dd008 	sub	sp, sp, #8
  10a39c:	e50b0008 	str	r0, [fp, #-8]
    RT_DEBUG_NOT_IN_INTERRUPT;
    rt_mutex_take(*mutex, RT_WAITING_FOREVER);
  10a3a0:	e51b3008 	ldr	r3, [fp, #-8]
  10a3a4:	e5933000 	ldr	r3, [r3]
  10a3a8:	e3e01000 	mvn	r1, #0
  10a3ac:	e1a00003 	mov	r0, r3
  10a3b0:	ebffdad2 	bl	100f00 <rt_mutex_take>

    return;
  10a3b4:	e320f000 	nop	{0}
}
  10a3b8:	e24bd004 	sub	sp, fp, #4
  10a3bc:	e8bd8800 	pop	{fp, pc}

0010a3c0 <sys_mutex_unlock>:

/** Unlock a mutex
 * @param mutex the mutex to unlock
 */
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  10a3c0:	e92d4800 	push	{fp, lr}
  10a3c4:	e28db004 	add	fp, sp, #4
  10a3c8:	e24dd008 	sub	sp, sp, #8
  10a3cc:	e50b0008 	str	r0, [fp, #-8]
    rt_mutex_release(*mutex);
  10a3d0:	e51b3008 	ldr	r3, [fp, #-8]
  10a3d4:	e5933000 	ldr	r3, [r3]
  10a3d8:	e1a00003 	mov	r0, r3
  10a3dc:	ebffdae5 	bl	100f78 <rt_mutex_release>
}
  10a3e0:	e320f000 	nop	{0}
  10a3e4:	e24bd004 	sub	sp, fp, #4
  10a3e8:	e8bd8800 	pop	{fp, pc}

0010a3ec <sys_mutex_free>:

/** Delete a semaphore
 * @param mutex the mutex to delete
 */
void sys_mutex_free(sys_mutex_t *mutex)
{
  10a3ec:	e92d4800 	push	{fp, lr}
  10a3f0:	e28db004 	add	fp, sp, #4
  10a3f4:	e24dd008 	sub	sp, sp, #8
  10a3f8:	e50b0008 	str	r0, [fp, #-8]
    RT_DEBUG_NOT_IN_INTERRUPT;

    rt_mutex_delete(*mutex);
  10a3fc:	e51b3008 	ldr	r3, [fp, #-8]
  10a400:	e5933000 	ldr	r3, [r3]
  10a404:	e1a00003 	mov	r0, r3
  10a408:	ebffda70 	bl	100dd0 <rt_mutex_delete>
}
  10a40c:	e320f000 	nop	{0}
  10a410:	e24bd004 	sub	sp, fp, #4
  10a414:	e8bd8800 	pop	{fp, pc}

0010a418 <sys_mutex_valid>:
#ifndef sys_mutex_valid
/** Check if a mutex is valid/allocated:
 *  return 1 for valid, 0 for invalid
 */
rt_base_t sys_mutex_valid(sys_mutex_t *mutex)
{
  10a418:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10a41c:	e28db000 	add	fp, sp, #0
  10a420:	e24dd00c 	sub	sp, sp, #12
  10a424:	e50b0008 	str	r0, [fp, #-8]
    return (rt_base_t)(*mutex);
  10a428:	e51b3008 	ldr	r3, [fp, #-8]
  10a42c:	e5933000 	ldr	r3, [r3]
}
  10a430:	e1a00003 	mov	r0, r3
  10a434:	e28bd000 	add	sp, fp, #0
  10a438:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10a43c:	e12fff1e 	bx	lr

0010a440 <sys_mutex_set_invalid>:

#ifndef sys_mutex_set_invalid
/** Set a mutex invalid so that sys_mutex_valid returns 0
 */
void sys_mutex_set_invalid(sys_mutex_t *mutex)
{
  10a440:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10a444:	e28db000 	add	fp, sp, #0
  10a448:	e24dd00c 	sub	sp, sp, #12
  10a44c:	e50b0008 	str	r0, [fp, #-8]
    *mutex = RT_NULL;
  10a450:	e51b3008 	ldr	r3, [fp, #-8]
  10a454:	e3a02000 	mov	r2, #0
  10a458:	e5832000 	str	r2, [r3]
}
  10a45c:	e320f000 	nop	{0}
  10a460:	e28bd000 	add	sp, fp, #0
  10a464:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10a468:	e12fff1e 	bx	lr

0010a46c <list_insert>:
    struct mbbuf_list *next;
};

struct mbbuf_list head = {0, 0};
static void list_insert(rt_mailbox_buff_t new_mbbuf)
{
  10a46c:	e92d4800 	push	{fp, lr}
  10a470:	e28db004 	add	fp, sp, #4
  10a474:	e24dd010 	sub	sp, sp, #16
  10a478:	e50b0010 	str	r0, [fp, #-16]
    struct mbbuf_list *cur = &head;
  10a47c:	e30d3a38 	movw	r3, #55864	; 0xda38
  10a480:	e3403014 	movt	r3, #20
  10a484:	e50b3008 	str	r3, [fp, #-8]
    while (cur->next)
  10a488:	ea000002 	b	10a498 <list_insert+0x2c>
    {
        cur = cur->next;
  10a48c:	e51b3008 	ldr	r3, [fp, #-8]
  10a490:	e5933004 	ldr	r3, [r3, #4]
  10a494:	e50b3008 	str	r3, [fp, #-8]
    while (cur->next)
  10a498:	e51b3008 	ldr	r3, [fp, #-8]
  10a49c:	e5933004 	ldr	r3, [r3, #4]
  10a4a0:	e3530000 	cmp	r3, #0
  10a4a4:	1afffff8 	bne	10a48c <list_insert+0x20>
    }

    struct mbbuf_list *new_node = (struct mbbuf_list *)malloc(sizeof(struct mbbuf_list));
  10a4a8:	e3a00008 	mov	r0, #8
  10a4ac:	eb00c946 	bl	13c9cc <malloc>
  10a4b0:	e1a03000 	mov	r3, r0
  10a4b4:	e50b300c 	str	r3, [fp, #-12]
    cur->next = new_node;
  10a4b8:	e51b3008 	ldr	r3, [fp, #-8]
  10a4bc:	e51b200c 	ldr	r2, [fp, #-12]
  10a4c0:	e5832004 	str	r2, [r3, #4]
    new_node->next = RT_NULL;
  10a4c4:	e51b300c 	ldr	r3, [fp, #-12]
  10a4c8:	e3a02000 	mov	r2, #0
  10a4cc:	e5832004 	str	r2, [r3, #4]
    new_node->mbbuf = new_mbbuf;
  10a4d0:	e51b300c 	ldr	r3, [fp, #-12]
  10a4d4:	e51b2010 	ldr	r2, [fp, #-16]
  10a4d8:	e5832000 	str	r2, [r3]
}
  10a4dc:	e320f000 	nop	{0}
  10a4e0:	e24bd004 	sub	sp, fp, #4
  10a4e4:	e8bd8800 	pop	{fp, pc}

0010a4e8 <list_del>:

static void list_del(rt_mailbox_buff_t del_mbbuf)
{
  10a4e8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10a4ec:	e28db000 	add	fp, sp, #0
  10a4f0:	e24dd014 	sub	sp, sp, #20
  10a4f4:	e50b0010 	str	r0, [fp, #-16]
    struct mbbuf_list *cur = &head;
  10a4f8:	e30d3a38 	movw	r3, #55864	; 0xda38
  10a4fc:	e3403014 	movt	r3, #20
  10a500:	e50b3008 	str	r3, [fp, #-8]
    while (cur->next)
  10a504:	ea00000e 	b	10a544 <list_del+0x5c>
    {
        if (cur->next->mbbuf == del_mbbuf)
  10a508:	e51b3008 	ldr	r3, [fp, #-8]
  10a50c:	e5933004 	ldr	r3, [r3, #4]
  10a510:	e5933000 	ldr	r3, [r3]
  10a514:	e51b2010 	ldr	r2, [fp, #-16]
  10a518:	e1520003 	cmp	r2, r3
  10a51c:	1a000005 	bne	10a538 <list_del+0x50>
        {
            cur->next = cur->next->next;
  10a520:	e51b3008 	ldr	r3, [fp, #-8]
  10a524:	e5933004 	ldr	r3, [r3, #4]
  10a528:	e5932004 	ldr	r2, [r3, #4]
  10a52c:	e51b3008 	ldr	r3, [fp, #-8]
  10a530:	e5832004 	str	r2, [r3, #4]
            return;
  10a534:	ea000006 	b	10a554 <list_del+0x6c>
        }
        cur = cur->next;
  10a538:	e51b3008 	ldr	r3, [fp, #-8]
  10a53c:	e5933004 	ldr	r3, [r3, #4]
  10a540:	e50b3008 	str	r3, [fp, #-8]
    while (cur->next)
  10a544:	e51b3008 	ldr	r3, [fp, #-8]
  10a548:	e5933004 	ldr	r3, [r3, #4]
  10a54c:	e3530000 	cmp	r3, #0
  10a550:	1affffec 	bne	10a508 <list_del+0x20>
    }
}
  10a554:	e28bd000 	add	sp, fp, #0
  10a558:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10a55c:	e12fff1e 	bx	lr

0010a560 <tcpip_mb_timer_entry>:

void tcpip_mb_timer_entry()
{
  10a560:	e92d4800 	push	{fp, lr}
  10a564:	e28db004 	add	fp, sp, #4
  10a568:	e24dd008 	sub	sp, sp, #8
    while (1)
    {
        rt_thread_mdelay(INPUT_BUF_TIMEOUT);
  10a56c:	e3a00001 	mov	r0, #1
  10a570:	ebffde41 	bl	101e7c <rt_thread_mdelay>
        struct mbbuf_list *cur = &head;
  10a574:	e30d3a38 	movw	r3, #55864	; 0xda38
  10a578:	e3403014 	movt	r3, #20
  10a57c:	e50b3008 	str	r3, [fp, #-8]
        while (cur->next)
  10a580:	ea000012 	b	10a5d0 <tcpip_mb_timer_entry+0x70>
        {
            if (!buffer_empty(cur->next->mbbuf->cb))
  10a584:	e51b3008 	ldr	r3, [fp, #-8]
  10a588:	e5933004 	ldr	r3, [r3, #4]
  10a58c:	e5933000 	ldr	r3, [r3]
  10a590:	e5933004 	ldr	r3, [r3, #4]
  10a594:	e1a00003 	mov	r0, r3
  10a598:	eb0001f8 	bl	10ad80 <buffer_empty>
  10a59c:	e1a03000 	mov	r3, r0
  10a5a0:	e3530000 	cmp	r3, #0
  10a5a4:	1a000006 	bne	10a5c4 <tcpip_mb_timer_entry+0x64>
            {
                rt_mb_send(cur->next->mbbuf->mb, INPUT_NOTIFICATION);
  10a5a8:	e51b3008 	ldr	r3, [fp, #-8]
  10a5ac:	e5933004 	ldr	r3, [r3, #4]
  10a5b0:	e5933000 	ldr	r3, [r3]
  10a5b4:	e5933000 	ldr	r3, [r3]
  10a5b8:	e3a01000 	mov	r1, #0
  10a5bc:	e1a00003 	mov	r0, r3
  10a5c0:	ebffdc0f 	bl	101604 <rt_mb_send>
            }
            
            cur = cur->next;
  10a5c4:	e51b3008 	ldr	r3, [fp, #-8]
  10a5c8:	e5933004 	ldr	r3, [r3, #4]
  10a5cc:	e50b3008 	str	r3, [fp, #-8]
        while (cur->next)
  10a5d0:	e51b3008 	ldr	r3, [fp, #-8]
  10a5d4:	e5933004 	ldr	r3, [r3, #4]
  10a5d8:	e3530000 	cmp	r3, #0
  10a5dc:	1affffe8 	bne	10a584 <tcpip_mb_timer_entry+0x24>
    {
  10a5e0:	eaffffe1 	b	10a56c <tcpip_mb_timer_entry+0xc>

0010a5e4 <sys_mbox_new>:
 * Create an empty mailbox for maximum "size" elements
 *
 * @return the operation status, ERR_OK on OK; others on error
 */
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
  10a5e4:	e92d4810 	push	{r4, fp, lr}
  10a5e8:	e28db008 	add	fp, sp, #8
  10a5ec:	e24dd01c 	sub	sp, sp, #28
  10a5f0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10a5f4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    static unsigned short counter = 0;
    char tname[RT_NAME_MAX];

    RT_DEBUG_NOT_IN_INTERRUPT;

    rt_snprintf(tname, RT_NAME_MAX, "%s%d", SYS_LWIP_MBOX_NAME, counter);
  10a5f8:	e30d3a48 	movw	r3, #55880	; 0xda48
  10a5fc:	e3403014 	movt	r3, #20
  10a600:	e1d330b0 	ldrh	r3, [r3]
  10a604:	e24b0014 	sub	r0, fp, #20
  10a608:	e58d3000 	str	r3, [sp]
  10a60c:	e3053848 	movw	r3, #22600	; 0x5848
  10a610:	e3403014 	movt	r3, #20
  10a614:	e305283c 	movw	r2, #22588	; 0x583c
  10a618:	e3402014 	movt	r2, #20
  10a61c:	e3a01008 	mov	r1, #8
  10a620:	ebffe285 	bl	10303c <rt_snprintf>
    counter++;
  10a624:	e30d3a48 	movw	r3, #55880	; 0xda48
  10a628:	e3403014 	movt	r3, #20
  10a62c:	e1d330b0 	ldrh	r3, [r3]
  10a630:	e2833001 	add	r3, r3, #1
  10a634:	e6ff2073 	uxth	r2, r3
  10a638:	e30d3a48 	movw	r3, #55880	; 0xda48
  10a63c:	e3403014 	movt	r3, #20
  10a640:	e1c320b0 	strh	r2, [r3]

    *mbox = malloc(sizeof(struct rt_mailbox_buff));
  10a644:	e3a00008 	mov	r0, #8
  10a648:	eb00c8df 	bl	13c9cc <malloc>
  10a64c:	e1a03000 	mov	r3, r0
  10a650:	e1a02003 	mov	r2, r3
  10a654:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10a658:	e5832000 	str	r2, [r3]
    (*mbox)->cb = buffer_new(INPUT_BUF_LEN);
  10a65c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10a660:	e5934000 	ldr	r4, [r3]
  10a664:	e3a00080 	mov	r0, #128	; 0x80
  10a668:	eb00017f 	bl	10ac6c <buffer_new>
  10a66c:	e1a03000 	mov	r3, r0
  10a670:	e5843004 	str	r3, [r4, #4]
    (*mbox)->mb = rt_mb_create(tname, size, RT_IPC_FLAG_FIFO);
  10a674:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  10a678:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10a67c:	e5934000 	ldr	r4, [r3]
  10a680:	e24b3014 	sub	r3, fp, #20
  10a684:	e3a02000 	mov	r2, #0
  10a688:	e1a00003 	mov	r0, r3
  10a68c:	ebffdb26 	bl	10132c <rt_mb_create>
  10a690:	e1a03000 	mov	r3, r0
  10a694:	e5843000 	str	r3, [r4]

    if (!(*mbox) || !(*mbox)->cb || !(*mbox)->cb)
  10a698:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10a69c:	e5933000 	ldr	r3, [r3]
  10a6a0:	e3530000 	cmp	r3, #0
  10a6a4:	0a000009 	beq	10a6d0 <sys_mbox_new+0xec>
  10a6a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10a6ac:	e5933000 	ldr	r3, [r3]
  10a6b0:	e5933004 	ldr	r3, [r3, #4]
  10a6b4:	e3530000 	cmp	r3, #0
  10a6b8:	0a000004 	beq	10a6d0 <sys_mbox_new+0xec>
  10a6bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10a6c0:	e5933000 	ldr	r3, [r3]
  10a6c4:	e5933004 	ldr	r3, [r3, #4]
  10a6c8:	e3530000 	cmp	r3, #0
  10a6cc:	1a000001 	bne	10a6d8 <sys_mbox_new+0xf4>
    {
        return ERR_MEM;
  10a6d0:	e3e03000 	mvn	r3, #0
  10a6d4:	ea000004 	b	10a6ec <sys_mbox_new+0x108>
    }

    list_insert(*mbox);
  10a6d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10a6dc:	e5933000 	ldr	r3, [r3]
  10a6e0:	e1a00003 	mov	r0, r3
  10a6e4:	ebffff60 	bl	10a46c <list_insert>
    return ERR_OK;
  10a6e8:	e3a03000 	mov	r3, #0
}
  10a6ec:	e1a00003 	mov	r0, r3
  10a6f0:	e24bd008 	sub	sp, fp, #8
  10a6f4:	e8bd8810 	pop	{r4, fp, pc}

0010a6f8 <sys_mbox_free>:

/*
 * Deallocate a mailbox
 */
void sys_mbox_free(sys_mbox_t *mbox)
{
  10a6f8:	e92d4800 	push	{fp, lr}
  10a6fc:	e28db004 	add	fp, sp, #4
  10a700:	e24dd008 	sub	sp, sp, #8
  10a704:	e50b0008 	str	r0, [fp, #-8]
    RT_DEBUG_NOT_IN_INTERRUPT;

    rt_mb_delete((*mbox)->mb);
  10a708:	e51b3008 	ldr	r3, [fp, #-8]
  10a70c:	e5933000 	ldr	r3, [r3]
  10a710:	e5933000 	ldr	r3, [r3]
  10a714:	e1a00003 	mov	r0, r3
  10a718:	ebffdb4e 	bl	101458 <rt_mb_delete>
    buffer_del((*mbox)->cb);
  10a71c:	e51b3008 	ldr	r3, [fp, #-8]
  10a720:	e5933000 	ldr	r3, [r3]
  10a724:	e5933004 	ldr	r3, [r3, #4]
  10a728:	e1a00003 	mov	r0, r3
  10a72c:	eb000170 	bl	10acf4 <buffer_del>
    list_del(*mbox);
  10a730:	e51b3008 	ldr	r3, [fp, #-8]
  10a734:	e5933000 	ldr	r3, [r3]
  10a738:	e1a00003 	mov	r0, r3
  10a73c:	ebffff69 	bl	10a4e8 <list_del>
    free(*mbox);
  10a740:	e51b3008 	ldr	r3, [fp, #-8]
  10a744:	e5933000 	ldr	r3, [r3]
  10a748:	e1a00003 	mov	r0, r3
  10a74c:	eb00ca5a 	bl	13d0bc <free>

    return;
  10a750:	e320f000 	nop	{0}
}
  10a754:	e24bd004 	sub	sp, fp, #4
  10a758:	e8bd8800 	pop	{fp, pc}

0010a75c <post_msg>:

rt_err_t post_msg(sys_mbox_t *mbox, void *msg)
{
  10a75c:	e92d4800 	push	{fp, lr}
  10a760:	e28db004 	add	fp, sp, #4
  10a764:	e24dd008 	sub	sp, sp, #8
  10a768:	e50b0008 	str	r0, [fp, #-8]
  10a76c:	e50b100c 	str	r1, [fp, #-12]
    while (buffer_enqueue((*mbox)->cb, (rt_ubase_t)msg) == -1)
  10a770:	ea000005 	b	10a78c <post_msg+0x30>
    {
        rt_mb_send((*mbox)->mb, INPUT_NOTIFICATION);
  10a774:	e51b3008 	ldr	r3, [fp, #-8]
  10a778:	e5933000 	ldr	r3, [r3]
  10a77c:	e5933000 	ldr	r3, [r3]
  10a780:	e3a01000 	mov	r1, #0
  10a784:	e1a00003 	mov	r0, r3
  10a788:	ebffdb9d 	bl	101604 <rt_mb_send>
    while (buffer_enqueue((*mbox)->cb, (rt_ubase_t)msg) == -1)
  10a78c:	e51b3008 	ldr	r3, [fp, #-8]
  10a790:	e5933000 	ldr	r3, [r3]
  10a794:	e5933004 	ldr	r3, [r3, #4]
  10a798:	e51b200c 	ldr	r2, [fp, #-12]
  10a79c:	e1a01002 	mov	r1, r2
  10a7a0:	e1a00003 	mov	r0, r3
  10a7a4:	eb000185 	bl	10adc0 <buffer_enqueue>
  10a7a8:	e1a03000 	mov	r3, r0
  10a7ac:	e3730001 	cmn	r3, #1
  10a7b0:	0affffef 	beq	10a774 <post_msg+0x18>
    }

    return ERR_OK;
  10a7b4:	e3a03000 	mov	r3, #0
}
  10a7b8:	e1a00003 	mov	r0, r3
  10a7bc:	e24bd004 	sub	sp, fp, #4
  10a7c0:	e8bd8800 	pop	{fp, pc}

0010a7c4 <fetch_msg>:

rt_err_t fetch_msg(sys_mbox_t *mbox, void **msg, u32_t t)
{
  10a7c4:	e92d4800 	push	{fp, lr}
  10a7c8:	e28db004 	add	fp, sp, #4
  10a7cc:	e24dd018 	sub	sp, sp, #24
  10a7d0:	e50b0010 	str	r0, [fp, #-16]
  10a7d4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10a7d8:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    rt_err_t ret;
    do
    {
        ret = buffer_dequeue((*mbox)->cb, (rt_ubase_t*)msg);
  10a7dc:	e51b3010 	ldr	r3, [fp, #-16]
  10a7e0:	e5933000 	ldr	r3, [r3]
  10a7e4:	e5933004 	ldr	r3, [r3, #4]
  10a7e8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10a7ec:	e1a00003 	mov	r0, r3
  10a7f0:	eb000196 	bl	10ae50 <buffer_dequeue>
  10a7f4:	e50b0008 	str	r0, [fp, #-8]
        if (ret == 0)
  10a7f8:	e51b3008 	ldr	r3, [fp, #-8]
  10a7fc:	e3530000 	cmp	r3, #0
  10a800:	1a000001 	bne	10a80c <fetch_msg+0x48>
        {
            return RT_EOK;
  10a804:	e3a03000 	mov	r3, #0
  10a808:	ea00000c 	b	10a840 <fetch_msg+0x7c>
        } 
        ret = rt_mb_recv((*mbox)->mb, (rt_ubase_t *)msg, t);
  10a80c:	e51b3010 	ldr	r3, [fp, #-16]
  10a810:	e5933000 	ldr	r3, [r3]
  10a814:	e5933000 	ldr	r3, [r3]
  10a818:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10a81c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10a820:	e1a00003 	mov	r0, r3
  10a824:	ebffdb94 	bl	10167c <rt_mb_recv>
  10a828:	e50b0008 	str	r0, [fp, #-8]
    } while (*msg == (void*)INPUT_NOTIFICATION);
  10a82c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10a830:	e5933000 	ldr	r3, [r3]
  10a834:	e3530000 	cmp	r3, #0
  10a838:	0affffe7 	beq	10a7dc <fetch_msg+0x18>

    return ret;
  10a83c:	e51b3008 	ldr	r3, [fp, #-8]
}
  10a840:	e1a00003 	mov	r0, r3
  10a844:	e24bd004 	sub	sp, fp, #4
  10a848:	e8bd8800 	pop	{fp, pc}

0010a84c <sys_mbox_post>:
 * -> blocks if full, only used from tasks not from ISR
 * @param mbox mbox to posts the message
 * @param msg message to post (ATTENTION: can be NULL)
 */
void sys_mbox_post(sys_mbox_t *mbox, void *msg)
{
  10a84c:	e92d4800 	push	{fp, lr}
  10a850:	e28db004 	add	fp, sp, #4
  10a854:	e24dd008 	sub	sp, sp, #8
  10a858:	e50b0008 	str	r0, [fp, #-8]
  10a85c:	e50b100c 	str	r1, [fp, #-12]
    RT_DEBUG_NOT_IN_INTERRUPT;

    post_msg(mbox, msg);
  10a860:	e51b100c 	ldr	r1, [fp, #-12]
  10a864:	e51b0008 	ldr	r0, [fp, #-8]
  10a868:	ebffffbb 	bl	10a75c <post_msg>

    return;
  10a86c:	e320f000 	nop	{0}
}
  10a870:	e24bd004 	sub	sp, fp, #4
  10a874:	e8bd8800 	pop	{fp, pc}

0010a878 <sys_mbox_trypost>:
 *
 * @return return ERR_OK if the "msg" is posted, ERR_MEM if the mailbox is full
 */

err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
  10a878:	e92d4800 	push	{fp, lr}
  10a87c:	e28db004 	add	fp, sp, #4
  10a880:	e24dd008 	sub	sp, sp, #8
  10a884:	e50b0008 	str	r0, [fp, #-8]
  10a888:	e50b100c 	str	r1, [fp, #-12]
    return post_msg(mbox, msg);
  10a88c:	e51b100c 	ldr	r1, [fp, #-12]
  10a890:	e51b0008 	ldr	r0, [fp, #-8]
  10a894:	ebffffb0 	bl	10a75c <post_msg>
  10a898:	e1a03000 	mov	r3, r0
  10a89c:	e6af3073 	sxtb	r3, r3
}
  10a8a0:	e1a00003 	mov	r0, r3
  10a8a4:	e24bd004 	sub	sp, fp, #4
  10a8a8:	e8bd8800 	pop	{fp, pc}

0010a8ac <sys_arch_mbox_fetch>:
 * @return time (in milliseconds) waited for a message, may be 0 if not waited
           or SYS_ARCH_TIMEOUT on timeout
 *         The returned time has to be accurate to prevent timer jitter!
 */
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
  10a8ac:	e92d4800 	push	{fp, lr}
  10a8b0:	e28db004 	add	fp, sp, #4
  10a8b4:	e24dd020 	sub	sp, sp, #32
  10a8b8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10a8bc:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  10a8c0:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
    u32_t tick;

    RT_DEBUG_NOT_IN_INTERRUPT;

    /* get the begin tick */
    tick = rt_tick_get();
  10a8c4:	ebffdd65 	bl	101e60 <rt_tick_get>
  10a8c8:	e50b000c 	str	r0, [fp, #-12]

    if(timeout == 0)
  10a8cc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10a8d0:	e3530000 	cmp	r3, #0
  10a8d4:	1a000002 	bne	10a8e4 <sys_arch_mbox_fetch+0x38>
        t = RT_WAITING_FOREVER;
  10a8d8:	e3e03000 	mvn	r3, #0
  10a8dc:	e50b3008 	str	r3, [fp, #-8]
  10a8e0:	ea000007 	b	10a904 <sys_arch_mbox_fetch+0x58>
    else
    {
        /* convirt msecond to os tick */
        if (timeout < (1000/RT_TICK_PER_SECOND))
  10a8e4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10a8e8:	e3530000 	cmp	r3, #0
  10a8ec:	1a000002 	bne	10a8fc <sys_arch_mbox_fetch+0x50>
            t = 1;
  10a8f0:	e3a03001 	mov	r3, #1
  10a8f4:	e50b3008 	str	r3, [fp, #-8]
  10a8f8:	ea000001 	b	10a904 <sys_arch_mbox_fetch+0x58>
        else
            t = timeout / (1000/RT_TICK_PER_SECOND);
  10a8fc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10a900:	e50b3008 	str	r3, [fp, #-8]
    }

    ret = fetch_msg(mbox, msg, t);
  10a904:	e51b3008 	ldr	r3, [fp, #-8]
  10a908:	e1a02003 	mov	r2, r3
  10a90c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  10a910:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  10a914:	ebffffaa 	bl	10a7c4 <fetch_msg>
  10a918:	e50b0010 	str	r0, [fp, #-16]

    if(ret == -RT_ETIMEOUT)
  10a91c:	e51b3010 	ldr	r3, [fp, #-16]
  10a920:	e3730002 	cmn	r3, #2
  10a924:	1a000001 	bne	10a930 <sys_arch_mbox_fetch+0x84>
        return SYS_ARCH_TIMEOUT;
  10a928:	e3e03000 	mvn	r3, #0
  10a92c:	ea000014 	b	10a984 <sys_arch_mbox_fetch+0xd8>
    else
    {
        LWIP_ASSERT("rt_mb_recv returned with error!", ret == RT_EOK);
  10a930:	e51b3010 	ldr	r3, [fp, #-16]
  10a934:	e3530000 	cmp	r3, #0
  10a938:	0a000006 	beq	10a958 <sys_arch_mbox_fetch+0xac>
  10a93c:	e3050850 	movw	r0, #22608	; 0x5850
  10a940:	e3400014 	movt	r0, #20
  10a944:	ebffe1f2 	bl	103114 <rt_kprintf>
  10a948:	e3a01f82 	mov	r1, #520	; 0x208
  10a94c:	e30507f8 	movw	r0, #22520	; 0x57f8
  10a950:	e3400014 	movt	r0, #20
  10a954:	eb00006e 	bl	10ab14 <sys_arch_assert>
    }

    /* get elapse msecond */
    tick = rt_tick_get() - tick;
  10a958:	ebffdd40 	bl	101e60 <rt_tick_get>
  10a95c:	e1a02000 	mov	r2, r0
  10a960:	e51b300c 	ldr	r3, [fp, #-12]
  10a964:	e0423003 	sub	r3, r2, r3
  10a968:	e50b300c 	str	r3, [fp, #-12]

    /* convert tick to msecond */
    tick = tick * (1000 / RT_TICK_PER_SECOND);
    if (tick == 0)
  10a96c:	e51b300c 	ldr	r3, [fp, #-12]
  10a970:	e3530000 	cmp	r3, #0
  10a974:	1a000001 	bne	10a980 <sys_arch_mbox_fetch+0xd4>
        tick = 1;
  10a978:	e3a03001 	mov	r3, #1
  10a97c:	e50b300c 	str	r3, [fp, #-12]

    return tick;
  10a980:	e51b300c 	ldr	r3, [fp, #-12]
}
  10a984:	e1a00003 	mov	r0, r3
  10a988:	e24bd004 	sub	sp, fp, #4
  10a98c:	e8bd8800 	pop	{fp, pc}

0010a990 <sys_arch_mbox_tryfetch>:
 * @param timeout maximum time (in milliseconds) to wait for a message
 * @return 0 (milliseconds) if a message has been received
 *         or SYS_MBOX_EMPTY if the mailbox is empty
 */
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
  10a990:	e92d4800 	push	{fp, lr}
  10a994:	e28db004 	add	fp, sp, #4
  10a998:	e24dd010 	sub	sp, sp, #16
  10a99c:	e50b0010 	str	r0, [fp, #-16]
  10a9a0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int ret;

    ret = fetch_msg(mbox, msg, 0);
  10a9a4:	e3a02000 	mov	r2, #0
  10a9a8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10a9ac:	e51b0010 	ldr	r0, [fp, #-16]
  10a9b0:	ebffff83 	bl	10a7c4 <fetch_msg>
  10a9b4:	e50b0008 	str	r0, [fp, #-8]
       
    if(ret == -RT_ETIMEOUT)
  10a9b8:	e51b3008 	ldr	r3, [fp, #-8]
  10a9bc:	e3730002 	cmn	r3, #2
  10a9c0:	1a000001 	bne	10a9cc <sys_arch_mbox_tryfetch+0x3c>
        return SYS_ARCH_TIMEOUT;
  10a9c4:	e3e03000 	mvn	r3, #0
  10a9c8:	ea000005 	b	10a9e4 <sys_arch_mbox_tryfetch+0x54>
    else
    {
        if (ret == RT_EOK)
  10a9cc:	e51b3008 	ldr	r3, [fp, #-8]
  10a9d0:	e3530000 	cmp	r3, #0
  10a9d4:	1a000001 	bne	10a9e0 <sys_arch_mbox_tryfetch+0x50>
            ret = 1;
  10a9d8:	e3a03001 	mov	r3, #1
  10a9dc:	e50b3008 	str	r3, [fp, #-8]
    }

    return ret;
  10a9e0:	e51b3008 	ldr	r3, [fp, #-8]
}
  10a9e4:	e1a00003 	mov	r0, r3
  10a9e8:	e24bd004 	sub	sp, fp, #4
  10a9ec:	e8bd8800 	pop	{fp, pc}

0010a9f0 <sys_mbox_valid>:
#ifndef sys_mbox_valid
/** Check if an mbox is valid/allocated:
 *  return 1 for valid, 0 for invalid
 */
rt_base_t sys_mbox_valid(sys_mbox_t *mbox)
{
  10a9f0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10a9f4:	e28db000 	add	fp, sp, #0
  10a9f8:	e24dd00c 	sub	sp, sp, #12
  10a9fc:	e50b0008 	str	r0, [fp, #-8]
    return (rt_base_t)(*mbox);
  10aa00:	e51b3008 	ldr	r3, [fp, #-8]
  10aa04:	e5933000 	ldr	r3, [r3]
}
  10aa08:	e1a00003 	mov	r0, r3
  10aa0c:	e28bd000 	add	sp, fp, #0
  10aa10:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10aa14:	e12fff1e 	bx	lr

0010aa18 <sys_mbox_set_invalid>:

#ifndef sys_mbox_set_invalid
/** Set an mbox invalid so that sys_mbox_valid returns 0
 */
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
  10aa18:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10aa1c:	e28db000 	add	fp, sp, #0
  10aa20:	e24dd00c 	sub	sp, sp, #12
  10aa24:	e50b0008 	str	r0, [fp, #-8]
    *mbox = RT_NULL;
  10aa28:	e51b3008 	ldr	r3, [fp, #-8]
  10aa2c:	e3a02000 	mov	r2, #0
  10aa30:	e5832000 	str	r2, [r3]
}
  10aa34:	e320f000 	nop	{0}
  10aa38:	e28bd000 	add	sp, fp, #0
  10aa3c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10aa40:	e12fff1e 	bx	lr

0010aa44 <sys_thread_new>:
sys_thread_t sys_thread_new(const char    *name,
                            lwip_thread_fn thread,
                            void          *arg,
                            int            stacksize,
                            int            prio)
{
  10aa44:	e92d4800 	push	{fp, lr}
  10aa48:	e28db004 	add	fp, sp, #4
  10aa4c:	e24dd020 	sub	sp, sp, #32
  10aa50:	e50b0010 	str	r0, [fp, #-16]
  10aa54:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10aa58:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  10aa5c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    rt_thread_t t;

    RT_DEBUG_NOT_IN_INTERRUPT;

    /* create thread */
    t = rt_thread_create(name, thread, arg, stacksize, prio, 20);
  10aa60:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  10aa64:	e59b3004 	ldr	r3, [fp, #4]
  10aa68:	e6ef3073 	uxtb	r3, r3
  10aa6c:	e3a02014 	mov	r2, #20
  10aa70:	e58d2004 	str	r2, [sp, #4]
  10aa74:	e58d3000 	str	r3, [sp]
  10aa78:	e1a03001 	mov	r3, r1
  10aa7c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10aa80:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10aa84:	e51b0010 	ldr	r0, [fp, #-16]
  10aa88:	ebffdd99 	bl	1020f4 <rt_thread_create>
  10aa8c:	e50b0008 	str	r0, [fp, #-8]
    
    RT_ASSERT(t != RT_NULL);
  10aa90:	e51b3008 	ldr	r3, [fp, #-8]
  10aa94:	e3530000 	cmp	r3, #0
  10aa98:	1a000005 	bne	10aab4 <sys_thread_new+0x70>
  10aa9c:	e3002255 	movw	r2, #597	; 0x255
  10aaa0:	e305189c 	movw	r1, #22684	; 0x589c
  10aaa4:	e3401014 	movt	r1, #20
  10aaa8:	e3050870 	movw	r0, #22640	; 0x5870
  10aaac:	e3400014 	movt	r0, #20
  10aab0:	ebffe2b8 	bl	103598 <rt_assert_handler>

    /* startup thread */
    rt_thread_startup(t);
  10aab4:	e51b0008 	ldr	r0, [fp, #-8]
  10aab8:	ebffddc2 	bl	1021c8 <rt_thread_startup>

    return t;
  10aabc:	e51b3008 	ldr	r3, [fp, #-8]
}
  10aac0:	e1a00003 	mov	r0, r3
  10aac4:	e24bd004 	sub	sp, fp, #4
  10aac8:	e8bd8800 	pop	{fp, pc}

0010aacc <sys_arch_protect>:

sys_prot_t sys_arch_protect(void)
{
  10aacc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10aad0:	e28db000 	add	fp, sp, #0
  10aad4:	e24dd00c 	sub	sp, sp, #12
    //rt_base_t level;
    rt_base_t level = 0;
  10aad8:	e3a03000 	mov	r3, #0
  10aadc:	e50b3008 	str	r3, [fp, #-8]

    /* disable interrupt */
    //level = rt_hw_interrupt_disable();

    return level;
  10aae0:	e51b3008 	ldr	r3, [fp, #-8]
}
  10aae4:	e1a00003 	mov	r0, r3
  10aae8:	e28bd000 	add	sp, fp, #0
  10aaec:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10aaf0:	e12fff1e 	bx	lr

0010aaf4 <sys_arch_unprotect>:

void sys_arch_unprotect(sys_prot_t pval)
{
  10aaf4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10aaf8:	e28db000 	add	fp, sp, #0
  10aafc:	e24dd00c 	sub	sp, sp, #12
  10ab00:	e50b0008 	str	r0, [fp, #-8]
    /* enable interrupt */
    //rt_hw_interrupt_enable(pval);

    return;
  10ab04:	e320f000 	nop	{0}
}
  10ab08:	e28bd000 	add	sp, fp, #0
  10ab0c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10ab10:	e12fff1e 	bx	lr

0010ab14 <sys_arch_assert>:

void sys_arch_assert(const char *file, int line)
{
  10ab14:	e92d4800 	push	{fp, lr}
  10ab18:	e28db004 	add	fp, sp, #4
  10ab1c:	e24dd008 	sub	sp, sp, #8
  10ab20:	e50b0008 	str	r0, [fp, #-8]
  10ab24:	e50b100c 	str	r1, [fp, #-12]
    rt_kprintf("\nAssertion: %d in %s\n", line, file);
  10ab28:	e51b2008 	ldr	r2, [fp, #-8]
  10ab2c:	e51b100c 	ldr	r1, [fp, #-12]
  10ab30:	e3050880 	movw	r0, #22656	; 0x5880
  10ab34:	e3400014 	movt	r0, #20
  10ab38:	ebffe175 	bl	103114 <rt_kprintf>
    RT_ASSERT(0);
  10ab3c:	e3002273 	movw	r2, #627	; 0x273
  10ab40:	e30518ac 	movw	r1, #22700	; 0x58ac
  10ab44:	e3401014 	movt	r1, #20
  10ab48:	e3050898 	movw	r0, #22680	; 0x5898
  10ab4c:	e3400014 	movt	r0, #20
  10ab50:	ebffe290 	bl	103598 <rt_assert_handler>
}
  10ab54:	e320f000 	nop	{0}
  10ab58:	e24bd004 	sub	sp, fp, #4
  10ab5c:	e8bd8800 	pop	{fp, pc}

0010ab60 <sys_jiffies>:

u32_t sys_jiffies(void)
{
  10ab60:	e92d4800 	push	{fp, lr}
  10ab64:	e28db004 	add	fp, sp, #4
    return rt_tick_get();
  10ab68:	ebffdcbc 	bl	101e60 <rt_tick_get>
  10ab6c:	e1a03000 	mov	r3, r0
}
  10ab70:	e1a00003 	mov	r0, r3
  10ab74:	e8bd8800 	pop	{fp, pc}

0010ab78 <sys_now>:

u32_t sys_now(void)
{
  10ab78:	e92d4800 	push	{fp, lr}
  10ab7c:	e28db004 	add	fp, sp, #4
    return rt_tick_get() * (1000 / RT_TICK_PER_SECOND);
  10ab80:	ebffdcb6 	bl	101e60 <rt_tick_get>
  10ab84:	e1a03000 	mov	r3, r0
}
  10ab88:	e1a00003 	mov	r0, r3
  10ab8c:	e8bd8800 	pop	{fp, pc}

0010ab90 <mem_init>:


RT_WEAK
void mem_init(void)
{
  10ab90:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10ab94:	e28db000 	add	fp, sp, #0
}
  10ab98:	e320f000 	nop	{0}
  10ab9c:	e28bd000 	add	sp, fp, #0
  10aba0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10aba4:	e12fff1e 	bx	lr

0010aba8 <mem_calloc>:

void *mem_calloc(mem_size_t count, mem_size_t size)
{
  10aba8:	e92d4800 	push	{fp, lr}
  10abac:	e28db004 	add	fp, sp, #4
  10abb0:	e24dd008 	sub	sp, sp, #8
  10abb4:	e1a03000 	mov	r3, r0
  10abb8:	e1a02001 	mov	r2, r1
  10abbc:	e14b30b6 	strh	r3, [fp, #-6]
  10abc0:	e1a03002 	mov	r3, r2
  10abc4:	e14b30b8 	strh	r3, [fp, #-8]
    return rt_calloc(count, size);
  10abc8:	e15b30b6 	ldrh	r3, [fp, #-6]
  10abcc:	e15b20b8 	ldrh	r2, [fp, #-8]
  10abd0:	e1a01002 	mov	r1, r2
  10abd4:	e1a00003 	mov	r0, r3
  10abd8:	ebffe10b 	bl	10300c <rt_calloc>
  10abdc:	e1a03000 	mov	r3, r0
}
  10abe0:	e1a00003 	mov	r0, r3
  10abe4:	e24bd004 	sub	sp, fp, #4
  10abe8:	e8bd8800 	pop	{fp, pc}

0010abec <mem_trim>:

void *mem_trim(void *mem, mem_size_t size)
{
  10abec:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10abf0:	e28db000 	add	fp, sp, #0
  10abf4:	e24dd00c 	sub	sp, sp, #12
  10abf8:	e50b0008 	str	r0, [fp, #-8]
  10abfc:	e1a03001 	mov	r3, r1
  10ac00:	e14b30ba 	strh	r3, [fp, #-10]
    /* not support trim yet */
    return mem;
  10ac04:	e51b3008 	ldr	r3, [fp, #-8]
}
  10ac08:	e1a00003 	mov	r0, r3
  10ac0c:	e28bd000 	add	sp, fp, #0
  10ac10:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10ac14:	e12fff1e 	bx	lr

0010ac18 <mem_malloc>:

void *mem_malloc(mem_size_t size)
{
  10ac18:	e92d4800 	push	{fp, lr}
  10ac1c:	e28db004 	add	fp, sp, #4
  10ac20:	e24dd008 	sub	sp, sp, #8
  10ac24:	e1a03000 	mov	r3, r0
  10ac28:	e14b30b6 	strh	r3, [fp, #-6]
    return rt_malloc(size);
  10ac2c:	e15b30b6 	ldrh	r3, [fp, #-6]
  10ac30:	e1a00003 	mov	r0, r3
  10ac34:	ebffe0d6 	bl	102f94 <rt_malloc>
  10ac38:	e1a03000 	mov	r3, r0
}
  10ac3c:	e1a00003 	mov	r0, r3
  10ac40:	e24bd004 	sub	sp, fp, #4
  10ac44:	e8bd8800 	pop	{fp, pc}

0010ac48 <mem_free>:

void  mem_free(void *mem)
{
  10ac48:	e92d4800 	push	{fp, lr}
  10ac4c:	e28db004 	add	fp, sp, #4
  10ac50:	e24dd008 	sub	sp, sp, #8
  10ac54:	e50b0008 	str	r0, [fp, #-8]
    rt_free(mem);
  10ac58:	e51b0008 	ldr	r0, [fp, #-8]
  10ac5c:	ebffe0d6 	bl	102fbc <rt_free>
}
  10ac60:	e320f000 	nop	{0}
  10ac64:	e24bd004 	sub	sp, fp, #4
  10ac68:	e8bd8800 	pop	{fp, pc}

0010ac6c <buffer_new>:
#include "arch/cirbuff.h"
#include <rtthread.h>

struct cirbuff * buffer_new(int len)
{
  10ac6c:	e92d4800 	push	{fp, lr}
  10ac70:	e28db004 	add	fp, sp, #4
  10ac74:	e24dd010 	sub	sp, sp, #16
  10ac78:	e50b0010 	str	r0, [fp, #-16]
    struct cirbuff * new_cb = (struct cirbuff *)rt_malloc(sizeof(struct cirbuff));
  10ac7c:	e3a00010 	mov	r0, #16
  10ac80:	ebffe0c3 	bl	102f94 <rt_malloc>
  10ac84:	e50b0008 	str	r0, [fp, #-8]
    new_cb->input_ptr = 0;
  10ac88:	e51b3008 	ldr	r3, [fp, #-8]
  10ac8c:	e3a02000 	mov	r2, #0
  10ac90:	e5832004 	str	r2, [r3, #4]
    new_cb->output_ptr = 0;
  10ac94:	e51b3008 	ldr	r3, [fp, #-8]
  10ac98:	e3a02000 	mov	r2, #0
  10ac9c:	e5832008 	str	r2, [r3, #8]
    new_cb->buff = (rt_ubase_t *)rt_malloc(sizeof(rt_ubase_t) * len);
  10aca0:	e51b3010 	ldr	r3, [fp, #-16]
  10aca4:	e1a03103 	lsl	r3, r3, #2
  10aca8:	e1a00003 	mov	r0, r3
  10acac:	ebffe0b8 	bl	102f94 <rt_malloc>
  10acb0:	e1a02000 	mov	r2, r0
  10acb4:	e51b3008 	ldr	r3, [fp, #-8]
  10acb8:	e5832000 	str	r2, [r3]
    rt_memset(new_cb->buff, 0, sizeof(rt_ubase_t) * len);
  10acbc:	e51b3008 	ldr	r3, [fp, #-8]
  10acc0:	e5930000 	ldr	r0, [r3]
  10acc4:	e51b3010 	ldr	r3, [fp, #-16]
  10acc8:	e1a03103 	lsl	r3, r3, #2
  10accc:	e1a02003 	mov	r2, r3
  10acd0:	e3a01000 	mov	r1, #0
  10acd4:	ebffe17b 	bl	1032c8 <rt_memset>
    new_cb->len = len;
  10acd8:	e51b3008 	ldr	r3, [fp, #-8]
  10acdc:	e51b2010 	ldr	r2, [fp, #-16]
  10ace0:	e583200c 	str	r2, [r3, #12]
    
    return new_cb;
  10ace4:	e51b3008 	ldr	r3, [fp, #-8]
}
  10ace8:	e1a00003 	mov	r0, r3
  10acec:	e24bd004 	sub	sp, fp, #4
  10acf0:	e8bd8800 	pop	{fp, pc}

0010acf4 <buffer_del>:

void buffer_del(struct cirbuff *cb)
{
  10acf4:	e92d4800 	push	{fp, lr}
  10acf8:	e28db004 	add	fp, sp, #4
  10acfc:	e24dd008 	sub	sp, sp, #8
  10ad00:	e50b0008 	str	r0, [fp, #-8]
    rt_free(cb->buff);
  10ad04:	e51b3008 	ldr	r3, [fp, #-8]
  10ad08:	e5933000 	ldr	r3, [r3]
  10ad0c:	e1a00003 	mov	r0, r3
  10ad10:	ebffe0a9 	bl	102fbc <rt_free>
    rt_free(cb);
  10ad14:	e51b0008 	ldr	r0, [fp, #-8]
  10ad18:	ebffe0a7 	bl	102fbc <rt_free>
}
  10ad1c:	e320f000 	nop	{0}
  10ad20:	e24bd004 	sub	sp, fp, #4
  10ad24:	e8bd8800 	pop	{fp, pc}

0010ad28 <buffer_full>:

int buffer_full(struct cirbuff *cb)
{
  10ad28:	e92d4810 	push	{r4, fp, lr}
  10ad2c:	e28db008 	add	fp, sp, #8
  10ad30:	e24dd00c 	sub	sp, sp, #12
  10ad34:	e50b0010 	str	r0, [fp, #-16]
    return cb->output_ptr == ((cb->input_ptr + 1) % cb->len);
  10ad38:	e51b3010 	ldr	r3, [fp, #-16]
  10ad3c:	e5934008 	ldr	r4, [r3, #8]
  10ad40:	e51b3010 	ldr	r3, [fp, #-16]
  10ad44:	e5933004 	ldr	r3, [r3, #4]
  10ad48:	e2832001 	add	r2, r3, #1
  10ad4c:	e51b3010 	ldr	r3, [fp, #-16]
  10ad50:	e593300c 	ldr	r3, [r3, #12]
  10ad54:	e1a01003 	mov	r1, r3
  10ad58:	e1a00002 	mov	r0, r2
  10ad5c:	eb00b56e 	bl	13831c <__aeabi_idivmod>
  10ad60:	e1a03001 	mov	r3, r1
  10ad64:	e1540003 	cmp	r4, r3
  10ad68:	03a03001 	moveq	r3, #1
  10ad6c:	13a03000 	movne	r3, #0
  10ad70:	e6ef3073 	uxtb	r3, r3
}
  10ad74:	e1a00003 	mov	r0, r3
  10ad78:	e24bd008 	sub	sp, fp, #8
  10ad7c:	e8bd8810 	pop	{r4, fp, pc}

0010ad80 <buffer_empty>:

int buffer_empty(struct cirbuff *cb)
{
  10ad80:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10ad84:	e28db000 	add	fp, sp, #0
  10ad88:	e24dd00c 	sub	sp, sp, #12
  10ad8c:	e50b0008 	str	r0, [fp, #-8]
    return cb->input_ptr == cb->output_ptr;
  10ad90:	e51b3008 	ldr	r3, [fp, #-8]
  10ad94:	e5932004 	ldr	r2, [r3, #4]
  10ad98:	e51b3008 	ldr	r3, [fp, #-8]
  10ad9c:	e5933008 	ldr	r3, [r3, #8]
  10ada0:	e1520003 	cmp	r2, r3
  10ada4:	03a03001 	moveq	r3, #1
  10ada8:	13a03000 	movne	r3, #0
  10adac:	e6ef3073 	uxtb	r3, r3
}
  10adb0:	e1a00003 	mov	r0, r3
  10adb4:	e28bd000 	add	sp, fp, #0
  10adb8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10adbc:	e12fff1e 	bx	lr

0010adc0 <buffer_enqueue>:

int buffer_enqueue(struct cirbuff *cb, rt_ubase_t data)
{
  10adc0:	e92d4800 	push	{fp, lr}
  10adc4:	e28db004 	add	fp, sp, #4
  10adc8:	e24dd008 	sub	sp, sp, #8
  10adcc:	e50b0008 	str	r0, [fp, #-8]
  10add0:	e50b100c 	str	r1, [fp, #-12]
    if (buffer_full(cb))
  10add4:	e51b0008 	ldr	r0, [fp, #-8]
  10add8:	ebffffd2 	bl	10ad28 <buffer_full>
  10addc:	e1a03000 	mov	r3, r0
  10ade0:	e3530000 	cmp	r3, #0
  10ade4:	0a000001 	beq	10adf0 <buffer_enqueue+0x30>
    {
        return -1;
  10ade8:	e3e03000 	mvn	r3, #0
  10adec:	ea000014 	b	10ae44 <buffer_enqueue+0x84>
    }

    cb->buff[cb->input_ptr] = data;
  10adf0:	e51b3008 	ldr	r3, [fp, #-8]
  10adf4:	e5932000 	ldr	r2, [r3]
  10adf8:	e51b3008 	ldr	r3, [fp, #-8]
  10adfc:	e5933004 	ldr	r3, [r3, #4]
  10ae00:	e1a03103 	lsl	r3, r3, #2
  10ae04:	e0823003 	add	r3, r2, r3
  10ae08:	e51b200c 	ldr	r2, [fp, #-12]
  10ae0c:	e5832000 	str	r2, [r3]
    cb->input_ptr = (cb->input_ptr + 1) % cb->len;
  10ae10:	e51b3008 	ldr	r3, [fp, #-8]
  10ae14:	e5933004 	ldr	r3, [r3, #4]
  10ae18:	e2832001 	add	r2, r3, #1
  10ae1c:	e51b3008 	ldr	r3, [fp, #-8]
  10ae20:	e593300c 	ldr	r3, [r3, #12]
  10ae24:	e1a01003 	mov	r1, r3
  10ae28:	e1a00002 	mov	r0, r2
  10ae2c:	eb00b53a 	bl	13831c <__aeabi_idivmod>
  10ae30:	e1a03001 	mov	r3, r1
  10ae34:	e1a02003 	mov	r2, r3
  10ae38:	e51b3008 	ldr	r3, [fp, #-8]
  10ae3c:	e5832004 	str	r2, [r3, #4]

    return 0;
  10ae40:	e3a03000 	mov	r3, #0
}
  10ae44:	e1a00003 	mov	r0, r3
  10ae48:	e24bd004 	sub	sp, fp, #4
  10ae4c:	e8bd8800 	pop	{fp, pc}

0010ae50 <buffer_dequeue>:

int buffer_dequeue(struct cirbuff *cb, rt_ubase_t *data)
{
  10ae50:	e92d4800 	push	{fp, lr}
  10ae54:	e28db004 	add	fp, sp, #4
  10ae58:	e24dd008 	sub	sp, sp, #8
  10ae5c:	e50b0008 	str	r0, [fp, #-8]
  10ae60:	e50b100c 	str	r1, [fp, #-12]
    if (buffer_empty(cb))
  10ae64:	e51b0008 	ldr	r0, [fp, #-8]
  10ae68:	ebffffc4 	bl	10ad80 <buffer_empty>
  10ae6c:	e1a03000 	mov	r3, r0
  10ae70:	e3530000 	cmp	r3, #0
  10ae74:	0a000001 	beq	10ae80 <buffer_dequeue+0x30>
    {
        return -1;
  10ae78:	e3e03000 	mvn	r3, #0
  10ae7c:	ea000015 	b	10aed8 <buffer_dequeue+0x88>
    }

    *data = cb->buff[cb->output_ptr];
  10ae80:	e51b3008 	ldr	r3, [fp, #-8]
  10ae84:	e5932000 	ldr	r2, [r3]
  10ae88:	e51b3008 	ldr	r3, [fp, #-8]
  10ae8c:	e5933008 	ldr	r3, [r3, #8]
  10ae90:	e1a03103 	lsl	r3, r3, #2
  10ae94:	e0823003 	add	r3, r2, r3
  10ae98:	e5932000 	ldr	r2, [r3]
  10ae9c:	e51b300c 	ldr	r3, [fp, #-12]
  10aea0:	e5832000 	str	r2, [r3]
    cb->output_ptr = (cb->output_ptr + 1) % cb->len;
  10aea4:	e51b3008 	ldr	r3, [fp, #-8]
  10aea8:	e5933008 	ldr	r3, [r3, #8]
  10aeac:	e2832001 	add	r2, r3, #1
  10aeb0:	e51b3008 	ldr	r3, [fp, #-8]
  10aeb4:	e593300c 	ldr	r3, [r3, #12]
  10aeb8:	e1a01003 	mov	r1, r3
  10aebc:	e1a00002 	mov	r0, r2
  10aec0:	eb00b515 	bl	13831c <__aeabi_idivmod>
  10aec4:	e1a03001 	mov	r3, r1
  10aec8:	e1a02003 	mov	r2, r3
  10aecc:	e51b3008 	ldr	r3, [fp, #-8]
  10aed0:	e5832008 	str	r2, [r3, #8]

    return 0;
  10aed4:	e3a03000 	mov	r3, #0
}
  10aed8:	e1a00003 	mov	r0, r3
  10aedc:	e24bd004 	sub	sp, fp, #4
  10aee0:	e8bd8800 	pop	{fp, pc}

0010aee4 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
  10aee4:	e92d4800 	push	{fp, lr}
  10aee8:	e28db004 	add	fp, sp, #4
  10aeec:	e24dd010 	sub	sp, sp, #16
  10aef0:	e50b0010 	str	r0, [fp, #-16]
  10aef4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
  10aef8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10aefc:	e5933000 	ldr	r3, [r3]
  10af00:	e2833010 	add	r3, r3, #16
  10af04:	e1a02003 	mov	r2, r3
  10af08:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10af0c:	e51b0010 	ldr	r0, [fp, #-16]
  10af10:	eb002c15 	bl	115f6c <tcpip_send_msg_wait_sem>
  10af14:	e1a03000 	mov	r3, r0
  10af18:	e54b3005 	strb	r3, [fp, #-5]
  if (err == ERR_OK) {
  10af1c:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10af20:	e3530000 	cmp	r3, #0
  10af24:	1a000002 	bne	10af34 <netconn_apimsg+0x50>
    return apimsg->err;
  10af28:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10af2c:	e1d330d4 	ldrsb	r3, [r3, #4]
  10af30:	ea000000 	b	10af38 <netconn_apimsg+0x54>
  }
  return err;
  10af34:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10af38:	e1a00003 	mov	r0, r3
  10af3c:	e24bd004 	sub	sp, fp, #4
  10af40:	e8bd8800 	pop	{fp, pc}

0010af44 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
  10af44:	e92d4800 	push	{fp, lr}
  10af48:	e28db004 	add	fp, sp, #4
  10af4c:	e24dd030 	sub	sp, sp, #48	; 0x30
  10af50:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10af54:	e1a03001 	mov	r3, r1
  10af58:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  10af5c:	e54b3029 	strb	r3, [fp, #-41]	; 0xffffffd7
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
  10af60:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
  10af64:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  10af68:	eb000878 	bl	10d150 <netconn_alloc>
  10af6c:	e50b0008 	str	r0, [fp, #-8]
  if (conn != NULL) {
  10af70:	e51b3008 	ldr	r3, [fp, #-8]
  10af74:	e3530000 	cmp	r3, #0
  10af78:	0a00004f 	beq	10b0bc <netconn_new_with_proto_and_callback+0x178>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
  10af7c:	e55b3029 	ldrb	r3, [fp, #-41]	; 0xffffffd7
  10af80:	e54b301c 	strb	r3, [fp, #-28]	; 0xffffffe4
    API_MSG_VAR_REF(msg).conn = conn;
  10af84:	e51b3008 	ldr	r3, [fp, #-8]
  10af88:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
  10af8c:	e24b3024 	sub	r3, fp, #36	; 0x24
  10af90:	e1a01003 	mov	r1, r3
  10af94:	e30d00c4 	movw	r0, #53444	; 0xd0c4
  10af98:	e3400010 	movt	r0, #16
  10af9c:	ebffffd0 	bl	10aee4 <netconn_apimsg>
  10afa0:	e1a03000 	mov	r3, r0
  10afa4:	e54b3009 	strb	r3, [fp, #-9]
    if (err != ERR_OK) {
  10afa8:	e15b30d9 	ldrsb	r3, [fp, #-9]
  10afac:	e3530000 	cmp	r3, #0
  10afb0:	0a000041 	beq	10b0bc <netconn_new_with_proto_and_callback+0x178>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
  10afb4:	e51b3008 	ldr	r3, [fp, #-8]
  10afb8:	e5933008 	ldr	r3, [r3, #8]
  10afbc:	e3530000 	cmp	r3, #0
  10afc0:	0a000006 	beq	10afe0 <netconn_new_with_proto_and_callback+0x9c>
  10afc4:	e30508bc 	movw	r0, #22716	; 0x58bc
  10afc8:	e3400014 	movt	r0, #20
  10afcc:	ebffe050 	bl	103114 <rt_kprintf>
  10afd0:	e3a01089 	mov	r1, #137	; 0x89
  10afd4:	e30508e0 	movw	r0, #22752	; 0x58e0
  10afd8:	e3400014 	movt	r0, #20
  10afdc:	ebfffecc 	bl	10ab14 <sys_arch_assert>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
  10afe0:	e51b3008 	ldr	r3, [fp, #-8]
  10afe4:	e2833014 	add	r3, r3, #20
  10afe8:	e1a00003 	mov	r0, r3
  10afec:	ebfffe7f 	bl	10a9f0 <sys_mbox_valid>
  10aff0:	e1a03000 	mov	r3, r0
  10aff4:	e3530000 	cmp	r3, #0
  10aff8:	1a000006 	bne	10b018 <netconn_new_with_proto_and_callback+0xd4>
  10affc:	e3050910 	movw	r0, #22800	; 0x5910
  10b000:	e3400014 	movt	r0, #20
  10b004:	ebffe042 	bl	103114 <rt_kprintf>
  10b008:	e3a0108a 	mov	r1, #138	; 0x8a
  10b00c:	e30508e0 	movw	r0, #22752	; 0x58e0
  10b010:	e3400014 	movt	r0, #20
  10b014:	ebfffebe 	bl	10ab14 <sys_arch_assert>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
  10b018:	e51b3008 	ldr	r3, [fp, #-8]
  10b01c:	e2833018 	add	r3, r3, #24
  10b020:	e1a00003 	mov	r0, r3
  10b024:	ebfffe71 	bl	10a9f0 <sys_mbox_valid>
  10b028:	e1a03000 	mov	r3, r0
  10b02c:	e3530000 	cmp	r3, #0
  10b030:	0a000006 	beq	10b050 <netconn_new_with_proto_and_callback+0x10c>
  10b034:	e3050928 	movw	r0, #22824	; 0x5928
  10b038:	e3400014 	movt	r0, #20
  10b03c:	ebffe034 	bl	103114 <rt_kprintf>
  10b040:	e3a0108c 	mov	r1, #140	; 0x8c
  10b044:	e30508e0 	movw	r0, #22752	; 0x58e0
  10b048:	e3400014 	movt	r0, #20
  10b04c:	ebfffeb0 	bl	10ab14 <sys_arch_assert>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
  10b050:	e51b3008 	ldr	r3, [fp, #-8]
  10b054:	e2833010 	add	r3, r3, #16
  10b058:	e1a00003 	mov	r0, r3
  10b05c:	ebfffc8e 	bl	10a29c <sys_sem_valid>
  10b060:	e1a03000 	mov	r3, r0
  10b064:	e3530000 	cmp	r3, #0
  10b068:	1a000006 	bne	10b088 <netconn_new_with_proto_and_callback+0x144>
  10b06c:	e305094c 	movw	r0, #22860	; 0x594c
  10b070:	e3400014 	movt	r0, #20
  10b074:	ebffe026 	bl	103114 <rt_kprintf>
  10b078:	e3a0108f 	mov	r1, #143	; 0x8f
  10b07c:	e30508e0 	movw	r0, #22752	; 0x58e0
  10b080:	e3400014 	movt	r0, #20
  10b084:	ebfffea2 	bl	10ab14 <sys_arch_assert>
      sys_sem_free(&conn->op_completed);
  10b088:	e51b3008 	ldr	r3, [fp, #-8]
  10b08c:	e2833010 	add	r3, r3, #16
  10b090:	e1a00003 	mov	r0, r3
  10b094:	ebfffc37 	bl	10a178 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
  10b098:	e51b3008 	ldr	r3, [fp, #-8]
  10b09c:	e2833014 	add	r3, r3, #20
  10b0a0:	e1a00003 	mov	r0, r3
  10b0a4:	ebfffd93 	bl	10a6f8 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
  10b0a8:	e51b1008 	ldr	r1, [fp, #-8]
  10b0ac:	e3a00008 	mov	r0, #8
  10b0b0:	eb003797 	bl	118f14 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
  10b0b4:	e3a03000 	mov	r3, #0
  10b0b8:	ea000000 	b	10b0c0 <netconn_new_with_proto_and_callback+0x17c>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
  10b0bc:	e51b3008 	ldr	r3, [fp, #-8]
}
  10b0c0:	e1a00003 	mov	r0, r3
  10b0c4:	e24bd004 	sub	sp, fp, #4
  10b0c8:	e8bd8800 	pop	{fp, pc}

0010b0cc <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
  10b0cc:	e92d4800 	push	{fp, lr}
  10b0d0:	e28db004 	add	fp, sp, #4
  10b0d4:	e24dd028 	sub	sp, sp, #40	; 0x28
  10b0d8:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
  10b0dc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b0e0:	e3530000 	cmp	r3, #0
  10b0e4:	1a000001 	bne	10b0f0 <netconn_delete+0x24>
    return ERR_OK;
  10b0e8:	e3a03000 	mov	r3, #0
  10b0ec:	ea000013 	b	10b140 <netconn_delete+0x74>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10b0f0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b0f4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
#if LWIP_TCP
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
  10b0f8:	ebfffe9e 	bl	10ab78 <sys_now>
  10b0fc:	e1a03000 	mov	r3, r0
  10b100:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
  10b104:	e24b3020 	sub	r3, fp, #32
  10b108:	e1a01003 	mov	r1, r3
  10b10c:	e30d0aec 	movw	r0, #56044	; 0xdaec
  10b110:	e3400010 	movt	r0, #16
  10b114:	ebffff72 	bl	10aee4 <netconn_apimsg>
  10b118:	e1a03000 	mov	r3, r0
  10b11c:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
  10b120:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10b124:	e3530000 	cmp	r3, #0
  10b128:	0a000001 	beq	10b134 <netconn_delete+0x68>
    return err;
  10b12c:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10b130:	ea000002 	b	10b140 <netconn_delete+0x74>
  }

  netconn_free(conn);
  10b134:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  10b138:	eb000878 	bl	10d320 <netconn_free>

  return ERR_OK;
  10b13c:	e3a03000 	mov	r3, #0
}
  10b140:	e1a00003 	mov	r0, r3
  10b144:	e24bd004 	sub	sp, fp, #4
  10b148:	e8bd8800 	pop	{fp, pc}

0010b14c <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
  10b14c:	e92d4800 	push	{fp, lr}
  10b150:	e28db004 	add	fp, sp, #4
  10b154:	e24dd030 	sub	sp, sp, #48	; 0x30
  10b158:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10b15c:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  10b160:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  10b164:	e54b3031 	strb	r3, [fp, #-49]	; 0xffffffcf
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
  10b168:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b16c:	e3530000 	cmp	r3, #0
  10b170:	1a000008 	bne	10b198 <netconn_getaddr+0x4c>
  10b174:	e3050968 	movw	r0, #22888	; 0x5968
  10b178:	e3400014 	movt	r0, #20
  10b17c:	ebffdfe4 	bl	103114 <rt_kprintf>
  10b180:	e3a010d9 	mov	r1, #217	; 0xd9
  10b184:	e30508e0 	movw	r0, #22752	; 0x58e0
  10b188:	e3400014 	movt	r0, #20
  10b18c:	ebfffe60 	bl	10ab14 <sys_arch_assert>
  10b190:	e3e0300f 	mvn	r3, #15
  10b194:	ea000027 	b	10b238 <netconn_getaddr+0xec>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
  10b198:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b19c:	e3530000 	cmp	r3, #0
  10b1a0:	1a000008 	bne	10b1c8 <netconn_getaddr+0x7c>
  10b1a4:	e3050988 	movw	r0, #22920	; 0x5988
  10b1a8:	e3400014 	movt	r0, #20
  10b1ac:	ebffdfd8 	bl	103114 <rt_kprintf>
  10b1b0:	e3a010da 	mov	r1, #218	; 0xda
  10b1b4:	e30508e0 	movw	r0, #22752	; 0x58e0
  10b1b8:	e3400014 	movt	r0, #20
  10b1bc:	ebfffe54 	bl	10ab14 <sys_arch_assert>
  10b1c0:	e3e0300f 	mvn	r3, #15
  10b1c4:	ea00001b 	b	10b238 <netconn_getaddr+0xec>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
  10b1c8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  10b1cc:	e3530000 	cmp	r3, #0
  10b1d0:	1a000008 	bne	10b1f8 <netconn_getaddr+0xac>
  10b1d4:	e30509a8 	movw	r0, #22952	; 0x59a8
  10b1d8:	e3400014 	movt	r0, #20
  10b1dc:	ebffdfcc 	bl	103114 <rt_kprintf>
  10b1e0:	e3a010db 	mov	r1, #219	; 0xdb
  10b1e4:	e30508e0 	movw	r0, #22752	; 0x58e0
  10b1e8:	e3400014 	movt	r0, #20
  10b1ec:	ebfffe48 	bl	10ab14 <sys_arch_assert>
  10b1f0:	e3e0300f 	mvn	r3, #15
  10b1f4:	ea00000f 	b	10b238 <netconn_getaddr+0xec>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10b1f8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b1fc:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  API_MSG_VAR_REF(msg).msg.ad.local = local;
  10b200:	e55b3031 	ldrb	r3, [fp, #-49]	; 0xffffffcf
  10b204:	e54b3010 	strb	r3, [fp, #-16]
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
  10b208:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b20c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  msg.msg.ad.port = port;
  10b210:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  10b214:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
  10b218:	e24b3020 	sub	r3, fp, #32
  10b21c:	e1a01003 	mov	r1, r3
  10b220:	e30f040c 	movw	r0, #62476	; 0xf40c
  10b224:	e3400010 	movt	r0, #16
  10b228:	ebffff2d 	bl	10aee4 <netconn_apimsg>
  10b22c:	e1a03000 	mov	r3, r0
  10b230:	e54b3005 	strb	r3, [fp, #-5]
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
  10b234:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10b238:	e1a00003 	mov	r0, r3
  10b23c:	e24bd004 	sub	sp, fp, #4
  10b240:	e8bd8800 	pop	{fp, pc}

0010b244 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
  10b244:	e92d4800 	push	{fp, lr}
  10b248:	e28db004 	add	fp, sp, #4
  10b24c:	e24dd030 	sub	sp, sp, #48	; 0x30
  10b250:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10b254:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  10b258:	e1a03002 	mov	r3, r2
  10b25c:	e14b32be 	strh	r3, [fp, #-46]	; 0xffffffd2
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
  10b260:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b264:	e3530000 	cmp	r3, #0
  10b268:	1a000008 	bne	10b290 <netconn_bind+0x4c>
  10b26c:	e30509c8 	movw	r0, #22984	; 0x59c8
  10b270:	e3400014 	movt	r0, #20
  10b274:	ebffdfa6 	bl	103114 <rt_kprintf>
  10b278:	e3a010ff 	mov	r1, #255	; 0xff
  10b27c:	e30508e0 	movw	r0, #22752	; 0x58e0
  10b280:	e3400014 	movt	r0, #20
  10b284:	ebfffe22 	bl	10ab14 <sys_arch_assert>
  10b288:	e3e0300f 	mvn	r3, #15
  10b28c:	ea000013 	b	10b2e0 <netconn_bind+0x9c>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
  10b290:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b294:	e3530000 	cmp	r3, #0
  10b298:	1a000002 	bne	10b2a8 <netconn_bind+0x64>
    addr = IP4_ADDR_ANY;
  10b29c:	e3083e3c 	movw	r3, #36412	; 0x8e3c
  10b2a0:	e3403014 	movt	r3, #20
  10b2a4:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10b2a8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b2ac:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
  10b2b0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b2b4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  API_MSG_VAR_REF(msg).msg.bc.port = port;
  10b2b8:	e15b32be 	ldrh	r3, [fp, #-46]	; 0xffffffd2
  10b2bc:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
  10b2c0:	e24b3020 	sub	r3, fp, #32
  10b2c4:	e1a01003 	mov	r1, r3
  10b2c8:	e30d0e98 	movw	r0, #56984	; 0xde98
  10b2cc:	e3400010 	movt	r0, #16
  10b2d0:	ebffff03 	bl	10aee4 <netconn_apimsg>
  10b2d4:	e1a03000 	mov	r3, r0
  10b2d8:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  return err;
  10b2dc:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10b2e0:	e1a00003 	mov	r0, r3
  10b2e4:	e24bd004 	sub	sp, fp, #4
  10b2e8:	e8bd8800 	pop	{fp, pc}

0010b2ec <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
  10b2ec:	e92d4800 	push	{fp, lr}
  10b2f0:	e28db004 	add	fp, sp, #4
  10b2f4:	e24dd030 	sub	sp, sp, #48	; 0x30
  10b2f8:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10b2fc:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  10b300:	e1a03002 	mov	r3, r2
  10b304:	e14b32be 	strh	r3, [fp, #-46]	; 0xffffffd2
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
  10b308:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b30c:	e3530000 	cmp	r3, #0
  10b310:	1a000008 	bne	10b338 <netconn_connect+0x4c>
  10b314:	e30509e4 	movw	r0, #23012	; 0x59e4
  10b318:	e3400014 	movt	r0, #20
  10b31c:	ebffdf7c 	bl	103114 <rt_kprintf>
  10b320:	e300112b 	movw	r1, #299	; 0x12b
  10b324:	e30508e0 	movw	r0, #22752	; 0x58e0
  10b328:	e3400014 	movt	r0, #20
  10b32c:	ebfffdf8 	bl	10ab14 <sys_arch_assert>
  10b330:	e3e0300f 	mvn	r3, #15
  10b334:	ea000013 	b	10b388 <netconn_connect+0x9c>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
  10b338:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b33c:	e3530000 	cmp	r3, #0
  10b340:	1a000002 	bne	10b350 <netconn_connect+0x64>
    addr = IP4_ADDR_ANY;
  10b344:	e3083e3c 	movw	r3, #36412	; 0x8e3c
  10b348:	e3403014 	movt	r3, #20
  10b34c:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10b350:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b354:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
  10b358:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b35c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  API_MSG_VAR_REF(msg).msg.bc.port = port;
  10b360:	e15b32be 	ldrh	r3, [fp, #-46]	; 0xffffffd2
  10b364:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
  10b368:	e24b3020 	sub	r3, fp, #32
  10b36c:	e1a01003 	mov	r1, r3
  10b370:	e30e023c 	movw	r0, #57916	; 0xe23c
  10b374:	e3400010 	movt	r0, #16
  10b378:	ebfffed9 	bl	10aee4 <netconn_apimsg>
  10b37c:	e1a03000 	mov	r3, r0
  10b380:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  return err;
  10b384:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10b388:	e1a00003 	mov	r0, r3
  10b38c:	e24bd004 	sub	sp, fp, #4
  10b390:	e8bd8800 	pop	{fp, pc}

0010b394 <netconn_disconnect>:
 * @param conn the netconn to disconnect
 * @return See @ref err_t
 */
err_t
netconn_disconnect(struct netconn *conn)
{
  10b394:	e92d4800 	push	{fp, lr}
  10b398:	e28db004 	add	fp, sp, #4
  10b39c:	e24dd028 	sub	sp, sp, #40	; 0x28
  10b3a0:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_disconnect: invalid conn", (conn != NULL), return ERR_ARG;);
  10b3a4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b3a8:	e3530000 	cmp	r3, #0
  10b3ac:	1a000008 	bne	10b3d4 <netconn_disconnect+0x40>
  10b3b0:	e3050a04 	movw	r0, #23044	; 0x5a04
  10b3b4:	e3400014 	movt	r0, #20
  10b3b8:	ebffdf55 	bl	103114 <rt_kprintf>
  10b3bc:	e300114b 	movw	r1, #331	; 0x14b
  10b3c0:	e30508e0 	movw	r0, #22752	; 0x58e0
  10b3c4:	e3400014 	movt	r0, #20
  10b3c8:	ebfffdd1 	bl	10ab14 <sys_arch_assert>
  10b3cc:	e3e0300f 	mvn	r3, #15
  10b3d0:	ea000009 	b	10b3fc <netconn_disconnect+0x68>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10b3d4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b3d8:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  err = netconn_apimsg(lwip_netconn_do_disconnect, &API_MSG_VAR_REF(msg));
  10b3dc:	e24b3020 	sub	r3, fp, #32
  10b3e0:	e1a01003 	mov	r1, r3
  10b3e4:	e30e0574 	movw	r0, #58740	; 0xe574
  10b3e8:	e3400010 	movt	r0, #16
  10b3ec:	ebfffebc 	bl	10aee4 <netconn_apimsg>
  10b3f0:	e1a03000 	mov	r3, r0
  10b3f4:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  return err;
  10b3f8:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10b3fc:	e1a00003 	mov	r0, r3
  10b400:	e24bd004 	sub	sp, fp, #4
  10b404:	e8bd8800 	pop	{fp, pc}

0010b408 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
  10b408:	e92d4800 	push	{fp, lr}
  10b40c:	e28db004 	add	fp, sp, #4
  10b410:	e24dd028 	sub	sp, sp, #40	; 0x28
  10b414:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10b418:	e1a03001 	mov	r3, r1
  10b41c:	e54b3029 	strb	r3, [fp, #-41]	; 0xffffffd7
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
  10b420:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b424:	e3530000 	cmp	r3, #0
  10b428:	1a000008 	bne	10b450 <netconn_listen_with_backlog+0x48>
  10b42c:	e3050a28 	movw	r0, #23080	; 0x5a28
  10b430:	e3400014 	movt	r0, #20
  10b434:	ebffdf36 	bl	103114 <rt_kprintf>
  10b438:	e3a01f5a 	mov	r1, #360	; 0x168
  10b43c:	e30508e0 	movw	r0, #22752	; 0x58e0
  10b440:	e3400014 	movt	r0, #20
  10b444:	ebfffdb2 	bl	10ab14 <sys_arch_assert>
  10b448:	e3e0300f 	mvn	r3, #15
  10b44c:	ea000009 	b	10b478 <netconn_listen_with_backlog+0x70>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10b450:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b454:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
  10b458:	e24b3020 	sub	r3, fp, #32
  10b45c:	e1a01003 	mov	r1, r3
  10b460:	e30e0620 	movw	r0, #58912	; 0xe620
  10b464:	e3400010 	movt	r0, #16
  10b468:	ebfffe9d 	bl	10aee4 <netconn_apimsg>
  10b46c:	e1a03000 	mov	r3, r0
  10b470:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  return err;
  10b474:	e15b30d5 	ldrsb	r3, [fp, #-5]
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
  10b478:	e1a00003 	mov	r0, r3
  10b47c:	e24bd004 	sub	sp, fp, #4
  10b480:	e8bd8800 	pop	{fp, pc}

0010b484 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
  10b484:	e92d4800 	push	{fp, lr}
  10b488:	e28db004 	add	fp, sp, #4
  10b48c:	e24dd010 	sub	sp, sp, #16
  10b490:	e50b0010 	str	r0, [fp, #-16]
  10b494:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
  10b498:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10b49c:	e3530000 	cmp	r3, #0
  10b4a0:	1a000008 	bne	10b4c8 <netconn_accept+0x44>
  10b4a4:	e3050a48 	movw	r0, #23112	; 0x5a48
  10b4a8:	e3400014 	movt	r0, #20
  10b4ac:	ebffdf18 	bl	103114 <rt_kprintf>
  10b4b0:	e300118d 	movw	r1, #397	; 0x18d
  10b4b4:	e30508e0 	movw	r0, #22752	; 0x58e0
  10b4b8:	e3400014 	movt	r0, #20
  10b4bc:	ebfffd94 	bl	10ab14 <sys_arch_assert>
  10b4c0:	e3e0300f 	mvn	r3, #15
  10b4c4:	ea000053 	b	10b618 <netconn_accept+0x194>
  *new_conn = NULL;
  10b4c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10b4cc:	e3a02000 	mov	r2, #0
  10b4d0:	e5832000 	str	r2, [r3]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
  10b4d4:	e51b3010 	ldr	r3, [fp, #-16]
  10b4d8:	e3530000 	cmp	r3, #0
  10b4dc:	1a000008 	bne	10b504 <netconn_accept+0x80>
  10b4e0:	e3050a68 	movw	r0, #23144	; 0x5a68
  10b4e4:	e3400014 	movt	r0, #20
  10b4e8:	ebffdf09 	bl	103114 <rt_kprintf>
  10b4ec:	e300118f 	movw	r1, #399	; 0x18f
  10b4f0:	e30508e0 	movw	r0, #22752	; 0x58e0
  10b4f4:	e3400014 	movt	r0, #20
  10b4f8:	ebfffd85 	bl	10ab14 <sys_arch_assert>
  10b4fc:	e3e0300f 	mvn	r3, #15
  10b500:	ea000044 	b	10b618 <netconn_accept+0x194>

  if (ERR_IS_FATAL(conn->last_err)) {
  10b504:	e51b3010 	ldr	r3, [fp, #-16]
  10b508:	e1d330dc 	ldrsb	r3, [r3, #12]
  10b50c:	e373000c 	cmn	r3, #12
  10b510:	aa000002 	bge	10b520 <netconn_accept+0x9c>
    /* don't recv on fatal errors: this might block the application task
       waiting on acceptmbox forever! */
    return conn->last_err;
  10b514:	e51b3010 	ldr	r3, [fp, #-16]
  10b518:	e1d330dc 	ldrsb	r3, [r3, #12]
  10b51c:	ea00003d 	b	10b618 <netconn_accept+0x194>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
  10b520:	e51b3010 	ldr	r3, [fp, #-16]
  10b524:	e2833018 	add	r3, r3, #24
  10b528:	e1a00003 	mov	r0, r3
  10b52c:	ebfffd2f 	bl	10a9f0 <sys_mbox_valid>
  10b530:	e1a03000 	mov	r3, r0
  10b534:	e3530000 	cmp	r3, #0
  10b538:	1a000001 	bne	10b544 <netconn_accept+0xc0>
    return ERR_CLSD;
  10b53c:	e3e0300e 	mvn	r3, #14
  10b540:	ea000034 	b	10b618 <netconn_accept+0x194>
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_ALLOC(msg);
#endif /* TCP_LISTEN_BACKLOG */

#if LWIP_SO_RCVTIMEO
  if (sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
  10b544:	e51b3010 	ldr	r3, [fp, #-16]
  10b548:	e2830018 	add	r0, r3, #24
  10b54c:	e51b3010 	ldr	r3, [fp, #-16]
  10b550:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  10b554:	e1a02003 	mov	r2, r3
  10b558:	e24b300c 	sub	r3, fp, #12
  10b55c:	e1a01003 	mov	r1, r3
  10b560:	ebfffcd1 	bl	10a8ac <sys_arch_mbox_fetch>
  10b564:	e1a03000 	mov	r3, r0
  10b568:	e3730001 	cmn	r3, #1
  10b56c:	1a000001 	bne	10b578 <netconn_accept+0xf4>
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_TIMEOUT;
  10b570:	e3e03002 	mvn	r3, #2
  10b574:	ea000027 	b	10b618 <netconn_accept+0x194>
  }
#else
  sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
#endif /* LWIP_SO_RCVTIMEO*/
  newconn = (struct netconn *)accept_ptr;
  10b578:	e51b300c 	ldr	r3, [fp, #-12]
  10b57c:	e50b3008 	str	r3, [fp, #-8]
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
  10b580:	e51b3010 	ldr	r3, [fp, #-16]
  10b584:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10b588:	e3530000 	cmp	r3, #0
  10b58c:	0a000005 	beq	10b5a8 <netconn_accept+0x124>
  10b590:	e51b3010 	ldr	r3, [fp, #-16]
  10b594:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10b598:	e3a02000 	mov	r2, #0
  10b59c:	e3a01001 	mov	r1, #1
  10b5a0:	e51b0010 	ldr	r0, [fp, #-16]
  10b5a4:	e12fff33 	blx	r3

  if (accept_ptr == &netconn_aborted) {
  10b5a8:	e51b200c 	ldr	r2, [fp, #-12]
  10b5ac:	e30e3cfc 	movw	r3, #60668	; 0xecfc
  10b5b0:	e3403014 	movt	r3, #20
  10b5b4:	e1520003 	cmp	r2, r3
  10b5b8:	1a000001 	bne	10b5c4 <netconn_accept+0x140>
    /* a connection has been aborted: out of pcbs or out of netconns during accept */
    /* @todo: set netconn error, but this would be fatal and thus block further accepts */
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_ABRT;
  10b5bc:	e3e0300c 	mvn	r3, #12
  10b5c0:	ea000014 	b	10b618 <netconn_accept+0x194>
  }
  if (newconn == NULL) {
  10b5c4:	e51b3008 	ldr	r3, [fp, #-8]
  10b5c8:	e3530000 	cmp	r3, #0
  10b5cc:	1a00000d 	bne	10b608 <netconn_accept+0x184>
    /* connection has been aborted */
    /* in this special case, we set the netconn error from application thread, as
       on a ready-to-accept listening netconn, there should not be anything running
       in tcpip_thread */
    NETCONN_SET_SAFE_ERR(conn, ERR_CLSD);
  10b5d0:	e51b3010 	ldr	r3, [fp, #-16]
  10b5d4:	e3530000 	cmp	r3, #0
  10b5d8:	0a000008 	beq	10b600 <netconn_accept+0x17c>
  10b5dc:	ebffdb16 	bl	10223c <rt_enter_critical>
  10b5e0:	e51b3010 	ldr	r3, [fp, #-16]
  10b5e4:	e1d330dc 	ldrsb	r3, [r3, #12]
  10b5e8:	e373000c 	cmn	r3, #12
  10b5ec:	ba000002 	blt	10b5fc <netconn_accept+0x178>
  10b5f0:	e51b3010 	ldr	r3, [fp, #-16]
  10b5f4:	e3e0200e 	mvn	r2, #14
  10b5f8:	e5c3200c 	strb	r2, [r3, #12]
  10b5fc:	ebffdb14 	bl	102254 <rt_exit_critical>
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_CLSD;
  10b600:	e3e0300e 	mvn	r3, #14
  10b604:	ea000003 	b	10b618 <netconn_accept+0x194>
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
  10b608:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10b60c:	e51b2008 	ldr	r2, [fp, #-8]
  10b610:	e5832000 	str	r2, [r3]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
  10b614:	e3a03000 	mov	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
  10b618:	e1a00003 	mov	r0, r3
  10b61c:	e24bd004 	sub	sp, fp, #4
  10b620:	e8bd8800 	pop	{fp, pc}

0010b624 <netconn_recv_data>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf)
{
  10b624:	e92d4800 	push	{fp, lr}
  10b628:	e28db004 	add	fp, sp, #4
  10b62c:	e24dd028 	sub	sp, sp, #40	; 0x28
  10b630:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10b634:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  void *buf = NULL;
  10b638:	e3a03000 	mov	r3, #0
  10b63c:	e50b300c 	str	r3, [fp, #-12]
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
  10b640:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b644:	e3530000 	cmp	r3, #0
  10b648:	1a000008 	bne	10b670 <netconn_recv_data+0x4c>
  10b64c:	e3050a88 	movw	r0, #23176	; 0x5a88
  10b650:	e3400014 	movt	r0, #20
  10b654:	ebffdeae 	bl	103114 <rt_kprintf>
  10b658:	e30011e7 	movw	r1, #487	; 0x1e7
  10b65c:	e30508e0 	movw	r0, #22752	; 0x58e0
  10b660:	e3400014 	movt	r0, #20
  10b664:	ebfffd2a 	bl	10ab14 <sys_arch_assert>
  10b668:	e3e0300f 	mvn	r3, #15
  10b66c:	ea0000a5 	b	10b908 <netconn_recv_data+0x2e4>
  *new_buf = NULL;
  10b670:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b674:	e3a02000 	mov	r2, #0
  10b678:	e5832000 	str	r2, [r3]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
  10b67c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b680:	e3530000 	cmp	r3, #0
  10b684:	1a000008 	bne	10b6ac <netconn_recv_data+0x88>
  10b688:	e3050aa8 	movw	r0, #23208	; 0x5aa8
  10b68c:	e3400014 	movt	r0, #20
  10b690:	ebffde9f 	bl	103114 <rt_kprintf>
  10b694:	e30011e9 	movw	r1, #489	; 0x1e9
  10b698:	e30508e0 	movw	r0, #22752	; 0x58e0
  10b69c:	e3400014 	movt	r0, #20
  10b6a0:	ebfffd1b 	bl	10ab14 <sys_arch_assert>
  10b6a4:	e3e0300f 	mvn	r3, #15
  10b6a8:	ea000096 	b	10b908 <netconn_recv_data+0x2e4>
#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
  10b6ac:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b6b0:	e5933000 	ldr	r3, [r3]
  10b6b4:	e20330f0 	and	r3, r3, #240	; 0xf0
  10b6b8:	e3530010 	cmp	r3, #16
  10b6bc:	1a000011 	bne	10b708 <netconn_recv_data+0xe4>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    if (!sys_mbox_valid(&conn->recvmbox)) {
  10b6c0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b6c4:	e2833014 	add	r3, r3, #20
  10b6c8:	e1a00003 	mov	r0, r3
  10b6cc:	ebfffcc7 	bl	10a9f0 <sys_mbox_valid>
  10b6d0:	e1a03000 	mov	r3, r0
  10b6d4:	e3530000 	cmp	r3, #0
  10b6d8:	1a00000a 	bne	10b708 <netconn_recv_data+0xe4>
      /* This happens when calling this function after receiving FIN */
      return sys_mbox_valid(&conn->acceptmbox) ? ERR_CONN : ERR_CLSD;
  10b6dc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b6e0:	e2833018 	add	r3, r3, #24
  10b6e4:	e1a00003 	mov	r0, r3
  10b6e8:	ebfffcc0 	bl	10a9f0 <sys_mbox_valid>
  10b6ec:	e1a03000 	mov	r3, r0
  10b6f0:	e3530000 	cmp	r3, #0
  10b6f4:	0a000001 	beq	10b700 <netconn_recv_data+0xdc>
  10b6f8:	e3e0300a 	mvn	r3, #10
  10b6fc:	ea000081 	b	10b908 <netconn_recv_data+0x2e4>
  10b700:	e3e0300e 	mvn	r3, #14
  10b704:	ea00007f 	b	10b908 <netconn_recv_data+0x2e4>
    }
  }
#endif /* LWIP_TCP */
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
  10b708:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b70c:	e2833014 	add	r3, r3, #20
  10b710:	e1a00003 	mov	r0, r3
  10b714:	ebfffcb5 	bl	10a9f0 <sys_mbox_valid>
  10b718:	e1a03000 	mov	r3, r0
  10b71c:	e3530000 	cmp	r3, #0
  10b720:	1a000008 	bne	10b748 <netconn_recv_data+0x124>
  10b724:	e3050ac4 	movw	r0, #23236	; 0x5ac4
  10b728:	e3400014 	movt	r0, #20
  10b72c:	ebffde78 	bl	103114 <rt_kprintf>
  10b730:	e30011f5 	movw	r1, #501	; 0x1f5
  10b734:	e30508e0 	movw	r0, #22752	; 0x58e0
  10b738:	e3400014 	movt	r0, #20
  10b73c:	ebfffcf4 	bl	10ab14 <sys_arch_assert>
  10b740:	e3e0300a 	mvn	r3, #10
  10b744:	ea00006f 	b	10b908 <netconn_recv_data+0x2e4>

  if (ERR_IS_FATAL(conn->last_err)) {
  10b748:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b74c:	e1d330dc 	ldrsb	r3, [r3, #12]
  10b750:	e373000c 	cmn	r3, #12
  10b754:	aa000002 	bge	10b764 <netconn_recv_data+0x140>
    /* don't recv on fatal errors: this might block the application task
       waiting on recvmbox forever! */
    /* @todo: this does not allow us to fetch data that has been put into recvmbox
       before the fatal error occurred - is that a problem? */
    return conn->last_err;
  10b758:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b75c:	e1d330dc 	ldrsb	r3, [r3, #12]
  10b760:	ea000068 	b	10b908 <netconn_recv_data+0x2e4>
    API_MSG_VAR_ALLOC(msg);
  }
#endif /* LWIP_TCP */

#if LWIP_SO_RCVTIMEO
  if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
  10b764:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b768:	e2830014 	add	r0, r3, #20
  10b76c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b770:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  10b774:	e1a02003 	mov	r2, r3
  10b778:	e24b300c 	sub	r3, fp, #12
  10b77c:	e1a01003 	mov	r1, r3
  10b780:	ebfffc49 	bl	10a8ac <sys_arch_mbox_fetch>
  10b784:	e1a03000 	mov	r3, r0
  10b788:	e3730001 	cmn	r3, #1
  10b78c:	1a000001 	bne	10b798 <netconn_recv_data+0x174>
#endif /* (LWIP_UDP || LWIP_RAW) */
    {
      API_MSG_VAR_FREE(msg);
    }
#endif /* LWIP_TCP */
    return ERR_TIMEOUT;
  10b790:	e3e03002 	mvn	r3, #2
  10b794:	ea00005b 	b	10b908 <netconn_recv_data+0x2e4>
  sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
#endif /* LWIP_SO_RCVTIMEO*/

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
  10b798:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b79c:	e5933000 	ldr	r3, [r3]
  10b7a0:	e20330f0 	and	r3, r3, #240	; 0xf0
  10b7a4:	e3530010 	cmp	r3, #16
  10b7a8:	1a000032 	bne	10b878 <netconn_recv_data+0x254>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    /* Let the stack know that we have taken the data. */
    /* @todo: Speedup: Don't block and wait for the answer here
       (to prevent multiple thread-switches). */
    API_MSG_VAR_REF(msg).conn = conn;
  10b7ac:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b7b0:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    if (buf != NULL) {
  10b7b4:	e51b300c 	ldr	r3, [fp, #-12]
  10b7b8:	e3530000 	cmp	r3, #0
  10b7bc:	0a000003 	beq	10b7d0 <netconn_recv_data+0x1ac>
      API_MSG_VAR_REF(msg).msg.r.len = ((struct pbuf *)buf)->tot_len;
  10b7c0:	e51b300c 	ldr	r3, [fp, #-12]
  10b7c4:	e1d330b8 	ldrh	r3, [r3, #8]
  10b7c8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  10b7cc:	ea000001 	b	10b7d8 <netconn_recv_data+0x1b4>
    } else {
      API_MSG_VAR_REF(msg).msg.r.len = 1;
  10b7d0:	e3a03001 	mov	r3, #1
  10b7d4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    }

    /* don't care for the return value of lwip_netconn_do_recv */
    netconn_apimsg(lwip_netconn_do_recv, &API_MSG_VAR_REF(msg));
  10b7d8:	e24b3024 	sub	r3, fp, #36	; 0x24
  10b7dc:	e1a01003 	mov	r1, r3
  10b7e0:	e30e0acc 	movw	r0, #60108	; 0xeacc
  10b7e4:	e3400010 	movt	r0, #16
  10b7e8:	ebfffdbd 	bl	10aee4 <netconn_apimsg>
    API_MSG_VAR_FREE(msg);

    /* If we are closed, we indicate that we no longer wish to use the socket */
    if (buf == NULL) {
  10b7ec:	e51b300c 	ldr	r3, [fp, #-12]
  10b7f0:	e3530000 	cmp	r3, #0
  10b7f4:	1a00001b 	bne	10b868 <netconn_recv_data+0x244>
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
  10b7f8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b7fc:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10b800:	e3530000 	cmp	r3, #0
  10b804:	0a000005 	beq	10b820 <netconn_recv_data+0x1fc>
  10b808:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b80c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10b810:	e3a02000 	mov	r2, #0
  10b814:	e3a01001 	mov	r1, #1
  10b818:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  10b81c:	e12fff33 	blx	r3
      if (conn->pcb.ip == NULL) {
  10b820:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b824:	e5933008 	ldr	r3, [r3, #8]
  10b828:	e3530000 	cmp	r3, #0
  10b82c:	1a000008 	bne	10b854 <netconn_recv_data+0x230>
        /* race condition: RST during recv */
        return conn->last_err == ERR_OK ? ERR_RST : conn->last_err;
  10b830:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b834:	e1d330dc 	ldrsb	r3, [r3, #12]
  10b838:	e3530000 	cmp	r3, #0
  10b83c:	0a000002 	beq	10b84c <netconn_recv_data+0x228>
  10b840:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b844:	e1d330dc 	ldrsb	r3, [r3, #12]
  10b848:	ea00002e 	b	10b908 <netconn_recv_data+0x2e4>
  10b84c:	e3e0300d 	mvn	r3, #13
  10b850:	ea00002c 	b	10b908 <netconn_recv_data+0x2e4>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
  10b854:	e3a01001 	mov	r1, #1
  10b858:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  10b85c:	eb00015a 	bl	10bdcc <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
  10b860:	e3e0300e 	mvn	r3, #14
  10b864:	ea000027 	b	10b908 <netconn_recv_data+0x2e4>
    }
    len = ((struct pbuf *)buf)->tot_len;
  10b868:	e51b300c 	ldr	r3, [fp, #-12]
  10b86c:	e1d330b8 	ldrh	r3, [r3, #8]
  10b870:	e14b30b6 	strh	r3, [fp, #-6]
  10b874:	ea00000d 	b	10b8b0 <netconn_recv_data+0x28c>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
  10b878:	e51b300c 	ldr	r3, [fp, #-12]
  10b87c:	e3530000 	cmp	r3, #0
  10b880:	1a000006 	bne	10b8a0 <netconn_recv_data+0x27c>
  10b884:	e3050ae4 	movw	r0, #23268	; 0x5ae4
  10b888:	e3400014 	movt	r0, #20
  10b88c:	ebffde20 	bl	103114 <rt_kprintf>
  10b890:	e300123e 	movw	r1, #574	; 0x23e
  10b894:	e30508e0 	movw	r0, #22752	; 0x58e0
  10b898:	e3400014 	movt	r0, #20
  10b89c:	ebfffc9c 	bl	10ab14 <sys_arch_assert>
    len = netbuf_len((struct netbuf*)buf);
  10b8a0:	e51b300c 	ldr	r3, [fp, #-12]
  10b8a4:	e5933000 	ldr	r3, [r3]
  10b8a8:	e1d330b8 	ldrh	r3, [r3, #8]
  10b8ac:	e14b30b6 	strh	r3, [fp, #-6]
  }
#endif /* (LWIP_UDP || LWIP_RAW) */

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
  10b8b0:	ebffda61 	bl	10223c <rt_enter_critical>
  10b8b4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b8b8:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
  10b8bc:	e15b30b6 	ldrh	r3, [fp, #-6]
  10b8c0:	e0422003 	sub	r2, r2, r3
  10b8c4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b8c8:	e583202c 	str	r2, [r3, #44]	; 0x2c
  10b8cc:	ebffda60 	bl	102254 <rt_exit_critical>
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
  10b8d0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b8d4:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10b8d8:	e3530000 	cmp	r3, #0
  10b8dc:	0a000005 	beq	10b8f8 <netconn_recv_data+0x2d4>
  10b8e0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b8e4:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10b8e8:	e15b20b6 	ldrh	r2, [fp, #-6]
  10b8ec:	e3a01001 	mov	r1, #1
  10b8f0:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  10b8f4:	e12fff33 	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
  10b8f8:	e51b200c 	ldr	r2, [fp, #-12]
  10b8fc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b900:	e5832000 	str	r2, [r3]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
  10b904:	e3a03000 	mov	r3, #0
}
  10b908:	e1a00003 	mov	r0, r3
  10b90c:	e24bd004 	sub	sp, fp, #4
  10b910:	e8bd8800 	pop	{fp, pc}

0010b914 <netconn_recv_tcp_pbuf>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf(struct netconn *conn, struct pbuf **new_buf)
{
  10b914:	e92d4800 	push	{fp, lr}
  10b918:	e28db004 	add	fp, sp, #4
  10b91c:	e24dd008 	sub	sp, sp, #8
  10b920:	e50b0008 	str	r0, [fp, #-8]
  10b924:	e50b100c 	str	r1, [fp, #-12]
  LWIP_ERROR("netconn_recv: invalid conn", (conn != NULL) &&
  10b928:	e51b3008 	ldr	r3, [fp, #-8]
  10b92c:	e3530000 	cmp	r3, #0
  10b930:	0a000004 	beq	10b948 <netconn_recv_tcp_pbuf+0x34>
  10b934:	e51b3008 	ldr	r3, [fp, #-8]
  10b938:	e5933000 	ldr	r3, [r3]
  10b93c:	e20330f0 	and	r3, r3, #240	; 0xf0
  10b940:	e3530010 	cmp	r3, #16
  10b944:	0a000008 	beq	10b96c <netconn_recv_tcp_pbuf+0x58>
  10b948:	e3050aa8 	movw	r0, #23208	; 0x5aa8
  10b94c:	e3400014 	movt	r0, #20
  10b950:	ebffddef 	bl	103114 <rt_kprintf>
  10b954:	e300125e 	movw	r1, #606	; 0x25e
  10b958:	e30508e0 	movw	r0, #22752	; 0x58e0
  10b95c:	e3400014 	movt	r0, #20
  10b960:	ebfffc6b 	bl	10ab14 <sys_arch_assert>
  10b964:	e3e0300f 	mvn	r3, #15
  10b968:	ea000003 	b	10b97c <netconn_recv_tcp_pbuf+0x68>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf);
  10b96c:	e51b100c 	ldr	r1, [fp, #-12]
  10b970:	e51b0008 	ldr	r0, [fp, #-8]
  10b974:	ebffff2a 	bl	10b624 <netconn_recv_data>
  10b978:	e1a03000 	mov	r3, r0
}
  10b97c:	e1a00003 	mov	r0, r3
  10b980:	e24bd004 	sub	sp, fp, #4
  10b984:	e8bd8800 	pop	{fp, pc}

0010b988 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
  10b988:	e92d4800 	push	{fp, lr}
  10b98c:	e28db004 	add	fp, sp, #4
  10b990:	e24dd018 	sub	sp, sp, #24
  10b994:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10b998:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
#if LWIP_TCP
  struct netbuf *buf = NULL;
  10b99c:	e3a03000 	mov	r3, #0
  10b9a0:	e50b3008 	str	r3, [fp, #-8]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
  10b9a4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10b9a8:	e3530000 	cmp	r3, #0
  10b9ac:	1a000008 	bne	10b9d4 <netconn_recv+0x4c>
  10b9b0:	e3050a88 	movw	r0, #23176	; 0x5a88
  10b9b4:	e3400014 	movt	r0, #20
  10b9b8:	ebffddd5 	bl	103114 <rt_kprintf>
  10b9bc:	e3a01f9d 	mov	r1, #628	; 0x274
  10b9c0:	e30508e0 	movw	r0, #22752	; 0x58e0
  10b9c4:	e3400014 	movt	r0, #20
  10b9c8:	ebfffc51 	bl	10ab14 <sys_arch_assert>
  10b9cc:	e3e0300f 	mvn	r3, #15
  10b9d0:	ea00004d 	b	10bb0c <netconn_recv+0x184>
  *new_buf = NULL;
  10b9d4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10b9d8:	e3a02000 	mov	r2, #0
  10b9dc:	e5832000 	str	r2, [r3]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
  10b9e0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10b9e4:	e3530000 	cmp	r3, #0
  10b9e8:	1a000008 	bne	10ba10 <netconn_recv+0x88>
  10b9ec:	e3050aa8 	movw	r0, #23208	; 0x5aa8
  10b9f0:	e3400014 	movt	r0, #20
  10b9f4:	ebffddc6 	bl	103114 <rt_kprintf>
  10b9f8:	e3001276 	movw	r1, #630	; 0x276
  10b9fc:	e30508e0 	movw	r0, #22752	; 0x58e0
  10ba00:	e3400014 	movt	r0, #20
  10ba04:	ebfffc42 	bl	10ab14 <sys_arch_assert>
  10ba08:	e3e0300f 	mvn	r3, #15
  10ba0c:	ea00003e 	b	10bb0c <netconn_recv+0x184>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
  10ba10:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10ba14:	e5933000 	ldr	r3, [r3]
  10ba18:	e20330f0 	and	r3, r3, #240	; 0xf0
  10ba1c:	e3530010 	cmp	r3, #16
  10ba20:	1a000035 	bne	10bafc <netconn_recv+0x174>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
  10ba24:	e3a03000 	mov	r3, #0
  10ba28:	e50b3010 	str	r3, [fp, #-16]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
  10ba2c:	e3a02d0a 	mov	r2, #640	; 0x280
  10ba30:	e30518e0 	movw	r1, #22752	; 0x58e0
  10ba34:	e3401014 	movt	r1, #20
  10ba38:	e3a00007 	mov	r0, #7
  10ba3c:	eb0034cc 	bl	118d74 <memp_malloc_fn>
  10ba40:	e50b0008 	str	r0, [fp, #-8]
    if (buf == NULL) {
  10ba44:	e51b3008 	ldr	r3, [fp, #-8]
  10ba48:	e3530000 	cmp	r3, #0
  10ba4c:	1a000001 	bne	10ba58 <netconn_recv+0xd0>
      return ERR_MEM;
  10ba50:	e3e03000 	mvn	r3, #0
  10ba54:	ea00002c 	b	10bb0c <netconn_recv+0x184>
    }

    err = netconn_recv_data(conn, (void **)&p);
  10ba58:	e24b3010 	sub	r3, fp, #16
  10ba5c:	e1a01003 	mov	r1, r3
  10ba60:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  10ba64:	ebfffeee 	bl	10b624 <netconn_recv_data>
  10ba68:	e1a03000 	mov	r3, r0
  10ba6c:	e54b3009 	strb	r3, [fp, #-9]
    if (err != ERR_OK) {
  10ba70:	e15b30d9 	ldrsb	r3, [fp, #-9]
  10ba74:	e3530000 	cmp	r3, #0
  10ba78:	0a000004 	beq	10ba90 <netconn_recv+0x108>
      memp_free(MEMP_NETBUF, buf);
  10ba7c:	e51b1008 	ldr	r1, [fp, #-8]
  10ba80:	e3a00007 	mov	r0, #7
  10ba84:	eb003522 	bl	118f14 <memp_free>
      return err;
  10ba88:	e15b30d9 	ldrsb	r3, [fp, #-9]
  10ba8c:	ea00001e 	b	10bb0c <netconn_recv+0x184>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
  10ba90:	e51b3010 	ldr	r3, [fp, #-16]
  10ba94:	e3530000 	cmp	r3, #0
  10ba98:	1a000006 	bne	10bab8 <netconn_recv+0x130>
  10ba9c:	e3050af0 	movw	r0, #23280	; 0x5af0
  10baa0:	e3400014 	movt	r0, #20
  10baa4:	ebffdd9a 	bl	103114 <rt_kprintf>
  10baa8:	e300128a 	movw	r1, #650	; 0x28a
  10baac:	e30508e0 	movw	r0, #22752	; 0x58e0
  10bab0:	e3400014 	movt	r0, #20
  10bab4:	ebfffc16 	bl	10ab14 <sys_arch_assert>

    buf->p = p;
  10bab8:	e51b2010 	ldr	r2, [fp, #-16]
  10babc:	e51b3008 	ldr	r3, [fp, #-8]
  10bac0:	e5832000 	str	r2, [r3]
    buf->ptr = p;
  10bac4:	e51b2010 	ldr	r2, [fp, #-16]
  10bac8:	e51b3008 	ldr	r3, [fp, #-8]
  10bacc:	e5832004 	str	r2, [r3, #4]
    buf->port = 0;
  10bad0:	e51b3008 	ldr	r3, [fp, #-8]
  10bad4:	e3a02000 	mov	r2, #0
  10bad8:	e1c320bc 	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
  10badc:	e51b3008 	ldr	r3, [fp, #-8]
  10bae0:	e3a02000 	mov	r2, #0
  10bae4:	e5832008 	str	r2, [r3, #8]
    *new_buf = buf;
  10bae8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10baec:	e51b2008 	ldr	r2, [fp, #-8]
  10baf0:	e5832000 	str	r2, [r3]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
  10baf4:	e3a03000 	mov	r3, #0
  10baf8:	ea000003 	b	10bb0c <netconn_recv+0x184>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf);
  10bafc:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  10bb00:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  10bb04:	ebfffec6 	bl	10b624 <netconn_recv_data>
  10bb08:	e1a03000 	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
  10bb0c:	e1a00003 	mov	r0, r3
  10bb10:	e24bd004 	sub	sp, fp, #4
  10bb14:	e8bd8800 	pop	{fp, pc}

0010bb18 <netconn_sendto>:
 * @param port the remote port to which to send the data
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_sendto(struct netconn *conn, struct netbuf *buf, const ip_addr_t *addr, u16_t port)
{
  10bb18:	e92d4800 	push	{fp, lr}
  10bb1c:	e28db004 	add	fp, sp, #4
  10bb20:	e24dd010 	sub	sp, sp, #16
  10bb24:	e50b0008 	str	r0, [fp, #-8]
  10bb28:	e50b100c 	str	r1, [fp, #-12]
  10bb2c:	e50b2010 	str	r2, [fp, #-16]
  10bb30:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  if (buf != NULL) {
  10bb34:	e51b300c 	ldr	r3, [fp, #-12]
  10bb38:	e3530000 	cmp	r3, #0
  10bb3c:	0a000010 	beq	10bb84 <netconn_sendto+0x6c>
    ip_addr_set(&buf->addr, addr);
  10bb40:	e51b3010 	ldr	r3, [fp, #-16]
  10bb44:	e3530000 	cmp	r3, #0
  10bb48:	0a000002 	beq	10bb58 <netconn_sendto+0x40>
  10bb4c:	e51b3010 	ldr	r3, [fp, #-16]
  10bb50:	e5933000 	ldr	r3, [r3]
  10bb54:	ea000000 	b	10bb5c <netconn_sendto+0x44>
  10bb58:	e3a03000 	mov	r3, #0
  10bb5c:	e51b200c 	ldr	r2, [fp, #-12]
  10bb60:	e5823008 	str	r3, [r2, #8]
    buf->port = port;
  10bb64:	e51b300c 	ldr	r3, [fp, #-12]
  10bb68:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  10bb6c:	e1c320bc 	strh	r2, [r3, #12]
    return netconn_send(conn, buf);
  10bb70:	e51b100c 	ldr	r1, [fp, #-12]
  10bb74:	e51b0008 	ldr	r0, [fp, #-8]
  10bb78:	eb000005 	bl	10bb94 <netconn_send>
  10bb7c:	e1a03000 	mov	r3, r0
  10bb80:	ea000000 	b	10bb88 <netconn_sendto+0x70>
  }
  return ERR_VAL;
  10bb84:	e3e03005 	mvn	r3, #5
}
  10bb88:	e1a00003 	mov	r0, r3
  10bb8c:	e24bd004 	sub	sp, fp, #4
  10bb90:	e8bd8800 	pop	{fp, pc}

0010bb94 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
  10bb94:	e92d4800 	push	{fp, lr}
  10bb98:	e28db004 	add	fp, sp, #4
  10bb9c:	e24dd028 	sub	sp, sp, #40	; 0x28
  10bba0:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10bba4:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
  10bba8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bbac:	e3530000 	cmp	r3, #0
  10bbb0:	1a000008 	bne	10bbd8 <netconn_send+0x44>
  10bbb4:	e3050afc 	movw	r0, #23292	; 0x5afc
  10bbb8:	e3400014 	movt	r0, #20
  10bbbc:	ebffdd54 	bl	103114 <rt_kprintf>
  10bbc0:	e30012c3 	movw	r1, #707	; 0x2c3
  10bbc4:	e30508e0 	movw	r0, #22752	; 0x58e0
  10bbc8:	e3400014 	movt	r0, #20
  10bbcc:	ebfffbd0 	bl	10ab14 <sys_arch_assert>
  10bbd0:	e3e0300f 	mvn	r3, #15
  10bbd4:	ea00000b 	b	10bc08 <netconn_send+0x74>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10bbd8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bbdc:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  API_MSG_VAR_REF(msg).msg.b = buf;
  10bbe0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10bbe4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
  10bbe8:	e24b3020 	sub	r3, fp, #32
  10bbec:	e1a01003 	mov	r1, r3
  10bbf0:	e30e08c0 	movw	r0, #59584	; 0xe8c0
  10bbf4:	e3400010 	movt	r0, #16
  10bbf8:	ebfffcb9 	bl	10aee4 <netconn_apimsg>
  10bbfc:	e1a03000 	mov	r3, r0
  10bc00:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  return err;
  10bc04:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10bc08:	e1a00003 	mov	r0, r3
  10bc0c:	e24bd004 	sub	sp, fp, #4
  10bc10:	e8bd8800 	pop	{fp, pc}

0010bc14 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
  10bc14:	e92d4800 	push	{fp, lr}
  10bc18:	e28db004 	add	fp, sp, #4
  10bc1c:	e24dd030 	sub	sp, sp, #48	; 0x30
  10bc20:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10bc24:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  10bc28:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  10bc2c:	e54b3031 	strb	r3, [fp, #-49]	; 0xffffffcf
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  u8_t dontblock;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
  10bc30:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bc34:	e3530000 	cmp	r3, #0
  10bc38:	1a000008 	bne	10bc60 <netconn_write_partly+0x4c>
  10bc3c:	e3050b18 	movw	r0, #23320	; 0x5b18
  10bc40:	e3400014 	movt	r0, #20
  10bc44:	ebffdd32 	bl	103114 <rt_kprintf>
  10bc48:	e30012e6 	movw	r1, #742	; 0x2e6
  10bc4c:	e30508e0 	movw	r0, #22752	; 0x58e0
  10bc50:	e3400014 	movt	r0, #20
  10bc54:	ebfffbae 	bl	10ab14 <sys_arch_assert>
  10bc58:	e3e0300f 	mvn	r3, #15
  10bc5c:	ea000057 	b	10bdc0 <netconn_write_partly+0x1ac>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
  10bc60:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bc64:	e5933000 	ldr	r3, [r3]
  10bc68:	e20330f0 	and	r3, r3, #240	; 0xf0
  10bc6c:	e3530010 	cmp	r3, #16
  10bc70:	0a000008 	beq	10bc98 <netconn_write_partly+0x84>
  10bc74:	e3050b34 	movw	r0, #23348	; 0x5b34
  10bc78:	e3400014 	movt	r0, #20
  10bc7c:	ebffdd24 	bl	103114 <rt_kprintf>
  10bc80:	e30012e7 	movw	r1, #743	; 0x2e7
  10bc84:	e30508e0 	movw	r0, #22752	; 0x58e0
  10bc88:	e3400014 	movt	r0, #20
  10bc8c:	ebfffba0 	bl	10ab14 <sys_arch_assert>
  10bc90:	e3e03005 	mvn	r3, #5
  10bc94:	ea000049 	b	10bdc0 <netconn_write_partly+0x1ac>
  if (size == 0) {
  10bc98:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  10bc9c:	e3530000 	cmp	r3, #0
  10bca0:	1a000001 	bne	10bcac <netconn_write_partly+0x98>
    return ERR_OK;
  10bca4:	e3a03000 	mov	r3, #0
  10bca8:	ea000044 	b	10bdc0 <netconn_write_partly+0x1ac>
  }
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
  10bcac:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bcb0:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10bcb4:	e2033002 	and	r3, r3, #2
  10bcb8:	e3530000 	cmp	r3, #0
  10bcbc:	1a000003 	bne	10bcd0 <netconn_write_partly+0xbc>
  10bcc0:	e55b3031 	ldrb	r3, [fp, #-49]	; 0xffffffcf
  10bcc4:	e2033004 	and	r3, r3, #4
  10bcc8:	e3530000 	cmp	r3, #0
  10bccc:	0a000001 	beq	10bcd8 <netconn_write_partly+0xc4>
  10bcd0:	e3a03001 	mov	r3, #1
  10bcd4:	ea000000 	b	10bcdc <netconn_write_partly+0xc8>
  10bcd8:	e3a03000 	mov	r3, #0
  10bcdc:	e54b3005 	strb	r3, [fp, #-5]
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
  10bce0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bce4:	e5933020 	ldr	r3, [r3, #32]
  10bce8:	e3530000 	cmp	r3, #0
  10bcec:	0a000001 	beq	10bcf8 <netconn_write_partly+0xe4>
    dontblock = 1;
  10bcf0:	e3a03001 	mov	r3, #1
  10bcf4:	e54b3005 	strb	r3, [fp, #-5]
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
  10bcf8:	e55b3005 	ldrb	r3, [fp, #-5]
  10bcfc:	e3530000 	cmp	r3, #0
  10bd00:	0a000004 	beq	10bd18 <netconn_write_partly+0x104>
  10bd04:	e59b3004 	ldr	r3, [fp, #4]
  10bd08:	e3530000 	cmp	r3, #0
  10bd0c:	1a000001 	bne	10bd18 <netconn_write_partly+0x104>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
  10bd10:	e3e03005 	mvn	r3, #5
  10bd14:	ea000029 	b	10bdc0 <netconn_write_partly+0x1ac>
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
  10bd18:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bd1c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  API_MSG_VAR_REF(msg).msg.w.dataptr = dataptr;
  10bd20:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10bd24:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
  10bd28:	e55b3031 	ldrb	r3, [fp, #-49]	; 0xffffffcf
  10bd2c:	e54b3010 	strb	r3, [fp, #-16]
  API_MSG_VAR_REF(msg).msg.w.len = size;
  10bd30:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  10bd34:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
  10bd38:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bd3c:	e5933020 	ldr	r3, [r3, #32]
  10bd40:	e3530000 	cmp	r3, #0
  10bd44:	0a000003 	beq	10bd58 <netconn_write_partly+0x144>
    /* get the time we started, which is later compared to
        sys_now() + conn->send_timeout */
    API_MSG_VAR_REF(msg).msg.w.time_started = sys_now();
  10bd48:	ebfffb8a 	bl	10ab78 <sys_now>
  10bd4c:	e1a03000 	mov	r3, r0
  10bd50:	e50b300c 	str	r3, [fp, #-12]
  10bd54:	ea000001 	b	10bd60 <netconn_write_partly+0x14c>
  } else {
    API_MSG_VAR_REF(msg).msg.w.time_started = 0;
  10bd58:	e3a03000 	mov	r3, #0
  10bd5c:	e50b300c 	str	r3, [fp, #-12]
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
  10bd60:	e24b3020 	sub	r3, fp, #32
  10bd64:	e1a01003 	mov	r1, r3
  10bd68:	e30f01b8 	movw	r0, #61880	; 0xf1b8
  10bd6c:	e3400010 	movt	r0, #16
  10bd70:	ebfffc5b 	bl	10aee4 <netconn_apimsg>
  10bd74:	e1a03000 	mov	r3, r0
  10bd78:	e54b3006 	strb	r3, [fp, #-6]
  if ((err == ERR_OK) && (bytes_written != NULL)) {
  10bd7c:	e15b30d6 	ldrsb	r3, [fp, #-6]
  10bd80:	e3530000 	cmp	r3, #0
  10bd84:	1a00000c 	bne	10bdbc <netconn_write_partly+0x1a8>
  10bd88:	e59b3004 	ldr	r3, [fp, #4]
  10bd8c:	e3530000 	cmp	r3, #0
  10bd90:	0a000009 	beq	10bdbc <netconn_write_partly+0x1a8>
    if (dontblock) {
  10bd94:	e55b3005 	ldrb	r3, [fp, #-5]
  10bd98:	e3530000 	cmp	r3, #0
  10bd9c:	0a000003 	beq	10bdb0 <netconn_write_partly+0x19c>
      /* nonblocking write: maybe the data has been sent partly */
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.len;
  10bda0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  10bda4:	e59b3004 	ldr	r3, [fp, #4]
  10bda8:	e5832000 	str	r2, [r3]
  10bdac:	ea000002 	b	10bdbc <netconn_write_partly+0x1a8>
    } else {
      /* blocking call succeeded: all data has been sent if it */
      *bytes_written = size;
  10bdb0:	e59b3004 	ldr	r3, [fp, #4]
  10bdb4:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  10bdb8:	e5832000 	str	r2, [r3]
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
  10bdbc:	e15b30d6 	ldrsb	r3, [fp, #-6]
}
  10bdc0:	e1a00003 	mov	r0, r3
  10bdc4:	e24bd004 	sub	sp, fp, #4
  10bdc8:	e8bd8800 	pop	{fp, pc}

0010bdcc <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
  10bdcc:	e92d4800 	push	{fp, lr}
  10bdd0:	e28db004 	add	fp, sp, #4
  10bdd4:	e24dd028 	sub	sp, sp, #40	; 0x28
  10bdd8:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10bddc:	e1a03001 	mov	r3, r1
  10bde0:	e54b3029 	strb	r3, [fp, #-41]	; 0xffffffd7
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
  10bde4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bde8:	e3530000 	cmp	r3, #0
  10bdec:	1a000008 	bne	10be14 <netconn_close_shutdown+0x48>
  10bdf0:	e3050b58 	movw	r0, #23384	; 0x5b58
  10bdf4:	e3400014 	movt	r0, #20
  10bdf8:	ebffdcc5 	bl	103114 <rt_kprintf>
  10bdfc:	e3a01fca 	mov	r1, #808	; 0x328
  10be00:	e30508e0 	movw	r0, #22752	; 0x58e0
  10be04:	e3400014 	movt	r0, #20
  10be08:	ebfffb41 	bl	10ab14 <sys_arch_assert>
  10be0c:	e3e0300f 	mvn	r3, #15
  10be10:	ea00000e 	b	10be50 <netconn_close_shutdown+0x84>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10be14:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10be18:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
  10be1c:	e55b3029 	ldrb	r3, [fp, #-41]	; 0xffffffd7
  10be20:	e54b3018 	strb	r3, [fp, #-24]	; 0xffffffe8
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
  10be24:	ebfffb53 	bl	10ab78 <sys_now>
  10be28:	e1a03000 	mov	r3, r0
  10be2c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
  10be30:	e24b3020 	sub	r3, fp, #32
  10be34:	e1a01003 	mov	r1, r3
  10be38:	e30f068c 	movw	r0, #63116	; 0xf68c
  10be3c:	e3400010 	movt	r0, #16
  10be40:	ebfffc27 	bl	10aee4 <netconn_apimsg>
  10be44:	e1a03000 	mov	r3, r0
  10be48:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  return err;
  10be4c:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10be50:	e1a00003 	mov	r0, r3
  10be54:	e24bd004 	sub	sp, fp, #4
  10be58:	e8bd8800 	pop	{fp, pc}

0010be5c <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
  10be5c:	e92d4800 	push	{fp, lr}
  10be60:	e28db004 	add	fp, sp, #4
  10be64:	e24dd008 	sub	sp, sp, #8
  10be68:	e50b0008 	str	r0, [fp, #-8]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
  10be6c:	e3a01003 	mov	r1, #3
  10be70:	e51b0008 	ldr	r0, [fp, #-8]
  10be74:	ebffffd4 	bl	10bdcc <netconn_close_shutdown>
  10be78:	e1a03000 	mov	r3, r0
}
  10be7c:	e1a00003 	mov	r0, r3
  10be80:	e24bd004 	sub	sp, fp, #4
  10be84:	e8bd8800 	pop	{fp, pc}

0010be88 <netconn_shutdown>:
 * @param shut_tx shut down the TX side (no more write possible after this)
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_shutdown(struct netconn *conn, u8_t shut_rx, u8_t shut_tx)
{
  10be88:	e92d4800 	push	{fp, lr}
  10be8c:	e28db004 	add	fp, sp, #4
  10be90:	e24dd008 	sub	sp, sp, #8
  10be94:	e50b0008 	str	r0, [fp, #-8]
  10be98:	e1a03001 	mov	r3, r1
  10be9c:	e54b3009 	strb	r3, [fp, #-9]
  10bea0:	e1a03002 	mov	r3, r2
  10bea4:	e54b300a 	strb	r3, [fp, #-10]
  return netconn_close_shutdown(conn, (shut_rx ? NETCONN_SHUT_RD : 0) | (shut_tx ? NETCONN_SHUT_WR : 0));
  10bea8:	e55b3009 	ldrb	r3, [fp, #-9]
  10beac:	e3530000 	cmp	r3, #0
  10beb0:	13a03001 	movne	r3, #1
  10beb4:	03a03000 	moveq	r3, #0
  10beb8:	e6ef3073 	uxtb	r3, r3
  10bebc:	e6af3073 	sxtb	r3, r3
  10bec0:	e55b200a 	ldrb	r2, [fp, #-10]
  10bec4:	e3520000 	cmp	r2, #0
  10bec8:	0a000001 	beq	10bed4 <netconn_shutdown+0x4c>
  10becc:	e3a02002 	mov	r2, #2
  10bed0:	ea000000 	b	10bed8 <netconn_shutdown+0x50>
  10bed4:	e3a02000 	mov	r2, #0
  10bed8:	e1823003 	orr	r3, r2, r3
  10bedc:	e6af3073 	sxtb	r3, r3
  10bee0:	e6ef3073 	uxtb	r3, r3
  10bee4:	e1a01003 	mov	r1, r3
  10bee8:	e51b0008 	ldr	r0, [fp, #-8]
  10beec:	ebffffb6 	bl	10bdcc <netconn_close_shutdown>
  10bef0:	e1a03000 	mov	r3, r0
}
  10bef4:	e1a00003 	mov	r0, r3
  10bef8:	e24bd004 	sub	sp, fp, #4
  10befc:	e8bd8800 	pop	{fp, pc}

0010bf00 <netconn_join_leave_group>:
err_t
netconn_join_leave_group(struct netconn *conn,
                         const ip_addr_t *multiaddr,
                         const ip_addr_t *netif_addr,
                         enum netconn_igmp join_or_leave)
{
  10bf00:	e92d4800 	push	{fp, lr}
  10bf04:	e28db004 	add	fp, sp, #4
  10bf08:	e24dd030 	sub	sp, sp, #48	; 0x30
  10bf0c:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10bf10:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  10bf14:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  10bf18:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_join_leave_group: invalid conn",  (conn != NULL), return ERR_ARG;);
  10bf1c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bf20:	e3530000 	cmp	r3, #0
  10bf24:	1a000008 	bne	10bf4c <netconn_join_leave_group+0x4c>
  10bf28:	e3050b74 	movw	r0, #23412	; 0x5b74
  10bf2c:	e3400014 	movt	r0, #20
  10bf30:	ebffdc77 	bl	103114 <rt_kprintf>
  10bf34:	e3a01e37 	mov	r1, #880	; 0x370
  10bf38:	e30508e0 	movw	r0, #22752	; 0x58e0
  10bf3c:	e3400014 	movt	r0, #20
  10bf40:	ebfffaf3 	bl	10ab14 <sys_arch_assert>
  10bf44:	e3e0300f 	mvn	r3, #15
  10bf48:	ea00001b 	b	10bfbc <netconn_join_leave_group+0xbc>

  API_MSG_VAR_ALLOC(msg);

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (multiaddr == NULL) {
  10bf4c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10bf50:	e3530000 	cmp	r3, #0
  10bf54:	1a000002 	bne	10bf64 <netconn_join_leave_group+0x64>
    multiaddr = IP4_ADDR_ANY;
  10bf58:	e3083e3c 	movw	r3, #36412	; 0x8e3c
  10bf5c:	e3403014 	movt	r3, #20
  10bf60:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  }
  if (netif_addr == NULL) {
  10bf64:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  10bf68:	e3530000 	cmp	r3, #0
  10bf6c:	1a000002 	bne	10bf7c <netconn_join_leave_group+0x7c>
    netif_addr = IP4_ADDR_ANY;
  10bf70:	e3083e3c 	movw	r3, #36412	; 0x8e3c
  10bf74:	e3403014 	movt	r3, #20
  10bf78:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_REF(msg).conn = conn;
  10bf7c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bf80:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  API_MSG_VAR_REF(msg).msg.jl.multiaddr = API_MSG_VAR_REF(multiaddr);
  10bf84:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10bf88:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  API_MSG_VAR_REF(msg).msg.jl.netif_addr = API_MSG_VAR_REF(netif_addr);
  10bf8c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  10bf90:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  API_MSG_VAR_REF(msg).msg.jl.join_or_leave = join_or_leave;
  10bf94:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  10bf98:	e50b3010 	str	r3, [fp, #-16]
  err = netconn_apimsg(lwip_netconn_do_join_leave_group, &API_MSG_VAR_REF(msg));
  10bf9c:	e24b3020 	sub	r3, fp, #32
  10bfa0:	e1a01003 	mov	r1, r3
  10bfa4:	e30f08cc 	movw	r0, #63692	; 0xf8cc
  10bfa8:	e3400010 	movt	r0, #16
  10bfac:	ebfffbcc 	bl	10aee4 <netconn_apimsg>
  10bfb0:	e1a03000 	mov	r3, r0
  10bfb4:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  return err;
  10bfb8:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10bfbc:	e1a00003 	mov	r0, r3
  10bfc0:	e24bd004 	sub	sp, fp, #4
  10bfc4:	e8bd8800 	pop	{fp, pc}

0010bfc8 <netconn_gethostbyname>:
netconn_gethostbyname_addrtype(const char *name, ip_addr_t *addr, u8_t dns_addrtype)
#else
err_t
netconn_gethostbyname(const char *name, ip_addr_t *addr)
#endif
{
  10bfc8:	e92d4800 	push	{fp, lr}
  10bfcc:	e28db004 	add	fp, sp, #4
  10bfd0:	e24dd028 	sub	sp, sp, #40	; 0x28
  10bfd4:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10bfd8:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  sys_sem_t sem;
#endif /* LWIP_MPU_COMPATIBLE */
  err_t err;
  err_t cberr;

  LWIP_ERROR("netconn_gethostbyname: invalid name", (name != NULL), return ERR_ARG;);
  10bfdc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bfe0:	e3530000 	cmp	r3, #0
  10bfe4:	1a000008 	bne	10c00c <netconn_gethostbyname+0x44>
  10bfe8:	e3050b9c 	movw	r0, #23452	; 0x5b9c
  10bfec:	e3400014 	movt	r0, #20
  10bff0:	ebffdc47 	bl	103114 <rt_kprintf>
  10bff4:	e30013a5 	movw	r1, #933	; 0x3a5
  10bff8:	e30508e0 	movw	r0, #22752	; 0x58e0
  10bffc:	e3400014 	movt	r0, #20
  10c000:	ebfffac3 	bl	10ab14 <sys_arch_assert>
  10c004:	e3e0300f 	mvn	r3, #15
  10c008:	ea000036 	b	10c0e8 <netconn_gethostbyname+0x120>
  LWIP_ERROR("netconn_gethostbyname: invalid addr", (addr != NULL), return ERR_ARG;);
  10c00c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10c010:	e3530000 	cmp	r3, #0
  10c014:	1a000008 	bne	10c03c <netconn_gethostbyname+0x74>
  10c018:	e3050bc0 	movw	r0, #23488	; 0x5bc0
  10c01c:	e3400014 	movt	r0, #20
  10c020:	ebffdc3b 	bl	103114 <rt_kprintf>
  10c024:	e30013a6 	movw	r1, #934	; 0x3a6
  10c028:	e30508e0 	movw	r0, #22752	; 0x58e0
  10c02c:	e3400014 	movt	r0, #20
  10c030:	ebfffab7 	bl	10ab14 <sys_arch_assert>
  10c034:	e3e0300f 	mvn	r3, #15
  10c038:	ea00002a 	b	10c0e8 <netconn_gethostbyname+0x120>
  API_VAR_ALLOC(struct dns_api_msg, MEMP_DNS_API_MSG, msg, ERR_MEM);
#if LWIP_MPU_COMPATIBLE
  strncpy(API_VAR_REF(msg).name, name, DNS_MAX_NAME_LENGTH-1);
  API_VAR_REF(msg).name[DNS_MAX_NAME_LENGTH-1] = 0;
#else /* LWIP_MPU_COMPATIBLE */
  msg.err = &err;
  10c03c:	e24b301d 	sub	r3, fp, #29
  10c040:	e50b300c 	str	r3, [fp, #-12]
  msg.sem = &sem;
  10c044:	e24b301c 	sub	r3, fp, #28
  10c048:	e50b3010 	str	r3, [fp, #-16]
  API_VAR_REF(msg).addr = API_VAR_REF(addr);
  10c04c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10c050:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  API_VAR_REF(msg).name = name;
  10c054:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c058:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  API_VAR_REF(msg).dns_addrtype = dns_addrtype;
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_NETCONN_SEM_PER_THREAD
  API_VAR_REF(msg).sem = LWIP_NETCONN_THREAD_SEM_GET();
#else /* LWIP_NETCONN_SEM_PER_THREAD*/
  err = sys_sem_new(API_EXPR_REF(API_VAR_REF(msg).sem), 0);
  10c05c:	e51b3010 	ldr	r3, [fp, #-16]
  10c060:	e3a01000 	mov	r1, #0
  10c064:	e1a00003 	mov	r0, r3
  10c068:	ebfff817 	bl	10a0cc <sys_sem_new>
  10c06c:	e1a03000 	mov	r3, r0
  10c070:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  if (err != ERR_OK) {
  10c074:	e15b31dd 	ldrsb	r3, [fp, #-29]	; 0xffffffe3
  10c078:	e3530000 	cmp	r3, #0
  10c07c:	0a000001 	beq	10c088 <netconn_gethostbyname+0xc0>
    API_VAR_FREE(MEMP_DNS_API_MSG, msg);
    return err;
  10c080:	e15b31dd 	ldrsb	r3, [fp, #-29]	; 0xffffffe3
  10c084:	ea000017 	b	10c0e8 <netconn_gethostbyname+0x120>
  }
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  cberr = tcpip_callback(lwip_netconn_do_gethostbyname, &API_VAR_REF(msg));
  10c088:	e24b3018 	sub	r3, fp, #24
  10c08c:	e3a02001 	mov	r2, #1
  10c090:	e1a01003 	mov	r1, r3
  10c094:	e30f0a94 	movw	r0, #64148	; 0xfa94
  10c098:	e3400010 	movt	r0, #16
  10c09c:	eb002772 	bl	115e6c <tcpip_callback_with_block>
  10c0a0:	e1a03000 	mov	r3, r0
  10c0a4:	e54b3005 	strb	r3, [fp, #-5]
  if (cberr != ERR_OK) {
  10c0a8:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10c0ac:	e3530000 	cmp	r3, #0
  10c0b0:	0a000004 	beq	10c0c8 <netconn_gethostbyname+0x100>
#if !LWIP_NETCONN_SEM_PER_THREAD
    sys_sem_free(API_EXPR_REF(API_VAR_REF(msg).sem));
  10c0b4:	e51b3010 	ldr	r3, [fp, #-16]
  10c0b8:	e1a00003 	mov	r0, r3
  10c0bc:	ebfff82d 	bl	10a178 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
    API_VAR_FREE(MEMP_DNS_API_MSG, msg);
    return cberr;
  10c0c0:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10c0c4:	ea000007 	b	10c0e8 <netconn_gethostbyname+0x120>
  }
  sys_sem_wait(API_EXPR_REF_SEM(API_VAR_REF(msg).sem));
  10c0c8:	e51b3010 	ldr	r3, [fp, #-16]
  10c0cc:	e3a01000 	mov	r1, #0
  10c0d0:	e1a00003 	mov	r0, r3
  10c0d4:	ebfff83d 	bl	10a1d0 <sys_arch_sem_wait>
#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(API_EXPR_REF(API_VAR_REF(msg).sem));
  10c0d8:	e51b3010 	ldr	r3, [fp, #-16]
  10c0dc:	e1a00003 	mov	r0, r3
  10c0e0:	ebfff824 	bl	10a178 <sys_sem_free>
  *addr = msg->addr;
  err = msg->err;
#endif /* LWIP_MPU_COMPATIBLE */

  API_VAR_FREE(MEMP_DNS_API_MSG, msg);
  return err;
  10c0e4:	e15b31dd 	ldrsb	r3, [fp, #-29]	; 0xffffffe3
}
  10c0e8:	e1a00003 	mov	r0, r3
  10c0ec:	e24bd004 	sub	sp, fp, #4
  10c0f0:	e8bd8800 	pop	{fp, pc}

0010c0f4 <recv_raw>:
 * @see raw.h (struct raw_pcb.recv) for parameters and return value
 */
static u8_t
recv_raw(void *arg, struct raw_pcb *pcb, struct pbuf *p,
    const ip_addr_t *addr)
{
  10c0f4:	e92d4800 	push	{fp, lr}
  10c0f8:	e28db004 	add	fp, sp, #4
  10c0fc:	e24dd028 	sub	sp, sp, #40	; 0x28
  10c100:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  10c104:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  10c108:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  10c10c:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  struct pbuf *q;
  struct netbuf *buf;
  struct netconn *conn;

  LWIP_UNUSED_ARG(addr);
  conn = (struct netconn *)arg;
  10c110:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10c114:	e50b300c 	str	r3, [fp, #-12]

  if ((conn != NULL) && sys_mbox_valid(&conn->recvmbox)) {
  10c118:	e51b300c 	ldr	r3, [fp, #-12]
  10c11c:	e3530000 	cmp	r3, #0
  10c120:	0a00006b 	beq	10c2d4 <recv_raw+0x1e0>
  10c124:	e51b300c 	ldr	r3, [fp, #-12]
  10c128:	e2833014 	add	r3, r3, #20
  10c12c:	e1a00003 	mov	r0, r3
  10c130:	ebfffa2e 	bl	10a9f0 <sys_mbox_valid>
  10c134:	e1a03000 	mov	r3, r0
  10c138:	e3530000 	cmp	r3, #0
  10c13c:	0a000064 	beq	10c2d4 <recv_raw+0x1e0>
#if LWIP_SO_RCVBUF
    int recv_avail;
    SYS_ARCH_GET(conn->recv_avail, recv_avail);
  10c140:	ebffd83d 	bl	10223c <rt_enter_critical>
  10c144:	e51b300c 	ldr	r3, [fp, #-12]
  10c148:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  10c14c:	e50b3010 	str	r3, [fp, #-16]
  10c150:	ebffd83f 	bl	102254 <rt_exit_critical>
    if ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize) {
  10c154:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c158:	e1d330b8 	ldrh	r3, [r3, #8]
  10c15c:	e1a02003 	mov	r2, r3
  10c160:	e51b3010 	ldr	r3, [fp, #-16]
  10c164:	e0822003 	add	r2, r2, r3
  10c168:	e51b300c 	ldr	r3, [fp, #-12]
  10c16c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  10c170:	e1520003 	cmp	r2, r3
  10c174:	da000001 	ble	10c180 <recv_raw+0x8c>
      return 0;
  10c178:	e3a03000 	mov	r3, #0
  10c17c:	ea000055 	b	10c2d8 <recv_raw+0x1e4>
    }
#endif /* LWIP_SO_RCVBUF */
    /* copy the whole packet into new pbufs */
    q = pbuf_alloc(PBUF_RAW, p->tot_len, PBUF_RAM);
  10c180:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c184:	e1d330b8 	ldrh	r3, [r3, #8]
  10c188:	e3a02000 	mov	r2, #0
  10c18c:	e1a01003 	mov	r1, r3
  10c190:	e3a00004 	mov	r0, #4
  10c194:	eb003765 	bl	119f30 <pbuf_alloc>
  10c198:	e50b0008 	str	r0, [fp, #-8]
    if (q != NULL) {
  10c19c:	e51b3008 	ldr	r3, [fp, #-8]
  10c1a0:	e3530000 	cmp	r3, #0
  10c1a4:	0a000009 	beq	10c1d0 <recv_raw+0xdc>
      if (pbuf_copy(q, p) != ERR_OK) {
  10c1a8:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  10c1ac:	e51b0008 	ldr	r0, [fp, #-8]
  10c1b0:	eb003bba 	bl	11b0a0 <pbuf_copy>
  10c1b4:	e1a03000 	mov	r3, r0
  10c1b8:	e3530000 	cmp	r3, #0
  10c1bc:	0a000003 	beq	10c1d0 <recv_raw+0xdc>
        pbuf_free(q);
  10c1c0:	e51b0008 	ldr	r0, [fp, #-8]
  10c1c4:	eb003a60 	bl	11ab4c <pbuf_free>
        q = NULL;
  10c1c8:	e3a03000 	mov	r3, #0
  10c1cc:	e50b3008 	str	r3, [fp, #-8]
      }
    }

    if (q != NULL) {
  10c1d0:	e51b3008 	ldr	r3, [fp, #-8]
  10c1d4:	e3530000 	cmp	r3, #0
  10c1d8:	0a00003d 	beq	10c2d4 <recv_raw+0x1e0>
      u16_t len;
      buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
  10c1dc:	e3a02081 	mov	r2, #129	; 0x81
  10c1e0:	e3051be4 	movw	r1, #23524	; 0x5be4
  10c1e4:	e3401014 	movt	r1, #20
  10c1e8:	e3a00007 	mov	r0, #7
  10c1ec:	eb0032e0 	bl	118d74 <memp_malloc_fn>
  10c1f0:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
      if (buf == NULL) {
  10c1f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10c1f8:	e3530000 	cmp	r3, #0
  10c1fc:	1a000003 	bne	10c210 <recv_raw+0x11c>
        pbuf_free(q);
  10c200:	e51b0008 	ldr	r0, [fp, #-8]
  10c204:	eb003a50 	bl	11ab4c <pbuf_free>
        return 0;
  10c208:	e3a03000 	mov	r3, #0
  10c20c:	ea000031 	b	10c2d8 <recv_raw+0x1e4>
      }

      buf->p = q;
  10c210:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10c214:	e51b2008 	ldr	r2, [fp, #-8]
  10c218:	e5832000 	str	r2, [r3]
      buf->ptr = q;
  10c21c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10c220:	e51b2008 	ldr	r2, [fp, #-8]
  10c224:	e5832004 	str	r2, [r3, #4]
      ip_addr_copy(buf->addr, *ip_current_src_addr());
  10c228:	e30e3d68 	movw	r3, #60776	; 0xed68
  10c22c:	e3403014 	movt	r3, #20
  10c230:	e5932010 	ldr	r2, [r3, #16]
  10c234:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10c238:	e5832008 	str	r2, [r3, #8]
      buf->port = pcb->protocol;
  10c23c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  10c240:	e5d33010 	ldrb	r3, [r3, #16]
  10c244:	e6ff2073 	uxth	r2, r3
  10c248:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10c24c:	e1c320bc 	strh	r2, [r3, #12]

      len = q->tot_len;
  10c250:	e51b3008 	ldr	r3, [fp, #-8]
  10c254:	e1d330b8 	ldrh	r3, [r3, #8]
  10c258:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
      if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
  10c25c:	e51b300c 	ldr	r3, [fp, #-12]
  10c260:	e2833014 	add	r3, r3, #20
  10c264:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10c268:	e1a00003 	mov	r0, r3
  10c26c:	ebfff981 	bl	10a878 <sys_mbox_trypost>
  10c270:	e1a03000 	mov	r3, r0
  10c274:	e3530000 	cmp	r3, #0
  10c278:	0a000003 	beq	10c28c <recv_raw+0x198>
        netbuf_delete(buf);
  10c27c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  10c280:	eb000e50 	bl	10fbc8 <netbuf_delete>
        return 0;
  10c284:	e3a03000 	mov	r3, #0
  10c288:	ea000012 	b	10c2d8 <recv_raw+0x1e4>
      } else {
#if LWIP_SO_RCVBUF
        SYS_ARCH_INC(conn->recv_avail, len);
  10c28c:	ebffd7ea 	bl	10223c <rt_enter_critical>
  10c290:	e51b300c 	ldr	r3, [fp, #-12]
  10c294:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
  10c298:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  10c29c:	e0822003 	add	r2, r2, r3
  10c2a0:	e51b300c 	ldr	r3, [fp, #-12]
  10c2a4:	e583202c 	str	r2, [r3, #44]	; 0x2c
  10c2a8:	ebffd7e9 	bl	102254 <rt_exit_critical>
#endif /* LWIP_SO_RCVBUF */
        /* Register event with callback */
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
  10c2ac:	e51b300c 	ldr	r3, [fp, #-12]
  10c2b0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c2b4:	e3530000 	cmp	r3, #0
  10c2b8:	0a000005 	beq	10c2d4 <recv_raw+0x1e0>
  10c2bc:	e51b300c 	ldr	r3, [fp, #-12]
  10c2c0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c2c4:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  10c2c8:	e3a01000 	mov	r1, #0
  10c2cc:	e51b000c 	ldr	r0, [fp, #-12]
  10c2d0:	e12fff33 	blx	r3
      }
    }
  }

  return 0; /* do not eat the packet */
  10c2d4:	e3a03000 	mov	r3, #0
}
  10c2d8:	e1a00003 	mov	r0, r3
  10c2dc:	e24bd004 	sub	sp, fp, #4
  10c2e0:	e8bd8800 	pop	{fp, pc}

0010c2e4 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
   const ip_addr_t *addr, u16_t port)
{
  10c2e4:	e92d4800 	push	{fp, lr}
  10c2e8:	e28db004 	add	fp, sp, #4
  10c2ec:	e24dd020 	sub	sp, sp, #32
  10c2f0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10c2f4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  10c2f8:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  10c2fc:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
  10c300:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10c304:	e3530000 	cmp	r3, #0
  10c308:	1a000006 	bne	10c328 <recv_udp+0x44>
  10c30c:	e3050c14 	movw	r0, #23572	; 0x5c14
  10c310:	e3400014 	movt	r0, #20
  10c314:	ebffdb7e 	bl	103114 <rt_kprintf>
  10c318:	e3a010b1 	mov	r1, #177	; 0xb1
  10c31c:	e3050be4 	movw	r0, #23524	; 0x5be4
  10c320:	e3400014 	movt	r0, #20
  10c324:	ebfff9fa 	bl	10ab14 <sys_arch_assert>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
  10c328:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10c32c:	e3530000 	cmp	r3, #0
  10c330:	1a000006 	bne	10c350 <recv_udp+0x6c>
  10c334:	e3050c38 	movw	r0, #23608	; 0x5c38
  10c338:	e3400014 	movt	r0, #20
  10c33c:	ebffdb74 	bl	103114 <rt_kprintf>
  10c340:	e3a010b2 	mov	r1, #178	; 0xb2
  10c344:	e3050be4 	movw	r0, #23524	; 0x5be4
  10c348:	e3400014 	movt	r0, #20
  10c34c:	ebfff9f0 	bl	10ab14 <sys_arch_assert>
  conn = (struct netconn *)arg;
  10c350:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10c354:	e50b3008 	str	r3, [fp, #-8]
  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
  10c358:	e51b3008 	ldr	r3, [fp, #-8]
  10c35c:	e5933008 	ldr	r3, [r3, #8]
  10c360:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  10c364:	e1520003 	cmp	r2, r3
  10c368:	0a000006 	beq	10c388 <recv_udp+0xa4>
  10c36c:	e3050c58 	movw	r0, #23640	; 0x5c58
  10c370:	e3400014 	movt	r0, #20
  10c374:	ebffdb66 	bl	103114 <rt_kprintf>
  10c378:	e3a010b4 	mov	r1, #180	; 0xb4
  10c37c:	e3050be4 	movw	r0, #23524	; 0x5be4
  10c380:	e3400014 	movt	r0, #20
  10c384:	ebfff9e2 	bl	10ab14 <sys_arch_assert>

#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  10c388:	ebffd7ab 	bl	10223c <rt_enter_critical>
  10c38c:	e51b3008 	ldr	r3, [fp, #-8]
  10c390:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  10c394:	e50b300c 	str	r3, [fp, #-12]
  10c398:	ebffd7ad 	bl	102254 <rt_exit_critical>
  if ((conn == NULL) || !sys_mbox_valid(&conn->recvmbox) ||
  10c39c:	e51b3008 	ldr	r3, [fp, #-8]
  10c3a0:	e3530000 	cmp	r3, #0
  10c3a4:	0a00000f 	beq	10c3e8 <recv_udp+0x104>
  10c3a8:	e51b3008 	ldr	r3, [fp, #-8]
  10c3ac:	e2833014 	add	r3, r3, #20
  10c3b0:	e1a00003 	mov	r0, r3
  10c3b4:	ebfff98d 	bl	10a9f0 <sys_mbox_valid>
  10c3b8:	e1a03000 	mov	r3, r0
  10c3bc:	e3530000 	cmp	r3, #0
  10c3c0:	0a000008 	beq	10c3e8 <recv_udp+0x104>
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
  10c3c4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10c3c8:	e1d330b8 	ldrh	r3, [r3, #8]
  10c3cc:	e1a02003 	mov	r2, r3
  10c3d0:	e51b300c 	ldr	r3, [fp, #-12]
  10c3d4:	e0822003 	add	r2, r2, r3
  10c3d8:	e51b3008 	ldr	r3, [fp, #-8]
  10c3dc:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  if ((conn == NULL) || !sys_mbox_valid(&conn->recvmbox) ||
  10c3e0:	e1520003 	cmp	r2, r3
  10c3e4:	da000002 	ble	10c3f4 <recv_udp+0x110>
#else  /* LWIP_SO_RCVBUF */
  if ((conn == NULL) || !sys_mbox_valid(&conn->recvmbox)) {
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
  10c3e8:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10c3ec:	eb0039d6 	bl	11ab4c <pbuf_free>
    return;
  10c3f0:	ea00003d 	b	10c4ec <recv_udp+0x208>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
  10c3f4:	e3a020c1 	mov	r2, #193	; 0xc1
  10c3f8:	e3051be4 	movw	r1, #23524	; 0x5be4
  10c3fc:	e3401014 	movt	r1, #20
  10c400:	e3a00007 	mov	r0, #7
  10c404:	eb00325a 	bl	118d74 <memp_malloc_fn>
  10c408:	e50b0010 	str	r0, [fp, #-16]
  if (buf == NULL) {
  10c40c:	e51b3010 	ldr	r3, [fp, #-16]
  10c410:	e3530000 	cmp	r3, #0
  10c414:	1a000002 	bne	10c424 <recv_udp+0x140>
    pbuf_free(p);
  10c418:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10c41c:	eb0039ca 	bl	11ab4c <pbuf_free>
    return;
  10c420:	ea000031 	b	10c4ec <recv_udp+0x208>
  } else {
    buf->p = p;
  10c424:	e51b3010 	ldr	r3, [fp, #-16]
  10c428:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  10c42c:	e5832000 	str	r2, [r3]
    buf->ptr = p;
  10c430:	e51b3010 	ldr	r3, [fp, #-16]
  10c434:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  10c438:	e5832004 	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
  10c43c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  10c440:	e3530000 	cmp	r3, #0
  10c444:	0a000002 	beq	10c454 <recv_udp+0x170>
  10c448:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  10c44c:	e5933000 	ldr	r3, [r3]
  10c450:	ea000000 	b	10c458 <recv_udp+0x174>
  10c454:	e3a03000 	mov	r3, #0
  10c458:	e51b2010 	ldr	r2, [fp, #-16]
  10c45c:	e5823008 	str	r3, [r2, #8]
    buf->port = port;
  10c460:	e51b3010 	ldr	r3, [fp, #-16]
  10c464:	e1db20b4 	ldrh	r2, [fp, #4]
  10c468:	e1c320bc 	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
  10c46c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10c470:	e1d330b8 	ldrh	r3, [r3, #8]
  10c474:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
  10c478:	e51b3008 	ldr	r3, [fp, #-8]
  10c47c:	e2833014 	add	r3, r3, #20
  10c480:	e51b1010 	ldr	r1, [fp, #-16]
  10c484:	e1a00003 	mov	r0, r3
  10c488:	ebfff8fa 	bl	10a878 <sys_mbox_trypost>
  10c48c:	e1a03000 	mov	r3, r0
  10c490:	e3530000 	cmp	r3, #0
  10c494:	0a000002 	beq	10c4a4 <recv_udp+0x1c0>
    netbuf_delete(buf);
  10c498:	e51b0010 	ldr	r0, [fp, #-16]
  10c49c:	eb000dc9 	bl	10fbc8 <netbuf_delete>
    return;
  10c4a0:	ea000011 	b	10c4ec <recv_udp+0x208>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
  10c4a4:	ebffd764 	bl	10223c <rt_enter_critical>
  10c4a8:	e51b3008 	ldr	r3, [fp, #-8]
  10c4ac:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
  10c4b0:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  10c4b4:	e0822003 	add	r2, r2, r3
  10c4b8:	e51b3008 	ldr	r3, [fp, #-8]
  10c4bc:	e583202c 	str	r2, [r3, #44]	; 0x2c
  10c4c0:	ebffd763 	bl	102254 <rt_exit_critical>
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
  10c4c4:	e51b3008 	ldr	r3, [fp, #-8]
  10c4c8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c4cc:	e3530000 	cmp	r3, #0
  10c4d0:	0a000005 	beq	10c4ec <recv_udp+0x208>
  10c4d4:	e51b3008 	ldr	r3, [fp, #-8]
  10c4d8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c4dc:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  10c4e0:	e3a01000 	mov	r1, #0
  10c4e4:	e51b0008 	ldr	r0, [fp, #-8]
  10c4e8:	e12fff33 	blx	r3
  }
}
  10c4ec:	e24bd004 	sub	sp, fp, #4
  10c4f0:	e8bd8800 	pop	{fp, pc}

0010c4f4 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
  10c4f4:	e92d4800 	push	{fp, lr}
  10c4f8:	e28db004 	add	fp, sp, #4
  10c4fc:	e24dd018 	sub	sp, sp, #24
  10c500:	e50b0010 	str	r0, [fp, #-16]
  10c504:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10c508:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  10c50c:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  struct netconn *conn;
  u16_t len;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
  10c510:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10c514:	e3530000 	cmp	r3, #0
  10c518:	1a000006 	bne	10c538 <recv_tcp+0x44>
  10c51c:	e3050c78 	movw	r0, #23672	; 0x5c78
  10c520:	e3400014 	movt	r0, #20
  10c524:	ebffdafa 	bl	103114 <rt_kprintf>
  10c528:	e3a010f3 	mov	r1, #243	; 0xf3
  10c52c:	e3050be4 	movw	r0, #23524	; 0x5be4
  10c530:	e3400014 	movt	r0, #20
  10c534:	ebfff976 	bl	10ab14 <sys_arch_assert>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
  10c538:	e51b3010 	ldr	r3, [fp, #-16]
  10c53c:	e3530000 	cmp	r3, #0
  10c540:	1a000006 	bne	10c560 <recv_tcp+0x6c>
  10c544:	e3050c9c 	movw	r0, #23708	; 0x5c9c
  10c548:	e3400014 	movt	r0, #20
  10c54c:	ebffdaf0 	bl	103114 <rt_kprintf>
  10c550:	e3a010f4 	mov	r1, #244	; 0xf4
  10c554:	e3050be4 	movw	r0, #23524	; 0x5be4
  10c558:	e3400014 	movt	r0, #20
  10c55c:	ebfff96c 	bl	10ab14 <sys_arch_assert>
  conn = (struct netconn *)arg;
  10c560:	e51b3010 	ldr	r3, [fp, #-16]
  10c564:	e50b300c 	str	r3, [fp, #-12]

  if (conn == NULL) {
  10c568:	e51b300c 	ldr	r3, [fp, #-12]
  10c56c:	e3530000 	cmp	r3, #0
  10c570:	1a000001 	bne	10c57c <recv_tcp+0x88>
    return ERR_VAL;
  10c574:	e3e03005 	mvn	r3, #5
  10c578:	ea000053 	b	10c6cc <recv_tcp+0x1d8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
  10c57c:	e51b300c 	ldr	r3, [fp, #-12]
  10c580:	e5933008 	ldr	r3, [r3, #8]
  10c584:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  10c588:	e1520003 	cmp	r2, r3
  10c58c:	0a000006 	beq	10c5ac <recv_tcp+0xb8>
  10c590:	e3050cbc 	movw	r0, #23740	; 0x5cbc
  10c594:	e3400014 	movt	r0, #20
  10c598:	ebffdadd 	bl	103114 <rt_kprintf>
  10c59c:	e3a010fa 	mov	r1, #250	; 0xfa
  10c5a0:	e3050be4 	movw	r0, #23524	; 0x5be4
  10c5a4:	e3400014 	movt	r0, #20
  10c5a8:	ebfff959 	bl	10ab14 <sys_arch_assert>

  if (!sys_mbox_valid(&conn->recvmbox)) {
  10c5ac:	e51b300c 	ldr	r3, [fp, #-12]
  10c5b0:	e2833014 	add	r3, r3, #20
  10c5b4:	e1a00003 	mov	r0, r3
  10c5b8:	ebfff90c 	bl	10a9f0 <sys_mbox_valid>
  10c5bc:	e1a03000 	mov	r3, r0
  10c5c0:	e3530000 	cmp	r3, #0
  10c5c4:	1a00000b 	bne	10c5f8 <recv_tcp+0x104>
    /* recvmbox already deleted */
    if (p != NULL) {
  10c5c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10c5cc:	e3530000 	cmp	r3, #0
  10c5d0:	0a000006 	beq	10c5f0 <recv_tcp+0xfc>
      tcp_recved(pcb, p->tot_len);
  10c5d4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10c5d8:	e1d330b8 	ldrh	r3, [r3, #8]
  10c5dc:	e1a01003 	mov	r1, r3
  10c5e0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  10c5e4:	eb0045e4 	bl	11dd7c <tcp_recved>
      pbuf_free(p);
  10c5e8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  10c5ec:	eb003956 	bl	11ab4c <pbuf_free>
    }
    return ERR_OK;
  10c5f0:	e3a03000 	mov	r3, #0
  10c5f4:	ea000034 	b	10c6cc <recv_tcp+0x1d8>
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  /* don't overwrite fatal errors! */
  if (err != ERR_OK) {
  10c5f8:	e15b31d9 	ldrsb	r3, [fp, #-25]	; 0xffffffe7
  10c5fc:	e3530000 	cmp	r3, #0
  10c600:	0a00000b 	beq	10c634 <recv_tcp+0x140>
    NETCONN_SET_SAFE_ERR(conn, err);
  10c604:	e51b300c 	ldr	r3, [fp, #-12]
  10c608:	e3530000 	cmp	r3, #0
  10c60c:	0a000008 	beq	10c634 <recv_tcp+0x140>
  10c610:	ebffd709 	bl	10223c <rt_enter_critical>
  10c614:	e51b300c 	ldr	r3, [fp, #-12]
  10c618:	e1d330dc 	ldrsb	r3, [r3, #12]
  10c61c:	e373000c 	cmn	r3, #12
  10c620:	ba000002 	blt	10c630 <recv_tcp+0x13c>
  10c624:	e51b300c 	ldr	r3, [fp, #-12]
  10c628:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  10c62c:	e5c3200c 	strb	r2, [r3, #12]
  10c630:	ebffd707 	bl	102254 <rt_exit_critical>
  }

  if (p != NULL) {
  10c634:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10c638:	e3530000 	cmp	r3, #0
  10c63c:	0a000003 	beq	10c650 <recv_tcp+0x15c>
    len = p->tot_len;
  10c640:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10c644:	e1d330b8 	ldrh	r3, [r3, #8]
  10c648:	e14b30b6 	strh	r3, [fp, #-6]
  10c64c:	ea000001 	b	10c658 <recv_tcp+0x164>
  } else {
    len = 0;
  10c650:	e3a03000 	mov	r3, #0
  10c654:	e14b30b6 	strh	r3, [fp, #-6]
  }

  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
  10c658:	e51b300c 	ldr	r3, [fp, #-12]
  10c65c:	e2833014 	add	r3, r3, #20
  10c660:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  10c664:	e1a00003 	mov	r0, r3
  10c668:	ebfff882 	bl	10a878 <sys_mbox_trypost>
  10c66c:	e1a03000 	mov	r3, r0
  10c670:	e3530000 	cmp	r3, #0
  10c674:	0a000001 	beq	10c680 <recv_tcp+0x18c>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
  10c678:	e3e03000 	mvn	r3, #0
  10c67c:	ea000012 	b	10c6cc <recv_tcp+0x1d8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
  10c680:	ebffd6ed 	bl	10223c <rt_enter_critical>
  10c684:	e51b300c 	ldr	r3, [fp, #-12]
  10c688:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
  10c68c:	e15b30b6 	ldrh	r3, [fp, #-6]
  10c690:	e0822003 	add	r2, r2, r3
  10c694:	e51b300c 	ldr	r3, [fp, #-12]
  10c698:	e583202c 	str	r2, [r3, #44]	; 0x2c
  10c69c:	ebffd6ec 	bl	102254 <rt_exit_critical>
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
  10c6a0:	e51b300c 	ldr	r3, [fp, #-12]
  10c6a4:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c6a8:	e3530000 	cmp	r3, #0
  10c6ac:	0a000005 	beq	10c6c8 <recv_tcp+0x1d4>
  10c6b0:	e51b300c 	ldr	r3, [fp, #-12]
  10c6b4:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c6b8:	e15b20b6 	ldrh	r2, [fp, #-6]
  10c6bc:	e3a01000 	mov	r1, #0
  10c6c0:	e51b000c 	ldr	r0, [fp, #-12]
  10c6c4:	e12fff33 	blx	r3
  }

  return ERR_OK;
  10c6c8:	e3a03000 	mov	r3, #0
}
  10c6cc:	e1a00003 	mov	r0, r3
  10c6d0:	e24bd004 	sub	sp, fp, #4
  10c6d4:	e8bd8800 	pop	{fp, pc}

0010c6d8 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
  10c6d8:	e92d4800 	push	{fp, lr}
  10c6dc:	e28db004 	add	fp, sp, #4
  10c6e0:	e24dd010 	sub	sp, sp, #16
  10c6e4:	e50b0010 	str	r0, [fp, #-16]
  10c6e8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct netconn *conn = (struct netconn *)arg;
  10c6ec:	e51b3010 	ldr	r3, [fp, #-16]
  10c6f0:	e50b3008 	str	r3, [fp, #-8]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
  10c6f4:	e51b3008 	ldr	r3, [fp, #-8]
  10c6f8:	e3530000 	cmp	r3, #0
  10c6fc:	1a000006 	bne	10c71c <poll_tcp+0x44>
  10c700:	e3050cdc 	movw	r0, #23772	; 0x5cdc
  10c704:	e3400014 	movt	r0, #20
  10c708:	ebffda81 	bl	103114 <rt_kprintf>
  10c70c:	e3001132 	movw	r1, #306	; 0x132
  10c710:	e3050be4 	movw	r0, #23524	; 0x5be4
  10c714:	e3400014 	movt	r0, #20
  10c718:	ebfff8fd 	bl	10ab14 <sys_arch_assert>

  if (conn->state == NETCONN_WRITE) {
  10c71c:	e51b3008 	ldr	r3, [fp, #-8]
  10c720:	e5933004 	ldr	r3, [r3, #4]
  10c724:	e3530001 	cmp	r3, #1
  10c728:	1a000003 	bne	10c73c <poll_tcp+0x64>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
  10c72c:	e3a01001 	mov	r1, #1
  10c730:	e51b0008 	ldr	r0, [fp, #-8]
  10c734:	eb000924 	bl	10ebcc <lwip_netconn_do_writemore>
  10c738:	ea000006 	b	10c758 <poll_tcp+0x80>
  } else if (conn->state == NETCONN_CLOSE) {
  10c73c:	e51b3008 	ldr	r3, [fp, #-8]
  10c740:	e5933004 	ldr	r3, [r3, #4]
  10c744:	e3530004 	cmp	r3, #4
  10c748:	1a000002 	bne	10c758 <poll_tcp+0x80>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
      conn->current_msg->msg.sd.polls_left--;
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
  10c74c:	e3a01001 	mov	r1, #1
  10c750:	e51b0008 	ldr	r0, [fp, #-8]
  10c754:	eb000394 	bl	10d5ac <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
  10c758:	e51b3008 	ldr	r3, [fp, #-8]
  10c75c:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10c760:	e2033010 	and	r3, r3, #16
  10c764:	e3530000 	cmp	r3, #0
  10c768:	0a00001d 	beq	10c7e4 <poll_tcp+0x10c>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
  10c76c:	e51b3008 	ldr	r3, [fp, #-8]
  10c770:	e5933008 	ldr	r3, [r3, #8]
  10c774:	e3530000 	cmp	r3, #0
  10c778:	0a000019 	beq	10c7e4 <poll_tcp+0x10c>
  10c77c:	e51b3008 	ldr	r3, [fp, #-8]
  10c780:	e5933008 	ldr	r3, [r3, #8]
  10c784:	e1d336b4 	ldrh	r3, [r3, #100]	; 0x64
  10c788:	e3530a01 	cmp	r3, #4096	; 0x1000
  10c78c:	9a000014 	bls	10c7e4 <poll_tcp+0x10c>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
  10c790:	e51b3008 	ldr	r3, [fp, #-8]
  10c794:	e5933008 	ldr	r3, [r3, #8]
  10c798:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
  10c79c:	e353000a 	cmp	r3, #10
  10c7a0:	8a00000f 	bhi	10c7e4 <poll_tcp+0x10c>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
  10c7a4:	e51b3008 	ldr	r3, [fp, #-8]
  10c7a8:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10c7ac:	e3c33010 	bic	r3, r3, #16
  10c7b0:	e6ef2073 	uxtb	r2, r3
  10c7b4:	e51b3008 	ldr	r3, [fp, #-8]
  10c7b8:	e5c32030 	strb	r2, [r3, #48]	; 0x30
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
  10c7bc:	e51b3008 	ldr	r3, [fp, #-8]
  10c7c0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c7c4:	e3530000 	cmp	r3, #0
  10c7c8:	0a000005 	beq	10c7e4 <poll_tcp+0x10c>
  10c7cc:	e51b3008 	ldr	r3, [fp, #-8]
  10c7d0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c7d4:	e3a02000 	mov	r2, #0
  10c7d8:	e3a01002 	mov	r1, #2
  10c7dc:	e51b0008 	ldr	r0, [fp, #-8]
  10c7e0:	e12fff33 	blx	r3
    }
  }

  return ERR_OK;
  10c7e4:	e3a03000 	mov	r3, #0
}
  10c7e8:	e1a00003 	mov	r0, r3
  10c7ec:	e24bd004 	sub	sp, fp, #4
  10c7f0:	e8bd8800 	pop	{fp, pc}

0010c7f4 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
  10c7f4:	e92d4800 	push	{fp, lr}
  10c7f8:	e28db004 	add	fp, sp, #4
  10c7fc:	e24dd018 	sub	sp, sp, #24
  10c800:	e50b0010 	str	r0, [fp, #-16]
  10c804:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10c808:	e1a03002 	mov	r3, r2
  10c80c:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  struct netconn *conn = (struct netconn *)arg;
  10c810:	e51b3010 	ldr	r3, [fp, #-16]
  10c814:	e50b3008 	str	r3, [fp, #-8]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
  10c818:	e51b3008 	ldr	r3, [fp, #-8]
  10c81c:	e3530000 	cmp	r3, #0
  10c820:	1a000006 	bne	10c840 <sent_tcp+0x4c>
  10c824:	e3050cdc 	movw	r0, #23772	; 0x5cdc
  10c828:	e3400014 	movt	r0, #20
  10c82c:	ebffda38 	bl	103114 <rt_kprintf>
  10c830:	e300115b 	movw	r1, #347	; 0x15b
  10c834:	e3050be4 	movw	r0, #23524	; 0x5be4
  10c838:	e3400014 	movt	r0, #20
  10c83c:	ebfff8b4 	bl	10ab14 <sys_arch_assert>

  if (conn) {
  10c840:	e51b3008 	ldr	r3, [fp, #-8]
  10c844:	e3530000 	cmp	r3, #0
  10c848:	0a00002c 	beq	10c900 <sent_tcp+0x10c>
    if (conn->state == NETCONN_WRITE) {
  10c84c:	e51b3008 	ldr	r3, [fp, #-8]
  10c850:	e5933004 	ldr	r3, [r3, #4]
  10c854:	e3530001 	cmp	r3, #1
  10c858:	1a000003 	bne	10c86c <sent_tcp+0x78>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
  10c85c:	e3a01001 	mov	r1, #1
  10c860:	e51b0008 	ldr	r0, [fp, #-8]
  10c864:	eb0008d8 	bl	10ebcc <lwip_netconn_do_writemore>
  10c868:	ea000006 	b	10c888 <sent_tcp+0x94>
    } else if (conn->state == NETCONN_CLOSE) {
  10c86c:	e51b3008 	ldr	r3, [fp, #-8]
  10c870:	e5933004 	ldr	r3, [r3, #4]
  10c874:	e3530004 	cmp	r3, #4
  10c878:	1a000002 	bne	10c888 <sent_tcp+0x94>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
  10c87c:	e3a01001 	mov	r1, #1
  10c880:	e51b0008 	ldr	r0, [fp, #-8]
  10c884:	eb000348 	bl	10d5ac <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
  10c888:	e51b3008 	ldr	r3, [fp, #-8]
  10c88c:	e5933008 	ldr	r3, [r3, #8]
  10c890:	e3530000 	cmp	r3, #0
  10c894:	0a000019 	beq	10c900 <sent_tcp+0x10c>
  10c898:	e51b3008 	ldr	r3, [fp, #-8]
  10c89c:	e5933008 	ldr	r3, [r3, #8]
  10c8a0:	e1d336b4 	ldrh	r3, [r3, #100]	; 0x64
  10c8a4:	e3530a01 	cmp	r3, #4096	; 0x1000
  10c8a8:	9a000014 	bls	10c900 <sent_tcp+0x10c>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
  10c8ac:	e51b3008 	ldr	r3, [fp, #-8]
  10c8b0:	e5933008 	ldr	r3, [r3, #8]
  10c8b4:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
  10c8b8:	e353000a 	cmp	r3, #10
  10c8bc:	8a00000f 	bhi	10c900 <sent_tcp+0x10c>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
  10c8c0:	e51b3008 	ldr	r3, [fp, #-8]
  10c8c4:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10c8c8:	e3c33010 	bic	r3, r3, #16
  10c8cc:	e6ef2073 	uxtb	r2, r3
  10c8d0:	e51b3008 	ldr	r3, [fp, #-8]
  10c8d4:	e5c32030 	strb	r2, [r3, #48]	; 0x30
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
  10c8d8:	e51b3008 	ldr	r3, [fp, #-8]
  10c8dc:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c8e0:	e3530000 	cmp	r3, #0
  10c8e4:	0a000005 	beq	10c900 <sent_tcp+0x10c>
  10c8e8:	e51b3008 	ldr	r3, [fp, #-8]
  10c8ec:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c8f0:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  10c8f4:	e3a01002 	mov	r1, #2
  10c8f8:	e51b0008 	ldr	r0, [fp, #-8]
  10c8fc:	e12fff33 	blx	r3
    }
  }

  return ERR_OK;
  10c900:	e3a03000 	mov	r3, #0
}
  10c904:	e1a00003 	mov	r0, r3
  10c908:	e24bd004 	sub	sp, fp, #4
  10c90c:	e8bd8800 	pop	{fp, pc}

0010c910 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
  10c910:	e92d4800 	push	{fp, lr}
  10c914:	e28db004 	add	fp, sp, #4
  10c918:	e24dd018 	sub	sp, sp, #24
  10c91c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10c920:	e1a03001 	mov	r3, r1
  10c924:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  struct netconn *conn;
  enum netconn_state old_state;

  conn = (struct netconn *)arg;
  10c928:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10c92c:	e50b3008 	str	r3, [fp, #-8]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
  10c930:	e51b3008 	ldr	r3, [fp, #-8]
  10c934:	e3530000 	cmp	r3, #0
  10c938:	1a000006 	bne	10c958 <err_tcp+0x48>
  10c93c:	e3050cdc 	movw	r0, #23772	; 0x5cdc
  10c940:	e3400014 	movt	r0, #20
  10c944:	ebffd9f2 	bl	103114 <rt_kprintf>
  10c948:	e300117e 	movw	r1, #382	; 0x17e
  10c94c:	e3050be4 	movw	r0, #23524	; 0x5be4
  10c950:	e3400014 	movt	r0, #20
  10c954:	ebfff86e 	bl	10ab14 <sys_arch_assert>

  conn->pcb.tcp = NULL;
  10c958:	e51b3008 	ldr	r3, [fp, #-8]
  10c95c:	e3a02000 	mov	r2, #0
  10c960:	e5832008 	str	r2, [r3, #8]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
  10c964:	e51b3008 	ldr	r3, [fp, #-8]
  10c968:	e5933004 	ldr	r3, [r3, #4]
  10c96c:	e50b300c 	str	r3, [fp, #-12]
  conn->state = NETCONN_NONE;
  10c970:	e51b3008 	ldr	r3, [fp, #-8]
  10c974:	e3a02000 	mov	r2, #0
  10c978:	e5832004 	str	r2, [r3, #4]

  if (old_state == NETCONN_CLOSE) {
  10c97c:	e51b300c 	ldr	r3, [fp, #-12]
  10c980:	e3530004 	cmp	r3, #4
  10c984:	1a00000e 	bne	10c9c4 <err_tcp+0xb4>
    /* RST during close: let close return success & dealloc the netconn */
    err = ERR_OK;
  10c988:	e3a03000 	mov	r3, #0
  10c98c:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
    NETCONN_SET_SAFE_ERR(conn, ERR_OK);
  10c990:	e51b3008 	ldr	r3, [fp, #-8]
  10c994:	e3530000 	cmp	r3, #0
  10c998:	0a00000e 	beq	10c9d8 <err_tcp+0xc8>
  10c99c:	ebffd626 	bl	10223c <rt_enter_critical>
  10c9a0:	e51b3008 	ldr	r3, [fp, #-8]
  10c9a4:	e1d330dc 	ldrsb	r3, [r3, #12]
  10c9a8:	e373000c 	cmn	r3, #12
  10c9ac:	ba000002 	blt	10c9bc <err_tcp+0xac>
  10c9b0:	e51b3008 	ldr	r3, [fp, #-8]
  10c9b4:	e3a02000 	mov	r2, #0
  10c9b8:	e5c3200c 	strb	r2, [r3, #12]
  10c9bc:	ebffd624 	bl	102254 <rt_exit_critical>
  10c9c0:	ea000004 	b	10c9d8 <err_tcp+0xc8>
  } else {
    /* no check since this is always fatal! */
    SYS_ARCH_SET(conn->last_err, err);
  10c9c4:	ebffd61c 	bl	10223c <rt_enter_critical>
  10c9c8:	e51b3008 	ldr	r3, [fp, #-8]
  10c9cc:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  10c9d0:	e5c3200c 	strb	r2, [r3, #12]
  10c9d4:	ebffd61e 	bl	102254 <rt_exit_critical>
  }

  /* @todo: the type of NETCONN_EVT created should depend on 'old_state' */

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
  10c9d8:	e51b3008 	ldr	r3, [fp, #-8]
  10c9dc:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c9e0:	e3530000 	cmp	r3, #0
  10c9e4:	0a000005 	beq	10ca00 <err_tcp+0xf0>
  10c9e8:	e51b3008 	ldr	r3, [fp, #-8]
  10c9ec:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c9f0:	e3a02000 	mov	r2, #0
  10c9f4:	e3a01004 	mov	r1, #4
  10c9f8:	e51b0008 	ldr	r0, [fp, #-8]
  10c9fc:	e12fff33 	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
  10ca00:	e51b3008 	ldr	r3, [fp, #-8]
  10ca04:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10ca08:	e3530000 	cmp	r3, #0
  10ca0c:	0a000005 	beq	10ca28 <err_tcp+0x118>
  10ca10:	e51b3008 	ldr	r3, [fp, #-8]
  10ca14:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10ca18:	e3a02000 	mov	r2, #0
  10ca1c:	e3a01000 	mov	r1, #0
  10ca20:	e51b0008 	ldr	r0, [fp, #-8]
  10ca24:	e12fff33 	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
  10ca28:	e51b3008 	ldr	r3, [fp, #-8]
  10ca2c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10ca30:	e3530000 	cmp	r3, #0
  10ca34:	0a000005 	beq	10ca50 <err_tcp+0x140>
  10ca38:	e51b3008 	ldr	r3, [fp, #-8]
  10ca3c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10ca40:	e3a02000 	mov	r2, #0
  10ca44:	e3a01002 	mov	r1, #2
  10ca48:	e51b0008 	ldr	r0, [fp, #-8]
  10ca4c:	e12fff33 	blx	r3

  /* pass NULL-message to recvmbox to wake up pending recv */
  if (sys_mbox_valid(&conn->recvmbox)) {
  10ca50:	e51b3008 	ldr	r3, [fp, #-8]
  10ca54:	e2833014 	add	r3, r3, #20
  10ca58:	e1a00003 	mov	r0, r3
  10ca5c:	ebfff7e3 	bl	10a9f0 <sys_mbox_valid>
  10ca60:	e1a03000 	mov	r3, r0
  10ca64:	e3530000 	cmp	r3, #0
  10ca68:	0a000004 	beq	10ca80 <err_tcp+0x170>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, NULL);
  10ca6c:	e51b3008 	ldr	r3, [fp, #-8]
  10ca70:	e2833014 	add	r3, r3, #20
  10ca74:	e3a01000 	mov	r1, #0
  10ca78:	e1a00003 	mov	r0, r3
  10ca7c:	ebfff77d 	bl	10a878 <sys_mbox_trypost>
  }
  /* pass NULL-message to acceptmbox to wake up pending accept */
  if (sys_mbox_valid(&conn->acceptmbox)) {
  10ca80:	e51b3008 	ldr	r3, [fp, #-8]
  10ca84:	e2833018 	add	r3, r3, #24
  10ca88:	e1a00003 	mov	r0, r3
  10ca8c:	ebfff7d7 	bl	10a9f0 <sys_mbox_valid>
  10ca90:	e1a03000 	mov	r3, r0
  10ca94:	e3530000 	cmp	r3, #0
  10ca98:	0a000004 	beq	10cab0 <err_tcp+0x1a0>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, NULL);
  10ca9c:	e51b3008 	ldr	r3, [fp, #-8]
  10caa0:	e2833018 	add	r3, r3, #24
  10caa4:	e3a01000 	mov	r1, #0
  10caa8:	e1a00003 	mov	r0, r3
  10caac:	ebfff771 	bl	10a878 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
  10cab0:	e51b300c 	ldr	r3, [fp, #-12]
  10cab4:	e3530001 	cmp	r3, #1
  10cab8:	0a000005 	beq	10cad4 <err_tcp+0x1c4>
  10cabc:	e51b300c 	ldr	r3, [fp, #-12]
  10cac0:	e3530004 	cmp	r3, #4
  10cac4:	0a000002 	beq	10cad4 <err_tcp+0x1c4>
  10cac8:	e51b300c 	ldr	r3, [fp, #-12]
  10cacc:	e3530003 	cmp	r3, #3
  10cad0:	1a000042 	bne	10cbe0 <err_tcp+0x2d0>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
  10cad4:	e51b3008 	ldr	r3, [fp, #-8]
  10cad8:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10cadc:	e2033004 	and	r3, r3, #4
  10cae0:	e3530000 	cmp	r3, #0
  10cae4:	13a03001 	movne	r3, #1
  10cae8:	03a03000 	moveq	r3, #0
  10caec:	e6ef3073 	uxtb	r3, r3
  10caf0:	e50b3010 	str	r3, [fp, #-16]
    SET_NONBLOCKING_CONNECT(conn, 0);
  10caf4:	e51b3008 	ldr	r3, [fp, #-8]
  10caf8:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10cafc:	e3c33004 	bic	r3, r3, #4
  10cb00:	e6ef2073 	uxtb	r2, r3
  10cb04:	e51b3008 	ldr	r3, [fp, #-8]
  10cb08:	e5c32030 	strb	r2, [r3, #48]	; 0x30

    if (!was_nonblocking_connect) {
  10cb0c:	e51b3010 	ldr	r3, [fp, #-16]
  10cb10:	e3530000 	cmp	r3, #0
  10cb14:	1a00003d 	bne	10cc10 <err_tcp+0x300>
      sys_sem_t* op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
  10cb18:	e51b3008 	ldr	r3, [fp, #-8]
  10cb1c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10cb20:	e3530000 	cmp	r3, #0
  10cb24:	1a000006 	bne	10cb44 <err_tcp+0x234>
  10cb28:	e3050cec 	movw	r0, #23788	; 0x5cec
  10cb2c:	e3400014 	movt	r0, #20
  10cb30:	ebffd977 	bl	103114 <rt_kprintf>
  10cb34:	e30011ad 	movw	r1, #429	; 0x1ad
  10cb38:	e3050be4 	movw	r0, #23524	; 0x5be4
  10cb3c:	e3400014 	movt	r0, #20
  10cb40:	ebfff7f3 	bl	10ab14 <sys_arch_assert>
      conn->current_msg->err = err;
  10cb44:	e51b3008 	ldr	r3, [fp, #-8]
  10cb48:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10cb4c:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  10cb50:	e5c32004 	strb	r2, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
  10cb54:	e51b3008 	ldr	r3, [fp, #-8]
  10cb58:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10cb5c:	e5933000 	ldr	r3, [r3]
  10cb60:	e2833010 	add	r3, r3, #16
  10cb64:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
  10cb68:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  10cb6c:	ebfff5ca 	bl	10a29c <sys_sem_valid>
  10cb70:	e1a03000 	mov	r3, r0
  10cb74:	e3530000 	cmp	r3, #0
  10cb78:	1a000006 	bne	10cb98 <err_tcp+0x288>
  10cb7c:	e3050d08 	movw	r0, #23816	; 0x5d08
  10cb80:	e3400014 	movt	r0, #20
  10cb84:	ebffd962 	bl	103114 <rt_kprintf>
  10cb88:	e3a01e1b 	mov	r1, #432	; 0x1b0
  10cb8c:	e3050be4 	movw	r0, #23524	; 0x5be4
  10cb90:	e3400014 	movt	r0, #20
  10cb94:	ebfff7de 	bl	10ab14 <sys_arch_assert>
      conn->current_msg = NULL;
  10cb98:	e51b3008 	ldr	r3, [fp, #-8]
  10cb9c:	e3a02000 	mov	r2, #0
  10cba0:	e5832038 	str	r2, [r3, #56]	; 0x38
      /* wake up the waiting task */
      NETCONN_SET_SAFE_ERR(conn, err);
  10cba4:	e51b3008 	ldr	r3, [fp, #-8]
  10cba8:	e3530000 	cmp	r3, #0
  10cbac:	0a000008 	beq	10cbd4 <err_tcp+0x2c4>
  10cbb0:	ebffd5a1 	bl	10223c <rt_enter_critical>
  10cbb4:	e51b3008 	ldr	r3, [fp, #-8]
  10cbb8:	e1d330dc 	ldrsb	r3, [r3, #12]
  10cbbc:	e373000c 	cmn	r3, #12
  10cbc0:	ba000002 	blt	10cbd0 <err_tcp+0x2c0>
  10cbc4:	e51b3008 	ldr	r3, [fp, #-8]
  10cbc8:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  10cbcc:	e5c3200c 	strb	r2, [r3, #12]
  10cbd0:	ebffd59f 	bl	102254 <rt_exit_critical>
      sys_sem_signal(op_completed_sem);
  10cbd4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  10cbd8:	ebfff571 	bl	10a1a4 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
  10cbdc:	ea00000b 	b	10cc10 <err_tcp+0x300>
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
  10cbe0:	e51b3008 	ldr	r3, [fp, #-8]
  10cbe4:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10cbe8:	e3530000 	cmp	r3, #0
  10cbec:	0a000008 	beq	10cc14 <err_tcp+0x304>
  10cbf0:	e3050d24 	movw	r0, #23844	; 0x5d24
  10cbf4:	e3400014 	movt	r0, #20
  10cbf8:	ebffd945 	bl	103114 <rt_kprintf>
  10cbfc:	e30011b7 	movw	r1, #439	; 0x1b7
  10cc00:	e3050be4 	movw	r0, #23524	; 0x5be4
  10cc04:	e3400014 	movt	r0, #20
  10cc08:	ebfff7c1 	bl	10ab14 <sys_arch_assert>
  }
}
  10cc0c:	ea000000 	b	10cc14 <err_tcp+0x304>
      (old_state == NETCONN_CONNECT)) {
  10cc10:	e320f000 	nop	{0}
}
  10cc14:	e320f000 	nop	{0}
  10cc18:	e24bd004 	sub	sp, fp, #4
  10cc1c:	e8bd8800 	pop	{fp, pc}

0010cc20 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
  10cc20:	e92d4800 	push	{fp, lr}
  10cc24:	e28db004 	add	fp, sp, #4
  10cc28:	e24dd010 	sub	sp, sp, #16
  10cc2c:	e50b0010 	str	r0, [fp, #-16]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
  10cc30:	e51b3010 	ldr	r3, [fp, #-16]
  10cc34:	e5933008 	ldr	r3, [r3, #8]
  10cc38:	e50b3008 	str	r3, [fp, #-8]
  tcp_arg(pcb, conn);
  10cc3c:	e51b1010 	ldr	r1, [fp, #-16]
  10cc40:	e51b0008 	ldr	r0, [fp, #-8]
  10cc44:	eb004aed 	bl	11f800 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
  10cc48:	e30c14f4 	movw	r1, #50420	; 0xc4f4
  10cc4c:	e3401010 	movt	r1, #16
  10cc50:	e51b0008 	ldr	r0, [fp, #-8]
  10cc54:	eb004af8 	bl	11f83c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
  10cc58:	e30c17f4 	movw	r1, #51188	; 0xc7f4
  10cc5c:	e3401010 	movt	r1, #16
  10cc60:	e51b0008 	ldr	r0, [fp, #-8]
  10cc64:	eb004b0d 	bl	11f8a0 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
  10cc68:	e3a02002 	mov	r2, #2
  10cc6c:	e30c16d8 	movw	r1, #50904	; 0xc6d8
  10cc70:	e3401010 	movt	r1, #16
  10cc74:	e51b0008 	ldr	r0, [fp, #-8]
  10cc78:	eb004b4f 	bl	11f9bc <tcp_poll>
  tcp_err(pcb, err_tcp);
  10cc7c:	e30c1910 	movw	r1, #51472	; 0xc910
  10cc80:	e3401010 	movt	r1, #16
  10cc84:	e51b0008 	ldr	r0, [fp, #-8]
  10cc88:	eb004b1d 	bl	11f904 <tcp_err>
}
  10cc8c:	e320f000 	nop	{0}
  10cc90:	e24bd004 	sub	sp, fp, #4
  10cc94:	e8bd8800 	pop	{fp, pc}

0010cc98 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
  10cc98:	e92d4800 	push	{fp, lr}
  10cc9c:	e28db004 	add	fp, sp, #4
  10cca0:	e24dd020 	sub	sp, sp, #32
  10cca4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10cca8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  10ccac:	e1a03002 	mov	r3, r2
  10ccb0:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
  10ccb4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10ccb8:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->tate: %s\n", tcp_debug_state_str(newpcb->state)));

  if (conn == NULL) {
  10ccbc:	e51b3008 	ldr	r3, [fp, #-8]
  10ccc0:	e3530000 	cmp	r3, #0
  10ccc4:	1a000001 	bne	10ccd0 <accept_function+0x38>
    return ERR_VAL;
  10ccc8:	e3e03005 	mvn	r3, #5
  10cccc:	ea00007d 	b	10cec8 <accept_function+0x230>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
  10ccd0:	e51b3008 	ldr	r3, [fp, #-8]
  10ccd4:	e2833018 	add	r3, r3, #24
  10ccd8:	e1a00003 	mov	r0, r3
  10ccdc:	ebfff743 	bl	10a9f0 <sys_mbox_valid>
  10cce0:	e1a03000 	mov	r3, r0
  10cce4:	e3530000 	cmp	r3, #0
  10cce8:	1a000001 	bne	10ccf4 <accept_function+0x5c>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
  10ccec:	e3e03005 	mvn	r3, #5
  10ccf0:	ea000074 	b	10cec8 <accept_function+0x230>
  }

  if (newpcb == NULL) {
  10ccf4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10ccf8:	e3530000 	cmp	r3, #0
  10ccfc:	1a000014 	bne	10cd54 <accept_function+0xbc>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
  10cd00:	e51b3008 	ldr	r3, [fp, #-8]
  10cd04:	e2833018 	add	r3, r3, #24
  10cd08:	e30e1cfc 	movw	r1, #60668	; 0xecfc
  10cd0c:	e3401014 	movt	r1, #20
  10cd10:	e1a00003 	mov	r0, r3
  10cd14:	ebfff6d7 	bl	10a878 <sys_mbox_trypost>
  10cd18:	e1a03000 	mov	r3, r0
  10cd1c:	e3530000 	cmp	r3, #0
  10cd20:	1a000009 	bne	10cd4c <accept_function+0xb4>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
  10cd24:	e51b3008 	ldr	r3, [fp, #-8]
  10cd28:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cd2c:	e3530000 	cmp	r3, #0
  10cd30:	0a000005 	beq	10cd4c <accept_function+0xb4>
  10cd34:	e51b3008 	ldr	r3, [fp, #-8]
  10cd38:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cd3c:	e3a02000 	mov	r2, #0
  10cd40:	e3a01000 	mov	r1, #0
  10cd44:	e51b0008 	ldr	r0, [fp, #-8]
  10cd48:	e12fff33 	blx	r3
    }
    return ERR_VAL;
  10cd4c:	e3e03005 	mvn	r3, #5
  10cd50:	ea00005c 	b	10cec8 <accept_function+0x230>
  }

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
  10cd54:	e51b3008 	ldr	r3, [fp, #-8]
  10cd58:	e5932000 	ldr	r2, [r3]
  10cd5c:	e51b3008 	ldr	r3, [fp, #-8]
  10cd60:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cd64:	e1a01003 	mov	r1, r3
  10cd68:	e1a00002 	mov	r0, r2
  10cd6c:	eb0000f7 	bl	10d150 <netconn_alloc>
  10cd70:	e50b000c 	str	r0, [fp, #-12]
  if (newconn == NULL) {
  10cd74:	e51b300c 	ldr	r3, [fp, #-12]
  10cd78:	e3530000 	cmp	r3, #0
  10cd7c:	1a000014 	bne	10cdd4 <accept_function+0x13c>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
  10cd80:	e51b3008 	ldr	r3, [fp, #-8]
  10cd84:	e2833018 	add	r3, r3, #24
  10cd88:	e30e1cfc 	movw	r1, #60668	; 0xecfc
  10cd8c:	e3401014 	movt	r1, #20
  10cd90:	e1a00003 	mov	r0, r3
  10cd94:	ebfff6b7 	bl	10a878 <sys_mbox_trypost>
  10cd98:	e1a03000 	mov	r3, r0
  10cd9c:	e3530000 	cmp	r3, #0
  10cda0:	1a000009 	bne	10cdcc <accept_function+0x134>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
  10cda4:	e51b3008 	ldr	r3, [fp, #-8]
  10cda8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cdac:	e3530000 	cmp	r3, #0
  10cdb0:	0a000005 	beq	10cdcc <accept_function+0x134>
  10cdb4:	e51b3008 	ldr	r3, [fp, #-8]
  10cdb8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cdbc:	e3a02000 	mov	r2, #0
  10cdc0:	e3a01000 	mov	r1, #0
  10cdc4:	e51b0008 	ldr	r0, [fp, #-8]
  10cdc8:	e12fff33 	blx	r3
    }
    return ERR_MEM;
  10cdcc:	e3e03000 	mvn	r3, #0
  10cdd0:	ea00003c 	b	10cec8 <accept_function+0x230>
  }
  newconn->pcb.tcp = newpcb;
  10cdd4:	e51b300c 	ldr	r3, [fp, #-12]
  10cdd8:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  10cddc:	e5832008 	str	r2, [r3, #8]
  setup_tcp(newconn);
  10cde0:	e51b000c 	ldr	r0, [fp, #-12]
  10cde4:	ebffff8d 	bl	10cc20 <setup_tcp>
  /* no protection: when creating the pcb, the netconn is not yet known
     to the application thread */
  newconn->last_err = err;
  10cde8:	e51b300c 	ldr	r3, [fp, #-12]
  10cdec:	e55b201d 	ldrb	r2, [fp, #-29]	; 0xffffffe3
  10cdf0:	e5c3200c 	strb	r2, [r3, #12]

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
  10cdf4:	e51b3008 	ldr	r3, [fp, #-8]
  10cdf8:	e2833018 	add	r3, r3, #24
  10cdfc:	e51b100c 	ldr	r1, [fp, #-12]
  10ce00:	e1a00003 	mov	r0, r3
  10ce04:	ebfff69b 	bl	10a878 <sys_mbox_trypost>
  10ce08:	e1a03000 	mov	r3, r0
  10ce0c:	e3530000 	cmp	r3, #0
  10ce10:	0a000021 	beq	10ce9c <accept_function+0x204>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb* pcb = newconn->pcb.tcp;
  10ce14:	e51b300c 	ldr	r3, [fp, #-12]
  10ce18:	e5933008 	ldr	r3, [r3, #8]
  10ce1c:	e50b3010 	str	r3, [fp, #-16]
    tcp_arg(pcb, NULL);
  10ce20:	e3a01000 	mov	r1, #0
  10ce24:	e51b0010 	ldr	r0, [fp, #-16]
  10ce28:	eb004a74 	bl	11f800 <tcp_arg>
    tcp_recv(pcb, NULL);
  10ce2c:	e3a01000 	mov	r1, #0
  10ce30:	e51b0010 	ldr	r0, [fp, #-16]
  10ce34:	eb004a80 	bl	11f83c <tcp_recv>
    tcp_sent(pcb, NULL);
  10ce38:	e3a01000 	mov	r1, #0
  10ce3c:	e51b0010 	ldr	r0, [fp, #-16]
  10ce40:	eb004a96 	bl	11f8a0 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
  10ce44:	e3a02000 	mov	r2, #0
  10ce48:	e3a01000 	mov	r1, #0
  10ce4c:	e51b0010 	ldr	r0, [fp, #-16]
  10ce50:	eb004ad9 	bl	11f9bc <tcp_poll>
    tcp_err(pcb, NULL);
  10ce54:	e3a01000 	mov	r1, #0
  10ce58:	e51b0010 	ldr	r0, [fp, #-16]
  10ce5c:	eb004aa8 	bl	11f904 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
  10ce60:	e51b300c 	ldr	r3, [fp, #-12]
  10ce64:	e3a02000 	mov	r2, #0
  10ce68:	e5832008 	str	r2, [r3, #8]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
  10ce6c:	e51b300c 	ldr	r3, [fp, #-12]
  10ce70:	e2833014 	add	r3, r3, #20
  10ce74:	e1a00003 	mov	r0, r3
  10ce78:	ebfff61e 	bl	10a6f8 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
  10ce7c:	e51b300c 	ldr	r3, [fp, #-12]
  10ce80:	e2833014 	add	r3, r3, #20
  10ce84:	e1a00003 	mov	r0, r3
  10ce88:	ebfff6e2 	bl	10aa18 <sys_mbox_set_invalid>
    netconn_free(newconn);
  10ce8c:	e51b000c 	ldr	r0, [fp, #-12]
  10ce90:	eb000122 	bl	10d320 <netconn_free>
    return ERR_MEM;
  10ce94:	e3e03000 	mvn	r3, #0
  10ce98:	ea00000a 	b	10cec8 <accept_function+0x230>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
  10ce9c:	e51b3008 	ldr	r3, [fp, #-8]
  10cea0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cea4:	e3530000 	cmp	r3, #0
  10cea8:	0a000005 	beq	10cec4 <accept_function+0x22c>
  10ceac:	e51b3008 	ldr	r3, [fp, #-8]
  10ceb0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10ceb4:	e3a02000 	mov	r2, #0
  10ceb8:	e3a01000 	mov	r1, #0
  10cebc:	e51b0008 	ldr	r0, [fp, #-8]
  10cec0:	e12fff33 	blx	r3
  }

  return ERR_OK;
  10cec4:	e3a03000 	mov	r3, #0
}
  10cec8:	e1a00003 	mov	r0, r3
  10cecc:	e24bd004 	sub	sp, fp, #4
  10ced0:	e8bd8800 	pop	{fp, pc}

0010ced4 <pcb_new>:
 *
 * @param msg the api_msg_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
  10ced4:	e92d4810 	push	{r4, fp, lr}
  10ced8:	e28db008 	add	fp, sp, #8
  10cedc:	e24dd014 	sub	sp, sp, #20
  10cee0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
  10cee4:	e3a03000 	mov	r3, #0
  10cee8:	e50b3010 	str	r3, [fp, #-16]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
  10ceec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10cef0:	e5933000 	ldr	r3, [r3]
  10cef4:	e5933008 	ldr	r3, [r3, #8]
  10cef8:	e3530000 	cmp	r3, #0
  10cefc:	0a000006 	beq	10cf1c <pcb_new+0x48>
  10cf00:	e3050d40 	movw	r0, #23872	; 0x5d40
  10cf04:	e3400014 	movt	r0, #20
  10cf08:	ebffd881 	bl	103114 <rt_kprintf>
  10cf0c:	e3001226 	movw	r1, #550	; 0x226
  10cf10:	e3050be4 	movw	r0, #23524	; 0x5be4
  10cf14:	e3400014 	movt	r0, #20
  10cf18:	ebfff6fd 	bl	10ab14 <sys_arch_assert>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch(NETCONNTYPE_GROUP(msg->conn->type)) {
  10cf1c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10cf20:	e5933000 	ldr	r3, [r3]
  10cf24:	e5933000 	ldr	r3, [r3]
  10cf28:	e20330f0 	and	r3, r3, #240	; 0xf0
  10cf2c:	e3530020 	cmp	r3, #32
  10cf30:	0a00001d 	beq	10cfac <pcb_new+0xd8>
  10cf34:	e3530040 	cmp	r3, #64	; 0x40
  10cf38:	0a000002 	beq	10cf48 <pcb_new+0x74>
  10cf3c:	e3530010 	cmp	r3, #16
  10cf40:	0a00003a 	beq	10d030 <pcb_new+0x15c>
  10cf44:	ea00004b 	b	10d078 <pcb_new+0x1a4>
#if LWIP_RAW
  case NETCONN_RAW:
    msg->conn->pcb.raw = raw_new_ip_type(iptype, msg->msg.n.proto);
  10cf48:	e51b3010 	ldr	r3, [fp, #-16]
  10cf4c:	e6ef2073 	uxtb	r2, r3
  10cf50:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10cf54:	e5d31008 	ldrb	r1, [r3, #8]
  10cf58:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10cf5c:	e5934000 	ldr	r4, [r3]
  10cf60:	e1a00002 	mov	r0, r2
  10cf64:	eb003d6a 	bl	11c514 <raw_new_ip_type>
  10cf68:	e1a03000 	mov	r3, r0
  10cf6c:	e5843008 	str	r3, [r4, #8]
    if (msg->conn->pcb.raw != NULL) {
  10cf70:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10cf74:	e5933000 	ldr	r3, [r3]
  10cf78:	e5933008 	ldr	r3, [r3, #8]
  10cf7c:	e3530000 	cmp	r3, #0
  10cf80:	0a000040 	beq	10d088 <pcb_new+0x1b4>
      if (NETCONNTYPE_ISIPV6(msg->conn->type) && msg->conn->pcb.raw->protocol == IP6_NEXTH_ICMP6) {
        msg->conn->pcb.raw->chksum_reqd = 1;
        msg->conn->pcb.raw->chksum_offset = 2;
      }
#endif /* LWIP_IPV6 */
      raw_recv(msg->conn->pcb.raw, recv_raw, msg->conn);
  10cf84:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10cf88:	e5933000 	ldr	r3, [r3]
  10cf8c:	e5930008 	ldr	r0, [r3, #8]
  10cf90:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10cf94:	e5933000 	ldr	r3, [r3]
  10cf98:	e1a02003 	mov	r2, r3
  10cf9c:	e30c10f4 	movw	r1, #49396	; 0xc0f4
  10cfa0:	e3401010 	movt	r1, #16
  10cfa4:	eb003c57 	bl	11c108 <raw_recv>
    }
    break;
  10cfa8:	ea000036 	b	10d088 <pcb_new+0x1b4>
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    msg->conn->pcb.udp = udp_new_ip_type(iptype);
  10cfac:	e51b3010 	ldr	r3, [fp, #-16]
  10cfb0:	e6ef2073 	uxtb	r2, r3
  10cfb4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10cfb8:	e5934000 	ldr	r4, [r3]
  10cfbc:	e1a00002 	mov	r0, r2
  10cfc0:	eb006dfd 	bl	1287bc <udp_new_ip_type>
  10cfc4:	e1a03000 	mov	r3, r0
  10cfc8:	e5843008 	str	r3, [r4, #8]
    if (msg->conn->pcb.udp != NULL) {
  10cfcc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10cfd0:	e5933000 	ldr	r3, [r3]
  10cfd4:	e5933008 	ldr	r3, [r3, #8]
  10cfd8:	e3530000 	cmp	r3, #0
  10cfdc:	0a00002b 	beq	10d090 <pcb_new+0x1bc>
#if LWIP_UDPLITE
      if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
      }
#endif /* LWIP_UDPLITE */
      if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
  10cfe0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10cfe4:	e5933000 	ldr	r3, [r3]
  10cfe8:	e5933000 	ldr	r3, [r3]
  10cfec:	e3530022 	cmp	r3, #34	; 0x22
  10cff0:	1a000004 	bne	10d008 <pcb_new+0x134>
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
  10cff4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10cff8:	e5933000 	ldr	r3, [r3]
  10cffc:	e5933008 	ldr	r3, [r3, #8]
  10d000:	e3a02001 	mov	r2, #1
  10d004:	e5c32010 	strb	r2, [r3, #16]
      }
      udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
  10d008:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d00c:	e5933000 	ldr	r3, [r3]
  10d010:	e5930008 	ldr	r0, [r3, #8]
  10d014:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d018:	e5933000 	ldr	r3, [r3]
  10d01c:	e1a02003 	mov	r2, r3
  10d020:	e30c12e4 	movw	r1, #49892	; 0xc2e4
  10d024:	e3401010 	movt	r1, #16
  10d028:	eb006d88 	bl	128650 <udp_recv>
    }
    break;
  10d02c:	ea000017 	b	10d090 <pcb_new+0x1bc>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
  10d030:	e51b3010 	ldr	r3, [fp, #-16]
  10d034:	e6ef2073 	uxtb	r2, r3
  10d038:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d03c:	e5934000 	ldr	r4, [r3]
  10d040:	e1a00002 	mov	r0, r2
  10d044:	eb0049e1 	bl	11f7d0 <tcp_new_ip_type>
  10d048:	e1a03000 	mov	r3, r0
  10d04c:	e5843008 	str	r3, [r4, #8]
    if (msg->conn->pcb.tcp != NULL) {
  10d050:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d054:	e5933000 	ldr	r3, [r3]
  10d058:	e5933008 	ldr	r3, [r3, #8]
  10d05c:	e3530000 	cmp	r3, #0
  10d060:	0a00000c 	beq	10d098 <pcb_new+0x1c4>
      setup_tcp(msg->conn);
  10d064:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d068:	e5933000 	ldr	r3, [r3]
  10d06c:	e1a00003 	mov	r0, r3
  10d070:	ebfffeea 	bl	10cc20 <setup_tcp>
    }
    break;
  10d074:	ea000007 	b	10d098 <pcb_new+0x1c4>
#endif /* LWIP_TCP */
  default:
    /* Unsupported netconn type, e.g. protocol disabled */
    msg->err = ERR_VAL;
  10d078:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d07c:	e3e02005 	mvn	r2, #5
  10d080:	e5c32004 	strb	r2, [r3, #4]
    return;
  10d084:	ea00000c 	b	10d0bc <pcb_new+0x1e8>
    break;
  10d088:	e320f000 	nop	{0}
  10d08c:	ea000002 	b	10d09c <pcb_new+0x1c8>
    break;
  10d090:	e320f000 	nop	{0}
  10d094:	ea000000 	b	10d09c <pcb_new+0x1c8>
    break;
  10d098:	e320f000 	nop	{0}
  }
  if (msg->conn->pcb.ip == NULL) {
  10d09c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d0a0:	e5933000 	ldr	r3, [r3]
  10d0a4:	e5933008 	ldr	r3, [r3, #8]
  10d0a8:	e3530000 	cmp	r3, #0
  10d0ac:	1a000002 	bne	10d0bc <pcb_new+0x1e8>
    msg->err = ERR_MEM;
  10d0b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d0b4:	e3e02000 	mvn	r2, #0
  10d0b8:	e5c32004 	strb	r2, [r3, #4]
  }
}
  10d0bc:	e24bd008 	sub	sp, fp, #8
  10d0c0:	e8bd8810 	pop	{r4, fp, pc}

0010d0c4 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
  10d0c4:	e92d4800 	push	{fp, lr}
  10d0c8:	e28db004 	add	fp, sp, #4
  10d0cc:	e24dd010 	sub	sp, sp, #16
  10d0d0:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10d0d4:	e51b3010 	ldr	r3, [fp, #-16]
  10d0d8:	e50b3008 	str	r3, [fp, #-8]

  msg->err = ERR_OK;
  10d0dc:	e51b3008 	ldr	r3, [fp, #-8]
  10d0e0:	e3a02000 	mov	r2, #0
  10d0e4:	e5c32004 	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
  10d0e8:	e51b3008 	ldr	r3, [fp, #-8]
  10d0ec:	e5933000 	ldr	r3, [r3]
  10d0f0:	e5933008 	ldr	r3, [r3, #8]
  10d0f4:	e3530000 	cmp	r3, #0
  10d0f8:	1a000001 	bne	10d104 <lwip_netconn_do_newconn+0x40>
    pcb_new(msg);
  10d0fc:	e51b0008 	ldr	r0, [fp, #-8]
  10d100:	ebffff73 	bl	10ced4 <pcb_new>
  }
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
  10d104:	e51b3008 	ldr	r3, [fp, #-8]
  10d108:	e5933000 	ldr	r3, [r3]
  10d10c:	e3530000 	cmp	r3, #0
  10d110:	0a00000b 	beq	10d144 <lwip_netconn_do_newconn+0x80>
  10d114:	ebffd448 	bl	10223c <rt_enter_critical>
  10d118:	e51b3008 	ldr	r3, [fp, #-8]
  10d11c:	e5933000 	ldr	r3, [r3]
  10d120:	e1d330dc 	ldrsb	r3, [r3, #12]
  10d124:	e373000c 	cmn	r3, #12
  10d128:	ba000004 	blt	10d140 <lwip_netconn_do_newconn+0x7c>
  10d12c:	e51b3008 	ldr	r3, [fp, #-8]
  10d130:	e5933000 	ldr	r3, [r3]
  10d134:	e51b2008 	ldr	r2, [fp, #-8]
  10d138:	e1d220d4 	ldrsb	r2, [r2, #4]
  10d13c:	e5c3200c 	strb	r2, [r3, #12]
  10d140:	ebffd443 	bl	102254 <rt_exit_critical>
}
  10d144:	e320f000 	nop	{0}
  10d148:	e24bd004 	sub	sp, fp, #4
  10d14c:	e8bd8800 	pop	{fp, pc}

0010d150 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
  10d150:	e92d4800 	push	{fp, lr}
  10d154:	e28db004 	add	fp, sp, #4
  10d158:	e24dd010 	sub	sp, sp, #16
  10d15c:	e50b0010 	str	r0, [fp, #-16]
  10d160:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct netconn *conn;
  int size;

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
  10d164:	e3002287 	movw	r2, #647	; 0x287
  10d168:	e3051be4 	movw	r1, #23524	; 0x5be4
  10d16c:	e3401014 	movt	r1, #20
  10d170:	e3a00008 	mov	r0, #8
  10d174:	eb002efe 	bl	118d74 <memp_malloc_fn>
  10d178:	e50b000c 	str	r0, [fp, #-12]
  if (conn == NULL) {
  10d17c:	e51b300c 	ldr	r3, [fp, #-12]
  10d180:	e3530000 	cmp	r3, #0
  10d184:	1a000001 	bne	10d190 <netconn_alloc+0x40>
    return NULL;
  10d188:	e3a03000 	mov	r3, #0
  10d18c:	ea000060 	b	10d314 <netconn_alloc+0x1c4>
  }

  conn->last_err = ERR_OK;
  10d190:	e51b300c 	ldr	r3, [fp, #-12]
  10d194:	e3a02000 	mov	r2, #0
  10d198:	e5c3200c 	strb	r2, [r3, #12]
  conn->type = t;
  10d19c:	e51b300c 	ldr	r3, [fp, #-12]
  10d1a0:	e51b2010 	ldr	r2, [fp, #-16]
  10d1a4:	e5832000 	str	r2, [r3]
  conn->pcb.tcp = NULL;
  10d1a8:	e51b300c 	ldr	r3, [fp, #-12]
  10d1ac:	e3a02000 	mov	r2, #0
  10d1b0:	e5832008 	str	r2, [r3, #8]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch(NETCONNTYPE_GROUP(t)) {
  10d1b4:	e51b3010 	ldr	r3, [fp, #-16]
  10d1b8:	e20330f0 	and	r3, r3, #240	; 0xf0
  10d1bc:	e3530020 	cmp	r3, #32
  10d1c0:	0a000007 	beq	10d1e4 <netconn_alloc+0x94>
  10d1c4:	e3530040 	cmp	r3, #64	; 0x40
  10d1c8:	0a000002 	beq	10d1d8 <netconn_alloc+0x88>
  10d1cc:	e3530010 	cmp	r3, #16
  10d1d0:	0a000006 	beq	10d1f0 <netconn_alloc+0xa0>
  10d1d4:	ea000008 	b	10d1fc <netconn_alloc+0xac>
#if LWIP_RAW
  case NETCONN_RAW:
    size = DEFAULT_RAW_RECVMBOX_SIZE;
  10d1d8:	e3a03001 	mov	r3, #1
  10d1dc:	e50b3008 	str	r3, [fp, #-8]
    break;
  10d1e0:	ea00000d 	b	10d21c <netconn_alloc+0xcc>
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    size = DEFAULT_UDP_RECVMBOX_SIZE;
  10d1e4:	e3a03b01 	mov	r3, #1024	; 0x400
  10d1e8:	e50b3008 	str	r3, [fp, #-8]
    break;
  10d1ec:	ea00000a 	b	10d21c <netconn_alloc+0xcc>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    size = DEFAULT_TCP_RECVMBOX_SIZE;
  10d1f0:	e30f3fff 	movw	r3, #65535	; 0xffff
  10d1f4:	e50b3008 	str	r3, [fp, #-8]
    break;
  10d1f8:	ea000007 	b	10d21c <netconn_alloc+0xcc>
#endif /* LWIP_TCP */
  default:
    LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
  10d1fc:	e3050d60 	movw	r0, #23904	; 0x5d60
  10d200:	e3400014 	movt	r0, #20
  10d204:	ebffd7c2 	bl	103114 <rt_kprintf>
  10d208:	e30012a2 	movw	r1, #674	; 0x2a2
  10d20c:	e3050be4 	movw	r0, #23524	; 0x5be4
  10d210:	e3400014 	movt	r0, #20
  10d214:	ebfff63e 	bl	10ab14 <sys_arch_assert>
    goto free_and_return;
  10d218:	ea000039 	b	10d304 <netconn_alloc+0x1b4>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
  10d21c:	e51b300c 	ldr	r3, [fp, #-12]
  10d220:	e2833014 	add	r3, r3, #20
  10d224:	e51b1008 	ldr	r1, [fp, #-8]
  10d228:	e1a00003 	mov	r0, r3
  10d22c:	ebfff4ec 	bl	10a5e4 <sys_mbox_new>
  10d230:	e1a03000 	mov	r3, r0
  10d234:	e3530000 	cmp	r3, #0
  10d238:	1a000030 	bne	10d300 <netconn_alloc+0x1b0>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
  10d23c:	e51b300c 	ldr	r3, [fp, #-12]
  10d240:	e2833010 	add	r3, r3, #16
  10d244:	e3a01000 	mov	r1, #0
  10d248:	e1a00003 	mov	r0, r3
  10d24c:	ebfff39e 	bl	10a0cc <sys_sem_new>
  10d250:	e1a03000 	mov	r3, r0
  10d254:	e3530000 	cmp	r3, #0
  10d258:	0a000004 	beq	10d270 <netconn_alloc+0x120>
    sys_mbox_free(&conn->recvmbox);
  10d25c:	e51b300c 	ldr	r3, [fp, #-12]
  10d260:	e2833014 	add	r3, r3, #20
  10d264:	e1a00003 	mov	r0, r3
  10d268:	ebfff522 	bl	10a6f8 <sys_mbox_free>
    goto free_and_return;
  10d26c:	ea000024 	b	10d304 <netconn_alloc+0x1b4>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
  10d270:	e51b300c 	ldr	r3, [fp, #-12]
  10d274:	e2833018 	add	r3, r3, #24
  10d278:	e1a00003 	mov	r0, r3
  10d27c:	ebfff5e5 	bl	10aa18 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
  10d280:	e51b300c 	ldr	r3, [fp, #-12]
  10d284:	e3a02000 	mov	r2, #0
  10d288:	e5832004 	str	r2, [r3, #4]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
  10d28c:	e51b300c 	ldr	r3, [fp, #-12]
  10d290:	e3e02000 	mvn	r2, #0
  10d294:	e583201c 	str	r2, [r3, #28]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
  10d298:	e51b300c 	ldr	r3, [fp, #-12]
  10d29c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  10d2a0:	e583203c 	str	r2, [r3, #60]	; 0x3c
#if LWIP_TCP
  conn->current_msg  = NULL;
  10d2a4:	e51b300c 	ldr	r3, [fp, #-12]
  10d2a8:	e3a02000 	mov	r2, #0
  10d2ac:	e5832038 	str	r2, [r3, #56]	; 0x38
  conn->write_offset = 0;
  10d2b0:	e51b300c 	ldr	r3, [fp, #-12]
  10d2b4:	e3a02000 	mov	r2, #0
  10d2b8:	e5832034 	str	r2, [r3, #52]	; 0x34
#endif /* LWIP_TCP */
#if LWIP_SO_SNDTIMEO
  conn->send_timeout = 0;
  10d2bc:	e51b300c 	ldr	r3, [fp, #-12]
  10d2c0:	e3a02000 	mov	r2, #0
  10d2c4:	e5832020 	str	r2, [r3, #32]
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
  conn->recv_timeout = 0;
  10d2c8:	e51b300c 	ldr	r3, [fp, #-12]
  10d2cc:	e3a02000 	mov	r2, #0
  10d2d0:	e5832024 	str	r2, [r3, #36]	; 0x24
#endif /* LWIP_SO_RCVTIMEO */
#if LWIP_SO_RCVBUF
  conn->recv_bufsize = RECV_BUFSIZE_DEFAULT;
  10d2d4:	e51b300c 	ldr	r3, [fp, #-12]
  10d2d8:	e3a02602 	mov	r2, #2097152	; 0x200000
  10d2dc:	e5832028 	str	r2, [r3, #40]	; 0x28
  conn->recv_avail   = 0;
  10d2e0:	e51b300c 	ldr	r3, [fp, #-12]
  10d2e4:	e3a02000 	mov	r2, #0
  10d2e8:	e583202c 	str	r2, [r3, #44]	; 0x2c
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = 0;
  10d2ec:	e51b300c 	ldr	r3, [fp, #-12]
  10d2f0:	e3a02000 	mov	r2, #0
  10d2f4:	e5c32030 	strb	r2, [r3, #48]	; 0x30
  return conn;
  10d2f8:	e51b300c 	ldr	r3, [fp, #-12]
  10d2fc:	ea000004 	b	10d314 <netconn_alloc+0x1c4>
    goto free_and_return;
  10d300:	e320f000 	nop	{0}
free_and_return:
  memp_free(MEMP_NETCONN, conn);
  10d304:	e51b100c 	ldr	r1, [fp, #-12]
  10d308:	e3a00008 	mov	r0, #8
  10d30c:	eb002f00 	bl	118f14 <memp_free>
  return NULL;
  10d310:	e3a03000 	mov	r3, #0
}
  10d314:	e1a00003 	mov	r0, r3
  10d318:	e24bd004 	sub	sp, fp, #4
  10d31c:	e8bd8800 	pop	{fp, pc}

0010d320 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
  10d320:	e92d4800 	push	{fp, lr}
  10d324:	e28db004 	add	fp, sp, #4
  10d328:	e24dd008 	sub	sp, sp, #8
  10d32c:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
  10d330:	e51b3008 	ldr	r3, [fp, #-8]
  10d334:	e5933008 	ldr	r3, [r3, #8]
  10d338:	e3530000 	cmp	r3, #0
  10d33c:	0a000006 	beq	10d35c <netconn_free+0x3c>
  10d340:	e3050d88 	movw	r0, #23944	; 0x5d88
  10d344:	e3400014 	movt	r0, #20
  10d348:	ebffd771 	bl	103114 <rt_kprintf>
  10d34c:	e30012da 	movw	r1, #730	; 0x2da
  10d350:	e3050be4 	movw	r0, #23524	; 0x5be4
  10d354:	e3400014 	movt	r0, #20
  10d358:	ebfff5ed 	bl	10ab14 <sys_arch_assert>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
  10d35c:	e51b3008 	ldr	r3, [fp, #-8]
  10d360:	e2833014 	add	r3, r3, #20
  10d364:	e1a00003 	mov	r0, r3
  10d368:	ebfff5a0 	bl	10a9f0 <sys_mbox_valid>
  10d36c:	e1a03000 	mov	r3, r0
  10d370:	e3530000 	cmp	r3, #0
  10d374:	0a000006 	beq	10d394 <netconn_free+0x74>
  10d378:	e3050db8 	movw	r0, #23992	; 0x5db8
  10d37c:	e3400014 	movt	r0, #20
  10d380:	ebffd763 	bl	103114 <rt_kprintf>
  10d384:	e3a01fb7 	mov	r1, #732	; 0x2dc
  10d388:	e3050be4 	movw	r0, #23524	; 0x5be4
  10d38c:	e3400014 	movt	r0, #20
  10d390:	ebfff5df 	bl	10ab14 <sys_arch_assert>
    !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
  10d394:	e51b3008 	ldr	r3, [fp, #-8]
  10d398:	e2833018 	add	r3, r3, #24
  10d39c:	e1a00003 	mov	r0, r3
  10d3a0:	ebfff592 	bl	10a9f0 <sys_mbox_valid>
  10d3a4:	e1a03000 	mov	r3, r0
  10d3a8:	e3530000 	cmp	r3, #0
  10d3ac:	0a000006 	beq	10d3cc <netconn_free+0xac>
  10d3b0:	e3050df4 	movw	r0, #24052	; 0x5df4
  10d3b4:	e3400014 	movt	r0, #20
  10d3b8:	ebffd755 	bl	103114 <rt_kprintf>
  10d3bc:	e30012df 	movw	r1, #735	; 0x2df
  10d3c0:	e3050be4 	movw	r0, #23524	; 0x5be4
  10d3c4:	e3400014 	movt	r0, #20
  10d3c8:	ebfff5d1 	bl	10ab14 <sys_arch_assert>
    !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
  10d3cc:	e51b3008 	ldr	r3, [fp, #-8]
  10d3d0:	e2833010 	add	r3, r3, #16
  10d3d4:	e1a00003 	mov	r0, r3
  10d3d8:	ebfff366 	bl	10a178 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
  10d3dc:	e51b3008 	ldr	r3, [fp, #-8]
  10d3e0:	e2833010 	add	r3, r3, #16
  10d3e4:	e1a00003 	mov	r0, r3
  10d3e8:	ebfff3b5 	bl	10a2c4 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
  10d3ec:	e51b1008 	ldr	r1, [fp, #-8]
  10d3f0:	e3a00008 	mov	r0, #8
  10d3f4:	eb002ec6 	bl	118f14 <memp_free>
}
  10d3f8:	e320f000 	nop	{0}
  10d3fc:	e24bd004 	sub	sp, fp, #4
  10d400:	e8bd8800 	pop	{fp, pc}

0010d404 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
  10d404:	e92d4800 	push	{fp, lr}
  10d408:	e28db004 	add	fp, sp, #4
  10d40c:	e24dd018 	sub	sp, sp, #24
  10d410:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
#endif /* LWIP_TCP */

  /* This runs in tcpip_thread, so we don't need to lock against rx packets */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
  10d414:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d418:	e2833014 	add	r3, r3, #20
  10d41c:	e1a00003 	mov	r0, r3
  10d420:	ebfff572 	bl	10a9f0 <sys_mbox_valid>
  10d424:	e1a03000 	mov	r3, r0
  10d428:	e3530000 	cmp	r3, #0
  10d42c:	0a00002c 	beq	10d4e4 <netconn_drain+0xe0>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
  10d430:	ea00001a 	b	10d4a0 <netconn_drain+0x9c>
#if LWIP_TCP
      if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
  10d434:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d438:	e5933000 	ldr	r3, [r3]
  10d43c:	e20330f0 	and	r3, r3, #240	; 0xf0
  10d440:	e3530010 	cmp	r3, #16
  10d444:	1a000012 	bne	10d494 <netconn_drain+0x90>
        if (mem != NULL) {
  10d448:	e51b3010 	ldr	r3, [fp, #-16]
  10d44c:	e3530000 	cmp	r3, #0
  10d450:	0a000012 	beq	10d4a0 <netconn_drain+0x9c>
          p = (struct pbuf*)mem;
  10d454:	e51b3010 	ldr	r3, [fp, #-16]
  10d458:	e50b3008 	str	r3, [fp, #-8]
          /* pcb might be set to NULL already by err_tcp() */
          if (conn->pcb.tcp != NULL) {
  10d45c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d460:	e5933008 	ldr	r3, [r3, #8]
  10d464:	e3530000 	cmp	r3, #0
  10d468:	0a000006 	beq	10d488 <netconn_drain+0x84>
            tcp_recved(conn->pcb.tcp, p->tot_len);
  10d46c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d470:	e5932008 	ldr	r2, [r3, #8]
  10d474:	e51b3008 	ldr	r3, [fp, #-8]
  10d478:	e1d330b8 	ldrh	r3, [r3, #8]
  10d47c:	e1a01003 	mov	r1, r3
  10d480:	e1a00002 	mov	r0, r2
  10d484:	eb00423c 	bl	11dd7c <tcp_recved>
          }
          pbuf_free(p);
  10d488:	e51b0008 	ldr	r0, [fp, #-8]
  10d48c:	eb0035ae 	bl	11ab4c <pbuf_free>
  10d490:	ea000002 	b	10d4a0 <netconn_drain+0x9c>
        }
      } else
#endif /* LWIP_TCP */
      {
        netbuf_delete((struct netbuf *)mem);
  10d494:	e51b3010 	ldr	r3, [fp, #-16]
  10d498:	e1a00003 	mov	r0, r3
  10d49c:	eb0009c9 	bl	10fbc8 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
  10d4a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d4a4:	e2833014 	add	r3, r3, #20
  10d4a8:	e24b2010 	sub	r2, fp, #16
  10d4ac:	e1a01002 	mov	r1, r2
  10d4b0:	e1a00003 	mov	r0, r3
  10d4b4:	ebfff535 	bl	10a990 <sys_arch_mbox_tryfetch>
  10d4b8:	e1a03000 	mov	r3, r0
  10d4bc:	e3730001 	cmn	r3, #1
  10d4c0:	1affffdb 	bne	10d434 <netconn_drain+0x30>
      }
    }
    sys_mbox_free(&conn->recvmbox);
  10d4c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d4c8:	e2833014 	add	r3, r3, #20
  10d4cc:	e1a00003 	mov	r0, r3
  10d4d0:	ebfff488 	bl	10a6f8 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
  10d4d4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d4d8:	e2833014 	add	r3, r3, #20
  10d4dc:	e1a00003 	mov	r0, r3
  10d4e0:	ebfff54c 	bl	10aa18 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
  10d4e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d4e8:	e2833018 	add	r3, r3, #24
  10d4ec:	e1a00003 	mov	r0, r3
  10d4f0:	ebfff53e 	bl	10a9f0 <sys_mbox_valid>
  10d4f4:	e1a03000 	mov	r3, r0
  10d4f8:	e3530000 	cmp	r3, #0
  10d4fc:	0a000027 	beq	10d5a0 <netconn_drain+0x19c>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
  10d500:	ea000015 	b	10d55c <netconn_drain+0x158>
      if (mem != &netconn_aborted) {
  10d504:	e51b2010 	ldr	r2, [fp, #-16]
  10d508:	e30e3cfc 	movw	r3, #60668	; 0xecfc
  10d50c:	e3403014 	movt	r3, #20
  10d510:	e1520003 	cmp	r2, r3
  10d514:	0a000010 	beq	10d55c <netconn_drain+0x158>
        struct netconn *newconn = (struct netconn *)mem;
  10d518:	e51b3010 	ldr	r3, [fp, #-16]
  10d51c:	e50b300c 	str	r3, [fp, #-12]
        /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
        /* pcb might be set to NULL already by err_tcp() */
        /* drain recvmbox */
        netconn_drain(newconn);
  10d520:	e51b000c 	ldr	r0, [fp, #-12]
  10d524:	ebffffb6 	bl	10d404 <netconn_drain>
        if (newconn->pcb.tcp != NULL) {
  10d528:	e51b300c 	ldr	r3, [fp, #-12]
  10d52c:	e5933008 	ldr	r3, [r3, #8]
  10d530:	e3530000 	cmp	r3, #0
  10d534:	0a000006 	beq	10d554 <netconn_drain+0x150>
          tcp_abort(newconn->pcb.tcp);
  10d538:	e51b300c 	ldr	r3, [fp, #-12]
  10d53c:	e5933008 	ldr	r3, [r3, #8]
  10d540:	e1a00003 	mov	r0, r3
  10d544:	eb00405a 	bl	11d6b4 <tcp_abort>
          newconn->pcb.tcp = NULL;
  10d548:	e51b300c 	ldr	r3, [fp, #-12]
  10d54c:	e3a02000 	mov	r2, #0
  10d550:	e5832008 	str	r2, [r3, #8]
        }
        netconn_free(newconn);
  10d554:	e51b000c 	ldr	r0, [fp, #-12]
  10d558:	ebffff70 	bl	10d320 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
  10d55c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d560:	e2833018 	add	r3, r3, #24
  10d564:	e24b2010 	sub	r2, fp, #16
  10d568:	e1a01002 	mov	r1, r2
  10d56c:	e1a00003 	mov	r0, r3
  10d570:	ebfff506 	bl	10a990 <sys_arch_mbox_tryfetch>
  10d574:	e1a03000 	mov	r3, r0
  10d578:	e3730001 	cmn	r3, #1
  10d57c:	1affffe0 	bne	10d504 <netconn_drain+0x100>
      }
    }
    sys_mbox_free(&conn->acceptmbox);
  10d580:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d584:	e2833018 	add	r3, r3, #24
  10d588:	e1a00003 	mov	r0, r3
  10d58c:	ebfff459 	bl	10a6f8 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
  10d590:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d594:	e2833018 	add	r3, r3, #24
  10d598:	e1a00003 	mov	r0, r3
  10d59c:	ebfff51d 	bl	10aa18 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
  10d5a0:	e320f000 	nop	{0}
  10d5a4:	e24bd004 	sub	sp, fp, #4
  10d5a8:	e8bd8800 	pop	{fp, pc}

0010d5ac <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
  10d5ac:	e92d4800 	push	{fp, lr}
  10d5b0:	e28db004 	add	fp, sp, #4
  10d5b4:	e24dd020 	sub	sp, sp, #32
  10d5b8:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  10d5bc:	e1a03001 	mov	r3, r1
  10d5c0:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  err_t err;
  u8_t shut, shut_rx, shut_tx, close;
  u8_t close_finished = 0;
  10d5c4:	e3a03000 	mov	r3, #0
  10d5c8:	e54b3007 	strb	r3, [fp, #-7]
  struct tcp_pcb* tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
  10d5cc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d5d0:	e3530000 	cmp	r3, #0
  10d5d4:	1a000006 	bne	10d5f4 <lwip_netconn_do_close_internal+0x48>
  10d5d8:	e3050e30 	movw	r0, #24112	; 0x5e30
  10d5dc:	e3400014 	movt	r0, #20
  10d5e0:	ebffd6cb 	bl	103114 <rt_kprintf>
  10d5e4:	e300133d 	movw	r1, #829	; 0x33d
  10d5e8:	e3050be4 	movw	r0, #23524	; 0x5be4
  10d5ec:	e3400014 	movt	r0, #20
  10d5f0:	ebfff547 	bl	10ab14 <sys_arch_assert>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
  10d5f4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d5f8:	e5933000 	ldr	r3, [r3]
  10d5fc:	e20330f0 	and	r3, r3, #240	; 0xf0
  10d600:	e3530010 	cmp	r3, #16
  10d604:	0a000006 	beq	10d624 <lwip_netconn_do_close_internal+0x78>
  10d608:	e3050e40 	movw	r0, #24128	; 0x5e40
  10d60c:	e3400014 	movt	r0, #20
  10d610:	ebffd6bf 	bl	103114 <rt_kprintf>
  10d614:	e300133e 	movw	r1, #830	; 0x33e
  10d618:	e3050be4 	movw	r0, #23524	; 0x5be4
  10d61c:	e3400014 	movt	r0, #20
  10d620:	ebfff53b 	bl	10ab14 <sys_arch_assert>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
  10d624:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d628:	e5933004 	ldr	r3, [r3, #4]
  10d62c:	e3530004 	cmp	r3, #4
  10d630:	0a000006 	beq	10d650 <lwip_netconn_do_close_internal+0xa4>
  10d634:	e3050e60 	movw	r0, #24160	; 0x5e60
  10d638:	e3400014 	movt	r0, #20
  10d63c:	ebffd6b4 	bl	103114 <rt_kprintf>
  10d640:	e300133f 	movw	r1, #831	; 0x33f
  10d644:	e3050be4 	movw	r0, #23524	; 0x5be4
  10d648:	e3400014 	movt	r0, #20
  10d64c:	ebfff530 	bl	10ab14 <sys_arch_assert>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
  10d650:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d654:	e5933008 	ldr	r3, [r3, #8]
  10d658:	e3530000 	cmp	r3, #0
  10d65c:	1a000006 	bne	10d67c <lwip_netconn_do_close_internal+0xd0>
  10d660:	e3050e84 	movw	r0, #24196	; 0x5e84
  10d664:	e3400014 	movt	r0, #20
  10d668:	ebffd6a9 	bl	103114 <rt_kprintf>
  10d66c:	e3a01d0d 	mov	r1, #832	; 0x340
  10d670:	e3050be4 	movw	r0, #23524	; 0x5be4
  10d674:	e3400014 	movt	r0, #20
  10d678:	ebfff525 	bl	10ab14 <sys_arch_assert>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
  10d67c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d680:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10d684:	e3530000 	cmp	r3, #0
  10d688:	1a000006 	bne	10d6a8 <lwip_netconn_do_close_internal+0xfc>
  10d68c:	e3050cec 	movw	r0, #23788	; 0x5cec
  10d690:	e3400014 	movt	r0, #20
  10d694:	ebffd69e 	bl	103114 <rt_kprintf>
  10d698:	e3001341 	movw	r1, #833	; 0x341
  10d69c:	e3050be4 	movw	r0, #23524	; 0x5be4
  10d6a0:	e3400014 	movt	r0, #20
  10d6a4:	ebfff51a 	bl	10ab14 <sys_arch_assert>

  tpcb = conn->pcb.tcp;
  10d6a8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d6ac:	e5933008 	ldr	r3, [r3, #8]
  10d6b0:	e50b3010 	str	r3, [fp, #-16]
  shut = conn->current_msg->msg.sd.shut;
  10d6b4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d6b8:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10d6bc:	e5d33008 	ldrb	r3, [r3, #8]
  10d6c0:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  shut_rx = shut & NETCONN_SHUT_RD;
  10d6c4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  10d6c8:	e2033001 	and	r3, r3, #1
  10d6cc:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee
  shut_tx = shut & NETCONN_SHUT_WR;
  10d6d0:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  10d6d4:	e2033002 	and	r3, r3, #2
  10d6d8:	e54b3013 	strb	r3, [fp, #-19]	; 0xffffffed
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
  10d6dc:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  10d6e0:	e3530003 	cmp	r3, #3
  10d6e4:	1a000002 	bne	10d6f4 <lwip_netconn_do_close_internal+0x148>
    close = 1;
  10d6e8:	e3a03001 	mov	r3, #1
  10d6ec:	e54b3006 	strb	r3, [fp, #-6]
  10d6f0:	ea00001e 	b	10d770 <lwip_netconn_do_close_internal+0x1c4>
  } else if (shut_rx &&
  10d6f4:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
  10d6f8:	e3530000 	cmp	r3, #0
  10d6fc:	0a00000e 	beq	10d73c <lwip_netconn_do_close_internal+0x190>
             ((tpcb->state == FIN_WAIT_1) ||
  10d700:	e51b3010 	ldr	r3, [fp, #-16]
  10d704:	e5933014 	ldr	r3, [r3, #20]
  } else if (shut_rx &&
  10d708:	e3530005 	cmp	r3, #5
  10d70c:	0a000007 	beq	10d730 <lwip_netconn_do_close_internal+0x184>
              (tpcb->state == FIN_WAIT_2) ||
  10d710:	e51b3010 	ldr	r3, [fp, #-16]
  10d714:	e5933014 	ldr	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
  10d718:	e3530006 	cmp	r3, #6
  10d71c:	0a000003 	beq	10d730 <lwip_netconn_do_close_internal+0x184>
              (tpcb->state == CLOSING))) {
  10d720:	e51b3010 	ldr	r3, [fp, #-16]
  10d724:	e5933014 	ldr	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
  10d728:	e3530008 	cmp	r3, #8
  10d72c:	1a000002 	bne	10d73c <lwip_netconn_do_close_internal+0x190>
    close = 1;
  10d730:	e3a03001 	mov	r3, #1
  10d734:	e54b3006 	strb	r3, [fp, #-6]
  10d738:	ea00000c 	b	10d770 <lwip_netconn_do_close_internal+0x1c4>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
  10d73c:	e55b3013 	ldrb	r3, [fp, #-19]	; 0xffffffed
  10d740:	e3530000 	cmp	r3, #0
  10d744:	0a000007 	beq	10d768 <lwip_netconn_do_close_internal+0x1bc>
  10d748:	e51b3010 	ldr	r3, [fp, #-16]
  10d74c:	e5d3301e 	ldrb	r3, [r3, #30]
  10d750:	e2033010 	and	r3, r3, #16
  10d754:	e3530000 	cmp	r3, #0
  10d758:	0a000002 	beq	10d768 <lwip_netconn_do_close_internal+0x1bc>
    close = 1;
  10d75c:	e3a03001 	mov	r3, #1
  10d760:	e54b3006 	strb	r3, [fp, #-6]
  10d764:	ea000001 	b	10d770 <lwip_netconn_do_close_internal+0x1c4>
  } else {
    close = 0;
  10d768:	e3a03000 	mov	r3, #0
  10d76c:	e54b3006 	strb	r3, [fp, #-6]
  }

  /* Set back some callback pointers */
  if (close) {
  10d770:	e55b3006 	ldrb	r3, [fp, #-6]
  10d774:	e3530000 	cmp	r3, #0
  10d778:	0a000002 	beq	10d788 <lwip_netconn_do_close_internal+0x1dc>
    tcp_arg(tpcb, NULL);
  10d77c:	e3a01000 	mov	r1, #0
  10d780:	e51b0010 	ldr	r0, [fp, #-16]
  10d784:	eb00481d 	bl	11f800 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
  10d788:	e51b3010 	ldr	r3, [fp, #-16]
  10d78c:	e5933014 	ldr	r3, [r3, #20]
  10d790:	e3530001 	cmp	r3, #1
  10d794:	1a000003 	bne	10d7a8 <lwip_netconn_do_close_internal+0x1fc>
    tcp_accept(tpcb, NULL);
  10d798:	e3a01000 	mov	r1, #0
  10d79c:	e51b0010 	ldr	r0, [fp, #-16]
  10d7a0:	eb004870 	bl	11f968 <tcp_accept>
  10d7a4:	ea000018 	b	10d80c <lwip_netconn_do_close_internal+0x260>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
  10d7a8:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
  10d7ac:	e3530000 	cmp	r3, #0
  10d7b0:	0a000005 	beq	10d7cc <lwip_netconn_do_close_internal+0x220>
      tcp_recv(tpcb, NULL);
  10d7b4:	e3a01000 	mov	r1, #0
  10d7b8:	e51b0010 	ldr	r0, [fp, #-16]
  10d7bc:	eb00481e 	bl	11f83c <tcp_recv>
      tcp_accept(tpcb, NULL);
  10d7c0:	e3a01000 	mov	r1, #0
  10d7c4:	e51b0010 	ldr	r0, [fp, #-16]
  10d7c8:	eb004866 	bl	11f968 <tcp_accept>
    }
    if (shut_tx) {
  10d7cc:	e55b3013 	ldrb	r3, [fp, #-19]	; 0xffffffed
  10d7d0:	e3530000 	cmp	r3, #0
  10d7d4:	0a000002 	beq	10d7e4 <lwip_netconn_do_close_internal+0x238>
      tcp_sent(tpcb, NULL);
  10d7d8:	e3a01000 	mov	r1, #0
  10d7dc:	e51b0010 	ldr	r0, [fp, #-16]
  10d7e0:	eb00482e 	bl	11f8a0 <tcp_sent>
    }
    if (close) {
  10d7e4:	e55b3006 	ldrb	r3, [fp, #-6]
  10d7e8:	e3530000 	cmp	r3, #0
  10d7ec:	0a000006 	beq	10d80c <lwip_netconn_do_close_internal+0x260>
      tcp_poll(tpcb, NULL, 0);
  10d7f0:	e3a02000 	mov	r2, #0
  10d7f4:	e3a01000 	mov	r1, #0
  10d7f8:	e51b0010 	ldr	r0, [fp, #-16]
  10d7fc:	eb00486e 	bl	11f9bc <tcp_poll>
      tcp_err(tpcb, NULL);
  10d800:	e3a01000 	mov	r1, #0
  10d804:	e51b0010 	ldr	r0, [fp, #-16]
  10d808:	eb00483d 	bl	11f904 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (close) {
  10d80c:	e55b3006 	ldrb	r3, [fp, #-6]
  10d810:	e3530000 	cmp	r3, #0
  10d814:	0a000004 	beq	10d82c <lwip_netconn_do_close_internal+0x280>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
  10d818:	e51b0010 	ldr	r0, [fp, #-16]
  10d81c:	eb003eb0 	bl	11d2e4 <tcp_close>
  10d820:	e1a03000 	mov	r3, r0
  10d824:	e54b3005 	strb	r3, [fp, #-5]
  10d828:	ea000006 	b	10d848 <lwip_netconn_do_close_internal+0x29c>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
  10d82c:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
  10d830:	e55b2013 	ldrb	r2, [fp, #-19]	; 0xffffffed
  10d834:	e1a01003 	mov	r1, r3
  10d838:	e51b0010 	ldr	r0, [fp, #-16]
  10d83c:	eb003ebd 	bl	11d338 <tcp_shutdown>
  10d840:	e1a03000 	mov	r3, r0
  10d844:	e54b3005 	strb	r3, [fp, #-5]
  }
  if (err == ERR_OK) {
  10d848:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10d84c:	e3530000 	cmp	r3, #0
  10d850:	1a000002 	bne	10d860 <lwip_netconn_do_close_internal+0x2b4>
    close_finished = 1;
  10d854:	e3a03001 	mov	r3, #1
  10d858:	e54b3007 	strb	r3, [fp, #-7]
  10d85c:	ea000021 	b	10d8e8 <lwip_netconn_do_close_internal+0x33c>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
  10d860:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10d864:	e3730001 	cmn	r3, #1
  10d868:	1a00001c 	bne	10d8e0 <lwip_netconn_do_close_internal+0x334>
         nonblocking netconns, we have to wait since no standard socket application
         is prepared for close failing because of resource shortage.
         Check the timeout: this is kind of an lwip addition to the standard sockets:
         we wait for some time when failing to allocate a segment for the FIN */
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
      s32_t close_timeout = LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT;
  10d86c:	e3043e20 	movw	r3, #20000	; 0x4e20
  10d870:	e50b300c 	str	r3, [fp, #-12]
#if LWIP_SO_SNDTIMEO
      if (conn->send_timeout > 0) {
  10d874:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d878:	e5933020 	ldr	r3, [r3, #32]
  10d87c:	e3530000 	cmp	r3, #0
  10d880:	da000002 	ble	10d890 <lwip_netconn_do_close_internal+0x2e4>
        close_timeout = conn->send_timeout;
  10d884:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d888:	e5933020 	ldr	r3, [r3, #32]
  10d88c:	e50b300c 	str	r3, [fp, #-12]
      if (conn->linger >= 0) {
        /* use linger timeout (seconds) */
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
  10d890:	ebfff4b8 	bl	10ab78 <sys_now>
  10d894:	e1a02000 	mov	r2, r0
  10d898:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d89c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10d8a0:	e593300c 	ldr	r3, [r3, #12]
  10d8a4:	e0423003 	sub	r3, r2, r3
  10d8a8:	e1a02003 	mov	r2, r3
  10d8ac:	e51b300c 	ldr	r3, [fp, #-12]
  10d8b0:	e1530002 	cmp	r3, r2
  10d8b4:	ca00000b 	bgt	10d8e8 <lwip_netconn_do_close_internal+0x33c>
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
  10d8b8:	e3a03001 	mov	r3, #1
  10d8bc:	e54b3007 	strb	r3, [fp, #-7]
        if (close) {
  10d8c0:	e55b3006 	ldrb	r3, [fp, #-6]
  10d8c4:	e3530000 	cmp	r3, #0
  10d8c8:	0a000006 	beq	10d8e8 <lwip_netconn_do_close_internal+0x33c>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
  10d8cc:	e51b0010 	ldr	r0, [fp, #-16]
  10d8d0:	eb003f77 	bl	11d6b4 <tcp_abort>
          err = ERR_OK;
  10d8d4:	e3a03000 	mov	r3, #0
  10d8d8:	e54b3005 	strb	r3, [fp, #-5]
  10d8dc:	ea000001 	b	10d8e8 <lwip_netconn_do_close_internal+0x33c>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
  10d8e0:	e3a03001 	mov	r3, #1
  10d8e4:	e54b3007 	strb	r3, [fp, #-7]
    }
  }
  if (close_finished) {
  10d8e8:	e55b3007 	ldrb	r3, [fp, #-7]
  10d8ec:	e3530000 	cmp	r3, #0
  10d8f0:	0a00004e 	beq	10da30 <lwip_netconn_do_close_internal+0x484>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
  10d8f4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d8f8:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10d8fc:	e5933000 	ldr	r3, [r3]
  10d900:	e2833010 	add	r3, r3, #16
  10d904:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    conn->current_msg->err = err;
  10d908:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d90c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10d910:	e55b2005 	ldrb	r2, [fp, #-5]
  10d914:	e5c32004 	strb	r2, [r3, #4]
    conn->current_msg = NULL;
  10d918:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d91c:	e3a02000 	mov	r2, #0
  10d920:	e5832038 	str	r2, [r3, #56]	; 0x38
    conn->state = NETCONN_NONE;
  10d924:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d928:	e3a02000 	mov	r2, #0
  10d92c:	e5832004 	str	r2, [r3, #4]
    if (err == ERR_OK) {
  10d930:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10d934:	e3530000 	cmp	r3, #0
  10d938:	1a000029 	bne	10d9e4 <lwip_netconn_do_close_internal+0x438>
      if (close) {
  10d93c:	e55b3006 	ldrb	r3, [fp, #-6]
  10d940:	e3530000 	cmp	r3, #0
  10d944:	0a00000c 	beq	10d97c <lwip_netconn_do_close_internal+0x3d0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
  10d948:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d94c:	e3a02000 	mov	r2, #0
  10d950:	e5832008 	str	r2, [r3, #8]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
  10d954:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d958:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10d95c:	e3530000 	cmp	r3, #0
  10d960:	0a000005 	beq	10d97c <lwip_netconn_do_close_internal+0x3d0>
  10d964:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d968:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10d96c:	e3a02000 	mov	r2, #0
  10d970:	e3a01004 	mov	r1, #4
  10d974:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10d978:	e12fff33 	blx	r3
      }
      if (shut_rx) {
  10d97c:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
  10d980:	e3530000 	cmp	r3, #0
  10d984:	0a000009 	beq	10d9b0 <lwip_netconn_do_close_internal+0x404>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
  10d988:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d98c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10d990:	e3530000 	cmp	r3, #0
  10d994:	0a000005 	beq	10d9b0 <lwip_netconn_do_close_internal+0x404>
  10d998:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d99c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10d9a0:	e3a02000 	mov	r2, #0
  10d9a4:	e3a01000 	mov	r1, #0
  10d9a8:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10d9ac:	e12fff33 	blx	r3
      }
      if (shut_tx) {
  10d9b0:	e55b3013 	ldrb	r3, [fp, #-19]	; 0xffffffed
  10d9b4:	e3530000 	cmp	r3, #0
  10d9b8:	0a000009 	beq	10d9e4 <lwip_netconn_do_close_internal+0x438>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
  10d9bc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d9c0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10d9c4:	e3530000 	cmp	r3, #0
  10d9c8:	0a000005 	beq	10d9e4 <lwip_netconn_do_close_internal+0x438>
  10d9cc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d9d0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10d9d4:	e3a02000 	mov	r2, #0
  10d9d8:	e3a01002 	mov	r1, #2
  10d9dc:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10d9e0:	e12fff33 	blx	r3
      }
    }
    NETCONN_SET_SAFE_ERR(conn, err);
  10d9e4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d9e8:	e3530000 	cmp	r3, #0
  10d9ec:	0a000008 	beq	10da14 <lwip_netconn_do_close_internal+0x468>
  10d9f0:	ebffd211 	bl	10223c <rt_enter_critical>
  10d9f4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d9f8:	e1d330dc 	ldrsb	r3, [r3, #12]
  10d9fc:	e373000c 	cmn	r3, #12
  10da00:	ba000002 	blt	10da10 <lwip_netconn_do_close_internal+0x464>
  10da04:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10da08:	e55b2005 	ldrb	r2, [fp, #-5]
  10da0c:	e5c3200c 	strb	r2, [r3, #12]
  10da10:	ebffd20f 	bl	102254 <rt_exit_critical>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
  10da14:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  10da18:	e3530000 	cmp	r3, #0
  10da1c:	0a000001 	beq	10da28 <lwip_netconn_do_close_internal+0x47c>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
  10da20:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  10da24:	ebfff1de 	bl	10a1a4 <sys_sem_signal>
    }
    return ERR_OK;
  10da28:	e3a03000 	mov	r3, #0
  10da2c:	ea00002b 	b	10dae0 <lwip_netconn_do_close_internal+0x534>
  }
  if (!close_finished) {
  10da30:	e55b3007 	ldrb	r3, [fp, #-7]
  10da34:	e3530000 	cmp	r3, #0
  10da38:	1a00001d 	bne	10dab4 <lwip_netconn_do_close_internal+0x508>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
  10da3c:	e51b3010 	ldr	r3, [fp, #-16]
  10da40:	e5933014 	ldr	r3, [r3, #20]
  10da44:	e3530001 	cmp	r3, #1
  10da48:	1a000006 	bne	10da68 <lwip_netconn_do_close_internal+0x4bc>
  10da4c:	e3050e98 	movw	r0, #24216	; 0x5e98
  10da50:	e3400014 	movt	r0, #20
  10da54:	ebffd5ae 	bl	103114 <rt_kprintf>
  10da58:	e30013dd 	movw	r1, #989	; 0x3dd
  10da5c:	e3050be4 	movw	r0, #23524	; 0x5be4
  10da60:	e3400014 	movt	r0, #20
  10da64:	ebfff42a 	bl	10ab14 <sys_arch_assert>
    if (shut_tx) {
  10da68:	e55b3013 	ldrb	r3, [fp, #-19]	; 0xffffffed
  10da6c:	e3530000 	cmp	r3, #0
  10da70:	0a000003 	beq	10da84 <lwip_netconn_do_close_internal+0x4d8>
      tcp_sent(tpcb, sent_tcp);
  10da74:	e30c17f4 	movw	r1, #51188	; 0xc7f4
  10da78:	e3401010 	movt	r1, #16
  10da7c:	e51b0010 	ldr	r0, [fp, #-16]
  10da80:	eb004786 	bl	11f8a0 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
  10da84:	e3a02001 	mov	r2, #1
  10da88:	e30c16d8 	movw	r1, #50904	; 0xc6d8
  10da8c:	e3401010 	movt	r1, #16
  10da90:	e51b0010 	ldr	r0, [fp, #-16]
  10da94:	eb0047c8 	bl	11f9bc <tcp_poll>
    tcp_err(tpcb, err_tcp);
  10da98:	e30c1910 	movw	r1, #51472	; 0xc910
  10da9c:	e3401010 	movt	r1, #16
  10daa0:	e51b0010 	ldr	r0, [fp, #-16]
  10daa4:	eb004796 	bl	11f904 <tcp_err>
    tcp_arg(tpcb, conn);
  10daa8:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  10daac:	e51b0010 	ldr	r0, [fp, #-16]
  10dab0:	eb004752 	bl	11f800 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
  10dab4:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10dab8:	e3530000 	cmp	r3, #0
  10dabc:	1a000006 	bne	10dadc <lwip_netconn_do_close_internal+0x530>
  10dac0:	e3050ebc 	movw	r0, #24252	; 0x5ebc
  10dac4:	e3400014 	movt	r0, #20
  10dac8:	ebffd591 	bl	103114 <rt_kprintf>
  10dacc:	e30013e9 	movw	r1, #1001	; 0x3e9
  10dad0:	e3050be4 	movw	r0, #23524	; 0x5be4
  10dad4:	e3400014 	movt	r0, #20
  10dad8:	ebfff40d 	bl	10ab14 <sys_arch_assert>
  return err;
  10dadc:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10dae0:	e1a00003 	mov	r0, r3
  10dae4:	e24bd004 	sub	sp, fp, #4
  10dae8:	e8bd8800 	pop	{fp, pc}

0010daec <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
  10daec:	e92d4800 	push	{fp, lr}
  10daf0:	e28db004 	add	fp, sp, #4
  10daf4:	e24dd010 	sub	sp, sp, #16
  10daf8:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10dafc:	e51b3010 	ldr	r3, [fp, #-16]
  10db00:	e50b3008 	str	r3, [fp, #-8]

  enum netconn_state state = msg->conn->state;
  10db04:	e51b3008 	ldr	r3, [fp, #-8]
  10db08:	e5933000 	ldr	r3, [r3]
  10db0c:	e5933004 	ldr	r3, [r3, #4]
  10db10:	e50b300c 	str	r3, [fp, #-12]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
  10db14:	e51b300c 	ldr	r3, [fp, #-12]
  10db18:	e3530000 	cmp	r3, #0
  10db1c:	0a00000c 	beq	10db54 <lwip_netconn_do_delconn+0x68>
  10db20:	e51b3008 	ldr	r3, [fp, #-8]
  10db24:	e5933000 	ldr	r3, [r3]
  10db28:	e5933000 	ldr	r3, [r3]
  10db2c:	e20330f0 	and	r3, r3, #240	; 0xf0
  10db30:	e3530010 	cmp	r3, #16
  10db34:	0a000006 	beq	10db54 <lwip_netconn_do_delconn+0x68>
  10db38:	e3050ecc 	movw	r0, #24268	; 0x5ecc
  10db3c:	e3400014 	movt	r0, #20
  10db40:	ebffd573 	bl	103114 <rt_kprintf>
  10db44:	e30013fb 	movw	r1, #1019	; 0x3fb
  10db48:	e3050be4 	movw	r0, #23524	; 0x5be4
  10db4c:	e3400014 	movt	r0, #20
  10db50:	ebfff3ef 	bl	10ab14 <sys_arch_assert>
      NETCONN_SET_SAFE_ERR(msg->conn, ERR_CLSD);
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
  10db54:	e51b300c 	ldr	r3, [fp, #-12]
  10db58:	e3530000 	cmp	r3, #0
  10db5c:	0a000005 	beq	10db78 <lwip_netconn_do_delconn+0x8c>
  10db60:	e51b300c 	ldr	r3, [fp, #-12]
  10db64:	e3530002 	cmp	r3, #2
  10db68:	0a000002 	beq	10db78 <lwip_netconn_do_delconn+0x8c>
       (state != NETCONN_LISTEN) &&
  10db6c:	e51b300c 	ldr	r3, [fp, #-12]
  10db70:	e3530003 	cmp	r3, #3
  10db74:	1a000008 	bne	10db9c <lwip_netconn_do_delconn+0xb0>
       (state != NETCONN_CONNECT)) ||
  10db78:	e51b300c 	ldr	r3, [fp, #-12]
  10db7c:	e3530003 	cmp	r3, #3
  10db80:	1a000009 	bne	10dbac <lwip_netconn_do_delconn+0xc0>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
  10db84:	e51b3008 	ldr	r3, [fp, #-8]
  10db88:	e5933000 	ldr	r3, [r3]
  10db8c:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10db90:	e2033004 	and	r3, r3, #4
  10db94:	e3530000 	cmp	r3, #0
  10db98:	1a000003 	bne	10dbac <lwip_netconn_do_delconn+0xc0>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
  10db9c:	e51b3008 	ldr	r3, [fp, #-8]
  10dba0:	e3e02004 	mvn	r2, #4
  10dba4:	e5c32004 	strb	r2, [r3, #4]
  10dba8:	ea00009e 	b	10de28 <lwip_netconn_do_delconn+0x33c>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
  10dbac:	e51b300c 	ldr	r3, [fp, #-12]
  10dbb0:	e3530003 	cmp	r3, #3
  10dbb4:	1a00000c 	bne	10dbec <lwip_netconn_do_delconn+0x100>
  10dbb8:	e51b3008 	ldr	r3, [fp, #-8]
  10dbbc:	e5933000 	ldr	r3, [r3]
  10dbc0:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10dbc4:	e2033004 	and	r3, r3, #4
  10dbc8:	e3530000 	cmp	r3, #0
  10dbcc:	1a000006 	bne	10dbec <lwip_netconn_do_delconn+0x100>
  10dbd0:	e3050ee0 	movw	r0, #24288	; 0x5ee0
  10dbd4:	e3400014 	movt	r0, #20
  10dbd8:	ebffd54d 	bl	103114 <rt_kprintf>
  10dbdc:	e3001419 	movw	r1, #1049	; 0x419
  10dbe0:	e3050be4 	movw	r0, #23524	; 0x5be4
  10dbe4:	e3400014 	movt	r0, #20
  10dbe8:	ebfff3c9 	bl	10ab14 <sys_arch_assert>
      (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
  10dbec:	e51b3008 	ldr	r3, [fp, #-8]
  10dbf0:	e3a02000 	mov	r2, #0
  10dbf4:	e5c32004 	strb	r2, [r3, #4]
    /* Drain and delete mboxes */
    netconn_drain(msg->conn);
  10dbf8:	e51b3008 	ldr	r3, [fp, #-8]
  10dbfc:	e5933000 	ldr	r3, [r3]
  10dc00:	e1a00003 	mov	r0, r3
  10dc04:	ebfffdfe 	bl	10d404 <netconn_drain>

    if (msg->conn->pcb.tcp != NULL) {
  10dc08:	e51b3008 	ldr	r3, [fp, #-8]
  10dc0c:	e5933000 	ldr	r3, [r3]
  10dc10:	e5933008 	ldr	r3, [r3, #8]
  10dc14:	e3530000 	cmp	r3, #0
  10dc18:	0a000068 	beq	10ddc0 <lwip_netconn_do_delconn+0x2d4>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
  10dc1c:	e51b3008 	ldr	r3, [fp, #-8]
  10dc20:	e5933000 	ldr	r3, [r3]
  10dc24:	e5933000 	ldr	r3, [r3]
  10dc28:	e20330f0 	and	r3, r3, #240	; 0xf0
  10dc2c:	e3530020 	cmp	r3, #32
  10dc30:	0a00000a 	beq	10dc60 <lwip_netconn_do_delconn+0x174>
  10dc34:	e3530040 	cmp	r3, #64	; 0x40
  10dc38:	0a000002 	beq	10dc48 <lwip_netconn_do_delconn+0x15c>
  10dc3c:	e3530010 	cmp	r3, #16
  10dc40:	0a000011 	beq	10dc8c <lwip_netconn_do_delconn+0x1a0>
        /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
           the application thread, so we can return at this point! */
        return;
#endif /* LWIP_TCP */
      default:
        break;
  10dc44:	ea000059 	b	10ddb0 <lwip_netconn_do_delconn+0x2c4>
        raw_remove(msg->conn->pcb.raw);
  10dc48:	e51b3008 	ldr	r3, [fp, #-8]
  10dc4c:	e5933000 	ldr	r3, [r3]
  10dc50:	e5933008 	ldr	r3, [r3, #8]
  10dc54:	e1a00003 	mov	r0, r3
  10dc58:	eb0039d7 	bl	11c3bc <raw_remove>
        break;
  10dc5c:	ea000053 	b	10ddb0 <lwip_netconn_do_delconn+0x2c4>
        msg->conn->pcb.udp->recv_arg = NULL;
  10dc60:	e51b3008 	ldr	r3, [fp, #-8]
  10dc64:	e5933000 	ldr	r3, [r3]
  10dc68:	e5933008 	ldr	r3, [r3, #8]
  10dc6c:	e3a02000 	mov	r2, #0
  10dc70:	e5832024 	str	r2, [r3, #36]	; 0x24
        udp_remove(msg->conn->pcb.udp);
  10dc74:	e51b3008 	ldr	r3, [fp, #-8]
  10dc78:	e5933000 	ldr	r3, [r3]
  10dc7c:	e5933008 	ldr	r3, [r3, #8]
  10dc80:	e1a00003 	mov	r0, r3
  10dc84:	eb006a81 	bl	128690 <udp_remove>
        break;
  10dc88:	ea000048 	b	10ddb0 <lwip_netconn_do_delconn+0x2c4>
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
  10dc8c:	e51b3008 	ldr	r3, [fp, #-8]
  10dc90:	e5933000 	ldr	r3, [r3]
  10dc94:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10dc98:	e3530000 	cmp	r3, #0
  10dc9c:	1a000004 	bne	10dcb4 <lwip_netconn_do_delconn+0x1c8>
  10dca0:	e51b3008 	ldr	r3, [fp, #-8]
  10dca4:	e5933000 	ldr	r3, [r3]
  10dca8:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10dcac:	e3530000 	cmp	r3, #0
  10dcb0:	0a000006 	beq	10dcd0 <lwip_netconn_do_delconn+0x1e4>
  10dcb4:	e3050f00 	movw	r0, #24320	; 0x5f00
  10dcb8:	e3400014 	movt	r0, #20
  10dcbc:	ebffd514 	bl	103114 <rt_kprintf>
  10dcc0:	e300142f 	movw	r1, #1071	; 0x42f
  10dcc4:	e3050be4 	movw	r0, #23524	; 0x5be4
  10dcc8:	e3400014 	movt	r0, #20
  10dccc:	ebfff390 	bl	10ab14 <sys_arch_assert>
        msg->conn->state = NETCONN_CLOSE;
  10dcd0:	e51b3008 	ldr	r3, [fp, #-8]
  10dcd4:	e5933000 	ldr	r3, [r3]
  10dcd8:	e3a02004 	mov	r2, #4
  10dcdc:	e5832004 	str	r2, [r3, #4]
        msg->msg.sd.shut = NETCONN_SHUT_RDWR;
  10dce0:	e51b3008 	ldr	r3, [fp, #-8]
  10dce4:	e3a02003 	mov	r2, #3
  10dce8:	e5c32008 	strb	r2, [r3, #8]
        msg->conn->current_msg = msg;
  10dcec:	e51b3008 	ldr	r3, [fp, #-8]
  10dcf0:	e5933000 	ldr	r3, [r3]
  10dcf4:	e51b2008 	ldr	r2, [fp, #-8]
  10dcf8:	e5832038 	str	r2, [r3, #56]	; 0x38
        if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
  10dcfc:	e51b3008 	ldr	r3, [fp, #-8]
  10dd00:	e5933000 	ldr	r3, [r3]
  10dd04:	e3a01000 	mov	r1, #0
  10dd08:	e1a00003 	mov	r0, r3
  10dd0c:	ebfffe26 	bl	10d5ac <lwip_netconn_do_close_internal>
  10dd10:	e1a03000 	mov	r3, r0
  10dd14:	e3530000 	cmp	r3, #0
  10dd18:	0a00005b 	beq	10de8c <lwip_netconn_do_delconn+0x3a0>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
  10dd1c:	e51b3008 	ldr	r3, [fp, #-8]
  10dd20:	e5933000 	ldr	r3, [r3]
  10dd24:	e5933004 	ldr	r3, [r3, #4]
  10dd28:	e3530004 	cmp	r3, #4
  10dd2c:	0a000006 	beq	10dd4c <lwip_netconn_do_delconn+0x260>
  10dd30:	e3050f1c 	movw	r0, #24348	; 0x5f1c
  10dd34:	e3400014 	movt	r0, #20
  10dd38:	ebffd4f5 	bl	103114 <rt_kprintf>
  10dd3c:	e3001435 	movw	r1, #1077	; 0x435
  10dd40:	e3050be4 	movw	r0, #23524	; 0x5be4
  10dd44:	e3400014 	movt	r0, #20
  10dd48:	ebfff371 	bl	10ab14 <sys_arch_assert>
          UNLOCK_TCPIP_CORE();
  10dd4c:	e30e0d64 	movw	r0, #60772	; 0xed64
  10dd50:	e3400014 	movt	r0, #20
  10dd54:	ebfff199 	bl	10a3c0 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
  10dd58:	e51b3008 	ldr	r3, [fp, #-8]
  10dd5c:	e5933000 	ldr	r3, [r3]
  10dd60:	e2833010 	add	r3, r3, #16
  10dd64:	e3a01000 	mov	r1, #0
  10dd68:	e1a00003 	mov	r0, r3
  10dd6c:	ebfff117 	bl	10a1d0 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
  10dd70:	e30e0d64 	movw	r0, #60772	; 0xed64
  10dd74:	e3400014 	movt	r0, #20
  10dd78:	ebfff184 	bl	10a390 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
  10dd7c:	e51b3008 	ldr	r3, [fp, #-8]
  10dd80:	e5933000 	ldr	r3, [r3]
  10dd84:	e5933004 	ldr	r3, [r3, #4]
  10dd88:	e3530000 	cmp	r3, #0
  10dd8c:	0a00003e 	beq	10de8c <lwip_netconn_do_delconn+0x3a0>
  10dd90:	e3050f1c 	movw	r0, #24348	; 0x5f1c
  10dd94:	e3400014 	movt	r0, #20
  10dd98:	ebffd4dd 	bl	103114 <rt_kprintf>
  10dd9c:	e3001439 	movw	r1, #1081	; 0x439
  10dda0:	e3050be4 	movw	r0, #23524	; 0x5be4
  10dda4:	e3400014 	movt	r0, #20
  10dda8:	ebfff359 	bl	10ab14 <sys_arch_assert>
        return;
  10ddac:	ea000036 	b	10de8c <lwip_netconn_do_delconn+0x3a0>
      }
      msg->conn->pcb.tcp = NULL;
  10ddb0:	e51b3008 	ldr	r3, [fp, #-8]
  10ddb4:	e5933000 	ldr	r3, [r3]
  10ddb8:	e3a02000 	mov	r2, #0
  10ddbc:	e5832008 	str	r2, [r3, #8]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
  10ddc0:	e51b3008 	ldr	r3, [fp, #-8]
  10ddc4:	e5933000 	ldr	r3, [r3]
  10ddc8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10ddcc:	e3530000 	cmp	r3, #0
  10ddd0:	0a000007 	beq	10ddf4 <lwip_netconn_do_delconn+0x308>
  10ddd4:	e51b3008 	ldr	r3, [fp, #-8]
  10ddd8:	e5933000 	ldr	r3, [r3]
  10dddc:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10dde0:	e51b2008 	ldr	r2, [fp, #-8]
  10dde4:	e5920000 	ldr	r0, [r2]
  10dde8:	e3a02000 	mov	r2, #0
  10ddec:	e3a01000 	mov	r1, #0
  10ddf0:	e12fff33 	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
  10ddf4:	e51b3008 	ldr	r3, [fp, #-8]
  10ddf8:	e5933000 	ldr	r3, [r3]
  10ddfc:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10de00:	e3530000 	cmp	r3, #0
  10de04:	0a000007 	beq	10de28 <lwip_netconn_do_delconn+0x33c>
  10de08:	e51b3008 	ldr	r3, [fp, #-8]
  10de0c:	e5933000 	ldr	r3, [r3]
  10de10:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10de14:	e51b2008 	ldr	r2, [fp, #-8]
  10de18:	e5920000 	ldr	r0, [r2]
  10de1c:	e3a02000 	mov	r2, #0
  10de20:	e3a01002 	mov	r1, #2
  10de24:	e12fff33 	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
  10de28:	e51b3008 	ldr	r3, [fp, #-8]
  10de2c:	e5933000 	ldr	r3, [r3]
  10de30:	e2833010 	add	r3, r3, #16
  10de34:	e1a00003 	mov	r0, r3
  10de38:	ebfff117 	bl	10a29c <sys_sem_valid>
  10de3c:	e1a03000 	mov	r3, r0
  10de40:	e3530000 	cmp	r3, #0
  10de44:	0a000011 	beq	10de90 <lwip_netconn_do_delconn+0x3a4>
    TCPIP_APIMSG_ACK(msg);
  10de48:	e51b3008 	ldr	r3, [fp, #-8]
  10de4c:	e5933000 	ldr	r3, [r3]
  10de50:	e3530000 	cmp	r3, #0
  10de54:	0a00000d 	beq	10de90 <lwip_netconn_do_delconn+0x3a4>
  10de58:	ebffd0f7 	bl	10223c <rt_enter_critical>
  10de5c:	e51b3008 	ldr	r3, [fp, #-8]
  10de60:	e5933000 	ldr	r3, [r3]
  10de64:	e1d330dc 	ldrsb	r3, [r3, #12]
  10de68:	e373000c 	cmn	r3, #12
  10de6c:	ba000004 	blt	10de84 <lwip_netconn_do_delconn+0x398>
  10de70:	e51b3008 	ldr	r3, [fp, #-8]
  10de74:	e5933000 	ldr	r3, [r3]
  10de78:	e51b2008 	ldr	r2, [fp, #-8]
  10de7c:	e1d220d4 	ldrsb	r2, [r2, #4]
  10de80:	e5c3200c 	strb	r2, [r3, #12]
  10de84:	ebffd0f2 	bl	102254 <rt_exit_critical>
  10de88:	ea000000 	b	10de90 <lwip_netconn_do_delconn+0x3a4>
        return;
  10de8c:	e320f000 	nop	{0}
  }
}
  10de90:	e24bd004 	sub	sp, fp, #4
  10de94:	e8bd8800 	pop	{fp, pc}

0010de98 <lwip_netconn_do_bind>:
 * @param m the api_msg_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
  10de98:	e92d4800 	push	{fp, lr}
  10de9c:	e28db004 	add	fp, sp, #4
  10dea0:	e24dd010 	sub	sp, sp, #16
  10dea4:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10dea8:	e51b3010 	ldr	r3, [fp, #-16]
  10deac:	e50b3008 	str	r3, [fp, #-8]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
  10deb0:	e51b3008 	ldr	r3, [fp, #-8]
  10deb4:	e5933000 	ldr	r3, [r3]
  10deb8:	e1d330dc 	ldrsb	r3, [r3, #12]
  10debc:	e373000c 	cmn	r3, #12
  10dec0:	aa000005 	bge	10dedc <lwip_netconn_do_bind+0x44>
    msg->err = msg->conn->last_err;
  10dec4:	e51b3008 	ldr	r3, [fp, #-8]
  10dec8:	e5933000 	ldr	r3, [r3]
  10decc:	e1d320dc 	ldrsb	r2, [r3, #12]
  10ded0:	e51b3008 	ldr	r3, [fp, #-8]
  10ded4:	e5c32004 	strb	r2, [r3, #4]
  10ded8:	ea00003c 	b	10dfd0 <lwip_netconn_do_bind+0x138>
  } else {
    msg->err = ERR_VAL;
  10dedc:	e51b3008 	ldr	r3, [fp, #-8]
  10dee0:	e3e02005 	mvn	r2, #5
  10dee4:	e5c32004 	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
  10dee8:	e51b3008 	ldr	r3, [fp, #-8]
  10deec:	e5933000 	ldr	r3, [r3]
  10def0:	e5933008 	ldr	r3, [r3, #8]
  10def4:	e3530000 	cmp	r3, #0
  10def8:	0a000033 	beq	10dfcc <lwip_netconn_do_bind+0x134>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
  10defc:	e51b3008 	ldr	r3, [fp, #-8]
  10df00:	e5933000 	ldr	r3, [r3]
  10df04:	e5933000 	ldr	r3, [r3]
  10df08:	e20330f0 	and	r3, r3, #240	; 0xf0
  10df0c:	e3530020 	cmp	r3, #32
  10df10:	0a000011 	beq	10df5c <lwip_netconn_do_bind+0xc4>
  10df14:	e3530040 	cmp	r3, #64	; 0x40
  10df18:	0a000002 	beq	10df28 <lwip_netconn_do_bind+0x90>
  10df1c:	e3530010 	cmp	r3, #16
  10df20:	0a00001b 	beq	10df94 <lwip_netconn_do_bind+0xfc>
      case NETCONN_TCP:
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
        break;
#endif /* LWIP_TCP */
      default:
        break;
  10df24:	ea000029 	b	10dfd0 <lwip_netconn_do_bind+0x138>
        msg->err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
  10df28:	e51b3008 	ldr	r3, [fp, #-8]
  10df2c:	e5933000 	ldr	r3, [r3]
  10df30:	e5932008 	ldr	r2, [r3, #8]
  10df34:	e51b3008 	ldr	r3, [fp, #-8]
  10df38:	e5933008 	ldr	r3, [r3, #8]
  10df3c:	e1a01003 	mov	r1, r3
  10df40:	e1a00002 	mov	r0, r2
  10df44:	eb003839 	bl	11c030 <raw_bind>
  10df48:	e1a03000 	mov	r3, r0
  10df4c:	e1a02003 	mov	r2, r3
  10df50:	e51b3008 	ldr	r3, [fp, #-8]
  10df54:	e5c32004 	strb	r2, [r3, #4]
        break;
  10df58:	ea00001c 	b	10dfd0 <lwip_netconn_do_bind+0x138>
        msg->err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
  10df5c:	e51b3008 	ldr	r3, [fp, #-8]
  10df60:	e5933000 	ldr	r3, [r3]
  10df64:	e5930008 	ldr	r0, [r3, #8]
  10df68:	e51b3008 	ldr	r3, [fp, #-8]
  10df6c:	e5931008 	ldr	r1, [r3, #8]
  10df70:	e51b3008 	ldr	r3, [fp, #-8]
  10df74:	e1d330bc 	ldrh	r3, [r3, #12]
  10df78:	e1a02003 	mov	r2, r3
  10df7c:	eb0068d9 	bl	1282e8 <udp_bind>
  10df80:	e1a03000 	mov	r3, r0
  10df84:	e1a02003 	mov	r2, r3
  10df88:	e51b3008 	ldr	r3, [fp, #-8]
  10df8c:	e5c32004 	strb	r2, [r3, #4]
        break;
  10df90:	ea00000e 	b	10dfd0 <lwip_netconn_do_bind+0x138>
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
  10df94:	e51b3008 	ldr	r3, [fp, #-8]
  10df98:	e5933000 	ldr	r3, [r3]
  10df9c:	e5930008 	ldr	r0, [r3, #8]
  10dfa0:	e51b3008 	ldr	r3, [fp, #-8]
  10dfa4:	e5931008 	ldr	r1, [r3, #8]
  10dfa8:	e51b3008 	ldr	r3, [fp, #-8]
  10dfac:	e1d330bc 	ldrh	r3, [r3, #12]
  10dfb0:	e1a02003 	mov	r2, r3
  10dfb4:	eb003dc8 	bl	11d6dc <tcp_bind>
  10dfb8:	e1a03000 	mov	r3, r0
  10dfbc:	e1a02003 	mov	r2, r3
  10dfc0:	e51b3008 	ldr	r3, [fp, #-8]
  10dfc4:	e5c32004 	strb	r2, [r3, #4]
        break;
  10dfc8:	ea000000 	b	10dfd0 <lwip_netconn_do_bind+0x138>
      }
    }
  10dfcc:	e320f000 	nop	{0}
  }
  TCPIP_APIMSG_ACK(msg);
  10dfd0:	e51b3008 	ldr	r3, [fp, #-8]
  10dfd4:	e5933000 	ldr	r3, [r3]
  10dfd8:	e3530000 	cmp	r3, #0
  10dfdc:	0a00000b 	beq	10e010 <lwip_netconn_do_bind+0x178>
  10dfe0:	ebffd095 	bl	10223c <rt_enter_critical>
  10dfe4:	e51b3008 	ldr	r3, [fp, #-8]
  10dfe8:	e5933000 	ldr	r3, [r3]
  10dfec:	e1d330dc 	ldrsb	r3, [r3, #12]
  10dff0:	e373000c 	cmn	r3, #12
  10dff4:	ba000004 	blt	10e00c <lwip_netconn_do_bind+0x174>
  10dff8:	e51b3008 	ldr	r3, [fp, #-8]
  10dffc:	e5933000 	ldr	r3, [r3]
  10e000:	e51b2008 	ldr	r2, [fp, #-8]
  10e004:	e1d220d4 	ldrsb	r2, [r2, #4]
  10e008:	e5c3200c 	strb	r2, [r3, #12]
  10e00c:	ebffd090 	bl	102254 <rt_exit_critical>
}
  10e010:	e320f000 	nop	{0}
  10e014:	e24bd004 	sub	sp, fp, #4
  10e018:	e8bd8800 	pop	{fp, pc}

0010e01c <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
  10e01c:	e92d4800 	push	{fp, lr}
  10e020:	e28db004 	add	fp, sp, #4
  10e024:	e24dd020 	sub	sp, sp, #32
  10e028:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10e02c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  10e030:	e1a03002 	mov	r3, r2
  10e034:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  struct netconn *conn;
  int was_blocking;
  sys_sem_t* op_completed_sem = NULL;
  10e038:	e3a03000 	mov	r3, #0
  10e03c:	e50b3008 	str	r3, [fp, #-8]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
  10e040:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10e044:	e50b300c 	str	r3, [fp, #-12]

  if (conn == NULL) {
  10e048:	e51b300c 	ldr	r3, [fp, #-12]
  10e04c:	e3530000 	cmp	r3, #0
  10e050:	1a000001 	bne	10e05c <lwip_netconn_do_connected+0x40>
    return ERR_VAL;
  10e054:	e3e03005 	mvn	r3, #5
  10e058:	ea000074 	b	10e230 <lwip_netconn_do_connected+0x214>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
  10e05c:	e51b300c 	ldr	r3, [fp, #-12]
  10e060:	e5933004 	ldr	r3, [r3, #4]
  10e064:	e3530003 	cmp	r3, #3
  10e068:	0a000006 	beq	10e088 <lwip_netconn_do_connected+0x6c>
  10e06c:	e3050f24 	movw	r0, #24356	; 0x5f24
  10e070:	e3400014 	movt	r0, #20
  10e074:	ebffd426 	bl	103114 <rt_kprintf>
  10e078:	e3001492 	movw	r1, #1170	; 0x492
  10e07c:	e3050be4 	movw	r0, #23524	; 0x5be4
  10e080:	e3400014 	movt	r0, #20
  10e084:	ebfff2a2 	bl	10ab14 <sys_arch_assert>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
  10e088:	e51b300c 	ldr	r3, [fp, #-12]
  10e08c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10e090:	e3530000 	cmp	r3, #0
  10e094:	1a00000b 	bne	10e0c8 <lwip_netconn_do_connected+0xac>
  10e098:	e51b300c 	ldr	r3, [fp, #-12]
  10e09c:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10e0a0:	e2033004 	and	r3, r3, #4
  10e0a4:	e3530000 	cmp	r3, #0
  10e0a8:	1a000006 	bne	10e0c8 <lwip_netconn_do_connected+0xac>
  10e0ac:	e3050f44 	movw	r0, #24388	; 0x5f44
  10e0b0:	e3400014 	movt	r0, #20
  10e0b4:	ebffd416 	bl	103114 <rt_kprintf>
  10e0b8:	e3001494 	movw	r1, #1172	; 0x494
  10e0bc:	e3050be4 	movw	r0, #23524	; 0x5be4
  10e0c0:	e3400014 	movt	r0, #20
  10e0c4:	ebfff292 	bl	10ab14 <sys_arch_assert>
    (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
  10e0c8:	e51b300c 	ldr	r3, [fp, #-12]
  10e0cc:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10e0d0:	e3530000 	cmp	r3, #0
  10e0d4:	0a000008 	beq	10e0fc <lwip_netconn_do_connected+0xe0>
    conn->current_msg->err = err;
  10e0d8:	e51b300c 	ldr	r3, [fp, #-12]
  10e0dc:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10e0e0:	e55b201d 	ldrb	r2, [fp, #-29]	; 0xffffffe3
  10e0e4:	e5c32004 	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
  10e0e8:	e51b300c 	ldr	r3, [fp, #-12]
  10e0ec:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10e0f0:	e5933000 	ldr	r3, [r3]
  10e0f4:	e2833010 	add	r3, r3, #16
  10e0f8:	e50b3008 	str	r3, [fp, #-8]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
  10e0fc:	e51b300c 	ldr	r3, [fp, #-12]
  10e100:	e5933000 	ldr	r3, [r3]
  10e104:	e20330f0 	and	r3, r3, #240	; 0xf0
  10e108:	e3530010 	cmp	r3, #16
  10e10c:	1a000004 	bne	10e124 <lwip_netconn_do_connected+0x108>
  10e110:	e15b31dd 	ldrsb	r3, [fp, #-29]	; 0xffffffe3
  10e114:	e3530000 	cmp	r3, #0
  10e118:	1a000001 	bne	10e124 <lwip_netconn_do_connected+0x108>
    setup_tcp(conn);
  10e11c:	e51b000c 	ldr	r0, [fp, #-12]
  10e120:	ebfffabe 	bl	10cc20 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
  10e124:	e51b300c 	ldr	r3, [fp, #-12]
  10e128:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10e12c:	e2033004 	and	r3, r3, #4
  10e130:	e3530000 	cmp	r3, #0
  10e134:	03a03001 	moveq	r3, #1
  10e138:	13a03000 	movne	r3, #0
  10e13c:	e6ef3073 	uxtb	r3, r3
  10e140:	e50b3010 	str	r3, [fp, #-16]
  SET_NONBLOCKING_CONNECT(conn, 0);
  10e144:	e51b300c 	ldr	r3, [fp, #-12]
  10e148:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10e14c:	e3c33004 	bic	r3, r3, #4
  10e150:	e6ef2073 	uxtb	r2, r3
  10e154:	e51b300c 	ldr	r3, [fp, #-12]
  10e158:	e5c32030 	strb	r2, [r3, #48]	; 0x30
  LWIP_ASSERT("blocking connect state error",
  10e15c:	e51b3010 	ldr	r3, [fp, #-16]
  10e160:	e3530000 	cmp	r3, #0
  10e164:	0a000002 	beq	10e174 <lwip_netconn_do_connected+0x158>
  10e168:	e51b3008 	ldr	r3, [fp, #-8]
  10e16c:	e3530000 	cmp	r3, #0
  10e170:	1a00000c 	bne	10e1a8 <lwip_netconn_do_connected+0x18c>
  10e174:	e51b3010 	ldr	r3, [fp, #-16]
  10e178:	e3530000 	cmp	r3, #0
  10e17c:	1a000002 	bne	10e18c <lwip_netconn_do_connected+0x170>
  10e180:	e51b3008 	ldr	r3, [fp, #-8]
  10e184:	e3530000 	cmp	r3, #0
  10e188:	0a000006 	beq	10e1a8 <lwip_netconn_do_connected+0x18c>
  10e18c:	e3050f84 	movw	r0, #24452	; 0x5f84
  10e190:	e3400014 	movt	r0, #20
  10e194:	ebffd3de 	bl	103114 <rt_kprintf>
  10e198:	e30014a1 	movw	r1, #1185	; 0x4a1
  10e19c:	e3050be4 	movw	r0, #23524	; 0x5be4
  10e1a0:	e3400014 	movt	r0, #20
  10e1a4:	ebfff25a 	bl	10ab14 <sys_arch_assert>
    (was_blocking && op_completed_sem != NULL) ||
    (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
  10e1a8:	e51b300c 	ldr	r3, [fp, #-12]
  10e1ac:	e3a02000 	mov	r2, #0
  10e1b0:	e5832038 	str	r2, [r3, #56]	; 0x38
  conn->state = NETCONN_NONE;
  10e1b4:	e51b300c 	ldr	r3, [fp, #-12]
  10e1b8:	e3a02000 	mov	r2, #0
  10e1bc:	e5832004 	str	r2, [r3, #4]
  NETCONN_SET_SAFE_ERR(conn, ERR_OK);
  10e1c0:	e51b300c 	ldr	r3, [fp, #-12]
  10e1c4:	e3530000 	cmp	r3, #0
  10e1c8:	0a000008 	beq	10e1f0 <lwip_netconn_do_connected+0x1d4>
  10e1cc:	ebffd01a 	bl	10223c <rt_enter_critical>
  10e1d0:	e51b300c 	ldr	r3, [fp, #-12]
  10e1d4:	e1d330dc 	ldrsb	r3, [r3, #12]
  10e1d8:	e373000c 	cmn	r3, #12
  10e1dc:	ba000002 	blt	10e1ec <lwip_netconn_do_connected+0x1d0>
  10e1e0:	e51b300c 	ldr	r3, [fp, #-12]
  10e1e4:	e3a02000 	mov	r2, #0
  10e1e8:	e5c3200c 	strb	r2, [r3, #12]
  10e1ec:	ebffd018 	bl	102254 <rt_exit_critical>
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
  10e1f0:	e51b300c 	ldr	r3, [fp, #-12]
  10e1f4:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10e1f8:	e3530000 	cmp	r3, #0
  10e1fc:	0a000005 	beq	10e218 <lwip_netconn_do_connected+0x1fc>
  10e200:	e51b300c 	ldr	r3, [fp, #-12]
  10e204:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10e208:	e3a02000 	mov	r2, #0
  10e20c:	e3a01002 	mov	r1, #2
  10e210:	e51b000c 	ldr	r0, [fp, #-12]
  10e214:	e12fff33 	blx	r3

  if (was_blocking) {
  10e218:	e51b3010 	ldr	r3, [fp, #-16]
  10e21c:	e3530000 	cmp	r3, #0
  10e220:	0a000001 	beq	10e22c <lwip_netconn_do_connected+0x210>
    sys_sem_signal(op_completed_sem);
  10e224:	e51b0008 	ldr	r0, [fp, #-8]
  10e228:	ebffefdd 	bl	10a1a4 <sys_sem_signal>
  }
  return ERR_OK;
  10e22c:	e3a03000 	mov	r3, #0
}
  10e230:	e1a00003 	mov	r0, r3
  10e234:	e24bd004 	sub	sp, fp, #4
  10e238:	e8bd8800 	pop	{fp, pc}

0010e23c <lwip_netconn_do_connect>:
 * @param m the api_msg_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
  10e23c:	e92d4800 	push	{fp, lr}
  10e240:	e28db004 	add	fp, sp, #4
  10e244:	e24dd010 	sub	sp, sp, #16
  10e248:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10e24c:	e51b3010 	ldr	r3, [fp, #-16]
  10e250:	e50b3008 	str	r3, [fp, #-8]

  if (msg->conn->pcb.tcp == NULL) {
  10e254:	e51b3008 	ldr	r3, [fp, #-8]
  10e258:	e5933000 	ldr	r3, [r3]
  10e25c:	e5933008 	ldr	r3, [r3, #8]
  10e260:	e3530000 	cmp	r3, #0
  10e264:	1a000003 	bne	10e278 <lwip_netconn_do_connect+0x3c>
    /* This may happen when calling netconn_connect() a second time */
    msg->err = ERR_CLSD;
  10e268:	e51b3008 	ldr	r3, [fp, #-8]
  10e26c:	e3e0200e 	mvn	r2, #14
  10e270:	e5c32004 	strb	r2, [r3, #4]
  10e274:	ea0000aa 	b	10e524 <lwip_netconn_do_connect+0x2e8>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
  10e278:	e51b3008 	ldr	r3, [fp, #-8]
  10e27c:	e5933000 	ldr	r3, [r3]
  10e280:	e5933000 	ldr	r3, [r3]
  10e284:	e20330f0 	and	r3, r3, #240	; 0xf0
  10e288:	e3530020 	cmp	r3, #32
  10e28c:	0a000011 	beq	10e2d8 <lwip_netconn_do_connect+0x9c>
  10e290:	e3530040 	cmp	r3, #64	; 0x40
  10e294:	0a000002 	beq	10e2a4 <lwip_netconn_do_connect+0x68>
  10e298:	e3530010 	cmp	r3, #16
  10e29c:	0a00001b 	beq	10e310 <lwip_netconn_do_connect+0xd4>
  10e2a0:	ea000093 	b	10e4f4 <lwip_netconn_do_connect+0x2b8>
#if LWIP_RAW
    case NETCONN_RAW:
      msg->err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
  10e2a4:	e51b3008 	ldr	r3, [fp, #-8]
  10e2a8:	e5933000 	ldr	r3, [r3]
  10e2ac:	e5932008 	ldr	r2, [r3, #8]
  10e2b0:	e51b3008 	ldr	r3, [fp, #-8]
  10e2b4:	e5933008 	ldr	r3, [r3, #8]
  10e2b8:	e1a01003 	mov	r1, r3
  10e2bc:	e1a00002 	mov	r0, r2
  10e2c0:	eb003775 	bl	11c09c <raw_connect>
  10e2c4:	e1a03000 	mov	r3, r0
  10e2c8:	e1a02003 	mov	r2, r3
  10e2cc:	e51b3008 	ldr	r3, [fp, #-8]
  10e2d0:	e5c32004 	strb	r2, [r3, #4]
      break;
  10e2d4:	ea000092 	b	10e524 <lwip_netconn_do_connect+0x2e8>
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
  10e2d8:	e51b3008 	ldr	r3, [fp, #-8]
  10e2dc:	e5933000 	ldr	r3, [r3]
  10e2e0:	e5930008 	ldr	r0, [r3, #8]
  10e2e4:	e51b3008 	ldr	r3, [fp, #-8]
  10e2e8:	e5931008 	ldr	r1, [r3, #8]
  10e2ec:	e51b3008 	ldr	r3, [fp, #-8]
  10e2f0:	e1d330bc 	ldrh	r3, [r3, #12]
  10e2f4:	e1a02003 	mov	r2, r3
  10e2f8:	eb006870 	bl	1284c0 <udp_connect>
  10e2fc:	e1a03000 	mov	r3, r0
  10e300:	e1a02003 	mov	r2, r3
  10e304:	e51b3008 	ldr	r3, [fp, #-8]
  10e308:	e5c32004 	strb	r2, [r3, #4]
      break;
  10e30c:	ea000084 	b	10e524 <lwip_netconn_do_connect+0x2e8>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      /* Prevent connect while doing any other action. */
      if (msg->conn->state == NETCONN_CONNECT) {
  10e310:	e51b3008 	ldr	r3, [fp, #-8]
  10e314:	e5933000 	ldr	r3, [r3]
  10e318:	e5933004 	ldr	r3, [r3, #4]
  10e31c:	e3530003 	cmp	r3, #3
  10e320:	1a000003 	bne	10e334 <lwip_netconn_do_connect+0xf8>
        msg->err = ERR_ALREADY;
  10e324:	e51b3008 	ldr	r3, [fp, #-8]
  10e328:	e3e02008 	mvn	r2, #8
  10e32c:	e5c32004 	strb	r2, [r3, #4]
#endif /* LWIP_TCPIP_CORE_LOCKING */
            return;
          }
        }
      }
      break;
  10e330:	ea00007a 	b	10e520 <lwip_netconn_do_connect+0x2e4>
      } else if (msg->conn->state != NETCONN_NONE) {
  10e334:	e51b3008 	ldr	r3, [fp, #-8]
  10e338:	e5933000 	ldr	r3, [r3]
  10e33c:	e5933004 	ldr	r3, [r3, #4]
  10e340:	e3530000 	cmp	r3, #0
  10e344:	0a000003 	beq	10e358 <lwip_netconn_do_connect+0x11c>
        msg->err = ERR_ISCONN;
  10e348:	e51b3008 	ldr	r3, [fp, #-8]
  10e34c:	e3e02009 	mvn	r2, #9
  10e350:	e5c32004 	strb	r2, [r3, #4]
      break;
  10e354:	ea000071 	b	10e520 <lwip_netconn_do_connect+0x2e4>
        setup_tcp(msg->conn);
  10e358:	e51b3008 	ldr	r3, [fp, #-8]
  10e35c:	e5933000 	ldr	r3, [r3]
  10e360:	e1a00003 	mov	r0, r3
  10e364:	ebfffa2d 	bl	10cc20 <setup_tcp>
        msg->err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
  10e368:	e51b3008 	ldr	r3, [fp, #-8]
  10e36c:	e5933000 	ldr	r3, [r3]
  10e370:	e5930008 	ldr	r0, [r3, #8]
  10e374:	e51b3008 	ldr	r3, [fp, #-8]
  10e378:	e5931008 	ldr	r1, [r3, #8]
  10e37c:	e51b3008 	ldr	r3, [fp, #-8]
  10e380:	e1d320bc 	ldrh	r2, [r3, #12]
  10e384:	e30e301c 	movw	r3, #57372	; 0xe01c
  10e388:	e3403010 	movt	r3, #16
  10e38c:	eb003efc 	bl	11df84 <tcp_connect>
  10e390:	e1a03000 	mov	r3, r0
  10e394:	e1a02003 	mov	r2, r3
  10e398:	e51b3008 	ldr	r3, [fp, #-8]
  10e39c:	e5c32004 	strb	r2, [r3, #4]
        if (msg->err == ERR_OK) {
  10e3a0:	e51b3008 	ldr	r3, [fp, #-8]
  10e3a4:	e1d330d4 	ldrsb	r3, [r3, #4]
  10e3a8:	e3530000 	cmp	r3, #0
  10e3ac:	1a00005b 	bne	10e520 <lwip_netconn_do_connect+0x2e4>
          u8_t non_blocking = netconn_is_nonblocking(msg->conn);
  10e3b0:	e51b3008 	ldr	r3, [fp, #-8]
  10e3b4:	e5933000 	ldr	r3, [r3]
  10e3b8:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10e3bc:	e2033002 	and	r3, r3, #2
  10e3c0:	e3530000 	cmp	r3, #0
  10e3c4:	13a03001 	movne	r3, #1
  10e3c8:	03a03000 	moveq	r3, #0
  10e3cc:	e6ef3073 	uxtb	r3, r3
  10e3d0:	e54b3009 	strb	r3, [fp, #-9]
          msg->conn->state = NETCONN_CONNECT;
  10e3d4:	e51b3008 	ldr	r3, [fp, #-8]
  10e3d8:	e5933000 	ldr	r3, [r3]
  10e3dc:	e3a02003 	mov	r2, #3
  10e3e0:	e5832004 	str	r2, [r3, #4]
          SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
  10e3e4:	e55b3009 	ldrb	r3, [fp, #-9]
  10e3e8:	e3530000 	cmp	r3, #0
  10e3ec:	0a000008 	beq	10e414 <lwip_netconn_do_connect+0x1d8>
  10e3f0:	e51b3008 	ldr	r3, [fp, #-8]
  10e3f4:	e5933000 	ldr	r3, [r3]
  10e3f8:	e5d32030 	ldrb	r2, [r3, #48]	; 0x30
  10e3fc:	e51b3008 	ldr	r3, [fp, #-8]
  10e400:	e5933000 	ldr	r3, [r3]
  10e404:	e3822004 	orr	r2, r2, #4
  10e408:	e6ef2072 	uxtb	r2, r2
  10e40c:	e5c32030 	strb	r2, [r3, #48]	; 0x30
  10e410:	ea000007 	b	10e434 <lwip_netconn_do_connect+0x1f8>
  10e414:	e51b3008 	ldr	r3, [fp, #-8]
  10e418:	e5933000 	ldr	r3, [r3]
  10e41c:	e5d32030 	ldrb	r2, [r3, #48]	; 0x30
  10e420:	e51b3008 	ldr	r3, [fp, #-8]
  10e424:	e5933000 	ldr	r3, [r3]
  10e428:	e3c22004 	bic	r2, r2, #4
  10e42c:	e6ef2072 	uxtb	r2, r2
  10e430:	e5c32030 	strb	r2, [r3, #48]	; 0x30
          if (non_blocking) {
  10e434:	e55b3009 	ldrb	r3, [fp, #-9]
  10e438:	e3530000 	cmp	r3, #0
  10e43c:	0a000003 	beq	10e450 <lwip_netconn_do_connect+0x214>
            msg->err = ERR_INPROGRESS;
  10e440:	e51b3008 	ldr	r3, [fp, #-8]
  10e444:	e3e02004 	mvn	r2, #4
  10e448:	e5c32004 	strb	r2, [r3, #4]
      break;
  10e44c:	ea000033 	b	10e520 <lwip_netconn_do_connect+0x2e4>
            msg->conn->current_msg = msg;
  10e450:	e51b3008 	ldr	r3, [fp, #-8]
  10e454:	e5933000 	ldr	r3, [r3]
  10e458:	e51b2008 	ldr	r2, [fp, #-8]
  10e45c:	e5832038 	str	r2, [r3, #56]	; 0x38
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
  10e460:	e51b3008 	ldr	r3, [fp, #-8]
  10e464:	e5933000 	ldr	r3, [r3]
  10e468:	e5933004 	ldr	r3, [r3, #4]
  10e46c:	e3530003 	cmp	r3, #3
  10e470:	0a000006 	beq	10e490 <lwip_netconn_do_connect+0x254>
  10e474:	e3050f1c 	movw	r0, #24348	; 0x5f1c
  10e478:	e3400014 	movt	r0, #20
  10e47c:	ebffd324 	bl	103114 <rt_kprintf>
  10e480:	e30014df 	movw	r1, #1247	; 0x4df
  10e484:	e3050be4 	movw	r0, #23524	; 0x5be4
  10e488:	e3400014 	movt	r0, #20
  10e48c:	ebfff1a0 	bl	10ab14 <sys_arch_assert>
            UNLOCK_TCPIP_CORE();
  10e490:	e30e0d64 	movw	r0, #60772	; 0xed64
  10e494:	e3400014 	movt	r0, #20
  10e498:	ebffefc8 	bl	10a3c0 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
  10e49c:	e51b3008 	ldr	r3, [fp, #-8]
  10e4a0:	e5933000 	ldr	r3, [r3]
  10e4a4:	e2833010 	add	r3, r3, #16
  10e4a8:	e3a01000 	mov	r1, #0
  10e4ac:	e1a00003 	mov	r0, r3
  10e4b0:	ebffef46 	bl	10a1d0 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
  10e4b4:	e30e0d64 	movw	r0, #60772	; 0xed64
  10e4b8:	e3400014 	movt	r0, #20
  10e4bc:	ebffefb3 	bl	10a390 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
  10e4c0:	e51b3008 	ldr	r3, [fp, #-8]
  10e4c4:	e5933000 	ldr	r3, [r3]
  10e4c8:	e5933004 	ldr	r3, [r3, #4]
  10e4cc:	e3530003 	cmp	r3, #3
  10e4d0:	1a000024 	bne	10e568 <lwip_netconn_do_connect+0x32c>
  10e4d4:	e3050f1c 	movw	r0, #24348	; 0x5f1c
  10e4d8:	e3400014 	movt	r0, #20
  10e4dc:	ebffd30c 	bl	103114 <rt_kprintf>
  10e4e0:	e30014e3 	movw	r1, #1251	; 0x4e3
  10e4e4:	e3050be4 	movw	r0, #23524	; 0x5be4
  10e4e8:	e3400014 	movt	r0, #20
  10e4ec:	ebfff188 	bl	10ab14 <sys_arch_assert>
            return;
  10e4f0:	ea00001c 	b	10e568 <lwip_netconn_do_connect+0x32c>
#endif /* LWIP_TCP */
    default:
      LWIP_ERROR("Invalid netconn type", 0, do{ msg->err = ERR_VAL; }while(0));
  10e4f4:	e3050fa4 	movw	r0, #24484	; 0x5fa4
  10e4f8:	e3400014 	movt	r0, #20
  10e4fc:	ebffd304 	bl	103114 <rt_kprintf>
  10e500:	e30014ec 	movw	r1, #1260	; 0x4ec
  10e504:	e3050be4 	movw	r0, #23524	; 0x5be4
  10e508:	e3400014 	movt	r0, #20
  10e50c:	ebfff180 	bl	10ab14 <sys_arch_assert>
  10e510:	e51b3008 	ldr	r3, [fp, #-8]
  10e514:	e3e02005 	mvn	r2, #5
  10e518:	e5c32004 	strb	r2, [r3, #4]
      break;
  10e51c:	ea000000 	b	10e524 <lwip_netconn_do_connect+0x2e8>
      break;
  10e520:	e320f000 	nop	{0}
    }
  }
  /* For all other protocols, netconn_connect() calls TCPIP_APIMSG(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
  10e524:	e51b3008 	ldr	r3, [fp, #-8]
  10e528:	e5933000 	ldr	r3, [r3]
  10e52c:	e3530000 	cmp	r3, #0
  10e530:	0a00000d 	beq	10e56c <lwip_netconn_do_connect+0x330>
  10e534:	ebffcf40 	bl	10223c <rt_enter_critical>
  10e538:	e51b3008 	ldr	r3, [fp, #-8]
  10e53c:	e5933000 	ldr	r3, [r3]
  10e540:	e1d330dc 	ldrsb	r3, [r3, #12]
  10e544:	e373000c 	cmn	r3, #12
  10e548:	ba000004 	blt	10e560 <lwip_netconn_do_connect+0x324>
  10e54c:	e51b3008 	ldr	r3, [fp, #-8]
  10e550:	e5933000 	ldr	r3, [r3]
  10e554:	e51b2008 	ldr	r2, [fp, #-8]
  10e558:	e1d220d4 	ldrsb	r2, [r2, #4]
  10e55c:	e5c3200c 	strb	r2, [r3, #12]
  10e560:	ebffcf3b 	bl	102254 <rt_exit_critical>
  10e564:	ea000000 	b	10e56c <lwip_netconn_do_connect+0x330>
            return;
  10e568:	e320f000 	nop	{0}
}
  10e56c:	e24bd004 	sub	sp, fp, #4
  10e570:	e8bd8800 	pop	{fp, pc}

0010e574 <lwip_netconn_do_disconnect>:
 *
 * @param m the api_msg_msg pointing to the connection to disconnect
 */
void
lwip_netconn_do_disconnect(void *m)
{
  10e574:	e92d4800 	push	{fp, lr}
  10e578:	e28db004 	add	fp, sp, #4
  10e57c:	e24dd010 	sub	sp, sp, #16
  10e580:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10e584:	e51b3010 	ldr	r3, [fp, #-16]
  10e588:	e50b3008 	str	r3, [fp, #-8]

#if LWIP_UDP
  if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
  10e58c:	e51b3008 	ldr	r3, [fp, #-8]
  10e590:	e5933000 	ldr	r3, [r3]
  10e594:	e5933000 	ldr	r3, [r3]
  10e598:	e20330f0 	and	r3, r3, #240	; 0xf0
  10e59c:	e3530020 	cmp	r3, #32
  10e5a0:	1a000008 	bne	10e5c8 <lwip_netconn_do_disconnect+0x54>
    udp_disconnect(msg->conn->pcb.udp);
  10e5a4:	e51b3008 	ldr	r3, [fp, #-8]
  10e5a8:	e5933000 	ldr	r3, [r3]
  10e5ac:	e5933008 	ldr	r3, [r3, #8]
  10e5b0:	e1a00003 	mov	r0, r3
  10e5b4:	eb006811 	bl	128600 <udp_disconnect>
    msg->err = ERR_OK;
  10e5b8:	e51b3008 	ldr	r3, [fp, #-8]
  10e5bc:	e3a02000 	mov	r2, #0
  10e5c0:	e5c32004 	strb	r2, [r3, #4]
  10e5c4:	ea000002 	b	10e5d4 <lwip_netconn_do_disconnect+0x60>
  } else
#endif /* LWIP_UDP */
  {
    msg->err = ERR_VAL;
  10e5c8:	e51b3008 	ldr	r3, [fp, #-8]
  10e5cc:	e3e02005 	mvn	r2, #5
  10e5d0:	e5c32004 	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
  10e5d4:	e51b3008 	ldr	r3, [fp, #-8]
  10e5d8:	e5933000 	ldr	r3, [r3]
  10e5dc:	e3530000 	cmp	r3, #0
  10e5e0:	0a00000b 	beq	10e614 <lwip_netconn_do_disconnect+0xa0>
  10e5e4:	ebffcf14 	bl	10223c <rt_enter_critical>
  10e5e8:	e51b3008 	ldr	r3, [fp, #-8]
  10e5ec:	e5933000 	ldr	r3, [r3]
  10e5f0:	e1d330dc 	ldrsb	r3, [r3, #12]
  10e5f4:	e373000c 	cmn	r3, #12
  10e5f8:	ba000004 	blt	10e610 <lwip_netconn_do_disconnect+0x9c>
  10e5fc:	e51b3008 	ldr	r3, [fp, #-8]
  10e600:	e5933000 	ldr	r3, [r3]
  10e604:	e51b2008 	ldr	r2, [fp, #-8]
  10e608:	e1d220d4 	ldrsb	r2, [r2, #4]
  10e60c:	e5c3200c 	strb	r2, [r3, #12]
  10e610:	ebffcf0f 	bl	102254 <rt_exit_critical>
}
  10e614:	e320f000 	nop	{0}
  10e618:	e24bd004 	sub	sp, fp, #4
  10e61c:	e8bd8800 	pop	{fp, pc}

0010e620 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
  10e620:	e92d4800 	push	{fp, lr}
  10e624:	e28db004 	add	fp, sp, #4
  10e628:	e24dd018 	sub	sp, sp, #24
  10e62c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct api_msg *msg = (struct api_msg*)m;
  10e630:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10e634:	e50b3008 	str	r3, [fp, #-8]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
  10e638:	e51b3008 	ldr	r3, [fp, #-8]
  10e63c:	e5933000 	ldr	r3, [r3]
  10e640:	e1d330dc 	ldrsb	r3, [r3, #12]
  10e644:	e373000c 	cmn	r3, #12
  10e648:	aa000005 	bge	10e664 <lwip_netconn_do_listen+0x44>
    msg->err = msg->conn->last_err;
  10e64c:	e51b3008 	ldr	r3, [fp, #-8]
  10e650:	e5933000 	ldr	r3, [r3]
  10e654:	e1d320dc 	ldrsb	r2, [r3, #12]
  10e658:	e51b3008 	ldr	r3, [fp, #-8]
  10e65c:	e5c32004 	strb	r2, [r3, #4]
  10e660:	ea000083 	b	10e874 <lwip_netconn_do_listen+0x254>
  } else {
    msg->err = ERR_CONN;
  10e664:	e51b3008 	ldr	r3, [fp, #-8]
  10e668:	e3e0200a 	mvn	r2, #10
  10e66c:	e5c32004 	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
  10e670:	e51b3008 	ldr	r3, [fp, #-8]
  10e674:	e5933000 	ldr	r3, [r3]
  10e678:	e5933008 	ldr	r3, [r3, #8]
  10e67c:	e3530000 	cmp	r3, #0
  10e680:	0a00007b 	beq	10e874 <lwip_netconn_do_listen+0x254>
      if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
  10e684:	e51b3008 	ldr	r3, [fp, #-8]
  10e688:	e5933000 	ldr	r3, [r3]
  10e68c:	e5933000 	ldr	r3, [r3]
  10e690:	e20330f0 	and	r3, r3, #240	; 0xf0
  10e694:	e3530010 	cmp	r3, #16
  10e698:	1a000072 	bne	10e868 <lwip_netconn_do_listen+0x248>
        if (msg->conn->state == NETCONN_NONE) {
  10e69c:	e51b3008 	ldr	r3, [fp, #-8]
  10e6a0:	e5933000 	ldr	r3, [r3]
  10e6a4:	e5933004 	ldr	r3, [r3, #4]
  10e6a8:	e3530000 	cmp	r3, #0
  10e6ac:	1a000064 	bne	10e844 <lwip_netconn_do_listen+0x224>
          struct tcp_pcb* lpcb;
          if (msg->conn->pcb.tcp->state != CLOSED) {
  10e6b0:	e51b3008 	ldr	r3, [fp, #-8]
  10e6b4:	e5933000 	ldr	r3, [r3]
  10e6b8:	e5933008 	ldr	r3, [r3, #8]
  10e6bc:	e5933014 	ldr	r3, [r3, #20]
  10e6c0:	e3530000 	cmp	r3, #0
  10e6c4:	0a000003 	beq	10e6d8 <lwip_netconn_do_listen+0xb8>
            /* connection is not closed, cannot listen */
            msg->err = ERR_VAL;
  10e6c8:	e51b3008 	ldr	r3, [fp, #-8]
  10e6cc:	e3e02005 	mvn	r2, #5
  10e6d0:	e5c32004 	strb	r2, [r3, #4]
  10e6d4:	ea000066 	b	10e874 <lwip_netconn_do_listen+0x254>
            err_t err;
            u8_t backlog;
#if TCP_LISTEN_BACKLOG
            backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
            backlog = TCP_DEFAULT_LISTEN_BACKLOG;
  10e6d8:	e3e03000 	mvn	r3, #0
  10e6dc:	e54b3009 	strb	r3, [fp, #-9]
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
            }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

            lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
  10e6e0:	e51b3008 	ldr	r3, [fp, #-8]
  10e6e4:	e5933000 	ldr	r3, [r3]
  10e6e8:	e5933008 	ldr	r3, [r3, #8]
  10e6ec:	e24b2011 	sub	r2, fp, #17
  10e6f0:	e55b1009 	ldrb	r1, [fp, #-9]
  10e6f4:	e1a00003 	mov	r0, r3
  10e6f8:	eb003ca6 	bl	11d998 <tcp_listen_with_backlog_and_err>
  10e6fc:	e50b0010 	str	r0, [fp, #-16]

            if (lpcb == NULL) {
  10e700:	e51b3010 	ldr	r3, [fp, #-16]
  10e704:	e3530000 	cmp	r3, #0
  10e708:	1a000003 	bne	10e71c <lwip_netconn_do_listen+0xfc>
              /* in this case, the old pcb is still allocated */
              msg->err = err;
  10e70c:	e15b21d1 	ldrsb	r2, [fp, #-17]	; 0xffffffef
  10e710:	e51b3008 	ldr	r3, [fp, #-8]
  10e714:	e5c32004 	strb	r2, [r3, #4]
  10e718:	ea000055 	b	10e874 <lwip_netconn_do_listen+0x254>
            } else {
              /* delete the recvmbox and allocate the acceptmbox */
              if (sys_mbox_valid(&msg->conn->recvmbox)) {
  10e71c:	e51b3008 	ldr	r3, [fp, #-8]
  10e720:	e5933000 	ldr	r3, [r3]
  10e724:	e2833014 	add	r3, r3, #20
  10e728:	e1a00003 	mov	r0, r3
  10e72c:	ebfff0af 	bl	10a9f0 <sys_mbox_valid>
  10e730:	e1a03000 	mov	r3, r0
  10e734:	e3530000 	cmp	r3, #0
  10e738:	0a000009 	beq	10e764 <lwip_netconn_do_listen+0x144>
                /** @todo: should we drain the recvmbox here? */
                sys_mbox_free(&msg->conn->recvmbox);
  10e73c:	e51b3008 	ldr	r3, [fp, #-8]
  10e740:	e5933000 	ldr	r3, [r3]
  10e744:	e2833014 	add	r3, r3, #20
  10e748:	e1a00003 	mov	r0, r3
  10e74c:	ebffefe9 	bl	10a6f8 <sys_mbox_free>
                sys_mbox_set_invalid(&msg->conn->recvmbox);
  10e750:	e51b3008 	ldr	r3, [fp, #-8]
  10e754:	e5933000 	ldr	r3, [r3]
  10e758:	e2833014 	add	r3, r3, #20
  10e75c:	e1a00003 	mov	r0, r3
  10e760:	ebfff0ac 	bl	10aa18 <sys_mbox_set_invalid>
              }
              msg->err = ERR_OK;
  10e764:	e51b3008 	ldr	r3, [fp, #-8]
  10e768:	e3a02000 	mov	r2, #0
  10e76c:	e5c32004 	strb	r2, [r3, #4]
              if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
  10e770:	e51b3008 	ldr	r3, [fp, #-8]
  10e774:	e5933000 	ldr	r3, [r3]
  10e778:	e2833018 	add	r3, r3, #24
  10e77c:	e1a00003 	mov	r0, r3
  10e780:	ebfff09a 	bl	10a9f0 <sys_mbox_valid>
  10e784:	e1a03000 	mov	r3, r0
  10e788:	e3530000 	cmp	r3, #0
  10e78c:	1a000009 	bne	10e7b8 <lwip_netconn_do_listen+0x198>
                msg->err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
  10e790:	e51b3008 	ldr	r3, [fp, #-8]
  10e794:	e5933000 	ldr	r3, [r3]
  10e798:	e2833018 	add	r3, r3, #24
  10e79c:	e3a0100a 	mov	r1, #10
  10e7a0:	e1a00003 	mov	r0, r3
  10e7a4:	ebffef8e 	bl	10a5e4 <sys_mbox_new>
  10e7a8:	e1a03000 	mov	r3, r0
  10e7ac:	e1a02003 	mov	r2, r3
  10e7b0:	e51b3008 	ldr	r3, [fp, #-8]
  10e7b4:	e5c32004 	strb	r2, [r3, #4]
              }
              if (msg->err == ERR_OK) {
  10e7b8:	e51b3008 	ldr	r3, [fp, #-8]
  10e7bc:	e1d330d4 	ldrsb	r3, [r3, #4]
  10e7c0:	e3530000 	cmp	r3, #0
  10e7c4:	1a000017 	bne	10e828 <lwip_netconn_do_listen+0x208>
                msg->conn->state = NETCONN_LISTEN;
  10e7c8:	e51b3008 	ldr	r3, [fp, #-8]
  10e7cc:	e5933000 	ldr	r3, [r3]
  10e7d0:	e3a02002 	mov	r2, #2
  10e7d4:	e5832004 	str	r2, [r3, #4]
                msg->conn->pcb.tcp = lpcb;
  10e7d8:	e51b3008 	ldr	r3, [fp, #-8]
  10e7dc:	e5933000 	ldr	r3, [r3]
  10e7e0:	e51b2010 	ldr	r2, [fp, #-16]
  10e7e4:	e5832008 	str	r2, [r3, #8]
                tcp_arg(msg->conn->pcb.tcp, msg->conn);
  10e7e8:	e51b3008 	ldr	r3, [fp, #-8]
  10e7ec:	e5933000 	ldr	r3, [r3]
  10e7f0:	e5932008 	ldr	r2, [r3, #8]
  10e7f4:	e51b3008 	ldr	r3, [fp, #-8]
  10e7f8:	e5933000 	ldr	r3, [r3]
  10e7fc:	e1a01003 	mov	r1, r3
  10e800:	e1a00002 	mov	r0, r2
  10e804:	eb0043fd 	bl	11f800 <tcp_arg>
                tcp_accept(msg->conn->pcb.tcp, accept_function);
  10e808:	e51b3008 	ldr	r3, [fp, #-8]
  10e80c:	e5933000 	ldr	r3, [r3]
  10e810:	e5933008 	ldr	r3, [r3, #8]
  10e814:	e30c1c98 	movw	r1, #52376	; 0xcc98
  10e818:	e3401010 	movt	r1, #16
  10e81c:	e1a00003 	mov	r0, r3
  10e820:	eb004450 	bl	11f968 <tcp_accept>
  10e824:	ea000012 	b	10e874 <lwip_netconn_do_listen+0x254>
              } else {
                /* since the old pcb is already deallocated, free lpcb now */
                tcp_close(lpcb);
  10e828:	e51b0010 	ldr	r0, [fp, #-16]
  10e82c:	eb003aac 	bl	11d2e4 <tcp_close>
                msg->conn->pcb.tcp = NULL;
  10e830:	e51b3008 	ldr	r3, [fp, #-8]
  10e834:	e5933000 	ldr	r3, [r3]
  10e838:	e3a02000 	mov	r2, #0
  10e83c:	e5832008 	str	r2, [r3, #8]
  10e840:	ea00000b 	b	10e874 <lwip_netconn_do_listen+0x254>
              }
            }
          }
        } else if (msg->conn->state == NETCONN_LISTEN) {
  10e844:	e51b3008 	ldr	r3, [fp, #-8]
  10e848:	e5933000 	ldr	r3, [r3]
  10e84c:	e5933004 	ldr	r3, [r3, #4]
  10e850:	e3530002 	cmp	r3, #2
  10e854:	1a000006 	bne	10e874 <lwip_netconn_do_listen+0x254>
          /* already listening, allow updating of the backlog */
          msg->err = ERR_OK;
  10e858:	e51b3008 	ldr	r3, [fp, #-8]
  10e85c:	e3a02000 	mov	r2, #0
  10e860:	e5c32004 	strb	r2, [r3, #4]
  10e864:	ea000002 	b	10e874 <lwip_netconn_do_listen+0x254>
          tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
        }
      } else {
        msg->err = ERR_ARG;
  10e868:	e51b3008 	ldr	r3, [fp, #-8]
  10e86c:	e3e0200f 	mvn	r2, #15
  10e870:	e5c32004 	strb	r2, [r3, #4]
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
  10e874:	e51b3008 	ldr	r3, [fp, #-8]
  10e878:	e5933000 	ldr	r3, [r3]
  10e87c:	e3530000 	cmp	r3, #0
  10e880:	0a00000b 	beq	10e8b4 <lwip_netconn_do_listen+0x294>
  10e884:	ebffce6c 	bl	10223c <rt_enter_critical>
  10e888:	e51b3008 	ldr	r3, [fp, #-8]
  10e88c:	e5933000 	ldr	r3, [r3]
  10e890:	e1d330dc 	ldrsb	r3, [r3, #12]
  10e894:	e373000c 	cmn	r3, #12
  10e898:	ba000004 	blt	10e8b0 <lwip_netconn_do_listen+0x290>
  10e89c:	e51b3008 	ldr	r3, [fp, #-8]
  10e8a0:	e5933000 	ldr	r3, [r3]
  10e8a4:	e51b2008 	ldr	r2, [fp, #-8]
  10e8a8:	e1d220d4 	ldrsb	r2, [r2, #4]
  10e8ac:	e5c3200c 	strb	r2, [r3, #12]
  10e8b0:	ebffce67 	bl	102254 <rt_exit_critical>
}
  10e8b4:	e320f000 	nop	{0}
  10e8b8:	e24bd004 	sub	sp, fp, #4
  10e8bc:	e8bd8800 	pop	{fp, pc}

0010e8c0 <lwip_netconn_do_send>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
  10e8c0:	e92d4800 	push	{fp, lr}
  10e8c4:	e28db004 	add	fp, sp, #4
  10e8c8:	e24dd010 	sub	sp, sp, #16
  10e8cc:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10e8d0:	e51b3010 	ldr	r3, [fp, #-16]
  10e8d4:	e50b3008 	str	r3, [fp, #-8]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
  10e8d8:	e51b3008 	ldr	r3, [fp, #-8]
  10e8dc:	e5933000 	ldr	r3, [r3]
  10e8e0:	e1d330dc 	ldrsb	r3, [r3, #12]
  10e8e4:	e373000c 	cmn	r3, #12
  10e8e8:	aa000005 	bge	10e904 <lwip_netconn_do_send+0x44>
    msg->err = msg->conn->last_err;
  10e8ec:	e51b3008 	ldr	r3, [fp, #-8]
  10e8f0:	e5933000 	ldr	r3, [r3]
  10e8f4:	e1d320dc 	ldrsb	r2, [r3, #12]
  10e8f8:	e51b3008 	ldr	r3, [fp, #-8]
  10e8fc:	e5c32004 	strb	r2, [r3, #4]
  10e900:	ea00005e 	b	10ea80 <lwip_netconn_do_send+0x1c0>
  } else {
    msg->err = ERR_CONN;
  10e904:	e51b3008 	ldr	r3, [fp, #-8]
  10e908:	e3e0200a 	mvn	r2, #10
  10e90c:	e5c32004 	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
  10e910:	e51b3008 	ldr	r3, [fp, #-8]
  10e914:	e5933000 	ldr	r3, [r3]
  10e918:	e5933008 	ldr	r3, [r3, #8]
  10e91c:	e3530000 	cmp	r3, #0
  10e920:	0a000055 	beq	10ea7c <lwip_netconn_do_send+0x1bc>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
  10e924:	e51b3008 	ldr	r3, [fp, #-8]
  10e928:	e5933000 	ldr	r3, [r3]
  10e92c:	e5933000 	ldr	r3, [r3]
  10e930:	e20330f0 	and	r3, r3, #240	; 0xf0
  10e934:	e3530020 	cmp	r3, #32
  10e938:	0a00002a 	beq	10e9e8 <lwip_netconn_do_send+0x128>
  10e93c:	e3530040 	cmp	r3, #64	; 0x40
  10e940:	0a000000 	beq	10e948 <lwip_netconn_do_send+0x88>
        }
#endif /* LWIP_CHECKSUM_ON_COPY */
        break;
#endif /* LWIP_UDP */
      default:
        break;
  10e944:	ea00004d 	b	10ea80 <lwip_netconn_do_send+0x1c0>
        if (ip_addr_isany(&msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
  10e948:	e51b3008 	ldr	r3, [fp, #-8]
  10e94c:	e5933008 	ldr	r3, [r3, #8]
  10e950:	e2833008 	add	r3, r3, #8
  10e954:	e3530000 	cmp	r3, #0
  10e958:	0a000004 	beq	10e970 <lwip_netconn_do_send+0xb0>
  10e95c:	e51b3008 	ldr	r3, [fp, #-8]
  10e960:	e5933008 	ldr	r3, [r3, #8]
  10e964:	e5933008 	ldr	r3, [r3, #8]
  10e968:	e3530000 	cmp	r3, #0
  10e96c:	1a00000d 	bne	10e9a8 <lwip_netconn_do_send+0xe8>
          msg->err = raw_send(msg->conn->pcb.raw, msg->msg.b->p);
  10e970:	e51b3008 	ldr	r3, [fp, #-8]
  10e974:	e5933000 	ldr	r3, [r3]
  10e978:	e5932008 	ldr	r2, [r3, #8]
  10e97c:	e51b3008 	ldr	r3, [fp, #-8]
  10e980:	e5933008 	ldr	r3, [r3, #8]
  10e984:	e5933000 	ldr	r3, [r3]
  10e988:	e1a01003 	mov	r1, r3
  10e98c:	e1a00002 	mov	r0, r2
  10e990:	eb00367a 	bl	11c380 <raw_send>
  10e994:	e1a03000 	mov	r3, r0
  10e998:	e1a02003 	mov	r2, r3
  10e99c:	e51b3008 	ldr	r3, [fp, #-8]
  10e9a0:	e5c32004 	strb	r2, [r3, #4]
        break;
  10e9a4:	ea000035 	b	10ea80 <lwip_netconn_do_send+0x1c0>
          msg->err = raw_sendto(msg->conn->pcb.raw, msg->msg.b->p, &msg->msg.b->addr);
  10e9a8:	e51b3008 	ldr	r3, [fp, #-8]
  10e9ac:	e5933000 	ldr	r3, [r3]
  10e9b0:	e5930008 	ldr	r0, [r3, #8]
  10e9b4:	e51b3008 	ldr	r3, [fp, #-8]
  10e9b8:	e5933008 	ldr	r3, [r3, #8]
  10e9bc:	e5931000 	ldr	r1, [r3]
  10e9c0:	e51b3008 	ldr	r3, [fp, #-8]
  10e9c4:	e5933008 	ldr	r3, [r3, #8]
  10e9c8:	e2833008 	add	r3, r3, #8
  10e9cc:	e1a02003 	mov	r2, r3
  10e9d0:	eb0035dc 	bl	11c148 <raw_sendto>
  10e9d4:	e1a03000 	mov	r3, r0
  10e9d8:	e1a02003 	mov	r2, r3
  10e9dc:	e51b3008 	ldr	r3, [fp, #-8]
  10e9e0:	e5c32004 	strb	r2, [r3, #4]
        break;
  10e9e4:	ea000025 	b	10ea80 <lwip_netconn_do_send+0x1c0>
        if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
  10e9e8:	e51b3008 	ldr	r3, [fp, #-8]
  10e9ec:	e5933008 	ldr	r3, [r3, #8]
  10e9f0:	e5933008 	ldr	r3, [r3, #8]
  10e9f4:	e3530000 	cmp	r3, #0
  10e9f8:	1a00000d 	bne	10ea34 <lwip_netconn_do_send+0x174>
          msg->err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
  10e9fc:	e51b3008 	ldr	r3, [fp, #-8]
  10ea00:	e5933000 	ldr	r3, [r3]
  10ea04:	e5932008 	ldr	r2, [r3, #8]
  10ea08:	e51b3008 	ldr	r3, [fp, #-8]
  10ea0c:	e5933008 	ldr	r3, [r3, #8]
  10ea10:	e5933000 	ldr	r3, [r3]
  10ea14:	e1a01003 	mov	r1, r3
  10ea18:	e1a00002 	mov	r0, r2
  10ea1c:	eb0064d3 	bl	127d70 <udp_send>
  10ea20:	e1a03000 	mov	r3, r0
  10ea24:	e1a02003 	mov	r2, r3
  10ea28:	e51b3008 	ldr	r3, [fp, #-8]
  10ea2c:	e5c32004 	strb	r2, [r3, #4]
        break;
  10ea30:	ea000012 	b	10ea80 <lwip_netconn_do_send+0x1c0>
          msg->err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
  10ea34:	e51b3008 	ldr	r3, [fp, #-8]
  10ea38:	e5933000 	ldr	r3, [r3]
  10ea3c:	e5930008 	ldr	r0, [r3, #8]
  10ea40:	e51b3008 	ldr	r3, [fp, #-8]
  10ea44:	e5933008 	ldr	r3, [r3, #8]
  10ea48:	e5931000 	ldr	r1, [r3]
  10ea4c:	e51b3008 	ldr	r3, [fp, #-8]
  10ea50:	e5933008 	ldr	r3, [r3, #8]
  10ea54:	e2832008 	add	r2, r3, #8
  10ea58:	e51b3008 	ldr	r3, [fp, #-8]
  10ea5c:	e5933008 	ldr	r3, [r3, #8]
  10ea60:	e1d330bc 	ldrh	r3, [r3, #12]
  10ea64:	eb0064d6 	bl	127dc4 <udp_sendto>
  10ea68:	e1a03000 	mov	r3, r0
  10ea6c:	e1a02003 	mov	r2, r3
  10ea70:	e51b3008 	ldr	r3, [fp, #-8]
  10ea74:	e5c32004 	strb	r2, [r3, #4]
        break;
  10ea78:	ea000000 	b	10ea80 <lwip_netconn_do_send+0x1c0>
      }
    }
  10ea7c:	e320f000 	nop	{0}
  }
  TCPIP_APIMSG_ACK(msg);
  10ea80:	e51b3008 	ldr	r3, [fp, #-8]
  10ea84:	e5933000 	ldr	r3, [r3]
  10ea88:	e3530000 	cmp	r3, #0
  10ea8c:	0a00000b 	beq	10eac0 <lwip_netconn_do_send+0x200>
  10ea90:	ebffcde9 	bl	10223c <rt_enter_critical>
  10ea94:	e51b3008 	ldr	r3, [fp, #-8]
  10ea98:	e5933000 	ldr	r3, [r3]
  10ea9c:	e1d330dc 	ldrsb	r3, [r3, #12]
  10eaa0:	e373000c 	cmn	r3, #12
  10eaa4:	ba000004 	blt	10eabc <lwip_netconn_do_send+0x1fc>
  10eaa8:	e51b3008 	ldr	r3, [fp, #-8]
  10eaac:	e5933000 	ldr	r3, [r3]
  10eab0:	e51b2008 	ldr	r2, [fp, #-8]
  10eab4:	e1d220d4 	ldrsb	r2, [r2, #4]
  10eab8:	e5c3200c 	strb	r2, [r3, #12]
  10eabc:	ebffcde4 	bl	102254 <rt_exit_critical>
}
  10eac0:	e320f000 	nop	{0}
  10eac4:	e24bd004 	sub	sp, fp, #4
  10eac8:	e8bd8800 	pop	{fp, pc}

0010eacc <lwip_netconn_do_recv>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
  10eacc:	e92d4800 	push	{fp, lr}
  10ead0:	e28db004 	add	fp, sp, #4
  10ead4:	e24dd018 	sub	sp, sp, #24
  10ead8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct api_msg *msg = (struct api_msg*)m;
  10eadc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10eae0:	e50b300c 	str	r3, [fp, #-12]

  msg->err = ERR_OK;
  10eae4:	e51b300c 	ldr	r3, [fp, #-12]
  10eae8:	e3a02000 	mov	r2, #0
  10eaec:	e5c32004 	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
  10eaf0:	e51b300c 	ldr	r3, [fp, #-12]
  10eaf4:	e5933000 	ldr	r3, [r3]
  10eaf8:	e5933008 	ldr	r3, [r3, #8]
  10eafc:	e3530000 	cmp	r3, #0
  10eb00:	0a00001e 	beq	10eb80 <lwip_netconn_do_recv+0xb4>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
  10eb04:	e51b300c 	ldr	r3, [fp, #-12]
  10eb08:	e5933000 	ldr	r3, [r3]
  10eb0c:	e5933000 	ldr	r3, [r3]
  10eb10:	e20330f0 	and	r3, r3, #240	; 0xf0
  10eb14:	e3530010 	cmp	r3, #16
  10eb18:	1a000018 	bne	10eb80 <lwip_netconn_do_recv+0xb4>
      u32_t remaining = msg->msg.r.len;
  10eb1c:	e51b300c 	ldr	r3, [fp, #-12]
  10eb20:	e5933008 	ldr	r3, [r3, #8]
  10eb24:	e50b3008 	str	r3, [fp, #-8]
      do {
        u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
  10eb28:	e51b3008 	ldr	r3, [fp, #-8]
  10eb2c:	e3530801 	cmp	r3, #65536	; 0x10000
  10eb30:	2a000002 	bcs	10eb40 <lwip_netconn_do_recv+0x74>
  10eb34:	e51b3008 	ldr	r3, [fp, #-8]
  10eb38:	e6ff3073 	uxth	r3, r3
  10eb3c:	ea000000 	b	10eb44 <lwip_netconn_do_recv+0x78>
  10eb40:	e30f3fff 	movw	r3, #65535	; 0xffff
  10eb44:	e14b30be 	strh	r3, [fp, #-14]
        tcp_recved(msg->conn->pcb.tcp, recved);
  10eb48:	e51b300c 	ldr	r3, [fp, #-12]
  10eb4c:	e5933000 	ldr	r3, [r3]
  10eb50:	e5933008 	ldr	r3, [r3, #8]
  10eb54:	e15b20be 	ldrh	r2, [fp, #-14]
  10eb58:	e1a01002 	mov	r1, r2
  10eb5c:	e1a00003 	mov	r0, r3
  10eb60:	eb003c85 	bl	11dd7c <tcp_recved>
        remaining -= recved;
  10eb64:	e15b30be 	ldrh	r3, [fp, #-14]
  10eb68:	e51b2008 	ldr	r2, [fp, #-8]
  10eb6c:	e0423003 	sub	r3, r2, r3
  10eb70:	e50b3008 	str	r3, [fp, #-8]
      } while (remaining != 0);
  10eb74:	e51b3008 	ldr	r3, [fp, #-8]
  10eb78:	e3530000 	cmp	r3, #0
  10eb7c:	1affffe9 	bne	10eb28 <lwip_netconn_do_recv+0x5c>
    }
  }
  TCPIP_APIMSG_ACK(msg);
  10eb80:	e51b300c 	ldr	r3, [fp, #-12]
  10eb84:	e5933000 	ldr	r3, [r3]
  10eb88:	e3530000 	cmp	r3, #0
  10eb8c:	0a00000b 	beq	10ebc0 <lwip_netconn_do_recv+0xf4>
  10eb90:	ebffcda9 	bl	10223c <rt_enter_critical>
  10eb94:	e51b300c 	ldr	r3, [fp, #-12]
  10eb98:	e5933000 	ldr	r3, [r3]
  10eb9c:	e1d330dc 	ldrsb	r3, [r3, #12]
  10eba0:	e373000c 	cmn	r3, #12
  10eba4:	ba000004 	blt	10ebbc <lwip_netconn_do_recv+0xf0>
  10eba8:	e51b300c 	ldr	r3, [fp, #-12]
  10ebac:	e5933000 	ldr	r3, [r3]
  10ebb0:	e51b200c 	ldr	r2, [fp, #-12]
  10ebb4:	e1d220d4 	ldrsb	r2, [r2, #4]
  10ebb8:	e5c3200c 	strb	r2, [r3, #12]
  10ebbc:	ebffcda4 	bl	102254 <rt_exit_critical>
}
  10ebc0:	e320f000 	nop	{0}
  10ebc4:	e24bd004 	sub	sp, fp, #4
  10ebc8:	e8bd8800 	pop	{fp, pc}

0010ebcc <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
  10ebcc:	e92d4800 	push	{fp, lr}
  10ebd0:	e28db004 	add	fp, sp, #4
  10ebd4:	e24dd020 	sub	sp, sp, #32
  10ebd8:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  10ebdc:	e1a03001 	mov	r3, r1
  10ebe0:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
  10ebe4:	e3a03000 	mov	r3, #0
  10ebe8:	e54b3009 	strb	r3, [fp, #-9]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;

  LWIP_ASSERT("conn != NULL", conn != NULL);
  10ebec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ebf0:	e3530000 	cmp	r3, #0
  10ebf4:	1a000006 	bne	10ec14 <lwip_netconn_do_writemore+0x48>
  10ebf8:	e3050cdc 	movw	r0, #23772	; 0x5cdc
  10ebfc:	e3400014 	movt	r0, #20
  10ec00:	ebffd143 	bl	103114 <rt_kprintf>
  10ec04:	e30015dd 	movw	r1, #1501	; 0x5dd
  10ec08:	e3050be4 	movw	r0, #23524	; 0x5be4
  10ec0c:	e3400014 	movt	r0, #20
  10ec10:	ebffefbf 	bl	10ab14 <sys_arch_assert>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
  10ec14:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ec18:	e5933004 	ldr	r3, [r3, #4]
  10ec1c:	e3530001 	cmp	r3, #1
  10ec20:	0a000006 	beq	10ec40 <lwip_netconn_do_writemore+0x74>
  10ec24:	e3050fbc 	movw	r0, #24508	; 0x5fbc
  10ec28:	e3400014 	movt	r0, #20
  10ec2c:	ebffd138 	bl	103114 <rt_kprintf>
  10ec30:	e30015de 	movw	r1, #1502	; 0x5de
  10ec34:	e3050be4 	movw	r0, #23524	; 0x5be4
  10ec38:	e3400014 	movt	r0, #20
  10ec3c:	ebffefb4 	bl	10ab14 <sys_arch_assert>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
  10ec40:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ec44:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10ec48:	e3530000 	cmp	r3, #0
  10ec4c:	1a000006 	bne	10ec6c <lwip_netconn_do_writemore+0xa0>
  10ec50:	e3050cec 	movw	r0, #23788	; 0x5cec
  10ec54:	e3400014 	movt	r0, #20
  10ec58:	ebffd12d 	bl	103114 <rt_kprintf>
  10ec5c:	e30015df 	movw	r1, #1503	; 0x5df
  10ec60:	e3050be4 	movw	r0, #23524	; 0x5be4
  10ec64:	e3400014 	movt	r0, #20
  10ec68:	ebffefa9 	bl	10ab14 <sys_arch_assert>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
  10ec6c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ec70:	e5933008 	ldr	r3, [r3, #8]
  10ec74:	e3530000 	cmp	r3, #0
  10ec78:	1a000006 	bne	10ec98 <lwip_netconn_do_writemore+0xcc>
  10ec7c:	e3050fdc 	movw	r0, #24540	; 0x5fdc
  10ec80:	e3400014 	movt	r0, #20
  10ec84:	ebffd122 	bl	103114 <rt_kprintf>
  10ec88:	e3a01e5e 	mov	r1, #1504	; 0x5e0
  10ec8c:	e3050be4 	movw	r0, #23524	; 0x5be4
  10ec90:	e3400014 	movt	r0, #20
  10ec94:	ebffef9e 	bl	10ab14 <sys_arch_assert>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
  10ec98:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ec9c:	e5932034 	ldr	r2, [r3, #52]	; 0x34
  10eca0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10eca4:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10eca8:	e593300c 	ldr	r3, [r3, #12]
  10ecac:	e1520003 	cmp	r2, r3
  10ecb0:	3a000006 	bcc	10ecd0 <lwip_netconn_do_writemore+0x104>
  10ecb4:	e3050ff4 	movw	r0, #24564	; 0x5ff4
  10ecb8:	e3400014 	movt	r0, #20
  10ecbc:	ebffd114 	bl	103114 <rt_kprintf>
  10ecc0:	e30015e2 	movw	r1, #1506	; 0x5e2
  10ecc4:	e3050be4 	movw	r0, #23524	; 0x5be4
  10ecc8:	e3400014 	movt	r0, #20
  10eccc:	ebffef90 	bl	10ab14 <sys_arch_assert>
    conn->write_offset < conn->current_msg->msg.w.len);

  apiflags = conn->current_msg->msg.w.apiflags;
  10ecd0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ecd4:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10ecd8:	e5d33010 	ldrb	r3, [r3, #16]
  10ecdc:	e54b300a 	strb	r3, [fp, #-10]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
  10ece0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ece4:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10ece8:	e2033002 	and	r3, r3, #2
  10ecec:	e3530000 	cmp	r3, #0
  10ecf0:	1a000003 	bne	10ed04 <lwip_netconn_do_writemore+0x138>
  10ecf4:	e55b300a 	ldrb	r3, [fp, #-10]
  10ecf8:	e2033004 	and	r3, r3, #4
  10ecfc:	e3530000 	cmp	r3, #0
  10ed00:	0a000001 	beq	10ed0c <lwip_netconn_do_writemore+0x140>
  10ed04:	e3a03001 	mov	r3, #1
  10ed08:	ea000000 	b	10ed10 <lwip_netconn_do_writemore+0x144>
  10ed0c:	e3a03000 	mov	r3, #0
  10ed10:	e54b300b 	strb	r3, [fp, #-11]

#if LWIP_SO_SNDTIMEO
  if ((conn->send_timeout != 0) &&
  10ed14:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ed18:	e5933020 	ldr	r3, [r3, #32]
  10ed1c:	e3530000 	cmp	r3, #0
  10ed20:	0a000022 	beq	10edb0 <lwip_netconn_do_writemore+0x1e4>
      ((s32_t)(sys_now() - conn->current_msg->msg.w.time_started) >= conn->send_timeout)) {
  10ed24:	ebffef93 	bl	10ab78 <sys_now>
  10ed28:	e1a02000 	mov	r2, r0
  10ed2c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ed30:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10ed34:	e5933014 	ldr	r3, [r3, #20]
  10ed38:	e0423003 	sub	r3, r2, r3
  10ed3c:	e1a02003 	mov	r2, r3
  10ed40:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ed44:	e5933020 	ldr	r3, [r3, #32]
  if ((conn->send_timeout != 0) &&
  10ed48:	e1520003 	cmp	r2, r3
  10ed4c:	ba000017 	blt	10edb0 <lwip_netconn_do_writemore+0x1e4>
    write_finished = 1;
  10ed50:	e3a03001 	mov	r3, #1
  10ed54:	e54b3009 	strb	r3, [fp, #-9]
    if (conn->write_offset == 0) {
  10ed58:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ed5c:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10ed60:	e3530000 	cmp	r3, #0
  10ed64:	1a000006 	bne	10ed84 <lwip_netconn_do_writemore+0x1b8>
      /* nothing has been written */
      err = ERR_WOULDBLOCK;
  10ed68:	e3e03006 	mvn	r3, #6
  10ed6c:	e54b3005 	strb	r3, [fp, #-5]
      conn->current_msg->msg.w.len = 0;
  10ed70:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ed74:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10ed78:	e3a02000 	mov	r2, #0
  10ed7c:	e583200c 	str	r2, [r3, #12]
    if (conn->write_offset == 0) {
  10ed80:	ea0000df 	b	10f104 <lwip_netconn_do_writemore+0x538>
    } else {
      /* partial write */
      err = ERR_OK;
  10ed84:	e3a03000 	mov	r3, #0
  10ed88:	e54b3005 	strb	r3, [fp, #-5]
      conn->current_msg->msg.w.len = conn->write_offset;
  10ed8c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ed90:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10ed94:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  10ed98:	e5922034 	ldr	r2, [r2, #52]	; 0x34
  10ed9c:	e583200c 	str	r2, [r3, #12]
      conn->write_offset = 0;
  10eda0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10eda4:	e3a02000 	mov	r2, #0
  10eda8:	e5832034 	str	r2, [r3, #52]	; 0x34
    if (conn->write_offset == 0) {
  10edac:	ea0000d4 	b	10f104 <lwip_netconn_do_writemore+0x538>
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
  10edb0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10edb4:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10edb8:	e5932008 	ldr	r2, [r3, #8]
  10edbc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10edc0:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10edc4:	e0823003 	add	r3, r2, r3
  10edc8:	e50b3010 	str	r3, [fp, #-16]
    diff = conn->current_msg->msg.w.len - conn->write_offset;
  10edcc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10edd0:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10edd4:	e593200c 	ldr	r2, [r3, #12]
  10edd8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10eddc:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10ede0:	e0423003 	sub	r3, r2, r3
  10ede4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    if (diff > 0xffffUL) { /* max_u16_t */
  10ede8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10edec:	e3530801 	cmp	r3, #65536	; 0x10000
  10edf0:	3a000005 	bcc	10ee0c <lwip_netconn_do_writemore+0x240>
      len = 0xffff;
  10edf4:	e3e03000 	mvn	r3, #0
  10edf8:	e14b30b8 	strh	r3, [fp, #-8]
      apiflags |= TCP_WRITE_FLAG_MORE;
  10edfc:	e55b300a 	ldrb	r3, [fp, #-10]
  10ee00:	e3833002 	orr	r3, r3, #2
  10ee04:	e54b300a 	strb	r3, [fp, #-10]
  10ee08:	ea000001 	b	10ee14 <lwip_netconn_do_writemore+0x248>
    } else {
      len = (u16_t)diff;
  10ee0c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10ee10:	e14b30b8 	strh	r3, [fp, #-8]
    }
    available = tcp_sndbuf(conn->pcb.tcp);
  10ee14:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ee18:	e5933008 	ldr	r3, [r3, #8]
  10ee1c:	e1d336b4 	ldrh	r3, [r3, #100]	; 0x64
  10ee20:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
    if (available < len) {
  10ee24:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  10ee28:	e15b30b8 	ldrh	r3, [fp, #-8]
  10ee2c:	e1520003 	cmp	r2, r3
  10ee30:	2a00000d 	bcs	10ee6c <lwip_netconn_do_writemore+0x2a0>
      /* don't try to write more than sendbuf */
      len = available;
  10ee34:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  10ee38:	e14b30b8 	strh	r3, [fp, #-8]
      if (dontblock) {
  10ee3c:	e55b300b 	ldrb	r3, [fp, #-11]
  10ee40:	e3530000 	cmp	r3, #0
  10ee44:	0a000005 	beq	10ee60 <lwip_netconn_do_writemore+0x294>
        if (!len) {
  10ee48:	e15b30b8 	ldrh	r3, [fp, #-8]
  10ee4c:	e3530000 	cmp	r3, #0
  10ee50:	1a000005 	bne	10ee6c <lwip_netconn_do_writemore+0x2a0>
          err = ERR_WOULDBLOCK;
  10ee54:	e3e03006 	mvn	r3, #6
  10ee58:	e54b3005 	strb	r3, [fp, #-5]
          goto err_mem;
  10ee5c:	ea000021 	b	10eee8 <lwip_netconn_do_writemore+0x31c>
        }
      } else {
        apiflags |= TCP_WRITE_FLAG_MORE;
  10ee60:	e55b300a 	ldrb	r3, [fp, #-10]
  10ee64:	e3833002 	orr	r3, r3, #2
  10ee68:	e54b300a 	strb	r3, [fp, #-10]
      }
    }
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
  10ee6c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ee70:	e5932034 	ldr	r2, [r3, #52]	; 0x34
  10ee74:	e15b30b8 	ldrh	r3, [fp, #-8]
  10ee78:	e0822003 	add	r2, r2, r3
  10ee7c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ee80:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10ee84:	e593300c 	ldr	r3, [r3, #12]
  10ee88:	e1520003 	cmp	r2, r3
  10ee8c:	9a000006 	bls	10eeac <lwip_netconn_do_writemore+0x2e0>
  10ee90:	e3060028 	movw	r0, #24616	; 0x6028
  10ee94:	e3400014 	movt	r0, #20
  10ee98:	ebffd09d 	bl	103114 <rt_kprintf>
  10ee9c:	e300160d 	movw	r1, #1549	; 0x60d
  10eea0:	e3050be4 	movw	r0, #23524	; 0x5be4
  10eea4:	e3400014 	movt	r0, #20
  10eea8:	ebffef19 	bl	10ab14 <sys_arch_assert>
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
  10eeac:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10eeb0:	e5930008 	ldr	r0, [r3, #8]
  10eeb4:	e55b300a 	ldrb	r3, [fp, #-10]
  10eeb8:	e15b20b8 	ldrh	r2, [fp, #-8]
  10eebc:	e51b1010 	ldr	r1, [fp, #-16]
  10eec0:	eb00571a 	bl	124b30 <tcp_write>
  10eec4:	e1a03000 	mov	r3, r0
  10eec8:	e54b3005 	strb	r3, [fp, #-5]
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
  10eecc:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10eed0:	e3530000 	cmp	r3, #0
  10eed4:	0a000002 	beq	10eee4 <lwip_netconn_do_writemore+0x318>
  10eed8:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10eedc:	e3730001 	cmn	r3, #1
  10eee0:	1a00002e 	bne	10efa0 <lwip_netconn_do_writemore+0x3d4>
err_mem:
  10eee4:	e320f000 	nop	{0}
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
  10eee8:	e55b300b 	ldrb	r3, [fp, #-11]
  10eeec:	e3530000 	cmp	r3, #0
  10eef0:	0a000016 	beq	10ef50 <lwip_netconn_do_writemore+0x384>
  10eef4:	e15b20b8 	ldrh	r2, [fp, #-8]
  10eef8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10eefc:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10ef00:	e593300c 	ldr	r3, [r3, #12]
  10ef04:	e1520003 	cmp	r2, r3
  10ef08:	2a000010 	bcs	10ef50 <lwip_netconn_do_writemore+0x384>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
  10ef0c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ef10:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10ef14:	e3530000 	cmp	r3, #0
  10ef18:	0a000005 	beq	10ef34 <lwip_netconn_do_writemore+0x368>
  10ef1c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ef20:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10ef24:	e15b20b8 	ldrh	r2, [fp, #-8]
  10ef28:	e3a01003 	mov	r1, #3
  10ef2c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10ef30:	e12fff33 	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
  10ef34:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ef38:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10ef3c:	e3833010 	orr	r3, r3, #16
  10ef40:	e6ef2073 	uxtb	r2, r3
  10ef44:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ef48:	e5c32030 	strb	r2, [r3, #48]	; 0x30
  10ef4c:	ea000013 	b	10efa0 <lwip_netconn_do_writemore+0x3d4>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
  10ef50:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ef54:	e5933008 	ldr	r3, [r3, #8]
  10ef58:	e1d336b4 	ldrh	r3, [r3, #100]	; 0x64
  10ef5c:	e3530a01 	cmp	r3, #4096	; 0x1000
  10ef60:	9a000004 	bls	10ef78 <lwip_netconn_do_writemore+0x3ac>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
  10ef64:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ef68:	e5933008 	ldr	r3, [r3, #8]
  10ef6c:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
  10ef70:	e353000a 	cmp	r3, #10
  10ef74:	9a000009 	bls	10efa0 <lwip_netconn_do_writemore+0x3d4>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
  10ef78:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ef7c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10ef80:	e3530000 	cmp	r3, #0
  10ef84:	0a000005 	beq	10efa0 <lwip_netconn_do_writemore+0x3d4>
  10ef88:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ef8c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10ef90:	e15b20b8 	ldrh	r2, [fp, #-8]
  10ef94:	e3a01003 	mov	r1, #3
  10ef98:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10ef9c:	e12fff33 	blx	r3
      }
    }

    if (err == ERR_OK) {
  10efa0:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10efa4:	e3530000 	cmp	r3, #0
  10efa8:	1a00002b 	bne	10f05c <lwip_netconn_do_writemore+0x490>
      err_t out_err;
      conn->write_offset += len;
  10efac:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10efb0:	e5932034 	ldr	r2, [r3, #52]	; 0x34
  10efb4:	e15b30b8 	ldrh	r3, [fp, #-8]
  10efb8:	e0822003 	add	r2, r2, r3
  10efbc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10efc0:	e5832034 	str	r2, [r3, #52]	; 0x34
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
  10efc4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10efc8:	e5932034 	ldr	r2, [r3, #52]	; 0x34
  10efcc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10efd0:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10efd4:	e593300c 	ldr	r3, [r3, #12]
  10efd8:	e1520003 	cmp	r2, r3
  10efdc:	0a000002 	beq	10efec <lwip_netconn_do_writemore+0x420>
  10efe0:	e55b300b 	ldrb	r3, [fp, #-11]
  10efe4:	e3530000 	cmp	r3, #0
  10efe8:	0a000006 	beq	10f008 <lwip_netconn_do_writemore+0x43c>
        /* return sent length */
        conn->current_msg->msg.w.len = conn->write_offset;
  10efec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10eff0:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10eff4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  10eff8:	e5922034 	ldr	r2, [r2, #52]	; 0x34
  10effc:	e583200c 	str	r2, [r3, #12]
        /* everything was written */
        write_finished = 1;
  10f000:	e3a03001 	mov	r3, #1
  10f004:	e54b3009 	strb	r3, [fp, #-9]
      }
      out_err = tcp_output(conn->pcb.tcp);
  10f008:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f00c:	e5933008 	ldr	r3, [r3, #8]
  10f010:	e1a00003 	mov	r0, r3
  10f014:	eb005af6 	bl	125bf4 <tcp_output>
  10f018:	e1a03000 	mov	r3, r0
  10f01c:	e54b3018 	strb	r3, [fp, #-24]	; 0xffffffe8
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
  10f020:	e15b31d8 	ldrsb	r3, [fp, #-24]	; 0xffffffe8
  10f024:	e373000c 	cmn	r3, #12
  10f028:	ba000002 	blt	10f038 <lwip_netconn_do_writemore+0x46c>
  10f02c:	e15b31d8 	ldrsb	r3, [fp, #-24]	; 0xffffffe8
  10f030:	e3730004 	cmn	r3, #4
  10f034:	1a000032 	bne	10f104 <lwip_netconn_do_writemore+0x538>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
  10f038:	e55b3018 	ldrb	r3, [fp, #-24]	; 0xffffffe8
  10f03c:	e54b3005 	strb	r3, [fp, #-5]
        write_finished = 1;
  10f040:	e3a03001 	mov	r3, #1
  10f044:	e54b3009 	strb	r3, [fp, #-9]
        conn->current_msg->msg.w.len = 0;
  10f048:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f04c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f050:	e3a02000 	mov	r2, #0
  10f054:	e583200c 	str	r2, [r3, #12]
  10f058:	ea000029 	b	10f104 <lwip_netconn_do_writemore+0x538>
      }
    } else if (err == ERR_MEM) {
  10f05c:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10f060:	e3730001 	cmn	r3, #1
  10f064:	1a000020 	bne	10f0ec <lwip_netconn_do_writemore+0x520>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
  10f068:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f06c:	e5933008 	ldr	r3, [r3, #8]
  10f070:	e1a00003 	mov	r0, r3
  10f074:	eb005ade 	bl	125bf4 <tcp_output>
  10f078:	e1a03000 	mov	r3, r0
  10f07c:	e54b3017 	strb	r3, [fp, #-23]	; 0xffffffe9
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
  10f080:	e15b31d7 	ldrsb	r3, [fp, #-23]	; 0xffffffe9
  10f084:	e373000c 	cmn	r3, #12
  10f088:	ba000002 	blt	10f098 <lwip_netconn_do_writemore+0x4cc>
  10f08c:	e15b31d7 	ldrsb	r3, [fp, #-23]	; 0xffffffe9
  10f090:	e3730004 	cmn	r3, #4
  10f094:	1a000008 	bne	10f0bc <lwip_netconn_do_writemore+0x4f0>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
  10f098:	e55b3017 	ldrb	r3, [fp, #-23]	; 0xffffffe9
  10f09c:	e54b3005 	strb	r3, [fp, #-5]
        write_finished = 1;
  10f0a0:	e3a03001 	mov	r3, #1
  10f0a4:	e54b3009 	strb	r3, [fp, #-9]
        conn->current_msg->msg.w.len = 0;
  10f0a8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f0ac:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f0b0:	e3a02000 	mov	r2, #0
  10f0b4:	e583200c 	str	r2, [r3, #12]
  10f0b8:	ea000011 	b	10f104 <lwip_netconn_do_writemore+0x538>
      } else if (dontblock) {
  10f0bc:	e55b300b 	ldrb	r3, [fp, #-11]
  10f0c0:	e3530000 	cmp	r3, #0
  10f0c4:	0a00000e 	beq	10f104 <lwip_netconn_do_writemore+0x538>
        /* non-blocking write is done on ERR_MEM */
        err = ERR_WOULDBLOCK;
  10f0c8:	e3e03006 	mvn	r3, #6
  10f0cc:	e54b3005 	strb	r3, [fp, #-5]
        write_finished = 1;
  10f0d0:	e3a03001 	mov	r3, #1
  10f0d4:	e54b3009 	strb	r3, [fp, #-9]
        conn->current_msg->msg.w.len = 0;
  10f0d8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f0dc:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f0e0:	e3a02000 	mov	r2, #0
  10f0e4:	e583200c 	str	r2, [r3, #12]
  10f0e8:	ea000005 	b	10f104 <lwip_netconn_do_writemore+0x538>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
  10f0ec:	e3a03001 	mov	r3, #1
  10f0f0:	e54b3009 	strb	r3, [fp, #-9]
      conn->current_msg->msg.w.len = 0;
  10f0f4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f0f8:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f0fc:	e3a02000 	mov	r2, #0
  10f100:	e583200c 	str	r2, [r3, #12]
    }
  }
  if (write_finished) {
  10f104:	e55b3009 	ldrb	r3, [fp, #-9]
  10f108:	e3530000 	cmp	r3, #0
  10f10c:	0a000023 	beq	10f1a0 <lwip_netconn_do_writemore+0x5d4>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
  10f110:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f114:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f118:	e5933000 	ldr	r3, [r3]
  10f11c:	e2833010 	add	r3, r3, #16
  10f120:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    conn->current_msg->err = err;
  10f124:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f128:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f12c:	e55b2005 	ldrb	r2, [fp, #-5]
  10f130:	e5c32004 	strb	r2, [r3, #4]
    conn->current_msg = NULL;
  10f134:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f138:	e3a02000 	mov	r2, #0
  10f13c:	e5832038 	str	r2, [r3, #56]	; 0x38
    conn->write_offset = 0;
  10f140:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f144:	e3a02000 	mov	r2, #0
  10f148:	e5832034 	str	r2, [r3, #52]	; 0x34
    conn->state = NETCONN_NONE;
  10f14c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f150:	e3a02000 	mov	r2, #0
  10f154:	e5832004 	str	r2, [r3, #4]
    NETCONN_SET_SAFE_ERR(conn, err);
  10f158:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f15c:	e3530000 	cmp	r3, #0
  10f160:	0a000008 	beq	10f188 <lwip_netconn_do_writemore+0x5bc>
  10f164:	ebffcc34 	bl	10223c <rt_enter_critical>
  10f168:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f16c:	e1d330dc 	ldrsb	r3, [r3, #12]
  10f170:	e373000c 	cmn	r3, #12
  10f174:	ba000002 	blt	10f184 <lwip_netconn_do_writemore+0x5b8>
  10f178:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f17c:	e55b2005 	ldrb	r2, [fp, #-5]
  10f180:	e5c3200c 	strb	r2, [r3, #12]
  10f184:	ebffcc32 	bl	102254 <rt_exit_critical>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
  10f188:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  10f18c:	e3530000 	cmp	r3, #0
  10f190:	0a000004 	beq	10f1a8 <lwip_netconn_do_writemore+0x5dc>
#endif
    {
      sys_sem_signal(op_completed_sem);
  10f194:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  10f198:	ebffec01 	bl	10a1a4 <sys_sem_signal>
  10f19c:	ea000001 	b	10f1a8 <lwip_netconn_do_writemore+0x5dc>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
  10f1a0:	e3e03000 	mvn	r3, #0
  10f1a4:	ea000000 	b	10f1ac <lwip_netconn_do_writemore+0x5e0>
  }
#endif
  return ERR_OK;
  10f1a8:	e3a03000 	mov	r3, #0
}
  10f1ac:	e1a00003 	mov	r0, r3
  10f1b0:	e24bd004 	sub	sp, fp, #4
  10f1b4:	e8bd8800 	pop	{fp, pc}

0010f1b8 <lwip_netconn_do_write>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
  10f1b8:	e92d4800 	push	{fp, lr}
  10f1bc:	e28db004 	add	fp, sp, #4
  10f1c0:	e24dd010 	sub	sp, sp, #16
  10f1c4:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10f1c8:	e51b3010 	ldr	r3, [fp, #-16]
  10f1cc:	e50b3008 	str	r3, [fp, #-8]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
  10f1d0:	e51b3008 	ldr	r3, [fp, #-8]
  10f1d4:	e5933000 	ldr	r3, [r3]
  10f1d8:	e1d330dc 	ldrsb	r3, [r3, #12]
  10f1dc:	e373000c 	cmn	r3, #12
  10f1e0:	aa000005 	bge	10f1fc <lwip_netconn_do_write+0x44>
    msg->err = msg->conn->last_err;
  10f1e4:	e51b3008 	ldr	r3, [fp, #-8]
  10f1e8:	e5933000 	ldr	r3, [r3]
  10f1ec:	e1d320dc 	ldrsb	r2, [r3, #12]
  10f1f0:	e51b3008 	ldr	r3, [fp, #-8]
  10f1f4:	e5c32004 	strb	r2, [r3, #4]
  10f1f8:	ea00006f 	b	10f3bc <lwip_netconn_do_write+0x204>
  } else {
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
  10f1fc:	e51b3008 	ldr	r3, [fp, #-8]
  10f200:	e5933000 	ldr	r3, [r3]
  10f204:	e5933000 	ldr	r3, [r3]
  10f208:	e20330f0 	and	r3, r3, #240	; 0xf0
  10f20c:	e3530010 	cmp	r3, #16
  10f210:	1a000066 	bne	10f3b0 <lwip_netconn_do_write+0x1f8>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
  10f214:	e51b3008 	ldr	r3, [fp, #-8]
  10f218:	e5933000 	ldr	r3, [r3]
  10f21c:	e5933004 	ldr	r3, [r3, #4]
  10f220:	e3530000 	cmp	r3, #0
  10f224:	0a000003 	beq	10f238 <lwip_netconn_do_write+0x80>
        /* netconn is connecting, closing or in blocking write */
        msg->err = ERR_INPROGRESS;
  10f228:	e51b3008 	ldr	r3, [fp, #-8]
  10f22c:	e3e02004 	mvn	r2, #4
  10f230:	e5c32004 	strb	r2, [r3, #4]
  10f234:	ea000060 	b	10f3bc <lwip_netconn_do_write+0x204>
      } else if (msg->conn->pcb.tcp != NULL) {
  10f238:	e51b3008 	ldr	r3, [fp, #-8]
  10f23c:	e5933000 	ldr	r3, [r3]
  10f240:	e5933008 	ldr	r3, [r3, #8]
  10f244:	e3530000 	cmp	r3, #0
  10f248:	0a000054 	beq	10f3a0 <lwip_netconn_do_write+0x1e8>
        msg->conn->state = NETCONN_WRITE;
  10f24c:	e51b3008 	ldr	r3, [fp, #-8]
  10f250:	e5933000 	ldr	r3, [r3]
  10f254:	e3a02001 	mov	r2, #1
  10f258:	e5832004 	str	r2, [r3, #4]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
  10f25c:	e51b3008 	ldr	r3, [fp, #-8]
  10f260:	e5933000 	ldr	r3, [r3]
  10f264:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f268:	e3530000 	cmp	r3, #0
  10f26c:	1a000004 	bne	10f284 <lwip_netconn_do_write+0xcc>
  10f270:	e51b3008 	ldr	r3, [fp, #-8]
  10f274:	e5933000 	ldr	r3, [r3]
  10f278:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10f27c:	e3530000 	cmp	r3, #0
  10f280:	0a000006 	beq	10f2a0 <lwip_netconn_do_write+0xe8>
  10f284:	e3050f00 	movw	r0, #24320	; 0x5f00
  10f288:	e3400014 	movt	r0, #20
  10f28c:	ebffcfa0 	bl	103114 <rt_kprintf>
  10f290:	e300167d 	movw	r1, #1661	; 0x67d
  10f294:	e3050be4 	movw	r0, #23524	; 0x5be4
  10f298:	e3400014 	movt	r0, #20
  10f29c:	ebffee1c 	bl	10ab14 <sys_arch_assert>
          msg->conn->write_offset == 0);
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
  10f2a0:	e51b3008 	ldr	r3, [fp, #-8]
  10f2a4:	e593300c 	ldr	r3, [r3, #12]
  10f2a8:	e3530000 	cmp	r3, #0
  10f2ac:	1a000006 	bne	10f2cc <lwip_netconn_do_write+0x114>
  10f2b0:	e3060054 	movw	r0, #24660	; 0x6054
  10f2b4:	e3400014 	movt	r0, #20
  10f2b8:	ebffcf95 	bl	103114 <rt_kprintf>
  10f2bc:	e300167e 	movw	r1, #1662	; 0x67e
  10f2c0:	e3050be4 	movw	r0, #23524	; 0x5be4
  10f2c4:	e3400014 	movt	r0, #20
  10f2c8:	ebffee11 	bl	10ab14 <sys_arch_assert>
        msg->conn->current_msg = msg;
  10f2cc:	e51b3008 	ldr	r3, [fp, #-8]
  10f2d0:	e5933000 	ldr	r3, [r3]
  10f2d4:	e51b2008 	ldr	r2, [fp, #-8]
  10f2d8:	e5832038 	str	r2, [r3, #56]	; 0x38
        msg->conn->write_offset = 0;
  10f2dc:	e51b3008 	ldr	r3, [fp, #-8]
  10f2e0:	e5933000 	ldr	r3, [r3]
  10f2e4:	e3a02000 	mov	r2, #0
  10f2e8:	e5832034 	str	r2, [r3, #52]	; 0x34
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
  10f2ec:	e51b3008 	ldr	r3, [fp, #-8]
  10f2f0:	e5933000 	ldr	r3, [r3]
  10f2f4:	e3a01000 	mov	r1, #0
  10f2f8:	e1a00003 	mov	r0, r3
  10f2fc:	ebfffe32 	bl	10ebcc <lwip_netconn_do_writemore>
  10f300:	e1a03000 	mov	r3, r0
  10f304:	e3530000 	cmp	r3, #0
  10f308:	0a00003c 	beq	10f400 <lwip_netconn_do_write+0x248>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
  10f30c:	e51b3008 	ldr	r3, [fp, #-8]
  10f310:	e5933000 	ldr	r3, [r3]
  10f314:	e5933004 	ldr	r3, [r3, #4]
  10f318:	e3530001 	cmp	r3, #1
  10f31c:	0a000006 	beq	10f33c <lwip_netconn_do_write+0x184>
  10f320:	e3050f1c 	movw	r0, #24348	; 0x5f1c
  10f324:	e3400014 	movt	r0, #20
  10f328:	ebffcf79 	bl	103114 <rt_kprintf>
  10f32c:	e3001683 	movw	r1, #1667	; 0x683
  10f330:	e3050be4 	movw	r0, #23524	; 0x5be4
  10f334:	e3400014 	movt	r0, #20
  10f338:	ebffedf5 	bl	10ab14 <sys_arch_assert>
          UNLOCK_TCPIP_CORE();
  10f33c:	e30e0d64 	movw	r0, #60772	; 0xed64
  10f340:	e3400014 	movt	r0, #20
  10f344:	ebffec1d 	bl	10a3c0 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
  10f348:	e51b3008 	ldr	r3, [fp, #-8]
  10f34c:	e5933000 	ldr	r3, [r3]
  10f350:	e2833010 	add	r3, r3, #16
  10f354:	e3a01000 	mov	r1, #0
  10f358:	e1a00003 	mov	r0, r3
  10f35c:	ebffeb9b 	bl	10a1d0 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
  10f360:	e30e0d64 	movw	r0, #60772	; 0xed64
  10f364:	e3400014 	movt	r0, #20
  10f368:	ebffec08 	bl	10a390 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
  10f36c:	e51b3008 	ldr	r3, [fp, #-8]
  10f370:	e5933000 	ldr	r3, [r3]
  10f374:	e5933004 	ldr	r3, [r3, #4]
  10f378:	e3530001 	cmp	r3, #1
  10f37c:	1a00001f 	bne	10f400 <lwip_netconn_do_write+0x248>
  10f380:	e3050f1c 	movw	r0, #24348	; 0x5f1c
  10f384:	e3400014 	movt	r0, #20
  10f388:	ebffcf61 	bl	103114 <rt_kprintf>
  10f38c:	e3001687 	movw	r1, #1671	; 0x687
  10f390:	e3050be4 	movw	r0, #23524	; 0x5be4
  10f394:	e3400014 	movt	r0, #20
  10f398:	ebffeddd 	bl	10ab14 <sys_arch_assert>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
  10f39c:	ea000017 	b	10f400 <lwip_netconn_do_write+0x248>
      } else {
        msg->err = ERR_CONN;
  10f3a0:	e51b3008 	ldr	r3, [fp, #-8]
  10f3a4:	e3e0200a 	mvn	r2, #10
  10f3a8:	e5c32004 	strb	r2, [r3, #4]
  10f3ac:	ea000002 	b	10f3bc <lwip_netconn_do_write+0x204>
#else /* LWIP_TCP */
      msg->err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      msg->err = ERR_VAL;
  10f3b0:	e51b3008 	ldr	r3, [fp, #-8]
  10f3b4:	e3e02005 	mvn	r2, #5
  10f3b8:	e5c32004 	strb	r2, [r3, #4]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
  10f3bc:	e51b3008 	ldr	r3, [fp, #-8]
  10f3c0:	e5933000 	ldr	r3, [r3]
  10f3c4:	e3530000 	cmp	r3, #0
  10f3c8:	0a00000d 	beq	10f404 <lwip_netconn_do_write+0x24c>
  10f3cc:	ebffcb9a 	bl	10223c <rt_enter_critical>
  10f3d0:	e51b3008 	ldr	r3, [fp, #-8]
  10f3d4:	e5933000 	ldr	r3, [r3]
  10f3d8:	e1d330dc 	ldrsb	r3, [r3, #12]
  10f3dc:	e373000c 	cmn	r3, #12
  10f3e0:	ba000004 	blt	10f3f8 <lwip_netconn_do_write+0x240>
  10f3e4:	e51b3008 	ldr	r3, [fp, #-8]
  10f3e8:	e5933000 	ldr	r3, [r3]
  10f3ec:	e51b2008 	ldr	r2, [fp, #-8]
  10f3f0:	e1d220d4 	ldrsb	r2, [r2, #4]
  10f3f4:	e5c3200c 	strb	r2, [r3, #12]
  10f3f8:	ebffcb95 	bl	102254 <rt_exit_critical>
  10f3fc:	ea000000 	b	10f404 <lwip_netconn_do_write+0x24c>
        return;
  10f400:	e320f000 	nop	{0}
}
  10f404:	e24bd004 	sub	sp, fp, #4
  10f408:	e8bd8800 	pop	{fp, pc}

0010f40c <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
  10f40c:	e92d4800 	push	{fp, lr}
  10f410:	e28db004 	add	fp, sp, #4
  10f414:	e24dd010 	sub	sp, sp, #16
  10f418:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10f41c:	e51b3010 	ldr	r3, [fp, #-16]
  10f420:	e50b3008 	str	r3, [fp, #-8]

  if (msg->conn->pcb.ip != NULL) {
  10f424:	e51b3008 	ldr	r3, [fp, #-8]
  10f428:	e5933000 	ldr	r3, [r3]
  10f42c:	e5933008 	ldr	r3, [r3, #8]
  10f430:	e3530000 	cmp	r3, #0
  10f434:	0a00007e 	beq	10f634 <lwip_netconn_do_getaddr+0x228>
    if (msg->msg.ad.local) {
  10f438:	e51b3008 	ldr	r3, [fp, #-8]
  10f43c:	e5d33010 	ldrb	r3, [r3, #16]
  10f440:	e3530000 	cmp	r3, #0
  10f444:	0a000007 	beq	10f468 <lwip_netconn_do_getaddr+0x5c>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
  10f448:	e51b3008 	ldr	r3, [fp, #-8]
  10f44c:	e5933000 	ldr	r3, [r3]
  10f450:	e5932008 	ldr	r2, [r3, #8]
  10f454:	e51b3008 	ldr	r3, [fp, #-8]
  10f458:	e5933008 	ldr	r3, [r3, #8]
  10f45c:	e5922000 	ldr	r2, [r2]
  10f460:	e5832000 	str	r2, [r3]
  10f464:	ea000006 	b	10f484 <lwip_netconn_do_getaddr+0x78>
        msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
  10f468:	e51b3008 	ldr	r3, [fp, #-8]
  10f46c:	e5933000 	ldr	r3, [r3]
  10f470:	e5932008 	ldr	r2, [r3, #8]
  10f474:	e51b3008 	ldr	r3, [fp, #-8]
  10f478:	e5933008 	ldr	r3, [r3, #8]
  10f47c:	e5922004 	ldr	r2, [r2, #4]
  10f480:	e5832000 	str	r2, [r3]
        msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
  10f484:	e51b3008 	ldr	r3, [fp, #-8]
  10f488:	e3a02000 	mov	r2, #0
  10f48c:	e5c32004 	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
  10f490:	e51b3008 	ldr	r3, [fp, #-8]
  10f494:	e5933000 	ldr	r3, [r3]
  10f498:	e5933000 	ldr	r3, [r3]
  10f49c:	e20330f0 	and	r3, r3, #240	; 0xf0
  10f4a0:	e3530020 	cmp	r3, #32
  10f4a4:	0a000015 	beq	10f500 <lwip_netconn_do_getaddr+0xf4>
  10f4a8:	e3530040 	cmp	r3, #64	; 0x40
  10f4ac:	0a000002 	beq	10f4bc <lwip_netconn_do_getaddr+0xb0>
  10f4b0:	e3530010 	cmp	r3, #16
  10f4b4:	0a000030 	beq	10f57c <lwip_netconn_do_getaddr+0x170>
  10f4b8:	ea000054 	b	10f610 <lwip_netconn_do_getaddr+0x204>
#if LWIP_RAW
    case NETCONN_RAW:
      if (msg->msg.ad.local) {
  10f4bc:	e51b3008 	ldr	r3, [fp, #-8]
  10f4c0:	e5d33010 	ldrb	r3, [r3, #16]
  10f4c4:	e3530000 	cmp	r3, #0
  10f4c8:	0a000008 	beq	10f4f0 <lwip_netconn_do_getaddr+0xe4>
        API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.raw->protocol;
  10f4cc:	e51b3008 	ldr	r3, [fp, #-8]
  10f4d0:	e5933000 	ldr	r3, [r3]
  10f4d4:	e5933008 	ldr	r3, [r3, #8]
  10f4d8:	e5d32010 	ldrb	r2, [r3, #16]
  10f4dc:	e51b3008 	ldr	r3, [fp, #-8]
  10f4e0:	e593300c 	ldr	r3, [r3, #12]
  10f4e4:	e6ff2072 	uxth	r2, r2
  10f4e8:	e1c320b0 	strh	r2, [r3]
      } else {
        /* return an error as connecting is only a helper for upper layers */
        msg->err = ERR_CONN;
      }
      break;
  10f4ec:	ea000053 	b	10f640 <lwip_netconn_do_getaddr+0x234>
        msg->err = ERR_CONN;
  10f4f0:	e51b3008 	ldr	r3, [fp, #-8]
  10f4f4:	e3e0200a 	mvn	r2, #10
  10f4f8:	e5c32004 	strb	r2, [r3, #4]
      break;
  10f4fc:	ea00004f 	b	10f640 <lwip_netconn_do_getaddr+0x234>
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      if (msg->msg.ad.local) {
  10f500:	e51b3008 	ldr	r3, [fp, #-8]
  10f504:	e5d33010 	ldrb	r3, [r3, #16]
  10f508:	e3530000 	cmp	r3, #0
  10f50c:	0a000007 	beq	10f530 <lwip_netconn_do_getaddr+0x124>
        API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
  10f510:	e51b3008 	ldr	r3, [fp, #-8]
  10f514:	e5933000 	ldr	r3, [r3]
  10f518:	e5932008 	ldr	r2, [r3, #8]
  10f51c:	e51b3008 	ldr	r3, [fp, #-8]
  10f520:	e593300c 	ldr	r3, [r3, #12]
  10f524:	e1d221b2 	ldrh	r2, [r2, #18]
  10f528:	e1c320b0 	strh	r2, [r3]
          msg->err = ERR_CONN;
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
        }
      }
      break;
  10f52c:	ea000043 	b	10f640 <lwip_netconn_do_getaddr+0x234>
        if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
  10f530:	e51b3008 	ldr	r3, [fp, #-8]
  10f534:	e5933000 	ldr	r3, [r3]
  10f538:	e5933008 	ldr	r3, [r3, #8]
  10f53c:	e5d33010 	ldrb	r3, [r3, #16]
  10f540:	e2033004 	and	r3, r3, #4
  10f544:	e3530000 	cmp	r3, #0
  10f548:	1a000003 	bne	10f55c <lwip_netconn_do_getaddr+0x150>
          msg->err = ERR_CONN;
  10f54c:	e51b3008 	ldr	r3, [fp, #-8]
  10f550:	e3e0200a 	mvn	r2, #10
  10f554:	e5c32004 	strb	r2, [r3, #4]
      break;
  10f558:	ea000038 	b	10f640 <lwip_netconn_do_getaddr+0x234>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
  10f55c:	e51b3008 	ldr	r3, [fp, #-8]
  10f560:	e5933000 	ldr	r3, [r3]
  10f564:	e5932008 	ldr	r2, [r3, #8]
  10f568:	e51b3008 	ldr	r3, [fp, #-8]
  10f56c:	e593300c 	ldr	r3, [r3, #12]
  10f570:	e1d221b4 	ldrh	r2, [r2, #20]
  10f574:	e1c320b0 	strh	r2, [r3]
      break;
  10f578:	ea000030 	b	10f640 <lwip_netconn_do_getaddr+0x234>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      if ((msg->msg.ad.local == 0) &&
  10f57c:	e51b3008 	ldr	r3, [fp, #-8]
  10f580:	e5d33010 	ldrb	r3, [r3, #16]
  10f584:	e3530000 	cmp	r3, #0
  10f588:	1a00000f 	bne	10f5cc <lwip_netconn_do_getaddr+0x1c0>
          ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
  10f58c:	e51b3008 	ldr	r3, [fp, #-8]
  10f590:	e5933000 	ldr	r3, [r3]
  10f594:	e5933008 	ldr	r3, [r3, #8]
  10f598:	e5933014 	ldr	r3, [r3, #20]
      if ((msg->msg.ad.local == 0) &&
  10f59c:	e3530000 	cmp	r3, #0
  10f5a0:	0a000005 	beq	10f5bc <lwip_netconn_do_getaddr+0x1b0>
          ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
  10f5a4:	e51b3008 	ldr	r3, [fp, #-8]
  10f5a8:	e5933000 	ldr	r3, [r3]
  10f5ac:	e5933008 	ldr	r3, [r3, #8]
  10f5b0:	e5933014 	ldr	r3, [r3, #20]
  10f5b4:	e3530001 	cmp	r3, #1
  10f5b8:	1a000003 	bne	10f5cc <lwip_netconn_do_getaddr+0x1c0>
        /* pcb is not connected and remote name is requested */
        msg->err = ERR_CONN;
  10f5bc:	e51b3008 	ldr	r3, [fp, #-8]
  10f5c0:	e3e0200a 	mvn	r2, #10
  10f5c4:	e5c32004 	strb	r2, [r3, #4]
      } else {
        API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
      }
      break;
  10f5c8:	ea00001c 	b	10f640 <lwip_netconn_do_getaddr+0x234>
        API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
  10f5cc:	e51b3008 	ldr	r3, [fp, #-8]
  10f5d0:	e5d33010 	ldrb	r3, [r3, #16]
  10f5d4:	e3530000 	cmp	r3, #0
  10f5d8:	0a000004 	beq	10f5f0 <lwip_netconn_do_getaddr+0x1e4>
  10f5dc:	e51b3008 	ldr	r3, [fp, #-8]
  10f5e0:	e5933000 	ldr	r3, [r3]
  10f5e4:	e5933008 	ldr	r3, [r3, #8]
  10f5e8:	e1d331ba 	ldrh	r3, [r3, #26]
  10f5ec:	ea000003 	b	10f600 <lwip_netconn_do_getaddr+0x1f4>
  10f5f0:	e51b3008 	ldr	r3, [fp, #-8]
  10f5f4:	e5933000 	ldr	r3, [r3]
  10f5f8:	e5933008 	ldr	r3, [r3, #8]
  10f5fc:	e1d331bc 	ldrh	r3, [r3, #28]
  10f600:	e51b2008 	ldr	r2, [fp, #-8]
  10f604:	e592200c 	ldr	r2, [r2, #12]
  10f608:	e1c230b0 	strh	r3, [r2]
      break;
  10f60c:	ea00000b 	b	10f640 <lwip_netconn_do_getaddr+0x234>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("invalid netconn_type", 0);
  10f610:	e3060068 	movw	r0, #24680	; 0x6068
  10f614:	e3400014 	movt	r0, #20
  10f618:	ebffcebd 	bl	103114 <rt_kprintf>
  10f61c:	e30016d7 	movw	r1, #1751	; 0x6d7
  10f620:	e3050be4 	movw	r0, #23524	; 0x5be4
  10f624:	e3400014 	movt	r0, #20
  10f628:	ebffed39 	bl	10ab14 <sys_arch_assert>
      break;
  10f62c:	e320f000 	nop	{0}
  10f630:	ea000002 	b	10f640 <lwip_netconn_do_getaddr+0x234>
    }
  } else {
    msg->err = ERR_CONN;
  10f634:	e51b3008 	ldr	r3, [fp, #-8]
  10f638:	e3e0200a 	mvn	r2, #10
  10f63c:	e5c32004 	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
  10f640:	e51b3008 	ldr	r3, [fp, #-8]
  10f644:	e5933000 	ldr	r3, [r3]
  10f648:	e3530000 	cmp	r3, #0
  10f64c:	0a00000b 	beq	10f680 <lwip_netconn_do_getaddr+0x274>
  10f650:	ebffcaf9 	bl	10223c <rt_enter_critical>
  10f654:	e51b3008 	ldr	r3, [fp, #-8]
  10f658:	e5933000 	ldr	r3, [r3]
  10f65c:	e1d330dc 	ldrsb	r3, [r3, #12]
  10f660:	e373000c 	cmn	r3, #12
  10f664:	ba000004 	blt	10f67c <lwip_netconn_do_getaddr+0x270>
  10f668:	e51b3008 	ldr	r3, [fp, #-8]
  10f66c:	e5933000 	ldr	r3, [r3]
  10f670:	e51b2008 	ldr	r2, [fp, #-8]
  10f674:	e1d220d4 	ldrsb	r2, [r2, #4]
  10f678:	e5c3200c 	strb	r2, [r3, #12]
  10f67c:	ebffcaf4 	bl	102254 <rt_exit_critical>
}
  10f680:	e320f000 	nop	{0}
  10f684:	e24bd004 	sub	sp, fp, #4
  10f688:	e8bd8800 	pop	{fp, pc}

0010f68c <lwip_netconn_do_close>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
  10f68c:	e92d4800 	push	{fp, lr}
  10f690:	e28db004 	add	fp, sp, #4
  10f694:	e24dd010 	sub	sp, sp, #16
  10f698:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10f69c:	e51b3010 	ldr	r3, [fp, #-16]
  10f6a0:	e50b3008 	str	r3, [fp, #-8]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
  10f6a4:	e51b3008 	ldr	r3, [fp, #-8]
  10f6a8:	e5933000 	ldr	r3, [r3]
  10f6ac:	e5933004 	ldr	r3, [r3, #4]
  10f6b0:	e50b300c 	str	r3, [fp, #-12]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
  10f6b4:	e51b3008 	ldr	r3, [fp, #-8]
  10f6b8:	e5933000 	ldr	r3, [r3]
  10f6bc:	e5933008 	ldr	r3, [r3, #8]
  10f6c0:	e3530000 	cmp	r3, #0
  10f6c4:	0a000069 	beq	10f870 <lwip_netconn_do_close+0x1e4>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
  10f6c8:	e51b3008 	ldr	r3, [fp, #-8]
  10f6cc:	e5933000 	ldr	r3, [r3]
  10f6d0:	e5933000 	ldr	r3, [r3]
  10f6d4:	e20330f0 	and	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
  10f6d8:	e3530010 	cmp	r3, #16
  10f6dc:	1a000063 	bne	10f870 <lwip_netconn_do_close+0x1e4>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
  10f6e0:	e51b3008 	ldr	r3, [fp, #-8]
  10f6e4:	e5d33008 	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
  10f6e8:	e3530003 	cmp	r3, #3
  10f6ec:	0a000002 	beq	10f6fc <lwip_netconn_do_close+0x70>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
  10f6f0:	e51b300c 	ldr	r3, [fp, #-12]
  10f6f4:	e3530002 	cmp	r3, #2
  10f6f8:	0a00005c 	beq	10f870 <lwip_netconn_do_close+0x1e4>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
  10f6fc:	e51b300c 	ldr	r3, [fp, #-12]
  10f700:	e3530003 	cmp	r3, #3
  10f704:	1a000003 	bne	10f718 <lwip_netconn_do_close+0x8c>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
  10f708:	e51b3008 	ldr	r3, [fp, #-8]
  10f70c:	e3e0200a 	mvn	r2, #10
  10f710:	e5c32004 	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
  10f714:	ea000058 	b	10f87c <lwip_netconn_do_close+0x1f0>
    } else if (state == NETCONN_WRITE) {
  10f718:	e51b300c 	ldr	r3, [fp, #-12]
  10f71c:	e3530001 	cmp	r3, #1
  10f720:	1a000003 	bne	10f734 <lwip_netconn_do_close+0xa8>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
  10f724:	e51b3008 	ldr	r3, [fp, #-8]
  10f728:	e3e02004 	mvn	r2, #4
  10f72c:	e5c32004 	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
  10f730:	ea000051 	b	10f87c <lwip_netconn_do_close+0x1f0>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
  10f734:	e51b3008 	ldr	r3, [fp, #-8]
  10f738:	e5d33008 	ldrb	r3, [r3, #8]
  10f73c:	e2033001 	and	r3, r3, #1
  10f740:	e3530000 	cmp	r3, #0
  10f744:	0a000003 	beq	10f758 <lwip_netconn_do_close+0xcc>
        /* Drain and delete mboxes */
        netconn_drain(msg->conn);
  10f748:	e51b3008 	ldr	r3, [fp, #-8]
  10f74c:	e5933000 	ldr	r3, [r3]
  10f750:	e1a00003 	mov	r0, r3
  10f754:	ebfff72a 	bl	10d404 <netconn_drain>
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
  10f758:	e51b3008 	ldr	r3, [fp, #-8]
  10f75c:	e5933000 	ldr	r3, [r3]
  10f760:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f764:	e3530000 	cmp	r3, #0
  10f768:	1a000004 	bne	10f780 <lwip_netconn_do_close+0xf4>
  10f76c:	e51b3008 	ldr	r3, [fp, #-8]
  10f770:	e5933000 	ldr	r3, [r3]
  10f774:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10f778:	e3530000 	cmp	r3, #0
  10f77c:	0a000006 	beq	10f79c <lwip_netconn_do_close+0x110>
  10f780:	e3050f00 	movw	r0, #24320	; 0x5f00
  10f784:	e3400014 	movt	r0, #20
  10f788:	ebffce61 	bl	103114 <rt_kprintf>
  10f78c:	e3001716 	movw	r1, #1814	; 0x716
  10f790:	e3050be4 	movw	r0, #23524	; 0x5be4
  10f794:	e3400014 	movt	r0, #20
  10f798:	ebffecdd 	bl	10ab14 <sys_arch_assert>
        msg->conn->write_offset == 0);
      msg->conn->state = NETCONN_CLOSE;
  10f79c:	e51b3008 	ldr	r3, [fp, #-8]
  10f7a0:	e5933000 	ldr	r3, [r3]
  10f7a4:	e3a02004 	mov	r2, #4
  10f7a8:	e5832004 	str	r2, [r3, #4]
      msg->conn->current_msg = msg;
  10f7ac:	e51b3008 	ldr	r3, [fp, #-8]
  10f7b0:	e5933000 	ldr	r3, [r3]
  10f7b4:	e51b2008 	ldr	r2, [fp, #-8]
  10f7b8:	e5832038 	str	r2, [r3, #56]	; 0x38
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
  10f7bc:	e51b3008 	ldr	r3, [fp, #-8]
  10f7c0:	e5933000 	ldr	r3, [r3]
  10f7c4:	e3a01000 	mov	r1, #0
  10f7c8:	e1a00003 	mov	r0, r3
  10f7cc:	ebfff776 	bl	10d5ac <lwip_netconn_do_close_internal>
  10f7d0:	e1a03000 	mov	r3, r0
  10f7d4:	e3530000 	cmp	r3, #0
  10f7d8:	0a000038 	beq	10f8c0 <lwip_netconn_do_close+0x234>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
  10f7dc:	e51b3008 	ldr	r3, [fp, #-8]
  10f7e0:	e5933000 	ldr	r3, [r3]
  10f7e4:	e5933004 	ldr	r3, [r3, #4]
  10f7e8:	e3530004 	cmp	r3, #4
  10f7ec:	0a000006 	beq	10f80c <lwip_netconn_do_close+0x180>
  10f7f0:	e3050f1c 	movw	r0, #24348	; 0x5f1c
  10f7f4:	e3400014 	movt	r0, #20
  10f7f8:	ebffce45 	bl	103114 <rt_kprintf>
  10f7fc:	e300171b 	movw	r1, #1819	; 0x71b
  10f800:	e3050be4 	movw	r0, #23524	; 0x5be4
  10f804:	e3400014 	movt	r0, #20
  10f808:	ebffecc1 	bl	10ab14 <sys_arch_assert>
        UNLOCK_TCPIP_CORE();
  10f80c:	e30e0d64 	movw	r0, #60772	; 0xed64
  10f810:	e3400014 	movt	r0, #20
  10f814:	ebffeae9 	bl	10a3c0 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
  10f818:	e51b3008 	ldr	r3, [fp, #-8]
  10f81c:	e5933000 	ldr	r3, [r3]
  10f820:	e2833010 	add	r3, r3, #16
  10f824:	e3a01000 	mov	r1, #0
  10f828:	e1a00003 	mov	r0, r3
  10f82c:	ebffea67 	bl	10a1d0 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
  10f830:	e30e0d64 	movw	r0, #60772	; 0xed64
  10f834:	e3400014 	movt	r0, #20
  10f838:	ebffead4 	bl	10a390 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
  10f83c:	e51b3008 	ldr	r3, [fp, #-8]
  10f840:	e5933000 	ldr	r3, [r3]
  10f844:	e5933004 	ldr	r3, [r3, #4]
  10f848:	e3530000 	cmp	r3, #0
  10f84c:	0a00001b 	beq	10f8c0 <lwip_netconn_do_close+0x234>
  10f850:	e3050f1c 	movw	r0, #24348	; 0x5f1c
  10f854:	e3400014 	movt	r0, #20
  10f858:	ebffce2d 	bl	103114 <rt_kprintf>
  10f85c:	e300171f 	movw	r1, #1823	; 0x71f
  10f860:	e3050be4 	movw	r0, #23524	; 0x5be4
  10f864:	e3400014 	movt	r0, #20
  10f868:	ebffeca9 	bl	10ab14 <sys_arch_assert>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
  10f86c:	ea000013 	b	10f8c0 <lwip_netconn_do_close+0x234>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
  10f870:	e51b3008 	ldr	r3, [fp, #-8]
  10f874:	e3e0200a 	mvn	r2, #10
  10f878:	e5c32004 	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
  10f87c:	e51b3008 	ldr	r3, [fp, #-8]
  10f880:	e5933000 	ldr	r3, [r3]
  10f884:	e3530000 	cmp	r3, #0
  10f888:	0a00000d 	beq	10f8c4 <lwip_netconn_do_close+0x238>
  10f88c:	ebffca6a 	bl	10223c <rt_enter_critical>
  10f890:	e51b3008 	ldr	r3, [fp, #-8]
  10f894:	e5933000 	ldr	r3, [r3]
  10f898:	e1d330dc 	ldrsb	r3, [r3, #12]
  10f89c:	e373000c 	cmn	r3, #12
  10f8a0:	ba000004 	blt	10f8b8 <lwip_netconn_do_close+0x22c>
  10f8a4:	e51b3008 	ldr	r3, [fp, #-8]
  10f8a8:	e5933000 	ldr	r3, [r3]
  10f8ac:	e51b2008 	ldr	r2, [fp, #-8]
  10f8b0:	e1d220d4 	ldrsb	r2, [r2, #4]
  10f8b4:	e5c3200c 	strb	r2, [r3, #12]
  10f8b8:	ebffca65 	bl	102254 <rt_exit_critical>
  10f8bc:	ea000000 	b	10f8c4 <lwip_netconn_do_close+0x238>
      return;
  10f8c0:	e320f000 	nop	{0}
}
  10f8c4:	e24bd004 	sub	sp, fp, #4
  10f8c8:	e8bd8800 	pop	{fp, pc}

0010f8cc <lwip_netconn_do_join_leave_group>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_join_leave_group(void *m)
{
  10f8cc:	e92d4800 	push	{fp, lr}
  10f8d0:	e28db004 	add	fp, sp, #4
  10f8d4:	e24dd010 	sub	sp, sp, #16
  10f8d8:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10f8dc:	e51b3010 	ldr	r3, [fp, #-16]
  10f8e0:	e50b3008 	str	r3, [fp, #-8]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
  10f8e4:	e51b3008 	ldr	r3, [fp, #-8]
  10f8e8:	e5933000 	ldr	r3, [r3]
  10f8ec:	e1d330dc 	ldrsb	r3, [r3, #12]
  10f8f0:	e373000c 	cmn	r3, #12
  10f8f4:	aa000005 	bge	10f910 <lwip_netconn_do_join_leave_group+0x44>
    msg->err = msg->conn->last_err;
  10f8f8:	e51b3008 	ldr	r3, [fp, #-8]
  10f8fc:	e5933000 	ldr	r3, [r3]
  10f900:	e1d320dc 	ldrsb	r2, [r3, #12]
  10f904:	e51b3008 	ldr	r3, [fp, #-8]
  10f908:	e5c32004 	strb	r2, [r3, #4]
  10f90c:	ea00002d 	b	10f9c8 <lwip_netconn_do_join_leave_group+0xfc>
  } else {
    if (msg->conn->pcb.tcp != NULL) {
  10f910:	e51b3008 	ldr	r3, [fp, #-8]
  10f914:	e5933000 	ldr	r3, [r3]
  10f918:	e5933008 	ldr	r3, [r3, #8]
  10f91c:	e3530000 	cmp	r3, #0
  10f920:	0a000025 	beq	10f9bc <lwip_netconn_do_join_leave_group+0xf0>
      if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
  10f924:	e51b3008 	ldr	r3, [fp, #-8]
  10f928:	e5933000 	ldr	r3, [r3]
  10f92c:	e5933000 	ldr	r3, [r3]
  10f930:	e20330f0 	and	r3, r3, #240	; 0xf0
  10f934:	e3530020 	cmp	r3, #32
  10f938:	1a00001b 	bne	10f9ac <lwip_netconn_do_join_leave_group+0xe0>
        }
        else
#endif /* LWIP_IPV6 && LWIP_IPV6_MLD */
        {
#if LWIP_IGMP
          if (msg->msg.jl.join_or_leave == NETCONN_JOIN) {
  10f93c:	e51b3008 	ldr	r3, [fp, #-8]
  10f940:	e5933010 	ldr	r3, [r3, #16]
  10f944:	e3530000 	cmp	r3, #0
  10f948:	1a00000b 	bne	10f97c <lwip_netconn_do_join_leave_group+0xb0>
            msg->err = igmp_joingroup(ip_2_ip4(API_EXPR_REF(msg->msg.jl.netif_addr)),
  10f94c:	e51b3008 	ldr	r3, [fp, #-8]
  10f950:	e593200c 	ldr	r2, [r3, #12]
              ip_2_ip4(API_EXPR_REF(msg->msg.jl.multiaddr)));
  10f954:	e51b3008 	ldr	r3, [fp, #-8]
  10f958:	e5933008 	ldr	r3, [r3, #8]
            msg->err = igmp_joingroup(ip_2_ip4(API_EXPR_REF(msg->msg.jl.netif_addr)),
  10f95c:	e1a01003 	mov	r1, r3
  10f960:	e1a00002 	mov	r0, r2
  10f964:	eb008252 	bl	1302b4 <igmp_joingroup>
  10f968:	e1a03000 	mov	r3, r0
  10f96c:	e1a02003 	mov	r2, r3
  10f970:	e51b3008 	ldr	r3, [fp, #-8]
  10f974:	e5c32004 	strb	r2, [r3, #4]
  10f978:	ea000012 	b	10f9c8 <lwip_netconn_do_join_leave_group+0xfc>
          } else {
            msg->err = igmp_leavegroup(ip_2_ip4(API_EXPR_REF(msg->msg.jl.netif_addr)),
  10f97c:	e51b3008 	ldr	r3, [fp, #-8]
  10f980:	e593200c 	ldr	r2, [r3, #12]
              ip_2_ip4(API_EXPR_REF(msg->msg.jl.multiaddr)));
  10f984:	e51b3008 	ldr	r3, [fp, #-8]
  10f988:	e5933008 	ldr	r3, [r3, #8]
            msg->err = igmp_leavegroup(ip_2_ip4(API_EXPR_REF(msg->msg.jl.netif_addr)),
  10f98c:	e1a01003 	mov	r1, r3
  10f990:	e1a00002 	mov	r0, r2
  10f994:	eb0082ff 	bl	130598 <igmp_leavegroup>
  10f998:	e1a03000 	mov	r3, r0
  10f99c:	e1a02003 	mov	r2, r3
  10f9a0:	e51b3008 	ldr	r3, [fp, #-8]
  10f9a4:	e5c32004 	strb	r2, [r3, #4]
  10f9a8:	ea000006 	b	10f9c8 <lwip_netconn_do_join_leave_group+0xfc>
#endif /* LWIP_IGMP */
        }
#endif /* LWIP_UDP */
#if (LWIP_TCP || LWIP_RAW)
      } else {
        msg->err = ERR_VAL;
  10f9ac:	e51b3008 	ldr	r3, [fp, #-8]
  10f9b0:	e3e02005 	mvn	r2, #5
  10f9b4:	e5c32004 	strb	r2, [r3, #4]
  10f9b8:	ea000002 	b	10f9c8 <lwip_netconn_do_join_leave_group+0xfc>
#endif /* (LWIP_TCP || LWIP_RAW) */
      }
    } else {
      msg->err = ERR_CONN;
  10f9bc:	e51b3008 	ldr	r3, [fp, #-8]
  10f9c0:	e3e0200a 	mvn	r2, #10
  10f9c4:	e5c32004 	strb	r2, [r3, #4]
    }
  }
  TCPIP_APIMSG_ACK(msg);
  10f9c8:	e51b3008 	ldr	r3, [fp, #-8]
  10f9cc:	e5933000 	ldr	r3, [r3]
  10f9d0:	e3530000 	cmp	r3, #0
  10f9d4:	0a00000b 	beq	10fa08 <lwip_netconn_do_join_leave_group+0x13c>
  10f9d8:	ebffca17 	bl	10223c <rt_enter_critical>
  10f9dc:	e51b3008 	ldr	r3, [fp, #-8]
  10f9e0:	e5933000 	ldr	r3, [r3]
  10f9e4:	e1d330dc 	ldrsb	r3, [r3, #12]
  10f9e8:	e373000c 	cmn	r3, #12
  10f9ec:	ba000004 	blt	10fa04 <lwip_netconn_do_join_leave_group+0x138>
  10f9f0:	e51b3008 	ldr	r3, [fp, #-8]
  10f9f4:	e5933000 	ldr	r3, [r3]
  10f9f8:	e51b2008 	ldr	r2, [fp, #-8]
  10f9fc:	e1d220d4 	ldrsb	r2, [r2, #4]
  10fa00:	e5c3200c 	strb	r2, [r3, #12]
  10fa04:	ebffca12 	bl	102254 <rt_exit_critical>
}
  10fa08:	e320f000 	nop	{0}
  10fa0c:	e24bd004 	sub	sp, fp, #4
  10fa10:	e8bd8800 	pop	{fp, pc}

0010fa14 <lwip_netconn_do_dns_found>:
 * (or on timeout). A waiting application thread is waked up by
 * signaling the semaphore.
 */
static void
lwip_netconn_do_dns_found(const char *name, const ip_addr_t *ipaddr, void *arg)
{
  10fa14:	e92d4800 	push	{fp, lr}
  10fa18:	e28db004 	add	fp, sp, #4
  10fa1c:	e24dd018 	sub	sp, sp, #24
  10fa20:	e50b0010 	str	r0, [fp, #-16]
  10fa24:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10fa28:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  struct dns_api_msg *msg = (struct dns_api_msg*)arg;
  10fa2c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10fa30:	e50b3008 	str	r3, [fp, #-8]

  /* we trust the internal implementation to be correct :-) */
  LWIP_UNUSED_ARG(name);

  if (ipaddr == NULL) {
  10fa34:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10fa38:	e3530000 	cmp	r3, #0
  10fa3c:	1a000004 	bne	10fa54 <lwip_netconn_do_dns_found+0x40>
    /* timeout or memory error */
    API_EXPR_DEREF(msg->err) = ERR_VAL;
  10fa40:	e51b3008 	ldr	r3, [fp, #-8]
  10fa44:	e593300c 	ldr	r3, [r3, #12]
  10fa48:	e3e02005 	mvn	r2, #5
  10fa4c:	e5c32000 	strb	r2, [r3]
  10fa50:	ea000008 	b	10fa78 <lwip_netconn_do_dns_found+0x64>
  } else {
    /* address was resolved */
    API_EXPR_DEREF(msg->err) = ERR_OK;
  10fa54:	e51b3008 	ldr	r3, [fp, #-8]
  10fa58:	e593300c 	ldr	r3, [r3, #12]
  10fa5c:	e3a02000 	mov	r2, #0
  10fa60:	e5c32000 	strb	r2, [r3]
    API_EXPR_DEREF(msg->addr) = *ipaddr;
  10fa64:	e51b3008 	ldr	r3, [fp, #-8]
  10fa68:	e5933004 	ldr	r3, [r3, #4]
  10fa6c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  10fa70:	e5922000 	ldr	r2, [r2]
  10fa74:	e5832000 	str	r2, [r3]
  }
  /* wake up the application task waiting in netconn_gethostbyname */
  sys_sem_signal(API_EXPR_REF_SEM(msg->sem));
  10fa78:	e51b3008 	ldr	r3, [fp, #-8]
  10fa7c:	e5933008 	ldr	r3, [r3, #8]
  10fa80:	e1a00003 	mov	r0, r3
  10fa84:	ebffe9c6 	bl	10a1a4 <sys_sem_signal>
}
  10fa88:	e320f000 	nop	{0}
  10fa8c:	e24bd004 	sub	sp, fp, #4
  10fa90:	e8bd8800 	pop	{fp, pc}

0010fa94 <lwip_netconn_do_gethostbyname>:
 *
 * @param arg the dns_api_msg pointing to the query
 */
void
lwip_netconn_do_gethostbyname(void *arg)
{
  10fa94:	e92d4810 	push	{r4, fp, lr}
  10fa98:	e28db008 	add	fp, sp, #8
  10fa9c:	e24dd01c 	sub	sp, sp, #28
  10faa0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dns_api_msg *msg = (struct dns_api_msg*)arg;
  10faa4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10faa8:	e50b3010 	str	r3, [fp, #-16]
  u8_t addrtype =
  10faac:	e3a03000 	mov	r3, #0
  10fab0:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    msg->dns_addrtype;
#else
    LWIP_DNS_ADDRTYPE_DEFAULT;
#endif

  API_EXPR_DEREF(msg->err) = dns_gethostbyname_addrtype(msg->name,
  10fab4:	e51b3010 	ldr	r3, [fp, #-16]
  10fab8:	e5930000 	ldr	r0, [r3]
  10fabc:	e51b3010 	ldr	r3, [fp, #-16]
  10fac0:	e5931004 	ldr	r1, [r3, #4]
  10fac4:	e51b3010 	ldr	r3, [fp, #-16]
  10fac8:	e593400c 	ldr	r4, [r3, #12]
  10facc:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  10fad0:	e58d3000 	str	r3, [sp]
  10fad4:	e51b3010 	ldr	r3, [fp, #-16]
  10fad8:	e30f2a14 	movw	r2, #64020	; 0xfa14
  10fadc:	e3402010 	movt	r2, #16
  10fae0:	eb0020d2 	bl	117e30 <dns_gethostbyname_addrtype>
  10fae4:	e1a03000 	mov	r3, r0
  10fae8:	e5c43000 	strb	r3, [r4]
    API_EXPR_REF(msg->addr), lwip_netconn_do_dns_found, msg, addrtype);
  if (API_EXPR_DEREF(msg->err) != ERR_INPROGRESS) {
  10faec:	e51b3010 	ldr	r3, [fp, #-16]
  10faf0:	e593300c 	ldr	r3, [r3, #12]
  10faf4:	e1d330d0 	ldrsb	r3, [r3]
  10faf8:	e3730005 	cmn	r3, #5
  10fafc:	0a000003 	beq	10fb10 <lwip_netconn_do_gethostbyname+0x7c>
    /* on error or immediate success, wake up the application
     * task waiting in netconn_gethostbyname */
    sys_sem_signal(API_EXPR_REF_SEM(msg->sem));
  10fb00:	e51b3010 	ldr	r3, [fp, #-16]
  10fb04:	e5933008 	ldr	r3, [r3, #8]
  10fb08:	e1a00003 	mov	r0, r3
  10fb0c:	ebffe9a4 	bl	10a1a4 <sys_sem_signal>
  }
}
  10fb10:	e320f000 	nop	{0}
  10fb14:	e24bd008 	sub	sp, fp, #8
  10fb18:	e8bd8810 	pop	{r4, fp, pc}

0010fb1c <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
  10fb1c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10fb20:	e28db000 	add	fp, sp, #0
  10fb24:	e24dd00c 	sub	sp, sp, #12
  10fb28:	e1a03000 	mov	r3, r0
  10fb2c:	e54b3005 	strb	r3, [fp, #-5]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
  10fb30:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10fb34:	e3530000 	cmp	r3, #0
  10fb38:	ca000003 	bgt	10fb4c <err_to_errno+0x30>
  10fb3c:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10fb40:	e2633000 	rsb	r3, r3, #0
  10fb44:	e3530010 	cmp	r3, #16
  10fb48:	da000001 	ble	10fb54 <err_to_errno+0x38>
    return EIO;
  10fb4c:	e3a03005 	mov	r3, #5
  10fb50:	ea000004 	b	10fb68 <err_to_errno+0x4c>
  }
  return err_to_errno_table[-err];
  10fb54:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10fb58:	e2632000 	rsb	r2, r3, #0
  10fb5c:	e3063080 	movw	r3, #24704	; 0x6080
  10fb60:	e3403014 	movt	r3, #20
  10fb64:	e7933102 	ldr	r3, [r3, r2, lsl #2]
}
  10fb68:	e1a00003 	mov	r0, r3
  10fb6c:	e28bd000 	add	sp, fp, #0
  10fb70:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10fb74:	e12fff1e 	bx	lr

0010fb78 <netbuf_new>:
 * @return a pointer to a new netbuf
 *         NULL on lack of memory
 */
struct
netbuf *netbuf_new(void)
{
  10fb78:	e92d4800 	push	{fp, lr}
  10fb7c:	e28db004 	add	fp, sp, #4
  10fb80:	e24dd008 	sub	sp, sp, #8
  struct netbuf *buf;

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
  10fb84:	e3a02043 	mov	r2, #67	; 0x43
  10fb88:	e30610c4 	movw	r1, #24772	; 0x60c4
  10fb8c:	e3401014 	movt	r1, #20
  10fb90:	e3a00007 	mov	r0, #7
  10fb94:	eb002476 	bl	118d74 <memp_malloc_fn>
  10fb98:	e50b0008 	str	r0, [fp, #-8]
  if (buf != NULL) {
  10fb9c:	e51b3008 	ldr	r3, [fp, #-8]
  10fba0:	e3530000 	cmp	r3, #0
  10fba4:	0a000003 	beq	10fbb8 <netbuf_new+0x40>
    memset(buf, 0, sizeof(struct netbuf));
  10fba8:	e3a02010 	mov	r2, #16
  10fbac:	e3a01000 	mov	r1, #0
  10fbb0:	e51b0008 	ldr	r0, [fp, #-8]
  10fbb4:	eb00c34c 	bl	1408ec <memset>
  }
  return buf;
  10fbb8:	e51b3008 	ldr	r3, [fp, #-8]
}
  10fbbc:	e1a00003 	mov	r0, r3
  10fbc0:	e24bd004 	sub	sp, fp, #4
  10fbc4:	e8bd8800 	pop	{fp, pc}

0010fbc8 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
  10fbc8:	e92d4800 	push	{fp, lr}
  10fbcc:	e28db004 	add	fp, sp, #4
  10fbd0:	e24dd008 	sub	sp, sp, #8
  10fbd4:	e50b0008 	str	r0, [fp, #-8]
  if (buf != NULL) {
  10fbd8:	e51b3008 	ldr	r3, [fp, #-8]
  10fbdc:	e3530000 	cmp	r3, #0
  10fbe0:	0a000011 	beq	10fc2c <netbuf_delete+0x64>
    if (buf->p != NULL) {
  10fbe4:	e51b3008 	ldr	r3, [fp, #-8]
  10fbe8:	e5933000 	ldr	r3, [r3]
  10fbec:	e3530000 	cmp	r3, #0
  10fbf0:	0a00000a 	beq	10fc20 <netbuf_delete+0x58>
      pbuf_free(buf->p);
  10fbf4:	e51b3008 	ldr	r3, [fp, #-8]
  10fbf8:	e5933000 	ldr	r3, [r3]
  10fbfc:	e1a00003 	mov	r0, r3
  10fc00:	eb002bd1 	bl	11ab4c <pbuf_free>
      buf->p = buf->ptr = NULL;
  10fc04:	e51b3008 	ldr	r3, [fp, #-8]
  10fc08:	e3a02000 	mov	r2, #0
  10fc0c:	e5832004 	str	r2, [r3, #4]
  10fc10:	e51b3008 	ldr	r3, [fp, #-8]
  10fc14:	e5932004 	ldr	r2, [r3, #4]
  10fc18:	e51b3008 	ldr	r3, [fp, #-8]
  10fc1c:	e5832000 	str	r2, [r3]
    }
    memp_free(MEMP_NETBUF, buf);
  10fc20:	e51b1008 	ldr	r1, [fp, #-8]
  10fc24:	e3a00007 	mov	r0, #7
  10fc28:	eb0024b9 	bl	118f14 <memp_free>
  }
}
  10fc2c:	e320f000 	nop	{0}
  10fc30:	e24bd004 	sub	sp, fp, #4
  10fc34:	e8bd8800 	pop	{fp, pc}

0010fc38 <netbuf_alloc>:
 * @return pointer to the allocated memory
 *         NULL if no memory could be allocated
 */
void *
netbuf_alloc(struct netbuf *buf, u16_t size)
{
  10fc38:	e92d4800 	push	{fp, lr}
  10fc3c:	e28db004 	add	fp, sp, #4
  10fc40:	e24dd008 	sub	sp, sp, #8
  10fc44:	e50b0008 	str	r0, [fp, #-8]
  10fc48:	e1a03001 	mov	r3, r1
  10fc4c:	e14b30ba 	strh	r3, [fp, #-10]
  LWIP_ERROR("netbuf_alloc: invalid buf", (buf != NULL), return NULL;);
  10fc50:	e51b3008 	ldr	r3, [fp, #-8]
  10fc54:	e3530000 	cmp	r3, #0
  10fc58:	1a000008 	bne	10fc80 <netbuf_alloc+0x48>
  10fc5c:	e30600f4 	movw	r0, #24820	; 0x60f4
  10fc60:	e3400014 	movt	r0, #20
  10fc64:	ebffcd2a 	bl	103114 <rt_kprintf>
  10fc68:	e3a01068 	mov	r1, #104	; 0x68
  10fc6c:	e30600c4 	movw	r0, #24772	; 0x60c4
  10fc70:	e3400014 	movt	r0, #20
  10fc74:	ebffeba6 	bl	10ab14 <sys_arch_assert>
  10fc78:	e3a03000 	mov	r3, #0
  10fc7c:	ea000029 	b	10fd28 <netbuf_alloc+0xf0>

  /* Deallocate any previously allocated memory. */
  if (buf->p != NULL) {
  10fc80:	e51b3008 	ldr	r3, [fp, #-8]
  10fc84:	e5933000 	ldr	r3, [r3]
  10fc88:	e3530000 	cmp	r3, #0
  10fc8c:	0a000003 	beq	10fca0 <netbuf_alloc+0x68>
    pbuf_free(buf->p);
  10fc90:	e51b3008 	ldr	r3, [fp, #-8]
  10fc94:	e5933000 	ldr	r3, [r3]
  10fc98:	e1a00003 	mov	r0, r3
  10fc9c:	eb002baa 	bl	11ab4c <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, size, PBUF_RAM);
  10fca0:	e15b30ba 	ldrh	r3, [fp, #-10]
  10fca4:	e3a02000 	mov	r2, #0
  10fca8:	e1a01003 	mov	r1, r3
  10fcac:	e3a00000 	mov	r0, #0
  10fcb0:	eb00289e 	bl	119f30 <pbuf_alloc>
  10fcb4:	e1a02000 	mov	r2, r0
  10fcb8:	e51b3008 	ldr	r3, [fp, #-8]
  10fcbc:	e5832000 	str	r2, [r3]
  if (buf->p == NULL) {
  10fcc0:	e51b3008 	ldr	r3, [fp, #-8]
  10fcc4:	e5933000 	ldr	r3, [r3]
  10fcc8:	e3530000 	cmp	r3, #0
  10fccc:	1a000001 	bne	10fcd8 <netbuf_alloc+0xa0>
     return NULL;
  10fcd0:	e3a03000 	mov	r3, #0
  10fcd4:	ea000013 	b	10fd28 <netbuf_alloc+0xf0>
  }
  LWIP_ASSERT("check that first pbuf can hold size",
  10fcd8:	e51b3008 	ldr	r3, [fp, #-8]
  10fcdc:	e5933000 	ldr	r3, [r3]
  10fce0:	e1d330ba 	ldrh	r3, [r3, #10]
  10fce4:	e15b20ba 	ldrh	r2, [fp, #-10]
  10fce8:	e1520003 	cmp	r2, r3
  10fcec:	9a000006 	bls	10fd0c <netbuf_alloc+0xd4>
  10fcf0:	e3060110 	movw	r0, #24848	; 0x6110
  10fcf4:	e3400014 	movt	r0, #20
  10fcf8:	ebffcd05 	bl	103114 <rt_kprintf>
  10fcfc:	e3a01073 	mov	r1, #115	; 0x73
  10fd00:	e30600c4 	movw	r0, #24772	; 0x60c4
  10fd04:	e3400014 	movt	r0, #20
  10fd08:	ebffeb81 	bl	10ab14 <sys_arch_assert>
             (buf->p->len >= size));
  buf->ptr = buf->p;
  10fd0c:	e51b3008 	ldr	r3, [fp, #-8]
  10fd10:	e5932000 	ldr	r2, [r3]
  10fd14:	e51b3008 	ldr	r3, [fp, #-8]
  10fd18:	e5832004 	str	r2, [r3, #4]
  return buf->p->payload;
  10fd1c:	e51b3008 	ldr	r3, [fp, #-8]
  10fd20:	e5933000 	ldr	r3, [r3]
  10fd24:	e5933004 	ldr	r3, [r3, #4]
}
  10fd28:	e1a00003 	mov	r0, r3
  10fd2c:	e24bd004 	sub	sp, fp, #4
  10fd30:	e8bd8800 	pop	{fp, pc}

0010fd34 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
  10fd34:	e92d4800 	push	{fp, lr}
  10fd38:	e28db004 	add	fp, sp, #4
  10fd3c:	e24dd008 	sub	sp, sp, #8
  10fd40:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
  10fd44:	e51b3008 	ldr	r3, [fp, #-8]
  10fd48:	e3530000 	cmp	r3, #0
  10fd4c:	1a000007 	bne	10fd70 <netbuf_free+0x3c>
  10fd50:	e3060134 	movw	r0, #24884	; 0x6134
  10fd54:	e3400014 	movt	r0, #20
  10fd58:	ebffcced 	bl	103114 <rt_kprintf>
  10fd5c:	e3a01081 	mov	r1, #129	; 0x81
  10fd60:	e30600c4 	movw	r0, #24772	; 0x60c4
  10fd64:	e3400014 	movt	r0, #20
  10fd68:	ebffeb69 	bl	10ab14 <sys_arch_assert>
  10fd6c:	ea00000e 	b	10fdac <netbuf_free+0x78>
  if (buf->p != NULL) {
  10fd70:	e51b3008 	ldr	r3, [fp, #-8]
  10fd74:	e5933000 	ldr	r3, [r3]
  10fd78:	e3530000 	cmp	r3, #0
  10fd7c:	0a000003 	beq	10fd90 <netbuf_free+0x5c>
    pbuf_free(buf->p);
  10fd80:	e51b3008 	ldr	r3, [fp, #-8]
  10fd84:	e5933000 	ldr	r3, [r3]
  10fd88:	e1a00003 	mov	r0, r3
  10fd8c:	eb002b6e 	bl	11ab4c <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
  10fd90:	e51b3008 	ldr	r3, [fp, #-8]
  10fd94:	e3a02000 	mov	r2, #0
  10fd98:	e5832004 	str	r2, [r3, #4]
  10fd9c:	e51b3008 	ldr	r3, [fp, #-8]
  10fda0:	e5932004 	ldr	r2, [r3, #4]
  10fda4:	e51b3008 	ldr	r3, [fp, #-8]
  10fda8:	e5832000 	str	r2, [r3]
}
  10fdac:	e24bd004 	sub	sp, fp, #4
  10fdb0:	e8bd8800 	pop	{fp, pc}

0010fdb4 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
  10fdb4:	e92d4800 	push	{fp, lr}
  10fdb8:	e28db004 	add	fp, sp, #4
  10fdbc:	e24dd010 	sub	sp, sp, #16
  10fdc0:	e50b0008 	str	r0, [fp, #-8]
  10fdc4:	e50b100c 	str	r1, [fp, #-12]
  10fdc8:	e1a03002 	mov	r3, r2
  10fdcc:	e14b30be 	strh	r3, [fp, #-14]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
  10fdd0:	e51b3008 	ldr	r3, [fp, #-8]
  10fdd4:	e3530000 	cmp	r3, #0
  10fdd8:	1a000008 	bne	10fe00 <netbuf_ref+0x4c>
  10fddc:	e3060150 	movw	r0, #24912	; 0x6150
  10fde0:	e3400014 	movt	r0, #20
  10fde4:	ebffccca 	bl	103114 <rt_kprintf>
  10fde8:	e3a01095 	mov	r1, #149	; 0x95
  10fdec:	e30600c4 	movw	r0, #24772	; 0x60c4
  10fdf0:	e3400014 	movt	r0, #20
  10fdf4:	ebffeb46 	bl	10ab14 <sys_arch_assert>
  10fdf8:	e3e0300f 	mvn	r3, #15
  10fdfc:	ea000028 	b	10fea4 <netbuf_ref+0xf0>
  if (buf->p != NULL) {
  10fe00:	e51b3008 	ldr	r3, [fp, #-8]
  10fe04:	e5933000 	ldr	r3, [r3]
  10fe08:	e3530000 	cmp	r3, #0
  10fe0c:	0a000003 	beq	10fe20 <netbuf_ref+0x6c>
    pbuf_free(buf->p);
  10fe10:	e51b3008 	ldr	r3, [fp, #-8]
  10fe14:	e5933000 	ldr	r3, [r3]
  10fe18:	e1a00003 	mov	r0, r3
  10fe1c:	eb002b4a 	bl	11ab4c <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
  10fe20:	e3a02002 	mov	r2, #2
  10fe24:	e3a01000 	mov	r1, #0
  10fe28:	e3a00000 	mov	r0, #0
  10fe2c:	eb00283f 	bl	119f30 <pbuf_alloc>
  10fe30:	e1a02000 	mov	r2, r0
  10fe34:	e51b3008 	ldr	r3, [fp, #-8]
  10fe38:	e5832000 	str	r2, [r3]
  if (buf->p == NULL) {
  10fe3c:	e51b3008 	ldr	r3, [fp, #-8]
  10fe40:	e5933000 	ldr	r3, [r3]
  10fe44:	e3530000 	cmp	r3, #0
  10fe48:	1a000004 	bne	10fe60 <netbuf_ref+0xac>
    buf->ptr = NULL;
  10fe4c:	e51b3008 	ldr	r3, [fp, #-8]
  10fe50:	e3a02000 	mov	r2, #0
  10fe54:	e5832004 	str	r2, [r3, #4]
    return ERR_MEM;
  10fe58:	e3e03000 	mvn	r3, #0
  10fe5c:	ea000010 	b	10fea4 <netbuf_ref+0xf0>
  }
  ((struct pbuf_rom*)buf->p)->payload = dataptr;
  10fe60:	e51b3008 	ldr	r3, [fp, #-8]
  10fe64:	e5933000 	ldr	r3, [r3]
  10fe68:	e51b200c 	ldr	r2, [fp, #-12]
  10fe6c:	e5832004 	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
  10fe70:	e51b3008 	ldr	r3, [fp, #-8]
  10fe74:	e5933000 	ldr	r3, [r3]
  10fe78:	e15b20be 	ldrh	r2, [fp, #-14]
  10fe7c:	e1c320b8 	strh	r2, [r3, #8]
  10fe80:	e51b2008 	ldr	r2, [fp, #-8]
  10fe84:	e5922000 	ldr	r2, [r2]
  10fe88:	e1d330b8 	ldrh	r3, [r3, #8]
  10fe8c:	e1c230ba 	strh	r3, [r2, #10]
  buf->ptr = buf->p;
  10fe90:	e51b3008 	ldr	r3, [fp, #-8]
  10fe94:	e5932000 	ldr	r2, [r3]
  10fe98:	e51b3008 	ldr	r3, [fp, #-8]
  10fe9c:	e5832004 	str	r2, [r3, #4]
  return ERR_OK;
  10fea0:	e3a03000 	mov	r3, #0
}
  10fea4:	e1a00003 	mov	r0, r3
  10fea8:	e24bd004 	sub	sp, fp, #4
  10feac:	e8bd8800 	pop	{fp, pc}

0010feb0 <netbuf_chain>:
 * @param head the first netbuf
 * @param tail netbuf to chain after head, freed by this function, may not be reference after returning
 */
void
netbuf_chain(struct netbuf *head, struct netbuf *tail)
{
  10feb0:	e92d4800 	push	{fp, lr}
  10feb4:	e28db004 	add	fp, sp, #4
  10feb8:	e24dd008 	sub	sp, sp, #8
  10febc:	e50b0008 	str	r0, [fp, #-8]
  10fec0:	e50b100c 	str	r1, [fp, #-12]
  LWIP_ERROR("netbuf_chain: invalid head", (head != NULL), return;);
  10fec4:	e51b3008 	ldr	r3, [fp, #-8]
  10fec8:	e3530000 	cmp	r3, #0
  10fecc:	1a000007 	bne	10fef0 <netbuf_chain+0x40>
  10fed0:	e3060168 	movw	r0, #24936	; 0x6168
  10fed4:	e3400014 	movt	r0, #20
  10fed8:	ebffcc8d 	bl	103114 <rt_kprintf>
  10fedc:	e3a010ae 	mov	r1, #174	; 0xae
  10fee0:	e30600c4 	movw	r0, #24772	; 0x60c4
  10fee4:	e3400014 	movt	r0, #20
  10fee8:	ebffeb09 	bl	10ab14 <sys_arch_assert>
  10feec:	ea000018 	b	10ff54 <netbuf_chain+0xa4>
  LWIP_ERROR("netbuf_chain: invalid tail", (tail != NULL), return;);
  10fef0:	e51b300c 	ldr	r3, [fp, #-12]
  10fef4:	e3530000 	cmp	r3, #0
  10fef8:	1a000007 	bne	10ff1c <netbuf_chain+0x6c>
  10fefc:	e3060184 	movw	r0, #24964	; 0x6184
  10ff00:	e3400014 	movt	r0, #20
  10ff04:	ebffcc82 	bl	103114 <rt_kprintf>
  10ff08:	e3a010af 	mov	r1, #175	; 0xaf
  10ff0c:	e30600c4 	movw	r0, #24772	; 0x60c4
  10ff10:	e3400014 	movt	r0, #20
  10ff14:	ebffeafe 	bl	10ab14 <sys_arch_assert>
  10ff18:	ea00000d 	b	10ff54 <netbuf_chain+0xa4>
  pbuf_cat(head->p, tail->p);
  10ff1c:	e51b3008 	ldr	r3, [fp, #-8]
  10ff20:	e5932000 	ldr	r2, [r3]
  10ff24:	e51b300c 	ldr	r3, [fp, #-12]
  10ff28:	e5933000 	ldr	r3, [r3]
  10ff2c:	e1a01003 	mov	r1, r3
  10ff30:	e1a00002 	mov	r0, r2
  10ff34:	eb002bbb 	bl	11ae28 <pbuf_cat>
  head->ptr = head->p;
  10ff38:	e51b3008 	ldr	r3, [fp, #-8]
  10ff3c:	e5932000 	ldr	r2, [r3]
  10ff40:	e51b3008 	ldr	r3, [fp, #-8]
  10ff44:	e5832004 	str	r2, [r3, #4]
  memp_free(MEMP_NETBUF, tail);
  10ff48:	e51b100c 	ldr	r1, [fp, #-12]
  10ff4c:	e3a00007 	mov	r0, #7
  10ff50:	eb0023ef 	bl	118f14 <memp_free>
}
  10ff54:	e24bd004 	sub	sp, fp, #4
  10ff58:	e8bd8800 	pop	{fp, pc}

0010ff5c <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
  10ff5c:	e92d4800 	push	{fp, lr}
  10ff60:	e28db004 	add	fp, sp, #4
  10ff64:	e24dd010 	sub	sp, sp, #16
  10ff68:	e50b0008 	str	r0, [fp, #-8]
  10ff6c:	e50b100c 	str	r1, [fp, #-12]
  10ff70:	e50b2010 	str	r2, [fp, #-16]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
  10ff74:	e51b3008 	ldr	r3, [fp, #-8]
  10ff78:	e3530000 	cmp	r3, #0
  10ff7c:	1a000008 	bne	10ffa4 <netbuf_data+0x48>
  10ff80:	e30601a0 	movw	r0, #24992	; 0x61a0
  10ff84:	e3400014 	movt	r0, #20
  10ff88:	ebffcc61 	bl	103114 <rt_kprintf>
  10ff8c:	e3a010c2 	mov	r1, #194	; 0xc2
  10ff90:	e30600c4 	movw	r0, #24772	; 0x60c4
  10ff94:	e3400014 	movt	r0, #20
  10ff98:	ebffeadd 	bl	10ab14 <sys_arch_assert>
  10ff9c:	e3e0300f 	mvn	r3, #15
  10ffa0:	ea000028 	b	110048 <netbuf_data+0xec>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
  10ffa4:	e51b300c 	ldr	r3, [fp, #-12]
  10ffa8:	e3530000 	cmp	r3, #0
  10ffac:	1a000008 	bne	10ffd4 <netbuf_data+0x78>
  10ffb0:	e30601bc 	movw	r0, #25020	; 0x61bc
  10ffb4:	e3400014 	movt	r0, #20
  10ffb8:	ebffcc55 	bl	103114 <rt_kprintf>
  10ffbc:	e3a010c3 	mov	r1, #195	; 0xc3
  10ffc0:	e30600c4 	movw	r0, #24772	; 0x60c4
  10ffc4:	e3400014 	movt	r0, #20
  10ffc8:	ebffead1 	bl	10ab14 <sys_arch_assert>
  10ffcc:	e3e0300f 	mvn	r3, #15
  10ffd0:	ea00001c 	b	110048 <netbuf_data+0xec>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
  10ffd4:	e51b3010 	ldr	r3, [fp, #-16]
  10ffd8:	e3530000 	cmp	r3, #0
  10ffdc:	1a000008 	bne	110004 <netbuf_data+0xa8>
  10ffe0:	e30601dc 	movw	r0, #25052	; 0x61dc
  10ffe4:	e3400014 	movt	r0, #20
  10ffe8:	ebffcc49 	bl	103114 <rt_kprintf>
  10ffec:	e3a010c4 	mov	r1, #196	; 0xc4
  10fff0:	e30600c4 	movw	r0, #24772	; 0x60c4
  10fff4:	e3400014 	movt	r0, #20
  10fff8:	ebffeac5 	bl	10ab14 <sys_arch_assert>
  10fffc:	e3e0300f 	mvn	r3, #15
  110000:	ea000010 	b	110048 <netbuf_data+0xec>

  if (buf->ptr == NULL) {
  110004:	e51b3008 	ldr	r3, [fp, #-8]
  110008:	e5933004 	ldr	r3, [r3, #4]
  11000c:	e3530000 	cmp	r3, #0
  110010:	1a000001 	bne	11001c <netbuf_data+0xc0>
    return ERR_BUF;
  110014:	e3e03001 	mvn	r3, #1
  110018:	ea00000a 	b	110048 <netbuf_data+0xec>
  }
  *dataptr = buf->ptr->payload;
  11001c:	e51b3008 	ldr	r3, [fp, #-8]
  110020:	e5933004 	ldr	r3, [r3, #4]
  110024:	e5932004 	ldr	r2, [r3, #4]
  110028:	e51b300c 	ldr	r3, [fp, #-12]
  11002c:	e5832000 	str	r2, [r3]
  *len = buf->ptr->len;
  110030:	e51b3008 	ldr	r3, [fp, #-8]
  110034:	e5933004 	ldr	r3, [r3, #4]
  110038:	e1d320ba 	ldrh	r2, [r3, #10]
  11003c:	e51b3010 	ldr	r3, [fp, #-16]
  110040:	e1c320b0 	strh	r2, [r3]
  return ERR_OK;
  110044:	e3a03000 	mov	r3, #0
}
  110048:	e1a00003 	mov	r0, r3
  11004c:	e24bd004 	sub	sp, fp, #4
  110050:	e8bd8800 	pop	{fp, pc}

00110054 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
  110054:	e92d4800 	push	{fp, lr}
  110058:	e28db004 	add	fp, sp, #4
  11005c:	e24dd008 	sub	sp, sp, #8
  110060:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
  110064:	e51b3008 	ldr	r3, [fp, #-8]
  110068:	e3530000 	cmp	r3, #0
  11006c:	1a000008 	bne	110094 <netbuf_next+0x40>
  110070:	e30601f8 	movw	r0, #25080	; 0x61f8
  110074:	e3400014 	movt	r0, #20
  110078:	ebffcc25 	bl	103114 <rt_kprintf>
  11007c:	e3a010dc 	mov	r1, #220	; 0xdc
  110080:	e30600c4 	movw	r0, #24772	; 0x60c4
  110084:	e3400014 	movt	r0, #20
  110088:	ebffeaa1 	bl	10ab14 <sys_arch_assert>
  11008c:	e3e03000 	mvn	r3, #0
  110090:	ea000013 	b	1100e4 <netbuf_next+0x90>
  if (buf->ptr->next == NULL) {
  110094:	e51b3008 	ldr	r3, [fp, #-8]
  110098:	e5933004 	ldr	r3, [r3, #4]
  11009c:	e5933000 	ldr	r3, [r3]
  1100a0:	e3530000 	cmp	r3, #0
  1100a4:	1a000001 	bne	1100b0 <netbuf_next+0x5c>
    return -1;
  1100a8:	e3e03000 	mvn	r3, #0
  1100ac:	ea00000c 	b	1100e4 <netbuf_next+0x90>
  }
  buf->ptr = buf->ptr->next;
  1100b0:	e51b3008 	ldr	r3, [fp, #-8]
  1100b4:	e5933004 	ldr	r3, [r3, #4]
  1100b8:	e5932000 	ldr	r2, [r3]
  1100bc:	e51b3008 	ldr	r3, [fp, #-8]
  1100c0:	e5832004 	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
  1100c4:	e51b3008 	ldr	r3, [fp, #-8]
  1100c8:	e5933004 	ldr	r3, [r3, #4]
  1100cc:	e5933000 	ldr	r3, [r3]
  1100d0:	e3530000 	cmp	r3, #0
  1100d4:	1a000001 	bne	1100e0 <netbuf_next+0x8c>
    return 1;
  1100d8:	e3a03001 	mov	r3, #1
  1100dc:	ea000000 	b	1100e4 <netbuf_next+0x90>
  }
  return 0;
  1100e0:	e3a03000 	mov	r3, #0
}
  1100e4:	e1a00003 	mov	r0, r3
  1100e8:	e24bd004 	sub	sp, fp, #4
  1100ec:	e8bd8800 	pop	{fp, pc}

001100f0 <netbuf_first>:
 *
 * @param buf the netbuf to modify
 */
void
netbuf_first(struct netbuf *buf)
{
  1100f0:	e92d4800 	push	{fp, lr}
  1100f4:	e28db004 	add	fp, sp, #4
  1100f8:	e24dd008 	sub	sp, sp, #8
  1100fc:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ERROR("netbuf_first: invalid buf", (buf != NULL), return;);
  110100:	e51b3008 	ldr	r3, [fp, #-8]
  110104:	e3530000 	cmp	r3, #0
  110108:	1a000007 	bne	11012c <netbuf_first+0x3c>
  11010c:	e3060214 	movw	r0, #25108	; 0x6214
  110110:	e3400014 	movt	r0, #20
  110114:	ebffcbfe 	bl	103114 <rt_kprintf>
  110118:	e3a010f2 	mov	r1, #242	; 0xf2
  11011c:	e30600c4 	movw	r0, #24772	; 0x60c4
  110120:	e3400014 	movt	r0, #20
  110124:	ebffea7a 	bl	10ab14 <sys_arch_assert>
  110128:	ea000003 	b	11013c <netbuf_first+0x4c>
  buf->ptr = buf->p;
  11012c:	e51b3008 	ldr	r3, [fp, #-8]
  110130:	e5932000 	ldr	r2, [r3]
  110134:	e51b3008 	ldr	r3, [fp, #-8]
  110138:	e5832004 	str	r2, [r3, #4]
}
  11013c:	e24bd004 	sub	sp, fp, #4
  110140:	e8bd8800 	pop	{fp, pc}

00110144 <lwip_gethostbyname>:
 * @return an entry containing addresses of address family AF_INET
 *         for the host with name name
 */
struct hostent*
lwip_gethostbyname(const char *name)
{
  110144:	e92d4800 	push	{fp, lr}
  110148:	e28db004 	add	fp, sp, #4
  11014c:	e24dd010 	sub	sp, sp, #16
  110150:	e50b0010 	str	r0, [fp, #-16]
  HOSTENT_STORAGE ip_addr_t s_hostent_addr;
  HOSTENT_STORAGE ip_addr_t *s_phostent_addr[2];
  HOSTENT_STORAGE char s_hostname[DNS_MAX_NAME_LENGTH + 1];

  /* query host IP address */
  err = netconn_gethostbyname(name, &addr);
  110154:	e24b300c 	sub	r3, fp, #12
  110158:	e1a01003 	mov	r1, r3
  11015c:	e51b0010 	ldr	r0, [fp, #-16]
  110160:	ebffef98 	bl	10bfc8 <netconn_gethostbyname>
  110164:	e1a03000 	mov	r3, r0
  110168:	e54b3005 	strb	r3, [fp, #-5]
  if (err != ERR_OK) {
  11016c:	e15b30d5 	ldrsb	r3, [fp, #-5]
  110170:	e3530000 	cmp	r3, #0
  110174:	0a000005 	beq	110190 <lwip_gethostbyname+0x4c>
    LWIP_DEBUGF(DNS_DEBUG, ("lwip_gethostbyname(%s) failed, err=%d\n", name, err));
    h_errno = HOST_NOT_FOUND;
  110178:	e30e3d00 	movw	r3, #60672	; 0xed00
  11017c:	e3403014 	movt	r3, #20
  110180:	e3a020d2 	mov	r2, #210	; 0xd2
  110184:	e5832000 	str	r2, [r3]
    return NULL;
  110188:	e3a03000 	mov	r3, #0
  11018c:	ea000032 	b	11025c <lwip_gethostbyname+0x118>
  }

  /* fill hostent */
  s_hostent_addr = addr;
  110190:	e30d3a4c 	movw	r3, #55884	; 0xda4c
  110194:	e3403014 	movt	r3, #20
  110198:	e51b200c 	ldr	r2, [fp, #-12]
  11019c:	e5832000 	str	r2, [r3]
  s_phostent_addr[0] = &s_hostent_addr;
  1101a0:	e30d3a50 	movw	r3, #55888	; 0xda50
  1101a4:	e3403014 	movt	r3, #20
  1101a8:	e30d2a4c 	movw	r2, #55884	; 0xda4c
  1101ac:	e3402014 	movt	r2, #20
  1101b0:	e5832000 	str	r2, [r3]
  s_phostent_addr[1] = NULL;
  1101b4:	e30d3a50 	movw	r3, #55888	; 0xda50
  1101b8:	e3403014 	movt	r3, #20
  1101bc:	e3a02000 	mov	r2, #0
  1101c0:	e5832004 	str	r2, [r3, #4]
  strncpy(s_hostname, name, DNS_MAX_NAME_LENGTH);
  1101c4:	e3a02c01 	mov	r2, #256	; 0x100
  1101c8:	e51b1010 	ldr	r1, [fp, #-16]
  1101cc:	e30d0a58 	movw	r0, #55896	; 0xda58
  1101d0:	e3400014 	movt	r0, #20
  1101d4:	eb00c2a6 	bl	140c74 <strncpy>
  s_hostname[DNS_MAX_NAME_LENGTH] = 0;
  1101d8:	e30d3a58 	movw	r3, #55896	; 0xda58
  1101dc:	e3403014 	movt	r3, #20
  1101e0:	e3a02000 	mov	r2, #0
  1101e4:	e5c32100 	strb	r2, [r3, #256]	; 0x100
  s_hostent.h_name = s_hostname;
  1101e8:	e30d3b5c 	movw	r3, #56156	; 0xdb5c
  1101ec:	e3403014 	movt	r3, #20
  1101f0:	e30d2a58 	movw	r2, #55896	; 0xda58
  1101f4:	e3402014 	movt	r2, #20
  1101f8:	e5832000 	str	r2, [r3]
  s_aliases = NULL;
  1101fc:	e30d3b70 	movw	r3, #56176	; 0xdb70
  110200:	e3403014 	movt	r3, #20
  110204:	e3a02000 	mov	r2, #0
  110208:	e5832000 	str	r2, [r3]
  s_hostent.h_aliases = &s_aliases;
  11020c:	e30d3b5c 	movw	r3, #56156	; 0xdb5c
  110210:	e3403014 	movt	r3, #20
  110214:	e30d2b70 	movw	r2, #56176	; 0xdb70
  110218:	e3402014 	movt	r2, #20
  11021c:	e5832004 	str	r2, [r3, #4]
  s_hostent.h_addrtype = AF_INET;
  110220:	e30d3b5c 	movw	r3, #56156	; 0xdb5c
  110224:	e3403014 	movt	r3, #20
  110228:	e3a02002 	mov	r2, #2
  11022c:	e5832008 	str	r2, [r3, #8]
  s_hostent.h_length = sizeof(ip_addr_t);
  110230:	e30d3b5c 	movw	r3, #56156	; 0xdb5c
  110234:	e3403014 	movt	r3, #20
  110238:	e3a02004 	mov	r2, #4
  11023c:	e583200c 	str	r2, [r3, #12]
  s_hostent.h_addr_list = (char**)&s_phostent_addr;
  110240:	e30d3b5c 	movw	r3, #56156	; 0xdb5c
  110244:	e3403014 	movt	r3, #20
  110248:	e30d2a50 	movw	r2, #55888	; 0xda50
  11024c:	e3402014 	movt	r2, #20
  110250:	e5832010 	str	r2, [r3, #16]

#if LWIP_DNS_API_HOSTENT_STORAGE
  /* this function should return the "per-thread" hostent after copy from s_hostent */
  return sys_thread_hostent(&s_hostent);
#else
  return &s_hostent;
  110254:	e30d3b5c 	movw	r3, #56156	; 0xdb5c
  110258:	e3403014 	movt	r3, #20
#endif /* LWIP_DNS_API_HOSTENT_STORAGE */
}
  11025c:	e1a00003 	mov	r0, r3
  110260:	e24bd004 	sub	sp, fp, #4
  110264:	e8bd8800 	pop	{fp, pc}

00110268 <lwip_gethostbyname_r>:
 *         is stored in *h_errnop instead of h_errno to be thread-safe
 */
int
lwip_gethostbyname_r(const char *name, struct hostent *ret, char *buf,
                size_t buflen, struct hostent **result, int *h_errnop)
{
  110268:	e92d4800 	push	{fp, lr}
  11026c:	e28db004 	add	fp, sp, #4
  110270:	e24dd028 	sub	sp, sp, #40	; 0x28
  110274:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  110278:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  11027c:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  110280:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  struct gethostbyname_r_helper *h;
  char *hostname;
  size_t namelen;
  int lh_errno;

  if (h_errnop == NULL) {
  110284:	e59b3008 	ldr	r3, [fp, #8]
  110288:	e3530000 	cmp	r3, #0
  11028c:	1a000001 	bne	110298 <lwip_gethostbyname_r+0x30>
    /* ensure h_errnop is never NULL */
    h_errnop = &lh_errno;
  110290:	e24b3018 	sub	r3, fp, #24
  110294:	e58b3008 	str	r3, [fp, #8]
  }

  if (result == NULL) {
  110298:	e59b3004 	ldr	r3, [fp, #4]
  11029c:	e3530000 	cmp	r3, #0
  1102a0:	1a000004 	bne	1102b8 <lwip_gethostbyname_r+0x50>
    /* not all arguments given */
    *h_errnop = EINVAL;
  1102a4:	e59b3008 	ldr	r3, [fp, #8]
  1102a8:	e3a02016 	mov	r2, #22
  1102ac:	e5832000 	str	r2, [r3]
    return -1;
  1102b0:	e3e03000 	mvn	r3, #0
  1102b4:	ea00005a 	b	110424 <lwip_gethostbyname_r+0x1bc>
  }
  /* first thing to do: set *result to nothing */
  *result = NULL;
  1102b8:	e59b3004 	ldr	r3, [fp, #4]
  1102bc:	e3a02000 	mov	r2, #0
  1102c0:	e5832000 	str	r2, [r3]
  if ((name == NULL) || (ret == NULL) || (buf == NULL)) {
  1102c4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1102c8:	e3530000 	cmp	r3, #0
  1102cc:	0a000005 	beq	1102e8 <lwip_gethostbyname_r+0x80>
  1102d0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1102d4:	e3530000 	cmp	r3, #0
  1102d8:	0a000002 	beq	1102e8 <lwip_gethostbyname_r+0x80>
  1102dc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1102e0:	e3530000 	cmp	r3, #0
  1102e4:	1a000004 	bne	1102fc <lwip_gethostbyname_r+0x94>
    /* not all arguments given */
    *h_errnop = EINVAL;
  1102e8:	e59b3008 	ldr	r3, [fp, #8]
  1102ec:	e3a02016 	mov	r2, #22
  1102f0:	e5832000 	str	r2, [r3]
    return -1;
  1102f4:	e3e03000 	mvn	r3, #0
  1102f8:	ea000049 	b	110424 <lwip_gethostbyname_r+0x1bc>
  }

  namelen = strlen(name);
  1102fc:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  110300:	eb00c20a 	bl	140b30 <strlen>
  110304:	e50b0008 	str	r0, [fp, #-8]
  if (buflen < (sizeof(struct gethostbyname_r_helper) + namelen + 1 + (MEM_ALIGNMENT - 1))) {
  110308:	e51b3008 	ldr	r3, [fp, #-8]
  11030c:	e2833014 	add	r3, r3, #20
  110310:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  110314:	e1520003 	cmp	r2, r3
  110318:	2a000004 	bcs	110330 <lwip_gethostbyname_r+0xc8>
    /* buf can't hold the data needed + a copy of name */
    *h_errnop = ERANGE;
  11031c:	e59b3008 	ldr	r3, [fp, #8]
  110320:	e3a02022 	mov	r2, #34	; 0x22
  110324:	e5832000 	str	r2, [r3]
    return -1;
  110328:	e3e03000 	mvn	r3, #0
  11032c:	ea00003c 	b	110424 <lwip_gethostbyname_r+0x1bc>
  }

  h = (struct gethostbyname_r_helper*)LWIP_MEM_ALIGN(buf);
  110330:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  110334:	e2833003 	add	r3, r3, #3
  110338:	e3c33003 	bic	r3, r3, #3
  11033c:	e50b300c 	str	r3, [fp, #-12]
  hostname = ((char*)h) + sizeof(struct gethostbyname_r_helper);
  110340:	e51b300c 	ldr	r3, [fp, #-12]
  110344:	e2833010 	add	r3, r3, #16
  110348:	e50b3010 	str	r3, [fp, #-16]

  /* query host IP address */
  err = netconn_gethostbyname(name, &h->addr);
  11034c:	e51b300c 	ldr	r3, [fp, #-12]
  110350:	e2833008 	add	r3, r3, #8
  110354:	e1a01003 	mov	r1, r3
  110358:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  11035c:	ebffef19 	bl	10bfc8 <netconn_gethostbyname>
  110360:	e1a03000 	mov	r3, r0
  110364:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  if (err != ERR_OK) {
  110368:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  11036c:	e3530000 	cmp	r3, #0
  110370:	0a000004 	beq	110388 <lwip_gethostbyname_r+0x120>
    LWIP_DEBUGF(DNS_DEBUG, ("lwip_gethostbyname(%s) failed, err=%d\n", name, err));
    *h_errnop = HOST_NOT_FOUND;
  110374:	e59b3008 	ldr	r3, [fp, #8]
  110378:	e3a020d2 	mov	r2, #210	; 0xd2
  11037c:	e5832000 	str	r2, [r3]
    return -1;
  110380:	e3e03000 	mvn	r3, #0
  110384:	ea000026 	b	110424 <lwip_gethostbyname_r+0x1bc>
  }

  /* copy the hostname into buf */
  MEMCPY(hostname, name, namelen);
  110388:	e51b2008 	ldr	r2, [fp, #-8]
  11038c:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  110390:	e51b0010 	ldr	r0, [fp, #-16]
  110394:	eb00c01c 	bl	14040c <memcpy>
  hostname[namelen] = 0;
  110398:	e51b2010 	ldr	r2, [fp, #-16]
  11039c:	e51b3008 	ldr	r3, [fp, #-8]
  1103a0:	e0823003 	add	r3, r2, r3
  1103a4:	e3a02000 	mov	r2, #0
  1103a8:	e5c32000 	strb	r2, [r3]

  /* fill hostent */
  h->addr_list[0] = &h->addr;
  1103ac:	e51b300c 	ldr	r3, [fp, #-12]
  1103b0:	e2832008 	add	r2, r3, #8
  1103b4:	e51b300c 	ldr	r3, [fp, #-12]
  1103b8:	e5832000 	str	r2, [r3]
  h->addr_list[1] = NULL;
  1103bc:	e51b300c 	ldr	r3, [fp, #-12]
  1103c0:	e3a02000 	mov	r2, #0
  1103c4:	e5832004 	str	r2, [r3, #4]
  h->aliases = NULL;
  1103c8:	e51b300c 	ldr	r3, [fp, #-12]
  1103cc:	e3a02000 	mov	r2, #0
  1103d0:	e583200c 	str	r2, [r3, #12]
  ret->h_name = hostname;
  1103d4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1103d8:	e51b2010 	ldr	r2, [fp, #-16]
  1103dc:	e5832000 	str	r2, [r3]
  ret->h_aliases = &h->aliases;
  1103e0:	e51b300c 	ldr	r3, [fp, #-12]
  1103e4:	e283200c 	add	r2, r3, #12
  1103e8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1103ec:	e5832004 	str	r2, [r3, #4]
  ret->h_addrtype = AF_INET;
  1103f0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1103f4:	e3a02002 	mov	r2, #2
  1103f8:	e5832008 	str	r2, [r3, #8]
  ret->h_length = sizeof(ip_addr_t);
  1103fc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  110400:	e3a02004 	mov	r2, #4
  110404:	e583200c 	str	r2, [r3, #12]
  ret->h_addr_list = (char**)&h->addr_list;
  110408:	e51b200c 	ldr	r2, [fp, #-12]
  11040c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  110410:	e5832010 	str	r2, [r3, #16]

  /* set result != NULL */
  *result = ret;
  110414:	e59b3004 	ldr	r3, [fp, #4]
  110418:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  11041c:	e5832000 	str	r2, [r3]

  /* return success */
  return 0;
  110420:	e3a03000 	mov	r3, #0
}
  110424:	e1a00003 	mov	r0, r3
  110428:	e24bd004 	sub	sp, fp, #4
  11042c:	e8bd8800 	pop	{fp, pc}

00110430 <lwip_freeaddrinfo>:
 *
 * @param ai struct addrinfo to free
 */
void
lwip_freeaddrinfo(struct addrinfo *ai)
{
  110430:	e92d4800 	push	{fp, lr}
  110434:	e28db004 	add	fp, sp, #4
  110438:	e24dd010 	sub	sp, sp, #16
  11043c:	e50b0010 	str	r0, [fp, #-16]
  struct addrinfo *next;

  while (ai != NULL) {
  110440:	ea000007 	b	110464 <lwip_freeaddrinfo+0x34>
    next = ai->ai_next;
  110444:	e51b3010 	ldr	r3, [fp, #-16]
  110448:	e593301c 	ldr	r3, [r3, #28]
  11044c:	e50b3008 	str	r3, [fp, #-8]
    memp_free(MEMP_NETDB, ai);
  110450:	e51b1010 	ldr	r1, [fp, #-16]
  110454:	e3a0000e 	mov	r0, #14
  110458:	eb0022ad 	bl	118f14 <memp_free>
    ai = next;
  11045c:	e51b3008 	ldr	r3, [fp, #-8]
  110460:	e50b3010 	str	r3, [fp, #-16]
  while (ai != NULL) {
  110464:	e51b3010 	ldr	r3, [fp, #-16]
  110468:	e3530000 	cmp	r3, #0
  11046c:	1afffff4 	bne	110444 <lwip_freeaddrinfo+0x14>
  }
}
  110470:	e320f000 	nop	{0}
  110474:	e24bd004 	sub	sp, fp, #4
  110478:	e8bd8800 	pop	{fp, pc}

0011047c <lwip_getaddrinfo>:
 * @todo: implement AI_V4MAPPED, AI_ADDRCONFIG
 */
int
lwip_getaddrinfo(const char *nodename, const char *servname,
       const struct addrinfo *hints, struct addrinfo **res)
{
  11047c:	e92d4800 	push	{fp, lr}
  110480:	e28db004 	add	fp, sp, #4
  110484:	e24dd038 	sub	sp, sp, #56	; 0x38
  110488:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  11048c:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  110490:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
  110494:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  err_t err;
  ip_addr_t addr;
  struct addrinfo *ai;
  struct sockaddr_storage *sa = NULL;
  110498:	e3a03000 	mov	r3, #0
  11049c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  int port_nr = 0;
  1104a0:	e3a03000 	mov	r3, #0
  1104a4:	e50b3008 	str	r3, [fp, #-8]
  size_t total_size;
  size_t namelen = 0;
  1104a8:	e3a03000 	mov	r3, #0
  1104ac:	e50b3010 	str	r3, [fp, #-16]
  int ai_family;

  if (res == NULL) {
  1104b0:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  1104b4:	e3530000 	cmp	r3, #0
  1104b8:	1a000001 	bne	1104c4 <lwip_getaddrinfo+0x48>
    return EAI_FAIL;
  1104bc:	e3a030ca 	mov	r3, #202	; 0xca
  1104c0:	ea0000d0 	b	110808 <lwip_getaddrinfo+0x38c>
  }
  *res = NULL;
  1104c4:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  1104c8:	e3a02000 	mov	r2, #0
  1104cc:	e5832000 	str	r2, [r3]
  if ((nodename == NULL) && (servname == NULL)) {
  1104d0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1104d4:	e3530000 	cmp	r3, #0
  1104d8:	1a000004 	bne	1104f0 <lwip_getaddrinfo+0x74>
  1104dc:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  1104e0:	e3530000 	cmp	r3, #0
  1104e4:	1a000001 	bne	1104f0 <lwip_getaddrinfo+0x74>
    return EAI_NONAME;
  1104e8:	e3a030c8 	mov	r3, #200	; 0xc8
  1104ec:	ea0000c5 	b	110808 <lwip_getaddrinfo+0x38c>
  }

  if (hints != NULL) {
  1104f0:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1104f4:	e3530000 	cmp	r3, #0
  1104f8:	0a00000a 	beq	110528 <lwip_getaddrinfo+0xac>
    ai_family = hints->ai_family;
  1104fc:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110500:	e5933004 	ldr	r3, [r3, #4]
  110504:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    if ((ai_family != AF_UNSPEC)
  110508:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11050c:	e3530000 	cmp	r3, #0
  110510:	0a000006 	beq	110530 <lwip_getaddrinfo+0xb4>
#if LWIP_IPV4
      && (ai_family != AF_INET)
  110514:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  110518:	e3530002 	cmp	r3, #2
  11051c:	0a000003 	beq	110530 <lwip_getaddrinfo+0xb4>
#endif /* LWIP_IPV4 */
#if LWIP_IPV6
      && (ai_family != AF_INET6)
#endif /* LWIP_IPV6 */
      ) {
      return EAI_FAMILY;
  110520:	e3a030cc 	mov	r3, #204	; 0xcc
  110524:	ea0000b7 	b	110808 <lwip_getaddrinfo+0x38c>
    }
  } else {
    ai_family = AF_UNSPEC;
  110528:	e3a03000 	mov	r3, #0
  11052c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  }

  if (servname != NULL) {
  110530:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  110534:	e3530000 	cmp	r3, #0
  110538:	0a00000a 	beq	110568 <lwip_getaddrinfo+0xec>
    /* service name specified: convert to port number
     * @todo?: currently, only ASCII integers (port numbers) are supported (AI_NUMERICSERV)! */
    port_nr = atoi(servname);
  11053c:	e51b0034 	ldr	r0, [fp, #-52]	; 0xffffffcc
  110540:	eb00bf85 	bl	14035c <atoi>
  110544:	e50b0008 	str	r0, [fp, #-8]
    if ((port_nr <= 0) || (port_nr > 0xffff)) {
  110548:	e51b3008 	ldr	r3, [fp, #-8]
  11054c:	e3530000 	cmp	r3, #0
  110550:	da000002 	ble	110560 <lwip_getaddrinfo+0xe4>
  110554:	e51b3008 	ldr	r3, [fp, #-8]
  110558:	e3530801 	cmp	r3, #65536	; 0x10000
  11055c:	ba000001 	blt	110568 <lwip_getaddrinfo+0xec>
      return EAI_SERVICE;
  110560:	e3a030c9 	mov	r3, #201	; 0xc9
  110564:	ea0000a7 	b	110808 <lwip_getaddrinfo+0x38c>
    }
  }

  if (nodename != NULL) {
  110568:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  11056c:	e3530000 	cmp	r3, #0
  110570:	0a00001b 	beq	1105e4 <lwip_getaddrinfo+0x168>
    /* service location specified, try to resolve */
    if ((hints != NULL) && (hints->ai_flags & AI_NUMERICHOST)) {
  110574:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110578:	e3530000 	cmp	r3, #0
  11057c:	0a00000d 	beq	1105b8 <lwip_getaddrinfo+0x13c>
  110580:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110584:	e5933000 	ldr	r3, [r3]
  110588:	e2033004 	and	r3, r3, #4
  11058c:	e3530000 	cmp	r3, #0
  110590:	0a000008 	beq	1105b8 <lwip_getaddrinfo+0x13c>
      /* no DNS lookup, just parse for an address string */
      if (!ipaddr_aton(nodename, &addr)) {
  110594:	e24b3028 	sub	r3, fp, #40	; 0x28
  110598:	e1a01003 	mov	r1, r3
  11059c:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  1105a0:	eb00873a 	bl	132290 <ip4addr_aton>
  1105a4:	e1a03000 	mov	r3, r0
  1105a8:	e3530000 	cmp	r3, #0
  1105ac:	1a00001a 	bne	11061c <lwip_getaddrinfo+0x1a0>
        return EAI_NONAME;
  1105b0:	e3a030c8 	mov	r3, #200	; 0xc8
  1105b4:	ea000093 	b	110808 <lwip_getaddrinfo+0x38c>
        type = NETCONN_DNS_IPV4;
      } else if (ai_family == AF_INET6) {
        type = NETCONN_DNS_IPV6;
      }
#endif /* LWIP_IPV4 && LWIP_IPV6 */
      err = netconn_gethostbyname_addrtype(nodename, &addr, type);
  1105b8:	e24b3028 	sub	r3, fp, #40	; 0x28
  1105bc:	e1a01003 	mov	r1, r3
  1105c0:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  1105c4:	ebffee7f 	bl	10bfc8 <netconn_gethostbyname>
  1105c8:	e1a03000 	mov	r3, r0
  1105cc:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
      if (err != ERR_OK) {
  1105d0:	e15b31d9 	ldrsb	r3, [fp, #-25]	; 0xffffffe7
  1105d4:	e3530000 	cmp	r3, #0
  1105d8:	0a00000f 	beq	11061c <lwip_getaddrinfo+0x1a0>
        return EAI_FAIL;
  1105dc:	e3a030ca 	mov	r3, #202	; 0xca
  1105e0:	ea000088 	b	110808 <lwip_getaddrinfo+0x38c>
      }
    }
  } else {
    /* service location specified, use loopback address */
    if ((hints != NULL) && (hints->ai_flags & AI_PASSIVE)) {
  1105e4:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1105e8:	e3530000 	cmp	r3, #0
  1105ec:	0a000007 	beq	110610 <lwip_getaddrinfo+0x194>
  1105f0:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1105f4:	e5933000 	ldr	r3, [r3]
  1105f8:	e2033001 	and	r3, r3, #1
  1105fc:	e3530000 	cmp	r3, #0
  110600:	0a000002 	beq	110610 <lwip_getaddrinfo+0x194>
      ip_addr_set_any(ai_family == AF_INET6, &addr);
  110604:	e3a03000 	mov	r3, #0
  110608:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  11060c:	ea000002 	b	11061c <lwip_getaddrinfo+0x1a0>
    } else {
      ip_addr_set_loopback(ai_family == AF_INET6, &addr);
  110610:	e3a0307f 	mov	r3, #127	; 0x7f
  110614:	e3403100 	movt	r3, #256	; 0x100
  110618:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
    }
  }

  total_size = sizeof(struct addrinfo) + sizeof(struct sockaddr_storage);
  11061c:	e3a03030 	mov	r3, #48	; 0x30
  110620:	e50b300c 	str	r3, [fp, #-12]
  if (nodename != NULL) {
  110624:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  110628:	e3530000 	cmp	r3, #0
  11062c:	0a00001a 	beq	11069c <lwip_getaddrinfo+0x220>
    namelen = strlen(nodename);
  110630:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  110634:	eb00c13d 	bl	140b30 <strlen>
  110638:	e50b0010 	str	r0, [fp, #-16]
    if (namelen > DNS_MAX_NAME_LENGTH) {
  11063c:	e51b3010 	ldr	r3, [fp, #-16]
  110640:	e3530c01 	cmp	r3, #256	; 0x100
  110644:	9a000001 	bls	110650 <lwip_getaddrinfo+0x1d4>
      /* invalid name length */
      return EAI_FAIL;
  110648:	e3a030ca 	mov	r3, #202	; 0xca
  11064c:	ea00006d 	b	110808 <lwip_getaddrinfo+0x38c>
    }
    LWIP_ASSERT("namelen is too long", total_size + namelen + 1 > total_size);
  110650:	e51b200c 	ldr	r2, [fp, #-12]
  110654:	e51b3010 	ldr	r3, [fp, #-16]
  110658:	e0823003 	add	r3, r2, r3
  11065c:	e2833001 	add	r3, r3, #1
  110660:	e51b200c 	ldr	r2, [fp, #-12]
  110664:	e1520003 	cmp	r2, r3
  110668:	3a000006 	bcc	110688 <lwip_getaddrinfo+0x20c>
  11066c:	e3060230 	movw	r0, #25136	; 0x6230
  110670:	e3400014 	movt	r0, #20
  110674:	ebffcaa6 	bl	103114 <rt_kprintf>
  110678:	e3001166 	movw	r1, #358	; 0x166
  11067c:	e3060244 	movw	r0, #25156	; 0x6244
  110680:	e3400014 	movt	r0, #20
  110684:	ebffe922 	bl	10ab14 <sys_arch_assert>
    total_size += namelen + 1;
  110688:	e51b2010 	ldr	r2, [fp, #-16]
  11068c:	e51b300c 	ldr	r3, [fp, #-12]
  110690:	e0823003 	add	r3, r2, r3
  110694:	e2833001 	add	r3, r3, #1
  110698:	e50b300c 	str	r3, [fp, #-12]
  }
  /* If this fails, please report to lwip-devel! :-) */
  LWIP_ASSERT("total_size <= NETDB_ELEM_SIZE: please report this!",
  11069c:	e51b300c 	ldr	r3, [fp, #-12]
  1106a0:	e3002131 	movw	r2, #305	; 0x131
  1106a4:	e1530002 	cmp	r3, r2
  1106a8:	9a000006 	bls	1106c8 <lwip_getaddrinfo+0x24c>
  1106ac:	e3060270 	movw	r0, #25200	; 0x6270
  1106b0:	e3400014 	movt	r0, #20
  1106b4:	ebffca96 	bl	103114 <rt_kprintf>
  1106b8:	e300116b 	movw	r1, #363	; 0x16b
  1106bc:	e3060244 	movw	r0, #25156	; 0x6244
  1106c0:	e3400014 	movt	r0, #20
  1106c4:	ebffe912 	bl	10ab14 <sys_arch_assert>
    total_size <= NETDB_ELEM_SIZE);
  ai = (struct addrinfo *)memp_malloc(MEMP_NETDB);
  1106c8:	e3a02f5b 	mov	r2, #364	; 0x16c
  1106cc:	e3061244 	movw	r1, #25156	; 0x6244
  1106d0:	e3401014 	movt	r1, #20
  1106d4:	e3a0000e 	mov	r0, #14
  1106d8:	eb0021a5 	bl	118d74 <memp_malloc_fn>
  1106dc:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  if (ai == NULL) {
  1106e0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1106e4:	e3530000 	cmp	r3, #0
  1106e8:	1a000001 	bne	1106f4 <lwip_getaddrinfo+0x278>
    return EAI_MEMORY;
  1106ec:	e3a030cb 	mov	r3, #203	; 0xcb
  1106f0:	ea000044 	b	110808 <lwip_getaddrinfo+0x38c>
  }
  memset(ai, 0, total_size);
  1106f4:	e51b200c 	ldr	r2, [fp, #-12]
  1106f8:	e3a01000 	mov	r1, #0
  1106fc:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  110700:	eb00c079 	bl	1408ec <memset>
  /* cast through void* to get rid of alignment warnings */
  sa = (struct sockaddr_storage *)(void*)((u8_t*)ai + sizeof(struct addrinfo));
  110704:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110708:	e2833020 	add	r3, r3, #32
  11070c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    sa6->sin6_port = lwip_htons((u16_t)port_nr);
    ai->ai_family = AF_INET6;
#endif /* LWIP_IPV6 */
  } else {
#if LWIP_IPV4
    struct sockaddr_in *sa4 = (struct sockaddr_in*)sa;
  110710:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  110714:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    /* set up sockaddr */
    inet_addr_from_ip4addr(&sa4->sin_addr, ip_2_ip4(&addr));
  110718:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11071c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  110720:	e5832004 	str	r2, [r3, #4]
    sa4->sin_family = AF_INET;
  110724:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  110728:	e3a02002 	mov	r2, #2
  11072c:	e5c32001 	strb	r2, [r3, #1]
    sa4->sin_len = sizeof(struct sockaddr_in);
  110730:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  110734:	e3a02010 	mov	r2, #16
  110738:	e5c32000 	strb	r2, [r3]
    sa4->sin_port = lwip_htons((u16_t)port_nr);
  11073c:	e51b3008 	ldr	r3, [fp, #-8]
  110740:	e6ff3073 	uxth	r3, r3
  110744:	e1a00003 	mov	r0, r3
  110748:	eb0016c8 	bl	116270 <lwip_htons>
  11074c:	e1a03000 	mov	r3, r0
  110750:	e1a02003 	mov	r2, r3
  110754:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  110758:	e1c320b2 	strh	r2, [r3, #2]
    ai->ai_family = AF_INET;
  11075c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110760:	e3a02002 	mov	r2, #2
  110764:	e5832004 	str	r2, [r3, #4]
#endif /* LWIP_IPV4 */
  }

  /* set up addrinfo */
  if (hints != NULL) {
  110768:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  11076c:	e3530000 	cmp	r3, #0
  110770:	0a000007 	beq	110794 <lwip_getaddrinfo+0x318>
    /* copy socktype & protocol from hints if specified */
    ai->ai_socktype = hints->ai_socktype;
  110774:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110778:	e5932008 	ldr	r2, [r3, #8]
  11077c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110780:	e5832008 	str	r2, [r3, #8]
    ai->ai_protocol = hints->ai_protocol;
  110784:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110788:	e593200c 	ldr	r2, [r3, #12]
  11078c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110790:	e583200c 	str	r2, [r3, #12]
  }
  if (nodename != NULL) {
  110794:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  110798:	e3530000 	cmp	r3, #0
  11079c:	0a00000f 	beq	1107e0 <lwip_getaddrinfo+0x364>
    /* copy nodename to canonname if specified */
    ai->ai_canonname = ((char*)ai + sizeof(struct addrinfo) + sizeof(struct sockaddr_storage));
  1107a0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1107a4:	e2832030 	add	r2, r3, #48	; 0x30
  1107a8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1107ac:	e5832018 	str	r2, [r3, #24]
    MEMCPY(ai->ai_canonname, nodename, namelen);
  1107b0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1107b4:	e5933018 	ldr	r3, [r3, #24]
  1107b8:	e51b2010 	ldr	r2, [fp, #-16]
  1107bc:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
  1107c0:	e1a00003 	mov	r0, r3
  1107c4:	eb00bf10 	bl	14040c <memcpy>
    ai->ai_canonname[namelen] = 0;
  1107c8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1107cc:	e5932018 	ldr	r2, [r3, #24]
  1107d0:	e51b3010 	ldr	r3, [fp, #-16]
  1107d4:	e0823003 	add	r3, r2, r3
  1107d8:	e3a02000 	mov	r2, #0
  1107dc:	e5c32000 	strb	r2, [r3]
  }
  ai->ai_addrlen = sizeof(struct sockaddr_storage);
  1107e0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1107e4:	e3a02010 	mov	r2, #16
  1107e8:	e5832010 	str	r2, [r3, #16]
  ai->ai_addr = (struct sockaddr*)sa;
  1107ec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1107f0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1107f4:	e5832014 	str	r2, [r3, #20]

  *res = ai;
  1107f8:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  1107fc:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  110800:	e5832000 	str	r2, [r3]

  return 0;
  110804:	e3a03000 	mov	r3, #0
}
  110808:	e1a00003 	mov	r0, r3
  11080c:	e24bd004 	sub	sp, fp, #4
  110810:	e8bd8800 	pop	{fp, pc}

00110814 <netifapi_do_netif_add>:
/**
 * Call netif_add() inside the tcpip_thread context.
 */
static err_t
netifapi_do_netif_add(struct tcpip_api_call_data *m)
{
  110814:	e92d4810 	push	{r4, fp, lr}
  110818:	e28db008 	add	fp, sp, #8
  11081c:	e24dd024 	sub	sp, sp, #36	; 0x24
  110820:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  /* cast through void* to silence alignment warnings. 
   * We know it works because the structs have been instantiated as struct netifapi_msg */
  struct netifapi_msg *msg = (struct netifapi_msg*)(void*)m;
  110824:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  110828:	e50b3010 	str	r3, [fp, #-16]
  if (!netif_add( msg->netif,
  11082c:	e51b3010 	ldr	r3, [fp, #-16]
  110830:	e5930004 	ldr	r0, [r3, #4]
  110834:	e51b3010 	ldr	r3, [fp, #-16]
  110838:	e593c008 	ldr	ip, [r3, #8]
  11083c:	e51b3010 	ldr	r3, [fp, #-16]
  110840:	e593e00c 	ldr	lr, [r3, #12]
  110844:	e51b3010 	ldr	r3, [fp, #-16]
  110848:	e5934010 	ldr	r4, [r3, #16]
  11084c:	e51b3010 	ldr	r3, [fp, #-16]
  110850:	e5933014 	ldr	r3, [r3, #20]
  110854:	e51b2010 	ldr	r2, [fp, #-16]
  110858:	e5922018 	ldr	r2, [r2, #24]
  11085c:	e51b1010 	ldr	r1, [fp, #-16]
  110860:	e591101c 	ldr	r1, [r1, #28]
  110864:	e58d1008 	str	r1, [sp, #8]
  110868:	e58d2004 	str	r2, [sp, #4]
  11086c:	e58d3000 	str	r3, [sp]
  110870:	e1a03004 	mov	r3, r4
  110874:	e1a0200e 	mov	r2, lr
  110878:	e1a0100c 	mov	r1, ip
  11087c:	eb0021de 	bl	118ffc <netif_add>
  110880:	e1a03000 	mov	r3, r0
  110884:	e3530000 	cmp	r3, #0
  110888:	1a000001 	bne	110894 <netifapi_do_netif_add+0x80>
                  API_EXPR_REF(msg->msg.add.gw),
#endif /* LWIP_IPV4 */
                  msg->msg.add.state,
                  msg->msg.add.init,
                  msg->msg.add.input)) {
    return ERR_IF;
  11088c:	e3e0300b 	mvn	r3, #11
  110890:	ea000000 	b	110898 <netifapi_do_netif_add+0x84>
  } else {
    return ERR_OK;
  110894:	e3a03000 	mov	r3, #0
  }
}
  110898:	e1a00003 	mov	r0, r3
  11089c:	e24bd008 	sub	sp, fp, #8
  1108a0:	e8bd8810 	pop	{r4, fp, pc}

001108a4 <netifapi_do_netif_set_addr>:
/**
 * Call netif_set_addr() inside the tcpip_thread context.
 */
static err_t
netifapi_do_netif_set_addr(struct tcpip_api_call_data *m)
{
  1108a4:	e92d4800 	push	{fp, lr}
  1108a8:	e28db004 	add	fp, sp, #4
  1108ac:	e24dd010 	sub	sp, sp, #16
  1108b0:	e50b0010 	str	r0, [fp, #-16]
  /* cast through void* to silence alignment warnings. 
   * We know it works because the structs have been instantiated as struct netifapi_msg */
  struct netifapi_msg *msg = (struct netifapi_msg*)(void*)m;
  1108b4:	e51b3010 	ldr	r3, [fp, #-16]
  1108b8:	e50b3008 	str	r3, [fp, #-8]

  netif_set_addr( msg->netif,
  1108bc:	e51b3008 	ldr	r3, [fp, #-8]
  1108c0:	e5930004 	ldr	r0, [r3, #4]
  1108c4:	e51b3008 	ldr	r3, [fp, #-8]
  1108c8:	e5931008 	ldr	r1, [r3, #8]
  1108cc:	e51b3008 	ldr	r3, [fp, #-8]
  1108d0:	e593200c 	ldr	r2, [r3, #12]
  1108d4:	e51b3008 	ldr	r3, [fp, #-8]
  1108d8:	e5933010 	ldr	r3, [r3, #16]
  1108dc:	eb00222c 	bl	119194 <netif_set_addr>
                  API_EXPR_REF(msg->msg.add.ipaddr),
                  API_EXPR_REF(msg->msg.add.netmask),
                  API_EXPR_REF(msg->msg.add.gw));
  return ERR_OK;
  1108e0:	e3a03000 	mov	r3, #0
}
  1108e4:	e1a00003 	mov	r0, r3
  1108e8:	e24bd004 	sub	sp, fp, #4
  1108ec:	e8bd8800 	pop	{fp, pc}

001108f0 <netifapi_do_netif_common>:
 * Call the "errtfunc" (or the "voidfunc" if "errtfunc" is NULL) inside the
 * tcpip_thread context.
 */
static err_t
netifapi_do_netif_common(struct tcpip_api_call_data *m)
{
  1108f0:	e92d4800 	push	{fp, lr}
  1108f4:	e28db004 	add	fp, sp, #4
  1108f8:	e24dd010 	sub	sp, sp, #16
  1108fc:	e50b0010 	str	r0, [fp, #-16]
  /* cast through void* to silence alignment warnings. 
   * We know it works because the structs have been instantiated as struct netifapi_msg */
  struct netifapi_msg *msg = (struct netifapi_msg*)(void*)m;
  110900:	e51b3010 	ldr	r3, [fp, #-16]
  110904:	e50b3008 	str	r3, [fp, #-8]

  if (msg->msg.common.errtfunc != NULL) {
  110908:	e51b3008 	ldr	r3, [fp, #-8]
  11090c:	e593300c 	ldr	r3, [r3, #12]
  110910:	e3530000 	cmp	r3, #0
  110914:	0a000007 	beq	110938 <netifapi_do_netif_common+0x48>
    return msg->msg.common.errtfunc(msg->netif);
  110918:	e51b3008 	ldr	r3, [fp, #-8]
  11091c:	e593300c 	ldr	r3, [r3, #12]
  110920:	e51b2008 	ldr	r2, [fp, #-8]
  110924:	e5922004 	ldr	r2, [r2, #4]
  110928:	e1a00002 	mov	r0, r2
  11092c:	e12fff33 	blx	r3
  110930:	e1a03000 	mov	r3, r0
  110934:	ea000006 	b	110954 <netifapi_do_netif_common+0x64>
  } else {
    msg->msg.common.voidfunc(msg->netif);
  110938:	e51b3008 	ldr	r3, [fp, #-8]
  11093c:	e5933008 	ldr	r3, [r3, #8]
  110940:	e51b2008 	ldr	r2, [fp, #-8]
  110944:	e5922004 	ldr	r2, [r2, #4]
  110948:	e1a00002 	mov	r0, r2
  11094c:	e12fff33 	blx	r3
    return ERR_OK;
  110950:	e3a03000 	mov	r3, #0
  }
}
  110954:	e1a00003 	mov	r0, r3
  110958:	e24bd004 	sub	sp, fp, #4
  11095c:	e8bd8800 	pop	{fp, pc}

00110960 <netifapi_netif_add>:
netifapi_netif_add(struct netif *netif,
#if LWIP_IPV4
                   const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
                   void *state, netif_init_fn init, netif_input_fn input)
{
  110960:	e92d4800 	push	{fp, lr}
  110964:	e28db004 	add	fp, sp, #4
  110968:	e24dd038 	sub	sp, sp, #56	; 0x38
  11096c:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  110970:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  110974:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
  110978:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  err_t err;
  NETIFAPI_VAR_DECLARE(msg);
  NETIFAPI_VAR_ALLOC(msg);

#if LWIP_IPV4
  if (ipaddr == NULL) {
  11097c:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  110980:	e3530000 	cmp	r3, #0
  110984:	1a000002 	bne	110994 <netifapi_netif_add+0x34>
    ipaddr = IP4_ADDR_ANY4;
  110988:	e3083e3c 	movw	r3, #36412	; 0x8e3c
  11098c:	e3403014 	movt	r3, #20
  110990:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
  }
  if (netmask == NULL) {
  110994:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110998:	e3530000 	cmp	r3, #0
  11099c:	1a000002 	bne	1109ac <netifapi_netif_add+0x4c>
    netmask = IP4_ADDR_ANY4;
  1109a0:	e3083e3c 	movw	r3, #36412	; 0x8e3c
  1109a4:	e3403014 	movt	r3, #20
  1109a8:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
  }
  if (gw == NULL) {
  1109ac:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  1109b0:	e3530000 	cmp	r3, #0
  1109b4:	1a000002 	bne	1109c4 <netifapi_netif_add+0x64>
    gw = IP4_ADDR_ANY4;
  1109b8:	e3083e3c 	movw	r3, #36412	; 0x8e3c
  1109bc:	e3403014 	movt	r3, #20
  1109c0:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  }
#endif /* LWIP_IPV4 */

  NETIFAPI_VAR_REF(msg).netif = netif;
  1109c4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1109c8:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
#if LWIP_IPV4
  NETIFAPI_VAR_REF(msg).msg.add.ipaddr  = NETIFAPI_VAR_REF(ipaddr);
  1109cc:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  1109d0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  NETIFAPI_VAR_REF(msg).msg.add.netmask = NETIFAPI_VAR_REF(netmask);
  1109d4:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1109d8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  NETIFAPI_VAR_REF(msg).msg.add.gw      = NETIFAPI_VAR_REF(gw);
  1109dc:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  1109e0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
#endif /* LWIP_IPV4 */
  NETIFAPI_VAR_REF(msg).msg.add.state   = state;
  1109e4:	e59b3004 	ldr	r3, [fp, #4]
  1109e8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  NETIFAPI_VAR_REF(msg).msg.add.init    = init;
  1109ec:	e59b3008 	ldr	r3, [fp, #8]
  1109f0:	e50b3010 	str	r3, [fp, #-16]
  NETIFAPI_VAR_REF(msg).msg.add.input   = input;
  1109f4:	e59b300c 	ldr	r3, [fp, #12]
  1109f8:	e50b300c 	str	r3, [fp, #-12]
  err = tcpip_api_call(netifapi_do_netif_add, &API_VAR_REF(msg).call);
  1109fc:	e24b3028 	sub	r3, fp, #40	; 0x28
  110a00:	e1a01003 	mov	r1, r3
  110a04:	e3000814 	movw	r0, #2068	; 0x814
  110a08:	e3400011 	movt	r0, #17
  110a0c:	eb001569 	bl	115fb8 <tcpip_api_call>
  110a10:	e1a03000 	mov	r3, r0
  110a14:	e54b3005 	strb	r3, [fp, #-5]
  NETIFAPI_VAR_FREE(msg);
  return err;
  110a18:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  110a1c:	e1a00003 	mov	r0, r3
  110a20:	e24bd004 	sub	sp, fp, #4
  110a24:	e8bd8800 	pop	{fp, pc}

00110a28 <netifapi_netif_set_addr>:
err_t
netifapi_netif_set_addr(struct netif *netif,
                        const ip4_addr_t *ipaddr,
                        const ip4_addr_t *netmask,
                        const ip4_addr_t *gw)
{
  110a28:	e92d4800 	push	{fp, lr}
  110a2c:	e28db004 	add	fp, sp, #4
  110a30:	e24dd038 	sub	sp, sp, #56	; 0x38
  110a34:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  110a38:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  110a3c:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
  110a40:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  err_t err;
  NETIFAPI_VAR_DECLARE(msg);
  NETIFAPI_VAR_ALLOC(msg);

  if (ipaddr == NULL) {
  110a44:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  110a48:	e3530000 	cmp	r3, #0
  110a4c:	1a000002 	bne	110a5c <netifapi_netif_set_addr+0x34>
    ipaddr = IP4_ADDR_ANY4;
  110a50:	e3083e3c 	movw	r3, #36412	; 0x8e3c
  110a54:	e3403014 	movt	r3, #20
  110a58:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
  }
  if (netmask == NULL) {
  110a5c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110a60:	e3530000 	cmp	r3, #0
  110a64:	1a000002 	bne	110a74 <netifapi_netif_set_addr+0x4c>
    netmask = IP4_ADDR_ANY4;
  110a68:	e3083e3c 	movw	r3, #36412	; 0x8e3c
  110a6c:	e3403014 	movt	r3, #20
  110a70:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
  }
  if (gw == NULL) {
  110a74:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  110a78:	e3530000 	cmp	r3, #0
  110a7c:	1a000002 	bne	110a8c <netifapi_netif_set_addr+0x64>
    gw = IP4_ADDR_ANY4;
  110a80:	e3083e3c 	movw	r3, #36412	; 0x8e3c
  110a84:	e3403014 	movt	r3, #20
  110a88:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  }

  NETIFAPI_VAR_REF(msg).netif = netif;
  110a8c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  110a90:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  NETIFAPI_VAR_REF(msg).msg.add.ipaddr  = NETIFAPI_VAR_REF(ipaddr);
  110a94:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  110a98:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  NETIFAPI_VAR_REF(msg).msg.add.netmask = NETIFAPI_VAR_REF(netmask);
  110a9c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110aa0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  NETIFAPI_VAR_REF(msg).msg.add.gw      = NETIFAPI_VAR_REF(gw);
  110aa4:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  110aa8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  err = tcpip_api_call(netifapi_do_netif_set_addr, &API_VAR_REF(msg).call);
  110aac:	e24b3028 	sub	r3, fp, #40	; 0x28
  110ab0:	e1a01003 	mov	r1, r3
  110ab4:	e30008a4 	movw	r0, #2212	; 0x8a4
  110ab8:	e3400011 	movt	r0, #17
  110abc:	eb00153d 	bl	115fb8 <tcpip_api_call>
  110ac0:	e1a03000 	mov	r3, r0
  110ac4:	e54b3005 	strb	r3, [fp, #-5]
  NETIFAPI_VAR_FREE(msg);
  return err;
  110ac8:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  110acc:	e1a00003 	mov	r0, r3
  110ad0:	e24bd004 	sub	sp, fp, #4
  110ad4:	e8bd8800 	pop	{fp, pc}

00110ad8 <netifapi_netif_common>:
 * @note use only for functions where there is only "netif" parameter.
 */
err_t
netifapi_netif_common(struct netif *netif, netifapi_void_fn voidfunc,
                       netifapi_errt_fn errtfunc)
{
  110ad8:	e92d4800 	push	{fp, lr}
  110adc:	e28db004 	add	fp, sp, #4
  110ae0:	e24dd038 	sub	sp, sp, #56	; 0x38
  110ae4:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  110ae8:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  110aec:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
  err_t err;
  NETIFAPI_VAR_DECLARE(msg);
  NETIFAPI_VAR_ALLOC(msg);

  NETIFAPI_VAR_REF(msg).netif = netif;
  110af0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  110af4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  NETIFAPI_VAR_REF(msg).msg.common.voidfunc = voidfunc;
  110af8:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  110afc:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  NETIFAPI_VAR_REF(msg).msg.common.errtfunc = errtfunc;
  110b00:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110b04:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  err = tcpip_api_call(netifapi_do_netif_common, &API_VAR_REF(msg).call);
  110b08:	e24b3028 	sub	r3, fp, #40	; 0x28
  110b0c:	e1a01003 	mov	r1, r3
  110b10:	e30008f0 	movw	r0, #2288	; 0x8f0
  110b14:	e3400011 	movt	r0, #17
  110b18:	eb001526 	bl	115fb8 <tcpip_api_call>
  110b1c:	e1a03000 	mov	r3, r0
  110b20:	e54b3005 	strb	r3, [fp, #-5]
  NETIFAPI_VAR_FREE(msg);
  return err;
  110b24:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  110b28:	e1a00003 	mov	r0, r3
  110b2c:	e24bd004 	sub	sp, fp, #4
  110b30:	e8bd8800 	pop	{fp, pc}

00110b34 <access_is_blocking>:
static u8_t lwip_getsockopt_impl(int s, int level, int optname, void *optval, socklen_t *optlen);
static u8_t lwip_setsockopt_impl(int s, int level, int optname, const void *optval, socklen_t optlen);

/* *RT-Thread* */
int access_is_blocking(u32_t flags, struct lwip_sock *sock)
{
  110b34:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  110b38:	e28db000 	add	fp, sp, #0
  110b3c:	e24dd00c 	sub	sp, sp, #12
  110b40:	e50b0008 	str	r0, [fp, #-8]
  110b44:	e50b100c 	str	r1, [fp, #-12]
  return !((flags & MSG_DONTWAIT) || netconn_is_nonblocking(sock->conn));
  110b48:	e51b3008 	ldr	r3, [fp, #-8]
  110b4c:	e2033008 	and	r3, r3, #8
  110b50:	e3530000 	cmp	r3, #0
  110b54:	1a000007 	bne	110b78 <access_is_blocking+0x44>
  110b58:	e51b300c 	ldr	r3, [fp, #-12]
  110b5c:	e5933000 	ldr	r3, [r3]
  110b60:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  110b64:	e2033002 	and	r3, r3, #2
  110b68:	e3530000 	cmp	r3, #0
  110b6c:	1a000001 	bne	110b78 <access_is_blocking+0x44>
  110b70:	e3a03001 	mov	r3, #1
  110b74:	ea000000 	b	110b7c <access_is_blocking+0x48>
  110b78:	e3a03000 	mov	r3, #0
}
  110b7c:	e1a00003 	mov	r0, r3
  110b80:	e28bd000 	add	sp, fp, #0
  110b84:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  110b88:	e12fff1e 	bx	lr

00110b8c <lwip_socket_thread_init>:
#endif /* LWIP_IPV4 && LWIP_IPV6 */

/** LWIP_NETCONN_SEM_PER_THREAD==1: initialize thread-local semaphore */
void
lwip_socket_thread_init(void)
{
  110b8c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  110b90:	e28db000 	add	fp, sp, #0
   netconn_thread_init();
}
  110b94:	e320f000 	nop	{0}
  110b98:	e28bd000 	add	sp, fp, #0
  110b9c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  110ba0:	e12fff1e 	bx	lr

00110ba4 <lwip_socket_thread_cleanup>:

/** LWIP_NETCONN_SEM_PER_THREAD==1: destroy thread-local semaphore */
void
lwip_socket_thread_cleanup(void)
{
  110ba4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  110ba8:	e28db000 	add	fp, sp, #0
   netconn_thread_cleanup();
}
  110bac:	e320f000 	nop	{0}
  110bb0:	e28bd000 	add	sp, fp, #0
  110bb4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  110bb8:	e12fff1e 	bx	lr

00110bbc <get_socket>:
 * @param s externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
struct lwip_sock *
get_socket(int s)
{
  110bbc:	e92d4800 	push	{fp, lr}
  110bc0:	e28db004 	add	fp, sp, #4
  110bc4:	e24dd010 	sub	sp, sp, #16
  110bc8:	e50b0010 	str	r0, [fp, #-16]
  struct lwip_sock *sock;

  s -= LWIP_SOCKET_OFFSET;

  if ((s < 0) || (s >= NUM_SOCKETS)) {
  110bcc:	e51b3010 	ldr	r3, [fp, #-16]
  110bd0:	e3530000 	cmp	r3, #0
  110bd4:	ba000002 	blt	110be4 <get_socket+0x28>
  110bd8:	e51b3010 	ldr	r3, [fp, #-16]
  110bdc:	e3530007 	cmp	r3, #7
  110be0:	da000005 	ble	110bfc <get_socket+0x40>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", s + LWIP_SOCKET_OFFSET));
    set_errno(EBADF);
  110be4:	eb009e5a 	bl	138554 <__errno_location>
  110be8:	e1a02000 	mov	r2, r0
  110bec:	e3a03009 	mov	r3, #9
  110bf0:	e5823000 	str	r3, [r2]
    return NULL;
  110bf4:	e3a03000 	mov	r3, #0
  110bf8:	ea000011 	b	110c44 <get_socket+0x88>
  }

  sock = &sockets[s];
  110bfc:	e51b3010 	ldr	r3, [fp, #-16]
  110c00:	e3a02014 	mov	r2, #20
  110c04:	e0020392 	mul	r2, r2, r3
  110c08:	e30d3b74 	movw	r3, #56180	; 0xdb74
  110c0c:	e3403014 	movt	r3, #20
  110c10:	e0823003 	add	r3, r2, r3
  110c14:	e50b3008 	str	r3, [fp, #-8]

  if (!sock->conn) {
  110c18:	e51b3008 	ldr	r3, [fp, #-8]
  110c1c:	e5933000 	ldr	r3, [r3]
  110c20:	e3530000 	cmp	r3, #0
  110c24:	1a000005 	bne	110c40 <get_socket+0x84>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): not active\n", s + LWIP_SOCKET_OFFSET));
    set_errno(EBADF);
  110c28:	eb009e49 	bl	138554 <__errno_location>
  110c2c:	e1a02000 	mov	r2, r0
  110c30:	e3a03009 	mov	r3, #9
  110c34:	e5823000 	str	r3, [r2]
    return NULL;
  110c38:	e3a03000 	mov	r3, #0
  110c3c:	ea000000 	b	110c44 <get_socket+0x88>
  }

  return sock;
  110c40:	e51b3008 	ldr	r3, [fp, #-8]
}
  110c44:	e1a00003 	mov	r0, r3
  110c48:	e24bd004 	sub	sp, fp, #4
  110c4c:	e8bd8800 	pop	{fp, pc}

00110c50 <tryget_socket>:
 * @param s externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int s)
{
  110c50:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  110c54:	e28db000 	add	fp, sp, #0
  110c58:	e24dd00c 	sub	sp, sp, #12
  110c5c:	e50b0008 	str	r0, [fp, #-8]
  s -= LWIP_SOCKET_OFFSET;
  if ((s < 0) || (s >= NUM_SOCKETS)) {
  110c60:	e51b3008 	ldr	r3, [fp, #-8]
  110c64:	e3530000 	cmp	r3, #0
  110c68:	ba000002 	blt	110c78 <tryget_socket+0x28>
  110c6c:	e51b3008 	ldr	r3, [fp, #-8]
  110c70:	e3530007 	cmp	r3, #7
  110c74:	da000001 	ble	110c80 <tryget_socket+0x30>
    return NULL;
  110c78:	e3a03000 	mov	r3, #0
  110c7c:	ea000010 	b	110cc4 <tryget_socket+0x74>
  }
  if (!sockets[s].conn) {
  110c80:	e30d3b74 	movw	r3, #56180	; 0xdb74
  110c84:	e3403014 	movt	r3, #20
  110c88:	e51b2008 	ldr	r2, [fp, #-8]
  110c8c:	e3a01014 	mov	r1, #20
  110c90:	e0020291 	mul	r2, r1, r2
  110c94:	e0833002 	add	r3, r3, r2
  110c98:	e5933000 	ldr	r3, [r3]
  110c9c:	e3530000 	cmp	r3, #0
  110ca0:	1a000001 	bne	110cac <tryget_socket+0x5c>
    return NULL;
  110ca4:	e3a03000 	mov	r3, #0
  110ca8:	ea000005 	b	110cc4 <tryget_socket+0x74>
  }
  return &sockets[s];
  110cac:	e51b3008 	ldr	r3, [fp, #-8]
  110cb0:	e3a02014 	mov	r2, #20
  110cb4:	e0020392 	mul	r2, r2, r3
  110cb8:	e30d3b74 	movw	r3, #56180	; 0xdb74
  110cbc:	e3403014 	movt	r3, #20
  110cc0:	e0823003 	add	r3, r2, r3
}
  110cc4:	e1a00003 	mov	r0, r3
  110cc8:	e28bd000 	add	sp, fp, #0
  110ccc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  110cd0:	e12fff1e 	bx	lr

00110cd4 <lwip_tryget_socket>:
 * @param s externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
struct lwip_sock *
lwip_tryget_socket(int s)
{
  110cd4:	e92d4800 	push	{fp, lr}
  110cd8:	e28db004 	add	fp, sp, #4
  110cdc:	e24dd008 	sub	sp, sp, #8
  110ce0:	e50b0008 	str	r0, [fp, #-8]
	return tryget_socket(s);
  110ce4:	e51b0008 	ldr	r0, [fp, #-8]
  110ce8:	ebffffd8 	bl	110c50 <tryget_socket>
  110cec:	e1a03000 	mov	r3, r0
}
  110cf0:	e1a00003 	mov	r0, r3
  110cf4:	e24bd004 	sub	sp, fp, #4
  110cf8:	e8bd8800 	pop	{fp, pc}

00110cfc <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
  110cfc:	e92d4800 	push	{fp, lr}
  110d00:	e28db004 	add	fp, sp, #4
  110d04:	e24dd010 	sub	sp, sp, #16
  110d08:	e50b0010 	str	r0, [fp, #-16]
  110d0c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  int i;
  SYS_ARCH_DECL_PROTECT(lev);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
  110d10:	e3a03000 	mov	r3, #0
  110d14:	e50b3008 	str	r3, [fp, #-8]
  110d18:	ea000063 	b	110eac <alloc_socket+0x1b0>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
  110d1c:	ebffc546 	bl	10223c <rt_enter_critical>
    if (!sockets[i].conn && (sockets[i].select_waiting == 0)) {
  110d20:	e30d3b74 	movw	r3, #56180	; 0xdb74
  110d24:	e3403014 	movt	r3, #20
  110d28:	e51b2008 	ldr	r2, [fp, #-8]
  110d2c:	e3a01014 	mov	r1, #20
  110d30:	e0020291 	mul	r2, r1, r2
  110d34:	e0833002 	add	r3, r3, r2
  110d38:	e5933000 	ldr	r3, [r3]
  110d3c:	e3530000 	cmp	r3, #0
  110d40:	1a000055 	bne	110e9c <alloc_socket+0x1a0>
  110d44:	e30d3b74 	movw	r3, #56180	; 0xdb74
  110d48:	e3403014 	movt	r3, #20
  110d4c:	e51b2008 	ldr	r2, [fp, #-8]
  110d50:	e3a01014 	mov	r1, #20
  110d54:	e0020291 	mul	r2, r1, r2
  110d58:	e0833002 	add	r3, r3, r2
  110d5c:	e2833011 	add	r3, r3, #17
  110d60:	e5d33000 	ldrb	r3, [r3]
  110d64:	e3530000 	cmp	r3, #0
  110d68:	1a00004b 	bne	110e9c <alloc_socket+0x1a0>
      sockets[i].conn       = newconn;
  110d6c:	e30d3b74 	movw	r3, #56180	; 0xdb74
  110d70:	e3403014 	movt	r3, #20
  110d74:	e51b2008 	ldr	r2, [fp, #-8]
  110d78:	e3a01014 	mov	r1, #20
  110d7c:	e0020291 	mul	r2, r1, r2
  110d80:	e0833002 	add	r3, r3, r2
  110d84:	e51b2010 	ldr	r2, [fp, #-16]
  110d88:	e5832000 	str	r2, [r3]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
  110d8c:	ebffc530 	bl	102254 <rt_exit_critical>
      sockets[i].lastdata   = NULL;
  110d90:	e30d3b74 	movw	r3, #56180	; 0xdb74
  110d94:	e3403014 	movt	r3, #20
  110d98:	e51b2008 	ldr	r2, [fp, #-8]
  110d9c:	e3a01014 	mov	r1, #20
  110da0:	e0020291 	mul	r2, r1, r2
  110da4:	e0833002 	add	r3, r3, r2
  110da8:	e2833004 	add	r3, r3, #4
  110dac:	e3a02000 	mov	r2, #0
  110db0:	e5832000 	str	r2, [r3]
      sockets[i].lastoffset = 0;
  110db4:	e30d3b74 	movw	r3, #56180	; 0xdb74
  110db8:	e3403014 	movt	r3, #20
  110dbc:	e51b2008 	ldr	r2, [fp, #-8]
  110dc0:	e3a01014 	mov	r1, #20
  110dc4:	e0020291 	mul	r2, r1, r2
  110dc8:	e0833002 	add	r3, r3, r2
  110dcc:	e2833008 	add	r3, r3, #8
  110dd0:	e3a02000 	mov	r2, #0
  110dd4:	e1c320b0 	strh	r2, [r3]
      sockets[i].rcvevent   = 0;
  110dd8:	e30d3b74 	movw	r3, #56180	; 0xdb74
  110ddc:	e3403014 	movt	r3, #20
  110de0:	e51b2008 	ldr	r2, [fp, #-8]
  110de4:	e3a01014 	mov	r1, #20
  110de8:	e0020291 	mul	r2, r1, r2
  110dec:	e0833002 	add	r3, r3, r2
  110df0:	e283300a 	add	r3, r3, #10
  110df4:	e3a02000 	mov	r2, #0
  110df8:	e1c320b0 	strh	r2, [r3]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
  110dfc:	e51b3010 	ldr	r3, [fp, #-16]
  110e00:	e5933000 	ldr	r3, [r3]
  110e04:	e20330f0 	and	r3, r3, #240	; 0xf0
  110e08:	e3530010 	cmp	r3, #16
  110e0c:	1a000002 	bne	110e1c <alloc_socket+0x120>
  110e10:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  110e14:	e3530000 	cmp	r3, #0
  110e18:	0a000001 	beq	110e24 <alloc_socket+0x128>
  110e1c:	e3a03001 	mov	r3, #1
  110e20:	ea000000 	b	110e28 <alloc_socket+0x12c>
  110e24:	e3a03000 	mov	r3, #0
  110e28:	e6ff2073 	uxth	r2, r3
  110e2c:	e30d3b74 	movw	r3, #56180	; 0xdb74
  110e30:	e3403014 	movt	r3, #20
  110e34:	e51b1008 	ldr	r1, [fp, #-8]
  110e38:	e3a00014 	mov	r0, #20
  110e3c:	e0010190 	mul	r1, r0, r1
  110e40:	e0833001 	add	r3, r3, r1
  110e44:	e283300c 	add	r3, r3, #12
  110e48:	e1c320b0 	strh	r2, [r3]
      sockets[i].errevent   = 0;
  110e4c:	e30d3b74 	movw	r3, #56180	; 0xdb74
  110e50:	e3403014 	movt	r3, #20
  110e54:	e51b2008 	ldr	r2, [fp, #-8]
  110e58:	e3a01014 	mov	r1, #20
  110e5c:	e0020291 	mul	r2, r1, r2
  110e60:	e0833002 	add	r3, r3, r2
  110e64:	e283300e 	add	r3, r3, #14
  110e68:	e3a02000 	mov	r2, #0
  110e6c:	e1c320b0 	strh	r2, [r3]
      sockets[i].err        = 0;
  110e70:	e30d3b74 	movw	r3, #56180	; 0xdb74
  110e74:	e3403014 	movt	r3, #20
  110e78:	e51b2008 	ldr	r2, [fp, #-8]
  110e7c:	e3a01014 	mov	r1, #20
  110e80:	e0020291 	mul	r2, r1, r2
  110e84:	e0833002 	add	r3, r3, r2
  110e88:	e2833010 	add	r3, r3, #16
  110e8c:	e3a02000 	mov	r2, #0
  110e90:	e5c32000 	strb	r2, [r3]
      return i + LWIP_SOCKET_OFFSET;
  110e94:	e51b3008 	ldr	r3, [fp, #-8]
  110e98:	ea000007 	b	110ebc <alloc_socket+0x1c0>
    }
    SYS_ARCH_UNPROTECT(lev);
  110e9c:	ebffc4ec 	bl	102254 <rt_exit_critical>
  for (i = 0; i < NUM_SOCKETS; ++i) {
  110ea0:	e51b3008 	ldr	r3, [fp, #-8]
  110ea4:	e2833001 	add	r3, r3, #1
  110ea8:	e50b3008 	str	r3, [fp, #-8]
  110eac:	e51b3008 	ldr	r3, [fp, #-8]
  110eb0:	e3530007 	cmp	r3, #7
  110eb4:	daffff98 	ble	110d1c <alloc_socket+0x20>
  }
  return -1;
  110eb8:	e3e03000 	mvn	r3, #0
}
  110ebc:	e1a00003 	mov	r0, r3
  110ec0:	e24bd004 	sub	sp, fp, #4
  110ec4:	e8bd8800 	pop	{fp, pc}

00110ec8 <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
  110ec8:	e92d4800 	push	{fp, lr}
  110ecc:	e28db004 	add	fp, sp, #4
  110ed0:	e24dd010 	sub	sp, sp, #16
  110ed4:	e50b0010 	str	r0, [fp, #-16]
  110ed8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  void *lastdata;

  lastdata         = sock->lastdata;
  110edc:	e51b3010 	ldr	r3, [fp, #-16]
  110ee0:	e5933004 	ldr	r3, [r3, #4]
  110ee4:	e50b3008 	str	r3, [fp, #-8]
  sock->lastdata   = NULL;
  110ee8:	e51b3010 	ldr	r3, [fp, #-16]
  110eec:	e3a02000 	mov	r2, #0
  110ef0:	e5832004 	str	r2, [r3, #4]
  sock->lastoffset = 0;
  110ef4:	e51b3010 	ldr	r3, [fp, #-16]
  110ef8:	e3a02000 	mov	r2, #0
  110efc:	e1c320b8 	strh	r2, [r3, #8]
  sock->err        = 0;
  110f00:	e51b3010 	ldr	r3, [fp, #-16]
  110f04:	e3a02000 	mov	r2, #0
  110f08:	e5c32010 	strb	r2, [r3, #16]

  /* Protect socket array */
  SYS_ARCH_SET(sock->conn, NULL);
  110f0c:	ebffc4ca 	bl	10223c <rt_enter_critical>
  110f10:	e51b3010 	ldr	r3, [fp, #-16]
  110f14:	e3a02000 	mov	r2, #0
  110f18:	e5832000 	str	r2, [r3]
  110f1c:	ebffc4cc 	bl	102254 <rt_exit_critical>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (lastdata != NULL) {
  110f20:	e51b3008 	ldr	r3, [fp, #-8]
  110f24:	e3530000 	cmp	r3, #0
  110f28:	0a000007 	beq	110f4c <free_socket+0x84>
    if (is_tcp) {
  110f2c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  110f30:	e3530000 	cmp	r3, #0
  110f34:	0a000002 	beq	110f44 <free_socket+0x7c>
      pbuf_free((struct pbuf *)lastdata);
  110f38:	e51b0008 	ldr	r0, [fp, #-8]
  110f3c:	eb002702 	bl	11ab4c <pbuf_free>
    } else {
      netbuf_delete((struct netbuf *)lastdata);
    }
  }
}
  110f40:	ea000001 	b	110f4c <free_socket+0x84>
      netbuf_delete((struct netbuf *)lastdata);
  110f44:	e51b0008 	ldr	r0, [fp, #-8]
  110f48:	ebfffb1e 	bl	10fbc8 <netbuf_delete>
}
  110f4c:	e320f000 	nop	{0}
  110f50:	e24bd004 	sub	sp, fp, #4
  110f54:	e8bd8800 	pop	{fp, pc}

00110f58 <lwip_accept>:
 * Exceptions are documented!
 */

int
lwip_accept(int s, struct sockaddr *addr, socklen_t *addrlen)
{
  110f58:	e92d4810 	push	{r4, fp, lr}
  110f5c:	e28db008 	add	fp, sp, #8
  110f60:	e24dd05c 	sub	sp, sp, #92	; 0x5c
  110f64:	e50b0058 	str	r0, [fp, #-88]	; 0xffffffa8
  110f68:	e50b105c 	str	r1, [fp, #-92]	; 0xffffffa4
  110f6c:	e50b2060 	str	r2, [fp, #-96]	; 0xffffffa0
  struct lwip_sock *sock, *nsock;
  struct netconn *newconn;
  ip_addr_t naddr;
  u16_t port = 0;
  110f70:	e3a03000 	mov	r3, #0
  110f74:	e14b33be 	strh	r3, [fp, #-62]	; 0xffffffc2
  int newsock;
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d)...\n", s));
  sock = get_socket(s);
  110f78:	e51b0058 	ldr	r0, [fp, #-88]	; 0xffffffa8
  110f7c:	ebffff0e 	bl	110bbc <get_socket>
  110f80:	e50b0010 	str	r0, [fp, #-16]
  if (!sock) {
  110f84:	e51b3010 	ldr	r3, [fp, #-16]
  110f88:	e3530000 	cmp	r3, #0
  110f8c:	1a000001 	bne	110f98 <lwip_accept+0x40>
    return -1;
  110f90:	e3e03000 	mvn	r3, #0
  110f94:	ea0000fa 	b	111384 <lwip_accept+0x42c>
  }

  if (netconn_is_nonblocking(sock->conn) && (sock->rcvevent <= 0)) {
  110f98:	e51b3010 	ldr	r3, [fp, #-16]
  110f9c:	e5933000 	ldr	r3, [r3]
  110fa0:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  110fa4:	e2033002 	and	r3, r3, #2
  110fa8:	e3530000 	cmp	r3, #0
  110fac:	0a000009 	beq	110fd8 <lwip_accept+0x80>
  110fb0:	e51b3010 	ldr	r3, [fp, #-16]
  110fb4:	e1d330fa 	ldrsh	r3, [r3, #10]
  110fb8:	e3530000 	cmp	r3, #0
  110fbc:	ca000005 	bgt	110fd8 <lwip_accept+0x80>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): returning EWOULDBLOCK\n", s));
    set_errno(EWOULDBLOCK);
  110fc0:	eb009d63 	bl	138554 <__errno_location>
  110fc4:	e1a02000 	mov	r2, r0
  110fc8:	e3a0300b 	mov	r3, #11
  110fcc:	e5823000 	str	r3, [r2]
    return -1;
  110fd0:	e3e03000 	mvn	r3, #0
  110fd4:	ea0000ea 	b	111384 <lwip_accept+0x42c>
  }

  /* wait for a new connection */
  err = netconn_accept(sock->conn, &newconn);
  110fd8:	e51b3010 	ldr	r3, [fp, #-16]
  110fdc:	e5933000 	ldr	r3, [r3]
  110fe0:	e24b2038 	sub	r2, fp, #56	; 0x38
  110fe4:	e1a01002 	mov	r1, r2
  110fe8:	e1a00003 	mov	r0, r3
  110fec:	ebffe924 	bl	10b484 <netconn_accept>
  110ff0:	e1a03000 	mov	r3, r0
  110ff4:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  if (err != ERR_OK) {
  110ff8:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  110ffc:	e3530000 	cmp	r3, #0
  111000:	0a000035 	beq	1110dc <lwip_accept+0x184>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_acept failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
  111004:	e51b3010 	ldr	r3, [fp, #-16]
  111008:	e5933000 	ldr	r3, [r3]
  11100c:	e5933000 	ldr	r3, [r3]
  111010:	e20330f0 	and	r3, r3, #240	; 0xf0
  111014:	e3530010 	cmp	r3, #16
  111018:	0a00000d 	beq	111054 <lwip_accept+0xfc>
      sock_set_errno(sock, EOPNOTSUPP);
  11101c:	e3a0305f 	mov	r3, #95	; 0x5f
  111020:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
  111024:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  111028:	e6ef2073 	uxtb	r2, r3
  11102c:	e51b3010 	ldr	r3, [fp, #-16]
  111030:	e5c32010 	strb	r2, [r3, #16]
  111034:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  111038:	e3530000 	cmp	r3, #0
  11103c:	0a000024 	beq	1110d4 <lwip_accept+0x17c>
  111040:	eb009d43 	bl	138554 <__errno_location>
  111044:	e1a02000 	mov	r2, r0
  111048:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  11104c:	e5823000 	str	r3, [r2]
  111050:	ea00001f 	b	1110d4 <lwip_accept+0x17c>
    } else if (err == ERR_CLSD) {
  111054:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  111058:	e373000f 	cmn	r3, #15
  11105c:	1a00000d 	bne	111098 <lwip_accept+0x140>
      sock_set_errno(sock, EINVAL);
  111060:	e3a03016 	mov	r3, #22
  111064:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
  111068:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  11106c:	e6ef2073 	uxtb	r2, r3
  111070:	e51b3010 	ldr	r3, [fp, #-16]
  111074:	e5c32010 	strb	r2, [r3, #16]
  111078:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  11107c:	e3530000 	cmp	r3, #0
  111080:	0a000013 	beq	1110d4 <lwip_accept+0x17c>
  111084:	eb009d32 	bl	138554 <__errno_location>
  111088:	e1a02000 	mov	r2, r0
  11108c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  111090:	e5823000 	str	r3, [r2]
  111094:	ea00000e 	b	1110d4 <lwip_accept+0x17c>
    } else {
      sock_set_errno(sock, err_to_errno(err));
  111098:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  11109c:	e1a00003 	mov	r0, r3
  1110a0:	ebfffa9d 	bl	10fb1c <err_to_errno>
  1110a4:	e50b002c 	str	r0, [fp, #-44]	; 0xffffffd4
  1110a8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1110ac:	e6ef2073 	uxtb	r2, r3
  1110b0:	e51b3010 	ldr	r3, [fp, #-16]
  1110b4:	e5c32010 	strb	r2, [r3, #16]
  1110b8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1110bc:	e3530000 	cmp	r3, #0
  1110c0:	0a000003 	beq	1110d4 <lwip_accept+0x17c>
  1110c4:	eb009d22 	bl	138554 <__errno_location>
  1110c8:	e1a02000 	mov	r2, r0
  1110cc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1110d0:	e5823000 	str	r3, [r2]
    }
    return -1;
  1110d4:	e3e03000 	mvn	r3, #0
  1110d8:	ea0000a9 	b	111384 <lwip_accept+0x42c>
  }
  LWIP_ASSERT("newconn != NULL", newconn != NULL);
  1110dc:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1110e0:	e3530000 	cmp	r3, #0
  1110e4:	1a000006 	bne	111104 <lwip_accept+0x1ac>
  1110e8:	e30602a4 	movw	r0, #25252	; 0x62a4
  1110ec:	e3400014 	movt	r0, #20
  1110f0:	ebffc807 	bl	103114 <rt_kprintf>
  1110f4:	e300120a 	movw	r1, #522	; 0x20a
  1110f8:	e30602b4 	movw	r0, #25268	; 0x62b4
  1110fc:	e3400014 	movt	r0, #20
  111100:	ebffe683 	bl	10ab14 <sys_arch_assert>

  newsock = alloc_socket(newconn, 1);
  111104:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  111108:	e3a01001 	mov	r1, #1
  11110c:	e1a00003 	mov	r0, r3
  111110:	ebfffef9 	bl	110cfc <alloc_socket>
  111114:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  if (newsock == -1) {
  111118:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11111c:	e3730001 	cmn	r3, #1
  111120:	1a000011 	bne	11116c <lwip_accept+0x214>
    netconn_delete(newconn);
  111124:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  111128:	e1a00003 	mov	r0, r3
  11112c:	ebffe7e6 	bl	10b0cc <netconn_delete>
    sock_set_errno(sock, ENFILE);
  111130:	e3a03017 	mov	r3, #23
  111134:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  111138:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11113c:	e6ef2073 	uxtb	r2, r3
  111140:	e51b3010 	ldr	r3, [fp, #-16]
  111144:	e5c32010 	strb	r2, [r3, #16]
  111148:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11114c:	e3530000 	cmp	r3, #0
  111150:	0a000003 	beq	111164 <lwip_accept+0x20c>
  111154:	eb009cfe 	bl	138554 <__errno_location>
  111158:	e1a02000 	mov	r2, r0
  11115c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  111160:	e5823000 	str	r3, [r2]
    return -1;
  111164:	e3e03000 	mvn	r3, #0
  111168:	ea000085 	b	111384 <lwip_accept+0x42c>
  }
  LWIP_ASSERT("invalid socket index", (newsock >= LWIP_SOCKET_OFFSET) && (newsock < NUM_SOCKETS + LWIP_SOCKET_OFFSET));
  11116c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111170:	e3530000 	cmp	r3, #0
  111174:	ba000002 	blt	111184 <lwip_accept+0x22c>
  111178:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11117c:	e3530007 	cmp	r3, #7
  111180:	da000006 	ble	1111a0 <lwip_accept+0x248>
  111184:	e30602e4 	movw	r0, #25316	; 0x62e4
  111188:	e3400014 	movt	r0, #20
  11118c:	ebffc7e0 	bl	103114 <rt_kprintf>
  111190:	e3001212 	movw	r1, #530	; 0x212
  111194:	e30602b4 	movw	r0, #25268	; 0x62b4
  111198:	e3400014 	movt	r0, #20
  11119c:	ebffe65c 	bl	10ab14 <sys_arch_assert>
  // LWIP_ASSERT("newconn->callback == event_callback", newconn->callback == event_callback);
  nsock = &sockets[newsock - LWIP_SOCKET_OFFSET];
  1111a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1111a4:	e3a02014 	mov	r2, #20
  1111a8:	e0020392 	mul	r2, r2, r3
  1111ac:	e30d3b74 	movw	r3, #56180	; 0xdb74
  1111b0:	e3403014 	movt	r3, #20
  1111b4:	e0823003 	add	r3, r2, r3
  1111b8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  /* See event_callback: If data comes in right away after an accept, even
   * though the server task might not have created a new socket yet.
   * In that case, newconn->socket is counted down (newconn->socket--),
   * so nsock->rcvevent is >= 1 here!
   */
  SYS_ARCH_PROTECT(lev);
  1111bc:	ebffc41e 	bl	10223c <rt_enter_critical>
  nsock->rcvevent += (s16_t)(-1 - newconn->socket);
  1111c0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1111c4:	e1d330fa 	ldrsh	r3, [r3, #10]
  1111c8:	e6ff2073 	uxth	r2, r3
  1111cc:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1111d0:	e593301c 	ldr	r3, [r3, #28]
  1111d4:	e6ff3073 	uxth	r3, r3
  1111d8:	e0423003 	sub	r3, r2, r3
  1111dc:	e6ff3073 	uxth	r3, r3
  1111e0:	e2433001 	sub	r3, r3, #1
  1111e4:	e6ff3073 	uxth	r3, r3
  1111e8:	e6bf2073 	sxth	r2, r3
  1111ec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1111f0:	e1c320ba 	strh	r2, [r3, #10]
  newconn->socket = newsock;
  1111f4:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1111f8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1111fc:	e583201c 	str	r2, [r3, #28]
  SYS_ARCH_UNPROTECT(lev);
  111200:	ebffc413 	bl	102254 <rt_exit_critical>

  /* Note that POSIX only requires us to check addr is non-NULL. addrlen must
   * not be NULL if addr is valid.
   */
  if (addr != NULL) {
  111204:	e51b305c 	ldr	r3, [fp, #-92]	; 0xffffffa4
  111208:	e3530000 	cmp	r3, #0
  11120c:	0a00004e 	beq	11134c <lwip_accept+0x3f4>
    union sockaddr_aligned tempaddr;
    /* get the IP address and port of the remote host */
    err = netconn_peer(newconn, &naddr, &port);
  111210:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
  111214:	e24b203e 	sub	r2, fp, #62	; 0x3e
  111218:	e24b103c 	sub	r1, fp, #60	; 0x3c
  11121c:	e3a03000 	mov	r3, #0
  111220:	ebffe7c9 	bl	10b14c <netconn_getaddr>
  111224:	e1a03000 	mov	r3, r0
  111228:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    if (err != ERR_OK) {
  11122c:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  111230:	e3530000 	cmp	r3, #0
  111234:	0a000016 	beq	111294 <lwip_accept+0x33c>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_peer failed, err=%d\n", s, err));
      netconn_delete(newconn);
  111238:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  11123c:	e1a00003 	mov	r0, r3
  111240:	ebffe7a1 	bl	10b0cc <netconn_delete>
      free_socket(nsock, 1);
  111244:	e3a01001 	mov	r1, #1
  111248:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  11124c:	ebffff1d 	bl	110ec8 <free_socket>
      sock_set_errno(sock, err_to_errno(err));
  111250:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  111254:	e1a00003 	mov	r0, r3
  111258:	ebfffa2f 	bl	10fb1c <err_to_errno>
  11125c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  111260:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  111264:	e6ef2073 	uxtb	r2, r3
  111268:	e51b3010 	ldr	r3, [fp, #-16]
  11126c:	e5c32010 	strb	r2, [r3, #16]
  111270:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  111274:	e3530000 	cmp	r3, #0
  111278:	0a000003 	beq	11128c <lwip_accept+0x334>
  11127c:	eb009cb4 	bl	138554 <__errno_location>
  111280:	e1a02000 	mov	r2, r0
  111284:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  111288:	e5823000 	str	r3, [r2]
      return -1;
  11128c:	e3e03000 	mvn	r3, #0
  111290:	ea00003b 	b	111384 <lwip_accept+0x42c>
    }
    LWIP_ASSERT("addr valid but addrlen NULL", addrlen != NULL);
  111294:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
  111298:	e3530000 	cmp	r3, #0
  11129c:	1a000006 	bne	1112bc <lwip_accept+0x364>
  1112a0:	e30602fc 	movw	r0, #25340	; 0x62fc
  1112a4:	e3400014 	movt	r0, #20
  1112a8:	ebffc799 	bl	103114 <rt_kprintf>
  1112ac:	e300122e 	movw	r1, #558	; 0x22e
  1112b0:	e30602b4 	movw	r0, #25268	; 0x62b4
  1112b4:	e3400014 	movt	r0, #20
  1112b8:	ebffe615 	bl	10ab14 <sys_arch_assert>

    IPADDR_PORT_TO_SOCKADDR(&tempaddr, &naddr, port);
  1112bc:	e24b3050 	sub	r3, fp, #80	; 0x50
  1112c0:	e3a02010 	mov	r2, #16
  1112c4:	e5c32000 	strb	r2, [r3]
  1112c8:	e24b3050 	sub	r3, fp, #80	; 0x50
  1112cc:	e3a02002 	mov	r2, #2
  1112d0:	e5c32001 	strb	r2, [r3, #1]
  1112d4:	e15b33be 	ldrh	r3, [fp, #-62]	; 0xffffffc2
  1112d8:	e24b4050 	sub	r4, fp, #80	; 0x50
  1112dc:	e1a00003 	mov	r0, r3
  1112e0:	eb0013e2 	bl	116270 <lwip_htons>
  1112e4:	e1a03000 	mov	r3, r0
  1112e8:	e1c430b2 	strh	r3, [r4, #2]
  1112ec:	e24b3050 	sub	r3, fp, #80	; 0x50
  1112f0:	e51b203c 	ldr	r2, [fp, #-60]	; 0xffffffc4
  1112f4:	e5832004 	str	r2, [r3, #4]
  1112f8:	e24b3050 	sub	r3, fp, #80	; 0x50
  1112fc:	e2833008 	add	r3, r3, #8
  111300:	e3a02008 	mov	r2, #8
  111304:	e3a01000 	mov	r1, #0
  111308:	e1a00003 	mov	r0, r3
  11130c:	eb00bd76 	bl	1408ec <memset>
    if (*addrlen > tempaddr.sa.sa_len) {
  111310:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
  111314:	e5933000 	ldr	r3, [r3]
  111318:	e55b2050 	ldrb	r2, [fp, #-80]	; 0xffffffb0
  11131c:	e1530002 	cmp	r3, r2
  111320:	9a000003 	bls	111334 <lwip_accept+0x3dc>
      *addrlen = tempaddr.sa.sa_len;
  111324:	e55b3050 	ldrb	r3, [fp, #-80]	; 0xffffffb0
  111328:	e1a02003 	mov	r2, r3
  11132c:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
  111330:	e5832000 	str	r2, [r3]
    }
    MEMCPY(addr, &tempaddr, *addrlen);
  111334:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
  111338:	e5932000 	ldr	r2, [r3]
  11133c:	e24b3050 	sub	r3, fp, #80	; 0x50
  111340:	e1a01003 	mov	r1, r3
  111344:	e51b005c 	ldr	r0, [fp, #-92]	; 0xffffffa4
  111348:	eb00bc2f 	bl	14040c <memcpy>
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F"\n", port));
  } else {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d) returning new sock=%d", s, newsock));
  }

  sock_set_errno(sock, 0);
  11134c:	e3a03000 	mov	r3, #0
  111350:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  111354:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111358:	e6ef2073 	uxtb	r2, r3
  11135c:	e51b3010 	ldr	r3, [fp, #-16]
  111360:	e5c32010 	strb	r2, [r3, #16]
  111364:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111368:	e3530000 	cmp	r3, #0
  11136c:	0a000003 	beq	111380 <lwip_accept+0x428>
  111370:	eb009c77 	bl	138554 <__errno_location>
  111374:	e1a02000 	mov	r2, r0
  111378:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11137c:	e5823000 	str	r3, [r2]
  return newsock;
  111380:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
}
  111384:	e1a00003 	mov	r0, r3
  111388:	e24bd008 	sub	sp, fp, #8
  11138c:	e8bd8810 	pop	{r4, fp, pc}

00111390 <lwip_bind>:
#include <stdio.h>
int
lwip_bind(int s, const struct sockaddr *name, socklen_t namelen)
{
  111390:	e92d4800 	push	{fp, lr}
  111394:	e28db004 	add	fp, sp, #4
  111398:	e24dd028 	sub	sp, sp, #40	; 0x28
  11139c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  1113a0:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  1113a4:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  struct lwip_sock *sock;
  ip_addr_t local_addr;
  u16_t local_port;
  err_t err;

  sock = get_socket(s);
  1113a8:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1113ac:	ebfffe02 	bl	110bbc <get_socket>
  1113b0:	e50b0008 	str	r0, [fp, #-8]
  if (!sock) {
  1113b4:	e51b3008 	ldr	r3, [fp, #-8]
  1113b8:	e3530000 	cmp	r3, #0
  1113bc:	1a000001 	bne	1113c8 <lwip_bind+0x38>
    return -1;
  1113c0:	e3e03000 	mvn	r3, #0
  1113c4:	ea000054 	b	11151c <lwip_bind+0x18c>
    sock_set_errno(sock, err_to_errno(ERR_VAL));
    return -1;
  }

  /* check size, family and alignment of 'name' */
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
  1113c8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1113cc:	e3530010 	cmp	r3, #16
  1113d0:	1a000007 	bne	1113f4 <lwip_bind+0x64>
  1113d4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1113d8:	e5d33001 	ldrb	r3, [r3, #1]
  1113dc:	e3530002 	cmp	r3, #2
  1113e0:	1a000003 	bne	1113f4 <lwip_bind+0x64>
  1113e4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1113e8:	e2033003 	and	r3, r3, #3
  1113ec:	e3530000 	cmp	r3, #0
  1113f0:	0a000016 	beq	111450 <lwip_bind+0xc0>
  1113f4:	e3060318 	movw	r0, #25368	; 0x6318
  1113f8:	e3400014 	movt	r0, #20
  1113fc:	ebffc744 	bl	103114 <rt_kprintf>
  111400:	e3001257 	movw	r1, #599	; 0x257
  111404:	e30602b4 	movw	r0, #25268	; 0x62b4
  111408:	e3400014 	movt	r0, #20
  11140c:	ebffe5c0 	bl	10ab14 <sys_arch_assert>
  111410:	e3e0000f 	mvn	r0, #15
  111414:	ebfff9c0 	bl	10fb1c <err_to_errno>
  111418:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11141c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111420:	e6ef2073 	uxtb	r2, r3
  111424:	e51b3008 	ldr	r3, [fp, #-8]
  111428:	e5c32010 	strb	r2, [r3, #16]
  11142c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111430:	e3530000 	cmp	r3, #0
  111434:	0a000003 	beq	111448 <lwip_bind+0xb8>
  111438:	eb009c45 	bl	138554 <__errno_location>
  11143c:	e1a02000 	mov	r2, r0
  111440:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111444:	e5823000 	str	r3, [r2]
  111448:	e3e03000 	mvn	r3, #0
  11144c:	ea000032 	b	11151c <lwip_bind+0x18c>
             IS_SOCK_ADDR_TYPE_VALID(name) && IS_SOCK_ADDR_ALIGNED(name)),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);
  LWIP_UNUSED_ARG(namelen);

  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
  111450:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111454:	e5933004 	ldr	r3, [r3, #4]
  111458:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  11145c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111460:	e1d330b2 	ldrh	r3, [r3, #2]
  111464:	e1a00003 	mov	r0, r3
  111468:	eb001380 	bl	116270 <lwip_htons>
  11146c:	e1a03000 	mov	r3, r0
  111470:	e14b30ba 	strh	r3, [fp, #-10]
    unmap_ipv4_mapped_ipv6(ip_2_ip4(&local_addr), ip_2_ip6(&local_addr));
    IP_SET_TYPE_VAL(local_addr, IPADDR_TYPE_V4);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  err = netconn_bind(sock->conn, &local_addr, local_port);
  111474:	e51b3008 	ldr	r3, [fp, #-8]
  111478:	e5933000 	ldr	r3, [r3]
  11147c:	e15b20ba 	ldrh	r2, [fp, #-10]
  111480:	e24b101c 	sub	r1, fp, #28
  111484:	e1a00003 	mov	r0, r3
  111488:	ebffe76d 	bl	10b244 <netconn_bind>
  11148c:	e1a03000 	mov	r3, r0
  111490:	e54b300b 	strb	r3, [fp, #-11]

  if (err != ERR_OK) {
  111494:	e15b30db 	ldrsb	r3, [fp, #-11]
  111498:	e3530000 	cmp	r3, #0
  11149c:	0a000010 	beq	1114e4 <lwip_bind+0x154>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
  1114a0:	e15b30db 	ldrsb	r3, [fp, #-11]
  1114a4:	e1a00003 	mov	r0, r3
  1114a8:	ebfff99b 	bl	10fb1c <err_to_errno>
  1114ac:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  1114b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1114b4:	e6ef2073 	uxtb	r2, r3
  1114b8:	e51b3008 	ldr	r3, [fp, #-8]
  1114bc:	e5c32010 	strb	r2, [r3, #16]
  1114c0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1114c4:	e3530000 	cmp	r3, #0
  1114c8:	0a000003 	beq	1114dc <lwip_bind+0x14c>
  1114cc:	eb009c20 	bl	138554 <__errno_location>
  1114d0:	e1a02000 	mov	r2, r0
  1114d4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1114d8:	e5823000 	str	r3, [r2]
    return -1;
  1114dc:	e3e03000 	mvn	r3, #0
  1114e0:	ea00000d 	b	11151c <lwip_bind+0x18c>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
  1114e4:	e3a03000 	mov	r3, #0
  1114e8:	e50b3010 	str	r3, [fp, #-16]
  1114ec:	e51b3010 	ldr	r3, [fp, #-16]
  1114f0:	e6ef2073 	uxtb	r2, r3
  1114f4:	e51b3008 	ldr	r3, [fp, #-8]
  1114f8:	e5c32010 	strb	r2, [r3, #16]
  1114fc:	e51b3010 	ldr	r3, [fp, #-16]
  111500:	e3530000 	cmp	r3, #0
  111504:	0a000003 	beq	111518 <lwip_bind+0x188>
  111508:	eb009c11 	bl	138554 <__errno_location>
  11150c:	e1a02000 	mov	r2, r0
  111510:	e51b3010 	ldr	r3, [fp, #-16]
  111514:	e5823000 	str	r3, [r2]
  return 0;
  111518:	e3a03000 	mov	r3, #0
}
  11151c:	e1a00003 	mov	r0, r3
  111520:	e24bd004 	sub	sp, fp, #4
  111524:	e8bd8800 	pop	{fp, pc}

00111528 <lwip_close>:

int
lwip_close(int s)
{
  111528:	e92d4800 	push	{fp, lr}
  11152c:	e28db004 	add	fp, sp, #4
  111530:	e24dd018 	sub	sp, sp, #24
  111534:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct lwip_sock *sock;
  int is_tcp = 0;
  111538:	e3a03000 	mov	r3, #0
  11153c:	e50b3008 	str	r3, [fp, #-8]
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));

  sock = get_socket(s);
  111540:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  111544:	ebfffd9c 	bl	110bbc <get_socket>
  111548:	e50b000c 	str	r0, [fp, #-12]
  if (!sock) {
  11154c:	e51b300c 	ldr	r3, [fp, #-12]
  111550:	e3530000 	cmp	r3, #0
  111554:	1a000001 	bne	111560 <lwip_close+0x38>
    return -1;
  111558:	e3e03000 	mvn	r3, #0
  11155c:	ea000038 	b	111644 <lwip_close+0x11c>
  }

  if (sock->conn != NULL) {
  111560:	e51b300c 	ldr	r3, [fp, #-12]
  111564:	e5933000 	ldr	r3, [r3]
  111568:	e3530000 	cmp	r3, #0
  11156c:	0a000009 	beq	111598 <lwip_close+0x70>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
  111570:	e51b300c 	ldr	r3, [fp, #-12]
  111574:	e5933000 	ldr	r3, [r3]
  111578:	e5933000 	ldr	r3, [r3]
  11157c:	e20330f0 	and	r3, r3, #240	; 0xf0
  111580:	e3530010 	cmp	r3, #16
  111584:	03a03001 	moveq	r3, #1
  111588:	13a03000 	movne	r3, #0
  11158c:	e6ef3073 	uxtb	r3, r3
  111590:	e50b3008 	str	r3, [fp, #-8]
  111594:	ea00000a 	b	1115c4 <lwip_close+0x9c>
  } else {
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata == NULL);
  111598:	e51b300c 	ldr	r3, [fp, #-12]
  11159c:	e5933004 	ldr	r3, [r3, #4]
  1115a0:	e3530000 	cmp	r3, #0
  1115a4:	0a000006 	beq	1115c4 <lwip_close+0x9c>
  1115a8:	e3060334 	movw	r0, #25396	; 0x6334
  1115ac:	e3400014 	movt	r0, #20
  1115b0:	ebffc6d7 	bl	103114 <rt_kprintf>
  1115b4:	e3001285 	movw	r1, #645	; 0x285
  1115b8:	e30602b4 	movw	r0, #25268	; 0x62b4
  1115bc:	e3400014 	movt	r0, #20
  1115c0:	ebffe553 	bl	10ab14 <sys_arch_assert>
  }

#if LWIP_IGMP
  /* drop all possibly joined IGMP memberships */
  lwip_socket_drop_registered_memberships(s);
  1115c4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1115c8:	eb001126 	bl	115a68 <lwip_socket_drop_registered_memberships>
#endif /* LWIP_IGMP */

  err = netconn_delete(sock->conn);
  1115cc:	e51b300c 	ldr	r3, [fp, #-12]
  1115d0:	e5933000 	ldr	r3, [r3]
  1115d4:	e1a00003 	mov	r0, r3
  1115d8:	ebffe6bb 	bl	10b0cc <netconn_delete>
  1115dc:	e1a03000 	mov	r3, r0
  1115e0:	e54b300d 	strb	r3, [fp, #-13]
  if (err != ERR_OK) {
  1115e4:	e15b30dd 	ldrsb	r3, [fp, #-13]
  1115e8:	e3530000 	cmp	r3, #0
  1115ec:	0a000010 	beq	111634 <lwip_close+0x10c>
    sock_set_errno(sock, err_to_errno(err));
  1115f0:	e15b30dd 	ldrsb	r3, [fp, #-13]
  1115f4:	e1a00003 	mov	r0, r3
  1115f8:	ebfff947 	bl	10fb1c <err_to_errno>
  1115fc:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  111600:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111604:	e6ef2073 	uxtb	r2, r3
  111608:	e51b300c 	ldr	r3, [fp, #-12]
  11160c:	e5c32010 	strb	r2, [r3, #16]
  111610:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111614:	e3530000 	cmp	r3, #0
  111618:	0a000003 	beq	11162c <lwip_close+0x104>
  11161c:	eb009bcc 	bl	138554 <__errno_location>
  111620:	e1a02000 	mov	r2, r0
  111624:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111628:	e5823000 	str	r3, [r2]
    return -1;
  11162c:	e3e03000 	mvn	r3, #0
  111630:	ea000003 	b	111644 <lwip_close+0x11c>
  }

  free_socket(sock, is_tcp);
  111634:	e51b1008 	ldr	r1, [fp, #-8]
  111638:	e51b000c 	ldr	r0, [fp, #-12]
  11163c:	ebfffe21 	bl	110ec8 <free_socket>
  set_errno(0);
  return 0;
  111640:	e3a03000 	mov	r3, #0
}
  111644:	e1a00003 	mov	r0, r3
  111648:	e24bd004 	sub	sp, fp, #4
  11164c:	e8bd8800 	pop	{fp, pc}

00111650 <lwip_connect>:

int
lwip_connect(int s, const struct sockaddr *name, socklen_t namelen)
{
  111650:	e92d4800 	push	{fp, lr}
  111654:	e28db004 	add	fp, sp, #4
  111658:	e24dd030 	sub	sp, sp, #48	; 0x30
  11165c:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  111660:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  111664:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  struct lwip_sock *sock;
  err_t err;

  sock = get_socket(s);
  111668:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  11166c:	ebfffd52 	bl	110bbc <get_socket>
  111670:	e50b000c 	str	r0, [fp, #-12]
  if (!sock) {
  111674:	e51b300c 	ldr	r3, [fp, #-12]
  111678:	e3530000 	cmp	r3, #0
  11167c:	1a000001 	bne	111688 <lwip_connect+0x38>
    return -1;
  111680:	e3e03000 	mvn	r3, #0
  111684:	ea000063 	b	111818 <lwip_connect+0x1c8>
    sock_set_errno(sock, err_to_errno(ERR_VAL));
    return -1;
  }

  LWIP_UNUSED_ARG(namelen);
  if (name->sa_family == AF_UNSPEC) {
  111688:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11168c:	e5d33001 	ldrb	r3, [r3, #1]
  111690:	e3530000 	cmp	r3, #0
  111694:	1a000006 	bne	1116b4 <lwip_connect+0x64>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d, AF_UNSPEC)\n", s));
    err = netconn_disconnect(sock->conn);
  111698:	e51b300c 	ldr	r3, [fp, #-12]
  11169c:	e5933000 	ldr	r3, [r3]
  1116a0:	e1a00003 	mov	r0, r3
  1116a4:	ebffe73a 	bl	10b394 <netconn_disconnect>
  1116a8:	e1a03000 	mov	r3, r0
  1116ac:	e54b3005 	strb	r3, [fp, #-5]
  1116b0:	ea000036 	b	111790 <lwip_connect+0x140>
  } else {
    ip_addr_t remote_addr;
    u16_t remote_port;

    /* check size, family and alignment of 'name' */
    LWIP_ERROR("lwip_connect: invalid address", IS_SOCK_ADDR_LEN_VALID(namelen) &&
  1116b4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1116b8:	e3530010 	cmp	r3, #16
  1116bc:	1a00000b 	bne	1116f0 <lwip_connect+0xa0>
  1116c0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1116c4:	e5d33001 	ldrb	r3, [r3, #1]
  1116c8:	e3530000 	cmp	r3, #0
  1116cc:	0a000003 	beq	1116e0 <lwip_connect+0x90>
  1116d0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1116d4:	e5d33001 	ldrb	r3, [r3, #1]
  1116d8:	e3530002 	cmp	r3, #2
  1116dc:	1a000003 	bne	1116f0 <lwip_connect+0xa0>
  1116e0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1116e4:	e2033003 	and	r3, r3, #3
  1116e8:	e3530000 	cmp	r3, #0
  1116ec:	0a000016 	beq	11174c <lwip_connect+0xfc>
  1116f0:	e306034c 	movw	r0, #25420	; 0x634c
  1116f4:	e3400014 	movt	r0, #20
  1116f8:	ebffc685 	bl	103114 <rt_kprintf>
  1116fc:	e3a01fad 	mov	r1, #692	; 0x2b4
  111700:	e30602b4 	movw	r0, #25268	; 0x62b4
  111704:	e3400014 	movt	r0, #20
  111708:	ebffe501 	bl	10ab14 <sys_arch_assert>
  11170c:	e3e0000f 	mvn	r0, #15
  111710:	ebfff901 	bl	10fb1c <err_to_errno>
  111714:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  111718:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11171c:	e6ef2073 	uxtb	r2, r3
  111720:	e51b300c 	ldr	r3, [fp, #-12]
  111724:	e5c32010 	strb	r2, [r3, #16]
  111728:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11172c:	e3530000 	cmp	r3, #0
  111730:	0a000003 	beq	111744 <lwip_connect+0xf4>
  111734:	eb009b86 	bl	138554 <__errno_location>
  111738:	e1a02000 	mov	r2, r0
  11173c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111740:	e5823000 	str	r3, [r2]
  111744:	e3e03000 	mvn	r3, #0
  111748:	ea000032 	b	111818 <lwip_connect+0x1c8>
               IS_SOCK_ADDR_TYPE_VALID_OR_UNSPEC(name) && IS_SOCK_ADDR_ALIGNED(name),
               sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);

    SOCKADDR_TO_IPADDR_PORT(name, &remote_addr, remote_port);
  11174c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111750:	e5933004 	ldr	r3, [r3, #4]
  111754:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  111758:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11175c:	e1d330b2 	ldrh	r3, [r3, #2]
  111760:	e1a00003 	mov	r0, r3
  111764:	eb0012c1 	bl	116270 <lwip_htons>
  111768:	e1a03000 	mov	r3, r0
  11176c:	e14b30be 	strh	r3, [fp, #-14]
      unmap_ipv4_mapped_ipv6(ip_2_ip4(&remote_addr), ip_2_ip6(&remote_addr));
      IP_SET_TYPE_VAL(remote_addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    err = netconn_connect(sock->conn, &remote_addr, remote_port);
  111770:	e51b300c 	ldr	r3, [fp, #-12]
  111774:	e5933000 	ldr	r3, [r3]
  111778:	e15b20be 	ldrh	r2, [fp, #-14]
  11177c:	e24b1020 	sub	r1, fp, #32
  111780:	e1a00003 	mov	r0, r3
  111784:	ebffe6d8 	bl	10b2ec <netconn_connect>
  111788:	e1a03000 	mov	r3, r0
  11178c:	e54b3005 	strb	r3, [fp, #-5]
  }

  if (err != ERR_OK) {
  111790:	e15b30d5 	ldrsb	r3, [fp, #-5]
  111794:	e3530000 	cmp	r3, #0
  111798:	0a000010 	beq	1117e0 <lwip_connect+0x190>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
  11179c:	e15b30d5 	ldrsb	r3, [fp, #-5]
  1117a0:	e1a00003 	mov	r0, r3
  1117a4:	ebfff8dc 	bl	10fb1c <err_to_errno>
  1117a8:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
  1117ac:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1117b0:	e6ef2073 	uxtb	r2, r3
  1117b4:	e51b300c 	ldr	r3, [fp, #-12]
  1117b8:	e5c32010 	strb	r2, [r3, #16]
  1117bc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1117c0:	e3530000 	cmp	r3, #0
  1117c4:	0a000003 	beq	1117d8 <lwip_connect+0x188>
  1117c8:	eb009b61 	bl	138554 <__errno_location>
  1117cc:	e1a02000 	mov	r2, r0
  1117d0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1117d4:	e5823000 	str	r3, [r2]
    return -1;
  1117d8:	e3e03000 	mvn	r3, #0
  1117dc:	ea00000d 	b	111818 <lwip_connect+0x1c8>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
  1117e0:	e3a03000 	mov	r3, #0
  1117e4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  1117e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1117ec:	e6ef2073 	uxtb	r2, r3
  1117f0:	e51b300c 	ldr	r3, [fp, #-12]
  1117f4:	e5c32010 	strb	r2, [r3, #16]
  1117f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1117fc:	e3530000 	cmp	r3, #0
  111800:	0a000003 	beq	111814 <lwip_connect+0x1c4>
  111804:	eb009b52 	bl	138554 <__errno_location>
  111808:	e1a02000 	mov	r2, r0
  11180c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111810:	e5823000 	str	r3, [r2]
  return 0;
  111814:	e3a03000 	mov	r3, #0
}
  111818:	e1a00003 	mov	r0, r3
  11181c:	e24bd004 	sub	sp, fp, #4
  111820:	e8bd8800 	pop	{fp, pc}

00111824 <lwip_listen>:
 * @param backlog (ATTENTION: needs TCP_LISTEN_BACKLOG=1)
 * @return 0 on success, non-zero on failure
 */
int
lwip_listen(int s, int backlog)
{
  111824:	e92d4800 	push	{fp, lr}
  111828:	e28db004 	add	fp, sp, #4
  11182c:	e24dd020 	sub	sp, sp, #32
  111830:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  111834:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  struct lwip_sock *sock;
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d, backlog=%d)\n", s, backlog));

  sock = get_socket(s);
  111838:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  11183c:	ebfffcde 	bl	110bbc <get_socket>
  111840:	e50b0008 	str	r0, [fp, #-8]
  if (!sock) {
  111844:	e51b3008 	ldr	r3, [fp, #-8]
  111848:	e3530000 	cmp	r3, #0
  11184c:	1a000001 	bne	111858 <lwip_listen+0x34>
    return -1;
  111850:	e3e03000 	mvn	r3, #0
  111854:	ea000047 	b	111978 <lwip_listen+0x154>
  }

  /* limit the "backlog" parameter to fit in an u8_t */
  backlog = LWIP_MIN(LWIP_MAX(backlog, 0), 0xff);
  111858:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11185c:	e35300fe 	cmp	r3, #254	; 0xfe
  111860:	ca000002 	bgt	111870 <lwip_listen+0x4c>
  111864:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111868:	e1c33fc3 	bic	r3, r3, r3, asr #31
  11186c:	ea000000 	b	111874 <lwip_listen+0x50>
  111870:	e3a030ff 	mov	r3, #255	; 0xff
  111874:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc

  err = netconn_listen_with_backlog(sock->conn, (u8_t)backlog);
  111878:	e51b3008 	ldr	r3, [fp, #-8]
  11187c:	e5933000 	ldr	r3, [r3]
  111880:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  111884:	e6ef2072 	uxtb	r2, r2
  111888:	e1a01002 	mov	r1, r2
  11188c:	e1a00003 	mov	r0, r3
  111890:	ebffe6dc 	bl	10b408 <netconn_listen_with_backlog>
  111894:	e1a03000 	mov	r3, r0
  111898:	e54b3009 	strb	r3, [fp, #-9]

  if (err != ERR_OK) {
  11189c:	e15b30d9 	ldrsb	r3, [fp, #-9]
  1118a0:	e3530000 	cmp	r3, #0
  1118a4:	0a000025 	beq	111940 <lwip_listen+0x11c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d) failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
  1118a8:	e51b3008 	ldr	r3, [fp, #-8]
  1118ac:	e5933000 	ldr	r3, [r3]
  1118b0:	e5933000 	ldr	r3, [r3]
  1118b4:	e20330f0 	and	r3, r3, #240	; 0xf0
  1118b8:	e3530010 	cmp	r3, #16
  1118bc:	0a00000e 	beq	1118fc <lwip_listen+0xd8>
      sock_set_errno(sock, EOPNOTSUPP);
  1118c0:	e3a0305f 	mov	r3, #95	; 0x5f
  1118c4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  1118c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1118cc:	e6ef2073 	uxtb	r2, r3
  1118d0:	e51b3008 	ldr	r3, [fp, #-8]
  1118d4:	e5c32010 	strb	r2, [r3, #16]
  1118d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1118dc:	e3530000 	cmp	r3, #0
  1118e0:	0a000003 	beq	1118f4 <lwip_listen+0xd0>
  1118e4:	eb009b1a 	bl	138554 <__errno_location>
  1118e8:	e1a02000 	mov	r2, r0
  1118ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1118f0:	e5823000 	str	r3, [r2]
      return -1;
  1118f4:	e3e03000 	mvn	r3, #0
  1118f8:	ea00001e 	b	111978 <lwip_listen+0x154>
    }
    sock_set_errno(sock, err_to_errno(err));
  1118fc:	e15b30d9 	ldrsb	r3, [fp, #-9]
  111900:	e1a00003 	mov	r0, r3
  111904:	ebfff884 	bl	10fb1c <err_to_errno>
  111908:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  11190c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111910:	e6ef2073 	uxtb	r2, r3
  111914:	e51b3008 	ldr	r3, [fp, #-8]
  111918:	e5c32010 	strb	r2, [r3, #16]
  11191c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111920:	e3530000 	cmp	r3, #0
  111924:	0a000003 	beq	111938 <lwip_listen+0x114>
  111928:	eb009b09 	bl	138554 <__errno_location>
  11192c:	e1a02000 	mov	r2, r0
  111930:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111934:	e5823000 	str	r3, [r2]
    return -1;
  111938:	e3e03000 	mvn	r3, #0
  11193c:	ea00000d 	b	111978 <lwip_listen+0x154>
  }

  sock_set_errno(sock, 0);
  111940:	e3a03000 	mov	r3, #0
  111944:	e50b3010 	str	r3, [fp, #-16]
  111948:	e51b3010 	ldr	r3, [fp, #-16]
  11194c:	e6ef2073 	uxtb	r2, r3
  111950:	e51b3008 	ldr	r3, [fp, #-8]
  111954:	e5c32010 	strb	r2, [r3, #16]
  111958:	e51b3010 	ldr	r3, [fp, #-16]
  11195c:	e3530000 	cmp	r3, #0
  111960:	0a000003 	beq	111974 <lwip_listen+0x150>
  111964:	eb009afa 	bl	138554 <__errno_location>
  111968:	e1a02000 	mov	r2, r0
  11196c:	e51b3010 	ldr	r3, [fp, #-16]
  111970:	e5823000 	str	r3, [r2]
  return 0;
  111974:	e3a03000 	mov	r3, #0
}
  111978:	e1a00003 	mov	r0, r3
  11197c:	e24bd004 	sub	sp, fp, #4
  111980:	e8bd8800 	pop	{fp, pc}

00111984 <lwip_recvfrom>:

int
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
  111984:	e92d4810 	push	{r4, fp, lr}
  111988:	e28db008 	add	fp, sp, #8
  11198c:	e24dd05c 	sub	sp, sp, #92	; 0x5c
  111990:	e50b0058 	str	r0, [fp, #-88]	; 0xffffffa8
  111994:	e50b105c 	str	r1, [fp, #-92]	; 0xffffffa4
  111998:	e50b2060 	str	r2, [fp, #-96]	; 0xffffffa0
  11199c:	e50b3064 	str	r3, [fp, #-100]	; 0xffffff9c
  struct lwip_sock *sock;
  void             *buf = NULL;
  1119a0:	e3a03000 	mov	r3, #0
  1119a4:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  struct pbuf      *p;
  u16_t            buflen, copylen;
  int              off = 0;
  1119a8:	e3a03000 	mov	r3, #0
  1119ac:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  u8_t             done = 0;
  1119b0:	e3a03000 	mov	r3, #0
  1119b4:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  err_t            err;
  
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
  1119b8:	e51b0058 	ldr	r0, [fp, #-88]	; 0xffffffa8
  1119bc:	ebfffc7e 	bl	110bbc <get_socket>
  1119c0:	e50b0024 	str	r0, [fp, #-36]	; 0xffffffdc
  if (!sock) {
  1119c4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1119c8:	e3530000 	cmp	r3, #0
  1119cc:	1a000001 	bne	1119d8 <lwip_recvfrom+0x54>
    return -1;
  1119d0:	e3e03000 	mvn	r3, #0
  1119d4:	ea00015b 	b	111f48 <lwip_recvfrom+0x5c4>
  }

  do {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: top while sock->lastdata=%p\n", sock->lastdata));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata) {
  1119d8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1119dc:	e5933004 	ldr	r3, [r3, #4]
  1119e0:	e3530000 	cmp	r3, #0
  1119e4:	0a000003 	beq	1119f8 <lwip_recvfrom+0x74>
      buf = sock->lastdata;
  1119e8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1119ec:	e5933004 	ldr	r3, [r3, #4]
  1119f0:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  1119f4:	ea00007d 	b	111bf0 <lwip_recvfrom+0x26c>
    } else {
      /* If this is non-blocking call, then check first */
      if (((flags & MSG_DONTWAIT) || netconn_is_nonblocking(sock->conn)) &&
  1119f8:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
  1119fc:	e2033008 	and	r3, r3, #8
  111a00:	e3530000 	cmp	r3, #0
  111a04:	1a000005 	bne	111a20 <lwip_recvfrom+0x9c>
  111a08:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111a0c:	e5933000 	ldr	r3, [r3]
  111a10:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  111a14:	e2033002 	and	r3, r3, #2
  111a18:	e3530000 	cmp	r3, #0
  111a1c:	0a00001b 	beq	111a90 <lwip_recvfrom+0x10c>
          (sock->rcvevent <= 0)) {
  111a20:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111a24:	e1d330fa 	ldrsh	r3, [r3, #10]
      if (((flags & MSG_DONTWAIT) || netconn_is_nonblocking(sock->conn)) &&
  111a28:	e3530000 	cmp	r3, #0
  111a2c:	ca000017 	bgt	111a90 <lwip_recvfrom+0x10c>
        if (off > 0) {
  111a30:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111a34:	e3530000 	cmp	r3, #0
  111a38:	da00000e 	ble	111a78 <lwip_recvfrom+0xf4>
          /* already received data, return that */
          sock_set_errno(sock, 0);
  111a3c:	e3a03000 	mov	r3, #0
  111a40:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  111a44:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  111a48:	e6ef2073 	uxtb	r2, r3
  111a4c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111a50:	e5c32010 	strb	r2, [r3, #16]
  111a54:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  111a58:	e3530000 	cmp	r3, #0
  111a5c:	0a000003 	beq	111a70 <lwip_recvfrom+0xec>
  111a60:	eb009abb 	bl	138554 <__errno_location>
  111a64:	e1a02000 	mov	r2, r0
  111a68:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  111a6c:	e5823000 	str	r3, [r2]
          return off;
  111a70:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111a74:	ea000133 	b	111f48 <lwip_recvfrom+0x5c4>
        }

        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d): returning EWOULDBLOCK\n", s));
        set_errno(EWOULDBLOCK);
  111a78:	eb009ab5 	bl	138554 <__errno_location>
  111a7c:	e1a02000 	mov	r2, r0
  111a80:	e3a0300b 	mov	r3, #11
  111a84:	e5823000 	str	r3, [r2]
        return -1;
  111a88:	e3e03000 	mvn	r3, #0
  111a8c:	ea00012d 	b	111f48 <lwip_recvfrom+0x5c4>
      }
      /* No data was left from the previous operation, so we try to get
         some from the network. */
      if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
  111a90:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111a94:	e5933000 	ldr	r3, [r3]
  111a98:	e5933000 	ldr	r3, [r3]
  111a9c:	e20330f0 	and	r3, r3, #240	; 0xf0
  111aa0:	e3530010 	cmp	r3, #16
  111aa4:	1a000008 	bne	111acc <lwip_recvfrom+0x148>
        err = netconn_recv_tcp_pbuf(sock->conn, (struct pbuf **)&buf);
  111aa8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111aac:	e5933000 	ldr	r3, [r3]
  111ab0:	e24b203c 	sub	r2, fp, #60	; 0x3c
  111ab4:	e1a01002 	mov	r1, r2
  111ab8:	e1a00003 	mov	r0, r3
  111abc:	ebffe794 	bl	10b914 <netconn_recv_tcp_pbuf>
  111ac0:	e1a03000 	mov	r3, r0
  111ac4:	e54b301a 	strb	r3, [fp, #-26]	; 0xffffffe6
  111ac8:	ea000007 	b	111aec <lwip_recvfrom+0x168>
      } else {
        err = netconn_recv(sock->conn, (struct netbuf **)&buf);
  111acc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111ad0:	e5933000 	ldr	r3, [r3]
  111ad4:	e24b203c 	sub	r2, fp, #60	; 0x3c
  111ad8:	e1a01002 	mov	r1, r2
  111adc:	e1a00003 	mov	r0, r3
  111ae0:	ebffe7a8 	bl	10b988 <netconn_recv>
  111ae4:	e1a03000 	mov	r3, r0
  111ae8:	e54b301a 	strb	r3, [fp, #-26]	; 0xffffffe6
      }
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: netconn_recv err=%d, netbuf=%p\n",
        err, buf));

      if (err != ERR_OK) {
  111aec:	e15b31da 	ldrsb	r3, [fp, #-26]	; 0xffffffe6
  111af0:	e3530000 	cmp	r3, #0
  111af4:	0a000030 	beq	111bbc <lwip_recvfrom+0x238>
        if (off > 0) {
  111af8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111afc:	e3530000 	cmp	r3, #0
  111b00:	da000017 	ble	111b64 <lwip_recvfrom+0x1e0>
          if (err == ERR_CLSD) {
  111b04:	e15b31da 	ldrsb	r3, [fp, #-26]	; 0xffffffe6
  111b08:	e373000f 	cmn	r3, #15
  111b0c:	1a000005 	bne	111b28 <lwip_recvfrom+0x1a4>
            /* closed but already received data, ensure select gets the FIN, too */
            event_callback(sock->conn, NETCONN_EVT_RCVPLUS, 0);
  111b10:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111b14:	e5933000 	ldr	r3, [r3]
  111b18:	e3a02000 	mov	r2, #0
  111b1c:	e3a01000 	mov	r1, #0
  111b20:	e1a00003 	mov	r0, r3
  111b24:	eb0006bc 	bl	11361c <event_callback>
          }
          /* already received data, return that */
          sock_set_errno(sock, 0);
  111b28:	e3a03000 	mov	r3, #0
  111b2c:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
  111b30:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  111b34:	e6ef2073 	uxtb	r2, r3
  111b38:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111b3c:	e5c32010 	strb	r2, [r3, #16]
  111b40:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  111b44:	e3530000 	cmp	r3, #0
  111b48:	0a000003 	beq	111b5c <lwip_recvfrom+0x1d8>
  111b4c:	eb009a80 	bl	138554 <__errno_location>
  111b50:	e1a02000 	mov	r2, r0
  111b54:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  111b58:	e5823000 	str	r3, [r2]
          return off;
  111b5c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111b60:	ea0000f8 	b	111f48 <lwip_recvfrom+0x5c4>
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d): buf == NULL, error is \"%s\"!\n",
          s, lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
  111b64:	e15b31da 	ldrsb	r3, [fp, #-26]	; 0xffffffe6
  111b68:	e1a00003 	mov	r0, r3
  111b6c:	ebfff7ea 	bl	10fb1c <err_to_errno>
  111b70:	e50b002c 	str	r0, [fp, #-44]	; 0xffffffd4
  111b74:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111b78:	e6ef2073 	uxtb	r2, r3
  111b7c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111b80:	e5c32010 	strb	r2, [r3, #16]
  111b84:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111b88:	e3530000 	cmp	r3, #0
  111b8c:	0a000003 	beq	111ba0 <lwip_recvfrom+0x21c>
  111b90:	eb009a6f 	bl	138554 <__errno_location>
  111b94:	e1a02000 	mov	r2, r0
  111b98:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111b9c:	e5823000 	str	r3, [r2]
        if (err == ERR_CLSD) {
  111ba0:	e15b31da 	ldrsb	r3, [fp, #-26]	; 0xffffffe6
  111ba4:	e373000f 	cmn	r3, #15
  111ba8:	1a000001 	bne	111bb4 <lwip_recvfrom+0x230>
          return 0;
  111bac:	e3a03000 	mov	r3, #0
  111bb0:	ea0000e4 	b	111f48 <lwip_recvfrom+0x5c4>
        } else {
          return -1;
  111bb4:	e3e03000 	mvn	r3, #0
  111bb8:	ea0000e2 	b	111f48 <lwip_recvfrom+0x5c4>
        }
      }
      LWIP_ASSERT("buf != NULL", buf != NULL);
  111bbc:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  111bc0:	e3530000 	cmp	r3, #0
  111bc4:	1a000006 	bne	111be4 <lwip_recvfrom+0x260>
  111bc8:	e306036c 	movw	r0, #25452	; 0x636c
  111bcc:	e3400014 	movt	r0, #20
  111bd0:	ebffc54f 	bl	103114 <rt_kprintf>
  111bd4:	e3a01fcf 	mov	r1, #828	; 0x33c
  111bd8:	e30602b4 	movw	r0, #25268	; 0x62b4
  111bdc:	e3400014 	movt	r0, #20
  111be0:	ebffe3cb 	bl	10ab14 <sys_arch_assert>
      sock->lastdata = buf;
  111be4:	e51b203c 	ldr	r2, [fp, #-60]	; 0xffffffc4
  111be8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111bec:	e5832004 	str	r2, [r3, #4]
    }

    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
  111bf0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111bf4:	e5933000 	ldr	r3, [r3]
  111bf8:	e5933000 	ldr	r3, [r3]
  111bfc:	e20330f0 	and	r3, r3, #240	; 0xf0
  111c00:	e3530010 	cmp	r3, #16
  111c04:	1a000002 	bne	111c14 <lwip_recvfrom+0x290>
      p = (struct pbuf *)buf;
  111c08:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  111c0c:	e50b3010 	str	r3, [fp, #-16]
  111c10:	ea000002 	b	111c20 <lwip_recvfrom+0x29c>
    } else {
      p = ((struct netbuf *)buf)->p;
  111c14:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  111c18:	e5933000 	ldr	r3, [r3]
  111c1c:	e50b3010 	str	r3, [fp, #-16]
    }
    buflen = p->tot_len;
  111c20:	e51b3010 	ldr	r3, [fp, #-16]
  111c24:	e1d330b8 	ldrh	r3, [r3, #8]
  111c28:	e14b33b2 	strh	r3, [fp, #-50]	; 0xffffffce
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: buflen=%"U16_F" len=%"SZT_F" off=%d sock->lastoffset=%"U16_F"\n",
      buflen, len, off, sock->lastoffset));

    buflen -= sock->lastoffset;
  111c2c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111c30:	e1d330b8 	ldrh	r3, [r3, #8]
  111c34:	e15b23b2 	ldrh	r2, [fp, #-50]	; 0xffffffce
  111c38:	e0423003 	sub	r3, r2, r3
  111c3c:	e14b33b2 	strh	r3, [fp, #-50]	; 0xffffffce

    if (len > buflen) {
  111c40:	e15b33b2 	ldrh	r3, [fp, #-50]	; 0xffffffce
  111c44:	e51b2060 	ldr	r2, [fp, #-96]	; 0xffffffa0
  111c48:	e1520003 	cmp	r2, r3
  111c4c:	9a000002 	bls	111c5c <lwip_recvfrom+0x2d8>
      copylen = buflen;
  111c50:	e15b33b2 	ldrh	r3, [fp, #-50]	; 0xffffffce
  111c54:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  111c58:	ea000001 	b	111c64 <lwip_recvfrom+0x2e0>
    } else {
      copylen = (u16_t)len;
  111c5c:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
  111c60:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t*)mem + off, copylen, sock->lastoffset);
  111c64:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111c68:	e51b205c 	ldr	r2, [fp, #-92]	; 0xffffffa4
  111c6c:	e0821003 	add	r1, r2, r3
  111c70:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111c74:	e1d330b8 	ldrh	r3, [r3, #8]
  111c78:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  111c7c:	e51b0010 	ldr	r0, [fp, #-16]
  111c80:	eb0025bc 	bl	11b378 <pbuf_copy_partial>

    off += copylen;
  111c84:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  111c88:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  111c8c:	e0823003 	add	r3, r2, r3
  111c90:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
  111c94:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111c98:	e5933000 	ldr	r3, [r3]
  111c9c:	e5933000 	ldr	r3, [r3]
  111ca0:	e20330f0 	and	r3, r3, #240	; 0xf0
  111ca4:	e3530010 	cmp	r3, #16
  111ca8:	1a000021 	bne	111d34 <lwip_recvfrom+0x3b0>
      LWIP_ASSERT("invalid copylen, len would underflow", len >= copylen);
  111cac:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  111cb0:	e51b2060 	ldr	r2, [fp, #-96]	; 0xffffffa0
  111cb4:	e1520003 	cmp	r2, r3
  111cb8:	2a000006 	bcs	111cd8 <lwip_recvfrom+0x354>
  111cbc:	e3060378 	movw	r0, #25464	; 0x6378
  111cc0:	e3400014 	movt	r0, #20
  111cc4:	ebffc512 	bl	103114 <rt_kprintf>
  111cc8:	e3a01fd6 	mov	r1, #856	; 0x358
  111ccc:	e30602b4 	movw	r0, #25268	; 0x62b4
  111cd0:	e3400014 	movt	r0, #20
  111cd4:	ebffe38e 	bl	10ab14 <sys_arch_assert>
      len -= copylen;
  111cd8:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  111cdc:	e51b2060 	ldr	r2, [fp, #-96]	; 0xffffffa0
  111ce0:	e0423003 	sub	r3, r2, r3
  111ce4:	e50b3060 	str	r3, [fp, #-96]	; 0xffffffa0
      if ((len <= 0) ||
  111ce8:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
  111cec:	e3530000 	cmp	r3, #0
  111cf0:	0a00000c 	beq	111d28 <lwip_recvfrom+0x3a4>
          (p->flags & PBUF_FLAG_PUSH) ||
  111cf4:	e51b3010 	ldr	r3, [fp, #-16]
  111cf8:	e5d3300d 	ldrb	r3, [r3, #13]
  111cfc:	e2033001 	and	r3, r3, #1
      if ((len <= 0) ||
  111d00:	e3530000 	cmp	r3, #0
  111d04:	1a000007 	bne	111d28 <lwip_recvfrom+0x3a4>
          (sock->rcvevent <= 0) ||
  111d08:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111d0c:	e1d330fa 	ldrsh	r3, [r3, #10]
          (p->flags & PBUF_FLAG_PUSH) ||
  111d10:	e3530000 	cmp	r3, #0
  111d14:	da000003 	ble	111d28 <lwip_recvfrom+0x3a4>
          ((flags & MSG_PEEK) != 0)) {
  111d18:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
  111d1c:	e2033001 	and	r3, r3, #1
          (sock->rcvevent <= 0) ||
  111d20:	e3530000 	cmp	r3, #0
  111d24:	0a000004 	beq	111d3c <lwip_recvfrom+0x3b8>
        done = 1;
  111d28:	e3a03001 	mov	r3, #1
  111d2c:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  111d30:	ea000001 	b	111d3c <lwip_recvfrom+0x3b8>
      }
    } else {
      done = 1;
  111d34:	e3a03001 	mov	r3, #1
  111d38:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
    }

    /* Check to see from where the data was.*/
    if (done) {
  111d3c:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
  111d40:	e3530000 	cmp	r3, #0
  111d44:	0a00003f 	beq	111e48 <lwip_recvfrom+0x4c4>
#if !SOCKETS_DEBUG
      if (from && fromlen)
  111d48:	e59b3004 	ldr	r3, [fp, #4]
  111d4c:	e3530000 	cmp	r3, #0
  111d50:	0a00003c 	beq	111e48 <lwip_recvfrom+0x4c4>
  111d54:	e59b3008 	ldr	r3, [fp, #8]
  111d58:	e3530000 	cmp	r3, #0
  111d5c:	0a000039 	beq	111e48 <lwip_recvfrom+0x4c4>
        u16_t port;
        ip_addr_t tmpaddr;
        ip_addr_t *fromaddr;
        union sockaddr_aligned saddr;
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d): addr=", s));
        if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
  111d60:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111d64:	e5933000 	ldr	r3, [r3]
  111d68:	e5933000 	ldr	r3, [r3]
  111d6c:	e20330f0 	and	r3, r3, #240	; 0xf0
  111d70:	e3530010 	cmp	r3, #16
  111d74:	1a000008 	bne	111d9c <lwip_recvfrom+0x418>
          fromaddr = &tmpaddr;
  111d78:	e24b3044 	sub	r3, fp, #68	; 0x44
  111d7c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
          netconn_getaddr(sock->conn, fromaddr, &port, 0);
  111d80:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111d84:	e5930000 	ldr	r0, [r3]
  111d88:	e24b203e 	sub	r2, fp, #62	; 0x3e
  111d8c:	e3a03000 	mov	r3, #0
  111d90:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  111d94:	ebffe4ec 	bl	10b14c <netconn_getaddr>
  111d98:	ea000005 	b	111db4 <lwip_recvfrom+0x430>
        } else {
          port = netbuf_fromport((struct netbuf *)buf);
  111d9c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  111da0:	e1d330bc 	ldrh	r3, [r3, #12]
  111da4:	e14b33be 	strh	r3, [fp, #-62]	; 0xffffffc2
          fromaddr = netbuf_fromaddr((struct netbuf *)buf);
  111da8:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  111dac:	e2833008 	add	r3, r3, #8
  111db0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
          ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
          IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
        }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

        IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
  111db4:	e24b3054 	sub	r3, fp, #84	; 0x54
  111db8:	e3a02010 	mov	r2, #16
  111dbc:	e5c32000 	strb	r2, [r3]
  111dc0:	e24b3054 	sub	r3, fp, #84	; 0x54
  111dc4:	e3a02002 	mov	r2, #2
  111dc8:	e5c32001 	strb	r2, [r3, #1]
  111dcc:	e15b33be 	ldrh	r3, [fp, #-62]	; 0xffffffc2
  111dd0:	e24b4054 	sub	r4, fp, #84	; 0x54
  111dd4:	e1a00003 	mov	r0, r3
  111dd8:	eb001124 	bl	116270 <lwip_htons>
  111ddc:	e1a03000 	mov	r3, r0
  111de0:	e1c430b2 	strh	r3, [r4, #2]
  111de4:	e24b3054 	sub	r3, fp, #84	; 0x54
  111de8:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  111dec:	e5922000 	ldr	r2, [r2]
  111df0:	e5832004 	str	r2, [r3, #4]
  111df4:	e24b3054 	sub	r3, fp, #84	; 0x54
  111df8:	e2833008 	add	r3, r3, #8
  111dfc:	e3a02008 	mov	r2, #8
  111e00:	e3a01000 	mov	r1, #0
  111e04:	e1a00003 	mov	r0, r3
  111e08:	eb00bab7 	bl	1408ec <memset>
        LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, off));
#if SOCKETS_DEBUG
        if (from && fromlen)
#endif /* SOCKETS_DEBUG */
        {
          if (*fromlen > saddr.sa.sa_len) {
  111e0c:	e59b3008 	ldr	r3, [fp, #8]
  111e10:	e5933000 	ldr	r3, [r3]
  111e14:	e55b2054 	ldrb	r2, [fp, #-84]	; 0xffffffac
  111e18:	e1530002 	cmp	r3, r2
  111e1c:	9a000003 	bls	111e30 <lwip_recvfrom+0x4ac>
            *fromlen = saddr.sa.sa_len;
  111e20:	e55b3054 	ldrb	r3, [fp, #-84]	; 0xffffffac
  111e24:	e1a02003 	mov	r2, r3
  111e28:	e59b3008 	ldr	r3, [fp, #8]
  111e2c:	e5832000 	str	r2, [r3]
          }
          MEMCPY(from, &saddr, *fromlen);
  111e30:	e59b3008 	ldr	r3, [fp, #8]
  111e34:	e5932000 	ldr	r2, [r3]
  111e38:	e24b3054 	sub	r3, fp, #84	; 0x54
  111e3c:	e1a01003 	mov	r1, r3
  111e40:	e59b0004 	ldr	r0, [fp, #4]
  111e44:	eb00b970 	bl	14040c <memcpy>
        }
      }
    }

    /* If we don't peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
  111e48:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
  111e4c:	e2033001 	and	r3, r3, #1
  111e50:	e3530000 	cmp	r3, #0
  111e54:	1a00002a 	bne	111f04 <lwip_recvfrom+0x580>
      /* If this is a TCP socket, check if there is data left in the
         buffer. If so, it should be saved in the sock structure for next
         time around. */
      if ((NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) && (buflen - copylen > 0)) {
  111e58:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111e5c:	e5933000 	ldr	r3, [r3]
  111e60:	e5933000 	ldr	r3, [r3]
  111e64:	e20330f0 	and	r3, r3, #240	; 0xf0
  111e68:	e3530010 	cmp	r3, #16
  111e6c:	1a00000f 	bne	111eb0 <lwip_recvfrom+0x52c>
  111e70:	e15b23b2 	ldrh	r2, [fp, #-50]	; 0xffffffce
  111e74:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  111e78:	e0423003 	sub	r3, r2, r3
  111e7c:	e3530000 	cmp	r3, #0
  111e80:	da00000a 	ble	111eb0 <lwip_recvfrom+0x52c>
        sock->lastdata = buf;
  111e84:	e51b203c 	ldr	r2, [fp, #-60]	; 0xffffffc4
  111e88:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111e8c:	e5832004 	str	r2, [r3, #4]
        sock->lastoffset += copylen;
  111e90:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111e94:	e1d320b8 	ldrh	r2, [r3, #8]
  111e98:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  111e9c:	e0823003 	add	r3, r2, r3
  111ea0:	e6ff2073 	uxth	r2, r3
  111ea4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111ea8:	e1c320b8 	strh	r2, [r3, #8]
  111eac:	ea000014 	b	111f04 <lwip_recvfrom+0x580>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: lastdata now netbuf=%p\n", buf));
      } else {
        sock->lastdata = NULL;
  111eb0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111eb4:	e3a02000 	mov	r2, #0
  111eb8:	e5832004 	str	r2, [r3, #4]
        sock->lastoffset = 0;
  111ebc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111ec0:	e3a02000 	mov	r2, #0
  111ec4:	e1c320b8 	strh	r2, [r3, #8]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: deleting netbuf=%p\n", buf));
        if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
  111ec8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111ecc:	e5933000 	ldr	r3, [r3]
  111ed0:	e5933000 	ldr	r3, [r3]
  111ed4:	e20330f0 	and	r3, r3, #240	; 0xf0
  111ed8:	e3530010 	cmp	r3, #16
  111edc:	1a000003 	bne	111ef0 <lwip_recvfrom+0x56c>
          pbuf_free((struct pbuf *)buf);
  111ee0:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  111ee4:	e1a00003 	mov	r0, r3
  111ee8:	eb002317 	bl	11ab4c <pbuf_free>
  111eec:	ea000002 	b	111efc <lwip_recvfrom+0x578>
        } else {
          netbuf_delete((struct netbuf *)buf);
  111ef0:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  111ef4:	e1a00003 	mov	r0, r3
  111ef8:	ebfff732 	bl	10fbc8 <netbuf_delete>
        }
        buf = NULL;
  111efc:	e3a03000 	mov	r3, #0
  111f00:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
      }
    }
  } while (!done);
  111f04:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
  111f08:	e3530000 	cmp	r3, #0
  111f0c:	0afffeb1 	beq	1119d8 <lwip_recvfrom+0x54>

  sock_set_errno(sock, 0);
  111f10:	e3a03000 	mov	r3, #0
  111f14:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
  111f18:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  111f1c:	e6ef2073 	uxtb	r2, r3
  111f20:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111f24:	e5c32010 	strb	r2, [r3, #16]
  111f28:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  111f2c:	e3530000 	cmp	r3, #0
  111f30:	0a000003 	beq	111f44 <lwip_recvfrom+0x5c0>
  111f34:	eb009986 	bl	138554 <__errno_location>
  111f38:	e1a02000 	mov	r2, r0
  111f3c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  111f40:	e5823000 	str	r3, [r2]
  return off;
  111f44:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
}
  111f48:	e1a00003 	mov	r0, r3
  111f4c:	e24bd008 	sub	sp, fp, #8
  111f50:	e8bd8810 	pop	{r4, fp, pc}

00111f54 <lwip_read>:

int
lwip_read(int s, void *mem, size_t len)
{
  111f54:	e92d4800 	push	{fp, lr}
  111f58:	e28db004 	add	fp, sp, #4
  111f5c:	e24dd018 	sub	sp, sp, #24
  111f60:	e50b0008 	str	r0, [fp, #-8]
  111f64:	e50b100c 	str	r1, [fp, #-12]
  111f68:	e50b2010 	str	r2, [fp, #-16]
  return lwip_recvfrom(s, mem, len, 0, NULL, NULL);
  111f6c:	e3a03000 	mov	r3, #0
  111f70:	e58d3004 	str	r3, [sp, #4]
  111f74:	e3a03000 	mov	r3, #0
  111f78:	e58d3000 	str	r3, [sp]
  111f7c:	e3a03000 	mov	r3, #0
  111f80:	e51b2010 	ldr	r2, [fp, #-16]
  111f84:	e51b100c 	ldr	r1, [fp, #-12]
  111f88:	e51b0008 	ldr	r0, [fp, #-8]
  111f8c:	ebfffe7c 	bl	111984 <lwip_recvfrom>
  111f90:	e1a03000 	mov	r3, r0
}
  111f94:	e1a00003 	mov	r0, r3
  111f98:	e24bd004 	sub	sp, fp, #4
  111f9c:	e8bd8800 	pop	{fp, pc}

00111fa0 <lwip_recv>:

int
lwip_recv(int s, void *mem, size_t len, int flags)
{
  111fa0:	e92d4800 	push	{fp, lr}
  111fa4:	e28db004 	add	fp, sp, #4
  111fa8:	e24dd018 	sub	sp, sp, #24
  111fac:	e50b0008 	str	r0, [fp, #-8]
  111fb0:	e50b100c 	str	r1, [fp, #-12]
  111fb4:	e50b2010 	str	r2, [fp, #-16]
  111fb8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  return lwip_recvfrom(s, mem, len, flags, NULL, NULL);
  111fbc:	e3a03000 	mov	r3, #0
  111fc0:	e58d3004 	str	r3, [sp, #4]
  111fc4:	e3a03000 	mov	r3, #0
  111fc8:	e58d3000 	str	r3, [sp]
  111fcc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111fd0:	e51b2010 	ldr	r2, [fp, #-16]
  111fd4:	e51b100c 	ldr	r1, [fp, #-12]
  111fd8:	e51b0008 	ldr	r0, [fp, #-8]
  111fdc:	ebfffe68 	bl	111984 <lwip_recvfrom>
  111fe0:	e1a03000 	mov	r3, r0
}
  111fe4:	e1a00003 	mov	r0, r3
  111fe8:	e24bd004 	sub	sp, fp, #4
  111fec:	e8bd8800 	pop	{fp, pc}

00111ff0 <lwip_send>:

int
lwip_send(int s, const void *data, size_t size, int flags)
{
  111ff0:	e92d4800 	push	{fp, lr}
  111ff4:	e28db004 	add	fp, sp, #4
  111ff8:	e24dd028 	sub	sp, sp, #40	; 0x28
  111ffc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  112000:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  112004:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  112008:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
  11200c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  112010:	ebfffae9 	bl	110bbc <get_socket>
  112014:	e50b0008 	str	r0, [fp, #-8]
  if (!sock) {
  112018:	e51b3008 	ldr	r3, [fp, #-8]
  11201c:	e3530000 	cmp	r3, #0
  112020:	1a000001 	bne	11202c <lwip_send+0x3c>
    return -1;
  112024:	e3e03000 	mvn	r3, #0
  112028:	ea000041 	b	112134 <lwip_send+0x144>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
  11202c:	e51b3008 	ldr	r3, [fp, #-8]
  112030:	e5933000 	ldr	r3, [r3]
  112034:	e5933000 	ldr	r3, [r3]
  112038:	e20330f0 	and	r3, r3, #240	; 0xf0
  11203c:	e3530010 	cmp	r3, #16
  112040:	0a00000a 	beq	112070 <lwip_send+0x80>
#if (LWIP_UDP || LWIP_RAW)
    return lwip_sendto(s, data, size, flags, NULL, 0);
  112044:	e3a03000 	mov	r3, #0
  112048:	e58d3004 	str	r3, [sp, #4]
  11204c:	e3a03000 	mov	r3, #0
  112050:	e58d3000 	str	r3, [sp]
  112054:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112058:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  11205c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  112060:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  112064:	eb0001b1 	bl	112730 <lwip_sendto>
  112068:	e1a03000 	mov	r3, r0
  11206c:	ea000030 	b	112134 <lwip_send+0x144>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = NETCONN_COPY |
    ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
  112070:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112074:	e1a031c3 	asr	r3, r3, #3
  112078:	e6af3073 	sxtb	r3, r3
  11207c:	e2033002 	and	r3, r3, #2
  112080:	e6af3073 	sxtb	r3, r3
  write_flags = NETCONN_COPY |
  112084:	e3833001 	orr	r3, r3, #1
  112088:	e6af2073 	sxtb	r2, r3
    ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0);
  11208c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112090:	e1a030c3 	asr	r3, r3, #1
  112094:	e6af3073 	sxtb	r3, r3
  112098:	e2033004 	and	r3, r3, #4
  11209c:	e6af3073 	sxtb	r3, r3
    ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
  1120a0:	e1823003 	orr	r3, r2, r3
  1120a4:	e6af3073 	sxtb	r3, r3
  write_flags = NETCONN_COPY |
  1120a8:	e54b3009 	strb	r3, [fp, #-9]
  written = 0;
  1120ac:	e3a03000 	mov	r3, #0
  1120b0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
  1120b4:	e51b3008 	ldr	r3, [fp, #-8]
  1120b8:	e5930000 	ldr	r0, [r3]
  1120bc:	e55b2009 	ldrb	r2, [fp, #-9]
  1120c0:	e24b3014 	sub	r3, fp, #20
  1120c4:	e58d3000 	str	r3, [sp]
  1120c8:	e1a03002 	mov	r3, r2
  1120cc:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1120d0:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1120d4:	ebffe6ce 	bl	10bc14 <netconn_write_partly>
  1120d8:	e1a03000 	mov	r3, r0
  1120dc:	e54b300a 	strb	r3, [fp, #-10]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
  1120e0:	e15b30da 	ldrsb	r3, [fp, #-10]
  1120e4:	e1a00003 	mov	r0, r3
  1120e8:	ebfff68b 	bl	10fb1c <err_to_errno>
  1120ec:	e50b0010 	str	r0, [fp, #-16]
  1120f0:	e51b3010 	ldr	r3, [fp, #-16]
  1120f4:	e6ef2073 	uxtb	r2, r3
  1120f8:	e51b3008 	ldr	r3, [fp, #-8]
  1120fc:	e5c32010 	strb	r2, [r3, #16]
  112100:	e51b3010 	ldr	r3, [fp, #-16]
  112104:	e3530000 	cmp	r3, #0
  112108:	0a000003 	beq	11211c <lwip_send+0x12c>
  11210c:	eb009910 	bl	138554 <__errno_location>
  112110:	e1a02000 	mov	r2, r0
  112114:	e51b3010 	ldr	r3, [fp, #-16]
  112118:	e5823000 	str	r3, [r2]
  return (err == ERR_OK ? (int)written : -1);
  11211c:	e15b30da 	ldrsb	r3, [fp, #-10]
  112120:	e3530000 	cmp	r3, #0
  112124:	1a000001 	bne	112130 <lwip_send+0x140>
  112128:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11212c:	ea000000 	b	112134 <lwip_send+0x144>
  112130:	e3e03000 	mvn	r3, #0
}
  112134:	e1a00003 	mov	r0, r3
  112138:	e24bd004 	sub	sp, fp, #4
  11213c:	e8bd8800 	pop	{fp, pc}

00112140 <lwip_sendmsg>:

int
lwip_sendmsg(int s, const struct msghdr *msg, int flags)
{
  112140:	e92d4800 	push	{fp, lr}
  112144:	e28db004 	add	fp, sp, #4
  112148:	e24dd058 	sub	sp, sp, #88	; 0x58
  11214c:	e50b0048 	str	r0, [fp, #-72]	; 0xffffffb8
  112150:	e50b104c 	str	r1, [fp, #-76]	; 0xffffffb4
  112154:	e50b2050 	str	r2, [fp, #-80]	; 0xffffffb0
  int i;
#if LWIP_TCP
  u8_t write_flags;
  size_t written;
#endif
  int size = 0;
  112158:	e3a03000 	mov	r3, #0
  11215c:	e50b300c 	str	r3, [fp, #-12]
  err_t err = ERR_OK;
  112160:	e3a03000 	mov	r3, #0
  112164:	e54b300d 	strb	r3, [fp, #-13]

  sock = get_socket(s);
  112168:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  11216c:	ebfffa92 	bl	110bbc <get_socket>
  112170:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  if (!sock) {
  112174:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112178:	e3530000 	cmp	r3, #0
  11217c:	1a000001 	bne	112188 <lwip_sendmsg+0x48>
    return -1;
  112180:	e3e03000 	mvn	r3, #0
  112184:	ea000166 	b	112724 <lwip_sendmsg+0x5e4>
  }

  LWIP_ERROR("lwip_sendmsg: invalid msghdr", msg != NULL,
  112188:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  11218c:	e3530000 	cmp	r3, #0
  112190:	1a000016 	bne	1121f0 <lwip_sendmsg+0xb0>
  112194:	e30603a0 	movw	r0, #25504	; 0x63a0
  112198:	e3400014 	movt	r0, #20
  11219c:	ebffc3dc 	bl	103114 <rt_kprintf>
  1121a0:	e30013eb 	movw	r1, #1003	; 0x3eb
  1121a4:	e30602b4 	movw	r0, #25268	; 0x62b4
  1121a8:	e3400014 	movt	r0, #20
  1121ac:	ebffe258 	bl	10ab14 <sys_arch_assert>
  1121b0:	e3e0000f 	mvn	r0, #15
  1121b4:	ebfff658 	bl	10fb1c <err_to_errno>
  1121b8:	e50b003c 	str	r0, [fp, #-60]	; 0xffffffc4
  1121bc:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  1121c0:	e6ef2073 	uxtb	r2, r3
  1121c4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1121c8:	e5c32010 	strb	r2, [r3, #16]
  1121cc:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  1121d0:	e3530000 	cmp	r3, #0
  1121d4:	0a000003 	beq	1121e8 <lwip_sendmsg+0xa8>
  1121d8:	eb0098dd 	bl	138554 <__errno_location>
  1121dc:	e1a02000 	mov	r2, r0
  1121e0:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  1121e4:	e5823000 	str	r3, [r2]
  1121e8:	e3e03000 	mvn	r3, #0
  1121ec:	ea00014c 	b	112724 <lwip_sendmsg+0x5e4>
             sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);

  LWIP_UNUSED_ARG(msg->msg_control);
  LWIP_UNUSED_ARG(msg->msg_controllen);
  LWIP_UNUSED_ARG(msg->msg_flags);
  LWIP_ERROR("lwip_sendmsg: invalid msghdr iov", (msg->msg_iov != NULL && msg->msg_iovlen != 0),
  1121f0:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  1121f4:	e5933008 	ldr	r3, [r3, #8]
  1121f8:	e3530000 	cmp	r3, #0
  1121fc:	0a000003 	beq	112210 <lwip_sendmsg+0xd0>
  112200:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112204:	e593300c 	ldr	r3, [r3, #12]
  112208:	e3530000 	cmp	r3, #0
  11220c:	1a000016 	bne	11226c <lwip_sendmsg+0x12c>
  112210:	e30603c0 	movw	r0, #25536	; 0x63c0
  112214:	e3400014 	movt	r0, #20
  112218:	ebffc3bd 	bl	103114 <rt_kprintf>
  11221c:	e30013f1 	movw	r1, #1009	; 0x3f1
  112220:	e30602b4 	movw	r0, #25268	; 0x62b4
  112224:	e3400014 	movt	r0, #20
  112228:	ebffe239 	bl	10ab14 <sys_arch_assert>
  11222c:	e3e0000f 	mvn	r0, #15
  112230:	ebfff639 	bl	10fb1c <err_to_errno>
  112234:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
  112238:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  11223c:	e6ef2073 	uxtb	r2, r3
  112240:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112244:	e5c32010 	strb	r2, [r3, #16]
  112248:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  11224c:	e3530000 	cmp	r3, #0
  112250:	0a000003 	beq	112264 <lwip_sendmsg+0x124>
  112254:	eb0098be 	bl	138554 <__errno_location>
  112258:	e1a02000 	mov	r2, r0
  11225c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  112260:	e5823000 	str	r3, [r2]
  112264:	e3e03000 	mvn	r3, #0
  112268:	ea00012d 	b	112724 <lwip_sendmsg+0x5e4>
             sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
  11226c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112270:	e5933000 	ldr	r3, [r3]
  112274:	e5933000 	ldr	r3, [r3]
  112278:	e20330f0 	and	r3, r3, #240	; 0xf0
  11227c:	e3530010 	cmp	r3, #16
  112280:	1a000069 	bne	11242c <lwip_sendmsg+0x2ec>
#if LWIP_TCP
    write_flags = NETCONN_COPY |
    ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
  112284:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
  112288:	e1a031c3 	asr	r3, r3, #3
  11228c:	e6af3073 	sxtb	r3, r3
  112290:	e2033002 	and	r3, r3, #2
  112294:	e6af3073 	sxtb	r3, r3
    write_flags = NETCONN_COPY |
  112298:	e3833001 	orr	r3, r3, #1
  11229c:	e6af2073 	sxtb	r2, r3
    ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0);
  1122a0:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
  1122a4:	e1a030c3 	asr	r3, r3, #1
  1122a8:	e6af3073 	sxtb	r3, r3
  1122ac:	e2033004 	and	r3, r3, #4
  1122b0:	e6af3073 	sxtb	r3, r3
    ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
  1122b4:	e1823003 	orr	r3, r2, r3
  1122b8:	e6af3073 	sxtb	r3, r3
    write_flags = NETCONN_COPY |
  1122bc:	e54b302d 	strb	r3, [fp, #-45]	; 0xffffffd3

    for (i = 0; i < msg->msg_iovlen; i++) {
  1122c0:	e3a03000 	mov	r3, #0
  1122c4:	e50b3008 	str	r3, [fp, #-8]
  1122c8:	ea000041 	b	1123d4 <lwip_sendmsg+0x294>
      u8_t apiflags = write_flags;
  1122cc:	e55b302d 	ldrb	r3, [fp, #-45]	; 0xffffffd3
  1122d0:	e54b302e 	strb	r3, [fp, #-46]	; 0xffffffd2
      if (i + 1 < msg->msg_iovlen) {
  1122d4:	e51b3008 	ldr	r3, [fp, #-8]
  1122d8:	e2832001 	add	r2, r3, #1
  1122dc:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  1122e0:	e593300c 	ldr	r3, [r3, #12]
  1122e4:	e1520003 	cmp	r2, r3
  1122e8:	aa000002 	bge	1122f8 <lwip_sendmsg+0x1b8>
        apiflags |= NETCONN_MORE;
  1122ec:	e55b302e 	ldrb	r3, [fp, #-46]	; 0xffffffd2
  1122f0:	e3833002 	orr	r3, r3, #2
  1122f4:	e54b302e 	strb	r3, [fp, #-46]	; 0xffffffd2
      }
      written = 0;
  1122f8:	e3a03000 	mov	r3, #0
  1122fc:	e50b3040 	str	r3, [fp, #-64]	; 0xffffffc0
      err = netconn_write_partly(sock->conn, msg->msg_iov[i].iov_base, msg->msg_iov[i].iov_len, write_flags, &written);
  112300:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112304:	e5930000 	ldr	r0, [r3]
  112308:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  11230c:	e5932008 	ldr	r2, [r3, #8]
  112310:	e51b3008 	ldr	r3, [fp, #-8]
  112314:	e1a03183 	lsl	r3, r3, #3
  112318:	e0823003 	add	r3, r2, r3
  11231c:	e5931000 	ldr	r1, [r3]
  112320:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112324:	e5932008 	ldr	r2, [r3, #8]
  112328:	e51b3008 	ldr	r3, [fp, #-8]
  11232c:	e1a03183 	lsl	r3, r3, #3
  112330:	e0823003 	add	r3, r2, r3
  112334:	e5932004 	ldr	r2, [r3, #4]
  112338:	e55bc02d 	ldrb	ip, [fp, #-45]	; 0xffffffd3
  11233c:	e24b3040 	sub	r3, fp, #64	; 0x40
  112340:	e58d3000 	str	r3, [sp]
  112344:	e1a0300c 	mov	r3, ip
  112348:	ebffe631 	bl	10bc14 <netconn_write_partly>
  11234c:	e1a03000 	mov	r3, r0
  112350:	e54b300d 	strb	r3, [fp, #-13]
      if (err == ERR_OK) {
  112354:	e15b30dd 	ldrsb	r3, [fp, #-13]
  112358:	e3530000 	cmp	r3, #0
  11235c:	1a00000d 	bne	112398 <lwip_sendmsg+0x258>
        size += written;
  112360:	e51b200c 	ldr	r2, [fp, #-12]
  112364:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  112368:	e0823003 	add	r3, r2, r3
  11236c:	e50b300c 	str	r3, [fp, #-12]
        /* check that the entire IO vector was accepected, if not return a partial write */
        if (written != msg->msg_iov[i].iov_len)
  112370:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112374:	e5932008 	ldr	r2, [r3, #8]
  112378:	e51b3008 	ldr	r3, [fp, #-8]
  11237c:	e1a03183 	lsl	r3, r3, #3
  112380:	e0823003 	add	r3, r2, r3
  112384:	e5932004 	ldr	r2, [r3, #4]
  112388:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  11238c:	e1520003 	cmp	r2, r3
  112390:	0a00000c 	beq	1123c8 <lwip_sendmsg+0x288>
          break;
  112394:	ea000013 	b	1123e8 <lwip_sendmsg+0x2a8>
      }
      /* none of this IO vector was accepted, but previous was, return partial write and conceal ERR_WOULDBLOCK */
      else if (err == ERR_WOULDBLOCK && size > 0) {
  112398:	e15b30dd 	ldrsb	r3, [fp, #-13]
  11239c:	e3730007 	cmn	r3, #7
  1123a0:	1a000005 	bne	1123bc <lwip_sendmsg+0x27c>
  1123a4:	e51b300c 	ldr	r3, [fp, #-12]
  1123a8:	e3530000 	cmp	r3, #0
  1123ac:	da000002 	ble	1123bc <lwip_sendmsg+0x27c>
        err = ERR_OK;
  1123b0:	e3a03000 	mov	r3, #0
  1123b4:	e54b300d 	strb	r3, [fp, #-13]
        /* let ERR_WOULDBLOCK persist on the netconn since we are returning ERR_OK */
        break;
  1123b8:	ea00000a 	b	1123e8 <lwip_sendmsg+0x2a8>
      } else {
        size = -1;
  1123bc:	e3e03000 	mvn	r3, #0
  1123c0:	e50b300c 	str	r3, [fp, #-12]
        break;
  1123c4:	ea000007 	b	1123e8 <lwip_sendmsg+0x2a8>
    for (i = 0; i < msg->msg_iovlen; i++) {
  1123c8:	e51b3008 	ldr	r3, [fp, #-8]
  1123cc:	e2833001 	add	r3, r3, #1
  1123d0:	e50b3008 	str	r3, [fp, #-8]
  1123d4:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  1123d8:	e593300c 	ldr	r3, [r3, #12]
  1123dc:	e51b2008 	ldr	r2, [fp, #-8]
  1123e0:	e1520003 	cmp	r2, r3
  1123e4:	baffffb8 	blt	1122cc <lwip_sendmsg+0x18c>
      }
    }
    sock_set_errno(sock, err_to_errno(err));
  1123e8:	e15b30dd 	ldrsb	r3, [fp, #-13]
  1123ec:	e1a00003 	mov	r0, r3
  1123f0:	ebfff5c9 	bl	10fb1c <err_to_errno>
  1123f4:	e50b0034 	str	r0, [fp, #-52]	; 0xffffffcc
  1123f8:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  1123fc:	e6ef2073 	uxtb	r2, r3
  112400:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112404:	e5c32010 	strb	r2, [r3, #16]
  112408:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  11240c:	e3530000 	cmp	r3, #0
  112410:	0a000003 	beq	112424 <lwip_sendmsg+0x2e4>
  112414:	eb00984e 	bl	138554 <__errno_location>
  112418:	e1a02000 	mov	r2, r0
  11241c:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  112420:	e5823000 	str	r3, [r2]
    return size;
  112424:	e51b300c 	ldr	r3, [fp, #-12]
  112428:	ea0000bd 	b	112724 <lwip_sendmsg+0x5e4>
#if LWIP_UDP || LWIP_RAW
  {
    struct netbuf *chain_buf;

    LWIP_UNUSED_ARG(flags);
    LWIP_ERROR("lwip_sendmsg: invalid msghdr name", (((msg->msg_name == NULL) && (msg->msg_namelen == 0)) ||
  11242c:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112430:	e5933000 	ldr	r3, [r3]
  112434:	e3530000 	cmp	r3, #0
  112438:	1a000003 	bne	11244c <lwip_sendmsg+0x30c>
  11243c:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112440:	e5933004 	ldr	r3, [r3, #4]
  112444:	e3530000 	cmp	r3, #0
  112448:	0a00001a 	beq	1124b8 <lwip_sendmsg+0x378>
  11244c:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112450:	e5933004 	ldr	r3, [r3, #4]
  112454:	e3530010 	cmp	r3, #16
  112458:	0a000016 	beq	1124b8 <lwip_sendmsg+0x378>
  11245c:	e30603e4 	movw	r0, #25572	; 0x63e4
  112460:	e3400014 	movt	r0, #20
  112464:	ebffc32a 	bl	103114 <rt_kprintf>
  112468:	e300141f 	movw	r1, #1055	; 0x41f
  11246c:	e30602b4 	movw	r0, #25268	; 0x62b4
  112470:	e3400014 	movt	r0, #20
  112474:	ebffe1a6 	bl	10ab14 <sys_arch_assert>
  112478:	e3e0000f 	mvn	r0, #15
  11247c:	ebfff5a6 	bl	10fb1c <err_to_errno>
  112480:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  112484:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  112488:	e6ef2073 	uxtb	r2, r3
  11248c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112490:	e5c32010 	strb	r2, [r3, #16]
  112494:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  112498:	e3530000 	cmp	r3, #0
  11249c:	0a000003 	beq	1124b0 <lwip_sendmsg+0x370>
  1124a0:	eb00982b 	bl	138554 <__errno_location>
  1124a4:	e1a02000 	mov	r2, r0
  1124a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1124ac:	e5823000 	str	r3, [r2]
  1124b0:	e3e03000 	mvn	r3, #0
  1124b4:	ea00009a 	b	112724 <lwip_sendmsg+0x5e4>
               IS_SOCK_ADDR_LEN_VALID(msg->msg_namelen)) ,
               sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);

    /* initialize chain buffer with destination */
    chain_buf = netbuf_new();
  1124b8:	ebfff5ae 	bl	10fb78 <netbuf_new>
  1124bc:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
    if (!chain_buf) {
  1124c0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1124c4:	e3530000 	cmp	r3, #0
  1124c8:	1a00000f 	bne	11250c <lwip_sendmsg+0x3cc>
      sock_set_errno(sock, err_to_errno(ERR_MEM));
  1124cc:	e3e00000 	mvn	r0, #0
  1124d0:	ebfff591 	bl	10fb1c <err_to_errno>
  1124d4:	e50b002c 	str	r0, [fp, #-44]	; 0xffffffd4
  1124d8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1124dc:	e6ef2073 	uxtb	r2, r3
  1124e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1124e4:	e5c32010 	strb	r2, [r3, #16]
  1124e8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1124ec:	e3530000 	cmp	r3, #0
  1124f0:	0a000003 	beq	112504 <lwip_sendmsg+0x3c4>
  1124f4:	eb009816 	bl	138554 <__errno_location>
  1124f8:	e1a02000 	mov	r2, r0
  1124fc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  112500:	e5823000 	str	r3, [r2]
      return -1;
  112504:	e3e03000 	mvn	r3, #0
  112508:	ea000085 	b	112724 <lwip_sendmsg+0x5e4>
    }
    if (msg->msg_name) {
  11250c:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112510:	e5933000 	ldr	r3, [r3]
  112514:	e3530000 	cmp	r3, #0
  112518:	0a00000e 	beq	112558 <lwip_sendmsg+0x418>
      u16_t remote_port;
      SOCKADDR_TO_IPADDR_PORT((const struct sockaddr *)msg->msg_name, &chain_buf->addr, remote_port);
  11251c:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112520:	e5933000 	ldr	r3, [r3]
  112524:	e5932004 	ldr	r2, [r3, #4]
  112528:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11252c:	e5832008 	str	r2, [r3, #8]
  112530:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112534:	e5933000 	ldr	r3, [r3]
  112538:	e1d330b2 	ldrh	r3, [r3, #2]
  11253c:	e1a00003 	mov	r0, r3
  112540:	eb000f4a 	bl	116270 <lwip_htons>
  112544:	e1a03000 	mov	r3, r0
  112548:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
      netbuf_fromport(chain_buf) = remote_port;
  11254c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  112550:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  112554:	e1c320bc 	strh	r2, [r3, #12]
      err = ERR_OK;
    }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
    /* create a chained netbuf from the IO vectors. NOTE: we assemble a pbuf chain
       manually to avoid having to allocate, chain, and delete a netbuf for each iov */
    for (i = 0; i < msg->msg_iovlen; i++) {
  112558:	e3a03000 	mov	r3, #0
  11255c:	e50b3008 	str	r3, [fp, #-8]
  112560:	ea000042 	b	112670 <lwip_sendmsg+0x530>
      struct pbuf *p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
  112564:	e3a02002 	mov	r2, #2
  112568:	e3a01000 	mov	r1, #0
  11256c:	e3a00000 	mov	r0, #0
  112570:	eb001e6e 	bl	119f30 <pbuf_alloc>
  112574:	e50b0024 	str	r0, [fp, #-36]	; 0xffffffdc
      if (p == NULL) {
  112578:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11257c:	e3530000 	cmp	r3, #0
  112580:	1a000002 	bne	112590 <lwip_sendmsg+0x450>
        err = ERR_MEM; /* let netbuf_delete() cleanup chain_buf */
  112584:	e3e03000 	mvn	r3, #0
  112588:	e54b300d 	strb	r3, [fp, #-13]
        break;
  11258c:	ea00003c 	b	112684 <lwip_sendmsg+0x544>
      }
      p->payload = msg->msg_iov[i].iov_base;
  112590:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112594:	e5932008 	ldr	r2, [r3, #8]
  112598:	e51b3008 	ldr	r3, [fp, #-8]
  11259c:	e1a03183 	lsl	r3, r3, #3
  1125a0:	e0823003 	add	r3, r2, r3
  1125a4:	e5932000 	ldr	r2, [r3]
  1125a8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1125ac:	e5832004 	str	r2, [r3, #4]
      LWIP_ASSERT("iov_len < u16_t", msg->msg_iov[i].iov_len <= 0xFFFF);
  1125b0:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  1125b4:	e5932008 	ldr	r2, [r3, #8]
  1125b8:	e51b3008 	ldr	r3, [fp, #-8]
  1125bc:	e1a03183 	lsl	r3, r3, #3
  1125c0:	e0823003 	add	r3, r2, r3
  1125c4:	e5933004 	ldr	r3, [r3, #4]
  1125c8:	e3530801 	cmp	r3, #65536	; 0x10000
  1125cc:	3a000006 	bcc	1125ec <lwip_sendmsg+0x4ac>
  1125d0:	e3060408 	movw	r0, #25608	; 0x6408
  1125d4:	e3400014 	movt	r0, #20
  1125d8:	ebffc2cd 	bl	103114 <rt_kprintf>
  1125dc:	e300144d 	movw	r1, #1101	; 0x44d
  1125e0:	e30602b4 	movw	r0, #25268	; 0x62b4
  1125e4:	e3400014 	movt	r0, #20
  1125e8:	ebffe149 	bl	10ab14 <sys_arch_assert>
      p->len = p->tot_len = (u16_t)msg->msg_iov[i].iov_len;
  1125ec:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  1125f0:	e5932008 	ldr	r2, [r3, #8]
  1125f4:	e51b3008 	ldr	r3, [fp, #-8]
  1125f8:	e1a03183 	lsl	r3, r3, #3
  1125fc:	e0823003 	add	r3, r2, r3
  112600:	e5933004 	ldr	r3, [r3, #4]
  112604:	e6ff2073 	uxth	r2, r3
  112608:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11260c:	e1c320b8 	strh	r2, [r3, #8]
  112610:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112614:	e1d320b8 	ldrh	r2, [r3, #8]
  112618:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11261c:	e1c320ba 	strh	r2, [r3, #10]
      /* netbuf empty, add new pbuf */
      if (chain_buf->p == NULL) {
  112620:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  112624:	e5933000 	ldr	r3, [r3]
  112628:	e3530000 	cmp	r3, #0
  11262c:	1a000007 	bne	112650 <lwip_sendmsg+0x510>
        chain_buf->p = chain_buf->ptr = p;
  112630:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  112634:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  112638:	e5832004 	str	r2, [r3, #4]
  11263c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  112640:	e5932004 	ldr	r2, [r3, #4]
  112644:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  112648:	e5832000 	str	r2, [r3]
  11264c:	ea000004 	b	112664 <lwip_sendmsg+0x524>
        /* add pbuf to existing pbuf chain */
      } else {
        pbuf_cat(chain_buf->p, p);
  112650:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  112654:	e5933000 	ldr	r3, [r3]
  112658:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  11265c:	e1a00003 	mov	r0, r3
  112660:	eb0021f0 	bl	11ae28 <pbuf_cat>
    for (i = 0; i < msg->msg_iovlen; i++) {
  112664:	e51b3008 	ldr	r3, [fp, #-8]
  112668:	e2833001 	add	r3, r3, #1
  11266c:	e50b3008 	str	r3, [fp, #-8]
  112670:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112674:	e593300c 	ldr	r3, [r3, #12]
  112678:	e51b2008 	ldr	r2, [fp, #-8]
  11267c:	e1520003 	cmp	r2, r3
  112680:	baffffb7 	blt	112564 <lwip_sendmsg+0x424>
      }
    }
    /* save size of total chain */
    if (err == ERR_OK) {
  112684:	e15b30dd 	ldrsb	r3, [fp, #-13]
  112688:	e3530000 	cmp	r3, #0
  11268c:	1a000003 	bne	1126a0 <lwip_sendmsg+0x560>
      size = netbuf_len(chain_buf);
  112690:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  112694:	e5933000 	ldr	r3, [r3]
  112698:	e1d330b8 	ldrh	r3, [r3, #8]
  11269c:	e50b300c 	str	r3, [fp, #-12]
    }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    if (err == ERR_OK) {
  1126a0:	e15b30dd 	ldrsb	r3, [fp, #-13]
  1126a4:	e3530000 	cmp	r3, #0
  1126a8:	1a000006 	bne	1126c8 <lwip_sendmsg+0x588>
        IP_SET_TYPE_VAL(chain_buf->addr, IPADDR_TYPE_V4);
      }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

      /* send the data */
      err = netconn_send(sock->conn, chain_buf);
  1126ac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1126b0:	e5933000 	ldr	r3, [r3]
  1126b4:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1126b8:	e1a00003 	mov	r0, r3
  1126bc:	ebffe534 	bl	10bb94 <netconn_send>
  1126c0:	e1a03000 	mov	r3, r0
  1126c4:	e54b300d 	strb	r3, [fp, #-13]
    }

    /* deallocated the buffer */
    netbuf_delete(chain_buf);
  1126c8:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  1126cc:	ebfff53d 	bl	10fbc8 <netbuf_delete>

    sock_set_errno(sock, err_to_errno(err));
  1126d0:	e15b30dd 	ldrsb	r3, [fp, #-13]
  1126d4:	e1a00003 	mov	r0, r3
  1126d8:	ebfff50f 	bl	10fb1c <err_to_errno>
  1126dc:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  1126e0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1126e4:	e6ef2073 	uxtb	r2, r3
  1126e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1126ec:	e5c32010 	strb	r2, [r3, #16]
  1126f0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1126f4:	e3530000 	cmp	r3, #0
  1126f8:	0a000003 	beq	11270c <lwip_sendmsg+0x5cc>
  1126fc:	eb009794 	bl	138554 <__errno_location>
  112700:	e1a02000 	mov	r2, r0
  112704:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  112708:	e5823000 	str	r3, [r2]
    return (err == ERR_OK ? size : -1);
  11270c:	e15b30dd 	ldrsb	r3, [fp, #-13]
  112710:	e3530000 	cmp	r3, #0
  112714:	1a000001 	bne	112720 <lwip_sendmsg+0x5e0>
  112718:	e51b300c 	ldr	r3, [fp, #-12]
  11271c:	ea000000 	b	112724 <lwip_sendmsg+0x5e4>
  112720:	e3e03000 	mvn	r3, #0
  }
#else /* LWIP_UDP || LWIP_RAW */
  sock_set_errno(sock, err_to_errno(ERR_ARG));
  return -1;
#endif /* LWIP_UDP || LWIP_RAW */
}
  112724:	e1a00003 	mov	r0, r3
  112728:	e24bd004 	sub	sp, fp, #4
  11272c:	e8bd8800 	pop	{fp, pc}

00112730 <lwip_sendto>:

int
lwip_sendto(int s, const void *data, size_t size, int flags,
       const struct sockaddr *to, socklen_t tolen)
{
  112730:	e92d4800 	push	{fp, lr}
  112734:	e28db004 	add	fp, sp, #4
  112738:	e24dd038 	sub	sp, sp, #56	; 0x38
  11273c:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  112740:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  112744:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
  112748:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  struct lwip_sock *sock;
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;
  sock = get_socket(s);
  11274c:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  112750:	ebfff919 	bl	110bbc <get_socket>
  112754:	e50b000c 	str	r0, [fp, #-12]
  if (!sock) {
  112758:	e51b300c 	ldr	r3, [fp, #-12]
  11275c:	e3530000 	cmp	r3, #0
  112760:	1a000001 	bne	11276c <lwip_sendto+0x3c>
    return -1;
  112764:	e3e03000 	mvn	r3, #0
  112768:	ea000081 	b	112974 <lwip_sendto+0x244>
  }
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
  11276c:	e51b300c 	ldr	r3, [fp, #-12]
  112770:	e5933000 	ldr	r3, [r3]
  112774:	e5933000 	ldr	r3, [r3]
  112778:	e20330f0 	and	r3, r3, #240	; 0xf0
  11277c:	e3530010 	cmp	r3, #16
  112780:	1a000006 	bne	1127a0 <lwip_sendto+0x70>
#if LWIP_TCP
    return lwip_send(s, data, size, flags);
  112784:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  112788:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
  11278c:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  112790:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  112794:	ebfffe15 	bl	111ff0 <lwip_send>
  112798:	e1a03000 	mov	r3, r0
  11279c:	ea000074 	b	112974 <lwip_sendto+0x244>
    return -1;
#endif /* LWIP_TCP */
  }

  /* @todo: split into multiple sendto's? */
  LWIP_ASSERT("lwip_sendto: size must fit in u16_t", size <= 0xffff);
  1127a0:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1127a4:	e3530801 	cmp	r3, #65536	; 0x10000
  1127a8:	3a000006 	bcc	1127c8 <lwip_sendto+0x98>
  1127ac:	e3060418 	movw	r0, #25624	; 0x6418
  1127b0:	e3400014 	movt	r0, #20
  1127b4:	ebffc256 	bl	103114 <rt_kprintf>
  1127b8:	e300148e 	movw	r1, #1166	; 0x48e
  1127bc:	e30602b4 	movw	r0, #25268	; 0x62b4
  1127c0:	e3400014 	movt	r0, #20
  1127c4:	ebffe0d2 	bl	10ab14 <sys_arch_assert>
  short_size = (u16_t)size;
  1127c8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1127cc:	e14b30be 	strh	r3, [fp, #-14]
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
  1127d0:	e59b3004 	ldr	r3, [fp, #4]
  1127d4:	e3530000 	cmp	r3, #0
  1127d8:	1a000002 	bne	1127e8 <lwip_sendto+0xb8>
  1127dc:	e59b3008 	ldr	r3, [fp, #8]
  1127e0:	e3530000 	cmp	r3, #0
  1127e4:	0a000021 	beq	112870 <lwip_sendto+0x140>
  1127e8:	e59b3008 	ldr	r3, [fp, #8]
  1127ec:	e3530010 	cmp	r3, #16
  1127f0:	1a000007 	bne	112814 <lwip_sendto+0xe4>
  1127f4:	e59b3004 	ldr	r3, [fp, #4]
  1127f8:	e5d33001 	ldrb	r3, [r3, #1]
  1127fc:	e3530002 	cmp	r3, #2
  112800:	1a000003 	bne	112814 <lwip_sendto+0xe4>
  112804:	e59b3004 	ldr	r3, [fp, #4]
  112808:	e2033003 	and	r3, r3, #3
  11280c:	e3530000 	cmp	r3, #0
  112810:	0a000016 	beq	112870 <lwip_sendto+0x140>
  112814:	e306043c 	movw	r0, #25660	; 0x643c
  112818:	e3400014 	movt	r0, #20
  11281c:	ebffc23c 	bl	103114 <rt_kprintf>
  112820:	e3001493 	movw	r1, #1171	; 0x493
  112824:	e30602b4 	movw	r0, #25268	; 0x62b4
  112828:	e3400014 	movt	r0, #20
  11282c:	ebffe0b8 	bl	10ab14 <sys_arch_assert>
  112830:	e3e0000f 	mvn	r0, #15
  112834:	ebfff4b8 	bl	10fb1c <err_to_errno>
  112838:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  11283c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112840:	e6ef2073 	uxtb	r2, r3
  112844:	e51b300c 	ldr	r3, [fp, #-12]
  112848:	e5c32010 	strb	r2, [r3, #16]
  11284c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112850:	e3530000 	cmp	r3, #0
  112854:	0a000003 	beq	112868 <lwip_sendto+0x138>
  112858:	eb00973d 	bl	138554 <__errno_location>
  11285c:	e1a02000 	mov	r2, r0
  112860:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112864:	e5823000 	str	r3, [r2]
  112868:	e3e03000 	mvn	r3, #0
  11286c:	ea000040 	b	112974 <lwip_sendto+0x244>
             IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
  112870:	e3a03000 	mov	r3, #0
  112874:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  112878:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11287c:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
  112880:	e59b3004 	ldr	r3, [fp, #4]
  112884:	e3530000 	cmp	r3, #0
  112888:	0a000009 	beq	1128b4 <lwip_sendto+0x184>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
  11288c:	e59b3004 	ldr	r3, [fp, #4]
  112890:	e5933004 	ldr	r3, [r3, #4]
  112894:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  112898:	e59b3004 	ldr	r3, [fp, #4]
  11289c:	e1d330b2 	ldrh	r3, [r3, #2]
  1128a0:	e1a00003 	mov	r0, r3
  1128a4:	eb000e71 	bl	116270 <lwip_htons>
  1128a8:	e1a03000 	mov	r3, r0
  1128ac:	e14b30b8 	strh	r3, [fp, #-8]
  1128b0:	ea000003 	b	1128c4 <lwip_sendto+0x194>
  } else {
    remote_port = 0;
  1128b4:	e3a03000 	mov	r3, #0
  1128b8:	e14b30b8 	strh	r3, [fp, #-8]
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
  1128bc:	e3a03000 	mov	r3, #0
  1128c0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  }
  netbuf_fromport(&buf) = remote_port;
  1128c4:	e15b30b8 	ldrh	r3, [fp, #-8]
  1128c8:	e14b31bc 	strh	r3, [fp, #-28]	; 0xffffffe4
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
  1128cc:	e15b20be 	ldrh	r2, [fp, #-14]
  1128d0:	e24b3028 	sub	r3, fp, #40	; 0x28
  1128d4:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  1128d8:	e1a00003 	mov	r0, r3
  1128dc:	ebfff534 	bl	10fdb4 <netbuf_ref>
  1128e0:	e1a03000 	mov	r3, r0
  1128e4:	e54b3005 	strb	r3, [fp, #-5]
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
  1128e8:	e15b30d5 	ldrsb	r3, [fp, #-5]
  1128ec:	e3530000 	cmp	r3, #0
  1128f0:	1a000007 	bne	112914 <lwip_sendto+0x1e4>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
  1128f4:	e51b300c 	ldr	r3, [fp, #-12]
  1128f8:	e5933000 	ldr	r3, [r3]
  1128fc:	e24b2028 	sub	r2, fp, #40	; 0x28
  112900:	e1a01002 	mov	r1, r2
  112904:	e1a00003 	mov	r0, r3
  112908:	ebffe4a1 	bl	10bb94 <netconn_send>
  11290c:	e1a03000 	mov	r3, r0
  112910:	e54b3005 	strb	r3, [fp, #-5]
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
  112914:	e24b3028 	sub	r3, fp, #40	; 0x28
  112918:	e1a00003 	mov	r0, r3
  11291c:	ebfff504 	bl	10fd34 <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
  112920:	e15b30d5 	ldrsb	r3, [fp, #-5]
  112924:	e1a00003 	mov	r0, r3
  112928:	ebfff47b 	bl	10fb1c <err_to_errno>
  11292c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  112930:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  112934:	e6ef2073 	uxtb	r2, r3
  112938:	e51b300c 	ldr	r3, [fp, #-12]
  11293c:	e5c32010 	strb	r2, [r3, #16]
  112940:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  112944:	e3530000 	cmp	r3, #0
  112948:	0a000003 	beq	11295c <lwip_sendto+0x22c>
  11294c:	eb009700 	bl	138554 <__errno_location>
  112950:	e1a02000 	mov	r2, r0
  112954:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  112958:	e5823000 	str	r3, [r2]
  return (err == ERR_OK ? short_size : -1);
  11295c:	e15b30d5 	ldrsb	r3, [fp, #-5]
  112960:	e3530000 	cmp	r3, #0
  112964:	1a000001 	bne	112970 <lwip_sendto+0x240>
  112968:	e15b30be 	ldrh	r3, [fp, #-14]
  11296c:	ea000000 	b	112974 <lwip_sendto+0x244>
  112970:	e3e03000 	mvn	r3, #0
}
  112974:	e1a00003 	mov	r0, r3
  112978:	e24bd004 	sub	sp, fp, #4
  11297c:	e8bd8800 	pop	{fp, pc}

00112980 <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
  112980:	e92d4800 	push	{fp, lr}
  112984:	e28db004 	add	fp, sp, #4
  112988:	e24dd018 	sub	sp, sp, #24
  11298c:	e50b0010 	str	r0, [fp, #-16]
  112990:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  112994:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
  112998:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11299c:	e3530002 	cmp	r3, #2
  1129a0:	0a00000d 	beq	1129dc <lwip_socket+0x5c>
  1129a4:	e3530003 	cmp	r3, #3
  1129a8:	0a000002 	beq	1129b8 <lwip_socket+0x38>
  1129ac:	e3530001 	cmp	r3, #1
  1129b0:	0a000016 	beq	112a10 <lwip_socket+0x90>
  1129b4:	ea00001c 	b	112a2c <lwip_socket+0xac>
  case SOCK_RAW:
    conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
  1129b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1129bc:	e6ef3073 	uxtb	r3, r3
  1129c0:	e303261c 	movw	r2, #13852	; 0x361c
  1129c4:	e3402011 	movt	r2, #17
  1129c8:	e1a01003 	mov	r1, r3
  1129cc:	e3a00040 	mov	r0, #64	; 0x40
  1129d0:	ebffe15b 	bl	10af44 <netconn_new_with_proto_and_callback>
  1129d4:	e50b0008 	str	r0, [fp, #-8]
                                               (u8_t)protocol, event_callback);
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                 domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
    break;
  1129d8:	ea000019 	b	112a44 <lwip_socket+0xc4>
  case SOCK_DGRAM:
    conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
  1129dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1129e0:	e3530088 	cmp	r3, #136	; 0x88
  1129e4:	1a000001 	bne	1129f0 <lwip_socket+0x70>
  1129e8:	e3a03021 	mov	r3, #33	; 0x21
  1129ec:	ea000000 	b	1129f4 <lwip_socket+0x74>
  1129f0:	e3a03020 	mov	r3, #32
  1129f4:	e303261c 	movw	r2, #13852	; 0x361c
  1129f8:	e3402011 	movt	r2, #17
  1129fc:	e3a01000 	mov	r1, #0
  112a00:	e1a00003 	mov	r0, r3
  112a04:	ebffe14e 	bl	10af44 <netconn_new_with_proto_and_callback>
  112a08:	e50b0008 	str	r0, [fp, #-8]
                 ((protocol == IPPROTO_UDPLITE) ? NETCONN_UDPLITE : NETCONN_UDP)) ,
                 event_callback);
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_DGRAM, %d) = ",
                                 domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
    break;
  112a0c:	ea00000c 	b	112a44 <lwip_socket+0xc4>
  case SOCK_STREAM:
    conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), event_callback);
  112a10:	e303261c 	movw	r2, #13852	; 0x361c
  112a14:	e3402011 	movt	r2, #17
  112a18:	e3a01000 	mov	r1, #0
  112a1c:	e3a00010 	mov	r0, #16
  112a20:	ebffe147 	bl	10af44 <netconn_new_with_proto_and_callback>
  112a24:	e50b0008 	str	r0, [fp, #-8]
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                 domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
    break;
  112a28:	ea000005 	b	112a44 <lwip_socket+0xc4>
  default:
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                 domain, type, protocol));
    set_errno(EINVAL);
  112a2c:	eb0096c8 	bl	138554 <__errno_location>
  112a30:	e1a02000 	mov	r2, r0
  112a34:	e3a03016 	mov	r3, #22
  112a38:	e5823000 	str	r3, [r2]
    return -1;
  112a3c:	e3e03000 	mvn	r3, #0
  112a40:	ea00001b 	b	112ab4 <lwip_socket+0x134>
  }

  if (!conn) {
  112a44:	e51b3008 	ldr	r3, [fp, #-8]
  112a48:	e3530000 	cmp	r3, #0
  112a4c:	1a000005 	bne	112a68 <lwip_socket+0xe8>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
  112a50:	eb0096bf 	bl	138554 <__errno_location>
  112a54:	e1a02000 	mov	r2, r0
  112a58:	e3a03069 	mov	r3, #105	; 0x69
  112a5c:	e5823000 	str	r3, [r2]
    return -1;
  112a60:	e3e03000 	mvn	r3, #0
  112a64:	ea000012 	b	112ab4 <lwip_socket+0x134>
  }

  i = alloc_socket(conn, 0);
  112a68:	e3a01000 	mov	r1, #0
  112a6c:	e51b0008 	ldr	r0, [fp, #-8]
  112a70:	ebfff8a1 	bl	110cfc <alloc_socket>
  112a74:	e50b000c 	str	r0, [fp, #-12]

  if (i == -1) {
  112a78:	e51b300c 	ldr	r3, [fp, #-12]
  112a7c:	e3730001 	cmn	r3, #1
  112a80:	1a000007 	bne	112aa4 <lwip_socket+0x124>
    netconn_delete(conn);
  112a84:	e51b0008 	ldr	r0, [fp, #-8]
  112a88:	ebffe18f 	bl	10b0cc <netconn_delete>
    set_errno(ENFILE);
  112a8c:	eb0096b0 	bl	138554 <__errno_location>
  112a90:	e1a02000 	mov	r2, r0
  112a94:	e3a03017 	mov	r3, #23
  112a98:	e5823000 	str	r3, [r2]
    return -1;
  112a9c:	e3e03000 	mvn	r3, #0
  112aa0:	ea000003 	b	112ab4 <lwip_socket+0x134>
  }
  conn->socket = i;
  112aa4:	e51b3008 	ldr	r3, [fp, #-8]
  112aa8:	e51b200c 	ldr	r2, [fp, #-12]
  112aac:	e583201c 	str	r2, [r3, #28]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
  112ab0:	e51b300c 	ldr	r3, [fp, #-12]
}
  112ab4:	e1a00003 	mov	r0, r3
  112ab8:	e24bd004 	sub	sp, fp, #4
  112abc:	e8bd8800 	pop	{fp, pc}

00112ac0 <lwip_write>:

int
lwip_write(int s, const void *data, size_t size)
{
  112ac0:	e92d4800 	push	{fp, lr}
  112ac4:	e28db004 	add	fp, sp, #4
  112ac8:	e24dd010 	sub	sp, sp, #16
  112acc:	e50b0008 	str	r0, [fp, #-8]
  112ad0:	e50b100c 	str	r1, [fp, #-12]
  112ad4:	e50b2010 	str	r2, [fp, #-16]
  return lwip_send(s, data, size, 0);
  112ad8:	e3a03000 	mov	r3, #0
  112adc:	e51b2010 	ldr	r2, [fp, #-16]
  112ae0:	e51b100c 	ldr	r1, [fp, #-12]
  112ae4:	e51b0008 	ldr	r0, [fp, #-8]
  112ae8:	ebfffd40 	bl	111ff0 <lwip_send>
  112aec:	e1a03000 	mov	r3, r0
}
  112af0:	e1a00003 	mov	r0, r3
  112af4:	e24bd004 	sub	sp, fp, #4
  112af8:	e8bd8800 	pop	{fp, pc}

00112afc <lwip_writev>:

int
lwip_writev(int s, const struct iovec *iov, int iovcnt)
{
  112afc:	e92d4800 	push	{fp, lr}
  112b00:	e28db004 	add	fp, sp, #4
  112b04:	e24dd030 	sub	sp, sp, #48	; 0x30
  112b08:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  112b0c:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  112b10:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  struct msghdr msg;

  msg.msg_name = NULL;
  112b14:	e3a03000 	mov	r3, #0
  112b18:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  msg.msg_namelen = 0;
  112b1c:	e3a03000 	mov	r3, #0
  112b20:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  /* Hack: we have to cast via number to cast from 'const' pointer to non-const.
     Blame the opengroup standard for this inconsistency. */
  msg.msg_iov = LWIP_CONST_CAST(struct iovec *, iov);
  112b24:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  112b28:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  msg.msg_iovlen = iovcnt;
  112b2c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  112b30:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  msg.msg_control = NULL;
  112b34:	e3a03000 	mov	r3, #0
  112b38:	e50b3010 	str	r3, [fp, #-16]
  msg.msg_controllen = 0;
  112b3c:	e3a03000 	mov	r3, #0
  112b40:	e50b300c 	str	r3, [fp, #-12]
  msg.msg_flags = 0;
  112b44:	e3a03000 	mov	r3, #0
  112b48:	e50b3008 	str	r3, [fp, #-8]
  return lwip_sendmsg(s, &msg, 0);
  112b4c:	e24b3020 	sub	r3, fp, #32
  112b50:	e3a02000 	mov	r2, #0
  112b54:	e1a01003 	mov	r1, r3
  112b58:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  112b5c:	ebfffd77 	bl	112140 <lwip_sendmsg>
  112b60:	e1a03000 	mov	r3, r0
}
  112b64:	e1a00003 	mov	r0, r3
  112b68:	e24bd004 	sub	sp, fp, #4
  112b6c:	e8bd8800 	pop	{fp, pc}

00112b70 <lwip_selscan>:
 * @return number of sockets that had events (read/write/exception) (>= 0)
 */
static int
lwip_selscan(int maxfdp1, fd_set *readset_in, fd_set *writeset_in, fd_set *exceptset_in,
             fd_set *readset_out, fd_set *writeset_out, fd_set *exceptset_out)
{
  112b70:	e92d4800 	push	{fp, lr}
  112b74:	e28db004 	add	fp, sp, #4
  112b78:	e24ddd07 	sub	sp, sp, #448	; 0x1c0
  112b7c:	e50b01b8 	str	r0, [fp, #-440]	; 0xfffffe48
  112b80:	e50b11bc 	str	r1, [fp, #-444]	; 0xfffffe44
  112b84:	e50b21c0 	str	r2, [fp, #-448]	; 0xfffffe40
  112b88:	e50b31c4 	str	r3, [fp, #-452]	; 0xfffffe3c
  int i, nready = 0;
  112b8c:	e3a03000 	mov	r3, #0
  112b90:	e50b300c 	str	r3, [fp, #-12]
  fd_set lreadset, lwriteset, lexceptset;
  struct lwip_sock *sock;
  SYS_ARCH_DECL_PROTECT(lev);

  FD_ZERO(&lreadset);
  112b94:	e24b30b4 	sub	r3, fp, #180	; 0xb4
  112b98:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  112b9c:	e3a03020 	mov	r3, #32
  112ba0:	e50b3010 	str	r3, [fp, #-16]
  112ba4:	ea000007 	b	112bc8 <lwip_selscan+0x58>
  112ba8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112bac:	e2832004 	add	r2, r3, #4
  112bb0:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
  112bb4:	e3a02000 	mov	r2, #0
  112bb8:	e5832000 	str	r2, [r3]
  112bbc:	e51b3010 	ldr	r3, [fp, #-16]
  112bc0:	e2433001 	sub	r3, r3, #1
  112bc4:	e50b3010 	str	r3, [fp, #-16]
  112bc8:	e51b3010 	ldr	r3, [fp, #-16]
  112bcc:	e3530000 	cmp	r3, #0
  112bd0:	1afffff4 	bne	112ba8 <lwip_selscan+0x38>
  FD_ZERO(&lwriteset);
  112bd4:	e24b3f4d 	sub	r3, fp, #308	; 0x134
  112bd8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  112bdc:	e3a03020 	mov	r3, #32
  112be0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  112be4:	ea000007 	b	112c08 <lwip_selscan+0x98>
  112be8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  112bec:	e2832004 	add	r2, r3, #4
  112bf0:	e50b201c 	str	r2, [fp, #-28]	; 0xffffffe4
  112bf4:	e3a02000 	mov	r2, #0
  112bf8:	e5832000 	str	r2, [r3]
  112bfc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  112c00:	e2433001 	sub	r3, r3, #1
  112c04:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  112c08:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  112c0c:	e3530000 	cmp	r3, #0
  112c10:	1afffff4 	bne	112be8 <lwip_selscan+0x78>
  FD_ZERO(&lexceptset);
  112c14:	e24b3f6d 	sub	r3, fp, #436	; 0x1b4
  112c18:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  112c1c:	e3a03020 	mov	r3, #32
  112c20:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  112c24:	ea000007 	b	112c48 <lwip_selscan+0xd8>
  112c28:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112c2c:	e2832004 	add	r2, r3, #4
  112c30:	e50b2024 	str	r2, [fp, #-36]	; 0xffffffdc
  112c34:	e3a02000 	mov	r2, #0
  112c38:	e5832000 	str	r2, [r3]
  112c3c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  112c40:	e2433001 	sub	r3, r3, #1
  112c44:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  112c48:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  112c4c:	e3530000 	cmp	r3, #0
  112c50:	1afffff4 	bne	112c28 <lwip_selscan+0xb8>

  /* Go through each socket in each list to count number of sockets which
     currently match */
  for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
  112c54:	e3a03000 	mov	r3, #0
  112c58:	e50b3008 	str	r3, [fp, #-8]
  112c5c:	ea0000aa 	b	112f0c <lwip_selscan+0x39c>
    /* if this FD is not in the set, continue */
    if (!(readset_in && FD_ISSET(i, readset_in)) &&
  112c60:	e51b31bc 	ldr	r3, [fp, #-444]	; 0xfffffe44
  112c64:	e3530000 	cmp	r3, #0
  112c68:	0a000009 	beq	112c94 <lwip_selscan+0x124>
  112c6c:	e51b3008 	ldr	r3, [fp, #-8]
  112c70:	e1a022a3 	lsr	r2, r3, #5
  112c74:	e51b31bc 	ldr	r3, [fp, #-444]	; 0xfffffe44
  112c78:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  112c7c:	e51b3008 	ldr	r3, [fp, #-8]
  112c80:	e203301f 	and	r3, r3, #31
  112c84:	e1a03332 	lsr	r3, r2, r3
  112c88:	e2033001 	and	r3, r3, #1
  112c8c:	e3530000 	cmp	r3, #0
  112c90:	1a000019 	bne	112cfc <lwip_selscan+0x18c>
  112c94:	e51b31c0 	ldr	r3, [fp, #-448]	; 0xfffffe40
  112c98:	e3530000 	cmp	r3, #0
  112c9c:	0a000009 	beq	112cc8 <lwip_selscan+0x158>
        !(writeset_in && FD_ISSET(i, writeset_in)) &&
  112ca0:	e51b3008 	ldr	r3, [fp, #-8]
  112ca4:	e1a022a3 	lsr	r2, r3, #5
  112ca8:	e51b31c0 	ldr	r3, [fp, #-448]	; 0xfffffe40
  112cac:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  112cb0:	e51b3008 	ldr	r3, [fp, #-8]
  112cb4:	e203301f 	and	r3, r3, #31
  112cb8:	e1a03332 	lsr	r3, r2, r3
  112cbc:	e2033001 	and	r3, r3, #1
  112cc0:	e3530000 	cmp	r3, #0
  112cc4:	1a00000c 	bne	112cfc <lwip_selscan+0x18c>
  112cc8:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  112ccc:	e3530000 	cmp	r3, #0
  112cd0:	0a000089 	beq	112efc <lwip_selscan+0x38c>
        !(exceptset_in && FD_ISSET(i, exceptset_in))) {
  112cd4:	e51b3008 	ldr	r3, [fp, #-8]
  112cd8:	e1a022a3 	lsr	r2, r3, #5
  112cdc:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  112ce0:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  112ce4:	e51b3008 	ldr	r3, [fp, #-8]
  112ce8:	e203301f 	and	r3, r3, #31
  112cec:	e1a03332 	lsr	r3, r2, r3
  112cf0:	e2033001 	and	r3, r3, #1
  112cf4:	e3530000 	cmp	r3, #0
  112cf8:	0a00007f 	beq	112efc <lwip_selscan+0x38c>
      continue;
    }
    /* First get the socket's status (protected)... */
    SYS_ARCH_PROTECT(lev);
  112cfc:	ebffbd4e 	bl	10223c <rt_enter_critical>
    sock = tryget_socket(i);
  112d00:	e51b0008 	ldr	r0, [fp, #-8]
  112d04:	ebfff7d1 	bl	110c50 <tryget_socket>
  112d08:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
    if (sock != NULL) {
  112d0c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  112d10:	e3530000 	cmp	r3, #0
  112d14:	0a000076 	beq	112ef4 <lwip_selscan+0x384>
      void* lastdata = sock->lastdata;
  112d18:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  112d1c:	e5933004 	ldr	r3, [r3, #4]
  112d20:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
      s16_t rcvevent = sock->rcvevent;
  112d24:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  112d28:	e1d330ba 	ldrh	r3, [r3, #10]
  112d2c:	e14b32be 	strh	r3, [fp, #-46]	; 0xffffffd2
      u16_t sendevent = sock->sendevent;
  112d30:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  112d34:	e1d330bc 	ldrh	r3, [r3, #12]
  112d38:	e14b33b0 	strh	r3, [fp, #-48]	; 0xffffffd0
      u16_t errevent = sock->errevent;
  112d3c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  112d40:	e1d330be 	ldrh	r3, [r3, #14]
  112d44:	e14b33b2 	strh	r3, [fp, #-50]	; 0xffffffce
      SYS_ARCH_UNPROTECT(lev);
  112d48:	ebffbd41 	bl	102254 <rt_exit_critical>

      /* ... then examine it: */
      /* See if netconn of this socket is ready for read */
      if (readset_in && FD_ISSET(i, readset_in) && ((lastdata != NULL) || (rcvevent > 0))) {
  112d4c:	e51b31bc 	ldr	r3, [fp, #-444]	; 0xfffffe44
  112d50:	e3530000 	cmp	r3, #0
  112d54:	0a000021 	beq	112de0 <lwip_selscan+0x270>
  112d58:	e51b3008 	ldr	r3, [fp, #-8]
  112d5c:	e1a022a3 	lsr	r2, r3, #5
  112d60:	e51b31bc 	ldr	r3, [fp, #-444]	; 0xfffffe44
  112d64:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  112d68:	e51b3008 	ldr	r3, [fp, #-8]
  112d6c:	e203301f 	and	r3, r3, #31
  112d70:	e1a03332 	lsr	r3, r2, r3
  112d74:	e2033001 	and	r3, r3, #1
  112d78:	e3530000 	cmp	r3, #0
  112d7c:	0a000017 	beq	112de0 <lwip_selscan+0x270>
  112d80:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  112d84:	e3530000 	cmp	r3, #0
  112d88:	1a000002 	bne	112d98 <lwip_selscan+0x228>
  112d8c:	e15b32fe 	ldrsh	r3, [fp, #-46]	; 0xffffffd2
  112d90:	e3530000 	cmp	r3, #0
  112d94:	da000011 	ble	112de0 <lwip_selscan+0x270>
        FD_SET(i, &lreadset);
  112d98:	e51b3008 	ldr	r3, [fp, #-8]
  112d9c:	e1a022a3 	lsr	r2, r3, #5
  112da0:	e1a03102 	lsl	r3, r2, #2
  112da4:	e24b1004 	sub	r1, fp, #4
  112da8:	e0813003 	add	r3, r1, r3
  112dac:	e51310b0 	ldr	r1, [r3, #-176]	; 0xffffff50
  112db0:	e51b3008 	ldr	r3, [fp, #-8]
  112db4:	e203301f 	and	r3, r3, #31
  112db8:	e3a00001 	mov	r0, #1
  112dbc:	e1a03310 	lsl	r3, r0, r3
  112dc0:	e1811003 	orr	r1, r1, r3
  112dc4:	e1a03102 	lsl	r3, r2, #2
  112dc8:	e24b2004 	sub	r2, fp, #4
  112dcc:	e0823003 	add	r3, r2, r3
  112dd0:	e50310b0 	str	r1, [r3, #-176]	; 0xffffff50
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for reading\n", i));
        nready++;
  112dd4:	e51b300c 	ldr	r3, [fp, #-12]
  112dd8:	e2833001 	add	r3, r3, #1
  112ddc:	e50b300c 	str	r3, [fp, #-12]
      }
      /* See if netconn of this socket is ready for write */
      if (writeset_in && FD_ISSET(i, writeset_in) && (sendevent != 0)) {
  112de0:	e51b31c0 	ldr	r3, [fp, #-448]	; 0xfffffe40
  112de4:	e3530000 	cmp	r3, #0
  112de8:	0a00001e 	beq	112e68 <lwip_selscan+0x2f8>
  112dec:	e51b3008 	ldr	r3, [fp, #-8]
  112df0:	e1a022a3 	lsr	r2, r3, #5
  112df4:	e51b31c0 	ldr	r3, [fp, #-448]	; 0xfffffe40
  112df8:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  112dfc:	e51b3008 	ldr	r3, [fp, #-8]
  112e00:	e203301f 	and	r3, r3, #31
  112e04:	e1a03332 	lsr	r3, r2, r3
  112e08:	e2033001 	and	r3, r3, #1
  112e0c:	e3530000 	cmp	r3, #0
  112e10:	0a000014 	beq	112e68 <lwip_selscan+0x2f8>
  112e14:	e15b33b0 	ldrh	r3, [fp, #-48]	; 0xffffffd0
  112e18:	e3530000 	cmp	r3, #0
  112e1c:	0a000011 	beq	112e68 <lwip_selscan+0x2f8>
        FD_SET(i, &lwriteset);
  112e20:	e51b3008 	ldr	r3, [fp, #-8]
  112e24:	e1a022a3 	lsr	r2, r3, #5
  112e28:	e1a03102 	lsl	r3, r2, #2
  112e2c:	e24b1004 	sub	r1, fp, #4
  112e30:	e0813003 	add	r3, r1, r3
  112e34:	e5131130 	ldr	r1, [r3, #-304]	; 0xfffffed0
  112e38:	e51b3008 	ldr	r3, [fp, #-8]
  112e3c:	e203301f 	and	r3, r3, #31
  112e40:	e3a00001 	mov	r0, #1
  112e44:	e1a03310 	lsl	r3, r0, r3
  112e48:	e1811003 	orr	r1, r1, r3
  112e4c:	e1a03102 	lsl	r3, r2, #2
  112e50:	e24b2004 	sub	r2, fp, #4
  112e54:	e0823003 	add	r3, r2, r3
  112e58:	e5031130 	str	r1, [r3, #-304]	; 0xfffffed0
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for writing\n", i));
        nready++;
  112e5c:	e51b300c 	ldr	r3, [fp, #-12]
  112e60:	e2833001 	add	r3, r3, #1
  112e64:	e50b300c 	str	r3, [fp, #-12]
      }
      /* See if netconn of this socket had an error */
      if (exceptset_in && FD_ISSET(i, exceptset_in) && (errevent != 0)) {
  112e68:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  112e6c:	e3530000 	cmp	r3, #0
  112e70:	0a000022 	beq	112f00 <lwip_selscan+0x390>
  112e74:	e51b3008 	ldr	r3, [fp, #-8]
  112e78:	e1a022a3 	lsr	r2, r3, #5
  112e7c:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  112e80:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  112e84:	e51b3008 	ldr	r3, [fp, #-8]
  112e88:	e203301f 	and	r3, r3, #31
  112e8c:	e1a03332 	lsr	r3, r2, r3
  112e90:	e2033001 	and	r3, r3, #1
  112e94:	e3530000 	cmp	r3, #0
  112e98:	0a000018 	beq	112f00 <lwip_selscan+0x390>
  112e9c:	e15b33b2 	ldrh	r3, [fp, #-50]	; 0xffffffce
  112ea0:	e3530000 	cmp	r3, #0
  112ea4:	0a000015 	beq	112f00 <lwip_selscan+0x390>
        FD_SET(i, &lexceptset);
  112ea8:	e51b3008 	ldr	r3, [fp, #-8]
  112eac:	e1a022a3 	lsr	r2, r3, #5
  112eb0:	e1a03102 	lsl	r3, r2, #2
  112eb4:	e24b1004 	sub	r1, fp, #4
  112eb8:	e0813003 	add	r3, r1, r3
  112ebc:	e51311b0 	ldr	r1, [r3, #-432]	; 0xfffffe50
  112ec0:	e51b3008 	ldr	r3, [fp, #-8]
  112ec4:	e203301f 	and	r3, r3, #31
  112ec8:	e3a00001 	mov	r0, #1
  112ecc:	e1a03310 	lsl	r3, r0, r3
  112ed0:	e1811003 	orr	r1, r1, r3
  112ed4:	e1a03102 	lsl	r3, r2, #2
  112ed8:	e24b2004 	sub	r2, fp, #4
  112edc:	e0823003 	add	r3, r2, r3
  112ee0:	e50311b0 	str	r1, [r3, #-432]	; 0xfffffe50
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for exception\n", i));
        nready++;
  112ee4:	e51b300c 	ldr	r3, [fp, #-12]
  112ee8:	e2833001 	add	r3, r3, #1
  112eec:	e50b300c 	str	r3, [fp, #-12]
  112ef0:	ea000002 	b	112f00 <lwip_selscan+0x390>
      }
    } else {
      SYS_ARCH_UNPROTECT(lev);
  112ef4:	ebffbcd6 	bl	102254 <rt_exit_critical>
  112ef8:	ea000000 	b	112f00 <lwip_selscan+0x390>
      continue;
  112efc:	e320f000 	nop	{0}
  for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
  112f00:	e51b3008 	ldr	r3, [fp, #-8]
  112f04:	e2833001 	add	r3, r3, #1
  112f08:	e50b3008 	str	r3, [fp, #-8]
  112f0c:	e51b2008 	ldr	r2, [fp, #-8]
  112f10:	e51b31b8 	ldr	r3, [fp, #-440]	; 0xfffffe48
  112f14:	e1520003 	cmp	r2, r3
  112f18:	baffff50 	blt	112c60 <lwip_selscan+0xf0>
      /* continue on to next FD in list */
    }
  }
  /* copy local sets to the ones provided as arguments */
  *readset_out = lreadset;
  112f1c:	e59b3004 	ldr	r3, [fp, #4]
  112f20:	e1a00003 	mov	r0, r3
  112f24:	e24b30b4 	sub	r3, fp, #180	; 0xb4
  112f28:	e3a02080 	mov	r2, #128	; 0x80
  112f2c:	e1a01003 	mov	r1, r3
  112f30:	eb00b535 	bl	14040c <memcpy>
  *writeset_out = lwriteset;
  112f34:	e59b3008 	ldr	r3, [fp, #8]
  112f38:	e1a00003 	mov	r0, r3
  112f3c:	e24b3f4d 	sub	r3, fp, #308	; 0x134
  112f40:	e3a02080 	mov	r2, #128	; 0x80
  112f44:	e1a01003 	mov	r1, r3
  112f48:	eb00b52f 	bl	14040c <memcpy>
  *exceptset_out = lexceptset;
  112f4c:	e59b300c 	ldr	r3, [fp, #12]
  112f50:	e1a00003 	mov	r0, r3
  112f54:	e24b3f6d 	sub	r3, fp, #436	; 0x1b4
  112f58:	e3a02080 	mov	r2, #128	; 0x80
  112f5c:	e1a01003 	mov	r1, r3
  112f60:	eb00b529 	bl	14040c <memcpy>

  LWIP_ASSERT("nready >= 0", nready >= 0);
  112f64:	e51b300c 	ldr	r3, [fp, #-12]
  112f68:	e3530000 	cmp	r3, #0
  112f6c:	aa000006 	bge	112f8c <lwip_selscan+0x41c>
  112f70:	e306045c 	movw	r0, #25692	; 0x645c
  112f74:	e3400014 	movt	r0, #20
  112f78:	ebffc065 	bl	103114 <rt_kprintf>
  112f7c:	e3001569 	movw	r1, #1385	; 0x569
  112f80:	e30602b4 	movw	r0, #25268	; 0x62b4
  112f84:	e3400014 	movt	r0, #20
  112f88:	ebffdee1 	bl	10ab14 <sys_arch_assert>
  return nready;
  112f8c:	e51b300c 	ldr	r3, [fp, #-12]
}
  112f90:	e1a00003 	mov	r0, r3
  112f94:	e24bd004 	sub	sp, fp, #4
  112f98:	e8bd8800 	pop	{fp, pc}

00112f9c <lwip_select>:

int
lwip_select(int maxfdp1, fd_set *readset, fd_set *writeset, fd_set *exceptset,
            struct timeval *timeout)
{
  112f9c:	e92d4800 	push	{fp, lr}
  112fa0:	e28db004 	add	fp, sp, #4
  112fa4:	e24ddf76 	sub	sp, sp, #472	; 0x1d8
  112fa8:	e50b01c0 	str	r0, [fp, #-448]	; 0xfffffe40
  112fac:	e50b11c4 	str	r1, [fp, #-452]	; 0xfffffe3c
  112fb0:	e50b21c8 	str	r2, [fp, #-456]	; 0xfffffe38
  112fb4:	e50b31cc 	str	r3, [fp, #-460]	; 0xfffffe34
  u32_t waitres = 0;
  112fb8:	e3a03000 	mov	r3, #0
  112fbc:	e50b3008 	str	r3, [fp, #-8]
                  timeout ? (s32_t)timeout->tv_sec : (s32_t)-1,
                  timeout ? (s32_t)timeout->tv_usec : (s32_t)-1));

  /* Go through each socket in each list to count number of sockets which
     currently match */
  nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
  112fc0:	e24b3e1a 	sub	r3, fp, #416	; 0x1a0
  112fc4:	e58d3008 	str	r3, [sp, #8]
  112fc8:	e24b3e12 	sub	r3, fp, #288	; 0x120
  112fcc:	e58d3004 	str	r3, [sp, #4]
  112fd0:	e24b30a0 	sub	r3, fp, #160	; 0xa0
  112fd4:	e58d3000 	str	r3, [sp]
  112fd8:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  112fdc:	e51b21c8 	ldr	r2, [fp, #-456]	; 0xfffffe38
  112fe0:	e51b11c4 	ldr	r1, [fp, #-452]	; 0xfffffe3c
  112fe4:	e51b01c0 	ldr	r0, [fp, #-448]	; 0xfffffe40
  112fe8:	ebfffee0 	bl	112b70 <lwip_selscan>
  112fec:	e50b000c 	str	r0, [fp, #-12]

  /* If we don't have any current events, then suspend if we are supposed to */
  if (!nready) {
  112ff0:	e51b300c 	ldr	r3, [fp, #-12]
  112ff4:	e3530000 	cmp	r3, #0
  112ff8:	1a000163 	bne	11358c <lwip_select+0x5f0>
    if (timeout && timeout->tv_sec == 0 && timeout->tv_usec == 0) {
  112ffc:	e59b3004 	ldr	r3, [fp, #4]
  113000:	e3530000 	cmp	r3, #0
  113004:	0a000007 	beq	113028 <lwip_select+0x8c>
  113008:	e59b3004 	ldr	r3, [fp, #4]
  11300c:	e1c320d0 	ldrd	r2, [r3]
  113010:	e1923003 	orrs	r3, r2, r3
  113014:	1a000003 	bne	113028 <lwip_select+0x8c>
  113018:	e59b3004 	ldr	r3, [fp, #4]
  11301c:	e5933008 	ldr	r3, [r3, #8]
  113020:	e3530000 	cmp	r3, #0
  113024:	0a00015a 	beq	113594 <lwip_select+0x5f8>
    /* None ready: add our semaphore to list:
       We don't actually need any dynamic memory. Our entry on the
       list is only valid while we are in this function, so it's ok
       to use local variables. */

    select_cb.next = NULL;
  113028:	e3a03000 	mov	r3, #0
  11302c:	e50b31bc 	str	r3, [fp, #-444]	; 0xfffffe44
    select_cb.prev = NULL;
  113030:	e3a03000 	mov	r3, #0
  113034:	e50b31b8 	str	r3, [fp, #-440]	; 0xfffffe48
    select_cb.readset = readset;
  113038:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  11303c:	e50b31b4 	str	r3, [fp, #-436]	; 0xfffffe4c
    select_cb.writeset = writeset;
  113040:	e51b31c8 	ldr	r3, [fp, #-456]	; 0xfffffe38
  113044:	e50b31b0 	str	r3, [fp, #-432]	; 0xfffffe50
    select_cb.exceptset = exceptset;
  113048:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  11304c:	e50b31ac 	str	r3, [fp, #-428]	; 0xfffffe54
    select_cb.sem_signalled = 0;
  113050:	e3a03000 	mov	r3, #0
  113054:	e50b31a8 	str	r3, [fp, #-424]	; 0xfffffe58
#if LWIP_NETCONN_SEM_PER_THREAD
    select_cb.sem = LWIP_NETCONN_THREAD_SEM_GET();
#else /* LWIP_NETCONN_SEM_PER_THREAD */
    if (sys_sem_new(&select_cb.sem, 0) != ERR_OK) {
  113058:	e24b3f6f 	sub	r3, fp, #444	; 0x1bc
  11305c:	e2833018 	add	r3, r3, #24
  113060:	e3a01000 	mov	r1, #0
  113064:	e1a00003 	mov	r0, r3
  113068:	ebffdc17 	bl	10a0cc <sys_sem_new>
  11306c:	e1a03000 	mov	r3, r0
  113070:	e3530000 	cmp	r3, #0
  113074:	0a000005 	beq	113090 <lwip_select+0xf4>
      /* failed to create semaphore */
      set_errno(ENOMEM);
  113078:	eb009535 	bl	138554 <__errno_location>
  11307c:	e1a02000 	mov	r2, r0
  113080:	e3a0300c 	mov	r3, #12
  113084:	e5823000 	str	r3, [r2]
      return -1;
  113088:	e3e03000 	mvn	r3, #0
  11308c:	ea00015f 	b	113610 <lwip_select+0x674>
    }
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

    /* Protect the select_cb_list */
    SYS_ARCH_PROTECT(lev);
  113090:	ebffbc69 	bl	10223c <rt_enter_critical>

    /* Put this select_cb on top of list */
    select_cb.next = select_cb_list;
  113094:	e30d3c14 	movw	r3, #56340	; 0xdc14
  113098:	e3403014 	movt	r3, #20
  11309c:	e5933000 	ldr	r3, [r3]
  1130a0:	e50b31bc 	str	r3, [fp, #-444]	; 0xfffffe44
    if (select_cb_list != NULL) {
  1130a4:	e30d3c14 	movw	r3, #56340	; 0xdc14
  1130a8:	e3403014 	movt	r3, #20
  1130ac:	e5933000 	ldr	r3, [r3]
  1130b0:	e3530000 	cmp	r3, #0
  1130b4:	0a000004 	beq	1130cc <lwip_select+0x130>
      select_cb_list->prev = &select_cb;
  1130b8:	e30d3c14 	movw	r3, #56340	; 0xdc14
  1130bc:	e3403014 	movt	r3, #20
  1130c0:	e5933000 	ldr	r3, [r3]
  1130c4:	e24b2f6f 	sub	r2, fp, #444	; 0x1bc
  1130c8:	e5832004 	str	r2, [r3, #4]
    }
    select_cb_list = &select_cb;
  1130cc:	e30d3c14 	movw	r3, #56340	; 0xdc14
  1130d0:	e3403014 	movt	r3, #20
  1130d4:	e24b2f6f 	sub	r2, fp, #444	; 0x1bc
  1130d8:	e5832000 	str	r2, [r3]
    /* Increasing this counter tells event_callback that the list has changed. */
    select_cb_ctr++;
  1130dc:	e30d3c18 	movw	r3, #56344	; 0xdc18
  1130e0:	e3403014 	movt	r3, #20
  1130e4:	e5933000 	ldr	r3, [r3]
  1130e8:	e2832001 	add	r2, r3, #1
  1130ec:	e30d3c18 	movw	r3, #56344	; 0xdc18
  1130f0:	e3403014 	movt	r3, #20
  1130f4:	e5832000 	str	r2, [r3]

    /* Now we can safely unprotect */
    SYS_ARCH_UNPROTECT(lev);
  1130f8:	ebffbc55 	bl	102254 <rt_exit_critical>

    /* Increase select_waiting for each socket we are interested in */
    maxfdp2 = maxfdp1;
  1130fc:	e51b31c0 	ldr	r3, [fp, #-448]	; 0xfffffe40
  113100:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
  113104:	e3a03000 	mov	r3, #0
  113108:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  11310c:	ea000049 	b	113238 <lwip_select+0x29c>
      if ((readset && FD_ISSET(i, readset)) ||
  113110:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  113114:	e3530000 	cmp	r3, #0
  113118:	0a000009 	beq	113144 <lwip_select+0x1a8>
  11311c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113120:	e1a022a3 	lsr	r2, r3, #5
  113124:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  113128:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  11312c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113130:	e203301f 	and	r3, r3, #31
  113134:	e1a03332 	lsr	r3, r2, r3
  113138:	e2033001 	and	r3, r3, #1
  11313c:	e3530000 	cmp	r3, #0
  113140:	1a000019 	bne	1131ac <lwip_select+0x210>
  113144:	e51b31c8 	ldr	r3, [fp, #-456]	; 0xfffffe38
  113148:	e3530000 	cmp	r3, #0
  11314c:	0a000009 	beq	113178 <lwip_select+0x1dc>
          (writeset && FD_ISSET(i, writeset)) ||
  113150:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113154:	e1a022a3 	lsr	r2, r3, #5
  113158:	e51b31c8 	ldr	r3, [fp, #-456]	; 0xfffffe38
  11315c:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  113160:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113164:	e203301f 	and	r3, r3, #31
  113168:	e1a03332 	lsr	r3, r2, r3
  11316c:	e2033001 	and	r3, r3, #1
  113170:	e3530000 	cmp	r3, #0
  113174:	1a00000c 	bne	1131ac <lwip_select+0x210>
  113178:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  11317c:	e3530000 	cmp	r3, #0
  113180:	0a000029 	beq	11322c <lwip_select+0x290>
          (exceptset && FD_ISSET(i, exceptset))) {
  113184:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113188:	e1a022a3 	lsr	r2, r3, #5
  11318c:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  113190:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  113194:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113198:	e203301f 	and	r3, r3, #31
  11319c:	e1a03332 	lsr	r3, r2, r3
  1131a0:	e2033001 	and	r3, r3, #1
  1131a4:	e3530000 	cmp	r3, #0
  1131a8:	0a00001f 	beq	11322c <lwip_select+0x290>
        struct lwip_sock *sock;
        SYS_ARCH_PROTECT(lev);
  1131ac:	ebffbc22 	bl	10223c <rt_enter_critical>
        sock = tryget_socket(i);
  1131b0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1131b4:	ebfff6a5 	bl	110c50 <tryget_socket>
  1131b8:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
        if (sock != NULL) {
  1131bc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1131c0:	e3530000 	cmp	r3, #0
  1131c4:	0a000011 	beq	113210 <lwip_select+0x274>
          sock->select_waiting++;
  1131c8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1131cc:	e5d33011 	ldrb	r3, [r3, #17]
  1131d0:	e2833001 	add	r3, r3, #1
  1131d4:	e6ef2073 	uxtb	r2, r3
  1131d8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1131dc:	e5c32011 	strb	r2, [r3, #17]
          LWIP_ASSERT("sock->select_waiting > 0", sock->select_waiting > 0);
  1131e0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1131e4:	e5d33011 	ldrb	r3, [r3, #17]
  1131e8:	e3530000 	cmp	r3, #0
  1131ec:	1a00000d 	bne	113228 <lwip_select+0x28c>
  1131f0:	e3060468 	movw	r0, #25704	; 0x6468
  1131f4:	e3400014 	movt	r0, #20
  1131f8:	ebffbfc5 	bl	103114 <rt_kprintf>
  1131fc:	e30015be 	movw	r1, #1470	; 0x5be
  113200:	e30602b4 	movw	r0, #25268	; 0x62b4
  113204:	e3400014 	movt	r0, #20
  113208:	ebffde41 	bl	10ab14 <sys_arch_assert>
  11320c:	ea000005 	b	113228 <lwip_select+0x28c>
        } else {
          /* Not a valid socket */
          nready = -1;
  113210:	e3e03000 	mvn	r3, #0
  113214:	e50b300c 	str	r3, [fp, #-12]
          maxfdp2 = i;
  113218:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11321c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
          SYS_ARCH_UNPROTECT(lev);
  113220:	ebffbc0b 	bl	102254 <rt_exit_critical>
          break;
  113224:	ea000007 	b	113248 <lwip_select+0x2ac>
        }
        SYS_ARCH_UNPROTECT(lev);
  113228:	ebffbc09 	bl	102254 <rt_exit_critical>
    for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
  11322c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113230:	e2833001 	add	r3, r3, #1
  113234:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  113238:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11323c:	e51b31c0 	ldr	r3, [fp, #-448]	; 0xfffffe40
  113240:	e1520003 	cmp	r2, r3
  113244:	baffffb1 	blt	113110 <lwip_select+0x174>
      }
    }

    if (nready >= 0) {
  113248:	e51b300c 	ldr	r3, [fp, #-12]
  11324c:	e3530000 	cmp	r3, #0
  113250:	ba00002e 	blt	113310 <lwip_select+0x374>
      /* Call lwip_selscan again: there could have been events between
         the last scan (without us on the list) and putting us on the list! */
      nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
  113254:	e24b3e1a 	sub	r3, fp, #416	; 0x1a0
  113258:	e58d3008 	str	r3, [sp, #8]
  11325c:	e24b3e12 	sub	r3, fp, #288	; 0x120
  113260:	e58d3004 	str	r3, [sp, #4]
  113264:	e24b30a0 	sub	r3, fp, #160	; 0xa0
  113268:	e58d3000 	str	r3, [sp]
  11326c:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  113270:	e51b21c8 	ldr	r2, [fp, #-456]	; 0xfffffe38
  113274:	e51b11c4 	ldr	r1, [fp, #-452]	; 0xfffffe3c
  113278:	e51b01c0 	ldr	r0, [fp, #-448]	; 0xfffffe40
  11327c:	ebfffe3b 	bl	112b70 <lwip_selscan>
  113280:	e50b000c 	str	r0, [fp, #-12]
      if (!nready) {
  113284:	e51b300c 	ldr	r3, [fp, #-12]
  113288:	e3530000 	cmp	r3, #0
  11328c:	1a00001f 	bne	113310 <lwip_select+0x374>
        /* Still none ready, just wait to be woken */
        if (timeout == 0) {
  113290:	e59b3004 	ldr	r3, [fp, #4]
  113294:	e3530000 	cmp	r3, #0
  113298:	1a000002 	bne	1132a8 <lwip_select+0x30c>
          /* Wait forever */
          msectimeout = 0;
  11329c:	e3a03000 	mov	r3, #0
  1132a0:	e50b3010 	str	r3, [fp, #-16]
  1132a4:	ea000013 	b	1132f8 <lwip_select+0x35c>
        } else {
          msectimeout =  ((timeout->tv_sec * 1000) + ((timeout->tv_usec + 500)/1000));
  1132a8:	e59b3004 	ldr	r3, [fp, #4]
  1132ac:	e1c320d0 	ldrd	r2, [r3]
  1132b0:	e3a03ffa 	mov	r3, #1000	; 0x3e8
  1132b4:	e0000293 	mul	r0, r3, r2
  1132b8:	e59b3004 	ldr	r3, [fp, #4]
  1132bc:	e5933008 	ldr	r3, [r3, #8]
  1132c0:	e2831f7d 	add	r1, r3, #500	; 0x1f4
  1132c4:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  1132c8:	e3413062 	movt	r3, #4194	; 0x1062
  1132cc:	e0c32391 	smull	r2, r3, r1, r3
  1132d0:	e1a02343 	asr	r2, r3, #6
  1132d4:	e1a03fc1 	asr	r3, r1, #31
  1132d8:	e0423003 	sub	r3, r2, r3
  1132dc:	e0803003 	add	r3, r0, r3
  1132e0:	e50b3010 	str	r3, [fp, #-16]
          if (msectimeout == 0) {
  1132e4:	e51b3010 	ldr	r3, [fp, #-16]
  1132e8:	e3530000 	cmp	r3, #0
  1132ec:	1a000001 	bne	1132f8 <lwip_select+0x35c>
            /* Wait 1ms at least (0 means wait forever) */
            msectimeout = 1;
  1132f0:	e3a03001 	mov	r3, #1
  1132f4:	e50b3010 	str	r3, [fp, #-16]
          }
        }

        waitres = sys_arch_sem_wait(SELECT_SEM_PTR(select_cb.sem), msectimeout);
  1132f8:	e24b3f6f 	sub	r3, fp, #444	; 0x1bc
  1132fc:	e2833018 	add	r3, r3, #24
  113300:	e51b1010 	ldr	r1, [fp, #-16]
  113304:	e1a00003 	mov	r0, r3
  113308:	ebffdbb0 	bl	10a1d0 <sys_arch_sem_wait>
  11330c:	e50b0008 	str	r0, [fp, #-8]
#endif
      }
    }

    /* Decrease select_waiting for each socket we are interested in */
    for (i = LWIP_SOCKET_OFFSET; i < maxfdp2; i++) {
  113310:	e3a03000 	mov	r3, #0
  113314:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  113318:	ea000049 	b	113444 <lwip_select+0x4a8>
      if ((readset && FD_ISSET(i, readset)) ||
  11331c:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  113320:	e3530000 	cmp	r3, #0
  113324:	0a000009 	beq	113350 <lwip_select+0x3b4>
  113328:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11332c:	e1a022a3 	lsr	r2, r3, #5
  113330:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  113334:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  113338:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11333c:	e203301f 	and	r3, r3, #31
  113340:	e1a03332 	lsr	r3, r2, r3
  113344:	e2033001 	and	r3, r3, #1
  113348:	e3530000 	cmp	r3, #0
  11334c:	1a000019 	bne	1133b8 <lwip_select+0x41c>
  113350:	e51b31c8 	ldr	r3, [fp, #-456]	; 0xfffffe38
  113354:	e3530000 	cmp	r3, #0
  113358:	0a000009 	beq	113384 <lwip_select+0x3e8>
          (writeset && FD_ISSET(i, writeset)) ||
  11335c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113360:	e1a022a3 	lsr	r2, r3, #5
  113364:	e51b31c8 	ldr	r3, [fp, #-456]	; 0xfffffe38
  113368:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  11336c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113370:	e203301f 	and	r3, r3, #31
  113374:	e1a03332 	lsr	r3, r2, r3
  113378:	e2033001 	and	r3, r3, #1
  11337c:	e3530000 	cmp	r3, #0
  113380:	1a00000c 	bne	1133b8 <lwip_select+0x41c>
  113384:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  113388:	e3530000 	cmp	r3, #0
  11338c:	0a000029 	beq	113438 <lwip_select+0x49c>
          (exceptset && FD_ISSET(i, exceptset))) {
  113390:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113394:	e1a022a3 	lsr	r2, r3, #5
  113398:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  11339c:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  1133a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1133a4:	e203301f 	and	r3, r3, #31
  1133a8:	e1a03332 	lsr	r3, r2, r3
  1133ac:	e2033001 	and	r3, r3, #1
  1133b0:	e3530000 	cmp	r3, #0
  1133b4:	0a00001f 	beq	113438 <lwip_select+0x49c>
        struct lwip_sock *sock;
        SYS_ARCH_PROTECT(lev);
  1133b8:	ebffbb9f 	bl	10223c <rt_enter_critical>
        sock = tryget_socket(i);
  1133bc:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1133c0:	ebfff622 	bl	110c50 <tryget_socket>
  1133c4:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
        if (sock != NULL) {
  1133c8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1133cc:	e3530000 	cmp	r3, #0
  1133d0:	0a000015 	beq	11342c <lwip_select+0x490>
          /* for now, handle select_waiting==0... */
          LWIP_ASSERT("sock->select_waiting > 0", sock->select_waiting > 0);
  1133d4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1133d8:	e5d33011 	ldrb	r3, [r3, #17]
  1133dc:	e3530000 	cmp	r3, #0
  1133e0:	1a000006 	bne	113400 <lwip_select+0x464>
  1133e4:	e3060468 	movw	r0, #25704	; 0x6468
  1133e8:	e3400014 	movt	r0, #20
  1133ec:	ebffbf48 	bl	103114 <rt_kprintf>
  1133f0:	e30015ec 	movw	r1, #1516	; 0x5ec
  1133f4:	e30602b4 	movw	r0, #25268	; 0x62b4
  1133f8:	e3400014 	movt	r0, #20
  1133fc:	ebffddc4 	bl	10ab14 <sys_arch_assert>
          if (sock->select_waiting > 0) {
  113400:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113404:	e5d33011 	ldrb	r3, [r3, #17]
  113408:	e3530000 	cmp	r3, #0
  11340c:	0a000008 	beq	113434 <lwip_select+0x498>
            sock->select_waiting--;
  113410:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113414:	e5d33011 	ldrb	r3, [r3, #17]
  113418:	e2433001 	sub	r3, r3, #1
  11341c:	e6ef2073 	uxtb	r2, r3
  113420:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113424:	e5c32011 	strb	r2, [r3, #17]
  113428:	ea000001 	b	113434 <lwip_select+0x498>
          }
        } else {
          /* Not a valid socket */
          nready = -1;
  11342c:	e3e03000 	mvn	r3, #0
  113430:	e50b300c 	str	r3, [fp, #-12]
        }
        SYS_ARCH_UNPROTECT(lev);
  113434:	ebffbb86 	bl	102254 <rt_exit_critical>
    for (i = LWIP_SOCKET_OFFSET; i < maxfdp2; i++) {
  113438:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11343c:	e2833001 	add	r3, r3, #1
  113440:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  113444:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  113448:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11344c:	e1520003 	cmp	r2, r3
  113450:	baffffb1 	blt	11331c <lwip_select+0x380>
      }
    }
    /* Take us off the list */
    SYS_ARCH_PROTECT(lev);
  113454:	ebffbb78 	bl	10223c <rt_enter_critical>
    if (select_cb.next != NULL) {
  113458:	e51b31bc 	ldr	r3, [fp, #-444]	; 0xfffffe44
  11345c:	e3530000 	cmp	r3, #0
  113460:	0a000002 	beq	113470 <lwip_select+0x4d4>
      select_cb.next->prev = select_cb.prev;
  113464:	e51b31bc 	ldr	r3, [fp, #-444]	; 0xfffffe44
  113468:	e51b21b8 	ldr	r2, [fp, #-440]	; 0xfffffe48
  11346c:	e5832004 	str	r2, [r3, #4]
    }
    if (select_cb_list == &select_cb) {
  113470:	e30d3c14 	movw	r3, #56340	; 0xdc14
  113474:	e3403014 	movt	r3, #20
  113478:	e5932000 	ldr	r2, [r3]
  11347c:	e24b3f6f 	sub	r3, fp, #444	; 0x1bc
  113480:	e1520003 	cmp	r2, r3
  113484:	1a00000e 	bne	1134c4 <lwip_select+0x528>
      LWIP_ASSERT("select_cb.prev == NULL", select_cb.prev == NULL);
  113488:	e51b31b8 	ldr	r3, [fp, #-440]	; 0xfffffe48
  11348c:	e3530000 	cmp	r3, #0
  113490:	0a000006 	beq	1134b0 <lwip_select+0x514>
  113494:	e3060484 	movw	r0, #25732	; 0x6484
  113498:	e3400014 	movt	r0, #20
  11349c:	ebffbf1c 	bl	103114 <rt_kprintf>
  1134a0:	e30015fd 	movw	r1, #1533	; 0x5fd
  1134a4:	e30602b4 	movw	r0, #25268	; 0x62b4
  1134a8:	e3400014 	movt	r0, #20
  1134ac:	ebffdd98 	bl	10ab14 <sys_arch_assert>
      select_cb_list = select_cb.next;
  1134b0:	e51b21bc 	ldr	r2, [fp, #-444]	; 0xfffffe44
  1134b4:	e30d3c14 	movw	r3, #56340	; 0xdc14
  1134b8:	e3403014 	movt	r3, #20
  1134bc:	e5832000 	str	r2, [r3]
  1134c0:	ea00000c 	b	1134f8 <lwip_select+0x55c>
    } else {
      LWIP_ASSERT("select_cb.prev != NULL", select_cb.prev != NULL);
  1134c4:	e51b31b8 	ldr	r3, [fp, #-440]	; 0xfffffe48
  1134c8:	e3530000 	cmp	r3, #0
  1134cc:	1a000006 	bne	1134ec <lwip_select+0x550>
  1134d0:	e306049c 	movw	r0, #25756	; 0x649c
  1134d4:	e3400014 	movt	r0, #20
  1134d8:	ebffbf0d 	bl	103114 <rt_kprintf>
  1134dc:	e3a01c06 	mov	r1, #1536	; 0x600
  1134e0:	e30602b4 	movw	r0, #25268	; 0x62b4
  1134e4:	e3400014 	movt	r0, #20
  1134e8:	ebffdd89 	bl	10ab14 <sys_arch_assert>
      select_cb.prev->next = select_cb.next;
  1134ec:	e51b31b8 	ldr	r3, [fp, #-440]	; 0xfffffe48
  1134f0:	e51b21bc 	ldr	r2, [fp, #-444]	; 0xfffffe44
  1134f4:	e5832000 	str	r2, [r3]
    }
    /* Increasing this counter tells event_callback that the list has changed. */
    select_cb_ctr++;
  1134f8:	e30d3c18 	movw	r3, #56344	; 0xdc18
  1134fc:	e3403014 	movt	r3, #20
  113500:	e5933000 	ldr	r3, [r3]
  113504:	e2832001 	add	r2, r3, #1
  113508:	e30d3c18 	movw	r3, #56344	; 0xdc18
  11350c:	e3403014 	movt	r3, #20
  113510:	e5832000 	str	r2, [r3]
    SYS_ARCH_UNPROTECT(lev);
  113514:	ebffbb4e 	bl	102254 <rt_exit_critical>
    if (select_cb.sem_signalled && (!waited || (waitres == SYS_ARCH_TIMEOUT))) {
      /* don't leave the thread-local semaphore signalled */
      sys_arch_sem_wait(select_cb.sem, 1);
    }
#else /* LWIP_NETCONN_SEM_PER_THREAD */
    sys_sem_free(&select_cb.sem);
  113518:	e24b3f6f 	sub	r3, fp, #444	; 0x1bc
  11351c:	e2833018 	add	r3, r3, #24
  113520:	e1a00003 	mov	r0, r3
  113524:	ebffdb13 	bl	10a178 <sys_sem_free>
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

    if (nready < 0) {
  113528:	e51b300c 	ldr	r3, [fp, #-12]
  11352c:	e3530000 	cmp	r3, #0
  113530:	aa000005 	bge	11354c <lwip_select+0x5b0>
      /* This happens when a socket got closed while waiting */
      set_errno(EBADF);
  113534:	eb009406 	bl	138554 <__errno_location>
  113538:	e1a02000 	mov	r2, r0
  11353c:	e3a03009 	mov	r3, #9
  113540:	e5823000 	str	r3, [r2]
      return -1;
  113544:	e3e03000 	mvn	r3, #0
  113548:	ea000030 	b	113610 <lwip_select+0x674>
    }

    if (waitres == SYS_ARCH_TIMEOUT) {
  11354c:	e51b3008 	ldr	r3, [fp, #-8]
  113550:	e3730001 	cmn	r3, #1
  113554:	0a000010 	beq	11359c <lwip_select+0x600>
         or we would have returned earlier. */
      goto return_copy_fdsets;
    }

    /* See what's set */
    nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
  113558:	e24b3e1a 	sub	r3, fp, #416	; 0x1a0
  11355c:	e58d3008 	str	r3, [sp, #8]
  113560:	e24b3e12 	sub	r3, fp, #288	; 0x120
  113564:	e58d3004 	str	r3, [sp, #4]
  113568:	e24b30a0 	sub	r3, fp, #160	; 0xa0
  11356c:	e58d3000 	str	r3, [sp]
  113570:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  113574:	e51b21c8 	ldr	r2, [fp, #-456]	; 0xfffffe38
  113578:	e51b11c4 	ldr	r1, [fp, #-452]	; 0xfffffe3c
  11357c:	e51b01c0 	ldr	r0, [fp, #-448]	; 0xfffffe40
  113580:	ebfffd7a 	bl	112b70 <lwip_selscan>
  113584:	e50b000c 	str	r0, [fp, #-12]
  113588:	ea000004 	b	1135a0 <lwip_select+0x604>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select: nready=%d\n", nready));
return_copy_fdsets:
  11358c:	e320f000 	nop	{0}
  113590:	ea000002 	b	1135a0 <lwip_select+0x604>
      goto return_copy_fdsets;
  113594:	e320f000 	nop	{0}
  113598:	ea000000 	b	1135a0 <lwip_select+0x604>
      goto return_copy_fdsets;
  11359c:	e320f000 	nop	{0}
  set_errno(0);
  if (readset) {
  1135a0:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  1135a4:	e3530000 	cmp	r3, #0
  1135a8:	0a000005 	beq	1135c4 <lwip_select+0x628>
    *readset = lreadset;
  1135ac:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  1135b0:	e1a00003 	mov	r0, r3
  1135b4:	e24b30a0 	sub	r3, fp, #160	; 0xa0
  1135b8:	e3a02080 	mov	r2, #128	; 0x80
  1135bc:	e1a01003 	mov	r1, r3
  1135c0:	eb00b391 	bl	14040c <memcpy>
  }
  if (writeset) {
  1135c4:	e51b31c8 	ldr	r3, [fp, #-456]	; 0xfffffe38
  1135c8:	e3530000 	cmp	r3, #0
  1135cc:	0a000005 	beq	1135e8 <lwip_select+0x64c>
    *writeset = lwriteset;
  1135d0:	e51b31c8 	ldr	r3, [fp, #-456]	; 0xfffffe38
  1135d4:	e1a00003 	mov	r0, r3
  1135d8:	e24b3e12 	sub	r3, fp, #288	; 0x120
  1135dc:	e3a02080 	mov	r2, #128	; 0x80
  1135e0:	e1a01003 	mov	r1, r3
  1135e4:	eb00b388 	bl	14040c <memcpy>
  }
  if (exceptset) {
  1135e8:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  1135ec:	e3530000 	cmp	r3, #0
  1135f0:	0a000005 	beq	11360c <lwip_select+0x670>
    *exceptset = lexceptset;
  1135f4:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  1135f8:	e1a00003 	mov	r0, r3
  1135fc:	e24b3e1a 	sub	r3, fp, #416	; 0x1a0
  113600:	e3a02080 	mov	r2, #128	; 0x80
  113604:	e1a01003 	mov	r1, r3
  113608:	eb00b37f 	bl	14040c <memcpy>
  }
  return nready;
  11360c:	e51b300c 	ldr	r3, [fp, #-12]
}
  113610:	e1a00003 	mov	r0, r3
  113614:	e24bd004 	sub	sp, fp, #4
  113618:	e8bd8800 	pop	{fp, pc}

0011361c <event_callback>:
#define POLLOUT    0x2
#define POLLERR    0x4
#define UNET_WAKEUP_REQUEST         45
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
  11361c:	e92d4800 	push	{fp, lr}
  113620:	e28db004 	add	fp, sp, #4
  113624:	e24dd028 	sub	sp, sp, #40	; 0x28
  113628:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  11362c:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  113630:	e1a03002 	mov	r3, r2
  113634:	e14b32b6 	strh	r3, [fp, #-38]	; 0xffffffda
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
  113638:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11363c:	e3530000 	cmp	r3, #0
  113640:	0a0000e5 	beq	1139dc <event_callback+0x3c0>
    s = conn->socket;
  113644:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113648:	e593301c 	ldr	r3, [r3, #28]
  11364c:	e50b3008 	str	r3, [fp, #-8]
    if (s < 0) {
  113650:	e51b3008 	ldr	r3, [fp, #-8]
  113654:	e3530000 	cmp	r3, #0
  113658:	aa000012 	bge	1136a8 <event_callback+0x8c>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
  11365c:	ebffbaf6 	bl	10223c <rt_enter_critical>
      if (conn->socket < 0) {
  113660:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113664:	e593301c 	ldr	r3, [r3, #28]
  113668:	e3530000 	cmp	r3, #0
  11366c:	aa000009 	bge	113698 <event_callback+0x7c>
        if (evt == NETCONN_EVT_RCVPLUS) {
  113670:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  113674:	e3530000 	cmp	r3, #0
  113678:	1a000004 	bne	113690 <event_callback+0x74>
          conn->socket--;
  11367c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113680:	e593301c 	ldr	r3, [r3, #28]
  113684:	e2432001 	sub	r2, r3, #1
  113688:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11368c:	e583201c 	str	r2, [r3, #28]
        }
        SYS_ARCH_UNPROTECT(lev);
  113690:	ebffbaef 	bl	102254 <rt_exit_critical>
        return;
  113694:	ea0000d3 	b	1139e8 <event_callback+0x3cc>
      }
      s = conn->socket;
  113698:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11369c:	e593301c 	ldr	r3, [r3, #28]
  1136a0:	e50b3008 	str	r3, [fp, #-8]
      SYS_ARCH_UNPROTECT(lev);
  1136a4:	ebffbaea 	bl	102254 <rt_exit_critical>
    }

    sock = get_socket(s);
  1136a8:	e51b0008 	ldr	r0, [fp, #-8]
  1136ac:	ebfff542 	bl	110bbc <get_socket>
  1136b0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    if (!sock) {
  1136b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1136b8:	e3530000 	cmp	r3, #0
  1136bc:	0a0000c8 	beq	1139e4 <event_callback+0x3c8>
    }
  } else {
    return;
  }

  SYS_ARCH_PROTECT(lev);
  1136c0:	ebffbadd 	bl	10223c <rt_enter_critical>
  /* Set event as required */
  switch (evt) {
  1136c4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1136c8:	e3530004 	cmp	r3, #4
  1136cc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  1136d0:	ea000022 	b	113760 <event_callback+0x144>
  1136d4:	001136e8 	.word	0x001136e8
  1136d8:	0011370c 	.word	0x0011370c
  1136dc:	00113730 	.word	0x00113730
  1136e0:	00113740 	.word	0x00113740
  1136e4:	00113750 	.word	0x00113750
    case NETCONN_EVT_RCVPLUS:
      /* *RT-Thread* need to be notified in kernel */
      sock->rcvevent++;
  1136e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1136ec:	e1d330fa 	ldrsh	r3, [r3, #10]
  1136f0:	e6ff3073 	uxth	r3, r3
  1136f4:	e2833001 	add	r3, r3, #1
  1136f8:	e6ff3073 	uxth	r3, r3
  1136fc:	e6bf2073 	sxth	r2, r3
  113700:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113704:	e1c320ba 	strh	r2, [r3, #10]
      break;
  113708:	ea00001c 	b	113780 <event_callback+0x164>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
  11370c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113710:	e1d330fa 	ldrsh	r3, [r3, #10]
  113714:	e6ff3073 	uxth	r3, r3
  113718:	e2433001 	sub	r3, r3, #1
  11371c:	e6ff3073 	uxth	r3, r3
  113720:	e6bf2073 	sxth	r2, r3
  113724:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113728:	e1c320ba 	strh	r2, [r3, #10]
      break;
  11372c:	ea000013 	b	113780 <event_callback+0x164>
    case NETCONN_EVT_SENDPLUS:
      sock->sendevent = 1;
  113730:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113734:	e3a02001 	mov	r2, #1
  113738:	e1c320bc 	strh	r2, [r3, #12]
      break;
  11373c:	ea00000f 	b	113780 <event_callback+0x164>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
  113740:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113744:	e3a02000 	mov	r2, #0
  113748:	e1c320bc 	strh	r2, [r3, #12]
      break;
  11374c:	ea00000b 	b	113780 <event_callback+0x164>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
  113750:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113754:	e3a02001 	mov	r2, #1
  113758:	e1c320be 	strh	r2, [r3, #14]
      break;
  11375c:	ea000007 	b	113780 <event_callback+0x164>
    default:
      LWIP_ASSERT("unknown event", 0);
  113760:	e30604b4 	movw	r0, #25780	; 0x64b4
  113764:	e3400014 	movt	r0, #20
  113768:	ebffbe69 	bl	103114 <rt_kprintf>
  11376c:	e3001679 	movw	r1, #1657	; 0x679
  113770:	e30602b4 	movw	r0, #25268	; 0x62b4
  113774:	e3400014 	movt	r0, #20
  113778:	ebffdce5 	bl	10ab14 <sys_arch_assert>
      break;
  11377c:	e320f000 	nop	{0}
  }

  int mask = 0;
  113780:	e3a03000 	mov	r3, #0
  113784:	e50b3010 	str	r3, [fp, #-16]
  if (sock != NULL)
  113788:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11378c:	e3530000 	cmp	r3, #0
  113790:	0a00001b 	beq	113804 <event_callback+0x1e8>
  {
#if LWIP_VERSION >= 0x20100ff
      if ((void*)(sock->lastdata.pbuf) || sock->rcvevent)
#else
      if ((void *)(sock->lastdata) || sock->rcvevent)
  113794:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113798:	e5933004 	ldr	r3, [r3, #4]
  11379c:	e3530000 	cmp	r3, #0
  1137a0:	1a000003 	bne	1137b4 <event_callback+0x198>
  1137a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1137a8:	e1d330fa 	ldrsh	r3, [r3, #10]
  1137ac:	e3530000 	cmp	r3, #0
  1137b0:	0a000002 	beq	1137c0 <event_callback+0x1a4>
#endif
      {
          mask |= POLLIN;
  1137b4:	e51b3010 	ldr	r3, [fp, #-16]
  1137b8:	e3833001 	orr	r3, r3, #1
  1137bc:	e50b3010 	str	r3, [fp, #-16]
      }
      if (sock->sendevent)
  1137c0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1137c4:	e1d330bc 	ldrh	r3, [r3, #12]
  1137c8:	e3530000 	cmp	r3, #0
  1137cc:	0a000002 	beq	1137dc <event_callback+0x1c0>
      {
          mask |= POLLOUT;
  1137d0:	e51b3010 	ldr	r3, [fp, #-16]
  1137d4:	e3833002 	orr	r3, r3, #2
  1137d8:	e50b3010 	str	r3, [fp, #-16]
      }
      if (sock->errevent)
  1137dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1137e0:	e1d330be 	ldrh	r3, [r3, #14]
  1137e4:	e3530000 	cmp	r3, #0
  1137e8:	0a000005 	beq	113804 <event_callback+0x1e8>
      {
          mask |= POLLERR;
  1137ec:	e51b3010 	ldr	r3, [fp, #-16]
  1137f0:	e3833004 	orr	r3, r3, #4
  1137f4:	e50b3010 	str	r3, [fp, #-16]
          /* clean error event */
          sock->errevent = 0;
  1137f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1137fc:	e3a02000 	mov	r2, #0
  113800:	e1c320be 	strh	r2, [r3, #14]
  //     {
  //       rt_kprintf("create msg error\n");
  //     }
  // }

  if (sock->select_waiting == 0) {
  113804:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113808:	e5d33011 	ldrb	r3, [r3, #17]
  11380c:	e3530000 	cmp	r3, #0
  113810:	1a000001 	bne	11381c <event_callback+0x200>
    /* noone is waiting for this socket, no need to check select_cb_list */
    SYS_ARCH_UNPROTECT(lev);
  113814:	ebffba8e 	bl	102254 <rt_exit_critical>
    return;
  113818:	ea000072 	b	1139e8 <event_callback+0x3cc>
  /* NOTE: This code goes through the select_cb_list list multiple times
     ONLY IF a select was actually waiting. We go through the list the number
     of waiting select calls + 1. This list is expected to be small. */

  /* At this point, SYS_ARCH is still protected! */
again:
  11381c:	e320f000 	nop	{0}
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
  113820:	e30d3c14 	movw	r3, #56340	; 0xdc14
  113824:	e3403014 	movt	r3, #20
  113828:	e5933000 	ldr	r3, [r3]
  11382c:	e50b300c 	str	r3, [fp, #-12]
  113830:	ea000064 	b	1139c8 <event_callback+0x3ac>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  113834:	e30d3c18 	movw	r3, #56344	; 0xdc18
  113838:	e3403014 	movt	r3, #20
  11383c:	e5933000 	ldr	r3, [r3]
  113840:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    if (scb->sem_signalled == 0) {
  113844:	e51b300c 	ldr	r3, [fp, #-12]
  113848:	e5933014 	ldr	r3, [r3, #20]
  11384c:	e3530000 	cmp	r3, #0
  113850:	1a000050 	bne	113998 <event_callback+0x37c>
      /* semaphore not signalled yet */
      int do_signal = 0;
  113854:	e3a03000 	mov	r3, #0
  113858:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      /* Test this select call for our socket */
      if (sock->rcvevent > 0) {
  11385c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113860:	e1d330fa 	ldrsh	r3, [r3, #10]
  113864:	e3530000 	cmp	r3, #0
  113868:	da000010 	ble	1138b0 <event_callback+0x294>
        if (scb->readset && FD_ISSET(s, scb->readset)) {
  11386c:	e51b300c 	ldr	r3, [fp, #-12]
  113870:	e5933008 	ldr	r3, [r3, #8]
  113874:	e3530000 	cmp	r3, #0
  113878:	0a00000c 	beq	1138b0 <event_callback+0x294>
  11387c:	e51b300c 	ldr	r3, [fp, #-12]
  113880:	e5933008 	ldr	r3, [r3, #8]
  113884:	e51b2008 	ldr	r2, [fp, #-8]
  113888:	e1a022a2 	lsr	r2, r2, #5
  11388c:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  113890:	e51b3008 	ldr	r3, [fp, #-8]
  113894:	e203301f 	and	r3, r3, #31
  113898:	e1a03332 	lsr	r3, r2, r3
  11389c:	e2033001 	and	r3, r3, #1
  1138a0:	e3530000 	cmp	r3, #0
  1138a4:	0a000001 	beq	1138b0 <event_callback+0x294>
          do_signal = 1;
  1138a8:	e3a03001 	mov	r3, #1
  1138ac:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        }
      }
      if (sock->sendevent != 0) {
  1138b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1138b4:	e1d330bc 	ldrh	r3, [r3, #12]
  1138b8:	e3530000 	cmp	r3, #0
  1138bc:	0a000013 	beq	113910 <event_callback+0x2f4>
        if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
  1138c0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1138c4:	e3530000 	cmp	r3, #0
  1138c8:	1a000010 	bne	113910 <event_callback+0x2f4>
  1138cc:	e51b300c 	ldr	r3, [fp, #-12]
  1138d0:	e593300c 	ldr	r3, [r3, #12]
  1138d4:	e3530000 	cmp	r3, #0
  1138d8:	0a00000c 	beq	113910 <event_callback+0x2f4>
  1138dc:	e51b300c 	ldr	r3, [fp, #-12]
  1138e0:	e593300c 	ldr	r3, [r3, #12]
  1138e4:	e51b2008 	ldr	r2, [fp, #-8]
  1138e8:	e1a022a2 	lsr	r2, r2, #5
  1138ec:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  1138f0:	e51b3008 	ldr	r3, [fp, #-8]
  1138f4:	e203301f 	and	r3, r3, #31
  1138f8:	e1a03332 	lsr	r3, r2, r3
  1138fc:	e2033001 	and	r3, r3, #1
  113900:	e3530000 	cmp	r3, #0
  113904:	0a000001 	beq	113910 <event_callback+0x2f4>
          do_signal = 1;
  113908:	e3a03001 	mov	r3, #1
  11390c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        }
      }
      if (sock->errevent != 0) {
  113910:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113914:	e1d330be 	ldrh	r3, [r3, #14]
  113918:	e3530000 	cmp	r3, #0
  11391c:	0a000013 	beq	113970 <event_callback+0x354>
        if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
  113920:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113924:	e3530000 	cmp	r3, #0
  113928:	1a000010 	bne	113970 <event_callback+0x354>
  11392c:	e51b300c 	ldr	r3, [fp, #-12]
  113930:	e5933010 	ldr	r3, [r3, #16]
  113934:	e3530000 	cmp	r3, #0
  113938:	0a00000c 	beq	113970 <event_callback+0x354>
  11393c:	e51b300c 	ldr	r3, [fp, #-12]
  113940:	e5933010 	ldr	r3, [r3, #16]
  113944:	e51b2008 	ldr	r2, [fp, #-8]
  113948:	e1a022a2 	lsr	r2, r2, #5
  11394c:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  113950:	e51b3008 	ldr	r3, [fp, #-8]
  113954:	e203301f 	and	r3, r3, #31
  113958:	e1a03332 	lsr	r3, r2, r3
  11395c:	e2033001 	and	r3, r3, #1
  113960:	e3530000 	cmp	r3, #0
  113964:	0a000001 	beq	113970 <event_callback+0x354>
          do_signal = 1;
  113968:	e3a03001 	mov	r3, #1
  11396c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        }
      }
      if (do_signal) {
  113970:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113974:	e3530000 	cmp	r3, #0
  113978:	0a000006 	beq	113998 <event_callback+0x37c>
        scb->sem_signalled = 1;
  11397c:	e51b300c 	ldr	r3, [fp, #-12]
  113980:	e3a02001 	mov	r2, #1
  113984:	e5832014 	str	r2, [r3, #20]
        /* Don't call SYS_ARCH_UNPROTECT() before signaling the semaphore, as this might
           lead to the select thread taking itself off the list, invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
  113988:	e51b300c 	ldr	r3, [fp, #-12]
  11398c:	e2833018 	add	r3, r3, #24
  113990:	e1a00003 	mov	r0, r3
  113994:	ebffda02 	bl	10a1a4 <sys_sem_signal>
      }
    }
    /* unlock interrupts with each step */
    SYS_ARCH_UNPROTECT(lev);
  113998:	ebffba2d 	bl	102254 <rt_exit_critical>
    /* this makes sure interrupt protection time is short */
    SYS_ARCH_PROTECT(lev);
  11399c:	ebffba26 	bl	10223c <rt_enter_critical>
    if (last_select_cb_ctr != select_cb_ctr) {
  1139a0:	e30d3c18 	movw	r3, #56344	; 0xdc18
  1139a4:	e3403014 	movt	r3, #20
  1139a8:	e5933000 	ldr	r3, [r3]
  1139ac:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1139b0:	e1520003 	cmp	r2, r3
  1139b4:	0a000000 	beq	1139bc <event_callback+0x3a0>
      /* someone has changed select_cb_list, restart at the beginning */
      goto again;
  1139b8:	eaffff98 	b	113820 <event_callback+0x204>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
  1139bc:	e51b300c 	ldr	r3, [fp, #-12]
  1139c0:	e5933000 	ldr	r3, [r3]
  1139c4:	e50b300c 	str	r3, [fp, #-12]
  1139c8:	e51b300c 	ldr	r3, [fp, #-12]
  1139cc:	e3530000 	cmp	r3, #0
  1139d0:	1affff97 	bne	113834 <event_callback+0x218>
    }
  }
  SYS_ARCH_UNPROTECT(lev);
  1139d4:	ebffba1e 	bl	102254 <rt_exit_critical>
  1139d8:	ea000002 	b	1139e8 <event_callback+0x3cc>
    return;
  1139dc:	e320f000 	nop	{0}
  1139e0:	ea000000 	b	1139e8 <event_callback+0x3cc>
      return;
  1139e4:	e320f000 	nop	{0}
}
  1139e8:	e24bd004 	sub	sp, fp, #4
  1139ec:	e8bd8800 	pop	{fp, pc}

001139f0 <lwip_shutdown>:
/**
 * Close one end of a full-duplex connection.
 */
int
lwip_shutdown(int s, int how)
{
  1139f0:	e92d4800 	push	{fp, lr}
  1139f4:	e28db004 	add	fp, sp, #4
  1139f8:	e24dd028 	sub	sp, sp, #40	; 0x28
  1139fc:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  113a00:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  struct lwip_sock *sock;
  err_t err;
  u8_t shut_rx = 0, shut_tx = 0;
  113a04:	e3a03000 	mov	r3, #0
  113a08:	e54b3005 	strb	r3, [fp, #-5]
  113a0c:	e3a03000 	mov	r3, #0
  113a10:	e54b3006 	strb	r3, [fp, #-6]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_shutdown(%d, how=%d)\n", s, how));

  sock = get_socket(s);
  113a14:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  113a18:	ebfff467 	bl	110bbc <get_socket>
  113a1c:	e50b000c 	str	r0, [fp, #-12]
  if (!sock) {
  113a20:	e51b300c 	ldr	r3, [fp, #-12]
  113a24:	e3530000 	cmp	r3, #0
  113a28:	1a000001 	bne	113a34 <lwip_shutdown+0x44>
    return -1;
  113a2c:	e3e03000 	mvn	r3, #0
  113a30:	ea000067 	b	113bd4 <lwip_shutdown+0x1e4>
  }

  if (sock->conn != NULL) {
  113a34:	e51b300c 	ldr	r3, [fp, #-12]
  113a38:	e5933000 	ldr	r3, [r3]
  113a3c:	e3530000 	cmp	r3, #0
  113a40:	0a000014 	beq	113a98 <lwip_shutdown+0xa8>
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
  113a44:	e51b300c 	ldr	r3, [fp, #-12]
  113a48:	e5933000 	ldr	r3, [r3]
  113a4c:	e5933000 	ldr	r3, [r3]
  113a50:	e20330f0 	and	r3, r3, #240	; 0xf0
  113a54:	e3530010 	cmp	r3, #16
  113a58:	0a00001d 	beq	113ad4 <lwip_shutdown+0xe4>
      sock_set_errno(sock, EOPNOTSUPP);
  113a5c:	e3a0305f 	mov	r3, #95	; 0x5f
  113a60:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  113a64:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113a68:	e6ef2073 	uxtb	r2, r3
  113a6c:	e51b300c 	ldr	r3, [fp, #-12]
  113a70:	e5c32010 	strb	r2, [r3, #16]
  113a74:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113a78:	e3530000 	cmp	r3, #0
  113a7c:	0a000003 	beq	113a90 <lwip_shutdown+0xa0>
  113a80:	eb0092b3 	bl	138554 <__errno_location>
  113a84:	e1a02000 	mov	r2, r0
  113a88:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113a8c:	e5823000 	str	r3, [r2]
      return -1;
  113a90:	e3e03000 	mvn	r3, #0
  113a94:	ea00004e 	b	113bd4 <lwip_shutdown+0x1e4>
    }
  } else {
    sock_set_errno(sock, ENOTCONN);
  113a98:	e3a0306b 	mov	r3, #107	; 0x6b
  113a9c:	e50b3010 	str	r3, [fp, #-16]
  113aa0:	e51b3010 	ldr	r3, [fp, #-16]
  113aa4:	e6ef2073 	uxtb	r2, r3
  113aa8:	e51b300c 	ldr	r3, [fp, #-12]
  113aac:	e5c32010 	strb	r2, [r3, #16]
  113ab0:	e51b3010 	ldr	r3, [fp, #-16]
  113ab4:	e3530000 	cmp	r3, #0
  113ab8:	0a000003 	beq	113acc <lwip_shutdown+0xdc>
  113abc:	eb0092a4 	bl	138554 <__errno_location>
  113ac0:	e1a02000 	mov	r2, r0
  113ac4:	e51b3010 	ldr	r3, [fp, #-16]
  113ac8:	e5823000 	str	r3, [r2]
    return -1;
  113acc:	e3e03000 	mvn	r3, #0
  113ad0:	ea00003f 	b	113bd4 <lwip_shutdown+0x1e4>
  }

  if (how == SHUT_RD) {
  113ad4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  113ad8:	e3530000 	cmp	r3, #0
  113adc:	1a000002 	bne	113aec <lwip_shutdown+0xfc>
    shut_rx = 1;
  113ae0:	e3a03001 	mov	r3, #1
  113ae4:	e54b3005 	strb	r3, [fp, #-5]
  113ae8:	ea00001c 	b	113b60 <lwip_shutdown+0x170>
  } else if (how == SHUT_WR) {
  113aec:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  113af0:	e3530001 	cmp	r3, #1
  113af4:	1a000002 	bne	113b04 <lwip_shutdown+0x114>
    shut_tx = 1;
  113af8:	e3a03001 	mov	r3, #1
  113afc:	e54b3006 	strb	r3, [fp, #-6]
  113b00:	ea000016 	b	113b60 <lwip_shutdown+0x170>
  } else if (how == SHUT_RDWR) {
  113b04:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  113b08:	e3530002 	cmp	r3, #2
  113b0c:	1a000004 	bne	113b24 <lwip_shutdown+0x134>
    shut_rx = 1;
  113b10:	e3a03001 	mov	r3, #1
  113b14:	e54b3005 	strb	r3, [fp, #-5]
    shut_tx = 1;
  113b18:	e3a03001 	mov	r3, #1
  113b1c:	e54b3006 	strb	r3, [fp, #-6]
  113b20:	ea00000e 	b	113b60 <lwip_shutdown+0x170>
  } else {
    sock_set_errno(sock, EINVAL);
  113b24:	e3a03016 	mov	r3, #22
  113b28:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  113b2c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113b30:	e6ef2073 	uxtb	r2, r3
  113b34:	e51b300c 	ldr	r3, [fp, #-12]
  113b38:	e5c32010 	strb	r2, [r3, #16]
  113b3c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113b40:	e3530000 	cmp	r3, #0
  113b44:	0a000003 	beq	113b58 <lwip_shutdown+0x168>
  113b48:	eb009281 	bl	138554 <__errno_location>
  113b4c:	e1a02000 	mov	r2, r0
  113b50:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113b54:	e5823000 	str	r3, [r2]
    return -1;
  113b58:	e3e03000 	mvn	r3, #0
  113b5c:	ea00001c 	b	113bd4 <lwip_shutdown+0x1e4>
  }
  err = netconn_shutdown(sock->conn, shut_rx, shut_tx);
  113b60:	e51b300c 	ldr	r3, [fp, #-12]
  113b64:	e5933000 	ldr	r3, [r3]
  113b68:	e55b2006 	ldrb	r2, [fp, #-6]
  113b6c:	e55b1005 	ldrb	r1, [fp, #-5]
  113b70:	e1a00003 	mov	r0, r3
  113b74:	ebffe0c3 	bl	10be88 <netconn_shutdown>
  113b78:	e1a03000 	mov	r3, r0
  113b7c:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb

  sock_set_errno(sock, err_to_errno(err));
  113b80:	e15b31d5 	ldrsb	r3, [fp, #-21]	; 0xffffffeb
  113b84:	e1a00003 	mov	r0, r3
  113b88:	ebffefe3 	bl	10fb1c <err_to_errno>
  113b8c:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
  113b90:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  113b94:	e6ef2073 	uxtb	r2, r3
  113b98:	e51b300c 	ldr	r3, [fp, #-12]
  113b9c:	e5c32010 	strb	r2, [r3, #16]
  113ba0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  113ba4:	e3530000 	cmp	r3, #0
  113ba8:	0a000003 	beq	113bbc <lwip_shutdown+0x1cc>
  113bac:	eb009268 	bl	138554 <__errno_location>
  113bb0:	e1a02000 	mov	r2, r0
  113bb4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  113bb8:	e5823000 	str	r3, [r2]
  return (err == ERR_OK ? 0 : -1);
  113bbc:	e15b31d5 	ldrsb	r3, [fp, #-21]	; 0xffffffeb
  113bc0:	e3530000 	cmp	r3, #0
  113bc4:	1a000001 	bne	113bd0 <lwip_shutdown+0x1e0>
  113bc8:	e3a03000 	mov	r3, #0
  113bcc:	ea000000 	b	113bd4 <lwip_shutdown+0x1e4>
  113bd0:	e3e03000 	mvn	r3, #0
}
  113bd4:	e1a00003 	mov	r0, r3
  113bd8:	e24bd004 	sub	sp, fp, #4
  113bdc:	e8bd8800 	pop	{fp, pc}

00113be0 <lwip_getaddrname>:

static int
lwip_getaddrname(int s, struct sockaddr *name, socklen_t *namelen, u8_t local)
{
  113be0:	e92d4810 	push	{r4, fp, lr}
  113be4:	e28db008 	add	fp, sp, #8
  113be8:	e24dd03c 	sub	sp, sp, #60	; 0x3c
  113bec:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
  113bf0:	e50b103c 	str	r1, [fp, #-60]	; 0xffffffc4
  113bf4:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
  113bf8:	e54b3041 	strb	r3, [fp, #-65]	; 0xffffffbf
  union sockaddr_aligned saddr;
  ip_addr_t naddr;
  u16_t port;
  err_t err;

  sock = get_socket(s);
  113bfc:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
  113c00:	ebfff3ed 	bl	110bbc <get_socket>
  113c04:	e50b0010 	str	r0, [fp, #-16]
  if (!sock) {
  113c08:	e51b3010 	ldr	r3, [fp, #-16]
  113c0c:	e3530000 	cmp	r3, #0
  113c10:	1a000001 	bne	113c1c <lwip_getaddrname+0x3c>
    return -1;
  113c14:	e3e03000 	mvn	r3, #0
  113c18:	ea00004d 	b	113d54 <lwip_getaddrname+0x174>
  }

  /* get the IP address and port */
  err = netconn_getaddr(sock->conn, &naddr, &port, local);
  113c1c:	e51b3010 	ldr	r3, [fp, #-16]
  113c20:	e5930000 	ldr	r0, [r3]
  113c24:	e55b3041 	ldrb	r3, [fp, #-65]	; 0xffffffbf
  113c28:	e24b2032 	sub	r2, fp, #50	; 0x32
  113c2c:	e24b1030 	sub	r1, fp, #48	; 0x30
  113c30:	ebffdd45 	bl	10b14c <netconn_getaddr>
  113c34:	e1a03000 	mov	r3, r0
  113c38:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  if (err != ERR_OK) {
  113c3c:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  113c40:	e3530000 	cmp	r3, #0
  113c44:	0a000010 	beq	113c8c <lwip_getaddrname+0xac>
    sock_set_errno(sock, err_to_errno(err));
  113c48:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  113c4c:	e1a00003 	mov	r0, r3
  113c50:	ebffefb1 	bl	10fb1c <err_to_errno>
  113c54:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
  113c58:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  113c5c:	e6ef2073 	uxtb	r2, r3
  113c60:	e51b3010 	ldr	r3, [fp, #-16]
  113c64:	e5c32010 	strb	r2, [r3, #16]
  113c68:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  113c6c:	e3530000 	cmp	r3, #0
  113c70:	0a000003 	beq	113c84 <lwip_getaddrname+0xa4>
  113c74:	eb009236 	bl	138554 <__errno_location>
  113c78:	e1a02000 	mov	r2, r0
  113c7c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  113c80:	e5823000 	str	r3, [r2]
    return -1;
  113c84:	e3e03000 	mvn	r3, #0
  113c88:	ea000031 	b	113d54 <lwip_getaddrname+0x174>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(&naddr), ip_2_ip4(&naddr));
    IP_SET_TYPE_VAL(naddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, &naddr, port);
  113c8c:	e24b302c 	sub	r3, fp, #44	; 0x2c
  113c90:	e3a02010 	mov	r2, #16
  113c94:	e5c32000 	strb	r2, [r3]
  113c98:	e24b302c 	sub	r3, fp, #44	; 0x2c
  113c9c:	e3a02002 	mov	r2, #2
  113ca0:	e5c32001 	strb	r2, [r3, #1]
  113ca4:	e15b33b2 	ldrh	r3, [fp, #-50]	; 0xffffffce
  113ca8:	e24b402c 	sub	r4, fp, #44	; 0x2c
  113cac:	e1a00003 	mov	r0, r3
  113cb0:	eb00096e 	bl	116270 <lwip_htons>
  113cb4:	e1a03000 	mov	r3, r0
  113cb8:	e1c430b2 	strh	r3, [r4, #2]
  113cbc:	e24b302c 	sub	r3, fp, #44	; 0x2c
  113cc0:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  113cc4:	e5832004 	str	r2, [r3, #4]
  113cc8:	e24b302c 	sub	r3, fp, #44	; 0x2c
  113ccc:	e2833008 	add	r3, r3, #8
  113cd0:	e3a02008 	mov	r2, #8
  113cd4:	e3a01000 	mov	r1, #0
  113cd8:	e1a00003 	mov	r0, r3
  113cdc:	eb00b302 	bl	1408ec <memset>

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getaddrname(%d, addr=", s));
  ip_addr_debug_print_val(SOCKETS_DEBUG, naddr);
  LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F")\n", port));

  if (*namelen > saddr.sa.sa_len) {
  113ce0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  113ce4:	e5933000 	ldr	r3, [r3]
  113ce8:	e55b202c 	ldrb	r2, [fp, #-44]	; 0xffffffd4
  113cec:	e1530002 	cmp	r3, r2
  113cf0:	9a000003 	bls	113d04 <lwip_getaddrname+0x124>
    *namelen = saddr.sa.sa_len;
  113cf4:	e55b302c 	ldrb	r3, [fp, #-44]	; 0xffffffd4
  113cf8:	e1a02003 	mov	r2, r3
  113cfc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  113d00:	e5832000 	str	r2, [r3]
  }
  MEMCPY(name, &saddr, *namelen);
  113d04:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  113d08:	e5932000 	ldr	r2, [r3]
  113d0c:	e24b302c 	sub	r3, fp, #44	; 0x2c
  113d10:	e1a01003 	mov	r1, r3
  113d14:	e51b003c 	ldr	r0, [fp, #-60]	; 0xffffffc4
  113d18:	eb00b1bb 	bl	14040c <memcpy>

  sock_set_errno(sock, 0);
  113d1c:	e3a03000 	mov	r3, #0
  113d20:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  113d24:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113d28:	e6ef2073 	uxtb	r2, r3
  113d2c:	e51b3010 	ldr	r3, [fp, #-16]
  113d30:	e5c32010 	strb	r2, [r3, #16]
  113d34:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113d38:	e3530000 	cmp	r3, #0
  113d3c:	0a000003 	beq	113d50 <lwip_getaddrname+0x170>
  113d40:	eb009203 	bl	138554 <__errno_location>
  113d44:	e1a02000 	mov	r2, r0
  113d48:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113d4c:	e5823000 	str	r3, [r2]
  return 0;
  113d50:	e3a03000 	mov	r3, #0
}
  113d54:	e1a00003 	mov	r0, r3
  113d58:	e24bd008 	sub	sp, fp, #8
  113d5c:	e8bd8810 	pop	{r4, fp, pc}

00113d60 <lwip_getpeername>:

int
lwip_getpeername(int s, struct sockaddr *name, socklen_t *namelen)
{
  113d60:	e92d4800 	push	{fp, lr}
  113d64:	e28db004 	add	fp, sp, #4
  113d68:	e24dd010 	sub	sp, sp, #16
  113d6c:	e50b0008 	str	r0, [fp, #-8]
  113d70:	e50b100c 	str	r1, [fp, #-12]
  113d74:	e50b2010 	str	r2, [fp, #-16]
  return lwip_getaddrname(s, name, namelen, 0);
  113d78:	e3a03000 	mov	r3, #0
  113d7c:	e51b2010 	ldr	r2, [fp, #-16]
  113d80:	e51b100c 	ldr	r1, [fp, #-12]
  113d84:	e51b0008 	ldr	r0, [fp, #-8]
  113d88:	ebffff94 	bl	113be0 <lwip_getaddrname>
  113d8c:	e1a03000 	mov	r3, r0
}
  113d90:	e1a00003 	mov	r0, r3
  113d94:	e24bd004 	sub	sp, fp, #4
  113d98:	e8bd8800 	pop	{fp, pc}

00113d9c <lwip_getsockname>:

int
lwip_getsockname(int s, struct sockaddr *name, socklen_t *namelen)
{
  113d9c:	e92d4800 	push	{fp, lr}
  113da0:	e28db004 	add	fp, sp, #4
  113da4:	e24dd010 	sub	sp, sp, #16
  113da8:	e50b0008 	str	r0, [fp, #-8]
  113dac:	e50b100c 	str	r1, [fp, #-12]
  113db0:	e50b2010 	str	r2, [fp, #-16]
  return lwip_getaddrname(s, name, namelen, 1);
  113db4:	e3a03001 	mov	r3, #1
  113db8:	e51b2010 	ldr	r2, [fp, #-16]
  113dbc:	e51b100c 	ldr	r1, [fp, #-12]
  113dc0:	e51b0008 	ldr	r0, [fp, #-8]
  113dc4:	ebffff85 	bl	113be0 <lwip_getaddrname>
  113dc8:	e1a03000 	mov	r3, r0
}
  113dcc:	e1a00003 	mov	r0, r3
  113dd0:	e24bd004 	sub	sp, fp, #4
  113dd4:	e8bd8800 	pop	{fp, pc}

00113dd8 <lwip_getsockopt>:

int
lwip_getsockopt(int s, int level, int optname, void *optval, socklen_t *optlen)
{
  113dd8:	e92d4800 	push	{fp, lr}
  113ddc:	e28db004 	add	fp, sp, #4
  113de0:	e24dd028 	sub	sp, sp, #40	; 0x28
  113de4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  113de8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  113dec:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  113df0:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  u8_t err;
  struct lwip_sock *sock = get_socket(s);
  113df4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  113df8:	ebfff36f 	bl	110bbc <get_socket>
  113dfc:	e50b0008 	str	r0, [fp, #-8]
#if !LWIP_TCPIP_CORE_LOCKING
  LWIP_SETGETSOCKOPT_DATA_VAR_DECLARE(data);
#endif /* !LWIP_TCPIP_CORE_LOCKING */

  if (!sock) {
  113e00:	e51b3008 	ldr	r3, [fp, #-8]
  113e04:	e3530000 	cmp	r3, #0
  113e08:	1a000001 	bne	113e14 <lwip_getsockopt+0x3c>
    return -1;
  113e0c:	e3e03000 	mvn	r3, #0
  113e10:	ea000036 	b	113ef0 <lwip_getsockopt+0x118>
  }

  if ((NULL == optval) || (NULL == optlen)) {
  113e14:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  113e18:	e3530000 	cmp	r3, #0
  113e1c:	0a000002 	beq	113e2c <lwip_getsockopt+0x54>
  113e20:	e59b3004 	ldr	r3, [fp, #4]
  113e24:	e3530000 	cmp	r3, #0
  113e28:	1a00000e 	bne	113e68 <lwip_getsockopt+0x90>
    sock_set_errno(sock, EFAULT);
  113e2c:	e3a0300e 	mov	r3, #14
  113e30:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  113e34:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113e38:	e6ef2073 	uxtb	r2, r3
  113e3c:	e51b3008 	ldr	r3, [fp, #-8]
  113e40:	e5c32010 	strb	r2, [r3, #16]
  113e44:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113e48:	e3530000 	cmp	r3, #0
  113e4c:	0a000003 	beq	113e60 <lwip_getsockopt+0x88>
  113e50:	eb0091bf 	bl	138554 <__errno_location>
  113e54:	e1a02000 	mov	r2, r0
  113e58:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113e5c:	e5823000 	str	r3, [r2]
    return -1;
  113e60:	e3e03000 	mvn	r3, #0
  113e64:	ea000021 	b	113ef0 <lwip_getsockopt+0x118>
  }

#if LWIP_TCPIP_CORE_LOCKING
  /* core-locking can just call the -impl function */
  LOCK_TCPIP_CORE();
  113e68:	e30e0d64 	movw	r0, #60772	; 0xed64
  113e6c:	e3400014 	movt	r0, #20
  113e70:	ebffd946 	bl	10a390 <sys_mutex_lock>
  err = lwip_getsockopt_impl(s, level, optname, optval, optlen);
  113e74:	e59b3004 	ldr	r3, [fp, #4]
  113e78:	e58d3000 	str	r3, [sp]
  113e7c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  113e80:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  113e84:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  113e88:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  113e8c:	eb00001a 	bl	113efc <lwip_getsockopt_impl>
  113e90:	e1a03000 	mov	r3, r0
  113e94:	e54b3009 	strb	r3, [fp, #-9]
  UNLOCK_TCPIP_CORE();
  113e98:	e30e0d64 	movw	r0, #60772	; 0xed64
  113e9c:	e3400014 	movt	r0, #20
  113ea0:	ebffd946 	bl	10a3c0 <sys_mutex_unlock>
  /* maybe lwip_getsockopt_internal has changed err */
  err = LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).err;
  LWIP_SETGETSOCKOPT_DATA_VAR_FREE(data);
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sock_set_errno(sock, err);
  113ea4:	e55b3009 	ldrb	r3, [fp, #-9]
  113ea8:	e50b3010 	str	r3, [fp, #-16]
  113eac:	e51b3010 	ldr	r3, [fp, #-16]
  113eb0:	e6ef2073 	uxtb	r2, r3
  113eb4:	e51b3008 	ldr	r3, [fp, #-8]
  113eb8:	e5c32010 	strb	r2, [r3, #16]
  113ebc:	e51b3010 	ldr	r3, [fp, #-16]
  113ec0:	e3530000 	cmp	r3, #0
  113ec4:	0a000003 	beq	113ed8 <lwip_getsockopt+0x100>
  113ec8:	eb0091a1 	bl	138554 <__errno_location>
  113ecc:	e1a02000 	mov	r2, r0
  113ed0:	e51b3010 	ldr	r3, [fp, #-16]
  113ed4:	e5823000 	str	r3, [r2]
  return err ? -1 : 0;
  113ed8:	e55b3009 	ldrb	r3, [fp, #-9]
  113edc:	e3530000 	cmp	r3, #0
  113ee0:	0a000001 	beq	113eec <lwip_getsockopt+0x114>
  113ee4:	e3e03000 	mvn	r3, #0
  113ee8:	ea000000 	b	113ef0 <lwip_getsockopt+0x118>
  113eec:	e3a03000 	mov	r3, #0
}
  113ef0:	e1a00003 	mov	r0, r3
  113ef4:	e24bd004 	sub	sp, fp, #4
  113ef8:	e8bd8800 	pop	{fp, pc}

00113efc <lwip_getsockopt_impl>:
/** lwip_getsockopt_impl: the actual implementation of getsockopt:
 * same argument as lwip_getsockopt, either called directly or through callback
 */
static u8_t
lwip_getsockopt_impl(int s, int level, int optname, void *optval, socklen_t *optlen)
{
  113efc:	e92d4800 	push	{fp, lr}
  113f00:	e28db004 	add	fp, sp, #4
  113f04:	e24dd028 	sub	sp, sp, #40	; 0x28
  113f08:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  113f0c:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  113f10:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  113f14:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  u8_t err = 0;
  113f18:	e3a03000 	mov	r3, #0
  113f1c:	e54b3005 	strb	r3, [fp, #-5]
  struct lwip_sock *sock = tryget_socket(s);
  113f20:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  113f24:	ebfff349 	bl	110c50 <tryget_socket>
  113f28:	e50b000c 	str	r0, [fp, #-12]
  if (!sock) {
  113f2c:	e51b300c 	ldr	r3, [fp, #-12]
  113f30:	e3530000 	cmp	r3, #0
  113f34:	1a000001 	bne	113f40 <lwip_getsockopt_impl+0x44>
    return EBADF;
  113f38:	e3a03009 	mov	r3, #9
  113f3c:	ea00026a 	b	1148ec <lwip_getsockopt_impl+0x9f0>
  }

  switch (level) {
  113f40:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  113f44:	e3530006 	cmp	r3, #6
  113f48:	0a0001fb 	beq	11473c <lwip_getsockopt_impl+0x840>
  113f4c:	e3530006 	cmp	r3, #6
  113f50:	ca000002 	bgt	113f60 <lwip_getsockopt_impl+0x64>
  113f54:	e3530000 	cmp	r3, #0
  113f58:	0a000155 	beq	1144b4 <lwip_getsockopt_impl+0x5b8>
  113f5c:	ea00025e 	b	1148dc <lwip_getsockopt_impl+0x9e0>
  113f60:	e35300ff 	cmp	r3, #255	; 0xff
  113f64:	0a000258 	beq	1148cc <lwip_getsockopt_impl+0x9d0>
  113f68:	e3002fff 	movw	r2, #4095	; 0xfff
  113f6c:	e1530002 	cmp	r3, r2
  113f70:	1a000259 	bne	1148dc <lwip_getsockopt_impl+0x9e0>

/* Level: SOL_SOCKET */
  case SOL_SOCKET:
    switch (optname) {
  113f74:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  113f78:	e3012002 	movw	r2, #4098	; 0x1002
  113f7c:	e1530002 	cmp	r3, r2
  113f80:	0a000114 	beq	1143d8 <lwip_getsockopt_impl+0x4dc>
  113f84:	e3012002 	movw	r2, #4098	; 0x1002
  113f88:	e1530002 	cmp	r3, r2
  113f8c:	ca00000b 	bgt	113fc0 <lwip_getsockopt_impl+0xc4>
  113f90:	e3530004 	cmp	r3, #4
  113f94:	0a000049 	beq	1140c0 <lwip_getsockopt_impl+0x1c4>
  113f98:	e3530004 	cmp	r3, #4
  113f9c:	ca000002 	bgt	113fac <lwip_getsockopt_impl+0xb0>
  113fa0:	e3530002 	cmp	r3, #2
  113fa4:	0a000019 	beq	114010 <lwip_getsockopt_impl+0x114>
  113fa8:	ea00013d 	b	1144a4 <lwip_getsockopt_impl+0x5a8>
  113fac:	e3530008 	cmp	r3, #8
  113fb0:	0a000042 	beq	1140c0 <lwip_getsockopt_impl+0x1c4>
  113fb4:	e3530020 	cmp	r3, #32
  113fb8:	0a000040 	beq	1140c0 <lwip_getsockopt_impl+0x1c4>
  113fbc:	ea000138 	b	1144a4 <lwip_getsockopt_impl+0x5a8>
  113fc0:	e3012007 	movw	r2, #4103	; 0x1007
  113fc4:	e1530002 	cmp	r3, r2
  113fc8:	0a000082 	beq	1141d8 <lwip_getsockopt_impl+0x2dc>
  113fcc:	e3012007 	movw	r2, #4103	; 0x1007
  113fd0:	e1530002 	cmp	r3, r2
  113fd4:	ca000006 	bgt	113ff4 <lwip_getsockopt_impl+0xf8>
  113fd8:	e3012005 	movw	r2, #4101	; 0x1005
  113fdc:	e1530002 	cmp	r3, r2
  113fe0:	0a0000ae 	beq	1142a0 <lwip_getsockopt_impl+0x3a4>
  113fe4:	e3012006 	movw	r2, #4102	; 0x1006
  113fe8:	e1530002 	cmp	r3, r2
  113fec:	0a0000d2 	beq	11433c <lwip_getsockopt_impl+0x440>
  113ff0:	ea00012b 	b	1144a4 <lwip_getsockopt_impl+0x5a8>
  113ff4:	e3012008 	movw	r2, #4104	; 0x1008
  113ff8:	e1530002 	cmp	r3, r2
  113ffc:	0a00004a 	beq	11412c <lwip_getsockopt_impl+0x230>
  114000:	e301200a 	movw	r2, #4106	; 0x100a
  114004:	e1530002 	cmp	r3, r2
  114008:	0a000104 	beq	114420 <lwip_getsockopt_impl+0x524>
  11400c:	ea000124 	b	1144a4 <lwip_getsockopt_impl+0x5a8>

#if LWIP_TCP
    case SO_ACCEPTCONN:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, int);
  114010:	e59b3004 	ldr	r3, [fp, #4]
  114014:	e5933000 	ldr	r3, [r3]
  114018:	e3530003 	cmp	r3, #3
  11401c:	8a000001 	bhi	114028 <lwip_getsockopt_impl+0x12c>
  114020:	e3a03016 	mov	r3, #22
  114024:	ea000230 	b	1148ec <lwip_getsockopt_impl+0x9f0>
  114028:	e51b300c 	ldr	r3, [fp, #-12]
  11402c:	e5933000 	ldr	r3, [r3]
  114030:	e3530000 	cmp	r3, #0
  114034:	0a000004 	beq	11404c <lwip_getsockopt_impl+0x150>
  114038:	e51b300c 	ldr	r3, [fp, #-12]
  11403c:	e5933000 	ldr	r3, [r3]
  114040:	e5933008 	ldr	r3, [r3, #8]
  114044:	e3530000 	cmp	r3, #0
  114048:	1a000001 	bne	114054 <lwip_getsockopt_impl+0x158>
  11404c:	e3a03016 	mov	r3, #22
  114050:	ea000225 	b	1148ec <lwip_getsockopt_impl+0x9f0>
      if (NETCONNTYPE_GROUP(sock->conn->type) != NETCONN_TCP) {
  114054:	e51b300c 	ldr	r3, [fp, #-12]
  114058:	e5933000 	ldr	r3, [r3]
  11405c:	e5933000 	ldr	r3, [r3]
  114060:	e20330f0 	and	r3, r3, #240	; 0xf0
  114064:	e3530010 	cmp	r3, #16
  114068:	0a000001 	beq	114074 <lwip_getsockopt_impl+0x178>
        return ENOPROTOOPT;
  11406c:	e3a0305c 	mov	r3, #92	; 0x5c
  114070:	ea00021d 	b	1148ec <lwip_getsockopt_impl+0x9f0>
      }
      if ((sock->conn->pcb.tcp != NULL) && (sock->conn->pcb.tcp->state == LISTEN)) {
  114074:	e51b300c 	ldr	r3, [fp, #-12]
  114078:	e5933000 	ldr	r3, [r3]
  11407c:	e5933008 	ldr	r3, [r3, #8]
  114080:	e3530000 	cmp	r3, #0
  114084:	0a000009 	beq	1140b0 <lwip_getsockopt_impl+0x1b4>
  114088:	e51b300c 	ldr	r3, [fp, #-12]
  11408c:	e5933000 	ldr	r3, [r3]
  114090:	e5933008 	ldr	r3, [r3, #8]
  114094:	e5933014 	ldr	r3, [r3, #20]
  114098:	e3530001 	cmp	r3, #1
  11409c:	1a000003 	bne	1140b0 <lwip_getsockopt_impl+0x1b4>
        *(int*)optval = 1;
  1140a0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1140a4:	e3a02001 	mov	r2, #1
  1140a8:	e5832000 	str	r2, [r3]
      } else {
        *(int*)optval = 0;
      }
      break;
  1140ac:	ea0000ff 	b	1144b0 <lwip_getsockopt_impl+0x5b4>
        *(int*)optval = 0;
  1140b0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1140b4:	e3a02000 	mov	r2, #0
  1140b8:	e5832000 	str	r2, [r3]
      break;
  1140bc:	ea0000fb 	b	1144b0 <lwip_getsockopt_impl+0x5b4>
    case SO_BROADCAST:
    case SO_KEEPALIVE:
#if SO_REUSE
    case SO_REUSEADDR:
#endif /* SO_REUSE */
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, int);
  1140c0:	e59b3004 	ldr	r3, [fp, #4]
  1140c4:	e5933000 	ldr	r3, [r3]
  1140c8:	e3530003 	cmp	r3, #3
  1140cc:	8a000001 	bhi	1140d8 <lwip_getsockopt_impl+0x1dc>
  1140d0:	e3a03016 	mov	r3, #22
  1140d4:	ea000204 	b	1148ec <lwip_getsockopt_impl+0x9f0>
  1140d8:	e51b300c 	ldr	r3, [fp, #-12]
  1140dc:	e5933000 	ldr	r3, [r3]
  1140e0:	e3530000 	cmp	r3, #0
  1140e4:	0a000004 	beq	1140fc <lwip_getsockopt_impl+0x200>
  1140e8:	e51b300c 	ldr	r3, [fp, #-12]
  1140ec:	e5933000 	ldr	r3, [r3]
  1140f0:	e5933008 	ldr	r3, [r3, #8]
  1140f4:	e3530000 	cmp	r3, #0
  1140f8:	1a000001 	bne	114104 <lwip_getsockopt_impl+0x208>
  1140fc:	e3a03016 	mov	r3, #22
  114100:	ea0001f9 	b	1148ec <lwip_getsockopt_impl+0x9f0>
      *(int*)optval = ip_get_option(sock->conn->pcb.ip, optname);
  114104:	e51b300c 	ldr	r3, [fp, #-12]
  114108:	e5933000 	ldr	r3, [r3]
  11410c:	e5933008 	ldr	r3, [r3, #8]
  114110:	e5d33008 	ldrb	r3, [r3, #8]
  114114:	e1a02003 	mov	r2, r3
  114118:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11411c:	e0022003 	and	r2, r2, r3
  114120:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114124:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, SOL_SOCKET, optname=0x%x, ..) = %s\n",
                                  s, optname, (*(int*)optval?"on":"off")));
      break;
  114128:	ea0000e0 	b	1144b0 <lwip_getsockopt_impl+0x5b4>

    case SO_TYPE:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, *optlen, int);
  11412c:	e59b3004 	ldr	r3, [fp, #4]
  114130:	e5933000 	ldr	r3, [r3]
  114134:	e3530003 	cmp	r3, #3
  114138:	8a000001 	bhi	114144 <lwip_getsockopt_impl+0x248>
  11413c:	e3a03016 	mov	r3, #22
  114140:	ea0001e9 	b	1148ec <lwip_getsockopt_impl+0x9f0>
  114144:	e51b300c 	ldr	r3, [fp, #-12]
  114148:	e5933000 	ldr	r3, [r3]
  11414c:	e3530000 	cmp	r3, #0
  114150:	1a000001 	bne	11415c <lwip_getsockopt_impl+0x260>
  114154:	e3a03016 	mov	r3, #22
  114158:	ea0001e3 	b	1148ec <lwip_getsockopt_impl+0x9f0>
      switch (NETCONNTYPE_GROUP(netconn_type(sock->conn))) {
  11415c:	e51b300c 	ldr	r3, [fp, #-12]
  114160:	e5933000 	ldr	r3, [r3]
  114164:	e5933000 	ldr	r3, [r3]
  114168:	e20330f0 	and	r3, r3, #240	; 0xf0
  11416c:	e3530020 	cmp	r3, #32
  114170:	0a00000c 	beq	1141a8 <lwip_getsockopt_impl+0x2ac>
  114174:	e3530040 	cmp	r3, #64	; 0x40
  114178:	0a000002 	beq	114188 <lwip_getsockopt_impl+0x28c>
  11417c:	e3530010 	cmp	r3, #16
  114180:	0a000004 	beq	114198 <lwip_getsockopt_impl+0x29c>
  114184:	ea00000b 	b	1141b8 <lwip_getsockopt_impl+0x2bc>
      case NETCONN_RAW:
        *(int*)optval = SOCK_RAW;
  114188:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11418c:	e3a02003 	mov	r2, #3
  114190:	e5832000 	str	r2, [r3]
        break;
  114194:	ea00000e 	b	1141d4 <lwip_getsockopt_impl+0x2d8>
      case NETCONN_TCP:
        *(int*)optval = SOCK_STREAM;
  114198:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11419c:	e3a02001 	mov	r2, #1
  1141a0:	e5832000 	str	r2, [r3]
        break;
  1141a4:	ea00000a 	b	1141d4 <lwip_getsockopt_impl+0x2d8>
      case NETCONN_UDP:
        *(int*)optval = SOCK_DGRAM;
  1141a8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1141ac:	e3a02002 	mov	r2, #2
  1141b0:	e5832000 	str	r2, [r3]
        break;
  1141b4:	ea000006 	b	1141d4 <lwip_getsockopt_impl+0x2d8>
      default: /* unrecognized socket type */
        *(int*)optval = netconn_type(sock->conn);
  1141b8:	e51b300c 	ldr	r3, [fp, #-12]
  1141bc:	e5933000 	ldr	r3, [r3]
  1141c0:	e5933000 	ldr	r3, [r3]
  1141c4:	e1a02003 	mov	r2, r3
  1141c8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1141cc:	e5832000 	str	r2, [r3]
                    ("lwip_getsockopt(%d, SOL_SOCKET, SO_TYPE): unrecognized socket type %d\n",
                    s, *(int *)optval));
      }  /* switch (netconn_type(sock->conn)) */
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, SOL_SOCKET, SO_TYPE) = %d\n",
                  s, *(int *)optval));
      break;
  1141d0:	ea0000b6 	b	1144b0 <lwip_getsockopt_impl+0x5b4>
  1141d4:	ea0000b5 	b	1144b0 <lwip_getsockopt_impl+0x5b4>

    case SO_ERROR:
      LWIP_SOCKOPT_CHECK_OPTLEN(*optlen, int);
  1141d8:	e59b3004 	ldr	r3, [fp, #4]
  1141dc:	e5933000 	ldr	r3, [r3]
  1141e0:	e3530003 	cmp	r3, #3
  1141e4:	8a000001 	bhi	1141f0 <lwip_getsockopt_impl+0x2f4>
  1141e8:	e3a03016 	mov	r3, #22
  1141ec:	ea0001be 	b	1148ec <lwip_getsockopt_impl+0x9f0>
      /* only overwrite ERR_OK or temporary errors */
      if (((sock->err == 0) || (sock->err == EINPROGRESS)) && (sock->conn != NULL)) {
  1141f0:	e51b300c 	ldr	r3, [fp, #-12]
  1141f4:	e5d33010 	ldrb	r3, [r3, #16]
  1141f8:	e3530000 	cmp	r3, #0
  1141fc:	0a000003 	beq	114210 <lwip_getsockopt_impl+0x314>
  114200:	e51b300c 	ldr	r3, [fp, #-12]
  114204:	e5d33010 	ldrb	r3, [r3, #16]
  114208:	e3530073 	cmp	r3, #115	; 0x73
  11420c:	1a000014 	bne	114264 <lwip_getsockopt_impl+0x368>
  114210:	e51b300c 	ldr	r3, [fp, #-12]
  114214:	e5933000 	ldr	r3, [r3]
  114218:	e3530000 	cmp	r3, #0
  11421c:	0a000010 	beq	114264 <lwip_getsockopt_impl+0x368>
        sock_set_errno(sock, err_to_errno(sock->conn->last_err));
  114220:	e51b300c 	ldr	r3, [fp, #-12]
  114224:	e5933000 	ldr	r3, [r3]
  114228:	e1d330dc 	ldrsb	r3, [r3, #12]
  11422c:	e1a00003 	mov	r0, r3
  114230:	ebffee39 	bl	10fb1c <err_to_errno>
  114234:	e50b0010 	str	r0, [fp, #-16]
  114238:	e51b3010 	ldr	r3, [fp, #-16]
  11423c:	e6ef2073 	uxtb	r2, r3
  114240:	e51b300c 	ldr	r3, [fp, #-12]
  114244:	e5c32010 	strb	r2, [r3, #16]
  114248:	e51b3010 	ldr	r3, [fp, #-16]
  11424c:	e3530000 	cmp	r3, #0
  114250:	0a000003 	beq	114264 <lwip_getsockopt_impl+0x368>
  114254:	eb0090be 	bl	138554 <__errno_location>
  114258:	e1a02000 	mov	r2, r0
  11425c:	e51b3010 	ldr	r3, [fp, #-16]
  114260:	e5823000 	str	r3, [r2]
      }
      *(int *)optval = (sock->err == 0xFF ? (int)-1 : (int)sock->err);
  114264:	e51b300c 	ldr	r3, [fp, #-12]
  114268:	e5d33010 	ldrb	r3, [r3, #16]
  11426c:	e35300ff 	cmp	r3, #255	; 0xff
  114270:	0a000003 	beq	114284 <lwip_getsockopt_impl+0x388>
  114274:	e51b300c 	ldr	r3, [fp, #-12]
  114278:	e5d33010 	ldrb	r3, [r3, #16]
  11427c:	e1a02003 	mov	r2, r3
  114280:	ea000000 	b	114288 <lwip_getsockopt_impl+0x38c>
  114284:	e3e02000 	mvn	r2, #0
  114288:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11428c:	e5832000 	str	r2, [r3]
      sock->err = 0;
  114290:	e51b300c 	ldr	r3, [fp, #-12]
  114294:	e3a02000 	mov	r2, #0
  114298:	e5c32010 	strb	r2, [r3, #16]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, SOL_SOCKET, SO_ERROR) = %d\n",
                  s, *(int *)optval));
      break;
  11429c:	ea000083 	b	1144b0 <lwip_getsockopt_impl+0x5b4>

#if LWIP_SO_SNDTIMEO
    case SO_SNDTIMEO:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, *optlen, LWIP_SO_SNDRCVTIMEO_OPTTYPE);
  1142a0:	e59b3004 	ldr	r3, [fp, #4]
  1142a4:	e5933000 	ldr	r3, [r3]
  1142a8:	e353000f 	cmp	r3, #15
  1142ac:	8a000001 	bhi	1142b8 <lwip_getsockopt_impl+0x3bc>
  1142b0:	e3a03016 	mov	r3, #22
  1142b4:	ea00018c 	b	1148ec <lwip_getsockopt_impl+0x9f0>
  1142b8:	e51b300c 	ldr	r3, [fp, #-12]
  1142bc:	e5933000 	ldr	r3, [r3]
  1142c0:	e3530000 	cmp	r3, #0
  1142c4:	1a000001 	bne	1142d0 <lwip_getsockopt_impl+0x3d4>
  1142c8:	e3a03016 	mov	r3, #22
  1142cc:	ea000186 	b	1148ec <lwip_getsockopt_impl+0x9f0>
      LWIP_SO_SNDRCVTIMEO_SET(optval, netconn_get_sendtimeout(sock->conn));
  1142d0:	e51b300c 	ldr	r3, [fp, #-12]
  1142d4:	e5933000 	ldr	r3, [r3]
  1142d8:	e5933020 	ldr	r3, [r3, #32]
  1142dc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  1142e0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1142e4:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  1142e8:	e3413062 	movt	r3, #4194	; 0x1062
  1142ec:	e0832392 	umull	r2, r3, r2, r3
  1142f0:	e1a03323 	lsr	r3, r3, #6
  1142f4:	e1a02003 	mov	r2, r3
  1142f8:	e3a03000 	mov	r3, #0
  1142fc:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  114300:	e1c120f0 	strd	r2, [r1]
  114304:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  114308:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  11430c:	e3413062 	movt	r3, #4194	; 0x1062
  114310:	e0832391 	umull	r2, r3, r1, r3
  114314:	e1a03323 	lsr	r3, r3, #6
  114318:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  11431c:	e0030392 	mul	r3, r2, r3
  114320:	e0413003 	sub	r3, r1, r3
  114324:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  114328:	e0030392 	mul	r3, r2, r3
  11432c:	e1a02003 	mov	r2, r3
  114330:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114334:	e5832008 	str	r2, [r3, #8]
      break;
  114338:	ea00005c 	b	1144b0 <lwip_getsockopt_impl+0x5b4>
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
    case SO_RCVTIMEO:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, *optlen, LWIP_SO_SNDRCVTIMEO_OPTTYPE);
  11433c:	e59b3004 	ldr	r3, [fp, #4]
  114340:	e5933000 	ldr	r3, [r3]
  114344:	e353000f 	cmp	r3, #15
  114348:	8a000001 	bhi	114354 <lwip_getsockopt_impl+0x458>
  11434c:	e3a03016 	mov	r3, #22
  114350:	ea000165 	b	1148ec <lwip_getsockopt_impl+0x9f0>
  114354:	e51b300c 	ldr	r3, [fp, #-12]
  114358:	e5933000 	ldr	r3, [r3]
  11435c:	e3530000 	cmp	r3, #0
  114360:	1a000001 	bne	11436c <lwip_getsockopt_impl+0x470>
  114364:	e3a03016 	mov	r3, #22
  114368:	ea00015f 	b	1148ec <lwip_getsockopt_impl+0x9f0>
      LWIP_SO_SNDRCVTIMEO_SET(optval, netconn_get_recvtimeout(sock->conn));
  11436c:	e51b300c 	ldr	r3, [fp, #-12]
  114370:	e5933000 	ldr	r3, [r3]
  114374:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  114378:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  11437c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  114380:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  114384:	e3413062 	movt	r3, #4194	; 0x1062
  114388:	e0832392 	umull	r2, r3, r2, r3
  11438c:	e1a03323 	lsr	r3, r3, #6
  114390:	e1a02003 	mov	r2, r3
  114394:	e3a03000 	mov	r3, #0
  114398:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  11439c:	e1c120f0 	strd	r2, [r1]
  1143a0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1143a4:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  1143a8:	e3413062 	movt	r3, #4194	; 0x1062
  1143ac:	e0832391 	umull	r2, r3, r1, r3
  1143b0:	e1a03323 	lsr	r3, r3, #6
  1143b4:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  1143b8:	e0030392 	mul	r3, r2, r3
  1143bc:	e0413003 	sub	r3, r1, r3
  1143c0:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  1143c4:	e0030392 	mul	r3, r2, r3
  1143c8:	e1a02003 	mov	r2, r3
  1143cc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1143d0:	e5832008 	str	r2, [r3, #8]
      break;
  1143d4:	ea000035 	b	1144b0 <lwip_getsockopt_impl+0x5b4>
#endif /* LWIP_SO_RCVTIMEO */
#if LWIP_SO_RCVBUF
    case SO_RCVBUF:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, *optlen, int);
  1143d8:	e59b3004 	ldr	r3, [fp, #4]
  1143dc:	e5933000 	ldr	r3, [r3]
  1143e0:	e3530003 	cmp	r3, #3
  1143e4:	8a000001 	bhi	1143f0 <lwip_getsockopt_impl+0x4f4>
  1143e8:	e3a03016 	mov	r3, #22
  1143ec:	ea00013e 	b	1148ec <lwip_getsockopt_impl+0x9f0>
  1143f0:	e51b300c 	ldr	r3, [fp, #-12]
  1143f4:	e5933000 	ldr	r3, [r3]
  1143f8:	e3530000 	cmp	r3, #0
  1143fc:	1a000001 	bne	114408 <lwip_getsockopt_impl+0x50c>
  114400:	e3a03016 	mov	r3, #22
  114404:	ea000138 	b	1148ec <lwip_getsockopt_impl+0x9f0>
      *(int *)optval = netconn_get_recvbufsize(sock->conn);
  114408:	e51b300c 	ldr	r3, [fp, #-12]
  11440c:	e5933000 	ldr	r3, [r3]
  114410:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  114414:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114418:	e5832000 	str	r2, [r3]
      break;
  11441c:	ea000023 	b	1144b0 <lwip_getsockopt_impl+0x5b4>
      }
      break;
#endif /* LWIP_SO_LINGER */
#if LWIP_UDP
    case SO_NO_CHECK:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, *optlen, int, NETCONN_UDP);
  114420:	e59b3004 	ldr	r3, [fp, #4]
  114424:	e5933000 	ldr	r3, [r3]
  114428:	e3530003 	cmp	r3, #3
  11442c:	8a000001 	bhi	114438 <lwip_getsockopt_impl+0x53c>
  114430:	e3a03016 	mov	r3, #22
  114434:	ea00012c 	b	1148ec <lwip_getsockopt_impl+0x9f0>
  114438:	e51b300c 	ldr	r3, [fp, #-12]
  11443c:	e5933000 	ldr	r3, [r3]
  114440:	e3530000 	cmp	r3, #0
  114444:	0a000004 	beq	11445c <lwip_getsockopt_impl+0x560>
  114448:	e51b300c 	ldr	r3, [fp, #-12]
  11444c:	e5933000 	ldr	r3, [r3]
  114450:	e5933008 	ldr	r3, [r3, #8]
  114454:	e3530000 	cmp	r3, #0
  114458:	1a000001 	bne	114464 <lwip_getsockopt_impl+0x568>
  11445c:	e3a03016 	mov	r3, #22
  114460:	ea000121 	b	1148ec <lwip_getsockopt_impl+0x9f0>
  114464:	e51b300c 	ldr	r3, [fp, #-12]
  114468:	e5933000 	ldr	r3, [r3]
  11446c:	e5933000 	ldr	r3, [r3]
  114470:	e20330f0 	and	r3, r3, #240	; 0xf0
  114474:	e3530020 	cmp	r3, #32
  114478:	0a000001 	beq	114484 <lwip_getsockopt_impl+0x588>
  11447c:	e3a0305c 	mov	r3, #92	; 0x5c
  114480:	ea000119 	b	1148ec <lwip_getsockopt_impl+0x9f0>
      if ((udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_UDPLITE) != 0) {
        /* this flag is only available for UDP, not for UDP lite */
        return EAFNOSUPPORT;
      }
#endif /* LWIP_UDPLITE */
      *(int*)optval = (udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_NOCHKSUM) ? 1 : 0;
  114484:	e51b300c 	ldr	r3, [fp, #-12]
  114488:	e5933000 	ldr	r3, [r3]
  11448c:	e5933008 	ldr	r3, [r3, #8]
  114490:	e5d33010 	ldrb	r3, [r3, #16]
  114494:	e2032001 	and	r2, r3, #1
  114498:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11449c:	e5832000 	str	r2, [r3]
      break;
  1144a0:	ea000002 	b	1144b0 <lwip_getsockopt_impl+0x5b4>
#endif /* LWIP_UDP*/
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, SOL_SOCKET, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
  1144a4:	e3a0305c 	mov	r3, #92	; 0x5c
  1144a8:	e54b3005 	strb	r3, [fp, #-5]
      break;
  1144ac:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  1144b0:	ea00010c 	b	1148e8 <lwip_getsockopt_impl+0x9ec>

/* Level: IPPROTO_IP */
  case IPPROTO_IP:
    switch (optname) {
  1144b4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1144b8:	e2433001 	sub	r3, r3, #1
  1144bc:	e3530006 	cmp	r3, #6
  1144c0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  1144c4:	ea000098 	b	11472c <lwip_getsockopt_impl+0x830>
  1144c8:	00114548 	.word	0x00114548
  1144cc:	001144e4 	.word	0x001144e4
  1144d0:	0011472c 	.word	0x0011472c
  1144d4:	0011472c 	.word	0x0011472c
  1144d8:	001145ac 	.word	0x001145ac
  1144dc:	0011462c 	.word	0x0011462c
  1144e0:	001146ac 	.word	0x001146ac
    case IP_TTL:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, int);
  1144e4:	e59b3004 	ldr	r3, [fp, #4]
  1144e8:	e5933000 	ldr	r3, [r3]
  1144ec:	e3530003 	cmp	r3, #3
  1144f0:	8a000001 	bhi	1144fc <lwip_getsockopt_impl+0x600>
  1144f4:	e3a03016 	mov	r3, #22
  1144f8:	ea0000fb 	b	1148ec <lwip_getsockopt_impl+0x9f0>
  1144fc:	e51b300c 	ldr	r3, [fp, #-12]
  114500:	e5933000 	ldr	r3, [r3]
  114504:	e3530000 	cmp	r3, #0
  114508:	0a000004 	beq	114520 <lwip_getsockopt_impl+0x624>
  11450c:	e51b300c 	ldr	r3, [fp, #-12]
  114510:	e5933000 	ldr	r3, [r3]
  114514:	e5933008 	ldr	r3, [r3, #8]
  114518:	e3530000 	cmp	r3, #0
  11451c:	1a000001 	bne	114528 <lwip_getsockopt_impl+0x62c>
  114520:	e3a03016 	mov	r3, #22
  114524:	ea0000f0 	b	1148ec <lwip_getsockopt_impl+0x9f0>
      *(int*)optval = sock->conn->pcb.ip->ttl;
  114528:	e51b300c 	ldr	r3, [fp, #-12]
  11452c:	e5933000 	ldr	r3, [r3]
  114530:	e5933008 	ldr	r3, [r3, #8]
  114534:	e5d3300a 	ldrb	r3, [r3, #10]
  114538:	e1a02003 	mov	r2, r3
  11453c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114540:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, IP_TTL) = %d\n",
                  s, *(int *)optval));
      break;
  114544:	ea00007b 	b	114738 <lwip_getsockopt_impl+0x83c>
    case IP_TOS:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, int);
  114548:	e59b3004 	ldr	r3, [fp, #4]
  11454c:	e5933000 	ldr	r3, [r3]
  114550:	e3530003 	cmp	r3, #3
  114554:	8a000001 	bhi	114560 <lwip_getsockopt_impl+0x664>
  114558:	e3a03016 	mov	r3, #22
  11455c:	ea0000e2 	b	1148ec <lwip_getsockopt_impl+0x9f0>
  114560:	e51b300c 	ldr	r3, [fp, #-12]
  114564:	e5933000 	ldr	r3, [r3]
  114568:	e3530000 	cmp	r3, #0
  11456c:	0a000004 	beq	114584 <lwip_getsockopt_impl+0x688>
  114570:	e51b300c 	ldr	r3, [fp, #-12]
  114574:	e5933000 	ldr	r3, [r3]
  114578:	e5933008 	ldr	r3, [r3, #8]
  11457c:	e3530000 	cmp	r3, #0
  114580:	1a000001 	bne	11458c <lwip_getsockopt_impl+0x690>
  114584:	e3a03016 	mov	r3, #22
  114588:	ea0000d7 	b	1148ec <lwip_getsockopt_impl+0x9f0>
      *(int*)optval = sock->conn->pcb.ip->tos;
  11458c:	e51b300c 	ldr	r3, [fp, #-12]
  114590:	e5933000 	ldr	r3, [r3]
  114594:	e5933008 	ldr	r3, [r3, #8]
  114598:	e5d33009 	ldrb	r3, [r3, #9]
  11459c:	e1a02003 	mov	r2, r3
  1145a0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1145a4:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, IP_TOS) = %d\n",
                  s, *(int *)optval));
      break;
  1145a8:	ea000062 	b	114738 <lwip_getsockopt_impl+0x83c>
#if LWIP_MULTICAST_TX_OPTIONS
    case IP_MULTICAST_TTL:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, u8_t);
  1145ac:	e59b3004 	ldr	r3, [fp, #4]
  1145b0:	e5933000 	ldr	r3, [r3]
  1145b4:	e3530000 	cmp	r3, #0
  1145b8:	1a000001 	bne	1145c4 <lwip_getsockopt_impl+0x6c8>
  1145bc:	e3a03016 	mov	r3, #22
  1145c0:	ea0000c9 	b	1148ec <lwip_getsockopt_impl+0x9f0>
  1145c4:	e51b300c 	ldr	r3, [fp, #-12]
  1145c8:	e5933000 	ldr	r3, [r3]
  1145cc:	e3530000 	cmp	r3, #0
  1145d0:	0a000004 	beq	1145e8 <lwip_getsockopt_impl+0x6ec>
  1145d4:	e51b300c 	ldr	r3, [fp, #-12]
  1145d8:	e5933000 	ldr	r3, [r3]
  1145dc:	e5933008 	ldr	r3, [r3, #8]
  1145e0:	e3530000 	cmp	r3, #0
  1145e4:	1a000001 	bne	1145f0 <lwip_getsockopt_impl+0x6f4>
  1145e8:	e3a03016 	mov	r3, #22
  1145ec:	ea0000be 	b	1148ec <lwip_getsockopt_impl+0x9f0>
      if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_UDP) {
  1145f0:	e51b300c 	ldr	r3, [fp, #-12]
  1145f4:	e5933000 	ldr	r3, [r3]
  1145f8:	e5933000 	ldr	r3, [r3]
  1145fc:	e20330f0 	and	r3, r3, #240	; 0xf0
  114600:	e3530020 	cmp	r3, #32
  114604:	0a000001 	beq	114610 <lwip_getsockopt_impl+0x714>
        return ENOPROTOOPT;
  114608:	e3a0305c 	mov	r3, #92	; 0x5c
  11460c:	ea0000b6 	b	1148ec <lwip_getsockopt_impl+0x9f0>
      }
      *(u8_t*)optval = udp_get_multicast_ttl(sock->conn->pcb.udp);
  114610:	e51b300c 	ldr	r3, [fp, #-12]
  114614:	e5933000 	ldr	r3, [r3]
  114618:	e5933008 	ldr	r3, [r3, #8]
  11461c:	e5d3201c 	ldrb	r2, [r3, #28]
  114620:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114624:	e5c32000 	strb	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, IP_MULTICAST_TTL) = %d\n",
                  s, *(int *)optval));
      break;
  114628:	ea000042 	b	114738 <lwip_getsockopt_impl+0x83c>
    case IP_MULTICAST_IF:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, struct in_addr);
  11462c:	e59b3004 	ldr	r3, [fp, #4]
  114630:	e5933000 	ldr	r3, [r3]
  114634:	e3530003 	cmp	r3, #3
  114638:	8a000001 	bhi	114644 <lwip_getsockopt_impl+0x748>
  11463c:	e3a03016 	mov	r3, #22
  114640:	ea0000a9 	b	1148ec <lwip_getsockopt_impl+0x9f0>
  114644:	e51b300c 	ldr	r3, [fp, #-12]
  114648:	e5933000 	ldr	r3, [r3]
  11464c:	e3530000 	cmp	r3, #0
  114650:	0a000004 	beq	114668 <lwip_getsockopt_impl+0x76c>
  114654:	e51b300c 	ldr	r3, [fp, #-12]
  114658:	e5933000 	ldr	r3, [r3]
  11465c:	e5933008 	ldr	r3, [r3, #8]
  114660:	e3530000 	cmp	r3, #0
  114664:	1a000001 	bne	114670 <lwip_getsockopt_impl+0x774>
  114668:	e3a03016 	mov	r3, #22
  11466c:	ea00009e 	b	1148ec <lwip_getsockopt_impl+0x9f0>
      if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_UDP) {
  114670:	e51b300c 	ldr	r3, [fp, #-12]
  114674:	e5933000 	ldr	r3, [r3]
  114678:	e5933000 	ldr	r3, [r3]
  11467c:	e20330f0 	and	r3, r3, #240	; 0xf0
  114680:	e3530020 	cmp	r3, #32
  114684:	0a000001 	beq	114690 <lwip_getsockopt_impl+0x794>
        return ENOPROTOOPT;
  114688:	e3a0305c 	mov	r3, #92	; 0x5c
  11468c:	ea000096 	b	1148ec <lwip_getsockopt_impl+0x9f0>
      }
      inet_addr_from_ip4addr((struct in_addr*)optval, udp_get_multicast_netif_addr(sock->conn->pcb.udp));
  114690:	e51b300c 	ldr	r3, [fp, #-12]
  114694:	e5933000 	ldr	r3, [r3]
  114698:	e5933008 	ldr	r3, [r3, #8]
  11469c:	e5932018 	ldr	r2, [r3, #24]
  1146a0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1146a4:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, IP_MULTICAST_IF) = 0x%"X32_F"\n",
                  s, *(u32_t *)optval));
      break;
  1146a8:	ea000022 	b	114738 <lwip_getsockopt_impl+0x83c>
    case IP_MULTICAST_LOOP:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, u8_t);
  1146ac:	e59b3004 	ldr	r3, [fp, #4]
  1146b0:	e5933000 	ldr	r3, [r3]
  1146b4:	e3530000 	cmp	r3, #0
  1146b8:	1a000001 	bne	1146c4 <lwip_getsockopt_impl+0x7c8>
  1146bc:	e3a03016 	mov	r3, #22
  1146c0:	ea000089 	b	1148ec <lwip_getsockopt_impl+0x9f0>
  1146c4:	e51b300c 	ldr	r3, [fp, #-12]
  1146c8:	e5933000 	ldr	r3, [r3]
  1146cc:	e3530000 	cmp	r3, #0
  1146d0:	0a000004 	beq	1146e8 <lwip_getsockopt_impl+0x7ec>
  1146d4:	e51b300c 	ldr	r3, [fp, #-12]
  1146d8:	e5933000 	ldr	r3, [r3]
  1146dc:	e5933008 	ldr	r3, [r3, #8]
  1146e0:	e3530000 	cmp	r3, #0
  1146e4:	1a000001 	bne	1146f0 <lwip_getsockopt_impl+0x7f4>
  1146e8:	e3a03016 	mov	r3, #22
  1146ec:	ea00007e 	b	1148ec <lwip_getsockopt_impl+0x9f0>
      if ((sock->conn->pcb.udp->flags & UDP_FLAGS_MULTICAST_LOOP) != 0) {
  1146f0:	e51b300c 	ldr	r3, [fp, #-12]
  1146f4:	e5933000 	ldr	r3, [r3]
  1146f8:	e5933008 	ldr	r3, [r3, #8]
  1146fc:	e5d33010 	ldrb	r3, [r3, #16]
  114700:	e2033008 	and	r3, r3, #8
  114704:	e3530000 	cmp	r3, #0
  114708:	0a000003 	beq	11471c <lwip_getsockopt_impl+0x820>
        *(u8_t*)optval = 1;
  11470c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114710:	e3a02001 	mov	r2, #1
  114714:	e5c32000 	strb	r2, [r3]
      } else {
        *(u8_t*)optval = 0;
      }
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, IP_MULTICAST_LOOP) = %d\n",
                  s, *(int *)optval));
      break;
  114718:	ea000006 	b	114738 <lwip_getsockopt_impl+0x83c>
        *(u8_t*)optval = 0;
  11471c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114720:	e3a02000 	mov	r2, #0
  114724:	e5c32000 	strb	r2, [r3]
      break;
  114728:	ea000002 	b	114738 <lwip_getsockopt_impl+0x83c>
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
  11472c:	e3a0305c 	mov	r3, #92	; 0x5c
  114730:	e54b3005 	strb	r3, [fp, #-5]
      break;
  114734:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  114738:	ea00006a 	b	1148e8 <lwip_getsockopt_impl+0x9ec>

#if LWIP_TCP
/* Level: IPPROTO_TCP */
  case IPPROTO_TCP:
    /* Special case: all IPPROTO_TCP option take an int */
    LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, *optlen, int, NETCONN_TCP);
  11473c:	e59b3004 	ldr	r3, [fp, #4]
  114740:	e5933000 	ldr	r3, [r3]
  114744:	e3530003 	cmp	r3, #3
  114748:	8a000001 	bhi	114754 <lwip_getsockopt_impl+0x858>
  11474c:	e3a03016 	mov	r3, #22
  114750:	ea000065 	b	1148ec <lwip_getsockopt_impl+0x9f0>
  114754:	e51b300c 	ldr	r3, [fp, #-12]
  114758:	e5933000 	ldr	r3, [r3]
  11475c:	e3530000 	cmp	r3, #0
  114760:	0a000004 	beq	114778 <lwip_getsockopt_impl+0x87c>
  114764:	e51b300c 	ldr	r3, [fp, #-12]
  114768:	e5933000 	ldr	r3, [r3]
  11476c:	e5933008 	ldr	r3, [r3, #8]
  114770:	e3530000 	cmp	r3, #0
  114774:	1a000001 	bne	114780 <lwip_getsockopt_impl+0x884>
  114778:	e3a03016 	mov	r3, #22
  11477c:	ea00005a 	b	1148ec <lwip_getsockopt_impl+0x9f0>
  114780:	e51b300c 	ldr	r3, [fp, #-12]
  114784:	e5933000 	ldr	r3, [r3]
  114788:	e5933000 	ldr	r3, [r3]
  11478c:	e20330f0 	and	r3, r3, #240	; 0xf0
  114790:	e3530010 	cmp	r3, #16
  114794:	0a000001 	beq	1147a0 <lwip_getsockopt_impl+0x8a4>
  114798:	e3a0305c 	mov	r3, #92	; 0x5c
  11479c:	ea000052 	b	1148ec <lwip_getsockopt_impl+0x9f0>
    if (sock->conn->pcb.tcp->state == LISTEN) {
  1147a0:	e51b300c 	ldr	r3, [fp, #-12]
  1147a4:	e5933000 	ldr	r3, [r3]
  1147a8:	e5933008 	ldr	r3, [r3, #8]
  1147ac:	e5933014 	ldr	r3, [r3, #20]
  1147b0:	e3530001 	cmp	r3, #1
  1147b4:	1a000001 	bne	1147c0 <lwip_getsockopt_impl+0x8c4>
      return EINVAL;
  1147b8:	e3a03016 	mov	r3, #22
  1147bc:	ea00004a 	b	1148ec <lwip_getsockopt_impl+0x9f0>
    }
    switch (optname) {
  1147c0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1147c4:	e2433001 	sub	r3, r3, #1
  1147c8:	e3530004 	cmp	r3, #4
  1147cc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  1147d0:	ea000039 	b	1148bc <lwip_getsockopt_impl+0x9c0>
  1147d4:	001147e8 	.word	0x001147e8
  1147d8:	0011481c 	.word	0x0011481c
  1147dc:	0011483c 	.word	0x0011483c
  1147e0:	0011486c 	.word	0x0011486c
  1147e4:	0011489c 	.word	0x0011489c
    case TCP_NODELAY:
      *(int*)optval = tcp_nagle_disabled(sock->conn->pcb.tcp);
  1147e8:	e51b300c 	ldr	r3, [fp, #-12]
  1147ec:	e5933000 	ldr	r3, [r3]
  1147f0:	e5933008 	ldr	r3, [r3, #8]
  1147f4:	e5d3301e 	ldrb	r3, [r3, #30]
  1147f8:	e2033040 	and	r3, r3, #64	; 0x40
  1147fc:	e3530000 	cmp	r3, #0
  114800:	13a03001 	movne	r3, #1
  114804:	03a03000 	moveq	r3, #0
  114808:	e6ef3073 	uxtb	r3, r3
  11480c:	e1a02003 	mov	r2, r3
  114810:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114814:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, TCP_NODELAY) = %s\n",
                  s, (*(int*)optval)?"on":"off") );
      break;
  114818:	ea00002a 	b	1148c8 <lwip_getsockopt_impl+0x9cc>
    case TCP_KEEPALIVE:
      *(int*)optval = (int)sock->conn->pcb.tcp->keep_idle;
  11481c:	e51b300c 	ldr	r3, [fp, #-12]
  114820:	e5933000 	ldr	r3, [r3]
  114824:	e5933008 	ldr	r3, [r3, #8]
  114828:	e5933094 	ldr	r3, [r3, #148]	; 0x94
  11482c:	e1a02003 	mov	r2, r3
  114830:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114834:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, TCP_KEEPALIVE) = %d\n",
                  s, *(int *)optval));
      break;
  114838:	ea000022 	b	1148c8 <lwip_getsockopt_impl+0x9cc>

#if LWIP_TCP_KEEPALIVE
    case TCP_KEEPIDLE:
      *(int*)optval = (int)(sock->conn->pcb.tcp->keep_idle/1000);
  11483c:	e51b300c 	ldr	r3, [fp, #-12]
  114840:	e5933000 	ldr	r3, [r3]
  114844:	e5933008 	ldr	r3, [r3, #8]
  114848:	e5932094 	ldr	r2, [r3, #148]	; 0x94
  11484c:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  114850:	e3413062 	movt	r3, #4194	; 0x1062
  114854:	e0832392 	umull	r2, r3, r2, r3
  114858:	e1a03323 	lsr	r3, r3, #6
  11485c:	e1a02003 	mov	r2, r3
  114860:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114864:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, TCP_KEEPIDLE) = %d\n",
                  s, *(int *)optval));
      break;
  114868:	ea000016 	b	1148c8 <lwip_getsockopt_impl+0x9cc>
    case TCP_KEEPINTVL:
      *(int*)optval = (int)(sock->conn->pcb.tcp->keep_intvl/1000);
  11486c:	e51b300c 	ldr	r3, [fp, #-12]
  114870:	e5933000 	ldr	r3, [r3]
  114874:	e5933008 	ldr	r3, [r3, #8]
  114878:	e5932098 	ldr	r2, [r3, #152]	; 0x98
  11487c:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  114880:	e3413062 	movt	r3, #4194	; 0x1062
  114884:	e0832392 	umull	r2, r3, r2, r3
  114888:	e1a03323 	lsr	r3, r3, #6
  11488c:	e1a02003 	mov	r2, r3
  114890:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114894:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, TCP_KEEPINTVL) = %d\n",
                  s, *(int *)optval));
      break;
  114898:	ea00000a 	b	1148c8 <lwip_getsockopt_impl+0x9cc>
    case TCP_KEEPCNT:
      *(int*)optval = (int)sock->conn->pcb.tcp->keep_cnt;
  11489c:	e51b300c 	ldr	r3, [fp, #-12]
  1148a0:	e5933000 	ldr	r3, [r3]
  1148a4:	e5933008 	ldr	r3, [r3, #8]
  1148a8:	e593309c 	ldr	r3, [r3, #156]	; 0x9c
  1148ac:	e1a02003 	mov	r2, r3
  1148b0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1148b4:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, TCP_KEEPCNT) = %d\n",
                  s, *(int *)optval));
      break;
  1148b8:	ea000002 	b	1148c8 <lwip_getsockopt_impl+0x9cc>
#endif /* LWIP_TCP_KEEPALIVE */
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
  1148bc:	e3a0305c 	mov	r3, #92	; 0x5c
  1148c0:	e54b3005 	strb	r3, [fp, #-5]
      break;
  1148c4:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  1148c8:	ea000006 	b	1148e8 <lwip_getsockopt_impl+0x9ec>
      break;
#endif /* LWIP_IPV6 && LWIP_RAW */
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_RAW, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
  1148cc:	e3a0305c 	mov	r3, #92	; 0x5c
  1148d0:	e54b3005 	strb	r3, [fp, #-5]
      break;
  1148d4:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  1148d8:	ea000002 	b	1148e8 <lwip_getsockopt_impl+0x9ec>
  default:
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, level=0x%x, UNIMPL: optname=0x%x, ..)\n",
                                s, level, optname));
    err = ENOPROTOOPT;
  1148dc:	e3a0305c 	mov	r3, #92	; 0x5c
  1148e0:	e54b3005 	strb	r3, [fp, #-5]
    break;
  1148e4:	e320f000 	nop	{0}
  } /* switch (level) */

  return err;
  1148e8:	e55b3005 	ldrb	r3, [fp, #-5]
}
  1148ec:	e1a00003 	mov	r0, r3
  1148f0:	e24bd004 	sub	sp, fp, #4
  1148f4:	e8bd8800 	pop	{fp, pc}

001148f8 <lwip_setsockopt>:

int
lwip_setsockopt(int s, int level, int optname, const void *optval, socklen_t optlen)
{
  1148f8:	e92d4800 	push	{fp, lr}
  1148fc:	e28db004 	add	fp, sp, #4
  114900:	e24dd028 	sub	sp, sp, #40	; 0x28
  114904:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  114908:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  11490c:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  114910:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  u8_t err = 0;
  114914:	e3a03000 	mov	r3, #0
  114918:	e54b3005 	strb	r3, [fp, #-5]
  struct lwip_sock *sock = get_socket(s);
  11491c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  114920:	ebfff0a5 	bl	110bbc <get_socket>
  114924:	e50b000c 	str	r0, [fp, #-12]
#if !LWIP_TCPIP_CORE_LOCKING
  LWIP_SETGETSOCKOPT_DATA_VAR_DECLARE(data);
#endif /* !LWIP_TCPIP_CORE_LOCKING */

  if (!sock) {
  114928:	e51b300c 	ldr	r3, [fp, #-12]
  11492c:	e3530000 	cmp	r3, #0
  114930:	1a000001 	bne	11493c <lwip_setsockopt+0x44>
    return -1;
  114934:	e3e03000 	mvn	r3, #0
  114938:	ea000033 	b	114a0c <lwip_setsockopt+0x114>
  }

  if (NULL == optval) {
  11493c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  114940:	e3530000 	cmp	r3, #0
  114944:	1a00000e 	bne	114984 <lwip_setsockopt+0x8c>
    sock_set_errno(sock, EFAULT);
  114948:	e3a0300e 	mov	r3, #14
  11494c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  114950:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  114954:	e6ef2073 	uxtb	r2, r3
  114958:	e51b300c 	ldr	r3, [fp, #-12]
  11495c:	e5c32010 	strb	r2, [r3, #16]
  114960:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  114964:	e3530000 	cmp	r3, #0
  114968:	0a000003 	beq	11497c <lwip_setsockopt+0x84>
  11496c:	eb008ef8 	bl	138554 <__errno_location>
  114970:	e1a02000 	mov	r2, r0
  114974:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  114978:	e5823000 	str	r3, [r2]
    return -1;
  11497c:	e3e03000 	mvn	r3, #0
  114980:	ea000021 	b	114a0c <lwip_setsockopt+0x114>
  }

#if LWIP_TCPIP_CORE_LOCKING
  /* core-locking can just call the -impl function */
  LOCK_TCPIP_CORE();
  114984:	e30e0d64 	movw	r0, #60772	; 0xed64
  114988:	e3400014 	movt	r0, #20
  11498c:	ebffd67f 	bl	10a390 <sys_mutex_lock>
  err = lwip_setsockopt_impl(s, level, optname, optval, optlen);
  114990:	e59b3004 	ldr	r3, [fp, #4]
  114994:	e58d3000 	str	r3, [sp]
  114998:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11499c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1149a0:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1149a4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1149a8:	eb00001a 	bl	114a18 <lwip_setsockopt_impl>
  1149ac:	e1a03000 	mov	r3, r0
  1149b0:	e54b3005 	strb	r3, [fp, #-5]
  UNLOCK_TCPIP_CORE();
  1149b4:	e30e0d64 	movw	r0, #60772	; 0xed64
  1149b8:	e3400014 	movt	r0, #20
  1149bc:	ebffd67f 	bl	10a3c0 <sys_mutex_unlock>
  /* maybe lwip_getsockopt_internal has changed err */
  err = LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).err;
  LWIP_SETGETSOCKOPT_DATA_VAR_FREE(data);
#endif  /* LWIP_TCPIP_CORE_LOCKING */

  sock_set_errno(sock, err);
  1149c0:	e55b3005 	ldrb	r3, [fp, #-5]
  1149c4:	e50b3010 	str	r3, [fp, #-16]
  1149c8:	e51b3010 	ldr	r3, [fp, #-16]
  1149cc:	e6ef2073 	uxtb	r2, r3
  1149d0:	e51b300c 	ldr	r3, [fp, #-12]
  1149d4:	e5c32010 	strb	r2, [r3, #16]
  1149d8:	e51b3010 	ldr	r3, [fp, #-16]
  1149dc:	e3530000 	cmp	r3, #0
  1149e0:	0a000003 	beq	1149f4 <lwip_setsockopt+0xfc>
  1149e4:	eb008eda 	bl	138554 <__errno_location>
  1149e8:	e1a02000 	mov	r2, r0
  1149ec:	e51b3010 	ldr	r3, [fp, #-16]
  1149f0:	e5823000 	str	r3, [r2]
  return err ? -1 : 0;
  1149f4:	e55b3005 	ldrb	r3, [fp, #-5]
  1149f8:	e3530000 	cmp	r3, #0
  1149fc:	0a000001 	beq	114a08 <lwip_setsockopt+0x110>
  114a00:	e3e03000 	mvn	r3, #0
  114a04:	ea000000 	b	114a0c <lwip_setsockopt+0x114>
  114a08:	e3a03000 	mov	r3, #0
}
  114a0c:	e1a00003 	mov	r0, r3
  114a10:	e24bd004 	sub	sp, fp, #4
  114a14:	e8bd8800 	pop	{fp, pc}

00114a18 <lwip_setsockopt_impl>:
/** lwip_setsockopt_impl: the actual implementation of setsockopt:
 * same argument as lwip_setsockopt, either called directly or through callback
 */
static u8_t
lwip_setsockopt_impl(int s, int level, int optname, const void *optval, socklen_t optlen)
{
  114a18:	e92d4800 	push	{fp, lr}
  114a1c:	e28db004 	add	fp, sp, #4
  114a20:	e24dd028 	sub	sp, sp, #40	; 0x28
  114a24:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  114a28:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  114a2c:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  114a30:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  u8_t err = 0;
  114a34:	e3a03000 	mov	r3, #0
  114a38:	e54b3005 	strb	r3, [fp, #-5]
  struct lwip_sock *sock = tryget_socket(s);
  114a3c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  114a40:	ebfff082 	bl	110c50 <tryget_socket>
  114a44:	e50b000c 	str	r0, [fp, #-12]
  if (!sock) {
  114a48:	e51b300c 	ldr	r3, [fp, #-12]
  114a4c:	e3530000 	cmp	r3, #0
  114a50:	1a000001 	bne	114a5c <lwip_setsockopt_impl+0x44>
    return EBADF;
  114a54:	e3a03009 	mov	r3, #9
  114a58:	ea000248 	b	115380 <lwip_setsockopt_impl+0x968>
  }

  switch (level) {
  114a5c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  114a60:	e3530006 	cmp	r3, #6
  114a64:	0a0001d3 	beq	1151b8 <lwip_setsockopt_impl+0x7a0>
  114a68:	e3530006 	cmp	r3, #6
  114a6c:	ca000002 	bgt	114a7c <lwip_setsockopt_impl+0x64>
  114a70:	e3530000 	cmp	r3, #0
  114a74:	0a0000d2 	beq	114dc4 <lwip_setsockopt_impl+0x3ac>
  114a78:	ea00023c 	b	115370 <lwip_setsockopt_impl+0x958>
  114a7c:	e35300ff 	cmp	r3, #255	; 0xff
  114a80:	0a000236 	beq	115360 <lwip_setsockopt_impl+0x948>
  114a84:	e3002fff 	movw	r2, #4095	; 0xfff
  114a88:	e1530002 	cmp	r3, r2
  114a8c:	1a000237 	bne	115370 <lwip_setsockopt_impl+0x958>

/* Level: SOL_SOCKET */
  case SOL_SOCKET:
    switch (optname) {
  114a90:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  114a94:	e3012002 	movw	r2, #4098	; 0x1002
  114a98:	e1530002 	cmp	r3, r2
  114a9c:	0a000081 	beq	114ca8 <lwip_setsockopt_impl+0x290>
  114aa0:	e3012002 	movw	r2, #4098	; 0x1002
  114aa4:	e1530002 	cmp	r3, r2
  114aa8:	ca000006 	bgt	114ac8 <lwip_setsockopt_impl+0xb0>
  114aac:	e3530008 	cmp	r3, #8
  114ab0:	0a00000e 	beq	114af0 <lwip_setsockopt_impl+0xd8>
  114ab4:	e3530020 	cmp	r3, #32
  114ab8:	0a00000c 	beq	114af0 <lwip_setsockopt_impl+0xd8>
  114abc:	e3530004 	cmp	r3, #4
  114ac0:	0a00000a 	beq	114af0 <lwip_setsockopt_impl+0xd8>
  114ac4:	ea0000ba 	b	114db4 <lwip_setsockopt_impl+0x39c>
  114ac8:	e3012006 	movw	r2, #4102	; 0x1006
  114acc:	e1530002 	cmp	r3, r2
  114ad0:	0a000057 	beq	114c34 <lwip_setsockopt_impl+0x21c>
  114ad4:	e301200a 	movw	r2, #4106	; 0x100a
  114ad8:	e1530002 	cmp	r3, r2
  114adc:	0a000082 	beq	114cec <lwip_setsockopt_impl+0x2d4>
  114ae0:	e3012005 	movw	r2, #4101	; 0x1005
  114ae4:	e1530002 	cmp	r3, r2
  114ae8:	0a000034 	beq	114bc0 <lwip_setsockopt_impl+0x1a8>
  114aec:	ea0000b0 	b	114db4 <lwip_setsockopt_impl+0x39c>
    case SO_BROADCAST:
    case SO_KEEPALIVE:
#if SO_REUSE
    case SO_REUSEADDR:
#endif /* SO_REUSE */
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
  114af0:	e59b3004 	ldr	r3, [fp, #4]
  114af4:	e3530003 	cmp	r3, #3
  114af8:	8a000001 	bhi	114b04 <lwip_setsockopt_impl+0xec>
  114afc:	e3a03016 	mov	r3, #22
  114b00:	ea00021e 	b	115380 <lwip_setsockopt_impl+0x968>
  114b04:	e51b300c 	ldr	r3, [fp, #-12]
  114b08:	e5933000 	ldr	r3, [r3]
  114b0c:	e3530000 	cmp	r3, #0
  114b10:	0a000004 	beq	114b28 <lwip_setsockopt_impl+0x110>
  114b14:	e51b300c 	ldr	r3, [fp, #-12]
  114b18:	e5933000 	ldr	r3, [r3]
  114b1c:	e5933008 	ldr	r3, [r3, #8]
  114b20:	e3530000 	cmp	r3, #0
  114b24:	1a000001 	bne	114b30 <lwip_setsockopt_impl+0x118>
  114b28:	e3a03016 	mov	r3, #22
  114b2c:	ea000213 	b	115380 <lwip_setsockopt_impl+0x968>
      if (*(const int*)optval) {
  114b30:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114b34:	e5933000 	ldr	r3, [r3]
  114b38:	e3530000 	cmp	r3, #0
  114b3c:	0a00000e 	beq	114b7c <lwip_setsockopt_impl+0x164>
        ip_set_option(sock->conn->pcb.ip, optname);
  114b40:	e51b300c 	ldr	r3, [fp, #-12]
  114b44:	e5933000 	ldr	r3, [r3]
  114b48:	e5933008 	ldr	r3, [r3, #8]
  114b4c:	e5d33008 	ldrb	r3, [r3, #8]
  114b50:	e6af2073 	sxtb	r2, r3
  114b54:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  114b58:	e6af3073 	sxtb	r3, r3
  114b5c:	e1823003 	orr	r3, r2, r3
  114b60:	e6af2073 	sxtb	r2, r3
  114b64:	e51b300c 	ldr	r3, [fp, #-12]
  114b68:	e5933000 	ldr	r3, [r3]
  114b6c:	e5933008 	ldr	r3, [r3, #8]
  114b70:	e6ef2072 	uxtb	r2, r2
  114b74:	e5c32008 	strb	r2, [r3, #8]
      } else {
        ip_reset_option(sock->conn->pcb.ip, optname);
      }
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, SOL_SOCKET, optname=0x%x, ..) -> %s\n",
                  s, optname, (*(const int*)optval?"on":"off")));
      break;
  114b78:	ea000090 	b	114dc0 <lwip_setsockopt_impl+0x3a8>
        ip_reset_option(sock->conn->pcb.ip, optname);
  114b7c:	e51b300c 	ldr	r3, [fp, #-12]
  114b80:	e5933000 	ldr	r3, [r3]
  114b84:	e5933008 	ldr	r3, [r3, #8]
  114b88:	e5d33008 	ldrb	r3, [r3, #8]
  114b8c:	e6af2073 	sxtb	r2, r3
  114b90:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  114b94:	e6af3073 	sxtb	r3, r3
  114b98:	e1e03003 	mvn	r3, r3
  114b9c:	e6af3073 	sxtb	r3, r3
  114ba0:	e0033002 	and	r3, r3, r2
  114ba4:	e6af2073 	sxtb	r2, r3
  114ba8:	e51b300c 	ldr	r3, [fp, #-12]
  114bac:	e5933000 	ldr	r3, [r3]
  114bb0:	e5933008 	ldr	r3, [r3, #8]
  114bb4:	e6ef2072 	uxtb	r2, r2
  114bb8:	e5c32008 	strb	r2, [r3, #8]
      break;
  114bbc:	ea00007f 	b	114dc0 <lwip_setsockopt_impl+0x3a8>
    /* SO_TYPE is get-only */
    /* SO_ERROR is get-only */

#if LWIP_SO_SNDTIMEO
    case SO_SNDTIMEO:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, optlen, LWIP_SO_SNDRCVTIMEO_OPTTYPE);
  114bc0:	e59b3004 	ldr	r3, [fp, #4]
  114bc4:	e353000f 	cmp	r3, #15
  114bc8:	8a000001 	bhi	114bd4 <lwip_setsockopt_impl+0x1bc>
  114bcc:	e3a03016 	mov	r3, #22
  114bd0:	ea0001ea 	b	115380 <lwip_setsockopt_impl+0x968>
  114bd4:	e51b300c 	ldr	r3, [fp, #-12]
  114bd8:	e5933000 	ldr	r3, [r3]
  114bdc:	e3530000 	cmp	r3, #0
  114be0:	1a000001 	bne	114bec <lwip_setsockopt_impl+0x1d4>
  114be4:	e3a03016 	mov	r3, #22
  114be8:	ea0001e4 	b	115380 <lwip_setsockopt_impl+0x968>
      netconn_set_sendtimeout(sock->conn, LWIP_SO_SNDRCVTIMEO_GET_MS(optval));
  114bec:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114bf0:	e1c320d0 	ldrd	r2, [r3]
  114bf4:	e3a03ffa 	mov	r3, #1000	; 0x3e8
  114bf8:	e0010293 	mul	r1, r3, r2
  114bfc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114c00:	e5933008 	ldr	r3, [r3, #8]
  114c04:	e2833ff9 	add	r3, r3, #996	; 0x3e4
  114c08:	e2833003 	add	r3, r3, #3
  114c0c:	e1a02003 	mov	r2, r3
  114c10:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  114c14:	e3413062 	movt	r3, #4194	; 0x1062
  114c18:	e0832392 	umull	r2, r3, r2, r3
  114c1c:	e1a03323 	lsr	r3, r3, #6
  114c20:	e0812003 	add	r2, r1, r3
  114c24:	e51b300c 	ldr	r3, [fp, #-12]
  114c28:	e5933000 	ldr	r3, [r3]
  114c2c:	e5832020 	str	r2, [r3, #32]
      break;
  114c30:	ea000062 	b	114dc0 <lwip_setsockopt_impl+0x3a8>
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
    case SO_RCVTIMEO:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, optlen, LWIP_SO_SNDRCVTIMEO_OPTTYPE);
  114c34:	e59b3004 	ldr	r3, [fp, #4]
  114c38:	e353000f 	cmp	r3, #15
  114c3c:	8a000001 	bhi	114c48 <lwip_setsockopt_impl+0x230>
  114c40:	e3a03016 	mov	r3, #22
  114c44:	ea0001cd 	b	115380 <lwip_setsockopt_impl+0x968>
  114c48:	e51b300c 	ldr	r3, [fp, #-12]
  114c4c:	e5933000 	ldr	r3, [r3]
  114c50:	e3530000 	cmp	r3, #0
  114c54:	1a000001 	bne	114c60 <lwip_setsockopt_impl+0x248>
  114c58:	e3a03016 	mov	r3, #22
  114c5c:	ea0001c7 	b	115380 <lwip_setsockopt_impl+0x968>
      netconn_set_recvtimeout(sock->conn, (int)LWIP_SO_SNDRCVTIMEO_GET_MS(optval));
  114c60:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114c64:	e1c320d0 	ldrd	r2, [r3]
  114c68:	e3a03ffa 	mov	r3, #1000	; 0x3e8
  114c6c:	e0010293 	mul	r1, r3, r2
  114c70:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114c74:	e5933008 	ldr	r3, [r3, #8]
  114c78:	e2833ff9 	add	r3, r3, #996	; 0x3e4
  114c7c:	e2833003 	add	r3, r3, #3
  114c80:	e1a02003 	mov	r2, r3
  114c84:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  114c88:	e3413062 	movt	r3, #4194	; 0x1062
  114c8c:	e0832392 	umull	r2, r3, r2, r3
  114c90:	e1a03323 	lsr	r3, r3, #6
  114c94:	e0812003 	add	r2, r1, r3
  114c98:	e51b300c 	ldr	r3, [fp, #-12]
  114c9c:	e5933000 	ldr	r3, [r3]
  114ca0:	e5832024 	str	r2, [r3, #36]	; 0x24
      break;
  114ca4:	ea000045 	b	114dc0 <lwip_setsockopt_impl+0x3a8>
#endif /* LWIP_SO_RCVTIMEO */
#if LWIP_SO_RCVBUF
    case SO_RCVBUF:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, optlen, int);
  114ca8:	e59b3004 	ldr	r3, [fp, #4]
  114cac:	e3530003 	cmp	r3, #3
  114cb0:	8a000001 	bhi	114cbc <lwip_setsockopt_impl+0x2a4>
  114cb4:	e3a03016 	mov	r3, #22
  114cb8:	ea0001b0 	b	115380 <lwip_setsockopt_impl+0x968>
  114cbc:	e51b300c 	ldr	r3, [fp, #-12]
  114cc0:	e5933000 	ldr	r3, [r3]
  114cc4:	e3530000 	cmp	r3, #0
  114cc8:	1a000001 	bne	114cd4 <lwip_setsockopt_impl+0x2bc>
  114ccc:	e3a03016 	mov	r3, #22
  114cd0:	ea0001aa 	b	115380 <lwip_setsockopt_impl+0x968>
      netconn_set_recvbufsize(sock->conn, *(const int*)optval);
  114cd4:	e51b300c 	ldr	r3, [fp, #-12]
  114cd8:	e5933000 	ldr	r3, [r3]
  114cdc:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  114ce0:	e5922000 	ldr	r2, [r2]
  114ce4:	e5832028 	str	r2, [r3, #40]	; 0x28
      break;
  114ce8:	ea000034 	b	114dc0 <lwip_setsockopt_impl+0x3a8>
      }
      break;
#endif /* LWIP_SO_LINGER */
#if LWIP_UDP
    case SO_NO_CHECK:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, int, NETCONN_UDP);
  114cec:	e59b3004 	ldr	r3, [fp, #4]
  114cf0:	e3530003 	cmp	r3, #3
  114cf4:	8a000001 	bhi	114d00 <lwip_setsockopt_impl+0x2e8>
  114cf8:	e3a03016 	mov	r3, #22
  114cfc:	ea00019f 	b	115380 <lwip_setsockopt_impl+0x968>
  114d00:	e51b300c 	ldr	r3, [fp, #-12]
  114d04:	e5933000 	ldr	r3, [r3]
  114d08:	e3530000 	cmp	r3, #0
  114d0c:	0a000004 	beq	114d24 <lwip_setsockopt_impl+0x30c>
  114d10:	e51b300c 	ldr	r3, [fp, #-12]
  114d14:	e5933000 	ldr	r3, [r3]
  114d18:	e5933008 	ldr	r3, [r3, #8]
  114d1c:	e3530000 	cmp	r3, #0
  114d20:	1a000001 	bne	114d2c <lwip_setsockopt_impl+0x314>
  114d24:	e3a03016 	mov	r3, #22
  114d28:	ea000194 	b	115380 <lwip_setsockopt_impl+0x968>
  114d2c:	e51b300c 	ldr	r3, [fp, #-12]
  114d30:	e5933000 	ldr	r3, [r3]
  114d34:	e5933000 	ldr	r3, [r3]
  114d38:	e20330f0 	and	r3, r3, #240	; 0xf0
  114d3c:	e3530020 	cmp	r3, #32
  114d40:	0a000001 	beq	114d4c <lwip_setsockopt_impl+0x334>
  114d44:	e3a0305c 	mov	r3, #92	; 0x5c
  114d48:	ea00018c 	b	115380 <lwip_setsockopt_impl+0x968>
      if ((udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_UDPLITE) != 0) {
        /* this flag is only available for UDP, not for UDP lite */
        return EAFNOSUPPORT;
      }
#endif /* LWIP_UDPLITE */
      if (*(const int*)optval) {
  114d4c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114d50:	e5933000 	ldr	r3, [r3]
  114d54:	e3530000 	cmp	r3, #0
  114d58:	0a00000a 	beq	114d88 <lwip_setsockopt_impl+0x370>
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) | UDP_FLAGS_NOCHKSUM);
  114d5c:	e51b300c 	ldr	r3, [fp, #-12]
  114d60:	e5933000 	ldr	r3, [r3]
  114d64:	e5933008 	ldr	r3, [r3, #8]
  114d68:	e5d32010 	ldrb	r2, [r3, #16]
  114d6c:	e51b300c 	ldr	r3, [fp, #-12]
  114d70:	e5933000 	ldr	r3, [r3]
  114d74:	e5933008 	ldr	r3, [r3, #8]
  114d78:	e3822001 	orr	r2, r2, #1
  114d7c:	e6ef2072 	uxtb	r2, r2
  114d80:	e5c32010 	strb	r2, [r3, #16]
      } else {
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) & ~UDP_FLAGS_NOCHKSUM);
      }
      break;
  114d84:	ea00000d 	b	114dc0 <lwip_setsockopt_impl+0x3a8>
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) & ~UDP_FLAGS_NOCHKSUM);
  114d88:	e51b300c 	ldr	r3, [fp, #-12]
  114d8c:	e5933000 	ldr	r3, [r3]
  114d90:	e5933008 	ldr	r3, [r3, #8]
  114d94:	e5d32010 	ldrb	r2, [r3, #16]
  114d98:	e51b300c 	ldr	r3, [fp, #-12]
  114d9c:	e5933000 	ldr	r3, [r3]
  114da0:	e5933008 	ldr	r3, [r3, #8]
  114da4:	e3c22001 	bic	r2, r2, #1
  114da8:	e6ef2072 	uxtb	r2, r2
  114dac:	e5c32010 	strb	r2, [r3, #16]
      break;
  114db0:	ea000002 	b	114dc0 <lwip_setsockopt_impl+0x3a8>
#endif /* LWIP_UDP */
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, SOL_SOCKET, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
  114db4:	e3a0305c 	mov	r3, #92	; 0x5c
  114db8:	e54b3005 	strb	r3, [fp, #-5]
      break;
  114dbc:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  114dc0:	ea00016d 	b	11537c <lwip_setsockopt_impl+0x964>

/* Level: IPPROTO_IP */
  case IPPROTO_IP:
    switch (optname) {
  114dc4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  114dc8:	e2433001 	sub	r3, r3, #1
  114dcc:	e3530006 	cmp	r3, #6
  114dd0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  114dd4:	ea0000f2 	b	1151a4 <lwip_setsockopt_impl+0x78c>
  114dd8:	00114e54 	.word	0x00114e54
  114ddc:	00114df4 	.word	0x00114df4
  114de0:	0011507c 	.word	0x0011507c
  114de4:	0011507c 	.word	0x0011507c
  114de8:	00114eb4 	.word	0x00114eb4
  114dec:	00114f30 	.word	0x00114f30
  114df0:	00114fb4 	.word	0x00114fb4
    case IP_TTL:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
  114df4:	e59b3004 	ldr	r3, [fp, #4]
  114df8:	e3530003 	cmp	r3, #3
  114dfc:	8a000001 	bhi	114e08 <lwip_setsockopt_impl+0x3f0>
  114e00:	e3a03016 	mov	r3, #22
  114e04:	ea00015d 	b	115380 <lwip_setsockopt_impl+0x968>
  114e08:	e51b300c 	ldr	r3, [fp, #-12]
  114e0c:	e5933000 	ldr	r3, [r3]
  114e10:	e3530000 	cmp	r3, #0
  114e14:	0a000004 	beq	114e2c <lwip_setsockopt_impl+0x414>
  114e18:	e51b300c 	ldr	r3, [fp, #-12]
  114e1c:	e5933000 	ldr	r3, [r3]
  114e20:	e5933008 	ldr	r3, [r3, #8]
  114e24:	e3530000 	cmp	r3, #0
  114e28:	1a000001 	bne	114e34 <lwip_setsockopt_impl+0x41c>
  114e2c:	e3a03016 	mov	r3, #22
  114e30:	ea000152 	b	115380 <lwip_setsockopt_impl+0x968>
      sock->conn->pcb.ip->ttl = (u8_t)(*(const int*)optval);
  114e34:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114e38:	e5932000 	ldr	r2, [r3]
  114e3c:	e51b300c 	ldr	r3, [fp, #-12]
  114e40:	e5933000 	ldr	r3, [r3]
  114e44:	e5933008 	ldr	r3, [r3, #8]
  114e48:	e6ef2072 	uxtb	r2, r2
  114e4c:	e5c3200a 	strb	r2, [r3, #10]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TTL, ..) -> %d\n",
                  s, sock->conn->pcb.ip->ttl));
      break;
  114e50:	ea0000d7 	b	1151b4 <lwip_setsockopt_impl+0x79c>
    case IP_TOS:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
  114e54:	e59b3004 	ldr	r3, [fp, #4]
  114e58:	e3530003 	cmp	r3, #3
  114e5c:	8a000001 	bhi	114e68 <lwip_setsockopt_impl+0x450>
  114e60:	e3a03016 	mov	r3, #22
  114e64:	ea000145 	b	115380 <lwip_setsockopt_impl+0x968>
  114e68:	e51b300c 	ldr	r3, [fp, #-12]
  114e6c:	e5933000 	ldr	r3, [r3]
  114e70:	e3530000 	cmp	r3, #0
  114e74:	0a000004 	beq	114e8c <lwip_setsockopt_impl+0x474>
  114e78:	e51b300c 	ldr	r3, [fp, #-12]
  114e7c:	e5933000 	ldr	r3, [r3]
  114e80:	e5933008 	ldr	r3, [r3, #8]
  114e84:	e3530000 	cmp	r3, #0
  114e88:	1a000001 	bne	114e94 <lwip_setsockopt_impl+0x47c>
  114e8c:	e3a03016 	mov	r3, #22
  114e90:	ea00013a 	b	115380 <lwip_setsockopt_impl+0x968>
      sock->conn->pcb.ip->tos = (u8_t)(*(const int*)optval);
  114e94:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114e98:	e5932000 	ldr	r2, [r3]
  114e9c:	e51b300c 	ldr	r3, [fp, #-12]
  114ea0:	e5933000 	ldr	r3, [r3]
  114ea4:	e5933008 	ldr	r3, [r3, #8]
  114ea8:	e6ef2072 	uxtb	r2, r2
  114eac:	e5c32009 	strb	r2, [r3, #9]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TOS, ..)-> %d\n",
                  s, sock->conn->pcb.ip->tos));
      break;
  114eb0:	ea0000bf 	b	1151b4 <lwip_setsockopt_impl+0x79c>
#if LWIP_MULTICAST_TX_OPTIONS
    case IP_MULTICAST_TTL:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, u8_t, NETCONN_UDP);
  114eb4:	e59b3004 	ldr	r3, [fp, #4]
  114eb8:	e3530000 	cmp	r3, #0
  114ebc:	1a000001 	bne	114ec8 <lwip_setsockopt_impl+0x4b0>
  114ec0:	e3a03016 	mov	r3, #22
  114ec4:	ea00012d 	b	115380 <lwip_setsockopt_impl+0x968>
  114ec8:	e51b300c 	ldr	r3, [fp, #-12]
  114ecc:	e5933000 	ldr	r3, [r3]
  114ed0:	e3530000 	cmp	r3, #0
  114ed4:	0a000004 	beq	114eec <lwip_setsockopt_impl+0x4d4>
  114ed8:	e51b300c 	ldr	r3, [fp, #-12]
  114edc:	e5933000 	ldr	r3, [r3]
  114ee0:	e5933008 	ldr	r3, [r3, #8]
  114ee4:	e3530000 	cmp	r3, #0
  114ee8:	1a000001 	bne	114ef4 <lwip_setsockopt_impl+0x4dc>
  114eec:	e3a03016 	mov	r3, #22
  114ef0:	ea000122 	b	115380 <lwip_setsockopt_impl+0x968>
  114ef4:	e51b300c 	ldr	r3, [fp, #-12]
  114ef8:	e5933000 	ldr	r3, [r3]
  114efc:	e5933000 	ldr	r3, [r3]
  114f00:	e20330f0 	and	r3, r3, #240	; 0xf0
  114f04:	e3530020 	cmp	r3, #32
  114f08:	0a000001 	beq	114f14 <lwip_setsockopt_impl+0x4fc>
  114f0c:	e3a0305c 	mov	r3, #92	; 0x5c
  114f10:	ea00011a 	b	115380 <lwip_setsockopt_impl+0x968>
      udp_set_multicast_ttl(sock->conn->pcb.udp, (u8_t)(*(const u8_t*)optval));
  114f14:	e51b300c 	ldr	r3, [fp, #-12]
  114f18:	e5933000 	ldr	r3, [r3]
  114f1c:	e5933008 	ldr	r3, [r3, #8]
  114f20:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  114f24:	e5d22000 	ldrb	r2, [r2]
  114f28:	e5c3201c 	strb	r2, [r3, #28]
      break;
  114f2c:	ea0000a0 	b	1151b4 <lwip_setsockopt_impl+0x79c>
    case IP_MULTICAST_IF:
      {
        ip4_addr_t if_addr;
        LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, struct in_addr, NETCONN_UDP);
  114f30:	e59b3004 	ldr	r3, [fp, #4]
  114f34:	e3530003 	cmp	r3, #3
  114f38:	8a000001 	bhi	114f44 <lwip_setsockopt_impl+0x52c>
  114f3c:	e3a03016 	mov	r3, #22
  114f40:	ea00010e 	b	115380 <lwip_setsockopt_impl+0x968>
  114f44:	e51b300c 	ldr	r3, [fp, #-12]
  114f48:	e5933000 	ldr	r3, [r3]
  114f4c:	e3530000 	cmp	r3, #0
  114f50:	0a000004 	beq	114f68 <lwip_setsockopt_impl+0x550>
  114f54:	e51b300c 	ldr	r3, [fp, #-12]
  114f58:	e5933000 	ldr	r3, [r3]
  114f5c:	e5933008 	ldr	r3, [r3, #8]
  114f60:	e3530000 	cmp	r3, #0
  114f64:	1a000001 	bne	114f70 <lwip_setsockopt_impl+0x558>
  114f68:	e3a03016 	mov	r3, #22
  114f6c:	ea000103 	b	115380 <lwip_setsockopt_impl+0x968>
  114f70:	e51b300c 	ldr	r3, [fp, #-12]
  114f74:	e5933000 	ldr	r3, [r3]
  114f78:	e5933000 	ldr	r3, [r3]
  114f7c:	e20330f0 	and	r3, r3, #240	; 0xf0
  114f80:	e3530020 	cmp	r3, #32
  114f84:	0a000001 	beq	114f90 <lwip_setsockopt_impl+0x578>
  114f88:	e3a0305c 	mov	r3, #92	; 0x5c
  114f8c:	ea0000fb 	b	115380 <lwip_setsockopt_impl+0x968>
        inet_addr_to_ip4addr(&if_addr, (const struct in_addr*)optval);
  114f90:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114f94:	e5933000 	ldr	r3, [r3]
  114f98:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        udp_set_multicast_netif_addr(sock->conn->pcb.udp, &if_addr);
  114f9c:	e51b300c 	ldr	r3, [fp, #-12]
  114fa0:	e5933000 	ldr	r3, [r3]
  114fa4:	e5933008 	ldr	r3, [r3, #8]
  114fa8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  114fac:	e5832018 	str	r2, [r3, #24]
      }
      break;
  114fb0:	ea00007f 	b	1151b4 <lwip_setsockopt_impl+0x79c>
    case IP_MULTICAST_LOOP:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, u8_t, NETCONN_UDP);
  114fb4:	e59b3004 	ldr	r3, [fp, #4]
  114fb8:	e3530000 	cmp	r3, #0
  114fbc:	1a000001 	bne	114fc8 <lwip_setsockopt_impl+0x5b0>
  114fc0:	e3a03016 	mov	r3, #22
  114fc4:	ea0000ed 	b	115380 <lwip_setsockopt_impl+0x968>
  114fc8:	e51b300c 	ldr	r3, [fp, #-12]
  114fcc:	e5933000 	ldr	r3, [r3]
  114fd0:	e3530000 	cmp	r3, #0
  114fd4:	0a000004 	beq	114fec <lwip_setsockopt_impl+0x5d4>
  114fd8:	e51b300c 	ldr	r3, [fp, #-12]
  114fdc:	e5933000 	ldr	r3, [r3]
  114fe0:	e5933008 	ldr	r3, [r3, #8]
  114fe4:	e3530000 	cmp	r3, #0
  114fe8:	1a000001 	bne	114ff4 <lwip_setsockopt_impl+0x5dc>
  114fec:	e3a03016 	mov	r3, #22
  114ff0:	ea0000e2 	b	115380 <lwip_setsockopt_impl+0x968>
  114ff4:	e51b300c 	ldr	r3, [fp, #-12]
  114ff8:	e5933000 	ldr	r3, [r3]
  114ffc:	e5933000 	ldr	r3, [r3]
  115000:	e20330f0 	and	r3, r3, #240	; 0xf0
  115004:	e3530020 	cmp	r3, #32
  115008:	0a000001 	beq	115014 <lwip_setsockopt_impl+0x5fc>
  11500c:	e3a0305c 	mov	r3, #92	; 0x5c
  115010:	ea0000da 	b	115380 <lwip_setsockopt_impl+0x968>
      if (*(const u8_t*)optval) {
  115014:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  115018:	e5d33000 	ldrb	r3, [r3]
  11501c:	e3530000 	cmp	r3, #0
  115020:	0a00000a 	beq	115050 <lwip_setsockopt_impl+0x638>
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) | UDP_FLAGS_MULTICAST_LOOP);
  115024:	e51b300c 	ldr	r3, [fp, #-12]
  115028:	e5933000 	ldr	r3, [r3]
  11502c:	e5933008 	ldr	r3, [r3, #8]
  115030:	e5d32010 	ldrb	r2, [r3, #16]
  115034:	e51b300c 	ldr	r3, [fp, #-12]
  115038:	e5933000 	ldr	r3, [r3]
  11503c:	e5933008 	ldr	r3, [r3, #8]
  115040:	e3822008 	orr	r2, r2, #8
  115044:	e6ef2072 	uxtb	r2, r2
  115048:	e5c32010 	strb	r2, [r3, #16]
      } else {
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) & ~UDP_FLAGS_MULTICAST_LOOP);
      }
      break;
  11504c:	ea000058 	b	1151b4 <lwip_setsockopt_impl+0x79c>
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) & ~UDP_FLAGS_MULTICAST_LOOP);
  115050:	e51b300c 	ldr	r3, [fp, #-12]
  115054:	e5933000 	ldr	r3, [r3]
  115058:	e5933008 	ldr	r3, [r3, #8]
  11505c:	e5d32010 	ldrb	r2, [r3, #16]
  115060:	e51b300c 	ldr	r3, [fp, #-12]
  115064:	e5933000 	ldr	r3, [r3]
  115068:	e5933008 	ldr	r3, [r3, #8]
  11506c:	e3c22008 	bic	r2, r2, #8
  115070:	e6ef2072 	uxtb	r2, r2
  115074:	e5c32010 	strb	r2, [r3, #16]
      break;
  115078:	ea00004d 	b	1151b4 <lwip_setsockopt_impl+0x79c>
    case IP_DROP_MEMBERSHIP:
      {
        /* If this is a TCP or a RAW socket, ignore these options. */
        /* @todo: assign membership to this socket so that it is dropped when closing the socket */
        err_t igmp_err;
        const struct ip_mreq *imr = (const struct ip_mreq *)optval;
  11507c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  115080:	e50b3010 	str	r3, [fp, #-16]
        ip4_addr_t if_addr;
        ip4_addr_t multi_addr;
        LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, struct ip_mreq, NETCONN_UDP);
  115084:	e59b3004 	ldr	r3, [fp, #4]
  115088:	e3530007 	cmp	r3, #7
  11508c:	8a000001 	bhi	115098 <lwip_setsockopt_impl+0x680>
  115090:	e3a03016 	mov	r3, #22
  115094:	ea0000b9 	b	115380 <lwip_setsockopt_impl+0x968>
  115098:	e51b300c 	ldr	r3, [fp, #-12]
  11509c:	e5933000 	ldr	r3, [r3]
  1150a0:	e3530000 	cmp	r3, #0
  1150a4:	0a000004 	beq	1150bc <lwip_setsockopt_impl+0x6a4>
  1150a8:	e51b300c 	ldr	r3, [fp, #-12]
  1150ac:	e5933000 	ldr	r3, [r3]
  1150b0:	e5933008 	ldr	r3, [r3, #8]
  1150b4:	e3530000 	cmp	r3, #0
  1150b8:	1a000001 	bne	1150c4 <lwip_setsockopt_impl+0x6ac>
  1150bc:	e3a03016 	mov	r3, #22
  1150c0:	ea0000ae 	b	115380 <lwip_setsockopt_impl+0x968>
  1150c4:	e51b300c 	ldr	r3, [fp, #-12]
  1150c8:	e5933000 	ldr	r3, [r3]
  1150cc:	e5933000 	ldr	r3, [r3]
  1150d0:	e20330f0 	and	r3, r3, #240	; 0xf0
  1150d4:	e3530020 	cmp	r3, #32
  1150d8:	0a000001 	beq	1150e4 <lwip_setsockopt_impl+0x6cc>
  1150dc:	e3a0305c 	mov	r3, #92	; 0x5c
  1150e0:	ea0000a6 	b	115380 <lwip_setsockopt_impl+0x968>
        inet_addr_to_ip4addr(&if_addr, &imr->imr_interface);
  1150e4:	e51b3010 	ldr	r3, [fp, #-16]
  1150e8:	e5933004 	ldr	r3, [r3, #4]
  1150ec:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        inet_addr_to_ip4addr(&multi_addr, &imr->imr_multiaddr);
  1150f0:	e51b3010 	ldr	r3, [fp, #-16]
  1150f4:	e5933000 	ldr	r3, [r3]
  1150f8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
        if (optname == IP_ADD_MEMBERSHIP) {
  1150fc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  115100:	e3530003 	cmp	r3, #3
  115104:	1a000014 	bne	11515c <lwip_setsockopt_impl+0x744>
          if (!lwip_socket_register_membership(s, &if_addr, &multi_addr)) {
  115108:	e24b201c 	sub	r2, fp, #28
  11510c:	e24b3018 	sub	r3, fp, #24
  115110:	e1a01003 	mov	r1, r3
  115114:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  115118:	eb0001ba 	bl	115808 <lwip_socket_register_membership>
  11511c:	e1a03000 	mov	r3, r0
  115120:	e3530000 	cmp	r3, #0
  115124:	1a000004 	bne	11513c <lwip_setsockopt_impl+0x724>
            /* cannot track membership (out of memory) */
            err = ENOMEM;
  115128:	e3a0300c 	mov	r3, #12
  11512c:	e54b3005 	strb	r3, [fp, #-5]
            igmp_err = ERR_OK;
  115130:	e3a03000 	mov	r3, #0
  115134:	e54b3006 	strb	r3, [fp, #-6]
  115138:	ea000013 	b	11518c <lwip_setsockopt_impl+0x774>
          } else {
            igmp_err = igmp_joingroup(&if_addr, &multi_addr);
  11513c:	e24b201c 	sub	r2, fp, #28
  115140:	e24b3018 	sub	r3, fp, #24
  115144:	e1a01002 	mov	r1, r2
  115148:	e1a00003 	mov	r0, r3
  11514c:	eb006c58 	bl	1302b4 <igmp_joingroup>
  115150:	e1a03000 	mov	r3, r0
  115154:	e54b3006 	strb	r3, [fp, #-6]
  115158:	ea00000b 	b	11518c <lwip_setsockopt_impl+0x774>
          }
        } else {
          igmp_err = igmp_leavegroup(&if_addr, &multi_addr);
  11515c:	e24b201c 	sub	r2, fp, #28
  115160:	e24b3018 	sub	r3, fp, #24
  115164:	e1a01002 	mov	r1, r2
  115168:	e1a00003 	mov	r0, r3
  11516c:	eb006d09 	bl	130598 <igmp_leavegroup>
  115170:	e1a03000 	mov	r3, r0
  115174:	e54b3006 	strb	r3, [fp, #-6]
          lwip_socket_unregister_membership(s, &if_addr, &multi_addr);
  115178:	e24b201c 	sub	r2, fp, #28
  11517c:	e24b3018 	sub	r3, fp, #24
  115180:	e1a01003 	mov	r1, r3
  115184:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  115188:	eb0001e0 	bl	115910 <lwip_socket_unregister_membership>
        }
        if (igmp_err != ERR_OK) {
  11518c:	e15b30d6 	ldrsb	r3, [fp, #-6]
  115190:	e3530000 	cmp	r3, #0
  115194:	0a000005 	beq	1151b0 <lwip_setsockopt_impl+0x798>
          err = EADDRNOTAVAIL;
  115198:	e3a03063 	mov	r3, #99	; 0x63
  11519c:	e54b3005 	strb	r3, [fp, #-5]
        }
      }
      break;
  1151a0:	ea000002 	b	1151b0 <lwip_setsockopt_impl+0x798>
#endif /* LWIP_IGMP */
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
  1151a4:	e3a0305c 	mov	r3, #92	; 0x5c
  1151a8:	e54b3005 	strb	r3, [fp, #-5]
      break;
  1151ac:	ea000000 	b	1151b4 <lwip_setsockopt_impl+0x79c>
      break;
  1151b0:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  1151b4:	ea000070 	b	11537c <lwip_setsockopt_impl+0x964>

#if LWIP_TCP
/* Level: IPPROTO_TCP */
  case IPPROTO_TCP:
    /* Special case: all IPPROTO_TCP option take an int */
    LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, int, NETCONN_TCP);
  1151b8:	e59b3004 	ldr	r3, [fp, #4]
  1151bc:	e3530003 	cmp	r3, #3
  1151c0:	8a000001 	bhi	1151cc <lwip_setsockopt_impl+0x7b4>
  1151c4:	e3a03016 	mov	r3, #22
  1151c8:	ea00006c 	b	115380 <lwip_setsockopt_impl+0x968>
  1151cc:	e51b300c 	ldr	r3, [fp, #-12]
  1151d0:	e5933000 	ldr	r3, [r3]
  1151d4:	e3530000 	cmp	r3, #0
  1151d8:	0a000004 	beq	1151f0 <lwip_setsockopt_impl+0x7d8>
  1151dc:	e51b300c 	ldr	r3, [fp, #-12]
  1151e0:	e5933000 	ldr	r3, [r3]
  1151e4:	e5933008 	ldr	r3, [r3, #8]
  1151e8:	e3530000 	cmp	r3, #0
  1151ec:	1a000001 	bne	1151f8 <lwip_setsockopt_impl+0x7e0>
  1151f0:	e3a03016 	mov	r3, #22
  1151f4:	ea000061 	b	115380 <lwip_setsockopt_impl+0x968>
  1151f8:	e51b300c 	ldr	r3, [fp, #-12]
  1151fc:	e5933000 	ldr	r3, [r3]
  115200:	e5933000 	ldr	r3, [r3]
  115204:	e20330f0 	and	r3, r3, #240	; 0xf0
  115208:	e3530010 	cmp	r3, #16
  11520c:	0a000001 	beq	115218 <lwip_setsockopt_impl+0x800>
  115210:	e3a0305c 	mov	r3, #92	; 0x5c
  115214:	ea000059 	b	115380 <lwip_setsockopt_impl+0x968>
    if (sock->conn->pcb.tcp->state == LISTEN) {
  115218:	e51b300c 	ldr	r3, [fp, #-12]
  11521c:	e5933000 	ldr	r3, [r3]
  115220:	e5933008 	ldr	r3, [r3, #8]
  115224:	e5933014 	ldr	r3, [r3, #20]
  115228:	e3530001 	cmp	r3, #1
  11522c:	1a000001 	bne	115238 <lwip_setsockopt_impl+0x820>
      return EINVAL;
  115230:	e3a03016 	mov	r3, #22
  115234:	ea000051 	b	115380 <lwip_setsockopt_impl+0x968>
    }
    switch (optname) {
  115238:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11523c:	e2433001 	sub	r3, r3, #1
  115240:	e3530004 	cmp	r3, #4
  115244:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  115248:	ea000040 	b	115350 <lwip_setsockopt_impl+0x938>
  11524c:	00115260 	.word	0x00115260
  115250:	001152c8 	.word	0x001152c8
  115254:	001152e4 	.word	0x001152e4
  115258:	0011530c 	.word	0x0011530c
  11525c:	00115334 	.word	0x00115334
    case TCP_NODELAY:
      if (*(const int*)optval) {
  115260:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  115264:	e5933000 	ldr	r3, [r3]
  115268:	e3530000 	cmp	r3, #0
  11526c:	0a00000a 	beq	11529c <lwip_setsockopt_impl+0x884>
        tcp_nagle_disable(sock->conn->pcb.tcp);
  115270:	e51b300c 	ldr	r3, [fp, #-12]
  115274:	e5933000 	ldr	r3, [r3]
  115278:	e5933008 	ldr	r3, [r3, #8]
  11527c:	e5d3201e 	ldrb	r2, [r3, #30]
  115280:	e51b300c 	ldr	r3, [fp, #-12]
  115284:	e5933000 	ldr	r3, [r3]
  115288:	e5933008 	ldr	r3, [r3, #8]
  11528c:	e3822040 	orr	r2, r2, #64	; 0x40
  115290:	e6ef2072 	uxtb	r2, r2
  115294:	e5c3201e 	strb	r2, [r3, #30]
      } else {
        tcp_nagle_enable(sock->conn->pcb.tcp);
      }
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_NODELAY) -> %s\n",
                  s, (*(const int *)optval)?"on":"off") );
      break;
  115298:	ea00002f 	b	11535c <lwip_setsockopt_impl+0x944>
        tcp_nagle_enable(sock->conn->pcb.tcp);
  11529c:	e51b300c 	ldr	r3, [fp, #-12]
  1152a0:	e5933000 	ldr	r3, [r3]
  1152a4:	e5933008 	ldr	r3, [r3, #8]
  1152a8:	e5d3201e 	ldrb	r2, [r3, #30]
  1152ac:	e51b300c 	ldr	r3, [fp, #-12]
  1152b0:	e5933000 	ldr	r3, [r3]
  1152b4:	e5933008 	ldr	r3, [r3, #8]
  1152b8:	e3c22040 	bic	r2, r2, #64	; 0x40
  1152bc:	e6ef2072 	uxtb	r2, r2
  1152c0:	e5c3201e 	strb	r2, [r3, #30]
      break;
  1152c4:	ea000024 	b	11535c <lwip_setsockopt_impl+0x944>
    case TCP_KEEPALIVE:
      sock->conn->pcb.tcp->keep_idle = (u32_t)(*(const int*)optval);
  1152c8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1152cc:	e5932000 	ldr	r2, [r3]
  1152d0:	e51b300c 	ldr	r3, [fp, #-12]
  1152d4:	e5933000 	ldr	r3, [r3]
  1152d8:	e5933008 	ldr	r3, [r3, #8]
  1152dc:	e5832094 	str	r2, [r3, #148]	; 0x94
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPALIVE) -> %"U32_F"\n",
                  s, sock->conn->pcb.tcp->keep_idle));
      break;
  1152e0:	ea00001d 	b	11535c <lwip_setsockopt_impl+0x944>

#if LWIP_TCP_KEEPALIVE
    case TCP_KEEPIDLE:
      sock->conn->pcb.tcp->keep_idle = 1000*(u32_t)(*(const int*)optval);
  1152e4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1152e8:	e5933000 	ldr	r3, [r3]
  1152ec:	e1a01003 	mov	r1, r3
  1152f0:	e51b300c 	ldr	r3, [fp, #-12]
  1152f4:	e5933000 	ldr	r3, [r3]
  1152f8:	e5933008 	ldr	r3, [r3, #8]
  1152fc:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  115300:	e0020192 	mul	r2, r2, r1
  115304:	e5832094 	str	r2, [r3, #148]	; 0x94
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPIDLE) -> %"U32_F"\n",
                  s, sock->conn->pcb.tcp->keep_idle));
      break;
  115308:	ea000013 	b	11535c <lwip_setsockopt_impl+0x944>
    case TCP_KEEPINTVL:
      sock->conn->pcb.tcp->keep_intvl = 1000*(u32_t)(*(const int*)optval);
  11530c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  115310:	e5933000 	ldr	r3, [r3]
  115314:	e1a01003 	mov	r1, r3
  115318:	e51b300c 	ldr	r3, [fp, #-12]
  11531c:	e5933000 	ldr	r3, [r3]
  115320:	e5933008 	ldr	r3, [r3, #8]
  115324:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  115328:	e0020192 	mul	r2, r2, r1
  11532c:	e5832098 	str	r2, [r3, #152]	; 0x98
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPINTVL) -> %"U32_F"\n",
                  s, sock->conn->pcb.tcp->keep_intvl));
      break;
  115330:	ea000009 	b	11535c <lwip_setsockopt_impl+0x944>
    case TCP_KEEPCNT:
      sock->conn->pcb.tcp->keep_cnt = (u32_t)(*(const int*)optval);
  115334:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  115338:	e5932000 	ldr	r2, [r3]
  11533c:	e51b300c 	ldr	r3, [fp, #-12]
  115340:	e5933000 	ldr	r3, [r3]
  115344:	e5933008 	ldr	r3, [r3, #8]
  115348:	e583209c 	str	r2, [r3, #156]	; 0x9c
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPCNT) -> %"U32_F"\n",
                  s, sock->conn->pcb.tcp->keep_cnt));
      break;
  11534c:	ea000002 	b	11535c <lwip_setsockopt_impl+0x944>
#endif /* LWIP_TCP_KEEPALIVE */
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
  115350:	e3a0305c 	mov	r3, #92	; 0x5c
  115354:	e54b3005 	strb	r3, [fp, #-5]
      break;
  115358:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  11535c:	ea000006 	b	11537c <lwip_setsockopt_impl+0x964>
      break;
#endif /* LWIP_IPV6 && LWIP_RAW */
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_RAW, UNIMPL: optname=0x%x, ..)\n",
                                  s, optname));
      err = ENOPROTOOPT;
  115360:	e3a0305c 	mov	r3, #92	; 0x5c
  115364:	e54b3005 	strb	r3, [fp, #-5]
      break;
  115368:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  11536c:	ea000002 	b	11537c <lwip_setsockopt_impl+0x964>
  default:
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, level=0x%x, UNIMPL: optname=0x%x, ..)\n",
                s, level, optname));
    err = ENOPROTOOPT;
  115370:	e3a0305c 	mov	r3, #92	; 0x5c
  115374:	e54b3005 	strb	r3, [fp, #-5]
    break;
  115378:	e320f000 	nop	{0}
  }  /* switch (level) */

  return err;
  11537c:	e55b3005 	ldrb	r3, [fp, #-5]
}
  115380:	e1a00003 	mov	r0, r3
  115384:	e24bd004 	sub	sp, fp, #4
  115388:	e8bd8800 	pop	{fp, pc}

0011538c <lwip_ioctl>:

int
lwip_ioctl(int s, long cmd, void *argp)
{
  11538c:	e92d4800 	push	{fp, lr}
  115390:	e28db004 	add	fp, sp, #4
  115394:	e24dd038 	sub	sp, sp, #56	; 0x38
  115398:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  11539c:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  1153a0:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
  struct lwip_sock *sock = get_socket(s);
  1153a4:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  1153a8:	ebffee03 	bl	110bbc <get_socket>
  1153ac:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  u8_t val;
#if LWIP_SO_RCVBUF
  u16_t buflen = 0;
  1153b0:	e3a03000 	mov	r3, #0
  1153b4:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  if (!sock) {
  1153b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1153bc:	e3530000 	cmp	r3, #0
  1153c0:	1a000001 	bne	1153cc <lwip_ioctl+0x40>
    return -1;
  1153c4:	e3e03000 	mvn	r3, #0
  1153c8:	ea000093 	b	11561c <lwip_ioctl+0x290>
  }

  switch (cmd) {
  1153cc:	e51b2034 	ldr	r2, [fp, #-52]	; 0xffffffcc
  1153d0:	e306367f 	movw	r3, #26239	; 0x667f
  1153d4:	e3483004 	movt	r3, #32772	; 0x8004
  1153d8:	e1520003 	cmp	r2, r3
  1153dc:	0a00000e 	beq	11541c <lwip_ioctl+0x90>
  1153e0:	e306367e 	movw	r3, #26238	; 0x667e
  1153e4:	e3443004 	movt	r3, #16388	; 0x4004
  1153e8:	e1520003 	cmp	r2, r3
  1153ec:	0a000057 	beq	115550 <lwip_ioctl+0x1c4>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_ioctl(%d, FIONBIO, %d)\n", s, val));
    sock_set_errno(sock, 0);
    return 0;

  default:
    break;
  1153f0:	e320f000 	nop	{0}
  } /* switch (cmd) */
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_ioctl(%d, UNIMPL: 0x%lx, %p)\n", s, cmd, argp));
  sock_set_errno(sock, ENOSYS); /* not yet implemented */
  1153f4:	e3a03026 	mov	r3, #38	; 0x26
  1153f8:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  1153fc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  115400:	e6ef2073 	uxtb	r2, r3
  115404:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115408:	e5c32010 	strb	r2, [r3, #16]
  11540c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  115410:	e3530000 	cmp	r3, #0
  115414:	0a00007f 	beq	115618 <lwip_ioctl+0x28c>
  115418:	ea00007a 	b	115608 <lwip_ioctl+0x27c>
    if (!argp) {
  11541c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  115420:	e3530000 	cmp	r3, #0
  115424:	1a00000e 	bne	115464 <lwip_ioctl+0xd8>
      sock_set_errno(sock, EINVAL);
  115428:	e3a03016 	mov	r3, #22
  11542c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  115430:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  115434:	e6ef2073 	uxtb	r2, r3
  115438:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11543c:	e5c32010 	strb	r2, [r3, #16]
  115440:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  115444:	e3530000 	cmp	r3, #0
  115448:	0a000003 	beq	11545c <lwip_ioctl+0xd0>
  11544c:	eb008c40 	bl	138554 <__errno_location>
  115450:	e1a02000 	mov	r2, r0
  115454:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  115458:	e5823000 	str	r3, [r2]
      return -1;
  11545c:	e3e03000 	mvn	r3, #0
  115460:	ea00006d 	b	11561c <lwip_ioctl+0x290>
    SYS_ARCH_GET(sock->conn->recv_avail, recv_avail);
  115464:	ebffb374 	bl	10223c <rt_enter_critical>
  115468:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11546c:	e5933000 	ldr	r3, [r3]
  115470:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  115474:	e50b300c 	str	r3, [fp, #-12]
  115478:	ebffb375 	bl	102254 <rt_exit_critical>
    if (recv_avail < 0) {
  11547c:	e51b300c 	ldr	r3, [fp, #-12]
  115480:	e3530000 	cmp	r3, #0
  115484:	aa000001 	bge	115490 <lwip_ioctl+0x104>
      recv_avail = 0;
  115488:	e3a03000 	mov	r3, #0
  11548c:	e50b300c 	str	r3, [fp, #-12]
    *((int*)argp) = recv_avail;
  115490:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  115494:	e51b200c 	ldr	r2, [fp, #-12]
  115498:	e5832000 	str	r2, [r3]
    if (sock->lastdata) {
  11549c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1154a0:	e5933004 	ldr	r3, [r3, #4]
  1154a4:	e3530000 	cmp	r3, #0
  1154a8:	0a000019 	beq	115514 <lwip_ioctl+0x188>
      struct pbuf *p = (struct pbuf *)sock->lastdata;
  1154ac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1154b0:	e5933004 	ldr	r3, [r3, #4]
  1154b4:	e50b3010 	str	r3, [fp, #-16]
      if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
  1154b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1154bc:	e5933000 	ldr	r3, [r3]
  1154c0:	e5933000 	ldr	r3, [r3]
  1154c4:	e20330f0 	and	r3, r3, #240	; 0xf0
  1154c8:	e3530010 	cmp	r3, #16
  1154cc:	0a000002 	beq	1154dc <lwip_ioctl+0x150>
        p = ((struct netbuf *)p)->p;
  1154d0:	e51b3010 	ldr	r3, [fp, #-16]
  1154d4:	e5933000 	ldr	r3, [r3]
  1154d8:	e50b3010 	str	r3, [fp, #-16]
      buflen = p->tot_len;
  1154dc:	e51b3010 	ldr	r3, [fp, #-16]
  1154e0:	e1d330b8 	ldrh	r3, [r3, #8]
  1154e4:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
      buflen -= sock->lastoffset;
  1154e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1154ec:	e1d330b8 	ldrh	r3, [r3, #8]
  1154f0:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  1154f4:	e0423003 	sub	r3, r2, r3
  1154f8:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
      *((int*)argp) += buflen;
  1154fc:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  115500:	e5932000 	ldr	r2, [r3]
  115504:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  115508:	e0822003 	add	r2, r2, r3
  11550c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  115510:	e5832000 	str	r2, [r3]
    sock_set_errno(sock, 0);
  115514:	e3a03000 	mov	r3, #0
  115518:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  11551c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  115520:	e6ef2073 	uxtb	r2, r3
  115524:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115528:	e5c32010 	strb	r2, [r3, #16]
  11552c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  115530:	e3530000 	cmp	r3, #0
  115534:	0a000003 	beq	115548 <lwip_ioctl+0x1bc>
  115538:	eb008c05 	bl	138554 <__errno_location>
  11553c:	e1a02000 	mov	r2, r0
  115540:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  115544:	e5823000 	str	r3, [r2]
    return 0;
  115548:	e3a03000 	mov	r3, #0
  11554c:	ea000032 	b	11561c <lwip_ioctl+0x290>
    val = 0;
  115550:	e3a03000 	mov	r3, #0
  115554:	e54b3005 	strb	r3, [fp, #-5]
    if (argp && *(u32_t*)argp) {
  115558:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  11555c:	e3530000 	cmp	r3, #0
  115560:	0a000005 	beq	11557c <lwip_ioctl+0x1f0>
  115564:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  115568:	e5933000 	ldr	r3, [r3]
  11556c:	e3530000 	cmp	r3, #0
  115570:	0a000001 	beq	11557c <lwip_ioctl+0x1f0>
      val = 1;
  115574:	e3a03001 	mov	r3, #1
  115578:	e54b3005 	strb	r3, [fp, #-5]
    netconn_set_nonblocking(sock->conn, val);
  11557c:	e55b3005 	ldrb	r3, [fp, #-5]
  115580:	e3530000 	cmp	r3, #0
  115584:	0a000008 	beq	1155ac <lwip_ioctl+0x220>
  115588:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11558c:	e5933000 	ldr	r3, [r3]
  115590:	e5d32030 	ldrb	r2, [r3, #48]	; 0x30
  115594:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115598:	e5933000 	ldr	r3, [r3]
  11559c:	e3822002 	orr	r2, r2, #2
  1155a0:	e6ef2072 	uxtb	r2, r2
  1155a4:	e5c32030 	strb	r2, [r3, #48]	; 0x30
  1155a8:	ea000007 	b	1155cc <lwip_ioctl+0x240>
  1155ac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1155b0:	e5933000 	ldr	r3, [r3]
  1155b4:	e5d32030 	ldrb	r2, [r3, #48]	; 0x30
  1155b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1155bc:	e5933000 	ldr	r3, [r3]
  1155c0:	e3c22002 	bic	r2, r2, #2
  1155c4:	e6ef2072 	uxtb	r2, r2
  1155c8:	e5c32030 	strb	r2, [r3, #48]	; 0x30
    sock_set_errno(sock, 0);
  1155cc:	e3a03000 	mov	r3, #0
  1155d0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  1155d4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1155d8:	e6ef2073 	uxtb	r2, r3
  1155dc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1155e0:	e5c32010 	strb	r2, [r3, #16]
  1155e4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1155e8:	e3530000 	cmp	r3, #0
  1155ec:	0a000003 	beq	115600 <lwip_ioctl+0x274>
  1155f0:	eb008bd7 	bl	138554 <__errno_location>
  1155f4:	e1a02000 	mov	r2, r0
  1155f8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1155fc:	e5823000 	str	r3, [r2]
    return 0;
  115600:	e3a03000 	mov	r3, #0
  115604:	ea000004 	b	11561c <lwip_ioctl+0x290>
  sock_set_errno(sock, ENOSYS); /* not yet implemented */
  115608:	eb008bd1 	bl	138554 <__errno_location>
  11560c:	e1a02000 	mov	r2, r0
  115610:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  115614:	e5823000 	str	r3, [r2]
  return -1;
  115618:	e3e03000 	mvn	r3, #0
}
  11561c:	e1a00003 	mov	r0, r3
  115620:	e24bd004 	sub	sp, fp, #4
  115624:	e8bd8800 	pop	{fp, pc}

00115628 <lwip_fcntl>:
 * Currently only the commands F_GETFL and F_SETFL are implemented.
 * Only the flag O_NONBLOCK is implemented.
 */
int
lwip_fcntl(int s, int cmd, int val)
{
  115628:	e92d4800 	push	{fp, lr}
  11562c:	e28db004 	add	fp, sp, #4
  115630:	e24dd028 	sub	sp, sp, #40	; 0x28
  115634:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  115638:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  11563c:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  struct lwip_sock *sock = get_socket(s);
  115640:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  115644:	ebffed5c 	bl	110bbc <get_socket>
  115648:	e50b000c 	str	r0, [fp, #-12]
  int ret = -1;
  11564c:	e3e03000 	mvn	r3, #0
  115650:	e50b3008 	str	r3, [fp, #-8]

  if (!sock) {
  115654:	e51b300c 	ldr	r3, [fp, #-12]
  115658:	e3530000 	cmp	r3, #0
  11565c:	1a000001 	bne	115668 <lwip_fcntl+0x40>
    return -1;
  115660:	e3e03000 	mvn	r3, #0
  115664:	ea000064 	b	1157fc <lwip_fcntl+0x1d4>
  }

  switch (cmd) {
  115668:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11566c:	e3530003 	cmp	r3, #3
  115670:	0a000002 	beq	115680 <lwip_fcntl+0x58>
  115674:	e3530004 	cmp	r3, #4
  115678:	0a000014 	beq	1156d0 <lwip_fcntl+0xa8>
  11567c:	ea00004a 	b	1157ac <lwip_fcntl+0x184>
  case F_GETFL:
    ret = netconn_is_nonblocking(sock->conn) ? O_NONBLOCK : 0;
  115680:	e51b300c 	ldr	r3, [fp, #-12]
  115684:	e5933000 	ldr	r3, [r3]
  115688:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  11568c:	e1a03503 	lsl	r3, r3, #10
  115690:	e2033b02 	and	r3, r3, #2048	; 0x800
  115694:	e50b3008 	str	r3, [fp, #-8]
    sock_set_errno(sock, 0);
  115698:	e3a03000 	mov	r3, #0
  11569c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  1156a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1156a4:	e6ef2073 	uxtb	r2, r3
  1156a8:	e51b300c 	ldr	r3, [fp, #-12]
  1156ac:	e5c32010 	strb	r2, [r3, #16]
  1156b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1156b4:	e3530000 	cmp	r3, #0
  1156b8:	0a000049 	beq	1157e4 <lwip_fcntl+0x1bc>
  1156bc:	eb008ba4 	bl	138554 <__errno_location>
  1156c0:	e1a02000 	mov	r2, r0
  1156c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1156c8:	e5823000 	str	r3, [r2]
    break;
  1156cc:	ea000044 	b	1157e4 <lwip_fcntl+0x1bc>
  case F_SETFL:
    if ((val & ~O_NONBLOCK) == 0) {
  1156d0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1156d4:	e3c33b02 	bic	r3, r3, #2048	; 0x800
  1156d8:	e3530000 	cmp	r3, #0
  1156dc:	1a000024 	bne	115774 <lwip_fcntl+0x14c>
      /* only O_NONBLOCK, all other bits are zero */
      netconn_set_nonblocking(sock->conn, val & O_NONBLOCK);
  1156e0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1156e4:	e2033b02 	and	r3, r3, #2048	; 0x800
  1156e8:	e3530000 	cmp	r3, #0
  1156ec:	0a000008 	beq	115714 <lwip_fcntl+0xec>
  1156f0:	e51b300c 	ldr	r3, [fp, #-12]
  1156f4:	e5933000 	ldr	r3, [r3]
  1156f8:	e5d32030 	ldrb	r2, [r3, #48]	; 0x30
  1156fc:	e51b300c 	ldr	r3, [fp, #-12]
  115700:	e5933000 	ldr	r3, [r3]
  115704:	e3822002 	orr	r2, r2, #2
  115708:	e6ef2072 	uxtb	r2, r2
  11570c:	e5c32030 	strb	r2, [r3, #48]	; 0x30
  115710:	ea000007 	b	115734 <lwip_fcntl+0x10c>
  115714:	e51b300c 	ldr	r3, [fp, #-12]
  115718:	e5933000 	ldr	r3, [r3]
  11571c:	e5d32030 	ldrb	r2, [r3, #48]	; 0x30
  115720:	e51b300c 	ldr	r3, [fp, #-12]
  115724:	e5933000 	ldr	r3, [r3]
  115728:	e3c22002 	bic	r2, r2, #2
  11572c:	e6ef2072 	uxtb	r2, r2
  115730:	e5c32030 	strb	r2, [r3, #48]	; 0x30
      ret = 0;
  115734:	e3a03000 	mov	r3, #0
  115738:	e50b3008 	str	r3, [fp, #-8]
      sock_set_errno(sock, 0);
  11573c:	e3a03000 	mov	r3, #0
  115740:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  115744:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115748:	e6ef2073 	uxtb	r2, r3
  11574c:	e51b300c 	ldr	r3, [fp, #-12]
  115750:	e5c32010 	strb	r2, [r3, #16]
  115754:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115758:	e3530000 	cmp	r3, #0
  11575c:	0a000022 	beq	1157ec <lwip_fcntl+0x1c4>
  115760:	eb008b7b 	bl	138554 <__errno_location>
  115764:	e1a02000 	mov	r2, r0
  115768:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11576c:	e5823000 	str	r3, [r2]
    } else {
      sock_set_errno(sock, ENOSYS); /* not yet implemented */
    }
    break;
  115770:	ea00001d 	b	1157ec <lwip_fcntl+0x1c4>
      sock_set_errno(sock, ENOSYS); /* not yet implemented */
  115774:	e3a03026 	mov	r3, #38	; 0x26
  115778:	e50b3010 	str	r3, [fp, #-16]
  11577c:	e51b3010 	ldr	r3, [fp, #-16]
  115780:	e6ef2073 	uxtb	r2, r3
  115784:	e51b300c 	ldr	r3, [fp, #-12]
  115788:	e5c32010 	strb	r2, [r3, #16]
  11578c:	e51b3010 	ldr	r3, [fp, #-16]
  115790:	e3530000 	cmp	r3, #0
  115794:	0a000014 	beq	1157ec <lwip_fcntl+0x1c4>
  115798:	eb008b6d 	bl	138554 <__errno_location>
  11579c:	e1a02000 	mov	r2, r0
  1157a0:	e51b3010 	ldr	r3, [fp, #-16]
  1157a4:	e5823000 	str	r3, [r2]
    break;
  1157a8:	ea00000f 	b	1157ec <lwip_fcntl+0x1c4>
  default:
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_fcntl(%d, UNIMPL: %d, %d)\n", s, cmd, val));
    sock_set_errno(sock, ENOSYS); /* not yet implemented */
  1157ac:	e3a03026 	mov	r3, #38	; 0x26
  1157b0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  1157b4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1157b8:	e6ef2073 	uxtb	r2, r3
  1157bc:	e51b300c 	ldr	r3, [fp, #-12]
  1157c0:	e5c32010 	strb	r2, [r3, #16]
  1157c4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1157c8:	e3530000 	cmp	r3, #0
  1157cc:	0a000008 	beq	1157f4 <lwip_fcntl+0x1cc>
  1157d0:	eb008b5f 	bl	138554 <__errno_location>
  1157d4:	e1a02000 	mov	r2, r0
  1157d8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1157dc:	e5823000 	str	r3, [r2]
    break;
  1157e0:	ea000003 	b	1157f4 <lwip_fcntl+0x1cc>
    break;
  1157e4:	e320f000 	nop	{0}
  1157e8:	ea000002 	b	1157f8 <lwip_fcntl+0x1d0>
    break;
  1157ec:	e320f000 	nop	{0}
  1157f0:	ea000000 	b	1157f8 <lwip_fcntl+0x1d0>
    break;
  1157f4:	e320f000 	nop	{0}
  }
  return ret;
  1157f8:	e51b3008 	ldr	r3, [fp, #-8]
}
  1157fc:	e1a00003 	mov	r0, r3
  115800:	e24bd004 	sub	sp, fp, #4
  115804:	e8bd8800 	pop	{fp, pc}

00115808 <lwip_socket_register_membership>:
 *
 * @return 1 on success, 0 on failure
 */
static int
lwip_socket_register_membership(int s, const ip4_addr_t *if_addr, const ip4_addr_t *multi_addr)
{
  115808:	e92d4800 	push	{fp, lr}
  11580c:	e28db004 	add	fp, sp, #4
  115810:	e24dd018 	sub	sp, sp, #24
  115814:	e50b0010 	str	r0, [fp, #-16]
  115818:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  11581c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  struct lwip_sock *sock = get_socket(s);
  115820:	e51b0010 	ldr	r0, [fp, #-16]
  115824:	ebffece4 	bl	110bbc <get_socket>
  115828:	e50b000c 	str	r0, [fp, #-12]
  int i;

  if (!sock) {
  11582c:	e51b300c 	ldr	r3, [fp, #-12]
  115830:	e3530000 	cmp	r3, #0
  115834:	1a000001 	bne	115840 <lwip_socket_register_membership+0x38>
    return 0;
  115838:	e3a03000 	mov	r3, #0
  11583c:	ea000030 	b	115904 <lwip_socket_register_membership+0xfc>
  }

  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
  115840:	e3a03000 	mov	r3, #0
  115844:	e50b3008 	str	r3, [fp, #-8]
  115848:	ea000029 	b	1158f4 <lwip_socket_register_membership+0xec>
    if (socket_ipv4_multicast_memberships[i].sock == NULL) {
  11584c:	e30e3d04 	movw	r3, #60676	; 0xed04
  115850:	e3403014 	movt	r3, #20
  115854:	e51b2008 	ldr	r2, [fp, #-8]
  115858:	e3a0100c 	mov	r1, #12
  11585c:	e0020291 	mul	r2, r1, r2
  115860:	e0833002 	add	r3, r3, r2
  115864:	e5933000 	ldr	r3, [r3]
  115868:	e3530000 	cmp	r3, #0
  11586c:	1a00001d 	bne	1158e8 <lwip_socket_register_membership+0xe0>
      socket_ipv4_multicast_memberships[i].sock = sock;
  115870:	e30e3d04 	movw	r3, #60676	; 0xed04
  115874:	e3403014 	movt	r3, #20
  115878:	e51b2008 	ldr	r2, [fp, #-8]
  11587c:	e3a0100c 	mov	r1, #12
  115880:	e0020291 	mul	r2, r1, r2
  115884:	e0833002 	add	r3, r3, r2
  115888:	e51b200c 	ldr	r2, [fp, #-12]
  11588c:	e5832000 	str	r2, [r3]
      ip4_addr_copy(socket_ipv4_multicast_memberships[i].if_addr, *if_addr);
  115890:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115894:	e5932000 	ldr	r2, [r3]
  115898:	e30e3d04 	movw	r3, #60676	; 0xed04
  11589c:	e3403014 	movt	r3, #20
  1158a0:	e51b1008 	ldr	r1, [fp, #-8]
  1158a4:	e3a0000c 	mov	r0, #12
  1158a8:	e0010190 	mul	r1, r0, r1
  1158ac:	e0833001 	add	r3, r3, r1
  1158b0:	e2833004 	add	r3, r3, #4
  1158b4:	e5832000 	str	r2, [r3]
      ip4_addr_copy(socket_ipv4_multicast_memberships[i].multi_addr, *multi_addr);
  1158b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1158bc:	e5932000 	ldr	r2, [r3]
  1158c0:	e30e3d04 	movw	r3, #60676	; 0xed04
  1158c4:	e3403014 	movt	r3, #20
  1158c8:	e51b1008 	ldr	r1, [fp, #-8]
  1158cc:	e3a0000c 	mov	r0, #12
  1158d0:	e0010190 	mul	r1, r0, r1
  1158d4:	e0833001 	add	r3, r3, r1
  1158d8:	e2833008 	add	r3, r3, #8
  1158dc:	e5832000 	str	r2, [r3]
      return 1;
  1158e0:	e3a03001 	mov	r3, #1
  1158e4:	ea000006 	b	115904 <lwip_socket_register_membership+0xfc>
  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
  1158e8:	e51b3008 	ldr	r3, [fp, #-8]
  1158ec:	e2833001 	add	r3, r3, #1
  1158f0:	e50b3008 	str	r3, [fp, #-8]
  1158f4:	e51b3008 	ldr	r3, [fp, #-8]
  1158f8:	e3530007 	cmp	r3, #7
  1158fc:	daffffd2 	ble	11584c <lwip_socket_register_membership+0x44>
    }
  }
  return 0;
  115900:	e3a03000 	mov	r3, #0
}
  115904:	e1a00003 	mov	r0, r3
  115908:	e24bd004 	sub	sp, fp, #4
  11590c:	e8bd8800 	pop	{fp, pc}

00115910 <lwip_socket_unregister_membership>:
 *
 * ATTENTION: this function is called from tcpip_thread (or under CORE_LOCK).
 */
static void
lwip_socket_unregister_membership(int s, const ip4_addr_t *if_addr, const ip4_addr_t *multi_addr)
{
  115910:	e92d4800 	push	{fp, lr}
  115914:	e28db004 	add	fp, sp, #4
  115918:	e24dd018 	sub	sp, sp, #24
  11591c:	e50b0010 	str	r0, [fp, #-16]
  115920:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  115924:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  struct lwip_sock *sock = get_socket(s);
  115928:	e51b0010 	ldr	r0, [fp, #-16]
  11592c:	ebffeca2 	bl	110bbc <get_socket>
  115930:	e50b000c 	str	r0, [fp, #-12]
  int i;

  if (!sock) {
  115934:	e51b300c 	ldr	r3, [fp, #-12]
  115938:	e3530000 	cmp	r3, #0
  11593c:	0a000046 	beq	115a5c <lwip_socket_unregister_membership+0x14c>
    return;
  }

  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
  115940:	e3a03000 	mov	r3, #0
  115944:	e50b3008 	str	r3, [fp, #-8]
  115948:	ea00003f 	b	115a4c <lwip_socket_unregister_membership+0x13c>
    if ((socket_ipv4_multicast_memberships[i].sock == sock) &&
  11594c:	e30e3d04 	movw	r3, #60676	; 0xed04
  115950:	e3403014 	movt	r3, #20
  115954:	e51b2008 	ldr	r2, [fp, #-8]
  115958:	e3a0100c 	mov	r1, #12
  11595c:	e0020291 	mul	r2, r1, r2
  115960:	e0833002 	add	r3, r3, r2
  115964:	e5933000 	ldr	r3, [r3]
  115968:	e51b200c 	ldr	r2, [fp, #-12]
  11596c:	e1520003 	cmp	r2, r3
  115970:	1a000032 	bne	115a40 <lwip_socket_unregister_membership+0x130>
        ip4_addr_cmp(&socket_ipv4_multicast_memberships[i].if_addr, if_addr) &&
  115974:	e30e3d04 	movw	r3, #60676	; 0xed04
  115978:	e3403014 	movt	r3, #20
  11597c:	e51b2008 	ldr	r2, [fp, #-8]
  115980:	e3a0100c 	mov	r1, #12
  115984:	e0020291 	mul	r2, r1, r2
  115988:	e0833002 	add	r3, r3, r2
  11598c:	e2833004 	add	r3, r3, #4
  115990:	e5932000 	ldr	r2, [r3]
  115994:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115998:	e5933000 	ldr	r3, [r3]
    if ((socket_ipv4_multicast_memberships[i].sock == sock) &&
  11599c:	e1520003 	cmp	r2, r3
  1159a0:	1a000026 	bne	115a40 <lwip_socket_unregister_membership+0x130>
        ip4_addr_cmp(&socket_ipv4_multicast_memberships[i].multi_addr, multi_addr)) {
  1159a4:	e30e3d04 	movw	r3, #60676	; 0xed04
  1159a8:	e3403014 	movt	r3, #20
  1159ac:	e51b2008 	ldr	r2, [fp, #-8]
  1159b0:	e3a0100c 	mov	r1, #12
  1159b4:	e0020291 	mul	r2, r1, r2
  1159b8:	e0833002 	add	r3, r3, r2
  1159bc:	e2833008 	add	r3, r3, #8
  1159c0:	e5932000 	ldr	r2, [r3]
  1159c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1159c8:	e5933000 	ldr	r3, [r3]
        ip4_addr_cmp(&socket_ipv4_multicast_memberships[i].if_addr, if_addr) &&
  1159cc:	e1520003 	cmp	r2, r3
  1159d0:	1a00001a 	bne	115a40 <lwip_socket_unregister_membership+0x130>
      socket_ipv4_multicast_memberships[i].sock = NULL;
  1159d4:	e30e3d04 	movw	r3, #60676	; 0xed04
  1159d8:	e3403014 	movt	r3, #20
  1159dc:	e51b2008 	ldr	r2, [fp, #-8]
  1159e0:	e3a0100c 	mov	r1, #12
  1159e4:	e0020291 	mul	r2, r1, r2
  1159e8:	e0833002 	add	r3, r3, r2
  1159ec:	e3a02000 	mov	r2, #0
  1159f0:	e5832000 	str	r2, [r3]
      ip4_addr_set_zero(&socket_ipv4_multicast_memberships[i].if_addr);
  1159f4:	e30e3d04 	movw	r3, #60676	; 0xed04
  1159f8:	e3403014 	movt	r3, #20
  1159fc:	e51b2008 	ldr	r2, [fp, #-8]
  115a00:	e3a0100c 	mov	r1, #12
  115a04:	e0020291 	mul	r2, r1, r2
  115a08:	e0833002 	add	r3, r3, r2
  115a0c:	e2833004 	add	r3, r3, #4
  115a10:	e3a02000 	mov	r2, #0
  115a14:	e5832000 	str	r2, [r3]
      ip4_addr_set_zero(&socket_ipv4_multicast_memberships[i].multi_addr);
  115a18:	e30e3d04 	movw	r3, #60676	; 0xed04
  115a1c:	e3403014 	movt	r3, #20
  115a20:	e51b2008 	ldr	r2, [fp, #-8]
  115a24:	e3a0100c 	mov	r1, #12
  115a28:	e0020291 	mul	r2, r1, r2
  115a2c:	e0833002 	add	r3, r3, r2
  115a30:	e2833008 	add	r3, r3, #8
  115a34:	e3a02000 	mov	r2, #0
  115a38:	e5832000 	str	r2, [r3]
      return;
  115a3c:	ea000007 	b	115a60 <lwip_socket_unregister_membership+0x150>
  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
  115a40:	e51b3008 	ldr	r3, [fp, #-8]
  115a44:	e2833001 	add	r3, r3, #1
  115a48:	e50b3008 	str	r3, [fp, #-8]
  115a4c:	e51b3008 	ldr	r3, [fp, #-8]
  115a50:	e3530007 	cmp	r3, #7
  115a54:	daffffbc 	ble	11594c <lwip_socket_unregister_membership+0x3c>
  115a58:	ea000000 	b	115a60 <lwip_socket_unregister_membership+0x150>
    return;
  115a5c:	e320f000 	nop	{0}
    }
  }
}
  115a60:	e24bd004 	sub	sp, fp, #4
  115a64:	e8bd8800 	pop	{fp, pc}

00115a68 <lwip_socket_drop_registered_memberships>:
 *
 * ATTENTION: this function is NOT called from tcpip_thread (or under CORE_LOCK).
 */
static void
lwip_socket_drop_registered_memberships(int s)
{
  115a68:	e92d4800 	push	{fp, lr}
  115a6c:	e28db004 	add	fp, sp, #4
  115a70:	e24dd018 	sub	sp, sp, #24
  115a74:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct lwip_sock *sock = get_socket(s);
  115a78:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  115a7c:	ebffec4e 	bl	110bbc <get_socket>
  115a80:	e50b000c 	str	r0, [fp, #-12]
  int i;

  if (!sock) {
  115a84:	e51b300c 	ldr	r3, [fp, #-12]
  115a88:	e3530000 	cmp	r3, #0
  115a8c:	0a000045 	beq	115ba8 <lwip_socket_drop_registered_memberships+0x140>
    return;
  }

  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
  115a90:	e3a03000 	mov	r3, #0
  115a94:	e50b3008 	str	r3, [fp, #-8]
  115a98:	ea00003e 	b	115b98 <lwip_socket_drop_registered_memberships+0x130>
    if (socket_ipv4_multicast_memberships[i].sock == sock) {
  115a9c:	e30e3d04 	movw	r3, #60676	; 0xed04
  115aa0:	e3403014 	movt	r3, #20
  115aa4:	e51b2008 	ldr	r2, [fp, #-8]
  115aa8:	e3a0100c 	mov	r1, #12
  115aac:	e0020291 	mul	r2, r1, r2
  115ab0:	e0833002 	add	r3, r3, r2
  115ab4:	e5933000 	ldr	r3, [r3]
  115ab8:	e51b200c 	ldr	r2, [fp, #-12]
  115abc:	e1520003 	cmp	r2, r3
  115ac0:	1a000031 	bne	115b8c <lwip_socket_drop_registered_memberships+0x124>
      ip_addr_t multi_addr, if_addr;
      ip_addr_copy_from_ip4(multi_addr, socket_ipv4_multicast_memberships[i].multi_addr);
  115ac4:	e30e3d04 	movw	r3, #60676	; 0xed04
  115ac8:	e3403014 	movt	r3, #20
  115acc:	e51b2008 	ldr	r2, [fp, #-8]
  115ad0:	e3a0100c 	mov	r1, #12
  115ad4:	e0020291 	mul	r2, r1, r2
  115ad8:	e0833002 	add	r3, r3, r2
  115adc:	e2833008 	add	r3, r3, #8
  115ae0:	e5933000 	ldr	r3, [r3]
  115ae4:	e50b3010 	str	r3, [fp, #-16]
      ip_addr_copy_from_ip4(if_addr, socket_ipv4_multicast_memberships[i].if_addr);
  115ae8:	e30e3d04 	movw	r3, #60676	; 0xed04
  115aec:	e3403014 	movt	r3, #20
  115af0:	e51b2008 	ldr	r2, [fp, #-8]
  115af4:	e3a0100c 	mov	r1, #12
  115af8:	e0020291 	mul	r2, r1, r2
  115afc:	e0833002 	add	r3, r3, r2
  115b00:	e2833004 	add	r3, r3, #4
  115b04:	e5933000 	ldr	r3, [r3]
  115b08:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      socket_ipv4_multicast_memberships[i].sock = NULL;
  115b0c:	e30e3d04 	movw	r3, #60676	; 0xed04
  115b10:	e3403014 	movt	r3, #20
  115b14:	e51b2008 	ldr	r2, [fp, #-8]
  115b18:	e3a0100c 	mov	r1, #12
  115b1c:	e0020291 	mul	r2, r1, r2
  115b20:	e0833002 	add	r3, r3, r2
  115b24:	e3a02000 	mov	r2, #0
  115b28:	e5832000 	str	r2, [r3]
      ip4_addr_set_zero(&socket_ipv4_multicast_memberships[i].if_addr);
  115b2c:	e30e3d04 	movw	r3, #60676	; 0xed04
  115b30:	e3403014 	movt	r3, #20
  115b34:	e51b2008 	ldr	r2, [fp, #-8]
  115b38:	e3a0100c 	mov	r1, #12
  115b3c:	e0020291 	mul	r2, r1, r2
  115b40:	e0833002 	add	r3, r3, r2
  115b44:	e2833004 	add	r3, r3, #4
  115b48:	e3a02000 	mov	r2, #0
  115b4c:	e5832000 	str	r2, [r3]
      ip4_addr_set_zero(&socket_ipv4_multicast_memberships[i].multi_addr);
  115b50:	e30e3d04 	movw	r3, #60676	; 0xed04
  115b54:	e3403014 	movt	r3, #20
  115b58:	e51b2008 	ldr	r2, [fp, #-8]
  115b5c:	e3a0100c 	mov	r1, #12
  115b60:	e0020291 	mul	r2, r1, r2
  115b64:	e0833002 	add	r3, r3, r2
  115b68:	e2833008 	add	r3, r3, #8
  115b6c:	e3a02000 	mov	r2, #0
  115b70:	e5832000 	str	r2, [r3]

      netconn_join_leave_group(sock->conn, &multi_addr, &if_addr, NETCONN_LEAVE);
  115b74:	e51b300c 	ldr	r3, [fp, #-12]
  115b78:	e5930000 	ldr	r0, [r3]
  115b7c:	e24b2014 	sub	r2, fp, #20
  115b80:	e24b1010 	sub	r1, fp, #16
  115b84:	e3a03001 	mov	r3, #1
  115b88:	ebffd8dc 	bl	10bf00 <netconn_join_leave_group>
  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
  115b8c:	e51b3008 	ldr	r3, [fp, #-8]
  115b90:	e2833001 	add	r3, r3, #1
  115b94:	e50b3008 	str	r3, [fp, #-8]
  115b98:	e51b3008 	ldr	r3, [fp, #-8]
  115b9c:	e3530007 	cmp	r3, #7
  115ba0:	daffffbd 	ble	115a9c <lwip_socket_drop_registered_memberships+0x34>
  115ba4:	ea000000 	b	115bac <lwip_socket_drop_registered_memberships+0x144>
    return;
  115ba8:	e320f000 	nop	{0}
    }
  }
}
  115bac:	e24bd004 	sub	sp, fp, #4
  115bb0:	e8bd8800 	pop	{fp, pc}

00115bb4 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
  115bb4:	e92d4800 	push	{fp, lr}
  115bb8:	e28db004 	add	fp, sp, #4
  115bbc:	e24dd010 	sub	sp, sp, #16
  115bc0:	e50b0010 	str	r0, [fp, #-16]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
  115bc4:	e30d3c1c 	movw	r3, #56348	; 0xdc1c
  115bc8:	e3403014 	movt	r3, #20
  115bcc:	e5933000 	ldr	r3, [r3]
  115bd0:	e3530000 	cmp	r3, #0
  115bd4:	0a000007 	beq	115bf8 <tcpip_thread+0x44>
    tcpip_init_done(tcpip_init_done_arg);
  115bd8:	e30d3c1c 	movw	r3, #56348	; 0xdc1c
  115bdc:	e3403014 	movt	r3, #20
  115be0:	e5932000 	ldr	r2, [r3]
  115be4:	e30d3c20 	movw	r3, #56352	; 0xdc20
  115be8:	e3403014 	movt	r3, #20
  115bec:	e5933000 	ldr	r3, [r3]
  115bf0:	e1a00003 	mov	r0, r3
  115bf4:	e12fff32 	blx	r2
  }

  LOCK_TCPIP_CORE();
  115bf8:	e30e0d64 	movw	r0, #60772	; 0xed64
  115bfc:	e3400014 	movt	r0, #20
  115c00:	ebffd1e2 	bl	10a390 <sys_mutex_lock>
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
  115c04:	e30e0d64 	movw	r0, #60772	; 0xed64
  115c08:	e3400014 	movt	r0, #20
  115c0c:	ebffd1eb 	bl	10a3c0 <sys_mutex_unlock>
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
  115c10:	e24b3008 	sub	r3, fp, #8
  115c14:	e1a01003 	mov	r1, r3
  115c18:	e30d0c24 	movw	r0, #56356	; 0xdc24
  115c1c:	e3400014 	movt	r0, #20
  115c20:	eb004661 	bl	1275ac <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
  115c24:	e30e0d64 	movw	r0, #60772	; 0xed64
  115c28:	e3400014 	movt	r0, #20
  115c2c:	ebffd1d7 	bl	10a390 <sys_mutex_lock>
    if (msg == NULL) {
  115c30:	e51b3008 	ldr	r3, [fp, #-8]
  115c34:	e3530000 	cmp	r3, #0
  115c38:	1a000007 	bne	115c5c <tcpip_thread+0xa8>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
  115c3c:	e30604c4 	movw	r0, #25796	; 0x64c4
  115c40:	e3400014 	movt	r0, #20
  115c44:	ebffb532 	bl	103114 <rt_kprintf>
  115c48:	e3a01069 	mov	r1, #105	; 0x69
  115c4c:	e30604e4 	movw	r0, #25828	; 0x64e4
  115c50:	e3400014 	movt	r0, #20
  115c54:	ebffd3ae 	bl	10ab14 <sys_arch_assert>
      continue;
  115c58:	ea00002e 	b	115d18 <tcpip_thread+0x164>
    }
    switch (msg->type) {
  115c5c:	e51b3008 	ldr	r3, [fp, #-8]
  115c60:	e5933000 	ldr	r3, [r3]
  115c64:	e3530003 	cmp	r3, #3
  115c68:	0a000010 	beq	115cb0 <tcpip_thread+0xfc>
  115c6c:	e3530004 	cmp	r3, #4
  115c70:	0a000019 	beq	115cdc <tcpip_thread+0x128>
  115c74:	e3530002 	cmp	r3, #2
  115c78:	1a00001e 	bne	115cf8 <tcpip_thread+0x144>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
  115c7c:	e51b3008 	ldr	r3, [fp, #-8]
  115c80:	e593300c 	ldr	r3, [r3, #12]
  115c84:	e51b2008 	ldr	r2, [fp, #-8]
  115c88:	e5920004 	ldr	r0, [r2, #4]
  115c8c:	e51b2008 	ldr	r2, [fp, #-8]
  115c90:	e5922008 	ldr	r2, [r2, #8]
  115c94:	e1a01002 	mov	r1, r2
  115c98:	e12fff33 	blx	r3
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
  115c9c:	e51b3008 	ldr	r3, [fp, #-8]
  115ca0:	e1a01003 	mov	r1, r3
  115ca4:	e3a0000a 	mov	r0, #10
  115ca8:	eb000c99 	bl	118f14 <memp_free>
      break;
  115cac:	ea000019 	b	115d18 <tcpip_thread+0x164>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
  115cb0:	e51b3008 	ldr	r3, [fp, #-8]
  115cb4:	e5933004 	ldr	r3, [r3, #4]
  115cb8:	e51b2008 	ldr	r2, [fp, #-8]
  115cbc:	e5922008 	ldr	r2, [r2, #8]
  115cc0:	e1a00002 	mov	r0, r2
  115cc4:	e12fff33 	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
  115cc8:	e51b3008 	ldr	r3, [fp, #-8]
  115ccc:	e1a01003 	mov	r1, r3
  115cd0:	e3a00009 	mov	r0, #9
  115cd4:	eb000c8e 	bl	118f14 <memp_free>
      break;
  115cd8:	ea00000e 	b	115d18 <tcpip_thread+0x164>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
  115cdc:	e51b3008 	ldr	r3, [fp, #-8]
  115ce0:	e5933004 	ldr	r3, [r3, #4]
  115ce4:	e51b2008 	ldr	r2, [fp, #-8]
  115ce8:	e5922008 	ldr	r2, [r2, #8]
  115cec:	e1a00002 	mov	r0, r2
  115cf0:	e12fff33 	blx	r3
      break;
  115cf4:	ea000007 	b	115d18 <tcpip_thread+0x164>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
  115cf8:	e30604c4 	movw	r0, #25796	; 0x64c4
  115cfc:	e3400014 	movt	r0, #20
  115d00:	ebffb503 	bl	103114 <rt_kprintf>
  115d04:	e3a0109b 	mov	r1, #155	; 0x9b
  115d08:	e30604e4 	movw	r0, #25828	; 0x64e4
  115d0c:	e3400014 	movt	r0, #20
  115d10:	ebffd37f 	bl	10ab14 <sys_arch_assert>
      break;
  115d14:	e320f000 	nop	{0}
    UNLOCK_TCPIP_CORE();
  115d18:	eaffffb9 	b	115c04 <tcpip_thread+0x50>

00115d1c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
  115d1c:	e92d4800 	push	{fp, lr}
  115d20:	e28db004 	add	fp, sp, #4
  115d24:	e24dd018 	sub	sp, sp, #24
  115d28:	e50b0010 	str	r0, [fp, #-16]
  115d2c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  115d30:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
  115d34:	e30d0c24 	movw	r0, #56356	; 0xdc24
  115d38:	e3400014 	movt	r0, #20
  115d3c:	ebffd32b 	bl	10a9f0 <sys_mbox_valid>
  115d40:	e1a03000 	mov	r3, r0
  115d44:	e3530000 	cmp	r3, #0
  115d48:	1a000006 	bne	115d68 <tcpip_inpkt+0x4c>
  115d4c:	e3060510 	movw	r0, #25872	; 0x6510
  115d50:	e3400014 	movt	r0, #20
  115d54:	ebffb4ee 	bl	103114 <rt_kprintf>
  115d58:	e3a010b5 	mov	r1, #181	; 0xb5
  115d5c:	e30604e4 	movw	r0, #25828	; 0x64e4
  115d60:	e3400014 	movt	r0, #20
  115d64:	ebffd36a 	bl	10ab14 <sys_arch_assert>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
  115d68:	e3a020b7 	mov	r2, #183	; 0xb7
  115d6c:	e30614e4 	movw	r1, #25828	; 0x64e4
  115d70:	e3401014 	movt	r1, #20
  115d74:	e3a0000a 	mov	r0, #10
  115d78:	eb000bfd 	bl	118d74 <memp_malloc_fn>
  115d7c:	e50b0008 	str	r0, [fp, #-8]
  if (msg == NULL) {
  115d80:	e51b3008 	ldr	r3, [fp, #-8]
  115d84:	e3530000 	cmp	r3, #0
  115d88:	1a000001 	bne	115d94 <tcpip_inpkt+0x78>
    return ERR_MEM;
  115d8c:	e3e03000 	mvn	r3, #0
  115d90:	ea000018 	b	115df8 <tcpip_inpkt+0xdc>
  }

  msg->type = TCPIP_MSG_INPKT;
  115d94:	e51b3008 	ldr	r3, [fp, #-8]
  115d98:	e3a02002 	mov	r2, #2
  115d9c:	e5832000 	str	r2, [r3]
  msg->msg.inp.p = p;
  115da0:	e51b3008 	ldr	r3, [fp, #-8]
  115da4:	e51b2010 	ldr	r2, [fp, #-16]
  115da8:	e5832004 	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
  115dac:	e51b3008 	ldr	r3, [fp, #-8]
  115db0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  115db4:	e5832008 	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
  115db8:	e51b3008 	ldr	r3, [fp, #-8]
  115dbc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  115dc0:	e583200c 	str	r2, [r3, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
  115dc4:	e51b1008 	ldr	r1, [fp, #-8]
  115dc8:	e30d0c24 	movw	r0, #56356	; 0xdc24
  115dcc:	e3400014 	movt	r0, #20
  115dd0:	ebffd2a8 	bl	10a878 <sys_mbox_trypost>
  115dd4:	e1a03000 	mov	r3, r0
  115dd8:	e3530000 	cmp	r3, #0
  115ddc:	0a000004 	beq	115df4 <tcpip_inpkt+0xd8>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
  115de0:	e51b1008 	ldr	r1, [fp, #-8]
  115de4:	e3a0000a 	mov	r0, #10
  115de8:	eb000c49 	bl	118f14 <memp_free>
    return ERR_MEM;
  115dec:	e3e03000 	mvn	r3, #0
  115df0:	ea000000 	b	115df8 <tcpip_inpkt+0xdc>
  }
  return ERR_OK;
  115df4:	e3a03000 	mov	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
  115df8:	e1a00003 	mov	r0, r3
  115dfc:	e24bd004 	sub	sp, fp, #4
  115e00:	e8bd8800 	pop	{fp, pc}

00115e04 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
  115e04:	e92d4800 	push	{fp, lr}
  115e08:	e28db004 	add	fp, sp, #4
  115e0c:	e24dd008 	sub	sp, sp, #8
  115e10:	e50b0008 	str	r0, [fp, #-8]
  115e14:	e50b100c 	str	r1, [fp, #-12]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
  115e18:	e51b300c 	ldr	r3, [fp, #-12]
  115e1c:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  115e20:	e2033018 	and	r3, r3, #24
  115e24:	e3530000 	cmp	r3, #0
  115e28:	0a000006 	beq	115e48 <tcpip_input+0x44>
    return tcpip_inpkt(p, inp, ethernet_input);
  115e2c:	e3082898 	movw	r2, #34968	; 0x8898
  115e30:	e3402012 	movt	r2, #18
  115e34:	e51b100c 	ldr	r1, [fp, #-12]
  115e38:	e51b0008 	ldr	r0, [fp, #-8]
  115e3c:	ebffffb6 	bl	115d1c <tcpip_inpkt>
  115e40:	e1a03000 	mov	r3, r0
  115e44:	ea000005 	b	115e60 <tcpip_input+0x5c>
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
  115e48:	e3002fdc 	movw	r2, #4060	; 0xfdc
  115e4c:	e3402013 	movt	r2, #19
  115e50:	e51b100c 	ldr	r1, [fp, #-12]
  115e54:	e51b0008 	ldr	r0, [fp, #-8]
  115e58:	ebffffaf 	bl	115d1c <tcpip_inpkt>
  115e5c:	e1a03000 	mov	r3, r0
}
  115e60:	e1a00003 	mov	r0, r3
  115e64:	e24bd004 	sub	sp, fp, #4
  115e68:	e8bd8800 	pop	{fp, pc}

00115e6c <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
  115e6c:	e92d4800 	push	{fp, lr}
  115e70:	e28db004 	add	fp, sp, #4
  115e74:	e24dd018 	sub	sp, sp, #24
  115e78:	e50b0010 	str	r0, [fp, #-16]
  115e7c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  115e80:	e1a03002 	mov	r3, r2
  115e84:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
  115e88:	e30d0c24 	movw	r0, #56356	; 0xdc24
  115e8c:	e3400014 	movt	r0, #20
  115e90:	ebffd2d6 	bl	10a9f0 <sys_mbox_valid>
  115e94:	e1a03000 	mov	r3, r0
  115e98:	e3530000 	cmp	r3, #0
  115e9c:	1a000006 	bne	115ebc <tcpip_callback_with_block+0x50>
  115ea0:	e3060510 	movw	r0, #25872	; 0x6510
  115ea4:	e3400014 	movt	r0, #20
  115ea8:	ebffb499 	bl	103114 <rt_kprintf>
  115eac:	e3a010ee 	mov	r1, #238	; 0xee
  115eb0:	e30604e4 	movw	r0, #25828	; 0x64e4
  115eb4:	e3400014 	movt	r0, #20
  115eb8:	ebffd315 	bl	10ab14 <sys_arch_assert>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
  115ebc:	e3a020f0 	mov	r2, #240	; 0xf0
  115ec0:	e30614e4 	movw	r1, #25828	; 0x64e4
  115ec4:	e3401014 	movt	r1, #20
  115ec8:	e3a00009 	mov	r0, #9
  115ecc:	eb000ba8 	bl	118d74 <memp_malloc_fn>
  115ed0:	e50b0008 	str	r0, [fp, #-8]
  if (msg == NULL) {
  115ed4:	e51b3008 	ldr	r3, [fp, #-8]
  115ed8:	e3530000 	cmp	r3, #0
  115edc:	1a000001 	bne	115ee8 <tcpip_callback_with_block+0x7c>
    return ERR_MEM;
  115ee0:	e3e03000 	mvn	r3, #0
  115ee4:	ea00001d 	b	115f60 <tcpip_callback_with_block+0xf4>
  }

  msg->type = TCPIP_MSG_CALLBACK;
  115ee8:	e51b3008 	ldr	r3, [fp, #-8]
  115eec:	e3a02003 	mov	r2, #3
  115ef0:	e5832000 	str	r2, [r3]
  msg->msg.cb.function = function;
  115ef4:	e51b3008 	ldr	r3, [fp, #-8]
  115ef8:	e51b2010 	ldr	r2, [fp, #-16]
  115efc:	e5832004 	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
  115f00:	e51b3008 	ldr	r3, [fp, #-8]
  115f04:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  115f08:	e5832008 	str	r2, [r3, #8]
  if (block) {
  115f0c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  115f10:	e3530000 	cmp	r3, #0
  115f14:	0a000004 	beq	115f2c <tcpip_callback_with_block+0xc0>
    sys_mbox_post(&mbox, msg);
  115f18:	e51b1008 	ldr	r1, [fp, #-8]
  115f1c:	e30d0c24 	movw	r0, #56356	; 0xdc24
  115f20:	e3400014 	movt	r0, #20
  115f24:	ebffd248 	bl	10a84c <sys_mbox_post>
  115f28:	ea00000b 	b	115f5c <tcpip_callback_with_block+0xf0>
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
  115f2c:	e51b1008 	ldr	r1, [fp, #-8]
  115f30:	e30d0c24 	movw	r0, #56356	; 0xdc24
  115f34:	e3400014 	movt	r0, #20
  115f38:	ebffd24e 	bl	10a878 <sys_mbox_trypost>
  115f3c:	e1a03000 	mov	r3, r0
  115f40:	e3530000 	cmp	r3, #0
  115f44:	0a000004 	beq	115f5c <tcpip_callback_with_block+0xf0>
      memp_free(MEMP_TCPIP_MSG_API, msg);
  115f48:	e51b1008 	ldr	r1, [fp, #-8]
  115f4c:	e3a00009 	mov	r0, #9
  115f50:	eb000bef 	bl	118f14 <memp_free>
      return ERR_MEM;
  115f54:	e3e03000 	mvn	r3, #0
  115f58:	ea000000 	b	115f60 <tcpip_callback_with_block+0xf4>
    }
  }
  return ERR_OK;
  115f5c:	e3a03000 	mov	r3, #0
}
  115f60:	e1a00003 	mov	r0, r3
  115f64:	e24bd004 	sub	sp, fp, #4
  115f68:	e8bd8800 	pop	{fp, pc}

00115f6c <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t* sem)
{
  115f6c:	e92d4800 	push	{fp, lr}
  115f70:	e28db004 	add	fp, sp, #4
  115f74:	e24dd010 	sub	sp, sp, #16
  115f78:	e50b0008 	str	r0, [fp, #-8]
  115f7c:	e50b100c 	str	r1, [fp, #-12]
  115f80:	e50b2010 	str	r2, [fp, #-16]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
  115f84:	e30e0d64 	movw	r0, #60772	; 0xed64
  115f88:	e3400014 	movt	r0, #20
  115f8c:	ebffd0ff 	bl	10a390 <sys_mutex_lock>
  fn(apimsg);
  115f90:	e51b3008 	ldr	r3, [fp, #-8]
  115f94:	e51b000c 	ldr	r0, [fp, #-12]
  115f98:	e12fff33 	blx	r3
  UNLOCK_TCPIP_CORE();
  115f9c:	e30e0d64 	movw	r0, #60772	; 0xed64
  115fa0:	e3400014 	movt	r0, #20
  115fa4:	ebffd105 	bl	10a3c0 <sys_mutex_unlock>
  return ERR_OK;
  115fa8:	e3a03000 	mov	r3, #0
  sys_mbox_post(&mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
  115fac:	e1a00003 	mov	r0, r3
  115fb0:	e24bd004 	sub	sp, fp, #4
  115fb4:	e8bd8800 	pop	{fp, pc}

00115fb8 <tcpip_api_call>:
 * @param call Call parameters
 * @return Return value from tcpip_api_call_fn
 */
err_t
tcpip_api_call(tcpip_api_call_fn fn, struct tcpip_api_call_data *call)
{
  115fb8:	e92d4800 	push	{fp, lr}
  115fbc:	e28db004 	add	fp, sp, #4
  115fc0:	e24dd010 	sub	sp, sp, #16
  115fc4:	e50b0010 	str	r0, [fp, #-16]
  115fc8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
#if LWIP_TCPIP_CORE_LOCKING
  err_t err;
  LOCK_TCPIP_CORE();
  115fcc:	e30e0d64 	movw	r0, #60772	; 0xed64
  115fd0:	e3400014 	movt	r0, #20
  115fd4:	ebffd0ed 	bl	10a390 <sys_mutex_lock>
  err = fn(call);
  115fd8:	e51b3010 	ldr	r3, [fp, #-16]
  115fdc:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  115fe0:	e12fff33 	blx	r3
  115fe4:	e1a03000 	mov	r3, r0
  115fe8:	e54b3005 	strb	r3, [fp, #-5]
  UNLOCK_TCPIP_CORE();
  115fec:	e30e0d64 	movw	r0, #60772	; 0xed64
  115ff0:	e3400014 	movt	r0, #20
  115ff4:	ebffd0f1 	bl	10a3c0 <sys_mutex_unlock>
  return err;
  115ff8:	e15b30d5 	ldrsb	r3, [fp, #-5]
  sys_sem_free(&call->sem);
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  return call->err;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
  115ffc:	e1a00003 	mov	r0, r3
  116000:	e24bd004 	sub	sp, fp, #4
  116004:	e8bd8800 	pop	{fp, pc}

00116008 <tcpip_callbackmsg_new>:
 * @param ctx parameter passed to function
 * @return a struct pointer to pass to tcpip_trycallback().
 */
struct tcpip_callback_msg*
tcpip_callbackmsg_new(tcpip_callback_fn function, void *ctx)
{
  116008:	e92d4800 	push	{fp, lr}
  11600c:	e28db004 	add	fp, sp, #4
  116010:	e24dd010 	sub	sp, sp, #16
  116014:	e50b0010 	str	r0, [fp, #-16]
  116018:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct tcpip_msg *msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
  11601c:	e30021a1 	movw	r2, #417	; 0x1a1
  116020:	e30614e4 	movw	r1, #25828	; 0x64e4
  116024:	e3401014 	movt	r1, #20
  116028:	e3a00009 	mov	r0, #9
  11602c:	eb000b50 	bl	118d74 <memp_malloc_fn>
  116030:	e50b0008 	str	r0, [fp, #-8]
  if (msg == NULL) {
  116034:	e51b3008 	ldr	r3, [fp, #-8]
  116038:	e3530000 	cmp	r3, #0
  11603c:	1a000001 	bne	116048 <tcpip_callbackmsg_new+0x40>
    return NULL;
  116040:	e3a03000 	mov	r3, #0
  116044:	ea000009 	b	116070 <tcpip_callbackmsg_new+0x68>
  }
  msg->type = TCPIP_MSG_CALLBACK_STATIC;
  116048:	e51b3008 	ldr	r3, [fp, #-8]
  11604c:	e3a02004 	mov	r2, #4
  116050:	e5832000 	str	r2, [r3]
  msg->msg.cb.function = function;
  116054:	e51b3008 	ldr	r3, [fp, #-8]
  116058:	e51b2010 	ldr	r2, [fp, #-16]
  11605c:	e5832004 	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
  116060:	e51b3008 	ldr	r3, [fp, #-8]
  116064:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  116068:	e5832008 	str	r2, [r3, #8]
  return (struct tcpip_callback_msg*)msg;
  11606c:	e51b3008 	ldr	r3, [fp, #-8]
}
  116070:	e1a00003 	mov	r0, r3
  116074:	e24bd004 	sub	sp, fp, #4
  116078:	e8bd8800 	pop	{fp, pc}

0011607c <tcpip_callbackmsg_delete>:
 *
 * @param msg the message to free
 */
void
tcpip_callbackmsg_delete(struct tcpip_callback_msg* msg)
{
  11607c:	e92d4800 	push	{fp, lr}
  116080:	e28db004 	add	fp, sp, #4
  116084:	e24dd008 	sub	sp, sp, #8
  116088:	e50b0008 	str	r0, [fp, #-8]
  memp_free(MEMP_TCPIP_MSG_API, msg);
  11608c:	e51b1008 	ldr	r1, [fp, #-8]
  116090:	e3a00009 	mov	r0, #9
  116094:	eb000b9e 	bl	118f14 <memp_free>
}
  116098:	e320f000 	nop	{0}
  11609c:	e24bd004 	sub	sp, fp, #4
  1160a0:	e8bd8800 	pop	{fp, pc}

001160a4 <tcpip_trycallback>:
 * @param msg pointer to the message to post
 * @return sys_mbox_trypost() return code
 */
err_t
tcpip_trycallback(struct tcpip_callback_msg* msg)
{
  1160a4:	e92d4800 	push	{fp, lr}
  1160a8:	e28db004 	add	fp, sp, #4
  1160ac:	e24dd008 	sub	sp, sp, #8
  1160b0:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
  1160b4:	e30d0c24 	movw	r0, #56356	; 0xdc24
  1160b8:	e3400014 	movt	r0, #20
  1160bc:	ebffd24b 	bl	10a9f0 <sys_mbox_valid>
  1160c0:	e1a03000 	mov	r3, r0
  1160c4:	e3530000 	cmp	r3, #0
  1160c8:	1a000006 	bne	1160e8 <tcpip_trycallback+0x44>
  1160cc:	e3060510 	movw	r0, #25872	; 0x6510
  1160d0:	e3400014 	movt	r0, #20
  1160d4:	ebffb40e 	bl	103114 <rt_kprintf>
  1160d8:	e3a01d07 	mov	r1, #448	; 0x1c0
  1160dc:	e30604e4 	movw	r0, #25828	; 0x64e4
  1160e0:	e3400014 	movt	r0, #20
  1160e4:	ebffd28a 	bl	10ab14 <sys_arch_assert>
  return sys_mbox_trypost(&mbox, msg);
  1160e8:	e51b1008 	ldr	r1, [fp, #-8]
  1160ec:	e30d0c24 	movw	r0, #56356	; 0xdc24
  1160f0:	e3400014 	movt	r0, #20
  1160f4:	ebffd1df 	bl	10a878 <sys_mbox_trypost>
  1160f8:	e1a03000 	mov	r3, r0
}
  1160fc:	e1a00003 	mov	r0, r3
  116100:	e24bd004 	sub	sp, fp, #4
  116104:	e8bd8800 	pop	{fp, pc}

00116108 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
  116108:	e92d4800 	push	{fp, lr}
  11610c:	e28db004 	add	fp, sp, #4
  116110:	e24dd010 	sub	sp, sp, #16
  116114:	e50b0008 	str	r0, [fp, #-8]
  116118:	e50b100c 	str	r1, [fp, #-12]
  lwip_init();
  11611c:	eb0009b8 	bl	118804 <lwip_init>

  tcpip_init_done = initfunc;
  116120:	e30d3c1c 	movw	r3, #56348	; 0xdc1c
  116124:	e3403014 	movt	r3, #20
  116128:	e51b2008 	ldr	r2, [fp, #-8]
  11612c:	e5832000 	str	r2, [r3]
  tcpip_init_done_arg = arg;
  116130:	e30d3c20 	movw	r3, #56352	; 0xdc20
  116134:	e3403014 	movt	r3, #20
  116138:	e51b200c 	ldr	r2, [fp, #-12]
  11613c:	e5832000 	str	r2, [r3]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
  116140:	e3001101 	movw	r1, #257	; 0x101
  116144:	e30d0c24 	movw	r0, #56356	; 0xdc24
  116148:	e3400014 	movt	r0, #20
  11614c:	ebffd124 	bl	10a5e4 <sys_mbox_new>
  116150:	e1a03000 	mov	r3, r0
  116154:	e3530000 	cmp	r3, #0
  116158:	0a000006 	beq	116178 <tcpip_init+0x70>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
  11615c:	e3060520 	movw	r0, #25888	; 0x6520
  116160:	e3400014 	movt	r0, #20
  116164:	ebffb3ea 	bl	103114 <rt_kprintf>
  116168:	e30011d5 	movw	r1, #469	; 0x1d5
  11616c:	e30604e4 	movw	r0, #25828	; 0x64e4
  116170:	e3400014 	movt	r0, #20
  116174:	ebffd266 	bl	10ab14 <sys_arch_assert>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
  116178:	e30e0d64 	movw	r0, #60772	; 0xed64
  11617c:	e3400014 	movt	r0, #20
  116180:	ebffd05a 	bl	10a2f0 <sys_mutex_new>
  116184:	e1a03000 	mov	r3, r0
  116188:	e3530000 	cmp	r3, #0
  11618c:	0a000006 	beq	1161ac <tcpip_init+0xa4>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
  116190:	e3060544 	movw	r0, #25924	; 0x6544
  116194:	e3400014 	movt	r0, #20
  116198:	ebffb3dd 	bl	103114 <rt_kprintf>
  11619c:	e30011d9 	movw	r1, #473	; 0x1d9
  1161a0:	e30604e4 	movw	r0, #25828	; 0x64e4
  1161a4:	e3400014 	movt	r0, #20
  1161a8:	ebffd259 	bl	10ab14 <sys_arch_assert>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
  1161ac:	e3a03019 	mov	r3, #25
  1161b0:	e58d3000 	str	r3, [sp]
  1161b4:	e3a03a02 	mov	r3, #8192	; 0x2000
  1161b8:	e3a02000 	mov	r2, #0
  1161bc:	e3051bb4 	movw	r1, #23476	; 0x5bb4
  1161c0:	e3401011 	movt	r1, #17
  1161c4:	e3060568 	movw	r0, #25960	; 0x6568
  1161c8:	e3400014 	movt	r0, #20
  1161cc:	ebffd21c 	bl	10aa44 <sys_thread_new>
}
  1161d0:	e320f000 	nop	{0}
  1161d4:	e24bd004 	sub	sp, fp, #4
  1161d8:	e8bd8800 	pop	{fp, pc}

001161dc <pbuf_free_int>:
 *
 * @param p The pbuf (chain) to be dereferenced.
 */
static void
pbuf_free_int(void *p)
{
  1161dc:	e92d4800 	push	{fp, lr}
  1161e0:	e28db004 	add	fp, sp, #4
  1161e4:	e24dd010 	sub	sp, sp, #16
  1161e8:	e50b0010 	str	r0, [fp, #-16]
  struct pbuf *q = (struct pbuf *)p;
  1161ec:	e51b3010 	ldr	r3, [fp, #-16]
  1161f0:	e50b3008 	str	r3, [fp, #-8]
  pbuf_free(q);
  1161f4:	e51b0008 	ldr	r0, [fp, #-8]
  1161f8:	eb001253 	bl	11ab4c <pbuf_free>
}
  1161fc:	e320f000 	nop	{0}
  116200:	e24bd004 	sub	sp, fp, #4
  116204:	e8bd8800 	pop	{fp, pc}

00116208 <pbuf_free_callback>:
 * @param p The pbuf (chain) to be dereferenced.
 * @return ERR_OK if callback could be enqueued, an err_t if not
 */
err_t
pbuf_free_callback(struct pbuf *p)
{
  116208:	e92d4800 	push	{fp, lr}
  11620c:	e28db004 	add	fp, sp, #4
  116210:	e24dd008 	sub	sp, sp, #8
  116214:	e50b0008 	str	r0, [fp, #-8]
  return tcpip_callback_with_block(pbuf_free_int, p, 0);
  116218:	e3a02000 	mov	r2, #0
  11621c:	e51b1008 	ldr	r1, [fp, #-8]
  116220:	e30601dc 	movw	r0, #25052	; 0x61dc
  116224:	e3400011 	movt	r0, #17
  116228:	ebffff0f 	bl	115e6c <tcpip_callback_with_block>
  11622c:	e1a03000 	mov	r3, r0
}
  116230:	e1a00003 	mov	r0, r3
  116234:	e24bd004 	sub	sp, fp, #4
  116238:	e8bd8800 	pop	{fp, pc}

0011623c <mem_free_callback>:
 * @param m the heap memory to free
 * @return ERR_OK if callback could be enqueued, an err_t if not
 */
err_t
mem_free_callback(void *m)
{
  11623c:	e92d4800 	push	{fp, lr}
  116240:	e28db004 	add	fp, sp, #4
  116244:	e24dd008 	sub	sp, sp, #8
  116248:	e50b0008 	str	r0, [fp, #-8]
  return tcpip_callback_with_block(mem_free, m, 0);
  11624c:	e3a02000 	mov	r2, #0
  116250:	e51b1008 	ldr	r1, [fp, #-8]
  116254:	e30a0c48 	movw	r0, #44104	; 0xac48
  116258:	e3400010 	movt	r0, #16
  11625c:	ebffff02 	bl	115e6c <tcpip_callback_with_block>
  116260:	e1a03000 	mov	r3, r0
}
  116264:	e1a00003 	mov	r0, r3
  116268:	e24bd004 	sub	sp, fp, #4
  11626c:	e8bd8800 	pop	{fp, pc}

00116270 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  116270:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  116274:	e28db000 	add	fp, sp, #0
  116278:	e24dd00c 	sub	sp, sp, #12
  11627c:	e1a03000 	mov	r3, r0
  116280:	e14b30b6 	strh	r3, [fp, #-6]
  return (u16_t)PP_HTONS(n);
  116284:	e15b30b6 	ldrh	r3, [fp, #-6]
  116288:	e6bf3fb3 	rev16	r3, r3
  11628c:	e6ff3073 	uxth	r3, r3
}
  116290:	e1a00003 	mov	r0, r3
  116294:	e28bd000 	add	sp, fp, #0
  116298:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11629c:	e12fff1e 	bx	lr

001162a0 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
  1162a0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1162a4:	e28db000 	add	fp, sp, #0
  1162a8:	e24dd00c 	sub	sp, sp, #12
  1162ac:	e50b0008 	str	r0, [fp, #-8]
  return (u32_t)PP_HTONL(n);
  1162b0:	e51b3008 	ldr	r3, [fp, #-8]
  1162b4:	e1a02c03 	lsl	r2, r3, #24
  1162b8:	e51b3008 	ldr	r3, [fp, #-8]
  1162bc:	e1a03403 	lsl	r3, r3, #8
  1162c0:	e20338ff 	and	r3, r3, #16711680	; 0xff0000
  1162c4:	e1822003 	orr	r2, r2, r3
  1162c8:	e51b3008 	ldr	r3, [fp, #-8]
  1162cc:	e1a03423 	lsr	r3, r3, #8
  1162d0:	e2033cff 	and	r3, r3, #65280	; 0xff00
  1162d4:	e1822003 	orr	r2, r2, r3
  1162d8:	e51b3008 	ldr	r3, [fp, #-8]
  1162dc:	e1a03c23 	lsr	r3, r3, #24
  1162e0:	e1823003 	orr	r3, r2, r3
}
  1162e4:	e1a00003 	mov	r0, r3
  1162e8:	e28bd000 	add	sp, fp, #0
  1162ec:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1162f0:	e12fff1e 	bx	lr

001162f4 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char*
lwip_strnstr(const char* buffer, const char* token, size_t n)
{
  1162f4:	e92d4800 	push	{fp, lr}
  1162f8:	e28db004 	add	fp, sp, #4
  1162fc:	e24dd018 	sub	sp, sp, #24
  116300:	e50b0010 	str	r0, [fp, #-16]
  116304:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  116308:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  const char* p;
  size_t tokenlen = strlen(token);
  11630c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  116310:	eb00aa06 	bl	140b30 <strlen>
  116314:	e50b000c 	str	r0, [fp, #-12]
  if (tokenlen == 0) {
  116318:	e51b300c 	ldr	r3, [fp, #-12]
  11631c:	e3530000 	cmp	r3, #0
  116320:	1a000001 	bne	11632c <lwip_strnstr+0x38>
    return LWIP_CONST_CAST(char *, buffer);
  116324:	e51b3010 	ldr	r3, [fp, #-16]
  116328:	ea000021 	b	1163b4 <lwip_strnstr+0xc0>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
  11632c:	e51b3010 	ldr	r3, [fp, #-16]
  116330:	e50b3008 	str	r3, [fp, #-8]
  116334:	ea000011 	b	116380 <lwip_strnstr+0x8c>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
  116338:	e51b3008 	ldr	r3, [fp, #-8]
  11633c:	e5d32000 	ldrb	r2, [r3]
  116340:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116344:	e5d33000 	ldrb	r3, [r3]
  116348:	e1520003 	cmp	r2, r3
  11634c:	1a000008 	bne	116374 <lwip_strnstr+0x80>
  116350:	e51b200c 	ldr	r2, [fp, #-12]
  116354:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  116358:	e51b0008 	ldr	r0, [fp, #-8]
  11635c:	eb00aa1f 	bl	140be0 <strncmp>
  116360:	e1a03000 	mov	r3, r0
  116364:	e3530000 	cmp	r3, #0
  116368:	1a000001 	bne	116374 <lwip_strnstr+0x80>
      return LWIP_CONST_CAST(char *, p);
  11636c:	e51b3008 	ldr	r3, [fp, #-8]
  116370:	ea00000f 	b	1163b4 <lwip_strnstr+0xc0>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
  116374:	e51b3008 	ldr	r3, [fp, #-8]
  116378:	e2833001 	add	r3, r3, #1
  11637c:	e50b3008 	str	r3, [fp, #-8]
  116380:	e51b3008 	ldr	r3, [fp, #-8]
  116384:	e5d33000 	ldrb	r3, [r3]
  116388:	e3530000 	cmp	r3, #0
  11638c:	0a000007 	beq	1163b0 <lwip_strnstr+0xbc>
  116390:	e51b2008 	ldr	r2, [fp, #-8]
  116394:	e51b300c 	ldr	r3, [fp, #-12]
  116398:	e0822003 	add	r2, r2, r3
  11639c:	e51b1010 	ldr	r1, [fp, #-16]
  1163a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1163a4:	e0813003 	add	r3, r1, r3
  1163a8:	e1520003 	cmp	r2, r3
  1163ac:	9affffe1 	bls	116338 <lwip_strnstr+0x44>
    }
  }
  return NULL;
  1163b0:	e3a03000 	mov	r3, #0
}
  1163b4:	e1a00003 	mov	r0, r3
  1163b8:	e24bd004 	sub	sp, fp, #4
  1163bc:	e8bd8800 	pop	{fp, pc}

001163c0 <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char* str1, const char* str2)
{
  1163c0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1163c4:	e28db000 	add	fp, sp, #0
  1163c8:	e24dd014 	sub	sp, sp, #20
  1163cc:	e50b0010 	str	r0, [fp, #-16]
  1163d0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  char c1, c2;

  do {
    c1 = *str1++;
  1163d4:	e51b3010 	ldr	r3, [fp, #-16]
  1163d8:	e2832001 	add	r2, r3, #1
  1163dc:	e50b2010 	str	r2, [fp, #-16]
  1163e0:	e5d33000 	ldrb	r3, [r3]
  1163e4:	e54b3005 	strb	r3, [fp, #-5]
    c2 = *str2++;
  1163e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1163ec:	e2832001 	add	r2, r3, #1
  1163f0:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
  1163f4:	e5d33000 	ldrb	r3, [r3]
  1163f8:	e54b3006 	strb	r3, [fp, #-6]
    if (c1 != c2) {
  1163fc:	e55b2005 	ldrb	r2, [fp, #-5]
  116400:	e55b3006 	ldrb	r3, [fp, #-6]
  116404:	e1520003 	cmp	r2, r3
  116408:	0a000014 	beq	116460 <lwip_stricmp+0xa0>
      char c1_upc = c1 | 0x20;
  11640c:	e55b3005 	ldrb	r3, [fp, #-5]
  116410:	e3833020 	orr	r3, r3, #32
  116414:	e54b3007 	strb	r3, [fp, #-7]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
  116418:	e55b3007 	ldrb	r3, [fp, #-7]
  11641c:	e3530060 	cmp	r3, #96	; 0x60
  116420:	9a00000b 	bls	116454 <lwip_stricmp+0x94>
  116424:	e55b3007 	ldrb	r3, [fp, #-7]
  116428:	e353007a 	cmp	r3, #122	; 0x7a
  11642c:	8a000008 	bhi	116454 <lwip_stricmp+0x94>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
  116430:	e55b3006 	ldrb	r3, [fp, #-6]
  116434:	e3833020 	orr	r3, r3, #32
  116438:	e54b3008 	strb	r3, [fp, #-8]
        if (c1_upc != c2_upc) {
  11643c:	e55b2007 	ldrb	r2, [fp, #-7]
  116440:	e55b3008 	ldrb	r3, [fp, #-8]
  116444:	e1520003 	cmp	r2, r3
  116448:	0a000003 	beq	11645c <lwip_stricmp+0x9c>
          /* still not equal */
          /* don't care for < or > */
          return 1;
  11644c:	e3a03001 	mov	r3, #1
  116450:	ea000006 	b	116470 <lwip_stricmp+0xb0>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
  116454:	e3a03001 	mov	r3, #1
  116458:	ea000004 	b	116470 <lwip_stricmp+0xb0>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
  11645c:	e320f000 	nop	{0}
      }
    }
  } while (c1 != 0);
  116460:	e55b3005 	ldrb	r3, [fp, #-5]
  116464:	e3530000 	cmp	r3, #0
  116468:	1affffd9 	bne	1163d4 <lwip_stricmp+0x14>
  return 0;
  11646c:	e3a03000 	mov	r3, #0
}
  116470:	e1a00003 	mov	r0, r3
  116474:	e28bd000 	add	sp, fp, #0
  116478:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11647c:	e12fff1e 	bx	lr

00116480 <lwip_strnicmp>:
 * lwIP default implementation for strnicmp() non-standard function.
 * This can be \#defined to strnicmp() depending on your platform port.
 */
int
lwip_strnicmp(const char* str1, const char* str2, size_t len)
{
  116480:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  116484:	e28db000 	add	fp, sp, #0
  116488:	e24dd01c 	sub	sp, sp, #28
  11648c:	e50b0010 	str	r0, [fp, #-16]
  116490:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  116494:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  char c1, c2;

  do {
    c1 = *str1++;
  116498:	e51b3010 	ldr	r3, [fp, #-16]
  11649c:	e2832001 	add	r2, r3, #1
  1164a0:	e50b2010 	str	r2, [fp, #-16]
  1164a4:	e5d33000 	ldrb	r3, [r3]
  1164a8:	e54b3005 	strb	r3, [fp, #-5]
    c2 = *str2++;
  1164ac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1164b0:	e2832001 	add	r2, r3, #1
  1164b4:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
  1164b8:	e5d33000 	ldrb	r3, [r3]
  1164bc:	e54b3006 	strb	r3, [fp, #-6]
    if (c1 != c2) {
  1164c0:	e55b2005 	ldrb	r2, [fp, #-5]
  1164c4:	e55b3006 	ldrb	r3, [fp, #-6]
  1164c8:	e1520003 	cmp	r2, r3
  1164cc:	0a000014 	beq	116524 <lwip_strnicmp+0xa4>
      char c1_upc = c1 | 0x20;
  1164d0:	e55b3005 	ldrb	r3, [fp, #-5]
  1164d4:	e3833020 	orr	r3, r3, #32
  1164d8:	e54b3007 	strb	r3, [fp, #-7]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
  1164dc:	e55b3007 	ldrb	r3, [fp, #-7]
  1164e0:	e3530060 	cmp	r3, #96	; 0x60
  1164e4:	9a00000b 	bls	116518 <lwip_strnicmp+0x98>
  1164e8:	e55b3007 	ldrb	r3, [fp, #-7]
  1164ec:	e353007a 	cmp	r3, #122	; 0x7a
  1164f0:	8a000008 	bhi	116518 <lwip_strnicmp+0x98>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
  1164f4:	e55b3006 	ldrb	r3, [fp, #-6]
  1164f8:	e3833020 	orr	r3, r3, #32
  1164fc:	e54b3008 	strb	r3, [fp, #-8]
        if (c1_upc != c2_upc) {
  116500:	e55b2007 	ldrb	r2, [fp, #-7]
  116504:	e55b3008 	ldrb	r3, [fp, #-8]
  116508:	e1520003 	cmp	r2, r3
  11650c:	0a000003 	beq	116520 <lwip_strnicmp+0xa0>
          /* still not equal */
          /* don't care for < or > */
          return 1;
  116510:	e3a03001 	mov	r3, #1
  116514:	ea00000b 	b	116548 <lwip_strnicmp+0xc8>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
  116518:	e3a03001 	mov	r3, #1
  11651c:	ea000009 	b	116548 <lwip_strnicmp+0xc8>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
  116520:	e320f000 	nop	{0}
      }
    }
  } while (len-- && c1 != 0);
  116524:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  116528:	e2432001 	sub	r2, r3, #1
  11652c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  116530:	e3530000 	cmp	r3, #0
  116534:	0a000002 	beq	116544 <lwip_strnicmp+0xc4>
  116538:	e55b3005 	ldrb	r3, [fp, #-5]
  11653c:	e3530000 	cmp	r3, #0
  116540:	1affffd4 	bne	116498 <lwip_strnicmp+0x18>
  return 0;
  116544:	e3a03000 	mov	r3, #0
}
  116548:	e1a00003 	mov	r0, r3
  11654c:	e28bd000 	add	sp, fp, #0
  116550:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  116554:	e12fff1e 	bx	lr

00116558 <lwip_itoa>:
 * lwIP default implementation for itoa() non-standard function.
 * This can be \#defined to itoa() or snprintf(result, bufsize, "%d", number) depending on your platform port.
 */
void
lwip_itoa(char* result, size_t bufsize, int number)
{
  116558:	e92d4800 	push	{fp, lr}
  11655c:	e28db004 	add	fp, sp, #4
  116560:	e24dd028 	sub	sp, sp, #40	; 0x28
  116564:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  116568:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  11656c:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  const int base = 10;
  116570:	e3a0300a 	mov	r3, #10
  116574:	e50b3010 	str	r3, [fp, #-16]
  char* ptr = result, *ptr1 = result, tmp_char;
  116578:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11657c:	e50b3008 	str	r3, [fp, #-8]
  116580:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  116584:	e50b300c 	str	r3, [fp, #-12]
  int tmp_value;
  LWIP_UNUSED_ARG(bufsize);

  do {
    tmp_value = number;
  116588:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11658c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    number /= base;
  116590:	e51b1010 	ldr	r1, [fp, #-16]
  116594:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  116598:	eb0086d7 	bl	1380fc <__divsi3>
  11659c:	e1a03000 	mov	r3, r0
  1165a0:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
    *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz"[35 + (tmp_value - number * base)];
  1165a4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1165a8:	e51b2010 	ldr	r2, [fp, #-16]
  1165ac:	e0030392 	mul	r3, r2, r3
  1165b0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1165b4:	e0423003 	sub	r3, r2, r3
  1165b8:	e2831023 	add	r1, r3, #35	; 0x23
  1165bc:	e51b2008 	ldr	r2, [fp, #-8]
  1165c0:	e2823001 	add	r3, r2, #1
  1165c4:	e50b3008 	str	r3, [fp, #-8]
  1165c8:	e3063570 	movw	r3, #25968	; 0x6570
  1165cc:	e3403014 	movt	r3, #20
  1165d0:	e7d33001 	ldrb	r3, [r3, r1]
  1165d4:	e5c23000 	strb	r3, [r2]
  } while(number);
  1165d8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1165dc:	e3530000 	cmp	r3, #0
  1165e0:	1affffe8 	bne	116588 <lwip_itoa+0x30>

   /* Apply negative sign */
  if (tmp_value < 0) {
  1165e4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1165e8:	e3530000 	cmp	r3, #0
  1165ec:	aa000004 	bge	116604 <lwip_itoa+0xac>
     *ptr++ = '-';
  1165f0:	e51b3008 	ldr	r3, [fp, #-8]
  1165f4:	e2832001 	add	r2, r3, #1
  1165f8:	e50b2008 	str	r2, [fp, #-8]
  1165fc:	e3a0202d 	mov	r2, #45	; 0x2d
  116600:	e5c32000 	strb	r2, [r3]
  }
  *ptr-- = '\0';
  116604:	e51b3008 	ldr	r3, [fp, #-8]
  116608:	e2432001 	sub	r2, r3, #1
  11660c:	e50b2008 	str	r2, [fp, #-8]
  116610:	e3a02000 	mov	r2, #0
  116614:	e5c32000 	strb	r2, [r3]
  while(ptr1 < ptr) {
  116618:	ea00000d 	b	116654 <lwip_itoa+0xfc>
    tmp_char = *ptr;
  11661c:	e51b3008 	ldr	r3, [fp, #-8]
  116620:	e5d33000 	ldrb	r3, [r3]
  116624:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
    *ptr--= *ptr1;
  116628:	e51b3008 	ldr	r3, [fp, #-8]
  11662c:	e2432001 	sub	r2, r3, #1
  116630:	e50b2008 	str	r2, [fp, #-8]
  116634:	e51b200c 	ldr	r2, [fp, #-12]
  116638:	e5d22000 	ldrb	r2, [r2]
  11663c:	e5c32000 	strb	r2, [r3]
    *ptr1++ = tmp_char;
  116640:	e51b300c 	ldr	r3, [fp, #-12]
  116644:	e2832001 	add	r2, r3, #1
  116648:	e50b200c 	str	r2, [fp, #-12]
  11664c:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
  116650:	e5c32000 	strb	r2, [r3]
  while(ptr1 < ptr) {
  116654:	e51b200c 	ldr	r2, [fp, #-12]
  116658:	e51b3008 	ldr	r3, [fp, #-8]
  11665c:	e1520003 	cmp	r2, r3
  116660:	3affffed 	bcc	11661c <lwip_itoa+0xc4>
  }
}
  116664:	e320f000 	nop	{0}
  116668:	e24bd004 	sub	sp, fp, #4
  11666c:	e8bd8800 	pop	{fp, pc}

00116670 <dns_init>:
 * Initialize the resolver: set up the UDP pcb and configure the default server
 * (if DNS_SERVER_ADDRESS is set).
 */
void
dns_init(void)
{
  116670:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  116674:	e28db000 	add	fp, sp, #0
#endif

#if DNS_LOCAL_HOSTLIST
  dns_init_local();
#endif
}
  116678:	e320f000 	nop	{0}
  11667c:	e28bd000 	add	sp, fp, #0
  116680:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  116684:	e12fff1e 	bx	lr

00116688 <dns_setserver>:
 * @param numdns the index of the DNS server to set must be < DNS_MAX_SERVERS
 * @param dnsserver IP address of the DNS server to set
 */
void
dns_setserver(u8_t numdns, const ip_addr_t *dnsserver)
{
  116688:	e92d4800 	push	{fp, lr}
  11668c:	e28db004 	add	fp, sp, #4
  116690:	e24dd008 	sub	sp, sp, #8
  116694:	e1a03000 	mov	r3, r0
  116698:	e50b100c 	str	r1, [fp, #-12]
  11669c:	e54b3005 	strb	r3, [fp, #-5]
  if (numdns < DNS_MAX_SERVERS) {
  1166a0:	e55b3005 	ldrb	r3, [fp, #-5]
  1166a4:	e3530001 	cmp	r3, #1
  1166a8:	8a00001f 	bhi	11672c <dns_setserver+0xa4>
    if (dnsserver != NULL) {
  1166ac:	e51b300c 	ldr	r3, [fp, #-12]
  1166b0:	e3530000 	cmp	r3, #0
  1166b4:	0a000015 	beq	116710 <dns_setserver+0x88>
      dns_servers[numdns] = (*dnsserver);
  1166b8:	e55b2005 	ldrb	r2, [fp, #-5]
  1166bc:	e30e30ac 	movw	r3, #57516	; 0xe0ac
  1166c0:	e3403014 	movt	r3, #20
  1166c4:	e51b100c 	ldr	r1, [fp, #-12]
  1166c8:	e5911000 	ldr	r1, [r1]
  1166cc:	e7831102 	str	r1, [r3, r2, lsl #2]
      extern struct netif *netif_default;
      extern struct netdev *netdev_get_by_name(const char *name);
      extern void netdev_low_level_set_dns_server(struct netdev *netdev, uint8_t dns_num, const ip_addr_t *dns_server);

      /* set network interface device DNS server address */
      if (netif_default) {
  1166d0:	e3043fb8 	movw	r3, #20408	; 0x4fb8
  1166d4:	e3403057 	movt	r3, #87	; 0x57
  1166d8:	e5933000 	ldr	r3, [r3]
  1166dc:	e3530000 	cmp	r3, #0
  1166e0:	0a000011 	beq	11672c <dns_setserver+0xa4>
        netdev_low_level_set_dns_server(netdev_get_by_name(netif_default->name), numdns, dnsserver);
  1166e4:	e3043fb8 	movw	r3, #20408	; 0x4fb8
  1166e8:	e3403057 	movt	r3, #87	; 0x57
  1166ec:	e5933000 	ldr	r3, [r3]
  1166f0:	e2833042 	add	r3, r3, #66	; 0x42
  1166f4:	e1a00003 	mov	r0, r3
  1166f8:	ebffba29 	bl	104fa4 <netdev_get_by_name>
  1166fc:	e55b3005 	ldrb	r3, [fp, #-5]
  116700:	e51b200c 	ldr	r2, [fp, #-12]
  116704:	e1a01003 	mov	r1, r3
  116708:	ebffbdb3 	bl	105ddc <netdev_low_level_set_dns_server>
#endif /* RT_USING_NETDEV */
    } else {
      dns_servers[numdns] = *IP_ADDR_ANY;
    }
  }
}
  11670c:	ea000006 	b	11672c <dns_setserver+0xa4>
      dns_servers[numdns] = *IP_ADDR_ANY;
  116710:	e55b1005 	ldrb	r1, [fp, #-5]
  116714:	e30e30ac 	movw	r3, #57516	; 0xe0ac
  116718:	e3403014 	movt	r3, #20
  11671c:	e3082e3c 	movw	r2, #36412	; 0x8e3c
  116720:	e3402014 	movt	r2, #20
  116724:	e5922000 	ldr	r2, [r2]
  116728:	e7832101 	str	r2, [r3, r1, lsl #2]
}
  11672c:	e320f000 	nop	{0}
  116730:	e24bd004 	sub	sp, fp, #4
  116734:	e8bd8800 	pop	{fp, pc}

00116738 <dns_getserver>:
 * @return IP address of the indexed DNS server or "ip_addr_any" if the DNS
 *         server has not been configured.
 */
const ip_addr_t*
dns_getserver(u8_t numdns)
{
  116738:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11673c:	e28db000 	add	fp, sp, #0
  116740:	e24dd00c 	sub	sp, sp, #12
  116744:	e1a03000 	mov	r3, r0
  116748:	e54b3005 	strb	r3, [fp, #-5]
  if (numdns < DNS_MAX_SERVERS) {
  11674c:	e55b3005 	ldrb	r3, [fp, #-5]
  116750:	e3530001 	cmp	r3, #1
  116754:	8a000005 	bhi	116770 <dns_getserver+0x38>
    return &dns_servers[numdns];
  116758:	e55b3005 	ldrb	r3, [fp, #-5]
  11675c:	e1a02103 	lsl	r2, r3, #2
  116760:	e30e30ac 	movw	r3, #57516	; 0xe0ac
  116764:	e3403014 	movt	r3, #20
  116768:	e0823003 	add	r3, r2, r3
  11676c:	ea000001 	b	116778 <dns_getserver+0x40>
  } else {
    return IP_ADDR_ANY;
  116770:	e3083e3c 	movw	r3, #36412	; 0x8e3c
  116774:	e3403014 	movt	r3, #20
  }
}
  116778:	e1a00003 	mov	r0, r3
  11677c:	e28bd000 	add	sp, fp, #0
  116780:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  116784:	e12fff1e 	bx	lr

00116788 <dns_tmr>:
 * The DNS resolver client timer - handle retries and timeouts and should
 * be called every DNS_TMR_INTERVAL milliseconds (every second by default).
 */
void
dns_tmr(void)
{
  116788:	e92d4800 	push	{fp, lr}
  11678c:	e28db004 	add	fp, sp, #4
  LWIP_DEBUGF(DNS_DEBUG, ("dns_tmr: dns_check_entries\n"));
  dns_check_entries();
  116790:	eb000360 	bl	117518 <dns_check_entries>
}
  116794:	e320f000 	nop	{0}
  116798:	e8bd8800 	pop	{fp, pc}

0011679c <dns_lookup>:
 *         was not found in the cached dns_table.
 * @return ERR_OK if found, ERR_ARG if not found
 */
static err_t
dns_lookup(const char *name, ip_addr_t *addr LWIP_DNS_ADDRTYPE_ARG(u8_t dns_addrtype))
{
  11679c:	e92d4800 	push	{fp, lr}
  1167a0:	e28db004 	add	fp, sp, #4
  1167a4:	e24dd010 	sub	sp, sp, #16
  1167a8:	e50b0010 	str	r0, [fp, #-16]
  1167ac:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    return ERR_OK;
  }
#endif /* DNS_LOOKUP_LOCAL_EXTERN */

  /* Walk through name list, return entry if found. If not, return NULL. */
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
  1167b0:	e3a03000 	mov	r3, #0
  1167b4:	e54b3005 	strb	r3, [fp, #-5]
  1167b8:	ea000029 	b	116864 <dns_lookup+0xc8>
    if ((dns_table[i].state == DNS_STATE_DONE) &&
  1167bc:	e55b2005 	ldrb	r2, [fp, #-5]
  1167c0:	e30d3c3c 	movw	r3, #56380	; 0xdc3c
  1167c4:	e3403014 	movt	r3, #20
  1167c8:	e3a01e11 	mov	r1, #272	; 0x110
  1167cc:	e0020291 	mul	r2, r1, r2
  1167d0:	e0833002 	add	r3, r3, r2
  1167d4:	e283300a 	add	r3, r3, #10
  1167d8:	e5d33000 	ldrb	r3, [r3]
  1167dc:	e3530003 	cmp	r3, #3
  1167e0:	1a00001c 	bne	116858 <dns_lookup+0xbc>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0) &&
  1167e4:	e55b3005 	ldrb	r3, [fp, #-5]
  1167e8:	e3a02e11 	mov	r2, #272	; 0x110
  1167ec:	e0030392 	mul	r3, r2, r3
  1167f0:	e2832010 	add	r2, r3, #16
  1167f4:	e30d3c3c 	movw	r3, #56380	; 0xdc3c
  1167f8:	e3403014 	movt	r3, #20
  1167fc:	e0823003 	add	r3, r2, r3
  116800:	e3a02c01 	mov	r2, #256	; 0x100
  116804:	e1a01003 	mov	r1, r3
  116808:	e51b0010 	ldr	r0, [fp, #-16]
  11680c:	ebffff1b 	bl	116480 <lwip_strnicmp>
  116810:	e1a03000 	mov	r3, r0
    if ((dns_table[i].state == DNS_STATE_DONE) &&
  116814:	e3530000 	cmp	r3, #0
  116818:	1a00000e 	bne	116858 <dns_lookup+0xbc>
        LWIP_DNS_ADDRTYPE_MATCH_IP(dns_addrtype, dns_table[i].ipaddr)) {
      LWIP_DEBUGF(DNS_DEBUG, ("dns_lookup: \"%s\": found = ", name));
      ip_addr_debug_print(DNS_DEBUG, &(dns_table[i].ipaddr));
      LWIP_DEBUGF(DNS_DEBUG, ("\n"));
      if (addr) {
  11681c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116820:	e3530000 	cmp	r3, #0
  116824:	0a000009 	beq	116850 <dns_lookup+0xb4>
        ip_addr_copy(*addr, dns_table[i].ipaddr);
  116828:	e55b2005 	ldrb	r2, [fp, #-5]
  11682c:	e30d3c3c 	movw	r3, #56380	; 0xdc3c
  116830:	e3403014 	movt	r3, #20
  116834:	e3a01e11 	mov	r1, #272	; 0x110
  116838:	e0020291 	mul	r2, r1, r2
  11683c:	e0833002 	add	r3, r3, r2
  116840:	e2833004 	add	r3, r3, #4
  116844:	e5932000 	ldr	r2, [r3]
  116848:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11684c:	e5832000 	str	r2, [r3]
      }
      return ERR_OK;
  116850:	e3a03000 	mov	r3, #0
  116854:	ea000006 	b	116874 <dns_lookup+0xd8>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
  116858:	e55b3005 	ldrb	r3, [fp, #-5]
  11685c:	e2833001 	add	r3, r3, #1
  116860:	e54b3005 	strb	r3, [fp, #-5]
  116864:	e55b3005 	ldrb	r3, [fp, #-5]
  116868:	e3530003 	cmp	r3, #3
  11686c:	9affffd2 	bls	1167bc <dns_lookup+0x20>
    }
  }

  return ERR_ARG;
  116870:	e3e0300f 	mvn	r3, #15
}
  116874:	e1a00003 	mov	r0, r3
  116878:	e24bd004 	sub	sp, fp, #4
  11687c:	e8bd8800 	pop	{fp, pc}

00116880 <dns_compare_name>:
 * @param start_offset offset into p where the name starts
 * @return 0xFFFF: names differ, other: names equal -> offset behind name
 */
static u16_t
dns_compare_name(const char *query, struct pbuf* p, u16_t start_offset)
{
  116880:	e92d4800 	push	{fp, lr}
  116884:	e28db004 	add	fp, sp, #4
  116888:	e24dd020 	sub	sp, sp, #32
  11688c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  116890:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  116894:	e1a03002 	mov	r3, r2
  116898:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
  int n;
  u16_t response_offset = start_offset;
  11689c:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  1168a0:	e14b30ba 	strh	r3, [fp, #-10]

  do {
    n = pbuf_try_get_at(p, response_offset++);
  1168a4:	e15b30ba 	ldrh	r3, [fp, #-10]
  1168a8:	e2832001 	add	r2, r3, #1
  1168ac:	e14b20ba 	strh	r2, [fp, #-10]
  1168b0:	e1a01003 	mov	r1, r3
  1168b4:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  1168b8:	eb001460 	bl	11ba40 <pbuf_try_get_at>
  1168bc:	e50b0008 	str	r0, [fp, #-8]
    if (n < 0) {
  1168c0:	e51b3008 	ldr	r3, [fp, #-8]
  1168c4:	e3530000 	cmp	r3, #0
  1168c8:	aa000001 	bge	1168d4 <dns_compare_name+0x54>
      return 0xFFFF;
  1168cc:	e30f3fff 	movw	r3, #65535	; 0xffff
  1168d0:	ea000036 	b	1169b0 <dns_compare_name+0x130>
    }
    /** @see RFC 1035 - 4.1.4. Message compression */
    if ((n & 0xc0) == 0xc0) {
  1168d4:	e51b3008 	ldr	r3, [fp, #-8]
  1168d8:	e20330c0 	and	r3, r3, #192	; 0xc0
  1168dc:	e35300c0 	cmp	r3, #192	; 0xc0
  1168e0:	1a00001c 	bne	116958 <dns_compare_name+0xd8>
      /* Compressed name: cannot be equal since we don't send them */
      return 0xFFFF;
  1168e4:	e30f3fff 	movw	r3, #65535	; 0xffff
  1168e8:	ea000030 	b	1169b0 <dns_compare_name+0x130>
    } else {
      /* Not compressed name */
      while (n > 0) {
        int c = pbuf_try_get_at(p, response_offset);
  1168ec:	e15b30ba 	ldrh	r3, [fp, #-10]
  1168f0:	e1a01003 	mov	r1, r3
  1168f4:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  1168f8:	eb001450 	bl	11ba40 <pbuf_try_get_at>
  1168fc:	e50b0010 	str	r0, [fp, #-16]
        if (c < 0) {
  116900:	e51b3010 	ldr	r3, [fp, #-16]
  116904:	e3530000 	cmp	r3, #0
  116908:	aa000001 	bge	116914 <dns_compare_name+0x94>
          return 0xFFFF;
  11690c:	e30f3fff 	movw	r3, #65535	; 0xffff
  116910:	ea000026 	b	1169b0 <dns_compare_name+0x130>
        }
        if ((*query) != (u8_t)c) {
  116914:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  116918:	e5d32000 	ldrb	r2, [r3]
  11691c:	e51b3010 	ldr	r3, [fp, #-16]
  116920:	e6ef3073 	uxtb	r3, r3
  116924:	e1520003 	cmp	r2, r3
  116928:	0a000001 	beq	116934 <dns_compare_name+0xb4>
          return 0xFFFF;
  11692c:	e30f3fff 	movw	r3, #65535	; 0xffff
  116930:	ea00001e 	b	1169b0 <dns_compare_name+0x130>
        }
        ++response_offset;
  116934:	e15b30ba 	ldrh	r3, [fp, #-10]
  116938:	e2833001 	add	r3, r3, #1
  11693c:	e14b30ba 	strh	r3, [fp, #-10]
        ++query;
  116940:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  116944:	e2833001 	add	r3, r3, #1
  116948:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        --n;
  11694c:	e51b3008 	ldr	r3, [fp, #-8]
  116950:	e2433001 	sub	r3, r3, #1
  116954:	e50b3008 	str	r3, [fp, #-8]
      while (n > 0) {
  116958:	e51b3008 	ldr	r3, [fp, #-8]
  11695c:	e3530000 	cmp	r3, #0
  116960:	caffffe1 	bgt	1168ec <dns_compare_name+0x6c>
      }
      ++query;
  116964:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  116968:	e2833001 	add	r3, r3, #1
  11696c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    }
    n = pbuf_try_get_at(p, response_offset);
  116970:	e15b30ba 	ldrh	r3, [fp, #-10]
  116974:	e1a01003 	mov	r1, r3
  116978:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  11697c:	eb00142f 	bl	11ba40 <pbuf_try_get_at>
  116980:	e50b0008 	str	r0, [fp, #-8]
    if (n < 0) {
  116984:	e51b3008 	ldr	r3, [fp, #-8]
  116988:	e3530000 	cmp	r3, #0
  11698c:	aa000001 	bge	116998 <dns_compare_name+0x118>
      return 0xFFFF;
  116990:	e30f3fff 	movw	r3, #65535	; 0xffff
  116994:	ea000005 	b	1169b0 <dns_compare_name+0x130>
    }
  } while (n != 0);
  116998:	e51b3008 	ldr	r3, [fp, #-8]
  11699c:	e3530000 	cmp	r3, #0
  1169a0:	1affffbf 	bne	1168a4 <dns_compare_name+0x24>

  return response_offset + 1;
  1169a4:	e15b30ba 	ldrh	r3, [fp, #-10]
  1169a8:	e2833001 	add	r3, r3, #1
  1169ac:	e6ff3073 	uxth	r3, r3
}
  1169b0:	e1a00003 	mov	r0, r3
  1169b4:	e24bd004 	sub	sp, fp, #4
  1169b8:	e8bd8800 	pop	{fp, pc}

001169bc <dns_skip_name>:
 * @param query_idx start index into p pointing to encoded DNS name in the DNS server response
 * @return index to end of the name
 */
static u16_t
dns_skip_name(struct pbuf* p, u16_t query_idx)
{
  1169bc:	e92d4800 	push	{fp, lr}
  1169c0:	e28db004 	add	fp, sp, #4
  1169c4:	e24dd010 	sub	sp, sp, #16
  1169c8:	e50b0010 	str	r0, [fp, #-16]
  1169cc:	e1a03001 	mov	r3, r1
  1169d0:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  int n;
  u16_t offset = query_idx;
  1169d4:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  1169d8:	e14b30b6 	strh	r3, [fp, #-6]

  do {
    n = pbuf_try_get_at(p, offset++);
  1169dc:	e15b30b6 	ldrh	r3, [fp, #-6]
  1169e0:	e2832001 	add	r2, r3, #1
  1169e4:	e14b20b6 	strh	r2, [fp, #-6]
  1169e8:	e1a01003 	mov	r1, r3
  1169ec:	e51b0010 	ldr	r0, [fp, #-16]
  1169f0:	eb001412 	bl	11ba40 <pbuf_try_get_at>
  1169f4:	e50b000c 	str	r0, [fp, #-12]
    if (n < 0) {
  1169f8:	e51b300c 	ldr	r3, [fp, #-12]
  1169fc:	e3530000 	cmp	r3, #0
  116a00:	aa000001 	bge	116a0c <dns_skip_name+0x50>
      return 0xFFFF;
  116a04:	e30f3fff 	movw	r3, #65535	; 0xffff
  116a08:	ea000023 	b	116a9c <dns_skip_name+0xe0>
    }
    /** @see RFC 1035 - 4.1.4. Message compression */
    if ((n & 0xc0) == 0xc0) {
  116a0c:	e51b300c 	ldr	r3, [fp, #-12]
  116a10:	e20330c0 	and	r3, r3, #192	; 0xc0
  116a14:	e35300c0 	cmp	r3, #192	; 0xc0
  116a18:	0a00001b 	beq	116a8c <dns_skip_name+0xd0>
      /* Compressed name: since we only want to skip it (not check it), stop here */
      break;
    } else {
      /* Not compressed name */
      if (offset + n >= p->tot_len) {
  116a1c:	e15b20b6 	ldrh	r2, [fp, #-6]
  116a20:	e51b300c 	ldr	r3, [fp, #-12]
  116a24:	e0823003 	add	r3, r2, r3
  116a28:	e51b2010 	ldr	r2, [fp, #-16]
  116a2c:	e1d220b8 	ldrh	r2, [r2, #8]
  116a30:	e1530002 	cmp	r3, r2
  116a34:	ba000001 	blt	116a40 <dns_skip_name+0x84>
        return 0xFFFF;
  116a38:	e30f3fff 	movw	r3, #65535	; 0xffff
  116a3c:	ea000016 	b	116a9c <dns_skip_name+0xe0>
      }
      offset = (u16_t)(offset + n);
  116a40:	e51b300c 	ldr	r3, [fp, #-12]
  116a44:	e6ff2073 	uxth	r2, r3
  116a48:	e15b30b6 	ldrh	r3, [fp, #-6]
  116a4c:	e0823003 	add	r3, r2, r3
  116a50:	e14b30b6 	strh	r3, [fp, #-6]
    }
    n = pbuf_try_get_at(p, offset);
  116a54:	e15b30b6 	ldrh	r3, [fp, #-6]
  116a58:	e1a01003 	mov	r1, r3
  116a5c:	e51b0010 	ldr	r0, [fp, #-16]
  116a60:	eb0013f6 	bl	11ba40 <pbuf_try_get_at>
  116a64:	e50b000c 	str	r0, [fp, #-12]
    if (n < 0) {
  116a68:	e51b300c 	ldr	r3, [fp, #-12]
  116a6c:	e3530000 	cmp	r3, #0
  116a70:	aa000001 	bge	116a7c <dns_skip_name+0xc0>
      return 0xFFFF;
  116a74:	e30f3fff 	movw	r3, #65535	; 0xffff
  116a78:	ea000007 	b	116a9c <dns_skip_name+0xe0>
    }
  } while (n != 0);
  116a7c:	e51b300c 	ldr	r3, [fp, #-12]
  116a80:	e3530000 	cmp	r3, #0
  116a84:	1affffd4 	bne	1169dc <dns_skip_name+0x20>
  116a88:	ea000000 	b	116a90 <dns_skip_name+0xd4>
      break;
  116a8c:	e320f000 	nop	{0}

  return offset + 1;
  116a90:	e15b30b6 	ldrh	r3, [fp, #-6]
  116a94:	e2833001 	add	r3, r3, #1
  116a98:	e6ff3073 	uxth	r3, r3
}
  116a9c:	e1a00003 	mov	r0, r3
  116aa0:	e24bd004 	sub	sp, fp, #4
  116aa4:	e8bd8800 	pop	{fp, pc}

00116aa8 <dns_send>:
 * @param idx the DNS table entry index for which to send a request
 * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
 */
static err_t
dns_send(u8_t idx)
{
  116aa8:	e92d4800 	push	{fp, lr}
  116aac:	e28db004 	add	fp, sp, #4
  116ab0:	e24dd040 	sub	sp, sp, #64	; 0x40
  116ab4:	e1a03000 	mov	r3, r0
  116ab8:	e54b303d 	strb	r3, [fp, #-61]	; 0xffffffc3
  struct pbuf *p;
  u16_t query_idx, copy_len;
  const char *hostname, *hostname_part;
  u8_t n;
  u8_t pcb_idx;
  struct dns_table_entry* entry = &dns_table[idx];
  116abc:	e55b303d 	ldrb	r3, [fp, #-61]	; 0xffffffc3
  116ac0:	e3a02e11 	mov	r2, #272	; 0x110
  116ac4:	e0020392 	mul	r2, r2, r3
  116ac8:	e30d3c3c 	movw	r3, #56380	; 0xdc3c
  116acc:	e3403014 	movt	r3, #20
  116ad0:	e0823003 	add	r3, r2, r3
  116ad4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
              (u16_t)(entry->server_idx), entry->name));
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
  116ad8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116adc:	e5d3300b 	ldrb	r3, [r3, #11]
  116ae0:	e3530001 	cmp	r3, #1
  116ae4:	9a000006 	bls	116b04 <dns_send+0x5c>
  116ae8:	e30605bc 	movw	r0, #26044	; 0x65bc
  116aec:	e3400014 	movt	r0, #20
  116af0:	ebffb187 	bl	103114 <rt_kprintf>
  116af4:	e30012fa 	movw	r1, #762	; 0x2fa
  116af8:	e30605d4 	movw	r0, #26068	; 0x65d4
  116afc:	e3400014 	movt	r0, #20
  116b00:	ebffd003 	bl	10ab14 <sys_arch_assert>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
  116b04:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116b08:	e5d3300b 	ldrb	r3, [r3, #11]
  116b0c:	e1a02003 	mov	r2, r3
  116b10:	e30e30ac 	movw	r3, #57516	; 0xe0ac
  116b14:	e3403014 	movt	r3, #20
  116b18:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  116b1c:	e3530000 	cmp	r3, #0
  116b20:	1a000008 	bne	116b48 <dns_send+0xa0>
      && !entry->is_mdns
#endif
    ) {
    /* DNS server not valid anymore, e.g. PPP netif has been shut down */
    /* call specified callback function if provided */
    dns_call_found(idx, NULL);
  116b24:	e55b303d 	ldrb	r3, [fp, #-61]	; 0xffffffc3
  116b28:	e3a01000 	mov	r1, #0
  116b2c:	e1a00003 	mov	r0, r3
  116b30:	eb00010f 	bl	116f74 <dns_call_found>
    /* flush this entry */
    entry->state = DNS_STATE_UNUSED;
  116b34:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116b38:	e3a02000 	mov	r2, #0
  116b3c:	e5c3200a 	strb	r2, [r3, #10]
    return ERR_OK;
  116b40:	e3a03000 	mov	r3, #0
  116b44:	ea000089 	b	116d70 <dns_send+0x2c8>
  }

  /* if here, we have either a new query or a retry on a previous query to process */
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
  116b48:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116b4c:	e2833010 	add	r3, r3, #16
  116b50:	e1a00003 	mov	r0, r3
  116b54:	eb00a7f5 	bl	140b30 <strlen>
  116b58:	e1a03000 	mov	r3, r0
  116b5c:	e6ff3073 	uxth	r3, r3
  116b60:	e2833012 	add	r3, r3, #18
  116b64:	e6ff3073 	uxth	r3, r3
  116b68:	e3a02000 	mov	r2, #0
  116b6c:	e1a01003 	mov	r1, r3
  116b70:	e3a00000 	mov	r0, #0
  116b74:	eb000ced 	bl	119f30 <pbuf_alloc>
  116b78:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
                 SIZEOF_DNS_QUERY), PBUF_RAM);
  if (p != NULL) {
  116b7c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  116b80:	e3530000 	cmp	r3, #0
  116b84:	0a000076 	beq	116d64 <dns_send+0x2bc>
    const ip_addr_t* dst;
    u16_t dst_port;
    /* fill dns header */
    memset(&hdr, 0, SIZEOF_DNS_HDR);
  116b88:	e24b3034 	sub	r3, fp, #52	; 0x34
  116b8c:	e3a0200c 	mov	r2, #12
  116b90:	e3a01000 	mov	r1, #0
  116b94:	e1a00003 	mov	r0, r3
  116b98:	eb00a753 	bl	1408ec <memset>
    hdr.id = lwip_htons(entry->txid);
  116b9c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116ba0:	e1d330b8 	ldrh	r3, [r3, #8]
  116ba4:	e1a00003 	mov	r0, r3
  116ba8:	ebfffdb0 	bl	116270 <lwip_htons>
  116bac:	e1a03000 	mov	r3, r0
  116bb0:	e14b33b4 	strh	r3, [fp, #-52]	; 0xffffffcc
    hdr.flags1 = DNS_FLAG1_RD;
  116bb4:	e3a03001 	mov	r3, #1
  116bb8:	e54b3032 	strb	r3, [fp, #-50]	; 0xffffffce
    hdr.numquestions = PP_HTONS(1);
  116bbc:	e3a03c01 	mov	r3, #256	; 0x100
  116bc0:	e14b33b0 	strh	r3, [fp, #-48]	; 0xffffffd0
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
  116bc4:	e24b3034 	sub	r3, fp, #52	; 0x34
  116bc8:	e3a0200c 	mov	r2, #12
  116bcc:	e1a01003 	mov	r1, r3
  116bd0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  116bd4:	eb00128f 	bl	11b618 <pbuf_take>
    hostname = entry->name;
  116bd8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116bdc:	e2833010 	add	r3, r3, #16
  116be0:	e50b300c 	str	r3, [fp, #-12]
    --hostname;
  116be4:	e51b300c 	ldr	r3, [fp, #-12]
  116be8:	e2433001 	sub	r3, r3, #1
  116bec:	e50b300c 	str	r3, [fp, #-12]

    /* convert hostname into suitable query format. */
    query_idx = SIZEOF_DNS_HDR;
  116bf0:	e3a0300c 	mov	r3, #12
  116bf4:	e14b30b8 	strh	r3, [fp, #-8]
    do {
      ++hostname;
  116bf8:	e51b300c 	ldr	r3, [fp, #-12]
  116bfc:	e2833001 	add	r3, r3, #1
  116c00:	e50b300c 	str	r3, [fp, #-12]
      hostname_part = hostname;
  116c04:	e51b300c 	ldr	r3, [fp, #-12]
  116c08:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
  116c0c:	e3a03000 	mov	r3, #0
  116c10:	e54b300d 	strb	r3, [fp, #-13]
  116c14:	ea000005 	b	116c30 <dns_send+0x188>
        ++n;
  116c18:	e55b300d 	ldrb	r3, [fp, #-13]
  116c1c:	e2833001 	add	r3, r3, #1
  116c20:	e54b300d 	strb	r3, [fp, #-13]
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
  116c24:	e51b300c 	ldr	r3, [fp, #-12]
  116c28:	e2833001 	add	r3, r3, #1
  116c2c:	e50b300c 	str	r3, [fp, #-12]
  116c30:	e51b300c 	ldr	r3, [fp, #-12]
  116c34:	e5d33000 	ldrb	r3, [r3]
  116c38:	e353002e 	cmp	r3, #46	; 0x2e
  116c3c:	0a000003 	beq	116c50 <dns_send+0x1a8>
  116c40:	e51b300c 	ldr	r3, [fp, #-12]
  116c44:	e5d33000 	ldrb	r3, [r3]
  116c48:	e3530000 	cmp	r3, #0
  116c4c:	1afffff1 	bne	116c18 <dns_send+0x170>
      }
      copy_len = (u16_t)(hostname - hostname_part);
  116c50:	e51b200c 	ldr	r2, [fp, #-12]
  116c54:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  116c58:	e0423003 	sub	r3, r2, r3
  116c5c:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
      pbuf_put_at(p, query_idx, n);
  116c60:	e55b200d 	ldrb	r2, [fp, #-13]
  116c64:	e15b30b8 	ldrh	r3, [fp, #-8]
  116c68:	e1a01003 	mov	r1, r3
  116c6c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  116c70:	eb001390 	bl	11bab8 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, query_idx + 1);
  116c74:	e15b30b8 	ldrh	r3, [fp, #-8]
  116c78:	e2833001 	add	r3, r3, #1
  116c7c:	e6ff3073 	uxth	r3, r3
  116c80:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  116c84:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  116c88:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  116c8c:	eb0012de 	bl	11b80c <pbuf_take_at>
      query_idx += n + 1;
  116c90:	e55b300d 	ldrb	r3, [fp, #-13]
  116c94:	e6ff2073 	uxth	r2, r3
  116c98:	e15b30b8 	ldrh	r3, [fp, #-8]
  116c9c:	e0823003 	add	r3, r2, r3
  116ca0:	e6ff3073 	uxth	r3, r3
  116ca4:	e2833001 	add	r3, r3, #1
  116ca8:	e14b30b8 	strh	r3, [fp, #-8]
    } while (*hostname != 0);
  116cac:	e51b300c 	ldr	r3, [fp, #-12]
  116cb0:	e5d33000 	ldrb	r3, [r3]
  116cb4:	e3530000 	cmp	r3, #0
  116cb8:	1affffce 	bne	116bf8 <dns_send+0x150>
    pbuf_put_at(p, query_idx, 0);
  116cbc:	e15b30b8 	ldrh	r3, [fp, #-8]
  116cc0:	e3a02000 	mov	r2, #0
  116cc4:	e1a01003 	mov	r1, r3
  116cc8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  116ccc:	eb001379 	bl	11bab8 <pbuf_put_at>
    query_idx++;
  116cd0:	e15b30b8 	ldrh	r3, [fp, #-8]
  116cd4:	e2833001 	add	r3, r3, #1
  116cd8:	e14b30b8 	strh	r3, [fp, #-8]

    /* fill dns query */
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
    } else {
      qry.type = PP_HTONS(DNS_RRTYPE_A);
  116cdc:	e3a03c01 	mov	r3, #256	; 0x100
  116ce0:	e14b33b8 	strh	r3, [fp, #-56]	; 0xffffffc8
    }
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
  116ce4:	e3a03c01 	mov	r3, #256	; 0x100
  116ce8:	e14b33b6 	strh	r3, [fp, #-54]	; 0xffffffca
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
  116cec:	e15b30b8 	ldrh	r3, [fp, #-8]
  116cf0:	e24b1038 	sub	r1, fp, #56	; 0x38
  116cf4:	e3a02004 	mov	r2, #4
  116cf8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  116cfc:	eb0012c2 	bl	11b80c <pbuf_take_at>

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
    pcb_idx = entry->pcb_idx;
  116d00:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116d04:	e5d3300f 	ldrb	r3, [r3, #15]
  116d08:	e54b301f 	strb	r3, [fp, #-31]	; 0xffffffe1
      }
#endif
    } else
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
    {
      dst_port = DNS_SERVER_PORT;
  116d0c:	e3a03035 	mov	r3, #53	; 0x35
  116d10:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
      dst = &dns_servers[entry->server_idx];
  116d14:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116d18:	e5d3300b 	ldrb	r3, [r3, #11]
  116d1c:	e1a02103 	lsl	r2, r3, #2
  116d20:	e30e30ac 	movw	r3, #57516	; 0xe0ac
  116d24:	e3403014 	movt	r3, #20
  116d28:	e0823003 	add	r3, r2, r3
  116d2c:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
    }
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
  116d30:	e55b201f 	ldrb	r2, [fp, #-31]	; 0xffffffe1
  116d34:	e30d3c28 	movw	r3, #56360	; 0xdc28
  116d38:	e3403014 	movt	r3, #20
  116d3c:	e7930102 	ldr	r0, [r3, r2, lsl #2]
  116d40:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  116d44:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  116d48:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  116d4c:	eb00441c 	bl	127dc4 <udp_sendto>
  116d50:	e1a03000 	mov	r3, r0
  116d54:	e54b3005 	strb	r3, [fp, #-5]

    /* free pbuf */
    pbuf_free(p);
  116d58:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  116d5c:	eb000f7a 	bl	11ab4c <pbuf_free>
  116d60:	ea000001 	b	116d6c <dns_send+0x2c4>
  } else {
    err = ERR_MEM;
  116d64:	e3e03000 	mvn	r3, #0
  116d68:	e54b3005 	strb	r3, [fp, #-5]
  }

  return err;
  116d6c:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  116d70:	e1a00003 	mov	r0, r3
  116d74:	e24bd004 	sub	sp, fp, #4
  116d78:	e8bd8800 	pop	{fp, pc}

00116d7c <dns_alloc_random_port>:

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
static struct udp_pcb*
dns_alloc_random_port(void)
{
  116d7c:	e92d4800 	push	{fp, lr}
  116d80:	e28db004 	add	fp, sp, #4
  116d84:	e24dd010 	sub	sp, sp, #16
  err_t err;
  struct udp_pcb* ret;

  ret = udp_new_ip_type(IPADDR_TYPE_ANY);
  116d88:	e3a0002e 	mov	r0, #46	; 0x2e
  116d8c:	eb00468a 	bl	1287bc <udp_new_ip_type>
  116d90:	e50b000c 	str	r0, [fp, #-12]
  if (ret == NULL) {
  116d94:	e51b300c 	ldr	r3, [fp, #-12]
  116d98:	e3530000 	cmp	r3, #0
  116d9c:	1a000001 	bne	116da8 <dns_alloc_random_port+0x2c>
    /* out of memory, have to reuse an existing pcb */
    return NULL;
  116da0:	e3a03000 	mov	r3, #0
  116da4:	ea000020 	b	116e2c <dns_alloc_random_port+0xb0>
  }
  do {
    u16_t port = (u16_t)DNS_RAND_TXID();
  116da8:	eb009a95 	bl	13d804 <rand>
  116dac:	e1a03000 	mov	r3, r0
  116db0:	e14b30be 	strh	r3, [fp, #-14]
    if (!DNS_PORT_ALLOWED(port)) {
  116db4:	e15b30be 	ldrh	r3, [fp, #-14]
  116db8:	e3530b01 	cmp	r3, #1024	; 0x400
  116dbc:	2a000002 	bcs	116dcc <dns_alloc_random_port+0x50>
      /* this port is not allowed, try again */
      err = ERR_USE;
  116dc0:	e3e03007 	mvn	r3, #7
  116dc4:	e54b3005 	strb	r3, [fp, #-5]
      continue;
  116dc8:	ea000007 	b	116dec <dns_alloc_random_port+0x70>
    }
    err = udp_bind(ret, IP_ANY_TYPE, port);
  116dcc:	e15b30be 	ldrh	r3, [fp, #-14]
  116dd0:	e1a02003 	mov	r2, r3
  116dd4:	e3081e3c 	movw	r1, #36412	; 0x8e3c
  116dd8:	e3401014 	movt	r1, #20
  116ddc:	e51b000c 	ldr	r0, [fp, #-12]
  116de0:	eb004540 	bl	1282e8 <udp_bind>
  116de4:	e1a03000 	mov	r3, r0
  116de8:	e54b3005 	strb	r3, [fp, #-5]
  } while (err == ERR_USE);
  116dec:	e15b30d5 	ldrsb	r3, [fp, #-5]
  116df0:	e3730008 	cmn	r3, #8
  116df4:	0affffeb 	beq	116da8 <dns_alloc_random_port+0x2c>
  if (err != ERR_OK) {
  116df8:	e15b30d5 	ldrsb	r3, [fp, #-5]
  116dfc:	e3530000 	cmp	r3, #0
  116e00:	0a000003 	beq	116e14 <dns_alloc_random_port+0x98>
    udp_remove(ret);
  116e04:	e51b000c 	ldr	r0, [fp, #-12]
  116e08:	eb004620 	bl	128690 <udp_remove>
    return NULL;
  116e0c:	e3a03000 	mov	r3, #0
  116e10:	ea000005 	b	116e2c <dns_alloc_random_port+0xb0>
  }
  udp_recv(ret, dns_recv, NULL);
  116e14:	e3a02000 	mov	r2, #0
  116e18:	e3071624 	movw	r1, #30244	; 0x7624
  116e1c:	e3401011 	movt	r1, #17
  116e20:	e51b000c 	ldr	r0, [fp, #-12]
  116e24:	eb004609 	bl	128650 <udp_recv>
  return ret;
  116e28:	e51b300c 	ldr	r3, [fp, #-12]
}
  116e2c:	e1a00003 	mov	r0, r3
  116e30:	e24bd004 	sub	sp, fp, #4
  116e34:	e8bd8800 	pop	{fp, pc}

00116e38 <dns_alloc_pcb>:
 *
 * @return an index into dns_pcbs
 */
static u8_t
dns_alloc_pcb(void)
{
  116e38:	e92d4810 	push	{r4, fp, lr}
  116e3c:	e28db008 	add	fp, sp, #8
  116e40:	e24dd00c 	sub	sp, sp, #12
  u8_t i;
  u8_t idx;

  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
  116e44:	e3a03000 	mov	r3, #0
  116e48:	e54b300d 	strb	r3, [fp, #-13]
  116e4c:	ea000008 	b	116e74 <dns_alloc_pcb+0x3c>
    if (dns_pcbs[i] == NULL) {
  116e50:	e55b200d 	ldrb	r2, [fp, #-13]
  116e54:	e30d3c28 	movw	r3, #56360	; 0xdc28
  116e58:	e3403014 	movt	r3, #20
  116e5c:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  116e60:	e3530000 	cmp	r3, #0
  116e64:	0a000006 	beq	116e84 <dns_alloc_pcb+0x4c>
  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
  116e68:	e55b300d 	ldrb	r3, [fp, #-13]
  116e6c:	e2833001 	add	r3, r3, #1
  116e70:	e54b300d 	strb	r3, [fp, #-13]
  116e74:	e55b300d 	ldrb	r3, [fp, #-13]
  116e78:	e3530003 	cmp	r3, #3
  116e7c:	9afffff3 	bls	116e50 <dns_alloc_pcb+0x18>
  116e80:	ea000000 	b	116e88 <dns_alloc_pcb+0x50>
      break;
  116e84:	e320f000 	nop	{0}
    }
  }
  if (i < DNS_MAX_SOURCE_PORTS) {
  116e88:	e55b300d 	ldrb	r3, [fp, #-13]
  116e8c:	e3530003 	cmp	r3, #3
  116e90:	8a000011 	bhi	116edc <dns_alloc_pcb+0xa4>
    dns_pcbs[i] = dns_alloc_random_port();
  116e94:	e55b400d 	ldrb	r4, [fp, #-13]
  116e98:	ebffffb7 	bl	116d7c <dns_alloc_random_port>
  116e9c:	e1a02000 	mov	r2, r0
  116ea0:	e30d3c28 	movw	r3, #56360	; 0xdc28
  116ea4:	e3403014 	movt	r3, #20
  116ea8:	e7832104 	str	r2, [r3, r4, lsl #2]
    if (dns_pcbs[i] != NULL) {
  116eac:	e55b200d 	ldrb	r2, [fp, #-13]
  116eb0:	e30d3c28 	movw	r3, #56360	; 0xdc28
  116eb4:	e3403014 	movt	r3, #20
  116eb8:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  116ebc:	e3530000 	cmp	r3, #0
  116ec0:	0a000005 	beq	116edc <dns_alloc_pcb+0xa4>
      /* succeeded */
      dns_last_pcb_idx = i;
  116ec4:	e30d3c38 	movw	r3, #56376	; 0xdc38
  116ec8:	e3403014 	movt	r3, #20
  116ecc:	e55b200d 	ldrb	r2, [fp, #-13]
  116ed0:	e5c32000 	strb	r2, [r3]
      return i;
  116ed4:	e55b300d 	ldrb	r3, [fp, #-13]
  116ed8:	ea000022 	b	116f68 <dns_alloc_pcb+0x130>
    }
  }
  /* if we come here, creating a new UDP pcb failed, so we have to use
     an already existing one */
  for (i = 0, idx = dns_last_pcb_idx + 1; i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
  116edc:	e3a03000 	mov	r3, #0
  116ee0:	e54b300d 	strb	r3, [fp, #-13]
  116ee4:	e30d3c38 	movw	r3, #56376	; 0xdc38
  116ee8:	e3403014 	movt	r3, #20
  116eec:	e5d33000 	ldrb	r3, [r3]
  116ef0:	e2833001 	add	r3, r3, #1
  116ef4:	e54b300e 	strb	r3, [fp, #-14]
  116ef8:	ea000016 	b	116f58 <dns_alloc_pcb+0x120>
    if (idx >= DNS_MAX_SOURCE_PORTS) {
  116efc:	e55b300e 	ldrb	r3, [fp, #-14]
  116f00:	e3530003 	cmp	r3, #3
  116f04:	9a000001 	bls	116f10 <dns_alloc_pcb+0xd8>
      idx = 0;
  116f08:	e3a03000 	mov	r3, #0
  116f0c:	e54b300e 	strb	r3, [fp, #-14]
    }
    if (dns_pcbs[idx] != NULL) {
  116f10:	e55b200e 	ldrb	r2, [fp, #-14]
  116f14:	e30d3c28 	movw	r3, #56360	; 0xdc28
  116f18:	e3403014 	movt	r3, #20
  116f1c:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  116f20:	e3530000 	cmp	r3, #0
  116f24:	0a000005 	beq	116f40 <dns_alloc_pcb+0x108>
      dns_last_pcb_idx = idx;
  116f28:	e30d3c38 	movw	r3, #56376	; 0xdc38
  116f2c:	e3403014 	movt	r3, #20
  116f30:	e55b200e 	ldrb	r2, [fp, #-14]
  116f34:	e5c32000 	strb	r2, [r3]
      return idx;
  116f38:	e55b300e 	ldrb	r3, [fp, #-14]
  116f3c:	ea000009 	b	116f68 <dns_alloc_pcb+0x130>
  for (i = 0, idx = dns_last_pcb_idx + 1; i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
  116f40:	e55b300d 	ldrb	r3, [fp, #-13]
  116f44:	e2833001 	add	r3, r3, #1
  116f48:	e54b300d 	strb	r3, [fp, #-13]
  116f4c:	e55b300e 	ldrb	r3, [fp, #-14]
  116f50:	e2833001 	add	r3, r3, #1
  116f54:	e54b300e 	strb	r3, [fp, #-14]
  116f58:	e55b300d 	ldrb	r3, [fp, #-13]
  116f5c:	e3530003 	cmp	r3, #3
  116f60:	9affffe5 	bls	116efc <dns_alloc_pcb+0xc4>
    }
  }
  return DNS_MAX_SOURCE_PORTS;
  116f64:	e3a03004 	mov	r3, #4
}
  116f68:	e1a00003 	mov	r0, r3
  116f6c:	e24bd008 	sub	sp, fp, #8
  116f70:	e8bd8810 	pop	{r4, fp, pc}

00116f74 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t* addr)
{
  116f74:	e92d4810 	push	{r4, fp, lr}
  116f78:	e28db008 	add	fp, sp, #8
  116f7c:	e24dd014 	sub	sp, sp, #20
  116f80:	e1a03000 	mov	r3, r0
  116f84:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  116f88:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
    }
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
  116f8c:	e3a03000 	mov	r3, #0
  116f90:	e54b300d 	strb	r3, [fp, #-13]
  116f94:	ea000037 	b	117078 <dns_call_found+0x104>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
  116f98:	e55b200d 	ldrb	r2, [fp, #-13]
  116f9c:	e30e307c 	movw	r3, #57468	; 0xe07c
  116fa0:	e3403014 	movt	r3, #20
  116fa4:	e3a0100c 	mov	r1, #12
  116fa8:	e0020291 	mul	r2, r1, r2
  116fac:	e0833002 	add	r3, r3, r2
  116fb0:	e5933000 	ldr	r3, [r3]
  116fb4:	e3530000 	cmp	r3, #0
  116fb8:	0a00002b 	beq	11706c <dns_call_found+0xf8>
  116fbc:	e55b200d 	ldrb	r2, [fp, #-13]
  116fc0:	e30e307c 	movw	r3, #57468	; 0xe07c
  116fc4:	e3403014 	movt	r3, #20
  116fc8:	e3a0100c 	mov	r1, #12
  116fcc:	e0020291 	mul	r2, r1, r2
  116fd0:	e0833002 	add	r3, r3, r2
  116fd4:	e2833008 	add	r3, r3, #8
  116fd8:	e5d33000 	ldrb	r3, [r3]
  116fdc:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
  116fe0:	e1520003 	cmp	r2, r3
  116fe4:	1a000020 	bne	11706c <dns_call_found+0xf8>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
  116fe8:	e55b200d 	ldrb	r2, [fp, #-13]
  116fec:	e30e307c 	movw	r3, #57468	; 0xe07c
  116ff0:	e3403014 	movt	r3, #20
  116ff4:	e3a0100c 	mov	r1, #12
  116ff8:	e0020291 	mul	r2, r1, r2
  116ffc:	e0833002 	add	r3, r3, r2
  117000:	e5934000 	ldr	r4, [r3]
  117004:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  117008:	e3a02e11 	mov	r2, #272	; 0x110
  11700c:	e0030392 	mul	r3, r2, r3
  117010:	e2832010 	add	r2, r3, #16
  117014:	e30d3c3c 	movw	r3, #56380	; 0xdc3c
  117018:	e3403014 	movt	r3, #20
  11701c:	e0820003 	add	r0, r2, r3
  117020:	e55b200d 	ldrb	r2, [fp, #-13]
  117024:	e30e307c 	movw	r3, #57468	; 0xe07c
  117028:	e3403014 	movt	r3, #20
  11702c:	e3a0100c 	mov	r1, #12
  117030:	e0020291 	mul	r2, r1, r2
  117034:	e0833002 	add	r3, r3, r2
  117038:	e2833004 	add	r3, r3, #4
  11703c:	e5933000 	ldr	r3, [r3]
  117040:	e1a02003 	mov	r2, r3
  117044:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  117048:	e12fff34 	blx	r4
      /* flush this entry */
      dns_requests[i].found = NULL;
  11704c:	e55b200d 	ldrb	r2, [fp, #-13]
  117050:	e30e307c 	movw	r3, #57468	; 0xe07c
  117054:	e3403014 	movt	r3, #20
  117058:	e3a0100c 	mov	r1, #12
  11705c:	e0020291 	mul	r2, r1, r2
  117060:	e0833002 	add	r3, r3, r2
  117064:	e3a02000 	mov	r2, #0
  117068:	e5832000 	str	r2, [r3]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
  11706c:	e55b300d 	ldrb	r3, [fp, #-13]
  117070:	e2833001 	add	r3, r3, #1
  117074:	e54b300d 	strb	r3, [fp, #-13]
  117078:	e55b300d 	ldrb	r3, [fp, #-13]
  11707c:	e3530003 	cmp	r3, #3
  117080:	9affffc4 	bls	116f98 <dns_call_found+0x24>
  }
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
  117084:	e3a03000 	mov	r3, #0
  117088:	e54b300d 	strb	r3, [fp, #-13]
  11708c:	ea00002d 	b	117148 <dns_call_found+0x1d4>
    if (i == idx) {
  117090:	e55b200d 	ldrb	r2, [fp, #-13]
  117094:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  117098:	e1520003 	cmp	r2, r3
  11709c:	0a000025 	beq	117138 <dns_call_found+0x1c4>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
  1170a0:	e55b200d 	ldrb	r2, [fp, #-13]
  1170a4:	e30d3c3c 	movw	r3, #56380	; 0xdc3c
  1170a8:	e3403014 	movt	r3, #20
  1170ac:	e3a01e11 	mov	r1, #272	; 0x110
  1170b0:	e0020291 	mul	r2, r1, r2
  1170b4:	e0833002 	add	r3, r3, r2
  1170b8:	e283300a 	add	r3, r3, #10
  1170bc:	e5d33000 	ldrb	r3, [r3]
  1170c0:	e3530002 	cmp	r3, #2
  1170c4:	1a00001c 	bne	11713c <dns_call_found+0x1c8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
  1170c8:	e55b200d 	ldrb	r2, [fp, #-13]
  1170cc:	e30d3c3c 	movw	r3, #56380	; 0xdc3c
  1170d0:	e3403014 	movt	r3, #20
  1170d4:	e3a01e11 	mov	r1, #272	; 0x110
  1170d8:	e0020291 	mul	r2, r1, r2
  1170dc:	e0833002 	add	r3, r3, r2
  1170e0:	e283300f 	add	r3, r3, #15
  1170e4:	e5d32000 	ldrb	r2, [r3]
  1170e8:	e55b1015 	ldrb	r1, [fp, #-21]	; 0xffffffeb
  1170ec:	e30d3c3c 	movw	r3, #56380	; 0xdc3c
  1170f0:	e3403014 	movt	r3, #20
  1170f4:	e3a00e11 	mov	r0, #272	; 0x110
  1170f8:	e0010190 	mul	r1, r0, r1
  1170fc:	e0833001 	add	r3, r3, r1
  117100:	e283300f 	add	r3, r3, #15
  117104:	e5d33000 	ldrb	r3, [r3]
  117108:	e1520003 	cmp	r2, r3
  11710c:	1a00000a 	bne	11713c <dns_call_found+0x1c8>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
  117110:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
  117114:	e30d3c3c 	movw	r3, #56380	; 0xdc3c
  117118:	e3403014 	movt	r3, #20
  11711c:	e3a01e11 	mov	r1, #272	; 0x110
  117120:	e0020291 	mul	r2, r1, r2
  117124:	e0833002 	add	r3, r3, r2
  117128:	e283300f 	add	r3, r3, #15
  11712c:	e3a02004 	mov	r2, #4
  117130:	e5c32000 	strb	r2, [r3]
        break;
  117134:	ea000006 	b	117154 <dns_call_found+0x1e0>
      continue; /* only check other requests */
  117138:	e320f000 	nop	{0}
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
  11713c:	e55b300d 	ldrb	r3, [fp, #-13]
  117140:	e2833001 	add	r3, r3, #1
  117144:	e54b300d 	strb	r3, [fp, #-13]
  117148:	e55b300d 	ldrb	r3, [fp, #-13]
  11714c:	e3530003 	cmp	r3, #3
  117150:	9affffce 	bls	117090 <dns_call_found+0x11c>
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
  117154:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
  117158:	e30d3c3c 	movw	r3, #56380	; 0xdc3c
  11715c:	e3403014 	movt	r3, #20
  117160:	e3a01e11 	mov	r1, #272	; 0x110
  117164:	e0020291 	mul	r2, r1, r2
  117168:	e0833002 	add	r3, r3, r2
  11716c:	e283300f 	add	r3, r3, #15
  117170:	e5d33000 	ldrb	r3, [r3]
  117174:	e3530003 	cmp	r3, #3
  117178:	8a000023 	bhi	11720c <dns_call_found+0x298>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
  11717c:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
  117180:	e30d3c3c 	movw	r3, #56380	; 0xdc3c
  117184:	e3403014 	movt	r3, #20
  117188:	e3a01e11 	mov	r1, #272	; 0x110
  11718c:	e0020291 	mul	r2, r1, r2
  117190:	e0833002 	add	r3, r3, r2
  117194:	e283300f 	add	r3, r3, #15
  117198:	e5d33000 	ldrb	r3, [r3]
  11719c:	e1a02003 	mov	r2, r3
  1171a0:	e30d3c28 	movw	r3, #56360	; 0xdc28
  1171a4:	e3403014 	movt	r3, #20
  1171a8:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  1171ac:	e1a00003 	mov	r0, r3
  1171b0:	eb004536 	bl	128690 <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
  1171b4:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
  1171b8:	e30d3c3c 	movw	r3, #56380	; 0xdc3c
  1171bc:	e3403014 	movt	r3, #20
  1171c0:	e3a01e11 	mov	r1, #272	; 0x110
  1171c4:	e0020291 	mul	r2, r1, r2
  1171c8:	e0833002 	add	r3, r3, r2
  1171cc:	e283300f 	add	r3, r3, #15
  1171d0:	e5d33000 	ldrb	r3, [r3]
  1171d4:	e1a01003 	mov	r1, r3
  1171d8:	e30d3c28 	movw	r3, #56360	; 0xdc28
  1171dc:	e3403014 	movt	r3, #20
  1171e0:	e3a02000 	mov	r2, #0
  1171e4:	e7832101 	str	r2, [r3, r1, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
  1171e8:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
  1171ec:	e30d3c3c 	movw	r3, #56380	; 0xdc3c
  1171f0:	e3403014 	movt	r3, #20
  1171f4:	e3a01e11 	mov	r1, #272	; 0x110
  1171f8:	e0020291 	mul	r2, r1, r2
  1171fc:	e0833002 	add	r3, r3, r2
  117200:	e283300f 	add	r3, r3, #15
  117204:	e3a02004 	mov	r2, #4
  117208:	e5c32000 	strb	r2, [r3]
  }
#endif
}
  11720c:	e320f000 	nop	{0}
  117210:	e24bd008 	sub	sp, fp, #8
  117214:	e8bd8810 	pop	{r4, fp, pc}

00117218 <dns_create_txid>:

/* Create a query transmission ID that is unique for all outstanding queries */
static u16_t
dns_create_txid(void)
{
  117218:	e92d4800 	push	{fp, lr}
  11721c:	e28db004 	add	fp, sp, #4
  117220:	e24dd008 	sub	sp, sp, #8
  u16_t txid;
  u8_t i;

again:
  txid = (u16_t)DNS_RAND_TXID();
  117224:	eb009976 	bl	13d804 <rand>
  117228:	e1a03000 	mov	r3, r0
  11722c:	e14b30b8 	strh	r3, [fp, #-8]

  /* check whether the ID is unique */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
  117230:	e3a03000 	mov	r3, #0
  117234:	e54b3005 	strb	r3, [fp, #-5]
  117238:	ea000018 	b	1172a0 <dns_create_txid+0x88>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
  11723c:	e55b2005 	ldrb	r2, [fp, #-5]
  117240:	e30d3c3c 	movw	r3, #56380	; 0xdc3c
  117244:	e3403014 	movt	r3, #20
  117248:	e3a01e11 	mov	r1, #272	; 0x110
  11724c:	e0020291 	mul	r2, r1, r2
  117250:	e0833002 	add	r3, r3, r2
  117254:	e283300a 	add	r3, r3, #10
  117258:	e5d33000 	ldrb	r3, [r3]
  11725c:	e3530002 	cmp	r3, #2
  117260:	1a00000b 	bne	117294 <dns_create_txid+0x7c>
        (dns_table[i].txid == txid)) {
  117264:	e55b2005 	ldrb	r2, [fp, #-5]
  117268:	e30d3c3c 	movw	r3, #56380	; 0xdc3c
  11726c:	e3403014 	movt	r3, #20
  117270:	e3a01e11 	mov	r1, #272	; 0x110
  117274:	e0020291 	mul	r2, r1, r2
  117278:	e0833002 	add	r3, r3, r2
  11727c:	e2833008 	add	r3, r3, #8
  117280:	e1d330b0 	ldrh	r3, [r3]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
  117284:	e15b20b8 	ldrh	r2, [fp, #-8]
  117288:	e1520003 	cmp	r2, r3
  11728c:	1a000000 	bne	117294 <dns_create_txid+0x7c>
      /* ID already used by another pending query */
      goto again;
  117290:	eaffffe3 	b	117224 <dns_create_txid+0xc>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
  117294:	e55b3005 	ldrb	r3, [fp, #-5]
  117298:	e2833001 	add	r3, r3, #1
  11729c:	e54b3005 	strb	r3, [fp, #-5]
  1172a0:	e55b3005 	ldrb	r3, [fp, #-5]
  1172a4:	e3530003 	cmp	r3, #3
  1172a8:	9affffe3 	bls	11723c <dns_create_txid+0x24>
    }
  }

  return txid;
  1172ac:	e15b30b8 	ldrh	r3, [fp, #-8]
}
  1172b0:	e1a00003 	mov	r0, r3
  1172b4:	e24bd004 	sub	sp, fp, #4
  1172b8:	e8bd8800 	pop	{fp, pc}

001172bc <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
  1172bc:	e92d4800 	push	{fp, lr}
  1172c0:	e28db004 	add	fp, sp, #4
  1172c4:	e24dd010 	sub	sp, sp, #16
  1172c8:	e1a03000 	mov	r3, r0
  1172cc:	e54b300d 	strb	r3, [fp, #-13]
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
  1172d0:	e55b300d 	ldrb	r3, [fp, #-13]
  1172d4:	e3a02e11 	mov	r2, #272	; 0x110
  1172d8:	e0020392 	mul	r2, r2, r3
  1172dc:	e30d3c3c 	movw	r3, #56380	; 0xdc3c
  1172e0:	e3403014 	movt	r3, #20
  1172e4:	e0823003 	add	r3, r2, r3
  1172e8:	e50b3008 	str	r3, [fp, #-8]

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
  1172ec:	e55b300d 	ldrb	r3, [fp, #-13]
  1172f0:	e3530003 	cmp	r3, #3
  1172f4:	9a000006 	bls	117314 <dns_check_entry+0x58>
  1172f8:	e3060600 	movw	r0, #26112	; 0x6600
  1172fc:	e3400014 	movt	r0, #20
  117300:	ebffaf83 	bl	103114 <rt_kprintf>
  117304:	e3001405 	movw	r1, #1029	; 0x405
  117308:	e30605d4 	movw	r0, #26068	; 0x65d4
  11730c:	e3400014 	movt	r0, #20
  117310:	ebffcdff 	bl	10ab14 <sys_arch_assert>

  switch (entry->state) {
  117314:	e51b3008 	ldr	r3, [fp, #-8]
  117318:	e5d3300a 	ldrb	r3, [r3, #10]
  11731c:	e3530003 	cmp	r3, #3
  117320:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  117324:	ea00006b 	b	1174d8 <dns_check_entry+0x21c>
  117328:	001174f8 	.word	0x001174f8
  11732c:	00117338 	.word	0x00117338
  117330:	00117394 	.word	0x00117394
  117334:	00117494 	.word	0x00117494
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
  117338:	ebffffb6 	bl	117218 <dns_create_txid>
  11733c:	e1a03000 	mov	r3, r0
  117340:	e1a02003 	mov	r2, r3
  117344:	e51b3008 	ldr	r3, [fp, #-8]
  117348:	e1c320b8 	strh	r2, [r3, #8]
      entry->state = DNS_STATE_ASKING;
  11734c:	e51b3008 	ldr	r3, [fp, #-8]
  117350:	e3a02002 	mov	r2, #2
  117354:	e5c3200a 	strb	r2, [r3, #10]
      entry->server_idx = 0;
  117358:	e51b3008 	ldr	r3, [fp, #-8]
  11735c:	e3a02000 	mov	r2, #0
  117360:	e5c3200b 	strb	r2, [r3, #11]
      entry->tmr = 1;
  117364:	e51b3008 	ldr	r3, [fp, #-8]
  117368:	e3a02001 	mov	r2, #1
  11736c:	e5c3200c 	strb	r2, [r3, #12]
      entry->retries = 0;
  117370:	e51b3008 	ldr	r3, [fp, #-8]
  117374:	e3a02000 	mov	r2, #0
  117378:	e5c3200d 	strb	r2, [r3, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
  11737c:	e55b300d 	ldrb	r3, [fp, #-13]
  117380:	e1a00003 	mov	r0, r3
  117384:	ebfffdc7 	bl	116aa8 <dns_send>
  117388:	e1a03000 	mov	r3, r0
  11738c:	e54b3009 	strb	r3, [fp, #-9]
      if (err != ERR_OK) {
        LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                    ("dns_send returned error: %s\n", lwip_strerr(err)));
      }
      break;
  117390:	ea00005d 	b	11750c <dns_check_entry+0x250>
    case DNS_STATE_ASKING:
      if (--entry->tmr == 0) {
  117394:	e51b3008 	ldr	r3, [fp, #-8]
  117398:	e5d3300c 	ldrb	r3, [r3, #12]
  11739c:	e2433001 	sub	r3, r3, #1
  1173a0:	e6ef2073 	uxtb	r2, r3
  1173a4:	e51b3008 	ldr	r3, [fp, #-8]
  1173a8:	e5c3200c 	strb	r2, [r3, #12]
  1173ac:	e51b3008 	ldr	r3, [fp, #-8]
  1173b0:	e5d3300c 	ldrb	r3, [r3, #12]
  1173b4:	e3530000 	cmp	r3, #0
  1173b8:	1a000050 	bne	117500 <dns_check_entry+0x244>
        if (++entry->retries == DNS_MAX_RETRIES) {
  1173bc:	e51b3008 	ldr	r3, [fp, #-8]
  1173c0:	e5d3300d 	ldrb	r3, [r3, #13]
  1173c4:	e2833001 	add	r3, r3, #1
  1173c8:	e6ef2073 	uxtb	r2, r3
  1173cc:	e51b3008 	ldr	r3, [fp, #-8]
  1173d0:	e5c3200d 	strb	r2, [r3, #13]
  1173d4:	e51b3008 	ldr	r3, [fp, #-8]
  1173d8:	e5d3300d 	ldrb	r3, [r3, #13]
  1173dc:	e3530004 	cmp	r3, #4
  1173e0:	1a000021 	bne	11746c <dns_check_entry+0x1b0>
          if ((entry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[entry->server_idx + 1])
  1173e4:	e51b3008 	ldr	r3, [fp, #-8]
  1173e8:	e5d3300b 	ldrb	r3, [r3, #11]
  1173ec:	e2833001 	add	r3, r3, #1
  1173f0:	e3530001 	cmp	r3, #1
  1173f4:	ca000014 	bgt	11744c <dns_check_entry+0x190>
  1173f8:	e51b3008 	ldr	r3, [fp, #-8]
  1173fc:	e5d3300b 	ldrb	r3, [r3, #11]
  117400:	e2832001 	add	r2, r3, #1
  117404:	e30e30ac 	movw	r3, #57516	; 0xe0ac
  117408:	e3403014 	movt	r3, #20
  11740c:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  117410:	e3530000 	cmp	r3, #0
  117414:	0a00000c 	beq	11744c <dns_check_entry+0x190>
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
            && !entry->is_mdns
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
            ) {
            /* change of server */
            entry->server_idx++;
  117418:	e51b3008 	ldr	r3, [fp, #-8]
  11741c:	e5d3300b 	ldrb	r3, [r3, #11]
  117420:	e2833001 	add	r3, r3, #1
  117424:	e6ef2073 	uxtb	r2, r3
  117428:	e51b3008 	ldr	r3, [fp, #-8]
  11742c:	e5c3200b 	strb	r2, [r3, #11]
            entry->tmr = 1;
  117430:	e51b3008 	ldr	r3, [fp, #-8]
  117434:	e3a02001 	mov	r2, #1
  117438:	e5c3200c 	strb	r2, [r3, #12]
            entry->retries = 0;
  11743c:	e51b3008 	ldr	r3, [fp, #-8]
  117440:	e3a02000 	mov	r2, #0
  117444:	e5c3200d 	strb	r2, [r3, #13]
  117448:	ea00000b 	b	11747c <dns_check_entry+0x1c0>
          } else {
            LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": timeout\n", entry->name));
            /* call specified callback function if provided */
            dns_call_found(i, NULL);
  11744c:	e55b300d 	ldrb	r3, [fp, #-13]
  117450:	e3a01000 	mov	r1, #0
  117454:	e1a00003 	mov	r0, r3
  117458:	ebfffec5 	bl	116f74 <dns_call_found>
            /* flush this entry */
            entry->state = DNS_STATE_UNUSED;
  11745c:	e51b3008 	ldr	r3, [fp, #-8]
  117460:	e3a02000 	mov	r2, #0
  117464:	e5c3200a 	strb	r2, [r3, #10]
            break;
  117468:	ea000027 	b	11750c <dns_check_entry+0x250>
          }
        } else {
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
  11746c:	e51b3008 	ldr	r3, [fp, #-8]
  117470:	e5d3200d 	ldrb	r2, [r3, #13]
  117474:	e51b3008 	ldr	r3, [fp, #-8]
  117478:	e5c3200c 	strb	r2, [r3, #12]
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
  11747c:	e55b300d 	ldrb	r3, [fp, #-13]
  117480:	e1a00003 	mov	r0, r3
  117484:	ebfffd87 	bl	116aa8 <dns_send>
  117488:	e1a03000 	mov	r3, r0
  11748c:	e54b3009 	strb	r3, [fp, #-9]
        if (err != ERR_OK) {
          LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                      ("dns_send returned error: %s\n", lwip_strerr(err)));
        }
      }
      break;
  117490:	ea00001a 	b	117500 <dns_check_entry+0x244>
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
  117494:	e51b3008 	ldr	r3, [fp, #-8]
  117498:	e5933000 	ldr	r3, [r3]
  11749c:	e3530000 	cmp	r3, #0
  1174a0:	0a000008 	beq	1174c8 <dns_check_entry+0x20c>
  1174a4:	e51b3008 	ldr	r3, [fp, #-8]
  1174a8:	e5933000 	ldr	r3, [r3]
  1174ac:	e2432001 	sub	r2, r3, #1
  1174b0:	e51b3008 	ldr	r3, [fp, #-8]
  1174b4:	e5832000 	str	r2, [r3]
  1174b8:	e51b3008 	ldr	r3, [fp, #-8]
  1174bc:	e5933000 	ldr	r3, [r3]
  1174c0:	e3530000 	cmp	r3, #0
  1174c4:	1a00000f 	bne	117508 <dns_check_entry+0x24c>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
  1174c8:	e51b3008 	ldr	r3, [fp, #-8]
  1174cc:	e3a02000 	mov	r2, #0
  1174d0:	e5c3200a 	strb	r2, [r3, #10]
      }
      break;
  1174d4:	ea00000b 	b	117508 <dns_check_entry+0x24c>
    case DNS_STATE_UNUSED:
      /* nothing to do */
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
  1174d8:	e306061c 	movw	r0, #26140	; 0x661c
  1174dc:	e3400014 	movt	r0, #20
  1174e0:	ebffaf0b 	bl	103114 <rt_kprintf>
  1174e4:	e3001444 	movw	r1, #1092	; 0x444
  1174e8:	e30605d4 	movw	r0, #26068	; 0x65d4
  1174ec:	e3400014 	movt	r0, #20
  1174f0:	ebffcd87 	bl	10ab14 <sys_arch_assert>
      break;
  1174f4:	ea000004 	b	11750c <dns_check_entry+0x250>
      break;
  1174f8:	e320f000 	nop	{0}
  1174fc:	ea000002 	b	11750c <dns_check_entry+0x250>
      break;
  117500:	e320f000 	nop	{0}
  117504:	ea000000 	b	11750c <dns_check_entry+0x250>
      break;
  117508:	e320f000 	nop	{0}
  }
}
  11750c:	e320f000 	nop	{0}
  117510:	e24bd004 	sub	sp, fp, #4
  117514:	e8bd8800 	pop	{fp, pc}

00117518 <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
  117518:	e92d4800 	push	{fp, lr}
  11751c:	e28db004 	add	fp, sp, #4
  117520:	e24dd008 	sub	sp, sp, #8
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
  117524:	e3a03000 	mov	r3, #0
  117528:	e54b3005 	strb	r3, [fp, #-5]
  11752c:	ea000005 	b	117548 <dns_check_entries+0x30>
    dns_check_entry(i);
  117530:	e55b3005 	ldrb	r3, [fp, #-5]
  117534:	e1a00003 	mov	r0, r3
  117538:	ebffff5f 	bl	1172bc <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
  11753c:	e55b3005 	ldrb	r3, [fp, #-5]
  117540:	e2833001 	add	r3, r3, #1
  117544:	e54b3005 	strb	r3, [fp, #-5]
  117548:	e55b3005 	ldrb	r3, [fp, #-5]
  11754c:	e3530003 	cmp	r3, #3
  117550:	9afffff6 	bls	117530 <dns_check_entries+0x18>
  }
}
  117554:	e320f000 	nop	{0}
  117558:	e24bd004 	sub	sp, fp, #4
  11755c:	e8bd8800 	pop	{fp, pc}

00117560 <dns_correct_response>:
/**
 * Save TTL and call dns_call_found for correct response.
 */
static void
dns_correct_response(u8_t idx, u32_t ttl)
{
  117560:	e92d4800 	push	{fp, lr}
  117564:	e28db004 	add	fp, sp, #4
  117568:	e24dd010 	sub	sp, sp, #16
  11756c:	e1a03000 	mov	r3, r0
  117570:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  117574:	e54b300d 	strb	r3, [fp, #-13]
  struct dns_table_entry *entry = &dns_table[idx];
  117578:	e55b300d 	ldrb	r3, [fp, #-13]
  11757c:	e3a02e11 	mov	r2, #272	; 0x110
  117580:	e0020392 	mul	r2, r2, r3
  117584:	e30d3c3c 	movw	r3, #56380	; 0xdc3c
  117588:	e3403014 	movt	r3, #20
  11758c:	e0823003 	add	r3, r2, r3
  117590:	e50b3008 	str	r3, [fp, #-8]

  entry->state = DNS_STATE_DONE;
  117594:	e51b3008 	ldr	r3, [fp, #-8]
  117598:	e3a02003 	mov	r2, #3
  11759c:	e5c3200a 	strb	r2, [r3, #10]
  LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response = ", entry->name));
  ip_addr_debug_print(DNS_DEBUG, (&(entry->ipaddr)));
  LWIP_DEBUGF(DNS_DEBUG, ("\n"));

  /* read the answer resource record's TTL, and maximize it if needed */
  entry->ttl = ttl;
  1175a0:	e51b3008 	ldr	r3, [fp, #-8]
  1175a4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1175a8:	e5832000 	str	r2, [r3]
  if (entry->ttl > DNS_MAX_TTL) {
  1175ac:	e51b3008 	ldr	r3, [fp, #-8]
  1175b0:	e5932000 	ldr	r2, [r3]
  1175b4:	e3a03dea 	mov	r3, #14976	; 0x3a80
  1175b8:	e3403009 	movt	r3, #9
  1175bc:	e1520003 	cmp	r2, r3
  1175c0:	9a000003 	bls	1175d4 <dns_correct_response+0x74>
    entry->ttl = DNS_MAX_TTL;
  1175c4:	e51b2008 	ldr	r2, [fp, #-8]
  1175c8:	e3a03dea 	mov	r3, #14976	; 0x3a80
  1175cc:	e3403009 	movt	r3, #9
  1175d0:	e5823000 	str	r3, [r2]
  }
  dns_call_found(idx, &entry->ipaddr);
  1175d4:	e51b3008 	ldr	r3, [fp, #-8]
  1175d8:	e2832004 	add	r2, r3, #4
  1175dc:	e55b300d 	ldrb	r3, [fp, #-13]
  1175e0:	e1a01002 	mov	r1, r2
  1175e4:	e1a00003 	mov	r0, r3
  1175e8:	ebfffe61 	bl	116f74 <dns_call_found>

  if (entry->ttl == 0) {
  1175ec:	e51b3008 	ldr	r3, [fp, #-8]
  1175f0:	e5933000 	ldr	r3, [r3]
  1175f4:	e3530000 	cmp	r3, #0
  1175f8:	1a000006 	bne	117618 <dns_correct_response+0xb8>
    /* RFC 883, page 29: "Zero values are
       interpreted to mean that the RR can only be used for the
       transaction in progress, and should not be cached."
       -> flush this entry now */
    /* entry reused during callback? */
    if (entry->state == DNS_STATE_DONE) {
  1175fc:	e51b3008 	ldr	r3, [fp, #-8]
  117600:	e5d3300a 	ldrb	r3, [r3, #10]
  117604:	e3530003 	cmp	r3, #3
  117608:	1a000002 	bne	117618 <dns_correct_response+0xb8>
      entry->state = DNS_STATE_UNUSED;
  11760c:	e51b3008 	ldr	r3, [fp, #-8]
  117610:	e3a02000 	mov	r2, #0
  117614:	e5c3200a 	strb	r2, [r3, #10]
    }
  }
}
  117618:	e320f000 	nop	{0}
  11761c:	e24bd004 	sub	sp, fp, #4
  117620:	e8bd8800 	pop	{fp, pc}

00117624 <dns_recv>:
/**
 * Receive input function for DNS response packets arriving for the dns UDP pcb.
 */
static void
dns_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
  117624:	e92d4810 	push	{r4, fp, lr}
  117628:	e28db008 	add	fp, sp, #8
  11762c:	e24dd044 	sub	sp, sp, #68	; 0x44
  117630:	e50b0040 	str	r0, [fp, #-64]	; 0xffffffc0
  117634:	e50b1044 	str	r1, [fp, #-68]	; 0xffffffbc
  117638:	e50b2048 	str	r2, [fp, #-72]	; 0xffffffb8
  11763c:	e50b304c 	str	r3, [fp, #-76]	; 0xffffffb4
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(port);

  /* is the dns message big enough ? */
  if (p->tot_len < (SIZEOF_DNS_HDR + SIZEOF_DNS_QUERY)) {
  117640:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
  117644:	e1d330b8 	ldrh	r3, [r3, #8]
  117648:	e353000f 	cmp	r3, #15
  11764c:	9a0000c8 	bls	117974 <dns_recv+0x350>
    /* free pbuf and return */
    goto memerr;
  }

  /* copy dns payload inside static buffer for processing */
  if (pbuf_copy_partial(p, &hdr, SIZEOF_DNS_HDR, 0) == SIZEOF_DNS_HDR) {
  117650:	e24b1028 	sub	r1, fp, #40	; 0x28
  117654:	e3a03000 	mov	r3, #0
  117658:	e3a0200c 	mov	r2, #12
  11765c:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  117660:	eb000f44 	bl	11b378 <pbuf_copy_partial>
  117664:	e1a03000 	mov	r3, r0
  117668:	e353000c 	cmp	r3, #12
  11766c:	1a0000c2 	bne	11797c <dns_recv+0x358>
    /* Match the ID in the DNS header with the name table. */
    txid = lwip_htons(hdr.id);
  117670:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  117674:	e1a00003 	mov	r0, r3
  117678:	ebfffafc 	bl	116270 <lwip_htons>
  11767c:	e1a03000 	mov	r3, r0
  117680:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
  117684:	e3a03000 	mov	r3, #0
  117688:	e54b300d 	strb	r3, [fp, #-13]
  11768c:	ea0000b4 	b	117964 <dns_recv+0x340>
      const struct dns_table_entry *entry = &dns_table[i];
  117690:	e55b300d 	ldrb	r3, [fp, #-13]
  117694:	e3a02e11 	mov	r2, #272	; 0x110
  117698:	e0020392 	mul	r2, r2, r3
  11769c:	e30d3c3c 	movw	r3, #56380	; 0xdc3c
  1176a0:	e3403014 	movt	r3, #20
  1176a4:	e0823003 	add	r3, r2, r3
  1176a8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
      if ((entry->state == DNS_STATE_ASKING) &&
  1176ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1176b0:	e5d3300a 	ldrb	r3, [r3, #10]
  1176b4:	e3530002 	cmp	r3, #2
  1176b8:	1a0000a6 	bne	117958 <dns_recv+0x334>
          (entry->txid == txid)) {
  1176bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1176c0:	e1d330b8 	ldrh	r3, [r3, #8]
      if ((entry->state == DNS_STATE_ASKING) &&
  1176c4:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
  1176c8:	e1520003 	cmp	r2, r3
  1176cc:	1a0000a1 	bne	117958 <dns_recv+0x334>

        /* We only care about the question(s) and the answers. The authrr
           and the extrarr are simply discarded. */
        nquestions = lwip_htons(hdr.numquestions);
  1176d0:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  1176d4:	e1a00003 	mov	r0, r3
  1176d8:	ebfffae4 	bl	116270 <lwip_htons>
  1176dc:	e1a03000 	mov	r3, r0
  1176e0:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
        nanswers   = lwip_htons(hdr.numanswers);
  1176e4:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  1176e8:	e1a00003 	mov	r0, r3
  1176ec:	ebfffadf 	bl	116270 <lwip_htons>
  1176f0:	e1a03000 	mov	r3, r0
  1176f4:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee

        /* Check for correct response. */
        if ((hdr.flags1 & DNS_FLAG1_RESPONSE) == 0) {
  1176f8:	e55b3026 	ldrb	r3, [fp, #-38]	; 0xffffffda
  1176fc:	e6af3073 	sxtb	r3, r3
  117700:	e3530000 	cmp	r3, #0
  117704:	aa00009e 	bge	117984 <dns_recv+0x360>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": not a response\n", entry->name));
          goto memerr; /* ignore this packet */
        }
        if (nquestions != 1) {
  117708:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  11770c:	e3530001 	cmp	r3, #1
  117710:	1a00009d 	bne	11798c <dns_recv+0x368>
        if (!entry->is_mdns)
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
        {
          /* Check whether response comes from the same network address to which the
             question was sent. (RFC 5452) */
          if (!ip_addr_cmp(addr, &dns_servers[entry->server_idx])) {
  117714:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  117718:	e5932000 	ldr	r2, [r3]
  11771c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  117720:	e5d3300b 	ldrb	r3, [r3, #11]
  117724:	e1a01003 	mov	r1, r3
  117728:	e30e30ac 	movw	r3, #57516	; 0xe0ac
  11772c:	e3403014 	movt	r3, #20
  117730:	e7933101 	ldr	r3, [r3, r1, lsl #2]
  117734:	e1520003 	cmp	r2, r3
  117738:	1a000095 	bne	117994 <dns_recv+0x370>
          }
        }

        /* Check if the name in the "question" part match with the name in the entry and
           skip it if equal. */
        res_idx = dns_compare_name(entry->name, p, SIZEOF_DNS_HDR);
  11773c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  117740:	e2833010 	add	r3, r3, #16
  117744:	e3a0200c 	mov	r2, #12
  117748:	e51b1048 	ldr	r1, [fp, #-72]	; 0xffffffb8
  11774c:	e1a00003 	mov	r0, r3
  117750:	ebfffc4a 	bl	116880 <dns_compare_name>
  117754:	e1a03000 	mov	r3, r0
  117758:	e14b31b0 	strh	r3, [fp, #-16]
        if (res_idx == 0xFFFF) {
  11775c:	e15b31b0 	ldrh	r3, [fp, #-16]
  117760:	e30f2fff 	movw	r2, #65535	; 0xffff
  117764:	e1530002 	cmp	r3, r2
  117768:	0a00008b 	beq	11799c <dns_recv+0x378>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response not match to query\n", entry->name));
          goto memerr; /* ignore this packet */
        }

        /* check if "question" part matches the request */
        if (pbuf_copy_partial(p, &qry, SIZEOF_DNS_QUERY, res_idx) != SIZEOF_DNS_QUERY) {
  11776c:	e15b31b0 	ldrh	r3, [fp, #-16]
  117770:	e24b1038 	sub	r1, fp, #56	; 0x38
  117774:	e3a02004 	mov	r2, #4
  117778:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  11777c:	eb000efd 	bl	11b378 <pbuf_copy_partial>
  117780:	e1a03000 	mov	r3, r0
  117784:	e3530004 	cmp	r3, #4
  117788:	1a000085 	bne	1179a4 <dns_recv+0x380>
          goto memerr; /* ignore this packet */
        }
        if ((qry.cls != PP_HTONS(DNS_RRCLASS_IN)) ||
  11778c:	e15b33b6 	ldrh	r3, [fp, #-54]	; 0xffffffca
  117790:	e3530c01 	cmp	r3, #256	; 0x100
  117794:	1a000078 	bne	11797c <dns_recv+0x358>
          (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
          (!LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_A)))) {
  117798:	e15b33b8 	ldrh	r3, [fp, #-56]	; 0xffffffc8
          (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
  11779c:	e3530c01 	cmp	r3, #256	; 0x100
  1177a0:	1a000075 	bne	11797c <dns_recv+0x358>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response not match to query\n", entry->name));
          goto memerr; /* ignore this packet */
        }
        /* skip the rest of the "question" part */
        res_idx += SIZEOF_DNS_QUERY;
  1177a4:	e15b31b0 	ldrh	r3, [fp, #-16]
  1177a8:	e2833004 	add	r3, r3, #4
  1177ac:	e14b31b0 	strh	r3, [fp, #-16]

        /* Check for error. If so, call callback to inform. */
        if (hdr.flags2 & DNS_FLAG2_ERR_MASK) {
  1177b0:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  1177b4:	e203300f 	and	r3, r3, #15
  1177b8:	e3530000 	cmp	r3, #0
  1177bc:	1a000055 	bne	117918 <dns_recv+0x2f4>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": error in flags\n", entry->name));
        } else {
          while ((nanswers > 0) && (res_idx < p->tot_len)) {
  1177c0:	ea00004c 	b	1178f8 <dns_recv+0x2d4>
            /* skip answer resource record's host name */
            res_idx = dns_skip_name(p, res_idx);
  1177c4:	e15b31b0 	ldrh	r3, [fp, #-16]
  1177c8:	e1a01003 	mov	r1, r3
  1177cc:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  1177d0:	ebfffc79 	bl	1169bc <dns_skip_name>
  1177d4:	e1a03000 	mov	r3, r0
  1177d8:	e14b31b0 	strh	r3, [fp, #-16]
            if (res_idx == 0xFFFF) {
  1177dc:	e15b31b0 	ldrh	r3, [fp, #-16]
  1177e0:	e30f2fff 	movw	r2, #65535	; 0xffff
  1177e4:	e1530002 	cmp	r3, r2
  1177e8:	0a00006f 	beq	1179ac <dns_recv+0x388>
              goto memerr; /* ignore this packet */
            }

            /* Check for IP address type and Internet class. Others are discarded. */
            if (pbuf_copy_partial(p, &ans, SIZEOF_DNS_ANSWER, res_idx) != SIZEOF_DNS_ANSWER) {
  1177ec:	e15b31b0 	ldrh	r3, [fp, #-16]
  1177f0:	e24b1034 	sub	r1, fp, #52	; 0x34
  1177f4:	e3a0200a 	mov	r2, #10
  1177f8:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  1177fc:	eb000edd 	bl	11b378 <pbuf_copy_partial>
  117800:	e1a03000 	mov	r3, r0
  117804:	e353000a 	cmp	r3, #10
  117808:	1a000069 	bne	1179b4 <dns_recv+0x390>
              goto memerr; /* ignore this packet */
            }
            res_idx += SIZEOF_DNS_ANSWER;
  11780c:	e15b31b0 	ldrh	r3, [fp, #-16]
  117810:	e283300a 	add	r3, r3, #10
  117814:	e14b31b0 	strh	r3, [fp, #-16]

            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
  117818:	e15b33b2 	ldrh	r3, [fp, #-50]	; 0xffffffce
  11781c:	e3530c01 	cmp	r3, #256	; 0x100
  117820:	1a000021 	bne	1178ac <dns_recv+0x288>
#if LWIP_IPV4
              if ((ans.type == PP_HTONS(DNS_RRTYPE_A)) && (ans.len == PP_HTONS(sizeof(ip4_addr_t)))) {
  117824:	e15b33b4 	ldrh	r3, [fp, #-52]	; 0xffffffcc
  117828:	e3530c01 	cmp	r3, #256	; 0x100
  11782c:	1a00001e 	bne	1178ac <dns_recv+0x288>
  117830:	e15b32bc 	ldrh	r3, [fp, #-44]	; 0xffffffd4
  117834:	e3530b01 	cmp	r3, #1024	; 0x400
  117838:	1a00001b 	bne	1178ac <dns_recv+0x288>
                if (!LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
                {
                  ip4_addr_t ip4addr;
                  /* read the IP address after answer resource record's header */
                  if (pbuf_copy_partial(p, &ip4addr, sizeof(ip4_addr_t), res_idx) != sizeof(ip4_addr_t)) {
  11783c:	e15b31b0 	ldrh	r3, [fp, #-16]
  117840:	e24b103c 	sub	r1, fp, #60	; 0x3c
  117844:	e3a02004 	mov	r2, #4
  117848:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  11784c:	eb000ec9 	bl	11b378 <pbuf_copy_partial>
  117850:	e1a03000 	mov	r3, r0
  117854:	e3530004 	cmp	r3, #4
  117858:	1a000057 	bne	1179bc <dns_recv+0x398>
                    goto memerr; /* ignore this packet */
                  }
                  ip_addr_copy_from_ip4(dns_table[i].ipaddr, ip4addr);
  11785c:	e55b100d 	ldrb	r1, [fp, #-13]
  117860:	e51b203c 	ldr	r2, [fp, #-60]	; 0xffffffc4
  117864:	e30d3c3c 	movw	r3, #56380	; 0xdc3c
  117868:	e3403014 	movt	r3, #20
  11786c:	e3a00e11 	mov	r0, #272	; 0x110
  117870:	e0010190 	mul	r1, r0, r1
  117874:	e0833001 	add	r3, r3, r1
  117878:	e2833004 	add	r3, r3, #4
  11787c:	e5832000 	str	r2, [r3]
                  pbuf_free(p);
  117880:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  117884:	eb000cb0 	bl	11ab4c <pbuf_free>
                  /* handle correct response */
                  dns_correct_response(i, lwip_ntohl(ans.ttl));
  117888:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  11788c:	e1a00003 	mov	r0, r3
  117890:	ebfffa82 	bl	1162a0 <lwip_htonl>
  117894:	e1a02000 	mov	r2, r0
  117898:	e55b300d 	ldrb	r3, [fp, #-13]
  11789c:	e1a01002 	mov	r1, r2
  1178a0:	e1a00003 	mov	r0, r3
  1178a4:	ebffff2d 	bl	117560 <dns_correct_response>
  1178a8:	ea000049 	b	1179d4 <dns_recv+0x3b0>
                }
              }
#endif /* LWIP_IPV6 */
            }
            /* skip this answer */
            if ((int)(res_idx + lwip_htons(ans.len)) > 0xFFFF) {
  1178ac:	e15b41b0 	ldrh	r4, [fp, #-16]
  1178b0:	e15b32bc 	ldrh	r3, [fp, #-44]	; 0xffffffd4
  1178b4:	e1a00003 	mov	r0, r3
  1178b8:	ebfffa6c 	bl	116270 <lwip_htons>
  1178bc:	e1a03000 	mov	r3, r0
  1178c0:	e0843003 	add	r3, r4, r3
  1178c4:	e3530801 	cmp	r3, #65536	; 0x10000
  1178c8:	aa00003d 	bge	1179c4 <dns_recv+0x3a0>
              goto memerr; /* ignore this packet */
            }
            res_idx += lwip_htons(ans.len);
  1178cc:	e15b32bc 	ldrh	r3, [fp, #-44]	; 0xffffffd4
  1178d0:	e1a00003 	mov	r0, r3
  1178d4:	ebfffa65 	bl	116270 <lwip_htons>
  1178d8:	e1a03000 	mov	r3, r0
  1178dc:	e1a02003 	mov	r2, r3
  1178e0:	e15b31b0 	ldrh	r3, [fp, #-16]
  1178e4:	e0823003 	add	r3, r2, r3
  1178e8:	e14b31b0 	strh	r3, [fp, #-16]
            --nanswers;
  1178ec:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  1178f0:	e2433001 	sub	r3, r3, #1
  1178f4:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
          while ((nanswers > 0) && (res_idx < p->tot_len)) {
  1178f8:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  1178fc:	e3530000 	cmp	r3, #0
  117900:	0a000004 	beq	117918 <dns_recv+0x2f4>
  117904:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
  117908:	e1d330b8 	ldrh	r3, [r3, #8]
  11790c:	e15b21b0 	ldrh	r2, [fp, #-16]
  117910:	e1520003 	cmp	r2, r3
  117914:	3affffaa 	bcc	1177c4 <dns_recv+0x1a0>
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": error in response\n", entry->name));
        }
        /* call callback to indicate error, clean up memory and return */
        pbuf_free(p);
  117918:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  11791c:	eb000c8a 	bl	11ab4c <pbuf_free>
        dns_call_found(i, NULL);
  117920:	e55b300d 	ldrb	r3, [fp, #-13]
  117924:	e3a01000 	mov	r1, #0
  117928:	e1a00003 	mov	r0, r3
  11792c:	ebfffd90 	bl	116f74 <dns_call_found>
        dns_table[i].state = DNS_STATE_UNUSED;
  117930:	e55b200d 	ldrb	r2, [fp, #-13]
  117934:	e30d3c3c 	movw	r3, #56380	; 0xdc3c
  117938:	e3403014 	movt	r3, #20
  11793c:	e3a01e11 	mov	r1, #272	; 0x110
  117940:	e0020291 	mul	r2, r1, r2
  117944:	e0833002 	add	r3, r3, r2
  117948:	e283300a 	add	r3, r3, #10
  11794c:	e3a02000 	mov	r2, #0
  117950:	e5c32000 	strb	r2, [r3]
        return;
  117954:	ea00001e 	b	1179d4 <dns_recv+0x3b0>
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
  117958:	e55b300d 	ldrb	r3, [fp, #-13]
  11795c:	e2833001 	add	r3, r3, #1
  117960:	e54b300d 	strb	r3, [fp, #-13]
  117964:	e55b300d 	ldrb	r3, [fp, #-13]
  117968:	e3530003 	cmp	r3, #3
  11796c:	9affff47 	bls	117690 <dns_recv+0x6c>
      }
    }
  }

memerr:
  117970:	ea000001 	b	11797c <dns_recv+0x358>
    goto memerr;
  117974:	e320f000 	nop	{0}
  117978:	ea000012 	b	1179c8 <dns_recv+0x3a4>
memerr:
  11797c:	e320f000 	nop	{0}
  117980:	ea000010 	b	1179c8 <dns_recv+0x3a4>
          goto memerr; /* ignore this packet */
  117984:	e320f000 	nop	{0}
  117988:	ea00000e 	b	1179c8 <dns_recv+0x3a4>
          goto memerr; /* ignore this packet */
  11798c:	e320f000 	nop	{0}
  117990:	ea00000c 	b	1179c8 <dns_recv+0x3a4>
            goto memerr; /* ignore this packet */
  117994:	e320f000 	nop	{0}
  117998:	ea00000a 	b	1179c8 <dns_recv+0x3a4>
          goto memerr; /* ignore this packet */
  11799c:	e320f000 	nop	{0}
  1179a0:	ea000008 	b	1179c8 <dns_recv+0x3a4>
          goto memerr; /* ignore this packet */
  1179a4:	e320f000 	nop	{0}
  1179a8:	ea000006 	b	1179c8 <dns_recv+0x3a4>
              goto memerr; /* ignore this packet */
  1179ac:	e320f000 	nop	{0}
  1179b0:	ea000004 	b	1179c8 <dns_recv+0x3a4>
              goto memerr; /* ignore this packet */
  1179b4:	e320f000 	nop	{0}
  1179b8:	ea000002 	b	1179c8 <dns_recv+0x3a4>
                    goto memerr; /* ignore this packet */
  1179bc:	e320f000 	nop	{0}
  1179c0:	ea000000 	b	1179c8 <dns_recv+0x3a4>
              goto memerr; /* ignore this packet */
  1179c4:	e320f000 	nop	{0}
  /* deallocate memory and return */
  pbuf_free(p);
  1179c8:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  1179cc:	eb000c5e 	bl	11ab4c <pbuf_free>
  return;
  1179d0:	e320f000 	nop	{0}
}
  1179d4:	e24bd008 	sub	sp, fp, #8
  1179d8:	e8bd8810 	pop	{r4, fp, pc}

001179dc <dns_enqueue>:
 * @return err_t return code.
 */
static err_t
dns_enqueue(const char *name, size_t hostnamelen, dns_found_callback found,
            void *callback_arg LWIP_DNS_ADDRTYPE_ARG(u8_t dns_addrtype) LWIP_DNS_ISMDNS_ARG(u8_t is_mdns))
{
  1179dc:	e92d4800 	push	{fp, lr}
  1179e0:	e28db004 	add	fp, sp, #4
  1179e4:	e24dd028 	sub	sp, sp, #40	; 0x28
  1179e8:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  1179ec:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  1179f0:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  1179f4:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  u8_t i;
  u8_t lseq, lseqi;
  struct dns_table_entry *entry = NULL;
  1179f8:	e3a03000 	mov	r3, #0
  1179fc:	e50b300c 	str	r3, [fp, #-12]
  struct dns_req_entry* req;

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  u8_t r;
  /* check for duplicate entries */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
  117a00:	e3a03000 	mov	r3, #0
  117a04:	e54b3005 	strb	r3, [fp, #-5]
  117a08:	ea000048 	b	117b30 <dns_enqueue+0x154>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
  117a0c:	e55b2005 	ldrb	r2, [fp, #-5]
  117a10:	e30d3c3c 	movw	r3, #56380	; 0xdc3c
  117a14:	e3403014 	movt	r3, #20
  117a18:	e3a01e11 	mov	r1, #272	; 0x110
  117a1c:	e0020291 	mul	r2, r1, r2
  117a20:	e0833002 	add	r3, r3, r2
  117a24:	e283300a 	add	r3, r3, #10
  117a28:	e5d33000 	ldrb	r3, [r3]
  117a2c:	e3530002 	cmp	r3, #2
  117a30:	1a00003b 	bne	117b24 <dns_enqueue+0x148>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0)) {
  117a34:	e55b3005 	ldrb	r3, [fp, #-5]
  117a38:	e3a02e11 	mov	r2, #272	; 0x110
  117a3c:	e0030392 	mul	r3, r2, r3
  117a40:	e2832010 	add	r2, r3, #16
  117a44:	e30d3c3c 	movw	r3, #56380	; 0xdc3c
  117a48:	e3403014 	movt	r3, #20
  117a4c:	e0823003 	add	r3, r2, r3
  117a50:	e3a02c01 	mov	r2, #256	; 0x100
  117a54:	e1a01003 	mov	r1, r3
  117a58:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  117a5c:	ebfffa87 	bl	116480 <lwip_strnicmp>
  117a60:	e1a03000 	mov	r3, r0
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
  117a64:	e3530000 	cmp	r3, #0
  117a68:	1a00002d 	bne	117b24 <dns_enqueue+0x148>
           for the same host should not be that common */
        continue;
      }
#endif /* LWIP_IPV4 && LWIP_IPV6 */
      /* this is a duplicate entry, find a free request entry */
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
  117a6c:	e3a03000 	mov	r3, #0
  117a70:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  117a74:	ea000027 	b	117b18 <dns_enqueue+0x13c>
        if (dns_requests[r].found == 0) {
  117a78:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  117a7c:	e30e307c 	movw	r3, #57468	; 0xe07c
  117a80:	e3403014 	movt	r3, #20
  117a84:	e3a0100c 	mov	r1, #12
  117a88:	e0020291 	mul	r2, r1, r2
  117a8c:	e0833002 	add	r3, r3, r2
  117a90:	e5933000 	ldr	r3, [r3]
  117a94:	e3530000 	cmp	r3, #0
  117a98:	1a00001b 	bne	117b0c <dns_enqueue+0x130>
          dns_requests[r].found = found;
  117a9c:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  117aa0:	e30e307c 	movw	r3, #57468	; 0xe07c
  117aa4:	e3403014 	movt	r3, #20
  117aa8:	e3a0100c 	mov	r1, #12
  117aac:	e0020291 	mul	r2, r1, r2
  117ab0:	e0833002 	add	r3, r3, r2
  117ab4:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  117ab8:	e5832000 	str	r2, [r3]
          dns_requests[r].arg = callback_arg;
  117abc:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  117ac0:	e30e307c 	movw	r3, #57468	; 0xe07c
  117ac4:	e3403014 	movt	r3, #20
  117ac8:	e3a0100c 	mov	r1, #12
  117acc:	e0020291 	mul	r2, r1, r2
  117ad0:	e0833002 	add	r3, r3, r2
  117ad4:	e2833004 	add	r3, r3, #4
  117ad8:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  117adc:	e5832000 	str	r2, [r3]
          dns_requests[r].dns_table_idx = i;
  117ae0:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  117ae4:	e30e307c 	movw	r3, #57468	; 0xe07c
  117ae8:	e3403014 	movt	r3, #20
  117aec:	e3a0100c 	mov	r1, #12
  117af0:	e0020291 	mul	r2, r1, r2
  117af4:	e0833002 	add	r3, r3, r2
  117af8:	e2833008 	add	r3, r3, #8
  117afc:	e55b2005 	ldrb	r2, [fp, #-5]
  117b00:	e5c32000 	strb	r2, [r3]
          LWIP_DNS_SET_ADDRTYPE(dns_requests[r].reqaddrtype, dns_addrtype);
          LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": duplicate request\n", name));
          return ERR_INPROGRESS;
  117b04:	e3e03004 	mvn	r3, #4
  117b08:	ea0000b3 	b	117ddc <dns_enqueue+0x400>
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
  117b0c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  117b10:	e2833001 	add	r3, r3, #1
  117b14:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  117b18:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  117b1c:	e3530003 	cmp	r3, #3
  117b20:	9affffd4 	bls	117a78 <dns_enqueue+0x9c>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
  117b24:	e55b3005 	ldrb	r3, [fp, #-5]
  117b28:	e2833001 	add	r3, r3, #1
  117b2c:	e54b3005 	strb	r3, [fp, #-5]
  117b30:	e55b3005 	ldrb	r3, [fp, #-5]
  117b34:	e3530003 	cmp	r3, #3
  117b38:	9affffb3 	bls	117a0c <dns_enqueue+0x30>
  }
  /* no duplicate entries found */
#endif

  /* search an unused entry, or the oldest one */
  lseq = 0;
  117b3c:	e3a03000 	mov	r3, #0
  117b40:	e54b3006 	strb	r3, [fp, #-6]
  lseqi = DNS_TABLE_SIZE;
  117b44:	e3a03004 	mov	r3, #4
  117b48:	e54b3007 	strb	r3, [fp, #-7]
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
  117b4c:	e3a03000 	mov	r3, #0
  117b50:	e54b3005 	strb	r3, [fp, #-5]
  117b54:	ea000020 	b	117bdc <dns_enqueue+0x200>
    entry = &dns_table[i];
  117b58:	e55b3005 	ldrb	r3, [fp, #-5]
  117b5c:	e3a02e11 	mov	r2, #272	; 0x110
  117b60:	e0020392 	mul	r2, r2, r3
  117b64:	e30d3c3c 	movw	r3, #56380	; 0xdc3c
  117b68:	e3403014 	movt	r3, #20
  117b6c:	e0823003 	add	r3, r2, r3
  117b70:	e50b300c 	str	r3, [fp, #-12]
    /* is it an unused entry ? */
    if (entry->state == DNS_STATE_UNUSED) {
  117b74:	e51b300c 	ldr	r3, [fp, #-12]
  117b78:	e5d3300a 	ldrb	r3, [r3, #10]
  117b7c:	e3530000 	cmp	r3, #0
  117b80:	0a000019 	beq	117bec <dns_enqueue+0x210>
      break;
    }
    /* check if this is the oldest completed entry */
    if (entry->state == DNS_STATE_DONE) {
  117b84:	e51b300c 	ldr	r3, [fp, #-12]
  117b88:	e5d3300a 	ldrb	r3, [r3, #10]
  117b8c:	e3530003 	cmp	r3, #3
  117b90:	1a00000e 	bne	117bd0 <dns_enqueue+0x1f4>
      u8_t age = dns_seqno - entry->seqno;
  117b94:	e30d3c39 	movw	r3, #56377	; 0xdc39
  117b98:	e3403014 	movt	r3, #20
  117b9c:	e5d32000 	ldrb	r2, [r3]
  117ba0:	e51b300c 	ldr	r3, [fp, #-12]
  117ba4:	e5d3300e 	ldrb	r3, [r3, #14]
  117ba8:	e0423003 	sub	r3, r2, r3
  117bac:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee
      if (age > lseq) {
  117bb0:	e55b2012 	ldrb	r2, [fp, #-18]	; 0xffffffee
  117bb4:	e55b3006 	ldrb	r3, [fp, #-6]
  117bb8:	e1520003 	cmp	r2, r3
  117bbc:	9a000003 	bls	117bd0 <dns_enqueue+0x1f4>
        lseq = age;
  117bc0:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
  117bc4:	e54b3006 	strb	r3, [fp, #-6]
        lseqi = i;
  117bc8:	e55b3005 	ldrb	r3, [fp, #-5]
  117bcc:	e54b3007 	strb	r3, [fp, #-7]
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
  117bd0:	e55b3005 	ldrb	r3, [fp, #-5]
  117bd4:	e2833001 	add	r3, r3, #1
  117bd8:	e54b3005 	strb	r3, [fp, #-5]
  117bdc:	e55b3005 	ldrb	r3, [fp, #-5]
  117be0:	e3530003 	cmp	r3, #3
  117be4:	9affffdb 	bls	117b58 <dns_enqueue+0x17c>
  117be8:	ea000000 	b	117bf0 <dns_enqueue+0x214>
      break;
  117bec:	e320f000 	nop	{0}
      }
    }
  }

  /* if we don't have found an unused entry, use the oldest completed one */
  if (i == DNS_TABLE_SIZE) {
  117bf0:	e55b3005 	ldrb	r3, [fp, #-5]
  117bf4:	e3530004 	cmp	r3, #4
  117bf8:	1a000017 	bne	117c5c <dns_enqueue+0x280>
    if ((lseqi >= DNS_TABLE_SIZE) || (dns_table[lseqi].state != DNS_STATE_DONE)) {
  117bfc:	e55b3007 	ldrb	r3, [fp, #-7]
  117c00:	e3530003 	cmp	r3, #3
  117c04:	8a000009 	bhi	117c30 <dns_enqueue+0x254>
  117c08:	e55b2007 	ldrb	r2, [fp, #-7]
  117c0c:	e30d3c3c 	movw	r3, #56380	; 0xdc3c
  117c10:	e3403014 	movt	r3, #20
  117c14:	e3a01e11 	mov	r1, #272	; 0x110
  117c18:	e0020291 	mul	r2, r1, r2
  117c1c:	e0833002 	add	r3, r3, r2
  117c20:	e283300a 	add	r3, r3, #10
  117c24:	e5d33000 	ldrb	r3, [r3]
  117c28:	e3530003 	cmp	r3, #3
  117c2c:	0a000001 	beq	117c38 <dns_enqueue+0x25c>
      /* no entry can be used now, table is full */
      LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": DNS entries table is full\n", name));
      return ERR_MEM;
  117c30:	e3e03000 	mvn	r3, #0
  117c34:	ea000068 	b	117ddc <dns_enqueue+0x400>
    } else {
      /* use the oldest completed one */
      i = lseqi;
  117c38:	e55b3007 	ldrb	r3, [fp, #-7]
  117c3c:	e54b3005 	strb	r3, [fp, #-5]
      entry = &dns_table[i];
  117c40:	e55b3005 	ldrb	r3, [fp, #-5]
  117c44:	e3a02e11 	mov	r2, #272	; 0x110
  117c48:	e0020392 	mul	r2, r2, r3
  117c4c:	e30d3c3c 	movw	r3, #56380	; 0xdc3c
  117c50:	e3403014 	movt	r3, #20
  117c54:	e0823003 	add	r3, r2, r3
  117c58:	e50b300c 	str	r3, [fp, #-12]
    }
  }

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  /* find a free request entry */
  req = NULL;
  117c5c:	e3a03000 	mov	r3, #0
  117c60:	e50b3010 	str	r3, [fp, #-16]
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
  117c64:	e3a03000 	mov	r3, #0
  117c68:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  117c6c:	ea000013 	b	117cc0 <dns_enqueue+0x2e4>
    if (dns_requests[r].found == NULL) {
  117c70:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  117c74:	e30e307c 	movw	r3, #57468	; 0xe07c
  117c78:	e3403014 	movt	r3, #20
  117c7c:	e3a0100c 	mov	r1, #12
  117c80:	e0020291 	mul	r2, r1, r2
  117c84:	e0833002 	add	r3, r3, r2
  117c88:	e5933000 	ldr	r3, [r3]
  117c8c:	e3530000 	cmp	r3, #0
  117c90:	1a000007 	bne	117cb4 <dns_enqueue+0x2d8>
      req = &dns_requests[r];
  117c94:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  117c98:	e3a0200c 	mov	r2, #12
  117c9c:	e0020392 	mul	r2, r2, r3
  117ca0:	e30e307c 	movw	r3, #57468	; 0xe07c
  117ca4:	e3403014 	movt	r3, #20
  117ca8:	e0823003 	add	r3, r2, r3
  117cac:	e50b3010 	str	r3, [fp, #-16]
      break;
  117cb0:	ea000005 	b	117ccc <dns_enqueue+0x2f0>
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
  117cb4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  117cb8:	e2833001 	add	r3, r3, #1
  117cbc:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  117cc0:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  117cc4:	e3530003 	cmp	r3, #3
  117cc8:	9affffe8 	bls	117c70 <dns_enqueue+0x294>
    }
  }
  if (req == NULL) {
  117ccc:	e51b3010 	ldr	r3, [fp, #-16]
  117cd0:	e3530000 	cmp	r3, #0
  117cd4:	1a000001 	bne	117ce0 <dns_enqueue+0x304>
    /* no request entry can be used now, table is full */
    LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": DNS request entries table is full\n", name));
    return ERR_MEM;
  117cd8:	e3e03000 	mvn	r3, #0
  117cdc:	ea00003e 	b	117ddc <dns_enqueue+0x400>
  }
  req->dns_table_idx = i;
  117ce0:	e51b3010 	ldr	r3, [fp, #-16]
  117ce4:	e55b2005 	ldrb	r2, [fp, #-5]
  117ce8:	e5c32008 	strb	r2, [r3, #8]

  /* use this entry */
  LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": use DNS entry %"U16_F"\n", name, (u16_t)(i)));

  /* fill the entry */
  entry->state = DNS_STATE_NEW;
  117cec:	e51b300c 	ldr	r3, [fp, #-12]
  117cf0:	e3a02001 	mov	r2, #1
  117cf4:	e5c3200a 	strb	r2, [r3, #10]
  entry->seqno = dns_seqno;
  117cf8:	e30d3c39 	movw	r3, #56377	; 0xdc39
  117cfc:	e3403014 	movt	r3, #20
  117d00:	e5d32000 	ldrb	r2, [r3]
  117d04:	e51b300c 	ldr	r3, [fp, #-12]
  117d08:	e5c3200e 	strb	r2, [r3, #14]
  LWIP_DNS_SET_ADDRTYPE(entry->reqaddrtype, dns_addrtype);
  LWIP_DNS_SET_ADDRTYPE(req->reqaddrtype, dns_addrtype);
  req->found = found;
  117d0c:	e51b3010 	ldr	r3, [fp, #-16]
  117d10:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  117d14:	e5832000 	str	r2, [r3]
  req->arg   = callback_arg;
  117d18:	e51b3010 	ldr	r3, [fp, #-16]
  117d1c:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  117d20:	e5832004 	str	r2, [r3, #4]
  namelen = LWIP_MIN(hostnamelen, DNS_MAX_NAME_LENGTH-1);
  117d24:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  117d28:	e35300ff 	cmp	r3, #255	; 0xff
  117d2c:	31a03003 	movcc	r3, r3
  117d30:	23a030ff 	movcs	r3, #255	; 0xff
  117d34:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  MEMCPY(entry->name, name, namelen);
  117d38:	e51b300c 	ldr	r3, [fp, #-12]
  117d3c:	e2833010 	add	r3, r3, #16
  117d40:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  117d44:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  117d48:	e1a00003 	mov	r0, r3
  117d4c:	eb00a1ae 	bl	14040c <memcpy>
  entry->name[namelen] = 0;
  117d50:	e51b200c 	ldr	r2, [fp, #-12]
  117d54:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  117d58:	e0823003 	add	r3, r2, r3
  117d5c:	e2833010 	add	r3, r3, #16
  117d60:	e3a02000 	mov	r2, #0
  117d64:	e5c32000 	strb	r2, [r3]

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  entry->pcb_idx = dns_alloc_pcb();
  117d68:	ebfffc32 	bl	116e38 <dns_alloc_pcb>
  117d6c:	e1a03000 	mov	r3, r0
  117d70:	e1a02003 	mov	r2, r3
  117d74:	e51b300c 	ldr	r3, [fp, #-12]
  117d78:	e5c3200f 	strb	r2, [r3, #15]
  if (entry->pcb_idx >= DNS_MAX_SOURCE_PORTS) {
  117d7c:	e51b300c 	ldr	r3, [fp, #-12]
  117d80:	e5d3300f 	ldrb	r3, [r3, #15]
  117d84:	e3530003 	cmp	r3, #3
  117d88:	9a000007 	bls	117dac <dns_enqueue+0x3d0>
    /* failed to get a UDP pcb */
    LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": failed to allocate a pcb\n", name));
    entry->state = DNS_STATE_UNUSED;
  117d8c:	e51b300c 	ldr	r3, [fp, #-12]
  117d90:	e3a02000 	mov	r2, #0
  117d94:	e5c3200a 	strb	r2, [r3, #10]
    req->found = NULL;
  117d98:	e51b3010 	ldr	r3, [fp, #-16]
  117d9c:	e3a02000 	mov	r2, #0
  117da0:	e5832000 	str	r2, [r3]
    return ERR_MEM;
  117da4:	e3e03000 	mvn	r3, #0
  117da8:	ea00000b 	b	117ddc <dns_enqueue+0x400>

#if LWIP_DNS_SUPPORT_MDNS_QUERIES
  entry->is_mdns = is_mdns;
#endif

  dns_seqno++;
  117dac:	e30d3c39 	movw	r3, #56377	; 0xdc39
  117db0:	e3403014 	movt	r3, #20
  117db4:	e5d33000 	ldrb	r3, [r3]
  117db8:	e2833001 	add	r3, r3, #1
  117dbc:	e6ef2073 	uxtb	r2, r3
  117dc0:	e30d3c39 	movw	r3, #56377	; 0xdc39
  117dc4:	e3403014 	movt	r3, #20
  117dc8:	e5c32000 	strb	r2, [r3]

  /* force to send query without waiting timer */
  dns_check_entry(i);
  117dcc:	e55b3005 	ldrb	r3, [fp, #-5]
  117dd0:	e1a00003 	mov	r0, r3
  117dd4:	ebfffd38 	bl	1172bc <dns_check_entry>

  /* dns query is enqueued */
  return ERR_INPROGRESS;
  117dd8:	e3e03004 	mvn	r3, #4
}
  117ddc:	e1a00003 	mov	r0, r3
  117de0:	e24bd004 	sub	sp, fp, #4
  117de4:	e8bd8800 	pop	{fp, pc}

00117de8 <dns_gethostbyname>:
 * @return a err_t return code.
 */
err_t
dns_gethostbyname(const char *hostname, ip_addr_t *addr, dns_found_callback found,
                  void *callback_arg)
{
  117de8:	e92d4800 	push	{fp, lr}
  117dec:	e28db004 	add	fp, sp, #4
  117df0:	e24dd018 	sub	sp, sp, #24
  117df4:	e50b0008 	str	r0, [fp, #-8]
  117df8:	e50b100c 	str	r1, [fp, #-12]
  117dfc:	e50b2010 	str	r2, [fp, #-16]
  117e00:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  return dns_gethostbyname_addrtype(hostname, addr, found, callback_arg, LWIP_DNS_ADDRTYPE_DEFAULT);
  117e04:	e3a03000 	mov	r3, #0
  117e08:	e58d3000 	str	r3, [sp]
  117e0c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  117e10:	e51b2010 	ldr	r2, [fp, #-16]
  117e14:	e51b100c 	ldr	r1, [fp, #-12]
  117e18:	e51b0008 	ldr	r0, [fp, #-8]
  117e1c:	eb000003 	bl	117e30 <dns_gethostbyname_addrtype>
  117e20:	e1a03000 	mov	r3, r0
}
  117e24:	e1a00003 	mov	r0, r3
  117e28:	e24bd004 	sub	sp, fp, #4
  117e2c:	e8bd8800 	pop	{fp, pc}

00117e30 <dns_gethostbyname_addrtype>:
 *                     - LWIP_DNS_ADDRTYPE_IPV6: try to resolve IPv6 only
 */
err_t
dns_gethostbyname_addrtype(const char *hostname, ip_addr_t *addr, dns_found_callback found,
                           void *callback_arg, u8_t dns_addrtype)
{
  117e30:	e92d4800 	push	{fp, lr}
  117e34:	e28db004 	add	fp, sp, #4
  117e38:	e24dd018 	sub	sp, sp, #24
  117e3c:	e50b0010 	str	r0, [fp, #-16]
  117e40:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  117e44:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  117e48:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
  u8_t is_mdns;
#endif
  /* not initialized or no valid server yet, or invalid addr pointer
   * or invalid hostname or invalid hostname length */
  if ((addr == NULL) ||
  117e4c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  117e50:	e3530000 	cmp	r3, #0
  117e54:	0a000006 	beq	117e74 <dns_gethostbyname_addrtype+0x44>
  117e58:	e51b3010 	ldr	r3, [fp, #-16]
  117e5c:	e3530000 	cmp	r3, #0
  117e60:	0a000003 	beq	117e74 <dns_gethostbyname_addrtype+0x44>
      (!hostname) || (!hostname[0])) {
  117e64:	e51b3010 	ldr	r3, [fp, #-16]
  117e68:	e5d33000 	ldrb	r3, [r3]
  117e6c:	e3530000 	cmp	r3, #0
  117e70:	1a000001 	bne	117e7c <dns_gethostbyname_addrtype+0x4c>
    return ERR_ARG;
  117e74:	e3e0300f 	mvn	r3, #15
  117e78:	ea000024 	b	117f10 <dns_gethostbyname_addrtype+0xe0>
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) == 0)
  if (dns_pcbs[0] == NULL) {
    return ERR_ARG;
  }
#endif
  hostnamelen = strlen(hostname);
  117e7c:	e51b0010 	ldr	r0, [fp, #-16]
  117e80:	eb00a32a 	bl	140b30 <strlen>
  117e84:	e50b0008 	str	r0, [fp, #-8]
  if (hostnamelen >= DNS_MAX_NAME_LENGTH) {
  117e88:	e51b3008 	ldr	r3, [fp, #-8]
  117e8c:	e35300ff 	cmp	r3, #255	; 0xff
  117e90:	9a000001 	bls	117e9c <dns_gethostbyname_addrtype+0x6c>
    LWIP_DEBUGF(DNS_DEBUG, ("dns_gethostbyname: name too long to resolve"));
    return ERR_ARG;
  117e94:	e3e0300f 	mvn	r3, #15
  117e98:	ea00001c 	b	117f10 <dns_gethostbyname_addrtype+0xe0>
    return ERR_OK;
  }
#endif /* LWIP_HAVE_LOOPIF */

  /* host name already in octet notation? set ip addr and return ERR_OK */
  if (ipaddr_aton(hostname, addr)) {
  117e9c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  117ea0:	e51b0010 	ldr	r0, [fp, #-16]
  117ea4:	eb0068f9 	bl	132290 <ip4addr_aton>
  117ea8:	e1a03000 	mov	r3, r0
  117eac:	e3530000 	cmp	r3, #0
  117eb0:	0a000001 	beq	117ebc <dns_gethostbyname_addrtype+0x8c>
#if LWIP_IPV4 && LWIP_IPV6
    if ((IP_IS_V6(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV4)) ||
        (IP_IS_V4(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV6)))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
    {
      return ERR_OK;
  117eb4:	e3a03000 	mov	r3, #0
  117eb8:	ea000014 	b	117f10 <dns_gethostbyname_addrtype+0xe0>
    }
  }
  /* already have this address cached? */
  if (dns_lookup(hostname, addr LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)) == ERR_OK) {
  117ebc:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  117ec0:	e51b0010 	ldr	r0, [fp, #-16]
  117ec4:	ebfffa34 	bl	11679c <dns_lookup>
  117ec8:	e1a03000 	mov	r3, r0
  117ecc:	e3530000 	cmp	r3, #0
  117ed0:	1a000001 	bne	117edc <dns_gethostbyname_addrtype+0xac>
    return ERR_OK;
  117ed4:	e3a03000 	mov	r3, #0
  117ed8:	ea00000c 	b	117f10 <dns_gethostbyname_addrtype+0xe0>

  if (!is_mdns)
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
  {
    /* prevent calling found callback if no server is set, return error instead */
    if (ip_addr_isany_val(dns_servers[0])) {
  117edc:	e30e30ac 	movw	r3, #57516	; 0xe0ac
  117ee0:	e3403014 	movt	r3, #20
  117ee4:	e5933000 	ldr	r3, [r3]
  117ee8:	e3530000 	cmp	r3, #0
  117eec:	1a000001 	bne	117ef8 <dns_gethostbyname_addrtype+0xc8>
      return ERR_VAL;
  117ef0:	e3e03005 	mvn	r3, #5
  117ef4:	ea000005 	b	117f10 <dns_gethostbyname_addrtype+0xe0>
    }
  }

  /* queue query with specified callback */
  return dns_enqueue(hostname, hostnamelen, found, callback_arg LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)
  117ef8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  117efc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  117f00:	e51b1008 	ldr	r1, [fp, #-8]
  117f04:	e51b0010 	ldr	r0, [fp, #-16]
  117f08:	ebfffeb3 	bl	1179dc <dns_enqueue>
  117f0c:	e1a03000 	mov	r3, r0
     LWIP_DNS_ISMDNS_ARG(is_mdns));
}
  117f10:	e1a00003 	mov	r0, r3
  117f14:	e24bd004 	sub	sp, fp, #4
  117f18:	e8bd8800 	pop	{fp, pc}

00117f1c <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
  117f1c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  117f20:	e28db000 	add	fp, sp, #0
  117f24:	e24dd024 	sub	sp, sp, #36	; 0x24
  117f28:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  117f2c:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  const u8_t *pb = (const u8_t *)dataptr;
  117f30:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  117f34:	e50b3008 	str	r3, [fp, #-8]
  const u16_t *ps;
  u16_t t = 0;
  117f38:	e3a03000 	mov	r3, #0
  117f3c:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  u32_t sum = 0;
  117f40:	e3a03000 	mov	r3, #0
  117f44:	e50b3010 	str	r3, [fp, #-16]
  int odd = ((mem_ptr_t)pb & 1);
  117f48:	e51b3008 	ldr	r3, [fp, #-8]
  117f4c:	e2033001 	and	r3, r3, #1
  117f50:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  /* Get aligned to u16_t */
  if (odd && len > 0) {
  117f54:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  117f58:	e3530000 	cmp	r3, #0
  117f5c:	0a00000c 	beq	117f94 <lwip_standard_chksum+0x78>
  117f60:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  117f64:	e3530000 	cmp	r3, #0
  117f68:	da000009 	ble	117f94 <lwip_standard_chksum+0x78>
    ((u8_t *)&t)[1] = *pb++;
  117f6c:	e51b2008 	ldr	r2, [fp, #-8]
  117f70:	e2823001 	add	r3, r2, #1
  117f74:	e50b3008 	str	r3, [fp, #-8]
  117f78:	e24b3016 	sub	r3, fp, #22
  117f7c:	e2833001 	add	r3, r3, #1
  117f80:	e5d22000 	ldrb	r2, [r2]
  117f84:	e5c32000 	strb	r2, [r3]
    len--;
  117f88:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  117f8c:	e2433001 	sub	r3, r3, #1
  117f90:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  117f94:	e51b3008 	ldr	r3, [fp, #-8]
  117f98:	e50b300c 	str	r3, [fp, #-12]
  while (len > 1) {
  117f9c:	ea00000a 	b	117fcc <lwip_standard_chksum+0xb0>
    sum += *ps++;
  117fa0:	e51b300c 	ldr	r3, [fp, #-12]
  117fa4:	e2832002 	add	r2, r3, #2
  117fa8:	e50b200c 	str	r2, [fp, #-12]
  117fac:	e1d330b0 	ldrh	r3, [r3]
  117fb0:	e1a02003 	mov	r2, r3
  117fb4:	e51b3010 	ldr	r3, [fp, #-16]
  117fb8:	e0833002 	add	r3, r3, r2
  117fbc:	e50b3010 	str	r3, [fp, #-16]
    len -= 2;
  117fc0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  117fc4:	e2433002 	sub	r3, r3, #2
  117fc8:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  while (len > 1) {
  117fcc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  117fd0:	e3530001 	cmp	r3, #1
  117fd4:	cafffff1 	bgt	117fa0 <lwip_standard_chksum+0x84>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
  117fd8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  117fdc:	e3530000 	cmp	r3, #0
  117fe0:	da000003 	ble	117ff4 <lwip_standard_chksum+0xd8>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
  117fe4:	e24b3016 	sub	r3, fp, #22
  117fe8:	e51b200c 	ldr	r2, [fp, #-12]
  117fec:	e5d22000 	ldrb	r2, [r2]
  117ff0:	e5c32000 	strb	r2, [r3]
  }

  /* Add end bytes */
  sum += t;
  117ff4:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  117ff8:	e1a02003 	mov	r2, r3
  117ffc:	e51b3010 	ldr	r3, [fp, #-16]
  118000:	e0833002 	add	r3, r3, r2
  118004:	e50b3010 	str	r3, [fp, #-16]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
  118008:	e51b3010 	ldr	r3, [fp, #-16]
  11800c:	e1a02823 	lsr	r2, r3, #16
  118010:	e51b3010 	ldr	r3, [fp, #-16]
  118014:	e6ff3073 	uxth	r3, r3
  118018:	e0823003 	add	r3, r2, r3
  11801c:	e50b3010 	str	r3, [fp, #-16]
  sum = FOLD_U32T(sum);
  118020:	e51b3010 	ldr	r3, [fp, #-16]
  118024:	e1a02823 	lsr	r2, r3, #16
  118028:	e51b3010 	ldr	r3, [fp, #-16]
  11802c:	e6ff3073 	uxth	r3, r3
  118030:	e0823003 	add	r3, r2, r3
  118034:	e50b3010 	str	r3, [fp, #-16]

  /* Swap if alignment was odd */
  if (odd) {
  118038:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11803c:	e3530000 	cmp	r3, #0
  118040:	0a000007 	beq	118064 <lwip_standard_chksum+0x148>
    sum = SWAP_BYTES_IN_WORD(sum);
  118044:	e51b3010 	ldr	r3, [fp, #-16]
  118048:	e1a03403 	lsl	r3, r3, #8
  11804c:	e6ff2073 	uxth	r2, r3
  118050:	e51b3010 	ldr	r3, [fp, #-16]
  118054:	e1a03423 	lsr	r3, r3, #8
  118058:	e6ef3073 	uxtb	r3, r3
  11805c:	e1823003 	orr	r3, r2, r3
  118060:	e50b3010 	str	r3, [fp, #-16]
  }

  return (u16_t)sum;
  118064:	e51b3010 	ldr	r3, [fp, #-16]
  118068:	e6ff3073 	uxth	r3, r3
}
  11806c:	e1a00003 	mov	r0, r3
  118070:	e28bd000 	add	sp, fp, #0
  118074:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  118078:	e12fff1e 	bx	lr

0011807c <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
  11807c:	e92d4800 	push	{fp, lr}
  118080:	e28db004 	add	fp, sp, #4
  118084:	e24dd018 	sub	sp, sp, #24
  118088:	e50b0010 	str	r0, [fp, #-16]
  11808c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  118090:	e1a03001 	mov	r3, r1
  118094:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  118098:	e1a03002 	mov	r3, r2
  11809c:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  struct pbuf *q;
  u8_t swapped = 0;
  1180a0:	e3a03000 	mov	r3, #0
  1180a4:	e54b3009 	strb	r3, [fp, #-9]

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
  1180a8:	e51b3010 	ldr	r3, [fp, #-16]
  1180ac:	e50b3008 	str	r3, [fp, #-8]
  1180b0:	ea000025 	b	11814c <inet_cksum_pseudo_base+0xd0>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
      (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
  1180b4:	e51b3008 	ldr	r3, [fp, #-8]
  1180b8:	e5932004 	ldr	r2, [r3, #4]
  1180bc:	e51b3008 	ldr	r3, [fp, #-8]
  1180c0:	e1d330ba 	ldrh	r3, [r3, #10]
  1180c4:	e1a01003 	mov	r1, r3
  1180c8:	e1a00002 	mov	r0, r2
  1180cc:	ebffff92 	bl	117f1c <lwip_standard_chksum>
  1180d0:	e1a03000 	mov	r3, r0
  1180d4:	e1a02003 	mov	r2, r3
  1180d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1180dc:	e0833002 	add	r3, r3, r2
  1180e0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
  1180e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1180e8:	e1a02823 	lsr	r2, r3, #16
  1180ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1180f0:	e6ff3073 	uxth	r3, r3
  1180f4:	e0823003 	add	r3, r2, r3
  1180f8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    if (q->len % 2 != 0) {
  1180fc:	e51b3008 	ldr	r3, [fp, #-8]
  118100:	e1d330ba 	ldrh	r3, [r3, #10]
  118104:	e2033001 	and	r3, r3, #1
  118108:	e6ff3073 	uxth	r3, r3
  11810c:	e3530000 	cmp	r3, #0
  118110:	0a00000a 	beq	118140 <inet_cksum_pseudo_base+0xc4>
      swapped = 1 - swapped;
  118114:	e55b3009 	ldrb	r3, [fp, #-9]
  118118:	e2633001 	rsb	r3, r3, #1
  11811c:	e54b3009 	strb	r3, [fp, #-9]
      acc = SWAP_BYTES_IN_WORD(acc);
  118120:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118124:	e1a03403 	lsl	r3, r3, #8
  118128:	e6ff2073 	uxth	r2, r3
  11812c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118130:	e1a03423 	lsr	r3, r3, #8
  118134:	e6ef3073 	uxtb	r3, r3
  118138:	e1823003 	orr	r3, r2, r3
  11813c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  for (q = p; q != NULL; q = q->next) {
  118140:	e51b3008 	ldr	r3, [fp, #-8]
  118144:	e5933000 	ldr	r3, [r3]
  118148:	e50b3008 	str	r3, [fp, #-8]
  11814c:	e51b3008 	ldr	r3, [fp, #-8]
  118150:	e3530000 	cmp	r3, #0
  118154:	1affffd6 	bne	1180b4 <inet_cksum_pseudo_base+0x38>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
  118158:	e55b3009 	ldrb	r3, [fp, #-9]
  11815c:	e3530000 	cmp	r3, #0
  118160:	0a000007 	beq	118184 <inet_cksum_pseudo_base+0x108>
    acc = SWAP_BYTES_IN_WORD(acc);
  118164:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118168:	e1a03403 	lsl	r3, r3, #8
  11816c:	e6ff2073 	uxth	r2, r3
  118170:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118174:	e1a03423 	lsr	r3, r3, #8
  118178:	e6ef3073 	uxtb	r3, r3
  11817c:	e1823003 	orr	r3, r2, r3
  118180:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
  118184:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  118188:	e6ff3073 	uxth	r3, r3
  11818c:	e1a00003 	mov	r0, r3
  118190:	ebfff836 	bl	116270 <lwip_htons>
  118194:	e1a03000 	mov	r3, r0
  118198:	e1a02003 	mov	r2, r3
  11819c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1181a0:	e0833002 	add	r3, r3, r2
  1181a4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  acc += (u32_t)lwip_htons(proto_len);
  1181a8:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  1181ac:	e1a00003 	mov	r0, r3
  1181b0:	ebfff82e 	bl	116270 <lwip_htons>
  1181b4:	e1a03000 	mov	r3, r0
  1181b8:	e1a02003 	mov	r2, r3
  1181bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1181c0:	e0833002 	add	r3, r3, r2
  1181c4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
  1181c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1181cc:	e1a02823 	lsr	r2, r3, #16
  1181d0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1181d4:	e6ff3073 	uxth	r3, r3
  1181d8:	e0823003 	add	r3, r2, r3
  1181dc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  acc = FOLD_U32T(acc);
  1181e0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1181e4:	e1a02823 	lsr	r2, r3, #16
  1181e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1181ec:	e6ff3073 	uxth	r3, r3
  1181f0:	e0823003 	add	r3, r2, r3
  1181f4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
  1181f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1181fc:	e6ff3073 	uxth	r3, r3
  118200:	e1e03003 	mvn	r3, r3
  118204:	e6ff3073 	uxth	r3, r3
}
  118208:	e1a00003 	mov	r0, r3
  11820c:	e24bd004 	sub	sp, fp, #4
  118210:	e8bd8800 	pop	{fp, pc}

00118214 <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
       const ip4_addr_t *src, const ip4_addr_t *dest)
{
  118214:	e92d4800 	push	{fp, lr}
  118218:	e28db004 	add	fp, sp, #4
  11821c:	e24dd018 	sub	sp, sp, #24
  118220:	e50b0010 	str	r0, [fp, #-16]
  118224:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  118228:	e1a03001 	mov	r3, r1
  11822c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  118230:	e1a03002 	mov	r3, r2
  118234:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
  118238:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11823c:	e5933000 	ldr	r3, [r3]
  118240:	e50b3008 	str	r3, [fp, #-8]
  acc = (addr & 0xffffUL);
  118244:	e51b3008 	ldr	r3, [fp, #-8]
  118248:	e6ff3073 	uxth	r3, r3
  11824c:	e50b300c 	str	r3, [fp, #-12]
  acc += ((addr >> 16) & 0xffffUL);
  118250:	e51b3008 	ldr	r3, [fp, #-8]
  118254:	e1a03823 	lsr	r3, r3, #16
  118258:	e51b200c 	ldr	r2, [fp, #-12]
  11825c:	e0823003 	add	r3, r2, r3
  118260:	e50b300c 	str	r3, [fp, #-12]
  addr = ip4_addr_get_u32(dest);
  118264:	e59b3004 	ldr	r3, [fp, #4]
  118268:	e5933000 	ldr	r3, [r3]
  11826c:	e50b3008 	str	r3, [fp, #-8]
  acc += (addr & 0xffffUL);
  118270:	e51b3008 	ldr	r3, [fp, #-8]
  118274:	e6ff3073 	uxth	r3, r3
  118278:	e51b200c 	ldr	r2, [fp, #-12]
  11827c:	e0823003 	add	r3, r2, r3
  118280:	e50b300c 	str	r3, [fp, #-12]
  acc += ((addr >> 16) & 0xffffUL);
  118284:	e51b3008 	ldr	r3, [fp, #-8]
  118288:	e1a03823 	lsr	r3, r3, #16
  11828c:	e51b200c 	ldr	r2, [fp, #-12]
  118290:	e0823003 	add	r3, r2, r3
  118294:	e50b300c 	str	r3, [fp, #-12]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
  118298:	e51b300c 	ldr	r3, [fp, #-12]
  11829c:	e1a02823 	lsr	r2, r3, #16
  1182a0:	e51b300c 	ldr	r3, [fp, #-12]
  1182a4:	e6ff3073 	uxth	r3, r3
  1182a8:	e0823003 	add	r3, r2, r3
  1182ac:	e50b300c 	str	r3, [fp, #-12]
  acc = FOLD_U32T(acc);
  1182b0:	e51b300c 	ldr	r3, [fp, #-12]
  1182b4:	e1a02823 	lsr	r2, r3, #16
  1182b8:	e51b300c 	ldr	r3, [fp, #-12]
  1182bc:	e6ff3073 	uxth	r3, r3
  1182c0:	e0823003 	add	r3, r2, r3
  1182c4:	e50b300c 	str	r3, [fp, #-12]

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
  1182c8:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
  1182cc:	e55b1011 	ldrb	r1, [fp, #-17]	; 0xffffffef
  1182d0:	e51b300c 	ldr	r3, [fp, #-12]
  1182d4:	e51b0010 	ldr	r0, [fp, #-16]
  1182d8:	ebffff67 	bl	11807c <inet_cksum_pseudo_base>
  1182dc:	e1a03000 	mov	r3, r0
}
  1182e0:	e1a00003 	mov	r0, r3
  1182e4:	e24bd004 	sub	sp, fp, #4
  1182e8:	e8bd8800 	pop	{fp, pc}

001182ec <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
       const ip_addr_t *src, const ip_addr_t *dest)
{
  1182ec:	e92d4800 	push	{fp, lr}
  1182f0:	e28db004 	add	fp, sp, #4
  1182f4:	e24dd018 	sub	sp, sp, #24
  1182f8:	e50b0008 	str	r0, [fp, #-8]
  1182fc:	e50b3010 	str	r3, [fp, #-16]
  118300:	e1a03001 	mov	r3, r1
  118304:	e54b3009 	strb	r3, [fp, #-9]
  118308:	e1a03002 	mov	r3, r2
  11830c:	e14b30bc 	strh	r3, [fp, #-12]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
  118310:	e15b20bc 	ldrh	r2, [fp, #-12]
  118314:	e55b1009 	ldrb	r1, [fp, #-9]
  118318:	e59b3004 	ldr	r3, [fp, #4]
  11831c:	e58d3000 	str	r3, [sp]
  118320:	e51b3010 	ldr	r3, [fp, #-16]
  118324:	e51b0008 	ldr	r0, [fp, #-8]
  118328:	ebffffb9 	bl	118214 <inet_chksum_pseudo>
  11832c:	e1a03000 	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
  118330:	e1a00003 	mov	r0, r3
  118334:	e24bd004 	sub	sp, fp, #4
  118338:	e8bd8800 	pop	{fp, pc}

0011833c <inet_cksum_pseudo_partial_base>:

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_partial_base(struct pbuf *p, u8_t proto, u16_t proto_len,
       u16_t chksum_len, u32_t acc)
{
  11833c:	e92d4800 	push	{fp, lr}
  118340:	e28db004 	add	fp, sp, #4
  118344:	e24dd018 	sub	sp, sp, #24
  118348:	e50b0010 	str	r0, [fp, #-16]
  11834c:	e1a00001 	mov	r0, r1
  118350:	e1a01002 	mov	r1, r2
  118354:	e1a02003 	mov	r2, r3
  118358:	e1a03000 	mov	r3, r0
  11835c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  118360:	e1a03001 	mov	r3, r1
  118364:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  118368:	e1a03002 	mov	r3, r2
  11836c:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  struct pbuf *q;
  u8_t swapped = 0;
  118370:	e3a03000 	mov	r3, #0
  118374:	e54b3009 	strb	r3, [fp, #-9]
  u16_t chklen;

  /* iterate through all pbuf in chain */
  for (q = p; (q != NULL) && (chksum_len > 0); q = q->next) {
  118378:	e51b3010 	ldr	r3, [fp, #-16]
  11837c:	e50b3008 	str	r3, [fp, #-8]
  118380:	ea00003c 	b	118478 <inet_cksum_pseudo_partial_base+0x13c>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
      (void *)q, (void *)q->next));
    chklen = q->len;
  118384:	e51b3008 	ldr	r3, [fp, #-8]
  118388:	e1d330ba 	ldrh	r3, [r3, #10]
  11838c:	e14b30bc 	strh	r3, [fp, #-12]
    if (chklen > chksum_len) {
  118390:	e15b20bc 	ldrh	r2, [fp, #-12]
  118394:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  118398:	e1520003 	cmp	r2, r3
  11839c:	9a000001 	bls	1183a8 <inet_cksum_pseudo_partial_base+0x6c>
      chklen = chksum_len;
  1183a0:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  1183a4:	e14b30bc 	strh	r3, [fp, #-12]
    }
    acc += LWIP_CHKSUM(q->payload, chklen);
  1183a8:	e51b3008 	ldr	r3, [fp, #-8]
  1183ac:	e5933004 	ldr	r3, [r3, #4]
  1183b0:	e15b20bc 	ldrh	r2, [fp, #-12]
  1183b4:	e1a01002 	mov	r1, r2
  1183b8:	e1a00003 	mov	r0, r3
  1183bc:	ebfffed6 	bl	117f1c <lwip_standard_chksum>
  1183c0:	e1a03000 	mov	r3, r0
  1183c4:	e1a02003 	mov	r2, r3
  1183c8:	e59b3004 	ldr	r3, [fp, #4]
  1183cc:	e0833002 	add	r3, r3, r2
  1183d0:	e58b3004 	str	r3, [fp, #4]
    chksum_len -= chklen;
  1183d4:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  1183d8:	e15b30bc 	ldrh	r3, [fp, #-12]
  1183dc:	e0423003 	sub	r3, r2, r3
  1183e0:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
    LWIP_ASSERT("delete me", chksum_len < 0x7fff);
  1183e4:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  1183e8:	e3072ffe 	movw	r2, #32766	; 0x7ffe
  1183ec:	e1530002 	cmp	r3, r2
  1183f0:	9a000006 	bls	118410 <inet_cksum_pseudo_partial_base+0xd4>
  1183f4:	e306063c 	movw	r0, #26172	; 0x663c
  1183f8:	e3400014 	movt	r0, #20
  1183fc:	ebffab44 	bl	103114 <rt_kprintf>
  118400:	e3a01e1a 	mov	r1, #416	; 0x1a0
  118404:	e3060648 	movw	r0, #26184	; 0x6648
  118408:	e3400014 	movt	r0, #20
  11840c:	ebffc9c0 	bl	10ab14 <sys_arch_assert>
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* fold the upper bit down */
    acc = FOLD_U32T(acc);
  118410:	e59b3004 	ldr	r3, [fp, #4]
  118414:	e1a02823 	lsr	r2, r3, #16
  118418:	e59b3004 	ldr	r3, [fp, #4]
  11841c:	e6ff3073 	uxth	r3, r3
  118420:	e0823003 	add	r3, r2, r3
  118424:	e58b3004 	str	r3, [fp, #4]
    if (q->len % 2 != 0) {
  118428:	e51b3008 	ldr	r3, [fp, #-8]
  11842c:	e1d330ba 	ldrh	r3, [r3, #10]
  118430:	e2033001 	and	r3, r3, #1
  118434:	e6ff3073 	uxth	r3, r3
  118438:	e3530000 	cmp	r3, #0
  11843c:	0a00000a 	beq	11846c <inet_cksum_pseudo_partial_base+0x130>
      swapped = 1 - swapped;
  118440:	e55b3009 	ldrb	r3, [fp, #-9]
  118444:	e2633001 	rsb	r3, r3, #1
  118448:	e54b3009 	strb	r3, [fp, #-9]
      acc = SWAP_BYTES_IN_WORD(acc);
  11844c:	e59b3004 	ldr	r3, [fp, #4]
  118450:	e1a03403 	lsl	r3, r3, #8
  118454:	e6ff2073 	uxth	r2, r3
  118458:	e59b3004 	ldr	r3, [fp, #4]
  11845c:	e1a03423 	lsr	r3, r3, #8
  118460:	e6ef3073 	uxtb	r3, r3
  118464:	e1823003 	orr	r3, r2, r3
  118468:	e58b3004 	str	r3, [fp, #4]
  for (q = p; (q != NULL) && (chksum_len > 0); q = q->next) {
  11846c:	e51b3008 	ldr	r3, [fp, #-8]
  118470:	e5933000 	ldr	r3, [r3]
  118474:	e50b3008 	str	r3, [fp, #-8]
  118478:	e51b3008 	ldr	r3, [fp, #-8]
  11847c:	e3530000 	cmp	r3, #0
  118480:	0a000002 	beq	118490 <inet_cksum_pseudo_partial_base+0x154>
  118484:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  118488:	e3530000 	cmp	r3, #0
  11848c:	1affffbc 	bne	118384 <inet_cksum_pseudo_partial_base+0x48>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
  118490:	e55b3009 	ldrb	r3, [fp, #-9]
  118494:	e3530000 	cmp	r3, #0
  118498:	0a000007 	beq	1184bc <inet_cksum_pseudo_partial_base+0x180>
    acc = SWAP_BYTES_IN_WORD(acc);
  11849c:	e59b3004 	ldr	r3, [fp, #4]
  1184a0:	e1a03403 	lsl	r3, r3, #8
  1184a4:	e6ff2073 	uxth	r2, r3
  1184a8:	e59b3004 	ldr	r3, [fp, #4]
  1184ac:	e1a03423 	lsr	r3, r3, #8
  1184b0:	e6ef3073 	uxtb	r3, r3
  1184b4:	e1823003 	orr	r3, r2, r3
  1184b8:	e58b3004 	str	r3, [fp, #4]
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
  1184bc:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  1184c0:	e6ff3073 	uxth	r3, r3
  1184c4:	e1a00003 	mov	r0, r3
  1184c8:	ebfff768 	bl	116270 <lwip_htons>
  1184cc:	e1a03000 	mov	r3, r0
  1184d0:	e1a02003 	mov	r2, r3
  1184d4:	e59b3004 	ldr	r3, [fp, #4]
  1184d8:	e0833002 	add	r3, r3, r2
  1184dc:	e58b3004 	str	r3, [fp, #4]
  acc += (u32_t)lwip_htons(proto_len);
  1184e0:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  1184e4:	e1a00003 	mov	r0, r3
  1184e8:	ebfff760 	bl	116270 <lwip_htons>
  1184ec:	e1a03000 	mov	r3, r0
  1184f0:	e1a02003 	mov	r2, r3
  1184f4:	e59b3004 	ldr	r3, [fp, #4]
  1184f8:	e0833002 	add	r3, r3, r2
  1184fc:	e58b3004 	str	r3, [fp, #4]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
  118500:	e59b3004 	ldr	r3, [fp, #4]
  118504:	e1a02823 	lsr	r2, r3, #16
  118508:	e59b3004 	ldr	r3, [fp, #4]
  11850c:	e6ff3073 	uxth	r3, r3
  118510:	e0823003 	add	r3, r2, r3
  118514:	e58b3004 	str	r3, [fp, #4]
  acc = FOLD_U32T(acc);
  118518:	e59b3004 	ldr	r3, [fp, #4]
  11851c:	e1a02823 	lsr	r2, r3, #16
  118520:	e59b3004 	ldr	r3, [fp, #4]
  118524:	e6ff3073 	uxth	r3, r3
  118528:	e0823003 	add	r3, r2, r3
  11852c:	e58b3004 	str	r3, [fp, #4]
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
  118530:	e59b3004 	ldr	r3, [fp, #4]
  118534:	e6ff3073 	uxth	r3, r3
  118538:	e1e03003 	mvn	r3, r3
  11853c:	e6ff3073 	uxth	r3, r3
}
  118540:	e1a00003 	mov	r0, r3
  118544:	e24bd004 	sub	sp, fp, #4
  118548:	e8bd8800 	pop	{fp, pc}

0011854c <inet_chksum_pseudo_partial>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo_partial(struct pbuf *p, u8_t proto, u16_t proto_len,
       u16_t chksum_len, const ip4_addr_t *src, const ip4_addr_t *dest)
{
  11854c:	e92d4800 	push	{fp, lr}
  118550:	e28db004 	add	fp, sp, #4
  118554:	e24dd020 	sub	sp, sp, #32
  118558:	e50b0010 	str	r0, [fp, #-16]
  11855c:	e1a00001 	mov	r0, r1
  118560:	e1a01002 	mov	r1, r2
  118564:	e1a02003 	mov	r2, r3
  118568:	e1a03000 	mov	r3, r0
  11856c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  118570:	e1a03001 	mov	r3, r1
  118574:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  118578:	e1a03002 	mov	r3, r2
  11857c:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
  118580:	e59b3004 	ldr	r3, [fp, #4]
  118584:	e5933000 	ldr	r3, [r3]
  118588:	e50b3008 	str	r3, [fp, #-8]
  acc = (addr & 0xffffUL);
  11858c:	e51b3008 	ldr	r3, [fp, #-8]
  118590:	e6ff3073 	uxth	r3, r3
  118594:	e50b300c 	str	r3, [fp, #-12]
  acc += ((addr >> 16) & 0xffffUL);
  118598:	e51b3008 	ldr	r3, [fp, #-8]
  11859c:	e1a03823 	lsr	r3, r3, #16
  1185a0:	e51b200c 	ldr	r2, [fp, #-12]
  1185a4:	e0823003 	add	r3, r2, r3
  1185a8:	e50b300c 	str	r3, [fp, #-12]
  addr = ip4_addr_get_u32(dest);
  1185ac:	e59b3008 	ldr	r3, [fp, #8]
  1185b0:	e5933000 	ldr	r3, [r3]
  1185b4:	e50b3008 	str	r3, [fp, #-8]
  acc += (addr & 0xffffUL);
  1185b8:	e51b3008 	ldr	r3, [fp, #-8]
  1185bc:	e6ff3073 	uxth	r3, r3
  1185c0:	e51b200c 	ldr	r2, [fp, #-12]
  1185c4:	e0823003 	add	r3, r2, r3
  1185c8:	e50b300c 	str	r3, [fp, #-12]
  acc += ((addr >> 16) & 0xffffUL);
  1185cc:	e51b3008 	ldr	r3, [fp, #-8]
  1185d0:	e1a03823 	lsr	r3, r3, #16
  1185d4:	e51b200c 	ldr	r2, [fp, #-12]
  1185d8:	e0823003 	add	r3, r2, r3
  1185dc:	e50b300c 	str	r3, [fp, #-12]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
  1185e0:	e51b300c 	ldr	r3, [fp, #-12]
  1185e4:	e1a02823 	lsr	r2, r3, #16
  1185e8:	e51b300c 	ldr	r3, [fp, #-12]
  1185ec:	e6ff3073 	uxth	r3, r3
  1185f0:	e0823003 	add	r3, r2, r3
  1185f4:	e50b300c 	str	r3, [fp, #-12]
  acc = FOLD_U32T(acc);
  1185f8:	e51b300c 	ldr	r3, [fp, #-12]
  1185fc:	e1a02823 	lsr	r2, r3, #16
  118600:	e51b300c 	ldr	r3, [fp, #-12]
  118604:	e6ff3073 	uxth	r3, r3
  118608:	e0823003 	add	r3, r2, r3
  11860c:	e50b300c 	str	r3, [fp, #-12]

  return inet_cksum_pseudo_partial_base(p, proto, proto_len, chksum_len, acc);
  118610:	e15b01b6 	ldrh	r0, [fp, #-22]	; 0xffffffea
  118614:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
  118618:	e55b1011 	ldrb	r1, [fp, #-17]	; 0xffffffef
  11861c:	e51b300c 	ldr	r3, [fp, #-12]
  118620:	e58d3000 	str	r3, [sp]
  118624:	e1a03000 	mov	r3, r0
  118628:	e51b0010 	ldr	r0, [fp, #-16]
  11862c:	ebffff42 	bl	11833c <inet_cksum_pseudo_partial_base>
  118630:	e1a03000 	mov	r3, r0
}
  118634:	e1a00003 	mov	r0, r3
  118638:	e24bd004 	sub	sp, fp, #4
  11863c:	e8bd8800 	pop	{fp, pc}

00118640 <ip_chksum_pseudo_partial>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo_partial(struct pbuf *p, u8_t proto, u16_t proto_len,
       u16_t chksum_len, const ip_addr_t *src, const ip_addr_t *dest)
{
  118640:	e92d4800 	push	{fp, lr}
  118644:	e28db004 	add	fp, sp, #4
  118648:	e24dd018 	sub	sp, sp, #24
  11864c:	e50b0008 	str	r0, [fp, #-8]
  118650:	e1a00001 	mov	r0, r1
  118654:	e1a01002 	mov	r1, r2
  118658:	e1a02003 	mov	r2, r3
  11865c:	e1a03000 	mov	r3, r0
  118660:	e54b3009 	strb	r3, [fp, #-9]
  118664:	e1a03001 	mov	r3, r1
  118668:	e14b30bc 	strh	r3, [fp, #-12]
  11866c:	e1a03002 	mov	r3, r2
  118670:	e14b30be 	strh	r3, [fp, #-14]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo_partial(p, proto, proto_len, chksum_len, ip_2_ip4(src), ip_2_ip4(dest));
  118674:	e15b00be 	ldrh	r0, [fp, #-14]
  118678:	e15b20bc 	ldrh	r2, [fp, #-12]
  11867c:	e55b1009 	ldrb	r1, [fp, #-9]
  118680:	e59b3008 	ldr	r3, [fp, #8]
  118684:	e58d3004 	str	r3, [sp, #4]
  118688:	e59b3004 	ldr	r3, [fp, #4]
  11868c:	e58d3000 	str	r3, [sp]
  118690:	e1a03000 	mov	r3, r0
  118694:	e51b0008 	ldr	r0, [fp, #-8]
  118698:	ebffffab 	bl	11854c <inet_chksum_pseudo_partial>
  11869c:	e1a03000 	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
  1186a0:	e1a00003 	mov	r0, r3
  1186a4:	e24bd004 	sub	sp, fp, #4
  1186a8:	e8bd8800 	pop	{fp, pc}

001186ac <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
  1186ac:	e92d4800 	push	{fp, lr}
  1186b0:	e28db004 	add	fp, sp, #4
  1186b4:	e24dd008 	sub	sp, sp, #8
  1186b8:	e50b0008 	str	r0, [fp, #-8]
  1186bc:	e1a03001 	mov	r3, r1
  1186c0:	e14b30ba 	strh	r3, [fp, #-10]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
  1186c4:	e15b30ba 	ldrh	r3, [fp, #-10]
  1186c8:	e1a01003 	mov	r1, r3
  1186cc:	e51b0008 	ldr	r0, [fp, #-8]
  1186d0:	ebfffe11 	bl	117f1c <lwip_standard_chksum>
  1186d4:	e1a03000 	mov	r3, r0
  1186d8:	e1e03003 	mvn	r3, r3
  1186dc:	e6ff3073 	uxth	r3, r3
}
  1186e0:	e1a00003 	mov	r0, r3
  1186e4:	e24bd004 	sub	sp, fp, #4
  1186e8:	e8bd8800 	pop	{fp, pc}

001186ec <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
  1186ec:	e92d4800 	push	{fp, lr}
  1186f0:	e28db004 	add	fp, sp, #4
  1186f4:	e24dd018 	sub	sp, sp, #24
  1186f8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  u32_t acc;
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
  1186fc:	e3a03000 	mov	r3, #0
  118700:	e50b3008 	str	r3, [fp, #-8]
  swapped = 0;
  118704:	e3a03000 	mov	r3, #0
  118708:	e54b300d 	strb	r3, [fp, #-13]
  for (q = p; q != NULL; q = q->next) {
  11870c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118710:	e50b300c 	str	r3, [fp, #-12]
  118714:	ea000025 	b	1187b0 <inet_chksum_pbuf+0xc4>
    acc += LWIP_CHKSUM(q->payload, q->len);
  118718:	e51b300c 	ldr	r3, [fp, #-12]
  11871c:	e5932004 	ldr	r2, [r3, #4]
  118720:	e51b300c 	ldr	r3, [fp, #-12]
  118724:	e1d330ba 	ldrh	r3, [r3, #10]
  118728:	e1a01003 	mov	r1, r3
  11872c:	e1a00002 	mov	r0, r2
  118730:	ebfffdf9 	bl	117f1c <lwip_standard_chksum>
  118734:	e1a03000 	mov	r3, r0
  118738:	e1a02003 	mov	r2, r3
  11873c:	e51b3008 	ldr	r3, [fp, #-8]
  118740:	e0833002 	add	r3, r3, r2
  118744:	e50b3008 	str	r3, [fp, #-8]
    acc = FOLD_U32T(acc);
  118748:	e51b3008 	ldr	r3, [fp, #-8]
  11874c:	e1a02823 	lsr	r2, r3, #16
  118750:	e51b3008 	ldr	r3, [fp, #-8]
  118754:	e6ff3073 	uxth	r3, r3
  118758:	e0823003 	add	r3, r2, r3
  11875c:	e50b3008 	str	r3, [fp, #-8]
    if (q->len % 2 != 0) {
  118760:	e51b300c 	ldr	r3, [fp, #-12]
  118764:	e1d330ba 	ldrh	r3, [r3, #10]
  118768:	e2033001 	and	r3, r3, #1
  11876c:	e6ff3073 	uxth	r3, r3
  118770:	e3530000 	cmp	r3, #0
  118774:	0a00000a 	beq	1187a4 <inet_chksum_pbuf+0xb8>
      swapped = 1 - swapped;
  118778:	e55b300d 	ldrb	r3, [fp, #-13]
  11877c:	e2633001 	rsb	r3, r3, #1
  118780:	e54b300d 	strb	r3, [fp, #-13]
      acc = SWAP_BYTES_IN_WORD(acc);
  118784:	e51b3008 	ldr	r3, [fp, #-8]
  118788:	e1a03403 	lsl	r3, r3, #8
  11878c:	e6ff2073 	uxth	r2, r3
  118790:	e51b3008 	ldr	r3, [fp, #-8]
  118794:	e1a03423 	lsr	r3, r3, #8
  118798:	e6ef3073 	uxtb	r3, r3
  11879c:	e1823003 	orr	r3, r2, r3
  1187a0:	e50b3008 	str	r3, [fp, #-8]
  for (q = p; q != NULL; q = q->next) {
  1187a4:	e51b300c 	ldr	r3, [fp, #-12]
  1187a8:	e5933000 	ldr	r3, [r3]
  1187ac:	e50b300c 	str	r3, [fp, #-12]
  1187b0:	e51b300c 	ldr	r3, [fp, #-12]
  1187b4:	e3530000 	cmp	r3, #0
  1187b8:	1affffd6 	bne	118718 <inet_chksum_pbuf+0x2c>
    }
  }

  if (swapped) {
  1187bc:	e55b300d 	ldrb	r3, [fp, #-13]
  1187c0:	e3530000 	cmp	r3, #0
  1187c4:	0a000007 	beq	1187e8 <inet_chksum_pbuf+0xfc>
    acc = SWAP_BYTES_IN_WORD(acc);
  1187c8:	e51b3008 	ldr	r3, [fp, #-8]
  1187cc:	e1a03403 	lsl	r3, r3, #8
  1187d0:	e6ff2073 	uxth	r2, r3
  1187d4:	e51b3008 	ldr	r3, [fp, #-8]
  1187d8:	e1a03423 	lsr	r3, r3, #8
  1187dc:	e6ef3073 	uxtb	r3, r3
  1187e0:	e1823003 	orr	r3, r2, r3
  1187e4:	e50b3008 	str	r3, [fp, #-8]
  }
  return (u16_t)~(acc & 0xffffUL);
  1187e8:	e51b3008 	ldr	r3, [fp, #-8]
  1187ec:	e6ff3073 	uxth	r3, r3
  1187f0:	e1e03003 	mvn	r3, r3
  1187f4:	e6ff3073 	uxth	r3, r3
}
  1187f8:	e1a00003 	mov	r0, r3
  1187fc:	e24bd004 	sub	sp, fp, #4
  118800:	e8bd8800 	pop	{fp, pc}

00118804 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
  118804:	e92d4800 	push	{fp, lr}
  118808:	e28db004 	add	fp, sp, #4
  11880c:	e24dd008 	sub	sp, sp, #8
#ifndef LWIP_SKIP_PACKING_CHECK
  LWIP_ASSERT("Struct packing not implemented correctly. Check your lwIP port.", sizeof(struct packed_struct_test) == PACKED_STRUCT_TEST_EXPECTED_SIZE);
#endif

  /* Modules initialization */
  stats_init();
  118810:	eb000f7b 	bl	11c604 <stats_init>
#if !NO_SYS
  sys_init();
  118814:	ebffc621 	bl	10a0a0 <sys_init>
#endif /* !NO_SYS */
  mem_init();
  118818:	ebffc8dc 	bl	10ab90 <mem_init>
  memp_init();
  11881c:	eb0000c6 	bl	118b3c <memp_init>
  pbuf_init();
  netif_init();
  118820:	eb0001d9 	bl	118f8c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
  118824:	eb003b7f 	bl	127628 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
  118828:	eb001109 	bl	11cc54 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
  11882c:	eb005ca1 	bl	12fab8 <igmp_init>
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
  118830:	ebfff78e 	bl	116670 <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
  118834:	eb0039d6 	bl	126f94 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
  118838:	e320f000 	nop	{0}
  11883c:	e24bd004 	sub	sp, fp, #4
  118840:	e8bd8800 	pop	{fp, pc}

00118844 <memp_overflow_check_element_overflow>:
 * @param p the memp element to check
 * @param desc the pool p comes from
 */
static void
memp_overflow_check_element_overflow(struct memp *p, const struct memp_desc *desc)
{
  118844:	e92d4800 	push	{fp, lr}
  118848:	e28db004 	add	fp, sp, #4
  11884c:	e24dd090 	sub	sp, sp, #144	; 0x90
  118850:	e50b0090 	str	r0, [fp, #-144]	; 0xffffff70
  118854:	e50b1094 	str	r1, [fp, #-148]	; 0xffffff6c
#if MEMP_SANITY_REGION_AFTER_ALIGNED > 0
  u16_t k;
  u8_t *m;
  m = (u8_t*)p + MEMP_SIZE + desc->size;
  118858:	e51b3094 	ldr	r3, [fp, #-148]	; 0xffffff6c
  11885c:	e1d330b8 	ldrh	r3, [r3, #8]
  118860:	e283301c 	add	r3, r3, #28
  118864:	e51b2090 	ldr	r2, [fp, #-144]	; 0xffffff70
  118868:	e0823003 	add	r3, r2, r3
  11886c:	e50b300c 	str	r3, [fp, #-12]
  for (k = 0; k < MEMP_SANITY_REGION_AFTER_ALIGNED; k++) {
  118870:	e3a03000 	mov	r3, #0
  118874:	e14b30b6 	strh	r3, [fp, #-6]
  118878:	ea000022 	b	118908 <memp_overflow_check_element_overflow+0xc4>
    if (m[k] != 0xcd) {
  11887c:	e15b30b6 	ldrh	r3, [fp, #-6]
  118880:	e51b200c 	ldr	r2, [fp, #-12]
  118884:	e0823003 	add	r3, r2, r3
  118888:	e5d33000 	ldrb	r3, [r3]
  11888c:	e35300cd 	cmp	r3, #205	; 0xcd
  118890:	0a000019 	beq	1188fc <memp_overflow_check_element_overflow+0xb8>
      char errstr[128] = "detected memp overflow in pool ";
  118894:	e3063900 	movw	r3, #26880	; 0x6900
  118898:	e3403014 	movt	r3, #20
  11889c:	e24bc08c 	sub	ip, fp, #140	; 0x8c
  1188a0:	e1a0e003 	mov	lr, r3
  1188a4:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
  1188a8:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
  1188ac:	e89e000f 	ldm	lr, {r0, r1, r2, r3}
  1188b0:	e88c000f 	stm	ip, {r0, r1, r2, r3}
  1188b4:	e24b306c 	sub	r3, fp, #108	; 0x6c
  1188b8:	e3a02060 	mov	r2, #96	; 0x60
  1188bc:	e3a01000 	mov	r1, #0
  1188c0:	e1a00003 	mov	r0, r3
  1188c4:	eb00a008 	bl	1408ec <memset>
      strcat(errstr, desc->desc);
  1188c8:	e51b3094 	ldr	r3, [fp, #-148]	; 0xffffff6c
  1188cc:	e5932000 	ldr	r2, [r3]
  1188d0:	e24b308c 	sub	r3, fp, #140	; 0x8c
  1188d4:	e1a01002 	mov	r1, r2
  1188d8:	e1a00003 	mov	r0, r3
  1188dc:	eb00a068 	bl	140a84 <strcat>
      LWIP_ASSERT(errstr, 0);
  1188e0:	e24b308c 	sub	r3, fp, #140	; 0x8c
  1188e4:	e1a00003 	mov	r0, r3
  1188e8:	ebffaa09 	bl	103114 <rt_kprintf>
  1188ec:	e3a0108a 	mov	r1, #138	; 0x8a
  1188f0:	e30608d4 	movw	r0, #26836	; 0x68d4
  1188f4:	e3400014 	movt	r0, #20
  1188f8:	ebffc885 	bl	10ab14 <sys_arch_assert>
  for (k = 0; k < MEMP_SANITY_REGION_AFTER_ALIGNED; k++) {
  1188fc:	e15b30b6 	ldrh	r3, [fp, #-6]
  118900:	e2833001 	add	r3, r3, #1
  118904:	e14b30b6 	strh	r3, [fp, #-6]
  118908:	e15b30b6 	ldrh	r3, [fp, #-6]
  11890c:	e353000f 	cmp	r3, #15
  118910:	9affffd9 	bls	11887c <memp_overflow_check_element_overflow+0x38>
  }
#else /* MEMP_SANITY_REGION_AFTER_ALIGNED > 0 */
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(desc);
#endif /* MEMP_SANITY_REGION_AFTER_ALIGNED > 0 */
}
  118914:	e320f000 	nop	{0}
  118918:	e24bd004 	sub	sp, fp, #4
  11891c:	e8bd8800 	pop	{fp, pc}

00118920 <memp_overflow_check_element_underflow>:
 * @param p the memp element to check
 * @param desc the pool p comes from
 */
static void
memp_overflow_check_element_underflow(struct memp *p, const struct memp_desc *desc)
{
  118920:	e92d4800 	push	{fp, lr}
  118924:	e28db004 	add	fp, sp, #4
  118928:	e24dd090 	sub	sp, sp, #144	; 0x90
  11892c:	e50b0090 	str	r0, [fp, #-144]	; 0xffffff70
  118930:	e50b1094 	str	r1, [fp, #-148]	; 0xffffff6c
#if MEMP_SANITY_REGION_BEFORE_ALIGNED > 0
  u16_t k;
  u8_t *m;
  m = (u8_t*)p + MEMP_SIZE - MEMP_SANITY_REGION_BEFORE_ALIGNED;
  118934:	e51b3090 	ldr	r3, [fp, #-144]	; 0xffffff70
  118938:	e283300c 	add	r3, r3, #12
  11893c:	e50b300c 	str	r3, [fp, #-12]
  for (k = 0; k < MEMP_SANITY_REGION_BEFORE_ALIGNED; k++) {
  118940:	e3a03000 	mov	r3, #0
  118944:	e14b30b6 	strh	r3, [fp, #-6]
  118948:	ea000024 	b	1189e0 <memp_overflow_check_element_underflow+0xc0>
    if (m[k] != 0xcd) {
  11894c:	e15b30b6 	ldrh	r3, [fp, #-6]
  118950:	e51b200c 	ldr	r2, [fp, #-12]
  118954:	e0823003 	add	r3, r2, r3
  118958:	e5d33000 	ldrb	r3, [r3]
  11895c:	e35300cd 	cmp	r3, #205	; 0xcd
  118960:	0a00001b 	beq	1189d4 <memp_overflow_check_element_underflow+0xb4>
      char errstr[128] = "detected memp underflow in pool ";
  118964:	e3063980 	movw	r3, #27008	; 0x6980
  118968:	e3403014 	movt	r3, #20
  11896c:	e24bc08c 	sub	ip, fp, #140	; 0x8c
  118970:	e1a0e003 	mov	lr, r3
  118974:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
  118978:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
  11897c:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
  118980:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
  118984:	e59e3000 	ldr	r3, [lr]
  118988:	e5cc3000 	strb	r3, [ip]
  11898c:	e24b306b 	sub	r3, fp, #107	; 0x6b
  118990:	e3a0205f 	mov	r2, #95	; 0x5f
  118994:	e3a01000 	mov	r1, #0
  118998:	e1a00003 	mov	r0, r3
  11899c:	eb009fd2 	bl	1408ec <memset>
      strcat(errstr, desc->desc);
  1189a0:	e51b3094 	ldr	r3, [fp, #-148]	; 0xffffff6c
  1189a4:	e5932000 	ldr	r2, [r3]
  1189a8:	e24b308c 	sub	r3, fp, #140	; 0x8c
  1189ac:	e1a01002 	mov	r1, r2
  1189b0:	e1a00003 	mov	r0, r3
  1189b4:	eb00a032 	bl	140a84 <strcat>
      LWIP_ASSERT(errstr, 0);
  1189b8:	e24b308c 	sub	r3, fp, #140	; 0x8c
  1189bc:	e1a00003 	mov	r0, r3
  1189c0:	ebffa9d3 	bl	103114 <rt_kprintf>
  1189c4:	e3a010a5 	mov	r1, #165	; 0xa5
  1189c8:	e30608d4 	movw	r0, #26836	; 0x68d4
  1189cc:	e3400014 	movt	r0, #20
  1189d0:	ebffc84f 	bl	10ab14 <sys_arch_assert>
  for (k = 0; k < MEMP_SANITY_REGION_BEFORE_ALIGNED; k++) {
  1189d4:	e15b30b6 	ldrh	r3, [fp, #-6]
  1189d8:	e2833001 	add	r3, r3, #1
  1189dc:	e14b30b6 	strh	r3, [fp, #-6]
  1189e0:	e15b30b6 	ldrh	r3, [fp, #-6]
  1189e4:	e353000f 	cmp	r3, #15
  1189e8:	9affffd7 	bls	11894c <memp_overflow_check_element_underflow+0x2c>
  }
#else /* MEMP_SANITY_REGION_BEFORE_ALIGNED > 0 */
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(desc);
#endif /* MEMP_SANITY_REGION_BEFORE_ALIGNED > 0 */
}
  1189ec:	e320f000 	nop	{0}
  1189f0:	e24bd004 	sub	sp, fp, #4
  1189f4:	e8bd8800 	pop	{fp, pc}

001189f8 <memp_overflow_init_element>:
/**
 * Initialize the restricted area of on memp element.
 */
static void
memp_overflow_init_element(struct memp *p, const struct memp_desc *desc)
{
  1189f8:	e92d4800 	push	{fp, lr}
  1189fc:	e28db004 	add	fp, sp, #4
  118a00:	e24dd010 	sub	sp, sp, #16
  118a04:	e50b0010 	str	r0, [fp, #-16]
  118a08:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
#if MEMP_SANITY_REGION_BEFORE_ALIGNED > 0 || MEMP_SANITY_REGION_AFTER_ALIGNED > 0
  u8_t *m;
#if MEMP_SANITY_REGION_BEFORE_ALIGNED > 0
  m = (u8_t*)p + MEMP_SIZE - MEMP_SANITY_REGION_BEFORE_ALIGNED;
  118a0c:	e51b3010 	ldr	r3, [fp, #-16]
  118a10:	e283300c 	add	r3, r3, #12
  118a14:	e50b3008 	str	r3, [fp, #-8]
  memset(m, 0xcd, MEMP_SANITY_REGION_BEFORE_ALIGNED);
  118a18:	e3a02010 	mov	r2, #16
  118a1c:	e3a010cd 	mov	r1, #205	; 0xcd
  118a20:	e51b0008 	ldr	r0, [fp, #-8]
  118a24:	eb009fb0 	bl	1408ec <memset>
#endif
#if MEMP_SANITY_REGION_AFTER_ALIGNED > 0
  m = (u8_t*)p + MEMP_SIZE + desc->size;
  118a28:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  118a2c:	e1d330b8 	ldrh	r3, [r3, #8]
  118a30:	e283301c 	add	r3, r3, #28
  118a34:	e51b2010 	ldr	r2, [fp, #-16]
  118a38:	e0823003 	add	r3, r2, r3
  118a3c:	e50b3008 	str	r3, [fp, #-8]
  memset(m, 0xcd, MEMP_SANITY_REGION_AFTER_ALIGNED);
  118a40:	e3a02010 	mov	r2, #16
  118a44:	e3a010cd 	mov	r1, #205	; 0xcd
  118a48:	e51b0008 	ldr	r0, [fp, #-8]
  118a4c:	eb009fa6 	bl	1408ec <memset>
#endif
#else /* MEMP_SANITY_REGION_BEFORE_ALIGNED > 0 || MEMP_SANITY_REGION_AFTER_ALIGNED > 0 */
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(desc);
#endif /* MEMP_SANITY_REGION_BEFORE_ALIGNED > 0 || MEMP_SANITY_REGION_AFTER_ALIGNED > 0 */
}
  118a50:	e320f000 	nop	{0}
  118a54:	e24bd004 	sub	sp, fp, #4
  118a58:	e8bd8800 	pop	{fp, pc}

00118a5c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
  118a5c:	e92d4800 	push	{fp, lr}
  118a60:	e28db004 	add	fp, sp, #4
  118a64:	e24dd010 	sub	sp, sp, #16
  118a68:	e50b0010 	str	r0, [fp, #-16]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
  118a6c:	e51b3010 	ldr	r3, [fp, #-16]
  118a70:	e5933010 	ldr	r3, [r3, #16]
  118a74:	e3a02000 	mov	r2, #0
  118a78:	e5832000 	str	r2, [r3]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
  118a7c:	e51b3010 	ldr	r3, [fp, #-16]
  118a80:	e593300c 	ldr	r3, [r3, #12]
  118a84:	e2833003 	add	r3, r3, #3
  118a88:	e3c33003 	bic	r3, r3, #3
  118a8c:	e50b300c 	str	r3, [fp, #-12]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
  118a90:	e3a03000 	mov	r3, #0
  118a94:	e50b3008 	str	r3, [fp, #-8]
  118a98:	ea000014 	b	118af0 <memp_init_pool+0x94>
    memp->next = *desc->tab;
  118a9c:	e51b3010 	ldr	r3, [fp, #-16]
  118aa0:	e5933010 	ldr	r3, [r3, #16]
  118aa4:	e5932000 	ldr	r2, [r3]
  118aa8:	e51b300c 	ldr	r3, [fp, #-12]
  118aac:	e5832000 	str	r2, [r3]
    *desc->tab = memp;
  118ab0:	e51b3010 	ldr	r3, [fp, #-16]
  118ab4:	e5933010 	ldr	r3, [r3, #16]
  118ab8:	e51b200c 	ldr	r2, [fp, #-12]
  118abc:	e5832000 	str	r2, [r3]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
  118ac0:	e51b1010 	ldr	r1, [fp, #-16]
  118ac4:	e51b000c 	ldr	r0, [fp, #-12]
  118ac8:	ebffffca 	bl	1189f8 <memp_overflow_init_element>
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
  118acc:	e51b3010 	ldr	r3, [fp, #-16]
  118ad0:	e1d330b8 	ldrh	r3, [r3, #8]
#if MEMP_OVERFLOW_CHECK
      + MEMP_SANITY_REGION_AFTER_ALIGNED
  118ad4:	e283302c 	add	r3, r3, #44	; 0x2c
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
  118ad8:	e51b200c 	ldr	r2, [fp, #-12]
  118adc:	e0823003 	add	r3, r2, r3
  118ae0:	e50b300c 	str	r3, [fp, #-12]
  for (i = 0; i < desc->num; ++i) {
  118ae4:	e51b3008 	ldr	r3, [fp, #-8]
  118ae8:	e2833001 	add	r3, r3, #1
  118aec:	e50b3008 	str	r3, [fp, #-8]
  118af0:	e51b3010 	ldr	r3, [fp, #-16]
  118af4:	e1d330ba 	ldrh	r3, [r3, #10]
  118af8:	e1a02003 	mov	r2, r3
  118afc:	e51b3008 	ldr	r3, [fp, #-8]
  118b00:	e1530002 	cmp	r3, r2
  118b04:	baffffe4 	blt	118a9c <memp_init_pool+0x40>
#endif
    );
  }
#if MEMP_STATS
  desc->stats->avail = desc->num;
  118b08:	e51b3010 	ldr	r3, [fp, #-16]
  118b0c:	e5933004 	ldr	r3, [r3, #4]
  118b10:	e51b2010 	ldr	r2, [fp, #-16]
  118b14:	e1d220ba 	ldrh	r2, [r2, #10]
  118b18:	e1c320b6 	strh	r2, [r3, #6]
#endif /* MEMP_STATS */
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
  118b1c:	e51b3010 	ldr	r3, [fp, #-16]
  118b20:	e5933004 	ldr	r3, [r3, #4]
  118b24:	e51b2010 	ldr	r2, [fp, #-16]
  118b28:	e5922000 	ldr	r2, [r2]
  118b2c:	e5832000 	str	r2, [r3]
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
  118b30:	e320f000 	nop	{0}
  118b34:	e24bd004 	sub	sp, fp, #4
  118b38:	e8bd8800 	pop	{fp, pc}

00118b3c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
  118b3c:	e92d4800 	push	{fp, lr}
  118b40:	e28db004 	add	fp, sp, #4
  118b44:	e24dd008 	sub	sp, sp, #8
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
  118b48:	e3a03000 	mov	r3, #0
  118b4c:	e14b30b6 	strh	r3, [fp, #-6]
  118b50:	ea000014 	b	118ba8 <memp_init+0x6c>
    memp_init_pool(memp_pools[i]);
  118b54:	e15b20b6 	ldrh	r2, [fp, #-6]
  118b58:	e3063890 	movw	r3, #26768	; 0x6890
  118b5c:	e3403014 	movt	r3, #20
  118b60:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  118b64:	e1a00003 	mov	r0, r3
  118b68:	ebffffbb 	bl	118a5c <memp_init_pool>

#if LWIP_STATS && MEMP_STATS
    lwip_stats.memp[i] = memp_pools[i]->stats;
  118b6c:	e15b20b6 	ldrh	r2, [fp, #-6]
  118b70:	e3063890 	movw	r3, #26768	; 0x6890
  118b74:	e3403014 	movt	r3, #20
  118b78:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  118b7c:	e15b30b6 	ldrh	r3, [fp, #-6]
  118b80:	e5921004 	ldr	r1, [r2, #4]
  118b84:	e3042fc0 	movw	r2, #20416	; 0x4fc0
  118b88:	e3402057 	movt	r2, #87	; 0x57
  118b8c:	e2833034 	add	r3, r3, #52	; 0x34
  118b90:	e1a03103 	lsl	r3, r3, #2
  118b94:	e0823003 	add	r3, r2, r3
  118b98:	e5831004 	str	r1, [r3, #4]
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
  118b9c:	e15b30b6 	ldrh	r3, [fp, #-6]
  118ba0:	e2833001 	add	r3, r3, #1
  118ba4:	e14b30b6 	strh	r3, [fp, #-6]
  118ba8:	e15b30b6 	ldrh	r3, [fp, #-6]
  118bac:	e3530010 	cmp	r3, #16
  118bb0:	9affffe7 	bls	118b54 <memp_init+0x18>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
  118bb4:	e320f000 	nop	{0}
  118bb8:	e24bd004 	sub	sp, fp, #4
  118bbc:	e8bd8800 	pop	{fp, pc}

00118bc0 <do_memp_malloc_pool_fn>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
  118bc0:	e92d4800 	push	{fp, lr}
  118bc4:	e28db004 	add	fp, sp, #4
  118bc8:	e24dd018 	sub	sp, sp, #24
  118bcc:	e50b0010 	str	r0, [fp, #-16]
  118bd0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  118bd4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
  118bd8:	ebffa597 	bl	10223c <rt_enter_critical>

  memp = *desc->tab;
  118bdc:	e51b3010 	ldr	r3, [fp, #-16]
  118be0:	e5933010 	ldr	r3, [r3, #16]
  118be4:	e5933000 	ldr	r3, [r3]
  118be8:	e50b3008 	str	r3, [fp, #-8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
  118bec:	e51b3008 	ldr	r3, [fp, #-8]
  118bf0:	e3530000 	cmp	r3, #0
  118bf4:	0a000036 	beq	118cd4 <do_memp_malloc_pool_fn+0x114>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
  118bf8:	e51b1010 	ldr	r1, [fp, #-16]
  118bfc:	e51b0008 	ldr	r0, [fp, #-8]
  118c00:	ebffff0f 	bl	118844 <memp_overflow_check_element_overflow>
    memp_overflow_check_element_underflow(memp, desc);
  118c04:	e51b1010 	ldr	r1, [fp, #-16]
  118c08:	e51b0008 	ldr	r0, [fp, #-8]
  118c0c:	ebffff43 	bl	118920 <memp_overflow_check_element_underflow>
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
  118c10:	e51b3010 	ldr	r3, [fp, #-16]
  118c14:	e5933010 	ldr	r3, [r3, #16]
  118c18:	e51b2008 	ldr	r2, [fp, #-8]
  118c1c:	e5922000 	ldr	r2, [r2]
  118c20:	e5832000 	str	r2, [r3]
#if MEMP_OVERFLOW_CHECK
    memp->next = NULL;
  118c24:	e51b3008 	ldr	r3, [fp, #-8]
  118c28:	e3a02000 	mov	r2, #0
  118c2c:	e5832000 	str	r2, [r3]
#endif /* MEMP_OVERFLOW_CHECK */
#endif /* !MEMP_MEM_MALLOC */
#if MEMP_OVERFLOW_CHECK
    memp->file = file;
  118c30:	e51b3008 	ldr	r3, [fp, #-8]
  118c34:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  118c38:	e5832004 	str	r2, [r3, #4]
    memp->line = line;
  118c3c:	e51b3008 	ldr	r3, [fp, #-8]
  118c40:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  118c44:	e5832008 	str	r2, [r3, #8]
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
  118c48:	e51b3008 	ldr	r3, [fp, #-8]
  118c4c:	e2033003 	and	r3, r3, #3
  118c50:	e3530000 	cmp	r3, #0
  118c54:	0a000006 	beq	118c74 <do_memp_malloc_pool_fn+0xb4>
  118c58:	e3060a00 	movw	r0, #27136	; 0x6a00
  118c5c:	e3400014 	movt	r0, #20
  118c60:	ebffa92b 	bl	103114 <rt_kprintf>
  118c64:	e3001149 	movw	r1, #329	; 0x149
  118c68:	e30608d4 	movw	r0, #26836	; 0x68d4
  118c6c:	e3400014 	movt	r0, #20
  118c70:	ebffc7a7 	bl	10ab14 <sys_arch_assert>
                ((mem_ptr_t)memp % MEM_ALIGNMENT) == 0);
#if MEMP_STATS
    desc->stats->used++;
  118c74:	e51b3010 	ldr	r3, [fp, #-16]
  118c78:	e5933004 	ldr	r3, [r3, #4]
  118c7c:	e1d320b8 	ldrh	r2, [r3, #8]
  118c80:	e2822001 	add	r2, r2, #1
  118c84:	e6ff2072 	uxth	r2, r2
  118c88:	e1c320b8 	strh	r2, [r3, #8]
    if (desc->stats->used > desc->stats->max) {
  118c8c:	e51b3010 	ldr	r3, [fp, #-16]
  118c90:	e5933004 	ldr	r3, [r3, #4]
  118c94:	e1d320b8 	ldrh	r2, [r3, #8]
  118c98:	e51b3010 	ldr	r3, [fp, #-16]
  118c9c:	e5933004 	ldr	r3, [r3, #4]
  118ca0:	e1d330ba 	ldrh	r3, [r3, #10]
  118ca4:	e1520003 	cmp	r2, r3
  118ca8:	9a000005 	bls	118cc4 <do_memp_malloc_pool_fn+0x104>
      desc->stats->max = desc->stats->used;
  118cac:	e51b3010 	ldr	r3, [fp, #-16]
  118cb0:	e5932004 	ldr	r2, [r3, #4]
  118cb4:	e51b3010 	ldr	r3, [fp, #-16]
  118cb8:	e5933004 	ldr	r3, [r3, #4]
  118cbc:	e1d220b8 	ldrh	r2, [r2, #8]
  118cc0:	e1c320ba 	strh	r2, [r3, #10]
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
  118cc4:	ebffa562 	bl	102254 <rt_exit_critical>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
  118cc8:	e51b3008 	ldr	r3, [fp, #-8]
  118ccc:	e283301c 	add	r3, r3, #28
  118cd0:	ea000007 	b	118cf4 <do_memp_malloc_pool_fn+0x134>
  } else {
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
#if MEMP_STATS
    desc->stats->err++;
  118cd4:	e51b3010 	ldr	r3, [fp, #-16]
  118cd8:	e5933004 	ldr	r3, [r3, #4]
  118cdc:	e1d320b4 	ldrh	r2, [r3, #4]
  118ce0:	e2822001 	add	r2, r2, #1
  118ce4:	e6ff2072 	uxth	r2, r2
  118ce8:	e1c320b4 	strh	r2, [r3, #4]
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  118cec:	ebffa558 	bl	102254 <rt_exit_critical>
  return NULL;
  118cf0:	e3a03000 	mov	r3, #0
}
  118cf4:	e1a00003 	mov	r0, r3
  118cf8:	e24bd004 	sub	sp, fp, #4
  118cfc:	e8bd8800 	pop	{fp, pc}

00118d00 <memp_malloc_pool_fn>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
  118d00:	e92d4800 	push	{fp, lr}
  118d04:	e28db004 	add	fp, sp, #4
  118d08:	e24dd010 	sub	sp, sp, #16
  118d0c:	e50b0008 	str	r0, [fp, #-8]
  118d10:	e50b100c 	str	r1, [fp, #-12]
  118d14:	e50b2010 	str	r2, [fp, #-16]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
  118d18:	e51b3008 	ldr	r3, [fp, #-8]
  118d1c:	e3530000 	cmp	r3, #0
  118d20:	1a000006 	bne	118d40 <memp_malloc_pool_fn+0x40>
  118d24:	e3060a24 	movw	r0, #27172	; 0x6a24
  118d28:	e3400014 	movt	r0, #20
  118d2c:	ebffa8f8 	bl	103114 <rt_kprintf>
  118d30:	e3a01f5b 	mov	r1, #364	; 0x16c
  118d34:	e30608d4 	movw	r0, #26836	; 0x68d4
  118d38:	e3400014 	movt	r0, #20
  118d3c:	ebffc774 	bl	10ab14 <sys_arch_assert>
  if (desc == NULL) {
  118d40:	e51b3008 	ldr	r3, [fp, #-8]
  118d44:	e3530000 	cmp	r3, #0
  118d48:	1a000001 	bne	118d54 <memp_malloc_pool_fn+0x54>
    return NULL;
  118d4c:	e3a03000 	mov	r3, #0
  118d50:	ea000004 	b	118d68 <memp_malloc_pool_fn+0x68>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
#else
  return do_memp_malloc_pool_fn(desc, file, line);
  118d54:	e51b2010 	ldr	r2, [fp, #-16]
  118d58:	e51b100c 	ldr	r1, [fp, #-12]
  118d5c:	e51b0008 	ldr	r0, [fp, #-8]
  118d60:	ebffff96 	bl	118bc0 <do_memp_malloc_pool_fn>
  118d64:	e1a03000 	mov	r3, r0
#endif
}
  118d68:	e1a00003 	mov	r0, r3
  118d6c:	e24bd004 	sub	sp, fp, #4
  118d70:	e8bd8800 	pop	{fp, pc}

00118d74 <memp_malloc_fn>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
  118d74:	e92d4800 	push	{fp, lr}
  118d78:	e28db004 	add	fp, sp, #4
  118d7c:	e24dd018 	sub	sp, sp, #24
  118d80:	e50b0010 	str	r0, [fp, #-16]
  118d84:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  118d88:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
  118d8c:	e51b3010 	ldr	r3, [fp, #-16]
  118d90:	e3530010 	cmp	r3, #16
  118d94:	9a000008 	bls	118dbc <memp_malloc_fn+0x48>
  118d98:	e3060a38 	movw	r0, #27192	; 0x6a38
  118d9c:	e3400014 	movt	r0, #20
  118da0:	ebffa8db 	bl	103114 <rt_kprintf>
  118da4:	e3001187 	movw	r1, #391	; 0x187
  118da8:	e30608d4 	movw	r0, #26836	; 0x68d4
  118dac:	e3400014 	movt	r0, #20
  118db0:	ebffc757 	bl	10ab14 <sys_arch_assert>
  118db4:	e3a03000 	mov	r3, #0
  118db8:	ea000009 	b	118de4 <memp_malloc_fn+0x70>
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
  118dbc:	e3063890 	movw	r3, #26768	; 0x6890
  118dc0:	e3403014 	movt	r3, #20
  118dc4:	e51b2010 	ldr	r2, [fp, #-16]
  118dc8:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  118dcc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  118dd0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  118dd4:	e1a00003 	mov	r0, r3
  118dd8:	ebffff78 	bl	118bc0 <do_memp_malloc_pool_fn>
  118ddc:	e50b0008 	str	r0, [fp, #-8]
#endif

  return memp;
  118de0:	e51b3008 	ldr	r3, [fp, #-8]
}
  118de4:	e1a00003 	mov	r0, r3
  118de8:	e24bd004 	sub	sp, fp, #4
  118dec:	e8bd8800 	pop	{fp, pc}

00118df0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
  118df0:	e92d4800 	push	{fp, lr}
  118df4:	e28db004 	add	fp, sp, #4
  118df8:	e24dd010 	sub	sp, sp, #16
  118dfc:	e50b0010 	str	r0, [fp, #-16]
  118e00:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
  118e04:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  118e08:	e2033003 	and	r3, r3, #3
  118e0c:	e3530000 	cmp	r3, #0
  118e10:	0a000006 	beq	118e30 <do_memp_free_pool+0x40>
  118e14:	e3060a58 	movw	r0, #27224	; 0x6a58
  118e18:	e3400014 	movt	r0, #20
  118e1c:	ebffa8bc 	bl	103114 <rt_kprintf>
  118e20:	e300119d 	movw	r1, #413	; 0x19d
  118e24:	e30608d4 	movw	r0, #26836	; 0x68d4
  118e28:	e3400014 	movt	r0, #20
  118e2c:	ebffc738 	bl	10ab14 <sys_arch_assert>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
  118e30:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  118e34:	e243301c 	sub	r3, r3, #28
  118e38:	e50b3008 	str	r3, [fp, #-8]

  SYS_ARCH_PROTECT(old_level);
  118e3c:	ebffa4fe 	bl	10223c <rt_enter_critical>

#if MEMP_OVERFLOW_CHECK == 1
  memp_overflow_check_element_overflow(memp, desc);
  118e40:	e51b1010 	ldr	r1, [fp, #-16]
  118e44:	e51b0008 	ldr	r0, [fp, #-8]
  118e48:	ebfffe7d 	bl	118844 <memp_overflow_check_element_overflow>
  memp_overflow_check_element_underflow(memp, desc);
  118e4c:	e51b1010 	ldr	r1, [fp, #-16]
  118e50:	e51b0008 	ldr	r0, [fp, #-8]
  118e54:	ebfffeb1 	bl	118920 <memp_overflow_check_element_underflow>
#endif /* MEMP_OVERFLOW_CHECK */

#if MEMP_STATS
  desc->stats->used--;
  118e58:	e51b3010 	ldr	r3, [fp, #-16]
  118e5c:	e5933004 	ldr	r3, [r3, #4]
  118e60:	e1d320b8 	ldrh	r2, [r3, #8]
  118e64:	e2422001 	sub	r2, r2, #1
  118e68:	e6ff2072 	uxth	r2, r2
  118e6c:	e1c320b8 	strh	r2, [r3, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
  118e70:	e51b3010 	ldr	r3, [fp, #-16]
  118e74:	e5933010 	ldr	r3, [r3, #16]
  118e78:	e5932000 	ldr	r2, [r3]
  118e7c:	e51b3008 	ldr	r3, [fp, #-8]
  118e80:	e5832000 	str	r2, [r3]
  *desc->tab = memp;
  118e84:	e51b3010 	ldr	r3, [fp, #-16]
  118e88:	e5933010 	ldr	r3, [r3, #16]
  118e8c:	e51b2008 	ldr	r2, [fp, #-8]
  118e90:	e5832000 	str	r2, [r3]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
  118e94:	ebffa4ee 	bl	102254 <rt_exit_critical>
#endif /* !MEMP_MEM_MALLOC */
}
  118e98:	e320f000 	nop	{0}
  118e9c:	e24bd004 	sub	sp, fp, #4
  118ea0:	e8bd8800 	pop	{fp, pc}

00118ea4 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc* desc, void *mem)
{
  118ea4:	e92d4800 	push	{fp, lr}
  118ea8:	e28db004 	add	fp, sp, #4
  118eac:	e24dd008 	sub	sp, sp, #8
  118eb0:	e50b0008 	str	r0, [fp, #-8]
  118eb4:	e50b100c 	str	r1, [fp, #-12]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
  118eb8:	e51b3008 	ldr	r3, [fp, #-8]
  118ebc:	e3530000 	cmp	r3, #0
  118ec0:	1a000006 	bne	118ee0 <memp_free_pool+0x3c>
  118ec4:	e3060a24 	movw	r0, #27172	; 0x6a24
  118ec8:	e3400014 	movt	r0, #20
  118ecc:	ebffa890 	bl	103114 <rt_kprintf>
  118ed0:	e30011c6 	movw	r1, #454	; 0x1c6
  118ed4:	e30608d4 	movw	r0, #26836	; 0x68d4
  118ed8:	e3400014 	movt	r0, #20
  118edc:	ebffc70c 	bl	10ab14 <sys_arch_assert>
  if ((desc == NULL) || (mem == NULL)) {
  118ee0:	e51b3008 	ldr	r3, [fp, #-8]
  118ee4:	e3530000 	cmp	r3, #0
  118ee8:	0a000006 	beq	118f08 <memp_free_pool+0x64>
  118eec:	e51b300c 	ldr	r3, [fp, #-12]
  118ef0:	e3530000 	cmp	r3, #0
  118ef4:	0a000003 	beq	118f08 <memp_free_pool+0x64>
    return;
  }

  do_memp_free_pool(desc, mem);
  118ef8:	e51b100c 	ldr	r1, [fp, #-12]
  118efc:	e51b0008 	ldr	r0, [fp, #-8]
  118f00:	ebffffba 	bl	118df0 <do_memp_free_pool>
  118f04:	ea000000 	b	118f0c <memp_free_pool+0x68>
    return;
  118f08:	e320f000 	nop	{0}
}
  118f0c:	e24bd004 	sub	sp, fp, #4
  118f10:	e8bd8800 	pop	{fp, pc}

00118f14 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
  118f14:	e92d4800 	push	{fp, lr}
  118f18:	e28db004 	add	fp, sp, #4
  118f1c:	e24dd008 	sub	sp, sp, #8
  118f20:	e50b0008 	str	r0, [fp, #-8]
  118f24:	e50b100c 	str	r1, [fp, #-12]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
  118f28:	e51b3008 	ldr	r3, [fp, #-8]
  118f2c:	e3530010 	cmp	r3, #16
  118f30:	9a000007 	bls	118f54 <memp_free+0x40>
  118f34:	e3060a78 	movw	r0, #27256	; 0x6a78
  118f38:	e3400014 	movt	r0, #20
  118f3c:	ebffa874 	bl	103114 <rt_kprintf>
  118f40:	e30011db 	movw	r1, #475	; 0x1db
  118f44:	e30608d4 	movw	r0, #26836	; 0x68d4
  118f48:	e3400014 	movt	r0, #20
  118f4c:	ebffc6f0 	bl	10ab14 <sys_arch_assert>
  118f50:	ea00000b 	b	118f84 <memp_free+0x70>

  if (mem == NULL) {
  118f54:	e51b300c 	ldr	r3, [fp, #-12]
  118f58:	e3530000 	cmp	r3, #0
  118f5c:	0a000007 	beq	118f80 <memp_free+0x6c>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
  118f60:	e3063890 	movw	r3, #26768	; 0x6890
  118f64:	e3403014 	movt	r3, #20
  118f68:	e51b2008 	ldr	r2, [fp, #-8]
  118f6c:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  118f70:	e51b100c 	ldr	r1, [fp, #-12]
  118f74:	e1a00003 	mov	r0, r3
  118f78:	ebffff9c 	bl	118df0 <do_memp_free_pool>
  118f7c:	ea000000 	b	118f84 <memp_free+0x70>
    return;
  118f80:	e320f000 	nop	{0}
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
  118f84:	e24bd004 	sub	sp, fp, #4
  118f88:	e8bd8800 	pop	{fp, pc}

00118f8c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
  118f8c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  118f90:	e28db000 	add	fp, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
  118f94:	e320f000 	nop	{0}
  118f98:	e28bd000 	add	sp, fp, #0
  118f9c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  118fa0:	e12fff1e 	bx	lr

00118fa4 <netif_input>:
 * Only works if the netif driver correctly sets
 * NETIF_FLAG_ETHARP and/or NETIF_FLAG_ETHERNET flag!
 */
err_t
netif_input(struct pbuf *p, struct netif *inp)
{
  118fa4:	e92d4800 	push	{fp, lr}
  118fa8:	e28db004 	add	fp, sp, #4
  118fac:	e24dd008 	sub	sp, sp, #8
  118fb0:	e50b0008 	str	r0, [fp, #-8]
  118fb4:	e50b100c 	str	r1, [fp, #-12]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
  118fb8:	e51b300c 	ldr	r3, [fp, #-12]
  118fbc:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  118fc0:	e2033018 	and	r3, r3, #24
  118fc4:	e3530000 	cmp	r3, #0
  118fc8:	0a000004 	beq	118fe0 <netif_input+0x3c>
    return ethernet_input(p, inp);
  118fcc:	e51b100c 	ldr	r1, [fp, #-12]
  118fd0:	e51b0008 	ldr	r0, [fp, #-8]
  118fd4:	eb003e2f 	bl	128898 <ethernet_input>
  118fd8:	e1a03000 	mov	r3, r0
  118fdc:	ea000003 	b	118ff0 <netif_input+0x4c>
  } else
#endif /* LWIP_ETHERNET */
  return ip_input(p, inp);
  118fe0:	e51b100c 	ldr	r1, [fp, #-12]
  118fe4:	e51b0008 	ldr	r0, [fp, #-8]
  118fe8:	eb005ffb 	bl	130fdc <ip4_input>
  118fec:	e1a03000 	mov	r3, r0
}
  118ff0:	e1a00003 	mov	r0, r3
  118ff4:	e24bd004 	sub	sp, fp, #4
  118ff8:	e8bd8800 	pop	{fp, pc}

00118ffc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
  118ffc:	e92d4800 	push	{fp, lr}
  119000:	e28db004 	add	fp, sp, #4
  119004:	e24dd010 	sub	sp, sp, #16
  119008:	e50b0008 	str	r0, [fp, #-8]
  11900c:	e50b100c 	str	r1, [fp, #-12]
  119010:	e50b2010 	str	r2, [fp, #-16]
  119014:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
#if LWIP_IPV6
  s8_t i;
#endif
  LWIP_ASSERT("No init function given", init != NULL);
  119018:	e59b3008 	ldr	r3, [fp, #8]
  11901c:	e3530000 	cmp	r3, #0
  119020:	1a000006 	bne	119040 <netif_add+0x44>
  119024:	e3060a94 	movw	r0, #27284	; 0x6a94
  119028:	e3400014 	movt	r0, #20
  11902c:	ebffa838 	bl	103114 <rt_kprintf>
  119030:	e3001105 	movw	r1, #261	; 0x105
  119034:	e3060aac 	movw	r0, #27308	; 0x6aac
  119038:	e3400014 	movt	r0, #20
  11903c:	ebffc6b4 	bl	10ab14 <sys_arch_assert>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
  119040:	e51b3008 	ldr	r3, [fp, #-8]
  119044:	e3a02000 	mov	r2, #0
  119048:	e5832004 	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
  11904c:	e51b3008 	ldr	r3, [fp, #-8]
  119050:	e3a02000 	mov	r2, #0
  119054:	e5832008 	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
  119058:	e51b3008 	ldr	r3, [fp, #-8]
  11905c:	e3a02000 	mov	r2, #0
  119060:	e583200c 	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
  119064:	e51b3008 	ldr	r3, [fp, #-8]
  119068:	e3a02000 	mov	r2, #0
  11906c:	e5c32041 	strb	r2, [r3, #65]	; 0x41
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
  119070:	e51b3008 	ldr	r3, [fp, #-8]
  119074:	e2833028 	add	r3, r3, #40	; 0x28
  119078:	e3a02008 	mov	r2, #8
  11907c:	e3a01000 	mov	r1, #0
  119080:	e1a00003 	mov	r0, r3
  119084:	eb009e18 	bl	1408ec <memset>
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
  119088:	e51b3008 	ldr	r3, [fp, #-8]
  11908c:	e3a02003 	mov	r2, #3
  119090:	e5c32030 	strb	r2, [r3, #48]	; 0x30
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
  119094:	e51b3008 	ldr	r3, [fp, #-8]
  119098:	e3a02000 	mov	r2, #0
  11909c:	e583201c 	str	r2, [r3, #28]
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
  1190a0:	e51b3008 	ldr	r3, [fp, #-8]
  1190a4:	e3a02000 	mov	r2, #0
  1190a8:	e5832020 	str	r2, [r3, #32]
#endif /* LWIP_NETIF_LINK_CALLBACK */
#if LWIP_IGMP
  netif->igmp_mac_filter = NULL;
  1190ac:	e51b3008 	ldr	r3, [fp, #-8]
  1190b0:	e3a02000 	mov	r2, #0
  1190b4:	e583207c 	str	r2, [r3, #124]	; 0x7c
#endif /* LWIP_IGMP */
#if LWIP_IPV6 && LWIP_IPV6_MLD
  netif->mld_mac_filter = NULL;
#endif /* LWIP_IPV6 && LWIP_IPV6_MLD */
#if ENABLE_LOOPBACK
  netif->loop_first = NULL;
  1190b8:	e51b3008 	ldr	r3, [fp, #-8]
  1190bc:	e3a02000 	mov	r2, #0
  1190c0:	e5832080 	str	r2, [r3, #128]	; 0x80
  netif->loop_last = NULL;
  1190c4:	e51b3008 	ldr	r3, [fp, #-8]
  1190c8:	e3a02000 	mov	r2, #0
  1190cc:	e5832084 	str	r2, [r3, #132]	; 0x84
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
  1190d0:	e51b3008 	ldr	r3, [fp, #-8]
  1190d4:	e59b2004 	ldr	r2, [fp, #4]
  1190d8:	e5832024 	str	r2, [r3, #36]	; 0x24
  netif->num = netif_num++;
  1190dc:	e30e3208 	movw	r3, #57864	; 0xe208
  1190e0:	e3403014 	movt	r3, #20
  1190e4:	e5d32000 	ldrb	r2, [r3]
  1190e8:	e2823001 	add	r3, r2, #1
  1190ec:	e6ef1073 	uxtb	r1, r3
  1190f0:	e30e3208 	movw	r3, #57864	; 0xe208
  1190f4:	e3403014 	movt	r3, #20
  1190f8:	e5c31000 	strb	r1, [r3]
  1190fc:	e51b3008 	ldr	r3, [fp, #-8]
  119100:	e5c32044 	strb	r2, [r3, #68]	; 0x44
  netif->input = input;
  119104:	e51b3008 	ldr	r3, [fp, #-8]
  119108:	e59b200c 	ldr	r2, [fp, #12]
  11910c:	e5832010 	str	r2, [r3, #16]
  NETIF_SET_HWADDRHINT(netif, NULL);
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */
#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
  119110:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  119114:	e51b2010 	ldr	r2, [fp, #-16]
  119118:	e51b100c 	ldr	r1, [fp, #-12]
  11911c:	e51b0008 	ldr	r0, [fp, #-8]
  119120:	eb00001b 	bl	119194 <netif_set_addr>
#endif /* LWIP_IPV4 */
  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
  119124:	e59b3008 	ldr	r3, [fp, #8]
  119128:	e51b0008 	ldr	r0, [fp, #-8]
  11912c:	e12fff33 	blx	r3
  119130:	e1a03000 	mov	r3, r0
  119134:	e3530000 	cmp	r3, #0
  119138:	0a000001 	beq	119144 <netif_add+0x148>
    return NULL;
  11913c:	e3a03000 	mov	r3, #0
  119140:	ea000010 	b	119188 <netif_add+0x18c>
  }
  /* add this netif to the list */
  netif->next = netif_list;
  119144:	e3043fb4 	movw	r3, #20404	; 0x4fb4
  119148:	e3403057 	movt	r3, #87	; 0x57
  11914c:	e5932000 	ldr	r2, [r3]
  119150:	e51b3008 	ldr	r3, [fp, #-8]
  119154:	e5832000 	str	r2, [r3]
  netif_list = netif;
  119158:	e3043fb4 	movw	r3, #20404	; 0x4fb4
  11915c:	e3403057 	movt	r3, #87	; 0x57
  119160:	e51b2008 	ldr	r2, [fp, #-8]
  119164:	e5832000 	str	r2, [r3]
  mib2_netif_added(netif);
#if LWIP_IGMP
  /* start IGMP processing */
  if (netif->flags & NETIF_FLAG_IGMP) {
  119168:	e51b3008 	ldr	r3, [fp, #-8]
  11916c:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119170:	e2033020 	and	r3, r3, #32
  119174:	e3530000 	cmp	r3, #0
  119178:	0a000001 	beq	119184 <netif_add+0x188>
    igmp_start(netif);
  11917c:	e51b0008 	ldr	r0, [fp, #-8]
  119180:	eb005a5c 	bl	12faf8 <igmp_start>
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
  119184:	e51b3008 	ldr	r3, [fp, #-8]
}
  119188:	e1a00003 	mov	r0, r3
  11918c:	e24bd004 	sub	sp, fp, #4
  119190:	e8bd8800 	pop	{fp, pc}

00119194 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
  119194:	e92d4800 	push	{fp, lr}
  119198:	e28db004 	add	fp, sp, #4
  11919c:	e24dd010 	sub	sp, sp, #16
  1191a0:	e50b0008 	str	r0, [fp, #-8]
  1191a4:	e50b100c 	str	r1, [fp, #-12]
  1191a8:	e50b2010 	str	r2, [fp, #-16]
  1191ac:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  if (ip4_addr_isany(ipaddr)) {
  1191b0:	e51b300c 	ldr	r3, [fp, #-12]
  1191b4:	e3530000 	cmp	r3, #0
  1191b8:	0a000003 	beq	1191cc <netif_set_addr+0x38>
  1191bc:	e51b300c 	ldr	r3, [fp, #-12]
  1191c0:	e5933000 	ldr	r3, [r3]
  1191c4:	e3530000 	cmp	r3, #0
  1191c8:	1a000009 	bne	1191f4 <netif_set_addr+0x60>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
  1191cc:	e51b100c 	ldr	r1, [fp, #-12]
  1191d0:	e51b0008 	ldr	r0, [fp, #-8]
  1191d4:	eb00009d 	bl	119450 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
  1191d8:	e51b1010 	ldr	r1, [fp, #-16]
  1191dc:	e51b0008 	ldr	r0, [fp, #-8]
  1191e0:	eb0000fa 	bl	1195d0 <netif_set_netmask>
    netif_set_gw(netif, gw);
  1191e4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1191e8:	e51b0008 	ldr	r0, [fp, #-8]
  1191ec:	eb0000de 	bl	11956c <netif_set_gw>
  1191f0:	ea000008 	b	119218 <netif_set_addr+0x84>
  } else {
    netif_set_netmask(netif, netmask);
  1191f4:	e51b1010 	ldr	r1, [fp, #-16]
  1191f8:	e51b0008 	ldr	r0, [fp, #-8]
  1191fc:	eb0000f3 	bl	1195d0 <netif_set_netmask>
    netif_set_gw(netif, gw);
  119200:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  119204:	e51b0008 	ldr	r0, [fp, #-8]
  119208:	eb0000d7 	bl	11956c <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
  11920c:	e51b100c 	ldr	r1, [fp, #-12]
  119210:	e51b0008 	ldr	r0, [fp, #-8]
  119214:	eb00008d 	bl	119450 <netif_set_ipaddr>
  }
}
  119218:	e320f000 	nop	{0}
  11921c:	e24bd004 	sub	sp, fp, #4
  119220:	e8bd8800 	pop	{fp, pc}

00119224 <netif_remove>:
 *
 * @param netif the network interface to remove
 */
void
netif_remove(struct netif *netif)
{
  119224:	e92d4800 	push	{fp, lr}
  119228:	e28db004 	add	fp, sp, #4
  11922c:	e24dd010 	sub	sp, sp, #16
  119230:	e50b0010 	str	r0, [fp, #-16]
#if LWIP_IPV6
  int i;
#endif

  if (netif == NULL) {
  119234:	e51b3010 	ldr	r3, [fp, #-16]
  119238:	e3530000 	cmp	r3, #0
  11923c:	0a00004e 	beq	11937c <netif_remove+0x158>
    return;
  }

#if LWIP_IPV4
  if (!ip4_addr_isany_val(*netif_ip4_addr(netif))) {
  119240:	e51b3010 	ldr	r3, [fp, #-16]
  119244:	e2833004 	add	r3, r3, #4
  119248:	e5933000 	ldr	r3, [r3]
  11924c:	e3530000 	cmp	r3, #0
  119250:	0a00000e 	beq	119290 <netif_remove+0x6c>
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), NULL);
  119254:	e51b3010 	ldr	r3, [fp, #-16]
  119258:	e2833004 	add	r3, r3, #4
  11925c:	e3a01000 	mov	r1, #0
  119260:	e1a00003 	mov	r0, r3
  119264:	eb001aea 	bl	11fe14 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), NULL);
  119268:	e51b3010 	ldr	r3, [fp, #-16]
  11926c:	e2833004 	add	r3, r3, #4
  119270:	e3a01000 	mov	r1, #0
  119274:	e1a00003 	mov	r0, r3
  119278:	eb003d5a 	bl	1287e8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
    raw_netif_ip_addr_changed(netif_ip_addr4(netif), NULL);
  11927c:	e51b3010 	ldr	r3, [fp, #-16]
  119280:	e2833004 	add	r3, r3, #4
  119284:	e3a01000 	mov	r1, #0
  119288:	e1a00003 	mov	r0, r3
  11928c:	eb000cb0 	bl	11c554 <raw_netif_ip_addr_changed>
#endif /* LWIP_RAW */
  }

#if LWIP_IGMP
  /* stop IGMP processing */
  if (netif->flags & NETIF_FLAG_IGMP) {
  119290:	e51b3010 	ldr	r3, [fp, #-16]
  119294:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119298:	e2033020 	and	r3, r3, #32
  11929c:	e3530000 	cmp	r3, #0
  1192a0:	0a000001 	beq	1192ac <netif_remove+0x88>
    igmp_stop(netif);
  1192a4:	e51b0010 	ldr	r0, [fp, #-16]
  1192a8:	eb005a38 	bl	12fb90 <igmp_stop>
#if LWIP_IPV6_MLD
  /* stop MLD processing */
  mld6_stop(netif);
#endif /* LWIP_IPV6_MLD */
#endif /* LWIP_IPV6 */
  if (netif_is_up(netif)) {
  1192ac:	e51b3010 	ldr	r3, [fp, #-16]
  1192b0:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1192b4:	e2033001 	and	r3, r3, #1
  1192b8:	e6ef3073 	uxtb	r3, r3
  1192bc:	e3530000 	cmp	r3, #0
  1192c0:	0a000001 	beq	1192cc <netif_remove+0xa8>
    /* set netif down before removing (call callback function) */
    netif_set_down(netif);
  1192c4:	e51b0010 	ldr	r0, [fp, #-16]
  1192c8:	eb00013a 	bl	1197b8 <netif_set_down>
  }

  mib2_remove_ip4(netif);

  /* this netif is default? */
  if (netif_default == netif) {
  1192cc:	e3043fb8 	movw	r3, #20408	; 0x4fb8
  1192d0:	e3403057 	movt	r3, #87	; 0x57
  1192d4:	e5933000 	ldr	r3, [r3]
  1192d8:	e51b2010 	ldr	r2, [fp, #-16]
  1192dc:	e1520003 	cmp	r2, r3
  1192e0:	1a000001 	bne	1192ec <netif_remove+0xc8>
    /* reset default netif */
    netif_set_default(NULL);
  1192e4:	e3a00000 	mov	r0, #0
  1192e8:	eb0000d1 	bl	119634 <netif_set_default>
  }
  /*  is it the first netif? */
  if (netif_list == netif) {
  1192ec:	e3043fb4 	movw	r3, #20404	; 0x4fb4
  1192f0:	e3403057 	movt	r3, #87	; 0x57
  1192f4:	e5933000 	ldr	r3, [r3]
  1192f8:	e51b2010 	ldr	r2, [fp, #-16]
  1192fc:	e1520003 	cmp	r2, r3
  119300:	1a000005 	bne	11931c <netif_remove+0xf8>
    netif_list = netif->next;
  119304:	e51b3010 	ldr	r3, [fp, #-16]
  119308:	e5932000 	ldr	r2, [r3]
  11930c:	e3043fb4 	movw	r3, #20404	; 0x4fb4
  119310:	e3403057 	movt	r3, #87	; 0x57
  119314:	e5832000 	str	r2, [r3]
  119318:	ea000018 	b	119380 <netif_remove+0x15c>
  } else {
    /*  look for netif further down the list */
    struct netif * tmp_netif;
    for (tmp_netif = netif_list; tmp_netif != NULL; tmp_netif = tmp_netif->next) {
  11931c:	e3043fb4 	movw	r3, #20404	; 0x4fb4
  119320:	e3403057 	movt	r3, #87	; 0x57
  119324:	e5933000 	ldr	r3, [r3]
  119328:	e50b3008 	str	r3, [fp, #-8]
  11932c:	ea00000c 	b	119364 <netif_remove+0x140>
      if (tmp_netif->next == netif) {
  119330:	e51b3008 	ldr	r3, [fp, #-8]
  119334:	e5933000 	ldr	r3, [r3]
  119338:	e51b2010 	ldr	r2, [fp, #-16]
  11933c:	e1520003 	cmp	r2, r3
  119340:	1a000004 	bne	119358 <netif_remove+0x134>
        tmp_netif->next = netif->next;
  119344:	e51b3010 	ldr	r3, [fp, #-16]
  119348:	e5932000 	ldr	r2, [r3]
  11934c:	e51b3008 	ldr	r3, [fp, #-8]
  119350:	e5832000 	str	r2, [r3]
        break;
  119354:	ea000005 	b	119370 <netif_remove+0x14c>
    for (tmp_netif = netif_list; tmp_netif != NULL; tmp_netif = tmp_netif->next) {
  119358:	e51b3008 	ldr	r3, [fp, #-8]
  11935c:	e5933000 	ldr	r3, [r3]
  119360:	e50b3008 	str	r3, [fp, #-8]
  119364:	e51b3008 	ldr	r3, [fp, #-8]
  119368:	e3530000 	cmp	r3, #0
  11936c:	1affffef 	bne	119330 <netif_remove+0x10c>
      }
    }
    if (tmp_netif == NULL) {
  119370:	e51b3008 	ldr	r3, [fp, #-8]
  119374:	e3530000 	cmp	r3, #0
  119378:	ea000000 	b	119380 <netif_remove+0x15c>
    return;
  11937c:	e320f000 	nop	{0}
  if (netif->remove_callback) {
    netif->remove_callback(netif);
  }
#endif /* LWIP_NETIF_REMOVE_CALLBACK */
  LWIP_DEBUGF( NETIF_DEBUG, ("netif_remove: removed netif\n") );
}
  119380:	e24bd004 	sub	sp, fp, #4
  119384:	e8bd8800 	pop	{fp, pc}

00119388 <netif_find>:
 * @param name the name of the netif (like netif->name) plus concatenated number
 * in ascii representation (e.g. 'en0')
 */
struct netif *
netif_find(const char *name)
{
  119388:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11938c:	e28db000 	add	fp, sp, #0
  119390:	e24dd014 	sub	sp, sp, #20
  119394:	e50b0010 	str	r0, [fp, #-16]
  struct netif *netif;
  u8_t num;

  if (name == NULL) {
  119398:	e51b3010 	ldr	r3, [fp, #-16]
  11939c:	e3530000 	cmp	r3, #0
  1193a0:	1a000001 	bne	1193ac <netif_find+0x24>
    return NULL;
  1193a4:	e3a03000 	mov	r3, #0
  1193a8:	ea000024 	b	119440 <netif_find+0xb8>
  }

  num = (u8_t)(name[2] - '0');
  1193ac:	e51b3010 	ldr	r3, [fp, #-16]
  1193b0:	e2833002 	add	r3, r3, #2
  1193b4:	e5d33000 	ldrb	r3, [r3]
  1193b8:	e2433030 	sub	r3, r3, #48	; 0x30
  1193bc:	e54b3009 	strb	r3, [fp, #-9]

  for (netif = netif_list; netif != NULL; netif = netif->next) {
  1193c0:	e3043fb4 	movw	r3, #20404	; 0x4fb4
  1193c4:	e3403057 	movt	r3, #87	; 0x57
  1193c8:	e5933000 	ldr	r3, [r3]
  1193cc:	e50b3008 	str	r3, [fp, #-8]
  1193d0:	ea000016 	b	119430 <netif_find+0xa8>
    if (num == netif->num &&
  1193d4:	e51b3008 	ldr	r3, [fp, #-8]
  1193d8:	e5d33044 	ldrb	r3, [r3, #68]	; 0x44
  1193dc:	e55b2009 	ldrb	r2, [fp, #-9]
  1193e0:	e1520003 	cmp	r2, r3
  1193e4:	1a00000e 	bne	119424 <netif_find+0x9c>
       name[0] == netif->name[0] &&
  1193e8:	e51b3010 	ldr	r3, [fp, #-16]
  1193ec:	e5d32000 	ldrb	r2, [r3]
  1193f0:	e51b3008 	ldr	r3, [fp, #-8]
  1193f4:	e5d33042 	ldrb	r3, [r3, #66]	; 0x42
    if (num == netif->num &&
  1193f8:	e1520003 	cmp	r2, r3
  1193fc:	1a000008 	bne	119424 <netif_find+0x9c>
       name[1] == netif->name[1]) {
  119400:	e51b3010 	ldr	r3, [fp, #-16]
  119404:	e2833001 	add	r3, r3, #1
  119408:	e5d32000 	ldrb	r2, [r3]
  11940c:	e51b3008 	ldr	r3, [fp, #-8]
  119410:	e5d33043 	ldrb	r3, [r3, #67]	; 0x43
       name[0] == netif->name[0] &&
  119414:	e1520003 	cmp	r2, r3
  119418:	1a000001 	bne	119424 <netif_find+0x9c>
      LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: found %c%c\n", name[0], name[1]));
      return netif;
  11941c:	e51b3008 	ldr	r3, [fp, #-8]
  119420:	ea000006 	b	119440 <netif_find+0xb8>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
  119424:	e51b3008 	ldr	r3, [fp, #-8]
  119428:	e5933000 	ldr	r3, [r3]
  11942c:	e50b3008 	str	r3, [fp, #-8]
  119430:	e51b3008 	ldr	r3, [fp, #-8]
  119434:	e3530000 	cmp	r3, #0
  119438:	1affffe5 	bne	1193d4 <netif_find+0x4c>
    }
  }
  LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: didn't find %c%c\n", name[0], name[1]));
  return NULL;
  11943c:	e3a03000 	mov	r3, #0
}
  119440:	e1a00003 	mov	r0, r3
  119444:	e28bd000 	add	sp, fp, #0
  119448:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11944c:	e12fff1e 	bx	lr

00119450 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
  119450:	e92d4800 	push	{fp, lr}
  119454:	e28db004 	add	fp, sp, #4
  119458:	e24dd010 	sub	sp, sp, #16
  11945c:	e50b0010 	str	r0, [fp, #-16]
  119460:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
  119464:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  119468:	e3530000 	cmp	r3, #0
  11946c:	0a000003 	beq	119480 <netif_set_ipaddr+0x30>
  119470:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  119474:	e5933000 	ldr	r3, [r3]
  119478:	e50b3008 	str	r3, [fp, #-8]
  11947c:	ea000003 	b	119490 <netif_set_ipaddr+0x40>
  119480:	e3083e3c 	movw	r3, #36412	; 0x8e3c
  119484:	e3403014 	movt	r3, #20
  119488:	e5933000 	ldr	r3, [r3]
  11948c:	e50b3008 	str	r3, [fp, #-8]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
  119490:	e51b2008 	ldr	r2, [fp, #-8]
  119494:	e51b3010 	ldr	r3, [fp, #-16]
  119498:	e2833004 	add	r3, r3, #4
  11949c:	e5933000 	ldr	r3, [r3]
  1194a0:	e1520003 	cmp	r2, r3
  1194a4:	0a00002d 	beq	119560 <netif_set_ipaddr+0x110>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
  1194a8:	e51b3010 	ldr	r3, [fp, #-16]
  1194ac:	e2833004 	add	r3, r3, #4
  1194b0:	e24b2008 	sub	r2, fp, #8
  1194b4:	e1a01002 	mov	r1, r2
  1194b8:	e1a00003 	mov	r0, r3
  1194bc:	eb001a54 	bl	11fe14 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
  1194c0:	e51b3010 	ldr	r3, [fp, #-16]
  1194c4:	e2833004 	add	r3, r3, #4
  1194c8:	e24b2008 	sub	r2, fp, #8
  1194cc:	e1a01002 	mov	r1, r2
  1194d0:	e1a00003 	mov	r0, r3
  1194d4:	eb003cc3 	bl	1287e8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
    raw_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
  1194d8:	e51b3010 	ldr	r3, [fp, #-16]
  1194dc:	e2833004 	add	r3, r3, #4
  1194e0:	e24b2008 	sub	r2, fp, #8
  1194e4:	e1a01002 	mov	r1, r2
  1194e8:	e1a00003 	mov	r0, r3
  1194ec:	eb000c18 	bl	11c554 <raw_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
  1194f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1194f4:	e3530000 	cmp	r3, #0
  1194f8:	0a000002 	beq	119508 <netif_set_ipaddr+0xb8>
  1194fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  119500:	e5933000 	ldr	r3, [r3]
  119504:	ea000000 	b	11950c <netif_set_ipaddr+0xbc>
  119508:	e3a03000 	mov	r3, #0
  11950c:	e51b2010 	ldr	r2, [fp, #-16]
  119510:	e5823004 	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
  119514:	e3a01001 	mov	r1, #1
  119518:	e51b0010 	ldr	r0, [fp, #-16]
  11951c:	eb000082 	bl	11972c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
  119520:	e51b3010 	ldr	r3, [fp, #-16]
  119524:	e593301c 	ldr	r3, [r3, #28]
  119528:	e3530000 	cmp	r3, #0
  11952c:	0a000003 	beq	119540 <netif_set_ipaddr+0xf0>
  119530:	e51b3010 	ldr	r3, [fp, #-16]
  119534:	e593301c 	ldr	r3, [r3, #28]
  119538:	e51b0010 	ldr	r0, [fp, #-16]
  11953c:	e12fff33 	blx	r3

#ifdef RT_USING_NETDEV
    /* rt-thread sal network interface device set IP address operations */
    netdev_low_level_set_ipaddr(netdev_get_by_name(netif->name), (ip_addr_t *)ipaddr);
  119540:	e51b3010 	ldr	r3, [fp, #-16]
  119544:	e2833042 	add	r3, r3, #66	; 0x42
  119548:	e1a00003 	mov	r0, r3
  11954c:	ebffae94 	bl	104fa4 <netdev_get_by_name>
  119550:	e1a03000 	mov	r3, r0
  119554:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  119558:	e1a00003 	mov	r0, r3
  11955c:	ebffb160 	bl	105ae4 <netdev_low_level_set_ipaddr>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
  119560:	e320f000 	nop	{0}
  119564:	e24bd004 	sub	sp, fp, #4
  119568:	e8bd8800 	pop	{fp, pc}

0011956c <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
  11956c:	e92d4800 	push	{fp, lr}
  119570:	e28db004 	add	fp, sp, #4
  119574:	e24dd008 	sub	sp, sp, #8
  119578:	e50b0008 	str	r0, [fp, #-8]
  11957c:	e50b100c 	str	r1, [fp, #-12]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
  119580:	e51b300c 	ldr	r3, [fp, #-12]
  119584:	e3530000 	cmp	r3, #0
  119588:	0a000002 	beq	119598 <netif_set_gw+0x2c>
  11958c:	e51b300c 	ldr	r3, [fp, #-12]
  119590:	e5933000 	ldr	r3, [r3]
  119594:	ea000000 	b	11959c <netif_set_gw+0x30>
  119598:	e3a03000 	mov	r3, #0
  11959c:	e51b2008 	ldr	r2, [fp, #-8]
  1195a0:	e582300c 	str	r3, [r2, #12]
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));

#ifdef RT_USING_NETDEV
  /* rt_thread network interface device set gateway address */
  netdev_low_level_set_gw(netdev_get_by_name(netif->name), (ip_addr_t *)gw);
  1195a4:	e51b3008 	ldr	r3, [fp, #-8]
  1195a8:	e2833042 	add	r3, r3, #66	; 0x42
  1195ac:	e1a00003 	mov	r0, r3
  1195b0:	ebffae7b 	bl	104fa4 <netdev_get_by_name>
  1195b4:	e1a03000 	mov	r3, r0
  1195b8:	e51b100c 	ldr	r1, [fp, #-12]
  1195bc:	e1a00003 	mov	r0, r3
  1195c0:	ebffb1c3 	bl	105cd4 <netdev_low_level_set_gw>
#endif /* RT_USING_NETDEV */
}
  1195c4:	e320f000 	nop	{0}
  1195c8:	e24bd004 	sub	sp, fp, #4
  1195cc:	e8bd8800 	pop	{fp, pc}

001195d0 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
  1195d0:	e92d4800 	push	{fp, lr}
  1195d4:	e28db004 	add	fp, sp, #4
  1195d8:	e24dd008 	sub	sp, sp, #8
  1195dc:	e50b0008 	str	r0, [fp, #-8]
  1195e0:	e50b100c 	str	r1, [fp, #-12]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
  1195e4:	e51b300c 	ldr	r3, [fp, #-12]
  1195e8:	e3530000 	cmp	r3, #0
  1195ec:	0a000002 	beq	1195fc <netif_set_netmask+0x2c>
  1195f0:	e51b300c 	ldr	r3, [fp, #-12]
  1195f4:	e5933000 	ldr	r3, [r3]
  1195f8:	ea000000 	b	119600 <netif_set_netmask+0x30>
  1195fc:	e3a03000 	mov	r3, #0
  119600:	e51b2008 	ldr	r2, [fp, #-8]
  119604:	e5823008 	str	r3, [r2, #8]
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));

#ifdef RT_USING_NETDEV
  /* rt-thread network interface device set netmask address */
  netdev_low_level_set_netmask(netdev_get_by_name(netif->name), (ip_addr_t *)netmask);
  119608:	e51b3008 	ldr	r3, [fp, #-8]
  11960c:	e2833042 	add	r3, r3, #66	; 0x42
  119610:	e1a00003 	mov	r0, r3
  119614:	ebffae62 	bl	104fa4 <netdev_get_by_name>
  119618:	e1a03000 	mov	r3, r0
  11961c:	e51b100c 	ldr	r1, [fp, #-12]
  119620:	e1a00003 	mov	r0, r3
  119624:	ebffb168 	bl	105bcc <netdev_low_level_set_netmask>
#endif /* RT_USING_NETDEV */
}
  119628:	e320f000 	nop	{0}
  11962c:	e24bd004 	sub	sp, fp, #4
  119630:	e8bd8800 	pop	{fp, pc}

00119634 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
  119634:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  119638:	e28db000 	add	fp, sp, #0
  11963c:	e24dd00c 	sub	sp, sp, #12
  119640:	e50b0008 	str	r0, [fp, #-8]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
  119644:	e3043fb8 	movw	r3, #20408	; 0x4fb8
  119648:	e3403057 	movt	r3, #87	; 0x57
  11964c:	e51b2008 	ldr	r2, [fp, #-8]
  119650:	e5832000 	str	r2, [r3]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
  119654:	e320f000 	nop	{0}
  119658:	e28bd000 	add	sp, fp, #0
  11965c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  119660:	e12fff1e 	bx	lr

00119664 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
  119664:	e92d4800 	push	{fp, lr}
  119668:	e28db004 	add	fp, sp, #4
  11966c:	e24dd008 	sub	sp, sp, #8
  119670:	e50b0008 	str	r0, [fp, #-8]
  if (!(netif->flags & NETIF_FLAG_UP)) {
  119674:	e51b3008 	ldr	r3, [fp, #-8]
  119678:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  11967c:	e2033001 	and	r3, r3, #1
  119680:	e3530000 	cmp	r3, #0
  119684:	1a000025 	bne	119720 <netif_set_up+0xbc>
    netif->flags |= NETIF_FLAG_UP;
  119688:	e51b3008 	ldr	r3, [fp, #-8]
  11968c:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119690:	e3833001 	orr	r3, r3, #1
  119694:	e6ef2073 	uxtb	r2, r3
  119698:	e51b3008 	ldr	r3, [fp, #-8]
  11969c:	e5c32041 	strb	r2, [r3, #65]	; 0x41

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);
  1196a0:	ebffc534 	bl	10ab78 <sys_now>
  1196a4:	e1a02000 	mov	r2, r0
  1196a8:	e30c3ccd 	movw	r3, #52429	; 0xcccd
  1196ac:	e34c3ccc 	movt	r3, #52428	; 0xcccc
  1196b0:	e0832392 	umull	r2, r3, r2, r3
  1196b4:	e1a021a3 	lsr	r2, r3, #3
  1196b8:	e51b3008 	ldr	r3, [fp, #-8]
  1196bc:	e583204c 	str	r2, [r3, #76]	; 0x4c

    NETIF_STATUS_CALLBACK(netif);
  1196c0:	e51b3008 	ldr	r3, [fp, #-8]
  1196c4:	e593301c 	ldr	r3, [r3, #28]
  1196c8:	e3530000 	cmp	r3, #0
  1196cc:	0a000003 	beq	1196e0 <netif_set_up+0x7c>
  1196d0:	e51b3008 	ldr	r3, [fp, #-8]
  1196d4:	e593301c 	ldr	r3, [r3, #28]
  1196d8:	e51b0008 	ldr	r0, [fp, #-8]
  1196dc:	e12fff33 	blx	r3

    if (netif->flags & NETIF_FLAG_LINK_UP) {
  1196e0:	e51b3008 	ldr	r3, [fp, #-8]
  1196e4:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1196e8:	e2033004 	and	r3, r3, #4
  1196ec:	e3530000 	cmp	r3, #0
  1196f0:	0a000002 	beq	119700 <netif_set_up+0x9c>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
  1196f4:	e3a01003 	mov	r1, #3
  1196f8:	e51b0008 	ldr	r0, [fp, #-8]
  1196fc:	eb00000a 	bl	11972c <netif_issue_reports>
    }

#ifdef RT_USING_NETDEV
    /* rt-thread network interface device set up status */
    netdev_low_level_set_status(netdev_get_by_name(netif->name), RT_TRUE);
  119700:	e51b3008 	ldr	r3, [fp, #-8]
  119704:	e2833042 	add	r3, r3, #66	; 0x42
  119708:	e1a00003 	mov	r0, r3
  11970c:	ebffae24 	bl	104fa4 <netdev_get_by_name>
  119710:	e1a03000 	mov	r3, r0
  119714:	e3a01001 	mov	r1, #1
  119718:	e1a00003 	mov	r0, r3
  11971c:	ebffb1ea 	bl	105ecc <netdev_low_level_set_status>
#endif /* RT_USING_NETDEV */
  }
}
  119720:	e320f000 	nop	{0}
  119724:	e24bd004 	sub	sp, fp, #4
  119728:	e8bd8800 	pop	{fp, pc}

0011972c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
  11972c:	e92d4800 	push	{fp, lr}
  119730:	e28db004 	add	fp, sp, #4
  119734:	e24dd008 	sub	sp, sp, #8
  119738:	e50b0008 	str	r0, [fp, #-8]
  11973c:	e1a03001 	mov	r3, r1
  119740:	e54b3009 	strb	r3, [fp, #-9]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
  119744:	e55b3009 	ldrb	r3, [fp, #-9]
  119748:	e2033001 	and	r3, r3, #1
  11974c:	e3530000 	cmp	r3, #0
  119750:	0a000015 	beq	1197ac <netif_issue_reports+0x80>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
  119754:	e51b3008 	ldr	r3, [fp, #-8]
  119758:	e2833004 	add	r3, r3, #4
  11975c:	e5933000 	ldr	r3, [r3]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
  119760:	e3530000 	cmp	r3, #0
  119764:	0a000010 	beq	1197ac <netif_issue_reports+0x80>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
  119768:	e51b3008 	ldr	r3, [fp, #-8]
  11976c:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119770:	e2033008 	and	r3, r3, #8
  119774:	e3530000 	cmp	r3, #0
  119778:	0a000004 	beq	119790 <netif_issue_reports+0x64>
      etharp_gratuitous(netif);
  11977c:	e51b3008 	ldr	r3, [fp, #-8]
  119780:	e2833004 	add	r3, r3, #4
  119784:	e1a01003 	mov	r1, r3
  119788:	e51b0008 	ldr	r0, [fp, #-8]
  11978c:	eb005644 	bl	12f0a4 <etharp_request>
    }
#endif /* LWIP_ARP */

#if LWIP_IGMP
    /* resend IGMP memberships */
    if (netif->flags & NETIF_FLAG_IGMP) {
  119790:	e51b3008 	ldr	r3, [fp, #-8]
  119794:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119798:	e2033020 	and	r3, r3, #32
  11979c:	e3530000 	cmp	r3, #0
  1197a0:	0a000001 	beq	1197ac <netif_issue_reports+0x80>
      igmp_report_groups(netif);
  1197a4:	e51b0008 	ldr	r0, [fp, #-8]
  1197a8:	eb00591d 	bl	12fc24 <igmp_report_groups>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
  1197ac:	e320f000 	nop	{0}
  1197b0:	e24bd004 	sub	sp, fp, #4
  1197b4:	e8bd8800 	pop	{fp, pc}

001197b8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
  1197b8:	e92d4800 	push	{fp, lr}
  1197bc:	e28db004 	add	fp, sp, #4
  1197c0:	e24dd008 	sub	sp, sp, #8
  1197c4:	e50b0008 	str	r0, [fp, #-8]
  if (netif->flags & NETIF_FLAG_UP) {
  1197c8:	e51b3008 	ldr	r3, [fp, #-8]
  1197cc:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1197d0:	e2033001 	and	r3, r3, #1
  1197d4:	e3530000 	cmp	r3, #0
  1197d8:	0a000024 	beq	119870 <netif_set_down+0xb8>
    netif->flags &= ~NETIF_FLAG_UP;
  1197dc:	e51b3008 	ldr	r3, [fp, #-8]
  1197e0:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1197e4:	e3c33001 	bic	r3, r3, #1
  1197e8:	e6ef2073 	uxtb	r2, r3
  1197ec:	e51b3008 	ldr	r3, [fp, #-8]
  1197f0:	e5c32041 	strb	r2, [r3, #65]	; 0x41
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);
  1197f4:	ebffc4df 	bl	10ab78 <sys_now>
  1197f8:	e1a02000 	mov	r2, r0
  1197fc:	e30c3ccd 	movw	r3, #52429	; 0xcccd
  119800:	e34c3ccc 	movt	r3, #52428	; 0xcccc
  119804:	e0832392 	umull	r2, r3, r2, r3
  119808:	e1a021a3 	lsr	r2, r3, #3
  11980c:	e51b3008 	ldr	r3, [fp, #-8]
  119810:	e583204c 	str	r2, [r3, #76]	; 0x4c

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
  119814:	e51b3008 	ldr	r3, [fp, #-8]
  119818:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  11981c:	e2033008 	and	r3, r3, #8
  119820:	e3530000 	cmp	r3, #0
  119824:	0a000001 	beq	119830 <netif_set_down+0x78>
      etharp_cleanup_netif(netif);
  119828:	e51b0008 	ldr	r0, [fp, #-8]
  11982c:	eb005162 	bl	12ddbc <etharp_cleanup_netif>

#if LWIP_IPV6
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  119830:	e51b3008 	ldr	r3, [fp, #-8]
  119834:	e593301c 	ldr	r3, [r3, #28]
  119838:	e3530000 	cmp	r3, #0
  11983c:	0a000003 	beq	119850 <netif_set_down+0x98>
  119840:	e51b3008 	ldr	r3, [fp, #-8]
  119844:	e593301c 	ldr	r3, [r3, #28]
  119848:	e51b0008 	ldr	r0, [fp, #-8]
  11984c:	e12fff33 	blx	r3

#ifdef RT_USING_NETDEV
    /* rt-thread network interface device set down status */
    netdev_low_level_set_status(netdev_get_by_name(netif->name), RT_FALSE);
  119850:	e51b3008 	ldr	r3, [fp, #-8]
  119854:	e2833042 	add	r3, r3, #66	; 0x42
  119858:	e1a00003 	mov	r0, r3
  11985c:	ebffadd0 	bl	104fa4 <netdev_get_by_name>
  119860:	e1a03000 	mov	r3, r0
  119864:	e3a01000 	mov	r1, #0
  119868:	e1a00003 	mov	r0, r3
  11986c:	ebffb196 	bl	105ecc <netdev_low_level_set_status>
#endif /* RT_USING_NETDEV */
  }
}
  119870:	e320f000 	nop	{0}
  119874:	e24bd004 	sub	sp, fp, #4
  119878:	e8bd8800 	pop	{fp, pc}

0011987c <netif_set_status_callback>:
 * @ingroup netif
 * Set callback to be called when interface is brought up/down or address is changed while up
 */
void
netif_set_status_callback(struct netif *netif, netif_status_callback_fn status_callback)
{
  11987c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  119880:	e28db000 	add	fp, sp, #0
  119884:	e24dd00c 	sub	sp, sp, #12
  119888:	e50b0008 	str	r0, [fp, #-8]
  11988c:	e50b100c 	str	r1, [fp, #-12]
  if (netif) {
  119890:	e51b3008 	ldr	r3, [fp, #-8]
  119894:	e3530000 	cmp	r3, #0
  119898:	0a000002 	beq	1198a8 <netif_set_status_callback+0x2c>
    netif->status_callback = status_callback;
  11989c:	e51b3008 	ldr	r3, [fp, #-8]
  1198a0:	e51b200c 	ldr	r2, [fp, #-12]
  1198a4:	e583201c 	str	r2, [r3, #28]
  }
}
  1198a8:	e320f000 	nop	{0}
  1198ac:	e28bd000 	add	sp, fp, #0
  1198b0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1198b4:	e12fff1e 	bx	lr

001198b8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
  1198b8:	e92d4800 	push	{fp, lr}
  1198bc:	e28db004 	add	fp, sp, #4
  1198c0:	e24dd008 	sub	sp, sp, #8
  1198c4:	e50b0008 	str	r0, [fp, #-8]
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
  1198c8:	e51b3008 	ldr	r3, [fp, #-8]
  1198cc:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1198d0:	e2033004 	and	r3, r3, #4
  1198d4:	e3530000 	cmp	r3, #0
  1198d8:	1a00001f 	bne	11995c <netif_set_link_up+0xa4>
    netif->flags |= NETIF_FLAG_LINK_UP;
  1198dc:	e51b3008 	ldr	r3, [fp, #-8]
  1198e0:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1198e4:	e3833004 	orr	r3, r3, #4
  1198e8:	e6ef2073 	uxtb	r2, r3
  1198ec:	e51b3008 	ldr	r3, [fp, #-8]
  1198f0:	e5c32041 	strb	r2, [r3, #65]	; 0x41

#if LWIP_DHCP
    dhcp_network_changed(netif);
  1198f4:	e51b0008 	ldr	r0, [fp, #-8]
  1198f8:	eb0044a3 	bl	12ab8c <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    if (netif->flags & NETIF_FLAG_UP) {
  1198fc:	e51b3008 	ldr	r3, [fp, #-8]
  119900:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119904:	e2033001 	and	r3, r3, #1
  119908:	e3530000 	cmp	r3, #0
  11990c:	0a000002 	beq	11991c <netif_set_link_up+0x64>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
  119910:	e3a01003 	mov	r1, #3
  119914:	e51b0008 	ldr	r0, [fp, #-8]
  119918:	ebffff83 	bl	11972c <netif_issue_reports>
    }
    NETIF_LINK_CALLBACK(netif);
  11991c:	e51b3008 	ldr	r3, [fp, #-8]
  119920:	e5933020 	ldr	r3, [r3, #32]
  119924:	e3530000 	cmp	r3, #0
  119928:	0a000003 	beq	11993c <netif_set_link_up+0x84>
  11992c:	e51b3008 	ldr	r3, [fp, #-8]
  119930:	e5933020 	ldr	r3, [r3, #32]
  119934:	e51b0008 	ldr	r0, [fp, #-8]
  119938:	e12fff33 	blx	r3

#ifdef RT_USING_NETDEV
    /* rt-thread network interface device set link up status */
    netdev_low_level_set_link_status(netdev_get_by_name(netif->name), RT_TRUE);
  11993c:	e51b3008 	ldr	r3, [fp, #-8]
  119940:	e2833042 	add	r3, r3, #66	; 0x42
  119944:	e1a00003 	mov	r0, r3
  119948:	ebffad95 	bl	104fa4 <netdev_get_by_name>
  11994c:	e1a03000 	mov	r3, r0
  119950:	e3a01001 	mov	r1, #1
  119954:	e1a00003 	mov	r0, r3
  119958:	ebffb18b 	bl	105f8c <netdev_low_level_set_link_status>
#endif /* RT_USING_NETDEV */
  }
}
  11995c:	e320f000 	nop	{0}
  119960:	e24bd004 	sub	sp, fp, #4
  119964:	e8bd8800 	pop	{fp, pc}

00119968 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif )
{
  119968:	e92d4800 	push	{fp, lr}
  11996c:	e28db004 	add	fp, sp, #4
  119970:	e24dd008 	sub	sp, sp, #8
  119974:	e50b0008 	str	r0, [fp, #-8]
  if (netif->flags & NETIF_FLAG_LINK_UP) {
  119978:	e51b3008 	ldr	r3, [fp, #-8]
  11997c:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119980:	e2033004 	and	r3, r3, #4
  119984:	e3530000 	cmp	r3, #0
  119988:	0a000015 	beq	1199e4 <netif_set_link_down+0x7c>
    netif->flags &= ~NETIF_FLAG_LINK_UP;
  11998c:	e51b3008 	ldr	r3, [fp, #-8]
  119990:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119994:	e3c33004 	bic	r3, r3, #4
  119998:	e6ef2073 	uxtb	r2, r3
  11999c:	e51b3008 	ldr	r3, [fp, #-8]
  1199a0:	e5c32041 	strb	r2, [r3, #65]	; 0x41
    NETIF_LINK_CALLBACK(netif);
  1199a4:	e51b3008 	ldr	r3, [fp, #-8]
  1199a8:	e5933020 	ldr	r3, [r3, #32]
  1199ac:	e3530000 	cmp	r3, #0
  1199b0:	0a000003 	beq	1199c4 <netif_set_link_down+0x5c>
  1199b4:	e51b3008 	ldr	r3, [fp, #-8]
  1199b8:	e5933020 	ldr	r3, [r3, #32]
  1199bc:	e51b0008 	ldr	r0, [fp, #-8]
  1199c0:	e12fff33 	blx	r3

#ifdef RT_USING_NETDEV
    /* rt-thread network interface device set link down status */
    netdev_low_level_set_link_status(netdev_get_by_name(netif->name), RT_FALSE);
  1199c4:	e51b3008 	ldr	r3, [fp, #-8]
  1199c8:	e2833042 	add	r3, r3, #66	; 0x42
  1199cc:	e1a00003 	mov	r0, r3
  1199d0:	ebffad73 	bl	104fa4 <netdev_get_by_name>
  1199d4:	e1a03000 	mov	r3, r0
  1199d8:	e3a01000 	mov	r1, #0
  1199dc:	e1a00003 	mov	r0, r3
  1199e0:	ebffb169 	bl	105f8c <netdev_low_level_set_link_status>
#endif /* RT_USING_NETDEV */
  }
}
  1199e4:	e320f000 	nop	{0}
  1199e8:	e24bd004 	sub	sp, fp, #4
  1199ec:	e8bd8800 	pop	{fp, pc}

001199f0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
  1199f0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1199f4:	e28db000 	add	fp, sp, #0
  1199f8:	e24dd00c 	sub	sp, sp, #12
  1199fc:	e50b0008 	str	r0, [fp, #-8]
  119a00:	e50b100c 	str	r1, [fp, #-12]
  if (netif) {
  119a04:	e51b3008 	ldr	r3, [fp, #-8]
  119a08:	e3530000 	cmp	r3, #0
  119a0c:	0a000002 	beq	119a1c <netif_set_link_callback+0x2c>
    netif->link_callback = link_callback;
  119a10:	e51b3008 	ldr	r3, [fp, #-8]
  119a14:	e51b200c 	ldr	r2, [fp, #-12]
  119a18:	e5832020 	str	r2, [r3, #32]
  }
}
  119a1c:	e320f000 	nop	{0}
  119a20:	e28bd000 	add	sp, fp, #0
  119a24:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  119a28:	e12fff1e 	bx	lr

00119a2c <netif_loop_output>:
 * @return ERR_OK if the packet has been sent
 *         ERR_MEM if the pbuf used to copy the packet couldn't be allocated
 */
err_t
netif_loop_output(struct netif *netif, struct pbuf *p)
{
  119a2c:	e92d4800 	push	{fp, lr}
  119a30:	e28db004 	add	fp, sp, #4
  119a34:	e24dd018 	sub	sp, sp, #24
  119a38:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  119a3c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   * if not they are adjusted for 'netif'. */
#if MIB2_STATS
#if LWIP_HAVE_LOOPIF
  struct netif *stats_if = &loop_netif;
#else /* LWIP_HAVE_LOOPIF */
  struct netif *stats_if = netif;
  119a40:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119a44:	e50b300c 	str	r3, [fp, #-12]
#endif /* LWIP_HAVE_LOOPIF */
#endif /* MIB2_STATS */
  SYS_ARCH_DECL_PROTECT(lev);

  /* Allocate a new pbuf */
  r = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
  119a48:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  119a4c:	e1d330b8 	ldrh	r3, [r3, #8]
  119a50:	e3a02000 	mov	r2, #0
  119a54:	e1a01003 	mov	r1, r3
  119a58:	e3a00002 	mov	r0, #2
  119a5c:	eb000133 	bl	119f30 <pbuf_alloc>
  119a60:	e50b0010 	str	r0, [fp, #-16]
  if (r == NULL) {
  119a64:	e51b3010 	ldr	r3, [fp, #-16]
  119a68:	e3530000 	cmp	r3, #0
  119a6c:	1a000016 	bne	119acc <netif_loop_output+0xa0>
    LINK_STATS_INC(link.memerr);
  119a70:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  119a74:	e3403057 	movt	r3, #87	; 0x57
  119a78:	e1d330bc 	ldrh	r3, [r3, #12]
  119a7c:	e2833001 	add	r3, r3, #1
  119a80:	e6ff2073 	uxth	r2, r3
  119a84:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  119a88:	e3403057 	movt	r3, #87	; 0x57
  119a8c:	e1c320bc 	strh	r2, [r3, #12]
    LINK_STATS_INC(link.drop);
  119a90:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  119a94:	e3403057 	movt	r3, #87	; 0x57
  119a98:	e1d330b6 	ldrh	r3, [r3, #6]
  119a9c:	e2833001 	add	r3, r3, #1
  119aa0:	e6ff2073 	uxth	r2, r3
  119aa4:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  119aa8:	e3403057 	movt	r3, #87	; 0x57
  119aac:	e1c320b6 	strh	r2, [r3, #6]
    MIB2_STATS_NETIF_INC(stats_if, ifoutdiscards);
  119ab0:	e51b300c 	ldr	r3, [fp, #-12]
  119ab4:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  119ab8:	e2832001 	add	r2, r3, #1
  119abc:	e51b300c 	ldr	r3, [fp, #-12]
  119ac0:	e5832074 	str	r2, [r3, #116]	; 0x74
    return ERR_MEM;
  119ac4:	e3e03000 	mvn	r3, #0
  119ac8:	ea000063 	b	119c5c <netif_loop_output+0x230>
  }
  netif->loop_cnt_current += clen;
#endif /* LWIP_LOOPBACK_MAX_PBUFS */

  /* Copy the whole pbuf queue p into the single pbuf r */
  if ((err = pbuf_copy(r, p)) != ERR_OK) {
  119acc:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  119ad0:	e51b0010 	ldr	r0, [fp, #-16]
  119ad4:	eb000571 	bl	11b0a0 <pbuf_copy>
  119ad8:	e1a03000 	mov	r3, r0
  119adc:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  119ae0:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  119ae4:	e3530000 	cmp	r3, #0
  119ae8:	0a000018 	beq	119b50 <netif_loop_output+0x124>
    pbuf_free(r);
  119aec:	e51b0010 	ldr	r0, [fp, #-16]
  119af0:	eb000415 	bl	11ab4c <pbuf_free>
    LINK_STATS_INC(link.memerr);
  119af4:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  119af8:	e3403057 	movt	r3, #87	; 0x57
  119afc:	e1d330bc 	ldrh	r3, [r3, #12]
  119b00:	e2833001 	add	r3, r3, #1
  119b04:	e6ff2073 	uxth	r2, r3
  119b08:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  119b0c:	e3403057 	movt	r3, #87	; 0x57
  119b10:	e1c320bc 	strh	r2, [r3, #12]
    LINK_STATS_INC(link.drop);
  119b14:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  119b18:	e3403057 	movt	r3, #87	; 0x57
  119b1c:	e1d330b6 	ldrh	r3, [r3, #6]
  119b20:	e2833001 	add	r3, r3, #1
  119b24:	e6ff2073 	uxth	r2, r3
  119b28:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  119b2c:	e3403057 	movt	r3, #87	; 0x57
  119b30:	e1c320b6 	strh	r2, [r3, #6]
    MIB2_STATS_NETIF_INC(stats_if, ifoutdiscards);
  119b34:	e51b300c 	ldr	r3, [fp, #-12]
  119b38:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  119b3c:	e2832001 	add	r2, r3, #1
  119b40:	e51b300c 	ldr	r3, [fp, #-12]
  119b44:	e5832074 	str	r2, [r3, #116]	; 0x74
    return err;
  119b48:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  119b4c:	ea000042 	b	119c5c <netif_loop_output+0x230>

  /* Put the packet on a linked list which gets emptied through calling
     netif_poll(). */

  /* let last point to the last pbuf in chain r */
  for (last = r; last->next != NULL; last = last->next);
  119b50:	e51b3010 	ldr	r3, [fp, #-16]
  119b54:	e50b3008 	str	r3, [fp, #-8]
  119b58:	ea000002 	b	119b68 <netif_loop_output+0x13c>
  119b5c:	e51b3008 	ldr	r3, [fp, #-8]
  119b60:	e5933000 	ldr	r3, [r3]
  119b64:	e50b3008 	str	r3, [fp, #-8]
  119b68:	e51b3008 	ldr	r3, [fp, #-8]
  119b6c:	e5933000 	ldr	r3, [r3]
  119b70:	e3530000 	cmp	r3, #0
  119b74:	1afffff8 	bne	119b5c <netif_loop_output+0x130>

  SYS_ARCH_PROTECT(lev);
  119b78:	ebffa1af 	bl	10223c <rt_enter_critical>
  if (netif->loop_first != NULL) {
  119b7c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119b80:	e5933080 	ldr	r3, [r3, #128]	; 0x80
  119b84:	e3530000 	cmp	r3, #0
  119b88:	0a000012 	beq	119bd8 <netif_loop_output+0x1ac>
    LWIP_ASSERT("if first != NULL, last must also be != NULL", netif->loop_last != NULL);
  119b8c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119b90:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  119b94:	e3530000 	cmp	r3, #0
  119b98:	1a000006 	bne	119bb8 <netif_loop_output+0x18c>
  119b9c:	e3060adc 	movw	r0, #27356	; 0x6adc
  119ba0:	e3400014 	movt	r0, #20
  119ba4:	ebffa55a 	bl	103114 <rt_kprintf>
  119ba8:	e3001382 	movw	r1, #898	; 0x382
  119bac:	e3060aac 	movw	r0, #27308	; 0x6aac
  119bb0:	e3400014 	movt	r0, #20
  119bb4:	ebffc3d6 	bl	10ab14 <sys_arch_assert>
    netif->loop_last->next = r;
  119bb8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119bbc:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  119bc0:	e51b2010 	ldr	r2, [fp, #-16]
  119bc4:	e5832000 	str	r2, [r3]
    netif->loop_last = last;
  119bc8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119bcc:	e51b2008 	ldr	r2, [fp, #-8]
  119bd0:	e5832084 	str	r2, [r3, #132]	; 0x84
  119bd4:	ea000005 	b	119bf0 <netif_loop_output+0x1c4>
  } else {
    netif->loop_first = r;
  119bd8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119bdc:	e51b2010 	ldr	r2, [fp, #-16]
  119be0:	e5832080 	str	r2, [r3, #128]	; 0x80
    netif->loop_last = last;
  119be4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119be8:	e51b2008 	ldr	r2, [fp, #-8]
  119bec:	e5832084 	str	r2, [r3, #132]	; 0x84
  }
  SYS_ARCH_UNPROTECT(lev);
  119bf0:	ebffa197 	bl	102254 <rt_exit_critical>

  LINK_STATS_INC(link.xmit);
  119bf4:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  119bf8:	e3403057 	movt	r3, #87	; 0x57
  119bfc:	e1d330b0 	ldrh	r3, [r3]
  119c00:	e2833001 	add	r3, r3, #1
  119c04:	e6ff2073 	uxth	r2, r3
  119c08:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  119c0c:	e3403057 	movt	r3, #87	; 0x57
  119c10:	e1c320b0 	strh	r2, [r3]
  MIB2_STATS_NETIF_ADD(stats_if, ifoutoctets, p->tot_len);
  119c14:	e51b300c 	ldr	r3, [fp, #-12]
  119c18:	e5933068 	ldr	r3, [r3, #104]	; 0x68
  119c1c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  119c20:	e1d220b8 	ldrh	r2, [r2, #8]
  119c24:	e0832002 	add	r2, r3, r2
  119c28:	e51b300c 	ldr	r3, [fp, #-12]
  119c2c:	e5832068 	str	r2, [r3, #104]	; 0x68
  MIB2_STATS_NETIF_INC(stats_if, ifoutucastpkts);
  119c30:	e51b300c 	ldr	r3, [fp, #-12]
  119c34:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  119c38:	e2832001 	add	r2, r3, #1
  119c3c:	e51b300c 	ldr	r3, [fp, #-12]
  119c40:	e583206c 	str	r2, [r3, #108]	; 0x6c

#if LWIP_NETIF_LOOPBACK_MULTITHREADING
  /* For multithreading environment, schedule a call to netif_poll */
  tcpip_callback_with_block((tcpip_callback_fn)netif_poll, netif, 0);
  119c44:	e3a02000 	mov	r2, #0
  119c48:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  119c4c:	e3090c68 	movw	r0, #40040	; 0x9c68
  119c50:	e3400011 	movt	r0, #17
  119c54:	ebfff084 	bl	115e6c <tcpip_callback_with_block>
#endif /* LWIP_NETIF_LOOPBACK_MULTITHREADING */

  return ERR_OK;
  119c58:	e3a03000 	mov	r3, #0
}
  119c5c:	e1a00003 	mov	r0, r3
  119c60:	e24bd004 	sub	sp, fp, #4
  119c64:	e8bd8800 	pop	{fp, pc}

00119c68 <netif_poll>:
 * netif_loop_output() are put on a list that is passed to netif->input() by
 * netif_poll().
 */
void
netif_poll(struct netif *netif)
{
  119c68:	e92d4800 	push	{fp, lr}
  119c6c:	e28db004 	add	fp, sp, #4
  119c70:	e24dd018 	sub	sp, sp, #24
  119c74:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   * if not they are adjusted for 'netif'. */
#if MIB2_STATS
#if LWIP_HAVE_LOOPIF
  struct netif *stats_if = &loop_netif;
#else /* LWIP_HAVE_LOOPIF */
  struct netif *stats_if = netif;
  119c78:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119c7c:	e50b300c 	str	r3, [fp, #-12]
#endif /* LWIP_HAVE_LOOPIF */
#endif /* MIB2_STATS */
  SYS_ARCH_DECL_PROTECT(lev);

  /* Get a packet from the list. With SYS_LIGHTWEIGHT_PROT=1, this is protected */
  SYS_ARCH_PROTECT(lev);
  119c80:	ebffa16d 	bl	10223c <rt_enter_critical>
  while (netif->loop_first != NULL) {
  119c84:	ea000056 	b	119de4 <netif_poll+0x17c>
    struct pbuf *in, *in_end;
#if LWIP_LOOPBACK_MAX_PBUFS
    u8_t clen = 1;
#endif /* LWIP_LOOPBACK_MAX_PBUFS */

    in = in_end = netif->loop_first;
  119c88:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119c8c:	e5933080 	ldr	r3, [r3, #128]	; 0x80
  119c90:	e50b3008 	str	r3, [fp, #-8]
  119c94:	e51b3008 	ldr	r3, [fp, #-8]
  119c98:	e50b3010 	str	r3, [fp, #-16]
    while (in_end->len != in_end->tot_len) {
  119c9c:	ea00000d 	b	119cd8 <netif_poll+0x70>
      LWIP_ASSERT("bogus pbuf: len != tot_len but next == NULL!", in_end->next != NULL);
  119ca0:	e51b3008 	ldr	r3, [fp, #-8]
  119ca4:	e5933000 	ldr	r3, [r3]
  119ca8:	e3530000 	cmp	r3, #0
  119cac:	1a000006 	bne	119ccc <netif_poll+0x64>
  119cb0:	e3060b08 	movw	r0, #27400	; 0x6b08
  119cb4:	e3400014 	movt	r0, #20
  119cb8:	ebffa515 	bl	103114 <rt_kprintf>
  119cbc:	e30013ca 	movw	r1, #970	; 0x3ca
  119cc0:	e3060aac 	movw	r0, #27308	; 0x6aac
  119cc4:	e3400014 	movt	r0, #20
  119cc8:	ebffc391 	bl	10ab14 <sys_arch_assert>
      in_end = in_end->next;
  119ccc:	e51b3008 	ldr	r3, [fp, #-8]
  119cd0:	e5933000 	ldr	r3, [r3]
  119cd4:	e50b3008 	str	r3, [fp, #-8]
    while (in_end->len != in_end->tot_len) {
  119cd8:	e51b3008 	ldr	r3, [fp, #-8]
  119cdc:	e1d320ba 	ldrh	r2, [r3, #10]
  119ce0:	e51b3008 	ldr	r3, [fp, #-8]
  119ce4:	e1d330b8 	ldrh	r3, [r3, #8]
  119ce8:	e1520003 	cmp	r2, r3
  119cec:	1affffeb 	bne	119ca0 <netif_poll+0x38>
      ((netif->loop_cnt_current - clen) < netif->loop_cnt_current));
    netif->loop_cnt_current -= clen;
#endif /* LWIP_LOOPBACK_MAX_PBUFS */

    /* 'in_end' now points to the last pbuf from 'in' */
    if (in_end == netif->loop_last) {
  119cf0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119cf4:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  119cf8:	e51b2008 	ldr	r2, [fp, #-8]
  119cfc:	e1520003 	cmp	r2, r3
  119d00:	1a000007 	bne	119d24 <netif_poll+0xbc>
      /* this was the last pbuf in the list */
      netif->loop_first = netif->loop_last = NULL;
  119d04:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119d08:	e3a02000 	mov	r2, #0
  119d0c:	e5832084 	str	r2, [r3, #132]	; 0x84
  119d10:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119d14:	e5932084 	ldr	r2, [r3, #132]	; 0x84
  119d18:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119d1c:	e5832080 	str	r2, [r3, #128]	; 0x80
  119d20:	ea00000e 	b	119d60 <netif_poll+0xf8>
    } else {
      /* pop the pbuf off the list */
      netif->loop_first = in_end->next;
  119d24:	e51b3008 	ldr	r3, [fp, #-8]
  119d28:	e5932000 	ldr	r2, [r3]
  119d2c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119d30:	e5832080 	str	r2, [r3, #128]	; 0x80
      LWIP_ASSERT("should not be null since first != last!", netif->loop_first != NULL);
  119d34:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119d38:	e5933080 	ldr	r3, [r3, #128]	; 0x80
  119d3c:	e3530000 	cmp	r3, #0
  119d40:	1a000006 	bne	119d60 <netif_poll+0xf8>
  119d44:	e3060b38 	movw	r0, #27448	; 0x6b38
  119d48:	e3400014 	movt	r0, #20
  119d4c:	ebffa4f0 	bl	103114 <rt_kprintf>
  119d50:	e30013de 	movw	r1, #990	; 0x3de
  119d54:	e3060aac 	movw	r0, #27308	; 0x6aac
  119d58:	e3400014 	movt	r0, #20
  119d5c:	ebffc36c 	bl	10ab14 <sys_arch_assert>
    }
    /* De-queue the pbuf from its successors on the 'loop_' list. */
    in_end->next = NULL;
  119d60:	e51b3008 	ldr	r3, [fp, #-8]
  119d64:	e3a02000 	mov	r2, #0
  119d68:	e5832000 	str	r2, [r3]
    SYS_ARCH_UNPROTECT(lev);
  119d6c:	ebffa138 	bl	102254 <rt_exit_critical>

    LINK_STATS_INC(link.recv);
  119d70:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  119d74:	e3403057 	movt	r3, #87	; 0x57
  119d78:	e1d330b2 	ldrh	r3, [r3, #2]
  119d7c:	e2833001 	add	r3, r3, #1
  119d80:	e6ff2073 	uxth	r2, r3
  119d84:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  119d88:	e3403057 	movt	r3, #87	; 0x57
  119d8c:	e1c320b2 	strh	r2, [r3, #2]
    MIB2_STATS_NETIF_ADD(stats_if, ifinoctets, in->tot_len);
  119d90:	e51b300c 	ldr	r3, [fp, #-12]
  119d94:	e5933050 	ldr	r3, [r3, #80]	; 0x50
  119d98:	e51b2010 	ldr	r2, [fp, #-16]
  119d9c:	e1d220b8 	ldrh	r2, [r2, #8]
  119da0:	e0832002 	add	r2, r3, r2
  119da4:	e51b300c 	ldr	r3, [fp, #-12]
  119da8:	e5832050 	str	r2, [r3, #80]	; 0x50
    MIB2_STATS_NETIF_INC(stats_if, ifinucastpkts);
  119dac:	e51b300c 	ldr	r3, [fp, #-12]
  119db0:	e5933054 	ldr	r3, [r3, #84]	; 0x54
  119db4:	e2832001 	add	r2, r3, #1
  119db8:	e51b300c 	ldr	r3, [fp, #-12]
  119dbc:	e5832054 	str	r2, [r3, #84]	; 0x54
    /* loopback packets are always IP packets! */
    if (ip_input(in, netif) != ERR_OK) {
  119dc0:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  119dc4:	e51b0010 	ldr	r0, [fp, #-16]
  119dc8:	eb005c83 	bl	130fdc <ip4_input>
  119dcc:	e1a03000 	mov	r3, r0
  119dd0:	e3530000 	cmp	r3, #0
  119dd4:	0a000001 	beq	119de0 <netif_poll+0x178>
      pbuf_free(in);
  119dd8:	e51b0010 	ldr	r0, [fp, #-16]
  119ddc:	eb00035a 	bl	11ab4c <pbuf_free>
    }
    SYS_ARCH_PROTECT(lev);
  119de0:	ebffa115 	bl	10223c <rt_enter_critical>
  while (netif->loop_first != NULL) {
  119de4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119de8:	e5933080 	ldr	r3, [r3, #128]	; 0x80
  119dec:	e3530000 	cmp	r3, #0
  119df0:	1affffa4 	bne	119c88 <netif_poll+0x20>
  }
  SYS_ARCH_UNPROTECT(lev);
  119df4:	ebffa116 	bl	102254 <rt_exit_critical>
}
  119df8:	e320f000 	nop	{0}
  119dfc:	e24bd004 	sub	sp, fp, #4
  119e00:	e8bd8800 	pop	{fp, pc}

00119e04 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
  119e04:	e92d4800 	push	{fp, lr}
  119e08:	e28db004 	add	fp, sp, #4
  119e0c:	e24dd008 	sub	sp, sp, #8
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
  119e10:	ebffa109 	bl	10223c <rt_enter_critical>
  119e14:	e3043fbc 	movw	r3, #20412	; 0x4fbc
  119e18:	e3403057 	movt	r3, #87	; 0x57
  119e1c:	e3a02000 	mov	r2, #0
  119e20:	e5c32000 	strb	r2, [r3]
  119e24:	ebffa10a 	bl	102254 <rt_exit_critical>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
  119e28:	e30531b0 	movw	r3, #20912	; 0x51b0
  119e2c:	e3403057 	movt	r3, #87	; 0x57
  119e30:	e5933000 	ldr	r3, [r3]
  119e34:	e50b3008 	str	r3, [fp, #-8]
  119e38:	ea00000e 	b	119e78 <pbuf_free_ooseq+0x74>
    if (NULL != pcb->ooseq) {
  119e3c:	e51b3008 	ldr	r3, [fp, #-8]
  119e40:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  119e44:	e3530000 	cmp	r3, #0
  119e48:	0a000007 	beq	119e6c <pbuf_free_ooseq+0x68>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
  119e4c:	e51b3008 	ldr	r3, [fp, #-8]
  119e50:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  119e54:	e1a00003 	mov	r0, r3
  119e58:	eb00149b 	bl	11f0cc <tcp_segs_free>
      pcb->ooseq = NULL;
  119e5c:	e51b3008 	ldr	r3, [fp, #-8]
  119e60:	e3a02000 	mov	r2, #0
  119e64:	e5832074 	str	r2, [r3, #116]	; 0x74
      return;
  119e68:	ea000005 	b	119e84 <pbuf_free_ooseq+0x80>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
  119e6c:	e51b3008 	ldr	r3, [fp, #-8]
  119e70:	e593300c 	ldr	r3, [r3, #12]
  119e74:	e50b3008 	str	r3, [fp, #-8]
  119e78:	e51b3008 	ldr	r3, [fp, #-8]
  119e7c:	e3530000 	cmp	r3, #0
  119e80:	1affffed 	bne	119e3c <pbuf_free_ooseq+0x38>
    }
  }
}
  119e84:	e24bd004 	sub	sp, fp, #4
  119e88:	e8bd8800 	pop	{fp, pc}

00119e8c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
  119e8c:	e92d4800 	push	{fp, lr}
  119e90:	e28db004 	add	fp, sp, #4
  119e94:	e24dd008 	sub	sp, sp, #8
  119e98:	e50b0008 	str	r0, [fp, #-8]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
  119e9c:	ebffffd8 	bl	119e04 <pbuf_free_ooseq>
}
  119ea0:	e320f000 	nop	{0}
  119ea4:	e24bd004 	sub	sp, fp, #4
  119ea8:	e8bd8800 	pop	{fp, pc}

00119eac <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
  119eac:	e92d4800 	push	{fp, lr}
  119eb0:	e28db004 	add	fp, sp, #4
  119eb4:	e24dd008 	sub	sp, sp, #8
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
  119eb8:	ebffa0df 	bl	10223c <rt_enter_critical>
  queued = pbuf_free_ooseq_pending;
  119ebc:	e3043fbc 	movw	r3, #20412	; 0x4fbc
  119ec0:	e3403057 	movt	r3, #87	; 0x57
  119ec4:	e5d33000 	ldrb	r3, [r3]
  119ec8:	e54b3005 	strb	r3, [fp, #-5]
  pbuf_free_ooseq_pending = 1;
  119ecc:	e3043fbc 	movw	r3, #20412	; 0x4fbc
  119ed0:	e3403057 	movt	r3, #87	; 0x57
  119ed4:	e3a02001 	mov	r2, #1
  119ed8:	e5c32000 	strb	r2, [r3]
  SYS_ARCH_UNPROTECT(old_level);
  119edc:	ebffa0dc 	bl	102254 <rt_exit_critical>

  if (!queued) {
  119ee0:	e55b3005 	ldrb	r3, [fp, #-5]
  119ee4:	e3530000 	cmp	r3, #0
  119ee8:	1a00000d 	bne	119f24 <pbuf_pool_is_empty+0x78>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  119eec:	e3a02000 	mov	r2, #0
  119ef0:	e3a01000 	mov	r1, #0
  119ef4:	e3090e8c 	movw	r0, #40588	; 0x9e8c
  119ef8:	e3400011 	movt	r0, #17
  119efc:	ebffefda 	bl	115e6c <tcpip_callback_with_block>
  119f00:	e1a03000 	mov	r3, r0
  119f04:	e3530000 	cmp	r3, #0
  119f08:	0a000005 	beq	119f24 <pbuf_pool_is_empty+0x78>
  119f0c:	ebffa0ca 	bl	10223c <rt_enter_critical>
  119f10:	e3043fbc 	movw	r3, #20412	; 0x4fbc
  119f14:	e3403057 	movt	r3, #87	; 0x57
  119f18:	e3a02000 	mov	r2, #0
  119f1c:	e5c32000 	strb	r2, [r3]
  119f20:	ebffa0cb 	bl	102254 <rt_exit_critical>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
  119f24:	e320f000 	nop	{0}
  119f28:	e24bd004 	sub	sp, fp, #4
  119f2c:	e8bd8800 	pop	{fp, pc}

00119f30 <pbuf_alloc>:
 * is the first pbuf of a pbuf chain.
 */
#include <stdio.h>
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
  119f30:	e92d4800 	push	{fp, lr}
  119f34:	e28db004 	add	fp, sp, #4
  119f38:	e24dd028 	sub	sp, sp, #40	; 0x28
  119f3c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  119f40:	e1a03001 	mov	r3, r1
  119f44:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  119f48:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
  119f4c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  119f50:	e3530004 	cmp	r3, #4
  119f54:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  119f58:	ea000013 	b	119fac <pbuf_alloc+0x7c>
  119f5c:	00119f70 	.word	0x00119f70
  119f60:	00119f7c 	.word	0x00119f7c
  119f64:	00119f88 	.word	0x00119f88
  119f68:	00119f94 	.word	0x00119f94
  119f6c:	00119fa0 	.word	0x00119fa0
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
  119f70:	e3a03038 	mov	r3, #56	; 0x38
  119f74:	e14b30be 	strh	r3, [fp, #-14]
    break;
  119f78:	ea000014 	b	119fd0 <pbuf_alloc+0xa0>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
  119f7c:	e3a03024 	mov	r3, #36	; 0x24
  119f80:	e14b30be 	strh	r3, [fp, #-14]
    break;
  119f84:	ea000011 	b	119fd0 <pbuf_alloc+0xa0>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
  119f88:	e3a03010 	mov	r3, #16
  119f8c:	e14b30be 	strh	r3, [fp, #-14]
    break;
  119f90:	ea00000e 	b	119fd0 <pbuf_alloc+0xa0>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
  119f94:	e3a03000 	mov	r3, #0
  119f98:	e14b30be 	strh	r3, [fp, #-14]
    break;
  119f9c:	ea00000b 	b	119fd0 <pbuf_alloc+0xa0>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
  119fa0:	e3a03000 	mov	r3, #0
  119fa4:	e14b30be 	strh	r3, [fp, #-14]
    break;
  119fa8:	ea000008 	b	119fd0 <pbuf_alloc+0xa0>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
  119fac:	e3060b60 	movw	r0, #27488	; 0x6b60
  119fb0:	e3400014 	movt	r0, #20
  119fb4:	ebffa456 	bl	103114 <rt_kprintf>
  119fb8:	e3001117 	movw	r1, #279	; 0x117
  119fbc:	e3060b7c 	movw	r0, #27516	; 0x6b7c
  119fc0:	e3400014 	movt	r0, #20
  119fc4:	ebffc2d2 	bl	10ab14 <sys_arch_assert>
    return NULL;
  119fc8:	e3a03000 	mov	r3, #0
  119fcc:	ea000139 	b	11a4b8 <pbuf_alloc+0x588>
  }

  switch (type) {
  119fd0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  119fd4:	e3530003 	cmp	r3, #3
  119fd8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  119fdc:	ea000124 	b	11a474 <pbuf_alloc+0x544>
  119fe0:	0011a2fc 	.word	0x0011a2fc
  119fe4:	0011a400 	.word	0x0011a400
  119fe8:	0011a400 	.word	0x0011a400
  119fec:	00119ff0 	.word	0x00119ff0
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
  119ff0:	e300211e 	movw	r2, #286	; 0x11e
  119ff4:	e3061b7c 	movw	r1, #27516	; 0x6b7c
  119ff8:	e3401014 	movt	r1, #20
  119ffc:	e3a00010 	mov	r0, #16
  11a000:	ebfffb5b 	bl	118d74 <memp_malloc_fn>
  11a004:	e50b0008 	str	r0, [fp, #-8]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
  11a008:	e51b3008 	ldr	r3, [fp, #-8]
  11a00c:	e3530000 	cmp	r3, #0
  11a010:	1a000002 	bne	11a020 <pbuf_alloc+0xf0>
      PBUF_POOL_IS_EMPTY();
  11a014:	ebffffa4 	bl	119eac <pbuf_pool_is_empty>
      return NULL;
  11a018:	e3a03000 	mov	r3, #0
  11a01c:	ea000125 	b	11a4b8 <pbuf_alloc+0x588>
    }
    p->type = type;
  11a020:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11a024:	e6ef2073 	uxtb	r2, r3
  11a028:	e51b3008 	ldr	r3, [fp, #-8]
  11a02c:	e5c3200c 	strb	r2, [r3, #12]
    p->next = NULL;
  11a030:	e51b3008 	ldr	r3, [fp, #-8]
  11a034:	e3a02000 	mov	r2, #0
  11a038:	e5832000 	str	r2, [r3]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
  11a03c:	e15b30be 	ldrh	r3, [fp, #-14]
  11a040:	e2833010 	add	r3, r3, #16
  11a044:	e51b2008 	ldr	r2, [fp, #-8]
  11a048:	e0823003 	add	r3, r2, r3
  11a04c:	e2833003 	add	r3, r3, #3
  11a050:	e3c33003 	bic	r3, r3, #3
  11a054:	e1a02003 	mov	r2, r3
  11a058:	e51b3008 	ldr	r3, [fp, #-8]
  11a05c:	e5832004 	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
  11a060:	e51b3008 	ldr	r3, [fp, #-8]
  11a064:	e5933004 	ldr	r3, [r3, #4]
  11a068:	e2033003 	and	r3, r3, #3
  11a06c:	e3530000 	cmp	r3, #0
  11a070:	0a000006 	beq	11a090 <pbuf_alloc+0x160>
  11a074:	e3060ba8 	movw	r0, #27560	; 0x6ba8
  11a078:	e3400014 	movt	r0, #20
  11a07c:	ebffa424 	bl	103114 <rt_kprintf>
  11a080:	e300112a 	movw	r1, #298	; 0x12a
  11a084:	e3060b7c 	movw	r0, #27516	; 0x6b7c
  11a088:	e3400014 	movt	r0, #20
  11a08c:	ebffc2a0 	bl	10ab14 <sys_arch_assert>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
  11a090:	e51b3008 	ldr	r3, [fp, #-8]
  11a094:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  11a098:	e1c320b8 	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
  11a09c:	e15b30be 	ldrh	r3, [fp, #-14]
  11a0a0:	e2833003 	add	r3, r3, #3
  11a0a4:	e3c33003 	bic	r3, r3, #3
  11a0a8:	e2633e5e 	rsb	r3, r3, #1504	; 0x5e0
  11a0ac:	e283300c 	add	r3, r3, #12
  11a0b0:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  11a0b4:	e1530002 	cmp	r3, r2
  11a0b8:	31a03003 	movcc	r3, r3
  11a0bc:	21a03002 	movcs	r3, r2
  11a0c0:	e6ff2073 	uxth	r2, r3
  11a0c4:	e51b3008 	ldr	r3, [fp, #-8]
  11a0c8:	e1c320ba 	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
  11a0cc:	e51b3008 	ldr	r3, [fp, #-8]
  11a0d0:	e5933004 	ldr	r3, [r3, #4]
  11a0d4:	e51b2008 	ldr	r2, [fp, #-8]
  11a0d8:	e1d220ba 	ldrh	r2, [r2, #10]
  11a0dc:	e0832002 	add	r2, r3, r2
  11a0e0:	e51b3008 	ldr	r3, [fp, #-8]
  11a0e4:	e2833e5f 	add	r3, r3, #1520	; 0x5f0
  11a0e8:	e283300c 	add	r3, r3, #12
  11a0ec:	e1520003 	cmp	r2, r3
  11a0f0:	9a000006 	bls	11a110 <pbuf_alloc+0x1e0>
  11a0f4:	e3060bd8 	movw	r0, #27608	; 0x6bd8
  11a0f8:	e3400014 	movt	r0, #20
  11a0fc:	ebffa404 	bl	103114 <rt_kprintf>
  11a100:	e3001131 	movw	r1, #305	; 0x131
  11a104:	e3060b7c 	movw	r0, #27516	; 0x6b7c
  11a108:	e3400014 	movt	r0, #20
  11a10c:	ebffc280 	bl	10ab14 <sys_arch_assert>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
  11a110:	e15b30be 	ldrh	r3, [fp, #-14]
  11a114:	e2833003 	add	r3, r3, #3
  11a118:	e3c33003 	bic	r3, r3, #3
  11a11c:	e30025ec 	movw	r2, #1516	; 0x5ec
  11a120:	e1530002 	cmp	r3, r2
  11a124:	1a000006 	bne	11a144 <pbuf_alloc+0x214>
  11a128:	e3060c0c 	movw	r0, #27660	; 0x6c0c
  11a12c:	e3400014 	movt	r0, #20
  11a130:	ebffa3f7 	bl	103114 <rt_kprintf>
  11a134:	e3001133 	movw	r1, #307	; 0x133
  11a138:	e3060b7c 	movw	r0, #27516	; 0x6b7c
  11a13c:	e3400014 	movt	r0, #20
  11a140:	ebffc273 	bl	10ab14 <sys_arch_assert>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
  11a144:	e51b3008 	ldr	r3, [fp, #-8]
  11a148:	e3a02001 	mov	r2, #1
  11a14c:	e1c320be 	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
  11a150:	e51b3008 	ldr	r3, [fp, #-8]
  11a154:	e50b300c 	str	r3, [fp, #-12]
    /* remaining length to be allocated */
    rem_len = length - p->len;
  11a158:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  11a15c:	e51b2008 	ldr	r2, [fp, #-8]
  11a160:	e1d220ba 	ldrh	r2, [r2, #10]
  11a164:	e0433002 	sub	r3, r3, r2
  11a168:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
  11a16c:	ea00005e 	b	11a2ec <pbuf_alloc+0x3bc>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
  11a170:	e300213f 	movw	r2, #319	; 0x13f
  11a174:	e3061b7c 	movw	r1, #27516	; 0x6b7c
  11a178:	e3401014 	movt	r1, #20
  11a17c:	e3a00010 	mov	r0, #16
  11a180:	ebfffafb 	bl	118d74 <memp_malloc_fn>
  11a184:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
      if (q == NULL) {
  11a188:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a18c:	e3530000 	cmp	r3, #0
  11a190:	1a000004 	bne	11a1a8 <pbuf_alloc+0x278>
        PBUF_POOL_IS_EMPTY();
  11a194:	ebffff44 	bl	119eac <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
  11a198:	e51b0008 	ldr	r0, [fp, #-8]
  11a19c:	eb00026a 	bl	11ab4c <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
  11a1a0:	e3a03000 	mov	r3, #0
  11a1a4:	ea0000c3 	b	11a4b8 <pbuf_alloc+0x588>
      }
      q->type = type;
  11a1a8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11a1ac:	e6ef2073 	uxtb	r2, r3
  11a1b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a1b4:	e5c3200c 	strb	r2, [r3, #12]
      q->flags = 0;
  11a1b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a1bc:	e3a02000 	mov	r2, #0
  11a1c0:	e5c3200d 	strb	r2, [r3, #13]
      q->next = NULL;
  11a1c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a1c8:	e3a02000 	mov	r2, #0
  11a1cc:	e5832000 	str	r2, [r3]
      /* make previous pbuf point to this pbuf */
      r->next = q;
  11a1d0:	e51b300c 	ldr	r3, [fp, #-12]
  11a1d4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11a1d8:	e5832000 	str	r2, [r3]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
  11a1dc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11a1e0:	e30f2ffe 	movw	r2, #65534	; 0xfffe
  11a1e4:	e1530002 	cmp	r3, r2
  11a1e8:	da000006 	ble	11a208 <pbuf_alloc+0x2d8>
  11a1ec:	e3060c40 	movw	r0, #27712	; 0x6c40
  11a1f0:	e3400014 	movt	r0, #20
  11a1f4:	ebffa3c6 	bl	103114 <rt_kprintf>
  11a1f8:	e300114d 	movw	r1, #333	; 0x14d
  11a1fc:	e3060b7c 	movw	r0, #27516	; 0x6b7c
  11a200:	e3400014 	movt	r0, #20
  11a204:	ebffc242 	bl	10ab14 <sys_arch_assert>
      q->tot_len = (u16_t)rem_len;
  11a208:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11a20c:	e6ff2073 	uxth	r2, r3
  11a210:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a214:	e1c320b8 	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
  11a218:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11a21c:	e6ff3073 	uxth	r3, r3
  11a220:	e30025ec 	movw	r2, #1516	; 0x5ec
  11a224:	e1530002 	cmp	r3, r2
  11a228:	31a03003 	movcc	r3, r3
  11a22c:	21a03002 	movcs	r3, r2
  11a230:	e6ff2073 	uxth	r2, r3
  11a234:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a238:	e1c320ba 	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
  11a23c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a240:	e2832010 	add	r2, r3, #16
  11a244:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a248:	e5832004 	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
  11a24c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a250:	e5933004 	ldr	r3, [r3, #4]
  11a254:	e2033003 	and	r3, r3, #3
  11a258:	e3530000 	cmp	r3, #0
  11a25c:	0a000006 	beq	11a27c <pbuf_alloc+0x34c>
  11a260:	e3060c54 	movw	r0, #27732	; 0x6c54
  11a264:	e3400014 	movt	r0, #20
  11a268:	ebffa3a9 	bl	103114 <rt_kprintf>
  11a26c:	e3001153 	movw	r1, #339	; 0x153
  11a270:	e3060b7c 	movw	r0, #27516	; 0x6b7c
  11a274:	e3400014 	movt	r0, #20
  11a278:	ebffc225 	bl	10ab14 <sys_arch_assert>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
  11a27c:	e51b3008 	ldr	r3, [fp, #-8]
  11a280:	e5933004 	ldr	r3, [r3, #4]
  11a284:	e51b2008 	ldr	r2, [fp, #-8]
  11a288:	e1d220ba 	ldrh	r2, [r2, #10]
  11a28c:	e0832002 	add	r2, r3, r2
  11a290:	e51b3008 	ldr	r3, [fp, #-8]
  11a294:	e2833e5f 	add	r3, r3, #1520	; 0x5f0
  11a298:	e283300c 	add	r3, r3, #12
  11a29c:	e1520003 	cmp	r2, r3
  11a2a0:	9a000006 	bls	11a2c0 <pbuf_alloc+0x390>
  11a2a4:	e3060bd8 	movw	r0, #27608	; 0x6bd8
  11a2a8:	e3400014 	movt	r0, #20
  11a2ac:	ebffa398 	bl	103114 <rt_kprintf>
  11a2b0:	e3001156 	movw	r1, #342	; 0x156
  11a2b4:	e3060b7c 	movw	r0, #27516	; 0x6b7c
  11a2b8:	e3400014 	movt	r0, #20
  11a2bc:	ebffc214 	bl	10ab14 <sys_arch_assert>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
  11a2c0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a2c4:	e3a02001 	mov	r2, #1
  11a2c8:	e1c320be 	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
  11a2cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a2d0:	e1d330ba 	ldrh	r3, [r3, #10]
  11a2d4:	e1a02003 	mov	r2, r3
  11a2d8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11a2dc:	e0433002 	sub	r3, r3, r2
  11a2e0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      /* remember this pbuf for linkage in next iteration */
      r = q;
  11a2e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a2e8:	e50b300c 	str	r3, [fp, #-12]
    while (rem_len > 0) {
  11a2ec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11a2f0:	e3530000 	cmp	r3, #0
  11a2f4:	caffff9d 	bgt	11a170 <pbuf_alloc+0x240>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
  11a2f8:	ea000067 	b	11a49c <pbuf_alloc+0x56c>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
  11a2fc:	e15b30be 	ldrh	r3, [fp, #-14]
  11a300:	e2833013 	add	r3, r3, #19
  11a304:	e6ff3073 	uxth	r3, r3
  11a308:	e3c33003 	bic	r3, r3, #3
  11a30c:	e6ff2073 	uxth	r2, r3
  11a310:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  11a314:	e2833003 	add	r3, r3, #3
  11a318:	e6ff3073 	uxth	r3, r3
  11a31c:	e3c33003 	bic	r3, r3, #3
  11a320:	e6ff3073 	uxth	r3, r3
  11a324:	e0823003 	add	r3, r2, r3
  11a328:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
  11a32c:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
  11a330:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  11a334:	e2833003 	add	r3, r3, #3
  11a338:	e3c33003 	bic	r3, r3, #3
  11a33c:	e1520003 	cmp	r2, r3
  11a340:	2a000001 	bcs	11a34c <pbuf_alloc+0x41c>
        return NULL;
  11a344:	e3a03000 	mov	r3, #0
  11a348:	ea00005a 	b	11a4b8 <pbuf_alloc+0x588>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
  11a34c:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  11a350:	e1a00003 	mov	r0, r3
  11a354:	ebffc22f 	bl	10ac18 <mem_malloc>
  11a358:	e50b0008 	str	r0, [fp, #-8]
    }

    if (p == NULL) {
  11a35c:	e51b3008 	ldr	r3, [fp, #-8]
  11a360:	e3530000 	cmp	r3, #0
  11a364:	1a000001 	bne	11a370 <pbuf_alloc+0x440>
      return NULL;
  11a368:	e3a03000 	mov	r3, #0
  11a36c:	ea000051 	b	11a4b8 <pbuf_alloc+0x588>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
  11a370:	e15b30be 	ldrh	r3, [fp, #-14]
  11a374:	e2833010 	add	r3, r3, #16
  11a378:	e51b2008 	ldr	r2, [fp, #-8]
  11a37c:	e0823003 	add	r3, r2, r3
  11a380:	e2833003 	add	r3, r3, #3
  11a384:	e3c33003 	bic	r3, r3, #3
  11a388:	e1a02003 	mov	r2, r3
  11a38c:	e51b3008 	ldr	r3, [fp, #-8]
  11a390:	e5832004 	str	r2, [r3, #4]
    p->len = p->tot_len = length;
  11a394:	e51b3008 	ldr	r3, [fp, #-8]
  11a398:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  11a39c:	e1c320b8 	strh	r2, [r3, #8]
  11a3a0:	e51b3008 	ldr	r3, [fp, #-8]
  11a3a4:	e1d320b8 	ldrh	r2, [r3, #8]
  11a3a8:	e51b3008 	ldr	r3, [fp, #-8]
  11a3ac:	e1c320ba 	strh	r2, [r3, #10]
    p->next = NULL;
  11a3b0:	e51b3008 	ldr	r3, [fp, #-8]
  11a3b4:	e3a02000 	mov	r2, #0
  11a3b8:	e5832000 	str	r2, [r3]
    p->type = type;
  11a3bc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11a3c0:	e6ef2073 	uxtb	r2, r3
  11a3c4:	e51b3008 	ldr	r3, [fp, #-8]
  11a3c8:	e5c3200c 	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
  11a3cc:	e51b3008 	ldr	r3, [fp, #-8]
  11a3d0:	e5933004 	ldr	r3, [r3, #4]
  11a3d4:	e2033003 	and	r3, r3, #3
  11a3d8:	e3530000 	cmp	r3, #0
  11a3dc:	0a00002d 	beq	11a498 <pbuf_alloc+0x568>
  11a3e0:	e3060c84 	movw	r0, #27780	; 0x6c84
  11a3e4:	e3400014 	movt	r0, #20
  11a3e8:	ebffa349 	bl	103114 <rt_kprintf>
  11a3ec:	e3a01f5e 	mov	r1, #376	; 0x178
  11a3f0:	e3060b7c 	movw	r0, #27516	; 0x6b7c
  11a3f4:	e3400014 	movt	r0, #20
  11a3f8:	ebffc1c5 	bl	10ab14 <sys_arch_assert>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
  11a3fc:	ea000025 	b	11a498 <pbuf_alloc+0x568>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
  11a400:	e300217f 	movw	r2, #383	; 0x17f
  11a404:	e3061b7c 	movw	r1, #27516	; 0x6b7c
  11a408:	e3401014 	movt	r1, #20
  11a40c:	e3a0000f 	mov	r0, #15
  11a410:	ebfffa57 	bl	118d74 <memp_malloc_fn>
  11a414:	e50b0008 	str	r0, [fp, #-8]
    if (p == NULL) {
  11a418:	e51b3008 	ldr	r3, [fp, #-8]
  11a41c:	e3530000 	cmp	r3, #0
  11a420:	1a000001 	bne	11a42c <pbuf_alloc+0x4fc>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
  11a424:	e3a03000 	mov	r3, #0
  11a428:	ea000022 	b	11a4b8 <pbuf_alloc+0x588>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
  11a42c:	e51b3008 	ldr	r3, [fp, #-8]
  11a430:	e3a02000 	mov	r2, #0
  11a434:	e5832004 	str	r2, [r3, #4]
    p->len = p->tot_len = length;
  11a438:	e51b3008 	ldr	r3, [fp, #-8]
  11a43c:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  11a440:	e1c320b8 	strh	r2, [r3, #8]
  11a444:	e51b3008 	ldr	r3, [fp, #-8]
  11a448:	e1d320b8 	ldrh	r2, [r3, #8]
  11a44c:	e51b3008 	ldr	r3, [fp, #-8]
  11a450:	e1c320ba 	strh	r2, [r3, #10]
    p->next = NULL;
  11a454:	e51b3008 	ldr	r3, [fp, #-8]
  11a458:	e3a02000 	mov	r2, #0
  11a45c:	e5832000 	str	r2, [r3]
    p->type = type;
  11a460:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11a464:	e6ef2073 	uxtb	r2, r3
  11a468:	e51b3008 	ldr	r3, [fp, #-8]
  11a46c:	e5c3200c 	strb	r2, [r3, #12]
    break;
  11a470:	ea000009 	b	11a49c <pbuf_alloc+0x56c>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
  11a474:	e3060cb0 	movw	r0, #27824	; 0x6cb0
  11a478:	e3400014 	movt	r0, #20
  11a47c:	ebffa324 	bl	103114 <rt_kprintf>
  11a480:	e300118d 	movw	r1, #397	; 0x18d
  11a484:	e3060b7c 	movw	r0, #27516	; 0x6b7c
  11a488:	e3400014 	movt	r0, #20
  11a48c:	ebffc1a0 	bl	10ab14 <sys_arch_assert>
    return NULL;
  11a490:	e3a03000 	mov	r3, #0
  11a494:	ea000007 	b	11a4b8 <pbuf_alloc+0x588>
    break;
  11a498:	e320f000 	nop	{0}
  }
  /* set reference count */
  p->ref = 1;
  11a49c:	e51b3008 	ldr	r3, [fp, #-8]
  11a4a0:	e3a02001 	mov	r2, #1
  11a4a4:	e1c320be 	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
  11a4a8:	e51b3008 	ldr	r3, [fp, #-8]
  11a4ac:	e3a02000 	mov	r2, #0
  11a4b0:	e5c3200d 	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
  11a4b4:	e51b3008 	ldr	r3, [fp, #-8]
}
  11a4b8:	e1a00003 	mov	r0, r3
  11a4bc:	e24bd004 	sub	sp, fp, #4
  11a4c0:	e8bd8800 	pop	{fp, pc}

0011a4c4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
  11a4c4:	e92d4800 	push	{fp, lr}
  11a4c8:	e28db004 	add	fp, sp, #4
  11a4cc:	e24dd018 	sub	sp, sp, #24
  11a4d0:	e50b0010 	str	r0, [fp, #-16]
  11a4d4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  11a4d8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  11a4dc:	e1a03001 	mov	r3, r1
  11a4e0:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
  11a4e4:	e51b3010 	ldr	r3, [fp, #-16]
  11a4e8:	e3530004 	cmp	r3, #4
  11a4ec:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  11a4f0:	ea000013 	b	11a544 <pbuf_alloced_custom+0x80>
  11a4f4:	0011a508 	.word	0x0011a508
  11a4f8:	0011a514 	.word	0x0011a514
  11a4fc:	0011a520 	.word	0x0011a520
  11a500:	0011a52c 	.word	0x0011a52c
  11a504:	0011a538 	.word	0x0011a538
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
  11a508:	e3a03038 	mov	r3, #56	; 0x38
  11a50c:	e14b30b6 	strh	r3, [fp, #-6]
    break;
  11a510:	ea000014 	b	11a568 <pbuf_alloced_custom+0xa4>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
  11a514:	e3a03024 	mov	r3, #36	; 0x24
  11a518:	e14b30b6 	strh	r3, [fp, #-6]
    break;
  11a51c:	ea000011 	b	11a568 <pbuf_alloced_custom+0xa4>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
  11a520:	e3a03010 	mov	r3, #16
  11a524:	e14b30b6 	strh	r3, [fp, #-6]
    break;
  11a528:	ea00000e 	b	11a568 <pbuf_alloced_custom+0xa4>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
  11a52c:	e3a03000 	mov	r3, #0
  11a530:	e14b30b6 	strh	r3, [fp, #-6]
    break;
  11a534:	ea00000b 	b	11a568 <pbuf_alloced_custom+0xa4>
  case PBUF_RAW:
    offset = 0;
  11a538:	e3a03000 	mov	r3, #0
  11a53c:	e14b30b6 	strh	r3, [fp, #-6]
    break;
  11a540:	ea000008 	b	11a568 <pbuf_alloced_custom+0xa4>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
  11a544:	e3060ccc 	movw	r0, #27852	; 0x6ccc
  11a548:	e3400014 	movt	r0, #20
  11a54c:	ebffa2f0 	bl	103114 <rt_kprintf>
  11a550:	e30011c6 	movw	r1, #454	; 0x1c6
  11a554:	e3060b7c 	movw	r0, #27516	; 0x6b7c
  11a558:	e3400014 	movt	r0, #20
  11a55c:	ebffc16c 	bl	10ab14 <sys_arch_assert>
    return NULL;
  11a560:	e3a03000 	mov	r3, #0
  11a564:	ea00002c 	b	11a61c <pbuf_alloced_custom+0x158>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
  11a568:	e15b30b6 	ldrh	r3, [fp, #-6]
  11a56c:	e2833003 	add	r3, r3, #3
  11a570:	e3c32003 	bic	r2, r3, #3
  11a574:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11a578:	e0822003 	add	r2, r2, r3
  11a57c:	e1db30b8 	ldrh	r3, [fp, #8]
  11a580:	e1520003 	cmp	r2, r3
  11a584:	9a000001 	bls	11a590 <pbuf_alloced_custom+0xcc>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
  11a588:	e3a03000 	mov	r3, #0
  11a58c:	ea000022 	b	11a61c <pbuf_alloced_custom+0x158>
  }

  p->pbuf.next = NULL;
  11a590:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a594:	e3a02000 	mov	r2, #0
  11a598:	e5832000 	str	r2, [r3]
  if (payload_mem != NULL) {
  11a59c:	e59b3004 	ldr	r3, [fp, #4]
  11a5a0:	e3530000 	cmp	r3, #0
  11a5a4:	0a000007 	beq	11a5c8 <pbuf_alloced_custom+0x104>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
  11a5a8:	e15b30b6 	ldrh	r3, [fp, #-6]
  11a5ac:	e2833003 	add	r3, r3, #3
  11a5b0:	e3c33003 	bic	r3, r3, #3
  11a5b4:	e59b2004 	ldr	r2, [fp, #4]
  11a5b8:	e0822003 	add	r2, r2, r3
  11a5bc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a5c0:	e5832004 	str	r2, [r3, #4]
  11a5c4:	ea000002 	b	11a5d4 <pbuf_alloced_custom+0x110>
  } else {
    p->pbuf.payload = NULL;
  11a5c8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a5cc:	e3a02000 	mov	r2, #0
  11a5d0:	e5832004 	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
  11a5d4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a5d8:	e3a02002 	mov	r2, #2
  11a5dc:	e5c3200d 	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
  11a5e0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a5e4:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  11a5e8:	e1c320b8 	strh	r2, [r3, #8]
  11a5ec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a5f0:	e1d320b8 	ldrh	r2, [r3, #8]
  11a5f4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a5f8:	e1c320ba 	strh	r2, [r3, #10]
  p->pbuf.type = type;
  11a5fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a600:	e6ef2073 	uxtb	r2, r3
  11a604:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a608:	e5c3200c 	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
  11a60c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a610:	e3a02001 	mov	r2, #1
  11a614:	e1c320be 	strh	r2, [r3, #14]
  return &p->pbuf;
  11a618:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
}
  11a61c:	e1a00003 	mov	r0, r3
  11a620:	e24bd004 	sub	sp, fp, #4
  11a624:	e8bd8800 	pop	{fp, pc}

0011a628 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
  11a628:	e92d4800 	push	{fp, lr}
  11a62c:	e28db004 	add	fp, sp, #4
  11a630:	e24dd018 	sub	sp, sp, #24
  11a634:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11a638:	e1a03001 	mov	r3, r1
  11a63c:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
  11a640:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a644:	e3530000 	cmp	r3, #0
  11a648:	1a000006 	bne	11a668 <pbuf_realloc+0x40>
  11a64c:	e3060cf0 	movw	r0, #27888	; 0x6cf0
  11a650:	e3400014 	movt	r0, #20
  11a654:	ebffa2ae 	bl	103114 <rt_kprintf>
  11a658:	e3a01f7d 	mov	r1, #500	; 0x1f4
  11a65c:	e3060b7c 	movw	r0, #27516	; 0x6b7c
  11a660:	e3400014 	movt	r0, #20
  11a664:	ebffc12a 	bl	10ab14 <sys_arch_assert>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
  11a668:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a66c:	e5d3300c 	ldrb	r3, [r3, #12]
  11a670:	e3530003 	cmp	r3, #3
  11a674:	0a000012 	beq	11a6c4 <pbuf_realloc+0x9c>
  11a678:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a67c:	e5d3300c 	ldrb	r3, [r3, #12]
  11a680:	e3530001 	cmp	r3, #1
  11a684:	0a00000e 	beq	11a6c4 <pbuf_realloc+0x9c>
  11a688:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a68c:	e5d3300c 	ldrb	r3, [r3, #12]
  11a690:	e3530000 	cmp	r3, #0
  11a694:	0a00000a 	beq	11a6c4 <pbuf_realloc+0x9c>
  11a698:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a69c:	e5d3300c 	ldrb	r3, [r3, #12]
  11a6a0:	e3530002 	cmp	r3, #2
  11a6a4:	0a000006 	beq	11a6c4 <pbuf_realloc+0x9c>
  11a6a8:	e3060d08 	movw	r0, #27912	; 0x6d08
  11a6ac:	e3400014 	movt	r0, #20
  11a6b0:	ebffa297 	bl	103114 <rt_kprintf>
  11a6b4:	e3a01f7e 	mov	r1, #504	; 0x1f8
  11a6b8:	e3060b7c 	movw	r0, #27516	; 0x6b7c
  11a6bc:	e3400014 	movt	r0, #20
  11a6c0:	ebffc113 	bl	10ab14 <sys_arch_assert>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
  11a6c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a6c8:	e1d330b8 	ldrh	r3, [r3, #8]
  11a6cc:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
  11a6d0:	e1520003 	cmp	r2, r3
  11a6d4:	2a00006b 	bcs	11a888 <pbuf_realloc+0x260>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
  11a6d8:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  11a6dc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11a6e0:	e1d220b8 	ldrh	r2, [r2, #8]
  11a6e4:	e0433002 	sub	r3, r3, r2
  11a6e8:	e50b3010 	str	r3, [fp, #-16]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
  11a6ec:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  11a6f0:	e14b30ba 	strh	r3, [fp, #-10]
  q = p;
  11a6f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a6f8:	e50b3008 	str	r3, [fp, #-8]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
  11a6fc:	ea000024 	b	11a794 <pbuf_realloc+0x16c>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
  11a700:	e51b3008 	ldr	r3, [fp, #-8]
  11a704:	e1d330ba 	ldrh	r3, [r3, #10]
  11a708:	e15b20ba 	ldrh	r2, [fp, #-10]
  11a70c:	e0423003 	sub	r3, r2, r3
  11a710:	e14b30ba 	strh	r3, [fp, #-10]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
  11a714:	e51b3010 	ldr	r3, [fp, #-16]
  11a718:	e30f2ffe 	movw	r2, #65534	; 0xfffe
  11a71c:	e1530002 	cmp	r3, r2
  11a720:	da000006 	ble	11a740 <pbuf_realloc+0x118>
  11a724:	e3060d24 	movw	r0, #27940	; 0x6d24
  11a728:	e3400014 	movt	r0, #20
  11a72c:	ebffa278 	bl	103114 <rt_kprintf>
  11a730:	e3a01f83 	mov	r1, #524	; 0x20c
  11a734:	e3060b7c 	movw	r0, #27516	; 0x6b7c
  11a738:	e3400014 	movt	r0, #20
  11a73c:	ebffc0f4 	bl	10ab14 <sys_arch_assert>
    q->tot_len += (u16_t)grow;
  11a740:	e51b3008 	ldr	r3, [fp, #-8]
  11a744:	e1d320b8 	ldrh	r2, [r3, #8]
  11a748:	e51b3010 	ldr	r3, [fp, #-16]
  11a74c:	e6ff3073 	uxth	r3, r3
  11a750:	e0823003 	add	r3, r2, r3
  11a754:	e6ff2073 	uxth	r2, r3
  11a758:	e51b3008 	ldr	r3, [fp, #-8]
  11a75c:	e1c320b8 	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
  11a760:	e51b3008 	ldr	r3, [fp, #-8]
  11a764:	e5933000 	ldr	r3, [r3]
  11a768:	e50b3008 	str	r3, [fp, #-8]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
  11a76c:	e51b3008 	ldr	r3, [fp, #-8]
  11a770:	e3530000 	cmp	r3, #0
  11a774:	1a000006 	bne	11a794 <pbuf_realloc+0x16c>
  11a778:	e3060d38 	movw	r0, #27960	; 0x6d38
  11a77c:	e3400014 	movt	r0, #20
  11a780:	ebffa263 	bl	103114 <rt_kprintf>
  11a784:	e3a01e21 	mov	r1, #528	; 0x210
  11a788:	e3060b7c 	movw	r0, #27516	; 0x6b7c
  11a78c:	e3400014 	movt	r0, #20
  11a790:	ebffc0df 	bl	10ab14 <sys_arch_assert>
  while (rem_len > q->len) {
  11a794:	e51b3008 	ldr	r3, [fp, #-8]
  11a798:	e1d330ba 	ldrh	r3, [r3, #10]
  11a79c:	e15b20ba 	ldrh	r2, [fp, #-10]
  11a7a0:	e1520003 	cmp	r2, r3
  11a7a4:	8affffd5 	bhi	11a700 <pbuf_realloc+0xd8>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
  11a7a8:	e51b3008 	ldr	r3, [fp, #-8]
  11a7ac:	e5d3300c 	ldrb	r3, [r3, #12]
  11a7b0:	e3530000 	cmp	r3, #0
  11a7b4:	1a000020 	bne	11a83c <pbuf_realloc+0x214>
  11a7b8:	e51b3008 	ldr	r3, [fp, #-8]
  11a7bc:	e1d330ba 	ldrh	r3, [r3, #10]
  11a7c0:	e15b20ba 	ldrh	r2, [fp, #-10]
  11a7c4:	e1520003 	cmp	r2, r3
  11a7c8:	0a00001b 	beq	11a83c <pbuf_realloc+0x214>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
  11a7cc:	e51b3008 	ldr	r3, [fp, #-8]
  11a7d0:	e5d3300d 	ldrb	r3, [r3, #13]
  11a7d4:	e2033002 	and	r3, r3, #2
  11a7d8:	e3530000 	cmp	r3, #0
  11a7dc:	1a000016 	bne	11a83c <pbuf_realloc+0x214>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
  11a7e0:	e51b3008 	ldr	r3, [fp, #-8]
  11a7e4:	e5933004 	ldr	r3, [r3, #4]
  11a7e8:	e1a02003 	mov	r2, r3
  11a7ec:	e51b3008 	ldr	r3, [fp, #-8]
  11a7f0:	e0423003 	sub	r3, r2, r3
  11a7f4:	e6ff2073 	uxth	r2, r3
  11a7f8:	e15b30ba 	ldrh	r3, [fp, #-10]
  11a7fc:	e0823003 	add	r3, r2, r3
  11a800:	e6ff3073 	uxth	r3, r3
  11a804:	e1a01003 	mov	r1, r3
  11a808:	e51b0008 	ldr	r0, [fp, #-8]
  11a80c:	ebffc0f6 	bl	10abec <mem_trim>
  11a810:	e50b0008 	str	r0, [fp, #-8]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
  11a814:	e51b3008 	ldr	r3, [fp, #-8]
  11a818:	e3530000 	cmp	r3, #0
  11a81c:	1a000006 	bne	11a83c <pbuf_realloc+0x214>
  11a820:	e3060d50 	movw	r0, #27984	; 0x6d50
  11a824:	e3400014 	movt	r0, #20
  11a828:	ebffa239 	bl	103114 <rt_kprintf>
  11a82c:	e300121e 	movw	r1, #542	; 0x21e
  11a830:	e3060b7c 	movw	r0, #27516	; 0x6b7c
  11a834:	e3400014 	movt	r0, #20
  11a838:	ebffc0b5 	bl	10ab14 <sys_arch_assert>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
  11a83c:	e51b3008 	ldr	r3, [fp, #-8]
  11a840:	e15b20ba 	ldrh	r2, [fp, #-10]
  11a844:	e1c320ba 	strh	r2, [r3, #10]
  q->tot_len = q->len;
  11a848:	e51b3008 	ldr	r3, [fp, #-8]
  11a84c:	e1d320ba 	ldrh	r2, [r3, #10]
  11a850:	e51b3008 	ldr	r3, [fp, #-8]
  11a854:	e1c320b8 	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
  11a858:	e51b3008 	ldr	r3, [fp, #-8]
  11a85c:	e5933000 	ldr	r3, [r3]
  11a860:	e3530000 	cmp	r3, #0
  11a864:	0a000003 	beq	11a878 <pbuf_realloc+0x250>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
  11a868:	e51b3008 	ldr	r3, [fp, #-8]
  11a86c:	e5933000 	ldr	r3, [r3]
  11a870:	e1a00003 	mov	r0, r3
  11a874:	eb0000b4 	bl	11ab4c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
  11a878:	e51b3008 	ldr	r3, [fp, #-8]
  11a87c:	e3a02000 	mov	r2, #0
  11a880:	e5832000 	str	r2, [r3]
  11a884:	ea000000 	b	11a88c <pbuf_realloc+0x264>
    return;
  11a888:	e320f000 	nop	{0}

}
  11a88c:	e24bd004 	sub	sp, fp, #4
  11a890:	e8bd8800 	pop	{fp, pc}

0011a894 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
  11a894:	e92d4800 	push	{fp, lr}
  11a898:	e28db004 	add	fp, sp, #4
  11a89c:	e24dd010 	sub	sp, sp, #16
  11a8a0:	e50b0010 	str	r0, [fp, #-16]
  11a8a4:	e1a03001 	mov	r3, r1
  11a8a8:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  11a8ac:	e1a03002 	mov	r3, r2
  11a8b0:	e54b3013 	strb	r3, [fp, #-19]	; 0xffffffed
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
  11a8b4:	e51b3010 	ldr	r3, [fp, #-16]
  11a8b8:	e3530000 	cmp	r3, #0
  11a8bc:	1a000006 	bne	11a8dc <pbuf_header_impl+0x48>
  11a8c0:	e3060d6c 	movw	r0, #28012	; 0x6d6c
  11a8c4:	e3400014 	movt	r0, #20
  11a8c8:	ebffa211 	bl	103114 <rt_kprintf>
  11a8cc:	e3a01d09 	mov	r1, #576	; 0x240
  11a8d0:	e3060b7c 	movw	r0, #27516	; 0x6b7c
  11a8d4:	e3400014 	movt	r0, #20
  11a8d8:	ebffc08d 	bl	10ab14 <sys_arch_assert>
  if ((header_size_increment == 0) || (p == NULL)) {
  11a8dc:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  11a8e0:	e3530000 	cmp	r3, #0
  11a8e4:	0a000002 	beq	11a8f4 <pbuf_header_impl+0x60>
  11a8e8:	e51b3010 	ldr	r3, [fp, #-16]
  11a8ec:	e3530000 	cmp	r3, #0
  11a8f0:	1a000001 	bne	11a8fc <pbuf_header_impl+0x68>
    return 0;
  11a8f4:	e3a03000 	mov	r3, #0
  11a8f8:	ea000072 	b	11aac8 <pbuf_header_impl+0x234>
  }

  if (header_size_increment < 0) {
  11a8fc:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  11a900:	e3530000 	cmp	r3, #0
  11a904:	aa000010 	bge	11a94c <pbuf_header_impl+0xb8>
    increment_magnitude = (u16_t)-header_size_increment;
  11a908:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11a90c:	e2633000 	rsb	r3, r3, #0
  11a910:	e14b30b6 	strh	r3, [fp, #-6]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
  11a914:	e51b3010 	ldr	r3, [fp, #-16]
  11a918:	e1d330ba 	ldrh	r3, [r3, #10]
  11a91c:	e15b20b6 	ldrh	r2, [fp, #-6]
  11a920:	e1520003 	cmp	r2, r3
  11a924:	9a00000a 	bls	11a954 <pbuf_header_impl+0xc0>
  11a928:	e3060d78 	movw	r0, #28024	; 0x6d78
  11a92c:	e3400014 	movt	r0, #20
  11a930:	ebffa1f7 	bl	103114 <rt_kprintf>
  11a934:	e3a01f92 	mov	r1, #584	; 0x248
  11a938:	e3060b7c 	movw	r0, #27516	; 0x6b7c
  11a93c:	e3400014 	movt	r0, #20
  11a940:	ebffc073 	bl	10ab14 <sys_arch_assert>
  11a944:	e3a03001 	mov	r3, #1
  11a948:	ea00005e 	b	11aac8 <pbuf_header_impl+0x234>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
  11a94c:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11a950:	e14b30b6 	strh	r3, [fp, #-6]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
  11a954:	e51b3010 	ldr	r3, [fp, #-16]
  11a958:	e5d3300c 	ldrb	r3, [r3, #12]
  11a95c:	e14b30b8 	strh	r3, [fp, #-8]
  /* remember current payload pointer */
  payload = p->payload;
  11a960:	e51b3010 	ldr	r3, [fp, #-16]
  11a964:	e5933004 	ldr	r3, [r3, #4]
  11a968:	e50b300c 	str	r3, [fp, #-12]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
  11a96c:	e15b30b8 	ldrh	r3, [fp, #-8]
  11a970:	e3530000 	cmp	r3, #0
  11a974:	0a000002 	beq	11a984 <pbuf_header_impl+0xf0>
  11a978:	e15b30b8 	ldrh	r3, [fp, #-8]
  11a97c:	e3530003 	cmp	r3, #3
  11a980:	1a000011 	bne	11a9cc <pbuf_header_impl+0x138>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
  11a984:	e51b3010 	ldr	r3, [fp, #-16]
  11a988:	e5932004 	ldr	r2, [r3, #4]
  11a98c:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  11a990:	e2633000 	rsb	r3, r3, #0
  11a994:	e0822003 	add	r2, r2, r3
  11a998:	e51b3010 	ldr	r3, [fp, #-16]
  11a99c:	e5832004 	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
  11a9a0:	e51b3010 	ldr	r3, [fp, #-16]
  11a9a4:	e5932004 	ldr	r2, [r3, #4]
  11a9a8:	e51b3010 	ldr	r3, [fp, #-16]
  11a9ac:	e2833010 	add	r3, r3, #16
  11a9b0:	e1520003 	cmp	r2, r3
  11a9b4:	2a000034 	bcs	11aa8c <pbuf_header_impl+0x1f8>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
  11a9b8:	e51b3010 	ldr	r3, [fp, #-16]
  11a9bc:	e51b200c 	ldr	r2, [fp, #-12]
  11a9c0:	e5832004 	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
  11a9c4:	e3a03001 	mov	r3, #1
  11a9c8:	ea00003e 	b	11aac8 <pbuf_header_impl+0x234>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
  11a9cc:	e15b30b8 	ldrh	r3, [fp, #-8]
  11a9d0:	e3530002 	cmp	r3, #2
  11a9d4:	0a000002 	beq	11a9e4 <pbuf_header_impl+0x150>
  11a9d8:	e15b30b8 	ldrh	r3, [fp, #-8]
  11a9dc:	e3530001 	cmp	r3, #1
  11a9e0:	1a000020 	bne	11aa68 <pbuf_header_impl+0x1d4>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
  11a9e4:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  11a9e8:	e3530000 	cmp	r3, #0
  11a9ec:	aa00000c 	bge	11aa24 <pbuf_header_impl+0x190>
  11a9f0:	e51b3010 	ldr	r3, [fp, #-16]
  11a9f4:	e1d330ba 	ldrh	r3, [r3, #10]
  11a9f8:	e15b20b6 	ldrh	r2, [fp, #-6]
  11a9fc:	e1520003 	cmp	r2, r3
  11aa00:	8a000007 	bhi	11aa24 <pbuf_header_impl+0x190>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
  11aa04:	e51b3010 	ldr	r3, [fp, #-16]
  11aa08:	e5932004 	ldr	r2, [r3, #4]
  11aa0c:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  11aa10:	e2633000 	rsb	r3, r3, #0
  11aa14:	e0822003 	add	r2, r2, r3
  11aa18:	e51b3010 	ldr	r3, [fp, #-16]
  11aa1c:	e5832004 	str	r2, [r3, #4]
  11aa20:	ea00000f 	b	11aa64 <pbuf_header_impl+0x1d0>
    } else if ((header_size_increment > 0) && force) {
  11aa24:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  11aa28:	e3530000 	cmp	r3, #0
  11aa2c:	da00000a 	ble	11aa5c <pbuf_header_impl+0x1c8>
  11aa30:	e55b3013 	ldrb	r3, [fp, #-19]	; 0xffffffed
  11aa34:	e3530000 	cmp	r3, #0
  11aa38:	0a000007 	beq	11aa5c <pbuf_header_impl+0x1c8>
      p->payload = (u8_t *)p->payload - header_size_increment;
  11aa3c:	e51b3010 	ldr	r3, [fp, #-16]
  11aa40:	e5932004 	ldr	r2, [r3, #4]
  11aa44:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  11aa48:	e2633000 	rsb	r3, r3, #0
  11aa4c:	e0822003 	add	r2, r2, r3
  11aa50:	e51b3010 	ldr	r3, [fp, #-16]
  11aa54:	e5832004 	str	r2, [r3, #4]
  11aa58:	ea000001 	b	11aa64 <pbuf_header_impl+0x1d0>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
  11aa5c:	e3a03001 	mov	r3, #1
  11aa60:	ea000018 	b	11aac8 <pbuf_header_impl+0x234>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
  11aa64:	ea000008 	b	11aa8c <pbuf_header_impl+0x1f8>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
  11aa68:	e3060d98 	movw	r0, #28056	; 0x6d98
  11aa6c:	e3400014 	movt	r0, #20
  11aa70:	ebffa1a7 	bl	103114 <rt_kprintf>
  11aa74:	e3a01f9e 	mov	r1, #632	; 0x278
  11aa78:	e3060b7c 	movw	r0, #27516	; 0x6b7c
  11aa7c:	e3400014 	movt	r0, #20
  11aa80:	ebffc023 	bl	10ab14 <sys_arch_assert>
    return 1;
  11aa84:	e3a03001 	mov	r3, #1
  11aa88:	ea00000e 	b	11aac8 <pbuf_header_impl+0x234>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
  11aa8c:	e51b3010 	ldr	r3, [fp, #-16]
  11aa90:	e1d320ba 	ldrh	r2, [r3, #10]
  11aa94:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11aa98:	e0823003 	add	r3, r2, r3
  11aa9c:	e6ff2073 	uxth	r2, r3
  11aaa0:	e51b3010 	ldr	r3, [fp, #-16]
  11aaa4:	e1c320ba 	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
  11aaa8:	e51b3010 	ldr	r3, [fp, #-16]
  11aaac:	e1d320b8 	ldrh	r2, [r3, #8]
  11aab0:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11aab4:	e0823003 	add	r3, r2, r3
  11aab8:	e6ff2073 	uxth	r2, r3
  11aabc:	e51b3010 	ldr	r3, [fp, #-16]
  11aac0:	e1c320b8 	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
  11aac4:	e3a03000 	mov	r3, #0
}
  11aac8:	e1a00003 	mov	r0, r3
  11aacc:	e24bd004 	sub	sp, fp, #4
  11aad0:	e8bd8800 	pop	{fp, pc}

0011aad4 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
  11aad4:	e92d4800 	push	{fp, lr}
  11aad8:	e28db004 	add	fp, sp, #4
  11aadc:	e24dd008 	sub	sp, sp, #8
  11aae0:	e50b0008 	str	r0, [fp, #-8]
  11aae4:	e1a03001 	mov	r3, r1
  11aae8:	e14b30ba 	strh	r3, [fp, #-10]
   return pbuf_header_impl(p, header_size_increment, 0);
  11aaec:	e15b30fa 	ldrsh	r3, [fp, #-10]
  11aaf0:	e3a02000 	mov	r2, #0
  11aaf4:	e1a01003 	mov	r1, r3
  11aaf8:	e51b0008 	ldr	r0, [fp, #-8]
  11aafc:	ebffff64 	bl	11a894 <pbuf_header_impl>
  11ab00:	e1a03000 	mov	r3, r0
}
  11ab04:	e1a00003 	mov	r0, r3
  11ab08:	e24bd004 	sub	sp, fp, #4
  11ab0c:	e8bd8800 	pop	{fp, pc}

0011ab10 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
  11ab10:	e92d4800 	push	{fp, lr}
  11ab14:	e28db004 	add	fp, sp, #4
  11ab18:	e24dd008 	sub	sp, sp, #8
  11ab1c:	e50b0008 	str	r0, [fp, #-8]
  11ab20:	e1a03001 	mov	r3, r1
  11ab24:	e14b30ba 	strh	r3, [fp, #-10]
   return pbuf_header_impl(p, header_size_increment, 1);
  11ab28:	e15b30fa 	ldrsh	r3, [fp, #-10]
  11ab2c:	e3a02001 	mov	r2, #1
  11ab30:	e1a01003 	mov	r1, r3
  11ab34:	e51b0008 	ldr	r0, [fp, #-8]
  11ab38:	ebffff55 	bl	11a894 <pbuf_header_impl>
  11ab3c:	e1a03000 	mov	r3, r0
}
  11ab40:	e1a00003 	mov	r0, r3
  11ab44:	e24bd004 	sub	sp, fp, #4
  11ab48:	e8bd8800 	pop	{fp, pc}

0011ab4c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
  11ab4c:	e92d4800 	push	{fp, lr}
  11ab50:	e28db004 	add	fp, sp, #4
  11ab54:	e24dd018 	sub	sp, sp, #24
  11ab58:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
  11ab5c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ab60:	e3530000 	cmp	r3, #0
  11ab64:	1a00000b 	bne	11ab98 <pbuf_free+0x4c>
    LWIP_ASSERT("p != NULL", p != NULL);
  11ab68:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ab6c:	e3530000 	cmp	r3, #0
  11ab70:	1a000006 	bne	11ab90 <pbuf_free+0x44>
  11ab74:	e3060d6c 	movw	r0, #28012	; 0x6d6c
  11ab78:	e3400014 	movt	r0, #20
  11ab7c:	ebffa164 	bl	103114 <rt_kprintf>
  11ab80:	e30012d3 	movw	r1, #723	; 0x2d3
  11ab84:	e3060b7c 	movw	r0, #27516	; 0x6b7c
  11ab88:	e3400014 	movt	r0, #20
  11ab8c:	ebffbfe0 	bl	10ab14 <sys_arch_assert>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
  11ab90:	e3a03000 	mov	r3, #0
  11ab94:	ea00006e 	b	11ad54 <pbuf_free+0x208>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
  11ab98:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ab9c:	e5d3300c 	ldrb	r3, [r3, #12]
  11aba0:	e3530000 	cmp	r3, #0
  11aba4:	0a000012 	beq	11abf4 <pbuf_free+0xa8>
  11aba8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11abac:	e5d3300c 	ldrb	r3, [r3, #12]
  11abb0:	e3530001 	cmp	r3, #1
  11abb4:	0a00000e 	beq	11abf4 <pbuf_free+0xa8>
  11abb8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11abbc:	e5d3300c 	ldrb	r3, [r3, #12]
  11abc0:	e3530002 	cmp	r3, #2
  11abc4:	0a00000a 	beq	11abf4 <pbuf_free+0xa8>
  11abc8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11abcc:	e5d3300c 	ldrb	r3, [r3, #12]
  11abd0:	e3530003 	cmp	r3, #3
  11abd4:	0a000006 	beq	11abf4 <pbuf_free+0xa8>
  11abd8:	e3060da8 	movw	r0, #28072	; 0x6da8
  11abdc:	e3400014 	movt	r0, #20
  11abe0:	ebffa14b 	bl	103114 <rt_kprintf>
  11abe4:	e30012df 	movw	r1, #735	; 0x2df
  11abe8:	e3060b7c 	movw	r0, #27516	; 0x6b7c
  11abec:	e3400014 	movt	r0, #20
  11abf0:	ebffbfc7 	bl	10ab14 <sys_arch_assert>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
  11abf4:	e3a03000 	mov	r3, #0
  11abf8:	e54b3005 	strb	r3, [fp, #-5]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
  11abfc:	ea000050 	b	11ad44 <pbuf_free+0x1f8>
    u16_t ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
  11ac00:	ebff9d8d 	bl	10223c <rt_enter_critical>
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
  11ac04:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ac08:	e1d330be 	ldrh	r3, [r3, #14]
  11ac0c:	e3530000 	cmp	r3, #0
  11ac10:	1a000006 	bne	11ac30 <pbuf_free+0xe4>
  11ac14:	e3060dc0 	movw	r0, #28096	; 0x6dc0
  11ac18:	e3400014 	movt	r0, #20
  11ac1c:	ebffa13c 	bl	103114 <rt_kprintf>
  11ac20:	e3a01fbb 	mov	r1, #748	; 0x2ec
  11ac24:	e3060b7c 	movw	r0, #27516	; 0x6b7c
  11ac28:	e3400014 	movt	r0, #20
  11ac2c:	ebffbfb8 	bl	10ab14 <sys_arch_assert>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
  11ac30:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ac34:	e1d330be 	ldrh	r3, [r3, #14]
  11ac38:	e2433001 	sub	r3, r3, #1
  11ac3c:	e6ff2073 	uxth	r2, r3
  11ac40:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ac44:	e1c320be 	strh	r2, [r3, #14]
  11ac48:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ac4c:	e1d330be 	ldrh	r3, [r3, #14]
  11ac50:	e14b30b8 	strh	r3, [fp, #-8]
    SYS_ARCH_UNPROTECT(old_level);
  11ac54:	ebff9d7e 	bl	102254 <rt_exit_critical>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
  11ac58:	e15b30b8 	ldrh	r3, [fp, #-8]
  11ac5c:	e3530000 	cmp	r3, #0
  11ac60:	1a000035 	bne	11ad3c <pbuf_free+0x1f0>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
  11ac64:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ac68:	e5933000 	ldr	r3, [r3]
  11ac6c:	e50b300c 	str	r3, [fp, #-12]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
  11ac70:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ac74:	e5d3300c 	ldrb	r3, [r3, #12]
  11ac78:	e14b30be 	strh	r3, [fp, #-14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
  11ac7c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ac80:	e5d3300d 	ldrb	r3, [r3, #13]
  11ac84:	e2033002 	and	r3, r3, #2
  11ac88:	e3530000 	cmp	r3, #0
  11ac8c:	0a000011 	beq	11acd8 <pbuf_free+0x18c>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
  11ac90:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ac94:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
  11ac98:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11ac9c:	e5933010 	ldr	r3, [r3, #16]
  11aca0:	e3530000 	cmp	r3, #0
  11aca4:	1a000006 	bne	11acc4 <pbuf_free+0x178>
  11aca8:	e3060dd8 	movw	r0, #28120	; 0x6dd8
  11acac:	e3400014 	movt	r0, #20
  11acb0:	ebffa117 	bl	103114 <rt_kprintf>
  11acb4:	e30012fa 	movw	r1, #762	; 0x2fa
  11acb8:	e3060b7c 	movw	r0, #27516	; 0x6b7c
  11acbc:	e3400014 	movt	r0, #20
  11acc0:	ebffbf93 	bl	10ab14 <sys_arch_assert>
        pc->custom_free_function(p);
  11acc4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11acc8:	e5933010 	ldr	r3, [r3, #16]
  11accc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  11acd0:	e12fff33 	blx	r3
  11acd4:	ea000012 	b	11ad24 <pbuf_free+0x1d8>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
  11acd8:	e15b30be 	ldrh	r3, [fp, #-14]
  11acdc:	e3530003 	cmp	r3, #3
  11ace0:	1a000003 	bne	11acf4 <pbuf_free+0x1a8>
          memp_free(MEMP_PBUF_POOL, p);
  11ace4:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11ace8:	e3a00010 	mov	r0, #16
  11acec:	ebfff888 	bl	118f14 <memp_free>
  11acf0:	ea00000b 	b	11ad24 <pbuf_free+0x1d8>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
  11acf4:	e15b30be 	ldrh	r3, [fp, #-14]
  11acf8:	e3530001 	cmp	r3, #1
  11acfc:	0a000002 	beq	11ad0c <pbuf_free+0x1c0>
  11ad00:	e15b30be 	ldrh	r3, [fp, #-14]
  11ad04:	e3530002 	cmp	r3, #2
  11ad08:	1a000003 	bne	11ad1c <pbuf_free+0x1d0>
          memp_free(MEMP_PBUF, p);
  11ad0c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11ad10:	e3a0000f 	mov	r0, #15
  11ad14:	ebfff87e 	bl	118f14 <memp_free>
  11ad18:	ea000001 	b	11ad24 <pbuf_free+0x1d8>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
  11ad1c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  11ad20:	ebffbfc8 	bl	10ac48 <mem_free>
        }
      }
      count++;
  11ad24:	e55b3005 	ldrb	r3, [fp, #-5]
  11ad28:	e2833001 	add	r3, r3, #1
  11ad2c:	e54b3005 	strb	r3, [fp, #-5]
      /* proceed to next pbuf */
      p = q;
  11ad30:	e51b300c 	ldr	r3, [fp, #-12]
  11ad34:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  11ad38:	ea000001 	b	11ad44 <pbuf_free+0x1f8>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
  11ad3c:	e3a03000 	mov	r3, #0
  11ad40:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  while (p != NULL) {
  11ad44:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ad48:	e3530000 	cmp	r3, #0
  11ad4c:	1affffab 	bne	11ac00 <pbuf_free+0xb4>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
  11ad50:	e55b3005 	ldrb	r3, [fp, #-5]
}
  11ad54:	e1a00003 	mov	r0, r3
  11ad58:	e24bd004 	sub	sp, fp, #4
  11ad5c:	e8bd8800 	pop	{fp, pc}

0011ad60 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
  11ad60:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11ad64:	e28db000 	add	fp, sp, #0
  11ad68:	e24dd014 	sub	sp, sp, #20
  11ad6c:	e50b0010 	str	r0, [fp, #-16]
  u16_t len;

  len = 0;
  11ad70:	e3a03000 	mov	r3, #0
  11ad74:	e14b30b6 	strh	r3, [fp, #-6]
  while (p != NULL) {
  11ad78:	ea000005 	b	11ad94 <pbuf_clen+0x34>
    ++len;
  11ad7c:	e15b30b6 	ldrh	r3, [fp, #-6]
  11ad80:	e2833001 	add	r3, r3, #1
  11ad84:	e14b30b6 	strh	r3, [fp, #-6]
    p = p->next;
  11ad88:	e51b3010 	ldr	r3, [fp, #-16]
  11ad8c:	e5933000 	ldr	r3, [r3]
  11ad90:	e50b3010 	str	r3, [fp, #-16]
  while (p != NULL) {
  11ad94:	e51b3010 	ldr	r3, [fp, #-16]
  11ad98:	e3530000 	cmp	r3, #0
  11ad9c:	1afffff6 	bne	11ad7c <pbuf_clen+0x1c>
  }
  return len;
  11ada0:	e15b30b6 	ldrh	r3, [fp, #-6]
}
  11ada4:	e1a00003 	mov	r0, r3
  11ada8:	e28bd000 	add	sp, fp, #0
  11adac:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11adb0:	e12fff1e 	bx	lr

0011adb4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
  11adb4:	e92d4800 	push	{fp, lr}
  11adb8:	e28db004 	add	fp, sp, #4
  11adbc:	e24dd008 	sub	sp, sp, #8
  11adc0:	e50b0008 	str	r0, [fp, #-8]
  /* pbuf given? */
  if (p != NULL) {
  11adc4:	e51b3008 	ldr	r3, [fp, #-8]
  11adc8:	e3530000 	cmp	r3, #0
  11adcc:	0a000012 	beq	11ae1c <pbuf_ref+0x68>
    SYS_ARCH_INC(p->ref, 1);
  11add0:	ebff9d19 	bl	10223c <rt_enter_critical>
  11add4:	e51b3008 	ldr	r3, [fp, #-8]
  11add8:	e1d330be 	ldrh	r3, [r3, #14]
  11addc:	e2833001 	add	r3, r3, #1
  11ade0:	e6ff2073 	uxth	r2, r3
  11ade4:	e51b3008 	ldr	r3, [fp, #-8]
  11ade8:	e1c320be 	strh	r2, [r3, #14]
  11adec:	ebff9d18 	bl	102254 <rt_exit_critical>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
  11adf0:	e51b3008 	ldr	r3, [fp, #-8]
  11adf4:	e1d330be 	ldrh	r3, [r3, #14]
  11adf8:	e3530000 	cmp	r3, #0
  11adfc:	1a000006 	bne	11ae1c <pbuf_ref+0x68>
  11ae00:	e3060dfc 	movw	r0, #28156	; 0x6dfc
  11ae04:	e3400014 	movt	r0, #20
  11ae08:	ebffa0c1 	bl	103114 <rt_kprintf>
  11ae0c:	e300133a 	movw	r1, #826	; 0x33a
  11ae10:	e3060b7c 	movw	r0, #27516	; 0x6b7c
  11ae14:	e3400014 	movt	r0, #20
  11ae18:	ebffbf3d 	bl	10ab14 <sys_arch_assert>
  }
}
  11ae1c:	e320f000 	nop	{0}
  11ae20:	e24bd004 	sub	sp, fp, #4
  11ae24:	e8bd8800 	pop	{fp, pc}

0011ae28 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
  11ae28:	e92d4800 	push	{fp, lr}
  11ae2c:	e28db004 	add	fp, sp, #4
  11ae30:	e24dd010 	sub	sp, sp, #16
  11ae34:	e50b0010 	str	r0, [fp, #-16]
  11ae38:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
  11ae3c:	e51b3010 	ldr	r3, [fp, #-16]
  11ae40:	e3530000 	cmp	r3, #0
  11ae44:	0a000002 	beq	11ae54 <pbuf_cat+0x2c>
  11ae48:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11ae4c:	e3530000 	cmp	r3, #0
  11ae50:	1a000007 	bne	11ae74 <pbuf_cat+0x4c>
  11ae54:	e3060e10 	movw	r0, #28176	; 0x6e10
  11ae58:	e3400014 	movt	r0, #20
  11ae5c:	ebffa0ac 	bl	103114 <rt_kprintf>
  11ae60:	e300134e 	movw	r1, #846	; 0x34e
  11ae64:	e3060b7c 	movw	r0, #27516	; 0x6b7c
  11ae68:	e3400014 	movt	r0, #20
  11ae6c:	ebffbf28 	bl	10ab14 <sys_arch_assert>
  11ae70:	ea000034 	b	11af48 <pbuf_cat+0x120>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
  11ae74:	e51b3010 	ldr	r3, [fp, #-16]
  11ae78:	e50b3008 	str	r3, [fp, #-8]
  11ae7c:	ea00000a 	b	11aeac <pbuf_cat+0x84>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
  11ae80:	e51b3008 	ldr	r3, [fp, #-8]
  11ae84:	e1d320b8 	ldrh	r2, [r3, #8]
  11ae88:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11ae8c:	e1d330b8 	ldrh	r3, [r3, #8]
  11ae90:	e0823003 	add	r3, r2, r3
  11ae94:	e6ff2073 	uxth	r2, r3
  11ae98:	e51b3008 	ldr	r3, [fp, #-8]
  11ae9c:	e1c320b8 	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
  11aea0:	e51b3008 	ldr	r3, [fp, #-8]
  11aea4:	e5933000 	ldr	r3, [r3]
  11aea8:	e50b3008 	str	r3, [fp, #-8]
  11aeac:	e51b3008 	ldr	r3, [fp, #-8]
  11aeb0:	e5933000 	ldr	r3, [r3]
  11aeb4:	e3530000 	cmp	r3, #0
  11aeb8:	1afffff0 	bne	11ae80 <pbuf_cat+0x58>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
  11aebc:	e51b3008 	ldr	r3, [fp, #-8]
  11aec0:	e1d320b8 	ldrh	r2, [r3, #8]
  11aec4:	e51b3008 	ldr	r3, [fp, #-8]
  11aec8:	e1d330ba 	ldrh	r3, [r3, #10]
  11aecc:	e1520003 	cmp	r2, r3
  11aed0:	0a000006 	beq	11aef0 <pbuf_cat+0xc8>
  11aed4:	e3060e48 	movw	r0, #28232	; 0x6e48
  11aed8:	e3400014 	movt	r0, #20
  11aedc:	ebffa08c 	bl	103114 <rt_kprintf>
  11aee0:	e3001356 	movw	r1, #854	; 0x356
  11aee4:	e3060b7c 	movw	r0, #27516	; 0x6b7c
  11aee8:	e3400014 	movt	r0, #20
  11aeec:	ebffbf08 	bl	10ab14 <sys_arch_assert>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
  11aef0:	e51b3008 	ldr	r3, [fp, #-8]
  11aef4:	e5933000 	ldr	r3, [r3]
  11aef8:	e3530000 	cmp	r3, #0
  11aefc:	0a000006 	beq	11af1c <pbuf_cat+0xf4>
  11af00:	e3060e78 	movw	r0, #28280	; 0x6e78
  11af04:	e3400014 	movt	r0, #20
  11af08:	ebffa081 	bl	103114 <rt_kprintf>
  11af0c:	e3001357 	movw	r1, #855	; 0x357
  11af10:	e3060b7c 	movw	r0, #27516	; 0x6b7c
  11af14:	e3400014 	movt	r0, #20
  11af18:	ebffbefd 	bl	10ab14 <sys_arch_assert>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
  11af1c:	e51b3008 	ldr	r3, [fp, #-8]
  11af20:	e1d320b8 	ldrh	r2, [r3, #8]
  11af24:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11af28:	e1d330b8 	ldrh	r3, [r3, #8]
  11af2c:	e0823003 	add	r3, r2, r3
  11af30:	e6ff2073 	uxth	r2, r3
  11af34:	e51b3008 	ldr	r3, [fp, #-8]
  11af38:	e1c320b8 	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
  11af3c:	e51b3008 	ldr	r3, [fp, #-8]
  11af40:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11af44:	e5832000 	str	r2, [r3]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
  11af48:	e24bd004 	sub	sp, fp, #4
  11af4c:	e8bd8800 	pop	{fp, pc}

0011af50 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
  11af50:	e92d4800 	push	{fp, lr}
  11af54:	e28db004 	add	fp, sp, #4
  11af58:	e24dd008 	sub	sp, sp, #8
  11af5c:	e50b0008 	str	r0, [fp, #-8]
  11af60:	e50b100c 	str	r1, [fp, #-12]
  pbuf_cat(h, t);
  11af64:	e51b100c 	ldr	r1, [fp, #-12]
  11af68:	e51b0008 	ldr	r0, [fp, #-8]
  11af6c:	ebffffad 	bl	11ae28 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
  11af70:	e51b000c 	ldr	r0, [fp, #-12]
  11af74:	ebffff8e 	bl	11adb4 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
  11af78:	e320f000 	nop	{0}
  11af7c:	e24bd004 	sub	sp, fp, #4
  11af80:	e8bd8800 	pop	{fp, pc}

0011af84 <pbuf_dechain>:
 * @return remainder of the pbuf chain, or NULL if it was de-allocated.
 * @note May not be called on a packet queue.
 */
struct pbuf *
pbuf_dechain(struct pbuf *p)
{
  11af84:	e92d4800 	push	{fp, lr}
  11af88:	e28db004 	add	fp, sp, #4
  11af8c:	e24dd010 	sub	sp, sp, #16
  11af90:	e50b0010 	str	r0, [fp, #-16]
  struct pbuf *q;
  u8_t tail_gone = 1;
  11af94:	e3a03001 	mov	r3, #1
  11af98:	e54b3005 	strb	r3, [fp, #-5]
  /* tail */
  q = p->next;
  11af9c:	e51b3010 	ldr	r3, [fp, #-16]
  11afa0:	e5933000 	ldr	r3, [r3]
  11afa4:	e50b300c 	str	r3, [fp, #-12]
  /* pbuf has successor in chain? */
  if (q != NULL) {
  11afa8:	e51b300c 	ldr	r3, [fp, #-12]
  11afac:	e3530000 	cmp	r3, #0
  11afb0:	0a000024 	beq	11b048 <pbuf_dechain+0xc4>
    /* assert tot_len invariant: (p->tot_len == p->len + (p->next? p->next->tot_len: 0) */
    LWIP_ASSERT("p->tot_len == p->len + q->tot_len", q->tot_len == p->tot_len - p->len);
  11afb4:	e51b300c 	ldr	r3, [fp, #-12]
  11afb8:	e1d330b8 	ldrh	r3, [r3, #8]
  11afbc:	e1a02003 	mov	r2, r3
  11afc0:	e51b3010 	ldr	r3, [fp, #-16]
  11afc4:	e1d330b8 	ldrh	r3, [r3, #8]
  11afc8:	e1a01003 	mov	r1, r3
  11afcc:	e51b3010 	ldr	r3, [fp, #-16]
  11afd0:	e1d330ba 	ldrh	r3, [r3, #10]
  11afd4:	e0413003 	sub	r3, r1, r3
  11afd8:	e1520003 	cmp	r2, r3
  11afdc:	0a000006 	beq	11affc <pbuf_dechain+0x78>
  11afe0:	e3060e88 	movw	r0, #28296	; 0x6e88
  11afe4:	e3400014 	movt	r0, #20
  11afe8:	ebffa049 	bl	103114 <rt_kprintf>
  11afec:	e300138d 	movw	r1, #909	; 0x38d
  11aff0:	e3060b7c 	movw	r0, #27516	; 0x6b7c
  11aff4:	e3400014 	movt	r0, #20
  11aff8:	ebffbec5 	bl	10ab14 <sys_arch_assert>
    /* enforce invariant if assertion is disabled */
    q->tot_len = p->tot_len - p->len;
  11affc:	e51b3010 	ldr	r3, [fp, #-16]
  11b000:	e1d320b8 	ldrh	r2, [r3, #8]
  11b004:	e51b3010 	ldr	r3, [fp, #-16]
  11b008:	e1d330ba 	ldrh	r3, [r3, #10]
  11b00c:	e0423003 	sub	r3, r2, r3
  11b010:	e6ff2073 	uxth	r2, r3
  11b014:	e51b300c 	ldr	r3, [fp, #-12]
  11b018:	e1c320b8 	strh	r2, [r3, #8]
    /* decouple pbuf from remainder */
    p->next = NULL;
  11b01c:	e51b3010 	ldr	r3, [fp, #-16]
  11b020:	e3a02000 	mov	r2, #0
  11b024:	e5832000 	str	r2, [r3]
    /* total length of pbuf p is its own length only */
    p->tot_len = p->len;
  11b028:	e51b3010 	ldr	r3, [fp, #-16]
  11b02c:	e1d320ba 	ldrh	r2, [r3, #10]
  11b030:	e51b3010 	ldr	r3, [fp, #-16]
  11b034:	e1c320b8 	strh	r2, [r3, #8]
    /* q is no longer referenced by p, free it */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_dechain: unreferencing %p\n", (void *)q));
    tail_gone = pbuf_free(q);
  11b038:	e51b000c 	ldr	r0, [fp, #-12]
  11b03c:	ebfffec2 	bl	11ab4c <pbuf_free>
  11b040:	e1a03000 	mov	r3, r0
  11b044:	e54b3005 	strb	r3, [fp, #-5]
                  ("pbuf_dechain: deallocated %p (as it is no longer referenced)\n", (void *)q));
    }
    /* return remaining tail or NULL if deallocated */
  }
  /* assert tot_len invariant: (p->tot_len == p->len + (p->next? p->next->tot_len: 0) */
  LWIP_ASSERT("p->tot_len == p->len", p->tot_len == p->len);
  11b048:	e51b3010 	ldr	r3, [fp, #-16]
  11b04c:	e1d320b8 	ldrh	r2, [r3, #8]
  11b050:	e51b3010 	ldr	r3, [fp, #-16]
  11b054:	e1d330ba 	ldrh	r3, [r3, #10]
  11b058:	e1520003 	cmp	r2, r3
  11b05c:	0a000006 	beq	11b07c <pbuf_dechain+0xf8>
  11b060:	e3060eac 	movw	r0, #28332	; 0x6eac
  11b064:	e3400014 	movt	r0, #20
  11b068:	ebffa029 	bl	103114 <rt_kprintf>
  11b06c:	e300139e 	movw	r1, #926	; 0x39e
  11b070:	e3060b7c 	movw	r0, #27516	; 0x6b7c
  11b074:	e3400014 	movt	r0, #20
  11b078:	ebffbea5 	bl	10ab14 <sys_arch_assert>
  return ((tail_gone > 0) ? NULL : q);
  11b07c:	e55b3005 	ldrb	r3, [fp, #-5]
  11b080:	e3530000 	cmp	r3, #0
  11b084:	1a000001 	bne	11b090 <pbuf_dechain+0x10c>
  11b088:	e51b300c 	ldr	r3, [fp, #-12]
  11b08c:	ea000000 	b	11b094 <pbuf_dechain+0x110>
  11b090:	e3a03000 	mov	r3, #0
}
  11b094:	e1a00003 	mov	r0, r3
  11b098:	e24bd004 	sub	sp, fp, #4
  11b09c:	e8bd8800 	pop	{fp, pc}

0011b0a0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
  11b0a0:	e92d4800 	push	{fp, lr}
  11b0a4:	e28db004 	add	fp, sp, #4
  11b0a8:	e24dd010 	sub	sp, sp, #16
  11b0ac:	e50b0010 	str	r0, [fp, #-16]
  11b0b0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  u16_t offset_to=0, offset_from=0, len;
  11b0b4:	e3a03000 	mov	r3, #0
  11b0b8:	e14b30b6 	strh	r3, [fp, #-6]
  11b0bc:	e3a03000 	mov	r3, #0
  11b0c0:	e14b30b8 	strh	r3, [fp, #-8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
  11b0c4:	e51b3010 	ldr	r3, [fp, #-16]
  11b0c8:	e3530000 	cmp	r3, #0
  11b0cc:	0a000008 	beq	11b0f4 <pbuf_copy+0x54>
  11b0d0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b0d4:	e3530000 	cmp	r3, #0
  11b0d8:	0a000005 	beq	11b0f4 <pbuf_copy+0x54>
  11b0dc:	e51b3010 	ldr	r3, [fp, #-16]
  11b0e0:	e1d320b8 	ldrh	r2, [r3, #8]
  11b0e4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b0e8:	e1d330b8 	ldrh	r3, [r3, #8]
  11b0ec:	e1520003 	cmp	r2, r3
  11b0f0:	2a000008 	bcs	11b118 <pbuf_copy+0x78>
  11b0f4:	e3060ec4 	movw	r0, #28356	; 0x6ec4
  11b0f8:	e3400014 	movt	r0, #20
  11b0fc:	ebffa004 	bl	103114 <rt_kprintf>
  11b100:	e30013be 	movw	r1, #958	; 0x3be
  11b104:	e3060b7c 	movw	r0, #27516	; 0x6b7c
  11b108:	e3400014 	movt	r0, #20
  11b10c:	ebffbe80 	bl	10ab14 <sys_arch_assert>
  11b110:	e3e0300f 	mvn	r3, #15
  11b114:	ea000094 	b	11b36c <pbuf_copy+0x2cc>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
  11b118:	e51b3010 	ldr	r3, [fp, #-16]
  11b11c:	e1d330ba 	ldrh	r3, [r3, #10]
  11b120:	e1a02003 	mov	r2, r3
  11b124:	e15b30b6 	ldrh	r3, [fp, #-6]
  11b128:	e0422003 	sub	r2, r2, r3
  11b12c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b130:	e1d330ba 	ldrh	r3, [r3, #10]
  11b134:	e1a01003 	mov	r1, r3
  11b138:	e15b30b8 	ldrh	r3, [fp, #-8]
  11b13c:	e0413003 	sub	r3, r1, r3
  11b140:	e1520003 	cmp	r2, r3
  11b144:	ba000005 	blt	11b160 <pbuf_copy+0xc0>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
  11b148:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b14c:	e1d320ba 	ldrh	r2, [r3, #10]
  11b150:	e15b30b8 	ldrh	r3, [fp, #-8]
  11b154:	e0423003 	sub	r3, r2, r3
  11b158:	e14b30ba 	strh	r3, [fp, #-10]
  11b15c:	ea000004 	b	11b174 <pbuf_copy+0xd4>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
  11b160:	e51b3010 	ldr	r3, [fp, #-16]
  11b164:	e1d320ba 	ldrh	r2, [r3, #10]
  11b168:	e15b30b6 	ldrh	r3, [fp, #-6]
  11b16c:	e0423003 	sub	r3, r2, r3
  11b170:	e14b30ba 	strh	r3, [fp, #-10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
  11b174:	e51b3010 	ldr	r3, [fp, #-16]
  11b178:	e5932004 	ldr	r2, [r3, #4]
  11b17c:	e15b30b6 	ldrh	r3, [fp, #-6]
  11b180:	e0820003 	add	r0, r2, r3
  11b184:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b188:	e5932004 	ldr	r2, [r3, #4]
  11b18c:	e15b30b8 	ldrh	r3, [fp, #-8]
  11b190:	e0823003 	add	r3, r2, r3
  11b194:	e15b20ba 	ldrh	r2, [fp, #-10]
  11b198:	e1a01003 	mov	r1, r3
  11b19c:	eb00949a 	bl	14040c <memcpy>
    offset_to += len;
  11b1a0:	e15b20b6 	ldrh	r2, [fp, #-6]
  11b1a4:	e15b30ba 	ldrh	r3, [fp, #-10]
  11b1a8:	e0823003 	add	r3, r2, r3
  11b1ac:	e14b30b6 	strh	r3, [fp, #-6]
    offset_from += len;
  11b1b0:	e15b20b8 	ldrh	r2, [fp, #-8]
  11b1b4:	e15b30ba 	ldrh	r3, [fp, #-10]
  11b1b8:	e0823003 	add	r3, r2, r3
  11b1bc:	e14b30b8 	strh	r3, [fp, #-8]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
  11b1c0:	e51b3010 	ldr	r3, [fp, #-16]
  11b1c4:	e1d330ba 	ldrh	r3, [r3, #10]
  11b1c8:	e15b20b6 	ldrh	r2, [fp, #-6]
  11b1cc:	e1520003 	cmp	r2, r3
  11b1d0:	9a000006 	bls	11b1f0 <pbuf_copy+0x150>
  11b1d4:	e3060ef4 	movw	r0, #28404	; 0x6ef4
  11b1d8:	e3400014 	movt	r0, #20
  11b1dc:	ebff9fcc 	bl	103114 <rt_kprintf>
  11b1e0:	e30013ce 	movw	r1, #974	; 0x3ce
  11b1e4:	e3060b7c 	movw	r0, #27516	; 0x6b7c
  11b1e8:	e3400014 	movt	r0, #20
  11b1ec:	ebffbe48 	bl	10ab14 <sys_arch_assert>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
  11b1f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b1f4:	e1d330ba 	ldrh	r3, [r3, #10]
  11b1f8:	e15b20b8 	ldrh	r2, [fp, #-8]
  11b1fc:	e1520003 	cmp	r2, r3
  11b200:	9a000006 	bls	11b220 <pbuf_copy+0x180>
  11b204:	e3060f0c 	movw	r0, #28428	; 0x6f0c
  11b208:	e3400014 	movt	r0, #20
  11b20c:	ebff9fc0 	bl	103114 <rt_kprintf>
  11b210:	e30013cf 	movw	r1, #975	; 0x3cf
  11b214:	e3060b7c 	movw	r0, #27516	; 0x6b7c
  11b218:	e3400014 	movt	r0, #20
  11b21c:	ebffbe3c 	bl	10ab14 <sys_arch_assert>
    if (offset_from >= p_from->len) {
  11b220:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b224:	e1d330ba 	ldrh	r3, [r3, #10]
  11b228:	e15b20b8 	ldrh	r2, [fp, #-8]
  11b22c:	e1520003 	cmp	r2, r3
  11b230:	3a000004 	bcc	11b248 <pbuf_copy+0x1a8>
      /* on to next p_from (if any) */
      offset_from = 0;
  11b234:	e3a03000 	mov	r3, #0
  11b238:	e14b30b8 	strh	r3, [fp, #-8]
      p_from = p_from->next;
  11b23c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b240:	e5933000 	ldr	r3, [r3]
  11b244:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    }
    if (offset_to == p_to->len) {
  11b248:	e51b3010 	ldr	r3, [fp, #-16]
  11b24c:	e1d330ba 	ldrh	r3, [r3, #10]
  11b250:	e15b20b6 	ldrh	r2, [fp, #-6]
  11b254:	e1520003 	cmp	r2, r3
  11b258:	1a000013 	bne	11b2ac <pbuf_copy+0x20c>
      /* on to next p_to (if any) */
      offset_to = 0;
  11b25c:	e3a03000 	mov	r3, #0
  11b260:	e14b30b6 	strh	r3, [fp, #-6]
      p_to = p_to->next;
  11b264:	e51b3010 	ldr	r3, [fp, #-16]
  11b268:	e5933000 	ldr	r3, [r3]
  11b26c:	e50b3010 	str	r3, [fp, #-16]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
  11b270:	e51b3010 	ldr	r3, [fp, #-16]
  11b274:	e3530000 	cmp	r3, #0
  11b278:	1a00000b 	bne	11b2ac <pbuf_copy+0x20c>
  11b27c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b280:	e3530000 	cmp	r3, #0
  11b284:	0a000008 	beq	11b2ac <pbuf_copy+0x20c>
  11b288:	e3060f28 	movw	r0, #28456	; 0x6f28
  11b28c:	e3400014 	movt	r0, #20
  11b290:	ebff9f9f 	bl	103114 <rt_kprintf>
  11b294:	e30013d9 	movw	r1, #985	; 0x3d9
  11b298:	e3060b7c 	movw	r0, #27516	; 0x6b7c
  11b29c:	e3400014 	movt	r0, #20
  11b2a0:	ebffbe1b 	bl	10ab14 <sys_arch_assert>
  11b2a4:	e3e0300f 	mvn	r3, #15
  11b2a8:	ea00002f 	b	11b36c <pbuf_copy+0x2cc>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
  11b2ac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b2b0:	e3530000 	cmp	r3, #0
  11b2b4:	0a000012 	beq	11b304 <pbuf_copy+0x264>
  11b2b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b2bc:	e1d320ba 	ldrh	r2, [r3, #10]
  11b2c0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b2c4:	e1d330b8 	ldrh	r3, [r3, #8]
  11b2c8:	e1520003 	cmp	r2, r3
  11b2cc:	1a00000c 	bne	11b304 <pbuf_copy+0x264>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
  11b2d0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b2d4:	e5933000 	ldr	r3, [r3]
  11b2d8:	e3530000 	cmp	r3, #0
  11b2dc:	0a000008 	beq	11b304 <pbuf_copy+0x264>
  11b2e0:	e3060f38 	movw	r0, #28472	; 0x6f38
  11b2e4:	e3400014 	movt	r0, #20
  11b2e8:	ebff9f89 	bl	103114 <rt_kprintf>
  11b2ec:	e30013df 	movw	r1, #991	; 0x3df
  11b2f0:	e3060b7c 	movw	r0, #27516	; 0x6b7c
  11b2f4:	e3400014 	movt	r0, #20
  11b2f8:	ebffbe05 	bl	10ab14 <sys_arch_assert>
  11b2fc:	e3e03005 	mvn	r3, #5
  11b300:	ea000019 	b	11b36c <pbuf_copy+0x2cc>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
  11b304:	e51b3010 	ldr	r3, [fp, #-16]
  11b308:	e3530000 	cmp	r3, #0
  11b30c:	0a000012 	beq	11b35c <pbuf_copy+0x2bc>
  11b310:	e51b3010 	ldr	r3, [fp, #-16]
  11b314:	e1d320ba 	ldrh	r2, [r3, #10]
  11b318:	e51b3010 	ldr	r3, [fp, #-16]
  11b31c:	e1d330b8 	ldrh	r3, [r3, #8]
  11b320:	e1520003 	cmp	r2, r3
  11b324:	1a00000c 	bne	11b35c <pbuf_copy+0x2bc>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
  11b328:	e51b3010 	ldr	r3, [fp, #-16]
  11b32c:	e5933000 	ldr	r3, [r3]
  11b330:	e3530000 	cmp	r3, #0
  11b334:	0a000008 	beq	11b35c <pbuf_copy+0x2bc>
  11b338:	e3060f38 	movw	r0, #28472	; 0x6f38
  11b33c:	e3400014 	movt	r0, #20
  11b340:	ebff9f73 	bl	103114 <rt_kprintf>
  11b344:	e3a01ff9 	mov	r1, #996	; 0x3e4
  11b348:	e3060b7c 	movw	r0, #27516	; 0x6b7c
  11b34c:	e3400014 	movt	r0, #20
  11b350:	ebffbdef 	bl	10ab14 <sys_arch_assert>
  11b354:	e3e03005 	mvn	r3, #5
  11b358:	ea000003 	b	11b36c <pbuf_copy+0x2cc>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  11b35c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b360:	e3530000 	cmp	r3, #0
  11b364:	1affff6b 	bne	11b118 <pbuf_copy+0x78>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
  11b368:	e3a03000 	mov	r3, #0
}
  11b36c:	e1a00003 	mov	r0, r3
  11b370:	e24bd004 	sub	sp, fp, #4
  11b374:	e8bd8800 	pop	{fp, pc}

0011b378 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
  11b378:	e92d4800 	push	{fp, lr}
  11b37c:	e28db004 	add	fp, sp, #4
  11b380:	e24dd020 	sub	sp, sp, #32
  11b384:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11b388:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  11b38c:	e1a01002 	mov	r1, r2
  11b390:	e1a02003 	mov	r2, r3
  11b394:	e1a03001 	mov	r3, r1
  11b398:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
  11b39c:	e1a03002 	mov	r3, r2
  11b3a0:	e14b32b0 	strh	r3, [fp, #-32]	; 0xffffffe0
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
  11b3a4:	e3a03000 	mov	r3, #0
  11b3a8:	e14b30be 	strh	r3, [fp, #-14]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
  11b3ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b3b0:	e3530000 	cmp	r3, #0
  11b3b4:	1a000008 	bne	11b3dc <pbuf_copy_partial+0x64>
  11b3b8:	e3060f64 	movw	r0, #28516	; 0x6f64
  11b3bc:	e3400014 	movt	r0, #20
  11b3c0:	ebff9f53 	bl	103114 <rt_kprintf>
  11b3c4:	e30013ff 	movw	r1, #1023	; 0x3ff
  11b3c8:	e3060b7c 	movw	r0, #27516	; 0x6b7c
  11b3cc:	e3400014 	movt	r0, #20
  11b3d0:	ebffbdcf 	bl	10ab14 <sys_arch_assert>
  11b3d4:	e3a03000 	mov	r3, #0
  11b3d8:	ea000053 	b	11b52c <pbuf_copy_partial+0x1b4>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
  11b3dc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11b3e0:	e3530000 	cmp	r3, #0
  11b3e4:	1a000008 	bne	11b40c <pbuf_copy_partial+0x94>
  11b3e8:	e3060f84 	movw	r0, #28548	; 0x6f84
  11b3ec:	e3400014 	movt	r0, #20
  11b3f0:	ebff9f47 	bl	103114 <rt_kprintf>
  11b3f4:	e3a01b01 	mov	r1, #1024	; 0x400
  11b3f8:	e3060b7c 	movw	r0, #27516	; 0x6b7c
  11b3fc:	e3400014 	movt	r0, #20
  11b400:	ebffbdc3 	bl	10ab14 <sys_arch_assert>
  11b404:	e3a03000 	mov	r3, #0
  11b408:	ea000047 	b	11b52c <pbuf_copy_partial+0x1b4>

  left = 0;
  11b40c:	e3a03000 	mov	r3, #0
  11b410:	e14b30ba 	strh	r3, [fp, #-10]

  if ((buf == NULL) || (dataptr == NULL)) {
  11b414:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b418:	e3530000 	cmp	r3, #0
  11b41c:	0a000002 	beq	11b42c <pbuf_copy_partial+0xb4>
  11b420:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11b424:	e3530000 	cmp	r3, #0
  11b428:	1a000001 	bne	11b434 <pbuf_copy_partial+0xbc>
    return 0;
  11b42c:	e3a03000 	mov	r3, #0
  11b430:	ea00003d 	b	11b52c <pbuf_copy_partial+0x1b4>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
  11b434:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b438:	e50b3008 	str	r3, [fp, #-8]
  11b43c:	ea000033 	b	11b510 <pbuf_copy_partial+0x198>
    if ((offset != 0) && (offset >= p->len)) {
  11b440:	e15b32b0 	ldrh	r3, [fp, #-32]	; 0xffffffe0
  11b444:	e3530000 	cmp	r3, #0
  11b448:	0a00000a 	beq	11b478 <pbuf_copy_partial+0x100>
  11b44c:	e51b3008 	ldr	r3, [fp, #-8]
  11b450:	e1d330ba 	ldrh	r3, [r3, #10]
  11b454:	e15b22b0 	ldrh	r2, [fp, #-32]	; 0xffffffe0
  11b458:	e1520003 	cmp	r2, r3
  11b45c:	3a000005 	bcc	11b478 <pbuf_copy_partial+0x100>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
  11b460:	e51b3008 	ldr	r3, [fp, #-8]
  11b464:	e1d330ba 	ldrh	r3, [r3, #10]
  11b468:	e15b22b0 	ldrh	r2, [fp, #-32]	; 0xffffffe0
  11b46c:	e0423003 	sub	r3, r2, r3
  11b470:	e14b32b0 	strh	r3, [fp, #-32]	; 0xffffffe0
  11b474:	ea000022 	b	11b504 <pbuf_copy_partial+0x18c>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
  11b478:	e51b3008 	ldr	r3, [fp, #-8]
  11b47c:	e1d320ba 	ldrh	r2, [r3, #10]
  11b480:	e15b32b0 	ldrh	r3, [fp, #-32]	; 0xffffffe0
  11b484:	e0423003 	sub	r3, r2, r3
  11b488:	e14b30bc 	strh	r3, [fp, #-12]
      if (buf_copy_len > len) {
  11b48c:	e15b20bc 	ldrh	r2, [fp, #-12]
  11b490:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11b494:	e1520003 	cmp	r2, r3
  11b498:	9a000001 	bls	11b4a4 <pbuf_copy_partial+0x12c>
        buf_copy_len = len;
  11b49c:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11b4a0:	e14b30bc 	strh	r3, [fp, #-12]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
  11b4a4:	e15b30ba 	ldrh	r3, [fp, #-10]
  11b4a8:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  11b4ac:	e0820003 	add	r0, r2, r3
  11b4b0:	e51b3008 	ldr	r3, [fp, #-8]
  11b4b4:	e5932004 	ldr	r2, [r3, #4]
  11b4b8:	e15b32b0 	ldrh	r3, [fp, #-32]	; 0xffffffe0
  11b4bc:	e0823003 	add	r3, r2, r3
  11b4c0:	e15b20bc 	ldrh	r2, [fp, #-12]
  11b4c4:	e1a01003 	mov	r1, r3
  11b4c8:	eb0093cf 	bl	14040c <memcpy>
      copied_total += buf_copy_len;
  11b4cc:	e15b20be 	ldrh	r2, [fp, #-14]
  11b4d0:	e15b30bc 	ldrh	r3, [fp, #-12]
  11b4d4:	e0823003 	add	r3, r2, r3
  11b4d8:	e14b30be 	strh	r3, [fp, #-14]
      left += buf_copy_len;
  11b4dc:	e15b20ba 	ldrh	r2, [fp, #-10]
  11b4e0:	e15b30bc 	ldrh	r3, [fp, #-12]
  11b4e4:	e0823003 	add	r3, r2, r3
  11b4e8:	e14b30ba 	strh	r3, [fp, #-10]
      len -= buf_copy_len;
  11b4ec:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  11b4f0:	e15b30bc 	ldrh	r3, [fp, #-12]
  11b4f4:	e0423003 	sub	r3, r2, r3
  11b4f8:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
      offset = 0;
  11b4fc:	e3a03000 	mov	r3, #0
  11b500:	e14b32b0 	strh	r3, [fp, #-32]	; 0xffffffe0
  for (p = buf; len != 0 && p != NULL; p = p->next) {
  11b504:	e51b3008 	ldr	r3, [fp, #-8]
  11b508:	e5933000 	ldr	r3, [r3]
  11b50c:	e50b3008 	str	r3, [fp, #-8]
  11b510:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11b514:	e3530000 	cmp	r3, #0
  11b518:	0a000002 	beq	11b528 <pbuf_copy_partial+0x1b0>
  11b51c:	e51b3008 	ldr	r3, [fp, #-8]
  11b520:	e3530000 	cmp	r3, #0
  11b524:	1affffc5 	bne	11b440 <pbuf_copy_partial+0xc8>
    }
  }
  return copied_total;
  11b528:	e15b30be 	ldrh	r3, [fp, #-14]
}
  11b52c:	e1a00003 	mov	r0, r3
  11b530:	e24bd004 	sub	sp, fp, #4
  11b534:	e8bd8800 	pop	{fp, pc}

0011b538 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf*
pbuf_skip_const(const struct pbuf* in, u16_t in_offset, u16_t* out_offset)
{
  11b538:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11b53c:	e28db000 	add	fp, sp, #0
  11b540:	e24dd01c 	sub	sp, sp, #28
  11b544:	e50b0010 	str	r0, [fp, #-16]
  11b548:	e1a03001 	mov	r3, r1
  11b54c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  11b550:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  u16_t offset_left = in_offset;
  11b554:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11b558:	e14b30b6 	strh	r3, [fp, #-6]
  const struct pbuf* q = in;
  11b55c:	e51b3010 	ldr	r3, [fp, #-16]
  11b560:	e50b300c 	str	r3, [fp, #-12]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
  11b564:	ea000007 	b	11b588 <pbuf_skip_const+0x50>
    offset_left -= q->len;
  11b568:	e51b300c 	ldr	r3, [fp, #-12]
  11b56c:	e1d330ba 	ldrh	r3, [r3, #10]
  11b570:	e15b20b6 	ldrh	r2, [fp, #-6]
  11b574:	e0423003 	sub	r3, r2, r3
  11b578:	e14b30b6 	strh	r3, [fp, #-6]
    q = q->next;
  11b57c:	e51b300c 	ldr	r3, [fp, #-12]
  11b580:	e5933000 	ldr	r3, [r3]
  11b584:	e50b300c 	str	r3, [fp, #-12]
  while ((q != NULL) && (q->len <= offset_left)) {
  11b588:	e51b300c 	ldr	r3, [fp, #-12]
  11b58c:	e3530000 	cmp	r3, #0
  11b590:	0a000004 	beq	11b5a8 <pbuf_skip_const+0x70>
  11b594:	e51b300c 	ldr	r3, [fp, #-12]
  11b598:	e1d330ba 	ldrh	r3, [r3, #10]
  11b59c:	e15b20b6 	ldrh	r2, [fp, #-6]
  11b5a0:	e1520003 	cmp	r2, r3
  11b5a4:	2affffef 	bcs	11b568 <pbuf_skip_const+0x30>
  }
  if (out_offset != NULL) {
  11b5a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b5ac:	e3530000 	cmp	r3, #0
  11b5b0:	0a000002 	beq	11b5c0 <pbuf_skip_const+0x88>
    *out_offset = offset_left;
  11b5b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b5b8:	e15b20b6 	ldrh	r2, [fp, #-6]
  11b5bc:	e1c320b0 	strh	r2, [r3]
  }
  return q;
  11b5c0:	e51b300c 	ldr	r3, [fp, #-12]
}
  11b5c4:	e1a00003 	mov	r0, r3
  11b5c8:	e28bd000 	add	sp, fp, #0
  11b5cc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11b5d0:	e12fff1e 	bx	lr

0011b5d4 <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf*
pbuf_skip(struct pbuf* in, u16_t in_offset, u16_t* out_offset)
{
  11b5d4:	e92d4800 	push	{fp, lr}
  11b5d8:	e28db004 	add	fp, sp, #4
  11b5dc:	e24dd018 	sub	sp, sp, #24
  11b5e0:	e50b0010 	str	r0, [fp, #-16]
  11b5e4:	e1a03001 	mov	r3, r1
  11b5e8:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  11b5ec:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  const struct pbuf* out = pbuf_skip_const(in, in_offset, out_offset);
  11b5f0:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11b5f4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11b5f8:	e1a01003 	mov	r1, r3
  11b5fc:	e51b0010 	ldr	r0, [fp, #-16]
  11b600:	ebffffcc 	bl	11b538 <pbuf_skip_const>
  11b604:	e50b0008 	str	r0, [fp, #-8]
  return LWIP_CONST_CAST(struct pbuf*, out);
  11b608:	e51b3008 	ldr	r3, [fp, #-8]
}
  11b60c:	e1a00003 	mov	r0, r3
  11b610:	e24bd004 	sub	sp, fp, #4
  11b614:	e8bd8800 	pop	{fp, pc}

0011b618 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
  11b618:	e92d4800 	push	{fp, lr}
  11b61c:	e28db004 	add	fp, sp, #4
  11b620:	e24dd020 	sub	sp, sp, #32
  11b624:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11b628:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  11b62c:	e1a03002 	mov	r3, r2
  11b630:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
  struct pbuf *p;
  u16_t buf_copy_len;
  u16_t total_copy_len = len;
  11b634:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11b638:	e14b30bc 	strh	r3, [fp, #-12]
  u16_t copied_total = 0;
  11b63c:	e3a03000 	mov	r3, #0
  11b640:	e14b30be 	strh	r3, [fp, #-14]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
  11b644:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b648:	e3530000 	cmp	r3, #0
  11b64c:	1a000008 	bne	11b674 <pbuf_take+0x5c>
  11b650:	e3060fa8 	movw	r0, #28584	; 0x6fa8
  11b654:	e3400014 	movt	r0, #20
  11b658:	ebff9ead 	bl	103114 <rt_kprintf>
  11b65c:	e3001485 	movw	r1, #1157	; 0x485
  11b660:	e3060b7c 	movw	r0, #27516	; 0x6b7c
  11b664:	e3400014 	movt	r0, #20
  11b668:	ebffbd29 	bl	10ab14 <sys_arch_assert>
  11b66c:	e3e0300f 	mvn	r3, #15
  11b670:	ea000062 	b	11b800 <pbuf_take+0x1e8>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
  11b674:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11b678:	e3530000 	cmp	r3, #0
  11b67c:	1a000008 	bne	11b6a4 <pbuf_take+0x8c>
  11b680:	e3060fc0 	movw	r0, #28608	; 0x6fc0
  11b684:	e3400014 	movt	r0, #20
  11b688:	ebff9ea1 	bl	103114 <rt_kprintf>
  11b68c:	e3001486 	movw	r1, #1158	; 0x486
  11b690:	e3060b7c 	movw	r0, #27516	; 0x6b7c
  11b694:	e3400014 	movt	r0, #20
  11b698:	ebffbd1d 	bl	10ab14 <sys_arch_assert>
  11b69c:	e3e0300f 	mvn	r3, #15
  11b6a0:	ea000056 	b	11b800 <pbuf_take+0x1e8>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
  11b6a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b6a8:	e1d330b8 	ldrh	r3, [r3, #8]
  11b6ac:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  11b6b0:	e1520003 	cmp	r2, r3
  11b6b4:	9a000008 	bls	11b6dc <pbuf_take+0xc4>
  11b6b8:	e3060fdc 	movw	r0, #28636	; 0x6fdc
  11b6bc:	e3400014 	movt	r0, #20
  11b6c0:	ebff9e93 	bl	103114 <rt_kprintf>
  11b6c4:	e3001487 	movw	r1, #1159	; 0x487
  11b6c8:	e3060b7c 	movw	r0, #27516	; 0x6b7c
  11b6cc:	e3400014 	movt	r0, #20
  11b6d0:	ebffbd0f 	bl	10ab14 <sys_arch_assert>
  11b6d4:	e3e03000 	mvn	r3, #0
  11b6d8:	ea000048 	b	11b800 <pbuf_take+0x1e8>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
  11b6dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b6e0:	e3530000 	cmp	r3, #0
  11b6e4:	0a000007 	beq	11b708 <pbuf_take+0xf0>
  11b6e8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11b6ec:	e3530000 	cmp	r3, #0
  11b6f0:	0a000004 	beq	11b708 <pbuf_take+0xf0>
  11b6f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b6f8:	e1d330b8 	ldrh	r3, [r3, #8]
  11b6fc:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  11b700:	e1520003 	cmp	r2, r3
  11b704:	9a000001 	bls	11b710 <pbuf_take+0xf8>
    return ERR_ARG;
  11b708:	e3e0300f 	mvn	r3, #15
  11b70c:	ea00003b 	b	11b800 <pbuf_take+0x1e8>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
  11b710:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b714:	e50b3008 	str	r3, [fp, #-8]
  11b718:	ea000026 	b	11b7b8 <pbuf_take+0x1a0>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
  11b71c:	e51b3008 	ldr	r3, [fp, #-8]
  11b720:	e3530000 	cmp	r3, #0
  11b724:	1a000006 	bne	11b744 <pbuf_take+0x12c>
  11b728:	e3060ffc 	movw	r0, #28668	; 0x6ffc
  11b72c:	e3400014 	movt	r0, #20
  11b730:	ebff9e77 	bl	103114 <rt_kprintf>
  11b734:	e300148f 	movw	r1, #1167	; 0x48f
  11b738:	e3060b7c 	movw	r0, #27516	; 0x6b7c
  11b73c:	e3400014 	movt	r0, #20
  11b740:	ebffbcf3 	bl	10ab14 <sys_arch_assert>
    buf_copy_len = total_copy_len;
  11b744:	e15b30bc 	ldrh	r3, [fp, #-12]
  11b748:	e14b30ba 	strh	r3, [fp, #-10]
    if (buf_copy_len > p->len) {
  11b74c:	e51b3008 	ldr	r3, [fp, #-8]
  11b750:	e1d330ba 	ldrh	r3, [r3, #10]
  11b754:	e15b20ba 	ldrh	r2, [fp, #-10]
  11b758:	e1520003 	cmp	r2, r3
  11b75c:	9a000002 	bls	11b76c <pbuf_take+0x154>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
  11b760:	e51b3008 	ldr	r3, [fp, #-8]
  11b764:	e1d330ba 	ldrh	r3, [r3, #10]
  11b768:	e14b30ba 	strh	r3, [fp, #-10]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char*)dataptr)[copied_total], buf_copy_len);
  11b76c:	e51b3008 	ldr	r3, [fp, #-8]
  11b770:	e5930004 	ldr	r0, [r3, #4]
  11b774:	e15b30be 	ldrh	r3, [fp, #-14]
  11b778:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  11b77c:	e0823003 	add	r3, r2, r3
  11b780:	e15b20ba 	ldrh	r2, [fp, #-10]
  11b784:	e1a01003 	mov	r1, r3
  11b788:	eb00931f 	bl	14040c <memcpy>
    total_copy_len -= buf_copy_len;
  11b78c:	e15b20bc 	ldrh	r2, [fp, #-12]
  11b790:	e15b30ba 	ldrh	r3, [fp, #-10]
  11b794:	e0423003 	sub	r3, r2, r3
  11b798:	e14b30bc 	strh	r3, [fp, #-12]
    copied_total += buf_copy_len;
  11b79c:	e15b20be 	ldrh	r2, [fp, #-14]
  11b7a0:	e15b30ba 	ldrh	r3, [fp, #-10]
  11b7a4:	e0823003 	add	r3, r2, r3
  11b7a8:	e14b30be 	strh	r3, [fp, #-14]
  for (p = buf; total_copy_len != 0; p = p->next) {
  11b7ac:	e51b3008 	ldr	r3, [fp, #-8]
  11b7b0:	e5933000 	ldr	r3, [r3]
  11b7b4:	e50b3008 	str	r3, [fp, #-8]
  11b7b8:	e15b30bc 	ldrh	r3, [fp, #-12]
  11b7bc:	e3530000 	cmp	r3, #0
  11b7c0:	1affffd5 	bne	11b71c <pbuf_take+0x104>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
  11b7c4:	e15b30bc 	ldrh	r3, [fp, #-12]
  11b7c8:	e3530000 	cmp	r3, #0
  11b7cc:	1a000003 	bne	11b7e0 <pbuf_take+0x1c8>
  11b7d0:	e15b20be 	ldrh	r2, [fp, #-14]
  11b7d4:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11b7d8:	e1520003 	cmp	r2, r3
  11b7dc:	0a000006 	beq	11b7fc <pbuf_take+0x1e4>
  11b7e0:	e3070014 	movw	r0, #28692	; 0x7014
  11b7e4:	e3400014 	movt	r0, #20
  11b7e8:	ebff9e49 	bl	103114 <rt_kprintf>
  11b7ec:	e300149a 	movw	r1, #1178	; 0x49a
  11b7f0:	e3060b7c 	movw	r0, #27516	; 0x6b7c
  11b7f4:	e3400014 	movt	r0, #20
  11b7f8:	ebffbcc5 	bl	10ab14 <sys_arch_assert>
  return ERR_OK;
  11b7fc:	e3a03000 	mov	r3, #0
}
  11b800:	e1a00003 	mov	r0, r3
  11b804:	e24bd004 	sub	sp, fp, #4
  11b808:	e8bd8800 	pop	{fp, pc}

0011b80c <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
  11b80c:	e92d4800 	push	{fp, lr}
  11b810:	e28db004 	add	fp, sp, #4
  11b814:	e24dd020 	sub	sp, sp, #32
  11b818:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11b81c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  11b820:	e1a01002 	mov	r1, r2
  11b824:	e1a02003 	mov	r2, r3
  11b828:	e1a03001 	mov	r3, r1
  11b82c:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
  11b830:	e1a03002 	mov	r3, r2
  11b834:	e14b32b0 	strh	r3, [fp, #-32]	; 0xffffffe0
  u16_t target_offset;
  struct pbuf* q = pbuf_skip(buf, offset, &target_offset);
  11b838:	e24b2014 	sub	r2, fp, #20
  11b83c:	e15b32b0 	ldrh	r3, [fp, #-32]	; 0xffffffe0
  11b840:	e1a01003 	mov	r1, r3
  11b844:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  11b848:	ebffff61 	bl	11b5d4 <pbuf_skip>
  11b84c:	e50b0008 	str	r0, [fp, #-8]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
  11b850:	e51b3008 	ldr	r3, [fp, #-8]
  11b854:	e3530000 	cmp	r3, #0
  11b858:	0a000033 	beq	11b92c <pbuf_take_at+0x120>
  11b85c:	e51b3008 	ldr	r3, [fp, #-8]
  11b860:	e1d330b8 	ldrh	r3, [r3, #8]
  11b864:	e1a02003 	mov	r2, r3
  11b868:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  11b86c:	e1a01003 	mov	r1, r3
  11b870:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11b874:	e0813003 	add	r3, r1, r3
  11b878:	e1520003 	cmp	r2, r3
  11b87c:	ba00002a 	blt	11b92c <pbuf_take_at+0x120>
    u16_t remaining_len = len;
  11b880:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11b884:	e14b30ba 	strh	r3, [fp, #-10]
    const u8_t* src_ptr = (const u8_t*)dataptr;
  11b888:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11b88c:	e50b3010 	str	r3, [fp, #-16]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len = LWIP_MIN(q->len - target_offset, len);
  11b890:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  11b894:	e51b3008 	ldr	r3, [fp, #-8]
  11b898:	e1d330ba 	ldrh	r3, [r3, #10]
  11b89c:	e1a01003 	mov	r1, r3
  11b8a0:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  11b8a4:	e0413003 	sub	r3, r1, r3
  11b8a8:	e1520003 	cmp	r2, r3
  11b8ac:	b1a03002 	movlt	r3, r2
  11b8b0:	a1a03003 	movge	r3, r3
  11b8b4:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
    MEMCPY(((u8_t*)q->payload) + target_offset, dataptr, first_copy_len);
  11b8b8:	e51b3008 	ldr	r3, [fp, #-8]
  11b8bc:	e5933004 	ldr	r3, [r3, #4]
  11b8c0:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
  11b8c4:	e0833002 	add	r3, r3, r2
  11b8c8:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  11b8cc:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  11b8d0:	e1a00003 	mov	r0, r3
  11b8d4:	eb0092cc 	bl	14040c <memcpy>
    remaining_len -= first_copy_len;
  11b8d8:	e15b20ba 	ldrh	r2, [fp, #-10]
  11b8dc:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11b8e0:	e0423003 	sub	r3, r2, r3
  11b8e4:	e14b30ba 	strh	r3, [fp, #-10]
    src_ptr += first_copy_len;
  11b8e8:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11b8ec:	e51b2010 	ldr	r2, [fp, #-16]
  11b8f0:	e0823003 	add	r3, r2, r3
  11b8f4:	e50b3010 	str	r3, [fp, #-16]
    if (remaining_len > 0) {
  11b8f8:	e15b30ba 	ldrh	r3, [fp, #-10]
  11b8fc:	e3530000 	cmp	r3, #0
  11b900:	0a000007 	beq	11b924 <pbuf_take_at+0x118>
      return pbuf_take(q->next, src_ptr, remaining_len);
  11b904:	e51b3008 	ldr	r3, [fp, #-8]
  11b908:	e5933000 	ldr	r3, [r3]
  11b90c:	e15b20ba 	ldrh	r2, [fp, #-10]
  11b910:	e51b1010 	ldr	r1, [fp, #-16]
  11b914:	e1a00003 	mov	r0, r3
  11b918:	ebffff3e 	bl	11b618 <pbuf_take>
  11b91c:	e1a03000 	mov	r3, r0
  11b920:	ea000002 	b	11b930 <pbuf_take_at+0x124>
    }
    return ERR_OK;
  11b924:	e3a03000 	mov	r3, #0
  11b928:	ea000000 	b	11b930 <pbuf_take_at+0x124>
  }
  return ERR_MEM;
  11b92c:	e3e03000 	mvn	r3, #0
}
  11b930:	e1a00003 	mov	r0, r3
  11b934:	e24bd004 	sub	sp, fp, #4
  11b938:	e8bd8800 	pop	{fp, pc}

0011b93c <pbuf_coalesce>:
 * @return a new, single pbuf (p->next is NULL)
 *         or the old pbuf if allocation fails
 */
struct pbuf*
pbuf_coalesce(struct pbuf *p, pbuf_layer layer)
{
  11b93c:	e92d4800 	push	{fp, lr}
  11b940:	e28db004 	add	fp, sp, #4
  11b944:	e24dd010 	sub	sp, sp, #16
  11b948:	e50b0010 	str	r0, [fp, #-16]
  11b94c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct pbuf *q;
  err_t err;
  if (p->next == NULL) {
  11b950:	e51b3010 	ldr	r3, [fp, #-16]
  11b954:	e5933000 	ldr	r3, [r3]
  11b958:	e3530000 	cmp	r3, #0
  11b95c:	1a000001 	bne	11b968 <pbuf_coalesce+0x2c>
    return p;
  11b960:	e51b3010 	ldr	r3, [fp, #-16]
  11b964:	ea00001d 	b	11b9e0 <pbuf_coalesce+0xa4>
  }
  q = pbuf_alloc(layer, p->tot_len, PBUF_RAM);
  11b968:	e51b3010 	ldr	r3, [fp, #-16]
  11b96c:	e1d330b8 	ldrh	r3, [r3, #8]
  11b970:	e3a02000 	mov	r2, #0
  11b974:	e1a01003 	mov	r1, r3
  11b978:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  11b97c:	ebfff96b 	bl	119f30 <pbuf_alloc>
  11b980:	e50b0008 	str	r0, [fp, #-8]
  if (q == NULL) {
  11b984:	e51b3008 	ldr	r3, [fp, #-8]
  11b988:	e3530000 	cmp	r3, #0
  11b98c:	1a000001 	bne	11b998 <pbuf_coalesce+0x5c>
    /* @todo: what do we do now? */
    return p;
  11b990:	e51b3010 	ldr	r3, [fp, #-16]
  11b994:	ea000011 	b	11b9e0 <pbuf_coalesce+0xa4>
  }
  err = pbuf_copy(q, p);
  11b998:	e51b1010 	ldr	r1, [fp, #-16]
  11b99c:	e51b0008 	ldr	r0, [fp, #-8]
  11b9a0:	ebfffdbe 	bl	11b0a0 <pbuf_copy>
  11b9a4:	e1a03000 	mov	r3, r0
  11b9a8:	e54b3009 	strb	r3, [fp, #-9]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
  11b9ac:	e15b30d9 	ldrsb	r3, [fp, #-9]
  11b9b0:	e3530000 	cmp	r3, #0
  11b9b4:	0a000006 	beq	11b9d4 <pbuf_coalesce+0x98>
  11b9b8:	e307002c 	movw	r0, #28716	; 0x702c
  11b9bc:	e3400014 	movt	r0, #20
  11b9c0:	ebff9dd3 	bl	103114 <rt_kprintf>
  11b9c4:	e30014dc 	movw	r1, #1244	; 0x4dc
  11b9c8:	e3060b7c 	movw	r0, #27516	; 0x6b7c
  11b9cc:	e3400014 	movt	r0, #20
  11b9d0:	ebffbc4f 	bl	10ab14 <sys_arch_assert>
  pbuf_free(p);
  11b9d4:	e51b0010 	ldr	r0, [fp, #-16]
  11b9d8:	ebfffc5b 	bl	11ab4c <pbuf_free>
  return q;
  11b9dc:	e51b3008 	ldr	r3, [fp, #-8]
}
  11b9e0:	e1a00003 	mov	r0, r3
  11b9e4:	e24bd004 	sub	sp, fp, #4
  11b9e8:	e8bd8800 	pop	{fp, pc}

0011b9ec <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf* p, u16_t offset)
{
  11b9ec:	e92d4800 	push	{fp, lr}
  11b9f0:	e28db004 	add	fp, sp, #4
  11b9f4:	e24dd010 	sub	sp, sp, #16
  11b9f8:	e50b0010 	str	r0, [fp, #-16]
  11b9fc:	e1a03001 	mov	r3, r1
  11ba00:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  int ret = pbuf_try_get_at(p, offset);
  11ba04:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11ba08:	e1a01003 	mov	r1, r3
  11ba0c:	e51b0010 	ldr	r0, [fp, #-16]
  11ba10:	eb00000a 	bl	11ba40 <pbuf_try_get_at>
  11ba14:	e50b0008 	str	r0, [fp, #-8]
  if (ret >= 0) {
  11ba18:	e51b3008 	ldr	r3, [fp, #-8]
  11ba1c:	e3530000 	cmp	r3, #0
  11ba20:	ba000002 	blt	11ba30 <pbuf_get_at+0x44>
    return (u8_t)ret;
  11ba24:	e51b3008 	ldr	r3, [fp, #-8]
  11ba28:	e6ef3073 	uxtb	r3, r3
  11ba2c:	ea000000 	b	11ba34 <pbuf_get_at+0x48>
  }
  return 0;
  11ba30:	e3a03000 	mov	r3, #0
}
  11ba34:	e1a00003 	mov	r0, r3
  11ba38:	e24bd004 	sub	sp, fp, #4
  11ba3c:	e8bd8800 	pop	{fp, pc}

0011ba40 <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf* p, u16_t offset)
{
  11ba40:	e92d4800 	push	{fp, lr}
  11ba44:	e28db004 	add	fp, sp, #4
  11ba48:	e24dd010 	sub	sp, sp, #16
  11ba4c:	e50b0010 	str	r0, [fp, #-16]
  11ba50:	e1a03001 	mov	r3, r1
  11ba54:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  u16_t q_idx;
  const struct pbuf* q = pbuf_skip_const(p, offset, &q_idx);
  11ba58:	e24b200a 	sub	r2, fp, #10
  11ba5c:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11ba60:	e1a01003 	mov	r1, r3
  11ba64:	e51b0010 	ldr	r0, [fp, #-16]
  11ba68:	ebfffeb2 	bl	11b538 <pbuf_skip_const>
  11ba6c:	e50b0008 	str	r0, [fp, #-8]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
  11ba70:	e51b3008 	ldr	r3, [fp, #-8]
  11ba74:	e3530000 	cmp	r3, #0
  11ba78:	0a00000a 	beq	11baa8 <pbuf_try_get_at+0x68>
  11ba7c:	e51b3008 	ldr	r3, [fp, #-8]
  11ba80:	e1d320ba 	ldrh	r2, [r3, #10]
  11ba84:	e15b30ba 	ldrh	r3, [fp, #-10]
  11ba88:	e1520003 	cmp	r2, r3
  11ba8c:	9a000005 	bls	11baa8 <pbuf_try_get_at+0x68>
    return ((u8_t*)q->payload)[q_idx];
  11ba90:	e51b3008 	ldr	r3, [fp, #-8]
  11ba94:	e5933004 	ldr	r3, [r3, #4]
  11ba98:	e15b20ba 	ldrh	r2, [fp, #-10]
  11ba9c:	e0833002 	add	r3, r3, r2
  11baa0:	e5d33000 	ldrb	r3, [r3]
  11baa4:	ea000000 	b	11baac <pbuf_try_get_at+0x6c>
  }
  return -1;
  11baa8:	e3e03000 	mvn	r3, #0
}
  11baac:	e1a00003 	mov	r0, r3
  11bab0:	e24bd004 	sub	sp, fp, #4
  11bab4:	e8bd8800 	pop	{fp, pc}

0011bab8 <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf* p, u16_t offset, u8_t data)
{
  11bab8:	e92d4800 	push	{fp, lr}
  11babc:	e28db004 	add	fp, sp, #4
  11bac0:	e24dd010 	sub	sp, sp, #16
  11bac4:	e50b0010 	str	r0, [fp, #-16]
  11bac8:	e1a03001 	mov	r3, r1
  11bacc:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  11bad0:	e1a03002 	mov	r3, r2
  11bad4:	e54b3013 	strb	r3, [fp, #-19]	; 0xffffffed
  u16_t q_idx;
  struct pbuf* q = pbuf_skip(p, offset, &q_idx);
  11bad8:	e24b200a 	sub	r2, fp, #10
  11badc:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11bae0:	e1a01003 	mov	r1, r3
  11bae4:	e51b0010 	ldr	r0, [fp, #-16]
  11bae8:	ebfffeb9 	bl	11b5d4 <pbuf_skip>
  11baec:	e50b0008 	str	r0, [fp, #-8]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
  11baf0:	e51b3008 	ldr	r3, [fp, #-8]
  11baf4:	e3530000 	cmp	r3, #0
  11baf8:	0a00000a 	beq	11bb28 <pbuf_put_at+0x70>
  11bafc:	e51b3008 	ldr	r3, [fp, #-8]
  11bb00:	e1d320ba 	ldrh	r2, [r3, #10]
  11bb04:	e15b30ba 	ldrh	r3, [fp, #-10]
  11bb08:	e1520003 	cmp	r2, r3
  11bb0c:	9a000005 	bls	11bb28 <pbuf_put_at+0x70>
    ((u8_t*)q->payload)[q_idx] = data;
  11bb10:	e51b3008 	ldr	r3, [fp, #-8]
  11bb14:	e5933004 	ldr	r3, [r3, #4]
  11bb18:	e15b20ba 	ldrh	r2, [fp, #-10]
  11bb1c:	e0833002 	add	r3, r3, r2
  11bb20:	e55b2013 	ldrb	r2, [fp, #-19]	; 0xffffffed
  11bb24:	e5c32000 	strb	r2, [r3]
  }
}
  11bb28:	e320f000 	nop	{0}
  11bb2c:	e24bd004 	sub	sp, fp, #4
  11bb30:	e8bd8800 	pop	{fp, pc}

0011bb34 <pbuf_memcmp>:
 * @return zero if equal, nonzero otherwise
 *         (0xffff if p is too short, diffoffset+1 otherwise)
 */
u16_t
pbuf_memcmp(const struct pbuf* p, u16_t offset, const void* s2, u16_t n)
{
  11bb34:	e92d4800 	push	{fp, lr}
  11bb38:	e28db004 	add	fp, sp, #4
  11bb3c:	e24dd020 	sub	sp, sp, #32
  11bb40:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11bb44:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  11bb48:	e1a02003 	mov	r2, r3
  11bb4c:	e1a03001 	mov	r3, r1
  11bb50:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
  11bb54:	e1a03002 	mov	r3, r2
  11bb58:	e14b31bc 	strh	r3, [fp, #-28]	; 0xffffffe4
  u16_t start = offset;
  11bb5c:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  11bb60:	e14b30b6 	strh	r3, [fp, #-6]
  const struct pbuf* q = p;
  11bb64:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11bb68:	e50b300c 	str	r3, [fp, #-12]
  u16_t i;
 
  /* pbuf long enough to perform check? */
  if(p->tot_len < (offset + n)) {
  11bb6c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11bb70:	e1d330b8 	ldrh	r3, [r3, #8]
  11bb74:	e1a01003 	mov	r1, r3
  11bb78:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
  11bb7c:	e15b31bc 	ldrh	r3, [fp, #-28]	; 0xffffffe4
  11bb80:	e0823003 	add	r3, r2, r3
  11bb84:	e1510003 	cmp	r1, r3
  11bb88:	aa000009 	bge	11bbb4 <pbuf_memcmp+0x80>
    return 0xffff;
  11bb8c:	e30f3fff 	movw	r3, #65535	; 0xffff
  11bb90:	ea000030 	b	11bc58 <pbuf_memcmp+0x124>
  }
 
  /* get the correct pbuf from chain. We know it succeeds because of p->tot_len check above. */
  while ((q != NULL) && (q->len <= start)) {
    start -= q->len;
  11bb94:	e51b300c 	ldr	r3, [fp, #-12]
  11bb98:	e1d330ba 	ldrh	r3, [r3, #10]
  11bb9c:	e15b20b6 	ldrh	r2, [fp, #-6]
  11bba0:	e0423003 	sub	r3, r2, r3
  11bba4:	e14b30b6 	strh	r3, [fp, #-6]
    q = q->next;
  11bba8:	e51b300c 	ldr	r3, [fp, #-12]
  11bbac:	e5933000 	ldr	r3, [r3]
  11bbb0:	e50b300c 	str	r3, [fp, #-12]
  while ((q != NULL) && (q->len <= start)) {
  11bbb4:	e51b300c 	ldr	r3, [fp, #-12]
  11bbb8:	e3530000 	cmp	r3, #0
  11bbbc:	0a000004 	beq	11bbd4 <pbuf_memcmp+0xa0>
  11bbc0:	e51b300c 	ldr	r3, [fp, #-12]
  11bbc4:	e1d330ba 	ldrh	r3, [r3, #10]
  11bbc8:	e15b20b6 	ldrh	r2, [fp, #-6]
  11bbcc:	e1520003 	cmp	r2, r3
  11bbd0:	2affffef 	bcs	11bb94 <pbuf_memcmp+0x60>
  }
 
  /* return requested data if pbuf is OK */
  for (i = 0; i < n; i++) {
  11bbd4:	e3a03000 	mov	r3, #0
  11bbd8:	e14b30be 	strh	r3, [fp, #-14]
  11bbdc:	ea000018 	b	11bc44 <pbuf_memcmp+0x110>
    /* We know pbuf_get_at() succeeds because of p->tot_len check above. */
    u8_t a = pbuf_get_at(q, start + i);
  11bbe0:	e15b20b6 	ldrh	r2, [fp, #-6]
  11bbe4:	e15b30be 	ldrh	r3, [fp, #-14]
  11bbe8:	e0823003 	add	r3, r2, r3
  11bbec:	e6ff3073 	uxth	r3, r3
  11bbf0:	e1a01003 	mov	r1, r3
  11bbf4:	e51b000c 	ldr	r0, [fp, #-12]
  11bbf8:	ebffff7b 	bl	11b9ec <pbuf_get_at>
  11bbfc:	e1a03000 	mov	r3, r0
  11bc00:	e54b300f 	strb	r3, [fp, #-15]
    u8_t b = ((const u8_t*)s2)[i];
  11bc04:	e15b30be 	ldrh	r3, [fp, #-14]
  11bc08:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  11bc0c:	e0823003 	add	r3, r2, r3
  11bc10:	e5d33000 	ldrb	r3, [r3]
  11bc14:	e54b3010 	strb	r3, [fp, #-16]
    if (a != b) {
  11bc18:	e55b200f 	ldrb	r2, [fp, #-15]
  11bc1c:	e55b3010 	ldrb	r3, [fp, #-16]
  11bc20:	e1520003 	cmp	r2, r3
  11bc24:	0a000003 	beq	11bc38 <pbuf_memcmp+0x104>
      return i+1;
  11bc28:	e15b30be 	ldrh	r3, [fp, #-14]
  11bc2c:	e2833001 	add	r3, r3, #1
  11bc30:	e6ff3073 	uxth	r3, r3
  11bc34:	ea000007 	b	11bc58 <pbuf_memcmp+0x124>
  for (i = 0; i < n; i++) {
  11bc38:	e15b30be 	ldrh	r3, [fp, #-14]
  11bc3c:	e2833001 	add	r3, r3, #1
  11bc40:	e14b30be 	strh	r3, [fp, #-14]
  11bc44:	e15b20be 	ldrh	r2, [fp, #-14]
  11bc48:	e15b31bc 	ldrh	r3, [fp, #-28]	; 0xffffffe4
  11bc4c:	e1520003 	cmp	r2, r3
  11bc50:	3affffe2 	bcc	11bbe0 <pbuf_memcmp+0xac>
    }
  }
  return 0;
  11bc54:	e3a03000 	mov	r3, #0
}
  11bc58:	e1a00003 	mov	r0, r3
  11bc5c:	e24bd004 	sub	sp, fp, #4
  11bc60:	e8bd8800 	pop	{fp, pc}

0011bc64 <pbuf_memfind>:
 * @param start_offset offset into p at which to start searching
 * @return 0xFFFF if substr was not found in p or the index where it was found
 */
u16_t
pbuf_memfind(const struct pbuf* p, const void* mem, u16_t mem_len, u16_t start_offset)
{
  11bc64:	e92d4800 	push	{fp, lr}
  11bc68:	e28db004 	add	fp, sp, #4
  11bc6c:	e24dd018 	sub	sp, sp, #24
  11bc70:	e50b0010 	str	r0, [fp, #-16]
  11bc74:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  11bc78:	e1a01002 	mov	r1, r2
  11bc7c:	e1a02003 	mov	r2, r3
  11bc80:	e1a03001 	mov	r3, r1
  11bc84:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  11bc88:	e1a03002 	mov	r3, r2
  11bc8c:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8
  u16_t i;
  u16_t max = p->tot_len - mem_len;
  11bc90:	e51b3010 	ldr	r3, [fp, #-16]
  11bc94:	e1d320b8 	ldrh	r2, [r3, #8]
  11bc98:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  11bc9c:	e0423003 	sub	r3, r2, r3
  11bca0:	e14b30b8 	strh	r3, [fp, #-8]
  if (p->tot_len >= mem_len + start_offset) {
  11bca4:	e51b3010 	ldr	r3, [fp, #-16]
  11bca8:	e1d330b8 	ldrh	r3, [r3, #8]
  11bcac:	e1a01003 	mov	r1, r3
  11bcb0:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  11bcb4:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
  11bcb8:	e0823003 	add	r3, r2, r3
  11bcbc:	e1510003 	cmp	r1, r3
  11bcc0:	ba000015 	blt	11bd1c <pbuf_memfind+0xb8>
    for (i = start_offset; i <= max; i++) {
  11bcc4:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
  11bcc8:	e14b30b6 	strh	r3, [fp, #-6]
  11bccc:	ea00000e 	b	11bd0c <pbuf_memfind+0xa8>
      u16_t plus = pbuf_memcmp(p, i, mem, mem_len);
  11bcd0:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  11bcd4:	e15b10b6 	ldrh	r1, [fp, #-6]
  11bcd8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11bcdc:	e51b0010 	ldr	r0, [fp, #-16]
  11bce0:	ebffff93 	bl	11bb34 <pbuf_memcmp>
  11bce4:	e1a03000 	mov	r3, r0
  11bce8:	e14b30ba 	strh	r3, [fp, #-10]
      if (plus == 0) {
  11bcec:	e15b30ba 	ldrh	r3, [fp, #-10]
  11bcf0:	e3530000 	cmp	r3, #0
  11bcf4:	1a000001 	bne	11bd00 <pbuf_memfind+0x9c>
        return i;
  11bcf8:	e15b30b6 	ldrh	r3, [fp, #-6]
  11bcfc:	ea000007 	b	11bd20 <pbuf_memfind+0xbc>
    for (i = start_offset; i <= max; i++) {
  11bd00:	e15b30b6 	ldrh	r3, [fp, #-6]
  11bd04:	e2833001 	add	r3, r3, #1
  11bd08:	e14b30b6 	strh	r3, [fp, #-6]
  11bd0c:	e15b20b6 	ldrh	r2, [fp, #-6]
  11bd10:	e15b30b8 	ldrh	r3, [fp, #-8]
  11bd14:	e1520003 	cmp	r2, r3
  11bd18:	9affffec 	bls	11bcd0 <pbuf_memfind+0x6c>
      }
    }
  }
  return 0xFFFF;
  11bd1c:	e30f3fff 	movw	r3, #65535	; 0xffff
}
  11bd20:	e1a00003 	mov	r0, r3
  11bd24:	e24bd004 	sub	sp, fp, #4
  11bd28:	e8bd8800 	pop	{fp, pc}

0011bd2c <pbuf_strstr>:
 * @param substr string to search for in p, maximum length is 0xFFFE
 * @return 0xFFFF if substr was not found in p or the index where it was found
 */
u16_t
pbuf_strstr(const struct pbuf* p, const char* substr)
{
  11bd2c:	e92d4800 	push	{fp, lr}
  11bd30:	e28db004 	add	fp, sp, #4
  11bd34:	e24dd010 	sub	sp, sp, #16
  11bd38:	e50b0010 	str	r0, [fp, #-16]
  11bd3c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  size_t substr_len;
  if ((substr == NULL) || (substr[0] == 0) || (p->tot_len == 0xFFFF)) {
  11bd40:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11bd44:	e3530000 	cmp	r3, #0
  11bd48:	0a000008 	beq	11bd70 <pbuf_strstr+0x44>
  11bd4c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11bd50:	e5d33000 	ldrb	r3, [r3]
  11bd54:	e3530000 	cmp	r3, #0
  11bd58:	0a000004 	beq	11bd70 <pbuf_strstr+0x44>
  11bd5c:	e51b3010 	ldr	r3, [fp, #-16]
  11bd60:	e1d330b8 	ldrh	r3, [r3, #8]
  11bd64:	e30f2fff 	movw	r2, #65535	; 0xffff
  11bd68:	e1530002 	cmp	r3, r2
  11bd6c:	1a000001 	bne	11bd78 <pbuf_strstr+0x4c>
    return 0xFFFF;
  11bd70:	e30f3fff 	movw	r3, #65535	; 0xffff
  11bd74:	ea00000f 	b	11bdb8 <pbuf_strstr+0x8c>
  }
  substr_len = strlen(substr);
  11bd78:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  11bd7c:	eb00936b 	bl	140b30 <strlen>
  11bd80:	e50b0008 	str	r0, [fp, #-8]
  if (substr_len >= 0xFFFF) {
  11bd84:	e51b3008 	ldr	r3, [fp, #-8]
  11bd88:	e30f2ffe 	movw	r2, #65534	; 0xfffe
  11bd8c:	e1530002 	cmp	r3, r2
  11bd90:	9a000001 	bls	11bd9c <pbuf_strstr+0x70>
    return 0xFFFF;
  11bd94:	e30f3fff 	movw	r3, #65535	; 0xffff
  11bd98:	ea000006 	b	11bdb8 <pbuf_strstr+0x8c>
  }
  return pbuf_memfind(p, substr, (u16_t)substr_len, 0);
  11bd9c:	e51b3008 	ldr	r3, [fp, #-8]
  11bda0:	e6ff2073 	uxth	r2, r3
  11bda4:	e3a03000 	mov	r3, #0
  11bda8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  11bdac:	e51b0010 	ldr	r0, [fp, #-16]
  11bdb0:	ebffffab 	bl	11bc64 <pbuf_memfind>
  11bdb4:	e1a03000 	mov	r3, r0
}
  11bdb8:	e1a00003 	mov	r0, r3
  11bdbc:	e24bd004 	sub	sp, fp, #4
  11bdc0:	e8bd8800 	pop	{fp, pc}

0011bdc4 <raw_input_match>:
/** The list of RAW PCBs */
static struct raw_pcb *raw_pcbs;

static u8_t
raw_input_match(struct raw_pcb *pcb, u8_t broadcast)
{
  11bdc4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11bdc8:	e28db000 	add	fp, sp, #0
  11bdcc:	e24dd00c 	sub	sp, sp, #12
  11bdd0:	e50b0008 	str	r0, [fp, #-8]
  11bdd4:	e1a03001 	mov	r3, r1
  11bdd8:	e54b3009 	strb	r3, [fp, #-9]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: receive all broadcasts
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
  11bddc:	e55b3009 	ldrb	r3, [fp, #-9]
  11bde0:	e3530000 	cmp	r3, #0
  11bde4:	0a00000d 	beq	11be20 <raw_input_match+0x5c>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
  11bde8:	e51b3008 	ldr	r3, [fp, #-8]
  11bdec:	e5d33008 	ldrb	r3, [r3, #8]
  11bdf0:	e2033020 	and	r3, r3, #32
  11bdf4:	e3530000 	cmp	r3, #0
  11bdf8:	0a000018 	beq	11be60 <raw_input_match+0x9c>
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip))) {
  11bdfc:	e51b3008 	ldr	r3, [fp, #-8]
  11be00:	e3530000 	cmp	r3, #0
  11be04:	0a000003 	beq	11be18 <raw_input_match+0x54>
  11be08:	e51b3008 	ldr	r3, [fp, #-8]
  11be0c:	e5933000 	ldr	r3, [r3]
  11be10:	e3530000 	cmp	r3, #0
  11be14:	1a000011 	bne	11be60 <raw_input_match+0x9c>
          return 1;
  11be18:	e3a03001 	mov	r3, #1
  11be1c:	ea000010 	b	11be64 <raw_input_match+0xa0>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: catch all or exact match */
    if (ip_addr_isany(&pcb->local_ip) ||
  11be20:	e51b3008 	ldr	r3, [fp, #-8]
  11be24:	e3530000 	cmp	r3, #0
  11be28:	0a00000a 	beq	11be58 <raw_input_match+0x94>
  11be2c:	e51b3008 	ldr	r3, [fp, #-8]
  11be30:	e5933000 	ldr	r3, [r3]
  11be34:	e3530000 	cmp	r3, #0
  11be38:	0a000006 	beq	11be58 <raw_input_match+0x94>
       ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
  11be3c:	e51b3008 	ldr	r3, [fp, #-8]
  11be40:	e5932000 	ldr	r2, [r3]
  11be44:	e30e3d68 	movw	r3, #60776	; 0xed68
  11be48:	e3403014 	movt	r3, #20
  11be4c:	e5933014 	ldr	r3, [r3, #20]
    if (ip_addr_isany(&pcb->local_ip) ||
  11be50:	e1520003 	cmp	r2, r3
  11be54:	1a000001 	bne	11be60 <raw_input_match+0x9c>
      return 1;
  11be58:	e3a03001 	mov	r3, #1
  11be5c:	ea000000 	b	11be64 <raw_input_match+0xa0>
    }
  }

  return 0;
  11be60:	e3a03000 	mov	r3, #0
}
  11be64:	e1a00003 	mov	r0, r3
  11be68:	e28bd000 	add	sp, fp, #0
  11be6c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11be70:	e12fff1e 	bx	lr

0011be74 <raw_input>:
 *           caller).
 *
 */
u8_t
raw_input(struct pbuf *p, struct netif *inp)
{
  11be74:	e92d4810 	push	{r4, fp, lr}
  11be78:	e28db008 	add	fp, sp, #8
  11be7c:	e24dd01c 	sub	sp, sp, #28
  11be80:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  11be84:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  struct raw_pcb *pcb, *prev;
  s16_t proto;
  u8_t eaten = 0;
  11be88:	e3a03000 	mov	r3, #0
  11be8c:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
  11be90:	e30e3d68 	movw	r3, #60776	; 0xed68
  11be94:	e3403014 	movt	r3, #20
  11be98:	e5932014 	ldr	r2, [r3, #20]
  11be9c:	e30e3d68 	movw	r3, #60776	; 0xed68
  11bea0:	e3403014 	movt	r3, #20
  11bea4:	e5933000 	ldr	r3, [r3]
  11bea8:	e1a01003 	mov	r1, r3
  11beac:	e1a00002 	mov	r0, r2
  11beb0:	eb005880 	bl	1320b8 <ip4_addr_isbroadcast_u32>
  11beb4:	e1a03000 	mov	r3, r0
  11beb8:	e54b3016 	strb	r3, [fp, #-22]	; 0xffffffea
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    proto = IPH_PROTO((struct ip_hdr *)p->payload);
  11bebc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11bec0:	e5933004 	ldr	r3, [r3, #4]
  11bec4:	e5d33009 	ldrb	r3, [r3, #9]
  11bec8:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8
  }
#endif /* LWIP_IPV4 */

  prev = NULL;
  11becc:	e3a03000 	mov	r3, #0
  11bed0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  pcb = raw_pcbs;
  11bed4:	e30e320c 	movw	r3, #57868	; 0xe20c
  11bed8:	e3403014 	movt	r3, #20
  11bedc:	e5933000 	ldr	r3, [r3]
  11bee0:	e50b3010 	str	r3, [fp, #-16]
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while ((eaten == 0) && (pcb != NULL)) {
  11bee4:	ea000046 	b	11c004 <raw_input+0x190>
    if ((pcb->protocol == proto) && raw_input_match(pcb, broadcast)) {
  11bee8:	e51b3010 	ldr	r3, [fp, #-16]
  11beec:	e5d33010 	ldrb	r3, [r3, #16]
  11bef0:	e1a02003 	mov	r2, r3
  11bef4:	e15b31f8 	ldrsh	r3, [fp, #-24]	; 0xffffffe8
  11bef8:	e1520003 	cmp	r2, r3
  11befc:	1a00003b 	bne	11bff0 <raw_input+0x17c>
  11bf00:	e55b3016 	ldrb	r3, [fp, #-22]	; 0xffffffea
  11bf04:	e1a01003 	mov	r1, r3
  11bf08:	e51b0010 	ldr	r0, [fp, #-16]
  11bf0c:	ebffffac 	bl	11bdc4 <raw_input_match>
  11bf10:	e1a03000 	mov	r3, r0
  11bf14:	e3530000 	cmp	r3, #0
  11bf18:	0a000034 	beq	11bff0 <raw_input+0x17c>
      /* receive callback function available? */
      if (pcb->recv != NULL) {
  11bf1c:	e51b3010 	ldr	r3, [fp, #-16]
  11bf20:	e5933014 	ldr	r3, [r3, #20]
  11bf24:	e3530000 	cmp	r3, #0
  11bf28:	0a000030 	beq	11bff0 <raw_input+0x17c>
#ifndef LWIP_NOASSERT
        void* old_payload = p->payload;
  11bf2c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11bf30:	e5933004 	ldr	r3, [r3, #4]
  11bf34:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
#endif
        /* the receive callback function did not eat the packet? */
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
  11bf38:	e51b3010 	ldr	r3, [fp, #-16]
  11bf3c:	e5934014 	ldr	r4, [r3, #20]
  11bf40:	e51b3010 	ldr	r3, [fp, #-16]
  11bf44:	e5930018 	ldr	r0, [r3, #24]
  11bf48:	e59f30dc 	ldr	r3, [pc, #220]	; 11c02c <raw_input+0x1b8>
  11bf4c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  11bf50:	e51b1010 	ldr	r1, [fp, #-16]
  11bf54:	e12fff34 	blx	r4
  11bf58:	e1a03000 	mov	r3, r0
  11bf5c:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
        if (eaten != 0) {
  11bf60:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  11bf64:	e3530000 	cmp	r3, #0
  11bf68:	0a000014 	beq	11bfc0 <raw_input+0x14c>
          /* receive function ate the packet */
          p = NULL;
  11bf6c:	e3a03000 	mov	r3, #0
  11bf70:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
          eaten = 1;
  11bf74:	e3a03001 	mov	r3, #1
  11bf78:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
          if (prev != NULL) {
  11bf7c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11bf80:	e3530000 	cmp	r3, #0
  11bf84:	0a000019 	beq	11bff0 <raw_input+0x17c>
          /* move the pcb to the front of raw_pcbs so that is
             found faster next time */
            prev->next = pcb->next;
  11bf88:	e51b3010 	ldr	r3, [fp, #-16]
  11bf8c:	e593200c 	ldr	r2, [r3, #12]
  11bf90:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11bf94:	e583200c 	str	r2, [r3, #12]
            pcb->next = raw_pcbs;
  11bf98:	e30e320c 	movw	r3, #57868	; 0xe20c
  11bf9c:	e3403014 	movt	r3, #20
  11bfa0:	e5932000 	ldr	r2, [r3]
  11bfa4:	e51b3010 	ldr	r3, [fp, #-16]
  11bfa8:	e583200c 	str	r2, [r3, #12]
            raw_pcbs = pcb;
  11bfac:	e30e320c 	movw	r3, #57868	; 0xe20c
  11bfb0:	e3403014 	movt	r3, #20
  11bfb4:	e51b2010 	ldr	r2, [fp, #-16]
  11bfb8:	e5832000 	str	r2, [r3]
  11bfbc:	ea00000b 	b	11bff0 <raw_input+0x17c>
          }
        } else {
          /* sanity-check that the receive callback did not alter the pbuf */
          LWIP_ASSERT("raw pcb recv callback altered pbuf payload pointer without eating packet",
  11bfc0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11bfc4:	e5933004 	ldr	r3, [r3, #4]
  11bfc8:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  11bfcc:	e1520003 	cmp	r2, r3
  11bfd0:	0a000006 	beq	11bff0 <raw_input+0x17c>
  11bfd4:	e3070040 	movw	r0, #28736	; 0x7040
  11bfd8:	e3400014 	movt	r0, #20
  11bfdc:	ebff9c4c 	bl	103114 <rt_kprintf>
  11bfe0:	e3a010b6 	mov	r1, #182	; 0xb6
  11bfe4:	e307008c 	movw	r0, #28812	; 0x708c
  11bfe8:	e3400014 	movt	r0, #20
  11bfec:	ebffbac8 	bl	10ab14 <sys_arch_assert>
        }
      }
      /* no receive callback function was set for this raw PCB */
    }
    /* drop the packet */
    prev = pcb;
  11bff0:	e51b3010 	ldr	r3, [fp, #-16]
  11bff4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    pcb = pcb->next;
  11bff8:	e51b3010 	ldr	r3, [fp, #-16]
  11bffc:	e593300c 	ldr	r3, [r3, #12]
  11c000:	e50b3010 	str	r3, [fp, #-16]
  while ((eaten == 0) && (pcb != NULL)) {
  11c004:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  11c008:	e3530000 	cmp	r3, #0
  11c00c:	1a000002 	bne	11c01c <raw_input+0x1a8>
  11c010:	e51b3010 	ldr	r3, [fp, #-16]
  11c014:	e3530000 	cmp	r3, #0
  11c018:	1affffb2 	bne	11bee8 <raw_input+0x74>
  }
  return eaten;
  11c01c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
}
  11c020:	e1a00003 	mov	r0, r3
  11c024:	e24bd008 	sub	sp, fp, #8
  11c028:	e8bd8810 	pop	{r4, fp, pc}
  11c02c:	0014ed78 	.word	0x0014ed78

0011c030 <raw_bind>:
 *
 * @see raw_disconnect()
 */
err_t
raw_bind(struct raw_pcb *pcb, const ip_addr_t *ipaddr)
{
  11c030:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11c034:	e28db000 	add	fp, sp, #0
  11c038:	e24dd00c 	sub	sp, sp, #12
  11c03c:	e50b0008 	str	r0, [fp, #-8]
  11c040:	e50b100c 	str	r1, [fp, #-12]
  if ((pcb == NULL) || (ipaddr == NULL)) {
  11c044:	e51b3008 	ldr	r3, [fp, #-8]
  11c048:	e3530000 	cmp	r3, #0
  11c04c:	0a000002 	beq	11c05c <raw_bind+0x2c>
  11c050:	e51b300c 	ldr	r3, [fp, #-12]
  11c054:	e3530000 	cmp	r3, #0
  11c058:	1a000001 	bne	11c064 <raw_bind+0x34>
    return ERR_VAL;
  11c05c:	e3e03005 	mvn	r3, #5
  11c060:	ea000009 	b	11c08c <raw_bind+0x5c>
  }
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
  11c064:	e51b300c 	ldr	r3, [fp, #-12]
  11c068:	e3530000 	cmp	r3, #0
  11c06c:	0a000002 	beq	11c07c <raw_bind+0x4c>
  11c070:	e51b300c 	ldr	r3, [fp, #-12]
  11c074:	e5933000 	ldr	r3, [r3]
  11c078:	ea000000 	b	11c080 <raw_bind+0x50>
  11c07c:	e3a03000 	mov	r3, #0
  11c080:	e51b2008 	ldr	r2, [fp, #-8]
  11c084:	e5823000 	str	r3, [r2]
  return ERR_OK;
  11c088:	e3a03000 	mov	r3, #0
}
  11c08c:	e1a00003 	mov	r0, r3
  11c090:	e28bd000 	add	sp, fp, #0
  11c094:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11c098:	e12fff1e 	bx	lr

0011c09c <raw_connect>:
 *
 * @see raw_disconnect() and raw_sendto()
 */
err_t
raw_connect(struct raw_pcb *pcb, const ip_addr_t *ipaddr)
{
  11c09c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11c0a0:	e28db000 	add	fp, sp, #0
  11c0a4:	e24dd00c 	sub	sp, sp, #12
  11c0a8:	e50b0008 	str	r0, [fp, #-8]
  11c0ac:	e50b100c 	str	r1, [fp, #-12]
  if ((pcb == NULL) || (ipaddr == NULL)) {
  11c0b0:	e51b3008 	ldr	r3, [fp, #-8]
  11c0b4:	e3530000 	cmp	r3, #0
  11c0b8:	0a000002 	beq	11c0c8 <raw_connect+0x2c>
  11c0bc:	e51b300c 	ldr	r3, [fp, #-12]
  11c0c0:	e3530000 	cmp	r3, #0
  11c0c4:	1a000001 	bne	11c0d0 <raw_connect+0x34>
    return ERR_VAL;
  11c0c8:	e3e03005 	mvn	r3, #5
  11c0cc:	ea000009 	b	11c0f8 <raw_connect+0x5c>
  }
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
  11c0d0:	e51b300c 	ldr	r3, [fp, #-12]
  11c0d4:	e3530000 	cmp	r3, #0
  11c0d8:	0a000002 	beq	11c0e8 <raw_connect+0x4c>
  11c0dc:	e51b300c 	ldr	r3, [fp, #-12]
  11c0e0:	e5933000 	ldr	r3, [r3]
  11c0e4:	ea000000 	b	11c0ec <raw_connect+0x50>
  11c0e8:	e3a03000 	mov	r3, #0
  11c0ec:	e51b2008 	ldr	r2, [fp, #-8]
  11c0f0:	e5823004 	str	r3, [r2, #4]
  return ERR_OK;
  11c0f4:	e3a03000 	mov	r3, #0
}
  11c0f8:	e1a00003 	mov	r0, r3
  11c0fc:	e28bd000 	add	sp, fp, #0
  11c100:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11c104:	e12fff1e 	bx	lr

0011c108 <raw_recv>:
 * - not free the packet, and return zero. The packet will be matched
 *   against further PCBs and/or forwarded to another protocol layers.
 */
void
raw_recv(struct raw_pcb *pcb, raw_recv_fn recv, void *recv_arg)
{
  11c108:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11c10c:	e28db000 	add	fp, sp, #0
  11c110:	e24dd014 	sub	sp, sp, #20
  11c114:	e50b0008 	str	r0, [fp, #-8]
  11c118:	e50b100c 	str	r1, [fp, #-12]
  11c11c:	e50b2010 	str	r2, [fp, #-16]
  /* remember recv() callback and user data */
  pcb->recv = recv;
  11c120:	e51b3008 	ldr	r3, [fp, #-8]
  11c124:	e51b200c 	ldr	r2, [fp, #-12]
  11c128:	e5832014 	str	r2, [r3, #20]
  pcb->recv_arg = recv_arg;
  11c12c:	e51b3008 	ldr	r3, [fp, #-8]
  11c130:	e51b2010 	ldr	r2, [fp, #-16]
  11c134:	e5832018 	str	r2, [r3, #24]
}
  11c138:	e320f000 	nop	{0}
  11c13c:	e28bd000 	add	sp, fp, #0
  11c140:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11c144:	e12fff1e 	bx	lr

0011c148 <raw_sendto>:
 * @param ipaddr the destination address of the IP packet
 *
 */
err_t
raw_sendto(struct raw_pcb *pcb, struct pbuf *p, const ip_addr_t *ipaddr)
{
  11c148:	e92d4800 	push	{fp, lr}
  11c14c:	e28db004 	add	fp, sp, #4
  11c150:	e24dd038 	sub	sp, sp, #56	; 0x38
  11c154:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  11c158:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  11c15c:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  struct netif *netif;
  const ip_addr_t *src_ip;
  struct pbuf *q; /* q will be sent down the stack */
  s16_t header_size;

  if ((pcb == NULL) || (ipaddr == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, ipaddr)) {
  11c160:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c164:	e3530000 	cmp	r3, #0
  11c168:	0a000002 	beq	11c178 <raw_sendto+0x30>
  11c16c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11c170:	e3530000 	cmp	r3, #0
  11c174:	1a000001 	bne	11c180 <raw_sendto+0x38>
    return ERR_VAL;
  11c178:	e3e03005 	mvn	r3, #5
  11c17c:	ea00007c 	b	11c374 <raw_sendto+0x22c>
  }

  LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_TRACE, ("raw_sendto\n"));

  header_size = (
  11c180:	e3a03014 	mov	r3, #20
  11c184:	e14b30be 	strh	r3, [fp, #-14]
#else
    IP6_HLEN);
#endif

  /* not enough space to add an IP header to first pbuf in given p chain? */
  if (pbuf_header(p, header_size)) {
  11c188:	e15b30fe 	ldrsh	r3, [fp, #-14]
  11c18c:	e1a01003 	mov	r1, r3
  11c190:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  11c194:	ebfffa4e 	bl	11aad4 <pbuf_header>
  11c198:	e1a03000 	mov	r3, r0
  11c19c:	e3530000 	cmp	r3, #0
  11c1a0:	0a000011 	beq	11c1ec <raw_sendto+0xa4>
    /* allocate header in new pbuf */
    q = pbuf_alloc(PBUF_IP, 0, PBUF_RAM);
  11c1a4:	e3a02000 	mov	r2, #0
  11c1a8:	e3a01000 	mov	r1, #0
  11c1ac:	e3a00001 	mov	r0, #1
  11c1b0:	ebfff75e 	bl	119f30 <pbuf_alloc>
  11c1b4:	e50b000c 	str	r0, [fp, #-12]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
  11c1b8:	e51b300c 	ldr	r3, [fp, #-12]
  11c1bc:	e3530000 	cmp	r3, #0
  11c1c0:	1a000001 	bne	11c1cc <raw_sendto+0x84>
      LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("raw_sendto: could not allocate header\n"));
      return ERR_MEM;
  11c1c4:	e3e03000 	mvn	r3, #0
  11c1c8:	ea000069 	b	11c374 <raw_sendto+0x22c>
    }
    if (p->tot_len != 0) {
  11c1cc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11c1d0:	e1d330b8 	ldrh	r3, [r3, #8]
  11c1d4:	e3530000 	cmp	r3, #0
  11c1d8:	0a000018 	beq	11c240 <raw_sendto+0xf8>
      /* chain header q in front of given pbuf p */
      pbuf_chain(q, p);
  11c1dc:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  11c1e0:	e51b000c 	ldr	r0, [fp, #-12]
  11c1e4:	ebfffb59 	bl	11af50 <pbuf_chain>
  11c1e8:	ea000014 	b	11c240 <raw_sendto+0xf8>
    }
    /* { first pbuf q points to header pbuf } */
    LWIP_DEBUGF(RAW_DEBUG, ("raw_sendto: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* first pbuf q equals given pbuf */
    q = p;
  11c1ec:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11c1f0:	e50b300c 	str	r3, [fp, #-12]
    if (pbuf_header(q, -header_size)) {
  11c1f4:	e15b30be 	ldrh	r3, [fp, #-14]
  11c1f8:	e2633000 	rsb	r3, r3, #0
  11c1fc:	e6ff3073 	uxth	r3, r3
  11c200:	e6bf3073 	sxth	r3, r3
  11c204:	e1a01003 	mov	r1, r3
  11c208:	e51b000c 	ldr	r0, [fp, #-12]
  11c20c:	ebfffa30 	bl	11aad4 <pbuf_header>
  11c210:	e1a03000 	mov	r3, r0
  11c214:	e3530000 	cmp	r3, #0
  11c218:	0a000008 	beq	11c240 <raw_sendto+0xf8>
      LWIP_ASSERT("Can't restore header we just removed!", 0);
  11c21c:	e30700b8 	movw	r0, #28856	; 0x70b8
  11c220:	e3400014 	movt	r0, #20
  11c224:	ebff9bba 	bl	103114 <rt_kprintf>
  11c228:	e300113e 	movw	r1, #318	; 0x13e
  11c22c:	e307008c 	movw	r0, #28812	; 0x708c
  11c230:	e3400014 	movt	r0, #20
  11c234:	ebffba36 	bl	10ab14 <sys_arch_assert>
      return ERR_MEM;
  11c238:	e3e03000 	mvn	r3, #0
  11c23c:	ea00004c 	b	11c374 <raw_sendto+0x22c>

  if(IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    /* Don't call ip_route() with IP_ANY_TYPE */
    netif = ip_route(IP46_ADDR_ANY(IP_GET_TYPE(ipaddr)), ipaddr);
  } else {
    netif = ip_route(&pcb->local_ip, ipaddr);
  11c240:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  11c244:	eb0052bc 	bl	130d3c <ip4_route>
  11c248:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  }

  if (netif == NULL) {
  11c24c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c250:	e3530000 	cmp	r3, #0
  11c254:	1a000007 	bne	11c278 <raw_sendto+0x130>
    LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_LEVEL_WARNING, ("raw_sendto: No route to "));
    ip_addr_debug_print(RAW_DEBUG | LWIP_DBG_LEVEL_WARNING, ipaddr);
    /* free any temporary header pbuf allocated by pbuf_header() */
    if (q != p) {
  11c258:	e51b200c 	ldr	r2, [fp, #-12]
  11c25c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11c260:	e1520003 	cmp	r2, r3
  11c264:	0a000001 	beq	11c270 <raw_sendto+0x128>
      pbuf_free(q);
  11c268:	e51b000c 	ldr	r0, [fp, #-12]
  11c26c:	ebfffa36 	bl	11ab4c <pbuf_free>
    }
    return ERR_RTE;
  11c270:	e3e03003 	mvn	r3, #3
  11c274:	ea00003e 	b	11c374 <raw_sendto+0x22c>

#if IP_SOF_BROADCAST
  if (IP_IS_V4(ipaddr))
  {
    /* broadcast filter? */
    if (!ip_get_option(pcb, SOF_BROADCAST) && ip_addr_isbroadcast(ipaddr, netif)) {
  11c278:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c27c:	e5d33008 	ldrb	r3, [r3, #8]
  11c280:	e2033020 	and	r3, r3, #32
  11c284:	e3530000 	cmp	r3, #0
  11c288:	1a00000f 	bne	11c2cc <raw_sendto+0x184>
  11c28c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11c290:	e5933000 	ldr	r3, [r3]
  11c294:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  11c298:	e1a00003 	mov	r0, r3
  11c29c:	eb005785 	bl	1320b8 <ip4_addr_isbroadcast_u32>
  11c2a0:	e1a03000 	mov	r3, r0
  11c2a4:	e3530000 	cmp	r3, #0
  11c2a8:	0a000007 	beq	11c2cc <raw_sendto+0x184>
      LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_LEVEL_WARNING, ("raw_sendto: SOF_BROADCAST not enabled on pcb %p\n", (void *)pcb));
      /* free any temporary header pbuf allocated by pbuf_header() */
      if (q != p) {
  11c2ac:	e51b200c 	ldr	r2, [fp, #-12]
  11c2b0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11c2b4:	e1520003 	cmp	r2, r3
  11c2b8:	0a000001 	beq	11c2c4 <raw_sendto+0x17c>
        pbuf_free(q);
  11c2bc:	e51b000c 	ldr	r0, [fp, #-12]
  11c2c0:	ebfffa21 	bl	11ab4c <pbuf_free>
      }
      return ERR_VAL;
  11c2c4:	e3e03005 	mvn	r3, #5
  11c2c8:	ea000029 	b	11c374 <raw_sendto+0x22c>
    }
  }
#endif /* IP_SOF_BROADCAST */

  if (ip_addr_isany(&pcb->local_ip)) {
  11c2cc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c2d0:	e3530000 	cmp	r3, #0
  11c2d4:	0a000003 	beq	11c2e8 <raw_sendto+0x1a0>
  11c2d8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c2dc:	e5933000 	ldr	r3, [r3]
  11c2e0:	e3530000 	cmp	r3, #0
  11c2e4:	1a000008 	bne	11c30c <raw_sendto+0x1c4>
    /* use outgoing network interface IP address as source address */
    src_ip = ip_netif_get_local_ip(netif, ipaddr);
  11c2e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c2ec:	e3530000 	cmp	r3, #0
  11c2f0:	0a000002 	beq	11c300 <raw_sendto+0x1b8>
  11c2f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c2f8:	e2833004 	add	r3, r3, #4
  11c2fc:	ea000000 	b	11c304 <raw_sendto+0x1bc>
  11c300:	e3a03000 	mov	r3, #0
  11c304:	e50b3008 	str	r3, [fp, #-8]
  11c308:	ea000001 	b	11c314 <raw_sendto+0x1cc>
      return ERR_RTE;
    }
#endif /* LWIP_IPV6 */
  } else {
    /* use RAW PCB local IP address as source address */
    src_ip = &pcb->local_ip;
  11c30c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c310:	e50b3008 	str	r3, [fp, #-8]
    SMEMCPY(((u8_t *)p->payload) + pcb->chksum_offset, &chksum, sizeof(u16_t));
  }
#endif

  NETIF_SET_HWADDRHINT(netif, &pcb->addr_hint);
  err = ip_output_if(q, src_ip, ipaddr, pcb->ttl, pcb->tos, pcb->protocol, netif);
  11c314:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c318:	e5d3000a 	ldrb	r0, [r3, #10]
  11c31c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c320:	e5d33009 	ldrb	r3, [r3, #9]
  11c324:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  11c328:	e5d22010 	ldrb	r2, [r2, #16]
  11c32c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  11c330:	e58d1008 	str	r1, [sp, #8]
  11c334:	e58d2004 	str	r2, [sp, #4]
  11c338:	e58d3000 	str	r3, [sp]
  11c33c:	e1a03000 	mov	r3, r0
  11c340:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11c344:	e51b1008 	ldr	r1, [fp, #-8]
  11c348:	e51b000c 	ldr	r0, [fp, #-12]
  11c34c:	eb005553 	bl	1318a0 <ip4_output_if>
  11c350:	e1a03000 	mov	r3, r0
  11c354:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
  NETIF_SET_HWADDRHINT(netif, NULL);

  /* did we chain a header earlier? */
  if (q != p) {
  11c358:	e51b200c 	ldr	r2, [fp, #-12]
  11c35c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11c360:	e1520003 	cmp	r2, r3
  11c364:	0a000001 	beq	11c370 <raw_sendto+0x228>
    /* free the header */
    pbuf_free(q);
  11c368:	e51b000c 	ldr	r0, [fp, #-12]
  11c36c:	ebfff9f6 	bl	11ab4c <pbuf_free>
  }
  return err;
  11c370:	e15b31d5 	ldrsb	r3, [fp, #-21]	; 0xffffffeb
}
  11c374:	e1a00003 	mov	r0, r3
  11c378:	e24bd004 	sub	sp, fp, #4
  11c37c:	e8bd8800 	pop	{fp, pc}

0011c380 <raw_send>:
 * @param p the IP payload to send
 *
 */
err_t
raw_send(struct raw_pcb *pcb, struct pbuf *p)
{
  11c380:	e92d4800 	push	{fp, lr}
  11c384:	e28db004 	add	fp, sp, #4
  11c388:	e24dd008 	sub	sp, sp, #8
  11c38c:	e50b0008 	str	r0, [fp, #-8]
  11c390:	e50b100c 	str	r1, [fp, #-12]
  return raw_sendto(pcb, p, &pcb->remote_ip);
  11c394:	e51b3008 	ldr	r3, [fp, #-8]
  11c398:	e2833004 	add	r3, r3, #4
  11c39c:	e1a02003 	mov	r2, r3
  11c3a0:	e51b100c 	ldr	r1, [fp, #-12]
  11c3a4:	e51b0008 	ldr	r0, [fp, #-8]
  11c3a8:	ebffff66 	bl	11c148 <raw_sendto>
  11c3ac:	e1a03000 	mov	r3, r0
}
  11c3b0:	e1a00003 	mov	r0, r3
  11c3b4:	e24bd004 	sub	sp, fp, #4
  11c3b8:	e8bd8800 	pop	{fp, pc}

0011c3bc <raw_remove>:
 *
 * @see raw_new()
 */
void
raw_remove(struct raw_pcb *pcb)
{
  11c3bc:	e92d4800 	push	{fp, lr}
  11c3c0:	e28db004 	add	fp, sp, #4
  11c3c4:	e24dd010 	sub	sp, sp, #16
  11c3c8:	e50b0010 	str	r0, [fp, #-16]
  struct raw_pcb *pcb2;
  /* pcb to be removed is first in list? */
  if (raw_pcbs == pcb) {
  11c3cc:	e30e320c 	movw	r3, #57868	; 0xe20c
  11c3d0:	e3403014 	movt	r3, #20
  11c3d4:	e5933000 	ldr	r3, [r3]
  11c3d8:	e51b2010 	ldr	r2, [fp, #-16]
  11c3dc:	e1520003 	cmp	r2, r3
  11c3e0:	1a000007 	bne	11c404 <raw_remove+0x48>
    /* make list start at 2nd pcb */
    raw_pcbs = raw_pcbs->next;
  11c3e4:	e30e320c 	movw	r3, #57868	; 0xe20c
  11c3e8:	e3403014 	movt	r3, #20
  11c3ec:	e5933000 	ldr	r3, [r3]
  11c3f0:	e593200c 	ldr	r2, [r3, #12]
  11c3f4:	e30e320c 	movw	r3, #57868	; 0xe20c
  11c3f8:	e3403014 	movt	r3, #20
  11c3fc:	e5832000 	str	r2, [r3]
  11c400:	ea000018 	b	11c468 <raw_remove+0xac>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = raw_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
  11c404:	e30e320c 	movw	r3, #57868	; 0xe20c
  11c408:	e3403014 	movt	r3, #20
  11c40c:	e5933000 	ldr	r3, [r3]
  11c410:	e50b3008 	str	r3, [fp, #-8]
  11c414:	ea000010 	b	11c45c <raw_remove+0xa0>
      /* find pcb in raw_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
  11c418:	e51b3008 	ldr	r3, [fp, #-8]
  11c41c:	e593300c 	ldr	r3, [r3, #12]
  11c420:	e3530000 	cmp	r3, #0
  11c424:	0a000009 	beq	11c450 <raw_remove+0x94>
  11c428:	e51b3008 	ldr	r3, [fp, #-8]
  11c42c:	e593300c 	ldr	r3, [r3, #12]
  11c430:	e51b2010 	ldr	r2, [fp, #-16]
  11c434:	e1520003 	cmp	r2, r3
  11c438:	1a000004 	bne	11c450 <raw_remove+0x94>
        /* remove pcb from list */
        pcb2->next = pcb->next;
  11c43c:	e51b3010 	ldr	r3, [fp, #-16]
  11c440:	e593200c 	ldr	r2, [r3, #12]
  11c444:	e51b3008 	ldr	r3, [fp, #-8]
  11c448:	e583200c 	str	r2, [r3, #12]
        break;
  11c44c:	ea000005 	b	11c468 <raw_remove+0xac>
    for (pcb2 = raw_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
  11c450:	e51b3008 	ldr	r3, [fp, #-8]
  11c454:	e593300c 	ldr	r3, [r3, #12]
  11c458:	e50b3008 	str	r3, [fp, #-8]
  11c45c:	e51b3008 	ldr	r3, [fp, #-8]
  11c460:	e3530000 	cmp	r3, #0
  11c464:	1affffeb 	bne	11c418 <raw_remove+0x5c>
      }
    }
  }
  memp_free(MEMP_RAW_PCB, pcb);
  11c468:	e51b1010 	ldr	r1, [fp, #-16]
  11c46c:	e3a00000 	mov	r0, #0
  11c470:	ebfff2a7 	bl	118f14 <memp_free>
}
  11c474:	e320f000 	nop	{0}
  11c478:	e24bd004 	sub	sp, fp, #4
  11c47c:	e8bd8800 	pop	{fp, pc}

0011c480 <raw_new>:
 *
 * @see raw_remove()
 */
struct raw_pcb *
raw_new(u8_t proto)
{
  11c480:	e92d4800 	push	{fp, lr}
  11c484:	e28db004 	add	fp, sp, #4
  11c488:	e24dd010 	sub	sp, sp, #16
  11c48c:	e1a03000 	mov	r3, r0
  11c490:	e54b300d 	strb	r3, [fp, #-13]
  struct raw_pcb *pcb;

  LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_TRACE, ("raw_new\n"));

  pcb = (struct raw_pcb *)memp_malloc(MEMP_RAW_PCB);
  11c494:	e3a02f72 	mov	r2, #456	; 0x1c8
  11c498:	e307108c 	movw	r1, #28812	; 0x708c
  11c49c:	e3401014 	movt	r1, #20
  11c4a0:	e3a00000 	mov	r0, #0
  11c4a4:	ebfff232 	bl	118d74 <memp_malloc_fn>
  11c4a8:	e50b0008 	str	r0, [fp, #-8]
  /* could allocate RAW PCB? */
  if (pcb != NULL) {
  11c4ac:	e51b3008 	ldr	r3, [fp, #-8]
  11c4b0:	e3530000 	cmp	r3, #0
  11c4b4:	0a000012 	beq	11c504 <raw_new+0x84>
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct raw_pcb));
  11c4b8:	e3a0201c 	mov	r2, #28
  11c4bc:	e3a01000 	mov	r1, #0
  11c4c0:	e51b0008 	ldr	r0, [fp, #-8]
  11c4c4:	eb009108 	bl	1408ec <memset>
    pcb->protocol = proto;
  11c4c8:	e51b3008 	ldr	r3, [fp, #-8]
  11c4cc:	e55b200d 	ldrb	r2, [fp, #-13]
  11c4d0:	e5c32010 	strb	r2, [r3, #16]
    pcb->ttl = RAW_TTL;
  11c4d4:	e51b3008 	ldr	r3, [fp, #-8]
  11c4d8:	e3e02000 	mvn	r2, #0
  11c4dc:	e5c3200a 	strb	r2, [r3, #10]
    pcb->next = raw_pcbs;
  11c4e0:	e30e320c 	movw	r3, #57868	; 0xe20c
  11c4e4:	e3403014 	movt	r3, #20
  11c4e8:	e5932000 	ldr	r2, [r3]
  11c4ec:	e51b3008 	ldr	r3, [fp, #-8]
  11c4f0:	e583200c 	str	r2, [r3, #12]
    raw_pcbs = pcb;
  11c4f4:	e30e320c 	movw	r3, #57868	; 0xe20c
  11c4f8:	e3403014 	movt	r3, #20
  11c4fc:	e51b2008 	ldr	r2, [fp, #-8]
  11c500:	e5832000 	str	r2, [r3]
  }
  return pcb;
  11c504:	e51b3008 	ldr	r3, [fp, #-8]
}
  11c508:	e1a00003 	mov	r0, r3
  11c50c:	e24bd004 	sub	sp, fp, #4
  11c510:	e8bd8800 	pop	{fp, pc}

0011c514 <raw_new_ip_type>:
 *
 * @see raw_remove()
 */
struct raw_pcb *
raw_new_ip_type(u8_t type, u8_t proto)
{
  11c514:	e92d4800 	push	{fp, lr}
  11c518:	e28db004 	add	fp, sp, #4
  11c51c:	e24dd010 	sub	sp, sp, #16
  11c520:	e1a03000 	mov	r3, r0
  11c524:	e1a02001 	mov	r2, r1
  11c528:	e54b300d 	strb	r3, [fp, #-13]
  11c52c:	e1a03002 	mov	r3, r2
  11c530:	e54b300e 	strb	r3, [fp, #-14]
  struct raw_pcb *pcb;
  pcb = raw_new(proto);
  11c534:	e55b300e 	ldrb	r3, [fp, #-14]
  11c538:	e1a00003 	mov	r0, r3
  11c53c:	ebffffcf 	bl	11c480 <raw_new>
  11c540:	e50b0008 	str	r0, [fp, #-8]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else /* LWIP_IPV4 && LWIP_IPV6 */
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
  11c544:	e51b3008 	ldr	r3, [fp, #-8]
}
  11c548:	e1a00003 	mov	r0, r3
  11c54c:	e24bd004 	sub	sp, fp, #4
  11c550:	e8bd8800 	pop	{fp, pc}

0011c554 <raw_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void raw_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
  11c554:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11c558:	e28db000 	add	fp, sp, #0
  11c55c:	e24dd014 	sub	sp, sp, #20
  11c560:	e50b0010 	str	r0, [fp, #-16]
  11c564:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct raw_pcb* rpcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
  11c568:	e51b3010 	ldr	r3, [fp, #-16]
  11c56c:	e3530000 	cmp	r3, #0
  11c570:	0a00001f 	beq	11c5f4 <raw_netif_ip_addr_changed+0xa0>
  11c574:	e51b3010 	ldr	r3, [fp, #-16]
  11c578:	e5933000 	ldr	r3, [r3]
  11c57c:	e3530000 	cmp	r3, #0
  11c580:	0a00001b 	beq	11c5f4 <raw_netif_ip_addr_changed+0xa0>
  11c584:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c588:	e3530000 	cmp	r3, #0
  11c58c:	0a000018 	beq	11c5f4 <raw_netif_ip_addr_changed+0xa0>
  11c590:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c594:	e5933000 	ldr	r3, [r3]
  11c598:	e3530000 	cmp	r3, #0
  11c59c:	0a000014 	beq	11c5f4 <raw_netif_ip_addr_changed+0xa0>
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
  11c5a0:	e30e320c 	movw	r3, #57868	; 0xe20c
  11c5a4:	e3403014 	movt	r3, #20
  11c5a8:	e5933000 	ldr	r3, [r3]
  11c5ac:	e50b3008 	str	r3, [fp, #-8]
  11c5b0:	ea00000c 	b	11c5e8 <raw_netif_ip_addr_changed+0x94>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&rpcb->local_ip, old_addr)) {
  11c5b4:	e51b3008 	ldr	r3, [fp, #-8]
  11c5b8:	e5932000 	ldr	r2, [r3]
  11c5bc:	e51b3010 	ldr	r3, [fp, #-16]
  11c5c0:	e5933000 	ldr	r3, [r3]
  11c5c4:	e1520003 	cmp	r2, r3
  11c5c8:	1a000003 	bne	11c5dc <raw_netif_ip_addr_changed+0x88>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(rpcb->local_ip, *new_addr);
  11c5cc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c5d0:	e5932000 	ldr	r2, [r3]
  11c5d4:	e51b3008 	ldr	r3, [fp, #-8]
  11c5d8:	e5832000 	str	r2, [r3]
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
  11c5dc:	e51b3008 	ldr	r3, [fp, #-8]
  11c5e0:	e593300c 	ldr	r3, [r3, #12]
  11c5e4:	e50b3008 	str	r3, [fp, #-8]
  11c5e8:	e51b3008 	ldr	r3, [fp, #-8]
  11c5ec:	e3530000 	cmp	r3, #0
  11c5f0:	1affffef 	bne	11c5b4 <raw_netif_ip_addr_changed+0x60>
      }
    }
  }
}
  11c5f4:	e320f000 	nop	{0}
  11c5f8:	e28bd000 	add	sp, fp, #0
  11c5fc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11c600:	e12fff1e 	bx	lr

0011c604 <stats_init>:

struct stats_ lwip_stats;

void
stats_init(void)
{
  11c604:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11c608:	e28db000 	add	fp, sp, #0
#ifdef LWIP_DEBUG
#if MEM_STATS
  lwip_stats.mem.name = "MEM";
#endif /* MEM_STATS */
#endif /* LWIP_DEBUG */
}
  11c60c:	e320f000 	nop	{0}
  11c610:	e28bd000 	add	sp, fp, #0
  11c614:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11c618:	e12fff1e 	bx	lr

0011c61c <stats_display_proto>:

#if LWIP_STATS_DISPLAY
void
stats_display_proto(struct stats_proto *proto, const char *name)
{
  11c61c:	e92d4800 	push	{fp, lr}
  11c620:	e28db004 	add	fp, sp, #4
  11c624:	e24dd008 	sub	sp, sp, #8
  11c628:	e50b0008 	str	r0, [fp, #-8]
  11c62c:	e50b100c 	str	r1, [fp, #-12]
  LWIP_PLATFORM_DIAG(("\n%s\n\t", name));
  11c630:	e51b100c 	ldr	r1, [fp, #-12]
  11c634:	e30700e0 	movw	r0, #28896	; 0x70e0
  11c638:	e3400014 	movt	r0, #20
  11c63c:	ebff9ab4 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("xmit: %"STAT_COUNTER_F"\n\t", proto->xmit));
  11c640:	e51b3008 	ldr	r3, [fp, #-8]
  11c644:	e1d330b0 	ldrh	r3, [r3]
  11c648:	e1a01003 	mov	r1, r3
  11c64c:	e30700e8 	movw	r0, #28904	; 0x70e8
  11c650:	e3400014 	movt	r0, #20
  11c654:	ebff9aae 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("recv: %"STAT_COUNTER_F"\n\t", proto->recv));
  11c658:	e51b3008 	ldr	r3, [fp, #-8]
  11c65c:	e1d330b2 	ldrh	r3, [r3, #2]
  11c660:	e1a01003 	mov	r1, r3
  11c664:	e30700f4 	movw	r0, #28916	; 0x70f4
  11c668:	e3400014 	movt	r0, #20
  11c66c:	ebff9aa8 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("fw: %"STAT_COUNTER_F"\n\t", proto->fw));
  11c670:	e51b3008 	ldr	r3, [fp, #-8]
  11c674:	e1d330b4 	ldrh	r3, [r3, #4]
  11c678:	e1a01003 	mov	r1, r3
  11c67c:	e3070100 	movw	r0, #28928	; 0x7100
  11c680:	e3400014 	movt	r0, #20
  11c684:	ebff9aa2 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("drop: %"STAT_COUNTER_F"\n\t", proto->drop));
  11c688:	e51b3008 	ldr	r3, [fp, #-8]
  11c68c:	e1d330b6 	ldrh	r3, [r3, #6]
  11c690:	e1a01003 	mov	r1, r3
  11c694:	e307010c 	movw	r0, #28940	; 0x710c
  11c698:	e3400014 	movt	r0, #20
  11c69c:	ebff9a9c 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("chkerr: %"STAT_COUNTER_F"\n\t", proto->chkerr));
  11c6a0:	e51b3008 	ldr	r3, [fp, #-8]
  11c6a4:	e1d330b8 	ldrh	r3, [r3, #8]
  11c6a8:	e1a01003 	mov	r1, r3
  11c6ac:	e3070118 	movw	r0, #28952	; 0x7118
  11c6b0:	e3400014 	movt	r0, #20
  11c6b4:	ebff9a96 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("lenerr: %"STAT_COUNTER_F"\n\t", proto->lenerr));
  11c6b8:	e51b3008 	ldr	r3, [fp, #-8]
  11c6bc:	e1d330ba 	ldrh	r3, [r3, #10]
  11c6c0:	e1a01003 	mov	r1, r3
  11c6c4:	e3070128 	movw	r0, #28968	; 0x7128
  11c6c8:	e3400014 	movt	r0, #20
  11c6cc:	ebff9a90 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("memerr: %"STAT_COUNTER_F"\n\t", proto->memerr));
  11c6d0:	e51b3008 	ldr	r3, [fp, #-8]
  11c6d4:	e1d330bc 	ldrh	r3, [r3, #12]
  11c6d8:	e1a01003 	mov	r1, r3
  11c6dc:	e3070138 	movw	r0, #28984	; 0x7138
  11c6e0:	e3400014 	movt	r0, #20
  11c6e4:	ebff9a8a 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("rterr: %"STAT_COUNTER_F"\n\t", proto->rterr));
  11c6e8:	e51b3008 	ldr	r3, [fp, #-8]
  11c6ec:	e1d330be 	ldrh	r3, [r3, #14]
  11c6f0:	e1a01003 	mov	r1, r3
  11c6f4:	e3070148 	movw	r0, #29000	; 0x7148
  11c6f8:	e3400014 	movt	r0, #20
  11c6fc:	ebff9a84 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("proterr: %"STAT_COUNTER_F"\n\t", proto->proterr));
  11c700:	e51b3008 	ldr	r3, [fp, #-8]
  11c704:	e1d331b0 	ldrh	r3, [r3, #16]
  11c708:	e1a01003 	mov	r1, r3
  11c70c:	e3070158 	movw	r0, #29016	; 0x7158
  11c710:	e3400014 	movt	r0, #20
  11c714:	ebff9a7e 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("opterr: %"STAT_COUNTER_F"\n\t", proto->opterr));
  11c718:	e51b3008 	ldr	r3, [fp, #-8]
  11c71c:	e1d331b2 	ldrh	r3, [r3, #18]
  11c720:	e1a01003 	mov	r1, r3
  11c724:	e3070168 	movw	r0, #29032	; 0x7168
  11c728:	e3400014 	movt	r0, #20
  11c72c:	ebff9a78 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("err: %"STAT_COUNTER_F"\n\t", proto->err));
  11c730:	e51b3008 	ldr	r3, [fp, #-8]
  11c734:	e1d331b4 	ldrh	r3, [r3, #20]
  11c738:	e1a01003 	mov	r1, r3
  11c73c:	e3070178 	movw	r0, #29048	; 0x7178
  11c740:	e3400014 	movt	r0, #20
  11c744:	ebff9a72 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("cachehit: %"STAT_COUNTER_F"\n", proto->cachehit));
  11c748:	e51b3008 	ldr	r3, [fp, #-8]
  11c74c:	e1d331b6 	ldrh	r3, [r3, #22]
  11c750:	e1a01003 	mov	r1, r3
  11c754:	e3070184 	movw	r0, #29060	; 0x7184
  11c758:	e3400014 	movt	r0, #20
  11c75c:	ebff9a6c 	bl	103114 <rt_kprintf>
}
  11c760:	e320f000 	nop	{0}
  11c764:	e24bd004 	sub	sp, fp, #4
  11c768:	e8bd8800 	pop	{fp, pc}

0011c76c <stats_display_igmp>:

#if IGMP_STATS || MLD6_STATS
void
stats_display_igmp(struct stats_igmp *igmp, const char *name)
{
  11c76c:	e92d4800 	push	{fp, lr}
  11c770:	e28db004 	add	fp, sp, #4
  11c774:	e24dd008 	sub	sp, sp, #8
  11c778:	e50b0008 	str	r0, [fp, #-8]
  11c77c:	e50b100c 	str	r1, [fp, #-12]
  LWIP_PLATFORM_DIAG(("\n%s\n\t", name));
  11c780:	e51b100c 	ldr	r1, [fp, #-12]
  11c784:	e30700e0 	movw	r0, #28896	; 0x70e0
  11c788:	e3400014 	movt	r0, #20
  11c78c:	ebff9a60 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("xmit: %"STAT_COUNTER_F"\n\t", igmp->xmit));
  11c790:	e51b3008 	ldr	r3, [fp, #-8]
  11c794:	e1d330b0 	ldrh	r3, [r3]
  11c798:	e1a01003 	mov	r1, r3
  11c79c:	e30700e8 	movw	r0, #28904	; 0x70e8
  11c7a0:	e3400014 	movt	r0, #20
  11c7a4:	ebff9a5a 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("recv: %"STAT_COUNTER_F"\n\t", igmp->recv));
  11c7a8:	e51b3008 	ldr	r3, [fp, #-8]
  11c7ac:	e1d330b2 	ldrh	r3, [r3, #2]
  11c7b0:	e1a01003 	mov	r1, r3
  11c7b4:	e30700f4 	movw	r0, #28916	; 0x70f4
  11c7b8:	e3400014 	movt	r0, #20
  11c7bc:	ebff9a54 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("drop: %"STAT_COUNTER_F"\n\t", igmp->drop));
  11c7c0:	e51b3008 	ldr	r3, [fp, #-8]
  11c7c4:	e1d330b4 	ldrh	r3, [r3, #4]
  11c7c8:	e1a01003 	mov	r1, r3
  11c7cc:	e307010c 	movw	r0, #28940	; 0x710c
  11c7d0:	e3400014 	movt	r0, #20
  11c7d4:	ebff9a4e 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("chkerr: %"STAT_COUNTER_F"\n\t", igmp->chkerr));
  11c7d8:	e51b3008 	ldr	r3, [fp, #-8]
  11c7dc:	e1d330b6 	ldrh	r3, [r3, #6]
  11c7e0:	e1a01003 	mov	r1, r3
  11c7e4:	e3070118 	movw	r0, #28952	; 0x7118
  11c7e8:	e3400014 	movt	r0, #20
  11c7ec:	ebff9a48 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("lenerr: %"STAT_COUNTER_F"\n\t", igmp->lenerr));
  11c7f0:	e51b3008 	ldr	r3, [fp, #-8]
  11c7f4:	e1d330b8 	ldrh	r3, [r3, #8]
  11c7f8:	e1a01003 	mov	r1, r3
  11c7fc:	e3070128 	movw	r0, #28968	; 0x7128
  11c800:	e3400014 	movt	r0, #20
  11c804:	ebff9a42 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("memerr: %"STAT_COUNTER_F"\n\t", igmp->memerr));
  11c808:	e51b3008 	ldr	r3, [fp, #-8]
  11c80c:	e1d330ba 	ldrh	r3, [r3, #10]
  11c810:	e1a01003 	mov	r1, r3
  11c814:	e3070138 	movw	r0, #28984	; 0x7138
  11c818:	e3400014 	movt	r0, #20
  11c81c:	ebff9a3c 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("proterr: %"STAT_COUNTER_F"\n\t", igmp->proterr));
  11c820:	e51b3008 	ldr	r3, [fp, #-8]
  11c824:	e1d330bc 	ldrh	r3, [r3, #12]
  11c828:	e1a01003 	mov	r1, r3
  11c82c:	e3070158 	movw	r0, #29016	; 0x7158
  11c830:	e3400014 	movt	r0, #20
  11c834:	ebff9a36 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("rx_v1: %"STAT_COUNTER_F"\n\t", igmp->rx_v1));
  11c838:	e51b3008 	ldr	r3, [fp, #-8]
  11c83c:	e1d330be 	ldrh	r3, [r3, #14]
  11c840:	e1a01003 	mov	r1, r3
  11c844:	e3070194 	movw	r0, #29076	; 0x7194
  11c848:	e3400014 	movt	r0, #20
  11c84c:	ebff9a30 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("rx_group: %"STAT_COUNTER_F"\n\t", igmp->rx_group));
  11c850:	e51b3008 	ldr	r3, [fp, #-8]
  11c854:	e1d331b0 	ldrh	r3, [r3, #16]
  11c858:	e1a01003 	mov	r1, r3
  11c85c:	e30701a4 	movw	r0, #29092	; 0x71a4
  11c860:	e3400014 	movt	r0, #20
  11c864:	ebff9a2a 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("rx_general: %"STAT_COUNTER_F"\n\t", igmp->rx_general));
  11c868:	e51b3008 	ldr	r3, [fp, #-8]
  11c86c:	e1d331b2 	ldrh	r3, [r3, #18]
  11c870:	e1a01003 	mov	r1, r3
  11c874:	e30701b4 	movw	r0, #29108	; 0x71b4
  11c878:	e3400014 	movt	r0, #20
  11c87c:	ebff9a24 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("rx_report: %"STAT_COUNTER_F"\n\t", igmp->rx_report));
  11c880:	e51b3008 	ldr	r3, [fp, #-8]
  11c884:	e1d331b4 	ldrh	r3, [r3, #20]
  11c888:	e1a01003 	mov	r1, r3
  11c88c:	e30701c8 	movw	r0, #29128	; 0x71c8
  11c890:	e3400014 	movt	r0, #20
  11c894:	ebff9a1e 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("tx_join: %"STAT_COUNTER_F"\n\t", igmp->tx_join));
  11c898:	e51b3008 	ldr	r3, [fp, #-8]
  11c89c:	e1d331b6 	ldrh	r3, [r3, #22]
  11c8a0:	e1a01003 	mov	r1, r3
  11c8a4:	e30701dc 	movw	r0, #29148	; 0x71dc
  11c8a8:	e3400014 	movt	r0, #20
  11c8ac:	ebff9a18 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("tx_leave: %"STAT_COUNTER_F"\n\t", igmp->tx_leave));
  11c8b0:	e51b3008 	ldr	r3, [fp, #-8]
  11c8b4:	e1d331b8 	ldrh	r3, [r3, #24]
  11c8b8:	e1a01003 	mov	r1, r3
  11c8bc:	e30701ec 	movw	r0, #29164	; 0x71ec
  11c8c0:	e3400014 	movt	r0, #20
  11c8c4:	ebff9a12 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("tx_report: %"STAT_COUNTER_F"\n", igmp->tx_report));
  11c8c8:	e51b3008 	ldr	r3, [fp, #-8]
  11c8cc:	e1d331ba 	ldrh	r3, [r3, #26]
  11c8d0:	e1a01003 	mov	r1, r3
  11c8d4:	e30701fc 	movw	r0, #29180	; 0x71fc
  11c8d8:	e3400014 	movt	r0, #20
  11c8dc:	ebff9a0c 	bl	103114 <rt_kprintf>
}
  11c8e0:	e320f000 	nop	{0}
  11c8e4:	e24bd004 	sub	sp, fp, #4
  11c8e8:	e8bd8800 	pop	{fp, pc}

0011c8ec <stats_display_mem>:
#endif /* IGMP_STATS || MLD6_STATS */

#if MEM_STATS || MEMP_STATS
void
stats_display_mem(struct stats_mem *mem, const char *name)
{
  11c8ec:	e92d4800 	push	{fp, lr}
  11c8f0:	e28db004 	add	fp, sp, #4
  11c8f4:	e24dd008 	sub	sp, sp, #8
  11c8f8:	e50b0008 	str	r0, [fp, #-8]
  11c8fc:	e50b100c 	str	r1, [fp, #-12]
  LWIP_PLATFORM_DIAG(("\nMEM %s\n\t", name));
  11c900:	e51b100c 	ldr	r1, [fp, #-12]
  11c904:	e307020c 	movw	r0, #29196	; 0x720c
  11c908:	e3400014 	movt	r0, #20
  11c90c:	ebff9a00 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("avail: %"U32_F"\n\t", (u32_t)mem->avail));
  11c910:	e51b3008 	ldr	r3, [fp, #-8]
  11c914:	e1d330b6 	ldrh	r3, [r3, #6]
  11c918:	e1a01003 	mov	r1, r3
  11c91c:	e3070218 	movw	r0, #29208	; 0x7218
  11c920:	e3400014 	movt	r0, #20
  11c924:	ebff99fa 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("used: %"U32_F"\n\t", (u32_t)mem->used));
  11c928:	e51b3008 	ldr	r3, [fp, #-8]
  11c92c:	e1d330b8 	ldrh	r3, [r3, #8]
  11c930:	e1a01003 	mov	r1, r3
  11c934:	e3070228 	movw	r0, #29224	; 0x7228
  11c938:	e3400014 	movt	r0, #20
  11c93c:	ebff99f4 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("max: %"U32_F"\n\t", (u32_t)mem->max));
  11c940:	e51b3008 	ldr	r3, [fp, #-8]
  11c944:	e1d330ba 	ldrh	r3, [r3, #10]
  11c948:	e1a01003 	mov	r1, r3
  11c94c:	e3070234 	movw	r0, #29236	; 0x7234
  11c950:	e3400014 	movt	r0, #20
  11c954:	ebff99ee 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("err: %"U32_F"\n", (u32_t)mem->err));
  11c958:	e51b3008 	ldr	r3, [fp, #-8]
  11c95c:	e1d330b4 	ldrh	r3, [r3, #4]
  11c960:	e1a01003 	mov	r1, r3
  11c964:	e3070240 	movw	r0, #29248	; 0x7240
  11c968:	e3400014 	movt	r0, #20
  11c96c:	ebff99e8 	bl	103114 <rt_kprintf>
}
  11c970:	e320f000 	nop	{0}
  11c974:	e24bd004 	sub	sp, fp, #4
  11c978:	e8bd8800 	pop	{fp, pc}

0011c97c <stats_display_memp>:

#if MEMP_STATS
void
stats_display_memp(struct stats_mem *mem, int index)
{
  11c97c:	e92d4800 	push	{fp, lr}
  11c980:	e28db004 	add	fp, sp, #4
  11c984:	e24dd008 	sub	sp, sp, #8
  11c988:	e50b0008 	str	r0, [fp, #-8]
  11c98c:	e50b100c 	str	r1, [fp, #-12]
  if (index < MEMP_MAX) {
  11c990:	e51b300c 	ldr	r3, [fp, #-12]
  11c994:	e3530010 	cmp	r3, #16
  11c998:	ca000004 	bgt	11c9b0 <stats_display_memp+0x34>
    stats_display_mem(mem, mem->name);
  11c99c:	e51b3008 	ldr	r3, [fp, #-8]
  11c9a0:	e5933000 	ldr	r3, [r3]
  11c9a4:	e1a01003 	mov	r1, r3
  11c9a8:	e51b0008 	ldr	r0, [fp, #-8]
  11c9ac:	ebffffce 	bl	11c8ec <stats_display_mem>
  }
}
  11c9b0:	e320f000 	nop	{0}
  11c9b4:	e24bd004 	sub	sp, fp, #4
  11c9b8:	e8bd8800 	pop	{fp, pc}

0011c9bc <stats_display_sys>:
#endif /* MEM_STATS || MEMP_STATS */

#if SYS_STATS
void
stats_display_sys(struct stats_sys *sys)
{
  11c9bc:	e92d4800 	push	{fp, lr}
  11c9c0:	e28db004 	add	fp, sp, #4
  11c9c4:	e24dd008 	sub	sp, sp, #8
  11c9c8:	e50b0008 	str	r0, [fp, #-8]
  LWIP_PLATFORM_DIAG(("\nSYS\n\t"));
  11c9cc:	e307024c 	movw	r0, #29260	; 0x724c
  11c9d0:	e3400014 	movt	r0, #20
  11c9d4:	ebff99ce 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("sem.used:  %"U32_F"\n\t", (u32_t)sys->sem.used));
  11c9d8:	e51b3008 	ldr	r3, [fp, #-8]
  11c9dc:	e1d330b0 	ldrh	r3, [r3]
  11c9e0:	e1a01003 	mov	r1, r3
  11c9e4:	e3070254 	movw	r0, #29268	; 0x7254
  11c9e8:	e3400014 	movt	r0, #20
  11c9ec:	ebff99c8 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("sem.max:   %"U32_F"\n\t", (u32_t)sys->sem.max));
  11c9f0:	e51b3008 	ldr	r3, [fp, #-8]
  11c9f4:	e1d330b2 	ldrh	r3, [r3, #2]
  11c9f8:	e1a01003 	mov	r1, r3
  11c9fc:	e3070268 	movw	r0, #29288	; 0x7268
  11ca00:	e3400014 	movt	r0, #20
  11ca04:	ebff99c2 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("sem.err:   %"U32_F"\n\t", (u32_t)sys->sem.err));
  11ca08:	e51b3008 	ldr	r3, [fp, #-8]
  11ca0c:	e1d330b4 	ldrh	r3, [r3, #4]
  11ca10:	e1a01003 	mov	r1, r3
  11ca14:	e307027c 	movw	r0, #29308	; 0x727c
  11ca18:	e3400014 	movt	r0, #20
  11ca1c:	ebff99bc 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("mutex.used: %"U32_F"\n\t", (u32_t)sys->mutex.used));
  11ca20:	e51b3008 	ldr	r3, [fp, #-8]
  11ca24:	e1d330b6 	ldrh	r3, [r3, #6]
  11ca28:	e1a01003 	mov	r1, r3
  11ca2c:	e3070290 	movw	r0, #29328	; 0x7290
  11ca30:	e3400014 	movt	r0, #20
  11ca34:	ebff99b6 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("mutex.max:  %"U32_F"\n\t", (u32_t)sys->mutex.max));
  11ca38:	e51b3008 	ldr	r3, [fp, #-8]
  11ca3c:	e1d330b8 	ldrh	r3, [r3, #8]
  11ca40:	e1a01003 	mov	r1, r3
  11ca44:	e30702a4 	movw	r0, #29348	; 0x72a4
  11ca48:	e3400014 	movt	r0, #20
  11ca4c:	ebff99b0 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("mutex.err:  %"U32_F"\n\t", (u32_t)sys->mutex.err));
  11ca50:	e51b3008 	ldr	r3, [fp, #-8]
  11ca54:	e1d330ba 	ldrh	r3, [r3, #10]
  11ca58:	e1a01003 	mov	r1, r3
  11ca5c:	e30702b8 	movw	r0, #29368	; 0x72b8
  11ca60:	e3400014 	movt	r0, #20
  11ca64:	ebff99aa 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("mbox.used:  %"U32_F"\n\t", (u32_t)sys->mbox.used));
  11ca68:	e51b3008 	ldr	r3, [fp, #-8]
  11ca6c:	e1d330bc 	ldrh	r3, [r3, #12]
  11ca70:	e1a01003 	mov	r1, r3
  11ca74:	e30702cc 	movw	r0, #29388	; 0x72cc
  11ca78:	e3400014 	movt	r0, #20
  11ca7c:	ebff99a4 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("mbox.max:   %"U32_F"\n\t", (u32_t)sys->mbox.max));
  11ca80:	e51b3008 	ldr	r3, [fp, #-8]
  11ca84:	e1d330be 	ldrh	r3, [r3, #14]
  11ca88:	e1a01003 	mov	r1, r3
  11ca8c:	e30702e0 	movw	r0, #29408	; 0x72e0
  11ca90:	e3400014 	movt	r0, #20
  11ca94:	ebff999e 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("mbox.err:   %"U32_F"\n", (u32_t)sys->mbox.err));
  11ca98:	e51b3008 	ldr	r3, [fp, #-8]
  11ca9c:	e1d331b0 	ldrh	r3, [r3, #16]
  11caa0:	e1a01003 	mov	r1, r3
  11caa4:	e30702f4 	movw	r0, #29428	; 0x72f4
  11caa8:	e3400014 	movt	r0, #20
  11caac:	ebff9998 	bl	103114 <rt_kprintf>
}
  11cab0:	e320f000 	nop	{0}
  11cab4:	e24bd004 	sub	sp, fp, #4
  11cab8:	e8bd8800 	pop	{fp, pc}

0011cabc <stats_display>:
#endif /* SYS_STATS */

void
stats_display(void)
{
  11cabc:	e92d4800 	push	{fp, lr}
  11cac0:	e28db004 	add	fp, sp, #4
  11cac4:	e24dd008 	sub	sp, sp, #8
  s16_t i;

  LINK_STATS_DISPLAY();
  11cac8:	e3071308 	movw	r1, #29448	; 0x7308
  11cacc:	e3401014 	movt	r1, #20
  11cad0:	e3040fc0 	movw	r0, #20416	; 0x4fc0
  11cad4:	e3400057 	movt	r0, #87	; 0x57
  11cad8:	ebfffecf 	bl	11c61c <stats_display_proto>
  ETHARP_STATS_DISPLAY();
  11cadc:	e3071310 	movw	r1, #29456	; 0x7310
  11cae0:	e3401014 	movt	r1, #20
  11cae4:	e59f00dc 	ldr	r0, [pc, #220]	; 11cbc8 <stats_display+0x10c>
  11cae8:	ebfffecb 	bl	11c61c <stats_display_proto>
  IPFRAG_STATS_DISPLAY();
  11caec:	e3071318 	movw	r1, #29464	; 0x7318
  11caf0:	e3401014 	movt	r1, #20
  11caf4:	e59f00d0 	ldr	r0, [pc, #208]	; 11cbcc <stats_display+0x110>
  11caf8:	ebfffec7 	bl	11c61c <stats_display_proto>
  IP6_FRAG_STATS_DISPLAY();
  IP_STATS_DISPLAY();
  11cafc:	e3071320 	movw	r1, #29472	; 0x7320
  11cb00:	e3401014 	movt	r1, #20
  11cb04:	e59f00c4 	ldr	r0, [pc, #196]	; 11cbd0 <stats_display+0x114>
  11cb08:	ebfffec3 	bl	11c61c <stats_display_proto>
  ND6_STATS_DISPLAY();
  IP6_STATS_DISPLAY();
  IGMP_STATS_DISPLAY();
  11cb0c:	e3071324 	movw	r1, #29476	; 0x7324
  11cb10:	e3401014 	movt	r1, #20
  11cb14:	e59f00b8 	ldr	r0, [pc, #184]	; 11cbd4 <stats_display+0x118>
  11cb18:	ebffff13 	bl	11c76c <stats_display_igmp>
  MLD6_STATS_DISPLAY();
  ICMP_STATS_DISPLAY();
  11cb1c:	e307132c 	movw	r1, #29484	; 0x732c
  11cb20:	e3401014 	movt	r1, #20
  11cb24:	e59f00ac 	ldr	r0, [pc, #172]	; 11cbd8 <stats_display+0x11c>
  11cb28:	ebfffebb 	bl	11c61c <stats_display_proto>
  ICMP6_STATS_DISPLAY();
  UDP_STATS_DISPLAY();
  11cb2c:	e3071334 	movw	r1, #29492	; 0x7334
  11cb30:	e3401014 	movt	r1, #20
  11cb34:	e59f00a0 	ldr	r0, [pc, #160]	; 11cbdc <stats_display+0x120>
  11cb38:	ebfffeb7 	bl	11c61c <stats_display_proto>
  TCP_STATS_DISPLAY();
  11cb3c:	e3071338 	movw	r1, #29496	; 0x7338
  11cb40:	e3401014 	movt	r1, #20
  11cb44:	e59f0094 	ldr	r0, [pc, #148]	; 11cbe0 <stats_display+0x124>
  11cb48:	ebfffeb3 	bl	11c61c <stats_display_proto>
  MEM_STATS_DISPLAY();
  11cb4c:	e307133c 	movw	r1, #29500	; 0x733c
  11cb50:	e3401014 	movt	r1, #20
  11cb54:	e59f0088 	ldr	r0, [pc, #136]	; 11cbe4 <stats_display+0x128>
  11cb58:	ebffff63 	bl	11c8ec <stats_display_mem>
  for (i = 0; i < MEMP_MAX; i++) {
  11cb5c:	e3a03000 	mov	r3, #0
  11cb60:	e14b30b6 	strh	r3, [fp, #-6]
  11cb64:	ea00000f 	b	11cba8 <stats_display+0xec>
    MEMP_STATS_DISPLAY(i);
  11cb68:	e15b30f6 	ldrsh	r3, [fp, #-6]
  11cb6c:	e3042fc0 	movw	r2, #20416	; 0x4fc0
  11cb70:	e3402057 	movt	r2, #87	; 0x57
  11cb74:	e2833034 	add	r3, r3, #52	; 0x34
  11cb78:	e1a03103 	lsl	r3, r3, #2
  11cb7c:	e0823003 	add	r3, r2, r3
  11cb80:	e5933004 	ldr	r3, [r3, #4]
  11cb84:	e15b20f6 	ldrsh	r2, [fp, #-6]
  11cb88:	e1a01002 	mov	r1, r2
  11cb8c:	e1a00003 	mov	r0, r3
  11cb90:	ebffff79 	bl	11c97c <stats_display_memp>
  for (i = 0; i < MEMP_MAX; i++) {
  11cb94:	e15b30f6 	ldrsh	r3, [fp, #-6]
  11cb98:	e6ff3073 	uxth	r3, r3
  11cb9c:	e2833001 	add	r3, r3, #1
  11cba0:	e6ff3073 	uxth	r3, r3
  11cba4:	e14b30b6 	strh	r3, [fp, #-6]
  11cba8:	e15b30f6 	ldrsh	r3, [fp, #-6]
  11cbac:	e3530010 	cmp	r3, #16
  11cbb0:	daffffec 	ble	11cb68 <stats_display+0xac>
  }
  SYS_STATS_DISPLAY();
  11cbb4:	e59f002c 	ldr	r0, [pc, #44]	; 11cbe8 <stats_display+0x12c>
  11cbb8:	ebffff7f 	bl	11c9bc <stats_display_sys>
}
  11cbbc:	e320f000 	nop	{0}
  11cbc0:	e24bd004 	sub	sp, fp, #4
  11cbc4:	e8bd8800 	pop	{fp, pc}
  11cbc8:	00574fd8 	.word	0x00574fd8
  11cbcc:	00574ff0 	.word	0x00574ff0
  11cbd0:	00575008 	.word	0x00575008
  11cbd4:	00575038 	.word	0x00575038
  11cbd8:	00575020 	.word	0x00575020
  11cbdc:	00575054 	.word	0x00575054
  11cbe0:	0057506c 	.word	0x0057506c
  11cbe4:	00575084 	.word	0x00575084
  11cbe8:	005750d8 	.word	0x005750d8

0011cbec <sys_msleep>:
 *
 * @param ms number of milliseconds to sleep
 */
void
sys_msleep(u32_t ms)
{
  11cbec:	e92d4800 	push	{fp, lr}
  11cbf0:	e28db004 	add	fp, sp, #4
  11cbf4:	e24dd010 	sub	sp, sp, #16
  11cbf8:	e50b0010 	str	r0, [fp, #-16]
  if (ms > 0) {
  11cbfc:	e51b3010 	ldr	r3, [fp, #-16]
  11cc00:	e3530000 	cmp	r3, #0
  11cc04:	0a00000f 	beq	11cc48 <sys_msleep+0x5c>
    sys_sem_t delaysem;
    err_t err = sys_sem_new(&delaysem, 0);
  11cc08:	e24b300c 	sub	r3, fp, #12
  11cc0c:	e3a01000 	mov	r1, #0
  11cc10:	e1a00003 	mov	r0, r3
  11cc14:	ebffb52c 	bl	10a0cc <sys_sem_new>
  11cc18:	e1a03000 	mov	r3, r0
  11cc1c:	e54b3005 	strb	r3, [fp, #-5]
    if (err == ERR_OK) {
  11cc20:	e15b30d5 	ldrsb	r3, [fp, #-5]
  11cc24:	e3530000 	cmp	r3, #0
  11cc28:	1a000006 	bne	11cc48 <sys_msleep+0x5c>
      sys_arch_sem_wait(&delaysem, ms);
  11cc2c:	e24b300c 	sub	r3, fp, #12
  11cc30:	e51b1010 	ldr	r1, [fp, #-16]
  11cc34:	e1a00003 	mov	r0, r3
  11cc38:	ebffb564 	bl	10a1d0 <sys_arch_sem_wait>
      sys_sem_free(&delaysem);
  11cc3c:	e24b300c 	sub	r3, fp, #12
  11cc40:	e1a00003 	mov	r0, r3
  11cc44:	ebffb54b 	bl	10a178 <sys_sem_free>
    }
  }
}
  11cc48:	e320f000 	nop	{0}
  11cc4c:	e24bd004 	sub	sp, fp, #4
  11cc50:	e8bd8800 	pop	{fp, pc}

0011cc54 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
  11cc54:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11cc58:	e28db000 	add	fp, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
  11cc5c:	e320f000 	nop	{0}
  11cc60:	e28bd000 	add	sp, fp, #0
  11cc64:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11cc68:	e12fff1e 	bx	lr

0011cc6c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
  11cc6c:	e92d4800 	push	{fp, lr}
  11cc70:	e28db004 	add	fp, sp, #4
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
  11cc74:	eb000847 	bl	11ed98 <tcp_fasttmr>

  if (++tcp_timer & 1) {
  11cc78:	e30e3210 	movw	r3, #57872	; 0xe210
  11cc7c:	e3403014 	movt	r3, #20
  11cc80:	e5d33000 	ldrb	r3, [r3]
  11cc84:	e2833001 	add	r3, r3, #1
  11cc88:	e6ef2073 	uxtb	r2, r3
  11cc8c:	e30e3210 	movw	r3, #57872	; 0xe210
  11cc90:	e3403014 	movt	r3, #20
  11cc94:	e5c32000 	strb	r2, [r3]
  11cc98:	e30e3210 	movw	r3, #57872	; 0xe210
  11cc9c:	e3403014 	movt	r3, #20
  11cca0:	e5d33000 	ldrb	r3, [r3]
  11cca4:	e2033001 	and	r3, r3, #1
  11cca8:	e3530000 	cmp	r3, #0
  11ccac:	0a000000 	beq	11ccb4 <tcp_tmr+0x48>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
  11ccb0:	eb0005c8 	bl	11e3d8 <tcp_slowtmr>
  }
}
  11ccb4:	e320f000 	nop	{0}
  11ccb8:	e8bd8800 	pop	{fp, pc}

0011ccbc <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
  11ccbc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11ccc0:	e28db000 	add	fp, sp, #0
  11ccc4:	e24dd014 	sub	sp, sp, #20
  11ccc8:	e50b0010 	str	r0, [fp, #-16]
  11cccc:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
  11ccd0:	e51b3010 	ldr	r3, [fp, #-16]
  11ccd4:	e50b3008 	str	r3, [fp, #-8]
  11ccd8:	ea00000a 	b	11cd08 <tcp_remove_listener+0x4c>
      if (pcb->listener == lpcb) {
  11ccdc:	e51b3008 	ldr	r3, [fp, #-8]
  11cce0:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  11cce4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11cce8:	e1520003 	cmp	r2, r3
  11ccec:	1a000002 	bne	11ccfc <tcp_remove_listener+0x40>
         pcb->listener = NULL;
  11ccf0:	e51b3008 	ldr	r3, [fp, #-8]
  11ccf4:	e3a02000 	mov	r2, #0
  11ccf8:	e583207c 	str	r2, [r3, #124]	; 0x7c
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
  11ccfc:	e51b3008 	ldr	r3, [fp, #-8]
  11cd00:	e593300c 	ldr	r3, [r3, #12]
  11cd04:	e50b3008 	str	r3, [fp, #-8]
  11cd08:	e51b3008 	ldr	r3, [fp, #-8]
  11cd0c:	e3530000 	cmp	r3, #0
  11cd10:	1afffff1 	bne	11ccdc <tcp_remove_listener+0x20>
      }
   }
}
  11cd14:	e320f000 	nop	{0}
  11cd18:	e28bd000 	add	sp, fp, #0
  11cd1c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11cd20:	e12fff1e 	bx	lr

0011cd24 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
  11cd24:	e92d4800 	push	{fp, lr}
  11cd28:	e28db004 	add	fp, sp, #4
  11cd2c:	e24dd010 	sub	sp, sp, #16
  11cd30:	e50b0010 	str	r0, [fp, #-16]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
  11cd34:	e51b3010 	ldr	r3, [fp, #-16]
  11cd38:	e3530000 	cmp	r3, #0
  11cd3c:	1a000006 	bne	11cd5c <tcp_listen_closed+0x38>
  11cd40:	e3070410 	movw	r0, #29712	; 0x7410
  11cd44:	e3400014 	movt	r0, #20
  11cd48:	ebff98f1 	bl	103114 <rt_kprintf>
  11cd4c:	e3a010c0 	mov	r1, #192	; 0xc0
  11cd50:	e307041c 	movw	r0, #29724	; 0x741c
  11cd54:	e3400014 	movt	r0, #20
  11cd58:	ebffb76d 	bl	10ab14 <sys_arch_assert>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
  11cd5c:	e51b3010 	ldr	r3, [fp, #-16]
  11cd60:	e5933014 	ldr	r3, [r3, #20]
  11cd64:	e3530001 	cmp	r3, #1
  11cd68:	0a000006 	beq	11cd88 <tcp_listen_closed+0x64>
  11cd6c:	e3070448 	movw	r0, #29768	; 0x7448
  11cd70:	e3400014 	movt	r0, #20
  11cd74:	ebff98e6 	bl	103114 <rt_kprintf>
  11cd78:	e3a010c1 	mov	r1, #193	; 0xc1
  11cd7c:	e307041c 	movw	r0, #29724	; 0x741c
  11cd80:	e3400014 	movt	r0, #20
  11cd84:	ebffb762 	bl	10ab14 <sys_arch_assert>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
  11cd88:	e3a03001 	mov	r3, #1
  11cd8c:	e50b3008 	str	r3, [fp, #-8]
  11cd90:	ea00000a 	b	11cdc0 <tcp_listen_closed+0x9c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
  11cd94:	e3073400 	movw	r3, #29696	; 0x7400
  11cd98:	e3403014 	movt	r3, #20
  11cd9c:	e51b2008 	ldr	r2, [fp, #-8]
  11cda0:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  11cda4:	e5933000 	ldr	r3, [r3]
  11cda8:	e51b1010 	ldr	r1, [fp, #-16]
  11cdac:	e1a00003 	mov	r0, r3
  11cdb0:	ebffffc1 	bl	11ccbc <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
  11cdb4:	e51b3008 	ldr	r3, [fp, #-8]
  11cdb8:	e2833001 	add	r3, r3, #1
  11cdbc:	e50b3008 	str	r3, [fp, #-8]
  11cdc0:	e51b3008 	ldr	r3, [fp, #-8]
  11cdc4:	e3530003 	cmp	r3, #3
  11cdc8:	9afffff1 	bls	11cd94 <tcp_listen_closed+0x70>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
  11cdcc:	e320f000 	nop	{0}
  11cdd0:	e24bd004 	sub	sp, fp, #4
  11cdd4:	e8bd8800 	pop	{fp, pc}

0011cdd8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
  11cdd8:	e92d4800 	push	{fp, lr}
  11cddc:	e28db004 	add	fp, sp, #4
  11cde0:	e24dd018 	sub	sp, sp, #24
  11cde4:	e50b0010 	str	r0, [fp, #-16]
  11cde8:	e1a03001 	mov	r3, r1
  11cdec:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
  11cdf0:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  11cdf4:	e3530000 	cmp	r3, #0
  11cdf8:	0a000077 	beq	11cfdc <tcp_close_shutdown+0x204>
  11cdfc:	e51b3010 	ldr	r3, [fp, #-16]
  11ce00:	e5933014 	ldr	r3, [r3, #20]
  11ce04:	e3530004 	cmp	r3, #4
  11ce08:	0a000003 	beq	11ce1c <tcp_close_shutdown+0x44>
  11ce0c:	e51b3010 	ldr	r3, [fp, #-16]
  11ce10:	e5933014 	ldr	r3, [r3, #20]
  11ce14:	e3530007 	cmp	r3, #7
  11ce18:	1a00006f 	bne	11cfdc <tcp_close_shutdown+0x204>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
  11ce1c:	e51b3010 	ldr	r3, [fp, #-16]
  11ce20:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11ce24:	e3530000 	cmp	r3, #0
  11ce28:	1a000004 	bne	11ce40 <tcp_close_shutdown+0x68>
  11ce2c:	e51b3010 	ldr	r3, [fp, #-16]
  11ce30:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  11ce34:	e30f2fff 	movw	r2, #65535	; 0xffff
  11ce38:	e1530002 	cmp	r3, r2
  11ce3c:	0a000066 	beq	11cfdc <tcp_close_shutdown+0x204>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
  11ce40:	e51b3010 	ldr	r3, [fp, #-16]
  11ce44:	e5d3301e 	ldrb	r3, [r3, #30]
  11ce48:	e2033010 	and	r3, r3, #16
  11ce4c:	e3530000 	cmp	r3, #0
  11ce50:	1a000006 	bne	11ce70 <tcp_close_shutdown+0x98>
  11ce54:	e3070460 	movw	r0, #29792	; 0x7460
  11ce58:	e3400014 	movt	r0, #20
  11ce5c:	ebff98ac 	bl	103114 <rt_kprintf>
  11ce60:	e300110f 	movw	r1, #271	; 0x10f
  11ce64:	e307041c 	movw	r0, #29724	; 0x741c
  11ce68:	e3400014 	movt	r0, #20
  11ce6c:	ebffb728 	bl	10ab14 <sys_arch_assert>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
  11ce70:	e51b3010 	ldr	r3, [fp, #-16]
  11ce74:	e5930050 	ldr	r0, [r3, #80]	; 0x50
  11ce78:	e51b3010 	ldr	r3, [fp, #-16]
  11ce7c:	e5931028 	ldr	r1, [r3, #40]	; 0x28
  11ce80:	e51bc010 	ldr	ip, [fp, #-16]
  11ce84:	e51b3010 	ldr	r3, [fp, #-16]
  11ce88:	e283e004 	add	lr, r3, #4
  11ce8c:	e51b3010 	ldr	r3, [fp, #-16]
  11ce90:	e1d331ba 	ldrh	r3, [r3, #26]
  11ce94:	e51b2010 	ldr	r2, [fp, #-16]
  11ce98:	e1d221bc 	ldrh	r2, [r2, #28]
  11ce9c:	e58d2004 	str	r2, [sp, #4]
  11cea0:	e58d3000 	str	r3, [sp]
  11cea4:	e1a0300e 	mov	r3, lr
  11cea8:	e1a0200c 	mov	r2, ip
  11ceac:	eb0025b6 	bl	12658c <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
  11ceb0:	e51b0010 	ldr	r0, [fp, #-16]
  11ceb4:	eb000adb 	bl	11fa28 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
  11ceb8:	e30531b0 	movw	r3, #20912	; 0x51b0
  11cebc:	e3403057 	movt	r3, #87	; 0x57
  11cec0:	e5933000 	ldr	r3, [r3]
  11cec4:	e51b2010 	ldr	r2, [fp, #-16]
  11cec8:	e1520003 	cmp	r2, r3
  11cecc:	1a000007 	bne	11cef0 <tcp_close_shutdown+0x118>
  11ced0:	e30531b0 	movw	r3, #20912	; 0x51b0
  11ced4:	e3403057 	movt	r3, #87	; 0x57
  11ced8:	e5933000 	ldr	r3, [r3]
  11cedc:	e593200c 	ldr	r2, [r3, #12]
  11cee0:	e30531b0 	movw	r3, #20912	; 0x51b0
  11cee4:	e3403057 	movt	r3, #87	; 0x57
  11cee8:	e5832000 	str	r2, [r3]
  11ceec:	ea000014 	b	11cf44 <tcp_close_shutdown+0x16c>
  11cef0:	e30531b0 	movw	r3, #20912	; 0x51b0
  11cef4:	e3403057 	movt	r3, #87	; 0x57
  11cef8:	e5933000 	ldr	r3, [r3]
  11cefc:	e50b3008 	str	r3, [fp, #-8]
  11cf00:	ea00000c 	b	11cf38 <tcp_close_shutdown+0x160>
  11cf04:	e51b3008 	ldr	r3, [fp, #-8]
  11cf08:	e593300c 	ldr	r3, [r3, #12]
  11cf0c:	e51b2010 	ldr	r2, [fp, #-16]
  11cf10:	e1520003 	cmp	r2, r3
  11cf14:	1a000004 	bne	11cf2c <tcp_close_shutdown+0x154>
  11cf18:	e51b3010 	ldr	r3, [fp, #-16]
  11cf1c:	e593200c 	ldr	r2, [r3, #12]
  11cf20:	e51b3008 	ldr	r3, [fp, #-8]
  11cf24:	e583200c 	str	r2, [r3, #12]
  11cf28:	ea000005 	b	11cf44 <tcp_close_shutdown+0x16c>
  11cf2c:	e51b3008 	ldr	r3, [fp, #-8]
  11cf30:	e593300c 	ldr	r3, [r3, #12]
  11cf34:	e50b3008 	str	r3, [fp, #-8]
  11cf38:	e51b3008 	ldr	r3, [fp, #-8]
  11cf3c:	e3530000 	cmp	r3, #0
  11cf40:	1affffef 	bne	11cf04 <tcp_close_shutdown+0x12c>
  11cf44:	e51b3010 	ldr	r3, [fp, #-16]
  11cf48:	e3a02000 	mov	r2, #0
  11cf4c:	e583200c 	str	r2, [r3, #12]
  11cf50:	e30531ac 	movw	r3, #20908	; 0x51ac
  11cf54:	e3403057 	movt	r3, #87	; 0x57
  11cf58:	e3a02001 	mov	r2, #1
  11cf5c:	e5c32000 	strb	r2, [r3]
      if (pcb->state == ESTABLISHED) {
  11cf60:	e51b3010 	ldr	r3, [fp, #-16]
  11cf64:	e5933014 	ldr	r3, [r3, #20]
  11cf68:	e3530004 	cmp	r3, #4
  11cf6c:	1a00000d 	bne	11cfa8 <tcp_close_shutdown+0x1d0>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
  11cf70:	e51b3010 	ldr	r3, [fp, #-16]
  11cf74:	e3a0200a 	mov	r2, #10
  11cf78:	e5832014 	str	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
  11cf7c:	e30531c0 	movw	r3, #20928	; 0x51c0
  11cf80:	e3403057 	movt	r3, #87	; 0x57
  11cf84:	e5932000 	ldr	r2, [r3]
  11cf88:	e51b3010 	ldr	r3, [fp, #-16]
  11cf8c:	e583200c 	str	r2, [r3, #12]
  11cf90:	e30531c0 	movw	r3, #20928	; 0x51c0
  11cf94:	e3403057 	movt	r3, #87	; 0x57
  11cf98:	e51b2010 	ldr	r2, [fp, #-16]
  11cf9c:	e5832000 	str	r2, [r3]
  11cfa0:	eb0027cc 	bl	126ed8 <tcp_timer_needed>
  11cfa4:	ea00000a 	b	11cfd4 <tcp_close_shutdown+0x1fc>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
  11cfa8:	e30531c4 	movw	r3, #20932	; 0x51c4
  11cfac:	e3403057 	movt	r3, #87	; 0x57
  11cfb0:	e5933000 	ldr	r3, [r3]
  11cfb4:	e51b2010 	ldr	r2, [fp, #-16]
  11cfb8:	e1520003 	cmp	r2, r3
  11cfbc:	1a000001 	bne	11cfc8 <tcp_close_shutdown+0x1f0>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
  11cfc0:	eb001ce4 	bl	124358 <tcp_trigger_input_pcb_close>
  11cfc4:	ea000002 	b	11cfd4 <tcp_close_shutdown+0x1fc>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
  11cfc8:	e51b1010 	ldr	r1, [fp, #-16]
  11cfcc:	e3a00002 	mov	r0, #2
  11cfd0:	ebffefcf 	bl	118f14 <memp_free>
        }
      }
      return ERR_OK;
  11cfd4:	e3a03000 	mov	r3, #0
  11cfd8:	ea000058 	b	11d140 <tcp_close_shutdown+0x368>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
  11cfdc:	e51b3010 	ldr	r3, [fp, #-16]
  11cfe0:	e5933014 	ldr	r3, [r3, #20]
  11cfe4:	e3530001 	cmp	r3, #1
  11cfe8:	0a000032 	beq	11d0b8 <tcp_close_shutdown+0x2e0>
  11cfec:	e3530001 	cmp	r3, #1
  11cff0:	3a000002 	bcc	11d000 <tcp_close_shutdown+0x228>
  11cff4:	e3530002 	cmp	r3, #2
  11cff8:	0a000038 	beq	11d0e0 <tcp_close_shutdown+0x308>
  11cffc:	ea00004a 	b	11d12c <tcp_close_shutdown+0x354>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
  11d000:	e51b3010 	ldr	r3, [fp, #-16]
  11d004:	e1d331ba 	ldrh	r3, [r3, #26]
  11d008:	e3530000 	cmp	r3, #0
  11d00c:	0a000025 	beq	11d0a8 <tcp_close_shutdown+0x2d0>
      TCP_RMV(&tcp_bound_pcbs, pcb);
  11d010:	e30531bc 	movw	r3, #20924	; 0x51bc
  11d014:	e3403057 	movt	r3, #87	; 0x57
  11d018:	e5933000 	ldr	r3, [r3]
  11d01c:	e51b2010 	ldr	r2, [fp, #-16]
  11d020:	e1520003 	cmp	r2, r3
  11d024:	1a000007 	bne	11d048 <tcp_close_shutdown+0x270>
  11d028:	e30531bc 	movw	r3, #20924	; 0x51bc
  11d02c:	e3403057 	movt	r3, #87	; 0x57
  11d030:	e5933000 	ldr	r3, [r3]
  11d034:	e593200c 	ldr	r2, [r3, #12]
  11d038:	e30531bc 	movw	r3, #20924	; 0x51bc
  11d03c:	e3403057 	movt	r3, #87	; 0x57
  11d040:	e5832000 	str	r2, [r3]
  11d044:	ea000014 	b	11d09c <tcp_close_shutdown+0x2c4>
  11d048:	e30531bc 	movw	r3, #20924	; 0x51bc
  11d04c:	e3403057 	movt	r3, #87	; 0x57
  11d050:	e5933000 	ldr	r3, [r3]
  11d054:	e50b300c 	str	r3, [fp, #-12]
  11d058:	ea00000c 	b	11d090 <tcp_close_shutdown+0x2b8>
  11d05c:	e51b300c 	ldr	r3, [fp, #-12]
  11d060:	e593300c 	ldr	r3, [r3, #12]
  11d064:	e51b2010 	ldr	r2, [fp, #-16]
  11d068:	e1520003 	cmp	r2, r3
  11d06c:	1a000004 	bne	11d084 <tcp_close_shutdown+0x2ac>
  11d070:	e51b3010 	ldr	r3, [fp, #-16]
  11d074:	e593200c 	ldr	r2, [r3, #12]
  11d078:	e51b300c 	ldr	r3, [fp, #-12]
  11d07c:	e583200c 	str	r2, [r3, #12]
  11d080:	ea000005 	b	11d09c <tcp_close_shutdown+0x2c4>
  11d084:	e51b300c 	ldr	r3, [fp, #-12]
  11d088:	e593300c 	ldr	r3, [r3, #12]
  11d08c:	e50b300c 	str	r3, [fp, #-12]
  11d090:	e51b300c 	ldr	r3, [fp, #-12]
  11d094:	e3530000 	cmp	r3, #0
  11d098:	1affffef 	bne	11d05c <tcp_close_shutdown+0x284>
  11d09c:	e51b3010 	ldr	r3, [fp, #-16]
  11d0a0:	e3a02000 	mov	r2, #0
  11d0a4:	e583200c 	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
  11d0a8:	e51b1010 	ldr	r1, [fp, #-16]
  11d0ac:	e3a00002 	mov	r0, #2
  11d0b0:	ebffef97 	bl	118f14 <memp_free>
    break;
  11d0b4:	ea000020 	b	11d13c <tcp_close_shutdown+0x364>
  case LISTEN:
    tcp_listen_closed(pcb);
  11d0b8:	e51b0010 	ldr	r0, [fp, #-16]
  11d0bc:	ebffff18 	bl	11cd24 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
  11d0c0:	e51b1010 	ldr	r1, [fp, #-16]
  11d0c4:	e30501b8 	movw	r0, #20920	; 0x51b8
  11d0c8:	e3400057 	movt	r0, #87	; 0x57
  11d0cc:	eb000a8f 	bl	11fb10 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
  11d0d0:	e51b1010 	ldr	r1, [fp, #-16]
  11d0d4:	e3a00003 	mov	r0, #3
  11d0d8:	ebffef8d 	bl	118f14 <memp_free>
    break;
  11d0dc:	ea000016 	b	11d13c <tcp_close_shutdown+0x364>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
  11d0e0:	e51b1010 	ldr	r1, [fp, #-16]
  11d0e4:	e30501b0 	movw	r0, #20912	; 0x51b0
  11d0e8:	e3400057 	movt	r0, #87	; 0x57
  11d0ec:	eb000a87 	bl	11fb10 <tcp_pcb_remove>
  11d0f0:	e30531ac 	movw	r3, #20908	; 0x51ac
  11d0f4:	e3403057 	movt	r3, #87	; 0x57
  11d0f8:	e3a02001 	mov	r2, #1
  11d0fc:	e5c32000 	strb	r2, [r3]
    memp_free(MEMP_TCP_PCB, pcb);
  11d100:	e51b1010 	ldr	r1, [fp, #-16]
  11d104:	e3a00002 	mov	r0, #2
  11d108:	ebffef81 	bl	118f14 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
  11d10c:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  11d110:	e3403057 	movt	r3, #87	; 0x57
  11d114:	e5933174 	ldr	r3, [r3, #372]	; 0x174
  11d118:	e2832001 	add	r2, r3, #1
  11d11c:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  11d120:	e3403057 	movt	r3, #87	; 0x57
  11d124:	e5832174 	str	r2, [r3, #372]	; 0x174
    break;
  11d128:	ea000003 	b	11d13c <tcp_close_shutdown+0x364>
  default:
    return tcp_close_shutdown_fin(pcb);
  11d12c:	e51b0010 	ldr	r0, [fp, #-16]
  11d130:	eb000005 	bl	11d14c <tcp_close_shutdown_fin>
  11d134:	e1a03000 	mov	r3, r0
  11d138:	ea000000 	b	11d140 <tcp_close_shutdown+0x368>
  }
  return ERR_OK;
  11d13c:	e3a03000 	mov	r3, #0
}
  11d140:	e1a00003 	mov	r0, r3
  11d144:	e24bd004 	sub	sp, fp, #4
  11d148:	e8bd8800 	pop	{fp, pc}

0011d14c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
  11d14c:	e92d4800 	push	{fp, lr}
  11d150:	e28db004 	add	fp, sp, #4
  11d154:	e24dd010 	sub	sp, sp, #16
  11d158:	e50b0010 	str	r0, [fp, #-16]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
  11d15c:	e51b3010 	ldr	r3, [fp, #-16]
  11d160:	e3530000 	cmp	r3, #0
  11d164:	1a000006 	bne	11d184 <tcp_close_shutdown_fin+0x38>
  11d168:	e3070410 	movw	r0, #29712	; 0x7410
  11d16c:	e3400014 	movt	r0, #20
  11d170:	ebff97e7 	bl	103114 <rt_kprintf>
  11d174:	e300114d 	movw	r1, #333	; 0x14d
  11d178:	e307041c 	movw	r0, #29724	; 0x741c
  11d17c:	e3400014 	movt	r0, #20
  11d180:	ebffb663 	bl	10ab14 <sys_arch_assert>

  switch (pcb->state) {
  11d184:	e51b3010 	ldr	r3, [fp, #-16]
  11d188:	e5933014 	ldr	r3, [r3, #20]
  11d18c:	e3530004 	cmp	r3, #4
  11d190:	0a000015 	beq	11d1ec <tcp_close_shutdown_fin+0xa0>
  11d194:	e3530007 	cmp	r3, #7
  11d198:	0a000025 	beq	11d234 <tcp_close_shutdown_fin+0xe8>
  11d19c:	e3530003 	cmp	r3, #3
  11d1a0:	1a000035 	bne	11d27c <tcp_close_shutdown_fin+0x130>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
  11d1a4:	e51b0010 	ldr	r0, [fp, #-16]
  11d1a8:	eb001ce6 	bl	124548 <tcp_send_fin>
  11d1ac:	e1a03000 	mov	r3, r0
  11d1b0:	e54b3005 	strb	r3, [fp, #-5]
    if (err == ERR_OK) {
  11d1b4:	e15b30d5 	ldrsb	r3, [fp, #-5]
  11d1b8:	e3530000 	cmp	r3, #0
  11d1bc:	1a000030 	bne	11d284 <tcp_close_shutdown_fin+0x138>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
  11d1c0:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  11d1c4:	e3403057 	movt	r3, #87	; 0x57
  11d1c8:	e5933174 	ldr	r3, [r3, #372]	; 0x174
  11d1cc:	e2832001 	add	r2, r3, #1
  11d1d0:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  11d1d4:	e3403057 	movt	r3, #87	; 0x57
  11d1d8:	e5832174 	str	r2, [r3, #372]	; 0x174
      pcb->state = FIN_WAIT_1;
  11d1dc:	e51b3010 	ldr	r3, [fp, #-16]
  11d1e0:	e3a02005 	mov	r2, #5
  11d1e4:	e5832014 	str	r2, [r3, #20]
    }
    break;
  11d1e8:	ea000025 	b	11d284 <tcp_close_shutdown_fin+0x138>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
  11d1ec:	e51b0010 	ldr	r0, [fp, #-16]
  11d1f0:	eb001cd4 	bl	124548 <tcp_send_fin>
  11d1f4:	e1a03000 	mov	r3, r0
  11d1f8:	e54b3005 	strb	r3, [fp, #-5]
    if (err == ERR_OK) {
  11d1fc:	e15b30d5 	ldrsb	r3, [fp, #-5]
  11d200:	e3530000 	cmp	r3, #0
  11d204:	1a000020 	bne	11d28c <tcp_close_shutdown_fin+0x140>
      MIB2_STATS_INC(mib2.tcpestabresets);
  11d208:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  11d20c:	e3403057 	movt	r3, #87	; 0x57
  11d210:	e5933178 	ldr	r3, [r3, #376]	; 0x178
  11d214:	e2832001 	add	r2, r3, #1
  11d218:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  11d21c:	e3403057 	movt	r3, #87	; 0x57
  11d220:	e5832178 	str	r2, [r3, #376]	; 0x178
      pcb->state = FIN_WAIT_1;
  11d224:	e51b3010 	ldr	r3, [fp, #-16]
  11d228:	e3a02005 	mov	r2, #5
  11d22c:	e5832014 	str	r2, [r3, #20]
    }
    break;
  11d230:	ea000015 	b	11d28c <tcp_close_shutdown_fin+0x140>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
  11d234:	e51b0010 	ldr	r0, [fp, #-16]
  11d238:	eb001cc2 	bl	124548 <tcp_send_fin>
  11d23c:	e1a03000 	mov	r3, r0
  11d240:	e54b3005 	strb	r3, [fp, #-5]
    if (err == ERR_OK) {
  11d244:	e15b30d5 	ldrsb	r3, [fp, #-5]
  11d248:	e3530000 	cmp	r3, #0
  11d24c:	1a000010 	bne	11d294 <tcp_close_shutdown_fin+0x148>
      MIB2_STATS_INC(mib2.tcpestabresets);
  11d250:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  11d254:	e3403057 	movt	r3, #87	; 0x57
  11d258:	e5933178 	ldr	r3, [r3, #376]	; 0x178
  11d25c:	e2832001 	add	r2, r3, #1
  11d260:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  11d264:	e3403057 	movt	r3, #87	; 0x57
  11d268:	e5832178 	str	r2, [r3, #376]	; 0x178
      pcb->state = LAST_ACK;
  11d26c:	e51b3010 	ldr	r3, [fp, #-16]
  11d270:	e3a02009 	mov	r2, #9
  11d274:	e5832014 	str	r2, [r3, #20]
    }
    break;
  11d278:	ea000005 	b	11d294 <tcp_close_shutdown_fin+0x148>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
  11d27c:	e3a03000 	mov	r3, #0
  11d280:	ea000014 	b	11d2d8 <tcp_close_shutdown_fin+0x18c>
    break;
  11d284:	e320f000 	nop	{0}
  11d288:	ea000002 	b	11d298 <tcp_close_shutdown_fin+0x14c>
    break;
  11d28c:	e320f000 	nop	{0}
  11d290:	ea000000 	b	11d298 <tcp_close_shutdown_fin+0x14c>
    break;
  11d294:	e320f000 	nop	{0}
    break;
  }

  if (err == ERR_OK) {
  11d298:	e15b30d5 	ldrsb	r3, [fp, #-5]
  11d29c:	e3530000 	cmp	r3, #0
  11d2a0:	1a000002 	bne	11d2b0 <tcp_close_shutdown_fin+0x164>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
  11d2a4:	e51b0010 	ldr	r0, [fp, #-16]
  11d2a8:	eb002251 	bl	125bf4 <tcp_output>
  11d2ac:	ea000008 	b	11d2d4 <tcp_close_shutdown_fin+0x188>
  } else if (err == ERR_MEM) {
  11d2b0:	e15b30d5 	ldrsb	r3, [fp, #-5]
  11d2b4:	e3730001 	cmn	r3, #1
  11d2b8:	1a000005 	bne	11d2d4 <tcp_close_shutdown_fin+0x188>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
  11d2bc:	e51b3010 	ldr	r3, [fp, #-16]
  11d2c0:	e5d3301e 	ldrb	r3, [r3, #30]
  11d2c4:	e3833008 	orr	r3, r3, #8
  11d2c8:	e6ef2073 	uxtb	r2, r3
  11d2cc:	e51b3010 	ldr	r3, [fp, #-16]
  11d2d0:	e5c3201e 	strb	r2, [r3, #30]
  }
  return err;
  11d2d4:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  11d2d8:	e1a00003 	mov	r0, r3
  11d2dc:	e24bd004 	sub	sp, fp, #4
  11d2e0:	e8bd8800 	pop	{fp, pc}

0011d2e4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
  11d2e4:	e92d4800 	push	{fp, lr}
  11d2e8:	e28db004 	add	fp, sp, #4
  11d2ec:	e24dd008 	sub	sp, sp, #8
  11d2f0:	e50b0008 	str	r0, [fp, #-8]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
  11d2f4:	e51b3008 	ldr	r3, [fp, #-8]
  11d2f8:	e5933014 	ldr	r3, [r3, #20]
  11d2fc:	e3530001 	cmp	r3, #1
  11d300:	0a000005 	beq	11d31c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
  11d304:	e51b3008 	ldr	r3, [fp, #-8]
  11d308:	e5d3301e 	ldrb	r3, [r3, #30]
  11d30c:	e3833010 	orr	r3, r3, #16
  11d310:	e6ef2073 	uxtb	r2, r3
  11d314:	e51b3008 	ldr	r3, [fp, #-8]
  11d318:	e5c3201e 	strb	r2, [r3, #30]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
  11d31c:	e3a01001 	mov	r1, #1
  11d320:	e51b0008 	ldr	r0, [fp, #-8]
  11d324:	ebfffeab 	bl	11cdd8 <tcp_close_shutdown>
  11d328:	e1a03000 	mov	r3, r0
}
  11d32c:	e1a00003 	mov	r0, r3
  11d330:	e24bd004 	sub	sp, fp, #4
  11d334:	e8bd8800 	pop	{fp, pc}

0011d338 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
  11d338:	e92d4800 	push	{fp, lr}
  11d33c:	e28db004 	add	fp, sp, #4
  11d340:	e24dd010 	sub	sp, sp, #16
  11d344:	e50b0008 	str	r0, [fp, #-8]
  11d348:	e50b100c 	str	r1, [fp, #-12]
  11d34c:	e50b2010 	str	r2, [fp, #-16]
  if (pcb->state == LISTEN) {
  11d350:	e51b3008 	ldr	r3, [fp, #-8]
  11d354:	e5933014 	ldr	r3, [r3, #20]
  11d358:	e3530001 	cmp	r3, #1
  11d35c:	1a000001 	bne	11d368 <tcp_shutdown+0x30>
    return ERR_CONN;
  11d360:	e3e0300a 	mvn	r3, #10
  11d364:	ea000030 	b	11d42c <tcp_shutdown+0xf4>
  }
  if (shut_rx) {
  11d368:	e51b300c 	ldr	r3, [fp, #-12]
  11d36c:	e3530000 	cmp	r3, #0
  11d370:	0a000018 	beq	11d3d8 <tcp_shutdown+0xa0>
    /* shut down the receive side: set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
  11d374:	e51b3008 	ldr	r3, [fp, #-8]
  11d378:	e5d3301e 	ldrb	r3, [r3, #30]
  11d37c:	e3833010 	orr	r3, r3, #16
  11d380:	e6ef2073 	uxtb	r2, r3
  11d384:	e51b3008 	ldr	r3, [fp, #-8]
  11d388:	e5c3201e 	strb	r2, [r3, #30]
    if (shut_tx) {
  11d38c:	e51b3010 	ldr	r3, [fp, #-16]
  11d390:	e3530000 	cmp	r3, #0
  11d394:	0a000004 	beq	11d3ac <tcp_shutdown+0x74>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
  11d398:	e3a01001 	mov	r1, #1
  11d39c:	e51b0008 	ldr	r0, [fp, #-8]
  11d3a0:	ebfffe8c 	bl	11cdd8 <tcp_close_shutdown>
  11d3a4:	e1a03000 	mov	r3, r0
  11d3a8:	ea00001f 	b	11d42c <tcp_shutdown+0xf4>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
  11d3ac:	e51b3008 	ldr	r3, [fp, #-8]
  11d3b0:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11d3b4:	e3530000 	cmp	r3, #0
  11d3b8:	0a000006 	beq	11d3d8 <tcp_shutdown+0xa0>
      pbuf_free(pcb->refused_data);
  11d3bc:	e51b3008 	ldr	r3, [fp, #-8]
  11d3c0:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11d3c4:	e1a00003 	mov	r0, r3
  11d3c8:	ebfff5df 	bl	11ab4c <pbuf_free>
      pcb->refused_data = NULL;
  11d3cc:	e51b3008 	ldr	r3, [fp, #-8]
  11d3d0:	e3a02000 	mov	r2, #0
  11d3d4:	e5832078 	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
  11d3d8:	e51b3010 	ldr	r3, [fp, #-16]
  11d3dc:	e3530000 	cmp	r3, #0
  11d3e0:	0a000010 	beq	11d428 <tcp_shutdown+0xf0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
  11d3e4:	e51b3008 	ldr	r3, [fp, #-8]
  11d3e8:	e5933014 	ldr	r3, [r3, #20]
  11d3ec:	e3530003 	cmp	r3, #3
  11d3f0:	3a00000a 	bcc	11d420 <tcp_shutdown+0xe8>
  11d3f4:	e3530004 	cmp	r3, #4
  11d3f8:	9a000001 	bls	11d404 <tcp_shutdown+0xcc>
  11d3fc:	e3530007 	cmp	r3, #7
  11d400:	1a000006 	bne	11d420 <tcp_shutdown+0xe8>
    case SYN_RCVD:
    case ESTABLISHED:
    case CLOSE_WAIT:
      return tcp_close_shutdown(pcb, (u8_t)shut_rx);
  11d404:	e51b300c 	ldr	r3, [fp, #-12]
  11d408:	e6ef3073 	uxtb	r3, r3
  11d40c:	e1a01003 	mov	r1, r3
  11d410:	e51b0008 	ldr	r0, [fp, #-8]
  11d414:	ebfffe6f 	bl	11cdd8 <tcp_close_shutdown>
  11d418:	e1a03000 	mov	r3, r0
  11d41c:	ea000002 	b	11d42c <tcp_shutdown+0xf4>
    default:
      /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
        into CLOSED state, where the PCB is deallocated. */
      return ERR_CONN;
  11d420:	e3e0300a 	mvn	r3, #10
  11d424:	ea000000 	b	11d42c <tcp_shutdown+0xf4>
    }
  }
  return ERR_OK;
  11d428:	e3a03000 	mov	r3, #0
}
  11d42c:	e1a00003 	mov	r0, r3
  11d430:	e24bd004 	sub	sp, fp, #4
  11d434:	e8bd8800 	pop	{fp, pc}

0011d438 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
  11d438:	e92d4800 	push	{fp, lr}
  11d43c:	e28db004 	add	fp, sp, #4
  11d440:	e24dd030 	sub	sp, sp, #48	; 0x30
  11d444:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  11d448:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
  11d44c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d450:	e5933014 	ldr	r3, [r3, #20]
  11d454:	e3530001 	cmp	r3, #1
  11d458:	1a000006 	bne	11d478 <tcp_abandon+0x40>
  11d45c:	e307047c 	movw	r0, #29820	; 0x747c
  11d460:	e3400014 	movt	r0, #20
  11d464:	ebff972a 	bl	103114 <rt_kprintf>
  11d468:	e30011db 	movw	r1, #475	; 0x1db
  11d46c:	e307041c 	movw	r0, #29724	; 0x741c
  11d470:	e3400014 	movt	r0, #20
  11d474:	ebffb5a6 	bl	10ab14 <sys_arch_assert>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
  11d478:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d47c:	e5933014 	ldr	r3, [r3, #20]
  11d480:	e353000a 	cmp	r3, #10
  11d484:	1a000007 	bne	11d4a8 <tcp_abandon+0x70>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
  11d488:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  11d48c:	e30501c0 	movw	r0, #20928	; 0x51c0
  11d490:	e3400057 	movt	r0, #87	; 0x57
  11d494:	eb00099d 	bl	11fb10 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
  11d498:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  11d49c:	e3a00002 	mov	r0, #2
  11d4a0:	ebffee9b 	bl	118f14 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
  11d4a4:	ea00007f 	b	11d6a8 <tcp_abandon+0x270>
    int send_rst = 0;
  11d4a8:	e3a03000 	mov	r3, #0
  11d4ac:	e50b3008 	str	r3, [fp, #-8]
    u16_t local_port = 0;
  11d4b0:	e3a03000 	mov	r3, #0
  11d4b4:	e14b30ba 	strh	r3, [fp, #-10]
    seqno = pcb->snd_nxt;
  11d4b8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d4bc:	e5933050 	ldr	r3, [r3, #80]	; 0x50
  11d4c0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    ackno = pcb->rcv_nxt;
  11d4c4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d4c8:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  11d4cc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    errf = pcb->errf;
  11d4d0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d4d4:	e5933090 	ldr	r3, [r3, #144]	; 0x90
  11d4d8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    errf_arg = pcb->callback_arg;
  11d4dc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d4e0:	e5933010 	ldr	r3, [r3, #16]
  11d4e4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    if (pcb->state == CLOSED) {
  11d4e8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d4ec:	e5933014 	ldr	r3, [r3, #20]
  11d4f0:	e3530000 	cmp	r3, #0
  11d4f4:	1a00002a 	bne	11d5a4 <tcp_abandon+0x16c>
      if (pcb->local_port != 0) {
  11d4f8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d4fc:	e1d331ba 	ldrh	r3, [r3, #26]
  11d500:	e3530000 	cmp	r3, #0
  11d504:	0a000033 	beq	11d5d8 <tcp_abandon+0x1a0>
        TCP_RMV(&tcp_bound_pcbs, pcb);
  11d508:	e30531bc 	movw	r3, #20924	; 0x51bc
  11d50c:	e3403057 	movt	r3, #87	; 0x57
  11d510:	e5933000 	ldr	r3, [r3]
  11d514:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11d518:	e1520003 	cmp	r2, r3
  11d51c:	1a000007 	bne	11d540 <tcp_abandon+0x108>
  11d520:	e30531bc 	movw	r3, #20924	; 0x51bc
  11d524:	e3403057 	movt	r3, #87	; 0x57
  11d528:	e5933000 	ldr	r3, [r3]
  11d52c:	e593200c 	ldr	r2, [r3, #12]
  11d530:	e30531bc 	movw	r3, #20924	; 0x51bc
  11d534:	e3403057 	movt	r3, #87	; 0x57
  11d538:	e5832000 	str	r2, [r3]
  11d53c:	ea000014 	b	11d594 <tcp_abandon+0x15c>
  11d540:	e30531bc 	movw	r3, #20924	; 0x51bc
  11d544:	e3403057 	movt	r3, #87	; 0x57
  11d548:	e5933000 	ldr	r3, [r3]
  11d54c:	e50b3010 	str	r3, [fp, #-16]
  11d550:	ea00000c 	b	11d588 <tcp_abandon+0x150>
  11d554:	e51b3010 	ldr	r3, [fp, #-16]
  11d558:	e593300c 	ldr	r3, [r3, #12]
  11d55c:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11d560:	e1520003 	cmp	r2, r3
  11d564:	1a000004 	bne	11d57c <tcp_abandon+0x144>
  11d568:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d56c:	e593200c 	ldr	r2, [r3, #12]
  11d570:	e51b3010 	ldr	r3, [fp, #-16]
  11d574:	e583200c 	str	r2, [r3, #12]
  11d578:	ea000005 	b	11d594 <tcp_abandon+0x15c>
  11d57c:	e51b3010 	ldr	r3, [fp, #-16]
  11d580:	e593300c 	ldr	r3, [r3, #12]
  11d584:	e50b3010 	str	r3, [fp, #-16]
  11d588:	e51b3010 	ldr	r3, [fp, #-16]
  11d58c:	e3530000 	cmp	r3, #0
  11d590:	1affffef 	bne	11d554 <tcp_abandon+0x11c>
  11d594:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d598:	e3a02000 	mov	r2, #0
  11d59c:	e583200c 	str	r2, [r3, #12]
  11d5a0:	ea00000c 	b	11d5d8 <tcp_abandon+0x1a0>
      send_rst = reset;
  11d5a4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11d5a8:	e50b3008 	str	r3, [fp, #-8]
      local_port = pcb->local_port;
  11d5ac:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d5b0:	e1d331ba 	ldrh	r3, [r3, #26]
  11d5b4:	e14b30ba 	strh	r3, [fp, #-10]
      TCP_PCB_REMOVE_ACTIVE(pcb);
  11d5b8:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  11d5bc:	e30501b0 	movw	r0, #20912	; 0x51b0
  11d5c0:	e3400057 	movt	r0, #87	; 0x57
  11d5c4:	eb000951 	bl	11fb10 <tcp_pcb_remove>
  11d5c8:	e30531ac 	movw	r3, #20908	; 0x51ac
  11d5cc:	e3403057 	movt	r3, #87	; 0x57
  11d5d0:	e3a02001 	mov	r2, #1
  11d5d4:	e5c32000 	strb	r2, [r3]
    if (pcb->unacked != NULL) {
  11d5d8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d5dc:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  11d5e0:	e3530000 	cmp	r3, #0
  11d5e4:	0a000003 	beq	11d5f8 <tcp_abandon+0x1c0>
      tcp_segs_free(pcb->unacked);
  11d5e8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d5ec:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  11d5f0:	e1a00003 	mov	r0, r3
  11d5f4:	eb0006b4 	bl	11f0cc <tcp_segs_free>
    if (pcb->unsent != NULL) {
  11d5f8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d5fc:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  11d600:	e3530000 	cmp	r3, #0
  11d604:	0a000003 	beq	11d618 <tcp_abandon+0x1e0>
      tcp_segs_free(pcb->unsent);
  11d608:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d60c:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  11d610:	e1a00003 	mov	r0, r3
  11d614:	eb0006ac 	bl	11f0cc <tcp_segs_free>
    if (pcb->ooseq != NULL) {
  11d618:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d61c:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  11d620:	e3530000 	cmp	r3, #0
  11d624:	0a000003 	beq	11d638 <tcp_abandon+0x200>
      tcp_segs_free(pcb->ooseq);
  11d628:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d62c:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  11d630:	e1a00003 	mov	r0, r3
  11d634:	eb0006a4 	bl	11f0cc <tcp_segs_free>
    if (send_rst) {
  11d638:	e51b3008 	ldr	r3, [fp, #-8]
  11d63c:	e3530000 	cmp	r3, #0
  11d640:	0a00000b 	beq	11d674 <tcp_abandon+0x23c>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
  11d644:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11d648:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d64c:	e2831004 	add	r1, r3, #4
  11d650:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d654:	e1d331bc 	ldrh	r3, [r3, #28]
  11d658:	e58d3004 	str	r3, [sp, #4]
  11d65c:	e15b30ba 	ldrh	r3, [fp, #-10]
  11d660:	e58d3000 	str	r3, [sp]
  11d664:	e1a03001 	mov	r3, r1
  11d668:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11d66c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  11d670:	eb0023c5 	bl	12658c <tcp_rst>
    last_state = pcb->state;
  11d674:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d678:	e5933014 	ldr	r3, [r3, #20]
  11d67c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    memp_free(MEMP_TCP_PCB, pcb);
  11d680:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  11d684:	e3a00002 	mov	r0, #2
  11d688:	ebffee21 	bl	118f14 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  11d68c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11d690:	e3530000 	cmp	r3, #0
  11d694:	0a000003 	beq	11d6a8 <tcp_abandon+0x270>
  11d698:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11d69c:	e3e0100c 	mvn	r1, #12
  11d6a0:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  11d6a4:	e12fff33 	blx	r3
}
  11d6a8:	e320f000 	nop	{0}
  11d6ac:	e24bd004 	sub	sp, fp, #4
  11d6b0:	e8bd8800 	pop	{fp, pc}

0011d6b4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
  11d6b4:	e92d4800 	push	{fp, lr}
  11d6b8:	e28db004 	add	fp, sp, #4
  11d6bc:	e24dd008 	sub	sp, sp, #8
  11d6c0:	e50b0008 	str	r0, [fp, #-8]
  tcp_abandon(pcb, 1);
  11d6c4:	e3a01001 	mov	r1, #1
  11d6c8:	e51b0008 	ldr	r0, [fp, #-8]
  11d6cc:	ebffff59 	bl	11d438 <tcp_abandon>
}
  11d6d0:	e320f000 	nop	{0}
  11d6d4:	e24bd004 	sub	sp, fp, #4
  11d6d8:	e8bd8800 	pop	{fp, pc}

0011d6dc <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
  11d6dc:	e92d4800 	push	{fp, lr}
  11d6e0:	e28db004 	add	fp, sp, #4
  11d6e4:	e24dd020 	sub	sp, sp, #32
  11d6e8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11d6ec:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  11d6f0:	e1a03002 	mov	r3, r2
  11d6f4:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
  11d6f8:	e3a03004 	mov	r3, #4
  11d6fc:	e50b300c 	str	r3, [fp, #-12]
  struct tcp_pcb *cpcb;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
  11d700:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11d704:	e3530000 	cmp	r3, #0
  11d708:	1a000002 	bne	11d718 <tcp_bind+0x3c>
    ipaddr = IP4_ADDR_ANY;
  11d70c:	e3083e3c 	movw	r3, #36412	; 0x8e3c
  11d710:	e3403014 	movt	r3, #20
  11d714:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
  11d718:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11d71c:	e3530000 	cmp	r3, #0
  11d720:	0a000002 	beq	11d730 <tcp_bind+0x54>
  11d724:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11d728:	e3530000 	cmp	r3, #0
  11d72c:	1a000001 	bne	11d738 <tcp_bind+0x5c>
    return ERR_VAL;
  11d730:	e3e03005 	mvn	r3, #5
  11d734:	ea000078 	b	11d91c <tcp_bind+0x240>
  }

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
  11d738:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11d73c:	e5933014 	ldr	r3, [r3, #20]
  11d740:	e3530000 	cmp	r3, #0
  11d744:	0a000008 	beq	11d76c <tcp_bind+0x90>
  11d748:	e30704b0 	movw	r0, #29872	; 0x74b0
  11d74c:	e3400014 	movt	r0, #20
  11d750:	ebff966f 	bl	103114 <rt_kprintf>
  11d754:	e300123f 	movw	r1, #575	; 0x23f
  11d758:	e307041c 	movw	r0, #29724	; 0x741c
  11d75c:	e3400014 	movt	r0, #20
  11d760:	ebffb4eb 	bl	10ab14 <sys_arch_assert>
  11d764:	e3e03005 	mvn	r3, #5
  11d768:	ea00006b 	b	11d91c <tcp_bind+0x240>
  /* Unless the REUSEADDR flag is set,
     we have to check the pcbs in TIME-WAIT state, also.
     We do not dump TIME_WAIT pcb's; they can still be matched by incoming
     packets using both local and remote IP addresses and ports to distinguish.
   */
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
  11d76c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11d770:	e5d33008 	ldrb	r3, [r3, #8]
  11d774:	e2033004 	and	r3, r3, #4
  11d778:	e3530000 	cmp	r3, #0
  11d77c:	0a000001 	beq	11d788 <tcp_bind+0xac>
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  11d780:	e3a03003 	mov	r3, #3
  11d784:	e50b300c 	str	r3, [fp, #-12]
  }
#endif /* SO_REUSE */

  if (port == 0) {
  11d788:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11d78c:	e3530000 	cmp	r3, #0
  11d790:	1a000007 	bne	11d7b4 <tcp_bind+0xd8>
    port = tcp_new_port();
  11d794:	eb0001ba 	bl	11de84 <tcp_new_port>
  11d798:	e1a03000 	mov	r3, r0
  11d79c:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
    if (port == 0) {
  11d7a0:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11d7a4:	e3530000 	cmp	r3, #0
  11d7a8:	1a00003d 	bne	11d8a4 <tcp_bind+0x1c8>
      return ERR_BUF;
  11d7ac:	e3e03001 	mvn	r3, #1
  11d7b0:	ea000059 	b	11d91c <tcp_bind+0x240>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
  11d7b4:	e3a03000 	mov	r3, #0
  11d7b8:	e50b3008 	str	r3, [fp, #-8]
  11d7bc:	ea000034 	b	11d894 <tcp_bind+0x1b8>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
  11d7c0:	e3073400 	movw	r3, #29696	; 0x7400
  11d7c4:	e3403014 	movt	r3, #20
  11d7c8:	e51b2008 	ldr	r2, [fp, #-8]
  11d7cc:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  11d7d0:	e5933000 	ldr	r3, [r3]
  11d7d4:	e50b3010 	str	r3, [fp, #-16]
  11d7d8:	ea000027 	b	11d87c <tcp_bind+0x1a0>
        if (cpcb->local_port == port) {
  11d7dc:	e51b3010 	ldr	r3, [fp, #-16]
  11d7e0:	e1d331ba 	ldrh	r3, [r3, #26]
  11d7e4:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  11d7e8:	e1520003 	cmp	r2, r3
  11d7ec:	1a00001f 	bne	11d870 <tcp_bind+0x194>
#if SO_REUSE
          /* Omit checking for the same port if both pcbs have REUSEADDR set.
             For SO_REUSEADDR, the duplicate-check for a 5-tuple is done in
             tcp_connect. */
          if (!ip_get_option(pcb, SOF_REUSEADDR) ||
  11d7f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11d7f4:	e5d33008 	ldrb	r3, [r3, #8]
  11d7f8:	e2033004 	and	r3, r3, #4
  11d7fc:	e3530000 	cmp	r3, #0
  11d800:	0a000004 	beq	11d818 <tcp_bind+0x13c>
              !ip_get_option(cpcb, SOF_REUSEADDR))
  11d804:	e51b3010 	ldr	r3, [fp, #-16]
  11d808:	e5d33008 	ldrb	r3, [r3, #8]
  11d80c:	e2033004 	and	r3, r3, #4
          if (!ip_get_option(pcb, SOF_REUSEADDR) ||
  11d810:	e3530000 	cmp	r3, #0
  11d814:	1a000015 	bne	11d870 <tcp_bind+0x194>
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
  11d818:	e51b3010 	ldr	r3, [fp, #-16]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
  11d81c:	e3530000 	cmp	r3, #0
  11d820:	0a000010 	beq	11d868 <tcp_bind+0x18c>
                (ip_addr_isany(&cpcb->local_ip) ||
  11d824:	e51b3010 	ldr	r3, [fp, #-16]
  11d828:	e5933000 	ldr	r3, [r3]
  11d82c:	e3530000 	cmp	r3, #0
  11d830:	0a00000c 	beq	11d868 <tcp_bind+0x18c>
  11d834:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11d838:	e3530000 	cmp	r3, #0
  11d83c:	0a000009 	beq	11d868 <tcp_bind+0x18c>
                ip_addr_isany(ipaddr) ||
  11d840:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11d844:	e5933000 	ldr	r3, [r3]
  11d848:	e3530000 	cmp	r3, #0
  11d84c:	0a000005 	beq	11d868 <tcp_bind+0x18c>
                ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
  11d850:	e51b3010 	ldr	r3, [fp, #-16]
  11d854:	e5932000 	ldr	r2, [r3]
  11d858:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11d85c:	e5933000 	ldr	r3, [r3]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
  11d860:	e1520003 	cmp	r2, r3
  11d864:	1a000001 	bne	11d870 <tcp_bind+0x194>
              return ERR_USE;
  11d868:	e3e03007 	mvn	r3, #7
  11d86c:	ea00002a 	b	11d91c <tcp_bind+0x240>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
  11d870:	e51b3010 	ldr	r3, [fp, #-16]
  11d874:	e593300c 	ldr	r3, [r3, #12]
  11d878:	e50b3010 	str	r3, [fp, #-16]
  11d87c:	e51b3010 	ldr	r3, [fp, #-16]
  11d880:	e3530000 	cmp	r3, #0
  11d884:	1affffd4 	bne	11d7dc <tcp_bind+0x100>
    for (i = 0; i < max_pcb_list; i++) {
  11d888:	e51b3008 	ldr	r3, [fp, #-8]
  11d88c:	e2833001 	add	r3, r3, #1
  11d890:	e50b3008 	str	r3, [fp, #-8]
  11d894:	e51b2008 	ldr	r2, [fp, #-8]
  11d898:	e51b300c 	ldr	r3, [fp, #-12]
  11d89c:	e1520003 	cmp	r2, r3
  11d8a0:	baffffc6 	blt	11d7c0 <tcp_bind+0xe4>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
  11d8a4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11d8a8:	e3530000 	cmp	r3, #0
  11d8ac:	0a00000c 	beq	11d8e4 <tcp_bind+0x208>
  11d8b0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11d8b4:	e5933000 	ldr	r3, [r3]
  11d8b8:	e3530000 	cmp	r3, #0
  11d8bc:	0a000008 	beq	11d8e4 <tcp_bind+0x208>
    ip_addr_set(&pcb->local_ip, ipaddr);
  11d8c0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11d8c4:	e3530000 	cmp	r3, #0
  11d8c8:	0a000002 	beq	11d8d8 <tcp_bind+0x1fc>
  11d8cc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11d8d0:	e5933000 	ldr	r3, [r3]
  11d8d4:	ea000000 	b	11d8dc <tcp_bind+0x200>
  11d8d8:	e3a03000 	mov	r3, #0
  11d8dc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11d8e0:	e5823000 	str	r3, [r2]
  }
  pcb->local_port = port;
  11d8e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11d8e8:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  11d8ec:	e1c321ba 	strh	r2, [r3, #26]
  TCP_REG(&tcp_bound_pcbs, pcb);
  11d8f0:	e30531bc 	movw	r3, #20924	; 0x51bc
  11d8f4:	e3403057 	movt	r3, #87	; 0x57
  11d8f8:	e5932000 	ldr	r2, [r3]
  11d8fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11d900:	e583200c 	str	r2, [r3, #12]
  11d904:	e30531bc 	movw	r3, #20924	; 0x51bc
  11d908:	e3403057 	movt	r3, #87	; 0x57
  11d90c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11d910:	e5832000 	str	r2, [r3]
  11d914:	eb00256f 	bl	126ed8 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
  11d918:	e3a03000 	mov	r3, #0
}
  11d91c:	e1a00003 	mov	r0, r3
  11d920:	e24bd004 	sub	sp, fp, #4
  11d924:	e8bd8800 	pop	{fp, pc}

0011d928 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
  11d928:	e92d4800 	push	{fp, lr}
  11d92c:	e28db004 	add	fp, sp, #4
  11d930:	e24dd010 	sub	sp, sp, #16
  11d934:	e50b0008 	str	r0, [fp, #-8]
  11d938:	e50b100c 	str	r1, [fp, #-12]
  11d93c:	e1a03002 	mov	r3, r2
  11d940:	e54b300d 	strb	r3, [fp, #-13]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcp_abort(pcb);
  11d944:	e51b000c 	ldr	r0, [fp, #-12]
  11d948:	ebffff59 	bl	11d6b4 <tcp_abort>

  return ERR_ABRT;
  11d94c:	e3e0300c 	mvn	r3, #12
}
  11d950:	e1a00003 	mov	r0, r3
  11d954:	e24bd004 	sub	sp, fp, #4
  11d958:	e8bd8800 	pop	{fp, pc}

0011d95c <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
  11d95c:	e92d4800 	push	{fp, lr}
  11d960:	e28db004 	add	fp, sp, #4
  11d964:	e24dd008 	sub	sp, sp, #8
  11d968:	e50b0008 	str	r0, [fp, #-8]
  11d96c:	e1a03001 	mov	r3, r1
  11d970:	e54b3009 	strb	r3, [fp, #-9]
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
  11d974:	e55b3009 	ldrb	r3, [fp, #-9]
  11d978:	e3a02000 	mov	r2, #0
  11d97c:	e1a01003 	mov	r1, r3
  11d980:	e51b0008 	ldr	r0, [fp, #-8]
  11d984:	eb000003 	bl	11d998 <tcp_listen_with_backlog_and_err>
  11d988:	e1a03000 	mov	r3, r0
}
  11d98c:	e1a00003 	mov	r0, r3
  11d990:	e24bd004 	sub	sp, fp, #4
  11d994:	e8bd8800 	pop	{fp, pc}

0011d998 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
  11d998:	e92d4800 	push	{fp, lr}
  11d99c:	e28db004 	add	fp, sp, #4
  11d9a0:	e24dd020 	sub	sp, sp, #32
  11d9a4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11d9a8:	e1a03001 	mov	r3, r1
  11d9ac:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  11d9b0:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  struct tcp_pcb_listen *lpcb = NULL;
  11d9b4:	e3a03000 	mov	r3, #0
  11d9b8:	e50b3008 	str	r3, [fp, #-8]
  err_t res;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
  11d9bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11d9c0:	e5933014 	ldr	r3, [r3, #20]
  11d9c4:	e3530000 	cmp	r3, #0
  11d9c8:	0a000009 	beq	11d9f4 <tcp_listen_with_backlog_and_err+0x5c>
  11d9cc:	e30704d8 	movw	r0, #29912	; 0x74d8
  11d9d0:	e3400014 	movt	r0, #20
  11d9d4:	ebff95ce 	bl	103114 <rt_kprintf>
  11d9d8:	e30012af 	movw	r1, #687	; 0x2af
  11d9dc:	e307041c 	movw	r0, #29724	; 0x741c
  11d9e0:	e3400014 	movt	r0, #20
  11d9e4:	ebffb44a 	bl	10ab14 <sys_arch_assert>
  11d9e8:	e3e0300e 	mvn	r3, #14
  11d9ec:	e54b3009 	strb	r3, [fp, #-9]
  11d9f0:	ea000091 	b	11dc3c <tcp_listen_with_backlog_and_err+0x2a4>

  /* already listening? */
  if (pcb->state == LISTEN) {
  11d9f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11d9f8:	e5933014 	ldr	r3, [r3, #20]
  11d9fc:	e3530001 	cmp	r3, #1
  11da00:	1a000004 	bne	11da18 <tcp_listen_with_backlog_and_err+0x80>
    lpcb = (struct tcp_pcb_listen*)pcb;
  11da04:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11da08:	e50b3008 	str	r3, [fp, #-8]
    res = ERR_ALREADY;
  11da0c:	e3e03008 	mvn	r3, #8
  11da10:	e54b3009 	strb	r3, [fp, #-9]
    goto done;
  11da14:	ea000088 	b	11dc3c <tcp_listen_with_backlog_and_err+0x2a4>
  }
#if SO_REUSE
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
  11da18:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11da1c:	e5d33008 	ldrb	r3, [r3, #8]
  11da20:	e2033004 	and	r3, r3, #4
  11da24:	e3530000 	cmp	r3, #0
  11da28:	0a00001b 	beq	11da9c <tcp_listen_with_backlog_and_err+0x104>
    /* Since SOF_REUSEADDR allows reusing a local address before the pcb's usage
       is declared (listen-/connection-pcb), we have to make sure now that
       this port is only used once for every local IP. */
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  11da2c:	e30531b8 	movw	r3, #20920	; 0x51b8
  11da30:	e3403057 	movt	r3, #87	; 0x57
  11da34:	e5933000 	ldr	r3, [r3]
  11da38:	e50b3008 	str	r3, [fp, #-8]
  11da3c:	ea000013 	b	11da90 <tcp_listen_with_backlog_and_err+0xf8>
      if ((lpcb->local_port == pcb->local_port) &&
  11da40:	e51b3008 	ldr	r3, [fp, #-8]
  11da44:	e1d321ba 	ldrh	r2, [r3, #26]
  11da48:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11da4c:	e1d331ba 	ldrh	r3, [r3, #26]
  11da50:	e1520003 	cmp	r2, r3
  11da54:	1a00000a 	bne	11da84 <tcp_listen_with_backlog_and_err+0xec>
          ip_addr_cmp(&lpcb->local_ip, &pcb->local_ip)) {
  11da58:	e51b3008 	ldr	r3, [fp, #-8]
  11da5c:	e5932000 	ldr	r2, [r3]
  11da60:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11da64:	e5933000 	ldr	r3, [r3]
      if ((lpcb->local_port == pcb->local_port) &&
  11da68:	e1520003 	cmp	r2, r3
  11da6c:	1a000004 	bne	11da84 <tcp_listen_with_backlog_and_err+0xec>
        /* this address/port is already used */
        lpcb = NULL;
  11da70:	e3a03000 	mov	r3, #0
  11da74:	e50b3008 	str	r3, [fp, #-8]
        res = ERR_USE;
  11da78:	e3e03007 	mvn	r3, #7
  11da7c:	e54b3009 	strb	r3, [fp, #-9]
        goto done;
  11da80:	ea00006d 	b	11dc3c <tcp_listen_with_backlog_and_err+0x2a4>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  11da84:	e51b3008 	ldr	r3, [fp, #-8]
  11da88:	e593300c 	ldr	r3, [r3, #12]
  11da8c:	e50b3008 	str	r3, [fp, #-8]
  11da90:	e51b3008 	ldr	r3, [fp, #-8]
  11da94:	e3530000 	cmp	r3, #0
  11da98:	1affffe8 	bne	11da40 <tcp_listen_with_backlog_and_err+0xa8>
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
  11da9c:	e30022c7 	movw	r2, #711	; 0x2c7
  11daa0:	e307141c 	movw	r1, #29724	; 0x741c
  11daa4:	e3401014 	movt	r1, #20
  11daa8:	e3a00003 	mov	r0, #3
  11daac:	ebffecb0 	bl	118d74 <memp_malloc_fn>
  11dab0:	e50b0008 	str	r0, [fp, #-8]
  if (lpcb == NULL) {
  11dab4:	e51b3008 	ldr	r3, [fp, #-8]
  11dab8:	e3530000 	cmp	r3, #0
  11dabc:	1a000002 	bne	11dacc <tcp_listen_with_backlog_and_err+0x134>
    res = ERR_MEM;
  11dac0:	e3e03000 	mvn	r3, #0
  11dac4:	e54b3009 	strb	r3, [fp, #-9]
    goto done;
  11dac8:	ea00005b 	b	11dc3c <tcp_listen_with_backlog_and_err+0x2a4>
  }
  lpcb->callback_arg = pcb->callback_arg;
  11dacc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11dad0:	e5932010 	ldr	r2, [r3, #16]
  11dad4:	e51b3008 	ldr	r3, [fp, #-8]
  11dad8:	e5832010 	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
  11dadc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11dae0:	e1d321ba 	ldrh	r2, [r3, #26]
  11dae4:	e51b3008 	ldr	r3, [fp, #-8]
  11dae8:	e1c321ba 	strh	r2, [r3, #26]
  lpcb->state = LISTEN;
  11daec:	e51b3008 	ldr	r3, [fp, #-8]
  11daf0:	e3a02001 	mov	r2, #1
  11daf4:	e5832014 	str	r2, [r3, #20]
  lpcb->prio = pcb->prio;
  11daf8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11dafc:	e5d32018 	ldrb	r2, [r3, #24]
  11db00:	e51b3008 	ldr	r3, [fp, #-8]
  11db04:	e5c32018 	strb	r2, [r3, #24]
  lpcb->so_options = pcb->so_options;
  11db08:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11db0c:	e5d32008 	ldrb	r2, [r3, #8]
  11db10:	e51b3008 	ldr	r3, [fp, #-8]
  11db14:	e5c32008 	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
  11db18:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11db1c:	e5d3200a 	ldrb	r2, [r3, #10]
  11db20:	e51b3008 	ldr	r3, [fp, #-8]
  11db24:	e5c3200a 	strb	r2, [r3, #10]
  lpcb->tos = pcb->tos;
  11db28:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11db2c:	e5d32009 	ldrb	r2, [r3, #9]
  11db30:	e51b3008 	ldr	r3, [fp, #-8]
  11db34:	e5c32009 	strb	r2, [r3, #9]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
  11db38:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11db3c:	e5932000 	ldr	r2, [r3]
  11db40:	e51b3008 	ldr	r3, [fp, #-8]
  11db44:	e5832000 	str	r2, [r3]
  if (pcb->local_port != 0) {
  11db48:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11db4c:	e1d331ba 	ldrh	r3, [r3, #26]
  11db50:	e3530000 	cmp	r3, #0
  11db54:	0a000025 	beq	11dbf0 <tcp_listen_with_backlog_and_err+0x258>
    TCP_RMV(&tcp_bound_pcbs, pcb);
  11db58:	e30531bc 	movw	r3, #20924	; 0x51bc
  11db5c:	e3403057 	movt	r3, #87	; 0x57
  11db60:	e5933000 	ldr	r3, [r3]
  11db64:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11db68:	e1520003 	cmp	r2, r3
  11db6c:	1a000007 	bne	11db90 <tcp_listen_with_backlog_and_err+0x1f8>
  11db70:	e30531bc 	movw	r3, #20924	; 0x51bc
  11db74:	e3403057 	movt	r3, #87	; 0x57
  11db78:	e5933000 	ldr	r3, [r3]
  11db7c:	e593200c 	ldr	r2, [r3, #12]
  11db80:	e30531bc 	movw	r3, #20924	; 0x51bc
  11db84:	e3403057 	movt	r3, #87	; 0x57
  11db88:	e5832000 	str	r2, [r3]
  11db8c:	ea000014 	b	11dbe4 <tcp_listen_with_backlog_and_err+0x24c>
  11db90:	e30531bc 	movw	r3, #20924	; 0x51bc
  11db94:	e3403057 	movt	r3, #87	; 0x57
  11db98:	e5933000 	ldr	r3, [r3]
  11db9c:	e50b3010 	str	r3, [fp, #-16]
  11dba0:	ea00000c 	b	11dbd8 <tcp_listen_with_backlog_and_err+0x240>
  11dba4:	e51b3010 	ldr	r3, [fp, #-16]
  11dba8:	e593300c 	ldr	r3, [r3, #12]
  11dbac:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11dbb0:	e1520003 	cmp	r2, r3
  11dbb4:	1a000004 	bne	11dbcc <tcp_listen_with_backlog_and_err+0x234>
  11dbb8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11dbbc:	e593200c 	ldr	r2, [r3, #12]
  11dbc0:	e51b3010 	ldr	r3, [fp, #-16]
  11dbc4:	e583200c 	str	r2, [r3, #12]
  11dbc8:	ea000005 	b	11dbe4 <tcp_listen_with_backlog_and_err+0x24c>
  11dbcc:	e51b3010 	ldr	r3, [fp, #-16]
  11dbd0:	e593300c 	ldr	r3, [r3, #12]
  11dbd4:	e50b3010 	str	r3, [fp, #-16]
  11dbd8:	e51b3010 	ldr	r3, [fp, #-16]
  11dbdc:	e3530000 	cmp	r3, #0
  11dbe0:	1affffef 	bne	11dba4 <tcp_listen_with_backlog_and_err+0x20c>
  11dbe4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11dbe8:	e3a02000 	mov	r2, #0
  11dbec:	e583200c 	str	r2, [r3, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
  11dbf0:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11dbf4:	e3a00002 	mov	r0, #2
  11dbf8:	ebffecc5 	bl	118f14 <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
  11dbfc:	e51b2008 	ldr	r2, [fp, #-8]
  11dc00:	e30d3928 	movw	r3, #55592	; 0xd928
  11dc04:	e3403011 	movt	r3, #17
  11dc08:	e582301c 	str	r3, [r2, #28]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
  11dc0c:	e30531b8 	movw	r3, #20920	; 0x51b8
  11dc10:	e3403057 	movt	r3, #87	; 0x57
  11dc14:	e5932000 	ldr	r2, [r3]
  11dc18:	e51b3008 	ldr	r3, [fp, #-8]
  11dc1c:	e583200c 	str	r2, [r3, #12]
  11dc20:	e30531b8 	movw	r3, #20920	; 0x51b8
  11dc24:	e3403057 	movt	r3, #87	; 0x57
  11dc28:	e51b2008 	ldr	r2, [fp, #-8]
  11dc2c:	e5832000 	str	r2, [r3]
  11dc30:	eb0024a8 	bl	126ed8 <tcp_timer_needed>
  res = ERR_OK;
  11dc34:	e3a03000 	mov	r3, #0
  11dc38:	e54b3009 	strb	r3, [fp, #-9]
done:
  if (err != NULL) {
  11dc3c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11dc40:	e3530000 	cmp	r3, #0
  11dc44:	0a000002 	beq	11dc54 <tcp_listen_with_backlog_and_err+0x2bc>
    *err = res;
  11dc48:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11dc4c:	e55b2009 	ldrb	r2, [fp, #-9]
  11dc50:	e5c32000 	strb	r2, [r3]
  }
  return (struct tcp_pcb *)lpcb;
  11dc54:	e51b3008 	ldr	r3, [fp, #-8]
}
  11dc58:	e1a00003 	mov	r0, r3
  11dc5c:	e24bd004 	sub	sp, fp, #4
  11dc60:	e8bd8800 	pop	{fp, pc}

0011dc64 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
  11dc64:	e92d4800 	push	{fp, lr}
  11dc68:	e28db004 	add	fp, sp, #4
  11dc6c:	e24dd010 	sub	sp, sp, #16
  11dc70:	e50b0010 	str	r0, [fp, #-16]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
  11dc74:	e51b3010 	ldr	r3, [fp, #-16]
  11dc78:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  11dc7c:	e51b2010 	ldr	r2, [fp, #-16]
  11dc80:	e1d222bc 	ldrh	r2, [r2, #44]	; 0x2c
  11dc84:	e0833002 	add	r3, r3, r2
  11dc88:	e50b3008 	str	r3, [fp, #-8]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
  11dc8c:	e51b3010 	ldr	r3, [fp, #-16]
  11dc90:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  11dc94:	e51b2010 	ldr	r2, [fp, #-16]
  11dc98:	e1d223b6 	ldrh	r2, [r2, #54]	; 0x36
  11dc9c:	e6bf2072 	sxth	r2, r2
  11dca0:	e3520000 	cmp	r2, #0
  11dca4:	ba000002 	blt	11dcb4 <tcp_update_rcv_ann_wnd+0x50>
  11dca8:	e51b2010 	ldr	r2, [fp, #-16]
  11dcac:	e1d223b6 	ldrh	r2, [r2, #54]	; 0x36
  11dcb0:	ea000000 	b	11dcb8 <tcp_update_rcv_ann_wnd+0x54>
  11dcb4:	e3072fff 	movw	r2, #32767	; 0x7fff
  11dcb8:	e0823003 	add	r3, r2, r3
  11dcbc:	e51b2008 	ldr	r2, [fp, #-8]
  11dcc0:	e0423003 	sub	r3, r2, r3
  11dcc4:	e3530000 	cmp	r3, #0
  11dcc8:	ba000008 	blt	11dcf0 <tcp_update_rcv_ann_wnd+0x8c>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
  11dccc:	e51b3010 	ldr	r3, [fp, #-16]
  11dcd0:	e1d322bc 	ldrh	r2, [r3, #44]	; 0x2c
  11dcd4:	e51b3010 	ldr	r3, [fp, #-16]
  11dcd8:	e1c322be 	strh	r2, [r3, #46]	; 0x2e
    return new_right_edge - pcb->rcv_ann_right_edge;
  11dcdc:	e51b3010 	ldr	r3, [fp, #-16]
  11dce0:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  11dce4:	e51b2008 	ldr	r2, [fp, #-8]
  11dce8:	e0423003 	sub	r3, r2, r3
  11dcec:	ea00001f 	b	11dd70 <tcp_update_rcv_ann_wnd+0x10c>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
  11dcf0:	e51b3010 	ldr	r3, [fp, #-16]
  11dcf4:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  11dcf8:	e51b3010 	ldr	r3, [fp, #-16]
  11dcfc:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  11dd00:	e0423003 	sub	r3, r2, r3
  11dd04:	e3530000 	cmp	r3, #0
  11dd08:	da000003 	ble	11dd1c <tcp_update_rcv_ann_wnd+0xb8>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
  11dd0c:	e51b3010 	ldr	r3, [fp, #-16]
  11dd10:	e3a02000 	mov	r2, #0
  11dd14:	e1c322be 	strh	r2, [r3, #46]	; 0x2e
  11dd18:	ea000013 	b	11dd6c <tcp_update_rcv_ann_wnd+0x108>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
  11dd1c:	e51b3010 	ldr	r3, [fp, #-16]
  11dd20:	e5932030 	ldr	r2, [r3, #48]	; 0x30
  11dd24:	e51b3010 	ldr	r3, [fp, #-16]
  11dd28:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  11dd2c:	e0423003 	sub	r3, r2, r3
  11dd30:	e50b300c 	str	r3, [fp, #-12]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
  11dd34:	e51b300c 	ldr	r3, [fp, #-12]
  11dd38:	e3530801 	cmp	r3, #65536	; 0x10000
  11dd3c:	3a000006 	bcc	11dd5c <tcp_update_rcv_ann_wnd+0xf8>
  11dd40:	e30704fc 	movw	r0, #29948	; 0x74fc
  11dd44:	e3400014 	movt	r0, #20
  11dd48:	ebff94f1 	bl	103114 <rt_kprintf>
  11dd4c:	e3001303 	movw	r1, #771	; 0x303
  11dd50:	e307041c 	movw	r0, #29724	; 0x741c
  11dd54:	e3400014 	movt	r0, #20
  11dd58:	ebffb36d 	bl	10ab14 <sys_arch_assert>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
  11dd5c:	e51b300c 	ldr	r3, [fp, #-12]
  11dd60:	e6ff2073 	uxth	r2, r3
  11dd64:	e51b3010 	ldr	r3, [fp, #-16]
  11dd68:	e1c322be 	strh	r2, [r3, #46]	; 0x2e
    }
    return 0;
  11dd6c:	e3a03000 	mov	r3, #0
  }
}
  11dd70:	e1a00003 	mov	r0, r3
  11dd74:	e24bd004 	sub	sp, fp, #4
  11dd78:	e8bd8800 	pop	{fp, pc}

0011dd7c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
  11dd7c:	e92d4800 	push	{fp, lr}
  11dd80:	e28db004 	add	fp, sp, #4
  11dd84:	e24dd010 	sub	sp, sp, #16
  11dd88:	e50b0010 	str	r0, [fp, #-16]
  11dd8c:	e1a03001 	mov	r3, r1
  11dd90:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
  11dd94:	e51b3010 	ldr	r3, [fp, #-16]
  11dd98:	e5933014 	ldr	r3, [r3, #20]
  11dd9c:	e3530001 	cmp	r3, #1
  11dda0:	1a000006 	bne	11ddc0 <tcp_recved+0x44>
  11dda4:	e3070518 	movw	r0, #29976	; 0x7518
  11dda8:	e3400014 	movt	r0, #20
  11ddac:	ebff94d8 	bl	103114 <rt_kprintf>
  11ddb0:	e300131b 	movw	r1, #795	; 0x31b
  11ddb4:	e307041c 	movw	r0, #29724	; 0x741c
  11ddb8:	e3400014 	movt	r0, #20
  11ddbc:	ebffb354 	bl	10ab14 <sys_arch_assert>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
  11ddc0:	e51b3010 	ldr	r3, [fp, #-16]
  11ddc4:	e1d322bc 	ldrh	r2, [r3, #44]	; 0x2c
  11ddc8:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11ddcc:	e0823003 	add	r3, r2, r3
  11ddd0:	e6ff2073 	uxth	r2, r3
  11ddd4:	e51b3010 	ldr	r3, [fp, #-16]
  11ddd8:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
  } else if (pcb->rcv_wnd == 0) {
  11dddc:	e51b3010 	ldr	r3, [fp, #-16]
  11dde0:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  11dde4:	e3530000 	cmp	r3, #0
  11dde8:	1a000012 	bne	11de38 <tcp_recved+0xbc>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
  11ddec:	e51b3010 	ldr	r3, [fp, #-16]
  11ddf0:	e5933014 	ldr	r3, [r3, #20]
  11ddf4:	e3530007 	cmp	r3, #7
  11ddf8:	0a000003 	beq	11de0c <tcp_recved+0x90>
  11ddfc:	e51b3010 	ldr	r3, [fp, #-16]
  11de00:	e5933014 	ldr	r3, [r3, #20]
  11de04:	e3530009 	cmp	r3, #9
  11de08:	1a000003 	bne	11de1c <tcp_recved+0xa0>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
  11de0c:	e51b3010 	ldr	r3, [fp, #-16]
  11de10:	e3e02000 	mvn	r2, #0
  11de14:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
  11de18:	ea000006 	b	11de38 <tcp_recved+0xbc>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
  11de1c:	e3070540 	movw	r0, #30016	; 0x7540
  11de20:	e3400014 	movt	r0, #20
  11de24:	ebff94ba 	bl	103114 <rt_kprintf>
  11de28:	e3a01fca 	mov	r1, #808	; 0x328
  11de2c:	e307041c 	movw	r0, #29724	; 0x741c
  11de30:	e3400014 	movt	r0, #20
  11de34:	ebffb336 	bl	10ab14 <sys_arch_assert>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
  11de38:	e51b0010 	ldr	r0, [fp, #-16]
  11de3c:	ebffff88 	bl	11dc64 <tcp_update_rcv_ann_wnd>
  11de40:	e1a03000 	mov	r3, r0
  11de44:	e50b3008 	str	r3, [fp, #-8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
  11de48:	e51b3008 	ldr	r3, [fp, #-8]
  11de4c:	e30126cf 	movw	r2, #5839	; 0x16cf
  11de50:	e1530002 	cmp	r3, r2
  11de54:	da000007 	ble	11de78 <tcp_recved+0xfc>
    tcp_ack_now(pcb);
  11de58:	e51b3010 	ldr	r3, [fp, #-16]
  11de5c:	e5d3301e 	ldrb	r3, [r3, #30]
  11de60:	e3833002 	orr	r3, r3, #2
  11de64:	e6ef2073 	uxtb	r2, r3
  11de68:	e51b3010 	ldr	r3, [fp, #-16]
  11de6c:	e5c3201e 	strb	r2, [r3, #30]
    tcp_output(pcb);
  11de70:	e51b0010 	ldr	r0, [fp, #-16]
  11de74:	eb001f5e 	bl	125bf4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
  11de78:	e320f000 	nop	{0}
  11de7c:	e24bd004 	sub	sp, fp, #4
  11de80:	e8bd8800 	pop	{fp, pc}

0011de84 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
  11de84:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11de88:	e28db000 	add	fp, sp, #0
  11de8c:	e24dd00c 	sub	sp, sp, #12
  u8_t i;
  u16_t n = 0;
  11de90:	e3a03000 	mov	r3, #0
  11de94:	e14b30b8 	strh	r3, [fp, #-8]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
  11de98:	e30d3028 	movw	r3, #53288	; 0xd028
  11de9c:	e3403014 	movt	r3, #20
  11dea0:	e1d320b0 	ldrh	r2, [r3]
  11dea4:	e2823001 	add	r3, r2, #1
  11dea8:	e6ff1073 	uxth	r1, r3
  11deac:	e30d3028 	movw	r3, #53288	; 0xd028
  11deb0:	e3403014 	movt	r3, #20
  11deb4:	e1c310b0 	strh	r1, [r3]
  11deb8:	e30f3fff 	movw	r3, #65535	; 0xffff
  11debc:	e1520003 	cmp	r2, r3
  11dec0:	1a000003 	bne	11ded4 <tcp_new_port+0x50>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  11dec4:	e30d3028 	movw	r3, #53288	; 0xd028
  11dec8:	e3403014 	movt	r3, #20
  11decc:	e3a02903 	mov	r2, #49152	; 0xc000
  11ded0:	e1c320b0 	strh	r2, [r3]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
  11ded4:	e3a03000 	mov	r3, #0
  11ded8:	e54b3005 	strb	r3, [fp, #-5]
  11dedc:	ea00001e 	b	11df5c <tcp_new_port+0xd8>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
  11dee0:	e55b2005 	ldrb	r2, [fp, #-5]
  11dee4:	e3073400 	movw	r3, #29696	; 0x7400
  11dee8:	e3403014 	movt	r3, #20
  11deec:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  11def0:	e5933000 	ldr	r3, [r3]
  11def4:	e50b300c 	str	r3, [fp, #-12]
  11def8:	ea000011 	b	11df44 <tcp_new_port+0xc0>
      if (pcb->local_port == tcp_port) {
  11defc:	e51b300c 	ldr	r3, [fp, #-12]
  11df00:	e1d321ba 	ldrh	r2, [r3, #26]
  11df04:	e30d3028 	movw	r3, #53288	; 0xd028
  11df08:	e3403014 	movt	r3, #20
  11df0c:	e1d330b0 	ldrh	r3, [r3]
  11df10:	e1520003 	cmp	r2, r3
  11df14:	1a000007 	bne	11df38 <tcp_new_port+0xb4>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
  11df18:	e15b30b8 	ldrh	r3, [fp, #-8]
  11df1c:	e2833001 	add	r3, r3, #1
  11df20:	e14b30b8 	strh	r3, [fp, #-8]
  11df24:	e15b30b8 	ldrh	r3, [fp, #-8]
  11df28:	e3530901 	cmp	r3, #16384	; 0x4000
  11df2c:	3affffd9 	bcc	11de98 <tcp_new_port+0x14>
          return 0;
  11df30:	e3a03000 	mov	r3, #0
  11df34:	ea00000e 	b	11df74 <tcp_new_port+0xf0>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
  11df38:	e51b300c 	ldr	r3, [fp, #-12]
  11df3c:	e593300c 	ldr	r3, [r3, #12]
  11df40:	e50b300c 	str	r3, [fp, #-12]
  11df44:	e51b300c 	ldr	r3, [fp, #-12]
  11df48:	e3530000 	cmp	r3, #0
  11df4c:	1affffea 	bne	11defc <tcp_new_port+0x78>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
  11df50:	e55b3005 	ldrb	r3, [fp, #-5]
  11df54:	e2833001 	add	r3, r3, #1
  11df58:	e54b3005 	strb	r3, [fp, #-5]
  11df5c:	e55b3005 	ldrb	r3, [fp, #-5]
  11df60:	e3530003 	cmp	r3, #3
  11df64:	9affffdd 	bls	11dee0 <tcp_new_port+0x5c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
  11df68:	e30d3028 	movw	r3, #53288	; 0xd028
  11df6c:	e3403014 	movt	r3, #20
  11df70:	e1d330b0 	ldrh	r3, [r3]
}
  11df74:	e1a00003 	mov	r0, r3
  11df78:	e28bd000 	add	sp, fp, #0
  11df7c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11df80:	e12fff1e 	bx	lr

0011df84 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
      tcp_connected_fn connected)
{
  11df84:	e92d4800 	push	{fp, lr}
  11df88:	e28db004 	add	fp, sp, #4
  11df8c:	e24dd030 	sub	sp, sp, #48	; 0x30
  11df90:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  11df94:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  11df98:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
  11df9c:	e1a03002 	mov	r3, r2
  11dfa0:	e14b32be 	strh	r3, [fp, #-46]	; 0xffffffd2
  err_t ret;
  u32_t iss;
  u16_t old_local_port;

  if ((pcb == NULL) || (ipaddr == NULL)) {
  11dfa4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11dfa8:	e3530000 	cmp	r3, #0
  11dfac:	0a000002 	beq	11dfbc <tcp_connect+0x38>
  11dfb0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11dfb4:	e3530000 	cmp	r3, #0
  11dfb8:	1a000001 	bne	11dfc4 <tcp_connect+0x40>
    return ERR_VAL;
  11dfbc:	e3e03005 	mvn	r3, #5
  11dfc0:	ea000101 	b	11e3cc <tcp_connect+0x448>
  }

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
  11dfc4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11dfc8:	e5933014 	ldr	r3, [r3, #20]
  11dfcc:	e3530000 	cmp	r3, #0
  11dfd0:	0a000008 	beq	11dff8 <tcp_connect+0x74>
  11dfd4:	e3070564 	movw	r0, #30052	; 0x7564
  11dfd8:	e3400014 	movt	r0, #20
  11dfdc:	ebff944c 	bl	103114 <rt_kprintf>
  11dfe0:	e3001373 	movw	r1, #883	; 0x373
  11dfe4:	e307041c 	movw	r0, #29724	; 0x741c
  11dfe8:	e3400014 	movt	r0, #20
  11dfec:	ebffb2c8 	bl	10ab14 <sys_arch_assert>
  11dff0:	e3e03009 	mvn	r3, #9
  11dff4:	ea0000f4 	b	11e3cc <tcp_connect+0x448>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
  11dff8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11dffc:	e3530000 	cmp	r3, #0
  11e000:	0a000002 	beq	11e010 <tcp_connect+0x8c>
  11e004:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11e008:	e5933000 	ldr	r3, [r3]
  11e00c:	ea000000 	b	11e014 <tcp_connect+0x90>
  11e010:	e3a03000 	mov	r3, #0
  11e014:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11e018:	e5823004 	str	r3, [r2, #4]
  pcb->remote_port = port;
  11e01c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e020:	e15b22be 	ldrh	r2, [fp, #-46]	; 0xffffffd2
  11e024:	e1c321bc 	strh	r2, [r3, #28]

  /* check if we have a route to the remote host */
  if (ip_addr_isany(&pcb->local_ip)) {
  11e028:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e02c:	e3530000 	cmp	r3, #0
  11e030:	0a000003 	beq	11e044 <tcp_connect+0xc0>
  11e034:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e038:	e5933000 	ldr	r3, [r3]
  11e03c:	e3530000 	cmp	r3, #0
  11e040:	1a000018 	bne	11e0a8 <tcp_connect+0x124>
    /* no local IP address set, yet. */
    struct netif *netif;
    const ip_addr_t *local_ip;
    ip_route_get_local_ip(&pcb->local_ip, &pcb->remote_ip, netif, local_ip);
  11e044:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e048:	e2833004 	add	r3, r3, #4
  11e04c:	e1a00003 	mov	r0, r3
  11e050:	eb004b39 	bl	130d3c <ip4_route>
  11e054:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  11e058:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11e05c:	e3530000 	cmp	r3, #0
  11e060:	0a000002 	beq	11e070 <tcp_connect+0xec>
  11e064:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11e068:	e2833004 	add	r3, r3, #4
  11e06c:	ea000000 	b	11e074 <tcp_connect+0xf0>
  11e070:	e3a03000 	mov	r3, #0
  11e074:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    if ((netif == NULL) || (local_ip == NULL)) {
  11e078:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11e07c:	e3530000 	cmp	r3, #0
  11e080:	0a000002 	beq	11e090 <tcp_connect+0x10c>
  11e084:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11e088:	e3530000 	cmp	r3, #0
  11e08c:	1a000001 	bne	11e098 <tcp_connect+0x114>
      /* Don't even try to send a SYN packet if we have no route
         since that will fail. */
      return ERR_RTE;
  11e090:	e3e03003 	mvn	r3, #3
  11e094:	ea0000cc 	b	11e3cc <tcp_connect+0x448>
    }
    /* Use the address as local address of the pcb. */
    ip_addr_copy(pcb->local_ip, *local_ip);
  11e098:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11e09c:	e5932000 	ldr	r2, [r3]
  11e0a0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e0a4:	e5832000 	str	r2, [r3]
  }

  old_local_port = pcb->local_port;
  11e0a8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e0ac:	e1d331ba 	ldrh	r3, [r3, #26]
  11e0b0:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
  if (pcb->local_port == 0) {
  11e0b4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e0b8:	e1d331ba 	ldrh	r3, [r3, #26]
  11e0bc:	e3530000 	cmp	r3, #0
  11e0c0:	1a00000a 	bne	11e0f0 <tcp_connect+0x16c>
    pcb->local_port = tcp_new_port();
  11e0c4:	ebffff6e 	bl	11de84 <tcp_new_port>
  11e0c8:	e1a03000 	mov	r3, r0
  11e0cc:	e1a02003 	mov	r2, r3
  11e0d0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e0d4:	e1c321ba 	strh	r2, [r3, #26]
    if (pcb->local_port == 0) {
  11e0d8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e0dc:	e1d331ba 	ldrh	r3, [r3, #26]
  11e0e0:	e3530000 	cmp	r3, #0
  11e0e4:	1a000035 	bne	11e1c0 <tcp_connect+0x23c>
      return ERR_BUF;
  11e0e8:	e3e03001 	mvn	r3, #1
  11e0ec:	ea0000b6 	b	11e3cc <tcp_connect+0x448>
    }
  } else {
#if SO_REUSE
    if (ip_get_option(pcb, SOF_REUSEADDR)) {
  11e0f0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e0f4:	e5d33008 	ldrb	r3, [r3, #8]
  11e0f8:	e2033004 	and	r3, r3, #4
  11e0fc:	e3530000 	cmp	r3, #0
  11e100:	0a00002e 	beq	11e1c0 <tcp_connect+0x23c>
      /* Since SOF_REUSEADDR allows reusing a local address, we have to make sure
         now that the 5-tuple is unique. */
      struct tcp_pcb *cpcb;
      int i;
      /* Don't check listen- and bound-PCBs, check active- and TIME-WAIT PCBs. */
      for (i = 2; i < NUM_TCP_PCB_LISTS; i++) {
  11e104:	e3a03002 	mov	r3, #2
  11e108:	e50b300c 	str	r3, [fp, #-12]
  11e10c:	ea000028 	b	11e1b4 <tcp_connect+0x230>
        for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
  11e110:	e3073400 	movw	r3, #29696	; 0x7400
  11e114:	e3403014 	movt	r3, #20
  11e118:	e51b200c 	ldr	r2, [fp, #-12]
  11e11c:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  11e120:	e5933000 	ldr	r3, [r3]
  11e124:	e50b3008 	str	r3, [fp, #-8]
  11e128:	ea00001b 	b	11e19c <tcp_connect+0x218>
          if ((cpcb->local_port == pcb->local_port) &&
  11e12c:	e51b3008 	ldr	r3, [fp, #-8]
  11e130:	e1d321ba 	ldrh	r2, [r3, #26]
  11e134:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e138:	e1d331ba 	ldrh	r3, [r3, #26]
  11e13c:	e1520003 	cmp	r2, r3
  11e140:	1a000012 	bne	11e190 <tcp_connect+0x20c>
              (cpcb->remote_port == port) &&
  11e144:	e51b3008 	ldr	r3, [fp, #-8]
  11e148:	e1d331bc 	ldrh	r3, [r3, #28]
          if ((cpcb->local_port == pcb->local_port) &&
  11e14c:	e15b22be 	ldrh	r2, [fp, #-46]	; 0xffffffd2
  11e150:	e1520003 	cmp	r2, r3
  11e154:	1a00000d 	bne	11e190 <tcp_connect+0x20c>
              ip_addr_cmp(&cpcb->local_ip, &pcb->local_ip) &&
  11e158:	e51b3008 	ldr	r3, [fp, #-8]
  11e15c:	e5932000 	ldr	r2, [r3]
  11e160:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e164:	e5933000 	ldr	r3, [r3]
              (cpcb->remote_port == port) &&
  11e168:	e1520003 	cmp	r2, r3
  11e16c:	1a000007 	bne	11e190 <tcp_connect+0x20c>
              ip_addr_cmp(&cpcb->remote_ip, ipaddr)) {
  11e170:	e51b3008 	ldr	r3, [fp, #-8]
  11e174:	e5932004 	ldr	r2, [r3, #4]
  11e178:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11e17c:	e5933000 	ldr	r3, [r3]
              ip_addr_cmp(&cpcb->local_ip, &pcb->local_ip) &&
  11e180:	e1520003 	cmp	r2, r3
  11e184:	1a000001 	bne	11e190 <tcp_connect+0x20c>
            /* linux returns EISCONN here, but ERR_USE should be OK for us */
            return ERR_USE;
  11e188:	e3e03007 	mvn	r3, #7
  11e18c:	ea00008e 	b	11e3cc <tcp_connect+0x448>
        for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
  11e190:	e51b3008 	ldr	r3, [fp, #-8]
  11e194:	e593300c 	ldr	r3, [r3, #12]
  11e198:	e50b3008 	str	r3, [fp, #-8]
  11e19c:	e51b3008 	ldr	r3, [fp, #-8]
  11e1a0:	e3530000 	cmp	r3, #0
  11e1a4:	1affffe0 	bne	11e12c <tcp_connect+0x1a8>
      for (i = 2; i < NUM_TCP_PCB_LISTS; i++) {
  11e1a8:	e51b300c 	ldr	r3, [fp, #-12]
  11e1ac:	e2833001 	add	r3, r3, #1
  11e1b0:	e50b300c 	str	r3, [fp, #-12]
  11e1b4:	e51b300c 	ldr	r3, [fp, #-12]
  11e1b8:	e3530003 	cmp	r3, #3
  11e1bc:	daffffd3 	ble	11e110 <tcp_connect+0x18c>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
  11e1c0:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  11e1c4:	eb0006bd 	bl	11fcc0 <tcp_next_iss>
  11e1c8:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  pcb->rcv_nxt = 0;
  11e1cc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e1d0:	e3a02000 	mov	r2, #0
  11e1d4:	e5832028 	str	r2, [r3, #40]	; 0x28
  pcb->snd_nxt = iss;
  11e1d8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e1dc:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  11e1e0:	e5832050 	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
  11e1e4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11e1e8:	e2432001 	sub	r2, r3, #1
  11e1ec:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e1f0:	e5832048 	str	r2, [r3, #72]	; 0x48
  pcb->snd_wl2 = iss - 1;
  11e1f4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11e1f8:	e2432001 	sub	r2, r3, #1
  11e1fc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e200:	e5832058 	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
  11e204:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11e208:	e2432001 	sub	r2, r3, #1
  11e20c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e210:	e583205c 	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
  11e214:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e218:	e3e02000 	mvn	r2, #0
  11e21c:	e1c322be 	strh	r2, [r3, #46]	; 0x2e
  11e220:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e224:	e1d322be 	ldrh	r2, [r3, #46]	; 0x2e
  11e228:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e22c:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
  11e230:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e234:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  11e238:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e23c:	e5832030 	str	r2, [r3, #48]	; 0x30
  pcb->snd_wnd = TCP_WND;
  11e240:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e244:	e3e02000 	mvn	r2, #0
  11e248:	e1c326b0 	strh	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
  11e24c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e250:	e3a02f86 	mov	r2, #536	; 0x218
  11e254:	e1c323b6 	strh	r2, [r3, #54]	; 0x36
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
  11e258:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e25c:	e1d323b6 	ldrh	r2, [r3, #54]	; 0x36
  11e260:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e264:	e2833004 	add	r3, r3, #4
  11e268:	e1a01003 	mov	r1, r3
  11e26c:	e1a00002 	mov	r0, r2
  11e270:	eb0006a7 	bl	11fd14 <tcp_eff_send_mss_impl>
  11e274:	e1a03000 	mov	r3, r0
  11e278:	e1a02003 	mov	r2, r3
  11e27c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e280:	e1c323b6 	strh	r2, [r3, #54]	; 0x36
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
  11e284:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e288:	e3a02001 	mov	r2, #1
  11e28c:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
#if LWIP_CALLBACK_API
  pcb->connected = connected;
  11e290:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e294:	e51b2034 	ldr	r2, [fp, #-52]	; 0xffffffcc
  11e298:	e5832088 	str	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
  11e29c:	e3a01002 	mov	r1, #2
  11e2a0:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  11e2a4:	eb001d03 	bl	1256b8 <tcp_enqueue_flags>
  11e2a8:	e1a03000 	mov	r3, r0
  11e2ac:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  if (ret == ERR_OK) {
  11e2b0:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  11e2b4:	e3530000 	cmp	r3, #0
  11e2b8:	1a000042 	bne	11e3c8 <tcp_connect+0x444>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
  11e2bc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e2c0:	e3a02002 	mov	r2, #2
  11e2c4:	e5832014 	str	r2, [r3, #20]
    if (old_local_port != 0) {
  11e2c8:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  11e2cc:	e3530000 	cmp	r3, #0
  11e2d0:	0a000025 	beq	11e36c <tcp_connect+0x3e8>
      TCP_RMV(&tcp_bound_pcbs, pcb);
  11e2d4:	e30531bc 	movw	r3, #20924	; 0x51bc
  11e2d8:	e3403057 	movt	r3, #87	; 0x57
  11e2dc:	e5933000 	ldr	r3, [r3]
  11e2e0:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11e2e4:	e1520003 	cmp	r2, r3
  11e2e8:	1a000007 	bne	11e30c <tcp_connect+0x388>
  11e2ec:	e30531bc 	movw	r3, #20924	; 0x51bc
  11e2f0:	e3403057 	movt	r3, #87	; 0x57
  11e2f4:	e5933000 	ldr	r3, [r3]
  11e2f8:	e593200c 	ldr	r2, [r3, #12]
  11e2fc:	e30531bc 	movw	r3, #20924	; 0x51bc
  11e300:	e3403057 	movt	r3, #87	; 0x57
  11e304:	e5832000 	str	r2, [r3]
  11e308:	ea000014 	b	11e360 <tcp_connect+0x3dc>
  11e30c:	e30531bc 	movw	r3, #20924	; 0x51bc
  11e310:	e3403057 	movt	r3, #87	; 0x57
  11e314:	e5933000 	ldr	r3, [r3]
  11e318:	e50b3010 	str	r3, [fp, #-16]
  11e31c:	ea00000c 	b	11e354 <tcp_connect+0x3d0>
  11e320:	e51b3010 	ldr	r3, [fp, #-16]
  11e324:	e593300c 	ldr	r3, [r3, #12]
  11e328:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11e32c:	e1520003 	cmp	r2, r3
  11e330:	1a000004 	bne	11e348 <tcp_connect+0x3c4>
  11e334:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e338:	e593200c 	ldr	r2, [r3, #12]
  11e33c:	e51b3010 	ldr	r3, [fp, #-16]
  11e340:	e583200c 	str	r2, [r3, #12]
  11e344:	ea000005 	b	11e360 <tcp_connect+0x3dc>
  11e348:	e51b3010 	ldr	r3, [fp, #-16]
  11e34c:	e593300c 	ldr	r3, [r3, #12]
  11e350:	e50b3010 	str	r3, [fp, #-16]
  11e354:	e51b3010 	ldr	r3, [fp, #-16]
  11e358:	e3530000 	cmp	r3, #0
  11e35c:	1affffef 	bne	11e320 <tcp_connect+0x39c>
  11e360:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e364:	e3a02000 	mov	r2, #0
  11e368:	e583200c 	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
  11e36c:	e30531b0 	movw	r3, #20912	; 0x51b0
  11e370:	e3403057 	movt	r3, #87	; 0x57
  11e374:	e5932000 	ldr	r2, [r3]
  11e378:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e37c:	e583200c 	str	r2, [r3, #12]
  11e380:	e30531b0 	movw	r3, #20912	; 0x51b0
  11e384:	e3403057 	movt	r3, #87	; 0x57
  11e388:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11e38c:	e5832000 	str	r2, [r3]
  11e390:	eb0022d0 	bl	126ed8 <tcp_timer_needed>
  11e394:	e30531ac 	movw	r3, #20908	; 0x51ac
  11e398:	e3403057 	movt	r3, #87	; 0x57
  11e39c:	e3a02001 	mov	r2, #1
  11e3a0:	e5c32000 	strb	r2, [r3]
    MIB2_STATS_INC(mib2.tcpactiveopens);
  11e3a4:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  11e3a8:	e3403057 	movt	r3, #87	; 0x57
  11e3ac:	e593316c 	ldr	r3, [r3, #364]	; 0x16c
  11e3b0:	e2832001 	add	r2, r3, #1
  11e3b4:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  11e3b8:	e3403057 	movt	r3, #87	; 0x57
  11e3bc:	e583216c 	str	r2, [r3, #364]	; 0x16c

    tcp_output(pcb);
  11e3c0:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  11e3c4:	eb001e0a 	bl	125bf4 <tcp_output>
  }
  return ret;
  11e3c8:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
}
  11e3cc:	e1a00003 	mov	r0, r3
  11e3d0:	e24bd004 	sub	sp, fp, #4
  11e3d4:	e8bd8800 	pop	{fp, pc}

0011e3d8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
  11e3d8:	e92d4800 	push	{fp, lr}
  11e3dc:	e28db004 	add	fp, sp, #4
  11e3e0:	e24dd030 	sub	sp, sp, #48	; 0x30
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
  11e3e4:	e3a03000 	mov	r3, #0
  11e3e8:	e54b300f 	strb	r3, [fp, #-15]

  ++tcp_ticks;
  11e3ec:	e30531b4 	movw	r3, #20916	; 0x51b4
  11e3f0:	e3403057 	movt	r3, #87	; 0x57
  11e3f4:	e5933000 	ldr	r3, [r3]
  11e3f8:	e2832001 	add	r2, r3, #1
  11e3fc:	e30531b4 	movw	r3, #20916	; 0x51b4
  11e400:	e3403057 	movt	r3, #87	; 0x57
  11e404:	e5832000 	str	r2, [r3]
  ++tcp_timer_ctr;
  11e408:	e30e3211 	movw	r3, #57873	; 0xe211
  11e40c:	e3403014 	movt	r3, #20
  11e410:	e5d33000 	ldrb	r3, [r3]
  11e414:	e2833001 	add	r3, r3, #1
  11e418:	e6ef2073 	uxtb	r2, r3
  11e41c:	e30e3211 	movw	r3, #57873	; 0xe211
  11e420:	e3403014 	movt	r3, #20
  11e424:	e5c32000 	strb	r2, [r3]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
  11e428:	e3a03000 	mov	r3, #0
  11e42c:	e50b300c 	str	r3, [fp, #-12]
  pcb = tcp_active_pcbs;
  11e430:	e30531b0 	movw	r3, #20912	; 0x51b0
  11e434:	e3403057 	movt	r3, #87	; 0x57
  11e438:	e5933000 	ldr	r3, [r3]
  11e43c:	e50b3008 	str	r3, [fp, #-8]
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
  11e440:	ea0001f2 	b	11ec10 <tcp_slowtmr+0x838>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
  11e444:	e51b3008 	ldr	r3, [fp, #-8]
  11e448:	e5933014 	ldr	r3, [r3, #20]
  11e44c:	e3530000 	cmp	r3, #0
  11e450:	1a000006 	bne	11e470 <tcp_slowtmr+0x98>
  11e454:	e3070594 	movw	r0, #30100	; 0x7594
  11e458:	e3400014 	movt	r0, #20
  11e45c:	ebff932c 	bl	103114 <rt_kprintf>
  11e460:	e30013eb 	movw	r1, #1003	; 0x3eb
  11e464:	e307041c 	movw	r0, #29724	; 0x741c
  11e468:	e3400014 	movt	r0, #20
  11e46c:	ebffb1a8 	bl	10ab14 <sys_arch_assert>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
  11e470:	e51b3008 	ldr	r3, [fp, #-8]
  11e474:	e5933014 	ldr	r3, [r3, #20]
  11e478:	e3530001 	cmp	r3, #1
  11e47c:	1a000006 	bne	11e49c <tcp_slowtmr+0xc4>
  11e480:	e30705c0 	movw	r0, #30144	; 0x75c0
  11e484:	e3400014 	movt	r0, #20
  11e488:	ebff9321 	bl	103114 <rt_kprintf>
  11e48c:	e3a01ffb 	mov	r1, #1004	; 0x3ec
  11e490:	e307041c 	movw	r0, #29724	; 0x741c
  11e494:	e3400014 	movt	r0, #20
  11e498:	ebffb19d 	bl	10ab14 <sys_arch_assert>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
  11e49c:	e51b3008 	ldr	r3, [fp, #-8]
  11e4a0:	e5933014 	ldr	r3, [r3, #20]
  11e4a4:	e353000a 	cmp	r3, #10
  11e4a8:	1a000006 	bne	11e4c8 <tcp_slowtmr+0xf0>
  11e4ac:	e30705ec 	movw	r0, #30188	; 0x75ec
  11e4b0:	e3400014 	movt	r0, #20
  11e4b4:	ebff9316 	bl	103114 <rt_kprintf>
  11e4b8:	e30013ed 	movw	r1, #1005	; 0x3ed
  11e4bc:	e307041c 	movw	r0, #29724	; 0x741c
  11e4c0:	e3400014 	movt	r0, #20
  11e4c4:	ebffb192 	bl	10ab14 <sys_arch_assert>
    if (pcb->last_timer == tcp_timer_ctr) {
  11e4c8:	e51b3008 	ldr	r3, [fp, #-8]
  11e4cc:	e5d32021 	ldrb	r2, [r3, #33]	; 0x21
  11e4d0:	e30e3211 	movw	r3, #57873	; 0xe211
  11e4d4:	e3403014 	movt	r3, #20
  11e4d8:	e5d33000 	ldrb	r3, [r3]
  11e4dc:	e1520003 	cmp	r2, r3
  11e4e0:	1a000003 	bne	11e4f4 <tcp_slowtmr+0x11c>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
  11e4e4:	e51b3008 	ldr	r3, [fp, #-8]
  11e4e8:	e593300c 	ldr	r3, [r3, #12]
  11e4ec:	e50b3008 	str	r3, [fp, #-8]
      continue;
  11e4f0:	ea0001c6 	b	11ec10 <tcp_slowtmr+0x838>
    }
    pcb->last_timer = tcp_timer_ctr;
  11e4f4:	e30e3211 	movw	r3, #57873	; 0xe211
  11e4f8:	e3403014 	movt	r3, #20
  11e4fc:	e5d32000 	ldrb	r2, [r3]
  11e500:	e51b3008 	ldr	r3, [fp, #-8]
  11e504:	e5c32021 	strb	r2, [r3, #33]	; 0x21

    pcb_remove = 0;
  11e508:	e3a03000 	mov	r3, #0
  11e50c:	e54b300d 	strb	r3, [fp, #-13]
    pcb_reset = 0;
  11e510:	e3a03000 	mov	r3, #0
  11e514:	e54b300e 	strb	r3, [fp, #-14]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
  11e518:	e51b3008 	ldr	r3, [fp, #-8]
  11e51c:	e5933014 	ldr	r3, [r3, #20]
  11e520:	e3530002 	cmp	r3, #2
  11e524:	1a000007 	bne	11e548 <tcp_slowtmr+0x170>
  11e528:	e51b3008 	ldr	r3, [fp, #-8]
  11e52c:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  11e530:	e3530003 	cmp	r3, #3
  11e534:	9a000003 	bls	11e548 <tcp_slowtmr+0x170>
      ++pcb_remove;
  11e538:	e55b300d 	ldrb	r3, [fp, #-13]
  11e53c:	e2833001 	add	r3, r3, #1
  11e540:	e54b300d 	strb	r3, [fp, #-13]
  11e544:	ea000089 	b	11e770 <tcp_slowtmr+0x398>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
  11e548:	e51b3008 	ldr	r3, [fp, #-8]
  11e54c:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  11e550:	e353000b 	cmp	r3, #11
  11e554:	9a000003 	bls	11e568 <tcp_slowtmr+0x190>
      ++pcb_remove;
  11e558:	e55b300d 	ldrb	r3, [fp, #-13]
  11e55c:	e2833001 	add	r3, r3, #1
  11e560:	e54b300d 	strb	r3, [fp, #-13]
  11e564:	ea000081 	b	11e770 <tcp_slowtmr+0x398>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
  11e568:	e51b3008 	ldr	r3, [fp, #-8]
  11e56c:	e5d330a1 	ldrb	r3, [r3, #161]	; 0xa1
  11e570:	e3530000 	cmp	r3, #0
  11e574:	0a000029 	beq	11e620 <tcp_slowtmr+0x248>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
  11e578:	e51b3008 	ldr	r3, [fp, #-8]
  11e57c:	e5d330a1 	ldrb	r3, [r3, #161]	; 0xa1
  11e580:	e2432001 	sub	r2, r3, #1
  11e584:	e30733f8 	movw	r3, #29688	; 0x73f8
  11e588:	e3403014 	movt	r3, #20
  11e58c:	e7d33002 	ldrb	r3, [r3, r2]
  11e590:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
        if (pcb->persist_cnt < backoff_cnt) {
  11e594:	e51b3008 	ldr	r3, [fp, #-8]
  11e598:	e5d330a0 	ldrb	r3, [r3, #160]	; 0xa0
  11e59c:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  11e5a0:	e1520003 	cmp	r2, r3
  11e5a4:	9a000005 	bls	11e5c0 <tcp_slowtmr+0x1e8>
          pcb->persist_cnt++;
  11e5a8:	e51b3008 	ldr	r3, [fp, #-8]
  11e5ac:	e5d330a0 	ldrb	r3, [r3, #160]	; 0xa0
  11e5b0:	e2833001 	add	r3, r3, #1
  11e5b4:	e6ef2073 	uxtb	r2, r3
  11e5b8:	e51b3008 	ldr	r3, [fp, #-8]
  11e5bc:	e5c320a0 	strb	r2, [r3, #160]	; 0xa0
        }
        if (pcb->persist_cnt >= backoff_cnt) {
  11e5c0:	e51b3008 	ldr	r3, [fp, #-8]
  11e5c4:	e5d330a0 	ldrb	r3, [r3, #160]	; 0xa0
  11e5c8:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  11e5cc:	e1520003 	cmp	r2, r3
  11e5d0:	8a000066 	bhi	11e770 <tcp_slowtmr+0x398>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
  11e5d4:	e51b0008 	ldr	r0, [fp, #-8]
  11e5d8:	eb002180 	bl	126be0 <tcp_zero_window_probe>
  11e5dc:	e1a03000 	mov	r3, r0
  11e5e0:	e3530000 	cmp	r3, #0
  11e5e4:	1a000061 	bne	11e770 <tcp_slowtmr+0x398>
            pcb->persist_cnt = 0;
  11e5e8:	e51b3008 	ldr	r3, [fp, #-8]
  11e5ec:	e3a02000 	mov	r2, #0
  11e5f0:	e5c320a0 	strb	r2, [r3, #160]	; 0xa0
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
  11e5f4:	e51b3008 	ldr	r3, [fp, #-8]
  11e5f8:	e5d330a1 	ldrb	r3, [r3, #161]	; 0xa1
  11e5fc:	e3530006 	cmp	r3, #6
  11e600:	8a00005a 	bhi	11e770 <tcp_slowtmr+0x398>
              pcb->persist_backoff++;
  11e604:	e51b3008 	ldr	r3, [fp, #-8]
  11e608:	e5d330a1 	ldrb	r3, [r3, #161]	; 0xa1
  11e60c:	e2833001 	add	r3, r3, #1
  11e610:	e6ef2073 	uxtb	r2, r3
  11e614:	e51b3008 	ldr	r3, [fp, #-8]
  11e618:	e5c320a1 	strb	r2, [r3, #161]	; 0xa1
  11e61c:	ea000053 	b	11e770 <tcp_slowtmr+0x398>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
  11e620:	e51b3008 	ldr	r3, [fp, #-8]
  11e624:	e1d333f4 	ldrsh	r3, [r3, #52]	; 0x34
  11e628:	e3530000 	cmp	r3, #0
  11e62c:	ba000007 	blt	11e650 <tcp_slowtmr+0x278>
          ++pcb->rtime;
  11e630:	e51b3008 	ldr	r3, [fp, #-8]
  11e634:	e1d333f4 	ldrsh	r3, [r3, #52]	; 0x34
  11e638:	e6ff3073 	uxth	r3, r3
  11e63c:	e2833001 	add	r3, r3, #1
  11e640:	e6ff3073 	uxth	r3, r3
  11e644:	e6bf2073 	sxth	r2, r3
  11e648:	e51b3008 	ldr	r3, [fp, #-8]
  11e64c:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
  11e650:	e51b3008 	ldr	r3, [fp, #-8]
  11e654:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  11e658:	e3530000 	cmp	r3, #0
  11e65c:	0a000043 	beq	11e770 <tcp_slowtmr+0x398>
  11e660:	e51b3008 	ldr	r3, [fp, #-8]
  11e664:	e1d323f4 	ldrsh	r2, [r3, #52]	; 0x34
  11e668:	e51b3008 	ldr	r3, [fp, #-8]
  11e66c:	e1d334f4 	ldrsh	r3, [r3, #68]	; 0x44
  11e670:	e1520003 	cmp	r2, r3
  11e674:	ba00003d 	blt	11e770 <tcp_slowtmr+0x398>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
  11e678:	e51b3008 	ldr	r3, [fp, #-8]
  11e67c:	e5933014 	ldr	r3, [r3, #20]
  11e680:	e3530002 	cmp	r3, #2
  11e684:	0a000015 	beq	11e6e0 <tcp_slowtmr+0x308>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
  11e688:	e51b3008 	ldr	r3, [fp, #-8]
  11e68c:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  11e690:	e353000c 	cmp	r3, #12
  11e694:	31a03003 	movcc	r3, r3
  11e698:	23a0300c 	movcs	r3, #12
  11e69c:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
  11e6a0:	e51b3008 	ldr	r3, [fp, #-8]
  11e6a4:	e1d334f0 	ldrsh	r3, [r3, #64]	; 0x40
  11e6a8:	e1a031c3 	asr	r3, r3, #3
  11e6ac:	e6bf3073 	sxth	r3, r3
  11e6b0:	e1a02003 	mov	r2, r3
  11e6b4:	e51b3008 	ldr	r3, [fp, #-8]
  11e6b8:	e1d334f2 	ldrsh	r3, [r3, #66]	; 0x42
  11e6bc:	e0822003 	add	r2, r2, r3
  11e6c0:	e55b1015 	ldrb	r1, [fp, #-21]	; 0xffffffeb
  11e6c4:	e30733e8 	movw	r3, #29672	; 0x73e8
  11e6c8:	e3403014 	movt	r3, #20
  11e6cc:	e7d33001 	ldrb	r3, [r3, r1]
  11e6d0:	e1a03312 	lsl	r3, r2, r3
  11e6d4:	e6bf2073 	sxth	r2, r3
  11e6d8:	e51b3008 	ldr	r3, [fp, #-8]
  11e6dc:	e1c324b4 	strh	r2, [r3, #68]	; 0x44
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
  11e6e0:	e51b3008 	ldr	r3, [fp, #-8]
  11e6e4:	e3a02000 	mov	r2, #0
  11e6e8:	e1c323b4 	strh	r2, [r3, #52]	; 0x34

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
  11e6ec:	e51b3008 	ldr	r3, [fp, #-8]
  11e6f0:	e1d326b0 	ldrh	r2, [r3, #96]	; 0x60
  11e6f4:	e51b3008 	ldr	r3, [fp, #-8]
  11e6f8:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  11e6fc:	e1520003 	cmp	r2, r3
  11e700:	31a03002 	movcc	r3, r2
  11e704:	21a03003 	movcs	r3, r3
  11e708:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8
          pcb->ssthresh = eff_wnd >> 1;
  11e70c:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
  11e710:	e1a030a3 	lsr	r3, r3, #1
  11e714:	e6ff2073 	uxth	r2, r3
  11e718:	e51b3008 	ldr	r3, [fp, #-8]
  11e71c:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
  11e720:	e51b3008 	ldr	r3, [fp, #-8]
  11e724:	e1d324be 	ldrh	r2, [r3, #78]	; 0x4e
  11e728:	e51b3008 	ldr	r3, [fp, #-8]
  11e72c:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  11e730:	e1a03083 	lsl	r3, r3, #1
  11e734:	e6ff3073 	uxth	r3, r3
  11e738:	e1520003 	cmp	r2, r3
  11e73c:	2a000005 	bcs	11e758 <tcp_slowtmr+0x380>
            pcb->ssthresh = (pcb->mss << 1);
  11e740:	e51b3008 	ldr	r3, [fp, #-8]
  11e744:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  11e748:	e1a03083 	lsl	r3, r3, #1
  11e74c:	e6ff2073 	uxth	r2, r3
  11e750:	e51b3008 	ldr	r3, [fp, #-8]
  11e754:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
          }
          pcb->cwnd = pcb->mss;
  11e758:	e51b3008 	ldr	r3, [fp, #-8]
  11e75c:	e1d323b6 	ldrh	r2, [r3, #54]	; 0x36
  11e760:	e51b3008 	ldr	r3, [fp, #-8]
  11e764:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
  11e768:	e51b0008 	ldr	r0, [fp, #-8]
  11e76c:	eb002002 	bl	12677c <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
  11e770:	e51b3008 	ldr	r3, [fp, #-8]
  11e774:	e5933014 	ldr	r3, [r3, #20]
  11e778:	e3530006 	cmp	r3, #6
  11e77c:	1a00000f 	bne	11e7c0 <tcp_slowtmr+0x3e8>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
  11e780:	e51b3008 	ldr	r3, [fp, #-8]
  11e784:	e5d3301e 	ldrb	r3, [r3, #30]
  11e788:	e2033010 	and	r3, r3, #16
  11e78c:	e3530000 	cmp	r3, #0
  11e790:	0a00000a 	beq	11e7c0 <tcp_slowtmr+0x3e8>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
  11e794:	e30531b4 	movw	r3, #20916	; 0x51b4
  11e798:	e3403057 	movt	r3, #87	; 0x57
  11e79c:	e5932000 	ldr	r2, [r3]
  11e7a0:	e51b3008 	ldr	r3, [fp, #-8]
  11e7a4:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11e7a8:	e0423003 	sub	r3, r2, r3
  11e7ac:	e3530028 	cmp	r3, #40	; 0x28
  11e7b0:	9a000002 	bls	11e7c0 <tcp_slowtmr+0x3e8>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
  11e7b4:	e55b300d 	ldrb	r3, [fp, #-13]
  11e7b8:	e2833001 	add	r3, r3, #1
  11e7bc:	e54b300d 	strb	r3, [fp, #-13]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
  11e7c0:	e51b3008 	ldr	r3, [fp, #-8]
  11e7c4:	e5d33008 	ldrb	r3, [r3, #8]
  11e7c8:	e2033008 	and	r3, r3, #8
  11e7cc:	e3530000 	cmp	r3, #0
  11e7d0:	0a000044 	beq	11e8e8 <tcp_slowtmr+0x510>
       ((pcb->state == ESTABLISHED) ||
  11e7d4:	e51b3008 	ldr	r3, [fp, #-8]
  11e7d8:	e5933014 	ldr	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
  11e7dc:	e3530004 	cmp	r3, #4
  11e7e0:	0a000003 	beq	11e7f4 <tcp_slowtmr+0x41c>
        (pcb->state == CLOSE_WAIT))) {
  11e7e4:	e51b3008 	ldr	r3, [fp, #-8]
  11e7e8:	e5933014 	ldr	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
  11e7ec:	e3530007 	cmp	r3, #7
  11e7f0:	1a00003c 	bne	11e8e8 <tcp_slowtmr+0x510>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
  11e7f4:	e30531b4 	movw	r3, #20916	; 0x51b4
  11e7f8:	e3403057 	movt	r3, #87	; 0x57
  11e7fc:	e5932000 	ldr	r2, [r3]
  11e800:	e51b3008 	ldr	r3, [fp, #-8]
  11e804:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11e808:	e0421003 	sub	r1, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
  11e80c:	e51b3008 	ldr	r3, [fp, #-8]
  11e810:	e5932094 	ldr	r2, [r3, #148]	; 0x94
  11e814:	e51b3008 	ldr	r3, [fp, #-8]
  11e818:	e593309c 	ldr	r3, [r3, #156]	; 0x9c
  11e81c:	e51b0008 	ldr	r0, [fp, #-8]
  11e820:	e5900098 	ldr	r0, [r0, #152]	; 0x98
  11e824:	e0030390 	mul	r3, r0, r3
  11e828:	e0822003 	add	r2, r2, r3
  11e82c:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  11e830:	e3413062 	movt	r3, #4194	; 0x1062
  11e834:	e0832392 	umull	r2, r3, r2, r3
  11e838:	e1a032a3 	lsr	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
  11e83c:	e1510003 	cmp	r1, r3
  11e840:	9a000006 	bls	11e860 <tcp_slowtmr+0x488>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
  11e844:	e55b300d 	ldrb	r3, [fp, #-13]
  11e848:	e2833001 	add	r3, r3, #1
  11e84c:	e54b300d 	strb	r3, [fp, #-13]
        ++pcb_reset;
  11e850:	e55b300e 	ldrb	r3, [fp, #-14]
  11e854:	e2833001 	add	r3, r3, #1
  11e858:	e54b300e 	strb	r3, [fp, #-14]
  11e85c:	ea000021 	b	11e8e8 <tcp_slowtmr+0x510>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
  11e860:	e30531b4 	movw	r3, #20916	; 0x51b4
  11e864:	e3403057 	movt	r3, #87	; 0x57
  11e868:	e5932000 	ldr	r2, [r3]
  11e86c:	e51b3008 	ldr	r3, [fp, #-8]
  11e870:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11e874:	e0421003 	sub	r1, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
  11e878:	e51b3008 	ldr	r3, [fp, #-8]
  11e87c:	e5932094 	ldr	r2, [r3, #148]	; 0x94
  11e880:	e51b3008 	ldr	r3, [fp, #-8]
  11e884:	e5d330a2 	ldrb	r3, [r3, #162]	; 0xa2
  11e888:	e1a00003 	mov	r0, r3
  11e88c:	e51b3008 	ldr	r3, [fp, #-8]
  11e890:	e5933098 	ldr	r3, [r3, #152]	; 0x98
  11e894:	e0030093 	mul	r3, r3, r0
  11e898:	e0822003 	add	r2, r2, r3
                / TCP_SLOW_INTERVAL)
  11e89c:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  11e8a0:	e3413062 	movt	r3, #4194	; 0x1062
  11e8a4:	e0832392 	umull	r2, r3, r2, r3
  11e8a8:	e1a032a3 	lsr	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
  11e8ac:	e1510003 	cmp	r1, r3
  11e8b0:	9a00000c 	bls	11e8e8 <tcp_slowtmr+0x510>
      {
        err = tcp_keepalive(pcb);
  11e8b4:	e51b0008 	ldr	r0, [fp, #-8]
  11e8b8:	eb00207a 	bl	126aa8 <tcp_keepalive>
  11e8bc:	e1a03000 	mov	r3, r0
  11e8c0:	e54b300f 	strb	r3, [fp, #-15]
        if (err == ERR_OK) {
  11e8c4:	e15b30df 	ldrsb	r3, [fp, #-15]
  11e8c8:	e3530000 	cmp	r3, #0
  11e8cc:	1a000005 	bne	11e8e8 <tcp_slowtmr+0x510>
          pcb->keep_cnt_sent++;
  11e8d0:	e51b3008 	ldr	r3, [fp, #-8]
  11e8d4:	e5d330a2 	ldrb	r3, [r3, #162]	; 0xa2
  11e8d8:	e2833001 	add	r3, r3, #1
  11e8dc:	e6ef2073 	uxtb	r2, r3
  11e8e0:	e51b3008 	ldr	r3, [fp, #-8]
  11e8e4:	e5c320a2 	strb	r2, [r3, #162]	; 0xa2

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
  11e8e8:	e51b3008 	ldr	r3, [fp, #-8]
  11e8ec:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  11e8f0:	e3530000 	cmp	r3, #0
  11e8f4:	0a000013 	beq	11e948 <tcp_slowtmr+0x570>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
  11e8f8:	e30531b4 	movw	r3, #20916	; 0x51b4
  11e8fc:	e3403057 	movt	r3, #87	; 0x57
  11e900:	e5932000 	ldr	r2, [r3]
  11e904:	e51b3008 	ldr	r3, [fp, #-8]
  11e908:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11e90c:	e0422003 	sub	r2, r2, r3
  11e910:	e51b3008 	ldr	r3, [fp, #-8]
  11e914:	e1d334f4 	ldrsh	r3, [r3, #68]	; 0x44
  11e918:	e1a01003 	mov	r1, r3
  11e91c:	e3a03006 	mov	r3, #6
  11e920:	e0030193 	mul	r3, r3, r1
    if (pcb->ooseq != NULL &&
  11e924:	e1520003 	cmp	r2, r3
  11e928:	3a000006 	bcc	11e948 <tcp_slowtmr+0x570>
      tcp_segs_free(pcb->ooseq);
  11e92c:	e51b3008 	ldr	r3, [fp, #-8]
  11e930:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  11e934:	e1a00003 	mov	r0, r3
  11e938:	eb0001e3 	bl	11f0cc <tcp_segs_free>
      pcb->ooseq = NULL;
  11e93c:	e51b3008 	ldr	r3, [fp, #-8]
  11e940:	e3a02000 	mov	r2, #0
  11e944:	e5832074 	str	r2, [r3, #116]	; 0x74
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
  11e948:	e51b3008 	ldr	r3, [fp, #-8]
  11e94c:	e5933014 	ldr	r3, [r3, #20]
  11e950:	e3530003 	cmp	r3, #3
  11e954:	1a00000a 	bne	11e984 <tcp_slowtmr+0x5ac>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
  11e958:	e30531b4 	movw	r3, #20916	; 0x51b4
  11e95c:	e3403057 	movt	r3, #87	; 0x57
  11e960:	e5932000 	ldr	r2, [r3]
  11e964:	e51b3008 	ldr	r3, [fp, #-8]
  11e968:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11e96c:	e0423003 	sub	r3, r2, r3
  11e970:	e3530028 	cmp	r3, #40	; 0x28
  11e974:	9a000002 	bls	11e984 <tcp_slowtmr+0x5ac>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
  11e978:	e55b300d 	ldrb	r3, [fp, #-13]
  11e97c:	e2833001 	add	r3, r3, #1
  11e980:	e54b300d 	strb	r3, [fp, #-13]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
  11e984:	e51b3008 	ldr	r3, [fp, #-8]
  11e988:	e5933014 	ldr	r3, [r3, #20]
  11e98c:	e3530009 	cmp	r3, #9
  11e990:	1a00000a 	bne	11e9c0 <tcp_slowtmr+0x5e8>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
  11e994:	e30531b4 	movw	r3, #20916	; 0x51b4
  11e998:	e3403057 	movt	r3, #87	; 0x57
  11e99c:	e5932000 	ldr	r2, [r3]
  11e9a0:	e51b3008 	ldr	r3, [fp, #-8]
  11e9a4:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11e9a8:	e0423003 	sub	r3, r2, r3
  11e9ac:	e35300f0 	cmp	r3, #240	; 0xf0
  11e9b0:	9a000002 	bls	11e9c0 <tcp_slowtmr+0x5e8>
        ++pcb_remove;
  11e9b4:	e55b300d 	ldrb	r3, [fp, #-13]
  11e9b8:	e2833001 	add	r3, r3, #1
  11e9bc:	e54b300d 	strb	r3, [fp, #-13]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
  11e9c0:	e55b300d 	ldrb	r3, [fp, #-13]
  11e9c4:	e3530000 	cmp	r3, #0
  11e9c8:	0a00005d 	beq	11eb44 <tcp_slowtmr+0x76c>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
  11e9cc:	e51b3008 	ldr	r3, [fp, #-8]
  11e9d0:	e5933090 	ldr	r3, [r3, #144]	; 0x90
  11e9d4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
  11e9d8:	e51b0008 	ldr	r0, [fp, #-8]
  11e9dc:	eb000411 	bl	11fa28 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
  11e9e0:	e51b300c 	ldr	r3, [fp, #-12]
  11e9e4:	e3530000 	cmp	r3, #0
  11e9e8:	0a000011 	beq	11ea34 <tcp_slowtmr+0x65c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
  11e9ec:	e30531b0 	movw	r3, #20912	; 0x51b0
  11e9f0:	e3403057 	movt	r3, #87	; 0x57
  11e9f4:	e5933000 	ldr	r3, [r3]
  11e9f8:	e51b2008 	ldr	r2, [fp, #-8]
  11e9fc:	e1520003 	cmp	r2, r3
  11ea00:	1a000006 	bne	11ea20 <tcp_slowtmr+0x648>
  11ea04:	e307061c 	movw	r0, #30236	; 0x761c
  11ea08:	e3400014 	movt	r0, #20
  11ea0c:	ebff91c0 	bl	103114 <rt_kprintf>
  11ea10:	e3001484 	movw	r1, #1156	; 0x484
  11ea14:	e307041c 	movw	r0, #29724	; 0x741c
  11ea18:	e3400014 	movt	r0, #20
  11ea1c:	ebffb03c 	bl	10ab14 <sys_arch_assert>
        prev->next = pcb->next;
  11ea20:	e51b3008 	ldr	r3, [fp, #-8]
  11ea24:	e593200c 	ldr	r2, [r3, #12]
  11ea28:	e51b300c 	ldr	r3, [fp, #-12]
  11ea2c:	e583200c 	str	r2, [r3, #12]
  11ea30:	ea000011 	b	11ea7c <tcp_slowtmr+0x6a4>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
  11ea34:	e30531b0 	movw	r3, #20912	; 0x51b0
  11ea38:	e3403057 	movt	r3, #87	; 0x57
  11ea3c:	e5933000 	ldr	r3, [r3]
  11ea40:	e51b2008 	ldr	r2, [fp, #-8]
  11ea44:	e1520003 	cmp	r2, r3
  11ea48:	0a000006 	beq	11ea68 <tcp_slowtmr+0x690>
  11ea4c:	e3070648 	movw	r0, #30280	; 0x7648
  11ea50:	e3400014 	movt	r0, #20
  11ea54:	ebff91ae 	bl	103114 <rt_kprintf>
  11ea58:	e3001488 	movw	r1, #1160	; 0x488
  11ea5c:	e307041c 	movw	r0, #29724	; 0x741c
  11ea60:	e3400014 	movt	r0, #20
  11ea64:	ebffb02a 	bl	10ab14 <sys_arch_assert>
        tcp_active_pcbs = pcb->next;
  11ea68:	e51b3008 	ldr	r3, [fp, #-8]
  11ea6c:	e593200c 	ldr	r2, [r3, #12]
  11ea70:	e30531b0 	movw	r3, #20912	; 0x51b0
  11ea74:	e3403057 	movt	r3, #87	; 0x57
  11ea78:	e5832000 	str	r2, [r3]
      }

      if (pcb_reset) {
  11ea7c:	e55b300e 	ldrb	r3, [fp, #-14]
  11ea80:	e3530000 	cmp	r3, #0
  11ea84:	0a00000f 	beq	11eac8 <tcp_slowtmr+0x6f0>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
  11ea88:	e51b3008 	ldr	r3, [fp, #-8]
  11ea8c:	e5930050 	ldr	r0, [r3, #80]	; 0x50
  11ea90:	e51b3008 	ldr	r3, [fp, #-8]
  11ea94:	e5931028 	ldr	r1, [r3, #40]	; 0x28
  11ea98:	e51bc008 	ldr	ip, [fp, #-8]
  11ea9c:	e51b3008 	ldr	r3, [fp, #-8]
  11eaa0:	e283e004 	add	lr, r3, #4
  11eaa4:	e51b3008 	ldr	r3, [fp, #-8]
  11eaa8:	e1d331ba 	ldrh	r3, [r3, #26]
  11eaac:	e51b2008 	ldr	r2, [fp, #-8]
  11eab0:	e1d221bc 	ldrh	r2, [r2, #28]
  11eab4:	e58d2004 	str	r2, [sp, #4]
  11eab8:	e58d3000 	str	r3, [sp]
  11eabc:	e1a0300e 	mov	r3, lr
  11eac0:	e1a0200c 	mov	r2, ip
  11eac4:	eb001eb0 	bl	12658c <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
  11eac8:	e51b3008 	ldr	r3, [fp, #-8]
  11eacc:	e5933010 	ldr	r3, [r3, #16]
  11ead0:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
      last_state = pcb->state;
  11ead4:	e51b3008 	ldr	r3, [fp, #-8]
  11ead8:	e5933014 	ldr	r3, [r3, #20]
  11eadc:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
      pcb2 = pcb;
  11eae0:	e51b3008 	ldr	r3, [fp, #-8]
  11eae4:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
      pcb = pcb->next;
  11eae8:	e51b3008 	ldr	r3, [fp, #-8]
  11eaec:	e593300c 	ldr	r3, [r3, #12]
  11eaf0:	e50b3008 	str	r3, [fp, #-8]
      memp_free(MEMP_TCP_PCB, pcb2);
  11eaf4:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  11eaf8:	e3a00002 	mov	r0, #2
  11eafc:	ebffe904 	bl	118f14 <memp_free>

      tcp_active_pcbs_changed = 0;
  11eb00:	e30531ac 	movw	r3, #20908	; 0x51ac
  11eb04:	e3403057 	movt	r3, #87	; 0x57
  11eb08:	e3a02000 	mov	r2, #0
  11eb0c:	e5c32000 	strb	r2, [r3]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
  11eb10:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11eb14:	e3530000 	cmp	r3, #0
  11eb18:	0a000003 	beq	11eb2c <tcp_slowtmr+0x754>
  11eb1c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11eb20:	e3e0100c 	mvn	r1, #12
  11eb24:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  11eb28:	e12fff33 	blx	r3
      if (tcp_active_pcbs_changed) {
  11eb2c:	e30531ac 	movw	r3, #20908	; 0x51ac
  11eb30:	e3403057 	movt	r3, #87	; 0x57
  11eb34:	e5d33000 	ldrb	r3, [r3]
  11eb38:	e3530000 	cmp	r3, #0
  11eb3c:	0a000033 	beq	11ec10 <tcp_slowtmr+0x838>
        goto tcp_slowtmr_start;
  11eb40:	eafffe38 	b	11e428 <tcp_slowtmr+0x50>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
  11eb44:	e51b3008 	ldr	r3, [fp, #-8]
  11eb48:	e50b300c 	str	r3, [fp, #-12]
      pcb = pcb->next;
  11eb4c:	e51b3008 	ldr	r3, [fp, #-8]
  11eb50:	e593300c 	ldr	r3, [r3, #12]
  11eb54:	e50b3008 	str	r3, [fp, #-8]

      /* We check if we should poll the connection. */
      ++prev->polltmr;
  11eb58:	e51b300c 	ldr	r3, [fp, #-12]
  11eb5c:	e5d3301f 	ldrb	r3, [r3, #31]
  11eb60:	e2833001 	add	r3, r3, #1
  11eb64:	e6ef2073 	uxtb	r2, r3
  11eb68:	e51b300c 	ldr	r3, [fp, #-12]
  11eb6c:	e5c3201f 	strb	r2, [r3, #31]
      if (prev->polltmr >= prev->pollinterval) {
  11eb70:	e51b300c 	ldr	r3, [fp, #-12]
  11eb74:	e5d3201f 	ldrb	r2, [r3, #31]
  11eb78:	e51b300c 	ldr	r3, [fp, #-12]
  11eb7c:	e5d33020 	ldrb	r3, [r3, #32]
  11eb80:	e1520003 	cmp	r2, r3
  11eb84:	3a000021 	bcc	11ec10 <tcp_slowtmr+0x838>
        prev->polltmr = 0;
  11eb88:	e51b300c 	ldr	r3, [fp, #-12]
  11eb8c:	e3a02000 	mov	r2, #0
  11eb90:	e5c3201f 	strb	r2, [r3, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
  11eb94:	e30531ac 	movw	r3, #20908	; 0x51ac
  11eb98:	e3403057 	movt	r3, #87	; 0x57
  11eb9c:	e3a02000 	mov	r2, #0
  11eba0:	e5c32000 	strb	r2, [r3]
        TCP_EVENT_POLL(prev, err);
  11eba4:	e51b300c 	ldr	r3, [fp, #-12]
  11eba8:	e593308c 	ldr	r3, [r3, #140]	; 0x8c
  11ebac:	e3530000 	cmp	r3, #0
  11ebb0:	0a000009 	beq	11ebdc <tcp_slowtmr+0x804>
  11ebb4:	e51b300c 	ldr	r3, [fp, #-12]
  11ebb8:	e593308c 	ldr	r3, [r3, #140]	; 0x8c
  11ebbc:	e51b200c 	ldr	r2, [fp, #-12]
  11ebc0:	e5922010 	ldr	r2, [r2, #16]
  11ebc4:	e51b100c 	ldr	r1, [fp, #-12]
  11ebc8:	e1a00002 	mov	r0, r2
  11ebcc:	e12fff33 	blx	r3
  11ebd0:	e1a03000 	mov	r3, r0
  11ebd4:	e54b300f 	strb	r3, [fp, #-15]
  11ebd8:	ea000001 	b	11ebe4 <tcp_slowtmr+0x80c>
  11ebdc:	e3a03000 	mov	r3, #0
  11ebe0:	e54b300f 	strb	r3, [fp, #-15]
        if (tcp_active_pcbs_changed) {
  11ebe4:	e30531ac 	movw	r3, #20908	; 0x51ac
  11ebe8:	e3403057 	movt	r3, #87	; 0x57
  11ebec:	e5d33000 	ldrb	r3, [r3]
  11ebf0:	e3530000 	cmp	r3, #0
  11ebf4:	0a000000 	beq	11ebfc <tcp_slowtmr+0x824>
          goto tcp_slowtmr_start;
  11ebf8:	eafffe0a 	b	11e428 <tcp_slowtmr+0x50>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
  11ebfc:	e15b30df 	ldrsb	r3, [fp, #-15]
  11ec00:	e3530000 	cmp	r3, #0
  11ec04:	1a000001 	bne	11ec10 <tcp_slowtmr+0x838>
          tcp_output(prev);
  11ec08:	e51b000c 	ldr	r0, [fp, #-12]
  11ec0c:	eb001bf8 	bl	125bf4 <tcp_output>
  while (pcb != NULL) {
  11ec10:	e51b3008 	ldr	r3, [fp, #-8]
  11ec14:	e3530000 	cmp	r3, #0
  11ec18:	1afffe09 	bne	11e444 <tcp_slowtmr+0x6c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
  11ec1c:	e3a03000 	mov	r3, #0
  11ec20:	e50b300c 	str	r3, [fp, #-12]
  pcb = tcp_tw_pcbs;
  11ec24:	e30531c0 	movw	r3, #20928	; 0x51c0
  11ec28:	e3403057 	movt	r3, #87	; 0x57
  11ec2c:	e5933000 	ldr	r3, [r3]
  11ec30:	e50b3008 	str	r3, [fp, #-8]
  while (pcb != NULL) {
  11ec34:	ea000051 	b	11ed80 <tcp_slowtmr+0x9a8>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
  11ec38:	e51b3008 	ldr	r3, [fp, #-8]
  11ec3c:	e5933014 	ldr	r3, [r3, #20]
  11ec40:	e353000a 	cmp	r3, #10
  11ec44:	0a000006 	beq	11ec64 <tcp_slowtmr+0x88c>
  11ec48:	e3070674 	movw	r0, #30324	; 0x7674
  11ec4c:	e3400014 	movt	r0, #20
  11ec50:	ebff912f 	bl	103114 <rt_kprintf>
  11ec54:	e30014b8 	movw	r1, #1208	; 0x4b8
  11ec58:	e307041c 	movw	r0, #29724	; 0x741c
  11ec5c:	e3400014 	movt	r0, #20
  11ec60:	ebffafab 	bl	10ab14 <sys_arch_assert>
    pcb_remove = 0;
  11ec64:	e3a03000 	mov	r3, #0
  11ec68:	e54b300d 	strb	r3, [fp, #-13]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
  11ec6c:	e30531b4 	movw	r3, #20916	; 0x51b4
  11ec70:	e3403057 	movt	r3, #87	; 0x57
  11ec74:	e5932000 	ldr	r2, [r3]
  11ec78:	e51b3008 	ldr	r3, [fp, #-8]
  11ec7c:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11ec80:	e0423003 	sub	r3, r2, r3
  11ec84:	e35300f0 	cmp	r3, #240	; 0xf0
  11ec88:	9a000002 	bls	11ec98 <tcp_slowtmr+0x8c0>
      ++pcb_remove;
  11ec8c:	e55b300d 	ldrb	r3, [fp, #-13]
  11ec90:	e2833001 	add	r3, r3, #1
  11ec94:	e54b300d 	strb	r3, [fp, #-13]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
  11ec98:	e55b300d 	ldrb	r3, [fp, #-13]
  11ec9c:	e3530000 	cmp	r3, #0
  11eca0:	0a000031 	beq	11ed6c <tcp_slowtmr+0x994>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
  11eca4:	e51b0008 	ldr	r0, [fp, #-8]
  11eca8:	eb00035e 	bl	11fa28 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
  11ecac:	e51b300c 	ldr	r3, [fp, #-12]
  11ecb0:	e3530000 	cmp	r3, #0
  11ecb4:	0a000011 	beq	11ed00 <tcp_slowtmr+0x928>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
  11ecb8:	e30531c0 	movw	r3, #20928	; 0x51c0
  11ecbc:	e3403057 	movt	r3, #87	; 0x57
  11ecc0:	e5933000 	ldr	r3, [r3]
  11ecc4:	e51b2008 	ldr	r2, [fp, #-8]
  11ecc8:	e1520003 	cmp	r2, r3
  11eccc:	1a000006 	bne	11ecec <tcp_slowtmr+0x914>
  11ecd0:	e30706a4 	movw	r0, #30372	; 0x76a4
  11ecd4:	e3400014 	movt	r0, #20
  11ecd8:	ebff910d 	bl	103114 <rt_kprintf>
  11ecdc:	e30014c6 	movw	r1, #1222	; 0x4c6
  11ece0:	e307041c 	movw	r0, #29724	; 0x741c
  11ece4:	e3400014 	movt	r0, #20
  11ece8:	ebffaf89 	bl	10ab14 <sys_arch_assert>
        prev->next = pcb->next;
  11ecec:	e51b3008 	ldr	r3, [fp, #-8]
  11ecf0:	e593200c 	ldr	r2, [r3, #12]
  11ecf4:	e51b300c 	ldr	r3, [fp, #-12]
  11ecf8:	e583200c 	str	r2, [r3, #12]
  11ecfc:	ea000011 	b	11ed48 <tcp_slowtmr+0x970>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
  11ed00:	e30531c0 	movw	r3, #20928	; 0x51c0
  11ed04:	e3403057 	movt	r3, #87	; 0x57
  11ed08:	e5933000 	ldr	r3, [r3]
  11ed0c:	e51b2008 	ldr	r2, [fp, #-8]
  11ed10:	e1520003 	cmp	r2, r3
  11ed14:	0a000006 	beq	11ed34 <tcp_slowtmr+0x95c>
  11ed18:	e30706cc 	movw	r0, #30412	; 0x76cc
  11ed1c:	e3400014 	movt	r0, #20
  11ed20:	ebff90fb 	bl	103114 <rt_kprintf>
  11ed24:	e30014ca 	movw	r1, #1226	; 0x4ca
  11ed28:	e307041c 	movw	r0, #29724	; 0x741c
  11ed2c:	e3400014 	movt	r0, #20
  11ed30:	ebffaf77 	bl	10ab14 <sys_arch_assert>
        tcp_tw_pcbs = pcb->next;
  11ed34:	e51b3008 	ldr	r3, [fp, #-8]
  11ed38:	e593200c 	ldr	r2, [r3, #12]
  11ed3c:	e30531c0 	movw	r3, #20928	; 0x51c0
  11ed40:	e3403057 	movt	r3, #87	; 0x57
  11ed44:	e5832000 	str	r2, [r3]
      }
      pcb2 = pcb;
  11ed48:	e51b3008 	ldr	r3, [fp, #-8]
  11ed4c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      pcb = pcb->next;
  11ed50:	e51b3008 	ldr	r3, [fp, #-8]
  11ed54:	e593300c 	ldr	r3, [r3, #12]
  11ed58:	e50b3008 	str	r3, [fp, #-8]
      memp_free(MEMP_TCP_PCB, pcb2);
  11ed5c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  11ed60:	e3a00002 	mov	r0, #2
  11ed64:	ebffe86a 	bl	118f14 <memp_free>
  11ed68:	ea000004 	b	11ed80 <tcp_slowtmr+0x9a8>
    } else {
      prev = pcb;
  11ed6c:	e51b3008 	ldr	r3, [fp, #-8]
  11ed70:	e50b300c 	str	r3, [fp, #-12]
      pcb = pcb->next;
  11ed74:	e51b3008 	ldr	r3, [fp, #-8]
  11ed78:	e593300c 	ldr	r3, [r3, #12]
  11ed7c:	e50b3008 	str	r3, [fp, #-8]
  while (pcb != NULL) {
  11ed80:	e51b3008 	ldr	r3, [fp, #-8]
  11ed84:	e3530000 	cmp	r3, #0
  11ed88:	1affffaa 	bne	11ec38 <tcp_slowtmr+0x860>
    }
  }
}
  11ed8c:	e320f000 	nop	{0}
  11ed90:	e24bd004 	sub	sp, fp, #4
  11ed94:	e8bd8800 	pop	{fp, pc}

0011ed98 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
  11ed98:	e92d4800 	push	{fp, lr}
  11ed9c:	e28db004 	add	fp, sp, #4
  11eda0:	e24dd008 	sub	sp, sp, #8
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
  11eda4:	e30e3211 	movw	r3, #57873	; 0xe211
  11eda8:	e3403014 	movt	r3, #20
  11edac:	e5d33000 	ldrb	r3, [r3]
  11edb0:	e2833001 	add	r3, r3, #1
  11edb4:	e6ef2073 	uxtb	r2, r3
  11edb8:	e30e3211 	movw	r3, #57873	; 0xe211
  11edbc:	e3403014 	movt	r3, #20
  11edc0:	e5c32000 	strb	r2, [r3]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
  11edc4:	e30531b0 	movw	r3, #20912	; 0x51b0
  11edc8:	e3403057 	movt	r3, #87	; 0x57
  11edcc:	e5933000 	ldr	r3, [r3]
  11edd0:	e50b3008 	str	r3, [fp, #-8]

  while (pcb != NULL) {
  11edd4:	ea000044 	b	11eeec <tcp_fasttmr+0x154>
    if (pcb->last_timer != tcp_timer_ctr) {
  11edd8:	e51b3008 	ldr	r3, [fp, #-8]
  11eddc:	e5d32021 	ldrb	r2, [r3, #33]	; 0x21
  11ede0:	e30e3211 	movw	r3, #57873	; 0xe211
  11ede4:	e3403014 	movt	r3, #20
  11ede8:	e5d33000 	ldrb	r3, [r3]
  11edec:	e1520003 	cmp	r2, r3
  11edf0:	0a00003a 	beq	11eee0 <tcp_fasttmr+0x148>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
  11edf4:	e30e3211 	movw	r3, #57873	; 0xe211
  11edf8:	e3403014 	movt	r3, #20
  11edfc:	e5d32000 	ldrb	r2, [r3]
  11ee00:	e51b3008 	ldr	r3, [fp, #-8]
  11ee04:	e5c32021 	strb	r2, [r3, #33]	; 0x21
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
  11ee08:	e51b3008 	ldr	r3, [fp, #-8]
  11ee0c:	e5d3301e 	ldrb	r3, [r3, #30]
  11ee10:	e2033001 	and	r3, r3, #1
  11ee14:	e3530000 	cmp	r3, #0
  11ee18:	0a00000d 	beq	11ee54 <tcp_fasttmr+0xbc>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
  11ee1c:	e51b3008 	ldr	r3, [fp, #-8]
  11ee20:	e5d3301e 	ldrb	r3, [r3, #30]
  11ee24:	e3833002 	orr	r3, r3, #2
  11ee28:	e6ef2073 	uxtb	r2, r3
  11ee2c:	e51b3008 	ldr	r3, [fp, #-8]
  11ee30:	e5c3201e 	strb	r2, [r3, #30]
        tcp_output(pcb);
  11ee34:	e51b0008 	ldr	r0, [fp, #-8]
  11ee38:	eb001b6d 	bl	125bf4 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  11ee3c:	e51b3008 	ldr	r3, [fp, #-8]
  11ee40:	e5d3301e 	ldrb	r3, [r3, #30]
  11ee44:	e3c33003 	bic	r3, r3, #3
  11ee48:	e6ef2073 	uxtb	r2, r3
  11ee4c:	e51b3008 	ldr	r3, [fp, #-8]
  11ee50:	e5c3201e 	strb	r2, [r3, #30]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
  11ee54:	e51b3008 	ldr	r3, [fp, #-8]
  11ee58:	e5d3301e 	ldrb	r3, [r3, #30]
  11ee5c:	e2033008 	and	r3, r3, #8
  11ee60:	e3530000 	cmp	r3, #0
  11ee64:	0a000007 	beq	11ee88 <tcp_fasttmr+0xf0>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
  11ee68:	e51b3008 	ldr	r3, [fp, #-8]
  11ee6c:	e5d3301e 	ldrb	r3, [r3, #30]
  11ee70:	e3c33008 	bic	r3, r3, #8
  11ee74:	e6ef2073 	uxtb	r2, r3
  11ee78:	e51b3008 	ldr	r3, [fp, #-8]
  11ee7c:	e5c3201e 	strb	r2, [r3, #30]
        tcp_close_shutdown_fin(pcb);
  11ee80:	e51b0008 	ldr	r0, [fp, #-8]
  11ee84:	ebfff8b0 	bl	11d14c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
  11ee88:	e51b3008 	ldr	r3, [fp, #-8]
  11ee8c:	e593300c 	ldr	r3, [r3, #12]
  11ee90:	e50b300c 	str	r3, [fp, #-12]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
  11ee94:	e51b3008 	ldr	r3, [fp, #-8]
  11ee98:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11ee9c:	e3530000 	cmp	r3, #0
  11eea0:	0a00000b 	beq	11eed4 <tcp_fasttmr+0x13c>
        tcp_active_pcbs_changed = 0;
  11eea4:	e30531ac 	movw	r3, #20908	; 0x51ac
  11eea8:	e3403057 	movt	r3, #87	; 0x57
  11eeac:	e3a02000 	mov	r2, #0
  11eeb0:	e5c32000 	strb	r2, [r3]
        tcp_process_refused_data(pcb);
  11eeb4:	e51b0008 	ldr	r0, [fp, #-8]
  11eeb8:	eb000029 	bl	11ef64 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
  11eebc:	e30531ac 	movw	r3, #20908	; 0x51ac
  11eec0:	e3403057 	movt	r3, #87	; 0x57
  11eec4:	e5d33000 	ldrb	r3, [r3]
  11eec8:	e3530000 	cmp	r3, #0
  11eecc:	0a000000 	beq	11eed4 <tcp_fasttmr+0x13c>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
  11eed0:	eaffffbb 	b	11edc4 <tcp_fasttmr+0x2c>
        }
      }
      pcb = next;
  11eed4:	e51b300c 	ldr	r3, [fp, #-12]
  11eed8:	e50b3008 	str	r3, [fp, #-8]
  11eedc:	ea000002 	b	11eeec <tcp_fasttmr+0x154>
    } else {
      pcb = pcb->next;
  11eee0:	e51b3008 	ldr	r3, [fp, #-8]
  11eee4:	e593300c 	ldr	r3, [r3, #12]
  11eee8:	e50b3008 	str	r3, [fp, #-8]
  while (pcb != NULL) {
  11eeec:	e51b3008 	ldr	r3, [fp, #-8]
  11eef0:	e3530000 	cmp	r3, #0
  11eef4:	1affffb7 	bne	11edd8 <tcp_fasttmr+0x40>
    }
  }
}
  11eef8:	e320f000 	nop	{0}
  11eefc:	e24bd004 	sub	sp, fp, #4
  11ef00:	e8bd8800 	pop	{fp, pc}

0011ef04 <tcp_txnow>:

/** Call tcp_output for all active pcbs that have TF_NAGLEMEMERR set */
void
tcp_txnow(void)
{
  11ef04:	e92d4800 	push	{fp, lr}
  11ef08:	e28db004 	add	fp, sp, #4
  11ef0c:	e24dd008 	sub	sp, sp, #8
  struct tcp_pcb *pcb;

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  11ef10:	e30531b0 	movw	r3, #20912	; 0x51b0
  11ef14:	e3403057 	movt	r3, #87	; 0x57
  11ef18:	e5933000 	ldr	r3, [r3]
  11ef1c:	e50b3008 	str	r3, [fp, #-8]
  11ef20:	ea000009 	b	11ef4c <tcp_txnow+0x48>
    if (pcb->flags & TF_NAGLEMEMERR) {
  11ef24:	e51b3008 	ldr	r3, [fp, #-8]
  11ef28:	e5d3301e 	ldrb	r3, [r3, #30]
  11ef2c:	e6af3073 	sxtb	r3, r3
  11ef30:	e3530000 	cmp	r3, #0
  11ef34:	aa000001 	bge	11ef40 <tcp_txnow+0x3c>
      tcp_output(pcb);
  11ef38:	e51b0008 	ldr	r0, [fp, #-8]
  11ef3c:	eb001b2c 	bl	125bf4 <tcp_output>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  11ef40:	e51b3008 	ldr	r3, [fp, #-8]
  11ef44:	e593300c 	ldr	r3, [r3, #12]
  11ef48:	e50b3008 	str	r3, [fp, #-8]
  11ef4c:	e51b3008 	ldr	r3, [fp, #-8]
  11ef50:	e3530000 	cmp	r3, #0
  11ef54:	1afffff2 	bne	11ef24 <tcp_txnow+0x20>
    }
  }
}
  11ef58:	e320f000 	nop	{0}
  11ef5c:	e24bd004 	sub	sp, fp, #4
  11ef60:	e8bd8800 	pop	{fp, pc}

0011ef64 <tcp_process_refused_data>:

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
  11ef64:	e92d4810 	push	{r4, fp, lr}
  11ef68:	e28db008 	add	fp, sp, #8
  11ef6c:	e24dd014 	sub	sp, sp, #20
  11ef70:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
  11ef74:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ef78:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11ef7c:	e5d3300d 	ldrb	r3, [r3, #13]
  11ef80:	e54b300e 	strb	r3, [fp, #-14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
  11ef84:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ef88:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11ef8c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
  11ef90:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ef94:	e3a02000 	mov	r2, #0
  11ef98:	e5832078 	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
  11ef9c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11efa0:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  11efa4:	e3530000 	cmp	r3, #0
  11efa8:	0a00000a 	beq	11efd8 <tcp_process_refused_data+0x74>
  11efac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11efb0:	e5934084 	ldr	r4, [r3, #132]	; 0x84
  11efb4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11efb8:	e5930010 	ldr	r0, [r3, #16]
  11efbc:	e3a03000 	mov	r3, #0
  11efc0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11efc4:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11efc8:	e12fff34 	blx	r4
  11efcc:	e1a03000 	mov	r3, r0
  11efd0:	e54b300d 	strb	r3, [fp, #-13]
  11efd4:	ea000006 	b	11eff4 <tcp_process_refused_data+0x90>
  11efd8:	e3a03000 	mov	r3, #0
  11efdc:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11efe0:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11efe4:	e3a00000 	mov	r0, #0
  11efe8:	eb000086 	bl	11f208 <tcp_recv_null>
  11efec:	e1a03000 	mov	r3, r0
  11eff0:	e54b300d 	strb	r3, [fp, #-13]
    if (err == ERR_OK) {
  11eff4:	e15b30dd 	ldrsb	r3, [fp, #-13]
  11eff8:	e3530000 	cmp	r3, #0
  11effc:	1a000024 	bne	11f094 <tcp_process_refused_data+0x130>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
  11f000:	e55b300e 	ldrb	r3, [fp, #-14]
  11f004:	e2033020 	and	r3, r3, #32
  11f008:	e3530000 	cmp	r3, #0
  11f00c:	0a00002a 	beq	11f0bc <tcp_process_refused_data+0x158>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
  11f010:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f014:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  11f018:	e30f2fff 	movw	r2, #65535	; 0xffff
  11f01c:	e1530002 	cmp	r3, r2
  11f020:	0a000005 	beq	11f03c <tcp_process_refused_data+0xd8>
          pcb->rcv_wnd++;
  11f024:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f028:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  11f02c:	e2833001 	add	r3, r3, #1
  11f030:	e6ff2073 	uxth	r2, r3
  11f034:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f038:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
        }
        TCP_EVENT_CLOSED(pcb, err);
  11f03c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f040:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  11f044:	e3530000 	cmp	r3, #0
  11f048:	0a00000a 	beq	11f078 <tcp_process_refused_data+0x114>
  11f04c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f050:	e5934084 	ldr	r4, [r3, #132]	; 0x84
  11f054:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f058:	e5930010 	ldr	r0, [r3, #16]
  11f05c:	e3a03000 	mov	r3, #0
  11f060:	e3a02000 	mov	r2, #0
  11f064:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11f068:	e12fff34 	blx	r4
  11f06c:	e1a03000 	mov	r3, r0
  11f070:	e54b300d 	strb	r3, [fp, #-13]
  11f074:	ea000001 	b	11f080 <tcp_process_refused_data+0x11c>
  11f078:	e3a03000 	mov	r3, #0
  11f07c:	e54b300d 	strb	r3, [fp, #-13]
        if (err == ERR_ABRT) {
  11f080:	e15b30dd 	ldrsb	r3, [fp, #-13]
  11f084:	e373000d 	cmn	r3, #13
  11f088:	1a00000b 	bne	11f0bc <tcp_process_refused_data+0x158>
          return ERR_ABRT;
  11f08c:	e3e0300c 	mvn	r3, #12
  11f090:	ea00000a 	b	11f0c0 <tcp_process_refused_data+0x15c>
        }
      }
    } else if (err == ERR_ABRT) {
  11f094:	e15b30dd 	ldrsb	r3, [fp, #-13]
  11f098:	e373000d 	cmn	r3, #13
  11f09c:	1a000001 	bne	11f0a8 <tcp_process_refused_data+0x144>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
  11f0a0:	e3e0300c 	mvn	r3, #12
  11f0a4:	ea000005 	b	11f0c0 <tcp_process_refused_data+0x15c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
  11f0a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f0ac:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11f0b0:	e5832078 	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
  11f0b4:	e3e03004 	mvn	r3, #4
  11f0b8:	ea000000 	b	11f0c0 <tcp_process_refused_data+0x15c>
    }
  }
  return ERR_OK;
  11f0bc:	e3a03000 	mov	r3, #0
}
  11f0c0:	e1a00003 	mov	r0, r3
  11f0c4:	e24bd008 	sub	sp, fp, #8
  11f0c8:	e8bd8810 	pop	{r4, fp, pc}

0011f0cc <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
  11f0cc:	e92d4800 	push	{fp, lr}
  11f0d0:	e28db004 	add	fp, sp, #4
  11f0d4:	e24dd010 	sub	sp, sp, #16
  11f0d8:	e50b0010 	str	r0, [fp, #-16]
  while (seg != NULL) {
  11f0dc:	ea000006 	b	11f0fc <tcp_segs_free+0x30>
    struct tcp_seg *next = seg->next;
  11f0e0:	e51b3010 	ldr	r3, [fp, #-16]
  11f0e4:	e5933000 	ldr	r3, [r3]
  11f0e8:	e50b3008 	str	r3, [fp, #-8]
    tcp_seg_free(seg);
  11f0ec:	e51b0010 	ldr	r0, [fp, #-16]
  11f0f0:	eb000007 	bl	11f114 <tcp_seg_free>
    seg = next;
  11f0f4:	e51b3008 	ldr	r3, [fp, #-8]
  11f0f8:	e50b3010 	str	r3, [fp, #-16]
  while (seg != NULL) {
  11f0fc:	e51b3010 	ldr	r3, [fp, #-16]
  11f100:	e3530000 	cmp	r3, #0
  11f104:	1afffff5 	bne	11f0e0 <tcp_segs_free+0x14>
  }
}
  11f108:	e320f000 	nop	{0}
  11f10c:	e24bd004 	sub	sp, fp, #4
  11f110:	e8bd8800 	pop	{fp, pc}

0011f114 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
  11f114:	e92d4800 	push	{fp, lr}
  11f118:	e28db004 	add	fp, sp, #4
  11f11c:	e24dd008 	sub	sp, sp, #8
  11f120:	e50b0008 	str	r0, [fp, #-8]
  if (seg != NULL) {
  11f124:	e51b3008 	ldr	r3, [fp, #-8]
  11f128:	e3530000 	cmp	r3, #0
  11f12c:	0a00000a 	beq	11f15c <tcp_seg_free+0x48>
    if (seg->p != NULL) {
  11f130:	e51b3008 	ldr	r3, [fp, #-8]
  11f134:	e5933004 	ldr	r3, [r3, #4]
  11f138:	e3530000 	cmp	r3, #0
  11f13c:	0a000003 	beq	11f150 <tcp_seg_free+0x3c>
      pbuf_free(seg->p);
  11f140:	e51b3008 	ldr	r3, [fp, #-8]
  11f144:	e5933004 	ldr	r3, [r3, #4]
  11f148:	e1a00003 	mov	r0, r3
  11f14c:	ebffee7e 	bl	11ab4c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
  11f150:	e51b1008 	ldr	r1, [fp, #-8]
  11f154:	e3a00004 	mov	r0, #4
  11f158:	ebffe76d 	bl	118f14 <memp_free>
  }
}
  11f15c:	e320f000 	nop	{0}
  11f160:	e24bd004 	sub	sp, fp, #4
  11f164:	e8bd8800 	pop	{fp, pc}

0011f168 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
  11f168:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11f16c:	e28db000 	add	fp, sp, #0
  11f170:	e24dd00c 	sub	sp, sp, #12
  11f174:	e50b0008 	str	r0, [fp, #-8]
  11f178:	e1a03001 	mov	r3, r1
  11f17c:	e54b3009 	strb	r3, [fp, #-9]
  pcb->prio = prio;
  11f180:	e51b3008 	ldr	r3, [fp, #-8]
  11f184:	e55b2009 	ldrb	r2, [fp, #-9]
  11f188:	e5c32018 	strb	r2, [r3, #24]
}
  11f18c:	e320f000 	nop	{0}
  11f190:	e28bd000 	add	sp, fp, #0
  11f194:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11f198:	e12fff1e 	bx	lr

0011f19c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
  11f19c:	e92d4800 	push	{fp, lr}
  11f1a0:	e28db004 	add	fp, sp, #4
  11f1a4:	e24dd010 	sub	sp, sp, #16
  11f1a8:	e50b0010 	str	r0, [fp, #-16]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
  11f1ac:	e300258f 	movw	r2, #1423	; 0x58f
  11f1b0:	e307141c 	movw	r1, #29724	; 0x741c
  11f1b4:	e3401014 	movt	r1, #20
  11f1b8:	e3a00004 	mov	r0, #4
  11f1bc:	ebffe6ec 	bl	118d74 <memp_malloc_fn>
  11f1c0:	e50b0008 	str	r0, [fp, #-8]
  if (cseg == NULL) {
  11f1c4:	e51b3008 	ldr	r3, [fp, #-8]
  11f1c8:	e3530000 	cmp	r3, #0
  11f1cc:	1a000001 	bne	11f1d8 <tcp_seg_copy+0x3c>
    return NULL;
  11f1d0:	e3a03000 	mov	r3, #0
  11f1d4:	ea000008 	b	11f1fc <tcp_seg_copy+0x60>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
  11f1d8:	e3a02010 	mov	r2, #16
  11f1dc:	e51b1010 	ldr	r1, [fp, #-16]
  11f1e0:	e51b0008 	ldr	r0, [fp, #-8]
  11f1e4:	eb008488 	bl	14040c <memcpy>
  pbuf_ref(cseg->p);
  11f1e8:	e51b3008 	ldr	r3, [fp, #-8]
  11f1ec:	e5933004 	ldr	r3, [r3, #4]
  11f1f0:	e1a00003 	mov	r0, r3
  11f1f4:	ebffeeee 	bl	11adb4 <pbuf_ref>
  return cseg;
  11f1f8:	e51b3008 	ldr	r3, [fp, #-8]
}
  11f1fc:	e1a00003 	mov	r0, r3
  11f200:	e24bd004 	sub	sp, fp, #4
  11f204:	e8bd8800 	pop	{fp, pc}

0011f208 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
  11f208:	e92d4800 	push	{fp, lr}
  11f20c:	e28db004 	add	fp, sp, #4
  11f210:	e24dd010 	sub	sp, sp, #16
  11f214:	e50b0008 	str	r0, [fp, #-8]
  11f218:	e50b100c 	str	r1, [fp, #-12]
  11f21c:	e50b2010 	str	r2, [fp, #-16]
  11f220:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
  11f224:	e51b3010 	ldr	r3, [fp, #-16]
  11f228:	e3530000 	cmp	r3, #0
  11f22c:	0a000007 	beq	11f250 <tcp_recv_null+0x48>
    tcp_recved(pcb, p->tot_len);
  11f230:	e51b3010 	ldr	r3, [fp, #-16]
  11f234:	e1d330b8 	ldrh	r3, [r3, #8]
  11f238:	e1a01003 	mov	r1, r3
  11f23c:	e51b000c 	ldr	r0, [fp, #-12]
  11f240:	ebfffacd 	bl	11dd7c <tcp_recved>
    pbuf_free(p);
  11f244:	e51b0010 	ldr	r0, [fp, #-16]
  11f248:	ebffee3f 	bl	11ab4c <pbuf_free>
  11f24c:	ea000006 	b	11f26c <tcp_recv_null+0x64>
  } else if (err == ERR_OK) {
  11f250:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  11f254:	e3530000 	cmp	r3, #0
  11f258:	1a000003 	bne	11f26c <tcp_recv_null+0x64>
    return tcp_close(pcb);
  11f25c:	e51b000c 	ldr	r0, [fp, #-12]
  11f260:	ebfff81f 	bl	11d2e4 <tcp_close>
  11f264:	e1a03000 	mov	r3, r0
  11f268:	ea000000 	b	11f270 <tcp_recv_null+0x68>
  }
  return ERR_OK;
  11f26c:	e3a03000 	mov	r3, #0
}
  11f270:	e1a00003 	mov	r0, r3
  11f274:	e24bd004 	sub	sp, fp, #4
  11f278:	e8bd8800 	pop	{fp, pc}

0011f27c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
  11f27c:	e92d4800 	push	{fp, lr}
  11f280:	e28db004 	add	fp, sp, #4
  11f284:	e24dd018 	sub	sp, sp, #24
  11f288:	e1a03000 	mov	r3, r0
  11f28c:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
  11f290:	e15b31d5 	ldrsb	r3, [fp, #-21]	; 0xffffffeb
  11f294:	e3530000 	cmp	r3, #0
  11f298:	ba000001 	blt	11f2a4 <tcp_kill_prio+0x28>
  11f29c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  11f2a0:	ea000000 	b	11f2a8 <tcp_kill_prio+0x2c>
  11f2a4:	e3a0307f 	mov	r3, #127	; 0x7f
  11f2a8:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
  11f2ac:	e3a03000 	mov	r3, #0
  11f2b0:	e50b3010 	str	r3, [fp, #-16]
  inactive = NULL;
  11f2b4:	e3a03000 	mov	r3, #0
  11f2b8:	e50b300c 	str	r3, [fp, #-12]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  11f2bc:	e30531b0 	movw	r3, #20912	; 0x51b0
  11f2c0:	e3403057 	movt	r3, #87	; 0x57
  11f2c4:	e5933000 	ldr	r3, [r3]
  11f2c8:	e50b3008 	str	r3, [fp, #-8]
  11f2cc:	ea00001c 	b	11f344 <tcp_kill_prio+0xc8>
    if (pcb->prio <= mprio &&
  11f2d0:	e51b3008 	ldr	r3, [fp, #-8]
  11f2d4:	e5d33018 	ldrb	r3, [r3, #24]
  11f2d8:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  11f2dc:	e1520003 	cmp	r2, r3
  11f2e0:	3a000014 	bcc	11f338 <tcp_kill_prio+0xbc>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
  11f2e4:	e30531b4 	movw	r3, #20916	; 0x51b4
  11f2e8:	e3403057 	movt	r3, #87	; 0x57
  11f2ec:	e5932000 	ldr	r2, [r3]
  11f2f0:	e51b3008 	ldr	r3, [fp, #-8]
  11f2f4:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11f2f8:	e0423003 	sub	r3, r2, r3
    if (pcb->prio <= mprio &&
  11f2fc:	e51b2010 	ldr	r2, [fp, #-16]
  11f300:	e1520003 	cmp	r2, r3
  11f304:	8a00000b 	bhi	11f338 <tcp_kill_prio+0xbc>
      inactivity = tcp_ticks - pcb->tmr;
  11f308:	e30531b4 	movw	r3, #20916	; 0x51b4
  11f30c:	e3403057 	movt	r3, #87	; 0x57
  11f310:	e5932000 	ldr	r2, [r3]
  11f314:	e51b3008 	ldr	r3, [fp, #-8]
  11f318:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11f31c:	e0423003 	sub	r3, r2, r3
  11f320:	e50b3010 	str	r3, [fp, #-16]
      inactive = pcb;
  11f324:	e51b3008 	ldr	r3, [fp, #-8]
  11f328:	e50b300c 	str	r3, [fp, #-12]
      mprio = pcb->prio;
  11f32c:	e51b3008 	ldr	r3, [fp, #-8]
  11f330:	e5d33018 	ldrb	r3, [r3, #24]
  11f334:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  11f338:	e51b3008 	ldr	r3, [fp, #-8]
  11f33c:	e593300c 	ldr	r3, [r3, #12]
  11f340:	e50b3008 	str	r3, [fp, #-8]
  11f344:	e51b3008 	ldr	r3, [fp, #-8]
  11f348:	e3530000 	cmp	r3, #0
  11f34c:	1affffdf 	bne	11f2d0 <tcp_kill_prio+0x54>
    }
  }
  if (inactive != NULL) {
  11f350:	e51b300c 	ldr	r3, [fp, #-12]
  11f354:	e3530000 	cmp	r3, #0
  11f358:	0a000001 	beq	11f364 <tcp_kill_prio+0xe8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
  11f35c:	e51b000c 	ldr	r0, [fp, #-12]
  11f360:	ebfff8d3 	bl	11d6b4 <tcp_abort>
  }
}
  11f364:	e320f000 	nop	{0}
  11f368:	e24bd004 	sub	sp, fp, #4
  11f36c:	e8bd8800 	pop	{fp, pc}

0011f370 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
  11f370:	e92d4800 	push	{fp, lr}
  11f374:	e28db004 	add	fp, sp, #4
  11f378:	e24dd018 	sub	sp, sp, #24
  11f37c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
  11f380:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f384:	e3530008 	cmp	r3, #8
  11f388:	0a000009 	beq	11f3b4 <tcp_kill_state+0x44>
  11f38c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f390:	e3530009 	cmp	r3, #9
  11f394:	0a000006 	beq	11f3b4 <tcp_kill_state+0x44>
  11f398:	e30706f4 	movw	r0, #30452	; 0x76f4
  11f39c:	e3400014 	movt	r0, #20
  11f3a0:	ebff8f5b 	bl	103114 <rt_kprintf>
  11f3a4:	e30015d7 	movw	r1, #1495	; 0x5d7
  11f3a8:	e307041c 	movw	r0, #29724	; 0x741c
  11f3ac:	e3400014 	movt	r0, #20
  11f3b0:	ebffadd7 	bl	10ab14 <sys_arch_assert>

  inactivity = 0;
  11f3b4:	e3a03000 	mov	r3, #0
  11f3b8:	e50b3010 	str	r3, [fp, #-16]
  inactive = NULL;
  11f3bc:	e3a03000 	mov	r3, #0
  11f3c0:	e50b300c 	str	r3, [fp, #-12]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  11f3c4:	e30531b0 	movw	r3, #20912	; 0x51b0
  11f3c8:	e3403057 	movt	r3, #87	; 0x57
  11f3cc:	e5933000 	ldr	r3, [r3]
  11f3d0:	e50b3008 	str	r3, [fp, #-8]
  11f3d4:	ea000019 	b	11f440 <tcp_kill_state+0xd0>
    if (pcb->state == state) {
  11f3d8:	e51b3008 	ldr	r3, [fp, #-8]
  11f3dc:	e5933014 	ldr	r3, [r3, #20]
  11f3e0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11f3e4:	e1520003 	cmp	r2, r3
  11f3e8:	1a000011 	bne	11f434 <tcp_kill_state+0xc4>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
  11f3ec:	e30531b4 	movw	r3, #20916	; 0x51b4
  11f3f0:	e3403057 	movt	r3, #87	; 0x57
  11f3f4:	e5932000 	ldr	r2, [r3]
  11f3f8:	e51b3008 	ldr	r3, [fp, #-8]
  11f3fc:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11f400:	e0423003 	sub	r3, r2, r3
  11f404:	e51b2010 	ldr	r2, [fp, #-16]
  11f408:	e1520003 	cmp	r2, r3
  11f40c:	8a000008 	bhi	11f434 <tcp_kill_state+0xc4>
        inactivity = tcp_ticks - pcb->tmr;
  11f410:	e30531b4 	movw	r3, #20916	; 0x51b4
  11f414:	e3403057 	movt	r3, #87	; 0x57
  11f418:	e5932000 	ldr	r2, [r3]
  11f41c:	e51b3008 	ldr	r3, [fp, #-8]
  11f420:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11f424:	e0423003 	sub	r3, r2, r3
  11f428:	e50b3010 	str	r3, [fp, #-16]
        inactive = pcb;
  11f42c:	e51b3008 	ldr	r3, [fp, #-8]
  11f430:	e50b300c 	str	r3, [fp, #-12]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  11f434:	e51b3008 	ldr	r3, [fp, #-8]
  11f438:	e593300c 	ldr	r3, [r3, #12]
  11f43c:	e50b3008 	str	r3, [fp, #-8]
  11f440:	e51b3008 	ldr	r3, [fp, #-8]
  11f444:	e3530000 	cmp	r3, #0
  11f448:	1affffe2 	bne	11f3d8 <tcp_kill_state+0x68>
      }
    }
  }
  if (inactive != NULL) {
  11f44c:	e51b300c 	ldr	r3, [fp, #-12]
  11f450:	e3530000 	cmp	r3, #0
  11f454:	0a000002 	beq	11f464 <tcp_kill_state+0xf4>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
  11f458:	e3a01000 	mov	r1, #0
  11f45c:	e51b000c 	ldr	r0, [fp, #-12]
  11f460:	ebfff7f4 	bl	11d438 <tcp_abandon>
  }
}
  11f464:	e320f000 	nop	{0}
  11f468:	e24bd004 	sub	sp, fp, #4
  11f46c:	e8bd8800 	pop	{fp, pc}

0011f470 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
  11f470:	e92d4800 	push	{fp, lr}
  11f474:	e28db004 	add	fp, sp, #4
  11f478:	e24dd010 	sub	sp, sp, #16
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
  11f47c:	e3a03000 	mov	r3, #0
  11f480:	e50b3010 	str	r3, [fp, #-16]
  inactive = NULL;
  11f484:	e3a03000 	mov	r3, #0
  11f488:	e50b300c 	str	r3, [fp, #-12]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  11f48c:	e30531c0 	movw	r3, #20928	; 0x51c0
  11f490:	e3403057 	movt	r3, #87	; 0x57
  11f494:	e5933000 	ldr	r3, [r3]
  11f498:	e50b3008 	str	r3, [fp, #-8]
  11f49c:	ea000014 	b	11f4f4 <tcp_kill_timewait+0x84>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
  11f4a0:	e30531b4 	movw	r3, #20916	; 0x51b4
  11f4a4:	e3403057 	movt	r3, #87	; 0x57
  11f4a8:	e5932000 	ldr	r2, [r3]
  11f4ac:	e51b3008 	ldr	r3, [fp, #-8]
  11f4b0:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11f4b4:	e0423003 	sub	r3, r2, r3
  11f4b8:	e51b2010 	ldr	r2, [fp, #-16]
  11f4bc:	e1520003 	cmp	r2, r3
  11f4c0:	8a000008 	bhi	11f4e8 <tcp_kill_timewait+0x78>
      inactivity = tcp_ticks - pcb->tmr;
  11f4c4:	e30531b4 	movw	r3, #20916	; 0x51b4
  11f4c8:	e3403057 	movt	r3, #87	; 0x57
  11f4cc:	e5932000 	ldr	r2, [r3]
  11f4d0:	e51b3008 	ldr	r3, [fp, #-8]
  11f4d4:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11f4d8:	e0423003 	sub	r3, r2, r3
  11f4dc:	e50b3010 	str	r3, [fp, #-16]
      inactive = pcb;
  11f4e0:	e51b3008 	ldr	r3, [fp, #-8]
  11f4e4:	e50b300c 	str	r3, [fp, #-12]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  11f4e8:	e51b3008 	ldr	r3, [fp, #-8]
  11f4ec:	e593300c 	ldr	r3, [r3, #12]
  11f4f0:	e50b3008 	str	r3, [fp, #-8]
  11f4f4:	e51b3008 	ldr	r3, [fp, #-8]
  11f4f8:	e3530000 	cmp	r3, #0
  11f4fc:	1affffe7 	bne	11f4a0 <tcp_kill_timewait+0x30>
    }
  }
  if (inactive != NULL) {
  11f500:	e51b300c 	ldr	r3, [fp, #-12]
  11f504:	e3530000 	cmp	r3, #0
  11f508:	0a000001 	beq	11f514 <tcp_kill_timewait+0xa4>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
  11f50c:	e51b000c 	ldr	r0, [fp, #-12]
  11f510:	ebfff867 	bl	11d6b4 <tcp_abort>
  }
}
  11f514:	e320f000 	nop	{0}
  11f518:	e24bd004 	sub	sp, fp, #4
  11f51c:	e8bd8800 	pop	{fp, pc}

0011f520 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
  11f520:	e92d4800 	push	{fp, lr}
  11f524:	e28db004 	add	fp, sp, #4
  11f528:	e24dd010 	sub	sp, sp, #16
  11f52c:	e1a03000 	mov	r3, r0
  11f530:	e54b300d 	strb	r3, [fp, #-13]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  11f534:	e3002612 	movw	r2, #1554	; 0x612
  11f538:	e307141c 	movw	r1, #29724	; 0x741c
  11f53c:	e3401014 	movt	r1, #20
  11f540:	e3a00002 	mov	r0, #2
  11f544:	ebffe60a 	bl	118d74 <memp_malloc_fn>
  11f548:	e50b0008 	str	r0, [fp, #-8]
  if (pcb == NULL) {
  11f54c:	e51b3008 	ldr	r3, [fp, #-8]
  11f550:	e3530000 	cmp	r3, #0
  11f554:	1a000050 	bne	11f69c <tcp_alloc+0x17c>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
  11f558:	ebffffc4 	bl	11f470 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  11f55c:	e3002618 	movw	r2, #1560	; 0x618
  11f560:	e307141c 	movw	r1, #29724	; 0x741c
  11f564:	e3401014 	movt	r1, #20
  11f568:	e3a00002 	mov	r0, #2
  11f56c:	ebffe600 	bl	118d74 <memp_malloc_fn>
  11f570:	e50b0008 	str	r0, [fp, #-8]
    if (pcb == NULL) {
  11f574:	e51b3008 	ldr	r3, [fp, #-8]
  11f578:	e3530000 	cmp	r3, #0
  11f57c:	1a00003c 	bne	11f674 <tcp_alloc+0x154>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
  11f580:	e3a00009 	mov	r0, #9
  11f584:	ebffff79 	bl	11f370 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  11f588:	e300261e 	movw	r2, #1566	; 0x61e
  11f58c:	e307141c 	movw	r1, #29724	; 0x741c
  11f590:	e3401014 	movt	r1, #20
  11f594:	e3a00002 	mov	r0, #2
  11f598:	ebffe5f5 	bl	118d74 <memp_malloc_fn>
  11f59c:	e50b0008 	str	r0, [fp, #-8]
      if (pcb == NULL) {
  11f5a0:	e51b3008 	ldr	r3, [fp, #-8]
  11f5a4:	e3530000 	cmp	r3, #0
  11f5a8:	1a000027 	bne	11f64c <tcp_alloc+0x12c>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
  11f5ac:	e3a00008 	mov	r0, #8
  11f5b0:	ebffff6e 	bl	11f370 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  11f5b4:	e3002624 	movw	r2, #1572	; 0x624
  11f5b8:	e307141c 	movw	r1, #29724	; 0x741c
  11f5bc:	e3401014 	movt	r1, #20
  11f5c0:	e3a00002 	mov	r0, #2
  11f5c4:	ebffe5ea 	bl	118d74 <memp_malloc_fn>
  11f5c8:	e50b0008 	str	r0, [fp, #-8]
        if (pcb == NULL) {
  11f5cc:	e51b3008 	ldr	r3, [fp, #-8]
  11f5d0:	e3530000 	cmp	r3, #0
  11f5d4:	1a000012 	bne	11f624 <tcp_alloc+0x104>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
  11f5d8:	e55b300d 	ldrb	r3, [fp, #-13]
  11f5dc:	e1a00003 	mov	r0, r3
  11f5e0:	ebffff25 	bl	11f27c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  11f5e4:	e300262a 	movw	r2, #1578	; 0x62a
  11f5e8:	e307141c 	movw	r1, #29724	; 0x741c
  11f5ec:	e3401014 	movt	r1, #20
  11f5f0:	e3a00002 	mov	r0, #2
  11f5f4:	ebffe5de 	bl	118d74 <memp_malloc_fn>
  11f5f8:	e50b0008 	str	r0, [fp, #-8]
          if (pcb != NULL) {
  11f5fc:	e51b3008 	ldr	r3, [fp, #-8]
  11f600:	e3530000 	cmp	r3, #0
  11f604:	0a000006 	beq	11f624 <tcp_alloc+0x104>
            /* adjust err stats: memp_malloc failed multiple times before */
            MEMP_STATS_DEC(err, MEMP_TCP_PCB);
  11f608:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  11f60c:	e3403057 	movt	r3, #87	; 0x57
  11f610:	e59330dc 	ldr	r3, [r3, #220]	; 0xdc
  11f614:	e1d320b4 	ldrh	r2, [r3, #4]
  11f618:	e2422001 	sub	r2, r2, #1
  11f61c:	e6ff2072 	uxth	r2, r2
  11f620:	e1c320b4 	strh	r2, [r3, #4]
          }
        }
        if (pcb != NULL) {
  11f624:	e51b3008 	ldr	r3, [fp, #-8]
  11f628:	e3530000 	cmp	r3, #0
  11f62c:	0a000006 	beq	11f64c <tcp_alloc+0x12c>
          /* adjust err stats: memp_malloc failed multiple times before */
          MEMP_STATS_DEC(err, MEMP_TCP_PCB);
  11f630:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  11f634:	e3403057 	movt	r3, #87	; 0x57
  11f638:	e59330dc 	ldr	r3, [r3, #220]	; 0xdc
  11f63c:	e1d320b4 	ldrh	r2, [r3, #4]
  11f640:	e2422001 	sub	r2, r2, #1
  11f644:	e6ff2072 	uxth	r2, r2
  11f648:	e1c320b4 	strh	r2, [r3, #4]
        }
      }
      if (pcb != NULL) {
  11f64c:	e51b3008 	ldr	r3, [fp, #-8]
  11f650:	e3530000 	cmp	r3, #0
  11f654:	0a000006 	beq	11f674 <tcp_alloc+0x154>
        /* adjust err stats: memp_malloc failed multiple times before */
        MEMP_STATS_DEC(err, MEMP_TCP_PCB);
  11f658:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  11f65c:	e3403057 	movt	r3, #87	; 0x57
  11f660:	e59330dc 	ldr	r3, [r3, #220]	; 0xdc
  11f664:	e1d320b4 	ldrh	r2, [r3, #4]
  11f668:	e2422001 	sub	r2, r2, #1
  11f66c:	e6ff2072 	uxth	r2, r2
  11f670:	e1c320b4 	strh	r2, [r3, #4]
      }
    }
    if (pcb != NULL) {
  11f674:	e51b3008 	ldr	r3, [fp, #-8]
  11f678:	e3530000 	cmp	r3, #0
  11f67c:	0a000006 	beq	11f69c <tcp_alloc+0x17c>
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
  11f680:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  11f684:	e3403057 	movt	r3, #87	; 0x57
  11f688:	e59330dc 	ldr	r3, [r3, #220]	; 0xdc
  11f68c:	e1d320b4 	ldrh	r2, [r3, #4]
  11f690:	e2422001 	sub	r2, r2, #1
  11f694:	e6ff2072 	uxth	r2, r2
  11f698:	e1c320b4 	strh	r2, [r3, #4]
    }
  }
  if (pcb != NULL) {
  11f69c:	e51b3008 	ldr	r3, [fp, #-8]
  11f6a0:	e3530000 	cmp	r3, #0
  11f6a4:	0a00003e 	beq	11f7a4 <tcp_alloc+0x284>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
  11f6a8:	e3a020a4 	mov	r2, #164	; 0xa4
  11f6ac:	e3a01000 	mov	r1, #0
  11f6b0:	e51b0008 	ldr	r0, [fp, #-8]
  11f6b4:	eb00848c 	bl	1408ec <memset>
    pcb->prio = prio;
  11f6b8:	e51b3008 	ldr	r3, [fp, #-8]
  11f6bc:	e55b200d 	ldrb	r2, [fp, #-13]
  11f6c0:	e5c32018 	strb	r2, [r3, #24]
    pcb->snd_buf = TCP_SND_BUF;
  11f6c4:	e51b3008 	ldr	r3, [fp, #-8]
  11f6c8:	e3a02a02 	mov	r2, #8192	; 0x2000
  11f6cc:	e1c326b4 	strh	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
  11f6d0:	e51b3008 	ldr	r3, [fp, #-8]
  11f6d4:	e3e02000 	mvn	r2, #0
  11f6d8:	e1c322be 	strh	r2, [r3, #46]	; 0x2e
  11f6dc:	e51b3008 	ldr	r3, [fp, #-8]
  11f6e0:	e1d322be 	ldrh	r2, [r3, #46]	; 0x2e
  11f6e4:	e51b3008 	ldr	r3, [fp, #-8]
  11f6e8:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
    pcb->ttl = TCP_TTL;
  11f6ec:	e51b3008 	ldr	r3, [fp, #-8]
  11f6f0:	e3e02000 	mvn	r2, #0
  11f6f4:	e5c3200a 	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
  11f6f8:	e51b3008 	ldr	r3, [fp, #-8]
  11f6fc:	e3a02f86 	mov	r2, #536	; 0x218
  11f700:	e1c323b6 	strh	r2, [r3, #54]	; 0x36
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
  11f704:	e51b3008 	ldr	r3, [fp, #-8]
  11f708:	e3a02006 	mov	r2, #6
  11f70c:	e1c324b4 	strh	r2, [r3, #68]	; 0x44
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
  11f710:	e51b3008 	ldr	r3, [fp, #-8]
  11f714:	e3a02006 	mov	r2, #6
  11f718:	e1c324b2 	strh	r2, [r3, #66]	; 0x42
    pcb->rtime = -1;
  11f71c:	e51b3008 	ldr	r3, [fp, #-8]
  11f720:	e3e02000 	mvn	r2, #0
  11f724:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
    pcb->cwnd = 1;
  11f728:	e51b3008 	ldr	r3, [fp, #-8]
  11f72c:	e3a02001 	mov	r2, #1
  11f730:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
    pcb->tmr = tcp_ticks;
  11f734:	e30531b4 	movw	r3, #20916	; 0x51b4
  11f738:	e3403057 	movt	r3, #87	; 0x57
  11f73c:	e5932000 	ldr	r2, [r3]
  11f740:	e51b3008 	ldr	r3, [fp, #-8]
  11f744:	e5832024 	str	r2, [r3, #36]	; 0x24
    pcb->last_timer = tcp_timer_ctr;
  11f748:	e30e3211 	movw	r3, #57873	; 0xe211
  11f74c:	e3403014 	movt	r3, #20
  11f750:	e5d32000 	ldrb	r2, [r3]
  11f754:	e51b3008 	ldr	r3, [fp, #-8]
  11f758:	e5c32021 	strb	r2, [r3, #33]	; 0x21
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
  11f75c:	e51b3008 	ldr	r3, [fp, #-8]
  11f760:	e3a02a02 	mov	r2, #8192	; 0x2000
  11f764:	e1c324be 	strh	r2, [r3, #78]	; 0x4e

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
  11f768:	e51b2008 	ldr	r2, [fp, #-8]
  11f76c:	e30f3208 	movw	r3, #61960	; 0xf208
  11f770:	e3403011 	movt	r3, #17
  11f774:	e5823084 	str	r3, [r2, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
  11f778:	e51b2008 	ldr	r2, [fp, #-8]
  11f77c:	e3a03cdd 	mov	r3, #56576	; 0xdd00
  11f780:	e340306d 	movt	r3, #109	; 0x6d
  11f784:	e5823094 	str	r3, [r2, #148]	; 0x94

#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
  11f788:	e51b2008 	ldr	r2, [fp, #-8]
  11f78c:	e30234f8 	movw	r3, #9464	; 0x24f8
  11f790:	e3403001 	movt	r3, #1
  11f794:	e5823098 	str	r3, [r2, #152]	; 0x98
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
  11f798:	e51b3008 	ldr	r3, [fp, #-8]
  11f79c:	e3a02009 	mov	r2, #9
  11f7a0:	e583209c 	str	r2, [r3, #156]	; 0x9c
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
  11f7a4:	e51b3008 	ldr	r3, [fp, #-8]
}
  11f7a8:	e1a00003 	mov	r0, r3
  11f7ac:	e24bd004 	sub	sp, fp, #4
  11f7b0:	e8bd8800 	pop	{fp, pc}

0011f7b4 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
  11f7b4:	e92d4800 	push	{fp, lr}
  11f7b8:	e28db004 	add	fp, sp, #4
  return tcp_alloc(TCP_PRIO_NORMAL);
  11f7bc:	e3a00040 	mov	r0, #64	; 0x40
  11f7c0:	ebffff56 	bl	11f520 <tcp_alloc>
  11f7c4:	e1a03000 	mov	r3, r0
}
  11f7c8:	e1a00003 	mov	r0, r3
  11f7cc:	e8bd8800 	pop	{fp, pc}

0011f7d0 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
  11f7d0:	e92d4800 	push	{fp, lr}
  11f7d4:	e28db004 	add	fp, sp, #4
  11f7d8:	e24dd010 	sub	sp, sp, #16
  11f7dc:	e1a03000 	mov	r3, r0
  11f7e0:	e54b300d 	strb	r3, [fp, #-13]
  struct tcp_pcb * pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
  11f7e4:	e3a00040 	mov	r0, #64	; 0x40
  11f7e8:	ebffff4c 	bl	11f520 <tcp_alloc>
  11f7ec:	e50b0008 	str	r0, [fp, #-8]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
  11f7f0:	e51b3008 	ldr	r3, [fp, #-8]
}
  11f7f4:	e1a00003 	mov	r0, r3
  11f7f8:	e24bd004 	sub	sp, fp, #4
  11f7fc:	e8bd8800 	pop	{fp, pc}

0011f800 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  11f800:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11f804:	e28db000 	add	fp, sp, #0
  11f808:	e24dd00c 	sub	sp, sp, #12
  11f80c:	e50b0008 	str	r0, [fp, #-8]
  11f810:	e50b100c 	str	r1, [fp, #-12]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
  11f814:	e51b3008 	ldr	r3, [fp, #-8]
  11f818:	e3530000 	cmp	r3, #0
  11f81c:	0a000002 	beq	11f82c <tcp_arg+0x2c>
    pcb->callback_arg = arg;
  11f820:	e51b3008 	ldr	r3, [fp, #-8]
  11f824:	e51b200c 	ldr	r2, [fp, #-12]
  11f828:	e5832010 	str	r2, [r3, #16]
  }
}
  11f82c:	e320f000 	nop	{0}
  11f830:	e28bd000 	add	sp, fp, #0
  11f834:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11f838:	e12fff1e 	bx	lr

0011f83c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
  11f83c:	e92d4800 	push	{fp, lr}
  11f840:	e28db004 	add	fp, sp, #4
  11f844:	e24dd008 	sub	sp, sp, #8
  11f848:	e50b0008 	str	r0, [fp, #-8]
  11f84c:	e50b100c 	str	r1, [fp, #-12]
  if (pcb != NULL) {
  11f850:	e51b3008 	ldr	r3, [fp, #-8]
  11f854:	e3530000 	cmp	r3, #0
  11f858:	0a00000d 	beq	11f894 <tcp_recv+0x58>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
  11f85c:	e51b3008 	ldr	r3, [fp, #-8]
  11f860:	e5933014 	ldr	r3, [r3, #20]
  11f864:	e3530001 	cmp	r3, #1
  11f868:	1a000006 	bne	11f888 <tcp_recv+0x4c>
  11f86c:	e3070704 	movw	r0, #30468	; 0x7704
  11f870:	e3400014 	movt	r0, #20
  11f874:	ebff8e26 	bl	103114 <rt_kprintf>
  11f878:	e30016b6 	movw	r1, #1718	; 0x6b6
  11f87c:	e307041c 	movw	r0, #29724	; 0x741c
  11f880:	e3400014 	movt	r0, #20
  11f884:	ebffaca2 	bl	10ab14 <sys_arch_assert>
    pcb->recv = recv;
  11f888:	e51b3008 	ldr	r3, [fp, #-8]
  11f88c:	e51b200c 	ldr	r2, [fp, #-12]
  11f890:	e5832084 	str	r2, [r3, #132]	; 0x84
  }
}
  11f894:	e320f000 	nop	{0}
  11f898:	e24bd004 	sub	sp, fp, #4
  11f89c:	e8bd8800 	pop	{fp, pc}

0011f8a0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
  11f8a0:	e92d4800 	push	{fp, lr}
  11f8a4:	e28db004 	add	fp, sp, #4
  11f8a8:	e24dd008 	sub	sp, sp, #8
  11f8ac:	e50b0008 	str	r0, [fp, #-8]
  11f8b0:	e50b100c 	str	r1, [fp, #-12]
  if (pcb != NULL) {
  11f8b4:	e51b3008 	ldr	r3, [fp, #-8]
  11f8b8:	e3530000 	cmp	r3, #0
  11f8bc:	0a00000d 	beq	11f8f8 <tcp_sent+0x58>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
  11f8c0:	e51b3008 	ldr	r3, [fp, #-8]
  11f8c4:	e5933014 	ldr	r3, [r3, #20]
  11f8c8:	e3530001 	cmp	r3, #1
  11f8cc:	1a000006 	bne	11f8ec <tcp_sent+0x4c>
  11f8d0:	e307072c 	movw	r0, #30508	; 0x772c
  11f8d4:	e3400014 	movt	r0, #20
  11f8d8:	ebff8e0d 	bl	103114 <rt_kprintf>
  11f8dc:	e30016c7 	movw	r1, #1735	; 0x6c7
  11f8e0:	e307041c 	movw	r0, #29724	; 0x741c
  11f8e4:	e3400014 	movt	r0, #20
  11f8e8:	ebffac89 	bl	10ab14 <sys_arch_assert>
    pcb->sent = sent;
  11f8ec:	e51b3008 	ldr	r3, [fp, #-8]
  11f8f0:	e51b200c 	ldr	r2, [fp, #-12]
  11f8f4:	e5832080 	str	r2, [r3, #128]	; 0x80
  }
}
  11f8f8:	e320f000 	nop	{0}
  11f8fc:	e24bd004 	sub	sp, fp, #4
  11f900:	e8bd8800 	pop	{fp, pc}

0011f904 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
  11f904:	e92d4800 	push	{fp, lr}
  11f908:	e28db004 	add	fp, sp, #4
  11f90c:	e24dd008 	sub	sp, sp, #8
  11f910:	e50b0008 	str	r0, [fp, #-8]
  11f914:	e50b100c 	str	r1, [fp, #-12]
  if (pcb != NULL) {
  11f918:	e51b3008 	ldr	r3, [fp, #-8]
  11f91c:	e3530000 	cmp	r3, #0
  11f920:	0a00000d 	beq	11f95c <tcp_err+0x58>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
  11f924:	e51b3008 	ldr	r3, [fp, #-8]
  11f928:	e5933014 	ldr	r3, [r3, #20]
  11f92c:	e3530001 	cmp	r3, #1
  11f930:	1a000006 	bne	11f950 <tcp_err+0x4c>
  11f934:	e3070754 	movw	r0, #30548	; 0x7754
  11f938:	e3400014 	movt	r0, #20
  11f93c:	ebff8df4 	bl	103114 <rt_kprintf>
  11f940:	e30016db 	movw	r1, #1755	; 0x6db
  11f944:	e307041c 	movw	r0, #29724	; 0x741c
  11f948:	e3400014 	movt	r0, #20
  11f94c:	ebffac70 	bl	10ab14 <sys_arch_assert>
    pcb->errf = err;
  11f950:	e51b3008 	ldr	r3, [fp, #-8]
  11f954:	e51b200c 	ldr	r2, [fp, #-12]
  11f958:	e5832090 	str	r2, [r3, #144]	; 0x90
  }
}
  11f95c:	e320f000 	nop	{0}
  11f960:	e24bd004 	sub	sp, fp, #4
  11f964:	e8bd8800 	pop	{fp, pc}

0011f968 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  11f968:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11f96c:	e28db000 	add	fp, sp, #0
  11f970:	e24dd014 	sub	sp, sp, #20
  11f974:	e50b0010 	str	r0, [fp, #-16]
  11f978:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
  11f97c:	e51b3010 	ldr	r3, [fp, #-16]
  11f980:	e3530000 	cmp	r3, #0
  11f984:	0a000008 	beq	11f9ac <tcp_accept+0x44>
  11f988:	e51b3010 	ldr	r3, [fp, #-16]
  11f98c:	e5933014 	ldr	r3, [r3, #20]
  11f990:	e3530001 	cmp	r3, #1
  11f994:	1a000004 	bne	11f9ac <tcp_accept+0x44>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
  11f998:	e51b3010 	ldr	r3, [fp, #-16]
  11f99c:	e50b3008 	str	r3, [fp, #-8]
    lpcb->accept = accept;
  11f9a0:	e51b3008 	ldr	r3, [fp, #-8]
  11f9a4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11f9a8:	e583201c 	str	r2, [r3, #28]
  }
}
  11f9ac:	e320f000 	nop	{0}
  11f9b0:	e28bd000 	add	sp, fp, #0
  11f9b4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11f9b8:	e12fff1e 	bx	lr

0011f9bc <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
  11f9bc:	e92d4800 	push	{fp, lr}
  11f9c0:	e28db004 	add	fp, sp, #4
  11f9c4:	e24dd010 	sub	sp, sp, #16
  11f9c8:	e50b0008 	str	r0, [fp, #-8]
  11f9cc:	e50b100c 	str	r1, [fp, #-12]
  11f9d0:	e1a03002 	mov	r3, r2
  11f9d4:	e54b300d 	strb	r3, [fp, #-13]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
  11f9d8:	e51b3008 	ldr	r3, [fp, #-8]
  11f9dc:	e5933014 	ldr	r3, [r3, #20]
  11f9e0:	e3530001 	cmp	r3, #1
  11f9e4:	1a000006 	bne	11fa04 <tcp_poll+0x48>
  11f9e8:	e307077c 	movw	r0, #30588	; 0x777c
  11f9ec:	e3400014 	movt	r0, #20
  11f9f0:	ebff8dc7 	bl	103114 <rt_kprintf>
  11f9f4:	e30016fe 	movw	r1, #1790	; 0x6fe
  11f9f8:	e307041c 	movw	r0, #29724	; 0x741c
  11f9fc:	e3400014 	movt	r0, #20
  11fa00:	ebffac43 	bl	10ab14 <sys_arch_assert>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
  11fa04:	e51b3008 	ldr	r3, [fp, #-8]
  11fa08:	e51b200c 	ldr	r2, [fp, #-12]
  11fa0c:	e583208c 	str	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
  11fa10:	e51b3008 	ldr	r3, [fp, #-8]
  11fa14:	e55b200d 	ldrb	r2, [fp, #-13]
  11fa18:	e5c32020 	strb	r2, [r3, #32]
}
  11fa1c:	e320f000 	nop	{0}
  11fa20:	e24bd004 	sub	sp, fp, #4
  11fa24:	e8bd8800 	pop	{fp, pc}

0011fa28 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
  11fa28:	e92d4800 	push	{fp, lr}
  11fa2c:	e28db004 	add	fp, sp, #4
  11fa30:	e24dd008 	sub	sp, sp, #8
  11fa34:	e50b0008 	str	r0, [fp, #-8]
  if (pcb->state != CLOSED &&
  11fa38:	e51b3008 	ldr	r3, [fp, #-8]
  11fa3c:	e5933014 	ldr	r3, [r3, #20]
  11fa40:	e3530000 	cmp	r3, #0
  11fa44:	0a00002e 	beq	11fb04 <tcp_pcb_purge+0xdc>
     pcb->state != TIME_WAIT &&
  11fa48:	e51b3008 	ldr	r3, [fp, #-8]
  11fa4c:	e5933014 	ldr	r3, [r3, #20]
  if (pcb->state != CLOSED &&
  11fa50:	e353000a 	cmp	r3, #10
  11fa54:	0a00002a 	beq	11fb04 <tcp_pcb_purge+0xdc>
     pcb->state != LISTEN) {
  11fa58:	e51b3008 	ldr	r3, [fp, #-8]
  11fa5c:	e5933014 	ldr	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
  11fa60:	e3530001 	cmp	r3, #1
  11fa64:	0a000026 	beq	11fb04 <tcp_pcb_purge+0xdc>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
  11fa68:	e51b3008 	ldr	r3, [fp, #-8]
  11fa6c:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11fa70:	e3530000 	cmp	r3, #0
  11fa74:	0a000006 	beq	11fa94 <tcp_pcb_purge+0x6c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
  11fa78:	e51b3008 	ldr	r3, [fp, #-8]
  11fa7c:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11fa80:	e1a00003 	mov	r0, r3
  11fa84:	ebffec30 	bl	11ab4c <pbuf_free>
      pcb->refused_data = NULL;
  11fa88:	e51b3008 	ldr	r3, [fp, #-8]
  11fa8c:	e3a02000 	mov	r2, #0
  11fa90:	e5832078 	str	r2, [r3, #120]	; 0x78
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
  11fa94:	e51b3008 	ldr	r3, [fp, #-8]
  11fa98:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  11fa9c:	e1a00003 	mov	r0, r3
  11faa0:	ebfffd89 	bl	11f0cc <tcp_segs_free>
    pcb->ooseq = NULL;
  11faa4:	e51b3008 	ldr	r3, [fp, #-8]
  11faa8:	e3a02000 	mov	r2, #0
  11faac:	e5832074 	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
  11fab0:	e51b3008 	ldr	r3, [fp, #-8]
  11fab4:	e3e02000 	mvn	r2, #0
  11fab8:	e1c323b4 	strh	r2, [r3, #52]	; 0x34

    tcp_segs_free(pcb->unsent);
  11fabc:	e51b3008 	ldr	r3, [fp, #-8]
  11fac0:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  11fac4:	e1a00003 	mov	r0, r3
  11fac8:	ebfffd7f 	bl	11f0cc <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
  11facc:	e51b3008 	ldr	r3, [fp, #-8]
  11fad0:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  11fad4:	e1a00003 	mov	r0, r3
  11fad8:	ebfffd7b 	bl	11f0cc <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
  11fadc:	e51b3008 	ldr	r3, [fp, #-8]
  11fae0:	e3a02000 	mov	r2, #0
  11fae4:	e583206c 	str	r2, [r3, #108]	; 0x6c
  11fae8:	e51b3008 	ldr	r3, [fp, #-8]
  11faec:	e593206c 	ldr	r2, [r3, #108]	; 0x6c
  11faf0:	e51b3008 	ldr	r3, [fp, #-8]
  11faf4:	e5832070 	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
  11faf8:	e51b3008 	ldr	r3, [fp, #-8]
  11fafc:	e3a02000 	mov	r2, #0
  11fb00:	e1c326b8 	strh	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
  11fb04:	e320f000 	nop	{0}
  11fb08:	e24bd004 	sub	sp, fp, #4
  11fb0c:	e8bd8800 	pop	{fp, pc}

0011fb10 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
  11fb10:	e92d4800 	push	{fp, lr}
  11fb14:	e28db004 	add	fp, sp, #4
  11fb18:	e24dd010 	sub	sp, sp, #16
  11fb1c:	e50b0010 	str	r0, [fp, #-16]
  11fb20:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  TCP_RMV(pcblist, pcb);
  11fb24:	e51b3010 	ldr	r3, [fp, #-16]
  11fb28:	e5933000 	ldr	r3, [r3]
  11fb2c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11fb30:	e1520003 	cmp	r2, r3
  11fb34:	1a000005 	bne	11fb50 <tcp_pcb_remove+0x40>
  11fb38:	e51b3010 	ldr	r3, [fp, #-16]
  11fb3c:	e5933000 	ldr	r3, [r3]
  11fb40:	e593200c 	ldr	r2, [r3, #12]
  11fb44:	e51b3010 	ldr	r3, [fp, #-16]
  11fb48:	e5832000 	str	r2, [r3]
  11fb4c:	ea000013 	b	11fba0 <tcp_pcb_remove+0x90>
  11fb50:	e51b3010 	ldr	r3, [fp, #-16]
  11fb54:	e5933000 	ldr	r3, [r3]
  11fb58:	e50b3008 	str	r3, [fp, #-8]
  11fb5c:	ea00000c 	b	11fb94 <tcp_pcb_remove+0x84>
  11fb60:	e51b3008 	ldr	r3, [fp, #-8]
  11fb64:	e593300c 	ldr	r3, [r3, #12]
  11fb68:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11fb6c:	e1520003 	cmp	r2, r3
  11fb70:	1a000004 	bne	11fb88 <tcp_pcb_remove+0x78>
  11fb74:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fb78:	e593200c 	ldr	r2, [r3, #12]
  11fb7c:	e51b3008 	ldr	r3, [fp, #-8]
  11fb80:	e583200c 	str	r2, [r3, #12]
  11fb84:	ea000005 	b	11fba0 <tcp_pcb_remove+0x90>
  11fb88:	e51b3008 	ldr	r3, [fp, #-8]
  11fb8c:	e593300c 	ldr	r3, [r3, #12]
  11fb90:	e50b3008 	str	r3, [fp, #-8]
  11fb94:	e51b3008 	ldr	r3, [fp, #-8]
  11fb98:	e3530000 	cmp	r3, #0
  11fb9c:	1affffef 	bne	11fb60 <tcp_pcb_remove+0x50>
  11fba0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fba4:	e3a02000 	mov	r2, #0
  11fba8:	e583200c 	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
  11fbac:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  11fbb0:	ebffff9c 	bl	11fa28 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
  11fbb4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fbb8:	e5933014 	ldr	r3, [r3, #20]
  11fbbc:	e353000a 	cmp	r3, #10
  11fbc0:	0a000010 	beq	11fc08 <tcp_pcb_remove+0xf8>
     pcb->state != LISTEN &&
  11fbc4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fbc8:	e5933014 	ldr	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
  11fbcc:	e3530001 	cmp	r3, #1
  11fbd0:	0a00000c 	beq	11fc08 <tcp_pcb_remove+0xf8>
     pcb->flags & TF_ACK_DELAY) {
  11fbd4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fbd8:	e5d3301e 	ldrb	r3, [r3, #30]
  11fbdc:	e2033001 	and	r3, r3, #1
     pcb->state != LISTEN &&
  11fbe0:	e3530000 	cmp	r3, #0
  11fbe4:	0a000007 	beq	11fc08 <tcp_pcb_remove+0xf8>
    pcb->flags |= TF_ACK_NOW;
  11fbe8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fbec:	e5d3301e 	ldrb	r3, [r3, #30]
  11fbf0:	e3833002 	orr	r3, r3, #2
  11fbf4:	e6ef2073 	uxtb	r2, r3
  11fbf8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fbfc:	e5c3201e 	strb	r2, [r3, #30]
    tcp_output(pcb);
  11fc00:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  11fc04:	eb0017fa 	bl	125bf4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
  11fc08:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fc0c:	e5933014 	ldr	r3, [r3, #20]
  11fc10:	e3530001 	cmp	r3, #1
  11fc14:	0a000020 	beq	11fc9c <tcp_pcb_remove+0x18c>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
  11fc18:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fc1c:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  11fc20:	e3530000 	cmp	r3, #0
  11fc24:	0a000006 	beq	11fc44 <tcp_pcb_remove+0x134>
  11fc28:	e307079c 	movw	r0, #30620	; 0x779c
  11fc2c:	e3400014 	movt	r0, #20
  11fc30:	ebff8d37 	bl	103114 <rt_kprintf>
  11fc34:	e300174e 	movw	r1, #1870	; 0x74e
  11fc38:	e307041c 	movw	r0, #29724	; 0x741c
  11fc3c:	e3400014 	movt	r0, #20
  11fc40:	ebffabb3 	bl	10ab14 <sys_arch_assert>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
  11fc44:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fc48:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  11fc4c:	e3530000 	cmp	r3, #0
  11fc50:	0a000006 	beq	11fc70 <tcp_pcb_remove+0x160>
  11fc54:	e30707b4 	movw	r0, #30644	; 0x77b4
  11fc58:	e3400014 	movt	r0, #20
  11fc5c:	ebff8d2c 	bl	103114 <rt_kprintf>
  11fc60:	e300174f 	movw	r1, #1871	; 0x74f
  11fc64:	e307041c 	movw	r0, #29724	; 0x741c
  11fc68:	e3400014 	movt	r0, #20
  11fc6c:	ebffaba8 	bl	10ab14 <sys_arch_assert>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
  11fc70:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fc74:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  11fc78:	e3530000 	cmp	r3, #0
  11fc7c:	0a000006 	beq	11fc9c <tcp_pcb_remove+0x18c>
  11fc80:	e30707d0 	movw	r0, #30672	; 0x77d0
  11fc84:	e3400014 	movt	r0, #20
  11fc88:	ebff8d21 	bl	103114 <rt_kprintf>
  11fc8c:	e3001751 	movw	r1, #1873	; 0x751
  11fc90:	e307041c 	movw	r0, #29724	; 0x741c
  11fc94:	e3400014 	movt	r0, #20
  11fc98:	ebffab9d 	bl	10ab14 <sys_arch_assert>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
  11fc9c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fca0:	e3a02000 	mov	r2, #0
  11fca4:	e5832014 	str	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
  11fca8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fcac:	e3a02000 	mov	r2, #0
  11fcb0:	e1c321ba 	strh	r2, [r3, #26]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
  11fcb4:	e320f000 	nop	{0}
  11fcb8:	e24bd004 	sub	sp, fp, #4
  11fcbc:	e8bd8800 	pop	{fp, pc}

0011fcc0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
  11fcc0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11fcc4:	e28db000 	add	fp, sp, #0
  11fcc8:	e24dd00c 	sub	sp, sp, #12
  11fccc:	e50b0008 	str	r0, [fp, #-8]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
  11fcd0:	e30d302c 	movw	r3, #53292	; 0xd02c
  11fcd4:	e3403014 	movt	r3, #20
  11fcd8:	e5932000 	ldr	r2, [r3]
  11fcdc:	e30531b4 	movw	r3, #20916	; 0x51b4
  11fce0:	e3403057 	movt	r3, #87	; 0x57
  11fce4:	e5933000 	ldr	r3, [r3]
  11fce8:	e0822003 	add	r2, r2, r3
  11fcec:	e30d302c 	movw	r3, #53292	; 0xd02c
  11fcf0:	e3403014 	movt	r3, #20
  11fcf4:	e5832000 	str	r2, [r3]
  return iss;
  11fcf8:	e30d302c 	movw	r3, #53292	; 0xd02c
  11fcfc:	e3403014 	movt	r3, #20
  11fd00:	e5933000 	ldr	r3, [r3]
#endif /* LWIP_HOOK_TCP_ISN */
}
  11fd04:	e1a00003 	mov	r0, r3
  11fd08:	e28bd000 	add	sp, fp, #0
  11fd0c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11fd10:	e12fff1e 	bx	lr

0011fd14 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
  11fd14:	e92d4800 	push	{fp, lr}
  11fd18:	e28db004 	add	fp, sp, #4
  11fd1c:	e24dd010 	sub	sp, sp, #16
  11fd20:	e1a03000 	mov	r3, r0
  11fd24:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  11fd28:	e14b30be 	strh	r3, [fp, #-14]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
  11fd2c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  11fd30:	eb004401 	bl	130d3c <ip4_route>
  11fd34:	e50b0008 	str	r0, [fp, #-8]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
  11fd38:	e51b3008 	ldr	r3, [fp, #-8]
  11fd3c:	e3530000 	cmp	r3, #0
  11fd40:	1a000001 	bne	11fd4c <tcp_eff_send_mss_impl+0x38>
      return sendmss;
  11fd44:	e15b30be 	ldrh	r3, [fp, #-14]
  11fd48:	ea00000f 	b	11fd8c <tcp_eff_send_mss_impl+0x78>
    }
    mtu = outif->mtu;
  11fd4c:	e51b3008 	ldr	r3, [fp, #-8]
  11fd50:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  11fd54:	e14b30ba 	strh	r3, [fp, #-10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
  11fd58:	e15b30fa 	ldrsh	r3, [fp, #-10]
  11fd5c:	e3530000 	cmp	r3, #0
  11fd60:	0a000008 	beq	11fd88 <tcp_eff_send_mss_impl+0x74>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
  11fd64:	e15b30ba 	ldrh	r3, [fp, #-10]
  11fd68:	e2433028 	sub	r3, r3, #40	; 0x28
  11fd6c:	e14b30bc 	strh	r3, [fp, #-12]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
  11fd70:	e15b20bc 	ldrh	r2, [fp, #-12]
  11fd74:	e15b30be 	ldrh	r3, [fp, #-14]
  11fd78:	e1520003 	cmp	r2, r3
  11fd7c:	31a03002 	movcc	r3, r2
  11fd80:	21a03003 	movcs	r3, r3
  11fd84:	e14b30be 	strh	r3, [fp, #-14]
  }
  return sendmss;
  11fd88:	e15b30be 	ldrh	r3, [fp, #-14]
}
  11fd8c:	e1a00003 	mov	r0, r3
  11fd90:	e24bd004 	sub	sp, fp, #4
  11fd94:	e8bd8800 	pop	{fp, pc}

0011fd98 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
  11fd98:	e92d4800 	push	{fp, lr}
  11fd9c:	e28db004 	add	fp, sp, #4
  11fda0:	e24dd010 	sub	sp, sp, #16
  11fda4:	e50b0010 	str	r0, [fp, #-16]
  11fda8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct tcp_pcb *pcb;
  pcb = pcb_list;
  11fdac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fdb0:	e50b3008 	str	r3, [fp, #-8]
  while (pcb != NULL) {
  11fdb4:	ea000010 	b	11fdfc <tcp_netif_ip_addr_changed_pcblist+0x64>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
  11fdb8:	e51b3008 	ldr	r3, [fp, #-8]
  11fdbc:	e5932000 	ldr	r2, [r3]
  11fdc0:	e51b3010 	ldr	r3, [fp, #-16]
  11fdc4:	e5933000 	ldr	r3, [r3]
  11fdc8:	e1520003 	cmp	r2, r3
  11fdcc:	1a000007 	bne	11fdf0 <tcp_netif_ip_addr_changed_pcblist+0x58>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
  11fdd0:	e51b3008 	ldr	r3, [fp, #-8]
  11fdd4:	e593300c 	ldr	r3, [r3, #12]
  11fdd8:	e50b300c 	str	r3, [fp, #-12]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
  11fddc:	e51b0008 	ldr	r0, [fp, #-8]
  11fde0:	ebfff633 	bl	11d6b4 <tcp_abort>
      pcb = next;
  11fde4:	e51b300c 	ldr	r3, [fp, #-12]
  11fde8:	e50b3008 	str	r3, [fp, #-8]
  11fdec:	ea000002 	b	11fdfc <tcp_netif_ip_addr_changed_pcblist+0x64>
    } else {
      pcb = pcb->next;
  11fdf0:	e51b3008 	ldr	r3, [fp, #-8]
  11fdf4:	e593300c 	ldr	r3, [r3, #12]
  11fdf8:	e50b3008 	str	r3, [fp, #-8]
  while (pcb != NULL) {
  11fdfc:	e51b3008 	ldr	r3, [fp, #-8]
  11fe00:	e3530000 	cmp	r3, #0
  11fe04:	1affffeb 	bne	11fdb8 <tcp_netif_ip_addr_changed_pcblist+0x20>
    }
  }
}
  11fe08:	e320f000 	nop	{0}
  11fe0c:	e24bd004 	sub	sp, fp, #4
  11fe10:	e8bd8800 	pop	{fp, pc}

0011fe14 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
  11fe14:	e92d4800 	push	{fp, lr}
  11fe18:	e28db004 	add	fp, sp, #4
  11fe1c:	e24dd010 	sub	sp, sp, #16
  11fe20:	e50b0010 	str	r0, [fp, #-16]
  11fe24:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
  11fe28:	e51b3010 	ldr	r3, [fp, #-16]
  11fe2c:	e3530000 	cmp	r3, #0
  11fe30:	0a00002d 	beq	11feec <tcp_netif_ip_addr_changed+0xd8>
  11fe34:	e51b3010 	ldr	r3, [fp, #-16]
  11fe38:	e5933000 	ldr	r3, [r3]
  11fe3c:	e3530000 	cmp	r3, #0
  11fe40:	0a000029 	beq	11feec <tcp_netif_ip_addr_changed+0xd8>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
  11fe44:	e30531b0 	movw	r3, #20912	; 0x51b0
  11fe48:	e3403057 	movt	r3, #87	; 0x57
  11fe4c:	e5933000 	ldr	r3, [r3]
  11fe50:	e1a01003 	mov	r1, r3
  11fe54:	e51b0010 	ldr	r0, [fp, #-16]
  11fe58:	ebffffce 	bl	11fd98 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
  11fe5c:	e30531bc 	movw	r3, #20924	; 0x51bc
  11fe60:	e3403057 	movt	r3, #87	; 0x57
  11fe64:	e5933000 	ldr	r3, [r3]
  11fe68:	e1a01003 	mov	r1, r3
  11fe6c:	e51b0010 	ldr	r0, [fp, #-16]
  11fe70:	ebffffc8 	bl	11fd98 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
  11fe74:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fe78:	e3530000 	cmp	r3, #0
  11fe7c:	0a00001a 	beq	11feec <tcp_netif_ip_addr_changed+0xd8>
  11fe80:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fe84:	e5933000 	ldr	r3, [r3]
  11fe88:	e3530000 	cmp	r3, #0
  11fe8c:	0a000016 	beq	11feec <tcp_netif_ip_addr_changed+0xd8>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
  11fe90:	e30531b8 	movw	r3, #20920	; 0x51b8
  11fe94:	e3403057 	movt	r3, #87	; 0x57
  11fe98:	e5933000 	ldr	r3, [r3]
  11fe9c:	e50b3008 	str	r3, [fp, #-8]
  11fea0:	ea00000e 	b	11fee0 <tcp_netif_ip_addr_changed+0xcc>
        next = lpcb->next;
  11fea4:	e51b3008 	ldr	r3, [fp, #-8]
  11fea8:	e593300c 	ldr	r3, [r3, #12]
  11feac:	e50b300c 	str	r3, [fp, #-12]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
  11feb0:	e51b3008 	ldr	r3, [fp, #-8]
  11feb4:	e5932000 	ldr	r2, [r3]
  11feb8:	e51b3010 	ldr	r3, [fp, #-16]
  11febc:	e5933000 	ldr	r3, [r3]
  11fec0:	e1520003 	cmp	r2, r3
  11fec4:	1a000003 	bne	11fed8 <tcp_netif_ip_addr_changed+0xc4>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
  11fec8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fecc:	e5932000 	ldr	r2, [r3]
  11fed0:	e51b3008 	ldr	r3, [fp, #-8]
  11fed4:	e5832000 	str	r2, [r3]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
  11fed8:	e51b300c 	ldr	r3, [fp, #-12]
  11fedc:	e50b3008 	str	r3, [fp, #-8]
  11fee0:	e51b3008 	ldr	r3, [fp, #-8]
  11fee4:	e3530000 	cmp	r3, #0
  11fee8:	1affffed 	bne	11fea4 <tcp_netif_ip_addr_changed+0x90>
        }
      }
    }
  }
}
  11feec:	e320f000 	nop	{0}
  11fef0:	e24bd004 	sub	sp, fp, #4
  11fef4:	e8bd8800 	pop	{fp, pc}

0011fef8 <tcp_debug_state_str>:

const char*
tcp_debug_state_str(enum tcp_state s)
{
  11fef8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11fefc:	e28db000 	add	fp, sp, #0
  11ff00:	e24dd00c 	sub	sp, sp, #12
  11ff04:	e50b0008 	str	r0, [fp, #-8]
  return tcp_state_str[s];
  11ff08:	e30733bc 	movw	r3, #29628	; 0x73bc
  11ff0c:	e3403014 	movt	r3, #20
  11ff10:	e51b2008 	ldr	r2, [fp, #-8]
  11ff14:	e7933102 	ldr	r3, [r3, r2, lsl #2]
}
  11ff18:	e1a00003 	mov	r0, r3
  11ff1c:	e28bd000 	add	sp, fp, #0
  11ff20:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11ff24:	e12fff1e 	bx	lr

0011ff28 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
  11ff28:	e92d4810 	push	{r4, fp, lr}
  11ff2c:	e28db008 	add	fp, sp, #8
  11ff30:	e24dd034 	sub	sp, sp, #52	; 0x34
  11ff34:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  11ff38:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  struct tcp_pcb *pcb, *prev;
  struct tcp_pcb_listen *lpcb;
#if SO_REUSE
  struct tcp_pcb *lpcb_prev = NULL;
  11ff3c:	e3a03000 	mov	r3, #0
  11ff40:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  struct tcp_pcb_listen *lpcb_any = NULL;
  11ff44:	e3a03000 	mov	r3, #0
  11ff48:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0

  LWIP_UNUSED_ARG(inp);

  PERF_START;

  TCP_STATS_INC(tcp.recv);
  11ff4c:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  11ff50:	e3403057 	movt	r3, #87	; 0x57
  11ff54:	e1d33abe 	ldrh	r3, [r3, #174]	; 0xae
  11ff58:	e2833001 	add	r3, r3, #1
  11ff5c:	e6ff2073 	uxth	r2, r3
  11ff60:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  11ff64:	e3403057 	movt	r3, #87	; 0x57
  11ff68:	e1c32abe 	strh	r2, [r3, #174]	; 0xae
  MIB2_STATS_INC(mib2.tcpinsegs);
  11ff6c:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  11ff70:	e3403057 	movt	r3, #87	; 0x57
  11ff74:	e5933184 	ldr	r3, [r3, #388]	; 0x184
  11ff78:	e2832001 	add	r2, r3, #1
  11ff7c:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  11ff80:	e3403057 	movt	r3, #87	; 0x57
  11ff84:	e5832184 	str	r2, [r3, #388]	; 0x184

  tcphdr = (struct tcp_hdr *)p->payload;
  11ff88:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  11ff8c:	e5932004 	ldr	r2, [r3, #4]
  11ff90:	e30e3224 	movw	r3, #57892	; 0xe224
  11ff94:	e3403014 	movt	r3, #20
  11ff98:	e5832000 	str	r2, [r3]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
  11ff9c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  11ffa0:	e1d330ba 	ldrh	r3, [r3, #10]
  11ffa4:	e3530013 	cmp	r3, #19
  11ffa8:	8a000008 	bhi	11ffd0 <tcp_input+0xa8>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet (%"U16_F" bytes) discarded\n", p->tot_len));
    TCP_STATS_INC(tcp.lenerr);
  11ffac:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  11ffb0:	e3403057 	movt	r3, #87	; 0x57
  11ffb4:	e1d33bb6 	ldrh	r3, [r3, #182]	; 0xb6
  11ffb8:	e2833001 	add	r3, r3, #1
  11ffbc:	e6ff2073 	uxth	r2, r3
  11ffc0:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  11ffc4:	e3403057 	movt	r3, #87	; 0x57
  11ffc8:	e1c32bb6 	strh	r2, [r3, #182]	; 0xb6
    goto dropped;
  11ffcc:	ea0003d2 	b	120f1c <tcp_input+0xff4>
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
  11ffd0:	e30e3d68 	movw	r3, #60776	; 0xed68
  11ffd4:	e3403014 	movt	r3, #20
  11ffd8:	e5932014 	ldr	r2, [r3, #20]
  11ffdc:	e30e3d68 	movw	r3, #60776	; 0xed68
  11ffe0:	e3403014 	movt	r3, #20
  11ffe4:	e5933000 	ldr	r3, [r3]
  11ffe8:	e1a01003 	mov	r1, r3
  11ffec:	e1a00002 	mov	r0, r2
  11fff0:	eb004830 	bl	1320b8 <ip4_addr_isbroadcast_u32>
  11fff4:	e1a03000 	mov	r3, r0
  11fff8:	e3530000 	cmp	r3, #0
  11fffc:	1a000005 	bne	120018 <tcp_input+0xf0>
      ip_addr_ismulticast(ip_current_dest_addr())) {
  120000:	e30e3d68 	movw	r3, #60776	; 0xed68
  120004:	e3403014 	movt	r3, #20
  120008:	e5933014 	ldr	r3, [r3, #20]
  12000c:	e20330f0 	and	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
  120010:	e35300e0 	cmp	r3, #224	; 0xe0
  120014:	1a000008 	bne	12003c <tcp_input+0x114>
    TCP_STATS_INC(tcp.proterr);
  120018:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12001c:	e3403057 	movt	r3, #87	; 0x57
  120020:	e1d33bbc 	ldrh	r3, [r3, #188]	; 0xbc
  120024:	e2833001 	add	r3, r3, #1
  120028:	e6ff2073 	uxth	r2, r3
  12002c:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  120030:	e3403057 	movt	r3, #87	; 0x57
  120034:	e1c32bbc 	strh	r2, [r3, #188]	; 0xbc
    goto dropped;
  120038:	ea0003b7 	b	120f1c <tcp_input+0xff4>
  }

#if CHECKSUM_CHECK_TCP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_TCP) {
    /* Verify TCP checksum. */
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  12003c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120040:	e1d320b8 	ldrh	r2, [r3, #8]
  120044:	e59f3f24 	ldr	r3, [pc, #3876]	; 120f70 <tcp_input+0x1048>
  120048:	e58d3000 	str	r3, [sp]
  12004c:	e59f3f20 	ldr	r3, [pc, #3872]	; 120f74 <tcp_input+0x104c>
  120050:	e3a01006 	mov	r1, #6
  120054:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  120058:	ebffe0a3 	bl	1182ec <ip_chksum_pseudo>
  12005c:	e1a03000 	mov	r3, r0
  120060:	e14b32b4 	strh	r3, [fp, #-36]	; 0xffffffdc
                               ip_current_src_addr(), ip_current_dest_addr());
    if (chksum != 0) {
  120064:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  120068:	e3530000 	cmp	r3, #0
  12006c:	0a000008 	beq	120094 <tcp_input+0x16c>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packet discarded due to failing checksum 0x%04"X16_F"\n",
          chksum));
      tcp_debug_print(tcphdr);
      TCP_STATS_INC(tcp.chkerr);
  120070:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  120074:	e3403057 	movt	r3, #87	; 0x57
  120078:	e1d33bb4 	ldrh	r3, [r3, #180]	; 0xb4
  12007c:	e2833001 	add	r3, r3, #1
  120080:	e6ff2073 	uxth	r2, r3
  120084:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  120088:	e3403057 	movt	r3, #87	; 0x57
  12008c:	e1c32bb4 	strh	r2, [r3, #180]	; 0xb4
      goto dropped;
  120090:	ea0003a1 	b	120f1c <tcp_input+0xff4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
  120094:	e30e3224 	movw	r3, #57892	; 0xe224
  120098:	e3403014 	movt	r3, #20
  12009c:	e5933000 	ldr	r3, [r3]
  1200a0:	e1d330bc 	ldrh	r3, [r3, #12]
  1200a4:	e6ff3073 	uxth	r3, r3
  1200a8:	e1a00003 	mov	r0, r3
  1200ac:	ebffd86f 	bl	116270 <lwip_htons>
  1200b0:	e1a03000 	mov	r3, r0
  1200b4:	e1a03623 	lsr	r3, r3, #12
  1200b8:	e6ff3073 	uxth	r3, r3
  1200bc:	e6ef3073 	uxtb	r3, r3
  1200c0:	e1a03103 	lsl	r3, r3, #2
  1200c4:	e54b3025 	strb	r3, [fp, #-37]	; 0xffffffdb
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
  1200c8:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  1200cc:	e3530013 	cmp	r3, #19
  1200d0:	9a000005 	bls	1200ec <tcp_input+0x1c4>
  1200d4:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  1200d8:	e6ff2073 	uxth	r2, r3
  1200dc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1200e0:	e1d330b8 	ldrh	r3, [r3, #8]
  1200e4:	e1520003 	cmp	r2, r3
  1200e8:	9a000008 	bls	120110 <tcp_input+0x1e8>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: invalid header length (%"U16_F")\n", (u16_t)hdrlen_bytes));
    TCP_STATS_INC(tcp.lenerr);
  1200ec:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  1200f0:	e3403057 	movt	r3, #87	; 0x57
  1200f4:	e1d33bb6 	ldrh	r3, [r3, #182]	; 0xb6
  1200f8:	e2833001 	add	r3, r3, #1
  1200fc:	e6ff2073 	uxth	r2, r3
  120100:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  120104:	e3403057 	movt	r3, #87	; 0x57
  120108:	e1c32bb6 	strh	r2, [r3, #182]	; 0xb6
    goto dropped;
  12010c:	ea000382 	b	120f1c <tcp_input+0xff4>
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
  120110:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  120114:	e6ff3073 	uxth	r3, r3
  120118:	e2433014 	sub	r3, r3, #20
  12011c:	e6ff2073 	uxth	r2, r3
  120120:	e30e3228 	movw	r3, #57896	; 0xe228
  120124:	e3403014 	movt	r3, #20
  120128:	e1c320b0 	strh	r2, [r3]
  tcphdr_opt2 = NULL;
  12012c:	e30e322c 	movw	r3, #57900	; 0xe22c
  120130:	e3403014 	movt	r3, #20
  120134:	e3a02000 	mov	r2, #0
  120138:	e5832000 	str	r2, [r3]
  if (p->len >= hdrlen_bytes) {
  12013c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120140:	e1d320ba 	ldrh	r2, [r3, #10]
  120144:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  120148:	e6ff3073 	uxth	r3, r3
  12014c:	e1520003 	cmp	r2, r3
  120150:	3a00000e 	bcc	120190 <tcp_input+0x268>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
  120154:	e30e3228 	movw	r3, #57896	; 0xe228
  120158:	e3403014 	movt	r3, #20
  12015c:	e1d320b0 	ldrh	r2, [r3]
  120160:	e30e322a 	movw	r3, #57898	; 0xe22a
  120164:	e3403014 	movt	r3, #20
  120168:	e1c320b0 	strh	r2, [r3]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
  12016c:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  120170:	e6ff3073 	uxth	r3, r3
  120174:	e2633000 	rsb	r3, r3, #0
  120178:	e6ff3073 	uxth	r3, r3
  12017c:	e6bf3073 	sxth	r3, r3
  120180:	e1a01003 	mov	r1, r3
  120184:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  120188:	ebffea51 	bl	11aad4 <pbuf_header>
  12018c:	ea000061 	b	120318 <tcp_input+0x3f0>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
  120190:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120194:	e5933000 	ldr	r3, [r3]
  120198:	e3530000 	cmp	r3, #0
  12019c:	1a000006 	bne	1201bc <tcp_input+0x294>
  1201a0:	e30707e8 	movw	r0, #30696	; 0x77e8
  1201a4:	e3400014 	movt	r0, #20
  1201a8:	ebff8bd9 	bl	103114 <rt_kprintf>
  1201ac:	e3a010b0 	mov	r1, #176	; 0xb0
  1201b0:	e30707f8 	movw	r0, #30712	; 0x77f8
  1201b4:	e3400014 	movt	r0, #20
  1201b8:	ebffaa55 	bl	10ab14 <sys_arch_assert>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
  1201bc:	e3e01013 	mvn	r1, #19
  1201c0:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  1201c4:	ebffea42 	bl	11aad4 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
  1201c8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1201cc:	e1d320ba 	ldrh	r2, [r3, #10]
  1201d0:	e30e322a 	movw	r3, #57898	; 0xe22a
  1201d4:	e3403014 	movt	r3, #20
  1201d8:	e1c320b0 	strh	r2, [r3]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
  1201dc:	e30e3228 	movw	r3, #57896	; 0xe228
  1201e0:	e3403014 	movt	r3, #20
  1201e4:	e1d320b0 	ldrh	r2, [r3]
  1201e8:	e30e322a 	movw	r3, #57898	; 0xe22a
  1201ec:	e3403014 	movt	r3, #20
  1201f0:	e1d330b0 	ldrh	r3, [r3]
  1201f4:	e0423003 	sub	r3, r2, r3
  1201f8:	e14b32b8 	strh	r3, [fp, #-40]	; 0xffffffd8

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
  1201fc:	e30e322a 	movw	r3, #57898	; 0xe22a
  120200:	e3403014 	movt	r3, #20
  120204:	e1d330b0 	ldrh	r3, [r3]
  120208:	e2633000 	rsb	r3, r3, #0
  12020c:	e6ff3073 	uxth	r3, r3
  120210:	e6bf3073 	sxth	r3, r3
  120214:	e1a01003 	mov	r1, r3
  120218:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  12021c:	ebffea2c 	bl	11aad4 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
  120220:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120224:	e5933000 	ldr	r3, [r3]
  120228:	e1d330ba 	ldrh	r3, [r3, #10]
  12022c:	e15b22b8 	ldrh	r2, [fp, #-40]	; 0xffffffd8
  120230:	e1520003 	cmp	r2, r3
  120234:	9a000008 	bls	12025c <tcp_input+0x334>
      /* drop short packets */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: options overflow second pbuf (%"U16_F" bytes)\n", p->next->len));
      TCP_STATS_INC(tcp.lenerr);
  120238:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12023c:	e3403057 	movt	r3, #87	; 0x57
  120240:	e1d33bb6 	ldrh	r3, [r3, #182]	; 0xb6
  120244:	e2833001 	add	r3, r3, #1
  120248:	e6ff2073 	uxth	r2, r3
  12024c:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  120250:	e3403057 	movt	r3, #87	; 0x57
  120254:	e1c32bb6 	strh	r2, [r3, #182]	; 0xb6
      goto dropped;
  120258:	ea00032f 	b	120f1c <tcp_input+0xff4>
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
  12025c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120260:	e5933000 	ldr	r3, [r3]
  120264:	e5932004 	ldr	r2, [r3, #4]
  120268:	e30e322c 	movw	r3, #57900	; 0xe22c
  12026c:	e3403014 	movt	r3, #20
  120270:	e5832000 	str	r2, [r3]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
  120274:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120278:	e5932000 	ldr	r2, [r3]
  12027c:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  120280:	e2633000 	rsb	r3, r3, #0
  120284:	e6ff3073 	uxth	r3, r3
  120288:	e6bf3073 	sxth	r3, r3
  12028c:	e1a01003 	mov	r1, r3
  120290:	e1a00002 	mov	r0, r2
  120294:	ebffea0e 	bl	11aad4 <pbuf_header>
    p->tot_len -= opt2len;
  120298:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12029c:	e1d320b8 	ldrh	r2, [r3, #8]
  1202a0:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  1202a4:	e0423003 	sub	r3, r2, r3
  1202a8:	e6ff2073 	uxth	r2, r3
  1202ac:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1202b0:	e1c320b8 	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
  1202b4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1202b8:	e1d330ba 	ldrh	r3, [r3, #10]
  1202bc:	e3530000 	cmp	r3, #0
  1202c0:	0a000006 	beq	1202e0 <tcp_input+0x3b8>
  1202c4:	e3070828 	movw	r0, #30760	; 0x7828
  1202c8:	e3400014 	movt	r0, #20
  1202cc:	ebff8b90 	bl	103114 <rt_kprintf>
  1202d0:	e3a010cd 	mov	r1, #205	; 0xcd
  1202d4:	e30707f8 	movw	r0, #30712	; 0x77f8
  1202d8:	e3400014 	movt	r0, #20
  1202dc:	ebffaa0c 	bl	10ab14 <sys_arch_assert>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
  1202e0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1202e4:	e1d320b8 	ldrh	r2, [r3, #8]
  1202e8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1202ec:	e5933000 	ldr	r3, [r3]
  1202f0:	e1d330b8 	ldrh	r3, [r3, #8]
  1202f4:	e1520003 	cmp	r2, r3
  1202f8:	0a000006 	beq	120318 <tcp_input+0x3f0>
  1202fc:	e3070834 	movw	r0, #30772	; 0x7834
  120300:	e3400014 	movt	r0, #20
  120304:	ebff8b82 	bl	103114 <rt_kprintf>
  120308:	e3a010ce 	mov	r1, #206	; 0xce
  12030c:	e30707f8 	movw	r0, #30712	; 0x77f8
  120310:	e3400014 	movt	r0, #20
  120314:	ebffa9fe 	bl	10ab14 <sys_arch_assert>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
  120318:	e30e3224 	movw	r3, #57892	; 0xe224
  12031c:	e3403014 	movt	r3, #20
  120320:	e5933000 	ldr	r3, [r3]
  120324:	e1d330b0 	ldrh	r3, [r3]
  120328:	e6ff2073 	uxth	r2, r3
  12032c:	e30e3224 	movw	r3, #57892	; 0xe224
  120330:	e3403014 	movt	r3, #20
  120334:	e5934000 	ldr	r4, [r3]
  120338:	e1a00002 	mov	r0, r2
  12033c:	ebffd7cb 	bl	116270 <lwip_htons>
  120340:	e1a03000 	mov	r3, r0
  120344:	e1c430b0 	strh	r3, [r4]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
  120348:	e30e3224 	movw	r3, #57892	; 0xe224
  12034c:	e3403014 	movt	r3, #20
  120350:	e5933000 	ldr	r3, [r3]
  120354:	e1d330b2 	ldrh	r3, [r3, #2]
  120358:	e6ff2073 	uxth	r2, r3
  12035c:	e30e3224 	movw	r3, #57892	; 0xe224
  120360:	e3403014 	movt	r3, #20
  120364:	e5934000 	ldr	r4, [r3]
  120368:	e1a00002 	mov	r0, r2
  12036c:	ebffd7bf 	bl	116270 <lwip_htons>
  120370:	e1a03000 	mov	r3, r0
  120374:	e1c430b2 	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
  120378:	e30e3224 	movw	r3, #57892	; 0xe224
  12037c:	e3403014 	movt	r3, #20
  120380:	e5933000 	ldr	r3, [r3]
  120384:	e5932004 	ldr	r2, [r3, #4]
  120388:	e30e3224 	movw	r3, #57892	; 0xe224
  12038c:	e3403014 	movt	r3, #20
  120390:	e5934000 	ldr	r4, [r3]
  120394:	e1a00002 	mov	r0, r2
  120398:	ebffd7c0 	bl	1162a0 <lwip_htonl>
  12039c:	e1a03000 	mov	r3, r0
  1203a0:	e5843004 	str	r3, [r4, #4]
  1203a4:	e5942004 	ldr	r2, [r4, #4]
  1203a8:	e30e3234 	movw	r3, #57908	; 0xe234
  1203ac:	e3403014 	movt	r3, #20
  1203b0:	e5832000 	str	r2, [r3]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
  1203b4:	e30e3224 	movw	r3, #57892	; 0xe224
  1203b8:	e3403014 	movt	r3, #20
  1203bc:	e5933000 	ldr	r3, [r3]
  1203c0:	e5932008 	ldr	r2, [r3, #8]
  1203c4:	e30e3224 	movw	r3, #57892	; 0xe224
  1203c8:	e3403014 	movt	r3, #20
  1203cc:	e5934000 	ldr	r4, [r3]
  1203d0:	e1a00002 	mov	r0, r2
  1203d4:	ebffd7b1 	bl	1162a0 <lwip_htonl>
  1203d8:	e1a03000 	mov	r3, r0
  1203dc:	e5843008 	str	r3, [r4, #8]
  1203e0:	e5942008 	ldr	r2, [r4, #8]
  1203e4:	e30e3238 	movw	r3, #57912	; 0xe238
  1203e8:	e3403014 	movt	r3, #20
  1203ec:	e5832000 	str	r2, [r3]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
  1203f0:	e30e3224 	movw	r3, #57892	; 0xe224
  1203f4:	e3403014 	movt	r3, #20
  1203f8:	e5933000 	ldr	r3, [r3]
  1203fc:	e1d330be 	ldrh	r3, [r3, #14]
  120400:	e6ff2073 	uxth	r2, r3
  120404:	e30e3224 	movw	r3, #57892	; 0xe224
  120408:	e3403014 	movt	r3, #20
  12040c:	e5934000 	ldr	r4, [r3]
  120410:	e1a00002 	mov	r0, r2
  120414:	ebffd795 	bl	116270 <lwip_htons>
  120418:	e1a03000 	mov	r3, r0
  12041c:	e1c430be 	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
  120420:	e30e3224 	movw	r3, #57892	; 0xe224
  120424:	e3403014 	movt	r3, #20
  120428:	e5933000 	ldr	r3, [r3]
  12042c:	e1d330bc 	ldrh	r3, [r3, #12]
  120430:	e6ff3073 	uxth	r3, r3
  120434:	e1a00003 	mov	r0, r3
  120438:	ebffd78c 	bl	116270 <lwip_htons>
  12043c:	e1a03000 	mov	r3, r0
  120440:	e6ef3073 	uxtb	r3, r3
  120444:	e203303f 	and	r3, r3, #63	; 0x3f
  120448:	e6ef2073 	uxtb	r2, r3
  12044c:	e30e3240 	movw	r3, #57920	; 0xe240
  120450:	e3403014 	movt	r3, #20
  120454:	e5c32000 	strb	r2, [r3]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
  120458:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12045c:	e1d320b8 	ldrh	r2, [r3, #8]
  120460:	e30e3240 	movw	r3, #57920	; 0xe240
  120464:	e3403014 	movt	r3, #20
  120468:	e5d33000 	ldrb	r3, [r3]
  12046c:	e2033003 	and	r3, r3, #3
  120470:	e3530000 	cmp	r3, #0
  120474:	13a03001 	movne	r3, #1
  120478:	03a03000 	moveq	r3, #0
  12047c:	e6ef3073 	uxtb	r3, r3
  120480:	e6ff3073 	uxth	r3, r3
  120484:	e0823003 	add	r3, r2, r3
  120488:	e6ff2073 	uxth	r2, r3
  12048c:	e30e323e 	movw	r3, #57918	; 0xe23e
  120490:	e3403014 	movt	r3, #20
  120494:	e1c320b0 	strh	r2, [r3]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
  120498:	e3a03000 	mov	r3, #0
  12049c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  1204a0:	e30531b0 	movw	r3, #20912	; 0x51b0
  1204a4:	e3403057 	movt	r3, #87	; 0x57
  1204a8:	e5933000 	ldr	r3, [r3]
  1204ac:	e50b3010 	str	r3, [fp, #-16]
  1204b0:	ea000077 	b	120694 <tcp_input+0x76c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
  1204b4:	e51b3010 	ldr	r3, [fp, #-16]
  1204b8:	e5933014 	ldr	r3, [r3, #20]
  1204bc:	e3530000 	cmp	r3, #0
  1204c0:	1a000006 	bne	1204e0 <tcp_input+0x5b8>
  1204c4:	e3070854 	movw	r0, #30804	; 0x7854
  1204c8:	e3400014 	movt	r0, #20
  1204cc:	ebff8b10 	bl	103114 <rt_kprintf>
  1204d0:	e3a010e0 	mov	r1, #224	; 0xe0
  1204d4:	e30707f8 	movw	r0, #30712	; 0x77f8
  1204d8:	e3400014 	movt	r0, #20
  1204dc:	ebffa98c 	bl	10ab14 <sys_arch_assert>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
  1204e0:	e51b3010 	ldr	r3, [fp, #-16]
  1204e4:	e5933014 	ldr	r3, [r3, #20]
  1204e8:	e353000a 	cmp	r3, #10
  1204ec:	1a000006 	bne	12050c <tcp_input+0x5e4>
  1204f0:	e307087c 	movw	r0, #30844	; 0x787c
  1204f4:	e3400014 	movt	r0, #20
  1204f8:	ebff8b05 	bl	103114 <rt_kprintf>
  1204fc:	e3a010e1 	mov	r1, #225	; 0xe1
  120500:	e30707f8 	movw	r0, #30712	; 0x77f8
  120504:	e3400014 	movt	r0, #20
  120508:	ebffa981 	bl	10ab14 <sys_arch_assert>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
  12050c:	e51b3010 	ldr	r3, [fp, #-16]
  120510:	e5933014 	ldr	r3, [r3, #20]
  120514:	e3530001 	cmp	r3, #1
  120518:	1a000006 	bne	120538 <tcp_input+0x610>
  12051c:	e30708a8 	movw	r0, #30888	; 0x78a8
  120520:	e3400014 	movt	r0, #20
  120524:	ebff8afa 	bl	103114 <rt_kprintf>
  120528:	e3a010e2 	mov	r1, #226	; 0xe2
  12052c:	e30707f8 	movw	r0, #30712	; 0x77f8
  120530:	e3400014 	movt	r0, #20
  120534:	ebffa976 	bl	10ab14 <sys_arch_assert>
    if (pcb->remote_port == tcphdr->src &&
  120538:	e51b3010 	ldr	r3, [fp, #-16]
  12053c:	e1d321bc 	ldrh	r2, [r3, #28]
  120540:	e30e3224 	movw	r3, #57892	; 0xe224
  120544:	e3403014 	movt	r3, #20
  120548:	e5933000 	ldr	r3, [r3]
  12054c:	e1d330b0 	ldrh	r3, [r3]
  120550:	e6ff3073 	uxth	r3, r3
  120554:	e1520003 	cmp	r2, r3
  120558:	1a000048 	bne	120680 <tcp_input+0x758>
        pcb->local_port == tcphdr->dest &&
  12055c:	e51b3010 	ldr	r3, [fp, #-16]
  120560:	e1d321ba 	ldrh	r2, [r3, #26]
  120564:	e30e3224 	movw	r3, #57892	; 0xe224
  120568:	e3403014 	movt	r3, #20
  12056c:	e5933000 	ldr	r3, [r3]
  120570:	e1d330b2 	ldrh	r3, [r3, #2]
  120574:	e6ff3073 	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
  120578:	e1520003 	cmp	r2, r3
  12057c:	1a00003f 	bne	120680 <tcp_input+0x758>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
  120580:	e51b3010 	ldr	r3, [fp, #-16]
  120584:	e5932004 	ldr	r2, [r3, #4]
  120588:	e30e3d68 	movw	r3, #60776	; 0xed68
  12058c:	e3403014 	movt	r3, #20
  120590:	e5933010 	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
  120594:	e1520003 	cmp	r2, r3
  120598:	1a000038 	bne	120680 <tcp_input+0x758>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
  12059c:	e51b3010 	ldr	r3, [fp, #-16]
  1205a0:	e5932000 	ldr	r2, [r3]
  1205a4:	e30e3d68 	movw	r3, #60776	; 0xed68
  1205a8:	e3403014 	movt	r3, #20
  1205ac:	e5933014 	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
  1205b0:	e1520003 	cmp	r2, r3
  1205b4:	1a000031 	bne	120680 <tcp_input+0x758>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
  1205b8:	e51b3010 	ldr	r3, [fp, #-16]
  1205bc:	e593300c 	ldr	r3, [r3, #12]
  1205c0:	e51b2010 	ldr	r2, [fp, #-16]
  1205c4:	e1520003 	cmp	r2, r3
  1205c8:	1a000006 	bne	1205e8 <tcp_input+0x6c0>
  1205cc:	e30708d0 	movw	r0, #30928	; 0x78d0
  1205d0:	e3400014 	movt	r0, #20
  1205d4:	ebff8ace 	bl	103114 <rt_kprintf>
  1205d8:	e3a010ea 	mov	r1, #234	; 0xea
  1205dc:	e30707f8 	movw	r0, #30712	; 0x77f8
  1205e0:	e3400014 	movt	r0, #20
  1205e4:	ebffa94a 	bl	10ab14 <sys_arch_assert>
      if (prev != NULL) {
  1205e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1205ec:	e3530000 	cmp	r3, #0
  1205f0:	0a00000d 	beq	12062c <tcp_input+0x704>
        prev->next = pcb->next;
  1205f4:	e51b3010 	ldr	r3, [fp, #-16]
  1205f8:	e593200c 	ldr	r2, [r3, #12]
  1205fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  120600:	e583200c 	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
  120604:	e30531b0 	movw	r3, #20912	; 0x51b0
  120608:	e3403057 	movt	r3, #87	; 0x57
  12060c:	e5932000 	ldr	r2, [r3]
  120610:	e51b3010 	ldr	r3, [fp, #-16]
  120614:	e583200c 	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
  120618:	e30531b0 	movw	r3, #20912	; 0x51b0
  12061c:	e3403057 	movt	r3, #87	; 0x57
  120620:	e51b2010 	ldr	r2, [fp, #-16]
  120624:	e5832000 	str	r2, [r3]
  120628:	ea000007 	b	12064c <tcp_input+0x724>
      } else {
        TCP_STATS_INC(tcp.cachehit);
  12062c:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  120630:	e3403057 	movt	r3, #87	; 0x57
  120634:	e1d33cb2 	ldrh	r3, [r3, #194]	; 0xc2
  120638:	e2833001 	add	r3, r3, #1
  12063c:	e6ff2073 	uxth	r2, r3
  120640:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  120644:	e3403057 	movt	r3, #87	; 0x57
  120648:	e1c32cb2 	strh	r2, [r3, #194]	; 0xc2
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
  12064c:	e51b3010 	ldr	r3, [fp, #-16]
  120650:	e593300c 	ldr	r3, [r3, #12]
  120654:	e51b2010 	ldr	r2, [fp, #-16]
  120658:	e1520003 	cmp	r2, r3
  12065c:	1a000010 	bne	1206a4 <tcp_input+0x77c>
  120660:	e30708fc 	movw	r0, #30972	; 0x78fc
  120664:	e3400014 	movt	r0, #20
  120668:	ebff8aa9 	bl	103114 <rt_kprintf>
  12066c:	e3a010f2 	mov	r1, #242	; 0xf2
  120670:	e30707f8 	movw	r0, #30712	; 0x77f8
  120674:	e3400014 	movt	r0, #20
  120678:	ebffa925 	bl	10ab14 <sys_arch_assert>
      break;
  12067c:	ea000008 	b	1206a4 <tcp_input+0x77c>
    }
    prev = pcb;
  120680:	e51b3010 	ldr	r3, [fp, #-16]
  120684:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  120688:	e51b3010 	ldr	r3, [fp, #-16]
  12068c:	e593300c 	ldr	r3, [r3, #12]
  120690:	e50b3010 	str	r3, [fp, #-16]
  120694:	e51b3010 	ldr	r3, [fp, #-16]
  120698:	e3530000 	cmp	r3, #0
  12069c:	1affff84 	bne	1204b4 <tcp_input+0x58c>
  1206a0:	ea000000 	b	1206a8 <tcp_input+0x780>
      break;
  1206a4:	e320f000 	nop	{0}
  }

  if (pcb == NULL) {
  1206a8:	e51b3010 	ldr	r3, [fp, #-16]
  1206ac:	e3530000 	cmp	r3, #0
  1206b0:	1a00008e 	bne	1208f0 <tcp_input+0x9c8>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  1206b4:	e30531c0 	movw	r3, #20928	; 0x51c0
  1206b8:	e3403057 	movt	r3, #87	; 0x57
  1206bc:	e5933000 	ldr	r3, [r3]
  1206c0:	e50b3010 	str	r3, [fp, #-16]
  1206c4:	ea000032 	b	120794 <tcp_input+0x86c>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
  1206c8:	e51b3010 	ldr	r3, [fp, #-16]
  1206cc:	e5933014 	ldr	r3, [r3, #20]
  1206d0:	e353000a 	cmp	r3, #10
  1206d4:	0a000006 	beq	1206f4 <tcp_input+0x7cc>
  1206d8:	e3070928 	movw	r0, #31016	; 0x7928
  1206dc:	e3400014 	movt	r0, #20
  1206e0:	ebff8a8b 	bl	103114 <rt_kprintf>
  1206e4:	e3a010fc 	mov	r1, #252	; 0xfc
  1206e8:	e30707f8 	movw	r0, #30712	; 0x77f8
  1206ec:	e3400014 	movt	r0, #20
  1206f0:	ebffa907 	bl	10ab14 <sys_arch_assert>
      if (pcb->remote_port == tcphdr->src &&
  1206f4:	e51b3010 	ldr	r3, [fp, #-16]
  1206f8:	e1d321bc 	ldrh	r2, [r3, #28]
  1206fc:	e30e3224 	movw	r3, #57892	; 0xe224
  120700:	e3403014 	movt	r3, #20
  120704:	e5933000 	ldr	r3, [r3]
  120708:	e1d330b0 	ldrh	r3, [r3]
  12070c:	e6ff3073 	uxth	r3, r3
  120710:	e1520003 	cmp	r2, r3
  120714:	1a00001b 	bne	120788 <tcp_input+0x860>
          pcb->local_port == tcphdr->dest &&
  120718:	e51b3010 	ldr	r3, [fp, #-16]
  12071c:	e1d321ba 	ldrh	r2, [r3, #26]
  120720:	e30e3224 	movw	r3, #57892	; 0xe224
  120724:	e3403014 	movt	r3, #20
  120728:	e5933000 	ldr	r3, [r3]
  12072c:	e1d330b2 	ldrh	r3, [r3, #2]
  120730:	e6ff3073 	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
  120734:	e1520003 	cmp	r2, r3
  120738:	1a000012 	bne	120788 <tcp_input+0x860>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
  12073c:	e51b3010 	ldr	r3, [fp, #-16]
  120740:	e5932004 	ldr	r2, [r3, #4]
  120744:	e30e3d68 	movw	r3, #60776	; 0xed68
  120748:	e3403014 	movt	r3, #20
  12074c:	e5933010 	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
  120750:	e1520003 	cmp	r2, r3
  120754:	1a00000b 	bne	120788 <tcp_input+0x860>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
  120758:	e51b3010 	ldr	r3, [fp, #-16]
  12075c:	e5932000 	ldr	r2, [r3]
  120760:	e30e3d68 	movw	r3, #60776	; 0xed68
  120764:	e3403014 	movt	r3, #20
  120768:	e5933014 	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
  12076c:	e1520003 	cmp	r2, r3
  120770:	1a000004 	bne	120788 <tcp_input+0x860>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
  120774:	e51b0010 	ldr	r0, [fp, #-16]
  120778:	eb0002d8 	bl	1212e0 <tcp_timewait_input>
        pbuf_free(p);
  12077c:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  120780:	ebffe8f1 	bl	11ab4c <pbuf_free>
        return;
  120784:	ea0001f7 	b	120f68 <tcp_input+0x1040>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  120788:	e51b3010 	ldr	r3, [fp, #-16]
  12078c:	e593300c 	ldr	r3, [r3, #12]
  120790:	e50b3010 	str	r3, [fp, #-16]
  120794:	e51b3010 	ldr	r3, [fp, #-16]
  120798:	e3530000 	cmp	r3, #0
  12079c:	1affffc9 	bne	1206c8 <tcp_input+0x7a0>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
  1207a0:	e3a03000 	mov	r3, #0
  1207a4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  1207a8:	e30531b8 	movw	r3, #20920	; 0x51b8
  1207ac:	e3403057 	movt	r3, #87	; 0x57
  1207b0:	e5933000 	ldr	r3, [r3]
  1207b4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  1207b8:	ea00001f 	b	12083c <tcp_input+0x914>
      if (lpcb->local_port == tcphdr->dest) {
  1207bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1207c0:	e1d321ba 	ldrh	r2, [r3, #26]
  1207c4:	e30e3224 	movw	r3, #57892	; 0xe224
  1207c8:	e3403014 	movt	r3, #20
  1207cc:	e5933000 	ldr	r3, [r3]
  1207d0:	e1d330b2 	ldrh	r3, [r3, #2]
  1207d4:	e6ff3073 	uxth	r3, r3
  1207d8:	e1520003 	cmp	r2, r3
  1207dc:	1a000011 	bne	120828 <tcp_input+0x900>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
  1207e0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1207e4:	e5932000 	ldr	r2, [r3]
  1207e8:	e30e3d68 	movw	r3, #60776	; 0xed68
  1207ec:	e3403014 	movt	r3, #20
  1207f0:	e5933014 	ldr	r3, [r3, #20]
  1207f4:	e1520003 	cmp	r2, r3
  1207f8:	0a000013 	beq	12084c <tcp_input+0x924>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
  1207fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120800:	e3530000 	cmp	r3, #0
  120804:	0a000003 	beq	120818 <tcp_input+0x8f0>
  120808:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12080c:	e5933000 	ldr	r3, [r3]
  120810:	e3530000 	cmp	r3, #0
  120814:	1a000003 	bne	120828 <tcp_input+0x900>
            /* found an ANY-match */
#if SO_REUSE
            lpcb_any = lpcb;
  120818:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12081c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
            lpcb_prev = prev;
  120820:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  120824:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
  120828:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12082c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  120830:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120834:	e593300c 	ldr	r3, [r3, #12]
  120838:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  12083c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120840:	e3530000 	cmp	r3, #0
  120844:	1affffdc 	bne	1207bc <tcp_input+0x894>
  120848:	ea000000 	b	120850 <tcp_input+0x928>
            break;
  12084c:	e320f000 	nop	{0}
    }
#if SO_REUSE
    /* first try specific local IP */
    if (lpcb == NULL) {
  120850:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120854:	e3530000 	cmp	r3, #0
  120858:	1a000003 	bne	12086c <tcp_input+0x944>
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
  12085c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  120860:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
      prev = lpcb_prev;
  120864:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  120868:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
  12086c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120870:	e3530000 	cmp	r3, #0
  120874:	0a00001d 	beq	1208f0 <tcp_input+0x9c8>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
  120878:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12087c:	e3530000 	cmp	r3, #0
  120880:	0a00000d 	beq	1208bc <tcp_input+0x994>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
  120884:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120888:	e593200c 	ldr	r2, [r3, #12]
  12088c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  120890:	e583200c 	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
  120894:	e30531b8 	movw	r3, #20920	; 0x51b8
  120898:	e3403057 	movt	r3, #87	; 0x57
  12089c:	e5932000 	ldr	r2, [r3]
  1208a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1208a4:	e583200c 	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
  1208a8:	e30531b8 	movw	r3, #20920	; 0x51b8
  1208ac:	e3403057 	movt	r3, #87	; 0x57
  1208b0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1208b4:	e5832000 	str	r2, [r3]
  1208b8:	ea000007 	b	1208dc <tcp_input+0x9b4>
      } else {
        TCP_STATS_INC(tcp.cachehit);
  1208bc:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  1208c0:	e3403057 	movt	r3, #87	; 0x57
  1208c4:	e1d33cb2 	ldrh	r3, [r3, #194]	; 0xc2
  1208c8:	e2833001 	add	r3, r3, #1
  1208cc:	e6ff2073 	uxth	r2, r3
  1208d0:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  1208d4:	e3403057 	movt	r3, #87	; 0x57
  1208d8:	e1c32cb2 	strh	r2, [r3, #194]	; 0xc2
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
  1208dc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1208e0:	eb0001a4 	bl	120f78 <tcp_listen_input>
      pbuf_free(p);
  1208e4:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  1208e8:	ebffe897 	bl	11ab4c <pbuf_free>
      return;
  1208ec:	ea00019d 	b	120f68 <tcp_input+0x1040>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
  1208f0:	e51b3010 	ldr	r3, [fp, #-16]
  1208f4:	e3530000 	cmp	r3, #0
  1208f8:	0a00014f 	beq	120e3c <tcp_input+0xf14>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
  1208fc:	e30e3214 	movw	r3, #57876	; 0xe214
  120900:	e3403014 	movt	r3, #20
  120904:	e3a02000 	mov	r2, #0
  120908:	e5832000 	str	r2, [r3]
    inseg.len = p->tot_len;
  12090c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120910:	e1d320b8 	ldrh	r2, [r3, #8]
  120914:	e30e3214 	movw	r3, #57876	; 0xe214
  120918:	e3403014 	movt	r3, #20
  12091c:	e1c320b8 	strh	r2, [r3, #8]
    inseg.p = p;
  120920:	e30e3214 	movw	r3, #57876	; 0xe214
  120924:	e3403014 	movt	r3, #20
  120928:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  12092c:	e5832004 	str	r2, [r3, #4]
    inseg.tcphdr = tcphdr;
  120930:	e30e3224 	movw	r3, #57892	; 0xe224
  120934:	e3403014 	movt	r3, #20
  120938:	e5932000 	ldr	r2, [r3]
  12093c:	e30e3214 	movw	r3, #57876	; 0xe214
  120940:	e3403014 	movt	r3, #20
  120944:	e583200c 	str	r2, [r3, #12]

    recv_data = NULL;
  120948:	e30e3244 	movw	r3, #57924	; 0xe244
  12094c:	e3403014 	movt	r3, #20
  120950:	e3a02000 	mov	r2, #0
  120954:	e5832000 	str	r2, [r3]
    recv_flags = 0;
  120958:	e30e3241 	movw	r3, #57921	; 0xe241
  12095c:	e3403014 	movt	r3, #20
  120960:	e3a02000 	mov	r2, #0
  120964:	e5c32000 	strb	r2, [r3]
    recv_acked = 0;
  120968:	e30e323c 	movw	r3, #57916	; 0xe23c
  12096c:	e3403014 	movt	r3, #20
  120970:	e3a02000 	mov	r2, #0
  120974:	e1c320b0 	strh	r2, [r3]

    if (flags & TCP_PSH) {
  120978:	e30e3240 	movw	r3, #57920	; 0xe240
  12097c:	e3403014 	movt	r3, #20
  120980:	e5d33000 	ldrb	r3, [r3]
  120984:	e2033008 	and	r3, r3, #8
  120988:	e3530000 	cmp	r3, #0
  12098c:	0a000005 	beq	1209a8 <tcp_input+0xa80>
      p->flags |= PBUF_FLAG_PUSH;
  120990:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120994:	e5d3300d 	ldrb	r3, [r3, #13]
  120998:	e3833001 	orr	r3, r3, #1
  12099c:	e6ef2073 	uxtb	r2, r3
  1209a0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1209a4:	e5c3200d 	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
  1209a8:	e51b3010 	ldr	r3, [fp, #-16]
  1209ac:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  1209b0:	e3530000 	cmp	r3, #0
  1209b4:	0a000023 	beq	120a48 <tcp_input+0xb20>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
  1209b8:	e51b0010 	ldr	r0, [fp, #-16]
  1209bc:	ebfff968 	bl	11ef64 <tcp_process_refused_data>
  1209c0:	e1a03000 	mov	r3, r0
  1209c4:	e373000d 	cmn	r3, #13
  1209c8:	0a000008 	beq	1209f0 <tcp_input+0xac8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
  1209cc:	e51b3010 	ldr	r3, [fp, #-16]
  1209d0:	e5933078 	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
  1209d4:	e3530000 	cmp	r3, #0
  1209d8:	0a00001a 	beq	120a48 <tcp_input+0xb20>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
  1209dc:	e30e323e 	movw	r3, #57918	; 0xe23e
  1209e0:	e3403014 	movt	r3, #20
  1209e4:	e1d330b0 	ldrh	r3, [r3]
  1209e8:	e3530000 	cmp	r3, #0
  1209ec:	0a000015 	beq	120a48 <tcp_input+0xb20>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
  1209f0:	e51b3010 	ldr	r3, [fp, #-16]
  1209f4:	e1d332be 	ldrh	r3, [r3, #46]	; 0x2e
  1209f8:	e3530000 	cmp	r3, #0
  1209fc:	1a000001 	bne	120a08 <tcp_input+0xae0>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
  120a00:	e51b0010 	ldr	r0, [fp, #-16]
  120a04:	eb001419 	bl	125a70 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
  120a08:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  120a0c:	e3403057 	movt	r3, #87	; 0x57
  120a10:	e1d33bb2 	ldrh	r3, [r3, #178]	; 0xb2
  120a14:	e2833001 	add	r3, r3, #1
  120a18:	e6ff2073 	uxth	r2, r3
  120a1c:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  120a20:	e3403057 	movt	r3, #87	; 0x57
  120a24:	e1c32bb2 	strh	r2, [r3, #178]	; 0xb2
        MIB2_STATS_INC(mib2.tcpinerrs);
  120a28:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  120a2c:	e3403057 	movt	r3, #87	; 0x57
  120a30:	e5933188 	ldr	r3, [r3, #392]	; 0x188
  120a34:	e2832001 	add	r2, r3, #1
  120a38:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  120a3c:	e3403057 	movt	r3, #87	; 0x57
  120a40:	e5832188 	str	r2, [r3, #392]	; 0x188
        goto aborted;
  120a44:	ea0000e5 	b	120de0 <tcp_input+0xeb8>
      }
    }
    tcp_input_pcb = pcb;
  120a48:	e30531c4 	movw	r3, #20932	; 0x51c4
  120a4c:	e3403057 	movt	r3, #87	; 0x57
  120a50:	e51b2010 	ldr	r2, [fp, #-16]
  120a54:	e5832000 	str	r2, [r3]
    err = tcp_process(pcb);
  120a58:	e51b0010 	ldr	r0, [fp, #-16]
  120a5c:	eb00027e 	bl	12145c <tcp_process>
  120a60:	e1a03000 	mov	r3, r0
  120a64:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
  120a68:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  120a6c:	e373000d 	cmn	r3, #13
  120a70:	0a0000d3 	beq	120dc4 <tcp_input+0xe9c>
      if (recv_flags & TF_RESET) {
  120a74:	e30e3241 	movw	r3, #57921	; 0xe241
  120a78:	e3403014 	movt	r3, #20
  120a7c:	e5d33000 	ldrb	r3, [r3]
  120a80:	e2033008 	and	r3, r3, #8
  120a84:	e3530000 	cmp	r3, #0
  120a88:	0a000012 	beq	120ad8 <tcp_input+0xbb0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
  120a8c:	e51b3010 	ldr	r3, [fp, #-16]
  120a90:	e5933090 	ldr	r3, [r3, #144]	; 0x90
  120a94:	e3530000 	cmp	r3, #0
  120a98:	0a000006 	beq	120ab8 <tcp_input+0xb90>
  120a9c:	e51b3010 	ldr	r3, [fp, #-16]
  120aa0:	e5933090 	ldr	r3, [r3, #144]	; 0x90
  120aa4:	e51b2010 	ldr	r2, [fp, #-16]
  120aa8:	e5922010 	ldr	r2, [r2, #16]
  120aac:	e3e0100d 	mvn	r1, #13
  120ab0:	e1a00002 	mov	r0, r2
  120ab4:	e12fff33 	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
  120ab8:	e51b1010 	ldr	r1, [fp, #-16]
  120abc:	e30501b0 	movw	r0, #20912	; 0x51b0
  120ac0:	e3400057 	movt	r0, #87	; 0x57
  120ac4:	ebfffc11 	bl	11fb10 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
  120ac8:	e51b1010 	ldr	r1, [fp, #-16]
  120acc:	e3a00002 	mov	r0, #2
  120ad0:	ebffe10f 	bl	118f14 <memp_free>
  120ad4:	ea0000c1 	b	120de0 <tcp_input+0xeb8>
      } else {
        err = ERR_OK;
  120ad8:	e3a03000 	mov	r3, #0
  120adc:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
  120ae0:	e30e323c 	movw	r3, #57916	; 0xe23c
  120ae4:	e3403014 	movt	r3, #20
  120ae8:	e1d330b0 	ldrh	r3, [r3]
  120aec:	e3530000 	cmp	r3, #0
  120af0:	0a00001a 	beq	120b60 <tcp_input+0xc38>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
  120af4:	e30e323c 	movw	r3, #57916	; 0xe23c
  120af8:	e3403014 	movt	r3, #20
  120afc:	e1d330b0 	ldrh	r3, [r3]
  120b00:	e14b32ba 	strh	r3, [fp, #-42]	; 0xffffffd6
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
  120b04:	e51b3010 	ldr	r3, [fp, #-16]
  120b08:	e5933080 	ldr	r3, [r3, #128]	; 0x80
  120b0c:	e3530000 	cmp	r3, #0
  120b10:	0a000009 	beq	120b3c <tcp_input+0xc14>
  120b14:	e51b3010 	ldr	r3, [fp, #-16]
  120b18:	e5933080 	ldr	r3, [r3, #128]	; 0x80
  120b1c:	e51b2010 	ldr	r2, [fp, #-16]
  120b20:	e5920010 	ldr	r0, [r2, #16]
  120b24:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
  120b28:	e51b1010 	ldr	r1, [fp, #-16]
  120b2c:	e12fff33 	blx	r3
  120b30:	e1a03000 	mov	r3, r0
  120b34:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  120b38:	ea000001 	b	120b44 <tcp_input+0xc1c>
  120b3c:	e3a03000 	mov	r3, #0
  120b40:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
            if (err == ERR_ABRT) {
  120b44:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  120b48:	e373000d 	cmn	r3, #13
  120b4c:	0a00009e 	beq	120dcc <tcp_input+0xea4>
              goto aborted;
            }
          }
          recv_acked = 0;
  120b50:	e30e323c 	movw	r3, #57916	; 0xe23c
  120b54:	e3403014 	movt	r3, #20
  120b58:	e3a02000 	mov	r2, #0
  120b5c:	e1c320b0 	strh	r2, [r3]
        }
        if (recv_flags & TF_CLOSED) {
  120b60:	e30e3241 	movw	r3, #57921	; 0xe241
  120b64:	e3403014 	movt	r3, #20
  120b68:	e5d33000 	ldrb	r3, [r3]
  120b6c:	e2033010 	and	r3, r3, #16
  120b70:	e3530000 	cmp	r3, #0
  120b74:	0a000017 	beq	120bd8 <tcp_input+0xcb0>
          /* The connection has been closed and we will deallocate the
             PCB. */
          if (!(pcb->flags & TF_RXCLOSED)) {
  120b78:	e51b3010 	ldr	r3, [fp, #-16]
  120b7c:	e5d3301e 	ldrb	r3, [r3, #30]
  120b80:	e2033010 	and	r3, r3, #16
  120b84:	e3530000 	cmp	r3, #0
  120b88:	1a00000a 	bne	120bb8 <tcp_input+0xc90>
            /* Connection closed although the application has only shut down the
               tx side: call the PCB's err callback and indicate the closure to
               ensure the application doesn't continue using the PCB. */
            TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
  120b8c:	e51b3010 	ldr	r3, [fp, #-16]
  120b90:	e5933090 	ldr	r3, [r3, #144]	; 0x90
  120b94:	e3530000 	cmp	r3, #0
  120b98:	0a000006 	beq	120bb8 <tcp_input+0xc90>
  120b9c:	e51b3010 	ldr	r3, [fp, #-16]
  120ba0:	e5933090 	ldr	r3, [r3, #144]	; 0x90
  120ba4:	e51b2010 	ldr	r2, [fp, #-16]
  120ba8:	e5922010 	ldr	r2, [r2, #16]
  120bac:	e3e0100e 	mvn	r1, #14
  120bb0:	e1a00002 	mov	r0, r2
  120bb4:	e12fff33 	blx	r3
          }
          tcp_pcb_remove(&tcp_active_pcbs, pcb);
  120bb8:	e51b1010 	ldr	r1, [fp, #-16]
  120bbc:	e30501b0 	movw	r0, #20912	; 0x51b0
  120bc0:	e3400057 	movt	r0, #87	; 0x57
  120bc4:	ebfffbd1 	bl	11fb10 <tcp_pcb_remove>
          memp_free(MEMP_TCP_PCB, pcb);
  120bc8:	e51b1010 	ldr	r1, [fp, #-16]
  120bcc:	e3a00002 	mov	r0, #2
  120bd0:	ebffe0cf 	bl	118f14 <memp_free>
          goto aborted;
  120bd4:	ea000081 	b	120de0 <tcp_input+0xeb8>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
  120bd8:	e30e3244 	movw	r3, #57924	; 0xe244
  120bdc:	e3403014 	movt	r3, #20
  120be0:	e5933000 	ldr	r3, [r3]
  120be4:	e3530000 	cmp	r3, #0
  120be8:	0a00003c 	beq	120ce0 <tcp_input+0xdb8>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
  120bec:	e51b3010 	ldr	r3, [fp, #-16]
  120bf0:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  120bf4:	e3530000 	cmp	r3, #0
  120bf8:	0a000006 	beq	120c18 <tcp_input+0xcf0>
  120bfc:	e3070958 	movw	r0, #31064	; 0x7958
  120c00:	e3400014 	movt	r0, #20
  120c04:	ebff8942 	bl	103114 <rt_kprintf>
  120c08:	e3a01f6b 	mov	r1, #428	; 0x1ac
  120c0c:	e30707f8 	movw	r0, #30712	; 0x77f8
  120c10:	e3400014 	movt	r0, #20
  120c14:	ebffa7be 	bl	10ab14 <sys_arch_assert>
          if (pcb->flags & TF_RXCLOSED) {
  120c18:	e51b3010 	ldr	r3, [fp, #-16]
  120c1c:	e5d3301e 	ldrb	r3, [r3, #30]
  120c20:	e2033010 	and	r3, r3, #16
  120c24:	e3530000 	cmp	r3, #0
  120c28:	0a000007 	beq	120c4c <tcp_input+0xd24>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
  120c2c:	e30e3244 	movw	r3, #57924	; 0xe244
  120c30:	e3403014 	movt	r3, #20
  120c34:	e5933000 	ldr	r3, [r3]
  120c38:	e1a00003 	mov	r0, r3
  120c3c:	ebffe7c2 	bl	11ab4c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
  120c40:	e51b0010 	ldr	r0, [fp, #-16]
  120c44:	ebfff29a 	bl	11d6b4 <tcp_abort>
            goto aborted;
  120c48:	ea000064 	b	120de0 <tcp_input+0xeb8>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
  120c4c:	e51b3010 	ldr	r3, [fp, #-16]
  120c50:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  120c54:	e3530000 	cmp	r3, #0
  120c58:	0a00000c 	beq	120c90 <tcp_input+0xd68>
  120c5c:	e51b3010 	ldr	r3, [fp, #-16]
  120c60:	e5934084 	ldr	r4, [r3, #132]	; 0x84
  120c64:	e51b3010 	ldr	r3, [fp, #-16]
  120c68:	e5930010 	ldr	r0, [r3, #16]
  120c6c:	e30e3244 	movw	r3, #57924	; 0xe244
  120c70:	e3403014 	movt	r3, #20
  120c74:	e5932000 	ldr	r2, [r3]
  120c78:	e3a03000 	mov	r3, #0
  120c7c:	e51b1010 	ldr	r1, [fp, #-16]
  120c80:	e12fff34 	blx	r4
  120c84:	e1a03000 	mov	r3, r0
  120c88:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  120c8c:	ea000008 	b	120cb4 <tcp_input+0xd8c>
  120c90:	e30e3244 	movw	r3, #57924	; 0xe244
  120c94:	e3403014 	movt	r3, #20
  120c98:	e5932000 	ldr	r2, [r3]
  120c9c:	e3a03000 	mov	r3, #0
  120ca0:	e51b1010 	ldr	r1, [fp, #-16]
  120ca4:	e3a00000 	mov	r0, #0
  120ca8:	ebfff956 	bl	11f208 <tcp_recv_null>
  120cac:	e1a03000 	mov	r3, r0
  120cb0:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
          if (err == ERR_ABRT) {
  120cb4:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  120cb8:	e373000d 	cmn	r3, #13
  120cbc:	0a000044 	beq	120dd4 <tcp_input+0xeac>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
  120cc0:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  120cc4:	e3530000 	cmp	r3, #0
  120cc8:	0a000004 	beq	120ce0 <tcp_input+0xdb8>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
  120ccc:	e30e3244 	movw	r3, #57924	; 0xe244
  120cd0:	e3403014 	movt	r3, #20
  120cd4:	e5932000 	ldr	r2, [r3]
  120cd8:	e51b3010 	ldr	r3, [fp, #-16]
  120cdc:	e5832078 	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
  120ce0:	e30e3241 	movw	r3, #57921	; 0xe241
  120ce4:	e3403014 	movt	r3, #20
  120ce8:	e5d33000 	ldrb	r3, [r3]
  120cec:	e2033020 	and	r3, r3, #32
  120cf0:	e3530000 	cmp	r3, #0
  120cf4:	0a00002b 	beq	120da8 <tcp_input+0xe80>
          if (pcb->refused_data != NULL) {
  120cf8:	e51b3010 	ldr	r3, [fp, #-16]
  120cfc:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  120d00:	e3530000 	cmp	r3, #0
  120d04:	0a000008 	beq	120d2c <tcp_input+0xe04>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
  120d08:	e51b3010 	ldr	r3, [fp, #-16]
  120d0c:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  120d10:	e5d3200d 	ldrb	r2, [r3, #13]
  120d14:	e51b3010 	ldr	r3, [fp, #-16]
  120d18:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  120d1c:	e3822020 	orr	r2, r2, #32
  120d20:	e6ef2072 	uxtb	r2, r2
  120d24:	e5c3200d 	strb	r2, [r3, #13]
  120d28:	ea00001e 	b	120da8 <tcp_input+0xe80>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
  120d2c:	e51b3010 	ldr	r3, [fp, #-16]
  120d30:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  120d34:	e30f2fff 	movw	r2, #65535	; 0xffff
  120d38:	e1530002 	cmp	r3, r2
  120d3c:	0a000005 	beq	120d58 <tcp_input+0xe30>
              pcb->rcv_wnd++;
  120d40:	e51b3010 	ldr	r3, [fp, #-16]
  120d44:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  120d48:	e2833001 	add	r3, r3, #1
  120d4c:	e6ff2073 	uxth	r2, r3
  120d50:	e51b3010 	ldr	r3, [fp, #-16]
  120d54:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
            }
            TCP_EVENT_CLOSED(pcb, err);
  120d58:	e51b3010 	ldr	r3, [fp, #-16]
  120d5c:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  120d60:	e3530000 	cmp	r3, #0
  120d64:	0a00000a 	beq	120d94 <tcp_input+0xe6c>
  120d68:	e51b3010 	ldr	r3, [fp, #-16]
  120d6c:	e5934084 	ldr	r4, [r3, #132]	; 0x84
  120d70:	e51b3010 	ldr	r3, [fp, #-16]
  120d74:	e5930010 	ldr	r0, [r3, #16]
  120d78:	e3a03000 	mov	r3, #0
  120d7c:	e3a02000 	mov	r2, #0
  120d80:	e51b1010 	ldr	r1, [fp, #-16]
  120d84:	e12fff34 	blx	r4
  120d88:	e1a03000 	mov	r3, r0
  120d8c:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  120d90:	ea000001 	b	120d9c <tcp_input+0xe74>
  120d94:	e3a03000 	mov	r3, #0
  120d98:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
            if (err == ERR_ABRT) {
  120d9c:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  120da0:	e373000d 	cmn	r3, #13
  120da4:	0a00000c 	beq	120ddc <tcp_input+0xeb4>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
  120da8:	e30531c4 	movw	r3, #20932	; 0x51c4
  120dac:	e3403057 	movt	r3, #87	; 0x57
  120db0:	e3a02000 	mov	r2, #0
  120db4:	e5832000 	str	r2, [r3]
        /* Try to send something out. */
        tcp_output(pcb);
  120db8:	e51b0010 	ldr	r0, [fp, #-16]
  120dbc:	eb00138c 	bl	125bf4 <tcp_output>
  120dc0:	ea000006 	b	120de0 <tcp_input+0xeb8>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
  120dc4:	e320f000 	nop	{0}
  120dc8:	ea000004 	b	120de0 <tcp_input+0xeb8>
              goto aborted;
  120dcc:	e320f000 	nop	{0}
  120dd0:	ea000002 	b	120de0 <tcp_input+0xeb8>
            goto aborted;
  120dd4:	e320f000 	nop	{0}
  120dd8:	ea000000 	b	120de0 <tcp_input+0xeb8>
              goto aborted;
  120ddc:	e320f000 	nop	{0}
    tcp_input_pcb = NULL;
  120de0:	e30531c4 	movw	r3, #20932	; 0x51c4
  120de4:	e3403057 	movt	r3, #87	; 0x57
  120de8:	e3a02000 	mov	r2, #0
  120dec:	e5832000 	str	r2, [r3]
    recv_data = NULL;
  120df0:	e30e3244 	movw	r3, #57924	; 0xe244
  120df4:	e3403014 	movt	r3, #20
  120df8:	e3a02000 	mov	r2, #0
  120dfc:	e5832000 	str	r2, [r3]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
  120e00:	e30e3214 	movw	r3, #57876	; 0xe214
  120e04:	e3403014 	movt	r3, #20
  120e08:	e5933004 	ldr	r3, [r3, #4]
  120e0c:	e3530000 	cmp	r3, #0
  120e10:	0a000053 	beq	120f64 <tcp_input+0x103c>
    {
      pbuf_free(inseg.p);
  120e14:	e30e3214 	movw	r3, #57876	; 0xe214
  120e18:	e3403014 	movt	r3, #20
  120e1c:	e5933004 	ldr	r3, [r3, #4]
  120e20:	e1a00003 	mov	r0, r3
  120e24:	ebffe748 	bl	11ab4c <pbuf_free>
      inseg.p = NULL;
  120e28:	e30e3214 	movw	r3, #57876	; 0xe214
  120e2c:	e3403014 	movt	r3, #20
  120e30:	e3a02000 	mov	r2, #0
  120e34:	e5832004 	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
  120e38:	ea000049 	b	120f64 <tcp_input+0x103c>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
  120e3c:	e30e3224 	movw	r3, #57892	; 0xe224
  120e40:	e3403014 	movt	r3, #20
  120e44:	e5933000 	ldr	r3, [r3]
  120e48:	e1d330bc 	ldrh	r3, [r3, #12]
  120e4c:	e6ff3073 	uxth	r3, r3
  120e50:	e1a00003 	mov	r0, r3
  120e54:	ebffd505 	bl	116270 <lwip_htons>
  120e58:	e1a03000 	mov	r3, r0
  120e5c:	e2033004 	and	r3, r3, #4
  120e60:	e3530000 	cmp	r3, #0
  120e64:	1a000029 	bne	120f10 <tcp_input+0xfe8>
      TCP_STATS_INC(tcp.proterr);
  120e68:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  120e6c:	e3403057 	movt	r3, #87	; 0x57
  120e70:	e1d33bbc 	ldrh	r3, [r3, #188]	; 0xbc
  120e74:	e2833001 	add	r3, r3, #1
  120e78:	e6ff2073 	uxth	r2, r3
  120e7c:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  120e80:	e3403057 	movt	r3, #87	; 0x57
  120e84:	e1c32bbc 	strh	r2, [r3, #188]	; 0xbc
      TCP_STATS_INC(tcp.drop);
  120e88:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  120e8c:	e3403057 	movt	r3, #87	; 0x57
  120e90:	e1d33bb2 	ldrh	r3, [r3, #178]	; 0xb2
  120e94:	e2833001 	add	r3, r3, #1
  120e98:	e6ff2073 	uxth	r2, r3
  120e9c:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  120ea0:	e3403057 	movt	r3, #87	; 0x57
  120ea4:	e1c32bb2 	strh	r2, [r3, #178]	; 0xb2
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  120ea8:	e30e3238 	movw	r3, #57912	; 0xe238
  120eac:	e3403014 	movt	r3, #20
  120eb0:	e5930000 	ldr	r0, [r3]
  120eb4:	e30e323e 	movw	r3, #57918	; 0xe23e
  120eb8:	e3403014 	movt	r3, #20
  120ebc:	e1d330b0 	ldrh	r3, [r3]
  120ec0:	e1a02003 	mov	r2, r3
  120ec4:	e30e3234 	movw	r3, #57908	; 0xe234
  120ec8:	e3403014 	movt	r3, #20
  120ecc:	e5933000 	ldr	r3, [r3]
  120ed0:	e0821003 	add	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  120ed4:	e30e3224 	movw	r3, #57892	; 0xe224
  120ed8:	e3403014 	movt	r3, #20
  120edc:	e5933000 	ldr	r3, [r3]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  120ee0:	e1d330b2 	ldrh	r3, [r3, #2]
  120ee4:	e6ff2073 	uxth	r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  120ee8:	e30e3224 	movw	r3, #57892	; 0xe224
  120eec:	e3403014 	movt	r3, #20
  120ef0:	e5933000 	ldr	r3, [r3]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  120ef4:	e1d330b0 	ldrh	r3, [r3]
  120ef8:	e6ff3073 	uxth	r3, r3
  120efc:	e58d3004 	str	r3, [sp, #4]
  120f00:	e58d2000 	str	r2, [sp]
  120f04:	e59f3068 	ldr	r3, [pc, #104]	; 120f74 <tcp_input+0x104c>
  120f08:	e59f2060 	ldr	r2, [pc, #96]	; 120f70 <tcp_input+0x1048>
  120f0c:	eb00159e 	bl	12658c <tcp_rst>
    pbuf_free(p);
  120f10:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  120f14:	ebffe70c 	bl	11ab4c <pbuf_free>
  return;
  120f18:	ea000011 	b	120f64 <tcp_input+0x103c>
dropped:
  TCP_STATS_INC(tcp.drop);
  120f1c:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  120f20:	e3403057 	movt	r3, #87	; 0x57
  120f24:	e1d33bb2 	ldrh	r3, [r3, #178]	; 0xb2
  120f28:	e2833001 	add	r3, r3, #1
  120f2c:	e6ff2073 	uxth	r2, r3
  120f30:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  120f34:	e3403057 	movt	r3, #87	; 0x57
  120f38:	e1c32bb2 	strh	r2, [r3, #178]	; 0xb2
  MIB2_STATS_INC(mib2.tcpinerrs);
  120f3c:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  120f40:	e3403057 	movt	r3, #87	; 0x57
  120f44:	e5933188 	ldr	r3, [r3, #392]	; 0x188
  120f48:	e2832001 	add	r2, r3, #1
  120f4c:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  120f50:	e3403057 	movt	r3, #87	; 0x57
  120f54:	e5832188 	str	r2, [r3, #392]	; 0x188
  pbuf_free(p);
  120f58:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  120f5c:	ebffe6fa 	bl	11ab4c <pbuf_free>
  120f60:	ea000000 	b	120f68 <tcp_input+0x1040>
  return;
  120f64:	e320f000 	nop	{0}
}
  120f68:	e24bd008 	sub	sp, fp, #8
  120f6c:	e8bd8810 	pop	{r4, fp, pc}
  120f70:	0014ed7c 	.word	0x0014ed7c
  120f74:	0014ed78 	.word	0x0014ed78

00120f78 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
  120f78:	e92d4800 	push	{fp, lr}
  120f7c:	e28db004 	add	fp, sp, #4
  120f80:	e24dd020 	sub	sp, sp, #32
  120f84:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
  120f88:	e30e3240 	movw	r3, #57920	; 0xe240
  120f8c:	e3403014 	movt	r3, #20
  120f90:	e5d33000 	ldrb	r3, [r3]
  120f94:	e2033004 	and	r3, r3, #4
  120f98:	e3530000 	cmp	r3, #0
  120f9c:	1a0000c8 	bne	1212c4 <tcp_listen_input+0x34c>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
  120fa0:	e30e3240 	movw	r3, #57920	; 0xe240
  120fa4:	e3403014 	movt	r3, #20
  120fa8:	e5d33000 	ldrb	r3, [r3]
  120fac:	e2033010 	and	r3, r3, #16
  120fb0:	e3530000 	cmp	r3, #0
  120fb4:	0a00001a 	beq	121024 <tcp_listen_input+0xac>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  120fb8:	e30e3238 	movw	r3, #57912	; 0xe238
  120fbc:	e3403014 	movt	r3, #20
  120fc0:	e5930000 	ldr	r0, [r3]
  120fc4:	e30e323e 	movw	r3, #57918	; 0xe23e
  120fc8:	e3403014 	movt	r3, #20
  120fcc:	e1d330b0 	ldrh	r3, [r3]
  120fd0:	e1a02003 	mov	r2, r3
  120fd4:	e30e3234 	movw	r3, #57908	; 0xe234
  120fd8:	e3403014 	movt	r3, #20
  120fdc:	e5933000 	ldr	r3, [r3]
  120fe0:	e0821003 	add	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  120fe4:	e30e3224 	movw	r3, #57892	; 0xe224
  120fe8:	e3403014 	movt	r3, #20
  120fec:	e5933000 	ldr	r3, [r3]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  120ff0:	e1d330b2 	ldrh	r3, [r3, #2]
  120ff4:	e6ff2073 	uxth	r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  120ff8:	e30e3224 	movw	r3, #57892	; 0xe224
  120ffc:	e3403014 	movt	r3, #20
  121000:	e5933000 	ldr	r3, [r3]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121004:	e1d330b0 	ldrh	r3, [r3]
  121008:	e6ff3073 	uxth	r3, r3
  12100c:	e58d3004 	str	r3, [sp, #4]
  121010:	e58d2000 	str	r2, [sp]
  121014:	e59f32bc 	ldr	r3, [pc, #700]	; 1212d8 <tcp_listen_input+0x360>
  121018:	e59f22bc 	ldr	r2, [pc, #700]	; 1212dc <tcp_listen_input+0x364>
  12101c:	eb00155a 	bl	12658c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
  121020:	ea0000a9 	b	1212cc <tcp_listen_input+0x354>
  } else if (flags & TCP_SYN) {
  121024:	e30e3240 	movw	r3, #57920	; 0xe240
  121028:	e3403014 	movt	r3, #20
  12102c:	e5d33000 	ldrb	r3, [r3]
  121030:	e2033002 	and	r3, r3, #2
  121034:	e3530000 	cmp	r3, #0
  121038:	0a0000a3 	beq	1212cc <tcp_listen_input+0x354>
    npcb = tcp_alloc(pcb->prio);
  12103c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  121040:	e5d33018 	ldrb	r3, [r3, #24]
  121044:	e1a00003 	mov	r0, r3
  121048:	ebfff934 	bl	11f520 <tcp_alloc>
  12104c:	e50b0008 	str	r0, [fp, #-8]
    if (npcb == NULL) {
  121050:	e51b3008 	ldr	r3, [fp, #-8]
  121054:	e3530000 	cmp	r3, #0
  121058:	1a000018 	bne	1210c0 <tcp_listen_input+0x148>
      TCP_STATS_INC(tcp.memerr);
  12105c:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  121060:	e3403057 	movt	r3, #87	; 0x57
  121064:	e1d33bb8 	ldrh	r3, [r3, #184]	; 0xb8
  121068:	e2833001 	add	r3, r3, #1
  12106c:	e6ff2073 	uxth	r2, r3
  121070:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  121074:	e3403057 	movt	r3, #87	; 0x57
  121078:	e1c32bb8 	strh	r2, [r3, #184]	; 0xb8
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
  12107c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  121080:	e593301c 	ldr	r3, [r3, #28]
  121084:	e3530000 	cmp	r3, #0
  121088:	0a000009 	beq	1210b4 <tcp_listen_input+0x13c>
  12108c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  121090:	e593301c 	ldr	r3, [r3, #28]
  121094:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  121098:	e5920010 	ldr	r0, [r2, #16]
  12109c:	e3e02000 	mvn	r2, #0
  1210a0:	e3a01000 	mov	r1, #0
  1210a4:	e12fff33 	blx	r3
  1210a8:	e1a03000 	mov	r3, r0
  1210ac:	e54b300e 	strb	r3, [fp, #-14]
      return;
  1210b0:	ea000086 	b	1212d0 <tcp_listen_input+0x358>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
  1210b4:	e3e0300f 	mvn	r3, #15
  1210b8:	e54b300e 	strb	r3, [fp, #-14]
      return;
  1210bc:	ea000083 	b	1212d0 <tcp_listen_input+0x358>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
  1210c0:	e30e3d68 	movw	r3, #60776	; 0xed68
  1210c4:	e3403014 	movt	r3, #20
  1210c8:	e5932014 	ldr	r2, [r3, #20]
  1210cc:	e51b3008 	ldr	r3, [fp, #-8]
  1210d0:	e5832000 	str	r2, [r3]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
  1210d4:	e30e3d68 	movw	r3, #60776	; 0xed68
  1210d8:	e3403014 	movt	r3, #20
  1210dc:	e5932010 	ldr	r2, [r3, #16]
  1210e0:	e51b3008 	ldr	r3, [fp, #-8]
  1210e4:	e5832004 	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
  1210e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1210ec:	e1d321ba 	ldrh	r2, [r3, #26]
  1210f0:	e51b3008 	ldr	r3, [fp, #-8]
  1210f4:	e1c321ba 	strh	r2, [r3, #26]
    npcb->remote_port = tcphdr->src;
  1210f8:	e30e3224 	movw	r3, #57892	; 0xe224
  1210fc:	e3403014 	movt	r3, #20
  121100:	e5933000 	ldr	r3, [r3]
  121104:	e1d330b0 	ldrh	r3, [r3]
  121108:	e6ff2073 	uxth	r2, r3
  12110c:	e51b3008 	ldr	r3, [fp, #-8]
  121110:	e1c321bc 	strh	r2, [r3, #28]
    npcb->state = SYN_RCVD;
  121114:	e51b3008 	ldr	r3, [fp, #-8]
  121118:	e3a02003 	mov	r2, #3
  12111c:	e5832014 	str	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
  121120:	e30e3234 	movw	r3, #57908	; 0xe234
  121124:	e3403014 	movt	r3, #20
  121128:	e5933000 	ldr	r3, [r3]
  12112c:	e2832001 	add	r2, r3, #1
  121130:	e51b3008 	ldr	r3, [fp, #-8]
  121134:	e5832028 	str	r2, [r3, #40]	; 0x28
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
  121138:	e51b3008 	ldr	r3, [fp, #-8]
  12113c:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  121140:	e51b3008 	ldr	r3, [fp, #-8]
  121144:	e5832030 	str	r2, [r3, #48]	; 0x30
    iss = tcp_next_iss(npcb);
  121148:	e51b0008 	ldr	r0, [fp, #-8]
  12114c:	ebfffadb 	bl	11fcc0 <tcp_next_iss>
  121150:	e50b000c 	str	r0, [fp, #-12]
    npcb->snd_wl2 = iss;
  121154:	e51b3008 	ldr	r3, [fp, #-8]
  121158:	e51b200c 	ldr	r2, [fp, #-12]
  12115c:	e5832058 	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
  121160:	e51b3008 	ldr	r3, [fp, #-8]
  121164:	e51b200c 	ldr	r2, [fp, #-12]
  121168:	e5832050 	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
  12116c:	e51b3008 	ldr	r3, [fp, #-8]
  121170:	e51b200c 	ldr	r2, [fp, #-12]
  121174:	e5832048 	str	r2, [r3, #72]	; 0x48
    npcb->snd_lbb = iss;
  121178:	e51b3008 	ldr	r3, [fp, #-8]
  12117c:	e51b200c 	ldr	r2, [fp, #-12]
  121180:	e583205c 	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
  121184:	e30e3234 	movw	r3, #57908	; 0xe234
  121188:	e3403014 	movt	r3, #20
  12118c:	e5933000 	ldr	r3, [r3]
  121190:	e2432001 	sub	r2, r3, #1
  121194:	e51b3008 	ldr	r3, [fp, #-8]
  121198:	e5832054 	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
  12119c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1211a0:	e5932010 	ldr	r2, [r3, #16]
  1211a4:	e51b3008 	ldr	r3, [fp, #-8]
  1211a8:	e5832010 	str	r2, [r3, #16]
    npcb->listener = pcb;
  1211ac:	e51b3008 	ldr	r3, [fp, #-8]
  1211b0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1211b4:	e583207c 	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
  1211b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1211bc:	e5d33008 	ldrb	r3, [r3, #8]
  1211c0:	e203300c 	and	r3, r3, #12
  1211c4:	e6ef2073 	uxtb	r2, r3
  1211c8:	e51b3008 	ldr	r3, [fp, #-8]
  1211cc:	e5c32008 	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
  1211d0:	e30531b0 	movw	r3, #20912	; 0x51b0
  1211d4:	e3403057 	movt	r3, #87	; 0x57
  1211d8:	e5932000 	ldr	r2, [r3]
  1211dc:	e51b3008 	ldr	r3, [fp, #-8]
  1211e0:	e583200c 	str	r2, [r3, #12]
  1211e4:	e30531b0 	movw	r3, #20912	; 0x51b0
  1211e8:	e3403057 	movt	r3, #87	; 0x57
  1211ec:	e51b2008 	ldr	r2, [fp, #-8]
  1211f0:	e5832000 	str	r2, [r3]
  1211f4:	eb001737 	bl	126ed8 <tcp_timer_needed>
  1211f8:	e30531ac 	movw	r3, #20908	; 0x51ac
  1211fc:	e3403057 	movt	r3, #87	; 0x57
  121200:	e3a02001 	mov	r2, #1
  121204:	e5c32000 	strb	r2, [r3]
    tcp_parseopt(npcb);
  121208:	e51b0008 	ldr	r0, [fp, #-8]
  12120c:	eb000bf1 	bl	1241d8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
  121210:	e30e3224 	movw	r3, #57892	; 0xe224
  121214:	e3403014 	movt	r3, #20
  121218:	e5933000 	ldr	r3, [r3]
  12121c:	e1d330be 	ldrh	r3, [r3, #14]
  121220:	e6ff2073 	uxth	r2, r3
  121224:	e51b3008 	ldr	r3, [fp, #-8]
  121228:	e1c326b0 	strh	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
  12122c:	e51b3008 	ldr	r3, [fp, #-8]
  121230:	e1d326b0 	ldrh	r2, [r3, #96]	; 0x60
  121234:	e51b3008 	ldr	r3, [fp, #-8]
  121238:	e1c326b2 	strh	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
  12123c:	e51b3008 	ldr	r3, [fp, #-8]
  121240:	e1d323b6 	ldrh	r2, [r3, #54]	; 0x36
  121244:	e51b3008 	ldr	r3, [fp, #-8]
  121248:	e2833004 	add	r3, r3, #4
  12124c:	e1a01003 	mov	r1, r3
  121250:	e1a00002 	mov	r0, r2
  121254:	ebfffaae 	bl	11fd14 <tcp_eff_send_mss_impl>
  121258:	e1a03000 	mov	r3, r0
  12125c:	e1a02003 	mov	r2, r3
  121260:	e51b3008 	ldr	r3, [fp, #-8]
  121264:	e1c323b6 	strh	r2, [r3, #54]	; 0x36
    MIB2_STATS_INC(mib2.tcppassiveopens);
  121268:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12126c:	e3403057 	movt	r3, #87	; 0x57
  121270:	e5933170 	ldr	r3, [r3, #368]	; 0x170
  121274:	e2832001 	add	r2, r3, #1
  121278:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12127c:	e3403057 	movt	r3, #87	; 0x57
  121280:	e5832170 	str	r2, [r3, #368]	; 0x170
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
  121284:	e3a01012 	mov	r1, #18
  121288:	e51b0008 	ldr	r0, [fp, #-8]
  12128c:	eb001109 	bl	1256b8 <tcp_enqueue_flags>
  121290:	e1a03000 	mov	r3, r0
  121294:	e54b300d 	strb	r3, [fp, #-13]
    if (rc != ERR_OK) {
  121298:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12129c:	e3530000 	cmp	r3, #0
  1212a0:	0a000003 	beq	1212b4 <tcp_listen_input+0x33c>
      tcp_abandon(npcb, 0);
  1212a4:	e3a01000 	mov	r1, #0
  1212a8:	e51b0008 	ldr	r0, [fp, #-8]
  1212ac:	ebfff061 	bl	11d438 <tcp_abandon>
      return;
  1212b0:	ea000006 	b	1212d0 <tcp_listen_input+0x358>
    tcp_output(npcb);
  1212b4:	e51b0008 	ldr	r0, [fp, #-8]
  1212b8:	eb00124d 	bl	125bf4 <tcp_output>
  return;
  1212bc:	e320f000 	nop	{0}
  1212c0:	ea000001 	b	1212cc <tcp_listen_input+0x354>
    return;
  1212c4:	e320f000 	nop	{0}
  1212c8:	ea000000 	b	1212d0 <tcp_listen_input+0x358>
  return;
  1212cc:	e320f000 	nop	{0}
}
  1212d0:	e24bd004 	sub	sp, fp, #4
  1212d4:	e8bd8800 	pop	{fp, pc}
  1212d8:	0014ed78 	.word	0x0014ed78
  1212dc:	0014ed7c 	.word	0x0014ed7c

001212e0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
  1212e0:	e92d4800 	push	{fp, lr}
  1212e4:	e28db004 	add	fp, sp, #4
  1212e8:	e24dd010 	sub	sp, sp, #16
  1212ec:	e50b0008 	str	r0, [fp, #-8]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
  1212f0:	e30e3240 	movw	r3, #57920	; 0xe240
  1212f4:	e3403014 	movt	r3, #20
  1212f8:	e5d33000 	ldrb	r3, [r3]
  1212fc:	e2033004 	and	r3, r3, #4
  121300:	e3530000 	cmp	r3, #0
  121304:	1a00004d 	bne	121440 <tcp_timewait_input+0x160>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
  121308:	e30e3240 	movw	r3, #57920	; 0xe240
  12130c:	e3403014 	movt	r3, #20
  121310:	e5d33000 	ldrb	r3, [r3]
  121314:	e2033002 	and	r3, r3, #2
  121318:	e3530000 	cmp	r3, #0
  12131c:	0a00002d 	beq	1213d8 <tcp_timewait_input+0xf8>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
  121320:	e30e3234 	movw	r3, #57908	; 0xe234
  121324:	e3403014 	movt	r3, #20
  121328:	e5932000 	ldr	r2, [r3]
  12132c:	e51b3008 	ldr	r3, [fp, #-8]
  121330:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  121334:	e0423003 	sub	r3, r2, r3
  121338:	e3530000 	cmp	r3, #0
  12133c:	ba000030 	blt	121404 <tcp_timewait_input+0x124>
  121340:	e30e3234 	movw	r3, #57908	; 0xe234
  121344:	e3403014 	movt	r3, #20
  121348:	e5932000 	ldr	r2, [r3]
  12134c:	e51b3008 	ldr	r3, [fp, #-8]
  121350:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  121354:	e51b1008 	ldr	r1, [fp, #-8]
  121358:	e1d112bc 	ldrh	r1, [r1, #44]	; 0x2c
  12135c:	e0833001 	add	r3, r3, r1
  121360:	e0423003 	sub	r3, r2, r3
  121364:	e3530000 	cmp	r3, #0
  121368:	ca000025 	bgt	121404 <tcp_timewait_input+0x124>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  12136c:	e30e3238 	movw	r3, #57912	; 0xe238
  121370:	e3403014 	movt	r3, #20
  121374:	e5930000 	ldr	r0, [r3]
  121378:	e30e323e 	movw	r3, #57918	; 0xe23e
  12137c:	e3403014 	movt	r3, #20
  121380:	e1d330b0 	ldrh	r3, [r3]
  121384:	e1a02003 	mov	r2, r3
  121388:	e30e3234 	movw	r3, #57908	; 0xe234
  12138c:	e3403014 	movt	r3, #20
  121390:	e5933000 	ldr	r3, [r3]
  121394:	e0821003 	add	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  121398:	e30e3224 	movw	r3, #57892	; 0xe224
  12139c:	e3403014 	movt	r3, #20
  1213a0:	e5933000 	ldr	r3, [r3]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  1213a4:	e1d330b2 	ldrh	r3, [r3, #2]
  1213a8:	e6ff2073 	uxth	r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  1213ac:	e30e3224 	movw	r3, #57892	; 0xe224
  1213b0:	e3403014 	movt	r3, #20
  1213b4:	e5933000 	ldr	r3, [r3]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  1213b8:	e1d330b0 	ldrh	r3, [r3]
  1213bc:	e6ff3073 	uxth	r3, r3
  1213c0:	e58d3004 	str	r3, [sp, #4]
  1213c4:	e58d2000 	str	r2, [sp]
  1213c8:	e59f3084 	ldr	r3, [pc, #132]	; 121454 <tcp_timewait_input+0x174>
  1213cc:	e59f2084 	ldr	r2, [pc, #132]	; 121458 <tcp_timewait_input+0x178>
  1213d0:	eb00146d 	bl	12658c <tcp_rst>
      return;
  1213d4:	ea00001c 	b	12144c <tcp_timewait_input+0x16c>
    }
  } else if (flags & TCP_FIN) {
  1213d8:	e30e3240 	movw	r3, #57920	; 0xe240
  1213dc:	e3403014 	movt	r3, #20
  1213e0:	e5d33000 	ldrb	r3, [r3]
  1213e4:	e2033001 	and	r3, r3, #1
  1213e8:	e3530000 	cmp	r3, #0
  1213ec:	0a000004 	beq	121404 <tcp_timewait_input+0x124>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
  1213f0:	e30531b4 	movw	r3, #20916	; 0x51b4
  1213f4:	e3403057 	movt	r3, #87	; 0x57
  1213f8:	e5932000 	ldr	r2, [r3]
  1213fc:	e51b3008 	ldr	r3, [fp, #-8]
  121400:	e5832024 	str	r2, [r3, #36]	; 0x24
  }

  if ((tcplen > 0)) {
  121404:	e30e323e 	movw	r3, #57918	; 0xe23e
  121408:	e3403014 	movt	r3, #20
  12140c:	e1d330b0 	ldrh	r3, [r3]
  121410:	e3530000 	cmp	r3, #0
  121414:	0a00000b 	beq	121448 <tcp_timewait_input+0x168>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
  121418:	e51b3008 	ldr	r3, [fp, #-8]
  12141c:	e5d3301e 	ldrb	r3, [r3, #30]
  121420:	e3833002 	orr	r3, r3, #2
  121424:	e6ef2073 	uxtb	r2, r3
  121428:	e51b3008 	ldr	r3, [fp, #-8]
  12142c:	e5c3201e 	strb	r2, [r3, #30]
    tcp_output(pcb);
  121430:	e51b0008 	ldr	r0, [fp, #-8]
  121434:	eb0011ee 	bl	125bf4 <tcp_output>
  }
  return;
  121438:	e320f000 	nop	{0}
  12143c:	ea000001 	b	121448 <tcp_timewait_input+0x168>
    return;
  121440:	e320f000 	nop	{0}
  121444:	ea000000 	b	12144c <tcp_timewait_input+0x16c>
  return;
  121448:	e320f000 	nop	{0}
}
  12144c:	e24bd004 	sub	sp, fp, #4
  121450:	e8bd8800 	pop	{fp, pc}
  121454:	0014ed78 	.word	0x0014ed78
  121458:	0014ed7c 	.word	0x0014ed7c

0012145c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
  12145c:	e92d4800 	push	{fp, lr}
  121460:	e28db004 	add	fp, sp, #4
  121464:	e24dd028 	sub	sp, sp, #40	; 0x28
  121468:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
  12146c:	e3a03000 	mov	r3, #0
  121470:	e54b3009 	strb	r3, [fp, #-9]
  err_t err;

  err = ERR_OK;
  121474:	e3a03000 	mov	r3, #0
  121478:	e54b300a 	strb	r3, [fp, #-10]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
  12147c:	e30e3240 	movw	r3, #57920	; 0xe240
  121480:	e3403014 	movt	r3, #20
  121484:	e5d33000 	ldrb	r3, [r3]
  121488:	e2033004 	and	r3, r3, #4
  12148c:	e3530000 	cmp	r3, #0
  121490:	0a000050 	beq	1215d8 <tcp_process+0x17c>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
  121494:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121498:	e5933014 	ldr	r3, [r3, #20]
  12149c:	e3530002 	cmp	r3, #2
  1214a0:	1a000009 	bne	1214cc <tcp_process+0x70>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
  1214a4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1214a8:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  1214ac:	e30e3238 	movw	r3, #57912	; 0xe238
  1214b0:	e3403014 	movt	r3, #20
  1214b4:	e5933000 	ldr	r3, [r3]
  1214b8:	e1520003 	cmp	r2, r3
  1214bc:	1a000025 	bne	121558 <tcp_process+0xfc>
        acceptable = 1;
  1214c0:	e3a03001 	mov	r3, #1
  1214c4:	e54b3009 	strb	r3, [fp, #-9]
  1214c8:	ea000022 	b	121558 <tcp_process+0xfc>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
  1214cc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1214d0:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  1214d4:	e30e3234 	movw	r3, #57908	; 0xe234
  1214d8:	e3403014 	movt	r3, #20
  1214dc:	e5933000 	ldr	r3, [r3]
  1214e0:	e1520003 	cmp	r2, r3
  1214e4:	1a000002 	bne	1214f4 <tcp_process+0x98>
        acceptable = 1;
  1214e8:	e3a03001 	mov	r3, #1
  1214ec:	e54b3009 	strb	r3, [fp, #-9]
  1214f0:	ea000018 	b	121558 <tcp_process+0xfc>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
  1214f4:	e30e3234 	movw	r3, #57908	; 0xe234
  1214f8:	e3403014 	movt	r3, #20
  1214fc:	e5932000 	ldr	r2, [r3]
  121500:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121504:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  121508:	e0423003 	sub	r3, r2, r3
  12150c:	e3530000 	cmp	r3, #0
  121510:	ba000010 	blt	121558 <tcp_process+0xfc>
  121514:	e30e3234 	movw	r3, #57908	; 0xe234
  121518:	e3403014 	movt	r3, #20
  12151c:	e5932000 	ldr	r2, [r3]
  121520:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121524:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  121528:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  12152c:	e1d112bc 	ldrh	r1, [r1, #44]	; 0x2c
  121530:	e0833001 	add	r3, r3, r1
  121534:	e0423003 	sub	r3, r2, r3
  121538:	e3530000 	cmp	r3, #0
  12153c:	ca000005 	bgt	121558 <tcp_process+0xfc>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
  121540:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121544:	e5d3301e 	ldrb	r3, [r3, #30]
  121548:	e3833002 	orr	r3, r3, #2
  12154c:	e6ef2073 	uxtb	r2, r3
  121550:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121554:	e5c3201e 	strb	r2, [r3, #30]
      }
    }

    if (acceptable) {
  121558:	e55b3009 	ldrb	r3, [fp, #-9]
  12155c:	e3530000 	cmp	r3, #0
  121560:	0a00001a 	beq	1215d0 <tcp_process+0x174>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
  121564:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121568:	e5933014 	ldr	r3, [r3, #20]
  12156c:	e3530000 	cmp	r3, #0
  121570:	1a000006 	bne	121590 <tcp_process+0x134>
  121574:	e3070974 	movw	r0, #31092	; 0x7974
  121578:	e3400014 	movt	r0, #20
  12157c:	ebff86e4 	bl	103114 <rt_kprintf>
  121580:	e3a01fb5 	mov	r1, #724	; 0x2d4
  121584:	e30707f8 	movw	r0, #30712	; 0x77f8
  121588:	e3400014 	movt	r0, #20
  12158c:	ebffa560 	bl	10ab14 <sys_arch_assert>
      recv_flags |= TF_RESET;
  121590:	e30e3241 	movw	r3, #57921	; 0xe241
  121594:	e3403014 	movt	r3, #20
  121598:	e5d33000 	ldrb	r3, [r3]
  12159c:	e3833008 	orr	r3, r3, #8
  1215a0:	e6ef2073 	uxtb	r2, r3
  1215a4:	e30e3241 	movw	r3, #57921	; 0xe241
  1215a8:	e3403014 	movt	r3, #20
  1215ac:	e5c32000 	strb	r2, [r3]
      pcb->flags &= ~TF_ACK_DELAY;
  1215b0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1215b4:	e5d3301e 	ldrb	r3, [r3, #30]
  1215b8:	e3c33001 	bic	r3, r3, #1
  1215bc:	e6ef2073 	uxtb	r2, r3
  1215c0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1215c4:	e5c3201e 	strb	r2, [r3, #30]
      return ERR_RST;
  1215c8:	e3e0300d 	mvn	r3, #13
  1215cc:	ea0002fd 	b	1221c8 <tcp_process+0xd6c>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
  1215d0:	e3a03000 	mov	r3, #0
  1215d4:	ea0002fb 	b	1221c8 <tcp_process+0xd6c>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
  1215d8:	e30e3240 	movw	r3, #57920	; 0xe240
  1215dc:	e3403014 	movt	r3, #20
  1215e0:	e5d33000 	ldrb	r3, [r3]
  1215e4:	e2033002 	and	r3, r3, #2
  1215e8:	e3530000 	cmp	r3, #0
  1215ec:	0a00000f 	beq	121630 <tcp_process+0x1d4>
  1215f0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1215f4:	e5933014 	ldr	r3, [r3, #20]
  1215f8:	e3530002 	cmp	r3, #2
  1215fc:	0a00000b 	beq	121630 <tcp_process+0x1d4>
  121600:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121604:	e5933014 	ldr	r3, [r3, #20]
  121608:	e3530003 	cmp	r3, #3
  12160c:	0a000007 	beq	121630 <tcp_process+0x1d4>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
  121610:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121614:	e5d3301e 	ldrb	r3, [r3, #30]
  121618:	e3833002 	orr	r3, r3, #2
  12161c:	e6ef2073 	uxtb	r2, r3
  121620:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121624:	e5c3201e 	strb	r2, [r3, #30]
    return ERR_OK;
  121628:	e3a03000 	mov	r3, #0
  12162c:	ea0002e5 	b	1221c8 <tcp_process+0xd6c>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
  121630:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121634:	e5d3301e 	ldrb	r3, [r3, #30]
  121638:	e2033010 	and	r3, r3, #16
  12163c:	e3530000 	cmp	r3, #0
  121640:	1a000004 	bne	121658 <tcp_process+0x1fc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
  121644:	e30531b4 	movw	r3, #20916	; 0x51b4
  121648:	e3403057 	movt	r3, #87	; 0x57
  12164c:	e5932000 	ldr	r2, [r3]
  121650:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121654:	e5832024 	str	r2, [r3, #36]	; 0x24
  }
  pcb->keep_cnt_sent = 0;
  121658:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12165c:	e3a02000 	mov	r2, #0
  121660:	e5c320a2 	strb	r2, [r3, #162]	; 0xa2

  tcp_parseopt(pcb);
  121664:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  121668:	eb000ada 	bl	1241d8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
  12166c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121670:	e5933014 	ldr	r3, [r3, #20]
  121674:	e2433002 	sub	r3, r3, #2
  121678:	e3530007 	cmp	r3, #7
  12167c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  121680:	ea0002c0 	b	122188 <tcp_process+0xd2c>
  121684:	001216a4 	.word	0x001216a4
  121688:	001219f8 	.word	0x001219f8
  12168c:	00121c9c 	.word	0x00121c9c
  121690:	00121ce4 	.word	0x00121ce4
  121694:	00121ec4 	.word	0x00121ec4
  121698:	00121c9c 	.word	0x00121c9c
  12169c:	00121fe4 	.word	0x00121fe4
  1216a0:	00122118 	.word	0x00122118
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
  1216a4:	e30e3240 	movw	r3, #57920	; 0xe240
  1216a8:	e3403014 	movt	r3, #20
  1216ac:	e5d33000 	ldrb	r3, [r3]
  1216b0:	e2033010 	and	r3, r3, #16
  1216b4:	e3530000 	cmp	r3, #0
  1216b8:	0a0000a4 	beq	121950 <tcp_process+0x4f4>
  1216bc:	e30e3240 	movw	r3, #57920	; 0xe240
  1216c0:	e3403014 	movt	r3, #20
  1216c4:	e5d33000 	ldrb	r3, [r3]
  1216c8:	e2033002 	and	r3, r3, #2
  1216cc:	e3530000 	cmp	r3, #0
  1216d0:	0a00009e 	beq	121950 <tcp_process+0x4f4>
        && (ackno == pcb->lastack + 1)) {
  1216d4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1216d8:	e5933048 	ldr	r3, [r3, #72]	; 0x48
  1216dc:	e2832001 	add	r2, r3, #1
  1216e0:	e30e3238 	movw	r3, #57912	; 0xe238
  1216e4:	e3403014 	movt	r3, #20
  1216e8:	e5933000 	ldr	r3, [r3]
  1216ec:	e1520003 	cmp	r2, r3
  1216f0:	1a000096 	bne	121950 <tcp_process+0x4f4>
      pcb->rcv_nxt = seqno + 1;
  1216f4:	e30e3234 	movw	r3, #57908	; 0xe234
  1216f8:	e3403014 	movt	r3, #20
  1216fc:	e5933000 	ldr	r3, [r3]
  121700:	e2832001 	add	r2, r3, #1
  121704:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121708:	e5832028 	str	r2, [r3, #40]	; 0x28
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
  12170c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121710:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  121714:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121718:	e5832030 	str	r2, [r3, #48]	; 0x30
      pcb->lastack = ackno;
  12171c:	e30e3238 	movw	r3, #57912	; 0xe238
  121720:	e3403014 	movt	r3, #20
  121724:	e5932000 	ldr	r2, [r3]
  121728:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12172c:	e5832048 	str	r2, [r3, #72]	; 0x48
      pcb->snd_wnd = tcphdr->wnd;
  121730:	e30e3224 	movw	r3, #57892	; 0xe224
  121734:	e3403014 	movt	r3, #20
  121738:	e5933000 	ldr	r3, [r3]
  12173c:	e1d330be 	ldrh	r3, [r3, #14]
  121740:	e6ff2073 	uxth	r2, r3
  121744:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121748:	e1c326b0 	strh	r2, [r3, #96]	; 0x60
      pcb->snd_wnd_max = pcb->snd_wnd;
  12174c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121750:	e1d326b0 	ldrh	r2, [r3, #96]	; 0x60
  121754:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121758:	e1c326b2 	strh	r2, [r3, #98]	; 0x62
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
  12175c:	e30e3234 	movw	r3, #57908	; 0xe234
  121760:	e3403014 	movt	r3, #20
  121764:	e5933000 	ldr	r3, [r3]
  121768:	e2432001 	sub	r2, r3, #1
  12176c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121770:	e5832054 	str	r2, [r3, #84]	; 0x54
      pcb->state = ESTABLISHED;
  121774:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121778:	e3a02004 	mov	r2, #4
  12177c:	e5832014 	str	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
  121780:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121784:	e1d323b6 	ldrh	r2, [r3, #54]	; 0x36
  121788:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12178c:	e2833004 	add	r3, r3, #4
  121790:	e1a01003 	mov	r1, r3
  121794:	e1a00002 	mov	r0, r2
  121798:	ebfff95d 	bl	11fd14 <tcp_eff_send_mss_impl>
  12179c:	e1a03000 	mov	r3, r0
  1217a0:	e1a02003 	mov	r2, r3
  1217a4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1217a8:	e1c323b6 	strh	r2, [r3, #54]	; 0x36
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
  1217ac:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1217b0:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  1217b4:	e1a03083 	lsl	r3, r3, #1
  1217b8:	e301211c 	movw	r2, #4380	; 0x111c
  1217bc:	e1530002 	cmp	r3, r2
  1217c0:	21a02003 	movcs	r2, r3
  1217c4:	31a02002 	movcc	r2, r2
  1217c8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1217cc:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  1217d0:	e1a03103 	lsl	r3, r3, #2
  1217d4:	e1520003 	cmp	r2, r3
  1217d8:	31a03002 	movcc	r3, r2
  1217dc:	21a03003 	movcs	r3, r3
  1217e0:	e6ff2073 	uxth	r2, r3
  1217e4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1217e8:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
  1217ec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1217f0:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  1217f4:	e3530000 	cmp	r3, #0
  1217f8:	1a000006 	bne	121818 <tcp_process+0x3bc>
  1217fc:	e3070994 	movw	r0, #31124	; 0x7994
  121800:	e3400014 	movt	r0, #20
  121804:	ebff8642 	bl	103114 <rt_kprintf>
  121808:	e3001307 	movw	r1, #775	; 0x307
  12180c:	e30707f8 	movw	r0, #30712	; 0x77f8
  121810:	e3400014 	movt	r0, #20
  121814:	ebffa4be 	bl	10ab14 <sys_arch_assert>
      --pcb->snd_queuelen;
  121818:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12181c:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  121820:	e2433001 	sub	r3, r3, #1
  121824:	e6ff2073 	uxth	r2, r3
  121828:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12182c:	e1c326b6 	strh	r2, [r3, #102]	; 0x66
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
  121830:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121834:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  121838:	e50b3008 	str	r3, [fp, #-8]
      if (rseg == NULL) {
  12183c:	e51b3008 	ldr	r3, [fp, #-8]
  121840:	e3530000 	cmp	r3, #0
  121844:	1a000011 	bne	121890 <tcp_process+0x434>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
  121848:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12184c:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  121850:	e50b3008 	str	r3, [fp, #-8]
        LWIP_ASSERT("no segment to free", rseg != NULL);
  121854:	e51b3008 	ldr	r3, [fp, #-8]
  121858:	e3530000 	cmp	r3, #0
  12185c:	1a000006 	bne	12187c <tcp_process+0x420>
  121860:	e30709ac 	movw	r0, #31148	; 0x79ac
  121864:	e3400014 	movt	r0, #20
  121868:	ebff8629 	bl	103114 <rt_kprintf>
  12186c:	e300130f 	movw	r1, #783	; 0x30f
  121870:	e30707f8 	movw	r0, #30712	; 0x77f8
  121874:	e3400014 	movt	r0, #20
  121878:	ebffa4a5 	bl	10ab14 <sys_arch_assert>
        pcb->unsent = rseg->next;
  12187c:	e51b3008 	ldr	r3, [fp, #-8]
  121880:	e5932000 	ldr	r2, [r3]
  121884:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121888:	e583206c 	str	r2, [r3, #108]	; 0x6c
  12188c:	ea000003 	b	1218a0 <tcp_process+0x444>
      } else {
        pcb->unacked = rseg->next;
  121890:	e51b3008 	ldr	r3, [fp, #-8]
  121894:	e5932000 	ldr	r2, [r3]
  121898:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12189c:	e5832070 	str	r2, [r3, #112]	; 0x70
      }
      tcp_seg_free(rseg);
  1218a0:	e51b0008 	ldr	r0, [fp, #-8]
  1218a4:	ebfff61a 	bl	11f114 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
  1218a8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1218ac:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  1218b0:	e3530000 	cmp	r3, #0
  1218b4:	1a000003 	bne	1218c8 <tcp_process+0x46c>
        pcb->rtime = -1;
  1218b8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1218bc:	e3e02000 	mvn	r2, #0
  1218c0:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
  1218c4:	ea000005 	b	1218e0 <tcp_process+0x484>
      } else {
        pcb->rtime = 0;
  1218c8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1218cc:	e3a02000 	mov	r2, #0
  1218d0:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
        pcb->nrtx = 0;
  1218d4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1218d8:	e3a02000 	mov	r2, #0
  1218dc:	e5c32046 	strb	r2, [r3, #70]	; 0x46
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
  1218e0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1218e4:	e5933088 	ldr	r3, [r3, #136]	; 0x88
  1218e8:	e3530000 	cmp	r3, #0
  1218ec:	0a000009 	beq	121918 <tcp_process+0x4bc>
  1218f0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1218f4:	e5933088 	ldr	r3, [r3, #136]	; 0x88
  1218f8:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1218fc:	e5920010 	ldr	r0, [r2, #16]
  121900:	e3a02000 	mov	r2, #0
  121904:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  121908:	e12fff33 	blx	r3
  12190c:	e1a03000 	mov	r3, r0
  121910:	e54b300a 	strb	r3, [fp, #-10]
  121914:	ea000001 	b	121920 <tcp_process+0x4c4>
  121918:	e3a03000 	mov	r3, #0
  12191c:	e54b300a 	strb	r3, [fp, #-10]
      if (err == ERR_ABRT) {
  121920:	e15b30da 	ldrsb	r3, [fp, #-10]
  121924:	e373000d 	cmn	r3, #13
  121928:	1a000001 	bne	121934 <tcp_process+0x4d8>
        return ERR_ABRT;
  12192c:	e3e0300c 	mvn	r3, #12
  121930:	ea000224 	b	1221c8 <tcp_process+0xd6c>
      }
      tcp_ack_now(pcb);
  121934:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121938:	e5d3301e 	ldrb	r3, [r3, #30]
  12193c:	e3833002 	orr	r3, r3, #2
  121940:	e6ef2073 	uxtb	r2, r3
  121944:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121948:	e5c3201e 	strb	r2, [r3, #30]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
  12194c:	ea00020f 	b	122190 <tcp_process+0xd34>
    else if (flags & TCP_ACK) {
  121950:	e30e3240 	movw	r3, #57920	; 0xe240
  121954:	e3403014 	movt	r3, #20
  121958:	e5d33000 	ldrb	r3, [r3]
  12195c:	e2033010 	and	r3, r3, #16
  121960:	e3530000 	cmp	r3, #0
  121964:	0a000209 	beq	122190 <tcp_process+0xd34>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121968:	e30e3238 	movw	r3, #57912	; 0xe238
  12196c:	e3403014 	movt	r3, #20
  121970:	e5930000 	ldr	r0, [r3]
  121974:	e30e323e 	movw	r3, #57918	; 0xe23e
  121978:	e3403014 	movt	r3, #20
  12197c:	e1d330b0 	ldrh	r3, [r3]
  121980:	e1a02003 	mov	r2, r3
  121984:	e30e3234 	movw	r3, #57908	; 0xe234
  121988:	e3403014 	movt	r3, #20
  12198c:	e5933000 	ldr	r3, [r3]
  121990:	e0821003 	add	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  121994:	e30e3224 	movw	r3, #57892	; 0xe224
  121998:	e3403014 	movt	r3, #20
  12199c:	e5933000 	ldr	r3, [r3]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  1219a0:	e1d330b2 	ldrh	r3, [r3, #2]
  1219a4:	e6ff2073 	uxth	r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  1219a8:	e30e3224 	movw	r3, #57892	; 0xe224
  1219ac:	e3403014 	movt	r3, #20
  1219b0:	e5933000 	ldr	r3, [r3]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  1219b4:	e1d330b0 	ldrh	r3, [r3]
  1219b8:	e6ff3073 	uxth	r3, r3
  1219bc:	e58d3004 	str	r3, [sp, #4]
  1219c0:	e58d2000 	str	r2, [sp]
  1219c4:	e59f3808 	ldr	r3, [pc, #2056]	; 1221d4 <tcp_process+0xd78>
  1219c8:	e59f2808 	ldr	r2, [pc, #2056]	; 1221d8 <tcp_process+0xd7c>
  1219cc:	eb0012ee 	bl	12658c <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
  1219d0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1219d4:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  1219d8:	e3530003 	cmp	r3, #3
  1219dc:	8a0001eb 	bhi	122190 <tcp_process+0xd34>
        pcb->rtime = 0;
  1219e0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1219e4:	e3a02000 	mov	r2, #0
  1219e8:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
        tcp_rexmit_rto(pcb);
  1219ec:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1219f0:	eb001361 	bl	12677c <tcp_rexmit_rto>
    break;
  1219f4:	ea0001e5 	b	122190 <tcp_process+0xd34>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
  1219f8:	e30e3240 	movw	r3, #57920	; 0xe240
  1219fc:	e3403014 	movt	r3, #20
  121a00:	e5d33000 	ldrb	r3, [r3]
  121a04:	e2033010 	and	r3, r3, #16
  121a08:	e3530000 	cmp	r3, #0
  121a0c:	0a000090 	beq	121c54 <tcp_process+0x7f8>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
  121a10:	e30e3238 	movw	r3, #57912	; 0xe238
  121a14:	e3403014 	movt	r3, #20
  121a18:	e5932000 	ldr	r2, [r3]
  121a1c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121a20:	e5933048 	ldr	r3, [r3, #72]	; 0x48
  121a24:	e0423003 	sub	r3, r2, r3
  121a28:	e2433001 	sub	r3, r3, #1
  121a2c:	e3530000 	cmp	r3, #0
  121a30:	ba00006c 	blt	121be8 <tcp_process+0x78c>
  121a34:	e30e3238 	movw	r3, #57912	; 0xe238
  121a38:	e3403014 	movt	r3, #20
  121a3c:	e5932000 	ldr	r2, [r3]
  121a40:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121a44:	e5933050 	ldr	r3, [r3, #80]	; 0x50
  121a48:	e0423003 	sub	r3, r2, r3
  121a4c:	e3530000 	cmp	r3, #0
  121a50:	ca000064 	bgt	121be8 <tcp_process+0x78c>
        pcb->state = ESTABLISHED;
  121a54:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121a58:	e3a02004 	mov	r2, #4
  121a5c:	e5832014 	str	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
  121a60:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121a64:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  121a68:	e3530000 	cmp	r3, #0
  121a6c:	0a00000b 	beq	121aa0 <tcp_process+0x644>
  121a70:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121a74:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  121a78:	e593301c 	ldr	r3, [r3, #28]
  121a7c:	e3530000 	cmp	r3, #0
  121a80:	1a000006 	bne	121aa0 <tcp_process+0x644>
  121a84:	e30709c0 	movw	r0, #31168	; 0x79c0
  121a88:	e3400014 	movt	r0, #20
  121a8c:	ebff85a0 	bl	103114 <rt_kprintf>
  121a90:	e300133e 	movw	r1, #830	; 0x33e
  121a94:	e30707f8 	movw	r0, #30712	; 0x77f8
  121a98:	e3400014 	movt	r0, #20
  121a9c:	ebffa41c 	bl	10ab14 <sys_arch_assert>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
  121aa0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121aa4:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  121aa8:	e3530000 	cmp	r3, #0
  121aac:	1a000002 	bne	121abc <tcp_process+0x660>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
  121ab0:	e3e03005 	mvn	r3, #5
  121ab4:	e54b300a 	strb	r3, [fp, #-10]
  121ab8:	ea000011 	b	121b04 <tcp_process+0x6a8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
  121abc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121ac0:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  121ac4:	e593301c 	ldr	r3, [r3, #28]
  121ac8:	e3530000 	cmp	r3, #0
  121acc:	0a00000a 	beq	121afc <tcp_process+0x6a0>
  121ad0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121ad4:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  121ad8:	e593301c 	ldr	r3, [r3, #28]
  121adc:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  121ae0:	e5920010 	ldr	r0, [r2, #16]
  121ae4:	e3a02000 	mov	r2, #0
  121ae8:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  121aec:	e12fff33 	blx	r3
  121af0:	e1a03000 	mov	r3, r0
  121af4:	e54b300a 	strb	r3, [fp, #-10]
  121af8:	ea000001 	b	121b04 <tcp_process+0x6a8>
  121afc:	e3e0300f 	mvn	r3, #15
  121b00:	e54b300a 	strb	r3, [fp, #-10]
        }
        if (err != ERR_OK) {
  121b04:	e15b30da 	ldrsb	r3, [fp, #-10]
  121b08:	e3530000 	cmp	r3, #0
  121b0c:	0a000006 	beq	121b2c <tcp_process+0x6d0>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
  121b10:	e15b30da 	ldrsb	r3, [fp, #-10]
  121b14:	e373000d 	cmn	r3, #13
  121b18:	0a000001 	beq	121b24 <tcp_process+0x6c8>
            tcp_abort(pcb);
  121b1c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  121b20:	ebffeee3 	bl	11d6b4 <tcp_abort>
          }
          return ERR_ABRT;
  121b24:	e3e0300c 	mvn	r3, #12
  121b28:	ea0001a6 	b	1221c8 <tcp_process+0xd6c>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
  121b2c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  121b30:	eb000217 	bl	122394 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
  121b34:	e30e323c 	movw	r3, #57916	; 0xe23c
  121b38:	e3403014 	movt	r3, #20
  121b3c:	e1d330b0 	ldrh	r3, [r3]
  121b40:	e3530000 	cmp	r3, #0
  121b44:	0a000007 	beq	121b68 <tcp_process+0x70c>
          recv_acked--;
  121b48:	e30e323c 	movw	r3, #57916	; 0xe23c
  121b4c:	e3403014 	movt	r3, #20
  121b50:	e1d330b0 	ldrh	r3, [r3]
  121b54:	e2433001 	sub	r3, r3, #1
  121b58:	e6ff2073 	uxth	r2, r3
  121b5c:	e30e323c 	movw	r3, #57916	; 0xe23c
  121b60:	e3403014 	movt	r3, #20
  121b64:	e1c320b0 	strh	r2, [r3]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
  121b68:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121b6c:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  121b70:	e1a03083 	lsl	r3, r3, #1
  121b74:	e301211c 	movw	r2, #4380	; 0x111c
  121b78:	e1530002 	cmp	r3, r2
  121b7c:	21a02003 	movcs	r2, r3
  121b80:	31a02002 	movcc	r2, r2
  121b84:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121b88:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  121b8c:	e1a03103 	lsl	r3, r3, #2
  121b90:	e1520003 	cmp	r2, r3
  121b94:	31a03002 	movcc	r3, r2
  121b98:	21a03003 	movcs	r3, r3
  121b9c:	e6ff2073 	uxth	r2, r3
  121ba0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121ba4:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
  121ba8:	e30e3241 	movw	r3, #57921	; 0xe241
  121bac:	e3403014 	movt	r3, #20
  121bb0:	e5d33000 	ldrb	r3, [r3]
  121bb4:	e2033020 	and	r3, r3, #32
  121bb8:	e3530000 	cmp	r3, #0
  121bbc:	0a000035 	beq	121c98 <tcp_process+0x83c>
          tcp_ack_now(pcb);
  121bc0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121bc4:	e5d3301e 	ldrb	r3, [r3, #30]
  121bc8:	e3833002 	orr	r3, r3, #2
  121bcc:	e6ef2073 	uxtb	r2, r3
  121bd0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121bd4:	e5c3201e 	strb	r2, [r3, #30]
          pcb->state = CLOSE_WAIT;
  121bd8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121bdc:	e3a02007 	mov	r2, #7
  121be0:	e5832014 	str	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
  121be4:	ea00002b 	b	121c98 <tcp_process+0x83c>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121be8:	e30e3238 	movw	r3, #57912	; 0xe238
  121bec:	e3403014 	movt	r3, #20
  121bf0:	e5930000 	ldr	r0, [r3]
  121bf4:	e30e323e 	movw	r3, #57918	; 0xe23e
  121bf8:	e3403014 	movt	r3, #20
  121bfc:	e1d330b0 	ldrh	r3, [r3]
  121c00:	e1a02003 	mov	r2, r3
  121c04:	e30e3234 	movw	r3, #57908	; 0xe234
  121c08:	e3403014 	movt	r3, #20
  121c0c:	e5933000 	ldr	r3, [r3]
  121c10:	e0821003 	add	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  121c14:	e30e3224 	movw	r3, #57892	; 0xe224
  121c18:	e3403014 	movt	r3, #20
  121c1c:	e5933000 	ldr	r3, [r3]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121c20:	e1d330b2 	ldrh	r3, [r3, #2]
  121c24:	e6ff2073 	uxth	r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  121c28:	e30e3224 	movw	r3, #57892	; 0xe224
  121c2c:	e3403014 	movt	r3, #20
  121c30:	e5933000 	ldr	r3, [r3]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121c34:	e1d330b0 	ldrh	r3, [r3]
  121c38:	e6ff3073 	uxth	r3, r3
  121c3c:	e58d3004 	str	r3, [sp, #4]
  121c40:	e58d2000 	str	r2, [sp]
  121c44:	e59f3588 	ldr	r3, [pc, #1416]	; 1221d4 <tcp_process+0xd78>
  121c48:	e59f2588 	ldr	r2, [pc, #1416]	; 1221d8 <tcp_process+0xd7c>
  121c4c:	eb00124e 	bl	12658c <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
  121c50:	ea000150 	b	122198 <tcp_process+0xd3c>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
  121c54:	e30e3240 	movw	r3, #57920	; 0xe240
  121c58:	e3403014 	movt	r3, #20
  121c5c:	e5d33000 	ldrb	r3, [r3]
  121c60:	e2033002 	and	r3, r3, #2
  121c64:	e3530000 	cmp	r3, #0
  121c68:	0a00014a 	beq	122198 <tcp_process+0xd3c>
  121c6c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121c70:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  121c74:	e2432001 	sub	r2, r3, #1
  121c78:	e30e3234 	movw	r3, #57908	; 0xe234
  121c7c:	e3403014 	movt	r3, #20
  121c80:	e5933000 	ldr	r3, [r3]
  121c84:	e1520003 	cmp	r2, r3
  121c88:	1a000142 	bne	122198 <tcp_process+0xd3c>
      tcp_rexmit(pcb);
  121c8c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  121c90:	eb0012ea 	bl	126840 <tcp_rexmit>
    break;
  121c94:	ea00013f 	b	122198 <tcp_process+0xd3c>
  121c98:	ea00013e 	b	122198 <tcp_process+0xd3c>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
  121c9c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  121ca0:	eb0001bb 	bl	122394 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
  121ca4:	e30e3241 	movw	r3, #57921	; 0xe241
  121ca8:	e3403014 	movt	r3, #20
  121cac:	e5d33000 	ldrb	r3, [r3]
  121cb0:	e2033020 	and	r3, r3, #32
  121cb4:	e3530000 	cmp	r3, #0
  121cb8:	0a000138 	beq	1221a0 <tcp_process+0xd44>
      tcp_ack_now(pcb);
  121cbc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121cc0:	e5d3301e 	ldrb	r3, [r3, #30]
  121cc4:	e3833002 	orr	r3, r3, #2
  121cc8:	e6ef2073 	uxtb	r2, r3
  121ccc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121cd0:	e5c3201e 	strb	r2, [r3, #30]
      pcb->state = CLOSE_WAIT;
  121cd4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121cd8:	e3a02007 	mov	r2, #7
  121cdc:	e5832014 	str	r2, [r3, #20]
    }
    break;
  121ce0:	ea00012e 	b	1221a0 <tcp_process+0xd44>
  case FIN_WAIT_1:
    tcp_receive(pcb);
  121ce4:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  121ce8:	eb0001a9 	bl	122394 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
  121cec:	e30e3241 	movw	r3, #57921	; 0xe241
  121cf0:	e3403014 	movt	r3, #20
  121cf4:	e5d33000 	ldrb	r3, [r3]
  121cf8:	e2033020 	and	r3, r3, #32
  121cfc:	e3530000 	cmp	r3, #0
  121d00:	0a00005a 	beq	121e70 <tcp_process+0xa14>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
  121d04:	e30e3240 	movw	r3, #57920	; 0xe240
  121d08:	e3403014 	movt	r3, #20
  121d0c:	e5d33000 	ldrb	r3, [r3]
  121d10:	e2033010 	and	r3, r3, #16
  121d14:	e3530000 	cmp	r3, #0
  121d18:	0a00004a 	beq	121e48 <tcp_process+0x9ec>
  121d1c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121d20:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  121d24:	e30e3238 	movw	r3, #57912	; 0xe238
  121d28:	e3403014 	movt	r3, #20
  121d2c:	e5933000 	ldr	r3, [r3]
  121d30:	e1520003 	cmp	r2, r3
  121d34:	1a000043 	bne	121e48 <tcp_process+0x9ec>
          pcb->unsent == NULL) {
  121d38:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121d3c:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
  121d40:	e3530000 	cmp	r3, #0
  121d44:	1a00003f 	bne	121e48 <tcp_process+0x9ec>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
  121d48:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121d4c:	e5d3301e 	ldrb	r3, [r3, #30]
  121d50:	e3833002 	orr	r3, r3, #2
  121d54:	e6ef2073 	uxtb	r2, r3
  121d58:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121d5c:	e5c3201e 	strb	r2, [r3, #30]
        tcp_pcb_purge(pcb);
  121d60:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  121d64:	ebfff72f 	bl	11fa28 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
  121d68:	e30531b0 	movw	r3, #20912	; 0x51b0
  121d6c:	e3403057 	movt	r3, #87	; 0x57
  121d70:	e5933000 	ldr	r3, [r3]
  121d74:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  121d78:	e1520003 	cmp	r2, r3
  121d7c:	1a000007 	bne	121da0 <tcp_process+0x944>
  121d80:	e30531b0 	movw	r3, #20912	; 0x51b0
  121d84:	e3403057 	movt	r3, #87	; 0x57
  121d88:	e5933000 	ldr	r3, [r3]
  121d8c:	e593200c 	ldr	r2, [r3, #12]
  121d90:	e30531b0 	movw	r3, #20912	; 0x51b0
  121d94:	e3403057 	movt	r3, #87	; 0x57
  121d98:	e5832000 	str	r2, [r3]
  121d9c:	ea000014 	b	121df4 <tcp_process+0x998>
  121da0:	e30531b0 	movw	r3, #20912	; 0x51b0
  121da4:	e3403057 	movt	r3, #87	; 0x57
  121da8:	e5933000 	ldr	r3, [r3]
  121dac:	e50b3010 	str	r3, [fp, #-16]
  121db0:	ea00000c 	b	121de8 <tcp_process+0x98c>
  121db4:	e51b3010 	ldr	r3, [fp, #-16]
  121db8:	e593300c 	ldr	r3, [r3, #12]
  121dbc:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  121dc0:	e1520003 	cmp	r2, r3
  121dc4:	1a000004 	bne	121ddc <tcp_process+0x980>
  121dc8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121dcc:	e593200c 	ldr	r2, [r3, #12]
  121dd0:	e51b3010 	ldr	r3, [fp, #-16]
  121dd4:	e583200c 	str	r2, [r3, #12]
  121dd8:	ea000005 	b	121df4 <tcp_process+0x998>
  121ddc:	e51b3010 	ldr	r3, [fp, #-16]
  121de0:	e593300c 	ldr	r3, [r3, #12]
  121de4:	e50b3010 	str	r3, [fp, #-16]
  121de8:	e51b3010 	ldr	r3, [fp, #-16]
  121dec:	e3530000 	cmp	r3, #0
  121df0:	1affffef 	bne	121db4 <tcp_process+0x958>
  121df4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121df8:	e3a02000 	mov	r2, #0
  121dfc:	e583200c 	str	r2, [r3, #12]
  121e00:	e30531ac 	movw	r3, #20908	; 0x51ac
  121e04:	e3403057 	movt	r3, #87	; 0x57
  121e08:	e3a02001 	mov	r2, #1
  121e0c:	e5c32000 	strb	r2, [r3]
        pcb->state = TIME_WAIT;
  121e10:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121e14:	e3a0200a 	mov	r2, #10
  121e18:	e5832014 	str	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
  121e1c:	e30531c0 	movw	r3, #20928	; 0x51c0
  121e20:	e3403057 	movt	r3, #87	; 0x57
  121e24:	e5932000 	ldr	r2, [r3]
  121e28:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121e2c:	e583200c 	str	r2, [r3, #12]
  121e30:	e30531c0 	movw	r3, #20928	; 0x51c0
  121e34:	e3403057 	movt	r3, #87	; 0x57
  121e38:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  121e3c:	e5832000 	str	r2, [r3]
  121e40:	eb001424 	bl	126ed8 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
  121e44:	ea0000d7 	b	1221a8 <tcp_process+0xd4c>
        tcp_ack_now(pcb);
  121e48:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121e4c:	e5d3301e 	ldrb	r3, [r3, #30]
  121e50:	e3833002 	orr	r3, r3, #2
  121e54:	e6ef2073 	uxtb	r2, r3
  121e58:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121e5c:	e5c3201e 	strb	r2, [r3, #30]
        pcb->state = CLOSING;
  121e60:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121e64:	e3a02008 	mov	r2, #8
  121e68:	e5832014 	str	r2, [r3, #20]
    break;
  121e6c:	ea0000cd 	b	1221a8 <tcp_process+0xd4c>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
  121e70:	e30e3240 	movw	r3, #57920	; 0xe240
  121e74:	e3403014 	movt	r3, #20
  121e78:	e5d33000 	ldrb	r3, [r3]
  121e7c:	e2033010 	and	r3, r3, #16
  121e80:	e3530000 	cmp	r3, #0
  121e84:	0a0000c7 	beq	1221a8 <tcp_process+0xd4c>
  121e88:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121e8c:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  121e90:	e30e3238 	movw	r3, #57912	; 0xe238
  121e94:	e3403014 	movt	r3, #20
  121e98:	e5933000 	ldr	r3, [r3]
  121e9c:	e1520003 	cmp	r2, r3
  121ea0:	1a0000c0 	bne	1221a8 <tcp_process+0xd4c>
               pcb->unsent == NULL) {
  121ea4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121ea8:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
  121eac:	e3530000 	cmp	r3, #0
  121eb0:	1a0000bc 	bne	1221a8 <tcp_process+0xd4c>
      pcb->state = FIN_WAIT_2;
  121eb4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121eb8:	e3a02006 	mov	r2, #6
  121ebc:	e5832014 	str	r2, [r3, #20]
    break;
  121ec0:	ea0000b8 	b	1221a8 <tcp_process+0xd4c>
  case FIN_WAIT_2:
    tcp_receive(pcb);
  121ec4:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  121ec8:	eb000131 	bl	122394 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
  121ecc:	e30e3241 	movw	r3, #57921	; 0xe241
  121ed0:	e3403014 	movt	r3, #20
  121ed4:	e5d33000 	ldrb	r3, [r3]
  121ed8:	e2033020 	and	r3, r3, #32
  121edc:	e3530000 	cmp	r3, #0
  121ee0:	0a0000b2 	beq	1221b0 <tcp_process+0xd54>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
  121ee4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121ee8:	e5d3301e 	ldrb	r3, [r3, #30]
  121eec:	e3833002 	orr	r3, r3, #2
  121ef0:	e6ef2073 	uxtb	r2, r3
  121ef4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121ef8:	e5c3201e 	strb	r2, [r3, #30]
      tcp_pcb_purge(pcb);
  121efc:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  121f00:	ebfff6c8 	bl	11fa28 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
  121f04:	e30531b0 	movw	r3, #20912	; 0x51b0
  121f08:	e3403057 	movt	r3, #87	; 0x57
  121f0c:	e5933000 	ldr	r3, [r3]
  121f10:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  121f14:	e1520003 	cmp	r2, r3
  121f18:	1a000007 	bne	121f3c <tcp_process+0xae0>
  121f1c:	e30531b0 	movw	r3, #20912	; 0x51b0
  121f20:	e3403057 	movt	r3, #87	; 0x57
  121f24:	e5933000 	ldr	r3, [r3]
  121f28:	e593200c 	ldr	r2, [r3, #12]
  121f2c:	e30531b0 	movw	r3, #20912	; 0x51b0
  121f30:	e3403057 	movt	r3, #87	; 0x57
  121f34:	e5832000 	str	r2, [r3]
  121f38:	ea000014 	b	121f90 <tcp_process+0xb34>
  121f3c:	e30531b0 	movw	r3, #20912	; 0x51b0
  121f40:	e3403057 	movt	r3, #87	; 0x57
  121f44:	e5933000 	ldr	r3, [r3]
  121f48:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  121f4c:	ea00000c 	b	121f84 <tcp_process+0xb28>
  121f50:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  121f54:	e593300c 	ldr	r3, [r3, #12]
  121f58:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  121f5c:	e1520003 	cmp	r2, r3
  121f60:	1a000004 	bne	121f78 <tcp_process+0xb1c>
  121f64:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121f68:	e593200c 	ldr	r2, [r3, #12]
  121f6c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  121f70:	e583200c 	str	r2, [r3, #12]
  121f74:	ea000005 	b	121f90 <tcp_process+0xb34>
  121f78:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  121f7c:	e593300c 	ldr	r3, [r3, #12]
  121f80:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  121f84:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  121f88:	e3530000 	cmp	r3, #0
  121f8c:	1affffef 	bne	121f50 <tcp_process+0xaf4>
  121f90:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121f94:	e3a02000 	mov	r2, #0
  121f98:	e583200c 	str	r2, [r3, #12]
  121f9c:	e30531ac 	movw	r3, #20908	; 0x51ac
  121fa0:	e3403057 	movt	r3, #87	; 0x57
  121fa4:	e3a02001 	mov	r2, #1
  121fa8:	e5c32000 	strb	r2, [r3]
      pcb->state = TIME_WAIT;
  121fac:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121fb0:	e3a0200a 	mov	r2, #10
  121fb4:	e5832014 	str	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
  121fb8:	e30531c0 	movw	r3, #20928	; 0x51c0
  121fbc:	e3403057 	movt	r3, #87	; 0x57
  121fc0:	e5932000 	ldr	r2, [r3]
  121fc4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121fc8:	e583200c 	str	r2, [r3, #12]
  121fcc:	e30531c0 	movw	r3, #20928	; 0x51c0
  121fd0:	e3403057 	movt	r3, #87	; 0x57
  121fd4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  121fd8:	e5832000 	str	r2, [r3]
  121fdc:	eb0013bd 	bl	126ed8 <tcp_timer_needed>
    }
    break;
  121fe0:	ea000072 	b	1221b0 <tcp_process+0xd54>
  case CLOSING:
    tcp_receive(pcb);
  121fe4:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  121fe8:	eb0000e9 	bl	122394 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
  121fec:	e30e3240 	movw	r3, #57920	; 0xe240
  121ff0:	e3403014 	movt	r3, #20
  121ff4:	e5d33000 	ldrb	r3, [r3]
  121ff8:	e2033010 	and	r3, r3, #16
  121ffc:	e3530000 	cmp	r3, #0
  122000:	0a00006c 	beq	1221b8 <tcp_process+0xd5c>
  122004:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122008:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  12200c:	e30e3238 	movw	r3, #57912	; 0xe238
  122010:	e3403014 	movt	r3, #20
  122014:	e5933000 	ldr	r3, [r3]
  122018:	e1520003 	cmp	r2, r3
  12201c:	1a000065 	bne	1221b8 <tcp_process+0xd5c>
  122020:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122024:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122028:	e3530000 	cmp	r3, #0
  12202c:	1a000061 	bne	1221b8 <tcp_process+0xd5c>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
  122030:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  122034:	ebfff67b 	bl	11fa28 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
  122038:	e30531b0 	movw	r3, #20912	; 0x51b0
  12203c:	e3403057 	movt	r3, #87	; 0x57
  122040:	e5933000 	ldr	r3, [r3]
  122044:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  122048:	e1520003 	cmp	r2, r3
  12204c:	1a000007 	bne	122070 <tcp_process+0xc14>
  122050:	e30531b0 	movw	r3, #20912	; 0x51b0
  122054:	e3403057 	movt	r3, #87	; 0x57
  122058:	e5933000 	ldr	r3, [r3]
  12205c:	e593200c 	ldr	r2, [r3, #12]
  122060:	e30531b0 	movw	r3, #20912	; 0x51b0
  122064:	e3403057 	movt	r3, #87	; 0x57
  122068:	e5832000 	str	r2, [r3]
  12206c:	ea000014 	b	1220c4 <tcp_process+0xc68>
  122070:	e30531b0 	movw	r3, #20912	; 0x51b0
  122074:	e3403057 	movt	r3, #87	; 0x57
  122078:	e5933000 	ldr	r3, [r3]
  12207c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  122080:	ea00000c 	b	1220b8 <tcp_process+0xc5c>
  122084:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122088:	e593300c 	ldr	r3, [r3, #12]
  12208c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  122090:	e1520003 	cmp	r2, r3
  122094:	1a000004 	bne	1220ac <tcp_process+0xc50>
  122098:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12209c:	e593200c 	ldr	r2, [r3, #12]
  1220a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1220a4:	e583200c 	str	r2, [r3, #12]
  1220a8:	ea000005 	b	1220c4 <tcp_process+0xc68>
  1220ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1220b0:	e593300c 	ldr	r3, [r3, #12]
  1220b4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  1220b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1220bc:	e3530000 	cmp	r3, #0
  1220c0:	1affffef 	bne	122084 <tcp_process+0xc28>
  1220c4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1220c8:	e3a02000 	mov	r2, #0
  1220cc:	e583200c 	str	r2, [r3, #12]
  1220d0:	e30531ac 	movw	r3, #20908	; 0x51ac
  1220d4:	e3403057 	movt	r3, #87	; 0x57
  1220d8:	e3a02001 	mov	r2, #1
  1220dc:	e5c32000 	strb	r2, [r3]
      pcb->state = TIME_WAIT;
  1220e0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1220e4:	e3a0200a 	mov	r2, #10
  1220e8:	e5832014 	str	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
  1220ec:	e30531c0 	movw	r3, #20928	; 0x51c0
  1220f0:	e3403057 	movt	r3, #87	; 0x57
  1220f4:	e5932000 	ldr	r2, [r3]
  1220f8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1220fc:	e583200c 	str	r2, [r3, #12]
  122100:	e30531c0 	movw	r3, #20928	; 0x51c0
  122104:	e3403057 	movt	r3, #87	; 0x57
  122108:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  12210c:	e5832000 	str	r2, [r3]
  122110:	eb001370 	bl	126ed8 <tcp_timer_needed>
    }
    break;
  122114:	ea000027 	b	1221b8 <tcp_process+0xd5c>
  case LAST_ACK:
    tcp_receive(pcb);
  122118:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  12211c:	eb00009c 	bl	122394 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
  122120:	e30e3240 	movw	r3, #57920	; 0xe240
  122124:	e3403014 	movt	r3, #20
  122128:	e5d33000 	ldrb	r3, [r3]
  12212c:	e2033010 	and	r3, r3, #16
  122130:	e3530000 	cmp	r3, #0
  122134:	0a000021 	beq	1221c0 <tcp_process+0xd64>
  122138:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12213c:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  122140:	e30e3238 	movw	r3, #57912	; 0xe238
  122144:	e3403014 	movt	r3, #20
  122148:	e5933000 	ldr	r3, [r3]
  12214c:	e1520003 	cmp	r2, r3
  122150:	1a00001a 	bne	1221c0 <tcp_process+0xd64>
  122154:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122158:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  12215c:	e3530000 	cmp	r3, #0
  122160:	1a000016 	bne	1221c0 <tcp_process+0xd64>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
  122164:	e30e3241 	movw	r3, #57921	; 0xe241
  122168:	e3403014 	movt	r3, #20
  12216c:	e5d33000 	ldrb	r3, [r3]
  122170:	e3833010 	orr	r3, r3, #16
  122174:	e6ef2073 	uxtb	r2, r3
  122178:	e30e3241 	movw	r3, #57921	; 0xe241
  12217c:	e3403014 	movt	r3, #20
  122180:	e5c32000 	strb	r2, [r3]
    }
    break;
  122184:	ea00000d 	b	1221c0 <tcp_process+0xd64>
  default:
    break;
  122188:	e320f000 	nop	{0}
  12218c:	ea00000c 	b	1221c4 <tcp_process+0xd68>
    break;
  122190:	e320f000 	nop	{0}
  122194:	ea00000a 	b	1221c4 <tcp_process+0xd68>
    break;
  122198:	e320f000 	nop	{0}
  12219c:	ea000008 	b	1221c4 <tcp_process+0xd68>
    break;
  1221a0:	e320f000 	nop	{0}
  1221a4:	ea000006 	b	1221c4 <tcp_process+0xd68>
    break;
  1221a8:	e320f000 	nop	{0}
  1221ac:	ea000004 	b	1221c4 <tcp_process+0xd68>
    break;
  1221b0:	e320f000 	nop	{0}
  1221b4:	ea000002 	b	1221c4 <tcp_process+0xd68>
    break;
  1221b8:	e320f000 	nop	{0}
  1221bc:	ea000000 	b	1221c4 <tcp_process+0xd68>
    break;
  1221c0:	e320f000 	nop	{0}
  }
  return ERR_OK;
  1221c4:	e3a03000 	mov	r3, #0
}
  1221c8:	e1a00003 	mov	r0, r3
  1221cc:	e24bd004 	sub	sp, fp, #4
  1221d0:	e8bd8800 	pop	{fp, pc}
  1221d4:	0014ed78 	.word	0x0014ed78
  1221d8:	0014ed7c 	.word	0x0014ed7c

001221dc <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
  1221dc:	e92d4810 	push	{r4, fp, lr}
  1221e0:	e28db008 	add	fp, sp, #8
  1221e4:	e24dd014 	sub	sp, sp, #20
  1221e8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1221ec:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
  1221f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1221f4:	e593300c 	ldr	r3, [r3, #12]
  1221f8:	e1d330bc 	ldrh	r3, [r3, #12]
  1221fc:	e6ff3073 	uxth	r3, r3
  122200:	e1a00003 	mov	r0, r3
  122204:	ebffd019 	bl	116270 <lwip_htons>
  122208:	e1a03000 	mov	r3, r0
  12220c:	e2033001 	and	r3, r3, #1
  122210:	e3530000 	cmp	r3, #0
  122214:	0a000022 	beq	1222a4 <tcp_oos_insert_segment+0xc8>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
  122218:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12221c:	ebfff3aa 	bl	11f0cc <tcp_segs_free>
    next = NULL;
  122220:	e3a03000 	mov	r3, #0
  122224:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  122228:	ea000053 	b	12237c <tcp_oos_insert_segment+0x1a0>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
  12222c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  122230:	e593300c 	ldr	r3, [r3, #12]
  122234:	e1d330bc 	ldrh	r3, [r3, #12]
  122238:	e6ff3073 	uxth	r3, r3
  12223c:	e1a00003 	mov	r0, r3
  122240:	ebffd00a 	bl	116270 <lwip_htons>
  122244:	e1a03000 	mov	r3, r0
  122248:	e2033001 	and	r3, r3, #1
  12224c:	e3530000 	cmp	r3, #0
  122250:	0a00000c 	beq	122288 <tcp_oos_insert_segment+0xac>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
  122254:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122258:	e593300c 	ldr	r3, [r3, #12]
  12225c:	e1d330bc 	ldrh	r3, [r3, #12]
  122260:	e6ff4073 	uxth	r4, r3
  122264:	e3a00001 	mov	r0, #1
  122268:	ebffd000 	bl	116270 <lwip_htons>
  12226c:	e1a03000 	mov	r3, r0
  122270:	e1a02003 	mov	r2, r3
  122274:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122278:	e593300c 	ldr	r3, [r3, #12]
  12227c:	e1842002 	orr	r2, r4, r2
  122280:	e6ff2072 	uxth	r2, r2
  122284:	e1c320bc 	strh	r2, [r3, #12]
      }
      old_seg = next;
  122288:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12228c:	e50b3010 	str	r3, [fp, #-16]
      next = next->next;
  122290:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  122294:	e5933000 	ldr	r3, [r3]
  122298:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
      tcp_seg_free(old_seg);
  12229c:	e51b0010 	ldr	r0, [fp, #-16]
  1222a0:	ebfff39b 	bl	11f114 <tcp_seg_free>
    while (next &&
  1222a4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1222a8:	e3530000 	cmp	r3, #0
  1222ac:	0a00000f 	beq	1222f0 <tcp_oos_insert_segment+0x114>
           TCP_SEQ_GEQ((seqno + cseg->len),
  1222b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1222b4:	e1d330b8 	ldrh	r3, [r3, #8]
  1222b8:	e1a02003 	mov	r2, r3
  1222bc:	e30e3234 	movw	r3, #57908	; 0xe234
  1222c0:	e3403014 	movt	r3, #20
  1222c4:	e5933000 	ldr	r3, [r3]
  1222c8:	e0822003 	add	r2, r2, r3
  1222cc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1222d0:	e593300c 	ldr	r3, [r3, #12]
  1222d4:	e5933004 	ldr	r3, [r3, #4]
  1222d8:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1222dc:	e1d110b8 	ldrh	r1, [r1, #8]
  1222e0:	e0833001 	add	r3, r3, r1
  1222e4:	e0423003 	sub	r3, r2, r3
    while (next &&
  1222e8:	e3530000 	cmp	r3, #0
  1222ec:	aaffffce 	bge	12222c <tcp_oos_insert_segment+0x50>
    }
    if (next &&
  1222f0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1222f4:	e3530000 	cmp	r3, #0
  1222f8:	0a00001f 	beq	12237c <tcp_oos_insert_segment+0x1a0>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
  1222fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122300:	e1d330b8 	ldrh	r3, [r3, #8]
  122304:	e1a02003 	mov	r2, r3
  122308:	e30e3234 	movw	r3, #57908	; 0xe234
  12230c:	e3403014 	movt	r3, #20
  122310:	e5933000 	ldr	r3, [r3]
  122314:	e0822003 	add	r2, r2, r3
  122318:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12231c:	e593300c 	ldr	r3, [r3, #12]
  122320:	e5933004 	ldr	r3, [r3, #4]
  122324:	e0423003 	sub	r3, r2, r3
    if (next &&
  122328:	e3530000 	cmp	r3, #0
  12232c:	da000012 	ble	12237c <tcp_oos_insert_segment+0x1a0>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
  122330:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  122334:	e593300c 	ldr	r3, [r3, #12]
  122338:	e5933004 	ldr	r3, [r3, #4]
  12233c:	e6ff2073 	uxth	r2, r3
  122340:	e30e3234 	movw	r3, #57908	; 0xe234
  122344:	e3403014 	movt	r3, #20
  122348:	e5933000 	ldr	r3, [r3]
  12234c:	e6ff3073 	uxth	r3, r3
  122350:	e0423003 	sub	r3, r2, r3
  122354:	e6ff2073 	uxth	r2, r3
  122358:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12235c:	e1c320b8 	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
  122360:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122364:	e5932004 	ldr	r2, [r3, #4]
  122368:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12236c:	e1d330b8 	ldrh	r3, [r3, #8]
  122370:	e1a01003 	mov	r1, r3
  122374:	e1a00002 	mov	r0, r2
  122378:	ebffe0aa 	bl	11a628 <pbuf_realloc>
    }
  }
  cseg->next = next;
  12237c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122380:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  122384:	e5832000 	str	r2, [r3]
}
  122388:	e320f000 	nop	{0}
  12238c:	e24bd008 	sub	sp, fp, #8
  122390:	e8bd8810 	pop	{r4, fp, pc}

00122394 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
  122394:	e92d4870 	push	{r4, r5, r6, fp, lr}
  122398:	e28db010 	add	fp, sp, #16
  12239c:	e24dd034 	sub	sp, sp, #52	; 0x34
  1223a0:	e50b0040 	str	r0, [fp, #-64]	; 0xffffffc0
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
  1223a4:	e3a03000 	mov	r3, #0
  1223a8:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
  1223ac:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1223b0:	e5933014 	ldr	r3, [r3, #20]
  1223b4:	e3530003 	cmp	r3, #3
  1223b8:	8a000006 	bhi	1223d8 <tcp_receive+0x44>
  1223bc:	e30709e0 	movw	r0, #31200	; 0x79e0
  1223c0:	e3400014 	movt	r0, #20
  1223c4:	ebff8352 	bl	103114 <rt_kprintf>
  1223c8:	e30013f5 	movw	r1, #1013	; 0x3f5
  1223cc:	e30707f8 	movw	r0, #30712	; 0x77f8
  1223d0:	e3400014 	movt	r0, #20
  1223d4:	ebffa1ce 	bl	10ab14 <sys_arch_assert>

  if (flags & TCP_ACK) {
  1223d8:	e30e3240 	movw	r3, #57920	; 0xe240
  1223dc:	e3403014 	movt	r3, #20
  1223e0:	e5d33000 	ldrb	r3, [r3]
  1223e4:	e2033010 	and	r3, r3, #16
  1223e8:	e3530000 	cmp	r3, #0
  1223ec:	0a000268 	beq	122d94 <tcp_receive+0xa00>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
  1223f0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1223f4:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  1223f8:	e1a02003 	mov	r2, r3
  1223fc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122400:	e5933058 	ldr	r3, [r3, #88]	; 0x58
  122404:	e0823003 	add	r3, r2, r3
  122408:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
  12240c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122410:	e5932054 	ldr	r2, [r3, #84]	; 0x54
  122414:	e30e3234 	movw	r3, #57908	; 0xe234
  122418:	e3403014 	movt	r3, #20
  12241c:	e5933000 	ldr	r3, [r3]
  122420:	e0423003 	sub	r3, r2, r3
  122424:	e3530000 	cmp	r3, #0
  122428:	ba00001e 	blt	1224a8 <tcp_receive+0x114>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
  12242c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122430:	e5932054 	ldr	r2, [r3, #84]	; 0x54
  122434:	e30e3234 	movw	r3, #57908	; 0xe234
  122438:	e3403014 	movt	r3, #20
  12243c:	e5933000 	ldr	r3, [r3]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
  122440:	e1520003 	cmp	r2, r3
  122444:	1a000007 	bne	122468 <tcp_receive+0xd4>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
  122448:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12244c:	e5932058 	ldr	r2, [r3, #88]	; 0x58
  122450:	e30e3238 	movw	r3, #57912	; 0xe238
  122454:	e3403014 	movt	r3, #20
  122458:	e5933000 	ldr	r3, [r3]
  12245c:	e0423003 	sub	r3, r2, r3
  122460:	e3530000 	cmp	r3, #0
  122464:	ba00000f 	blt	1224a8 <tcp_receive+0x114>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
  122468:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12246c:	e5932058 	ldr	r2, [r3, #88]	; 0x58
  122470:	e30e3238 	movw	r3, #57912	; 0xe238
  122474:	e3403014 	movt	r3, #20
  122478:	e5933000 	ldr	r3, [r3]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
  12247c:	e1520003 	cmp	r2, r3
  122480:	1a000039 	bne	12256c <tcp_receive+0x1d8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
  122484:	e30e3224 	movw	r3, #57892	; 0xe224
  122488:	e3403014 	movt	r3, #20
  12248c:	e5933000 	ldr	r3, [r3]
  122490:	e1d330be 	ldrh	r3, [r3, #14]
  122494:	e6ff2073 	uxth	r2, r3
  122498:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12249c:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  1224a0:	e1520003 	cmp	r2, r3
  1224a4:	9a000030 	bls	12256c <tcp_receive+0x1d8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
  1224a8:	e30e3224 	movw	r3, #57892	; 0xe224
  1224ac:	e3403014 	movt	r3, #20
  1224b0:	e5933000 	ldr	r3, [r3]
  1224b4:	e1d330be 	ldrh	r3, [r3, #14]
  1224b8:	e6ff2073 	uxth	r2, r3
  1224bc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1224c0:	e1c326b0 	strh	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
  1224c4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1224c8:	e1d326b2 	ldrh	r2, [r3, #98]	; 0x62
  1224cc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1224d0:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  1224d4:	e1520003 	cmp	r2, r3
  1224d8:	2a000003 	bcs	1224ec <tcp_receive+0x158>
        pcb->snd_wnd_max = pcb->snd_wnd;
  1224dc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1224e0:	e1d326b0 	ldrh	r2, [r3, #96]	; 0x60
  1224e4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1224e8:	e1c326b2 	strh	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
  1224ec:	e30e3234 	movw	r3, #57908	; 0xe234
  1224f0:	e3403014 	movt	r3, #20
  1224f4:	e5932000 	ldr	r2, [r3]
  1224f8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1224fc:	e5832054 	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
  122500:	e30e3238 	movw	r3, #57912	; 0xe238
  122504:	e3403014 	movt	r3, #20
  122508:	e5932000 	ldr	r2, [r3]
  12250c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122510:	e5832058 	str	r2, [r3, #88]	; 0x58
      if (pcb->snd_wnd == 0) {
  122514:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122518:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  12251c:	e3530000 	cmp	r3, #0
  122520:	1a00000a 	bne	122550 <tcp_receive+0x1bc>
        if (pcb->persist_backoff == 0) {
  122524:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122528:	e5d330a1 	ldrb	r3, [r3, #161]	; 0xa1
  12252c:	e3530000 	cmp	r3, #0
  122530:	1a00000d 	bne	12256c <tcp_receive+0x1d8>
          /* start persist timer */
          pcb->persist_cnt = 0;
  122534:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122538:	e3a02000 	mov	r2, #0
  12253c:	e5c320a0 	strb	r2, [r3, #160]	; 0xa0
          pcb->persist_backoff = 1;
  122540:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122544:	e3a02001 	mov	r2, #1
  122548:	e5c320a1 	strb	r2, [r3, #161]	; 0xa1
  12254c:	ea000006 	b	12256c <tcp_receive+0x1d8>
        }
      } else if (pcb->persist_backoff > 0) {
  122550:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122554:	e5d330a1 	ldrb	r3, [r3, #161]	; 0xa1
  122558:	e3530000 	cmp	r3, #0
  12255c:	0a000002 	beq	12256c <tcp_receive+0x1d8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
  122560:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122564:	e3a02000 	mov	r2, #0
  122568:	e5c320a1 	strb	r2, [r3, #161]	; 0xa1
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
  12256c:	e30e3238 	movw	r3, #57912	; 0xe238
  122570:	e3403014 	movt	r3, #20
  122574:	e5932000 	ldr	r2, [r3]
  122578:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12257c:	e5933048 	ldr	r3, [r3, #72]	; 0x48
  122580:	e0423003 	sub	r3, r2, r3
  122584:	e3530000 	cmp	r3, #0
  122588:	ca000047 	bgt	1226ac <tcp_receive+0x318>
      /* Clause 2 */
      if (tcplen == 0) {
  12258c:	e30e323e 	movw	r3, #57918	; 0xe23e
  122590:	e3403014 	movt	r3, #20
  122594:	e1d330b0 	ldrh	r3, [r3]
  122598:	e3530000 	cmp	r3, #0
  12259c:	1a00003b 	bne	122690 <tcp_receive+0x2fc>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
  1225a0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1225a4:	e5933058 	ldr	r3, [r3, #88]	; 0x58
  1225a8:	e51b2040 	ldr	r2, [fp, #-64]	; 0xffffffc0
  1225ac:	e1d226b0 	ldrh	r2, [r2, #96]	; 0x60
  1225b0:	e0833002 	add	r3, r3, r2
  1225b4:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  1225b8:	e1520003 	cmp	r2, r3
  1225bc:	1a000033 	bne	122690 <tcp_receive+0x2fc>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
  1225c0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1225c4:	e1d333f4 	ldrsh	r3, [r3, #52]	; 0x34
  1225c8:	e3530000 	cmp	r3, #0
  1225cc:	ba00002f 	blt	122690 <tcp_receive+0x2fc>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
  1225d0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1225d4:	e5932048 	ldr	r2, [r3, #72]	; 0x48
  1225d8:	e30e3238 	movw	r3, #57912	; 0xe238
  1225dc:	e3403014 	movt	r3, #20
  1225e0:	e5933000 	ldr	r3, [r3]
  1225e4:	e1520003 	cmp	r2, r3
  1225e8:	1a000028 	bne	122690 <tcp_receive+0x2fc>
              found_dupack = 1;
  1225ec:	e3a03001 	mov	r3, #1
  1225f0:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
  1225f4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1225f8:	e5d33047 	ldrb	r3, [r3, #71]	; 0x47
  1225fc:	e35300ff 	cmp	r3, #255	; 0xff
  122600:	0a000005 	beq	12261c <tcp_receive+0x288>
                ++pcb->dupacks;
  122604:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122608:	e5d33047 	ldrb	r3, [r3, #71]	; 0x47
  12260c:	e2833001 	add	r3, r3, #1
  122610:	e6ef2073 	uxtb	r2, r3
  122614:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122618:	e5c32047 	strb	r2, [r3, #71]	; 0x47
              }
              if (pcb->dupacks > 3) {
  12261c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122620:	e5d33047 	ldrb	r3, [r3, #71]	; 0x47
  122624:	e3530003 	cmp	r3, #3
  122628:	9a000012 	bls	122678 <tcp_receive+0x2e4>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
  12262c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122630:	e1d324bc 	ldrh	r2, [r3, #76]	; 0x4c
  122634:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122638:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  12263c:	e0823003 	add	r3, r2, r3
  122640:	e6ff2073 	uxth	r2, r3
  122644:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122648:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  12264c:	e1520003 	cmp	r2, r3
  122650:	9a00000e 	bls	122690 <tcp_receive+0x2fc>
                  pcb->cwnd += pcb->mss;
  122654:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122658:	e1d324bc 	ldrh	r2, [r3, #76]	; 0x4c
  12265c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122660:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  122664:	e0823003 	add	r3, r2, r3
  122668:	e6ff2073 	uxth	r2, r3
  12266c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122670:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
  122674:	ea000005 	b	122690 <tcp_receive+0x2fc>
                }
              } else if (pcb->dupacks == 3) {
  122678:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12267c:	e5d33047 	ldrb	r3, [r3, #71]	; 0x47
  122680:	e3530003 	cmp	r3, #3
  122684:	1a000001 	bne	122690 <tcp_receive+0x2fc>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
  122688:	e51b0040 	ldr	r0, [fp, #-64]	; 0xffffffc0
  12268c:	eb0010bb 	bl	126980 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
  122690:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  122694:	e3530000 	cmp	r3, #0
  122698:	1a000136 	bne	122b78 <tcp_receive+0x7e4>
        pcb->dupacks = 0;
  12269c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1226a0:	e3a02000 	mov	r2, #0
  1226a4:	e5c32047 	strb	r2, [r3, #71]	; 0x47
  1226a8:	ea000132 	b	122b78 <tcp_receive+0x7e4>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
  1226ac:	e30e3238 	movw	r3, #57912	; 0xe238
  1226b0:	e3403014 	movt	r3, #20
  1226b4:	e5932000 	ldr	r2, [r3]
  1226b8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1226bc:	e5933048 	ldr	r3, [r3, #72]	; 0x48
  1226c0:	e0423003 	sub	r3, r2, r3
  1226c4:	e2433001 	sub	r3, r3, #1
  1226c8:	e3530000 	cmp	r3, #0
  1226cc:	ba0000dc 	blt	122a44 <tcp_receive+0x6b0>
  1226d0:	e30e3238 	movw	r3, #57912	; 0xe238
  1226d4:	e3403014 	movt	r3, #20
  1226d8:	e5932000 	ldr	r2, [r3]
  1226dc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1226e0:	e5933050 	ldr	r3, [r3, #80]	; 0x50
  1226e4:	e0423003 	sub	r3, r2, r3
  1226e8:	e3530000 	cmp	r3, #0
  1226ec:	ca0000d4 	bgt	122a44 <tcp_receive+0x6b0>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
  1226f0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1226f4:	e5d3301e 	ldrb	r3, [r3, #30]
  1226f8:	e2033004 	and	r3, r3, #4
  1226fc:	e3530000 	cmp	r3, #0
  122700:	0a000009 	beq	12272c <tcp_receive+0x398>
        pcb->flags &= ~TF_INFR;
  122704:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122708:	e5d3301e 	ldrb	r3, [r3, #30]
  12270c:	e3c33004 	bic	r3, r3, #4
  122710:	e6ef2073 	uxtb	r2, r3
  122714:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122718:	e5c3201e 	strb	r2, [r3, #30]
        pcb->cwnd = pcb->ssthresh;
  12271c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122720:	e1d324be 	ldrh	r2, [r3, #78]	; 0x4e
  122724:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122728:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
  12272c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122730:	e3a02000 	mov	r2, #0
  122734:	e5c32046 	strb	r2, [r3, #70]	; 0x46

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
  122738:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12273c:	e1d334f0 	ldrsh	r3, [r3, #64]	; 0x40
  122740:	e1a031c3 	asr	r3, r3, #3
  122744:	e6bf3073 	sxth	r3, r3
  122748:	e6ff2073 	uxth	r2, r3
  12274c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122750:	e1d334f2 	ldrsh	r3, [r3, #66]	; 0x42
  122754:	e6ff3073 	uxth	r3, r3
  122758:	e0823003 	add	r3, r2, r3
  12275c:	e6ff3073 	uxth	r3, r3
  122760:	e6bf2073 	sxth	r2, r3
  122764:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122768:	e1c324b4 	strh	r2, [r3, #68]	; 0x44

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
  12276c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122770:	e3a02000 	mov	r2, #0
  122774:	e5c32047 	strb	r2, [r3, #71]	; 0x47
      pcb->lastack = ackno;
  122778:	e30e3238 	movw	r3, #57912	; 0xe238
  12277c:	e3403014 	movt	r3, #20
  122780:	e5932000 	ldr	r2, [r3]
  122784:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122788:	e5832048 	str	r2, [r3, #72]	; 0x48

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
  12278c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122790:	e5933014 	ldr	r3, [r3, #20]
  122794:	e3530003 	cmp	r3, #3
  122798:	9a000075 	bls	122974 <tcp_receive+0x5e0>
        if (pcb->cwnd < pcb->ssthresh) {
  12279c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1227a0:	e1d324bc 	ldrh	r2, [r3, #76]	; 0x4c
  1227a4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1227a8:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  1227ac:	e1520003 	cmp	r2, r3
  1227b0:	2a000012 	bcs	122800 <tcp_receive+0x46c>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
  1227b4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1227b8:	e1d324bc 	ldrh	r2, [r3, #76]	; 0x4c
  1227bc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1227c0:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  1227c4:	e0823003 	add	r3, r2, r3
  1227c8:	e6ff2073 	uxth	r2, r3
  1227cc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1227d0:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  1227d4:	e1520003 	cmp	r2, r3
  1227d8:	9a000065 	bls	122974 <tcp_receive+0x5e0>
            pcb->cwnd += pcb->mss;
  1227dc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1227e0:	e1d324bc 	ldrh	r2, [r3, #76]	; 0x4c
  1227e4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1227e8:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  1227ec:	e0823003 	add	r3, r2, r3
  1227f0:	e6ff2073 	uxth	r2, r3
  1227f4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1227f8:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
  1227fc:	ea00005c 	b	122974 <tcp_receive+0x5e0>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
  122800:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122804:	e1d344bc 	ldrh	r4, [r3, #76]	; 0x4c
  122808:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12280c:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  122810:	e1a02003 	mov	r2, r3
  122814:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122818:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  12281c:	e0020293 	mul	r2, r3, r2
  122820:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122824:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  122828:	e1a01003 	mov	r1, r3
  12282c:	e1a00002 	mov	r0, r2
  122830:	eb005631 	bl	1380fc <__divsi3>
  122834:	e1a03000 	mov	r3, r0
  122838:	e6ff3073 	uxth	r3, r3
  12283c:	e0843003 	add	r3, r4, r3
  122840:	e14b33b2 	strh	r3, [fp, #-50]	; 0xffffffce
          if (new_cwnd > pcb->cwnd) {
  122844:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122848:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  12284c:	e15b23b2 	ldrh	r2, [fp, #-50]	; 0xffffffce
  122850:	e1520003 	cmp	r2, r3
  122854:	9a000046 	bls	122974 <tcp_receive+0x5e0>
            pcb->cwnd = new_cwnd;
  122858:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12285c:	e15b23b2 	ldrh	r2, [fp, #-50]	; 0xffffffce
  122860:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
  122864:	ea000042 	b	122974 <tcp_receive+0x5e0>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
  122868:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12286c:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  122870:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        pcb->unacked = pcb->unacked->next;
  122874:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122878:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  12287c:	e5932000 	ldr	r2, [r3]
  122880:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122884:	e5832070 	str	r2, [r3, #112]	; 0x70

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
  122888:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12288c:	e1d346b6 	ldrh	r4, [r3, #102]	; 0x66
  122890:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122894:	e5933004 	ldr	r3, [r3, #4]
  122898:	e1a00003 	mov	r0, r3
  12289c:	ebffe12f 	bl	11ad60 <pbuf_clen>
  1228a0:	e1a03000 	mov	r3, r0
  1228a4:	e1540003 	cmp	r4, r3
  1228a8:	2a000006 	bcs	1228c8 <tcp_receive+0x534>
  1228ac:	e30709fc 	movw	r0, #31228	; 0x79fc
  1228b0:	e3400014 	movt	r0, #20
  1228b4:	ebff8216 	bl	103114 <rt_kprintf>
  1228b8:	e300148b 	movw	r1, #1163	; 0x48b
  1228bc:	e30707f8 	movw	r0, #30712	; 0x77f8
  1228c0:	e3400014 	movt	r0, #20
  1228c4:	ebffa092 	bl	10ab14 <sys_arch_assert>

        pcb->snd_queuelen -= pbuf_clen(next->p);
  1228c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1228cc:	e5933004 	ldr	r3, [r3, #4]
  1228d0:	e1a00003 	mov	r0, r3
  1228d4:	ebffe121 	bl	11ad60 <pbuf_clen>
  1228d8:	e1a03000 	mov	r3, r0
  1228dc:	e1a02003 	mov	r2, r3
  1228e0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1228e4:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  1228e8:	e0433002 	sub	r3, r3, r2
  1228ec:	e6ff2073 	uxth	r2, r3
  1228f0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1228f4:	e1c326b6 	strh	r2, [r3, #102]	; 0x66
        recv_acked += next->len;
  1228f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1228fc:	e1d320b8 	ldrh	r2, [r3, #8]
  122900:	e30e323c 	movw	r3, #57916	; 0xe23c
  122904:	e3403014 	movt	r3, #20
  122908:	e1d330b0 	ldrh	r3, [r3]
  12290c:	e0823003 	add	r3, r2, r3
  122910:	e6ff2073 	uxth	r2, r3
  122914:	e30e323c 	movw	r3, #57916	; 0xe23c
  122918:	e3403014 	movt	r3, #20
  12291c:	e1c320b0 	strh	r2, [r3]
        tcp_seg_free(next);
  122920:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  122924:	ebfff1fa 	bl	11f114 <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
  122928:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12292c:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  122930:	e3530000 	cmp	r3, #0
  122934:	0a00000e 	beq	122974 <tcp_receive+0x5e0>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
  122938:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12293c:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  122940:	e3530000 	cmp	r3, #0
  122944:	1a00000a 	bne	122974 <tcp_receive+0x5e0>
  122948:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12294c:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122950:	e3530000 	cmp	r3, #0
  122954:	1a000006 	bne	122974 <tcp_receive+0x5e0>
  122958:	e3070a24 	movw	r0, #31268	; 0x7a24
  12295c:	e3400014 	movt	r0, #20
  122960:	ebff81eb 	bl	103114 <rt_kprintf>
  122964:	e3001494 	movw	r1, #1172	; 0x494
  122968:	e30707f8 	movw	r0, #30712	; 0x77f8
  12296c:	e3400014 	movt	r0, #20
  122970:	ebffa067 	bl	10ab14 <sys_arch_assert>
      while (pcb->unacked != NULL &&
  122974:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122978:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  12297c:	e3530000 	cmp	r3, #0
  122980:	0a000020 	beq	122a08 <tcp_receive+0x674>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
  122984:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122988:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  12298c:	e593300c 	ldr	r3, [r3, #12]
  122990:	e5933004 	ldr	r3, [r3, #4]
  122994:	e1a00003 	mov	r0, r3
  122998:	ebffce40 	bl	1162a0 <lwip_htonl>
  12299c:	e1a04000 	mov	r4, r0
  1229a0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1229a4:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  1229a8:	e1d330b8 	ldrh	r3, [r3, #8]
  1229ac:	e1a05003 	mov	r5, r3
  1229b0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1229b4:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  1229b8:	e593300c 	ldr	r3, [r3, #12]
  1229bc:	e1d330bc 	ldrh	r3, [r3, #12]
  1229c0:	e6ff3073 	uxth	r3, r3
  1229c4:	e1a00003 	mov	r0, r3
  1229c8:	ebffce28 	bl	116270 <lwip_htons>
  1229cc:	e1a03000 	mov	r3, r0
  1229d0:	e2033003 	and	r3, r3, #3
  1229d4:	e3530000 	cmp	r3, #0
  1229d8:	0a000001 	beq	1229e4 <tcp_receive+0x650>
  1229dc:	e3a03001 	mov	r3, #1
  1229e0:	ea000000 	b	1229e8 <tcp_receive+0x654>
  1229e4:	e3a03000 	mov	r3, #0
  1229e8:	e0833005 	add	r3, r3, r5
  1229ec:	e0842003 	add	r2, r4, r3
  1229f0:	e30e3238 	movw	r3, #57912	; 0xe238
  1229f4:	e3403014 	movt	r3, #20
  1229f8:	e5933000 	ldr	r3, [r3]
  1229fc:	e0423003 	sub	r3, r2, r3
      while (pcb->unacked != NULL &&
  122a00:	e3530000 	cmp	r3, #0
  122a04:	daffff97 	ble	122868 <tcp_receive+0x4d4>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
  122a08:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a0c:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  122a10:	e3530000 	cmp	r3, #0
  122a14:	1a000003 	bne	122a28 <tcp_receive+0x694>
        pcb->rtime = -1;
  122a18:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a1c:	e3e02000 	mvn	r2, #0
  122a20:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
  122a24:	ea000002 	b	122a34 <tcp_receive+0x6a0>
      } else {
        pcb->rtime = 0;
  122a28:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a2c:	e3a02000 	mov	r2, #0
  122a30:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
      }

      pcb->polltmr = 0;
  122a34:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a38:	e3a02000 	mov	r2, #0
  122a3c:	e5c3201f 	strb	r2, [r3, #31]
  122a40:	ea000001 	b	122a4c <tcp_receive+0x6b8>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
  122a44:	e51b0040 	ldr	r0, [fp, #-64]	; 0xffffffc0
  122a48:	eb000c08 	bl	125a70 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
  122a4c:	ea000049 	b	122b78 <tcp_receive+0x7e4>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
  122a50:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a54:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122a58:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
      pcb->unsent = pcb->unsent->next;
  122a5c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a60:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122a64:	e5932000 	ldr	r2, [r3]
  122a68:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a6c:	e583206c 	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
  122a70:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a74:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122a78:	e3530000 	cmp	r3, #0
  122a7c:	1a000002 	bne	122a8c <tcp_receive+0x6f8>
        pcb->unsent_oversize = 0;
  122a80:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a84:	e3a02000 	mov	r2, #0
  122a88:	e1c326b8 	strh	r2, [r3, #104]	; 0x68
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
  122a8c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a90:	e1d346b6 	ldrh	r4, [r3, #102]	; 0x66
  122a94:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122a98:	e5933004 	ldr	r3, [r3, #4]
  122a9c:	e1a00003 	mov	r0, r3
  122aa0:	ebffe0ae 	bl	11ad60 <pbuf_clen>
  122aa4:	e1a03000 	mov	r3, r0
  122aa8:	e1540003 	cmp	r4, r3
  122aac:	2a000006 	bcs	122acc <tcp_receive+0x738>
  122ab0:	e30709fc 	movw	r0, #31228	; 0x79fc
  122ab4:	e3400014 	movt	r0, #20
  122ab8:	ebff8195 	bl	103114 <rt_kprintf>
  122abc:	e30014c2 	movw	r1, #1218	; 0x4c2
  122ac0:	e30707f8 	movw	r0, #30712	; 0x77f8
  122ac4:	e3400014 	movt	r0, #20
  122ac8:	ebffa011 	bl	10ab14 <sys_arch_assert>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
  122acc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122ad0:	e5933004 	ldr	r3, [r3, #4]
  122ad4:	e1a00003 	mov	r0, r3
  122ad8:	ebffe0a0 	bl	11ad60 <pbuf_clen>
  122adc:	e1a03000 	mov	r3, r0
  122ae0:	e1a02003 	mov	r2, r3
  122ae4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122ae8:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  122aec:	e0433002 	sub	r3, r3, r2
  122af0:	e6ff2073 	uxth	r2, r3
  122af4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122af8:	e1c326b6 	strh	r2, [r3, #102]	; 0x66
      recv_acked += next->len;
  122afc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122b00:	e1d320b8 	ldrh	r2, [r3, #8]
  122b04:	e30e323c 	movw	r3, #57916	; 0xe23c
  122b08:	e3403014 	movt	r3, #20
  122b0c:	e1d330b0 	ldrh	r3, [r3]
  122b10:	e0823003 	add	r3, r2, r3
  122b14:	e6ff2073 	uxth	r2, r3
  122b18:	e30e323c 	movw	r3, #57916	; 0xe23c
  122b1c:	e3403014 	movt	r3, #20
  122b20:	e1c320b0 	strh	r2, [r3]
      tcp_seg_free(next);
  122b24:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  122b28:	ebfff179 	bl	11f114 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
  122b2c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b30:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  122b34:	e3530000 	cmp	r3, #0
  122b38:	0a00000e 	beq	122b78 <tcp_receive+0x7e4>
        LWIP_ASSERT("tcp_receive: valid queue length",
  122b3c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b40:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  122b44:	e3530000 	cmp	r3, #0
  122b48:	1a00000a 	bne	122b78 <tcp_receive+0x7e4>
  122b4c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b50:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122b54:	e3530000 	cmp	r3, #0
  122b58:	1a000006 	bne	122b78 <tcp_receive+0x7e4>
  122b5c:	e3070a24 	movw	r0, #31268	; 0x7a24
  122b60:	e3400014 	movt	r0, #20
  122b64:	ebff816a 	bl	103114 <rt_kprintf>
  122b68:	e30014ca 	movw	r1, #1226	; 0x4ca
  122b6c:	e30707f8 	movw	r0, #30712	; 0x77f8
  122b70:	e3400014 	movt	r0, #20
  122b74:	ebff9fe6 	bl	10ab14 <sys_arch_assert>
    while (pcb->unsent != NULL &&
  122b78:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b7c:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122b80:	e3530000 	cmp	r3, #0
  122b84:	0a000028 	beq	122c2c <tcp_receive+0x898>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
  122b88:	e30e3238 	movw	r3, #57912	; 0xe238
  122b8c:	e3403014 	movt	r3, #20
  122b90:	e5934000 	ldr	r4, [r3]
  122b94:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b98:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122b9c:	e593300c 	ldr	r3, [r3, #12]
  122ba0:	e5933004 	ldr	r3, [r3, #4]
  122ba4:	e1a00003 	mov	r0, r3
  122ba8:	ebffcdbc 	bl	1162a0 <lwip_htonl>
  122bac:	e1a05000 	mov	r5, r0
  122bb0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122bb4:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122bb8:	e1d330b8 	ldrh	r3, [r3, #8]
  122bbc:	e1a06003 	mov	r6, r3
  122bc0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122bc4:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122bc8:	e593300c 	ldr	r3, [r3, #12]
  122bcc:	e1d330bc 	ldrh	r3, [r3, #12]
  122bd0:	e6ff3073 	uxth	r3, r3
  122bd4:	e1a00003 	mov	r0, r3
  122bd8:	ebffcda4 	bl	116270 <lwip_htons>
  122bdc:	e1a03000 	mov	r3, r0
  122be0:	e2033003 	and	r3, r3, #3
  122be4:	e3530000 	cmp	r3, #0
  122be8:	0a000001 	beq	122bf4 <tcp_receive+0x860>
  122bec:	e3a03001 	mov	r3, #1
  122bf0:	ea000000 	b	122bf8 <tcp_receive+0x864>
  122bf4:	e3a03000 	mov	r3, #0
  122bf8:	e0833006 	add	r3, r3, r6
  122bfc:	e0853003 	add	r3, r5, r3
  122c00:	e0443003 	sub	r3, r4, r3
    while (pcb->unsent != NULL &&
  122c04:	e3530000 	cmp	r3, #0
  122c08:	ba000007 	blt	122c2c <tcp_receive+0x898>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
  122c0c:	e30e3238 	movw	r3, #57912	; 0xe238
  122c10:	e3403014 	movt	r3, #20
  122c14:	e5932000 	ldr	r2, [r3]
  122c18:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122c1c:	e5933050 	ldr	r3, [r3, #80]	; 0x50
  122c20:	e0423003 	sub	r3, r2, r3
  122c24:	e3530000 	cmp	r3, #0
  122c28:	daffff88 	ble	122a50 <tcp_receive+0x6bc>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
  122c2c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122c30:	e1d326b4 	ldrh	r2, [r3, #100]	; 0x64
  122c34:	e30e323c 	movw	r3, #57916	; 0xe23c
  122c38:	e3403014 	movt	r3, #20
  122c3c:	e1d330b0 	ldrh	r3, [r3]
  122c40:	e0823003 	add	r3, r2, r3
  122c44:	e6ff2073 	uxth	r2, r3
  122c48:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122c4c:	e1c326b4 	strh	r2, [r3, #100]	; 0x64
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
  122c50:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122c54:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  122c58:	e3530000 	cmp	r3, #0
  122c5c:	0a00004c 	beq	122d94 <tcp_receive+0xa00>
  122c60:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122c64:	e593203c 	ldr	r2, [r3, #60]	; 0x3c
  122c68:	e30e3238 	movw	r3, #57912	; 0xe238
  122c6c:	e3403014 	movt	r3, #20
  122c70:	e5933000 	ldr	r3, [r3]
  122c74:	e0423003 	sub	r3, r2, r3
  122c78:	e3530000 	cmp	r3, #0
  122c7c:	aa000044 	bge	122d94 <tcp_receive+0xa00>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
  122c80:	e30531b4 	movw	r3, #20916	; 0x51b4
  122c84:	e3403057 	movt	r3, #87	; 0x57
  122c88:	e5933000 	ldr	r3, [r3]
  122c8c:	e6ff2073 	uxth	r2, r3
  122c90:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122c94:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  122c98:	e6ff3073 	uxth	r3, r3
  122c9c:	e0423003 	sub	r3, r2, r3
  122ca0:	e6ff3073 	uxth	r3, r3
  122ca4:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
  122ca8:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  122cac:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122cb0:	e1d334f0 	ldrsh	r3, [r3, #64]	; 0x40
  122cb4:	e1a031c3 	asr	r3, r3, #3
  122cb8:	e6bf3073 	sxth	r3, r3
  122cbc:	e6ff3073 	uxth	r3, r3
  122cc0:	e0423003 	sub	r3, r2, r3
  122cc4:	e6ff3073 	uxth	r3, r3
  122cc8:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
      pcb->sa += m;
  122ccc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122cd0:	e1d334f0 	ldrsh	r3, [r3, #64]	; 0x40
  122cd4:	e6ff2073 	uxth	r2, r3
  122cd8:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  122cdc:	e0823003 	add	r3, r2, r3
  122ce0:	e6ff3073 	uxth	r3, r3
  122ce4:	e6bf2073 	sxth	r2, r3
  122ce8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122cec:	e1c324b0 	strh	r2, [r3, #64]	; 0x40
      if (m < 0) {
  122cf0:	e15b32f2 	ldrsh	r3, [fp, #-34]	; 0xffffffde
  122cf4:	e3530000 	cmp	r3, #0
  122cf8:	aa000003 	bge	122d0c <tcp_receive+0x978>
        m = -m;
  122cfc:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  122d00:	e2633000 	rsb	r3, r3, #0
  122d04:	e6ff3073 	uxth	r3, r3
  122d08:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
      }
      m = m - (pcb->sv >> 2);
  122d0c:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  122d10:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122d14:	e1d334f2 	ldrsh	r3, [r3, #66]	; 0x42
  122d18:	e1a03143 	asr	r3, r3, #2
  122d1c:	e6bf3073 	sxth	r3, r3
  122d20:	e6ff3073 	uxth	r3, r3
  122d24:	e0423003 	sub	r3, r2, r3
  122d28:	e6ff3073 	uxth	r3, r3
  122d2c:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
      pcb->sv += m;
  122d30:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122d34:	e1d334f2 	ldrsh	r3, [r3, #66]	; 0x42
  122d38:	e6ff2073 	uxth	r2, r3
  122d3c:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  122d40:	e0823003 	add	r3, r2, r3
  122d44:	e6ff3073 	uxth	r3, r3
  122d48:	e6bf2073 	sxth	r2, r3
  122d4c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122d50:	e1c324b2 	strh	r2, [r3, #66]	; 0x42
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
  122d54:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122d58:	e1d334f0 	ldrsh	r3, [r3, #64]	; 0x40
  122d5c:	e1a031c3 	asr	r3, r3, #3
  122d60:	e6bf3073 	sxth	r3, r3
  122d64:	e6ff2073 	uxth	r2, r3
  122d68:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122d6c:	e1d334f2 	ldrsh	r3, [r3, #66]	; 0x42
  122d70:	e6ff3073 	uxth	r3, r3
  122d74:	e0823003 	add	r3, r2, r3
  122d78:	e6ff3073 	uxth	r3, r3
  122d7c:	e6bf2073 	sxth	r2, r3
  122d80:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122d84:	e1c324b4 	strh	r2, [r3, #68]	; 0x44

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
  122d88:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122d8c:	e3a02000 	mov	r2, #0
  122d90:	e5832038 	str	r2, [r3, #56]	; 0x38

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
  122d94:	e30e323e 	movw	r3, #57918	; 0xe23e
  122d98:	e3403014 	movt	r3, #20
  122d9c:	e1d330b0 	ldrh	r3, [r3]
  122da0:	e3530000 	cmp	r3, #0
  122da4:	0a0004b3 	beq	124078 <tcp_receive+0x1ce4>
  122da8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122dac:	e5933014 	ldr	r3, [r3, #20]
  122db0:	e3530006 	cmp	r3, #6
  122db4:	8a0004af 	bhi	124078 <tcp_receive+0x1ce4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
  122db8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122dbc:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  122dc0:	e30e3234 	movw	r3, #57908	; 0xe234
  122dc4:	e3403014 	movt	r3, #20
  122dc8:	e5933000 	ldr	r3, [r3]
  122dcc:	e0423003 	sub	r3, r2, r3
  122dd0:	e2433001 	sub	r3, r3, #1
  122dd4:	e3530000 	cmp	r3, #0
  122dd8:	ba0000aa 	blt	123088 <tcp_receive+0xcf4>
  122ddc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122de0:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  122de4:	e30e323e 	movw	r3, #57918	; 0xe23e
  122de8:	e3403014 	movt	r3, #20
  122dec:	e1d330b0 	ldrh	r3, [r3]
  122df0:	e1a01003 	mov	r1, r3
  122df4:	e30e3234 	movw	r3, #57908	; 0xe234
  122df8:	e3403014 	movt	r3, #20
  122dfc:	e5933000 	ldr	r3, [r3]
  122e00:	e0813003 	add	r3, r1, r3
  122e04:	e0423003 	sub	r3, r2, r3
  122e08:	e2833001 	add	r3, r3, #1
  122e0c:	e3530000 	cmp	r3, #0
  122e10:	ca00009c 	bgt	123088 <tcp_receive+0xcf4>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
  122e14:	e30e3214 	movw	r3, #57876	; 0xe214
  122e18:	e3403014 	movt	r3, #20
  122e1c:	e5933004 	ldr	r3, [r3, #4]
  122e20:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
      off = pcb->rcv_nxt - seqno;
  122e24:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122e28:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  122e2c:	e30e3234 	movw	r3, #57908	; 0xe234
  122e30:	e3403014 	movt	r3, #20
  122e34:	e5933000 	ldr	r3, [r3]
  122e38:	e0423003 	sub	r3, r2, r3
  122e3c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
  122e40:	e30e3214 	movw	r3, #57876	; 0xe214
  122e44:	e3403014 	movt	r3, #20
  122e48:	e5933004 	ldr	r3, [r3, #4]
  122e4c:	e3530000 	cmp	r3, #0
  122e50:	1a000006 	bne	122e70 <tcp_receive+0xadc>
  122e54:	e3070a44 	movw	r0, #31300	; 0x7a44
  122e58:	e3400014 	movt	r0, #20
  122e5c:	ebff80ac 	bl	103114 <rt_kprintf>
  122e60:	e3001529 	movw	r1, #1321	; 0x529
  122e64:	e30707f8 	movw	r0, #30712	; 0x77f8
  122e68:	e3400014 	movt	r0, #20
  122e6c:	ebff9f28 	bl	10ab14 <sys_arch_assert>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
  122e70:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122e74:	e3072ffe 	movw	r2, #32766	; 0x7ffe
  122e78:	e1530002 	cmp	r3, r2
  122e7c:	da000006 	ble	122e9c <tcp_receive+0xb08>
  122e80:	e3070a54 	movw	r0, #31316	; 0x7a54
  122e84:	e3400014 	movt	r0, #20
  122e88:	ebff80a1 	bl	103114 <rt_kprintf>
  122e8c:	e300152a 	movw	r1, #1322	; 0x52a
  122e90:	e30707f8 	movw	r0, #30712	; 0x77f8
  122e94:	e3400014 	movt	r0, #20
  122e98:	ebff9f1d 	bl	10ab14 <sys_arch_assert>
      if (inseg.p->len < off) {
  122e9c:	e30e3214 	movw	r3, #57876	; 0xe214
  122ea0:	e3403014 	movt	r3, #20
  122ea4:	e5933004 	ldr	r3, [r3, #4]
  122ea8:	e1d330ba 	ldrh	r3, [r3, #10]
  122eac:	e1a02003 	mov	r2, r3
  122eb0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122eb4:	e1530002 	cmp	r3, r2
  122eb8:	da00003f 	ble	122fbc <tcp_receive+0xc28>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
  122ebc:	e30e3214 	movw	r3, #57876	; 0xe214
  122ec0:	e3403014 	movt	r3, #20
  122ec4:	e5933004 	ldr	r3, [r3, #4]
  122ec8:	e1d330b8 	ldrh	r3, [r3, #8]
  122ecc:	e1a02003 	mov	r2, r3
  122ed0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122ed4:	e1530002 	cmp	r3, r2
  122ed8:	da000006 	ble	122ef8 <tcp_receive+0xb64>
  122edc:	e3070a64 	movw	r0, #31332	; 0x7a64
  122ee0:	e3400014 	movt	r0, #20
  122ee4:	ebff808a 	bl	103114 <rt_kprintf>
  122ee8:	e300152c 	movw	r1, #1324	; 0x52c
  122eec:	e30707f8 	movw	r0, #30712	; 0x77f8
  122ef0:	e3400014 	movt	r0, #20
  122ef4:	ebff9f06 	bl	10ab14 <sys_arch_assert>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
  122ef8:	e30e3214 	movw	r3, #57876	; 0xe214
  122efc:	e3403014 	movt	r3, #20
  122f00:	e5933004 	ldr	r3, [r3, #4]
  122f04:	e1d320b8 	ldrh	r2, [r3, #8]
  122f08:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122f0c:	e6ff3073 	uxth	r3, r3
  122f10:	e0423003 	sub	r3, r2, r3
  122f14:	e14b33b4 	strh	r3, [fp, #-52]	; 0xffffffcc
        while (p->len < off) {
  122f18:	ea00000e 	b	122f58 <tcp_receive+0xbc4>
          off -= p->len;
  122f1c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  122f20:	e1d330ba 	ldrh	r3, [r3, #10]
  122f24:	e1a02003 	mov	r2, r3
  122f28:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122f2c:	e0433002 	sub	r3, r3, r2
  122f30:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
  122f34:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  122f38:	e15b23b4 	ldrh	r2, [fp, #-52]	; 0xffffffcc
  122f3c:	e1c320b8 	strh	r2, [r3, #8]
          p->len = 0;
  122f40:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  122f44:	e3a02000 	mov	r2, #0
  122f48:	e1c320ba 	strh	r2, [r3, #10]
          p = p->next;
  122f4c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  122f50:	e5933000 	ldr	r3, [r3]
  122f54:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
        while (p->len < off) {
  122f58:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  122f5c:	e1d330ba 	ldrh	r3, [r3, #10]
  122f60:	e1a02003 	mov	r2, r3
  122f64:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122f68:	e1530002 	cmp	r3, r2
  122f6c:	caffffea 	bgt	122f1c <tcp_receive+0xb88>
        }
        if (pbuf_header(p, (s16_t)-off)) {
  122f70:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122f74:	e6ff3073 	uxth	r3, r3
  122f78:	e2633000 	rsb	r3, r3, #0
  122f7c:	e6ff3073 	uxth	r3, r3
  122f80:	e6bf3073 	sxth	r3, r3
  122f84:	e1a01003 	mov	r1, r3
  122f88:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
  122f8c:	ebffded0 	bl	11aad4 <pbuf_header>
  122f90:	e1a03000 	mov	r3, r0
  122f94:	e3530000 	cmp	r3, #0
  122f98:	0a00001c 	beq	123010 <tcp_receive+0xc7c>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
  122f9c:	e3070a74 	movw	r0, #31348	; 0x7a74
  122fa0:	e3400014 	movt	r0, #20
  122fa4:	ebff805a 	bl	103114 <rt_kprintf>
  122fa8:	e3001539 	movw	r1, #1337	; 0x539
  122fac:	e30707f8 	movw	r0, #30712	; 0x77f8
  122fb0:	e3400014 	movt	r0, #20
  122fb4:	ebff9ed6 	bl	10ab14 <sys_arch_assert>
  122fb8:	ea000014 	b	123010 <tcp_receive+0xc7c>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
  122fbc:	e30e3214 	movw	r3, #57876	; 0xe214
  122fc0:	e3403014 	movt	r3, #20
  122fc4:	e5933004 	ldr	r3, [r3, #4]
  122fc8:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  122fcc:	e6ff2072 	uxth	r2, r2
  122fd0:	e2622000 	rsb	r2, r2, #0
  122fd4:	e6ff2072 	uxth	r2, r2
  122fd8:	e6bf2072 	sxth	r2, r2
  122fdc:	e1a01002 	mov	r1, r2
  122fe0:	e1a00003 	mov	r0, r3
  122fe4:	ebffdeba 	bl	11aad4 <pbuf_header>
  122fe8:	e1a03000 	mov	r3, r0
  122fec:	e3530000 	cmp	r3, #0
  122ff0:	0a000006 	beq	123010 <tcp_receive+0xc7c>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
  122ff4:	e3070a74 	movw	r0, #31348	; 0x7a74
  122ff8:	e3400014 	movt	r0, #20
  122ffc:	ebff8044 	bl	103114 <rt_kprintf>
  123000:	e300153e 	movw	r1, #1342	; 0x53e
  123004:	e30707f8 	movw	r0, #30712	; 0x77f8
  123008:	e3400014 	movt	r0, #20
  12300c:	ebff9ec0 	bl	10ab14 <sys_arch_assert>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
  123010:	e30e3214 	movw	r3, #57876	; 0xe214
  123014:	e3403014 	movt	r3, #20
  123018:	e1d320b8 	ldrh	r2, [r3, #8]
  12301c:	e30e3234 	movw	r3, #57908	; 0xe234
  123020:	e3403014 	movt	r3, #20
  123024:	e5933000 	ldr	r3, [r3]
  123028:	e6ff1073 	uxth	r1, r3
  12302c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123030:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  123034:	e6ff3073 	uxth	r3, r3
  123038:	e0413003 	sub	r3, r1, r3
  12303c:	e6ff3073 	uxth	r3, r3
  123040:	e0823003 	add	r3, r2, r3
  123044:	e6ff2073 	uxth	r2, r3
  123048:	e30e3214 	movw	r3, #57876	; 0xe214
  12304c:	e3403014 	movt	r3, #20
  123050:	e1c320b8 	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
  123054:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123058:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  12305c:	e30e3234 	movw	r3, #57908	; 0xe234
  123060:	e3403014 	movt	r3, #20
  123064:	e5832000 	str	r2, [r3]
  123068:	e30e3214 	movw	r3, #57876	; 0xe214
  12306c:	e3403014 	movt	r3, #20
  123070:	e593200c 	ldr	r2, [r3, #12]
  123074:	e30e3234 	movw	r3, #57908	; 0xe234
  123078:	e3403014 	movt	r3, #20
  12307c:	e5933000 	ldr	r3, [r3]
  123080:	e5823004 	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
  123084:	ea00000d 	b	1230c0 <tcp_receive+0xd2c>
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
  123088:	e30e3234 	movw	r3, #57908	; 0xe234
  12308c:	e3403014 	movt	r3, #20
  123090:	e5932000 	ldr	r2, [r3]
  123094:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123098:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12309c:	e0423003 	sub	r3, r2, r3
  1230a0:	e3530000 	cmp	r3, #0
  1230a4:	aa000005 	bge	1230c0 <tcp_receive+0xd2c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
  1230a8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1230ac:	e5d3301e 	ldrb	r3, [r3, #30]
  1230b0:	e3833002 	orr	r3, r3, #2
  1230b4:	e6ef2073 	uxtb	r2, r3
  1230b8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1230bc:	e5c3201e 	strb	r2, [r3, #30]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
  1230c0:	e30e3234 	movw	r3, #57908	; 0xe234
  1230c4:	e3403014 	movt	r3, #20
  1230c8:	e5932000 	ldr	r2, [r3]
  1230cc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1230d0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  1230d4:	e0423003 	sub	r3, r2, r3
  1230d8:	e3530000 	cmp	r3, #0
  1230dc:	ba0003e1 	blt	124068 <tcp_receive+0x1cd4>
  1230e0:	e30e3234 	movw	r3, #57908	; 0xe234
  1230e4:	e3403014 	movt	r3, #20
  1230e8:	e5932000 	ldr	r2, [r3]
  1230ec:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1230f0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  1230f4:	e51b1040 	ldr	r1, [fp, #-64]	; 0xffffffc0
  1230f8:	e1d112bc 	ldrh	r1, [r1, #44]	; 0x2c
  1230fc:	e0833001 	add	r3, r3, r1
  123100:	e0423003 	sub	r3, r2, r3
  123104:	e2833001 	add	r3, r3, #1
  123108:	e3530000 	cmp	r3, #0
  12310c:	ca0003d5 	bgt	124068 <tcp_receive+0x1cd4>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
  123110:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123114:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  123118:	e30e3234 	movw	r3, #57908	; 0xe234
  12311c:	e3403014 	movt	r3, #20
  123120:	e5933000 	ldr	r3, [r3]
  123124:	e1520003 	cmp	r2, r3
  123128:	1a00026b 	bne	123adc <tcp_receive+0x1748>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
  12312c:	e30e3214 	movw	r3, #57876	; 0xe214
  123130:	e3403014 	movt	r3, #20
  123134:	e1d340b8 	ldrh	r4, [r3, #8]
  123138:	e30e3214 	movw	r3, #57876	; 0xe214
  12313c:	e3403014 	movt	r3, #20
  123140:	e593300c 	ldr	r3, [r3, #12]
  123144:	e1d330bc 	ldrh	r3, [r3, #12]
  123148:	e6ff3073 	uxth	r3, r3
  12314c:	e1a00003 	mov	r0, r3
  123150:	ebffcc46 	bl	116270 <lwip_htons>
  123154:	e1a03000 	mov	r3, r0
  123158:	e2033003 	and	r3, r3, #3
  12315c:	e3530000 	cmp	r3, #0
  123160:	0a000001 	beq	12316c <tcp_receive+0xdd8>
  123164:	e3a03001 	mov	r3, #1
  123168:	ea000000 	b	123170 <tcp_receive+0xddc>
  12316c:	e3a03000 	mov	r3, #0
  123170:	e0833004 	add	r3, r3, r4
  123174:	e6ff2073 	uxth	r2, r3
  123178:	e30e323e 	movw	r3, #57918	; 0xe23e
  12317c:	e3403014 	movt	r3, #20
  123180:	e1c320b0 	strh	r2, [r3]

        if (tcplen > pcb->rcv_wnd) {
  123184:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123188:	e1d322bc 	ldrh	r2, [r3, #44]	; 0x2c
  12318c:	e30e323e 	movw	r3, #57918	; 0xe23e
  123190:	e3403014 	movt	r3, #20
  123194:	e1d330b0 	ldrh	r3, [r3]
  123198:	e1520003 	cmp	r2, r3
  12319c:	2a000072 	bcs	12336c <tcp_receive+0xfd8>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
  1231a0:	e30e3214 	movw	r3, #57876	; 0xe214
  1231a4:	e3403014 	movt	r3, #20
  1231a8:	e593300c 	ldr	r3, [r3, #12]
  1231ac:	e1d330bc 	ldrh	r3, [r3, #12]
  1231b0:	e6ff3073 	uxth	r3, r3
  1231b4:	e1a00003 	mov	r0, r3
  1231b8:	ebffcc2c 	bl	116270 <lwip_htons>
  1231bc:	e1a03000 	mov	r3, r0
  1231c0:	e2033001 	and	r3, r3, #1
  1231c4:	e3530000 	cmp	r3, #0
  1231c8:	0a00001a 	beq	123238 <tcp_receive+0xea4>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
  1231cc:	e30e3214 	movw	r3, #57876	; 0xe214
  1231d0:	e3403014 	movt	r3, #20
  1231d4:	e593300c 	ldr	r3, [r3, #12]
  1231d8:	e1d330bc 	ldrh	r3, [r3, #12]
  1231dc:	e6ff3073 	uxth	r3, r3
  1231e0:	e3c33c3f 	bic	r3, r3, #16128	; 0x3f00
  1231e4:	e6ff4073 	uxth	r4, r3
  1231e8:	e30e3214 	movw	r3, #57876	; 0xe214
  1231ec:	e3403014 	movt	r3, #20
  1231f0:	e593300c 	ldr	r3, [r3, #12]
  1231f4:	e1d330bc 	ldrh	r3, [r3, #12]
  1231f8:	e6ff3073 	uxth	r3, r3
  1231fc:	e1a00003 	mov	r0, r3
  123200:	ebffcc1a 	bl	116270 <lwip_htons>
  123204:	e1a03000 	mov	r3, r0
  123208:	e203303e 	and	r3, r3, #62	; 0x3e
  12320c:	e6ff3073 	uxth	r3, r3
  123210:	e1a00003 	mov	r0, r3
  123214:	ebffcc15 	bl	116270 <lwip_htons>
  123218:	e1a03000 	mov	r3, r0
  12321c:	e1a02003 	mov	r2, r3
  123220:	e30e3214 	movw	r3, #57876	; 0xe214
  123224:	e3403014 	movt	r3, #20
  123228:	e593300c 	ldr	r3, [r3, #12]
  12322c:	e1842002 	orr	r2, r4, r2
  123230:	e6ff2072 	uxth	r2, r2
  123234:	e1c320bc 	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
  123238:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12323c:	e1d322bc 	ldrh	r2, [r3, #44]	; 0x2c
  123240:	e30e3214 	movw	r3, #57876	; 0xe214
  123244:	e3403014 	movt	r3, #20
  123248:	e1c320b8 	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
  12324c:	e30e3214 	movw	r3, #57876	; 0xe214
  123250:	e3403014 	movt	r3, #20
  123254:	e593300c 	ldr	r3, [r3, #12]
  123258:	e1d330bc 	ldrh	r3, [r3, #12]
  12325c:	e6ff3073 	uxth	r3, r3
  123260:	e1a00003 	mov	r0, r3
  123264:	ebffcc01 	bl	116270 <lwip_htons>
  123268:	e1a03000 	mov	r3, r0
  12326c:	e2033002 	and	r3, r3, #2
  123270:	e3530000 	cmp	r3, #0
  123274:	0a000007 	beq	123298 <tcp_receive+0xf04>
            inseg.len -= 1;
  123278:	e30e3214 	movw	r3, #57876	; 0xe214
  12327c:	e3403014 	movt	r3, #20
  123280:	e1d330b8 	ldrh	r3, [r3, #8]
  123284:	e2433001 	sub	r3, r3, #1
  123288:	e6ff2073 	uxth	r2, r3
  12328c:	e30e3214 	movw	r3, #57876	; 0xe214
  123290:	e3403014 	movt	r3, #20
  123294:	e1c320b8 	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
  123298:	e30e3214 	movw	r3, #57876	; 0xe214
  12329c:	e3403014 	movt	r3, #20
  1232a0:	e5932004 	ldr	r2, [r3, #4]
  1232a4:	e30e3214 	movw	r3, #57876	; 0xe214
  1232a8:	e3403014 	movt	r3, #20
  1232ac:	e1d330b8 	ldrh	r3, [r3, #8]
  1232b0:	e1a01003 	mov	r1, r3
  1232b4:	e1a00002 	mov	r0, r2
  1232b8:	ebffdcda 	bl	11a628 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
  1232bc:	e30e3214 	movw	r3, #57876	; 0xe214
  1232c0:	e3403014 	movt	r3, #20
  1232c4:	e1d340b8 	ldrh	r4, [r3, #8]
  1232c8:	e30e3214 	movw	r3, #57876	; 0xe214
  1232cc:	e3403014 	movt	r3, #20
  1232d0:	e593300c 	ldr	r3, [r3, #12]
  1232d4:	e1d330bc 	ldrh	r3, [r3, #12]
  1232d8:	e6ff3073 	uxth	r3, r3
  1232dc:	e1a00003 	mov	r0, r3
  1232e0:	ebffcbe2 	bl	116270 <lwip_htons>
  1232e4:	e1a03000 	mov	r3, r0
  1232e8:	e2033003 	and	r3, r3, #3
  1232ec:	e3530000 	cmp	r3, #0
  1232f0:	0a000001 	beq	1232fc <tcp_receive+0xf68>
  1232f4:	e3a03001 	mov	r3, #1
  1232f8:	ea000000 	b	123300 <tcp_receive+0xf6c>
  1232fc:	e3a03000 	mov	r3, #0
  123300:	e0833004 	add	r3, r3, r4
  123304:	e6ff2073 	uxth	r2, r3
  123308:	e30e323e 	movw	r3, #57918	; 0xe23e
  12330c:	e3403014 	movt	r3, #20
  123310:	e1c320b0 	strh	r2, [r3]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
  123314:	e30e323e 	movw	r3, #57918	; 0xe23e
  123318:	e3403014 	movt	r3, #20
  12331c:	e1d330b0 	ldrh	r3, [r3]
  123320:	e1a02003 	mov	r2, r3
  123324:	e30e3234 	movw	r3, #57908	; 0xe234
  123328:	e3403014 	movt	r3, #20
  12332c:	e5933000 	ldr	r3, [r3]
  123330:	e0822003 	add	r2, r2, r3
  123334:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123338:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12333c:	e51b1040 	ldr	r1, [fp, #-64]	; 0xffffffc0
  123340:	e1d112bc 	ldrh	r1, [r1, #44]	; 0x2c
  123344:	e0833001 	add	r3, r3, r1
  123348:	e1520003 	cmp	r2, r3
  12334c:	0a000006 	beq	12336c <tcp_receive+0xfd8>
  123350:	e3070a88 	movw	r0, #31368	; 0x7a88
  123354:	e3400014 	movt	r0, #20
  123358:	ebff7f6d 	bl	103114 <rt_kprintf>
  12335c:	e300156c 	movw	r1, #1388	; 0x56c
  123360:	e30707f8 	movw	r0, #30712	; 0x77f8
  123364:	e3400014 	movt	r0, #20
  123368:	ebff9de9 	bl	10ab14 <sys_arch_assert>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
  12336c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123370:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  123374:	e3530000 	cmp	r3, #0
  123378:	0a0000da 	beq	1236e8 <tcp_receive+0x1354>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
  12337c:	e30e3214 	movw	r3, #57876	; 0xe214
  123380:	e3403014 	movt	r3, #20
  123384:	e593300c 	ldr	r3, [r3, #12]
  123388:	e1d330bc 	ldrh	r3, [r3, #12]
  12338c:	e6ff3073 	uxth	r3, r3
  123390:	e1a00003 	mov	r0, r3
  123394:	ebffcbb5 	bl	116270 <lwip_htons>
  123398:	e1a03000 	mov	r3, r0
  12339c:	e2033001 	and	r3, r3, #1
  1233a0:	e3530000 	cmp	r3, #0
  1233a4:	0a00000f 	beq	1233e8 <tcp_receive+0x1054>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
  1233a8:	ea000009 	b	1233d4 <tcp_receive+0x1040>
              struct tcp_seg *old_ooseq = pcb->ooseq;
  1233ac:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1233b0:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  1233b4:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
              pcb->ooseq = pcb->ooseq->next;
  1233b8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1233bc:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  1233c0:	e5932000 	ldr	r2, [r3]
  1233c4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1233c8:	e5832074 	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
  1233cc:	e51b003c 	ldr	r0, [fp, #-60]	; 0xffffffc4
  1233d0:	ebffef4f 	bl	11f114 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
  1233d4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1233d8:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  1233dc:	e3530000 	cmp	r3, #0
  1233e0:	1afffff1 	bne	1233ac <tcp_receive+0x1018>
  1233e4:	ea0000bf 	b	1236e8 <tcp_receive+0x1354>
            }
          } else {
            next = pcb->ooseq;
  1233e8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1233ec:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  1233f0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
  1233f4:	ea000040 	b	1234fc <tcp_receive+0x1168>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
  1233f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1233fc:	e593300c 	ldr	r3, [r3, #12]
  123400:	e1d330bc 	ldrh	r3, [r3, #12]
  123404:	e6ff3073 	uxth	r3, r3
  123408:	e1a00003 	mov	r0, r3
  12340c:	ebffcb97 	bl	116270 <lwip_htons>
  123410:	e1a03000 	mov	r3, r0
  123414:	e2033001 	and	r3, r3, #1
  123418:	e3530000 	cmp	r3, #0
  12341c:	0a00002f 	beq	1234e0 <tcp_receive+0x114c>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
  123420:	e30e3214 	movw	r3, #57876	; 0xe214
  123424:	e3403014 	movt	r3, #20
  123428:	e593300c 	ldr	r3, [r3, #12]
  12342c:	e1d330bc 	ldrh	r3, [r3, #12]
  123430:	e6ff3073 	uxth	r3, r3
  123434:	e1a00003 	mov	r0, r3
  123438:	ebffcb8c 	bl	116270 <lwip_htons>
  12343c:	e1a03000 	mov	r3, r0
  123440:	e2033002 	and	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
  123444:	e3530000 	cmp	r3, #0
  123448:	1a000024 	bne	1234e0 <tcp_receive+0x114c>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
  12344c:	e30e3214 	movw	r3, #57876	; 0xe214
  123450:	e3403014 	movt	r3, #20
  123454:	e593300c 	ldr	r3, [r3, #12]
  123458:	e1d330bc 	ldrh	r3, [r3, #12]
  12345c:	e6ff4073 	uxth	r4, r3
  123460:	e3a00001 	mov	r0, #1
  123464:	ebffcb81 	bl	116270 <lwip_htons>
  123468:	e1a03000 	mov	r3, r0
  12346c:	e1a02003 	mov	r2, r3
  123470:	e30e3214 	movw	r3, #57876	; 0xe214
  123474:	e3403014 	movt	r3, #20
  123478:	e593300c 	ldr	r3, [r3, #12]
  12347c:	e1842002 	orr	r2, r4, r2
  123480:	e6ff2072 	uxth	r2, r2
  123484:	e1c320bc 	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
  123488:	e30e3214 	movw	r3, #57876	; 0xe214
  12348c:	e3403014 	movt	r3, #20
  123490:	e1d340b8 	ldrh	r4, [r3, #8]
  123494:	e30e3214 	movw	r3, #57876	; 0xe214
  123498:	e3403014 	movt	r3, #20
  12349c:	e593300c 	ldr	r3, [r3, #12]
  1234a0:	e1d330bc 	ldrh	r3, [r3, #12]
  1234a4:	e6ff3073 	uxth	r3, r3
  1234a8:	e1a00003 	mov	r0, r3
  1234ac:	ebffcb6f 	bl	116270 <lwip_htons>
  1234b0:	e1a03000 	mov	r3, r0
  1234b4:	e2033003 	and	r3, r3, #3
  1234b8:	e3530000 	cmp	r3, #0
  1234bc:	0a000001 	beq	1234c8 <tcp_receive+0x1134>
  1234c0:	e3a03001 	mov	r3, #1
  1234c4:	ea000000 	b	1234cc <tcp_receive+0x1138>
  1234c8:	e3a03000 	mov	r3, #0
  1234cc:	e0833004 	add	r3, r3, r4
  1234d0:	e6ff2073 	uxth	r2, r3
  1234d4:	e30e323e 	movw	r3, #57918	; 0xe23e
  1234d8:	e3403014 	movt	r3, #20
  1234dc:	e1c320b0 	strh	r2, [r3]
              }
              prev = next;
  1234e0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1234e4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
              next = next->next;
  1234e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1234ec:	e5933000 	ldr	r3, [r3]
  1234f0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
              tcp_seg_free(prev);
  1234f4:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  1234f8:	ebffef05 	bl	11f114 <tcp_seg_free>
            while (next &&
  1234fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123500:	e3530000 	cmp	r3, #0
  123504:	0a000010 	beq	12354c <tcp_receive+0x11b8>
                   TCP_SEQ_GEQ(seqno + tcplen,
  123508:	e30e323e 	movw	r3, #57918	; 0xe23e
  12350c:	e3403014 	movt	r3, #20
  123510:	e1d330b0 	ldrh	r3, [r3]
  123514:	e1a02003 	mov	r2, r3
  123518:	e30e3234 	movw	r3, #57908	; 0xe234
  12351c:	e3403014 	movt	r3, #20
  123520:	e5933000 	ldr	r3, [r3]
  123524:	e0822003 	add	r2, r2, r3
  123528:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12352c:	e593300c 	ldr	r3, [r3, #12]
  123530:	e5933004 	ldr	r3, [r3, #4]
  123534:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  123538:	e1d110b8 	ldrh	r1, [r1, #8]
  12353c:	e0833001 	add	r3, r3, r1
  123540:	e0423003 	sub	r3, r2, r3
            while (next &&
  123544:	e3530000 	cmp	r3, #0
  123548:	aaffffaa 	bge	1233f8 <tcp_receive+0x1064>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
  12354c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123550:	e3530000 	cmp	r3, #0
  123554:	0a000060 	beq	1236dc <tcp_receive+0x1348>
                TCP_SEQ_GT(seqno + tcplen,
  123558:	e30e323e 	movw	r3, #57918	; 0xe23e
  12355c:	e3403014 	movt	r3, #20
  123560:	e1d330b0 	ldrh	r3, [r3]
  123564:	e1a02003 	mov	r2, r3
  123568:	e30e3234 	movw	r3, #57908	; 0xe234
  12356c:	e3403014 	movt	r3, #20
  123570:	e5933000 	ldr	r3, [r3]
  123574:	e0822003 	add	r2, r2, r3
  123578:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12357c:	e593300c 	ldr	r3, [r3, #12]
  123580:	e5933004 	ldr	r3, [r3, #4]
  123584:	e0423003 	sub	r3, r2, r3
            if (next &&
  123588:	e3530000 	cmp	r3, #0
  12358c:	da000052 	ble	1236dc <tcp_receive+0x1348>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
  123590:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123594:	e593300c 	ldr	r3, [r3, #12]
  123598:	e5933004 	ldr	r3, [r3, #4]
  12359c:	e6ff2073 	uxth	r2, r3
  1235a0:	e30e3234 	movw	r3, #57908	; 0xe234
  1235a4:	e3403014 	movt	r3, #20
  1235a8:	e5933000 	ldr	r3, [r3]
  1235ac:	e6ff3073 	uxth	r3, r3
  1235b0:	e0423003 	sub	r3, r2, r3
  1235b4:	e6ff2073 	uxth	r2, r3
  1235b8:	e30e3214 	movw	r3, #57876	; 0xe214
  1235bc:	e3403014 	movt	r3, #20
  1235c0:	e1c320b8 	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
  1235c4:	e30e3214 	movw	r3, #57876	; 0xe214
  1235c8:	e3403014 	movt	r3, #20
  1235cc:	e593300c 	ldr	r3, [r3, #12]
  1235d0:	e1d330bc 	ldrh	r3, [r3, #12]
  1235d4:	e6ff3073 	uxth	r3, r3
  1235d8:	e1a00003 	mov	r0, r3
  1235dc:	ebffcb23 	bl	116270 <lwip_htons>
  1235e0:	e1a03000 	mov	r3, r0
  1235e4:	e2033002 	and	r3, r3, #2
  1235e8:	e3530000 	cmp	r3, #0
  1235ec:	0a000007 	beq	123610 <tcp_receive+0x127c>
                inseg.len -= 1;
  1235f0:	e30e3214 	movw	r3, #57876	; 0xe214
  1235f4:	e3403014 	movt	r3, #20
  1235f8:	e1d330b8 	ldrh	r3, [r3, #8]
  1235fc:	e2433001 	sub	r3, r3, #1
  123600:	e6ff2073 	uxth	r2, r3
  123604:	e30e3214 	movw	r3, #57876	; 0xe214
  123608:	e3403014 	movt	r3, #20
  12360c:	e1c320b8 	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
  123610:	e30e3214 	movw	r3, #57876	; 0xe214
  123614:	e3403014 	movt	r3, #20
  123618:	e5932004 	ldr	r2, [r3, #4]
  12361c:	e30e3214 	movw	r3, #57876	; 0xe214
  123620:	e3403014 	movt	r3, #20
  123624:	e1d330b8 	ldrh	r3, [r3, #8]
  123628:	e1a01003 	mov	r1, r3
  12362c:	e1a00002 	mov	r0, r2
  123630:	ebffdbfc 	bl	11a628 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
  123634:	e30e3214 	movw	r3, #57876	; 0xe214
  123638:	e3403014 	movt	r3, #20
  12363c:	e1d340b8 	ldrh	r4, [r3, #8]
  123640:	e30e3214 	movw	r3, #57876	; 0xe214
  123644:	e3403014 	movt	r3, #20
  123648:	e593300c 	ldr	r3, [r3, #12]
  12364c:	e1d330bc 	ldrh	r3, [r3, #12]
  123650:	e6ff3073 	uxth	r3, r3
  123654:	e1a00003 	mov	r0, r3
  123658:	ebffcb04 	bl	116270 <lwip_htons>
  12365c:	e1a03000 	mov	r3, r0
  123660:	e2033003 	and	r3, r3, #3
  123664:	e3530000 	cmp	r3, #0
  123668:	0a000001 	beq	123674 <tcp_receive+0x12e0>
  12366c:	e3a03001 	mov	r3, #1
  123670:	ea000000 	b	123678 <tcp_receive+0x12e4>
  123674:	e3a03000 	mov	r3, #0
  123678:	e0833004 	add	r3, r3, r4
  12367c:	e6ff2073 	uxth	r2, r3
  123680:	e30e323e 	movw	r3, #57918	; 0xe23e
  123684:	e3403014 	movt	r3, #20
  123688:	e1c320b0 	strh	r2, [r3]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
  12368c:	e30e323e 	movw	r3, #57918	; 0xe23e
  123690:	e3403014 	movt	r3, #20
  123694:	e1d330b0 	ldrh	r3, [r3]
  123698:	e1a02003 	mov	r2, r3
  12369c:	e30e3234 	movw	r3, #57908	; 0xe234
  1236a0:	e3403014 	movt	r3, #20
  1236a4:	e5933000 	ldr	r3, [r3]
  1236a8:	e0822003 	add	r2, r2, r3
  1236ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1236b0:	e593300c 	ldr	r3, [r3, #12]
  1236b4:	e5933004 	ldr	r3, [r3, #4]
  1236b8:	e1520003 	cmp	r2, r3
  1236bc:	0a000006 	beq	1236dc <tcp_receive+0x1348>
  1236c0:	e3070ac0 	movw	r0, #31424	; 0x7ac0
  1236c4:	e3400014 	movt	r0, #20
  1236c8:	ebff7e91 	bl	103114 <rt_kprintf>
  1236cc:	e300159c 	movw	r1, #1436	; 0x59c
  1236d0:	e30707f8 	movw	r0, #30712	; 0x77f8
  1236d4:	e3400014 	movt	r0, #20
  1236d8:	ebff9d0d 	bl	10ab14 <sys_arch_assert>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
  1236dc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1236e0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1236e4:	e5832074 	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
  1236e8:	e30e323e 	movw	r3, #57918	; 0xe23e
  1236ec:	e3403014 	movt	r3, #20
  1236f0:	e1d330b0 	ldrh	r3, [r3]
  1236f4:	e1a02003 	mov	r2, r3
  1236f8:	e30e3234 	movw	r3, #57908	; 0xe234
  1236fc:	e3403014 	movt	r3, #20
  123700:	e5933000 	ldr	r3, [r3]
  123704:	e0822003 	add	r2, r2, r3
  123708:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12370c:	e5832028 	str	r2, [r3, #40]	; 0x28

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
  123710:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123714:	e1d322bc 	ldrh	r2, [r3, #44]	; 0x2c
  123718:	e30e323e 	movw	r3, #57918	; 0xe23e
  12371c:	e3403014 	movt	r3, #20
  123720:	e1d330b0 	ldrh	r3, [r3]
  123724:	e1520003 	cmp	r2, r3
  123728:	2a000006 	bcs	123748 <tcp_receive+0x13b4>
  12372c:	e3070afc 	movw	r0, #31484	; 0x7afc
  123730:	e3400014 	movt	r0, #20
  123734:	ebff7e76 	bl	103114 <rt_kprintf>
  123738:	e30015a6 	movw	r1, #1446	; 0x5a6
  12373c:	e30707f8 	movw	r0, #30712	; 0x77f8
  123740:	e3400014 	movt	r0, #20
  123744:	ebff9cf2 	bl	10ab14 <sys_arch_assert>
        pcb->rcv_wnd -= tcplen;
  123748:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12374c:	e1d322bc 	ldrh	r2, [r3, #44]	; 0x2c
  123750:	e30e323e 	movw	r3, #57918	; 0xe23e
  123754:	e3403014 	movt	r3, #20
  123758:	e1d330b0 	ldrh	r3, [r3]
  12375c:	e0423003 	sub	r3, r2, r3
  123760:	e6ff2073 	uxth	r2, r3
  123764:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123768:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c

        tcp_update_rcv_ann_wnd(pcb);
  12376c:	e51b0040 	ldr	r0, [fp, #-64]	; 0xffffffc0
  123770:	ebffe93b 	bl	11dc64 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
  123774:	e30e3214 	movw	r3, #57876	; 0xe214
  123778:	e3403014 	movt	r3, #20
  12377c:	e5933004 	ldr	r3, [r3, #4]
  123780:	e1d330b8 	ldrh	r3, [r3, #8]
  123784:	e3530000 	cmp	r3, #0
  123788:	0a000009 	beq	1237b4 <tcp_receive+0x1420>
          recv_data = inseg.p;
  12378c:	e30e3214 	movw	r3, #57876	; 0xe214
  123790:	e3403014 	movt	r3, #20
  123794:	e5932004 	ldr	r2, [r3, #4]
  123798:	e30e3244 	movw	r3, #57924	; 0xe244
  12379c:	e3403014 	movt	r3, #20
  1237a0:	e5832000 	str	r2, [r3]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
  1237a4:	e30e3214 	movw	r3, #57876	; 0xe214
  1237a8:	e3403014 	movt	r3, #20
  1237ac:	e3a02000 	mov	r2, #0
  1237b0:	e5832004 	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
  1237b4:	e30e3214 	movw	r3, #57876	; 0xe214
  1237b8:	e3403014 	movt	r3, #20
  1237bc:	e593300c 	ldr	r3, [r3, #12]
  1237c0:	e1d330bc 	ldrh	r3, [r3, #12]
  1237c4:	e6ff3073 	uxth	r3, r3
  1237c8:	e1a00003 	mov	r0, r3
  1237cc:	ebffcaa7 	bl	116270 <lwip_htons>
  1237d0:	e1a03000 	mov	r3, r0
  1237d4:	e2033001 	and	r3, r3, #1
  1237d8:	e3530000 	cmp	r3, #0
  1237dc:	0a000099 	beq	123a48 <tcp_receive+0x16b4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
  1237e0:	e30e3241 	movw	r3, #57921	; 0xe241
  1237e4:	e3403014 	movt	r3, #20
  1237e8:	e5d33000 	ldrb	r3, [r3]
  1237ec:	e3833020 	orr	r3, r3, #32
  1237f0:	e6ef2073 	uxtb	r2, r3
  1237f4:	e30e3241 	movw	r3, #57921	; 0xe241
  1237f8:	e3403014 	movt	r3, #20
  1237fc:	e5c32000 	strb	r2, [r3]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
  123800:	ea000090 	b	123a48 <tcp_receive+0x16b4>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
  123804:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123808:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  12380c:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
          seqno = pcb->ooseq->tcphdr->seqno;
  123810:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123814:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  123818:	e593300c 	ldr	r3, [r3, #12]
  12381c:	e5932004 	ldr	r2, [r3, #4]
  123820:	e30e3234 	movw	r3, #57908	; 0xe234
  123824:	e3403014 	movt	r3, #20
  123828:	e5832000 	str	r2, [r3]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
  12382c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123830:	e1d330b8 	ldrh	r3, [r3, #8]
  123834:	e1a04003 	mov	r4, r3
  123838:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12383c:	e593300c 	ldr	r3, [r3, #12]
  123840:	e1d330bc 	ldrh	r3, [r3, #12]
  123844:	e6ff3073 	uxth	r3, r3
  123848:	e1a00003 	mov	r0, r3
  12384c:	ebffca87 	bl	116270 <lwip_htons>
  123850:	e1a03000 	mov	r3, r0
  123854:	e2033003 	and	r3, r3, #3
  123858:	e3530000 	cmp	r3, #0
  12385c:	0a000001 	beq	123868 <tcp_receive+0x14d4>
  123860:	e3a03001 	mov	r3, #1
  123864:	ea000000 	b	12386c <tcp_receive+0x14d8>
  123868:	e3a03000 	mov	r3, #0
  12386c:	e0832004 	add	r2, r3, r4
  123870:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123874:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  123878:	e0822003 	add	r2, r2, r3
  12387c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123880:	e5832028 	str	r2, [r3, #40]	; 0x28
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
  123884:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123888:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  12388c:	e1a04003 	mov	r4, r3
  123890:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123894:	e1d330b8 	ldrh	r3, [r3, #8]
  123898:	e1a05003 	mov	r5, r3
  12389c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1238a0:	e593300c 	ldr	r3, [r3, #12]
  1238a4:	e1d330bc 	ldrh	r3, [r3, #12]
  1238a8:	e6ff3073 	uxth	r3, r3
  1238ac:	e1a00003 	mov	r0, r3
  1238b0:	ebffca6e 	bl	116270 <lwip_htons>
  1238b4:	e1a03000 	mov	r3, r0
  1238b8:	e2033003 	and	r3, r3, #3
  1238bc:	e3530000 	cmp	r3, #0
  1238c0:	0a000001 	beq	1238cc <tcp_receive+0x1538>
  1238c4:	e3a03001 	mov	r3, #1
  1238c8:	ea000000 	b	1238d0 <tcp_receive+0x153c>
  1238cc:	e3a03000 	mov	r3, #0
  1238d0:	e0833005 	add	r3, r3, r5
  1238d4:	e1540003 	cmp	r4, r3
  1238d8:	2a000006 	bcs	1238f8 <tcp_receive+0x1564>
  1238dc:	e3070b1c 	movw	r0, #31516	; 0x7b1c
  1238e0:	e3400014 	movt	r0, #20
  1238e4:	ebff7e0a 	bl	103114 <rt_kprintf>
  1238e8:	e30015cb 	movw	r1, #1483	; 0x5cb
  1238ec:	e30707f8 	movw	r0, #30712	; 0x77f8
  1238f0:	e3400014 	movt	r0, #20
  1238f4:	ebff9c86 	bl	10ab14 <sys_arch_assert>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
  1238f8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1238fc:	e1d330b8 	ldrh	r3, [r3, #8]
  123900:	e1a04003 	mov	r4, r3
  123904:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123908:	e593300c 	ldr	r3, [r3, #12]
  12390c:	e1d330bc 	ldrh	r3, [r3, #12]
  123910:	e6ff3073 	uxth	r3, r3
  123914:	e1a00003 	mov	r0, r3
  123918:	ebffca54 	bl	116270 <lwip_htons>
  12391c:	e1a03000 	mov	r3, r0
  123920:	e2033003 	and	r3, r3, #3
  123924:	e3530000 	cmp	r3, #0
  123928:	0a000001 	beq	123934 <tcp_receive+0x15a0>
  12392c:	e3a03001 	mov	r3, #1
  123930:	ea000000 	b	123938 <tcp_receive+0x15a4>
  123934:	e3a03000 	mov	r3, #0
  123938:	e0831004 	add	r1, r3, r4
  12393c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123940:	e1d322bc 	ldrh	r2, [r3, #44]	; 0x2c
  123944:	e6ff3071 	uxth	r3, r1
  123948:	e0423003 	sub	r3, r2, r3
  12394c:	e6ff2073 	uxth	r2, r3
  123950:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123954:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c

          tcp_update_rcv_ann_wnd(pcb);
  123958:	e51b0040 	ldr	r0, [fp, #-64]	; 0xffffffc0
  12395c:	ebffe8c0 	bl	11dc64 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
  123960:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123964:	e5933004 	ldr	r3, [r3, #4]
  123968:	e1d330b8 	ldrh	r3, [r3, #8]
  12396c:	e3530000 	cmp	r3, #0
  123970:	0a000015 	beq	1239cc <tcp_receive+0x1638>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
  123974:	e30e3244 	movw	r3, #57924	; 0xe244
  123978:	e3403014 	movt	r3, #20
  12397c:	e5933000 	ldr	r3, [r3]
  123980:	e3530000 	cmp	r3, #0
  123984:	0a000008 	beq	1239ac <tcp_receive+0x1618>
              pbuf_cat(recv_data, cseg->p);
  123988:	e30e3244 	movw	r3, #57924	; 0xe244
  12398c:	e3403014 	movt	r3, #20
  123990:	e5932000 	ldr	r2, [r3]
  123994:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123998:	e5933004 	ldr	r3, [r3, #4]
  12399c:	e1a01003 	mov	r1, r3
  1239a0:	e1a00002 	mov	r0, r2
  1239a4:	ebffdd1f 	bl	11ae28 <pbuf_cat>
  1239a8:	ea000004 	b	1239c0 <tcp_receive+0x162c>
            } else {
              recv_data = cseg->p;
  1239ac:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1239b0:	e5932004 	ldr	r2, [r3, #4]
  1239b4:	e30e3244 	movw	r3, #57924	; 0xe244
  1239b8:	e3403014 	movt	r3, #20
  1239bc:	e5832000 	str	r2, [r3]
            }
            cseg->p = NULL;
  1239c0:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1239c4:	e3a02000 	mov	r2, #0
  1239c8:	e5832004 	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
  1239cc:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1239d0:	e593300c 	ldr	r3, [r3, #12]
  1239d4:	e1d330bc 	ldrh	r3, [r3, #12]
  1239d8:	e6ff3073 	uxth	r3, r3
  1239dc:	e1a00003 	mov	r0, r3
  1239e0:	ebffca22 	bl	116270 <lwip_htons>
  1239e4:	e1a03000 	mov	r3, r0
  1239e8:	e2033001 	and	r3, r3, #1
  1239ec:	e3530000 	cmp	r3, #0
  1239f0:	0a00000e 	beq	123a30 <tcp_receive+0x169c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
  1239f4:	e30e3241 	movw	r3, #57921	; 0xe241
  1239f8:	e3403014 	movt	r3, #20
  1239fc:	e5d33000 	ldrb	r3, [r3]
  123a00:	e3833020 	orr	r3, r3, #32
  123a04:	e6ef2073 	uxtb	r2, r3
  123a08:	e30e3241 	movw	r3, #57921	; 0xe241
  123a0c:	e3403014 	movt	r3, #20
  123a10:	e5c32000 	strb	r2, [r3]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
  123a14:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123a18:	e5933014 	ldr	r3, [r3, #20]
  123a1c:	e3530004 	cmp	r3, #4
  123a20:	1a000002 	bne	123a30 <tcp_receive+0x169c>
              pcb->state = CLOSE_WAIT;
  123a24:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123a28:	e3a02007 	mov	r2, #7
  123a2c:	e5832014 	str	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
  123a30:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123a34:	e5932000 	ldr	r2, [r3]
  123a38:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123a3c:	e5832074 	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
  123a40:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
  123a44:	ebffedb2 	bl	11f114 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
  123a48:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123a4c:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  123a50:	e3530000 	cmp	r3, #0
  123a54:	0a000007 	beq	123a78 <tcp_receive+0x16e4>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
  123a58:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123a5c:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  123a60:	e593300c 	ldr	r3, [r3, #12]
  123a64:	e5932004 	ldr	r2, [r3, #4]
  123a68:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123a6c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
        while (pcb->ooseq != NULL &&
  123a70:	e1520003 	cmp	r2, r3
  123a74:	0affff62 	beq	123804 <tcp_receive+0x1470>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
  123a78:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123a7c:	e5d3301e 	ldrb	r3, [r3, #30]
  123a80:	e2033001 	and	r3, r3, #1
  123a84:	e3530000 	cmp	r3, #0
  123a88:	0a00000c 	beq	123ac0 <tcp_receive+0x172c>
  123a8c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123a90:	e5d3301e 	ldrb	r3, [r3, #30]
  123a94:	e3c33001 	bic	r3, r3, #1
  123a98:	e6ef2073 	uxtb	r2, r3
  123a9c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123aa0:	e5c3201e 	strb	r2, [r3, #30]
  123aa4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123aa8:	e5d3301e 	ldrb	r3, [r3, #30]
  123aac:	e3833002 	orr	r3, r3, #2
  123ab0:	e6ef2073 	uxtb	r2, r3
  123ab4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123ab8:	e5c3201e 	strb	r2, [r3, #30]
      if (pcb->rcv_nxt == seqno) {
  123abc:	ea00016c 	b	124074 <tcp_receive+0x1ce0>
        tcp_ack(pcb);
  123ac0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123ac4:	e5d3301e 	ldrb	r3, [r3, #30]
  123ac8:	e3833001 	orr	r3, r3, #1
  123acc:	e6ef2073 	uxtb	r2, r3
  123ad0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123ad4:	e5c3201e 	strb	r2, [r3, #30]
      if (pcb->rcv_nxt == seqno) {
  123ad8:	ea000165 	b	124074 <tcp_receive+0x1ce0>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
  123adc:	e51b0040 	ldr	r0, [fp, #-64]	; 0xffffffc0
  123ae0:	eb0007e2 	bl	125a70 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
  123ae4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123ae8:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  123aec:	e3530000 	cmp	r3, #0
  123af0:	1a000006 	bne	123b10 <tcp_receive+0x177c>
          pcb->ooseq = tcp_seg_copy(&inseg);
  123af4:	e30e0214 	movw	r0, #57876	; 0xe214
  123af8:	e3400014 	movt	r0, #20
  123afc:	ebffeda6 	bl	11f19c <tcp_seg_copy>
  123b00:	e1a02000 	mov	r2, r0
  123b04:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123b08:	e5832074 	str	r2, [r3, #116]	; 0x74
      if (pcb->rcv_nxt == seqno) {
  123b0c:	ea000158 	b	124074 <tcp_receive+0x1ce0>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
  123b10:	e3a03000 	mov	r3, #0
  123b14:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
          for (next = pcb->ooseq; next != NULL; next = next->next) {
  123b18:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123b1c:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  123b20:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  123b24:	ea00013f 	b	124028 <tcp_receive+0x1c94>
            if (seqno == next->tcphdr->seqno) {
  123b28:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123b2c:	e593300c 	ldr	r3, [r3, #12]
  123b30:	e5932004 	ldr	r2, [r3, #4]
  123b34:	e30e3234 	movw	r3, #57908	; 0xe234
  123b38:	e3403014 	movt	r3, #20
  123b3c:	e5933000 	ldr	r3, [r3]
  123b40:	e1520003 	cmp	r2, r3
  123b44:	1a00001b 	bne	123bb8 <tcp_receive+0x1824>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
  123b48:	e30e3214 	movw	r3, #57876	; 0xe214
  123b4c:	e3403014 	movt	r3, #20
  123b50:	e1d320b8 	ldrh	r2, [r3, #8]
  123b54:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123b58:	e1d330b8 	ldrh	r3, [r3, #8]
  123b5c:	e1520003 	cmp	r2, r3
  123b60:	9a000134 	bls	124038 <tcp_receive+0x1ca4>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
  123b64:	e30e0214 	movw	r0, #57876	; 0xe214
  123b68:	e3400014 	movt	r0, #20
  123b6c:	ebffed8a 	bl	11f19c <tcp_seg_copy>
  123b70:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
                if (cseg != NULL) {
  123b74:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123b78:	e3530000 	cmp	r3, #0
  123b7c:	0a00012f 	beq	124040 <tcp_receive+0x1cac>
                  if (prev != NULL) {
  123b80:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  123b84:	e3530000 	cmp	r3, #0
  123b88:	0a000003 	beq	123b9c <tcp_receive+0x1808>
                    prev->next = cseg;
  123b8c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  123b90:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
  123b94:	e5832000 	str	r2, [r3]
  123b98:	ea000002 	b	123ba8 <tcp_receive+0x1814>
                  } else {
                    pcb->ooseq = cseg;
  123b9c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123ba0:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
  123ba4:	e5832074 	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
  123ba8:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  123bac:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
  123bb0:	ebfff989 	bl	1221dc <tcp_oos_insert_segment>
                }
                break;
  123bb4:	ea000121 	b	124040 <tcp_receive+0x1cac>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
  123bb8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  123bbc:	e3530000 	cmp	r3, #0
  123bc0:	1a000016 	bne	123c20 <tcp_receive+0x188c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
  123bc4:	e30e3234 	movw	r3, #57908	; 0xe234
  123bc8:	e3403014 	movt	r3, #20
  123bcc:	e5932000 	ldr	r2, [r3]
  123bd0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123bd4:	e593300c 	ldr	r3, [r3, #12]
  123bd8:	e5933004 	ldr	r3, [r3, #4]
  123bdc:	e0423003 	sub	r3, r2, r3
  123be0:	e3530000 	cmp	r3, #0
  123be4:	aa00004e 	bge	123d24 <tcp_receive+0x1990>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
  123be8:	e30e0214 	movw	r0, #57876	; 0xe214
  123bec:	e3400014 	movt	r0, #20
  123bf0:	ebffed69 	bl	11f19c <tcp_seg_copy>
  123bf4:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
                  if (cseg != NULL) {
  123bf8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123bfc:	e3530000 	cmp	r3, #0
  123c00:	0a000110 	beq	124048 <tcp_receive+0x1cb4>
                    pcb->ooseq = cseg;
  123c04:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123c08:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
  123c0c:	e5832074 	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
  123c10:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  123c14:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
  123c18:	ebfff96f 	bl	1221dc <tcp_oos_insert_segment>
                  }
                  break;
  123c1c:	ea000109 	b	124048 <tcp_receive+0x1cb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
  123c20:	e30e3234 	movw	r3, #57908	; 0xe234
  123c24:	e3403014 	movt	r3, #20
  123c28:	e5932000 	ldr	r2, [r3]
  123c2c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  123c30:	e593300c 	ldr	r3, [r3, #12]
  123c34:	e5933004 	ldr	r3, [r3, #4]
  123c38:	e0423003 	sub	r3, r2, r3
  123c3c:	e2433001 	sub	r3, r3, #1
  123c40:	e3530000 	cmp	r3, #0
  123c44:	ba000036 	blt	123d24 <tcp_receive+0x1990>
  123c48:	e30e3234 	movw	r3, #57908	; 0xe234
  123c4c:	e3403014 	movt	r3, #20
  123c50:	e5932000 	ldr	r2, [r3]
  123c54:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123c58:	e593300c 	ldr	r3, [r3, #12]
  123c5c:	e5933004 	ldr	r3, [r3, #4]
  123c60:	e0423003 	sub	r3, r2, r3
  123c64:	e2833001 	add	r3, r3, #1
  123c68:	e3530000 	cmp	r3, #0
  123c6c:	ca00002c 	bgt	123d24 <tcp_receive+0x1990>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
  123c70:	e30e0214 	movw	r0, #57876	; 0xe214
  123c74:	e3400014 	movt	r0, #20
  123c78:	ebffed47 	bl	11f19c <tcp_seg_copy>
  123c7c:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
                  if (cseg != NULL) {
  123c80:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123c84:	e3530000 	cmp	r3, #0
  123c88:	0a0000f0 	beq	124050 <tcp_receive+0x1cbc>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
  123c8c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  123c90:	e593300c 	ldr	r3, [r3, #12]
  123c94:	e5933004 	ldr	r3, [r3, #4]
  123c98:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  123c9c:	e1d220b8 	ldrh	r2, [r2, #8]
  123ca0:	e0832002 	add	r2, r3, r2
  123ca4:	e30e3234 	movw	r3, #57908	; 0xe234
  123ca8:	e3403014 	movt	r3, #20
  123cac:	e5933000 	ldr	r3, [r3]
  123cb0:	e0423003 	sub	r3, r2, r3
  123cb4:	e3530000 	cmp	r3, #0
  123cb8:	da000012 	ble	123d08 <tcp_receive+0x1974>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
  123cbc:	e30e3234 	movw	r3, #57908	; 0xe234
  123cc0:	e3403014 	movt	r3, #20
  123cc4:	e5933000 	ldr	r3, [r3]
  123cc8:	e6ff2073 	uxth	r2, r3
  123ccc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  123cd0:	e593300c 	ldr	r3, [r3, #12]
  123cd4:	e5933004 	ldr	r3, [r3, #4]
  123cd8:	e6ff3073 	uxth	r3, r3
  123cdc:	e0423003 	sub	r3, r2, r3
  123ce0:	e6ff2073 	uxth	r2, r3
  123ce4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  123ce8:	e1c320b8 	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
  123cec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  123cf0:	e5932004 	ldr	r2, [r3, #4]
  123cf4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  123cf8:	e1d330b8 	ldrh	r3, [r3, #8]
  123cfc:	e1a01003 	mov	r1, r3
  123d00:	e1a00002 	mov	r0, r2
  123d04:	ebffda47 	bl	11a628 <pbuf_realloc>
                    }
                    prev->next = cseg;
  123d08:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  123d0c:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
  123d10:	e5832000 	str	r2, [r3]
                    tcp_oos_insert_segment(cseg, next);
  123d14:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  123d18:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
  123d1c:	ebfff92e 	bl	1221dc <tcp_oos_insert_segment>
                  }
                  break;
  123d20:	ea0000ca 	b	124050 <tcp_receive+0x1cbc>
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
  123d24:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123d28:	e5933000 	ldr	r3, [r3]
  123d2c:	e3530000 	cmp	r3, #0
  123d30:	1a0000b7 	bne	124014 <tcp_receive+0x1c80>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
  123d34:	e30e3234 	movw	r3, #57908	; 0xe234
  123d38:	e3403014 	movt	r3, #20
  123d3c:	e5932000 	ldr	r2, [r3]
  123d40:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123d44:	e593300c 	ldr	r3, [r3, #12]
  123d48:	e5933004 	ldr	r3, [r3, #4]
  123d4c:	e0423003 	sub	r3, r2, r3
              if (next->next == NULL &&
  123d50:	e3530000 	cmp	r3, #0
  123d54:	da0000ae 	ble	124014 <tcp_receive+0x1c80>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
  123d58:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123d5c:	e593300c 	ldr	r3, [r3, #12]
  123d60:	e1d330bc 	ldrh	r3, [r3, #12]
  123d64:	e6ff3073 	uxth	r3, r3
  123d68:	e1a00003 	mov	r0, r3
  123d6c:	ebffc93f 	bl	116270 <lwip_htons>
  123d70:	e1a03000 	mov	r3, r0
  123d74:	e2033001 	and	r3, r3, #1
  123d78:	e3530000 	cmp	r3, #0
  123d7c:	1a0000b5 	bne	124058 <tcp_receive+0x1cc4>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
  123d80:	e30e0214 	movw	r0, #57876	; 0xe214
  123d84:	e3400014 	movt	r0, #20
  123d88:	ebffed03 	bl	11f19c <tcp_seg_copy>
  123d8c:	e1a02000 	mov	r2, r0
  123d90:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123d94:	e5832000 	str	r2, [r3]
                if (next->next != NULL) {
  123d98:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123d9c:	e5933000 	ldr	r3, [r3]
  123da0:	e3530000 	cmp	r3, #0
  123da4:	0a0000ad 	beq	124060 <tcp_receive+0x1ccc>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
  123da8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123dac:	e593300c 	ldr	r3, [r3, #12]
  123db0:	e5933004 	ldr	r3, [r3, #4]
  123db4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  123db8:	e1d220b8 	ldrh	r2, [r2, #8]
  123dbc:	e0832002 	add	r2, r3, r2
  123dc0:	e30e3234 	movw	r3, #57908	; 0xe234
  123dc4:	e3403014 	movt	r3, #20
  123dc8:	e5933000 	ldr	r3, [r3]
  123dcc:	e0423003 	sub	r3, r2, r3
  123dd0:	e3530000 	cmp	r3, #0
  123dd4:	da000012 	ble	123e24 <tcp_receive+0x1a90>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
  123dd8:	e30e3234 	movw	r3, #57908	; 0xe234
  123ddc:	e3403014 	movt	r3, #20
  123de0:	e5933000 	ldr	r3, [r3]
  123de4:	e6ff2073 	uxth	r2, r3
  123de8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123dec:	e593300c 	ldr	r3, [r3, #12]
  123df0:	e5933004 	ldr	r3, [r3, #4]
  123df4:	e6ff3073 	uxth	r3, r3
  123df8:	e0423003 	sub	r3, r2, r3
  123dfc:	e6ff2073 	uxth	r2, r3
  123e00:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123e04:	e1c320b8 	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
  123e08:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123e0c:	e5932004 	ldr	r2, [r3, #4]
  123e10:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123e14:	e1d330b8 	ldrh	r3, [r3, #8]
  123e18:	e1a01003 	mov	r1, r3
  123e1c:	e1a00002 	mov	r0, r2
  123e20:	ebffda00 	bl	11a628 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
  123e24:	e30e323e 	movw	r3, #57918	; 0xe23e
  123e28:	e3403014 	movt	r3, #20
  123e2c:	e1d330b0 	ldrh	r3, [r3]
  123e30:	e1a02003 	mov	r2, r3
  123e34:	e30e3234 	movw	r3, #57908	; 0xe234
  123e38:	e3403014 	movt	r3, #20
  123e3c:	e5933000 	ldr	r3, [r3]
  123e40:	e0822003 	add	r2, r2, r3
  123e44:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123e48:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  123e4c:	e51b1040 	ldr	r1, [fp, #-64]	; 0xffffffc0
  123e50:	e1d112bc 	ldrh	r1, [r1, #44]	; 0x2c
  123e54:	e0833001 	add	r3, r3, r1
  123e58:	e0423003 	sub	r3, r2, r3
  123e5c:	e3530000 	cmp	r3, #0
  123e60:	da00007e 	ble	124060 <tcp_receive+0x1ccc>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
  123e64:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123e68:	e5933000 	ldr	r3, [r3]
  123e6c:	e593300c 	ldr	r3, [r3, #12]
  123e70:	e1d330bc 	ldrh	r3, [r3, #12]
  123e74:	e6ff3073 	uxth	r3, r3
  123e78:	e1a00003 	mov	r0, r3
  123e7c:	ebffc8fb 	bl	116270 <lwip_htons>
  123e80:	e1a03000 	mov	r3, r0
  123e84:	e2033001 	and	r3, r3, #1
  123e88:	e3530000 	cmp	r3, #0
  123e8c:	0a00001a 	beq	123efc <tcp_receive+0x1b68>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
  123e90:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123e94:	e5933000 	ldr	r3, [r3]
  123e98:	e593300c 	ldr	r3, [r3, #12]
  123e9c:	e1d330bc 	ldrh	r3, [r3, #12]
  123ea0:	e6ff3073 	uxth	r3, r3
  123ea4:	e3c33c3f 	bic	r3, r3, #16128	; 0x3f00
  123ea8:	e6ff4073 	uxth	r4, r3
  123eac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123eb0:	e5933000 	ldr	r3, [r3]
  123eb4:	e593300c 	ldr	r3, [r3, #12]
  123eb8:	e1d330bc 	ldrh	r3, [r3, #12]
  123ebc:	e6ff3073 	uxth	r3, r3
  123ec0:	e1a00003 	mov	r0, r3
  123ec4:	ebffc8e9 	bl	116270 <lwip_htons>
  123ec8:	e1a03000 	mov	r3, r0
  123ecc:	e203303e 	and	r3, r3, #62	; 0x3e
  123ed0:	e6ff3073 	uxth	r3, r3
  123ed4:	e1a00003 	mov	r0, r3
  123ed8:	ebffc8e4 	bl	116270 <lwip_htons>
  123edc:	e1a03000 	mov	r3, r0
  123ee0:	e1a02003 	mov	r2, r3
  123ee4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123ee8:	e5933000 	ldr	r3, [r3]
  123eec:	e593300c 	ldr	r3, [r3, #12]
  123ef0:	e1842002 	orr	r2, r4, r2
  123ef4:	e6ff2072 	uxth	r2, r2
  123ef8:	e1c320bc 	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
  123efc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123f00:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  123f04:	e6ff2073 	uxth	r2, r3
  123f08:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123f0c:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  123f10:	e0823003 	add	r3, r2, r3
  123f14:	e6ff1073 	uxth	r1, r3
  123f18:	e30e3234 	movw	r3, #57908	; 0xe234
  123f1c:	e3403014 	movt	r3, #20
  123f20:	e5933000 	ldr	r3, [r3]
  123f24:	e6ff2073 	uxth	r2, r3
  123f28:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123f2c:	e5933000 	ldr	r3, [r3]
  123f30:	e0412002 	sub	r2, r1, r2
  123f34:	e6ff2072 	uxth	r2, r2
  123f38:	e1c320b8 	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
  123f3c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123f40:	e5933000 	ldr	r3, [r3]
  123f44:	e5932004 	ldr	r2, [r3, #4]
  123f48:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123f4c:	e5933000 	ldr	r3, [r3]
  123f50:	e1d330b8 	ldrh	r3, [r3, #8]
  123f54:	e1a01003 	mov	r1, r3
  123f58:	e1a00002 	mov	r0, r2
  123f5c:	ebffd9b1 	bl	11a628 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
  123f60:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123f64:	e5933000 	ldr	r3, [r3]
  123f68:	e1d340b8 	ldrh	r4, [r3, #8]
  123f6c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123f70:	e5933000 	ldr	r3, [r3]
  123f74:	e593300c 	ldr	r3, [r3, #12]
  123f78:	e1d330bc 	ldrh	r3, [r3, #12]
  123f7c:	e6ff3073 	uxth	r3, r3
  123f80:	e1a00003 	mov	r0, r3
  123f84:	ebffc8b9 	bl	116270 <lwip_htons>
  123f88:	e1a03000 	mov	r3, r0
  123f8c:	e2033003 	and	r3, r3, #3
  123f90:	e3530000 	cmp	r3, #0
  123f94:	0a000001 	beq	123fa0 <tcp_receive+0x1c0c>
  123f98:	e3a03001 	mov	r3, #1
  123f9c:	ea000000 	b	123fa4 <tcp_receive+0x1c10>
  123fa0:	e3a03000 	mov	r3, #0
  123fa4:	e0833004 	add	r3, r3, r4
  123fa8:	e6ff2073 	uxth	r2, r3
  123fac:	e30e323e 	movw	r3, #57918	; 0xe23e
  123fb0:	e3403014 	movt	r3, #20
  123fb4:	e1c320b0 	strh	r2, [r3]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
  123fb8:	e30e323e 	movw	r3, #57918	; 0xe23e
  123fbc:	e3403014 	movt	r3, #20
  123fc0:	e1d330b0 	ldrh	r3, [r3]
  123fc4:	e1a02003 	mov	r2, r3
  123fc8:	e30e3234 	movw	r3, #57908	; 0xe234
  123fcc:	e3403014 	movt	r3, #20
  123fd0:	e5933000 	ldr	r3, [r3]
  123fd4:	e0822003 	add	r2, r2, r3
  123fd8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123fdc:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  123fe0:	e51b1040 	ldr	r1, [fp, #-64]	; 0xffffffc0
  123fe4:	e1d112bc 	ldrh	r1, [r1, #44]	; 0x2c
  123fe8:	e0833001 	add	r3, r3, r1
  123fec:	e1520003 	cmp	r2, r3
  123ff0:	0a00001a 	beq	124060 <tcp_receive+0x1ccc>
  123ff4:	e3070a88 	movw	r0, #31368	; 0x7a88
  123ff8:	e3400014 	movt	r0, #20
  123ffc:	ebff7c44 	bl	103114 <rt_kprintf>
  124000:	e3001668 	movw	r1, #1640	; 0x668
  124004:	e30707f8 	movw	r0, #30712	; 0x77f8
  124008:	e3400014 	movt	r0, #20
  12400c:	ebff9ac0 	bl	10ab14 <sys_arch_assert>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
  124010:	ea000012 	b	124060 <tcp_receive+0x1ccc>
              }
            }
            prev = next;
  124014:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124018:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
          for (next = pcb->ooseq; next != NULL; next = next->next) {
  12401c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124020:	e5933000 	ldr	r3, [r3]
  124024:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  124028:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12402c:	e3530000 	cmp	r3, #0
  124030:	1afffebc 	bne	123b28 <tcp_receive+0x1794>
      if (pcb->rcv_nxt == seqno) {
  124034:	ea00000e 	b	124074 <tcp_receive+0x1ce0>
                break;
  124038:	e320f000 	nop	{0}
  12403c:	ea00000c 	b	124074 <tcp_receive+0x1ce0>
                break;
  124040:	e320f000 	nop	{0}
  124044:	ea00000a 	b	124074 <tcp_receive+0x1ce0>
                  break;
  124048:	e320f000 	nop	{0}
  12404c:	ea000008 	b	124074 <tcp_receive+0x1ce0>
                  break;
  124050:	e320f000 	nop	{0}
  124054:	ea000006 	b	124074 <tcp_receive+0x1ce0>
                  break;
  124058:	e320f000 	nop	{0}
  12405c:	ea000004 	b	124074 <tcp_receive+0x1ce0>
                break;
  124060:	e320f000 	nop	{0}
      if (pcb->rcv_nxt == seqno) {
  124064:	ea000002 	b	124074 <tcp_receive+0x1ce0>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
  124068:	e51b0040 	ldr	r0, [fp, #-64]	; 0xffffffc0
  12406c:	eb00067f 	bl	125a70 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
  124070:	ea00001b 	b	1240e4 <tcp_receive+0x1d50>
  124074:	ea00001a 	b	1240e4 <tcp_receive+0x1d50>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
  124078:	e30e3234 	movw	r3, #57908	; 0xe234
  12407c:	e3403014 	movt	r3, #20
  124080:	e5932000 	ldr	r2, [r3]
  124084:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  124088:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12408c:	e0423003 	sub	r3, r2, r3
  124090:	e3530000 	cmp	r3, #0
  124094:	ba00000b 	blt	1240c8 <tcp_receive+0x1d34>
  124098:	e30e3234 	movw	r3, #57908	; 0xe234
  12409c:	e3403014 	movt	r3, #20
  1240a0:	e5932000 	ldr	r2, [r3]
  1240a4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1240a8:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  1240ac:	e51b1040 	ldr	r1, [fp, #-64]	; 0xffffffc0
  1240b0:	e1d112bc 	ldrh	r1, [r1, #44]	; 0x2c
  1240b4:	e0833001 	add	r3, r3, r1
  1240b8:	e0423003 	sub	r3, r2, r3
  1240bc:	e2833001 	add	r3, r3, #1
  1240c0:	e3530000 	cmp	r3, #0
  1240c4:	da000006 	ble	1240e4 <tcp_receive+0x1d50>
      tcp_ack_now(pcb);
  1240c8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1240cc:	e5d3301e 	ldrb	r3, [r3, #30]
  1240d0:	e3833002 	orr	r3, r3, #2
  1240d4:	e6ef2073 	uxtb	r2, r3
  1240d8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1240dc:	e5c3201e 	strb	r2, [r3, #30]
    }
  }
}
  1240e0:	eaffffff 	b	1240e4 <tcp_receive+0x1d50>
  1240e4:	e320f000 	nop	{0}
  1240e8:	e24bd010 	sub	sp, fp, #16
  1240ec:	e8bd8870 	pop	{r4, r5, r6, fp, pc}

001240f0 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
  1240f0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1240f4:	e28db000 	add	fp, sp, #0
  1240f8:	e24dd00c 	sub	sp, sp, #12
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
  1240fc:	e30e322c 	movw	r3, #57900	; 0xe22c
  124100:	e3403014 	movt	r3, #20
  124104:	e5933000 	ldr	r3, [r3]
  124108:	e3530000 	cmp	r3, #0
  12410c:	0a000007 	beq	124130 <tcp_getoptbyte+0x40>
  124110:	e30e3230 	movw	r3, #57904	; 0xe230
  124114:	e3403014 	movt	r3, #20
  124118:	e1d320b0 	ldrh	r2, [r3]
  12411c:	e30e322a 	movw	r3, #57898	; 0xe22a
  124120:	e3403014 	movt	r3, #20
  124124:	e1d330b0 	ldrh	r3, [r3]
  124128:	e1520003 	cmp	r2, r3
  12412c:	2a000010 	bcs	124174 <tcp_getoptbyte+0x84>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
  124130:	e30e3224 	movw	r3, #57892	; 0xe224
  124134:	e3403014 	movt	r3, #20
  124138:	e5933000 	ldr	r3, [r3]
  12413c:	e2833014 	add	r3, r3, #20
  124140:	e50b300c 	str	r3, [fp, #-12]
    return opts[tcp_optidx++];
  124144:	e30e3230 	movw	r3, #57904	; 0xe230
  124148:	e3403014 	movt	r3, #20
  12414c:	e1d320b0 	ldrh	r2, [r3]
  124150:	e2823001 	add	r3, r2, #1
  124154:	e6ff1073 	uxth	r1, r3
  124158:	e30e3230 	movw	r3, #57904	; 0xe230
  12415c:	e3403014 	movt	r3, #20
  124160:	e1c310b0 	strh	r1, [r3]
  124164:	e51b300c 	ldr	r3, [fp, #-12]
  124168:	e0833002 	add	r3, r3, r2
  12416c:	e5d33000 	ldrb	r3, [r3]
  124170:	ea000014 	b	1241c8 <tcp_getoptbyte+0xd8>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
  124174:	e30e3230 	movw	r3, #57904	; 0xe230
  124178:	e3403014 	movt	r3, #20
  12417c:	e1d320b0 	ldrh	r2, [r3]
  124180:	e2823001 	add	r3, r2, #1
  124184:	e6ff1073 	uxth	r1, r3
  124188:	e30e3230 	movw	r3, #57904	; 0xe230
  12418c:	e3403014 	movt	r3, #20
  124190:	e1c310b0 	strh	r1, [r3]
  124194:	e6ef2072 	uxtb	r2, r2
  124198:	e30e322a 	movw	r3, #57898	; 0xe22a
  12419c:	e3403014 	movt	r3, #20
  1241a0:	e1d330b0 	ldrh	r3, [r3]
  1241a4:	e6ef3073 	uxtb	r3, r3
  1241a8:	e0423003 	sub	r3, r2, r3
  1241ac:	e54b3005 	strb	r3, [fp, #-5]
    return tcphdr_opt2[idx];
  1241b0:	e30e322c 	movw	r3, #57900	; 0xe22c
  1241b4:	e3403014 	movt	r3, #20
  1241b8:	e5932000 	ldr	r2, [r3]
  1241bc:	e55b3005 	ldrb	r3, [fp, #-5]
  1241c0:	e0823003 	add	r3, r2, r3
  1241c4:	e5d33000 	ldrb	r3, [r3]
  }
}
  1241c8:	e1a00003 	mov	r0, r3
  1241cc:	e28bd000 	add	sp, fp, #0
  1241d0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1241d4:	e12fff1e 	bx	lr

001241d8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
  1241d8:	e92d4800 	push	{fp, lr}
  1241dc:	e28db004 	add	fp, sp, #4
  1241e0:	e24dd010 	sub	sp, sp, #16
  1241e4:	e50b0010 	str	r0, [fp, #-16]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
  1241e8:	e30e3228 	movw	r3, #57896	; 0xe228
  1241ec:	e3403014 	movt	r3, #20
  1241f0:	e1d330b0 	ldrh	r3, [r3]
  1241f4:	e3530000 	cmp	r3, #0
  1241f8:	0a000054 	beq	124350 <tcp_parseopt+0x178>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
  1241fc:	e30e3230 	movw	r3, #57904	; 0xe230
  124200:	e3403014 	movt	r3, #20
  124204:	e3a02000 	mov	r2, #0
  124208:	e1c320b0 	strh	r2, [r3]
  12420c:	ea000041 	b	124318 <tcp_parseopt+0x140>
      u8_t opt = tcp_getoptbyte();
  124210:	ebffffb6 	bl	1240f0 <tcp_getoptbyte>
  124214:	e1a03000 	mov	r3, r0
  124218:	e54b3005 	strb	r3, [fp, #-5]
      switch (opt) {
  12421c:	e55b3005 	ldrb	r3, [fp, #-5]
  124220:	e3530001 	cmp	r3, #1
  124224:	0a00003b 	beq	124318 <tcp_parseopt+0x140>
  124228:	e3530002 	cmp	r3, #2
  12422c:	0a000002 	beq	12423c <tcp_parseopt+0x64>
  124230:	e3530000 	cmp	r3, #0
  124234:	0a000040 	beq	12433c <tcp_parseopt+0x164>
  124238:	ea000024 	b	1242d0 <tcp_parseopt+0xf8>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
  12423c:	ebffffab 	bl	1240f0 <tcp_getoptbyte>
  124240:	e1a03000 	mov	r3, r0
  124244:	e3530004 	cmp	r3, #4
  124248:	1a00003d 	bne	124344 <tcp_parseopt+0x16c>
  12424c:	e30e3230 	movw	r3, #57904	; 0xe230
  124250:	e3403014 	movt	r3, #20
  124254:	e1d330b0 	ldrh	r3, [r3]
  124258:	e2832002 	add	r2, r3, #2
  12425c:	e30e3228 	movw	r3, #57896	; 0xe228
  124260:	e3403014 	movt	r3, #20
  124264:	e1d330b0 	ldrh	r3, [r3]
  124268:	e1520003 	cmp	r2, r3
  12426c:	ca000034 	bgt	124344 <tcp_parseopt+0x16c>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
  124270:	ebffff9e 	bl	1240f0 <tcp_getoptbyte>
  124274:	e1a03000 	mov	r3, r0
  124278:	e6ff3073 	uxth	r3, r3
  12427c:	e1a03403 	lsl	r3, r3, #8
  124280:	e14b30b8 	strh	r3, [fp, #-8]
        mss |= tcp_getoptbyte();
  124284:	ebffff99 	bl	1240f0 <tcp_getoptbyte>
  124288:	e1a03000 	mov	r3, r0
  12428c:	e6ff2073 	uxth	r2, r3
  124290:	e15b30b8 	ldrh	r3, [fp, #-8]
  124294:	e1823003 	orr	r3, r2, r3
  124298:	e14b30b8 	strh	r3, [fp, #-8]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
  12429c:	e15b30b8 	ldrh	r3, [fp, #-8]
  1242a0:	e30025b4 	movw	r2, #1460	; 0x5b4
  1242a4:	e1530002 	cmp	r3, r2
  1242a8:	8a000004 	bhi	1242c0 <tcp_parseopt+0xe8>
  1242ac:	e15b30b8 	ldrh	r3, [fp, #-8]
  1242b0:	e3530000 	cmp	r3, #0
  1242b4:	0a000001 	beq	1242c0 <tcp_parseopt+0xe8>
  1242b8:	e15b30b8 	ldrh	r3, [fp, #-8]
  1242bc:	ea000000 	b	1242c4 <tcp_parseopt+0xec>
  1242c0:	e30035b4 	movw	r3, #1460	; 0x5b4
  1242c4:	e51b2010 	ldr	r2, [fp, #-16]
  1242c8:	e1c233b6 	strh	r3, [r2, #54]	; 0x36
        break;
  1242cc:	ea000011 	b	124318 <tcp_parseopt+0x140>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
  1242d0:	ebffff86 	bl	1240f0 <tcp_getoptbyte>
  1242d4:	e1a03000 	mov	r3, r0
  1242d8:	e54b3009 	strb	r3, [fp, #-9]
        if (data < 2) {
  1242dc:	e55b3009 	ldrb	r3, [fp, #-9]
  1242e0:	e3530001 	cmp	r3, #1
  1242e4:	9a000018 	bls	12434c <tcp_parseopt+0x174>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
  1242e8:	e55b3009 	ldrb	r3, [fp, #-9]
  1242ec:	e6ff2073 	uxth	r2, r3
  1242f0:	e30e3230 	movw	r3, #57904	; 0xe230
  1242f4:	e3403014 	movt	r3, #20
  1242f8:	e1d330b0 	ldrh	r3, [r3]
  1242fc:	e0823003 	add	r3, r2, r3
  124300:	e6ff3073 	uxth	r3, r3
  124304:	e2433002 	sub	r3, r3, #2
  124308:	e6ff2073 	uxth	r2, r3
  12430c:	e30e3230 	movw	r3, #57904	; 0xe230
  124310:	e3403014 	movt	r3, #20
  124314:	e1c320b0 	strh	r2, [r3]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
  124318:	e30e3230 	movw	r3, #57904	; 0xe230
  12431c:	e3403014 	movt	r3, #20
  124320:	e1d320b0 	ldrh	r2, [r3]
  124324:	e30e3228 	movw	r3, #57896	; 0xe228
  124328:	e3403014 	movt	r3, #20
  12432c:	e1d330b0 	ldrh	r3, [r3]
  124330:	e1520003 	cmp	r2, r3
  124334:	3affffb5 	bcc	124210 <tcp_parseopt+0x38>
  124338:	ea000004 	b	124350 <tcp_parseopt+0x178>
        return;
  12433c:	e320f000 	nop	{0}
  124340:	ea000002 	b	124350 <tcp_parseopt+0x178>
          return;
  124344:	e320f000 	nop	{0}
  124348:	ea000000 	b	124350 <tcp_parseopt+0x178>
          return;
  12434c:	e320f000 	nop	{0}
      }
    }
  }
}
  124350:	e24bd004 	sub	sp, fp, #4
  124354:	e8bd8800 	pop	{fp, pc}

00124358 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  124358:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  12435c:	e28db000 	add	fp, sp, #0
  recv_flags |= TF_CLOSED;
  124360:	e30e3241 	movw	r3, #57921	; 0xe241
  124364:	e3403014 	movt	r3, #20
  124368:	e5d33000 	ldrb	r3, [r3]
  12436c:	e3833010 	orr	r3, r3, #16
  124370:	e6ef2073 	uxtb	r2, r3
  124374:	e30e3241 	movw	r3, #57921	; 0xe241
  124378:	e3403014 	movt	r3, #20
  12437c:	e5c32000 	strb	r2, [r3]
}
  124380:	e320f000 	nop	{0}
  124384:	e28bd000 	add	sp, fp, #0
  124388:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  12438c:	e12fff1e 	bx	lr

00124390 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
  124390:	e92d4800 	push	{fp, lr}
  124394:	e28db004 	add	fp, sp, #4
  124398:	e24dd018 	sub	sp, sp, #24
  12439c:	e50b0010 	str	r0, [fp, #-16]
  1243a0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  1243a4:	e1a03001 	mov	r3, r1
  1243a8:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  1243ac:	e1a03002 	mov	r3, r2
  1243b0:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
  1243b4:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  1243b8:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  1243bc:	e0823003 	add	r3, r2, r3
  1243c0:	e6ff3073 	uxth	r3, r3
  1243c4:	e2833014 	add	r3, r3, #20
  1243c8:	e6ff3073 	uxth	r3, r3
  1243cc:	e3a02000 	mov	r2, #0
  1243d0:	e1a01003 	mov	r1, r3
  1243d4:	e3a00001 	mov	r0, #1
  1243d8:	ebffd6d4 	bl	119f30 <pbuf_alloc>
  1243dc:	e50b0008 	str	r0, [fp, #-8]
  if (p != NULL) {
  1243e0:	e51b3008 	ldr	r3, [fp, #-8]
  1243e4:	e3530000 	cmp	r3, #0
  1243e8:	0a000052 	beq	124538 <tcp_output_alloc_header+0x1a8>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
  1243ec:	e51b3008 	ldr	r3, [fp, #-8]
  1243f0:	e1d330ba 	ldrh	r3, [r3, #10]
  1243f4:	e1a02003 	mov	r2, r3
  1243f8:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  1243fc:	e2833014 	add	r3, r3, #20
  124400:	e1520003 	cmp	r2, r3
  124404:	aa000006 	bge	124424 <tcp_output_alloc_header+0x94>
  124408:	e3070b44 	movw	r0, #31556	; 0x7b44
  12440c:	e3400014 	movt	r0, #20
  124410:	ebff7b3f 	bl	103114 <rt_kprintf>
  124414:	e3a01073 	mov	r1, #115	; 0x73
  124418:	e3070b74 	movw	r0, #31604	; 0x7b74
  12441c:	e3400014 	movt	r0, #20
  124420:	ebff99bb 	bl	10ab14 <sys_arch_assert>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
  124424:	e51b3008 	ldr	r3, [fp, #-8]
  124428:	e5933004 	ldr	r3, [r3, #4]
  12442c:	e50b300c 	str	r3, [fp, #-12]
    tcphdr->src = lwip_htons(pcb->local_port);
  124430:	e51b3010 	ldr	r3, [fp, #-16]
  124434:	e1d331ba 	ldrh	r3, [r3, #26]
  124438:	e1a00003 	mov	r0, r3
  12443c:	ebffc78b 	bl	116270 <lwip_htons>
  124440:	e1a03000 	mov	r3, r0
  124444:	e1a02003 	mov	r2, r3
  124448:	e51b300c 	ldr	r3, [fp, #-12]
  12444c:	e1c320b0 	strh	r2, [r3]
    tcphdr->dest = lwip_htons(pcb->remote_port);
  124450:	e51b3010 	ldr	r3, [fp, #-16]
  124454:	e1d331bc 	ldrh	r3, [r3, #28]
  124458:	e1a00003 	mov	r0, r3
  12445c:	ebffc783 	bl	116270 <lwip_htons>
  124460:	e1a03000 	mov	r3, r0
  124464:	e1a02003 	mov	r2, r3
  124468:	e51b300c 	ldr	r3, [fp, #-12]
  12446c:	e1c320b2 	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
  124470:	e51b300c 	ldr	r3, [fp, #-12]
  124474:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  124478:	e5832004 	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
  12447c:	e51b3010 	ldr	r3, [fp, #-16]
  124480:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  124484:	e1a00003 	mov	r0, r3
  124488:	ebffc784 	bl	1162a0 <lwip_htonl>
  12448c:	e1a02000 	mov	r2, r0
  124490:	e51b300c 	ldr	r3, [fp, #-12]
  124494:	e5832008 	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
  124498:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  12449c:	e1a03123 	lsr	r3, r3, #2
  1244a0:	e6ff3073 	uxth	r3, r3
  1244a4:	e2833005 	add	r3, r3, #5
  1244a8:	e6ff3073 	uxth	r3, r3
  1244ac:	e1a03603 	lsl	r3, r3, #12
  1244b0:	e6ff3073 	uxth	r3, r3
  1244b4:	e3833010 	orr	r3, r3, #16
  1244b8:	e6ff3073 	uxth	r3, r3
  1244bc:	e1a00003 	mov	r0, r3
  1244c0:	ebffc76a 	bl	116270 <lwip_htons>
  1244c4:	e1a03000 	mov	r3, r0
  1244c8:	e1a02003 	mov	r2, r3
  1244cc:	e51b300c 	ldr	r3, [fp, #-12]
  1244d0:	e1c320bc 	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  1244d4:	e51b3010 	ldr	r3, [fp, #-16]
  1244d8:	e1d332be 	ldrh	r3, [r3, #46]	; 0x2e
  1244dc:	e1a00003 	mov	r0, r3
  1244e0:	ebffc762 	bl	116270 <lwip_htons>
  1244e4:	e1a03000 	mov	r3, r0
  1244e8:	e1a02003 	mov	r2, r3
  1244ec:	e51b300c 	ldr	r3, [fp, #-12]
  1244f0:	e1c320be 	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
  1244f4:	e51b300c 	ldr	r3, [fp, #-12]
  1244f8:	e3a02000 	mov	r2, #0
  1244fc:	e5c32010 	strb	r2, [r3, #16]
  124500:	e3a02000 	mov	r2, #0
  124504:	e5c32011 	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
  124508:	e51b300c 	ldr	r3, [fp, #-12]
  12450c:	e3a02000 	mov	r2, #0
  124510:	e5c32012 	strb	r2, [r3, #18]
  124514:	e3a02000 	mov	r2, #0
  124518:	e5c32013 	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
  12451c:	e51b3010 	ldr	r3, [fp, #-16]
  124520:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  124524:	e51b2010 	ldr	r2, [fp, #-16]
  124528:	e1d222be 	ldrh	r2, [r2, #46]	; 0x2e
  12452c:	e0832002 	add	r2, r3, r2
  124530:	e51b3010 	ldr	r3, [fp, #-16]
  124534:	e5832030 	str	r2, [r3, #48]	; 0x30
  }
  return p;
  124538:	e51b3008 	ldr	r3, [fp, #-8]
}
  12453c:	e1a00003 	mov	r0, r3
  124540:	e24bd004 	sub	sp, fp, #4
  124544:	e8bd8800 	pop	{fp, pc}

00124548 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
  124548:	e92d4810 	push	{r4, fp, lr}
  12454c:	e28db008 	add	fp, sp, #8
  124550:	e24dd014 	sub	sp, sp, #20
  124554:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
  124558:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12455c:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  124560:	e3530000 	cmp	r3, #0
  124564:	0a000029 	beq	124610 <tcp_send_fin+0xc8>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
  124568:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12456c:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  124570:	e50b3010 	str	r3, [fp, #-16]
  124574:	ea000002 	b	124584 <tcp_send_fin+0x3c>
         last_unsent = last_unsent->next);
  124578:	e51b3010 	ldr	r3, [fp, #-16]
  12457c:	e5933000 	ldr	r3, [r3]
  124580:	e50b3010 	str	r3, [fp, #-16]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
  124584:	e51b3010 	ldr	r3, [fp, #-16]
  124588:	e5933000 	ldr	r3, [r3]
  12458c:	e3530000 	cmp	r3, #0
  124590:	1afffff8 	bne	124578 <tcp_send_fin+0x30>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
  124594:	e51b3010 	ldr	r3, [fp, #-16]
  124598:	e593300c 	ldr	r3, [r3, #12]
  12459c:	e1d330bc 	ldrh	r3, [r3, #12]
  1245a0:	e6ff3073 	uxth	r3, r3
  1245a4:	e1a00003 	mov	r0, r3
  1245a8:	ebffc730 	bl	116270 <lwip_htons>
  1245ac:	e1a03000 	mov	r3, r0
  1245b0:	e2033007 	and	r3, r3, #7
  1245b4:	e3530000 	cmp	r3, #0
  1245b8:	1a000014 	bne	124610 <tcp_send_fin+0xc8>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
  1245bc:	e51b3010 	ldr	r3, [fp, #-16]
  1245c0:	e593300c 	ldr	r3, [r3, #12]
  1245c4:	e1d330bc 	ldrh	r3, [r3, #12]
  1245c8:	e6ff4073 	uxth	r4, r3
  1245cc:	e3a00001 	mov	r0, #1
  1245d0:	ebffc726 	bl	116270 <lwip_htons>
  1245d4:	e1a03000 	mov	r3, r0
  1245d8:	e1a02003 	mov	r2, r3
  1245dc:	e51b3010 	ldr	r3, [fp, #-16]
  1245e0:	e593300c 	ldr	r3, [r3, #12]
  1245e4:	e1842002 	orr	r2, r4, r2
  1245e8:	e6ff2072 	uxth	r2, r2
  1245ec:	e1c320bc 	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
  1245f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1245f4:	e5d3301e 	ldrb	r3, [r3, #30]
  1245f8:	e3833020 	orr	r3, r3, #32
  1245fc:	e6ef2073 	uxtb	r2, r3
  124600:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124604:	e5c3201e 	strb	r2, [r3, #30]
      return ERR_OK;
  124608:	e3a03000 	mov	r3, #0
  12460c:	ea000003 	b	124620 <tcp_send_fin+0xd8>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
  124610:	e3a01001 	mov	r1, #1
  124614:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  124618:	eb000426 	bl	1256b8 <tcp_enqueue_flags>
  12461c:	e1a03000 	mov	r3, r0
}
  124620:	e1a00003 	mov	r0, r3
  124624:	e24bd008 	sub	sp, fp, #8
  124628:	e8bd8810 	pop	{r4, fp, pc}

0012462c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
  12462c:	e92d4810 	push	{r4, fp, lr}
  124630:	e28db008 	add	fp, sp, #8
  124634:	e24dd01c 	sub	sp, sp, #28
  124638:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12463c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  124640:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  124644:	e1a03002 	mov	r3, r2
  124648:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
  12464c:	e5db3004 	ldrb	r3, [fp, #4]
  124650:	e1a03103 	lsl	r3, r3, #2
  124654:	e6ef3073 	uxtb	r3, r3
  124658:	e2033004 	and	r3, r3, #4
  12465c:	e54b300d 	strb	r3, [fp, #-13]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
  124660:	e3a020b2 	mov	r2, #178	; 0xb2
  124664:	e3071b74 	movw	r1, #31604	; 0x7b74
  124668:	e3401014 	movt	r1, #20
  12466c:	e3a00004 	mov	r0, #4
  124670:	ebffd1bf 	bl	118d74 <memp_malloc_fn>
  124674:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  124678:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12467c:	e3530000 	cmp	r3, #0
  124680:	1a000003 	bne	124694 <tcp_create_segment+0x68>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
  124684:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  124688:	ebffd92f 	bl	11ab4c <pbuf_free>
    return NULL;
  12468c:	e3a03000 	mov	r3, #0
  124690:	ea000063 	b	124824 <tcp_create_segment+0x1f8>
  }
  seg->flags = optflags;
  124694:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124698:	e5db2004 	ldrb	r2, [fp, #4]
  12469c:	e5c3200a 	strb	r2, [r3, #10]
  seg->next = NULL;
  1246a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1246a4:	e3a02000 	mov	r2, #0
  1246a8:	e5832000 	str	r2, [r3]
  seg->p = p;
  1246ac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1246b0:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1246b4:	e5832004 	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
  1246b8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1246bc:	e1d320b8 	ldrh	r2, [r3, #8]
  1246c0:	e55b300d 	ldrb	r3, [fp, #-13]
  1246c4:	e6ff3073 	uxth	r3, r3
  1246c8:	e1520003 	cmp	r2, r3
  1246cc:	2a000006 	bcs	1246ec <tcp_create_segment+0xc0>
  1246d0:	e3070ba4 	movw	r0, #31652	; 0x7ba4
  1246d4:	e3400014 	movt	r0, #20
  1246d8:	ebff7a8d 	bl	103114 <rt_kprintf>
  1246dc:	e3a010ba 	mov	r1, #186	; 0xba
  1246e0:	e3070b74 	movw	r0, #31604	; 0x7b74
  1246e4:	e3400014 	movt	r0, #20
  1246e8:	ebff9909 	bl	10ab14 <sys_arch_assert>
  seg->len = p->tot_len - optlen;
  1246ec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1246f0:	e1d320b8 	ldrh	r2, [r3, #8]
  1246f4:	e55b300d 	ldrb	r3, [fp, #-13]
  1246f8:	e6ff3073 	uxth	r3, r3
  1246fc:	e0423003 	sub	r3, r2, r3
  124700:	e6ff2073 	uxth	r2, r3
  124704:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124708:	e1c320b8 	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
  12470c:	e3a01014 	mov	r1, #20
  124710:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  124714:	ebffd8ee 	bl	11aad4 <pbuf_header>
  124718:	e1a03000 	mov	r3, r0
  12471c:	e3530000 	cmp	r3, #0
  124720:	0a00000b 	beq	124754 <tcp_create_segment+0x128>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
  124724:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  124728:	e3403057 	movt	r3, #87	; 0x57
  12472c:	e1d33cb0 	ldrh	r3, [r3, #192]	; 0xc0
  124730:	e2833001 	add	r3, r3, #1
  124734:	e6ff2073 	uxth	r2, r3
  124738:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12473c:	e3403057 	movt	r3, #87	; 0x57
  124740:	e1c32cb0 	strh	r2, [r3, #192]	; 0xc0
    tcp_seg_free(seg);
  124744:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  124748:	ebffea71 	bl	11f114 <tcp_seg_free>
    return NULL;
  12474c:	e3a03000 	mov	r3, #0
  124750:	ea000033 	b	124824 <tcp_create_segment+0x1f8>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
  124754:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124758:	e5933004 	ldr	r3, [r3, #4]
  12475c:	e5932004 	ldr	r2, [r3, #4]
  124760:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124764:	e583200c 	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
  124768:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12476c:	e1d321ba 	ldrh	r2, [r3, #26]
  124770:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124774:	e593400c 	ldr	r4, [r3, #12]
  124778:	e1a00002 	mov	r0, r2
  12477c:	ebffc6bb 	bl	116270 <lwip_htons>
  124780:	e1a03000 	mov	r3, r0
  124784:	e1c430b0 	strh	r3, [r4]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
  124788:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12478c:	e1d321bc 	ldrh	r2, [r3, #28]
  124790:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124794:	e593400c 	ldr	r4, [r3, #12]
  124798:	e1a00002 	mov	r0, r2
  12479c:	ebffc6b3 	bl	116270 <lwip_htons>
  1247a0:	e1a03000 	mov	r3, r0
  1247a4:	e1c430b2 	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
  1247a8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1247ac:	e593400c 	ldr	r4, [r3, #12]
  1247b0:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  1247b4:	ebffc6b9 	bl	1162a0 <lwip_htonl>
  1247b8:	e1a03000 	mov	r3, r0
  1247bc:	e5843004 	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
  1247c0:	e55b300d 	ldrb	r3, [fp, #-13]
  1247c4:	e1a03123 	lsr	r3, r3, #2
  1247c8:	e6ef3073 	uxtb	r3, r3
  1247cc:	e6ff3073 	uxth	r3, r3
  1247d0:	e2833005 	add	r3, r3, #5
  1247d4:	e6ff3073 	uxth	r3, r3
  1247d8:	e1a03603 	lsl	r3, r3, #12
  1247dc:	e6ff2073 	uxth	r2, r3
  1247e0:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  1247e4:	e6ff3073 	uxth	r3, r3
  1247e8:	e1823003 	orr	r3, r2, r3
  1247ec:	e6ff2073 	uxth	r2, r3
  1247f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1247f4:	e593400c 	ldr	r4, [r3, #12]
  1247f8:	e1a00002 	mov	r0, r2
  1247fc:	ebffc69b 	bl	116270 <lwip_htons>
  124800:	e1a03000 	mov	r3, r0
  124804:	e1c430bc 	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
  124808:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12480c:	e593300c 	ldr	r3, [r3, #12]
  124810:	e3a02000 	mov	r2, #0
  124814:	e5c32012 	strb	r2, [r3, #18]
  124818:	e3a02000 	mov	r2, #0
  12481c:	e5c32013 	strb	r2, [r3, #19]
  return seg;
  124820:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
}
  124824:	e1a00003 	mov	r0, r3
  124828:	e24bd008 	sub	sp, fp, #8
  12482c:	e8bd8810 	pop	{r4, fp, pc}

00124830 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
  124830:	e92d4800 	push	{fp, lr}
  124834:	e28db004 	add	fp, sp, #4
  124838:	e24dd018 	sub	sp, sp, #24
  12483c:	e50b0010 	str	r0, [fp, #-16]
  124840:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  124844:	e1a03001 	mov	r3, r1
  124848:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  12484c:	e1a03002 	mov	r3, r2
  124850:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  struct pbuf *p;
  u16_t alloc = length;
  124854:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  124858:	e14b30b6 	strh	r3, [fp, #-6]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
  12485c:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  124860:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  124864:	e1520003 	cmp	r2, r3
  124868:	2a00001c 	bcs	1248e0 <tcp_pbuf_prealloc+0xb0>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
  12486c:	e5db3008 	ldrb	r3, [fp, #8]
  124870:	e2033002 	and	r3, r3, #2
  124874:	e3530000 	cmp	r3, #0
  124878:	1a00000f 	bne	1248bc <tcp_pbuf_prealloc+0x8c>
        (!(pcb->flags & TF_NODELAY) &&
  12487c:	e59b3004 	ldr	r3, [fp, #4]
  124880:	e5d3301e 	ldrb	r3, [r3, #30]
  124884:	e2033040 	and	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
  124888:	e3530000 	cmp	r3, #0
  12488c:	1a000013 	bne	1248e0 <tcp_pbuf_prealloc+0xb0>
        (!(pcb->flags & TF_NODELAY) &&
  124890:	e5db300c 	ldrb	r3, [fp, #12]
  124894:	e3530000 	cmp	r3, #0
  124898:	0a000007 	beq	1248bc <tcp_pbuf_prealloc+0x8c>
         (!first_seg ||
          pcb->unsent != NULL ||
  12489c:	e59b3004 	ldr	r3, [fp, #4]
  1248a0:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
  1248a4:	e3530000 	cmp	r3, #0
  1248a8:	1a000003 	bne	1248bc <tcp_pbuf_prealloc+0x8c>
          pcb->unacked != NULL))) {
  1248ac:	e59b3004 	ldr	r3, [fp, #4]
  1248b0:	e5933070 	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
  1248b4:	e3530000 	cmp	r3, #0
  1248b8:	0a000008 	beq	1248e0 <tcp_pbuf_prealloc+0xb0>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
  1248bc:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  1248c0:	e2833e5b 	add	r3, r3, #1456	; 0x5b0
  1248c4:	e2833007 	add	r3, r3, #7
  1248c8:	e3c32003 	bic	r2, r3, #3
  1248cc:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  1248d0:	e1520003 	cmp	r2, r3
  1248d4:	31a03002 	movcc	r3, r2
  1248d8:	21a03003 	movcs	r3, r3
  1248dc:	e14b30b6 	strh	r3, [fp, #-6]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
  1248e0:	e15b30b6 	ldrh	r3, [fp, #-6]
  1248e4:	e3a02000 	mov	r2, #0
  1248e8:	e1a01003 	mov	r1, r3
  1248ec:	e51b0010 	ldr	r0, [fp, #-16]
  1248f0:	ebffd58e 	bl	119f30 <pbuf_alloc>
  1248f4:	e50b000c 	str	r0, [fp, #-12]
  if (p == NULL) {
  1248f8:	e51b300c 	ldr	r3, [fp, #-12]
  1248fc:	e3530000 	cmp	r3, #0
  124900:	1a000001 	bne	12490c <tcp_pbuf_prealloc+0xdc>
    return NULL;
  124904:	e3a03000 	mov	r3, #0
  124908:	ea000019 	b	124974 <tcp_pbuf_prealloc+0x144>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
  12490c:	e51b300c 	ldr	r3, [fp, #-12]
  124910:	e5933000 	ldr	r3, [r3]
  124914:	e3530000 	cmp	r3, #0
  124918:	0a000006 	beq	124938 <tcp_pbuf_prealloc+0x108>
  12491c:	e3070bbc 	movw	r0, #31676	; 0x7bbc
  124920:	e3400014 	movt	r0, #20
  124924:	ebff79fa 	bl	103114 <rt_kprintf>
  124928:	e3a01e11 	mov	r1, #272	; 0x110
  12492c:	e3070b74 	movw	r0, #31604	; 0x7b74
  124930:	e3400014 	movt	r0, #20
  124934:	ebff9876 	bl	10ab14 <sys_arch_assert>
  *oversize = p->len - length;
  124938:	e51b300c 	ldr	r3, [fp, #-12]
  12493c:	e1d320ba 	ldrh	r2, [r3, #10]
  124940:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  124944:	e0423003 	sub	r3, r2, r3
  124948:	e6ff2073 	uxth	r2, r3
  12494c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124950:	e1c320b0 	strh	r2, [r3]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
  124954:	e51b300c 	ldr	r3, [fp, #-12]
  124958:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  12495c:	e1c320b8 	strh	r2, [r3, #8]
  124960:	e51b300c 	ldr	r3, [fp, #-12]
  124964:	e1d320b8 	ldrh	r2, [r3, #8]
  124968:	e51b300c 	ldr	r3, [fp, #-12]
  12496c:	e1c320ba 	strh	r2, [r3, #10]
  return p;
  124970:	e51b300c 	ldr	r3, [fp, #-12]
}
  124974:	e1a00003 	mov	r0, r3
  124978:	e24bd004 	sub	sp, fp, #4
  12497c:	e8bd8800 	pop	{fp, pc}

00124980 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
  124980:	e92d4800 	push	{fp, lr}
  124984:	e28db004 	add	fp, sp, #4
  124988:	e24dd008 	sub	sp, sp, #8
  12498c:	e50b0008 	str	r0, [fp, #-8]
  124990:	e1a03001 	mov	r3, r1
  124994:	e14b30ba 	strh	r3, [fp, #-10]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
  124998:	e51b3008 	ldr	r3, [fp, #-8]
  12499c:	e5933014 	ldr	r3, [r3, #20]
  1249a0:	e3530004 	cmp	r3, #4
  1249a4:	0a00000d 	beq	1249e0 <tcp_write_checks+0x60>
      (pcb->state != CLOSE_WAIT) &&
  1249a8:	e51b3008 	ldr	r3, [fp, #-8]
  1249ac:	e5933014 	ldr	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
  1249b0:	e3530007 	cmp	r3, #7
  1249b4:	0a000009 	beq	1249e0 <tcp_write_checks+0x60>
      (pcb->state != SYN_SENT) &&
  1249b8:	e51b3008 	ldr	r3, [fp, #-8]
  1249bc:	e5933014 	ldr	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
  1249c0:	e3530002 	cmp	r3, #2
  1249c4:	0a000005 	beq	1249e0 <tcp_write_checks+0x60>
      (pcb->state != SYN_RCVD)) {
  1249c8:	e51b3008 	ldr	r3, [fp, #-8]
  1249cc:	e5933014 	ldr	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
  1249d0:	e3530003 	cmp	r3, #3
  1249d4:	0a000001 	beq	1249e0 <tcp_write_checks+0x60>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
  1249d8:	e3e0300a 	mvn	r3, #10
  1249dc:	ea000050 	b	124b24 <tcp_write_checks+0x1a4>
  } else if (len == 0) {
  1249e0:	e15b30ba 	ldrh	r3, [fp, #-10]
  1249e4:	e3530000 	cmp	r3, #0
  1249e8:	1a000001 	bne	1249f4 <tcp_write_checks+0x74>
    return ERR_OK;
  1249ec:	e3a03000 	mov	r3, #0
  1249f0:	ea00004b 	b	124b24 <tcp_write_checks+0x1a4>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
  1249f4:	e51b3008 	ldr	r3, [fp, #-8]
  1249f8:	e1d336b4 	ldrh	r3, [r3, #100]	; 0x64
  1249fc:	e15b20ba 	ldrh	r2, [fp, #-10]
  124a00:	e1520003 	cmp	r2, r3
  124a04:	9a000008 	bls	124a2c <tcp_write_checks+0xac>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
  124a08:	e51b3008 	ldr	r3, [fp, #-8]
  124a0c:	e5d3301e 	ldrb	r3, [r3, #30]
  124a10:	e1e03c83 	mvn	r3, r3, lsl #25
  124a14:	e1e03ca3 	mvn	r3, r3, lsr #25
  124a18:	e6ef2073 	uxtb	r2, r3
  124a1c:	e51b3008 	ldr	r3, [fp, #-8]
  124a20:	e5c3201e 	strb	r2, [r3, #30]
    return ERR_MEM;
  124a24:	e3e03000 	mvn	r3, #0
  124a28:	ea00003d 	b	124b24 <tcp_write_checks+0x1a4>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
  124a2c:	e51b3008 	ldr	r3, [fp, #-8]
  124a30:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  124a34:	e3530015 	cmp	r3, #21
  124a38:	8a000004 	bhi	124a50 <tcp_write_checks+0xd0>
  124a3c:	e51b3008 	ldr	r3, [fp, #-8]
  124a40:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  124a44:	e30f2ffc 	movw	r2, #65532	; 0xfffc
  124a48:	e1530002 	cmp	r3, r2
  124a4c:	9a000010 	bls	124a94 <tcp_write_checks+0x114>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
  124a50:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  124a54:	e3403057 	movt	r3, #87	; 0x57
  124a58:	e1d33bb8 	ldrh	r3, [r3, #184]	; 0xb8
  124a5c:	e2833001 	add	r3, r3, #1
  124a60:	e6ff2073 	uxth	r2, r3
  124a64:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  124a68:	e3403057 	movt	r3, #87	; 0x57
  124a6c:	e1c32bb8 	strh	r2, [r3, #184]	; 0xb8
    pcb->flags |= TF_NAGLEMEMERR;
  124a70:	e51b3008 	ldr	r3, [fp, #-8]
  124a74:	e5d3301e 	ldrb	r3, [r3, #30]
  124a78:	e1e03c83 	mvn	r3, r3, lsl #25
  124a7c:	e1e03ca3 	mvn	r3, r3, lsr #25
  124a80:	e6ef2073 	uxtb	r2, r3
  124a84:	e51b3008 	ldr	r3, [fp, #-8]
  124a88:	e5c3201e 	strb	r2, [r3, #30]
    return ERR_MEM;
  124a8c:	e3e03000 	mvn	r3, #0
  124a90:	ea000023 	b	124b24 <tcp_write_checks+0x1a4>
  }
  if (pcb->snd_queuelen != 0) {
  124a94:	e51b3008 	ldr	r3, [fp, #-8]
  124a98:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  124a9c:	e3530000 	cmp	r3, #0
  124aa0:	0a00000f 	beq	124ae4 <tcp_write_checks+0x164>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
  124aa4:	e51b3008 	ldr	r3, [fp, #-8]
  124aa8:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  124aac:	e3530000 	cmp	r3, #0
  124ab0:	1a00001a 	bne	124b20 <tcp_write_checks+0x1a0>
  124ab4:	e51b3008 	ldr	r3, [fp, #-8]
  124ab8:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  124abc:	e3530000 	cmp	r3, #0
  124ac0:	1a000016 	bne	124b20 <tcp_write_checks+0x1a0>
  124ac4:	e3070bd0 	movw	r0, #31696	; 0x7bd0
  124ac8:	e3400014 	movt	r0, #20
  124acc:	ebff7990 	bl	103114 <rt_kprintf>
  124ad0:	e3001156 	movw	r1, #342	; 0x156
  124ad4:	e3070b74 	movw	r0, #31604	; 0x7b74
  124ad8:	e3400014 	movt	r0, #20
  124adc:	ebff980c 	bl	10ab14 <sys_arch_assert>
  124ae0:	ea00000e 	b	124b20 <tcp_write_checks+0x1a0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
  124ae4:	e51b3008 	ldr	r3, [fp, #-8]
  124ae8:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  124aec:	e3530000 	cmp	r3, #0
  124af0:	1a000003 	bne	124b04 <tcp_write_checks+0x184>
  124af4:	e51b3008 	ldr	r3, [fp, #-8]
  124af8:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  124afc:	e3530000 	cmp	r3, #0
  124b00:	0a000006 	beq	124b20 <tcp_write_checks+0x1a0>
  124b04:	e3070c0c 	movw	r0, #31756	; 0x7c0c
  124b08:	e3400014 	movt	r0, #20
  124b0c:	ebff7980 	bl	103114 <rt_kprintf>
  124b10:	e3001159 	movw	r1, #345	; 0x159
  124b14:	e3070b74 	movw	r0, #31604	; 0x7b74
  124b18:	e3400014 	movt	r0, #20
  124b1c:	ebff97fc 	bl	10ab14 <sys_arch_assert>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
  124b20:	e3a03000 	mov	r3, #0
}
  124b24:	e1a00003 	mov	r0, r3
  124b28:	e24bd004 	sub	sp, fp, #4
  124b2c:	e8bd8800 	pop	{fp, pc}

00124b30 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
  124b30:	e92d4810 	push	{r4, fp, lr}
  124b34:	e28db008 	add	fp, sp, #8
  124b38:	e24dd06c 	sub	sp, sp, #108	; 0x6c
  124b3c:	e50b0058 	str	r0, [fp, #-88]	; 0xffffffa8
  124b40:	e50b105c 	str	r1, [fp, #-92]	; 0xffffffa4
  124b44:	e1a01002 	mov	r1, r2
  124b48:	e1a02003 	mov	r2, r3
  124b4c:	e1a03001 	mov	r3, r1
  124b50:	e14b35be 	strh	r3, [fp, #-94]	; 0xffffffa2
  124b54:	e1a03002 	mov	r3, r2
  124b58:	e54b305f 	strb	r3, [fp, #-95]	; 0xffffffa1
  struct pbuf *concat_p = NULL;
  124b5c:	e3a03000 	mov	r3, #0
  124b60:	e50b3010 	str	r3, [fp, #-16]
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
  124b64:	e3a03000 	mov	r3, #0
  124b68:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  124b6c:	e3a03000 	mov	r3, #0
  124b70:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  124b74:	e3a03000 	mov	r3, #0
  124b78:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  124b7c:	e3a03000 	mov	r3, #0
  124b80:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  u16_t pos = 0; /* position in 'arg' data */
  124b84:	e3a03000 	mov	r3, #0
  124b88:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
  u16_t queuelen;
  u8_t optlen = 0;
  124b8c:	e3a03000 	mov	r3, #0
  124b90:	e54b303d 	strb	r3, [fp, #-61]	; 0xffffffc3
  u8_t optflags = 0;
  124b94:	e3a03000 	mov	r3, #0
  124b98:	e54b303e 	strb	r3, [fp, #-62]	; 0xffffffc2
#if TCP_OVERSIZE
  u16_t oversize = 0;
  124b9c:	e3a03000 	mov	r3, #0
  124ba0:	e14b35b2 	strh	r3, [fp, #-82]	; 0xffffffae
  u16_t oversize_used = 0;
  124ba4:	e3a03000 	mov	r3, #0
  124ba8:	e14b32b6 	strh	r3, [fp, #-38]	; 0xffffffda
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
  124bac:	e3a03000 	mov	r3, #0
  124bb0:	e14b32b8 	strh	r3, [fp, #-40]	; 0xffffffd8
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
  124bb4:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  124bb8:	e1d336b2 	ldrh	r3, [r3, #98]	; 0x62
  124bbc:	e1a030a3 	lsr	r3, r3, #1
  124bc0:	e6ff2073 	uxth	r2, r3
  124bc4:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  124bc8:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  124bcc:	e1520003 	cmp	r2, r3
  124bd0:	31a03002 	movcc	r3, r2
  124bd4:	21a03003 	movcs	r3, r3
  124bd8:	e14b34b0 	strh	r3, [fp, #-64]	; 0xffffffc0
  mss_local = mss_local ? mss_local : pcb->mss;
  124bdc:	e15b34b0 	ldrh	r3, [fp, #-64]	; 0xffffffc0
  124be0:	e3530000 	cmp	r3, #0
  124be4:	1a000002 	bne	124bf4 <tcp_write+0xc4>
  124be8:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  124bec:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  124bf0:	ea000000 	b	124bf8 <tcp_write+0xc8>
  124bf4:	e15b34b0 	ldrh	r3, [fp, #-64]	; 0xffffffc0
  124bf8:	e14b34b0 	strh	r3, [fp, #-64]	; 0xffffffc0
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
  124bfc:	e51b305c 	ldr	r3, [fp, #-92]	; 0xffffffa4
  124c00:	e3530000 	cmp	r3, #0
  124c04:	1a000008 	bne	124c2c <tcp_write+0xfc>
  124c08:	e3070c40 	movw	r0, #31808	; 0x7c40
  124c0c:	e3400014 	movt	r0, #20
  124c10:	ebff793f 	bl	103114 <rt_kprintf>
  124c14:	e3001192 	movw	r1, #402	; 0x192
  124c18:	e3070b74 	movw	r0, #31604	; 0x7b74
  124c1c:	e3400014 	movt	r0, #20
  124c20:	ebff97bb 	bl	10ab14 <sys_arch_assert>
  124c24:	e3e0300f 	mvn	r3, #15
  124c28:	ea00029f 	b	1256ac <tcp_write+0xb7c>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
  124c2c:	e15b35be 	ldrh	r3, [fp, #-94]	; 0xffffffa2
  124c30:	e1a01003 	mov	r1, r3
  124c34:	e51b0058 	ldr	r0, [fp, #-88]	; 0xffffffa8
  124c38:	ebffff50 	bl	124980 <tcp_write_checks>
  124c3c:	e1a03000 	mov	r3, r0
  124c40:	e54b3041 	strb	r3, [fp, #-65]	; 0xffffffbf
  if (err != ERR_OK) {
  124c44:	e15b34d1 	ldrsb	r3, [fp, #-65]	; 0xffffffbf
  124c48:	e3530000 	cmp	r3, #0
  124c4c:	0a000001 	beq	124c58 <tcp_write+0x128>
    return err;
  124c50:	e15b34d1 	ldrsb	r3, [fp, #-65]	; 0xffffffbf
  124c54:	ea000294 	b	1256ac <tcp_write+0xb7c>
  }
  queuelen = pcb->snd_queuelen;
  124c58:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  124c5c:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  124c60:	e14b32b4 	strh	r3, [fp, #-36]	; 0xffffffdc
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
  124c64:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  124c68:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  124c6c:	e3530000 	cmp	r3, #0
  124c70:	0a0000d8 	beq	124fd8 <tcp_write+0x4a8>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
  124c74:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  124c78:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  124c7c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  124c80:	ea000002 	b	124c90 <tcp_write+0x160>
         last_unsent = last_unsent->next);
  124c84:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124c88:	e5933000 	ldr	r3, [r3]
  124c8c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
  124c90:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124c94:	e5933000 	ldr	r3, [r3]
  124c98:	e3530000 	cmp	r3, #0
  124c9c:	1afffff8 	bne	124c84 <tcp_write+0x154>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
  124ca0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124ca4:	e5d3300a 	ldrb	r3, [r3, #10]
  124ca8:	e1a03103 	lsl	r3, r3, #2
  124cac:	e6ff3073 	uxth	r3, r3
  124cb0:	e2033004 	and	r3, r3, #4
  124cb4:	e14b34b4 	strh	r3, [fp, #-68]	; 0xffffffbc
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
  124cb8:	e15b24b0 	ldrh	r2, [fp, #-64]	; 0xffffffc0
  124cbc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124cc0:	e1d330b8 	ldrh	r3, [r3, #8]
  124cc4:	e1a01003 	mov	r1, r3
  124cc8:	e15b34b4 	ldrh	r3, [fp, #-68]	; 0xffffffbc
  124ccc:	e0813003 	add	r3, r1, r3
  124cd0:	e1520003 	cmp	r2, r3
  124cd4:	aa000006 	bge	124cf4 <tcp_write+0x1c4>
  124cd8:	e3070c74 	movw	r0, #31860	; 0x7c74
  124cdc:	e3400014 	movt	r0, #20
  124ce0:	ebff790b 	bl	103114 <rt_kprintf>
  124ce4:	e30011c7 	movw	r1, #455	; 0x1c7
  124ce8:	e3070b74 	movw	r0, #31604	; 0x7b74
  124cec:	e3400014 	movt	r0, #20
  124cf0:	ebff9787 	bl	10ab14 <sys_arch_assert>
    space = mss_local - (last_unsent->len + unsent_optlen);
  124cf4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124cf8:	e1d320b8 	ldrh	r2, [r3, #8]
  124cfc:	e15b34b4 	ldrh	r3, [fp, #-68]	; 0xffffffbc
  124d00:	e0823003 	add	r3, r2, r3
  124d04:	e6ff3073 	uxth	r3, r3
  124d08:	e15b24b0 	ldrh	r2, [fp, #-64]	; 0xffffffc0
  124d0c:	e0423003 	sub	r3, r2, r3
  124d10:	e14b32ba 	strh	r3, [fp, #-42]	; 0xffffffd6
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
  124d14:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  124d18:	e1d336b8 	ldrh	r3, [r3, #104]	; 0x68
  124d1c:	e14b35b2 	strh	r3, [fp, #-82]	; 0xffffffae
    if (oversize > 0) {
  124d20:	e15b35b2 	ldrh	r3, [fp, #-82]	; 0xffffffae
  124d24:	e3530000 	cmp	r3, #0
  124d28:	0a000025 	beq	124dc4 <tcp_write+0x294>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
  124d2c:	e15b35b2 	ldrh	r3, [fp, #-82]	; 0xffffffae
  124d30:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
  124d34:	e1520003 	cmp	r2, r3
  124d38:	2a000006 	bcs	124d58 <tcp_write+0x228>
  124d3c:	e3070c8c 	movw	r0, #31884	; 0x7c8c
  124d40:	e3400014 	movt	r0, #20
  124d44:	ebff78f2 	bl	103114 <rt_kprintf>
  124d48:	e30011d9 	movw	r1, #473	; 0x1d9
  124d4c:	e3070b74 	movw	r0, #31604	; 0x7b74
  124d50:	e3400014 	movt	r0, #20
  124d54:	ebff976e 	bl	10ab14 <sys_arch_assert>
      seg = last_unsent;
  124d58:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124d5c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
  124d60:	e15b35b2 	ldrh	r3, [fp, #-82]	; 0xffffffae
  124d64:	e15b25be 	ldrh	r2, [fp, #-94]	; 0xffffffa2
  124d68:	e1520003 	cmp	r2, r3
  124d6c:	9a000001 	bls	124d78 <tcp_write+0x248>
  124d70:	e15b35b2 	ldrh	r3, [fp, #-82]	; 0xffffffae
  124d74:	ea000000 	b	124d7c <tcp_write+0x24c>
  124d78:	e15b35be 	ldrh	r3, [fp, #-94]	; 0xffffffa2
  124d7c:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
  124d80:	e1530002 	cmp	r3, r2
  124d84:	b1a03003 	movlt	r3, r3
  124d88:	a1a03002 	movge	r3, r2
  124d8c:	e14b32b6 	strh	r3, [fp, #-38]	; 0xffffffda
      pos += oversize_used;
  124d90:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  124d94:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  124d98:	e0823003 	add	r3, r2, r3
  124d9c:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
      oversize -= oversize_used;
  124da0:	e15b25b2 	ldrh	r2, [fp, #-82]	; 0xffffffae
  124da4:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  124da8:	e0423003 	sub	r3, r2, r3
  124dac:	e6ff3073 	uxth	r3, r3
  124db0:	e14b35b2 	strh	r3, [fp, #-82]	; 0xffffffae
      space -= oversize_used;
  124db4:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
  124db8:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  124dbc:	e0423003 	sub	r3, r2, r3
  124dc0:	e14b32ba 	strh	r3, [fp, #-42]	; 0xffffffd6
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
  124dc4:	e15b35b2 	ldrh	r3, [fp, #-82]	; 0xffffffae
  124dc8:	e3530000 	cmp	r3, #0
  124dcc:	0a00000a 	beq	124dfc <tcp_write+0x2cc>
  124dd0:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  124dd4:	e15b35be 	ldrh	r3, [fp, #-94]	; 0xffffffa2
  124dd8:	e1520003 	cmp	r2, r3
  124ddc:	0a000006 	beq	124dfc <tcp_write+0x2cc>
  124de0:	e3070cac 	movw	r0, #31916	; 0x7cac
  124de4:	e3400014 	movt	r0, #20
  124de8:	ebff78c9 	bl	103114 <rt_kprintf>
  124dec:	e30011e1 	movw	r1, #481	; 0x1e1
  124df0:	e3070b74 	movw	r0, #31604	; 0x7b74
  124df4:	e3400014 	movt	r0, #20
  124df8:	ebff9745 	bl	10ab14 <sys_arch_assert>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
  124dfc:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  124e00:	e15b35be 	ldrh	r3, [fp, #-94]	; 0xffffffa2
  124e04:	e1520003 	cmp	r2, r3
  124e08:	2a000121 	bcs	125294 <tcp_write+0x764>
  124e0c:	e15b32ba 	ldrh	r3, [fp, #-42]	; 0xffffffd6
  124e10:	e3530000 	cmp	r3, #0
  124e14:	0a00011e 	beq	125294 <tcp_write+0x764>
  124e18:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124e1c:	e1d330b8 	ldrh	r3, [r3, #8]
  124e20:	e3530000 	cmp	r3, #0
  124e24:	0a00011a 	beq	125294 <tcp_write+0x764>
      u16_t seglen = LWIP_MIN(space, len - pos);
  124e28:	e15b25be 	ldrh	r2, [fp, #-94]	; 0xffffffa2
  124e2c:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  124e30:	e0422003 	sub	r2, r2, r3
  124e34:	e15b32ba 	ldrh	r3, [fp, #-42]	; 0xffffffd6
  124e38:	e1520003 	cmp	r2, r3
  124e3c:	b1a03002 	movlt	r3, r2
  124e40:	a1a03003 	movge	r3, r3
  124e44:	e14b34b6 	strh	r3, [fp, #-70]	; 0xffffffba
      seg = last_unsent;
  124e48:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124e4c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
  124e50:	e55b305f 	ldrb	r3, [fp, #-95]	; 0xffffffa1
  124e54:	e2033001 	and	r3, r3, #1
  124e58:	e3530000 	cmp	r3, #0
  124e5c:	0a00001f 	beq	124ee0 <tcp_write+0x3b0>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
  124e60:	e24b0052 	sub	r0, fp, #82	; 0x52
  124e64:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
  124e68:	e15b14b6 	ldrh	r1, [fp, #-70]	; 0xffffffba
  124e6c:	e3a03001 	mov	r3, #1
  124e70:	e58d3008 	str	r3, [sp, #8]
  124e74:	e55b305f 	ldrb	r3, [fp, #-95]	; 0xffffffa1
  124e78:	e58d3004 	str	r3, [sp, #4]
  124e7c:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  124e80:	e58d3000 	str	r3, [sp]
  124e84:	e1a03000 	mov	r3, r0
  124e88:	e3a00004 	mov	r0, #4
  124e8c:	ebfffe67 	bl	124830 <tcp_pbuf_prealloc>
  124e90:	e50b0010 	str	r0, [fp, #-16]
  124e94:	e51b3010 	ldr	r3, [fp, #-16]
  124e98:	e3530000 	cmp	r3, #0
  124e9c:	0a0001cc 	beq	1255d4 <tcp_write+0xaa4>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
  124ea0:	e51b3010 	ldr	r3, [fp, #-16]
  124ea4:	e5930004 	ldr	r0, [r3, #4]
  124ea8:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  124eac:	e51b205c 	ldr	r2, [fp, #-92]	; 0xffffffa4
  124eb0:	e0823003 	add	r3, r2, r3
  124eb4:	e15b24b6 	ldrh	r2, [fp, #-70]	; 0xffffffba
  124eb8:	e1a01003 	mov	r1, r3
  124ebc:	eb006d52 	bl	14040c <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
  124ec0:	e51b0010 	ldr	r0, [fp, #-16]
  124ec4:	ebffd7a5 	bl	11ad60 <pbuf_clen>
  124ec8:	e1a03000 	mov	r3, r0
  124ecc:	e1a02003 	mov	r2, r3
  124ed0:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  124ed4:	e0823003 	add	r3, r2, r3
  124ed8:	e14b32b4 	strh	r3, [fp, #-36]	; 0xffffffdc
  124edc:	ea000038 	b	124fc4 <tcp_write+0x494>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
  124ee0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124ee4:	e5933004 	ldr	r3, [r3, #4]
  124ee8:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
  124eec:	ea000002 	b	124efc <tcp_write+0x3cc>
  124ef0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  124ef4:	e5933000 	ldr	r3, [r3]
  124ef8:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
  124efc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  124f00:	e5933000 	ldr	r3, [r3]
  124f04:	e3530000 	cmp	r3, #0
  124f08:	1afffff8 	bne	124ef0 <tcp_write+0x3c0>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
  124f0c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  124f10:	e5d3300c 	ldrb	r3, [r3, #12]
  124f14:	e3530001 	cmp	r3, #1
  124f18:	1a000014 	bne	124f70 <tcp_write+0x440>
  124f1c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  124f20:	e5933004 	ldr	r3, [r3, #4]
  124f24:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  124f28:	e1d220ba 	ldrh	r2, [r2, #10]
  124f2c:	e0833002 	add	r3, r3, r2
  124f30:	e51b205c 	ldr	r2, [fp, #-92]	; 0xffffffa4
  124f34:	e1520003 	cmp	r2, r3
  124f38:	1a00000c 	bne	124f70 <tcp_write+0x440>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
  124f3c:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  124f40:	e3530000 	cmp	r3, #0
  124f44:	0a000006 	beq	124f64 <tcp_write+0x434>
  124f48:	e3070ccc 	movw	r0, #31948	; 0x7ccc
  124f4c:	e3400014 	movt	r0, #20
  124f50:	ebff786f 	bl	103114 <rt_kprintf>
  124f54:	e3a01f83 	mov	r1, #524	; 0x20c
  124f58:	e3070b74 	movw	r0, #31604	; 0x7b74
  124f5c:	e3400014 	movt	r0, #20
  124f60:	ebff96eb 	bl	10ab14 <sys_arch_assert>
          extendlen = seglen;
  124f64:	e15b34b6 	ldrh	r3, [fp, #-70]	; 0xffffffba
  124f68:	e14b32b8 	strh	r3, [fp, #-40]	; 0xffffffd8
  124f6c:	ea000014 	b	124fc4 <tcp_write+0x494>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
  124f70:	e15b34b6 	ldrh	r3, [fp, #-70]	; 0xffffffba
  124f74:	e3a02001 	mov	r2, #1
  124f78:	e1a01003 	mov	r1, r3
  124f7c:	e3a00004 	mov	r0, #4
  124f80:	ebffd3ea 	bl	119f30 <pbuf_alloc>
  124f84:	e50b0010 	str	r0, [fp, #-16]
  124f88:	e51b3010 	ldr	r3, [fp, #-16]
  124f8c:	e3530000 	cmp	r3, #0
  124f90:	0a000191 	beq	1255dc <tcp_write+0xaac>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
  124f94:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  124f98:	e51b205c 	ldr	r2, [fp, #-92]	; 0xffffffa4
  124f9c:	e0822003 	add	r2, r2, r3
  124fa0:	e51b3010 	ldr	r3, [fp, #-16]
  124fa4:	e5832004 	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
  124fa8:	e51b0010 	ldr	r0, [fp, #-16]
  124fac:	ebffd76b 	bl	11ad60 <pbuf_clen>
  124fb0:	e1a03000 	mov	r3, r0
  124fb4:	e1a02003 	mov	r2, r3
  124fb8:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  124fbc:	e0823003 	add	r3, r2, r3
  124fc0:	e14b32b4 	strh	r3, [fp, #-36]	; 0xffffffdc
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
  124fc4:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  124fc8:	e15b34b6 	ldrh	r3, [fp, #-70]	; 0xffffffba
  124fcc:	e0823003 	add	r3, r2, r3
  124fd0:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
  124fd4:	ea0000ae 	b	125294 <tcp_write+0x764>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
  124fd8:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  124fdc:	e1d336b8 	ldrh	r3, [r3, #104]	; 0x68
  124fe0:	e3530000 	cmp	r3, #0
  124fe4:	0a0000aa 	beq	125294 <tcp_write+0x764>
  124fe8:	e3070cf8 	movw	r0, #31992	; 0x7cf8
  124fec:	e3400014 	movt	r0, #20
  124ff0:	ebff7847 	bl	103114 <rt_kprintf>
  124ff4:	e3001225 	movw	r1, #549	; 0x225
  124ff8:	e3070b74 	movw	r0, #31604	; 0x7b74
  124ffc:	e3400014 	movt	r0, #20
  125000:	ebff96c3 	bl	10ab14 <sys_arch_assert>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
  125004:	ea0000a2 	b	125294 <tcp_write+0x764>
    struct pbuf *p;
    u16_t left = len - pos;
  125008:	e15b25be 	ldrh	r2, [fp, #-94]	; 0xffffffa2
  12500c:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  125010:	e0423003 	sub	r3, r2, r3
  125014:	e14b34b8 	strh	r3, [fp, #-72]	; 0xffffffb8
    u16_t max_len = mss_local - optlen;
  125018:	e55b303d 	ldrb	r3, [fp, #-61]	; 0xffffffc3
  12501c:	e6ff3073 	uxth	r3, r3
  125020:	e15b24b0 	ldrh	r2, [fp, #-64]	; 0xffffffc0
  125024:	e0423003 	sub	r3, r2, r3
  125028:	e14b34ba 	strh	r3, [fp, #-74]	; 0xffffffb6
    u16_t seglen = LWIP_MIN(left, max_len);
  12502c:	e15b24ba 	ldrh	r2, [fp, #-74]	; 0xffffffb6
  125030:	e15b34b8 	ldrh	r3, [fp, #-72]	; 0xffffffb8
  125034:	e1520003 	cmp	r2, r3
  125038:	31a03002 	movcc	r3, r2
  12503c:	21a03003 	movcs	r3, r3
  125040:	e14b34bc 	strh	r3, [fp, #-76]	; 0xffffffb4
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
  125044:	e55b305f 	ldrb	r3, [fp, #-95]	; 0xffffffa1
  125048:	e2033001 	and	r3, r3, #1
  12504c:	e3530000 	cmp	r3, #0
  125050:	0a00002e 	beq	125110 <tcp_write+0x5e0>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
  125054:	e55b303d 	ldrb	r3, [fp, #-61]	; 0xffffffc3
  125058:	e6ff2073 	uxth	r2, r3
  12505c:	e15b34bc 	ldrh	r3, [fp, #-76]	; 0xffffffb4
  125060:	e0823003 	add	r3, r2, r3
  125064:	e6ff1073 	uxth	r1, r3
  125068:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12506c:	e3530000 	cmp	r3, #0
  125070:	03a03001 	moveq	r3, #1
  125074:	13a03000 	movne	r3, #0
  125078:	e6ef3073 	uxtb	r3, r3
  12507c:	e24b0052 	sub	r0, fp, #82	; 0x52
  125080:	e15b24b0 	ldrh	r2, [fp, #-64]	; 0xffffffc0
  125084:	e58d3008 	str	r3, [sp, #8]
  125088:	e55b305f 	ldrb	r3, [fp, #-95]	; 0xffffffa1
  12508c:	e58d3004 	str	r3, [sp, #4]
  125090:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125094:	e58d3000 	str	r3, [sp]
  125098:	e1a03000 	mov	r3, r0
  12509c:	e3a00000 	mov	r0, #0
  1250a0:	ebfffde2 	bl	124830 <tcp_pbuf_prealloc>
  1250a4:	e50b0034 	str	r0, [fp, #-52]	; 0xffffffcc
  1250a8:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  1250ac:	e3530000 	cmp	r3, #0
  1250b0:	0a00014b 	beq	1255e4 <tcp_write+0xab4>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
  1250b4:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  1250b8:	e1d330ba 	ldrh	r3, [r3, #10]
  1250bc:	e15b24bc 	ldrh	r2, [fp, #-76]	; 0xffffffb4
  1250c0:	e1520003 	cmp	r2, r3
  1250c4:	9a000006 	bls	1250e4 <tcp_write+0x5b4>
  1250c8:	e3070d28 	movw	r0, #32040	; 0x7d28
  1250cc:	e3400014 	movt	r0, #20
  1250d0:	ebff780f 	bl	103114 <rt_kprintf>
  1250d4:	e3001241 	movw	r1, #577	; 0x241
  1250d8:	e3070b74 	movw	r0, #31604	; 0x7b74
  1250dc:	e3400014 	movt	r0, #20
  1250e0:	ebff968b 	bl	10ab14 <sys_arch_assert>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
  1250e4:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  1250e8:	e5932004 	ldr	r2, [r3, #4]
  1250ec:	e55b303d 	ldrb	r3, [fp, #-61]	; 0xffffffc3
  1250f0:	e0820003 	add	r0, r2, r3
  1250f4:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  1250f8:	e51b205c 	ldr	r2, [fp, #-92]	; 0xffffffa4
  1250fc:	e0823003 	add	r3, r2, r3
  125100:	e15b24bc 	ldrh	r2, [fp, #-76]	; 0xffffffb4
  125104:	e1a01003 	mov	r1, r3
  125108:	eb006cbf 	bl	14040c <memcpy>
  12510c:	ea000027 	b	1251b0 <tcp_write+0x680>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
  125110:	e15b35b2 	ldrh	r3, [fp, #-82]	; 0xffffffae
  125114:	e3530000 	cmp	r3, #0
  125118:	0a000006 	beq	125138 <tcp_write+0x608>
  12511c:	e3070d68 	movw	r0, #32104	; 0x7d68
  125120:	e3400014 	movt	r0, #20
  125124:	ebff77fa 	bl	103114 <rt_kprintf>
  125128:	e300124b 	movw	r1, #587	; 0x24b
  12512c:	e3070b74 	movw	r0, #31604	; 0x7b74
  125130:	e3400014 	movt	r0, #20
  125134:	ebff9676 	bl	10ab14 <sys_arch_assert>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
  125138:	e15b34bc 	ldrh	r3, [fp, #-76]	; 0xffffffb4
  12513c:	e3a02001 	mov	r2, #1
  125140:	e1a01003 	mov	r1, r3
  125144:	e3a00000 	mov	r0, #0
  125148:	ebffd378 	bl	119f30 <pbuf_alloc>
  12514c:	e50b0050 	str	r0, [fp, #-80]	; 0xffffffb0
  125150:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
  125154:	e3530000 	cmp	r3, #0
  125158:	0a000123 	beq	1255ec <tcp_write+0xabc>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
  12515c:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  125160:	e51b205c 	ldr	r2, [fp, #-92]	; 0xffffffa4
  125164:	e0822003 	add	r2, r2, r3
  125168:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
  12516c:	e5832004 	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
  125170:	e55b303d 	ldrb	r3, [fp, #-61]	; 0xffffffc3
  125174:	e6ff3073 	uxth	r3, r3
  125178:	e3a02000 	mov	r2, #0
  12517c:	e1a01003 	mov	r1, r3
  125180:	e3a00000 	mov	r0, #0
  125184:	ebffd369 	bl	119f30 <pbuf_alloc>
  125188:	e50b0034 	str	r0, [fp, #-52]	; 0xffffffcc
  12518c:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  125190:	e3530000 	cmp	r3, #0
  125194:	1a000002 	bne	1251a4 <tcp_write+0x674>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
  125198:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
  12519c:	ebffd66a 	bl	11ab4c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
  1251a0:	ea000114 	b	1255f8 <tcp_write+0xac8>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
  1251a4:	e51b1050 	ldr	r1, [fp, #-80]	; 0xffffffb0
  1251a8:	e51b0034 	ldr	r0, [fp, #-52]	; 0xffffffcc
  1251ac:	ebffd71d 	bl	11ae28 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
  1251b0:	e51b0034 	ldr	r0, [fp, #-52]	; 0xffffffcc
  1251b4:	ebffd6e9 	bl	11ad60 <pbuf_clen>
  1251b8:	e1a03000 	mov	r3, r0
  1251bc:	e1a02003 	mov	r2, r3
  1251c0:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  1251c4:	e0823003 	add	r3, r2, r3
  1251c8:	e14b32b4 	strh	r3, [fp, #-36]	; 0xffffffdc

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
  1251cc:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  1251d0:	e3530016 	cmp	r3, #22
  1251d4:	8a000003 	bhi	1251e8 <tcp_write+0x6b8>
  1251d8:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  1251dc:	e30f2ffc 	movw	r2, #65532	; 0xfffc
  1251e0:	e1530002 	cmp	r3, r2
  1251e4:	9a000002 	bls	1251f4 <tcp_write+0x6c4>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
  1251e8:	e51b0034 	ldr	r0, [fp, #-52]	; 0xffffffcc
  1251ec:	ebffd656 	bl	11ab4c <pbuf_free>
      goto memerr;
  1251f0:	ea000100 	b	1255f8 <tcp_write+0xac8>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
  1251f4:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  1251f8:	e593205c 	ldr	r2, [r3, #92]	; 0x5c
  1251fc:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  125200:	e0822003 	add	r2, r2, r3
  125204:	e55b303e 	ldrb	r3, [fp, #-62]	; 0xffffffc2
  125208:	e58d3000 	str	r3, [sp]
  12520c:	e1a03002 	mov	r3, r2
  125210:	e3a02000 	mov	r2, #0
  125214:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  125218:	e51b0058 	ldr	r0, [fp, #-88]	; 0xffffffa8
  12521c:	ebfffd02 	bl	12462c <tcp_create_segment>
  125220:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  125224:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  125228:	e3530000 	cmp	r3, #0
  12522c:	0a0000f0 	beq	1255f4 <tcp_write+0xac4>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
  125230:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125234:	e3530000 	cmp	r3, #0
  125238:	1a000002 	bne	125248 <tcp_write+0x718>
      queue = seg;
  12523c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  125240:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  125244:	ea00000c 	b	12527c <tcp_write+0x74c>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
  125248:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12524c:	e3530000 	cmp	r3, #0
  125250:	1a000006 	bne	125270 <tcp_write+0x740>
  125254:	e3070d78 	movw	r0, #32120	; 0x7d78
  125258:	e3400014 	movt	r0, #20
  12525c:	ebff77ac 	bl	103114 <rt_kprintf>
  125260:	e3001285 	movw	r1, #645	; 0x285
  125264:	e3070b74 	movw	r0, #31604	; 0x7b74
  125268:	e3400014 	movt	r0, #20
  12526c:	ebff9628 	bl	10ab14 <sys_arch_assert>
      prev_seg->next = seg;
  125270:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  125274:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  125278:	e5832000 	str	r2, [r3]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
  12527c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  125280:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
  125284:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  125288:	e15b34bc 	ldrh	r3, [fp, #-76]	; 0xffffffb4
  12528c:	e0823003 	add	r3, r2, r3
  125290:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
  while (pos < len) {
  125294:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  125298:	e15b35be 	ldrh	r3, [fp, #-94]	; 0xffffffa2
  12529c:	e1520003 	cmp	r2, r3
  1252a0:	3affff58 	bcc	125008 <tcp_write+0x4d8>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
  1252a4:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  1252a8:	e3530000 	cmp	r3, #0
  1252ac:	0a00002b 	beq	125360 <tcp_write+0x830>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
  1252b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1252b4:	e5933004 	ldr	r3, [r3, #4]
  1252b8:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
  1252bc:	ea00001d 	b	125338 <tcp_write+0x808>
      p->tot_len += oversize_used;
  1252c0:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1252c4:	e1d320b8 	ldrh	r2, [r3, #8]
  1252c8:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  1252cc:	e0823003 	add	r3, r2, r3
  1252d0:	e6ff2073 	uxth	r2, r3
  1252d4:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1252d8:	e1c320b8 	strh	r2, [r3, #8]
      if (p->next == NULL) {
  1252dc:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1252e0:	e5933000 	ldr	r3, [r3]
  1252e4:	e3530000 	cmp	r3, #0
  1252e8:	1a00000f 	bne	12532c <tcp_write+0x7fc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
  1252ec:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1252f0:	e5933004 	ldr	r3, [r3, #4]
  1252f4:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
  1252f8:	e1d220ba 	ldrh	r2, [r2, #10]
  1252fc:	e0833002 	add	r3, r3, r2
  125300:	e15b22b6 	ldrh	r2, [fp, #-38]	; 0xffffffda
  125304:	e51b105c 	ldr	r1, [fp, #-92]	; 0xffffffa4
  125308:	e1a00003 	mov	r0, r3
  12530c:	eb006c3e 	bl	14040c <memcpy>
        p->len += oversize_used;
  125310:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  125314:	e1d320ba 	ldrh	r2, [r3, #10]
  125318:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  12531c:	e0823003 	add	r3, r2, r3
  125320:	e6ff2073 	uxth	r2, r3
  125324:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  125328:	e1c320ba 	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
  12532c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  125330:	e5933000 	ldr	r3, [r3]
  125334:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
  125338:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12533c:	e3530000 	cmp	r3, #0
  125340:	1affffde 	bne	1252c0 <tcp_write+0x790>
      }
    }
    last_unsent->len += oversize_used;
  125344:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125348:	e1d320b8 	ldrh	r2, [r3, #8]
  12534c:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  125350:	e0823003 	add	r3, r2, r3
  125354:	e6ff2073 	uxth	r2, r3
  125358:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12535c:	e1c320b8 	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
  125360:	e15b25b2 	ldrh	r2, [fp, #-82]	; 0xffffffae
  125364:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125368:	e1c326b8 	strh	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
  12536c:	e51b3010 	ldr	r3, [fp, #-16]
  125370:	e3530000 	cmp	r3, #0
  125374:	0a000017 	beq	1253d8 <tcp_write+0x8a8>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
  125378:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12537c:	e3530000 	cmp	r3, #0
  125380:	1a000006 	bne	1253a0 <tcp_write+0x870>
  125384:	e3070d8c 	movw	r0, #32140	; 0x7d8c
  125388:	e3400014 	movt	r0, #20
  12538c:	ebff7760 	bl	103114 <rt_kprintf>
  125390:	e30012bb 	movw	r1, #699	; 0x2bb
  125394:	e3070b74 	movw	r0, #31604	; 0x7b74
  125398:	e3400014 	movt	r0, #20
  12539c:	ebff95dc 	bl	10ab14 <sys_arch_assert>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
  1253a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1253a4:	e5933004 	ldr	r3, [r3, #4]
  1253a8:	e51b1010 	ldr	r1, [fp, #-16]
  1253ac:	e1a00003 	mov	r0, r3
  1253b0:	ebffd69c 	bl	11ae28 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
  1253b4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1253b8:	e1d320b8 	ldrh	r2, [r3, #8]
  1253bc:	e51b3010 	ldr	r3, [fp, #-16]
  1253c0:	e1d330b8 	ldrh	r3, [r3, #8]
  1253c4:	e0823003 	add	r3, r2, r3
  1253c8:	e6ff2073 	uxth	r2, r3
  1253cc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1253d0:	e1c320b8 	strh	r2, [r3, #8]
  1253d4:	ea000037 	b	1254b8 <tcp_write+0x988>
  } else if (extendlen > 0) {
  1253d8:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  1253dc:	e3530000 	cmp	r3, #0
  1253e0:	0a000034 	beq	1254b8 <tcp_write+0x988>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
  1253e4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1253e8:	e3530000 	cmp	r3, #0
  1253ec:	0a000003 	beq	125400 <tcp_write+0x8d0>
  1253f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1253f4:	e5933004 	ldr	r3, [r3, #4]
  1253f8:	e3530000 	cmp	r3, #0
  1253fc:	1a000006 	bne	12541c <tcp_write+0x8ec>
  125400:	e3070dc4 	movw	r0, #32196	; 0x7dc4
  125404:	e3400014 	movt	r0, #20
  125408:	ebff7741 	bl	103114 <rt_kprintf>
  12540c:	e30012c1 	movw	r1, #705	; 0x2c1
  125410:	e3070b74 	movw	r0, #31604	; 0x7b74
  125414:	e3400014 	movt	r0, #20
  125418:	ebff95bd 	bl	10ab14 <sys_arch_assert>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
  12541c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125420:	e5933004 	ldr	r3, [r3, #4]
  125424:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  125428:	ea000009 	b	125454 <tcp_write+0x924>
      p->tot_len += extendlen;
  12542c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  125430:	e1d320b8 	ldrh	r2, [r3, #8]
  125434:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  125438:	e0823003 	add	r3, r2, r3
  12543c:	e6ff2073 	uxth	r2, r3
  125440:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  125444:	e1c320b8 	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
  125448:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  12544c:	e5933000 	ldr	r3, [r3]
  125450:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  125454:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  125458:	e5933000 	ldr	r3, [r3]
  12545c:	e3530000 	cmp	r3, #0
  125460:	1afffff1 	bne	12542c <tcp_write+0x8fc>
    }
    p->tot_len += extendlen;
  125464:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  125468:	e1d320b8 	ldrh	r2, [r3, #8]
  12546c:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  125470:	e0823003 	add	r3, r2, r3
  125474:	e6ff2073 	uxth	r2, r3
  125478:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  12547c:	e1c320b8 	strh	r2, [r3, #8]
    p->len += extendlen;
  125480:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  125484:	e1d320ba 	ldrh	r2, [r3, #10]
  125488:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  12548c:	e0823003 	add	r3, r2, r3
  125490:	e6ff2073 	uxth	r2, r3
  125494:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  125498:	e1c320ba 	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
  12549c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1254a0:	e1d320b8 	ldrh	r2, [r3, #8]
  1254a4:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  1254a8:	e0823003 	add	r3, r2, r3
  1254ac:	e6ff2073 	uxth	r2, r3
  1254b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1254b4:	e1c320b8 	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
  1254b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1254bc:	e3530000 	cmp	r3, #0
  1254c0:	1a000003 	bne	1254d4 <tcp_write+0x9a4>
    pcb->unsent = queue;
  1254c4:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  1254c8:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1254cc:	e583206c 	str	r2, [r3, #108]	; 0x6c
  1254d0:	ea000002 	b	1254e0 <tcp_write+0x9b0>
  } else {
    last_unsent->next = queue;
  1254d4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1254d8:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1254dc:	e5832000 	str	r2, [r3]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
  1254e0:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  1254e4:	e593205c 	ldr	r2, [r3, #92]	; 0x5c
  1254e8:	e15b35be 	ldrh	r3, [fp, #-94]	; 0xffffffa2
  1254ec:	e0822003 	add	r2, r2, r3
  1254f0:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  1254f4:	e583205c 	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
  1254f8:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  1254fc:	e1d326b4 	ldrh	r2, [r3, #100]	; 0x64
  125500:	e15b35be 	ldrh	r3, [fp, #-94]	; 0xffffffa2
  125504:	e0423003 	sub	r3, r2, r3
  125508:	e6ff2073 	uxth	r2, r3
  12550c:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125510:	e1c326b4 	strh	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
  125514:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125518:	e15b22b4 	ldrh	r2, [fp, #-36]	; 0xffffffdc
  12551c:	e1c326b6 	strh	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
  125520:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125524:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  125528:	e3530000 	cmp	r3, #0
  12552c:	0a00000e 	beq	12556c <tcp_write+0xa3c>
    LWIP_ASSERT("tcp_write: valid queue length",
  125530:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125534:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  125538:	e3530000 	cmp	r3, #0
  12553c:	1a00000a 	bne	12556c <tcp_write+0xa3c>
  125540:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125544:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  125548:	e3530000 	cmp	r3, #0
  12554c:	1a000006 	bne	12556c <tcp_write+0xa3c>
  125550:	e3070dfc 	movw	r0, #32252	; 0x7dfc
  125554:	e3400014 	movt	r0, #20
  125558:	ebff76ed 	bl	103114 <rt_kprintf>
  12555c:	e30012ed 	movw	r1, #749	; 0x2ed
  125560:	e3070b74 	movw	r0, #31604	; 0x7b74
  125564:	e3400014 	movt	r0, #20
  125568:	ebff9569 	bl	10ab14 <sys_arch_assert>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
  12556c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  125570:	e3530000 	cmp	r3, #0
  125574:	0a000014 	beq	1255cc <tcp_write+0xa9c>
  125578:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12557c:	e593300c 	ldr	r3, [r3, #12]
  125580:	e3530000 	cmp	r3, #0
  125584:	0a000010 	beq	1255cc <tcp_write+0xa9c>
  125588:	e55b305f 	ldrb	r3, [fp, #-95]	; 0xffffffa1
  12558c:	e2033002 	and	r3, r3, #2
  125590:	e3530000 	cmp	r3, #0
  125594:	1a00000c 	bne	1255cc <tcp_write+0xa9c>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
  125598:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12559c:	e593300c 	ldr	r3, [r3, #12]
  1255a0:	e1d330bc 	ldrh	r3, [r3, #12]
  1255a4:	e6ff4073 	uxth	r4, r3
  1255a8:	e3a00008 	mov	r0, #8
  1255ac:	ebffc32f 	bl	116270 <lwip_htons>
  1255b0:	e1a03000 	mov	r3, r0
  1255b4:	e1a02003 	mov	r2, r3
  1255b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1255bc:	e593300c 	ldr	r3, [r3, #12]
  1255c0:	e1842002 	orr	r2, r4, r2
  1255c4:	e6ff2072 	uxth	r2, r2
  1255c8:	e1c320bc 	strh	r2, [r3, #12]
  }

  return ERR_OK;
  1255cc:	e3a03000 	mov	r3, #0
  1255d0:	ea000035 	b	1256ac <tcp_write+0xb7c>
          goto memerr;
  1255d4:	e320f000 	nop	{0}
  1255d8:	ea000006 	b	1255f8 <tcp_write+0xac8>
            goto memerr;
  1255dc:	e320f000 	nop	{0}
  1255e0:	ea000004 	b	1255f8 <tcp_write+0xac8>
        goto memerr;
  1255e4:	e320f000 	nop	{0}
  1255e8:	ea000002 	b	1255f8 <tcp_write+0xac8>
        goto memerr;
  1255ec:	e320f000 	nop	{0}
  1255f0:	ea000000 	b	1255f8 <tcp_write+0xac8>
      goto memerr;
  1255f4:	e320f000 	nop	{0}
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
  1255f8:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  1255fc:	e5d3301e 	ldrb	r3, [r3, #30]
  125600:	e1e03c83 	mvn	r3, r3, lsl #25
  125604:	e1e03ca3 	mvn	r3, r3, lsr #25
  125608:	e6ef2073 	uxtb	r2, r3
  12560c:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125610:	e5c3201e 	strb	r2, [r3, #30]
  TCP_STATS_INC(tcp.memerr);
  125614:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  125618:	e3403057 	movt	r3, #87	; 0x57
  12561c:	e1d33bb8 	ldrh	r3, [r3, #184]	; 0xb8
  125620:	e2833001 	add	r3, r3, #1
  125624:	e6ff2073 	uxth	r2, r3
  125628:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12562c:	e3403057 	movt	r3, #87	; 0x57
  125630:	e1c32bb8 	strh	r2, [r3, #184]	; 0xb8

  if (concat_p != NULL) {
  125634:	e51b3010 	ldr	r3, [fp, #-16]
  125638:	e3530000 	cmp	r3, #0
  12563c:	0a000001 	beq	125648 <tcp_write+0xb18>
    pbuf_free(concat_p);
  125640:	e51b0010 	ldr	r0, [fp, #-16]
  125644:	ebffd540 	bl	11ab4c <pbuf_free>
  }
  if (queue != NULL) {
  125648:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12564c:	e3530000 	cmp	r3, #0
  125650:	0a000001 	beq	12565c <tcp_write+0xb2c>
    tcp_segs_free(queue);
  125654:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  125658:	ebffe69b 	bl	11f0cc <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
  12565c:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125660:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  125664:	e3530000 	cmp	r3, #0
  125668:	0a00000e 	beq	1256a8 <tcp_write+0xb78>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
  12566c:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125670:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  125674:	e3530000 	cmp	r3, #0
  125678:	1a00000a 	bne	1256a8 <tcp_write+0xb78>
  12567c:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125680:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  125684:	e3530000 	cmp	r3, #0
  125688:	1a000006 	bne	1256a8 <tcp_write+0xb78>
  12568c:	e3070dfc 	movw	r0, #32252	; 0x7dfc
  125690:	e3400014 	movt	r0, #20
  125694:	ebff769e 	bl	103114 <rt_kprintf>
  125698:	e3001302 	movw	r1, #770	; 0x302
  12569c:	e3070b74 	movw	r0, #31604	; 0x7b74
  1256a0:	e3400014 	movt	r0, #20
  1256a4:	ebff951a 	bl	10ab14 <sys_arch_assert>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
  1256a8:	e3e03000 	mvn	r3, #0
}
  1256ac:	e1a00003 	mov	r0, r3
  1256b0:	e24bd008 	sub	sp, fp, #8
  1256b4:	e8bd8810 	pop	{r4, fp, pc}

001256b8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
  1256b8:	e92d4800 	push	{fp, lr}
  1256bc:	e28db004 	add	fp, sp, #4
  1256c0:	e24dd028 	sub	sp, sp, #40	; 0x28
  1256c4:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  1256c8:	e1a03001 	mov	r3, r1
  1256cc:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
  1256d0:	e3a03000 	mov	r3, #0
  1256d4:	e54b3005 	strb	r3, [fp, #-5]
  u8_t optlen = 0;
  1256d8:	e3a03000 	mov	r3, #0
  1256dc:	e54b300d 	strb	r3, [fp, #-13]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
  1256e0:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  1256e4:	e2033003 	and	r3, r3, #3
  1256e8:	e3530000 	cmp	r3, #0
  1256ec:	1a000006 	bne	12570c <tcp_enqueue_flags+0x54>
  1256f0:	e3070e1c 	movw	r0, #32284	; 0x7e1c
  1256f4:	e3400014 	movt	r0, #20
  1256f8:	ebff7685 	bl	103114 <rt_kprintf>
  1256fc:	e300131b 	movw	r1, #795	; 0x31b
  125700:	e3070b74 	movw	r0, #31604	; 0x7b74
  125704:	e3400014 	movt	r0, #20
  125708:	ebff9501 	bl	10ab14 <sys_arch_assert>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
  12570c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125710:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  125714:	e3530015 	cmp	r3, #21
  125718:	8a000004 	bhi	125730 <tcp_enqueue_flags+0x78>
  12571c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125720:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  125724:	e30f2ffc 	movw	r2, #65532	; 0xfffc
  125728:	e1530002 	cmp	r3, r2
  12572c:	9a000014 	bls	125784 <tcp_enqueue_flags+0xcc>
      ((flags & TCP_FIN) == 0)) {
  125730:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  125734:	e2033001 	and	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
  125738:	e3530000 	cmp	r3, #0
  12573c:	1a000010 	bne	125784 <tcp_enqueue_flags+0xcc>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
  125740:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  125744:	e3403057 	movt	r3, #87	; 0x57
  125748:	e1d33bb8 	ldrh	r3, [r3, #184]	; 0xb8
  12574c:	e2833001 	add	r3, r3, #1
  125750:	e6ff2073 	uxth	r2, r3
  125754:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  125758:	e3403057 	movt	r3, #87	; 0x57
  12575c:	e1c32bb8 	strh	r2, [r3, #184]	; 0xb8
    pcb->flags |= TF_NAGLEMEMERR;
  125760:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125764:	e5d3301e 	ldrb	r3, [r3, #30]
  125768:	e1e03c83 	mvn	r3, r3, lsl #25
  12576c:	e1e03ca3 	mvn	r3, r3, lsr #25
  125770:	e6ef2073 	uxtb	r2, r3
  125774:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125778:	e5c3201e 	strb	r2, [r3, #30]
    return ERR_MEM;
  12577c:	e3e03000 	mvn	r3, #0
  125780:	ea0000b7 	b	125a64 <tcp_enqueue_flags+0x3ac>
  }

  if (flags & TCP_SYN) {
  125784:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  125788:	e2033002 	and	r3, r3, #2
  12578c:	e3530000 	cmp	r3, #0
  125790:	0a000001 	beq	12579c <tcp_enqueue_flags+0xe4>
    optflags = TF_SEG_OPTS_MSS;
  125794:	e3a03001 	mov	r3, #1
  125798:	e54b3005 	strb	r3, [fp, #-5]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
  12579c:	e55b3005 	ldrb	r3, [fp, #-5]
  1257a0:	e1a03103 	lsl	r3, r3, #2
  1257a4:	e6ef3073 	uxtb	r3, r3
  1257a8:	e2033004 	and	r3, r3, #4
  1257ac:	e54b300d 	strb	r3, [fp, #-13]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
  1257b0:	e55b300d 	ldrb	r3, [fp, #-13]
  1257b4:	e6ff3073 	uxth	r3, r3
  1257b8:	e3a02000 	mov	r2, #0
  1257bc:	e1a01003 	mov	r1, r3
  1257c0:	e3a00000 	mov	r0, #0
  1257c4:	ebffd1d9 	bl	119f30 <pbuf_alloc>
  1257c8:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  1257cc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1257d0:	e3530000 	cmp	r3, #0
  1257d4:	1a000010 	bne	12581c <tcp_enqueue_flags+0x164>
    pcb->flags |= TF_NAGLEMEMERR;
  1257d8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1257dc:	e5d3301e 	ldrb	r3, [r3, #30]
  1257e0:	e1e03c83 	mvn	r3, r3, lsl #25
  1257e4:	e1e03ca3 	mvn	r3, r3, lsr #25
  1257e8:	e6ef2073 	uxtb	r2, r3
  1257ec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1257f0:	e5c3201e 	strb	r2, [r3, #30]
    TCP_STATS_INC(tcp.memerr);
  1257f4:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  1257f8:	e3403057 	movt	r3, #87	; 0x57
  1257fc:	e1d33bb8 	ldrh	r3, [r3, #184]	; 0xb8
  125800:	e2833001 	add	r3, r3, #1
  125804:	e6ff2073 	uxth	r2, r3
  125808:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12580c:	e3403057 	movt	r3, #87	; 0x57
  125810:	e1c32bb8 	strh	r2, [r3, #184]	; 0xb8
    return ERR_MEM;
  125814:	e3e03000 	mvn	r3, #0
  125818:	ea000091 	b	125a64 <tcp_enqueue_flags+0x3ac>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
  12581c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125820:	e1d320ba 	ldrh	r2, [r3, #10]
  125824:	e55b300d 	ldrb	r3, [fp, #-13]
  125828:	e6ff3073 	uxth	r3, r3
  12582c:	e1520003 	cmp	r2, r3
  125830:	2a000006 	bcs	125850 <tcp_enqueue_flags+0x198>
  125834:	e3070e74 	movw	r0, #32372	; 0x7e74
  125838:	e3400014 	movt	r0, #20
  12583c:	ebff7634 	bl	103114 <rt_kprintf>
  125840:	e3001341 	movw	r1, #833	; 0x341
  125844:	e3070b74 	movw	r0, #31604	; 0x7b74
  125848:	e3400014 	movt	r0, #20
  12584c:	ebff94b0 	bl	10ab14 <sys_arch_assert>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
  125850:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125854:	e593105c 	ldr	r1, [r3, #92]	; 0x5c
  125858:	e55b2021 	ldrb	r2, [fp, #-33]	; 0xffffffdf
  12585c:	e55b3005 	ldrb	r3, [fp, #-5]
  125860:	e58d3000 	str	r3, [sp]
  125864:	e1a03001 	mov	r3, r1
  125868:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  12586c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  125870:	ebfffb6d 	bl	12462c <tcp_create_segment>
  125874:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  125878:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12587c:	e3530000 	cmp	r3, #0
  125880:	1a000010 	bne	1258c8 <tcp_enqueue_flags+0x210>
    pcb->flags |= TF_NAGLEMEMERR;
  125884:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125888:	e5d3301e 	ldrb	r3, [r3, #30]
  12588c:	e1e03c83 	mvn	r3, r3, lsl #25
  125890:	e1e03ca3 	mvn	r3, r3, lsr #25
  125894:	e6ef2073 	uxtb	r2, r3
  125898:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12589c:	e5c3201e 	strb	r2, [r3, #30]
    TCP_STATS_INC(tcp.memerr);
  1258a0:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  1258a4:	e3403057 	movt	r3, #87	; 0x57
  1258a8:	e1d33bb8 	ldrh	r3, [r3, #184]	; 0xb8
  1258ac:	e2833001 	add	r3, r3, #1
  1258b0:	e6ff2073 	uxth	r2, r3
  1258b4:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  1258b8:	e3403057 	movt	r3, #87	; 0x57
  1258bc:	e1c32bb8 	strh	r2, [r3, #184]	; 0xb8
    return ERR_MEM;
  1258c0:	e3e03000 	mvn	r3, #0
  1258c4:	ea000066 	b	125a64 <tcp_enqueue_flags+0x3ac>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
  1258c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1258cc:	e593300c 	ldr	r3, [r3, #12]
  1258d0:	e2033003 	and	r3, r3, #3
  1258d4:	e3530000 	cmp	r3, #0
  1258d8:	0a000006 	beq	1258f8 <tcp_enqueue_flags+0x240>
  1258dc:	e3070eb0 	movw	r0, #32432	; 0x7eb0
  1258e0:	e3400014 	movt	r0, #20
  1258e4:	ebff760a 	bl	103114 <rt_kprintf>
  1258e8:	e3001349 	movw	r1, #841	; 0x349
  1258ec:	e3070b74 	movw	r0, #31604	; 0x7b74
  1258f0:	e3400014 	movt	r0, #20
  1258f4:	ebff9486 	bl	10ab14 <sys_arch_assert>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
  1258f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1258fc:	e1d330b8 	ldrh	r3, [r3, #8]
  125900:	e3530000 	cmp	r3, #0
  125904:	0a000006 	beq	125924 <tcp_enqueue_flags+0x26c>
  125908:	e3070ec8 	movw	r0, #32456	; 0x7ec8
  12590c:	e3400014 	movt	r0, #20
  125910:	ebff75ff 	bl	103114 <rt_kprintf>
  125914:	e300134a 	movw	r1, #842	; 0x34a
  125918:	e3070b74 	movw	r0, #31604	; 0x7b74
  12591c:	e3400014 	movt	r0, #20
  125920:	ebff947b 	bl	10ab14 <sys_arch_assert>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
  125924:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125928:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  12592c:	e3530000 	cmp	r3, #0
  125930:	1a000003 	bne	125944 <tcp_enqueue_flags+0x28c>
    pcb->unsent = seg;
  125934:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125938:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  12593c:	e583206c 	str	r2, [r3, #108]	; 0x6c
  125940:	ea00000d 	b	12597c <tcp_enqueue_flags+0x2c4>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
  125944:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125948:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  12594c:	e50b300c 	str	r3, [fp, #-12]
  125950:	ea000002 	b	125960 <tcp_enqueue_flags+0x2a8>
  125954:	e51b300c 	ldr	r3, [fp, #-12]
  125958:	e5933000 	ldr	r3, [r3]
  12595c:	e50b300c 	str	r3, [fp, #-12]
  125960:	e51b300c 	ldr	r3, [fp, #-12]
  125964:	e5933000 	ldr	r3, [r3]
  125968:	e3530000 	cmp	r3, #0
  12596c:	1afffff8 	bne	125954 <tcp_enqueue_flags+0x29c>
    useg->next = seg;
  125970:	e51b300c 	ldr	r3, [fp, #-12]
  125974:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  125978:	e5832000 	str	r2, [r3]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
  12597c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125980:	e3a02000 	mov	r2, #0
  125984:	e1c326b8 	strh	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
  125988:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  12598c:	e2033002 	and	r3, r3, #2
  125990:	e3530000 	cmp	r3, #0
  125994:	1a000003 	bne	1259a8 <tcp_enqueue_flags+0x2f0>
  125998:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  12599c:	e2033001 	and	r3, r3, #1
  1259a0:	e3530000 	cmp	r3, #0
  1259a4:	0a000004 	beq	1259bc <tcp_enqueue_flags+0x304>
    pcb->snd_lbb++;
  1259a8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1259ac:	e593305c 	ldr	r3, [r3, #92]	; 0x5c
  1259b0:	e2832001 	add	r2, r3, #1
  1259b4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1259b8:	e583205c 	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
  1259bc:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  1259c0:	e2033001 	and	r3, r3, #1
  1259c4:	e3530000 	cmp	r3, #0
  1259c8:	0a000005 	beq	1259e4 <tcp_enqueue_flags+0x32c>
    pcb->flags |= TF_FIN;
  1259cc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1259d0:	e5d3301e 	ldrb	r3, [r3, #30]
  1259d4:	e3833020 	orr	r3, r3, #32
  1259d8:	e6ef2073 	uxtb	r2, r3
  1259dc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1259e0:	e5c3201e 	strb	r2, [r3, #30]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
  1259e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1259e8:	e5933004 	ldr	r3, [r3, #4]
  1259ec:	e1a00003 	mov	r0, r3
  1259f0:	ebffd4da 	bl	11ad60 <pbuf_clen>
  1259f4:	e1a03000 	mov	r3, r0
  1259f8:	e1a02003 	mov	r2, r3
  1259fc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125a00:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  125a04:	e0823003 	add	r3, r2, r3
  125a08:	e6ff2073 	uxth	r2, r3
  125a0c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125a10:	e1c326b6 	strh	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
  125a14:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125a18:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  125a1c:	e3530000 	cmp	r3, #0
  125a20:	0a00000e 	beq	125a60 <tcp_enqueue_flags+0x3a8>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
  125a24:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125a28:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  125a2c:	e3530000 	cmp	r3, #0
  125a30:	1a00000a 	bne	125a60 <tcp_enqueue_flags+0x3a8>
  125a34:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125a38:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  125a3c:	e3530000 	cmp	r3, #0
  125a40:	1a000006 	bne	125a60 <tcp_enqueue_flags+0x3a8>
  125a44:	e3070ef4 	movw	r0, #32500	; 0x7ef4
  125a48:	e3400014 	movt	r0, #20
  125a4c:	ebff75b0 	bl	103114 <rt_kprintf>
  125a50:	e300136d 	movw	r1, #877	; 0x36d
  125a54:	e3070b74 	movw	r0, #31604	; 0x7b74
  125a58:	e3400014 	movt	r0, #20
  125a5c:	ebff942c 	bl	10ab14 <sys_arch_assert>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
  125a60:	e3a03000 	mov	r3, #0
}
  125a64:	e1a00003 	mov	r0, r3
  125a68:	e24bd004 	sub	sp, fp, #4
  125a6c:	e8bd8800 	pop	{fp, pc}

00125a70 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
  125a70:	e92d4810 	push	{r4, fp, lr}
  125a74:	e28db008 	add	fp, sp, #8
  125a78:	e24dd02c 	sub	sp, sp, #44	; 0x2c
  125a7c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
  125a80:	e3a03000 	mov	r3, #0
  125a84:	e54b300e 	strb	r3, [fp, #-14]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
  125a88:	e55b300e 	ldrb	r3, [fp, #-14]
  125a8c:	e6ff4073 	uxth	r4, r3
  125a90:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125a94:	e5933050 	ldr	r3, [r3, #80]	; 0x50
  125a98:	e1a00003 	mov	r0, r3
  125a9c:	ebffc1ff 	bl	1162a0 <lwip_htonl>
  125aa0:	e1a03000 	mov	r3, r0
  125aa4:	e3a02000 	mov	r2, #0
  125aa8:	e1a01004 	mov	r1, r4
  125aac:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  125ab0:	ebfffa36 	bl	124390 <tcp_output_alloc_header>
  125ab4:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  if (p == NULL) {
  125ab8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125abc:	e3530000 	cmp	r3, #0
  125ac0:	1a000007 	bne	125ae4 <tcp_send_empty_ack+0x74>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
  125ac4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125ac8:	e5d3301e 	ldrb	r3, [r3, #30]
  125acc:	e3833003 	orr	r3, r3, #3
  125ad0:	e6ef2073 	uxtb	r2, r3
  125ad4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125ad8:	e5c3201e 	strb	r2, [r3, #30]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
  125adc:	e3e03001 	mvn	r3, #1
  125ae0:	ea000040 	b	125be8 <tcp_send_empty_ack+0x178>
  }
#if LWIP_TCP_TIMESTAMPS || CHECKSUM_GEN_TCP
  tcphdr = (struct tcp_hdr *)p->payload;
  125ae4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125ae8:	e5933004 	ldr	r3, [r3, #4]
  125aec:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
  125af0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125af4:	e2833004 	add	r3, r3, #4
  125af8:	e1a00003 	mov	r0, r3
  125afc:	eb002c8e 	bl	130d3c <ip4_route>
  125b00:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
  if (netif == NULL) {
  125b04:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  125b08:	e3530000 	cmp	r3, #0
  125b0c:	1a000002 	bne	125b1c <tcp_send_empty_ack+0xac>
    err = ERR_RTE;
  125b10:	e3e03003 	mvn	r3, #3
  125b14:	e54b300d 	strb	r3, [fp, #-13]
  125b18:	ea00001f 	b	125b9c <tcp_send_empty_ack+0x12c>
  } else {
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  125b1c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125b20:	e1d320b8 	ldrh	r2, [r3, #8]
        &pcb->local_ip, &pcb->remote_ip);
  125b24:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  125b28:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125b2c:	e2833004 	add	r3, r3, #4
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  125b30:	e58d3000 	str	r3, [sp]
  125b34:	e1a03001 	mov	r3, r1
  125b38:	e3a01006 	mov	r1, #6
  125b3c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  125b40:	ebffc9e9 	bl	1182ec <ip_chksum_pseudo>
  125b44:	e1a03000 	mov	r3, r0
  125b48:	e1a02003 	mov	r2, r3
  125b4c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  125b50:	e1c321b0 	strh	r2, [r3, #16]
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
  125b54:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  125b58:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125b5c:	e2830004 	add	r0, r3, #4
  125b60:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125b64:	e5d3c00a 	ldrb	ip, [r3, #10]
  125b68:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125b6c:	e5d33009 	ldrb	r3, [r3, #9]
  125b70:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  125b74:	e58d2008 	str	r2, [sp, #8]
  125b78:	e3a02006 	mov	r2, #6
  125b7c:	e58d2004 	str	r2, [sp, #4]
  125b80:	e58d3000 	str	r3, [sp]
  125b84:	e1a0300c 	mov	r3, ip
  125b88:	e1a02000 	mov	r2, r0
  125b8c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  125b90:	eb002f42 	bl	1318a0 <ip4_output_if>
  125b94:	e1a03000 	mov	r3, r0
  125b98:	e54b300d 	strb	r3, [fp, #-13]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
  125b9c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  125ba0:	ebffd3e9 	bl	11ab4c <pbuf_free>

  if (err != ERR_OK) {
  125ba4:	e15b30dd 	ldrsb	r3, [fp, #-13]
  125ba8:	e3530000 	cmp	r3, #0
  125bac:	0a000006 	beq	125bcc <tcp_send_empty_ack+0x15c>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
  125bb0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125bb4:	e5d3301e 	ldrb	r3, [r3, #30]
  125bb8:	e3833003 	orr	r3, r3, #3
  125bbc:	e6ef2073 	uxtb	r2, r3
  125bc0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125bc4:	e5c3201e 	strb	r2, [r3, #30]
  125bc8:	ea000005 	b	125be4 <tcp_send_empty_ack+0x174>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  125bcc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125bd0:	e5d3301e 	ldrb	r3, [r3, #30]
  125bd4:	e3c33003 	bic	r3, r3, #3
  125bd8:	e6ef2073 	uxtb	r2, r3
  125bdc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125be0:	e5c3201e 	strb	r2, [r3, #30]
  }

  return err;
  125be4:	e15b30dd 	ldrsb	r3, [fp, #-13]
}
  125be8:	e1a00003 	mov	r0, r3
  125bec:	e24bd008 	sub	sp, fp, #8
  125bf0:	e8bd8810 	pop	{r4, fp, pc}

00125bf4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
  125bf4:	e92d4830 	push	{r4, r5, fp, lr}
  125bf8:	e28db00c 	add	fp, sp, #12
  125bfc:	e24dd028 	sub	sp, sp, #40	; 0x28
  125c00:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
  125c04:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125c08:	e5933014 	ldr	r3, [r3, #20]
  125c0c:	e3530001 	cmp	r3, #1
  125c10:	1a000006 	bne	125c30 <tcp_output+0x3c>
  125c14:	e3070f1c 	movw	r0, #32540	; 0x7f1c
  125c18:	e3400014 	movt	r0, #20
  125c1c:	ebff753c 	bl	103114 <rt_kprintf>
  125c20:	e30013ed 	movw	r1, #1005	; 0x3ed
  125c24:	e3070b74 	movw	r0, #31604	; 0x7b74
  125c28:	e3400014 	movt	r0, #20
  125c2c:	ebff93b8 	bl	10ab14 <sys_arch_assert>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
  125c30:	e30531c4 	movw	r3, #20932	; 0x51c4
  125c34:	e3403057 	movt	r3, #87	; 0x57
  125c38:	e5933000 	ldr	r3, [r3]
  125c3c:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  125c40:	e1520003 	cmp	r2, r3
  125c44:	1a000001 	bne	125c50 <tcp_output+0x5c>
    return ERR_OK;
  125c48:	e3a03000 	mov	r3, #0
  125c4c:	ea000196 	b	1262ac <tcp_output+0x6b8>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
  125c50:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125c54:	e1d326b0 	ldrh	r2, [r3, #96]	; 0x60
  125c58:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125c5c:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  125c60:	e1520003 	cmp	r2, r3
  125c64:	2a000002 	bcs	125c74 <tcp_output+0x80>
  125c68:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125c6c:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  125c70:	ea000001 	b	125c7c <tcp_output+0x88>
  125c74:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125c78:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  125c7c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

  seg = pcb->unsent;
  125c80:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125c84:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  125c88:	e50b3010 	str	r3, [fp, #-16]
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
  125c8c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125c90:	e5d3301e 	ldrb	r3, [r3, #30]
  125c94:	e2033002 	and	r3, r3, #2
  125c98:	e3530000 	cmp	r3, #0
  125c9c:	0a000015 	beq	125cf8 <tcp_output+0x104>
  125ca0:	e51b3010 	ldr	r3, [fp, #-16]
  125ca4:	e3530000 	cmp	r3, #0
  125ca8:	0a00000e 	beq	125ce8 <tcp_output+0xf4>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
  125cac:	e51b3010 	ldr	r3, [fp, #-16]
  125cb0:	e593300c 	ldr	r3, [r3, #12]
  125cb4:	e5933004 	ldr	r3, [r3, #4]
  125cb8:	e1a00003 	mov	r0, r3
  125cbc:	ebffc177 	bl	1162a0 <lwip_htonl>
  125cc0:	e1a02000 	mov	r2, r0
  125cc4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125cc8:	e5933048 	ldr	r3, [r3, #72]	; 0x48
  125ccc:	e0423003 	sub	r3, r2, r3
  125cd0:	e51b2010 	ldr	r2, [fp, #-16]
  125cd4:	e1d220b8 	ldrh	r2, [r2, #8]
  125cd8:	e0833002 	add	r3, r3, r2
     (seg == NULL ||
  125cdc:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  125ce0:	e1520003 	cmp	r2, r3
  125ce4:	2a000003 	bcs	125cf8 <tcp_output+0x104>
     return tcp_send_empty_ack(pcb);
  125ce8:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  125cec:	ebffff5f 	bl	125a70 <tcp_send_empty_ack>
  125cf0:	e1a03000 	mov	r3, r0
  125cf4:	ea00016c 	b	1262ac <tcp_output+0x6b8>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
  125cf8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125cfc:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  125d00:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  if (useg != NULL) {
  125d04:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125d08:	e3530000 	cmp	r3, #0
  125d0c:	0a000007 	beq	125d30 <tcp_output+0x13c>
    for (; useg->next != NULL; useg = useg->next);
  125d10:	ea000002 	b	125d20 <tcp_output+0x12c>
  125d14:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125d18:	e5933000 	ldr	r3, [r3]
  125d1c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  125d20:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125d24:	e5933000 	ldr	r3, [r3]
  125d28:	e3530000 	cmp	r3, #0
  125d2c:	1afffff8 	bne	125d14 <tcp_output+0x120>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
  125d30:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125d34:	e2833004 	add	r3, r3, #4
  125d38:	e1a00003 	mov	r0, r3
  125d3c:	eb002bfe 	bl	130d3c <ip4_route>
  125d40:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  if (netif == NULL) {
  125d44:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125d48:	e3530000 	cmp	r3, #0
  125d4c:	1a000001 	bne	125d58 <tcp_output+0x164>
    return ERR_RTE;
  125d50:	e3e03003 	mvn	r3, #3
  125d54:	ea000154 	b	1262ac <tcp_output+0x6b8>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
  125d58:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125d5c:	e3530000 	cmp	r3, #0
  125d60:	0a000003 	beq	125d74 <tcp_output+0x180>
  125d64:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125d68:	e5933000 	ldr	r3, [r3]
  125d6c:	e3530000 	cmp	r3, #0
  125d70:	1a000010 	bne	125db8 <tcp_output+0x1c4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
  125d74:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125d78:	e3530000 	cmp	r3, #0
  125d7c:	0a000002 	beq	125d8c <tcp_output+0x198>
  125d80:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125d84:	e2833004 	add	r3, r3, #4
  125d88:	ea000000 	b	125d90 <tcp_output+0x19c>
  125d8c:	e3a03000 	mov	r3, #0
  125d90:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    if (local_ip == NULL) {
  125d94:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  125d98:	e3530000 	cmp	r3, #0
  125d9c:	1a000001 	bne	125da8 <tcp_output+0x1b4>
      return ERR_RTE;
  125da0:	e3e03003 	mvn	r3, #3
  125da4:	ea000140 	b	1262ac <tcp_output+0x6b8>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
  125da8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  125dac:	e5932000 	ldr	r2, [r3]
  125db0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125db4:	e5832000 	str	r2, [r3]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
  125db8:	e51b3010 	ldr	r3, [fp, #-16]
  125dbc:	e3530000 	cmp	r3, #0
  125dc0:	0a000113 	beq	126214 <tcp_output+0x620>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
  125dc4:	e51b3010 	ldr	r3, [fp, #-16]
  125dc8:	e593300c 	ldr	r3, [r3, #12]
  125dcc:	e5933004 	ldr	r3, [r3, #4]
  125dd0:	e1a00003 	mov	r0, r3
  125dd4:	ebffc131 	bl	1162a0 <lwip_htonl>
  125dd8:	e1a02000 	mov	r2, r0
  125ddc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125de0:	e5933048 	ldr	r3, [r3, #72]	; 0x48
  125de4:	e0423003 	sub	r3, r2, r3
  125de8:	e51b2010 	ldr	r2, [fp, #-16]
  125dec:	e1d220b8 	ldrh	r2, [r2, #8]
  125df0:	e0833002 	add	r3, r3, r2
  if (seg != NULL &&
  125df4:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  125df8:	e1520003 	cmp	r2, r3
  125dfc:	2a000104 	bcs	126214 <tcp_output+0x620>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
  125e00:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  125e04:	e3530000 	cmp	r3, #0
  125e08:	0a000101 	beq	126214 <tcp_output+0x620>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
  125e0c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125e10:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  125e14:	e1a02003 	mov	r2, r3
  125e18:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  125e1c:	e1530002 	cmp	r3, r2
  125e20:	1a0000fb 	bne	126214 <tcp_output+0x620>
  125e24:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125e28:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  125e2c:	e3530000 	cmp	r3, #0
  125e30:	1a0000f7 	bne	126214 <tcp_output+0x620>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
  125e34:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125e38:	e5d330a1 	ldrb	r3, [r3, #161]	; 0xa1
  125e3c:	e3530000 	cmp	r3, #0
  125e40:	1a000106 	bne	126260 <tcp_output+0x66c>
      pcb->persist_cnt = 0;
  125e44:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125e48:	e3a02000 	mov	r2, #0
  125e4c:	e5c320a0 	strb	r2, [r3, #160]	; 0xa0
      pcb->persist_backoff = 1;
  125e50:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125e54:	e3a02001 	mov	r2, #1
  125e58:	e5c320a1 	strb	r2, [r3, #161]	; 0xa1
    }
    goto output_done;
  125e5c:	ea0000ff 	b	126260 <tcp_output+0x66c>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
  125e60:	e51b3010 	ldr	r3, [fp, #-16]
  125e64:	e593300c 	ldr	r3, [r3, #12]
  125e68:	e1d330bc 	ldrh	r3, [r3, #12]
  125e6c:	e6ff3073 	uxth	r3, r3
  125e70:	e1a00003 	mov	r0, r3
  125e74:	ebffc0fd 	bl	116270 <lwip_htons>
  125e78:	e1a03000 	mov	r3, r0
  125e7c:	e2033004 	and	r3, r3, #4
  125e80:	e3530000 	cmp	r3, #0
  125e84:	0a000006 	beq	125ea4 <tcp_output+0x2b0>
  125e88:	e3070f44 	movw	r0, #32580	; 0x7f44
  125e8c:	e3400014 	movt	r0, #20
  125e90:	ebff749f 	bl	103114 <rt_kprintf>
  125e94:	e3001446 	movw	r1, #1094	; 0x446
  125e98:	e3070b74 	movw	r0, #31604	; 0x7b74
  125e9c:	e3400014 	movt	r0, #20
  125ea0:	ebff931b 	bl	10ab14 <sys_arch_assert>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
  125ea4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125ea8:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  125eac:	e3530000 	cmp	r3, #0
  125eb0:	0a00001c 	beq	125f28 <tcp_output+0x334>
  125eb4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125eb8:	e5d3301e 	ldrb	r3, [r3, #30]
  125ebc:	e2033044 	and	r3, r3, #68	; 0x44
  125ec0:	e3530000 	cmp	r3, #0
  125ec4:	1a000017 	bne	125f28 <tcp_output+0x334>
  125ec8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125ecc:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  125ed0:	e3530000 	cmp	r3, #0
  125ed4:	0a00000b 	beq	125f08 <tcp_output+0x314>
  125ed8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125edc:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  125ee0:	e5933000 	ldr	r3, [r3]
  125ee4:	e3530000 	cmp	r3, #0
  125ee8:	1a00000e 	bne	125f28 <tcp_output+0x334>
  125eec:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125ef0:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  125ef4:	e1d320b8 	ldrh	r2, [r3, #8]
  125ef8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125efc:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  125f00:	e1520003 	cmp	r2, r3
  125f04:	2a000007 	bcs	125f28 <tcp_output+0x334>
  125f08:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125f0c:	e1d336b4 	ldrh	r3, [r3, #100]	; 0x64
  125f10:	e3530000 	cmp	r3, #0
  125f14:	0a000003 	beq	125f28 <tcp_output+0x334>
  125f18:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125f1c:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  125f20:	e3530015 	cmp	r3, #21
  125f24:	9a000001 	bls	125f30 <tcp_output+0x33c>
  125f28:	e3a03001 	mov	r3, #1
  125f2c:	ea000000 	b	125f34 <tcp_output+0x340>
  125f30:	e3a03000 	mov	r3, #0
  125f34:	e3530000 	cmp	r3, #0
  125f38:	1a000004 	bne	125f50 <tcp_output+0x35c>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
  125f3c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125f40:	e5d3301e 	ldrb	r3, [r3, #30]
  125f44:	e20330a0 	and	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
  125f48:	e3530000 	cmp	r3, #0
  125f4c:	0a0000c5 	beq	126268 <tcp_output+0x674>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
  125f50:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125f54:	e5933014 	ldr	r3, [r3, #20]
  125f58:	e3530002 	cmp	r3, #2
  125f5c:	0a00000c 	beq	125f94 <tcp_output+0x3a0>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
  125f60:	e51b3010 	ldr	r3, [fp, #-16]
  125f64:	e593300c 	ldr	r3, [r3, #12]
  125f68:	e1d330bc 	ldrh	r3, [r3, #12]
  125f6c:	e6ff4073 	uxth	r4, r3
  125f70:	e3a00010 	mov	r0, #16
  125f74:	ebffc0bd 	bl	116270 <lwip_htons>
  125f78:	e1a03000 	mov	r3, r0
  125f7c:	e1a02003 	mov	r2, r3
  125f80:	e51b3010 	ldr	r3, [fp, #-16]
  125f84:	e593300c 	ldr	r3, [r3, #12]
  125f88:	e1842002 	orr	r2, r4, r2
  125f8c:	e6ff2072 	uxth	r2, r2
  125f90:	e1c320bc 	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
  125f94:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  125f98:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
  125f9c:	e51b0010 	ldr	r0, [fp, #-16]
  125fa0:	eb0000c4 	bl	1262b8 <tcp_output_segment>
  125fa4:	e1a03000 	mov	r3, r0
  125fa8:	e54b3025 	strb	r3, [fp, #-37]	; 0xffffffdb
    if (err != ERR_OK) {
  125fac:	e15b32d5 	ldrsb	r3, [fp, #-37]	; 0xffffffdb
  125fb0:	e3530000 	cmp	r3, #0
  125fb4:	0a000008 	beq	125fdc <tcp_output+0x3e8>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
  125fb8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125fbc:	e5d3301e 	ldrb	r3, [r3, #30]
  125fc0:	e1e03c83 	mvn	r3, r3, lsl #25
  125fc4:	e1e03ca3 	mvn	r3, r3, lsr #25
  125fc8:	e6ef2073 	uxtb	r2, r3
  125fcc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125fd0:	e5c3201e 	strb	r2, [r3, #30]
      return err;
  125fd4:	e15b32d5 	ldrsb	r3, [fp, #-37]	; 0xffffffdb
  125fd8:	ea0000b3 	b	1262ac <tcp_output+0x6b8>
    }
    pcb->unsent = seg->next;
  125fdc:	e51b3010 	ldr	r3, [fp, #-16]
  125fe0:	e5932000 	ldr	r2, [r3]
  125fe4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125fe8:	e583206c 	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
  125fec:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125ff0:	e5933014 	ldr	r3, [r3, #20]
  125ff4:	e3530002 	cmp	r3, #2
  125ff8:	0a000005 	beq	126014 <tcp_output+0x420>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  125ffc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126000:	e5d3301e 	ldrb	r3, [r3, #30]
  126004:	e3c33003 	bic	r3, r3, #3
  126008:	e6ef2073 	uxtb	r2, r3
  12600c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126010:	e5c3201e 	strb	r2, [r3, #30]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
  126014:	e51b3010 	ldr	r3, [fp, #-16]
  126018:	e593300c 	ldr	r3, [r3, #12]
  12601c:	e5933004 	ldr	r3, [r3, #4]
  126020:	e1a00003 	mov	r0, r3
  126024:	ebffc09d 	bl	1162a0 <lwip_htonl>
  126028:	e1a04000 	mov	r4, r0
  12602c:	e51b3010 	ldr	r3, [fp, #-16]
  126030:	e1d330b8 	ldrh	r3, [r3, #8]
  126034:	e1a05003 	mov	r5, r3
  126038:	e51b3010 	ldr	r3, [fp, #-16]
  12603c:	e593300c 	ldr	r3, [r3, #12]
  126040:	e1d330bc 	ldrh	r3, [r3, #12]
  126044:	e6ff3073 	uxth	r3, r3
  126048:	e1a00003 	mov	r0, r3
  12604c:	ebffc087 	bl	116270 <lwip_htons>
  126050:	e1a03000 	mov	r3, r0
  126054:	e2033003 	and	r3, r3, #3
  126058:	e3530000 	cmp	r3, #0
  12605c:	0a000001 	beq	126068 <tcp_output+0x474>
  126060:	e3a03001 	mov	r3, #1
  126064:	ea000000 	b	12606c <tcp_output+0x478>
  126068:	e3a03000 	mov	r3, #0
  12606c:	e0833005 	add	r3, r3, r5
  126070:	e0843003 	add	r3, r4, r3
  126074:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
  126078:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12607c:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  126080:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  126084:	e0423003 	sub	r3, r2, r3
  126088:	e3530000 	cmp	r3, #0
  12608c:	aa000002 	bge	12609c <tcp_output+0x4a8>
      pcb->snd_nxt = snd_nxt;
  126090:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126094:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  126098:	e5832050 	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
  12609c:	e51b3010 	ldr	r3, [fp, #-16]
  1260a0:	e1d330b8 	ldrh	r3, [r3, #8]
  1260a4:	e1a04003 	mov	r4, r3
  1260a8:	e51b3010 	ldr	r3, [fp, #-16]
  1260ac:	e593300c 	ldr	r3, [r3, #12]
  1260b0:	e1d330bc 	ldrh	r3, [r3, #12]
  1260b4:	e6ff3073 	uxth	r3, r3
  1260b8:	e1a00003 	mov	r0, r3
  1260bc:	ebffc06b 	bl	116270 <lwip_htons>
  1260c0:	e1a03000 	mov	r3, r0
  1260c4:	e2033003 	and	r3, r3, #3
  1260c8:	e3530000 	cmp	r3, #0
  1260cc:	0a000001 	beq	1260d8 <tcp_output+0x4e4>
  1260d0:	e3a03001 	mov	r3, #1
  1260d4:	ea000000 	b	1260dc <tcp_output+0x4e8>
  1260d8:	e3a03000 	mov	r3, #0
  1260dc:	e0833004 	add	r3, r3, r4
  1260e0:	e3530000 	cmp	r3, #0
  1260e4:	0a000045 	beq	126200 <tcp_output+0x60c>
      seg->next = NULL;
  1260e8:	e51b3010 	ldr	r3, [fp, #-16]
  1260ec:	e3a02000 	mov	r2, #0
  1260f0:	e5832000 	str	r2, [r3]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
  1260f4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1260f8:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  1260fc:	e3530000 	cmp	r3, #0
  126100:	1a000005 	bne	12611c <tcp_output+0x528>
        pcb->unacked = seg;
  126104:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126108:	e51b2010 	ldr	r2, [fp, #-16]
  12610c:	e5832070 	str	r2, [r3, #112]	; 0x70
        useg = seg;
  126110:	e51b3010 	ldr	r3, [fp, #-16]
  126114:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  126118:	ea00003a 	b	126208 <tcp_output+0x614>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
  12611c:	e51b3010 	ldr	r3, [fp, #-16]
  126120:	e593300c 	ldr	r3, [r3, #12]
  126124:	e5933004 	ldr	r3, [r3, #4]
  126128:	e1a00003 	mov	r0, r3
  12612c:	ebffc05b 	bl	1162a0 <lwip_htonl>
  126130:	e1a04000 	mov	r4, r0
  126134:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126138:	e593300c 	ldr	r3, [r3, #12]
  12613c:	e5933004 	ldr	r3, [r3, #4]
  126140:	e1a00003 	mov	r0, r3
  126144:	ebffc055 	bl	1162a0 <lwip_htonl>
  126148:	e1a03000 	mov	r3, r0
  12614c:	e0443003 	sub	r3, r4, r3
  126150:	e3530000 	cmp	r3, #0
  126154:	aa000022 	bge	1261e4 <tcp_output+0x5f0>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
  126158:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12615c:	e2833070 	add	r3, r3, #112	; 0x70
  126160:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
          while (*cur_seg &&
  126164:	ea000002 	b	126174 <tcp_output+0x580>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
  126168:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12616c:	e5933000 	ldr	r3, [r3]
  126170:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
          while (*cur_seg &&
  126174:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126178:	e5933000 	ldr	r3, [r3]
  12617c:	e3530000 	cmp	r3, #0
  126180:	0a00000f 	beq	1261c4 <tcp_output+0x5d0>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
  126184:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126188:	e5933000 	ldr	r3, [r3]
  12618c:	e593300c 	ldr	r3, [r3, #12]
  126190:	e5933004 	ldr	r3, [r3, #4]
  126194:	e1a00003 	mov	r0, r3
  126198:	ebffc040 	bl	1162a0 <lwip_htonl>
  12619c:	e1a04000 	mov	r4, r0
  1261a0:	e51b3010 	ldr	r3, [fp, #-16]
  1261a4:	e593300c 	ldr	r3, [r3, #12]
  1261a8:	e5933004 	ldr	r3, [r3, #4]
  1261ac:	e1a00003 	mov	r0, r3
  1261b0:	ebffc03a 	bl	1162a0 <lwip_htonl>
  1261b4:	e1a03000 	mov	r3, r0
  1261b8:	e0443003 	sub	r3, r4, r3
          while (*cur_seg &&
  1261bc:	e3530000 	cmp	r3, #0
  1261c0:	baffffe8 	blt	126168 <tcp_output+0x574>
          }
          seg->next = (*cur_seg);
  1261c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1261c8:	e5932000 	ldr	r2, [r3]
  1261cc:	e51b3010 	ldr	r3, [fp, #-16]
  1261d0:	e5832000 	str	r2, [r3]
          (*cur_seg) = seg;
  1261d4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1261d8:	e51b2010 	ldr	r2, [fp, #-16]
  1261dc:	e5832000 	str	r2, [r3]
  1261e0:	ea000008 	b	126208 <tcp_output+0x614>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
  1261e4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1261e8:	e51b2010 	ldr	r2, [fp, #-16]
  1261ec:	e5832000 	str	r2, [r3]
          useg = useg->next;
  1261f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1261f4:	e5933000 	ldr	r3, [r3]
  1261f8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1261fc:	ea000001 	b	126208 <tcp_output+0x614>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
  126200:	e51b0010 	ldr	r0, [fp, #-16]
  126204:	ebffe3c2 	bl	11f114 <tcp_seg_free>
    }
    seg = pcb->unsent;
  126208:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12620c:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  126210:	e50b3010 	str	r3, [fp, #-16]
  while (seg != NULL &&
  126214:	e51b3010 	ldr	r3, [fp, #-16]
  126218:	e3530000 	cmp	r3, #0
  12621c:	0a000013 	beq	126270 <tcp_output+0x67c>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
  126220:	e51b3010 	ldr	r3, [fp, #-16]
  126224:	e593300c 	ldr	r3, [r3, #12]
  126228:	e5933004 	ldr	r3, [r3, #4]
  12622c:	e1a00003 	mov	r0, r3
  126230:	ebffc01a 	bl	1162a0 <lwip_htonl>
  126234:	e1a02000 	mov	r2, r0
  126238:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12623c:	e5933048 	ldr	r3, [r3, #72]	; 0x48
  126240:	e0423003 	sub	r3, r2, r3
  126244:	e51b2010 	ldr	r2, [fp, #-16]
  126248:	e1d220b8 	ldrh	r2, [r2, #8]
  12624c:	e0833002 	add	r3, r3, r2
  while (seg != NULL &&
  126250:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  126254:	e1520003 	cmp	r2, r3
  126258:	2affff00 	bcs	125e60 <tcp_output+0x26c>
  }
output_done:
  12625c:	ea000003 	b	126270 <tcp_output+0x67c>
    goto output_done;
  126260:	e320f000 	nop	{0}
  126264:	ea000002 	b	126274 <tcp_output+0x680>
      break;
  126268:	e320f000 	nop	{0}
  12626c:	ea000000 	b	126274 <tcp_output+0x680>
output_done:
  126270:	e320f000 	nop	{0}
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
  126274:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126278:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  12627c:	e3530000 	cmp	r3, #0
  126280:	1a000002 	bne	126290 <tcp_output+0x69c>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
  126284:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126288:	e3a02000 	mov	r2, #0
  12628c:	e1c326b8 	strh	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
  126290:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126294:	e5d3301e 	ldrb	r3, [r3, #30]
  126298:	e203307f 	and	r3, r3, #127	; 0x7f
  12629c:	e6ef2073 	uxtb	r2, r3
  1262a0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1262a4:	e5c3201e 	strb	r2, [r3, #30]
  return ERR_OK;
  1262a8:	e3a03000 	mov	r3, #0
}
  1262ac:	e1a00003 	mov	r0, r3
  1262b0:	e24bd00c 	sub	sp, fp, #12
  1262b4:	e8bd8830 	pop	{r4, r5, fp, pc}

001262b8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
  1262b8:	e92d4810 	push	{r4, fp, lr}
  1262bc:	e28db008 	add	fp, sp, #8
  1262c0:	e24dd034 	sub	sp, sp, #52	; 0x34
  1262c4:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  1262c8:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  1262cc:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
  1262d0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1262d4:	e5933004 	ldr	r3, [r3, #4]
  1262d8:	e1d330be 	ldrh	r3, [r3, #14]
  1262dc:	e3530001 	cmp	r3, #1
  1262e0:	0a000001 	beq	1262ec <tcp_output_segment+0x34>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
  1262e4:	e3a03000 	mov	r3, #0
  1262e8:	ea0000a4 	b	126580 <tcp_output_segment+0x2c8>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
  1262ec:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1262f0:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  1262f4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1262f8:	e593400c 	ldr	r4, [r3, #12]
  1262fc:	e1a00002 	mov	r0, r2
  126300:	ebffbfe6 	bl	1162a0 <lwip_htonl>
  126304:	e1a03000 	mov	r3, r0
  126308:	e5843008 	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  12630c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126310:	e1d322be 	ldrh	r2, [r3, #46]	; 0x2e
  126314:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126318:	e593400c 	ldr	r4, [r3, #12]
  12631c:	e1a00002 	mov	r0, r2
  126320:	ebffbfd2 	bl	116270 <lwip_htons>
  126324:	e1a03000 	mov	r3, r0
  126328:	e1c430be 	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
  12632c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126330:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  126334:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  126338:	e1d222be 	ldrh	r2, [r2, #46]	; 0x2e
  12633c:	e0832002 	add	r2, r3, r2
  126340:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126344:	e5832030 	str	r2, [r3, #48]	; 0x30

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
  126348:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12634c:	e593300c 	ldr	r3, [r3, #12]
  126350:	e2833014 	add	r3, r3, #20
  126354:	e50b3010 	str	r3, [fp, #-16]
  if (seg->flags & TF_SEG_OPTS_MSS) {
  126358:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12635c:	e5d3300a 	ldrb	r3, [r3, #10]
  126360:	e2033001 	and	r3, r3, #1
  126364:	e3530000 	cmp	r3, #0
  126368:	0a000010 	beq	1263b0 <tcp_output_segment+0xf8>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
  12636c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126370:	e2833004 	add	r3, r3, #4
  126374:	e1a01003 	mov	r1, r3
  126378:	e30005b4 	movw	r0, #1460	; 0x5b4
  12637c:	ebffe664 	bl	11fd14 <tcp_eff_send_mss_impl>
  126380:	e1a03000 	mov	r3, r0
  126384:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
  126388:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  12638c:	e3833781 	orr	r3, r3, #33816576	; 0x2040000
  126390:	e1a00003 	mov	r0, r3
  126394:	ebffbfc1 	bl	1162a0 <lwip_htonl>
  126398:	e1a02000 	mov	r2, r0
  12639c:	e51b3010 	ldr	r3, [fp, #-16]
  1263a0:	e5832000 	str	r2, [r3]
    opts += 1;
  1263a4:	e51b3010 	ldr	r3, [fp, #-16]
  1263a8:	e2833004 	add	r3, r3, #4
  1263ac:	e50b3010 	str	r3, [fp, #-16]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
  1263b0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1263b4:	e1d333f4 	ldrsh	r3, [r3, #52]	; 0x34
  1263b8:	e3530000 	cmp	r3, #0
  1263bc:	aa000002 	bge	1263cc <tcp_output_segment+0x114>
    pcb->rtime = 0;
  1263c0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1263c4:	e3a02000 	mov	r2, #0
  1263c8:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
  }

  if (pcb->rttest == 0) {
  1263cc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1263d0:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  1263d4:	e3530000 	cmp	r3, #0
  1263d8:	1a00000c 	bne	126410 <tcp_output_segment+0x158>
    pcb->rttest = tcp_ticks;
  1263dc:	e30531b4 	movw	r3, #20916	; 0x51b4
  1263e0:	e3403057 	movt	r3, #87	; 0x57
  1263e4:	e5932000 	ldr	r2, [r3]
  1263e8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1263ec:	e5832038 	str	r2, [r3, #56]	; 0x38
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
  1263f0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1263f4:	e593300c 	ldr	r3, [r3, #12]
  1263f8:	e5933004 	ldr	r3, [r3, #4]
  1263fc:	e1a00003 	mov	r0, r3
  126400:	ebffbfa6 	bl	1162a0 <lwip_htonl>
  126404:	e1a02000 	mov	r2, r0
  126408:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  12640c:	e583203c 	str	r2, [r3, #60]	; 0x3c
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
  126410:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126414:	e593300c 	ldr	r3, [r3, #12]
  126418:	e1a02003 	mov	r2, r3
  12641c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126420:	e5933004 	ldr	r3, [r3, #4]
  126424:	e5933004 	ldr	r3, [r3, #4]
  126428:	e0423003 	sub	r3, r2, r3
  12642c:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  if (len == 0) {
  126430:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  126434:	e3530000 	cmp	r3, #0
  126438:	1a000006 	bne	126458 <tcp_output_segment+0x1a0>
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  12643c:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  126440:	e3403057 	movt	r3, #87	; 0x57
  126444:	e593317c 	ldr	r3, [r3, #380]	; 0x17c
  126448:	e2832001 	add	r2, r3, #1
  12644c:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  126450:	e3403057 	movt	r3, #87	; 0x57
  126454:	e583217c 	str	r2, [r3, #380]	; 0x17c
  }

  seg->p->len -= len;
  126458:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12645c:	e5933004 	ldr	r3, [r3, #4]
  126460:	e1d310ba 	ldrh	r1, [r3, #10]
  126464:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126468:	e5933004 	ldr	r3, [r3, #4]
  12646c:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
  126470:	e0412002 	sub	r2, r1, r2
  126474:	e6ff2072 	uxth	r2, r2
  126478:	e1c320ba 	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
  12647c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126480:	e5933004 	ldr	r3, [r3, #4]
  126484:	e1d310b8 	ldrh	r1, [r3, #8]
  126488:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12648c:	e5933004 	ldr	r3, [r3, #4]
  126490:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
  126494:	e0412002 	sub	r2, r1, r2
  126498:	e6ff2072 	uxth	r2, r2
  12649c:	e1c320b8 	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
  1264a0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1264a4:	e5933004 	ldr	r3, [r3, #4]
  1264a8:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1264ac:	e592200c 	ldr	r2, [r2, #12]
  1264b0:	e5832004 	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
  1264b4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1264b8:	e593300c 	ldr	r3, [r3, #12]
  1264bc:	e3a02000 	mov	r2, #0
  1264c0:	e5c32010 	strb	r2, [r3, #16]
  1264c4:	e3a02000 	mov	r2, #0
  1264c8:	e5c32011 	strb	r2, [r3, #17]
                  seg->tcphdr->chksum, chksum_slow));
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
#else /* TCP_CHECKSUM_ON_COPY */
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
  1264cc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1264d0:	e5930004 	ldr	r0, [r3, #4]
      seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
  1264d4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1264d8:	e5933004 	ldr	r3, [r3, #4]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
  1264dc:	e1d310b8 	ldrh	r1, [r3, #8]
      seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
  1264e0:	e51bc024 	ldr	ip, [fp, #-36]	; 0xffffffdc
  1264e4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1264e8:	e2833004 	add	r3, r3, #4
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
  1264ec:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1264f0:	e592400c 	ldr	r4, [r2, #12]
  1264f4:	e58d3000 	str	r3, [sp]
  1264f8:	e1a0300c 	mov	r3, ip
  1264fc:	e1a02001 	mov	r2, r1
  126500:	e3a01006 	mov	r1, #6
  126504:	ebffc778 	bl	1182ec <ip_chksum_pseudo>
  126508:	e1a03000 	mov	r3, r0
  12650c:	e1c431b0 	strh	r3, [r4, #16]
#endif /* TCP_CHECKSUM_ON_COPY */
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);
  126510:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  126514:	e3403057 	movt	r3, #87	; 0x57
  126518:	e1d33abc 	ldrh	r3, [r3, #172]	; 0xac
  12651c:	e2833001 	add	r3, r3, #1
  126520:	e6ff2073 	uxth	r2, r3
  126524:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  126528:	e3403057 	movt	r3, #87	; 0x57
  12652c:	e1c32abc 	strh	r2, [r3, #172]	; 0xac

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
  126530:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126534:	e5930004 	ldr	r0, [r3, #4]
  126538:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  12653c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126540:	e283c004 	add	ip, r3, #4
  126544:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126548:	e5d3e00a 	ldrb	lr, [r3, #10]
  12654c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126550:	e5d33009 	ldrb	r3, [r3, #9]
  126554:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  126558:	e58d2008 	str	r2, [sp, #8]
  12655c:	e3a02006 	mov	r2, #6
  126560:	e58d2004 	str	r2, [sp, #4]
  126564:	e58d3000 	str	r3, [sp]
  126568:	e1a0300e 	mov	r3, lr
  12656c:	e1a0200c 	mov	r2, ip
  126570:	eb002cca 	bl	1318a0 <ip4_output_if>
  126574:	e1a03000 	mov	r3, r0
  126578:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
  12657c:	e15b31d5 	ldrsb	r3, [fp, #-21]	; 0xffffffeb
}
  126580:	e1a00003 	mov	r0, r3
  126584:	e24bd008 	sub	sp, fp, #8
  126588:	e8bd8810 	pop	{r4, fp, pc}

0012658c <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
  12658c:	e92d4800 	push	{fp, lr}
  126590:	e28db004 	add	fp, sp, #4
  126594:	e24dd030 	sub	sp, sp, #48	; 0x30
  126598:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12659c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  1265a0:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  1265a4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
  1265a8:	e3a02000 	mov	r2, #0
  1265ac:	e3a01014 	mov	r1, #20
  1265b0:	e3a00001 	mov	r0, #1
  1265b4:	ebffce5d 	bl	119f30 <pbuf_alloc>
  1265b8:	e50b0008 	str	r0, [fp, #-8]
  if (p == NULL) {
  1265bc:	e51b3008 	ldr	r3, [fp, #-8]
  1265c0:	e3530000 	cmp	r3, #0
  1265c4:	0a000069 	beq	126770 <tcp_rst+0x1e4>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
  1265c8:	e51b3008 	ldr	r3, [fp, #-8]
  1265cc:	e1d330ba 	ldrh	r3, [r3, #10]
  1265d0:	e3530013 	cmp	r3, #19
  1265d4:	8a000006 	bhi	1265f4 <tcp_rst+0x68>
  1265d8:	e3070b44 	movw	r0, #31556	; 0x7b44
  1265dc:	e3400014 	movt	r0, #20
  1265e0:	ebff72cb 	bl	103114 <rt_kprintf>
  1265e4:	e300154d 	movw	r1, #1357	; 0x54d
  1265e8:	e3070b74 	movw	r0, #31604	; 0x7b74
  1265ec:	e3400014 	movt	r0, #20
  1265f0:	ebff9147 	bl	10ab14 <sys_arch_assert>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
  1265f4:	e51b3008 	ldr	r3, [fp, #-8]
  1265f8:	e5933004 	ldr	r3, [r3, #4]
  1265fc:	e50b300c 	str	r3, [fp, #-12]
  tcphdr->src = lwip_htons(local_port);
  126600:	e1db30b4 	ldrh	r3, [fp, #4]
  126604:	e1a00003 	mov	r0, r3
  126608:	ebffbf18 	bl	116270 <lwip_htons>
  12660c:	e1a03000 	mov	r3, r0
  126610:	e1a02003 	mov	r2, r3
  126614:	e51b300c 	ldr	r3, [fp, #-12]
  126618:	e1c320b0 	strh	r2, [r3]
  tcphdr->dest = lwip_htons(remote_port);
  12661c:	e1db30b8 	ldrh	r3, [fp, #8]
  126620:	e1a00003 	mov	r0, r3
  126624:	ebffbf11 	bl	116270 <lwip_htons>
  126628:	e1a03000 	mov	r3, r0
  12662c:	e1a02003 	mov	r2, r3
  126630:	e51b300c 	ldr	r3, [fp, #-12]
  126634:	e1c320b2 	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
  126638:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12663c:	ebffbf17 	bl	1162a0 <lwip_htonl>
  126640:	e1a02000 	mov	r2, r0
  126644:	e51b300c 	ldr	r3, [fp, #-12]
  126648:	e5832004 	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
  12664c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  126650:	ebffbf12 	bl	1162a0 <lwip_htonl>
  126654:	e1a02000 	mov	r2, r0
  126658:	e51b300c 	ldr	r3, [fp, #-12]
  12665c:	e5832008 	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
  126660:	e3050014 	movw	r0, #20500	; 0x5014
  126664:	ebffbf01 	bl	116270 <lwip_htons>
  126668:	e1a03000 	mov	r3, r0
  12666c:	e1a02003 	mov	r2, r3
  126670:	e51b300c 	ldr	r3, [fp, #-12]
  126674:	e1c320bc 	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
  126678:	e51b300c 	ldr	r3, [fp, #-12]
  12667c:	e3e02000 	mvn	r2, #0
  126680:	e5c3200e 	strb	r2, [r3, #14]
  126684:	e3e02000 	mvn	r2, #0
  126688:	e5c3200f 	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
  12668c:	e51b300c 	ldr	r3, [fp, #-12]
  126690:	e3a02000 	mov	r2, #0
  126694:	e5c32010 	strb	r2, [r3, #16]
  126698:	e3a02000 	mov	r2, #0
  12669c:	e5c32011 	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
  1266a0:	e51b300c 	ldr	r3, [fp, #-12]
  1266a4:	e3a02000 	mov	r2, #0
  1266a8:	e5c32012 	strb	r2, [r3, #18]
  1266ac:	e3a02000 	mov	r2, #0
  1266b0:	e5c32013 	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  1266b4:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  1266b8:	e3403057 	movt	r3, #87	; 0x57
  1266bc:	e1d33abc 	ldrh	r3, [r3, #172]	; 0xac
  1266c0:	e2833001 	add	r3, r3, #1
  1266c4:	e6ff2073 	uxth	r2, r3
  1266c8:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  1266cc:	e3403057 	movt	r3, #87	; 0x57
  1266d0:	e1c32abc 	strh	r2, [r3, #172]	; 0xac
  MIB2_STATS_INC(mib2.tcpoutrsts);
  1266d4:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  1266d8:	e3403057 	movt	r3, #87	; 0x57
  1266dc:	e593318c 	ldr	r3, [r3, #396]	; 0x18c
  1266e0:	e2832001 	add	r2, r3, #1
  1266e4:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  1266e8:	e3403057 	movt	r3, #87	; 0x57
  1266ec:	e583218c 	str	r2, [r3, #396]	; 0x18c

  netif = ip_route(local_ip, remote_ip);
  1266f0:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  1266f4:	eb002990 	bl	130d3c <ip4_route>
  1266f8:	e50b0010 	str	r0, [fp, #-16]
  if (netif != NULL) {
  1266fc:	e51b3010 	ldr	r3, [fp, #-16]
  126700:	e3530000 	cmp	r3, #0
  126704:	0a000016 	beq	126764 <tcp_rst+0x1d8>
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  126708:	e51b3008 	ldr	r3, [fp, #-8]
  12670c:	e1d320b8 	ldrh	r2, [r3, #8]
  126710:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126714:	e58d3000 	str	r3, [sp]
  126718:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12671c:	e3a01006 	mov	r1, #6
  126720:	e51b0008 	ldr	r0, [fp, #-8]
  126724:	ebffc6f0 	bl	1182ec <ip_chksum_pseudo>
  126728:	e1a03000 	mov	r3, r0
  12672c:	e1a02003 	mov	r2, r3
  126730:	e51b300c 	ldr	r3, [fp, #-12]
  126734:	e1c321b0 	strh	r2, [r3, #16]
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
  126738:	e51b3010 	ldr	r3, [fp, #-16]
  12673c:	e58d3008 	str	r3, [sp, #8]
  126740:	e3a03006 	mov	r3, #6
  126744:	e58d3004 	str	r3, [sp, #4]
  126748:	e3a03000 	mov	r3, #0
  12674c:	e58d3000 	str	r3, [sp]
  126750:	e3a030ff 	mov	r3, #255	; 0xff
  126754:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  126758:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  12675c:	e51b0008 	ldr	r0, [fp, #-8]
  126760:	eb002c4e 	bl	1318a0 <ip4_output_if>
  }
  pbuf_free(p);
  126764:	e51b0008 	ldr	r0, [fp, #-8]
  126768:	ebffd0f7 	bl	11ab4c <pbuf_free>
  12676c:	ea000000 	b	126774 <tcp_rst+0x1e8>
    return;
  126770:	e320f000 	nop	{0}
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
  126774:	e24bd004 	sub	sp, fp, #4
  126778:	e8bd8800 	pop	{fp, pc}

0012677c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  12677c:	e92d4800 	push	{fp, lr}
  126780:	e28db004 	add	fp, sp, #4
  126784:	e24dd010 	sub	sp, sp, #16
  126788:	e50b0010 	str	r0, [fp, #-16]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
  12678c:	e51b3010 	ldr	r3, [fp, #-16]
  126790:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  126794:	e3530000 	cmp	r3, #0
  126798:	0a000025 	beq	126834 <tcp_rexmit_rto+0xb8>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
  12679c:	e51b3010 	ldr	r3, [fp, #-16]
  1267a0:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  1267a4:	e50b3008 	str	r3, [fp, #-8]
  1267a8:	ea000002 	b	1267b8 <tcp_rexmit_rto+0x3c>
  1267ac:	e51b3008 	ldr	r3, [fp, #-8]
  1267b0:	e5933000 	ldr	r3, [r3]
  1267b4:	e50b3008 	str	r3, [fp, #-8]
  1267b8:	e51b3008 	ldr	r3, [fp, #-8]
  1267bc:	e5933000 	ldr	r3, [r3]
  1267c0:	e3530000 	cmp	r3, #0
  1267c4:	1afffff8 	bne	1267ac <tcp_rexmit_rto+0x30>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
  1267c8:	e51b3010 	ldr	r3, [fp, #-16]
  1267cc:	e593206c 	ldr	r2, [r3, #108]	; 0x6c
  1267d0:	e51b3008 	ldr	r3, [fp, #-8]
  1267d4:	e5832000 	str	r2, [r3]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
  1267d8:	e51b3010 	ldr	r3, [fp, #-16]
  1267dc:	e5932070 	ldr	r2, [r3, #112]	; 0x70
  1267e0:	e51b3010 	ldr	r3, [fp, #-16]
  1267e4:	e583206c 	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
  1267e8:	e51b3010 	ldr	r3, [fp, #-16]
  1267ec:	e3a02000 	mov	r2, #0
  1267f0:	e5832070 	str	r2, [r3, #112]	; 0x70

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
  1267f4:	e51b3010 	ldr	r3, [fp, #-16]
  1267f8:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  1267fc:	e35300ff 	cmp	r3, #255	; 0xff
  126800:	0a000005 	beq	12681c <tcp_rexmit_rto+0xa0>
    ++pcb->nrtx;
  126804:	e51b3010 	ldr	r3, [fp, #-16]
  126808:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  12680c:	e2833001 	add	r3, r3, #1
  126810:	e6ef2073 	uxtb	r2, r3
  126814:	e51b3010 	ldr	r3, [fp, #-16]
  126818:	e5c32046 	strb	r2, [r3, #70]	; 0x46
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
  12681c:	e51b3010 	ldr	r3, [fp, #-16]
  126820:	e3a02000 	mov	r2, #0
  126824:	e5832038 	str	r2, [r3, #56]	; 0x38

  /* Do the actual retransmission */
  tcp_output(pcb);
  126828:	e51b0010 	ldr	r0, [fp, #-16]
  12682c:	ebfffcf0 	bl	125bf4 <tcp_output>
  126830:	ea000000 	b	126838 <tcp_rexmit_rto+0xbc>
    return;
  126834:	e320f000 	nop	{0}
}
  126838:	e24bd004 	sub	sp, fp, #4
  12683c:	e8bd8800 	pop	{fp, pc}

00126840 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
  126840:	e92d4810 	push	{r4, fp, lr}
  126844:	e28db008 	add	fp, sp, #8
  126848:	e24dd014 	sub	sp, sp, #20
  12684c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
  126850:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126854:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  126858:	e3530000 	cmp	r3, #0
  12685c:	0a000044 	beq	126974 <tcp_rexmit+0x134>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  126860:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126864:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  126868:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  pcb->unacked = seg->next;
  12686c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126870:	e5932000 	ldr	r2, [r3]
  126874:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126878:	e5832070 	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
  12687c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126880:	e283306c 	add	r3, r3, #108	; 0x6c
  126884:	e50b3010 	str	r3, [fp, #-16]
  while (*cur_seg &&
  126888:	ea000002 	b	126898 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
  12688c:	e51b3010 	ldr	r3, [fp, #-16]
  126890:	e5933000 	ldr	r3, [r3]
  126894:	e50b3010 	str	r3, [fp, #-16]
  while (*cur_seg &&
  126898:	e51b3010 	ldr	r3, [fp, #-16]
  12689c:	e5933000 	ldr	r3, [r3]
  1268a0:	e3530000 	cmp	r3, #0
  1268a4:	0a00000f 	beq	1268e8 <tcp_rexmit+0xa8>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
  1268a8:	e51b3010 	ldr	r3, [fp, #-16]
  1268ac:	e5933000 	ldr	r3, [r3]
  1268b0:	e593300c 	ldr	r3, [r3, #12]
  1268b4:	e5933004 	ldr	r3, [r3, #4]
  1268b8:	e1a00003 	mov	r0, r3
  1268bc:	ebffbe77 	bl	1162a0 <lwip_htonl>
  1268c0:	e1a04000 	mov	r4, r0
  1268c4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1268c8:	e593300c 	ldr	r3, [r3, #12]
  1268cc:	e5933004 	ldr	r3, [r3, #4]
  1268d0:	e1a00003 	mov	r0, r3
  1268d4:	ebffbe71 	bl	1162a0 <lwip_htonl>
  1268d8:	e1a03000 	mov	r3, r0
  1268dc:	e0443003 	sub	r3, r4, r3
  while (*cur_seg &&
  1268e0:	e3530000 	cmp	r3, #0
  1268e4:	baffffe8 	blt	12688c <tcp_rexmit+0x4c>
  }
  seg->next = *cur_seg;
  1268e8:	e51b3010 	ldr	r3, [fp, #-16]
  1268ec:	e5932000 	ldr	r2, [r3]
  1268f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1268f4:	e5832000 	str	r2, [r3]
  *cur_seg = seg;
  1268f8:	e51b3010 	ldr	r3, [fp, #-16]
  1268fc:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  126900:	e5832000 	str	r2, [r3]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
  126904:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126908:	e5933000 	ldr	r3, [r3]
  12690c:	e3530000 	cmp	r3, #0
  126910:	1a000002 	bne	126920 <tcp_rexmit+0xe0>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
  126914:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126918:	e3a02000 	mov	r2, #0
  12691c:	e1c326b8 	strh	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
  126920:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126924:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  126928:	e35300ff 	cmp	r3, #255	; 0xff
  12692c:	0a000005 	beq	126948 <tcp_rexmit+0x108>
    ++pcb->nrtx;
  126930:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126934:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  126938:	e2833001 	add	r3, r3, #1
  12693c:	e6ef2073 	uxtb	r2, r3
  126940:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126944:	e5c32046 	strb	r2, [r3, #70]	; 0x46
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
  126948:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12694c:	e3a02000 	mov	r2, #0
  126950:	e5832038 	str	r2, [r3, #56]	; 0x38

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  126954:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  126958:	e3403057 	movt	r3, #87	; 0x57
  12695c:	e5933180 	ldr	r3, [r3, #384]	; 0x180
  126960:	e2832001 	add	r2, r3, #1
  126964:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  126968:	e3403057 	movt	r3, #87	; 0x57
  12696c:	e5832180 	str	r2, [r3, #384]	; 0x180
  126970:	ea000000 	b	126978 <tcp_rexmit+0x138>
    return;
  126974:	e320f000 	nop	{0}
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
  126978:	e24bd008 	sub	sp, fp, #8
  12697c:	e8bd8810 	pop	{r4, fp, pc}

00126980 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
  126980:	e92d4800 	push	{fp, lr}
  126984:	e28db004 	add	fp, sp, #4
  126988:	e24dd008 	sub	sp, sp, #8
  12698c:	e50b0008 	str	r0, [fp, #-8]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
  126990:	e51b3008 	ldr	r3, [fp, #-8]
  126994:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  126998:	e3530000 	cmp	r3, #0
  12699c:	0a00003e 	beq	126a9c <tcp_rexmit_fast+0x11c>
  1269a0:	e51b3008 	ldr	r3, [fp, #-8]
  1269a4:	e5d3301e 	ldrb	r3, [r3, #30]
  1269a8:	e2033004 	and	r3, r3, #4
  1269ac:	e3530000 	cmp	r3, #0
  1269b0:	1a000039 	bne	126a9c <tcp_rexmit_fast+0x11c>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
  1269b4:	e51b0008 	ldr	r0, [fp, #-8]
  1269b8:	ebffffa0 	bl	126840 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
  1269bc:	e51b3008 	ldr	r3, [fp, #-8]
  1269c0:	e1d324bc 	ldrh	r2, [r3, #76]	; 0x4c
  1269c4:	e51b3008 	ldr	r3, [fp, #-8]
  1269c8:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  1269cc:	e1520003 	cmp	r2, r3
  1269d0:	2a000006 	bcs	1269f0 <tcp_rexmit_fast+0x70>
  1269d4:	e51b3008 	ldr	r3, [fp, #-8]
  1269d8:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  1269dc:	e1a02fa3 	lsr	r2, r3, #31
  1269e0:	e0823003 	add	r3, r2, r3
  1269e4:	e1a030c3 	asr	r3, r3, #1
  1269e8:	e6ff3073 	uxth	r3, r3
  1269ec:	ea000005 	b	126a08 <tcp_rexmit_fast+0x88>
  1269f0:	e51b3008 	ldr	r3, [fp, #-8]
  1269f4:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  1269f8:	e1a02fa3 	lsr	r2, r3, #31
  1269fc:	e0823003 	add	r3, r2, r3
  126a00:	e1a030c3 	asr	r3, r3, #1
  126a04:	e6ff3073 	uxth	r3, r3
  126a08:	e51b2008 	ldr	r2, [fp, #-8]
  126a0c:	e1c234be 	strh	r3, [r2, #78]	; 0x4e

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
  126a10:	e51b3008 	ldr	r3, [fp, #-8]
  126a14:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  126a18:	e1a02003 	mov	r2, r3
  126a1c:	e51b3008 	ldr	r3, [fp, #-8]
  126a20:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  126a24:	e1a03083 	lsl	r3, r3, #1
  126a28:	e1520003 	cmp	r2, r3
  126a2c:	2a000005 	bcs	126a48 <tcp_rexmit_fast+0xc8>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
  126a30:	e51b3008 	ldr	r3, [fp, #-8]
  126a34:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  126a38:	e1a03083 	lsl	r3, r3, #1
  126a3c:	e6ff2073 	uxth	r2, r3
  126a40:	e51b3008 	ldr	r3, [fp, #-8]
  126a44:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
  126a48:	e51b3008 	ldr	r3, [fp, #-8]
  126a4c:	e1d324be 	ldrh	r2, [r3, #78]	; 0x4e
  126a50:	e51b3008 	ldr	r3, [fp, #-8]
  126a54:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  126a58:	e1a01003 	mov	r1, r3
  126a5c:	e1a01081 	lsl	r1, r1, #1
  126a60:	e0813003 	add	r3, r1, r3
  126a64:	e6ff3073 	uxth	r3, r3
  126a68:	e0823003 	add	r3, r2, r3
  126a6c:	e6ff2073 	uxth	r2, r3
  126a70:	e51b3008 	ldr	r3, [fp, #-8]
  126a74:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
    pcb->flags |= TF_INFR;
  126a78:	e51b3008 	ldr	r3, [fp, #-8]
  126a7c:	e5d3301e 	ldrb	r3, [r3, #30]
  126a80:	e3833004 	orr	r3, r3, #4
  126a84:	e6ef2073 	uxtb	r2, r3
  126a88:	e51b3008 	ldr	r3, [fp, #-8]
  126a8c:	e5c3201e 	strb	r2, [r3, #30]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
  126a90:	e51b3008 	ldr	r3, [fp, #-8]
  126a94:	e3a02000 	mov	r2, #0
  126a98:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
  }
}
  126a9c:	e320f000 	nop	{0}
  126aa0:	e24bd004 	sub	sp, fp, #4
  126aa4:	e8bd8800 	pop	{fp, pc}

00126aa8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
  126aa8:	e92d4800 	push	{fp, lr}
  126aac:	e28db004 	add	fp, sp, #4
  126ab0:	e24dd028 	sub	sp, sp, #40	; 0x28
  126ab4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
  126ab8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126abc:	e5933050 	ldr	r3, [r3, #80]	; 0x50
  126ac0:	e2433001 	sub	r3, r3, #1
  126ac4:	e1a00003 	mov	r0, r3
  126ac8:	ebffbdf4 	bl	1162a0 <lwip_htonl>
  126acc:	e1a03000 	mov	r3, r0
  126ad0:	e3a02000 	mov	r2, #0
  126ad4:	e3a01000 	mov	r1, #0
  126ad8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  126adc:	ebfff62b 	bl	124390 <tcp_output_alloc_header>
  126ae0:	e50b000c 	str	r0, [fp, #-12]
  if (p == NULL) {
  126ae4:	e51b300c 	ldr	r3, [fp, #-12]
  126ae8:	e3530000 	cmp	r3, #0
  126aec:	1a000001 	bne	126af8 <tcp_keepalive+0x50>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  126af0:	e3e03000 	mvn	r3, #0
  126af4:	ea000036 	b	126bd4 <tcp_keepalive+0x12c>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
  126af8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126afc:	e2833004 	add	r3, r3, #4
  126b00:	e1a00003 	mov	r0, r3
  126b04:	eb00288c 	bl	130d3c <ip4_route>
  126b08:	e50b0010 	str	r0, [fp, #-16]
  if (netif == NULL) {
  126b0c:	e51b3010 	ldr	r3, [fp, #-16]
  126b10:	e3530000 	cmp	r3, #0
  126b14:	1a000002 	bne	126b24 <tcp_keepalive+0x7c>
    err = ERR_RTE;
  126b18:	e3e03003 	mvn	r3, #3
  126b1c:	e54b3005 	strb	r3, [fp, #-5]
  126b20:	ea000028 	b	126bc8 <tcp_keepalive+0x120>
  } else {
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
  126b24:	e51b300c 	ldr	r3, [fp, #-12]
  126b28:	e5933004 	ldr	r3, [r3, #4]
  126b2c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  126b30:	e51b300c 	ldr	r3, [fp, #-12]
  126b34:	e1d320b8 	ldrh	r2, [r3, #8]
        &pcb->local_ip, &pcb->remote_ip);
  126b38:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  126b3c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126b40:	e2833004 	add	r3, r3, #4
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  126b44:	e58d3000 	str	r3, [sp]
  126b48:	e1a03001 	mov	r3, r1
  126b4c:	e3a01006 	mov	r1, #6
  126b50:	e51b000c 	ldr	r0, [fp, #-12]
  126b54:	ebffc5e4 	bl	1182ec <ip_chksum_pseudo>
  126b58:	e1a03000 	mov	r3, r0
  126b5c:	e1a02003 	mov	r2, r3
  126b60:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126b64:	e1c321b0 	strh	r2, [r3, #16]
    }
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);
  126b68:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  126b6c:	e3403057 	movt	r3, #87	; 0x57
  126b70:	e1d33abc 	ldrh	r3, [r3, #172]	; 0xac
  126b74:	e2833001 	add	r3, r3, #1
  126b78:	e6ff2073 	uxth	r2, r3
  126b7c:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  126b80:	e3403057 	movt	r3, #87	; 0x57
  126b84:	e1c32abc 	strh	r2, [r3, #172]	; 0xac

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
  126b88:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  126b8c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126b90:	e2832004 	add	r2, r3, #4
  126b94:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126b98:	e5d3000a 	ldrb	r0, [r3, #10]
  126b9c:	e51b3010 	ldr	r3, [fp, #-16]
  126ba0:	e58d3008 	str	r3, [sp, #8]
  126ba4:	e3a03006 	mov	r3, #6
  126ba8:	e58d3004 	str	r3, [sp, #4]
  126bac:	e3a03000 	mov	r3, #0
  126bb0:	e58d3000 	str	r3, [sp]
  126bb4:	e1a03000 	mov	r3, r0
  126bb8:	e51b000c 	ldr	r0, [fp, #-12]
  126bbc:	eb002b37 	bl	1318a0 <ip4_output_if>
  126bc0:	e1a03000 	mov	r3, r0
  126bc4:	e54b3005 	strb	r3, [fp, #-5]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
  126bc8:	e51b000c 	ldr	r0, [fp, #-12]
  126bcc:	ebffcfde 	bl	11ab4c <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
  126bd0:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  126bd4:	e1a00003 	mov	r0, r3
  126bd8:	e24bd004 	sub	sp, fp, #4
  126bdc:	e8bd8800 	pop	{fp, pc}

00126be0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
  126be0:	e92d4810 	push	{r4, fp, lr}
  126be4:	e28db008 	add	fp, sp, #8
  126be8:	e24dd03c 	sub	sp, sp, #60	; 0x3c
  126bec:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
  126bf0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126bf4:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  126bf8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  if (seg == NULL) {
  126bfc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126c00:	e3530000 	cmp	r3, #0
  126c04:	1a000002 	bne	126c14 <tcp_zero_window_probe+0x34>
    seg = pcb->unsent;
  126c08:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126c0c:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  126c10:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  }
  if (seg == NULL) {
  126c14:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126c18:	e3530000 	cmp	r3, #0
  126c1c:	1a000001 	bne	126c28 <tcp_zero_window_probe+0x48>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
  126c20:	e3a03000 	mov	r3, #0
  126c24:	ea00008c 	b	126e5c <tcp_zero_window_probe+0x27c>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
  126c28:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126c2c:	e593300c 	ldr	r3, [r3, #12]
  126c30:	e1d330bc 	ldrh	r3, [r3, #12]
  126c34:	e6ff3073 	uxth	r3, r3
  126c38:	e1a00003 	mov	r0, r3
  126c3c:	ebffbd8b 	bl	116270 <lwip_htons>
  126c40:	e1a03000 	mov	r3, r0
  126c44:	e2033001 	and	r3, r3, #1
  126c48:	e3530000 	cmp	r3, #0
  126c4c:	0a000005 	beq	126c68 <tcp_zero_window_probe+0x88>
  126c50:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126c54:	e1d330b8 	ldrh	r3, [r3, #8]
  126c58:	e3530000 	cmp	r3, #0
  126c5c:	1a000001 	bne	126c68 <tcp_zero_window_probe+0x88>
  126c60:	e3a03001 	mov	r3, #1
  126c64:	ea000000 	b	126c6c <tcp_zero_window_probe+0x8c>
  126c68:	e3a03000 	mov	r3, #0
  126c6c:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
  126c70:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  126c74:	e3530000 	cmp	r3, #0
  126c78:	03a03001 	moveq	r3, #1
  126c7c:	13a03000 	movne	r3, #0
  126c80:	e6ef3073 	uxtb	r3, r3
  126c84:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
  126c88:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126c8c:	e593300c 	ldr	r3, [r3, #12]
  126c90:	e5933004 	ldr	r3, [r3, #4]
  126c94:	e15b21b8 	ldrh	r2, [fp, #-24]	; 0xffffffe8
  126c98:	e3a01000 	mov	r1, #0
  126c9c:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  126ca0:	ebfff5ba 	bl	124390 <tcp_output_alloc_header>
  126ca4:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
  if (p == NULL) {
  126ca8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  126cac:	e3530000 	cmp	r3, #0
  126cb0:	1a000001 	bne	126cbc <tcp_zero_window_probe+0xdc>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  126cb4:	e3e03000 	mvn	r3, #0
  126cb8:	ea000067 	b	126e5c <tcp_zero_window_probe+0x27c>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
  126cbc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  126cc0:	e5933004 	ldr	r3, [r3, #4]
  126cc4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0

  if (is_fin) {
  126cc8:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  126ccc:	e3530000 	cmp	r3, #0
  126cd0:	0a00000c 	beq	126d08 <tcp_zero_window_probe+0x128>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
  126cd4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126cd8:	e1d330bc 	ldrh	r3, [r3, #12]
  126cdc:	e6ff3073 	uxth	r3, r3
  126ce0:	e3c33c3f 	bic	r3, r3, #16128	; 0x3f00
  126ce4:	e6ff4073 	uxth	r4, r3
  126ce8:	e3a00011 	mov	r0, #17
  126cec:	ebffbd5f 	bl	116270 <lwip_htons>
  126cf0:	e1a03000 	mov	r3, r0
  126cf4:	e1843003 	orr	r3, r4, r3
  126cf8:	e6ff2073 	uxth	r2, r3
  126cfc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126d00:	e1c320bc 	strh	r2, [r3, #12]
  126d04:	ea00000f 	b	126d48 <tcp_zero_window_probe+0x168>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
  126d08:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  126d0c:	e5933004 	ldr	r3, [r3, #4]
  126d10:	e2833014 	add	r3, r3, #20
  126d14:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  126d18:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126d1c:	e5930004 	ldr	r0, [r3, #4]
  126d20:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126d24:	e5933004 	ldr	r3, [r3, #4]
  126d28:	e1d320b8 	ldrh	r2, [r3, #8]
  126d2c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126d30:	e1d330b8 	ldrh	r3, [r3, #8]
  126d34:	e0423003 	sub	r3, r2, r3
  126d38:	e6ff3073 	uxth	r3, r3
  126d3c:	e3a02001 	mov	r2, #1
  126d40:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  126d44:	ebffd18b 	bl	11b378 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
  126d48:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126d4c:	e593300c 	ldr	r3, [r3, #12]
  126d50:	e5933004 	ldr	r3, [r3, #4]
  126d54:	e1a00003 	mov	r0, r3
  126d58:	ebffbd50 	bl	1162a0 <lwip_htonl>
  126d5c:	e1a03000 	mov	r3, r0
  126d60:	e2833001 	add	r3, r3, #1
  126d64:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
  126d68:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126d6c:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  126d70:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  126d74:	e0423003 	sub	r3, r2, r3
  126d78:	e3530000 	cmp	r3, #0
  126d7c:	aa000002 	bge	126d8c <tcp_zero_window_probe+0x1ac>
    pcb->snd_nxt = snd_nxt;
  126d80:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126d84:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  126d88:	e5832050 	str	r2, [r3, #80]	; 0x50
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
  126d8c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126d90:	e2833004 	add	r3, r3, #4
  126d94:	e1a00003 	mov	r0, r3
  126d98:	eb0027e7 	bl	130d3c <ip4_route>
  126d9c:	e50b002c 	str	r0, [fp, #-44]	; 0xffffffd4
  if (netif == NULL) {
  126da0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  126da4:	e3530000 	cmp	r3, #0
  126da8:	1a000002 	bne	126db8 <tcp_zero_window_probe+0x1d8>
    err = ERR_RTE;
  126dac:	e3e03003 	mvn	r3, #3
  126db0:	e54b300d 	strb	r3, [fp, #-13]
  126db4:	ea000025 	b	126e50 <tcp_zero_window_probe+0x270>
  } else {
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  126db8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  126dbc:	e1d320b8 	ldrh	r2, [r3, #8]
        &pcb->local_ip, &pcb->remote_ip);
  126dc0:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
  126dc4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126dc8:	e2833004 	add	r3, r3, #4
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  126dcc:	e58d3000 	str	r3, [sp]
  126dd0:	e1a03001 	mov	r3, r1
  126dd4:	e3a01006 	mov	r1, #6
  126dd8:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  126ddc:	ebffc542 	bl	1182ec <ip_chksum_pseudo>
  126de0:	e1a03000 	mov	r3, r0
  126de4:	e1a02003 	mov	r2, r3
  126de8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126dec:	e1c321b0 	strh	r2, [r3, #16]
    }
#endif
    TCP_STATS_INC(tcp.xmit);
  126df0:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  126df4:	e3403057 	movt	r3, #87	; 0x57
  126df8:	e1d33abc 	ldrh	r3, [r3, #172]	; 0xac
  126dfc:	e2833001 	add	r3, r3, #1
  126e00:	e6ff2073 	uxth	r2, r3
  126e04:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  126e08:	e3403057 	movt	r3, #87	; 0x57
  126e0c:	e1c32abc 	strh	r2, [r3, #172]	; 0xac

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
  126e10:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
  126e14:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126e18:	e2832004 	add	r2, r3, #4
  126e1c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126e20:	e5d3000a 	ldrb	r0, [r3, #10]
  126e24:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  126e28:	e58d3008 	str	r3, [sp, #8]
  126e2c:	e3a03006 	mov	r3, #6
  126e30:	e58d3004 	str	r3, [sp, #4]
  126e34:	e3a03000 	mov	r3, #0
  126e38:	e58d3000 	str	r3, [sp]
  126e3c:	e1a03000 	mov	r3, r0
  126e40:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  126e44:	eb002a95 	bl	1318a0 <ip4_output_if>
  126e48:	e1a03000 	mov	r3, r0
  126e4c:	e54b300d 	strb	r3, [fp, #-13]
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
  126e50:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  126e54:	ebffcf3c 	bl	11ab4c <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
  126e58:	e15b30dd 	ldrsb	r3, [fp, #-13]
}
  126e5c:	e1a00003 	mov	r0, r3
  126e60:	e24bd008 	sub	sp, fp, #8
  126e64:	e8bd8810 	pop	{r4, fp, pc}

00126e68 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
  126e68:	e92d4800 	push	{fp, lr}
  126e6c:	e28db004 	add	fp, sp, #4
  126e70:	e24dd008 	sub	sp, sp, #8
  126e74:	e50b0008 	str	r0, [fp, #-8]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
  126e78:	ebffd77b 	bl	11cc6c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
  126e7c:	e30531b0 	movw	r3, #20912	; 0x51b0
  126e80:	e3403057 	movt	r3, #87	; 0x57
  126e84:	e5933000 	ldr	r3, [r3]
  126e88:	e3530000 	cmp	r3, #0
  126e8c:	1a000004 	bne	126ea4 <tcpip_tcp_timer+0x3c>
  126e90:	e30531c0 	movw	r3, #20928	; 0x51c0
  126e94:	e3403057 	movt	r3, #87	; 0x57
  126e98:	e5933000 	ldr	r3, [r3]
  126e9c:	e3530000 	cmp	r3, #0
  126ea0:	0a000005 	beq	126ebc <tcpip_tcp_timer+0x54>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
  126ea4:	e3a02000 	mov	r2, #0
  126ea8:	e3061e68 	movw	r1, #28264	; 0x6e68
  126eac:	e3401012 	movt	r1, #18
  126eb0:	e3a000fa 	mov	r0, #250	; 0xfa
  126eb4:	eb000057 	bl	127018 <sys_timeout>
  126eb8:	ea000003 	b	126ecc <tcpip_tcp_timer+0x64>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
  126ebc:	e30e3250 	movw	r3, #57936	; 0xe250
  126ec0:	e3403014 	movt	r3, #20
  126ec4:	e3a02000 	mov	r2, #0
  126ec8:	e5832000 	str	r2, [r3]
  }
}
  126ecc:	e320f000 	nop	{0}
  126ed0:	e24bd004 	sub	sp, fp, #4
  126ed4:	e8bd8800 	pop	{fp, pc}

00126ed8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
  126ed8:	e92d4800 	push	{fp, lr}
  126edc:	e28db004 	add	fp, sp, #4
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
  126ee0:	e30e3250 	movw	r3, #57936	; 0xe250
  126ee4:	e3403014 	movt	r3, #20
  126ee8:	e5933000 	ldr	r3, [r3]
  126eec:	e3530000 	cmp	r3, #0
  126ef0:	1a000012 	bne	126f40 <tcp_timer_needed+0x68>
  126ef4:	e30531b0 	movw	r3, #20912	; 0x51b0
  126ef8:	e3403057 	movt	r3, #87	; 0x57
  126efc:	e5933000 	ldr	r3, [r3]
  126f00:	e3530000 	cmp	r3, #0
  126f04:	1a000004 	bne	126f1c <tcp_timer_needed+0x44>
  126f08:	e30531c0 	movw	r3, #20928	; 0x51c0
  126f0c:	e3403057 	movt	r3, #87	; 0x57
  126f10:	e5933000 	ldr	r3, [r3]
  126f14:	e3530000 	cmp	r3, #0
  126f18:	0a000008 	beq	126f40 <tcp_timer_needed+0x68>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
  126f1c:	e30e3250 	movw	r3, #57936	; 0xe250
  126f20:	e3403014 	movt	r3, #20
  126f24:	e3a02001 	mov	r2, #1
  126f28:	e5832000 	str	r2, [r3]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
  126f2c:	e3a02000 	mov	r2, #0
  126f30:	e3061e68 	movw	r1, #28264	; 0x6e68
  126f34:	e3401012 	movt	r1, #18
  126f38:	e3a000fa 	mov	r0, #250	; 0xfa
  126f3c:	eb000035 	bl	127018 <sys_timeout>
  }
}
  126f40:	e320f000 	nop	{0}
  126f44:	e8bd8800 	pop	{fp, pc}

00126f48 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
  126f48:	e92d4800 	push	{fp, lr}
  126f4c:	e28db004 	add	fp, sp, #4
  126f50:	e24dd010 	sub	sp, sp, #16
  126f54:	e50b0010 	str	r0, [fp, #-16]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
  126f58:	e51b3010 	ldr	r3, [fp, #-16]
  126f5c:	e50b3008 	str	r3, [fp, #-8]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
  126f60:	e51b3008 	ldr	r3, [fp, #-8]
  126f64:	e5933004 	ldr	r3, [r3, #4]
  126f68:	e12fff33 	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
  126f6c:	e51b3008 	ldr	r3, [fp, #-8]
  126f70:	e5933000 	ldr	r3, [r3]
  126f74:	e51b2010 	ldr	r2, [fp, #-16]
  126f78:	e3061f48 	movw	r1, #28488	; 0x6f48
  126f7c:	e3401012 	movt	r1, #18
  126f80:	e1a00003 	mov	r0, r3
  126f84:	eb000023 	bl	127018 <sys_timeout>
}
  126f88:	e320f000 	nop	{0}
  126f8c:	e24bd004 	sub	sp, fp, #4
  126f90:	e8bd8800 	pop	{fp, pc}

00126f94 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
  126f94:	e92d4800 	push	{fp, lr}
  126f98:	e28db004 	add	fp, sp, #4
  126f9c:	e24dd008 	sub	sp, sp, #8
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = 1; i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
  126fa0:	e3a03001 	mov	r3, #1
  126fa4:	e50b3008 	str	r3, [fp, #-8]
  126fa8:	ea00000f 	b	126fec <sys_timeouts_init+0x58>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
  126fac:	e3073f5c 	movw	r3, #32604	; 0x7f5c
  126fb0:	e3403014 	movt	r3, #20
  126fb4:	e51b2008 	ldr	r2, [fp, #-8]
  126fb8:	e7930182 	ldr	r0, [r3, r2, lsl #3]
  126fbc:	e51b3008 	ldr	r3, [fp, #-8]
  126fc0:	e1a02183 	lsl	r2, r3, #3
  126fc4:	e3073f5c 	movw	r3, #32604	; 0x7f5c
  126fc8:	e3403014 	movt	r3, #20
  126fcc:	e0823003 	add	r3, r2, r3
  126fd0:	e1a02003 	mov	r2, r3
  126fd4:	e3061f48 	movw	r1, #28488	; 0x6f48
  126fd8:	e3401012 	movt	r1, #18
  126fdc:	eb00000d 	bl	127018 <sys_timeout>
  for (i = 1; i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
  126fe0:	e51b3008 	ldr	r3, [fp, #-8]
  126fe4:	e2833001 	add	r3, r3, #1
  126fe8:	e50b3008 	str	r3, [fp, #-8]
  126fec:	e51b3008 	ldr	r3, [fp, #-8]
  126ff0:	e3530006 	cmp	r3, #6
  126ff4:	9affffec 	bls	126fac <sys_timeouts_init+0x18>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
  126ff8:	ebff8ede 	bl	10ab78 <sys_now>
  126ffc:	e1a02000 	mov	r2, r0
  127000:	e30e324c 	movw	r3, #57932	; 0xe24c
  127004:	e3403014 	movt	r3, #20
  127008:	e5832000 	str	r2, [r3]
}
  12700c:	e320f000 	nop	{0}
  127010:	e24bd004 	sub	sp, fp, #4
  127014:	e8bd8800 	pop	{fp, pc}

00127018 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
  127018:	e92d4800 	push	{fp, lr}
  12701c:	e28db004 	add	fp, sp, #4
  127020:	e24dd020 	sub	sp, sp, #32
  127024:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  127028:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  12702c:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
  127030:	e3a020d2 	mov	r2, #210	; 0xd2
  127034:	e3071f94 	movw	r1, #32660	; 0x7f94
  127038:	e3401014 	movt	r1, #20
  12703c:	e3a0000d 	mov	r0, #13
  127040:	ebffc74b 	bl	118d74 <memp_malloc_fn>
  127044:	e50b0010 	str	r0, [fp, #-16]
  if (timeout == NULL) {
  127048:	e51b3010 	ldr	r3, [fp, #-16]
  12704c:	e3530000 	cmp	r3, #0
  127050:	1a00000a 	bne	127080 <sys_timeout+0x68>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
  127054:	e51b3010 	ldr	r3, [fp, #-16]
  127058:	e3530000 	cmp	r3, #0
  12705c:	1a00008f 	bne	1272a0 <sys_timeout+0x288>
  127060:	e3070fc4 	movw	r0, #32708	; 0x7fc4
  127064:	e3400014 	movt	r0, #20
  127068:	ebff7029 	bl	103114 <rt_kprintf>
  12706c:	e3a010d4 	mov	r1, #212	; 0xd4
  127070:	e3070f94 	movw	r0, #32660	; 0x7f94
  127074:	e3400014 	movt	r0, #20
  127078:	ebff8ea5 	bl	10ab14 <sys_arch_assert>
    return;
  12707c:	ea000087 	b	1272a0 <sys_timeout+0x288>
  }

  now = sys_now();
  127080:	ebff8ebc 	bl	10ab78 <sys_now>
  127084:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  if (next_timeout == NULL) {
  127088:	e30e3248 	movw	r3, #57928	; 0xe248
  12708c:	e3403014 	movt	r3, #20
  127090:	e5933000 	ldr	r3, [r3]
  127094:	e3530000 	cmp	r3, #0
  127098:	1a000006 	bne	1270b8 <sys_timeout+0xa0>
    diff = 0;
  12709c:	e3a03000 	mov	r3, #0
  1270a0:	e50b300c 	str	r3, [fp, #-12]
    timeouts_last_time = now;
  1270a4:	e30e324c 	movw	r3, #57932	; 0xe24c
  1270a8:	e3403014 	movt	r3, #20
  1270ac:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1270b0:	e5832000 	str	r2, [r3]
  1270b4:	ea000005 	b	1270d0 <sys_timeout+0xb8>
  } else {
    diff = now - timeouts_last_time;
  1270b8:	e30e324c 	movw	r3, #57932	; 0xe24c
  1270bc:	e3403014 	movt	r3, #20
  1270c0:	e5933000 	ldr	r3, [r3]
  1270c4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1270c8:	e0423003 	sub	r3, r2, r3
  1270cc:	e50b300c 	str	r3, [fp, #-12]
  }

  timeout->next = NULL;
  1270d0:	e51b3010 	ldr	r3, [fp, #-16]
  1270d4:	e3a02000 	mov	r2, #0
  1270d8:	e5832000 	str	r2, [r3]
  timeout->h = handler;
  1270dc:	e51b3010 	ldr	r3, [fp, #-16]
  1270e0:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1270e4:	e5832008 	str	r2, [r3, #8]
  timeout->arg = arg;
  1270e8:	e51b3010 	ldr	r3, [fp, #-16]
  1270ec:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1270f0:	e583200c 	str	r2, [r3, #12]
  timeout->time = msecs + diff;
  1270f4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1270f8:	e51b300c 	ldr	r3, [fp, #-12]
  1270fc:	e0822003 	add	r2, r2, r3
  127100:	e51b3010 	ldr	r3, [fp, #-16]
  127104:	e5832004 	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
  127108:	e30e3248 	movw	r3, #57928	; 0xe248
  12710c:	e3403014 	movt	r3, #20
  127110:	e5933000 	ldr	r3, [r3]
  127114:	e3530000 	cmp	r3, #0
  127118:	1a000004 	bne	127130 <sys_timeout+0x118>
    next_timeout = timeout;
  12711c:	e30e3248 	movw	r3, #57928	; 0xe248
  127120:	e3403014 	movt	r3, #20
  127124:	e51b2010 	ldr	r2, [fp, #-16]
  127128:	e5832000 	str	r2, [r3]
    return;
  12712c:	ea00005c 	b	1272a4 <sys_timeout+0x28c>
  }

  if (next_timeout->time > msecs) {
  127130:	e30e3248 	movw	r3, #57928	; 0xe248
  127134:	e3403014 	movt	r3, #20
  127138:	e5933000 	ldr	r3, [r3]
  12713c:	e5933004 	ldr	r3, [r3, #4]
  127140:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  127144:	e1520003 	cmp	r2, r3
  127148:	2a000013 	bcs	12719c <sys_timeout+0x184>
    next_timeout->time -= msecs;
  12714c:	e30e3248 	movw	r3, #57928	; 0xe248
  127150:	e3403014 	movt	r3, #20
  127154:	e5933000 	ldr	r3, [r3]
  127158:	e5931004 	ldr	r1, [r3, #4]
  12715c:	e30e3248 	movw	r3, #57928	; 0xe248
  127160:	e3403014 	movt	r3, #20
  127164:	e5933000 	ldr	r3, [r3]
  127168:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  12716c:	e0412002 	sub	r2, r1, r2
  127170:	e5832004 	str	r2, [r3, #4]
    timeout->next = next_timeout;
  127174:	e30e3248 	movw	r3, #57928	; 0xe248
  127178:	e3403014 	movt	r3, #20
  12717c:	e5932000 	ldr	r2, [r3]
  127180:	e51b3010 	ldr	r3, [fp, #-16]
  127184:	e5832000 	str	r2, [r3]
    next_timeout = timeout;
  127188:	e30e3248 	movw	r3, #57928	; 0xe248
  12718c:	e3403014 	movt	r3, #20
  127190:	e51b2010 	ldr	r2, [fp, #-16]
  127194:	e5832000 	str	r2, [r3]
  127198:	ea000041 	b	1272a4 <sys_timeout+0x28c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
  12719c:	e30e3248 	movw	r3, #57928	; 0xe248
  1271a0:	e3403014 	movt	r3, #20
  1271a4:	e5933000 	ldr	r3, [r3]
  1271a8:	e50b3008 	str	r3, [fp, #-8]
  1271ac:	ea000037 	b	127290 <sys_timeout+0x278>
      timeout->time -= t->time;
  1271b0:	e51b3010 	ldr	r3, [fp, #-16]
  1271b4:	e5932004 	ldr	r2, [r3, #4]
  1271b8:	e51b3008 	ldr	r3, [fp, #-8]
  1271bc:	e5933004 	ldr	r3, [r3, #4]
  1271c0:	e0422003 	sub	r2, r2, r3
  1271c4:	e51b3010 	ldr	r3, [fp, #-16]
  1271c8:	e5832004 	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
  1271cc:	e51b3008 	ldr	r3, [fp, #-8]
  1271d0:	e5933000 	ldr	r3, [r3]
  1271d4:	e3530000 	cmp	r3, #0
  1271d8:	0a000006 	beq	1271f8 <sys_timeout+0x1e0>
  1271dc:	e51b3008 	ldr	r3, [fp, #-8]
  1271e0:	e5933000 	ldr	r3, [r3]
  1271e4:	e5932004 	ldr	r2, [r3, #4]
  1271e8:	e51b3010 	ldr	r3, [fp, #-16]
  1271ec:	e5933004 	ldr	r3, [r3, #4]
  1271f0:	e1520003 	cmp	r2, r3
  1271f4:	9a000022 	bls	127284 <sys_timeout+0x26c>
        if (t->next != NULL) {
  1271f8:	e51b3008 	ldr	r3, [fp, #-8]
  1271fc:	e5933000 	ldr	r3, [r3]
  127200:	e3530000 	cmp	r3, #0
  127204:	0a000009 	beq	127230 <sys_timeout+0x218>
          t->next->time -= timeout->time;
  127208:	e51b3008 	ldr	r3, [fp, #-8]
  12720c:	e5933000 	ldr	r3, [r3]
  127210:	e5931004 	ldr	r1, [r3, #4]
  127214:	e51b3010 	ldr	r3, [fp, #-16]
  127218:	e5932004 	ldr	r2, [r3, #4]
  12721c:	e51b3008 	ldr	r3, [fp, #-8]
  127220:	e5933000 	ldr	r3, [r3]
  127224:	e0412002 	sub	r2, r1, r2
  127228:	e5832004 	str	r2, [r3, #4]
  12722c:	ea00000c 	b	127264 <sys_timeout+0x24c>
        } else if (timeout->time > msecs) {
  127230:	e51b3010 	ldr	r3, [fp, #-16]
  127234:	e5933004 	ldr	r3, [r3, #4]
  127238:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  12723c:	e1520003 	cmp	r2, r3
  127240:	2a000007 	bcs	127264 <sys_timeout+0x24c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
  127244:	e30e3248 	movw	r3, #57928	; 0xe248
  127248:	e3403014 	movt	r3, #20
  12724c:	e5933000 	ldr	r3, [r3]
  127250:	e5932004 	ldr	r2, [r3, #4]
  127254:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  127258:	e0822003 	add	r2, r2, r3
  12725c:	e51b3010 	ldr	r3, [fp, #-16]
  127260:	e5832004 	str	r2, [r3, #4]
        }
        timeout->next = t->next;
  127264:	e51b3008 	ldr	r3, [fp, #-8]
  127268:	e5932000 	ldr	r2, [r3]
  12726c:	e51b3010 	ldr	r3, [fp, #-16]
  127270:	e5832000 	str	r2, [r3]
        t->next = timeout;
  127274:	e51b3008 	ldr	r3, [fp, #-8]
  127278:	e51b2010 	ldr	r2, [fp, #-16]
  12727c:	e5832000 	str	r2, [r3]
        break;
  127280:	ea000007 	b	1272a4 <sys_timeout+0x28c>
    for (t = next_timeout; t != NULL; t = t->next) {
  127284:	e51b3008 	ldr	r3, [fp, #-8]
  127288:	e5933000 	ldr	r3, [r3]
  12728c:	e50b3008 	str	r3, [fp, #-8]
  127290:	e51b3008 	ldr	r3, [fp, #-8]
  127294:	e3530000 	cmp	r3, #0
  127298:	1affffc4 	bne	1271b0 <sys_timeout+0x198>
  12729c:	ea000000 	b	1272a4 <sys_timeout+0x28c>
    return;
  1272a0:	e320f000 	nop	{0}
      }
    }
  }
}
  1272a4:	e24bd004 	sub	sp, fp, #4
  1272a8:	e8bd8800 	pop	{fp, pc}

001272ac <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
  1272ac:	e92d4800 	push	{fp, lr}
  1272b0:	e28db004 	add	fp, sp, #4
  1272b4:	e24dd010 	sub	sp, sp, #16
  1272b8:	e50b0010 	str	r0, [fp, #-16]
  1272bc:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct sys_timeo *prev_t, *t;

  if (next_timeout == NULL) {
  1272c0:	e30e3248 	movw	r3, #57928	; 0xe248
  1272c4:	e3403014 	movt	r3, #20
  1272c8:	e5933000 	ldr	r3, [r3]
  1272cc:	e3530000 	cmp	r3, #0
  1272d0:	0a000038 	beq	1273b8 <sys_untimeout+0x10c>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
  1272d4:	e30e3248 	movw	r3, #57928	; 0xe248
  1272d8:	e3403014 	movt	r3, #20
  1272dc:	e5933000 	ldr	r3, [r3]
  1272e0:	e50b300c 	str	r3, [fp, #-12]
  1272e4:	e3a03000 	mov	r3, #0
  1272e8:	e50b3008 	str	r3, [fp, #-8]
  1272ec:	ea00002c 	b	1273a4 <sys_untimeout+0xf8>
    if ((t->h == handler) && (t->arg == arg)) {
  1272f0:	e51b300c 	ldr	r3, [fp, #-12]
  1272f4:	e5933008 	ldr	r3, [r3, #8]
  1272f8:	e51b2010 	ldr	r2, [fp, #-16]
  1272fc:	e1520003 	cmp	r2, r3
  127300:	1a000022 	bne	127390 <sys_untimeout+0xe4>
  127304:	e51b300c 	ldr	r3, [fp, #-12]
  127308:	e593300c 	ldr	r3, [r3, #12]
  12730c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  127310:	e1520003 	cmp	r2, r3
  127314:	1a00001d 	bne	127390 <sys_untimeout+0xe4>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
  127318:	e51b3008 	ldr	r3, [fp, #-8]
  12731c:	e3530000 	cmp	r3, #0
  127320:	1a000005 	bne	12733c <sys_untimeout+0x90>
        next_timeout = t->next;
  127324:	e51b300c 	ldr	r3, [fp, #-12]
  127328:	e5932000 	ldr	r2, [r3]
  12732c:	e30e3248 	movw	r3, #57928	; 0xe248
  127330:	e3403014 	movt	r3, #20
  127334:	e5832000 	str	r2, [r3]
  127338:	ea000003 	b	12734c <sys_untimeout+0xa0>
      } else {
        prev_t->next = t->next;
  12733c:	e51b300c 	ldr	r3, [fp, #-12]
  127340:	e5932000 	ldr	r2, [r3]
  127344:	e51b3008 	ldr	r3, [fp, #-8]
  127348:	e5832000 	str	r2, [r3]
      }
      /* If not the last one, add time of this one back to next */
      if (t->next != NULL) {
  12734c:	e51b300c 	ldr	r3, [fp, #-12]
  127350:	e5933000 	ldr	r3, [r3]
  127354:	e3530000 	cmp	r3, #0
  127358:	0a000008 	beq	127380 <sys_untimeout+0xd4>
        t->next->time += t->time;
  12735c:	e51b300c 	ldr	r3, [fp, #-12]
  127360:	e5933000 	ldr	r3, [r3]
  127364:	e5931004 	ldr	r1, [r3, #4]
  127368:	e51b300c 	ldr	r3, [fp, #-12]
  12736c:	e5932004 	ldr	r2, [r3, #4]
  127370:	e51b300c 	ldr	r3, [fp, #-12]
  127374:	e5933000 	ldr	r3, [r3]
  127378:	e0812002 	add	r2, r1, r2
  12737c:	e5832004 	str	r2, [r3, #4]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
  127380:	e51b100c 	ldr	r1, [fp, #-12]
  127384:	e3a0000d 	mov	r0, #13
  127388:	ebffc6e1 	bl	118f14 <memp_free>
      return;
  12738c:	ea00000a 	b	1273bc <sys_untimeout+0x110>
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
  127390:	e51b300c 	ldr	r3, [fp, #-12]
  127394:	e50b3008 	str	r3, [fp, #-8]
  127398:	e51b300c 	ldr	r3, [fp, #-12]
  12739c:	e5933000 	ldr	r3, [r3]
  1273a0:	e50b300c 	str	r3, [fp, #-12]
  1273a4:	e51b300c 	ldr	r3, [fp, #-12]
  1273a8:	e3530000 	cmp	r3, #0
  1273ac:	1affffcf 	bne	1272f0 <sys_untimeout+0x44>
    }
  }
  return;
  1273b0:	e320f000 	nop	{0}
  1273b4:	ea000000 	b	1273bc <sys_untimeout+0x110>
    return;
  1273b8:	e320f000 	nop	{0}
}
  1273bc:	e24bd004 	sub	sp, fp, #4
  1273c0:	e8bd8800 	pop	{fp, pc}

001273c4 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
  1273c4:	e92d4800 	push	{fp, lr}
  1273c8:	e28db004 	add	fp, sp, #4
  1273cc:	e24dd018 	sub	sp, sp, #24
  if (next_timeout) {
  1273d0:	e30e3248 	movw	r3, #57928	; 0xe248
  1273d4:	e3403014 	movt	r3, #20
  1273d8:	e5933000 	ldr	r3, [r3]
  1273dc:	e3530000 	cmp	r3, #0
  1273e0:	0a000042 	beq	1274f0 <sys_check_timeouts+0x12c>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
  1273e4:	ebff8de3 	bl	10ab78 <sys_now>
  1273e8:	e50b0010 	str	r0, [fp, #-16]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
  1273ec:	e30e324c 	movw	r3, #57932	; 0xe24c
  1273f0:	e3403014 	movt	r3, #20
  1273f4:	e5933000 	ldr	r3, [r3]
  1273f8:	e51b2010 	ldr	r2, [fp, #-16]
  1273fc:	e0423003 	sub	r3, r2, r3
  127400:	e50b3008 	str	r3, [fp, #-8]
    do {
      PBUF_CHECK_FREE_OOSEQ();
      had_one = 0;
  127404:	e3a03000 	mov	r3, #0
  127408:	e54b3009 	strb	r3, [fp, #-9]
      tmptimeout = next_timeout;
  12740c:	e30e3248 	movw	r3, #57928	; 0xe248
  127410:	e3403014 	movt	r3, #20
  127414:	e5933000 	ldr	r3, [r3]
  127418:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      if (tmptimeout && (tmptimeout->time <= diff)) {
  12741c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  127420:	e3530000 	cmp	r3, #0
  127424:	0a00002e 	beq	1274e4 <sys_check_timeouts+0x120>
  127428:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12742c:	e5933004 	ldr	r3, [r3, #4]
  127430:	e51b2008 	ldr	r2, [fp, #-8]
  127434:	e1520003 	cmp	r2, r3
  127438:	3a000029 	bcc	1274e4 <sys_check_timeouts+0x120>
        /* timeout has expired */
        had_one = 1;
  12743c:	e3a03001 	mov	r3, #1
  127440:	e54b3009 	strb	r3, [fp, #-9]
        timeouts_last_time += tmptimeout->time;
  127444:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  127448:	e5932004 	ldr	r2, [r3, #4]
  12744c:	e30e324c 	movw	r3, #57932	; 0xe24c
  127450:	e3403014 	movt	r3, #20
  127454:	e5933000 	ldr	r3, [r3]
  127458:	e0822003 	add	r2, r2, r3
  12745c:	e30e324c 	movw	r3, #57932	; 0xe24c
  127460:	e3403014 	movt	r3, #20
  127464:	e5832000 	str	r2, [r3]
        diff -= tmptimeout->time;
  127468:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12746c:	e5933004 	ldr	r3, [r3, #4]
  127470:	e51b2008 	ldr	r2, [fp, #-8]
  127474:	e0423003 	sub	r3, r2, r3
  127478:	e50b3008 	str	r3, [fp, #-8]
        next_timeout = tmptimeout->next;
  12747c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  127480:	e5932000 	ldr	r2, [r3]
  127484:	e30e3248 	movw	r3, #57928	; 0xe248
  127488:	e3403014 	movt	r3, #20
  12748c:	e5832000 	str	r2, [r3]
        handler = tmptimeout->h;
  127490:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  127494:	e5933008 	ldr	r3, [r3, #8]
  127498:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        arg = tmptimeout->arg;
  12749c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1274a0:	e593300c 	ldr	r3, [r3, #12]
  1274a4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
  1274a8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1274ac:	e3a0000d 	mov	r0, #13
  1274b0:	ebffc697 	bl	118f14 <memp_free>
        if (handler != NULL) {
  1274b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1274b8:	e3530000 	cmp	r3, #0
  1274bc:	0a000008 	beq	1274e4 <sys_check_timeouts+0x120>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
  1274c0:	e30e0d64 	movw	r0, #60772	; 0xed64
  1274c4:	e3400014 	movt	r0, #20
  1274c8:	ebff8bb0 	bl	10a390 <sys_mutex_lock>
#endif /* !NO_SYS */
          handler(arg);
  1274cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1274d0:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  1274d4:	e12fff33 	blx	r3
#if !NO_SYS
          UNLOCK_TCPIP_CORE();
  1274d8:	e30e0d64 	movw	r0, #60772	; 0xed64
  1274dc:	e3400014 	movt	r0, #20
  1274e0:	ebff8bb6 	bl	10a3c0 <sys_mutex_unlock>
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
  1274e4:	e55b3009 	ldrb	r3, [fp, #-9]
  1274e8:	e3530000 	cmp	r3, #0
  1274ec:	1affffc4 	bne	127404 <sys_check_timeouts+0x40>
  }
}
  1274f0:	e320f000 	nop	{0}
  1274f4:	e24bd004 	sub	sp, fp, #4
  1274f8:	e8bd8800 	pop	{fp, pc}

001274fc <sys_restart_timeouts>:
 * time (e.g. while saving energy) to prevent all timer functions of that
 * period being called.
 */
void
sys_restart_timeouts(void)
{
  1274fc:	e92d4800 	push	{fp, lr}
  127500:	e28db004 	add	fp, sp, #4
  timeouts_last_time = sys_now();
  127504:	ebff8d9b 	bl	10ab78 <sys_now>
  127508:	e1a02000 	mov	r2, r0
  12750c:	e30e324c 	movw	r3, #57932	; 0xe24c
  127510:	e3403014 	movt	r3, #20
  127514:	e5832000 	str	r2, [r3]
}
  127518:	e320f000 	nop	{0}
  12751c:	e8bd8800 	pop	{fp, pc}

00127520 <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
  127520:	e92d4800 	push	{fp, lr}
  127524:	e28db004 	add	fp, sp, #4
  127528:	e24dd008 	sub	sp, sp, #8
  u32_t diff;
  if (next_timeout == NULL) {
  12752c:	e30e3248 	movw	r3, #57928	; 0xe248
  127530:	e3403014 	movt	r3, #20
  127534:	e5933000 	ldr	r3, [r3]
  127538:	e3530000 	cmp	r3, #0
  12753c:	1a000001 	bne	127548 <sys_timeouts_sleeptime+0x28>
    return 0xffffffff;
  127540:	e3e03000 	mvn	r3, #0
  127544:	ea000015 	b	1275a0 <sys_timeouts_sleeptime+0x80>
  }
  diff = sys_now() - timeouts_last_time;
  127548:	ebff8d8a 	bl	10ab78 <sys_now>
  12754c:	e1a02000 	mov	r2, r0
  127550:	e30e324c 	movw	r3, #57932	; 0xe24c
  127554:	e3403014 	movt	r3, #20
  127558:	e5933000 	ldr	r3, [r3]
  12755c:	e0423003 	sub	r3, r2, r3
  127560:	e50b3008 	str	r3, [fp, #-8]
  if (diff > next_timeout->time) {
  127564:	e30e3248 	movw	r3, #57928	; 0xe248
  127568:	e3403014 	movt	r3, #20
  12756c:	e5933000 	ldr	r3, [r3]
  127570:	e5933004 	ldr	r3, [r3, #4]
  127574:	e51b2008 	ldr	r2, [fp, #-8]
  127578:	e1520003 	cmp	r2, r3
  12757c:	9a000001 	bls	127588 <sys_timeouts_sleeptime+0x68>
    return 0;
  127580:	e3a03000 	mov	r3, #0
  127584:	ea000005 	b	1275a0 <sys_timeouts_sleeptime+0x80>
  } else {
    return next_timeout->time - diff;
  127588:	e30e3248 	movw	r3, #57928	; 0xe248
  12758c:	e3403014 	movt	r3, #20
  127590:	e5933000 	ldr	r3, [r3]
  127594:	e5932004 	ldr	r2, [r3, #4]
  127598:	e51b3008 	ldr	r3, [fp, #-8]
  12759c:	e0423003 	sub	r3, r2, r3
  }
}
  1275a0:	e1a00003 	mov	r0, r3
  1275a4:	e24bd004 	sub	sp, fp, #4
  1275a8:	e8bd8800 	pop	{fp, pc}

001275ac <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
  1275ac:	e92d4800 	push	{fp, lr}
  1275b0:	e28db004 	add	fp, sp, #4
  1275b4:	e24dd010 	sub	sp, sp, #16
  1275b8:	e50b0010 	str	r0, [fp, #-16]
  1275bc:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  u32_t sleeptime;

again:
  if (!next_timeout) {
  1275c0:	e30e3248 	movw	r3, #57928	; 0xe248
  1275c4:	e3403014 	movt	r3, #20
  1275c8:	e5933000 	ldr	r3, [r3]
  1275cc:	e3530000 	cmp	r3, #0
  1275d0:	1a000004 	bne	1275e8 <sys_timeouts_mbox_fetch+0x3c>
    sys_arch_mbox_fetch(mbox, msg, 0);
  1275d4:	e3a02000 	mov	r2, #0
  1275d8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1275dc:	e51b0010 	ldr	r0, [fp, #-16]
  1275e0:	ebff8cb1 	bl	10a8ac <sys_arch_mbox_fetch>
    return;
  1275e4:	ea00000d 	b	127620 <sys_timeouts_mbox_fetch+0x74>
  }

  sleeptime = sys_timeouts_sleeptime();
  1275e8:	ebffffcc 	bl	127520 <sys_timeouts_sleeptime>
  1275ec:	e50b0008 	str	r0, [fp, #-8]
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
  1275f0:	e51b3008 	ldr	r3, [fp, #-8]
  1275f4:	e3530000 	cmp	r3, #0
  1275f8:	0a000006 	beq	127618 <sys_timeouts_mbox_fetch+0x6c>
  1275fc:	e51b2008 	ldr	r2, [fp, #-8]
  127600:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  127604:	e51b0010 	ldr	r0, [fp, #-16]
  127608:	ebff8ca7 	bl	10a8ac <sys_arch_mbox_fetch>
  12760c:	e1a03000 	mov	r3, r0
  127610:	e3730001 	cmn	r3, #1
  127614:	1a000001 	bne	127620 <sys_timeouts_mbox_fetch+0x74>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
  127618:	ebffff69 	bl	1273c4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
  12761c:	eaffffe7 	b	1275c0 <sys_timeouts_mbox_fetch+0x14>
  }
}
  127620:	e24bd004 	sub	sp, fp, #4
  127624:	e8bd8800 	pop	{fp, pc}

00127628 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
  127628:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  12762c:	e28db000 	add	fp, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
  127630:	e320f000 	nop	{0}
  127634:	e28bd000 	add	sp, fp, #0
  127638:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  12763c:	e12fff1e 	bx	lr

00127640 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
  127640:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  127644:	e28db000 	add	fp, sp, #0
  127648:	e24dd00c 	sub	sp, sp, #12
  u16_t n = 0;
  12764c:	e3a03000 	mov	r3, #0
  127650:	e14b30b6 	strh	r3, [fp, #-6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
  127654:	e30d3030 	movw	r3, #53296	; 0xd030
  127658:	e3403014 	movt	r3, #20
  12765c:	e1d320b0 	ldrh	r2, [r3]
  127660:	e2823001 	add	r3, r2, #1
  127664:	e6ff1073 	uxth	r1, r3
  127668:	e30d3030 	movw	r3, #53296	; 0xd030
  12766c:	e3403014 	movt	r3, #20
  127670:	e1c310b0 	strh	r1, [r3]
  127674:	e30f3fff 	movw	r3, #65535	; 0xffff
  127678:	e1520003 	cmp	r2, r3
  12767c:	1a000003 	bne	127690 <udp_new_port+0x50>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
  127680:	e30d3030 	movw	r3, #53296	; 0xd030
  127684:	e3403014 	movt	r3, #20
  127688:	e3a02903 	mov	r2, #49152	; 0xc000
  12768c:	e1c320b0 	strh	r2, [r3]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  127690:	e30531c8 	movw	r3, #20936	; 0x51c8
  127694:	e3403057 	movt	r3, #87	; 0x57
  127698:	e5933000 	ldr	r3, [r3]
  12769c:	e50b300c 	str	r3, [fp, #-12]
  1276a0:	ea000011 	b	1276ec <udp_new_port+0xac>
    if (pcb->local_port == udp_port) {
  1276a4:	e51b300c 	ldr	r3, [fp, #-12]
  1276a8:	e1d321b2 	ldrh	r2, [r3, #18]
  1276ac:	e30d3030 	movw	r3, #53296	; 0xd030
  1276b0:	e3403014 	movt	r3, #20
  1276b4:	e1d330b0 	ldrh	r3, [r3]
  1276b8:	e1520003 	cmp	r2, r3
  1276bc:	1a000007 	bne	1276e0 <udp_new_port+0xa0>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
  1276c0:	e15b30b6 	ldrh	r3, [fp, #-6]
  1276c4:	e2833001 	add	r3, r3, #1
  1276c8:	e14b30b6 	strh	r3, [fp, #-6]
  1276cc:	e15b30b6 	ldrh	r3, [fp, #-6]
  1276d0:	e3530901 	cmp	r3, #16384	; 0x4000
  1276d4:	3affffde 	bcc	127654 <udp_new_port+0x14>
        return 0;
  1276d8:	e3a03000 	mov	r3, #0
  1276dc:	ea000008 	b	127704 <udp_new_port+0xc4>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  1276e0:	e51b300c 	ldr	r3, [fp, #-12]
  1276e4:	e593300c 	ldr	r3, [r3, #12]
  1276e8:	e50b300c 	str	r3, [fp, #-12]
  1276ec:	e51b300c 	ldr	r3, [fp, #-12]
  1276f0:	e3530000 	cmp	r3, #0
  1276f4:	1affffea 	bne	1276a4 <udp_new_port+0x64>
      }
      goto again;
    }
  }
  return udp_port;
  1276f8:	e30d3030 	movw	r3, #53296	; 0xd030
  1276fc:	e3403014 	movt	r3, #20
  127700:	e1d330b0 	ldrh	r3, [r3]
}
  127704:	e1a00003 	mov	r0, r3
  127708:	e28bd000 	add	sp, fp, #0
  12770c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  127710:	e12fff1e 	bx	lr

00127714 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
  127714:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  127718:	e28db000 	add	fp, sp, #0
  12771c:	e24dd014 	sub	sp, sp, #20
  127720:	e50b0008 	str	r0, [fp, #-8]
  127724:	e50b100c 	str	r1, [fp, #-12]
  127728:	e1a03002 	mov	r3, r2
  12772c:	e54b300d 	strb	r3, [fp, #-13]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
  127730:	e55b300d 	ldrb	r3, [fp, #-13]
  127734:	e3530000 	cmp	r3, #0
  127738:	0a00001e 	beq	1277b8 <udp_input_local_match+0xa4>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
  12773c:	e51b3008 	ldr	r3, [fp, #-8]
  127740:	e5d33008 	ldrb	r3, [r3, #8]
  127744:	e2033020 	and	r3, r3, #32
  127748:	e3530000 	cmp	r3, #0
  12774c:	0a000029 	beq	1277f8 <udp_input_local_match+0xe4>
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
  127750:	e51b3008 	ldr	r3, [fp, #-8]
  127754:	e3530000 	cmp	r3, #0
  127758:	0a000014 	beq	1277b0 <udp_input_local_match+0x9c>
  12775c:	e51b3008 	ldr	r3, [fp, #-8]
  127760:	e5933000 	ldr	r3, [r3]
  127764:	e3530000 	cmp	r3, #0
  127768:	0a000010 	beq	1277b0 <udp_input_local_match+0x9c>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
  12776c:	e30e3d68 	movw	r3, #60776	; 0xed68
  127770:	e3403014 	movt	r3, #20
  127774:	e5933014 	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
  127778:	e3730001 	cmn	r3, #1
  12777c:	0a00000b 	beq	1277b0 <udp_input_local_match+0x9c>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
  127780:	e51b3008 	ldr	r3, [fp, #-8]
  127784:	e5932000 	ldr	r2, [r3]
  127788:	e30e3d68 	movw	r3, #60776	; 0xed68
  12778c:	e3403014 	movt	r3, #20
  127790:	e5933014 	ldr	r3, [r3, #20]
  127794:	e0222003 	eor	r2, r2, r3
  127798:	e51b300c 	ldr	r3, [fp, #-12]
  12779c:	e2833008 	add	r3, r3, #8
  1277a0:	e5933000 	ldr	r3, [r3]
  1277a4:	e0033002 	and	r3, r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
  1277a8:	e3530000 	cmp	r3, #0
  1277ac:	1a000011 	bne	1277f8 <udp_input_local_match+0xe4>
          return 1;
  1277b0:	e3a03001 	mov	r3, #1
  1277b4:	ea000010 	b	1277fc <udp_input_local_match+0xe8>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
  1277b8:	e51b3008 	ldr	r3, [fp, #-8]
  1277bc:	e3530000 	cmp	r3, #0
  1277c0:	0a00000a 	beq	1277f0 <udp_input_local_match+0xdc>
  1277c4:	e51b3008 	ldr	r3, [fp, #-8]
  1277c8:	e5933000 	ldr	r3, [r3]
  1277cc:	e3530000 	cmp	r3, #0
  1277d0:	0a000006 	beq	1277f0 <udp_input_local_match+0xdc>
  1277d4:	e51b3008 	ldr	r3, [fp, #-8]
  1277d8:	e5932000 	ldr	r2, [r3]
  1277dc:	e30e3d68 	movw	r3, #60776	; 0xed68
  1277e0:	e3403014 	movt	r3, #20
  1277e4:	e5933014 	ldr	r3, [r3, #20]
  1277e8:	e1520003 	cmp	r2, r3
  1277ec:	1a000001 	bne	1277f8 <udp_input_local_match+0xe4>
      return 1;
  1277f0:	e3a03001 	mov	r3, #1
  1277f4:	ea000000 	b	1277fc <udp_input_local_match+0xe8>
    }
  }

  return 0;
  1277f8:	e3a03000 	mov	r3, #0
}
  1277fc:	e1a00003 	mov	r0, r3
  127800:	e28bd000 	add	sp, fp, #0
  127804:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  127808:	e12fff1e 	bx	lr

0012780c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
  12780c:	e92d4810 	push	{r4, fp, lr}
  127810:	e28db008 	add	fp, sp, #8
  127814:	e24dd034 	sub	sp, sp, #52	; 0x34
  127818:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  12781c:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
  127820:	e3a03000 	mov	r3, #0
  127824:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7

  LWIP_UNUSED_ARG(inp);

  PERF_START;

  UDP_STATS_INC(udp.recv);
  127828:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12782c:	e3403057 	movt	r3, #87	; 0x57
  127830:	e1d339b6 	ldrh	r3, [r3, #150]	; 0x96
  127834:	e2833001 	add	r3, r3, #1
  127838:	e6ff2073 	uxth	r2, r3
  12783c:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  127840:	e3403057 	movt	r3, #87	; 0x57
  127844:	e1c329b6 	strh	r2, [r3, #150]	; 0x96

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
  127848:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12784c:	e1d330ba 	ldrh	r3, [r3, #10]
  127850:	e3530007 	cmp	r3, #7
  127854:	8a000019 	bhi	1278c0 <udp_input+0xb4>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
  127858:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12785c:	e3403057 	movt	r3, #87	; 0x57
  127860:	e1d339be 	ldrh	r3, [r3, #158]	; 0x9e
  127864:	e2833001 	add	r3, r3, #1
  127868:	e6ff2073 	uxth	r2, r3
  12786c:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  127870:	e3403057 	movt	r3, #87	; 0x57
  127874:	e1c329be 	strh	r2, [r3, #158]	; 0x9e
    UDP_STATS_INC(udp.drop);
  127878:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12787c:	e3403057 	movt	r3, #87	; 0x57
  127880:	e1d339ba 	ldrh	r3, [r3, #154]	; 0x9a
  127884:	e2833001 	add	r3, r3, #1
  127888:	e6ff2073 	uxth	r2, r3
  12788c:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  127890:	e3403057 	movt	r3, #87	; 0x57
  127894:	e1c329ba 	strh	r2, [r3, #154]	; 0x9a
    MIB2_STATS_INC(mib2.udpinerrors);
  127898:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12789c:	e3403057 	movt	r3, #87	; 0x57
  1278a0:	e5933198 	ldr	r3, [r3, #408]	; 0x198
  1278a4:	e2832001 	add	r2, r3, #1
  1278a8:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  1278ac:	e3403057 	movt	r3, #87	; 0x57
  1278b0:	e5832198 	str	r2, [r3, #408]	; 0x198
    pbuf_free(p);
  1278b4:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  1278b8:	ebffcca3 	bl	11ab4c <pbuf_free>
    goto end;
  1278bc:	ea00010c 	b	127cf4 <udp_input+0x4e8>
  }

  udphdr = (struct udp_hdr *)p->payload;
  1278c0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1278c4:	e5933004 	ldr	r3, [r3, #4]
  1278c8:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
  1278cc:	e30e3d68 	movw	r3, #60776	; 0xed68
  1278d0:	e3403014 	movt	r3, #20
  1278d4:	e5932014 	ldr	r2, [r3, #20]
  1278d8:	e30e3d68 	movw	r3, #60776	; 0xed68
  1278dc:	e3403014 	movt	r3, #20
  1278e0:	e5933000 	ldr	r3, [r3]
  1278e4:	e1a01003 	mov	r1, r3
  1278e8:	e1a00002 	mov	r0, r2
  1278ec:	eb0029f1 	bl	1320b8 <ip4_addr_isbroadcast_u32>
  1278f0:	e1a03000 	mov	r3, r0
  1278f4:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
  1278f8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1278fc:	e1d330b0 	ldrh	r3, [r3]
  127900:	e6ff3073 	uxth	r3, r3
  127904:	e1a00003 	mov	r0, r3
  127908:	ebffba58 	bl	116270 <lwip_htons>
  12790c:	e1a03000 	mov	r3, r0
  127910:	e14b32b4 	strh	r3, [fp, #-36]	; 0xffffffdc
  dest = lwip_ntohs(udphdr->dest);
  127914:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  127918:	e1d330b2 	ldrh	r3, [r3, #2]
  12791c:	e6ff3073 	uxth	r3, r3
  127920:	e1a00003 	mov	r0, r3
  127924:	ebffba51 	bl	116270 <lwip_htons>
  127928:	e1a03000 	mov	r3, r0
  12792c:	e14b32b6 	strh	r3, [fp, #-38]	; 0xffffffda
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
  127930:	e3a03000 	mov	r3, #0
  127934:	e50b3010 	str	r3, [fp, #-16]
  prev = NULL;
  127938:	e3a03000 	mov	r3, #0
  12793c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  uncon_pcb = NULL;
  127940:	e3a03000 	mov	r3, #0
  127944:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  127948:	e30531c8 	movw	r3, #20936	; 0x51c8
  12794c:	e3403057 	movt	r3, #87	; 0x57
  127950:	e5933000 	ldr	r3, [r3]
  127954:	e50b3010 	str	r3, [fp, #-16]
  127958:	ea00004c 	b	127a90 <udp_input+0x284>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
  12795c:	e51b3010 	ldr	r3, [fp, #-16]
  127960:	e1d331b2 	ldrh	r3, [r3, #18]
  127964:	e15b22b6 	ldrh	r2, [fp, #-38]	; 0xffffffda
  127968:	e1520003 	cmp	r2, r3
  12796c:	1a000042 	bne	127a7c <udp_input+0x270>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
  127970:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  127974:	e1a02003 	mov	r2, r3
  127978:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  12797c:	e51b0010 	ldr	r0, [fp, #-16]
  127980:	ebffff63 	bl	127714 <udp_input_local_match>
  127984:	e1a03000 	mov	r3, r0
    if ((pcb->local_port == dest) &&
  127988:	e3530000 	cmp	r3, #0
  12798c:	0a00003a 	beq	127a7c <udp_input+0x270>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
  127990:	e51b3010 	ldr	r3, [fp, #-16]
  127994:	e5d33010 	ldrb	r3, [r3, #16]
  127998:	e2033004 	and	r3, r3, #4
  12799c:	e3530000 	cmp	r3, #0
  1279a0:	1a00000b 	bne	1279d4 <udp_input+0x1c8>
  1279a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1279a8:	e3530000 	cmp	r3, #0
  1279ac:	0a000006 	beq	1279cc <udp_input+0x1c0>
          ((uncon_pcb == NULL)
#if SO_REUSE
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
  1279b0:	e51b3010 	ldr	r3, [fp, #-16]
  1279b4:	e3530000 	cmp	r3, #0
  1279b8:	0a000005 	beq	1279d4 <udp_input+0x1c8>
  1279bc:	e51b3010 	ldr	r3, [fp, #-16]
  1279c0:	e5933000 	ldr	r3, [r3]
  1279c4:	e3530000 	cmp	r3, #0
  1279c8:	0a000001 	beq	1279d4 <udp_input+0x1c8>
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
  1279cc:	e51b3010 	ldr	r3, [fp, #-16]
  1279d0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
  1279d4:	e51b3010 	ldr	r3, [fp, #-16]
  1279d8:	e1d331b4 	ldrh	r3, [r3, #20]
  1279dc:	e15b22b4 	ldrh	r2, [fp, #-36]	; 0xffffffdc
  1279e0:	e1520003 	cmp	r2, r3
  1279e4:	1a000024 	bne	127a7c <udp_input+0x270>
          (ip_addr_isany_val(pcb->remote_ip) ||
  1279e8:	e51b3010 	ldr	r3, [fp, #-16]
  1279ec:	e5933004 	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
  1279f0:	e3530000 	cmp	r3, #0
  1279f4:	0a000006 	beq	127a14 <udp_input+0x208>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
  1279f8:	e51b3010 	ldr	r3, [fp, #-16]
  1279fc:	e5932004 	ldr	r2, [r3, #4]
  127a00:	e30e3d68 	movw	r3, #60776	; 0xed68
  127a04:	e3403014 	movt	r3, #20
  127a08:	e5933010 	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
  127a0c:	e1520003 	cmp	r2, r3
  127a10:	1a000019 	bne	127a7c <udp_input+0x270>
        /* the first fully matching PCB */
        if (prev != NULL) {
  127a14:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  127a18:	e3530000 	cmp	r3, #0
  127a1c:	0a00000d 	beq	127a58 <udp_input+0x24c>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
  127a20:	e51b3010 	ldr	r3, [fp, #-16]
  127a24:	e593200c 	ldr	r2, [r3, #12]
  127a28:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  127a2c:	e583200c 	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
  127a30:	e30531c8 	movw	r3, #20936	; 0x51c8
  127a34:	e3403057 	movt	r3, #87	; 0x57
  127a38:	e5932000 	ldr	r2, [r3]
  127a3c:	e51b3010 	ldr	r3, [fp, #-16]
  127a40:	e583200c 	str	r2, [r3, #12]
          udp_pcbs = pcb;
  127a44:	e30531c8 	movw	r3, #20936	; 0x51c8
  127a48:	e3403057 	movt	r3, #87	; 0x57
  127a4c:	e51b2010 	ldr	r2, [fp, #-16]
  127a50:	e5832000 	str	r2, [r3]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
  127a54:	ea000010 	b	127a9c <udp_input+0x290>
          UDP_STATS_INC(udp.cachehit);
  127a58:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  127a5c:	e3403057 	movt	r3, #87	; 0x57
  127a60:	e1d33aba 	ldrh	r3, [r3, #170]	; 0xaa
  127a64:	e2833001 	add	r3, r3, #1
  127a68:	e6ff2073 	uxth	r2, r3
  127a6c:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  127a70:	e3403057 	movt	r3, #87	; 0x57
  127a74:	e1c32aba 	strh	r2, [r3, #170]	; 0xaa
        break;
  127a78:	ea000007 	b	127a9c <udp_input+0x290>
      }
    }

    prev = pcb;
  127a7c:	e51b3010 	ldr	r3, [fp, #-16]
  127a80:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  127a84:	e51b3010 	ldr	r3, [fp, #-16]
  127a88:	e593300c 	ldr	r3, [r3, #12]
  127a8c:	e50b3010 	str	r3, [fp, #-16]
  127a90:	e51b3010 	ldr	r3, [fp, #-16]
  127a94:	e3530000 	cmp	r3, #0
  127a98:	1affffaf 	bne	12795c <udp_input+0x150>
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
  127a9c:	e51b3010 	ldr	r3, [fp, #-16]
  127aa0:	e3530000 	cmp	r3, #0
  127aa4:	1a000001 	bne	127ab0 <udp_input+0x2a4>
    pcb = uncon_pcb;
  127aa8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  127aac:	e50b3010 	str	r3, [fp, #-16]
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
  127ab0:	e51b3010 	ldr	r3, [fp, #-16]
  127ab4:	e3530000 	cmp	r3, #0
  127ab8:	0a000002 	beq	127ac8 <udp_input+0x2bc>
    for_us = 1;
  127abc:	e3a03001 	mov	r3, #1
  127ac0:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  127ac4:	ea00000a 	b	127af4 <udp_input+0x2e8>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
  127ac8:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  127acc:	e2833004 	add	r3, r3, #4
  127ad0:	e5932000 	ldr	r2, [r3]
  127ad4:	e30e3d68 	movw	r3, #60776	; 0xed68
  127ad8:	e3403014 	movt	r3, #20
  127adc:	e5933014 	ldr	r3, [r3, #20]
  127ae0:	e1520003 	cmp	r2, r3
  127ae4:	03a03001 	moveq	r3, #1
  127ae8:	13a03000 	movne	r3, #0
  127aec:	e6ef3073 	uxtb	r3, r3
  127af0:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
  127af4:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
  127af8:	e3530000 	cmp	r3, #0
  127afc:	0a000079 	beq	127ce8 <udp_input+0x4dc>
          goto chkerr;
        }
      } else
#endif /* LWIP_UDPLITE */
      {
        if (udphdr->chksum != 0) {
  127b00:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  127b04:	e1d330b6 	ldrh	r3, [r3, #6]
  127b08:	e6ff3073 	uxth	r3, r3
  127b0c:	e3530000 	cmp	r3, #0
  127b10:	0a00000a 	beq	127b40 <udp_input+0x334>
          if (ip_chksum_pseudo(p, IP_PROTO_UDP, p->tot_len,
  127b14:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  127b18:	e1d320b8 	ldrh	r2, [r3, #8]
  127b1c:	e59f3244 	ldr	r3, [pc, #580]	; 127d68 <udp_input+0x55c>
  127b20:	e58d3000 	str	r3, [sp]
  127b24:	e59f3240 	ldr	r3, [pc, #576]	; 127d6c <udp_input+0x560>
  127b28:	e3a01011 	mov	r1, #17
  127b2c:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  127b30:	ebffc1ed 	bl	1182ec <ip_chksum_pseudo>
  127b34:	e1a03000 	mov	r3, r0
  127b38:	e3530000 	cmp	r3, #0
  127b3c:	1a00006d 	bne	127cf8 <udp_input+0x4ec>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
  127b40:	e3e01007 	mvn	r1, #7
  127b44:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  127b48:	ebffcbe1 	bl	11aad4 <pbuf_header>
  127b4c:	e1a03000 	mov	r3, r0
  127b50:	e3530000 	cmp	r3, #0
  127b54:	0a000018 	beq	127bbc <udp_input+0x3b0>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
  127b58:	e3080004 	movw	r0, #32772	; 0x8004
  127b5c:	e3400014 	movt	r0, #20
  127b60:	ebff6d6b 	bl	103114 <rt_kprintf>
  127b64:	e3001155 	movw	r1, #341	; 0x155
  127b68:	e3080018 	movw	r0, #32792	; 0x8018
  127b6c:	e3400014 	movt	r0, #20
  127b70:	ebff8be7 	bl	10ab14 <sys_arch_assert>
      UDP_STATS_INC(udp.drop);
  127b74:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  127b78:	e3403057 	movt	r3, #87	; 0x57
  127b7c:	e1d339ba 	ldrh	r3, [r3, #154]	; 0x9a
  127b80:	e2833001 	add	r3, r3, #1
  127b84:	e6ff2073 	uxth	r2, r3
  127b88:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  127b8c:	e3403057 	movt	r3, #87	; 0x57
  127b90:	e1c329ba 	strh	r2, [r3, #154]	; 0x9a
      MIB2_STATS_INC(mib2.udpinerrors);
  127b94:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  127b98:	e3403057 	movt	r3, #87	; 0x57
  127b9c:	e5933198 	ldr	r3, [r3, #408]	; 0x198
  127ba0:	e2832001 	add	r2, r3, #1
  127ba4:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  127ba8:	e3403057 	movt	r3, #87	; 0x57
  127bac:	e5832198 	str	r2, [r3, #408]	; 0x198
      pbuf_free(p);
  127bb0:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  127bb4:	ebffcbe4 	bl	11ab4c <pbuf_free>
      goto end;
  127bb8:	ea00004d 	b	127cf4 <udp_input+0x4e8>
    }

    if (pcb != NULL) {
  127bbc:	e51b3010 	ldr	r3, [fp, #-16]
  127bc0:	e3530000 	cmp	r3, #0
  127bc4:	0a000018 	beq	127c2c <udp_input+0x420>
      MIB2_STATS_INC(mib2.udpindatagrams);
  127bc8:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  127bcc:	e3403057 	movt	r3, #87	; 0x57
  127bd0:	e5933190 	ldr	r3, [r3, #400]	; 0x190
  127bd4:	e2832001 	add	r2, r3, #1
  127bd8:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  127bdc:	e3403057 	movt	r3, #87	; 0x57
  127be0:	e5832190 	str	r2, [r3, #400]	; 0x190
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
  127be4:	e51b3010 	ldr	r3, [fp, #-16]
  127be8:	e5933020 	ldr	r3, [r3, #32]
  127bec:	e3530000 	cmp	r3, #0
  127bf0:	0a00000a 	beq	127c20 <udp_input+0x414>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
  127bf4:	e51b3010 	ldr	r3, [fp, #-16]
  127bf8:	e5934020 	ldr	r4, [r3, #32]
  127bfc:	e51b3010 	ldr	r3, [fp, #-16]
  127c00:	e5930024 	ldr	r0, [r3, #36]	; 0x24
  127c04:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  127c08:	e58d3000 	str	r3, [sp]
  127c0c:	e59f3158 	ldr	r3, [pc, #344]	; 127d6c <udp_input+0x560>
  127c10:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  127c14:	e51b1010 	ldr	r1, [fp, #-16]
  127c18:	e12fff34 	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
  127c1c:	ea00004f 	b	127d60 <udp_input+0x554>
        pbuf_free(p);
  127c20:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  127c24:	ebffcbc8 	bl	11ab4c <pbuf_free>
        goto end;
  127c28:	ea000031 	b	127cf4 <udp_input+0x4e8>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
  127c2c:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  127c30:	e3530000 	cmp	r3, #0
  127c34:	1a000011 	bne	127c80 <udp_input+0x474>
  127c38:	e30e3d68 	movw	r3, #60776	; 0xed68
  127c3c:	e3403014 	movt	r3, #20
  127c40:	e5933014 	ldr	r3, [r3, #20]
  127c44:	e20330f0 	and	r3, r3, #240	; 0xf0
  127c48:	e35300e0 	cmp	r3, #224	; 0xe0
  127c4c:	0a00000b 	beq	127c80 <udp_input+0x474>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
  127c50:	e30e3d68 	movw	r3, #60776	; 0xed68
  127c54:	e3403014 	movt	r3, #20
  127c58:	e1d330bc 	ldrh	r3, [r3, #12]
  127c5c:	e2833008 	add	r3, r3, #8
  127c60:	e6ff3073 	uxth	r3, r3
  127c64:	e6bf3073 	sxth	r3, r3
  127c68:	e1a01003 	mov	r1, r3
  127c6c:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  127c70:	ebffcba6 	bl	11ab10 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
  127c74:	e3a01003 	mov	r1, #3
  127c78:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  127c7c:	eb001eec 	bl	12f834 <icmp_dest_unreach>
      UDP_STATS_INC(udp.proterr);
  127c80:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  127c84:	e3403057 	movt	r3, #87	; 0x57
  127c88:	e1d33ab4 	ldrh	r3, [r3, #164]	; 0xa4
  127c8c:	e2833001 	add	r3, r3, #1
  127c90:	e6ff2073 	uxth	r2, r3
  127c94:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  127c98:	e3403057 	movt	r3, #87	; 0x57
  127c9c:	e1c32ab4 	strh	r2, [r3, #164]	; 0xa4
      UDP_STATS_INC(udp.drop);
  127ca0:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  127ca4:	e3403057 	movt	r3, #87	; 0x57
  127ca8:	e1d339ba 	ldrh	r3, [r3, #154]	; 0x9a
  127cac:	e2833001 	add	r3, r3, #1
  127cb0:	e6ff2073 	uxth	r2, r3
  127cb4:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  127cb8:	e3403057 	movt	r3, #87	; 0x57
  127cbc:	e1c329ba 	strh	r2, [r3, #154]	; 0x9a
      MIB2_STATS_INC(mib2.udpnoports);
  127cc0:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  127cc4:	e3403057 	movt	r3, #87	; 0x57
  127cc8:	e5933194 	ldr	r3, [r3, #404]	; 0x194
  127ccc:	e2832001 	add	r2, r3, #1
  127cd0:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  127cd4:	e3403057 	movt	r3, #87	; 0x57
  127cd8:	e5832194 	str	r2, [r3, #404]	; 0x194
      pbuf_free(p);
  127cdc:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  127ce0:	ebffcb99 	bl	11ab4c <pbuf_free>
  return;
  127ce4:	ea00001d 	b	127d60 <udp_input+0x554>
    pbuf_free(p);
  127ce8:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  127cec:	ebffcb96 	bl	11ab4c <pbuf_free>
  return;
  127cf0:	ea00001a 	b	127d60 <udp_input+0x554>
  127cf4:	ea000019 	b	127d60 <udp_input+0x554>
            goto chkerr;
  127cf8:	e320f000 	nop	{0}
#if CHECKSUM_CHECK_UDP
chkerr:
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
              ("udp_input: UDP (or UDP Lite) datagram discarded due to failing checksum\n"));
  UDP_STATS_INC(udp.chkerr);
  127cfc:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  127d00:	e3403057 	movt	r3, #87	; 0x57
  127d04:	e1d339bc 	ldrh	r3, [r3, #156]	; 0x9c
  127d08:	e2833001 	add	r3, r3, #1
  127d0c:	e6ff2073 	uxth	r2, r3
  127d10:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  127d14:	e3403057 	movt	r3, #87	; 0x57
  127d18:	e1c329bc 	strh	r2, [r3, #156]	; 0x9c
  UDP_STATS_INC(udp.drop);
  127d1c:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  127d20:	e3403057 	movt	r3, #87	; 0x57
  127d24:	e1d339ba 	ldrh	r3, [r3, #154]	; 0x9a
  127d28:	e2833001 	add	r3, r3, #1
  127d2c:	e6ff2073 	uxth	r2, r3
  127d30:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  127d34:	e3403057 	movt	r3, #87	; 0x57
  127d38:	e1c329ba 	strh	r2, [r3, #154]	; 0x9a
  MIB2_STATS_INC(mib2.udpinerrors);
  127d3c:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  127d40:	e3403057 	movt	r3, #87	; 0x57
  127d44:	e5933198 	ldr	r3, [r3, #408]	; 0x198
  127d48:	e2832001 	add	r2, r3, #1
  127d4c:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  127d50:	e3403057 	movt	r3, #87	; 0x57
  127d54:	e5832198 	str	r2, [r3, #408]	; 0x198
  pbuf_free(p);
  127d58:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  127d5c:	ebffcb7a 	bl	11ab4c <pbuf_free>
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
  127d60:	e24bd008 	sub	sp, fp, #8
  127d64:	e8bd8810 	pop	{r4, fp, pc}
  127d68:	0014ed7c 	.word	0x0014ed7c
  127d6c:	0014ed78 	.word	0x0014ed78

00127d70 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
  127d70:	e92d4800 	push	{fp, lr}
  127d74:	e28db004 	add	fp, sp, #4
  127d78:	e24dd008 	sub	sp, sp, #8
  127d7c:	e50b0008 	str	r0, [fp, #-8]
  127d80:	e50b100c 	str	r1, [fp, #-12]
  if ((pcb == NULL) || IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
  127d84:	e51b3008 	ldr	r3, [fp, #-8]
  127d88:	e3530000 	cmp	r3, #0
  127d8c:	1a000001 	bne	127d98 <udp_send+0x28>
    return ERR_VAL;
  127d90:	e3e03005 	mvn	r3, #5
  127d94:	ea000007 	b	127db8 <udp_send+0x48>
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
  127d98:	e51b3008 	ldr	r3, [fp, #-8]
  127d9c:	e2832004 	add	r2, r3, #4
  127da0:	e51b3008 	ldr	r3, [fp, #-8]
  127da4:	e1d331b4 	ldrh	r3, [r3, #20]
  127da8:	e51b100c 	ldr	r1, [fp, #-12]
  127dac:	e51b0008 	ldr	r0, [fp, #-8]
  127db0:	eb000003 	bl	127dc4 <udp_sendto>
  127db4:	e1a03000 	mov	r3, r0
}
  127db8:	e1a00003 	mov	r0, r3
  127dbc:	e24bd004 	sub	sp, fp, #4
  127dc0:	e8bd8800 	pop	{fp, pc}

00127dc4 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port)
{
  127dc4:	e92d4800 	push	{fp, lr}
  127dc8:	e28db004 	add	fp, sp, #4
  127dcc:	e24dd020 	sub	sp, sp, #32
  127dd0:	e50b0010 	str	r0, [fp, #-16]
  127dd4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  127dd8:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  127ddc:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
udp_sendto_chksum(struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *dst_ip,
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;
  const ip_addr_t *dst_ip_route = dst_ip;
  127de0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  127de4:	e50b3008 	str	r3, [fp, #-8]

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
  127de8:	e51b3010 	ldr	r3, [fp, #-16]
  127dec:	e3530000 	cmp	r3, #0
  127df0:	0a000002 	beq	127e00 <udp_sendto+0x3c>
  127df4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  127df8:	e3530000 	cmp	r3, #0
  127dfc:	1a000001 	bne	127e08 <udp_sendto+0x44>
    return ERR_VAL;
  127e00:	e3e03005 	mvn	r3, #5
  127e04:	ea00002b 	b	127eb8 <udp_sendto+0xf4>
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

#if LWIP_IPV6 || (LWIP_IPV4 && LWIP_MULTICAST_TX_OPTIONS)
  if (ip_addr_ismulticast(dst_ip_route)) {
  127e08:	e51b3008 	ldr	r3, [fp, #-8]
  127e0c:	e5933000 	ldr	r3, [r3]
  127e10:	e20330f0 	and	r3, r3, #240	; 0xf0
  127e14:	e35300e0 	cmp	r3, #224	; 0xe0
  127e18:	1a00000d 	bne	127e54 <udp_sendto+0x90>
#if LWIP_IPV4 && LWIP_MULTICAST_TX_OPTIONS
      /* IPv4 does not use source-based routing by default, so we use an
         administratively selected interface for multicast by default.
         However, this can be overridden by setting an interface address
         in pcb->multicast_ip that is used for routing. */
      if (!ip_addr_isany_val(pcb->multicast_ip) &&
  127e1c:	e51b3010 	ldr	r3, [fp, #-16]
  127e20:	e5933018 	ldr	r3, [r3, #24]
  127e24:	e3530000 	cmp	r3, #0
  127e28:	0a000009 	beq	127e54 <udp_sendto+0x90>
          !ip4_addr_cmp(ip_2_ip4(&pcb->multicast_ip), IP4_ADDR_BROADCAST)) {
  127e2c:	e51b3010 	ldr	r3, [fp, #-16]
  127e30:	e5932018 	ldr	r2, [r3, #24]
  127e34:	e3083e40 	movw	r3, #36416	; 0x8e40
  127e38:	e3403014 	movt	r3, #20
  127e3c:	e5933000 	ldr	r3, [r3]
      if (!ip_addr_isany_val(pcb->multicast_ip) &&
  127e40:	e1520003 	cmp	r2, r3
  127e44:	0a000002 	beq	127e54 <udp_sendto+0x90>
        dst_ip_route = &pcb->multicast_ip;
  127e48:	e51b3010 	ldr	r3, [fp, #-16]
  127e4c:	e2833018 	add	r3, r3, #24
  127e50:	e50b3008 	str	r3, [fp, #-8]
  /* find the outgoing network interface for this packet */
  if(IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    /* Don't call ip_route() with IP_ANY_TYPE */
    netif = ip_route(IP46_ADDR_ANY(IP_GET_TYPE(dst_ip_route)), dst_ip_route);
  } else {
    netif = ip_route(&pcb->local_ip, dst_ip_route);
  127e54:	e51b0008 	ldr	r0, [fp, #-8]
  127e58:	eb0023b7 	bl	130d3c <ip4_route>
  127e5c:	e50b000c 	str	r0, [fp, #-12]
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
  127e60:	e51b300c 	ldr	r3, [fp, #-12]
  127e64:	e3530000 	cmp	r3, #0
  127e68:	1a000009 	bne	127e94 <udp_sendto+0xd0>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
  127e6c:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  127e70:	e3403057 	movt	r3, #87	; 0x57
  127e74:	e1d33ab2 	ldrh	r3, [r3, #162]	; 0xa2
  127e78:	e2833001 	add	r3, r3, #1
  127e7c:	e6ff2073 	uxth	r2, r3
  127e80:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  127e84:	e3403057 	movt	r3, #87	; 0x57
  127e88:	e1c32ab2 	strh	r2, [r3, #162]	; 0xa2
    return ERR_RTE;
  127e8c:	e3e03003 	mvn	r3, #3
  127e90:	ea000008 	b	127eb8 <udp_sendto+0xf4>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
  127e94:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
  127e98:	e51b300c 	ldr	r3, [fp, #-12]
  127e9c:	e58d3000 	str	r3, [sp]
  127ea0:	e1a03002 	mov	r3, r2
  127ea4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  127ea8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  127eac:	e51b0010 	ldr	r0, [fp, #-16]
  127eb0:	eb000003 	bl	127ec4 <udp_sendto_if>
  127eb4:	e1a03000 	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
  127eb8:	e1a00003 	mov	r0, r3
  127ebc:	e24bd004 	sub	sp, fp, #4
  127ec0:	e8bd8800 	pop	{fp, pc}

00127ec4 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
  127ec4:	e92d4800 	push	{fp, lr}
  127ec8:	e28db004 	add	fp, sp, #4
  127ecc:	e24dd020 	sub	sp, sp, #32
  127ed0:	e50b0010 	str	r0, [fp, #-16]
  127ed4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  127ed8:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  127edc:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
  127ee0:	e51b3010 	ldr	r3, [fp, #-16]
  127ee4:	e3530000 	cmp	r3, #0
  127ee8:	0a000002 	beq	127ef8 <udp_sendto_if+0x34>
  127eec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  127ef0:	e3530000 	cmp	r3, #0
  127ef4:	1a000001 	bne	127f00 <udp_sendto_if+0x3c>
    return ERR_VAL;
  127ef8:	e3e03005 	mvn	r3, #5
  127efc:	ea000025 	b	127f98 <udp_sendto_if+0xd4>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
  127f00:	e51b3010 	ldr	r3, [fp, #-16]
  127f04:	e3530000 	cmp	r3, #0
  127f08:	0a000008 	beq	127f30 <udp_sendto_if+0x6c>
  127f0c:	e51b3010 	ldr	r3, [fp, #-16]
  127f10:	e5933000 	ldr	r3, [r3]
  127f14:	e3530000 	cmp	r3, #0
  127f18:	0a000004 	beq	127f30 <udp_sendto_if+0x6c>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
  127f1c:	e51b3010 	ldr	r3, [fp, #-16]
  127f20:	e5933000 	ldr	r3, [r3]
  127f24:	e20330f0 	and	r3, r3, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
  127f28:	e35300e0 	cmp	r3, #224	; 0xe0
  127f2c:	1a000003 	bne	127f40 <udp_sendto_if+0x7c>
    /* if the local_ip is any or multicast
     * use the outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
  127f30:	e59b3004 	ldr	r3, [fp, #4]
  127f34:	e2833004 	add	r3, r3, #4
  127f38:	e50b3008 	str	r3, [fp, #-8]
  127f3c:	ea00000a 	b	127f6c <udp_sendto_if+0xa8>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
  127f40:	e51b3010 	ldr	r3, [fp, #-16]
  127f44:	e5932000 	ldr	r2, [r3]
  127f48:	e59b3004 	ldr	r3, [fp, #4]
  127f4c:	e2833004 	add	r3, r3, #4
  127f50:	e5933000 	ldr	r3, [r3]
  127f54:	e1520003 	cmp	r2, r3
  127f58:	0a000001 	beq	127f64 <udp_sendto_if+0xa0>
      /* local_ip doesn't match, drop the packet */
      return ERR_RTE;
  127f5c:	e3e03003 	mvn	r3, #3
  127f60:	ea00000c 	b	127f98 <udp_sendto_if+0xd4>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &pcb->local_ip;
  127f64:	e51b3010 	ldr	r3, [fp, #-16]
  127f68:	e50b3008 	str	r3, [fp, #-8]
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
  127f6c:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
  127f70:	e51b3008 	ldr	r3, [fp, #-8]
  127f74:	e58d3004 	str	r3, [sp, #4]
  127f78:	e59b3004 	ldr	r3, [fp, #4]
  127f7c:	e58d3000 	str	r3, [sp]
  127f80:	e1a03002 	mov	r3, r2
  127f84:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  127f88:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  127f8c:	e51b0010 	ldr	r0, [fp, #-16]
  127f90:	eb000003 	bl	127fa4 <udp_sendto_if_src>
  127f94:	e1a03000 	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
  127f98:	e1a00003 	mov	r0, r3
  127f9c:	e24bd004 	sub	sp, fp, #4
  127fa0:	e8bd8800 	pop	{fp, pc}

00127fa4 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
  127fa4:	e92d4800 	push	{fp, lr}
  127fa8:	e28db004 	add	fp, sp, #4
  127fac:	e24dd030 	sub	sp, sp, #48	; 0x30
  127fb0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  127fb4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  127fb8:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  127fbc:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
  127fc0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  127fc4:	e3530000 	cmp	r3, #0
  127fc8:	0a000002 	beq	127fd8 <udp_sendto_if_src+0x34>
  127fcc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  127fd0:	e3530000 	cmp	r3, #0
  127fd4:	1a000001 	bne	127fe0 <udp_sendto_if_src+0x3c>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
  127fd8:	e3e03005 	mvn	r3, #5
  127fdc:	ea0000be 	b	1282dc <udp_sendto_if_src+0x338>
  }

#if LWIP_IPV4 && IP_SOF_BROADCAST
  /* broadcast filter? */
  if (!ip_get_option(pcb, SOF_BROADCAST) &&
  127fe0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  127fe4:	e5d33008 	ldrb	r3, [r3, #8]
  127fe8:	e2033020 	and	r3, r3, #32
  127fec:	e3530000 	cmp	r3, #0
  127ff0:	1a000009 	bne	12801c <udp_sendto_if_src+0x78>
#if LWIP_IPV6
      IP_IS_V4(dst_ip) &&
#endif /* LWIP_IPV6 */
      ip_addr_isbroadcast(dst_ip, netif)) {
  127ff4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  127ff8:	e5933000 	ldr	r3, [r3]
  127ffc:	e59b1004 	ldr	r1, [fp, #4]
  128000:	e1a00003 	mov	r0, r3
  128004:	eb00282b 	bl	1320b8 <ip4_addr_isbroadcast_u32>
  128008:	e1a03000 	mov	r3, r0
  if (!ip_get_option(pcb, SOF_BROADCAST) &&
  12800c:	e3530000 	cmp	r3, #0
  128010:	0a000001 	beq	12801c <udp_sendto_if_src+0x78>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("udp_sendto_if: SOF_BROADCAST not enabled on pcb %p\n", (void *)pcb));
    return ERR_VAL;
  128014:	e3e03005 	mvn	r3, #5
  128018:	ea0000af 	b	1282dc <udp_sendto_if_src+0x338>
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
  12801c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128020:	e1d331b2 	ldrh	r3, [r3, #18]
  128024:	e3530000 	cmp	r3, #0
  128028:	1a00000c 	bne	128060 <udp_sendto_if_src+0xbc>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
  12802c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  128030:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128034:	e1d331b2 	ldrh	r3, [r3, #18]
  128038:	e1a02003 	mov	r2, r3
  12803c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  128040:	eb0000a8 	bl	1282e8 <udp_bind>
  128044:	e1a03000 	mov	r3, r0
  128048:	e54b300b 	strb	r3, [fp, #-11]
    if (err != ERR_OK) {
  12804c:	e15b30db 	ldrsb	r3, [fp, #-11]
  128050:	e3530000 	cmp	r3, #0
  128054:	0a000001 	beq	128060 <udp_sendto_if_src+0xbc>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
  128058:	e15b30db 	ldrsb	r3, [fp, #-11]
  12805c:	ea00009e 	b	1282dc <udp_sendto_if_src+0x338>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
  128060:	e3a01008 	mov	r1, #8
  128064:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  128068:	ebffca99 	bl	11aad4 <pbuf_header>
  12806c:	e1a03000 	mov	r3, r0
  128070:	e3530000 	cmp	r3, #0
  128074:	0a000011 	beq	1280c0 <udp_sendto_if_src+0x11c>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
  128078:	e3a02000 	mov	r2, #0
  12807c:	e3a01008 	mov	r1, #8
  128080:	e3a00001 	mov	r0, #1
  128084:	ebffc7a9 	bl	119f30 <pbuf_alloc>
  128088:	e50b0008 	str	r0, [fp, #-8]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
  12808c:	e51b3008 	ldr	r3, [fp, #-8]
  128090:	e3530000 	cmp	r3, #0
  128094:	1a000001 	bne	1280a0 <udp_sendto_if_src+0xfc>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
  128098:	e3e03000 	mvn	r3, #0
  12809c:	ea00008e 	b	1282dc <udp_sendto_if_src+0x338>
    }
    if (p->tot_len != 0) {
  1280a0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1280a4:	e1d330b8 	ldrh	r3, [r3, #8]
  1280a8:	e3530000 	cmp	r3, #0
  1280ac:	0a000005 	beq	1280c8 <udp_sendto_if_src+0x124>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
  1280b0:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1280b4:	e51b0008 	ldr	r0, [fp, #-8]
  1280b8:	ebffcba4 	bl	11af50 <pbuf_chain>
  1280bc:	ea000001 	b	1280c8 <udp_sendto_if_src+0x124>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
  1280c0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1280c4:	e50b3008 	str	r3, [fp, #-8]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
  1280c8:	e51b3008 	ldr	r3, [fp, #-8]
  1280cc:	e1d330ba 	ldrh	r3, [r3, #10]
  1280d0:	e3530007 	cmp	r3, #7
  1280d4:	8a000006 	bhi	1280f4 <udp_sendto_if_src+0x150>
  1280d8:	e3080044 	movw	r0, #32836	; 0x8044
  1280dc:	e3400014 	movt	r0, #20
  1280e0:	ebff6c0b 	bl	103114 <rt_kprintf>
  1280e4:	e3a01fb7 	mov	r1, #732	; 0x2dc
  1280e8:	e3080018 	movw	r0, #32792	; 0x8018
  1280ec:	e3400014 	movt	r0, #20
  1280f0:	ebff8a87 	bl	10ab14 <sys_arch_assert>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
  1280f4:	e51b3008 	ldr	r3, [fp, #-8]
  1280f8:	e5933004 	ldr	r3, [r3, #4]
  1280fc:	e50b3010 	str	r3, [fp, #-16]
  udphdr->src = lwip_htons(pcb->local_port);
  128100:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128104:	e1d331b2 	ldrh	r3, [r3, #18]
  128108:	e1a00003 	mov	r0, r3
  12810c:	ebffb857 	bl	116270 <lwip_htons>
  128110:	e1a03000 	mov	r3, r0
  128114:	e1a02003 	mov	r2, r3
  128118:	e51b3010 	ldr	r3, [fp, #-16]
  12811c:	e1c320b0 	strh	r2, [r3]
  udphdr->dest = lwip_htons(dst_port);
  128120:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  128124:	e1a00003 	mov	r0, r3
  128128:	ebffb850 	bl	116270 <lwip_htons>
  12812c:	e1a03000 	mov	r3, r0
  128130:	e1a02003 	mov	r2, r3
  128134:	e51b3010 	ldr	r3, [fp, #-16]
  128138:	e1c320b2 	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
  12813c:	e51b3010 	ldr	r3, [fp, #-16]
  128140:	e3a02000 	mov	r2, #0
  128144:	e5c32006 	strb	r2, [r3, #6]
  128148:	e3a02000 	mov	r2, #0
  12814c:	e5c32007 	strb	r2, [r3, #7]

  /* Multicast Loop? */
#if (LWIP_IPV4 && LWIP_MULTICAST_TX_OPTIONS) || (LWIP_IPV6 && LWIP_IPV6_MLD)
  if (((pcb->flags & UDP_FLAGS_MULTICAST_LOOP) != 0) && ip_addr_ismulticast(dst_ip)) {
  128150:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128154:	e5d33010 	ldrb	r3, [r3, #16]
  128158:	e2033008 	and	r3, r3, #8
  12815c:	e3530000 	cmp	r3, #0
  128160:	0a00000a 	beq	128190 <udp_sendto_if_src+0x1ec>
  128164:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  128168:	e5933000 	ldr	r3, [r3]
  12816c:	e20330f0 	and	r3, r3, #240	; 0xf0
  128170:	e35300e0 	cmp	r3, #224	; 0xe0
  128174:	1a000005 	bne	128190 <udp_sendto_if_src+0x1ec>
    q->flags |= PBUF_FLAG_MCASTLOOP;
  128178:	e51b3008 	ldr	r3, [fp, #-8]
  12817c:	e5d3300d 	ldrb	r3, [r3, #13]
  128180:	e3833004 	orr	r3, r3, #4
  128184:	e6ef2073 	uxtb	r2, r3
  128188:	e51b3008 	ldr	r3, [fp, #-8]
  12818c:	e5c3200d 	strb	r2, [r3, #13]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
  128190:	e51b3008 	ldr	r3, [fp, #-8]
  128194:	e1d330b8 	ldrh	r3, [r3, #8]
  128198:	e1a00003 	mov	r0, r3
  12819c:	ebffb833 	bl	116270 <lwip_htons>
  1281a0:	e1a03000 	mov	r3, r0
  1281a4:	e1a02003 	mov	r2, r3
  1281a8:	e51b3010 	ldr	r3, [fp, #-16]
  1281ac:	e1c320b4 	strh	r2, [r3, #4]
    /* calculate checksum */
#if CHECKSUM_GEN_UDP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_UDP) {
      /* Checksum is mandatory over IPv6. */
      if (IP_IS_V6(dst_ip) || (pcb->flags & UDP_FLAGS_NOCHKSUM) == 0) {
  1281b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1281b4:	e5d33010 	ldrb	r3, [r3, #16]
  1281b8:	e2033001 	and	r3, r3, #1
  1281bc:	e3530000 	cmp	r3, #0
  1281c0:	1a000011 	bne	12820c <udp_sendto_if_src+0x268>
          acc = udpchksum + (u16_t)~(chksum);
          udpchksum = FOLD_U32T(acc);
        } else
#endif /* LWIP_CHECKSUM_ON_COPY */
        {
          udpchksum = ip_chksum_pseudo(q, IP_PROTO_UDP, q->tot_len,
  1281c4:	e51b3008 	ldr	r3, [fp, #-8]
  1281c8:	e1d320b8 	ldrh	r2, [r3, #8]
  1281cc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1281d0:	e58d3000 	str	r3, [sp]
  1281d4:	e59b3008 	ldr	r3, [fp, #8]
  1281d8:	e3a01011 	mov	r1, #17
  1281dc:	e51b0008 	ldr	r0, [fp, #-8]
  1281e0:	ebffc041 	bl	1182ec <ip_chksum_pseudo>
  1281e4:	e1a03000 	mov	r3, r0
  1281e8:	e14b30ba 	strh	r3, [fp, #-10]
            src_ip, dst_ip);
        }

        /* chksum zero must become 0xffff, as zero means 'no checksum' */
        if (udpchksum == 0x0000) {
  1281ec:	e15b30ba 	ldrh	r3, [fp, #-10]
  1281f0:	e3530000 	cmp	r3, #0
  1281f4:	1a000001 	bne	128200 <udp_sendto_if_src+0x25c>
          udpchksum = 0xffff;
  1281f8:	e3e03000 	mvn	r3, #0
  1281fc:	e14b30ba 	strh	r3, [fp, #-10]
        }
        udphdr->chksum = udpchksum;
  128200:	e51b3010 	ldr	r3, [fp, #-16]
  128204:	e15b20ba 	ldrh	r2, [fp, #-10]
  128208:	e1c320b6 	strh	r2, [r3, #6]
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
  12820c:	e3a03011 	mov	r3, #17
  128210:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  }

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
  128214:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  128218:	e5933000 	ldr	r3, [r3]
  12821c:	e20330f0 	and	r3, r3, #240	; 0xf0
  128220:	e35300e0 	cmp	r3, #224	; 0xe0
  128224:	1a000002 	bne	128234 <udp_sendto_if_src+0x290>
  128228:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12822c:	e5d3301c 	ldrb	r3, [r3, #28]
  128230:	ea000001 	b	12823c <udp_sendto_if_src+0x298>
  128234:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128238:	e5d3300a 	ldrb	r3, [r3, #10]
  12823c:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
  128240:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128244:	e5d33009 	ldrb	r3, [r3, #9]
  128248:	e55b1012 	ldrb	r1, [fp, #-18]	; 0xffffffee
  12824c:	e59b2004 	ldr	r2, [fp, #4]
  128250:	e58d2008 	str	r2, [sp, #8]
  128254:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  128258:	e58d2004 	str	r2, [sp, #4]
  12825c:	e58d3000 	str	r3, [sp]
  128260:	e1a03001 	mov	r3, r1
  128264:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  128268:	e59b1008 	ldr	r1, [fp, #8]
  12826c:	e51b0008 	ldr	r0, [fp, #-8]
  128270:	eb0025cf 	bl	1319b4 <ip4_output_if_src>
  128274:	e1a03000 	mov	r3, r0
  128278:	e54b300b 	strb	r3, [fp, #-11]
  NETIF_SET_HWADDRHINT(netif, NULL);

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);
  12827c:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  128280:	e3403057 	movt	r3, #87	; 0x57
  128284:	e593319c 	ldr	r3, [r3, #412]	; 0x19c
  128288:	e2832001 	add	r2, r3, #1
  12828c:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  128290:	e3403057 	movt	r3, #87	; 0x57
  128294:	e583219c 	str	r2, [r3, #412]	; 0x19c

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
  128298:	e51b2008 	ldr	r2, [fp, #-8]
  12829c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1282a0:	e1520003 	cmp	r2, r3
  1282a4:	0a000003 	beq	1282b8 <udp_sendto_if_src+0x314>
    /* free the header pbuf */
    pbuf_free(q);
  1282a8:	e51b0008 	ldr	r0, [fp, #-8]
  1282ac:	ebffca26 	bl	11ab4c <pbuf_free>
    q = NULL;
  1282b0:	e3a03000 	mov	r3, #0
  1282b4:	e50b3008 	str	r3, [fp, #-8]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  1282b8:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  1282bc:	e3403057 	movt	r3, #87	; 0x57
  1282c0:	e1d339b4 	ldrh	r3, [r3, #148]	; 0x94
  1282c4:	e2833001 	add	r3, r3, #1
  1282c8:	e6ff2073 	uxth	r2, r3
  1282cc:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  1282d0:	e3403057 	movt	r3, #87	; 0x57
  1282d4:	e1c329b4 	strh	r2, [r3, #148]	; 0x94
  return err;
  1282d8:	e15b30db 	ldrsb	r3, [fp, #-11]
}
  1282dc:	e1a00003 	mov	r0, r3
  1282e0:	e24bd004 	sub	sp, fp, #4
  1282e4:	e8bd8800 	pop	{fp, pc}

001282e8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
  1282e8:	e92d4800 	push	{fp, lr}
  1282ec:	e28db004 	add	fp, sp, #4
  1282f0:	e24dd018 	sub	sp, sp, #24
  1282f4:	e50b0010 	str	r0, [fp, #-16]
  1282f8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1282fc:	e1a03002 	mov	r3, r2
  128300:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
  128304:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128308:	e3530000 	cmp	r3, #0
  12830c:	1a000002 	bne	12831c <udp_bind+0x34>
    ipaddr = IP4_ADDR_ANY;
  128310:	e3083e3c 	movw	r3, #36412	; 0x8e3c
  128314:	e3403014 	movt	r3, #20
  128318:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
  12831c:	e51b3010 	ldr	r3, [fp, #-16]
  128320:	e3530000 	cmp	r3, #0
  128324:	0a000002 	beq	128334 <udp_bind+0x4c>
  128328:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12832c:	e3530000 	cmp	r3, #0
  128330:	1a000001 	bne	12833c <udp_bind+0x54>
    return ERR_VAL;
  128334:	e3e03005 	mvn	r3, #5
  128338:	ea00005d 	b	1284b4 <udp_bind+0x1cc>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  12833c:	e3a03000 	mov	r3, #0
  128340:	e54b3009 	strb	r3, [fp, #-9]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  128344:	e30531c8 	movw	r3, #20936	; 0x51c8
  128348:	e3403057 	movt	r3, #87	; 0x57
  12834c:	e5933000 	ldr	r3, [r3]
  128350:	e50b3008 	str	r3, [fp, #-8]
  128354:	ea000009 	b	128380 <udp_bind+0x98>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
  128358:	e51b2010 	ldr	r2, [fp, #-16]
  12835c:	e51b3008 	ldr	r3, [fp, #-8]
  128360:	e1520003 	cmp	r2, r3
  128364:	1a000002 	bne	128374 <udp_bind+0x8c>
      rebind = 1;
  128368:	e3a03001 	mov	r3, #1
  12836c:	e54b3009 	strb	r3, [fp, #-9]
      break;
  128370:	ea000005 	b	12838c <udp_bind+0xa4>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  128374:	e51b3008 	ldr	r3, [fp, #-8]
  128378:	e593300c 	ldr	r3, [r3, #12]
  12837c:	e50b3008 	str	r3, [fp, #-8]
  128380:	e51b3008 	ldr	r3, [fp, #-8]
  128384:	e3530000 	cmp	r3, #0
  128388:	1afffff2 	bne	128358 <udp_bind+0x70>
    }
  }

  /* no port specified? */
  if (port == 0) {
  12838c:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  128390:	e3530000 	cmp	r3, #0
  128394:	1a000007 	bne	1283b8 <udp_bind+0xd0>
    port = udp_new_port();
  128398:	ebfffca8 	bl	127640 <udp_new_port>
  12839c:	e1a03000 	mov	r3, r0
  1283a0:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
    if (port == 0) {
  1283a4:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  1283a8:	e3530000 	cmp	r3, #0
  1283ac:	1a000027 	bne	128450 <udp_bind+0x168>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
  1283b0:	e3e03007 	mvn	r3, #7
  1283b4:	ea00003e 	b	1284b4 <udp_bind+0x1cc>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  1283b8:	e30531c8 	movw	r3, #20936	; 0x51c8
  1283bc:	e3403057 	movt	r3, #87	; 0x57
  1283c0:	e5933000 	ldr	r3, [r3]
  1283c4:	e50b3008 	str	r3, [fp, #-8]
  1283c8:	ea00001d 	b	128444 <udp_bind+0x15c>
      if (pcb != ipcb) {
  1283cc:	e51b2010 	ldr	r2, [fp, #-16]
  1283d0:	e51b3008 	ldr	r3, [fp, #-8]
  1283d4:	e1520003 	cmp	r2, r3
  1283d8:	0a000016 	beq	128438 <udp_bind+0x150>
      /* By default, we don't allow to bind to a port that any other udp
         PCB is already bound to, unless *all* PCBs with that port have tha
         REUSEADDR flag set. */
#if SO_REUSE
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
  1283dc:	e51b3010 	ldr	r3, [fp, #-16]
  1283e0:	e5d33008 	ldrb	r3, [r3, #8]
  1283e4:	e2033004 	and	r3, r3, #4
  1283e8:	e3530000 	cmp	r3, #0
  1283ec:	0a000004 	beq	128404 <udp_bind+0x11c>
            !ip_get_option(ipcb, SOF_REUSEADDR))
  1283f0:	e51b3008 	ldr	r3, [fp, #-8]
  1283f4:	e5d33008 	ldrb	r3, [r3, #8]
  1283f8:	e2033004 	and	r3, r3, #4
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
  1283fc:	e3530000 	cmp	r3, #0
  128400:	1a00000c 	bne	128438 <udp_bind+0x150>
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
  128404:	e51b3008 	ldr	r3, [fp, #-8]
  128408:	e1d331b2 	ldrh	r3, [r3, #18]
  12840c:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  128410:	e1520003 	cmp	r2, r3
  128414:	1a000007 	bne	128438 <udp_bind+0x150>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
  128418:	e51b3008 	ldr	r3, [fp, #-8]
  12841c:	e5932000 	ldr	r2, [r3]
  128420:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128424:	e5933000 	ldr	r3, [r3]
          if ((ipcb->local_port == port) &&
  128428:	e1520003 	cmp	r2, r3
  12842c:	1a000001 	bne	128438 <udp_bind+0x150>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
  128430:	e3e03007 	mvn	r3, #7
  128434:	ea00001e 	b	1284b4 <udp_bind+0x1cc>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  128438:	e51b3008 	ldr	r3, [fp, #-8]
  12843c:	e593300c 	ldr	r3, [r3, #12]
  128440:	e50b3008 	str	r3, [fp, #-8]
  128444:	e51b3008 	ldr	r3, [fp, #-8]
  128448:	e3530000 	cmp	r3, #0
  12844c:	1affffde 	bne	1283cc <udp_bind+0xe4>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
  128450:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128454:	e3530000 	cmp	r3, #0
  128458:	0a000002 	beq	128468 <udp_bind+0x180>
  12845c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128460:	e5933000 	ldr	r3, [r3]
  128464:	ea000000 	b	12846c <udp_bind+0x184>
  128468:	e3a03000 	mov	r3, #0
  12846c:	e51b2010 	ldr	r2, [fp, #-16]
  128470:	e5823000 	str	r3, [r2]

  pcb->local_port = port;
  128474:	e51b3010 	ldr	r3, [fp, #-16]
  128478:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  12847c:	e1c321b2 	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
  128480:	e55b3009 	ldrb	r3, [fp, #-9]
  128484:	e3530000 	cmp	r3, #0
  128488:	1a000008 	bne	1284b0 <udp_bind+0x1c8>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
  12848c:	e30531c8 	movw	r3, #20936	; 0x51c8
  128490:	e3403057 	movt	r3, #87	; 0x57
  128494:	e5932000 	ldr	r2, [r3]
  128498:	e51b3010 	ldr	r3, [fp, #-16]
  12849c:	e583200c 	str	r2, [r3, #12]
    udp_pcbs = pcb;
  1284a0:	e30531c8 	movw	r3, #20936	; 0x51c8
  1284a4:	e3403057 	movt	r3, #87	; 0x57
  1284a8:	e51b2010 	ldr	r2, [fp, #-16]
  1284ac:	e5832000 	str	r2, [r3]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
  1284b0:	e3a03000 	mov	r3, #0
}
  1284b4:	e1a00003 	mov	r0, r3
  1284b8:	e24bd004 	sub	sp, fp, #4
  1284bc:	e8bd8800 	pop	{fp, pc}

001284c0 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
  1284c0:	e92d4800 	push	{fp, lr}
  1284c4:	e28db004 	add	fp, sp, #4
  1284c8:	e24dd018 	sub	sp, sp, #24
  1284cc:	e50b0010 	str	r0, [fp, #-16]
  1284d0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1284d4:	e1a03002 	mov	r3, r2
  1284d8:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
  1284dc:	e51b3010 	ldr	r3, [fp, #-16]
  1284e0:	e3530000 	cmp	r3, #0
  1284e4:	0a000002 	beq	1284f4 <udp_connect+0x34>
  1284e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1284ec:	e3530000 	cmp	r3, #0
  1284f0:	1a000001 	bne	1284fc <udp_connect+0x3c>
    return ERR_VAL;
  1284f4:	e3e03005 	mvn	r3, #5
  1284f8:	ea00003d 	b	1285f4 <udp_connect+0x134>
  }

  if (pcb->local_port == 0) {
  1284fc:	e51b3010 	ldr	r3, [fp, #-16]
  128500:	e1d331b2 	ldrh	r3, [r3, #18]
  128504:	e3530000 	cmp	r3, #0
  128508:	1a00000c 	bne	128540 <udp_connect+0x80>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
  12850c:	e51b1010 	ldr	r1, [fp, #-16]
  128510:	e51b3010 	ldr	r3, [fp, #-16]
  128514:	e1d331b2 	ldrh	r3, [r3, #18]
  128518:	e1a02003 	mov	r2, r3
  12851c:	e51b0010 	ldr	r0, [fp, #-16]
  128520:	ebffff70 	bl	1282e8 <udp_bind>
  128524:	e1a03000 	mov	r3, r0
  128528:	e54b3009 	strb	r3, [fp, #-9]
    if (err != ERR_OK) {
  12852c:	e15b30d9 	ldrsb	r3, [fp, #-9]
  128530:	e3530000 	cmp	r3, #0
  128534:	0a000001 	beq	128540 <udp_connect+0x80>
      return err;
  128538:	e15b30d9 	ldrsb	r3, [fp, #-9]
  12853c:	ea00002c 	b	1285f4 <udp_connect+0x134>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
  128540:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128544:	e3530000 	cmp	r3, #0
  128548:	0a000002 	beq	128558 <udp_connect+0x98>
  12854c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128550:	e5933000 	ldr	r3, [r3]
  128554:	ea000000 	b	12855c <udp_connect+0x9c>
  128558:	e3a03000 	mov	r3, #0
  12855c:	e51b2010 	ldr	r2, [fp, #-16]
  128560:	e5823004 	str	r3, [r2, #4]
  pcb->remote_port = port;
  128564:	e51b3010 	ldr	r3, [fp, #-16]
  128568:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  12856c:	e1c321b4 	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
  128570:	e51b3010 	ldr	r3, [fp, #-16]
  128574:	e5d33010 	ldrb	r3, [r3, #16]
  128578:	e3833004 	orr	r3, r3, #4
  12857c:	e6ef2073 	uxtb	r2, r3
  128580:	e51b3010 	ldr	r3, [fp, #-16]
  128584:	e5c32010 	strb	r2, [r3, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  128588:	e30531c8 	movw	r3, #20936	; 0x51c8
  12858c:	e3403057 	movt	r3, #87	; 0x57
  128590:	e5933000 	ldr	r3, [r3]
  128594:	e50b3008 	str	r3, [fp, #-8]
  128598:	ea000008 	b	1285c0 <udp_connect+0x100>
    if (pcb == ipcb) {
  12859c:	e51b2010 	ldr	r2, [fp, #-16]
  1285a0:	e51b3008 	ldr	r3, [fp, #-8]
  1285a4:	e1520003 	cmp	r2, r3
  1285a8:	1a000001 	bne	1285b4 <udp_connect+0xf4>
      /* already on the list, just return */
      return ERR_OK;
  1285ac:	e3a03000 	mov	r3, #0
  1285b0:	ea00000f 	b	1285f4 <udp_connect+0x134>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  1285b4:	e51b3008 	ldr	r3, [fp, #-8]
  1285b8:	e593300c 	ldr	r3, [r3, #12]
  1285bc:	e50b3008 	str	r3, [fp, #-8]
  1285c0:	e51b3008 	ldr	r3, [fp, #-8]
  1285c4:	e3530000 	cmp	r3, #0
  1285c8:	1afffff3 	bne	12859c <udp_connect+0xdc>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
  1285cc:	e30531c8 	movw	r3, #20936	; 0x51c8
  1285d0:	e3403057 	movt	r3, #87	; 0x57
  1285d4:	e5932000 	ldr	r2, [r3]
  1285d8:	e51b3010 	ldr	r3, [fp, #-16]
  1285dc:	e583200c 	str	r2, [r3, #12]
  udp_pcbs = pcb;
  1285e0:	e30531c8 	movw	r3, #20936	; 0x51c8
  1285e4:	e3403057 	movt	r3, #87	; 0x57
  1285e8:	e51b2010 	ldr	r2, [fp, #-16]
  1285ec:	e5832000 	str	r2, [r3]
  return ERR_OK;
  1285f0:	e3a03000 	mov	r3, #0
}
  1285f4:	e1a00003 	mov	r0, r3
  1285f8:	e24bd004 	sub	sp, fp, #4
  1285fc:	e8bd8800 	pop	{fp, pc}

00128600 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
  128600:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  128604:	e28db000 	add	fp, sp, #0
  128608:	e24dd00c 	sub	sp, sp, #12
  12860c:	e50b0008 	str	r0, [fp, #-8]
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
  128610:	e51b3008 	ldr	r3, [fp, #-8]
  128614:	e3a02000 	mov	r2, #0
  128618:	e5832004 	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
  12861c:	e51b3008 	ldr	r3, [fp, #-8]
  128620:	e3a02000 	mov	r2, #0
  128624:	e1c321b4 	strh	r2, [r3, #20]
  /* mark PCB as unconnected */
  pcb->flags &= ~UDP_FLAGS_CONNECTED;
  128628:	e51b3008 	ldr	r3, [fp, #-8]
  12862c:	e5d33010 	ldrb	r3, [r3, #16]
  128630:	e3c33004 	bic	r3, r3, #4
  128634:	e6ef2073 	uxtb	r2, r3
  128638:	e51b3008 	ldr	r3, [fp, #-8]
  12863c:	e5c32010 	strb	r2, [r3, #16]
}
  128640:	e320f000 	nop	{0}
  128644:	e28bd000 	add	sp, fp, #0
  128648:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  12864c:	e12fff1e 	bx	lr

00128650 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  128650:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  128654:	e28db000 	add	fp, sp, #0
  128658:	e24dd014 	sub	sp, sp, #20
  12865c:	e50b0008 	str	r0, [fp, #-8]
  128660:	e50b100c 	str	r1, [fp, #-12]
  128664:	e50b2010 	str	r2, [fp, #-16]
  /* remember recv() callback and user data */
  pcb->recv = recv;
  128668:	e51b3008 	ldr	r3, [fp, #-8]
  12866c:	e51b200c 	ldr	r2, [fp, #-12]
  128670:	e5832020 	str	r2, [r3, #32]
  pcb->recv_arg = recv_arg;
  128674:	e51b3008 	ldr	r3, [fp, #-8]
  128678:	e51b2010 	ldr	r2, [fp, #-16]
  12867c:	e5832024 	str	r2, [r3, #36]	; 0x24
}
  128680:	e320f000 	nop	{0}
  128684:	e28bd000 	add	sp, fp, #0
  128688:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  12868c:	e12fff1e 	bx	lr

00128690 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
  128690:	e92d4800 	push	{fp, lr}
  128694:	e28db004 	add	fp, sp, #4
  128698:	e24dd010 	sub	sp, sp, #16
  12869c:	e50b0010 	str	r0, [fp, #-16]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
  1286a0:	e30531c8 	movw	r3, #20936	; 0x51c8
  1286a4:	e3403057 	movt	r3, #87	; 0x57
  1286a8:	e5933000 	ldr	r3, [r3]
  1286ac:	e51b2010 	ldr	r2, [fp, #-16]
  1286b0:	e1520003 	cmp	r2, r3
  1286b4:	1a000007 	bne	1286d8 <udp_remove+0x48>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
  1286b8:	e30531c8 	movw	r3, #20936	; 0x51c8
  1286bc:	e3403057 	movt	r3, #87	; 0x57
  1286c0:	e5933000 	ldr	r3, [r3]
  1286c4:	e593200c 	ldr	r2, [r3, #12]
  1286c8:	e30531c8 	movw	r3, #20936	; 0x51c8
  1286cc:	e3403057 	movt	r3, #87	; 0x57
  1286d0:	e5832000 	str	r2, [r3]
  1286d4:	ea000018 	b	12873c <udp_remove+0xac>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
  1286d8:	e30531c8 	movw	r3, #20936	; 0x51c8
  1286dc:	e3403057 	movt	r3, #87	; 0x57
  1286e0:	e5933000 	ldr	r3, [r3]
  1286e4:	e50b3008 	str	r3, [fp, #-8]
  1286e8:	ea000010 	b	128730 <udp_remove+0xa0>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
  1286ec:	e51b3008 	ldr	r3, [fp, #-8]
  1286f0:	e593300c 	ldr	r3, [r3, #12]
  1286f4:	e3530000 	cmp	r3, #0
  1286f8:	0a000009 	beq	128724 <udp_remove+0x94>
  1286fc:	e51b3008 	ldr	r3, [fp, #-8]
  128700:	e593300c 	ldr	r3, [r3, #12]
  128704:	e51b2010 	ldr	r2, [fp, #-16]
  128708:	e1520003 	cmp	r2, r3
  12870c:	1a000004 	bne	128724 <udp_remove+0x94>
        /* remove pcb from list */
        pcb2->next = pcb->next;
  128710:	e51b3010 	ldr	r3, [fp, #-16]
  128714:	e593200c 	ldr	r2, [r3, #12]
  128718:	e51b3008 	ldr	r3, [fp, #-8]
  12871c:	e583200c 	str	r2, [r3, #12]
        break;
  128720:	ea000005 	b	12873c <udp_remove+0xac>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
  128724:	e51b3008 	ldr	r3, [fp, #-8]
  128728:	e593300c 	ldr	r3, [r3, #12]
  12872c:	e50b3008 	str	r3, [fp, #-8]
  128730:	e51b3008 	ldr	r3, [fp, #-8]
  128734:	e3530000 	cmp	r3, #0
  128738:	1affffeb 	bne	1286ec <udp_remove+0x5c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
  12873c:	e51b1010 	ldr	r1, [fp, #-16]
  128740:	e3a00001 	mov	r0, #1
  128744:	ebffc1f2 	bl	118f14 <memp_free>
}
  128748:	e320f000 	nop	{0}
  12874c:	e24bd004 	sub	sp, fp, #4
  128750:	e8bd8800 	pop	{fp, pc}

00128754 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
  128754:	e92d4800 	push	{fp, lr}
  128758:	e28db004 	add	fp, sp, #4
  12875c:	e24dd008 	sub	sp, sp, #8
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
  128760:	e3002452 	movw	r2, #1106	; 0x452
  128764:	e3081018 	movw	r1, #32792	; 0x8018
  128768:	e3401014 	movt	r1, #20
  12876c:	e3a00001 	mov	r0, #1
  128770:	ebffc17f 	bl	118d74 <memp_malloc_fn>
  128774:	e50b0008 	str	r0, [fp, #-8]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
  128778:	e51b3008 	ldr	r3, [fp, #-8]
  12877c:	e3530000 	cmp	r3, #0
  128780:	0a000009 	beq	1287ac <udp_new+0x58>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
  128784:	e3a02028 	mov	r2, #40	; 0x28
  128788:	e3a01000 	mov	r1, #0
  12878c:	e51b0008 	ldr	r0, [fp, #-8]
  128790:	eb006055 	bl	1408ec <memset>
    pcb->ttl = UDP_TTL;
  128794:	e51b3008 	ldr	r3, [fp, #-8]
  128798:	e3e02000 	mvn	r2, #0
  12879c:	e5c3200a 	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
  1287a0:	e51b3008 	ldr	r3, [fp, #-8]
  1287a4:	e3e02000 	mvn	r2, #0
  1287a8:	e5c3201c 	strb	r2, [r3, #28]
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
  1287ac:	e51b3008 	ldr	r3, [fp, #-8]
}
  1287b0:	e1a00003 	mov	r0, r3
  1287b4:	e24bd004 	sub	sp, fp, #4
  1287b8:	e8bd8800 	pop	{fp, pc}

001287bc <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
  1287bc:	e92d4800 	push	{fp, lr}
  1287c0:	e28db004 	add	fp, sp, #4
  1287c4:	e24dd010 	sub	sp, sp, #16
  1287c8:	e1a03000 	mov	r3, r0
  1287cc:	e54b300d 	strb	r3, [fp, #-13]
  struct udp_pcb *pcb;
  pcb = udp_new();
  1287d0:	ebffffdf 	bl	128754 <udp_new>
  1287d4:	e50b0008 	str	r0, [fp, #-8]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
  1287d8:	e51b3008 	ldr	r3, [fp, #-8]
}
  1287dc:	e1a00003 	mov	r0, r3
  1287e0:	e24bd004 	sub	sp, fp, #4
  1287e4:	e8bd8800 	pop	{fp, pc}

001287e8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
  1287e8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1287ec:	e28db000 	add	fp, sp, #0
  1287f0:	e24dd014 	sub	sp, sp, #20
  1287f4:	e50b0010 	str	r0, [fp, #-16]
  1287f8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
  1287fc:	e51b3010 	ldr	r3, [fp, #-16]
  128800:	e3530000 	cmp	r3, #0
  128804:	0a00001f 	beq	128888 <udp_netif_ip_addr_changed+0xa0>
  128808:	e51b3010 	ldr	r3, [fp, #-16]
  12880c:	e5933000 	ldr	r3, [r3]
  128810:	e3530000 	cmp	r3, #0
  128814:	0a00001b 	beq	128888 <udp_netif_ip_addr_changed+0xa0>
  128818:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12881c:	e3530000 	cmp	r3, #0
  128820:	0a000018 	beq	128888 <udp_netif_ip_addr_changed+0xa0>
  128824:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128828:	e5933000 	ldr	r3, [r3]
  12882c:	e3530000 	cmp	r3, #0
  128830:	0a000014 	beq	128888 <udp_netif_ip_addr_changed+0xa0>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
  128834:	e30531c8 	movw	r3, #20936	; 0x51c8
  128838:	e3403057 	movt	r3, #87	; 0x57
  12883c:	e5933000 	ldr	r3, [r3]
  128840:	e50b3008 	str	r3, [fp, #-8]
  128844:	ea00000c 	b	12887c <udp_netif_ip_addr_changed+0x94>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
  128848:	e51b3008 	ldr	r3, [fp, #-8]
  12884c:	e5932000 	ldr	r2, [r3]
  128850:	e51b3010 	ldr	r3, [fp, #-16]
  128854:	e5933000 	ldr	r3, [r3]
  128858:	e1520003 	cmp	r2, r3
  12885c:	1a000003 	bne	128870 <udp_netif_ip_addr_changed+0x88>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
  128860:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128864:	e5932000 	ldr	r2, [r3]
  128868:	e51b3008 	ldr	r3, [fp, #-8]
  12886c:	e5832000 	str	r2, [r3]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
  128870:	e51b3008 	ldr	r3, [fp, #-8]
  128874:	e593300c 	ldr	r3, [r3, #12]
  128878:	e50b3008 	str	r3, [fp, #-8]
  12887c:	e51b3008 	ldr	r3, [fp, #-8]
  128880:	e3530000 	cmp	r3, #0
  128884:	1affffef 	bne	128848 <udp_netif_ip_addr_changed+0x60>
      }
    }
  }
}
  128888:	e320f000 	nop	{0}
  12888c:	e28bd000 	add	sp, fp, #0
  128890:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  128894:	e12fff1e 	bx	lr

00128898 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
  128898:	e92d4800 	push	{fp, lr}
  12889c:	e28db004 	add	fp, sp, #4
  1288a0:	e24dd018 	sub	sp, sp, #24
  1288a4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1288a8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
  1288ac:	e3a0300e 	mov	r3, #14
  1288b0:	e14b30b6 	strh	r3, [fp, #-6]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
  1288b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1288b8:	e1d330ba 	ldrh	r3, [r3, #10]
  1288bc:	e353000e 	cmp	r3, #14
  1288c0:	8a000015 	bhi	12891c <ethernet_input+0x84>
    /* a packet with only an ethernet header (or less) is not valid for us */
    ETHARP_STATS_INC(etharp.proterr);
  1288c4:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  1288c8:	e3403057 	movt	r3, #87	; 0x57
  1288cc:	e1d332b8 	ldrh	r3, [r3, #40]	; 0x28
  1288d0:	e2833001 	add	r3, r3, #1
  1288d4:	e6ff2073 	uxth	r2, r3
  1288d8:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  1288dc:	e3403057 	movt	r3, #87	; 0x57
  1288e0:	e1c322b8 	strh	r2, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
  1288e4:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  1288e8:	e3403057 	movt	r3, #87	; 0x57
  1288ec:	e1d331be 	ldrh	r3, [r3, #30]
  1288f0:	e2833001 	add	r3, r3, #1
  1288f4:	e6ff2073 	uxth	r2, r3
  1288f8:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  1288fc:	e3403057 	movt	r3, #87	; 0x57
  128900:	e1c321be 	strh	r2, [r3, #30]
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
  128904:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  128908:	e5933060 	ldr	r3, [r3, #96]	; 0x60
  12890c:	e2832001 	add	r2, r3, #1
  128910:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  128914:	e5832060 	str	r2, [r3, #96]	; 0x60
    goto free_and_return;
  128918:	ea000096 	b	128b78 <ethernet_input+0x2e0>
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
  12891c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128920:	e5933004 	ldr	r3, [r3, #4]
  128924:	e50b300c 	str	r3, [fp, #-12]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
  128928:	e51b300c 	ldr	r3, [fp, #-12]
  12892c:	e5d3200c 	ldrb	r2, [r3, #12]
  128930:	e5d3300d 	ldrb	r3, [r3, #13]
  128934:	e1a03403 	lsl	r3, r3, #8
  128938:	e1833002 	orr	r3, r3, r2
  12893c:	e14b30be 	strh	r3, [fp, #-14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
  128940:	e51b300c 	ldr	r3, [fp, #-12]
  128944:	e5d33000 	ldrb	r3, [r3]
  128948:	e2033001 	and	r3, r3, #1
  12894c:	e3530000 	cmp	r3, #0
  128950:	0a000021 	beq	1289dc <ethernet_input+0x144>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
  128954:	e51b300c 	ldr	r3, [fp, #-12]
  128958:	e5d33000 	ldrb	r3, [r3]
  12895c:	e3530001 	cmp	r3, #1
  128960:	1a00000e 	bne	1289a0 <ethernet_input+0x108>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
  128964:	e51b300c 	ldr	r3, [fp, #-12]
  128968:	e5d33001 	ldrb	r3, [r3, #1]
  12896c:	e3530000 	cmp	r3, #0
  128970:	1a000019 	bne	1289dc <ethernet_input+0x144>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
  128974:	e51b300c 	ldr	r3, [fp, #-12]
  128978:	e5d33002 	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
  12897c:	e353005e 	cmp	r3, #94	; 0x5e
  128980:	1a000015 	bne	1289dc <ethernet_input+0x144>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
  128984:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128988:	e5d3300d 	ldrb	r3, [r3, #13]
  12898c:	e3833010 	orr	r3, r3, #16
  128990:	e6ef2073 	uxtb	r2, r3
  128994:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128998:	e5c3200d 	strb	r2, [r3, #13]
  12899c:	ea00000e 	b	1289dc <ethernet_input+0x144>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
  1289a0:	e51b300c 	ldr	r3, [fp, #-12]
  1289a4:	e3a02006 	mov	r2, #6
  1289a8:	e3081074 	movw	r1, #32884	; 0x8074
  1289ac:	e3401014 	movt	r1, #20
  1289b0:	e1a00003 	mov	r0, r3
  1289b4:	eb005f53 	bl	140708 <memcmp>
  1289b8:	e1a03000 	mov	r3, r0
  1289bc:	e3530000 	cmp	r3, #0
  1289c0:	1a000005 	bne	1289dc <ethernet_input+0x144>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
  1289c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1289c8:	e5d3300d 	ldrb	r3, [r3, #13]
  1289cc:	e3833008 	orr	r3, r3, #8
  1289d0:	e6ef2073 	uxtb	r2, r3
  1289d4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1289d8:	e5c3200d 	strb	r2, [r3, #13]
    }
  }

  switch (type) {
  1289dc:	e15b30be 	ldrh	r3, [fp, #-14]
  1289e0:	e3530008 	cmp	r3, #8
  1289e4:	0a000003 	beq	1289f8 <ethernet_input+0x160>
  1289e8:	e3002608 	movw	r2, #1544	; 0x608
  1289ec:	e1530002 	cmp	r3, r2
  1289f0:	0a000019 	beq	128a5c <ethernet_input+0x1c4>
  1289f4:	ea000042 	b	128b04 <ethernet_input+0x26c>
#if LWIP_IPV4 && LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
  1289f8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1289fc:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  128a00:	e2033008 	and	r3, r3, #8
  128a04:	e3530000 	cmp	r3, #0
  128a08:	0a000055 	beq	128b64 <ethernet_input+0x2cc>
        goto free_and_return;
      }
      /* skip Ethernet header */
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
  128a0c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128a10:	e1d330ba 	ldrh	r3, [r3, #10]
  128a14:	e1a02003 	mov	r2, r3
  128a18:	e15b30f6 	ldrsh	r3, [fp, #-6]
  128a1c:	e1520003 	cmp	r2, r3
  128a20:	ba000051 	blt	128b6c <ethernet_input+0x2d4>
  128a24:	e15b30b6 	ldrh	r3, [fp, #-6]
  128a28:	e2633000 	rsb	r3, r3, #0
  128a2c:	e6ff3073 	uxth	r3, r3
  128a30:	e6bf3073 	sxth	r3, r3
  128a34:	e1a01003 	mov	r1, r3
  128a38:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  128a3c:	ebffc824 	bl	11aad4 <pbuf_header>
  128a40:	e1a03000 	mov	r3, r0
  128a44:	e3530000 	cmp	r3, #0
  128a48:	1a000047 	bne	128b6c <ethernet_input+0x2d4>
          p->tot_len, ip_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        goto free_and_return;
      } else {
        /* pass to IP layer */
        ip4_input(p, netif);
  128a4c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  128a50:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  128a54:	eb002160 	bl	130fdc <ip4_input>
      }
      break;
  128a58:	ea00003f 	b	128b5c <ethernet_input+0x2c4>

    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
  128a5c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  128a60:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  128a64:	e2033008 	and	r3, r3, #8
  128a68:	e3530000 	cmp	r3, #0
  128a6c:	0a000040 	beq	128b74 <ethernet_input+0x2dc>
        goto free_and_return;
      }
      /* skip Ethernet header */
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
  128a70:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128a74:	e1d330ba 	ldrh	r3, [r3, #10]
  128a78:	e1a02003 	mov	r2, r3
  128a7c:	e15b30f6 	ldrsh	r3, [fp, #-6]
  128a80:	e1520003 	cmp	r2, r3
  128a84:	ba000009 	blt	128ab0 <ethernet_input+0x218>
  128a88:	e15b30b6 	ldrh	r3, [fp, #-6]
  128a8c:	e2633000 	rsb	r3, r3, #0
  128a90:	e6ff3073 	uxth	r3, r3
  128a94:	e6bf3073 	sxth	r3, r3
  128a98:	e1a01003 	mov	r1, r3
  128a9c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  128aa0:	ebffc80b 	bl	11aad4 <pbuf_header>
  128aa4:	e1a03000 	mov	r3, r0
  128aa8:	e3530000 	cmp	r3, #0
  128aac:	0a000010 	beq	128af4 <ethernet_input+0x25c>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
          ("ethernet_input: ARP response packet dropped, too short (%"S16_F"/%"S16_F")\n",
          p->tot_len, ip_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        ETHARP_STATS_INC(etharp.lenerr);
  128ab0:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  128ab4:	e3403057 	movt	r3, #87	; 0x57
  128ab8:	e1d332b2 	ldrh	r3, [r3, #34]	; 0x22
  128abc:	e2833001 	add	r3, r3, #1
  128ac0:	e6ff2073 	uxth	r2, r3
  128ac4:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  128ac8:	e3403057 	movt	r3, #87	; 0x57
  128acc:	e1c322b2 	strh	r2, [r3, #34]	; 0x22
        ETHARP_STATS_INC(etharp.drop);
  128ad0:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  128ad4:	e3403057 	movt	r3, #87	; 0x57
  128ad8:	e1d331be 	ldrh	r3, [r3, #30]
  128adc:	e2833001 	add	r3, r3, #1
  128ae0:	e6ff2073 	uxth	r2, r3
  128ae4:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  128ae8:	e3403057 	movt	r3, #87	; 0x57
  128aec:	e1c321be 	strh	r2, [r3, #30]
        goto free_and_return;
  128af0:	ea000020 	b	128b78 <ethernet_input+0x2e0>
      } else {
        /* pass p to ARP module */
        etharp_input(p, netif);
  128af4:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  128af8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  128afc:	eb00156e 	bl	12e0bc <etharp_input>
      }
      break;
  128b00:	ea000015 	b	128b5c <ethernet_input+0x2c4>
#ifdef LWIP_HOOK_UNKNOWN_ETH_PROTOCOL
      if(LWIP_HOOK_UNKNOWN_ETH_PROTOCOL(p, netif) == ERR_OK) {
        break;
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
  128b04:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  128b08:	e3403057 	movt	r3, #87	; 0x57
  128b0c:	e1d332b8 	ldrh	r3, [r3, #40]	; 0x28
  128b10:	e2833001 	add	r3, r3, #1
  128b14:	e6ff2073 	uxth	r2, r3
  128b18:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  128b1c:	e3403057 	movt	r3, #87	; 0x57
  128b20:	e1c322b8 	strh	r2, [r3, #40]	; 0x28
      ETHARP_STATS_INC(etharp.drop);
  128b24:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  128b28:	e3403057 	movt	r3, #87	; 0x57
  128b2c:	e1d331be 	ldrh	r3, [r3, #30]
  128b30:	e2833001 	add	r3, r3, #1
  128b34:	e6ff2073 	uxth	r2, r3
  128b38:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  128b3c:	e3403057 	movt	r3, #87	; 0x57
  128b40:	e1c321be 	strh	r2, [r3, #30]
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
  128b44:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  128b48:	e5933064 	ldr	r3, [r3, #100]	; 0x64
  128b4c:	e2832001 	add	r2, r3, #1
  128b50:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  128b54:	e5832064 	str	r2, [r3, #100]	; 0x64
      goto free_and_return;
  128b58:	ea000006 	b	128b78 <ethernet_input+0x2e0>
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
  128b5c:	e3a03000 	mov	r3, #0
  128b60:	ea000007 	b	128b84 <ethernet_input+0x2ec>
        goto free_and_return;
  128b64:	e320f000 	nop	{0}
  128b68:	ea000002 	b	128b78 <ethernet_input+0x2e0>

free_and_return:
  128b6c:	e320f000 	nop	{0}
  128b70:	ea000000 	b	128b78 <ethernet_input+0x2e0>
        goto free_and_return;
  128b74:	e320f000 	nop	{0}
  pbuf_free(p);
  128b78:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  128b7c:	ebffc7f2 	bl	11ab4c <pbuf_free>
  return ERR_OK;
  128b80:	e3a03000 	mov	r3, #0
}
  128b84:	e1a00003 	mov	r0, r3
  128b88:	e24bd004 	sub	sp, fp, #4
  128b8c:	e8bd8800 	pop	{fp, pc}

00128b90 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
  128b90:	e92d4800 	push	{fp, lr}
  128b94:	e28db004 	add	fp, sp, #4
  128b98:	e24dd018 	sub	sp, sp, #24
  128b9c:	e50b0010 	str	r0, [fp, #-16]
  128ba0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  128ba4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  128ba8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
  128bac:	e1db30b4 	ldrh	r3, [fp, #4]
  128bb0:	e1a00003 	mov	r0, r3
  128bb4:	ebffb5ad 	bl	116270 <lwip_htons>
  128bb8:	e1a03000 	mov	r3, r0
  128bbc:	e14b30b6 	strh	r3, [fp, #-6]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
  128bc0:	e3a0100e 	mov	r1, #14
  128bc4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  128bc8:	ebffc7c1 	bl	11aad4 <pbuf_header>
  128bcc:	e1a03000 	mov	r3, r0
  128bd0:	e3530000 	cmp	r3, #0
  128bd4:	1a000022 	bne	128c64 <ethernet_output+0xd4>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
  128bd8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128bdc:	e5933004 	ldr	r3, [r3, #4]
  128be0:	e50b300c 	str	r3, [fp, #-12]
  ethhdr->type = eth_type_be;
  128be4:	e51b300c 	ldr	r3, [fp, #-12]
  128be8:	e15b20b6 	ldrh	r2, [fp, #-6]
  128bec:	e1c320bc 	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
  128bf0:	e51b300c 	ldr	r3, [fp, #-12]
  128bf4:	e3a02006 	mov	r2, #6
  128bf8:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  128bfc:	e1a00003 	mov	r0, r3
  128c00:	eb005e01 	bl	14040c <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
  128c04:	e51b300c 	ldr	r3, [fp, #-12]
  128c08:	e2833006 	add	r3, r3, #6
  128c0c:	e3a02006 	mov	r2, #6
  128c10:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  128c14:	e1a00003 	mov	r0, r3
  128c18:	eb005dfb 	bl	14040c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
  128c1c:	e51b3010 	ldr	r3, [fp, #-16]
  128c20:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
  128c24:	e3530006 	cmp	r3, #6
  128c28:	0a000006 	beq	128c48 <ethernet_output+0xb8>
  128c2c:	e3080084 	movw	r0, #32900	; 0x8084
  128c30:	e3400014 	movt	r0, #20
  128c34:	ebff6936 	bl	103114 <rt_kprintf>
  128c38:	e300112e 	movw	r1, #302	; 0x12e
  128c3c:	e30800b8 	movw	r0, #32952	; 0x80b8
  128c40:	e3400014 	movt	r0, #20
  128c44:	ebff87b2 	bl	10ab14 <sys_arch_assert>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
  128c48:	e51b3010 	ldr	r3, [fp, #-16]
  128c4c:	e5933018 	ldr	r3, [r3, #24]
  128c50:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  128c54:	e51b0010 	ldr	r0, [fp, #-16]
  128c58:	e12fff33 	blx	r3
  128c5c:	e1a03000 	mov	r3, r0
  128c60:	ea000009 	b	128c8c <ethernet_output+0xfc>
      goto pbuf_header_failed;
  128c64:	e320f000 	nop	{0}

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  128c68:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  128c6c:	e3403057 	movt	r3, #87	; 0x57
  128c70:	e1d330ba 	ldrh	r3, [r3, #10]
  128c74:	e2833001 	add	r3, r3, #1
  128c78:	e6ff2073 	uxth	r2, r3
  128c7c:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  128c80:	e3403057 	movt	r3, #87	; 0x57
  128c84:	e1c320ba 	strh	r2, [r3, #10]
  return ERR_BUF;
  128c88:	e3e03001 	mvn	r3, #1
}
  128c8c:	e1a00003 	mov	r0, r3
  128c90:	e24bd004 	sub	sp, fp, #4
  128c94:	e8bd8800 	pop	{fp, pc}

00128c98 <lwip_netdev_set_up>:
#include "lwip/netdb.h"
#include "../../../netdev/netdev.h"
#include "../../../netdev/eth_device_manager.h"

static int lwip_netdev_set_up(struct netdev *netif)
{
  128c98:	e92d4800 	push	{fp, lr}
  128c9c:	e28db004 	add	fp, sp, #4
  128ca0:	e24dd008 	sub	sp, sp, #8
  128ca4:	e50b0008 	str	r0, [fp, #-8]
    netif_set_up((struct netif *)netif->user_data);
  128ca8:	e51b3008 	ldr	r3, [fp, #-8]
  128cac:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  128cb0:	e1a00003 	mov	r0, r3
  128cb4:	ebffc26a 	bl	119664 <netif_set_up>
    return ERR_OK;
  128cb8:	e3a03000 	mov	r3, #0
}
  128cbc:	e1a00003 	mov	r0, r3
  128cc0:	e24bd004 	sub	sp, fp, #4
  128cc4:	e8bd8800 	pop	{fp, pc}

00128cc8 <lwip_netdev_set_down>:

static int lwip_netdev_set_down(struct netdev *netif)
{
  128cc8:	e92d4800 	push	{fp, lr}
  128ccc:	e28db004 	add	fp, sp, #4
  128cd0:	e24dd008 	sub	sp, sp, #8
  128cd4:	e50b0008 	str	r0, [fp, #-8]
    netif_set_down((struct netif *)netif->user_data);
  128cd8:	e51b3008 	ldr	r3, [fp, #-8]
  128cdc:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  128ce0:	e1a00003 	mov	r0, r3
  128ce4:	ebffc2b3 	bl	1197b8 <netif_set_down>
    return ERR_OK;
  128ce8:	e3a03000 	mov	r3, #0
}
  128cec:	e1a00003 	mov	r0, r3
  128cf0:	e24bd004 	sub	sp, fp, #4
  128cf4:	e8bd8800 	pop	{fp, pc}

00128cf8 <lwip_netdev_set_addr_info>:

static int lwip_netdev_set_addr_info(struct netdev *netif, ip_addr_t *ip_addr, ip_addr_t *netmask, ip_addr_t *gw)
{
  128cf8:	e92d4800 	push	{fp, lr}
  128cfc:	e28db004 	add	fp, sp, #4
  128d00:	e24dd010 	sub	sp, sp, #16
  128d04:	e50b0008 	str	r0, [fp, #-8]
  128d08:	e50b100c 	str	r1, [fp, #-12]
  128d0c:	e50b2010 	str	r2, [fp, #-16]
  128d10:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    if (ip_addr && netmask && gw)
  128d14:	e51b300c 	ldr	r3, [fp, #-12]
  128d18:	e3530000 	cmp	r3, #0
  128d1c:	0a00000c 	beq	128d54 <lwip_netdev_set_addr_info+0x5c>
  128d20:	e51b3010 	ldr	r3, [fp, #-16]
  128d24:	e3530000 	cmp	r3, #0
  128d28:	0a000009 	beq	128d54 <lwip_netdev_set_addr_info+0x5c>
  128d2c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128d30:	e3530000 	cmp	r3, #0
  128d34:	0a000006 	beq	128d54 <lwip_netdev_set_addr_info+0x5c>
    {
        netif_set_addr((struct netif *)netif->user_data, ip_2_ip4(ip_addr), ip_2_ip4(netmask), ip_2_ip4(gw));
  128d38:	e51b3008 	ldr	r3, [fp, #-8]
  128d3c:	e5930040 	ldr	r0, [r3, #64]	; 0x40
  128d40:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128d44:	e51b2010 	ldr	r2, [fp, #-16]
  128d48:	e51b100c 	ldr	r1, [fp, #-12]
  128d4c:	ebffc110 	bl	119194 <netif_set_addr>
  128d50:	ea000017 	b	128db4 <lwip_netdev_set_addr_info+0xbc>
    }
    else
    {
        if (ip_addr)
  128d54:	e51b300c 	ldr	r3, [fp, #-12]
  128d58:	e3530000 	cmp	r3, #0
  128d5c:	0a000004 	beq	128d74 <lwip_netdev_set_addr_info+0x7c>
        {
            netif_set_ipaddr((struct netif *)netif->user_data, ip_2_ip4(ip_addr));
  128d60:	e51b3008 	ldr	r3, [fp, #-8]
  128d64:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  128d68:	e51b100c 	ldr	r1, [fp, #-12]
  128d6c:	e1a00003 	mov	r0, r3
  128d70:	ebffc1b6 	bl	119450 <netif_set_ipaddr>
        }

        if (netmask)
  128d74:	e51b3010 	ldr	r3, [fp, #-16]
  128d78:	e3530000 	cmp	r3, #0
  128d7c:	0a000004 	beq	128d94 <lwip_netdev_set_addr_info+0x9c>
        {
            netif_set_netmask((struct netif *)netif->user_data, ip_2_ip4(netmask));
  128d80:	e51b3008 	ldr	r3, [fp, #-8]
  128d84:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  128d88:	e51b1010 	ldr	r1, [fp, #-16]
  128d8c:	e1a00003 	mov	r0, r3
  128d90:	ebffc20e 	bl	1195d0 <netif_set_netmask>
        }

        if (gw)
  128d94:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128d98:	e3530000 	cmp	r3, #0
  128d9c:	0a000004 	beq	128db4 <lwip_netdev_set_addr_info+0xbc>
        {
            netif_set_gw((struct netif *)netif->user_data, ip_2_ip4(gw));
  128da0:	e51b3008 	ldr	r3, [fp, #-8]
  128da4:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  128da8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  128dac:	e1a00003 	mov	r0, r3
  128db0:	ebffc1ed 	bl	11956c <netif_set_gw>
        }
    }

    return ERR_OK;
  128db4:	e3a03000 	mov	r3, #0
}
  128db8:	e1a00003 	mov	r0, r3
  128dbc:	e24bd004 	sub	sp, fp, #4
  128dc0:	e8bd8800 	pop	{fp, pc}

00128dc4 <lwip_netdev_set_dns_server>:

#ifdef RT_LWIP_DNS
static int lwip_netdev_set_dns_server(struct netdev *netif, uint8_t dns_num, ip_addr_t *dns_server)
{
  128dc4:	e92d4800 	push	{fp, lr}
  128dc8:	e28db004 	add	fp, sp, #4
  128dcc:	e24dd010 	sub	sp, sp, #16
  128dd0:	e50b0008 	str	r0, [fp, #-8]
  128dd4:	e1a03001 	mov	r3, r1
  128dd8:	e50b2010 	str	r2, [fp, #-16]
  128ddc:	e54b3009 	strb	r3, [fp, #-9]
    extern void dns_setserver(uint8_t dns_num, const ip_addr_t *dns_server);
    dns_setserver(dns_num, dns_server);
  128de0:	e55b3009 	ldrb	r3, [fp, #-9]
  128de4:	e51b1010 	ldr	r1, [fp, #-16]
  128de8:	e1a00003 	mov	r0, r3
  128dec:	ebffb625 	bl	116688 <dns_setserver>
    return ERR_OK;
  128df0:	e3a03000 	mov	r3, #0
}
  128df4:	e1a00003 	mov	r0, r3
  128df8:	e24bd004 	sub	sp, fp, #4
  128dfc:	e8bd8800 	pop	{fp, pc}

00128e00 <lwip_netdev_set_dhcp>:
#endif /* RT_LWIP_DNS */

#ifdef RT_LWIP_DHCP
static int lwip_netdev_set_dhcp(struct netdev *netif, rt_bool_t is_enabled)
{
  128e00:	e92d4800 	push	{fp, lr}
  128e04:	e28db004 	add	fp, sp, #4
  128e08:	e24dd008 	sub	sp, sp, #8
  128e0c:	e50b0008 	str	r0, [fp, #-8]
  128e10:	e50b100c 	str	r1, [fp, #-12]
    if(RT_TRUE == is_enabled)
  128e14:	e51b300c 	ldr	r3, [fp, #-12]
  128e18:	e3530001 	cmp	r3, #1
  128e1c:	1a000004 	bne	128e34 <lwip_netdev_set_dhcp+0x34>
    {
        dhcp_start((struct netif *)netif->user_data);
  128e20:	e51b3008 	ldr	r3, [fp, #-8]
  128e24:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  128e28:	e1a00003 	mov	r0, r3
  128e2c:	eb00069a 	bl	12a89c <dhcp_start>
  128e30:	ea000003 	b	128e44 <lwip_netdev_set_dhcp+0x44>
    }
    else
    {
        dhcp_stop((struct netif *)netif->user_data);
  128e34:	e51b3008 	ldr	r3, [fp, #-8]
  128e38:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  128e3c:	e1a00003 	mov	r0, r3
  128e40:	eb000b0d 	bl	12ba7c <dhcp_stop>
    }
    netdev_low_level_set_dhcp_status(netif, is_enabled);
  128e44:	e51b100c 	ldr	r1, [fp, #-12]
  128e48:	e51b0008 	ldr	r0, [fp, #-8]
  128e4c:	ebff7499 	bl	1060b8 <netdev_low_level_set_dhcp_status>
    return ERR_OK;
  128e50:	e3a03000 	mov	r3, #0
}
  128e54:	e1a00003 	mov	r0, r3
  128e58:	e24bd004 	sub	sp, fp, #4
  128e5c:	e8bd8800 	pop	{fp, pc}

00128e60 <lwip_netdev_ping>:
extern int lwip_ping_recv(int s, int *ttl);
extern err_t lwip_ping_send(int s, ip_addr_t *addr, int size);

int lwip_netdev_ping(struct netdev *netif, const char *host, size_t data_len, 
                        uint32_t timeout, struct netdev_ping_resp *ping_resp)
{
  128e60:	e92d4800 	push	{fp, lr}
  128e64:	e28db004 	add	fp, sp, #4
  128e68:	e24dd070 	sub	sp, sp, #112	; 0x70
  128e6c:	e50b0060 	str	r0, [fp, #-96]	; 0xffffffa0
  128e70:	e50b1064 	str	r1, [fp, #-100]	; 0xffffff9c
  128e74:	e50b2068 	str	r2, [fp, #-104]	; 0xffffff98
  128e78:	e50b306c 	str	r3, [fp, #-108]	; 0xffffff94
    int s, ttl, recv_len, result = 0;
  128e7c:	e3a03000 	mov	r3, #0
  128e80:	e50b3008 	str	r3, [fp, #-8]
    int elapsed_time;
    rt_tick_t recv_start_tick;
#if LWIP_VERSION_MAJOR >= 2U
    struct timeval recv_timeout = { timeout / RT_TICK_PER_SECOND, timeout % RT_TICK_PER_SECOND };
  128e84:	e51b206c 	ldr	r2, [fp, #-108]	; 0xffffff94
  128e88:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  128e8c:	e3413062 	movt	r3, #4194	; 0x1062
  128e90:	e0832392 	umull	r2, r3, r2, r3
  128e94:	e1a03323 	lsr	r3, r3, #6
  128e98:	e1a02003 	mov	r2, r3
  128e9c:	e3a03000 	mov	r3, #0
  128ea0:	e14b22fc 	strd	r2, [fp, #-44]	; 0xffffffd4
  128ea4:	e51b106c 	ldr	r1, [fp, #-108]	; 0xffffff94
  128ea8:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  128eac:	e3413062 	movt	r3, #4194	; 0x1062
  128eb0:	e0832391 	umull	r2, r3, r1, r3
  128eb4:	e1a03323 	lsr	r3, r3, #6
  128eb8:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  128ebc:	e0030392 	mul	r3, r2, r3
  128ec0:	e0413003 	sub	r3, r1, r3
  128ec4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
#else
    int recv_timeout = timeout * 1000UL / RT_TICK_PER_SECOND;
#endif
    ip_addr_t target_addr;
    struct addrinfo hint, *res = RT_NULL;
  128ec8:	e3a03000 	mov	r3, #0
  128ecc:	e50b3054 	str	r3, [fp, #-84]	; 0xffffffac
    struct sockaddr_in *h = RT_NULL;
  128ed0:	e3a03000 	mov	r3, #0
  128ed4:	e50b3058 	str	r3, [fp, #-88]	; 0xffffffa8
    struct in_addr ina;
    
    RT_ASSERT(netif);
  128ed8:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
  128edc:	e3530000 	cmp	r3, #0
  128ee0:	1a000005 	bne	128efc <lwip_netdev_ping+0x9c>
  128ee4:	e3a020a7 	mov	r2, #167	; 0xa7
  128ee8:	e30811ec 	movw	r1, #33260	; 0x81ec
  128eec:	e3401014 	movt	r1, #20
  128ef0:	e30800ec 	movw	r0, #33004	; 0x80ec
  128ef4:	e3400014 	movt	r0, #20
  128ef8:	ebff69a6 	bl	103598 <rt_assert_handler>
    RT_ASSERT(host);
  128efc:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
  128f00:	e3530000 	cmp	r3, #0
  128f04:	1a000005 	bne	128f20 <lwip_netdev_ping+0xc0>
  128f08:	e3a020a8 	mov	r2, #168	; 0xa8
  128f0c:	e30811ec 	movw	r1, #33260	; 0x81ec
  128f10:	e3401014 	movt	r1, #20
  128f14:	e30800f4 	movw	r0, #33012	; 0x80f4
  128f18:	e3400014 	movt	r0, #20
  128f1c:	ebff699d 	bl	103598 <rt_assert_handler>
    RT_ASSERT(ping_resp);
  128f20:	e59b3004 	ldr	r3, [fp, #4]
  128f24:	e3530000 	cmp	r3, #0
  128f28:	1a000005 	bne	128f44 <lwip_netdev_ping+0xe4>
  128f2c:	e3a020a9 	mov	r2, #169	; 0xa9
  128f30:	e30811ec 	movw	r1, #33260	; 0x81ec
  128f34:	e3401014 	movt	r1, #20
  128f38:	e30800fc 	movw	r0, #33020	; 0x80fc
  128f3c:	e3400014 	movt	r0, #20
  128f40:	ebff6994 	bl	103598 <rt_assert_handler>

    rt_memset(&hint, 0x00, sizeof(hint));
  128f44:	e24b3050 	sub	r3, fp, #80	; 0x50
  128f48:	e3a02020 	mov	r2, #32
  128f4c:	e3a01000 	mov	r1, #0
  128f50:	e1a00003 	mov	r0, r3
  128f54:	ebff68db 	bl	1032c8 <rt_memset>
    /* convert URL to IP */
    if (lwip_getaddrinfo(host, RT_NULL, &hint, &res) != 0)
  128f58:	e24b3054 	sub	r3, fp, #84	; 0x54
  128f5c:	e24b2050 	sub	r2, fp, #80	; 0x50
  128f60:	e3a01000 	mov	r1, #0
  128f64:	e51b0064 	ldr	r0, [fp, #-100]	; 0xffffff9c
  128f68:	ebff9d43 	bl	11047c <lwip_getaddrinfo>
  128f6c:	e1a03000 	mov	r3, r0
  128f70:	e3530000 	cmp	r3, #0
  128f74:	0a000001 	beq	128f80 <lwip_netdev_ping+0x120>
    {
        return -RT_ERROR;
  128f78:	e3e03000 	mvn	r3, #0
  128f7c:	ea000064 	b	129114 <lwip_netdev_ping+0x2b4>
    }
    rt_memcpy(&h, &res->ai_addr, sizeof(struct sockaddr_in *));
  128f80:	e51b3054 	ldr	r3, [fp, #-84]	; 0xffffffac
  128f84:	e2831014 	add	r1, r3, #20
  128f88:	e24b3058 	sub	r3, fp, #88	; 0x58
  128f8c:	e3a02004 	mov	r2, #4
  128f90:	e1a00003 	mov	r0, r3
  128f94:	ebff68d9 	bl	103300 <rt_memcpy>
    rt_memcpy(&ina, &h->sin_addr, sizeof(ina));
  128f98:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  128f9c:	e2831004 	add	r1, r3, #4
  128fa0:	e24b305c 	sub	r3, fp, #92	; 0x5c
  128fa4:	e3a02004 	mov	r2, #4
  128fa8:	e1a00003 	mov	r0, r3
  128fac:	ebff68d3 	bl	103300 <rt_memcpy>
    lwip_freeaddrinfo(res);
  128fb0:	e51b3054 	ldr	r3, [fp, #-84]	; 0xffffffac
  128fb4:	e1a00003 	mov	r0, r3
  128fb8:	ebff9d1c 	bl	110430 <lwip_freeaddrinfo>
    if (inet_aton(inet_ntoa(ina), &target_addr) == 0)
  128fbc:	e24b305c 	sub	r3, fp, #92	; 0x5c
  128fc0:	e1a00003 	mov	r0, r3
  128fc4:	eb0025b5 	bl	1326a0 <ip4addr_ntoa>
  128fc8:	e1a02000 	mov	r2, r0
  128fcc:	e24b3030 	sub	r3, fp, #48	; 0x30
  128fd0:	e1a01003 	mov	r1, r3
  128fd4:	e1a00002 	mov	r0, r2
  128fd8:	eb0024ac 	bl	132290 <ip4addr_aton>
  128fdc:	e1a03000 	mov	r3, r0
  128fe0:	e3530000 	cmp	r3, #0
  128fe4:	1a000001 	bne	128ff0 <lwip_netdev_ping+0x190>
    {
        return -RT_ERROR;
  128fe8:	e3e03000 	mvn	r3, #0
  128fec:	ea000048 	b	129114 <lwip_netdev_ping+0x2b4>
    }
    rt_memcpy(&(ping_resp->ip_addr), &target_addr, sizeof(ip_addr_t));
  128ff0:	e59b3004 	ldr	r3, [fp, #4]
  128ff4:	e24b1030 	sub	r1, fp, #48	; 0x30
  128ff8:	e3a02004 	mov	r2, #4
  128ffc:	e1a00003 	mov	r0, r3
  129000:	ebff68be 	bl	103300 <rt_memcpy>
    
    /* new a socket */
    if ((s = lwip_socket(AF_INET, SOCK_RAW, IP_PROTO_ICMP)) < 0)
  129004:	e3a02001 	mov	r2, #1
  129008:	e3a01003 	mov	r1, #3
  12900c:	e3a00002 	mov	r0, #2
  129010:	ebffa65a 	bl	112980 <lwip_socket>
  129014:	e50b000c 	str	r0, [fp, #-12]
  129018:	e51b300c 	ldr	r3, [fp, #-12]
  12901c:	e3530000 	cmp	r3, #0
  129020:	aa000001 	bge	12902c <lwip_netdev_ping+0x1cc>
    {
        return -RT_ERROR;
  129024:	e3e03000 	mvn	r3, #0
  129028:	ea000039 	b	129114 <lwip_netdev_ping+0x2b4>
    }

    lwip_setsockopt(s, SOL_SOCKET, SO_RCVTIMEO, &recv_timeout, sizeof(recv_timeout));
  12902c:	e24b202c 	sub	r2, fp, #44	; 0x2c
  129030:	e3a03010 	mov	r3, #16
  129034:	e58d3000 	str	r3, [sp]
  129038:	e1a03002 	mov	r3, r2
  12903c:	e3012006 	movw	r2, #4102	; 0x1006
  129040:	e3001fff 	movw	r1, #4095	; 0xfff
  129044:	e51b000c 	ldr	r0, [fp, #-12]
  129048:	ebffae2a 	bl	1148f8 <lwip_setsockopt>

    if (lwip_ping_send(s, &target_addr, data_len) == ERR_OK)
  12904c:	e51b2068 	ldr	r2, [fp, #-104]	; 0xffffff98
  129050:	e24b3030 	sub	r3, fp, #48	; 0x30
  129054:	e1a01003 	mov	r1, r3
  129058:	e51b000c 	ldr	r0, [fp, #-12]
  12905c:	eb002bca 	bl	133f8c <lwip_ping_send>
  129060:	e1a03000 	mov	r3, r0
  129064:	e3530000 	cmp	r3, #0
  129068:	1a000023 	bne	1290fc <lwip_netdev_ping+0x29c>
    {
        recv_start_tick = rt_tick_get();
  12906c:	ebff637b 	bl	101e60 <rt_tick_get>
  129070:	e50b0010 	str	r0, [fp, #-16]
        if ((recv_len = lwip_ping_recv(s, &ttl)) >= 0)
  129074:	e24b301c 	sub	r3, fp, #28
  129078:	e1a01003 	mov	r1, r3
  12907c:	e51b000c 	ldr	r0, [fp, #-12]
  129080:	eb002bff 	bl	134084 <lwip_ping_recv>
  129084:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  129088:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12908c:	e3530000 	cmp	r3, #0
  129090:	ba000016 	blt	1290f0 <lwip_netdev_ping+0x290>
        {
            elapsed_time = (rt_tick_get() - recv_start_tick) * 1000UL / RT_TICK_PER_SECOND;
  129094:	ebff6371 	bl	101e60 <rt_tick_get>
  129098:	e1a02000 	mov	r2, r0
  12909c:	e51b3010 	ldr	r3, [fp, #-16]
  1290a0:	e0423003 	sub	r3, r2, r3
  1290a4:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  1290a8:	e0020392 	mul	r2, r2, r3
  1290ac:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  1290b0:	e3413062 	movt	r3, #4194	; 0x1062
  1290b4:	e0832392 	umull	r2, r3, r2, r3
  1290b8:	e1a03323 	lsr	r3, r3, #6
  1290bc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
            ping_resp->data_len = recv_len;
  1290c0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1290c4:	e6ff2073 	uxth	r2, r3
  1290c8:	e59b3004 	ldr	r3, [fp, #4]
  1290cc:	e1c320b4 	strh	r2, [r3, #4]
            ping_resp->ttl = ttl;
  1290d0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1290d4:	e6ff2073 	uxth	r2, r3
  1290d8:	e59b3004 	ldr	r3, [fp, #4]
  1290dc:	e1c320b6 	strh	r2, [r3, #6]
            ping_resp->ticks = elapsed_time;
  1290e0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1290e4:	e59b3004 	ldr	r3, [fp, #4]
  1290e8:	e5832008 	str	r2, [r3, #8]
  1290ec:	ea000005 	b	129108 <lwip_netdev_ping+0x2a8>
        }
        else
        {
            result = -RT_ETIMEOUT;
  1290f0:	e3e03001 	mvn	r3, #1
  1290f4:	e50b3008 	str	r3, [fp, #-8]
            goto __exit;
  1290f8:	ea000002 	b	129108 <lwip_netdev_ping+0x2a8>
        }
    }
    else
    {
        result = -RT_ETIMEOUT;
  1290fc:	e3e03001 	mvn	r3, #1
  129100:	e50b3008 	str	r3, [fp, #-8]
        goto __exit;
  129104:	e320f000 	nop	{0}
    }

__exit:
    lwip_close(s);
  129108:	e51b000c 	ldr	r0, [fp, #-12]
  12910c:	ebffa105 	bl	111528 <lwip_close>

    return result;
  129110:	e51b3008 	ldr	r3, [fp, #-8]
}
  129114:	e1a00003 	mov	r0, r3
  129118:	e24bd004 	sub	sp, fp, #4
  12911c:	e8bd8800 	pop	{fp, pc}

00129120 <lwip_netdev_set_default>:
#endif /* RT_LWIP_USING_PING */
#endif /* RT_USING_FINSH */

static int lwip_netdev_set_default(struct netdev *netif)
{
  129120:	e92d4800 	push	{fp, lr}
  129124:	e28db004 	add	fp, sp, #4
  129128:	e24dd008 	sub	sp, sp, #8
  12912c:	e50b0008 	str	r0, [fp, #-8]
    netif_set_default((struct netif *)netif->user_data);
  129130:	e51b3008 	ldr	r3, [fp, #-8]
  129134:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  129138:	e1a00003 	mov	r0, r3
  12913c:	ebffc13c 	bl	119634 <netif_set_default>
    return ERR_OK;
  129140:	e3a03000 	mov	r3, #0
}
  129144:	e1a00003 	mov	r0, r3
  129148:	e24bd004 	sub	sp, fp, #4
  12914c:	e8bd8800 	pop	{fp, pc}

00129150 <netdev_add>:

    lwip_netdev_set_default,
};

static int netdev_add(struct netif *lwip_netif)
{
  129150:	e92d4800 	push	{fp, lr}
  129154:	e28db004 	add	fp, sp, #4
  129158:	e24dd018 	sub	sp, sp, #24
  12915c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
#define LWIP_NETIF_NAME_LEN 2
    int result = 0;
  129160:	e3a03000 	mov	r3, #0
  129164:	e50b3008 	str	r3, [fp, #-8]
    struct netdev *netdev = RT_NULL;
  129168:	e3a03000 	mov	r3, #0
  12916c:	e50b300c 	str	r3, [fp, #-12]
    char name[LWIP_NETIF_NAME_LEN + 1] = {0};
  129170:	e24b3010 	sub	r3, fp, #16
  129174:	e3a02000 	mov	r2, #0
  129178:	e1c320b0 	strh	r2, [r3]
  12917c:	e5c32002 	strb	r2, [r3, #2]

    RT_ASSERT(lwip_netif);
  129180:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  129184:	e3530000 	cmp	r3, #0
  129188:	1a000005 	bne	1291a4 <netdev_add+0x54>
  12918c:	e300210f 	movw	r2, #271	; 0x10f
  129190:	e3081200 	movw	r1, #33280	; 0x8200
  129194:	e3401014 	movt	r1, #20
  129198:	e3080128 	movw	r0, #33064	; 0x8128
  12919c:	e3400014 	movt	r0, #20
  1291a0:	ebff68fc 	bl	103598 <rt_assert_handler>

    netdev = (struct netdev *)rt_calloc(1, sizeof(struct netdev));
  1291a4:	e3a01044 	mov	r1, #68	; 0x44
  1291a8:	e3a00001 	mov	r0, #1
  1291ac:	ebff6796 	bl	10300c <rt_calloc>
  1291b0:	e50b000c 	str	r0, [fp, #-12]
    if (netdev == RT_NULL)
  1291b4:	e51b300c 	ldr	r3, [fp, #-12]
  1291b8:	e3530000 	cmp	r3, #0
  1291bc:	1a000001 	bne	1291c8 <netdev_add+0x78>
    {
        return -ERR_IF;
  1291c0:	e3a0300c 	mov	r3, #12
  1291c4:	ea000036 	b	1292a4 <netdev_add+0x154>
    }
    
    extern int sal_unet_netdev_set_pf_info(struct netdev *netdev);
    sal_unet_netdev_set_pf_info(netdev);
  1291c8:	e51b000c 	ldr	r0, [fp, #-12]
  1291cc:	ebff6c85 	bl	1043e8 <sal_unet_netdev_set_pf_info>

    rt_strncpy(name, lwip_netif->name, LWIP_NETIF_NAME_LEN);
  1291d0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1291d4:	e2831042 	add	r1, r3, #66	; 0x42
  1291d8:	e24b3010 	sub	r3, fp, #16
  1291dc:	e3a02002 	mov	r2, #2
  1291e0:	e1a00003 	mov	r0, r3
  1291e4:	ebff681d 	bl	103260 <rt_strncpy>
    result = netdev_register(netdev, name, (void *)lwip_netif);
  1291e8:	e24b3010 	sub	r3, fp, #16
  1291ec:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1291f0:	e1a01003 	mov	r1, r3
  1291f4:	e51b000c 	ldr	r0, [fp, #-12]
  1291f8:	ebff6e45 	bl	104b14 <netdev_register>
  1291fc:	e50b0008 	str	r0, [fp, #-8]
    // result = ueth_netdev_register(netdev, name, (void *)lwip_netif);
	
    /* Update netdev info after registered */
    netdev->flags = lwip_netif->flags;
  129200:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  129204:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  129208:	e6ff2073 	uxth	r2, r3
  12920c:	e51b300c 	ldr	r3, [fp, #-12]
  129210:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
    netdev->mtu = lwip_netif->mtu;
  129214:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  129218:	e1d323b8 	ldrh	r2, [r3, #56]	; 0x38
  12921c:	e51b300c 	ldr	r3, [fp, #-12]
  129220:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
    netdev->ops = &lwip_netdev_ops;
  129224:	e51b200c 	ldr	r2, [fp, #-12]
  129228:	e3083108 	movw	r3, #33032	; 0x8108
  12922c:	e3403014 	movt	r3, #20
  129230:	e5823030 	str	r3, [r2, #48]	; 0x30
    netdev->hwaddr_len =  lwip_netif->hwaddr_len;
  129234:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  129238:	e5d3203a 	ldrb	r2, [r3, #58]	; 0x3a
  12923c:	e51b300c 	ldr	r3, [fp, #-12]
  129240:	e5c32020 	strb	r2, [r3, #32]
    rt_memcpy(netdev->hwaddr, lwip_netif->hwaddr, lwip_netif->hwaddr_len);
  129244:	e51b300c 	ldr	r3, [fp, #-12]
  129248:	e2830021 	add	r0, r3, #33	; 0x21
  12924c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  129250:	e283103b 	add	r1, r3, #59	; 0x3b
  129254:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  129258:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
  12925c:	e1a02003 	mov	r2, r3
  129260:	ebff6826 	bl	103300 <rt_memcpy>
    netdev->ip_addr = lwip_netif->ip_addr;
  129264:	e51b300c 	ldr	r3, [fp, #-12]
  129268:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  12926c:	e5922004 	ldr	r2, [r2, #4]
  129270:	e583200c 	str	r2, [r3, #12]
    netdev->gw = lwip_netif->gw;
  129274:	e51b300c 	ldr	r3, [fp, #-12]
  129278:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  12927c:	e592200c 	ldr	r2, [r2, #12]
  129280:	e5832014 	str	r2, [r3, #20]
    netdev->netmask = lwip_netif->netmask;
  129284:	e51b300c 	ldr	r3, [fp, #-12]
  129288:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  12928c:	e5922008 	ldr	r2, [r2, #8]
  129290:	e5832010 	str	r2, [r3, #16]

#ifdef RT_LWIP_DHCP
    netdev_low_level_set_dhcp_status(netdev, RT_TRUE);
  129294:	e3a01001 	mov	r1, #1
  129298:	e51b000c 	ldr	r0, [fp, #-12]
  12929c:	ebff7385 	bl	1060b8 <netdev_low_level_set_dhcp_status>
#endif

    return result;
  1292a0:	e51b3008 	ldr	r3, [fp, #-8]
}
  1292a4:	e1a00003 	mov	r0, r3
  1292a8:	e24bd004 	sub	sp, fp, #4
  1292ac:	e8bd8800 	pop	{fp, pc}

001292b0 <netdev_del>:

static void netdev_del(struct netif *lwip_netif)
{
  1292b0:	e92d4800 	push	{fp, lr}
  1292b4:	e28db004 	add	fp, sp, #4
  1292b8:	e24dd010 	sub	sp, sp, #16
  1292bc:	e50b0010 	str	r0, [fp, #-16]
    char name[LWIP_NETIF_NAME_LEN + 1];
    struct netdev *netdev;

    RT_ASSERT(lwip_netif);
  1292c0:	e51b3010 	ldr	r3, [fp, #-16]
  1292c4:	e3530000 	cmp	r3, #0
  1292c8:	1a000005 	bne	1292e4 <netdev_del+0x34>
  1292cc:	e3a02f4d 	mov	r2, #308	; 0x134
  1292d0:	e308120c 	movw	r1, #33292	; 0x820c
  1292d4:	e3401014 	movt	r1, #20
  1292d8:	e3080128 	movw	r0, #33064	; 0x8128
  1292dc:	e3400014 	movt	r0, #20
  1292e0:	ebff68ac 	bl	103598 <rt_assert_handler>

    rt_strncpy(name, lwip_netif->name, LWIP_NETIF_NAME_LEN);
  1292e4:	e51b3010 	ldr	r3, [fp, #-16]
  1292e8:	e2831042 	add	r1, r3, #66	; 0x42
  1292ec:	e24b300c 	sub	r3, fp, #12
  1292f0:	e3a02002 	mov	r2, #2
  1292f4:	e1a00003 	mov	r0, r3
  1292f8:	ebff67d8 	bl	103260 <rt_strncpy>
    netdev = netdev_get_by_name(name);
  1292fc:	e24b300c 	sub	r3, fp, #12
  129300:	e1a00003 	mov	r0, r3
  129304:	ebff6f26 	bl	104fa4 <netdev_get_by_name>
  129308:	e50b0008 	str	r0, [fp, #-8]
    netdev_unregister(netdev);
  12930c:	e51b0008 	ldr	r0, [fp, #-8]
  129310:	ebff6e6a 	bl	104cc0 <netdev_unregister>
    rt_free(netdev);
  129314:	e51b0008 	ldr	r0, [fp, #-8]
  129318:	ebff6727 	bl	102fbc <rt_free>
}
  12931c:	e320f000 	nop	{0}
  129320:	e24bd004 	sub	sp, fp, #4
  129324:	e8bd8800 	pop	{fp, pc}

00129328 <netdev_flags_sync>:

/* synchronize lwIP network interface device and network interface device flags */
static int netdev_flags_sync(struct netif *lwip_netif)
{
  129328:	e92d4800 	push	{fp, lr}
  12932c:	e28db004 	add	fp, sp, #4
  129330:	e24dd010 	sub	sp, sp, #16
  129334:	e50b0010 	str	r0, [fp, #-16]
    struct netdev *netdev = NULL;
  129338:	e3a03000 	mov	r3, #0
  12933c:	e50b3008 	str	r3, [fp, #-8]

    RT_ASSERT(lwip_netif);
  129340:	e51b3010 	ldr	r3, [fp, #-16]
  129344:	e3530000 	cmp	r3, #0
  129348:	1a000005 	bne	129364 <netdev_flags_sync+0x3c>
  12934c:	e3002141 	movw	r2, #321	; 0x141
  129350:	e3081218 	movw	r1, #33304	; 0x8218
  129354:	e3401014 	movt	r1, #20
  129358:	e3080128 	movw	r0, #33064	; 0x8128
  12935c:	e3400014 	movt	r0, #20
  129360:	ebff688c 	bl	103598 <rt_assert_handler>

    netdev = netdev_get_by_name(lwip_netif->name);
  129364:	e51b3010 	ldr	r3, [fp, #-16]
  129368:	e2833042 	add	r3, r3, #66	; 0x42
  12936c:	e1a00003 	mov	r0, r3
  129370:	ebff6f0b 	bl	104fa4 <netdev_get_by_name>
  129374:	e50b0008 	str	r0, [fp, #-8]
    if (netdev == RT_NULL)
  129378:	e51b3008 	ldr	r3, [fp, #-8]
  12937c:	e3530000 	cmp	r3, #0
  129380:	1a000001 	bne	12938c <netdev_flags_sync+0x64>
    {
        return -ERR_IF;
  129384:	e3a0300c 	mov	r3, #12
  129388:	ea00000d 	b	1293c4 <netdev_flags_sync+0x9c>
    }
    
    netdev->mtu = lwip_netif->mtu;
  12938c:	e51b3010 	ldr	r3, [fp, #-16]
  129390:	e1d323b8 	ldrh	r2, [r3, #56]	; 0x38
  129394:	e51b3008 	ldr	r3, [fp, #-8]
  129398:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
    netdev->flags |= lwip_netif->flags;
  12939c:	e51b3008 	ldr	r3, [fp, #-8]
  1293a0:	e1d322ba 	ldrh	r2, [r3, #42]	; 0x2a
  1293a4:	e51b3010 	ldr	r3, [fp, #-16]
  1293a8:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1293ac:	e6ff3073 	uxth	r3, r3
  1293b0:	e1823003 	orr	r3, r2, r3
  1293b4:	e6ff2073 	uxth	r2, r3
  1293b8:	e51b3008 	ldr	r3, [fp, #-8]
  1293bc:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a

    return ERR_OK;
  1293c0:	e3a03000 	mov	r3, #0
}
  1293c4:	e1a00003 	mov	r0, r3
  1293c8:	e24bd004 	sub	sp, fp, #4
  1293cc:	e8bd8800 	pop	{fp, pc}

001293d0 <ethernetif_linkoutput>:
// #endif /* RT_USING_NETDEV */

static err_t ethernetif_linkoutput(struct netif *netif, struct pbuf *p)
{
  1293d0:	e92d4800 	push	{fp, lr}
  1293d4:	e28db004 	add	fp, sp, #4
  1293d8:	e24dd010 	sub	sp, sp, #16
  1293dc:	e50b0010 	str	r0, [fp, #-16]
  1293e0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    struct eth_device* enetif;

    RT_ASSERT(netif != RT_NULL);
  1293e4:	e51b3010 	ldr	r3, [fp, #-16]
  1293e8:	e3530000 	cmp	r3, #0
  1293ec:	1a000005 	bne	129408 <ethernetif_linkoutput+0x38>
  1293f0:	e3a02f55 	mov	r2, #340	; 0x154
  1293f4:	e308122c 	movw	r1, #33324	; 0x822c
  1293f8:	e3401014 	movt	r1, #20
  1293fc:	e3080134 	movw	r0, #33076	; 0x8134
  129400:	e3400014 	movt	r0, #20
  129404:	ebff6863 	bl	103598 <rt_assert_handler>
    enetif = (struct eth_device*)netif->state;
  129408:	e51b3010 	ldr	r3, [fp, #-16]
  12940c:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  129410:	e50b3008 	str	r3, [fp, #-8]

    if (enetif->eth_tx(&(enetif->parent), p) != RT_EOK)
  129414:	e51b3008 	ldr	r3, [fp, #-8]
  129418:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  12941c:	e51b2008 	ldr	r2, [fp, #-8]
  129420:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  129424:	e1a00002 	mov	r0, r2
  129428:	e12fff33 	blx	r3
  12942c:	e1a03000 	mov	r3, r0
  129430:	e3530000 	cmp	r3, #0
  129434:	0a000001 	beq	129440 <ethernetif_linkoutput+0x70>
    {
        return ERR_IF;
  129438:	e3e0300b 	mvn	r3, #11
  12943c:	ea000000 	b	129444 <ethernetif_linkoutput+0x74>
    }
    return ERR_OK;
  129440:	e3a03000 	mov	r3, #0
}
  129444:	e1a00003 	mov	r0, r3
  129448:	e24bd004 	sub	sp, fp, #4
  12944c:	e8bd8800 	pop	{fp, pc}

00129450 <eth_netif_device_init>:

static err_t eth_netif_device_init(struct netif *netif)
{
  129450:	e92d4800 	push	{fp, lr}
  129454:	e28db004 	add	fp, sp, #4
  129458:	e24dd010 	sub	sp, sp, #16
  12945c:	e50b0010 	str	r0, [fp, #-16]
    struct eth_device *ethif;

    ethif = (struct eth_device*)netif->state;
  129460:	e51b3010 	ldr	r3, [fp, #-16]
  129464:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  129468:	e50b3008 	str	r3, [fp, #-8]
    if (ethif != RT_NULL)
  12946c:	e51b3008 	ldr	r3, [fp, #-8]
  129470:	e3530000 	cmp	r3, #0
  129474:	0a000032 	beq	129544 <eth_netif_device_init+0xf4>
    {
        rt_device_t device;

#ifdef RT_USING_NETDEV
    /* network interface device register */
    netdev_add(netif);
  129478:	e51b0010 	ldr	r0, [fp, #-16]
  12947c:	ebffff33 	bl	129150 <netdev_add>
#endif /* RT_USING_NETDEV */

        /* get device object */
        device = (rt_device_t) ethif;
  129480:	e51b3008 	ldr	r3, [fp, #-8]
  129484:	e50b300c 	str	r3, [fp, #-12]
        if (ueth_device_init(device) != RT_EOK)
  129488:	e51b000c 	ldr	r0, [fp, #-12]
  12948c:	ebff6ca5 	bl	104728 <ueth_device_init>
  129490:	e1a03000 	mov	r3, r0
  129494:	e3530000 	cmp	r3, #0
  129498:	0a000001 	beq	1294a4 <eth_netif_device_init+0x54>
        // if (rt_device_init(device) != RT_EOK)
        {
            return ERR_IF;
  12949c:	e3e0300b 	mvn	r3, #11
  1294a0:	ea000028 	b	129548 <eth_netif_device_init+0xf8>
        }

        /* copy device flags to netif flags */
        netif->flags = (ethif->flags & 0xff);
  1294a4:	e51b3008 	ldr	r3, [fp, #-8]
  1294a8:	e1d336bc 	ldrh	r3, [r3, #108]	; 0x6c
  1294ac:	e6ef2073 	uxtb	r2, r3
  1294b0:	e51b3010 	ldr	r3, [fp, #-16]
  1294b4:	e5c32041 	strb	r2, [r3, #65]	; 0x41
        netif->mtu = ETHERNET_MTU;
  1294b8:	e51b3010 	ldr	r3, [fp, #-16]
  1294bc:	e30025dc 	movw	r2, #1500	; 0x5dc
  1294c0:	e1c323b8 	strh	r2, [r3, #56]	; 0x38
        
        /* set output */
        netif->output       = etharp_output;
  1294c4:	e51b2010 	ldr	r2, [fp, #-16]
  1294c8:	e30e3520 	movw	r3, #58656	; 0xe520
  1294cc:	e3403012 	movt	r3, #18
  1294d0:	e5823014 	str	r3, [r2, #20]
#endif /* LWIP_IPV6_MLD */

#endif /* LWIP_IPV6 */

        /* set default netif */
        if (netif_default == RT_NULL)
  1294d4:	e3043fb8 	movw	r3, #20408	; 0x4fb8
  1294d8:	e3403057 	movt	r3, #87	; 0x57
  1294dc:	e5933000 	ldr	r3, [r3]
  1294e0:	e3530000 	cmp	r3, #0
  1294e4:	1a000003 	bne	1294f8 <eth_netif_device_init+0xa8>
            netif_set_default(ethif->netif);
  1294e8:	e51b3008 	ldr	r3, [fp, #-8]
  1294ec:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  1294f0:	e1a00003 	mov	r0, r3
  1294f4:	ebffc04e 	bl	119634 <netif_set_default>
#if LWIP_DHCP
        /* set interface up */
        netif_set_up(ethif->netif);
  1294f8:	e51b3008 	ldr	r3, [fp, #-8]
  1294fc:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  129500:	e1a00003 	mov	r0, r3
  129504:	ebffc056 	bl	119664 <netif_set_up>
        /* if this interface uses DHCP, start the DHCP client */
        dhcp_start(ethif->netif);
  129508:	e51b3008 	ldr	r3, [fp, #-8]
  12950c:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  129510:	e1a00003 	mov	r0, r3
  129514:	eb0004e0 	bl	12a89c <dhcp_start>
#else
        /* set interface up */
        netif_set_up(ethif->netif);
#endif
        if (ethif->flags & ETHIF_LINK_PHYUP)
  129518:	e51b3008 	ldr	r3, [fp, #-8]
  12951c:	e1d336bc 	ldrh	r3, [r3, #108]	; 0x6c
  129520:	e2033c01 	and	r3, r3, #256	; 0x100
  129524:	e3530000 	cmp	r3, #0
  129528:	0a000003 	beq	12953c <eth_netif_device_init+0xec>
        {
            /* set link_up for this netif */
            netif_set_link_up(ethif->netif);
  12952c:	e51b3008 	ldr	r3, [fp, #-8]
  129530:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  129534:	e1a00003 	mov	r0, r3
  129538:	ebffc0de 	bl	1198b8 <netif_set_link_up>
        }
        return ERR_OK;
  12953c:	e3a03000 	mov	r3, #0
  129540:	ea000000 	b	129548 <eth_netif_device_init+0xf8>
    }

    return ERR_IF;
  129544:	e3e0300b 	mvn	r3, #11
}
  129548:	e1a00003 	mov	r0, r3
  12954c:	e24bd004 	sub	sp, fp, #4
  129550:	e8bd8800 	pop	{fp, pc}

00129554 <eth_device_init_with_flag>:

/* Keep old drivers compatible in RT-Thread */
rt_err_t eth_device_init_with_flag(struct eth_device *dev, const char *name, rt_uint16_t flags)
{
  129554:	e92d4800 	push	{fp, lr}
  129558:	e28db004 	add	fp, sp, #4
  12955c:	e24dd038 	sub	sp, sp, #56	; 0x38
  129560:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  129564:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  129568:	e1a03002 	mov	r3, r2
  12956c:	e14b32b6 	strh	r3, [fp, #-38]	; 0xffffffda
    struct netif* netif;
#if LWIP_NETIF_HOSTNAME
#define LWIP_HOSTNAME_LEN 16
    char *hostname = RT_NULL;
  129570:	e3a03000 	mov	r3, #0
  129574:	e50b3008 	str	r3, [fp, #-8]
    netif = (struct netif*) rt_calloc (1, sizeof(struct netif) + LWIP_HOSTNAME_LEN);
  129578:	e3a01098 	mov	r1, #152	; 0x98
  12957c:	e3a00001 	mov	r0, #1
  129580:	ebff66a1 	bl	10300c <rt_calloc>
  129584:	e50b000c 	str	r0, [fp, #-12]
#else
    netif = (struct netif*) rt_calloc (1, sizeof(struct netif));
#endif
    if (netif == RT_NULL)
  129588:	e51b300c 	ldr	r3, [fp, #-12]
  12958c:	e3530000 	cmp	r3, #0
  129590:	1a000004 	bne	1295a8 <eth_device_init_with_flag+0x54>
    {
        rt_kprintf("malloc netif failed\n");
  129594:	e3080148 	movw	r0, #33096	; 0x8148
  129598:	e3400014 	movt	r0, #20
  12959c:	ebff66dc 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  1295a0:	e3e03000 	mvn	r3, #0
  1295a4:	ea00005b 	b	129718 <eth_device_init_with_flag+0x1c4>
    }

    /* set netif */
    dev->netif = netif;
  1295a8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1295ac:	e51b200c 	ldr	r2, [fp, #-12]
  1295b0:	e5832044 	str	r2, [r3, #68]	; 0x44
    /* device flags, which will be set to netif flags when initializing */
    dev->flags = flags;
  1295b4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1295b8:	e15b22b6 	ldrh	r2, [fp, #-38]	; 0xffffffda
  1295bc:	e1c326bc 	strh	r2, [r3, #108]	; 0x6c
    /* link changed status of device */
    dev->link_changed = 0x00;
  1295c0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1295c4:	e3a02000 	mov	r2, #0
  1295c8:	e5c3206e 	strb	r2, [r3, #110]	; 0x6e
    dev->parent.type = RT_Device_Class_NetIf;
  1295cc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1295d0:	e3a02002 	mov	r2, #2
  1295d4:	e5832018 	str	r2, [r3, #24]
    /* register to RT-Thread device manager */
   // rt_device_register(&(dev->parent), name, RT_DEVICE_FLAG_RDWR);
    ueth_device_register(&(dev->parent), name, RT_DEVICE_FLAG_RDWR);
  1295d8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1295dc:	e3a02003 	mov	r2, #3
  1295e0:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  1295e4:	e1a00003 	mov	r0, r3
  1295e8:	ebff6bc1 	bl	1044f4 <ueth_device_register>
    rt_sem_init(&(dev->tx_ack), name, 0, RT_IPC_FLAG_FIFO);
  1295ec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1295f0:	e2830048 	add	r0, r3, #72	; 0x48
  1295f4:	e3a03000 	mov	r3, #0
  1295f8:	e3a02000 	mov	r2, #0
  1295fc:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  129600:	ebff5ea1 	bl	10108c <rt_sem_init>

    /* set name */
    netif->name[0] = name[0];
  129604:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  129608:	e5d32000 	ldrb	r2, [r3]
  12960c:	e51b300c 	ldr	r3, [fp, #-12]
  129610:	e5c32042 	strb	r2, [r3, #66]	; 0x42
    netif->name[1] = name[1];
  129614:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  129618:	e5d32001 	ldrb	r2, [r3, #1]
  12961c:	e51b300c 	ldr	r3, [fp, #-12]
  129620:	e5c32043 	strb	r2, [r3, #67]	; 0x43

    /* set hw address to 6 */
    netif->hwaddr_len   = 6;
  129624:	e51b300c 	ldr	r3, [fp, #-12]
  129628:	e3a02006 	mov	r2, #6
  12962c:	e5c3203a 	strb	r2, [r3, #58]	; 0x3a
    /* maximum transfer unit */
    netif->mtu          = ETHERNET_MTU;
  129630:	e51b300c 	ldr	r3, [fp, #-12]
  129634:	e30025dc 	movw	r2, #1500	; 0x5dc
  129638:	e1c323b8 	strh	r2, [r3, #56]	; 0x38

    /* set linkoutput */
    netif->linkoutput   = ethernetif_linkoutput;
  12963c:	e51b200c 	ldr	r2, [fp, #-12]
  129640:	e30933d0 	movw	r3, #37840	; 0x93d0
  129644:	e3403012 	movt	r3, #18
  129648:	e5823018 	str	r3, [r2, #24]
        
    /* get hardware MAC address */
    ueth_device_control(&(dev->parent), NIOCTL_GADDR, netif->hwaddr);
  12964c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  129650:	e51b300c 	ldr	r3, [fp, #-12]
  129654:	e283303b 	add	r3, r3, #59	; 0x3b
  129658:	e1a02003 	mov	r2, r3
  12965c:	e3a01001 	mov	r1, #1
  129660:	ebff6cb0 	bl	104928 <ueth_device_control>
    

#if LWIP_NETIF_HOSTNAME
    /* Initialize interface hostname */
    hostname = (char *)netif + sizeof(struct netif);
  129664:	e51b300c 	ldr	r3, [fp, #-12]
  129668:	e2833088 	add	r3, r3, #136	; 0x88
  12966c:	e50b3008 	str	r3, [fp, #-8]
    rt_sprintf(hostname, "rtthread_%02x%02x", name[0], name[1]);
  129670:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  129674:	e5d33000 	ldrb	r3, [r3]
  129678:	e1a02003 	mov	r2, r3
  12967c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  129680:	e2833001 	add	r3, r3, #1
  129684:	e5d33000 	ldrb	r3, [r3]
  129688:	e3081160 	movw	r1, #33120	; 0x8160
  12968c:	e3401014 	movt	r1, #20
  129690:	e51b0008 	ldr	r0, [fp, #-8]
  129694:	ebff667c 	bl	10308c <rt_sprintf>
    netif->hostname = hostname;
  129698:	e51b300c 	ldr	r3, [fp, #-12]
  12969c:	e51b2008 	ldr	r2, [fp, #-8]
  1296a0:	e5832034 	str	r2, [r3, #52]	; 0x34
#endif /* LWIP_NETIF_HOSTNAME */
    /* if tcp thread has been started up, we add this netif to the system */
    if (rt_thread_find("tcpip") != RT_NULL)
  1296a4:	e3080174 	movw	r0, #33140	; 0x8174
  1296a8:	e3400014 	movt	r0, #20
  1296ac:	ebff6271 	bl	102078 <rt_thread_find>
  1296b0:	e1a03000 	mov	r3, r0
  1296b4:	e3530000 	cmp	r3, #0
  1296b8:	0a000013 	beq	12970c <eth_device_init_with_flag+0x1b8>
#if !LWIP_DHCP
        ipaddr.addr = inet_addr(RT_LWIP_IPADDR);
        gw.addr = inet_addr(RT_LWIP_GWADDR);
        netmask.addr = inet_addr(RT_LWIP_MSKADDR);
#else        
        IP4_ADDR(&ipaddr, 0, 0, 0, 0);
  1296bc:	e3a03000 	mov	r3, #0
  1296c0:	e50b3010 	str	r3, [fp, #-16]
        IP4_ADDR(&gw, 0, 0, 0, 0);
  1296c4:	e3a03000 	mov	r3, #0
  1296c8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        IP4_ADDR(&netmask, 0, 0, 0, 0);
  1296cc:	e3a03000 	mov	r3, #0
  1296d0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
#endif
        netifapi_netif_add(netif, &ipaddr, &netmask, &gw, dev, eth_netif_device_init, tcpip_input);
  1296d4:	e24b0018 	sub	r0, fp, #24
  1296d8:	e24b2014 	sub	r2, fp, #20
  1296dc:	e24b1010 	sub	r1, fp, #16
  1296e0:	e3053e04 	movw	r3, #24068	; 0x5e04
  1296e4:	e3403011 	movt	r3, #17
  1296e8:	e58d3008 	str	r3, [sp, #8]
  1296ec:	e3093450 	movw	r3, #37968	; 0x9450
  1296f0:	e3403012 	movt	r3, #18
  1296f4:	e58d3004 	str	r3, [sp, #4]
  1296f8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1296fc:	e58d3000 	str	r3, [sp]
  129700:	e1a03000 	mov	r3, r0
  129704:	e51b000c 	ldr	r0, [fp, #-12]
  129708:	ebff9c94 	bl	110960 <netifapi_netif_add>
    }
#ifdef RT_USING_NETDEV
    /* network interface device flags synchronize */
    netdev_flags_sync(netif);
  12970c:	e51b000c 	ldr	r0, [fp, #-12]
  129710:	ebffff04 	bl	129328 <netdev_flags_sync>
#endif /* RT_USING_NETDEV */
    return RT_EOK;
  129714:	e3a03000 	mov	r3, #0
}
  129718:	e1a00003 	mov	r0, r3
  12971c:	e24bd004 	sub	sp, fp, #4
  129720:	e8bd8800 	pop	{fp, pc}

00129724 <eth_device_init>:

rt_err_t eth_device_init(struct eth_device * dev, const char *name)
{
  129724:	e92d4800 	push	{fp, lr}
  129728:	e28db004 	add	fp, sp, #4
  12972c:	e24dd010 	sub	sp, sp, #16
  129730:	e50b0010 	str	r0, [fp, #-16]
  129734:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    rt_uint16_t flags = NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
  129738:	e3a0300a 	mov	r3, #10
  12973c:	e14b30b6 	strh	r3, [fp, #-6]

#if LWIP_IGMP
    /* IGMP support */
    flags |= NETIF_FLAG_IGMP;
  129740:	e15b30b6 	ldrh	r3, [fp, #-6]
  129744:	e3833020 	orr	r3, r3, #32
  129748:	e14b30b6 	strh	r3, [fp, #-6]
#endif
    return eth_device_init_with_flag(dev, name, flags);
  12974c:	e15b30b6 	ldrh	r3, [fp, #-6]
  129750:	e1a02003 	mov	r2, r3
  129754:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  129758:	e51b0010 	ldr	r0, [fp, #-16]
  12975c:	ebffff7c 	bl	129554 <eth_device_init_with_flag>
  129760:	e1a03000 	mov	r3, r0
}
  129764:	e1a00003 	mov	r0, r3
  129768:	e24bd004 	sub	sp, fp, #4
  12976c:	e8bd8800 	pop	{fp, pc}

00129770 <eth_device_deinit>:

void eth_device_deinit(struct eth_device *dev)
{
  129770:	e92d4800 	push	{fp, lr}
  129774:	e28db004 	add	fp, sp, #4
  129778:	e24dd010 	sub	sp, sp, #16
  12977c:	e50b0010 	str	r0, [fp, #-16]
    struct netif* netif = dev->netif;
  129780:	e51b3010 	ldr	r3, [fp, #-16]
  129784:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  129788:	e50b3008 	str	r3, [fp, #-8]

#if LWIP_DHCP
    dhcp_stop(netif);
  12978c:	e51b0008 	ldr	r0, [fp, #-8]
  129790:	eb0008b9 	bl	12ba7c <dhcp_stop>
    dhcp_cleanup(netif);
  129794:	e51b0008 	ldr	r0, [fp, #-8]
  129798:	eb000423 	bl	12a82c <dhcp_cleanup>
#endif
    netif_set_down(netif);
  12979c:	e51b0008 	ldr	r0, [fp, #-8]
  1297a0:	ebffc004 	bl	1197b8 <netif_set_down>
    netif_remove(netif);
  1297a4:	e51b0008 	ldr	r0, [fp, #-8]
  1297a8:	ebffbe9d 	bl	119224 <netif_remove>
// #ifdef RT_USING_NETDEV
    netdev_del(netif);
  1297ac:	e51b0008 	ldr	r0, [fp, #-8]
  1297b0:	ebfffebe 	bl	1292b0 <netdev_del>
// #endif
    ueth_device_close(&(dev->parent));
  1297b4:	e51b3010 	ldr	r3, [fp, #-16]
  1297b8:	e1a00003 	mov	r0, r3
  1297bc:	ebff6c16 	bl	10481c <ueth_device_close>
    ueth_device_unregister(&(dev->parent));
  1297c0:	e51b3010 	ldr	r3, [fp, #-16]
  1297c4:	e1a00003 	mov	r0, r3
  1297c8:	ebff6b9b 	bl	10463c <ueth_device_unregister>
    rt_sem_detach(&(dev->tx_ack));
  1297cc:	e51b3010 	ldr	r3, [fp, #-16]
  1297d0:	e2833048 	add	r3, r3, #72	; 0x48
  1297d4:	e1a00003 	mov	r0, r3
  1297d8:	ebff5e71 	bl	1011a4 <rt_sem_detach>
    rt_free(netif);
  1297dc:	e51b0008 	ldr	r0, [fp, #-8]
  1297e0:	ebff65f5 	bl	102fbc <rt_free>
}
  1297e4:	e320f000 	nop	{0}
  1297e8:	e24bd004 	sub	sp, fp, #4
  1297ec:	e8bd8800 	pop	{fp, pc}

001297f0 <eth_device_linkchange>:
}
#endif /* SAL_USING_AF_UNIX */

#ifndef LWIP_NO_RX_THREAD
rt_err_t eth_device_linkchange(struct eth_device* dev, rt_bool_t up)
{
  1297f0:	e92d4800 	push	{fp, lr}
  1297f4:	e28db004 	add	fp, sp, #4
  1297f8:	e24dd010 	sub	sp, sp, #16
  1297fc:	e50b0010 	str	r0, [fp, #-16]
  129800:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    // rt_uint32_t level;

    RT_ASSERT(dev != RT_NULL);
  129804:	e51b3010 	ldr	r3, [fp, #-16]
  129808:	e3530000 	cmp	r3, #0
  12980c:	1a000005 	bne	129828 <eth_device_linkchange+0x38>
  129810:	e3a02e2b 	mov	r2, #688	; 0x2b0
  129814:	e3081244 	movw	r1, #33348	; 0x8244
  129818:	e3401014 	movt	r1, #20
  12981c:	e308017c 	movw	r0, #33148	; 0x817c
  129820:	e3400014 	movt	r0, #20
  129824:	ebff675b 	bl	103598 <rt_assert_handler>

    // level = rt_hw_interrupt_disable();
    dev->link_changed = 0x01;
  129828:	e51b3010 	ldr	r3, [fp, #-16]
  12982c:	e3a02001 	mov	r2, #1
  129830:	e5c3206e 	strb	r2, [r3, #110]	; 0x6e
    if (up == RT_TRUE)
  129834:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  129838:	e3530001 	cmp	r3, #1
  12983c:	1a000003 	bne	129850 <eth_device_linkchange+0x60>
        dev->link_status = 0x01;
  129840:	e51b3010 	ldr	r3, [fp, #-16]
  129844:	e3a02001 	mov	r2, #1
  129848:	e5c3206f 	strb	r2, [r3, #111]	; 0x6f
  12984c:	ea000002 	b	12985c <eth_device_linkchange+0x6c>
    else
        dev->link_status = 0x00;
  129850:	e51b3010 	ldr	r3, [fp, #-16]
  129854:	e3a02000 	mov	r2, #0
  129858:	e5c3206f 	strb	r2, [r3, #111]	; 0x6f
    // rt_hw_interrupt_enable(level);
    
    // rt_uint32_t level;
    // level = rt_hw_interrupt_disable();
    int status = dev->link_status;
  12985c:	e51b3010 	ldr	r3, [fp, #-16]
  129860:	e5d3306f 	ldrb	r3, [r3, #111]	; 0x6f
  129864:	e50b3008 	str	r3, [fp, #-8]
    dev->link_changed = 0x00;
  129868:	e51b3010 	ldr	r3, [fp, #-16]
  12986c:	e3a02000 	mov	r2, #0
  129870:	e5c3206e 	strb	r2, [r3, #110]	; 0x6e
    // rt_hw_interrupt_enable(level);

    if (status)
  129874:	e51b3008 	ldr	r3, [fp, #-8]
  129878:	e3530000 	cmp	r3, #0
  12987c:	0a000007 	beq	1298a0 <eth_device_linkchange+0xb0>
        netifapi_netif_set_link_up(dev->netif);
  129880:	e51b3010 	ldr	r3, [fp, #-16]
  129884:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  129888:	e3a02000 	mov	r2, #0
  12988c:	e30918b8 	movw	r1, #39096	; 0x98b8
  129890:	e3401011 	movt	r1, #17
  129894:	e1a00003 	mov	r0, r3
  129898:	ebff9c8e 	bl	110ad8 <netifapi_netif_common>
  12989c:	ea000006 	b	1298bc <eth_device_linkchange+0xcc>
    else
        netifapi_netif_set_link_down(dev->netif);
  1298a0:	e51b3010 	ldr	r3, [fp, #-16]
  1298a4:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  1298a8:	e3a02000 	mov	r2, #0
  1298ac:	e3091968 	movw	r1, #39272	; 0x9968
  1298b0:	e3401011 	movt	r1, #17
  1298b4:	e1a00003 	mov	r0, r3
  1298b8:	ebff9c86 	bl	110ad8 <netifapi_netif_common>

    return RT_EOK;
  1298bc:	e3a03000 	mov	r3, #0
}
  1298c0:	e1a00003 	mov	r0, r3
  1298c4:	e24bd004 	sub	sp, fp, #4
  1298c8:	e8bd8800 	pop	{fp, pc}

001298cc <eth_rx_thread_entry>:

#ifndef LWIP_NO_RX_THREAD
/* Ethernet Rx Thread */
extern void* ueth_rx_interrupt_detect(void);
static void eth_rx_thread_entry(void* parameter)
{
  1298cc:	e92d4800 	push	{fp, lr}
  1298d0:	e28db004 	add	fp, sp, #4
  1298d4:	e24dd010 	sub	sp, sp, #16
  1298d8:	e50b0010 	str	r0, [fp, #-16]
    struct eth_device* device;
    struct pbuf *p;

    while (!eth_init_done)
  1298dc:	ea000001 	b	1298e8 <eth_rx_thread_entry+0x1c>
    {
        rt_thread_mdelay(10);
  1298e0:	e3a0000a 	mov	r0, #10
  1298e4:	ebff6164 	bl	101e7c <rt_thread_mdelay>
    while (!eth_init_done)
  1298e8:	e30e337c 	movw	r3, #58236	; 0xe37c
  1298ec:	e3403014 	movt	r3, #20
  1298f0:	e5933000 	ldr	r3, [r3]
  1298f4:	e3530000 	cmp	r3, #0
  1298f8:	0afffff8 	beq	1298e0 <eth_rx_thread_entry+0x14>
    }

    while (1)
    {
        device = (struct eth_device*)ueth_rx_interrupt_detect();
  1298fc:	eb002e0c 	bl	135134 <ueth_rx_interrupt_detect>
  129900:	e50b0008 	str	r0, [fp, #-8]
        if(device->eth_rx == RT_NULL) break;
  129904:	e51b3008 	ldr	r3, [fp, #-8]
  129908:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  12990c:	e3530000 	cmp	r3, #0
  129910:	0a00001a 	beq	129980 <eth_rx_thread_entry+0xb4>

        /* receive all of buffer */
        while (1)
        {
            p = device->eth_rx(&(device->parent));
  129914:	e51b3008 	ldr	r3, [fp, #-8]
  129918:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  12991c:	e51b2008 	ldr	r2, [fp, #-8]
  129920:	e1a00002 	mov	r0, r2
  129924:	e12fff33 	blx	r3
  129928:	e50b000c 	str	r0, [fp, #-12]
            if (p != RT_NULL)
  12992c:	e51b300c 	ldr	r3, [fp, #-12]
  129930:	e3530000 	cmp	r3, #0
  129934:	0a00000f 	beq	129978 <eth_rx_thread_entry+0xac>
            {
                /* notify to upper layer */
                if(device->netif->input(p, device->netif) != ERR_OK)
  129938:	e51b3008 	ldr	r3, [fp, #-8]
  12993c:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  129940:	e5933010 	ldr	r3, [r3, #16]
  129944:	e51b2008 	ldr	r2, [fp, #-8]
  129948:	e5922044 	ldr	r2, [r2, #68]	; 0x44
  12994c:	e1a01002 	mov	r1, r2
  129950:	e51b000c 	ldr	r0, [fp, #-12]
  129954:	e12fff33 	blx	r3
  129958:	e1a03000 	mov	r3, r0
  12995c:	e3530000 	cmp	r3, #0
  129960:	0affffeb 	beq	129914 <eth_rx_thread_entry+0x48>
                {
                    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: Input error\n"));
                    pbuf_free(p);
  129964:	e51b000c 	ldr	r0, [fp, #-12]
  129968:	ebffc477 	bl	11ab4c <pbuf_free>
                    p = NULL;
  12996c:	e3a03000 	mov	r3, #0
  129970:	e50b300c 	str	r3, [fp, #-12]
            p = device->eth_rx(&(device->parent));
  129974:	eaffffe6 	b	129914 <eth_rx_thread_entry+0x48>
                }
            }
            else break;
  129978:	e320f000 	nop	{0}
        device = (struct eth_device*)ueth_rx_interrupt_detect();
  12997c:	eaffffde 	b	1298fc <eth_rx_thread_entry+0x30>
        if(device->eth_rx == RT_NULL) break;
  129980:	e320f000 	nop	{0}
        }
    }
}
  129984:	e320f000 	nop	{0}
  129988:	e24bd004 	sub	sp, fp, #4
  12998c:	e8bd8800 	pop	{fp, pc}

00129990 <eth_system_device_init>:
/* this function does not need, 
 * use eth_system_device_init_private() 
 * call by lwip_system_init(). 
 */
int eth_system_device_init(void)
{
  129990:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  129994:	e28db000 	add	fp, sp, #0
    return 0;
  129998:	e3a03000 	mov	r3, #0
}
  12999c:	e1a00003 	mov	r0, r3
  1299a0:	e28bd000 	add	sp, fp, #0
  1299a4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1299a8:	e12fff1e 	bx	lr

001299ac <eth_system_device_init_private>:

int eth_system_device_init_private(void)
{
  1299ac:	e92d4800 	push	{fp, lr}
  1299b0:	e28db004 	add	fp, sp, #4
  1299b4:	e24dd010 	sub	sp, sp, #16
    rt_err_t result = RT_EOK;
  1299b8:	e3a03000 	mov	r3, #0
  1299bc:	e50b3008 	str	r3, [fp, #-8]

    /* initialize Rx thread. */
#ifndef LWIP_NO_RX_THREAD
    rt_thread_t erx_tid = rt_thread_create("erx", eth_rx_thread_entry, RT_NULL, RT_LWIP_ETHTHREAD_STACKSIZE, 25, 16);
  1299c0:	e3a03010 	mov	r3, #16
  1299c4:	e58d3004 	str	r3, [sp, #4]
  1299c8:	e3a03019 	mov	r3, #25
  1299cc:	e58d3000 	str	r3, [sp]
  1299d0:	e3a03a02 	mov	r3, #8192	; 0x2000
  1299d4:	e3a02000 	mov	r2, #0
  1299d8:	e30918cc 	movw	r1, #39116	; 0x98cc
  1299dc:	e3401012 	movt	r1, #18
  1299e0:	e308018c 	movw	r0, #33164	; 0x818c
  1299e4:	e3400014 	movt	r0, #20
  1299e8:	ebff61c1 	bl	1020f4 <rt_thread_create>
  1299ec:	e50b000c 	str	r0, [fp, #-12]
    result = rt_thread_startup(erx_tid);
  1299f0:	e51b000c 	ldr	r0, [fp, #-12]
  1299f4:	ebff61f3 	bl	1021c8 <rt_thread_startup>
  1299f8:	e50b0008 	str	r0, [fp, #-8]
    RT_ASSERT(result == RT_EOK);
  1299fc:	e51b3008 	ldr	r3, [fp, #-8]
  129a00:	e3530000 	cmp	r3, #0
  129a04:	0a000005 	beq	129a20 <eth_system_device_init_private+0x74>
  129a08:	e300230d 	movw	r2, #781	; 0x30d
  129a0c:	e308125c 	movw	r1, #33372	; 0x825c
  129a10:	e3401014 	movt	r1, #20
  129a14:	e3080190 	movw	r0, #33168	; 0x8190
  129a18:	e3400014 	movt	r0, #20
  129a1c:	ebff66dd 	bl	103598 <rt_assert_handler>
#endif
    return (int)result;
  129a20:	e51b3008 	ldr	r3, [fp, #-8]
}
  129a24:	e1a00003 	mov	r0, r3
  129a28:	e24bd004 	sub	sp, fp, #4
  129a2c:	e8bd8800 	pop	{fp, pc}

00129a30 <set_if>:

void set_if(char* netif_name, char* ip_addr, char* gw_addr, char* nm_addr)
{
  129a30:	e92d4800 	push	{fp, lr}
  129a34:	e28db004 	add	fp, sp, #4
  129a38:	e24dd020 	sub	sp, sp, #32
  129a3c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  129a40:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  129a44:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  129a48:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    ip4_addr_t *ip;
    ip4_addr_t addr;
    struct netif * netif = netif_list;
  129a4c:	e3043fb4 	movw	r3, #20404	; 0x4fb4
  129a50:	e3403057 	movt	r3, #87	; 0x57
  129a54:	e5933000 	ldr	r3, [r3]
  129a58:	e50b3008 	str	r3, [fp, #-8]

    if(strlen(netif_name) > sizeof(netif->name))
  129a5c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  129a60:	eb005c32 	bl	140b30 <strlen>
  129a64:	e1a03000 	mov	r3, r0
  129a68:	e3530002 	cmp	r3, #2
  129a6c:	9a000017 	bls	129ad0 <set_if+0xa0>
    {
        rt_kprintf("network interface name too long!\r\n");
  129a70:	e30801a4 	movw	r0, #33188	; 0x81a4
  129a74:	e3400014 	movt	r0, #20
  129a78:	ebff65a5 	bl	103114 <rt_kprintf>
        return;
  129a7c:	ea000041 	b	129b88 <set_if+0x158>
    }

    while(netif != RT_NULL)
    {
        if(strncmp(netif_name, netif->name, sizeof(netif->name)) == 0)
  129a80:	e51b3008 	ldr	r3, [fp, #-8]
  129a84:	e2833042 	add	r3, r3, #66	; 0x42
  129a88:	e3a02002 	mov	r2, #2
  129a8c:	e1a01003 	mov	r1, r3
  129a90:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  129a94:	eb005c51 	bl	140be0 <strncmp>
  129a98:	e1a03000 	mov	r3, r0
  129a9c:	e3530000 	cmp	r3, #0
  129aa0:	0a00000e 	beq	129ae0 <set_if+0xb0>
            break;

        netif = netif->next;
  129aa4:	e51b3008 	ldr	r3, [fp, #-8]
  129aa8:	e5933000 	ldr	r3, [r3]
  129aac:	e50b3008 	str	r3, [fp, #-8]
        if( netif == RT_NULL )
  129ab0:	e51b3008 	ldr	r3, [fp, #-8]
  129ab4:	e3530000 	cmp	r3, #0
  129ab8:	1a000004 	bne	129ad0 <set_if+0xa0>
        {
            rt_kprintf("network interface: %s not found!\r\n", netif_name);
  129abc:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  129ac0:	e30801c8 	movw	r0, #33224	; 0x81c8
  129ac4:	e3400014 	movt	r0, #20
  129ac8:	ebff6591 	bl	103114 <rt_kprintf>
            return;
  129acc:	ea00002d 	b	129b88 <set_if+0x158>
    while(netif != RT_NULL)
  129ad0:	e51b3008 	ldr	r3, [fp, #-8]
  129ad4:	e3530000 	cmp	r3, #0
  129ad8:	1affffe8 	bne	129a80 <set_if+0x50>
  129adc:	ea000000 	b	129ae4 <set_if+0xb4>
            break;
  129ae0:	e320f000 	nop	{0}
        }
    }

    ip = (ip4_addr_t *)&addr;
  129ae4:	e24b3010 	sub	r3, fp, #16
  129ae8:	e50b300c 	str	r3, [fp, #-12]

    /* set ip address */
    if ((ip_addr != RT_NULL) && ip4addr_aton(ip_addr, &addr))
  129aec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  129af0:	e3530000 	cmp	r3, #0
  129af4:	0a000009 	beq	129b20 <set_if+0xf0>
  129af8:	e24b3010 	sub	r3, fp, #16
  129afc:	e1a01003 	mov	r1, r3
  129b00:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  129b04:	eb0021e1 	bl	132290 <ip4addr_aton>
  129b08:	e1a03000 	mov	r3, r0
  129b0c:	e3530000 	cmp	r3, #0
  129b10:	0a000002 	beq	129b20 <set_if+0xf0>
    {
        netif_set_ipaddr(netif, ip);
  129b14:	e51b100c 	ldr	r1, [fp, #-12]
  129b18:	e51b0008 	ldr	r0, [fp, #-8]
  129b1c:	ebffbe4b 	bl	119450 <netif_set_ipaddr>
    }

    /* set gateway address */
    if ((gw_addr != RT_NULL) && ip4addr_aton(gw_addr, &addr))
  129b20:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  129b24:	e3530000 	cmp	r3, #0
  129b28:	0a000009 	beq	129b54 <set_if+0x124>
  129b2c:	e24b3010 	sub	r3, fp, #16
  129b30:	e1a01003 	mov	r1, r3
  129b34:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  129b38:	eb0021d4 	bl	132290 <ip4addr_aton>
  129b3c:	e1a03000 	mov	r3, r0
  129b40:	e3530000 	cmp	r3, #0
  129b44:	0a000002 	beq	129b54 <set_if+0x124>
    {
        netif_set_gw(netif, ip);
  129b48:	e51b100c 	ldr	r1, [fp, #-12]
  129b4c:	e51b0008 	ldr	r0, [fp, #-8]
  129b50:	ebffbe85 	bl	11956c <netif_set_gw>
    }

    /* set netmask address */
    if ((nm_addr != RT_NULL) && ip4addr_aton(nm_addr, &addr))
  129b54:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  129b58:	e3530000 	cmp	r3, #0
  129b5c:	0a000009 	beq	129b88 <set_if+0x158>
  129b60:	e24b3010 	sub	r3, fp, #16
  129b64:	e1a01003 	mov	r1, r3
  129b68:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  129b6c:	eb0021c7 	bl	132290 <ip4addr_aton>
  129b70:	e1a03000 	mov	r3, r0
  129b74:	e3530000 	cmp	r3, #0
  129b78:	0a000002 	beq	129b88 <set_if+0x158>
    {
        netif_set_netmask(netif, ip);
  129b7c:	e51b100c 	ldr	r1, [fp, #-12]
  129b80:	e51b0008 	ldr	r0, [fp, #-8]
  129b84:	ebffbe91 	bl	1195d0 <netif_set_netmask>
    }
  129b88:	e24bd004 	sub	sp, fp, #4
  129b8c:	e8bd8800 	pop	{fp, pc}

00129b90 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(struct dhcp *dhcp);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
  129b90:	e92d4800 	push	{fp, lr}
  129b94:	e28db004 	add	fp, sp, #4
  if (dhcp_pcb_refcount == 0) {
  129b98:	e30e3258 	movw	r3, #57944	; 0xe258
  129b9c:	e3403014 	movt	r3, #20
  129ba0:	e5d33000 	ldrb	r3, [r3]
  129ba4:	e3530000 	cmp	r3, #0
  129ba8:	1a000039 	bne	129c94 <dhcp_inc_pcb_refcount+0x104>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
  129bac:	e30e3254 	movw	r3, #57940	; 0xe254
  129bb0:	e3403014 	movt	r3, #20
  129bb4:	e5933000 	ldr	r3, [r3]
  129bb8:	e3530000 	cmp	r3, #0
  129bbc:	0a000006 	beq	129bdc <dhcp_inc_pcb_refcount+0x4c>
  129bc0:	e308027c 	movw	r0, #33404	; 0x827c
  129bc4:	e3400014 	movt	r0, #20
  129bc8:	ebff6551 	bl	103114 <rt_kprintf>
  129bcc:	e3a010db 	mov	r1, #219	; 0xdb
  129bd0:	e30802a4 	movw	r0, #33444	; 0x82a4
  129bd4:	e3400014 	movt	r0, #20
  129bd8:	ebff83cd 	bl	10ab14 <sys_arch_assert>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
  129bdc:	ebfffadc 	bl	128754 <udp_new>
  129be0:	e1a02000 	mov	r2, r0
  129be4:	e30e3254 	movw	r3, #57940	; 0xe254
  129be8:	e3403014 	movt	r3, #20
  129bec:	e5832000 	str	r2, [r3]

    if (dhcp_pcb == NULL) {
  129bf0:	e30e3254 	movw	r3, #57940	; 0xe254
  129bf4:	e3403014 	movt	r3, #20
  129bf8:	e5933000 	ldr	r3, [r3]
  129bfc:	e3530000 	cmp	r3, #0
  129c00:	1a000001 	bne	129c0c <dhcp_inc_pcb_refcount+0x7c>
      return ERR_MEM;
  129c04:	e3e03000 	mvn	r3, #0
  129c08:	ea00002a 	b	129cb8 <dhcp_inc_pcb_refcount+0x128>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
  129c0c:	e30e3254 	movw	r3, #57940	; 0xe254
  129c10:	e3403014 	movt	r3, #20
  129c14:	e5933000 	ldr	r3, [r3]
  129c18:	e5d32008 	ldrb	r2, [r3, #8]
  129c1c:	e30e3254 	movw	r3, #57940	; 0xe254
  129c20:	e3403014 	movt	r3, #20
  129c24:	e5933000 	ldr	r3, [r3]
  129c28:	e3822020 	orr	r2, r2, #32
  129c2c:	e6ef2072 	uxtb	r2, r2
  129c30:	e5c32008 	strb	r2, [r3, #8]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, DHCP_CLIENT_PORT);
  129c34:	e30e3254 	movw	r3, #57940	; 0xe254
  129c38:	e3403014 	movt	r3, #20
  129c3c:	e5933000 	ldr	r3, [r3]
  129c40:	e3a02044 	mov	r2, #68	; 0x44
  129c44:	e3081e3c 	movw	r1, #36412	; 0x8e3c
  129c48:	e3401014 	movt	r1, #20
  129c4c:	e1a00003 	mov	r0, r3
  129c50:	ebfff9a4 	bl	1282e8 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, DHCP_SERVER_PORT);
  129c54:	e30e3254 	movw	r3, #57940	; 0xe254
  129c58:	e3403014 	movt	r3, #20
  129c5c:	e5933000 	ldr	r3, [r3]
  129c60:	e3a02043 	mov	r2, #67	; 0x43
  129c64:	e3081e3c 	movw	r1, #36412	; 0x8e3c
  129c68:	e3401014 	movt	r1, #20
  129c6c:	e1a00003 	mov	r0, r3
  129c70:	ebfffa12 	bl	1284c0 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
  129c74:	e30e3254 	movw	r3, #57940	; 0xe254
  129c78:	e3403014 	movt	r3, #20
  129c7c:	e5933000 	ldr	r3, [r3]
  129c80:	e3a02000 	mov	r2, #0
  129c84:	e30c18f8 	movw	r1, #51448	; 0xc8f8
  129c88:	e3401012 	movt	r1, #18
  129c8c:	e1a00003 	mov	r0, r3
  129c90:	ebfffa6e 	bl	128650 <udp_recv>
  }

  dhcp_pcb_refcount++;
  129c94:	e30e3258 	movw	r3, #57944	; 0xe258
  129c98:	e3403014 	movt	r3, #20
  129c9c:	e5d33000 	ldrb	r3, [r3]
  129ca0:	e2833001 	add	r3, r3, #1
  129ca4:	e6ef2073 	uxtb	r2, r3
  129ca8:	e30e3258 	movw	r3, #57944	; 0xe258
  129cac:	e3403014 	movt	r3, #20
  129cb0:	e5c32000 	strb	r2, [r3]

  return ERR_OK;
  129cb4:	e3a03000 	mov	r3, #0
}
  129cb8:	e1a00003 	mov	r0, r3
  129cbc:	e8bd8800 	pop	{fp, pc}

00129cc0 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
  129cc0:	e92d4800 	push	{fp, lr}
  129cc4:	e28db004 	add	fp, sp, #4
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
  129cc8:	e30e3258 	movw	r3, #57944	; 0xe258
  129ccc:	e3403014 	movt	r3, #20
  129cd0:	e5d33000 	ldrb	r3, [r3]
  129cd4:	e3530000 	cmp	r3, #0
  129cd8:	1a000006 	bne	129cf8 <dhcp_dec_pcb_refcount+0x38>
  129cdc:	e30802d8 	movw	r0, #33496	; 0x82d8
  129ce0:	e3400014 	movt	r0, #20
  129ce4:	ebff650a 	bl	103114 <rt_kprintf>
  129ce8:	e3a010f5 	mov	r1, #245	; 0xf5
  129cec:	e30802a4 	movw	r0, #33444	; 0x82a4
  129cf0:	e3400014 	movt	r0, #20
  129cf4:	ebff8386 	bl	10ab14 <sys_arch_assert>
  dhcp_pcb_refcount--;
  129cf8:	e30e3258 	movw	r3, #57944	; 0xe258
  129cfc:	e3403014 	movt	r3, #20
  129d00:	e5d33000 	ldrb	r3, [r3]
  129d04:	e2433001 	sub	r3, r3, #1
  129d08:	e6ef2073 	uxtb	r2, r3
  129d0c:	e30e3258 	movw	r3, #57944	; 0xe258
  129d10:	e3403014 	movt	r3, #20
  129d14:	e5c32000 	strb	r2, [r3]

  if (dhcp_pcb_refcount == 0) {
  129d18:	e30e3258 	movw	r3, #57944	; 0xe258
  129d1c:	e3403014 	movt	r3, #20
  129d20:	e5d33000 	ldrb	r3, [r3]
  129d24:	e3530000 	cmp	r3, #0
  129d28:	1a000008 	bne	129d50 <dhcp_dec_pcb_refcount+0x90>
    udp_remove(dhcp_pcb);
  129d2c:	e30e3254 	movw	r3, #57940	; 0xe254
  129d30:	e3403014 	movt	r3, #20
  129d34:	e5933000 	ldr	r3, [r3]
  129d38:	e1a00003 	mov	r0, r3
  129d3c:	ebfffa53 	bl	128690 <udp_remove>
    dhcp_pcb = NULL;
  129d40:	e30e3254 	movw	r3, #57940	; 0xe254
  129d44:	e3403014 	movt	r3, #20
  129d48:	e3a02000 	mov	r2, #0
  129d4c:	e5832000 	str	r2, [r3]
  }
}
  129d50:	e320f000 	nop	{0}
  129d54:	e8bd8800 	pop	{fp, pc}

00129d58 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
  129d58:	e92d4800 	push	{fp, lr}
  129d5c:	e28db004 	add	fp, sp, #4
  129d60:	e24dd010 	sub	sp, sp, #16
  129d64:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  129d68:	e51b3010 	ldr	r3, [fp, #-16]
  129d6c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  129d70:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
  129d74:	e3a0100c 	mov	r1, #12
  129d78:	e51b0008 	ldr	r0, [fp, #-8]
  129d7c:	eb00076b 	bl	12bb30 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
  129d80:	e3083e3c 	movw	r3, #36412	; 0x8e3c
  129d84:	e3403014 	movt	r3, #20
  129d88:	e3082e3c 	movw	r2, #36412	; 0x8e3c
  129d8c:	e3402014 	movt	r2, #20
  129d90:	e3081e3c 	movw	r1, #36412	; 0x8e3c
  129d94:	e3401014 	movt	r1, #20
  129d98:	e51b0010 	ldr	r0, [fp, #-16]
  129d9c:	ebffbcfc 	bl	119194 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
  129da0:	e51b0010 	ldr	r0, [fp, #-16]
  129da4:	eb000420 	bl	12ae2c <dhcp_discover>
}
  129da8:	e320f000 	nop	{0}
  129dac:	e24bd004 	sub	sp, fp, #4
  129db0:	e8bd8800 	pop	{fp, pc}

00129db4 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
  129db4:	e92d4800 	push	{fp, lr}
  129db8:	e28db004 	add	fp, sp, #4
  129dbc:	e24dd010 	sub	sp, sp, #16
  129dc0:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  129dc4:	e51b3010 	ldr	r3, [fp, #-16]
  129dc8:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  129dcc:	e50b3008 	str	r3, [fp, #-8]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
    (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
  129dd0:	e3a01008 	mov	r1, #8
  129dd4:	e51b0008 	ldr	r0, [fp, #-8]
  129dd8:	eb000754 	bl	12bb30 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
  129ddc:	e51b3008 	ldr	r3, [fp, #-8]
  129de0:	e2833028 	add	r3, r3, #40	; 0x28
  129de4:	e3a02000 	mov	r2, #0
  129de8:	e1a01003 	mov	r1, r3
  129dec:	e51b0010 	ldr	r0, [fp, #-16]
  129df0:	eb0012a0 	bl	12e878 <etharp_query>
  129df4:	e1a03000 	mov	r3, r0
  129df8:	e54b3009 	strb	r3, [fp, #-9]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
  129dfc:	e51b3008 	ldr	r3, [fp, #-8]
  129e00:	e5d3300a 	ldrb	r3, [r3, #10]
  129e04:	e35300ff 	cmp	r3, #255	; 0xff
  129e08:	0a000005 	beq	129e24 <dhcp_check+0x70>
    dhcp->tries++;
  129e0c:	e51b3008 	ldr	r3, [fp, #-8]
  129e10:	e5d3300a 	ldrb	r3, [r3, #10]
  129e14:	e2833001 	add	r3, r3, #1
  129e18:	e6ef2073 	uxtb	r2, r3
  129e1c:	e51b3008 	ldr	r3, [fp, #-8]
  129e20:	e5c3200a 	strb	r2, [r3, #10]
  }
  msecs = 500;
  129e24:	e3a03f7d 	mov	r3, #500	; 0x1f4
  129e28:	e14b30bc 	strh	r3, [fp, #-12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  129e2c:	e15b30bc 	ldrh	r3, [fp, #-12]
  129e30:	e2833e1f 	add	r3, r3, #496	; 0x1f0
  129e34:	e2833003 	add	r3, r3, #3
  129e38:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  129e3c:	e3412062 	movt	r2, #4194	; 0x1062
  129e40:	e0c10293 	smull	r0, r1, r3, r2
  129e44:	e1a022c1 	asr	r2, r1, #5
  129e48:	e1a03fc3 	asr	r3, r3, #31
  129e4c:	e0423003 	sub	r3, r2, r3
  129e50:	e6ff2073 	uxth	r2, r3
  129e54:	e51b3008 	ldr	r3, [fp, #-8]
  129e58:	e1c321b6 	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
  129e5c:	e320f000 	nop	{0}
  129e60:	e24bd004 	sub	sp, fp, #4
  129e64:	e8bd8800 	pop	{fp, pc}

00129e68 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif)
{
  129e68:	e92d4800 	push	{fp, lr}
  129e6c:	e28db004 	add	fp, sp, #4
  129e70:	e24dd010 	sub	sp, sp, #16
  129e74:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  129e78:	e51b3010 	ldr	r3, [fp, #-16]
  129e7c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  129e80:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
  129e84:	e30531cc 	movw	r3, #20940	; 0x51cc
  129e88:	e3403057 	movt	r3, #87	; 0x57
  129e8c:	e5d33002 	ldrb	r3, [r3, #2]
  129e90:	e3530000 	cmp	r3, #0
  129e94:	0a00000e 	beq	129ed4 <dhcp_handle_offer+0x6c>
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
  129e98:	e30531d8 	movw	r3, #20952	; 0x51d8
  129e9c:	e3403057 	movt	r3, #87	; 0x57
  129ea0:	e5933008 	ldr	r3, [r3, #8]
  129ea4:	e1a00003 	mov	r0, r3
  129ea8:	ebffb0fc 	bl	1162a0 <lwip_htonl>
  129eac:	e1a02000 	mov	r2, r0
  129eb0:	e51b3008 	ldr	r3, [fp, #-8]
  129eb4:	e5832024 	str	r2, [r3, #36]	; 0x24
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
      ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
  129eb8:	e51b3008 	ldr	r3, [fp, #-8]
  129ebc:	e5933004 	ldr	r3, [r3, #4]
  129ec0:	e5932010 	ldr	r2, [r3, #16]
  129ec4:	e51b3008 	ldr	r3, [fp, #-8]
  129ec8:	e5832028 	str	r2, [r3, #40]	; 0x28
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
      ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
  129ecc:	e51b0010 	ldr	r0, [fp, #-16]
  129ed0:	eb000002 	bl	129ee0 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void*)netif));
  }
}
  129ed4:	e320f000 	nop	{0}
  129ed8:	e24bd004 	sub	sp, fp, #4
  129edc:	e8bd8800 	pop	{fp, pc}

00129ee0 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
  129ee0:	e92d4800 	push	{fp, lr}
  129ee4:	e28db004 	add	fp, sp, #4
  129ee8:	e24dd020 	sub	sp, sp, #32
  129eec:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dhcp *dhcp = netif_dhcp_data(netif);
  129ef0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  129ef4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  129ef8:	e50b300c 	str	r3, [fp, #-12]
  err_t result;
  u16_t msecs;
  u8_t i;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
  129efc:	e3a01001 	mov	r1, #1
  129f00:	e51b000c 	ldr	r0, [fp, #-12]
  129f04:	eb000709 	bl	12bb30 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
  129f08:	e3a02003 	mov	r2, #3
  129f0c:	e51b100c 	ldr	r1, [fp, #-12]
  129f10:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  129f14:	eb000b35 	bl	12cbf0 <dhcp_create_msg>
  129f18:	e1a03000 	mov	r3, r0
  129f1c:	e54b300d 	strb	r3, [fp, #-13]
  if (result == ERR_OK) {
  129f20:	e15b30dd 	ldrsb	r3, [fp, #-13]
  129f24:	e3530000 	cmp	r3, #0
  129f28:	1a000052 	bne	12a078 <dhcp_select+0x198>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  129f2c:	e3a02002 	mov	r2, #2
  129f30:	e3a01039 	mov	r1, #57	; 0x39
  129f34:	e51b000c 	ldr	r0, [fp, #-12]
  129f38:	eb000714 	bl	12bb90 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
  129f3c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  129f40:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  129f44:	e1a01003 	mov	r1, r3
  129f48:	e51b000c 	ldr	r0, [fp, #-12]
  129f4c:	eb00075e 	bl	12bccc <dhcp_option_short>

    /* MUST request the offered IP address */
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
  129f50:	e3a02004 	mov	r2, #4
  129f54:	e3a01032 	mov	r1, #50	; 0x32
  129f58:	e51b000c 	ldr	r0, [fp, #-12]
  129f5c:	eb00070b 	bl	12bb90 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
  129f60:	e51b300c 	ldr	r3, [fp, #-12]
  129f64:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  129f68:	e1a00003 	mov	r0, r3
  129f6c:	ebffb0cb 	bl	1162a0 <lwip_htonl>
  129f70:	e1a03000 	mov	r3, r0
  129f74:	e1a01003 	mov	r1, r3
  129f78:	e51b000c 	ldr	r0, [fp, #-12]
  129f7c:	eb000783 	bl	12bd90 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
  129f80:	e3a02004 	mov	r2, #4
  129f84:	e3a01036 	mov	r1, #54	; 0x36
  129f88:	e51b000c 	ldr	r0, [fp, #-12]
  129f8c:	eb0006ff 	bl	12bb90 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
  129f90:	e51b300c 	ldr	r3, [fp, #-12]
  129f94:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  129f98:	e1a00003 	mov	r0, r3
  129f9c:	ebffb0bf 	bl	1162a0 <lwip_htonl>
  129fa0:	e1a03000 	mov	r3, r0
  129fa4:	e1a01003 	mov	r1, r3
  129fa8:	e51b000c 	ldr	r0, [fp, #-12]
  129fac:	eb000777 	bl	12bd90 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
  129fb0:	e3a02004 	mov	r2, #4
  129fb4:	e3a01037 	mov	r1, #55	; 0x37
  129fb8:	e51b000c 	ldr	r0, [fp, #-12]
  129fbc:	eb0006f3 	bl	12bb90 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  129fc0:	e3a03000 	mov	r3, #0
  129fc4:	e54b3005 	strb	r3, [fp, #-5]
  129fc8:	ea000009 	b	129ff4 <dhcp_select+0x114>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
  129fcc:	e55b2005 	ldrb	r2, [fp, #-5]
  129fd0:	e30d3034 	movw	r3, #53300	; 0xd034
  129fd4:	e3403014 	movt	r3, #20
  129fd8:	e7d33002 	ldrb	r3, [r3, r2]
  129fdc:	e1a01003 	mov	r1, r3
  129fe0:	e51b000c 	ldr	r0, [fp, #-12]
  129fe4:	eb000719 	bl	12bc50 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  129fe8:	e55b3005 	ldrb	r3, [fp, #-5]
  129fec:	e2833001 	add	r3, r3, #1
  129ff0:	e54b3005 	strb	r3, [fp, #-5]
  129ff4:	e55b3005 	ldrb	r3, [fp, #-5]
  129ff8:	e3530003 	cmp	r3, #3
  129ffc:	9afffff2 	bls	129fcc <dhcp_select+0xec>
    }

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
  12a000:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  12a004:	e51b000c 	ldr	r0, [fp, #-12]
  12a008:	eb0007ab 	bl	12bebc <dhcp_option_hostname>
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
  12a00c:	e51b000c 	ldr	r0, [fp, #-12]
  12a010:	eb000c63 	bl	12d1a4 <dhcp_option_trailer>
    /* shrink the pbuf to the actual content length */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  12a014:	e51b300c 	ldr	r3, [fp, #-12]
  12a018:	e593200c 	ldr	r2, [r3, #12]
  12a01c:	e51b300c 	ldr	r3, [fp, #-12]
  12a020:	e1d331b4 	ldrh	r3, [r3, #20]
  12a024:	e28330f0 	add	r3, r3, #240	; 0xf0
  12a028:	e6ff3073 	uxth	r3, r3
  12a02c:	e1a01003 	mov	r1, r3
  12a030:	e1a00002 	mov	r0, r2
  12a034:	ebffc17b 	bl	11a628 <pbuf_realloc>

    /* send broadcast to any DHCP server */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
  12a038:	e30e3254 	movw	r3, #57940	; 0xe254
  12a03c:	e3403014 	movt	r3, #20
  12a040:	e5930000 	ldr	r0, [r3]
  12a044:	e51b300c 	ldr	r3, [fp, #-12]
  12a048:	e593100c 	ldr	r1, [r3, #12]
  12a04c:	e3083e3c 	movw	r3, #36412	; 0x8e3c
  12a050:	e3403014 	movt	r3, #20
  12a054:	e58d3004 	str	r3, [sp, #4]
  12a058:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12a05c:	e58d3000 	str	r3, [sp]
  12a060:	e3a03043 	mov	r3, #67	; 0x43
  12a064:	e3082e40 	movw	r2, #36416	; 0x8e40
  12a068:	e3402014 	movt	r2, #20
  12a06c:	ebfff7cc 	bl	127fa4 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
  12a070:	e51b000c 	ldr	r0, [fp, #-12]
  12a074:	eb000c15 	bl	12d0d0 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
  12a078:	e51b300c 	ldr	r3, [fp, #-12]
  12a07c:	e5d3300a 	ldrb	r3, [r3, #10]
  12a080:	e35300ff 	cmp	r3, #255	; 0xff
  12a084:	0a000005 	beq	12a0a0 <dhcp_select+0x1c0>
    dhcp->tries++;
  12a088:	e51b300c 	ldr	r3, [fp, #-12]
  12a08c:	e5d3300a 	ldrb	r3, [r3, #10]
  12a090:	e2833001 	add	r3, r3, #1
  12a094:	e6ef2073 	uxtb	r2, r3
  12a098:	e51b300c 	ldr	r3, [fp, #-12]
  12a09c:	e5c3200a 	strb	r2, [r3, #10]
  }
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
  12a0a0:	e51b300c 	ldr	r3, [fp, #-12]
  12a0a4:	e5d3300a 	ldrb	r3, [r3, #10]
  12a0a8:	e3530005 	cmp	r3, #5
  12a0ac:	8a000006 	bhi	12a0cc <dhcp_select+0x1ec>
  12a0b0:	e51b300c 	ldr	r3, [fp, #-12]
  12a0b4:	e5d3300a 	ldrb	r3, [r3, #10]
  12a0b8:	e1a02003 	mov	r2, r3
  12a0bc:	e3a03ffa 	mov	r3, #1000	; 0x3e8
  12a0c0:	e1a03213 	lsl	r3, r3, r2
  12a0c4:	e6ff3073 	uxth	r3, r3
  12a0c8:	ea000000 	b	12a0d0 <dhcp_select+0x1f0>
  12a0cc:	e30e3a60 	movw	r3, #60000	; 0xea60
  12a0d0:	e14b31b0 	strh	r3, [fp, #-16]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  12a0d4:	e15b31b0 	ldrh	r3, [fp, #-16]
  12a0d8:	e2833e1f 	add	r3, r3, #496	; 0x1f0
  12a0dc:	e2833003 	add	r3, r3, #3
  12a0e0:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  12a0e4:	e3412062 	movt	r2, #4194	; 0x1062
  12a0e8:	e0c10293 	smull	r0, r1, r3, r2
  12a0ec:	e1a022c1 	asr	r2, r1, #5
  12a0f0:	e1a03fc3 	asr	r3, r3, #31
  12a0f4:	e0423003 	sub	r3, r2, r3
  12a0f8:	e6ff2073 	uxth	r2, r3
  12a0fc:	e51b300c 	ldr	r3, [fp, #-12]
  12a100:	e1c321b6 	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  12a104:	e15b30dd 	ldrsb	r3, [fp, #-13]
}
  12a108:	e1a00003 	mov	r0, r3
  12a10c:	e24bd004 	sub	sp, fp, #4
  12a110:	e8bd8800 	pop	{fp, pc}

0012a114 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
  12a114:	e92d4800 	push	{fp, lr}
  12a118:	e28db004 	add	fp, sp, #4
  12a11c:	e24dd008 	sub	sp, sp, #8
  struct netif *netif = netif_list;
  12a120:	e3043fb4 	movw	r3, #20404	; 0x4fb4
  12a124:	e3403057 	movt	r3, #87	; 0x57
  12a128:	e5933000 	ldr	r3, [r3]
  12a12c:	e50b3008 	str	r3, [fp, #-8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  while (netif != NULL) {
  12a130:	ea00003e 	b	12a230 <dhcp_coarse_tmr+0x11c>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
  12a134:	e51b3008 	ldr	r3, [fp, #-8]
  12a138:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a13c:	e50b300c 	str	r3, [fp, #-12]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
  12a140:	e51b300c 	ldr	r3, [fp, #-12]
  12a144:	e3530000 	cmp	r3, #0
  12a148:	0a000035 	beq	12a224 <dhcp_coarse_tmr+0x110>
  12a14c:	e51b300c 	ldr	r3, [fp, #-12]
  12a150:	e5d33009 	ldrb	r3, [r3, #9]
  12a154:	e3530000 	cmp	r3, #0
  12a158:	0a000031 	beq	12a224 <dhcp_coarse_tmr+0x110>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
  12a15c:	e51b300c 	ldr	r3, [fp, #-12]
  12a160:	e1d332b2 	ldrh	r3, [r3, #34]	; 0x22
  12a164:	e3530000 	cmp	r3, #0
  12a168:	0a000010 	beq	12a1b0 <dhcp_coarse_tmr+0x9c>
  12a16c:	e51b300c 	ldr	r3, [fp, #-12]
  12a170:	e1d332b0 	ldrh	r3, [r3, #32]
  12a174:	e2833001 	add	r3, r3, #1
  12a178:	e6ff2073 	uxth	r2, r3
  12a17c:	e51b300c 	ldr	r3, [fp, #-12]
  12a180:	e1c322b0 	strh	r2, [r3, #32]
  12a184:	e51b300c 	ldr	r3, [fp, #-12]
  12a188:	e1d322b0 	ldrh	r2, [r3, #32]
  12a18c:	e51b300c 	ldr	r3, [fp, #-12]
  12a190:	e1d332b2 	ldrh	r3, [r3, #34]	; 0x22
  12a194:	e1520003 	cmp	r2, r3
  12a198:	1a000004 	bne	12a1b0 <dhcp_coarse_tmr+0x9c>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release(netif);
  12a19c:	e51b0008 	ldr	r0, [fp, #-8]
  12a1a0:	eb0005bd 	bl	12b89c <dhcp_release>
        dhcp_discover(netif);
  12a1a4:	e51b0008 	ldr	r0, [fp, #-8]
  12a1a8:	eb00031f 	bl	12ae2c <dhcp_discover>
  12a1ac:	ea00001c 	b	12a224 <dhcp_coarse_tmr+0x110>
      /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
  12a1b0:	e51b300c 	ldr	r3, [fp, #-12]
  12a1b4:	e1d331be 	ldrh	r3, [r3, #30]
  12a1b8:	e3530000 	cmp	r3, #0
  12a1bc:	0a00000a 	beq	12a1ec <dhcp_coarse_tmr+0xd8>
  12a1c0:	e51b300c 	ldr	r3, [fp, #-12]
  12a1c4:	e1d331be 	ldrh	r3, [r3, #30]
  12a1c8:	e2432001 	sub	r2, r3, #1
  12a1cc:	e6ff1072 	uxth	r1, r2
  12a1d0:	e51b200c 	ldr	r2, [fp, #-12]
  12a1d4:	e1c211be 	strh	r1, [r2, #30]
  12a1d8:	e3530001 	cmp	r3, #1
  12a1dc:	1a000002 	bne	12a1ec <dhcp_coarse_tmr+0xd8>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
  12a1e0:	e51b0008 	ldr	r0, [fp, #-8]
  12a1e4:	eb0000b1 	bl	12a4b0 <dhcp_t2_timeout>
  12a1e8:	ea00000d 	b	12a224 <dhcp_coarse_tmr+0x110>
      /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
  12a1ec:	e51b300c 	ldr	r3, [fp, #-12]
  12a1f0:	e1d331bc 	ldrh	r3, [r3, #28]
  12a1f4:	e3530000 	cmp	r3, #0
  12a1f8:	0a000009 	beq	12a224 <dhcp_coarse_tmr+0x110>
  12a1fc:	e51b300c 	ldr	r3, [fp, #-12]
  12a200:	e1d331bc 	ldrh	r3, [r3, #28]
  12a204:	e2432001 	sub	r2, r3, #1
  12a208:	e6ff1072 	uxth	r1, r2
  12a20c:	e51b200c 	ldr	r2, [fp, #-12]
  12a210:	e1c211bc 	strh	r1, [r2, #28]
  12a214:	e3530001 	cmp	r3, #1
  12a218:	1a000001 	bne	12a224 <dhcp_coarse_tmr+0x110>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
  12a21c:	e51b0008 	ldr	r0, [fp, #-8]
  12a220:	eb000076 	bl	12a400 <dhcp_t1_timeout>
      }
    }
    /* proceed to next netif */
    netif = netif->next;
  12a224:	e51b3008 	ldr	r3, [fp, #-8]
  12a228:	e5933000 	ldr	r3, [r3]
  12a22c:	e50b3008 	str	r3, [fp, #-8]
  while (netif != NULL) {
  12a230:	e51b3008 	ldr	r3, [fp, #-8]
  12a234:	e3530000 	cmp	r3, #0
  12a238:	1affffbd 	bne	12a134 <dhcp_coarse_tmr+0x20>
  }
}
  12a23c:	e320f000 	nop	{0}
  12a240:	e24bd004 	sub	sp, fp, #4
  12a244:	e8bd8800 	pop	{fp, pc}

0012a248 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
  12a248:	e92d4800 	push	{fp, lr}
  12a24c:	e28db004 	add	fp, sp, #4
  12a250:	e24dd008 	sub	sp, sp, #8
  struct netif *netif = netif_list;
  12a254:	e3043fb4 	movw	r3, #20404	; 0x4fb4
  12a258:	e3403057 	movt	r3, #87	; 0x57
  12a25c:	e5933000 	ldr	r3, [r3]
  12a260:	e50b3008 	str	r3, [fp, #-8]
  /* loop through netif's */
  while (netif != NULL) {
  12a264:	ea00001f 	b	12a2e8 <dhcp_fine_tmr+0xa0>
    struct dhcp *dhcp = netif_dhcp_data(netif);
  12a268:	e51b3008 	ldr	r3, [fp, #-8]
  12a26c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a270:	e50b300c 	str	r3, [fp, #-12]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
  12a274:	e51b300c 	ldr	r3, [fp, #-12]
  12a278:	e3530000 	cmp	r3, #0
  12a27c:	0a000016 	beq	12a2dc <dhcp_fine_tmr+0x94>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
  12a280:	e51b300c 	ldr	r3, [fp, #-12]
  12a284:	e1d331b6 	ldrh	r3, [r3, #22]
  12a288:	e3530001 	cmp	r3, #1
  12a28c:	9a000006 	bls	12a2ac <dhcp_fine_tmr+0x64>
        dhcp->request_timeout--;
  12a290:	e51b300c 	ldr	r3, [fp, #-12]
  12a294:	e1d331b6 	ldrh	r3, [r3, #22]
  12a298:	e2433001 	sub	r3, r3, #1
  12a29c:	e6ff2073 	uxth	r2, r3
  12a2a0:	e51b300c 	ldr	r3, [fp, #-12]
  12a2a4:	e1c321b6 	strh	r2, [r3, #22]
  12a2a8:	ea00000b 	b	12a2dc <dhcp_fine_tmr+0x94>
      }
      else if (dhcp->request_timeout == 1) {
  12a2ac:	e51b300c 	ldr	r3, [fp, #-12]
  12a2b0:	e1d331b6 	ldrh	r3, [r3, #22]
  12a2b4:	e3530001 	cmp	r3, #1
  12a2b8:	1a000007 	bne	12a2dc <dhcp_fine_tmr+0x94>
        dhcp->request_timeout--;
  12a2bc:	e51b300c 	ldr	r3, [fp, #-12]
  12a2c0:	e1d331b6 	ldrh	r3, [r3, #22]
  12a2c4:	e2433001 	sub	r3, r3, #1
  12a2c8:	e6ff2073 	uxth	r2, r3
  12a2cc:	e51b300c 	ldr	r3, [fp, #-12]
  12a2d0:	e1c321b6 	strh	r2, [r3, #22]
        /* { netif->dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
  12a2d4:	e51b0008 	ldr	r0, [fp, #-8]
  12a2d8:	eb000008 	bl	12a300 <dhcp_timeout>
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
  12a2dc:	e51b3008 	ldr	r3, [fp, #-8]
  12a2e0:	e5933000 	ldr	r3, [r3]
  12a2e4:	e50b3008 	str	r3, [fp, #-8]
  while (netif != NULL) {
  12a2e8:	e51b3008 	ldr	r3, [fp, #-8]
  12a2ec:	e3530000 	cmp	r3, #0
  12a2f0:	1affffdc 	bne	12a268 <dhcp_fine_tmr+0x20>
  }
}
  12a2f4:	e320f000 	nop	{0}
  12a2f8:	e24bd004 	sub	sp, fp, #4
  12a2fc:	e8bd8800 	pop	{fp, pc}

0012a300 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
  12a300:	e92d4800 	push	{fp, lr}
  12a304:	e28db004 	add	fp, sp, #4
  12a308:	e24dd010 	sub	sp, sp, #16
  12a30c:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12a310:	e51b3010 	ldr	r3, [fp, #-16]
  12a314:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a318:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
  12a31c:	e51b3008 	ldr	r3, [fp, #-8]
  12a320:	e5d33009 	ldrb	r3, [r3, #9]
  12a324:	e353000c 	cmp	r3, #12
  12a328:	0a000003 	beq	12a33c <dhcp_timeout+0x3c>
  12a32c:	e51b3008 	ldr	r3, [fp, #-8]
  12a330:	e5d33009 	ldrb	r3, [r3, #9]
  12a334:	e3530006 	cmp	r3, #6
  12a338:	1a000002 	bne	12a348 <dhcp_timeout+0x48>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
  12a33c:	e51b0010 	ldr	r0, [fp, #-16]
  12a340:	eb0002b9 	bl	12ae2c <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
  12a344:	ea00002a 	b	12a3f4 <dhcp_timeout+0xf4>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
  12a348:	e51b3008 	ldr	r3, [fp, #-8]
  12a34c:	e5d33009 	ldrb	r3, [r3, #9]
  12a350:	e3530001 	cmp	r3, #1
  12a354:	1a00000b 	bne	12a388 <dhcp_timeout+0x88>
    if (dhcp->tries <= 5) {
  12a358:	e51b3008 	ldr	r3, [fp, #-8]
  12a35c:	e5d3300a 	ldrb	r3, [r3, #10]
  12a360:	e3530005 	cmp	r3, #5
  12a364:	8a000002 	bhi	12a374 <dhcp_timeout+0x74>
      dhcp_select(netif);
  12a368:	e51b0010 	ldr	r0, [fp, #-16]
  12a36c:	ebfffedb 	bl	129ee0 <dhcp_select>
}
  12a370:	ea00001f 	b	12a3f4 <dhcp_timeout+0xf4>
      dhcp_release(netif);
  12a374:	e51b0010 	ldr	r0, [fp, #-16]
  12a378:	eb000547 	bl	12b89c <dhcp_release>
      dhcp_discover(netif);
  12a37c:	e51b0010 	ldr	r0, [fp, #-16]
  12a380:	eb0002a9 	bl	12ae2c <dhcp_discover>
}
  12a384:	ea00001a 	b	12a3f4 <dhcp_timeout+0xf4>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
  12a388:	e51b3008 	ldr	r3, [fp, #-8]
  12a38c:	e5d33009 	ldrb	r3, [r3, #9]
  12a390:	e3530008 	cmp	r3, #8
  12a394:	1a000009 	bne	12a3c0 <dhcp_timeout+0xc0>
    if (dhcp->tries <= 1) {
  12a398:	e51b3008 	ldr	r3, [fp, #-8]
  12a39c:	e5d3300a 	ldrb	r3, [r3, #10]
  12a3a0:	e3530001 	cmp	r3, #1
  12a3a4:	8a000002 	bhi	12a3b4 <dhcp_timeout+0xb4>
      dhcp_check(netif);
  12a3a8:	e51b0010 	ldr	r0, [fp, #-16]
  12a3ac:	ebfffe80 	bl	129db4 <dhcp_check>
}
  12a3b0:	ea00000f 	b	12a3f4 <dhcp_timeout+0xf4>
      dhcp_bind(netif);
  12a3b4:	e51b0010 	ldr	r0, [fp, #-16]
  12a3b8:	eb000312 	bl	12b008 <dhcp_bind>
}
  12a3bc:	ea00000c 	b	12a3f4 <dhcp_timeout+0xf4>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
  12a3c0:	e51b3008 	ldr	r3, [fp, #-8]
  12a3c4:	e5d33009 	ldrb	r3, [r3, #9]
  12a3c8:	e3530003 	cmp	r3, #3
  12a3cc:	1a000008 	bne	12a3f4 <dhcp_timeout+0xf4>
    if (dhcp->tries < REBOOT_TRIES) {
  12a3d0:	e51b3008 	ldr	r3, [fp, #-8]
  12a3d4:	e5d3300a 	ldrb	r3, [r3, #10]
  12a3d8:	e3530001 	cmp	r3, #1
  12a3dc:	8a000002 	bhi	12a3ec <dhcp_timeout+0xec>
      dhcp_reboot(netif);
  12a3e0:	e51b0010 	ldr	r0, [fp, #-16]
  12a3e4:	eb0004af 	bl	12b6a8 <dhcp_reboot>
}
  12a3e8:	ea000001 	b	12a3f4 <dhcp_timeout+0xf4>
      dhcp_discover(netif);
  12a3ec:	e51b0010 	ldr	r0, [fp, #-16]
  12a3f0:	eb00028d 	bl	12ae2c <dhcp_discover>
}
  12a3f4:	e320f000 	nop	{0}
  12a3f8:	e24bd004 	sub	sp, fp, #4
  12a3fc:	e8bd8800 	pop	{fp, pc}

0012a400 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
  12a400:	e92d4800 	push	{fp, lr}
  12a404:	e28db004 	add	fp, sp, #4
  12a408:	e24dd010 	sub	sp, sp, #16
  12a40c:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12a410:	e51b3010 	ldr	r3, [fp, #-16]
  12a414:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a418:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
  12a41c:	e51b3008 	ldr	r3, [fp, #-8]
  12a420:	e5d33009 	ldrb	r3, [r3, #9]
  12a424:	e3530001 	cmp	r3, #1
  12a428:	0a000007 	beq	12a44c <dhcp_t1_timeout+0x4c>
  12a42c:	e51b3008 	ldr	r3, [fp, #-8]
  12a430:	e5d33009 	ldrb	r3, [r3, #9]
  12a434:	e353000a 	cmp	r3, #10
  12a438:	0a000003 	beq	12a44c <dhcp_t1_timeout+0x4c>
      (dhcp->state == DHCP_STATE_RENEWING)) {
  12a43c:	e51b3008 	ldr	r3, [fp, #-8]
  12a440:	e5d33009 	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
  12a444:	e3530005 	cmp	r3, #5
  12a448:	1a000015 	bne	12a4a4 <dhcp_t1_timeout+0xa4>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
  12a44c:	e51b0010 	ldr	r0, [fp, #-16]
  12a450:	eb0003a8 	bl	12b2f8 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
  12a454:	e51b3008 	ldr	r3, [fp, #-8]
  12a458:	e1d331ba 	ldrh	r3, [r3, #26]
  12a45c:	e1a02003 	mov	r2, r3
  12a460:	e51b3008 	ldr	r3, [fp, #-8]
  12a464:	e1d332b0 	ldrh	r3, [r3, #32]
  12a468:	e0423003 	sub	r3, r2, r3
  12a46c:	e3530001 	cmp	r3, #1
  12a470:	da00000b 	ble	12a4a4 <dhcp_t1_timeout+0xa4>
    {
       dhcp->t1_renew_time = ((dhcp->t2_timeout - dhcp->lease_used) / 2);
  12a474:	e51b3008 	ldr	r3, [fp, #-8]
  12a478:	e1d331ba 	ldrh	r3, [r3, #26]
  12a47c:	e1a02003 	mov	r2, r3
  12a480:	e51b3008 	ldr	r3, [fp, #-8]
  12a484:	e1d332b0 	ldrh	r3, [r3, #32]
  12a488:	e0423003 	sub	r3, r2, r3
  12a48c:	e1a02fa3 	lsr	r2, r3, #31
  12a490:	e0823003 	add	r3, r2, r3
  12a494:	e1a030c3 	asr	r3, r3, #1
  12a498:	e6ff2073 	uxth	r2, r3
  12a49c:	e51b3008 	ldr	r3, [fp, #-8]
  12a4a0:	e1c321bc 	strh	r2, [r3, #28]
    }
  }
}
  12a4a4:	e320f000 	nop	{0}
  12a4a8:	e24bd004 	sub	sp, fp, #4
  12a4ac:	e8bd8800 	pop	{fp, pc}

0012a4b0 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
  12a4b0:	e92d4800 	push	{fp, lr}
  12a4b4:	e28db004 	add	fp, sp, #4
  12a4b8:	e24dd010 	sub	sp, sp, #16
  12a4bc:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12a4c0:	e51b3010 	ldr	r3, [fp, #-16]
  12a4c4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a4c8:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
  12a4cc:	e51b3008 	ldr	r3, [fp, #-8]
  12a4d0:	e5d33009 	ldrb	r3, [r3, #9]
  12a4d4:	e3530001 	cmp	r3, #1
  12a4d8:	0a00000b 	beq	12a50c <dhcp_t2_timeout+0x5c>
  12a4dc:	e51b3008 	ldr	r3, [fp, #-8]
  12a4e0:	e5d33009 	ldrb	r3, [r3, #9]
  12a4e4:	e353000a 	cmp	r3, #10
  12a4e8:	0a000007 	beq	12a50c <dhcp_t2_timeout+0x5c>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
  12a4ec:	e51b3008 	ldr	r3, [fp, #-8]
  12a4f0:	e5d33009 	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
  12a4f4:	e3530005 	cmp	r3, #5
  12a4f8:	0a000003 	beq	12a50c <dhcp_t2_timeout+0x5c>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
  12a4fc:	e51b3008 	ldr	r3, [fp, #-8]
  12a500:	e5d33009 	ldrb	r3, [r3, #9]
  12a504:	e3530004 	cmp	r3, #4
  12a508:	1a000015 	bne	12a564 <dhcp_t2_timeout+0xb4>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
  12a50c:	e51b0010 	ldr	r0, [fp, #-16]
  12a510:	eb0003ee 	bl	12b4d0 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
  12a514:	e51b3008 	ldr	r3, [fp, #-8]
  12a518:	e1d332b2 	ldrh	r3, [r3, #34]	; 0x22
  12a51c:	e1a02003 	mov	r2, r3
  12a520:	e51b3008 	ldr	r3, [fp, #-8]
  12a524:	e1d332b0 	ldrh	r3, [r3, #32]
  12a528:	e0423003 	sub	r3, r2, r3
  12a52c:	e3530001 	cmp	r3, #1
  12a530:	da00000b 	ble	12a564 <dhcp_t2_timeout+0xb4>
    {
       dhcp->t2_rebind_time = ((dhcp->t0_timeout - dhcp->lease_used) / 2);
  12a534:	e51b3008 	ldr	r3, [fp, #-8]
  12a538:	e1d332b2 	ldrh	r3, [r3, #34]	; 0x22
  12a53c:	e1a02003 	mov	r2, r3
  12a540:	e51b3008 	ldr	r3, [fp, #-8]
  12a544:	e1d332b0 	ldrh	r3, [r3, #32]
  12a548:	e0423003 	sub	r3, r2, r3
  12a54c:	e1a02fa3 	lsr	r2, r3, #31
  12a550:	e0823003 	add	r3, r2, r3
  12a554:	e1a030c3 	asr	r3, r3, #1
  12a558:	e6ff2073 	uxth	r2, r3
  12a55c:	e51b3008 	ldr	r3, [fp, #-8]
  12a560:	e1c321be 	strh	r2, [r3, #30]
    }
  }
}
  12a564:	e320f000 	nop	{0}
  12a568:	e24bd004 	sub	sp, fp, #4
  12a56c:	e8bd8800 	pop	{fp, pc}

0012a570 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif)
{
  12a570:	e92d4800 	push	{fp, lr}
  12a574:	e28db004 	add	fp, sp, #4
  12a578:	e24dd018 	sub	sp, sp, #24
  12a57c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12a580:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12a584:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a588:	e50b300c 	str	r3, [fp, #-12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
  12a58c:	e51b300c 	ldr	r3, [fp, #-12]
  12a590:	e3a02000 	mov	r2, #0
  12a594:	e583202c 	str	r2, [r3, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
  12a598:	e51b300c 	ldr	r3, [fp, #-12]
  12a59c:	e3a02000 	mov	r2, #0
  12a5a0:	e5832030 	str	r2, [r3, #48]	; 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
  12a5a4:	e30531cc 	movw	r3, #20940	; 0x51cc
  12a5a8:	e3403057 	movt	r3, #87	; 0x57
  12a5ac:	e5d33003 	ldrb	r3, [r3, #3]
  12a5b0:	e3530000 	cmp	r3, #0
  12a5b4:	0a000004 	beq	12a5cc <dhcp_handle_ack+0x5c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
  12a5b8:	e30531d8 	movw	r3, #20952	; 0x51d8
  12a5bc:	e3403057 	movt	r3, #87	; 0x57
  12a5c0:	e593200c 	ldr	r2, [r3, #12]
  12a5c4:	e51b300c 	ldr	r3, [fp, #-12]
  12a5c8:	e5832034 	str	r2, [r3, #52]	; 0x34
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
  12a5cc:	e30531cc 	movw	r3, #20940	; 0x51cc
  12a5d0:	e3403057 	movt	r3, #87	; 0x57
  12a5d4:	e5d33004 	ldrb	r3, [r3, #4]
  12a5d8:	e3530000 	cmp	r3, #0
  12a5dc:	0a000005 	beq	12a5f8 <dhcp_handle_ack+0x88>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
  12a5e0:	e30531d8 	movw	r3, #20952	; 0x51d8
  12a5e4:	e3403057 	movt	r3, #87	; 0x57
  12a5e8:	e5932010 	ldr	r2, [r3, #16]
  12a5ec:	e51b300c 	ldr	r3, [fp, #-12]
  12a5f0:	e5832038 	str	r2, [r3, #56]	; 0x38
  12a5f4:	ea000004 	b	12a60c <dhcp_handle_ack+0x9c>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
  12a5f8:	e51b300c 	ldr	r3, [fp, #-12]
  12a5fc:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  12a600:	e1a020a3 	lsr	r2, r3, #1
  12a604:	e51b300c 	ldr	r3, [fp, #-12]
  12a608:	e5832038 	str	r2, [r3, #56]	; 0x38
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
  12a60c:	e30531cc 	movw	r3, #20940	; 0x51cc
  12a610:	e3403057 	movt	r3, #87	; 0x57
  12a614:	e5d33005 	ldrb	r3, [r3, #5]
  12a618:	e3530000 	cmp	r3, #0
  12a61c:	0a000005 	beq	12a638 <dhcp_handle_ack+0xc8>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
  12a620:	e30531d8 	movw	r3, #20952	; 0x51d8
  12a624:	e3403057 	movt	r3, #87	; 0x57
  12a628:	e5932014 	ldr	r2, [r3, #20]
  12a62c:	e51b300c 	ldr	r3, [fp, #-12]
  12a630:	e583203c 	str	r2, [r3, #60]	; 0x3c
  12a634:	ea000007 	b	12a658 <dhcp_handle_ack+0xe8>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
  12a638:	e51b300c 	ldr	r3, [fp, #-12]
  12a63c:	e5932034 	ldr	r2, [r3, #52]	; 0x34
  12a640:	e1a03002 	mov	r3, r2
  12a644:	e1a03183 	lsl	r3, r3, #3
  12a648:	e0433002 	sub	r3, r3, r2
  12a64c:	e1a021a3 	lsr	r2, r3, #3
  12a650:	e51b300c 	ldr	r3, [fp, #-12]
  12a654:	e583203c 	str	r2, [r3, #60]	; 0x3c
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
  12a658:	e51b300c 	ldr	r3, [fp, #-12]
  12a65c:	e5933004 	ldr	r3, [r3, #4]
  12a660:	e5932010 	ldr	r2, [r3, #16]
  12a664:	e51b300c 	ldr	r3, [fp, #-12]
  12a668:	e5832028 	str	r2, [r3, #40]	; 0x28
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, dhcp->msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
  12a66c:	e30531cc 	movw	r3, #20940	; 0x51cc
  12a670:	e3403057 	movt	r3, #87	; 0x57
  12a674:	e5d33006 	ldrb	r3, [r3, #6]
  12a678:	e3530000 	cmp	r3, #0
  12a67c:	0a00000b 	beq	12a6b0 <dhcp_handle_ack+0x140>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
  12a680:	e30531d8 	movw	r3, #20952	; 0x51d8
  12a684:	e3403057 	movt	r3, #87	; 0x57
  12a688:	e5933018 	ldr	r3, [r3, #24]
  12a68c:	e1a00003 	mov	r0, r3
  12a690:	ebffaf02 	bl	1162a0 <lwip_htonl>
  12a694:	e1a02000 	mov	r2, r0
  12a698:	e51b300c 	ldr	r3, [fp, #-12]
  12a69c:	e583202c 	str	r2, [r3, #44]	; 0x2c
    dhcp->subnet_mask_given = 1;
  12a6a0:	e51b300c 	ldr	r3, [fp, #-12]
  12a6a4:	e3a02001 	mov	r2, #1
  12a6a8:	e5c3200b 	strb	r2, [r3, #11]
  12a6ac:	ea000002 	b	12a6bc <dhcp_handle_ack+0x14c>
  } else {
    dhcp->subnet_mask_given = 0;
  12a6b0:	e51b300c 	ldr	r3, [fp, #-12]
  12a6b4:	e3a02000 	mov	r2, #0
  12a6b8:	e5c3200b 	strb	r2, [r3, #11]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
  12a6bc:	e30531cc 	movw	r3, #20940	; 0x51cc
  12a6c0:	e3403057 	movt	r3, #87	; 0x57
  12a6c4:	e5d33007 	ldrb	r3, [r3, #7]
  12a6c8:	e3530000 	cmp	r3, #0
  12a6cc:	0a000007 	beq	12a6f0 <dhcp_handle_ack+0x180>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
  12a6d0:	e30531d8 	movw	r3, #20952	; 0x51d8
  12a6d4:	e3403057 	movt	r3, #87	; 0x57
  12a6d8:	e593301c 	ldr	r3, [r3, #28]
  12a6dc:	e1a00003 	mov	r0, r3
  12a6e0:	ebffaeee 	bl	1162a0 <lwip_htonl>
  12a6e4:	e1a02000 	mov	r2, r0
  12a6e8:	e51b300c 	ldr	r3, [fp, #-12]
  12a6ec:	e5832030 	str	r2, [r3, #48]	; 0x30
  dhcp_set_ntp_servers(n, ntp_server_addrs);
#endif /* LWIP_DHCP_GET_NTP_SRV */

#if LWIP_DHCP_PROVIDE_DNS_SERVERS
  /* DNS servers */
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
  12a6f0:	e3a03000 	mov	r3, #0
  12a6f4:	e54b3005 	strb	r3, [fp, #-5]
  12a6f8:	ea000010 	b	12a740 <dhcp_handle_ack+0x1d0>
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32(&dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
  12a6fc:	e55b3005 	ldrb	r3, [fp, #-5]
  12a700:	e2832008 	add	r2, r3, #8
  12a704:	e30531d8 	movw	r3, #20952	; 0x51d8
  12a708:	e3403057 	movt	r3, #87	; 0x57
  12a70c:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  12a710:	e1a00003 	mov	r0, r3
  12a714:	ebffaee1 	bl	1162a0 <lwip_htonl>
  12a718:	e1a03000 	mov	r3, r0
  12a71c:	e50b3010 	str	r3, [fp, #-16]
    dns_setserver(n, &dns_addr);
  12a720:	e24b2010 	sub	r2, fp, #16
  12a724:	e55b3005 	ldrb	r3, [fp, #-5]
  12a728:	e1a01002 	mov	r1, r2
  12a72c:	e1a00003 	mov	r0, r3
  12a730:	ebffafd4 	bl	116688 <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
  12a734:	e55b3005 	ldrb	r3, [fp, #-5]
  12a738:	e2833001 	add	r3, r3, #1
  12a73c:	e54b3005 	strb	r3, [fp, #-5]
  12a740:	e55b3005 	ldrb	r3, [fp, #-5]
  12a744:	e3530001 	cmp	r3, #1
  12a748:	8a000006 	bhi	12a768 <dhcp_handle_ack+0x1f8>
  12a74c:	e55b3005 	ldrb	r3, [fp, #-5]
  12a750:	e2832008 	add	r2, r3, #8
  12a754:	e30531cc 	movw	r3, #20940	; 0x51cc
  12a758:	e3403057 	movt	r3, #87	; 0x57
  12a75c:	e7d33002 	ldrb	r3, [r3, r2]
  12a760:	e3530000 	cmp	r3, #0
  12a764:	1affffe4 	bne	12a6fc <dhcp_handle_ack+0x18c>
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
  12a768:	e320f000 	nop	{0}
  12a76c:	e24bd004 	sub	sp, fp, #4
  12a770:	e8bd8800 	pop	{fp, pc}

0012a774 <dhcp_set_struct>:
 * @param netif the netif for which to set the struct dhcp
 * @param dhcp (uninitialised) dhcp struct allocated by the application
 */
void
dhcp_set_struct(struct netif *netif, struct dhcp *dhcp)
{
  12a774:	e92d4800 	push	{fp, lr}
  12a778:	e28db004 	add	fp, sp, #4
  12a77c:	e24dd008 	sub	sp, sp, #8
  12a780:	e50b0008 	str	r0, [fp, #-8]
  12a784:	e50b100c 	str	r1, [fp, #-12]
  LWIP_ASSERT("netif != NULL", netif != NULL);
  12a788:	e51b3008 	ldr	r3, [fp, #-8]
  12a78c:	e3530000 	cmp	r3, #0
  12a790:	1a000006 	bne	12a7b0 <dhcp_set_struct+0x3c>
  12a794:	e30802fc 	movw	r0, #33532	; 0x82fc
  12a798:	e3400014 	movt	r0, #20
  12a79c:	ebff625c 	bl	103114 <rt_kprintf>
  12a7a0:	e3a01faa 	mov	r1, #680	; 0x2a8
  12a7a4:	e30802a4 	movw	r0, #33444	; 0x82a4
  12a7a8:	e3400014 	movt	r0, #20
  12a7ac:	ebff80d8 	bl	10ab14 <sys_arch_assert>
  LWIP_ASSERT("dhcp != NULL", dhcp != NULL);
  12a7b0:	e51b300c 	ldr	r3, [fp, #-12]
  12a7b4:	e3530000 	cmp	r3, #0
  12a7b8:	1a000006 	bne	12a7d8 <dhcp_set_struct+0x64>
  12a7bc:	e308030c 	movw	r0, #33548	; 0x830c
  12a7c0:	e3400014 	movt	r0, #20
  12a7c4:	ebff6252 	bl	103114 <rt_kprintf>
  12a7c8:	e30012a9 	movw	r1, #681	; 0x2a9
  12a7cc:	e30802a4 	movw	r0, #33444	; 0x82a4
  12a7d0:	e3400014 	movt	r0, #20
  12a7d4:	ebff80ce 	bl	10ab14 <sys_arch_assert>
  LWIP_ASSERT("netif already has a struct dhcp set", netif_dhcp_data(netif) == NULL);
  12a7d8:	e51b3008 	ldr	r3, [fp, #-8]
  12a7dc:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a7e0:	e3530000 	cmp	r3, #0
  12a7e4:	0a000006 	beq	12a804 <dhcp_set_struct+0x90>
  12a7e8:	e308031c 	movw	r0, #33564	; 0x831c
  12a7ec:	e3400014 	movt	r0, #20
  12a7f0:	ebff6247 	bl	103114 <rt_kprintf>
  12a7f4:	e30012aa 	movw	r1, #682	; 0x2aa
  12a7f8:	e30802a4 	movw	r0, #33444	; 0x82a4
  12a7fc:	e3400014 	movt	r0, #20
  12a800:	ebff80c3 	bl	10ab14 <sys_arch_assert>

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
  12a804:	e3a02040 	mov	r2, #64	; 0x40
  12a808:	e3a01000 	mov	r1, #0
  12a80c:	e51b000c 	ldr	r0, [fp, #-12]
  12a810:	eb005835 	bl	1408ec <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */
  netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
  12a814:	e51b3008 	ldr	r3, [fp, #-8]
  12a818:	e51b200c 	ldr	r2, [fp, #-12]
  12a81c:	e5832028 	str	r2, [r3, #40]	; 0x28
}
  12a820:	e320f000 	nop	{0}
  12a824:	e24bd004 	sub	sp, fp, #4
  12a828:	e8bd8800 	pop	{fp, pc}

0012a82c <dhcp_cleanup>:
 *            struct dhcp since the memory is passed back to the heap.
 *
 * @param netif the netif from which to remove the struct dhcp
 */
void dhcp_cleanup(struct netif *netif)
{
  12a82c:	e92d4800 	push	{fp, lr}
  12a830:	e28db004 	add	fp, sp, #4
  12a834:	e24dd008 	sub	sp, sp, #8
  12a838:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ASSERT("netif != NULL", netif != NULL);
  12a83c:	e51b3008 	ldr	r3, [fp, #-8]
  12a840:	e3530000 	cmp	r3, #0
  12a844:	1a000006 	bne	12a864 <dhcp_cleanup+0x38>
  12a848:	e30802fc 	movw	r0, #33532	; 0x82fc
  12a84c:	e3400014 	movt	r0, #20
  12a850:	ebff622f 	bl	103114 <rt_kprintf>
  12a854:	e30012bd 	movw	r1, #701	; 0x2bd
  12a858:	e30802a4 	movw	r0, #33444	; 0x82a4
  12a85c:	e3400014 	movt	r0, #20
  12a860:	ebff80ab 	bl	10ab14 <sys_arch_assert>

  if (netif_dhcp_data(netif) != NULL) {
  12a864:	e51b3008 	ldr	r3, [fp, #-8]
  12a868:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a86c:	e3530000 	cmp	r3, #0
  12a870:	0a000006 	beq	12a890 <dhcp_cleanup+0x64>
    mem_free(netif_dhcp_data(netif));
  12a874:	e51b3008 	ldr	r3, [fp, #-8]
  12a878:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a87c:	e1a00003 	mov	r0, r3
  12a880:	ebff80f0 	bl	10ac48 <mem_free>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, NULL);
  12a884:	e51b3008 	ldr	r3, [fp, #-8]
  12a888:	e3a02000 	mov	r2, #0
  12a88c:	e5832028 	str	r2, [r3, #40]	; 0x28
  }
}
  12a890:	e320f000 	nop	{0}
  12a894:	e24bd004 	sub	sp, fp, #4
  12a898:	e8bd8800 	pop	{fp, pc}

0012a89c <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
  12a89c:	e92d4800 	push	{fp, lr}
  12a8a0:	e28db004 	add	fp, sp, #4
  12a8a4:	e24dd010 	sub	sp, sp, #16
  12a8a8:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
  12a8ac:	e51b3010 	ldr	r3, [fp, #-16]
  12a8b0:	e3530000 	cmp	r3, #0
  12a8b4:	1a000008 	bne	12a8dc <dhcp_start+0x40>
  12a8b8:	e30802fc 	movw	r0, #33532	; 0x82fc
  12a8bc:	e3400014 	movt	r0, #20
  12a8c0:	ebff6213 	bl	103114 <rt_kprintf>
  12a8c4:	e3a01fb6 	mov	r1, #728	; 0x2d8
  12a8c8:	e30802a4 	movw	r0, #33444	; 0x82a4
  12a8cc:	e3400014 	movt	r0, #20
  12a8d0:	ebff808f 	bl	10ab14 <sys_arch_assert>
  12a8d4:	e3e0300f 	mvn	r3, #15
  12a8d8:	ea000059 	b	12aa44 <dhcp_start+0x1a8>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
  12a8dc:	e51b3010 	ldr	r3, [fp, #-16]
  12a8e0:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  12a8e4:	e2033001 	and	r3, r3, #1
  12a8e8:	e3530000 	cmp	r3, #0
  12a8ec:	1a000008 	bne	12a914 <dhcp_start+0x78>
  12a8f0:	e3080340 	movw	r0, #33600	; 0x8340
  12a8f4:	e3400014 	movt	r0, #20
  12a8f8:	ebff6205 	bl	103114 <rt_kprintf>
  12a8fc:	e30012d9 	movw	r1, #729	; 0x2d9
  12a900:	e30802a4 	movw	r0, #33444	; 0x82a4
  12a904:	e3400014 	movt	r0, #20
  12a908:	ebff8081 	bl	10ab14 <sys_arch_assert>
  12a90c:	e3e0300f 	mvn	r3, #15
  12a910:	ea00004b 	b	12aa44 <dhcp_start+0x1a8>
  dhcp = netif_dhcp_data(netif);
  12a914:	e51b3010 	ldr	r3, [fp, #-16]
  12a918:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a91c:	e50b3008 	str	r3, [fp, #-8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
  12a920:	e51b3010 	ldr	r3, [fp, #-16]
  12a924:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  12a928:	e3530d09 	cmp	r3, #576	; 0x240
  12a92c:	2a000001 	bcs	12a938 <dhcp_start+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
  12a930:	e3e03000 	mvn	r3, #0
  12a934:	ea000042 	b	12aa44 <dhcp_start+0x1a8>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
  12a938:	e51b3008 	ldr	r3, [fp, #-8]
  12a93c:	e3530000 	cmp	r3, #0
  12a940:	1a00000b 	bne	12a974 <dhcp_start+0xd8>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
  12a944:	e3a00040 	mov	r0, #64	; 0x40
  12a948:	ebff80b2 	bl	10ac18 <mem_malloc>
  12a94c:	e50b0008 	str	r0, [fp, #-8]
    if (dhcp == NULL) {
  12a950:	e51b3008 	ldr	r3, [fp, #-8]
  12a954:	e3530000 	cmp	r3, #0
  12a958:	1a000001 	bne	12a964 <dhcp_start+0xc8>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
  12a95c:	e3e03000 	mvn	r3, #0
  12a960:	ea000037 	b	12aa44 <dhcp_start+0x1a8>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
  12a964:	e51b3010 	ldr	r3, [fp, #-16]
  12a968:	e51b2008 	ldr	r2, [fp, #-8]
  12a96c:	e5832028 	str	r2, [r3, #40]	; 0x28
  12a970:	ea00001a 	b	12a9e0 <dhcp_start+0x144>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
  /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));
    LWIP_ASSERT("pbuf p_out wasn't freed", dhcp->p_out == NULL);
  12a974:	e51b3008 	ldr	r3, [fp, #-8]
  12a978:	e593300c 	ldr	r3, [r3, #12]
  12a97c:	e3530000 	cmp	r3, #0
  12a980:	0a000006 	beq	12a9a0 <dhcp_start+0x104>
  12a984:	e3080364 	movw	r0, #33636	; 0x8364
  12a988:	e3400014 	movt	r0, #20
  12a98c:	ebff61e0 	bl	103114 <rt_kprintf>
  12a990:	e30012f2 	movw	r1, #754	; 0x2f2
  12a994:	e30802a4 	movw	r0, #33444	; 0x82a4
  12a998:	e3400014 	movt	r0, #20
  12a99c:	ebff805c 	bl	10ab14 <sys_arch_assert>
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL );
  12a9a0:	e51b3008 	ldr	r3, [fp, #-8]
  12a9a4:	e5933004 	ldr	r3, [r3, #4]
  12a9a8:	e3530000 	cmp	r3, #0
  12a9ac:	0a000006 	beq	12a9cc <dhcp_start+0x130>
  12a9b0:	e308037c 	movw	r0, #33660	; 0x837c
  12a9b4:	e3400014 	movt	r0, #20
  12a9b8:	ebff61d5 	bl	103114 <rt_kprintf>
  12a9bc:	e30012f3 	movw	r1, #755	; 0x2f3
  12a9c0:	e30802a4 	movw	r0, #33444	; 0x82a4
  12a9c4:	e3400014 	movt	r0, #20
  12a9c8:	ebff8051 	bl	10ab14 <sys_arch_assert>

    if (dhcp->pcb_allocated != 0) {
  12a9cc:	e51b3008 	ldr	r3, [fp, #-8]
  12a9d0:	e5d33008 	ldrb	r3, [r3, #8]
  12a9d4:	e3530000 	cmp	r3, #0
  12a9d8:	0a000000 	beq	12a9e0 <dhcp_start+0x144>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
  12a9dc:	ebfffcb7 	bl	129cc0 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
  12a9e0:	e3a02040 	mov	r2, #64	; 0x40
  12a9e4:	e3a01000 	mov	r1, #0
  12a9e8:	e51b0008 	ldr	r0, [fp, #-8]
  12a9ec:	eb0057be 	bl	1408ec <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
  12a9f0:	ebfffc66 	bl	129b90 <dhcp_inc_pcb_refcount>
  12a9f4:	e1a03000 	mov	r3, r0
  12a9f8:	e3530000 	cmp	r3, #0
  12a9fc:	0a000001 	beq	12aa08 <dhcp_start+0x16c>
    return ERR_MEM;
  12aa00:	e3e03000 	mvn	r3, #0
  12aa04:	ea00000e 	b	12aa44 <dhcp_start+0x1a8>
  }
  dhcp->pcb_allocated = 1;
  12aa08:	e51b3008 	ldr	r3, [fp, #-8]
  12aa0c:	e3a02001 	mov	r2, #1
  12aa10:	e5c32008 	strb	r2, [r3, #8]
  }
#endif /* LWIP_DHCP_CHECK_LINK_UP */


  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
  12aa14:	e51b0010 	ldr	r0, [fp, #-16]
  12aa18:	eb000103 	bl	12ae2c <dhcp_discover>
  12aa1c:	e1a03000 	mov	r3, r0
  12aa20:	e54b3009 	strb	r3, [fp, #-9]
  if (result != ERR_OK) {
  12aa24:	e15b30d9 	ldrsb	r3, [fp, #-9]
  12aa28:	e3530000 	cmp	r3, #0
  12aa2c:	0a000003 	beq	12aa40 <dhcp_start+0x1a4>
    /* free resources allocated above */
    dhcp_stop(netif);
  12aa30:	e51b0010 	ldr	r0, [fp, #-16]
  12aa34:	eb000410 	bl	12ba7c <dhcp_stop>
    return ERR_MEM;
  12aa38:	e3e03000 	mvn	r3, #0
  12aa3c:	ea000000 	b	12aa44 <dhcp_start+0x1a8>
  }
  return result;
  12aa40:	e15b30d9 	ldrsb	r3, [fp, #-9]
}
  12aa44:	e1a00003 	mov	r0, r3
  12aa48:	e24bd004 	sub	sp, fp, #4
  12aa4c:	e8bd8800 	pop	{fp, pc}

0012aa50 <dhcp_inform>:
 *
 * @param netif The lwIP network interface
 */
void
dhcp_inform(struct netif *netif)
{
  12aa50:	e92d4800 	push	{fp, lr}
  12aa54:	e28db004 	add	fp, sp, #4
  12aa58:	e24dd058 	sub	sp, sp, #88	; 0x58
  12aa5c:	e50b0050 	str	r0, [fp, #-80]	; 0xffffffb0
  struct dhcp dhcp;
  err_t result = ERR_OK;
  12aa60:	e3a03000 	mov	r3, #0
  12aa64:	e54b3005 	strb	r3, [fp, #-5]

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
  12aa68:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
  12aa6c:	e3530000 	cmp	r3, #0
  12aa70:	1a000007 	bne	12aa94 <dhcp_inform+0x44>
  12aa74:	e30802fc 	movw	r0, #33532	; 0x82fc
  12aa78:	e3400014 	movt	r0, #20
  12aa7c:	ebff61a4 	bl	103114 <rt_kprintf>
  12aa80:	e3001329 	movw	r1, #809	; 0x329
  12aa84:	e30802a4 	movw	r0, #33444	; 0x82a4
  12aa88:	e3400014 	movt	r0, #20
  12aa8c:	ebff8020 	bl	10ab14 <sys_arch_assert>
  12aa90:	ea00003b 	b	12ab84 <dhcp_inform+0x134>

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
  12aa94:	ebfffc3d 	bl	129b90 <dhcp_inc_pcb_refcount>
  12aa98:	e1a03000 	mov	r3, r0
  12aa9c:	e3530000 	cmp	r3, #0
  12aaa0:	1a000036 	bne	12ab80 <dhcp_inform+0x130>
    return;
  }

  memset(&dhcp, 0, sizeof(struct dhcp));
  12aaa4:	e24b3048 	sub	r3, fp, #72	; 0x48
  12aaa8:	e3a02040 	mov	r2, #64	; 0x40
  12aaac:	e3a01000 	mov	r1, #0
  12aab0:	e1a00003 	mov	r0, r3
  12aab4:	eb00578c 	bl	1408ec <memset>
  dhcp_set_state(&dhcp, DHCP_STATE_INFORMING);
  12aab8:	e24b3048 	sub	r3, fp, #72	; 0x48
  12aabc:	e3a01007 	mov	r1, #7
  12aac0:	e1a00003 	mov	r0, r3
  12aac4:	eb000419 	bl	12bb30 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, &dhcp, DHCP_INFORM);
  12aac8:	e24b3048 	sub	r3, fp, #72	; 0x48
  12aacc:	e3a02008 	mov	r2, #8
  12aad0:	e1a01003 	mov	r1, r3
  12aad4:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
  12aad8:	eb000844 	bl	12cbf0 <dhcp_create_msg>
  12aadc:	e1a03000 	mov	r3, r0
  12aae0:	e54b3005 	strb	r3, [fp, #-5]
  if (result == ERR_OK) {
  12aae4:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12aae8:	e3530000 	cmp	r3, #0
  12aaec:	1a000021 	bne	12ab78 <dhcp_inform+0x128>
    dhcp_option(&dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  12aaf0:	e24b3048 	sub	r3, fp, #72	; 0x48
  12aaf4:	e3a02002 	mov	r2, #2
  12aaf8:	e3a01039 	mov	r1, #57	; 0x39
  12aafc:	e1a00003 	mov	r0, r3
  12ab00:	eb000422 	bl	12bb90 <dhcp_option>
    dhcp_option_short(&dhcp, DHCP_MAX_MSG_LEN(netif));
  12ab04:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
  12ab08:	e1d323b8 	ldrh	r2, [r3, #56]	; 0x38
  12ab0c:	e24b3048 	sub	r3, fp, #72	; 0x48
  12ab10:	e1a01002 	mov	r1, r2
  12ab14:	e1a00003 	mov	r0, r3
  12ab18:	eb00046b 	bl	12bccc <dhcp_option_short>

    dhcp_option_trailer(&dhcp);
  12ab1c:	e24b3048 	sub	r3, fp, #72	; 0x48
  12ab20:	e1a00003 	mov	r0, r3
  12ab24:	eb00099e 	bl	12d1a4 <dhcp_option_trailer>

    pbuf_realloc(dhcp.p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp.options_out_len);
  12ab28:	e51b203c 	ldr	r2, [fp, #-60]	; 0xffffffc4
  12ab2c:	e15b33b4 	ldrh	r3, [fp, #-52]	; 0xffffffcc
  12ab30:	e28330f0 	add	r3, r3, #240	; 0xf0
  12ab34:	e6ff3073 	uxth	r3, r3
  12ab38:	e1a01003 	mov	r1, r3
  12ab3c:	e1a00002 	mov	r0, r2
  12ab40:	ebffbeb8 	bl	11a628 <pbuf_realloc>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_inform: INFORMING\n"));

    udp_sendto_if(dhcp_pcb, dhcp.p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
  12ab44:	e30e3254 	movw	r3, #57940	; 0xe254
  12ab48:	e3403014 	movt	r3, #20
  12ab4c:	e5930000 	ldr	r0, [r3]
  12ab50:	e51b103c 	ldr	r1, [fp, #-60]	; 0xffffffc4
  12ab54:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
  12ab58:	e58d3000 	str	r3, [sp]
  12ab5c:	e3a03043 	mov	r3, #67	; 0x43
  12ab60:	e3082e40 	movw	r2, #36416	; 0x8e40
  12ab64:	e3402014 	movt	r2, #20
  12ab68:	ebfff4d5 	bl	127ec4 <udp_sendto_if>

    dhcp_delete_msg(&dhcp);
  12ab6c:	e24b3048 	sub	r3, fp, #72	; 0x48
  12ab70:	e1a00003 	mov	r0, r3
  12ab74:	eb000955 	bl	12d0d0 <dhcp_delete_msg>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_inform: could not allocate DHCP request\n"));
  }

  dhcp_dec_pcb_refcount(); /* delete DHCP PCB if not needed any more */
  12ab78:	ebfffc50 	bl	129cc0 <dhcp_dec_pcb_refcount>
  12ab7c:	ea000000 	b	12ab84 <dhcp_inform+0x134>
    return;
  12ab80:	e320f000 	nop	{0}
}
  12ab84:	e24bd004 	sub	sp, fp, #4
  12ab88:	e8bd8800 	pop	{fp, pc}

0012ab8c <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
  12ab8c:	e92d4800 	push	{fp, lr}
  12ab90:	e28db004 	add	fp, sp, #4
  12ab94:	e24dd010 	sub	sp, sp, #16
  12ab98:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12ab9c:	e51b3010 	ldr	r3, [fp, #-16]
  12aba0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12aba4:	e50b3008 	str	r3, [fp, #-8]

  if (!dhcp)
  12aba8:	e51b3008 	ldr	r3, [fp, #-8]
  12abac:	e3530000 	cmp	r3, #0
  12abb0:	0a00001c 	beq	12ac28 <dhcp_network_changed+0x9c>
    return;
  switch (dhcp->state) {
  12abb4:	e51b3008 	ldr	r3, [fp, #-8]
  12abb8:	e5d33009 	ldrb	r3, [r3, #9]
  12abbc:	e353000a 	cmp	r3, #10
  12abc0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  12abc4:	ea000010 	b	12ac0c <dhcp_network_changed+0x80>
  12abc8:	0012ac30 	.word	0x0012ac30
  12abcc:	0012ac0c 	.word	0x0012ac0c
  12abd0:	0012ac0c 	.word	0x0012ac0c
  12abd4:	0012abf4 	.word	0x0012abf4
  12abd8:	0012abf4 	.word	0x0012abf4
  12abdc:	0012abf4 	.word	0x0012abf4
  12abe0:	0012ac0c 	.word	0x0012ac0c
  12abe4:	0012ac0c 	.word	0x0012ac0c
  12abe8:	0012ac0c 	.word	0x0012ac0c
  12abec:	0012ac0c 	.word	0x0012ac0c
  12abf0:	0012abf4 	.word	0x0012abf4
  case DHCP_STATE_REBINDING:
  case DHCP_STATE_RENEWING:
  case DHCP_STATE_BOUND:
  case DHCP_STATE_REBOOTING:
    dhcp->tries = 0;
  12abf4:	e51b3008 	ldr	r3, [fp, #-8]
  12abf8:	e3a02000 	mov	r2, #0
  12abfc:	e5c3200a 	strb	r2, [r3, #10]
    dhcp_reboot(netif);
  12ac00:	e51b0010 	ldr	r0, [fp, #-16]
  12ac04:	eb0002a7 	bl	12b6a8 <dhcp_reboot>
    break;
  12ac08:	ea000009 	b	12ac34 <dhcp_network_changed+0xa8>
      autoip_stop(netif);
      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */
    /* ensure we start with short timeouts, even if already discovering */
    dhcp->tries = 0;
  12ac0c:	e51b3008 	ldr	r3, [fp, #-8]
  12ac10:	e3a02000 	mov	r2, #0
  12ac14:	e5c3200a 	strb	r2, [r3, #10]
    dhcp_discover(netif);
  12ac18:	e51b0010 	ldr	r0, [fp, #-16]
  12ac1c:	eb000082 	bl	12ae2c <dhcp_discover>
    break;
  12ac20:	e320f000 	nop	{0}
  12ac24:	ea000002 	b	12ac34 <dhcp_network_changed+0xa8>
    return;
  12ac28:	e320f000 	nop	{0}
  12ac2c:	ea000000 	b	12ac34 <dhcp_network_changed+0xa8>
    break;
  12ac30:	e320f000 	nop	{0}
  }
}
  12ac34:	e24bd004 	sub	sp, fp, #4
  12ac38:	e8bd8800 	pop	{fp, pc}

0012ac3c <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
  12ac3c:	e92d4800 	push	{fp, lr}
  12ac40:	e28db004 	add	fp, sp, #4
  12ac44:	e24dd010 	sub	sp, sp, #16
  12ac48:	e50b0010 	str	r0, [fp, #-16]
  12ac4c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
  12ac50:	e51b3010 	ldr	r3, [fp, #-16]
  12ac54:	e3530000 	cmp	r3, #0
  12ac58:	1a000007 	bne	12ac7c <dhcp_arp_reply+0x40>
  12ac5c:	e30802fc 	movw	r0, #33532	; 0x82fc
  12ac60:	e3400014 	movt	r0, #20
  12ac64:	ebff612a 	bl	103114 <rt_kprintf>
  12ac68:	e300137d 	movw	r1, #893	; 0x37d
  12ac6c:	e30802a4 	movw	r0, #33444	; 0x82a4
  12ac70:	e3400014 	movt	r0, #20
  12ac74:	ebff7fa6 	bl	10ab14 <sys_arch_assert>
  12ac78:	ea000011 	b	12acc4 <dhcp_arp_reply+0x88>
  dhcp = netif_dhcp_data(netif);
  12ac7c:	e51b3010 	ldr	r3, [fp, #-16]
  12ac80:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12ac84:	e50b3008 	str	r3, [fp, #-8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
  12ac88:	e51b3008 	ldr	r3, [fp, #-8]
  12ac8c:	e3530000 	cmp	r3, #0
  12ac90:	0a00000b 	beq	12acc4 <dhcp_arp_reply+0x88>
  12ac94:	e51b3008 	ldr	r3, [fp, #-8]
  12ac98:	e5d33009 	ldrb	r3, [r3, #9]
  12ac9c:	e3530008 	cmp	r3, #8
  12aca0:	1a000007 	bne	12acc4 <dhcp_arp_reply+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
      ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
  12aca4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12aca8:	e5932000 	ldr	r2, [r3]
  12acac:	e51b3008 	ldr	r3, [fp, #-8]
  12acb0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12acb4:	e1520003 	cmp	r2, r3
  12acb8:	1a000001 	bne	12acc4 <dhcp_arp_reply+0x88>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
        ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
  12acbc:	e51b0010 	ldr	r0, [fp, #-16]
  12acc0:	eb000001 	bl	12accc <dhcp_decline>
    }
  }
}
  12acc4:	e24bd004 	sub	sp, fp, #4
  12acc8:	e8bd8800 	pop	{fp, pc}

0012accc <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
  12accc:	e92d4800 	push	{fp, lr}
  12acd0:	e28db004 	add	fp, sp, #4
  12acd4:	e24dd018 	sub	sp, sp, #24
  12acd8:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12acdc:	e51b3010 	ldr	r3, [fp, #-16]
  12ace0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12ace4:	e50b3008 	str	r3, [fp, #-8]
  err_t result = ERR_OK;
  12ace8:	e3a03000 	mov	r3, #0
  12acec:	e54b3009 	strb	r3, [fp, #-9]
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
  12acf0:	e3a0100c 	mov	r1, #12
  12acf4:	e51b0008 	ldr	r0, [fp, #-8]
  12acf8:	eb00038c 	bl	12bb30 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
  12acfc:	e3a02004 	mov	r2, #4
  12ad00:	e51b1008 	ldr	r1, [fp, #-8]
  12ad04:	e51b0010 	ldr	r0, [fp, #-16]
  12ad08:	eb0007b8 	bl	12cbf0 <dhcp_create_msg>
  12ad0c:	e1a03000 	mov	r3, r0
  12ad10:	e54b3009 	strb	r3, [fp, #-9]
  if (result == ERR_OK) {
  12ad14:	e15b30d9 	ldrsb	r3, [fp, #-9]
  12ad18:	e3530000 	cmp	r3, #0
  12ad1c:	1a000026 	bne	12adbc <dhcp_decline+0xf0>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
  12ad20:	e3a02004 	mov	r2, #4
  12ad24:	e3a01032 	mov	r1, #50	; 0x32
  12ad28:	e51b0008 	ldr	r0, [fp, #-8]
  12ad2c:	eb000397 	bl	12bb90 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
  12ad30:	e51b3008 	ldr	r3, [fp, #-8]
  12ad34:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12ad38:	e1a00003 	mov	r0, r3
  12ad3c:	ebffad57 	bl	1162a0 <lwip_htonl>
  12ad40:	e1a03000 	mov	r3, r0
  12ad44:	e1a01003 	mov	r1, r3
  12ad48:	e51b0008 	ldr	r0, [fp, #-8]
  12ad4c:	eb00040f 	bl	12bd90 <dhcp_option_long>

    dhcp_option_trailer(dhcp);
  12ad50:	e51b0008 	ldr	r0, [fp, #-8]
  12ad54:	eb000912 	bl	12d1a4 <dhcp_option_trailer>
    /* resize pbuf to reflect true size of options */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  12ad58:	e51b3008 	ldr	r3, [fp, #-8]
  12ad5c:	e593200c 	ldr	r2, [r3, #12]
  12ad60:	e51b3008 	ldr	r3, [fp, #-8]
  12ad64:	e1d331b4 	ldrh	r3, [r3, #20]
  12ad68:	e28330f0 	add	r3, r3, #240	; 0xf0
  12ad6c:	e6ff3073 	uxth	r3, r3
  12ad70:	e1a01003 	mov	r1, r3
  12ad74:	e1a00002 	mov	r0, r2
  12ad78:	ebffbe2a 	bl	11a628 <pbuf_realloc>

    /* per section 4.4.4, broadcast DECLINE messages */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
  12ad7c:	e30e3254 	movw	r3, #57940	; 0xe254
  12ad80:	e3403014 	movt	r3, #20
  12ad84:	e5930000 	ldr	r0, [r3]
  12ad88:	e51b3008 	ldr	r3, [fp, #-8]
  12ad8c:	e593100c 	ldr	r1, [r3, #12]
  12ad90:	e3083e3c 	movw	r3, #36412	; 0x8e3c
  12ad94:	e3403014 	movt	r3, #20
  12ad98:	e58d3004 	str	r3, [sp, #4]
  12ad9c:	e51b3010 	ldr	r3, [fp, #-16]
  12ada0:	e58d3000 	str	r3, [sp]
  12ada4:	e3a03043 	mov	r3, #67	; 0x43
  12ada8:	e3082e40 	movw	r2, #36416	; 0x8e40
  12adac:	e3402014 	movt	r2, #20
  12adb0:	ebfff47b 	bl	127fa4 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
  12adb4:	e51b0008 	ldr	r0, [fp, #-8]
  12adb8:	eb0008c4 	bl	12d0d0 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_decline: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
  12adbc:	e51b3008 	ldr	r3, [fp, #-8]
  12adc0:	e5d3300a 	ldrb	r3, [r3, #10]
  12adc4:	e35300ff 	cmp	r3, #255	; 0xff
  12adc8:	0a000005 	beq	12ade4 <dhcp_decline+0x118>
    dhcp->tries++;
  12adcc:	e51b3008 	ldr	r3, [fp, #-8]
  12add0:	e5d3300a 	ldrb	r3, [r3, #10]
  12add4:	e2833001 	add	r3, r3, #1
  12add8:	e6ef2073 	uxtb	r2, r3
  12addc:	e51b3008 	ldr	r3, [fp, #-8]
  12ade0:	e5c3200a 	strb	r2, [r3, #10]
  }
  msecs = 10*1000;
  12ade4:	e3023710 	movw	r3, #10000	; 0x2710
  12ade8:	e14b30bc 	strh	r3, [fp, #-12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  12adec:	e15b30bc 	ldrh	r3, [fp, #-12]
  12adf0:	e2833e1f 	add	r3, r3, #496	; 0x1f0
  12adf4:	e2833003 	add	r3, r3, #3
  12adf8:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  12adfc:	e3412062 	movt	r2, #4194	; 0x1062
  12ae00:	e0c10293 	smull	r0, r1, r3, r2
  12ae04:	e1a022c1 	asr	r2, r1, #5
  12ae08:	e1a03fc3 	asr	r3, r3, #31
  12ae0c:	e0423003 	sub	r3, r2, r3
  12ae10:	e6ff2073 	uxth	r2, r3
  12ae14:	e51b3008 	ldr	r3, [fp, #-8]
  12ae18:	e1c321b6 	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  12ae1c:	e15b30d9 	ldrsb	r3, [fp, #-9]
}
  12ae20:	e1a00003 	mov	r0, r3
  12ae24:	e24bd004 	sub	sp, fp, #4
  12ae28:	e8bd8800 	pop	{fp, pc}

0012ae2c <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
  12ae2c:	e92d4800 	push	{fp, lr}
  12ae30:	e28db004 	add	fp, sp, #4
  12ae34:	e24dd020 	sub	sp, sp, #32
  12ae38:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12ae3c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12ae40:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12ae44:	e50b300c 	str	r3, [fp, #-12]
  err_t result = ERR_OK;
  12ae48:	e3a03000 	mov	r3, #0
  12ae4c:	e54b300d 	strb	r3, [fp, #-13]
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
  ip4_addr_set_any(&dhcp->offered_ip_addr);
  12ae50:	e51b300c 	ldr	r3, [fp, #-12]
  12ae54:	e3a02000 	mov	r2, #0
  12ae58:	e5832028 	str	r2, [r3, #40]	; 0x28
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
  12ae5c:	e3a01006 	mov	r1, #6
  12ae60:	e51b000c 	ldr	r0, [fp, #-12]
  12ae64:	eb000331 	bl	12bb30 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
  12ae68:	e3a02001 	mov	r2, #1
  12ae6c:	e51b100c 	ldr	r1, [fp, #-12]
  12ae70:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12ae74:	eb00075d 	bl	12cbf0 <dhcp_create_msg>
  12ae78:	e1a03000 	mov	r3, r0
  12ae7c:	e54b300d 	strb	r3, [fp, #-13]
  if (result == ERR_OK) {
  12ae80:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12ae84:	e3530000 	cmp	r3, #0
  12ae88:	1a000037 	bne	12af6c <dhcp_discover+0x140>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  12ae8c:	e3a02002 	mov	r2, #2
  12ae90:	e3a01039 	mov	r1, #57	; 0x39
  12ae94:	e51b000c 	ldr	r0, [fp, #-12]
  12ae98:	eb00033c 	bl	12bb90 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
  12ae9c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12aea0:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  12aea4:	e1a01003 	mov	r1, r3
  12aea8:	e51b000c 	ldr	r0, [fp, #-12]
  12aeac:	eb000386 	bl	12bccc <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
  12aeb0:	e3a02004 	mov	r2, #4
  12aeb4:	e3a01037 	mov	r1, #55	; 0x37
  12aeb8:	e51b000c 	ldr	r0, [fp, #-12]
  12aebc:	eb000333 	bl	12bb90 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12aec0:	e3a03000 	mov	r3, #0
  12aec4:	e54b3005 	strb	r3, [fp, #-5]
  12aec8:	ea000009 	b	12aef4 <dhcp_discover+0xc8>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
  12aecc:	e55b2005 	ldrb	r2, [fp, #-5]
  12aed0:	e30d3034 	movw	r3, #53300	; 0xd034
  12aed4:	e3403014 	movt	r3, #20
  12aed8:	e7d33002 	ldrb	r3, [r3, r2]
  12aedc:	e1a01003 	mov	r1, r3
  12aee0:	e51b000c 	ldr	r0, [fp, #-12]
  12aee4:	eb000359 	bl	12bc50 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12aee8:	e55b3005 	ldrb	r3, [fp, #-5]
  12aeec:	e2833001 	add	r3, r3, #1
  12aef0:	e54b3005 	strb	r3, [fp, #-5]
  12aef4:	e55b3005 	ldrb	r3, [fp, #-5]
  12aef8:	e3530003 	cmp	r3, #3
  12aefc:	9afffff2 	bls	12aecc <dhcp_discover+0xa0>
    }
    dhcp_option_trailer(dhcp);
  12af00:	e51b000c 	ldr	r0, [fp, #-12]
  12af04:	eb0008a6 	bl	12d1a4 <dhcp_option_trailer>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: realloc()ing\n"));
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  12af08:	e51b300c 	ldr	r3, [fp, #-12]
  12af0c:	e593200c 	ldr	r2, [r3, #12]
  12af10:	e51b300c 	ldr	r3, [fp, #-12]
  12af14:	e1d331b4 	ldrh	r3, [r3, #20]
  12af18:	e28330f0 	add	r3, r3, #240	; 0xf0
  12af1c:	e6ff3073 	uxth	r3, r3
  12af20:	e1a01003 	mov	r1, r3
  12af24:	e1a00002 	mov	r0, r2
  12af28:	ebffbdbe 	bl	11a628 <pbuf_realloc>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
  12af2c:	e30e3254 	movw	r3, #57940	; 0xe254
  12af30:	e3403014 	movt	r3, #20
  12af34:	e5930000 	ldr	r0, [r3]
  12af38:	e51b300c 	ldr	r3, [fp, #-12]
  12af3c:	e593100c 	ldr	r1, [r3, #12]
  12af40:	e3083e3c 	movw	r3, #36412	; 0x8e3c
  12af44:	e3403014 	movt	r3, #20
  12af48:	e58d3004 	str	r3, [sp, #4]
  12af4c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12af50:	e58d3000 	str	r3, [sp]
  12af54:	e3a03043 	mov	r3, #67	; 0x43
  12af58:	e3082e40 	movw	r2, #36416	; 0x8e40
  12af5c:	e3402014 	movt	r2, #20
  12af60:	ebfff40f 	bl	127fa4 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    dhcp_delete_msg(dhcp);
  12af64:	e51b000c 	ldr	r0, [fp, #-12]
  12af68:	eb000858 	bl	12d0d0 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
  12af6c:	e51b300c 	ldr	r3, [fp, #-12]
  12af70:	e5d3300a 	ldrb	r3, [r3, #10]
  12af74:	e35300ff 	cmp	r3, #255	; 0xff
  12af78:	0a000005 	beq	12af94 <dhcp_discover+0x168>
    dhcp->tries++;
  12af7c:	e51b300c 	ldr	r3, [fp, #-12]
  12af80:	e5d3300a 	ldrb	r3, [r3, #10]
  12af84:	e2833001 	add	r3, r3, #1
  12af88:	e6ef2073 	uxtb	r2, r3
  12af8c:	e51b300c 	ldr	r3, [fp, #-12]
  12af90:	e5c3200a 	strb	r2, [r3, #10]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
  12af94:	e51b300c 	ldr	r3, [fp, #-12]
  12af98:	e5d3300a 	ldrb	r3, [r3, #10]
  12af9c:	e3530005 	cmp	r3, #5
  12afa0:	8a000006 	bhi	12afc0 <dhcp_discover+0x194>
  12afa4:	e51b300c 	ldr	r3, [fp, #-12]
  12afa8:	e5d3300a 	ldrb	r3, [r3, #10]
  12afac:	e1a02003 	mov	r2, r3
  12afb0:	e3a03ffa 	mov	r3, #1000	; 0x3e8
  12afb4:	e1a03213 	lsl	r3, r3, r2
  12afb8:	e6ff3073 	uxth	r3, r3
  12afbc:	ea000000 	b	12afc4 <dhcp_discover+0x198>
  12afc0:	e30e3a60 	movw	r3, #60000	; 0xea60
  12afc4:	e14b31b0 	strh	r3, [fp, #-16]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  12afc8:	e15b31b0 	ldrh	r3, [fp, #-16]
  12afcc:	e2833e1f 	add	r3, r3, #496	; 0x1f0
  12afd0:	e2833003 	add	r3, r3, #3
  12afd4:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  12afd8:	e3412062 	movt	r2, #4194	; 0x1062
  12afdc:	e0c10293 	smull	r0, r1, r3, r2
  12afe0:	e1a022c1 	asr	r2, r1, #5
  12afe4:	e1a03fc3 	asr	r3, r3, #31
  12afe8:	e0423003 	sub	r3, r2, r3
  12afec:	e6ff2073 	uxth	r2, r3
  12aff0:	e51b300c 	ldr	r3, [fp, #-12]
  12aff4:	e1c321b6 	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  12aff8:	e15b30dd 	ldrsb	r3, [fp, #-13]
}
  12affc:	e1a00003 	mov	r0, r3
  12b000:	e24bd004 	sub	sp, fp, #4
  12b004:	e8bd8800 	pop	{fp, pc}

0012b008 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
  12b008:	e92d4800 	push	{fp, lr}
  12b00c:	e28db004 	add	fp, sp, #4
  12b010:	e24dd020 	sub	sp, sp, #32
  12b014:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
  12b018:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12b01c:	e3530000 	cmp	r3, #0
  12b020:	1a000007 	bne	12b044 <dhcp_bind+0x3c>
  12b024:	e3080390 	movw	r0, #33680	; 0x8390
  12b028:	e3400014 	movt	r0, #20
  12b02c:	ebff6038 	bl	103114 <rt_kprintf>
  12b030:	e30013ff 	movw	r1, #1023	; 0x3ff
  12b034:	e30802a4 	movw	r0, #33444	; 0x82a4
  12b038:	e3400014 	movt	r0, #20
  12b03c:	ebff7eb4 	bl	10ab14 <sys_arch_assert>
  12b040:	ea0000aa 	b	12b2f0 <dhcp_bind+0x2e8>
  dhcp = netif_dhcp_data(netif);
  12b044:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12b048:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12b04c:	e50b300c 	str	r3, [fp, #-12]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
  12b050:	e51b300c 	ldr	r3, [fp, #-12]
  12b054:	e3530000 	cmp	r3, #0
  12b058:	1a000007 	bne	12b07c <dhcp_bind+0x74>
  12b05c:	e30803ac 	movw	r0, #33708	; 0x83ac
  12b060:	e3400014 	movt	r0, #20
  12b064:	ebff602a 	bl	103114 <rt_kprintf>
  12b068:	e3001401 	movw	r1, #1025	; 0x401
  12b06c:	e30802a4 	movw	r0, #33444	; 0x82a4
  12b070:	e3400014 	movt	r0, #20
  12b074:	ebff7ea6 	bl	10ab14 <sys_arch_assert>
  12b078:	ea00009c 	b	12b2f0 <dhcp_bind+0x2e8>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
  12b07c:	e51b300c 	ldr	r3, [fp, #-12]
  12b080:	e3a02000 	mov	r2, #0
  12b084:	e1c322b0 	strh	r2, [r3, #32]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
  12b088:	e51b300c 	ldr	r3, [fp, #-12]
  12b08c:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  12b090:	e3730001 	cmn	r3, #1
  12b094:	0a000017 	beq	12b0f8 <dhcp_bind+0xf0>
     /* set renewal period timer */
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
     timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
  12b098:	e51b300c 	ldr	r3, [fp, #-12]
  12b09c:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  12b0a0:	e283201e 	add	r2, r3, #30
  12b0a4:	e3083889 	movw	r3, #34953	; 0x8889
  12b0a8:	e3483888 	movt	r3, #34952	; 0x8888
  12b0ac:	e0832392 	umull	r2, r3, r2, r3
  12b0b0:	e1a032a3 	lsr	r3, r3, #5
  12b0b4:	e50b3008 	str	r3, [fp, #-8]
     if (timeout > 0xffff) {
  12b0b8:	e51b3008 	ldr	r3, [fp, #-8]
  12b0bc:	e3530801 	cmp	r3, #65536	; 0x10000
  12b0c0:	3a000001 	bcc	12b0cc <dhcp_bind+0xc4>
       timeout = 0xffff;
  12b0c4:	e30f3fff 	movw	r3, #65535	; 0xffff
  12b0c8:	e50b3008 	str	r3, [fp, #-8]
     }
     dhcp->t0_timeout = (u16_t)timeout;
  12b0cc:	e51b3008 	ldr	r3, [fp, #-8]
  12b0d0:	e6ff2073 	uxth	r2, r3
  12b0d4:	e51b300c 	ldr	r3, [fp, #-12]
  12b0d8:	e1c322b2 	strh	r2, [r3, #34]	; 0x22
     if (dhcp->t0_timeout == 0) {
  12b0dc:	e51b300c 	ldr	r3, [fp, #-12]
  12b0e0:	e1d332b2 	ldrh	r3, [r3, #34]	; 0x22
  12b0e4:	e3530000 	cmp	r3, #0
  12b0e8:	1a000002 	bne	12b0f8 <dhcp_bind+0xf0>
       dhcp->t0_timeout = 1;
  12b0ec:	e51b300c 	ldr	r3, [fp, #-12]
  12b0f0:	e3a02001 	mov	r2, #1
  12b0f4:	e1c322b2 	strh	r2, [r3, #34]	; 0x22
     }
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease*1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
  12b0f8:	e51b300c 	ldr	r3, [fp, #-12]
  12b0fc:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  12b100:	e3730001 	cmn	r3, #1
  12b104:	0a00001b 	beq	12b178 <dhcp_bind+0x170>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
  12b108:	e51b300c 	ldr	r3, [fp, #-12]
  12b10c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  12b110:	e283201e 	add	r2, r3, #30
  12b114:	e3083889 	movw	r3, #34953	; 0x8889
  12b118:	e3483888 	movt	r3, #34952	; 0x8888
  12b11c:	e0832392 	umull	r2, r3, r2, r3
  12b120:	e1a032a3 	lsr	r3, r3, #5
  12b124:	e50b3008 	str	r3, [fp, #-8]
    if (timeout > 0xffff) {
  12b128:	e51b3008 	ldr	r3, [fp, #-8]
  12b12c:	e3530801 	cmp	r3, #65536	; 0x10000
  12b130:	3a000001 	bcc	12b13c <dhcp_bind+0x134>
      timeout = 0xffff;
  12b134:	e30f3fff 	movw	r3, #65535	; 0xffff
  12b138:	e50b3008 	str	r3, [fp, #-8]
    }
    dhcp->t1_timeout = (u16_t)timeout;
  12b13c:	e51b3008 	ldr	r3, [fp, #-8]
  12b140:	e6ff2073 	uxth	r2, r3
  12b144:	e51b300c 	ldr	r3, [fp, #-12]
  12b148:	e1c321b8 	strh	r2, [r3, #24]
    if (dhcp->t1_timeout == 0) {
  12b14c:	e51b300c 	ldr	r3, [fp, #-12]
  12b150:	e1d331b8 	ldrh	r3, [r3, #24]
  12b154:	e3530000 	cmp	r3, #0
  12b158:	1a000002 	bne	12b168 <dhcp_bind+0x160>
      dhcp->t1_timeout = 1;
  12b15c:	e51b300c 	ldr	r3, [fp, #-12]
  12b160:	e3a02001 	mov	r2, #1
  12b164:	e1c321b8 	strh	r2, [r3, #24]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew*1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
  12b168:	e51b300c 	ldr	r3, [fp, #-12]
  12b16c:	e1d321b8 	ldrh	r2, [r3, #24]
  12b170:	e51b300c 	ldr	r3, [fp, #-12]
  12b174:	e1c321bc 	strh	r2, [r3, #28]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
  12b178:	e51b300c 	ldr	r3, [fp, #-12]
  12b17c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  12b180:	e3730001 	cmn	r3, #1
  12b184:	0a00001b 	beq	12b1f8 <dhcp_bind+0x1f0>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
  12b188:	e51b300c 	ldr	r3, [fp, #-12]
  12b18c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  12b190:	e283201e 	add	r2, r3, #30
  12b194:	e3083889 	movw	r3, #34953	; 0x8889
  12b198:	e3483888 	movt	r3, #34952	; 0x8888
  12b19c:	e0832392 	umull	r2, r3, r2, r3
  12b1a0:	e1a032a3 	lsr	r3, r3, #5
  12b1a4:	e50b3008 	str	r3, [fp, #-8]
    if (timeout > 0xffff) {
  12b1a8:	e51b3008 	ldr	r3, [fp, #-8]
  12b1ac:	e3530801 	cmp	r3, #65536	; 0x10000
  12b1b0:	3a000001 	bcc	12b1bc <dhcp_bind+0x1b4>
      timeout = 0xffff;
  12b1b4:	e30f3fff 	movw	r3, #65535	; 0xffff
  12b1b8:	e50b3008 	str	r3, [fp, #-8]
    }
    dhcp->t2_timeout = (u16_t)timeout;
  12b1bc:	e51b3008 	ldr	r3, [fp, #-8]
  12b1c0:	e6ff2073 	uxth	r2, r3
  12b1c4:	e51b300c 	ldr	r3, [fp, #-12]
  12b1c8:	e1c321ba 	strh	r2, [r3, #26]
    if (dhcp->t2_timeout == 0) {
  12b1cc:	e51b300c 	ldr	r3, [fp, #-12]
  12b1d0:	e1d331ba 	ldrh	r3, [r3, #26]
  12b1d4:	e3530000 	cmp	r3, #0
  12b1d8:	1a000002 	bne	12b1e8 <dhcp_bind+0x1e0>
      dhcp->t2_timeout = 1;
  12b1dc:	e51b300c 	ldr	r3, [fp, #-12]
  12b1e0:	e3a02001 	mov	r2, #1
  12b1e4:	e1c321ba 	strh	r2, [r3, #26]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind*1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
  12b1e8:	e51b300c 	ldr	r3, [fp, #-12]
  12b1ec:	e1d321ba 	ldrh	r2, [r3, #26]
  12b1f0:	e51b300c 	ldr	r3, [fp, #-12]
  12b1f4:	e1c321be 	strh	r2, [r3, #30]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
  12b1f8:	e51b300c 	ldr	r3, [fp, #-12]
  12b1fc:	e1d321b8 	ldrh	r2, [r3, #24]
  12b200:	e51b300c 	ldr	r3, [fp, #-12]
  12b204:	e1d331ba 	ldrh	r3, [r3, #26]
  12b208:	e1520003 	cmp	r2, r3
  12b20c:	3a000006 	bcc	12b22c <dhcp_bind+0x224>
  12b210:	e51b300c 	ldr	r3, [fp, #-12]
  12b214:	e1d331ba 	ldrh	r3, [r3, #26]
  12b218:	e3530000 	cmp	r3, #0
  12b21c:	0a000002 	beq	12b22c <dhcp_bind+0x224>
    dhcp->t1_timeout = 0;
  12b220:	e51b300c 	ldr	r3, [fp, #-12]
  12b224:	e3a02000 	mov	r2, #0
  12b228:	e1c321b8 	strh	r2, [r3, #24]
  }

  if (dhcp->subnet_mask_given) {
  12b22c:	e51b300c 	ldr	r3, [fp, #-12]
  12b230:	e5d3300b 	ldrb	r3, [r3, #11]
  12b234:	e3530000 	cmp	r3, #0
  12b238:	0a000003 	beq	12b24c <dhcp_bind+0x244>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
  12b23c:	e51b300c 	ldr	r3, [fp, #-12]
  12b240:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  12b244:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  12b248:	ea000011 	b	12b294 <dhcp_bind+0x28c>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
  12b24c:	e51b300c 	ldr	r3, [fp, #-12]
  12b250:	e2833028 	add	r3, r3, #40	; 0x28
  12b254:	e5d33000 	ldrb	r3, [r3]
  12b258:	e54b300d 	strb	r3, [fp, #-13]
    if (first_octet <= 127) {
  12b25c:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12b260:	e3530000 	cmp	r3, #0
  12b264:	ba000002 	blt	12b274 <dhcp_bind+0x26c>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
  12b268:	e3a030ff 	mov	r3, #255	; 0xff
  12b26c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  12b270:	ea000007 	b	12b294 <dhcp_bind+0x28c>
    } else if (first_octet >= 192) {
  12b274:	e55b300d 	ldrb	r3, [fp, #-13]
  12b278:	e35300bf 	cmp	r3, #191	; 0xbf
  12b27c:	9a000002 	bls	12b28c <dhcp_bind+0x284>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
  12b280:	e3e034ff 	mvn	r3, #-16777216	; 0xff000000
  12b284:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  12b288:	ea000001 	b	12b294 <dhcp_bind+0x28c>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
  12b28c:	e30f3fff 	movw	r3, #65535	; 0xffff
  12b290:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
  12b294:	e51b300c 	ldr	r3, [fp, #-12]
  12b298:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  12b29c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
  12b2a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b2a4:	e3530000 	cmp	r3, #0
  12b2a8:	1a000007 	bne	12b2cc <dhcp_bind+0x2c4>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
  12b2ac:	e51b300c 	ldr	r3, [fp, #-12]
  12b2b0:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  12b2b4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12b2b8:	e0033002 	and	r3, r3, r2
  12b2bc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
  12b2c0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b2c4:	e3833401 	orr	r3, r3, #16777216	; 0x1000000
  12b2c8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
    ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
  12b2cc:	e3a0100a 	mov	r1, #10
  12b2d0:	e51b000c 	ldr	r0, [fp, #-12]
  12b2d4:	eb000215 	bl	12bb30 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
  12b2d8:	e51b300c 	ldr	r3, [fp, #-12]
  12b2dc:	e2831028 	add	r1, r3, #40	; 0x28
  12b2e0:	e24b3018 	sub	r3, fp, #24
  12b2e4:	e24b2014 	sub	r2, fp, #20
  12b2e8:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  12b2ec:	ebffb7a8 	bl	119194 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
  12b2f0:	e24bd004 	sub	sp, fp, #4
  12b2f4:	e8bd8800 	pop	{fp, pc}

0012b2f8 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
  12b2f8:	e92d4800 	push	{fp, lr}
  12b2fc:	e28db004 	add	fp, sp, #4
  12b300:	e24dd020 	sub	sp, sp, #32
  12b304:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12b308:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b30c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12b310:	e50b300c 	str	r3, [fp, #-12]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
  12b314:	e3a01005 	mov	r1, #5
  12b318:	e51b000c 	ldr	r0, [fp, #-12]
  12b31c:	eb000203 	bl	12bb30 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
  12b320:	e3a02003 	mov	r2, #3
  12b324:	e51b100c 	ldr	r1, [fp, #-12]
  12b328:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12b32c:	eb00062f 	bl	12cbf0 <dhcp_create_msg>
  12b330:	e1a03000 	mov	r3, r0
  12b334:	e54b300d 	strb	r3, [fp, #-13]
  if (result == ERR_OK) {
  12b338:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12b33c:	e3530000 	cmp	r3, #0
  12b340:	1a000037 	bne	12b424 <dhcp_renew+0x12c>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  12b344:	e3a02002 	mov	r2, #2
  12b348:	e3a01039 	mov	r1, #57	; 0x39
  12b34c:	e51b000c 	ldr	r0, [fp, #-12]
  12b350:	eb00020e 	bl	12bb90 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
  12b354:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b358:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  12b35c:	e1a01003 	mov	r1, r3
  12b360:	e51b000c 	ldr	r0, [fp, #-12]
  12b364:	eb000258 	bl	12bccc <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
  12b368:	e3a02004 	mov	r2, #4
  12b36c:	e3a01037 	mov	r1, #55	; 0x37
  12b370:	e51b000c 	ldr	r0, [fp, #-12]
  12b374:	eb000205 	bl	12bb90 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12b378:	e3a03000 	mov	r3, #0
  12b37c:	e54b3005 	strb	r3, [fp, #-5]
  12b380:	ea000009 	b	12b3ac <dhcp_renew+0xb4>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
  12b384:	e55b2005 	ldrb	r2, [fp, #-5]
  12b388:	e30d3034 	movw	r3, #53300	; 0xd034
  12b38c:	e3403014 	movt	r3, #20
  12b390:	e7d33002 	ldrb	r3, [r3, r2]
  12b394:	e1a01003 	mov	r1, r3
  12b398:	e51b000c 	ldr	r0, [fp, #-12]
  12b39c:	eb00022b 	bl	12bc50 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12b3a0:	e55b3005 	ldrb	r3, [fp, #-5]
  12b3a4:	e2833001 	add	r3, r3, #1
  12b3a8:	e54b3005 	strb	r3, [fp, #-5]
  12b3ac:	e55b3005 	ldrb	r3, [fp, #-5]
  12b3b0:	e3530003 	cmp	r3, #3
  12b3b4:	9afffff2 	bls	12b384 <dhcp_renew+0x8c>
    }

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
  12b3b8:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  12b3bc:	e51b000c 	ldr	r0, [fp, #-12]
  12b3c0:	eb0002bd 	bl	12bebc <dhcp_option_hostname>
#endif /* LWIP_NETIF_HOSTNAME */

    /* append DHCP message trailer */
    dhcp_option_trailer(dhcp);
  12b3c4:	e51b000c 	ldr	r0, [fp, #-12]
  12b3c8:	eb000775 	bl	12d1a4 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  12b3cc:	e51b300c 	ldr	r3, [fp, #-12]
  12b3d0:	e593200c 	ldr	r2, [r3, #12]
  12b3d4:	e51b300c 	ldr	r3, [fp, #-12]
  12b3d8:	e1d331b4 	ldrh	r3, [r3, #20]
  12b3dc:	e28330f0 	add	r3, r3, #240	; 0xf0
  12b3e0:	e6ff3073 	uxth	r3, r3
  12b3e4:	e1a01003 	mov	r1, r3
  12b3e8:	e1a00002 	mov	r0, r2
  12b3ec:	ebffbc8d 	bl	11a628 <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
  12b3f0:	e30e3254 	movw	r3, #57940	; 0xe254
  12b3f4:	e3403014 	movt	r3, #20
  12b3f8:	e5930000 	ldr	r0, [r3]
  12b3fc:	e51b300c 	ldr	r3, [fp, #-12]
  12b400:	e593100c 	ldr	r1, [r3, #12]
  12b404:	e51b300c 	ldr	r3, [fp, #-12]
  12b408:	e2832024 	add	r2, r3, #36	; 0x24
  12b40c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b410:	e58d3000 	str	r3, [sp]
  12b414:	e3a03043 	mov	r3, #67	; 0x43
  12b418:	ebfff2a9 	bl	127ec4 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
  12b41c:	e51b000c 	ldr	r0, [fp, #-12]
  12b420:	eb00072a 	bl	12d0d0 <dhcp_delete_msg>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
  12b424:	e51b300c 	ldr	r3, [fp, #-12]
  12b428:	e5d3300a 	ldrb	r3, [r3, #10]
  12b42c:	e35300ff 	cmp	r3, #255	; 0xff
  12b430:	0a000005 	beq	12b44c <dhcp_renew+0x154>
    dhcp->tries++;
  12b434:	e51b300c 	ldr	r3, [fp, #-12]
  12b438:	e5d3300a 	ldrb	r3, [r3, #10]
  12b43c:	e2833001 	add	r3, r3, #1
  12b440:	e6ef2073 	uxtb	r2, r3
  12b444:	e51b300c 	ldr	r3, [fp, #-12]
  12b448:	e5c3200a 	strb	r2, [r3, #10]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
  12b44c:	e51b300c 	ldr	r3, [fp, #-12]
  12b450:	e5d3300a 	ldrb	r3, [r3, #10]
  12b454:	e3530009 	cmp	r3, #9
  12b458:	8a00000a 	bhi	12b488 <dhcp_renew+0x190>
  12b45c:	e51b300c 	ldr	r3, [fp, #-12]
  12b460:	e5d3300a 	ldrb	r3, [r3, #10]
  12b464:	e6ff3073 	uxth	r3, r3
  12b468:	e1a02003 	mov	r2, r3
  12b46c:	e1a02282 	lsl	r2, r2, #5
  12b470:	e0422003 	sub	r2, r2, r3
  12b474:	e1a02102 	lsl	r2, r2, #2
  12b478:	e0823003 	add	r3, r2, r3
  12b47c:	e1a03203 	lsl	r3, r3, #4
  12b480:	e6ff3073 	uxth	r3, r3
  12b484:	ea000000 	b	12b48c <dhcp_renew+0x194>
  12b488:	e3043e20 	movw	r3, #20000	; 0x4e20
  12b48c:	e14b31b0 	strh	r3, [fp, #-16]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  12b490:	e15b31b0 	ldrh	r3, [fp, #-16]
  12b494:	e2833e1f 	add	r3, r3, #496	; 0x1f0
  12b498:	e2833003 	add	r3, r3, #3
  12b49c:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  12b4a0:	e3412062 	movt	r2, #4194	; 0x1062
  12b4a4:	e0c10293 	smull	r0, r1, r3, r2
  12b4a8:	e1a022c1 	asr	r2, r1, #5
  12b4ac:	e1a03fc3 	asr	r3, r3, #31
  12b4b0:	e0423003 	sub	r3, r2, r3
  12b4b4:	e6ff2073 	uxth	r2, r3
  12b4b8:	e51b300c 	ldr	r3, [fp, #-12]
  12b4bc:	e1c321b6 	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  12b4c0:	e15b30dd 	ldrsb	r3, [fp, #-13]
}
  12b4c4:	e1a00003 	mov	r0, r3
  12b4c8:	e24bd004 	sub	sp, fp, #4
  12b4cc:	e8bd8800 	pop	{fp, pc}

0012b4d0 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
  12b4d0:	e92d4800 	push	{fp, lr}
  12b4d4:	e28db004 	add	fp, sp, #4
  12b4d8:	e24dd020 	sub	sp, sp, #32
  12b4dc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12b4e0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b4e4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12b4e8:	e50b300c 	str	r3, [fp, #-12]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
  12b4ec:	e3a01004 	mov	r1, #4
  12b4f0:	e51b000c 	ldr	r0, [fp, #-12]
  12b4f4:	eb00018d 	bl	12bb30 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
  12b4f8:	e3a02003 	mov	r2, #3
  12b4fc:	e51b100c 	ldr	r1, [fp, #-12]
  12b500:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12b504:	eb0005b9 	bl	12cbf0 <dhcp_create_msg>
  12b508:	e1a03000 	mov	r3, r0
  12b50c:	e54b300d 	strb	r3, [fp, #-13]
  if (result == ERR_OK) {
  12b510:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12b514:	e3530000 	cmp	r3, #0
  12b518:	1a000037 	bne	12b5fc <dhcp_rebind+0x12c>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  12b51c:	e3a02002 	mov	r2, #2
  12b520:	e3a01039 	mov	r1, #57	; 0x39
  12b524:	e51b000c 	ldr	r0, [fp, #-12]
  12b528:	eb000198 	bl	12bb90 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
  12b52c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b530:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  12b534:	e1a01003 	mov	r1, r3
  12b538:	e51b000c 	ldr	r0, [fp, #-12]
  12b53c:	eb0001e2 	bl	12bccc <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
  12b540:	e3a02004 	mov	r2, #4
  12b544:	e3a01037 	mov	r1, #55	; 0x37
  12b548:	e51b000c 	ldr	r0, [fp, #-12]
  12b54c:	eb00018f 	bl	12bb90 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12b550:	e3a03000 	mov	r3, #0
  12b554:	e54b3005 	strb	r3, [fp, #-5]
  12b558:	ea000009 	b	12b584 <dhcp_rebind+0xb4>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
  12b55c:	e55b2005 	ldrb	r2, [fp, #-5]
  12b560:	e30d3034 	movw	r3, #53300	; 0xd034
  12b564:	e3403014 	movt	r3, #20
  12b568:	e7d33002 	ldrb	r3, [r3, r2]
  12b56c:	e1a01003 	mov	r1, r3
  12b570:	e51b000c 	ldr	r0, [fp, #-12]
  12b574:	eb0001b5 	bl	12bc50 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12b578:	e55b3005 	ldrb	r3, [fp, #-5]
  12b57c:	e2833001 	add	r3, r3, #1
  12b580:	e54b3005 	strb	r3, [fp, #-5]
  12b584:	e55b3005 	ldrb	r3, [fp, #-5]
  12b588:	e3530003 	cmp	r3, #3
  12b58c:	9afffff2 	bls	12b55c <dhcp_rebind+0x8c>
    }

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
  12b590:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  12b594:	e51b000c 	ldr	r0, [fp, #-12]
  12b598:	eb000247 	bl	12bebc <dhcp_option_hostname>
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
  12b59c:	e51b000c 	ldr	r0, [fp, #-12]
  12b5a0:	eb0006ff 	bl	12d1a4 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  12b5a4:	e51b300c 	ldr	r3, [fp, #-12]
  12b5a8:	e593200c 	ldr	r2, [r3, #12]
  12b5ac:	e51b300c 	ldr	r3, [fp, #-12]
  12b5b0:	e1d331b4 	ldrh	r3, [r3, #20]
  12b5b4:	e28330f0 	add	r3, r3, #240	; 0xf0
  12b5b8:	e6ff3073 	uxth	r3, r3
  12b5bc:	e1a01003 	mov	r1, r3
  12b5c0:	e1a00002 	mov	r0, r2
  12b5c4:	ebffbc17 	bl	11a628 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
  12b5c8:	e30e3254 	movw	r3, #57940	; 0xe254
  12b5cc:	e3403014 	movt	r3, #20
  12b5d0:	e5930000 	ldr	r0, [r3]
  12b5d4:	e51b300c 	ldr	r3, [fp, #-12]
  12b5d8:	e593100c 	ldr	r1, [r3, #12]
  12b5dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b5e0:	e58d3000 	str	r3, [sp]
  12b5e4:	e3a03043 	mov	r3, #67	; 0x43
  12b5e8:	e3082e40 	movw	r2, #36416	; 0x8e40
  12b5ec:	e3402014 	movt	r2, #20
  12b5f0:	ebfff233 	bl	127ec4 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
  12b5f4:	e51b000c 	ldr	r0, [fp, #-12]
  12b5f8:	eb0006b4 	bl	12d0d0 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
  12b5fc:	e51b300c 	ldr	r3, [fp, #-12]
  12b600:	e5d3300a 	ldrb	r3, [r3, #10]
  12b604:	e35300ff 	cmp	r3, #255	; 0xff
  12b608:	0a000005 	beq	12b624 <dhcp_rebind+0x154>
    dhcp->tries++;
  12b60c:	e51b300c 	ldr	r3, [fp, #-12]
  12b610:	e5d3300a 	ldrb	r3, [r3, #10]
  12b614:	e2833001 	add	r3, r3, #1
  12b618:	e6ef2073 	uxtb	r2, r3
  12b61c:	e51b300c 	ldr	r3, [fp, #-12]
  12b620:	e5c3200a 	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
  12b624:	e51b300c 	ldr	r3, [fp, #-12]
  12b628:	e5d3300a 	ldrb	r3, [r3, #10]
  12b62c:	e3530009 	cmp	r3, #9
  12b630:	8a00000a 	bhi	12b660 <dhcp_rebind+0x190>
  12b634:	e51b300c 	ldr	r3, [fp, #-12]
  12b638:	e5d3300a 	ldrb	r3, [r3, #10]
  12b63c:	e6ff3073 	uxth	r3, r3
  12b640:	e1a02003 	mov	r2, r3
  12b644:	e1a02282 	lsl	r2, r2, #5
  12b648:	e0422003 	sub	r2, r2, r3
  12b64c:	e1a02102 	lsl	r2, r2, #2
  12b650:	e0823003 	add	r3, r2, r3
  12b654:	e1a03183 	lsl	r3, r3, #3
  12b658:	e6ff3073 	uxth	r3, r3
  12b65c:	ea000000 	b	12b664 <dhcp_rebind+0x194>
  12b660:	e3023710 	movw	r3, #10000	; 0x2710
  12b664:	e14b31b0 	strh	r3, [fp, #-16]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  12b668:	e15b31b0 	ldrh	r3, [fp, #-16]
  12b66c:	e2833e1f 	add	r3, r3, #496	; 0x1f0
  12b670:	e2833003 	add	r3, r3, #3
  12b674:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  12b678:	e3412062 	movt	r2, #4194	; 0x1062
  12b67c:	e0c10293 	smull	r0, r1, r3, r2
  12b680:	e1a022c1 	asr	r2, r1, #5
  12b684:	e1a03fc3 	asr	r3, r3, #31
  12b688:	e0423003 	sub	r3, r2, r3
  12b68c:	e6ff2073 	uxth	r2, r3
  12b690:	e51b300c 	ldr	r3, [fp, #-12]
  12b694:	e1c321b6 	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  12b698:	e15b30dd 	ldrsb	r3, [fp, #-13]
}
  12b69c:	e1a00003 	mov	r0, r3
  12b6a0:	e24bd004 	sub	sp, fp, #4
  12b6a4:	e8bd8800 	pop	{fp, pc}

0012b6a8 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
  12b6a8:	e92d4800 	push	{fp, lr}
  12b6ac:	e28db004 	add	fp, sp, #4
  12b6b0:	e24dd020 	sub	sp, sp, #32
  12b6b4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12b6b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b6bc:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12b6c0:	e50b300c 	str	r3, [fp, #-12]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
  12b6c4:	e3a01003 	mov	r1, #3
  12b6c8:	e51b000c 	ldr	r0, [fp, #-12]
  12b6cc:	eb000117 	bl	12bb30 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
  12b6d0:	e3a02003 	mov	r2, #3
  12b6d4:	e51b100c 	ldr	r1, [fp, #-12]
  12b6d8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12b6dc:	eb000543 	bl	12cbf0 <dhcp_create_msg>
  12b6e0:	e1a03000 	mov	r3, r0
  12b6e4:	e54b300d 	strb	r3, [fp, #-13]
  if (result == ERR_OK) {
  12b6e8:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12b6ec:	e3530000 	cmp	r3, #0
  12b6f0:	1a00003e 	bne	12b7f0 <dhcp_reboot+0x148>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  12b6f4:	e3a02002 	mov	r2, #2
  12b6f8:	e3a01039 	mov	r1, #57	; 0x39
  12b6fc:	e51b000c 	ldr	r0, [fp, #-12]
  12b700:	eb000122 	bl	12bb90 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
  12b704:	e3a01d09 	mov	r1, #576	; 0x240
  12b708:	e51b000c 	ldr	r0, [fp, #-12]
  12b70c:	eb00016e 	bl	12bccc <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
  12b710:	e3a02004 	mov	r2, #4
  12b714:	e3a01032 	mov	r1, #50	; 0x32
  12b718:	e51b000c 	ldr	r0, [fp, #-12]
  12b71c:	eb00011b 	bl	12bb90 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
  12b720:	e51b300c 	ldr	r3, [fp, #-12]
  12b724:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12b728:	e1a00003 	mov	r0, r3
  12b72c:	ebffaadb 	bl	1162a0 <lwip_htonl>
  12b730:	e1a03000 	mov	r3, r0
  12b734:	e1a01003 	mov	r1, r3
  12b738:	e51b000c 	ldr	r0, [fp, #-12]
  12b73c:	eb000193 	bl	12bd90 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
  12b740:	e3a02004 	mov	r2, #4
  12b744:	e3a01037 	mov	r1, #55	; 0x37
  12b748:	e51b000c 	ldr	r0, [fp, #-12]
  12b74c:	eb00010f 	bl	12bb90 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12b750:	e3a03000 	mov	r3, #0
  12b754:	e54b3005 	strb	r3, [fp, #-5]
  12b758:	ea000009 	b	12b784 <dhcp_reboot+0xdc>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
  12b75c:	e55b2005 	ldrb	r2, [fp, #-5]
  12b760:	e30d3034 	movw	r3, #53300	; 0xd034
  12b764:	e3403014 	movt	r3, #20
  12b768:	e7d33002 	ldrb	r3, [r3, r2]
  12b76c:	e1a01003 	mov	r1, r3
  12b770:	e51b000c 	ldr	r0, [fp, #-12]
  12b774:	eb000135 	bl	12bc50 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12b778:	e55b3005 	ldrb	r3, [fp, #-5]
  12b77c:	e2833001 	add	r3, r3, #1
  12b780:	e54b3005 	strb	r3, [fp, #-5]
  12b784:	e55b3005 	ldrb	r3, [fp, #-5]
  12b788:	e3530003 	cmp	r3, #3
  12b78c:	9afffff2 	bls	12b75c <dhcp_reboot+0xb4>
    }

    dhcp_option_trailer(dhcp);
  12b790:	e51b000c 	ldr	r0, [fp, #-12]
  12b794:	eb000682 	bl	12d1a4 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  12b798:	e51b300c 	ldr	r3, [fp, #-12]
  12b79c:	e593200c 	ldr	r2, [r3, #12]
  12b7a0:	e51b300c 	ldr	r3, [fp, #-12]
  12b7a4:	e1d331b4 	ldrh	r3, [r3, #20]
  12b7a8:	e28330f0 	add	r3, r3, #240	; 0xf0
  12b7ac:	e6ff3073 	uxth	r3, r3
  12b7b0:	e1a01003 	mov	r1, r3
  12b7b4:	e1a00002 	mov	r0, r2
  12b7b8:	ebffbb9a 	bl	11a628 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
  12b7bc:	e30e3254 	movw	r3, #57940	; 0xe254
  12b7c0:	e3403014 	movt	r3, #20
  12b7c4:	e5930000 	ldr	r0, [r3]
  12b7c8:	e51b300c 	ldr	r3, [fp, #-12]
  12b7cc:	e593100c 	ldr	r1, [r3, #12]
  12b7d0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b7d4:	e58d3000 	str	r3, [sp]
  12b7d8:	e3a03043 	mov	r3, #67	; 0x43
  12b7dc:	e3082e40 	movw	r2, #36416	; 0x8e40
  12b7e0:	e3402014 	movt	r2, #20
  12b7e4:	ebfff1b6 	bl	127ec4 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
  12b7e8:	e51b000c 	ldr	r0, [fp, #-12]
  12b7ec:	eb000637 	bl	12d0d0 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
  12b7f0:	e51b300c 	ldr	r3, [fp, #-12]
  12b7f4:	e5d3300a 	ldrb	r3, [r3, #10]
  12b7f8:	e35300ff 	cmp	r3, #255	; 0xff
  12b7fc:	0a000005 	beq	12b818 <dhcp_reboot+0x170>
    dhcp->tries++;
  12b800:	e51b300c 	ldr	r3, [fp, #-12]
  12b804:	e5d3300a 	ldrb	r3, [r3, #10]
  12b808:	e2833001 	add	r3, r3, #1
  12b80c:	e6ef2073 	uxtb	r2, r3
  12b810:	e51b300c 	ldr	r3, [fp, #-12]
  12b814:	e5c3200a 	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
  12b818:	e51b300c 	ldr	r3, [fp, #-12]
  12b81c:	e5d3300a 	ldrb	r3, [r3, #10]
  12b820:	e3530009 	cmp	r3, #9
  12b824:	8a00000a 	bhi	12b854 <dhcp_reboot+0x1ac>
  12b828:	e51b300c 	ldr	r3, [fp, #-12]
  12b82c:	e5d3300a 	ldrb	r3, [r3, #10]
  12b830:	e6ff3073 	uxth	r3, r3
  12b834:	e1a02003 	mov	r2, r3
  12b838:	e1a02282 	lsl	r2, r2, #5
  12b83c:	e0422003 	sub	r2, r2, r3
  12b840:	e1a02102 	lsl	r2, r2, #2
  12b844:	e0823003 	add	r3, r2, r3
  12b848:	e1a03183 	lsl	r3, r3, #3
  12b84c:	e6ff3073 	uxth	r3, r3
  12b850:	ea000000 	b	12b858 <dhcp_reboot+0x1b0>
  12b854:	e3023710 	movw	r3, #10000	; 0x2710
  12b858:	e14b31b0 	strh	r3, [fp, #-16]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  12b85c:	e15b31b0 	ldrh	r3, [fp, #-16]
  12b860:	e2833e1f 	add	r3, r3, #496	; 0x1f0
  12b864:	e2833003 	add	r3, r3, #3
  12b868:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  12b86c:	e3412062 	movt	r2, #4194	; 0x1062
  12b870:	e0c10293 	smull	r0, r1, r3, r2
  12b874:	e1a022c1 	asr	r2, r1, #5
  12b878:	e1a03fc3 	asr	r3, r3, #31
  12b87c:	e0423003 	sub	r3, r2, r3
  12b880:	e6ff2073 	uxth	r2, r3
  12b884:	e51b300c 	ldr	r3, [fp, #-12]
  12b888:	e1c321b6 	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  12b88c:	e15b30dd 	ldrsb	r3, [fp, #-13]
}
  12b890:	e1a00003 	mov	r0, r3
  12b894:	e24bd004 	sub	sp, fp, #4
  12b898:	e8bd8800 	pop	{fp, pc}

0012b89c <dhcp_release>:
 *
 * @param netif network interface which must release its lease
 */
err_t
dhcp_release(struct netif *netif)
{
  12b89c:	e92d4800 	push	{fp, lr}
  12b8a0:	e28db004 	add	fp, sp, #4
  12b8a4:	e24dd020 	sub	sp, sp, #32
  12b8a8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12b8ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b8b0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12b8b4:	e50b3008 	str	r3, [fp, #-8]
  err_t result;
  ip_addr_t server_ip_addr;
  u8_t is_dhcp_supplied_address;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release()\n"));
  if (dhcp == NULL) {
  12b8b8:	e51b3008 	ldr	r3, [fp, #-8]
  12b8bc:	e3530000 	cmp	r3, #0
  12b8c0:	1a000001 	bne	12b8cc <dhcp_release+0x30>
    return ERR_ARG;
  12b8c4:	e3e0300f 	mvn	r3, #15
  12b8c8:	ea000068 	b	12ba70 <dhcp_release+0x1d4>
  }
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
  12b8cc:	e51b3008 	ldr	r3, [fp, #-8]
  12b8d0:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  12b8d4:	e50b3010 	str	r3, [fp, #-16]

  is_dhcp_supplied_address = dhcp_supplied_address(netif);
  12b8d8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12b8dc:	eb00067b 	bl	12d2d0 <dhcp_supplied_address>
  12b8e0:	e1a03000 	mov	r3, r0
  12b8e4:	e54b3009 	strb	r3, [fp, #-9]

  /* idle DHCP client */
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
  12b8e8:	e3a01000 	mov	r1, #0
  12b8ec:	e51b0008 	ldr	r0, [fp, #-8]
  12b8f0:	eb00008e 	bl	12bb30 <dhcp_set_state>
  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
  12b8f4:	e51b3008 	ldr	r3, [fp, #-8]
  12b8f8:	e3a02000 	mov	r2, #0
  12b8fc:	e5832024 	str	r2, [r3, #36]	; 0x24
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
  12b900:	e51b3008 	ldr	r3, [fp, #-8]
  12b904:	e3a02000 	mov	r2, #0
  12b908:	e5832028 	str	r2, [r3, #40]	; 0x28
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
  12b90c:	e51b3008 	ldr	r3, [fp, #-8]
  12b910:	e3a02000 	mov	r2, #0
  12b914:	e583202c 	str	r2, [r3, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
  12b918:	e51b3008 	ldr	r3, [fp, #-8]
  12b91c:	e3a02000 	mov	r2, #0
  12b920:	e5832030 	str	r2, [r3, #48]	; 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
  12b924:	e51b3008 	ldr	r3, [fp, #-8]
  12b928:	e3a02000 	mov	r2, #0
  12b92c:	e583203c 	str	r2, [r3, #60]	; 0x3c
  12b930:	e51b3008 	ldr	r3, [fp, #-8]
  12b934:	e593203c 	ldr	r2, [r3, #60]	; 0x3c
  12b938:	e51b3008 	ldr	r3, [fp, #-8]
  12b93c:	e5832038 	str	r2, [r3, #56]	; 0x38
  12b940:	e51b3008 	ldr	r3, [fp, #-8]
  12b944:	e5932038 	ldr	r2, [r3, #56]	; 0x38
  12b948:	e51b3008 	ldr	r3, [fp, #-8]
  12b94c:	e5832034 	str	r2, [r3, #52]	; 0x34
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
  12b950:	e51b3008 	ldr	r3, [fp, #-8]
  12b954:	e3a02000 	mov	r2, #0
  12b958:	e1c322b2 	strh	r2, [r3, #34]	; 0x22
  12b95c:	e51b3008 	ldr	r3, [fp, #-8]
  12b960:	e1d322b2 	ldrh	r2, [r3, #34]	; 0x22
  12b964:	e51b3008 	ldr	r3, [fp, #-8]
  12b968:	e1c322b0 	strh	r2, [r3, #32]
  12b96c:	e51b3008 	ldr	r3, [fp, #-8]
  12b970:	e1d322b0 	ldrh	r2, [r3, #32]
  12b974:	e51b3008 	ldr	r3, [fp, #-8]
  12b978:	e1c321be 	strh	r2, [r3, #30]
  12b97c:	e51b3008 	ldr	r3, [fp, #-8]
  12b980:	e1d321be 	ldrh	r2, [r3, #30]
  12b984:	e51b3008 	ldr	r3, [fp, #-8]
  12b988:	e1c321bc 	strh	r2, [r3, #28]

  if (!is_dhcp_supplied_address) {
  12b98c:	e55b3009 	ldrb	r3, [fp, #-9]
  12b990:	e3530000 	cmp	r3, #0
  12b994:	1a000001 	bne	12b9a0 <dhcp_release+0x104>
    /* don't issue release message when address is not dhcp-assigned */
    return ERR_OK;
  12b998:	e3a03000 	mov	r3, #0
  12b99c:	ea000033 	b	12ba70 <dhcp_release+0x1d4>
  }

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
  12b9a0:	e3a02007 	mov	r2, #7
  12b9a4:	e51b1008 	ldr	r1, [fp, #-8]
  12b9a8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12b9ac:	eb00048f 	bl	12cbf0 <dhcp_create_msg>
  12b9b0:	e1a03000 	mov	r3, r0
  12b9b4:	e54b300a 	strb	r3, [fp, #-10]
  if (result == ERR_OK) {
  12b9b8:	e15b30da 	ldrsb	r3, [fp, #-10]
  12b9bc:	e3530000 	cmp	r3, #0
  12b9c0:	1a000021 	bne	12ba4c <dhcp_release+0x1b0>
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
  12b9c4:	e3a02004 	mov	r2, #4
  12b9c8:	e3a01036 	mov	r1, #54	; 0x36
  12b9cc:	e51b0008 	ldr	r0, [fp, #-8]
  12b9d0:	eb00006e 	bl	12bb90 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
  12b9d4:	e51b3010 	ldr	r3, [fp, #-16]
  12b9d8:	e1a00003 	mov	r0, r3
  12b9dc:	ebffaa2f 	bl	1162a0 <lwip_htonl>
  12b9e0:	e1a03000 	mov	r3, r0
  12b9e4:	e1a01003 	mov	r1, r3
  12b9e8:	e51b0008 	ldr	r0, [fp, #-8]
  12b9ec:	eb0000e7 	bl	12bd90 <dhcp_option_long>

    dhcp_option_trailer(dhcp);
  12b9f0:	e51b0008 	ldr	r0, [fp, #-8]
  12b9f4:	eb0005ea 	bl	12d1a4 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  12b9f8:	e51b3008 	ldr	r3, [fp, #-8]
  12b9fc:	e593200c 	ldr	r2, [r3, #12]
  12ba00:	e51b3008 	ldr	r3, [fp, #-8]
  12ba04:	e1d331b4 	ldrh	r3, [r3, #20]
  12ba08:	e28330f0 	add	r3, r3, #240	; 0xf0
  12ba0c:	e6ff3073 	uxth	r3, r3
  12ba10:	e1a01003 	mov	r1, r3
  12ba14:	e1a00002 	mov	r0, r2
  12ba18:	ebffbb02 	bl	11a628 <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &server_ip_addr, DHCP_SERVER_PORT, netif);
  12ba1c:	e30e3254 	movw	r3, #57940	; 0xe254
  12ba20:	e3403014 	movt	r3, #20
  12ba24:	e5930000 	ldr	r0, [r3]
  12ba28:	e51b3008 	ldr	r3, [fp, #-8]
  12ba2c:	e593100c 	ldr	r1, [r3, #12]
  12ba30:	e24b2010 	sub	r2, fp, #16
  12ba34:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12ba38:	e58d3000 	str	r3, [sp]
  12ba3c:	e3a03043 	mov	r3, #67	; 0x43
  12ba40:	ebfff11f 	bl	127ec4 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
  12ba44:	e51b0008 	ldr	r0, [fp, #-8]
  12ba48:	eb0005a0 	bl	12d0d0 <dhcp_delete_msg>
  } else {
    /* sending release failed, but that's not a problem since the correct behaviour of dhcp does not rely on release */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
  }
  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
  12ba4c:	e3083e3c 	movw	r3, #36412	; 0x8e3c
  12ba50:	e3403014 	movt	r3, #20
  12ba54:	e3082e3c 	movw	r2, #36412	; 0x8e3c
  12ba58:	e3402014 	movt	r2, #20
  12ba5c:	e3081e3c 	movw	r1, #36412	; 0x8e3c
  12ba60:	e3401014 	movt	r1, #20
  12ba64:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12ba68:	ebffb5c9 	bl	119194 <netif_set_addr>

  return result;
  12ba6c:	e15b30da 	ldrsb	r3, [fp, #-10]
}
  12ba70:	e1a00003 	mov	r0, r3
  12ba74:	e24bd004 	sub	sp, fp, #4
  12ba78:	e8bd8800 	pop	{fp, pc}

0012ba7c <dhcp_stop>:
 *
 * @param netif The network interface to stop DHCP on
 */
void
dhcp_stop(struct netif *netif)
{
  12ba7c:	e92d4800 	push	{fp, lr}
  12ba80:	e28db004 	add	fp, sp, #4
  12ba84:	e24dd010 	sub	sp, sp, #16
  12ba88:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp;
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
  12ba8c:	e51b3010 	ldr	r3, [fp, #-16]
  12ba90:	e3530000 	cmp	r3, #0
  12ba94:	1a000007 	bne	12bab8 <dhcp_stop+0x3c>
  12ba98:	e30803c4 	movw	r0, #33732	; 0x83c4
  12ba9c:	e3400014 	movt	r0, #20
  12baa0:	ebff5d9b 	bl	103114 <rt_kprintf>
  12baa4:	e3001543 	movw	r1, #1347	; 0x543
  12baa8:	e30802a4 	movw	r0, #33444	; 0x82a4
  12baac:	e3400014 	movt	r0, #20
  12bab0:	ebff7c17 	bl	10ab14 <sys_arch_assert>
  12bab4:	ea00001b 	b	12bb28 <dhcp_stop+0xac>
  dhcp = netif_dhcp_data(netif);
  12bab8:	e51b3010 	ldr	r3, [fp, #-16]
  12babc:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12bac0:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_stop()\n"));
  /* netif is DHCP configured? */
  if (dhcp != NULL) {
  12bac4:	e51b3008 	ldr	r3, [fp, #-8]
  12bac8:	e3530000 	cmp	r3, #0
  12bacc:	0a000015 	beq	12bb28 <dhcp_stop+0xac>
      autoip_stop(netif);
      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */

    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
  12bad0:	e51b3008 	ldr	r3, [fp, #-8]
  12bad4:	e5933004 	ldr	r3, [r3, #4]
  12bad8:	e3530000 	cmp	r3, #0
  12badc:	0a000006 	beq	12bafc <dhcp_stop+0x80>
  12bae0:	e308037c 	movw	r0, #33660	; 0x837c
  12bae4:	e3400014 	movt	r0, #20
  12bae8:	ebff5d89 	bl	103114 <rt_kprintf>
  12baec:	e3a01e55 	mov	r1, #1360	; 0x550
  12baf0:	e30802a4 	movw	r0, #33444	; 0x82a4
  12baf4:	e3400014 	movt	r0, #20
  12baf8:	ebff7c05 	bl	10ab14 <sys_arch_assert>
    dhcp_set_state(dhcp, DHCP_STATE_OFF);
  12bafc:	e3a01000 	mov	r1, #0
  12bb00:	e51b0008 	ldr	r0, [fp, #-8]
  12bb04:	eb000009 	bl	12bb30 <dhcp_set_state>

    if (dhcp->pcb_allocated != 0) {
  12bb08:	e51b3008 	ldr	r3, [fp, #-8]
  12bb0c:	e5d33008 	ldrb	r3, [r3, #8]
  12bb10:	e3530000 	cmp	r3, #0
  12bb14:	0a000003 	beq	12bb28 <dhcp_stop+0xac>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
  12bb18:	ebfff868 	bl	129cc0 <dhcp_dec_pcb_refcount>
      dhcp->pcb_allocated = 0;
  12bb1c:	e51b3008 	ldr	r3, [fp, #-8]
  12bb20:	e3a02000 	mov	r2, #0
  12bb24:	e5c32008 	strb	r2, [r3, #8]
    }
  }
}
  12bb28:	e24bd004 	sub	sp, fp, #4
  12bb2c:	e8bd8800 	pop	{fp, pc}

0012bb30 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
  12bb30:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  12bb34:	e28db000 	add	fp, sp, #0
  12bb38:	e24dd00c 	sub	sp, sp, #12
  12bb3c:	e50b0008 	str	r0, [fp, #-8]
  12bb40:	e1a03001 	mov	r3, r1
  12bb44:	e54b3009 	strb	r3, [fp, #-9]
  if (new_state != dhcp->state) {
  12bb48:	e51b3008 	ldr	r3, [fp, #-8]
  12bb4c:	e5d33009 	ldrb	r3, [r3, #9]
  12bb50:	e55b2009 	ldrb	r2, [fp, #-9]
  12bb54:	e1520003 	cmp	r2, r3
  12bb58:	0a000008 	beq	12bb80 <dhcp_set_state+0x50>
    dhcp->state = new_state;
  12bb5c:	e51b3008 	ldr	r3, [fp, #-8]
  12bb60:	e55b2009 	ldrb	r2, [fp, #-9]
  12bb64:	e5c32009 	strb	r2, [r3, #9]
    dhcp->tries = 0;
  12bb68:	e51b3008 	ldr	r3, [fp, #-8]
  12bb6c:	e3a02000 	mov	r2, #0
  12bb70:	e5c3200a 	strb	r2, [r3, #10]
    dhcp->request_timeout = 0;
  12bb74:	e51b3008 	ldr	r3, [fp, #-8]
  12bb78:	e3a02000 	mov	r2, #0
  12bb7c:	e1c321b6 	strh	r2, [r3, #22]
  }
}
  12bb80:	e320f000 	nop	{0}
  12bb84:	e28bd000 	add	sp, fp, #0
  12bb88:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  12bb8c:	e12fff1e 	bx	lr

0012bb90 <dhcp_option>:
 * DHCP message.
 *
 */
static void
dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
{
  12bb90:	e92d4800 	push	{fp, lr}
  12bb94:	e28db004 	add	fp, sp, #4
  12bb98:	e24dd008 	sub	sp, sp, #8
  12bb9c:	e50b0008 	str	r0, [fp, #-8]
  12bba0:	e1a03001 	mov	r3, r1
  12bba4:	e54b3009 	strb	r3, [fp, #-9]
  12bba8:	e1a03002 	mov	r3, r2
  12bbac:	e54b300a 	strb	r3, [fp, #-10]
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
  12bbb0:	e51b3008 	ldr	r3, [fp, #-8]
  12bbb4:	e1d331b4 	ldrh	r3, [r3, #20]
  12bbb8:	e1a02003 	mov	r2, r3
  12bbbc:	e55b300a 	ldrb	r3, [fp, #-10]
  12bbc0:	e0823003 	add	r3, r2, r3
  12bbc4:	e2833002 	add	r3, r3, #2
  12bbc8:	e3530044 	cmp	r3, #68	; 0x44
  12bbcc:	9a000006 	bls	12bbec <dhcp_option+0x5c>
  12bbd0:	e30803e0 	movw	r0, #33760	; 0x83e0
  12bbd4:	e3400014 	movt	r0, #20
  12bbd8:	ebff5d4d 	bl	103114 <rt_kprintf>
  12bbdc:	e3001571 	movw	r1, #1393	; 0x571
  12bbe0:	e30802a4 	movw	r0, #33444	; 0x82a4
  12bbe4:	e3400014 	movt	r0, #20
  12bbe8:	ebff7bc9 	bl	10ab14 <sys_arch_assert>
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
  12bbec:	e51b3008 	ldr	r3, [fp, #-8]
  12bbf0:	e5932010 	ldr	r2, [r3, #16]
  12bbf4:	e51b3008 	ldr	r3, [fp, #-8]
  12bbf8:	e1d331b4 	ldrh	r3, [r3, #20]
  12bbfc:	e2831001 	add	r1, r3, #1
  12bc00:	e6ff0071 	uxth	r0, r1
  12bc04:	e51b1008 	ldr	r1, [fp, #-8]
  12bc08:	e1c101b4 	strh	r0, [r1, #20]
  12bc0c:	e0823003 	add	r3, r2, r3
  12bc10:	e55b2009 	ldrb	r2, [fp, #-9]
  12bc14:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
  12bc18:	e51b3008 	ldr	r3, [fp, #-8]
  12bc1c:	e5932010 	ldr	r2, [r3, #16]
  12bc20:	e51b3008 	ldr	r3, [fp, #-8]
  12bc24:	e1d331b4 	ldrh	r3, [r3, #20]
  12bc28:	e2831001 	add	r1, r3, #1
  12bc2c:	e6ff0071 	uxth	r0, r1
  12bc30:	e51b1008 	ldr	r1, [fp, #-8]
  12bc34:	e1c101b4 	strh	r0, [r1, #20]
  12bc38:	e0823003 	add	r3, r2, r3
  12bc3c:	e55b200a 	ldrb	r2, [fp, #-10]
  12bc40:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
}
  12bc44:	e320f000 	nop	{0}
  12bc48:	e24bd004 	sub	sp, fp, #4
  12bc4c:	e8bd8800 	pop	{fp, pc}

0012bc50 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
  12bc50:	e92d4800 	push	{fp, lr}
  12bc54:	e28db004 	add	fp, sp, #4
  12bc58:	e24dd008 	sub	sp, sp, #8
  12bc5c:	e50b0008 	str	r0, [fp, #-8]
  12bc60:	e1a03001 	mov	r3, r1
  12bc64:	e54b3009 	strb	r3, [fp, #-9]
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  12bc68:	e51b3008 	ldr	r3, [fp, #-8]
  12bc6c:	e1d331b4 	ldrh	r3, [r3, #20]
  12bc70:	e3530043 	cmp	r3, #67	; 0x43
  12bc74:	9a000006 	bls	12bc94 <dhcp_option_byte+0x44>
  12bc78:	e3080428 	movw	r0, #33832	; 0x8428
  12bc7c:	e3400014 	movt	r0, #20
  12bc80:	ebff5d23 	bl	103114 <rt_kprintf>
  12bc84:	e300157c 	movw	r1, #1404	; 0x57c
  12bc88:	e30802a4 	movw	r0, #33444	; 0x82a4
  12bc8c:	e3400014 	movt	r0, #20
  12bc90:	ebff7b9f 	bl	10ab14 <sys_arch_assert>
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
  12bc94:	e51b3008 	ldr	r3, [fp, #-8]
  12bc98:	e5932010 	ldr	r2, [r3, #16]
  12bc9c:	e51b3008 	ldr	r3, [fp, #-8]
  12bca0:	e1d331b4 	ldrh	r3, [r3, #20]
  12bca4:	e2831001 	add	r1, r3, #1
  12bca8:	e6ff0071 	uxth	r0, r1
  12bcac:	e51b1008 	ldr	r1, [fp, #-8]
  12bcb0:	e1c101b4 	strh	r0, [r1, #20]
  12bcb4:	e0823003 	add	r3, r2, r3
  12bcb8:	e55b2009 	ldrb	r2, [fp, #-9]
  12bcbc:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
}
  12bcc0:	e320f000 	nop	{0}
  12bcc4:	e24bd004 	sub	sp, fp, #4
  12bcc8:	e8bd8800 	pop	{fp, pc}

0012bccc <dhcp_option_short>:

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
  12bccc:	e92d4800 	push	{fp, lr}
  12bcd0:	e28db004 	add	fp, sp, #4
  12bcd4:	e24dd008 	sub	sp, sp, #8
  12bcd8:	e50b0008 	str	r0, [fp, #-8]
  12bcdc:	e1a03001 	mov	r3, r1
  12bce0:	e14b30ba 	strh	r3, [fp, #-10]
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
  12bce4:	e51b3008 	ldr	r3, [fp, #-8]
  12bce8:	e1d331b4 	ldrh	r3, [r3, #20]
  12bcec:	e2833002 	add	r3, r3, #2
  12bcf0:	e3530044 	cmp	r3, #68	; 0x44
  12bcf4:	9a000006 	bls	12bd14 <dhcp_option_short+0x48>
  12bcf8:	e3080464 	movw	r0, #33892	; 0x8464
  12bcfc:	e3400014 	movt	r0, #20
  12bd00:	ebff5d03 	bl	103114 <rt_kprintf>
  12bd04:	e3001583 	movw	r1, #1411	; 0x583
  12bd08:	e30802a4 	movw	r0, #33444	; 0x82a4
  12bd0c:	e3400014 	movt	r0, #20
  12bd10:	ebff7b7f 	bl	10ab14 <sys_arch_assert>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
  12bd14:	e15b30ba 	ldrh	r3, [fp, #-10]
  12bd18:	e1a03423 	lsr	r3, r3, #8
  12bd1c:	e6ffc073 	uxth	ip, r3
  12bd20:	e51b3008 	ldr	r3, [fp, #-8]
  12bd24:	e5932010 	ldr	r2, [r3, #16]
  12bd28:	e51b3008 	ldr	r3, [fp, #-8]
  12bd2c:	e1d331b4 	ldrh	r3, [r3, #20]
  12bd30:	e2831001 	add	r1, r3, #1
  12bd34:	e6ff0071 	uxth	r0, r1
  12bd38:	e51b1008 	ldr	r1, [fp, #-8]
  12bd3c:	e1c101b4 	strh	r0, [r1, #20]
  12bd40:	e6ef107c 	uxtb	r1, ip
  12bd44:	e0823003 	add	r3, r2, r3
  12bd48:	e1a02001 	mov	r2, r1
  12bd4c:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
  12bd50:	e51b3008 	ldr	r3, [fp, #-8]
  12bd54:	e5932010 	ldr	r2, [r3, #16]
  12bd58:	e51b3008 	ldr	r3, [fp, #-8]
  12bd5c:	e1d331b4 	ldrh	r3, [r3, #20]
  12bd60:	e2831001 	add	r1, r3, #1
  12bd64:	e6ff0071 	uxth	r0, r1
  12bd68:	e51b1008 	ldr	r1, [fp, #-8]
  12bd6c:	e1c101b4 	strh	r0, [r1, #20]
  12bd70:	e15b10ba 	ldrh	r1, [fp, #-10]
  12bd74:	e6ef1071 	uxtb	r1, r1
  12bd78:	e0823003 	add	r3, r2, r3
  12bd7c:	e1a02001 	mov	r2, r1
  12bd80:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
}
  12bd84:	e320f000 	nop	{0}
  12bd88:	e24bd004 	sub	sp, fp, #4
  12bd8c:	e8bd8800 	pop	{fp, pc}

0012bd90 <dhcp_option_long>:

static void
dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
  12bd90:	e92d4800 	push	{fp, lr}
  12bd94:	e28db004 	add	fp, sp, #4
  12bd98:	e24dd008 	sub	sp, sp, #8
  12bd9c:	e50b0008 	str	r0, [fp, #-8]
  12bda0:	e50b100c 	str	r1, [fp, #-12]
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
  12bda4:	e51b3008 	ldr	r3, [fp, #-8]
  12bda8:	e1d331b4 	ldrh	r3, [r3, #20]
  12bdac:	e2833004 	add	r3, r3, #4
  12bdb0:	e3530044 	cmp	r3, #68	; 0x44
  12bdb4:	9a000006 	bls	12bdd4 <dhcp_option_long+0x44>
  12bdb8:	e30804a8 	movw	r0, #33960	; 0x84a8
  12bdbc:	e3400014 	movt	r0, #20
  12bdc0:	ebff5cd3 	bl	103114 <rt_kprintf>
  12bdc4:	e300158b 	movw	r1, #1419	; 0x58b
  12bdc8:	e30802a4 	movw	r0, #33444	; 0x82a4
  12bdcc:	e3400014 	movt	r0, #20
  12bdd0:	ebff7b4f 	bl	10ab14 <sys_arch_assert>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
  12bdd4:	e51b300c 	ldr	r3, [fp, #-12]
  12bdd8:	e1a0cc23 	lsr	ip, r3, #24
  12bddc:	e51b3008 	ldr	r3, [fp, #-8]
  12bde0:	e5932010 	ldr	r2, [r3, #16]
  12bde4:	e51b3008 	ldr	r3, [fp, #-8]
  12bde8:	e1d331b4 	ldrh	r3, [r3, #20]
  12bdec:	e2831001 	add	r1, r3, #1
  12bdf0:	e6ff0071 	uxth	r0, r1
  12bdf4:	e51b1008 	ldr	r1, [fp, #-8]
  12bdf8:	e1c101b4 	strh	r0, [r1, #20]
  12bdfc:	e6ef107c 	uxtb	r1, ip
  12be00:	e0823003 	add	r3, r2, r3
  12be04:	e1a02001 	mov	r2, r1
  12be08:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
  12be0c:	e51b300c 	ldr	r3, [fp, #-12]
  12be10:	e1a0c823 	lsr	ip, r3, #16
  12be14:	e51b3008 	ldr	r3, [fp, #-8]
  12be18:	e5932010 	ldr	r2, [r3, #16]
  12be1c:	e51b3008 	ldr	r3, [fp, #-8]
  12be20:	e1d331b4 	ldrh	r3, [r3, #20]
  12be24:	e2831001 	add	r1, r3, #1
  12be28:	e6ff0071 	uxth	r0, r1
  12be2c:	e51b1008 	ldr	r1, [fp, #-8]
  12be30:	e1c101b4 	strh	r0, [r1, #20]
  12be34:	e6ef107c 	uxtb	r1, ip
  12be38:	e0823003 	add	r3, r2, r3
  12be3c:	e1a02001 	mov	r2, r1
  12be40:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
  12be44:	e51b300c 	ldr	r3, [fp, #-12]
  12be48:	e1a0c423 	lsr	ip, r3, #8
  12be4c:	e51b3008 	ldr	r3, [fp, #-8]
  12be50:	e5932010 	ldr	r2, [r3, #16]
  12be54:	e51b3008 	ldr	r3, [fp, #-8]
  12be58:	e1d331b4 	ldrh	r3, [r3, #20]
  12be5c:	e2831001 	add	r1, r3, #1
  12be60:	e6ff0071 	uxth	r0, r1
  12be64:	e51b1008 	ldr	r1, [fp, #-8]
  12be68:	e1c101b4 	strh	r0, [r1, #20]
  12be6c:	e6ef107c 	uxtb	r1, ip
  12be70:	e0823003 	add	r3, r2, r3
  12be74:	e1a02001 	mov	r2, r1
  12be78:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
  12be7c:	e51b3008 	ldr	r3, [fp, #-8]
  12be80:	e5932010 	ldr	r2, [r3, #16]
  12be84:	e51b3008 	ldr	r3, [fp, #-8]
  12be88:	e1d331b4 	ldrh	r3, [r3, #20]
  12be8c:	e2831001 	add	r1, r3, #1
  12be90:	e6ff0071 	uxth	r0, r1
  12be94:	e51b1008 	ldr	r1, [fp, #-8]
  12be98:	e1c101b4 	strh	r0, [r1, #20]
  12be9c:	e51b100c 	ldr	r1, [fp, #-12]
  12bea0:	e6ef1071 	uxtb	r1, r1
  12bea4:	e0823003 	add	r3, r2, r3
  12bea8:	e1a02001 	mov	r2, r1
  12beac:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
}
  12beb0:	e320f000 	nop	{0}
  12beb4:	e24bd004 	sub	sp, fp, #4
  12beb8:	e8bd8800 	pop	{fp, pc}

0012bebc <dhcp_option_hostname>:

#if LWIP_NETIF_HOSTNAME
static void
dhcp_option_hostname(struct dhcp *dhcp, struct netif *netif)
{
  12bebc:	e92d4800 	push	{fp, lr}
  12bec0:	e28db004 	add	fp, sp, #4
  12bec4:	e24dd018 	sub	sp, sp, #24
  12bec8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12becc:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  if (netif->hostname != NULL) {
  12bed0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12bed4:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  12bed8:	e3530000 	cmp	r3, #0
  12bedc:	0a00003c 	beq	12bfd4 <dhcp_option_hostname+0x118>
    size_t namelen = strlen(netif->hostname);
  12bee0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12bee4:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  12bee8:	e1a00003 	mov	r0, r3
  12beec:	eb00530f 	bl	140b30 <strlen>
  12bef0:	e50b0010 	str	r0, [fp, #-16]
    if (namelen > 0) {
  12bef4:	e51b3010 	ldr	r3, [fp, #-16]
  12bef8:	e3530000 	cmp	r3, #0
  12befc:	0a000034 	beq	12bfd4 <dhcp_option_hostname+0x118>
      size_t len;
      const char *p = netif->hostname;
  12bf00:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12bf04:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  12bf08:	e50b300c 	str	r3, [fp, #-12]
      /* Shrink len to available bytes (need 2 bytes for OPTION_HOSTNAME
         and 1 byte for trailer) */
      size_t available = DHCP_OPTIONS_LEN - dhcp->options_out_len - 3;
  12bf0c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12bf10:	e1d331b4 	ldrh	r3, [r3, #20]
  12bf14:	e2633041 	rsb	r3, r3, #65	; 0x41
  12bf18:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      LWIP_ASSERT("DHCP: hostname is too long!", namelen <= available);
  12bf1c:	e51b2010 	ldr	r2, [fp, #-16]
  12bf20:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12bf24:	e1520003 	cmp	r2, r3
  12bf28:	9a000006 	bls	12bf48 <dhcp_option_hostname+0x8c>
  12bf2c:	e30804e8 	movw	r0, #34024	; 0x84e8
  12bf30:	e3400014 	movt	r0, #20
  12bf34:	ebff5c76 	bl	103114 <rt_kprintf>
  12bf38:	e300159e 	movw	r1, #1438	; 0x59e
  12bf3c:	e30802a4 	movw	r0, #33444	; 0x82a4
  12bf40:	e3400014 	movt	r0, #20
  12bf44:	ebff7af2 	bl	10ab14 <sys_arch_assert>
      len = LWIP_MIN(namelen, available);
  12bf48:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  12bf4c:	e51b3010 	ldr	r3, [fp, #-16]
  12bf50:	e1520003 	cmp	r2, r3
  12bf54:	31a03002 	movcc	r3, r2
  12bf58:	21a03003 	movcs	r3, r3
  12bf5c:	e50b3008 	str	r3, [fp, #-8]
      LWIP_ASSERT("DHCP: hostname is too long!", len <= 0xFF);
  12bf60:	e51b3008 	ldr	r3, [fp, #-8]
  12bf64:	e35300ff 	cmp	r3, #255	; 0xff
  12bf68:	9a000006 	bls	12bf88 <dhcp_option_hostname+0xcc>
  12bf6c:	e30804e8 	movw	r0, #34024	; 0x84e8
  12bf70:	e3400014 	movt	r0, #20
  12bf74:	ebff5c66 	bl	103114 <rt_kprintf>
  12bf78:	e3a01e5a 	mov	r1, #1440	; 0x5a0
  12bf7c:	e30802a4 	movw	r0, #33444	; 0x82a4
  12bf80:	e3400014 	movt	r0, #20
  12bf84:	ebff7ae2 	bl	10ab14 <sys_arch_assert>
      dhcp_option(dhcp, DHCP_OPTION_HOSTNAME, (u8_t)len);
  12bf88:	e51b3008 	ldr	r3, [fp, #-8]
  12bf8c:	e6ef3073 	uxtb	r3, r3
  12bf90:	e1a02003 	mov	r2, r3
  12bf94:	e3a0100c 	mov	r1, #12
  12bf98:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12bf9c:	ebfffefb 	bl	12bb90 <dhcp_option>
      while (len--) {
  12bfa0:	ea000006 	b	12bfc0 <dhcp_option_hostname+0x104>
        dhcp_option_byte(dhcp, *p++);
  12bfa4:	e51b300c 	ldr	r3, [fp, #-12]
  12bfa8:	e2832001 	add	r2, r3, #1
  12bfac:	e50b200c 	str	r2, [fp, #-12]
  12bfb0:	e5d33000 	ldrb	r3, [r3]
  12bfb4:	e1a01003 	mov	r1, r3
  12bfb8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12bfbc:	ebffff23 	bl	12bc50 <dhcp_option_byte>
      while (len--) {
  12bfc0:	e51b3008 	ldr	r3, [fp, #-8]
  12bfc4:	e2432001 	sub	r2, r3, #1
  12bfc8:	e50b2008 	str	r2, [fp, #-8]
  12bfcc:	e3530000 	cmp	r3, #0
  12bfd0:	1afffff3 	bne	12bfa4 <dhcp_option_hostname+0xe8>
      }
    }
  }
}
  12bfd4:	e320f000 	nop	{0}
  12bfd8:	e24bd004 	sub	sp, fp, #4
  12bfdc:	e8bd8800 	pop	{fp, pc}

0012bfe0 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct dhcp *dhcp, struct pbuf *p)
{
  12bfe0:	e92d4800 	push	{fp, lr}
  12bfe4:	e28db004 	add	fp, sp, #4
  12bfe8:	e24dd038 	sub	sp, sp, #56	; 0x38
  12bfec:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
  12bff0:	e50b103c 	str	r1, [fp, #-60]	; 0xffffffc4
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
  12bff4:	e3a03000 	mov	r3, #0
  12bff8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  int parse_sname_as_options = 0;
  12bffc:	e3a03000 	mov	r3, #0
  12c000:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

  /* clear received options */
  dhcp_clear_all_options(dhcp);
  12c004:	e3a0200a 	mov	r2, #10
  12c008:	e3a01000 	mov	r1, #0
  12c00c:	e30501cc 	movw	r0, #20940	; 0x51cc
  12c010:	e3400057 	movt	r0, #87	; 0x57
  12c014:	eb005234 	bl	1408ec <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
  12c018:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  12c01c:	e1d330ba 	ldrh	r3, [r3, #10]
  12c020:	e353002b 	cmp	r3, #43	; 0x2b
  12c024:	8a000001 	bhi	12c030 <dhcp_parse_reply+0x50>
    return ERR_BUF;
  12c028:	e3e03001 	mvn	r3, #1
  12c02c:	ea00022e 	b	12c8ec <dhcp_parse_reply+0x90c>
  }
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
  12c030:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  12c034:	e5932004 	ldr	r2, [r3, #4]
  12c038:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12c03c:	e5832004 	str	r2, [r3, #4]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
  12c040:	e3a030f0 	mov	r3, #240	; 0xf0
  12c044:	e14b30be 	strh	r3, [fp, #-14]
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
  12c048:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  12c04c:	e1d330b8 	ldrh	r3, [r3, #8]
  12c050:	e14b31b0 	strh	r3, [fp, #-16]
again:
  q = p;
  12c054:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  12c058:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  while ((q != NULL) && (options_idx >= q->len)) {
  12c05c:	ea00000c 	b	12c094 <dhcp_parse_reply+0xb4>
    options_idx -= q->len;
  12c060:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c064:	e1d330ba 	ldrh	r3, [r3, #10]
  12c068:	e15b20be 	ldrh	r2, [fp, #-14]
  12c06c:	e0423003 	sub	r3, r2, r3
  12c070:	e14b30be 	strh	r3, [fp, #-14]
    options_idx_max -= q->len;
  12c074:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c078:	e1d330ba 	ldrh	r3, [r3, #10]
  12c07c:	e15b21b0 	ldrh	r2, [fp, #-16]
  12c080:	e0423003 	sub	r3, r2, r3
  12c084:	e14b31b0 	strh	r3, [fp, #-16]
    q = q->next;
  12c088:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c08c:	e5933000 	ldr	r3, [r3]
  12c090:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  while ((q != NULL) && (options_idx >= q->len)) {
  12c094:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c098:	e3530000 	cmp	r3, #0
  12c09c:	0a000004 	beq	12c0b4 <dhcp_parse_reply+0xd4>
  12c0a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c0a4:	e1d330ba 	ldrh	r3, [r3, #10]
  12c0a8:	e15b20be 	ldrh	r2, [fp, #-14]
  12c0ac:	e1520003 	cmp	r2, r3
  12c0b0:	2affffea 	bcs	12c060 <dhcp_parse_reply+0x80>
  }
  if (q == NULL) {
  12c0b4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c0b8:	e3530000 	cmp	r3, #0
  12c0bc:	1a000001 	bne	12c0c8 <dhcp_parse_reply+0xe8>
    return ERR_BUF;
  12c0c0:	e3e03001 	mvn	r3, #1
  12c0c4:	ea000208 	b	12c8ec <dhcp_parse_reply+0x90c>
  }
  offset = options_idx;
  12c0c8:	e15b30be 	ldrh	r3, [fp, #-14]
  12c0cc:	e14b30ba 	strh	r3, [fp, #-10]
  offset_max = options_idx_max;
  12c0d0:	e15b31b0 	ldrh	r3, [fp, #-16]
  12c0d4:	e14b30bc 	strh	r3, [fp, #-12]
  options = (u8_t*)q->payload;
  12c0d8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c0dc:	e5933004 	ldr	r3, [r3, #4]
  12c0e0:	e50b3008 	str	r3, [fp, #-8]
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (options[offset] != DHCP_OPTION_END) && (offset < offset_max)) {
  12c0e4:	ea0001be 	b	12c7e4 <dhcp_parse_reply+0x804>
    u8_t op = options[offset];
  12c0e8:	e15b30ba 	ldrh	r3, [fp, #-10]
  12c0ec:	e51b2008 	ldr	r2, [fp, #-8]
  12c0f0:	e0823003 	add	r3, r2, r3
  12c0f4:	e5d33000 	ldrb	r3, [r3]
  12c0f8:	e54b3027 	strb	r3, [fp, #-39]	; 0xffffffd9
    u8_t len;
    u8_t decode_len = 0;
  12c0fc:	e3a03000 	mov	r3, #0
  12c100:	e54b301e 	strb	r3, [fp, #-30]	; 0xffffffe2
    int decode_idx = -1;
  12c104:	e3e03000 	mvn	r3, #0
  12c108:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    u16_t val_offset = offset + 2;
  12c10c:	e15b30ba 	ldrh	r3, [fp, #-10]
  12c110:	e2833002 	add	r3, r3, #2
  12c114:	e14b32b6 	strh	r3, [fp, #-38]	; 0xffffffda
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
  12c118:	e15b30ba 	ldrh	r3, [fp, #-10]
  12c11c:	e2833001 	add	r3, r3, #1
  12c120:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  12c124:	e1d220ba 	ldrh	r2, [r2, #10]
  12c128:	e1530002 	cmp	r3, r2
  12c12c:	aa000006 	bge	12c14c <dhcp_parse_reply+0x16c>
      len = options[offset + 1];
  12c130:	e15b30ba 	ldrh	r3, [fp, #-10]
  12c134:	e2833001 	add	r3, r3, #1
  12c138:	e51b2008 	ldr	r2, [fp, #-8]
  12c13c:	e0823003 	add	r3, r2, r3
  12c140:	e5d33000 	ldrb	r3, [r3]
  12c144:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  12c148:	ea00000a 	b	12c178 <dhcp_parse_reply+0x198>
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
  12c14c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c150:	e5933000 	ldr	r3, [r3]
  12c154:	e3530000 	cmp	r3, #0
  12c158:	0a000004 	beq	12c170 <dhcp_parse_reply+0x190>
  12c15c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c160:	e5933000 	ldr	r3, [r3]
  12c164:	e5933004 	ldr	r3, [r3, #4]
  12c168:	e5d33000 	ldrb	r3, [r3]
  12c16c:	ea000000 	b	12c174 <dhcp_parse_reply+0x194>
  12c170:	e3a03000 	mov	r3, #0
  12c174:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
  12c178:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c17c:	e54b301e 	strb	r3, [fp, #-30]	; 0xffffffe2
    switch(op) {
  12c180:	e55b3027 	ldrb	r3, [fp, #-39]	; 0xffffffd9
  12c184:	e353003b 	cmp	r3, #59	; 0x3b
  12c188:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  12c18c:	ea0000ed 	b	12c548 <dhcp_parse_reply+0x568>
  12c190:	0012c280 	.word	0x0012c280
  12c194:	0012c2a0 	.word	0x0012c2a0
  12c198:	0012c548 	.word	0x0012c548
  12c19c:	0012c2dc 	.word	0x0012c2dc
  12c1a0:	0012c548 	.word	0x0012c548
  12c1a4:	0012c548 	.word	0x0012c548
  12c1a8:	0012c324 	.word	0x0012c324
  12c1ac:	0012c548 	.word	0x0012c548
  12c1b0:	0012c548 	.word	0x0012c548
  12c1b4:	0012c548 	.word	0x0012c548
  12c1b8:	0012c548 	.word	0x0012c548
  12c1bc:	0012c548 	.word	0x0012c548
  12c1c0:	0012c548 	.word	0x0012c548
  12c1c4:	0012c548 	.word	0x0012c548
  12c1c8:	0012c548 	.word	0x0012c548
  12c1cc:	0012c548 	.word	0x0012c548
  12c1d0:	0012c548 	.word	0x0012c548
  12c1d4:	0012c548 	.word	0x0012c548
  12c1d8:	0012c548 	.word	0x0012c548
  12c1dc:	0012c548 	.word	0x0012c548
  12c1e0:	0012c548 	.word	0x0012c548
  12c1e4:	0012c548 	.word	0x0012c548
  12c1e8:	0012c548 	.word	0x0012c548
  12c1ec:	0012c548 	.word	0x0012c548
  12c1f0:	0012c548 	.word	0x0012c548
  12c1f4:	0012c548 	.word	0x0012c548
  12c1f8:	0012c548 	.word	0x0012c548
  12c1fc:	0012c548 	.word	0x0012c548
  12c200:	0012c548 	.word	0x0012c548
  12c204:	0012c548 	.word	0x0012c548
  12c208:	0012c548 	.word	0x0012c548
  12c20c:	0012c548 	.word	0x0012c548
  12c210:	0012c548 	.word	0x0012c548
  12c214:	0012c548 	.word	0x0012c548
  12c218:	0012c548 	.word	0x0012c548
  12c21c:	0012c548 	.word	0x0012c548
  12c220:	0012c548 	.word	0x0012c548
  12c224:	0012c548 	.word	0x0012c548
  12c228:	0012c548 	.word	0x0012c548
  12c22c:	0012c548 	.word	0x0012c548
  12c230:	0012c548 	.word	0x0012c548
  12c234:	0012c548 	.word	0x0012c548
  12c238:	0012c548 	.word	0x0012c548
  12c23c:	0012c548 	.word	0x0012c548
  12c240:	0012c548 	.word	0x0012c548
  12c244:	0012c548 	.word	0x0012c548
  12c248:	0012c548 	.word	0x0012c548
  12c24c:	0012c548 	.word	0x0012c548
  12c250:	0012c548 	.word	0x0012c548
  12c254:	0012c548 	.word	0x0012c548
  12c258:	0012c548 	.word	0x0012c548
  12c25c:	0012c3b0 	.word	0x0012c3b0
  12c260:	0012c3ec 	.word	0x0012c3ec
  12c264:	0012c458 	.word	0x0012c458
  12c268:	0012c494 	.word	0x0012c494
  12c26c:	0012c548 	.word	0x0012c548
  12c270:	0012c548 	.word	0x0012c548
  12c274:	0012c548 	.word	0x0012c548
  12c278:	0012c4d0 	.word	0x0012c4d0
  12c27c:	0012c50c 	.word	0x0012c50c
      /* case(DHCP_OPTION_END): handled above */
      case(DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
  12c280:	e3a03000 	mov	r3, #0
  12c284:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  12c288:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c28c:	e54b301e 	strb	r3, [fp, #-30]	; 0xffffffe2
        /* will be increased below */
        offset--;
  12c290:	e15b30ba 	ldrh	r3, [fp, #-10]
  12c294:	e2433001 	sub	r3, r3, #1
  12c298:	e14b30ba 	strh	r3, [fp, #-10]
        break;
  12c29c:	ea0000ac 	b	12c554 <dhcp_parse_reply+0x574>
      case(DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
  12c2a0:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c2a4:	e3530004 	cmp	r3, #4
  12c2a8:	0a000008 	beq	12c2d0 <dhcp_parse_reply+0x2f0>
  12c2ac:	e3080504 	movw	r0, #34052	; 0x8504
  12c2b0:	e3400014 	movt	r0, #20
  12c2b4:	ebff5b96 	bl	103114 <rt_kprintf>
  12c2b8:	e30015f7 	movw	r1, #1527	; 0x5f7
  12c2bc:	e30802a4 	movw	r0, #33444	; 0x82a4
  12c2c0:	e3400014 	movt	r0, #20
  12c2c4:	ebff7a12 	bl	10ab14 <sys_arch_assert>
  12c2c8:	e3e03005 	mvn	r3, #5
  12c2cc:	ea000186 	b	12c8ec <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
  12c2d0:	e3a03006 	mov	r3, #6
  12c2d4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c2d8:	ea00009d 	b	12c554 <dhcp_parse_reply+0x574>
      case(DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
  12c2dc:	e3a03004 	mov	r3, #4
  12c2e0:	e54b301e 	strb	r3, [fp, #-30]	; 0xffffffe2
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
  12c2e4:	e55b201d 	ldrb	r2, [fp, #-29]	; 0xffffffe3
  12c2e8:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12c2ec:	e1520003 	cmp	r2, r3
  12c2f0:	2a000008 	bcs	12c318 <dhcp_parse_reply+0x338>
  12c2f4:	e3080510 	movw	r0, #34064	; 0x8510
  12c2f8:	e3400014 	movt	r0, #20
  12c2fc:	ebff5b84 	bl	103114 <rt_kprintf>
  12c300:	e30015fc 	movw	r1, #1532	; 0x5fc
  12c304:	e30802a4 	movw	r0, #33444	; 0x82a4
  12c308:	e3400014 	movt	r0, #20
  12c30c:	ebff7a00 	bl	10ab14 <sys_arch_assert>
  12c310:	e3e03005 	mvn	r3, #5
  12c314:	ea000174 	b	12c8ec <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
  12c318:	e3a03007 	mov	r3, #7
  12c31c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c320:	ea00008b 	b	12c554 <dhcp_parse_reply+0x574>
#if LWIP_DHCP_PROVIDE_DNS_SERVERS
      case(DHCP_OPTION_DNS_SERVER):
        /* special case: there might be more than one server */
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
  12c324:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c328:	e2033003 	and	r3, r3, #3
  12c32c:	e6ef3073 	uxtb	r3, r3
  12c330:	e3530000 	cmp	r3, #0
  12c334:	0a000008 	beq	12c35c <dhcp_parse_reply+0x37c>
  12c338:	e3080524 	movw	r0, #34084	; 0x8524
  12c33c:	e3400014 	movt	r0, #20
  12c340:	ebff5b73 	bl	103114 <rt_kprintf>
  12c344:	e3001602 	movw	r1, #1538	; 0x602
  12c348:	e30802a4 	movw	r0, #33444	; 0x82a4
  12c34c:	e3400014 	movt	r0, #20
  12c350:	ebff79ef 	bl	10ab14 <sys_arch_assert>
  12c354:	e3e03005 	mvn	r3, #5
  12c358:	ea000163 	b	12c8ec <dhcp_parse_reply+0x90c>
        /* limit number of DNS servers */
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
  12c35c:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c360:	e3530008 	cmp	r3, #8
  12c364:	31a03003 	movcc	r3, r3
  12c368:	23a03008 	movcs	r3, #8
  12c36c:	e54b301e 	strb	r3, [fp, #-30]	; 0xffffffe2
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
  12c370:	e55b201d 	ldrb	r2, [fp, #-29]	; 0xffffffe3
  12c374:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12c378:	e1520003 	cmp	r2, r3
  12c37c:	2a000008 	bcs	12c3a4 <dhcp_parse_reply+0x3c4>
  12c380:	e3080510 	movw	r0, #34064	; 0x8510
  12c384:	e3400014 	movt	r0, #20
  12c388:	ebff5b61 	bl	103114 <rt_kprintf>
  12c38c:	e3001605 	movw	r1, #1541	; 0x605
  12c390:	e30802a4 	movw	r0, #33444	; 0x82a4
  12c394:	e3400014 	movt	r0, #20
  12c398:	ebff79dd 	bl	10ab14 <sys_arch_assert>
  12c39c:	e3e03005 	mvn	r3, #5
  12c3a0:	ea000151 	b	12c8ec <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
  12c3a4:	e3a03008 	mov	r3, #8
  12c3a8:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c3ac:	ea000068 	b	12c554 <dhcp_parse_reply+0x574>
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case(DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
  12c3b0:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c3b4:	e3530004 	cmp	r3, #4
  12c3b8:	0a000008 	beq	12c3e0 <dhcp_parse_reply+0x400>
  12c3bc:	e3080504 	movw	r0, #34052	; 0x8504
  12c3c0:	e3400014 	movt	r0, #20
  12c3c4:	ebff5b52 	bl	103114 <rt_kprintf>
  12c3c8:	e300160a 	movw	r1, #1546	; 0x60a
  12c3cc:	e30802a4 	movw	r0, #33444	; 0x82a4
  12c3d0:	e3400014 	movt	r0, #20
  12c3d4:	ebff79ce 	bl	10ab14 <sys_arch_assert>
  12c3d8:	e3e03005 	mvn	r3, #5
  12c3dc:	ea000142 	b	12c8ec <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
  12c3e0:	e3a03003 	mov	r3, #3
  12c3e4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c3e8:	ea000059 	b	12c554 <dhcp_parse_reply+0x574>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case(DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
  12c3ec:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c3f0:	e3530001 	cmp	r3, #1
  12c3f4:	0a000008 	beq	12c41c <dhcp_parse_reply+0x43c>
  12c3f8:	e3080534 	movw	r0, #34100	; 0x8534
  12c3fc:	e3400014 	movt	r0, #20
  12c400:	ebff5b43 	bl	103114 <rt_kprintf>
  12c404:	e3001618 	movw	r1, #1560	; 0x618
  12c408:	e30802a4 	movw	r0, #33444	; 0x82a4
  12c40c:	e3400014 	movt	r0, #20
  12c410:	ebff79bf 	bl	10ab14 <sys_arch_assert>
  12c414:	e3e03005 	mvn	r3, #5
  12c418:	ea000133 	b	12c8ec <dhcp_parse_reply+0x90c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
  12c41c:	e15b30be 	ldrh	r3, [fp, #-14]
  12c420:	e35300f0 	cmp	r3, #240	; 0xf0
  12c424:	0a000008 	beq	12c44c <dhcp_parse_reply+0x46c>
  12c428:	e3080540 	movw	r0, #34112	; 0x8540
  12c42c:	e3400014 	movt	r0, #20
  12c430:	ebff5b37 	bl	103114 <rt_kprintf>
  12c434:	e300161a 	movw	r1, #1562	; 0x61a
  12c438:	e30802a4 	movw	r0, #33444	; 0x82a4
  12c43c:	e3400014 	movt	r0, #20
  12c440:	ebff79b3 	bl	10ab14 <sys_arch_assert>
  12c444:	e3e03005 	mvn	r3, #5
  12c448:	ea000127 	b	12c8ec <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
  12c44c:	e3a03000 	mov	r3, #0
  12c450:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c454:	ea00003e 	b	12c554 <dhcp_parse_reply+0x574>
      case(DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
  12c458:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c45c:	e3530001 	cmp	r3, #1
  12c460:	0a000008 	beq	12c488 <dhcp_parse_reply+0x4a8>
  12c464:	e3080534 	movw	r0, #34100	; 0x8534
  12c468:	e3400014 	movt	r0, #20
  12c46c:	ebff5b28 	bl	103114 <rt_kprintf>
  12c470:	e300161e 	movw	r1, #1566	; 0x61e
  12c474:	e30802a4 	movw	r0, #33444	; 0x82a4
  12c478:	e3400014 	movt	r0, #20
  12c47c:	ebff79a4 	bl	10ab14 <sys_arch_assert>
  12c480:	e3e03005 	mvn	r3, #5
  12c484:	ea000118 	b	12c8ec <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
  12c488:	e3a03001 	mov	r3, #1
  12c48c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c490:	ea00002f 	b	12c554 <dhcp_parse_reply+0x574>
      case(DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
  12c494:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c498:	e3530004 	cmp	r3, #4
  12c49c:	0a000008 	beq	12c4c4 <dhcp_parse_reply+0x4e4>
  12c4a0:	e3080504 	movw	r0, #34052	; 0x8504
  12c4a4:	e3400014 	movt	r0, #20
  12c4a8:	ebff5b19 	bl	103114 <rt_kprintf>
  12c4ac:	e3001622 	movw	r1, #1570	; 0x622
  12c4b0:	e30802a4 	movw	r0, #33444	; 0x82a4
  12c4b4:	e3400014 	movt	r0, #20
  12c4b8:	ebff7995 	bl	10ab14 <sys_arch_assert>
  12c4bc:	e3e03005 	mvn	r3, #5
  12c4c0:	ea000109 	b	12c8ec <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
  12c4c4:	e3a03002 	mov	r3, #2
  12c4c8:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c4cc:	ea000020 	b	12c554 <dhcp_parse_reply+0x574>
      case(DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
  12c4d0:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c4d4:	e3530004 	cmp	r3, #4
  12c4d8:	0a000008 	beq	12c500 <dhcp_parse_reply+0x520>
  12c4dc:	e3080504 	movw	r0, #34052	; 0x8504
  12c4e0:	e3400014 	movt	r0, #20
  12c4e4:	ebff5b0a 	bl	103114 <rt_kprintf>
  12c4e8:	e3001626 	movw	r1, #1574	; 0x626
  12c4ec:	e30802a4 	movw	r0, #33444	; 0x82a4
  12c4f0:	e3400014 	movt	r0, #20
  12c4f4:	ebff7986 	bl	10ab14 <sys_arch_assert>
  12c4f8:	e3e03005 	mvn	r3, #5
  12c4fc:	ea0000fa 	b	12c8ec <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_T1;
  12c500:	e3a03004 	mov	r3, #4
  12c504:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c508:	ea000011 	b	12c554 <dhcp_parse_reply+0x574>
      case(DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
  12c50c:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c510:	e3530004 	cmp	r3, #4
  12c514:	0a000008 	beq	12c53c <dhcp_parse_reply+0x55c>
  12c518:	e3080504 	movw	r0, #34052	; 0x8504
  12c51c:	e3400014 	movt	r0, #20
  12c520:	ebff5afb 	bl	103114 <rt_kprintf>
  12c524:	e300162a 	movw	r1, #1578	; 0x62a
  12c528:	e30802a4 	movw	r0, #33444	; 0x82a4
  12c52c:	e3400014 	movt	r0, #20
  12c530:	ebff7977 	bl	10ab14 <sys_arch_assert>
  12c534:	e3e03005 	mvn	r3, #5
  12c538:	ea0000eb 	b	12c8ec <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_T2;
  12c53c:	e3a03005 	mov	r3, #5
  12c540:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c544:	ea000002 	b	12c554 <dhcp_parse_reply+0x574>
      default:
        decode_len = 0;
  12c548:	e3a03000 	mov	r3, #0
  12c54c:	e54b301e 	strb	r3, [fp, #-30]	; 0xffffffe2
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        break;
  12c550:	e320f000 	nop	{0}
    }
    offset += len + 2;
  12c554:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c558:	e6ff2073 	uxth	r2, r3
  12c55c:	e15b30ba 	ldrh	r3, [fp, #-10]
  12c560:	e0823003 	add	r3, r2, r3
  12c564:	e6ff3073 	uxth	r3, r3
  12c568:	e2833002 	add	r3, r3, #2
  12c56c:	e14b30ba 	strh	r3, [fp, #-10]
    if (decode_len > 0) {
  12c570:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12c574:	e3530000 	cmp	r3, #0
  12c578:	0a000073 	beq	12c74c <dhcp_parse_reply+0x76c>
      u32_t value = 0;
  12c57c:	e3a03000 	mov	r3, #0
  12c580:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
      u16_t copy_len;
decode_next:
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
  12c584:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  12c588:	e3530000 	cmp	r3, #0
  12c58c:	ba000002 	blt	12c59c <dhcp_parse_reply+0x5bc>
  12c590:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  12c594:	e3530009 	cmp	r3, #9
  12c598:	da000006 	ble	12c5b8 <dhcp_parse_reply+0x5d8>
  12c59c:	e3080558 	movw	r0, #34136	; 0x8558
  12c5a0:	e3400014 	movt	r0, #20
  12c5a4:	ebff5ada 	bl	103114 <rt_kprintf>
  12c5a8:	e3001637 	movw	r1, #1591	; 0x637
  12c5ac:	e30802a4 	movw	r0, #33444	; 0x82a4
  12c5b0:	e3400014 	movt	r0, #20
  12c5b4:	ebff7956 	bl	10ab14 <sys_arch_assert>
      if (!dhcp_option_given(dhcp, decode_idx)) {
  12c5b8:	e30531cc 	movw	r3, #20940	; 0x51cc
  12c5bc:	e3403057 	movt	r3, #87	; 0x57
  12c5c0:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  12c5c4:	e0833002 	add	r3, r3, r2
  12c5c8:	e5d33000 	ldrb	r3, [r3]
  12c5cc:	e3530000 	cmp	r3, #0
  12c5d0:	1a00005d 	bne	12c74c <dhcp_parse_reply+0x76c>
        copy_len = LWIP_MIN(decode_len, 4);
  12c5d4:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12c5d8:	e3530004 	cmp	r3, #4
  12c5dc:	31a03003 	movcc	r3, r3
  12c5e0:	23a03004 	movcs	r3, #4
  12c5e4:	e6ef3073 	uxtb	r3, r3
  12c5e8:	e14b32ba 	strh	r3, [fp, #-42]	; 0xffffffd6
        if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
  12c5ec:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  12c5f0:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
  12c5f4:	e24b1034 	sub	r1, fp, #52	; 0x34
  12c5f8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  12c5fc:	ebffbb5d 	bl	11b378 <pbuf_copy_partial>
  12c600:	e1a03000 	mov	r3, r0
  12c604:	e1a02003 	mov	r2, r3
  12c608:	e15b32ba 	ldrh	r3, [fp, #-42]	; 0xffffffd6
  12c60c:	e1530002 	cmp	r3, r2
  12c610:	0a000001 	beq	12c61c <dhcp_parse_reply+0x63c>
          return ERR_BUF;
  12c614:	e3e03001 	mvn	r3, #1
  12c618:	ea0000b3 	b	12c8ec <dhcp_parse_reply+0x90c>
        }
        if (decode_len > 4) {
  12c61c:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12c620:	e3530004 	cmp	r3, #4
  12c624:	9a000025 	bls	12c6c0 <dhcp_parse_reply+0x6e0>
          /* decode more than one u32_t */
          LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
  12c628:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12c62c:	e2033003 	and	r3, r3, #3
  12c630:	e6ef3073 	uxtb	r3, r3
  12c634:	e3530000 	cmp	r3, #0
  12c638:	0a000008 	beq	12c660 <dhcp_parse_reply+0x680>
  12c63c:	e308056c 	movw	r0, #34156	; 0x856c
  12c640:	e3400014 	movt	r0, #20
  12c644:	ebff5ab2 	bl	103114 <rt_kprintf>
  12c648:	e300163f 	movw	r1, #1599	; 0x63f
  12c64c:	e30802a4 	movw	r0, #33444	; 0x82a4
  12c650:	e3400014 	movt	r0, #20
  12c654:	ebff792e 	bl	10ab14 <sys_arch_assert>
  12c658:	e3e03005 	mvn	r3, #5
  12c65c:	ea0000a2 	b	12c8ec <dhcp_parse_reply+0x90c>
          dhcp_got_option(dhcp, decode_idx);
  12c660:	e30531cc 	movw	r3, #20940	; 0x51cc
  12c664:	e3403057 	movt	r3, #87	; 0x57
  12c668:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  12c66c:	e0833002 	add	r3, r3, r2
  12c670:	e3a02001 	mov	r2, #1
  12c674:	e5c32000 	strb	r2, [r3]
          dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
  12c678:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  12c67c:	e1a00003 	mov	r0, r3
  12c680:	ebffa706 	bl	1162a0 <lwip_htonl>
  12c684:	e1a01000 	mov	r1, r0
  12c688:	e30531d8 	movw	r3, #20952	; 0x51d8
  12c68c:	e3403057 	movt	r3, #87	; 0x57
  12c690:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  12c694:	e7831102 	str	r1, [r3, r2, lsl #2]
          decode_len -= 4;
  12c698:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12c69c:	e2433004 	sub	r3, r3, #4
  12c6a0:	e54b301e 	strb	r3, [fp, #-30]	; 0xffffffe2
          val_offset += 4;
  12c6a4:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  12c6a8:	e2833004 	add	r3, r3, #4
  12c6ac:	e14b32b6 	strh	r3, [fp, #-38]	; 0xffffffda
          decode_idx++;
  12c6b0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  12c6b4:	e2833001 	add	r3, r3, #1
  12c6b8:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
          goto decode_next;
  12c6bc:	eaffffb0 	b	12c584 <dhcp_parse_reply+0x5a4>
        } else if (decode_len == 4) {
  12c6c0:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12c6c4:	e3530004 	cmp	r3, #4
  12c6c8:	1a000005 	bne	12c6e4 <dhcp_parse_reply+0x704>
          value = lwip_ntohl(value);
  12c6cc:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  12c6d0:	e1a00003 	mov	r0, r3
  12c6d4:	ebffa6f1 	bl	1162a0 <lwip_htonl>
  12c6d8:	e1a03000 	mov	r3, r0
  12c6dc:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
  12c6e0:	ea00000e 	b	12c720 <dhcp_parse_reply+0x740>
        } else {
          LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
  12c6e4:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12c6e8:	e3530001 	cmp	r3, #1
  12c6ec:	0a000008 	beq	12c714 <dhcp_parse_reply+0x734>
  12c6f0:	e3080584 	movw	r0, #34180	; 0x8584
  12c6f4:	e3400014 	movt	r0, #20
  12c6f8:	ebff5a85 	bl	103114 <rt_kprintf>
  12c6fc:	e3001649 	movw	r1, #1609	; 0x649
  12c700:	e30802a4 	movw	r0, #33444	; 0x82a4
  12c704:	e3400014 	movt	r0, #20
  12c708:	ebff7901 	bl	10ab14 <sys_arch_assert>
  12c70c:	e3e03005 	mvn	r3, #5
  12c710:	ea000075 	b	12c8ec <dhcp_parse_reply+0x90c>
          value = ((u8_t*)&value)[0];
  12c714:	e24b3034 	sub	r3, fp, #52	; 0x34
  12c718:	e5d33000 	ldrb	r3, [r3]
  12c71c:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
        }
        dhcp_got_option(dhcp, decode_idx);
  12c720:	e30531cc 	movw	r3, #20940	; 0x51cc
  12c724:	e3403057 	movt	r3, #87	; 0x57
  12c728:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  12c72c:	e0833002 	add	r3, r3, r2
  12c730:	e3a02001 	mov	r2, #1
  12c734:	e5c32000 	strb	r2, [r3]
        dhcp_set_option_value(dhcp, decode_idx, value);
  12c738:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  12c73c:	e30531d8 	movw	r3, #20952	; 0x51d8
  12c740:	e3403057 	movt	r3, #87	; 0x57
  12c744:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  12c748:	e7831102 	str	r1, [r3, r2, lsl #2]
      }
    }
    if (offset >= q->len) {
  12c74c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c750:	e1d330ba 	ldrh	r3, [r3, #10]
  12c754:	e15b20ba 	ldrh	r2, [fp, #-10]
  12c758:	e1520003 	cmp	r2, r3
  12c75c:	3a000020 	bcc	12c7e4 <dhcp_parse_reply+0x804>
      offset -= q->len;
  12c760:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c764:	e1d330ba 	ldrh	r3, [r3, #10]
  12c768:	e15b20ba 	ldrh	r2, [fp, #-10]
  12c76c:	e0423003 	sub	r3, r2, r3
  12c770:	e14b30ba 	strh	r3, [fp, #-10]
      offset_max -= q->len;
  12c774:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c778:	e1d330ba 	ldrh	r3, [r3, #10]
  12c77c:	e15b20bc 	ldrh	r2, [fp, #-12]
  12c780:	e0423003 	sub	r3, r2, r3
  12c784:	e14b30bc 	strh	r3, [fp, #-12]
      if ((offset < offset_max) && offset_max) {
  12c788:	e15b20ba 	ldrh	r2, [fp, #-10]
  12c78c:	e15b30bc 	ldrh	r3, [fp, #-12]
  12c790:	e1520003 	cmp	r2, r3
  12c794:	2a00001f 	bcs	12c818 <dhcp_parse_reply+0x838>
  12c798:	e15b30bc 	ldrh	r3, [fp, #-12]
  12c79c:	e3530000 	cmp	r3, #0
  12c7a0:	0a00001c 	beq	12c818 <dhcp_parse_reply+0x838>
        q = q->next;
  12c7a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c7a8:	e5933000 	ldr	r3, [r3]
  12c7ac:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        LWIP_ASSERT("next pbuf was null", q);
  12c7b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c7b4:	e3530000 	cmp	r3, #0
  12c7b8:	1a000006 	bne	12c7d8 <dhcp_parse_reply+0x7f8>
  12c7bc:	e3080598 	movw	r0, #34200	; 0x8598
  12c7c0:	e3400014 	movt	r0, #20
  12c7c4:	ebff5a52 	bl	103114 <rt_kprintf>
  12c7c8:	e3001655 	movw	r1, #1621	; 0x655
  12c7cc:	e30802a4 	movw	r0, #33444	; 0x82a4
  12c7d0:	e3400014 	movt	r0, #20
  12c7d4:	ebff78ce 	bl	10ab14 <sys_arch_assert>
        options = (u8_t*)q->payload;
  12c7d8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c7dc:	e5933004 	ldr	r3, [r3, #4]
  12c7e0:	e50b3008 	str	r3, [fp, #-8]
  while ((q != NULL) && (options[offset] != DHCP_OPTION_END) && (offset < offset_max)) {
  12c7e4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c7e8:	e3530000 	cmp	r3, #0
  12c7ec:	0a000009 	beq	12c818 <dhcp_parse_reply+0x838>
  12c7f0:	e15b30ba 	ldrh	r3, [fp, #-10]
  12c7f4:	e51b2008 	ldr	r2, [fp, #-8]
  12c7f8:	e0823003 	add	r3, r2, r3
  12c7fc:	e5d33000 	ldrb	r3, [r3]
  12c800:	e35300ff 	cmp	r3, #255	; 0xff
  12c804:	0a000003 	beq	12c818 <dhcp_parse_reply+0x838>
  12c808:	e15b20ba 	ldrh	r2, [fp, #-10]
  12c80c:	e15b30bc 	ldrh	r3, [fp, #-12]
  12c810:	e1520003 	cmp	r2, r3
  12c814:	3afffe33 	bcc	12c0e8 <dhcp_parse_reply+0x108>
        break;
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
  12c818:	e30531cc 	movw	r3, #20940	; 0x51cc
  12c81c:	e3403057 	movt	r3, #87	; 0x57
  12c820:	e5d33000 	ldrb	r3, [r3]
  12c824:	e3530000 	cmp	r3, #0
  12c828:	0a00001a 	beq	12c898 <dhcp_parse_reply+0x8b8>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
  12c82c:	e30531d8 	movw	r3, #20952	; 0x51d8
  12c830:	e3403057 	movt	r3, #87	; 0x57
  12c834:	e5933000 	ldr	r3, [r3]
  12c838:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
  12c83c:	e30531cc 	movw	r3, #20940	; 0x51cc
  12c840:	e3403057 	movt	r3, #87	; 0x57
  12c844:	e3a02000 	mov	r2, #0
  12c848:	e5c32000 	strb	r2, [r3]
    if (overload == DHCP_OVERLOAD_FILE) {
  12c84c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12c850:	e3530001 	cmp	r3, #1
  12c854:	1a000002 	bne	12c864 <dhcp_parse_reply+0x884>
      parse_file_as_options = 1;
  12c858:	e3a03001 	mov	r3, #1
  12c85c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  12c860:	ea00000c 	b	12c898 <dhcp_parse_reply+0x8b8>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
  12c864:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12c868:	e3530002 	cmp	r3, #2
  12c86c:	1a000002 	bne	12c87c <dhcp_parse_reply+0x89c>
      parse_sname_as_options = 1;
  12c870:	e3a03001 	mov	r3, #1
  12c874:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  12c878:	ea000006 	b	12c898 <dhcp_parse_reply+0x8b8>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
  12c87c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12c880:	e3530003 	cmp	r3, #3
  12c884:	1a000003 	bne	12c898 <dhcp_parse_reply+0x8b8>
      parse_sname_as_options = 1;
  12c888:	e3a03001 	mov	r3, #1
  12c88c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
      parse_file_as_options = 1;
  12c890:	e3a03001 	mov	r3, #1
  12c894:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
      /* make sure the string is really NULL-terminated */
      dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
    }
#endif /* LWIP_DHCP_BOOTP_FILE */
  }
  if (parse_file_as_options) {
  12c898:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12c89c:	e3530000 	cmp	r3, #0
  12c8a0:	0a000006 	beq	12c8c0 <dhcp_parse_reply+0x8e0>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
  12c8a4:	e3a03000 	mov	r3, #0
  12c8a8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    options_idx = DHCP_FILE_OFS;
  12c8ac:	e3a0306c 	mov	r3, #108	; 0x6c
  12c8b0:	e14b30be 	strh	r3, [fp, #-14]
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
  12c8b4:	e3a030ec 	mov	r3, #236	; 0xec
  12c8b8:	e14b31b0 	strh	r3, [fp, #-16]
    goto again;
  12c8bc:	eafffde4 	b	12c054 <dhcp_parse_reply+0x74>
  } else if (parse_sname_as_options) {
  12c8c0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12c8c4:	e3530000 	cmp	r3, #0
  12c8c8:	0a000006 	beq	12c8e8 <dhcp_parse_reply+0x908>
    parse_sname_as_options = 0;
  12c8cc:	e3a03000 	mov	r3, #0
  12c8d0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    options_idx = DHCP_SNAME_OFS;
  12c8d4:	e3a0302c 	mov	r3, #44	; 0x2c
  12c8d8:	e14b30be 	strh	r3, [fp, #-14]
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
  12c8dc:	e3a0306c 	mov	r3, #108	; 0x6c
  12c8e0:	e14b31b0 	strh	r3, [fp, #-16]
    goto again;
  12c8e4:	eafffdda 	b	12c054 <dhcp_parse_reply+0x74>
  }
  return ERR_OK;
  12c8e8:	e3a03000 	mov	r3, #0
}
  12c8ec:	e1a00003 	mov	r0, r3
  12c8f0:	e24bd004 	sub	sp, fp, #4
  12c8f4:	e8bd8800 	pop	{fp, pc}

0012c8f8 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
  12c8f8:	e92d4800 	push	{fp, lr}
  12c8fc:	e28db004 	add	fp, sp, #4
  12c900:	e24dd028 	sub	sp, sp, #40	; 0x28
  12c904:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  12c908:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  12c90c:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  12c910:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  struct netif *netif = ip_current_input_netif();
  12c914:	e30e3d68 	movw	r3, #60776	; 0xed68
  12c918:	e3403014 	movt	r3, #20
  12c91c:	e5933004 	ldr	r3, [r3, #4]
  12c920:	e50b300c 	str	r3, [fp, #-12]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12c924:	e51b300c 	ldr	r3, [fp, #-12]
  12c928:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12c92c:	e50b3010 	str	r3, [fp, #-16]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
  12c930:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12c934:	e5933004 	ldr	r3, [r3, #4]
  12c938:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  u8_t i;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
  12c93c:	e51b3010 	ldr	r3, [fp, #-16]
  12c940:	e3530000 	cmp	r3, #0
  12c944:	0a000091 	beq	12cb90 <dhcp_recv+0x298>
  12c948:	e51b3010 	ldr	r3, [fp, #-16]
  12c94c:	e5d33008 	ldrb	r3, [r3, #8]
  12c950:	e3530000 	cmp	r3, #0
  12c954:	0a00008d 	beq	12cb90 <dhcp_recv+0x298>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
  12c958:	e51b3010 	ldr	r3, [fp, #-16]
  12c95c:	e5933004 	ldr	r3, [r3, #4]
  12c960:	e3530000 	cmp	r3, #0
  12c964:	0a000006 	beq	12c984 <dhcp_recv+0x8c>
  12c968:	e308037c 	movw	r0, #33660	; 0x837c
  12c96c:	e3400014 	movt	r0, #20
  12c970:	ebff59e7 	bl	103114 <rt_kprintf>
  12c974:	e30016a9 	movw	r1, #1705	; 0x6a9
  12c978:	e30802a4 	movw	r0, #33444	; 0x82a4
  12c97c:	e3400014 	movt	r0, #20
  12c980:	ebff7863 	bl	10ab14 <sys_arch_assert>

  if (p->len < DHCP_MIN_REPLY_LEN) {
  12c984:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12c988:	e1d330ba 	ldrh	r3, [r3, #10]
  12c98c:	e353002b 	cmp	r3, #43	; 0x2b
  12c990:	9a000080 	bls	12cb98 <dhcp_recv+0x2a0>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
  12c994:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c998:	e5d33000 	ldrb	r3, [r3]
  12c99c:	e3530002 	cmp	r3, #2
  12c9a0:	1a00007e 	bne	12cba0 <dhcp_recv+0x2a8>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
  12c9a4:	e3a03000 	mov	r3, #0
  12c9a8:	e54b3005 	strb	r3, [fp, #-5]
  12c9ac:	ea00000c 	b	12c9e4 <dhcp_recv+0xec>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
  12c9b0:	e55b3005 	ldrb	r3, [fp, #-5]
  12c9b4:	e51b200c 	ldr	r2, [fp, #-12]
  12c9b8:	e0823003 	add	r3, r2, r3
  12c9bc:	e5d3203b 	ldrb	r2, [r3, #59]	; 0x3b
  12c9c0:	e55b3005 	ldrb	r3, [fp, #-5]
  12c9c4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  12c9c8:	e0813003 	add	r3, r1, r3
  12c9cc:	e5d3301c 	ldrb	r3, [r3, #28]
  12c9d0:	e1520003 	cmp	r2, r3
  12c9d4:	1a000073 	bne	12cba8 <dhcp_recv+0x2b0>
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
  12c9d8:	e55b3005 	ldrb	r3, [fp, #-5]
  12c9dc:	e2833001 	add	r3, r3, #1
  12c9e0:	e54b3005 	strb	r3, [fp, #-5]
  12c9e4:	e51b300c 	ldr	r3, [fp, #-12]
  12c9e8:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
  12c9ec:	e55b2005 	ldrb	r2, [fp, #-5]
  12c9f0:	e1520003 	cmp	r2, r3
  12c9f4:	2a000005 	bcs	12ca10 <dhcp_recv+0x118>
  12c9f8:	e55b3005 	ldrb	r3, [fp, #-5]
  12c9fc:	e3530005 	cmp	r3, #5
  12ca00:	8a000002 	bhi	12ca10 <dhcp_recv+0x118>
  12ca04:	e55b3005 	ldrb	r3, [fp, #-5]
  12ca08:	e353000f 	cmp	r3, #15
  12ca0c:	9affffe7 	bls	12c9b0 <dhcp_recv+0xb8>
        (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
  12ca10:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12ca14:	e5933004 	ldr	r3, [r3, #4]
  12ca18:	e1a00003 	mov	r0, r3
  12ca1c:	ebffa61f 	bl	1162a0 <lwip_htonl>
  12ca20:	e1a02000 	mov	r2, r0
  12ca24:	e51b3010 	ldr	r3, [fp, #-16]
  12ca28:	e5933000 	ldr	r3, [r3]
  12ca2c:	e1520003 	cmp	r2, r3
  12ca30:	1a00005e 	bne	12cbb0 <dhcp_recv+0x2b8>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n",lwip_ntohl(reply_msg->xid),dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(dhcp, p) != ERR_OK) {
  12ca34:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  12ca38:	e51b0010 	ldr	r0, [fp, #-16]
  12ca3c:	ebfffd67 	bl	12bfe0 <dhcp_parse_reply>
  12ca40:	e1a03000 	mov	r3, r0
  12ca44:	e3530000 	cmp	r3, #0
  12ca48:	1a00005a 	bne	12cbb8 <dhcp_recv+0x2c0>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
  12ca4c:	e30531cc 	movw	r3, #20940	; 0x51cc
  12ca50:	e3403057 	movt	r3, #87	; 0x57
  12ca54:	e5d33001 	ldrb	r3, [r3, #1]
  12ca58:	e3530000 	cmp	r3, #0
  12ca5c:	0a000057 	beq	12cbc0 <dhcp_recv+0x2c8>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
  12ca60:	e30531d8 	movw	r3, #20952	; 0x51d8
  12ca64:	e3403057 	movt	r3, #87	; 0x57
  12ca68:	e5933004 	ldr	r3, [r3, #4]
  12ca6c:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
  12ca70:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  12ca74:	e3530005 	cmp	r3, #5
  12ca78:	1a000021 	bne	12cb04 <dhcp_recv+0x20c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
  12ca7c:	e51b3010 	ldr	r3, [fp, #-16]
  12ca80:	e5d33009 	ldrb	r3, [r3, #9]
  12ca84:	e3530001 	cmp	r3, #1
  12ca88:	1a00000c 	bne	12cac0 <dhcp_recv+0x1c8>
      dhcp_handle_ack(netif);
  12ca8c:	e51b000c 	ldr	r0, [fp, #-12]
  12ca90:	ebfff6b6 	bl	12a570 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
  12ca94:	e51b300c 	ldr	r3, [fp, #-12]
  12ca98:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  12ca9c:	e2033008 	and	r3, r3, #8
  12caa0:	e3530000 	cmp	r3, #0
  12caa4:	0a000002 	beq	12cab4 <dhcp_recv+0x1bc>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
  12caa8:	e51b000c 	ldr	r0, [fp, #-12]
  12caac:	ebfff4c0 	bl	129db4 <dhcp_check>
  12cab0:	ea000043 	b	12cbc4 <dhcp_recv+0x2cc>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
  12cab4:	e51b000c 	ldr	r0, [fp, #-12]
  12cab8:	ebfff952 	bl	12b008 <dhcp_bind>
  12cabc:	ea000040 	b	12cbc4 <dhcp_recv+0x2cc>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
  12cac0:	e51b3010 	ldr	r3, [fp, #-16]
  12cac4:	e5d33009 	ldrb	r3, [r3, #9]
  12cac8:	e3530003 	cmp	r3, #3
  12cacc:	0a000007 	beq	12caf0 <dhcp_recv+0x1f8>
  12cad0:	e51b3010 	ldr	r3, [fp, #-16]
  12cad4:	e5d33009 	ldrb	r3, [r3, #9]
  12cad8:	e3530004 	cmp	r3, #4
  12cadc:	0a000003 	beq	12caf0 <dhcp_recv+0x1f8>
             (dhcp->state == DHCP_STATE_RENEWING)) {
  12cae0:	e51b3010 	ldr	r3, [fp, #-16]
  12cae4:	e5d33009 	ldrb	r3, [r3, #9]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
  12cae8:	e3530005 	cmp	r3, #5
  12caec:	1a000034 	bne	12cbc4 <dhcp_recv+0x2cc>
      dhcp_handle_ack(netif);
  12caf0:	e51b000c 	ldr	r0, [fp, #-12]
  12caf4:	ebfff69d 	bl	12a570 <dhcp_handle_ack>
      dhcp_bind(netif);
  12caf8:	e51b000c 	ldr	r0, [fp, #-12]
  12cafc:	ebfff941 	bl	12b008 <dhcp_bind>
  12cb00:	ea00002f 	b	12cbc4 <dhcp_recv+0x2cc>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
  12cb04:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  12cb08:	e3530006 	cmp	r3, #6
  12cb0c:	1a000012 	bne	12cb5c <dhcp_recv+0x264>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
  12cb10:	e51b3010 	ldr	r3, [fp, #-16]
  12cb14:	e5d33009 	ldrb	r3, [r3, #9]
  else if ((msg_type == DHCP_NAK) &&
  12cb18:	e3530003 	cmp	r3, #3
  12cb1c:	0a00000b 	beq	12cb50 <dhcp_recv+0x258>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
  12cb20:	e51b3010 	ldr	r3, [fp, #-16]
  12cb24:	e5d33009 	ldrb	r3, [r3, #9]
  12cb28:	e3530001 	cmp	r3, #1
  12cb2c:	0a000007 	beq	12cb50 <dhcp_recv+0x258>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
  12cb30:	e51b3010 	ldr	r3, [fp, #-16]
  12cb34:	e5d33009 	ldrb	r3, [r3, #9]
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
  12cb38:	e3530004 	cmp	r3, #4
  12cb3c:	0a000003 	beq	12cb50 <dhcp_recv+0x258>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
  12cb40:	e51b3010 	ldr	r3, [fp, #-16]
  12cb44:	e5d33009 	ldrb	r3, [r3, #9]
  12cb48:	e3530005 	cmp	r3, #5
  12cb4c:	1a000002 	bne	12cb5c <dhcp_recv+0x264>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
  12cb50:	e51b000c 	ldr	r0, [fp, #-12]
  12cb54:	ebfff47f 	bl	129d58 <dhcp_handle_nak>
  12cb58:	ea000019 	b	12cbc4 <dhcp_recv+0x2cc>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
  12cb5c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  12cb60:	e3530002 	cmp	r3, #2
  12cb64:	1a000009 	bne	12cb90 <dhcp_recv+0x298>
  12cb68:	e51b3010 	ldr	r3, [fp, #-16]
  12cb6c:	e5d33009 	ldrb	r3, [r3, #9]
  12cb70:	e3530006 	cmp	r3, #6
  12cb74:	1a000005 	bne	12cb90 <dhcp_recv+0x298>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    dhcp->request_timeout = 0;
  12cb78:	e51b3010 	ldr	r3, [fp, #-16]
  12cb7c:	e3a02000 	mov	r2, #0
  12cb80:	e1c321b6 	strh	r2, [r3, #22]
    /* remember offered lease */
    dhcp_handle_offer(netif);
  12cb84:	e51b000c 	ldr	r0, [fp, #-12]
  12cb88:	ebfff4b6 	bl	129e68 <dhcp_handle_offer>
  12cb8c:	ea00000c 	b	12cbc4 <dhcp_recv+0x2cc>
  }

free_pbuf_and_return:
  12cb90:	e320f000 	nop	{0}
  12cb94:	ea00000a 	b	12cbc4 <dhcp_recv+0x2cc>
    goto free_pbuf_and_return;
  12cb98:	e320f000 	nop	{0}
  12cb9c:	ea000008 	b	12cbc4 <dhcp_recv+0x2cc>
    goto free_pbuf_and_return;
  12cba0:	e320f000 	nop	{0}
  12cba4:	ea000006 	b	12cbc4 <dhcp_recv+0x2cc>
      goto free_pbuf_and_return;
  12cba8:	e320f000 	nop	{0}
  12cbac:	ea000004 	b	12cbc4 <dhcp_recv+0x2cc>
    goto free_pbuf_and_return;
  12cbb0:	e320f000 	nop	{0}
  12cbb4:	ea000002 	b	12cbc4 <dhcp_recv+0x2cc>
    goto free_pbuf_and_return;
  12cbb8:	e320f000 	nop	{0}
  12cbbc:	ea000000 	b	12cbc4 <dhcp_recv+0x2cc>
    goto free_pbuf_and_return;
  12cbc0:	e320f000 	nop	{0}
  if (dhcp != NULL) {
  12cbc4:	e51b3010 	ldr	r3, [fp, #-16]
  12cbc8:	e3530000 	cmp	r3, #0
  12cbcc:	0a000002 	beq	12cbdc <dhcp_recv+0x2e4>
    dhcp->msg_in = NULL;
  12cbd0:	e51b3010 	ldr	r3, [fp, #-16]
  12cbd4:	e3a02000 	mov	r2, #0
  12cbd8:	e5832004 	str	r2, [r3, #4]
  }
  pbuf_free(p);
  12cbdc:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12cbe0:	ebffb7d9 	bl	11ab4c <pbuf_free>
}
  12cbe4:	e320f000 	nop	{0}
  12cbe8:	e24bd004 	sub	sp, fp, #4
  12cbec:	e8bd8800 	pop	{fp, pc}

0012cbf0 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static err_t
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
{
  12cbf0:	e92d4810 	push	{r4, fp, lr}
  12cbf4:	e28db008 	add	fp, sp, #8
  12cbf8:	e24dd01c 	sub	sp, sp, #28
  12cbfc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12cc00:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  12cc04:	e1a03002 	mov	r3, r2
  12cc08:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
  12cc0c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12cc10:	e3530000 	cmp	r3, #0
  12cc14:	1a000008 	bne	12cc3c <dhcp_create_msg+0x4c>
  12cc18:	e30805ac 	movw	r0, #34220	; 0x85ac
  12cc1c:	e3400014 	movt	r0, #20
  12cc20:	ebff593b 	bl	103114 <rt_kprintf>
  12cc24:	e300171e 	movw	r1, #1822	; 0x71e
  12cc28:	e30802a4 	movw	r0, #33444	; 0x82a4
  12cc2c:	e3400014 	movt	r0, #20
  12cc30:	ebff77b7 	bl	10ab14 <sys_arch_assert>
  12cc34:	e3e0300f 	mvn	r3, #15
  12cc38:	ea000121 	b	12d0c4 <dhcp_create_msg+0x4d4>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
  12cc3c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12cc40:	e3530000 	cmp	r3, #0
  12cc44:	1a000008 	bne	12cc6c <dhcp_create_msg+0x7c>
  12cc48:	e30805cc 	movw	r0, #34252	; 0x85cc
  12cc4c:	e3400014 	movt	r0, #20
  12cc50:	ebff592f 	bl	103114 <rt_kprintf>
  12cc54:	e300171f 	movw	r1, #1823	; 0x71f
  12cc58:	e30802a4 	movw	r0, #33444	; 0x82a4
  12cc5c:	e3400014 	movt	r0, #20
  12cc60:	ebff77ab 	bl	10ab14 <sys_arch_assert>
  12cc64:	e3e03005 	mvn	r3, #5
  12cc68:	ea000115 	b	12d0c4 <dhcp_create_msg+0x4d4>
  LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
  12cc6c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12cc70:	e593300c 	ldr	r3, [r3, #12]
  12cc74:	e3530000 	cmp	r3, #0
  12cc78:	0a000006 	beq	12cc98 <dhcp_create_msg+0xa8>
  12cc7c:	e30805ec 	movw	r0, #34284	; 0x85ec
  12cc80:	e3400014 	movt	r0, #20
  12cc84:	ebff5922 	bl	103114 <rt_kprintf>
  12cc88:	e3a01e72 	mov	r1, #1824	; 0x720
  12cc8c:	e30802a4 	movw	r0, #33444	; 0x82a4
  12cc90:	e3400014 	movt	r0, #20
  12cc94:	ebff779e 	bl	10ab14 <sys_arch_assert>
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
  12cc98:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12cc9c:	e5933010 	ldr	r3, [r3, #16]
  12cca0:	e3530000 	cmp	r3, #0
  12cca4:	0a000006 	beq	12ccc4 <dhcp_create_msg+0xd4>
  12cca8:	e3080614 	movw	r0, #34324	; 0x8614
  12ccac:	e3400014 	movt	r0, #20
  12ccb0:	ebff5917 	bl	103114 <rt_kprintf>
  12ccb4:	e3001721 	movw	r1, #1825	; 0x721
  12ccb8:	e30802a4 	movw	r0, #33444	; 0x82a4
  12ccbc:	e3400014 	movt	r0, #20
  12ccc0:	ebff7793 	bl	10ab14 <sys_arch_assert>
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
  12ccc4:	e3a02000 	mov	r2, #0
  12ccc8:	e3a01f4d 	mov	r1, #308	; 0x134
  12cccc:	e3a00000 	mov	r0, #0
  12ccd0:	ebffb496 	bl	119f30 <pbuf_alloc>
  12ccd4:	e1a02000 	mov	r2, r0
  12ccd8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12ccdc:	e583200c 	str	r2, [r3, #12]
  if (dhcp->p_out == NULL) {
  12cce0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12cce4:	e593300c 	ldr	r3, [r3, #12]
  12cce8:	e3530000 	cmp	r3, #0
  12ccec:	1a000001 	bne	12ccf8 <dhcp_create_msg+0x108>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_create_msg(): could not allocate pbuf\n"));
    return ERR_MEM;
  12ccf0:	e3e03000 	mvn	r3, #0
  12ccf4:	ea0000f2 	b	12d0c4 <dhcp_create_msg+0x4d4>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
  12ccf8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12ccfc:	e593300c 	ldr	r3, [r3, #12]
  12cd00:	e1d330ba 	ldrh	r3, [r3, #10]
  12cd04:	e3530f4d 	cmp	r3, #308	; 0x134
  12cd08:	2a000006 	bcs	12cd28 <dhcp_create_msg+0x138>
  12cd0c:	e308063c 	movw	r0, #34364	; 0x863c
  12cd10:	e3400014 	movt	r0, #20
  12cd14:	ebff58fe 	bl	103114 <rt_kprintf>
  12cd18:	e3001729 	movw	r1, #1833	; 0x729
  12cd1c:	e30802a4 	movw	r0, #33444	; 0x82a4
  12cd20:	e3400014 	movt	r0, #20
  12cd24:	ebff777a 	bl	10ab14 <sys_arch_assert>
           (dhcp->p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if (message_type != DHCP_REQUEST) {
  12cd28:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12cd2c:	e3530003 	cmp	r3, #3
  12cd30:	0a00000e 	beq	12cd70 <dhcp_create_msg+0x180>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
  12cd34:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12cd38:	e5d3300a 	ldrb	r3, [r3, #10]
  12cd3c:	e3530000 	cmp	r3, #0
  12cd40:	1a000005 	bne	12cd5c <dhcp_create_msg+0x16c>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
  12cd44:	eb0042ae 	bl	13d804 <rand>
  12cd48:	e1a03000 	mov	r3, r0
  12cd4c:	e1a02003 	mov	r2, r3
  12cd50:	e30e325c 	movw	r3, #57948	; 0xe25c
  12cd54:	e3403014 	movt	r3, #20
  12cd58:	e5832000 	str	r2, [r3]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
  12cd5c:	e30e325c 	movw	r3, #57948	; 0xe25c
  12cd60:	e3403014 	movt	r3, #20
  12cd64:	e5932000 	ldr	r2, [r3]
  12cd68:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12cd6c:	e5832000 	str	r2, [r3]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
  12cd70:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12cd74:	e593300c 	ldr	r3, [r3, #12]
  12cd78:	e5932004 	ldr	r2, [r3, #4]
  12cd7c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12cd80:	e5832010 	str	r2, [r3, #16]

  dhcp->msg_out->op = DHCP_BOOTREQUEST;
  12cd84:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12cd88:	e5933010 	ldr	r3, [r3, #16]
  12cd8c:	e3a02001 	mov	r2, #1
  12cd90:	e5c32000 	strb	r2, [r3]
  /* @todo: make link layer independent */
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
  12cd94:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12cd98:	e5933010 	ldr	r3, [r3, #16]
  12cd9c:	e3a02001 	mov	r2, #1
  12cda0:	e5c32001 	strb	r2, [r3, #1]
  dhcp->msg_out->hlen = netif->hwaddr_len;
  12cda4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12cda8:	e5933010 	ldr	r3, [r3, #16]
  12cdac:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  12cdb0:	e5d2203a 	ldrb	r2, [r2, #58]	; 0x3a
  12cdb4:	e5c32002 	strb	r2, [r3, #2]
  dhcp->msg_out->hops = 0;
  12cdb8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12cdbc:	e5933010 	ldr	r3, [r3, #16]
  12cdc0:	e3a02000 	mov	r2, #0
  12cdc4:	e5c32003 	strb	r2, [r3, #3]
  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
  12cdc8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12cdcc:	e5932000 	ldr	r2, [r3]
  12cdd0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12cdd4:	e5934010 	ldr	r4, [r3, #16]
  12cdd8:	e1a00002 	mov	r0, r2
  12cddc:	ebffa52f 	bl	1162a0 <lwip_htonl>
  12cde0:	e1a03000 	mov	r3, r0
  12cde4:	e5843004 	str	r3, [r4, #4]
  dhcp->msg_out->secs = 0;
  12cde8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12cdec:	e5933010 	ldr	r3, [r3, #16]
  12cdf0:	e3a02000 	mov	r2, #0
  12cdf4:	e5c32008 	strb	r2, [r3, #8]
  12cdf8:	e3a02000 	mov	r2, #0
  12cdfc:	e5c32009 	strb	r2, [r3, #9]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  dhcp->msg_out->flags = 0;
  12ce00:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12ce04:	e5933010 	ldr	r3, [r3, #16]
  12ce08:	e3a02000 	mov	r2, #0
  12ce0c:	e5c3200a 	strb	r2, [r3, #10]
  12ce10:	e3a02000 	mov	r2, #0
  12ce14:	e5c3200b 	strb	r2, [r3, #11]
  ip4_addr_set_zero(&dhcp->msg_out->ciaddr);
  12ce18:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12ce1c:	e5933010 	ldr	r3, [r3, #16]
  12ce20:	e3a02000 	mov	r2, #0
  12ce24:	e5c3200c 	strb	r2, [r3, #12]
  12ce28:	e3a02000 	mov	r2, #0
  12ce2c:	e5c3200d 	strb	r2, [r3, #13]
  12ce30:	e3a02000 	mov	r2, #0
  12ce34:	e5c3200e 	strb	r2, [r3, #14]
  12ce38:	e3a02000 	mov	r2, #0
  12ce3c:	e5c3200f 	strb	r2, [r3, #15]
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
  12ce40:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12ce44:	e3530008 	cmp	r3, #8
  12ce48:	0a000010 	beq	12ce90 <dhcp_create_msg+0x2a0>
  12ce4c:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12ce50:	e3530004 	cmp	r3, #4
  12ce54:	0a00000d 	beq	12ce90 <dhcp_create_msg+0x2a0>
  12ce58:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12ce5c:	e3530007 	cmp	r3, #7
  12ce60:	0a00000a 	beq	12ce90 <dhcp_create_msg+0x2a0>
  12ce64:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12ce68:	e3530003 	cmp	r3, #3
  12ce6c:	1a00000d 	bne	12cea8 <dhcp_create_msg+0x2b8>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
  12ce70:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12ce74:	e5d33009 	ldrb	r3, [r3, #9]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
  12ce78:	e3530005 	cmp	r3, #5
  12ce7c:	0a000003 	beq	12ce90 <dhcp_create_msg+0x2a0>
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
  12ce80:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12ce84:	e5d33009 	ldrb	r3, [r3, #9]
  12ce88:	e3530004 	cmp	r3, #4
  12ce8c:	1a000005 	bne	12cea8 <dhcp_create_msg+0x2b8>
    ip4_addr_copy(dhcp->msg_out->ciaddr, *netif_ip4_addr(netif));
  12ce90:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12ce94:	e2832004 	add	r2, r3, #4
  12ce98:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12ce9c:	e5933010 	ldr	r3, [r3, #16]
  12cea0:	e5922000 	ldr	r2, [r2]
  12cea4:	e583200c 	str	r2, [r3, #12]
  }
  ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
  12cea8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12ceac:	e5933010 	ldr	r3, [r3, #16]
  12ceb0:	e3a02000 	mov	r2, #0
  12ceb4:	e5c32010 	strb	r2, [r3, #16]
  12ceb8:	e3a02000 	mov	r2, #0
  12cebc:	e5c32011 	strb	r2, [r3, #17]
  12cec0:	e3a02000 	mov	r2, #0
  12cec4:	e5c32012 	strb	r2, [r3, #18]
  12cec8:	e3a02000 	mov	r2, #0
  12cecc:	e5c32013 	strb	r2, [r3, #19]
  ip4_addr_set_zero(&dhcp->msg_out->siaddr);
  12ced0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12ced4:	e5933010 	ldr	r3, [r3, #16]
  12ced8:	e3a02000 	mov	r2, #0
  12cedc:	e5c32014 	strb	r2, [r3, #20]
  12cee0:	e3a02000 	mov	r2, #0
  12cee4:	e5c32015 	strb	r2, [r3, #21]
  12cee8:	e3a02000 	mov	r2, #0
  12ceec:	e5c32016 	strb	r2, [r3, #22]
  12cef0:	e3a02000 	mov	r2, #0
  12cef4:	e5c32017 	strb	r2, [r3, #23]
  ip4_addr_set_zero(&dhcp->msg_out->giaddr);
  12cef8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12cefc:	e5933010 	ldr	r3, [r3, #16]
  12cf00:	e3a02000 	mov	r2, #0
  12cf04:	e5c32018 	strb	r2, [r3, #24]
  12cf08:	e3a02000 	mov	r2, #0
  12cf0c:	e5c32019 	strb	r2, [r3, #25]
  12cf10:	e3a02000 	mov	r2, #0
  12cf14:	e5c3201a 	strb	r2, [r3, #26]
  12cf18:	e3a02000 	mov	r2, #0
  12cf1c:	e5c3201b 	strb	r2, [r3, #27]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
  12cf20:	e3a03000 	mov	r3, #0
  12cf24:	e14b30be 	strh	r3, [fp, #-14]
  12cf28:	ea000017 	b	12cf8c <dhcp_create_msg+0x39c>
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
  12cf2c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12cf30:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
  12cf34:	e6ff3073 	uxth	r3, r3
  12cf38:	e15b20be 	ldrh	r2, [fp, #-14]
  12cf3c:	e1520003 	cmp	r2, r3
  12cf40:	2a000007 	bcs	12cf64 <dhcp_create_msg+0x374>
  12cf44:	e15b30be 	ldrh	r3, [fp, #-14]
  12cf48:	e3530005 	cmp	r3, #5
  12cf4c:	8a000004 	bhi	12cf64 <dhcp_create_msg+0x374>
  12cf50:	e15b30be 	ldrh	r3, [fp, #-14]
  12cf54:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  12cf58:	e0823003 	add	r3, r2, r3
  12cf5c:	e5d3103b 	ldrb	r1, [r3, #59]	; 0x3b
  12cf60:	ea000000 	b	12cf68 <dhcp_create_msg+0x378>
  12cf64:	e3a01000 	mov	r1, #0
  12cf68:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12cf6c:	e5932010 	ldr	r2, [r3, #16]
  12cf70:	e15b30be 	ldrh	r3, [fp, #-14]
  12cf74:	e0823003 	add	r3, r2, r3
  12cf78:	e1a02001 	mov	r2, r1
  12cf7c:	e5c3201c 	strb	r2, [r3, #28]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
  12cf80:	e15b30be 	ldrh	r3, [fp, #-14]
  12cf84:	e2833001 	add	r3, r3, #1
  12cf88:	e14b30be 	strh	r3, [fp, #-14]
  12cf8c:	e15b30be 	ldrh	r3, [fp, #-14]
  12cf90:	e353000f 	cmp	r3, #15
  12cf94:	9affffe4 	bls	12cf2c <dhcp_create_msg+0x33c>
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
  12cf98:	e3a03000 	mov	r3, #0
  12cf9c:	e14b30be 	strh	r3, [fp, #-14]
  12cfa0:	ea000008 	b	12cfc8 <dhcp_create_msg+0x3d8>
    dhcp->msg_out->sname[i] = 0;
  12cfa4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12cfa8:	e5932010 	ldr	r2, [r3, #16]
  12cfac:	e15b30be 	ldrh	r3, [fp, #-14]
  12cfb0:	e0823003 	add	r3, r2, r3
  12cfb4:	e3a02000 	mov	r2, #0
  12cfb8:	e5c3202c 	strb	r2, [r3, #44]	; 0x2c
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
  12cfbc:	e15b30be 	ldrh	r3, [fp, #-14]
  12cfc0:	e2833001 	add	r3, r3, #1
  12cfc4:	e14b30be 	strh	r3, [fp, #-14]
  12cfc8:	e15b30be 	ldrh	r3, [fp, #-14]
  12cfcc:	e353003f 	cmp	r3, #63	; 0x3f
  12cfd0:	9afffff3 	bls	12cfa4 <dhcp_create_msg+0x3b4>
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
  12cfd4:	e3a03000 	mov	r3, #0
  12cfd8:	e14b30be 	strh	r3, [fp, #-14]
  12cfdc:	ea000008 	b	12d004 <dhcp_create_msg+0x414>
    dhcp->msg_out->file[i] = 0;
  12cfe0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12cfe4:	e5932010 	ldr	r2, [r3, #16]
  12cfe8:	e15b30be 	ldrh	r3, [fp, #-14]
  12cfec:	e0823003 	add	r3, r2, r3
  12cff0:	e3a02000 	mov	r2, #0
  12cff4:	e5c3206c 	strb	r2, [r3, #108]	; 0x6c
  for (i = 0; i < DHCP_FILE_LEN; i++) {
  12cff8:	e15b30be 	ldrh	r3, [fp, #-14]
  12cffc:	e2833001 	add	r3, r3, #1
  12d000:	e14b30be 	strh	r3, [fp, #-14]
  12d004:	e15b30be 	ldrh	r3, [fp, #-14]
  12d008:	e353007f 	cmp	r3, #127	; 0x7f
  12d00c:	9afffff3 	bls	12cfe0 <dhcp_create_msg+0x3f0>
  }
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
  12d010:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d014:	e5932010 	ldr	r2, [r3, #16]
  12d018:	e3a03000 	mov	r3, #0
  12d01c:	e3833063 	orr	r3, r3, #99	; 0x63
  12d020:	e5c230ec 	strb	r3, [r2, #236]	; 0xec
  12d024:	e3a03000 	mov	r3, #0
  12d028:	e1e03003 	mvn	r3, r3
  12d02c:	e203307d 	and	r3, r3, #125	; 0x7d
  12d030:	e1e03003 	mvn	r3, r3
  12d034:	e5c230ed 	strb	r3, [r2, #237]	; 0xed
  12d038:	e3a03000 	mov	r3, #0
  12d03c:	e3833053 	orr	r3, r3, #83	; 0x53
  12d040:	e5c230ee 	strb	r3, [r2, #238]	; 0xee
  12d044:	e3a03000 	mov	r3, #0
  12d048:	e3833063 	orr	r3, r3, #99	; 0x63
  12d04c:	e5c230ef 	strb	r3, [r2, #239]	; 0xef
  dhcp->options_out_len = 0;
  12d050:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d054:	e3a02000 	mov	r2, #0
  12d058:	e1c321b4 	strh	r2, [r3, #20]
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
  12d05c:	e3a03000 	mov	r3, #0
  12d060:	e14b30be 	strh	r3, [fp, #-14]
  12d064:	ea00000a 	b	12d094 <dhcp_create_msg+0x4a4>
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
  12d068:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d06c:	e5932010 	ldr	r2, [r3, #16]
  12d070:	e15b30be 	ldrh	r3, [fp, #-14]
  12d074:	e15b10be 	ldrh	r1, [fp, #-14]
  12d078:	e6ef1071 	uxtb	r1, r1
  12d07c:	e0823003 	add	r3, r2, r3
  12d080:	e1a02001 	mov	r2, r1
  12d084:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
  12d088:	e15b30be 	ldrh	r3, [fp, #-14]
  12d08c:	e2833001 	add	r3, r3, #1
  12d090:	e14b30be 	strh	r3, [fp, #-14]
  12d094:	e15b30be 	ldrh	r3, [fp, #-14]
  12d098:	e3530043 	cmp	r3, #67	; 0x43
  12d09c:	9afffff1 	bls	12d068 <dhcp_create_msg+0x478>
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
  12d0a0:	e3a02001 	mov	r2, #1
  12d0a4:	e3a01035 	mov	r1, #53	; 0x35
  12d0a8:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12d0ac:	ebfffab7 	bl	12bb90 <dhcp_option>
  dhcp_option_byte(dhcp, message_type);
  12d0b0:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12d0b4:	e1a01003 	mov	r1, r3
  12d0b8:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12d0bc:	ebfffae3 	bl	12bc50 <dhcp_option_byte>
  return ERR_OK;
  12d0c0:	e3a03000 	mov	r3, #0
}
  12d0c4:	e1a00003 	mov	r0, r3
  12d0c8:	e24bd008 	sub	sp, fp, #8
  12d0cc:	e8bd8810 	pop	{r4, fp, pc}

0012d0d0 <dhcp_delete_msg>:
 *
 * @param dhcp the dhcp struct to free the request from
 */
static void
dhcp_delete_msg(struct dhcp *dhcp)
{
  12d0d0:	e92d4800 	push	{fp, lr}
  12d0d4:	e28db004 	add	fp, sp, #4
  12d0d8:	e24dd008 	sub	sp, sp, #8
  12d0dc:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
  12d0e0:	e51b3008 	ldr	r3, [fp, #-8]
  12d0e4:	e3530000 	cmp	r3, #0
  12d0e8:	1a000007 	bne	12d10c <dhcp_delete_msg+0x3c>
  12d0ec:	e308067c 	movw	r0, #34428	; 0x867c
  12d0f0:	e3400014 	movt	r0, #20
  12d0f4:	ebff5806 	bl	103114 <rt_kprintf>
  12d0f8:	e300176e 	movw	r1, #1902	; 0x76e
  12d0fc:	e30802a4 	movw	r0, #33444	; 0x82a4
  12d100:	e3400014 	movt	r0, #20
  12d104:	ebff7682 	bl	10ab14 <sys_arch_assert>
  12d108:	ea000023 	b	12d19c <dhcp_delete_msg+0xcc>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
  12d10c:	e51b3008 	ldr	r3, [fp, #-8]
  12d110:	e593300c 	ldr	r3, [r3, #12]
  12d114:	e3530000 	cmp	r3, #0
  12d118:	1a000006 	bne	12d138 <dhcp_delete_msg+0x68>
  12d11c:	e308069c 	movw	r0, #34460	; 0x869c
  12d120:	e3400014 	movt	r0, #20
  12d124:	ebff57fa 	bl	103114 <rt_kprintf>
  12d128:	e300176f 	movw	r1, #1903	; 0x76f
  12d12c:	e30802a4 	movw	r0, #33444	; 0x82a4
  12d130:	e3400014 	movt	r0, #20
  12d134:	ebff7676 	bl	10ab14 <sys_arch_assert>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
  12d138:	e51b3008 	ldr	r3, [fp, #-8]
  12d13c:	e5933010 	ldr	r3, [r3, #16]
  12d140:	e3530000 	cmp	r3, #0
  12d144:	1a000006 	bne	12d164 <dhcp_delete_msg+0x94>
  12d148:	e30806c4 	movw	r0, #34500	; 0x86c4
  12d14c:	e3400014 	movt	r0, #20
  12d150:	ebff57ef 	bl	103114 <rt_kprintf>
  12d154:	e3a01e77 	mov	r1, #1904	; 0x770
  12d158:	e30802a4 	movw	r0, #33444	; 0x82a4
  12d15c:	e3400014 	movt	r0, #20
  12d160:	ebff766b 	bl	10ab14 <sys_arch_assert>
  if (dhcp->p_out != NULL) {
  12d164:	e51b3008 	ldr	r3, [fp, #-8]
  12d168:	e593300c 	ldr	r3, [r3, #12]
  12d16c:	e3530000 	cmp	r3, #0
  12d170:	0a000003 	beq	12d184 <dhcp_delete_msg+0xb4>
    pbuf_free(dhcp->p_out);
  12d174:	e51b3008 	ldr	r3, [fp, #-8]
  12d178:	e593300c 	ldr	r3, [r3, #12]
  12d17c:	e1a00003 	mov	r0, r3
  12d180:	ebffb671 	bl	11ab4c <pbuf_free>
  }
  dhcp->p_out = NULL;
  12d184:	e51b3008 	ldr	r3, [fp, #-8]
  12d188:	e3a02000 	mov	r2, #0
  12d18c:	e583200c 	str	r2, [r3, #12]
  dhcp->msg_out = NULL;
  12d190:	e51b3008 	ldr	r3, [fp, #-8]
  12d194:	e3a02000 	mov	r2, #0
  12d198:	e5832010 	str	r2, [r3, #16]
}
  12d19c:	e24bd004 	sub	sp, fp, #4
  12d1a0:	e8bd8800 	pop	{fp, pc}

0012d1a4 <dhcp_option_trailer>:
 *
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
  12d1a4:	e92d4800 	push	{fp, lr}
  12d1a8:	e28db004 	add	fp, sp, #4
  12d1ac:	e24dd008 	sub	sp, sp, #8
  12d1b0:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
  12d1b4:	e51b3008 	ldr	r3, [fp, #-8]
  12d1b8:	e3530000 	cmp	r3, #0
  12d1bc:	1a000007 	bne	12d1e0 <dhcp_option_trailer+0x3c>
  12d1c0:	e30806ec 	movw	r0, #34540	; 0x86ec
  12d1c4:	e3400014 	movt	r0, #20
  12d1c8:	ebff57d1 	bl	103114 <rt_kprintf>
  12d1cc:	e3001783 	movw	r1, #1923	; 0x783
  12d1d0:	e30802a4 	movw	r0, #33444	; 0x82a4
  12d1d4:	e3400014 	movt	r0, #20
  12d1d8:	ebff764d 	bl	10ab14 <sys_arch_assert>
  12d1dc:	ea000039 	b	12d2c8 <dhcp_option_trailer+0x124>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
  12d1e0:	e51b3008 	ldr	r3, [fp, #-8]
  12d1e4:	e5933010 	ldr	r3, [r3, #16]
  12d1e8:	e3530000 	cmp	r3, #0
  12d1ec:	1a000006 	bne	12d20c <dhcp_option_trailer+0x68>
  12d1f0:	e3080710 	movw	r0, #34576	; 0x8710
  12d1f4:	e3400014 	movt	r0, #20
  12d1f8:	ebff57c5 	bl	103114 <rt_kprintf>
  12d1fc:	e3001784 	movw	r1, #1924	; 0x784
  12d200:	e30802a4 	movw	r0, #33444	; 0x82a4
  12d204:	e3400014 	movt	r0, #20
  12d208:	ebff7641 	bl	10ab14 <sys_arch_assert>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  12d20c:	e51b3008 	ldr	r3, [fp, #-8]
  12d210:	e1d331b4 	ldrh	r3, [r3, #20]
  12d214:	e3530043 	cmp	r3, #67	; 0x43
  12d218:	9a000006 	bls	12d238 <dhcp_option_trailer+0x94>
  12d21c:	e308073c 	movw	r0, #34620	; 0x873c
  12d220:	e3400014 	movt	r0, #20
  12d224:	ebff57ba 	bl	103114 <rt_kprintf>
  12d228:	e3001785 	movw	r1, #1925	; 0x785
  12d22c:	e30802a4 	movw	r0, #33444	; 0x82a4
  12d230:	e3400014 	movt	r0, #20
  12d234:	ebff7636 	bl	10ab14 <sys_arch_assert>
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
  12d238:	e51b3008 	ldr	r3, [fp, #-8]
  12d23c:	e5932010 	ldr	r2, [r3, #16]
  12d240:	e51b3008 	ldr	r3, [fp, #-8]
  12d244:	e1d331b4 	ldrh	r3, [r3, #20]
  12d248:	e2831001 	add	r1, r3, #1
  12d24c:	e6ff0071 	uxth	r0, r1
  12d250:	e51b1008 	ldr	r1, [fp, #-8]
  12d254:	e1c101b4 	strh	r0, [r1, #20]
  12d258:	e0823003 	add	r3, r2, r3
  12d25c:	e3e02000 	mvn	r2, #0
  12d260:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
  12d264:	ea00000a 	b	12d294 <dhcp_option_trailer+0xf0>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
  12d268:	e51b3008 	ldr	r3, [fp, #-8]
  12d26c:	e5932010 	ldr	r2, [r3, #16]
  12d270:	e51b3008 	ldr	r3, [fp, #-8]
  12d274:	e1d331b4 	ldrh	r3, [r3, #20]
  12d278:	e2831001 	add	r1, r3, #1
  12d27c:	e6ff0071 	uxth	r0, r1
  12d280:	e51b1008 	ldr	r1, [fp, #-8]
  12d284:	e1c101b4 	strh	r0, [r1, #20]
  12d288:	e0823003 	add	r3, r2, r3
  12d28c:	e3a02000 	mov	r2, #0
  12d290:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
  12d294:	e51b3008 	ldr	r3, [fp, #-8]
  12d298:	e1d331b4 	ldrh	r3, [r3, #20]
  12d29c:	e3530043 	cmp	r3, #67	; 0x43
  12d2a0:	9a000004 	bls	12d2b8 <dhcp_option_trailer+0x114>
  12d2a4:	e51b3008 	ldr	r3, [fp, #-8]
  12d2a8:	e1d331b4 	ldrh	r3, [r3, #20]
  12d2ac:	e2033003 	and	r3, r3, #3
  12d2b0:	e3530000 	cmp	r3, #0
  12d2b4:	0a000003 	beq	12d2c8 <dhcp_option_trailer+0x124>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
  12d2b8:	e51b3008 	ldr	r3, [fp, #-8]
  12d2bc:	e1d331b4 	ldrh	r3, [r3, #20]
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
  12d2c0:	e3530043 	cmp	r3, #67	; 0x43
  12d2c4:	9affffe7 	bls	12d268 <dhcp_option_trailer+0xc4>
  }
}
  12d2c8:	e24bd004 	sub	sp, fp, #4
  12d2cc:	e8bd8800 	pop	{fp, pc}

0012d2d0 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
  12d2d0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  12d2d4:	e28db000 	add	fp, sp, #0
  12d2d8:	e24dd014 	sub	sp, sp, #20
  12d2dc:	e50b0010 	str	r0, [fp, #-16]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
  12d2e0:	e51b3010 	ldr	r3, [fp, #-16]
  12d2e4:	e3530000 	cmp	r3, #0
  12d2e8:	0a000013 	beq	12d33c <dhcp_supplied_address+0x6c>
  12d2ec:	e51b3010 	ldr	r3, [fp, #-16]
  12d2f0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12d2f4:	e3530000 	cmp	r3, #0
  12d2f8:	0a00000f 	beq	12d33c <dhcp_supplied_address+0x6c>
    struct dhcp* dhcp = netif_dhcp_data(netif);
  12d2fc:	e51b3010 	ldr	r3, [fp, #-16]
  12d300:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12d304:	e50b3008 	str	r3, [fp, #-8]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING);
  12d308:	e51b3008 	ldr	r3, [fp, #-8]
  12d30c:	e5d33009 	ldrb	r3, [r3, #9]
  12d310:	e353000a 	cmp	r3, #10
  12d314:	0a000003 	beq	12d328 <dhcp_supplied_address+0x58>
  12d318:	e51b3008 	ldr	r3, [fp, #-8]
  12d31c:	e5d33009 	ldrb	r3, [r3, #9]
  12d320:	e3530005 	cmp	r3, #5
  12d324:	1a000001 	bne	12d330 <dhcp_supplied_address+0x60>
  12d328:	e3a03001 	mov	r3, #1
  12d32c:	ea000000 	b	12d334 <dhcp_supplied_address+0x64>
  12d330:	e3a03000 	mov	r3, #0
  12d334:	e6ef3073 	uxtb	r3, r3
  12d338:	ea000000 	b	12d340 <dhcp_supplied_address+0x70>
  }
  return 0;
  12d33c:	e3a03000 	mov	r3, #0
}
  12d340:	e1a00003 	mov	r0, r3
  12d344:	e28bd000 	add	sp, fp, #0
  12d348:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  12d34c:	e12fff1e 	bx	lr

0012d350 <free_etharp_q>:
 *
 * @param q a qeueue of etharp_q_entry's to free
 */
static void
free_etharp_q(struct etharp_q_entry *q)
{
  12d350:	e92d4800 	push	{fp, lr}
  12d354:	e28db004 	add	fp, sp, #4
  12d358:	e24dd010 	sub	sp, sp, #16
  12d35c:	e50b0010 	str	r0, [fp, #-16]
  struct etharp_q_entry *r;
  LWIP_ASSERT("q != NULL", q != NULL);
  12d360:	e51b3010 	ldr	r3, [fp, #-16]
  12d364:	e3530000 	cmp	r3, #0
  12d368:	1a000006 	bne	12d388 <free_etharp_q+0x38>
  12d36c:	e308077c 	movw	r0, #34684	; 0x877c
  12d370:	e3400014 	movt	r0, #20
  12d374:	ebff5766 	bl	103114 <rt_kprintf>
  12d378:	e3a01097 	mov	r1, #151	; 0x97
  12d37c:	e3080788 	movw	r0, #34696	; 0x8788
  12d380:	e3400014 	movt	r0, #20
  12d384:	ebff75e2 	bl	10ab14 <sys_arch_assert>
  LWIP_ASSERT("q->p != NULL", q->p != NULL);
  12d388:	e51b3010 	ldr	r3, [fp, #-16]
  12d38c:	e5933004 	ldr	r3, [r3, #4]
  12d390:	e3530000 	cmp	r3, #0
  12d394:	1a00001e 	bne	12d414 <free_etharp_q+0xc4>
  12d398:	e30807bc 	movw	r0, #34748	; 0x87bc
  12d39c:	e3400014 	movt	r0, #20
  12d3a0:	ebff575b 	bl	103114 <rt_kprintf>
  12d3a4:	e3a01098 	mov	r1, #152	; 0x98
  12d3a8:	e3080788 	movw	r0, #34696	; 0x8788
  12d3ac:	e3400014 	movt	r0, #20
  12d3b0:	ebff75d7 	bl	10ab14 <sys_arch_assert>
  while (q) {
  12d3b4:	ea000016 	b	12d414 <free_etharp_q+0xc4>
    r = q;
  12d3b8:	e51b3010 	ldr	r3, [fp, #-16]
  12d3bc:	e50b3008 	str	r3, [fp, #-8]
    q = q->next;
  12d3c0:	e51b3010 	ldr	r3, [fp, #-16]
  12d3c4:	e5933000 	ldr	r3, [r3]
  12d3c8:	e50b3010 	str	r3, [fp, #-16]
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
  12d3cc:	e51b3008 	ldr	r3, [fp, #-8]
  12d3d0:	e5933004 	ldr	r3, [r3, #4]
  12d3d4:	e3530000 	cmp	r3, #0
  12d3d8:	1a000006 	bne	12d3f8 <free_etharp_q+0xa8>
  12d3dc:	e30807cc 	movw	r0, #34764	; 0x87cc
  12d3e0:	e3400014 	movt	r0, #20
  12d3e4:	ebff574a 	bl	103114 <rt_kprintf>
  12d3e8:	e3a0109c 	mov	r1, #156	; 0x9c
  12d3ec:	e3080788 	movw	r0, #34696	; 0x8788
  12d3f0:	e3400014 	movt	r0, #20
  12d3f4:	ebff75c6 	bl	10ab14 <sys_arch_assert>
    pbuf_free(r->p);
  12d3f8:	e51b3008 	ldr	r3, [fp, #-8]
  12d3fc:	e5933004 	ldr	r3, [r3, #4]
  12d400:	e1a00003 	mov	r0, r3
  12d404:	ebffb5d0 	bl	11ab4c <pbuf_free>
    memp_free(MEMP_ARP_QUEUE, r);
  12d408:	e51b1008 	ldr	r1, [fp, #-8]
  12d40c:	e3a0000b 	mov	r0, #11
  12d410:	ebffaebf 	bl	118f14 <memp_free>
  while (q) {
  12d414:	e51b3010 	ldr	r3, [fp, #-16]
  12d418:	e3530000 	cmp	r3, #0
  12d41c:	1affffe5 	bne	12d3b8 <free_etharp_q+0x68>
  }
}
  12d420:	e320f000 	nop	{0}
  12d424:	e24bd004 	sub	sp, fp, #4
  12d428:	e8bd8800 	pop	{fp, pc}

0012d42c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
  12d42c:	e92d4800 	push	{fp, lr}
  12d430:	e28db004 	add	fp, sp, #4
  12d434:	e24dd008 	sub	sp, sp, #8
  12d438:	e50b0008 	str	r0, [fp, #-8]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
  12d43c:	e30e3260 	movw	r3, #57952	; 0xe260
  12d440:	e3403014 	movt	r3, #20
  12d444:	e51b2008 	ldr	r2, [fp, #-8]
  12d448:	e3a01018 	mov	r1, #24
  12d44c:	e0020291 	mul	r2, r1, r2
  12d450:	e0833002 	add	r3, r3, r2
  12d454:	e5933000 	ldr	r3, [r3]
  12d458:	e3530000 	cmp	r3, #0
  12d45c:	0a000010 	beq	12d4a4 <etharp_free_entry+0x78>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
  12d460:	e30e3260 	movw	r3, #57952	; 0xe260
  12d464:	e3403014 	movt	r3, #20
  12d468:	e51b2008 	ldr	r2, [fp, #-8]
  12d46c:	e3a01018 	mov	r1, #24
  12d470:	e0020291 	mul	r2, r1, r2
  12d474:	e0833002 	add	r3, r3, r2
  12d478:	e5933000 	ldr	r3, [r3]
  12d47c:	e1a00003 	mov	r0, r3
  12d480:	ebffffb2 	bl	12d350 <free_etharp_q>
    arp_table[i].q = NULL;
  12d484:	e30e3260 	movw	r3, #57952	; 0xe260
  12d488:	e3403014 	movt	r3, #20
  12d48c:	e51b2008 	ldr	r2, [fp, #-8]
  12d490:	e3a01018 	mov	r1, #24
  12d494:	e0020291 	mul	r2, r1, r2
  12d498:	e0833002 	add	r3, r3, r2
  12d49c:	e3a02000 	mov	r2, #0
  12d4a0:	e5832000 	str	r2, [r3]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
  12d4a4:	e30e3260 	movw	r3, #57952	; 0xe260
  12d4a8:	e3403014 	movt	r3, #20
  12d4ac:	e51b2008 	ldr	r2, [fp, #-8]
  12d4b0:	e3a01018 	mov	r1, #24
  12d4b4:	e0020291 	mul	r2, r1, r2
  12d4b8:	e0833002 	add	r3, r3, r2
  12d4bc:	e2833014 	add	r3, r3, #20
  12d4c0:	e3a02000 	mov	r2, #0
  12d4c4:	e5c32000 	strb	r2, [r3]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
  12d4c8:	e320f000 	nop	{0}
  12d4cc:	e24bd004 	sub	sp, fp, #4
  12d4d0:	e8bd8800 	pop	{fp, pc}

0012d4d4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
  12d4d4:	e92d4800 	push	{fp, lr}
  12d4d8:	e28db004 	add	fp, sp, #4
  12d4dc:	e24dd008 	sub	sp, sp, #8
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  12d4e0:	e3a03000 	mov	r3, #0
  12d4e4:	e54b3005 	strb	r3, [fp, #-5]
  12d4e8:	ea000084 	b	12d700 <etharp_tmr+0x22c>
    u8_t state = arp_table[i].state;
  12d4ec:	e55b2005 	ldrb	r2, [fp, #-5]
  12d4f0:	e30e3260 	movw	r3, #57952	; 0xe260
  12d4f4:	e3403014 	movt	r3, #20
  12d4f8:	e3a01018 	mov	r1, #24
  12d4fc:	e0020291 	mul	r2, r1, r2
  12d500:	e0833002 	add	r3, r3, r2
  12d504:	e2833014 	add	r3, r3, #20
  12d508:	e5d33000 	ldrb	r3, [r3]
  12d50c:	e54b3006 	strb	r3, [fp, #-6]
    if (state != ETHARP_STATE_EMPTY
  12d510:	e55b3006 	ldrb	r3, [fp, #-6]
  12d514:	e3530000 	cmp	r3, #0
  12d518:	0a000075 	beq	12d6f4 <etharp_tmr+0x220>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
  12d51c:	e55b2005 	ldrb	r2, [fp, #-5]
  12d520:	e30e3260 	movw	r3, #57952	; 0xe260
  12d524:	e3403014 	movt	r3, #20
  12d528:	e3a01018 	mov	r1, #24
  12d52c:	e0010291 	mul	r1, r1, r2
  12d530:	e0833001 	add	r3, r3, r1
  12d534:	e2833012 	add	r3, r3, #18
  12d538:	e1d330b0 	ldrh	r3, [r3]
  12d53c:	e2833001 	add	r3, r3, #1
  12d540:	e6ff1073 	uxth	r1, r3
  12d544:	e30e3260 	movw	r3, #57952	; 0xe260
  12d548:	e3403014 	movt	r3, #20
  12d54c:	e3a00018 	mov	r0, #24
  12d550:	e0020290 	mul	r2, r0, r2
  12d554:	e0833002 	add	r3, r3, r2
  12d558:	e2833012 	add	r3, r3, #18
  12d55c:	e1c310b0 	strh	r1, [r3]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
  12d560:	e55b2005 	ldrb	r2, [fp, #-5]
  12d564:	e30e3260 	movw	r3, #57952	; 0xe260
  12d568:	e3403014 	movt	r3, #20
  12d56c:	e3a01018 	mov	r1, #24
  12d570:	e0020291 	mul	r2, r1, r2
  12d574:	e0833002 	add	r3, r3, r2
  12d578:	e2833012 	add	r3, r3, #18
  12d57c:	e1d330b0 	ldrh	r3, [r3]
  12d580:	e3530f4b 	cmp	r3, #300	; 0x12c
  12d584:	2a000013 	bcs	12d5d8 <etharp_tmr+0x104>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
  12d588:	e55b2005 	ldrb	r2, [fp, #-5]
  12d58c:	e30e3260 	movw	r3, #57952	; 0xe260
  12d590:	e3403014 	movt	r3, #20
  12d594:	e3a01018 	mov	r1, #24
  12d598:	e0020291 	mul	r2, r1, r2
  12d59c:	e0833002 	add	r3, r3, r2
  12d5a0:	e2833014 	add	r3, r3, #20
  12d5a4:	e5d33000 	ldrb	r3, [r3]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
  12d5a8:	e3530001 	cmp	r3, #1
  12d5ac:	1a00000d 	bne	12d5e8 <etharp_tmr+0x114>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
  12d5b0:	e55b2005 	ldrb	r2, [fp, #-5]
  12d5b4:	e30e3260 	movw	r3, #57952	; 0xe260
  12d5b8:	e3403014 	movt	r3, #20
  12d5bc:	e3a01018 	mov	r1, #24
  12d5c0:	e0020291 	mul	r2, r1, r2
  12d5c4:	e0833002 	add	r3, r3, r2
  12d5c8:	e2833012 	add	r3, r3, #18
  12d5cc:	e1d330b0 	ldrh	r3, [r3]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
  12d5d0:	e3530004 	cmp	r3, #4
  12d5d4:	9a000003 	bls	12d5e8 <etharp_tmr+0x114>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
  12d5d8:	e55b3005 	ldrb	r3, [fp, #-5]
  12d5dc:	e1a00003 	mov	r0, r3
  12d5e0:	ebffff91 	bl	12d42c <etharp_free_entry>
  12d5e4:	ea000042 	b	12d6f4 <etharp_tmr+0x220>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
  12d5e8:	e55b2005 	ldrb	r2, [fp, #-5]
  12d5ec:	e30e3260 	movw	r3, #57952	; 0xe260
  12d5f0:	e3403014 	movt	r3, #20
  12d5f4:	e3a01018 	mov	r1, #24
  12d5f8:	e0020291 	mul	r2, r1, r2
  12d5fc:	e0833002 	add	r3, r3, r2
  12d600:	e2833014 	add	r3, r3, #20
  12d604:	e5d33000 	ldrb	r3, [r3]
  12d608:	e3530003 	cmp	r3, #3
  12d60c:	1a000009 	bne	12d638 <etharp_tmr+0x164>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
  12d610:	e55b2005 	ldrb	r2, [fp, #-5]
  12d614:	e30e3260 	movw	r3, #57952	; 0xe260
  12d618:	e3403014 	movt	r3, #20
  12d61c:	e3a01018 	mov	r1, #24
  12d620:	e0020291 	mul	r2, r1, r2
  12d624:	e0833002 	add	r3, r3, r2
  12d628:	e2833014 	add	r3, r3, #20
  12d62c:	e3a02004 	mov	r2, #4
  12d630:	e5c32000 	strb	r2, [r3]
  12d634:	ea00002e 	b	12d6f4 <etharp_tmr+0x220>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
  12d638:	e55b2005 	ldrb	r2, [fp, #-5]
  12d63c:	e30e3260 	movw	r3, #57952	; 0xe260
  12d640:	e3403014 	movt	r3, #20
  12d644:	e3a01018 	mov	r1, #24
  12d648:	e0020291 	mul	r2, r1, r2
  12d64c:	e0833002 	add	r3, r3, r2
  12d650:	e2833014 	add	r3, r3, #20
  12d654:	e5d33000 	ldrb	r3, [r3]
  12d658:	e3530004 	cmp	r3, #4
  12d65c:	1a000009 	bne	12d688 <etharp_tmr+0x1b4>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
  12d660:	e55b2005 	ldrb	r2, [fp, #-5]
  12d664:	e30e3260 	movw	r3, #57952	; 0xe260
  12d668:	e3403014 	movt	r3, #20
  12d66c:	e3a01018 	mov	r1, #24
  12d670:	e0020291 	mul	r2, r1, r2
  12d674:	e0833002 	add	r3, r3, r2
  12d678:	e2833014 	add	r3, r3, #20
  12d67c:	e3a02002 	mov	r2, #2
  12d680:	e5c32000 	strb	r2, [r3]
  12d684:	ea00001a 	b	12d6f4 <etharp_tmr+0x220>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
  12d688:	e55b2005 	ldrb	r2, [fp, #-5]
  12d68c:	e30e3260 	movw	r3, #57952	; 0xe260
  12d690:	e3403014 	movt	r3, #20
  12d694:	e3a01018 	mov	r1, #24
  12d698:	e0020291 	mul	r2, r1, r2
  12d69c:	e0833002 	add	r3, r3, r2
  12d6a0:	e2833014 	add	r3, r3, #20
  12d6a4:	e5d33000 	ldrb	r3, [r3]
  12d6a8:	e3530001 	cmp	r3, #1
  12d6ac:	1a000010 	bne	12d6f4 <etharp_tmr+0x220>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
  12d6b0:	e55b2005 	ldrb	r2, [fp, #-5]
  12d6b4:	e30e3260 	movw	r3, #57952	; 0xe260
  12d6b8:	e3403014 	movt	r3, #20
  12d6bc:	e3a01018 	mov	r1, #24
  12d6c0:	e0020291 	mul	r2, r1, r2
  12d6c4:	e0833002 	add	r3, r3, r2
  12d6c8:	e2833008 	add	r3, r3, #8
  12d6cc:	e5930000 	ldr	r0, [r3]
  12d6d0:	e55b3005 	ldrb	r3, [fp, #-5]
  12d6d4:	e3a02018 	mov	r2, #24
  12d6d8:	e0020392 	mul	r2, r2, r3
  12d6dc:	e30e3260 	movw	r3, #57952	; 0xe260
  12d6e0:	e3403014 	movt	r3, #20
  12d6e4:	e0823003 	add	r3, r2, r3
  12d6e8:	e2833004 	add	r3, r3, #4
  12d6ec:	e1a01003 	mov	r1, r3
  12d6f0:	eb00066b 	bl	12f0a4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  12d6f4:	e55b3005 	ldrb	r3, [fp, #-5]
  12d6f8:	e2833001 	add	r3, r3, #1
  12d6fc:	e54b3005 	strb	r3, [fp, #-5]
  12d700:	e55b3005 	ldrb	r3, [fp, #-5]
  12d704:	e3530009 	cmp	r3, #9
  12d708:	9affff77 	bls	12d4ec <etharp_tmr+0x18>
      }
    }
  }
}
  12d70c:	e320f000 	nop	{0}
  12d710:	e24bd004 	sub	sp, fp, #4
  12d714:	e8bd8800 	pop	{fp, pc}

0012d718 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
  12d718:	e92d4800 	push	{fp, lr}
  12d71c:	e28db004 	add	fp, sp, #4
  12d720:	e24dd020 	sub	sp, sp, #32
  12d724:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12d728:	e1a03001 	mov	r3, r1
  12d72c:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  12d730:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  12d734:	e3a0300a 	mov	r3, #10
  12d738:	e54b3005 	strb	r3, [fp, #-5]
  12d73c:	e3a0300a 	mov	r3, #10
  12d740:	e54b3006 	strb	r3, [fp, #-6]
  s8_t empty = ARP_TABLE_SIZE;
  12d744:	e3a0300a 	mov	r3, #10
  12d748:	e54b3007 	strb	r3, [fp, #-7]
  u8_t i = 0;
  12d74c:	e3a03000 	mov	r3, #0
  12d750:	e54b3008 	strb	r3, [fp, #-8]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
  12d754:	e3a0300a 	mov	r3, #10
  12d758:	e54b3009 	strb	r3, [fp, #-9]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
  12d75c:	e3a03000 	mov	r3, #0
  12d760:	e14b30bc 	strh	r3, [fp, #-12]
  12d764:	e3a03000 	mov	r3, #0
  12d768:	e14b30be 	strh	r3, [fp, #-14]
  12d76c:	e3a03000 	mov	r3, #0
  12d770:	e14b31b0 	strh	r3, [fp, #-16]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  12d774:	e3a03000 	mov	r3, #0
  12d778:	e54b3008 	strb	r3, [fp, #-8]
  12d77c:	ea000088 	b	12d9a4 <etharp_find_entry+0x28c>
    u8_t state = arp_table[i].state;
  12d780:	e55b2008 	ldrb	r2, [fp, #-8]
  12d784:	e30e3260 	movw	r3, #57952	; 0xe260
  12d788:	e3403014 	movt	r3, #20
  12d78c:	e3a01018 	mov	r1, #24
  12d790:	e0020291 	mul	r2, r1, r2
  12d794:	e0833002 	add	r3, r3, r2
  12d798:	e2833014 	add	r3, r3, #20
  12d79c:	e5d33000 	ldrb	r3, [r3]
  12d7a0:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
  12d7a4:	e15b30d7 	ldrsb	r3, [fp, #-7]
  12d7a8:	e353000a 	cmp	r3, #10
  12d7ac:	1a000005 	bne	12d7c8 <etharp_find_entry+0xb0>
  12d7b0:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  12d7b4:	e3530000 	cmp	r3, #0
  12d7b8:	1a000002 	bne	12d7c8 <etharp_find_entry+0xb0>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
  12d7bc:	e55b3008 	ldrb	r3, [fp, #-8]
  12d7c0:	e54b3007 	strb	r3, [fp, #-7]
  12d7c4:	ea000073 	b	12d998 <etharp_find_entry+0x280>
    } else if (state != ETHARP_STATE_EMPTY) {
  12d7c8:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  12d7cc:	e3530000 	cmp	r3, #0
  12d7d0:	0a000070 	beq	12d998 <etharp_find_entry+0x280>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
  12d7d4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  12d7d8:	e3530001 	cmp	r3, #1
  12d7dc:	0a000009 	beq	12d808 <etharp_find_entry+0xf0>
  12d7e0:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  12d7e4:	e3530001 	cmp	r3, #1
  12d7e8:	8a000006 	bhi	12d808 <etharp_find_entry+0xf0>
  12d7ec:	e30807dc 	movw	r0, #34780	; 0x87dc
  12d7f0:	e3400014 	movt	r0, #20
  12d7f4:	ebff5646 	bl	103114 <rt_kprintf>
  12d7f8:	e3001126 	movw	r1, #294	; 0x126
  12d7fc:	e3080788 	movw	r0, #34696	; 0x8788
  12d800:	e3400014 	movt	r0, #20
  12d804:	ebff74c2 	bl	10ab14 <sys_arch_assert>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
  12d808:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12d80c:	e3530000 	cmp	r3, #0
  12d810:	0a00000d 	beq	12d84c <etharp_find_entry+0x134>
  12d814:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12d818:	e5932000 	ldr	r2, [r3]
  12d81c:	e55b1008 	ldrb	r1, [fp, #-8]
  12d820:	e30e3260 	movw	r3, #57952	; 0xe260
  12d824:	e3403014 	movt	r3, #20
  12d828:	e3a00018 	mov	r0, #24
  12d82c:	e0010190 	mul	r1, r0, r1
  12d830:	e0833001 	add	r3, r3, r1
  12d834:	e2833004 	add	r3, r3, #4
  12d838:	e5933000 	ldr	r3, [r3]
  12d83c:	e1520003 	cmp	r2, r3
  12d840:	1a000001 	bne	12d84c <etharp_find_entry+0x134>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
  12d844:	e15b30d8 	ldrsb	r3, [fp, #-8]
  12d848:	ea0000ce 	b	12db88 <etharp_find_entry+0x470>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
  12d84c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  12d850:	e3530001 	cmp	r3, #1
  12d854:	1a000036 	bne	12d934 <etharp_find_entry+0x21c>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
  12d858:	e55b2008 	ldrb	r2, [fp, #-8]
  12d85c:	e30e3260 	movw	r3, #57952	; 0xe260
  12d860:	e3403014 	movt	r3, #20
  12d864:	e3a01018 	mov	r1, #24
  12d868:	e0020291 	mul	r2, r1, r2
  12d86c:	e0833002 	add	r3, r3, r2
  12d870:	e5933000 	ldr	r3, [r3]
  12d874:	e3530000 	cmp	r3, #0
  12d878:	0a000016 	beq	12d8d8 <etharp_find_entry+0x1c0>
          if (arp_table[i].ctime >= age_queue) {
  12d87c:	e55b2008 	ldrb	r2, [fp, #-8]
  12d880:	e30e3260 	movw	r3, #57952	; 0xe260
  12d884:	e3403014 	movt	r3, #20
  12d888:	e3a01018 	mov	r1, #24
  12d88c:	e0020291 	mul	r2, r1, r2
  12d890:	e0833002 	add	r3, r3, r2
  12d894:	e2833012 	add	r3, r3, #18
  12d898:	e1d330b0 	ldrh	r3, [r3]
  12d89c:	e15b20bc 	ldrh	r2, [fp, #-12]
  12d8a0:	e1520003 	cmp	r2, r3
  12d8a4:	8a00003b 	bhi	12d998 <etharp_find_entry+0x280>
            old_queue = i;
  12d8a8:	e55b3008 	ldrb	r3, [fp, #-8]
  12d8ac:	e54b3009 	strb	r3, [fp, #-9]
            age_queue = arp_table[i].ctime;
  12d8b0:	e55b2008 	ldrb	r2, [fp, #-8]
  12d8b4:	e30e3260 	movw	r3, #57952	; 0xe260
  12d8b8:	e3403014 	movt	r3, #20
  12d8bc:	e3a01018 	mov	r1, #24
  12d8c0:	e0020291 	mul	r2, r1, r2
  12d8c4:	e0833002 	add	r3, r3, r2
  12d8c8:	e2833012 	add	r3, r3, #18
  12d8cc:	e1d330b0 	ldrh	r3, [r3]
  12d8d0:	e14b30bc 	strh	r3, [fp, #-12]
  12d8d4:	ea00002f 	b	12d998 <etharp_find_entry+0x280>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
  12d8d8:	e55b2008 	ldrb	r2, [fp, #-8]
  12d8dc:	e30e3260 	movw	r3, #57952	; 0xe260
  12d8e0:	e3403014 	movt	r3, #20
  12d8e4:	e3a01018 	mov	r1, #24
  12d8e8:	e0020291 	mul	r2, r1, r2
  12d8ec:	e0833002 	add	r3, r3, r2
  12d8f0:	e2833012 	add	r3, r3, #18
  12d8f4:	e1d330b0 	ldrh	r3, [r3]
  12d8f8:	e15b20be 	ldrh	r2, [fp, #-14]
  12d8fc:	e1520003 	cmp	r2, r3
  12d900:	8a000024 	bhi	12d998 <etharp_find_entry+0x280>
            old_pending = i;
  12d904:	e55b3008 	ldrb	r3, [fp, #-8]
  12d908:	e54b3005 	strb	r3, [fp, #-5]
            age_pending = arp_table[i].ctime;
  12d90c:	e55b2008 	ldrb	r2, [fp, #-8]
  12d910:	e30e3260 	movw	r3, #57952	; 0xe260
  12d914:	e3403014 	movt	r3, #20
  12d918:	e3a01018 	mov	r1, #24
  12d91c:	e0020291 	mul	r2, r1, r2
  12d920:	e0833002 	add	r3, r3, r2
  12d924:	e2833012 	add	r3, r3, #18
  12d928:	e1d330b0 	ldrh	r3, [r3]
  12d92c:	e14b30be 	strh	r3, [fp, #-14]
  12d930:	ea000018 	b	12d998 <etharp_find_entry+0x280>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
  12d934:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  12d938:	e3530001 	cmp	r3, #1
  12d93c:	9a000015 	bls	12d998 <etharp_find_entry+0x280>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
  12d940:	e55b2008 	ldrb	r2, [fp, #-8]
  12d944:	e30e3260 	movw	r3, #57952	; 0xe260
  12d948:	e3403014 	movt	r3, #20
  12d94c:	e3a01018 	mov	r1, #24
  12d950:	e0020291 	mul	r2, r1, r2
  12d954:	e0833002 	add	r3, r3, r2
  12d958:	e2833012 	add	r3, r3, #18
  12d95c:	e1d330b0 	ldrh	r3, [r3]
  12d960:	e15b21b0 	ldrh	r2, [fp, #-16]
  12d964:	e1520003 	cmp	r2, r3
  12d968:	8a00000a 	bhi	12d998 <etharp_find_entry+0x280>
            old_stable = i;
  12d96c:	e55b3008 	ldrb	r3, [fp, #-8]
  12d970:	e54b3006 	strb	r3, [fp, #-6]
            age_stable = arp_table[i].ctime;
  12d974:	e55b2008 	ldrb	r2, [fp, #-8]
  12d978:	e30e3260 	movw	r3, #57952	; 0xe260
  12d97c:	e3403014 	movt	r3, #20
  12d980:	e3a01018 	mov	r1, #24
  12d984:	e0020291 	mul	r2, r1, r2
  12d988:	e0833002 	add	r3, r3, r2
  12d98c:	e2833012 	add	r3, r3, #18
  12d990:	e1d330b0 	ldrh	r3, [r3]
  12d994:	e14b31b0 	strh	r3, [fp, #-16]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  12d998:	e55b3008 	ldrb	r3, [fp, #-8]
  12d99c:	e2833001 	add	r3, r3, #1
  12d9a0:	e54b3008 	strb	r3, [fp, #-8]
  12d9a4:	e55b3008 	ldrb	r3, [fp, #-8]
  12d9a8:	e3530009 	cmp	r3, #9
  12d9ac:	9affff73 	bls	12d780 <etharp_find_entry+0x68>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
  12d9b0:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
  12d9b4:	e2033002 	and	r3, r3, #2
  12d9b8:	e3530000 	cmp	r3, #0
  12d9bc:	1a000006 	bne	12d9dc <etharp_find_entry+0x2c4>
  12d9c0:	e15b30d7 	ldrsb	r3, [fp, #-7]
  12d9c4:	e353000a 	cmp	r3, #10
  12d9c8:	1a000005 	bne	12d9e4 <etharp_find_entry+0x2cc>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
  12d9cc:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
  12d9d0:	e2033001 	and	r3, r3, #1
  12d9d4:	e3530000 	cmp	r3, #0
  12d9d8:	1a000001 	bne	12d9e4 <etharp_find_entry+0x2cc>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
  12d9dc:	e3e03000 	mvn	r3, #0
  12d9e0:	ea000068 	b	12db88 <etharp_find_entry+0x470>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
  12d9e4:	e15b30d7 	ldrsb	r3, [fp, #-7]
  12d9e8:	e3530009 	cmp	r3, #9
  12d9ec:	ca000002 	bgt	12d9fc <etharp_find_entry+0x2e4>
    i = empty;
  12d9f0:	e55b3007 	ldrb	r3, [fp, #-7]
  12d9f4:	e54b3008 	strb	r3, [fp, #-8]
  12d9f8:	ea000030 	b	12dac0 <etharp_find_entry+0x3a8>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
  12d9fc:	e15b30d6 	ldrsb	r3, [fp, #-6]
  12da00:	e3530009 	cmp	r3, #9
  12da04:	ca000012 	bgt	12da54 <etharp_find_entry+0x33c>
      /* recycle oldest stable*/
      i = old_stable;
  12da08:	e55b3006 	ldrb	r3, [fp, #-6]
  12da0c:	e54b3008 	strb	r3, [fp, #-8]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
  12da10:	e55b2008 	ldrb	r2, [fp, #-8]
  12da14:	e30e3260 	movw	r3, #57952	; 0xe260
  12da18:	e3403014 	movt	r3, #20
  12da1c:	e3a01018 	mov	r1, #24
  12da20:	e0020291 	mul	r2, r1, r2
  12da24:	e0833002 	add	r3, r3, r2
  12da28:	e5933000 	ldr	r3, [r3]
  12da2c:	e3530000 	cmp	r3, #0
  12da30:	0a000015 	beq	12da8c <etharp_find_entry+0x374>
  12da34:	e308081c 	movw	r0, #34844	; 0x881c
  12da38:	e3400014 	movt	r0, #20
  12da3c:	ebff55b4 	bl	103114 <rt_kprintf>
  12da40:	e300116f 	movw	r1, #367	; 0x16f
  12da44:	e3080788 	movw	r0, #34696	; 0x8788
  12da48:	e3400014 	movt	r0, #20
  12da4c:	ebff7430 	bl	10ab14 <sys_arch_assert>
  12da50:	ea00000d 	b	12da8c <etharp_find_entry+0x374>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
  12da54:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12da58:	e3530009 	cmp	r3, #9
  12da5c:	ca000002 	bgt	12da6c <etharp_find_entry+0x354>
      /* recycle oldest pending */
      i = old_pending;
  12da60:	e55b3005 	ldrb	r3, [fp, #-5]
  12da64:	e54b3008 	strb	r3, [fp, #-8]
  12da68:	ea000007 	b	12da8c <etharp_find_entry+0x374>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
  12da6c:	e15b30d9 	ldrsb	r3, [fp, #-9]
  12da70:	e3530009 	cmp	r3, #9
  12da74:	ca000002 	bgt	12da84 <etharp_find_entry+0x36c>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
  12da78:	e55b3009 	ldrb	r3, [fp, #-9]
  12da7c:	e54b3008 	strb	r3, [fp, #-8]
  12da80:	ea000001 	b	12da8c <etharp_find_entry+0x374>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
  12da84:	e3e03000 	mvn	r3, #0
  12da88:	ea00003e 	b	12db88 <etharp_find_entry+0x470>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  12da8c:	e55b3008 	ldrb	r3, [fp, #-8]
  12da90:	e3530009 	cmp	r3, #9
  12da94:	9a000006 	bls	12dab4 <etharp_find_entry+0x39c>
  12da98:	e3080834 	movw	r0, #34868	; 0x8834
  12da9c:	e3400014 	movt	r0, #20
  12daa0:	ebff559b 	bl	103114 <rt_kprintf>
  12daa4:	e3001181 	movw	r1, #385	; 0x181
  12daa8:	e3080788 	movw	r0, #34696	; 0x8788
  12daac:	e3400014 	movt	r0, #20
  12dab0:	ebff7417 	bl	10ab14 <sys_arch_assert>
    etharp_free_entry(i);
  12dab4:	e55b3008 	ldrb	r3, [fp, #-8]
  12dab8:	e1a00003 	mov	r0, r3
  12dabc:	ebfffe5a 	bl	12d42c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  12dac0:	e55b3008 	ldrb	r3, [fp, #-8]
  12dac4:	e3530009 	cmp	r3, #9
  12dac8:	9a000006 	bls	12dae8 <etharp_find_entry+0x3d0>
  12dacc:	e3080834 	movw	r0, #34868	; 0x8834
  12dad0:	e3400014 	movt	r0, #20
  12dad4:	ebff558e 	bl	103114 <rt_kprintf>
  12dad8:	e3001185 	movw	r1, #389	; 0x185
  12dadc:	e3080788 	movw	r0, #34696	; 0x8788
  12dae0:	e3400014 	movt	r0, #20
  12dae4:	ebff740a 	bl	10ab14 <sys_arch_assert>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
  12dae8:	e55b2008 	ldrb	r2, [fp, #-8]
  12daec:	e30e3260 	movw	r3, #57952	; 0xe260
  12daf0:	e3403014 	movt	r3, #20
  12daf4:	e3a01018 	mov	r1, #24
  12daf8:	e0020291 	mul	r2, r1, r2
  12dafc:	e0833002 	add	r3, r3, r2
  12db00:	e2833014 	add	r3, r3, #20
  12db04:	e5d33000 	ldrb	r3, [r3]
  12db08:	e3530000 	cmp	r3, #0
  12db0c:	0a000006 	beq	12db2c <etharp_find_entry+0x414>
  12db10:	e3080848 	movw	r0, #34888	; 0x8848
  12db14:	e3400014 	movt	r0, #20
  12db18:	ebff557d 	bl	103114 <rt_kprintf>
  12db1c:	e3001187 	movw	r1, #391	; 0x187
  12db20:	e3080788 	movw	r0, #34696	; 0x8788
  12db24:	e3400014 	movt	r0, #20
  12db28:	ebff73f9 	bl	10ab14 <sys_arch_assert>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
  12db2c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12db30:	e3530000 	cmp	r3, #0
  12db34:	0a000009 	beq	12db60 <etharp_find_entry+0x448>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
  12db38:	e55b1008 	ldrb	r1, [fp, #-8]
  12db3c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12db40:	e5932000 	ldr	r2, [r3]
  12db44:	e30e3260 	movw	r3, #57952	; 0xe260
  12db48:	e3403014 	movt	r3, #20
  12db4c:	e3a00018 	mov	r0, #24
  12db50:	e0010190 	mul	r1, r0, r1
  12db54:	e0833001 	add	r3, r3, r1
  12db58:	e2833004 	add	r3, r3, #4
  12db5c:	e5832000 	str	r2, [r3]
  }
  arp_table[i].ctime = 0;
  12db60:	e55b2008 	ldrb	r2, [fp, #-8]
  12db64:	e30e3260 	movw	r3, #57952	; 0xe260
  12db68:	e3403014 	movt	r3, #20
  12db6c:	e3a01018 	mov	r1, #24
  12db70:	e0020291 	mul	r2, r1, r2
  12db74:	e0833002 	add	r3, r3, r2
  12db78:	e2833012 	add	r3, r3, #18
  12db7c:	e3a02000 	mov	r2, #0
  12db80:	e1c320b0 	strh	r2, [r3]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
  12db84:	e15b30d8 	ldrsb	r3, [fp, #-8]
}
  12db88:	e1a00003 	mov	r0, r3
  12db8c:	e24bd004 	sub	sp, fp, #4
  12db90:	e8bd8800 	pop	{fp, pc}

0012db94 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
  12db94:	e92d4800 	push	{fp, lr}
  12db98:	e28db004 	add	fp, sp, #4
  12db9c:	e24dd028 	sub	sp, sp, #40	; 0x28
  12dba0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12dba4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  12dba8:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  12dbac:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
  12dbb0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12dbb4:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
  12dbb8:	e3530006 	cmp	r3, #6
  12dbbc:	0a000006 	beq	12dbdc <etharp_update_arp_entry+0x48>
  12dbc0:	e3080874 	movw	r0, #34932	; 0x8874
  12dbc4:	e3400014 	movt	r0, #20
  12dbc8:	ebff5551 	bl	103114 <rt_kprintf>
  12dbcc:	e30011ab 	movw	r1, #427	; 0x1ab
  12dbd0:	e3080788 	movw	r0, #34696	; 0x8788
  12dbd4:	e3400014 	movt	r0, #20
  12dbd8:	ebff73cd 	bl	10ab14 <sys_arch_assert>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
  12dbdc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12dbe0:	e3530000 	cmp	r3, #0
  12dbe4:	0a000010 	beq	12dc2c <etharp_update_arp_entry+0x98>
  12dbe8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12dbec:	e5933000 	ldr	r3, [r3]
  12dbf0:	e3530000 	cmp	r3, #0
  12dbf4:	0a00000c 	beq	12dc2c <etharp_update_arp_entry+0x98>
      ip4_addr_isbroadcast(ipaddr, netif) ||
  12dbf8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12dbfc:	e5933000 	ldr	r3, [r3]
  12dc00:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  12dc04:	e1a00003 	mov	r0, r3
  12dc08:	eb00112a 	bl	1320b8 <ip4_addr_isbroadcast_u32>
  12dc0c:	e1a03000 	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
  12dc10:	e3530000 	cmp	r3, #0
  12dc14:	1a000004 	bne	12dc2c <etharp_update_arp_entry+0x98>
      ip4_addr_ismulticast(ipaddr)) {
  12dc18:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12dc1c:	e5933000 	ldr	r3, [r3]
  12dc20:	e20330f0 	and	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
  12dc24:	e35300e0 	cmp	r3, #224	; 0xe0
  12dc28:	1a000001 	bne	12dc34 <etharp_update_arp_entry+0xa0>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
  12dc2c:	e3e0300f 	mvn	r3, #15
  12dc30:	ea00005e 	b	12ddb0 <etharp_update_arp_entry+0x21c>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
  12dc34:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  12dc38:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  12dc3c:	e1a01003 	mov	r1, r3
  12dc40:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12dc44:	ebfffeb3 	bl	12d718 <etharp_find_entry>
  12dc48:	e1a03000 	mov	r3, r0
  12dc4c:	e54b3005 	strb	r3, [fp, #-5]
  /* bail out if no entry could be found */
  if (i < 0) {
  12dc50:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12dc54:	e3530000 	cmp	r3, #0
  12dc58:	aa000001 	bge	12dc64 <etharp_update_arp_entry+0xd0>
    return (err_t)i;
  12dc5c:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12dc60:	ea000052 	b	12ddb0 <etharp_update_arp_entry+0x21c>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
  12dc64:	e15b20d5 	ldrsb	r2, [fp, #-5]
  12dc68:	e30e3260 	movw	r3, #57952	; 0xe260
  12dc6c:	e3403014 	movt	r3, #20
  12dc70:	e3a01018 	mov	r1, #24
  12dc74:	e0020291 	mul	r2, r1, r2
  12dc78:	e0833002 	add	r3, r3, r2
  12dc7c:	e2833014 	add	r3, r3, #20
  12dc80:	e3a02002 	mov	r2, #2
  12dc84:	e5c32000 	strb	r2, [r3]
  }

  /* record network interface */
  arp_table[i].netif = netif;
  12dc88:	e15b20d5 	ldrsb	r2, [fp, #-5]
  12dc8c:	e30e3260 	movw	r3, #57952	; 0xe260
  12dc90:	e3403014 	movt	r3, #20
  12dc94:	e3a01018 	mov	r1, #24
  12dc98:	e0020291 	mul	r2, r1, r2
  12dc9c:	e0833002 	add	r3, r3, r2
  12dca0:	e2833008 	add	r3, r3, #8
  12dca4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  12dca8:	e5832000 	str	r2, [r3]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
  12dcac:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12dcb0:	e3a02018 	mov	r2, #24
  12dcb4:	e0030392 	mul	r3, r2, r3
  12dcb8:	e2832008 	add	r2, r3, #8
  12dcbc:	e30e3260 	movw	r3, #57952	; 0xe260
  12dcc0:	e3403014 	movt	r3, #20
  12dcc4:	e0823003 	add	r3, r2, r3
  12dcc8:	e2833004 	add	r3, r3, #4
  12dccc:	e3a02006 	mov	r2, #6
  12dcd0:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  12dcd4:	e1a00003 	mov	r0, r3
  12dcd8:	eb0049cb 	bl	14040c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
  12dcdc:	e15b20d5 	ldrsb	r2, [fp, #-5]
  12dce0:	e30e3260 	movw	r3, #57952	; 0xe260
  12dce4:	e3403014 	movt	r3, #20
  12dce8:	e3a01018 	mov	r1, #24
  12dcec:	e0020291 	mul	r2, r1, r2
  12dcf0:	e0833002 	add	r3, r3, r2
  12dcf4:	e2833012 	add	r3, r3, #18
  12dcf8:	e3a02000 	mov	r2, #0
  12dcfc:	e1c320b0 	strh	r2, [r3]
  /* this is where we will send out queued packets! */
#if ARP_QUEUEING
  while (arp_table[i].q != NULL) {
  12dd00:	ea000020 	b	12dd88 <etharp_update_arp_entry+0x1f4>
    struct pbuf *p;
    /* remember remainder of queue */
    struct etharp_q_entry *q = arp_table[i].q;
  12dd04:	e15b20d5 	ldrsb	r2, [fp, #-5]
  12dd08:	e30e3260 	movw	r3, #57952	; 0xe260
  12dd0c:	e3403014 	movt	r3, #20
  12dd10:	e3a01018 	mov	r1, #24
  12dd14:	e0020291 	mul	r2, r1, r2
  12dd18:	e0833002 	add	r3, r3, r2
  12dd1c:	e5933000 	ldr	r3, [r3]
  12dd20:	e50b300c 	str	r3, [fp, #-12]
    /* pop first item off the queue */
    arp_table[i].q = q->next;
  12dd24:	e15b10d5 	ldrsb	r1, [fp, #-5]
  12dd28:	e51b300c 	ldr	r3, [fp, #-12]
  12dd2c:	e5932000 	ldr	r2, [r3]
  12dd30:	e30e3260 	movw	r3, #57952	; 0xe260
  12dd34:	e3403014 	movt	r3, #20
  12dd38:	e3a00018 	mov	r0, #24
  12dd3c:	e0010190 	mul	r1, r0, r1
  12dd40:	e0833001 	add	r3, r3, r1
  12dd44:	e5832000 	str	r2, [r3]
    /* get the packet pointer */
    p = q->p;
  12dd48:	e51b300c 	ldr	r3, [fp, #-12]
  12dd4c:	e5933004 	ldr	r3, [r3, #4]
  12dd50:	e50b3010 	str	r3, [fp, #-16]
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
  12dd54:	e51b100c 	ldr	r1, [fp, #-12]
  12dd58:	e3a0000b 	mov	r0, #11
  12dd5c:	ebffac6c 	bl	118f14 <memp_free>
  if (arp_table[i].q != NULL) {
    struct pbuf *p = arp_table[i].q;
    arp_table[i].q = NULL;
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
  12dd60:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12dd64:	e283203b 	add	r2, r3, #59	; 0x3b
  12dd68:	e3a03b02 	mov	r3, #2048	; 0x800
  12dd6c:	e58d3000 	str	r3, [sp]
  12dd70:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12dd74:	e51b1010 	ldr	r1, [fp, #-16]
  12dd78:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12dd7c:	ebffeb83 	bl	128b90 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
  12dd80:	e51b0010 	ldr	r0, [fp, #-16]
  12dd84:	ebffb370 	bl	11ab4c <pbuf_free>
  while (arp_table[i].q != NULL) {
  12dd88:	e15b20d5 	ldrsb	r2, [fp, #-5]
  12dd8c:	e30e3260 	movw	r3, #57952	; 0xe260
  12dd90:	e3403014 	movt	r3, #20
  12dd94:	e3a01018 	mov	r1, #24
  12dd98:	e0020291 	mul	r2, r1, r2
  12dd9c:	e0833002 	add	r3, r3, r2
  12dda0:	e5933000 	ldr	r3, [r3]
  12dda4:	e3530000 	cmp	r3, #0
  12dda8:	1affffd5 	bne	12dd04 <etharp_update_arp_entry+0x170>
  }
  return ERR_OK;
  12ddac:	e3a03000 	mov	r3, #0
}
  12ddb0:	e1a00003 	mov	r0, r3
  12ddb4:	e24bd004 	sub	sp, fp, #4
  12ddb8:	e8bd8800 	pop	{fp, pc}

0012ddbc <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
  12ddbc:	e92d4800 	push	{fp, lr}
  12ddc0:	e28db004 	add	fp, sp, #4
  12ddc4:	e24dd010 	sub	sp, sp, #16
  12ddc8:	e50b0010 	str	r0, [fp, #-16]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  12ddcc:	e3a03000 	mov	r3, #0
  12ddd0:	e54b3005 	strb	r3, [fp, #-5]
  12ddd4:	ea00001c 	b	12de4c <etharp_cleanup_netif+0x90>
    u8_t state = arp_table[i].state;
  12ddd8:	e55b2005 	ldrb	r2, [fp, #-5]
  12dddc:	e30e3260 	movw	r3, #57952	; 0xe260
  12dde0:	e3403014 	movt	r3, #20
  12dde4:	e3a01018 	mov	r1, #24
  12dde8:	e0020291 	mul	r2, r1, r2
  12ddec:	e0833002 	add	r3, r3, r2
  12ddf0:	e2833014 	add	r3, r3, #20
  12ddf4:	e5d33000 	ldrb	r3, [r3]
  12ddf8:	e54b3006 	strb	r3, [fp, #-6]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
  12ddfc:	e55b3006 	ldrb	r3, [fp, #-6]
  12de00:	e3530000 	cmp	r3, #0
  12de04:	0a00000d 	beq	12de40 <etharp_cleanup_netif+0x84>
  12de08:	e55b2005 	ldrb	r2, [fp, #-5]
  12de0c:	e30e3260 	movw	r3, #57952	; 0xe260
  12de10:	e3403014 	movt	r3, #20
  12de14:	e3a01018 	mov	r1, #24
  12de18:	e0020291 	mul	r2, r1, r2
  12de1c:	e0833002 	add	r3, r3, r2
  12de20:	e2833008 	add	r3, r3, #8
  12de24:	e5933000 	ldr	r3, [r3]
  12de28:	e51b2010 	ldr	r2, [fp, #-16]
  12de2c:	e1520003 	cmp	r2, r3
  12de30:	1a000002 	bne	12de40 <etharp_cleanup_netif+0x84>
      etharp_free_entry(i);
  12de34:	e55b3005 	ldrb	r3, [fp, #-5]
  12de38:	e1a00003 	mov	r0, r3
  12de3c:	ebfffd7a 	bl	12d42c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  12de40:	e55b3005 	ldrb	r3, [fp, #-5]
  12de44:	e2833001 	add	r3, r3, #1
  12de48:	e54b3005 	strb	r3, [fp, #-5]
  12de4c:	e55b3005 	ldrb	r3, [fp, #-5]
  12de50:	e3530009 	cmp	r3, #9
  12de54:	9affffdf 	bls	12ddd8 <etharp_cleanup_netif+0x1c>
    }
  }
}
  12de58:	e320f000 	nop	{0}
  12de5c:	e24bd004 	sub	sp, fp, #4
  12de60:	e8bd8800 	pop	{fp, pc}

0012de64 <etharp_find_addr>:
 * @return table index if found, -1 otherwise
 */
s8_t
etharp_find_addr(struct netif *netif, const ip4_addr_t *ipaddr,
         struct eth_addr **eth_ret, const ip4_addr_t **ip_ret)
{
  12de64:	e92d4800 	push	{fp, lr}
  12de68:	e28db004 	add	fp, sp, #4
  12de6c:	e24dd018 	sub	sp, sp, #24
  12de70:	e50b0010 	str	r0, [fp, #-16]
  12de74:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  12de78:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  12de7c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  s8_t i;

  LWIP_ASSERT("eth_ret != NULL && ip_ret != NULL",
  12de80:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12de84:	e3530000 	cmp	r3, #0
  12de88:	0a000002 	beq	12de98 <etharp_find_addr+0x34>
  12de8c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12de90:	e3530000 	cmp	r3, #0
  12de94:	1a000006 	bne	12deb4 <etharp_find_addr+0x50>
  12de98:	e3080898 	movw	r0, #34968	; 0x8898
  12de9c:	e3400014 	movt	r0, #20
  12dea0:	ebff549b 	bl	103114 <rt_kprintf>
  12dea4:	e300124d 	movw	r1, #589	; 0x24d
  12dea8:	e3080788 	movw	r0, #34696	; 0x8788
  12deac:	e3400014 	movt	r0, #20
  12deb0:	ebff7317 	bl	10ab14 <sys_arch_assert>
    eth_ret != NULL && ip_ret != NULL);

  LWIP_UNUSED_ARG(netif);

  i = etharp_find_entry(ipaddr, ETHARP_FLAG_FIND_ONLY, netif);
  12deb4:	e51b2010 	ldr	r2, [fp, #-16]
  12deb8:	e3a01002 	mov	r1, #2
  12debc:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  12dec0:	ebfffe14 	bl	12d718 <etharp_find_entry>
  12dec4:	e1a03000 	mov	r3, r0
  12dec8:	e54b3005 	strb	r3, [fp, #-5]
  if ((i >= 0) && (arp_table[i].state >= ETHARP_STATE_STABLE)) {
  12decc:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12ded0:	e3530000 	cmp	r3, #0
  12ded4:	ba00001e 	blt	12df54 <etharp_find_addr+0xf0>
  12ded8:	e15b20d5 	ldrsb	r2, [fp, #-5]
  12dedc:	e30e3260 	movw	r3, #57952	; 0xe260
  12dee0:	e3403014 	movt	r3, #20
  12dee4:	e3a01018 	mov	r1, #24
  12dee8:	e0020291 	mul	r2, r1, r2
  12deec:	e0833002 	add	r3, r3, r2
  12def0:	e2833014 	add	r3, r3, #20
  12def4:	e5d33000 	ldrb	r3, [r3]
  12def8:	e3530001 	cmp	r3, #1
  12defc:	9a000014 	bls	12df54 <etharp_find_addr+0xf0>
      *eth_ret = &arp_table[i].ethaddr;
  12df00:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12df04:	e3a02018 	mov	r2, #24
  12df08:	e0030392 	mul	r3, r2, r3
  12df0c:	e2832008 	add	r2, r3, #8
  12df10:	e30e3260 	movw	r3, #57952	; 0xe260
  12df14:	e3403014 	movt	r3, #20
  12df18:	e0823003 	add	r3, r2, r3
  12df1c:	e2832004 	add	r2, r3, #4
  12df20:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12df24:	e5832000 	str	r2, [r3]
      *ip_ret = &arp_table[i].ipaddr;
  12df28:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12df2c:	e3a02018 	mov	r2, #24
  12df30:	e0020392 	mul	r2, r2, r3
  12df34:	e30e3260 	movw	r3, #57952	; 0xe260
  12df38:	e3403014 	movt	r3, #20
  12df3c:	e0823003 	add	r3, r2, r3
  12df40:	e2832004 	add	r2, r3, #4
  12df44:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12df48:	e5832000 	str	r2, [r3]
      return i;
  12df4c:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12df50:	ea000000 	b	12df58 <etharp_find_addr+0xf4>
  }
  return -1;
  12df54:	e3e03000 	mvn	r3, #0
}
  12df58:	e1a00003 	mov	r0, r3
  12df5c:	e24bd004 	sub	sp, fp, #4
  12df60:	e8bd8800 	pop	{fp, pc}

0012df64 <etharp_get_entry>:
 * @param eth_ret return value: ETH address
 * @return 1 on valid index, 0 otherwise
 */
u8_t
etharp_get_entry(u8_t i, ip4_addr_t **ipaddr, struct netif **netif, struct eth_addr **eth_ret)
{
  12df64:	e92d4800 	push	{fp, lr}
  12df68:	e28db004 	add	fp, sp, #4
  12df6c:	e24dd010 	sub	sp, sp, #16
  12df70:	e50b100c 	str	r1, [fp, #-12]
  12df74:	e50b2010 	str	r2, [fp, #-16]
  12df78:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  12df7c:	e1a03000 	mov	r3, r0
  12df80:	e54b3005 	strb	r3, [fp, #-5]
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
  12df84:	e51b300c 	ldr	r3, [fp, #-12]
  12df88:	e3530000 	cmp	r3, #0
  12df8c:	1a000006 	bne	12dfac <etharp_get_entry+0x48>
  12df90:	e30808bc 	movw	r0, #35004	; 0x88bc
  12df94:	e3400014 	movt	r0, #20
  12df98:	ebff545d 	bl	103114 <rt_kprintf>
  12df9c:	e3001266 	movw	r1, #614	; 0x266
  12dfa0:	e3080788 	movw	r0, #34696	; 0x8788
  12dfa4:	e3400014 	movt	r0, #20
  12dfa8:	ebff72d9 	bl	10ab14 <sys_arch_assert>
  LWIP_ASSERT("netif != NULL", netif != NULL);
  12dfac:	e51b3010 	ldr	r3, [fp, #-16]
  12dfb0:	e3530000 	cmp	r3, #0
  12dfb4:	1a000006 	bne	12dfd4 <etharp_get_entry+0x70>
  12dfb8:	e30808cc 	movw	r0, #35020	; 0x88cc
  12dfbc:	e3400014 	movt	r0, #20
  12dfc0:	ebff5453 	bl	103114 <rt_kprintf>
  12dfc4:	e3001267 	movw	r1, #615	; 0x267
  12dfc8:	e3080788 	movw	r0, #34696	; 0x8788
  12dfcc:	e3400014 	movt	r0, #20
  12dfd0:	ebff72cf 	bl	10ab14 <sys_arch_assert>
  LWIP_ASSERT("eth_ret != NULL", eth_ret != NULL);
  12dfd4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12dfd8:	e3530000 	cmp	r3, #0
  12dfdc:	1a000006 	bne	12dffc <etharp_get_entry+0x98>
  12dfe0:	e30808dc 	movw	r0, #35036	; 0x88dc
  12dfe4:	e3400014 	movt	r0, #20
  12dfe8:	ebff5449 	bl	103114 <rt_kprintf>
  12dfec:	e3a01f9a 	mov	r1, #616	; 0x268
  12dff0:	e3080788 	movw	r0, #34696	; 0x8788
  12dff4:	e3400014 	movt	r0, #20
  12dff8:	ebff72c5 	bl	10ab14 <sys_arch_assert>

  if((i < ARP_TABLE_SIZE) && (arp_table[i].state >= ETHARP_STATE_STABLE)) {
  12dffc:	e55b3005 	ldrb	r3, [fp, #-5]
  12e000:	e3530009 	cmp	r3, #9
  12e004:	8a000028 	bhi	12e0ac <etharp_get_entry+0x148>
  12e008:	e55b2005 	ldrb	r2, [fp, #-5]
  12e00c:	e30e3260 	movw	r3, #57952	; 0xe260
  12e010:	e3403014 	movt	r3, #20
  12e014:	e3a01018 	mov	r1, #24
  12e018:	e0020291 	mul	r2, r1, r2
  12e01c:	e0833002 	add	r3, r3, r2
  12e020:	e2833014 	add	r3, r3, #20
  12e024:	e5d33000 	ldrb	r3, [r3]
  12e028:	e3530001 	cmp	r3, #1
  12e02c:	9a00001e 	bls	12e0ac <etharp_get_entry+0x148>
    *ipaddr  = &arp_table[i].ipaddr;
  12e030:	e55b3005 	ldrb	r3, [fp, #-5]
  12e034:	e3a02018 	mov	r2, #24
  12e038:	e0020392 	mul	r2, r2, r3
  12e03c:	e30e3260 	movw	r3, #57952	; 0xe260
  12e040:	e3403014 	movt	r3, #20
  12e044:	e0823003 	add	r3, r2, r3
  12e048:	e2832004 	add	r2, r3, #4
  12e04c:	e51b300c 	ldr	r3, [fp, #-12]
  12e050:	e5832000 	str	r2, [r3]
    *netif   = arp_table[i].netif;
  12e054:	e55b2005 	ldrb	r2, [fp, #-5]
  12e058:	e30e3260 	movw	r3, #57952	; 0xe260
  12e05c:	e3403014 	movt	r3, #20
  12e060:	e3a01018 	mov	r1, #24
  12e064:	e0020291 	mul	r2, r1, r2
  12e068:	e0833002 	add	r3, r3, r2
  12e06c:	e2833008 	add	r3, r3, #8
  12e070:	e5932000 	ldr	r2, [r3]
  12e074:	e51b3010 	ldr	r3, [fp, #-16]
  12e078:	e5832000 	str	r2, [r3]
    *eth_ret = &arp_table[i].ethaddr;
  12e07c:	e55b3005 	ldrb	r3, [fp, #-5]
  12e080:	e3a02018 	mov	r2, #24
  12e084:	e0030392 	mul	r3, r2, r3
  12e088:	e2832008 	add	r2, r3, #8
  12e08c:	e30e3260 	movw	r3, #57952	; 0xe260
  12e090:	e3403014 	movt	r3, #20
  12e094:	e0823003 	add	r3, r2, r3
  12e098:	e2832004 	add	r2, r3, #4
  12e09c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12e0a0:	e5832000 	str	r2, [r3]
    return 1;
  12e0a4:	e3a03001 	mov	r3, #1
  12e0a8:	ea000000 	b	12e0b0 <etharp_get_entry+0x14c>
  } else {
    return 0;
  12e0ac:	e3a03000 	mov	r3, #0
  }
}
  12e0b0:	e1a00003 	mov	r0, r3
  12e0b4:	e24bd004 	sub	sp, fp, #4
  12e0b8:	e8bd8800 	pop	{fp, pc}

0012e0bc <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
  12e0bc:	e92d4800 	push	{fp, lr}
  12e0c0:	e28db004 	add	fp, sp, #4
  12e0c4:	e24dd028 	sub	sp, sp, #40	; 0x28
  12e0c8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12e0cc:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
  12e0d0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e0d4:	e3530000 	cmp	r3, #0
  12e0d8:	1a000007 	bne	12e0fc <etharp_input+0x40>
  12e0dc:	e30808cc 	movw	r0, #35020	; 0x88cc
  12e0e0:	e3400014 	movt	r0, #20
  12e0e4:	ebff540a 	bl	103114 <rt_kprintf>
  12e0e8:	e3a01fa2 	mov	r1, #648	; 0x288
  12e0ec:	e3080788 	movw	r0, #34696	; 0x8788
  12e0f0:	e3400014 	movt	r0, #20
  12e0f4:	ebff7286 	bl	10ab14 <sys_arch_assert>
  12e0f8:	ea000085 	b	12e314 <etharp_input+0x258>

  hdr = (struct etharp_hdr *)p->payload;
  12e0fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12e100:	e5933004 	ldr	r3, [r3, #4]
  12e104:	e50b300c 	str	r3, [fp, #-12]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
  12e108:	e51b300c 	ldr	r3, [fp, #-12]
  12e10c:	e1d330b0 	ldrh	r3, [r3]
  12e110:	e6ff3073 	uxth	r3, r3
  12e114:	e3530c01 	cmp	r3, #256	; 0x100
  12e118:	1a00000c 	bne	12e150 <etharp_input+0x94>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
  12e11c:	e51b300c 	ldr	r3, [fp, #-12]
  12e120:	e5d33004 	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
  12e124:	e3530006 	cmp	r3, #6
  12e128:	1a000008 	bne	12e150 <etharp_input+0x94>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
  12e12c:	e51b300c 	ldr	r3, [fp, #-12]
  12e130:	e5d33005 	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
  12e134:	e3530004 	cmp	r3, #4
  12e138:	1a000004 	bne	12e150 <etharp_input+0x94>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
  12e13c:	e51b300c 	ldr	r3, [fp, #-12]
  12e140:	e1d330b2 	ldrh	r3, [r3, #2]
  12e144:	e6ff3073 	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
  12e148:	e3530008 	cmp	r3, #8
  12e14c:	0a000012 	beq	12e19c <etharp_input+0xe0>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
  12e150:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12e154:	e3403057 	movt	r3, #87	; 0x57
  12e158:	e1d332b8 	ldrh	r3, [r3, #40]	; 0x28
  12e15c:	e2833001 	add	r3, r3, #1
  12e160:	e6ff2073 	uxth	r2, r3
  12e164:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12e168:	e3403057 	movt	r3, #87	; 0x57
  12e16c:	e1c322b8 	strh	r2, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
  12e170:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12e174:	e3403057 	movt	r3, #87	; 0x57
  12e178:	e1d331be 	ldrh	r3, [r3, #30]
  12e17c:	e2833001 	add	r3, r3, #1
  12e180:	e6ff2073 	uxth	r2, r3
  12e184:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12e188:	e3403057 	movt	r3, #87	; 0x57
  12e18c:	e1c321be 	strh	r2, [r3, #30]
    pbuf_free(p);
  12e190:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12e194:	ebffb26c 	bl	11ab4c <pbuf_free>
    return;
  12e198:	ea00005d 	b	12e314 <etharp_input+0x258>
  }
  ETHARP_STATS_INC(etharp.recv);
  12e19c:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12e1a0:	e3403057 	movt	r3, #87	; 0x57
  12e1a4:	e1d331ba 	ldrh	r3, [r3, #26]
  12e1a8:	e2833001 	add	r3, r3, #1
  12e1ac:	e6ff2073 	uxth	r2, r3
  12e1b0:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12e1b4:	e3403057 	movt	r3, #87	; 0x57
  12e1b8:	e1c321ba 	strh	r2, [r3, #26]
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
  12e1bc:	e51b300c 	ldr	r3, [fp, #-12]
  12e1c0:	e283300e 	add	r3, r3, #14
  12e1c4:	e5933000 	ldr	r3, [r3]
  12e1c8:	e50b3010 	str	r3, [fp, #-16]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
  12e1cc:	e51b300c 	ldr	r3, [fp, #-12]
  12e1d0:	e2833018 	add	r3, r3, #24
  12e1d4:	e5933000 	ldr	r3, [r3]
  12e1d8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
  12e1dc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e1e0:	e2833004 	add	r3, r3, #4
  12e1e4:	e5933000 	ldr	r3, [r3]
  12e1e8:	e3530000 	cmp	r3, #0
  12e1ec:	1a000002 	bne	12e1fc <etharp_input+0x140>
    for_us = 0;
  12e1f0:	e3a03000 	mov	r3, #0
  12e1f4:	e54b3005 	strb	r3, [fp, #-5]
  12e1f8:	ea000008 	b	12e220 <etharp_input+0x164>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
  12e1fc:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  12e200:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e204:	e2833004 	add	r3, r3, #4
  12e208:	e5933000 	ldr	r3, [r3]
  12e20c:	e1520003 	cmp	r2, r3
  12e210:	03a03001 	moveq	r3, #1
  12e214:	13a03000 	movne	r3, #0
  12e218:	e6ef3073 	uxtb	r3, r3
  12e21c:	e54b3005 	strb	r3, [fp, #-5]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
  12e220:	e51b300c 	ldr	r3, [fp, #-12]
  12e224:	e2832008 	add	r2, r3, #8
  12e228:	e55b3005 	ldrb	r3, [fp, #-5]
  12e22c:	e3530000 	cmp	r3, #0
  12e230:	0a000001 	beq	12e23c <etharp_input+0x180>
  12e234:	e3a03001 	mov	r3, #1
  12e238:	ea000000 	b	12e240 <etharp_input+0x184>
  12e23c:	e3a03002 	mov	r3, #2
  12e240:	e24b1010 	sub	r1, fp, #16
  12e244:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12e248:	ebfffe51 	bl	12db94 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
  12e24c:	e51b300c 	ldr	r3, [fp, #-12]
  12e250:	e1d330b6 	ldrh	r3, [r3, #6]
  12e254:	e6ff3073 	uxth	r3, r3
  12e258:	e3530c01 	cmp	r3, #256	; 0x100
  12e25c:	0a000002 	beq	12e26c <etharp_input+0x1b0>
  12e260:	e3530c02 	cmp	r3, #512	; 0x200
  12e264:	0a000019 	beq	12e2d0 <etharp_input+0x214>
  12e268:	ea00001d 	b	12e2e4 <etharp_input+0x228>
     * reply. In any case, we time-stamp any existing ARP entry,
     * and possibly send out an IP packet that was queued on it. */

    LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP request\n"));
    /* ARP request for our address? */
    if (for_us) {
  12e26c:	e55b3005 	ldrb	r3, [fp, #-5]
  12e270:	e3530000 	cmp	r3, #0
  12e274:	0a000023 	beq	12e308 <etharp_input+0x24c>
      /* send ARP response */
      etharp_raw(netif,
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
  12e278:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e27c:	e283003b 	add	r0, r3, #59	; 0x3b
  12e280:	e51b300c 	ldr	r3, [fp, #-12]
  12e284:	e283c008 	add	ip, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
  12e288:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e28c:	e283e03b 	add	lr, r3, #59	; 0x3b
  12e290:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e294:	e2833004 	add	r3, r3, #4
                 &hdr->shwaddr, &sipaddr,
  12e298:	e51b200c 	ldr	r2, [fp, #-12]
  12e29c:	e2822008 	add	r2, r2, #8
      etharp_raw(netif,
  12e2a0:	e3a01002 	mov	r1, #2
  12e2a4:	e58d100c 	str	r1, [sp, #12]
  12e2a8:	e24b1010 	sub	r1, fp, #16
  12e2ac:	e58d1008 	str	r1, [sp, #8]
  12e2b0:	e58d2004 	str	r2, [sp, #4]
  12e2b4:	e58d3000 	str	r3, [sp]
  12e2b8:	e1a0300e 	mov	r3, lr
  12e2bc:	e1a0200c 	mov	r2, ip
  12e2c0:	e1a01000 	mov	r1, r0
  12e2c4:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12e2c8:	eb0002d5 	bl	12ee24 <etharp_raw>
    /* request was not directed to us */
    } else {
      /* { for_us == 0 and netif->ip_addr.addr != 0 } */
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP request was not for us.\n"));
    }
    break;
  12e2cc:	ea00000d 	b	12e308 <etharp_input+0x24c>
#if (LWIP_DHCP && DHCP_DOES_ARP_CHECK)
    /* DHCP wants to know about ARP replies from any host with an
     * IP address also offered to us by the DHCP server. We do not
     * want to take a duplicate IP address on a single network.
     * @todo How should we handle redundant (fail-over) interfaces? */
    dhcp_arp_reply(netif, &sipaddr);
  12e2d0:	e24b3010 	sub	r3, fp, #16
  12e2d4:	e1a01003 	mov	r1, r3
  12e2d8:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12e2dc:	ebfff256 	bl	12ac3c <dhcp_arp_reply>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  12e2e0:	ea000009 	b	12e30c <etharp_input+0x250>
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
  12e2e4:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12e2e8:	e3403057 	movt	r3, #87	; 0x57
  12e2ec:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  12e2f0:	e2833001 	add	r3, r3, #1
  12e2f4:	e6ff2073 	uxth	r2, r3
  12e2f8:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12e2fc:	e3403057 	movt	r3, #87	; 0x57
  12e300:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
    break;
  12e304:	ea000000 	b	12e30c <etharp_input+0x250>
    break;
  12e308:	e320f000 	nop	{0}
  }
  /* free ARP packet */
  pbuf_free(p);
  12e30c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12e310:	ebffb20d 	bl	11ab4c <pbuf_free>
}
  12e314:	e24bd004 	sub	sp, fp, #4
  12e318:	e8bd8800 	pop	{fp, pc}

0012e31c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
  12e31c:	e92d4800 	push	{fp, lr}
  12e320:	e28db004 	add	fp, sp, #4
  12e324:	e24dd018 	sub	sp, sp, #24
  12e328:	e50b0008 	str	r0, [fp, #-8]
  12e32c:	e50b100c 	str	r1, [fp, #-12]
  12e330:	e1a03002 	mov	r3, r2
  12e334:	e54b300d 	strb	r3, [fp, #-13]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
  12e338:	e55b200d 	ldrb	r2, [fp, #-13]
  12e33c:	e30e3260 	movw	r3, #57952	; 0xe260
  12e340:	e3403014 	movt	r3, #20
  12e344:	e3a01018 	mov	r1, #24
  12e348:	e0020291 	mul	r2, r1, r2
  12e34c:	e0833002 	add	r3, r3, r2
  12e350:	e2833014 	add	r3, r3, #20
  12e354:	e5d33000 	ldrb	r3, [r3]
  12e358:	e3530001 	cmp	r3, #1
  12e35c:	8a000006 	bhi	12e37c <etharp_output_to_arp_index+0x60>
  12e360:	e30808ec 	movw	r0, #35052	; 0x88ec
  12e364:	e3400014 	movt	r0, #20
  12e368:	ebff5369 	bl	103114 <rt_kprintf>
  12e36c:	e30012ed 	movw	r1, #749	; 0x2ed
  12e370:	e3080788 	movw	r0, #34696	; 0x8788
  12e374:	e3400014 	movt	r0, #20
  12e378:	ebff71e5 	bl	10ab14 <sys_arch_assert>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
  12e37c:	e55b200d 	ldrb	r2, [fp, #-13]
  12e380:	e30e3260 	movw	r3, #57952	; 0xe260
  12e384:	e3403014 	movt	r3, #20
  12e388:	e3a01018 	mov	r1, #24
  12e38c:	e0020291 	mul	r2, r1, r2
  12e390:	e0833002 	add	r3, r3, r2
  12e394:	e2833014 	add	r3, r3, #20
  12e398:	e5d33000 	ldrb	r3, [r3]
  12e39c:	e3530002 	cmp	r3, #2
  12e3a0:	1a000049 	bne	12e4cc <etharp_output_to_arp_index+0x1b0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
  12e3a4:	e55b200d 	ldrb	r2, [fp, #-13]
  12e3a8:	e30e3260 	movw	r3, #57952	; 0xe260
  12e3ac:	e3403014 	movt	r3, #20
  12e3b0:	e3a01018 	mov	r1, #24
  12e3b4:	e0020291 	mul	r2, r1, r2
  12e3b8:	e0833002 	add	r3, r3, r2
  12e3bc:	e2833012 	add	r3, r3, #18
  12e3c0:	e1d330b0 	ldrh	r3, [r3]
  12e3c4:	e3530f47 	cmp	r3, #284	; 0x11c
  12e3c8:	9a000016 	bls	12e428 <etharp_output_to_arp_index+0x10c>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
  12e3cc:	e55b300d 	ldrb	r3, [fp, #-13]
  12e3d0:	e3a02018 	mov	r2, #24
  12e3d4:	e0020392 	mul	r2, r2, r3
  12e3d8:	e30e3260 	movw	r3, #57952	; 0xe260
  12e3dc:	e3403014 	movt	r3, #20
  12e3e0:	e0823003 	add	r3, r2, r3
  12e3e4:	e2833004 	add	r3, r3, #4
  12e3e8:	e1a01003 	mov	r1, r3
  12e3ec:	e51b0008 	ldr	r0, [fp, #-8]
  12e3f0:	eb00032b 	bl	12f0a4 <etharp_request>
  12e3f4:	e1a03000 	mov	r3, r0
  12e3f8:	e3530000 	cmp	r3, #0
  12e3fc:	1a000032 	bne	12e4cc <etharp_output_to_arp_index+0x1b0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
  12e400:	e55b200d 	ldrb	r2, [fp, #-13]
  12e404:	e30e3260 	movw	r3, #57952	; 0xe260
  12e408:	e3403014 	movt	r3, #20
  12e40c:	e3a01018 	mov	r1, #24
  12e410:	e0020291 	mul	r2, r1, r2
  12e414:	e0833002 	add	r3, r3, r2
  12e418:	e2833014 	add	r3, r3, #20
  12e41c:	e3a02003 	mov	r2, #3
  12e420:	e5c32000 	strb	r2, [r3]
  12e424:	ea000028 	b	12e4cc <etharp_output_to_arp_index+0x1b0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
  12e428:	e55b200d 	ldrb	r2, [fp, #-13]
  12e42c:	e30e3260 	movw	r3, #57952	; 0xe260
  12e430:	e3403014 	movt	r3, #20
  12e434:	e3a01018 	mov	r1, #24
  12e438:	e0020291 	mul	r2, r1, r2
  12e43c:	e0833002 	add	r3, r3, r2
  12e440:	e2833012 	add	r3, r3, #18
  12e444:	e1d330b0 	ldrh	r3, [r3]
  12e448:	e300210d 	movw	r2, #269	; 0x10d
  12e44c:	e1530002 	cmp	r3, r2
  12e450:	9a00001d 	bls	12e4cc <etharp_output_to_arp_index+0x1b0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
  12e454:	e55b300d 	ldrb	r3, [fp, #-13]
  12e458:	e3a02018 	mov	r2, #24
  12e45c:	e0020392 	mul	r2, r2, r3
  12e460:	e30e3260 	movw	r3, #57952	; 0xe260
  12e464:	e3403014 	movt	r3, #20
  12e468:	e0823003 	add	r3, r2, r3
  12e46c:	e2831004 	add	r1, r3, #4
  12e470:	e55b300d 	ldrb	r3, [fp, #-13]
  12e474:	e3a02018 	mov	r2, #24
  12e478:	e0030392 	mul	r3, r2, r3
  12e47c:	e2832008 	add	r2, r3, #8
  12e480:	e30e3260 	movw	r3, #57952	; 0xe260
  12e484:	e3403014 	movt	r3, #20
  12e488:	e0823003 	add	r3, r2, r3
  12e48c:	e2833004 	add	r3, r3, #4
  12e490:	e1a02003 	mov	r2, r3
  12e494:	e51b0008 	ldr	r0, [fp, #-8]
  12e498:	eb0002e5 	bl	12f034 <etharp_request_dst>
  12e49c:	e1a03000 	mov	r3, r0
  12e4a0:	e3530000 	cmp	r3, #0
  12e4a4:	1a000008 	bne	12e4cc <etharp_output_to_arp_index+0x1b0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
  12e4a8:	e55b200d 	ldrb	r2, [fp, #-13]
  12e4ac:	e30e3260 	movw	r3, #57952	; 0xe260
  12e4b0:	e3403014 	movt	r3, #20
  12e4b4:	e3a01018 	mov	r1, #24
  12e4b8:	e0020291 	mul	r2, r1, r2
  12e4bc:	e0833002 	add	r3, r3, r2
  12e4c0:	e2833014 	add	r3, r3, #20
  12e4c4:	e3a02003 	mov	r2, #3
  12e4c8:	e5c32000 	strb	r2, [r3]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
  12e4cc:	e51b3008 	ldr	r3, [fp, #-8]
  12e4d0:	e283103b 	add	r1, r3, #59	; 0x3b
  12e4d4:	e55b300d 	ldrb	r3, [fp, #-13]
  12e4d8:	e3a02018 	mov	r2, #24
  12e4dc:	e0030392 	mul	r3, r2, r3
  12e4e0:	e2832008 	add	r2, r3, #8
  12e4e4:	e30e3260 	movw	r3, #57952	; 0xe260
  12e4e8:	e3403014 	movt	r3, #20
  12e4ec:	e0823003 	add	r3, r2, r3
  12e4f0:	e2832004 	add	r2, r3, #4
  12e4f4:	e3a03b02 	mov	r3, #2048	; 0x800
  12e4f8:	e58d3000 	str	r3, [sp]
  12e4fc:	e1a03002 	mov	r3, r2
  12e500:	e1a02001 	mov	r2, r1
  12e504:	e51b100c 	ldr	r1, [fp, #-12]
  12e508:	e51b0008 	ldr	r0, [fp, #-8]
  12e50c:	ebffe99f 	bl	128b90 <ethernet_output>
  12e510:	e1a03000 	mov	r3, r0
}
  12e514:	e1a00003 	mov	r0, r3
  12e518:	e24bd004 	sub	sp, fp, #4
  12e51c:	e8bd8800 	pop	{fp, pc}

0012e520 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
  12e520:	e92d4800 	push	{fp, lr}
  12e524:	e28db004 	add	fp, sp, #4
  12e528:	e24dd028 	sub	sp, sp, #40	; 0x28
  12e52c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12e530:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  12e534:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
  12e538:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12e53c:	e50b300c 	str	r3, [fp, #-12]

  LWIP_ASSERT("netif != NULL", netif != NULL);
  12e540:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12e544:	e3530000 	cmp	r3, #0
  12e548:	1a000006 	bne	12e568 <etharp_output+0x48>
  12e54c:	e30808cc 	movw	r0, #35020	; 0x88cc
  12e550:	e3400014 	movt	r0, #20
  12e554:	ebff52ee 	bl	103114 <rt_kprintf>
  12e558:	e300131b 	movw	r1, #795	; 0x31b
  12e55c:	e3080788 	movw	r0, #34696	; 0x8788
  12e560:	e3400014 	movt	r0, #20
  12e564:	ebff716a 	bl	10ab14 <sys_arch_assert>
  LWIP_ASSERT("q != NULL", q != NULL);
  12e568:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e56c:	e3530000 	cmp	r3, #0
  12e570:	1a000006 	bne	12e590 <etharp_output+0x70>
  12e574:	e308077c 	movw	r0, #34684	; 0x877c
  12e578:	e3400014 	movt	r0, #20
  12e57c:	ebff52e4 	bl	103114 <rt_kprintf>
  12e580:	e3a01fc7 	mov	r1, #796	; 0x31c
  12e584:	e3080788 	movw	r0, #34696	; 0x8788
  12e588:	e3400014 	movt	r0, #20
  12e58c:	ebff7160 	bl	10ab14 <sys_arch_assert>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
  12e590:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12e594:	e3530000 	cmp	r3, #0
  12e598:	1a000006 	bne	12e5b8 <etharp_output+0x98>
  12e59c:	e30808bc 	movw	r0, #35004	; 0x88bc
  12e5a0:	e3400014 	movt	r0, #20
  12e5a4:	ebff52da 	bl	103114 <rt_kprintf>
  12e5a8:	e300131d 	movw	r1, #797	; 0x31d
  12e5ac:	e3080788 	movw	r0, #34696	; 0x8788
  12e5b0:	e3400014 	movt	r0, #20
  12e5b4:	ebff7156 	bl	10ab14 <sys_arch_assert>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
  12e5b8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12e5bc:	e5933000 	ldr	r3, [r3]
  12e5c0:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  12e5c4:	e1a00003 	mov	r0, r3
  12e5c8:	eb000eba 	bl	1320b8 <ip4_addr_isbroadcast_u32>
  12e5cc:	e1a03000 	mov	r3, r0
  12e5d0:	e3530000 	cmp	r3, #0
  12e5d4:	0a000003 	beq	12e5e8 <etharp_output+0xc8>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
  12e5d8:	e3083074 	movw	r3, #32884	; 0x8074
  12e5dc:	e3403014 	movt	r3, #20
  12e5e0:	e50b3008 	str	r3, [fp, #-8]
  12e5e4:	ea000097 	b	12e848 <etharp_output+0x328>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
  12e5e8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12e5ec:	e5933000 	ldr	r3, [r3]
  12e5f0:	e20330f0 	and	r3, r3, #240	; 0xf0
  12e5f4:	e35300e0 	cmp	r3, #224	; 0xe0
  12e5f8:	1a000016 	bne	12e658 <etharp_output+0x138>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
  12e5fc:	e3a03001 	mov	r3, #1
  12e600:	e54b3014 	strb	r3, [fp, #-20]	; 0xffffffec
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
  12e604:	e3a03000 	mov	r3, #0
  12e608:	e54b3013 	strb	r3, [fp, #-19]	; 0xffffffed
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
  12e60c:	e3a0305e 	mov	r3, #94	; 0x5e
  12e610:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
  12e614:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12e618:	e2833001 	add	r3, r3, #1
  12e61c:	e5d33000 	ldrb	r3, [r3]
  12e620:	e203307f 	and	r3, r3, #127	; 0x7f
  12e624:	e6ef3073 	uxtb	r3, r3
  12e628:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
  12e62c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12e630:	e2833002 	add	r3, r3, #2
  12e634:	e5d33000 	ldrb	r3, [r3]
  12e638:	e54b3010 	strb	r3, [fp, #-16]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
  12e63c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12e640:	e2833003 	add	r3, r3, #3
  12e644:	e5d33000 	ldrb	r3, [r3]
  12e648:	e54b300f 	strb	r3, [fp, #-15]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
  12e64c:	e24b3014 	sub	r3, fp, #20
  12e650:	e50b3008 	str	r3, [fp, #-8]
  12e654:	ea00007b 	b	12e848 <etharp_output+0x328>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
  12e658:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12e65c:	e5932000 	ldr	r2, [r3]
  12e660:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12e664:	e2833004 	add	r3, r3, #4
  12e668:	e5933000 	ldr	r3, [r3]
  12e66c:	e0222003 	eor	r2, r2, r3
  12e670:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12e674:	e2833008 	add	r3, r3, #8
  12e678:	e5933000 	ldr	r3, [r3]
  12e67c:	e0033002 	and	r3, r3, r2
  12e680:	e3530000 	cmp	r3, #0
  12e684:	0a000010 	beq	12e6cc <etharp_output+0x1ac>
        !ip4_addr_islinklocal(ipaddr)) {
  12e688:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12e68c:	e5933000 	ldr	r3, [r3]
  12e690:	e6ff3073 	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
  12e694:	e30f2ea9 	movw	r2, #65193	; 0xfea9
  12e698:	e1530002 	cmp	r3, r2
  12e69c:	0a00000a 	beq	12e6cc <etharp_output+0x1ac>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
  12e6a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12e6a4:	e283300c 	add	r3, r3, #12
  12e6a8:	e5933000 	ldr	r3, [r3]
  12e6ac:	e3530000 	cmp	r3, #0
  12e6b0:	0a000003 	beq	12e6c4 <etharp_output+0x1a4>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
  12e6b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12e6b8:	e283300c 	add	r3, r3, #12
  12e6bc:	e50b300c 	str	r3, [fp, #-12]
  12e6c0:	ea000001 	b	12e6cc <etharp_output+0x1ac>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
  12e6c4:	e3e03003 	mvn	r3, #3
  12e6c8:	ea000067 	b	12e86c <etharp_output+0x34c>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
  12e6cc:	e30e3350 	movw	r3, #58192	; 0xe350
  12e6d0:	e3403014 	movt	r3, #20
  12e6d4:	e5d33000 	ldrb	r3, [r3]
  12e6d8:	e1a01003 	mov	r1, r3
  12e6dc:	e30e3260 	movw	r3, #57952	; 0xe260
  12e6e0:	e3403014 	movt	r3, #20
  12e6e4:	e3a02018 	mov	r2, #24
  12e6e8:	e0020192 	mul	r2, r2, r1
  12e6ec:	e0833002 	add	r3, r3, r2
  12e6f0:	e2833014 	add	r3, r3, #20
  12e6f4:	e5d33000 	ldrb	r3, [r3]
  12e6f8:	e3530001 	cmp	r3, #1
  12e6fc:	9a00001f 	bls	12e780 <etharp_output+0x260>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
  12e700:	e51b300c 	ldr	r3, [fp, #-12]
  12e704:	e5932000 	ldr	r2, [r3]
  12e708:	e30e3350 	movw	r3, #58192	; 0xe350
  12e70c:	e3403014 	movt	r3, #20
  12e710:	e5d33000 	ldrb	r3, [r3]
  12e714:	e1a00003 	mov	r0, r3
  12e718:	e30e3260 	movw	r3, #57952	; 0xe260
  12e71c:	e3403014 	movt	r3, #20
  12e720:	e3a01018 	mov	r1, #24
  12e724:	e0010091 	mul	r1, r1, r0
  12e728:	e0833001 	add	r3, r3, r1
  12e72c:	e2833004 	add	r3, r3, #4
  12e730:	e5933000 	ldr	r3, [r3]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
  12e734:	e1520003 	cmp	r2, r3
  12e738:	1a000010 	bne	12e780 <etharp_output+0x260>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
  12e73c:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12e740:	e3403057 	movt	r3, #87	; 0x57
  12e744:	e1d332be 	ldrh	r3, [r3, #46]	; 0x2e
  12e748:	e2833001 	add	r3, r3, #1
  12e74c:	e6ff2073 	uxth	r2, r3
  12e750:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12e754:	e3403057 	movt	r3, #87	; 0x57
  12e758:	e1c322be 	strh	r2, [r3, #46]	; 0x2e
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
  12e75c:	e30e3350 	movw	r3, #58192	; 0xe350
  12e760:	e3403014 	movt	r3, #20
  12e764:	e5d33000 	ldrb	r3, [r3]
  12e768:	e1a02003 	mov	r2, r3
  12e76c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  12e770:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12e774:	ebfffee8 	bl	12e31c <etharp_output_to_arp_index>
  12e778:	e1a03000 	mov	r3, r0
  12e77c:	ea00003a 	b	12e86c <etharp_output+0x34c>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
  12e780:	e3a03000 	mov	r3, #0
  12e784:	e54b300d 	strb	r3, [fp, #-13]
  12e788:	ea000025 	b	12e824 <etharp_output+0x304>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
  12e78c:	e15b20dd 	ldrsb	r2, [fp, #-13]
  12e790:	e30e3260 	movw	r3, #57952	; 0xe260
  12e794:	e3403014 	movt	r3, #20
  12e798:	e3a01018 	mov	r1, #24
  12e79c:	e0020291 	mul	r2, r1, r2
  12e7a0:	e0833002 	add	r3, r3, r2
  12e7a4:	e2833014 	add	r3, r3, #20
  12e7a8:	e5d33000 	ldrb	r3, [r3]
  12e7ac:	e3530001 	cmp	r3, #1
  12e7b0:	9a000016 	bls	12e810 <etharp_output+0x2f0>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
  12e7b4:	e51b300c 	ldr	r3, [fp, #-12]
  12e7b8:	e5932000 	ldr	r2, [r3]
  12e7bc:	e15b10dd 	ldrsb	r1, [fp, #-13]
  12e7c0:	e30e3260 	movw	r3, #57952	; 0xe260
  12e7c4:	e3403014 	movt	r3, #20
  12e7c8:	e3a00018 	mov	r0, #24
  12e7cc:	e0010190 	mul	r1, r0, r1
  12e7d0:	e0833001 	add	r3, r3, r1
  12e7d4:	e2833004 	add	r3, r3, #4
  12e7d8:	e5933000 	ldr	r3, [r3]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
  12e7dc:	e1520003 	cmp	r2, r3
  12e7e0:	1a00000a 	bne	12e810 <etharp_output+0x2f0>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
  12e7e4:	e55b200d 	ldrb	r2, [fp, #-13]
  12e7e8:	e30e3350 	movw	r3, #58192	; 0xe350
  12e7ec:	e3403014 	movt	r3, #20
  12e7f0:	e5c32000 	strb	r2, [r3]
        return etharp_output_to_arp_index(netif, q, i);
  12e7f4:	e55b300d 	ldrb	r3, [fp, #-13]
  12e7f8:	e1a02003 	mov	r2, r3
  12e7fc:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  12e800:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12e804:	ebfffec4 	bl	12e31c <etharp_output_to_arp_index>
  12e808:	e1a03000 	mov	r3, r0
  12e80c:	ea000016 	b	12e86c <etharp_output+0x34c>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
  12e810:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12e814:	e6ef3073 	uxtb	r3, r3
  12e818:	e2833001 	add	r3, r3, #1
  12e81c:	e6ef3073 	uxtb	r3, r3
  12e820:	e54b300d 	strb	r3, [fp, #-13]
  12e824:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12e828:	e3530009 	cmp	r3, #9
  12e82c:	daffffd6 	ble	12e78c <etharp_output+0x26c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
  12e830:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  12e834:	e51b100c 	ldr	r1, [fp, #-12]
  12e838:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12e83c:	eb00000d 	bl	12e878 <etharp_query>
  12e840:	e1a03000 	mov	r3, r0
  12e844:	ea000008 	b	12e86c <etharp_output+0x34c>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
  12e848:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12e84c:	e283203b 	add	r2, r3, #59	; 0x3b
  12e850:	e3a03b02 	mov	r3, #2048	; 0x800
  12e854:	e58d3000 	str	r3, [sp]
  12e858:	e51b3008 	ldr	r3, [fp, #-8]
  12e85c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  12e860:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12e864:	ebffe8c9 	bl	128b90 <ethernet_output>
  12e868:	e1a03000 	mov	r3, r0
}
  12e86c:	e1a00003 	mov	r0, r3
  12e870:	e24bd004 	sub	sp, fp, #4
  12e874:	e8bd8800 	pop	{fp, pc}

0012e878 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
  12e878:	e92d4800 	push	{fp, lr}
  12e87c:	e28db004 	add	fp, sp, #4
  12e880:	e24dd040 	sub	sp, sp, #64	; 0x40
  12e884:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  12e888:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  12e88c:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
  12e890:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12e894:	e283303b 	add	r3, r3, #59	; 0x3b
  12e898:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  err_t result = ERR_MEM;
  12e89c:	e3e03000 	mvn	r3, #0
  12e8a0:	e54b3005 	strb	r3, [fp, #-5]
  int is_new_entry = 0;
  12e8a4:	e3a03000 	mov	r3, #0
  12e8a8:	e50b300c 	str	r3, [fp, #-12]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
  12e8ac:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  12e8b0:	e5933000 	ldr	r3, [r3]
  12e8b4:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
  12e8b8:	e1a00003 	mov	r0, r3
  12e8bc:	eb000dfd 	bl	1320b8 <ip4_addr_isbroadcast_u32>
  12e8c0:	e1a03000 	mov	r3, r0
  12e8c4:	e3530000 	cmp	r3, #0
  12e8c8:	1a00000b 	bne	12e8fc <etharp_query+0x84>
      ip4_addr_ismulticast(ipaddr) ||
  12e8cc:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  12e8d0:	e5933000 	ldr	r3, [r3]
  12e8d4:	e20330f0 	and	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
  12e8d8:	e35300e0 	cmp	r3, #224	; 0xe0
  12e8dc:	0a000006 	beq	12e8fc <etharp_query+0x84>
      ip4_addr_ismulticast(ipaddr) ||
  12e8e0:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  12e8e4:	e3530000 	cmp	r3, #0
  12e8e8:	0a000003 	beq	12e8fc <etharp_query+0x84>
      ip4_addr_isany(ipaddr)) {
  12e8ec:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  12e8f0:	e5933000 	ldr	r3, [r3]
  12e8f4:	e3530000 	cmp	r3, #0
  12e8f8:	1a000001 	bne	12e904 <etharp_query+0x8c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
  12e8fc:	e3e0300f 	mvn	r3, #15
  12e900:	ea000144 	b	12ee18 <etharp_query+0x5a0>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
  12e904:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  12e908:	e3a01001 	mov	r1, #1
  12e90c:	e51b0034 	ldr	r0, [fp, #-52]	; 0xffffffcc
  12e910:	ebfffb80 	bl	12d718 <etharp_find_entry>
  12e914:	e1a03000 	mov	r3, r0
  12e918:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf

  /* could not find or create entry? */
  if (i < 0) {
  12e91c:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  12e920:	e3530000 	cmp	r3, #0
  12e924:	aa00000c 	bge	12e95c <etharp_query+0xe4>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
  12e928:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12e92c:	e3530000 	cmp	r3, #0
  12e930:	0a000007 	beq	12e954 <etharp_query+0xdc>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
  12e934:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12e938:	e3403057 	movt	r3, #87	; 0x57
  12e93c:	e1d332b4 	ldrh	r3, [r3, #36]	; 0x24
  12e940:	e2833001 	add	r3, r3, #1
  12e944:	e6ff2073 	uxth	r2, r3
  12e948:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12e94c:	e3403057 	movt	r3, #87	; 0x57
  12e950:	e1c322b4 	strh	r2, [r3, #36]	; 0x24
    }
    return (err_t)i;
  12e954:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  12e958:	ea00012e 	b	12ee18 <etharp_query+0x5a0>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
  12e95c:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12e960:	e30e3260 	movw	r3, #57952	; 0xe260
  12e964:	e3403014 	movt	r3, #20
  12e968:	e3a01018 	mov	r1, #24
  12e96c:	e0020291 	mul	r2, r1, r2
  12e970:	e0833002 	add	r3, r3, r2
  12e974:	e2833014 	add	r3, r3, #20
  12e978:	e5d33000 	ldrb	r3, [r3]
  12e97c:	e3530000 	cmp	r3, #0
  12e980:	1a000013 	bne	12e9d4 <etharp_query+0x15c>
    is_new_entry = 1;
  12e984:	e3a03001 	mov	r3, #1
  12e988:	e50b300c 	str	r3, [fp, #-12]
    arp_table[i].state = ETHARP_STATE_PENDING;
  12e98c:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12e990:	e30e3260 	movw	r3, #57952	; 0xe260
  12e994:	e3403014 	movt	r3, #20
  12e998:	e3a01018 	mov	r1, #24
  12e99c:	e0020291 	mul	r2, r1, r2
  12e9a0:	e0833002 	add	r3, r3, r2
  12e9a4:	e2833014 	add	r3, r3, #20
  12e9a8:	e3a02001 	mov	r2, #1
  12e9ac:	e5c32000 	strb	r2, [r3]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
  12e9b0:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12e9b4:	e30e3260 	movw	r3, #57952	; 0xe260
  12e9b8:	e3403014 	movt	r3, #20
  12e9bc:	e3a01018 	mov	r1, #24
  12e9c0:	e0020291 	mul	r2, r1, r2
  12e9c4:	e0833002 	add	r3, r3, r2
  12e9c8:	e2833008 	add	r3, r3, #8
  12e9cc:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  12e9d0:	e5832000 	str	r2, [r3]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
  12e9d4:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12e9d8:	e30e3260 	movw	r3, #57952	; 0xe260
  12e9dc:	e3403014 	movt	r3, #20
  12e9e0:	e3a01018 	mov	r1, #24
  12e9e4:	e0020291 	mul	r2, r1, r2
  12e9e8:	e0833002 	add	r3, r3, r2
  12e9ec:	e2833014 	add	r3, r3, #20
  12e9f0:	e5d33000 	ldrb	r3, [r3]
  12e9f4:	e3530001 	cmp	r3, #1
  12e9f8:	0a000010 	beq	12ea40 <etharp_query+0x1c8>
  12e9fc:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12ea00:	e30e3260 	movw	r3, #57952	; 0xe260
  12ea04:	e3403014 	movt	r3, #20
  12ea08:	e3a01018 	mov	r1, #24
  12ea0c:	e0020291 	mul	r2, r1, r2
  12ea10:	e0833002 	add	r3, r3, r2
  12ea14:	e2833014 	add	r3, r3, #20
  12ea18:	e5d33000 	ldrb	r3, [r3]
  12ea1c:	e3530001 	cmp	r3, #1
  12ea20:	8a000006 	bhi	12ea40 <etharp_query+0x1c8>
  12ea24:	e308091c 	movw	r0, #35100	; 0x891c
  12ea28:	e3400014 	movt	r0, #20
  12ea2c:	ebff51b8 	bl	103114 <rt_kprintf>
  12ea30:	e30013c9 	movw	r1, #969	; 0x3c9
  12ea34:	e3080788 	movw	r0, #34696	; 0x8788
  12ea38:	e3400014 	movt	r0, #20
  12ea3c:	ebff7034 	bl	10ab14 <sys_arch_assert>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
  12ea40:	e51b300c 	ldr	r3, [fp, #-12]
  12ea44:	e3530000 	cmp	r3, #0
  12ea48:	1a000002 	bne	12ea58 <etharp_query+0x1e0>
  12ea4c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12ea50:	e3530000 	cmp	r3, #0
  12ea54:	1a000009 	bne	12ea80 <etharp_query+0x208>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
  12ea58:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  12ea5c:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  12ea60:	eb00018f 	bl	12f0a4 <etharp_request>
  12ea64:	e1a03000 	mov	r3, r0
  12ea68:	e54b3005 	strb	r3, [fp, #-5]
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
  12ea6c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12ea70:	e3530000 	cmp	r3, #0
  12ea74:	1a000001 	bne	12ea80 <etharp_query+0x208>
      return result;
  12ea78:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12ea7c:	ea0000e5 	b	12ee18 <etharp_query+0x5a0>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
  12ea80:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12ea84:	e3530000 	cmp	r3, #0
  12ea88:	1a000006 	bne	12eaa8 <etharp_query+0x230>
  12ea8c:	e308077c 	movw	r0, #34684	; 0x877c
  12ea90:	e3400014 	movt	r0, #20
  12ea94:	ebff519e 	bl	103114 <rt_kprintf>
  12ea98:	e30013db 	movw	r1, #987	; 0x3db
  12ea9c:	e3080788 	movw	r0, #34696	; 0x8788
  12eaa0:	e3400014 	movt	r0, #20
  12eaa4:	ebff701a 	bl	10ab14 <sys_arch_assert>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
  12eaa8:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12eaac:	e30e3260 	movw	r3, #57952	; 0xe260
  12eab0:	e3403014 	movt	r3, #20
  12eab4:	e3a01018 	mov	r1, #24
  12eab8:	e0020291 	mul	r2, r1, r2
  12eabc:	e0833002 	add	r3, r3, r2
  12eac0:	e2833014 	add	r3, r3, #20
  12eac4:	e5d33000 	ldrb	r3, [r3]
  12eac8:	e3530001 	cmp	r3, #1
  12eacc:	9a000015 	bls	12eb28 <etharp_query+0x2b0>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
  12ead0:	e55b2021 	ldrb	r2, [fp, #-33]	; 0xffffffdf
  12ead4:	e30e3350 	movw	r3, #58192	; 0xe350
  12ead8:	e3403014 	movt	r3, #20
  12eadc:	e5c32000 	strb	r2, [r3]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
  12eae0:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  12eae4:	e3a02018 	mov	r2, #24
  12eae8:	e0030392 	mul	r3, r2, r3
  12eaec:	e2832008 	add	r2, r3, #8
  12eaf0:	e30e3260 	movw	r3, #57952	; 0xe260
  12eaf4:	e3403014 	movt	r3, #20
  12eaf8:	e0823003 	add	r3, r2, r3
  12eafc:	e2832004 	add	r2, r3, #4
  12eb00:	e3a03b02 	mov	r3, #2048	; 0x800
  12eb04:	e58d3000 	str	r3, [sp]
  12eb08:	e1a03002 	mov	r3, r2
  12eb0c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  12eb10:	e51b1038 	ldr	r1, [fp, #-56]	; 0xffffffc8
  12eb14:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  12eb18:	ebffe81c 	bl	128b90 <ethernet_output>
  12eb1c:	e1a03000 	mov	r3, r0
  12eb20:	e54b3005 	strb	r3, [fp, #-5]
  12eb24:	ea0000ba 	b	12ee14 <etharp_query+0x59c>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
  12eb28:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12eb2c:	e30e3260 	movw	r3, #57952	; 0xe260
  12eb30:	e3403014 	movt	r3, #20
  12eb34:	e3a01018 	mov	r1, #24
  12eb38:	e0020291 	mul	r2, r1, r2
  12eb3c:	e0833002 	add	r3, r3, r2
  12eb40:	e2833014 	add	r3, r3, #20
  12eb44:	e5d33000 	ldrb	r3, [r3]
  12eb48:	e3530001 	cmp	r3, #1
  12eb4c:	1a0000b0 	bne	12ee14 <etharp_query+0x59c>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
  12eb50:	e3a03000 	mov	r3, #0
  12eb54:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
  12eb58:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12eb5c:	e50b3010 	str	r3, [fp, #-16]
    while (p) {
  12eb60:	ea00001a 	b	12ebd0 <etharp_query+0x358>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
  12eb64:	e51b3010 	ldr	r3, [fp, #-16]
  12eb68:	e1d320ba 	ldrh	r2, [r3, #10]
  12eb6c:	e51b3010 	ldr	r3, [fp, #-16]
  12eb70:	e1d330b8 	ldrh	r3, [r3, #8]
  12eb74:	e1520003 	cmp	r2, r3
  12eb78:	1a00000a 	bne	12eba8 <etharp_query+0x330>
  12eb7c:	e51b3010 	ldr	r3, [fp, #-16]
  12eb80:	e5933000 	ldr	r3, [r3]
  12eb84:	e3530000 	cmp	r3, #0
  12eb88:	0a000006 	beq	12eba8 <etharp_query+0x330>
  12eb8c:	e3080944 	movw	r0, #35140	; 0x8944
  12eb90:	e3400014 	movt	r0, #20
  12eb94:	ebff515e 	bl	103114 <rt_kprintf>
  12eb98:	e3a01ffb 	mov	r1, #1004	; 0x3ec
  12eb9c:	e3080788 	movw	r0, #34696	; 0x8788
  12eba0:	e3400014 	movt	r0, #20
  12eba4:	ebff6fda 	bl	10ab14 <sys_arch_assert>
      if (p->type != PBUF_ROM) {
  12eba8:	e51b3010 	ldr	r3, [fp, #-16]
  12ebac:	e5d3300c 	ldrb	r3, [r3, #12]
  12ebb0:	e3530001 	cmp	r3, #1
  12ebb4:	0a000002 	beq	12ebc4 <etharp_query+0x34c>
        copy_needed = 1;
  12ebb8:	e3a03001 	mov	r3, #1
  12ebbc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        break;
  12ebc0:	ea000005 	b	12ebdc <etharp_query+0x364>
      }
      p = p->next;
  12ebc4:	e51b3010 	ldr	r3, [fp, #-16]
  12ebc8:	e5933000 	ldr	r3, [r3]
  12ebcc:	e50b3010 	str	r3, [fp, #-16]
    while (p) {
  12ebd0:	e51b3010 	ldr	r3, [fp, #-16]
  12ebd4:	e3530000 	cmp	r3, #0
  12ebd8:	1affffe1 	bne	12eb64 <etharp_query+0x2ec>
    }
    if (copy_needed) {
  12ebdc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12ebe0:	e3530000 	cmp	r3, #0
  12ebe4:	0a000014 	beq	12ec3c <etharp_query+0x3c4>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
  12ebe8:	e51b3010 	ldr	r3, [fp, #-16]
  12ebec:	e1d330b8 	ldrh	r3, [r3, #8]
  12ebf0:	e3a02000 	mov	r2, #0
  12ebf4:	e1a01003 	mov	r1, r3
  12ebf8:	e3a00002 	mov	r0, #2
  12ebfc:	ebffaccb 	bl	119f30 <pbuf_alloc>
  12ec00:	e50b0010 	str	r0, [fp, #-16]
      if (p != NULL) {
  12ec04:	e51b3010 	ldr	r3, [fp, #-16]
  12ec08:	e3530000 	cmp	r3, #0
  12ec0c:	0a00000e 	beq	12ec4c <etharp_query+0x3d4>
        if (pbuf_copy(p, q) != ERR_OK) {
  12ec10:	e51b1038 	ldr	r1, [fp, #-56]	; 0xffffffc8
  12ec14:	e51b0010 	ldr	r0, [fp, #-16]
  12ec18:	ebffb120 	bl	11b0a0 <pbuf_copy>
  12ec1c:	e1a03000 	mov	r3, r0
  12ec20:	e3530000 	cmp	r3, #0
  12ec24:	0a000008 	beq	12ec4c <etharp_query+0x3d4>
          pbuf_free(p);
  12ec28:	e51b0010 	ldr	r0, [fp, #-16]
  12ec2c:	ebffafc6 	bl	11ab4c <pbuf_free>
          p = NULL;
  12ec30:	e3a03000 	mov	r3, #0
  12ec34:	e50b3010 	str	r3, [fp, #-16]
  12ec38:	ea000003 	b	12ec4c <etharp_query+0x3d4>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
  12ec3c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12ec40:	e50b3010 	str	r3, [fp, #-16]
      pbuf_ref(p);
  12ec44:	e51b0010 	ldr	r0, [fp, #-16]
  12ec48:	ebffb059 	bl	11adb4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
  12ec4c:	e51b3010 	ldr	r3, [fp, #-16]
  12ec50:	e3530000 	cmp	r3, #0
  12ec54:	0a000064 	beq	12edec <etharp_query+0x574>
      /* queue packet ... */
#if ARP_QUEUEING
      struct etharp_q_entry *new_entry;
      /* allocate a new arp queue entry */
      new_entry = (struct etharp_q_entry *)memp_malloc(MEMP_ARP_QUEUE);
  12ec58:	e3002407 	movw	r2, #1031	; 0x407
  12ec5c:	e3081788 	movw	r1, #34696	; 0x8788
  12ec60:	e3401014 	movt	r1, #20
  12ec64:	e3a0000b 	mov	r0, #11
  12ec68:	ebffa841 	bl	118d74 <memp_malloc_fn>
  12ec6c:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
      if (new_entry != NULL) {
  12ec70:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12ec74:	e3530000 	cmp	r3, #0
  12ec78:	0a000056 	beq	12edd8 <etharp_query+0x560>
        unsigned int qlen = 0;
  12ec7c:	e3a03000 	mov	r3, #0
  12ec80:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        new_entry->next = 0;
  12ec84:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12ec88:	e3a02000 	mov	r2, #0
  12ec8c:	e5832000 	str	r2, [r3]
        new_entry->p = p;
  12ec90:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12ec94:	e51b2010 	ldr	r2, [fp, #-16]
  12ec98:	e5832004 	str	r2, [r3, #4]
        if (arp_table[i].q != NULL) {
  12ec9c:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12eca0:	e30e3260 	movw	r3, #57952	; 0xe260
  12eca4:	e3403014 	movt	r3, #20
  12eca8:	e3a01018 	mov	r1, #24
  12ecac:	e0020291 	mul	r2, r1, r2
  12ecb0:	e0833002 	add	r3, r3, r2
  12ecb4:	e5933000 	ldr	r3, [r3]
  12ecb8:	e3530000 	cmp	r3, #0
  12ecbc:	0a000019 	beq	12ed28 <etharp_query+0x4b0>
          /* queue was already existent, append the new entry to the end */
          struct etharp_q_entry *r;
          r = arp_table[i].q;
  12ecc0:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12ecc4:	e30e3260 	movw	r3, #57952	; 0xe260
  12ecc8:	e3403014 	movt	r3, #20
  12eccc:	e3a01018 	mov	r1, #24
  12ecd0:	e0020291 	mul	r2, r1, r2
  12ecd4:	e0833002 	add	r3, r3, r2
  12ecd8:	e5933000 	ldr	r3, [r3]
  12ecdc:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
          qlen++;
  12ece0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12ece4:	e2833001 	add	r3, r3, #1
  12ece8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
          while (r->next != NULL) {
  12ecec:	ea000005 	b	12ed08 <etharp_query+0x490>
            r = r->next;
  12ecf0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12ecf4:	e5933000 	ldr	r3, [r3]
  12ecf8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
            qlen++;
  12ecfc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12ed00:	e2833001 	add	r3, r3, #1
  12ed04:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
          while (r->next != NULL) {
  12ed08:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12ed0c:	e5933000 	ldr	r3, [r3]
  12ed10:	e3530000 	cmp	r3, #0
  12ed14:	1afffff5 	bne	12ecf0 <etharp_query+0x478>
          }
          r->next = new_entry;
  12ed18:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12ed1c:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  12ed20:	e5832000 	str	r2, [r3]
  12ed24:	ea000007 	b	12ed48 <etharp_query+0x4d0>
        } else {
          /* queue did not exist, first item in queue */
          arp_table[i].q = new_entry;
  12ed28:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12ed2c:	e30e3260 	movw	r3, #57952	; 0xe260
  12ed30:	e3403014 	movt	r3, #20
  12ed34:	e3a01018 	mov	r1, #24
  12ed38:	e0020291 	mul	r2, r1, r2
  12ed3c:	e0833002 	add	r3, r3, r2
  12ed40:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  12ed44:	e5832000 	str	r2, [r3]
        }
#if ARP_QUEUE_LEN
        if (qlen >= ARP_QUEUE_LEN) {
  12ed48:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12ed4c:	e3530002 	cmp	r3, #2
  12ed50:	9a00001d 	bls	12edcc <etharp_query+0x554>
          struct etharp_q_entry *old;
          old = arp_table[i].q;
  12ed54:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12ed58:	e30e3260 	movw	r3, #57952	; 0xe260
  12ed5c:	e3403014 	movt	r3, #20
  12ed60:	e3a01018 	mov	r1, #24
  12ed64:	e0020291 	mul	r2, r1, r2
  12ed68:	e0833002 	add	r3, r3, r2
  12ed6c:	e5933000 	ldr	r3, [r3]
  12ed70:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
          arp_table[i].q = arp_table[i].q->next;
  12ed74:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12ed78:	e30e3260 	movw	r3, #57952	; 0xe260
  12ed7c:	e3403014 	movt	r3, #20
  12ed80:	e3a01018 	mov	r1, #24
  12ed84:	e0020291 	mul	r2, r1, r2
  12ed88:	e0833002 	add	r3, r3, r2
  12ed8c:	e5933000 	ldr	r3, [r3]
  12ed90:	e15b12d1 	ldrsb	r1, [fp, #-33]	; 0xffffffdf
  12ed94:	e5932000 	ldr	r2, [r3]
  12ed98:	e30e3260 	movw	r3, #57952	; 0xe260
  12ed9c:	e3403014 	movt	r3, #20
  12eda0:	e3a00018 	mov	r0, #24
  12eda4:	e0010190 	mul	r1, r0, r1
  12eda8:	e0833001 	add	r3, r3, r1
  12edac:	e5832000 	str	r2, [r3]
          pbuf_free(old->p);
  12edb0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  12edb4:	e5933004 	ldr	r3, [r3, #4]
  12edb8:	e1a00003 	mov	r0, r3
  12edbc:	ebffaf62 	bl	11ab4c <pbuf_free>
          memp_free(MEMP_ARP_QUEUE, old);
  12edc0:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  12edc4:	e3a0000b 	mov	r0, #11
  12edc8:	ebffa851 	bl	118f14 <memp_free>
        }
#endif
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        result = ERR_OK;
  12edcc:	e3a03000 	mov	r3, #0
  12edd0:	e54b3005 	strb	r3, [fp, #-5]
  12edd4:	ea00000e 	b	12ee14 <etharp_query+0x59c>
      } else {
        /* the pool MEMP_ARP_QUEUE is empty */
        pbuf_free(p);
  12edd8:	e51b0010 	ldr	r0, [fp, #-16]
  12eddc:	ebffaf5a 	bl	11ab4c <pbuf_free>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
  12ede0:	e3e03000 	mvn	r3, #0
  12ede4:	e54b3005 	strb	r3, [fp, #-5]
  12ede8:	ea000009 	b	12ee14 <etharp_query+0x59c>
      arp_table[i].q = p;
      result = ERR_OK;
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
  12edec:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12edf0:	e3403057 	movt	r3, #87	; 0x57
  12edf4:	e1d332b4 	ldrh	r3, [r3, #36]	; 0x24
  12edf8:	e2833001 	add	r3, r3, #1
  12edfc:	e6ff2073 	uxth	r2, r3
  12ee00:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12ee04:	e3403057 	movt	r3, #87	; 0x57
  12ee08:	e1c322b4 	strh	r2, [r3, #36]	; 0x24
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
  12ee0c:	e3e03000 	mvn	r3, #0
  12ee10:	e54b3005 	strb	r3, [fp, #-5]
    }
  }
  return result;
  12ee14:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  12ee18:	e1a00003 	mov	r0, r3
  12ee1c:	e24bd004 	sub	sp, fp, #4
  12ee20:	e8bd8800 	pop	{fp, pc}

0012ee24 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
  12ee24:	e92d4800 	push	{fp, lr}
  12ee28:	e28db004 	add	fp, sp, #4
  12ee2c:	e24dd028 	sub	sp, sp, #40	; 0x28
  12ee30:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12ee34:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  12ee38:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  12ee3c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  struct pbuf *p;
  err_t result = ERR_OK;
  12ee40:	e3a03000 	mov	r3, #0
  12ee44:	e54b3005 	strb	r3, [fp, #-5]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
  12ee48:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12ee4c:	e3530000 	cmp	r3, #0
  12ee50:	1a000006 	bne	12ee70 <etharp_raw+0x4c>
  12ee54:	e30808cc 	movw	r0, #35020	; 0x88cc
  12ee58:	e3400014 	movt	r0, #20
  12ee5c:	ebff50ac 	bl	103114 <rt_kprintf>
  12ee60:	e3001458 	movw	r1, #1112	; 0x458
  12ee64:	e3080788 	movw	r0, #34696	; 0x8788
  12ee68:	e3400014 	movt	r0, #20
  12ee6c:	ebff6f28 	bl	10ab14 <sys_arch_assert>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
  12ee70:	e3a02000 	mov	r2, #0
  12ee74:	e3a0101c 	mov	r1, #28
  12ee78:	e3a00002 	mov	r0, #2
  12ee7c:	ebffac2b 	bl	119f30 <pbuf_alloc>
  12ee80:	e50b000c 	str	r0, [fp, #-12]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
  12ee84:	e51b300c 	ldr	r3, [fp, #-12]
  12ee88:	e3530000 	cmp	r3, #0
  12ee8c:	1a000009 	bne	12eeb8 <etharp_raw+0x94>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
  12ee90:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12ee94:	e3403057 	movt	r3, #87	; 0x57
  12ee98:	e1d332b4 	ldrh	r3, [r3, #36]	; 0x24
  12ee9c:	e2833001 	add	r3, r3, #1
  12eea0:	e6ff2073 	uxth	r2, r3
  12eea4:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12eea8:	e3403057 	movt	r3, #87	; 0x57
  12eeac:	e1c322b4 	strh	r2, [r3, #36]	; 0x24
    return ERR_MEM;
  12eeb0:	e3e03000 	mvn	r3, #0
  12eeb4:	ea00005b 	b	12f028 <etharp_raw+0x204>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
  12eeb8:	e51b300c 	ldr	r3, [fp, #-12]
  12eebc:	e1d330ba 	ldrh	r3, [r3, #10]
  12eec0:	e353001b 	cmp	r3, #27
  12eec4:	8a000006 	bhi	12eee4 <etharp_raw+0xc0>
  12eec8:	e3080960 	movw	r0, #35168	; 0x8960
  12eecc:	e3400014 	movt	r0, #20
  12eed0:	ebff508f 	bl	103114 <rt_kprintf>
  12eed4:	e3001464 	movw	r1, #1124	; 0x464
  12eed8:	e3080788 	movw	r0, #34696	; 0x8788
  12eedc:	e3400014 	movt	r0, #20
  12eee0:	ebff6f0b 	bl	10ab14 <sys_arch_assert>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
  12eee4:	e51b300c 	ldr	r3, [fp, #-12]
  12eee8:	e5933004 	ldr	r3, [r3, #4]
  12eeec:	e50b3010 	str	r3, [fp, #-16]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
  12eef0:	e1db31b0 	ldrh	r3, [fp, #16]
  12eef4:	e1a00003 	mov	r0, r3
  12eef8:	ebff9cdc 	bl	116270 <lwip_htons>
  12eefc:	e1a03000 	mov	r3, r0
  12ef00:	e1a02003 	mov	r2, r3
  12ef04:	e51b3010 	ldr	r3, [fp, #-16]
  12ef08:	e1c320b6 	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
  12ef0c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12ef10:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
  12ef14:	e3530006 	cmp	r3, #6
  12ef18:	0a000006 	beq	12ef38 <etharp_raw+0x114>
  12ef1c:	e3080994 	movw	r0, #35220	; 0x8994
  12ef20:	e3400014 	movt	r0, #20
  12ef24:	ebff507a 	bl	103114 <rt_kprintf>
  12ef28:	e300146b 	movw	r1, #1131	; 0x46b
  12ef2c:	e3080788 	movw	r0, #34696	; 0x8788
  12ef30:	e3400014 	movt	r0, #20
  12ef34:	ebff6ef6 	bl	10ab14 <sys_arch_assert>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
  12ef38:	e51b3010 	ldr	r3, [fp, #-16]
  12ef3c:	e2833008 	add	r3, r3, #8
  12ef40:	e3a02006 	mov	r2, #6
  12ef44:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  12ef48:	e1a00003 	mov	r0, r3
  12ef4c:	eb00452e 	bl	14040c <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
  12ef50:	e51b3010 	ldr	r3, [fp, #-16]
  12ef54:	e2833012 	add	r3, r3, #18
  12ef58:	e3a02006 	mov	r2, #6
  12ef5c:	e59b1008 	ldr	r1, [fp, #8]
  12ef60:	e1a00003 	mov	r0, r3
  12ef64:	eb004528 	bl	14040c <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
  12ef68:	e51b3010 	ldr	r3, [fp, #-16]
  12ef6c:	e283300e 	add	r3, r3, #14
  12ef70:	e59b2004 	ldr	r2, [fp, #4]
  12ef74:	e5922000 	ldr	r2, [r2]
  12ef78:	e5832000 	str	r2, [r3]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
  12ef7c:	e51b3010 	ldr	r3, [fp, #-16]
  12ef80:	e2833018 	add	r3, r3, #24
  12ef84:	e59b200c 	ldr	r2, [fp, #12]
  12ef88:	e5922000 	ldr	r2, [r2]
  12ef8c:	e5832000 	str	r2, [r3]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
  12ef90:	e51b3010 	ldr	r3, [fp, #-16]
  12ef94:	e3a02000 	mov	r2, #0
  12ef98:	e5c32000 	strb	r2, [r3]
  12ef9c:	e3a02000 	mov	r2, #0
  12efa0:	e3822001 	orr	r2, r2, #1
  12efa4:	e5c32001 	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
  12efa8:	e51b3010 	ldr	r3, [fp, #-16]
  12efac:	e3a02000 	mov	r2, #0
  12efb0:	e3822008 	orr	r2, r2, #8
  12efb4:	e5c32002 	strb	r2, [r3, #2]
  12efb8:	e3a02000 	mov	r2, #0
  12efbc:	e5c32003 	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
  12efc0:	e51b3010 	ldr	r3, [fp, #-16]
  12efc4:	e3a02006 	mov	r2, #6
  12efc8:	e5c32004 	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
  12efcc:	e51b3010 	ldr	r3, [fp, #-16]
  12efd0:	e3a02004 	mov	r2, #4
  12efd4:	e5c32005 	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
  12efd8:	e3003806 	movw	r3, #2054	; 0x806
  12efdc:	e58d3000 	str	r3, [sp]
  12efe0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12efe4:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  12efe8:	e51b100c 	ldr	r1, [fp, #-12]
  12efec:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12eff0:	ebffe6e6 	bl	128b90 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  12eff4:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12eff8:	e3403057 	movt	r3, #87	; 0x57
  12effc:	e1d331b8 	ldrh	r3, [r3, #24]
  12f000:	e2833001 	add	r3, r3, #1
  12f004:	e6ff2073 	uxth	r2, r3
  12f008:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12f00c:	e3403057 	movt	r3, #87	; 0x57
  12f010:	e1c321b8 	strh	r2, [r3, #24]
  /* free ARP query packet */
  pbuf_free(p);
  12f014:	e51b000c 	ldr	r0, [fp, #-12]
  12f018:	ebffaecb 	bl	11ab4c <pbuf_free>
  p = NULL;
  12f01c:	e3a03000 	mov	r3, #0
  12f020:	e50b300c 	str	r3, [fp, #-12]
  /* could not allocate pbuf for ARP request */

  return result;
  12f024:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  12f028:	e1a00003 	mov	r0, r3
  12f02c:	e24bd004 	sub	sp, fp, #4
  12f030:	e8bd8800 	pop	{fp, pc}

0012f034 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
  12f034:	e92d4800 	push	{fp, lr}
  12f038:	e28db004 	add	fp, sp, #4
  12f03c:	e24dd020 	sub	sp, sp, #32
  12f040:	e50b0008 	str	r0, [fp, #-8]
  12f044:	e50b100c 	str	r1, [fp, #-12]
  12f048:	e50b2010 	str	r2, [fp, #-16]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
  12f04c:	e51b3008 	ldr	r3, [fp, #-8]
  12f050:	e283103b 	add	r1, r3, #59	; 0x3b
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
  12f054:	e51b3008 	ldr	r3, [fp, #-8]
  12f058:	e283003b 	add	r0, r3, #59	; 0x3b
  12f05c:	e51b3008 	ldr	r3, [fp, #-8]
  12f060:	e2832004 	add	r2, r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
  12f064:	e3a03001 	mov	r3, #1
  12f068:	e58d300c 	str	r3, [sp, #12]
  12f06c:	e51b300c 	ldr	r3, [fp, #-12]
  12f070:	e58d3008 	str	r3, [sp, #8]
  12f074:	e308307c 	movw	r3, #32892	; 0x807c
  12f078:	e3403014 	movt	r3, #20
  12f07c:	e58d3004 	str	r3, [sp, #4]
  12f080:	e58d2000 	str	r2, [sp]
  12f084:	e1a03000 	mov	r3, r0
  12f088:	e51b2010 	ldr	r2, [fp, #-16]
  12f08c:	e51b0008 	ldr	r0, [fp, #-8]
  12f090:	ebffff63 	bl	12ee24 <etharp_raw>
  12f094:	e1a03000 	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
  12f098:	e1a00003 	mov	r0, r3
  12f09c:	e24bd004 	sub	sp, fp, #4
  12f0a0:	e8bd8800 	pop	{fp, pc}

0012f0a4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
  12f0a4:	e92d4800 	push	{fp, lr}
  12f0a8:	e28db004 	add	fp, sp, #4
  12f0ac:	e24dd008 	sub	sp, sp, #8
  12f0b0:	e50b0008 	str	r0, [fp, #-8]
  12f0b4:	e50b100c 	str	r1, [fp, #-12]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
  12f0b8:	e3082074 	movw	r2, #32884	; 0x8074
  12f0bc:	e3402014 	movt	r2, #20
  12f0c0:	e51b100c 	ldr	r1, [fp, #-12]
  12f0c4:	e51b0008 	ldr	r0, [fp, #-8]
  12f0c8:	ebffffd9 	bl	12f034 <etharp_request_dst>
  12f0cc:	e1a03000 	mov	r3, r0
}
  12f0d0:	e1a00003 	mov	r0, r3
  12f0d4:	e24bd004 	sub	sp, fp, #4
  12f0d8:	e8bd8800 	pop	{fp, pc}

0012f0dc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
  12f0dc:	e92d4800 	push	{fp, lr}
  12f0e0:	e28db004 	add	fp, sp, #4
  12f0e4:	e24dd038 	sub	sp, sp, #56	; 0x38
  12f0e8:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  12f0ec:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  struct icmp_echo_hdr *iecho;
  const struct ip_hdr *iphdr_in;
  u16_t hlen;
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  12f0f0:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12f0f4:	e3403057 	movt	r3, #87	; 0x57
  12f0f8:	e1d336b2 	ldrh	r3, [r3, #98]	; 0x62
  12f0fc:	e2833001 	add	r3, r3, #1
  12f100:	e6ff2073 	uxth	r2, r3
  12f104:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12f108:	e3403057 	movt	r3, #87	; 0x57
  12f10c:	e1c326b2 	strh	r2, [r3, #98]	; 0x62
  MIB2_STATS_INC(mib2.icmpinmsgs);
  12f110:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12f114:	e3403057 	movt	r3, #87	; 0x57
  12f118:	e59331a0 	ldr	r3, [r3, #416]	; 0x1a0
  12f11c:	e2832001 	add	r2, r3, #1
  12f120:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12f124:	e3403057 	movt	r3, #87	; 0x57
  12f128:	e58321a0 	str	r2, [r3, #416]	; 0x1a0

  iphdr_in = ip4_current_header();
  12f12c:	e30e3d68 	movw	r3, #60776	; 0xed68
  12f130:	e3403014 	movt	r3, #20
  12f134:	e5933008 	ldr	r3, [r3, #8]
  12f138:	e50b3008 	str	r3, [fp, #-8]
  hlen = IPH_HL(iphdr_in) * 4;
  12f13c:	e51b3008 	ldr	r3, [fp, #-8]
  12f140:	e5d33000 	ldrb	r3, [r3]
  12f144:	e6ff3073 	uxth	r3, r3
  12f148:	e203300f 	and	r3, r3, #15
  12f14c:	e6ff3073 	uxth	r3, r3
  12f150:	e1a03103 	lsl	r3, r3, #2
  12f154:	e14b30ba 	strh	r3, [fp, #-10]
  if (hlen < IP_HLEN) {
  12f158:	e15b30ba 	ldrh	r3, [fp, #-10]
  12f15c:	e3530013 	cmp	r3, #19
  12f160:	9a000182 	bls	12f770 <icmp_input+0x694>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
  12f164:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12f168:	e1d330ba 	ldrh	r3, [r3, #10]
  12f16c:	e3530003 	cmp	r3, #3
  12f170:	9a000180 	bls	12f778 <icmp_input+0x69c>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
  12f174:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12f178:	e5933004 	ldr	r3, [r3, #4]
  12f17c:	e5d33000 	ldrb	r3, [r3]
  12f180:	e54b300b 	strb	r3, [fp, #-11]
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
  12f184:	e55b300b 	ldrb	r3, [fp, #-11]
  12f188:	e3530000 	cmp	r3, #0
  12f18c:	0a000002 	beq	12f19c <icmp_input+0xc0>
  12f190:	e3530008 	cmp	r3, #8
  12f194:	0a000008 	beq	12f1bc <icmp_input+0xe0>
  12f198:	ea0000fd 	b	12f594 <icmp_input+0x4b8>
  case ICMP_ER:
    /* This is OK, echo reply might have been parsed by a raw PCB
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
  12f19c:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12f1a0:	e3403057 	movt	r3, #87	; 0x57
  12f1a4:	e59331c0 	ldr	r3, [r3, #448]	; 0x1c0
  12f1a8:	e2832001 	add	r2, r3, #1
  12f1ac:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12f1b0:	e3403057 	movt	r3, #87	; 0x57
  12f1b4:	e58321c0 	str	r2, [r3, #448]	; 0x1c0
    break;
  12f1b8:	ea000169 	b	12f764 <icmp_input+0x688>
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
  12f1bc:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12f1c0:	e3403057 	movt	r3, #87	; 0x57
  12f1c4:	e59331bc 	ldr	r3, [r3, #444]	; 0x1bc
  12f1c8:	e2832001 	add	r2, r3, #1
  12f1cc:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12f1d0:	e3403057 	movt	r3, #87	; 0x57
  12f1d4:	e58321bc 	str	r2, [r3, #444]	; 0x1bc
    src = ip4_current_dest_addr();
  12f1d8:	e59f3650 	ldr	r3, [pc, #1616]	; 12f830 <icmp_input+0x754>
  12f1dc:	e50b3010 	str	r3, [fp, #-16]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
  12f1e0:	e30e3d68 	movw	r3, #60776	; 0xed68
  12f1e4:	e3403014 	movt	r3, #20
  12f1e8:	e5933014 	ldr	r3, [r3, #20]
  12f1ec:	e20330f0 	and	r3, r3, #240	; 0xf0
  12f1f0:	e35300e0 	cmp	r3, #224	; 0xe0
  12f1f4:	0a000174 	beq	12f7cc <icmp_input+0x6f0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
  12f1f8:	e30e3d68 	movw	r3, #60776	; 0xed68
  12f1fc:	e3403014 	movt	r3, #20
  12f200:	e5932014 	ldr	r2, [r3, #20]
  12f204:	e30e3d68 	movw	r3, #60776	; 0xed68
  12f208:	e3403014 	movt	r3, #20
  12f20c:	e5933000 	ldr	r3, [r3]
  12f210:	e1a01003 	mov	r1, r3
  12f214:	e1a00002 	mov	r0, r2
  12f218:	eb000ba6 	bl	1320b8 <ip4_addr_isbroadcast_u32>
  12f21c:	e1a03000 	mov	r3, r0
  12f220:	e3530000 	cmp	r3, #0
  12f224:	1a00016a 	bne	12f7d4 <icmp_input+0x6f8>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
  12f228:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12f22c:	e1d330b8 	ldrh	r3, [r3, #8]
  12f230:	e3530007 	cmp	r3, #7
  12f234:	9a000151 	bls	12f780 <icmp_input+0x6a4>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
      goto lenerr;
    }
#if CHECKSUM_CHECK_ICMP
    IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
      if (inet_chksum_pbuf(p) != 0) {
  12f238:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f23c:	ebffa52a 	bl	1186ec <inet_chksum_pbuf>
  12f240:	e1a03000 	mov	r3, r0
  12f244:	e3530000 	cmp	r3, #0
  12f248:	0a000011 	beq	12f294 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
        pbuf_free(p);
  12f24c:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f250:	ebffae3d 	bl	11ab4c <pbuf_free>
        ICMP_STATS_INC(icmp.chkerr);
  12f254:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12f258:	e3403057 	movt	r3, #87	; 0x57
  12f25c:	e1d336b8 	ldrh	r3, [r3, #104]	; 0x68
  12f260:	e2833001 	add	r3, r3, #1
  12f264:	e6ff2073 	uxth	r2, r3
  12f268:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12f26c:	e3403057 	movt	r3, #87	; 0x57
  12f270:	e1c326b8 	strh	r2, [r3, #104]	; 0x68
        MIB2_STATS_INC(mib2.icmpinerrors);
  12f274:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12f278:	e3403057 	movt	r3, #87	; 0x57
  12f27c:	e59331a4 	ldr	r3, [r3, #420]	; 0x1a4
  12f280:	e2832001 	add	r2, r3, #1
  12f284:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12f288:	e3403057 	movt	r3, #87	; 0x57
  12f28c:	e58321a4 	str	r2, [r3, #420]	; 0x1a4
        return;
  12f290:	ea000164 	b	12f828 <icmp_input+0x74c>
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
  12f294:	e15b30ba 	ldrh	r3, [fp, #-10]
  12f298:	e2833010 	add	r3, r3, #16
  12f29c:	e6ff3073 	uxth	r3, r3
  12f2a0:	e6bf3073 	sxth	r3, r3
  12f2a4:	e1a01003 	mov	r1, r3
  12f2a8:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f2ac:	ebffae08 	bl	11aad4 <pbuf_header>
  12f2b0:	e1a03000 	mov	r3, r0
  12f2b4:	e3530000 	cmp	r3, #0
  12f2b8:	0a00003e 	beq	12f3b8 <icmp_input+0x2dc>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
  12f2bc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12f2c0:	e1d320b8 	ldrh	r2, [r3, #8]
  12f2c4:	e15b30ba 	ldrh	r3, [fp, #-10]
  12f2c8:	e0823003 	add	r3, r2, r3
  12f2cc:	e6ff3073 	uxth	r3, r3
  12f2d0:	e3a02000 	mov	r2, #0
  12f2d4:	e1a01003 	mov	r1, r3
  12f2d8:	e3a00002 	mov	r0, #2
  12f2dc:	ebffab13 	bl	119f30 <pbuf_alloc>
  12f2e0:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
      if (r == NULL) {
  12f2e4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12f2e8:	e3530000 	cmp	r3, #0
  12f2ec:	0a00013a 	beq	12f7dc <icmp_input+0x700>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
  12f2f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12f2f4:	e1d330ba 	ldrh	r3, [r3, #10]
  12f2f8:	e1a02003 	mov	r2, r3
  12f2fc:	e15b30ba 	ldrh	r3, [fp, #-10]
  12f300:	e2833008 	add	r3, r3, #8
  12f304:	e1520003 	cmp	r2, r3
  12f308:	2a000002 	bcs	12f318 <icmp_input+0x23c>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
  12f30c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  12f310:	ebffae0d 	bl	11ab4c <pbuf_free>
        goto icmperr;
  12f314:	ea000131 	b	12f7e0 <icmp_input+0x704>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
  12f318:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12f31c:	e5933004 	ldr	r3, [r3, #4]
  12f320:	e15b20ba 	ldrh	r2, [fp, #-10]
  12f324:	e51b1008 	ldr	r1, [fp, #-8]
  12f328:	e1a00003 	mov	r0, r3
  12f32c:	eb004436 	bl	14040c <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
  12f330:	e15b30ba 	ldrh	r3, [fp, #-10]
  12f334:	e2633000 	rsb	r3, r3, #0
  12f338:	e6ff3073 	uxth	r3, r3
  12f33c:	e6bf3073 	sxth	r3, r3
  12f340:	e1a01003 	mov	r1, r3
  12f344:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  12f348:	ebffade1 	bl	11aad4 <pbuf_header>
  12f34c:	e1a03000 	mov	r3, r0
  12f350:	e3530000 	cmp	r3, #0
  12f354:	0a000009 	beq	12f380 <icmp_input+0x2a4>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
  12f358:	e30809d8 	movw	r0, #35288	; 0x89d8
  12f35c:	e3400014 	movt	r0, #20
  12f360:	ebff4f6b 	bl	103114 <rt_kprintf>
  12f364:	e3a010af 	mov	r1, #175	; 0xaf
  12f368:	e3080a10 	movw	r0, #35344	; 0x8a10
  12f36c:	e3400014 	movt	r0, #20
  12f370:	ebff6de7 	bl	10ab14 <sys_arch_assert>
        pbuf_free(r);
  12f374:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  12f378:	ebffadf3 	bl	11ab4c <pbuf_free>
        goto icmperr;
  12f37c:	ea000117 	b	12f7e0 <icmp_input+0x704>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
  12f380:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  12f384:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  12f388:	ebffaf44 	bl	11b0a0 <pbuf_copy>
  12f38c:	e1a03000 	mov	r3, r0
  12f390:	e3530000 	cmp	r3, #0
  12f394:	0a000002 	beq	12f3a4 <icmp_input+0x2c8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
  12f398:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  12f39c:	ebffadea 	bl	11ab4c <pbuf_free>
        goto icmperr;
  12f3a0:	ea00010e 	b	12f7e0 <icmp_input+0x704>
      }
      /* free the original p */
      pbuf_free(p);
  12f3a4:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f3a8:	ebffade7 	bl	11ab4c <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
  12f3ac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12f3b0:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  12f3b4:	ea000014 	b	12f40c <icmp_input+0x330>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
  12f3b8:	e15b30ba 	ldrh	r3, [fp, #-10]
  12f3bc:	e26334ff 	rsb	r3, r3, #-16777216	; 0xff000000
  12f3c0:	e28338ff 	add	r3, r3, #16711680	; 0xff0000
  12f3c4:	e2833cff 	add	r3, r3, #65280	; 0xff00
  12f3c8:	e28330f0 	add	r3, r3, #240	; 0xf0
  12f3cc:	e6ff3073 	uxth	r3, r3
  12f3d0:	e6bf3073 	sxth	r3, r3
  12f3d4:	e1a01003 	mov	r1, r3
  12f3d8:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f3dc:	ebffadbc 	bl	11aad4 <pbuf_header>
  12f3e0:	e1a03000 	mov	r3, r0
  12f3e4:	e3530000 	cmp	r3, #0
  12f3e8:	0a000007 	beq	12f40c <icmp_input+0x330>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
  12f3ec:	e3080a44 	movw	r0, #35396	; 0x8a44
  12f3f0:	e3400014 	movt	r0, #20
  12f3f4:	ebff4f46 	bl	103114 <rt_kprintf>
  12f3f8:	e3a010c0 	mov	r1, #192	; 0xc0
  12f3fc:	e3080a10 	movw	r0, #35344	; 0x8a10
  12f400:	e3400014 	movt	r0, #20
  12f404:	ebff6dc2 	bl	10ab14 <sys_arch_assert>
        goto icmperr;
  12f408:	ea0000f4 	b	12f7e0 <icmp_input+0x704>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
  12f40c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12f410:	e5933004 	ldr	r3, [r3, #4]
  12f414:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    if (pbuf_header(p, (s16_t)hlen)) {
  12f418:	e15b30fa 	ldrsh	r3, [fp, #-10]
  12f41c:	e1a01003 	mov	r1, r3
  12f420:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f424:	ebffadaa 	bl	11aad4 <pbuf_header>
  12f428:	e1a03000 	mov	r3, r0
  12f42c:	e3530000 	cmp	r3, #0
  12f430:	1a0000ca 	bne	12f760 <icmp_input+0x684>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
  12f434:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12f438:	e5933004 	ldr	r3, [r3, #4]
  12f43c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
      ip4_addr_copy(iphdr->src, *src);
  12f440:	e51b3010 	ldr	r3, [fp, #-16]
  12f444:	e5932000 	ldr	r2, [r3]
  12f448:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12f44c:	e583200c 	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
  12f450:	e30e3d68 	movw	r3, #60776	; 0xed68
  12f454:	e3403014 	movt	r3, #20
  12f458:	e5932010 	ldr	r2, [r3, #16]
  12f45c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12f460:	e5832010 	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
  12f464:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f468:	e3a02000 	mov	r2, #0
  12f46c:	e5c32000 	strb	r2, [r3]
#if CHECKSUM_GEN_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
        /* adjust the checksum */
        if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
  12f470:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f474:	e1d330b2 	ldrh	r3, [r3, #2]
  12f478:	e6ff3073 	uxth	r3, r3
  12f47c:	e30f2ff7 	movw	r2, #65527	; 0xfff7
  12f480:	e1530002 	cmp	r3, r2
  12f484:	9a000007 	bls	12f4a8 <icmp_input+0x3cc>
          iecho->chksum += PP_HTONS(ICMP_ECHO << 8) + 1;
  12f488:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f48c:	e1d330b2 	ldrh	r3, [r3, #2]
  12f490:	e6ff3073 	uxth	r3, r3
  12f494:	e2833009 	add	r3, r3, #9
  12f498:	e6ff2073 	uxth	r2, r3
  12f49c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f4a0:	e1c320b2 	strh	r2, [r3, #2]
  12f4a4:	ea000006 	b	12f4c4 <icmp_input+0x3e8>
        } else {
          iecho->chksum += PP_HTONS(ICMP_ECHO << 8);
  12f4a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f4ac:	e1d330b2 	ldrh	r3, [r3, #2]
  12f4b0:	e6ff3073 	uxth	r3, r3
  12f4b4:	e2833008 	add	r3, r3, #8
  12f4b8:	e6ff2073 	uxth	r2, r3
  12f4bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f4c0:	e1c320b2 	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
  12f4c4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12f4c8:	e3e02000 	mvn	r2, #0
  12f4cc:	e5c32008 	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
  12f4d0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12f4d4:	e3a02000 	mov	r2, #0
  12f4d8:	e5c3200a 	strb	r2, [r3, #10]
  12f4dc:	e3a02000 	mov	r2, #0
  12f4e0:	e5c3200b 	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_IP) {
        IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
  12f4e4:	e15b30ba 	ldrh	r3, [fp, #-10]
  12f4e8:	e1a01003 	mov	r1, r3
  12f4ec:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12f4f0:	ebffa46d 	bl	1186ac <inet_chksum>
  12f4f4:	e1a03000 	mov	r3, r0
  12f4f8:	e1a02003 	mov	r2, r3
  12f4fc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12f500:	e1c320ba 	strh	r2, [r3, #10]
      }
#endif /* CHECKSUM_GEN_IP */

      ICMP_STATS_INC(icmp.xmit);
  12f504:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12f508:	e3403057 	movt	r3, #87	; 0x57
  12f50c:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  12f510:	e2833001 	add	r3, r3, #1
  12f514:	e6ff2073 	uxth	r2, r3
  12f518:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12f51c:	e3403057 	movt	r3, #87	; 0x57
  12f520:	e1c326b0 	strh	r2, [r3, #96]	; 0x60
      /* increase number of messages attempted to send */
      MIB2_STATS_INC(mib2.icmpoutmsgs);
  12f524:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12f528:	e3403057 	movt	r3, #87	; 0x57
  12f52c:	e59331d4 	ldr	r3, [r3, #468]	; 0x1d4
  12f530:	e2832001 	add	r2, r3, #1
  12f534:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12f538:	e3403057 	movt	r3, #87	; 0x57
  12f53c:	e58321d4 	str	r2, [r3, #468]	; 0x1d4
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);
  12f540:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12f544:	e3403057 	movt	r3, #87	; 0x57
  12f548:	e59331e8 	ldr	r3, [r3, #488]	; 0x1e8
  12f54c:	e2832001 	add	r2, r3, #1
  12f550:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12f554:	e3403057 	movt	r3, #87	; 0x57
  12f558:	e58321e8 	str	r2, [r3, #488]	; 0x1e8

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
  12f55c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  12f560:	e58d3008 	str	r3, [sp, #8]
  12f564:	e3a03001 	mov	r3, #1
  12f568:	e58d3004 	str	r3, [sp, #4]
  12f56c:	e3a03000 	mov	r3, #0
  12f570:	e58d3000 	str	r3, [sp]
  12f574:	e3a030ff 	mov	r3, #255	; 0xff
  12f578:	e3a02000 	mov	r2, #0
  12f57c:	e51b1010 	ldr	r1, [fp, #-16]
  12f580:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f584:	eb0008c5 	bl	1318a0 <ip4_output_if>
  12f588:	e1a03000 	mov	r3, r0
  12f58c:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
  12f590:	ea000072 	b	12f760 <icmp_input+0x684>
  default:
    if (type == ICMP_DUR) {
  12f594:	e55b300b 	ldrb	r3, [fp, #-11]
  12f598:	e3530003 	cmp	r3, #3
  12f59c:	1a000007 	bne	12f5c0 <icmp_input+0x4e4>
      MIB2_STATS_INC(mib2.icmpindestunreachs);
  12f5a0:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12f5a4:	e3403057 	movt	r3, #87	; 0x57
  12f5a8:	e59331a8 	ldr	r3, [r3, #424]	; 0x1a8
  12f5ac:	e2832001 	add	r2, r3, #1
  12f5b0:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12f5b4:	e3403057 	movt	r3, #87	; 0x57
  12f5b8:	e58321a8 	str	r2, [r3, #424]	; 0x1a8
  12f5bc:	ea000056 	b	12f71c <icmp_input+0x640>
    } else if (type == ICMP_TE) {
  12f5c0:	e55b300b 	ldrb	r3, [fp, #-11]
  12f5c4:	e353000b 	cmp	r3, #11
  12f5c8:	1a000007 	bne	12f5ec <icmp_input+0x510>
      MIB2_STATS_INC(mib2.icmpintimeexcds);
  12f5cc:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12f5d0:	e3403057 	movt	r3, #87	; 0x57
  12f5d4:	e59331ac 	ldr	r3, [r3, #428]	; 0x1ac
  12f5d8:	e2832001 	add	r2, r3, #1
  12f5dc:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12f5e0:	e3403057 	movt	r3, #87	; 0x57
  12f5e4:	e58321ac 	str	r2, [r3, #428]	; 0x1ac
  12f5e8:	ea00004b 	b	12f71c <icmp_input+0x640>
    } else if (type == ICMP_PP) {
  12f5ec:	e55b300b 	ldrb	r3, [fp, #-11]
  12f5f0:	e353000c 	cmp	r3, #12
  12f5f4:	1a000007 	bne	12f618 <icmp_input+0x53c>
      MIB2_STATS_INC(mib2.icmpinparmprobs);
  12f5f8:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12f5fc:	e3403057 	movt	r3, #87	; 0x57
  12f600:	e59331b0 	ldr	r3, [r3, #432]	; 0x1b0
  12f604:	e2832001 	add	r2, r3, #1
  12f608:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12f60c:	e3403057 	movt	r3, #87	; 0x57
  12f610:	e58321b0 	str	r2, [r3, #432]	; 0x1b0
  12f614:	ea000040 	b	12f71c <icmp_input+0x640>
    } else if (type == ICMP_SQ) {
  12f618:	e55b300b 	ldrb	r3, [fp, #-11]
  12f61c:	e3530004 	cmp	r3, #4
  12f620:	1a000007 	bne	12f644 <icmp_input+0x568>
      MIB2_STATS_INC(mib2.icmpinsrcquenchs);
  12f624:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12f628:	e3403057 	movt	r3, #87	; 0x57
  12f62c:	e59331b4 	ldr	r3, [r3, #436]	; 0x1b4
  12f630:	e2832001 	add	r2, r3, #1
  12f634:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12f638:	e3403057 	movt	r3, #87	; 0x57
  12f63c:	e58321b4 	str	r2, [r3, #436]	; 0x1b4
  12f640:	ea000035 	b	12f71c <icmp_input+0x640>
    } else if (type == ICMP_RD) {
  12f644:	e55b300b 	ldrb	r3, [fp, #-11]
  12f648:	e3530005 	cmp	r3, #5
  12f64c:	1a000007 	bne	12f670 <icmp_input+0x594>
      MIB2_STATS_INC(mib2.icmpinredirects);
  12f650:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12f654:	e3403057 	movt	r3, #87	; 0x57
  12f658:	e59331b8 	ldr	r3, [r3, #440]	; 0x1b8
  12f65c:	e2832001 	add	r2, r3, #1
  12f660:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12f664:	e3403057 	movt	r3, #87	; 0x57
  12f668:	e58321b8 	str	r2, [r3, #440]	; 0x1b8
  12f66c:	ea00002a 	b	12f71c <icmp_input+0x640>
    } else if (type == ICMP_TS) {
  12f670:	e55b300b 	ldrb	r3, [fp, #-11]
  12f674:	e353000d 	cmp	r3, #13
  12f678:	1a000007 	bne	12f69c <icmp_input+0x5c0>
      MIB2_STATS_INC(mib2.icmpintimestamps);
  12f67c:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12f680:	e3403057 	movt	r3, #87	; 0x57
  12f684:	e59331c4 	ldr	r3, [r3, #452]	; 0x1c4
  12f688:	e2832001 	add	r2, r3, #1
  12f68c:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12f690:	e3403057 	movt	r3, #87	; 0x57
  12f694:	e58321c4 	str	r2, [r3, #452]	; 0x1c4
  12f698:	ea00001f 	b	12f71c <icmp_input+0x640>
    } else if (type == ICMP_TSR) {
  12f69c:	e55b300b 	ldrb	r3, [fp, #-11]
  12f6a0:	e353000e 	cmp	r3, #14
  12f6a4:	1a000007 	bne	12f6c8 <icmp_input+0x5ec>
      MIB2_STATS_INC(mib2.icmpintimestampreps);
  12f6a8:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12f6ac:	e3403057 	movt	r3, #87	; 0x57
  12f6b0:	e59331c8 	ldr	r3, [r3, #456]	; 0x1c8
  12f6b4:	e2832001 	add	r2, r3, #1
  12f6b8:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12f6bc:	e3403057 	movt	r3, #87	; 0x57
  12f6c0:	e58321c8 	str	r2, [r3, #456]	; 0x1c8
  12f6c4:	ea000014 	b	12f71c <icmp_input+0x640>
    } else if (type == ICMP_AM) {
  12f6c8:	e55b300b 	ldrb	r3, [fp, #-11]
  12f6cc:	e3530011 	cmp	r3, #17
  12f6d0:	1a000007 	bne	12f6f4 <icmp_input+0x618>
      MIB2_STATS_INC(mib2.icmpinaddrmasks);
  12f6d4:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12f6d8:	e3403057 	movt	r3, #87	; 0x57
  12f6dc:	e59331cc 	ldr	r3, [r3, #460]	; 0x1cc
  12f6e0:	e2832001 	add	r2, r3, #1
  12f6e4:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12f6e8:	e3403057 	movt	r3, #87	; 0x57
  12f6ec:	e58321cc 	str	r2, [r3, #460]	; 0x1cc
  12f6f0:	ea000009 	b	12f71c <icmp_input+0x640>
    } else if (type == ICMP_AMR) {
  12f6f4:	e55b300b 	ldrb	r3, [fp, #-11]
  12f6f8:	e3530012 	cmp	r3, #18
  12f6fc:	1a000006 	bne	12f71c <icmp_input+0x640>
      MIB2_STATS_INC(mib2.icmpinaddrmaskreps);
  12f700:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12f704:	e3403057 	movt	r3, #87	; 0x57
  12f708:	e59331d0 	ldr	r3, [r3, #464]	; 0x1d0
  12f70c:	e2832001 	add	r2, r3, #1
  12f710:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12f714:	e3403057 	movt	r3, #87	; 0x57
  12f718:	e58321d0 	str	r2, [r3, #464]	; 0x1d0
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
  12f71c:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12f720:	e3403057 	movt	r3, #87	; 0x57
  12f724:	e1d337b0 	ldrh	r3, [r3, #112]	; 0x70
  12f728:	e2833001 	add	r3, r3, #1
  12f72c:	e6ff2073 	uxth	r2, r3
  12f730:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12f734:	e3403057 	movt	r3, #87	; 0x57
  12f738:	e1c327b0 	strh	r2, [r3, #112]	; 0x70
    ICMP_STATS_INC(icmp.drop);
  12f73c:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12f740:	e3403057 	movt	r3, #87	; 0x57
  12f744:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  12f748:	e2833001 	add	r3, r3, #1
  12f74c:	e6ff2073 	uxth	r2, r3
  12f750:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12f754:	e3403057 	movt	r3, #87	; 0x57
  12f758:	e1c326b6 	strh	r2, [r3, #102]	; 0x66
  12f75c:	ea000000 	b	12f764 <icmp_input+0x688>
    break;
  12f760:	e320f000 	nop	{0}
  }
  pbuf_free(p);
  12f764:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f768:	ebffacf7 	bl	11ab4c <pbuf_free>
  return;
  12f76c:	ea00002d 	b	12f828 <icmp_input+0x74c>
    goto lenerr;
  12f770:	e320f000 	nop	{0}
  12f774:	ea000002 	b	12f784 <icmp_input+0x6a8>
    goto lenerr;
  12f778:	e320f000 	nop	{0}
  12f77c:	ea000000 	b	12f784 <icmp_input+0x6a8>
      goto lenerr;
  12f780:	e320f000 	nop	{0}
lenerr:
  pbuf_free(p);
  12f784:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f788:	ebffacef 	bl	11ab4c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  12f78c:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12f790:	e3403057 	movt	r3, #87	; 0x57
  12f794:	e1d336ba 	ldrh	r3, [r3, #106]	; 0x6a
  12f798:	e2833001 	add	r3, r3, #1
  12f79c:	e6ff2073 	uxth	r2, r3
  12f7a0:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12f7a4:	e3403057 	movt	r3, #87	; 0x57
  12f7a8:	e1c326ba 	strh	r2, [r3, #106]	; 0x6a
  MIB2_STATS_INC(mib2.icmpinerrors);
  12f7ac:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12f7b0:	e3403057 	movt	r3, #87	; 0x57
  12f7b4:	e59331a4 	ldr	r3, [r3, #420]	; 0x1a4
  12f7b8:	e2832001 	add	r2, r3, #1
  12f7bc:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12f7c0:	e3403057 	movt	r3, #87	; 0x57
  12f7c4:	e58321a4 	str	r2, [r3, #420]	; 0x1a4
  return;
  12f7c8:	ea000016 	b	12f828 <icmp_input+0x74c>
      goto icmperr;
  12f7cc:	e320f000 	nop	{0}
  12f7d0:	ea000002 	b	12f7e0 <icmp_input+0x704>
      goto icmperr;
  12f7d4:	e320f000 	nop	{0}
  12f7d8:	ea000000 	b	12f7e0 <icmp_input+0x704>
        goto icmperr;
  12f7dc:	e320f000 	nop	{0}
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
  12f7e0:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f7e4:	ebffacd8 	bl	11ab4c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  12f7e8:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12f7ec:	e3403057 	movt	r3, #87	; 0x57
  12f7f0:	e1d337b4 	ldrh	r3, [r3, #116]	; 0x74
  12f7f4:	e2833001 	add	r3, r3, #1
  12f7f8:	e6ff2073 	uxth	r2, r3
  12f7fc:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12f800:	e3403057 	movt	r3, #87	; 0x57
  12f804:	e1c327b4 	strh	r2, [r3, #116]	; 0x74
  MIB2_STATS_INC(mib2.icmpinerrors);
  12f808:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12f80c:	e3403057 	movt	r3, #87	; 0x57
  12f810:	e59331a4 	ldr	r3, [r3, #420]	; 0x1a4
  12f814:	e2832001 	add	r2, r3, #1
  12f818:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12f81c:	e3403057 	movt	r3, #87	; 0x57
  12f820:	e58321a4 	str	r2, [r3, #420]	; 0x1a4
  return;
  12f824:	e320f000 	nop	{0}
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
  12f828:	e24bd004 	sub	sp, fp, #4
  12f82c:	e8bd8800 	pop	{fp, pc}
  12f830:	0014ed7c 	.word	0x0014ed7c

0012f834 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
  12f834:	e92d4800 	push	{fp, lr}
  12f838:	e28db004 	add	fp, sp, #4
  12f83c:	e24dd008 	sub	sp, sp, #8
  12f840:	e50b0008 	str	r0, [fp, #-8]
  12f844:	e50b100c 	str	r1, [fp, #-12]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  12f848:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12f84c:	e3403057 	movt	r3, #87	; 0x57
  12f850:	e59331dc 	ldr	r3, [r3, #476]	; 0x1dc
  12f854:	e2832001 	add	r2, r3, #1
  12f858:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12f85c:	e3403057 	movt	r3, #87	; 0x57
  12f860:	e58321dc 	str	r2, [r3, #476]	; 0x1dc
  icmp_send_response(p, ICMP_DUR, t);
  12f864:	e51b300c 	ldr	r3, [fp, #-12]
  12f868:	e6ef3073 	uxtb	r3, r3
  12f86c:	e1a02003 	mov	r2, r3
  12f870:	e3a01003 	mov	r1, #3
  12f874:	e51b0008 	ldr	r0, [fp, #-8]
  12f878:	eb000017 	bl	12f8dc <icmp_send_response>
}
  12f87c:	e320f000 	nop	{0}
  12f880:	e24bd004 	sub	sp, fp, #4
  12f884:	e8bd8800 	pop	{fp, pc}

0012f888 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
  12f888:	e92d4800 	push	{fp, lr}
  12f88c:	e28db004 	add	fp, sp, #4
  12f890:	e24dd008 	sub	sp, sp, #8
  12f894:	e50b0008 	str	r0, [fp, #-8]
  12f898:	e50b100c 	str	r1, [fp, #-12]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  12f89c:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12f8a0:	e3403057 	movt	r3, #87	; 0x57
  12f8a4:	e59331e0 	ldr	r3, [r3, #480]	; 0x1e0
  12f8a8:	e2832001 	add	r2, r3, #1
  12f8ac:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12f8b0:	e3403057 	movt	r3, #87	; 0x57
  12f8b4:	e58321e0 	str	r2, [r3, #480]	; 0x1e0
  icmp_send_response(p, ICMP_TE, t);
  12f8b8:	e51b300c 	ldr	r3, [fp, #-12]
  12f8bc:	e6ef3073 	uxtb	r3, r3
  12f8c0:	e1a02003 	mov	r2, r3
  12f8c4:	e3a0100b 	mov	r1, #11
  12f8c8:	e51b0008 	ldr	r0, [fp, #-8]
  12f8cc:	eb000002 	bl	12f8dc <icmp_send_response>
}
  12f8d0:	e320f000 	nop	{0}
  12f8d4:	e24bd004 	sub	sp, fp, #4
  12f8d8:	e8bd8800 	pop	{fp, pc}

0012f8dc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
  12f8dc:	e92d4800 	push	{fp, lr}
  12f8e0:	e28db004 	add	fp, sp, #4
  12f8e4:	e24dd030 	sub	sp, sp, #48	; 0x30
  12f8e8:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  12f8ec:	e1a03001 	mov	r3, r1
  12f8f0:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  12f8f4:	e1a03002 	mov	r3, r2
  12f8f8:	e54b3022 	strb	r3, [fp, #-34]	; 0xffffffde
  struct icmp_echo_hdr *icmphdr;
  ip4_addr_t iphdr_src;
  struct netif *netif;

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);
  12f8fc:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12f900:	e3403057 	movt	r3, #87	; 0x57
  12f904:	e59331d4 	ldr	r3, [r3, #468]	; 0x1d4
  12f908:	e2832001 	add	r2, r3, #1
  12f90c:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12f910:	e3403057 	movt	r3, #87	; 0x57
  12f914:	e58321d4 	str	r2, [r3, #468]	; 0x1d4

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
  12f918:	e3a02000 	mov	r2, #0
  12f91c:	e3a01024 	mov	r1, #36	; 0x24
  12f920:	e3a00001 	mov	r0, #1
  12f924:	ebffa981 	bl	119f30 <pbuf_alloc>
  12f928:	e50b0008 	str	r0, [fp, #-8]
                 PBUF_RAM);
  if (q == NULL) {
  12f92c:	e51b3008 	ldr	r3, [fp, #-8]
  12f930:	e3530000 	cmp	r3, #0
  12f934:	1a000007 	bne	12f958 <icmp_send_response+0x7c>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
  12f938:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12f93c:	e3403057 	movt	r3, #87	; 0x57
  12f940:	e59331d8 	ldr	r3, [r3, #472]	; 0x1d8
  12f944:	e2832001 	add	r2, r3, #1
  12f948:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12f94c:	e3403057 	movt	r3, #87	; 0x57
  12f950:	e58321d8 	str	r2, [r3, #472]	; 0x1d8
  12f954:	ea000055 	b	12fab0 <icmp_send_response+0x1d4>
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
  12f958:	e51b3008 	ldr	r3, [fp, #-8]
  12f95c:	e1d330ba 	ldrh	r3, [r3, #10]
  12f960:	e3530023 	cmp	r3, #35	; 0x23
  12f964:	8a000006 	bhi	12f984 <icmp_send_response+0xa8>
  12f968:	e3080a78 	movw	r0, #35448	; 0x8a78
  12f96c:	e3400014 	movt	r0, #20
  12f970:	ebff4de7 	bl	103114 <rt_kprintf>
  12f974:	e3001162 	movw	r1, #354	; 0x162
  12f978:	e3080a10 	movw	r0, #35344	; 0x8a10
  12f97c:	e3400014 	movt	r0, #20
  12f980:	ebff6c63 	bl	10ab14 <sys_arch_assert>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
  12f984:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12f988:	e5933004 	ldr	r3, [r3, #4]
  12f98c:	e50b300c 	str	r3, [fp, #-12]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
  12f990:	e51b3008 	ldr	r3, [fp, #-8]
  12f994:	e5933004 	ldr	r3, [r3, #4]
  12f998:	e50b3010 	str	r3, [fp, #-16]
  icmphdr->type = type;
  12f99c:	e51b3010 	ldr	r3, [fp, #-16]
  12f9a0:	e55b2021 	ldrb	r2, [fp, #-33]	; 0xffffffdf
  12f9a4:	e5c32000 	strb	r2, [r3]
  icmphdr->code = code;
  12f9a8:	e51b3010 	ldr	r3, [fp, #-16]
  12f9ac:	e55b2022 	ldrb	r2, [fp, #-34]	; 0xffffffde
  12f9b0:	e5c32001 	strb	r2, [r3, #1]
  icmphdr->id = 0;
  12f9b4:	e51b3010 	ldr	r3, [fp, #-16]
  12f9b8:	e3a02000 	mov	r2, #0
  12f9bc:	e5c32004 	strb	r2, [r3, #4]
  12f9c0:	e3a02000 	mov	r2, #0
  12f9c4:	e5c32005 	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
  12f9c8:	e51b3010 	ldr	r3, [fp, #-16]
  12f9cc:	e3a02000 	mov	r2, #0
  12f9d0:	e5c32006 	strb	r2, [r3, #6]
  12f9d4:	e3a02000 	mov	r2, #0
  12f9d8:	e5c32007 	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
  12f9dc:	e51b3008 	ldr	r3, [fp, #-8]
  12f9e0:	e5933004 	ldr	r3, [r3, #4]
  12f9e4:	e2830008 	add	r0, r3, #8
  12f9e8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12f9ec:	e5933004 	ldr	r3, [r3, #4]
  12f9f0:	e3a0201c 	mov	r2, #28
  12f9f4:	e1a01003 	mov	r1, r3
  12f9f8:	eb004283 	bl	14040c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
  12f9fc:	e51b300c 	ldr	r3, [fp, #-12]
  12fa00:	e593300c 	ldr	r3, [r3, #12]
  12fa04:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
  12fa08:	e24b3018 	sub	r3, fp, #24
  12fa0c:	e1a00003 	mov	r0, r3
  12fa10:	eb0004c9 	bl	130d3c <ip4_route>
  12fa14:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
#endif
  if (netif != NULL) {
  12fa18:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12fa1c:	e3530000 	cmp	r3, #0
  12fa20:	0a000020 	beq	12faa8 <icmp_send_response+0x1cc>
    /* calculate checksum */
    icmphdr->chksum = 0;
  12fa24:	e51b3010 	ldr	r3, [fp, #-16]
  12fa28:	e3a02000 	mov	r2, #0
  12fa2c:	e5c32002 	strb	r2, [r3, #2]
  12fa30:	e3a02000 	mov	r2, #0
  12fa34:	e5c32003 	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
  12fa38:	e51b3008 	ldr	r3, [fp, #-8]
  12fa3c:	e1d330ba 	ldrh	r3, [r3, #10]
  12fa40:	e1a01003 	mov	r1, r3
  12fa44:	e51b0010 	ldr	r0, [fp, #-16]
  12fa48:	ebffa317 	bl	1186ac <inet_chksum>
  12fa4c:	e1a03000 	mov	r3, r0
  12fa50:	e1a02003 	mov	r2, r3
  12fa54:	e51b3010 	ldr	r3, [fp, #-16]
  12fa58:	e1c320b2 	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
  12fa5c:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12fa60:	e3403057 	movt	r3, #87	; 0x57
  12fa64:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  12fa68:	e2833001 	add	r3, r3, #1
  12fa6c:	e6ff2073 	uxth	r2, r3
  12fa70:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12fa74:	e3403057 	movt	r3, #87	; 0x57
  12fa78:	e1c326b0 	strh	r2, [r3, #96]	; 0x60
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
  12fa7c:	e24b2018 	sub	r2, fp, #24
  12fa80:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12fa84:	e58d3008 	str	r3, [sp, #8]
  12fa88:	e3a03001 	mov	r3, #1
  12fa8c:	e58d3004 	str	r3, [sp, #4]
  12fa90:	e3a03000 	mov	r3, #0
  12fa94:	e58d3000 	str	r3, [sp]
  12fa98:	e3a030ff 	mov	r3, #255	; 0xff
  12fa9c:	e3a01000 	mov	r1, #0
  12faa0:	e51b0008 	ldr	r0, [fp, #-8]
  12faa4:	eb00077d 	bl	1318a0 <ip4_output_if>
  }
  pbuf_free(q);
  12faa8:	e51b0008 	ldr	r0, [fp, #-8]
  12faac:	ebffac26 	bl	11ab4c <pbuf_free>
}
  12fab0:	e24bd004 	sub	sp, fp, #4
  12fab4:	e8bd8800 	pop	{fp, pc}

0012fab8 <igmp_init>:
/**
 * Initialize the IGMP module
 */
void
igmp_init(void)
{
  12fab8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  12fabc:	e28db000 	add	fp, sp, #0
  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_init: initializing\n"));

  IP4_ADDR(&allsystems, 224, 0, 0, 1);
  12fac0:	e30e2354 	movw	r2, #58196	; 0xe354
  12fac4:	e3402014 	movt	r2, #20
  12fac8:	e3a030e0 	mov	r3, #224	; 0xe0
  12facc:	e3403100 	movt	r3, #256	; 0x100
  12fad0:	e5823000 	str	r3, [r2]
  IP4_ADDR(&allrouters, 224, 0, 0, 2);
  12fad4:	e30e2358 	movw	r2, #58200	; 0xe358
  12fad8:	e3402014 	movt	r2, #20
  12fadc:	e3a030e0 	mov	r3, #224	; 0xe0
  12fae0:	e3403200 	movt	r3, #512	; 0x200
  12fae4:	e5823000 	str	r3, [r2]
}
  12fae8:	e320f000 	nop	{0}
  12faec:	e28bd000 	add	sp, fp, #0
  12faf0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  12faf4:	e12fff1e 	bx	lr

0012faf8 <igmp_start>:
 *
 * @param netif network interface on which start IGMP processing
 */
err_t
igmp_start(struct netif *netif)
{
  12faf8:	e92d4800 	push	{fp, lr}
  12fafc:	e28db004 	add	fp, sp, #4
  12fb00:	e24dd010 	sub	sp, sp, #16
  12fb04:	e50b0010 	str	r0, [fp, #-16]
  struct igmp_group* group;

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_start: starting IGMP processing on if %p\n", (void*)netif));

  group = igmp_lookup_group(netif, &allsystems);
  12fb08:	e30e1354 	movw	r1, #58196	; 0xe354
  12fb0c:	e3401014 	movt	r1, #20
  12fb10:	e51b0010 	ldr	r0, [fp, #-16]
  12fb14:	eb000078 	bl	12fcfc <igmp_lookup_group>
  12fb18:	e50b0008 	str	r0, [fp, #-8]

  if (group != NULL) {
  12fb1c:	e51b3008 	ldr	r3, [fp, #-8]
  12fb20:	e3530000 	cmp	r3, #0
  12fb24:	0a000015 	beq	12fb80 <igmp_start+0x88>
    group->group_state = IGMP_GROUP_IDLE_MEMBER;
  12fb28:	e51b3008 	ldr	r3, [fp, #-8]
  12fb2c:	e3a02002 	mov	r2, #2
  12fb30:	e5c32009 	strb	r2, [r3, #9]
    group->use++;
  12fb34:	e51b3008 	ldr	r3, [fp, #-8]
  12fb38:	e5d3300c 	ldrb	r3, [r3, #12]
  12fb3c:	e2833001 	add	r3, r3, #1
  12fb40:	e6ef2073 	uxtb	r2, r3
  12fb44:	e51b3008 	ldr	r3, [fp, #-8]
  12fb48:	e5c3200c 	strb	r2, [r3, #12]

    /* Allow the igmp messages at the MAC level */
    if (netif->igmp_mac_filter != NULL) {
  12fb4c:	e51b3010 	ldr	r3, [fp, #-16]
  12fb50:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  12fb54:	e3530000 	cmp	r3, #0
  12fb58:	0a000006 	beq	12fb78 <igmp_start+0x80>
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_start: igmp_mac_filter(ADD "));
      ip4_addr_debug_print_val(IGMP_DEBUG, allsystems);
      LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void*)netif));
      netif->igmp_mac_filter(netif, &allsystems, NETIF_ADD_MAC_FILTER);
  12fb5c:	e51b3010 	ldr	r3, [fp, #-16]
  12fb60:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  12fb64:	e3a02001 	mov	r2, #1
  12fb68:	e30e1354 	movw	r1, #58196	; 0xe354
  12fb6c:	e3401014 	movt	r1, #20
  12fb70:	e51b0010 	ldr	r0, [fp, #-16]
  12fb74:	e12fff33 	blx	r3
    }

    return ERR_OK;
  12fb78:	e3a03000 	mov	r3, #0
  12fb7c:	ea000000 	b	12fb84 <igmp_start+0x8c>
  }

  return ERR_MEM;
  12fb80:	e3e03000 	mvn	r3, #0
}
  12fb84:	e1a00003 	mov	r0, r3
  12fb88:	e24bd004 	sub	sp, fp, #4
  12fb8c:	e8bd8800 	pop	{fp, pc}

0012fb90 <igmp_stop>:
 *
 * @param netif network interface on which stop IGMP processing
 */
err_t
igmp_stop(struct netif *netif)
{
  12fb90:	e92d4800 	push	{fp, lr}
  12fb94:	e28db004 	add	fp, sp, #4
  12fb98:	e24dd010 	sub	sp, sp, #16
  12fb9c:	e50b0010 	str	r0, [fp, #-16]
  struct igmp_group *group = netif_igmp_data(netif);
  12fba0:	e51b3010 	ldr	r3, [fp, #-16]
  12fba4:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  12fba8:	e50b3008 	str	r3, [fp, #-8]

  netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_IGMP, NULL);
  12fbac:	e51b3010 	ldr	r3, [fp, #-16]
  12fbb0:	e3a02000 	mov	r2, #0
  12fbb4:	e583202c 	str	r2, [r3, #44]	; 0x2c

  while (group != NULL) {
  12fbb8:	ea000012 	b	12fc08 <igmp_stop+0x78>
    struct igmp_group *next = group->next; /* avoid use-after-free below */
  12fbbc:	e51b3008 	ldr	r3, [fp, #-8]
  12fbc0:	e5933000 	ldr	r3, [r3]
  12fbc4:	e50b300c 	str	r3, [fp, #-12]

    /* disable the group at the MAC level */
    if (netif->igmp_mac_filter != NULL) {
  12fbc8:	e51b3010 	ldr	r3, [fp, #-16]
  12fbcc:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  12fbd0:	e3530000 	cmp	r3, #0
  12fbd4:	0a000006 	beq	12fbf4 <igmp_stop+0x64>
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_stop: igmp_mac_filter(DEL "));
      ip4_addr_debug_print(IGMP_DEBUG, &group->group_address);
      LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void*)netif));
      netif->igmp_mac_filter(netif, &(group->group_address), NETIF_DEL_MAC_FILTER);
  12fbd8:	e51b3010 	ldr	r3, [fp, #-16]
  12fbdc:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  12fbe0:	e51b2008 	ldr	r2, [fp, #-8]
  12fbe4:	e2821004 	add	r1, r2, #4
  12fbe8:	e3a02000 	mov	r2, #0
  12fbec:	e51b0010 	ldr	r0, [fp, #-16]
  12fbf0:	e12fff33 	blx	r3
    }

    /* free group */
    memp_free(MEMP_IGMP_GROUP, group);
  12fbf4:	e51b1008 	ldr	r1, [fp, #-8]
  12fbf8:	e3a0000c 	mov	r0, #12
  12fbfc:	ebffa4c4 	bl	118f14 <memp_free>

    /* move to "next" */
    group = next;
  12fc00:	e51b300c 	ldr	r3, [fp, #-12]
  12fc04:	e50b3008 	str	r3, [fp, #-8]
  while (group != NULL) {
  12fc08:	e51b3008 	ldr	r3, [fp, #-8]
  12fc0c:	e3530000 	cmp	r3, #0
  12fc10:	1affffe9 	bne	12fbbc <igmp_stop+0x2c>
  }
  return ERR_OK;
  12fc14:	e3a03000 	mov	r3, #0
}
  12fc18:	e1a00003 	mov	r0, r3
  12fc1c:	e24bd004 	sub	sp, fp, #4
  12fc20:	e8bd8800 	pop	{fp, pc}

0012fc24 <igmp_report_groups>:
 *
 * @param netif network interface on which report IGMP memberships
 */
void
igmp_report_groups(struct netif *netif)
{
  12fc24:	e92d4800 	push	{fp, lr}
  12fc28:	e28db004 	add	fp, sp, #4
  12fc2c:	e24dd010 	sub	sp, sp, #16
  12fc30:	e50b0010 	str	r0, [fp, #-16]
  struct igmp_group *group = netif_igmp_data(netif);
  12fc34:	e51b3010 	ldr	r3, [fp, #-16]
  12fc38:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  12fc3c:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_report_groups: sending IGMP reports on if %p\n", (void*)netif));

  /* Skip the first group in the list, it is always the allsystems group added in igmp_start() */
  if(group != NULL) {
  12fc40:	e51b3008 	ldr	r3, [fp, #-8]
  12fc44:	e3530000 	cmp	r3, #0
  12fc48:	0a000009 	beq	12fc74 <igmp_report_groups+0x50>
    group = group->next;
  12fc4c:	e51b3008 	ldr	r3, [fp, #-8]
  12fc50:	e5933000 	ldr	r3, [r3]
  12fc54:	e50b3008 	str	r3, [fp, #-8]
  }
  
  while (group != NULL) {
  12fc58:	ea000005 	b	12fc74 <igmp_report_groups+0x50>
    igmp_delaying_member(group, IGMP_JOIN_DELAYING_MEMBER_TMR);
  12fc5c:	e3a01005 	mov	r1, #5
  12fc60:	e51b0008 	ldr	r0, [fp, #-8]
  12fc64:	eb000372 	bl	130a34 <igmp_delaying_member>
    group = group->next;
  12fc68:	e51b3008 	ldr	r3, [fp, #-8]
  12fc6c:	e5933000 	ldr	r3, [r3]
  12fc70:	e50b3008 	str	r3, [fp, #-8]
  while (group != NULL) {
  12fc74:	e51b3008 	ldr	r3, [fp, #-8]
  12fc78:	e3530000 	cmp	r3, #0
  12fc7c:	1afffff6 	bne	12fc5c <igmp_report_groups+0x38>
  }
}
  12fc80:	e320f000 	nop	{0}
  12fc84:	e24bd004 	sub	sp, fp, #4
  12fc88:	e8bd8800 	pop	{fp, pc}

0012fc8c <igmp_lookfor_group>:
 * @return a struct igmp_group* if the group has been found,
 *         NULL if the group wasn't found.
 */
struct igmp_group *
igmp_lookfor_group(struct netif *ifp, const ip4_addr_t *addr)
{
  12fc8c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  12fc90:	e28db000 	add	fp, sp, #0
  12fc94:	e24dd014 	sub	sp, sp, #20
  12fc98:	e50b0010 	str	r0, [fp, #-16]
  12fc9c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct igmp_group *group = netif_igmp_data(ifp);
  12fca0:	e51b3010 	ldr	r3, [fp, #-16]
  12fca4:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  12fca8:	e50b3008 	str	r3, [fp, #-8]

  while (group != NULL) {
  12fcac:	ea00000a 	b	12fcdc <igmp_lookfor_group+0x50>
    if (ip4_addr_cmp(&(group->group_address), addr)) {
  12fcb0:	e51b3008 	ldr	r3, [fp, #-8]
  12fcb4:	e5932004 	ldr	r2, [r3, #4]
  12fcb8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12fcbc:	e5933000 	ldr	r3, [r3]
  12fcc0:	e1520003 	cmp	r2, r3
  12fcc4:	1a000001 	bne	12fcd0 <igmp_lookfor_group+0x44>
      return group;
  12fcc8:	e51b3008 	ldr	r3, [fp, #-8]
  12fccc:	ea000006 	b	12fcec <igmp_lookfor_group+0x60>
    }
    group = group->next;
  12fcd0:	e51b3008 	ldr	r3, [fp, #-8]
  12fcd4:	e5933000 	ldr	r3, [r3]
  12fcd8:	e50b3008 	str	r3, [fp, #-8]
  while (group != NULL) {
  12fcdc:	e51b3008 	ldr	r3, [fp, #-8]
  12fce0:	e3530000 	cmp	r3, #0
  12fce4:	1afffff1 	bne	12fcb0 <igmp_lookfor_group+0x24>
  }

  /* to be clearer, we return NULL here instead of
   * 'group' (which is also NULL at this point).
   */
  return NULL;
  12fce8:	e3a03000 	mov	r3, #0
}
  12fcec:	e1a00003 	mov	r0, r3
  12fcf0:	e28bd000 	add	sp, fp, #0
  12fcf4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  12fcf8:	e12fff1e 	bx	lr

0012fcfc <igmp_lookup_group>:
 * @return a struct igmp_group*,
 *         NULL on memory error.
 */
static struct igmp_group *
igmp_lookup_group(struct netif *ifp, const ip4_addr_t *addr)
{
  12fcfc:	e92d4800 	push	{fp, lr}
  12fd00:	e28db004 	add	fp, sp, #4
  12fd04:	e24dd010 	sub	sp, sp, #16
  12fd08:	e50b0010 	str	r0, [fp, #-16]
  12fd0c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct igmp_group *group;
  struct igmp_group *list_head = netif_igmp_data(ifp);
  12fd10:	e51b3010 	ldr	r3, [fp, #-16]
  12fd14:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  12fd18:	e50b3008 	str	r3, [fp, #-8]

  /* Search if the group already exists */
  group = igmp_lookfor_group(ifp, addr);
  12fd1c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  12fd20:	e51b0010 	ldr	r0, [fp, #-16]
  12fd24:	ebffffd8 	bl	12fc8c <igmp_lookfor_group>
  12fd28:	e50b000c 	str	r0, [fp, #-12]
  if (group != NULL) {
  12fd2c:	e51b300c 	ldr	r3, [fp, #-12]
  12fd30:	e3530000 	cmp	r3, #0
  12fd34:	0a000001 	beq	12fd40 <igmp_lookup_group+0x44>
    /* Group already exists. */
    return group;
  12fd38:	e51b300c 	ldr	r3, [fp, #-12]
  12fd3c:	ea00004b 	b	12fe70 <igmp_lookup_group+0x174>
  }
  
  /* Group doesn't exist yet, create a new one */
  group = (struct igmp_group *)memp_malloc(MEMP_IGMP_GROUP);
  12fd40:	e3002101 	movw	r2, #257	; 0x101
  12fd44:	e3081aa4 	movw	r1, #35492	; 0x8aa4
  12fd48:	e3401014 	movt	r1, #20
  12fd4c:	e3a0000c 	mov	r0, #12
  12fd50:	ebffa407 	bl	118d74 <memp_malloc_fn>
  12fd54:	e50b000c 	str	r0, [fp, #-12]
  if (group != NULL) {
  12fd58:	e51b300c 	ldr	r3, [fp, #-12]
  12fd5c:	e3530000 	cmp	r3, #0
  12fd60:	0a000041 	beq	12fe6c <igmp_lookup_group+0x170>
    ip4_addr_set(&(group->group_address), addr);
  12fd64:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12fd68:	e3530000 	cmp	r3, #0
  12fd6c:	0a000002 	beq	12fd7c <igmp_lookup_group+0x80>
  12fd70:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12fd74:	e5933000 	ldr	r3, [r3]
  12fd78:	ea000000 	b	12fd80 <igmp_lookup_group+0x84>
  12fd7c:	e3a03000 	mov	r3, #0
  12fd80:	e51b200c 	ldr	r2, [fp, #-12]
  12fd84:	e5823004 	str	r3, [r2, #4]
    group->timer              = 0; /* Not running */
  12fd88:	e51b300c 	ldr	r3, [fp, #-12]
  12fd8c:	e3a02000 	mov	r2, #0
  12fd90:	e1c320ba 	strh	r2, [r3, #10]
    group->group_state        = IGMP_GROUP_NON_MEMBER;
  12fd94:	e51b300c 	ldr	r3, [fp, #-12]
  12fd98:	e3a02000 	mov	r2, #0
  12fd9c:	e5c32009 	strb	r2, [r3, #9]
    group->last_reporter_flag = 0;
  12fda0:	e51b300c 	ldr	r3, [fp, #-12]
  12fda4:	e3a02000 	mov	r2, #0
  12fda8:	e5c32008 	strb	r2, [r3, #8]
    group->use                = 0;
  12fdac:	e51b300c 	ldr	r3, [fp, #-12]
  12fdb0:	e3a02000 	mov	r2, #0
  12fdb4:	e5c3200c 	strb	r2, [r3, #12]

    /* Ensure allsystems group is always first in list */    
    if (list_head == NULL) {
  12fdb8:	e51b3008 	ldr	r3, [fp, #-8]
  12fdbc:	e3530000 	cmp	r3, #0
  12fdc0:	1a000014 	bne	12fe18 <igmp_lookup_group+0x11c>
      /* this is the first entry in linked list */
      LWIP_ASSERT("igmp_lookup_group: first group must be allsystems",
  12fdc4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12fdc8:	e5932000 	ldr	r2, [r3]
  12fdcc:	e30e3354 	movw	r3, #58196	; 0xe354
  12fdd0:	e3403014 	movt	r3, #20
  12fdd4:	e5933000 	ldr	r3, [r3]
  12fdd8:	e1520003 	cmp	r2, r3
  12fddc:	0a000006 	beq	12fdfc <igmp_lookup_group+0x100>
  12fde0:	e3080ad8 	movw	r0, #35544	; 0x8ad8
  12fde4:	e3400014 	movt	r0, #20
  12fde8:	ebff4cc9 	bl	103114 <rt_kprintf>
  12fdec:	e300110d 	movw	r1, #269	; 0x10d
  12fdf0:	e3080aa4 	movw	r0, #35492	; 0x8aa4
  12fdf4:	e3400014 	movt	r0, #20
  12fdf8:	ebff6b45 	bl	10ab14 <sys_arch_assert>
        (ip4_addr_cmp(addr, &allsystems) != 0));
      group->next = NULL;
  12fdfc:	e51b300c 	ldr	r3, [fp, #-12]
  12fe00:	e3a02000 	mov	r2, #0
  12fe04:	e5832000 	str	r2, [r3]
      netif_set_client_data(ifp, LWIP_NETIF_CLIENT_DATA_INDEX_IGMP, group);
  12fe08:	e51b3010 	ldr	r3, [fp, #-16]
  12fe0c:	e51b200c 	ldr	r2, [fp, #-12]
  12fe10:	e583202c 	str	r2, [r3, #44]	; 0x2c
  12fe14:	ea000014 	b	12fe6c <igmp_lookup_group+0x170>
    } else {
      /* append _after_ first entry */
      LWIP_ASSERT("igmp_lookup_group: all except first group must not be allsystems",
  12fe18:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12fe1c:	e5932000 	ldr	r2, [r3]
  12fe20:	e30e3354 	movw	r3, #58196	; 0xe354
  12fe24:	e3403014 	movt	r3, #20
  12fe28:	e5933000 	ldr	r3, [r3]
  12fe2c:	e1520003 	cmp	r2, r3
  12fe30:	1a000006 	bne	12fe50 <igmp_lookup_group+0x154>
  12fe34:	e3080b0c 	movw	r0, #35596	; 0x8b0c
  12fe38:	e3400014 	movt	r0, #20
  12fe3c:	ebff4cb4 	bl	103114 <rt_kprintf>
  12fe40:	e3001113 	movw	r1, #275	; 0x113
  12fe44:	e3080aa4 	movw	r0, #35492	; 0x8aa4
  12fe48:	e3400014 	movt	r0, #20
  12fe4c:	ebff6b30 	bl	10ab14 <sys_arch_assert>
        (ip4_addr_cmp(addr, &allsystems) == 0));
      group->next = list_head->next;
  12fe50:	e51b3008 	ldr	r3, [fp, #-8]
  12fe54:	e5932000 	ldr	r2, [r3]
  12fe58:	e51b300c 	ldr	r3, [fp, #-12]
  12fe5c:	e5832000 	str	r2, [r3]
      list_head->next = group;
  12fe60:	e51b3008 	ldr	r3, [fp, #-8]
  12fe64:	e51b200c 	ldr	r2, [fp, #-12]
  12fe68:	e5832000 	str	r2, [r3]

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_lookup_group: %sallocated a new group with address ", (group?"":"impossible to ")));
  ip4_addr_debug_print(IGMP_DEBUG, addr);
  LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void*)ifp));

  return group;
  12fe6c:	e51b300c 	ldr	r3, [fp, #-12]
}
  12fe70:	e1a00003 	mov	r0, r3
  12fe74:	e24bd004 	sub	sp, fp, #4
  12fe78:	e8bd8800 	pop	{fp, pc}

0012fe7c <igmp_remove_group>:
 * @param group the group to remove from the global igmp_group_list
 * @return ERR_OK if group was removed from the list, an err_t otherwise
 */
static err_t
igmp_remove_group(struct netif* netif, struct igmp_group *group)
{
  12fe7c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  12fe80:	e28db000 	add	fp, sp, #0
  12fe84:	e24dd014 	sub	sp, sp, #20
  12fe88:	e50b0010 	str	r0, [fp, #-16]
  12fe8c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  err_t err = ERR_OK;
  12fe90:	e3a03000 	mov	r3, #0
  12fe94:	e54b3005 	strb	r3, [fp, #-5]
  struct igmp_group *tmp_group;

  /* Skip the first group in the list, it is always the allsystems group added in igmp_start() */
  for (tmp_group = netif_igmp_data(netif); tmp_group != NULL; tmp_group = tmp_group->next) {
  12fe98:	e51b3010 	ldr	r3, [fp, #-16]
  12fe9c:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  12fea0:	e50b300c 	str	r3, [fp, #-12]
  12fea4:	ea00000c 	b	12fedc <igmp_remove_group+0x60>
    if (tmp_group->next == group) {
  12fea8:	e51b300c 	ldr	r3, [fp, #-12]
  12feac:	e5933000 	ldr	r3, [r3]
  12feb0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  12feb4:	e1520003 	cmp	r2, r3
  12feb8:	1a000004 	bne	12fed0 <igmp_remove_group+0x54>
      tmp_group->next = group->next;
  12febc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12fec0:	e5932000 	ldr	r2, [r3]
  12fec4:	e51b300c 	ldr	r3, [fp, #-12]
  12fec8:	e5832000 	str	r2, [r3]
      break;
  12fecc:	ea000005 	b	12fee8 <igmp_remove_group+0x6c>
  for (tmp_group = netif_igmp_data(netif); tmp_group != NULL; tmp_group = tmp_group->next) {
  12fed0:	e51b300c 	ldr	r3, [fp, #-12]
  12fed4:	e5933000 	ldr	r3, [r3]
  12fed8:	e50b300c 	str	r3, [fp, #-12]
  12fedc:	e51b300c 	ldr	r3, [fp, #-12]
  12fee0:	e3530000 	cmp	r3, #0
  12fee4:	1affffef 	bne	12fea8 <igmp_remove_group+0x2c>
    }
  }
  /* Group not found in the global igmp_group_list */
  if (tmp_group == NULL) {
  12fee8:	e51b300c 	ldr	r3, [fp, #-12]
  12feec:	e3530000 	cmp	r3, #0
  12fef0:	1a000001 	bne	12fefc <igmp_remove_group+0x80>
    err = ERR_ARG;
  12fef4:	e3e0300f 	mvn	r3, #15
  12fef8:	e54b3005 	strb	r3, [fp, #-5]
  }

  return err;
  12fefc:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  12ff00:	e1a00003 	mov	r0, r3
  12ff04:	e28bd000 	add	sp, fp, #0
  12ff08:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  12ff0c:	e12fff1e 	bx	lr

0012ff10 <igmp_input>:
 * @param inp network interface on which the packet was received
 * @param dest destination ip address of the igmp packet
 */
void
igmp_input(struct pbuf *p, struct netif *inp, const ip4_addr_t *dest)
{
  12ff10:	e92d4800 	push	{fp, lr}
  12ff14:	e28db004 	add	fp, sp, #4
  12ff18:	e24dd020 	sub	sp, sp, #32
  12ff1c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12ff20:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  12ff24:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  struct igmp_msg*   igmp;
  struct igmp_group* group;
  struct igmp_group* groupref;

  IGMP_STATS_INC(igmp.recv);
  12ff28:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12ff2c:	e3403057 	movt	r3, #87	; 0x57
  12ff30:	e1d337ba 	ldrh	r3, [r3, #122]	; 0x7a
  12ff34:	e2833001 	add	r3, r3, #1
  12ff38:	e6ff2073 	uxth	r2, r3
  12ff3c:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12ff40:	e3403057 	movt	r3, #87	; 0x57
  12ff44:	e1c327ba 	strh	r2, [r3, #122]	; 0x7a

  /* Note that the length CAN be greater than 8 but only 8 are used - All are included in the checksum */
  if (p->len < IGMP_MINLEN) {
  12ff48:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12ff4c:	e1d330ba 	ldrh	r3, [r3, #10]
  12ff50:	e3530007 	cmp	r3, #7
  12ff54:	8a00000a 	bhi	12ff84 <igmp_input+0x74>
    pbuf_free(p);
  12ff58:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12ff5c:	ebffaafa 	bl	11ab4c <pbuf_free>
    IGMP_STATS_INC(igmp.lenerr);
  12ff60:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12ff64:	e3403057 	movt	r3, #87	; 0x57
  12ff68:	e1d338b0 	ldrh	r3, [r3, #128]	; 0x80
  12ff6c:	e2833001 	add	r3, r3, #1
  12ff70:	e6ff2073 	uxth	r2, r3
  12ff74:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12ff78:	e3403057 	movt	r3, #87	; 0x57
  12ff7c:	e1c328b0 	strh	r2, [r3, #128]	; 0x80
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: length error\n"));
    return;
  12ff80:	ea0000c9 	b	1302ac <igmp_input+0x39c>
  LWIP_DEBUGF(IGMP_DEBUG, (" to address "));
  ip4_addr_debug_print(IGMP_DEBUG, &(ip4_current_header()->dest));
  LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void*)inp));

  /* Now calculate and check the checksum */
  igmp = (struct igmp_msg *)p->payload;
  12ff84:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12ff88:	e5933004 	ldr	r3, [r3, #4]
  12ff8c:	e50b3010 	str	r3, [fp, #-16]
  if (inet_chksum(igmp, p->len)) {
  12ff90:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12ff94:	e1d330ba 	ldrh	r3, [r3, #10]
  12ff98:	e1a01003 	mov	r1, r3
  12ff9c:	e51b0010 	ldr	r0, [fp, #-16]
  12ffa0:	ebffa1c1 	bl	1186ac <inet_chksum>
  12ffa4:	e1a03000 	mov	r3, r0
  12ffa8:	e3530000 	cmp	r3, #0
  12ffac:	0a00000a 	beq	12ffdc <igmp_input+0xcc>
    pbuf_free(p);
  12ffb0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12ffb4:	ebffaae4 	bl	11ab4c <pbuf_free>
    IGMP_STATS_INC(igmp.chkerr);
  12ffb8:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12ffbc:	e3403057 	movt	r3, #87	; 0x57
  12ffc0:	e1d337be 	ldrh	r3, [r3, #126]	; 0x7e
  12ffc4:	e2833001 	add	r3, r3, #1
  12ffc8:	e6ff2073 	uxth	r2, r3
  12ffcc:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  12ffd0:	e3403057 	movt	r3, #87	; 0x57
  12ffd4:	e1c327be 	strh	r2, [r3, #126]	; 0x7e
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: checksum error\n"));
    return;
  12ffd8:	ea0000b3 	b	1302ac <igmp_input+0x39c>
  }

  /* Packet is ok so find an existing group */
  group = igmp_lookfor_group(inp, dest); /* use the destination IP address of incoming packet */
  12ffdc:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  12ffe0:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12ffe4:	ebffff28 	bl	12fc8c <igmp_lookfor_group>
  12ffe8:	e50b0008 	str	r0, [fp, #-8]

  /* If group can be found or create... */
  if (!group) {
  12ffec:	e51b3008 	ldr	r3, [fp, #-8]
  12fff0:	e3530000 	cmp	r3, #0
  12fff4:	1a00000a 	bne	130024 <igmp_input+0x114>
    pbuf_free(p);
  12fff8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12fffc:	ebffaad2 	bl	11ab4c <pbuf_free>
    IGMP_STATS_INC(igmp.drop);
  130000:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  130004:	e3403057 	movt	r3, #87	; 0x57
  130008:	e1d337bc 	ldrh	r3, [r3, #124]	; 0x7c
  13000c:	e2833001 	add	r3, r3, #1
  130010:	e6ff2073 	uxth	r2, r3
  130014:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  130018:	e3403057 	movt	r3, #87	; 0x57
  13001c:	e1c327bc 	strh	r2, [r3, #124]	; 0x7c
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: IGMP frame not for us\n"));
    return;
  130020:	ea0000a1 	b	1302ac <igmp_input+0x39c>
  }

  /* NOW ACT ON THE INCOMING MESSAGE TYPE... */
  switch (igmp->igmp_msgtype) {
  130024:	e51b3010 	ldr	r3, [fp, #-16]
  130028:	e5d33000 	ldrb	r3, [r3]
  13002c:	e3530011 	cmp	r3, #17
  130030:	0a000002 	beq	130040 <igmp_input+0x130>
  130034:	e3530016 	cmp	r3, #22
  130038:	0a000078 	beq	130220 <igmp_input+0x310>
  13003c:	ea00008d 	b	130278 <igmp_input+0x368>
  case IGMP_MEMB_QUERY:
    /* IGMP_MEMB_QUERY to the "all systems" address ? */
    if ((ip4_addr_cmp(dest, &allsystems)) && ip4_addr_isany(&igmp->igmp_group_address)) {
  130040:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  130044:	e5932000 	ldr	r2, [r3]
  130048:	e30e3354 	movw	r3, #58196	; 0xe354
  13004c:	e3403014 	movt	r3, #20
  130050:	e5933000 	ldr	r3, [r3]
  130054:	e1520003 	cmp	r2, r3
  130058:	1a000035 	bne	130134 <igmp_input+0x224>
  13005c:	e51b3010 	ldr	r3, [fp, #-16]
  130060:	e2833004 	add	r3, r3, #4
  130064:	e3530000 	cmp	r3, #0
  130068:	0a000003 	beq	13007c <igmp_input+0x16c>
  13006c:	e51b3010 	ldr	r3, [fp, #-16]
  130070:	e5933004 	ldr	r3, [r3, #4]
  130074:	e3530000 	cmp	r3, #0
  130078:	1a00002d 	bne	130134 <igmp_input+0x224>
      /* THIS IS THE GENERAL QUERY */
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: General IGMP_MEMB_QUERY on \"ALL SYSTEMS\" address (224.0.0.1) [igmp_maxresp=%i]\n", (int)(igmp->igmp_maxresp)));

      if (igmp->igmp_maxresp == 0) {
  13007c:	e51b3010 	ldr	r3, [fp, #-16]
  130080:	e5d33001 	ldrb	r3, [r3, #1]
  130084:	e3530000 	cmp	r3, #0
  130088:	1a00000b 	bne	1300bc <igmp_input+0x1ac>
        IGMP_STATS_INC(igmp.rx_v1);
  13008c:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  130090:	e3403057 	movt	r3, #87	; 0x57
  130094:	e1d338b6 	ldrh	r3, [r3, #134]	; 0x86
  130098:	e2833001 	add	r3, r3, #1
  13009c:	e6ff2073 	uxth	r2, r3
  1300a0:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  1300a4:	e3403057 	movt	r3, #87	; 0x57
  1300a8:	e1c328b6 	strh	r2, [r3, #134]	; 0x86
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: got an all hosts query with time== 0 - this is V1 and not implemented - treat as v2\n"));
        igmp->igmp_maxresp = IGMP_V1_DELAYING_MEMBER_TMR;
  1300ac:	e51b3010 	ldr	r3, [fp, #-16]
  1300b0:	e3a0200a 	mov	r2, #10
  1300b4:	e5c32001 	strb	r2, [r3, #1]
  1300b8:	ea000007 	b	1300dc <igmp_input+0x1cc>
      } else {
        IGMP_STATS_INC(igmp.rx_general);
  1300bc:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  1300c0:	e3403057 	movt	r3, #87	; 0x57
  1300c4:	e1d338ba 	ldrh	r3, [r3, #138]	; 0x8a
  1300c8:	e2833001 	add	r3, r3, #1
  1300cc:	e6ff2073 	uxth	r2, r3
  1300d0:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  1300d4:	e3403057 	movt	r3, #87	; 0x57
  1300d8:	e1c328ba 	strh	r2, [r3, #138]	; 0x8a
      }

      groupref = netif_igmp_data(inp);
  1300dc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1300e0:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  1300e4:	e50b300c 	str	r3, [fp, #-12]
      
      /* Do not send messages on the all systems group address! */
      /* Skip the first group in the list, it is always the allsystems group added in igmp_start() */
      if(groupref != NULL) {
  1300e8:	e51b300c 	ldr	r3, [fp, #-12]
  1300ec:	e3530000 	cmp	r3, #0
  1300f0:	0a00000b 	beq	130124 <igmp_input+0x214>
        groupref = groupref->next;
  1300f4:	e51b300c 	ldr	r3, [fp, #-12]
  1300f8:	e5933000 	ldr	r3, [r3]
  1300fc:	e50b300c 	str	r3, [fp, #-12]
      }

      while (groupref) {
  130100:	ea000007 	b	130124 <igmp_input+0x214>
        igmp_delaying_member(groupref, igmp->igmp_maxresp);
  130104:	e51b3010 	ldr	r3, [fp, #-16]
  130108:	e5d33001 	ldrb	r3, [r3, #1]
  13010c:	e1a01003 	mov	r1, r3
  130110:	e51b000c 	ldr	r0, [fp, #-12]
  130114:	eb000246 	bl	130a34 <igmp_delaying_member>
        groupref = groupref->next;
  130118:	e51b300c 	ldr	r3, [fp, #-12]
  13011c:	e5933000 	ldr	r3, [r3]
  130120:	e50b300c 	str	r3, [fp, #-12]
      while (groupref) {
  130124:	e51b300c 	ldr	r3, [fp, #-12]
  130128:	e3530000 	cmp	r3, #0
  13012c:	1afffff4 	bne	130104 <igmp_input+0x1f4>
    if ((ip4_addr_cmp(dest, &allsystems)) && ip4_addr_isany(&igmp->igmp_group_address)) {
  130130:	ea000039 	b	13021c <igmp_input+0x30c>
      }
    } else {
      /* IGMP_MEMB_QUERY to a specific group ? */
      if (!ip4_addr_isany(&igmp->igmp_group_address)) {
  130134:	e51b3010 	ldr	r3, [fp, #-16]
  130138:	e2833004 	add	r3, r3, #4
  13013c:	e3530000 	cmp	r3, #0
  130140:	0a00002c 	beq	1301f8 <igmp_input+0x2e8>
  130144:	e51b3010 	ldr	r3, [fp, #-16]
  130148:	e5933004 	ldr	r3, [r3, #4]
  13014c:	e3530000 	cmp	r3, #0
  130150:	0a000028 	beq	1301f8 <igmp_input+0x2e8>
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: IGMP_MEMB_QUERY to a specific group "));
        ip4_addr_debug_print(IGMP_DEBUG, &igmp->igmp_group_address);
        if (ip4_addr_cmp(dest, &allsystems)) {
  130154:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  130158:	e5932000 	ldr	r2, [r3]
  13015c:	e30e3354 	movw	r3, #58196	; 0xe354
  130160:	e3403014 	movt	r3, #20
  130164:	e5933000 	ldr	r3, [r3]
  130168:	e1520003 	cmp	r2, r3
  13016c:	1a000007 	bne	130190 <igmp_input+0x280>
          ip4_addr_t groupaddr;
          LWIP_DEBUGF(IGMP_DEBUG, (" using \"ALL SYSTEMS\" address (224.0.0.1) [igmp_maxresp=%i]\n", (int)(igmp->igmp_maxresp)));
          /* we first need to re-look for the group since we used dest last time */
          ip4_addr_copy(groupaddr, igmp->igmp_group_address);
  130170:	e51b3010 	ldr	r3, [fp, #-16]
  130174:	e5933004 	ldr	r3, [r3, #4]
  130178:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
          group = igmp_lookfor_group(inp, &groupaddr);
  13017c:	e24b3014 	sub	r3, fp, #20
  130180:	e1a01003 	mov	r1, r3
  130184:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  130188:	ebfffebf 	bl	12fc8c <igmp_lookfor_group>
  13018c:	e50b0008 	str	r0, [fp, #-8]
        } else {
          LWIP_DEBUGF(IGMP_DEBUG, (" with the group address as destination [igmp_maxresp=%i]\n", (int)(igmp->igmp_maxresp)));
        }

        if (group != NULL) {
  130190:	e51b3008 	ldr	r3, [fp, #-8]
  130194:	e3530000 	cmp	r3, #0
  130198:	0a00000d 	beq	1301d4 <igmp_input+0x2c4>
          IGMP_STATS_INC(igmp.rx_group);
  13019c:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  1301a0:	e3403057 	movt	r3, #87	; 0x57
  1301a4:	e1d338b8 	ldrh	r3, [r3, #136]	; 0x88
  1301a8:	e2833001 	add	r3, r3, #1
  1301ac:	e6ff2073 	uxth	r2, r3
  1301b0:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  1301b4:	e3403057 	movt	r3, #87	; 0x57
  1301b8:	e1c328b8 	strh	r2, [r3, #136]	; 0x88
          igmp_delaying_member(group, igmp->igmp_maxresp);
  1301bc:	e51b3010 	ldr	r3, [fp, #-16]
  1301c0:	e5d33001 	ldrb	r3, [r3, #1]
  1301c4:	e1a01003 	mov	r1, r3
  1301c8:	e51b0008 	ldr	r0, [fp, #-8]
  1301cc:	eb000218 	bl	130a34 <igmp_delaying_member>
        if (group != NULL) {
  1301d0:	ea000011 	b	13021c <igmp_input+0x30c>
        } else {
          IGMP_STATS_INC(igmp.drop);
  1301d4:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  1301d8:	e3403057 	movt	r3, #87	; 0x57
  1301dc:	e1d337bc 	ldrh	r3, [r3, #124]	; 0x7c
  1301e0:	e2833001 	add	r3, r3, #1
  1301e4:	e6ff2073 	uxth	r2, r3
  1301e8:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  1301ec:	e3403057 	movt	r3, #87	; 0x57
  1301f0:	e1c327bc 	strh	r2, [r3, #124]	; 0x7c
        if (group != NULL) {
  1301f4:	ea000008 	b	13021c <igmp_input+0x30c>
        }
      } else {
        IGMP_STATS_INC(igmp.proterr);
  1301f8:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  1301fc:	e3403057 	movt	r3, #87	; 0x57
  130200:	e1d338b4 	ldrh	r3, [r3, #132]	; 0x84
  130204:	e2833001 	add	r3, r3, #1
  130208:	e6ff2073 	uxth	r2, r3
  13020c:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  130210:	e3403057 	movt	r3, #87	; 0x57
  130214:	e1c328b4 	strh	r2, [r3, #132]	; 0x84
      }
    }
    break;
  130218:	ea000020 	b	1302a0 <igmp_input+0x390>
  13021c:	ea00001f 	b	1302a0 <igmp_input+0x390>
  case IGMP_V2_MEMB_REPORT:
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: IGMP_V2_MEMB_REPORT\n"));
    IGMP_STATS_INC(igmp.rx_report);
  130220:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  130224:	e3403057 	movt	r3, #87	; 0x57
  130228:	e1d338bc 	ldrh	r3, [r3, #140]	; 0x8c
  13022c:	e2833001 	add	r3, r3, #1
  130230:	e6ff2073 	uxth	r2, r3
  130234:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  130238:	e3403057 	movt	r3, #87	; 0x57
  13023c:	e1c328bc 	strh	r2, [r3, #140]	; 0x8c
    if (group->group_state == IGMP_GROUP_DELAYING_MEMBER) {
  130240:	e51b3008 	ldr	r3, [fp, #-8]
  130244:	e5d33009 	ldrb	r3, [r3, #9]
  130248:	e3530001 	cmp	r3, #1
  13024c:	1a000012 	bne	13029c <igmp_input+0x38c>
      /* This is on a specific group we have already looked up */
      group->timer = 0; /* stopped */
  130250:	e51b3008 	ldr	r3, [fp, #-8]
  130254:	e3a02000 	mov	r2, #0
  130258:	e1c320ba 	strh	r2, [r3, #10]
      group->group_state = IGMP_GROUP_IDLE_MEMBER;
  13025c:	e51b3008 	ldr	r3, [fp, #-8]
  130260:	e3a02002 	mov	r2, #2
  130264:	e5c32009 	strb	r2, [r3, #9]
      group->last_reporter_flag = 0;
  130268:	e51b3008 	ldr	r3, [fp, #-8]
  13026c:	e3a02000 	mov	r2, #0
  130270:	e5c32008 	strb	r2, [r3, #8]
    }
    break;
  130274:	ea000008 	b	13029c <igmp_input+0x38c>
  default:
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: unexpected msg %d in state %d on group %p on if %p\n",
      igmp->igmp_msgtype, group->group_state, (void*)&group, (void*)inp));
    IGMP_STATS_INC(igmp.proterr);
  130278:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  13027c:	e3403057 	movt	r3, #87	; 0x57
  130280:	e1d338b4 	ldrh	r3, [r3, #132]	; 0x84
  130284:	e2833001 	add	r3, r3, #1
  130288:	e6ff2073 	uxth	r2, r3
  13028c:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  130290:	e3403057 	movt	r3, #87	; 0x57
  130294:	e1c328b4 	strh	r2, [r3, #132]	; 0x84
    break;
  130298:	ea000000 	b	1302a0 <igmp_input+0x390>
    break;
  13029c:	e320f000 	nop	{0}
  }

  pbuf_free(p);
  1302a0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1302a4:	ebffaa28 	bl	11ab4c <pbuf_free>
  return;
  1302a8:	e320f000 	nop	{0}
}
  1302ac:	e24bd004 	sub	sp, fp, #4
  1302b0:	e8bd8800 	pop	{fp, pc}

001302b4 <igmp_joingroup>:
 * @param groupaddr the ip address of the group which to join
 * @return ERR_OK if group was joined on the netif(s), an err_t otherwise
 */
err_t
igmp_joingroup(const ip4_addr_t *ifaddr, const ip4_addr_t *groupaddr)
{
  1302b4:	e92d4800 	push	{fp, lr}
  1302b8:	e28db004 	add	fp, sp, #4
  1302bc:	e24dd010 	sub	sp, sp, #16
  1302c0:	e50b0010 	str	r0, [fp, #-16]
  1302c4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  err_t err = ERR_VAL; /* no matching interface */
  1302c8:	e3e03005 	mvn	r3, #5
  1302cc:	e54b3005 	strb	r3, [fp, #-5]
  struct netif *netif;

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_joingroup: attempt to join non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
  1302d0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1302d4:	e5933000 	ldr	r3, [r3]
  1302d8:	e20330f0 	and	r3, r3, #240	; 0xf0
  1302dc:	e35300e0 	cmp	r3, #224	; 0xe0
  1302e0:	0a000008 	beq	130308 <igmp_joingroup+0x54>
  1302e4:	e3080b50 	movw	r0, #35664	; 0x8b50
  1302e8:	e3400014 	movt	r0, #20
  1302ec:	ebff4b88 	bl	103114 <rt_kprintf>
  1302f0:	e30011c7 	movw	r1, #455	; 0x1c7
  1302f4:	e3080aa4 	movw	r0, #35492	; 0x8aa4
  1302f8:	e3400014 	movt	r0, #20
  1302fc:	ebff6a04 	bl	10ab14 <sys_arch_assert>
  130300:	e3e03005 	mvn	r3, #5
  130304:	ea000038 	b	1303ec <igmp_joingroup+0x138>
  LWIP_ERROR("igmp_joingroup: attempt to join allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
  130308:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13030c:	e5932000 	ldr	r2, [r3]
  130310:	e30e3354 	movw	r3, #58196	; 0xe354
  130314:	e3403014 	movt	r3, #20
  130318:	e5933000 	ldr	r3, [r3]
  13031c:	e1520003 	cmp	r2, r3
  130320:	1a000008 	bne	130348 <igmp_joingroup+0x94>
  130324:	e3080b88 	movw	r0, #35720	; 0x8b88
  130328:	e3400014 	movt	r0, #20
  13032c:	ebff4b78 	bl	103114 <rt_kprintf>
  130330:	e3a01f72 	mov	r1, #456	; 0x1c8
  130334:	e3080aa4 	movw	r0, #35492	; 0x8aa4
  130338:	e3400014 	movt	r0, #20
  13033c:	ebff69f4 	bl	10ab14 <sys_arch_assert>
  130340:	e3e03005 	mvn	r3, #5
  130344:	ea000028 	b	1303ec <igmp_joingroup+0x138>

  /* loop through netif's */
  netif = netif_list;
  130348:	e3043fb4 	movw	r3, #20404	; 0x4fb4
  13034c:	e3403057 	movt	r3, #87	; 0x57
  130350:	e5933000 	ldr	r3, [r3]
  130354:	e50b300c 	str	r3, [fp, #-12]
  while (netif != NULL) {
  130358:	ea00001f 	b	1303dc <igmp_joingroup+0x128>
    /* Should we join this interface ? */
    if ((netif->flags & NETIF_FLAG_IGMP) && ((ip4_addr_isany(ifaddr) || ip4_addr_cmp(netif_ip4_addr(netif), ifaddr)))) {
  13035c:	e51b300c 	ldr	r3, [fp, #-12]
  130360:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  130364:	e2033020 	and	r3, r3, #32
  130368:	e3530000 	cmp	r3, #0
  13036c:	0a000017 	beq	1303d0 <igmp_joingroup+0x11c>
  130370:	e51b3010 	ldr	r3, [fp, #-16]
  130374:	e3530000 	cmp	r3, #0
  130378:	0a00000a 	beq	1303a8 <igmp_joingroup+0xf4>
  13037c:	e51b3010 	ldr	r3, [fp, #-16]
  130380:	e5933000 	ldr	r3, [r3]
  130384:	e3530000 	cmp	r3, #0
  130388:	0a000006 	beq	1303a8 <igmp_joingroup+0xf4>
  13038c:	e51b300c 	ldr	r3, [fp, #-12]
  130390:	e2833004 	add	r3, r3, #4
  130394:	e5932000 	ldr	r2, [r3]
  130398:	e51b3010 	ldr	r3, [fp, #-16]
  13039c:	e5933000 	ldr	r3, [r3]
  1303a0:	e1520003 	cmp	r2, r3
  1303a4:	1a000009 	bne	1303d0 <igmp_joingroup+0x11c>
      err = igmp_joingroup_netif(netif, groupaddr);
  1303a8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1303ac:	e51b000c 	ldr	r0, [fp, #-12]
  1303b0:	eb000010 	bl	1303f8 <igmp_joingroup_netif>
  1303b4:	e1a03000 	mov	r3, r0
  1303b8:	e54b3005 	strb	r3, [fp, #-5]
      if (err != ERR_OK) {
  1303bc:	e15b30d5 	ldrsb	r3, [fp, #-5]
  1303c0:	e3530000 	cmp	r3, #0
  1303c4:	0a000001 	beq	1303d0 <igmp_joingroup+0x11c>
        /* Return an error even if some network interfaces are joined */
        /** @todo undo any other netif already joined */
        return err;
  1303c8:	e15b30d5 	ldrsb	r3, [fp, #-5]
  1303cc:	ea000006 	b	1303ec <igmp_joingroup+0x138>
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
  1303d0:	e51b300c 	ldr	r3, [fp, #-12]
  1303d4:	e5933000 	ldr	r3, [r3]
  1303d8:	e50b300c 	str	r3, [fp, #-12]
  while (netif != NULL) {
  1303dc:	e51b300c 	ldr	r3, [fp, #-12]
  1303e0:	e3530000 	cmp	r3, #0
  1303e4:	1affffdc 	bne	13035c <igmp_joingroup+0xa8>
  }

  return err;
  1303e8:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  1303ec:	e1a00003 	mov	r0, r3
  1303f0:	e24bd004 	sub	sp, fp, #4
  1303f4:	e8bd8800 	pop	{fp, pc}

001303f8 <igmp_joingroup_netif>:
 * @param groupaddr the ip address of the group which to join
 * @return ERR_OK if group was joined on the netif, an err_t otherwise
 */
err_t
igmp_joingroup_netif(struct netif *netif, const ip4_addr_t *groupaddr)
{
  1303f8:	e92d4800 	push	{fp, lr}
  1303fc:	e28db004 	add	fp, sp, #4
  130400:	e24dd010 	sub	sp, sp, #16
  130404:	e50b0010 	str	r0, [fp, #-16]
  130408:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct igmp_group *group;

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_joingroup_netif: attempt to join non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
  13040c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  130410:	e5933000 	ldr	r3, [r3]
  130414:	e20330f0 	and	r3, r3, #240	; 0xf0
  130418:	e35300e0 	cmp	r3, #224	; 0xe0
  13041c:	0a000008 	beq	130444 <igmp_joingroup_netif+0x4c>
  130420:	e3080bbc 	movw	r0, #35772	; 0x8bbc
  130424:	e3400014 	movt	r0, #20
  130428:	ebff4b39 	bl	103114 <rt_kprintf>
  13042c:	e30011eb 	movw	r1, #491	; 0x1eb
  130430:	e3080aa4 	movw	r0, #35492	; 0x8aa4
  130434:	e3400014 	movt	r0, #20
  130438:	ebff69b5 	bl	10ab14 <sys_arch_assert>
  13043c:	e3e03005 	mvn	r3, #5
  130440:	ea000051 	b	13058c <igmp_joingroup_netif+0x194>
  LWIP_ERROR("igmp_joingroup_netif: attempt to join allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
  130444:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  130448:	e5932000 	ldr	r2, [r3]
  13044c:	e30e3354 	movw	r3, #58196	; 0xe354
  130450:	e3403014 	movt	r3, #20
  130454:	e5933000 	ldr	r3, [r3]
  130458:	e1520003 	cmp	r2, r3
  13045c:	1a000008 	bne	130484 <igmp_joingroup_netif+0x8c>
  130460:	e3080bf8 	movw	r0, #35832	; 0x8bf8
  130464:	e3400014 	movt	r0, #20
  130468:	ebff4b29 	bl	103114 <rt_kprintf>
  13046c:	e3a01f7b 	mov	r1, #492	; 0x1ec
  130470:	e3080aa4 	movw	r0, #35492	; 0x8aa4
  130474:	e3400014 	movt	r0, #20
  130478:	ebff69a5 	bl	10ab14 <sys_arch_assert>
  13047c:	e3e03005 	mvn	r3, #5
  130480:	ea000041 	b	13058c <igmp_joingroup_netif+0x194>

  /* make sure it is an igmp-enabled netif */
  LWIP_ERROR("igmp_joingroup_netif: attempt to join on non-IGMP netif", netif->flags & NETIF_FLAG_IGMP, return ERR_VAL;);
  130484:	e51b3010 	ldr	r3, [fp, #-16]
  130488:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  13048c:	e2033020 	and	r3, r3, #32
  130490:	e3530000 	cmp	r3, #0
  130494:	1a000008 	bne	1304bc <igmp_joingroup_netif+0xc4>
  130498:	e3080c34 	movw	r0, #35892	; 0x8c34
  13049c:	e3400014 	movt	r0, #20
  1304a0:	ebff4b1b 	bl	103114 <rt_kprintf>
  1304a4:	e30011ef 	movw	r1, #495	; 0x1ef
  1304a8:	e3080aa4 	movw	r0, #35492	; 0x8aa4
  1304ac:	e3400014 	movt	r0, #20
  1304b0:	ebff6997 	bl	10ab14 <sys_arch_assert>
  1304b4:	e3e03005 	mvn	r3, #5
  1304b8:	ea000033 	b	13058c <igmp_joingroup_netif+0x194>

  /* find group or create a new one if not found */
  group = igmp_lookup_group(netif, groupaddr);
  1304bc:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1304c0:	e51b0010 	ldr	r0, [fp, #-16]
  1304c4:	ebfffe0c 	bl	12fcfc <igmp_lookup_group>
  1304c8:	e50b0008 	str	r0, [fp, #-8]

  if (group != NULL) {
  1304cc:	e51b3008 	ldr	r3, [fp, #-8]
  1304d0:	e3530000 	cmp	r3, #0
  1304d4:	0a00002b 	beq	130588 <igmp_joingroup_netif+0x190>
    /* This should create a new group, check the state to make sure */
    if (group->group_state != IGMP_GROUP_NON_MEMBER) {
  1304d8:	e51b3008 	ldr	r3, [fp, #-8]
  1304dc:	e5d33009 	ldrb	r3, [r3, #9]
  1304e0:	e3530000 	cmp	r3, #0
  1304e4:	1a00001f 	bne	130568 <igmp_joingroup_netif+0x170>
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_joingroup_netif: join to new group: "));
      ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
      LWIP_DEBUGF(IGMP_DEBUG, ("\n"));

      /* If first use of the group, allow the group at the MAC level */
      if ((group->use==0) && (netif->igmp_mac_filter != NULL)) {
  1304e8:	e51b3008 	ldr	r3, [fp, #-8]
  1304ec:	e5d3300c 	ldrb	r3, [r3, #12]
  1304f0:	e3530000 	cmp	r3, #0
  1304f4:	1a000009 	bne	130520 <igmp_joingroup_netif+0x128>
  1304f8:	e51b3010 	ldr	r3, [fp, #-16]
  1304fc:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  130500:	e3530000 	cmp	r3, #0
  130504:	0a000005 	beq	130520 <igmp_joingroup_netif+0x128>
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_joingroup_netif: igmp_mac_filter(ADD "));
        ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
        LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void*)netif));
        netif->igmp_mac_filter(netif, groupaddr, NETIF_ADD_MAC_FILTER);
  130508:	e51b3010 	ldr	r3, [fp, #-16]
  13050c:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  130510:	e3a02001 	mov	r2, #1
  130514:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  130518:	e51b0010 	ldr	r0, [fp, #-16]
  13051c:	e12fff33 	blx	r3
      }

      IGMP_STATS_INC(igmp.tx_join);
  130520:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  130524:	e3403057 	movt	r3, #87	; 0x57
  130528:	e1d338be 	ldrh	r3, [r3, #142]	; 0x8e
  13052c:	e2833001 	add	r3, r3, #1
  130530:	e6ff2073 	uxth	r2, r3
  130534:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  130538:	e3403057 	movt	r3, #87	; 0x57
  13053c:	e1c328be 	strh	r2, [r3, #142]	; 0x8e
      igmp_send(netif, group, IGMP_V2_MEMB_REPORT);
  130540:	e3a02016 	mov	r2, #22
  130544:	e51b1008 	ldr	r1, [fp, #-8]
  130548:	e51b0010 	ldr	r0, [fp, #-16]
  13054c:	eb000180 	bl	130b54 <igmp_send>

      igmp_start_timer(group, IGMP_JOIN_DELAYING_MEMBER_TMR);
  130550:	e3a01005 	mov	r1, #5
  130554:	e51b0008 	ldr	r0, [fp, #-8]
  130558:	eb000116 	bl	1309b8 <igmp_start_timer>

      /* Need to work out where this timer comes from */
      group->group_state = IGMP_GROUP_DELAYING_MEMBER;
  13055c:	e51b3008 	ldr	r3, [fp, #-8]
  130560:	e3a02001 	mov	r2, #1
  130564:	e5c32009 	strb	r2, [r3, #9]
    }
    /* Increment group use */
    group->use++;
  130568:	e51b3008 	ldr	r3, [fp, #-8]
  13056c:	e5d3300c 	ldrb	r3, [r3, #12]
  130570:	e2833001 	add	r3, r3, #1
  130574:	e6ef2073 	uxtb	r2, r3
  130578:	e51b3008 	ldr	r3, [fp, #-8]
  13057c:	e5c3200c 	strb	r2, [r3, #12]
    /* Join on this interface */
    return ERR_OK;
  130580:	e3a03000 	mov	r3, #0
  130584:	ea000000 	b	13058c <igmp_joingroup_netif+0x194>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_joingroup_netif: Not enough memory to join to group\n"));
    return ERR_MEM;
  130588:	e3e03000 	mvn	r3, #0
  }
}
  13058c:	e1a00003 	mov	r0, r3
  130590:	e24bd004 	sub	sp, fp, #4
  130594:	e8bd8800 	pop	{fp, pc}

00130598 <igmp_leavegroup>:
 * @param groupaddr the ip address of the group which to leave
 * @return ERR_OK if group was left on the netif(s), an err_t otherwise
 */
err_t
igmp_leavegroup(const ip4_addr_t *ifaddr, const ip4_addr_t *groupaddr)
{
  130598:	e92d4800 	push	{fp, lr}
  13059c:	e28db004 	add	fp, sp, #4
  1305a0:	e24dd018 	sub	sp, sp, #24
  1305a4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1305a8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  err_t err = ERR_VAL; /* no matching interface */
  1305ac:	e3e03005 	mvn	r3, #5
  1305b0:	e54b3005 	strb	r3, [fp, #-5]
  struct netif *netif;

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_leavegroup: attempt to leave non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
  1305b4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1305b8:	e5933000 	ldr	r3, [r3]
  1305bc:	e20330f0 	and	r3, r3, #240	; 0xf0
  1305c0:	e35300e0 	cmp	r3, #224	; 0xe0
  1305c4:	0a000008 	beq	1305ec <igmp_leavegroup+0x54>
  1305c8:	e3080c6c 	movw	r0, #35948	; 0x8c6c
  1305cc:	e3400014 	movt	r0, #20
  1305d0:	ebff4acf 	bl	103114 <rt_kprintf>
  1305d4:	e3001227 	movw	r1, #551	; 0x227
  1305d8:	e3080aa4 	movw	r0, #35492	; 0x8aa4
  1305dc:	e3400014 	movt	r0, #20
  1305e0:	ebff694b 	bl	10ab14 <sys_arch_assert>
  1305e4:	e3e03005 	mvn	r3, #5
  1305e8:	ea000038 	b	1306d0 <igmp_leavegroup+0x138>
  LWIP_ERROR("igmp_leavegroup: attempt to leave allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
  1305ec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1305f0:	e5932000 	ldr	r2, [r3]
  1305f4:	e30e3354 	movw	r3, #58196	; 0xe354
  1305f8:	e3403014 	movt	r3, #20
  1305fc:	e5933000 	ldr	r3, [r3]
  130600:	e1520003 	cmp	r2, r3
  130604:	1a000008 	bne	13062c <igmp_leavegroup+0x94>
  130608:	e3080ca4 	movw	r0, #36004	; 0x8ca4
  13060c:	e3400014 	movt	r0, #20
  130610:	ebff4abf 	bl	103114 <rt_kprintf>
  130614:	e3a01f8a 	mov	r1, #552	; 0x228
  130618:	e3080aa4 	movw	r0, #35492	; 0x8aa4
  13061c:	e3400014 	movt	r0, #20
  130620:	ebff693b 	bl	10ab14 <sys_arch_assert>
  130624:	e3e03005 	mvn	r3, #5
  130628:	ea000028 	b	1306d0 <igmp_leavegroup+0x138>

  /* loop through netif's */
  netif = netif_list;
  13062c:	e3043fb4 	movw	r3, #20404	; 0x4fb4
  130630:	e3403057 	movt	r3, #87	; 0x57
  130634:	e5933000 	ldr	r3, [r3]
  130638:	e50b300c 	str	r3, [fp, #-12]
  while (netif != NULL) {
  13063c:	ea00001f 	b	1306c0 <igmp_leavegroup+0x128>
    /* Should we leave this interface ? */
    if ((netif->flags & NETIF_FLAG_IGMP) && ((ip4_addr_isany(ifaddr) || ip4_addr_cmp(netif_ip4_addr(netif), ifaddr)))) {
  130640:	e51b300c 	ldr	r3, [fp, #-12]
  130644:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  130648:	e2033020 	and	r3, r3, #32
  13064c:	e3530000 	cmp	r3, #0
  130650:	0a000017 	beq	1306b4 <igmp_leavegroup+0x11c>
  130654:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  130658:	e3530000 	cmp	r3, #0
  13065c:	0a00000a 	beq	13068c <igmp_leavegroup+0xf4>
  130660:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  130664:	e5933000 	ldr	r3, [r3]
  130668:	e3530000 	cmp	r3, #0
  13066c:	0a000006 	beq	13068c <igmp_leavegroup+0xf4>
  130670:	e51b300c 	ldr	r3, [fp, #-12]
  130674:	e2833004 	add	r3, r3, #4
  130678:	e5932000 	ldr	r2, [r3]
  13067c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  130680:	e5933000 	ldr	r3, [r3]
  130684:	e1520003 	cmp	r2, r3
  130688:	1a000009 	bne	1306b4 <igmp_leavegroup+0x11c>
      err_t res = igmp_leavegroup_netif(netif, groupaddr);
  13068c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  130690:	e51b000c 	ldr	r0, [fp, #-12]
  130694:	eb000010 	bl	1306dc <igmp_leavegroup_netif>
  130698:	e1a03000 	mov	r3, r0
  13069c:	e54b300d 	strb	r3, [fp, #-13]
      if (err != ERR_OK) {
  1306a0:	e15b30d5 	ldrsb	r3, [fp, #-5]
  1306a4:	e3530000 	cmp	r3, #0
  1306a8:	0a000001 	beq	1306b4 <igmp_leavegroup+0x11c>
        /* Store this result if we have not yet gotten a success */
        err = res;
  1306ac:	e55b300d 	ldrb	r3, [fp, #-13]
  1306b0:	e54b3005 	strb	r3, [fp, #-5]
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
  1306b4:	e51b300c 	ldr	r3, [fp, #-12]
  1306b8:	e5933000 	ldr	r3, [r3]
  1306bc:	e50b300c 	str	r3, [fp, #-12]
  while (netif != NULL) {
  1306c0:	e51b300c 	ldr	r3, [fp, #-12]
  1306c4:	e3530000 	cmp	r3, #0
  1306c8:	1affffdc 	bne	130640 <igmp_leavegroup+0xa8>
  }

  return err;
  1306cc:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  1306d0:	e1a00003 	mov	r0, r3
  1306d4:	e24bd004 	sub	sp, fp, #4
  1306d8:	e8bd8800 	pop	{fp, pc}

001306dc <igmp_leavegroup_netif>:
 * @param groupaddr the ip address of the group which to leave
 * @return ERR_OK if group was left on the netif, an err_t otherwise
 */
err_t
igmp_leavegroup_netif(struct netif *netif, const ip4_addr_t *groupaddr)
{
  1306dc:	e92d4800 	push	{fp, lr}
  1306e0:	e28db004 	add	fp, sp, #4
  1306e4:	e24dd010 	sub	sp, sp, #16
  1306e8:	e50b0010 	str	r0, [fp, #-16]
  1306ec:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct igmp_group *group;

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_leavegroup_netif: attempt to leave non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
  1306f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1306f4:	e5933000 	ldr	r3, [r3]
  1306f8:	e20330f0 	and	r3, r3, #240	; 0xf0
  1306fc:	e35300e0 	cmp	r3, #224	; 0xe0
  130700:	0a000008 	beq	130728 <igmp_leavegroup_netif+0x4c>
  130704:	e3080cdc 	movw	r0, #36060	; 0x8cdc
  130708:	e3400014 	movt	r0, #20
  13070c:	ebff4a80 	bl	103114 <rt_kprintf>
  130710:	e300124a 	movw	r1, #586	; 0x24a
  130714:	e3080aa4 	movw	r0, #35492	; 0x8aa4
  130718:	e3400014 	movt	r0, #20
  13071c:	ebff68fc 	bl	10ab14 <sys_arch_assert>
  130720:	e3e03005 	mvn	r3, #5
  130724:	ea000052 	b	130874 <igmp_leavegroup_netif+0x198>
  LWIP_ERROR("igmp_leavegroup_netif: attempt to leave allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
  130728:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13072c:	e5932000 	ldr	r2, [r3]
  130730:	e30e3354 	movw	r3, #58196	; 0xe354
  130734:	e3403014 	movt	r3, #20
  130738:	e5933000 	ldr	r3, [r3]
  13073c:	e1520003 	cmp	r2, r3
  130740:	1a000008 	bne	130768 <igmp_leavegroup_netif+0x8c>
  130744:	e3080d1c 	movw	r0, #36124	; 0x8d1c
  130748:	e3400014 	movt	r0, #20
  13074c:	ebff4a70 	bl	103114 <rt_kprintf>
  130750:	e300124b 	movw	r1, #587	; 0x24b
  130754:	e3080aa4 	movw	r0, #35492	; 0x8aa4
  130758:	e3400014 	movt	r0, #20
  13075c:	ebff68ec 	bl	10ab14 <sys_arch_assert>
  130760:	e3e03005 	mvn	r3, #5
  130764:	ea000042 	b	130874 <igmp_leavegroup_netif+0x198>

  /* make sure it is an igmp-enabled netif */
  LWIP_ERROR("igmp_leavegroup_netif: attempt to leave on non-IGMP netif", netif->flags & NETIF_FLAG_IGMP, return ERR_VAL;);
  130768:	e51b3010 	ldr	r3, [fp, #-16]
  13076c:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  130770:	e2033020 	and	r3, r3, #32
  130774:	e3530000 	cmp	r3, #0
  130778:	1a000008 	bne	1307a0 <igmp_leavegroup_netif+0xc4>
  13077c:	e3080d58 	movw	r0, #36184	; 0x8d58
  130780:	e3400014 	movt	r0, #20
  130784:	ebff4a62 	bl	103114 <rt_kprintf>
  130788:	e300124e 	movw	r1, #590	; 0x24e
  13078c:	e3080aa4 	movw	r0, #35492	; 0x8aa4
  130790:	e3400014 	movt	r0, #20
  130794:	ebff68de 	bl	10ab14 <sys_arch_assert>
  130798:	e3e03005 	mvn	r3, #5
  13079c:	ea000034 	b	130874 <igmp_leavegroup_netif+0x198>

  /* find group */
  group = igmp_lookfor_group(netif, groupaddr);
  1307a0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1307a4:	e51b0010 	ldr	r0, [fp, #-16]
  1307a8:	ebfffd37 	bl	12fc8c <igmp_lookfor_group>
  1307ac:	e50b0008 	str	r0, [fp, #-8]

  if (group != NULL) {
  1307b0:	e51b3008 	ldr	r3, [fp, #-8]
  1307b4:	e3530000 	cmp	r3, #0
  1307b8:	0a00002c 	beq	130870 <igmp_leavegroup_netif+0x194>
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup_netif: Leaving group: "));
    ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
    LWIP_DEBUGF(IGMP_DEBUG, ("\n"));

    /* If there is no other use of the group */
    if (group->use <= 1) {
  1307bc:	e51b3008 	ldr	r3, [fp, #-8]
  1307c0:	e5d3300c 	ldrb	r3, [r3, #12]
  1307c4:	e3530001 	cmp	r3, #1
  1307c8:	8a000020 	bhi	130850 <igmp_leavegroup_netif+0x174>
      /* Remove the group from the list */
      igmp_remove_group(netif, group);
  1307cc:	e51b1008 	ldr	r1, [fp, #-8]
  1307d0:	e51b0010 	ldr	r0, [fp, #-16]
  1307d4:	ebfffda8 	bl	12fe7c <igmp_remove_group>

      /* If we are the last reporter for this group */
      if (group->last_reporter_flag) {
  1307d8:	e51b3008 	ldr	r3, [fp, #-8]
  1307dc:	e5d33008 	ldrb	r3, [r3, #8]
  1307e0:	e3530000 	cmp	r3, #0
  1307e4:	0a00000b 	beq	130818 <igmp_leavegroup_netif+0x13c>
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup_netif: sending leaving group\n"));
        IGMP_STATS_INC(igmp.tx_leave);
  1307e8:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  1307ec:	e3403057 	movt	r3, #87	; 0x57
  1307f0:	e1d339b0 	ldrh	r3, [r3, #144]	; 0x90
  1307f4:	e2833001 	add	r3, r3, #1
  1307f8:	e6ff2073 	uxth	r2, r3
  1307fc:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  130800:	e3403057 	movt	r3, #87	; 0x57
  130804:	e1c329b0 	strh	r2, [r3, #144]	; 0x90
        igmp_send(netif, group, IGMP_LEAVE_GROUP);
  130808:	e3a02017 	mov	r2, #23
  13080c:	e51b1008 	ldr	r1, [fp, #-8]
  130810:	e51b0010 	ldr	r0, [fp, #-16]
  130814:	eb0000ce 	bl	130b54 <igmp_send>
      }

      /* Disable the group at the MAC level */
      if (netif->igmp_mac_filter != NULL) {
  130818:	e51b3010 	ldr	r3, [fp, #-16]
  13081c:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  130820:	e3530000 	cmp	r3, #0
  130824:	0a000005 	beq	130840 <igmp_leavegroup_netif+0x164>
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup_netif: igmp_mac_filter(DEL "));
        ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
        LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void*)netif));
        netif->igmp_mac_filter(netif, groupaddr, NETIF_DEL_MAC_FILTER);
  130828:	e51b3010 	ldr	r3, [fp, #-16]
  13082c:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  130830:	e3a02000 	mov	r2, #0
  130834:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  130838:	e51b0010 	ldr	r0, [fp, #-16]
  13083c:	e12fff33 	blx	r3
      }

      /* Free group struct */
      memp_free(MEMP_IGMP_GROUP, group);
  130840:	e51b1008 	ldr	r1, [fp, #-8]
  130844:	e3a0000c 	mov	r0, #12
  130848:	ebffa1b1 	bl	118f14 <memp_free>
  13084c:	ea000005 	b	130868 <igmp_leavegroup_netif+0x18c>
    } else {
      /* Decrement group use */
      group->use--;
  130850:	e51b3008 	ldr	r3, [fp, #-8]
  130854:	e5d3300c 	ldrb	r3, [r3, #12]
  130858:	e2433001 	sub	r3, r3, #1
  13085c:	e6ef2073 	uxtb	r2, r3
  130860:	e51b3008 	ldr	r3, [fp, #-8]
  130864:	e5c3200c 	strb	r2, [r3, #12]
    }
    return ERR_OK;
  130868:	e3a03000 	mov	r3, #0
  13086c:	ea000000 	b	130874 <igmp_leavegroup_netif+0x198>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup_netif: not member of group\n"));
    return ERR_VAL;
  130870:	e3e03005 	mvn	r3, #5
  }
}
  130874:	e1a00003 	mov	r0, r3
  130878:	e24bd004 	sub	sp, fp, #4
  13087c:	e8bd8800 	pop	{fp, pc}

00130880 <igmp_tmr>:
 * The igmp timer function (both for NO_SYS=1 and =0)
 * Should be called every IGMP_TMR_INTERVAL milliseconds (100 ms is default).
 */
void
igmp_tmr(void)
{
  130880:	e92d4800 	push	{fp, lr}
  130884:	e28db004 	add	fp, sp, #4
  130888:	e24dd008 	sub	sp, sp, #8
  struct netif *netif = netif_list;
  13088c:	e3043fb4 	movw	r3, #20404	; 0x4fb4
  130890:	e3403057 	movt	r3, #87	; 0x57
  130894:	e5933000 	ldr	r3, [r3]
  130898:	e50b3008 	str	r3, [fp, #-8]

  while (netif != NULL) {
  13089c:	ea00001d 	b	130918 <igmp_tmr+0x98>
    struct igmp_group *group = netif_igmp_data(netif);
  1308a0:	e51b3008 	ldr	r3, [fp, #-8]
  1308a4:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  1308a8:	e50b300c 	str	r3, [fp, #-12]

    while (group != NULL) {
  1308ac:	ea000013 	b	130900 <igmp_tmr+0x80>
      if (group->timer > 0) {
  1308b0:	e51b300c 	ldr	r3, [fp, #-12]
  1308b4:	e1d330ba 	ldrh	r3, [r3, #10]
  1308b8:	e3530000 	cmp	r3, #0
  1308bc:	0a00000c 	beq	1308f4 <igmp_tmr+0x74>
        group->timer--;
  1308c0:	e51b300c 	ldr	r3, [fp, #-12]
  1308c4:	e1d330ba 	ldrh	r3, [r3, #10]
  1308c8:	e2433001 	sub	r3, r3, #1
  1308cc:	e6ff2073 	uxth	r2, r3
  1308d0:	e51b300c 	ldr	r3, [fp, #-12]
  1308d4:	e1c320ba 	strh	r2, [r3, #10]
        if (group->timer == 0) {
  1308d8:	e51b300c 	ldr	r3, [fp, #-12]
  1308dc:	e1d330ba 	ldrh	r3, [r3, #10]
  1308e0:	e3530000 	cmp	r3, #0
  1308e4:	1a000002 	bne	1308f4 <igmp_tmr+0x74>
          igmp_timeout(netif, group);
  1308e8:	e51b100c 	ldr	r1, [fp, #-12]
  1308ec:	e51b0008 	ldr	r0, [fp, #-8]
  1308f0:	eb00000e 	bl	130930 <igmp_timeout>
        }
      }
      group = group->next;
  1308f4:	e51b300c 	ldr	r3, [fp, #-12]
  1308f8:	e5933000 	ldr	r3, [r3]
  1308fc:	e50b300c 	str	r3, [fp, #-12]
    while (group != NULL) {
  130900:	e51b300c 	ldr	r3, [fp, #-12]
  130904:	e3530000 	cmp	r3, #0
  130908:	1affffe8 	bne	1308b0 <igmp_tmr+0x30>
    }
    netif = netif->next;
  13090c:	e51b3008 	ldr	r3, [fp, #-8]
  130910:	e5933000 	ldr	r3, [r3]
  130914:	e50b3008 	str	r3, [fp, #-8]
  while (netif != NULL) {
  130918:	e51b3008 	ldr	r3, [fp, #-8]
  13091c:	e3530000 	cmp	r3, #0
  130920:	1affffde 	bne	1308a0 <igmp_tmr+0x20>
  }
}
  130924:	e320f000 	nop	{0}
  130928:	e24bd004 	sub	sp, fp, #4
  13092c:	e8bd8800 	pop	{fp, pc}

00130930 <igmp_timeout>:
 *
 * @param group an igmp_group for which a timeout is reached
 */
static void
igmp_timeout(struct netif *netif, struct igmp_group *group)
{
  130930:	e92d4800 	push	{fp, lr}
  130934:	e28db004 	add	fp, sp, #4
  130938:	e24dd008 	sub	sp, sp, #8
  13093c:	e50b0008 	str	r0, [fp, #-8]
  130940:	e50b100c 	str	r1, [fp, #-12]
  /* If the state is IGMP_GROUP_DELAYING_MEMBER then we send a report for this group
     (unless it is the allsystems group) */
  if ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
  130944:	e51b300c 	ldr	r3, [fp, #-12]
  130948:	e5d33009 	ldrb	r3, [r3, #9]
  13094c:	e3530001 	cmp	r3, #1
  130950:	1a000015 	bne	1309ac <igmp_timeout+0x7c>
      (!(ip4_addr_cmp(&(group->group_address), &allsystems)))) {
  130954:	e51b300c 	ldr	r3, [fp, #-12]
  130958:	e5932004 	ldr	r2, [r3, #4]
  13095c:	e30e3354 	movw	r3, #58196	; 0xe354
  130960:	e3403014 	movt	r3, #20
  130964:	e5933000 	ldr	r3, [r3]
  if ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
  130968:	e1520003 	cmp	r2, r3
  13096c:	0a00000e 	beq	1309ac <igmp_timeout+0x7c>
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_timeout: report membership for group with address "));
    ip4_addr_debug_print(IGMP_DEBUG, &(group->group_address));
    LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void*)netif));

    group->group_state = IGMP_GROUP_IDLE_MEMBER;
  130970:	e51b300c 	ldr	r3, [fp, #-12]
  130974:	e3a02002 	mov	r2, #2
  130978:	e5c32009 	strb	r2, [r3, #9]
    
    IGMP_STATS_INC(igmp.tx_report);
  13097c:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  130980:	e3403057 	movt	r3, #87	; 0x57
  130984:	e1d339b2 	ldrh	r3, [r3, #146]	; 0x92
  130988:	e2833001 	add	r3, r3, #1
  13098c:	e6ff2073 	uxth	r2, r3
  130990:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  130994:	e3403057 	movt	r3, #87	; 0x57
  130998:	e1c329b2 	strh	r2, [r3, #146]	; 0x92
    igmp_send(netif, group, IGMP_V2_MEMB_REPORT);
  13099c:	e3a02016 	mov	r2, #22
  1309a0:	e51b100c 	ldr	r1, [fp, #-12]
  1309a4:	e51b0008 	ldr	r0, [fp, #-8]
  1309a8:	eb000069 	bl	130b54 <igmp_send>
  }
}
  1309ac:	e320f000 	nop	{0}
  1309b0:	e24bd004 	sub	sp, fp, #4
  1309b4:	e8bd8800 	pop	{fp, pc}

001309b8 <igmp_start_timer>:
 * @param max_time the time in multiples of IGMP_TMR_INTERVAL (decrease with
 *        every call to igmp_tmr())
 */
static void
igmp_start_timer(struct igmp_group *group, u8_t max_time)
{
  1309b8:	e92d4800 	push	{fp, lr}
  1309bc:	e28db004 	add	fp, sp, #4
  1309c0:	e24dd008 	sub	sp, sp, #8
  1309c4:	e50b0008 	str	r0, [fp, #-8]
  1309c8:	e1a03001 	mov	r3, r1
  1309cc:	e54b3009 	strb	r3, [fp, #-9]
#ifdef LWIP_RAND
  group->timer = max_time > 2 ? (LWIP_RAND() % max_time) : 1;
  1309d0:	e55b3009 	ldrb	r3, [fp, #-9]
  1309d4:	e3530002 	cmp	r3, #2
  1309d8:	9a000008 	bls	130a00 <igmp_start_timer+0x48>
  1309dc:	eb003388 	bl	13d804 <rand>
  1309e0:	e1a02000 	mov	r2, r0
  1309e4:	e55b3009 	ldrb	r3, [fp, #-9]
  1309e8:	e1a01003 	mov	r1, r3
  1309ec:	e1a00002 	mov	r0, r2
  1309f0:	eb001e49 	bl	13831c <__aeabi_idivmod>
  1309f4:	e1a03001 	mov	r3, r1
  1309f8:	e6ff3073 	uxth	r3, r3
  1309fc:	ea000000 	b	130a04 <igmp_start_timer+0x4c>
  130a00:	e3a03001 	mov	r3, #1
  130a04:	e51b2008 	ldr	r2, [fp, #-8]
  130a08:	e1c230ba 	strh	r3, [r2, #10]
#else /* LWIP_RAND */
  /* ATTENTION: use this only if absolutely necessary! */
  group->timer = max_time / 2;
#endif /* LWIP_RAND */

  if (group->timer == 0) {
  130a0c:	e51b3008 	ldr	r3, [fp, #-8]
  130a10:	e1d330ba 	ldrh	r3, [r3, #10]
  130a14:	e3530000 	cmp	r3, #0
  130a18:	1a000002 	bne	130a28 <igmp_start_timer+0x70>
    group->timer = 1;
  130a1c:	e51b3008 	ldr	r3, [fp, #-8]
  130a20:	e3a02001 	mov	r2, #1
  130a24:	e1c320ba 	strh	r2, [r3, #10]
  }
}
  130a28:	e320f000 	nop	{0}
  130a2c:	e24bd004 	sub	sp, fp, #4
  130a30:	e8bd8800 	pop	{fp, pc}

00130a34 <igmp_delaying_member>:
 * @param group the igmp_group for which "delaying" membership report
 * @param maxresp query delay
 */
static void
igmp_delaying_member(struct igmp_group *group, u8_t maxresp)
{
  130a34:	e92d4800 	push	{fp, lr}
  130a38:	e28db004 	add	fp, sp, #4
  130a3c:	e24dd008 	sub	sp, sp, #8
  130a40:	e50b0008 	str	r0, [fp, #-8]
  130a44:	e1a03001 	mov	r3, r1
  130a48:	e54b3009 	strb	r3, [fp, #-9]
  if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
  130a4c:	e51b3008 	ldr	r3, [fp, #-8]
  130a50:	e5d33009 	ldrb	r3, [r3, #9]
  130a54:	e3530002 	cmp	r3, #2
  130a58:	0a00000d 	beq	130a94 <igmp_delaying_member+0x60>
     ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
  130a5c:	e51b3008 	ldr	r3, [fp, #-8]
  130a60:	e5d33009 	ldrb	r3, [r3, #9]
  if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
  130a64:	e3530001 	cmp	r3, #1
  130a68:	1a000010 	bne	130ab0 <igmp_delaying_member+0x7c>
      ((group->timer == 0) || (maxresp < group->timer)))) {
  130a6c:	e51b3008 	ldr	r3, [fp, #-8]
  130a70:	e1d330ba 	ldrh	r3, [r3, #10]
     ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
  130a74:	e3530000 	cmp	r3, #0
  130a78:	0a000005 	beq	130a94 <igmp_delaying_member+0x60>
      ((group->timer == 0) || (maxresp < group->timer)))) {
  130a7c:	e55b3009 	ldrb	r3, [fp, #-9]
  130a80:	e6ff2073 	uxth	r2, r3
  130a84:	e51b3008 	ldr	r3, [fp, #-8]
  130a88:	e1d330ba 	ldrh	r3, [r3, #10]
  130a8c:	e1520003 	cmp	r2, r3
  130a90:	2a000006 	bcs	130ab0 <igmp_delaying_member+0x7c>
    igmp_start_timer(group, maxresp);
  130a94:	e55b3009 	ldrb	r3, [fp, #-9]
  130a98:	e1a01003 	mov	r1, r3
  130a9c:	e51b0008 	ldr	r0, [fp, #-8]
  130aa0:	ebffffc4 	bl	1309b8 <igmp_start_timer>
    group->group_state = IGMP_GROUP_DELAYING_MEMBER;
  130aa4:	e51b3008 	ldr	r3, [fp, #-8]
  130aa8:	e3a02001 	mov	r2, #1
  130aac:	e5c32009 	strb	r2, [r3, #9]
  }
}
  130ab0:	e320f000 	nop	{0}
  130ab4:	e24bd004 	sub	sp, fp, #4
  130ab8:	e8bd8800 	pop	{fp, pc}

00130abc <igmp_ip_output_if>:
 *         ERR_BUF if p doesn't have enough space for IP/LINK headers
 *         returns errors returned by netif->output
 */
static err_t
igmp_ip_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest, struct netif *netif)
{
  130abc:	e92d4800 	push	{fp, lr}
  130ac0:	e28db004 	add	fp, sp, #4
  130ac4:	e24dd030 	sub	sp, sp, #48	; 0x30
  130ac8:	e50b0010 	str	r0, [fp, #-16]
  130acc:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  130ad0:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  130ad4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  /* This is the "router alert" option */
  u16_t ra[2];
  ra[0] = PP_HTONS(ROUTER_ALERT);
  130ad8:	e3003494 	movw	r3, #1172	; 0x494
  130adc:	e14b30b8 	strh	r3, [fp, #-8]
  ra[1] = 0x0000; /* Router shall examine packet */
  130ae0:	e3a03000 	mov	r3, #0
  130ae4:	e14b30b6 	strh	r3, [fp, #-6]
  IGMP_STATS_INC(igmp.xmit);
  130ae8:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  130aec:	e3403057 	movt	r3, #87	; 0x57
  130af0:	e1d337b8 	ldrh	r3, [r3, #120]	; 0x78
  130af4:	e2833001 	add	r3, r3, #1
  130af8:	e6ff2073 	uxth	r2, r3
  130afc:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  130b00:	e3403057 	movt	r3, #87	; 0x57
  130b04:	e1c327b8 	strh	r2, [r3, #120]	; 0x78
  return ip4_output_if_opt(p, src, dest, IGMP_TTL, 0, IP_PROTO_IGMP, netif, ra, ROUTER_ALERTLEN);
  130b08:	e3a03004 	mov	r3, #4
  130b0c:	e58d3010 	str	r3, [sp, #16]
  130b10:	e24b3008 	sub	r3, fp, #8
  130b14:	e58d300c 	str	r3, [sp, #12]
  130b18:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  130b1c:	e58d3008 	str	r3, [sp, #8]
  130b20:	e3a03002 	mov	r3, #2
  130b24:	e58d3004 	str	r3, [sp, #4]
  130b28:	e3a03000 	mov	r3, #0
  130b2c:	e58d3000 	str	r3, [sp]
  130b30:	e3a03001 	mov	r3, #1
  130b34:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  130b38:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  130b3c:	e51b0010 	ldr	r0, [fp, #-16]
  130b40:	eb000371 	bl	13190c <ip4_output_if_opt>
  130b44:	e1a03000 	mov	r3, r0
}
  130b48:	e1a00003 	mov	r0, r3
  130b4c:	e24bd004 	sub	sp, fp, #4
  130b50:	e8bd8800 	pop	{fp, pc}

00130b54 <igmp_send>:
 * @param group the group to which to send the packet
 * @param type the type of igmp packet to send
 */
static void
igmp_send(struct netif *netif, struct igmp_group *group, u8_t type)
{
  130b54:	e92d4800 	push	{fp, lr}
  130b58:	e28db004 	add	fp, sp, #4
  130b5c:	e24dd020 	sub	sp, sp, #32
  130b60:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  130b64:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  130b68:	e1a03002 	mov	r3, r2
  130b6c:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  struct pbuf*     p    = NULL;
  130b70:	e3a03000 	mov	r3, #0
  130b74:	e50b300c 	str	r3, [fp, #-12]
  struct igmp_msg* igmp = NULL;
  130b78:	e3a03000 	mov	r3, #0
  130b7c:	e50b3010 	str	r3, [fp, #-16]
  ip4_addr_t   src  = *IP4_ADDR_ANY4;
  130b80:	e3083e3c 	movw	r3, #36412	; 0x8e3c
  130b84:	e3403014 	movt	r3, #20
  130b88:	e5933000 	ldr	r3, [r3]
  130b8c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  ip4_addr_t*  dest = NULL;
  130b90:	e3a03000 	mov	r3, #0
  130b94:	e50b3008 	str	r3, [fp, #-8]

  /* IP header + "router alert" option + IGMP header */
  p = pbuf_alloc(PBUF_TRANSPORT, IGMP_MINLEN, PBUF_RAM);
  130b98:	e3a02000 	mov	r2, #0
  130b9c:	e3a01008 	mov	r1, #8
  130ba0:	e3a00000 	mov	r0, #0
  130ba4:	ebffa4e1 	bl	119f30 <pbuf_alloc>
  130ba8:	e50b000c 	str	r0, [fp, #-12]

  if (p) {
  130bac:	e51b300c 	ldr	r3, [fp, #-12]
  130bb0:	e3530000 	cmp	r3, #0
  130bb4:	0a000049 	beq	130ce0 <igmp_send+0x18c>
    igmp = (struct igmp_msg *)p->payload;
  130bb8:	e51b300c 	ldr	r3, [fp, #-12]
  130bbc:	e5933004 	ldr	r3, [r3, #4]
  130bc0:	e50b3010 	str	r3, [fp, #-16]
    LWIP_ASSERT("igmp_send: check that first pbuf can hold struct igmp_msg",
  130bc4:	e51b300c 	ldr	r3, [fp, #-12]
  130bc8:	e1d330ba 	ldrh	r3, [r3, #10]
  130bcc:	e3530007 	cmp	r3, #7
  130bd0:	8a000006 	bhi	130bf0 <igmp_send+0x9c>
  130bd4:	e3080d94 	movw	r0, #36244	; 0x8d94
  130bd8:	e3400014 	movt	r0, #20
  130bdc:	ebff494c 	bl	103114 <rt_kprintf>
  130be0:	e3001302 	movw	r1, #770	; 0x302
  130be4:	e3080aa4 	movw	r0, #35492	; 0x8aa4
  130be8:	e3400014 	movt	r0, #20
  130bec:	ebff67c8 	bl	10ab14 <sys_arch_assert>
               (p->len >= sizeof(struct igmp_msg)));
    ip4_addr_copy(src, *netif_ip4_addr(netif));
  130bf0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  130bf4:	e2833004 	add	r3, r3, #4
  130bf8:	e5933000 	ldr	r3, [r3]
  130bfc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

    if (type == IGMP_V2_MEMB_REPORT) {
  130c00:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  130c04:	e3530016 	cmp	r3, #22
  130c08:	1a00000a 	bne	130c38 <igmp_send+0xe4>
      dest = &(group->group_address);
  130c0c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  130c10:	e2833004 	add	r3, r3, #4
  130c14:	e50b3008 	str	r3, [fp, #-8]
      ip4_addr_copy(igmp->igmp_group_address, group->group_address);
  130c18:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  130c1c:	e5932004 	ldr	r2, [r3, #4]
  130c20:	e51b3010 	ldr	r3, [fp, #-16]
  130c24:	e5832004 	str	r2, [r3, #4]
      group->last_reporter_flag = 1; /* Remember we were the last to report */
  130c28:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  130c2c:	e3a02001 	mov	r2, #1
  130c30:	e5c32008 	strb	r2, [r3, #8]
  130c34:	ea000009 	b	130c60 <igmp_send+0x10c>
    } else {
      if (type == IGMP_LEAVE_GROUP) {
  130c38:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  130c3c:	e3530017 	cmp	r3, #23
  130c40:	1a000006 	bne	130c60 <igmp_send+0x10c>
        dest = &allrouters;
  130c44:	e30e3358 	movw	r3, #58200	; 0xe358
  130c48:	e3403014 	movt	r3, #20
  130c4c:	e50b3008 	str	r3, [fp, #-8]
        ip4_addr_copy(igmp->igmp_group_address, group->group_address);
  130c50:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  130c54:	e5932004 	ldr	r2, [r3, #4]
  130c58:	e51b3010 	ldr	r3, [fp, #-16]
  130c5c:	e5832004 	str	r2, [r3, #4]
      }
    }

    if ((type == IGMP_V2_MEMB_REPORT) || (type == IGMP_LEAVE_GROUP)) {
  130c60:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  130c64:	e3530016 	cmp	r3, #22
  130c68:	0a000002 	beq	130c78 <igmp_send+0x124>
  130c6c:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  130c70:	e3530017 	cmp	r3, #23
  130c74:	1a000016 	bne	130cd4 <igmp_send+0x180>
      igmp->igmp_msgtype  = type;
  130c78:	e51b3010 	ldr	r3, [fp, #-16]
  130c7c:	e55b201d 	ldrb	r2, [fp, #-29]	; 0xffffffe3
  130c80:	e5c32000 	strb	r2, [r3]
      igmp->igmp_maxresp  = 0;
  130c84:	e51b3010 	ldr	r3, [fp, #-16]
  130c88:	e3a02000 	mov	r2, #0
  130c8c:	e5c32001 	strb	r2, [r3, #1]
      igmp->igmp_checksum = 0;
  130c90:	e51b3010 	ldr	r3, [fp, #-16]
  130c94:	e3a02000 	mov	r2, #0
  130c98:	e5c32002 	strb	r2, [r3, #2]
  130c9c:	e3a02000 	mov	r2, #0
  130ca0:	e5c32003 	strb	r2, [r3, #3]
      igmp->igmp_checksum = inet_chksum(igmp, IGMP_MINLEN);
  130ca4:	e3a01008 	mov	r1, #8
  130ca8:	e51b0010 	ldr	r0, [fp, #-16]
  130cac:	ebff9e7e 	bl	1186ac <inet_chksum>
  130cb0:	e1a03000 	mov	r3, r0
  130cb4:	e1a02003 	mov	r2, r3
  130cb8:	e51b3010 	ldr	r3, [fp, #-16]
  130cbc:	e1c320b2 	strh	r2, [r3, #2]

      igmp_ip_output_if(p, &src, dest, netif);
  130cc0:	e24b1014 	sub	r1, fp, #20
  130cc4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  130cc8:	e51b2008 	ldr	r2, [fp, #-8]
  130ccc:	e51b000c 	ldr	r0, [fp, #-12]
  130cd0:	ebffff79 	bl	130abc <igmp_ip_output_if>
    }

    pbuf_free(p);
  130cd4:	e51b000c 	ldr	r0, [fp, #-12]
  130cd8:	ebffa79b 	bl	11ab4c <pbuf_free>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_send: not enough memory for igmp_send\n"));
    IGMP_STATS_INC(igmp.memerr);
  }
}
  130cdc:	ea000007 	b	130d00 <igmp_send+0x1ac>
    IGMP_STATS_INC(igmp.memerr);
  130ce0:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  130ce4:	e3403057 	movt	r3, #87	; 0x57
  130ce8:	e1d338b2 	ldrh	r3, [r3, #130]	; 0x82
  130cec:	e2833001 	add	r3, r3, #1
  130cf0:	e6ff2073 	uxth	r2, r3
  130cf4:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  130cf8:	e3403057 	movt	r3, #87	; 0x57
  130cfc:	e1c328b2 	strh	r2, [r3, #130]	; 0x82
}
  130d00:	e320f000 	nop	{0}
  130d04:	e24bd004 	sub	sp, fp, #4
  130d08:	e8bd8800 	pop	{fp, pc}

00130d0c <ip4_set_default_multicast_netif>:
/**
 * @ingroup ip4
 * Set a default netif for IPv4 multicast. */
void
ip4_set_default_multicast_netif(struct netif* default_multicast_netif)
{
  130d0c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  130d10:	e28db000 	add	fp, sp, #0
  130d14:	e24dd00c 	sub	sp, sp, #12
  130d18:	e50b0008 	str	r0, [fp, #-8]
  ip4_default_multicast_netif = default_multicast_netif;
  130d1c:	e30e3360 	movw	r3, #58208	; 0xe360
  130d20:	e3403014 	movt	r3, #20
  130d24:	e51b2008 	ldr	r2, [fp, #-8]
  130d28:	e5832000 	str	r2, [r3]
}
  130d2c:	e320f000 	nop	{0}
  130d30:	e28bd000 	add	sp, fp, #0
  130d34:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  130d38:	e12fff1e 	bx	lr

00130d3c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
  130d3c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  130d40:	e28db000 	add	fp, sp, #0
  130d44:	e24dd014 	sub	sp, sp, #20
  130d48:	e50b0010 	str	r0, [fp, #-16]
  struct netif *netif;

#if LWIP_MULTICAST_TX_OPTIONS
  /* Use administratively selected interface for multicast by default */
  if (ip4_addr_ismulticast(dest) && ip4_default_multicast_netif) {
  130d4c:	e51b3010 	ldr	r3, [fp, #-16]
  130d50:	e5933000 	ldr	r3, [r3]
  130d54:	e20330f0 	and	r3, r3, #240	; 0xf0
  130d58:	e35300e0 	cmp	r3, #224	; 0xe0
  130d5c:	1a000008 	bne	130d84 <ip4_route+0x48>
  130d60:	e30e3360 	movw	r3, #58208	; 0xe360
  130d64:	e3403014 	movt	r3, #20
  130d68:	e5933000 	ldr	r3, [r3]
  130d6c:	e3530000 	cmp	r3, #0
  130d70:	0a000003 	beq	130d84 <ip4_route+0x48>
    return ip4_default_multicast_netif;
  130d74:	e30e3360 	movw	r3, #58208	; 0xe360
  130d78:	e3403014 	movt	r3, #20
  130d7c:	e5933000 	ldr	r3, [r3]
  130d80:	ea000091 	b	130fcc <ip4_route+0x290>
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
  130d84:	e3043fb4 	movw	r3, #20404	; 0x4fb4
  130d88:	e3403057 	movt	r3, #87	; 0x57
  130d8c:	e5933000 	ldr	r3, [r3]
  130d90:	e50b3008 	str	r3, [fp, #-8]
  130d94:	ea000030 	b	130e5c <ip4_route+0x120>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
  130d98:	e51b3008 	ldr	r3, [fp, #-8]
  130d9c:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  130da0:	e2033001 	and	r3, r3, #1
  130da4:	e6ef3073 	uxtb	r3, r3
  130da8:	e3530000 	cmp	r3, #0
  130dac:	0a000027 	beq	130e50 <ip4_route+0x114>
  130db0:	e51b3008 	ldr	r3, [fp, #-8]
  130db4:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  130db8:	e1a03123 	lsr	r3, r3, #2
  130dbc:	e2033001 	and	r3, r3, #1
  130dc0:	e6ef3073 	uxtb	r3, r3
  130dc4:	e3530000 	cmp	r3, #0
  130dc8:	0a000020 	beq	130e50 <ip4_route+0x114>
  130dcc:	e51b3008 	ldr	r3, [fp, #-8]
  130dd0:	e2833004 	add	r3, r3, #4
  130dd4:	e5933000 	ldr	r3, [r3]
  130dd8:	e3530000 	cmp	r3, #0
  130ddc:	0a00001b 	beq	130e50 <ip4_route+0x114>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
  130de0:	e51b3010 	ldr	r3, [fp, #-16]
  130de4:	e5932000 	ldr	r2, [r3]
  130de8:	e51b3008 	ldr	r3, [fp, #-8]
  130dec:	e2833004 	add	r3, r3, #4
  130df0:	e5933000 	ldr	r3, [r3]
  130df4:	e0222003 	eor	r2, r2, r3
  130df8:	e51b3008 	ldr	r3, [fp, #-8]
  130dfc:	e2833008 	add	r3, r3, #8
  130e00:	e5933000 	ldr	r3, [r3]
  130e04:	e0033002 	and	r3, r3, r2
  130e08:	e3530000 	cmp	r3, #0
  130e0c:	1a000001 	bne	130e18 <ip4_route+0xdc>
        /* return netif on which to forward IP packet */
        return netif;
  130e10:	e51b3008 	ldr	r3, [fp, #-8]
  130e14:	ea00006c 	b	130fcc <ip4_route+0x290>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
  130e18:	e51b3008 	ldr	r3, [fp, #-8]
  130e1c:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  130e20:	e2033002 	and	r3, r3, #2
  130e24:	e3530000 	cmp	r3, #0
  130e28:	1a000008 	bne	130e50 <ip4_route+0x114>
  130e2c:	e51b3010 	ldr	r3, [fp, #-16]
  130e30:	e5932000 	ldr	r2, [r3]
  130e34:	e51b3008 	ldr	r3, [fp, #-8]
  130e38:	e283300c 	add	r3, r3, #12
  130e3c:	e5933000 	ldr	r3, [r3]
  130e40:	e1520003 	cmp	r2, r3
  130e44:	1a000001 	bne	130e50 <ip4_route+0x114>
        /* return netif on which to forward IP packet */
        return netif;
  130e48:	e51b3008 	ldr	r3, [fp, #-8]
  130e4c:	ea00005e 	b	130fcc <ip4_route+0x290>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
  130e50:	e51b3008 	ldr	r3, [fp, #-8]
  130e54:	e5933000 	ldr	r3, [r3]
  130e58:	e50b3008 	str	r3, [fp, #-8]
  130e5c:	e51b3008 	ldr	r3, [fp, #-8]
  130e60:	e3530000 	cmp	r3, #0
  130e64:	1affffcb 	bne	130d98 <ip4_route+0x5c>
    }
  }

#if LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF
  /* loopif is disabled, looopback traffic is passed through any netif */
  if (ip4_addr_isloopback(dest)) {
  130e68:	e51b3010 	ldr	r3, [fp, #-16]
  130e6c:	e5933000 	ldr	r3, [r3]
  130e70:	e6ef3073 	uxtb	r3, r3
  130e74:	e353007f 	cmp	r3, #127	; 0x7f
  130e78:	1a000025 	bne	130f14 <ip4_route+0x1d8>
    /* don't check for link on loopback traffic */
    if (netif_default != NULL && netif_is_up(netif_default)) {
  130e7c:	e3043fb8 	movw	r3, #20408	; 0x4fb8
  130e80:	e3403057 	movt	r3, #87	; 0x57
  130e84:	e5933000 	ldr	r3, [r3]
  130e88:	e3530000 	cmp	r3, #0
  130e8c:	0a00000b 	beq	130ec0 <ip4_route+0x184>
  130e90:	e3043fb8 	movw	r3, #20408	; 0x4fb8
  130e94:	e3403057 	movt	r3, #87	; 0x57
  130e98:	e5933000 	ldr	r3, [r3]
  130e9c:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  130ea0:	e2033001 	and	r3, r3, #1
  130ea4:	e6ef3073 	uxtb	r3, r3
  130ea8:	e3530000 	cmp	r3, #0
  130eac:	0a000003 	beq	130ec0 <ip4_route+0x184>
      return netif_default;
  130eb0:	e3043fb8 	movw	r3, #20408	; 0x4fb8
  130eb4:	e3403057 	movt	r3, #87	; 0x57
  130eb8:	e5933000 	ldr	r3, [r3]
  130ebc:	ea000042 	b	130fcc <ip4_route+0x290>
    }
    /* default netif is not up, just use any netif for loopback traffic */
    for (netif = netif_list; netif != NULL; netif = netif->next) {
  130ec0:	e3043fb4 	movw	r3, #20404	; 0x4fb4
  130ec4:	e3403057 	movt	r3, #87	; 0x57
  130ec8:	e5933000 	ldr	r3, [r3]
  130ecc:	e50b3008 	str	r3, [fp, #-8]
  130ed0:	ea00000a 	b	130f00 <ip4_route+0x1c4>
      if (netif_is_up(netif)) {
  130ed4:	e51b3008 	ldr	r3, [fp, #-8]
  130ed8:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  130edc:	e2033001 	and	r3, r3, #1
  130ee0:	e6ef3073 	uxtb	r3, r3
  130ee4:	e3530000 	cmp	r3, #0
  130ee8:	0a000001 	beq	130ef4 <ip4_route+0x1b8>
        return netif;
  130eec:	e51b3008 	ldr	r3, [fp, #-8]
  130ef0:	ea000035 	b	130fcc <ip4_route+0x290>
    for (netif = netif_list; netif != NULL; netif = netif->next) {
  130ef4:	e51b3008 	ldr	r3, [fp, #-8]
  130ef8:	e5933000 	ldr	r3, [r3]
  130efc:	e50b3008 	str	r3, [fp, #-8]
  130f00:	e51b3008 	ldr	r3, [fp, #-8]
  130f04:	e3530000 	cmp	r3, #0
  130f08:	1afffff1 	bne	130ed4 <ip4_route+0x198>
      }
    }
    return NULL;
  130f0c:	e3a03000 	mov	r3, #0
  130f10:	ea00002d 	b	130fcc <ip4_route+0x290>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
  130f14:	e3043fb8 	movw	r3, #20408	; 0x4fb8
  130f18:	e3403057 	movt	r3, #87	; 0x57
  130f1c:	e5933000 	ldr	r3, [r3]
  130f20:	e3530000 	cmp	r3, #0
  130f24:	0a000014 	beq	130f7c <ip4_route+0x240>
  130f28:	e3043fb8 	movw	r3, #20408	; 0x4fb8
  130f2c:	e3403057 	movt	r3, #87	; 0x57
  130f30:	e5933000 	ldr	r3, [r3]
  130f34:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  130f38:	e2033001 	and	r3, r3, #1
  130f3c:	e3530000 	cmp	r3, #0
  130f40:	0a00000d 	beq	130f7c <ip4_route+0x240>
  130f44:	e3043fb8 	movw	r3, #20408	; 0x4fb8
  130f48:	e3403057 	movt	r3, #87	; 0x57
  130f4c:	e5933000 	ldr	r3, [r3]
  130f50:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  130f54:	e2033004 	and	r3, r3, #4
  130f58:	e3530000 	cmp	r3, #0
  130f5c:	0a000006 	beq	130f7c <ip4_route+0x240>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
  130f60:	e3043fb8 	movw	r3, #20408	; 0x4fb8
  130f64:	e3403057 	movt	r3, #87	; 0x57
  130f68:	e5933000 	ldr	r3, [r3]
  130f6c:	e2833004 	add	r3, r3, #4
  130f70:	e5933000 	ldr	r3, [r3]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
  130f74:	e3530000 	cmp	r3, #0
  130f78:	1a000010 	bne	130fc0 <ip4_route+0x284>
    /* No matching netif found and default netif is not usable.
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
  130f7c:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  130f80:	e3403057 	movt	r3, #87	; 0x57
  130f84:	e1d335b6 	ldrh	r3, [r3, #86]	; 0x56
  130f88:	e2833001 	add	r3, r3, #1
  130f8c:	e6ff2073 	uxth	r2, r3
  130f90:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  130f94:	e3403057 	movt	r3, #87	; 0x57
  130f98:	e1c325b6 	strh	r2, [r3, #86]	; 0x56
    MIB2_STATS_INC(mib2.ipoutnoroutes);
  130f9c:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  130fa0:	e3403057 	movt	r3, #87	; 0x57
  130fa4:	e5933148 	ldr	r3, [r3, #328]	; 0x148
  130fa8:	e2832001 	add	r2, r3, #1
  130fac:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  130fb0:	e3403057 	movt	r3, #87	; 0x57
  130fb4:	e5832148 	str	r2, [r3, #328]	; 0x148
    return NULL;
  130fb8:	e3a03000 	mov	r3, #0
  130fbc:	ea000002 	b	130fcc <ip4_route+0x290>
  }

  return netif_default;
  130fc0:	e3043fb8 	movw	r3, #20408	; 0x4fb8
  130fc4:	e3403057 	movt	r3, #87	; 0x57
  130fc8:	e5933000 	ldr	r3, [r3]
}
  130fcc:	e1a00003 	mov	r0, r3
  130fd0:	e28bd000 	add	sp, fp, #0
  130fd4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  130fd8:	e12fff1e 	bx	lr

00130fdc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
  130fdc:	e92d4800 	push	{fp, lr}
  130fe0:	e28db004 	add	fp, sp, #4
  130fe4:	e24dd028 	sub	sp, sp, #40	; 0x28
  130fe8:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  130fec:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
  130ff0:	e3a03001 	mov	r3, #1
  130ff4:	e50b3010 	str	r3, [fp, #-16]
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP */

  IP_STATS_INC(ip.recv);
  130ff8:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  130ffc:	e3403057 	movt	r3, #87	; 0x57
  131000:	e1d334ba 	ldrh	r3, [r3, #74]	; 0x4a
  131004:	e2833001 	add	r3, r3, #1
  131008:	e6ff2073 	uxth	r2, r3
  13100c:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  131010:	e3403057 	movt	r3, #87	; 0x57
  131014:	e1c324ba 	strh	r2, [r3, #74]	; 0x4a
  MIB2_STATS_INC(mib2.ipinreceives);
  131018:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  13101c:	e3403057 	movt	r3, #87	; 0x57
  131020:	e5933168 	ldr	r3, [r3, #360]	; 0x168
  131024:	e2832001 	add	r2, r3, #1
  131028:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  13102c:	e3403057 	movt	r3, #87	; 0x57
  131030:	e5832168 	str	r2, [r3, #360]	; 0x168

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
  131034:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  131038:	e5933004 	ldr	r3, [r3, #4]
  13103c:	e50b3008 	str	r3, [fp, #-8]
  if (IPH_V(iphdr) != 4) {
  131040:	e51b3008 	ldr	r3, [fp, #-8]
  131044:	e5d33000 	ldrb	r3, [r3]
  131048:	e1a03223 	lsr	r3, r3, #4
  13104c:	e6ef3073 	uxtb	r3, r3
  131050:	e3530004 	cmp	r3, #4
  131054:	0a00001a 	beq	1310c4 <ip4_input+0xe8>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
  131058:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  13105c:	ebffa6ba 	bl	11ab4c <pbuf_free>
    IP_STATS_INC(ip.err);
  131060:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  131064:	e3403057 	movt	r3, #87	; 0x57
  131068:	e1d335bc 	ldrh	r3, [r3, #92]	; 0x5c
  13106c:	e2833001 	add	r3, r3, #1
  131070:	e6ff2073 	uxth	r2, r3
  131074:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  131078:	e3403057 	movt	r3, #87	; 0x57
  13107c:	e1c325bc 	strh	r2, [r3, #92]	; 0x5c
    IP_STATS_INC(ip.drop);
  131080:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  131084:	e3403057 	movt	r3, #87	; 0x57
  131088:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  13108c:	e2833001 	add	r3, r3, #1
  131090:	e6ff2073 	uxth	r2, r3
  131094:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  131098:	e3403057 	movt	r3, #87	; 0x57
  13109c:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
    MIB2_STATS_INC(mib2.ipinhdrerrors);
  1310a0:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  1310a4:	e3403057 	movt	r3, #87	; 0x57
  1310a8:	e593312c 	ldr	r3, [r3, #300]	; 0x12c
  1310ac:	e2832001 	add	r2, r3, #1
  1310b0:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  1310b4:	e3403057 	movt	r3, #87	; 0x57
  1310b8:	e583212c 	str	r2, [r3, #300]	; 0x12c
    return ERR_OK;
  1310bc:	e3a03000 	mov	r3, #0
  1310c0:	ea0001f2 	b	131890 <ip4_input+0x8b4>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
  1310c4:	e51b3008 	ldr	r3, [fp, #-8]
  1310c8:	e5d33000 	ldrb	r3, [r3]
  1310cc:	e6ff3073 	uxth	r3, r3
  1310d0:	e203300f 	and	r3, r3, #15
  1310d4:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
  1310d8:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  1310dc:	e1a03103 	lsl	r3, r3, #2
  1310e0:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
  1310e4:	e51b3008 	ldr	r3, [fp, #-8]
  1310e8:	e1d330b2 	ldrh	r3, [r3, #2]
  1310ec:	e6ff3073 	uxth	r3, r3
  1310f0:	e1a00003 	mov	r0, r3
  1310f4:	ebff945d 	bl	116270 <lwip_htons>
  1310f8:	e1a03000 	mov	r3, r0
  1310fc:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
  131100:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  131104:	e1d330b8 	ldrh	r3, [r3, #8]
  131108:	e15b21b8 	ldrh	r2, [fp, #-24]	; 0xffffffe8
  13110c:	e1520003 	cmp	r2, r3
  131110:	2a000003 	bcs	131124 <ip4_input+0x148>
    pbuf_realloc(p, iphdr_len);
  131114:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
  131118:	e1a01003 	mov	r1, r3
  13111c:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131120:	ebffa540 	bl	11a628 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
  131124:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  131128:	e1d330ba 	ldrh	r3, [r3, #10]
  13112c:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  131130:	e1520003 	cmp	r2, r3
  131134:	8a000007 	bhi	131158 <ip4_input+0x17c>
  131138:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  13113c:	e1d330b8 	ldrh	r3, [r3, #8]
  131140:	e15b21b8 	ldrh	r2, [fp, #-24]	; 0xffffffe8
  131144:	e1520003 	cmp	r2, r3
  131148:	8a000002 	bhi	131158 <ip4_input+0x17c>
  13114c:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  131150:	e3530013 	cmp	r3, #19
  131154:	8a00001a 	bhi	1311c4 <ip4_input+0x1e8>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
  131158:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  13115c:	ebffa67a 	bl	11ab4c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
  131160:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  131164:	e3403057 	movt	r3, #87	; 0x57
  131168:	e1d335b2 	ldrh	r3, [r3, #82]	; 0x52
  13116c:	e2833001 	add	r3, r3, #1
  131170:	e6ff2073 	uxth	r2, r3
  131174:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  131178:	e3403057 	movt	r3, #87	; 0x57
  13117c:	e1c325b2 	strh	r2, [r3, #82]	; 0x52
    IP_STATS_INC(ip.drop);
  131180:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  131184:	e3403057 	movt	r3, #87	; 0x57
  131188:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  13118c:	e2833001 	add	r3, r3, #1
  131190:	e6ff2073 	uxth	r2, r3
  131194:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  131198:	e3403057 	movt	r3, #87	; 0x57
  13119c:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
    MIB2_STATS_INC(mib2.ipindiscards);
  1311a0:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  1311a4:	e3403057 	movt	r3, #87	; 0x57
  1311a8:	e5933138 	ldr	r3, [r3, #312]	; 0x138
  1311ac:	e2832001 	add	r2, r3, #1
  1311b0:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  1311b4:	e3403057 	movt	r3, #87	; 0x57
  1311b8:	e5832138 	str	r2, [r3, #312]	; 0x138
    return ERR_OK;
  1311bc:	e3a03000 	mov	r3, #0
  1311c0:	ea0001b2 	b	131890 <ip4_input+0x8b4>
  }

  /* verify checksum */
#if CHECKSUM_CHECK_IP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_IP) {
    if (inet_chksum(iphdr, iphdr_hlen) != 0) {
  1311c4:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  1311c8:	e1a01003 	mov	r1, r3
  1311cc:	e51b0008 	ldr	r0, [fp, #-8]
  1311d0:	ebff9d35 	bl	1186ac <inet_chksum>
  1311d4:	e1a03000 	mov	r3, r0
  1311d8:	e3530000 	cmp	r3, #0
  1311dc:	0a00001a 	beq	13124c <ip4_input+0x270>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
      ip4_debug_print(p);
      pbuf_free(p);
  1311e0:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1311e4:	ebffa658 	bl	11ab4c <pbuf_free>
      IP_STATS_INC(ip.chkerr);
  1311e8:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  1311ec:	e3403057 	movt	r3, #87	; 0x57
  1311f0:	e1d335b0 	ldrh	r3, [r3, #80]	; 0x50
  1311f4:	e2833001 	add	r3, r3, #1
  1311f8:	e6ff2073 	uxth	r2, r3
  1311fc:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  131200:	e3403057 	movt	r3, #87	; 0x57
  131204:	e1c325b0 	strh	r2, [r3, #80]	; 0x50
      IP_STATS_INC(ip.drop);
  131208:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  13120c:	e3403057 	movt	r3, #87	; 0x57
  131210:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  131214:	e2833001 	add	r3, r3, #1
  131218:	e6ff2073 	uxth	r2, r3
  13121c:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  131220:	e3403057 	movt	r3, #87	; 0x57
  131224:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinhdrerrors);
  131228:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  13122c:	e3403057 	movt	r3, #87	; 0x57
  131230:	e593312c 	ldr	r3, [r3, #300]	; 0x12c
  131234:	e2832001 	add	r2, r3, #1
  131238:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  13123c:	e3403057 	movt	r3, #87	; 0x57
  131240:	e583212c 	str	r2, [r3, #300]	; 0x12c
      return ERR_OK;
  131244:	e3a03000 	mov	r3, #0
  131248:	ea000190 	b	131890 <ip4_input+0x8b4>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
  13124c:	e51b3008 	ldr	r3, [fp, #-8]
  131250:	e5932010 	ldr	r2, [r3, #16]
  131254:	e30e3d68 	movw	r3, #60776	; 0xed68
  131258:	e3403014 	movt	r3, #20
  13125c:	e5832014 	str	r2, [r3, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
  131260:	e51b3008 	ldr	r3, [fp, #-8]
  131264:	e593200c 	ldr	r2, [r3, #12]
  131268:	e30e3d68 	movw	r3, #60776	; 0xed68
  13126c:	e3403014 	movt	r3, #20
  131270:	e5832010 	str	r2, [r3, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
  131274:	e30e3d68 	movw	r3, #60776	; 0xed68
  131278:	e3403014 	movt	r3, #20
  13127c:	e5933014 	ldr	r3, [r3, #20]
  131280:	e20330f0 	and	r3, r3, #240	; 0xf0
  131284:	e35300e0 	cmp	r3, #224	; 0xe0
  131288:	1a000020 	bne	131310 <ip4_input+0x334>
#if LWIP_IGMP
    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, ip4_current_dest_addr()))) {
  13128c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  131290:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  131294:	e2033020 	and	r3, r3, #32
  131298:	e3530000 	cmp	r3, #0
  13129c:	0a000018 	beq	131304 <ip4_input+0x328>
  1312a0:	e59f15f4 	ldr	r1, [pc, #1524]	; 13189c <ip4_input+0x8c0>
  1312a4:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
  1312a8:	ebfffa77 	bl	12fc8c <igmp_lookfor_group>
  1312ac:	e1a03000 	mov	r3, r0
  1312b0:	e3530000 	cmp	r3, #0
  1312b4:	0a000012 	beq	131304 <ip4_input+0x328>
      /* IGMP snooping switches need 0.0.0.0 to be allowed as source address (RFC 4541) */
      ip4_addr_t allsystems;
      IP4_ADDR(&allsystems, 224, 0, 0, 1);
  1312b8:	e3a030e0 	mov	r3, #224	; 0xe0
  1312bc:	e3403100 	movt	r3, #256	; 0x100
  1312c0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
      if (ip4_addr_cmp(ip4_current_dest_addr(), &allsystems) &&
  1312c4:	e30e3d68 	movw	r3, #60776	; 0xed68
  1312c8:	e3403014 	movt	r3, #20
  1312cc:	e5932014 	ldr	r2, [r3, #20]
  1312d0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1312d4:	e1520003 	cmp	r2, r3
  1312d8:	1a000006 	bne	1312f8 <ip4_input+0x31c>
          ip4_addr_isany(ip4_current_src_addr())) {
  1312dc:	e30e3d68 	movw	r3, #60776	; 0xed68
  1312e0:	e3403014 	movt	r3, #20
  1312e4:	e5933010 	ldr	r3, [r3, #16]
      if (ip4_addr_cmp(ip4_current_dest_addr(), &allsystems) &&
  1312e8:	e3530000 	cmp	r3, #0
  1312ec:	1a000001 	bne	1312f8 <ip4_input+0x31c>
        check_ip_src = 0;
  1312f0:	e3a03000 	mov	r3, #0
  1312f4:	e50b3010 	str	r3, [fp, #-16]
      }
      netif = inp;
  1312f8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1312fc:	e50b300c 	str	r3, [fp, #-12]
    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, ip4_current_dest_addr()))) {
  131300:	ea000040 	b	131408 <ip4_input+0x42c>
    } else {
      netif = NULL;
  131304:	e3a03000 	mov	r3, #0
  131308:	e50b300c 	str	r3, [fp, #-12]
  13130c:	ea00003d 	b	131408 <ip4_input+0x42c>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
  131310:	e3a03001 	mov	r3, #1
  131314:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    netif = inp;
  131318:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  13131c:	e50b300c 	str	r3, [fp, #-12]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
  131320:	e51b300c 	ldr	r3, [fp, #-12]
  131324:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  131328:	e2033001 	and	r3, r3, #1
  13132c:	e6ef3073 	uxtb	r3, r3
  131330:	e3530000 	cmp	r3, #0
  131334:	0a00001c 	beq	1313ac <ip4_input+0x3d0>
  131338:	e51b300c 	ldr	r3, [fp, #-12]
  13133c:	e2833004 	add	r3, r3, #4
  131340:	e5933000 	ldr	r3, [r3]
  131344:	e3530000 	cmp	r3, #0
  131348:	0a000017 	beq	1313ac <ip4_input+0x3d0>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
  13134c:	e30e3d68 	movw	r3, #60776	; 0xed68
  131350:	e3403014 	movt	r3, #20
  131354:	e5932014 	ldr	r2, [r3, #20]
  131358:	e51b300c 	ldr	r3, [fp, #-12]
  13135c:	e2833004 	add	r3, r3, #4
  131360:	e5933000 	ldr	r3, [r3]
  131364:	e1520003 	cmp	r2, r3
  131368:	0a000026 	beq	131408 <ip4_input+0x42c>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
  13136c:	e30e3d68 	movw	r3, #60776	; 0xed68
  131370:	e3403014 	movt	r3, #20
  131374:	e5933014 	ldr	r3, [r3, #20]
  131378:	e51b100c 	ldr	r1, [fp, #-12]
  13137c:	e1a00003 	mov	r0, r3
  131380:	eb00034c 	bl	1320b8 <ip4_addr_isbroadcast_u32>
  131384:	e1a03000 	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
  131388:	e3530000 	cmp	r3, #0
  13138c:	1a00001d 	bne	131408 <ip4_input+0x42c>
#if LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF
            || (ip4_addr_get_u32(ip4_current_dest_addr()) == PP_HTONL(IPADDR_LOOPBACK))
  131390:	e30e3d68 	movw	r3, #60776	; 0xed68
  131394:	e3403014 	movt	r3, #20
  131398:	e5932014 	ldr	r2, [r3, #20]
  13139c:	e3a0307f 	mov	r3, #127	; 0x7f
  1313a0:	e3403100 	movt	r3, #256	; 0x100
  1313a4:	e1520003 	cmp	r2, r3
  1313a8:	0a000016 	beq	131408 <ip4_input+0x42c>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
  1313ac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1313b0:	e3530000 	cmp	r3, #0
  1313b4:	0a000006 	beq	1313d4 <ip4_input+0x3f8>
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
          netif = NULL;
          break;
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
  1313b8:	e3a03000 	mov	r3, #0
  1313bc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        netif = netif_list;
  1313c0:	e3043fb4 	movw	r3, #20404	; 0x4fb4
  1313c4:	e3403057 	movt	r3, #87	; 0x57
  1313c8:	e5933000 	ldr	r3, [r3]
  1313cc:	e50b300c 	str	r3, [fp, #-12]
  1313d0:	ea000002 	b	1313e0 <ip4_input+0x404>
      } else {
        netif = netif->next;
  1313d4:	e51b300c 	ldr	r3, [fp, #-12]
  1313d8:	e5933000 	ldr	r3, [r3]
  1313dc:	e50b300c 	str	r3, [fp, #-12]
      }
      if (netif == inp) {
  1313e0:	e51b200c 	ldr	r2, [fp, #-12]
  1313e4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1313e8:	e1520003 	cmp	r2, r3
  1313ec:	1a000002 	bne	1313fc <ip4_input+0x420>
        netif = netif->next;
  1313f0:	e51b300c 	ldr	r3, [fp, #-12]
  1313f4:	e5933000 	ldr	r3, [r3]
  1313f8:	e50b300c 	str	r3, [fp, #-12]
      }
    } while (netif != NULL);
  1313fc:	e51b300c 	ldr	r3, [fp, #-12]
  131400:	e3530000 	cmp	r3, #0
  131404:	1affffc5 	bne	131320 <ip4_input+0x344>
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
  131408:	e51b300c 	ldr	r3, [fp, #-12]
  13140c:	e3530000 	cmp	r3, #0
  131410:	1a000010 	bne	131458 <ip4_input+0x47c>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
  131414:	e51b3008 	ldr	r3, [fp, #-8]
  131418:	e5d33009 	ldrb	r3, [r3, #9]
  13141c:	e3530011 	cmp	r3, #17
  131420:	1a00000c 	bne	131458 <ip4_input+0x47c>
      struct udp_hdr *udphdr = (struct udp_hdr *)((u8_t *)iphdr + iphdr_hlen);
  131424:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  131428:	e51b2008 	ldr	r2, [fp, #-8]
  13142c:	e0823003 	add	r3, r2, r3
  131430:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
        lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
  131434:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  131438:	e1d330b2 	ldrh	r3, [r3, #2]
  13143c:	e6ff3073 	uxth	r3, r3
  131440:	e3530b11 	cmp	r3, #17408	; 0x4400
  131444:	1a000003 	bne	131458 <ip4_input+0x47c>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
  131448:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  13144c:	e50b300c 	str	r3, [fp, #-12]
        check_ip_src = 0;
  131450:	e3a03000 	mov	r3, #0
  131454:	e50b3010 	str	r3, [fp, #-16]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
  131458:	e51b3010 	ldr	r3, [fp, #-16]
  13145c:	e3530000 	cmp	r3, #0
  131460:	0a00002d 	beq	13151c <ip4_input+0x540>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
  131464:	e30e3d68 	movw	r3, #60776	; 0xed68
  131468:	e3403014 	movt	r3, #20
  13146c:	e5933010 	ldr	r3, [r3, #16]
  131470:	e3530000 	cmp	r3, #0
  131474:	0a000028 	beq	13151c <ip4_input+0x540>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
  131478:	e30e3d68 	movw	r3, #60776	; 0xed68
  13147c:	e3403014 	movt	r3, #20
  131480:	e5933010 	ldr	r3, [r3, #16]
  131484:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  131488:	e1a00003 	mov	r0, r3
  13148c:	eb000309 	bl	1320b8 <ip4_addr_isbroadcast_u32>
  131490:	e1a03000 	mov	r3, r0
  131494:	e3530000 	cmp	r3, #0
  131498:	1a000005 	bne	1314b4 <ip4_input+0x4d8>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
  13149c:	e30e3d68 	movw	r3, #60776	; 0xed68
  1314a0:	e3403014 	movt	r3, #20
  1314a4:	e5933010 	ldr	r3, [r3, #16]
  1314a8:	e20330f0 	and	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
  1314ac:	e35300e0 	cmp	r3, #224	; 0xe0
  1314b0:	1a000019 	bne	13151c <ip4_input+0x540>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
  1314b4:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1314b8:	ebffa5a3 	bl	11ab4c <pbuf_free>
      IP_STATS_INC(ip.drop);
  1314bc:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  1314c0:	e3403057 	movt	r3, #87	; 0x57
  1314c4:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  1314c8:	e2833001 	add	r3, r3, #1
  1314cc:	e6ff2073 	uxth	r2, r3
  1314d0:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  1314d4:	e3403057 	movt	r3, #87	; 0x57
  1314d8:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
  1314dc:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  1314e0:	e3403057 	movt	r3, #87	; 0x57
  1314e4:	e5933130 	ldr	r3, [r3, #304]	; 0x130
  1314e8:	e2832001 	add	r2, r3, #1
  1314ec:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  1314f0:	e3403057 	movt	r3, #87	; 0x57
  1314f4:	e5832130 	str	r2, [r3, #304]	; 0x130
      MIB2_STATS_INC(mib2.ipindiscards);
  1314f8:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  1314fc:	e3403057 	movt	r3, #87	; 0x57
  131500:	e5933138 	ldr	r3, [r3, #312]	; 0x138
  131504:	e2832001 	add	r2, r3, #1
  131508:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  13150c:	e3403057 	movt	r3, #87	; 0x57
  131510:	e5832138 	str	r2, [r3, #312]	; 0x138
      return ERR_OK;
  131514:	e3a03000 	mov	r3, #0
  131518:	ea0000dc 	b	131890 <ip4_input+0x8b4>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
  13151c:	e51b300c 	ldr	r3, [fp, #-12]
  131520:	e3530000 	cmp	r3, #0
  131524:	1a000019 	bne	131590 <ip4_input+0x5b4>
      /* try to forward IP packet on (other) interfaces */
      ip4_forward(p, iphdr, inp);
    } else
#endif /* IP_FORWARD */
    {
      IP_STATS_INC(ip.drop);
  131528:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  13152c:	e3403057 	movt	r3, #87	; 0x57
  131530:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  131534:	e2833001 	add	r3, r3, #1
  131538:	e6ff2073 	uxth	r2, r3
  13153c:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  131540:	e3403057 	movt	r3, #87	; 0x57
  131544:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
  131548:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  13154c:	e3403057 	movt	r3, #87	; 0x57
  131550:	e5933130 	ldr	r3, [r3, #304]	; 0x130
  131554:	e2832001 	add	r2, r3, #1
  131558:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  13155c:	e3403057 	movt	r3, #87	; 0x57
  131560:	e5832130 	str	r2, [r3, #304]	; 0x130
      MIB2_STATS_INC(mib2.ipindiscards);
  131564:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  131568:	e3403057 	movt	r3, #87	; 0x57
  13156c:	e5933138 	ldr	r3, [r3, #312]	; 0x138
  131570:	e2832001 	add	r2, r3, #1
  131574:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  131578:	e3403057 	movt	r3, #87	; 0x57
  13157c:	e5832138 	str	r2, [r3, #312]	; 0x138
    }
    pbuf_free(p);
  131580:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131584:	ebffa570 	bl	11ab4c <pbuf_free>
    return ERR_OK;
  131588:	e3a03000 	mov	r3, #0
  13158c:	ea0000bf 	b	131890 <ip4_input+0x8b4>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
  131590:	e51b3008 	ldr	r3, [fp, #-8]
  131594:	e1d330b6 	ldrh	r3, [r3, #6]
  131598:	e6ff3073 	uxth	r3, r3
  13159c:	e1a02003 	mov	r2, r3
  1315a0:	e30f3f3f 	movw	r3, #65343	; 0xff3f
  1315a4:	e0033002 	and	r3, r3, r2
  1315a8:	e3530000 	cmp	r3, #0
  1315ac:	0a00000a 	beq	1315dc <ip4_input+0x600>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
  1315b0:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1315b4:	eb000778 	bl	13339c <ip4_reass>
  1315b8:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
    /* packet not fully reassembled yet? */
    if (p == NULL) {
  1315bc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1315c0:	e3530000 	cmp	r3, #0
  1315c4:	1a000001 	bne	1315d0 <ip4_input+0x5f4>
      return ERR_OK;
  1315c8:	e3a03000 	mov	r3, #0
  1315cc:	ea0000af 	b	131890 <ip4_input+0x8b4>
    }
    iphdr = (struct ip_hdr *)p->payload;
  1315d0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1315d4:	e5933004 	ldr	r3, [r3, #4]
  1315d8:	e50b3008 	str	r3, [fp, #-8]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
  1315dc:	e30e3d68 	movw	r3, #60776	; 0xed68
  1315e0:	e3403014 	movt	r3, #20
  1315e4:	e51b200c 	ldr	r2, [fp, #-12]
  1315e8:	e5832000 	str	r2, [r3]
  ip_data.current_input_netif = inp;
  1315ec:	e30e3d68 	movw	r3, #60776	; 0xed68
  1315f0:	e3403014 	movt	r3, #20
  1315f4:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  1315f8:	e5832004 	str	r2, [r3, #4]
  ip_data.current_ip4_header = iphdr;
  1315fc:	e30e3d68 	movw	r3, #60776	; 0xed68
  131600:	e3403014 	movt	r3, #20
  131604:	e51b2008 	ldr	r2, [fp, #-8]
  131608:	e5832008 	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
  13160c:	e51b3008 	ldr	r3, [fp, #-8]
  131610:	e5d33000 	ldrb	r3, [r3]
  131614:	e6ff3073 	uxth	r3, r3
  131618:	e203300f 	and	r3, r3, #15
  13161c:	e6ff3073 	uxth	r3, r3
  131620:	e1a03103 	lsl	r3, r3, #2
  131624:	e6ff2073 	uxth	r2, r3
  131628:	e30e3d68 	movw	r3, #60776	; 0xed68
  13162c:	e3403014 	movt	r3, #20
  131630:	e1c320bc 	strh	r2, [r3, #12]

#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
  131634:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  131638:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  13163c:	ebffaa0c 	bl	11be74 <raw_input>
  131640:	e1a03000 	mov	r3, r0
  131644:	e3530000 	cmp	r3, #0
  131648:	1a000076 	bne	131828 <ip4_input+0x84c>
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
  13164c:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  131650:	e2633000 	rsb	r3, r3, #0
  131654:	e6ff3073 	uxth	r3, r3
  131658:	e6bf3073 	sxth	r3, r3
  13165c:	e1a01003 	mov	r1, r3
  131660:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131664:	ebffa51a 	bl	11aad4 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
  131668:	e51b3008 	ldr	r3, [fp, #-8]
  13166c:	e5d33009 	ldrb	r3, [r3, #9]
  131670:	e2433001 	sub	r3, r3, #1
  131674:	e3530010 	cmp	r3, #16
  131678:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  13167c:	ea000036 	b	13175c <ip4_input+0x780>
  131680:	0013171c 	.word	0x0013171c
  131684:	00131748 	.word	0x00131748
  131688:	0013175c 	.word	0x0013175c
  13168c:	0013175c 	.word	0x0013175c
  131690:	0013175c 	.word	0x0013175c
  131694:	001316f0 	.word	0x001316f0
  131698:	0013175c 	.word	0x0013175c
  13169c:	0013175c 	.word	0x0013175c
  1316a0:	0013175c 	.word	0x0013175c
  1316a4:	0013175c 	.word	0x0013175c
  1316a8:	0013175c 	.word	0x0013175c
  1316ac:	0013175c 	.word	0x0013175c
  1316b0:	0013175c 	.word	0x0013175c
  1316b4:	0013175c 	.word	0x0013175c
  1316b8:	0013175c 	.word	0x0013175c
  1316bc:	0013175c 	.word	0x0013175c
  1316c0:	001316c4 	.word	0x001316c4
#if LWIP_UDP
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
  1316c4:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  1316c8:	e3403057 	movt	r3, #87	; 0x57
  1316cc:	e593313c 	ldr	r3, [r3, #316]	; 0x13c
  1316d0:	e2832001 	add	r2, r3, #1
  1316d4:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  1316d8:	e3403057 	movt	r3, #87	; 0x57
  1316dc:	e583213c 	str	r2, [r3, #316]	; 0x13c
      udp_input(p, inp);
  1316e0:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  1316e4:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1316e8:	ebffd847 	bl	12780c <udp_input>
      break;
  1316ec:	ea00004e 	b	13182c <ip4_input+0x850>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
  1316f0:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  1316f4:	e3403057 	movt	r3, #87	; 0x57
  1316f8:	e593313c 	ldr	r3, [r3, #316]	; 0x13c
  1316fc:	e2832001 	add	r2, r3, #1
  131700:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  131704:	e3403057 	movt	r3, #87	; 0x57
  131708:	e583213c 	str	r2, [r3, #316]	; 0x13c
      tcp_input(p, inp);
  13170c:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  131710:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131714:	ebffba03 	bl	11ff28 <tcp_input>
      break;
  131718:	ea000043 	b	13182c <ip4_input+0x850>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
  13171c:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  131720:	e3403057 	movt	r3, #87	; 0x57
  131724:	e593313c 	ldr	r3, [r3, #316]	; 0x13c
  131728:	e2832001 	add	r2, r3, #1
  13172c:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  131730:	e3403057 	movt	r3, #87	; 0x57
  131734:	e583213c 	str	r2, [r3, #316]	; 0x13c
      icmp_input(p, inp);
  131738:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  13173c:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131740:	ebfff665 	bl	12f0dc <icmp_input>
      break;
  131744:	ea000038 	b	13182c <ip4_input+0x850>
#endif /* LWIP_ICMP */
#if LWIP_IGMP
    case IP_PROTO_IGMP:
      igmp_input(p, inp, ip4_current_dest_addr());
  131748:	e59f214c 	ldr	r2, [pc, #332]	; 13189c <ip4_input+0x8c0>
  13174c:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  131750:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131754:	ebfff9ed 	bl	12ff10 <igmp_input>
      break;
  131758:	ea000033 	b	13182c <ip4_input+0x850>
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
  13175c:	e30e3d68 	movw	r3, #60776	; 0xed68
  131760:	e3403014 	movt	r3, #20
  131764:	e5933014 	ldr	r3, [r3, #20]
  131768:	e51b100c 	ldr	r1, [fp, #-12]
  13176c:	e1a00003 	mov	r0, r3
  131770:	eb000250 	bl	1320b8 <ip4_addr_isbroadcast_u32>
  131774:	e1a03000 	mov	r3, r0
  131778:	e3530000 	cmp	r3, #0
  13177c:	1a00000f 	bne	1317c0 <ip4_input+0x7e4>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
  131780:	e30e3d68 	movw	r3, #60776	; 0xed68
  131784:	e3403014 	movt	r3, #20
  131788:	e5933014 	ldr	r3, [r3, #20]
  13178c:	e20330f0 	and	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
  131790:	e35300e0 	cmp	r3, #224	; 0xe0
  131794:	0a000009 	beq	1317c0 <ip4_input+0x7e4>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
  131798:	e15b31f6 	ldrsh	r3, [fp, #-22]	; 0xffffffea
  13179c:	e1a01003 	mov	r1, r3
  1317a0:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1317a4:	ebffa4d9 	bl	11ab10 <pbuf_header_force>
        p->payload = iphdr;
  1317a8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1317ac:	e51b2008 	ldr	r2, [fp, #-8]
  1317b0:	e5832004 	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
  1317b4:	e3a01002 	mov	r1, #2
  1317b8:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1317bc:	ebfff81c 	bl	12f834 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
  1317c0:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1317c4:	ebffa4e0 	bl	11ab4c <pbuf_free>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", (u16_t)IPH_PROTO(iphdr)));

      IP_STATS_INC(ip.proterr);
  1317c8:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  1317cc:	e3403057 	movt	r3, #87	; 0x57
  1317d0:	e1d335b8 	ldrh	r3, [r3, #88]	; 0x58
  1317d4:	e2833001 	add	r3, r3, #1
  1317d8:	e6ff2073 	uxth	r2, r3
  1317dc:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  1317e0:	e3403057 	movt	r3, #87	; 0x57
  1317e4:	e1c325b8 	strh	r2, [r3, #88]	; 0x58
      IP_STATS_INC(ip.drop);
  1317e8:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  1317ec:	e3403057 	movt	r3, #87	; 0x57
  1317f0:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  1317f4:	e2833001 	add	r3, r3, #1
  1317f8:	e6ff2073 	uxth	r2, r3
  1317fc:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  131800:	e3403057 	movt	r3, #87	; 0x57
  131804:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinunknownprotos);
  131808:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  13180c:	e3403057 	movt	r3, #87	; 0x57
  131810:	e5933134 	ldr	r3, [r3, #308]	; 0x134
  131814:	e2832001 	add	r2, r3, #1
  131818:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  13181c:	e3403057 	movt	r3, #87	; 0x57
  131820:	e5832134 	str	r2, [r3, #308]	; 0x134
  131824:	ea000000 	b	13182c <ip4_input+0x850>
    }
  }
  131828:	e320f000 	nop	{0}

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
  13182c:	e30e3d68 	movw	r3, #60776	; 0xed68
  131830:	e3403014 	movt	r3, #20
  131834:	e3a02000 	mov	r2, #0
  131838:	e5832000 	str	r2, [r3]
  ip_data.current_input_netif = NULL;
  13183c:	e30e3d68 	movw	r3, #60776	; 0xed68
  131840:	e3403014 	movt	r3, #20
  131844:	e3a02000 	mov	r2, #0
  131848:	e5832004 	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
  13184c:	e30e3d68 	movw	r3, #60776	; 0xed68
  131850:	e3403014 	movt	r3, #20
  131854:	e3a02000 	mov	r2, #0
  131858:	e5832008 	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
  13185c:	e30e3d68 	movw	r3, #60776	; 0xed68
  131860:	e3403014 	movt	r3, #20
  131864:	e3a02000 	mov	r2, #0
  131868:	e1c320bc 	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
  13186c:	e30e3d68 	movw	r3, #60776	; 0xed68
  131870:	e3403014 	movt	r3, #20
  131874:	e3a02000 	mov	r2, #0
  131878:	e5832010 	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
  13187c:	e30e3d68 	movw	r3, #60776	; 0xed68
  131880:	e3403014 	movt	r3, #20
  131884:	e3a02000 	mov	r2, #0
  131888:	e5832014 	str	r2, [r3, #20]

  return ERR_OK;
  13188c:	e3a03000 	mov	r3, #0
}
  131890:	e1a00003 	mov	r0, r3
  131894:	e24bd004 	sub	sp, fp, #4
  131898:	e8bd8800 	pop	{fp, pc}
  13189c:	0014ed7c 	.word	0x0014ed7c

001318a0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
  1318a0:	e92d4800 	push	{fp, lr}
  1318a4:	e28db004 	add	fp, sp, #4
  1318a8:	e24dd028 	sub	sp, sp, #40	; 0x28
  1318ac:	e50b0008 	str	r0, [fp, #-8]
  1318b0:	e50b100c 	str	r1, [fp, #-12]
  1318b4:	e50b2010 	str	r2, [fp, #-16]
  1318b8:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
#if IP_OPTIONS_SEND
  return ip4_output_if_opt(p, src, dest, ttl, tos, proto, netif, NULL, 0);
  1318bc:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  1318c0:	e3a03000 	mov	r3, #0
  1318c4:	e58d3010 	str	r3, [sp, #16]
  1318c8:	e3a03000 	mov	r3, #0
  1318cc:	e58d300c 	str	r3, [sp, #12]
  1318d0:	e59b300c 	ldr	r3, [fp, #12]
  1318d4:	e58d3008 	str	r3, [sp, #8]
  1318d8:	e5db3008 	ldrb	r3, [fp, #8]
  1318dc:	e58d3004 	str	r3, [sp, #4]
  1318e0:	e5db3004 	ldrb	r3, [fp, #4]
  1318e4:	e58d3000 	str	r3, [sp]
  1318e8:	e1a03002 	mov	r3, r2
  1318ec:	e51b2010 	ldr	r2, [fp, #-16]
  1318f0:	e51b100c 	ldr	r1, [fp, #-12]
  1318f4:	e51b0008 	ldr	r0, [fp, #-8]
  1318f8:	eb000003 	bl	13190c <ip4_output_if_opt>
  1318fc:	e1a03000 	mov	r3, r0
}
  131900:	e1a00003 	mov	r0, r3
  131904:	e24bd004 	sub	sp, fp, #4
  131908:	e8bd8800 	pop	{fp, pc}

0013190c <ip4_output_if_opt>:
 */
err_t
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
  13190c:	e92d4800 	push	{fp, lr}
  131910:	e28db004 	add	fp, sp, #4
  131914:	e24dd030 	sub	sp, sp, #48	; 0x30
  131918:	e50b0010 	str	r0, [fp, #-16]
  13191c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  131920:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  131924:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
  131928:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13192c:	e50b3008 	str	r3, [fp, #-8]
  if (dest != LWIP_IP_HDRINCL) {
  131930:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  131934:	e3530000 	cmp	r3, #0
  131938:	0a000009 	beq	131964 <ip4_output_if_opt+0x58>
    if (ip4_addr_isany(src)) {
  13193c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131940:	e3530000 	cmp	r3, #0
  131944:	0a000003 	beq	131958 <ip4_output_if_opt+0x4c>
  131948:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13194c:	e5933000 	ldr	r3, [r3]
  131950:	e3530000 	cmp	r3, #0
  131954:	1a000002 	bne	131964 <ip4_output_if_opt+0x58>
      src_used = netif_ip4_addr(netif);
  131958:	e59b300c 	ldr	r3, [fp, #12]
  13195c:	e2833004 	add	r3, r3, #4
  131960:	e50b3008 	str	r3, [fp, #-8]
    }
  }

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
  131964:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  131968:	e1db31b4 	ldrh	r3, [fp, #20]
  13196c:	e58d3010 	str	r3, [sp, #16]
  131970:	e59b3010 	ldr	r3, [fp, #16]
  131974:	e58d300c 	str	r3, [sp, #12]
  131978:	e59b300c 	ldr	r3, [fp, #12]
  13197c:	e58d3008 	str	r3, [sp, #8]
  131980:	e5db3008 	ldrb	r3, [fp, #8]
  131984:	e58d3004 	str	r3, [sp, #4]
  131988:	e5db3004 	ldrb	r3, [fp, #4]
  13198c:	e58d3000 	str	r3, [sp]
  131990:	e1a03002 	mov	r3, r2
  131994:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  131998:	e51b1008 	ldr	r1, [fp, #-8]
  13199c:	e51b0010 	ldr	r0, [fp, #-16]
  1319a0:	eb00001e 	bl	131a20 <ip4_output_if_opt_src>
  1319a4:	e1a03000 	mov	r3, r0
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
#endif /* IP_OPTIONS_SEND */
}
  1319a8:	e1a00003 	mov	r0, r3
  1319ac:	e24bd004 	sub	sp, fp, #4
  1319b0:	e8bd8800 	pop	{fp, pc}

001319b4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
  1319b4:	e92d4800 	push	{fp, lr}
  1319b8:	e28db004 	add	fp, sp, #4
  1319bc:	e24dd028 	sub	sp, sp, #40	; 0x28
  1319c0:	e50b0008 	str	r0, [fp, #-8]
  1319c4:	e50b100c 	str	r1, [fp, #-12]
  1319c8:	e50b2010 	str	r2, [fp, #-16]
  1319cc:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src, dest, ttl, tos, proto, netif, NULL, 0);
  1319d0:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  1319d4:	e3a03000 	mov	r3, #0
  1319d8:	e58d3010 	str	r3, [sp, #16]
  1319dc:	e3a03000 	mov	r3, #0
  1319e0:	e58d300c 	str	r3, [sp, #12]
  1319e4:	e59b300c 	ldr	r3, [fp, #12]
  1319e8:	e58d3008 	str	r3, [sp, #8]
  1319ec:	e5db3008 	ldrb	r3, [fp, #8]
  1319f0:	e58d3004 	str	r3, [sp, #4]
  1319f4:	e5db3004 	ldrb	r3, [fp, #4]
  1319f8:	e58d3000 	str	r3, [sp]
  1319fc:	e1a03002 	mov	r3, r2
  131a00:	e51b2010 	ldr	r2, [fp, #-16]
  131a04:	e51b100c 	ldr	r1, [fp, #-12]
  131a08:	e51b0008 	ldr	r0, [fp, #-8]
  131a0c:	eb000003 	bl	131a20 <ip4_output_if_opt_src>
  131a10:	e1a03000 	mov	r3, r0
}
  131a14:	e1a00003 	mov	r0, r3
  131a18:	e24bd004 	sub	sp, fp, #4
  131a1c:	e8bd8800 	pop	{fp, pc}

00131a20 <ip4_output_if_opt_src>:
 */
err_t
ip4_output_if_opt_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
  131a20:	e92d4800 	push	{fp, lr}
  131a24:	e28db004 	add	fp, sp, #4
  131a28:	e24dd028 	sub	sp, sp, #40	; 0x28
  131a2c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  131a30:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  131a34:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  131a38:	e54b3029 	strb	r3, [fp, #-41]	; 0xffffffd7
#endif /* IP_OPTIONS_SEND */
  struct ip_hdr *iphdr;
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
  131a3c:	e3a03000 	mov	r3, #0
  131a40:	e50b3008 	str	r3, [fp, #-8]
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
  131a44:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  131a48:	e1d330be 	ldrh	r3, [r3, #14]
  131a4c:	e3530001 	cmp	r3, #1
  131a50:	0a000006 	beq	131a70 <ip4_output_if_opt_src+0x50>
  131a54:	e3080dd0 	movw	r0, #36304	; 0x8dd0
  131a58:	e3400014 	movt	r0, #20
  131a5c:	ebff45ac 	bl	103114 <rt_kprintf>
  131a60:	e3001333 	movw	r1, #819	; 0x333
  131a64:	e3080ddc 	movw	r0, #36316	; 0x8ddc
  131a68:	e3400014 	movt	r0, #20
  131a6c:	ebff6428 	bl	10ab14 <sys_arch_assert>

  MIB2_STATS_INC(mib2.ipoutrequests);
  131a70:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  131a74:	e3403057 	movt	r3, #87	; 0x57
  131a78:	e5933140 	ldr	r3, [r3, #320]	; 0x140
  131a7c:	e2832001 	add	r2, r3, #1
  131a80:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  131a84:	e3403057 	movt	r3, #87	; 0x57
  131a88:	e5832140 	str	r2, [r3, #320]	; 0x140

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
  131a8c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  131a90:	e3530000 	cmp	r3, #0
  131a94:	0a000112 	beq	131ee4 <ip4_output_if_opt_src+0x4c4>
    u16_t ip_hlen = IP_HLEN;
  131a98:	e3a03014 	mov	r3, #20
  131a9c:	e14b30ba 	strh	r3, [fp, #-10]
#if IP_OPTIONS_SEND
    u16_t optlen_aligned = 0;
  131aa0:	e3a03000 	mov	r3, #0
  131aa4:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
    if (optlen != 0) {
  131aa8:	e1db31b4 	ldrh	r3, [fp, #20]
  131aac:	e3530000 	cmp	r3, #0
  131ab0:	0a00004b 	beq	131be4 <ip4_output_if_opt_src+0x1c4>
#if CHECKSUM_GEN_IP_INLINE
      int i;
#endif /* CHECKSUM_GEN_IP_INLINE */
      /* round up to a multiple of 4 */
      optlen_aligned = ((optlen + 3) & ~3);
  131ab4:	e1db31b4 	ldrh	r3, [fp, #20]
  131ab8:	e2833003 	add	r3, r3, #3
  131abc:	e6ff3073 	uxth	r3, r3
  131ac0:	e3c33003 	bic	r3, r3, #3
  131ac4:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
      ip_hlen += optlen_aligned;
  131ac8:	e15b20ba 	ldrh	r2, [fp, #-10]
  131acc:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  131ad0:	e0823003 	add	r3, r2, r3
  131ad4:	e14b30ba 	strh	r3, [fp, #-10]
      /* First write in the IP options */
      if (pbuf_header(p, optlen_aligned)) {
  131ad8:	e15b31f6 	ldrsh	r3, [fp, #-22]	; 0xffffffea
  131adc:	e1a01003 	mov	r1, r3
  131ae0:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  131ae4:	ebffa3fa 	bl	11aad4 <pbuf_header>
  131ae8:	e1a03000 	mov	r3, r0
  131aec:	e3530000 	cmp	r3, #0
  131af0:	0a000010 	beq	131b38 <ip4_output_if_opt_src+0x118>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output_if_opt: not enough room for IP options in pbuf\n"));
        IP_STATS_INC(ip.err);
  131af4:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  131af8:	e3403057 	movt	r3, #87	; 0x57
  131afc:	e1d335bc 	ldrh	r3, [r3, #92]	; 0x5c
  131b00:	e2833001 	add	r3, r3, #1
  131b04:	e6ff2073 	uxth	r2, r3
  131b08:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  131b0c:	e3403057 	movt	r3, #87	; 0x57
  131b10:	e1c325bc 	strh	r2, [r3, #92]	; 0x5c
        MIB2_STATS_INC(mib2.ipoutdiscards);
  131b14:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  131b18:	e3403057 	movt	r3, #87	; 0x57
  131b1c:	e5933144 	ldr	r3, [r3, #324]	; 0x144
  131b20:	e2832001 	add	r2, r3, #1
  131b24:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  131b28:	e3403057 	movt	r3, #87	; 0x57
  131b2c:	e5832144 	str	r2, [r3, #324]	; 0x144
        return ERR_BUF;
  131b30:	e3e03001 	mvn	r3, #1
  131b34:	ea00012a 	b	131fe4 <ip4_output_if_opt_src+0x5c4>
      }
      MEMCPY(p->payload, ip_options, optlen);
  131b38:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  131b3c:	e5933004 	ldr	r3, [r3, #4]
  131b40:	e1db21b4 	ldrh	r2, [fp, #20]
  131b44:	e59b1010 	ldr	r1, [fp, #16]
  131b48:	e1a00003 	mov	r0, r3
  131b4c:	eb003a2e 	bl	14040c <memcpy>
      if (optlen < optlen_aligned) {
  131b50:	e1db21b4 	ldrh	r2, [fp, #20]
  131b54:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  131b58:	e1520003 	cmp	r2, r3
  131b5c:	2a000009 	bcs	131b88 <ip4_output_if_opt_src+0x168>
        /* zero the remaining bytes */
        memset(((char*)p->payload) + optlen, 0, optlen_aligned - optlen);
  131b60:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  131b64:	e5932004 	ldr	r2, [r3, #4]
  131b68:	e1db31b4 	ldrh	r3, [fp, #20]
  131b6c:	e0820003 	add	r0, r2, r3
  131b70:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  131b74:	e1db31b4 	ldrh	r3, [fp, #20]
  131b78:	e0423003 	sub	r3, r2, r3
  131b7c:	e1a02003 	mov	r2, r3
  131b80:	e3a01000 	mov	r1, #0
  131b84:	eb003b58 	bl	1408ec <memset>
      }
#if CHECKSUM_GEN_IP_INLINE
      for (i = 0; i < optlen_aligned/2; i++) {
  131b88:	e3a03000 	mov	r3, #0
  131b8c:	e50b3010 	str	r3, [fp, #-16]
  131b90:	ea00000c 	b	131bc8 <ip4_output_if_opt_src+0x1a8>
        chk_sum += ((u16_t*)p->payload)[i];
  131b94:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  131b98:	e5932004 	ldr	r2, [r3, #4]
  131b9c:	e51b3010 	ldr	r3, [fp, #-16]
  131ba0:	e1a03083 	lsl	r3, r3, #1
  131ba4:	e0823003 	add	r3, r2, r3
  131ba8:	e1d330b0 	ldrh	r3, [r3]
  131bac:	e1a02003 	mov	r2, r3
  131bb0:	e51b3008 	ldr	r3, [fp, #-8]
  131bb4:	e0833002 	add	r3, r3, r2
  131bb8:	e50b3008 	str	r3, [fp, #-8]
      for (i = 0; i < optlen_aligned/2; i++) {
  131bbc:	e51b3010 	ldr	r3, [fp, #-16]
  131bc0:	e2833001 	add	r3, r3, #1
  131bc4:	e50b3010 	str	r3, [fp, #-16]
  131bc8:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  131bcc:	e1a030a3 	lsr	r3, r3, #1
  131bd0:	e6ff3073 	uxth	r3, r3
  131bd4:	e1a02003 	mov	r2, r3
  131bd8:	e51b3010 	ldr	r3, [fp, #-16]
  131bdc:	e1530002 	cmp	r3, r2
  131be0:	baffffeb 	blt	131b94 <ip4_output_if_opt_src+0x174>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
  131be4:	e3a01014 	mov	r1, #20
  131be8:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  131bec:	ebffa3b8 	bl	11aad4 <pbuf_header>
  131bf0:	e1a03000 	mov	r3, r0
  131bf4:	e3530000 	cmp	r3, #0
  131bf8:	0a000010 	beq	131c40 <ip4_output_if_opt_src+0x220>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
  131bfc:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  131c00:	e3403057 	movt	r3, #87	; 0x57
  131c04:	e1d335bc 	ldrh	r3, [r3, #92]	; 0x5c
  131c08:	e2833001 	add	r3, r3, #1
  131c0c:	e6ff2073 	uxth	r2, r3
  131c10:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  131c14:	e3403057 	movt	r3, #87	; 0x57
  131c18:	e1c325bc 	strh	r2, [r3, #92]	; 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
  131c1c:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  131c20:	e3403057 	movt	r3, #87	; 0x57
  131c24:	e5933144 	ldr	r3, [r3, #324]	; 0x144
  131c28:	e2832001 	add	r2, r3, #1
  131c2c:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  131c30:	e3403057 	movt	r3, #87	; 0x57
  131c34:	e5832144 	str	r2, [r3, #324]	; 0x144
      return ERR_BUF;
  131c38:	e3e03001 	mvn	r3, #1
  131c3c:	ea0000e8 	b	131fe4 <ip4_output_if_opt_src+0x5c4>
    }

    iphdr = (struct ip_hdr *)p->payload;
  131c40:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  131c44:	e5933004 	ldr	r3, [r3, #4]
  131c48:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
  131c4c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  131c50:	e1d330ba 	ldrh	r3, [r3, #10]
  131c54:	e3530013 	cmp	r3, #19
  131c58:	8a000006 	bhi	131c78 <ip4_output_if_opt_src+0x258>
  131c5c:	e3080e0c 	movw	r0, #36364	; 0x8e0c
  131c60:	e3400014 	movt	r0, #20
  131c64:	ebff452a 	bl	103114 <rt_kprintf>
  131c68:	e3001361 	movw	r1, #865	; 0x361
  131c6c:	e3080ddc 	movw	r0, #36316	; 0x8ddc
  131c70:	e3400014 	movt	r0, #20
  131c74:	ebff63a6 	bl	10ab14 <sys_arch_assert>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
  131c78:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131c7c:	e55b2029 	ldrb	r2, [fp, #-41]	; 0xffffffd7
  131c80:	e5c32008 	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
  131c84:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131c88:	e5db2008 	ldrb	r2, [fp, #8]
  131c8c:	e5c32009 	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
  131c90:	e5db2008 	ldrb	r2, [fp, #8]
  131c94:	e55b3029 	ldrb	r3, [fp, #-41]	; 0xffffffd7
  131c98:	e1a03403 	lsl	r3, r3, #8
  131c9c:	e1823003 	orr	r3, r2, r3
  131ca0:	e1a03403 	lsl	r3, r3, #8
  131ca4:	e6ff2073 	uxth	r2, r3
  131ca8:	e5db1008 	ldrb	r1, [fp, #8]
  131cac:	e55b3029 	ldrb	r3, [fp, #-41]	; 0xffffffd7
  131cb0:	e1a03403 	lsl	r3, r3, #8
  131cb4:	e1813003 	orr	r3, r1, r3
  131cb8:	e1a03423 	lsr	r3, r3, #8
  131cbc:	e6ef3073 	uxtb	r3, r3
  131cc0:	e1823003 	orr	r3, r2, r3
  131cc4:	e51b2008 	ldr	r2, [fp, #-8]
  131cc8:	e0823003 	add	r3, r2, r3
  131ccc:	e50b3008 	str	r3, [fp, #-8]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
  131cd0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  131cd4:	e5932000 	ldr	r2, [r3]
  131cd8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131cdc:	e5832010 	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
  131ce0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131ce4:	e5933010 	ldr	r3, [r3, #16]
  131ce8:	e6ff3073 	uxth	r3, r3
  131cec:	e51b2008 	ldr	r2, [fp, #-8]
  131cf0:	e0823003 	add	r3, r2, r3
  131cf4:	e50b3008 	str	r3, [fp, #-8]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
  131cf8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131cfc:	e5933010 	ldr	r3, [r3, #16]
  131d00:	e1a03823 	lsr	r3, r3, #16
  131d04:	e51b2008 	ldr	r2, [fp, #-8]
  131d08:	e0823003 	add	r3, r2, r3
  131d0c:	e50b3008 	str	r3, [fp, #-8]
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
  131d10:	e15b30ba 	ldrh	r3, [fp, #-10]
  131d14:	e1a03123 	lsr	r3, r3, #2
  131d18:	e6ff3073 	uxth	r3, r3
  131d1c:	e6ef3073 	uxtb	r3, r3
  131d20:	e3833040 	orr	r3, r3, #64	; 0x40
  131d24:	e6ef2073 	uxtb	r2, r3
  131d28:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131d2c:	e5c32000 	strb	r2, [r3]
    IPH_TOS_SET(iphdr, tos);
  131d30:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131d34:	e5db2004 	ldrb	r2, [fp, #4]
  131d38:	e5c32001 	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
  131d3c:	e5db2004 	ldrb	r2, [fp, #4]
  131d40:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131d44:	e5d33000 	ldrb	r3, [r3]
  131d48:	e1a03403 	lsl	r3, r3, #8
  131d4c:	e1823003 	orr	r3, r2, r3
  131d50:	e1a03403 	lsl	r3, r3, #8
  131d54:	e6ff2073 	uxth	r2, r3
  131d58:	e5db1004 	ldrb	r1, [fp, #4]
  131d5c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131d60:	e5d33000 	ldrb	r3, [r3]
  131d64:	e1a03403 	lsl	r3, r3, #8
  131d68:	e1813003 	orr	r3, r1, r3
  131d6c:	e1a03423 	lsr	r3, r3, #8
  131d70:	e6ef3073 	uxtb	r3, r3
  131d74:	e1823003 	orr	r3, r2, r3
  131d78:	e51b2008 	ldr	r2, [fp, #-8]
  131d7c:	e0823003 	add	r3, r2, r3
  131d80:	e50b3008 	str	r3, [fp, #-8]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
  131d84:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  131d88:	e1d330b8 	ldrh	r3, [r3, #8]
  131d8c:	e1a00003 	mov	r0, r3
  131d90:	ebff9136 	bl	116270 <lwip_htons>
  131d94:	e1a03000 	mov	r3, r0
  131d98:	e1a02003 	mov	r2, r3
  131d9c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131da0:	e1c320b2 	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
  131da4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131da8:	e1d330b2 	ldrh	r3, [r3, #2]
  131dac:	e6ff3073 	uxth	r3, r3
  131db0:	e1a02003 	mov	r2, r3
  131db4:	e51b3008 	ldr	r3, [fp, #-8]
  131db8:	e0833002 	add	r3, r3, r2
  131dbc:	e50b3008 	str	r3, [fp, #-8]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
  131dc0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131dc4:	e3a02000 	mov	r2, #0
  131dc8:	e5c32006 	strb	r2, [r3, #6]
  131dcc:	e3a02000 	mov	r2, #0
  131dd0:	e5c32007 	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
  131dd4:	e30e335c 	movw	r3, #58204	; 0xe35c
  131dd8:	e3403014 	movt	r3, #20
  131ddc:	e1d330b0 	ldrh	r3, [r3]
  131de0:	e1a00003 	mov	r0, r3
  131de4:	ebff9121 	bl	116270 <lwip_htons>
  131de8:	e1a03000 	mov	r3, r0
  131dec:	e1a02003 	mov	r2, r3
  131df0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131df4:	e1c320b4 	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
  131df8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131dfc:	e1d330b4 	ldrh	r3, [r3, #4]
  131e00:	e6ff3073 	uxth	r3, r3
  131e04:	e1a02003 	mov	r2, r3
  131e08:	e51b3008 	ldr	r3, [fp, #-8]
  131e0c:	e0833002 	add	r3, r3, r2
  131e10:	e50b3008 	str	r3, [fp, #-8]
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
  131e14:	e30e335c 	movw	r3, #58204	; 0xe35c
  131e18:	e3403014 	movt	r3, #20
  131e1c:	e1d330b0 	ldrh	r3, [r3]
  131e20:	e2833001 	add	r3, r3, #1
  131e24:	e6ff2073 	uxth	r2, r3
  131e28:	e30e335c 	movw	r3, #58204	; 0xe35c
  131e2c:	e3403014 	movt	r3, #20
  131e30:	e1c320b0 	strh	r2, [r3]

    if (src == NULL) {
  131e34:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  131e38:	e3530000 	cmp	r3, #0
  131e3c:	1a000005 	bne	131e58 <ip4_output_if_opt_src+0x438>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
  131e40:	e3083e3c 	movw	r3, #36412	; 0x8e3c
  131e44:	e3403014 	movt	r3, #20
  131e48:	e5932000 	ldr	r2, [r3]
  131e4c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131e50:	e583200c 	str	r2, [r3, #12]
  131e54:	ea000003 	b	131e68 <ip4_output_if_opt_src+0x448>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
  131e58:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  131e5c:	e5932000 	ldr	r2, [r3]
  131e60:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131e64:	e583200c 	str	r2, [r3, #12]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
  131e68:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131e6c:	e593300c 	ldr	r3, [r3, #12]
  131e70:	e6ff3073 	uxth	r3, r3
  131e74:	e51b2008 	ldr	r2, [fp, #-8]
  131e78:	e0823003 	add	r3, r2, r3
  131e7c:	e50b3008 	str	r3, [fp, #-8]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
  131e80:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131e84:	e593300c 	ldr	r3, [r3, #12]
  131e88:	e1a03823 	lsr	r3, r3, #16
  131e8c:	e51b2008 	ldr	r2, [fp, #-8]
  131e90:	e0823003 	add	r3, r2, r3
  131e94:	e50b3008 	str	r3, [fp, #-8]
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
  131e98:	e51b3008 	ldr	r3, [fp, #-8]
  131e9c:	e1a02823 	lsr	r2, r3, #16
  131ea0:	e51b3008 	ldr	r3, [fp, #-8]
  131ea4:	e6ff3073 	uxth	r3, r3
  131ea8:	e0823003 	add	r3, r2, r3
  131eac:	e50b3008 	str	r3, [fp, #-8]
    chk_sum = (chk_sum >> 16) + chk_sum;
  131eb0:	e51b3008 	ldr	r3, [fp, #-8]
  131eb4:	e1a03823 	lsr	r3, r3, #16
  131eb8:	e51b2008 	ldr	r2, [fp, #-8]
  131ebc:	e0823003 	add	r3, r2, r3
  131ec0:	e50b3008 	str	r3, [fp, #-8]
    chk_sum = ~chk_sum;
  131ec4:	e51b3008 	ldr	r3, [fp, #-8]
  131ec8:	e1e03003 	mvn	r3, r3
  131ecc:	e50b3008 	str	r3, [fp, #-8]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
  131ed0:	e51b3008 	ldr	r3, [fp, #-8]
  131ed4:	e6ff2073 	uxth	r2, r3
  131ed8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131edc:	e1c320ba 	strh	r2, [r3, #10]
  131ee0:	ea000007 	b	131f04 <ip4_output_if_opt_src+0x4e4>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
  131ee4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  131ee8:	e5933004 	ldr	r3, [r3, #4]
  131eec:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    ip4_addr_copy(dest_addr, iphdr->dest);
  131ef0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131ef4:	e5933010 	ldr	r3, [r3, #16]
  131ef8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    dest = &dest_addr;
  131efc:	e24b301c 	sub	r3, fp, #28
  131f00:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  }

  IP_STATS_INC(ip.xmit);
  131f04:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  131f08:	e3403057 	movt	r3, #87	; 0x57
  131f0c:	e1d334b8 	ldrh	r3, [r3, #72]	; 0x48
  131f10:	e2833001 	add	r3, r3, #1
  131f14:	e6ff2073 	uxth	r2, r3
  131f18:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  131f1c:	e3403057 	movt	r3, #87	; 0x57
  131f20:	e1c324b8 	strh	r2, [r3, #72]	; 0x48

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: %c%c%"U16_F"\n", netif->name[0], netif->name[1], (u16_t)netif->num));
  ip4_debug_print(p);

#if ENABLE_LOOPBACK
  if (ip4_addr_cmp(dest, netif_ip4_addr(netif))
  131f24:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  131f28:	e5932000 	ldr	r2, [r3]
  131f2c:	e59b300c 	ldr	r3, [fp, #12]
  131f30:	e2833004 	add	r3, r3, #4
  131f34:	e5933000 	ldr	r3, [r3]
  131f38:	e1520003 	cmp	r2, r3
  131f3c:	0a000004 	beq	131f54 <ip4_output_if_opt_src+0x534>
#if !LWIP_HAVE_LOOPIF
      || ip4_addr_isloopback(dest)
  131f40:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  131f44:	e5933000 	ldr	r3, [r3]
  131f48:	e6ef3073 	uxtb	r3, r3
  131f4c:	e353007f 	cmp	r3, #127	; 0x7f
  131f50:	1a000004 	bne	131f68 <ip4_output_if_opt_src+0x548>
#endif /* !LWIP_HAVE_LOOPIF */
      ) {
    /* Packet to self, enqueue it for loopback */
    LWIP_DEBUGF(IP_DEBUG, ("netif_loop_output()"));
    return netif_loop_output(netif, p);
  131f54:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  131f58:	e59b000c 	ldr	r0, [fp, #12]
  131f5c:	ebff9eb2 	bl	119a2c <netif_loop_output>
  131f60:	e1a03000 	mov	r3, r0
  131f64:	ea00001e 	b	131fe4 <ip4_output_if_opt_src+0x5c4>
  }
#if LWIP_MULTICAST_TX_OPTIONS
  if ((p->flags & PBUF_FLAG_MCASTLOOP) != 0) {
  131f68:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  131f6c:	e5d3300d 	ldrb	r3, [r3, #13]
  131f70:	e2033004 	and	r3, r3, #4
  131f74:	e3530000 	cmp	r3, #0
  131f78:	0a000002 	beq	131f88 <ip4_output_if_opt_src+0x568>
    netif_loop_output(netif, p);
  131f7c:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  131f80:	e59b000c 	ldr	r0, [fp, #12]
  131f84:	ebff9ea8 	bl	119a2c <netif_loop_output>
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
  131f88:	e59b300c 	ldr	r3, [fp, #12]
  131f8c:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  131f90:	e3530000 	cmp	r3, #0
  131f94:	0a00000b 	beq	131fc8 <ip4_output_if_opt_src+0x5a8>
  131f98:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  131f9c:	e1d320b8 	ldrh	r2, [r3, #8]
  131fa0:	e59b300c 	ldr	r3, [fp, #12]
  131fa4:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  131fa8:	e1520003 	cmp	r2, r3
  131fac:	9a000005 	bls	131fc8 <ip4_output_if_opt_src+0x5a8>
    return ip4_frag(p, netif, dest);
  131fb0:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  131fb4:	e59b100c 	ldr	r1, [fp, #12]
  131fb8:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  131fbc:	eb00068e 	bl	1339fc <ip4_frag>
  131fc0:	e1a03000 	mov	r3, r0
  131fc4:	ea000006 	b	131fe4 <ip4_output_if_opt_src+0x5c4>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
  131fc8:	e59b300c 	ldr	r3, [fp, #12]
  131fcc:	e5933014 	ldr	r3, [r3, #20]
  131fd0:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  131fd4:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  131fd8:	e59b000c 	ldr	r0, [fp, #12]
  131fdc:	e12fff33 	blx	r3
  131fe0:	e1a03000 	mov	r3, r0
}
  131fe4:	e1a00003 	mov	r0, r3
  131fe8:	e24bd004 	sub	sp, fp, #4
  131fec:	e8bd8800 	pop	{fp, pc}

00131ff0 <ip4_output>:
 *         see ip_output_if() for more return values
 */
err_t
ip4_output(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
          u8_t ttl, u8_t tos, u8_t proto)
{
  131ff0:	e92d4800 	push	{fp, lr}
  131ff4:	e28db004 	add	fp, sp, #4
  131ff8:	e24dd028 	sub	sp, sp, #40	; 0x28
  131ffc:	e50b0010 	str	r0, [fp, #-16]
  132000:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  132004:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  132008:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  struct netif *netif;

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
  13200c:	e51b3010 	ldr	r3, [fp, #-16]
  132010:	e1d330be 	ldrh	r3, [r3, #14]
  132014:	e3530001 	cmp	r3, #1
  132018:	0a000006 	beq	132038 <ip4_output+0x48>
  13201c:	e3080dd0 	movw	r0, #36304	; 0x8dd0
  132020:	e3400014 	movt	r0, #20
  132024:	ebff443a 	bl	103114 <rt_kprintf>
  132028:	e30013db 	movw	r1, #987	; 0x3db
  13202c:	e3080ddc 	movw	r0, #36316	; 0x8ddc
  132030:	e3400014 	movt	r0, #20
  132034:	ebff62b6 	bl	10ab14 <sys_arch_assert>

  if ((netif = ip4_route_src(dest, src)) == NULL) {
  132038:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  13203c:	ebfffb3e 	bl	130d3c <ip4_route>
  132040:	e50b0008 	str	r0, [fp, #-8]
  132044:	e51b3008 	ldr	r3, [fp, #-8]
  132048:	e3530000 	cmp	r3, #0
  13204c:	1a000009 	bne	132078 <ip4_output+0x88>
    LWIP_DEBUGF(IP_DEBUG, ("ip4_output: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
  132050:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  132054:	e3403057 	movt	r3, #87	; 0x57
  132058:	e1d335b6 	ldrh	r3, [r3, #86]	; 0x56
  13205c:	e2833001 	add	r3, r3, #1
  132060:	e6ff2073 	uxth	r2, r3
  132064:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  132068:	e3403057 	movt	r3, #87	; 0x57
  13206c:	e1c325b6 	strh	r2, [r3, #86]	; 0x56
    return ERR_RTE;
  132070:	e3e03003 	mvn	r3, #3
  132074:	ea00000c 	b	1320ac <ip4_output+0xbc>
  }

  return ip4_output_if(p, src, dest, ttl, tos, proto, netif);
  132078:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  13207c:	e51b3008 	ldr	r3, [fp, #-8]
  132080:	e58d3008 	str	r3, [sp, #8]
  132084:	e5db3008 	ldrb	r3, [fp, #8]
  132088:	e58d3004 	str	r3, [sp, #4]
  13208c:	e5db3004 	ldrb	r3, [fp, #4]
  132090:	e58d3000 	str	r3, [sp]
  132094:	e1a03002 	mov	r3, r2
  132098:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  13209c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1320a0:	e51b0010 	ldr	r0, [fp, #-16]
  1320a4:	ebfffdfd 	bl	1318a0 <ip4_output_if>
  1320a8:	e1a03000 	mov	r3, r0
}
  1320ac:	e1a00003 	mov	r0, r3
  1320b0:	e24bd004 	sub	sp, fp, #4
  1320b4:	e8bd8800 	pop	{fp, pc}

001320b8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
  1320b8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1320bc:	e28db000 	add	fp, sp, #0
  1320c0:	e24dd014 	sub	sp, sp, #20
  1320c4:	e50b0010 	str	r0, [fp, #-16]
  1320c8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
  1320cc:	e51b3010 	ldr	r3, [fp, #-16]
  1320d0:	e50b3008 	str	r3, [fp, #-8]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
  1320d4:	e51b3010 	ldr	r3, [fp, #-16]
  1320d8:	e3730001 	cmn	r3, #1
  1320dc:	0a000002 	beq	1320ec <ip4_addr_isbroadcast_u32+0x34>
  1320e0:	e51b3010 	ldr	r3, [fp, #-16]
  1320e4:	e3530000 	cmp	r3, #0
  1320e8:	1a000001 	bne	1320f4 <ip4_addr_isbroadcast_u32+0x3c>
      (addr == IPADDR_ANY)) {
    return 1;
  1320ec:	e3a03001 	mov	r3, #1
  1320f0:	ea000028 	b	132198 <ip4_addr_isbroadcast_u32+0xe0>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
  1320f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1320f8:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1320fc:	e2033002 	and	r3, r3, #2
  132100:	e3530000 	cmp	r3, #0
  132104:	1a000001 	bne	132110 <ip4_addr_isbroadcast_u32+0x58>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  132108:	e3a03000 	mov	r3, #0
  13210c:	ea000021 	b	132198 <ip4_addr_isbroadcast_u32+0xe0>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
  132110:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132114:	e2833004 	add	r3, r3, #4
  132118:	e5933000 	ldr	r3, [r3]
  13211c:	e51b2010 	ldr	r2, [fp, #-16]
  132120:	e1520003 	cmp	r2, r3
  132124:	1a000001 	bne	132130 <ip4_addr_isbroadcast_u32+0x78>
    return 0;
  132128:	e3a03000 	mov	r3, #0
  13212c:	ea000019 	b	132198 <ip4_addr_isbroadcast_u32+0xe0>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
  132130:	e51b2008 	ldr	r2, [fp, #-8]
  132134:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132138:	e2833004 	add	r3, r3, #4
  13213c:	e5933000 	ldr	r3, [r3]
  132140:	e0222003 	eor	r2, r2, r3
  132144:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132148:	e2833008 	add	r3, r3, #8
  13214c:	e5933000 	ldr	r3, [r3]
  132150:	e0033002 	and	r3, r3, r2
  132154:	e3530000 	cmp	r3, #0
  132158:	1a00000d 	bne	132194 <ip4_addr_isbroadcast_u32+0xdc>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
  13215c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132160:	e2833008 	add	r3, r3, #8
  132164:	e5933000 	ldr	r3, [r3]
  132168:	e1e02003 	mvn	r2, r3
  13216c:	e51b3010 	ldr	r3, [fp, #-16]
  132170:	e0022003 	and	r2, r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
  132174:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132178:	e2833008 	add	r3, r3, #8
  13217c:	e5933000 	ldr	r3, [r3]
  132180:	e1e03003 	mvn	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
  132184:	e1520003 	cmp	r2, r3
  132188:	1a000001 	bne	132194 <ip4_addr_isbroadcast_u32+0xdc>
    /* => network broadcast address */
    return 1;
  13218c:	e3a03001 	mov	r3, #1
  132190:	ea000000 	b	132198 <ip4_addr_isbroadcast_u32+0xe0>
  } else {
    return 0;
  132194:	e3a03000 	mov	r3, #0
  }
}
  132198:	e1a00003 	mov	r0, r3
  13219c:	e28bd000 	add	sp, fp, #0
  1321a0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1321a4:	e12fff1e 	bx	lr

001321a8 <ip4_addr_netmask_valid>:
 * @param netmask the IPv4 netmask to check (in network byte order!)
 * @return 1 if the netmask is valid, 0 if it is not
 */
u8_t
ip4_addr_netmask_valid(u32_t netmask)
{
  1321a8:	e92d4800 	push	{fp, lr}
  1321ac:	e28db004 	add	fp, sp, #4
  1321b0:	e24dd010 	sub	sp, sp, #16
  1321b4:	e50b0010 	str	r0, [fp, #-16]
  u32_t mask;
  u32_t nm_hostorder = lwip_htonl(netmask);
  1321b8:	e51b0010 	ldr	r0, [fp, #-16]
  1321bc:	ebff9037 	bl	1162a0 <lwip_htonl>
  1321c0:	e50b000c 	str	r0, [fp, #-12]

  /* first, check for the first zero */
  for (mask = 1UL << 31 ; mask != 0; mask >>= 1) {
  1321c4:	e3a03102 	mov	r3, #-2147483648	; 0x80000000
  1321c8:	e50b3008 	str	r3, [fp, #-8]
  1321cc:	ea000007 	b	1321f0 <ip4_addr_netmask_valid+0x48>
    if ((nm_hostorder & mask) == 0) {
  1321d0:	e51b200c 	ldr	r2, [fp, #-12]
  1321d4:	e51b3008 	ldr	r3, [fp, #-8]
  1321d8:	e0033002 	and	r3, r3, r2
  1321dc:	e3530000 	cmp	r3, #0
  1321e0:	0a000006 	beq	132200 <ip4_addr_netmask_valid+0x58>
  for (mask = 1UL << 31 ; mask != 0; mask >>= 1) {
  1321e4:	e51b3008 	ldr	r3, [fp, #-8]
  1321e8:	e1a030a3 	lsr	r3, r3, #1
  1321ec:	e50b3008 	str	r3, [fp, #-8]
  1321f0:	e51b3008 	ldr	r3, [fp, #-8]
  1321f4:	e3530000 	cmp	r3, #0
  1321f8:	1afffff4 	bne	1321d0 <ip4_addr_netmask_valid+0x28>
  1321fc:	ea00000b 	b	132230 <ip4_addr_netmask_valid+0x88>
      break;
  132200:	e320f000 	nop	{0}
    }
  }
  /* then check that there is no one */
  for (; mask != 0; mask >>= 1) {
  132204:	ea000009 	b	132230 <ip4_addr_netmask_valid+0x88>
    if ((nm_hostorder & mask) != 0) {
  132208:	e51b200c 	ldr	r2, [fp, #-12]
  13220c:	e51b3008 	ldr	r3, [fp, #-8]
  132210:	e0033002 	and	r3, r3, r2
  132214:	e3530000 	cmp	r3, #0
  132218:	0a000001 	beq	132224 <ip4_addr_netmask_valid+0x7c>
      /* there is a one after the first zero -> invalid */
      return 0;
  13221c:	e3a03000 	mov	r3, #0
  132220:	ea000006 	b	132240 <ip4_addr_netmask_valid+0x98>
  for (; mask != 0; mask >>= 1) {
  132224:	e51b3008 	ldr	r3, [fp, #-8]
  132228:	e1a030a3 	lsr	r3, r3, #1
  13222c:	e50b3008 	str	r3, [fp, #-8]
  132230:	e51b3008 	ldr	r3, [fp, #-8]
  132234:	e3530000 	cmp	r3, #0
  132238:	1afffff2 	bne	132208 <ip4_addr_netmask_valid+0x60>
    }
  }
  /* no one after the first zero -> valid */
  return 1;
  13223c:	e3a03001 	mov	r3, #1
}
  132240:	e1a00003 	mov	r0, r3
  132244:	e24bd004 	sub	sp, fp, #4
  132248:	e8bd8800 	pop	{fp, pc}

0013224c <ipaddr_addr>:
 * @param cp IP address in ascii representation (e.g. "127.0.0.1")
 * @return ip address in network order
 */
u32_t
ipaddr_addr(const char *cp)
{
  13224c:	e92d4800 	push	{fp, lr}
  132250:	e28db004 	add	fp, sp, #4
  132254:	e24dd010 	sub	sp, sp, #16
  132258:	e50b0010 	str	r0, [fp, #-16]
  ip4_addr_t val;

  if (ip4addr_aton(cp, &val)) {
  13225c:	e24b3008 	sub	r3, fp, #8
  132260:	e1a01003 	mov	r1, r3
  132264:	e51b0010 	ldr	r0, [fp, #-16]
  132268:	eb000008 	bl	132290 <ip4addr_aton>
  13226c:	e1a03000 	mov	r3, r0
  132270:	e3530000 	cmp	r3, #0
  132274:	0a000001 	beq	132280 <ipaddr_addr+0x34>
    return ip4_addr_get_u32(&val);
  132278:	e51b3008 	ldr	r3, [fp, #-8]
  13227c:	ea000000 	b	132284 <ipaddr_addr+0x38>
  }
  return (IPADDR_NONE);
  132280:	e3e03000 	mvn	r3, #0
}
  132284:	e1a00003 	mov	r0, r3
  132288:	e24bd004 	sub	sp, fp, #4
  13228c:	e8bd8800 	pop	{fp, pc}

00132290 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
  132290:	e92d4800 	push	{fp, lr}
  132294:	e28db004 	add	fp, sp, #4
  132298:	e24dd028 	sub	sp, sp, #40	; 0x28
  13229c:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  1322a0:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
  1322a4:	e24b3020 	sub	r3, fp, #32
  1322a8:	e50b3010 	str	r3, [fp, #-16]

  c = *cp;
  1322ac:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1322b0:	e5d33000 	ldrb	r3, [r3]
  1322b4:	e54b300a 	strb	r3, [fp, #-10]
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!isdigit(c)) {
  1322b8:	e55b300a 	ldrb	r3, [fp, #-10]
  1322bc:	e353002f 	cmp	r3, #47	; 0x2f
  1322c0:	9a000002 	bls	1322d0 <ip4addr_aton+0x40>
  1322c4:	e55b300a 	ldrb	r3, [fp, #-10]
  1322c8:	e3530039 	cmp	r3, #57	; 0x39
  1322cc:	9a000001 	bls	1322d8 <ip4addr_aton+0x48>
      return 0;
  1322d0:	e3a03000 	mov	r3, #0
  1322d4:	ea0000ee 	b	132694 <ip4addr_aton+0x404>
    }
    val = 0;
  1322d8:	e3a03000 	mov	r3, #0
  1322dc:	e50b3008 	str	r3, [fp, #-8]
    base = 10;
  1322e0:	e3a0300a 	mov	r3, #10
  1322e4:	e54b3009 	strb	r3, [fp, #-9]
    if (c == '0') {
  1322e8:	e55b300a 	ldrb	r3, [fp, #-10]
  1322ec:	e3530030 	cmp	r3, #48	; 0x30
  1322f0:	1a000016 	bne	132350 <ip4addr_aton+0xc0>
      c = *++cp;
  1322f4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1322f8:	e2833001 	add	r3, r3, #1
  1322fc:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  132300:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132304:	e5d33000 	ldrb	r3, [r3]
  132308:	e54b300a 	strb	r3, [fp, #-10]
      if (c == 'x' || c == 'X') {
  13230c:	e55b300a 	ldrb	r3, [fp, #-10]
  132310:	e3530078 	cmp	r3, #120	; 0x78
  132314:	0a000002 	beq	132324 <ip4addr_aton+0x94>
  132318:	e55b300a 	ldrb	r3, [fp, #-10]
  13231c:	e3530058 	cmp	r3, #88	; 0x58
  132320:	1a000008 	bne	132348 <ip4addr_aton+0xb8>
        base = 16;
  132324:	e3a03010 	mov	r3, #16
  132328:	e54b3009 	strb	r3, [fp, #-9]
        c = *++cp;
  13232c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132330:	e2833001 	add	r3, r3, #1
  132334:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  132338:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  13233c:	e5d33000 	ldrb	r3, [r3]
  132340:	e54b300a 	strb	r3, [fp, #-10]
  132344:	ea000001 	b	132350 <ip4addr_aton+0xc0>
      } else {
        base = 8;
  132348:	e3a03008 	mov	r3, #8
  13234c:	e54b3009 	strb	r3, [fp, #-9]
      }
    }
    for (;;) {
      if (isdigit(c)) {
  132350:	e55b300a 	ldrb	r3, [fp, #-10]
  132354:	e353002f 	cmp	r3, #47	; 0x2f
  132358:	9a000010 	bls	1323a0 <ip4addr_aton+0x110>
  13235c:	e55b300a 	ldrb	r3, [fp, #-10]
  132360:	e3530039 	cmp	r3, #57	; 0x39
  132364:	8a00000d 	bhi	1323a0 <ip4addr_aton+0x110>
        val = (val * base) + (u32_t)(c - '0');
  132368:	e55b3009 	ldrb	r3, [fp, #-9]
  13236c:	e51b2008 	ldr	r2, [fp, #-8]
  132370:	e0020392 	mul	r2, r2, r3
  132374:	e55b300a 	ldrb	r3, [fp, #-10]
  132378:	e0823003 	add	r3, r2, r3
  13237c:	e2433030 	sub	r3, r3, #48	; 0x30
  132380:	e50b3008 	str	r3, [fp, #-8]
        c = *++cp;
  132384:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132388:	e2833001 	add	r3, r3, #1
  13238c:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  132390:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132394:	e5d33000 	ldrb	r3, [r3]
  132398:	e54b300a 	strb	r3, [fp, #-10]
  13239c:	ea00002a 	b	13244c <ip4addr_aton+0x1bc>
      } else if (base == 16 && isxdigit(c)) {
  1323a0:	e55b3009 	ldrb	r3, [fp, #-9]
  1323a4:	e3530010 	cmp	r3, #16
  1323a8:	1a000028 	bne	132450 <ip4addr_aton+0x1c0>
  1323ac:	e55b300a 	ldrb	r3, [fp, #-10]
  1323b0:	e353002f 	cmp	r3, #47	; 0x2f
  1323b4:	9a000002 	bls	1323c4 <ip4addr_aton+0x134>
  1323b8:	e55b300a 	ldrb	r3, [fp, #-10]
  1323bc:	e3530039 	cmp	r3, #57	; 0x39
  1323c0:	9a00000b 	bls	1323f4 <ip4addr_aton+0x164>
  1323c4:	e55b300a 	ldrb	r3, [fp, #-10]
  1323c8:	e3530060 	cmp	r3, #96	; 0x60
  1323cc:	9a000002 	bls	1323dc <ip4addr_aton+0x14c>
  1323d0:	e55b300a 	ldrb	r3, [fp, #-10]
  1323d4:	e3530066 	cmp	r3, #102	; 0x66
  1323d8:	9a000005 	bls	1323f4 <ip4addr_aton+0x164>
  1323dc:	e55b300a 	ldrb	r3, [fp, #-10]
  1323e0:	e3530040 	cmp	r3, #64	; 0x40
  1323e4:	9a000019 	bls	132450 <ip4addr_aton+0x1c0>
  1323e8:	e55b300a 	ldrb	r3, [fp, #-10]
  1323ec:	e3530046 	cmp	r3, #70	; 0x46
  1323f0:	8a000016 	bhi	132450 <ip4addr_aton+0x1c0>
        val = (val << 4) | (u32_t)(c + 10 - (islower(c) ? 'a' : 'A'));
  1323f4:	e51b3008 	ldr	r3, [fp, #-8]
  1323f8:	e1a03203 	lsl	r3, r3, #4
  1323fc:	e55b200a 	ldrb	r2, [fp, #-10]
  132400:	e282100a 	add	r1, r2, #10
  132404:	e55b200a 	ldrb	r2, [fp, #-10]
  132408:	e3520060 	cmp	r2, #96	; 0x60
  13240c:	9a000004 	bls	132424 <ip4addr_aton+0x194>
  132410:	e55b200a 	ldrb	r2, [fp, #-10]
  132414:	e352007a 	cmp	r2, #122	; 0x7a
  132418:	8a000001 	bhi	132424 <ip4addr_aton+0x194>
  13241c:	e3a02061 	mov	r2, #97	; 0x61
  132420:	ea000000 	b	132428 <ip4addr_aton+0x198>
  132424:	e3a02041 	mov	r2, #65	; 0x41
  132428:	e0412002 	sub	r2, r1, r2
  13242c:	e1833002 	orr	r3, r3, r2
  132430:	e50b3008 	str	r3, [fp, #-8]
        c = *++cp;
  132434:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132438:	e2833001 	add	r3, r3, #1
  13243c:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  132440:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132444:	e5d33000 	ldrb	r3, [r3]
  132448:	e54b300a 	strb	r3, [fp, #-10]
      if (isdigit(c)) {
  13244c:	eaffffbf 	b	132350 <ip4addr_aton+0xc0>
      } else {
        break;
      }
    }
    if (c == '.') {
  132450:	e55b300a 	ldrb	r3, [fp, #-10]
  132454:	e353002e 	cmp	r3, #46	; 0x2e
  132458:	1a000012 	bne	1324a8 <ip4addr_aton+0x218>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
  13245c:	e24b3020 	sub	r3, fp, #32
  132460:	e283300c 	add	r3, r3, #12
  132464:	e51b2010 	ldr	r2, [fp, #-16]
  132468:	e1520003 	cmp	r2, r3
  13246c:	3a000001 	bcc	132478 <ip4addr_aton+0x1e8>
        return 0;
  132470:	e3a03000 	mov	r3, #0
  132474:	ea000086 	b	132694 <ip4addr_aton+0x404>
      }
      *pp++ = val;
  132478:	e51b3010 	ldr	r3, [fp, #-16]
  13247c:	e2832004 	add	r2, r3, #4
  132480:	e50b2010 	str	r2, [fp, #-16]
  132484:	e51b2008 	ldr	r2, [fp, #-8]
  132488:	e5832000 	str	r2, [r3]
      c = *++cp;
  13248c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132490:	e2833001 	add	r3, r3, #1
  132494:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  132498:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  13249c:	e5d33000 	ldrb	r3, [r3]
  1324a0:	e54b300a 	strb	r3, [fp, #-10]
    if (!isdigit(c)) {
  1324a4:	eaffff83 	b	1322b8 <ip4addr_aton+0x28>
    } else {
      break;
  1324a8:	e320f000 	nop	{0}
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !isspace(c)) {
  1324ac:	e55b300a 	ldrb	r3, [fp, #-10]
  1324b0:	e3530000 	cmp	r3, #0
  1324b4:	0a000013 	beq	132508 <ip4addr_aton+0x278>
  1324b8:	e55b300a 	ldrb	r3, [fp, #-10]
  1324bc:	e3530020 	cmp	r3, #32
  1324c0:	0a000010 	beq	132508 <ip4addr_aton+0x278>
  1324c4:	e55b300a 	ldrb	r3, [fp, #-10]
  1324c8:	e353000c 	cmp	r3, #12
  1324cc:	0a00000d 	beq	132508 <ip4addr_aton+0x278>
  1324d0:	e55b300a 	ldrb	r3, [fp, #-10]
  1324d4:	e353000a 	cmp	r3, #10
  1324d8:	0a00000a 	beq	132508 <ip4addr_aton+0x278>
  1324dc:	e55b300a 	ldrb	r3, [fp, #-10]
  1324e0:	e353000d 	cmp	r3, #13
  1324e4:	0a000007 	beq	132508 <ip4addr_aton+0x278>
  1324e8:	e55b300a 	ldrb	r3, [fp, #-10]
  1324ec:	e3530009 	cmp	r3, #9
  1324f0:	0a000004 	beq	132508 <ip4addr_aton+0x278>
  1324f4:	e55b300a 	ldrb	r3, [fp, #-10]
  1324f8:	e353000b 	cmp	r3, #11
  1324fc:	0a000001 	beq	132508 <ip4addr_aton+0x278>
    return 0;
  132500:	e3a03000 	mov	r3, #0
  132504:	ea000062 	b	132694 <ip4addr_aton+0x404>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
  132508:	e51b2010 	ldr	r2, [fp, #-16]
  13250c:	e24b3020 	sub	r3, fp, #32
  132510:	e0423003 	sub	r3, r2, r3
  132514:	e1a03143 	asr	r3, r3, #2
  132518:	e2833001 	add	r3, r3, #1
  13251c:	e3530004 	cmp	r3, #4
  132520:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  132524:	ea000048 	b	13264c <ip4addr_aton+0x3bc>
  132528:	0013253c 	.word	0x0013253c
  13252c:	0013266c 	.word	0x0013266c
  132530:	00132544 	.word	0x00132544
  132534:	00132584 	.word	0x00132584
  132538:	001325dc 	.word	0x001325dc

  case 0:
    return 0;       /* initial nondigit */
  13253c:	e3a03000 	mov	r3, #0
  132540:	ea000053 	b	132694 <ip4addr_aton+0x404>

  case 1:             /* a -- 32 bits */
    break;

  case 2:             /* a.b -- 8.24 bits */
    if (val > 0xffffffUL) {
  132544:	e51b3008 	ldr	r3, [fp, #-8]
  132548:	e3530401 	cmp	r3, #16777216	; 0x1000000
  13254c:	3a000001 	bcc	132558 <ip4addr_aton+0x2c8>
      return 0;
  132550:	e3a03000 	mov	r3, #0
  132554:	ea00004e 	b	132694 <ip4addr_aton+0x404>
    }
    if (parts[0] > 0xff) {
  132558:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  13255c:	e35300ff 	cmp	r3, #255	; 0xff
  132560:	9a000001 	bls	13256c <ip4addr_aton+0x2dc>
      return 0;
  132564:	e3a03000 	mov	r3, #0
  132568:	ea000049 	b	132694 <ip4addr_aton+0x404>
    }
    val |= parts[0] << 24;
  13256c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132570:	e1a03c03 	lsl	r3, r3, #24
  132574:	e51b2008 	ldr	r2, [fp, #-8]
  132578:	e1823003 	orr	r3, r2, r3
  13257c:	e50b3008 	str	r3, [fp, #-8]
    break;
  132580:	ea00003a 	b	132670 <ip4addr_aton+0x3e0>

  case 3:             /* a.b.c -- 8.8.16 bits */
    if (val > 0xffff) {
  132584:	e51b3008 	ldr	r3, [fp, #-8]
  132588:	e3530801 	cmp	r3, #65536	; 0x10000
  13258c:	3a000001 	bcc	132598 <ip4addr_aton+0x308>
      return 0;
  132590:	e3a03000 	mov	r3, #0
  132594:	ea00003e 	b	132694 <ip4addr_aton+0x404>
    }
    if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
  132598:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  13259c:	e35300ff 	cmp	r3, #255	; 0xff
  1325a0:	8a000002 	bhi	1325b0 <ip4addr_aton+0x320>
  1325a4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1325a8:	e35300ff 	cmp	r3, #255	; 0xff
  1325ac:	9a000001 	bls	1325b8 <ip4addr_aton+0x328>
      return 0;
  1325b0:	e3a03000 	mov	r3, #0
  1325b4:	ea000036 	b	132694 <ip4addr_aton+0x404>
    }
    val |= (parts[0] << 24) | (parts[1] << 16);
  1325b8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1325bc:	e1a02c03 	lsl	r2, r3, #24
  1325c0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1325c4:	e1a03803 	lsl	r3, r3, #16
  1325c8:	e1823003 	orr	r3, r2, r3
  1325cc:	e51b2008 	ldr	r2, [fp, #-8]
  1325d0:	e1823003 	orr	r3, r2, r3
  1325d4:	e50b3008 	str	r3, [fp, #-8]
    break;
  1325d8:	ea000024 	b	132670 <ip4addr_aton+0x3e0>

  case 4:             /* a.b.c.d -- 8.8.8.8 bits */
    if (val > 0xff) {
  1325dc:	e51b3008 	ldr	r3, [fp, #-8]
  1325e0:	e35300ff 	cmp	r3, #255	; 0xff
  1325e4:	9a000001 	bls	1325f0 <ip4addr_aton+0x360>
      return 0;
  1325e8:	e3a03000 	mov	r3, #0
  1325ec:	ea000028 	b	132694 <ip4addr_aton+0x404>
    }
    if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
  1325f0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1325f4:	e35300ff 	cmp	r3, #255	; 0xff
  1325f8:	8a000005 	bhi	132614 <ip4addr_aton+0x384>
  1325fc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  132600:	e35300ff 	cmp	r3, #255	; 0xff
  132604:	8a000002 	bhi	132614 <ip4addr_aton+0x384>
  132608:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  13260c:	e35300ff 	cmp	r3, #255	; 0xff
  132610:	9a000001 	bls	13261c <ip4addr_aton+0x38c>
      return 0;
  132614:	e3a03000 	mov	r3, #0
  132618:	ea00001d 	b	132694 <ip4addr_aton+0x404>
    }
    val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
  13261c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132620:	e1a02c03 	lsl	r2, r3, #24
  132624:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  132628:	e1a03803 	lsl	r3, r3, #16
  13262c:	e1822003 	orr	r2, r2, r3
  132630:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  132634:	e1a03403 	lsl	r3, r3, #8
  132638:	e1823003 	orr	r3, r2, r3
  13263c:	e51b2008 	ldr	r2, [fp, #-8]
  132640:	e1823003 	orr	r3, r2, r3
  132644:	e50b3008 	str	r3, [fp, #-8]
    break;
  132648:	ea000008 	b	132670 <ip4addr_aton+0x3e0>
  default:
    LWIP_ASSERT("unhandled", 0);
  13264c:	e3080e44 	movw	r0, #36420	; 0x8e44
  132650:	e3400014 	movt	r0, #20
  132654:	ebff42ae 	bl	103114 <rt_kprintf>
  132658:	e3001103 	movw	r1, #259	; 0x103
  13265c:	e3080e50 	movw	r0, #36432	; 0x8e50
  132660:	e3400014 	movt	r0, #20
  132664:	ebff612a 	bl	10ab14 <sys_arch_assert>
    break;
  132668:	ea000000 	b	132670 <ip4addr_aton+0x3e0>
    break;
  13266c:	e320f000 	nop	{0}
  }
  if (addr) {
  132670:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  132674:	e3530000 	cmp	r3, #0
  132678:	0a000004 	beq	132690 <ip4addr_aton+0x400>
    ip4_addr_set_u32(addr, lwip_htonl(val));
  13267c:	e51b0008 	ldr	r0, [fp, #-8]
  132680:	ebff8f06 	bl	1162a0 <lwip_htonl>
  132684:	e1a02000 	mov	r2, r0
  132688:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  13268c:	e5832000 	str	r2, [r3]
  }
  return 1;
  132690:	e3a03001 	mov	r3, #1
}
  132694:	e1a00003 	mov	r0, r3
  132698:	e24bd004 	sub	sp, fp, #4
  13269c:	e8bd8800 	pop	{fp, pc}

001326a0 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char*
ip4addr_ntoa(const ip4_addr_t *addr)
{
  1326a0:	e92d4800 	push	{fp, lr}
  1326a4:	e28db004 	add	fp, sp, #4
  1326a8:	e24dd008 	sub	sp, sp, #8
  1326ac:	e50b0008 	str	r0, [fp, #-8]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
  1326b0:	e3a02010 	mov	r2, #16
  1326b4:	e30e1364 	movw	r1, #58212	; 0xe364
  1326b8:	e3401014 	movt	r1, #20
  1326bc:	e51b0008 	ldr	r0, [fp, #-8]
  1326c0:	eb000003 	bl	1326d4 <ip4addr_ntoa_r>
  1326c4:	e1a03000 	mov	r3, r0
}
  1326c8:	e1a00003 	mov	r0, r3
  1326cc:	e24bd004 	sub	sp, fp, #4
  1326d0:	e8bd8800 	pop	{fp, pc}

001326d4 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char*
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
  1326d4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1326d8:	e28db000 	add	fp, sp, #0
  1326dc:	e24dd034 	sub	sp, sp, #52	; 0x34
  1326e0:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  1326e4:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  1326e8:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
  1326ec:	e3a03000 	mov	r3, #0
  1326f0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  s_addr = ip4_addr_get_u32(addr);
  1326f4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1326f8:	e5933000 	ldr	r3, [r3]
  1326fc:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

  rp = buf;
  132700:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  132704:	e50b3008 	str	r3, [fp, #-8]
  ap = (u8_t *)&s_addr;
  132708:	e24b301c 	sub	r3, fp, #28
  13270c:	e50b300c 	str	r3, [fp, #-12]
  for (n = 0; n < 4; n++) {
  132710:	e3a03000 	mov	r3, #0
  132714:	e54b300d 	strb	r3, [fp, #-13]
  132718:	ea00004b 	b	13284c <ip4addr_ntoa_r+0x178>
    i = 0;
  13271c:	e3a03000 	mov	r3, #0
  132720:	e54b300e 	strb	r3, [fp, #-14]
    do {
      rem = *ap % (u8_t)10;
  132724:	e51b300c 	ldr	r3, [fp, #-12]
  132728:	e5d31000 	ldrb	r1, [r3]
  13272c:	e30c3ccd 	movw	r3, #52429	; 0xcccd
  132730:	e34c3ccc 	movt	r3, #52428	; 0xcccc
  132734:	e0832391 	umull	r2, r3, r1, r3
  132738:	e1a031a3 	lsr	r3, r3, #3
  13273c:	e3a0200a 	mov	r2, #10
  132740:	e0030392 	mul	r3, r2, r3
  132744:	e0413003 	sub	r3, r1, r3
  132748:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
      *ap /= (u8_t)10;
  13274c:	e51b300c 	ldr	r3, [fp, #-12]
  132750:	e5d32000 	ldrb	r2, [r3]
  132754:	e30c3ccd 	movw	r3, #52429	; 0xcccd
  132758:	e34c3ccc 	movt	r3, #52428	; 0xcccc
  13275c:	e0832392 	umull	r2, r3, r2, r3
  132760:	e1a031a3 	lsr	r3, r3, #3
  132764:	e6ef2073 	uxtb	r2, r3
  132768:	e51b300c 	ldr	r3, [fp, #-12]
  13276c:	e5c32000 	strb	r2, [r3]
      inv[i++] = (char)('0' + rem);
  132770:	e55b300e 	ldrb	r3, [fp, #-14]
  132774:	e2832001 	add	r2, r3, #1
  132778:	e54b200e 	strb	r2, [fp, #-14]
  13277c:	e1a01003 	mov	r1, r3
  132780:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  132784:	e2833030 	add	r3, r3, #48	; 0x30
  132788:	e6ef2073 	uxtb	r2, r3
  13278c:	e24b3004 	sub	r3, fp, #4
  132790:	e0833001 	add	r3, r3, r1
  132794:	e543201c 	strb	r2, [r3, #-28]	; 0xffffffe4
    } while (*ap);
  132798:	e51b300c 	ldr	r3, [fp, #-12]
  13279c:	e5d33000 	ldrb	r3, [r3]
  1327a0:	e3530000 	cmp	r3, #0
  1327a4:	1affffde 	bne	132724 <ip4addr_ntoa_r+0x50>
    while (i--) {
  1327a8:	ea00000f 	b	1327ec <ip4addr_ntoa_r+0x118>
      if (len++ >= buflen) {
  1327ac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1327b0:	e2832001 	add	r2, r3, #1
  1327b4:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
  1327b8:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  1327bc:	e1520003 	cmp	r2, r3
  1327c0:	ca000001 	bgt	1327cc <ip4addr_ntoa_r+0xf8>
        return NULL;
  1327c4:	e3a03000 	mov	r3, #0
  1327c8:	ea000029 	b	132874 <ip4addr_ntoa_r+0x1a0>
      }
      *rp++ = inv[i];
  1327cc:	e55b200e 	ldrb	r2, [fp, #-14]
  1327d0:	e51b3008 	ldr	r3, [fp, #-8]
  1327d4:	e2831001 	add	r1, r3, #1
  1327d8:	e50b1008 	str	r1, [fp, #-8]
  1327dc:	e24b1004 	sub	r1, fp, #4
  1327e0:	e0812002 	add	r2, r1, r2
  1327e4:	e552201c 	ldrb	r2, [r2, #-28]	; 0xffffffe4
  1327e8:	e5c32000 	strb	r2, [r3]
    while (i--) {
  1327ec:	e55b300e 	ldrb	r3, [fp, #-14]
  1327f0:	e2432001 	sub	r2, r3, #1
  1327f4:	e54b200e 	strb	r2, [fp, #-14]
  1327f8:	e3530000 	cmp	r3, #0
  1327fc:	1affffea 	bne	1327ac <ip4addr_ntoa_r+0xd8>
    }
    if (len++ >= buflen) {
  132800:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132804:	e2832001 	add	r2, r3, #1
  132808:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
  13280c:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  132810:	e1520003 	cmp	r2, r3
  132814:	ca000001 	bgt	132820 <ip4addr_ntoa_r+0x14c>
      return NULL;
  132818:	e3a03000 	mov	r3, #0
  13281c:	ea000014 	b	132874 <ip4addr_ntoa_r+0x1a0>
    }
    *rp++ = '.';
  132820:	e51b3008 	ldr	r3, [fp, #-8]
  132824:	e2832001 	add	r2, r3, #1
  132828:	e50b2008 	str	r2, [fp, #-8]
  13282c:	e3a0202e 	mov	r2, #46	; 0x2e
  132830:	e5c32000 	strb	r2, [r3]
    ap++;
  132834:	e51b300c 	ldr	r3, [fp, #-12]
  132838:	e2833001 	add	r3, r3, #1
  13283c:	e50b300c 	str	r3, [fp, #-12]
  for (n = 0; n < 4; n++) {
  132840:	e55b300d 	ldrb	r3, [fp, #-13]
  132844:	e2833001 	add	r3, r3, #1
  132848:	e54b300d 	strb	r3, [fp, #-13]
  13284c:	e55b300d 	ldrb	r3, [fp, #-13]
  132850:	e3530003 	cmp	r3, #3
  132854:	9affffb0 	bls	13271c <ip4addr_ntoa_r+0x48>
  }
  *--rp = 0;
  132858:	e51b3008 	ldr	r3, [fp, #-8]
  13285c:	e2433001 	sub	r3, r3, #1
  132860:	e50b3008 	str	r3, [fp, #-8]
  132864:	e51b3008 	ldr	r3, [fp, #-8]
  132868:	e3a02000 	mov	r2, #0
  13286c:	e5c32000 	strb	r2, [r3]
  return buf;
  132870:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
}
  132874:	e1a00003 	mov	r0, r3
  132878:	e28bd000 	add	sp, fp, #0
  13287c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  132880:	e12fff1e 	bx	lr

00132884 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
  132884:	e92d4800 	push	{fp, lr}
  132888:	e28db004 	add	fp, sp, #4
  13288c:	e24dd010 	sub	sp, sp, #16
  struct ip_reassdata *r, *prev = NULL;
  132890:	e3a03000 	mov	r3, #0
  132894:	e50b300c 	str	r3, [fp, #-12]

  r = reassdatagrams;
  132898:	e30e3374 	movw	r3, #58228	; 0xe374
  13289c:	e3403014 	movt	r3, #20
  1328a0:	e5933000 	ldr	r3, [r3]
  1328a4:	e50b3008 	str	r3, [fp, #-8]
  while (r != NULL) {
  1328a8:	ea000017 	b	13290c <ip_reass_tmr+0x88>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
  1328ac:	e51b3008 	ldr	r3, [fp, #-8]
  1328b0:	e5d3301f 	ldrb	r3, [r3, #31]
  1328b4:	e3530000 	cmp	r3, #0
  1328b8:	0a00000b 	beq	1328ec <ip_reass_tmr+0x68>
      r->timer--;
  1328bc:	e51b3008 	ldr	r3, [fp, #-8]
  1328c0:	e5d3301f 	ldrb	r3, [r3, #31]
  1328c4:	e2433001 	sub	r3, r3, #1
  1328c8:	e6ef2073 	uxtb	r2, r3
  1328cc:	e51b3008 	ldr	r3, [fp, #-8]
  1328d0:	e5c3201f 	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
  1328d4:	e51b3008 	ldr	r3, [fp, #-8]
  1328d8:	e50b300c 	str	r3, [fp, #-12]
      r = r->next;
  1328dc:	e51b3008 	ldr	r3, [fp, #-8]
  1328e0:	e5933000 	ldr	r3, [r3]
  1328e4:	e50b3008 	str	r3, [fp, #-8]
  1328e8:	ea000007 	b	13290c <ip_reass_tmr+0x88>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
  1328ec:	e51b3008 	ldr	r3, [fp, #-8]
  1328f0:	e50b3010 	str	r3, [fp, #-16]
      /* get the next pointer before freeing */
      r = r->next;
  1328f4:	e51b3008 	ldr	r3, [fp, #-8]
  1328f8:	e5933000 	ldr	r3, [r3]
  1328fc:	e50b3008 	str	r3, [fp, #-8]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
  132900:	e51b100c 	ldr	r1, [fp, #-12]
  132904:	e51b0010 	ldr	r0, [fp, #-16]
  132908:	eb000005 	bl	132924 <ip_reass_free_complete_datagram>
  while (r != NULL) {
  13290c:	e51b3008 	ldr	r3, [fp, #-8]
  132910:	e3530000 	cmp	r3, #0
  132914:	1affffe4 	bne	1328ac <ip_reass_tmr+0x28>
     }
   }
}
  132918:	e320f000 	nop	{0}
  13291c:	e24bd004 	sub	sp, fp, #4
  132920:	e8bd8800 	pop	{fp, pc}

00132924 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
  132924:	e92d4800 	push	{fp, lr}
  132928:	e28db004 	add	fp, sp, #4
  13292c:	e24dd020 	sub	sp, sp, #32
  132930:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  132934:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  u16_t pbufs_freed = 0;
  132938:	e3a03000 	mov	r3, #0
  13293c:	e14b30b6 	strh	r3, [fp, #-6]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
  132940:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  132944:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132948:	e1520003 	cmp	r2, r3
  13294c:	1a000006 	bne	13296c <ip_reass_free_complete_datagram+0x48>
  132950:	e3080e88 	movw	r0, #36488	; 0x8e88
  132954:	e3400014 	movt	r0, #20
  132958:	ebff41ed 	bl	103114 <rt_kprintf>
  13295c:	e3a010a7 	mov	r1, #167	; 0xa7
  132960:	e3080e94 	movw	r0, #36500	; 0x8e94
  132964:	e3400014 	movt	r0, #20
  132968:	ebff6069 	bl	10ab14 <sys_arch_assert>
  if (prev != NULL) {
  13296c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  132970:	e3530000 	cmp	r3, #0
  132974:	0a00000b 	beq	1329a8 <ip_reass_free_complete_datagram+0x84>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
  132978:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  13297c:	e5933000 	ldr	r3, [r3]
  132980:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  132984:	e1520003 	cmp	r2, r3
  132988:	0a000006 	beq	1329a8 <ip_reass_free_complete_datagram+0x84>
  13298c:	e3080ecc 	movw	r0, #36556	; 0x8ecc
  132990:	e3400014 	movt	r0, #20
  132994:	ebff41de 	bl	103114 <rt_kprintf>
  132998:	e3a010a9 	mov	r1, #169	; 0xa9
  13299c:	e3080e94 	movw	r0, #36500	; 0x8e94
  1329a0:	e3400014 	movt	r0, #20
  1329a4:	ebff605a 	bl	10ab14 <sys_arch_assert>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
  1329a8:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  1329ac:	e3403057 	movt	r3, #87	; 0x57
  1329b0:	e5933150 	ldr	r3, [r3, #336]	; 0x150
  1329b4:	e2832001 	add	r2, r3, #1
  1329b8:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  1329bc:	e3403057 	movt	r3, #87	; 0x57
  1329c0:	e5832150 	str	r2, [r3, #336]	; 0x150
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
  1329c4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1329c8:	e5933004 	ldr	r3, [r3, #4]
  1329cc:	e5933004 	ldr	r3, [r3, #4]
  1329d0:	e50b3010 	str	r3, [fp, #-16]
  if (iprh->start == 0) {
  1329d4:	e51b3010 	ldr	r3, [fp, #-16]
  1329d8:	e1d330b4 	ldrh	r3, [r3, #4]
  1329dc:	e6ff3073 	uxth	r3, r3
  1329e0:	e3530000 	cmp	r3, #0
  1329e4:	1a000026 	bne	132a84 <ip_reass_free_complete_datagram+0x160>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
  1329e8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1329ec:	e5933004 	ldr	r3, [r3, #4]
  1329f0:	e50b300c 	str	r3, [fp, #-12]
    ipr->p = iprh->next_pbuf;
  1329f4:	e51b3010 	ldr	r3, [fp, #-16]
  1329f8:	e5932000 	ldr	r2, [r3]
  1329fc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132a00:	e5832004 	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
  132a04:	e51b300c 	ldr	r3, [fp, #-12]
  132a08:	e5930004 	ldr	r0, [r3, #4]
  132a0c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132a10:	e2833008 	add	r3, r3, #8
  132a14:	e3a02014 	mov	r2, #20
  132a18:	e1a01003 	mov	r1, r3
  132a1c:	eb00367a 	bl	14040c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
  132a20:	e3a01001 	mov	r1, #1
  132a24:	e51b000c 	ldr	r0, [fp, #-12]
  132a28:	ebfff396 	bl	12f888 <icmp_time_exceeded>
    clen = pbuf_clen(p);
  132a2c:	e51b000c 	ldr	r0, [fp, #-12]
  132a30:	ebffa0ca 	bl	11ad60 <pbuf_clen>
  132a34:	e1a03000 	mov	r3, r0
  132a38:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
  132a3c:	e15b20b6 	ldrh	r2, [fp, #-6]
  132a40:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  132a44:	e0823003 	add	r3, r2, r3
  132a48:	e3530801 	cmp	r3, #65536	; 0x10000
  132a4c:	ba000006 	blt	132a6c <ip_reass_free_complete_datagram+0x148>
  132a50:	e3080ee0 	movw	r0, #36576	; 0x8ee0
  132a54:	e3400014 	movt	r0, #20
  132a58:	ebff41ad 	bl	103114 <rt_kprintf>
  132a5c:	e3a010b8 	mov	r1, #184	; 0xb8
  132a60:	e3080e94 	movw	r0, #36500	; 0x8e94
  132a64:	e3400014 	movt	r0, #20
  132a68:	ebff6029 	bl	10ab14 <sys_arch_assert>
    pbufs_freed += clen;
  132a6c:	e15b20b6 	ldrh	r2, [fp, #-6]
  132a70:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  132a74:	e0823003 	add	r3, r2, r3
  132a78:	e14b30b6 	strh	r3, [fp, #-6]
    pbuf_free(p);
  132a7c:	e51b000c 	ldr	r0, [fp, #-12]
  132a80:	ebffa031 	bl	11ab4c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
  132a84:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132a88:	e5933004 	ldr	r3, [r3, #4]
  132a8c:	e50b300c 	str	r3, [fp, #-12]
  while (p != NULL) {
  132a90:	ea00001d 	b	132b0c <ip_reass_free_complete_datagram+0x1e8>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
  132a94:	e51b300c 	ldr	r3, [fp, #-12]
  132a98:	e5933004 	ldr	r3, [r3, #4]
  132a9c:	e50b3010 	str	r3, [fp, #-16]
    pcur = p;
  132aa0:	e51b300c 	ldr	r3, [fp, #-12]
  132aa4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
  132aa8:	e51b3010 	ldr	r3, [fp, #-16]
  132aac:	e5933000 	ldr	r3, [r3]
  132ab0:	e50b300c 	str	r3, [fp, #-12]
    clen = pbuf_clen(pcur);
  132ab4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  132ab8:	ebffa0a8 	bl	11ad60 <pbuf_clen>
  132abc:	e1a03000 	mov	r3, r0
  132ac0:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
  132ac4:	e15b20b6 	ldrh	r2, [fp, #-6]
  132ac8:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  132acc:	e0823003 	add	r3, r2, r3
  132ad0:	e3530801 	cmp	r3, #65536	; 0x10000
  132ad4:	ba000006 	blt	132af4 <ip_reass_free_complete_datagram+0x1d0>
  132ad8:	e3080ee0 	movw	r0, #36576	; 0x8ee0
  132adc:	e3400014 	movt	r0, #20
  132ae0:	ebff418b 	bl	103114 <rt_kprintf>
  132ae4:	e3a010c8 	mov	r1, #200	; 0xc8
  132ae8:	e3080e94 	movw	r0, #36500	; 0x8e94
  132aec:	e3400014 	movt	r0, #20
  132af0:	ebff6007 	bl	10ab14 <sys_arch_assert>
    pbufs_freed += clen;
  132af4:	e15b20b6 	ldrh	r2, [fp, #-6]
  132af8:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  132afc:	e0823003 	add	r3, r2, r3
  132b00:	e14b30b6 	strh	r3, [fp, #-6]
    pbuf_free(pcur);
  132b04:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  132b08:	ebffa00f 	bl	11ab4c <pbuf_free>
  while (p != NULL) {
  132b0c:	e51b300c 	ldr	r3, [fp, #-12]
  132b10:	e3530000 	cmp	r3, #0
  132b14:	1affffde 	bne	132a94 <ip_reass_free_complete_datagram+0x170>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
  132b18:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  132b1c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  132b20:	eb0000b9 	bl	132e0c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
  132b24:	e30e3378 	movw	r3, #58232	; 0xe378
  132b28:	e3403014 	movt	r3, #20
  132b2c:	e1d330b0 	ldrh	r3, [r3]
  132b30:	e15b20b6 	ldrh	r2, [fp, #-6]
  132b34:	e1520003 	cmp	r2, r3
  132b38:	9a000006 	bls	132b58 <ip_reass_free_complete_datagram+0x234>
  132b3c:	e3080f00 	movw	r0, #36608	; 0x8f00
  132b40:	e3400014 	movt	r0, #20
  132b44:	ebff4172 	bl	103114 <rt_kprintf>
  132b48:	e3a010ce 	mov	r1, #206	; 0xce
  132b4c:	e3080e94 	movw	r0, #36500	; 0x8e94
  132b50:	e3400014 	movt	r0, #20
  132b54:	ebff5fee 	bl	10ab14 <sys_arch_assert>
  ip_reass_pbufcount -= pbufs_freed;
  132b58:	e30e3378 	movw	r3, #58232	; 0xe378
  132b5c:	e3403014 	movt	r3, #20
  132b60:	e1d320b0 	ldrh	r2, [r3]
  132b64:	e15b30b6 	ldrh	r3, [fp, #-6]
  132b68:	e0423003 	sub	r3, r2, r3
  132b6c:	e6ff2073 	uxth	r2, r3
  132b70:	e30e3378 	movw	r3, #58232	; 0xe378
  132b74:	e3403014 	movt	r3, #20
  132b78:	e1c320b0 	strh	r2, [r3]

  return pbufs_freed;
  132b7c:	e15b30b6 	ldrh	r3, [fp, #-6]
}
  132b80:	e1a00003 	mov	r0, r3
  132b84:	e24bd004 	sub	sp, fp, #4
  132b88:	e8bd8800 	pop	{fp, pc}

00132b8c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
  132b8c:	e92d4800 	push	{fp, lr}
  132b90:	e28db004 	add	fp, sp, #4
  132b94:	e24dd028 	sub	sp, sp, #40	; 0x28
  132b98:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  132b9c:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
  132ba0:	e3a03000 	mov	r3, #0
  132ba4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
  132ba8:	e3a03000 	mov	r3, #0
  132bac:	e50b300c 	str	r3, [fp, #-12]
    prev = NULL;
  132bb0:	e3a03000 	mov	r3, #0
  132bb4:	e50b3010 	str	r3, [fp, #-16]
    oldest_prev = NULL;
  132bb8:	e3a03000 	mov	r3, #0
  132bbc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    other_datagrams = 0;
  132bc0:	e3a03000 	mov	r3, #0
  132bc4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    r = reassdatagrams;
  132bc8:	e30e3374 	movw	r3, #58228	; 0xe374
  132bcc:	e3403014 	movt	r3, #20
  132bd0:	e5933000 	ldr	r3, [r3]
  132bd4:	e50b3008 	str	r3, [fp, #-8]
    while (r != NULL) {
  132bd8:	ea000030 	b	132ca0 <ip_reass_remove_oldest_datagram+0x114>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
  132bdc:	e51b3008 	ldr	r3, [fp, #-8]
  132be0:	e5932014 	ldr	r2, [r3, #20]
  132be4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132be8:	e593300c 	ldr	r3, [r3, #12]
  132bec:	e1520003 	cmp	r2, r3
  132bf0:	1a00000c 	bne	132c28 <ip_reass_remove_oldest_datagram+0x9c>
  132bf4:	e51b3008 	ldr	r3, [fp, #-8]
  132bf8:	e5932018 	ldr	r2, [r3, #24]
  132bfc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132c00:	e5933010 	ldr	r3, [r3, #16]
  132c04:	e1520003 	cmp	r2, r3
  132c08:	1a000006 	bne	132c28 <ip_reass_remove_oldest_datagram+0x9c>
  132c0c:	e51b3008 	ldr	r3, [fp, #-8]
  132c10:	e1d320bc 	ldrh	r2, [r3, #12]
  132c14:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132c18:	e1d330b4 	ldrh	r3, [r3, #4]
  132c1c:	e6ff3073 	uxth	r3, r3
  132c20:	e1520003 	cmp	r2, r3
  132c24:	0a000014 	beq	132c7c <ip_reass_remove_oldest_datagram+0xf0>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
  132c28:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  132c2c:	e2833001 	add	r3, r3, #1
  132c30:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
        if (oldest == NULL) {
  132c34:	e51b300c 	ldr	r3, [fp, #-12]
  132c38:	e3530000 	cmp	r3, #0
  132c3c:	1a000004 	bne	132c54 <ip_reass_remove_oldest_datagram+0xc8>
          oldest = r;
  132c40:	e51b3008 	ldr	r3, [fp, #-8]
  132c44:	e50b300c 	str	r3, [fp, #-12]
          oldest_prev = prev;
  132c48:	e51b3010 	ldr	r3, [fp, #-16]
  132c4c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  132c50:	ea000009 	b	132c7c <ip_reass_remove_oldest_datagram+0xf0>
        } else if (r->timer <= oldest->timer) {
  132c54:	e51b3008 	ldr	r3, [fp, #-8]
  132c58:	e5d3201f 	ldrb	r2, [r3, #31]
  132c5c:	e51b300c 	ldr	r3, [fp, #-12]
  132c60:	e5d3301f 	ldrb	r3, [r3, #31]
  132c64:	e1520003 	cmp	r2, r3
  132c68:	8a000003 	bhi	132c7c <ip_reass_remove_oldest_datagram+0xf0>
          /* older than the previous oldest */
          oldest = r;
  132c6c:	e51b3008 	ldr	r3, [fp, #-8]
  132c70:	e50b300c 	str	r3, [fp, #-12]
          oldest_prev = prev;
  132c74:	e51b3010 	ldr	r3, [fp, #-16]
  132c78:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        }
      }
      if (r->next != NULL) {
  132c7c:	e51b3008 	ldr	r3, [fp, #-8]
  132c80:	e5933000 	ldr	r3, [r3]
  132c84:	e3530000 	cmp	r3, #0
  132c88:	0a000001 	beq	132c94 <ip_reass_remove_oldest_datagram+0x108>
        prev = r;
  132c8c:	e51b3008 	ldr	r3, [fp, #-8]
  132c90:	e50b3010 	str	r3, [fp, #-16]
      }
      r = r->next;
  132c94:	e51b3008 	ldr	r3, [fp, #-8]
  132c98:	e5933000 	ldr	r3, [r3]
  132c9c:	e50b3008 	str	r3, [fp, #-8]
    while (r != NULL) {
  132ca0:	e51b3008 	ldr	r3, [fp, #-8]
  132ca4:	e3530000 	cmp	r3, #0
  132ca8:	1affffcb 	bne	132bdc <ip_reass_remove_oldest_datagram+0x50>
    }
    if (oldest != NULL) {
  132cac:	e51b300c 	ldr	r3, [fp, #-12]
  132cb0:	e3530000 	cmp	r3, #0
  132cb4:	0a000007 	beq	132cd8 <ip_reass_remove_oldest_datagram+0x14c>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
  132cb8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  132cbc:	e51b000c 	ldr	r0, [fp, #-12]
  132cc0:	ebffff17 	bl	132924 <ip_reass_free_complete_datagram>
  132cc4:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
      pbufs_freed += pbufs_freed_current;
  132cc8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  132ccc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132cd0:	e0823003 	add	r3, r2, r3
  132cd4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
  132cd8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  132cdc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  132ce0:	e1520003 	cmp	r2, r3
  132ce4:	aa000002 	bge	132cf4 <ip_reass_remove_oldest_datagram+0x168>
  132ce8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  132cec:	e3530001 	cmp	r3, #1
  132cf0:	caffffac 	bgt	132ba8 <ip_reass_remove_oldest_datagram+0x1c>
  return pbufs_freed;
  132cf4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
}
  132cf8:	e1a00003 	mov	r0, r3
  132cfc:	e24bd004 	sub	sp, fp, #4
  132d00:	e8bd8800 	pop	{fp, pc}

00132d04 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
  132d04:	e92d4800 	push	{fp, lr}
  132d08:	e28db004 	add	fp, sp, #4
  132d0c:	e24dd010 	sub	sp, sp, #16
  132d10:	e50b0010 	str	r0, [fp, #-16]
  132d14:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
  132d18:	e300211a 	movw	r2, #282	; 0x11a
  132d1c:	e3081e94 	movw	r1, #36500	; 0x8e94
  132d20:	e3401014 	movt	r1, #20
  132d24:	e3a00005 	mov	r0, #5
  132d28:	ebff9811 	bl	118d74 <memp_malloc_fn>
  132d2c:	e50b0008 	str	r0, [fp, #-8]
  if (ipr == NULL) {
  132d30:	e51b3008 	ldr	r3, [fp, #-8]
  132d34:	e3530000 	cmp	r3, #0
  132d38:	1a000019 	bne	132da4 <ip_reass_enqueue_new_datagram+0xa0>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
  132d3c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  132d40:	e51b0010 	ldr	r0, [fp, #-16]
  132d44:	ebffff90 	bl	132b8c <ip_reass_remove_oldest_datagram>
  132d48:	e1a02000 	mov	r2, r0
  132d4c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132d50:	e1530002 	cmp	r3, r2
  132d54:	ca000005 	bgt	132d70 <ip_reass_enqueue_new_datagram+0x6c>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
  132d58:	e300211e 	movw	r2, #286	; 0x11e
  132d5c:	e3081e94 	movw	r1, #36500	; 0x8e94
  132d60:	e3401014 	movt	r1, #20
  132d64:	e3a00005 	mov	r0, #5
  132d68:	ebff9801 	bl	118d74 <memp_malloc_fn>
  132d6c:	e50b0008 	str	r0, [fp, #-8]
    }
    if (ipr == NULL)
  132d70:	e51b3008 	ldr	r3, [fp, #-8]
  132d74:	e3530000 	cmp	r3, #0
  132d78:	1a000009 	bne	132da4 <ip_reass_enqueue_new_datagram+0xa0>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
  132d7c:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  132d80:	e3403057 	movt	r3, #87	; 0x57
  132d84:	e1d333bc 	ldrh	r3, [r3, #60]	; 0x3c
  132d88:	e2833001 	add	r3, r3, #1
  132d8c:	e6ff2073 	uxth	r2, r3
  132d90:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  132d94:	e3403057 	movt	r3, #87	; 0x57
  132d98:	e1c323bc 	strh	r2, [r3, #60]	; 0x3c
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
  132d9c:	e3a03000 	mov	r3, #0
  132da0:	ea000016 	b	132e00 <ip_reass_enqueue_new_datagram+0xfc>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
  132da4:	e3a02020 	mov	r2, #32
  132da8:	e3a01000 	mov	r1, #0
  132dac:	e51b0008 	ldr	r0, [fp, #-8]
  132db0:	eb0036cd 	bl	1408ec <memset>
  ipr->timer = IP_REASS_MAXAGE;
  132db4:	e51b3008 	ldr	r3, [fp, #-8]
  132db8:	e3a02003 	mov	r2, #3
  132dbc:	e5c3201f 	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
  132dc0:	e30e3374 	movw	r3, #58228	; 0xe374
  132dc4:	e3403014 	movt	r3, #20
  132dc8:	e5932000 	ldr	r2, [r3]
  132dcc:	e51b3008 	ldr	r3, [fp, #-8]
  132dd0:	e5832000 	str	r2, [r3]
  reassdatagrams = ipr;
  132dd4:	e30e3374 	movw	r3, #58228	; 0xe374
  132dd8:	e3403014 	movt	r3, #20
  132ddc:	e51b2008 	ldr	r2, [fp, #-8]
  132de0:	e5832000 	str	r2, [r3]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
  132de4:	e51b3008 	ldr	r3, [fp, #-8]
  132de8:	e2833008 	add	r3, r3, #8
  132dec:	e3a02014 	mov	r2, #20
  132df0:	e51b1010 	ldr	r1, [fp, #-16]
  132df4:	e1a00003 	mov	r0, r3
  132df8:	eb003583 	bl	14040c <memcpy>
  return ipr;
  132dfc:	e51b3008 	ldr	r3, [fp, #-8]
}
  132e00:	e1a00003 	mov	r0, r3
  132e04:	e24bd004 	sub	sp, fp, #4
  132e08:	e8bd8800 	pop	{fp, pc}

00132e0c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
  132e0c:	e92d4800 	push	{fp, lr}
  132e10:	e28db004 	add	fp, sp, #4
  132e14:	e24dd008 	sub	sp, sp, #8
  132e18:	e50b0008 	str	r0, [fp, #-8]
  132e1c:	e50b100c 	str	r1, [fp, #-12]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
  132e20:	e30e3374 	movw	r3, #58228	; 0xe374
  132e24:	e3403014 	movt	r3, #20
  132e28:	e5933000 	ldr	r3, [r3]
  132e2c:	e51b2008 	ldr	r2, [fp, #-8]
  132e30:	e1520003 	cmp	r2, r3
  132e34:	1a000005 	bne	132e50 <ip_reass_dequeue_datagram+0x44>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
  132e38:	e51b3008 	ldr	r3, [fp, #-8]
  132e3c:	e5932000 	ldr	r2, [r3]
  132e40:	e30e3374 	movw	r3, #58228	; 0xe374
  132e44:	e3403014 	movt	r3, #20
  132e48:	e5832000 	str	r2, [r3]
  132e4c:	ea00000d 	b	132e88 <ip_reass_dequeue_datagram+0x7c>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
  132e50:	e51b300c 	ldr	r3, [fp, #-12]
  132e54:	e3530000 	cmp	r3, #0
  132e58:	1a000006 	bne	132e78 <ip_reass_dequeue_datagram+0x6c>
  132e5c:	e3080f1c 	movw	r0, #36636	; 0x8f1c
  132e60:	e3400014 	movt	r0, #20
  132e64:	ebff40aa 	bl	103114 <rt_kprintf>
  132e68:	e3001141 	movw	r1, #321	; 0x141
  132e6c:	e3080e94 	movw	r0, #36500	; 0x8e94
  132e70:	e3400014 	movt	r0, #20
  132e74:	ebff5f26 	bl	10ab14 <sys_arch_assert>
    prev->next = ipr->next;
  132e78:	e51b3008 	ldr	r3, [fp, #-8]
  132e7c:	e5932000 	ldr	r2, [r3]
  132e80:	e51b300c 	ldr	r3, [fp, #-12]
  132e84:	e5832000 	str	r2, [r3]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
  132e88:	e51b1008 	ldr	r1, [fp, #-8]
  132e8c:	e3a00005 	mov	r0, #5
  132e90:	ebff981f 	bl	118f14 <memp_free>
}
  132e94:	e320f000 	nop	{0}
  132e98:	e24bd004 	sub	sp, fp, #4
  132e9c:	e8bd8800 	pop	{fp, pc}

00132ea0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param new_p points to the pbuf for the current fragment
 * @return 0 if invalid, >0 otherwise
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p)
{
  132ea0:	e92d4800 	push	{fp, lr}
  132ea4:	e28db004 	add	fp, sp, #4
  132ea8:	e24dd028 	sub	sp, sp, #40	; 0x28
  132eac:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  132eb0:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
  132eb4:	e3a03000 	mov	r3, #0
  132eb8:	e50b300c 	str	r3, [fp, #-12]
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
  132ebc:	e3a03001 	mov	r3, #1
  132ec0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
  132ec4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  132ec8:	e5933004 	ldr	r3, [r3, #4]
  132ecc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
  132ed0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  132ed4:	e1d330b2 	ldrh	r3, [r3, #2]
  132ed8:	e6ff3073 	uxth	r3, r3
  132edc:	e1a00003 	mov	r0, r3
  132ee0:	ebff8ce2 	bl	116270 <lwip_htons>
  132ee4:	e1a03000 	mov	r3, r0
  132ee8:	e1a02003 	mov	r2, r3
  132eec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  132ef0:	e5d33000 	ldrb	r3, [r3]
  132ef4:	e6ff3073 	uxth	r3, r3
  132ef8:	e203300f 	and	r3, r3, #15
  132efc:	e6ff3073 	uxth	r3, r3
  132f00:	e1a03103 	lsl	r3, r3, #2
  132f04:	e6ff3073 	uxth	r3, r3
  132f08:	e0423003 	sub	r3, r2, r3
  132f0c:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
  132f10:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  132f14:	e1d330b6 	ldrh	r3, [r3, #6]
  132f18:	e6ff3073 	uxth	r3, r3
  132f1c:	e1a00003 	mov	r0, r3
  132f20:	ebff8cd2 	bl	116270 <lwip_htons>
  132f24:	e1a03000 	mov	r3, r0
  132f28:	e7ec3053 	ubfx	r3, r3, #0, #13
  132f2c:	e6ff3073 	uxth	r3, r3
  132f30:	e1a03183 	lsl	r3, r3, #3
  132f34:	e14b31bc 	strh	r3, [fp, #-28]	; 0xffffffe4
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
  132f38:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  132f3c:	e5933004 	ldr	r3, [r3, #4]
  132f40:	e50b3008 	str	r3, [fp, #-8]
  iprh->next_pbuf = NULL;
  132f44:	e51b3008 	ldr	r3, [fp, #-8]
  132f48:	e3a02000 	mov	r2, #0
  132f4c:	e5c32000 	strb	r2, [r3]
  132f50:	e3a02000 	mov	r2, #0
  132f54:	e5c32001 	strb	r2, [r3, #1]
  132f58:	e3a02000 	mov	r2, #0
  132f5c:	e5c32002 	strb	r2, [r3, #2]
  132f60:	e3a02000 	mov	r2, #0
  132f64:	e5c32003 	strb	r2, [r3, #3]
  iprh->start = offset;
  132f68:	e51b3008 	ldr	r3, [fp, #-8]
  132f6c:	e15b21bc 	ldrh	r2, [fp, #-28]	; 0xffffffe4
  132f70:	e1c320b4 	strh	r2, [r3, #4]
  iprh->end = offset + len;
  132f74:	e15b21bc 	ldrh	r2, [fp, #-28]	; 0xffffffe4
  132f78:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  132f7c:	e0823003 	add	r3, r2, r3
  132f80:	e6ff2073 	uxth	r2, r3
  132f84:	e51b3008 	ldr	r3, [fp, #-8]
  132f88:	e1c320b6 	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
  132f8c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132f90:	e5933004 	ldr	r3, [r3, #4]
  132f94:	e50b3010 	str	r3, [fp, #-16]
  132f98:	ea00004a 	b	1330c8 <ip_reass_chain_frag_into_datagram_and_validate+0x228>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
  132f9c:	e51b3010 	ldr	r3, [fp, #-16]
  132fa0:	e5933004 	ldr	r3, [r3, #4]
  132fa4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    if (iprh->start < iprh_tmp->start) {
  132fa8:	e51b3008 	ldr	r3, [fp, #-8]
  132fac:	e1d330b4 	ldrh	r3, [r3, #4]
  132fb0:	e6ff2073 	uxth	r2, r3
  132fb4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132fb8:	e1d330b4 	ldrh	r3, [r3, #4]
  132fbc:	e6ff3073 	uxth	r3, r3
  132fc0:	e1520003 	cmp	r2, r3
  132fc4:	2a00001d 	bcs	133040 <ip_reass_chain_frag_into_datagram_and_validate+0x1a0>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
  132fc8:	e51b3008 	ldr	r3, [fp, #-8]
  132fcc:	e51b2010 	ldr	r2, [fp, #-16]
  132fd0:	e5832000 	str	r2, [r3]
      if (iprh_prev != NULL) {
  132fd4:	e51b300c 	ldr	r3, [fp, #-12]
  132fd8:	e3530000 	cmp	r3, #0
  132fdc:	0a000013 	beq	133030 <ip_reass_chain_frag_into_datagram_and_validate+0x190>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
  132fe0:	e51b3008 	ldr	r3, [fp, #-8]
  132fe4:	e1d330b4 	ldrh	r3, [r3, #4]
  132fe8:	e6ff2073 	uxth	r2, r3
  132fec:	e51b300c 	ldr	r3, [fp, #-12]
  132ff0:	e1d330b6 	ldrh	r3, [r3, #6]
  132ff4:	e6ff3073 	uxth	r3, r3
  132ff8:	e1520003 	cmp	r2, r3
  132ffc:	3a0000cf 	bcc	133340 <ip_reass_chain_frag_into_datagram_and_validate+0x4a0>
  133000:	e51b3008 	ldr	r3, [fp, #-8]
  133004:	e1d330b6 	ldrh	r3, [r3, #6]
  133008:	e6ff2073 	uxth	r2, r3
  13300c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  133010:	e1d330b4 	ldrh	r3, [r3, #4]
  133014:	e6ff3073 	uxth	r3, r3
  133018:	e1520003 	cmp	r2, r3
  13301c:	8a0000c7 	bhi	133340 <ip_reass_chain_frag_into_datagram_and_validate+0x4a0>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
  133020:	e51b300c 	ldr	r3, [fp, #-12]
  133024:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  133028:	e5832000 	str	r2, [r3]
      } else {
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
  13302c:	ea000028 	b	1330d4 <ip_reass_chain_frag_into_datagram_and_validate+0x234>
        ipr->p = new_p;
  133030:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  133034:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  133038:	e5832004 	str	r2, [r3, #4]
      break;
  13303c:	ea000024 	b	1330d4 <ip_reass_chain_frag_into_datagram_and_validate+0x234>
    } else if (iprh->start == iprh_tmp->start) {
  133040:	e51b3008 	ldr	r3, [fp, #-8]
  133044:	e1d330b4 	ldrh	r3, [r3, #4]
  133048:	e6ff2073 	uxth	r2, r3
  13304c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  133050:	e1d330b4 	ldrh	r3, [r3, #4]
  133054:	e6ff3073 	uxth	r3, r3
  133058:	e1520003 	cmp	r2, r3
  13305c:	0a0000b9 	beq	133348 <ip_reass_chain_frag_into_datagram_and_validate+0x4a8>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
  133060:	e51b3008 	ldr	r3, [fp, #-8]
  133064:	e1d330b4 	ldrh	r3, [r3, #4]
  133068:	e6ff2073 	uxth	r2, r3
  13306c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  133070:	e1d330b6 	ldrh	r3, [r3, #6]
  133074:	e6ff3073 	uxth	r3, r3
  133078:	e1520003 	cmp	r2, r3
  13307c:	3a0000b3 	bcc	133350 <ip_reass_chain_frag_into_datagram_and_validate+0x4b0>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
  133080:	e51b300c 	ldr	r3, [fp, #-12]
  133084:	e3530000 	cmp	r3, #0
  133088:	0a000009 	beq	1330b4 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
        if (iprh_prev->end != iprh_tmp->start) {
  13308c:	e51b300c 	ldr	r3, [fp, #-12]
  133090:	e1d330b6 	ldrh	r3, [r3, #6]
  133094:	e6ff2073 	uxth	r2, r3
  133098:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  13309c:	e1d330b4 	ldrh	r3, [r3, #4]
  1330a0:	e6ff3073 	uxth	r3, r3
  1330a4:	e1520003 	cmp	r2, r3
  1330a8:	0a000001 	beq	1330b4 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
  1330ac:	e3a03000 	mov	r3, #0
  1330b0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        }
      }
    }
    q = iprh_tmp->next_pbuf;
  1330b4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1330b8:	e5933000 	ldr	r3, [r3]
  1330bc:	e50b3010 	str	r3, [fp, #-16]
    iprh_prev = iprh_tmp;
  1330c0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1330c4:	e50b300c 	str	r3, [fp, #-12]
  for (q = ipr->p; q != NULL;) {
  1330c8:	e51b3010 	ldr	r3, [fp, #-16]
  1330cc:	e3530000 	cmp	r3, #0
  1330d0:	1affffb1 	bne	132f9c <ip_reass_chain_frag_into_datagram_and_validate+0xfc>
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
  1330d4:	e51b3010 	ldr	r3, [fp, #-16]
  1330d8:	e3530000 	cmp	r3, #0
  1330dc:	1a00002d 	bne	133198 <ip_reass_chain_frag_into_datagram_and_validate+0x2f8>
    if (iprh_prev != NULL) {
  1330e0:	e51b300c 	ldr	r3, [fp, #-12]
  1330e4:	e3530000 	cmp	r3, #0
  1330e8:	0a00001c 	beq	133160 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
  1330ec:	e51b300c 	ldr	r3, [fp, #-12]
  1330f0:	e1d330b6 	ldrh	r3, [r3, #6]
  1330f4:	e6ff2073 	uxth	r2, r3
  1330f8:	e51b3008 	ldr	r3, [fp, #-8]
  1330fc:	e1d330b4 	ldrh	r3, [r3, #4]
  133100:	e6ff3073 	uxth	r3, r3
  133104:	e1520003 	cmp	r2, r3
  133108:	9a000006 	bls	133128 <ip_reass_chain_frag_into_datagram_and_validate+0x288>
  13310c:	e3080f38 	movw	r0, #36664	; 0x8f38
  133110:	e3400014 	movt	r0, #20
  133114:	ebff3ffe 	bl	103114 <rt_kprintf>
  133118:	e300119b 	movw	r1, #411	; 0x19b
  13311c:	e3080e94 	movw	r0, #36500	; 0x8e94
  133120:	e3400014 	movt	r0, #20
  133124:	ebff5e7a 	bl	10ab14 <sys_arch_assert>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
  133128:	e51b300c 	ldr	r3, [fp, #-12]
  13312c:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  133130:	e5832000 	str	r2, [r3]
      if (iprh_prev->end != iprh->start) {
  133134:	e51b300c 	ldr	r3, [fp, #-12]
  133138:	e1d330b6 	ldrh	r3, [r3, #6]
  13313c:	e6ff2073 	uxth	r2, r3
  133140:	e51b3008 	ldr	r3, [fp, #-8]
  133144:	e1d330b4 	ldrh	r3, [r3, #4]
  133148:	e6ff3073 	uxth	r3, r3
  13314c:	e1520003 	cmp	r2, r3
  133150:	0a000010 	beq	133198 <ip_reass_chain_frag_into_datagram_and_validate+0x2f8>
        valid = 0;
  133154:	e3a03000 	mov	r3, #0
  133158:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  13315c:	ea00000d 	b	133198 <ip_reass_chain_frag_into_datagram_and_validate+0x2f8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
  133160:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  133164:	e5933004 	ldr	r3, [r3, #4]
  133168:	e3530000 	cmp	r3, #0
  13316c:	0a000006 	beq	13318c <ip_reass_chain_frag_into_datagram_and_validate+0x2ec>
  133170:	e3080f58 	movw	r0, #36696	; 0x8f58
  133174:	e3400014 	movt	r0, #20
  133178:	ebff3fe5 	bl	103114 <rt_kprintf>
  13317c:	e3a01f69 	mov	r1, #420	; 0x1a4
  133180:	e3080e94 	movw	r0, #36500	; 0x8e94
  133184:	e3400014 	movt	r0, #20
  133188:	ebff5e61 	bl	10ab14 <sys_arch_assert>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
  13318c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  133190:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  133194:	e5832004 	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0) {
  133198:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  13319c:	e5d3301e 	ldrb	r3, [r3, #30]
  1331a0:	e2033001 	and	r3, r3, #1
  1331a4:	e3530000 	cmp	r3, #0
  1331a8:	0a000062 	beq	133338 <ip_reass_chain_frag_into_datagram_and_validate+0x498>
    /* and had no holes so far */
    if (valid) {
  1331ac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1331b0:	e3530000 	cmp	r3, #0
  1331b4:	0a00005d 	beq	133330 <ip_reass_chain_frag_into_datagram_and_validate+0x490>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
  1331b8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1331bc:	e5933004 	ldr	r3, [r3, #4]
  1331c0:	e3530000 	cmp	r3, #0
  1331c4:	0a000006 	beq	1331e4 <ip_reass_chain_frag_into_datagram_and_validate+0x344>
  1331c8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1331cc:	e5933004 	ldr	r3, [r3, #4]
  1331d0:	e5933004 	ldr	r3, [r3, #4]
  1331d4:	e1d330b4 	ldrh	r3, [r3, #4]
  1331d8:	e6ff3073 	uxth	r3, r3
  1331dc:	e3530000 	cmp	r3, #0
  1331e0:	0a000002 	beq	1331f0 <ip_reass_chain_frag_into_datagram_and_validate+0x350>
        valid = 0;
  1331e4:	e3a03000 	mov	r3, #0
  1331e8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1331ec:	ea00004f 	b	133330 <ip_reass_chain_frag_into_datagram_and_validate+0x490>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
  1331f0:	e51b3008 	ldr	r3, [fp, #-8]
  1331f4:	e50b300c 	str	r3, [fp, #-12]
        q = iprh->next_pbuf;
  1331f8:	e51b3008 	ldr	r3, [fp, #-8]
  1331fc:	e5933000 	ldr	r3, [r3]
  133200:	e50b3010 	str	r3, [fp, #-16]
        while (q != NULL) {
  133204:	ea000012 	b	133254 <ip_reass_chain_frag_into_datagram_and_validate+0x3b4>
          iprh = (struct ip_reass_helper*)q->payload;
  133208:	e51b3010 	ldr	r3, [fp, #-16]
  13320c:	e5933004 	ldr	r3, [r3, #4]
  133210:	e50b3008 	str	r3, [fp, #-8]
          if (iprh_prev->end != iprh->start) {
  133214:	e51b300c 	ldr	r3, [fp, #-12]
  133218:	e1d330b6 	ldrh	r3, [r3, #6]
  13321c:	e6ff2073 	uxth	r2, r3
  133220:	e51b3008 	ldr	r3, [fp, #-8]
  133224:	e1d330b4 	ldrh	r3, [r3, #4]
  133228:	e6ff3073 	uxth	r3, r3
  13322c:	e1520003 	cmp	r2, r3
  133230:	0a000002 	beq	133240 <ip_reass_chain_frag_into_datagram_and_validate+0x3a0>
            valid = 0;
  133234:	e3a03000 	mov	r3, #0
  133238:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
            break;
  13323c:	ea000007 	b	133260 <ip_reass_chain_frag_into_datagram_and_validate+0x3c0>
          }
          iprh_prev = iprh;
  133240:	e51b3008 	ldr	r3, [fp, #-8]
  133244:	e50b300c 	str	r3, [fp, #-12]
          q = iprh->next_pbuf;
  133248:	e51b3008 	ldr	r3, [fp, #-8]
  13324c:	e5933000 	ldr	r3, [r3]
  133250:	e50b3010 	str	r3, [fp, #-16]
        while (q != NULL) {
  133254:	e51b3010 	ldr	r3, [fp, #-16]
  133258:	e3530000 	cmp	r3, #0
  13325c:	1affffe9 	bne	133208 <ip_reass_chain_frag_into_datagram_and_validate+0x368>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
  133260:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133264:	e3530000 	cmp	r3, #0
  133268:	0a000030 	beq	133330 <ip_reass_chain_frag_into_datagram_and_validate+0x490>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
  13326c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  133270:	e5933004 	ldr	r3, [r3, #4]
  133274:	e3530000 	cmp	r3, #0
  133278:	1a000006 	bne	133298 <ip_reass_chain_frag_into_datagram_and_validate+0x3f8>
  13327c:	e3080f90 	movw	r0, #36752	; 0x8f90
  133280:	e3400014 	movt	r0, #20
  133284:	ebff3fa2 	bl	103114 <rt_kprintf>
  133288:	e3a01f71 	mov	r1, #452	; 0x1c4
  13328c:	e3080e94 	movw	r0, #36500	; 0x8e94
  133290:	e3400014 	movt	r0, #20
  133294:	ebff5e1e 	bl	10ab14 <sys_arch_assert>
          LWIP_ASSERT("sanity check",
  133298:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  13329c:	e5933004 	ldr	r3, [r3, #4]
  1332a0:	e5933004 	ldr	r3, [r3, #4]
  1332a4:	e51b2008 	ldr	r2, [fp, #-8]
  1332a8:	e1520003 	cmp	r2, r3
  1332ac:	1a000006 	bne	1332cc <ip_reass_chain_frag_into_datagram_and_validate+0x42c>
  1332b0:	e3080f90 	movw	r0, #36752	; 0x8f90
  1332b4:	e3400014 	movt	r0, #20
  1332b8:	ebff3f95 	bl	103114 <rt_kprintf>
  1332bc:	e30011c6 	movw	r1, #454	; 0x1c6
  1332c0:	e3080e94 	movw	r0, #36500	; 0x8e94
  1332c4:	e3400014 	movt	r0, #20
  1332c8:	ebff5e11 	bl	10ab14 <sys_arch_assert>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
  1332cc:	e51b3008 	ldr	r3, [fp, #-8]
  1332d0:	e5933000 	ldr	r3, [r3]
  1332d4:	e3530000 	cmp	r3, #0
  1332d8:	0a000006 	beq	1332f8 <ip_reass_chain_frag_into_datagram_and_validate+0x458>
  1332dc:	e3080fa0 	movw	r0, #36768	; 0x8fa0
  1332e0:	e3400014 	movt	r0, #20
  1332e4:	ebff3f8a 	bl	103114 <rt_kprintf>
  1332e8:	e3a01f72 	mov	r1, #456	; 0x1c8
  1332ec:	e3080e94 	movw	r0, #36500	; 0x8e94
  1332f0:	e3400014 	movt	r0, #20
  1332f4:	ebff5e06 	bl	10ab14 <sys_arch_assert>
            iprh->next_pbuf == NULL);
          LWIP_ASSERT("validate_datagram:datagram end!=datagram len",
  1332f8:	e51b3008 	ldr	r3, [fp, #-8]
  1332fc:	e1d330b6 	ldrh	r3, [r3, #6]
  133300:	e6ff2073 	uxth	r2, r3
  133304:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  133308:	e1d331bc 	ldrh	r3, [r3, #28]
  13330c:	e1520003 	cmp	r2, r3
  133310:	0a000006 	beq	133330 <ip_reass_chain_frag_into_datagram_and_validate+0x490>
  133314:	e3080fc4 	movw	r0, #36804	; 0x8fc4
  133318:	e3400014 	movt	r0, #20
  13331c:	ebff3f7c 	bl	103114 <rt_kprintf>
  133320:	e30011ca 	movw	r1, #458	; 0x1ca
  133324:	e3080e94 	movw	r0, #36500	; 0x8e94
  133328:	e3400014 	movt	r0, #20
  13332c:	ebff5df8 	bl	10ab14 <sys_arch_assert>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid;
  133330:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133334:	ea000015 	b	133390 <ip_reass_chain_frag_into_datagram_and_validate+0x4f0>
  }
  /* If we come here, not all fragments were received, yet! */
  return 0; /* not yet valid! */
  133338:	e3a03000 	mov	r3, #0
  13333c:	ea000013 	b	133390 <ip_reass_chain_frag_into_datagram_and_validate+0x4f0>
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  133340:	e320f000 	nop	{0}
  133344:	ea000002 	b	133354 <ip_reass_chain_frag_into_datagram_and_validate+0x4b4>
      goto freepbuf;
  133348:	e320f000 	nop	{0}
  13334c:	ea000000 	b	133354 <ip_reass_chain_frag_into_datagram_and_validate+0x4b4>
      goto freepbuf;
  133350:	e320f000 	nop	{0}
  ip_reass_pbufcount -= pbuf_clen(new_p);
  133354:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
  133358:	ebff9e80 	bl	11ad60 <pbuf_clen>
  13335c:	e1a03000 	mov	r3, r0
  133360:	e1a02003 	mov	r2, r3
  133364:	e30e3378 	movw	r3, #58232	; 0xe378
  133368:	e3403014 	movt	r3, #20
  13336c:	e1d330b0 	ldrh	r3, [r3]
  133370:	e0433002 	sub	r3, r3, r2
  133374:	e6ff2073 	uxth	r2, r3
  133378:	e30e3378 	movw	r3, #58232	; 0xe378
  13337c:	e3403014 	movt	r3, #20
  133380:	e1c320b0 	strh	r2, [r3]
  pbuf_free(new_p);
  133384:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
  133388:	ebff9def 	bl	11ab4c <pbuf_free>
  return 0;
  13338c:	e3a03000 	mov	r3, #0
#endif /* IP_REASS_CHECK_OVERLAP */
}
  133390:	e1a00003 	mov	r0, r3
  133394:	e24bd004 	sub	sp, fp, #4
  133398:	e8bd8800 	pop	{fp, pc}

0013339c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
  13339c:	e92d4800 	push	{fp, lr}
  1333a0:	e28db004 	add	fp, sp, #4
  1333a4:	e24dd028 	sub	sp, sp, #40	; 0x28
  1333a8:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  struct ip_hdr *fraghdr;
  struct ip_reassdata *ipr;
  struct ip_reass_helper *iprh;
  u16_t offset, len, clen;

  IPFRAG_STATS_INC(ip_frag.recv);
  1333ac:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  1333b0:	e3403057 	movt	r3, #87	; 0x57
  1333b4:	e1d333b2 	ldrh	r3, [r3, #50]	; 0x32
  1333b8:	e2833001 	add	r3, r3, #1
  1333bc:	e6ff2073 	uxth	r2, r3
  1333c0:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  1333c4:	e3403057 	movt	r3, #87	; 0x57
  1333c8:	e1c323b2 	strh	r2, [r3, #50]	; 0x32
  MIB2_STATS_INC(mib2.ipreasmreqds);
  1333cc:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  1333d0:	e3403057 	movt	r3, #87	; 0x57
  1333d4:	e5933160 	ldr	r3, [r3, #352]	; 0x160
  1333d8:	e2832001 	add	r2, r3, #1
  1333dc:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  1333e0:	e3403057 	movt	r3, #87	; 0x57
  1333e4:	e5832160 	str	r2, [r3, #352]	; 0x160

  fraghdr = (struct ip_hdr*)p->payload;
  1333e8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1333ec:	e5933004 	ldr	r3, [r3, #4]
  1333f0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
  1333f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1333f8:	e5d33000 	ldrb	r3, [r3]
  1333fc:	e203300f 	and	r3, r3, #15
  133400:	e1a03103 	lsl	r3, r3, #2
  133404:	e3530014 	cmp	r3, #20
  133408:	0a000008 	beq	133430 <ip4_reass+0x94>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
  13340c:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  133410:	e3403057 	movt	r3, #87	; 0x57
  133414:	e1d334b4 	ldrh	r3, [r3, #68]	; 0x44
  133418:	e2833001 	add	r3, r3, #1
  13341c:	e6ff2073 	uxth	r2, r3
  133420:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  133424:	e3403057 	movt	r3, #87	; 0x57
  133428:	e1c324b4 	strh	r2, [r3, #68]	; 0x44
    goto nullreturn;
  13342c:	ea00011e 	b	1338ac <ip4_reass+0x510>
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
  133430:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133434:	e1d330b6 	ldrh	r3, [r3, #6]
  133438:	e6ff3073 	uxth	r3, r3
  13343c:	e1a00003 	mov	r0, r3
  133440:	ebff8b8a 	bl	116270 <lwip_htons>
  133444:	e1a03000 	mov	r3, r0
  133448:	e7ec3053 	ubfx	r3, r3, #0, #13
  13344c:	e6ff3073 	uxth	r3, r3
  133450:	e1a03183 	lsl	r3, r3, #3
  133454:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
  133458:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13345c:	e1d330b2 	ldrh	r3, [r3, #2]
  133460:	e6ff3073 	uxth	r3, r3
  133464:	e1a00003 	mov	r0, r3
  133468:	ebff8b80 	bl	116270 <lwip_htons>
  13346c:	e1a03000 	mov	r3, r0
  133470:	e1a02003 	mov	r2, r3
  133474:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133478:	e5d33000 	ldrb	r3, [r3]
  13347c:	e6ff3073 	uxth	r3, r3
  133480:	e203300f 	and	r3, r3, #15
  133484:	e6ff3073 	uxth	r3, r3
  133488:	e1a03103 	lsl	r3, r3, #2
  13348c:	e6ff3073 	uxth	r3, r3
  133490:	e0423003 	sub	r3, r2, r3
  133494:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
  133498:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  13349c:	ebff9e2f 	bl	11ad60 <pbuf_clen>
  1334a0:	e1a03000 	mov	r3, r0
  1334a4:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
  1334a8:	e30e3378 	movw	r3, #58232	; 0xe378
  1334ac:	e3403014 	movt	r3, #20
  1334b0:	e1d330b0 	ldrh	r3, [r3]
  1334b4:	e1a02003 	mov	r2, r3
  1334b8:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  1334bc:	e0823003 	add	r3, r2, r3
  1334c0:	e353000a 	cmp	r3, #10
  1334c4:	da000017 	ble	133528 <ip4_reass+0x18c>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
  1334c8:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  1334cc:	e1a01003 	mov	r1, r3
  1334d0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1334d4:	ebfffdac 	bl	132b8c <ip_reass_remove_oldest_datagram>
  1334d8:	e1a03000 	mov	r3, r0
  1334dc:	e3530000 	cmp	r3, #0
  1334e0:	0a000007 	beq	133504 <ip4_reass+0x168>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
  1334e4:	e30e3378 	movw	r3, #58232	; 0xe378
  1334e8:	e3403014 	movt	r3, #20
  1334ec:	e1d330b0 	ldrh	r3, [r3]
  1334f0:	e1a02003 	mov	r2, r3
  1334f4:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  1334f8:	e0823003 	add	r3, r2, r3
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
  1334fc:	e353000a 	cmp	r3, #10
  133500:	da000008 	ble	133528 <ip4_reass+0x18c>
#endif /* IP_REASS_FREE_OLDEST */
    {
      /* No datagram could be freed and still too many pbufs enqueued */
      LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: Overflow condition: pbufct=%d, clen=%d, MAX=%d\n",
        ip_reass_pbufcount, clen, IP_REASS_MAX_PBUFS));
      IPFRAG_STATS_INC(ip_frag.memerr);
  133504:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  133508:	e3403057 	movt	r3, #87	; 0x57
  13350c:	e1d333bc 	ldrh	r3, [r3, #60]	; 0x3c
  133510:	e2833001 	add	r3, r3, #1
  133514:	e6ff2073 	uxth	r2, r3
  133518:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  13351c:	e3403057 	movt	r3, #87	; 0x57
  133520:	e1c323bc 	strh	r2, [r3, #60]	; 0x3c
      /* @todo: send ICMP time exceeded here? */
      /* drop this pbuf */
      goto nullreturn;
  133524:	ea0000e0 	b	1338ac <ip4_reass+0x510>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
  133528:	e30e3374 	movw	r3, #58228	; 0xe374
  13352c:	e3403014 	movt	r3, #20
  133530:	e5933000 	ldr	r3, [r3]
  133534:	e50b300c 	str	r3, [fp, #-12]
  133538:	ea00001e 	b	1335b8 <ip4_reass+0x21c>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
  13353c:	e51b300c 	ldr	r3, [fp, #-12]
  133540:	e5932014 	ldr	r2, [r3, #20]
  133544:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133548:	e593300c 	ldr	r3, [r3, #12]
  13354c:	e1520003 	cmp	r2, r3
  133550:	1a000015 	bne	1335ac <ip4_reass+0x210>
  133554:	e51b300c 	ldr	r3, [fp, #-12]
  133558:	e5932018 	ldr	r2, [r3, #24]
  13355c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133560:	e5933010 	ldr	r3, [r3, #16]
  133564:	e1520003 	cmp	r2, r3
  133568:	1a00000f 	bne	1335ac <ip4_reass+0x210>
  13356c:	e51b300c 	ldr	r3, [fp, #-12]
  133570:	e1d320bc 	ldrh	r2, [r3, #12]
  133574:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133578:	e1d330b4 	ldrh	r3, [r3, #4]
  13357c:	e6ff3073 	uxth	r3, r3
  133580:	e1520003 	cmp	r2, r3
  133584:	1a000008 	bne	1335ac <ip4_reass+0x210>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
  133588:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  13358c:	e3403057 	movt	r3, #87	; 0x57
  133590:	e1d334b6 	ldrh	r3, [r3, #70]	; 0x46
  133594:	e2833001 	add	r3, r3, #1
  133598:	e6ff2073 	uxth	r2, r3
  13359c:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  1335a0:	e3403057 	movt	r3, #87	; 0x57
  1335a4:	e1c324b6 	strh	r2, [r3, #70]	; 0x46
      break;
  1335a8:	ea000005 	b	1335c4 <ip4_reass+0x228>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
  1335ac:	e51b300c 	ldr	r3, [fp, #-12]
  1335b0:	e5933000 	ldr	r3, [r3]
  1335b4:	e50b300c 	str	r3, [fp, #-12]
  1335b8:	e51b300c 	ldr	r3, [fp, #-12]
  1335bc:	e3530000 	cmp	r3, #0
  1335c0:	1affffdd 	bne	13353c <ip4_reass+0x1a0>
    }
  }

  if (ipr == NULL) {
  1335c4:	e51b300c 	ldr	r3, [fp, #-12]
  1335c8:	e3530000 	cmp	r3, #0
  1335cc:	1a000008 	bne	1335f4 <ip4_reass+0x258>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
  1335d0:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  1335d4:	e1a01003 	mov	r1, r3
  1335d8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1335dc:	ebfffdc8 	bl	132d04 <ip_reass_enqueue_new_datagram>
  1335e0:	e50b000c 	str	r0, [fp, #-12]
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
  1335e4:	e51b300c 	ldr	r3, [fp, #-12]
  1335e8:	e3530000 	cmp	r3, #0
  1335ec:	1a000017 	bne	133650 <ip4_reass+0x2b4>
      goto nullreturn;
  1335f0:	ea0000ad 	b	1338ac <ip4_reass+0x510>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
  1335f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1335f8:	e1d330b6 	ldrh	r3, [r3, #6]
  1335fc:	e6ff3073 	uxth	r3, r3
  133600:	e1a00003 	mov	r0, r3
  133604:	ebff8b19 	bl	116270 <lwip_htons>
  133608:	e1a03000 	mov	r3, r0
  13360c:	e7ec3053 	ubfx	r3, r3, #0, #13
  133610:	e3530000 	cmp	r3, #0
  133614:	1a00000d 	bne	133650 <ip4_reass+0x2b4>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
  133618:	e51b300c 	ldr	r3, [fp, #-12]
  13361c:	e1d330be 	ldrh	r3, [r3, #14]
  133620:	e1a00003 	mov	r0, r3
  133624:	ebff8b11 	bl	116270 <lwip_htons>
  133628:	e1a03000 	mov	r3, r0
  13362c:	e7ec3053 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
  133630:	e3530000 	cmp	r3, #0
  133634:	0a000005 	beq	133650 <ip4_reass+0x2b4>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
  133638:	e51b300c 	ldr	r3, [fp, #-12]
  13363c:	e2833008 	add	r3, r3, #8
  133640:	e3a02014 	mov	r2, #20
  133644:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  133648:	e1a00003 	mov	r0, r3
  13364c:	eb00336e 	bl	14040c <memcpy>
    }
  }
  /* Track the current number of pbufs current 'in-flight', in order to limit
  the number of fragments that may be enqueued at any one time */
  ip_reass_pbufcount += clen;
  133650:	e30e3378 	movw	r3, #58232	; 0xe378
  133654:	e3403014 	movt	r3, #20
  133658:	e1d320b0 	ldrh	r2, [r3]
  13365c:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  133660:	e0823003 	add	r3, r2, r3
  133664:	e6ff2073 	uxth	r2, r3
  133668:	e30e3378 	movw	r3, #58232	; 0xe378
  13366c:	e3403014 	movt	r3, #20
  133670:	e1c320b0 	strh	r2, [r3]

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  if ((IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0) {
  133674:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133678:	e1d330b6 	ldrh	r3, [r3, #6]
  13367c:	e6ff3073 	uxth	r3, r3
  133680:	e2033020 	and	r3, r3, #32
  133684:	e3530000 	cmp	r3, #0
  133688:	1a00000b 	bne	1336bc <ip4_reass+0x320>
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
  13368c:	e51b300c 	ldr	r3, [fp, #-12]
  133690:	e5d3301e 	ldrb	r3, [r3, #30]
  133694:	e3833001 	orr	r3, r3, #1
  133698:	e6ef2073 	uxtb	r2, r3
  13369c:	e51b300c 	ldr	r3, [fp, #-12]
  1336a0:	e5c3201e 	strb	r2, [r3, #30]
    ipr->datagram_len = offset + len;
  1336a4:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  1336a8:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
  1336ac:	e0823003 	add	r3, r2, r3
  1336b0:	e6ff2073 	uxth	r2, r3
  1336b4:	e51b300c 	ldr	r3, [fp, #-12]
  1336b8:	e1c321bc 	strh	r2, [r3, #28]
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  if (ip_reass_chain_frag_into_datagram_and_validate(ipr, p)) {
  1336bc:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  1336c0:	e51b000c 	ldr	r0, [fp, #-12]
  1336c4:	ebfffdf5 	bl	132ea0 <ip_reass_chain_frag_into_datagram_and_validate>
  1336c8:	e1a03000 	mov	r3, r0
  1336cc:	e3530000 	cmp	r3, #0
  1336d0:	0a000073 	beq	1338a4 <ip4_reass+0x508>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
  1336d4:	e51b300c 	ldr	r3, [fp, #-12]
  1336d8:	e1d331bc 	ldrh	r3, [r3, #28]
  1336dc:	e2833014 	add	r3, r3, #20
  1336e0:	e6ff2073 	uxth	r2, r3
  1336e4:	e51b300c 	ldr	r3, [fp, #-12]
  1336e8:	e1c321bc 	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
  1336ec:	e51b300c 	ldr	r3, [fp, #-12]
  1336f0:	e5933004 	ldr	r3, [r3, #4]
  1336f4:	e5933004 	ldr	r3, [r3, #4]
  1336f8:	e5933000 	ldr	r3, [r3]
  1336fc:	e50b3008 	str	r3, [fp, #-8]

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
  133700:	e51b300c 	ldr	r3, [fp, #-12]
  133704:	e5933004 	ldr	r3, [r3, #4]
  133708:	e5933004 	ldr	r3, [r3, #4]
  13370c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
  133710:	e51b300c 	ldr	r3, [fp, #-12]
  133714:	e2833008 	add	r3, r3, #8
  133718:	e3a02014 	mov	r2, #20
  13371c:	e1a01003 	mov	r1, r3
  133720:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  133724:	eb003338 	bl	14040c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
  133728:	e51b300c 	ldr	r3, [fp, #-12]
  13372c:	e1d331bc 	ldrh	r3, [r3, #28]
  133730:	e1a00003 	mov	r0, r3
  133734:	ebff8acd 	bl	116270 <lwip_htons>
  133738:	e1a03000 	mov	r3, r0
  13373c:	e1a02003 	mov	r2, r3
  133740:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133744:	e1c320b2 	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
  133748:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13374c:	e3a02000 	mov	r2, #0
  133750:	e5c32006 	strb	r2, [r3, #6]
  133754:	e3a02000 	mov	r2, #0
  133758:	e5c32007 	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
  13375c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133760:	e3a02000 	mov	r2, #0
  133764:	e5c3200a 	strb	r2, [r3, #10]
  133768:	e3a02000 	mov	r2, #0
  13376c:	e5c3200b 	strb	r2, [r3, #11]
    /* @todo: do we need to set/calculate the correct checksum? */
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
  133770:	e3a01014 	mov	r1, #20
  133774:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  133778:	ebff93cb 	bl	1186ac <inet_chksum>
  13377c:	e1a03000 	mov	r3, r0
  133780:	e1a02003 	mov	r2, r3
  133784:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133788:	e1c320ba 	strh	r2, [r3, #10]
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
  13378c:	e51b300c 	ldr	r3, [fp, #-12]
  133790:	e5933004 	ldr	r3, [r3, #4]
  133794:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
  133798:	ea00000b 	b	1337cc <ip4_reass+0x430>
      iprh = (struct ip_reass_helper*)r->payload;
  13379c:	e51b3008 	ldr	r3, [fp, #-8]
  1337a0:	e5933004 	ldr	r3, [r3, #4]
  1337a4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
  1337a8:	e3e01013 	mvn	r1, #19
  1337ac:	e51b0008 	ldr	r0, [fp, #-8]
  1337b0:	ebff9cc7 	bl	11aad4 <pbuf_header>
      pbuf_cat(p, r);
  1337b4:	e51b1008 	ldr	r1, [fp, #-8]
  1337b8:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1337bc:	ebff9d99 	bl	11ae28 <pbuf_cat>
      r = iprh->next_pbuf;
  1337c0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1337c4:	e5933000 	ldr	r3, [r3]
  1337c8:	e50b3008 	str	r3, [fp, #-8]
    while (r != NULL) {
  1337cc:	e51b3008 	ldr	r3, [fp, #-8]
  1337d0:	e3530000 	cmp	r3, #0
  1337d4:	1afffff0 	bne	13379c <ip4_reass+0x400>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
  1337d8:	e30e3374 	movw	r3, #58228	; 0xe374
  1337dc:	e3403014 	movt	r3, #20
  1337e0:	e5933000 	ldr	r3, [r3]
  1337e4:	e51b200c 	ldr	r2, [fp, #-12]
  1337e8:	e1520003 	cmp	r2, r3
  1337ec:	1a000002 	bne	1337fc <ip4_reass+0x460>
      ipr_prev = NULL;
  1337f0:	e3a03000 	mov	r3, #0
  1337f4:	e50b3010 	str	r3, [fp, #-16]
  1337f8:	ea000011 	b	133844 <ip4_reass+0x4a8>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
  1337fc:	e30e3374 	movw	r3, #58228	; 0xe374
  133800:	e3403014 	movt	r3, #20
  133804:	e5933000 	ldr	r3, [r3]
  133808:	e50b3010 	str	r3, [fp, #-16]
  13380c:	ea000007 	b	133830 <ip4_reass+0x494>
        if (ipr_prev->next == ipr) {
  133810:	e51b3010 	ldr	r3, [fp, #-16]
  133814:	e5933000 	ldr	r3, [r3]
  133818:	e51b200c 	ldr	r2, [fp, #-12]
  13381c:	e1520003 	cmp	r2, r3
  133820:	0a000006 	beq	133840 <ip4_reass+0x4a4>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
  133824:	e51b3010 	ldr	r3, [fp, #-16]
  133828:	e5933000 	ldr	r3, [r3]
  13382c:	e50b3010 	str	r3, [fp, #-16]
  133830:	e51b3010 	ldr	r3, [fp, #-16]
  133834:	e3530000 	cmp	r3, #0
  133838:	1afffff4 	bne	133810 <ip4_reass+0x474>
  13383c:	ea000000 	b	133844 <ip4_reass+0x4a8>
          break;
  133840:	e320f000 	nop	{0}
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
  133844:	e51b1010 	ldr	r1, [fp, #-16]
  133848:	e51b000c 	ldr	r0, [fp, #-12]
  13384c:	ebfffd6e 	bl	132e0c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
  133850:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  133854:	ebff9d41 	bl	11ad60 <pbuf_clen>
  133858:	e1a03000 	mov	r3, r0
  13385c:	e1a02003 	mov	r2, r3
  133860:	e30e3378 	movw	r3, #58232	; 0xe378
  133864:	e3403014 	movt	r3, #20
  133868:	e1d330b0 	ldrh	r3, [r3]
  13386c:	e0433002 	sub	r3, r3, r2
  133870:	e6ff2073 	uxth	r2, r3
  133874:	e30e3378 	movw	r3, #58232	; 0xe378
  133878:	e3403014 	movt	r3, #20
  13387c:	e1c320b0 	strh	r2, [r3]

    MIB2_STATS_INC(mib2.ipreasmoks);
  133880:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  133884:	e3403057 	movt	r3, #87	; 0x57
  133888:	e593314c 	ldr	r3, [r3, #332]	; 0x14c
  13388c:	e2832001 	add	r2, r3, #1
  133890:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  133894:	e3403057 	movt	r3, #87	; 0x57
  133898:	e583214c 	str	r2, [r3, #332]	; 0x14c

    /* Return the pbuf chain */
    return p;
  13389c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1338a0:	ea00000c 	b	1338d8 <ip4_reass+0x53c>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
  1338a4:	e3a03000 	mov	r3, #0
  1338a8:	ea00000a 	b	1338d8 <ip4_reass+0x53c>

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  1338ac:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  1338b0:	e3403057 	movt	r3, #87	; 0x57
  1338b4:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  1338b8:	e2833001 	add	r3, r3, #1
  1338bc:	e6ff2073 	uxth	r2, r3
  1338c0:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  1338c4:	e3403057 	movt	r3, #87	; 0x57
  1338c8:	e1c323b6 	strh	r2, [r3, #54]	; 0x36
  pbuf_free(p);
  1338cc:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1338d0:	ebff9c9d 	bl	11ab4c <pbuf_free>
  return NULL;
  1338d4:	e3a03000 	mov	r3, #0
}
  1338d8:	e1a00003 	mov	r0, r3
  1338dc:	e24bd004 	sub	sp, fp, #4
  1338e0:	e8bd8800 	pop	{fp, pc}

001338e4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
  1338e4:	e92d4800 	push	{fp, lr}
  1338e8:	e28db004 	add	fp, sp, #4
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
  1338ec:	e3002286 	movw	r2, #646	; 0x286
  1338f0:	e3081e94 	movw	r1, #36500	; 0x8e94
  1338f4:	e3401014 	movt	r1, #20
  1338f8:	e3a00006 	mov	r0, #6
  1338fc:	ebff951c 	bl	118d74 <memp_malloc_fn>
  133900:	e1a03000 	mov	r3, r0
}
  133904:	e1a00003 	mov	r0, r3
  133908:	e8bd8800 	pop	{fp, pc}

0013390c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
  13390c:	e92d4800 	push	{fp, lr}
  133910:	e28db004 	add	fp, sp, #4
  133914:	e24dd008 	sub	sp, sp, #8
  133918:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ASSERT("p != NULL", p != NULL);
  13391c:	e51b3008 	ldr	r3, [fp, #-8]
  133920:	e3530000 	cmp	r3, #0
  133924:	1a000006 	bne	133944 <ip_frag_free_pbuf_custom_ref+0x38>
  133928:	e3080ff4 	movw	r0, #36852	; 0x8ff4
  13392c:	e3400014 	movt	r0, #20
  133930:	ebff3df7 	bl	103114 <rt_kprintf>
  133934:	e300128d 	movw	r1, #653	; 0x28d
  133938:	e3080e94 	movw	r0, #36500	; 0x8e94
  13393c:	e3400014 	movt	r0, #20
  133940:	ebff5c73 	bl	10ab14 <sys_arch_assert>
  memp_free(MEMP_FRAG_PBUF, p);
  133944:	e51b1008 	ldr	r1, [fp, #-8]
  133948:	e3a00006 	mov	r0, #6
  13394c:	ebff9570 	bl	118f14 <memp_free>
}
  133950:	e320f000 	nop	{0}
  133954:	e24bd004 	sub	sp, fp, #4
  133958:	e8bd8800 	pop	{fp, pc}

0013395c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
  13395c:	e92d4800 	push	{fp, lr}
  133960:	e28db004 	add	fp, sp, #4
  133964:	e24dd010 	sub	sp, sp, #16
  133968:	e50b0010 	str	r0, [fp, #-16]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
  13396c:	e51b3010 	ldr	r3, [fp, #-16]
  133970:	e50b3008 	str	r3, [fp, #-8]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
  133974:	e51b3008 	ldr	r3, [fp, #-8]
  133978:	e3530000 	cmp	r3, #0
  13397c:	1a000006 	bne	13399c <ipfrag_free_pbuf_custom+0x40>
  133980:	e3090000 	movw	r0, #36864	; 0x9000
  133984:	e3400014 	movt	r0, #20
  133988:	ebff3de1 	bl	103114 <rt_kprintf>
  13398c:	e3001297 	movw	r1, #663	; 0x297
  133990:	e3080e94 	movw	r0, #36500	; 0x8e94
  133994:	e3400014 	movt	r0, #20
  133998:	ebff5c5d 	bl	10ab14 <sys_arch_assert>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  13399c:	e51b2008 	ldr	r2, [fp, #-8]
  1339a0:	e51b3010 	ldr	r3, [fp, #-16]
  1339a4:	e1520003 	cmp	r2, r3
  1339a8:	0a000006 	beq	1339c8 <ipfrag_free_pbuf_custom+0x6c>
  1339ac:	e309000c 	movw	r0, #36876	; 0x900c
  1339b0:	e3400014 	movt	r0, #20
  1339b4:	ebff3dd6 	bl	103114 <rt_kprintf>
  1339b8:	e3a01fa6 	mov	r1, #664	; 0x298
  1339bc:	e3080e94 	movw	r0, #36500	; 0x8e94
  1339c0:	e3400014 	movt	r0, #20
  1339c4:	ebff5c52 	bl	10ab14 <sys_arch_assert>
  if (pcr->original != NULL) {
  1339c8:	e51b3008 	ldr	r3, [fp, #-8]
  1339cc:	e5933014 	ldr	r3, [r3, #20]
  1339d0:	e3530000 	cmp	r3, #0
  1339d4:	0a000003 	beq	1339e8 <ipfrag_free_pbuf_custom+0x8c>
    pbuf_free(pcr->original);
  1339d8:	e51b3008 	ldr	r3, [fp, #-8]
  1339dc:	e5933014 	ldr	r3, [r3, #20]
  1339e0:	e1a00003 	mov	r0, r3
  1339e4:	ebff9c58 	bl	11ab4c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
  1339e8:	e51b0008 	ldr	r0, [fp, #-8]
  1339ec:	ebffffc6 	bl	13390c <ip_frag_free_pbuf_custom_ref>
}
  1339f0:	e320f000 	nop	{0}
  1339f4:	e24bd004 	sub	sp, fp, #4
  1339f8:	e8bd8800 	pop	{fp, pc}

001339fc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
  1339fc:	e92d4800 	push	{fp, lr}
  133a00:	e28db004 	add	fp, sp, #4
  133a04:	e24dd048 	sub	sp, sp, #72	; 0x48
  133a08:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
  133a0c:	e50b103c 	str	r1, [fp, #-60]	; 0xffffffc4
  133a10:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
  133a14:	e3a03000 	mov	r3, #0
  133a18:	e14b30b6 	strh	r3, [fp, #-6]
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
  133a1c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  133a20:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  133a24:	e2433014 	sub	r3, r3, #20
  133a28:	e2832007 	add	r2, r3, #7
  133a2c:	e3530000 	cmp	r3, #0
  133a30:	b1a03002 	movlt	r3, r2
  133a34:	a1a03003 	movge	r3, r3
  133a38:	e1a031c3 	asr	r3, r3, #3
  133a3c:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
  133a40:	e3a03014 	mov	r3, #20
  133a44:	e14b30be 	strh	r3, [fp, #-14]
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
  133a48:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  133a4c:	e5933004 	ldr	r3, [r3, #4]
  133a50:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  iphdr = original_iphdr;
  133a54:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  133a58:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
  133a5c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  133a60:	e5d33000 	ldrb	r3, [r3]
  133a64:	e203300f 	and	r3, r3, #15
  133a68:	e1a03103 	lsl	r3, r3, #2
  133a6c:	e3530014 	cmp	r3, #20
  133a70:	0a000008 	beq	133a98 <ip4_frag+0x9c>
  133a74:	e3090018 	movw	r0, #36888	; 0x9018
  133a78:	e3400014 	movt	r0, #20
  133a7c:	ebff3da4 	bl	103114 <rt_kprintf>
  133a80:	e3a01d0b 	mov	r1, #704	; 0x2c0
  133a84:	e3080e94 	movw	r0, #36500	; 0x8e94
  133a88:	e3400014 	movt	r0, #20
  133a8c:	ebff5c20 	bl	10ab14 <sys_arch_assert>
  133a90:	e3e03005 	mvn	r3, #5
  133a94:	ea0000ed 	b	133e50 <ip4_frag+0x454>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
  133a98:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  133a9c:	e1d330b6 	ldrh	r3, [r3, #6]
  133aa0:	e6ff3073 	uxth	r3, r3
  133aa4:	e1a00003 	mov	r0, r3
  133aa8:	ebff89f0 	bl	116270 <lwip_htons>
  133aac:	e1a03000 	mov	r3, r0
  133ab0:	e14b31b0 	strh	r3, [fp, #-16]
  ofo = tmp & IP_OFFMASK;
  133ab4:	e15b31b0 	ldrh	r3, [fp, #-16]
  133ab8:	e7ec3053 	ubfx	r3, r3, #0, #13
  133abc:	e14b30bc 	strh	r3, [fp, #-12]
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
  133ac0:	e15b31b0 	ldrh	r3, [fp, #-16]
  133ac4:	e2033a02 	and	r3, r3, #8192	; 0x2000
  133ac8:	e3530000 	cmp	r3, #0
  133acc:	0a000008 	beq	133af4 <ip4_frag+0xf8>
  133ad0:	e3090040 	movw	r0, #36928	; 0x9040
  133ad4:	e3400014 	movt	r0, #20
  133ad8:	ebff3d8d 	bl	103114 <rt_kprintf>
  133adc:	e30012c5 	movw	r1, #709	; 0x2c5
  133ae0:	e3080e94 	movw	r0, #36500	; 0x8e94
  133ae4:	e3400014 	movt	r0, #20
  133ae8:	ebff5c09 	bl	10ab14 <sys_arch_assert>
  133aec:	e3e03005 	mvn	r3, #5
  133af0:	ea0000d6 	b	133e50 <ip4_frag+0x454>

  left = p->tot_len - IP_HLEN;
  133af4:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  133af8:	e1d330b8 	ldrh	r3, [r3, #8]
  133afc:	e2433014 	sub	r3, r3, #20
  133b00:	e14b30ba 	strh	r3, [fp, #-10]

  while (left) {
  133b04:	ea0000bc 	b	133dfc <ip4_frag+0x400>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
  133b08:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  133b0c:	e1a02183 	lsl	r2, r3, #3
  133b10:	e15b30ba 	ldrh	r3, [fp, #-10]
  133b14:	e1520003 	cmp	r2, r3
  133b18:	b1a03002 	movlt	r3, r2
  133b1c:	a1a03003 	movge	r3, r3
  133b20:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
  133b24:	e3a02000 	mov	r2, #0
  133b28:	e3a01014 	mov	r1, #20
  133b2c:	e3a00002 	mov	r0, #2
  133b30:	ebff98fe 	bl	119f30 <pbuf_alloc>
  133b34:	e50b0024 	str	r0, [fp, #-36]	; 0xffffffdc
    if (rambuf == NULL) {
  133b38:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  133b3c:	e3530000 	cmp	r3, #0
  133b40:	0a0000b9 	beq	133e2c <ip4_frag+0x430>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
  133b44:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  133b48:	e1d330ba 	ldrh	r3, [r3, #10]
  133b4c:	e3530013 	cmp	r3, #19
  133b50:	8a000006 	bhi	133b70 <ip4_frag+0x174>
  133b54:	e309005c 	movw	r0, #36956	; 0x905c
  133b58:	e3400014 	movt	r0, #20
  133b5c:	ebff3d6c 	bl	103114 <rt_kprintf>
  133b60:	e3a01fba 	mov	r1, #744	; 0x2e8
  133b64:	e3080e94 	movw	r0, #36500	; 0x8e94
  133b68:	e3400014 	movt	r0, #20
  133b6c:	ebff5be8 	bl	10ab14 <sys_arch_assert>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
  133b70:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  133b74:	e5933004 	ldr	r3, [r3, #4]
  133b78:	e3a02014 	mov	r2, #20
  133b7c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  133b80:	e1a00003 	mov	r0, r3
  133b84:	eb003220 	bl	14040c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
  133b88:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  133b8c:	e5933004 	ldr	r3, [r3, #4]
  133b90:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    left_to_copy = fragsize;
  133b94:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  133b98:	e14b30b8 	strh	r3, [fp, #-8]
    while (left_to_copy) {
  133b9c:	ea000049 	b	133cc8 <ip4_frag+0x2cc>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
  133ba0:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  133ba4:	e1d320ba 	ldrh	r2, [r3, #10]
  133ba8:	e15b30be 	ldrh	r3, [fp, #-14]
  133bac:	e0423003 	sub	r3, r2, r3
  133bb0:	e14b32ba 	strh	r3, [fp, #-42]	; 0xffffffd6
      newpbuflen = LWIP_MIN(left_to_copy, plen);
  133bb4:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
  133bb8:	e15b30b8 	ldrh	r3, [fp, #-8]
  133bbc:	e1520003 	cmp	r2, r3
  133bc0:	31a03002 	movcc	r3, r2
  133bc4:	21a03003 	movcs	r3, r3
  133bc8:	e14b30b6 	strh	r3, [fp, #-6]
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
  133bcc:	e15b30b6 	ldrh	r3, [fp, #-6]
  133bd0:	e3530000 	cmp	r3, #0
  133bd4:	1a000005 	bne	133bf0 <ip4_frag+0x1f4>
        poff = 0;
  133bd8:	e3a03000 	mov	r3, #0
  133bdc:	e14b30be 	strh	r3, [fp, #-14]
        p = p->next;
  133be0:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  133be4:	e5933000 	ldr	r3, [r3]
  133be8:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
        continue;
  133bec:	ea000035 	b	133cc8 <ip4_frag+0x2cc>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
  133bf0:	ebffff3b 	bl	1338e4 <ip_frag_alloc_pbuf_custom_ref>
  133bf4:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
      if (pcr == NULL) {
  133bf8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  133bfc:	e3530000 	cmp	r3, #0
  133c00:	1a000002 	bne	133c10 <ip4_frag+0x214>
        pbuf_free(rambuf);
  133c04:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  133c08:	ebff9bcf 	bl	11ab4c <pbuf_free>
        goto memerr;
  133c0c:	ea000087 	b	133e30 <ip4_frag+0x434>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
  133c10:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
        (u8_t*)p->payload + poff, newpbuflen);
  133c14:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  133c18:	e5932004 	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
  133c1c:	e15b30be 	ldrh	r3, [fp, #-14]
  133c20:	e0823003 	add	r3, r2, r3
  133c24:	e15b10b6 	ldrh	r1, [fp, #-6]
  133c28:	e15b20b6 	ldrh	r2, [fp, #-6]
  133c2c:	e58d2004 	str	r2, [sp, #4]
  133c30:	e58d3000 	str	r3, [sp]
  133c34:	e1a03000 	mov	r3, r0
  133c38:	e3a02002 	mov	r2, #2
  133c3c:	e3a00004 	mov	r0, #4
  133c40:	ebff9a1f 	bl	11a4c4 <pbuf_alloced_custom>
  133c44:	e50b0034 	str	r0, [fp, #-52]	; 0xffffffcc
      if (newpbuf == NULL) {
  133c48:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  133c4c:	e3530000 	cmp	r3, #0
  133c50:	1a000004 	bne	133c68 <ip4_frag+0x26c>
        ip_frag_free_pbuf_custom_ref(pcr);
  133c54:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  133c58:	ebffff2b 	bl	13390c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
  133c5c:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  133c60:	ebff9bb9 	bl	11ab4c <pbuf_free>
        goto memerr;
  133c64:	ea000071 	b	133e30 <ip4_frag+0x434>
      }
      pbuf_ref(p);
  133c68:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
  133c6c:	ebff9c50 	bl	11adb4 <pbuf_ref>
      pcr->original = p;
  133c70:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  133c74:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
  133c78:	e5832014 	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
  133c7c:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  133c80:	e303395c 	movw	r3, #14684	; 0x395c
  133c84:	e3403013 	movt	r3, #19
  133c88:	e5823010 	str	r3, [r2, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
  133c8c:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  133c90:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  133c94:	ebff9c63 	bl	11ae28 <pbuf_cat>
      left_to_copy -= newpbuflen;
  133c98:	e15b20b8 	ldrh	r2, [fp, #-8]
  133c9c:	e15b30b6 	ldrh	r3, [fp, #-6]
  133ca0:	e0423003 	sub	r3, r2, r3
  133ca4:	e14b30b8 	strh	r3, [fp, #-8]
      if (left_to_copy) {
  133ca8:	e15b30b8 	ldrh	r3, [fp, #-8]
  133cac:	e3530000 	cmp	r3, #0
  133cb0:	0a000004 	beq	133cc8 <ip4_frag+0x2cc>
        poff = 0;
  133cb4:	e3a03000 	mov	r3, #0
  133cb8:	e14b30be 	strh	r3, [fp, #-14]
        p = p->next;
  133cbc:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  133cc0:	e5933000 	ldr	r3, [r3]
  133cc4:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
    while (left_to_copy) {
  133cc8:	e15b30b8 	ldrh	r3, [fp, #-8]
  133ccc:	e3530000 	cmp	r3, #0
  133cd0:	1affffb2 	bne	133ba0 <ip4_frag+0x1a4>
      }
    }
    poff += newpbuflen;
  133cd4:	e15b20be 	ldrh	r2, [fp, #-14]
  133cd8:	e15b30b6 	ldrh	r3, [fp, #-6]
  133cdc:	e0823003 	add	r3, r2, r3
  133ce0:	e14b30be 	strh	r3, [fp, #-14]
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
  133ce4:	e15b20ba 	ldrh	r2, [fp, #-10]
  133ce8:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  133cec:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  133cf0:	e2433014 	sub	r3, r3, #20
  133cf4:	e1520003 	cmp	r2, r3
  133cf8:	d3a03001 	movle	r3, #1
  133cfc:	c3a03000 	movgt	r3, #0
  133d00:	e6ef3073 	uxtb	r3, r3
  133d04:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
  133d08:	e15b30bc 	ldrh	r3, [fp, #-12]
  133d0c:	e7ec3053 	ubfx	r3, r3, #0, #13
  133d10:	e14b31b0 	strh	r3, [fp, #-16]
    if (!last) {
  133d14:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  133d18:	e3530000 	cmp	r3, #0
  133d1c:	1a000002 	bne	133d2c <ip4_frag+0x330>
      tmp = tmp | IP_MF;
  133d20:	e15b31b0 	ldrh	r3, [fp, #-16]
  133d24:	e3833a02 	orr	r3, r3, #8192	; 0x2000
  133d28:	e14b31b0 	strh	r3, [fp, #-16]
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
  133d2c:	e15b31b0 	ldrh	r3, [fp, #-16]
  133d30:	e1a00003 	mov	r0, r3
  133d34:	ebff894d 	bl	116270 <lwip_htons>
  133d38:	e1a03000 	mov	r3, r0
  133d3c:	e1a02003 	mov	r2, r3
  133d40:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  133d44:	e1c320b6 	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
  133d48:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  133d4c:	e2833014 	add	r3, r3, #20
  133d50:	e6ff3073 	uxth	r3, r3
  133d54:	e1a00003 	mov	r0, r3
  133d58:	ebff8944 	bl	116270 <lwip_htons>
  133d5c:	e1a03000 	mov	r3, r0
  133d60:	e1a02003 	mov	r2, r3
  133d64:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  133d68:	e1c320b2 	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
  133d6c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  133d70:	e3a02000 	mov	r2, #0
  133d74:	e5c3200a 	strb	r2, [r3, #10]
  133d78:	e3a02000 	mov	r2, #0
  133d7c:	e5c3200b 	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
  133d80:	e3a01014 	mov	r1, #20
  133d84:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  133d88:	ebff9247 	bl	1186ac <inet_chksum>
  133d8c:	e1a03000 	mov	r3, r0
  133d90:	e1a02003 	mov	r2, r3
  133d94:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  133d98:	e1c320ba 	strh	r2, [r3, #10]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
  133d9c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  133da0:	e5933014 	ldr	r3, [r3, #20]
  133da4:	e51b2040 	ldr	r2, [fp, #-64]	; 0xffffffc0
  133da8:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  133dac:	e51b003c 	ldr	r0, [fp, #-60]	; 0xffffffc4
  133db0:	e12fff33 	blx	r3
    IPFRAG_STATS_INC(ip_frag.xmit);
  133db4:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  133db8:	e3403057 	movt	r3, #87	; 0x57
  133dbc:	e1d333b0 	ldrh	r3, [r3, #48]	; 0x30
  133dc0:	e2833001 	add	r3, r3, #1
  133dc4:	e6ff2073 	uxth	r2, r3
  133dc8:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  133dcc:	e3403057 	movt	r3, #87	; 0x57
  133dd0:	e1c323b0 	strh	r2, [r3, #48]	; 0x30
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
  133dd4:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  133dd8:	ebff9b5b 	bl	11ab4c <pbuf_free>
    left -= fragsize;
  133ddc:	e15b20ba 	ldrh	r2, [fp, #-10]
  133de0:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  133de4:	e0423003 	sub	r3, r2, r3
  133de8:	e14b30ba 	strh	r3, [fp, #-10]
    ofo += nfb;
  133dec:	e15b20bc 	ldrh	r2, [fp, #-12]
  133df0:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  133df4:	e0823003 	add	r3, r2, r3
  133df8:	e14b30bc 	strh	r3, [fp, #-12]
  while (left) {
  133dfc:	e15b30ba 	ldrh	r3, [fp, #-10]
  133e00:	e3530000 	cmp	r3, #0
  133e04:	1affff3f 	bne	133b08 <ip4_frag+0x10c>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  133e08:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  133e0c:	e3403057 	movt	r3, #87	; 0x57
  133e10:	e5933154 	ldr	r3, [r3, #340]	; 0x154
  133e14:	e2832001 	add	r2, r3, #1
  133e18:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  133e1c:	e3403057 	movt	r3, #87	; 0x57
  133e20:	e5832154 	str	r2, [r3, #340]	; 0x154
  return ERR_OK;
  133e24:	e3a03000 	mov	r3, #0
  133e28:	ea000008 	b	133e50 <ip4_frag+0x454>
      goto memerr;
  133e2c:	e320f000 	nop	{0}
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  133e30:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  133e34:	e3403057 	movt	r3, #87	; 0x57
  133e38:	e5933158 	ldr	r3, [r3, #344]	; 0x158
  133e3c:	e2832001 	add	r2, r3, #1
  133e40:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  133e44:	e3403057 	movt	r3, #87	; 0x57
  133e48:	e5832158 	str	r2, [r3, #344]	; 0x158
  return ERR_MEM;
  133e4c:	e3e03000 	mvn	r3, #0
}
  133e50:	e1a00003 	mov	r0, r3
  133e54:	e24bd004 	sub	sp, fp, #4
  133e58:	e8bd8800 	pop	{fp, pc}

00133e5c <ping_prepare_echo>:
    rt_uint8_t addr0, addr1, addr2, addr3;
};

/** Prepare a echo ICMP request */
static void ping_prepare_echo( struct icmp_echo_hdr *iecho, u16_t len)
{
  133e5c:	e92d4800 	push	{fp, lr}
  133e60:	e28db004 	add	fp, sp, #4
  133e64:	e24dd010 	sub	sp, sp, #16
  133e68:	e50b0010 	str	r0, [fp, #-16]
  133e6c:	e1a03001 	mov	r3, r1
  133e70:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
    size_t i;
    size_t data_len = len - sizeof(struct icmp_echo_hdr);
  133e74:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  133e78:	e2433008 	sub	r3, r3, #8
  133e7c:	e50b300c 	str	r3, [fp, #-12]

    ICMPH_TYPE_SET(iecho, ICMP_ECHO);
  133e80:	e51b3010 	ldr	r3, [fp, #-16]
  133e84:	e3a02008 	mov	r2, #8
  133e88:	e5c32000 	strb	r2, [r3]
    ICMPH_CODE_SET(iecho, 0);
  133e8c:	e51b3010 	ldr	r3, [fp, #-16]
  133e90:	e3a02000 	mov	r2, #0
  133e94:	e5c32001 	strb	r2, [r3, #1]
    iecho->chksum = 0;
  133e98:	e51b3010 	ldr	r3, [fp, #-16]
  133e9c:	e3a02000 	mov	r2, #0
  133ea0:	e5c32002 	strb	r2, [r3, #2]
  133ea4:	e3a02000 	mov	r2, #0
  133ea8:	e5c32003 	strb	r2, [r3, #3]
    iecho->id     = PING_ID;
  133eac:	e51b2010 	ldr	r2, [fp, #-16]
  133eb0:	e3a03000 	mov	r3, #0
  133eb4:	e1e03003 	mvn	r3, r3
  133eb8:	e2033050 	and	r3, r3, #80	; 0x50
  133ebc:	e1e03003 	mvn	r3, r3
  133ec0:	e5c23004 	strb	r3, [r2, #4]
  133ec4:	e3a03000 	mov	r3, #0
  133ec8:	e1e03003 	mvn	r3, r3
  133ecc:	e2033050 	and	r3, r3, #80	; 0x50
  133ed0:	e1e03003 	mvn	r3, r3
  133ed4:	e5c23005 	strb	r3, [r2, #5]
    iecho->seqno  = htons(++ping_seq_num);
  133ed8:	e30e337a 	movw	r3, #58234	; 0xe37a
  133edc:	e3403014 	movt	r3, #20
  133ee0:	e1d330b0 	ldrh	r3, [r3]
  133ee4:	e2833001 	add	r3, r3, #1
  133ee8:	e6ff2073 	uxth	r2, r3
  133eec:	e30e337a 	movw	r3, #58234	; 0xe37a
  133ef0:	e3403014 	movt	r3, #20
  133ef4:	e1c320b0 	strh	r2, [r3]
  133ef8:	e30e337a 	movw	r3, #58234	; 0xe37a
  133efc:	e3403014 	movt	r3, #20
  133f00:	e1d330b0 	ldrh	r3, [r3]
  133f04:	e1a00003 	mov	r0, r3
  133f08:	ebff88d8 	bl	116270 <lwip_htons>
  133f0c:	e1a03000 	mov	r3, r0
  133f10:	e1a02003 	mov	r2, r3
  133f14:	e51b3010 	ldr	r3, [fp, #-16]
  133f18:	e1c320b6 	strh	r2, [r3, #6]

    /* fill the additional data buffer with some data */
    for (i = 0; i < data_len; i++)
  133f1c:	e3a03000 	mov	r3, #0
  133f20:	e50b3008 	str	r3, [fp, #-8]
  133f24:	ea000009 	b	133f50 <ping_prepare_echo+0xf4>
    {
        ((char*) iecho)[sizeof(struct icmp_echo_hdr) + i] = (char) i;
  133f28:	e51b3008 	ldr	r3, [fp, #-8]
  133f2c:	e2833008 	add	r3, r3, #8
  133f30:	e51b2010 	ldr	r2, [fp, #-16]
  133f34:	e0823003 	add	r3, r2, r3
  133f38:	e51b2008 	ldr	r2, [fp, #-8]
  133f3c:	e6ef2072 	uxtb	r2, r2
  133f40:	e5c32000 	strb	r2, [r3]
    for (i = 0; i < data_len; i++)
  133f44:	e51b3008 	ldr	r3, [fp, #-8]
  133f48:	e2833001 	add	r3, r3, #1
  133f4c:	e50b3008 	str	r3, [fp, #-8]
  133f50:	e51b2008 	ldr	r2, [fp, #-8]
  133f54:	e51b300c 	ldr	r3, [fp, #-12]
  133f58:	e1520003 	cmp	r2, r3
  133f5c:	3afffff1 	bcc	133f28 <ping_prepare_echo+0xcc>
    }

#ifdef RT_LWIP_USING_HW_CHECKSUM
      iecho->chksum = 0;
#else
      iecho->chksum = inet_chksum(iecho, len);
  133f60:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  133f64:	e1a01003 	mov	r1, r3
  133f68:	e51b0010 	ldr	r0, [fp, #-16]
  133f6c:	ebff91ce 	bl	1186ac <inet_chksum>
  133f70:	e1a03000 	mov	r3, r0
  133f74:	e1a02003 	mov	r2, r3
  133f78:	e51b3010 	ldr	r3, [fp, #-16]
  133f7c:	e1c320b2 	strh	r2, [r3, #2]
#endif

}
  133f80:	e320f000 	nop	{0}
  133f84:	e24bd004 	sub	sp, fp, #4
  133f88:	e8bd8800 	pop	{fp, pc}

00133f8c <lwip_ping_send>:

#include <stdio.h>

/* Ping using the socket ip */
err_t lwip_ping_send(int s, ip_addr_t *addr, int size)
{
  133f8c:	e92d4800 	push	{fp, lr}
  133f90:	e28db004 	add	fp, sp, #4
  133f94:	e24dd038 	sub	sp, sp, #56	; 0x38
  133f98:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  133f9c:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  133fa0:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
    int err;
    struct icmp_echo_hdr *iecho;
    struct sockaddr_in to;
    int ping_size = sizeof(struct icmp_echo_hdr) + size;
  133fa4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  133fa8:	e2833008 	add	r3, r3, #8
  133fac:	e50b3008 	str	r3, [fp, #-8]
    LWIP_ASSERT("ping_size is too big", ping_size <= 0xffff);
  133fb0:	e51b3008 	ldr	r3, [fp, #-8]
  133fb4:	e3530801 	cmp	r3, #65536	; 0x10000
  133fb8:	ba000006 	blt	133fd8 <lwip_ping_send+0x4c>
  133fbc:	e309007c 	movw	r0, #36988	; 0x907c
  133fc0:	e3400014 	movt	r0, #20
  133fc4:	ebff3c52 	bl	103114 <rt_kprintf>
  133fc8:	e3a01054 	mov	r1, #84	; 0x54
  133fcc:	e3090094 	movw	r0, #37012	; 0x9094
  133fd0:	e3400014 	movt	r0, #20
  133fd4:	ebff5ace 	bl	10ab14 <sys_arch_assert>

    iecho = rt_malloc(ping_size);
  133fd8:	e51b3008 	ldr	r3, [fp, #-8]
  133fdc:	e1a00003 	mov	r0, r3
  133fe0:	ebff3beb 	bl	102f94 <rt_malloc>
  133fe4:	e50b000c 	str	r0, [fp, #-12]
    if (iecho == RT_NULL)
  133fe8:	e51b300c 	ldr	r3, [fp, #-12]
  133fec:	e3530000 	cmp	r3, #0
  133ff0:	1a000001 	bne	133ffc <lwip_ping_send+0x70>
    {
        return ERR_MEM;
  133ff4:	e3e03000 	mvn	r3, #0
  133ff8:	ea00001e 	b	134078 <lwip_ping_send+0xec>
    }

    ping_prepare_echo(iecho, (u16_t) ping_size);
  133ffc:	e51b3008 	ldr	r3, [fp, #-8]
  134000:	e6ff3073 	uxth	r3, r3
  134004:	e1a01003 	mov	r1, r3
  134008:	e51b000c 	ldr	r0, [fp, #-12]
  13400c:	ebffff92 	bl	133e5c <ping_prepare_echo>

    to.sin_len = sizeof(to);
  134010:	e3a03010 	mov	r3, #16
  134014:	e54b3020 	strb	r3, [fp, #-32]	; 0xffffffe0
    to.sin_family = AF_INET;
  134018:	e3a03002 	mov	r3, #2
  13401c:	e54b301f 	strb	r3, [fp, #-31]	; 0xffffffe1
#if LWIP_IPV4 && LWIP_IPV6
    to.sin_addr.s_addr = addr->u_addr.ip4.addr;
#elif LWIP_IPV4
    to.sin_addr.s_addr = addr->addr;
  134020:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  134024:	e5933000 	ldr	r3, [r3]
  134028:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
#elif LWIP_IPV6
#error Not supported IPv6.
#endif

    err = lwip_sendto(s, iecho, ping_size, 0, (struct sockaddr*) &to, sizeof(to));
  13402c:	e51b2008 	ldr	r2, [fp, #-8]
  134030:	e3a03010 	mov	r3, #16
  134034:	e58d3004 	str	r3, [sp, #4]
  134038:	e24b3020 	sub	r3, fp, #32
  13403c:	e58d3000 	str	r3, [sp]
  134040:	e3a03000 	mov	r3, #0
  134044:	e51b100c 	ldr	r1, [fp, #-12]
  134048:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  13404c:	ebff79b7 	bl	112730 <lwip_sendto>
  134050:	e50b0010 	str	r0, [fp, #-16]
    rt_free(iecho);
  134054:	e51b000c 	ldr	r0, [fp, #-12]
  134058:	ebff3bd7 	bl	102fbc <rt_free>

    return (err == ping_size ? ERR_OK : ERR_VAL);
  13405c:	e51b2010 	ldr	r2, [fp, #-16]
  134060:	e51b3008 	ldr	r3, [fp, #-8]
  134064:	e1520003 	cmp	r2, r3
  134068:	1a000001 	bne	134074 <lwip_ping_send+0xe8>
  13406c:	e3a03000 	mov	r3, #0
  134070:	ea000000 	b	134078 <lwip_ping_send+0xec>
  134074:	e3e03005 	mvn	r3, #5
}
  134078:	e1a00003 	mov	r0, r3
  13407c:	e24bd004 	sub	sp, fp, #4
  134080:	e8bd8800 	pop	{fp, pc}

00134084 <lwip_ping_recv>:

int lwip_ping_recv(int s, int *ttl)
{
  134084:	e92d4810 	push	{r4, fp, lr}
  134088:	e28db008 	add	fp, sp, #8
  13408c:	e24dd074 	sub	sp, sp, #116	; 0x74
  134090:	e50b0070 	str	r0, [fp, #-112]	; 0xffffff90
  134094:	e50b1074 	str	r1, [fp, #-116]	; 0xffffff8c
    char buf[64];
    int fromlen = sizeof(struct sockaddr_in), len;
  134098:	e3a03010 	mov	r3, #16
  13409c:	e50b305c 	str	r3, [fp, #-92]	; 0xffffffa4
    struct sockaddr_in from;
    struct ip_hdr *iphdr;
    struct icmp_echo_hdr *iecho;

    while ((len = lwip_recvfrom(s, buf, sizeof(buf), 0, (struct sockaddr*) &from, (socklen_t*) &fromlen)) > 0)
  1340a0:	ea000024 	b	134138 <lwip_ping_recv+0xb4>
    {
        if (len >= (int)(sizeof(struct ip_hdr) + sizeof(struct icmp_echo_hdr)))
  1340a4:	e51b3010 	ldr	r3, [fp, #-16]
  1340a8:	e353001b 	cmp	r3, #27
  1340ac:	da000021 	ble	134138 <lwip_ping_recv+0xb4>
        {
            iphdr = (struct ip_hdr *) buf;
  1340b0:	e24b3058 	sub	r3, fp, #88	; 0x58
  1340b4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
            iecho = (struct icmp_echo_hdr *) (buf + (IPH_HL(iphdr) * 4));
  1340b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1340bc:	e5d33000 	ldrb	r3, [r3]
  1340c0:	e203300f 	and	r3, r3, #15
  1340c4:	e1a03103 	lsl	r3, r3, #2
  1340c8:	e1a02003 	mov	r2, r3
  1340cc:	e24b3058 	sub	r3, fp, #88	; 0x58
  1340d0:	e0833002 	add	r3, r3, r2
  1340d4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
            if ((iecho->id == PING_ID) && (iecho->seqno == htons(ping_seq_num)))
  1340d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1340dc:	e1d330b4 	ldrh	r3, [r3, #4]
  1340e0:	e6ff3073 	uxth	r3, r3
  1340e4:	e30a2faf 	movw	r2, #44975	; 0xafaf
  1340e8:	e1530002 	cmp	r3, r2
  1340ec:	1a000011 	bne	134138 <lwip_ping_recv+0xb4>
  1340f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1340f4:	e1d330b6 	ldrh	r3, [r3, #6]
  1340f8:	e6ff4073 	uxth	r4, r3
  1340fc:	e30e337a 	movw	r3, #58234	; 0xe37a
  134100:	e3403014 	movt	r3, #20
  134104:	e1d330b0 	ldrh	r3, [r3]
  134108:	e1a00003 	mov	r0, r3
  13410c:	ebff8857 	bl	116270 <lwip_htons>
  134110:	e1a03000 	mov	r3, r0
  134114:	e1540003 	cmp	r4, r3
  134118:	1a000006 	bne	134138 <lwip_ping_recv+0xb4>
            {
                *ttl = iphdr->_ttl;
  13411c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  134120:	e5d33008 	ldrb	r3, [r3, #8]
  134124:	e1a02003 	mov	r2, r3
  134128:	e51b3074 	ldr	r3, [fp, #-116]	; 0xffffff8c
  13412c:	e5832000 	str	r2, [r3]
                return len;
  134130:	e51b3010 	ldr	r3, [fp, #-16]
  134134:	ea00000d 	b	134170 <lwip_ping_recv+0xec>
    while ((len = lwip_recvfrom(s, buf, sizeof(buf), 0, (struct sockaddr*) &from, (socklen_t*) &fromlen)) > 0)
  134138:	e24b1058 	sub	r1, fp, #88	; 0x58
  13413c:	e24b305c 	sub	r3, fp, #92	; 0x5c
  134140:	e58d3004 	str	r3, [sp, #4]
  134144:	e24b306c 	sub	r3, fp, #108	; 0x6c
  134148:	e58d3000 	str	r3, [sp]
  13414c:	e3a03000 	mov	r3, #0
  134150:	e3a02040 	mov	r2, #64	; 0x40
  134154:	e51b0070 	ldr	r0, [fp, #-112]	; 0xffffff90
  134158:	ebff7609 	bl	111984 <lwip_recvfrom>
  13415c:	e50b0010 	str	r0, [fp, #-16]
  134160:	e51b3010 	ldr	r3, [fp, #-16]
  134164:	e3530000 	cmp	r3, #0
  134168:	caffffcd 	bgt	1340a4 <lwip_ping_recv+0x20>
            }
        }
    }

    return len;
  13416c:	e51b3010 	ldr	r3, [fp, #-16]
}
  134170:	e1a00003 	mov	r0, r3
  134174:	e24bd008 	sub	sp, fp, #8
  134178:	e8bd8810 	pop	{r4, fp, pc}

0013417c <ENET_ActiveRead>:
 * @note This must be called after the MAC configuration and
 * state are ready. It must be called after the ENET_Init() and
 * ENET_Ptp1588Configure(). This should be called when the ENET receive required.
 */
static inline void ENET_ActiveRead(ENET_Type *base)
{
  13417c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  134180:	e28db000 	add	fp, sp, #0
  134184:	e24dd00c 	sub	sp, sp, #12
  134188:	e50b0008 	str	r0, [fp, #-8]
    base->RDAR = ENET_RDAR_RDAR_MASK;
  13418c:	e51b3008 	ldr	r3, [fp, #-8]
  134190:	e3a02401 	mov	r2, #16777216	; 0x1000000
  134194:	e5832010 	str	r2, [r3, #16]
}
  134198:	e320f000 	nop	{0}
  13419c:	e28bd000 	add	sp, fp, #0
  1341a0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1341a4:	e12fff1e 	bx	lr

001341a8 <ENET_EnableInterrupts>:
 * @param base  ENET peripheral base address.
 * @param mask  ENET interrupts to enable. This is a logical OR of the
 *             enumeration :: enet_interrupt_enable_t.
 */
static inline void ENET_EnableInterrupts(ENET_Type *base, uint32_t mask)
{
  1341a8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1341ac:	e28db000 	add	fp, sp, #0
  1341b0:	e24dd00c 	sub	sp, sp, #12
  1341b4:	e50b0008 	str	r0, [fp, #-8]
  1341b8:	e50b100c 	str	r1, [fp, #-12]
    base->EIMR |= mask;
  1341bc:	e51b3008 	ldr	r3, [fp, #-8]
  1341c0:	e5932008 	ldr	r2, [r3, #8]
  1341c4:	e51b300c 	ldr	r3, [fp, #-12]
  1341c8:	e1822003 	orr	r2, r2, r3
  1341cc:	e51b3008 	ldr	r3, [fp, #-8]
  1341d0:	e5832008 	str	r2, [r3, #8]
}
  1341d4:	e320f000 	nop	{0}
  1341d8:	e28bd000 	add	sp, fp, #0
  1341dc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1341e0:	e12fff1e 	bx	lr

001341e4 <ENET_DisableInterrupts>:
 * @param base  ENET peripheral base address.
 * @param mask  ENET interrupts to disable. This is a logical OR of the
 *             enumeration :: enet_interrupt_enable_t.
 */
static inline void ENET_DisableInterrupts(ENET_Type *base, uint32_t mask)
{
  1341e4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1341e8:	e28db000 	add	fp, sp, #0
  1341ec:	e24dd00c 	sub	sp, sp, #12
  1341f0:	e50b0008 	str	r0, [fp, #-8]
  1341f4:	e50b100c 	str	r1, [fp, #-12]
    base->EIMR &= ~mask;
  1341f8:	e51b3008 	ldr	r3, [fp, #-8]
  1341fc:	e5932008 	ldr	r2, [r3, #8]
  134200:	e51b300c 	ldr	r3, [fp, #-12]
  134204:	e1e03003 	mvn	r3, r3
  134208:	e0022003 	and	r2, r2, r3
  13420c:	e51b3008 	ldr	r3, [fp, #-8]
  134210:	e5832008 	str	r2, [r3, #8]
}
  134214:	e320f000 	nop	{0}
  134218:	e28bd000 	add	sp, fp, #0
  13421c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  134220:	e12fff1e 	bx	lr

00134224 <imx6ul_eth_link_change>:
#else
#define eth_device_linkchange(x, y)
#endif

void imx6ul_eth_link_change(struct rt_imx6ul_ethps *imx6ul_device,rt_bool_t up)
{
  134224:	e92d4800 	push	{fp, lr}
  134228:	e28db004 	add	fp, sp, #4
  13422c:	e24dd008 	sub	sp, sp, #8
  134230:	e50b0008 	str	r0, [fp, #-8]
  134234:	e50b100c 	str	r1, [fp, #-12]
    if(up)
  134238:	e51b300c 	ldr	r3, [fp, #-12]
  13423c:	e3530000 	cmp	r3, #0
  134240:	0a000013 	beq	134294 <imx6ul_eth_link_change+0x70>
    {
        LOG_D("enet%d link up",imx6ul_device->mac_num);
  134244:	e30900d8 	movw	r0, #37080	; 0x90d8
  134248:	e3400014 	movt	r0, #20
  13424c:	ebff3bb0 	bl	103114 <rt_kprintf>
  134250:	e51b3008 	ldr	r3, [fp, #-8]
  134254:	e59330a4 	ldr	r3, [r3, #164]	; 0xa4
  134258:	e1a01003 	mov	r1, r3
  13425c:	e30900ec 	movw	r0, #37100	; 0x90ec
  134260:	e3400014 	movt	r0, #20
  134264:	ebff3baa 	bl	103114 <rt_kprintf>
  134268:	e30900fc 	movw	r0, #37116	; 0x90fc
  13426c:	e3400014 	movt	r0, #20
  134270:	ebff3ba7 	bl	103114 <rt_kprintf>
        eth_device_linkchange(&imx6ul_device->parent, RT_TRUE);
  134274:	e51b3008 	ldr	r3, [fp, #-8]
  134278:	e3a01001 	mov	r1, #1
  13427c:	e1a00003 	mov	r0, r3
  134280:	ebffd55a 	bl	1297f0 <eth_device_linkchange>
        imx6ul_device->phy_link_status = RT_TRUE;
  134284:	e51b3008 	ldr	r3, [fp, #-8]
  134288:	e3a02001 	mov	r2, #1
  13428c:	e5832088 	str	r2, [r3, #136]	; 0x88
    {
        LOG_D("enet%d link down",imx6ul_device->mac_num);
        eth_device_linkchange(&imx6ul_device->parent, RT_FALSE);
        imx6ul_device->phy_link_status = RT_FALSE;
    }
}
  134290:	ea000012 	b	1342e0 <imx6ul_eth_link_change+0xbc>
        LOG_D("enet%d link down",imx6ul_device->mac_num);
  134294:	e30900d8 	movw	r0, #37080	; 0x90d8
  134298:	e3400014 	movt	r0, #20
  13429c:	ebff3b9c 	bl	103114 <rt_kprintf>
  1342a0:	e51b3008 	ldr	r3, [fp, #-8]
  1342a4:	e59330a4 	ldr	r3, [r3, #164]	; 0xa4
  1342a8:	e1a01003 	mov	r1, r3
  1342ac:	e3090104 	movw	r0, #37124	; 0x9104
  1342b0:	e3400014 	movt	r0, #20
  1342b4:	ebff3b96 	bl	103114 <rt_kprintf>
  1342b8:	e30900fc 	movw	r0, #37116	; 0x90fc
  1342bc:	e3400014 	movt	r0, #20
  1342c0:	ebff3b93 	bl	103114 <rt_kprintf>
        eth_device_linkchange(&imx6ul_device->parent, RT_FALSE);
  1342c4:	e51b3008 	ldr	r3, [fp, #-8]
  1342c8:	e3a01000 	mov	r1, #0
  1342cc:	e1a00003 	mov	r0, r3
  1342d0:	ebffd546 	bl	1297f0 <eth_device_linkchange>
        imx6ul_device->phy_link_status = RT_FALSE;
  1342d4:	e51b3008 	ldr	r3, [fp, #-8]
  1342d8:	e3a02000 	mov	r2, #0
  1342dc:	e5832088 	str	r2, [r3, #136]	; 0x88
}
  1342e0:	e320f000 	nop	{0}
  1342e4:	e24bd004 	sub	sp, fp, #4
  1342e8:	e8bd8800 	pop	{fp, pc}

001342ec <page_alloc>:

void page_alloc(size_t memsize, void **addr)
{
  1342ec:	e92d4800 	push	{fp, lr}
  1342f0:	e28db004 	add	fp, sp, #4
  1342f4:	e24dd018 	sub	sp, sp, #24
  1342f8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1342fc:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    size_t alloc_size = memsize + SYS_PAGE_SIZE * 2;
  134300:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  134304:	e2833a02 	add	r3, r3, #8192	; 0x2000
  134308:	e50b3008 	str	r3, [fp, #-8]
    void * addr_start = malloc(alloc_size);
  13430c:	e51b0008 	ldr	r0, [fp, #-8]
  134310:	eb0021ad 	bl	13c9cc <malloc>
  134314:	e1a03000 	mov	r3, r0
  134318:	e50b300c 	str	r3, [fp, #-12]
    rt_memset(addr_start, 0, alloc_size);
  13431c:	e51b2008 	ldr	r2, [fp, #-8]
  134320:	e3a01000 	mov	r1, #0
  134324:	e51b000c 	ldr	r0, [fp, #-12]
  134328:	ebff3be6 	bl	1032c8 <rt_memset>

    long mask = SYS_PAGE_SIZE - 1;
  13432c:	e3003fff 	movw	r3, #4095	; 0xfff
  134330:	e50b3010 	str	r3, [fp, #-16]
    *addr = (void*)((long)(addr_start + SYS_PAGE_SIZE) & ~mask);
  134334:	e51b300c 	ldr	r3, [fp, #-12]
  134338:	e2833a01 	add	r3, r3, #4096	; 0x1000
  13433c:	e1a02003 	mov	r2, r3
  134340:	e51b3010 	ldr	r3, [fp, #-16]
  134344:	e1e03003 	mvn	r3, r3
  134348:	e0033002 	and	r3, r3, r2
  13434c:	e1a02003 	mov	r2, r3
  134350:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  134354:	e5832000 	str	r2, [r3]

    return;
  134358:	e320f000 	nop	{0}
}
  13435c:	e24bd004 	sub	sp, fp, #4
  134360:	e8bd8800 	pop	{fp, pc}

00134364 <enet_buffer_init>:

rt_err_t enet_buffer_init(enet_buffer_config_t *buffConfig)
{
  134364:	e92d4800 	push	{fp, lr}
  134368:	e28db004 	add	fp, sp, #4
  13436c:	e24dd030 	sub	sp, sp, #48	; 0x30
  134370:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
    void *tx_buff_addr = RT_NULL;
  134374:	e3a03000 	mov	r3, #0
  134378:	e50b3008 	str	r3, [fp, #-8]
    void *rx_buff_addr = RT_NULL;
  13437c:	e3a03000 	mov	r3, #0
  134380:	e50b300c 	str	r3, [fp, #-12]
    void *tx_bd_addr = RT_NULL;
  134384:	e3a03000 	mov	r3, #0
  134388:	e50b3010 	str	r3, [fp, #-16]
    void *rx_bd_addr = RT_NULL;
  13438c:	e3a03000 	mov	r3, #0
  134390:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

    if(((SYS_PAGE_SIZE<<RX_BUFFER_INDEX_NUM)<buffConfig->rxBufferTotalSize)||
  134394:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134398:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  13439c:	e3530701 	cmp	r3, #262144	; 0x40000
  1343a0:	8a000003 	bhi	1343b4 <enet_buffer_init+0x50>
       ((SYS_PAGE_SIZE<<TX_BUFFER_INDEX_NUM)<buffConfig->txBufferTotalSize))
  1343a4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1343a8:	e5933030 	ldr	r3, [r3, #48]	; 0x30
    if(((SYS_PAGE_SIZE<<RX_BUFFER_INDEX_NUM)<buffConfig->rxBufferTotalSize)||
  1343ac:	e3530701 	cmp	r3, #262144	; 0x40000
  1343b0:	9a00000a 	bls	1343e0 <enet_buffer_init+0x7c>
    {
        LOG_E("ERROR: alloc mem not enough for enet driver");
  1343b4:	e3090118 	movw	r0, #37144	; 0x9118
  1343b8:	e3400014 	movt	r0, #20
  1343bc:	ebff3b54 	bl	103114 <rt_kprintf>
  1343c0:	e309012c 	movw	r0, #37164	; 0x912c
  1343c4:	e3400014 	movt	r0, #20
  1343c8:	ebff3b51 	bl	103114 <rt_kprintf>
  1343cc:	e30900fc 	movw	r0, #37116	; 0x90fc
  1343d0:	e3400014 	movt	r0, #20
  1343d4:	ebff3b4e 	bl	103114 <rt_kprintf>
        return RT_ERROR;
  1343d8:	e3a03001 	mov	r3, #1
  1343dc:	ea000093 	b	134630 <enet_buffer_init+0x2cc>
    }

    size_t rx_buff_memsize = SYS_PAGE_SIZE<<RX_BUFFER_INDEX_NUM;
  1343e0:	e3a03701 	mov	r3, #262144	; 0x40000
  1343e4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    size_t tx_buff_memsize = SYS_PAGE_SIZE<<TX_BUFFER_INDEX_NUM;
  1343e8:	e3a03701 	mov	r3, #262144	; 0x40000
  1343ec:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    size_t rx_bd_memsize = SYS_PAGE_SIZE<<RX_BD_INDEX_NUM;
  1343f0:	e3a03a01 	mov	r3, #4096	; 0x1000
  1343f4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    size_t tx_bd_memsize = SYS_PAGE_SIZE<<TX_BD_INDEX_NUM;
  1343f8:	e3a03a01 	mov	r3, #4096	; 0x1000
  1343fc:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    size_t total_memsize = rx_buff_memsize + tx_buff_memsize + rx_bd_memsize + tx_bd_memsize;
  134400:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  134404:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  134408:	e0822003 	add	r2, r2, r3
  13440c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  134410:	e0823003 	add	r3, r2, r3
  134414:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  134418:	e0823003 	add	r3, r2, r3
  13441c:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8

    void *mem_align= RT_NULL;
  134420:	e3a03000 	mov	r3, #0
  134424:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
    page_alloc(total_memsize, &mem_align);
  134428:	e24b302c 	sub	r3, fp, #44	; 0x2c
  13442c:	e1a01003 	mov	r1, r3
  134430:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  134434:	ebffffac 	bl	1342ec <page_alloc>
    if (!mem_align)
  134438:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  13443c:	e3530000 	cmp	r3, #0
  134440:	1a000001 	bne	13444c <enet_buffer_init+0xe8>
    {
        return RT_ERROR;
  134444:	e3a03001 	mov	r3, #1
  134448:	ea000078 	b	134630 <enet_buffer_init+0x2cc>
    }
    
    rx_buff_addr = mem_align;
  13444c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  134450:	e50b300c 	str	r3, [fp, #-12]
    mem_align += rx_buff_memsize;
  134454:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  134458:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  13445c:	e0823003 	add	r3, r2, r3
  134460:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
    if(!rx_buff_addr)
  134464:	e51b300c 	ldr	r3, [fp, #-12]
  134468:	e3530000 	cmp	r3, #0
  13446c:	1a00000a 	bne	13449c <enet_buffer_init+0x138>
    {
        LOG_E("ERROR: rx buff page alloc failed");
  134470:	e3090118 	movw	r0, #37144	; 0x9118
  134474:	e3400014 	movt	r0, #20
  134478:	ebff3b25 	bl	103114 <rt_kprintf>
  13447c:	e3090158 	movw	r0, #37208	; 0x9158
  134480:	e3400014 	movt	r0, #20
  134484:	ebff3b22 	bl	103114 <rt_kprintf>
  134488:	e30900fc 	movw	r0, #37116	; 0x90fc
  13448c:	e3400014 	movt	r0, #20
  134490:	ebff3b1f 	bl	103114 <rt_kprintf>
        return RT_ERROR;
  134494:	e3a03001 	mov	r3, #1
  134498:	ea000064 	b	134630 <enet_buffer_init+0x2cc>
    }
    buffConfig->rxBufferAlign = rx_buff_addr;
  13449c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1344a0:	e51b200c 	ldr	r2, [fp, #-12]
  1344a4:	e5832014 	str	r2, [r3, #20]
    buffConfig->rxPhyBufferAlign = ueth_v2p(rx_buff_addr);
  1344a8:	e51b000c 	ldr	r0, [fp, #-12]
  1344ac:	ebff3ed7 	bl	104010 <ueth_v2p>
  1344b0:	e1a02000 	mov	r2, r0
  1344b4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1344b8:	e5832024 	str	r2, [r3, #36]	; 0x24
    
    tx_buff_addr = mem_align;
  1344bc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1344c0:	e50b3008 	str	r3, [fp, #-8]
    mem_align += tx_buff_memsize;
  1344c4:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  1344c8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1344cc:	e0823003 	add	r3, r2, r3
  1344d0:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
    if(!tx_buff_addr)
  1344d4:	e51b3008 	ldr	r3, [fp, #-8]
  1344d8:	e3530000 	cmp	r3, #0
  1344dc:	1a00000a 	bne	13450c <enet_buffer_init+0x1a8>
    {
        LOG_E("ERROR: tx buff page alloc failed");
  1344e0:	e3090118 	movw	r0, #37144	; 0x9118
  1344e4:	e3400014 	movt	r0, #20
  1344e8:	ebff3b09 	bl	103114 <rt_kprintf>
  1344ec:	e309017c 	movw	r0, #37244	; 0x917c
  1344f0:	e3400014 	movt	r0, #20
  1344f4:	ebff3b06 	bl	103114 <rt_kprintf>
  1344f8:	e30900fc 	movw	r0, #37116	; 0x90fc
  1344fc:	e3400014 	movt	r0, #20
  134500:	ebff3b03 	bl	103114 <rt_kprintf>
        return RT_ERROR;
  134504:	e3a03001 	mov	r3, #1
  134508:	ea000048 	b	134630 <enet_buffer_init+0x2cc>
    }
    buffConfig->txBufferAlign = tx_buff_addr;
  13450c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134510:	e51b2008 	ldr	r2, [fp, #-8]
  134514:	e5832018 	str	r2, [r3, #24]
    buffConfig->txPhyBufferAlign = ueth_v2p(tx_buff_addr);
  134518:	e51b0008 	ldr	r0, [fp, #-8]
  13451c:	ebff3ebb 	bl	104010 <ueth_v2p>
  134520:	e1a02000 	mov	r2, r0
  134524:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134528:	e5832028 	str	r2, [r3, #40]	; 0x28
    
    rx_bd_addr = mem_align;
  13452c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  134530:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    mem_align += rx_bd_memsize;
  134534:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  134538:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  13453c:	e0823003 	add	r3, r2, r3
  134540:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
    if(!rx_bd_addr)
  134544:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  134548:	e3530000 	cmp	r3, #0
  13454c:	1a00000a 	bne	13457c <enet_buffer_init+0x218>
    {
        LOG_E("ERROR: rx bd page alloc failed");
  134550:	e3090118 	movw	r0, #37144	; 0x9118
  134554:	e3400014 	movt	r0, #20
  134558:	ebff3aed 	bl	103114 <rt_kprintf>
  13455c:	e30901a0 	movw	r0, #37280	; 0x91a0
  134560:	e3400014 	movt	r0, #20
  134564:	ebff3aea 	bl	103114 <rt_kprintf>
  134568:	e30900fc 	movw	r0, #37116	; 0x90fc
  13456c:	e3400014 	movt	r0, #20
  134570:	ebff3ae7 	bl	103114 <rt_kprintf>
        return RT_ERROR;
  134574:	e3a03001 	mov	r3, #1
  134578:	ea00002c 	b	134630 <enet_buffer_init+0x2cc>
    }
    buffConfig->rxPhyBdStartAddrAlign = ueth_v2p(rx_bd_addr);
  13457c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  134580:	ebff3ea2 	bl	104010 <ueth_v2p>
  134584:	e1a02000 	mov	r2, r0
  134588:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  13458c:	e583201c 	str	r2, [r3, #28]
    buffConfig->rxBdStartAddrAlign = ueth_remap(buffConfig->rxPhyBdStartAddrAlign, UETH_REMAP_NOCACHE, rx_bd_memsize);
  134590:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134594:	e593301c 	ldr	r3, [r3, #28]
  134598:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  13459c:	e3a01003 	mov	r1, #3
  1345a0:	e1a00003 	mov	r0, r3
  1345a4:	ebff3ec6 	bl	1040c4 <ueth_remap>
  1345a8:	e1a02000 	mov	r2, r0
  1345ac:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1345b0:	e583200c 	str	r2, [r3, #12]
    
    tx_bd_addr = mem_align;
  1345b4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1345b8:	e50b3010 	str	r3, [fp, #-16]
    if(!tx_bd_addr)
  1345bc:	e51b3010 	ldr	r3, [fp, #-16]
  1345c0:	e3530000 	cmp	r3, #0
  1345c4:	1a00000a 	bne	1345f4 <enet_buffer_init+0x290>
    {
        LOG_E("ERROR: tx bd page alloc failed");
  1345c8:	e3090118 	movw	r0, #37144	; 0x9118
  1345cc:	e3400014 	movt	r0, #20
  1345d0:	ebff3acf 	bl	103114 <rt_kprintf>
  1345d4:	e30901c0 	movw	r0, #37312	; 0x91c0
  1345d8:	e3400014 	movt	r0, #20
  1345dc:	ebff3acc 	bl	103114 <rt_kprintf>
  1345e0:	e30900fc 	movw	r0, #37116	; 0x90fc
  1345e4:	e3400014 	movt	r0, #20
  1345e8:	ebff3ac9 	bl	103114 <rt_kprintf>
        return RT_ERROR;
  1345ec:	e3a03001 	mov	r3, #1
  1345f0:	ea00000e 	b	134630 <enet_buffer_init+0x2cc>
    }
    buffConfig->txPhyBdStartAddrAlign = ueth_v2p(tx_bd_addr);
  1345f4:	e51b0010 	ldr	r0, [fp, #-16]
  1345f8:	ebff3e84 	bl	104010 <ueth_v2p>
  1345fc:	e1a02000 	mov	r2, r0
  134600:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134604:	e5832020 	str	r2, [r3, #32]
    buffConfig->txBdStartAddrAlign = ueth_remap(buffConfig->txPhyBdStartAddrAlign, UETH_REMAP_NOCACHE, tx_bd_memsize);
  134608:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  13460c:	e5933020 	ldr	r3, [r3, #32]
  134610:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  134614:	e3a01003 	mov	r1, #3
  134618:	e1a00003 	mov	r0, r3
  13461c:	ebff3ea8 	bl	1040c4 <ueth_remap>
  134620:	e1a02000 	mov	r2, r0
  134624:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134628:	e5832010 	str	r2, [r3, #16]
    
    return RT_EOK;
  13462c:	e3a03000 	mov	r3, #0
}
  134630:	e1a00003 	mov	r0, r3
  134634:	e24bd004 	sub	sp, fp, #4
  134638:	e8bd8800 	pop	{fp, pc}

0013463c <rt_imx6ul_eth_init>:

/* EMAC initialization function */
static rt_err_t rt_imx6ul_eth_init(rt_device_t dev)
{
  13463c:	e92d4800 	push	{fp, lr}
  134640:	e28db004 	add	fp, sp, #4
  134644:	e24dd038 	sub	sp, sp, #56	; 0x38
  134648:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
    rt_err_t state;
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)dev;
  13464c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134650:	e50b300c 	str	r3, [fp, #-12]
    ENET_Type *base_addr = RT_NULL;
  134654:	e3a03000 	mov	r3, #0
  134658:	e50b3010 	str	r3, [fp, #-16]
    enet_handle_t *handle;
    enet_buffer_config_t *buffConfig;
    rt_uint32_t reg_value;

    // imx6ul_device->enet_virtual_base_addr = (ENET_Type *)rt_ioremap((void *)imx6ul_device->enet_phy_base_addr, SYS_PAGE_SIZE);
    imx6ul_device->enet_virtual_base_addr = (ENET_Type *)ueth_remap((void *)imx6ul_device->enet_phy_base_addr, UETH_REMAP, SYS_PAGE_SIZE);
  13465c:	e51b300c 	ldr	r3, [fp, #-12]
  134660:	e593309c 	ldr	r3, [r3, #156]	; 0x9c
  134664:	e3a02a01 	mov	r2, #4096	; 0x1000
  134668:	e3a01001 	mov	r1, #1
  13466c:	e1a00003 	mov	r0, r3
  134670:	ebff3e93 	bl	1040c4 <ueth_remap>
  134674:	e1a02000 	mov	r2, r0
  134678:	e51b300c 	ldr	r3, [fp, #-12]
  13467c:	e58320a0 	str	r2, [r3, #160]	; 0xa0
    base_addr = imx6ul_device->enet_virtual_base_addr;
  134680:	e51b300c 	ldr	r3, [fp, #-12]
  134684:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  134688:	e50b3010 	str	r3, [fp, #-16]
    config = &imx6ul_device->config;
  13468c:	e51b300c 	ldr	r3, [fp, #-12]
  134690:	e28330dc 	add	r3, r3, #220	; 0xdc
  134694:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    handle = &imx6ul_device->handle;
  134698:	e51b300c 	ldr	r3, [fp, #-12]
  13469c:	e2833c01 	add	r3, r3, #256	; 0x100
  1346a0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    buffConfig = &imx6ul_device->buffConfig;
  1346a4:	e51b300c 	ldr	r3, [fp, #-12]
  1346a8:	e28330a8 	add	r3, r3, #168	; 0xa8
  1346ac:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    for (int i=0; i<GET_ARRAY_NUM(imx6ul_device->gpio); i++)
  1346b0:	e3a03000 	mov	r3, #0
  1346b4:	e50b3008 	str	r3, [fp, #-8]
  1346b8:	ea00000b 	b	1346ec <rt_imx6ul_eth_init+0xb0>
    {
        ueth_gpioinit((void *)&imx6ul_device->gpio[i], sizeof(imx6ul_device->gpio[i]));
  1346bc:	e51b3008 	ldr	r3, [fp, #-8]
  1346c0:	e3a0201c 	mov	r2, #28
  1346c4:	e0030392 	mul	r3, r2, r3
  1346c8:	e2833e12 	add	r3, r3, #288	; 0x120
  1346cc:	e51b200c 	ldr	r2, [fp, #-12]
  1346d0:	e0823003 	add	r3, r2, r3
  1346d4:	e3a0101c 	mov	r1, #28
  1346d8:	e1a00003 	mov	r0, r3
  1346dc:	ebff3eac 	bl	104194 <ueth_gpioinit>
    for (int i=0; i<GET_ARRAY_NUM(imx6ul_device->gpio); i++)
  1346e0:	e51b3008 	ldr	r3, [fp, #-8]
  1346e4:	e2833001 	add	r3, r3, #1
  1346e8:	e50b3008 	str	r3, [fp, #-8]
  1346ec:	e51b3008 	ldr	r3, [fp, #-8]
  1346f0:	e3530008 	cmp	r3, #8
  1346f4:	9afffff0 	bls	1346bc <rt_imx6ul_eth_init+0x80>
    }
    
    IOMUXC_GPR_Type *GPR1 = (IOMUXC_GPR_Type *)ueth_remap((void *)IOMUXC_GPR, UETH_REMAP, 0x1000);
  1346f8:	e3a02a01 	mov	r2, #4096	; 0x1000
  1346fc:	e3a01001 	mov	r1, #1
  134700:	e3a00901 	mov	r0, #16384	; 0x4000
  134704:	e340020e 	movt	r0, #526	; 0x20e
  134708:	ebff3e6d 	bl	1040c4 <ueth_remap>
  13470c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
    if(imx6ul_device->mac_num == 1)
  134710:	e51b300c 	ldr	r3, [fp, #-12]
  134714:	e59330a4 	ldr	r3, [r3, #164]	; 0xa4
  134718:	e3530001 	cmp	r3, #1
  13471c:	1a00000c 	bne	134754 <rt_imx6ul_eth_init+0x118>
    {
        reg_value = GPR1->GPR1;
  134720:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  134724:	e5933004 	ldr	r3, [r3, #4]
  134728:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        reg_value &= ~(IOMUXC_GPR_GPR1_ENET1_CLK_SEL_MASK
  13472c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  134730:	e3c33a02 	bic	r3, r3, #8192	; 0x2000
  134734:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
                    | IOMUXC_GPR_GPR1_ENET1_CLK_SEL_MASK);
        reg_value |=  IOMUXC_GPR_GPR1_ENET1_TX_CLK_DIR(1);
  134738:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  13473c:	e3833802 	orr	r3, r3, #131072	; 0x20000
  134740:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        reg_value |=  IOMUXC_GPR_GPR1_ENET1_CLK_SEL(0);
        GPR1->GPR1 = reg_value;
  134744:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  134748:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  13474c:	e5832004 	str	r2, [r3, #4]
  134750:	ea00000f 	b	134794 <rt_imx6ul_eth_init+0x158>
    }
    else if(imx6ul_device->mac_num == 2)
  134754:	e51b300c 	ldr	r3, [fp, #-12]
  134758:	e59330a4 	ldr	r3, [r3, #164]	; 0xa4
  13475c:	e3530002 	cmp	r3, #2
  134760:	1a00000b 	bne	134794 <rt_imx6ul_eth_init+0x158>
    {
        reg_value = GPR1->GPR1;
  134764:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  134768:	e5933004 	ldr	r3, [r3, #4]
  13476c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        reg_value &= ~(IOMUXC_GPR_GPR1_ENET2_CLK_SEL_MASK
  134770:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  134774:	e3c33901 	bic	r3, r3, #16384	; 0x4000
  134778:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
                    | IOMUXC_GPR_GPR1_ENET2_CLK_SEL_MASK);
        reg_value |=  IOMUXC_GPR_GPR1_ENET2_TX_CLK_DIR(1);
  13477c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  134780:	e3833701 	orr	r3, r3, #262144	; 0x40000
  134784:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        reg_value |=  IOMUXC_GPR_GPR1_ENET2_CLK_SEL(0);
        GPR1->GPR1 = reg_value;
  134788:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  13478c:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  134790:	e5832004 	str	r2, [r3, #4]
    } 

    // ENET_InitModuleClock();
    ueth_init_clock();
  134794:	ebff3eac 	bl	10424c <ueth_init_clock>
    ENET_GetDefaultConfig(config);
  134798:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  13479c:	eb000422 	bl	13582c <ENET_GetDefaultConfig>
    config->interrupt |= (ENET_RX_INTERRUPT);
  1347a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1347a4:	e5933004 	ldr	r3, [r3, #4]
  1347a8:	e3832403 	orr	r2, r3, #50331648	; 0x3000000
  1347ac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1347b0:	e5832004 	str	r2, [r3, #4]
    state = enet_buffer_init(buffConfig);
  1347b4:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  1347b8:	ebfffee9 	bl	134364 <enet_buffer_init>
  1347bc:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
    if(state != RT_EOK)
  1347c0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1347c4:	e3530000 	cmp	r3, #0
  1347c8:	0a000001 	beq	1347d4 <rt_imx6ul_eth_init+0x198>
    {
        return state;
  1347cc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1347d0:	ea000015 	b	13482c <rt_imx6ul_eth_init+0x1f0>
    }
    ENET_Init(base_addr, handle, config, buffConfig, imx6ul_device->dev_addr, SYS_CLOCK_HZ);
  1347d4:	e51b300c 	ldr	r3, [fp, #-12]
  1347d8:	e2832078 	add	r2, r3, #120	; 0x78
  1347dc:	e3a03d52 	mov	r3, #5248	; 0x1480
  1347e0:	e34033ef 	movt	r3, #1007	; 0x3ef
  1347e4:	e58d3004 	str	r3, [sp, #4]
  1347e8:	e58d2000 	str	r2, [sp]
  1347ec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1347f0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1347f4:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  1347f8:	e51b0010 	ldr	r0, [fp, #-16]
  1347fc:	eb00042e 	bl	1358bc <ENET_Init>
    ENET_ActiveRead(base_addr);
  134800:	e51b0010 	ldr	r0, [fp, #-16]
  134804:	ebfffe5c 	bl	13417c <ENET_ActiveRead>

    // ENET_DisableInterrupts(base_addr,ENET_RX_INTERRUPT);
    // rt_hw_interrupt_install(imx6ul_device->irq_num, (rt_isr_handler_t)ENET_DriverIRQHandler, (void *)base_addr,imx6ul_device->irq_name);     
    // rt_hw_interrupt_umask(imx6ul_device->irq_num);
#ifndef POLL_INT
    ueth_hw_interrupt_install(imx6ul_device->irq_num, (void *)imx6ul_device->enet_phy_base_addr);
  134808:	e51b300c 	ldr	r3, [fp, #-12]
  13480c:	e5933094 	ldr	r3, [r3, #148]	; 0x94
  134810:	e1a02003 	mov	r2, r3
  134814:	e51b300c 	ldr	r3, [fp, #-12]
  134818:	e593309c 	ldr	r3, [r3, #156]	; 0x9c
  13481c:	e1a01003 	mov	r1, r3
  134820:	e1a00002 	mov	r0, r2
  134824:	ebff3eae 	bl	1042e4 <ueth_hw_interrupt_install>
#endif

    return RT_EOK;
  134828:	e3a03000 	mov	r3, #0
}
  13482c:	e1a00003 	mov	r0, r3
  134830:	e24bd004 	sub	sp, fp, #4
  134834:	e8bd8800 	pop	{fp, pc}

00134838 <rt_imx6ul_eth_control>:

static rt_err_t rt_imx6ul_eth_control(rt_device_t dev, int cmd, void *args)
{
  134838:	e92d4800 	push	{fp, lr}
  13483c:	e28db004 	add	fp, sp, #4
  134840:	e24dd028 	sub	sp, sp, #40	; 0x28
  134844:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  134848:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  13484c:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)dev;
  134850:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  134854:	e50b3008 	str	r3, [fp, #-8]

    
    switch (cmd)
  134858:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  13485c:	e3530001 	cmp	r3, #1
  134860:	0a000000 	beq	134868 <rt_imx6ul_eth_control+0x30>
            return -RT_ERROR;
        }
        break;

    default :
        break;
  134864:	ea000070 	b	134a2c <rt_imx6ul_eth_control+0x1f4>
        if (args)
  134868:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  13486c:	e3530000 	cmp	r3, #0
  134870:	0a00006b 	beq	134a24 <rt_imx6ul_eth_control+0x1ec>
            rt_uint32_t uid_crc = 0;
  134874:	e3a03000 	mov	r3, #0
  134878:	e50b300c 	str	r3, [fp, #-12]
            ocotp_base = (OCOTP_Type *)ueth_remap((void*)OCOTP_BASE, UETH_REMAP, 0x1000);
  13487c:	e3a02a01 	mov	r2, #4096	; 0x1000
  134880:	e3a01001 	mov	r1, #1
  134884:	e3a00903 	mov	r0, #49152	; 0xc000
  134888:	e340021b 	movt	r0, #539	; 0x21b
  13488c:	ebff3e0c 	bl	1040c4 <ueth_remap>
  134890:	e50b0010 	str	r0, [fp, #-16]
            uid[0] = ocotp_base->CFG0;
  134894:	e51b3010 	ldr	r3, [fp, #-16]
  134898:	e5933410 	ldr	r3, [r3, #1040]	; 0x410
  13489c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
            uid[1] = ocotp_base->CFG1;
  1348a0:	e51b3010 	ldr	r3, [fp, #-16]
  1348a4:	e5933420 	ldr	r3, [r3, #1056]	; 0x420
  1348a8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
            ueth_remap(ocotp_base, UETH_UNMAP, 0);
  1348ac:	e3a02000 	mov	r2, #0
  1348b0:	e3a01002 	mov	r1, #2
  1348b4:	e51b0010 	ldr	r0, [fp, #-16]
  1348b8:	ebff3e01 	bl	1040c4 <ueth_remap>
            LOG_D("UNIQUE_ID is %x%x",uid[0], uid[1]);
  1348bc:	e30900d8 	movw	r0, #37080	; 0x90d8
  1348c0:	e3400014 	movt	r0, #20
  1348c4:	ebff3a12 	bl	103114 <rt_kprintf>
  1348c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1348cc:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1348d0:	e1a01003 	mov	r1, r3
  1348d4:	e30901e0 	movw	r0, #37344	; 0x91e0
  1348d8:	e3400014 	movt	r0, #20
  1348dc:	ebff3a0c 	bl	103114 <rt_kprintf>
  1348e0:	e30900fc 	movw	r0, #37116	; 0x90fc
  1348e4:	e3400014 	movt	r0, #20
  1348e8:	ebff3a09 	bl	103114 <rt_kprintf>
            uid_crc = uid[0] - uid[1];
  1348ec:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1348f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1348f4:	e0423003 	sub	r3, r2, r3
  1348f8:	e50b300c 	str	r3, [fp, #-12]
            LOG_D("UNIQUE_ID change to 32 bits %x", uid_crc);
  1348fc:	e30900d8 	movw	r0, #37080	; 0x90d8
  134900:	e3400014 	movt	r0, #20
  134904:	ebff3a02 	bl	103114 <rt_kprintf>
  134908:	e51b100c 	ldr	r1, [fp, #-12]
  13490c:	e30901f4 	movw	r0, #37364	; 0x91f4
  134910:	e3400014 	movt	r0, #20
  134914:	ebff39fe 	bl	103114 <rt_kprintf>
  134918:	e30900fc 	movw	r0, #37116	; 0x90fc
  13491c:	e3400014 	movt	r0, #20
  134920:	ebff39fb 	bl	103114 <rt_kprintf>
            if (imx6ul_device->enet_phy_base_addr == ENET1)
  134924:	e51b3008 	ldr	r3, [fp, #-8]
  134928:	e593209c 	ldr	r2, [r3, #156]	; 0x9c
  13492c:	e3a03902 	mov	r3, #32768	; 0x8000
  134930:	e3403218 	movt	r3, #536	; 0x218
  134934:	e1520003 	cmp	r2, r3
  134938:	1a000019 	bne	1349a4 <rt_imx6ul_eth_control+0x16c>
                imx6ul_device->dev_addr[0] = 0xa8;
  13493c:	e51b3008 	ldr	r3, [fp, #-8]
  134940:	e3e02057 	mvn	r2, #87	; 0x57
  134944:	e5c32078 	strb	r2, [r3, #120]	; 0x78
                imx6ul_device->dev_addr[1] = 0x5e;
  134948:	e51b3008 	ldr	r3, [fp, #-8]
  13494c:	e3a0205e 	mov	r2, #94	; 0x5e
  134950:	e5c32079 	strb	r2, [r3, #121]	; 0x79
                imx6ul_device->dev_addr[2] = 0x45;
  134954:	e51b3008 	ldr	r3, [fp, #-8]
  134958:	e3a02045 	mov	r2, #69	; 0x45
  13495c:	e5c3207a 	strb	r2, [r3, #122]	; 0x7a
                imx6ul_device->dev_addr[3] = (uid_crc>>16) & 0x7f;
  134960:	e51b300c 	ldr	r3, [fp, #-12]
  134964:	e1a03823 	lsr	r3, r3, #16
  134968:	e6ef3073 	uxtb	r3, r3
  13496c:	e203307f 	and	r3, r3, #127	; 0x7f
  134970:	e6ef2073 	uxtb	r2, r3
  134974:	e51b3008 	ldr	r3, [fp, #-8]
  134978:	e5c3207b 	strb	r2, [r3, #123]	; 0x7b
                imx6ul_device->dev_addr[4] = (uid_crc>>8) & 0xff;
  13497c:	e51b300c 	ldr	r3, [fp, #-12]
  134980:	e1a03423 	lsr	r3, r3, #8
  134984:	e6ef2073 	uxtb	r2, r3
  134988:	e51b3008 	ldr	r3, [fp, #-8]
  13498c:	e5c3207c 	strb	r2, [r3, #124]	; 0x7c
                imx6ul_device->dev_addr[5] = uid_crc & 0xff;
  134990:	e51b300c 	ldr	r3, [fp, #-12]
  134994:	e6ef2073 	uxtb	r2, r3
  134998:	e51b3008 	ldr	r3, [fp, #-8]
  13499c:	e5c3207d 	strb	r2, [r3, #125]	; 0x7d
  1349a0:	ea000018 	b	134a08 <rt_imx6ul_eth_control+0x1d0>
                imx6ul_device->dev_addr[0] = 0xa8;
  1349a4:	e51b3008 	ldr	r3, [fp, #-8]
  1349a8:	e3e02057 	mvn	r2, #87	; 0x57
  1349ac:	e5c32078 	strb	r2, [r3, #120]	; 0x78
                imx6ul_device->dev_addr[1] = 0x5e;
  1349b0:	e51b3008 	ldr	r3, [fp, #-8]
  1349b4:	e3a0205e 	mov	r2, #94	; 0x5e
  1349b8:	e5c32079 	strb	r2, [r3, #121]	; 0x79
                imx6ul_device->dev_addr[2] = 0x46;
  1349bc:	e51b3008 	ldr	r3, [fp, #-8]
  1349c0:	e3a02046 	mov	r2, #70	; 0x46
  1349c4:	e5c3207a 	strb	r2, [r3, #122]	; 0x7a
                imx6ul_device->dev_addr[3] = (uid_crc >> 16) & 0x7f;
  1349c8:	e51b300c 	ldr	r3, [fp, #-12]
  1349cc:	e1a03823 	lsr	r3, r3, #16
  1349d0:	e6ef3073 	uxtb	r3, r3
  1349d4:	e203307f 	and	r3, r3, #127	; 0x7f
  1349d8:	e6ef2073 	uxtb	r2, r3
  1349dc:	e51b3008 	ldr	r3, [fp, #-8]
  1349e0:	e5c3207b 	strb	r2, [r3, #123]	; 0x7b
                imx6ul_device->dev_addr[4] = (uid_crc >> 8) & 0xff;
  1349e4:	e51b300c 	ldr	r3, [fp, #-12]
  1349e8:	e1a03423 	lsr	r3, r3, #8
  1349ec:	e6ef2073 	uxtb	r2, r3
  1349f0:	e51b3008 	ldr	r3, [fp, #-8]
  1349f4:	e5c3207c 	strb	r2, [r3, #124]	; 0x7c
                imx6ul_device->dev_addr[5] = uid_crc & 0xff;
  1349f8:	e51b300c 	ldr	r3, [fp, #-12]
  1349fc:	e6ef2073 	uxtb	r2, r3
  134a00:	e51b3008 	ldr	r3, [fp, #-8]
  134a04:	e5c3207d 	strb	r2, [r3, #125]	; 0x7d
            memcpy(args, imx6ul_device->dev_addr, MAX_ADDR_LEN);
  134a08:	e51b3008 	ldr	r3, [fp, #-8]
  134a0c:	e2833078 	add	r3, r3, #120	; 0x78
  134a10:	e3a02006 	mov	r2, #6
  134a14:	e1a01003 	mov	r1, r3
  134a18:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  134a1c:	eb002e7a 	bl	14040c <memcpy>
        break;
  134a20:	ea000001 	b	134a2c <rt_imx6ul_eth_control+0x1f4>
            return -RT_ERROR;
  134a24:	e3e03000 	mvn	r3, #0
  134a28:	ea000000 	b	134a30 <rt_imx6ul_eth_control+0x1f8>
    }
    return RT_EOK;
  134a2c:	e3a03000 	mov	r3, #0
}
  134a30:	e1a00003 	mov	r0, r3
  134a34:	e24bd004 	sub	sp, fp, #4
  134a38:	e8bd8800 	pop	{fp, pc}

00134a3c <read_data_from_eth>:

static status_t read_data_from_eth(rt_device_t dev,void *read_data,uint16_t *read_length)
{
  134a3c:	e92d4800 	push	{fp, lr}
  134a40:	e28db004 	add	fp, sp, #4
  134a44:	e24dd038 	sub	sp, sp, #56	; 0x38
  134a48:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  134a4c:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  134a50:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
    status_t status = 0;
  134a54:	e3a03000 	mov	r3, #0
  134a58:	e50b3008 	str	r3, [fp, #-8]
    uint16_t length = 0;
  134a5c:	e3a03000 	mov	r3, #0
  134a60:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
    ENET_Type *base_addr = RT_NULL;
  134a64:	e3a03000 	mov	r3, #0
  134a68:	e50b300c 	str	r3, [fp, #-12]
    enet_config_t *config;
    enet_handle_t *handle;
    enet_buffer_config_t *buffConfig;
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)dev;
  134a6c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  134a70:	e50b3010 	str	r3, [fp, #-16]
    base_addr = imx6ul_device->enet_virtual_base_addr;
  134a74:	e51b3010 	ldr	r3, [fp, #-16]
  134a78:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  134a7c:	e50b300c 	str	r3, [fp, #-12]
    config = &imx6ul_device->config;
  134a80:	e51b3010 	ldr	r3, [fp, #-16]
  134a84:	e28330dc 	add	r3, r3, #220	; 0xdc
  134a88:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    handle = &imx6ul_device->handle;
  134a8c:	e51b3010 	ldr	r3, [fp, #-16]
  134a90:	e2833c01 	add	r3, r3, #256	; 0x100
  134a94:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    buffConfig = &imx6ul_device->buffConfig;
  134a98:	e51b3010 	ldr	r3, [fp, #-16]
  134a9c:	e28330a8 	add	r3, r3, #168	; 0xa8
  134aa0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    /* Get the Frame size */
    status = ENET_ReadFrame(base_addr,handle,config,read_data,&length);
  134aa4:	e24b301e 	sub	r3, fp, #30
  134aa8:	e58d3000 	str	r3, [sp]
  134aac:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  134ab0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  134ab4:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  134ab8:	e51b000c 	ldr	r0, [fp, #-12]
  134abc:	eb000834 	bl	136b94 <ENET_ReadFrame>
  134ac0:	e50b0008 	str	r0, [fp, #-8]
    if((status == kStatus_ENET_RxFrameEmpty)||(status == kStatus_ENET_RxFrameError))
  134ac4:	e51b3008 	ldr	r3, [fp, #-8]
  134ac8:	e3002fa2 	movw	r2, #4002	; 0xfa2
  134acc:	e1530002 	cmp	r3, r2
  134ad0:	0a000002 	beq	134ae0 <read_data_from_eth+0xa4>
  134ad4:	e51b3008 	ldr	r3, [fp, #-8]
  134ad8:	e3530efa 	cmp	r3, #4000	; 0xfa0
  134adc:	1a00001a 	bne	134b4c <read_data_from_eth+0x110>
    {
        ENET_EnableInterrupts(base_addr,ENET_RX_INTERRUPT);
  134ae0:	e3a01403 	mov	r1, #50331648	; 0x3000000
  134ae4:	e51b000c 	ldr	r0, [fp, #-12]
  134ae8:	ebfffdae 	bl	1341a8 <ENET_EnableInterrupts>
        if(status == kStatus_ENET_RxFrameError)
  134aec:	e51b3008 	ldr	r3, [fp, #-8]
  134af0:	e3530efa 	cmp	r3, #4000	; 0xfa0
  134af4:	1a00000e 	bne	134b34 <read_data_from_eth+0xf8>
        {
            /*recv error happend reinitialize mac*/
            ENET_Init(base_addr, handle, config, buffConfig, imx6ul_device->dev_addr, SYS_CLOCK_HZ);
  134af8:	e51b3010 	ldr	r3, [fp, #-16]
  134afc:	e2832078 	add	r2, r3, #120	; 0x78
  134b00:	e3a03d52 	mov	r3, #5248	; 0x1480
  134b04:	e34033ef 	movt	r3, #1007	; 0x3ef
  134b08:	e58d3004 	str	r3, [sp, #4]
  134b0c:	e58d2000 	str	r2, [sp]
  134b10:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  134b14:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  134b18:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  134b1c:	e51b000c 	ldr	r0, [fp, #-12]
  134b20:	eb000365 	bl	1358bc <ENET_Init>
            ENET_ActiveRead(base_addr);
  134b24:	e51b000c 	ldr	r0, [fp, #-12]
  134b28:	ebfffd93 	bl	13417c <ENET_ActiveRead>
            return kStatus_ENET_RxFrameError;
  134b2c:	e3a03efa 	mov	r3, #4000	; 0xfa0
  134b30:	ea000009 	b	134b5c <read_data_from_eth+0x120>
        }
        else if(status == kStatus_ENET_RxFrameEmpty)
  134b34:	e51b3008 	ldr	r3, [fp, #-8]
  134b38:	e3002fa2 	movw	r2, #4002	; 0xfa2
  134b3c:	e1530002 	cmp	r3, r2
  134b40:	1a000001 	bne	134b4c <read_data_from_eth+0x110>
        {
            return kStatus_ENET_RxFrameEmpty;
  134b44:	e3003fa2 	movw	r3, #4002	; 0xfa2
  134b48:	ea000003 	b	134b5c <read_data_from_eth+0x120>
        }
    }
    *read_length = length;
  134b4c:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  134b50:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134b54:	e1c320b0 	strh	r2, [r3]
    return status;
  134b58:	e51b3008 	ldr	r3, [fp, #-8]
}
  134b5c:	e1a00003 	mov	r0, r3
  134b60:	e24bd004 	sub	sp, fp, #4
  134b64:	e8bd8800 	pop	{fp, pc}

00134b68 <rt_imx6ul_eth_tx>:

#ifdef RT_USING_LWIP
/* transmit data*/
rt_err_t rt_imx6ul_eth_tx(rt_device_t dev, struct pbuf *p)
{
  134b68:	e92d4800 	push	{fp, lr}
  134b6c:	e28db004 	add	fp, sp, #4
  134b70:	e24dd030 	sub	sp, sp, #48	; 0x30
  134b74:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  134b78:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
    struct pbuf *q = RT_NULL;
  134b7c:	e3a03000 	mov	r3, #0
  134b80:	e50b3008 	str	r3, [fp, #-8]
    uint16_t offset = 0;
  134b84:	e3a03000 	mov	r3, #0
  134b88:	e14b30ba 	strh	r3, [fp, #-10]
    uint32_t last_flag = 0;
  134b8c:	e3a03000 	mov	r3, #0
  134b90:	e50b3010 	str	r3, [fp, #-16]
    status_t status;
    ENET_Type *base_addr = RT_NULL;
  134b94:	e3a03000 	mov	r3, #0
  134b98:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    enet_handle_t *handle;
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)dev;
  134b9c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  134ba0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    base_addr = imx6ul_device->enet_virtual_base_addr;
  134ba4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  134ba8:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  134bac:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    handle = &imx6ul_device->handle;
  134bb0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  134bb4:	e2833c01 	add	r3, r3, #256	; 0x100
  134bb8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(p);
  134bbc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  134bc0:	e3530000 	cmp	r3, #0
  134bc4:	1a000005 	bne	134be0 <rt_imx6ul_eth_tx+0x78>
  134bc8:	e3a02e1a 	mov	r2, #416	; 0x1a0
  134bcc:	e30913c0 	movw	r1, #37824	; 0x93c0
  134bd0:	e3401014 	movt	r1, #20
  134bd4:	e3090214 	movw	r0, #37396	; 0x9214
  134bd8:	e3400014 	movt	r0, #20
  134bdc:	ebff3a6d 	bl	103598 <rt_assert_handler>

    for(q = p;q != RT_NULL;q=q->next)
  134be0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  134be4:	e50b3008 	str	r3, [fp, #-8]
  134be8:	ea000020 	b	134c70 <rt_imx6ul_eth_tx+0x108>
    {
        if(q->next == RT_NULL)
  134bec:	e51b3008 	ldr	r3, [fp, #-8]
  134bf0:	e5933000 	ldr	r3, [r3]
  134bf4:	e3530000 	cmp	r3, #0
  134bf8:	1a000002 	bne	134c08 <rt_imx6ul_eth_tx+0xa0>
        {
            last_flag = 1;
  134bfc:	e3a03001 	mov	r3, #1
  134c00:	e50b3010 	str	r3, [fp, #-16]
  134c04:	ea000001 	b	134c10 <rt_imx6ul_eth_tx+0xa8>
        }
        else
        {
            last_flag = 0;
  134c08:	e3a03000 	mov	r3, #0
  134c0c:	e50b3010 	str	r3, [fp, #-16]
        }
        status = ENET_SendFrame(base_addr, handle, q->payload, q->len,last_flag);
  134c10:	e51b3008 	ldr	r3, [fp, #-8]
  134c14:	e5932004 	ldr	r2, [r3, #4]
  134c18:	e51b3008 	ldr	r3, [fp, #-8]
  134c1c:	e1d310ba 	ldrh	r1, [r3, #10]
  134c20:	e51b3010 	ldr	r3, [fp, #-16]
  134c24:	e58d3000 	str	r3, [sp]
  134c28:	e1a03001 	mov	r3, r1
  134c2c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  134c30:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  134c34:	eb0008a1 	bl	136ec0 <ENET_SendFrame>
  134c38:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0

        offset = offset + q->len;
  134c3c:	e51b3008 	ldr	r3, [fp, #-8]
  134c40:	e1d320ba 	ldrh	r2, [r3, #10]
  134c44:	e15b30ba 	ldrh	r3, [fp, #-10]
  134c48:	e0823003 	add	r3, r2, r3
  134c4c:	e14b30ba 	strh	r3, [fp, #-10]
        if(status == kStatus_Success)
  134c50:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  134c54:	e3530000 	cmp	r3, #0
  134c58:	0a000001 	beq	134c64 <rt_imx6ul_eth_tx+0xfc>
        {
        }
        else
        {
            return RT_ERROR;
  134c5c:	e3a03001 	mov	r3, #1
  134c60:	ea000015 	b	134cbc <rt_imx6ul_eth_tx+0x154>
    for(q = p;q != RT_NULL;q=q->next)
  134c64:	e51b3008 	ldr	r3, [fp, #-8]
  134c68:	e5933000 	ldr	r3, [r3]
  134c6c:	e50b3008 	str	r3, [fp, #-8]
  134c70:	e51b3008 	ldr	r3, [fp, #-8]
  134c74:	e3530000 	cmp	r3, #0
  134c78:	1affffdb 	bne	134bec <rt_imx6ul_eth_tx+0x84>
        }
    }
    if(offset > ENET_FRAME_MAX_FRAMELEN)
  134c7c:	e15b30ba 	ldrh	r3, [fp, #-10]
  134c80:	e30025ee 	movw	r2, #1518	; 0x5ee
  134c84:	e1530002 	cmp	r3, r2
  134c88:	9a00000a 	bls	134cb8 <rt_imx6ul_eth_tx+0x150>
    {
        LOG_E("net error send length %d exceed max length",offset);
  134c8c:	e3090118 	movw	r0, #37144	; 0x9118
  134c90:	e3400014 	movt	r0, #20
  134c94:	ebff391e 	bl	103114 <rt_kprintf>
  134c98:	e15b30ba 	ldrh	r3, [fp, #-10]
  134c9c:	e1a01003 	mov	r1, r3
  134ca0:	e3090218 	movw	r0, #37400	; 0x9218
  134ca4:	e3400014 	movt	r0, #20
  134ca8:	ebff3919 	bl	103114 <rt_kprintf>
  134cac:	e30900fc 	movw	r0, #37116	; 0x90fc
  134cb0:	e3400014 	movt	r0, #20
  134cb4:	ebff3916 	bl	103114 <rt_kprintf>
    }
    return RT_EOK;
  134cb8:	e3a03000 	mov	r3, #0
}
  134cbc:	e1a00003 	mov	r0, r3
  134cc0:	e24bd004 	sub	sp, fp, #4
  134cc4:	e8bd8800 	pop	{fp, pc}

00134cc8 <rt_imx6ul_eth_rx>:

struct pbuf *rt_imx6ul_eth_rx(rt_device_t dev)
{
  134cc8:	e92d4800 	push	{fp, lr}
  134ccc:	e28db004 	add	fp, sp, #4
  134cd0:	e24dd018 	sub	sp, sp, #24
  134cd4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    static struct pbuf *p_s = RT_NULL;
    struct pbuf *p = RT_NULL;
  134cd8:	e3a03000 	mov	r3, #0
  134cdc:	e50b3008 	str	r3, [fp, #-8]
    status_t status;
    uint16_t length = 0;
  134ce0:	e3a03000 	mov	r3, #0
  134ce4:	e14b30be 	strh	r3, [fp, #-14]

    if(p_s == RT_NULL)
  134ce8:	e30e3380 	movw	r3, #58240	; 0xe380
  134cec:	e3403014 	movt	r3, #20
  134cf0:	e5933000 	ldr	r3, [r3]
  134cf4:	e3530000 	cmp	r3, #0
  134cf8:	1a00000e 	bne	134d38 <rt_imx6ul_eth_rx+0x70>
    {
        p_s = pbuf_alloc(PBUF_RAW, ENET_FRAME_MAX_FRAMELEN, PBUF_POOL);
  134cfc:	e3a02003 	mov	r2, #3
  134d00:	e30015ee 	movw	r1, #1518	; 0x5ee
  134d04:	e3a00004 	mov	r0, #4
  134d08:	ebff9488 	bl	119f30 <pbuf_alloc>
  134d0c:	e1a02000 	mov	r2, r0
  134d10:	e30e3380 	movw	r3, #58240	; 0xe380
  134d14:	e3403014 	movt	r3, #20
  134d18:	e5832000 	str	r2, [r3]
        if(p_s == RT_NULL)
  134d1c:	e30e3380 	movw	r3, #58240	; 0xe380
  134d20:	e3403014 	movt	r3, #20
  134d24:	e5933000 	ldr	r3, [r3]
  134d28:	e3530000 	cmp	r3, #0
  134d2c:	1a000001 	bne	134d38 <rt_imx6ul_eth_rx+0x70>
        {
            return RT_NULL;
  134d30:	e3a03000 	mov	r3, #0
  134d34:	ea00002f 	b	134df8 <rt_imx6ul_eth_rx+0x130>
        }
    }
    p = p_s;
  134d38:	e30e3380 	movw	r3, #58240	; 0xe380
  134d3c:	e3403014 	movt	r3, #20
  134d40:	e5933000 	ldr	r3, [r3]
  134d44:	e50b3008 	str	r3, [fp, #-8]
    status = read_data_from_eth(dev,p->payload,&length);
  134d48:	e51b3008 	ldr	r3, [fp, #-8]
  134d4c:	e5933004 	ldr	r3, [r3, #4]
  134d50:	e24b200e 	sub	r2, fp, #14
  134d54:	e1a01003 	mov	r1, r3
  134d58:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  134d5c:	ebffff36 	bl	134a3c <read_data_from_eth>
  134d60:	e50b000c 	str	r0, [fp, #-12]
    if(status == kStatus_ENET_RxFrameEmpty)
  134d64:	e51b300c 	ldr	r3, [fp, #-12]
  134d68:	e3002fa2 	movw	r2, #4002	; 0xfa2
  134d6c:	e1530002 	cmp	r3, r2
  134d70:	1a000001 	bne	134d7c <rt_imx6ul_eth_rx+0xb4>
    {
        return RT_NULL;
  134d74:	e3a03000 	mov	r3, #0
  134d78:	ea00001e 	b	134df8 <rt_imx6ul_eth_rx+0x130>
    }
    else if(status == kStatus_ENET_RxFrameError)
  134d7c:	e51b300c 	ldr	r3, [fp, #-12]
  134d80:	e3530efa 	cmp	r3, #4000	; 0xfa0
  134d84:	1a000001 	bne	134d90 <rt_imx6ul_eth_rx+0xc8>
    {
        return RT_NULL;
  134d88:	e3a03000 	mov	r3, #0
  134d8c:	ea000019 	b	134df8 <rt_imx6ul_eth_rx+0x130>
    }
    if(length > ENET_FRAME_MAX_FRAMELEN)
  134d90:	e15b30be 	ldrh	r3, [fp, #-14]
  134d94:	e30025ee 	movw	r2, #1518	; 0x5ee
  134d98:	e1530002 	cmp	r3, r2
  134d9c:	9a00000c 	bls	134dd4 <rt_imx6ul_eth_rx+0x10c>
    {
        LOG_E("net error recv length %d exceed max length",length);
  134da0:	e3090118 	movw	r0, #37144	; 0x9118
  134da4:	e3400014 	movt	r0, #20
  134da8:	ebff38d9 	bl	103114 <rt_kprintf>
  134dac:	e15b30be 	ldrh	r3, [fp, #-14]
  134db0:	e1a01003 	mov	r1, r3
  134db4:	e3090244 	movw	r0, #37444	; 0x9244
  134db8:	e3400014 	movt	r0, #20
  134dbc:	ebff38d4 	bl	103114 <rt_kprintf>
  134dc0:	e30900fc 	movw	r0, #37116	; 0x90fc
  134dc4:	e3400014 	movt	r0, #20
  134dc8:	ebff38d1 	bl	103114 <rt_kprintf>
        return RT_NULL;
  134dcc:	e3a03000 	mov	r3, #0
  134dd0:	ea000008 	b	134df8 <rt_imx6ul_eth_rx+0x130>
    }
    pbuf_realloc(p, length);
  134dd4:	e15b30be 	ldrh	r3, [fp, #-14]
  134dd8:	e1a01003 	mov	r1, r3
  134ddc:	e51b0008 	ldr	r0, [fp, #-8]
  134de0:	ebff9610 	bl	11a628 <pbuf_realloc>
    p_s = RT_NULL;
  134de4:	e30e3380 	movw	r3, #58240	; 0xe380
  134de8:	e3403014 	movt	r3, #20
  134dec:	e3a02000 	mov	r2, #0
  134df0:	e5832000 	str	r2, [r3]
    return p;
  134df4:	e51b3008 	ldr	r3, [fp, #-8]
}
  134df8:	e1a00003 	mov	r0, r3
  134dfc:	e24bd004 	sub	sp, fp, #4
  134e00:	e8bd8800 	pop	{fp, pc}

00134e04 <rt_imx6ul_eth_open>:
#endif

static rt_err_t rt_imx6ul_eth_open(rt_device_t dev, rt_uint16_t oflag)
{
  134e04:	e92d4800 	push	{fp, lr}
  134e08:	e28db004 	add	fp, sp, #4
  134e0c:	e24dd010 	sub	sp, sp, #16
  134e10:	e50b0010 	str	r0, [fp, #-16]
  134e14:	e1a03001 	mov	r3, r1
  134e18:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)dev;
  134e1c:	e51b3010 	ldr	r3, [fp, #-16]
  134e20:	e50b3008 	str	r3, [fp, #-8]
    ENET_Type *base_addr = imx6ul_device->enet_virtual_base_addr;
  134e24:	e51b3008 	ldr	r3, [fp, #-8]
  134e28:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  134e2c:	e50b300c 	str	r3, [fp, #-12]
    ENET_EnableInterrupts(base_addr,ENET_RX_INTERRUPT);
  134e30:	e3a01403 	mov	r1, #50331648	; 0x3000000
  134e34:	e51b000c 	ldr	r0, [fp, #-12]
  134e38:	ebfffcda 	bl	1341a8 <ENET_EnableInterrupts>

    return RT_EOK;
  134e3c:	e3a03000 	mov	r3, #0
}
  134e40:	e1a00003 	mov	r0, r3
  134e44:	e24bd004 	sub	sp, fp, #4
  134e48:	e8bd8800 	pop	{fp, pc}

00134e4c <rt_imx6ul_eth_close>:

static rt_err_t rt_imx6ul_eth_close(rt_device_t dev)
{
  134e4c:	e92d4800 	push	{fp, lr}
  134e50:	e28db004 	add	fp, sp, #4
  134e54:	e24dd010 	sub	sp, sp, #16
  134e58:	e50b0010 	str	r0, [fp, #-16]
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)dev;
  134e5c:	e51b3010 	ldr	r3, [fp, #-16]
  134e60:	e50b3008 	str	r3, [fp, #-8]
    ENET_DisableInterrupts(imx6ul_device->enet_virtual_base_addr,ENET_RX_INTERRUPT);
  134e64:	e51b3008 	ldr	r3, [fp, #-8]
  134e68:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  134e6c:	e3a01403 	mov	r1, #50331648	; 0x3000000
  134e70:	e1a00003 	mov	r0, r3
  134e74:	ebfffcda 	bl	1341e4 <ENET_DisableInterrupts>
    return RT_EOK;
  134e78:	e3a03000 	mov	r3, #0
}
  134e7c:	e1a00003 	mov	r0, r3
  134e80:	e24bd004 	sub	sp, fp, #4
  134e84:	e8bd8800 	pop	{fp, pc}

00134e88 <rt_imx6ul_eth_read>:

static rt_size_t rt_imx6ul_eth_read(rt_device_t dev, rt_off_t pos, void *buffer, rt_size_t size)
{
  134e88:	e92d4800 	push	{fp, lr}
  134e8c:	e28db004 	add	fp, sp, #4
  134e90:	e24dd018 	sub	sp, sp, #24
  134e94:	e50b0010 	str	r0, [fp, #-16]
  134e98:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  134e9c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  134ea0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    uint16_t length = 0;
  134ea4:	e3a03000 	mov	r3, #0
  134ea8:	e14b30ba 	strh	r3, [fp, #-10]
    status_t status;
    if(!buffer) 
  134eac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  134eb0:	e3530000 	cmp	r3, #0
  134eb4:	1a00000c 	bne	134eec <rt_imx6ul_eth_read+0x64>
    {
        LOG_E("eth read invalid parameter buffer %p size %d",buffer,size);
  134eb8:	e3090118 	movw	r0, #37144	; 0x9118
  134ebc:	e3400014 	movt	r0, #20
  134ec0:	ebff3893 	bl	103114 <rt_kprintf>
  134ec4:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  134ec8:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  134ecc:	e3090270 	movw	r0, #37488	; 0x9270
  134ed0:	e3400014 	movt	r0, #20
  134ed4:	ebff388e 	bl	103114 <rt_kprintf>
  134ed8:	e30900fc 	movw	r0, #37116	; 0x90fc
  134edc:	e3400014 	movt	r0, #20
  134ee0:	ebff388b 	bl	103114 <rt_kprintf>
        return 0;
  134ee4:	e3a03000 	mov	r3, #0
  134ee8:	ea00000f 	b	134f2c <rt_imx6ul_eth_read+0xa4>
    }
    status = read_data_from_eth(dev,buffer,&length);
  134eec:	e24b300a 	sub	r3, fp, #10
  134ef0:	e1a02003 	mov	r2, r3
  134ef4:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  134ef8:	e51b0010 	ldr	r0, [fp, #-16]
  134efc:	ebfffece 	bl	134a3c <read_data_from_eth>
  134f00:	e50b0008 	str	r0, [fp, #-8]
    if((status == kStatus_ENET_RxFrameEmpty) || (status == kStatus_ENET_RxFrameError))
  134f04:	e51b3008 	ldr	r3, [fp, #-8]
  134f08:	e3002fa2 	movw	r2, #4002	; 0xfa2
  134f0c:	e1530002 	cmp	r3, r2
  134f10:	0a000002 	beq	134f20 <rt_imx6ul_eth_read+0x98>
  134f14:	e51b3008 	ldr	r3, [fp, #-8]
  134f18:	e3530efa 	cmp	r3, #4000	; 0xfa0
  134f1c:	1a000001 	bne	134f28 <rt_imx6ul_eth_read+0xa0>
    {
        return 0;
  134f20:	e3a03000 	mov	r3, #0
  134f24:	ea000000 	b	134f2c <rt_imx6ul_eth_read+0xa4>
    }
    return (rt_size_t)length;
  134f28:	e15b30ba 	ldrh	r3, [fp, #-10]
}
  134f2c:	e1a00003 	mov	r0, r3
  134f30:	e24bd004 	sub	sp, fp, #4
  134f34:	e8bd8800 	pop	{fp, pc}

00134f38 <rt_imx6ul_eth_write>:

static rt_size_t rt_imx6ul_eth_write(rt_device_t dev, rt_off_t pos, const void *buffer, rt_size_t size)
{
  134f38:	e92d4800 	push	{fp, lr}
  134f3c:	e28db004 	add	fp, sp, #4
  134f40:	e24dd028 	sub	sp, sp, #40	; 0x28
  134f44:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  134f48:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  134f4c:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  134f50:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    status_t status;
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)dev;
  134f54:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  134f58:	e50b3008 	str	r3, [fp, #-8]
    ENET_Type *base_addr = imx6ul_device->enet_virtual_base_addr;
  134f5c:	e51b3008 	ldr	r3, [fp, #-8]
  134f60:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  134f64:	e50b300c 	str	r3, [fp, #-12]
    enet_handle_t *handle = &imx6ul_device->handle;
  134f68:	e51b3008 	ldr	r3, [fp, #-8]
  134f6c:	e2833c01 	add	r3, r3, #256	; 0x100
  134f70:	e50b3010 	str	r3, [fp, #-16]

    if((!buffer) || (size > ENET_FRAME_MAX_FRAMELEN))
  134f74:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  134f78:	e3530000 	cmp	r3, #0
  134f7c:	0a000003 	beq	134f90 <rt_imx6ul_eth_write+0x58>
  134f80:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  134f84:	e30025ee 	movw	r2, #1518	; 0x5ee
  134f88:	e1530002 	cmp	r3, r2
  134f8c:	9a00000a 	bls	134fbc <rt_imx6ul_eth_write+0x84>
    {
        LOG_E("eth write invalid parameter buffer %p size %d",buffer,size);
  134f90:	e3090118 	movw	r0, #37144	; 0x9118
  134f94:	e3400014 	movt	r0, #20
  134f98:	ebff385d 	bl	103114 <rt_kprintf>
  134f9c:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  134fa0:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  134fa4:	e30902a0 	movw	r0, #37536	; 0x92a0
  134fa8:	e3400014 	movt	r0, #20
  134fac:	ebff3858 	bl	103114 <rt_kprintf>
  134fb0:	e30900fc 	movw	r0, #37116	; 0x90fc
  134fb4:	e3400014 	movt	r0, #20
  134fb8:	ebff3855 	bl	103114 <rt_kprintf>
    }
    status = ENET_SendFrame(base_addr, handle, buffer, size,1);
  134fbc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  134fc0:	e6ff2073 	uxth	r2, r3
  134fc4:	e3a03001 	mov	r3, #1
  134fc8:	e58d3000 	str	r3, [sp]
  134fcc:	e1a03002 	mov	r3, r2
  134fd0:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  134fd4:	e51b1010 	ldr	r1, [fp, #-16]
  134fd8:	e51b000c 	ldr	r0, [fp, #-12]
  134fdc:	eb0007b7 	bl	136ec0 <ENET_SendFrame>
  134fe0:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    if(status != kStatus_Success)
  134fe4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  134fe8:	e3530000 	cmp	r3, #0
  134fec:	0a000001 	beq	134ff8 <rt_imx6ul_eth_write+0xc0>
    {
        return RT_ERROR;
  134ff0:	e3a03001 	mov	r3, #1
  134ff4:	ea000000 	b	134ffc <rt_imx6ul_eth_write+0xc4>
    }

    return RT_EOK;
  134ff8:	e3a03000 	mov	r3, #0
}
  134ffc:	e1a00003 	mov	r0, r3
  135000:	e24bd004 	sub	sp, fp, #4
  135004:	e8bd8800 	pop	{fp, pc}

00135008 <get_instance_by_base>:

int32_t get_instance_by_base(void *base)
{
  135008:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  13500c:	e28db000 	add	fp, sp, #0
  135010:	e24dd014 	sub	sp, sp, #20
  135014:	e50b0010 	str	r0, [fp, #-16]
    int32_t i = 0;
  135018:	e3a03000 	mov	r3, #0
  13501c:	e50b3008 	str	r3, [fp, #-8]
    int32_t instance = 0;
  135020:	e3a03000 	mov	r3, #0
  135024:	e50b300c 	str	r3, [fp, #-12]
    for(i = 0; i < DEV_ENET_MAX; i ++)
  135028:	e3a03000 	mov	r3, #0
  13502c:	e50b3008 	str	r3, [fp, #-8]
  135030:	ea00000d 	b	13506c <get_instance_by_base+0x64>
    {
        if((void *)_imx6ul_eth_device[i].enet_virtual_base_addr == base)
  135034:	e30d3070 	movw	r3, #53360	; 0xd070
  135038:	e3403014 	movt	r3, #20
  13503c:	e51b2008 	ldr	r2, [fp, #-8]
  135040:	e3a01f8a 	mov	r1, #552	; 0x228
  135044:	e0020291 	mul	r2, r1, r2
  135048:	e0833002 	add	r3, r3, r2
  13504c:	e28330a0 	add	r3, r3, #160	; 0xa0
  135050:	e5933000 	ldr	r3, [r3]
  135054:	e51b2010 	ldr	r2, [fp, #-16]
  135058:	e1520003 	cmp	r2, r3
  13505c:	0a000006 	beq	13507c <get_instance_by_base+0x74>
    for(i = 0; i < DEV_ENET_MAX; i ++)
  135060:	e51b3008 	ldr	r3, [fp, #-8]
  135064:	e2833001 	add	r3, r3, #1
  135068:	e50b3008 	str	r3, [fp, #-8]
  13506c:	e51b3008 	ldr	r3, [fp, #-8]
  135070:	e3530000 	cmp	r3, #0
  135074:	daffffee 	ble	135034 <get_instance_by_base+0x2c>
  135078:	ea000000 	b	135080 <get_instance_by_base+0x78>
        {
            break;
  13507c:	e320f000 	nop	{0}
        }
    }
    if(i == DEV_ENET_MAX)
  135080:	e51b3008 	ldr	r3, [fp, #-8]
  135084:	e3530001 	cmp	r3, #1
  135088:	1a000001 	bne	135094 <get_instance_by_base+0x8c>
    {
        return -1;
  13508c:	e3e03000 	mvn	r3, #0
  135090:	ea000000 	b	135098 <get_instance_by_base+0x90>
    }
    return instance;
  135094:	e51b300c 	ldr	r3, [fp, #-12]
    
}
  135098:	e1a00003 	mov	r0, r3
  13509c:	e28bd000 	add	sp, fp, #0
  1350a0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1350a4:	e12fff1e 	bx	lr

001350a8 <ueth_rx_interrupt_handle>:

static void* ueth_rx_interrupt_handle(ENET_Type *base)
{
  1350a8:	e92d4800 	push	{fp, lr}
  1350ac:	e28db004 	add	fp, sp, #4
  1350b0:	e24dd010 	sub	sp, sp, #16
  1350b4:	e50b0010 	str	r0, [fp, #-16]
    /* Clear the transmit interrupt event. */
    base->EIR = ENET_RX_INTERRUPT;
  1350b8:	e51b3010 	ldr	r3, [fp, #-16]
  1350bc:	e3a02403 	mov	r2, #50331648	; 0x3000000
  1350c0:	e5832004 	str	r2, [r3, #4]
    int32_t instance = 0;
  1350c4:	e3a03000 	mov	r3, #0
  1350c8:	e50b3008 	str	r3, [fp, #-8]
    instance = get_instance_by_base(base);
  1350cc:	e51b0010 	ldr	r0, [fp, #-16]
  1350d0:	ebffffcc 	bl	135008 <get_instance_by_base>
  1350d4:	e50b0008 	str	r0, [fp, #-8]
    if(instance == -1)
  1350d8:	e51b3008 	ldr	r3, [fp, #-8]
  1350dc:	e3730001 	cmn	r3, #1
  1350e0:	1a00000a 	bne	135110 <ueth_rx_interrupt_handle+0x68>
    {
        LOG_E("interrput match base addr error");
  1350e4:	e3090118 	movw	r0, #37144	; 0x9118
  1350e8:	e3400014 	movt	r0, #20
  1350ec:	ebff3808 	bl	103114 <rt_kprintf>
  1350f0:	e30902d0 	movw	r0, #37584	; 0x92d0
  1350f4:	e3400014 	movt	r0, #20
  1350f8:	ebff3805 	bl	103114 <rt_kprintf>
  1350fc:	e30900fc 	movw	r0, #37116	; 0x90fc
  135100:	e3400014 	movt	r0, #20
  135104:	ebff3802 	bl	103114 <rt_kprintf>
        return RT_NULL;
  135108:	e3a03000 	mov	r3, #0
  13510c:	ea000005 	b	135128 <ueth_rx_interrupt_handle+0x80>
    }
    return (void*)&(_imx6ul_eth_device[instance].parent);
  135110:	e51b3008 	ldr	r3, [fp, #-8]
  135114:	e3a02f8a 	mov	r2, #552	; 0x228
  135118:	e0020392 	mul	r2, r2, r3
  13511c:	e30d3070 	movw	r3, #53360	; 0xd070
  135120:	e3403014 	movt	r3, #20
  135124:	e0823003 	add	r3, r2, r3
}
  135128:	e1a00003 	mov	r0, r3
  13512c:	e24bd004 	sub	sp, fp, #4
  135130:	e8bd8800 	pop	{fp, pc}

00135134 <ueth_rx_interrupt_detect>:

int eth_init_done = 0;
void* ueth_rx_interrupt_detect(void) {
  135134:	e92d4800 	push	{fp, lr}
  135138:	e28db004 	add	fp, sp, #4
  13513c:	e24dd008 	sub	sp, sp, #8
    ENET_Type *base = _imx6ul_eth_device[0].enet_virtual_base_addr;
  135140:	e30d3070 	movw	r3, #53360	; 0xd070
  135144:	e3403014 	movt	r3, #20
  135148:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  13514c:	e50b3008 	str	r3, [fp, #-8]
            ENET_DisableInterrupts(base, ENET_RX_INTERRUPT);
            return ueth_rx_interrupt_handle(base);
        }
    }
#else
    ueth_int_recv();
  135150:	ebff3ba5 	bl	103fec <ueth_int_recv>
    return ueth_rx_interrupt_handle(base);
  135154:	e51b0008 	ldr	r0, [fp, #-8]
  135158:	ebffffd2 	bl	1350a8 <ueth_rx_interrupt_handle>
  13515c:	e1a03000 	mov	r3, r0
#endif
}
  135160:	e1a00003 	mov	r0, r3
  135164:	e24bd004 	sub	sp, fp, #4
  135168:	e8bd8800 	pop	{fp, pc}

0013516c <phy_detect_thread_entry>:

/*phy link detect thread*/
static void phy_detect_thread_entry(void *param)
{
  13516c:	e92d4800 	push	{fp, lr}
  135170:	e28db004 	add	fp, sp, #4
  135174:	e24dd020 	sub	sp, sp, #32
  135178:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
    bool link = false;
  13517c:	e3a03000 	mov	r3, #0
  135180:	e54b300d 	strb	r3, [fp, #-13]
    phy_speed_t speed;
    phy_duplex_t duplex;
    ENET_Type *base_addr = RT_NULL;
  135184:	e3a03000 	mov	r3, #0
  135188:	e50b3008 	str	r3, [fp, #-8]
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)param;
  13518c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  135190:	e50b300c 	str	r3, [fp, #-12]
    base_addr = imx6ul_device->enet_virtual_base_addr;
  135194:	e51b300c 	ldr	r3, [fp, #-12]
  135198:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  13519c:	e50b3008 	str	r3, [fp, #-8]

    phy_reset(imx6ul_device->phy_base_addr,imx6ul_device->phy_gpio_pin);
  1351a0:	e51b300c 	ldr	r3, [fp, #-12]
  1351a4:	e593221c 	ldr	r2, [r3, #540]	; 0x21c
  1351a8:	e51b300c 	ldr	r3, [fp, #-12]
  1351ac:	e5933220 	ldr	r3, [r3, #544]	; 0x220
  1351b0:	e1a01003 	mov	r1, r3
  1351b4:	e1a00002 	mov	r0, r2
  1351b8:	eb00096f 	bl	13777c <phy_reset>
    PHY_Init(base_addr, imx6ul_device->phy_num, SYS_CLOCK_HZ,imx6ul_device->phy_id);
  1351bc:	e51b300c 	ldr	r3, [fp, #-12]
  1351c0:	e5d33098 	ldrb	r3, [r3, #152]	; 0x98
  1351c4:	e1a01003 	mov	r1, r3
  1351c8:	e51b300c 	ldr	r3, [fp, #-12]
  1351cc:	e5933224 	ldr	r3, [r3, #548]	; 0x224
  1351d0:	e3a02d52 	mov	r2, #5248	; 0x1480
  1351d4:	e34023ef 	movt	r2, #1007	; 0x3ef
  1351d8:	e51b0008 	ldr	r0, [fp, #-8]
  1351dc:	eb0009da 	bl	13794c <PHY_Init>
    PHY_GetLinkStatus(base_addr, imx6ul_device->phy_num, &link);
  1351e0:	e51b300c 	ldr	r3, [fp, #-12]
  1351e4:	e5d33098 	ldrb	r3, [r3, #152]	; 0x98
  1351e8:	e1a01003 	mov	r1, r3
  1351ec:	e24b300d 	sub	r3, fp, #13
  1351f0:	e1a02003 	mov	r2, r3
  1351f4:	e51b0008 	ldr	r0, [fp, #-8]
  1351f8:	eb000ac6 	bl	137d18 <PHY_GetLinkStatus>
    if (link)
  1351fc:	e55b300d 	ldrb	r3, [fp, #-13]
  135200:	e3530000 	cmp	r3, #0
  135204:	0a00000d 	beq	135240 <phy_detect_thread_entry+0xd4>
    {
        /* Get the actual PHY link speed. */
        PHY_GetLinkSpeedDuplex(base_addr, imx6ul_device->phy_num, &speed, &duplex);
  135208:	e51b300c 	ldr	r3, [fp, #-12]
  13520c:	e5d33098 	ldrb	r3, [r3, #152]	; 0x98
  135210:	e1a01003 	mov	r1, r3
  135214:	e24b3018 	sub	r3, fp, #24
  135218:	e24b2014 	sub	r2, fp, #20
  13521c:	e51b0008 	ldr	r0, [fp, #-8]
  135220:	eb000ae5 	bl	137dbc <PHY_GetLinkSpeedDuplex>
        /* Change the MII speed and duplex for actual link status. */
        imx6ul_device->config.miiSpeed = (enet_mii_speed_t)speed;
  135224:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  135228:	e51b300c 	ldr	r3, [fp, #-12]
  13522c:	e58320ec 	str	r2, [r3, #236]	; 0xec
        imx6ul_device->config.miiDuplex = (enet_mii_duplex_t)duplex;
  135230:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  135234:	e51b300c 	ldr	r3, [fp, #-12]
  135238:	e58320f0 	str	r2, [r3, #240]	; 0xf0
  13523c:	ea000008 	b	135264 <phy_detect_thread_entry+0xf8>
    }
    else
    {
        LOG_W("PHY Link down, please check the cable connection and link partner setting.");
  135240:	e30902f0 	movw	r0, #37616	; 0x92f0
  135244:	e3400014 	movt	r0, #20
  135248:	ebff37b1 	bl	103114 <rt_kprintf>
  13524c:	e3090304 	movw	r0, #37636	; 0x9304
  135250:	e3400014 	movt	r0, #20
  135254:	ebff37ae 	bl	103114 <rt_kprintf>
  135258:	e30900fc 	movw	r0, #37116	; 0x90fc
  13525c:	e3400014 	movt	r0, #20
  135260:	ebff37ab 	bl	103114 <rt_kprintf>
    }

    while(1)
    {
        PHY_GetLinkStatus(base_addr, imx6ul_device->phy_num, &link);
  135264:	e51b300c 	ldr	r3, [fp, #-12]
  135268:	e5d33098 	ldrb	r3, [r3, #152]	; 0x98
  13526c:	e1a01003 	mov	r1, r3
  135270:	e24b300d 	sub	r3, fp, #13
  135274:	e1a02003 	mov	r2, r3
  135278:	e51b0008 	ldr	r0, [fp, #-8]
  13527c:	eb000aa5 	bl	137d18 <PHY_GetLinkStatus>
        if(link != imx6ul_device->phy_link_status)
  135280:	e55b300d 	ldrb	r3, [fp, #-13]
  135284:	e1a02003 	mov	r2, r3
  135288:	e51b300c 	ldr	r3, [fp, #-12]
  13528c:	e5933088 	ldr	r3, [r3, #136]	; 0x88
  135290:	e1520003 	cmp	r2, r3
  135294:	0a00000b 	beq	1352c8 <phy_detect_thread_entry+0x15c>
        {
            if(link == true)
  135298:	e55b300d 	ldrb	r3, [fp, #-13]
  13529c:	e3530000 	cmp	r3, #0
  1352a0:	0a000004 	beq	1352b8 <phy_detect_thread_entry+0x14c>
            {
                PHY_StartNegotiation(base_addr,imx6ul_device->phy_num);
  1352a4:	e51b300c 	ldr	r3, [fp, #-12]
  1352a8:	e5d33098 	ldrb	r3, [r3, #152]	; 0x98
  1352ac:	e1a01003 	mov	r1, r3
  1352b0:	e51b0008 	ldr	r0, [fp, #-8]
  1352b4:	eb000955 	bl	137810 <PHY_StartNegotiation>
                
            }            
            imx6ul_eth_link_change(imx6ul_device,link);
  1352b8:	e55b300d 	ldrb	r3, [fp, #-13]
  1352bc:	e1a01003 	mov	r1, r3
  1352c0:	e51b000c 	ldr	r0, [fp, #-12]
  1352c4:	ebfffbd6 	bl	134224 <imx6ul_eth_link_change>
        }
        rt_thread_mdelay(DETECT_DELAY_ONE_SECOND);
  1352c8:	e3a00ffa 	mov	r0, #1000	; 0x3e8
  1352cc:	ebff32ea 	bl	101e7c <rt_thread_mdelay>
        PHY_GetLinkStatus(base_addr, imx6ul_device->phy_num, &link);
  1352d0:	eaffffe3 	b	135264 <phy_detect_thread_entry+0xf8>

001352d4 <imx6ul_eth_init>:
    rt_imx6ul_eth_write,
    rt_imx6ul_eth_control,
};

int imx6ul_eth_init()
{
  1352d4:	e92d4800 	push	{fp, lr}
  1352d8:	e28db004 	add	fp, sp, #4
  1352dc:	e24dd028 	sub	sp, sp, #40	; 0x28
    rt_err_t state = RT_EOK;
  1352e0:	e3a03000 	mov	r3, #0
  1352e4:	e50b3008 	str	r3, [fp, #-8]
    char link_detect[10];
    char mac_addr[MAX_ADDR_LEN];

    if (ipc_service_init() == RT_ERROR)
  1352e8:	ebff3b0a 	bl	103f18 <ipc_service_init>
  1352ec:	e1a03000 	mov	r3, r0
  1352f0:	e3530001 	cmp	r3, #1
  1352f4:	1a000001 	bne	135300 <imx6ul_eth_init+0x2c>
    {
        return -RT_ERROR;
  1352f8:	e3e03000 	mvn	r3, #0
  1352fc:	ea00009e 	b	13557c <imx6ul_eth_init+0x2a8>
    }


    ueth_gpioinit((void *)&mdio_gpio[0], sizeof(mdio_gpio[0]));
  135300:	e3a0101c 	mov	r1, #28
  135304:	e30d0038 	movw	r0, #53304	; 0xd038
  135308:	e3400014 	movt	r0, #20
  13530c:	ebff3ba0 	bl	104194 <ueth_gpioinit>
    ueth_gpioinit((void *)&mdio_gpio[1], sizeof(mdio_gpio[1]));
  135310:	e3a0101c 	mov	r1, #28
  135314:	e59f026c 	ldr	r0, [pc, #620]	; 135588 <imx6ul_eth_init+0x2b4>
  135318:	ebff3b9d 	bl	104194 <ueth_gpioinit>

    for (int idx=0; idx<GET_ARRAY_NUM(_imx6ul_eth_device); idx++)
  13531c:	e3a03000 	mov	r3, #0
  135320:	e50b300c 	str	r3, [fp, #-12]
  135324:	ea000090 	b	13556c <imx6ul_eth_init+0x298>
    {
        _imx6ul_eth_device[idx].parent.parent.ops = &_k_enet_ops;
  135328:	e30d3070 	movw	r3, #53360	; 0xd070
  13532c:	e3403014 	movt	r3, #20
  135330:	e51b200c 	ldr	r2, [fp, #-12]
  135334:	e3a01f8a 	mov	r1, #552	; 0x228
  135338:	e0020291 	mul	r2, r1, r2
  13533c:	e0833002 	add	r3, r3, r2
  135340:	e283202c 	add	r2, r3, #44	; 0x2c
  135344:	e3093350 	movw	r3, #37712	; 0x9350
  135348:	e3403014 	movt	r3, #20
  13534c:	e5823000 	str	r3, [r2]
#ifdef RT_USING_LWIP        
        _imx6ul_eth_device[idx].parent.eth_rx     = rt_imx6ul_eth_rx;
  135350:	e30d3070 	movw	r3, #53360	; 0xd070
  135354:	e3403014 	movt	r3, #20
  135358:	e51b200c 	ldr	r2, [fp, #-12]
  13535c:	e3a01f8a 	mov	r1, #552	; 0x228
  135360:	e0020291 	mul	r2, r1, r2
  135364:	e0833002 	add	r3, r3, r2
  135368:	e2832070 	add	r2, r3, #112	; 0x70
  13536c:	e3043cc8 	movw	r3, #19656	; 0x4cc8
  135370:	e3403013 	movt	r3, #19
  135374:	e5823000 	str	r3, [r2]
        _imx6ul_eth_device[idx].parent.eth_tx     = rt_imx6ul_eth_tx;
  135378:	e30d3070 	movw	r3, #53360	; 0xd070
  13537c:	e3403014 	movt	r3, #20
  135380:	e51b200c 	ldr	r2, [fp, #-12]
  135384:	e3a01f8a 	mov	r1, #552	; 0x228
  135388:	e0020291 	mul	r2, r1, r2
  13538c:	e0833002 	add	r3, r3, r2
  135390:	e2832074 	add	r2, r3, #116	; 0x74
  135394:	e3043b68 	movw	r3, #19304	; 0x4b68
  135398:	e3403013 	movt	r3, #19
  13539c:	e5823000 	str	r3, [r2]
#endif        
        _imx6ul_eth_device[idx].phy_link_status   = RT_FALSE;
  1353a0:	e30d3070 	movw	r3, #53360	; 0xd070
  1353a4:	e3403014 	movt	r3, #20
  1353a8:	e51b200c 	ldr	r2, [fp, #-12]
  1353ac:	e3a01f8a 	mov	r1, #552	; 0x228
  1353b0:	e0020291 	mul	r2, r1, r2
  1353b4:	e0833002 	add	r3, r3, r2
  1353b8:	e2833088 	add	r3, r3, #136	; 0x88
  1353bc:	e3a02000 	mov	r2, #0
  1353c0:	e5832000 	str	r2, [r3]

#ifdef SAL_USING_UNET
        rt_imx6ul_eth_control((rt_device_t)(&_imx6ul_eth_device[idx]),NIOCTL_GADDR,mac_addr);
  1353c4:	e51b300c 	ldr	r3, [fp, #-12]
  1353c8:	e3a02f8a 	mov	r2, #552	; 0x228
  1353cc:	e0020392 	mul	r2, r2, r3
  1353d0:	e30d3070 	movw	r3, #53360	; 0xd070
  1353d4:	e3403014 	movt	r3, #20
  1353d8:	e0823003 	add	r3, r2, r3
  1353dc:	e24b2024 	sub	r2, fp, #36	; 0x24
  1353e0:	e3a01001 	mov	r1, #1
  1353e4:	e1a00003 	mov	r0, r3
  1353e8:	ebfffd12 	bl	134838 <rt_imx6ul_eth_control>
        
        rt_imx6ul_eth_init((rt_device_t)(&(_imx6ul_eth_device[idx].parent)));
  1353ec:	e51b300c 	ldr	r3, [fp, #-12]
  1353f0:	e3a02f8a 	mov	r2, #552	; 0x228
  1353f4:	e0020392 	mul	r2, r2, r3
  1353f8:	e30d3070 	movw	r3, #53360	; 0xd070
  1353fc:	e3403014 	movt	r3, #20
  135400:	e0823003 	add	r3, r2, r3
  135404:	e1a00003 	mov	r0, r3
  135408:	ebfffc8b 	bl	13463c <rt_imx6ul_eth_init>
#endif
        eth_init_done = 1;
  13540c:	e30e337c 	movw	r3, #58236	; 0xe37c
  135410:	e3403014 	movt	r3, #20
  135414:	e3a02001 	mov	r2, #1
  135418:	e5832000 	str	r2, [r3]
        /* register eth device */
        state = eth_device_init(&(_imx6ul_eth_device[idx].parent), _imx6ul_eth_device[idx].mac_name);
  13541c:	e51b300c 	ldr	r3, [fp, #-12]
  135420:	e3a02f8a 	mov	r2, #552	; 0x228
  135424:	e0020392 	mul	r2, r2, r3
  135428:	e30d3070 	movw	r3, #53360	; 0xd070
  13542c:	e3403014 	movt	r3, #20
  135430:	e0820003 	add	r0, r2, r3
  135434:	e30d3070 	movw	r3, #53360	; 0xd070
  135438:	e3403014 	movt	r3, #20
  13543c:	e51b200c 	ldr	r2, [fp, #-12]
  135440:	e3a01f8a 	mov	r1, #552	; 0x228
  135444:	e0020291 	mul	r2, r1, r2
  135448:	e0833002 	add	r3, r3, r2
  13544c:	e283308c 	add	r3, r3, #140	; 0x8c
  135450:	e5933000 	ldr	r3, [r3]
  135454:	e1a01003 	mov	r1, r3
  135458:	ebffd0b1 	bl	129724 <eth_device_init>
  13545c:	e50b0008 	str	r0, [fp, #-8]
        if (RT_EOK == state)
  135460:	e51b3008 	ldr	r3, [fp, #-8]
  135464:	e3530000 	cmp	r3, #0
  135468:	1a000009 	bne	135494 <imx6ul_eth_init+0x1c0>
        {
            LOG_I("emac device init success");
  13546c:	e3090368 	movw	r0, #37736	; 0x9368
  135470:	e3400014 	movt	r0, #20
  135474:	ebff3726 	bl	103114 <rt_kprintf>
  135478:	e309037c 	movw	r0, #37756	; 0x937c
  13547c:	e3400014 	movt	r0, #20
  135480:	ebff3723 	bl	103114 <rt_kprintf>
  135484:	e30900fc 	movw	r0, #37116	; 0x90fc
  135488:	e3400014 	movt	r0, #20
  13548c:	ebff3720 	bl	103114 <rt_kprintf>
  135490:	ea00000b 	b	1354c4 <imx6ul_eth_init+0x1f0>
        }
        else
        {
            LOG_E("emac device init faild: %d", state);
  135494:	e3090118 	movw	r0, #37144	; 0x9118
  135498:	e3400014 	movt	r0, #20
  13549c:	ebff371c 	bl	103114 <rt_kprintf>
  1354a0:	e51b1008 	ldr	r1, [fp, #-8]
  1354a4:	e3090398 	movw	r0, #37784	; 0x9398
  1354a8:	e3400014 	movt	r0, #20
  1354ac:	ebff3718 	bl	103114 <rt_kprintf>
  1354b0:	e30900fc 	movw	r0, #37116	; 0x90fc
  1354b4:	e3400014 	movt	r0, #20
  1354b8:	ebff3715 	bl	103114 <rt_kprintf>
            state = -RT_ERROR;
  1354bc:	e3e03000 	mvn	r3, #0
  1354c0:	e50b3008 	str	r3, [fp, #-8]
        }

        rt_sprintf(link_detect,"link_d%d",_imx6ul_eth_device[idx].mac_num);
  1354c4:	e30d3070 	movw	r3, #53360	; 0xd070
  1354c8:	e3403014 	movt	r3, #20
  1354cc:	e51b200c 	ldr	r2, [fp, #-12]
  1354d0:	e3a01f8a 	mov	r1, #552	; 0x228
  1354d4:	e0020291 	mul	r2, r1, r2
  1354d8:	e0833002 	add	r3, r3, r2
  1354dc:	e28330a4 	add	r3, r3, #164	; 0xa4
  1354e0:	e5932000 	ldr	r2, [r3]
  1354e4:	e24b301c 	sub	r3, fp, #28
  1354e8:	e30913b4 	movw	r1, #37812	; 0x93b4
  1354ec:	e3401014 	movt	r1, #20
  1354f0:	e1a00003 	mov	r0, r3
  1354f4:	ebff36e4 	bl	10308c <rt_sprintf>
        /* start phy link detect */
        rt_thread_t phy_link_tid;
        phy_link_tid = rt_thread_create(link_detect,
                                phy_detect_thread_entry,
                                &_imx6ul_eth_device[idx],
  1354f8:	e51b300c 	ldr	r3, [fp, #-12]
  1354fc:	e3a02f8a 	mov	r2, #552	; 0x228
  135500:	e0020392 	mul	r2, r2, r3
  135504:	e30d3070 	movw	r3, #53360	; 0xd070
  135508:	e3403014 	movt	r3, #20
  13550c:	e0822003 	add	r2, r2, r3
        phy_link_tid = rt_thread_create(link_detect,
  135510:	e24b001c 	sub	r0, fp, #28
  135514:	e3a03002 	mov	r3, #2
  135518:	e58d3004 	str	r3, [sp, #4]
  13551c:	e3a03019 	mov	r3, #25
  135520:	e58d3000 	str	r3, [sp]
  135524:	e3a03a01 	mov	r3, #4096	; 0x1000
  135528:	e305116c 	movw	r1, #20844	; 0x516c
  13552c:	e3401013 	movt	r1, #19
  135530:	ebff32ef 	bl	1020f4 <rt_thread_create>
  135534:	e50b0010 	str	r0, [fp, #-16]
                                4096,
                                25,
                                2);
        if (phy_link_tid != RT_NULL)
  135538:	e51b3010 	ldr	r3, [fp, #-16]
  13553c:	e3530000 	cmp	r3, #0
  135540:	0a000001 	beq	13554c <imx6ul_eth_init+0x278>
        {
            rt_thread_startup(phy_link_tid);
  135544:	e51b0010 	ldr	r0, [fp, #-16]
  135548:	ebff331e 	bl	1021c8 <rt_thread_startup>
        }
        memset(link_detect,0,sizeof(link_detect));
  13554c:	e24b301c 	sub	r3, fp, #28
  135550:	e3a0200a 	mov	r2, #10
  135554:	e3a01000 	mov	r1, #0
  135558:	e1a00003 	mov	r0, r3
  13555c:	eb002ce2 	bl	1408ec <memset>
    for (int idx=0; idx<GET_ARRAY_NUM(_imx6ul_eth_device); idx++)
  135560:	e51b300c 	ldr	r3, [fp, #-12]
  135564:	e2833001 	add	r3, r3, #1
  135568:	e50b300c 	str	r3, [fp, #-12]
  13556c:	e51b300c 	ldr	r3, [fp, #-12]
  135570:	e3530000 	cmp	r3, #0
  135574:	0affff6b 	beq	135328 <imx6ul_eth_init+0x54>
    }

    return state;
  135578:	e51b3008 	ldr	r3, [fp, #-8]
  13557c:	e1a00003 	mov	r0, r3
  135580:	e24bd004 	sub	sp, fp, #4
  135584:	e8bd8800 	pop	{fp, pc}
  135588:	0014d054 	.word	0x0014d054

0013558c <__assert_func>:
        __BKPT(0);
    }
}
#elif(defined(__GNUC__))
void __assert_func(const char *file, int line, const char *func, const char *failedExpr)
{
  13558c:	e92d4800 	push	{fp, lr}
  135590:	e28db004 	add	fp, sp, #4
  135594:	e24dd018 	sub	sp, sp, #24
  135598:	e50b0008 	str	r0, [fp, #-8]
  13559c:	e50b100c 	str	r1, [fp, #-12]
  1355a0:	e50b2010 	str	r2, [fp, #-16]
  1355a4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    PRINTF("ASSERT ERROR \" %s \": file \"%s\" Line \"%d\" function name \"%s\" \n", failedExpr, file, line, func);
  1355a8:	e51b3010 	ldr	r3, [fp, #-16]
  1355ac:	e58d3000 	str	r3, [sp]
  1355b0:	e51b300c 	ldr	r3, [fp, #-12]
  1355b4:	e51b2008 	ldr	r2, [fp, #-8]
  1355b8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1355bc:	e30903d4 	movw	r0, #37844	; 0x93d4
  1355c0:	e3400014 	movt	r0, #20
  1355c4:	ebff36d2 	bl	103114 <rt_kprintf>
    for (;;)
    {
        __BKPT(0);
  1355c8:	e1200070 	bkpt	0x0000
  1355cc:	eafffffd 	b	1355c8 <__assert_func+0x3c>

001355d0 <SDK_Malloc>:
                           /*   SYSCON->STARTERCLR[index] = 1u << intNumber; */
}
#endif /*CPU_QN908X */

void *SDK_Malloc(size_t size, size_t alignbytes)
{
  1355d0:	e92d4800 	push	{fp, lr}
  1355d4:	e28db004 	add	fp, sp, #4
  1355d8:	e24dd018 	sub	sp, sp, #24
  1355dc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1355e0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    mem_align_cb_t *p_cb = NULL;
  1355e4:	e3a03000 	mov	r3, #0
  1355e8:	e50b3008 	str	r3, [fp, #-8]
    uint32_t alignedsize = SDK_SIZEALIGN(size, alignbytes) + alignbytes + sizeof(mem_align_cb_t);
  1355ec:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1355f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1355f4:	e0823003 	add	r3, r2, r3
  1355f8:	e2432001 	sub	r2, r3, #1
  1355fc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  135600:	e2633000 	rsb	r3, r3, #0
  135604:	e0022003 	and	r2, r2, r3
  135608:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  13560c:	e0823003 	add	r3, r2, r3
  135610:	e2833004 	add	r3, r3, #4
  135614:	e50b300c 	str	r3, [fp, #-12]
    void *p_align_addr, *p_addr = malloc(alignedsize);
  135618:	e51b000c 	ldr	r0, [fp, #-12]
  13561c:	eb001cea 	bl	13c9cc <malloc>
  135620:	e1a03000 	mov	r3, r0
  135624:	e50b3010 	str	r3, [fp, #-16]

    if (!p_addr)
  135628:	e51b3010 	ldr	r3, [fp, #-16]
  13562c:	e3530000 	cmp	r3, #0
  135630:	1a000001 	bne	13563c <SDK_Malloc+0x6c>
    {
        return NULL;
  135634:	e3a03000 	mov	r3, #0
  135638:	ea000014 	b	135690 <SDK_Malloc+0xc0>
    }

    p_align_addr = (void *)SDK_SIZEALIGN((uint32_t)p_addr + sizeof(mem_align_cb_t), alignbytes);
  13563c:	e51b2010 	ldr	r2, [fp, #-16]
  135640:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  135644:	e0823003 	add	r3, r2, r3
  135648:	e2832003 	add	r2, r3, #3
  13564c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  135650:	e2633000 	rsb	r3, r3, #0
  135654:	e0033002 	and	r3, r3, r2
  135658:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

    p_cb = (mem_align_cb_t *)((uint32_t)p_align_addr - 4);
  13565c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135660:	e2433004 	sub	r3, r3, #4
  135664:	e50b3008 	str	r3, [fp, #-8]
    p_cb->identifier = SDK_MEM_MAGIC_NUMBER;
  135668:	e51b3008 	ldr	r3, [fp, #-8]
  13566c:	e3032039 	movw	r2, #12345	; 0x3039
  135670:	e1c320b0 	strh	r2, [r3]
    p_cb->offset = (uint32_t)p_align_addr - (uint32_t)p_addr;
  135674:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  135678:	e51b3010 	ldr	r3, [fp, #-16]
  13567c:	e0423003 	sub	r3, r2, r3
  135680:	e6ff2073 	uxth	r2, r3
  135684:	e51b3008 	ldr	r3, [fp, #-8]
  135688:	e1c320b2 	strh	r2, [r3, #2]

    return (void *)p_align_addr;
  13568c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
}
  135690:	e1a00003 	mov	r0, r3
  135694:	e24bd004 	sub	sp, fp, #4
  135698:	e8bd8800 	pop	{fp, pc}

0013569c <SDK_Free>:

void SDK_Free(void *ptr)
{
  13569c:	e92d4800 	push	{fp, lr}
  1356a0:	e28db004 	add	fp, sp, #4
  1356a4:	e24dd010 	sub	sp, sp, #16
  1356a8:	e50b0010 	str	r0, [fp, #-16]
    mem_align_cb_t *p_cb = (mem_align_cb_t *)((uint32_t)ptr - 4);
  1356ac:	e51b3010 	ldr	r3, [fp, #-16]
  1356b0:	e2433004 	sub	r3, r3, #4
  1356b4:	e50b3008 	str	r3, [fp, #-8]

    if (p_cb->identifier != SDK_MEM_MAGIC_NUMBER)
  1356b8:	e51b3008 	ldr	r3, [fp, #-8]
  1356bc:	e1d330b0 	ldrh	r3, [r3]
  1356c0:	e3032039 	movw	r2, #12345	; 0x3039
  1356c4:	e1530002 	cmp	r3, r2
  1356c8:	1a000006 	bne	1356e8 <SDK_Free+0x4c>
    {
        return;
    }

    free((void *)((uint32_t)ptr - p_cb->offset));
  1356cc:	e51b3010 	ldr	r3, [fp, #-16]
  1356d0:	e51b2008 	ldr	r2, [fp, #-8]
  1356d4:	e1d220b2 	ldrh	r2, [r2, #2]
  1356d8:	e0433002 	sub	r3, r3, r2
  1356dc:	e1a00003 	mov	r0, r3
  1356e0:	eb001e75 	bl	13d0bc <free>
  1356e4:	ea000000 	b	1356ec <SDK_Free+0x50>
        return;
  1356e8:	e320f000 	nop	{0}
}
  1356ec:	e24bd004 	sub	sp, fp, #4
  1356f0:	e8bd8800 	pop	{fp, pc}

001356f4 <ENET_Reset>:
{
  1356f4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1356f8:	e28db000 	add	fp, sp, #0
  1356fc:	e24dd00c 	sub	sp, sp, #12
  135700:	e50b0008 	str	r0, [fp, #-8]
    base->ECR |= ENET_ECR_RESET_MASK;
  135704:	e51b3008 	ldr	r3, [fp, #-8]
  135708:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  13570c:	e3832001 	orr	r2, r3, #1
  135710:	e51b3008 	ldr	r3, [fp, #-8]
  135714:	e5832024 	str	r2, [r3, #36]	; 0x24
}
  135718:	e320f000 	nop	{0}
  13571c:	e28bd000 	add	sp, fp, #0
  135720:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  135724:	e12fff1e 	bx	lr

00135728 <ENET_GetSMI>:
{
  135728:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  13572c:	e28db000 	add	fp, sp, #0
  135730:	e24dd00c 	sub	sp, sp, #12
  135734:	e50b0008 	str	r0, [fp, #-8]
    return (0 != (base->MSCR & 0x7E));
  135738:	e51b3008 	ldr	r3, [fp, #-8]
  13573c:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  135740:	e203307e 	and	r3, r3, #126	; 0x7e
  135744:	e3530000 	cmp	r3, #0
  135748:	13a03001 	movne	r3, #1
  13574c:	03a03000 	moveq	r3, #0
  135750:	e6ef3073 	uxtb	r3, r3
}
  135754:	e1a00003 	mov	r0, r3
  135758:	e28bd000 	add	sp, fp, #0
  13575c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  135760:	e12fff1e 	bx	lr

00135764 <ENET_EnableInterrupts>:
{
  135764:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  135768:	e28db000 	add	fp, sp, #0
  13576c:	e24dd00c 	sub	sp, sp, #12
  135770:	e50b0008 	str	r0, [fp, #-8]
  135774:	e50b100c 	str	r1, [fp, #-12]
    base->EIMR |= mask;
  135778:	e51b3008 	ldr	r3, [fp, #-8]
  13577c:	e5932008 	ldr	r2, [r3, #8]
  135780:	e51b300c 	ldr	r3, [fp, #-12]
  135784:	e1822003 	orr	r2, r2, r3
  135788:	e51b3008 	ldr	r3, [fp, #-8]
  13578c:	e5832008 	str	r2, [r3, #8]
}
  135790:	e320f000 	nop	{0}
  135794:	e28bd000 	add	sp, fp, #0
  135798:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  13579c:	e12fff1e 	bx	lr

001357a0 <ENET_GetInstance>:

/*******************************************************************************
 * Code
 ******************************************************************************/
uint32_t ENET_GetInstance(ENET_Type *base)
{
  1357a0:	e92d4800 	push	{fp, lr}
  1357a4:	e28db004 	add	fp, sp, #4
  1357a8:	e24dd010 	sub	sp, sp, #16
  1357ac:	e50b0010 	str	r0, [fp, #-16]
    uint32_t instance;
    /* Find the instance index from base address mappings. */
    for (instance = 0; instance < ARRAY_SIZE(s_enetBases); instance++)
  1357b0:	e3a03000 	mov	r3, #0
  1357b4:	e50b3008 	str	r3, [fp, #-8]
  1357b8:	ea000009 	b	1357e4 <ENET_GetInstance+0x44>
    {
        if (s_enetBases[instance] == base)
  1357bc:	e3093414 	movw	r3, #37908	; 0x9414
  1357c0:	e3403014 	movt	r3, #20
  1357c4:	e51b2008 	ldr	r2, [fp, #-8]
  1357c8:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  1357cc:	e51b2010 	ldr	r2, [fp, #-16]
  1357d0:	e1520003 	cmp	r2, r3
  1357d4:	0a000006 	beq	1357f4 <ENET_GetInstance+0x54>
    for (instance = 0; instance < ARRAY_SIZE(s_enetBases); instance++)
  1357d8:	e51b3008 	ldr	r3, [fp, #-8]
  1357dc:	e2833001 	add	r3, r3, #1
  1357e0:	e50b3008 	str	r3, [fp, #-8]
  1357e4:	e51b3008 	ldr	r3, [fp, #-8]
  1357e8:	e3530002 	cmp	r3, #2
  1357ec:	9afffff2 	bls	1357bc <ENET_GetInstance+0x1c>
  1357f0:	ea000000 	b	1357f8 <ENET_GetInstance+0x58>
        {
            break;
  1357f4:	e320f000 	nop	{0}
        }
    }
    RT_ASSERT(instance < ARRAY_SIZE(s_enetBases));
  1357f8:	e51b3008 	ldr	r3, [fp, #-8]
  1357fc:	e3530002 	cmp	r3, #2
  135800:	9a000005 	bls	13581c <ENET_GetInstance+0x7c>
  135804:	e3a020d1 	mov	r2, #209	; 0xd1
  135808:	e3091790 	movw	r1, #38800	; 0x9790
  13580c:	e3401014 	movt	r1, #20
  135810:	e3090420 	movw	r0, #37920	; 0x9420
  135814:	e3400014 	movt	r0, #20
  135818:	ebff375e 	bl	103598 <rt_assert_handler>

    return instance;
  13581c:	e51b3008 	ldr	r3, [fp, #-8]
}
  135820:	e1a00003 	mov	r0, r3
  135824:	e24bd004 	sub	sp, fp, #4
  135828:	e8bd8800 	pop	{fp, pc}

0013582c <ENET_GetDefaultConfig>:
};

#endif

void ENET_GetDefaultConfig(enet_config_t *config)
{
  13582c:	e92d4800 	push	{fp, lr}
  135830:	e28db004 	add	fp, sp, #4
  135834:	e24dd008 	sub	sp, sp, #8
  135838:	e50b0008 	str	r0, [fp, #-8]
    /* Checks input parameter. */
    RT_ASSERT(config);
  13583c:	e51b3008 	ldr	r3, [fp, #-8]
  135840:	e3530000 	cmp	r3, #0
  135844:	1a000005 	bne	135860 <ENET_GetDefaultConfig+0x34>
  135848:	e3a020e3 	mov	r2, #227	; 0xe3
  13584c:	e30917a4 	movw	r1, #38820	; 0x97a4
  135850:	e3401014 	movt	r1, #20
  135854:	e3090444 	movw	r0, #37956	; 0x9444
  135858:	e3400014 	movt	r0, #20
  13585c:	ebff374d 	bl	103598 <rt_assert_handler>

    /* Initializes the MAC configure structure to zero. */
    memset(config, 0, sizeof(enet_config_t));
  135860:	e3a02024 	mov	r2, #36	; 0x24
  135864:	e3a01000 	mov	r1, #0
  135868:	e51b0008 	ldr	r0, [fp, #-8]
  13586c:	eb002c1e 	bl	1408ec <memset>

    #if defined (FSL_FEATURE_ENET_HAS_INTERRUPT_COALESCE) && FSL_FEATURE_ENET_HAS_INTERRUPT_COALESCE
    config->intCoalesceCfg = &intcoalesce_config;
  135870:	e51b2008 	ldr	r2, [fp, #-8]
  135874:	e30d3298 	movw	r3, #53912	; 0xd298
  135878:	e3403014 	movt	r3, #20
  13587c:	e5823020 	str	r3, [r2, #32]
    #endif

    /* Sets MII mode, full duplex, 100Mbps for MAC and PHY data interface. */
    config->miiMode = kENET_RmiiMode;
  135880:	e51b3008 	ldr	r3, [fp, #-8]
  135884:	e3a02001 	mov	r2, #1
  135888:	e583200c 	str	r2, [r3, #12]
    config->miiSpeed = kENET_MiiSpeed100M;
  13588c:	e51b3008 	ldr	r3, [fp, #-8]
  135890:	e3a02001 	mov	r2, #1
  135894:	e5832010 	str	r2, [r3, #16]
    config->miiDuplex = kENET_MiiFullDuplex;
  135898:	e51b3008 	ldr	r3, [fp, #-8]
  13589c:	e3a02001 	mov	r2, #1
  1358a0:	e5832014 	str	r2, [r3, #20]

    /* Sets the maximum receive frame length. */
    config->rxMaxFrameLen = ENET_FRAME_MAX_FRAMELEN;
  1358a4:	e51b3008 	ldr	r3, [fp, #-8]
  1358a8:	e30025ee 	movw	r2, #1518	; 0x5ee
  1358ac:	e1c320b8 	strh	r2, [r3, #8]
}
  1358b0:	e320f000 	nop	{0}
  1358b4:	e24bd004 	sub	sp, fp, #4
  1358b8:	e8bd8800 	pop	{fp, pc}

001358bc <ENET_Init>:
               enet_handle_t *handle,
               const enet_config_t *config,
               const enet_buffer_config_t *bufferConfig,
               uint8_t *macAddr,
               uint32_t srcClock_Hz)
{
  1358bc:	e92d4800 	push	{fp, lr}
  1358c0:	e28db004 	add	fp, sp, #4
  1358c4:	e24dd018 	sub	sp, sp, #24
  1358c8:	e50b0008 	str	r0, [fp, #-8]
  1358cc:	e50b100c 	str	r1, [fp, #-12]
  1358d0:	e50b2010 	str	r2, [fp, #-16]
  1358d4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    /* Checks input parameters. */
    RT_ASSERT(handle);
  1358d8:	e51b300c 	ldr	r3, [fp, #-12]
  1358dc:	e3530000 	cmp	r3, #0
  1358e0:	1a000005 	bne	1358fc <ENET_Init+0x40>
  1358e4:	e3a020fd 	mov	r2, #253	; 0xfd
  1358e8:	e30917bc 	movw	r1, #38844	; 0x97bc
  1358ec:	e3401014 	movt	r1, #20
  1358f0:	e309044c 	movw	r0, #37964	; 0x944c
  1358f4:	e3400014 	movt	r0, #20
  1358f8:	ebff3726 	bl	103598 <rt_assert_handler>
    RT_ASSERT(config);
  1358fc:	e51b3010 	ldr	r3, [fp, #-16]
  135900:	e3530000 	cmp	r3, #0
  135904:	1a000005 	bne	135920 <ENET_Init+0x64>
  135908:	e3a020fe 	mov	r2, #254	; 0xfe
  13590c:	e30917bc 	movw	r1, #38844	; 0x97bc
  135910:	e3401014 	movt	r1, #20
  135914:	e3090444 	movw	r0, #37956	; 0x9444
  135918:	e3400014 	movt	r0, #20
  13591c:	ebff371d 	bl	103598 <rt_assert_handler>
    RT_ASSERT(bufferConfig);
  135920:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135924:	e3530000 	cmp	r3, #0
  135928:	1a000005 	bne	135944 <ENET_Init+0x88>
  13592c:	e3a020ff 	mov	r2, #255	; 0xff
  135930:	e30917bc 	movw	r1, #38844	; 0x97bc
  135934:	e3401014 	movt	r1, #20
  135938:	e3090454 	movw	r0, #37972	; 0x9454
  13593c:	e3400014 	movt	r0, #20
  135940:	ebff3714 	bl	103598 <rt_assert_handler>
    RT_ASSERT(bufferConfig->rxBdStartAddrAlign);
  135944:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135948:	e593300c 	ldr	r3, [r3, #12]
  13594c:	e3530000 	cmp	r3, #0
  135950:	1a000005 	bne	13596c <ENET_Init+0xb0>
  135954:	e3a02c01 	mov	r2, #256	; 0x100
  135958:	e30917bc 	movw	r1, #38844	; 0x97bc
  13595c:	e3401014 	movt	r1, #20
  135960:	e3090464 	movw	r0, #37988	; 0x9464
  135964:	e3400014 	movt	r0, #20
  135968:	ebff370a 	bl	103598 <rt_assert_handler>
    RT_ASSERT(bufferConfig->txBdStartAddrAlign);
  13596c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135970:	e5933010 	ldr	r3, [r3, #16]
  135974:	e3530000 	cmp	r3, #0
  135978:	1a000005 	bne	135994 <ENET_Init+0xd8>
  13597c:	e3002101 	movw	r2, #257	; 0x101
  135980:	e30917bc 	movw	r1, #38844	; 0x97bc
  135984:	e3401014 	movt	r1, #20
  135988:	e3090488 	movw	r0, #38024	; 0x9488
  13598c:	e3400014 	movt	r0, #20
  135990:	ebff3700 	bl	103598 <rt_assert_handler>
    RT_ASSERT(bufferConfig->rxBufferAlign);
  135994:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135998:	e5933014 	ldr	r3, [r3, #20]
  13599c:	e3530000 	cmp	r3, #0
  1359a0:	1a000005 	bne	1359bc <ENET_Init+0x100>
  1359a4:	e3002102 	movw	r2, #258	; 0x102
  1359a8:	e30917bc 	movw	r1, #38844	; 0x97bc
  1359ac:	e3401014 	movt	r1, #20
  1359b0:	e30904ac 	movw	r0, #38060	; 0x94ac
  1359b4:	e3400014 	movt	r0, #20
  1359b8:	ebff36f6 	bl	103598 <rt_assert_handler>
    RT_ASSERT(bufferConfig->txBufferAlign);
  1359bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1359c0:	e5933018 	ldr	r3, [r3, #24]
  1359c4:	e3530000 	cmp	r3, #0
  1359c8:	1a000005 	bne	1359e4 <ENET_Init+0x128>
  1359cc:	e3002103 	movw	r2, #259	; 0x103
  1359d0:	e30917bc 	movw	r1, #38844	; 0x97bc
  1359d4:	e3401014 	movt	r1, #20
  1359d8:	e30904c8 	movw	r0, #38088	; 0x94c8
  1359dc:	e3400014 	movt	r0, #20
  1359e0:	ebff36ec 	bl	103598 <rt_assert_handler>
    RT_ASSERT(macAddr);
  1359e4:	e59b3004 	ldr	r3, [fp, #4]
  1359e8:	e3530000 	cmp	r3, #0
  1359ec:	1a000005 	bne	135a08 <ENET_Init+0x14c>
  1359f0:	e3a02f41 	mov	r2, #260	; 0x104
  1359f4:	e30917bc 	movw	r1, #38844	; 0x97bc
  1359f8:	e3401014 	movt	r1, #20
  1359fc:	e30904e4 	movw	r0, #38116	; 0x94e4
  135a00:	e3400014 	movt	r0, #20
  135a04:	ebff36e3 	bl	103598 <rt_assert_handler>
    RT_ASSERT(bufferConfig->rxBuffSizeAlign >= ENET_RX_MIN_BUFFERSIZE);
  135a08:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135a0c:	e5933004 	ldr	r3, [r3, #4]
  135a10:	e35300ff 	cmp	r3, #255	; 0xff
  135a14:	8a000005 	bhi	135a30 <ENET_Init+0x174>
  135a18:	e3002105 	movw	r2, #261	; 0x105
  135a1c:	e30917bc 	movw	r1, #38844	; 0x97bc
  135a20:	e3401014 	movt	r1, #20
  135a24:	e30904ec 	movw	r0, #38124	; 0x94ec
  135a28:	e3400014 	movt	r0, #20
  135a2c:	ebff36d9 	bl	103598 <rt_assert_handler>
    /* Make sure the buffers should be have the capability of process at least one maximum frame. */
    if (config->macSpecialConfig & kENET_ControlVLANTagEnable)
  135a30:	e51b3010 	ldr	r3, [fp, #-16]
  135a34:	e5933000 	ldr	r3, [r3]
  135a38:	e2033c02 	and	r3, r3, #512	; 0x200
  135a3c:	e3530000 	cmp	r3, #0
  135a40:	0a00000e 	beq	135a80 <ENET_Init+0x1c4>
    {
        RT_ASSERT(bufferConfig->txBuffSizeAlign * bufferConfig->txBdNumber > (ENET_FRAME_MAX_FRAMELEN + ENET_FRAME_VLAN_TAGLEN));
  135a44:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135a48:	e5933008 	ldr	r3, [r3, #8]
  135a4c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  135a50:	e1d220b2 	ldrh	r2, [r2, #2]
  135a54:	e0030392 	mul	r3, r2, r3
  135a58:	e30025f2 	movw	r2, #1522	; 0x5f2
  135a5c:	e1530002 	cmp	r3, r2
  135a60:	8a000023 	bhi	135af4 <ENET_Init+0x238>
  135a64:	e3002109 	movw	r2, #265	; 0x109
  135a68:	e30917bc 	movw	r1, #38844	; 0x97bc
  135a6c:	e3401014 	movt	r1, #20
  135a70:	e3090524 	movw	r0, #38180	; 0x9524
  135a74:	e3400014 	movt	r0, #20
  135a78:	ebff36c6 	bl	103598 <rt_assert_handler>
  135a7c:	ea00001c 	b	135af4 <ENET_Init+0x238>
    }
    else
    {
        RT_ASSERT(bufferConfig->txBuffSizeAlign * bufferConfig->txBdNumber > ENET_FRAME_MAX_FRAMELEN);
  135a80:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135a84:	e5933008 	ldr	r3, [r3, #8]
  135a88:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  135a8c:	e1d220b2 	ldrh	r2, [r2, #2]
  135a90:	e0030392 	mul	r3, r2, r3
  135a94:	e30025ee 	movw	r2, #1518	; 0x5ee
  135a98:	e1530002 	cmp	r3, r2
  135a9c:	8a000005 	bhi	135ab8 <ENET_Init+0x1fc>
  135aa0:	e300210d 	movw	r2, #269	; 0x10d
  135aa4:	e30917bc 	movw	r1, #38844	; 0x97bc
  135aa8:	e3401014 	movt	r1, #20
  135aac:	e3090594 	movw	r0, #38292	; 0x9594
  135ab0:	e3400014 	movt	r0, #20
  135ab4:	ebff36b7 	bl	103598 <rt_assert_handler>
        RT_ASSERT(bufferConfig->rxBuffSizeAlign * bufferConfig->rxBdNumber > config->rxMaxFrameLen);
  135ab8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135abc:	e5933004 	ldr	r3, [r3, #4]
  135ac0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  135ac4:	e1d220b0 	ldrh	r2, [r2]
  135ac8:	e0030392 	mul	r3, r2, r3
  135acc:	e51b2010 	ldr	r2, [fp, #-16]
  135ad0:	e1d220b8 	ldrh	r2, [r2, #8]
  135ad4:	e1530002 	cmp	r3, r2
  135ad8:	8a000005 	bhi	135af4 <ENET_Init+0x238>
  135adc:	e300210e 	movw	r2, #270	; 0x10e
  135ae0:	e30917bc 	movw	r1, #38844	; 0x97bc
  135ae4:	e3401014 	movt	r1, #20
  135ae8:	e30905e8 	movw	r0, #38376	; 0x95e8
  135aec:	e3400014 	movt	r0, #20
  135af0:	ebff36a8 	bl	103598 <rt_assert_handler>
    }

    /* Reset ENET module. */
    ENET_Reset(base);
  135af4:	e51b0008 	ldr	r0, [fp, #-8]
  135af8:	ebfffefd 	bl	1356f4 <ENET_Reset>
    /* Initializes the ENET transmit buffer descriptors. */
    ENET_SetTxBufferDescriptors(bufferConfig->txBdStartAddrAlign, bufferConfig->txPhyBufferAlign, bufferConfig->txBufferAlign, 
  135afc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135b00:	e5930010 	ldr	r0, [r3, #16]
  135b04:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135b08:	e5931028 	ldr	r1, [r3, #40]	; 0x28
  135b0c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135b10:	e5932018 	ldr	r2, [r3, #24]
  135b14:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135b18:	e593c008 	ldr	ip, [r3, #8]
                                bufferConfig->txBuffSizeAlign, bufferConfig->txBdNumber);
  135b1c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135b20:	e1d330b2 	ldrh	r3, [r3, #2]
    ENET_SetTxBufferDescriptors(bufferConfig->txBdStartAddrAlign, bufferConfig->txPhyBufferAlign, bufferConfig->txBufferAlign, 
  135b24:	e58d3000 	str	r3, [sp]
  135b28:	e1a0300c 	mov	r3, ip
  135b2c:	eb00018b 	bl	136160 <ENET_SetTxBufferDescriptors>
    /* Initializes the ENET receive buffer descriptors. */
    ENET_SetRxBufferDescriptors(bufferConfig->rxBdStartAddrAlign, bufferConfig->rxPhyBufferAlign, bufferConfig->rxBufferAlign, 
  135b30:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135b34:	e593000c 	ldr	r0, [r3, #12]
  135b38:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135b3c:	e5931024 	ldr	r1, [r3, #36]	; 0x24
  135b40:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135b44:	e5932014 	ldr	r2, [r3, #20]
  135b48:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135b4c:	e593c004 	ldr	ip, [r3, #4]
                                bufferConfig->rxBuffSizeAlign, bufferConfig->rxBdNumber,
  135b50:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135b54:	e1d330b0 	ldrh	r3, [r3]
    ENET_SetRxBufferDescriptors(bufferConfig->rxBdStartAddrAlign, bufferConfig->rxPhyBufferAlign, bufferConfig->rxBufferAlign, 
  135b58:	e1a0e003 	mov	lr, r3
                                !!(config->interrupt & (kENET_RxFrameInterrupt | kENET_RxBufferInterrupt)));
  135b5c:	e51b3010 	ldr	r3, [fp, #-16]
  135b60:	e5933004 	ldr	r3, [r3, #4]
  135b64:	e2033403 	and	r3, r3, #50331648	; 0x3000000
    ENET_SetRxBufferDescriptors(bufferConfig->rxBdStartAddrAlign, bufferConfig->rxPhyBufferAlign, bufferConfig->rxBufferAlign, 
  135b68:	e3530000 	cmp	r3, #0
  135b6c:	13a03001 	movne	r3, #1
  135b70:	03a03000 	moveq	r3, #0
  135b74:	e6ef3073 	uxtb	r3, r3
  135b78:	e58d3004 	str	r3, [sp, #4]
  135b7c:	e58de000 	str	lr, [sp]
  135b80:	e1a0300c 	mov	r3, ip
  135b84:	eb0001c7 	bl	1362a8 <ENET_SetRxBufferDescriptors>
    /* Initializes the ENET MAC controller. */
    ENET_SetMacController(base, config, bufferConfig, macAddr, srcClock_Hz);
  135b88:	e59b3008 	ldr	r3, [fp, #8]
  135b8c:	e58d3000 	str	r3, [sp]
  135b90:	e59b3004 	ldr	r3, [fp, #4]
  135b94:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  135b98:	e51b1010 	ldr	r1, [fp, #-16]
  135b9c:	e51b0008 	ldr	r0, [fp, #-8]
  135ba0:	eb00005e 	bl	135d20 <ENET_SetMacController>
    /* Set all buffers or data in handler for data transmit/receive process. */
    ENET_SetHandler(base, handle, config, bufferConfig);
  135ba4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135ba8:	e51b2010 	ldr	r2, [fp, #-16]
  135bac:	e51b100c 	ldr	r1, [fp, #-12]
  135bb0:	e51b0008 	ldr	r0, [fp, #-8]
  135bb4:	eb00002a 	bl	135c64 <ENET_SetHandler>
}
  135bb8:	e320f000 	nop	{0}
  135bbc:	e24bd004 	sub	sp, fp, #4
  135bc0:	e8bd8800 	pop	{fp, pc}

00135bc4 <ENET_Deinit>:

void ENET_Deinit(ENET_Type *base)
{
  135bc4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  135bc8:	e28db000 	add	fp, sp, #0
  135bcc:	e24dd00c 	sub	sp, sp, #12
  135bd0:	e50b0008 	str	r0, [fp, #-8]
    /* Disable interrupt. */
    base->EIMR = 0;
  135bd4:	e51b3008 	ldr	r3, [fp, #-8]
  135bd8:	e3a02000 	mov	r2, #0
  135bdc:	e5832008 	str	r2, [r3, #8]

    /* Disable ENET. */
    base->ECR &= ~ENET_ECR_ETHEREN_MASK;
  135be0:	e51b3008 	ldr	r3, [fp, #-8]
  135be4:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  135be8:	e3c32002 	bic	r2, r3, #2
  135bec:	e51b3008 	ldr	r3, [fp, #-8]
  135bf0:	e5832024 	str	r2, [r3, #36]	; 0x24

}
  135bf4:	e320f000 	nop	{0}
  135bf8:	e28bd000 	add	sp, fp, #0
  135bfc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  135c00:	e12fff1e 	bx	lr

00135c04 <ENET_SetCallback>:

void ENET_SetCallback(enet_handle_t *handle, enet_callback_t callback, void *userData)
{
  135c04:	e92d4800 	push	{fp, lr}
  135c08:	e28db004 	add	fp, sp, #4
  135c0c:	e24dd010 	sub	sp, sp, #16
  135c10:	e50b0008 	str	r0, [fp, #-8]
  135c14:	e50b100c 	str	r1, [fp, #-12]
  135c18:	e50b2010 	str	r2, [fp, #-16]
    RT_ASSERT(handle);
  135c1c:	e51b3008 	ldr	r3, [fp, #-8]
  135c20:	e3530000 	cmp	r3, #0
  135c24:	1a000005 	bne	135c40 <ENET_SetCallback+0x3c>
  135c28:	e3a02f4b 	mov	r2, #300	; 0x12c
  135c2c:	e30917c8 	movw	r1, #38856	; 0x97c8
  135c30:	e3401014 	movt	r1, #20
  135c34:	e309044c 	movw	r0, #37964	; 0x944c
  135c38:	e3400014 	movt	r0, #20
  135c3c:	ebff3655 	bl	103598 <rt_assert_handler>

    /* Set callback and userData. */
    handle->callback = callback;
  135c40:	e51b3008 	ldr	r3, [fp, #-8]
  135c44:	e51b200c 	ldr	r2, [fp, #-12]
  135c48:	e5832018 	str	r2, [r3, #24]
    handle->userData = userData;
  135c4c:	e51b3008 	ldr	r3, [fp, #-8]
  135c50:	e51b2010 	ldr	r2, [fp, #-16]
  135c54:	e583201c 	str	r2, [r3, #28]
}
  135c58:	e320f000 	nop	{0}
  135c5c:	e24bd004 	sub	sp, fp, #4
  135c60:	e8bd8800 	pop	{fp, pc}

00135c64 <ENET_SetHandler>:

static void ENET_SetHandler(ENET_Type *base,
                            enet_handle_t *handle,
                            const enet_config_t *config,
                            const enet_buffer_config_t *bufferConfig)
{
  135c64:	e92d4800 	push	{fp, lr}
  135c68:	e28db004 	add	fp, sp, #4
  135c6c:	e24dd018 	sub	sp, sp, #24
  135c70:	e50b0010 	str	r0, [fp, #-16]
  135c74:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  135c78:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  135c7c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    // struct rt_imx6ul_ethps *imx6ul_device = rt_container_of(config,struct rt_imx6ul_ethps,config);
    uint32_t instance = get_instance_by_base(base);
  135c80:	e51b0010 	ldr	r0, [fp, #-16]
  135c84:	ebfffcdf 	bl	135008 <get_instance_by_base>
  135c88:	e1a03000 	mov	r3, r0
  135c8c:	e50b3008 	str	r3, [fp, #-8]
    memset(handle, 0, sizeof(enet_handle_t));
  135c90:	e3a02020 	mov	r2, #32
  135c94:	e3a01000 	mov	r1, #0
  135c98:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  135c9c:	eb002b12 	bl	1408ec <memset>
    handle->rxBdBase = bufferConfig->rxBdStartAddrAlign;
  135ca0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  135ca4:	e593200c 	ldr	r2, [r3, #12]
  135ca8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135cac:	e5832000 	str	r2, [r3]
    handle->rxBdCurrent = bufferConfig->rxBdStartAddrAlign;
  135cb0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  135cb4:	e593200c 	ldr	r2, [r3, #12]
  135cb8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135cbc:	e5832004 	str	r2, [r3, #4]
    handle->txBdBase = bufferConfig->txBdStartAddrAlign;
  135cc0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  135cc4:	e5932010 	ldr	r2, [r3, #16]
  135cc8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135ccc:	e5832008 	str	r2, [r3, #8]
    handle->txBdCurrent = bufferConfig->txBdStartAddrAlign;
  135cd0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  135cd4:	e5932010 	ldr	r2, [r3, #16]
  135cd8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135cdc:	e583200c 	str	r2, [r3, #12]
    handle->rxBuffSizeAlign = bufferConfig->rxBuffSizeAlign;
  135ce0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  135ce4:	e5932004 	ldr	r2, [r3, #4]
  135ce8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135cec:	e5832010 	str	r2, [r3, #16]
    handle->txBuffSizeAlign = bufferConfig->txBuffSizeAlign;
  135cf0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  135cf4:	e5932008 	ldr	r2, [r3, #8]
  135cf8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135cfc:	e5832014 	str	r2, [r3, #20]

    /* Save the handle pointer in the global variables. */
    s_ENETHandle[instance] = handle;
  135d00:	e30e3384 	movw	r3, #58244	; 0xe384
  135d04:	e3403014 	movt	r3, #20
  135d08:	e51b2008 	ldr	r2, [fp, #-8]
  135d0c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  135d10:	e7831102 	str	r1, [r3, r2, lsl #2]
}
  135d14:	e320f000 	nop	{0}
  135d18:	e24bd004 	sub	sp, fp, #4
  135d1c:	e8bd8800 	pop	{fp, pc}

00135d20 <ENET_SetMacController>:
static void ENET_SetMacController(ENET_Type *base,
                                  const enet_config_t *config,
                                  const enet_buffer_config_t *bufferConfig,
                                  uint8_t *macAddr,
                                  uint32_t srcClock_Hz)
{
  135d20:	e92d4800 	push	{fp, lr}
  135d24:	e28db004 	add	fp, sp, #4
  135d28:	e24dd030 	sub	sp, sp, #48	; 0x30
  135d2c:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  135d30:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  135d34:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  135d38:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
    uint32_t rcr = 0;
  135d3c:	e3a03000 	mov	r3, #0
  135d40:	e50b3008 	str	r3, [fp, #-8]
    uint32_t tcr = 0;
  135d44:	e3a03000 	mov	r3, #0
  135d48:	e50b3010 	str	r3, [fp, #-16]
    uint32_t ecr = 0;
  135d4c:	e3a03000 	mov	r3, #0
  135d50:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    uint32_t macSpecialConfig = config->macSpecialConfig;
  135d54:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  135d58:	e5933000 	ldr	r3, [r3]
  135d5c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    uint32_t maxFrameLen = config->rxMaxFrameLen;
  135d60:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  135d64:	e1d330b8 	ldrh	r3, [r3, #8]
  135d68:	e50b300c 	str	r3, [fp, #-12]

    /* Maximum frame length check. */
    if ((macSpecialConfig & kENET_ControlVLANTagEnable) && (maxFrameLen <= ENET_FRAME_MAX_FRAMELEN))
  135d6c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  135d70:	e2033c02 	and	r3, r3, #512	; 0x200
  135d74:	e3530000 	cmp	r3, #0
  135d78:	0a000005 	beq	135d94 <ENET_SetMacController+0x74>
  135d7c:	e51b300c 	ldr	r3, [fp, #-12]
  135d80:	e30025ee 	movw	r2, #1518	; 0x5ee
  135d84:	e1530002 	cmp	r3, r2
  135d88:	8a000001 	bhi	135d94 <ENET_SetMacController+0x74>
    {
        maxFrameLen = (ENET_FRAME_MAX_FRAMELEN + ENET_FRAME_VLAN_TAGLEN);
  135d8c:	e30035f2 	movw	r3, #1522	; 0x5f2
  135d90:	e50b300c 	str	r3, [fp, #-12]
    }

    /* Configures MAC receive controller with user configure structure. */
    rcr = ENET_RCR_NLC(!!(macSpecialConfig & kENET_ControlRxPayloadCheckEnable)) |
  135d94:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  135d98:	e1a03e83 	lsl	r3, r3, #29
  135d9c:	e2032101 	and	r2, r3, #1073741824	; 0x40000000
          ENET_RCR_CFEN(!!(macSpecialConfig & kENET_ControlFlowControlEnable)) |
  135da0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  135da4:	e1a03783 	lsl	r3, r3, #15
  135da8:	e6ff3073 	uxth	r3, r3
    rcr = ENET_RCR_NLC(!!(macSpecialConfig & kENET_ControlRxPayloadCheckEnable)) |
  135dac:	e1822003 	orr	r2, r2, r3
          ENET_RCR_FCE(!!(macSpecialConfig & kENET_ControlFlowControlEnable)) |
  135db0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  135db4:	e1a03283 	lsl	r3, r3, #5
  135db8:	e2033020 	and	r3, r3, #32
          ENET_RCR_CFEN(!!(macSpecialConfig & kENET_ControlFlowControlEnable)) |
  135dbc:	e1822003 	orr	r2, r2, r3
          ENET_RCR_PADEN(!!(macSpecialConfig & kENET_ControlRxPadRemoveEnable)) |
  135dc0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  135dc4:	e1a03503 	lsl	r3, r3, #10
  135dc8:	e2033a01 	and	r3, r3, #4096	; 0x1000
          ENET_RCR_FCE(!!(macSpecialConfig & kENET_ControlFlowControlEnable)) |
  135dcc:	e1822003 	orr	r2, r2, r3
          ENET_RCR_BC_REJ(!!(macSpecialConfig & kENET_ControlRxBroadCastRejectEnable)) |
  135dd0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  135dd4:	e1a03083 	lsl	r3, r3, #1
  135dd8:	e2033010 	and	r3, r3, #16
          ENET_RCR_PADEN(!!(macSpecialConfig & kENET_ControlRxPadRemoveEnable)) |
  135ddc:	e1822003 	orr	r2, r2, r3
          ENET_RCR_PROM(!!(macSpecialConfig & kENET_ControlPromiscuousEnable)) | ENET_RCR_MII_MODE(1) |
  135de0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  135de4:	e1a03223 	lsr	r3, r3, #4
  135de8:	e2033008 	and	r3, r3, #8
          ENET_RCR_BC_REJ(!!(macSpecialConfig & kENET_ControlRxBroadCastRejectEnable)) |
  135dec:	e1822003 	orr	r2, r2, r3
          ENET_RCR_RMII_MODE(config->miiMode) | ENET_RCR_RMII_10T(!config->miiSpeed) |
  135df0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  135df4:	e593300c 	ldr	r3, [r3, #12]
  135df8:	e1a03403 	lsl	r3, r3, #8
  135dfc:	e2033c01 	and	r3, r3, #256	; 0x100
          ENET_RCR_PROM(!!(macSpecialConfig & kENET_ControlPromiscuousEnable)) | ENET_RCR_MII_MODE(1) |
  135e00:	e1823003 	orr	r3, r2, r3
          ENET_RCR_RMII_MODE(config->miiMode) | ENET_RCR_RMII_10T(!config->miiSpeed) |
  135e04:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  135e08:	e5922010 	ldr	r2, [r2, #16]
  135e0c:	e3520000 	cmp	r2, #0
  135e10:	1a000001 	bne	135e1c <ENET_SetMacController+0xfc>
  135e14:	e3a02c02 	mov	r2, #512	; 0x200
  135e18:	ea000000 	b	135e20 <ENET_SetMacController+0x100>
  135e1c:	e3a02000 	mov	r2, #0
  135e20:	e1822003 	orr	r2, r2, r3
          ENET_RCR_MAX_FL(maxFrameLen) | ENET_RCR_CRCFWD(1);
  135e24:	e51b300c 	ldr	r3, [fp, #-12]
  135e28:	e1a01803 	lsl	r1, r3, #16
  135e2c:	e3a03000 	mov	r3, #0
  135e30:	e3433fff 	movt	r3, #16383	; 0x3fff
  135e34:	e0033001 	and	r3, r3, r1
          ENET_RCR_RMII_MODE(config->miiMode) | ENET_RCR_RMII_10T(!config->miiSpeed) |
  135e38:	e1823003 	orr	r3, r2, r3
    rcr = ENET_RCR_NLC(!!(macSpecialConfig & kENET_ControlRxPayloadCheckEnable)) |
  135e3c:	e3833901 	orr	r3, r3, #16384	; 0x4000
  135e40:	e3833004 	orr	r3, r3, #4
  135e44:	e50b3008 	str	r3, [fp, #-8]
    /* Receive setting for half duplex. */
    if (config->miiDuplex == kENET_MiiHalfDuplex)
  135e48:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  135e4c:	e5933014 	ldr	r3, [r3, #20]
  135e50:	e3530000 	cmp	r3, #0
  135e54:	1a000002 	bne	135e64 <ENET_SetMacController+0x144>
    {
        rcr |= ENET_RCR_DRT_MASK;
  135e58:	e51b3008 	ldr	r3, [fp, #-8]
  135e5c:	e3833002 	orr	r3, r3, #2
  135e60:	e50b3008 	str	r3, [fp, #-8]
    }
    /* Sets internal loop only for MII mode. */
    if ((config->macSpecialConfig & kENET_ControlMIILoopEnable) && (config->miiMode == kENET_MiiMode))
  135e64:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  135e68:	e5933000 	ldr	r3, [r3]
  135e6c:	e2033c01 	and	r3, r3, #256	; 0x100
  135e70:	e3530000 	cmp	r3, #0
  135e74:	0a000009 	beq	135ea0 <ENET_SetMacController+0x180>
  135e78:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  135e7c:	e593300c 	ldr	r3, [r3, #12]
  135e80:	e3530000 	cmp	r3, #0
  135e84:	1a000005 	bne	135ea0 <ENET_SetMacController+0x180>
    {
        rcr |= ENET_RCR_LOOP_MASK;
  135e88:	e51b3008 	ldr	r3, [fp, #-8]
  135e8c:	e3833001 	orr	r3, r3, #1
  135e90:	e50b3008 	str	r3, [fp, #-8]
        rcr &= ~ENET_RCR_DRT_MASK;
  135e94:	e51b3008 	ldr	r3, [fp, #-8]
  135e98:	e3c33002 	bic	r3, r3, #2
  135e9c:	e50b3008 	str	r3, [fp, #-8]
    }
    base->RCR = rcr;
  135ea0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  135ea4:	e51b2008 	ldr	r2, [fp, #-8]
  135ea8:	e5832084 	str	r2, [r3, #132]	; 0x84

    /* Configures MAC transmit controller: duplex mode, mac address insertion. */
    tcr = base->TCR & ~(ENET_TCR_FDEN_MASK | ENET_TCR_ADDINS_MASK);
  135eac:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  135eb0:	e59330c4 	ldr	r3, [r3, #196]	; 0xc4
  135eb4:	e3c33f41 	bic	r3, r3, #260	; 0x104
  135eb8:	e50b3010 	str	r3, [fp, #-16]
    tcr |= ENET_TCR_FDEN(config->miiDuplex) | ENET_TCR_ADDINS(!!(macSpecialConfig & kENET_ControlMacAddrInsert));
  135ebc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  135ec0:	e5933014 	ldr	r3, [r3, #20]
  135ec4:	e1a03103 	lsl	r3, r3, #2
  135ec8:	e2032004 	and	r2, r3, #4
  135ecc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  135ed0:	e1a03203 	lsl	r3, r3, #4
  135ed4:	e2033c01 	and	r3, r3, #256	; 0x100
  135ed8:	e1823003 	orr	r3, r2, r3
  135edc:	e51b2010 	ldr	r2, [fp, #-16]
  135ee0:	e1823003 	orr	r3, r2, r3
  135ee4:	e50b3010 	str	r3, [fp, #-16]
    base->TCR = tcr;
  135ee8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  135eec:	e51b2010 	ldr	r2, [fp, #-16]
  135ef0:	e58320c4 	str	r2, [r3, #196]	; 0xc4

    /* Configures receive and transmit accelerator. */
    base->TACC = config->txAccelerConfig;
  135ef4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  135ef8:	e5d33019 	ldrb	r3, [r3, #25]
  135efc:	e1a02003 	mov	r2, r3
  135f00:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  135f04:	e58321c0 	str	r2, [r3, #448]	; 0x1c0
    base->RACC = config->rxAccelerConfig;
  135f08:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  135f0c:	e5d33018 	ldrb	r3, [r3, #24]
  135f10:	e1a02003 	mov	r2, r3
  135f14:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  135f18:	e58321c4 	str	r2, [r3, #452]	; 0x1c4

    /* Sets the pause duration and FIFO threshold for the flow control enabled case. */
    if (macSpecialConfig & kENET_ControlFlowControlEnable)
  135f1c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  135f20:	e2033001 	and	r3, r3, #1
  135f24:	e3530000 	cmp	r3, #0
  135f28:	0a00000a 	beq	135f58 <ENET_SetMacController+0x238>
    {
        uint32_t reemReg;
        base->OPD = config->pauseDuration;
  135f2c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  135f30:	e1d331ba 	ldrh	r3, [r3, #26]
  135f34:	e1a02003 	mov	r2, r3
  135f38:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  135f3c:	e58320ec 	str	r2, [r3, #236]	; 0xec
        reemReg = ENET_RSEM_RX_SECTION_EMPTY(config->rxFifoEmptyThreshold);
  135f40:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  135f44:	e5d3301c 	ldrb	r3, [r3, #28]
  135f48:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
#if defined (FSL_FEATURE_ENET_HAS_RECEIVE_STATUS_THRESHOLD) && FSL_FEATURE_ENET_HAS_RECEIVE_STATUS_THRESHOLD
        reemReg |= ENET_RSEM_STAT_SECTION_EMPTY(config->rxFifoStatEmptyThreshold);
#endif /* FSL_FEATURE_ENET_HAS_RECEIVE_STATUS_THRESHOLD */
        base->RSEM = reemReg;
  135f4c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  135f50:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  135f54:	e5832194 	str	r2, [r3, #404]	; 0x194
    }

    /* FIFO threshold setting for store and forward enable/disable case. */
    if (macSpecialConfig & kENET_ControlStoreAndFwdDisable)
  135f58:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  135f5c:	e2033020 	and	r3, r3, #32
  135f60:	e3530000 	cmp	r3, #0
  135f64:	0a00000a 	beq	135f94 <ENET_SetMacController+0x274>
    {
        /* Transmit fifo watermark settings. */
        base->TFWR = config->txFifoWatermark & ENET_TFWR_TFWR_MASK;
  135f68:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  135f6c:	e5d3301e 	ldrb	r3, [r3, #30]
  135f70:	e203203f 	and	r2, r3, #63	; 0x3f
  135f74:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  135f78:	e5832144 	str	r2, [r3, #324]	; 0x144
        /* Receive fifo full threshold settings. */
        base->RSFL = config->rxFifoFullThreshold & ENET_RSFL_RX_SECTION_FULL_MASK;
  135f7c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  135f80:	e5d3301d 	ldrb	r3, [r3, #29]
  135f84:	e1a02003 	mov	r2, r3
  135f88:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  135f8c:	e5832190 	str	r2, [r3, #400]	; 0x190
  135f90:	ea000005 	b	135fac <ENET_SetMacController+0x28c>
    }
    else
    {
        /* Transmit fifo watermark settings. */
        base->TFWR = ENET_TFWR_STRFWD_MASK;
  135f94:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  135f98:	e3a02c01 	mov	r2, #256	; 0x100
  135f9c:	e5832144 	str	r2, [r3, #324]	; 0x144
        base->RSFL = 0;
  135fa0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  135fa4:	e3a02000 	mov	r2, #0
  135fa8:	e5832190 	str	r2, [r3, #400]	; 0x190
    }

    /* Enable store and forward when accelerator is enabled */
    if (config->txAccelerConfig & (kENET_TxAccelIpCheckEnabled | kENET_TxAccelProtoCheckEnabled))
  135fac:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  135fb0:	e5d33019 	ldrb	r3, [r3, #25]
  135fb4:	e2033018 	and	r3, r3, #24
  135fb8:	e3530000 	cmp	r3, #0
  135fbc:	0a000002 	beq	135fcc <ENET_SetMacController+0x2ac>
    {
        base->TFWR = ENET_TFWR_STRFWD_MASK;
  135fc0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  135fc4:	e3a02c01 	mov	r2, #256	; 0x100
  135fc8:	e5832144 	str	r2, [r3, #324]	; 0x144
    }
    if (config->rxAccelerConfig & (kENET_RxAccelIpCheckEnabled | kENET_RxAccelProtoCheckEnabled))
  135fcc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  135fd0:	e5d33018 	ldrb	r3, [r3, #24]
  135fd4:	e2033006 	and	r3, r3, #6
  135fd8:	e3530000 	cmp	r3, #0
  135fdc:	0a000002 	beq	135fec <ENET_SetMacController+0x2cc>
    {
        base->RSFL = 0;
  135fe0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  135fe4:	e3a02000 	mov	r2, #0
  135fe8:	e5832190 	str	r2, [r3, #400]	; 0x190
    }

    /* Initializes transmit buffer descriptor rings start address, two start address should be aligned. */
    base->TDSR = (uint32_t)bufferConfig->txPhyBdStartAddrAlign;
  135fec:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  135ff0:	e5933020 	ldr	r3, [r3, #32]
  135ff4:	e1a02003 	mov	r2, r3
  135ff8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  135ffc:	e5832184 	str	r2, [r3, #388]	; 0x184
    base->RDSR = (uint32_t)bufferConfig->rxPhyBdStartAddrAlign;
  136000:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  136004:	e593301c 	ldr	r3, [r3, #28]
  136008:	e1a02003 	mov	r2, r3
  13600c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136010:	e5832180 	str	r2, [r3, #384]	; 0x180

    /* Initializes the maximum buffer size, the buffer size should be aligned. */

    base->MRBR = ENET_MRBR_R_BUF_SIZE(bufferConfig->rxBuffSizeAlign);
  136014:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  136018:	e5933004 	ldr	r3, [r3, #4]
  13601c:	e1a02203 	lsl	r2, r3, #4
  136020:	e3033ff0 	movw	r3, #16368	; 0x3ff0
  136024:	e0033002 	and	r3, r3, r2
  136028:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  13602c:	e5823188 	str	r3, [r2, #392]	; 0x188

    /* Configures the Mac address. */
    ENET_SetMacAddr(base, macAddr);
  136030:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  136034:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  136038:	eb00011e 	bl	1364b8 <ENET_SetMacAddr>

    /* Initialize the SMI if uninitialized. */
    if (!ENET_GetSMI(base))
  13603c:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  136040:	ebfffdb8 	bl	135728 <ENET_GetSMI>
  136044:	e1a03000 	mov	r3, r0
  136048:	e2233001 	eor	r3, r3, #1
  13604c:	e6ef3073 	uxtb	r3, r3
  136050:	e3530000 	cmp	r3, #0
  136054:	0a00000a 	beq	136084 <ENET_SetMacController+0x364>
    {
        ENET_SetSMI(base, srcClock_Hz, !!(config->macSpecialConfig & kENET_ControlSMIPreambleDisable));
  136058:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  13605c:	e5933000 	ldr	r3, [r3]
  136060:	e2033040 	and	r3, r3, #64	; 0x40
  136064:	e3530000 	cmp	r3, #0
  136068:	13a03001 	movne	r3, #1
  13606c:	03a03000 	moveq	r3, #0
  136070:	e6ef3073 	uxtb	r3, r3
  136074:	e1a02003 	mov	r2, r3
  136078:	e59b1004 	ldr	r1, [fp, #4]
  13607c:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  136080:	eb000171 	bl	13664c <ENET_SetSMI>
    }
/* Enables Ethernet interrupt and NVIC. */
#if defined(FSL_FEATURE_ENET_HAS_INTERRUPT_COALESCE) && FSL_FEATURE_ENET_HAS_INTERRUPT_COALESCE
    if (config->intCoalesceCfg)
  136084:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136088:	e5933020 	ldr	r3, [r3, #32]
  13608c:	e3530000 	cmp	r3, #0
  136090:	0a000020 	beq	136118 <ENET_SetMacController+0x3f8>
    {
        uint32_t intMask = (ENET_EIMR_TXB_MASK | ENET_EIMR_RXB_MASK);
  136094:	e3a03405 	mov	r3, #83886080	; 0x5000000
  136098:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0

        /* Clear all buffer interrupts. */
        base->EIMR &= ~intMask;
  13609c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1360a0:	e5932008 	ldr	r2, [r3, #8]
  1360a4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1360a8:	e1e03003 	mvn	r3, r3
  1360ac:	e0022003 	and	r2, r2, r3
  1360b0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1360b4:	e5832008 	str	r2, [r3, #8]
        /* Set the interrupt coalescence. */
        base->TXIC = ENET_TXIC_ICFT(config->intCoalesceCfg->txCoalesceFrameCount[0]) |
  1360b8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1360bc:	e5933020 	ldr	r3, [r3, #32]
  1360c0:	e5d33000 	ldrb	r3, [r3]
  1360c4:	e1a03a03 	lsl	r3, r3, #20
  1360c8:	e20336ff 	and	r3, r3, #267386880	; 0xff00000
                     config->intCoalesceCfg->txCoalesceTimeCount[0] | ENET_TXIC_ICCS_MASK | ENET_TXIC_ICEN_MASK;
  1360cc:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  1360d0:	e5922020 	ldr	r2, [r2, #32]
  1360d4:	e1d220b2 	ldrh	r2, [r2, #2]
        base->TXIC = ENET_TXIC_ICFT(config->intCoalesceCfg->txCoalesceFrameCount[0]) |
  1360d8:	e1833002 	orr	r3, r3, r2
                     config->intCoalesceCfg->txCoalesceTimeCount[0] | ENET_TXIC_ICCS_MASK | ENET_TXIC_ICEN_MASK;
  1360dc:	e3832103 	orr	r2, r3, #-1073741824	; 0xc0000000
        base->TXIC = ENET_TXIC_ICFT(config->intCoalesceCfg->txCoalesceFrameCount[0]) |
  1360e0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1360e4:	e58320f0 	str	r2, [r3, #240]	; 0xf0
        base->RXIC = ENET_RXIC_ICFT(config->intCoalesceCfg->rxCoalesceFrameCount[0]) |
  1360e8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1360ec:	e5933020 	ldr	r3, [r3, #32]
  1360f0:	e5d33004 	ldrb	r3, [r3, #4]
  1360f4:	e1a03a03 	lsl	r3, r3, #20
  1360f8:	e20336ff 	and	r3, r3, #267386880	; 0xff00000
                     config->intCoalesceCfg->rxCoalesceTimeCount[0] | ENET_RXIC_ICCS_MASK | ENET_RXIC_ICEN_MASK;
  1360fc:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  136100:	e5922020 	ldr	r2, [r2, #32]
  136104:	e1d220b6 	ldrh	r2, [r2, #6]
        base->RXIC = ENET_RXIC_ICFT(config->intCoalesceCfg->rxCoalesceFrameCount[0]) |
  136108:	e1833002 	orr	r3, r3, r2
                     config->intCoalesceCfg->rxCoalesceTimeCount[0] | ENET_RXIC_ICCS_MASK | ENET_RXIC_ICEN_MASK;
  13610c:	e3832103 	orr	r2, r3, #-1073741824	; 0xc0000000
        base->RXIC = ENET_RXIC_ICFT(config->intCoalesceCfg->rxCoalesceFrameCount[0]) |
  136110:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136114:	e5832100 	str	r2, [r3, #256]	; 0x100
    }
#endif /* FSL_FEATURE_ENET_HAS_INTERRUPT_COALESCE */
    ENET_EnableInterrupts(base, config->interrupt);
  136118:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  13611c:	e5933004 	ldr	r3, [r3, #4]
  136120:	e1a01003 	mov	r1, r3
  136124:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  136128:	ebfffd8d 	bl	135764 <ENET_EnableInterrupts>

    /* ENET control register setting. */
    ecr = base->ECR;
  13612c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136130:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  136134:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

    /* Enables Ethernet module after all configuration except the buffer descriptor active. */
    ecr |= ENET_ECR_ETHEREN_MASK | ENET_ECR_DBSWP_MASK;
  136138:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13613c:	e3833c01 	orr	r3, r3, #256	; 0x100
  136140:	e3833002 	orr	r3, r3, #2
  136144:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    base->ECR = ecr;
  136148:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  13614c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  136150:	e5832024 	str	r2, [r3, #36]	; 0x24
}
  136154:	e320f000 	nop	{0}
  136158:	e24bd004 	sub	sp, fp, #4
  13615c:	e8bd8800 	pop	{fp, pc}

00136160 <ENET_SetTxBufferDescriptors>:
static void ENET_SetTxBufferDescriptors(volatile enet_tx_bd_struct_t *txBdStartAlign,
                                        uint8_t *txBuffStartAlign,
                                        uint8_t *txBuffStartAlign_vaddr,
                                        uint32_t txBuffSizeAlign,
                                        uint32_t txBdNumber)
{
  136160:	e92d4800 	push	{fp, lr}
  136164:	e28db004 	add	fp, sp, #4
  136168:	e24dd018 	sub	sp, sp, #24
  13616c:	e50b0010 	str	r0, [fp, #-16]
  136170:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  136174:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  136178:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(txBdStartAlign);
  13617c:	e51b3010 	ldr	r3, [fp, #-16]
  136180:	e3530000 	cmp	r3, #0
  136184:	1a000005 	bne	1361a0 <ENET_SetTxBufferDescriptors+0x40>
  136188:	e30021cb 	movw	r2, #459	; 0x1cb
  13618c:	e30917dc 	movw	r1, #38876	; 0x97dc
  136190:	e3401014 	movt	r1, #20
  136194:	e309063c 	movw	r0, #38460	; 0x963c
  136198:	e3400014 	movt	r0, #20
  13619c:	ebff34fd 	bl	103598 <rt_assert_handler>
    RT_ASSERT(txBuffStartAlign);
  1361a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1361a4:	e3530000 	cmp	r3, #0
  1361a8:	1a000005 	bne	1361c4 <ENET_SetTxBufferDescriptors+0x64>
  1361ac:	e3a02f73 	mov	r2, #460	; 0x1cc
  1361b0:	e30917dc 	movw	r1, #38876	; 0x97dc
  1361b4:	e3401014 	movt	r1, #20
  1361b8:	e309064c 	movw	r0, #38476	; 0x964c
  1361bc:	e3400014 	movt	r0, #20
  1361c0:	ebff34f4 	bl	103598 <rt_assert_handler>
    uint32_t count;
    volatile enet_tx_bd_struct_t *curBuffDescrip = txBdStartAlign;
  1361c4:	e51b3010 	ldr	r3, [fp, #-16]
  1361c8:	e50b300c 	str	r3, [fp, #-12]
    for (count = 0; count < txBdNumber; count++)
  1361cc:	e3a03000 	mov	r3, #0
  1361d0:	e50b3008 	str	r3, [fp, #-8]
  1361d4:	ea00002c 	b	13628c <ENET_SetTxBufferDescriptors+0x12c>
    {

        /* Set data buffer address. */
        curBuffDescrip->buffer = (uint8_t *)ueth_v2p((void*)&txBuffStartAlign_vaddr[count * txBuffSizeAlign]);
  1361d8:	e51b3008 	ldr	r3, [fp, #-8]
  1361dc:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1361e0:	e0030392 	mul	r3, r2, r3
  1361e4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1361e8:	e0823003 	add	r3, r2, r3
  1361ec:	e1a00003 	mov	r0, r3
  1361f0:	ebff3786 	bl	104010 <ueth_v2p>
  1361f4:	e1a02000 	mov	r2, r0
  1361f8:	e51b300c 	ldr	r3, [fp, #-12]
  1361fc:	e5832004 	str	r2, [r3, #4]
        buffer_vaddr_tx[count] = (uint8_t *)ueth_remap(curBuffDescrip->buffer, UETH_REMAP_NOCACHE, txBuffSizeAlign);
  136200:	e51b300c 	ldr	r3, [fp, #-12]
  136204:	e5933004 	ldr	r3, [r3, #4]
  136208:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  13620c:	e3a01003 	mov	r1, #3
  136210:	e1a00003 	mov	r0, r3
  136214:	ebff37aa 	bl	1040c4 <ueth_remap>
  136218:	e1a01000 	mov	r1, r0
  13621c:	e3053400 	movw	r3, #21504	; 0x5400
  136220:	e3403057 	movt	r3, #87	; 0x57
  136224:	e51b2008 	ldr	r2, [fp, #-8]
  136228:	e7831102 	str	r1, [r3, r2, lsl #2]
        /* Initializes data length. */
        curBuffDescrip->length = 0;
  13622c:	e51b300c 	ldr	r3, [fp, #-12]
  136230:	e3a02000 	mov	r2, #0
  136234:	e1c320b0 	strh	r2, [r3]
        /* Sets the crc. */
        curBuffDescrip->control = (ENET_BUFFDESCRIPTOR_TX_TRANMITCRC_MASK);
  136238:	e51b300c 	ldr	r3, [fp, #-12]
  13623c:	e3a02b01 	mov	r2, #1024	; 0x400
  136240:	e1c320b2 	strh	r2, [r3, #2]
        /* Sets the last buffer descriptor with the wrap flag. */
        if (count == txBdNumber - 1)
  136244:	e59b3004 	ldr	r3, [fp, #4]
  136248:	e2433001 	sub	r3, r3, #1
  13624c:	e51b2008 	ldr	r2, [fp, #-8]
  136250:	e1520003 	cmp	r2, r3
  136254:	1a000006 	bne	136274 <ENET_SetTxBufferDescriptors+0x114>
        {
            curBuffDescrip->control |= ENET_BUFFDESCRIPTOR_TX_WRAP_MASK;
  136258:	e51b300c 	ldr	r3, [fp, #-12]
  13625c:	e1d330b2 	ldrh	r3, [r3, #2]
  136260:	e6ff3073 	uxth	r3, r3
  136264:	e3833a02 	orr	r3, r3, #8192	; 0x2000
  136268:	e6ff2073 	uxth	r2, r3
  13626c:	e51b300c 	ldr	r3, [fp, #-12]
  136270:	e1c320b2 	strh	r2, [r3, #2]
        }

        /* Increase the index. */
        curBuffDescrip++;
  136274:	e51b300c 	ldr	r3, [fp, #-12]
  136278:	e2833008 	add	r3, r3, #8
  13627c:	e50b300c 	str	r3, [fp, #-12]
    for (count = 0; count < txBdNumber; count++)
  136280:	e51b3008 	ldr	r3, [fp, #-8]
  136284:	e2833001 	add	r3, r3, #1
  136288:	e50b3008 	str	r3, [fp, #-8]
  13628c:	e51b2008 	ldr	r2, [fp, #-8]
  136290:	e59b3004 	ldr	r3, [fp, #4]
  136294:	e1520003 	cmp	r2, r3
  136298:	3affffce 	bcc	1361d8 <ENET_SetTxBufferDescriptors+0x78>
    }
}
  13629c:	e320f000 	nop	{0}
  1362a0:	e24bd004 	sub	sp, fp, #4
  1362a4:	e8bd8800 	pop	{fp, pc}

001362a8 <ENET_SetRxBufferDescriptors>:
                                        uint8_t *rxBuffStartAlign,
                                        uint8_t *rxBuffStartAlign_vaddr,
                                        uint32_t rxBuffSizeAlign,
                                        uint32_t rxBdNumber,
                                        bool enableInterrupt)
{
  1362a8:	e92d4800 	push	{fp, lr}
  1362ac:	e28db004 	add	fp, sp, #4
  1362b0:	e24dd018 	sub	sp, sp, #24
  1362b4:	e50b0010 	str	r0, [fp, #-16]
  1362b8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1362bc:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  1362c0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(rxBdStartAlign);
  1362c4:	e51b3010 	ldr	r3, [fp, #-16]
  1362c8:	e3530000 	cmp	r3, #0
  1362cc:	1a000005 	bne	1362e8 <ENET_SetRxBufferDescriptors+0x40>
  1362d0:	e30021eb 	movw	r2, #491	; 0x1eb
  1362d4:	e30917f8 	movw	r1, #38904	; 0x97f8
  1362d8:	e3401014 	movt	r1, #20
  1362dc:	e3090660 	movw	r0, #38496	; 0x9660
  1362e0:	e3400014 	movt	r0, #20
  1362e4:	ebff34ab 	bl	103598 <rt_assert_handler>
    RT_ASSERT(rxBuffStartAlign);
  1362e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1362ec:	e3530000 	cmp	r3, #0
  1362f0:	1a000005 	bne	13630c <ENET_SetRxBufferDescriptors+0x64>
  1362f4:	e3a02f7b 	mov	r2, #492	; 0x1ec
  1362f8:	e30917f8 	movw	r1, #38904	; 0x97f8
  1362fc:	e3401014 	movt	r1, #20
  136300:	e3090670 	movw	r0, #38512	; 0x9670
  136304:	e3400014 	movt	r0, #20
  136308:	ebff34a2 	bl	103598 <rt_assert_handler>

    volatile enet_rx_bd_struct_t *curBuffDescrip = rxBdStartAlign;
  13630c:	e51b3010 	ldr	r3, [fp, #-16]
  136310:	e50b3008 	str	r3, [fp, #-8]
    uint32_t count = 0;
  136314:	e3a03000 	mov	r3, #0
  136318:	e50b300c 	str	r3, [fp, #-12]

    /* Initializes receive buffer descriptors. */
    for (count = 0; count < rxBdNumber; count++)
  13631c:	e3a03000 	mov	r3, #0
  136320:	e50b300c 	str	r3, [fp, #-12]
  136324:	ea00002c 	b	1363dc <ENET_SetRxBufferDescriptors+0x134>
    {
        /* Set data buffer and the length. */
        curBuffDescrip->buffer = (uint8_t *)ueth_v2p((void*)&rxBuffStartAlign_vaddr[count * rxBuffSizeAlign]);
  136328:	e51b300c 	ldr	r3, [fp, #-12]
  13632c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  136330:	e0030392 	mul	r3, r2, r3
  136334:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  136338:	e0823003 	add	r3, r2, r3
  13633c:	e1a00003 	mov	r0, r3
  136340:	ebff3732 	bl	104010 <ueth_v2p>
  136344:	e1a02000 	mov	r2, r0
  136348:	e51b3008 	ldr	r3, [fp, #-8]
  13634c:	e5832004 	str	r2, [r3, #4]
        buffer_vaddr_rx[count] = (uint8_t *)ueth_remap(curBuffDescrip->buffer, UETH_REMAP_NOCACHE, rxBuffSizeAlign);
  136350:	e51b3008 	ldr	r3, [fp, #-8]
  136354:	e5933004 	ldr	r3, [r3, #4]
  136358:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  13635c:	e3a01003 	mov	r1, #3
  136360:	e1a00003 	mov	r0, r3
  136364:	ebff3756 	bl	1040c4 <ueth_remap>
  136368:	e1a01000 	mov	r1, r0
  13636c:	e3053200 	movw	r3, #20992	; 0x5200
  136370:	e3403057 	movt	r3, #87	; 0x57
  136374:	e51b200c 	ldr	r2, [fp, #-12]
  136378:	e7831102 	str	r1, [r3, r2, lsl #2]
        curBuffDescrip->length = 0;
  13637c:	e51b3008 	ldr	r3, [fp, #-8]
  136380:	e3a02000 	mov	r2, #0
  136384:	e1c320b0 	strh	r2, [r3]
        /* Initializes the buffer descriptors with empty bit. */
        curBuffDescrip->control = ENET_BUFFDESCRIPTOR_RX_EMPTY_MASK;
  136388:	e51b3008 	ldr	r3, [fp, #-8]
  13638c:	e3a02902 	mov	r2, #32768	; 0x8000
  136390:	e1c320b2 	strh	r2, [r3, #2]
        /* Sets the last buffer descriptor with the wrap flag. */
        if (count == rxBdNumber - 1)
  136394:	e59b3004 	ldr	r3, [fp, #4]
  136398:	e2433001 	sub	r3, r3, #1
  13639c:	e51b200c 	ldr	r2, [fp, #-12]
  1363a0:	e1520003 	cmp	r2, r3
  1363a4:	1a000006 	bne	1363c4 <ENET_SetRxBufferDescriptors+0x11c>
        {
            curBuffDescrip->control |= ENET_BUFFDESCRIPTOR_RX_WRAP_MASK;
  1363a8:	e51b3008 	ldr	r3, [fp, #-8]
  1363ac:	e1d330b2 	ldrh	r3, [r3, #2]
  1363b0:	e6ff3073 	uxth	r3, r3
  1363b4:	e3833a02 	orr	r3, r3, #8192	; 0x2000
  1363b8:	e6ff2073 	uxth	r2, r3
  1363bc:	e51b3008 	ldr	r3, [fp, #-8]
  1363c0:	e1c320b2 	strh	r2, [r3, #2]
        
#ifdef ENET_ENHANCEDBUFFERDESCRIPTOR_MODE
        curBuffDescrip->controlExtend1 |= ENET_BUFFDESCRIPTOR_RX_INTERRUPT_MASK;
#endif

        curBuffDescrip++;
  1363c4:	e51b3008 	ldr	r3, [fp, #-8]
  1363c8:	e2833008 	add	r3, r3, #8
  1363cc:	e50b3008 	str	r3, [fp, #-8]
    for (count = 0; count < rxBdNumber; count++)
  1363d0:	e51b300c 	ldr	r3, [fp, #-12]
  1363d4:	e2833001 	add	r3, r3, #1
  1363d8:	e50b300c 	str	r3, [fp, #-12]
  1363dc:	e51b200c 	ldr	r2, [fp, #-12]
  1363e0:	e59b3004 	ldr	r3, [fp, #4]
  1363e4:	e1520003 	cmp	r2, r3
  1363e8:	3affffce 	bcc	136328 <ENET_SetRxBufferDescriptors+0x80>

    }
}
  1363ec:	e320f000 	nop	{0}
  1363f0:	e24bd004 	sub	sp, fp, #4
  1363f4:	e8bd8800 	pop	{fp, pc}

001363f8 <ENET_SetMII>:

void ENET_SetMII(ENET_Type *base, enet_mii_speed_t speed, enet_mii_duplex_t duplex)
{
  1363f8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1363fc:	e28db000 	add	fp, sp, #0
  136400:	e24dd01c 	sub	sp, sp, #28
  136404:	e50b0010 	str	r0, [fp, #-16]
  136408:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  13640c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    uint32_t rcr = base->RCR;
  136410:	e51b3010 	ldr	r3, [fp, #-16]
  136414:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  136418:	e50b3008 	str	r3, [fp, #-8]
    uint32_t tcr = base->TCR;
  13641c:	e51b3010 	ldr	r3, [fp, #-16]
  136420:	e59330c4 	ldr	r3, [r3, #196]	; 0xc4
  136424:	e50b300c 	str	r3, [fp, #-12]
    /* Sets speed mode. */
    if (kENET_MiiSpeed10M == speed)
  136428:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13642c:	e3530000 	cmp	r3, #0
  136430:	1a000003 	bne	136444 <ENET_SetMII+0x4c>
    {
        rcr |= ENET_RCR_RMII_10T_MASK;
  136434:	e51b3008 	ldr	r3, [fp, #-8]
  136438:	e3833c02 	orr	r3, r3, #512	; 0x200
  13643c:	e50b3008 	str	r3, [fp, #-8]
  136440:	ea000002 	b	136450 <ENET_SetMII+0x58>
    }
    else
    {
        rcr &= ~ENET_RCR_RMII_10T_MASK;
  136444:	e51b3008 	ldr	r3, [fp, #-8]
  136448:	e3c33c02 	bic	r3, r3, #512	; 0x200
  13644c:	e50b3008 	str	r3, [fp, #-8]
    }
    /* Set duplex mode. */
    if (duplex == kENET_MiiHalfDuplex)
  136450:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136454:	e3530000 	cmp	r3, #0
  136458:	1a000006 	bne	136478 <ENET_SetMII+0x80>
    {
        rcr |= ENET_RCR_DRT_MASK;
  13645c:	e51b3008 	ldr	r3, [fp, #-8]
  136460:	e3833002 	orr	r3, r3, #2
  136464:	e50b3008 	str	r3, [fp, #-8]
        tcr &= ~ENET_TCR_FDEN_MASK;
  136468:	e51b300c 	ldr	r3, [fp, #-12]
  13646c:	e3c33004 	bic	r3, r3, #4
  136470:	e50b300c 	str	r3, [fp, #-12]
  136474:	ea000005 	b	136490 <ENET_SetMII+0x98>
    }
    else
    {
        rcr &= ~ENET_RCR_DRT_MASK;
  136478:	e51b3008 	ldr	r3, [fp, #-8]
  13647c:	e3c33002 	bic	r3, r3, #2
  136480:	e50b3008 	str	r3, [fp, #-8]
        tcr |= ENET_TCR_FDEN_MASK;
  136484:	e51b300c 	ldr	r3, [fp, #-12]
  136488:	e3833004 	orr	r3, r3, #4
  13648c:	e50b300c 	str	r3, [fp, #-12]
    }

    base->RCR = rcr;
  136490:	e51b3010 	ldr	r3, [fp, #-16]
  136494:	e51b2008 	ldr	r2, [fp, #-8]
  136498:	e5832084 	str	r2, [r3, #132]	; 0x84
    base->TCR = tcr;
  13649c:	e51b3010 	ldr	r3, [fp, #-16]
  1364a0:	e51b200c 	ldr	r2, [fp, #-12]
  1364a4:	e58320c4 	str	r2, [r3, #196]	; 0xc4
}
  1364a8:	e320f000 	nop	{0}
  1364ac:	e28bd000 	add	sp, fp, #0
  1364b0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1364b4:	e12fff1e 	bx	lr

001364b8 <ENET_SetMacAddr>:

void ENET_SetMacAddr(ENET_Type *base, uint8_t *macAddr)
{
  1364b8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1364bc:	e28db000 	add	fp, sp, #0
  1364c0:	e24dd014 	sub	sp, sp, #20
  1364c4:	e50b0010 	str	r0, [fp, #-16]
  1364c8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    uint32_t address;

    /* Set physical address lower register. */
    address = (uint32_t)(((uint32_t)macAddr[0] << 24U) | ((uint32_t)macAddr[1] << 16U) | ((uint32_t)macAddr[2] << 8U) |
  1364cc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1364d0:	e5d33000 	ldrb	r3, [r3]
  1364d4:	e1a02c03 	lsl	r2, r3, #24
  1364d8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1364dc:	e2833001 	add	r3, r3, #1
  1364e0:	e5d33000 	ldrb	r3, [r3]
  1364e4:	e1a03803 	lsl	r3, r3, #16
  1364e8:	e1822003 	orr	r2, r2, r3
  1364ec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1364f0:	e2833002 	add	r3, r3, #2
  1364f4:	e5d33000 	ldrb	r3, [r3]
  1364f8:	e1a03403 	lsl	r3, r3, #8
  1364fc:	e1823003 	orr	r3, r2, r3
                         (uint32_t)macAddr[3]);
  136500:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  136504:	e2822003 	add	r2, r2, #3
  136508:	e5d22000 	ldrb	r2, [r2]
    address = (uint32_t)(((uint32_t)macAddr[0] << 24U) | ((uint32_t)macAddr[1] << 16U) | ((uint32_t)macAddr[2] << 8U) |
  13650c:	e1833002 	orr	r3, r3, r2
  136510:	e50b3008 	str	r3, [fp, #-8]
    base->PALR = address;
  136514:	e51b3010 	ldr	r3, [fp, #-16]
  136518:	e51b2008 	ldr	r2, [fp, #-8]
  13651c:	e58320e4 	str	r2, [r3, #228]	; 0xe4
    /* Set physical address high register. */
    address = (uint32_t)(((uint32_t)macAddr[4] << 8U) | ((uint32_t)macAddr[5]));
  136520:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136524:	e2833004 	add	r3, r3, #4
  136528:	e5d33000 	ldrb	r3, [r3]
  13652c:	e1a03403 	lsl	r3, r3, #8
  136530:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  136534:	e2822005 	add	r2, r2, #5
  136538:	e5d22000 	ldrb	r2, [r2]
  13653c:	e1833002 	orr	r3, r3, r2
  136540:	e50b3008 	str	r3, [fp, #-8]
    base->PAUR = address << ENET_PAUR_PADDR2_SHIFT;
  136544:	e51b3008 	ldr	r3, [fp, #-8]
  136548:	e1a02803 	lsl	r2, r3, #16
  13654c:	e51b3010 	ldr	r3, [fp, #-16]
  136550:	e58320e8 	str	r2, [r3, #232]	; 0xe8
}
  136554:	e320f000 	nop	{0}
  136558:	e28bd000 	add	sp, fp, #0
  13655c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  136560:	e12fff1e 	bx	lr

00136564 <ENET_GetMacAddr>:

void ENET_GetMacAddr(ENET_Type *base, uint8_t *macAddr)
{
  136564:	e92d4800 	push	{fp, lr}
  136568:	e28db004 	add	fp, sp, #4
  13656c:	e24dd010 	sub	sp, sp, #16
  136570:	e50b0010 	str	r0, [fp, #-16]
  136574:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    RT_ASSERT(macAddr);
  136578:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13657c:	e3530000 	cmp	r3, #0
  136580:	1a000005 	bne	13659c <ENET_GetMacAddr+0x38>
  136584:	e3002235 	movw	r2, #565	; 0x235
  136588:	e3091814 	movw	r1, #38932	; 0x9814
  13658c:	e3401014 	movt	r1, #20
  136590:	e30904e4 	movw	r0, #38116	; 0x94e4
  136594:	e3400014 	movt	r0, #20
  136598:	ebff33fe 	bl	103598 <rt_assert_handler>

    uint32_t address;

    /* Get from physical address lower register. */
    address = base->PALR;
  13659c:	e51b3010 	ldr	r3, [fp, #-16]
  1365a0:	e59330e4 	ldr	r3, [r3, #228]	; 0xe4
  1365a4:	e50b3008 	str	r3, [fp, #-8]
    macAddr[0] = 0xFFU & (address >> 24U);
  1365a8:	e51b3008 	ldr	r3, [fp, #-8]
  1365ac:	e1a03c23 	lsr	r3, r3, #24
  1365b0:	e6ef2073 	uxtb	r2, r3
  1365b4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1365b8:	e5c32000 	strb	r2, [r3]
    macAddr[1] = 0xFFU & (address >> 16U);
  1365bc:	e51b3008 	ldr	r3, [fp, #-8]
  1365c0:	e1a02823 	lsr	r2, r3, #16
  1365c4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1365c8:	e2833001 	add	r3, r3, #1
  1365cc:	e6ef2072 	uxtb	r2, r2
  1365d0:	e5c32000 	strb	r2, [r3]
    macAddr[2] = 0xFFU & (address >> 8U);
  1365d4:	e51b3008 	ldr	r3, [fp, #-8]
  1365d8:	e1a02423 	lsr	r2, r3, #8
  1365dc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1365e0:	e2833002 	add	r3, r3, #2
  1365e4:	e6ef2072 	uxtb	r2, r2
  1365e8:	e5c32000 	strb	r2, [r3]
    macAddr[3] = 0xFFU & address;
  1365ec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1365f0:	e2833003 	add	r3, r3, #3
  1365f4:	e51b2008 	ldr	r2, [fp, #-8]
  1365f8:	e6ef2072 	uxtb	r2, r2
  1365fc:	e5c32000 	strb	r2, [r3]

    /* Get from physical address high register. */
    address = (base->PAUR & ENET_PAUR_PADDR2_MASK) >> ENET_PAUR_PADDR2_SHIFT;
  136600:	e51b3010 	ldr	r3, [fp, #-16]
  136604:	e59330e8 	ldr	r3, [r3, #232]	; 0xe8
  136608:	e1a03823 	lsr	r3, r3, #16
  13660c:	e6ff3073 	uxth	r3, r3
  136610:	e50b3008 	str	r3, [fp, #-8]
    macAddr[4] = 0xFFU & (address >> 8U);
  136614:	e51b3008 	ldr	r3, [fp, #-8]
  136618:	e1a02423 	lsr	r2, r3, #8
  13661c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136620:	e2833004 	add	r3, r3, #4
  136624:	e6ef2072 	uxtb	r2, r2
  136628:	e5c32000 	strb	r2, [r3]
    macAddr[5] = 0xFFU & address;
  13662c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136630:	e2833005 	add	r3, r3, #5
  136634:	e51b2008 	ldr	r2, [fp, #-8]
  136638:	e6ef2072 	uxtb	r2, r2
  13663c:	e5c32000 	strb	r2, [r3]
}
  136640:	e320f000 	nop	{0}
  136644:	e24bd004 	sub	sp, fp, #4
  136648:	e8bd8800 	pop	{fp, pc}

0013664c <ENET_SetSMI>:

void ENET_SetSMI(ENET_Type *base, uint32_t srcClock_Hz, bool isPreambleDisabled)
{
  13664c:	e92d4810 	push	{r4, fp, lr}
  136650:	e28db008 	add	fp, sp, #8
  136654:	e24dd024 	sub	sp, sp, #36	; 0x24
  136658:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  13665c:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  136660:	e1a03002 	mov	r3, r2
  136664:	e54b3025 	strb	r3, [fp, #-37]	; 0xffffffdb
    RT_ASSERT(srcClock_Hz);
  136668:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  13666c:	e3530000 	cmp	r3, #0
  136670:	1a000005 	bne	13668c <ENET_SetSMI+0x40>
  136674:	e3a02f92 	mov	r2, #584	; 0x248
  136678:	e3091824 	movw	r1, #38948	; 0x9824
  13667c:	e3401014 	movt	r1, #20
  136680:	e3090684 	movw	r0, #38532	; 0x9684
  136684:	e3400014 	movt	r0, #20
  136688:	ebff33c2 	bl	103598 <rt_assert_handler>

    uint32_t clkCycle = 0;
  13668c:	e3a03000 	mov	r3, #0
  136690:	e50b3010 	str	r3, [fp, #-16]
    uint32_t speed = 0;
  136694:	e3a03000 	mov	r3, #0
  136698:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    uint32_t mscr = 0;
  13669c:	e3a03000 	mov	r3, #0
  1366a0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

    /* Calculate the MII speed which controls the frequency of the MDC. */
    speed = srcClock_Hz / (2 * ENET_MDC_FREQUENCY);
  1366a4:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  1366a8:	e30c3a6b 	movw	r3, #51819	; 0xca6b
  1366ac:	e3463b5f 	movt	r3, #27487	; 0x6b5f
  1366b0:	e0832392 	umull	r2, r3, r2, r3
  1366b4:	e1a03aa3 	lsr	r3, r3, #21
  1366b8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    /* Calculate the hold time on the MDIO output. */
    clkCycle = (10 + ENET_NANOSECOND_ONE_SECOND / srcClock_Hz - 1) / (ENET_NANOSECOND_ONE_SECOND / srcClock_Hz) - 1;
  1366bc:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  1366c0:	e3a00cca 	mov	r0, #51712	; 0xca00
  1366c4:	e3430b9a 	movt	r0, #15258	; 0x3b9a
  1366c8:	eb000608 	bl	137ef0 <__udivsi3>
  1366cc:	e1a03000 	mov	r3, r0
  1366d0:	e2834009 	add	r4, r3, #9
  1366d4:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  1366d8:	e3a00cca 	mov	r0, #51712	; 0xca00
  1366dc:	e3430b9a 	movt	r0, #15258	; 0x3b9a
  1366e0:	eb000602 	bl	137ef0 <__udivsi3>
  1366e4:	e1a03000 	mov	r3, r0
  1366e8:	e1a01003 	mov	r1, r3
  1366ec:	e1a00004 	mov	r0, r4
  1366f0:	eb0005fe 	bl	137ef0 <__udivsi3>
  1366f4:	e1a03000 	mov	r3, r0
  1366f8:	e2433001 	sub	r3, r3, #1
  1366fc:	e50b3010 	str	r3, [fp, #-16]
    /* Build the configuration for MDC/MDIO control. */
    mscr = ENET_MSCR_MII_SPEED(speed) | ENET_MSCR_DIS_PRE(isPreambleDisabled) | ENET_MSCR_HOLDTIME(clkCycle);
  136700:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136704:	e1a03083 	lsl	r3, r3, #1
  136708:	e203207e 	and	r2, r3, #126	; 0x7e
  13670c:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  136710:	e1a03383 	lsl	r3, r3, #7
  136714:	e6ef3073 	uxtb	r3, r3
  136718:	e1822003 	orr	r2, r2, r3
  13671c:	e51b3010 	ldr	r3, [fp, #-16]
  136720:	e1a03403 	lsl	r3, r3, #8
  136724:	e2033c07 	and	r3, r3, #1792	; 0x700
  136728:	e1823003 	orr	r3, r2, r3
  13672c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    base->MSCR = mscr;
  136730:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  136734:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  136738:	e5832044 	str	r2, [r3, #68]	; 0x44
}
  13673c:	e320f000 	nop	{0}
  136740:	e24bd008 	sub	sp, fp, #8
  136744:	e8bd8810 	pop	{r4, fp, pc}

00136748 <ENET_StartSMIWrite>:

void ENET_StartSMIWrite(ENET_Type *base, uint32_t phyAddr, uint32_t phyReg, enet_mii_write_t operation, uint32_t data)
{
  136748:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  13674c:	e28db000 	add	fp, sp, #0
  136750:	e24dd01c 	sub	sp, sp, #28
  136754:	e50b0010 	str	r0, [fp, #-16]
  136758:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  13675c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  136760:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    uint32_t mmfr = 0;
  136764:	e3a03000 	mov	r3, #0
  136768:	e50b3008 	str	r3, [fp, #-8]

    /* Build MII write command. */
    mmfr = ENET_MMFR_ST(1) | ENET_MMFR_OP(operation) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(phyReg) | ENET_MMFR_TA(2) |
  13676c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  136770:	e1a03e03 	lsl	r3, r3, #28
  136774:	e2032203 	and	r2, r3, #805306368	; 0x30000000
  136778:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13677c:	e1a03b83 	lsl	r3, r3, #23
  136780:	e203353e 	and	r3, r3, #260046848	; 0xf800000
  136784:	e1822003 	orr	r2, r2, r3
  136788:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  13678c:	e1a03903 	lsl	r3, r3, #18
  136790:	e203371f 	and	r3, r3, #8126464	; 0x7c0000
  136794:	e1822003 	orr	r2, r2, r3
           (data & 0xFFFF);
  136798:	e59b3004 	ldr	r3, [fp, #4]
  13679c:	e6ff3073 	uxth	r3, r3
    mmfr = ENET_MMFR_ST(1) | ENET_MMFR_OP(operation) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(phyReg) | ENET_MMFR_TA(2) |
  1367a0:	e1823003 	orr	r3, r2, r3
  1367a4:	e3833101 	orr	r3, r3, #1073741824	; 0x40000000
  1367a8:	e3833802 	orr	r3, r3, #131072	; 0x20000
  1367ac:	e50b3008 	str	r3, [fp, #-8]
    base->MMFR = mmfr;
  1367b0:	e51b3010 	ldr	r3, [fp, #-16]
  1367b4:	e51b2008 	ldr	r2, [fp, #-8]
  1367b8:	e5832040 	str	r2, [r3, #64]	; 0x40
}
  1367bc:	e320f000 	nop	{0}
  1367c0:	e28bd000 	add	sp, fp, #0
  1367c4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1367c8:	e12fff1e 	bx	lr

001367cc <ENET_StartSMIRead>:

void ENET_StartSMIRead(ENET_Type *base, uint32_t phyAddr, uint32_t phyReg, enet_mii_read_t operation)
{
  1367cc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1367d0:	e28db000 	add	fp, sp, #0
  1367d4:	e24dd01c 	sub	sp, sp, #28
  1367d8:	e50b0010 	str	r0, [fp, #-16]
  1367dc:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1367e0:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  1367e4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    uint32_t mmfr = 0;
  1367e8:	e3a03000 	mov	r3, #0
  1367ec:	e50b3008 	str	r3, [fp, #-8]

    /* Build MII read command. */
    mmfr = ENET_MMFR_ST(1) | ENET_MMFR_OP(operation) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(phyReg) | ENET_MMFR_TA(2);
  1367f0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1367f4:	e1a03e03 	lsl	r3, r3, #28
  1367f8:	e2032203 	and	r2, r3, #805306368	; 0x30000000
  1367fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136800:	e1a03b83 	lsl	r3, r3, #23
  136804:	e203353e 	and	r3, r3, #260046848	; 0xf800000
  136808:	e1822003 	orr	r2, r2, r3
  13680c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136810:	e1a03903 	lsl	r3, r3, #18
  136814:	e203371f 	and	r3, r3, #8126464	; 0x7c0000
  136818:	e1823003 	orr	r3, r2, r3
  13681c:	e3833101 	orr	r3, r3, #1073741824	; 0x40000000
  136820:	e3833802 	orr	r3, r3, #131072	; 0x20000
  136824:	e50b3008 	str	r3, [fp, #-8]
    base->MMFR = mmfr;
  136828:	e51b3010 	ldr	r3, [fp, #-16]
  13682c:	e51b2008 	ldr	r2, [fp, #-8]
  136830:	e5832040 	str	r2, [r3, #64]	; 0x40
}
  136834:	e320f000 	nop	{0}
  136838:	e28bd000 	add	sp, fp, #0
  13683c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  136840:	e12fff1e 	bx	lr

00136844 <ENET_StartExtC45SMIWrite>:

#if defined(FSL_FEATURE_ENET_HAS_EXTEND_MDIO) && FSL_FEATURE_ENET_HAS_EXTEND_MDIO
void ENET_StartExtC45SMIWrite(ENET_Type *base, uint32_t phyAddr, uint32_t phyReg, uint32_t data)
{
  136844:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  136848:	e28db000 	add	fp, sp, #0
  13684c:	e24dd01c 	sub	sp, sp, #28
  136850:	e50b0010 	str	r0, [fp, #-16]
  136854:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  136858:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  13685c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    uint32_t mmfr = 0;
  136860:	e3a03000 	mov	r3, #0
  136864:	e50b3008 	str	r3, [fp, #-8]

    /* Parse the address from the input register. */
    uint16_t devAddr = (phyReg >> ENET_MMFR_TA_SHIFT) & 0x1FU;
  136868:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  13686c:	e1a03823 	lsr	r3, r3, #16
  136870:	e6ff3073 	uxth	r3, r3
  136874:	e203301f 	and	r3, r3, #31
  136878:	e14b30ba 	strh	r3, [fp, #-10]
    uint16_t regAddr = (uint16_t)(phyReg & 0xFFFFU);
  13687c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136880:	e14b30bc 	strh	r3, [fp, #-12]

    /* Address write firstly. */
    mmfr = ENET_MMFR_ST(0) | ENET_MMFR_OP(kENET_MiiAddrWrite_C45) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(devAddr) |
  136884:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136888:	e1a03b83 	lsl	r3, r3, #23
  13688c:	e203253e 	and	r2, r3, #260046848	; 0xf800000
  136890:	e15b30ba 	ldrh	r3, [fp, #-10]
  136894:	e1a03903 	lsl	r3, r3, #18
  136898:	e203371f 	and	r3, r3, #8126464	; 0x7c0000
  13689c:	e1822003 	orr	r2, r2, r3
           ENET_MMFR_TA(2) | ENET_MMFR_DATA(regAddr);
  1368a0:	e15b30bc 	ldrh	r3, [fp, #-12]
  1368a4:	e1823003 	orr	r3, r2, r3
    mmfr = ENET_MMFR_ST(0) | ENET_MMFR_OP(kENET_MiiAddrWrite_C45) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(devAddr) |
  1368a8:	e3833802 	orr	r3, r3, #131072	; 0x20000
  1368ac:	e50b3008 	str	r3, [fp, #-8]
    base->MMFR = mmfr;
  1368b0:	e51b3010 	ldr	r3, [fp, #-16]
  1368b4:	e51b2008 	ldr	r2, [fp, #-8]
  1368b8:	e5832040 	str	r2, [r3, #64]	; 0x40

    /* Build MII write command. */
    mmfr = ENET_MMFR_ST(0) | ENET_MMFR_OP(kENET_MiiWriteFrame_C45) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(devAddr) |
  1368bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1368c0:	e1a03b83 	lsl	r3, r3, #23
  1368c4:	e203253e 	and	r2, r3, #260046848	; 0xf800000
  1368c8:	e15b30ba 	ldrh	r3, [fp, #-10]
  1368cc:	e1a03903 	lsl	r3, r3, #18
  1368d0:	e203371f 	and	r3, r3, #8126464	; 0x7c0000
  1368d4:	e1822003 	orr	r2, r2, r3
           ENET_MMFR_TA(2) | ENET_MMFR_DATA(data);
  1368d8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1368dc:	e6ff3073 	uxth	r3, r3
  1368e0:	e1823003 	orr	r3, r2, r3
    mmfr = ENET_MMFR_ST(0) | ENET_MMFR_OP(kENET_MiiWriteFrame_C45) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(devAddr) |
  1368e4:	e3833201 	orr	r3, r3, #268435456	; 0x10000000
  1368e8:	e3833802 	orr	r3, r3, #131072	; 0x20000
  1368ec:	e50b3008 	str	r3, [fp, #-8]
    base->MMFR = mmfr;
  1368f0:	e51b3010 	ldr	r3, [fp, #-16]
  1368f4:	e51b2008 	ldr	r2, [fp, #-8]
  1368f8:	e5832040 	str	r2, [r3, #64]	; 0x40
}
  1368fc:	e320f000 	nop	{0}
  136900:	e28bd000 	add	sp, fp, #0
  136904:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  136908:	e12fff1e 	bx	lr

0013690c <ENET_StartExtC45SMIRead>:

void ENET_StartExtC45SMIRead(ENET_Type *base, uint32_t phyAddr, uint32_t phyReg)
{
  13690c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  136910:	e28db000 	add	fp, sp, #0
  136914:	e24dd01c 	sub	sp, sp, #28
  136918:	e50b0010 	str	r0, [fp, #-16]
  13691c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  136920:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    uint32_t mmfr = 0;
  136924:	e3a03000 	mov	r3, #0
  136928:	e50b3008 	str	r3, [fp, #-8]

    /* Parse the address from the input register. */
    uint16_t devAddr = (phyReg >> ENET_MMFR_TA_SHIFT) & 0x1FU;
  13692c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136930:	e1a03823 	lsr	r3, r3, #16
  136934:	e6ff3073 	uxth	r3, r3
  136938:	e203301f 	and	r3, r3, #31
  13693c:	e14b30ba 	strh	r3, [fp, #-10]
    uint16_t regAddr = (uint16_t)(phyReg & 0xFFFFU);
  136940:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136944:	e14b30bc 	strh	r3, [fp, #-12]

    /* Address write firstly. */
    mmfr = ENET_MMFR_ST(0) | ENET_MMFR_OP(kENET_MiiAddrWrite_C45) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(devAddr) |
  136948:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13694c:	e1a03b83 	lsl	r3, r3, #23
  136950:	e203253e 	and	r2, r3, #260046848	; 0xf800000
  136954:	e15b30ba 	ldrh	r3, [fp, #-10]
  136958:	e1a03903 	lsl	r3, r3, #18
  13695c:	e203371f 	and	r3, r3, #8126464	; 0x7c0000
  136960:	e1822003 	orr	r2, r2, r3
           ENET_MMFR_TA(2) | ENET_MMFR_DATA(regAddr);
  136964:	e15b30bc 	ldrh	r3, [fp, #-12]
  136968:	e1823003 	orr	r3, r2, r3
    mmfr = ENET_MMFR_ST(0) | ENET_MMFR_OP(kENET_MiiAddrWrite_C45) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(devAddr) |
  13696c:	e3833802 	orr	r3, r3, #131072	; 0x20000
  136970:	e50b3008 	str	r3, [fp, #-8]
    base->MMFR = mmfr;
  136974:	e51b3010 	ldr	r3, [fp, #-16]
  136978:	e51b2008 	ldr	r2, [fp, #-8]
  13697c:	e5832040 	str	r2, [r3, #64]	; 0x40

    /* Build MII read command. */
    mmfr = ENET_MMFR_ST(0) | ENET_MMFR_OP(kENET_MiiReadFrame_C45) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(devAddr) |
  136980:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136984:	e1a03b83 	lsl	r3, r3, #23
  136988:	e203253e 	and	r2, r3, #260046848	; 0xf800000
  13698c:	e15b30ba 	ldrh	r3, [fp, #-10]
  136990:	e1a03903 	lsl	r3, r3, #18
  136994:	e203371f 	and	r3, r3, #8126464	; 0x7c0000
  136998:	e1823003 	orr	r3, r2, r3
  13699c:	e3833203 	orr	r3, r3, #805306368	; 0x30000000
  1369a0:	e3833802 	orr	r3, r3, #131072	; 0x20000
  1369a4:	e50b3008 	str	r3, [fp, #-8]
           ENET_MMFR_TA(2);
    base->MMFR = mmfr;
  1369a8:	e51b3010 	ldr	r3, [fp, #-16]
  1369ac:	e51b2008 	ldr	r2, [fp, #-8]
  1369b0:	e5832040 	str	r2, [r3, #64]	; 0x40
}
  1369b4:	e320f000 	nop	{0}
  1369b8:	e28bd000 	add	sp, fp, #0
  1369bc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1369c0:	e12fff1e 	bx	lr

001369c4 <ENET_GetRxErrBeforeReadFrame>:
#endif /* FSL_FEATURE_ENET_HAS_EXTEND_MDIO */

void ENET_GetRxErrBeforeReadFrame(enet_handle_t *handle, enet_data_error_stats_t *eErrorStatic)
{
  1369c4:	e92d4800 	push	{fp, lr}
  1369c8:	e28db004 	add	fp, sp, #4
  1369cc:	e24dd010 	sub	sp, sp, #16
  1369d0:	e50b0010 	str	r0, [fp, #-16]
  1369d4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    RT_ASSERT(handle);
  1369d8:	e51b3010 	ldr	r3, [fp, #-16]
  1369dc:	e3530000 	cmp	r3, #0
  1369e0:	1a000005 	bne	1369fc <ENET_GetRxErrBeforeReadFrame+0x38>
  1369e4:	e3a02fa5 	mov	r2, #660	; 0x294
  1369e8:	e3091830 	movw	r1, #38960	; 0x9830
  1369ec:	e3401014 	movt	r1, #20
  1369f0:	e309044c 	movw	r0, #37964	; 0x944c
  1369f4:	e3400014 	movt	r0, #20
  1369f8:	ebff32e6 	bl	103598 <rt_assert_handler>
    RT_ASSERT(handle->rxBdCurrent);
  1369fc:	e51b3010 	ldr	r3, [fp, #-16]
  136a00:	e5933004 	ldr	r3, [r3, #4]
  136a04:	e3530000 	cmp	r3, #0
  136a08:	1a000005 	bne	136a24 <ENET_GetRxErrBeforeReadFrame+0x60>
  136a0c:	e3002295 	movw	r2, #661	; 0x295
  136a10:	e3091830 	movw	r1, #38960	; 0x9830
  136a14:	e3401014 	movt	r1, #20
  136a18:	e3090690 	movw	r0, #38544	; 0x9690
  136a1c:	e3400014 	movt	r0, #20
  136a20:	ebff32dc 	bl	103598 <rt_assert_handler>
    RT_ASSERT(eErrorStatic);
  136a24:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136a28:	e3530000 	cmp	r3, #0
  136a2c:	1a000005 	bne	136a48 <ENET_GetRxErrBeforeReadFrame+0x84>
  136a30:	e3002296 	movw	r2, #662	; 0x296
  136a34:	e3091830 	movw	r1, #38960	; 0x9830
  136a38:	e3401014 	movt	r1, #20
  136a3c:	e30906a4 	movw	r0, #38564	; 0x96a4
  136a40:	e3400014 	movt	r0, #20
  136a44:	ebff32d3 	bl	103598 <rt_assert_handler>

    uint16_t control = 0;
  136a48:	e3a03000 	mov	r3, #0
  136a4c:	e14b30ba 	strh	r3, [fp, #-10]
    volatile enet_rx_bd_struct_t *curBuffDescrip = handle->rxBdCurrent;
  136a50:	e51b3010 	ldr	r3, [fp, #-16]
  136a54:	e5933004 	ldr	r3, [r3, #4]
  136a58:	e50b3008 	str	r3, [fp, #-8]

    do
    {
        /* The last buffer descriptor of a frame. */
        if (curBuffDescrip->control & ENET_BUFFDESCRIPTOR_RX_LAST_MASK)
  136a5c:	e51b3008 	ldr	r3, [fp, #-8]
  136a60:	e1d330b2 	ldrh	r3, [r3, #2]
  136a64:	e6ff3073 	uxth	r3, r3
  136a68:	e2033b02 	and	r3, r3, #2048	; 0x800
  136a6c:	e3530000 	cmp	r3, #0
  136a70:	0a000030 	beq	136b38 <ENET_GetRxErrBeforeReadFrame+0x174>
        {
            control = curBuffDescrip->control;
  136a74:	e51b3008 	ldr	r3, [fp, #-8]
  136a78:	e1d330b2 	ldrh	r3, [r3, #2]
  136a7c:	e14b30ba 	strh	r3, [fp, #-10]
            if (control & ENET_BUFFDESCRIPTOR_RX_TRUNC_MASK)
  136a80:	e15b30ba 	ldrh	r3, [fp, #-10]
  136a84:	e2033001 	and	r3, r3, #1
  136a88:	e3530000 	cmp	r3, #0
  136a8c:	0a000004 	beq	136aa4 <ENET_GetRxErrBeforeReadFrame+0xe0>
            {
                /* The receive truncate error. */
                eErrorStatic->statsRxTruncateErr++;
  136a90:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136a94:	e5933010 	ldr	r3, [r3, #16]
  136a98:	e2832001 	add	r2, r3, #1
  136a9c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136aa0:	e5832010 	str	r2, [r3, #16]
            }
            if (control & ENET_BUFFDESCRIPTOR_RX_OVERRUN_MASK)
  136aa4:	e15b30ba 	ldrh	r3, [fp, #-10]
  136aa8:	e2033002 	and	r3, r3, #2
  136aac:	e3530000 	cmp	r3, #0
  136ab0:	0a000004 	beq	136ac8 <ENET_GetRxErrBeforeReadFrame+0x104>
            {
                /* The receive over run error. */
                eErrorStatic->statsRxOverRunErr++;
  136ab4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136ab8:	e593300c 	ldr	r3, [r3, #12]
  136abc:	e2832001 	add	r2, r3, #1
  136ac0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136ac4:	e583200c 	str	r2, [r3, #12]
            }
            if (control & ENET_BUFFDESCRIPTOR_RX_LENVLIOLATE_MASK)
  136ac8:	e15b30ba 	ldrh	r3, [fp, #-10]
  136acc:	e2033020 	and	r3, r3, #32
  136ad0:	e3530000 	cmp	r3, #0
  136ad4:	0a000004 	beq	136aec <ENET_GetRxErrBeforeReadFrame+0x128>
            {
                /* The receive length violation error. */
                eErrorStatic->statsRxLenGreaterErr++;
  136ad8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136adc:	e5933000 	ldr	r3, [r3]
  136ae0:	e2832001 	add	r2, r3, #1
  136ae4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136ae8:	e5832000 	str	r2, [r3]
            }
            if (control & ENET_BUFFDESCRIPTOR_RX_NOOCTET_MASK)
  136aec:	e15b30ba 	ldrh	r3, [fp, #-10]
  136af0:	e2033010 	and	r3, r3, #16
  136af4:	e3530000 	cmp	r3, #0
  136af8:	0a000004 	beq	136b10 <ENET_GetRxErrBeforeReadFrame+0x14c>
            {
                /* The receive alignment error. */
                eErrorStatic->statsRxAlignErr++;
  136afc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136b00:	e5933004 	ldr	r3, [r3, #4]
  136b04:	e2832001 	add	r2, r3, #1
  136b08:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136b0c:	e5832004 	str	r2, [r3, #4]
            }
            if (control & ENET_BUFFDESCRIPTOR_RX_CRC_MASK)
  136b10:	e15b30ba 	ldrh	r3, [fp, #-10]
  136b14:	e2033004 	and	r3, r3, #4
  136b18:	e3530000 	cmp	r3, #0
  136b1c:	0a000018 	beq	136b84 <ENET_GetRxErrBeforeReadFrame+0x1c0>
            {
                /* The receive CRC error. */
                eErrorStatic->statsRxFcsErr++;
  136b20:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136b24:	e5933008 	ldr	r3, [r3, #8]
  136b28:	e2832001 	add	r2, r3, #1
  136b2c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136b30:	e5832008 	str	r2, [r3, #8]
            }
            break;
  136b34:	ea000012 	b	136b84 <ENET_GetRxErrBeforeReadFrame+0x1c0>
        }

        /* Increase the buffer descriptor, if it is the last one, increase to first one of the ring buffer. */
        if (curBuffDescrip->control & ENET_BUFFDESCRIPTOR_RX_WRAP_MASK)
  136b38:	e51b3008 	ldr	r3, [fp, #-8]
  136b3c:	e1d330b2 	ldrh	r3, [r3, #2]
  136b40:	e6ff3073 	uxth	r3, r3
  136b44:	e2033a02 	and	r3, r3, #8192	; 0x2000
  136b48:	e3530000 	cmp	r3, #0
  136b4c:	0a000003 	beq	136b60 <ENET_GetRxErrBeforeReadFrame+0x19c>
        {
            curBuffDescrip = handle->rxBdBase;
  136b50:	e51b3010 	ldr	r3, [fp, #-16]
  136b54:	e5933000 	ldr	r3, [r3]
  136b58:	e50b3008 	str	r3, [fp, #-8]
  136b5c:	ea000002 	b	136b6c <ENET_GetRxErrBeforeReadFrame+0x1a8>
        }
        else
        {
            curBuffDescrip++;
  136b60:	e51b3008 	ldr	r3, [fp, #-8]
  136b64:	e2833008 	add	r3, r3, #8
  136b68:	e50b3008 	str	r3, [fp, #-8]
        }

    } while (curBuffDescrip != handle->rxBdCurrent);
  136b6c:	e51b3010 	ldr	r3, [fp, #-16]
  136b70:	e5933004 	ldr	r3, [r3, #4]
  136b74:	e51b2008 	ldr	r2, [fp, #-8]
  136b78:	e1520003 	cmp	r2, r3
  136b7c:	1affffb6 	bne	136a5c <ENET_GetRxErrBeforeReadFrame+0x98>
}
  136b80:	ea000000 	b	136b88 <ENET_GetRxErrBeforeReadFrame+0x1c4>
            break;
  136b84:	e320f000 	nop	{0}
}
  136b88:	e320f000 	nop	{0}
  136b8c:	e24bd004 	sub	sp, fp, #4
  136b90:	e8bd8800 	pop	{fp, pc}

00136b94 <ENET_ReadFrame>:

status_t ENET_ReadFrame(ENET_Type *base,enet_handle_t *handle,const enet_config_t *config,uint8_t *data,uint16_t *length)
{
  136b94:	e92d4800 	push	{fp, lr}
  136b98:	e28db004 	add	fp, sp, #4
  136b9c:	e24dd018 	sub	sp, sp, #24
  136ba0:	e50b0010 	str	r0, [fp, #-16]
  136ba4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  136ba8:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  136bac:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(handle);
  136bb0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136bb4:	e3530000 	cmp	r3, #0
  136bb8:	1a000005 	bne	136bd4 <ENET_ReadFrame+0x40>
  136bbc:	e3a02fb3 	mov	r2, #716	; 0x2cc
  136bc0:	e3091850 	movw	r1, #38992	; 0x9850
  136bc4:	e3401014 	movt	r1, #20
  136bc8:	e309044c 	movw	r0, #37964	; 0x944c
  136bcc:	e3400014 	movt	r0, #20
  136bd0:	ebff3270 	bl	103598 <rt_assert_handler>
    RT_ASSERT(handle->rxBdCurrent);
  136bd4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136bd8:	e5933004 	ldr	r3, [r3, #4]
  136bdc:	e3530000 	cmp	r3, #0
  136be0:	1a000005 	bne	136bfc <ENET_ReadFrame+0x68>
  136be4:	e30022cd 	movw	r2, #717	; 0x2cd
  136be8:	e3091850 	movw	r1, #38992	; 0x9850
  136bec:	e3401014 	movt	r1, #20
  136bf0:	e3090690 	movw	r0, #38544	; 0x9690
  136bf4:	e3400014 	movt	r0, #20
  136bf8:	ebff3266 	bl	103598 <rt_assert_handler>
    RT_ASSERT(length);
  136bfc:	e59b3004 	ldr	r3, [fp, #4]
  136c00:	e3530000 	cmp	r3, #0
  136c04:	1a000005 	bne	136c20 <ENET_ReadFrame+0x8c>
  136c08:	e30022ce 	movw	r2, #718	; 0x2ce
  136c0c:	e3091850 	movw	r1, #38992	; 0x9850
  136c10:	e3401014 	movt	r1, #20
  136c14:	e30906b4 	movw	r0, #38580	; 0x96b4
  136c18:	e3400014 	movt	r0, #20
  136c1c:	ebff325d 	bl	103598 <rt_assert_handler>

    /* Reset the length to zero. */
    *length = 0;
  136c20:	e59b3004 	ldr	r3, [fp, #4]
  136c24:	e3a02000 	mov	r2, #0
  136c28:	e1c320b0 	strh	r2, [r3]

    uint16_t validLastMask = ENET_BUFFDESCRIPTOR_RX_LAST_MASK | ENET_BUFFDESCRIPTOR_RX_EMPTY_MASK;
  136c2c:	e3a03b22 	mov	r3, #34816	; 0x8800
  136c30:	e14b30b6 	strh	r3, [fp, #-6]
    volatile enet_rx_bd_struct_t *curBuffDescrip = handle->rxBdCurrent;
  136c34:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136c38:	e5933004 	ldr	r3, [r3, #4]
  136c3c:	e50b300c 	str	r3, [fp, #-12]

    /* Check the current buffer descriptor's empty flag.  if empty means there is no frame received. */
    if (curBuffDescrip->control & ENET_BUFFDESCRIPTOR_RX_EMPTY_MASK)
  136c40:	e51b300c 	ldr	r3, [fp, #-12]
  136c44:	e1d330b2 	ldrh	r3, [r3, #2]
  136c48:	e6ff3073 	uxth	r3, r3
  136c4c:	e6bf3073 	sxth	r3, r3
  136c50:	e3530000 	cmp	r3, #0
  136c54:	aa000001 	bge	136c60 <ENET_ReadFrame+0xcc>
    {
        return kStatus_ENET_RxFrameEmpty;
  136c58:	e3003fa2 	movw	r3, #4002	; 0xfa2
  136c5c:	ea00005c 	b	136dd4 <ENET_ReadFrame+0x240>
    }
    else
    {
        if ((curBuffDescrip->control & validLastMask) == ENET_BUFFDESCRIPTOR_RX_LAST_MASK)
  136c60:	e51b300c 	ldr	r3, [fp, #-12]
  136c64:	e1d330b2 	ldrh	r3, [r3, #2]
  136c68:	e6ff2073 	uxth	r2, r3
  136c6c:	e15b30b6 	ldrh	r3, [fp, #-6]
  136c70:	e0033002 	and	r3, r3, r2
  136c74:	e6ff3073 	uxth	r3, r3
  136c78:	e3530b02 	cmp	r3, #2048	; 0x800
  136c7c:	1a00003a 	bne	136d6c <ENET_ReadFrame+0x1d8>
        {
            if(curBuffDescrip->length <= config->rxMaxFrameLen)
  136c80:	e51b300c 	ldr	r3, [fp, #-12]
  136c84:	e1d330b0 	ldrh	r3, [r3]
  136c88:	e6ff2073 	uxth	r2, r3
  136c8c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136c90:	e1d330b8 	ldrh	r3, [r3, #8]
  136c94:	e1520003 	cmp	r2, r3
  136c98:	8a000018 	bhi	136d00 <ENET_ReadFrame+0x16c>
            {
                *length = curBuffDescrip->length;
  136c9c:	e51b300c 	ldr	r3, [fp, #-12]
  136ca0:	e1d330b0 	ldrh	r3, [r3]
  136ca4:	e6ff2073 	uxth	r2, r3
  136ca8:	e59b3004 	ldr	r3, [fp, #4]
  136cac:	e1c320b0 	strh	r2, [r3]
                rt_memcpy(data, buffer_vaddr_rx[curBuffDescrip - handle->rxBdBase], curBuffDescrip->length);
  136cb0:	e51b300c 	ldr	r3, [fp, #-12]
  136cb4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  136cb8:	e5922000 	ldr	r2, [r2]
  136cbc:	e0433002 	sub	r3, r3, r2
  136cc0:	e1a031c3 	asr	r3, r3, #3
  136cc4:	e1a02003 	mov	r2, r3
  136cc8:	e3053200 	movw	r3, #20992	; 0x5200
  136ccc:	e3403057 	movt	r3, #87	; 0x57
  136cd0:	e7931102 	ldr	r1, [r3, r2, lsl #2]
  136cd4:	e51b300c 	ldr	r3, [fp, #-12]
  136cd8:	e1d330b0 	ldrh	r3, [r3]
  136cdc:	e6ff3073 	uxth	r3, r3
  136ce0:	e1a02003 	mov	r2, r3
  136ce4:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  136ce8:	ebff3184 	bl	103300 <rt_memcpy>
                /* Updates the receive buffer descriptors. */
                ENET_UpdateReadBuffers(base, handle);
  136cec:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  136cf0:	e51b0010 	ldr	r0, [fp, #-16]
  136cf4:	eb000039 	bl	136de0 <ENET_UpdateReadBuffers>
                return kStatus_Success;
  136cf8:	e3a03000 	mov	r3, #0
  136cfc:	ea000034 	b	136dd4 <ENET_ReadFrame+0x240>
            }
            else
            {
                LOG_E("frame error0 curBuffDescrip->control 0x%04x length %d\n",curBuffDescrip->control,curBuffDescrip->length);
  136d00:	e30906bc 	movw	r0, #38588	; 0x96bc
  136d04:	e3400014 	movt	r0, #20
  136d08:	ebff3101 	bl	103114 <rt_kprintf>
  136d0c:	e51b300c 	ldr	r3, [fp, #-12]
  136d10:	e1d330b2 	ldrh	r3, [r3, #2]
  136d14:	e6ff3073 	uxth	r3, r3
  136d18:	e1a01003 	mov	r1, r3
  136d1c:	e51b300c 	ldr	r3, [fp, #-12]
  136d20:	e1d330b0 	ldrh	r3, [r3]
  136d24:	e6ff3073 	uxth	r3, r3
  136d28:	e1a02003 	mov	r2, r3
  136d2c:	e30906d0 	movw	r0, #38608	; 0x96d0
  136d30:	e3400014 	movt	r0, #20
  136d34:	ebff30f6 	bl	103114 <rt_kprintf>
  136d38:	e3090708 	movw	r0, #38664	; 0x9708
  136d3c:	e3400014 	movt	r0, #20
  136d40:	ebff30f3 	bl	103114 <rt_kprintf>
                *length = curBuffDescrip->length;
  136d44:	e51b300c 	ldr	r3, [fp, #-12]
  136d48:	e1d330b0 	ldrh	r3, [r3]
  136d4c:	e6ff2073 	uxth	r2, r3
  136d50:	e59b3004 	ldr	r3, [fp, #4]
  136d54:	e1c320b0 	strh	r2, [r3]
                /* Updates the receive buffer descriptors. */
                ENET_UpdateReadBuffers(base, handle);
  136d58:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  136d5c:	e51b0010 	ldr	r0, [fp, #-16]
  136d60:	eb00001e 	bl	136de0 <ENET_UpdateReadBuffers>
                return kStatus_ENET_RxFrameError;
  136d64:	e3a03efa 	mov	r3, #4000	; 0xfa0
  136d68:	ea000019 	b	136dd4 <ENET_ReadFrame+0x240>
            }
        }
        else
        {
            LOG_E("frame error1 curBuffDescrip->control 0x%04x length %d\n",curBuffDescrip->control,curBuffDescrip->length);
  136d6c:	e30906bc 	movw	r0, #38588	; 0x96bc
  136d70:	e3400014 	movt	r0, #20
  136d74:	ebff30e6 	bl	103114 <rt_kprintf>
  136d78:	e51b300c 	ldr	r3, [fp, #-12]
  136d7c:	e1d330b2 	ldrh	r3, [r3, #2]
  136d80:	e6ff3073 	uxth	r3, r3
  136d84:	e1a01003 	mov	r1, r3
  136d88:	e51b300c 	ldr	r3, [fp, #-12]
  136d8c:	e1d330b0 	ldrh	r3, [r3]
  136d90:	e6ff3073 	uxth	r3, r3
  136d94:	e1a02003 	mov	r2, r3
  136d98:	e3090710 	movw	r0, #38672	; 0x9710
  136d9c:	e3400014 	movt	r0, #20
  136da0:	ebff30db 	bl	103114 <rt_kprintf>
  136da4:	e3090708 	movw	r0, #38664	; 0x9708
  136da8:	e3400014 	movt	r0, #20
  136dac:	ebff30d8 	bl	103114 <rt_kprintf>
            *length = curBuffDescrip->length;
  136db0:	e51b300c 	ldr	r3, [fp, #-12]
  136db4:	e1d330b0 	ldrh	r3, [r3]
  136db8:	e6ff2073 	uxth	r2, r3
  136dbc:	e59b3004 	ldr	r3, [fp, #4]
  136dc0:	e1c320b0 	strh	r2, [r3]
            ENET_UpdateReadBuffers(base, handle);
  136dc4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  136dc8:	e51b0010 	ldr	r0, [fp, #-16]
  136dcc:	eb000003 	bl	136de0 <ENET_UpdateReadBuffers>
            return kStatus_ENET_RxFrameError;
  136dd0:	e3a03efa 	mov	r3, #4000	; 0xfa0
        }
    }
    /* The frame is on processing - set to empty status to make application to receive it next time. */
    return kStatus_ENET_RxFrameEmpty;
}
  136dd4:	e1a00003 	mov	r0, r3
  136dd8:	e24bd004 	sub	sp, fp, #4
  136ddc:	e8bd8800 	pop	{fp, pc}

00136de0 <ENET_UpdateReadBuffers>:

static void ENET_UpdateReadBuffers(ENET_Type *base, enet_handle_t *handle)
{
  136de0:	e92d4800 	push	{fp, lr}
  136de4:	e28db004 	add	fp, sp, #4
  136de8:	e24dd008 	sub	sp, sp, #8
  136dec:	e50b0008 	str	r0, [fp, #-8]
  136df0:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(handle);
  136df4:	e51b300c 	ldr	r3, [fp, #-12]
  136df8:	e3530000 	cmp	r3, #0
  136dfc:	1a000005 	bne	136e18 <ENET_UpdateReadBuffers+0x38>
  136e00:	e30022fe 	movw	r2, #766	; 0x2fe
  136e04:	e3091860 	movw	r1, #39008	; 0x9860
  136e08:	e3401014 	movt	r1, #20
  136e0c:	e309044c 	movw	r0, #37964	; 0x944c
  136e10:	e3400014 	movt	r0, #20
  136e14:	ebff31df 	bl	103598 <rt_assert_handler>

    /* Clears status. */
    handle->rxBdCurrent->control &= ENET_BUFFDESCRIPTOR_RX_WRAP_MASK;
  136e18:	e51b300c 	ldr	r3, [fp, #-12]
  136e1c:	e5933004 	ldr	r3, [r3, #4]
  136e20:	e1d330b2 	ldrh	r3, [r3, #2]
  136e24:	e6ff2073 	uxth	r2, r3
  136e28:	e51b300c 	ldr	r3, [fp, #-12]
  136e2c:	e5933004 	ldr	r3, [r3, #4]
  136e30:	e2022a02 	and	r2, r2, #8192	; 0x2000
  136e34:	e6ff2072 	uxth	r2, r2
  136e38:	e1c320b2 	strh	r2, [r3, #2]
    /* Sets the receive buffer descriptor with the empty flag. */
    handle->rxBdCurrent->control |= ENET_BUFFDESCRIPTOR_RX_EMPTY_MASK;
  136e3c:	e51b300c 	ldr	r3, [fp, #-12]
  136e40:	e5933004 	ldr	r3, [r3, #4]
  136e44:	e1d330b2 	ldrh	r3, [r3, #2]
  136e48:	e6ff3073 	uxth	r3, r3
  136e4c:	e51b200c 	ldr	r2, [fp, #-12]
  136e50:	e5922004 	ldr	r2, [r2, #4]
  136e54:	e1e03883 	mvn	r3, r3, lsl #17
  136e58:	e1e038a3 	mvn	r3, r3, lsr #17
  136e5c:	e6ff3073 	uxth	r3, r3
  136e60:	e1c230b2 	strh	r3, [r2, #2]
    /* Increase current buffer descriptor to the next one. */
    if (handle->rxBdCurrent->control & ENET_BUFFDESCRIPTOR_RX_WRAP_MASK)
  136e64:	e51b300c 	ldr	r3, [fp, #-12]
  136e68:	e5933004 	ldr	r3, [r3, #4]
  136e6c:	e1d330b2 	ldrh	r3, [r3, #2]
  136e70:	e6ff3073 	uxth	r3, r3
  136e74:	e2033a02 	and	r3, r3, #8192	; 0x2000
  136e78:	e3530000 	cmp	r3, #0
  136e7c:	0a000004 	beq	136e94 <ENET_UpdateReadBuffers+0xb4>
    {
        handle->rxBdCurrent = handle->rxBdBase;
  136e80:	e51b300c 	ldr	r3, [fp, #-12]
  136e84:	e5932000 	ldr	r2, [r3]
  136e88:	e51b300c 	ldr	r3, [fp, #-12]
  136e8c:	e5832004 	str	r2, [r3, #4]
  136e90:	ea000004 	b	136ea8 <ENET_UpdateReadBuffers+0xc8>
    }
    else
    {
        handle->rxBdCurrent++;
  136e94:	e51b300c 	ldr	r3, [fp, #-12]
  136e98:	e5933004 	ldr	r3, [r3, #4]
  136e9c:	e2832008 	add	r2, r3, #8
  136ea0:	e51b300c 	ldr	r3, [fp, #-12]
  136ea4:	e5832004 	str	r2, [r3, #4]
    }
    /* Actives the receive buffer descriptor. */
    base->RDAR = ENET_RDAR_RDAR_MASK;
  136ea8:	e51b3008 	ldr	r3, [fp, #-8]
  136eac:	e3a02401 	mov	r2, #16777216	; 0x1000000
  136eb0:	e5832010 	str	r2, [r3, #16]
}
  136eb4:	e320f000 	nop	{0}
  136eb8:	e24bd004 	sub	sp, fp, #4
  136ebc:	e8bd8800 	pop	{fp, pc}

00136ec0 <ENET_SendFrame>:

status_t ENET_SendFrame(ENET_Type *base, enet_handle_t *handle, const uint8_t *data, uint16_t length,uint32_t last_flag)
{
  136ec0:	e92d4800 	push	{fp, lr}
  136ec4:	e28db004 	add	fp, sp, #4
  136ec8:	e24dd018 	sub	sp, sp, #24
  136ecc:	e50b0010 	str	r0, [fp, #-16]
  136ed0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  136ed4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  136ed8:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
    RT_ASSERT(handle);
  136edc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136ee0:	e3530000 	cmp	r3, #0
  136ee4:	1a000005 	bne	136f00 <ENET_SendFrame+0x40>
  136ee8:	e3002313 	movw	r2, #787	; 0x313
  136eec:	e3091878 	movw	r1, #39032	; 0x9878
  136ef0:	e3401014 	movt	r1, #20
  136ef4:	e309044c 	movw	r0, #37964	; 0x944c
  136ef8:	e3400014 	movt	r0, #20
  136efc:	ebff31a5 	bl	103598 <rt_assert_handler>
    RT_ASSERT(handle->txBdCurrent);
  136f00:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136f04:	e593300c 	ldr	r3, [r3, #12]
  136f08:	e3530000 	cmp	r3, #0
  136f0c:	1a000005 	bne	136f28 <ENET_SendFrame+0x68>
  136f10:	e3a02fc5 	mov	r2, #788	; 0x314
  136f14:	e3091878 	movw	r1, #39032	; 0x9878
  136f18:	e3401014 	movt	r1, #20
  136f1c:	e3090748 	movw	r0, #38728	; 0x9748
  136f20:	e3400014 	movt	r0, #20
  136f24:	ebff319b 	bl	103598 <rt_assert_handler>
    RT_ASSERT(data);
  136f28:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136f2c:	e3530000 	cmp	r3, #0
  136f30:	1a000005 	bne	136f4c <ENET_SendFrame+0x8c>
  136f34:	e3002315 	movw	r2, #789	; 0x315
  136f38:	e3091878 	movw	r1, #39032	; 0x9878
  136f3c:	e3401014 	movt	r1, #20
  136f40:	e309075c 	movw	r0, #38748	; 0x975c
  136f44:	e3400014 	movt	r0, #20
  136f48:	ebff3192 	bl	103598 <rt_assert_handler>
    RT_ASSERT(length <= ENET_FRAME_MAX_FRAMELEN);
  136f4c:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  136f50:	e30025ee 	movw	r2, #1518	; 0x5ee
  136f54:	e1530002 	cmp	r3, r2
  136f58:	9a000005 	bls	136f74 <ENET_SendFrame+0xb4>
  136f5c:	e3002316 	movw	r2, #790	; 0x316
  136f60:	e3091878 	movw	r1, #39032	; 0x9878
  136f64:	e3401014 	movt	r1, #20
  136f68:	e3090764 	movw	r0, #38756	; 0x9764
  136f6c:	e3400014 	movt	r0, #20
  136f70:	ebff3188 	bl	103598 <rt_assert_handler>

    volatile enet_tx_bd_struct_t *curBuffDescrip = handle->txBdCurrent;
  136f74:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136f78:	e593300c 	ldr	r3, [r3, #12]
  136f7c:	e50b3008 	str	r3, [fp, #-8]
    /* Check if the transmit buffer is ready. */
    if (curBuffDescrip->control & ENET_BUFFDESCRIPTOR_TX_READY_MASK)
  136f80:	e51b3008 	ldr	r3, [fp, #-8]
  136f84:	e1d330b2 	ldrh	r3, [r3, #2]
  136f88:	e6ff3073 	uxth	r3, r3
  136f8c:	e6bf3073 	sxth	r3, r3
  136f90:	e3530000 	cmp	r3, #0
  136f94:	aa000001 	bge	136fa0 <ENET_SendFrame+0xe0>
    {
        return kStatus_ENET_TxFrameBusy;
  136f98:	e3003fa3 	movw	r3, #4003	; 0xfa3
  136f9c:	ea00004b 	b	1370d0 <ENET_SendFrame+0x210>
    }
    /* One transmit buffer is enough for one frame. */
    if (handle->txBuffSizeAlign >= length)
  136fa0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136fa4:	e5932014 	ldr	r2, [r3, #20]
  136fa8:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  136fac:	e1520003 	cmp	r2, r3
  136fb0:	3a000045 	bcc	1370cc <ENET_SendFrame+0x20c>
    {
        /* Copy data to the buffer for uDMA transfer. */
        rt_memcpy(buffer_vaddr_tx[curBuffDescrip - handle->txBdBase], data, length);
  136fb4:	e51b3008 	ldr	r3, [fp, #-8]
  136fb8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  136fbc:	e5922008 	ldr	r2, [r2, #8]
  136fc0:	e0433002 	sub	r3, r3, r2
  136fc4:	e1a031c3 	asr	r3, r3, #3
  136fc8:	e1a02003 	mov	r2, r3
  136fcc:	e3053400 	movw	r3, #21504	; 0x5400
  136fd0:	e3403057 	movt	r3, #87	; 0x57
  136fd4:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  136fd8:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
  136fdc:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  136fe0:	e1a00003 	mov	r0, r3
  136fe4:	ebff30c5 	bl	103300 <rt_memcpy>
        /* Set data length. */
        curBuffDescrip->length = length;
  136fe8:	e51b3008 	ldr	r3, [fp, #-8]
  136fec:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
  136ff0:	e1c320b0 	strh	r2, [r3]
        if(last_flag)
  136ff4:	e59b3004 	ldr	r3, [fp, #4]
  136ff8:	e3530000 	cmp	r3, #0
  136ffc:	0a000009 	beq	137028 <ENET_SendFrame+0x168>
        {
            curBuffDescrip->control |= (ENET_BUFFDESCRIPTOR_TX_READY_MASK | ENET_BUFFDESCRIPTOR_TX_LAST_MASK);
  137000:	e51b3008 	ldr	r3, [fp, #-8]
  137004:	e1d330b2 	ldrh	r3, [r3, #2]
  137008:	e6ff2073 	uxth	r2, r3
  13700c:	e3a03b22 	mov	r3, #34816	; 0x8800
  137010:	e34f3fff 	movt	r3, #65535	; 0xffff
  137014:	e1823003 	orr	r3, r2, r3
  137018:	e6ff2073 	uxth	r2, r3
  13701c:	e51b3008 	ldr	r3, [fp, #-8]
  137020:	e1c320b2 	strh	r2, [r3, #2]
  137024:	ea00000e 	b	137064 <ENET_SendFrame+0x1a4>
        }
        else
        {
            curBuffDescrip->control &= ~ENET_BUFFDESCRIPTOR_TX_LAST_MASK;
  137028:	e51b3008 	ldr	r3, [fp, #-8]
  13702c:	e1d330b2 	ldrh	r3, [r3, #2]
  137030:	e6ff3073 	uxth	r3, r3
  137034:	e3c33b02 	bic	r3, r3, #2048	; 0x800
  137038:	e6ff2073 	uxth	r2, r3
  13703c:	e51b3008 	ldr	r3, [fp, #-8]
  137040:	e1c320b2 	strh	r2, [r3, #2]
            curBuffDescrip->control |= ENET_BUFFDESCRIPTOR_TX_READY_MASK;
  137044:	e51b3008 	ldr	r3, [fp, #-8]
  137048:	e1d330b2 	ldrh	r3, [r3, #2]
  13704c:	e6ff3073 	uxth	r3, r3
  137050:	e1e03883 	mvn	r3, r3, lsl #17
  137054:	e1e038a3 	mvn	r3, r3, lsr #17
  137058:	e6ff2073 	uxth	r2, r3
  13705c:	e51b3008 	ldr	r3, [fp, #-8]
  137060:	e1c320b2 	strh	r2, [r3, #2]
        }

        /* Active the transmit buffer descriptor. */
        base->TDAR = ENET_TDAR_TDAR_MASK;
  137064:	e51b3010 	ldr	r3, [fp, #-16]
  137068:	e3a02401 	mov	r2, #16777216	; 0x1000000
  13706c:	e5832014 	str	r2, [r3, #20]
        /* Increase the buffer descriptor address. */
        while((base->TDAR != 0))
  137070:	e320f000 	nop	{0}
  137074:	e51b3010 	ldr	r3, [fp, #-16]
  137078:	e5933014 	ldr	r3, [r3, #20]
  13707c:	e3530000 	cmp	r3, #0
  137080:	1afffffb 	bne	137074 <ENET_SendFrame+0x1b4>
        {
        }
        if (curBuffDescrip->control & ENET_BUFFDESCRIPTOR_TX_WRAP_MASK)
  137084:	e51b3008 	ldr	r3, [fp, #-8]
  137088:	e1d330b2 	ldrh	r3, [r3, #2]
  13708c:	e6ff3073 	uxth	r3, r3
  137090:	e2033a02 	and	r3, r3, #8192	; 0x2000
  137094:	e3530000 	cmp	r3, #0
  137098:	0a000004 	beq	1370b0 <ENET_SendFrame+0x1f0>
        {
            handle->txBdCurrent = handle->txBdBase;
  13709c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1370a0:	e5932008 	ldr	r2, [r3, #8]
  1370a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1370a8:	e583200c 	str	r2, [r3, #12]
  1370ac:	ea000004 	b	1370c4 <ENET_SendFrame+0x204>
        }
        else
        {
            handle->txBdCurrent++;
  1370b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1370b4:	e593300c 	ldr	r3, [r3, #12]
  1370b8:	e2832008 	add	r2, r3, #8
  1370bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1370c0:	e583200c 	str	r2, [r3, #12]
        }
        return kStatus_Success;
  1370c4:	e3a03000 	mov	r3, #0
  1370c8:	ea000000 	b	1370d0 <ENET_SendFrame+0x210>
    }
    else
    {
        return kStatus_ENET_RxFrameError;
  1370cc:	e3a03efa 	mov	r3, #4000	; 0xfa0
    }
}
  1370d0:	e1a00003 	mov	r0, r3
  1370d4:	e24bd004 	sub	sp, fp, #4
  1370d8:	e8bd8800 	pop	{fp, pc}

001370dc <ENET_AddMulticastGroup>:

void ENET_AddMulticastGroup(ENET_Type *base, uint8_t *address)
{
  1370dc:	e92d4800 	push	{fp, lr}
  1370e0:	e28db004 	add	fp, sp, #4
  1370e4:	e24dd018 	sub	sp, sp, #24
  1370e8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1370ec:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(address);
  1370f0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1370f4:	e3530000 	cmp	r3, #0
  1370f8:	1a000005 	bne	137114 <ENET_AddMulticastGroup+0x38>
  1370fc:	e3002347 	movw	r2, #839	; 0x347
  137100:	e3091888 	movw	r1, #39048	; 0x9888
  137104:	e3401014 	movt	r1, #20
  137108:	e3090788 	movw	r0, #38792	; 0x9788
  13710c:	e3400014 	movt	r0, #20
  137110:	ebff3120 	bl	103598 <rt_assert_handler>

    uint32_t crc = 0xFFFFFFFFU;
  137114:	e3e03000 	mvn	r3, #0
  137118:	e50b3008 	str	r3, [fp, #-8]
    uint32_t count1 = 0;
  13711c:	e3a03000 	mov	r3, #0
  137120:	e50b300c 	str	r3, [fp, #-12]
    uint32_t count2 = 0;
  137124:	e3a03000 	mov	r3, #0
  137128:	e50b3010 	str	r3, [fp, #-16]

    /* Calculates the CRC-32 polynomial on the multicast group address. */
    for (count1 = 0; count1 < ENET_FRAME_MACLEN; count1++)
  13712c:	e3a03000 	mov	r3, #0
  137130:	e50b300c 	str	r3, [fp, #-12]
  137134:	ea000028 	b	1371dc <ENET_AddMulticastGroup+0x100>
    {
        uint8_t c = address[count1];
  137138:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  13713c:	e51b300c 	ldr	r3, [fp, #-12]
  137140:	e0823003 	add	r3, r2, r3
  137144:	e5d33000 	ldrb	r3, [r3]
  137148:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
        for (count2 = 0; count2 < 0x08U; count2++)
  13714c:	e3a03000 	mov	r3, #0
  137150:	e50b3010 	str	r3, [fp, #-16]
  137154:	ea00001a 	b	1371c4 <ENET_AddMulticastGroup+0xe8>
        {
            if ((c ^ crc) & 1U)
  137158:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  13715c:	e51b3008 	ldr	r3, [fp, #-8]
  137160:	e0233002 	eor	r3, r3, r2
  137164:	e2033001 	and	r3, r3, #1
  137168:	e3530000 	cmp	r3, #0
  13716c:	0a00000b 	beq	1371a0 <ENET_AddMulticastGroup+0xc4>
            {
                crc >>= 1U;
  137170:	e51b3008 	ldr	r3, [fp, #-8]
  137174:	e1a030a3 	lsr	r3, r3, #1
  137178:	e50b3008 	str	r3, [fp, #-8]
                c >>= 1U;
  13717c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  137180:	e1a030a3 	lsr	r3, r3, #1
  137184:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
                crc ^= 0xEDB88320U;
  137188:	e51b2008 	ldr	r2, [fp, #-8]
  13718c:	e3083320 	movw	r3, #33568	; 0x8320
  137190:	e34e3db8 	movt	r3, #60856	; 0xedb8
  137194:	e0233002 	eor	r3, r3, r2
  137198:	e50b3008 	str	r3, [fp, #-8]
  13719c:	ea000005 	b	1371b8 <ENET_AddMulticastGroup+0xdc>
            }
            else
            {
                crc >>= 1U;
  1371a0:	e51b3008 	ldr	r3, [fp, #-8]
  1371a4:	e1a030a3 	lsr	r3, r3, #1
  1371a8:	e50b3008 	str	r3, [fp, #-8]
                c >>= 1U;
  1371ac:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  1371b0:	e1a030a3 	lsr	r3, r3, #1
  1371b4:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
        for (count2 = 0; count2 < 0x08U; count2++)
  1371b8:	e51b3010 	ldr	r3, [fp, #-16]
  1371bc:	e2833001 	add	r3, r3, #1
  1371c0:	e50b3010 	str	r3, [fp, #-16]
  1371c4:	e51b3010 	ldr	r3, [fp, #-16]
  1371c8:	e3530007 	cmp	r3, #7
  1371cc:	9affffe1 	bls	137158 <ENET_AddMulticastGroup+0x7c>
    for (count1 = 0; count1 < ENET_FRAME_MACLEN; count1++)
  1371d0:	e51b300c 	ldr	r3, [fp, #-12]
  1371d4:	e2833001 	add	r3, r3, #1
  1371d8:	e50b300c 	str	r3, [fp, #-12]
  1371dc:	e51b300c 	ldr	r3, [fp, #-12]
  1371e0:	e3530005 	cmp	r3, #5
  1371e4:	9affffd3 	bls	137138 <ENET_AddMulticastGroup+0x5c>
            }
        }
    }

    /* Enable a multicast group address. */
    if (!((crc >> 0x1FU) & 1U))
  1371e8:	e51b3008 	ldr	r3, [fp, #-8]
  1371ec:	e3530000 	cmp	r3, #0
  1371f0:	ba00000a 	blt	137220 <ENET_AddMulticastGroup+0x144>
    {
        base->GALR |= 1U << ((crc >> 0x1AU) & 0x1FU);
  1371f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1371f8:	e5932124 	ldr	r2, [r3, #292]	; 0x124
  1371fc:	e51b3008 	ldr	r3, [fp, #-8]
  137200:	e1a03d23 	lsr	r3, r3, #26
  137204:	e203301f 	and	r3, r3, #31
  137208:	e3a01001 	mov	r1, #1
  13720c:	e1a03311 	lsl	r3, r1, r3
  137210:	e1822003 	orr	r2, r2, r3
  137214:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137218:	e5832124 	str	r2, [r3, #292]	; 0x124
    }
    else
    {
        base->GAUR |= 1U << ((crc >> 0x1AU) & 0x1FU);
    }
}
  13721c:	ea000009 	b	137248 <ENET_AddMulticastGroup+0x16c>
        base->GAUR |= 1U << ((crc >> 0x1AU) & 0x1FU);
  137220:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137224:	e5932120 	ldr	r2, [r3, #288]	; 0x120
  137228:	e51b3008 	ldr	r3, [fp, #-8]
  13722c:	e1a03d23 	lsr	r3, r3, #26
  137230:	e203301f 	and	r3, r3, #31
  137234:	e3a01001 	mov	r1, #1
  137238:	e1a03311 	lsl	r3, r1, r3
  13723c:	e1822003 	orr	r2, r2, r3
  137240:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137244:	e5832120 	str	r2, [r3, #288]	; 0x120
}
  137248:	e320f000 	nop	{0}
  13724c:	e24bd004 	sub	sp, fp, #4
  137250:	e8bd8800 	pop	{fp, pc}

00137254 <ENET_LeaveMulticastGroup>:

void ENET_LeaveMulticastGroup(ENET_Type *base, uint8_t *address)
{
  137254:	e92d4800 	push	{fp, lr}
  137258:	e28db004 	add	fp, sp, #4
  13725c:	e24dd018 	sub	sp, sp, #24
  137260:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  137264:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(address);
  137268:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  13726c:	e3530000 	cmp	r3, #0
  137270:	1a000005 	bne	13728c <ENET_LeaveMulticastGroup+0x38>
  137274:	e300236e 	movw	r2, #878	; 0x36e
  137278:	e30918a0 	movw	r1, #39072	; 0x98a0
  13727c:	e3401014 	movt	r1, #20
  137280:	e3090788 	movw	r0, #38792	; 0x9788
  137284:	e3400014 	movt	r0, #20
  137288:	ebff30c2 	bl	103598 <rt_assert_handler>

    uint32_t crc = 0xFFFFFFFFU;
  13728c:	e3e03000 	mvn	r3, #0
  137290:	e50b3008 	str	r3, [fp, #-8]
    uint32_t count1 = 0;
  137294:	e3a03000 	mov	r3, #0
  137298:	e50b300c 	str	r3, [fp, #-12]
    uint32_t count2 = 0;
  13729c:	e3a03000 	mov	r3, #0
  1372a0:	e50b3010 	str	r3, [fp, #-16]

    /* Calculates the CRC-32 polynomial on the multicast group address. */
    for (count1 = 0; count1 < ENET_FRAME_MACLEN; count1++)
  1372a4:	e3a03000 	mov	r3, #0
  1372a8:	e50b300c 	str	r3, [fp, #-12]
  1372ac:	ea000028 	b	137354 <ENET_LeaveMulticastGroup+0x100>
    {
        uint8_t c = address[count1];
  1372b0:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1372b4:	e51b300c 	ldr	r3, [fp, #-12]
  1372b8:	e0823003 	add	r3, r2, r3
  1372bc:	e5d33000 	ldrb	r3, [r3]
  1372c0:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
        for (count2 = 0; count2 < 0x08U; count2++)
  1372c4:	e3a03000 	mov	r3, #0
  1372c8:	e50b3010 	str	r3, [fp, #-16]
  1372cc:	ea00001a 	b	13733c <ENET_LeaveMulticastGroup+0xe8>
        {
            if ((c ^ crc) & 1U)
  1372d0:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  1372d4:	e51b3008 	ldr	r3, [fp, #-8]
  1372d8:	e0233002 	eor	r3, r3, r2
  1372dc:	e2033001 	and	r3, r3, #1
  1372e0:	e3530000 	cmp	r3, #0
  1372e4:	0a00000b 	beq	137318 <ENET_LeaveMulticastGroup+0xc4>
            {
                crc >>= 1U;
  1372e8:	e51b3008 	ldr	r3, [fp, #-8]
  1372ec:	e1a030a3 	lsr	r3, r3, #1
  1372f0:	e50b3008 	str	r3, [fp, #-8]
                c >>= 1U;
  1372f4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  1372f8:	e1a030a3 	lsr	r3, r3, #1
  1372fc:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
                crc ^= 0xEDB88320U;
  137300:	e51b2008 	ldr	r2, [fp, #-8]
  137304:	e3083320 	movw	r3, #33568	; 0x8320
  137308:	e34e3db8 	movt	r3, #60856	; 0xedb8
  13730c:	e0233002 	eor	r3, r3, r2
  137310:	e50b3008 	str	r3, [fp, #-8]
  137314:	ea000005 	b	137330 <ENET_LeaveMulticastGroup+0xdc>
            }
            else
            {
                crc >>= 1U;
  137318:	e51b3008 	ldr	r3, [fp, #-8]
  13731c:	e1a030a3 	lsr	r3, r3, #1
  137320:	e50b3008 	str	r3, [fp, #-8]
                c >>= 1U;
  137324:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  137328:	e1a030a3 	lsr	r3, r3, #1
  13732c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
        for (count2 = 0; count2 < 0x08U; count2++)
  137330:	e51b3010 	ldr	r3, [fp, #-16]
  137334:	e2833001 	add	r3, r3, #1
  137338:	e50b3010 	str	r3, [fp, #-16]
  13733c:	e51b3010 	ldr	r3, [fp, #-16]
  137340:	e3530007 	cmp	r3, #7
  137344:	9affffe1 	bls	1372d0 <ENET_LeaveMulticastGroup+0x7c>
    for (count1 = 0; count1 < ENET_FRAME_MACLEN; count1++)
  137348:	e51b300c 	ldr	r3, [fp, #-12]
  13734c:	e2833001 	add	r3, r3, #1
  137350:	e50b300c 	str	r3, [fp, #-12]
  137354:	e51b300c 	ldr	r3, [fp, #-12]
  137358:	e3530005 	cmp	r3, #5
  13735c:	9affffd3 	bls	1372b0 <ENET_LeaveMulticastGroup+0x5c>
            }
        }
    }

    /* Set the hash table. */
    if (!((crc >> 0x1FU) & 1U))
  137360:	e51b3008 	ldr	r3, [fp, #-8]
  137364:	e3530000 	cmp	r3, #0
  137368:	ba00000b 	blt	13739c <ENET_LeaveMulticastGroup+0x148>
    {
        base->GALR &= ~(1U << ((crc >> 0x1AU) & 0x1FU));
  13736c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137370:	e5932124 	ldr	r2, [r3, #292]	; 0x124
  137374:	e51b3008 	ldr	r3, [fp, #-8]
  137378:	e1a03d23 	lsr	r3, r3, #26
  13737c:	e203301f 	and	r3, r3, #31
  137380:	e3a01001 	mov	r1, #1
  137384:	e1a03311 	lsl	r3, r1, r3
  137388:	e1e03003 	mvn	r3, r3
  13738c:	e0022003 	and	r2, r2, r3
  137390:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137394:	e5832124 	str	r2, [r3, #292]	; 0x124
    }
    else
    {
        base->GAUR &= ~(1U << ((crc >> 0x1AU) & 0x1FU));
    }
  137398:	ea00000a 	b	1373c8 <ENET_LeaveMulticastGroup+0x174>
        base->GAUR &= ~(1U << ((crc >> 0x1AU) & 0x1FU));
  13739c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1373a0:	e5932120 	ldr	r2, [r3, #288]	; 0x120
  1373a4:	e51b3008 	ldr	r3, [fp, #-8]
  1373a8:	e1a03d23 	lsr	r3, r3, #26
  1373ac:	e203301f 	and	r3, r3, #31
  1373b0:	e3a01001 	mov	r1, #1
  1373b4:	e1a03311 	lsl	r3, r1, r3
  1373b8:	e1e03003 	mvn	r3, r3
  1373bc:	e0022003 	and	r2, r2, r3
  1373c0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1373c4:	e5832120 	str	r2, [r3, #288]	; 0x120
  1373c8:	e320f000 	nop	{0}
  1373cc:	e24bd004 	sub	sp, fp, #4
  1373d0:	e8bd8800 	pop	{fp, pc}

001373d4 <GPIO_PinInit>:
/*******************************************************************************
 * Code
 ******************************************************************************/

void GPIO_PinInit(GPIO_Type* base, uint32_t pin, const gpio_pin_config_t* Config)
{
  1373d4:	e92d4800 	push	{fp, lr}
  1373d8:	e28db004 	add	fp, sp, #4
  1373dc:	e24dd010 	sub	sp, sp, #16
  1373e0:	e50b0008 	str	r0, [fp, #-8]
  1373e4:	e50b100c 	str	r1, [fp, #-12]
  1373e8:	e50b2010 	str	r2, [fp, #-16]
    /* Register reset to default value */
    base->IMR &= ~(1U << pin);
  1373ec:	e51b3008 	ldr	r3, [fp, #-8]
  1373f0:	e5932014 	ldr	r2, [r3, #20]
  1373f4:	e3a01001 	mov	r1, #1
  1373f8:	e51b300c 	ldr	r3, [fp, #-12]
  1373fc:	e1a03311 	lsl	r3, r1, r3
  137400:	e1e03003 	mvn	r3, r3
  137404:	e0022003 	and	r2, r2, r3
  137408:	e51b3008 	ldr	r3, [fp, #-8]
  13740c:	e5832014 	str	r2, [r3, #20]

    /* Configure GPIO pin direction */
    if (Config->direction == kGPIO_DigitalInput)
  137410:	e51b3010 	ldr	r3, [fp, #-16]
  137414:	e5933000 	ldr	r3, [r3]
  137418:	e3530000 	cmp	r3, #0
  13741c:	1a000009 	bne	137448 <GPIO_PinInit+0x74>
    {
        base->GDIR &= ~(1U << pin);
  137420:	e51b3008 	ldr	r3, [fp, #-8]
  137424:	e5932004 	ldr	r2, [r3, #4]
  137428:	e3a01001 	mov	r1, #1
  13742c:	e51b300c 	ldr	r3, [fp, #-12]
  137430:	e1a03311 	lsl	r3, r1, r3
  137434:	e1e03003 	mvn	r3, r3
  137438:	e0022003 	and	r2, r2, r3
  13743c:	e51b3008 	ldr	r3, [fp, #-8]
  137440:	e5832004 	str	r2, [r3, #4]
  137444:	ea00000d 	b	137480 <GPIO_PinInit+0xac>
    }
    else
    {
        GPIO_WritePinOutput(base, pin, Config->outputLogic);
  137448:	e51b3010 	ldr	r3, [fp, #-16]
  13744c:	e5d33004 	ldrb	r3, [r3, #4]
  137450:	e1a02003 	mov	r2, r3
  137454:	e51b100c 	ldr	r1, [fp, #-12]
  137458:	e51b0008 	ldr	r0, [fp, #-8]
  13745c:	eb000010 	bl	1374a4 <GPIO_WritePinOutput>
        base->GDIR |= (1U << pin);
  137460:	e51b3008 	ldr	r3, [fp, #-8]
  137464:	e5932004 	ldr	r2, [r3, #4]
  137468:	e3a01001 	mov	r1, #1
  13746c:	e51b300c 	ldr	r3, [fp, #-12]
  137470:	e1a03311 	lsl	r3, r1, r3
  137474:	e1822003 	orr	r2, r2, r3
  137478:	e51b3008 	ldr	r3, [fp, #-8]
  13747c:	e5832004 	str	r2, [r3, #4]
    }

    /* Configure GPIO pin interrupt mode */
    GPIO_SetPinInterruptConfig(base, pin, Config->interruptMode);
  137480:	e51b3010 	ldr	r3, [fp, #-16]
  137484:	e5933008 	ldr	r3, [r3, #8]
  137488:	e1a02003 	mov	r2, r3
  13748c:	e51b100c 	ldr	r1, [fp, #-12]
  137490:	e51b0008 	ldr	r0, [fp, #-8]
  137494:	eb00002c 	bl	13754c <GPIO_SetPinInterruptConfig>
}
  137498:	e320f000 	nop	{0}
  13749c:	e24bd004 	sub	sp, fp, #4
  1374a0:	e8bd8800 	pop	{fp, pc}

001374a4 <GPIO_WritePinOutput>:

void GPIO_WritePinOutput(GPIO_Type* base, uint32_t pin, uint8_t output)
{
  1374a4:	e92d4800 	push	{fp, lr}
  1374a8:	e28db004 	add	fp, sp, #4
  1374ac:	e24dd010 	sub	sp, sp, #16
  1374b0:	e50b0008 	str	r0, [fp, #-8]
  1374b4:	e50b100c 	str	r1, [fp, #-12]
  1374b8:	e1a03002 	mov	r3, r2
  1374bc:	e54b300d 	strb	r3, [fp, #-13]
    assert(pin < 32);
  1374c0:	e51b300c 	ldr	r3, [fp, #-12]
  1374c4:	e353001f 	cmp	r3, #31
  1374c8:	9a000007 	bls	1374ec <GPIO_WritePinOutput+0x48>
  1374cc:	e30938f4 	movw	r3, #39156	; 0x98f4
  1374d0:	e3403014 	movt	r3, #20
  1374d4:	e3a0204b 	mov	r2, #75	; 0x4b
  1374d8:	e30918bc 	movw	r1, #39100	; 0x98bc
  1374dc:	e3401014 	movt	r1, #20
  1374e0:	e30908e8 	movw	r0, #39144	; 0x98e8
  1374e4:	e3400014 	movt	r0, #20
  1374e8:	eb000445 	bl	138604 <__assert_fail>
    if (output == 0U)
  1374ec:	e55b300d 	ldrb	r3, [fp, #-13]
  1374f0:	e3530000 	cmp	r3, #0
  1374f4:	1a000009 	bne	137520 <GPIO_WritePinOutput+0x7c>
    {
        base->DR &= ~(1U << pin);  /* Set pin output to low level.*/
  1374f8:	e51b3008 	ldr	r3, [fp, #-8]
  1374fc:	e5932000 	ldr	r2, [r3]
  137500:	e3a01001 	mov	r1, #1
  137504:	e51b300c 	ldr	r3, [fp, #-12]
  137508:	e1a03311 	lsl	r3, r1, r3
  13750c:	e1e03003 	mvn	r3, r3
  137510:	e0022003 	and	r2, r2, r3
  137514:	e51b3008 	ldr	r3, [fp, #-8]
  137518:	e5832000 	str	r2, [r3]
    }
    else
    {
        base->DR |= (1U << pin);  /* Set pin output to high level.*/
    }
}
  13751c:	ea000007 	b	137540 <GPIO_WritePinOutput+0x9c>
        base->DR |= (1U << pin);  /* Set pin output to high level.*/
  137520:	e51b3008 	ldr	r3, [fp, #-8]
  137524:	e5932000 	ldr	r2, [r3]
  137528:	e3a01001 	mov	r1, #1
  13752c:	e51b300c 	ldr	r3, [fp, #-12]
  137530:	e1a03311 	lsl	r3, r1, r3
  137534:	e1822003 	orr	r2, r2, r3
  137538:	e51b3008 	ldr	r3, [fp, #-8]
  13753c:	e5832000 	str	r2, [r3]
}
  137540:	e320f000 	nop	{0}
  137544:	e24bd004 	sub	sp, fp, #4
  137548:	e8bd8800 	pop	{fp, pc}

0013754c <GPIO_SetPinInterruptConfig>:

void GPIO_SetPinInterruptConfig(GPIO_Type* base, uint32_t pin, gpio_interrupt_mode_t pinInterruptMode)
{
  13754c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  137550:	e28db000 	add	fp, sp, #0
  137554:	e24dd01c 	sub	sp, sp, #28
  137558:	e50b0010 	str	r0, [fp, #-16]
  13755c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  137560:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    volatile uint32_t *icr;
    uint32_t icrShift;

    icrShift = pin;
  137564:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137568:	e50b300c 	str	r3, [fp, #-12]

    /* Register reset to default value */
    base->EDGE_SEL &= ~(1U << pin);
  13756c:	e51b3010 	ldr	r3, [fp, #-16]
  137570:	e593201c 	ldr	r2, [r3, #28]
  137574:	e3a01001 	mov	r1, #1
  137578:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13757c:	e1a03311 	lsl	r3, r1, r3
  137580:	e1e03003 	mvn	r3, r3
  137584:	e0022003 	and	r2, r2, r3
  137588:	e51b3010 	ldr	r3, [fp, #-16]
  13758c:	e583201c 	str	r2, [r3, #28]

    if(pin < 16)
  137590:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137594:	e353000f 	cmp	r3, #15
  137598:	8a000003 	bhi	1375ac <GPIO_SetPinInterruptConfig+0x60>
    {
        icr = &(base->ICR1);
  13759c:	e51b3010 	ldr	r3, [fp, #-16]
  1375a0:	e283300c 	add	r3, r3, #12
  1375a4:	e50b3008 	str	r3, [fp, #-8]
  1375a8:	ea000005 	b	1375c4 <GPIO_SetPinInterruptConfig+0x78>
    }
    else
    {
        icr = &(base->ICR2);
  1375ac:	e51b3010 	ldr	r3, [fp, #-16]
  1375b0:	e2833010 	add	r3, r3, #16
  1375b4:	e50b3008 	str	r3, [fp, #-8]
        icrShift -= 16;
  1375b8:	e51b300c 	ldr	r3, [fp, #-12]
  1375bc:	e2433010 	sub	r3, r3, #16
  1375c0:	e50b300c 	str	r3, [fp, #-12]
    }
    switch(pinInterruptMode)
  1375c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1375c8:	e2433001 	sub	r3, r3, #1
  1375cc:	e3530004 	cmp	r3, #4
  1375d0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  1375d4:	ea000042 	b	1376e4 <GPIO_SetPinInterruptConfig+0x198>
  1375d8:	001375ec 	.word	0x001375ec
  1375dc:	00137618 	.word	0x00137618
  1375e0:	00137658 	.word	0x00137658
  1375e4:	00137698 	.word	0x00137698
  1375e8:	001376c0 	.word	0x001376c0
    {
        case(kGPIO_IntLowLevel):
            *icr &= ~(3U << (2 * icrShift));
  1375ec:	e51b3008 	ldr	r3, [fp, #-8]
  1375f0:	e5932000 	ldr	r2, [r3]
  1375f4:	e51b300c 	ldr	r3, [fp, #-12]
  1375f8:	e1a03083 	lsl	r3, r3, #1
  1375fc:	e3a01003 	mov	r1, #3
  137600:	e1a03311 	lsl	r3, r1, r3
  137604:	e1e03003 	mvn	r3, r3
  137608:	e0022003 	and	r2, r2, r3
  13760c:	e51b3008 	ldr	r3, [fp, #-8]
  137610:	e5832000 	str	r2, [r3]
            break;
  137614:	ea000033 	b	1376e8 <GPIO_SetPinInterruptConfig+0x19c>
        case(kGPIO_IntHighLevel):
            *icr = (*icr & (~(3U << (2 * icrShift)))) | (1U << (2 * icrShift));
  137618:	e51b3008 	ldr	r3, [fp, #-8]
  13761c:	e5932000 	ldr	r2, [r3]
  137620:	e51b300c 	ldr	r3, [fp, #-12]
  137624:	e1a03083 	lsl	r3, r3, #1
  137628:	e3a01003 	mov	r1, #3
  13762c:	e1a03311 	lsl	r3, r1, r3
  137630:	e1e03003 	mvn	r3, r3
  137634:	e0022003 	and	r2, r2, r3
  137638:	e51b300c 	ldr	r3, [fp, #-12]
  13763c:	e1a03083 	lsl	r3, r3, #1
  137640:	e3a01001 	mov	r1, #1
  137644:	e1a03311 	lsl	r3, r1, r3
  137648:	e1822003 	orr	r2, r2, r3
  13764c:	e51b3008 	ldr	r3, [fp, #-8]
  137650:	e5832000 	str	r2, [r3]
            break;
  137654:	ea000023 	b	1376e8 <GPIO_SetPinInterruptConfig+0x19c>
        case(kGPIO_IntRisingEdge):
            *icr = (*icr & (~(3U << (2 * icrShift)))) | (2U << (2 * icrShift));
  137658:	e51b3008 	ldr	r3, [fp, #-8]
  13765c:	e5932000 	ldr	r2, [r3]
  137660:	e51b300c 	ldr	r3, [fp, #-12]
  137664:	e1a03083 	lsl	r3, r3, #1
  137668:	e3a01003 	mov	r1, #3
  13766c:	e1a03311 	lsl	r3, r1, r3
  137670:	e1e03003 	mvn	r3, r3
  137674:	e0022003 	and	r2, r2, r3
  137678:	e51b300c 	ldr	r3, [fp, #-12]
  13767c:	e1a03083 	lsl	r3, r3, #1
  137680:	e3a01002 	mov	r1, #2
  137684:	e1a03311 	lsl	r3, r1, r3
  137688:	e1822003 	orr	r2, r2, r3
  13768c:	e51b3008 	ldr	r3, [fp, #-8]
  137690:	e5832000 	str	r2, [r3]
            break;
  137694:	ea000013 	b	1376e8 <GPIO_SetPinInterruptConfig+0x19c>
        case(kGPIO_IntFallingEdge):
            *icr |= (3U << (2 * icrShift));
  137698:	e51b3008 	ldr	r3, [fp, #-8]
  13769c:	e5932000 	ldr	r2, [r3]
  1376a0:	e51b300c 	ldr	r3, [fp, #-12]
  1376a4:	e1a03083 	lsl	r3, r3, #1
  1376a8:	e3a01003 	mov	r1, #3
  1376ac:	e1a03311 	lsl	r3, r1, r3
  1376b0:	e1822003 	orr	r2, r2, r3
  1376b4:	e51b3008 	ldr	r3, [fp, #-8]
  1376b8:	e5832000 	str	r2, [r3]
            break;
  1376bc:	ea000009 	b	1376e8 <GPIO_SetPinInterruptConfig+0x19c>
        case(kGPIO_IntRisingOrFallingEdge):
            base->EDGE_SEL |= (1U << pin);
  1376c0:	e51b3010 	ldr	r3, [fp, #-16]
  1376c4:	e593201c 	ldr	r2, [r3, #28]
  1376c8:	e3a01001 	mov	r1, #1
  1376cc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1376d0:	e1a03311 	lsl	r3, r1, r3
  1376d4:	e1822003 	orr	r2, r2, r3
  1376d8:	e51b3010 	ldr	r3, [fp, #-16]
  1376dc:	e583201c 	str	r2, [r3, #28]
            break;
  1376e0:	ea000000 	b	1376e8 <GPIO_SetPinInterruptConfig+0x19c>
        default:
            break;
  1376e4:	e320f000 	nop	{0}
    }
}
  1376e8:	e320f000 	nop	{0}
  1376ec:	e28bd000 	add	sp, fp, #0
  1376f0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1376f4:	e12fff1e 	bx	lr

001376f8 <ENET_ReadSMIData>:
{
  1376f8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1376fc:	e28db000 	add	fp, sp, #0
  137700:	e24dd00c 	sub	sp, sp, #12
  137704:	e50b0008 	str	r0, [fp, #-8]
    return (uint32_t)((base->MMFR & ENET_MMFR_DATA_MASK) >> ENET_MMFR_DATA_SHIFT);
  137708:	e51b3008 	ldr	r3, [fp, #-8]
  13770c:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  137710:	e6ff3073 	uxth	r3, r3
}
  137714:	e1a00003 	mov	r0, r3
  137718:	e28bd000 	add	sp, fp, #0
  13771c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  137720:	e12fff1e 	bx	lr

00137724 <ENET_GetInterruptStatus>:
 * @param base  ENET peripheral base address.
 * @return The event status of the interrupt source. This is the logical OR of members
 *         of the enumeration :: enet_interrupt_enable_t.
 */
static inline uint32_t ENET_GetInterruptStatus(ENET_Type *base)
{
  137724:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  137728:	e28db000 	add	fp, sp, #0
  13772c:	e24dd00c 	sub	sp, sp, #12
  137730:	e50b0008 	str	r0, [fp, #-8]
    return base->EIR;
  137734:	e51b3008 	ldr	r3, [fp, #-8]
  137738:	e5933004 	ldr	r3, [r3, #4]
}
  13773c:	e1a00003 	mov	r0, r3
  137740:	e28bd000 	add	sp, fp, #0
  137744:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  137748:	e12fff1e 	bx	lr

0013774c <ENET_ClearInterruptStatus>:
 * @param base  ENET peripheral base address.
 * @param mask  ENET interrupt source to be cleared.
 * This is the logical OR of members of the enumeration :: enet_interrupt_enable_t.
 */
static inline void ENET_ClearInterruptStatus(ENET_Type *base, uint32_t mask)
{
  13774c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  137750:	e28db000 	add	fp, sp, #0
  137754:	e24dd00c 	sub	sp, sp, #12
  137758:	e50b0008 	str	r0, [fp, #-8]
  13775c:	e50b100c 	str	r1, [fp, #-12]
    base->EIR = mask;
  137760:	e51b3008 	ldr	r3, [fp, #-8]
  137764:	e51b200c 	ldr	r2, [fp, #-12]
  137768:	e5832004 	str	r2, [r3, #4]
}
  13776c:	e320f000 	nop	{0}
  137770:	e28bd000 	add	sp, fp, #0
  137774:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  137778:	e12fff1e 	bx	lr

0013777c <phy_reset>:

/*******************************************************************************
 * Code
 ******************************************************************************/
status_t phy_reset(GPIO_Type *base,uint32_t pin)
{
  13777c:	e92d4800 	push	{fp, lr}
  137780:	e28db004 	add	fp, sp, #4
  137784:	e24dd018 	sub	sp, sp, #24
  137788:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  13778c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    GPIO_Type *gpio_base = NULL;
  137790:	e3a03000 	mov	r3, #0
  137794:	e50b3008 	str	r3, [fp, #-8]
    gpio_pin_config_t sw_config =
  137798:	e3a03001 	mov	r3, #1
  13779c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1377a0:	e3a03000 	mov	r3, #0
  1377a4:	e54b3010 	strb	r3, [fp, #-16]
  1377a8:	e3a03000 	mov	r3, #0
  1377ac:	e50b300c 	str	r3, [fp, #-12]
        0,
        kGPIO_NoIntmode,
    };

    // gpio_base = (GPIO_Type *)rt_ioremap((void *)base,0x1000);
    gpio_base = (GPIO_Type *)ueth_remap((void *)base, UETH_REMAP, 0x1000);
  1377b0:	e3a02a01 	mov	r2, #4096	; 0x1000
  1377b4:	e3a01001 	mov	r1, #1
  1377b8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1377bc:	ebff3240 	bl	1040c4 <ueth_remap>
  1377c0:	e50b0008 	str	r0, [fp, #-8]
    GPIO_PinInit(gpio_base, pin, &sw_config);
  1377c4:	e24b3014 	sub	r3, fp, #20
  1377c8:	e1a02003 	mov	r2, r3
  1377cc:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1377d0:	e51b0008 	ldr	r0, [fp, #-8]
  1377d4:	ebfffefe 	bl	1373d4 <GPIO_PinInit>
    GPIO_WritePinOutput(gpio_base,pin,0);
  1377d8:	e3a02000 	mov	r2, #0
  1377dc:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1377e0:	e51b0008 	ldr	r0, [fp, #-8]
  1377e4:	ebffff2e 	bl	1374a4 <GPIO_WritePinOutput>
    rt_thread_mdelay(1);
  1377e8:	e3a00001 	mov	r0, #1
  1377ec:	ebff29a2 	bl	101e7c <rt_thread_mdelay>
    GPIO_WritePinOutput(gpio_base,pin,1);
  1377f0:	e3a02001 	mov	r2, #1
  1377f4:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1377f8:	e51b0008 	ldr	r0, [fp, #-8]
  1377fc:	ebffff28 	bl	1374a4 <GPIO_WritePinOutput>

    return kStatus_Success;
  137800:	e3a03000 	mov	r3, #0

}
  137804:	e1a00003 	mov	r0, r3
  137808:	e24bd004 	sub	sp, fp, #4
  13780c:	e8bd8800 	pop	{fp, pc}

00137810 <PHY_StartNegotiation>:

status_t PHY_StartNegotiation(ENET_Type *base, uint32_t phyAddr)
{
  137810:	e92d4800 	push	{fp, lr}
  137814:	e28db004 	add	fp, sp, #4
  137818:	e24dd018 	sub	sp, sp, #24
  13781c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  137820:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    uint32_t counter = PHY_TIMEOUT_COUNT;
  137824:	e3e034fb 	mvn	r3, #-83886080	; 0xfb000000
  137828:	e50b3008 	str	r3, [fp, #-8]
    status_t result = kStatus_Success;
  13782c:	e3a03000 	mov	r3, #0
  137830:	e50b3010 	str	r3, [fp, #-16]
    uint32_t bssReg;
    uint32_t timeDelay;

    result = PHY_Write(base, phyAddr, PHY_BASICCONTROL_REG, PHY_BCTL_RESET_MASK);
  137834:	e3a03902 	mov	r3, #32768	; 0x8000
  137838:	e3a02000 	mov	r2, #0
  13783c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  137840:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  137844:	eb000071 	bl	137a10 <PHY_Write>
  137848:	e50b0010 	str	r0, [fp, #-16]
    if (result == kStatus_Success)
  13784c:	e51b3010 	ldr	r3, [fp, #-16]
  137850:	e3530000 	cmp	r3, #0
  137854:	1a000038 	bne	13793c <PHY_StartNegotiation+0x12c>
        {
            return result;
        }
#endif  /* FSL_FEATURE_PHYKSZ8081_USE_RMII50M_MODE */
        /* Set the negotiation. */
        result = PHY_Write(base, phyAddr, PHY_AUTONEG_ADVERTISE_REG,
  137858:	e30031e1 	movw	r3, #481	; 0x1e1
  13785c:	e3a02004 	mov	r2, #4
  137860:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  137864:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  137868:	eb000068 	bl	137a10 <PHY_Write>
  13786c:	e50b0010 	str	r0, [fp, #-16]
                           (PHY_100BASETX_FULLDUPLEX_MASK | PHY_100BASETX_HALFDUPLEX_MASK |
                            PHY_10BASETX_FULLDUPLEX_MASK | PHY_10BASETX_HALFDUPLEX_MASK | 0x1U));
        if (result == kStatus_Success)
  137870:	e51b3010 	ldr	r3, [fp, #-16]
  137874:	e3530000 	cmp	r3, #0
  137878:	1a00002f 	bne	13793c <PHY_StartNegotiation+0x12c>
        {
            result = PHY_Write(base, phyAddr, PHY_BASICCONTROL_REG,
  13787c:	e3a03c12 	mov	r3, #4608	; 0x1200
  137880:	e3a02000 	mov	r2, #0
  137884:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  137888:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  13788c:	eb00005f 	bl	137a10 <PHY_Write>
  137890:	e50b0010 	str	r0, [fp, #-16]
                               (PHY_BCTL_AUTONEG_MASK | PHY_BCTL_RESTART_AUTONEG_MASK));
            if (result == kStatus_Success)
  137894:	e51b3010 	ldr	r3, [fp, #-16]
  137898:	e3530000 	cmp	r3, #0
  13789c:	1a000026 	bne	13793c <PHY_StartNegotiation+0x12c>
            {
                /* Check auto negotiation complete. */
                while (counter --)
  1378a0:	ea000020 	b	137928 <PHY_StartNegotiation+0x118>
                {
                    result = PHY_Read(base, phyAddr, PHY_BASICSTATUS_REG, &bssReg);
  1378a4:	e24b3014 	sub	r3, fp, #20
  1378a8:	e3a02001 	mov	r2, #1
  1378ac:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1378b0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1378b4:	eb000083 	bl	137ac8 <PHY_Read>
  1378b8:	e50b0010 	str	r0, [fp, #-16]
                    if ( result == kStatus_Success)
  1378bc:	e51b3010 	ldr	r3, [fp, #-16]
  1378c0:	e3530000 	cmp	r3, #0
  1378c4:	1a000010 	bne	13790c <PHY_StartNegotiation+0xfc>
                    {
                        if ((bssReg & PHY_BSTATUS_AUTONEGCOMP_MASK) != 0)
  1378c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1378cc:	e2033020 	and	r3, r3, #32
  1378d0:	e3530000 	cmp	r3, #0
  1378d4:	0a00000c 	beq	13790c <PHY_StartNegotiation+0xfc>
                        {
                            /* Wait a moment for Phy status stable. */
                            for (timeDelay = 0; timeDelay < PHY_TIMEOUT_COUNT; timeDelay ++)
  1378d8:	e3a03000 	mov	r3, #0
  1378dc:	e50b300c 	str	r3, [fp, #-12]
  1378e0:	ea000003 	b	1378f4 <PHY_StartNegotiation+0xe4>
                            {
                                __ASM("nop");
  1378e4:	e320f000 	nop	{0}
                            for (timeDelay = 0; timeDelay < PHY_TIMEOUT_COUNT; timeDelay ++)
  1378e8:	e51b300c 	ldr	r3, [fp, #-12]
  1378ec:	e2833001 	add	r3, r3, #1
  1378f0:	e50b300c 	str	r3, [fp, #-12]
  1378f4:	e51b200c 	ldr	r2, [fp, #-12]
  1378f8:	e30f3ffe 	movw	r3, #65534	; 0xfffe
  1378fc:	e34034ff 	movt	r3, #1279	; 0x4ff
  137900:	e1520003 	cmp	r2, r3
  137904:	9afffff6 	bls	1378e4 <PHY_StartNegotiation+0xd4>
                            }
                            break;
  137908:	ea00000b 	b	13793c <PHY_StartNegotiation+0x12c>
                        }
                    }
                    rt_thread_mdelay(PHY_NEGOTIATION_DELAY);
  13790c:	e3a00064 	mov	r0, #100	; 0x64
  137910:	ebff2959 	bl	101e7c <rt_thread_mdelay>
                    if (!counter)
  137914:	e51b3008 	ldr	r3, [fp, #-8]
  137918:	e3530000 	cmp	r3, #0
  13791c:	1a000001 	bne	137928 <PHY_StartNegotiation+0x118>
                    {
                        return kStatus_PHY_AutoNegotiateFail;
  137920:	e3013006 	movw	r3, #4102	; 0x1006
  137924:	ea000005 	b	137940 <PHY_StartNegotiation+0x130>
                while (counter --)
  137928:	e51b3008 	ldr	r3, [fp, #-8]
  13792c:	e2432001 	sub	r2, r3, #1
  137930:	e50b2008 	str	r2, [fp, #-8]
  137934:	e3530000 	cmp	r3, #0
  137938:	1affffd9 	bne	1378a4 <PHY_StartNegotiation+0x94>
                    }
                }
            }
        }
    }
    return kStatus_Success;
  13793c:	e3a03000 	mov	r3, #0
}
  137940:	e1a00003 	mov	r0, r3
  137944:	e24bd004 	sub	sp, fp, #4
  137948:	e8bd8800 	pop	{fp, pc}

0013794c <PHY_Init>:

status_t PHY_Init(ENET_Type *base, uint32_t phyAddr, uint32_t srcClock_Hz,uint32_t phy_id)
{
  13794c:	e92d4800 	push	{fp, lr}
  137950:	e28db004 	add	fp, sp, #4
  137954:	e24dd020 	sub	sp, sp, #32
  137958:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  13795c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  137960:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  137964:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    uint32_t counter = PHY_TIMEOUT_COUNT;
  137968:	e3e034fb 	mvn	r3, #-83886080	; 0xfb000000
  13796c:	e50b3008 	str	r3, [fp, #-8]
    uint32_t idReg = 0;
  137970:	e3a03000 	mov	r3, #0
  137974:	e50b3010 	str	r3, [fp, #-16]
    status_t result = kStatus_Success;
  137978:	e3a03000 	mov	r3, #0
  13797c:	e50b300c 	str	r3, [fp, #-12]

    ENET_SetSMI(base, srcClock_Hz, false);
  137980:	e3a02000 	mov	r2, #0
  137984:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  137988:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  13798c:	ebfffb2e 	bl	13664c <ENET_SetSMI>
    PHY_Read(base, phyAddr, PHY_ID1_REG, &idReg);
  137990:	e24b3010 	sub	r3, fp, #16
  137994:	e3a02002 	mov	r2, #2
  137998:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  13799c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1379a0:	eb000048 	bl	137ac8 <PHY_Read>
    while ((idReg != phy_id) && (counter != 0))
  1379a4:	ea000007 	b	1379c8 <PHY_Init+0x7c>
    {
        PHY_Read(base, phyAddr, PHY_ID1_REG, &idReg);
  1379a8:	e24b3010 	sub	r3, fp, #16
  1379ac:	e3a02002 	mov	r2, #2
  1379b0:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1379b4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1379b8:	eb000042 	bl	137ac8 <PHY_Read>
        counter --;
  1379bc:	e51b3008 	ldr	r3, [fp, #-8]
  1379c0:	e2433001 	sub	r3, r3, #1
  1379c4:	e50b3008 	str	r3, [fp, #-8]
    while ((idReg != phy_id) && (counter != 0))
  1379c8:	e51b3010 	ldr	r3, [fp, #-16]
  1379cc:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  1379d0:	e1520003 	cmp	r2, r3
  1379d4:	0a000002 	beq	1379e4 <PHY_Init+0x98>
  1379d8:	e51b3008 	ldr	r3, [fp, #-8]
  1379dc:	e3530000 	cmp	r3, #0
  1379e0:	1afffff0 	bne	1379a8 <PHY_Init+0x5c>
    }
    if (!counter)
  1379e4:	e51b3008 	ldr	r3, [fp, #-8]
  1379e8:	e3530000 	cmp	r3, #0
  1379ec:	1a000001 	bne	1379f8 <PHY_Init+0xac>
    {
        return kStatus_Fail;
  1379f0:	e3a03001 	mov	r3, #1
  1379f4:	ea000002 	b	137a04 <PHY_Init+0xb8>
    }
    /* Reset PHY. */
    counter = PHY_TIMEOUT_COUNT;
  1379f8:	e3e034fb 	mvn	r3, #-83886080	; 0xfb000000
  1379fc:	e50b3008 	str	r3, [fp, #-8]
    return result;
  137a00:	e51b300c 	ldr	r3, [fp, #-12]
}
  137a04:	e1a00003 	mov	r0, r3
  137a08:	e24bd004 	sub	sp, fp, #4
  137a0c:	e8bd8800 	pop	{fp, pc}

00137a10 <PHY_Write>:

status_t PHY_Write(ENET_Type *base, uint32_t phyAddr, uint32_t phyReg, uint32_t data)
{
  137a10:	e92d4800 	push	{fp, lr}
  137a14:	e28db004 	add	fp, sp, #4
  137a18:	e24dd020 	sub	sp, sp, #32
  137a1c:	e50b0010 	str	r0, [fp, #-16]
  137a20:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  137a24:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  137a28:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    uint32_t counter;

    /* Clear the SMI interrupt event. */
    ENET_ClearInterruptStatus(base, ENET_EIR_MII_MASK);
  137a2c:	e3a01502 	mov	r1, #8388608	; 0x800000
  137a30:	e51b0010 	ldr	r0, [fp, #-16]
  137a34:	ebffff44 	bl	13774c <ENET_ClearInterruptStatus>

    /* Starts a SMI write command. */
    ENET_StartSMIWrite(base, phyAddr, phyReg, kENET_MiiWriteValidFrame, data);
  137a38:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  137a3c:	e58d3000 	str	r3, [sp]
  137a40:	e3a03001 	mov	r3, #1
  137a44:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  137a48:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  137a4c:	e51b0010 	ldr	r0, [fp, #-16]
  137a50:	ebfffb3c 	bl	136748 <ENET_StartSMIWrite>

    /* Wait for SMI complete. */
    for (counter = PHY_TIMEOUT_COUNT; counter > 0; counter--)
  137a54:	e3e034fb 	mvn	r3, #-83886080	; 0xfb000000
  137a58:	e50b3008 	str	r3, [fp, #-8]
  137a5c:	ea000008 	b	137a84 <PHY_Write+0x74>
    {
        if (ENET_GetInterruptStatus(base) & ENET_EIR_MII_MASK)
  137a60:	e51b0010 	ldr	r0, [fp, #-16]
  137a64:	ebffff2e 	bl	137724 <ENET_GetInterruptStatus>
  137a68:	e1a03000 	mov	r3, r0
  137a6c:	e2033502 	and	r3, r3, #8388608	; 0x800000
  137a70:	e3530000 	cmp	r3, #0
  137a74:	1a000006 	bne	137a94 <PHY_Write+0x84>
    for (counter = PHY_TIMEOUT_COUNT; counter > 0; counter--)
  137a78:	e51b3008 	ldr	r3, [fp, #-8]
  137a7c:	e2433001 	sub	r3, r3, #1
  137a80:	e50b3008 	str	r3, [fp, #-8]
  137a84:	e51b3008 	ldr	r3, [fp, #-8]
  137a88:	e3530000 	cmp	r3, #0
  137a8c:	1afffff3 	bne	137a60 <PHY_Write+0x50>
  137a90:	ea000000 	b	137a98 <PHY_Write+0x88>
        {
            break;
  137a94:	e320f000 	nop	{0}
        }
    }

    /* Check for timeout. */
    if (!counter)
  137a98:	e51b3008 	ldr	r3, [fp, #-8]
  137a9c:	e3530000 	cmp	r3, #0
  137aa0:	1a000001 	bne	137aac <PHY_Write+0x9c>
    {
        return kStatus_PHY_SMIVisitTimeout;
  137aa4:	e3013005 	movw	r3, #4101	; 0x1005
  137aa8:	ea000003 	b	137abc <PHY_Write+0xac>
    }

    /* Clear MII interrupt event. */
    ENET_ClearInterruptStatus(base, ENET_EIR_MII_MASK);
  137aac:	e3a01502 	mov	r1, #8388608	; 0x800000
  137ab0:	e51b0010 	ldr	r0, [fp, #-16]
  137ab4:	ebffff24 	bl	13774c <ENET_ClearInterruptStatus>

    return kStatus_Success;
  137ab8:	e3a03000 	mov	r3, #0
}
  137abc:	e1a00003 	mov	r0, r3
  137ac0:	e24bd004 	sub	sp, fp, #4
  137ac4:	e8bd8800 	pop	{fp, pc}

00137ac8 <PHY_Read>:

status_t PHY_Read(ENET_Type *base, uint32_t phyAddr, uint32_t phyReg, uint32_t *dataPtr)
{
  137ac8:	e92d4800 	push	{fp, lr}
  137acc:	e28db004 	add	fp, sp, #4
  137ad0:	e24dd018 	sub	sp, sp, #24
  137ad4:	e50b0010 	str	r0, [fp, #-16]
  137ad8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  137adc:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  137ae0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(dataPtr);
  137ae4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  137ae8:	e3530000 	cmp	r3, #0
  137aec:	1a000005 	bne	137b08 <PHY_Read+0x40>
  137af0:	e3a020cf 	mov	r2, #207	; 0xcf
  137af4:	e3091920 	movw	r1, #39200	; 0x9920
  137af8:	e3401014 	movt	r1, #20
  137afc:	e3090908 	movw	r0, #39176	; 0x9908
  137b00:	e3400014 	movt	r0, #20
  137b04:	ebff2ea3 	bl	103598 <rt_assert_handler>

    uint32_t counter;

    /* Clear the MII interrupt event. */
    ENET_ClearInterruptStatus(base, ENET_EIR_MII_MASK);
  137b08:	e3a01502 	mov	r1, #8388608	; 0x800000
  137b0c:	e51b0010 	ldr	r0, [fp, #-16]
  137b10:	ebffff0d 	bl	13774c <ENET_ClearInterruptStatus>

    /* Starts a SMI read command operation. */
    ENET_StartSMIRead(base, phyAddr, phyReg, kENET_MiiReadValidFrame);
  137b14:	e3a03002 	mov	r3, #2
  137b18:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  137b1c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  137b20:	e51b0010 	ldr	r0, [fp, #-16]
  137b24:	ebfffb28 	bl	1367cc <ENET_StartSMIRead>

    /* Wait for MII complete. */
    for (counter = PHY_TIMEOUT_COUNT; counter > 0; counter--)
  137b28:	e3e034fb 	mvn	r3, #-83886080	; 0xfb000000
  137b2c:	e50b3008 	str	r3, [fp, #-8]
  137b30:	ea000008 	b	137b58 <PHY_Read+0x90>
    {
        if (ENET_GetInterruptStatus(base) & ENET_EIR_MII_MASK)
  137b34:	e51b0010 	ldr	r0, [fp, #-16]
  137b38:	ebfffef9 	bl	137724 <ENET_GetInterruptStatus>
  137b3c:	e1a03000 	mov	r3, r0
  137b40:	e2033502 	and	r3, r3, #8388608	; 0x800000
  137b44:	e3530000 	cmp	r3, #0
  137b48:	1a000006 	bne	137b68 <PHY_Read+0xa0>
    for (counter = PHY_TIMEOUT_COUNT; counter > 0; counter--)
  137b4c:	e51b3008 	ldr	r3, [fp, #-8]
  137b50:	e2433001 	sub	r3, r3, #1
  137b54:	e50b3008 	str	r3, [fp, #-8]
  137b58:	e51b3008 	ldr	r3, [fp, #-8]
  137b5c:	e3530000 	cmp	r3, #0
  137b60:	1afffff3 	bne	137b34 <PHY_Read+0x6c>
  137b64:	ea000000 	b	137b6c <PHY_Read+0xa4>
        {
            break;
  137b68:	e320f000 	nop	{0}
        }
    }

    /* Check for timeout. */
    if (!counter)
  137b6c:	e51b3008 	ldr	r3, [fp, #-8]
  137b70:	e3530000 	cmp	r3, #0
  137b74:	1a000001 	bne	137b80 <PHY_Read+0xb8>
    {
        return kStatus_PHY_SMIVisitTimeout;
  137b78:	e3013005 	movw	r3, #4101	; 0x1005
  137b7c:	ea000008 	b	137ba4 <PHY_Read+0xdc>
    }

    /* Get data from MII register. */
    *dataPtr = ENET_ReadSMIData(base);
  137b80:	e51b0010 	ldr	r0, [fp, #-16]
  137b84:	ebfffedb 	bl	1376f8 <ENET_ReadSMIData>
  137b88:	e1a02000 	mov	r2, r0
  137b8c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  137b90:	e5832000 	str	r2, [r3]

    /* Clear MII interrupt event. */
    ENET_ClearInterruptStatus(base, ENET_EIR_MII_MASK);
  137b94:	e3a01502 	mov	r1, #8388608	; 0x800000
  137b98:	e51b0010 	ldr	r0, [fp, #-16]
  137b9c:	ebfffeea 	bl	13774c <ENET_ClearInterruptStatus>

    return kStatus_Success;
  137ba0:	e3a03000 	mov	r3, #0
}
  137ba4:	e1a00003 	mov	r0, r3
  137ba8:	e24bd004 	sub	sp, fp, #4
  137bac:	e8bd8800 	pop	{fp, pc}

00137bb0 <PHY_EnableLoopback>:

status_t PHY_EnableLoopback(ENET_Type *base, uint32_t phyAddr, phy_loop_t mode, bool enable)
{
  137bb0:	e92d4800 	push	{fp, lr}
  137bb4:	e28db004 	add	fp, sp, #4
  137bb8:	e24dd018 	sub	sp, sp, #24
  137bbc:	e50b0010 	str	r0, [fp, #-16]
  137bc0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  137bc4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  137bc8:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
    status_t result;
    uint32_t data = 0;
  137bcc:	e3a03000 	mov	r3, #0
  137bd0:	e50b300c 	str	r3, [fp, #-12]

    /* Set the loop mode. */
    if (enable)
  137bd4:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
  137bd8:	e3530000 	cmp	r3, #0
  137bdc:	0a000024 	beq	137c74 <PHY_EnableLoopback+0xc4>
    {
        if (mode == kPHY_LocalLoop)
  137be0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137be4:	e3530000 	cmp	r3, #0
  137be8:	1a000010 	bne	137c30 <PHY_EnableLoopback+0x80>
        {
            /* First read the current status in control register. */
            result = PHY_Read(base, phyAddr, PHY_BASICCONTROL_REG, &data);
  137bec:	e24b300c 	sub	r3, fp, #12
  137bf0:	e3a02000 	mov	r2, #0
  137bf4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  137bf8:	e51b0010 	ldr	r0, [fp, #-16]
  137bfc:	ebffffb1 	bl	137ac8 <PHY_Read>
  137c00:	e50b0008 	str	r0, [fp, #-8]
            if (result == kStatus_Success)
  137c04:	e51b3008 	ldr	r3, [fp, #-8]
  137c08:	e3530000 	cmp	r3, #0
  137c0c:	1a00003d 	bne	137d08 <PHY_EnableLoopback+0x158>
            {
                return PHY_Write(base, phyAddr, PHY_BASICCONTROL_REG, (data | PHY_BCTL_LOOP_MASK));
  137c10:	e51b300c 	ldr	r3, [fp, #-12]
  137c14:	e3833901 	orr	r3, r3, #16384	; 0x4000
  137c18:	e3a02000 	mov	r2, #0
  137c1c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  137c20:	e51b0010 	ldr	r0, [fp, #-16]
  137c24:	ebffff79 	bl	137a10 <PHY_Write>
  137c28:	e1a03000 	mov	r3, r0
  137c2c:	ea000036 	b	137d0c <PHY_EnableLoopback+0x15c>
            }
        }
        else
        {
            /* First read the current status in control register. */
            result = PHY_Read(base, phyAddr, PHY_CONTROL2_REG, &data);
  137c30:	e24b300c 	sub	r3, fp, #12
  137c34:	e3a0201f 	mov	r2, #31
  137c38:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  137c3c:	e51b0010 	ldr	r0, [fp, #-16]
  137c40:	ebffffa0 	bl	137ac8 <PHY_Read>
  137c44:	e50b0008 	str	r0, [fp, #-8]
            if (result == kStatus_Success)
  137c48:	e51b3008 	ldr	r3, [fp, #-8]
  137c4c:	e3530000 	cmp	r3, #0
  137c50:	1a00002c 	bne	137d08 <PHY_EnableLoopback+0x158>
            {
                return PHY_Write(base, phyAddr, PHY_CONTROL2_REG, (data | PHY_CTL2_REMOTELOOP_MASK));
  137c54:	e51b300c 	ldr	r3, [fp, #-12]
  137c58:	e3833004 	orr	r3, r3, #4
  137c5c:	e3a0201f 	mov	r2, #31
  137c60:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  137c64:	e51b0010 	ldr	r0, [fp, #-16]
  137c68:	ebffff68 	bl	137a10 <PHY_Write>
  137c6c:	e1a03000 	mov	r3, r0
  137c70:	ea000025 	b	137d0c <PHY_EnableLoopback+0x15c>
        }
    }
    else
    {
        /* Disable the loop mode. */
        if (mode == kPHY_LocalLoop)
  137c74:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137c78:	e3530000 	cmp	r3, #0
  137c7c:	1a000010 	bne	137cc4 <PHY_EnableLoopback+0x114>
        {
            /* First read the current status in the basic control register. */
            result = PHY_Read(base, phyAddr, PHY_BASICCONTROL_REG, &data);
  137c80:	e24b300c 	sub	r3, fp, #12
  137c84:	e3a02000 	mov	r2, #0
  137c88:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  137c8c:	e51b0010 	ldr	r0, [fp, #-16]
  137c90:	ebffff8c 	bl	137ac8 <PHY_Read>
  137c94:	e50b0008 	str	r0, [fp, #-8]
            if (result == kStatus_Success)
  137c98:	e51b3008 	ldr	r3, [fp, #-8]
  137c9c:	e3530000 	cmp	r3, #0
  137ca0:	1a000018 	bne	137d08 <PHY_EnableLoopback+0x158>
            {
                return PHY_Write(base, phyAddr, PHY_BASICCONTROL_REG, (data & ~PHY_BCTL_LOOP_MASK));
  137ca4:	e51b300c 	ldr	r3, [fp, #-12]
  137ca8:	e3c33901 	bic	r3, r3, #16384	; 0x4000
  137cac:	e3a02000 	mov	r2, #0
  137cb0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  137cb4:	e51b0010 	ldr	r0, [fp, #-16]
  137cb8:	ebffff54 	bl	137a10 <PHY_Write>
  137cbc:	e1a03000 	mov	r3, r0
  137cc0:	ea000011 	b	137d0c <PHY_EnableLoopback+0x15c>
            }
        }
        else
        {
            /* First read the current status in control one register. */
            result = PHY_Read(base, phyAddr, PHY_CONTROL2_REG, &data);
  137cc4:	e24b300c 	sub	r3, fp, #12
  137cc8:	e3a0201f 	mov	r2, #31
  137ccc:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  137cd0:	e51b0010 	ldr	r0, [fp, #-16]
  137cd4:	ebffff7b 	bl	137ac8 <PHY_Read>
  137cd8:	e50b0008 	str	r0, [fp, #-8]
            if (result == kStatus_Success)
  137cdc:	e51b3008 	ldr	r3, [fp, #-8]
  137ce0:	e3530000 	cmp	r3, #0
  137ce4:	1a000007 	bne	137d08 <PHY_EnableLoopback+0x158>
            {
                return PHY_Write(base, phyAddr, PHY_CONTROL2_REG, (data & ~PHY_CTL2_REMOTELOOP_MASK));
  137ce8:	e51b300c 	ldr	r3, [fp, #-12]
  137cec:	e3c33004 	bic	r3, r3, #4
  137cf0:	e3a0201f 	mov	r2, #31
  137cf4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  137cf8:	e51b0010 	ldr	r0, [fp, #-16]
  137cfc:	ebffff43 	bl	137a10 <PHY_Write>
  137d00:	e1a03000 	mov	r3, r0
  137d04:	ea000000 	b	137d0c <PHY_EnableLoopback+0x15c>
            }
        }
    }
    return result;
  137d08:	e51b3008 	ldr	r3, [fp, #-8]
}
  137d0c:	e1a00003 	mov	r0, r3
  137d10:	e24bd004 	sub	sp, fp, #4
  137d14:	e8bd8800 	pop	{fp, pc}

00137d18 <PHY_GetLinkStatus>:

status_t PHY_GetLinkStatus(ENET_Type *base, uint32_t phyAddr, bool *status)
{
  137d18:	e92d4800 	push	{fp, lr}
  137d1c:	e28db004 	add	fp, sp, #4
  137d20:	e24dd018 	sub	sp, sp, #24
  137d24:	e50b0010 	str	r0, [fp, #-16]
  137d28:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  137d2c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    RT_ASSERT(status);
  137d30:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137d34:	e3530000 	cmp	r3, #0
  137d38:	1a000005 	bne	137d54 <PHY_GetLinkStatus+0x3c>
  137d3c:	e3002127 	movw	r2, #295	; 0x127
  137d40:	e309192c 	movw	r1, #39212	; 0x992c
  137d44:	e3401014 	movt	r1, #20
  137d48:	e3090910 	movw	r0, #39184	; 0x9910
  137d4c:	e3400014 	movt	r0, #20
  137d50:	ebff2e10 	bl	103598 <rt_assert_handler>

    status_t result = kStatus_Success;
  137d54:	e3a03000 	mov	r3, #0
  137d58:	e50b3008 	str	r3, [fp, #-8]
    uint32_t data;

    /* Read the basic status register. */
    result = PHY_Read(base, phyAddr, PHY_BASICSTATUS_REG, &data);
  137d5c:	e24b300c 	sub	r3, fp, #12
  137d60:	e3a02001 	mov	r2, #1
  137d64:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  137d68:	e51b0010 	ldr	r0, [fp, #-16]
  137d6c:	ebffff55 	bl	137ac8 <PHY_Read>
  137d70:	e50b0008 	str	r0, [fp, #-8]
    if (result == kStatus_Success)
  137d74:	e51b3008 	ldr	r3, [fp, #-8]
  137d78:	e3530000 	cmp	r3, #0
  137d7c:	1a00000a 	bne	137dac <PHY_GetLinkStatus+0x94>
    {
        if (!(PHY_BSTATUS_LINKSTATUS_MASK & data))
  137d80:	e51b300c 	ldr	r3, [fp, #-12]
  137d84:	e2033004 	and	r3, r3, #4
  137d88:	e3530000 	cmp	r3, #0
  137d8c:	1a000003 	bne	137da0 <PHY_GetLinkStatus+0x88>
        {
            /* link down. */
            *status = false;
  137d90:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137d94:	e3a02000 	mov	r2, #0
  137d98:	e5c32000 	strb	r2, [r3]
  137d9c:	ea000002 	b	137dac <PHY_GetLinkStatus+0x94>
        }
        else
        {
            /* link up. */
            *status = true;
  137da0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137da4:	e3a02001 	mov	r2, #1
  137da8:	e5c32000 	strb	r2, [r3]
        }
    }
    return result;
  137dac:	e51b3008 	ldr	r3, [fp, #-8]
}
  137db0:	e1a00003 	mov	r0, r3
  137db4:	e24bd004 	sub	sp, fp, #4
  137db8:	e8bd8800 	pop	{fp, pc}

00137dbc <PHY_GetLinkSpeedDuplex>:

status_t PHY_GetLinkSpeedDuplex(ENET_Type *base, uint32_t phyAddr, phy_speed_t *speed, phy_duplex_t *duplex)
{
  137dbc:	e92d4800 	push	{fp, lr}
  137dc0:	e28db004 	add	fp, sp, #4
  137dc4:	e24dd020 	sub	sp, sp, #32
  137dc8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  137dcc:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  137dd0:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  137dd4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    RT_ASSERT(duplex);
  137dd8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  137ddc:	e3530000 	cmp	r3, #0
  137de0:	1a000005 	bne	137dfc <PHY_GetLinkSpeedDuplex+0x40>
  137de4:	e3a02d05 	mov	r2, #320	; 0x140
  137de8:	e3091940 	movw	r1, #39232	; 0x9940
  137dec:	e3401014 	movt	r1, #20
  137df0:	e3090918 	movw	r0, #39192	; 0x9918
  137df4:	e3400014 	movt	r0, #20
  137df8:	ebff2de6 	bl	103598 <rt_assert_handler>

    status_t result = kStatus_Success;
  137dfc:	e3a03000 	mov	r3, #0
  137e00:	e50b3008 	str	r3, [fp, #-8]
    uint32_t data, ctlReg;

    /* Read the control two register. */

    result = PHY_Read(base, phyAddr, 31, &ctlReg);
  137e04:	e24b3010 	sub	r3, fp, #16
  137e08:	e3a0201f 	mov	r2, #31
  137e0c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  137e10:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  137e14:	ebffff2b 	bl	137ac8 <PHY_Read>
  137e18:	e50b0008 	str	r0, [fp, #-8]

    data = ((ctlReg>>2) & 0x7);
  137e1c:	e51b3010 	ldr	r3, [fp, #-16]
  137e20:	e1a03123 	lsr	r3, r3, #2
  137e24:	e2033007 	and	r3, r3, #7
  137e28:	e50b300c 	str	r3, [fp, #-12]
    switch (data)
  137e2c:	e51b300c 	ldr	r3, [fp, #-12]
  137e30:	e2433001 	sub	r3, r3, #1
  137e34:	e3530005 	cmp	r3, #5
  137e38:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  137e3c:	ea000021 	b	137ec8 <PHY_GetLinkSpeedDuplex+0x10c>
  137e40:	00137e58 	.word	0x00137e58
  137e44:	00137e90 	.word	0x00137e90
  137e48:	00137ec8 	.word	0x00137ec8
  137e4c:	00137ec8 	.word	0x00137ec8
  137e50:	00137e74 	.word	0x00137e74
  137e54:	00137eac 	.word	0x00137eac
    {
        case 1:
            *speed = kPHY_Speed10M;
  137e58:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  137e5c:	e3a02000 	mov	r2, #0
  137e60:	e5832000 	str	r2, [r3]
            *duplex = kPHY_HalfDuplex;
  137e64:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  137e68:	e3a02000 	mov	r2, #0
  137e6c:	e5832000 	str	r2, [r3]
            break;
  137e70:	ea00001a 	b	137ee0 <PHY_GetLinkSpeedDuplex+0x124>
        case 5:
            *speed = kPHY_Speed10M;
  137e74:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  137e78:	e3a02000 	mov	r2, #0
  137e7c:	e5832000 	str	r2, [r3]
            *duplex = kPHY_FullDuplex;
  137e80:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  137e84:	e3a02001 	mov	r2, #1
  137e88:	e5832000 	str	r2, [r3]
            break;
  137e8c:	ea000013 	b	137ee0 <PHY_GetLinkSpeedDuplex+0x124>
        case 2:
            *speed = kPHY_Speed100M;
  137e90:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  137e94:	e3a02001 	mov	r2, #1
  137e98:	e5832000 	str	r2, [r3]
            *duplex = kPHY_HalfDuplex;
  137e9c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  137ea0:	e3a02000 	mov	r2, #0
  137ea4:	e5832000 	str	r2, [r3]
            break;
  137ea8:	ea00000c 	b	137ee0 <PHY_GetLinkSpeedDuplex+0x124>
        case 6:
            *speed = kPHY_Speed100M;
  137eac:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  137eb0:	e3a02001 	mov	r2, #1
  137eb4:	e5832000 	str	r2, [r3]
            *duplex = kPHY_FullDuplex;
  137eb8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  137ebc:	e3a02001 	mov	r2, #1
  137ec0:	e5832000 	str	r2, [r3]
            break;
  137ec4:	ea000005 	b	137ee0 <PHY_GetLinkSpeedDuplex+0x124>
        default:
            *speed = kPHY_Speed100M;
  137ec8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  137ecc:	e3a02001 	mov	r2, #1
  137ed0:	e5832000 	str	r2, [r3]
            *duplex = kPHY_FullDuplex;
  137ed4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  137ed8:	e3a02001 	mov	r2, #1
  137edc:	e5832000 	str	r2, [r3]
    }

    return result;
  137ee0:	e51b3008 	ldr	r3, [fp, #-8]
}
  137ee4:	e1a00003 	mov	r0, r3
  137ee8:	e24bd004 	sub	sp, fp, #4
  137eec:	e8bd8800 	pop	{fp, pc}

00137ef0 <__udivsi3>:
  137ef0:	e2512001 	subs	r2, r1, #1
  137ef4:	012fff1e 	bxeq	lr
  137ef8:	3a000074 	bcc	1380d0 <__udivsi3+0x1e0>
  137efc:	e1500001 	cmp	r0, r1
  137f00:	9a00006b 	bls	1380b4 <__udivsi3+0x1c4>
  137f04:	e1110002 	tst	r1, r2
  137f08:	0a00006c 	beq	1380c0 <__udivsi3+0x1d0>
  137f0c:	e16f3f10 	clz	r3, r0
  137f10:	e16f2f11 	clz	r2, r1
  137f14:	e0423003 	sub	r3, r2, r3
  137f18:	e273301f 	rsbs	r3, r3, #31
  137f1c:	10833083 	addne	r3, r3, r3, lsl #1
  137f20:	e3a02000 	mov	r2, #0
  137f24:	108ff103 	addne	pc, pc, r3, lsl #2
  137f28:	e1a00000 	nop			; (mov r0, r0)
  137f2c:	e1500f81 	cmp	r0, r1, lsl #31
  137f30:	e0a22002 	adc	r2, r2, r2
  137f34:	20400f81 	subcs	r0, r0, r1, lsl #31
  137f38:	e1500f01 	cmp	r0, r1, lsl #30
  137f3c:	e0a22002 	adc	r2, r2, r2
  137f40:	20400f01 	subcs	r0, r0, r1, lsl #30
  137f44:	e1500e81 	cmp	r0, r1, lsl #29
  137f48:	e0a22002 	adc	r2, r2, r2
  137f4c:	20400e81 	subcs	r0, r0, r1, lsl #29
  137f50:	e1500e01 	cmp	r0, r1, lsl #28
  137f54:	e0a22002 	adc	r2, r2, r2
  137f58:	20400e01 	subcs	r0, r0, r1, lsl #28
  137f5c:	e1500d81 	cmp	r0, r1, lsl #27
  137f60:	e0a22002 	adc	r2, r2, r2
  137f64:	20400d81 	subcs	r0, r0, r1, lsl #27
  137f68:	e1500d01 	cmp	r0, r1, lsl #26
  137f6c:	e0a22002 	adc	r2, r2, r2
  137f70:	20400d01 	subcs	r0, r0, r1, lsl #26
  137f74:	e1500c81 	cmp	r0, r1, lsl #25
  137f78:	e0a22002 	adc	r2, r2, r2
  137f7c:	20400c81 	subcs	r0, r0, r1, lsl #25
  137f80:	e1500c01 	cmp	r0, r1, lsl #24
  137f84:	e0a22002 	adc	r2, r2, r2
  137f88:	20400c01 	subcs	r0, r0, r1, lsl #24
  137f8c:	e1500b81 	cmp	r0, r1, lsl #23
  137f90:	e0a22002 	adc	r2, r2, r2
  137f94:	20400b81 	subcs	r0, r0, r1, lsl #23
  137f98:	e1500b01 	cmp	r0, r1, lsl #22
  137f9c:	e0a22002 	adc	r2, r2, r2
  137fa0:	20400b01 	subcs	r0, r0, r1, lsl #22
  137fa4:	e1500a81 	cmp	r0, r1, lsl #21
  137fa8:	e0a22002 	adc	r2, r2, r2
  137fac:	20400a81 	subcs	r0, r0, r1, lsl #21
  137fb0:	e1500a01 	cmp	r0, r1, lsl #20
  137fb4:	e0a22002 	adc	r2, r2, r2
  137fb8:	20400a01 	subcs	r0, r0, r1, lsl #20
  137fbc:	e1500981 	cmp	r0, r1, lsl #19
  137fc0:	e0a22002 	adc	r2, r2, r2
  137fc4:	20400981 	subcs	r0, r0, r1, lsl #19
  137fc8:	e1500901 	cmp	r0, r1, lsl #18
  137fcc:	e0a22002 	adc	r2, r2, r2
  137fd0:	20400901 	subcs	r0, r0, r1, lsl #18
  137fd4:	e1500881 	cmp	r0, r1, lsl #17
  137fd8:	e0a22002 	adc	r2, r2, r2
  137fdc:	20400881 	subcs	r0, r0, r1, lsl #17
  137fe0:	e1500801 	cmp	r0, r1, lsl #16
  137fe4:	e0a22002 	adc	r2, r2, r2
  137fe8:	20400801 	subcs	r0, r0, r1, lsl #16
  137fec:	e1500781 	cmp	r0, r1, lsl #15
  137ff0:	e0a22002 	adc	r2, r2, r2
  137ff4:	20400781 	subcs	r0, r0, r1, lsl #15
  137ff8:	e1500701 	cmp	r0, r1, lsl #14
  137ffc:	e0a22002 	adc	r2, r2, r2
  138000:	20400701 	subcs	r0, r0, r1, lsl #14
  138004:	e1500681 	cmp	r0, r1, lsl #13
  138008:	e0a22002 	adc	r2, r2, r2
  13800c:	20400681 	subcs	r0, r0, r1, lsl #13
  138010:	e1500601 	cmp	r0, r1, lsl #12
  138014:	e0a22002 	adc	r2, r2, r2
  138018:	20400601 	subcs	r0, r0, r1, lsl #12
  13801c:	e1500581 	cmp	r0, r1, lsl #11
  138020:	e0a22002 	adc	r2, r2, r2
  138024:	20400581 	subcs	r0, r0, r1, lsl #11
  138028:	e1500501 	cmp	r0, r1, lsl #10
  13802c:	e0a22002 	adc	r2, r2, r2
  138030:	20400501 	subcs	r0, r0, r1, lsl #10
  138034:	e1500481 	cmp	r0, r1, lsl #9
  138038:	e0a22002 	adc	r2, r2, r2
  13803c:	20400481 	subcs	r0, r0, r1, lsl #9
  138040:	e1500401 	cmp	r0, r1, lsl #8
  138044:	e0a22002 	adc	r2, r2, r2
  138048:	20400401 	subcs	r0, r0, r1, lsl #8
  13804c:	e1500381 	cmp	r0, r1, lsl #7
  138050:	e0a22002 	adc	r2, r2, r2
  138054:	20400381 	subcs	r0, r0, r1, lsl #7
  138058:	e1500301 	cmp	r0, r1, lsl #6
  13805c:	e0a22002 	adc	r2, r2, r2
  138060:	20400301 	subcs	r0, r0, r1, lsl #6
  138064:	e1500281 	cmp	r0, r1, lsl #5
  138068:	e0a22002 	adc	r2, r2, r2
  13806c:	20400281 	subcs	r0, r0, r1, lsl #5
  138070:	e1500201 	cmp	r0, r1, lsl #4
  138074:	e0a22002 	adc	r2, r2, r2
  138078:	20400201 	subcs	r0, r0, r1, lsl #4
  13807c:	e1500181 	cmp	r0, r1, lsl #3
  138080:	e0a22002 	adc	r2, r2, r2
  138084:	20400181 	subcs	r0, r0, r1, lsl #3
  138088:	e1500101 	cmp	r0, r1, lsl #2
  13808c:	e0a22002 	adc	r2, r2, r2
  138090:	20400101 	subcs	r0, r0, r1, lsl #2
  138094:	e1500081 	cmp	r0, r1, lsl #1
  138098:	e0a22002 	adc	r2, r2, r2
  13809c:	20400081 	subcs	r0, r0, r1, lsl #1
  1380a0:	e1500001 	cmp	r0, r1
  1380a4:	e0a22002 	adc	r2, r2, r2
  1380a8:	20400001 	subcs	r0, r0, r1
  1380ac:	e1a00002 	mov	r0, r2
  1380b0:	e12fff1e 	bx	lr
  1380b4:	03a00001 	moveq	r0, #1
  1380b8:	13a00000 	movne	r0, #0
  1380bc:	e12fff1e 	bx	lr
  1380c0:	e16f2f11 	clz	r2, r1
  1380c4:	e262201f 	rsb	r2, r2, #31
  1380c8:	e1a00230 	lsr	r0, r0, r2
  1380cc:	e12fff1e 	bx	lr
  1380d0:	e3500000 	cmp	r0, #0
  1380d4:	13e00000 	mvnne	r0, #0
  1380d8:	ea000097 	b	13833c <__aeabi_idiv0>

001380dc <__aeabi_uidivmod>:
  1380dc:	e3510000 	cmp	r1, #0
  1380e0:	0afffffa 	beq	1380d0 <__udivsi3+0x1e0>
  1380e4:	e92d4003 	push	{r0, r1, lr}
  1380e8:	ebffff80 	bl	137ef0 <__udivsi3>
  1380ec:	e8bd4006 	pop	{r1, r2, lr}
  1380f0:	e0030092 	mul	r3, r2, r0
  1380f4:	e0411003 	sub	r1, r1, r3
  1380f8:	e12fff1e 	bx	lr

001380fc <__divsi3>:
  1380fc:	e3510000 	cmp	r1, #0
  138100:	0a000081 	beq	13830c <.divsi3_skip_div0_test+0x208>

00138104 <.divsi3_skip_div0_test>:
  138104:	e020c001 	eor	ip, r0, r1
  138108:	42611000 	rsbmi	r1, r1, #0
  13810c:	e2512001 	subs	r2, r1, #1
  138110:	0a000070 	beq	1382d8 <.divsi3_skip_div0_test+0x1d4>
  138114:	e1b03000 	movs	r3, r0
  138118:	42603000 	rsbmi	r3, r0, #0
  13811c:	e1530001 	cmp	r3, r1
  138120:	9a00006f 	bls	1382e4 <.divsi3_skip_div0_test+0x1e0>
  138124:	e1110002 	tst	r1, r2
  138128:	0a000071 	beq	1382f4 <.divsi3_skip_div0_test+0x1f0>
  13812c:	e16f2f13 	clz	r2, r3
  138130:	e16f0f11 	clz	r0, r1
  138134:	e0402002 	sub	r2, r0, r2
  138138:	e272201f 	rsbs	r2, r2, #31
  13813c:	10822082 	addne	r2, r2, r2, lsl #1
  138140:	e3a00000 	mov	r0, #0
  138144:	108ff102 	addne	pc, pc, r2, lsl #2
  138148:	e1a00000 	nop			; (mov r0, r0)
  13814c:	e1530f81 	cmp	r3, r1, lsl #31
  138150:	e0a00000 	adc	r0, r0, r0
  138154:	20433f81 	subcs	r3, r3, r1, lsl #31
  138158:	e1530f01 	cmp	r3, r1, lsl #30
  13815c:	e0a00000 	adc	r0, r0, r0
  138160:	20433f01 	subcs	r3, r3, r1, lsl #30
  138164:	e1530e81 	cmp	r3, r1, lsl #29
  138168:	e0a00000 	adc	r0, r0, r0
  13816c:	20433e81 	subcs	r3, r3, r1, lsl #29
  138170:	e1530e01 	cmp	r3, r1, lsl #28
  138174:	e0a00000 	adc	r0, r0, r0
  138178:	20433e01 	subcs	r3, r3, r1, lsl #28
  13817c:	e1530d81 	cmp	r3, r1, lsl #27
  138180:	e0a00000 	adc	r0, r0, r0
  138184:	20433d81 	subcs	r3, r3, r1, lsl #27
  138188:	e1530d01 	cmp	r3, r1, lsl #26
  13818c:	e0a00000 	adc	r0, r0, r0
  138190:	20433d01 	subcs	r3, r3, r1, lsl #26
  138194:	e1530c81 	cmp	r3, r1, lsl #25
  138198:	e0a00000 	adc	r0, r0, r0
  13819c:	20433c81 	subcs	r3, r3, r1, lsl #25
  1381a0:	e1530c01 	cmp	r3, r1, lsl #24
  1381a4:	e0a00000 	adc	r0, r0, r0
  1381a8:	20433c01 	subcs	r3, r3, r1, lsl #24
  1381ac:	e1530b81 	cmp	r3, r1, lsl #23
  1381b0:	e0a00000 	adc	r0, r0, r0
  1381b4:	20433b81 	subcs	r3, r3, r1, lsl #23
  1381b8:	e1530b01 	cmp	r3, r1, lsl #22
  1381bc:	e0a00000 	adc	r0, r0, r0
  1381c0:	20433b01 	subcs	r3, r3, r1, lsl #22
  1381c4:	e1530a81 	cmp	r3, r1, lsl #21
  1381c8:	e0a00000 	adc	r0, r0, r0
  1381cc:	20433a81 	subcs	r3, r3, r1, lsl #21
  1381d0:	e1530a01 	cmp	r3, r1, lsl #20
  1381d4:	e0a00000 	adc	r0, r0, r0
  1381d8:	20433a01 	subcs	r3, r3, r1, lsl #20
  1381dc:	e1530981 	cmp	r3, r1, lsl #19
  1381e0:	e0a00000 	adc	r0, r0, r0
  1381e4:	20433981 	subcs	r3, r3, r1, lsl #19
  1381e8:	e1530901 	cmp	r3, r1, lsl #18
  1381ec:	e0a00000 	adc	r0, r0, r0
  1381f0:	20433901 	subcs	r3, r3, r1, lsl #18
  1381f4:	e1530881 	cmp	r3, r1, lsl #17
  1381f8:	e0a00000 	adc	r0, r0, r0
  1381fc:	20433881 	subcs	r3, r3, r1, lsl #17
  138200:	e1530801 	cmp	r3, r1, lsl #16
  138204:	e0a00000 	adc	r0, r0, r0
  138208:	20433801 	subcs	r3, r3, r1, lsl #16
  13820c:	e1530781 	cmp	r3, r1, lsl #15
  138210:	e0a00000 	adc	r0, r0, r0
  138214:	20433781 	subcs	r3, r3, r1, lsl #15
  138218:	e1530701 	cmp	r3, r1, lsl #14
  13821c:	e0a00000 	adc	r0, r0, r0
  138220:	20433701 	subcs	r3, r3, r1, lsl #14
  138224:	e1530681 	cmp	r3, r1, lsl #13
  138228:	e0a00000 	adc	r0, r0, r0
  13822c:	20433681 	subcs	r3, r3, r1, lsl #13
  138230:	e1530601 	cmp	r3, r1, lsl #12
  138234:	e0a00000 	adc	r0, r0, r0
  138238:	20433601 	subcs	r3, r3, r1, lsl #12
  13823c:	e1530581 	cmp	r3, r1, lsl #11
  138240:	e0a00000 	adc	r0, r0, r0
  138244:	20433581 	subcs	r3, r3, r1, lsl #11
  138248:	e1530501 	cmp	r3, r1, lsl #10
  13824c:	e0a00000 	adc	r0, r0, r0
  138250:	20433501 	subcs	r3, r3, r1, lsl #10
  138254:	e1530481 	cmp	r3, r1, lsl #9
  138258:	e0a00000 	adc	r0, r0, r0
  13825c:	20433481 	subcs	r3, r3, r1, lsl #9
  138260:	e1530401 	cmp	r3, r1, lsl #8
  138264:	e0a00000 	adc	r0, r0, r0
  138268:	20433401 	subcs	r3, r3, r1, lsl #8
  13826c:	e1530381 	cmp	r3, r1, lsl #7
  138270:	e0a00000 	adc	r0, r0, r0
  138274:	20433381 	subcs	r3, r3, r1, lsl #7
  138278:	e1530301 	cmp	r3, r1, lsl #6
  13827c:	e0a00000 	adc	r0, r0, r0
  138280:	20433301 	subcs	r3, r3, r1, lsl #6
  138284:	e1530281 	cmp	r3, r1, lsl #5
  138288:	e0a00000 	adc	r0, r0, r0
  13828c:	20433281 	subcs	r3, r3, r1, lsl #5
  138290:	e1530201 	cmp	r3, r1, lsl #4
  138294:	e0a00000 	adc	r0, r0, r0
  138298:	20433201 	subcs	r3, r3, r1, lsl #4
  13829c:	e1530181 	cmp	r3, r1, lsl #3
  1382a0:	e0a00000 	adc	r0, r0, r0
  1382a4:	20433181 	subcs	r3, r3, r1, lsl #3
  1382a8:	e1530101 	cmp	r3, r1, lsl #2
  1382ac:	e0a00000 	adc	r0, r0, r0
  1382b0:	20433101 	subcs	r3, r3, r1, lsl #2
  1382b4:	e1530081 	cmp	r3, r1, lsl #1
  1382b8:	e0a00000 	adc	r0, r0, r0
  1382bc:	20433081 	subcs	r3, r3, r1, lsl #1
  1382c0:	e1530001 	cmp	r3, r1
  1382c4:	e0a00000 	adc	r0, r0, r0
  1382c8:	20433001 	subcs	r3, r3, r1
  1382cc:	e35c0000 	cmp	ip, #0
  1382d0:	42600000 	rsbmi	r0, r0, #0
  1382d4:	e12fff1e 	bx	lr
  1382d8:	e13c0000 	teq	ip, r0
  1382dc:	42600000 	rsbmi	r0, r0, #0
  1382e0:	e12fff1e 	bx	lr
  1382e4:	33a00000 	movcc	r0, #0
  1382e8:	01a00fcc 	asreq	r0, ip, #31
  1382ec:	03800001 	orreq	r0, r0, #1
  1382f0:	e12fff1e 	bx	lr
  1382f4:	e16f2f11 	clz	r2, r1
  1382f8:	e262201f 	rsb	r2, r2, #31
  1382fc:	e35c0000 	cmp	ip, #0
  138300:	e1a00233 	lsr	r0, r3, r2
  138304:	42600000 	rsbmi	r0, r0, #0
  138308:	e12fff1e 	bx	lr
  13830c:	e3500000 	cmp	r0, #0
  138310:	c3e00102 	mvngt	r0, #-2147483648	; 0x80000000
  138314:	b3a00102 	movlt	r0, #-2147483648	; 0x80000000
  138318:	ea000007 	b	13833c <__aeabi_idiv0>

0013831c <__aeabi_idivmod>:
  13831c:	e3510000 	cmp	r1, #0
  138320:	0afffff9 	beq	13830c <.divsi3_skip_div0_test+0x208>
  138324:	e92d4003 	push	{r0, r1, lr}
  138328:	ebffff75 	bl	138104 <.divsi3_skip_div0_test>
  13832c:	e8bd4006 	pop	{r1, r2, lr}
  138330:	e0030092 	mul	r3, r2, r0
  138334:	e0411003 	sub	r1, r1, r3
  138338:	e12fff1e 	bx	lr

0013833c <__aeabi_idiv0>:
  13833c:	e92d4002 	push	{r1, lr}
  138340:	e3a00008 	mov	r0, #8
  138344:	eb00154f 	bl	13d888 <raise>
  138348:	e8bd8002 	pop	{r1, pc}

0013834c <dummy>:
  13834c:	e12fff1e 	bx	lr

00138350 <dummy1>:
  138350:	e12fff1e 	bx	lr

00138354 <__init_libc>:
  138354:	e92d4030 	push	{r4, r5, lr}
  138358:	e1a04000 	mov	r4, r0
  13835c:	e24dd09c 	sub	sp, sp, #156	; 0x9c
  138360:	e3a02098 	mov	r2, #152	; 0x98
  138364:	e1a05001 	mov	r5, r1
  138368:	e1a0000d 	mov	r0, sp
  13836c:	e3a01000 	mov	r1, #0
  138370:	eb00215d 	bl	1408ec <memset>
  138374:	e5942000 	ldr	r2, [r4]
  138378:	e59f3118 	ldr	r3, [pc, #280]	; 138498 <__init_libc+0x144>
  13837c:	e3520000 	cmp	r2, #0
  138380:	e5834000 	str	r4, [r3]
  138384:	03a02004 	moveq	r2, #4
  138388:	0a000009 	beq	1383b4 <__init_libc+0x60>
  13838c:	e1a03004 	mov	r3, r4
  138390:	e3a02000 	mov	r2, #0
  138394:	ea000000 	b	13839c <__init_libc+0x48>
  138398:	e1a02000 	mov	r2, r0
  13839c:	e5b31004 	ldr	r1, [r3, #4]!
  1383a0:	e2820001 	add	r0, r2, #1
  1383a4:	e3510000 	cmp	r1, #0
  1383a8:	1afffffa 	bne	138398 <__init_libc+0x44>
  1383ac:	e2822002 	add	r2, r2, #2
  1383b0:	e1a02102 	lsl	r2, r2, #2
  1383b4:	e7943002 	ldr	r3, [r4, r2]
  1383b8:	e59f00dc 	ldr	r0, [pc, #220]	; 13849c <__init_libc+0x148>
  1383bc:	e0842002 	add	r2, r4, r2
  1383c0:	e3530000 	cmp	r3, #0
  1383c4:	e5802010 	str	r2, [r0, #16]
  1383c8:	0a00002d 	beq	138484 <__init_libc+0x130>
  1383cc:	e3530025 	cmp	r3, #37	; 0x25
  1383d0:	95921004 	ldrls	r1, [r2, #4]
  1383d4:	928dc098 	addls	ip, sp, #152	; 0x98
  1383d8:	908c3103 	addls	r3, ip, r3, lsl #2
  1383dc:	95031098 	strls	r1, [r3, #-152]	; 0xffffff68
  1383e0:	e5b23008 	ldr	r3, [r2, #8]!
  1383e4:	e3530000 	cmp	r3, #0
  1383e8:	1afffff7 	bne	1383cc <__init_libc+0x78>
  1383ec:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
  1383f0:	e59dc080 	ldr	ip, [sp, #128]	; 0x80
  1383f4:	e59d2018 	ldr	r2, [sp, #24]
  1383f8:	e59f10a0 	ldr	r1, [pc, #160]	; 1384a0 <__init_libc+0x14c>
  1383fc:	e5802024 	str	r2, [r0, #36]	; 0x24
  138400:	e59f209c 	ldr	r2, [pc, #156]	; 1384a4 <__init_libc+0x150>
  138404:	e3550000 	cmp	r5, #0
  138408:	e5813000 	str	r3, [r1]
  13840c:	e582c000 	str	ip, [r2]
  138410:	0a000012 	beq	138460 <__init_libc+0x10c>
  138414:	e59f308c 	ldr	r3, [pc, #140]	; 1384a8 <__init_libc+0x154>
  138418:	e59f208c 	ldr	r2, [pc, #140]	; 1384ac <__init_libc+0x158>
  13841c:	e5835000 	str	r5, [r3]
  138420:	e5825000 	str	r5, [r2]
  138424:	e5d53000 	ldrb	r3, [r5]
  138428:	e3530000 	cmp	r3, #0
  13842c:	0a000005 	beq	138448 <__init_libc+0xf4>
  138430:	e2851001 	add	r1, r5, #1
  138434:	e353002f 	cmp	r3, #47	; 0x2f
  138438:	05821000 	streq	r1, [r2]
  13843c:	e4d13001 	ldrb	r3, [r1], #1
  138440:	e3530000 	cmp	r3, #0
  138444:	1afffffa 	bne	138434 <__init_libc+0xe0>
  138448:	e1a0000d 	mov	r0, sp
  13844c:	eb002848 	bl	142574 <__init_tls>
  138450:	e59d0064 	ldr	r0, [sp, #100]	; 0x64
  138454:	eb0028bd 	bl	142750 <__init_ssp>
  138458:	e28dd09c 	add	sp, sp, #156	; 0x9c
  13845c:	e8bd8030 	pop	{r4, r5, pc}
  138460:	e59d107c 	ldr	r1, [sp, #124]	; 0x7c
  138464:	e3510000 	cmp	r1, #0
  138468:	1a000008 	bne	138490 <__init_libc+0x13c>
  13846c:	e59f303c 	ldr	r3, [pc, #60]	; 1384b0 <__init_libc+0x15c>
  138470:	e59f1030 	ldr	r1, [pc, #48]	; 1384a8 <__init_libc+0x154>
  138474:	e59f2030 	ldr	r2, [pc, #48]	; 1384ac <__init_libc+0x158>
  138478:	e5813000 	str	r3, [r1]
  13847c:	e5823000 	str	r3, [r2]
  138480:	eafffff0 	b	138448 <__init_libc+0xf4>
  138484:	e1a02003 	mov	r2, r3
  138488:	e1a0c003 	mov	ip, r3
  13848c:	eaffffd9 	b	1383f8 <__init_libc+0xa4>
  138490:	e1a05001 	mov	r5, r1
  138494:	eaffffde 	b	138414 <__init_libc+0xc0>
  138498:	0014ec00 	.word	0x0014ec00
  13849c:	00575604 	.word	0x00575604
  1384a0:	00575600 	.word	0x00575600
  1384a4:	00575644 	.word	0x00575644
  1384a8:	0014e390 	.word	0x0014e390
  1384ac:	0014e38c 	.word	0x0014e38c
  1384b0:	0014bbd4 	.word	0x0014bbd4

001384b4 <__libc_start_init>:
  1384b4:	e92d4070 	push	{r4, r5, r6, lr}
  1384b8:	e59f4020 	ldr	r4, [pc, #32]	; 1384e0 <__libc_start_init+0x2c>
  1384bc:	e59f5020 	ldr	r5, [pc, #32]	; 1384e4 <__libc_start_init+0x30>
  1384c0:	eb003147 	bl	1449e4 <_init>
  1384c4:	e1540005 	cmp	r4, r5
  1384c8:	28bd8070 	popcs	{r4, r5, r6, pc}
  1384cc:	e4943004 	ldr	r3, [r4], #4
  1384d0:	e12fff33 	blx	r3
  1384d4:	e1540005 	cmp	r4, r5
  1384d8:	3afffffb 	bcc	1384cc <__libc_start_init+0x18>
  1384dc:	e8bd8070 	pop	{r4, r5, r6, pc}
  1384e0:	0014d3e0 	.word	0x0014d3e0
  1384e4:	0014d3e4 	.word	0x0014d3e4

001384e8 <libc_start_main_stage2>:
  1384e8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  1384ec:	e1a05001 	mov	r5, r1
  1384f0:	e1a06002 	mov	r6, r2
  1384f4:	e2814001 	add	r4, r1, #1
  1384f8:	e0824104 	add	r4, r2, r4, lsl #2
  1384fc:	e1a07000 	mov	r7, r0
  138500:	ebffffeb 	bl	1384b4 <__libc_start_init>
  138504:	e1a02004 	mov	r2, r4
  138508:	e1a01006 	mov	r1, r6
  13850c:	e1a00005 	mov	r0, r5
  138510:	e12fff37 	blx	r7
  138514:	eb000056 	bl	138674 <exit>

00138518 <__libc_start_main>:
  138518:	e92d4070 	push	{r4, r5, r6, lr}
  13851c:	e1a05001 	mov	r5, r1
  138520:	e1a04002 	mov	r4, r2
  138524:	e1a06000 	mov	r6, r0
  138528:	e2810001 	add	r0, r1, #1
  13852c:	e0820100 	add	r0, r2, r0, lsl #2
  138530:	e5921000 	ldr	r1, [r2]
  138534:	ebffff86 	bl	138354 <__init_libc>
  138538:	e59f3010 	ldr	r3, [pc, #16]	; 138550 <__libc_start_main+0x38>
  13853c:	e1a02004 	mov	r2, r4
  138540:	e1a01005 	mov	r1, r5
  138544:	e1a00006 	mov	r0, r6
  138548:	e8bd4070 	pop	{r4, r5, r6, lr}
  13854c:	e12fff13 	bx	r3
  138550:	001384e8 	.word	0x001384e8

00138554 <__errno_location>:
  138554:	e59f3010 	ldr	r3, [pc, #16]	; 13856c <__errno_location+0x18>
  138558:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13855c:	e5930000 	ldr	r0, [r3]
  138560:	e12fff30 	blx	r0
  138564:	e2400058 	sub	r0, r0, #88	; 0x58
  138568:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
  13856c:	0014d3d4 	.word	0x0014d3d4

00138570 <__strerror_l>:
  138570:	e3500054 	cmp	r0, #84	; 0x54
  138574:	0a000013 	beq	1385c8 <__strerror_l+0x58>
  138578:	e3a0c001 	mov	ip, #1
  13857c:	e3a03021 	mov	r3, #33	; 0x21
  138580:	e59f204c 	ldr	r2, [pc, #76]	; 1385d4 <__strerror_l+0x64>
  138584:	e1530000 	cmp	r3, r0
  138588:	0a000003 	beq	13859c <__strerror_l+0x2c>
  13858c:	e4d23001 	ldrb	r3, [r2], #1
  138590:	e28cc001 	add	ip, ip, #1
  138594:	e3530000 	cmp	r3, #0
  138598:	1afffff9 	bne	138584 <__strerror_l+0x14>
  13859c:	e3a02049 	mov	r2, #73	; 0x49
  1385a0:	e59f3030 	ldr	r3, [pc, #48]	; 1385d8 <__strerror_l+0x68>
  1385a4:	e3520000 	cmp	r2, #0
  1385a8:	15f32001 	ldrbne	r2, [r3, #1]!
  1385ac:	1afffffc 	bne	1385a4 <__strerror_l+0x34>
  1385b0:	e25cc001 	subs	ip, ip, #1
  1385b4:	e2830001 	add	r0, r3, #1
  1385b8:	0a000003 	beq	1385cc <__strerror_l+0x5c>
  1385bc:	e5d32001 	ldrb	r2, [r3, #1]
  1385c0:	e1a03000 	mov	r3, r0
  1385c4:	eafffff6 	b	1385a4 <__strerror_l+0x34>
  1385c8:	e59f0008 	ldr	r0, [pc, #8]	; 1385d8 <__strerror_l+0x68>
  1385cc:	e5911014 	ldr	r1, [r1, #20]
  1385d0:	ea000d54 	b	13bb28 <__lctrans>
  1385d4:	0014995a 	.word	0x0014995a
  1385d8:	001499b4 	.word	0x001499b4

001385dc <strerror>:
  1385dc:	e1a03000 	mov	r3, r0
  1385e0:	e59f2018 	ldr	r2, [pc, #24]	; 138600 <strerror+0x24>
  1385e4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  1385e8:	e5920000 	ldr	r0, [r2]
  1385ec:	e12fff30 	blx	r0
  1385f0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  1385f4:	e5101018 	ldr	r1, [r0, #-24]	; 0xffffffe8
  1385f8:	e1a00003 	mov	r0, r3
  1385fc:	eaffffdb 	b	138570 <__strerror_l>
  138600:	0014d3d4 	.word	0x0014d3d4

00138604 <__assert_fail>:
  138604:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  138608:	e24dd00c 	sub	sp, sp, #12
  13860c:	e58d2004 	str	r2, [sp, #4]
  138610:	e58d3000 	str	r3, [sp]
  138614:	e1a02000 	mov	r2, r0
  138618:	e1a03001 	mov	r3, r1
  13861c:	e59f0010 	ldr	r0, [pc, #16]	; 138634 <__assert_fail+0x30>
  138620:	e59f1010 	ldr	r1, [pc, #16]	; 138638 <__assert_fail+0x34>
  138624:	eb001522 	bl	13dab4 <fprintf>
  138628:	e3a00000 	mov	r0, #0
  13862c:	eb0014af 	bl	13d8f0 <fflush>
  138630:	eb00286a 	bl	1427e0 <abort>
  138634:	0014d2a0 	.word	0x0014d2a0
  138638:	0014a0d4 	.word	0x0014a0d4

0013863c <__funcs_on_exit>:
  13863c:	e12fff1e 	bx	lr

00138640 <__libc_exit_fini>:
  138640:	e92d4070 	push	{r4, r5, r6, lr}
  138644:	e59f4020 	ldr	r4, [pc, #32]	; 13866c <__libc_exit_fini+0x2c>
  138648:	e59f5020 	ldr	r5, [pc, #32]	; 138670 <__libc_exit_fini+0x30>
  13864c:	e1540005 	cmp	r4, r5
  138650:	9a000003 	bls	138664 <__libc_exit_fini+0x24>
  138654:	e5343004 	ldr	r3, [r4, #-4]!
  138658:	e12fff33 	blx	r3
  13865c:	e1540005 	cmp	r4, r5
  138660:	8afffffb 	bhi	138654 <__libc_exit_fini+0x14>
  138664:	e8bd4070 	pop	{r4, r5, r6, lr}
  138668:	ea0030e0 	b	1449f0 <_fini>
  13866c:	0014d3e8 	.word	0x0014d3e8
  138670:	0014d3e4 	.word	0x0014d3e4

00138674 <exit>:
  138674:	e92d4010 	push	{r4, lr}
  138678:	e1a04000 	mov	r4, r0
  13867c:	ebffffee 	bl	13863c <__funcs_on_exit>
  138680:	ebffffee 	bl	138640 <__libc_exit_fini>
  138684:	eb002da2 	bl	143d14 <__stdio_exit>
  138688:	e1a00004 	mov	r0, r4
  13868c:	eb002846 	bl	1427ac <_Exit>

00138690 <fcntl>:
  138690:	e92d000e 	push	{r1, r2, r3}
  138694:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  138698:	e24dd020 	sub	sp, sp, #32
  13869c:	e59d4034 	ldr	r4, [sp, #52]	; 0x34
  1386a0:	e59d5038 	ldr	r5, [sp, #56]	; 0x38
  1386a4:	e28d3038 	add	r3, sp, #56	; 0x38
  1386a8:	e3540004 	cmp	r4, #4
  1386ac:	e1a06000 	mov	r6, r0
  1386b0:	e58d3014 	str	r3, [sp, #20]
  1386b4:	03855802 	orreq	r5, r5, #131072	; 0x20000
  1386b8:	0a00000f 	beq	1386fc <fcntl+0x6c>
  1386bc:	e354000e 	cmp	r4, #14
  1386c0:	0a00001a 	beq	138730 <fcntl+0xa0>
  1386c4:	e3540009 	cmp	r4, #9
  1386c8:	0a000026 	beq	138768 <fcntl+0xd8>
  1386cc:	e59f3234 	ldr	r3, [pc, #564]	; 138908 <fcntl+0x278>
  1386d0:	e1540003 	cmp	r4, r3
  1386d4:	0a000034 	beq	1387ac <fcntl+0x11c>
  1386d8:	e244300c 	sub	r3, r4, #12
  1386dc:	e3530004 	cmp	r3, #4
  1386e0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  1386e4:	ea000004 	b	1386fc <fcntl+0x6c>
  1386e8:	001386fc 	.word	0x001386fc
  1386ec:	001386fc 	.word	0x001386fc
  1386f0:	001386fc 	.word	0x001386fc
  1386f4:	001386fc 	.word	0x001386fc
  1386f8:	001386fc 	.word	0x001386fc
  1386fc:	e3a000dd 	mov	r0, #221	; 0xdd
  138700:	eb000cc9 	bl	13ba2c <get_rtt_syscall>
  138704:	e2503000 	subs	r3, r0, #0
  138708:	0a000046 	beq	138828 <fcntl+0x198>
  13870c:	e1a02005 	mov	r2, r5
  138710:	e1a01004 	mov	r1, r4
  138714:	e1a00006 	mov	r0, r6
  138718:	e12fff33 	blx	r3
  13871c:	eb000cf7 	bl	13bb00 <__syscall_ret>
  138720:	e28dd020 	add	sp, sp, #32
  138724:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
  138728:	e28dd00c 	add	sp, sp, #12
  13872c:	e12fff1e 	bx	lr
  138730:	e3a00000 	mov	r0, #0
  138734:	e1a03005 	mov	r3, r5
  138738:	e1a02004 	mov	r2, r4
  13873c:	e1a01006 	mov	r1, r6
  138740:	e58d0008 	str	r0, [sp, #8]
  138744:	e58d0004 	str	r0, [sp, #4]
  138748:	e58d0000 	str	r0, [sp]
  13874c:	e3a000dd 	mov	r0, #221	; 0xdd
  138750:	eb00231c 	bl	1413c8 <__syscall_cp>
  138754:	eb000ce9 	bl	13bb00 <__syscall_ret>
  138758:	e28dd020 	add	sp, sp, #32
  13875c:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
  138760:	e28dd00c 	add	sp, sp, #12
  138764:	e12fff1e 	bx	lr
  138768:	e3a000dd 	mov	r0, #221	; 0xdd
  13876c:	eb000cae 	bl	13ba2c <get_rtt_syscall>
  138770:	e2503000 	subs	r3, r0, #0
  138774:	0a000007 	beq	138798 <fcntl+0x108>
  138778:	e28d2018 	add	r2, sp, #24
  13877c:	e3a01010 	mov	r1, #16
  138780:	e1a00006 	mov	r0, r6
  138784:	e12fff33 	blx	r3
  138788:	e3700016 	cmn	r0, #22
  13878c:	0a000027 	beq	138830 <fcntl+0x1a0>
  138790:	e3500000 	cmp	r0, #0
  138794:	1affffe0 	bne	13871c <fcntl+0x8c>
  138798:	e59d3018 	ldr	r3, [sp, #24]
  13879c:	e59d001c 	ldr	r0, [sp, #28]
  1387a0:	e3530002 	cmp	r3, #2
  1387a4:	02600000 	rsbeq	r0, r0, #0
  1387a8:	eaffffdc 	b	138720 <fcntl+0x90>
  1387ac:	e3a000dd 	mov	r0, #221	; 0xdd
  1387b0:	eb000c9d 	bl	13ba2c <get_rtt_syscall>
  1387b4:	e2503000 	subs	r3, r0, #0
  1387b8:	0a00000f 	beq	1387fc <fcntl+0x16c>
  1387bc:	e1a02005 	mov	r2, r5
  1387c0:	e1a01004 	mov	r1, r4
  1387c4:	e1a00006 	mov	r0, r6
  1387c8:	e12fff33 	blx	r3
  1387cc:	e3700016 	cmn	r0, #22
  1387d0:	e1a07000 	mov	r7, r0
  1387d4:	0a00001e 	beq	138854 <fcntl+0x1c4>
  1387d8:	e3500000 	cmp	r0, #0
  1387dc:	e1a04000 	mov	r4, r0
  1387e0:	aa000007 	bge	138804 <fcntl+0x174>
  1387e4:	e1a00004 	mov	r0, r4
  1387e8:	eb000cc4 	bl	13bb00 <__syscall_ret>
  1387ec:	e28dd020 	add	sp, sp, #32
  1387f0:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
  1387f4:	e28dd00c 	add	sp, sp, #12
  1387f8:	e12fff1e 	bx	lr
  1387fc:	e1a04003 	mov	r4, r3
  138800:	e1a07003 	mov	r7, r3
  138804:	e3a000dd 	mov	r0, #221	; 0xdd
  138808:	eb000c87 	bl	13ba2c <get_rtt_syscall>
  13880c:	e2503000 	subs	r3, r0, #0
  138810:	0afffff3 	beq	1387e4 <fcntl+0x154>
  138814:	e1a00007 	mov	r0, r7
  138818:	e3a02001 	mov	r2, #1
  13881c:	e3a01002 	mov	r1, #2
  138820:	e12fff33 	blx	r3
  138824:	eaffffee 	b	1387e4 <fcntl+0x154>
  138828:	e1a00003 	mov	r0, r3
  13882c:	eaffffba 	b	13871c <fcntl+0x8c>
  138830:	e3a000dd 	mov	r0, #221	; 0xdd
  138834:	eb000c7c 	bl	13ba2c <get_rtt_syscall>
  138838:	e2503000 	subs	r3, r0, #0
  13883c:	0a00002f 	beq	138900 <fcntl+0x270>
  138840:	e1a02005 	mov	r2, r5
  138844:	e1a01004 	mov	r1, r4
  138848:	e1a00006 	mov	r0, r6
  13884c:	e12fff33 	blx	r3
  138850:	eaffffb2 	b	138720 <fcntl+0x90>
  138854:	e3a000dd 	mov	r0, #221	; 0xdd
  138858:	eb000c73 	bl	13ba2c <get_rtt_syscall>
  13885c:	e2503000 	subs	r3, r0, #0
  138860:	0a00000b 	beq	138894 <fcntl+0x204>
  138864:	e1a01004 	mov	r1, r4
  138868:	e3a02000 	mov	r2, #0
  13886c:	e1a00006 	mov	r0, r6
  138870:	e12fff33 	blx	r3
  138874:	e3700016 	cmn	r0, #22
  138878:	e1a04000 	mov	r4, r0
  13887c:	0a00000c 	beq	1388b4 <fcntl+0x224>
  138880:	e3500000 	cmp	r0, #0
  138884:	aa000003 	bge	138898 <fcntl+0x208>
  138888:	e3e00015 	mvn	r0, #21
  13888c:	eb000c9b 	bl	13bb00 <__syscall_ret>
  138890:	eaffffa2 	b	138720 <fcntl+0x90>
  138894:	e1a04003 	mov	r4, r3
  138898:	e3a00006 	mov	r0, #6
  13889c:	eb000c62 	bl	13ba2c <get_rtt_syscall>
  1388a0:	e2503000 	subs	r3, r0, #0
  1388a4:	0afffff7 	beq	138888 <fcntl+0x1f8>
  1388a8:	e1a00004 	mov	r0, r4
  1388ac:	e12fff33 	blx	r3
  1388b0:	eafffff4 	b	138888 <fcntl+0x1f8>
  1388b4:	e3a000dd 	mov	r0, #221	; 0xdd
  1388b8:	eb000c5b 	bl	13ba2c <get_rtt_syscall>
  1388bc:	e2504000 	subs	r4, r0, #0
  1388c0:	0a000005 	beq	1388dc <fcntl+0x24c>
  1388c4:	e1a02005 	mov	r2, r5
  1388c8:	e1a00006 	mov	r0, r6
  1388cc:	e3a01000 	mov	r1, #0
  1388d0:	e12fff34 	blx	r4
  1388d4:	e2504000 	subs	r4, r0, #0
  1388d8:	baffffc1 	blt	1387e4 <fcntl+0x154>
  1388dc:	e3a000dd 	mov	r0, #221	; 0xdd
  1388e0:	eb000c51 	bl	13ba2c <get_rtt_syscall>
  1388e4:	e2503000 	subs	r3, r0, #0
  1388e8:	0affffbd 	beq	1387e4 <fcntl+0x154>
  1388ec:	e3a02001 	mov	r2, #1
  1388f0:	e3a01002 	mov	r1, #2
  1388f4:	e1a00004 	mov	r0, r4
  1388f8:	e12fff33 	blx	r3
  1388fc:	eaffffb8 	b	1387e4 <fcntl+0x154>
  138900:	e1a00003 	mov	r0, r3
  138904:	eaffff85 	b	138720 <fcntl+0x90>
  138908:	00000406 	.word	0x00000406

0013890c <syscall_set_thread_area>:
  13890c:	e1a01000 	mov	r1, r0
  138910:	e3a0007b 	mov	r0, #123	; 0x7b
  138914:	ea000c6f 	b	13bad8 <syscall>

00138918 <syscall_trace>:
  138918:	e92d4070 	push	{r4, r5, r6, lr}
  13891c:	e1a04000 	mov	r4, r0
  138920:	e1a05001 	mov	r5, r1
  138924:	e3a0201d 	mov	r2, #29
  138928:	e59f1018 	ldr	r1, [pc, #24]	; 138948 <syscall_trace+0x30>
  13892c:	e3a000ff 	mov	r0, #255	; 0xff
  138930:	eb000c68 	bl	13bad8 <syscall>
  138934:	e1a02005 	mov	r2, r5
  138938:	e1a01004 	mov	r1, r4
  13893c:	e8bd4070 	pop	{r4, r5, r6, lr}
  138940:	e3a000ff 	mov	r0, #255	; 0xff
  138944:	ea000c63 	b	13bad8 <syscall>
  138948:	0014c218 	.word	0x0014c218

0013894c <syscall_io_pgetevents>:
  13894c:	e92d4010 	push	{r4, lr}
  138950:	e3a01016 	mov	r1, #22
  138954:	e59f0008 	ldr	r0, [pc, #8]	; 138964 <syscall_io_pgetevents+0x18>
  138958:	ebffffee 	bl	138918 <syscall_trace>
  13895c:	e3a00000 	mov	r0, #0
  138960:	e8bd8010 	pop	{r4, pc}
  138964:	0014bba0 	.word	0x0014bba0

00138968 <syscall_rseq>:
  138968:	e92d4010 	push	{r4, lr}
  13896c:	e3a0100d 	mov	r1, #13
  138970:	e59f0008 	ldr	r0, [pc, #8]	; 138980 <syscall_rseq+0x18>
  138974:	ebffffe7 	bl	138918 <syscall_trace>
  138978:	e3a00000 	mov	r0, #0
  13897c:	e8bd8010 	pop	{r4, pc}
  138980:	0014bb90 	.word	0x0014bb90

00138984 <syscall_statx>:
  138984:	e92d4010 	push	{r4, lr}
  138988:	e3a0100e 	mov	r1, #14
  13898c:	e59f0008 	ldr	r0, [pc, #8]	; 13899c <syscall_statx+0x18>
  138990:	ebffffe0 	bl	138918 <syscall_trace>
  138994:	e3a00000 	mov	r0, #0
  138998:	e8bd8010 	pop	{r4, pc}
  13899c:	0014bb80 	.word	0x0014bb80

001389a0 <syscall_pkey_free>:
  1389a0:	e92d4010 	push	{r4, lr}
  1389a4:	e3a01012 	mov	r1, #18
  1389a8:	e59f0008 	ldr	r0, [pc, #8]	; 1389b8 <syscall_pkey_free+0x18>
  1389ac:	ebffffd9 	bl	138918 <syscall_trace>
  1389b0:	e3a00000 	mov	r0, #0
  1389b4:	e8bd8010 	pop	{r4, pc}
  1389b8:	0014bb6c 	.word	0x0014bb6c

001389bc <syscall_pkey_alloc>:
  1389bc:	e92d4010 	push	{r4, lr}
  1389c0:	e3a01013 	mov	r1, #19
  1389c4:	e59f0008 	ldr	r0, [pc, #8]	; 1389d4 <syscall_pkey_alloc+0x18>
  1389c8:	ebffffd2 	bl	138918 <syscall_trace>
  1389cc:	e3a00000 	mov	r0, #0
  1389d0:	e8bd8010 	pop	{r4, pc}
  1389d4:	0014bb58 	.word	0x0014bb58

001389d8 <syscall_pkey_mprotect>:
  1389d8:	e92d4010 	push	{r4, lr}
  1389dc:	e3a01016 	mov	r1, #22
  1389e0:	e59f0008 	ldr	r0, [pc, #8]	; 1389f0 <syscall_pkey_mprotect+0x18>
  1389e4:	ebffffcb 	bl	138918 <syscall_trace>
  1389e8:	e3a00000 	mov	r0, #0
  1389ec:	e8bd8010 	pop	{r4, pc}
  1389f0:	0014bb40 	.word	0x0014bb40

001389f4 <syscall_pwritev2>:
  1389f4:	e92d4010 	push	{r4, lr}
  1389f8:	e3a01011 	mov	r1, #17
  1389fc:	e59f0008 	ldr	r0, [pc, #8]	; 138a0c <syscall_pwritev2+0x18>
  138a00:	ebffffc4 	bl	138918 <syscall_trace>
  138a04:	e3a00000 	mov	r0, #0
  138a08:	e8bd8010 	pop	{r4, pc}
  138a0c:	0014bb2c 	.word	0x0014bb2c

00138a10 <syscall_preadv2>:
  138a10:	e92d4010 	push	{r4, lr}
  138a14:	e3a01010 	mov	r1, #16
  138a18:	e59f0008 	ldr	r0, [pc, #8]	; 138a28 <syscall_preadv2+0x18>
  138a1c:	ebffffbd 	bl	138918 <syscall_trace>
  138a20:	e3a00000 	mov	r0, #0
  138a24:	e8bd8010 	pop	{r4, pc}
  138a28:	0014bb1c 	.word	0x0014bb1c

00138a2c <syscall_copy_file_range>:
  138a2c:	e92d4010 	push	{r4, lr}
  138a30:	e3a01018 	mov	r1, #24
  138a34:	e59f0008 	ldr	r0, [pc, #8]	; 138a44 <syscall_copy_file_range+0x18>
  138a38:	ebffffb6 	bl	138918 <syscall_trace>
  138a3c:	e3a00000 	mov	r0, #0
  138a40:	e8bd8010 	pop	{r4, pc}
  138a44:	0014bb04 	.word	0x0014bb04

00138a48 <syscall_mlock2>:
  138a48:	e92d4010 	push	{r4, lr}
  138a4c:	e3a0100f 	mov	r1, #15
  138a50:	e59f0008 	ldr	r0, [pc, #8]	; 138a60 <syscall_mlock2+0x18>
  138a54:	ebffffaf 	bl	138918 <syscall_trace>
  138a58:	e3a00000 	mov	r0, #0
  138a5c:	e8bd8010 	pop	{r4, pc}
  138a60:	0014baf4 	.word	0x0014baf4

00138a64 <syscall_membarrier>:
  138a64:	e92d4010 	push	{r4, lr}
  138a68:	e3a01013 	mov	r1, #19
  138a6c:	e59f0008 	ldr	r0, [pc, #8]	; 138a7c <syscall_membarrier+0x18>
  138a70:	ebffffa8 	bl	138918 <syscall_trace>
  138a74:	e3a00000 	mov	r0, #0
  138a78:	e8bd8010 	pop	{r4, pc}
  138a7c:	0014bae0 	.word	0x0014bae0

00138a80 <syscall_userfaultfd>:
  138a80:	e92d4010 	push	{r4, lr}
  138a84:	e3a01014 	mov	r1, #20
  138a88:	e59f0008 	ldr	r0, [pc, #8]	; 138a98 <syscall_userfaultfd+0x18>
  138a8c:	ebffffa1 	bl	138918 <syscall_trace>
  138a90:	e3a00000 	mov	r0, #0
  138a94:	e8bd8010 	pop	{r4, pc}
  138a98:	0014bacc 	.word	0x0014bacc

00138a9c <syscall_execveat>:
  138a9c:	e92d4010 	push	{r4, lr}
  138aa0:	e3a01011 	mov	r1, #17
  138aa4:	e59f0008 	ldr	r0, [pc, #8]	; 138ab4 <syscall_execveat+0x18>
  138aa8:	ebffff9a 	bl	138918 <syscall_trace>
  138aac:	e3a00000 	mov	r0, #0
  138ab0:	e8bd8010 	pop	{r4, pc}
  138ab4:	0014bab8 	.word	0x0014bab8

00138ab8 <syscall_bpf>:
  138ab8:	e92d4010 	push	{r4, lr}
  138abc:	e3a0100c 	mov	r1, #12
  138ac0:	e59f0008 	ldr	r0, [pc, #8]	; 138ad0 <syscall_bpf+0x18>
  138ac4:	ebffff93 	bl	138918 <syscall_trace>
  138ac8:	e3a00000 	mov	r0, #0
  138acc:	e8bd8010 	pop	{r4, pc}
  138ad0:	0014baac 	.word	0x0014baac

00138ad4 <syscall_memfd_create>:
  138ad4:	e92d4010 	push	{r4, lr}
  138ad8:	e3a01015 	mov	r1, #21
  138adc:	e59f0008 	ldr	r0, [pc, #8]	; 138aec <syscall_memfd_create+0x18>
  138ae0:	ebffff8c 	bl	138918 <syscall_trace>
  138ae4:	e3a00000 	mov	r0, #0
  138ae8:	e8bd8010 	pop	{r4, pc}
  138aec:	0014ba94 	.word	0x0014ba94

00138af0 <syscall_seccomp>:
  138af0:	e92d4010 	push	{r4, lr}
  138af4:	e3a01010 	mov	r1, #16
  138af8:	e59f0008 	ldr	r0, [pc, #8]	; 138b08 <syscall_seccomp+0x18>
  138afc:	ebffff85 	bl	138918 <syscall_trace>
  138b00:	e3a00000 	mov	r0, #0
  138b04:	e8bd8010 	pop	{r4, pc}
  138b08:	0014ba70 	.word	0x0014ba70

00138b0c <syscall_renameat2>:
  138b0c:	e92d4010 	push	{r4, lr}
  138b10:	e3a01012 	mov	r1, #18
  138b14:	e59f0008 	ldr	r0, [pc, #8]	; 138b24 <syscall_renameat2+0x18>
  138b18:	ebffff7e 	bl	138918 <syscall_trace>
  138b1c:	e3a00000 	mov	r0, #0
  138b20:	e8bd8010 	pop	{r4, pc}
  138b24:	0014ba5c 	.word	0x0014ba5c

00138b28 <syscall_sched_getattr>:
  138b28:	e92d4010 	push	{r4, lr}
  138b2c:	e3a01016 	mov	r1, #22
  138b30:	e59f0008 	ldr	r0, [pc, #8]	; 138b40 <syscall_sched_getattr+0x18>
  138b34:	ebffff77 	bl	138918 <syscall_trace>
  138b38:	e3a00000 	mov	r0, #0
  138b3c:	e8bd8010 	pop	{r4, pc}
  138b40:	0014ba44 	.word	0x0014ba44

00138b44 <syscall_sched_setattr>:
  138b44:	e92d4010 	push	{r4, lr}
  138b48:	e3a01016 	mov	r1, #22
  138b4c:	e59f0008 	ldr	r0, [pc, #8]	; 138b5c <syscall_sched_setattr+0x18>
  138b50:	ebffff70 	bl	138918 <syscall_trace>
  138b54:	e3a00000 	mov	r0, #0
  138b58:	e8bd8010 	pop	{r4, pc}
  138b5c:	0014ba2c 	.word	0x0014ba2c

00138b60 <syscall_finit_module>:
  138b60:	e92d4010 	push	{r4, lr}
  138b64:	e3a01015 	mov	r1, #21
  138b68:	e59f0008 	ldr	r0, [pc, #8]	; 138b78 <syscall_finit_module+0x18>
  138b6c:	ebffff69 	bl	138918 <syscall_trace>
  138b70:	e3a00000 	mov	r0, #0
  138b74:	e8bd8010 	pop	{r4, pc}
  138b78:	0014ba14 	.word	0x0014ba14

00138b7c <syscall_kcmp>:
  138b7c:	e92d4010 	push	{r4, lr}
  138b80:	e3a0100d 	mov	r1, #13
  138b84:	e59f0008 	ldr	r0, [pc, #8]	; 138b94 <syscall_kcmp+0x18>
  138b88:	ebffff62 	bl	138918 <syscall_trace>
  138b8c:	e3a00000 	mov	r0, #0
  138b90:	e8bd8010 	pop	{r4, pc}
  138b94:	0014ba04 	.word	0x0014ba04

00138b98 <syscall_process_vm_writev>:
  138b98:	e92d4010 	push	{r4, lr}
  138b9c:	e3a0101a 	mov	r1, #26
  138ba0:	e59f0008 	ldr	r0, [pc, #8]	; 138bb0 <syscall_process_vm_writev+0x18>
  138ba4:	ebffff5b 	bl	138918 <syscall_trace>
  138ba8:	e3a00000 	mov	r0, #0
  138bac:	e8bd8010 	pop	{r4, pc}
  138bb0:	0014b9e8 	.word	0x0014b9e8

00138bb4 <syscall_process_vm_readv>:
  138bb4:	e92d4010 	push	{r4, lr}
  138bb8:	e3a01019 	mov	r1, #25
  138bbc:	e59f0008 	ldr	r0, [pc, #8]	; 138bcc <syscall_process_vm_readv+0x18>
  138bc0:	ebffff54 	bl	138918 <syscall_trace>
  138bc4:	e3a00000 	mov	r0, #0
  138bc8:	e8bd8010 	pop	{r4, pc}
  138bcc:	0014b9cc 	.word	0x0014b9cc

00138bd0 <syscall_setns>:
  138bd0:	e92d4010 	push	{r4, lr}
  138bd4:	e3a0100e 	mov	r1, #14
  138bd8:	e59f0008 	ldr	r0, [pc, #8]	; 138be8 <syscall_setns+0x18>
  138bdc:	ebffff4d 	bl	138918 <syscall_trace>
  138be0:	e3a00000 	mov	r0, #0
  138be4:	e8bd8010 	pop	{r4, pc}
  138be8:	0014b9bc 	.word	0x0014b9bc

00138bec <syscall_sendmmsg>:
  138bec:	e92d4010 	push	{r4, lr}
  138bf0:	e3a01011 	mov	r1, #17
  138bf4:	e59f0008 	ldr	r0, [pc, #8]	; 138c04 <syscall_sendmmsg+0x18>
  138bf8:	ebffff46 	bl	138918 <syscall_trace>
  138bfc:	e3a00000 	mov	r0, #0
  138c00:	e8bd8010 	pop	{r4, pc}
  138c04:	0014b9a8 	.word	0x0014b9a8

00138c08 <syscall_syncfs>:
  138c08:	e92d4010 	push	{r4, lr}
  138c0c:	e3a0100f 	mov	r1, #15
  138c10:	e59f0008 	ldr	r0, [pc, #8]	; 138c20 <syscall_syncfs+0x18>
  138c14:	ebffff3f 	bl	138918 <syscall_trace>
  138c18:	e3a00000 	mov	r0, #0
  138c1c:	e8bd8010 	pop	{r4, pc}
  138c20:	0014b998 	.word	0x0014b998

00138c24 <syscall_clock_adjtime>:
  138c24:	e92d4010 	push	{r4, lr}
  138c28:	e3a01016 	mov	r1, #22
  138c2c:	e59f0008 	ldr	r0, [pc, #8]	; 138c3c <syscall_clock_adjtime+0x18>
  138c30:	ebffff38 	bl	138918 <syscall_trace>
  138c34:	e3a00000 	mov	r0, #0
  138c38:	e8bd8010 	pop	{r4, pc}
  138c3c:	0014b980 	.word	0x0014b980

00138c40 <syscall_open_by_handle_at>:
  138c40:	e92d4010 	push	{r4, lr}
  138c44:	e3a0101a 	mov	r1, #26
  138c48:	e59f0008 	ldr	r0, [pc, #8]	; 138c58 <syscall_open_by_handle_at+0x18>
  138c4c:	ebffff31 	bl	138918 <syscall_trace>
  138c50:	e3a00000 	mov	r0, #0
  138c54:	e8bd8010 	pop	{r4, pc}
  138c58:	0014b964 	.word	0x0014b964

00138c5c <syscall_name_to_handle_at>:
  138c5c:	e92d4010 	push	{r4, lr}
  138c60:	e3a0101a 	mov	r1, #26
  138c64:	e59f0008 	ldr	r0, [pc, #8]	; 138c74 <syscall_name_to_handle_at+0x18>
  138c68:	ebffff2a 	bl	138918 <syscall_trace>
  138c6c:	e3a00000 	mov	r0, #0
  138c70:	e8bd8010 	pop	{r4, pc}
  138c74:	0014b948 	.word	0x0014b948

00138c78 <syscall_fanotify_mark>:
  138c78:	e92d4010 	push	{r4, lr}
  138c7c:	e3a01016 	mov	r1, #22
  138c80:	e59f0008 	ldr	r0, [pc, #8]	; 138c90 <syscall_fanotify_mark+0x18>
  138c84:	ebffff23 	bl	138918 <syscall_trace>
  138c88:	e3a00000 	mov	r0, #0
  138c8c:	e8bd8010 	pop	{r4, pc}
  138c90:	0014b91c 	.word	0x0014b91c

00138c94 <syscall_fanotify_init>:
  138c94:	e92d4010 	push	{r4, lr}
  138c98:	e3a01016 	mov	r1, #22
  138c9c:	e59f0008 	ldr	r0, [pc, #8]	; 138cac <syscall_fanotify_init+0x18>
  138ca0:	ebffff1c 	bl	138918 <syscall_trace>
  138ca4:	e3a00000 	mov	r0, #0
  138ca8:	e8bd8010 	pop	{r4, pc}
  138cac:	0014b904 	.word	0x0014b904

00138cb0 <syscall_accept4>:
  138cb0:	e92d4010 	push	{r4, lr}
  138cb4:	e3a01010 	mov	r1, #16
  138cb8:	e59f0008 	ldr	r0, [pc, #8]	; 138cc8 <syscall_accept4+0x18>
  138cbc:	ebffff15 	bl	138918 <syscall_trace>
  138cc0:	e3a00000 	mov	r0, #0
  138cc4:	e8bd8010 	pop	{r4, pc}
  138cc8:	0014b8f4 	.word	0x0014b8f4

00138ccc <syscall_recvmmsg>:
  138ccc:	e92d4010 	push	{r4, lr}
  138cd0:	e3a01011 	mov	r1, #17
  138cd4:	e59f0008 	ldr	r0, [pc, #8]	; 138ce4 <syscall_recvmmsg+0x18>
  138cd8:	ebffff0e 	bl	138918 <syscall_trace>
  138cdc:	e3a00000 	mov	r0, #0
  138ce0:	e8bd8010 	pop	{r4, pc}
  138ce4:	0014b8e0 	.word	0x0014b8e0

00138ce8 <syscall_perf_event_open>:
  138ce8:	e92d4010 	push	{r4, lr}
  138cec:	e3a01018 	mov	r1, #24
  138cf0:	e59f0008 	ldr	r0, [pc, #8]	; 138d00 <syscall_perf_event_open+0x18>
  138cf4:	ebffff07 	bl	138918 <syscall_trace>
  138cf8:	e3a00000 	mov	r0, #0
  138cfc:	e8bd8010 	pop	{r4, pc}
  138d00:	0014b8c8 	.word	0x0014b8c8

00138d04 <syscall_rt_tgsigqueueinfo>:
  138d04:	e92d4010 	push	{r4, lr}
  138d08:	e3a0101a 	mov	r1, #26
  138d0c:	e59f0008 	ldr	r0, [pc, #8]	; 138d1c <syscall_rt_tgsigqueueinfo+0x18>
  138d10:	ebffff00 	bl	138918 <syscall_trace>
  138d14:	e3a00000 	mov	r0, #0
  138d18:	e8bd8010 	pop	{r4, pc}
  138d1c:	0014b8ac 	.word	0x0014b8ac

00138d20 <syscall_pwritev>:
  138d20:	e92d4010 	push	{r4, lr}
  138d24:	e3a01010 	mov	r1, #16
  138d28:	e59f0008 	ldr	r0, [pc, #8]	; 138d38 <syscall_pwritev+0x18>
  138d2c:	ebfffef9 	bl	138918 <syscall_trace>
  138d30:	e3a00000 	mov	r0, #0
  138d34:	e8bd8010 	pop	{r4, pc}
  138d38:	0014b89c 	.word	0x0014b89c

00138d3c <syscall_preadv>:
  138d3c:	e92d4010 	push	{r4, lr}
  138d40:	e3a0100f 	mov	r1, #15
  138d44:	e59f0008 	ldr	r0, [pc, #8]	; 138d54 <syscall_preadv+0x18>
  138d48:	ebfffef2 	bl	138918 <syscall_trace>
  138d4c:	e3a00000 	mov	r0, #0
  138d50:	e8bd8010 	pop	{r4, pc}
  138d54:	0014b88c 	.word	0x0014b88c

00138d58 <syscall_inotify_init1>:
  138d58:	e92d4010 	push	{r4, lr}
  138d5c:	e3a01016 	mov	r1, #22
  138d60:	e59f0008 	ldr	r0, [pc, #8]	; 138d70 <syscall_inotify_init1+0x18>
  138d64:	ebfffeeb 	bl	138918 <syscall_trace>
  138d68:	e3a00000 	mov	r0, #0
  138d6c:	e8bd8010 	pop	{r4, pc}
  138d70:	0014b874 	.word	0x0014b874

00138d74 <syscall_pipe2>:
  138d74:	e92d4010 	push	{r4, lr}
  138d78:	e3a0100e 	mov	r1, #14
  138d7c:	e59f0008 	ldr	r0, [pc, #8]	; 138d8c <syscall_pipe2+0x18>
  138d80:	ebfffee4 	bl	138918 <syscall_trace>
  138d84:	e3a00000 	mov	r0, #0
  138d88:	e8bd8010 	pop	{r4, pc}
  138d8c:	0014b864 	.word	0x0014b864

00138d90 <syscall_dup3>:
  138d90:	e92d4010 	push	{r4, lr}
  138d94:	e3a0100d 	mov	r1, #13
  138d98:	e59f0008 	ldr	r0, [pc, #8]	; 138da8 <syscall_dup3+0x18>
  138d9c:	ebfffedd 	bl	138918 <syscall_trace>
  138da0:	e3a00000 	mov	r0, #0
  138da4:	e8bd8010 	pop	{r4, pc}
  138da8:	0014b854 	.word	0x0014b854

00138dac <syscall_epoll_create1>:
  138dac:	e92d4010 	push	{r4, lr}
  138db0:	e3a01016 	mov	r1, #22
  138db4:	e59f0008 	ldr	r0, [pc, #8]	; 138dc4 <syscall_epoll_create1+0x18>
  138db8:	ebfffed6 	bl	138918 <syscall_trace>
  138dbc:	e3e00025 	mvn	r0, #37	; 0x25
  138dc0:	e8bd8010 	pop	{r4, pc}
  138dc4:	0014b83c 	.word	0x0014b83c

00138dc8 <syscall_eventfd2>:
  138dc8:	e92d4010 	push	{r4, lr}
  138dcc:	e3a01011 	mov	r1, #17
  138dd0:	e59f0008 	ldr	r0, [pc, #8]	; 138de0 <syscall_eventfd2+0x18>
  138dd4:	ebfffecf 	bl	138918 <syscall_trace>
  138dd8:	e3a00000 	mov	r0, #0
  138ddc:	e8bd8010 	pop	{r4, pc}
  138de0:	0014b828 	.word	0x0014b828

00138de4 <syscall_signalfd4>:
  138de4:	e92d4010 	push	{r4, lr}
  138de8:	e3a01012 	mov	r1, #18
  138dec:	e59f0008 	ldr	r0, [pc, #8]	; 138dfc <syscall_signalfd4+0x18>
  138df0:	ebfffec8 	bl	138918 <syscall_trace>
  138df4:	e3a00000 	mov	r0, #0
  138df8:	e8bd8010 	pop	{r4, pc}
  138dfc:	0014b814 	.word	0x0014b814

00138e00 <syscall_timerfd_gettime>:
  138e00:	e92d4010 	push	{r4, lr}
  138e04:	e3a01018 	mov	r1, #24
  138e08:	e59f0008 	ldr	r0, [pc, #8]	; 138e18 <syscall_timerfd_gettime+0x18>
  138e0c:	ebfffec1 	bl	138918 <syscall_trace>
  138e10:	e3a00000 	mov	r0, #0
  138e14:	e8bd8010 	pop	{r4, pc}
  138e18:	0014b7fc 	.word	0x0014b7fc

00138e1c <syscall_timerfd_settime>:
  138e1c:	e92d4010 	push	{r4, lr}
  138e20:	e3a01018 	mov	r1, #24
  138e24:	e59f0008 	ldr	r0, [pc, #8]	; 138e34 <syscall_timerfd_settime+0x18>
  138e28:	ebfffeba 	bl	138918 <syscall_trace>
  138e2c:	e3a00000 	mov	r0, #0
  138e30:	e8bd8010 	pop	{r4, pc}
  138e34:	0014b7e4 	.word	0x0014b7e4

00138e38 <syscall_fallocate>:
  138e38:	e92d4010 	push	{r4, lr}
  138e3c:	e3a01012 	mov	r1, #18
  138e40:	e59f0008 	ldr	r0, [pc, #8]	; 138e50 <syscall_fallocate+0x18>
  138e44:	ebfffeb3 	bl	138918 <syscall_trace>
  138e48:	e3a00000 	mov	r0, #0
  138e4c:	e8bd8010 	pop	{r4, pc}
  138e50:	0014b7d0 	.word	0x0014b7d0

00138e54 <syscall_eventfd>:
  138e54:	e92d4010 	push	{r4, lr}
  138e58:	e3a01010 	mov	r1, #16
  138e5c:	e59f0008 	ldr	r0, [pc, #8]	; 138e6c <syscall_eventfd+0x18>
  138e60:	ebfffeac 	bl	138918 <syscall_trace>
  138e64:	e3a00000 	mov	r0, #0
  138e68:	e8bd8010 	pop	{r4, pc}
  138e6c:	0014b7c0 	.word	0x0014b7c0

00138e70 <syscall_timerfd_create>:
  138e70:	e92d4010 	push	{r4, lr}
  138e74:	e3a01017 	mov	r1, #23
  138e78:	e59f0008 	ldr	r0, [pc, #8]	; 138e88 <syscall_timerfd_create+0x18>
  138e7c:	ebfffea5 	bl	138918 <syscall_trace>
  138e80:	e3a00000 	mov	r0, #0
  138e84:	e8bd8010 	pop	{r4, pc}
  138e88:	0014b7a8 	.word	0x0014b7a8

00138e8c <syscall_signalfd>:
  138e8c:	e92d4010 	push	{r4, lr}
  138e90:	e3a01011 	mov	r1, #17
  138e94:	e59f0008 	ldr	r0, [pc, #8]	; 138ea4 <syscall_signalfd+0x18>
  138e98:	ebfffe9e 	bl	138918 <syscall_trace>
  138e9c:	e3a00000 	mov	r0, #0
  138ea0:	e8bd8010 	pop	{r4, pc}
  138ea4:	0014b794 	.word	0x0014b794

00138ea8 <syscall_utimensat>:
  138ea8:	e92d4010 	push	{r4, lr}
  138eac:	e3a01012 	mov	r1, #18
  138eb0:	e59f0008 	ldr	r0, [pc, #8]	; 138ec0 <syscall_utimensat+0x18>
  138eb4:	ebfffe97 	bl	138918 <syscall_trace>
  138eb8:	e3a00000 	mov	r0, #0
  138ebc:	e8bd8010 	pop	{r4, pc}
  138ec0:	0014b780 	.word	0x0014b780

00138ec4 <syscall_kexec_load>:
  138ec4:	e92d4010 	push	{r4, lr}
  138ec8:	e3a01013 	mov	r1, #19
  138ecc:	e59f0008 	ldr	r0, [pc, #8]	; 138edc <syscall_kexec_load+0x18>
  138ed0:	ebfffe90 	bl	138918 <syscall_trace>
  138ed4:	e3a00000 	mov	r0, #0
  138ed8:	e8bd8010 	pop	{r4, pc}
  138edc:	0014b76c 	.word	0x0014b76c

00138ee0 <syscall_epoll_pwait>:
  138ee0:	e92d4010 	push	{r4, lr}
  138ee4:	e3a01014 	mov	r1, #20
  138ee8:	e59f0008 	ldr	r0, [pc, #8]	; 138ef8 <syscall_epoll_pwait+0x18>
  138eec:	ebfffe89 	bl	138918 <syscall_trace>
  138ef0:	e3e00025 	mvn	r0, #37	; 0x25
  138ef4:	e8bd8010 	pop	{r4, pc}
  138ef8:	0014b758 	.word	0x0014b758

00138efc <syscall_getcpu>:
  138efc:	e92d4010 	push	{r4, lr}
  138f00:	e3a0100f 	mov	r1, #15
  138f04:	e59f0008 	ldr	r0, [pc, #8]	; 138f14 <syscall_getcpu+0x18>
  138f08:	ebfffe82 	bl	138918 <syscall_trace>
  138f0c:	e3a00000 	mov	r0, #0
  138f10:	e8bd8010 	pop	{r4, pc}
  138f14:	0014b748 	.word	0x0014b748

00138f18 <syscall_move_pages>:
  138f18:	e92d4010 	push	{r4, lr}
  138f1c:	e3a01013 	mov	r1, #19
  138f20:	e59f0008 	ldr	r0, [pc, #8]	; 138f30 <syscall_move_pages+0x18>
  138f24:	ebfffe7b 	bl	138918 <syscall_trace>
  138f28:	e3a00000 	mov	r0, #0
  138f2c:	e8bd8010 	pop	{r4, pc}
  138f30:	0014b734 	.word	0x0014b734

00138f34 <syscall_vmsplice>:
  138f34:	e92d4010 	push	{r4, lr}
  138f38:	e3a01011 	mov	r1, #17
  138f3c:	e59f0008 	ldr	r0, [pc, #8]	; 138f4c <syscall_vmsplice+0x18>
  138f40:	ebfffe74 	bl	138918 <syscall_trace>
  138f44:	e3a00000 	mov	r0, #0
  138f48:	e8bd8010 	pop	{r4, pc}
  138f4c:	0014b720 	.word	0x0014b720

00138f50 <syscall_tee>:
  138f50:	e92d4010 	push	{r4, lr}
  138f54:	e3a0100c 	mov	r1, #12
  138f58:	e59f0008 	ldr	r0, [pc, #8]	; 138f68 <syscall_tee+0x18>
  138f5c:	ebfffe6d 	bl	138918 <syscall_trace>
  138f60:	e3a00000 	mov	r0, #0
  138f64:	e8bd8010 	pop	{r4, pc}
  138f68:	0014b714 	.word	0x0014b714

00138f6c <syscall_arm_sync_file_range>:
  138f6c:	e92d4010 	push	{r4, lr}
  138f70:	e3a0101c 	mov	r1, #28
  138f74:	e59f0008 	ldr	r0, [pc, #8]	; 138f84 <syscall_arm_sync_file_range+0x18>
  138f78:	ebfffe66 	bl	138918 <syscall_trace>
  138f7c:	e3a00000 	mov	r0, #0
  138f80:	e8bd8010 	pop	{r4, pc}
  138f84:	0014b6f8 	.word	0x0014b6f8

00138f88 <syscall_splice>:
  138f88:	e92d4010 	push	{r4, lr}
  138f8c:	e3a0100f 	mov	r1, #15
  138f90:	e59f0008 	ldr	r0, [pc, #8]	; 138fa0 <syscall_splice+0x18>
  138f94:	ebfffe5f 	bl	138918 <syscall_trace>
  138f98:	e3a00000 	mov	r0, #0
  138f9c:	e8bd8010 	pop	{r4, pc}
  138fa0:	0014b6e8 	.word	0x0014b6e8

00138fa4 <syscall_get_robust_list>:
  138fa4:	e92d4010 	push	{r4, lr}
  138fa8:	e3a01018 	mov	r1, #24
  138fac:	e59f0008 	ldr	r0, [pc, #8]	; 138fbc <syscall_get_robust_list+0x18>
  138fb0:	ebfffe58 	bl	138918 <syscall_trace>
  138fb4:	e3a00000 	mov	r0, #0
  138fb8:	e8bd8010 	pop	{r4, pc}
  138fbc:	0014b6d0 	.word	0x0014b6d0

00138fc0 <syscall_set_robust_list>:
  138fc0:	e92d4010 	push	{r4, lr}
  138fc4:	e3a01018 	mov	r1, #24
  138fc8:	e59f0008 	ldr	r0, [pc, #8]	; 138fd8 <syscall_set_robust_list+0x18>
  138fcc:	ebfffe51 	bl	138918 <syscall_trace>
  138fd0:	e3a00000 	mov	r0, #0
  138fd4:	e8bd8010 	pop	{r4, pc}
  138fd8:	0014b6b8 	.word	0x0014b6b8

00138fdc <syscall_unshare>:
  138fdc:	e92d4010 	push	{r4, lr}
  138fe0:	e3a01010 	mov	r1, #16
  138fe4:	e59f0008 	ldr	r0, [pc, #8]	; 138ff4 <syscall_unshare+0x18>
  138fe8:	ebfffe4a 	bl	138918 <syscall_trace>
  138fec:	e3a00000 	mov	r0, #0
  138ff0:	e8bd8010 	pop	{r4, pc}
  138ff4:	0014b6a8 	.word	0x0014b6a8

00138ff8 <syscall_ppoll>:
  138ff8:	e92d4010 	push	{r4, lr}
  138ffc:	e3a0100e 	mov	r1, #14
  139000:	e59f0008 	ldr	r0, [pc, #8]	; 139010 <syscall_ppoll+0x18>
  139004:	ebfffe43 	bl	138918 <syscall_trace>
  139008:	e3a00000 	mov	r0, #0
  13900c:	e8bd8010 	pop	{r4, pc}
  139010:	0014b698 	.word	0x0014b698

00139014 <syscall_pselect6>:
  139014:	e92d4010 	push	{r4, lr}
  139018:	e3a01011 	mov	r1, #17
  13901c:	e59f0008 	ldr	r0, [pc, #8]	; 13902c <syscall_pselect6+0x18>
  139020:	ebfffe3c 	bl	138918 <syscall_trace>
  139024:	e3a00000 	mov	r0, #0
  139028:	e8bd8010 	pop	{r4, pc}
  13902c:	0014b684 	.word	0x0014b684

00139030 <syscall_faccessat>:
  139030:	e92d4010 	push	{r4, lr}
  139034:	e3a01012 	mov	r1, #18
  139038:	e59f0008 	ldr	r0, [pc, #8]	; 139048 <syscall_faccessat+0x18>
  13903c:	ebfffe35 	bl	138918 <syscall_trace>
  139040:	e3a00000 	mov	r0, #0
  139044:	e8bd8010 	pop	{r4, pc}
  139048:	0014b670 	.word	0x0014b670

0013904c <syscall_fchmodat>:
  13904c:	e92d4010 	push	{r4, lr}
  139050:	e3a01011 	mov	r1, #17
  139054:	e59f0008 	ldr	r0, [pc, #8]	; 139064 <syscall_fchmodat+0x18>
  139058:	ebfffe2e 	bl	138918 <syscall_trace>
  13905c:	e3a00000 	mov	r0, #0
  139060:	e8bd8010 	pop	{r4, pc}
  139064:	0014b65c 	.word	0x0014b65c

00139068 <syscall_readlinkat>:
  139068:	e92d4010 	push	{r4, lr}
  13906c:	e3a01013 	mov	r1, #19
  139070:	e59f0008 	ldr	r0, [pc, #8]	; 139080 <syscall_readlinkat+0x18>
  139074:	ebfffe27 	bl	138918 <syscall_trace>
  139078:	e3a00000 	mov	r0, #0
  13907c:	e8bd8010 	pop	{r4, pc}
  139080:	0014b648 	.word	0x0014b648

00139084 <syscall_symlinkat>:
  139084:	e92d4010 	push	{r4, lr}
  139088:	e3a01012 	mov	r1, #18
  13908c:	e59f0008 	ldr	r0, [pc, #8]	; 13909c <syscall_symlinkat+0x18>
  139090:	ebfffe20 	bl	138918 <syscall_trace>
  139094:	e3a00000 	mov	r0, #0
  139098:	e8bd8010 	pop	{r4, pc}
  13909c:	0014b634 	.word	0x0014b634

001390a0 <syscall_linkat>:
  1390a0:	e92d4010 	push	{r4, lr}
  1390a4:	e3a0100f 	mov	r1, #15
  1390a8:	e59f0008 	ldr	r0, [pc, #8]	; 1390b8 <syscall_linkat+0x18>
  1390ac:	ebfffe19 	bl	138918 <syscall_trace>
  1390b0:	e3a00000 	mov	r0, #0
  1390b4:	e8bd8010 	pop	{r4, pc}
  1390b8:	0014b624 	.word	0x0014b624

001390bc <syscall_renameat>:
  1390bc:	e92d4010 	push	{r4, lr}
  1390c0:	e3a01011 	mov	r1, #17
  1390c4:	e59f0008 	ldr	r0, [pc, #8]	; 1390d4 <syscall_renameat+0x18>
  1390c8:	ebfffe12 	bl	138918 <syscall_trace>
  1390cc:	e3a00000 	mov	r0, #0
  1390d0:	e8bd8010 	pop	{r4, pc}
  1390d4:	0014b610 	.word	0x0014b610

001390d8 <syscall_unlinkat>:
  1390d8:	e92d4010 	push	{r4, lr}
  1390dc:	e3a01011 	mov	r1, #17
  1390e0:	e59f0008 	ldr	r0, [pc, #8]	; 1390f0 <syscall_unlinkat+0x18>
  1390e4:	ebfffe0b 	bl	138918 <syscall_trace>
  1390e8:	e3a00000 	mov	r0, #0
  1390ec:	e8bd8010 	pop	{r4, pc}
  1390f0:	0014b5fc 	.word	0x0014b5fc

001390f4 <syscall_fstatat64>:
  1390f4:	e92d4010 	push	{r4, lr}
  1390f8:	e3a01012 	mov	r1, #18
  1390fc:	e59f0008 	ldr	r0, [pc, #8]	; 13910c <syscall_fstatat64+0x18>
  139100:	ebfffe04 	bl	138918 <syscall_trace>
  139104:	e3a00000 	mov	r0, #0
  139108:	e8bd8010 	pop	{r4, pc}
  13910c:	0014b5e8 	.word	0x0014b5e8

00139110 <syscall_futimesat>:
  139110:	e92d4010 	push	{r4, lr}
  139114:	e3a01012 	mov	r1, #18
  139118:	e59f0008 	ldr	r0, [pc, #8]	; 139128 <syscall_futimesat+0x18>
  13911c:	ebfffdfd 	bl	138918 <syscall_trace>
  139120:	e3a00000 	mov	r0, #0
  139124:	e8bd8010 	pop	{r4, pc}
  139128:	0014b5d4 	.word	0x0014b5d4

0013912c <syscall_fchownat>:
  13912c:	e92d4010 	push	{r4, lr}
  139130:	e3a01011 	mov	r1, #17
  139134:	e59f0008 	ldr	r0, [pc, #8]	; 139144 <syscall_fchownat+0x18>
  139138:	ebfffdf6 	bl	138918 <syscall_trace>
  13913c:	e3a00000 	mov	r0, #0
  139140:	e8bd8010 	pop	{r4, pc}
  139144:	0014b5c0 	.word	0x0014b5c0

00139148 <syscall_mknodat>:
  139148:	e92d4010 	push	{r4, lr}
  13914c:	e3a01010 	mov	r1, #16
  139150:	e59f0008 	ldr	r0, [pc, #8]	; 139160 <syscall_mknodat+0x18>
  139154:	ebfffdef 	bl	138918 <syscall_trace>
  139158:	e3a00000 	mov	r0, #0
  13915c:	e8bd8010 	pop	{r4, pc}
  139160:	0014b5b0 	.word	0x0014b5b0

00139164 <syscall_mkdirat>:
  139164:	e92d4010 	push	{r4, lr}
  139168:	e3a01010 	mov	r1, #16
  13916c:	e59f0008 	ldr	r0, [pc, #8]	; 13917c <syscall_mkdirat+0x18>
  139170:	ebfffde8 	bl	138918 <syscall_trace>
  139174:	e3a00000 	mov	r0, #0
  139178:	e8bd8010 	pop	{r4, pc}
  13917c:	0014b5a0 	.word	0x0014b5a0

00139180 <syscall_openat>:
  139180:	e92d4010 	push	{r4, lr}
  139184:	e3a0100f 	mov	r1, #15
  139188:	e59f0008 	ldr	r0, [pc, #8]	; 139198 <syscall_openat+0x18>
  13918c:	ebfffde1 	bl	138918 <syscall_trace>
  139190:	e3a00000 	mov	r0, #0
  139194:	e8bd8010 	pop	{r4, pc}
  139198:	0014b590 	.word	0x0014b590

0013919c <syscall_set_mempolicy>:
  13919c:	e92d4010 	push	{r4, lr}
  1391a0:	e3a01016 	mov	r1, #22
  1391a4:	e59f0008 	ldr	r0, [pc, #8]	; 1391b4 <syscall_set_mempolicy+0x18>
  1391a8:	ebfffdda 	bl	138918 <syscall_trace>
  1391ac:	e3a00000 	mov	r0, #0
  1391b0:	e8bd8010 	pop	{r4, pc}
  1391b4:	0014b578 	.word	0x0014b578

001391b8 <syscall_get_mempolicy>:
  1391b8:	e92d4010 	push	{r4, lr}
  1391bc:	e3a01016 	mov	r1, #22
  1391c0:	e59f0008 	ldr	r0, [pc, #8]	; 1391d0 <syscall_get_mempolicy+0x18>
  1391c4:	ebfffdd3 	bl	138918 <syscall_trace>
  1391c8:	e3a00000 	mov	r0, #0
  1391cc:	e8bd8010 	pop	{r4, pc}
  1391d0:	0014b560 	.word	0x0014b560

001391d4 <syscall_mbind>:
  1391d4:	e92d4010 	push	{r4, lr}
  1391d8:	e3a0100e 	mov	r1, #14
  1391dc:	e59f0008 	ldr	r0, [pc, #8]	; 1391ec <syscall_mbind+0x18>
  1391e0:	ebfffdcc 	bl	138918 <syscall_trace>
  1391e4:	e3a00000 	mov	r0, #0
  1391e8:	e8bd8010 	pop	{r4, pc}
  1391ec:	0014b550 	.word	0x0014b550

001391f0 <syscall_inotify_rm_watch>:
  1391f0:	e92d4010 	push	{r4, lr}
  1391f4:	e3a01019 	mov	r1, #25
  1391f8:	e59f0008 	ldr	r0, [pc, #8]	; 139208 <syscall_inotify_rm_watch+0x18>
  1391fc:	ebfffdc5 	bl	138918 <syscall_trace>
  139200:	e3a00000 	mov	r0, #0
  139204:	e8bd8010 	pop	{r4, pc}
  139208:	0014b534 	.word	0x0014b534

0013920c <syscall_inotify_add_watch>:
  13920c:	e92d4010 	push	{r4, lr}
  139210:	e3a0101a 	mov	r1, #26
  139214:	e59f0008 	ldr	r0, [pc, #8]	; 139224 <syscall_inotify_add_watch+0x18>
  139218:	ebfffdbe 	bl	138918 <syscall_trace>
  13921c:	e3a00000 	mov	r0, #0
  139220:	e8bd8010 	pop	{r4, pc}
  139224:	0014b518 	.word	0x0014b518

00139228 <syscall_inotify_init>:
  139228:	e92d4010 	push	{r4, lr}
  13922c:	e3a01015 	mov	r1, #21
  139230:	e59f0008 	ldr	r0, [pc, #8]	; 139240 <syscall_inotify_init+0x18>
  139234:	ebfffdb7 	bl	138918 <syscall_trace>
  139238:	e3a00000 	mov	r0, #0
  13923c:	e8bd8010 	pop	{r4, pc}
  139240:	0014b500 	.word	0x0014b500

00139244 <syscall_ioprio_get>:
  139244:	e92d4010 	push	{r4, lr}
  139248:	e3a01013 	mov	r1, #19
  13924c:	e59f0008 	ldr	r0, [pc, #8]	; 13925c <syscall_ioprio_get+0x18>
  139250:	ebfffdb0 	bl	138918 <syscall_trace>
  139254:	e3a00000 	mov	r0, #0
  139258:	e8bd8010 	pop	{r4, pc}
  13925c:	0014b4ec 	.word	0x0014b4ec

00139260 <syscall_ioprio_set>:
  139260:	e92d4010 	push	{r4, lr}
  139264:	e3a01013 	mov	r1, #19
  139268:	e59f0008 	ldr	r0, [pc, #8]	; 139278 <syscall_ioprio_set+0x18>
  13926c:	ebfffda9 	bl	138918 <syscall_trace>
  139270:	e3a00000 	mov	r0, #0
  139274:	e8bd8010 	pop	{r4, pc}
  139278:	0014b4d8 	.word	0x0014b4d8

0013927c <syscall_vserver>:
  13927c:	e92d4010 	push	{r4, lr}
  139280:	e3a01010 	mov	r1, #16
  139284:	e59f0008 	ldr	r0, [pc, #8]	; 139294 <syscall_vserver+0x18>
  139288:	ebfffda2 	bl	138918 <syscall_trace>
  13928c:	e3a00000 	mov	r0, #0
  139290:	e8bd8010 	pop	{r4, pc}
  139294:	0014b4c8 	.word	0x0014b4c8

00139298 <syscall_semtimedop>:
  139298:	e92d4010 	push	{r4, lr}
  13929c:	e3a01013 	mov	r1, #19
  1392a0:	e59f0008 	ldr	r0, [pc, #8]	; 1392b0 <syscall_semtimedop+0x18>
  1392a4:	ebfffd9b 	bl	138918 <syscall_trace>
  1392a8:	e3a00000 	mov	r0, #0
  1392ac:	e8bd8010 	pop	{r4, pc}
  1392b0:	0014b4b4 	.word	0x0014b4b4

001392b4 <syscall_keyctl>:
  1392b4:	e92d4010 	push	{r4, lr}
  1392b8:	e3a0100f 	mov	r1, #15
  1392bc:	e59f0008 	ldr	r0, [pc, #8]	; 1392cc <syscall_keyctl+0x18>
  1392c0:	ebfffd94 	bl	138918 <syscall_trace>
  1392c4:	e3a00000 	mov	r0, #0
  1392c8:	e8bd8010 	pop	{r4, pc}
  1392cc:	0014b4a4 	.word	0x0014b4a4

001392d0 <syscall_request_key>:
  1392d0:	e92d4010 	push	{r4, lr}
  1392d4:	e3a01014 	mov	r1, #20
  1392d8:	e59f0008 	ldr	r0, [pc, #8]	; 1392e8 <syscall_request_key+0x18>
  1392dc:	ebfffd8d 	bl	138918 <syscall_trace>
  1392e0:	e3a00000 	mov	r0, #0
  1392e4:	e8bd8010 	pop	{r4, pc}
  1392e8:	0014b490 	.word	0x0014b490

001392ec <syscall_add_key>:
  1392ec:	e92d4010 	push	{r4, lr}
  1392f0:	e3a01010 	mov	r1, #16
  1392f4:	e59f0008 	ldr	r0, [pc, #8]	; 139304 <syscall_add_key+0x18>
  1392f8:	ebfffd86 	bl	138918 <syscall_trace>
  1392fc:	e3a00000 	mov	r0, #0
  139300:	e8bd8010 	pop	{r4, pc}
  139304:	0014b480 	.word	0x0014b480

00139308 <syscall_msgctl>:
  139308:	e92d4010 	push	{r4, lr}
  13930c:	e3a0100f 	mov	r1, #15
  139310:	e59f0008 	ldr	r0, [pc, #8]	; 139320 <syscall_msgctl+0x18>
  139314:	ebfffd7f 	bl	138918 <syscall_trace>
  139318:	e3a00000 	mov	r0, #0
  13931c:	e8bd8010 	pop	{r4, pc}
  139320:	0014b430 	.word	0x0014b430

00139324 <syscall_msgget>:
  139324:	e92d4010 	push	{r4, lr}
  139328:	e3a0100f 	mov	r1, #15
  13932c:	e59f0008 	ldr	r0, [pc, #8]	; 13933c <syscall_msgget+0x18>
  139330:	ebfffd78 	bl	138918 <syscall_trace>
  139334:	e3a00000 	mov	r0, #0
  139338:	e8bd8010 	pop	{r4, pc}
  13933c:	0014b420 	.word	0x0014b420

00139340 <syscall_msgrcv>:
  139340:	e92d4010 	push	{r4, lr}
  139344:	e3a0100f 	mov	r1, #15
  139348:	e59f0008 	ldr	r0, [pc, #8]	; 139358 <syscall_msgrcv+0x18>
  13934c:	ebfffd71 	bl	138918 <syscall_trace>
  139350:	e3a00000 	mov	r0, #0
  139354:	e8bd8010 	pop	{r4, pc}
  139358:	0014b410 	.word	0x0014b410

0013935c <syscall_msgsnd>:
  13935c:	e92d4010 	push	{r4, lr}
  139360:	e3a0100f 	mov	r1, #15
  139364:	e59f0008 	ldr	r0, [pc, #8]	; 139374 <syscall_msgsnd+0x18>
  139368:	ebfffd6a 	bl	138918 <syscall_trace>
  13936c:	e3a00000 	mov	r0, #0
  139370:	e8bd8010 	pop	{r4, pc}
  139374:	0014b400 	.word	0x0014b400

00139378 <syscall_semctl>:
  139378:	e92d4010 	push	{r4, lr}
  13937c:	e3a0100f 	mov	r1, #15
  139380:	e59f0008 	ldr	r0, [pc, #8]	; 139390 <syscall_semctl+0x18>
  139384:	ebfffd63 	bl	138918 <syscall_trace>
  139388:	e3a00000 	mov	r0, #0
  13938c:	e8bd8010 	pop	{r4, pc}
  139390:	0014b3f0 	.word	0x0014b3f0

00139394 <syscall_semget>:
  139394:	e92d4010 	push	{r4, lr}
  139398:	e3a0100f 	mov	r1, #15
  13939c:	e59f0008 	ldr	r0, [pc, #8]	; 1393ac <syscall_semget+0x18>
  1393a0:	ebfffd5c 	bl	138918 <syscall_trace>
  1393a4:	e3a00000 	mov	r0, #0
  1393a8:	e8bd8010 	pop	{r4, pc}
  1393ac:	0014b3e0 	.word	0x0014b3e0

001393b0 <syscall_semop>:
  1393b0:	e92d4010 	push	{r4, lr}
  1393b4:	e3a0100e 	mov	r1, #14
  1393b8:	e59f0008 	ldr	r0, [pc, #8]	; 1393c8 <syscall_semop+0x18>
  1393bc:	ebfffd55 	bl	138918 <syscall_trace>
  1393c0:	e3a00000 	mov	r0, #0
  1393c4:	e8bd8010 	pop	{r4, pc}
  1393c8:	0014b3d0 	.word	0x0014b3d0

001393cc <syscall_recvmsg>:
  1393cc:	e92d4010 	push	{r4, lr}
  1393d0:	e3a01010 	mov	r1, #16
  1393d4:	e59f0008 	ldr	r0, [pc, #8]	; 1393e4 <syscall_recvmsg+0x18>
  1393d8:	ebfffd4e 	bl	138918 <syscall_trace>
  1393dc:	e3a00000 	mov	r0, #0
  1393e0:	e8bd8010 	pop	{r4, pc}
  1393e4:	0014b3c0 	.word	0x0014b3c0

001393e8 <syscall_sendmsg>:
  1393e8:	e92d4010 	push	{r4, lr}
  1393ec:	e3a01010 	mov	r1, #16
  1393f0:	e59f0008 	ldr	r0, [pc, #8]	; 139400 <syscall_sendmsg+0x18>
  1393f4:	ebfffd47 	bl	138918 <syscall_trace>
  1393f8:	e3a00000 	mov	r0, #0
  1393fc:	e8bd8010 	pop	{r4, pc}
  139400:	0014b3b0 	.word	0x0014b3b0

00139404 <syscall_shutdown>:
  139404:	e92d4010 	push	{r4, lr}
  139408:	e3a01011 	mov	r1, #17
  13940c:	e59f0008 	ldr	r0, [pc, #8]	; 13941c <syscall_shutdown+0x18>
  139410:	ebfffd40 	bl	138918 <syscall_trace>
  139414:	e3a00000 	mov	r0, #0
  139418:	e8bd8010 	pop	{r4, pc}
  13941c:	0014b374 	.word	0x0014b374

00139420 <syscall_socketpair>:
  139420:	e92d4010 	push	{r4, lr}
  139424:	e3a01013 	mov	r1, #19
  139428:	e59f0008 	ldr	r0, [pc, #8]	; 139438 <syscall_socketpair+0x18>
  13942c:	ebfffd39 	bl	138918 <syscall_trace>
  139430:	e3a00000 	mov	r0, #0
  139434:	e8bd8010 	pop	{r4, pc}
  139438:	0014b31c 	.word	0x0014b31c

0013943c <syscall_waitid>:
  13943c:	e92d4010 	push	{r4, lr}
  139440:	e3a0100f 	mov	r1, #15
  139444:	e59f0008 	ldr	r0, [pc, #8]	; 139454 <syscall_waitid+0x18>
  139448:	ebfffd32 	bl	138918 <syscall_trace>
  13944c:	e3a00000 	mov	r0, #0
  139450:	e8bd8010 	pop	{r4, pc}
  139454:	0014b294 	.word	0x0014b294

00139458 <syscall_mq_getsetattr>:
  139458:	e92d4010 	push	{r4, lr}
  13945c:	e3a01016 	mov	r1, #22
  139460:	e59f0008 	ldr	r0, [pc, #8]	; 139470 <syscall_mq_getsetattr+0x18>
  139464:	ebfffd2b 	bl	138918 <syscall_trace>
  139468:	e3a00000 	mov	r0, #0
  13946c:	e8bd8010 	pop	{r4, pc}
  139470:	0014b27c 	.word	0x0014b27c

00139474 <syscall_mq_notify>:
  139474:	e92d4010 	push	{r4, lr}
  139478:	e3a01012 	mov	r1, #18
  13947c:	e59f0008 	ldr	r0, [pc, #8]	; 13948c <syscall_mq_notify+0x18>
  139480:	ebfffd24 	bl	138918 <syscall_trace>
  139484:	e3a00000 	mov	r0, #0
  139488:	e8bd8010 	pop	{r4, pc}
  13948c:	0014b268 	.word	0x0014b268

00139490 <syscall_mq_timedreceive>:
  139490:	e92d4010 	push	{r4, lr}
  139494:	e3a01018 	mov	r1, #24
  139498:	e59f0008 	ldr	r0, [pc, #8]	; 1394a8 <syscall_mq_timedreceive+0x18>
  13949c:	ebfffd1d 	bl	138918 <syscall_trace>
  1394a0:	e3a00000 	mov	r0, #0
  1394a4:	e8bd8010 	pop	{r4, pc}
  1394a8:	0014b250 	.word	0x0014b250

001394ac <syscall_mq_timedsend>:
  1394ac:	e92d4010 	push	{r4, lr}
  1394b0:	e3a01015 	mov	r1, #21
  1394b4:	e59f0008 	ldr	r0, [pc, #8]	; 1394c4 <syscall_mq_timedsend+0x18>
  1394b8:	ebfffd16 	bl	138918 <syscall_trace>
  1394bc:	e3a00000 	mov	r0, #0
  1394c0:	e8bd8010 	pop	{r4, pc}
  1394c4:	0014b238 	.word	0x0014b238

001394c8 <syscall_mq_unlink>:
  1394c8:	e92d4010 	push	{r4, lr}
  1394cc:	e3a01012 	mov	r1, #18
  1394d0:	e59f0008 	ldr	r0, [pc, #8]	; 1394e0 <syscall_mq_unlink+0x18>
  1394d4:	ebfffd0f 	bl	138918 <syscall_trace>
  1394d8:	e3a00000 	mov	r0, #0
  1394dc:	e8bd8010 	pop	{r4, pc}
  1394e0:	0014b224 	.word	0x0014b224

001394e4 <syscall_mq_open>:
  1394e4:	e92d4010 	push	{r4, lr}
  1394e8:	e3a01010 	mov	r1, #16
  1394ec:	e59f0008 	ldr	r0, [pc, #8]	; 1394fc <syscall_mq_open+0x18>
  1394f0:	ebfffd08 	bl	138918 <syscall_trace>
  1394f4:	e3a00000 	mov	r0, #0
  1394f8:	e8bd8010 	pop	{r4, pc}
  1394fc:	0014b214 	.word	0x0014b214

00139500 <syscall_pciconfig_write>:
  139500:	e92d4010 	push	{r4, lr}
  139504:	e3a01018 	mov	r1, #24
  139508:	e59f0008 	ldr	r0, [pc, #8]	; 139518 <syscall_pciconfig_write+0x18>
  13950c:	ebfffd01 	bl	138918 <syscall_trace>
  139510:	e3a00000 	mov	r0, #0
  139514:	e8bd8010 	pop	{r4, pc}
  139518:	0014b1fc 	.word	0x0014b1fc

0013951c <syscall_pciconfig_read>:
  13951c:	e92d4010 	push	{r4, lr}
  139520:	e3a01017 	mov	r1, #23
  139524:	e59f0008 	ldr	r0, [pc, #8]	; 139534 <syscall_pciconfig_read+0x18>
  139528:	ebfffcfa 	bl	138918 <syscall_trace>
  13952c:	e3a00000 	mov	r0, #0
  139530:	e8bd8010 	pop	{r4, pc}
  139534:	0014b1e4 	.word	0x0014b1e4

00139538 <syscall_pciconfig_iobase>:
  139538:	e92d4010 	push	{r4, lr}
  13953c:	e3a01019 	mov	r1, #25
  139540:	e59f0008 	ldr	r0, [pc, #8]	; 139550 <syscall_pciconfig_iobase+0x18>
  139544:	ebfffcf3 	bl	138918 <syscall_trace>
  139548:	e3a00000 	mov	r0, #0
  13954c:	e8bd8010 	pop	{r4, pc}
  139550:	0014b1c8 	.word	0x0014b1c8

00139554 <syscall_arm_fadvise64_64>:
  139554:	e92d4010 	push	{r4, lr}
  139558:	e3a01019 	mov	r1, #25
  13955c:	e59f0008 	ldr	r0, [pc, #8]	; 13956c <syscall_arm_fadvise64_64+0x18>
  139560:	ebfffcec 	bl	138918 <syscall_trace>
  139564:	e3a00000 	mov	r0, #0
  139568:	e8bd8010 	pop	{r4, pc}
  13956c:	0014b1ac 	.word	0x0014b1ac

00139570 <syscall_utimes>:
  139570:	e92d4010 	push	{r4, lr}
  139574:	e3a0100f 	mov	r1, #15
  139578:	e59f0008 	ldr	r0, [pc, #8]	; 139588 <syscall_utimes+0x18>
  13957c:	ebfffce5 	bl	138918 <syscall_trace>
  139580:	e3a00000 	mov	r0, #0
  139584:	e8bd8010 	pop	{r4, pc}
  139588:	0014b19c 	.word	0x0014b19c

0013958c <syscall_tgkill>:
  13958c:	e92d4010 	push	{r4, lr}
  139590:	e3a0100f 	mov	r1, #15
  139594:	e59f0008 	ldr	r0, [pc, #8]	; 1395a4 <syscall_tgkill+0x18>
  139598:	ebfffcde 	bl	138918 <syscall_trace>
  13959c:	e3a00000 	mov	r0, #0
  1395a0:	e8bd8010 	pop	{r4, pc}
  1395a4:	0014b18c 	.word	0x0014b18c

001395a8 <syscall_fstatfs64>:
  1395a8:	e92d4010 	push	{r4, lr}
  1395ac:	e3a01012 	mov	r1, #18
  1395b0:	e59f0008 	ldr	r0, [pc, #8]	; 1395c0 <syscall_fstatfs64+0x18>
  1395b4:	ebfffcd7 	bl	138918 <syscall_trace>
  1395b8:	e3a00000 	mov	r0, #0
  1395bc:	e8bd8010 	pop	{r4, pc}
  1395c0:	0014b178 	.word	0x0014b178

001395c4 <syscall_statfs64>:
  1395c4:	e92d4010 	push	{r4, lr}
  1395c8:	e3a01011 	mov	r1, #17
  1395cc:	e59f0008 	ldr	r0, [pc, #8]	; 1395dc <syscall_statfs64+0x18>
  1395d0:	ebfffcd0 	bl	138918 <syscall_trace>
  1395d4:	e3a00000 	mov	r0, #0
  1395d8:	e8bd8010 	pop	{r4, pc}
  1395dc:	0014b164 	.word	0x0014b164

001395e0 <syscall_clock_nanosleep>:
  1395e0:	e92d4010 	push	{r4, lr}
  1395e4:	e3a01018 	mov	r1, #24
  1395e8:	e59f0008 	ldr	r0, [pc, #8]	; 1395f8 <syscall_clock_nanosleep+0x18>
  1395ec:	ebfffcc9 	bl	138918 <syscall_trace>
  1395f0:	e3a00000 	mov	r0, #0
  1395f4:	e8bd8010 	pop	{r4, pc}
  1395f8:	0014b14c 	.word	0x0014b14c

001395fc <syscall_timer_delete>:
  1395fc:	e92d4010 	push	{r4, lr}
  139600:	e3a01015 	mov	r1, #21
  139604:	e59f0008 	ldr	r0, [pc, #8]	; 139614 <syscall_timer_delete+0x18>
  139608:	ebfffcc2 	bl	138918 <syscall_trace>
  13960c:	e3a00000 	mov	r0, #0
  139610:	e8bd8010 	pop	{r4, pc}
  139614:	0014b0ec 	.word	0x0014b0ec

00139618 <syscall_timer_getoverrun>:
  139618:	e92d4010 	push	{r4, lr}
  13961c:	e3a01019 	mov	r1, #25
  139620:	e59f0008 	ldr	r0, [pc, #8]	; 139630 <syscall_timer_getoverrun+0x18>
  139624:	ebfffcbb 	bl	138918 <syscall_trace>
  139628:	e3a00000 	mov	r0, #0
  13962c:	e8bd8010 	pop	{r4, pc}
  139630:	0014b0d0 	.word	0x0014b0d0

00139634 <syscall_timer_gettime>:
  139634:	e92d4010 	push	{r4, lr}
  139638:	e3a01016 	mov	r1, #22
  13963c:	e59f0008 	ldr	r0, [pc, #8]	; 13964c <syscall_timer_gettime+0x18>
  139640:	ebfffcb4 	bl	138918 <syscall_trace>
  139644:	e3a00000 	mov	r0, #0
  139648:	e8bd8010 	pop	{r4, pc}
  13964c:	0014b0b8 	.word	0x0014b0b8

00139650 <syscall_timer_settime>:
  139650:	e92d4010 	push	{r4, lr}
  139654:	e3a01016 	mov	r1, #22
  139658:	e59f0008 	ldr	r0, [pc, #8]	; 139668 <syscall_timer_settime+0x18>
  13965c:	ebfffcad 	bl	138918 <syscall_trace>
  139660:	e3a00000 	mov	r0, #0
  139664:	e8bd8010 	pop	{r4, pc}
  139668:	0014b0a0 	.word	0x0014b0a0

0013966c <syscall_timer_create>:
  13966c:	e92d4010 	push	{r4, lr}
  139670:	e3a01015 	mov	r1, #21
  139674:	e59f0008 	ldr	r0, [pc, #8]	; 139684 <syscall_timer_create+0x18>
  139678:	ebfffca6 	bl	138918 <syscall_trace>
  13967c:	e3a00000 	mov	r0, #0
  139680:	e8bd8010 	pop	{r4, pc}
  139684:	0014b088 	.word	0x0014b088

00139688 <syscall_remap_file_pages>:
  139688:	e92d4010 	push	{r4, lr}
  13968c:	e3a01019 	mov	r1, #25
  139690:	e59f0008 	ldr	r0, [pc, #8]	; 1396a0 <syscall_remap_file_pages+0x18>
  139694:	ebfffc9f 	bl	138918 <syscall_trace>
  139698:	e3a00000 	mov	r0, #0
  13969c:	e8bd8010 	pop	{r4, pc}
  1396a0:	0014b054 	.word	0x0014b054

001396a4 <syscall_epoll_wait>:
  1396a4:	e92d4010 	push	{r4, lr}
  1396a8:	e3a01013 	mov	r1, #19
  1396ac:	e59f0008 	ldr	r0, [pc, #8]	; 1396bc <syscall_epoll_wait+0x18>
  1396b0:	ebfffc98 	bl	138918 <syscall_trace>
  1396b4:	e3e00025 	mvn	r0, #37	; 0x25
  1396b8:	e8bd8010 	pop	{r4, pc}
  1396bc:	0014b040 	.word	0x0014b040

001396c0 <syscall_epoll_ctl>:
  1396c0:	e92d4010 	push	{r4, lr}
  1396c4:	e3a01012 	mov	r1, #18
  1396c8:	e59f0008 	ldr	r0, [pc, #8]	; 1396d8 <syscall_epoll_ctl+0x18>
  1396cc:	ebfffc91 	bl	138918 <syscall_trace>
  1396d0:	e3e00025 	mvn	r0, #37	; 0x25
  1396d4:	e8bd8010 	pop	{r4, pc}
  1396d8:	0014b02c 	.word	0x0014b02c

001396dc <syscall_epoll_create>:
  1396dc:	e92d4010 	push	{r4, lr}
  1396e0:	e3a01015 	mov	r1, #21
  1396e4:	e59f0008 	ldr	r0, [pc, #8]	; 1396f4 <syscall_epoll_create+0x18>
  1396e8:	ebfffc8a 	bl	138918 <syscall_trace>
  1396ec:	e3e00025 	mvn	r0, #37	; 0x25
  1396f0:	e8bd8010 	pop	{r4, pc}
  1396f4:	0014b014 	.word	0x0014b014

001396f8 <syscall_lookup_dcookie>:
  1396f8:	e92d4010 	push	{r4, lr}
  1396fc:	e3a01017 	mov	r1, #23
  139700:	e59f0008 	ldr	r0, [pc, #8]	; 139710 <syscall_lookup_dcookie+0x18>
  139704:	ebfffc83 	bl	138918 <syscall_trace>
  139708:	e3a00000 	mov	r0, #0
  13970c:	e8bd8010 	pop	{r4, pc}
  139710:	0014affc 	.word	0x0014affc

00139714 <syscall_io_cancel>:
  139714:	e92d4010 	push	{r4, lr}
  139718:	e3a01012 	mov	r1, #18
  13971c:	e59f0008 	ldr	r0, [pc, #8]	; 13972c <syscall_io_cancel+0x18>
  139720:	ebfffc7c 	bl	138918 <syscall_trace>
  139724:	e3a00000 	mov	r0, #0
  139728:	e8bd8010 	pop	{r4, pc}
  13972c:	0014afd4 	.word	0x0014afd4

00139730 <syscall_io_submit>:
  139730:	e92d4010 	push	{r4, lr}
  139734:	e3a01012 	mov	r1, #18
  139738:	e59f0008 	ldr	r0, [pc, #8]	; 139748 <syscall_io_submit+0x18>
  13973c:	ebfffc75 	bl	138918 <syscall_trace>
  139740:	e3a00000 	mov	r0, #0
  139744:	e8bd8010 	pop	{r4, pc}
  139748:	0014afc0 	.word	0x0014afc0

0013974c <syscall_io_getevents>:
  13974c:	e92d4010 	push	{r4, lr}
  139750:	e3a01015 	mov	r1, #21
  139754:	e59f0008 	ldr	r0, [pc, #8]	; 139764 <syscall_io_getevents+0x18>
  139758:	ebfffc6e 	bl	138918 <syscall_trace>
  13975c:	e3a00000 	mov	r0, #0
  139760:	e8bd8010 	pop	{r4, pc}
  139764:	0014afa8 	.word	0x0014afa8

00139768 <syscall_io_destroy>:
  139768:	e92d4010 	push	{r4, lr}
  13976c:	e3a01013 	mov	r1, #19
  139770:	e59f0008 	ldr	r0, [pc, #8]	; 139780 <syscall_io_destroy+0x18>
  139774:	ebfffc67 	bl	138918 <syscall_trace>
  139778:	e3a00000 	mov	r0, #0
  13977c:	e8bd8010 	pop	{r4, pc}
  139780:	0014af94 	.word	0x0014af94

00139784 <syscall_io_setup>:
  139784:	e92d4010 	push	{r4, lr}
  139788:	e3a01011 	mov	r1, #17
  13978c:	e59f0008 	ldr	r0, [pc, #8]	; 13979c <syscall_io_setup+0x18>
  139790:	ebfffc60 	bl	138918 <syscall_trace>
  139794:	e3a00000 	mov	r0, #0
  139798:	e8bd8010 	pop	{r4, pc}
  13979c:	0014af80 	.word	0x0014af80

001397a0 <syscall_sched_getaffinity>:
  1397a0:	e92d4010 	push	{r4, lr}
  1397a4:	e3a0101a 	mov	r1, #26
  1397a8:	e59f0008 	ldr	r0, [pc, #8]	; 1397b8 <syscall_sched_getaffinity+0x18>
  1397ac:	ebfffc59 	bl	138918 <syscall_trace>
  1397b0:	e3a00000 	mov	r0, #0
  1397b4:	e8bd8010 	pop	{r4, pc}
  1397b8:	0014af64 	.word	0x0014af64

001397bc <syscall_sendfile64>:
  1397bc:	e92d4010 	push	{r4, lr}
  1397c0:	e3a01013 	mov	r1, #19
  1397c4:	e59f0008 	ldr	r0, [pc, #8]	; 1397d4 <syscall_sendfile64+0x18>
  1397c8:	ebfffc52 	bl	138918 <syscall_trace>
  1397cc:	e3a00000 	mov	r0, #0
  1397d0:	e8bd8010 	pop	{r4, pc}
  1397d4:	0014af24 	.word	0x0014af24

001397d8 <syscall_fremovexattr>:
  1397d8:	e92d4010 	push	{r4, lr}
  1397dc:	e3a01015 	mov	r1, #21
  1397e0:	e59f0008 	ldr	r0, [pc, #8]	; 1397f0 <syscall_fremovexattr+0x18>
  1397e4:	ebfffc4b 	bl	138918 <syscall_trace>
  1397e8:	e3a00000 	mov	r0, #0
  1397ec:	e8bd8010 	pop	{r4, pc}
  1397f0:	0014aefc 	.word	0x0014aefc

001397f4 <syscall_lremovexattr>:
  1397f4:	e92d4010 	push	{r4, lr}
  1397f8:	e3a01015 	mov	r1, #21
  1397fc:	e59f0008 	ldr	r0, [pc, #8]	; 13980c <syscall_lremovexattr+0x18>
  139800:	ebfffc44 	bl	138918 <syscall_trace>
  139804:	e3a00000 	mov	r0, #0
  139808:	e8bd8010 	pop	{r4, pc}
  13980c:	0014aee4 	.word	0x0014aee4

00139810 <syscall_removexattr>:
  139810:	e92d4010 	push	{r4, lr}
  139814:	e3a01014 	mov	r1, #20
  139818:	e59f0008 	ldr	r0, [pc, #8]	; 139828 <syscall_removexattr+0x18>
  13981c:	ebfffc3d 	bl	138918 <syscall_trace>
  139820:	e3a00000 	mov	r0, #0
  139824:	e8bd8010 	pop	{r4, pc}
  139828:	0014aed0 	.word	0x0014aed0

0013982c <syscall_flistxattr>:
  13982c:	e92d4010 	push	{r4, lr}
  139830:	e3a01013 	mov	r1, #19
  139834:	e59f0008 	ldr	r0, [pc, #8]	; 139844 <syscall_flistxattr+0x18>
  139838:	ebfffc36 	bl	138918 <syscall_trace>
  13983c:	e3a00000 	mov	r0, #0
  139840:	e8bd8010 	pop	{r4, pc}
  139844:	0014aebc 	.word	0x0014aebc

00139848 <syscall_llistxattr>:
  139848:	e92d4010 	push	{r4, lr}
  13984c:	e3a01013 	mov	r1, #19
  139850:	e59f0008 	ldr	r0, [pc, #8]	; 139860 <syscall_llistxattr+0x18>
  139854:	ebfffc2f 	bl	138918 <syscall_trace>
  139858:	e3a00000 	mov	r0, #0
  13985c:	e8bd8010 	pop	{r4, pc}
  139860:	0014aea8 	.word	0x0014aea8

00139864 <syscall_listxattr>:
  139864:	e92d4010 	push	{r4, lr}
  139868:	e3a01012 	mov	r1, #18
  13986c:	e59f0008 	ldr	r0, [pc, #8]	; 13987c <syscall_listxattr+0x18>
  139870:	ebfffc28 	bl	138918 <syscall_trace>
  139874:	e3a00000 	mov	r0, #0
  139878:	e8bd8010 	pop	{r4, pc}
  13987c:	0014ae94 	.word	0x0014ae94

00139880 <syscall_fgetxattr>:
  139880:	e92d4010 	push	{r4, lr}
  139884:	e3a01012 	mov	r1, #18
  139888:	e59f0008 	ldr	r0, [pc, #8]	; 139898 <syscall_fgetxattr+0x18>
  13988c:	ebfffc21 	bl	138918 <syscall_trace>
  139890:	e3a00000 	mov	r0, #0
  139894:	e8bd8010 	pop	{r4, pc}
  139898:	0014ae80 	.word	0x0014ae80

0013989c <syscall_lgetxattr>:
  13989c:	e92d4010 	push	{r4, lr}
  1398a0:	e3a01012 	mov	r1, #18
  1398a4:	e59f0008 	ldr	r0, [pc, #8]	; 1398b4 <syscall_lgetxattr+0x18>
  1398a8:	ebfffc1a 	bl	138918 <syscall_trace>
  1398ac:	e3a00000 	mov	r0, #0
  1398b0:	e8bd8010 	pop	{r4, pc}
  1398b4:	0014ae6c 	.word	0x0014ae6c

001398b8 <syscall_getxattr>:
  1398b8:	e92d4010 	push	{r4, lr}
  1398bc:	e3a01011 	mov	r1, #17
  1398c0:	e59f0008 	ldr	r0, [pc, #8]	; 1398d0 <syscall_getxattr+0x18>
  1398c4:	ebfffc13 	bl	138918 <syscall_trace>
  1398c8:	e3a00000 	mov	r0, #0
  1398cc:	e8bd8010 	pop	{r4, pc}
  1398d0:	0014ae58 	.word	0x0014ae58

001398d4 <syscall_fsetxattr>:
  1398d4:	e92d4010 	push	{r4, lr}
  1398d8:	e3a01012 	mov	r1, #18
  1398dc:	e59f0008 	ldr	r0, [pc, #8]	; 1398ec <syscall_fsetxattr+0x18>
  1398e0:	ebfffc0c 	bl	138918 <syscall_trace>
  1398e4:	e3a00000 	mov	r0, #0
  1398e8:	e8bd8010 	pop	{r4, pc}
  1398ec:	0014ae44 	.word	0x0014ae44

001398f0 <syscall_lsetxattr>:
  1398f0:	e92d4010 	push	{r4, lr}
  1398f4:	e3a01012 	mov	r1, #18
  1398f8:	e59f0008 	ldr	r0, [pc, #8]	; 139908 <syscall_lsetxattr+0x18>
  1398fc:	ebfffc05 	bl	138918 <syscall_trace>
  139900:	e3a00000 	mov	r0, #0
  139904:	e8bd8010 	pop	{r4, pc}
  139908:	0014ae30 	.word	0x0014ae30

0013990c <syscall_setxattr>:
  13990c:	e92d4010 	push	{r4, lr}
  139910:	e3a01011 	mov	r1, #17
  139914:	e59f0008 	ldr	r0, [pc, #8]	; 139924 <syscall_setxattr+0x18>
  139918:	ebfffbfe 	bl	138918 <syscall_trace>
  13991c:	e3a00000 	mov	r0, #0
  139920:	e8bd8010 	pop	{r4, pc}
  139924:	0014ae1c 	.word	0x0014ae1c

00139928 <syscall_readahead>:
  139928:	e92d4010 	push	{r4, lr}
  13992c:	e3a01012 	mov	r1, #18
  139930:	e59f0008 	ldr	r0, [pc, #8]	; 139940 <syscall_readahead+0x18>
  139934:	ebfffbf7 	bl	138918 <syscall_trace>
  139938:	e3a00000 	mov	r0, #0
  13993c:	e8bd8010 	pop	{r4, pc}
  139940:	0014ae08 	.word	0x0014ae08

00139944 <syscall_mincore>:
  139944:	e92d4010 	push	{r4, lr}
  139948:	e3a01010 	mov	r1, #16
  13994c:	e59f0008 	ldr	r0, [pc, #8]	; 13995c <syscall_mincore+0x18>
  139950:	ebfffbf0 	bl	138918 <syscall_trace>
  139954:	e3a00000 	mov	r0, #0
  139958:	e8bd8010 	pop	{r4, pc}
  13995c:	0014adc8 	.word	0x0014adc8

00139960 <syscall_pivot_root>:
  139960:	e92d4010 	push	{r4, lr}
  139964:	e3a01013 	mov	r1, #19
  139968:	e59f0008 	ldr	r0, [pc, #8]	; 139978 <syscall_pivot_root+0x18>
  13996c:	ebfffbe9 	bl	138918 <syscall_trace>
  139970:	e3a00000 	mov	r0, #0
  139974:	e8bd8010 	pop	{r4, pc}
  139978:	0014adb4 	.word	0x0014adb4

0013997c <syscall_setfsgid32>:
  13997c:	e92d4010 	push	{r4, lr}
  139980:	e3a01013 	mov	r1, #19
  139984:	e59f0008 	ldr	r0, [pc, #8]	; 139994 <syscall_setfsgid32+0x18>
  139988:	ebfffbe2 	bl	138918 <syscall_trace>
  13998c:	e3a00000 	mov	r0, #0
  139990:	e8bd8010 	pop	{r4, pc}
  139994:	0014ad8c 	.word	0x0014ad8c

00139998 <syscall_setfsuid32>:
  139998:	e92d4010 	push	{r4, lr}
  13999c:	e3a01013 	mov	r1, #19
  1399a0:	e59f0008 	ldr	r0, [pc, #8]	; 1399b0 <syscall_setfsuid32+0x18>
  1399a4:	ebfffbdb 	bl	138918 <syscall_trace>
  1399a8:	e3a00000 	mov	r0, #0
  1399ac:	e8bd8010 	pop	{r4, pc}
  1399b0:	0014ad78 	.word	0x0014ad78

001399b4 <syscall_setgid32>:
  1399b4:	e92d4010 	push	{r4, lr}
  1399b8:	e3a01011 	mov	r1, #17
  1399bc:	e59f0008 	ldr	r0, [pc, #8]	; 1399cc <syscall_setgid32+0x18>
  1399c0:	ebfffbd4 	bl	138918 <syscall_trace>
  1399c4:	e3a00000 	mov	r0, #0
  1399c8:	e8bd8010 	pop	{r4, pc}
  1399cc:	0014ad64 	.word	0x0014ad64

001399d0 <syscall_setuid32>:
  1399d0:	e92d4010 	push	{r4, lr}
  1399d4:	e3a01011 	mov	r1, #17
  1399d8:	e59f0008 	ldr	r0, [pc, #8]	; 1399e8 <syscall_setuid32+0x18>
  1399dc:	ebfffbcd 	bl	138918 <syscall_trace>
  1399e0:	e3a00000 	mov	r0, #0
  1399e4:	e8bd8010 	pop	{r4, pc}
  1399e8:	0014ad50 	.word	0x0014ad50

001399ec <syscall_chown32>:
  1399ec:	e92d4010 	push	{r4, lr}
  1399f0:	e3a01010 	mov	r1, #16
  1399f4:	e59f0008 	ldr	r0, [pc, #8]	; 139a04 <syscall_chown32+0x18>
  1399f8:	ebfffbc6 	bl	138918 <syscall_trace>
  1399fc:	e3a00000 	mov	r0, #0
  139a00:	e8bd8010 	pop	{r4, pc}
  139a04:	0014ad40 	.word	0x0014ad40

00139a08 <syscall_getresgid32>:
  139a08:	e92d4010 	push	{r4, lr}
  139a0c:	e3a01014 	mov	r1, #20
  139a10:	e59f0008 	ldr	r0, [pc, #8]	; 139a20 <syscall_getresgid32+0x18>
  139a14:	ebfffbbf 	bl	138918 <syscall_trace>
  139a18:	e3a00000 	mov	r0, #0
  139a1c:	e8bd8010 	pop	{r4, pc}
  139a20:	0014ad2c 	.word	0x0014ad2c

00139a24 <syscall_setresgid32>:
  139a24:	e92d4010 	push	{r4, lr}
  139a28:	e3a01014 	mov	r1, #20
  139a2c:	e59f0008 	ldr	r0, [pc, #8]	; 139a3c <syscall_setresgid32+0x18>
  139a30:	ebfffbb8 	bl	138918 <syscall_trace>
  139a34:	e3a00000 	mov	r0, #0
  139a38:	e8bd8010 	pop	{r4, pc}
  139a3c:	0014ad18 	.word	0x0014ad18

00139a40 <syscall_getresuid32>:
  139a40:	e92d4010 	push	{r4, lr}
  139a44:	e3a01014 	mov	r1, #20
  139a48:	e59f0008 	ldr	r0, [pc, #8]	; 139a58 <syscall_getresuid32+0x18>
  139a4c:	ebfffbb1 	bl	138918 <syscall_trace>
  139a50:	e3a00000 	mov	r0, #0
  139a54:	e8bd8010 	pop	{r4, pc}
  139a58:	0014ad04 	.word	0x0014ad04

00139a5c <syscall_setresuid32>:
  139a5c:	e92d4010 	push	{r4, lr}
  139a60:	e3a01014 	mov	r1, #20
  139a64:	e59f0008 	ldr	r0, [pc, #8]	; 139a74 <syscall_setresuid32+0x18>
  139a68:	ebfffbaa 	bl	138918 <syscall_trace>
  139a6c:	e3a00000 	mov	r0, #0
  139a70:	e8bd8010 	pop	{r4, pc}
  139a74:	0014acf0 	.word	0x0014acf0

00139a78 <syscall_fchown32>:
  139a78:	e92d4010 	push	{r4, lr}
  139a7c:	e3a01011 	mov	r1, #17
  139a80:	e59f0008 	ldr	r0, [pc, #8]	; 139a90 <syscall_fchown32+0x18>
  139a84:	ebfffba3 	bl	138918 <syscall_trace>
  139a88:	e3a00000 	mov	r0, #0
  139a8c:	e8bd8010 	pop	{r4, pc}
  139a90:	0014acdc 	.word	0x0014acdc

00139a94 <syscall_setgroups32>:
  139a94:	e92d4010 	push	{r4, lr}
  139a98:	e3a01014 	mov	r1, #20
  139a9c:	e59f0008 	ldr	r0, [pc, #8]	; 139aac <syscall_setgroups32+0x18>
  139aa0:	ebfffb9c 	bl	138918 <syscall_trace>
  139aa4:	e3a00000 	mov	r0, #0
  139aa8:	e8bd8010 	pop	{r4, pc}
  139aac:	0014acc8 	.word	0x0014acc8

00139ab0 <syscall_getgroups32>:
  139ab0:	e92d4010 	push	{r4, lr}
  139ab4:	e3a01014 	mov	r1, #20
  139ab8:	e59f0008 	ldr	r0, [pc, #8]	; 139ac8 <syscall_getgroups32+0x18>
  139abc:	ebfffb95 	bl	138918 <syscall_trace>
  139ac0:	e3a00000 	mov	r0, #0
  139ac4:	e8bd8010 	pop	{r4, pc}
  139ac8:	0014acb4 	.word	0x0014acb4

00139acc <syscall_setregid32>:
  139acc:	e92d4010 	push	{r4, lr}
  139ad0:	e3a01013 	mov	r1, #19
  139ad4:	e59f0008 	ldr	r0, [pc, #8]	; 139ae4 <syscall_setregid32+0x18>
  139ad8:	ebfffb8e 	bl	138918 <syscall_trace>
  139adc:	e3a00000 	mov	r0, #0
  139ae0:	e8bd8010 	pop	{r4, pc}
  139ae4:	0014aca0 	.word	0x0014aca0

00139ae8 <syscall_setreuid32>:
  139ae8:	e92d4010 	push	{r4, lr}
  139aec:	e3a01013 	mov	r1, #19
  139af0:	e59f0008 	ldr	r0, [pc, #8]	; 139b00 <syscall_setreuid32+0x18>
  139af4:	ebfffb87 	bl	138918 <syscall_trace>
  139af8:	e3a00000 	mov	r0, #0
  139afc:	e8bd8010 	pop	{r4, pc}
  139b00:	0014ac8c 	.word	0x0014ac8c

00139b04 <syscall_getegid32>:
  139b04:	e92d4010 	push	{r4, lr}
  139b08:	e3a01012 	mov	r1, #18
  139b0c:	e59f0008 	ldr	r0, [pc, #8]	; 139b1c <syscall_getegid32+0x18>
  139b10:	ebfffb80 	bl	138918 <syscall_trace>
  139b14:	e3a00000 	mov	r0, #0
  139b18:	e8bd8010 	pop	{r4, pc}
  139b1c:	0014ac78 	.word	0x0014ac78

00139b20 <syscall_geteuid32>:
  139b20:	e92d4010 	push	{r4, lr}
  139b24:	e3a01012 	mov	r1, #18
  139b28:	e59f0008 	ldr	r0, [pc, #8]	; 139b38 <syscall_geteuid32+0x18>
  139b2c:	ebfffb79 	bl	138918 <syscall_trace>
  139b30:	e3a00000 	mov	r0, #0
  139b34:	e8bd8010 	pop	{r4, pc}
  139b38:	0014ac64 	.word	0x0014ac64

00139b3c <syscall_getgid32>:
  139b3c:	e92d4010 	push	{r4, lr}
  139b40:	e3a01011 	mov	r1, #17
  139b44:	e59f0008 	ldr	r0, [pc, #8]	; 139b54 <syscall_getgid32+0x18>
  139b48:	ebfffb72 	bl	138918 <syscall_trace>
  139b4c:	e3a00000 	mov	r0, #0
  139b50:	e8bd8010 	pop	{r4, pc}
  139b54:	0014ac50 	.word	0x0014ac50

00139b58 <syscall_getuid32>:
  139b58:	e92d4010 	push	{r4, lr}
  139b5c:	e3a01011 	mov	r1, #17
  139b60:	e59f0008 	ldr	r0, [pc, #8]	; 139b70 <syscall_getuid32+0x18>
  139b64:	ebfffb6b 	bl	138918 <syscall_trace>
  139b68:	e3a00000 	mov	r0, #0
  139b6c:	e8bd8010 	pop	{r4, pc}
  139b70:	0014ac3c 	.word	0x0014ac3c

00139b74 <syscall_lchown32>:
  139b74:	e92d4010 	push	{r4, lr}
  139b78:	e3a01011 	mov	r1, #17
  139b7c:	e59f0008 	ldr	r0, [pc, #8]	; 139b8c <syscall_lchown32+0x18>
  139b80:	ebfffb64 	bl	138918 <syscall_trace>
  139b84:	e3a00000 	mov	r0, #0
  139b88:	e8bd8010 	pop	{r4, pc}
  139b8c:	0014ac28 	.word	0x0014ac28

00139b90 <syscall_ftruncate64>:
  139b90:	e92d4010 	push	{r4, lr}
  139b94:	e3a01014 	mov	r1, #20
  139b98:	e59f0008 	ldr	r0, [pc, #8]	; 139ba8 <syscall_ftruncate64+0x18>
  139b9c:	ebfffb5d 	bl	138918 <syscall_trace>
  139ba0:	e3a00000 	mov	r0, #0
  139ba4:	e8bd8010 	pop	{r4, pc}
  139ba8:	0014abe4 	.word	0x0014abe4

00139bac <syscall_truncate64>:
  139bac:	e92d4010 	push	{r4, lr}
  139bb0:	e3a01013 	mov	r1, #19
  139bb4:	e59f0008 	ldr	r0, [pc, #8]	; 139bc4 <syscall_truncate64+0x18>
  139bb8:	ebfffb56 	bl	138918 <syscall_trace>
  139bbc:	e3a00000 	mov	r0, #0
  139bc0:	e8bd8010 	pop	{r4, pc}
  139bc4:	0014abd0 	.word	0x0014abd0

00139bc8 <syscall_sendfile>:
  139bc8:	e92d4010 	push	{r4, lr}
  139bcc:	e3a01011 	mov	r1, #17
  139bd0:	e59f0008 	ldr	r0, [pc, #8]	; 139be0 <syscall_sendfile+0x18>
  139bd4:	ebfffb4f 	bl	138918 <syscall_trace>
  139bd8:	e3a00000 	mov	r0, #0
  139bdc:	e8bd8010 	pop	{r4, pc}
  139be0:	0014ab88 	.word	0x0014ab88

00139be4 <syscall_sigaltstack>:
  139be4:	e92d4010 	push	{r4, lr}
  139be8:	e3a01014 	mov	r1, #20
  139bec:	e59f0008 	ldr	r0, [pc, #8]	; 139bfc <syscall_sigaltstack+0x18>
  139bf0:	ebfffb48 	bl	138918 <syscall_trace>
  139bf4:	e3a00000 	mov	r0, #0
  139bf8:	e8bd8010 	pop	{r4, pc}
  139bfc:	0014ab74 	.word	0x0014ab74

00139c00 <syscall_capset>:
  139c00:	e92d4010 	push	{r4, lr}
  139c04:	e3a0100f 	mov	r1, #15
  139c08:	e59f0008 	ldr	r0, [pc, #8]	; 139c18 <syscall_capset+0x18>
  139c0c:	ebfffb41 	bl	138918 <syscall_trace>
  139c10:	e3a00000 	mov	r0, #0
  139c14:	e8bd8010 	pop	{r4, pc}
  139c18:	0014ab64 	.word	0x0014ab64

00139c1c <syscall_capget>:
  139c1c:	e92d4010 	push	{r4, lr}
  139c20:	e3a0100f 	mov	r1, #15
  139c24:	e59f0008 	ldr	r0, [pc, #8]	; 139c34 <syscall_capget+0x18>
  139c28:	ebfffb3a 	bl	138918 <syscall_trace>
  139c2c:	e3a00000 	mov	r0, #0
  139c30:	e8bd8010 	pop	{r4, pc}
  139c34:	0014ab54 	.word	0x0014ab54

00139c38 <syscall_chown>:
  139c38:	e92d4010 	push	{r4, lr}
  139c3c:	e3a0100e 	mov	r1, #14
  139c40:	e59f0008 	ldr	r0, [pc, #8]	; 139c50 <syscall_chown+0x18>
  139c44:	ebfffb33 	bl	138918 <syscall_trace>
  139c48:	e3a00000 	mov	r0, #0
  139c4c:	e8bd8010 	pop	{r4, pc}
  139c50:	0014ab34 	.word	0x0014ab34

00139c54 <syscall_pwrite64>:
  139c54:	e92d4010 	push	{r4, lr}
  139c58:	e3a01011 	mov	r1, #17
  139c5c:	e59f0008 	ldr	r0, [pc, #8]	; 139c6c <syscall_pwrite64+0x18>
  139c60:	ebfffb2c 	bl	138918 <syscall_trace>
  139c64:	e3a00000 	mov	r0, #0
  139c68:	e8bd8010 	pop	{r4, pc}
  139c6c:	0014ab20 	.word	0x0014ab20

00139c70 <syscall_pread64>:
  139c70:	e92d4010 	push	{r4, lr}
  139c74:	e3a01010 	mov	r1, #16
  139c78:	e59f0008 	ldr	r0, [pc, #8]	; 139c88 <syscall_pread64+0x18>
  139c7c:	ebfffb25 	bl	138918 <syscall_trace>
  139c80:	e3a00000 	mov	r0, #0
  139c84:	e8bd8010 	pop	{r4, pc}
  139c88:	0014ab10 	.word	0x0014ab10

00139c8c <syscall_rt_sigsuspend>:
  139c8c:	e92d4010 	push	{r4, lr}
  139c90:	e3a01016 	mov	r1, #22
  139c94:	e59f0008 	ldr	r0, [pc, #8]	; 139ca4 <syscall_rt_sigsuspend+0x18>
  139c98:	ebfffb1e 	bl	138918 <syscall_trace>
  139c9c:	e3a00000 	mov	r0, #0
  139ca0:	e8bd8010 	pop	{r4, pc}
  139ca4:	0014aaf8 	.word	0x0014aaf8

00139ca8 <syscall_rt_sigqueueinfo>:
  139ca8:	e92d4010 	push	{r4, lr}
  139cac:	e3a01018 	mov	r1, #24
  139cb0:	e59f0008 	ldr	r0, [pc, #8]	; 139cc0 <syscall_rt_sigqueueinfo+0x18>
  139cb4:	ebfffb17 	bl	138918 <syscall_trace>
  139cb8:	e3a00000 	mov	r0, #0
  139cbc:	e8bd8010 	pop	{r4, pc}
  139cc0:	0014aae0 	.word	0x0014aae0

00139cc4 <syscall_rt_sigtimedwait>:
  139cc4:	e92d4010 	push	{r4, lr}
  139cc8:	e3a01018 	mov	r1, #24
  139ccc:	e59f0008 	ldr	r0, [pc, #8]	; 139cdc <syscall_rt_sigtimedwait+0x18>
  139cd0:	ebfffb10 	bl	138918 <syscall_trace>
  139cd4:	e3a00000 	mov	r0, #0
  139cd8:	e8bd8010 	pop	{r4, pc}
  139cdc:	0014aac8 	.word	0x0014aac8

00139ce0 <syscall_rt_sigpending>:
  139ce0:	e92d4010 	push	{r4, lr}
  139ce4:	e3a01016 	mov	r1, #22
  139ce8:	e59f0008 	ldr	r0, [pc, #8]	; 139cf8 <syscall_rt_sigpending+0x18>
  139cec:	ebfffb09 	bl	138918 <syscall_trace>
  139cf0:	e3a00000 	mov	r0, #0
  139cf4:	e8bd8010 	pop	{r4, pc}
  139cf8:	0014aab0 	.word	0x0014aab0

00139cfc <syscall_rt_sigreturn>:
  139cfc:	e92d4010 	push	{r4, lr}
  139d00:	e3a01015 	mov	r1, #21
  139d04:	e59f0008 	ldr	r0, [pc, #8]	; 139d14 <syscall_rt_sigreturn+0x18>
  139d08:	ebfffb02 	bl	138918 <syscall_trace>
  139d0c:	e3a00000 	mov	r0, #0
  139d10:	e8bd8010 	pop	{r4, pc}
  139d14:	0014aa68 	.word	0x0014aa68

00139d18 <syscall_prctl>:
  139d18:	e92d4010 	push	{r4, lr}
  139d1c:	e3a0100e 	mov	r1, #14
  139d20:	e59f0008 	ldr	r0, [pc, #8]	; 139d30 <syscall_prctl+0x18>
  139d24:	ebfffafb 	bl	138918 <syscall_trace>
  139d28:	e3a00000 	mov	r0, #0
  139d2c:	e8bd8010 	pop	{r4, pc}
  139d30:	0014aa58 	.word	0x0014aa58

00139d34 <syscall_getresgid>:
  139d34:	e92d4010 	push	{r4, lr}
  139d38:	e3a01012 	mov	r1, #18
  139d3c:	e59f0008 	ldr	r0, [pc, #8]	; 139d4c <syscall_getresgid+0x18>
  139d40:	ebfffaf4 	bl	138918 <syscall_trace>
  139d44:	e3a00000 	mov	r0, #0
  139d48:	e8bd8010 	pop	{r4, pc}
  139d4c:	0014aa44 	.word	0x0014aa44

00139d50 <syscall_setresgid>:
  139d50:	e92d4010 	push	{r4, lr}
  139d54:	e3a01012 	mov	r1, #18
  139d58:	e59f0008 	ldr	r0, [pc, #8]	; 139d68 <syscall_setresgid+0x18>
  139d5c:	ebfffaed 	bl	138918 <syscall_trace>
  139d60:	e3a00000 	mov	r0, #0
  139d64:	e8bd8010 	pop	{r4, pc}
  139d68:	0014aa30 	.word	0x0014aa30

00139d6c <syscall_nfsservctl>:
  139d6c:	e92d4010 	push	{r4, lr}
  139d70:	e3a01013 	mov	r1, #19
  139d74:	e59f0008 	ldr	r0, [pc, #8]	; 139d84 <syscall_nfsservctl+0x18>
  139d78:	ebfffae6 	bl	138918 <syscall_trace>
  139d7c:	e3a00000 	mov	r0, #0
  139d80:	e8bd8010 	pop	{r4, pc}
  139d84:	0014aa1c 	.word	0x0014aa1c

00139d88 <syscall_getresuid>:
  139d88:	e92d4010 	push	{r4, lr}
  139d8c:	e3a01012 	mov	r1, #18
  139d90:	e59f0008 	ldr	r0, [pc, #8]	; 139da0 <syscall_getresuid+0x18>
  139d94:	ebfffadf 	bl	138918 <syscall_trace>
  139d98:	e3a00000 	mov	r0, #0
  139d9c:	e8bd8010 	pop	{r4, pc}
  139da0:	0014a9f8 	.word	0x0014a9f8

00139da4 <syscall_setresuid>:
  139da4:	e92d4010 	push	{r4, lr}
  139da8:	e3a01012 	mov	r1, #18
  139dac:	e59f0008 	ldr	r0, [pc, #8]	; 139dbc <syscall_setresuid+0x18>
  139db0:	ebfffad8 	bl	138918 <syscall_trace>
  139db4:	e3a00000 	mov	r0, #0
  139db8:	e8bd8010 	pop	{r4, pc}
  139dbc:	0014a9e4 	.word	0x0014a9e4

00139dc0 <syscall_sched_rr_get_interval>:
  139dc0:	e92d4010 	push	{r4, lr}
  139dc4:	e3a0101e 	mov	r1, #30
  139dc8:	e59f0008 	ldr	r0, [pc, #8]	; 139dd8 <syscall_sched_rr_get_interval+0x18>
  139dcc:	ebfffad1 	bl	138918 <syscall_trace>
  139dd0:	e3a00000 	mov	r0, #0
  139dd4:	e8bd8010 	pop	{r4, pc}
  139dd8:	0014a9a0 	.word	0x0014a9a0

00139ddc <syscall_sched_yield>:
  139ddc:	e92d4010 	push	{r4, lr}
  139de0:	e3a01014 	mov	r1, #20
  139de4:	e59f0008 	ldr	r0, [pc, #8]	; 139df4 <syscall_sched_yield+0x18>
  139de8:	ebfffaca 	bl	138918 <syscall_trace>
  139dec:	e3a00000 	mov	r0, #0
  139df0:	e8bd8010 	pop	{r4, pc}
  139df4:	0014a94c 	.word	0x0014a94c

00139df8 <syscall_munlockall>:
  139df8:	e92d4010 	push	{r4, lr}
  139dfc:	e3a01013 	mov	r1, #19
  139e00:	e59f0008 	ldr	r0, [pc, #8]	; 139e10 <syscall_munlockall+0x18>
  139e04:	ebfffac3 	bl	138918 <syscall_trace>
  139e08:	e3a00000 	mov	r0, #0
  139e0c:	e8bd8010 	pop	{r4, pc}
  139e10:	0014a8d0 	.word	0x0014a8d0

00139e14 <syscall_mlockall>:
  139e14:	e92d4010 	push	{r4, lr}
  139e18:	e3a01011 	mov	r1, #17
  139e1c:	e59f0008 	ldr	r0, [pc, #8]	; 139e2c <syscall_mlockall+0x18>
  139e20:	ebfffabc 	bl	138918 <syscall_trace>
  139e24:	e3a00000 	mov	r0, #0
  139e28:	e8bd8010 	pop	{r4, pc}
  139e2c:	0014a8bc 	.word	0x0014a8bc

00139e30 <syscall_munlock>:
  139e30:	e92d4010 	push	{r4, lr}
  139e34:	e3a01010 	mov	r1, #16
  139e38:	e59f0008 	ldr	r0, [pc, #8]	; 139e48 <syscall_munlock+0x18>
  139e3c:	ebfffab5 	bl	138918 <syscall_trace>
  139e40:	e3a00000 	mov	r0, #0
  139e44:	e8bd8010 	pop	{r4, pc}
  139e48:	0014a8ac 	.word	0x0014a8ac

00139e4c <syscall_mlock>:
  139e4c:	e92d4010 	push	{r4, lr}
  139e50:	e3a0100e 	mov	r1, #14
  139e54:	e59f0008 	ldr	r0, [pc, #8]	; 139e64 <syscall_mlock+0x18>
  139e58:	ebfffaae 	bl	138918 <syscall_trace>
  139e5c:	e3a00000 	mov	r0, #0
  139e60:	e8bd8010 	pop	{r4, pc}
  139e64:	0014a89c 	.word	0x0014a89c

00139e68 <syscall__sysctl>:
  139e68:	e92d4010 	push	{r4, lr}
  139e6c:	e3a01010 	mov	r1, #16
  139e70:	e59f0008 	ldr	r0, [pc, #8]	; 139e80 <syscall__sysctl+0x18>
  139e74:	ebfffaa7 	bl	138918 <syscall_trace>
  139e78:	e3a00000 	mov	r0, #0
  139e7c:	e8bd8010 	pop	{r4, pc}
  139e80:	0014a88c 	.word	0x0014a88c

00139e84 <syscall_fdatasync>:
  139e84:	e92d4010 	push	{r4, lr}
  139e88:	e3a01012 	mov	r1, #18
  139e8c:	e59f0008 	ldr	r0, [pc, #8]	; 139e9c <syscall_fdatasync+0x18>
  139e90:	ebfffaa0 	bl	138918 <syscall_trace>
  139e94:	e3a00000 	mov	r0, #0
  139e98:	e8bd8010 	pop	{r4, pc}
  139e9c:	0014a878 	.word	0x0014a878

00139ea0 <syscall_getsid>:
  139ea0:	e92d4010 	push	{r4, lr}
  139ea4:	e3a0100f 	mov	r1, #15
  139ea8:	e59f0008 	ldr	r0, [pc, #8]	; 139eb8 <syscall_getsid+0x18>
  139eac:	ebfffa99 	bl	138918 <syscall_trace>
  139eb0:	e3a00000 	mov	r0, #0
  139eb4:	e8bd8010 	pop	{r4, pc}
  139eb8:	0014a868 	.word	0x0014a868

00139ebc <syscall_msync>:
  139ebc:	e92d4010 	push	{r4, lr}
  139ec0:	e3a0100e 	mov	r1, #14
  139ec4:	e59f0008 	ldr	r0, [pc, #8]	; 139ed4 <syscall_msync+0x18>
  139ec8:	ebfffa92 	bl	138918 <syscall_trace>
  139ecc:	e3a00000 	mov	r0, #0
  139ed0:	e8bd8010 	pop	{r4, pc}
  139ed4:	0014a838 	.word	0x0014a838

00139ed8 <syscall_flock>:
  139ed8:	e92d4010 	push	{r4, lr}
  139edc:	e3a0100e 	mov	r1, #14
  139ee0:	e59f0008 	ldr	r0, [pc, #8]	; 139ef0 <syscall_flock+0x18>
  139ee4:	ebfffa8b 	bl	138918 <syscall_trace>
  139ee8:	e3a00000 	mov	r0, #0
  139eec:	e8bd8010 	pop	{r4, pc}
  139ef0:	0014a828 	.word	0x0014a828

00139ef4 <syscall_setfsgid>:
  139ef4:	e92d4010 	push	{r4, lr}
  139ef8:	e3a01011 	mov	r1, #17
  139efc:	e59f0008 	ldr	r0, [pc, #8]	; 139f0c <syscall_setfsgid+0x18>
  139f00:	ebfffa84 	bl	138918 <syscall_trace>
  139f04:	e3a00000 	mov	r0, #0
  139f08:	e8bd8010 	pop	{r4, pc}
  139f0c:	0014a7dc 	.word	0x0014a7dc

00139f10 <syscall_setfsuid>:
  139f10:	e92d4010 	push	{r4, lr}
  139f14:	e3a01011 	mov	r1, #17
  139f18:	e59f0008 	ldr	r0, [pc, #8]	; 139f28 <syscall_setfsuid+0x18>
  139f1c:	ebfffa7d 	bl	138918 <syscall_trace>
  139f20:	e3a00000 	mov	r0, #0
  139f24:	e8bd8010 	pop	{r4, pc}
  139f28:	0014a7c8 	.word	0x0014a7c8

00139f2c <syscall_personality>:
  139f2c:	e92d4010 	push	{r4, lr}
  139f30:	e3a01014 	mov	r1, #20
  139f34:	e59f0008 	ldr	r0, [pc, #8]	; 139f44 <syscall_personality+0x18>
  139f38:	ebfffa76 	bl	138918 <syscall_trace>
  139f3c:	e3a00000 	mov	r0, #0
  139f40:	e8bd8010 	pop	{r4, pc}
  139f44:	0014a7b4 	.word	0x0014a7b4

00139f48 <syscall_sysfs>:
  139f48:	e92d4010 	push	{r4, lr}
  139f4c:	e3a0100e 	mov	r1, #14
  139f50:	e59f0008 	ldr	r0, [pc, #8]	; 139f60 <syscall_sysfs+0x18>
  139f54:	ebfffa6f 	bl	138918 <syscall_trace>
  139f58:	e3a00000 	mov	r0, #0
  139f5c:	e8bd8010 	pop	{r4, pc}
  139f60:	0014a7a4 	.word	0x0014a7a4

00139f64 <syscall_bdflush>:
  139f64:	e92d4010 	push	{r4, lr}
  139f68:	e3a01010 	mov	r1, #16
  139f6c:	e59f0008 	ldr	r0, [pc, #8]	; 139f7c <syscall_bdflush+0x18>
  139f70:	ebfffa68 	bl	138918 <syscall_trace>
  139f74:	e3a00000 	mov	r0, #0
  139f78:	e8bd8010 	pop	{r4, pc}
  139f7c:	0014a794 	.word	0x0014a794

00139f80 <syscall_fchdir>:
  139f80:	e92d4010 	push	{r4, lr}
  139f84:	e3a0100f 	mov	r1, #15
  139f88:	e59f0008 	ldr	r0, [pc, #8]	; 139f98 <syscall_fchdir+0x18>
  139f8c:	ebfffa61 	bl	138918 <syscall_trace>
  139f90:	e3a00000 	mov	r0, #0
  139f94:	e8bd8010 	pop	{r4, pc}
  139f98:	0014a784 	.word	0x0014a784

00139f9c <syscall_getpgid>:
  139f9c:	e92d4010 	push	{r4, lr}
  139fa0:	e3a01010 	mov	r1, #16
  139fa4:	e59f0008 	ldr	r0, [pc, #8]	; 139fb4 <syscall_getpgid+0x18>
  139fa8:	ebfffa5a 	bl	138918 <syscall_trace>
  139fac:	e3a00000 	mov	r0, #0
  139fb0:	e8bd8010 	pop	{r4, pc}
  139fb4:	0014a774 	.word	0x0014a774

00139fb8 <syscall_quotactl>:
  139fb8:	e92d4010 	push	{r4, lr}
  139fbc:	e3a01011 	mov	r1, #17
  139fc0:	e59f0008 	ldr	r0, [pc, #8]	; 139fd0 <syscall_quotactl+0x18>
  139fc4:	ebfffa53 	bl	138918 <syscall_trace>
  139fc8:	e3a00000 	mov	r0, #0
  139fcc:	e8bd8010 	pop	{r4, pc}
  139fd0:	0014a760 	.word	0x0014a760

00139fd4 <syscall_delete_module>:
  139fd4:	e92d4010 	push	{r4, lr}
  139fd8:	e3a01016 	mov	r1, #22
  139fdc:	e59f0008 	ldr	r0, [pc, #8]	; 139fec <syscall_delete_module+0x18>
  139fe0:	ebfffa4c 	bl	138918 <syscall_trace>
  139fe4:	e3a00000 	mov	r0, #0
  139fe8:	e8bd8010 	pop	{r4, pc}
  139fec:	0014a748 	.word	0x0014a748

00139ff0 <syscall_init_module>:
  139ff0:	e92d4010 	push	{r4, lr}
  139ff4:	e3a01014 	mov	r1, #20
  139ff8:	e59f0008 	ldr	r0, [pc, #8]	; 13a008 <syscall_init_module+0x18>
  139ffc:	ebfffa45 	bl	138918 <syscall_trace>
  13a000:	e3a00000 	mov	r0, #0
  13a004:	e8bd8010 	pop	{r4, pc}
  13a008:	0014a734 	.word	0x0014a734

0013a00c <syscall_mprotect>:
  13a00c:	e92d4010 	push	{r4, lr}
  13a010:	e3a01011 	mov	r1, #17
  13a014:	e59f0008 	ldr	r0, [pc, #8]	; 13a024 <syscall_mprotect+0x18>
  13a018:	ebfffa3e 	bl	138918 <syscall_trace>
  13a01c:	e3a00000 	mov	r0, #0
  13a020:	e8bd8010 	pop	{r4, pc}
  13a024:	0014a70c 	.word	0x0014a70c

0013a028 <syscall_adjtimex>:
  13a028:	e92d4010 	push	{r4, lr}
  13a02c:	e3a01011 	mov	r1, #17
  13a030:	e59f0008 	ldr	r0, [pc, #8]	; 13a040 <syscall_adjtimex+0x18>
  13a034:	ebfffa37 	bl	138918 <syscall_trace>
  13a038:	e3a00000 	mov	r0, #0
  13a03c:	e8bd8010 	pop	{r4, pc}
  13a040:	0014a6f8 	.word	0x0014a6f8

0013a044 <syscall_uname>:
  13a044:	e92d4010 	push	{r4, lr}
  13a048:	e3a0100e 	mov	r1, #14
  13a04c:	e59f0008 	ldr	r0, [pc, #8]	; 13a05c <syscall_uname+0x18>
  13a050:	ebfffa30 	bl	138918 <syscall_trace>
  13a054:	e3a00000 	mov	r0, #0
  13a058:	e8bd8010 	pop	{r4, pc}
  13a05c:	0014a6e8 	.word	0x0014a6e8

0013a060 <syscall_setdomainname>:
  13a060:	e92d4010 	push	{r4, lr}
  13a064:	e3a01016 	mov	r1, #22
  13a068:	e59f0008 	ldr	r0, [pc, #8]	; 13a078 <syscall_setdomainname+0x18>
  13a06c:	ebfffa29 	bl	138918 <syscall_trace>
  13a070:	e3a00000 	mov	r0, #0
  13a074:	e8bd8010 	pop	{r4, pc}
  13a078:	0014a6d0 	.word	0x0014a6d0

0013a07c <syscall_clone>:
  13a07c:	e92d4010 	push	{r4, lr}
  13a080:	e3a0100e 	mov	r1, #14
  13a084:	e59f0008 	ldr	r0, [pc, #8]	; 13a094 <syscall_clone+0x18>
  13a088:	ebfffa22 	bl	138918 <syscall_trace>
  13a08c:	e3a00000 	mov	r0, #0
  13a090:	e8bd8010 	pop	{r4, pc}
  13a094:	0014a6c0 	.word	0x0014a6c0

0013a098 <syscall_sigreturn>:
  13a098:	e92d4010 	push	{r4, lr}
  13a09c:	e3a01012 	mov	r1, #18
  13a0a0:	e59f0008 	ldr	r0, [pc, #8]	; 13a0b0 <syscall_sigreturn+0x18>
  13a0a4:	ebfffa1b 	bl	138918 <syscall_trace>
  13a0a8:	e3a00000 	mov	r0, #0
  13a0ac:	e8bd8010 	pop	{r4, pc}
  13a0b0:	0014a6ac 	.word	0x0014a6ac

0013a0b4 <syscall_sysinfo>:
  13a0b4:	e92d4010 	push	{r4, lr}
  13a0b8:	e3a01010 	mov	r1, #16
  13a0bc:	e59f0008 	ldr	r0, [pc, #8]	; 13a0cc <syscall_sysinfo+0x18>
  13a0c0:	ebfffa14 	bl	138918 <syscall_trace>
  13a0c4:	e3a00000 	mov	r0, #0
  13a0c8:	e8bd8010 	pop	{r4, pc}
  13a0cc:	0014a68c 	.word	0x0014a68c

0013a0d0 <syscall_swapoff>:
  13a0d0:	e92d4010 	push	{r4, lr}
  13a0d4:	e3a01010 	mov	r1, #16
  13a0d8:	e59f0008 	ldr	r0, [pc, #8]	; 13a0e8 <syscall_swapoff+0x18>
  13a0dc:	ebfffa0d 	bl	138918 <syscall_trace>
  13a0e0:	e3a00000 	mov	r0, #0
  13a0e4:	e8bd8010 	pop	{r4, pc}
  13a0e8:	0014a67c 	.word	0x0014a67c

0013a0ec <syscall_wait4>:
  13a0ec:	e92d4010 	push	{r4, lr}
  13a0f0:	e3a0100e 	mov	r1, #14
  13a0f4:	e59f0008 	ldr	r0, [pc, #8]	; 13a104 <syscall_wait4+0x18>
  13a0f8:	ebfffa06 	bl	138918 <syscall_trace>
  13a0fc:	e3a00000 	mov	r0, #0
  13a100:	e8bd8010 	pop	{r4, pc}
  13a104:	0014a66c 	.word	0x0014a66c

0013a108 <syscall_vhangup>:
  13a108:	e92d4010 	push	{r4, lr}
  13a10c:	e3a01010 	mov	r1, #16
  13a110:	e59f0008 	ldr	r0, [pc, #8]	; 13a120 <syscall_vhangup+0x18>
  13a114:	ebfff9ff 	bl	138918 <syscall_trace>
  13a118:	e3a00000 	mov	r0, #0
  13a11c:	e8bd8010 	pop	{r4, pc}
  13a120:	0014a65c 	.word	0x0014a65c

0013a124 <syscall_fstat>:
  13a124:	e92d4010 	push	{r4, lr}
  13a128:	e3a0100e 	mov	r1, #14
  13a12c:	e59f0008 	ldr	r0, [pc, #8]	; 13a13c <syscall_fstat+0x18>
  13a130:	ebfff9f8 	bl	138918 <syscall_trace>
  13a134:	e3a00000 	mov	r0, #0
  13a138:	e8bd8010 	pop	{r4, pc}
  13a13c:	0014a64c 	.word	0x0014a64c

0013a140 <syscall_getitimer>:
  13a140:	e92d4010 	push	{r4, lr}
  13a144:	e3a01012 	mov	r1, #18
  13a148:	e59f0008 	ldr	r0, [pc, #8]	; 13a158 <syscall_getitimer+0x18>
  13a14c:	ebfff9f1 	bl	138918 <syscall_trace>
  13a150:	e3a00000 	mov	r0, #0
  13a154:	e8bd8010 	pop	{r4, pc}
  13a158:	0014a618 	.word	0x0014a618

0013a15c <syscall_setitimer>:
  13a15c:	e92d4010 	push	{r4, lr}
  13a160:	e3a01012 	mov	r1, #18
  13a164:	e59f0008 	ldr	r0, [pc, #8]	; 13a174 <syscall_setitimer+0x18>
  13a168:	ebfff9ea 	bl	138918 <syscall_trace>
  13a16c:	e3a00000 	mov	r0, #0
  13a170:	e8bd8010 	pop	{r4, pc}
  13a174:	0014a604 	.word	0x0014a604

0013a178 <syscall_syslog>:
  13a178:	e92d4010 	push	{r4, lr}
  13a17c:	e3a0100f 	mov	r1, #15
  13a180:	e59f0008 	ldr	r0, [pc, #8]	; 13a190 <syscall_syslog+0x18>
  13a184:	ebfff9e3 	bl	138918 <syscall_trace>
  13a188:	e3a00000 	mov	r0, #0
  13a18c:	e8bd8010 	pop	{r4, pc}
  13a190:	0014a5f4 	.word	0x0014a5f4

0013a194 <syscall_fstatfs>:
  13a194:	e92d4010 	push	{r4, lr}
  13a198:	e3a01010 	mov	r1, #16
  13a19c:	e59f0008 	ldr	r0, [pc, #8]	; 13a1ac <syscall_fstatfs+0x18>
  13a1a0:	ebfff9dc 	bl	138918 <syscall_trace>
  13a1a4:	e3a00000 	mov	r0, #0
  13a1a8:	e8bd8010 	pop	{r4, pc}
  13a1ac:	0014a5e4 	.word	0x0014a5e4

0013a1b0 <syscall_statfs>:
  13a1b0:	e92d4010 	push	{r4, lr}
  13a1b4:	e3a0100f 	mov	r1, #15
  13a1b8:	e59f0008 	ldr	r0, [pc, #8]	; 13a1c8 <syscall_statfs+0x18>
  13a1bc:	ebfff9d5 	bl	138918 <syscall_trace>
  13a1c0:	e3a00000 	mov	r0, #0
  13a1c4:	e8bd8010 	pop	{r4, pc}
  13a1c8:	0014a5d4 	.word	0x0014a5d4

0013a1cc <syscall_setpriority>:
  13a1cc:	e92d4010 	push	{r4, lr}
  13a1d0:	e3a01014 	mov	r1, #20
  13a1d4:	e59f0008 	ldr	r0, [pc, #8]	; 13a1e4 <syscall_setpriority+0x18>
  13a1d8:	ebfff9ce 	bl	138918 <syscall_trace>
  13a1dc:	e3a00000 	mov	r0, #0
  13a1e0:	e8bd8010 	pop	{r4, pc}
  13a1e4:	0014a5c0 	.word	0x0014a5c0

0013a1e8 <syscall_getpriority>:
  13a1e8:	e92d4010 	push	{r4, lr}
  13a1ec:	e3a01014 	mov	r1, #20
  13a1f0:	e59f0008 	ldr	r0, [pc, #8]	; 13a200 <syscall_getpriority+0x18>
  13a1f4:	ebfff9c7 	bl	138918 <syscall_trace>
  13a1f8:	e3a00000 	mov	r0, #0
  13a1fc:	e8bd8010 	pop	{r4, pc}
  13a200:	0014a5ac 	.word	0x0014a5ac

0013a204 <syscall_fchown>:
  13a204:	e92d4010 	push	{r4, lr}
  13a208:	e3a0100f 	mov	r1, #15
  13a20c:	e59f0008 	ldr	r0, [pc, #8]	; 13a21c <syscall_fchown+0x18>
  13a210:	ebfff9c0 	bl	138918 <syscall_trace>
  13a214:	e3a00000 	mov	r0, #0
  13a218:	e8bd8010 	pop	{r4, pc}
  13a21c:	0014a59c 	.word	0x0014a59c

0013a220 <syscall_fchmod>:
  13a220:	e92d4010 	push	{r4, lr}
  13a224:	e3a0100f 	mov	r1, #15
  13a228:	e59f0008 	ldr	r0, [pc, #8]	; 13a238 <syscall_fchmod+0x18>
  13a22c:	ebfff9b9 	bl	138918 <syscall_trace>
  13a230:	e3a00000 	mov	r0, #0
  13a234:	e8bd8010 	pop	{r4, pc}
  13a238:	0014a58c 	.word	0x0014a58c

0013a23c <syscall_ftruncate>:
  13a23c:	e92d4010 	push	{r4, lr}
  13a240:	e3a01012 	mov	r1, #18
  13a244:	e59f0008 	ldr	r0, [pc, #8]	; 13a254 <syscall_ftruncate+0x18>
  13a248:	ebfff9b2 	bl	138918 <syscall_trace>
  13a24c:	e3a00000 	mov	r0, #0
  13a250:	e8bd8010 	pop	{r4, pc}
  13a254:	0014a578 	.word	0x0014a578

0013a258 <syscall_truncate>:
  13a258:	e92d4010 	push	{r4, lr}
  13a25c:	e3a01011 	mov	r1, #17
  13a260:	e59f0008 	ldr	r0, [pc, #8]	; 13a270 <syscall_truncate+0x18>
  13a264:	ebfff9ab 	bl	138918 <syscall_trace>
  13a268:	e3a00000 	mov	r0, #0
  13a26c:	e8bd8010 	pop	{r4, pc}
  13a270:	0014a564 	.word	0x0014a564

0013a274 <syscall_reboot>:
  13a274:	e92d4010 	push	{r4, lr}
  13a278:	e3a0100f 	mov	r1, #15
  13a27c:	e59f0008 	ldr	r0, [pc, #8]	; 13a28c <syscall_reboot+0x18>
  13a280:	ebfff9a4 	bl	138918 <syscall_trace>
  13a284:	e3a00000 	mov	r0, #0
  13a288:	e8bd8010 	pop	{r4, pc}
  13a28c:	0014a544 	.word	0x0014a544

0013a290 <syscall_swapon>:
  13a290:	e92d4010 	push	{r4, lr}
  13a294:	e3a0100f 	mov	r1, #15
  13a298:	e59f0008 	ldr	r0, [pc, #8]	; 13a2a8 <syscall_swapon+0x18>
  13a29c:	ebfff99d 	bl	138918 <syscall_trace>
  13a2a0:	e3a00000 	mov	r0, #0
  13a2a4:	e8bd8010 	pop	{r4, pc}
  13a2a8:	0014a534 	.word	0x0014a534

0013a2ac <syscall_uselib>:
  13a2ac:	e92d4010 	push	{r4, lr}
  13a2b0:	e3a0100f 	mov	r1, #15
  13a2b4:	e59f0008 	ldr	r0, [pc, #8]	; 13a2c4 <syscall_uselib+0x18>
  13a2b8:	ebfff996 	bl	138918 <syscall_trace>
  13a2bc:	e3a00000 	mov	r0, #0
  13a2c0:	e8bd8010 	pop	{r4, pc}
  13a2c4:	0014a524 	.word	0x0014a524

0013a2c8 <syscall_symlink>:
  13a2c8:	e92d4010 	push	{r4, lr}
  13a2cc:	e3a01010 	mov	r1, #16
  13a2d0:	e59f0008 	ldr	r0, [pc, #8]	; 13a2e0 <syscall_symlink+0x18>
  13a2d4:	ebfff98f 	bl	138918 <syscall_trace>
  13a2d8:	e3a00000 	mov	r0, #0
  13a2dc:	e8bd8010 	pop	{r4, pc}
  13a2e0:	0014a500 	.word	0x0014a500

0013a2e4 <syscall_setgroups>:
  13a2e4:	e92d4010 	push	{r4, lr}
  13a2e8:	e3a01012 	mov	r1, #18
  13a2ec:	e59f0008 	ldr	r0, [pc, #8]	; 13a2fc <syscall_setgroups+0x18>
  13a2f0:	ebfff988 	bl	138918 <syscall_trace>
  13a2f4:	e3a00000 	mov	r0, #0
  13a2f8:	e8bd8010 	pop	{r4, pc}
  13a2fc:	0014a4ec 	.word	0x0014a4ec

0013a300 <syscall_getgroups>:
  13a300:	e92d4010 	push	{r4, lr}
  13a304:	e3a01012 	mov	r1, #18
  13a308:	e59f0008 	ldr	r0, [pc, #8]	; 13a318 <syscall_getgroups+0x18>
  13a30c:	ebfff981 	bl	138918 <syscall_trace>
  13a310:	e3a00000 	mov	r0, #0
  13a314:	e8bd8010 	pop	{r4, pc}
  13a318:	0014a4d8 	.word	0x0014a4d8

0013a31c <syscall_settimeofday>:
  13a31c:	e92d4010 	push	{r4, lr}
  13a320:	e3a01015 	mov	r1, #21
  13a324:	e59f0008 	ldr	r0, [pc, #8]	; 13a334 <syscall_settimeofday+0x18>
  13a328:	ebfff97a 	bl	138918 <syscall_trace>
  13a32c:	e3a00000 	mov	r0, #0
  13a330:	e8bd8010 	pop	{r4, pc}
  13a334:	0014a4c0 	.word	0x0014a4c0

0013a338 <syscall_gettimeofday>:
  13a338:	e92d4010 	push	{r4, lr}
  13a33c:	e3a01015 	mov	r1, #21
  13a340:	e59f0008 	ldr	r0, [pc, #8]	; 13a350 <syscall_gettimeofday+0x18>
  13a344:	ebfff973 	bl	138918 <syscall_trace>
  13a348:	e3a00000 	mov	r0, #0
  13a34c:	e8bd8010 	pop	{r4, pc}
  13a350:	0014a4a8 	.word	0x0014a4a8

0013a354 <syscall_getrusage>:
  13a354:	e92d4010 	push	{r4, lr}
  13a358:	e3a01012 	mov	r1, #18
  13a35c:	e59f0008 	ldr	r0, [pc, #8]	; 13a36c <syscall_getrusage+0x18>
  13a360:	ebfff96c 	bl	138918 <syscall_trace>
  13a364:	e3a00000 	mov	r0, #0
  13a368:	e8bd8010 	pop	{r4, pc}
  13a36c:	0014a494 	.word	0x0014a494

0013a370 <syscall_sethostname>:
  13a370:	e92d4010 	push	{r4, lr}
  13a374:	e3a01014 	mov	r1, #20
  13a378:	e59f0008 	ldr	r0, [pc, #8]	; 13a388 <syscall_sethostname+0x18>
  13a37c:	ebfff965 	bl	138918 <syscall_trace>
  13a380:	e3a00000 	mov	r0, #0
  13a384:	e8bd8010 	pop	{r4, pc}
  13a388:	0014a46c 	.word	0x0014a46c

0013a38c <syscall_sigpending>:
  13a38c:	e92d4010 	push	{r4, lr}
  13a390:	e3a01013 	mov	r1, #19
  13a394:	e59f0008 	ldr	r0, [pc, #8]	; 13a3a4 <syscall_sigpending+0x18>
  13a398:	ebfff95e 	bl	138918 <syscall_trace>
  13a39c:	e3a00000 	mov	r0, #0
  13a3a0:	e8bd8010 	pop	{r4, pc}
  13a3a4:	0014a458 	.word	0x0014a458

0013a3a8 <syscall_sigsuspend>:
  13a3a8:	e92d4010 	push	{r4, lr}
  13a3ac:	e3a01013 	mov	r1, #19
  13a3b0:	e59f0008 	ldr	r0, [pc, #8]	; 13a3c0 <syscall_sigsuspend+0x18>
  13a3b4:	ebfff957 	bl	138918 <syscall_trace>
  13a3b8:	e3a00000 	mov	r0, #0
  13a3bc:	e8bd8010 	pop	{r4, pc}
  13a3c0:	0014a444 	.word	0x0014a444

0013a3c4 <syscall_setregid>:
  13a3c4:	e92d4010 	push	{r4, lr}
  13a3c8:	e3a01011 	mov	r1, #17
  13a3cc:	e59f0008 	ldr	r0, [pc, #8]	; 13a3dc <syscall_setregid+0x18>
  13a3d0:	ebfff950 	bl	138918 <syscall_trace>
  13a3d4:	e3a00000 	mov	r0, #0
  13a3d8:	e8bd8010 	pop	{r4, pc}
  13a3dc:	0014a430 	.word	0x0014a430

0013a3e0 <syscall_setreuid>:
  13a3e0:	e92d4010 	push	{r4, lr}
  13a3e4:	e3a01011 	mov	r1, #17
  13a3e8:	e59f0008 	ldr	r0, [pc, #8]	; 13a3f8 <syscall_setreuid+0x18>
  13a3ec:	ebfff949 	bl	138918 <syscall_trace>
  13a3f0:	e3a00000 	mov	r0, #0
  13a3f4:	e8bd8010 	pop	{r4, pc}
  13a3f8:	0014a41c 	.word	0x0014a41c

0013a3fc <syscall_getpgrp>:
  13a3fc:	e92d4010 	push	{r4, lr}
  13a400:	e3a01010 	mov	r1, #16
  13a404:	e59f0008 	ldr	r0, [pc, #8]	; 13a414 <syscall_getpgrp+0x18>
  13a408:	ebfff942 	bl	138918 <syscall_trace>
  13a40c:	e3a00000 	mov	r0, #0
  13a410:	e8bd8010 	pop	{r4, pc}
  13a414:	0014a3e8 	.word	0x0014a3e8

0013a418 <syscall_getppid>:
  13a418:	e92d4010 	push	{r4, lr}
  13a41c:	e3a01010 	mov	r1, #16
  13a420:	e59f0008 	ldr	r0, [pc, #8]	; 13a430 <syscall_getppid+0x18>
  13a424:	ebfff93b 	bl	138918 <syscall_trace>
  13a428:	e3a00000 	mov	r0, #0
  13a42c:	e8bd8010 	pop	{r4, pc}
  13a430:	0014a3d8 	.word	0x0014a3d8

0013a434 <syscall_ustat>:
  13a434:	e92d4010 	push	{r4, lr}
  13a438:	e3a0100e 	mov	r1, #14
  13a43c:	e59f0008 	ldr	r0, [pc, #8]	; 13a44c <syscall_ustat+0x18>
  13a440:	ebfff934 	bl	138918 <syscall_trace>
  13a444:	e3a00000 	mov	r0, #0
  13a448:	e8bd8010 	pop	{r4, pc}
  13a44c:	0014a3b8 	.word	0x0014a3b8

0013a450 <syscall_chroot>:
  13a450:	e92d4010 	push	{r4, lr}
  13a454:	e3a0100f 	mov	r1, #15
  13a458:	e59f0008 	ldr	r0, [pc, #8]	; 13a468 <syscall_chroot+0x18>
  13a45c:	ebfff92d 	bl	138918 <syscall_trace>
  13a460:	e3a00000 	mov	r0, #0
  13a464:	e8bd8010 	pop	{r4, pc}
  13a468:	0014a3a8 	.word	0x0014a3a8

0013a46c <syscall_umask>:
  13a46c:	e92d4010 	push	{r4, lr}
  13a470:	e3a0100e 	mov	r1, #14
  13a474:	e59f0008 	ldr	r0, [pc, #8]	; 13a484 <syscall_umask+0x18>
  13a478:	ebfff926 	bl	138918 <syscall_trace>
  13a47c:	e3a00000 	mov	r0, #0
  13a480:	e8bd8010 	pop	{r4, pc}
  13a484:	0014a398 	.word	0x0014a398

0013a488 <syscall_setpgid>:
  13a488:	e92d4010 	push	{r4, lr}
  13a48c:	e3a01010 	mov	r1, #16
  13a490:	e59f0008 	ldr	r0, [pc, #8]	; 13a4a0 <syscall_setpgid+0x18>
  13a494:	ebfff91f 	bl	138918 <syscall_trace>
  13a498:	e3a00000 	mov	r0, #0
  13a49c:	e8bd8010 	pop	{r4, pc}
  13a4a0:	0014a388 	.word	0x0014a388

0013a4a4 <syscall_umount2>:
  13a4a4:	e92d4010 	push	{r4, lr}
  13a4a8:	e3a01010 	mov	r1, #16
  13a4ac:	e59f0008 	ldr	r0, [pc, #8]	; 13a4bc <syscall_umount2+0x18>
  13a4b0:	ebfff918 	bl	138918 <syscall_trace>
  13a4b4:	e3a00000 	mov	r0, #0
  13a4b8:	e8bd8010 	pop	{r4, pc}
  13a4bc:	0014a358 	.word	0x0014a358

0013a4c0 <syscall_acct>:
  13a4c0:	e92d4010 	push	{r4, lr}
  13a4c4:	e3a0100d 	mov	r1, #13
  13a4c8:	e59f0008 	ldr	r0, [pc, #8]	; 13a4d8 <syscall_acct+0x18>
  13a4cc:	ebfff911 	bl	138918 <syscall_trace>
  13a4d0:	e3a00000 	mov	r0, #0
  13a4d4:	e8bd8010 	pop	{r4, pc}
  13a4d8:	0014a348 	.word	0x0014a348

0013a4dc <syscall_getegid>:
  13a4dc:	e92d4010 	push	{r4, lr}
  13a4e0:	e3a01010 	mov	r1, #16
  13a4e4:	e59f0008 	ldr	r0, [pc, #8]	; 13a4f4 <syscall_getegid+0x18>
  13a4e8:	ebfff90a 	bl	138918 <syscall_trace>
  13a4ec:	e3a00000 	mov	r0, #0
  13a4f0:	e8bd8010 	pop	{r4, pc}
  13a4f4:	0014a338 	.word	0x0014a338

0013a4f8 <syscall_geteuid>:
  13a4f8:	e92d4010 	push	{r4, lr}
  13a4fc:	e3a01010 	mov	r1, #16
  13a500:	e59f0008 	ldr	r0, [pc, #8]	; 13a510 <syscall_geteuid+0x18>
  13a504:	ebfff903 	bl	138918 <syscall_trace>
  13a508:	e3a00000 	mov	r0, #0
  13a50c:	e8bd8010 	pop	{r4, pc}
  13a510:	0014a328 	.word	0x0014a328

0013a514 <syscall_getgid>:
  13a514:	e92d4010 	push	{r4, lr}
  13a518:	e3a0100f 	mov	r1, #15
  13a51c:	e59f0008 	ldr	r0, [pc, #8]	; 13a52c <syscall_getgid+0x18>
  13a520:	ebfff8fc 	bl	138918 <syscall_trace>
  13a524:	e3a00000 	mov	r0, #0
  13a528:	e8bd8010 	pop	{r4, pc}
  13a52c:	0014a318 	.word	0x0014a318

0013a530 <syscall_setgid>:
  13a530:	e92d4010 	push	{r4, lr}
  13a534:	e3a0100f 	mov	r1, #15
  13a538:	e59f0008 	ldr	r0, [pc, #8]	; 13a548 <syscall_setgid+0x18>
  13a53c:	ebfff8f5 	bl	138918 <syscall_trace>
  13a540:	e3a00000 	mov	r0, #0
  13a544:	e8bd8010 	pop	{r4, pc}
  13a548:	0014a308 	.word	0x0014a308

0013a54c <syscall_times>:
  13a54c:	e92d4010 	push	{r4, lr}
  13a550:	e3a0100e 	mov	r1, #14
  13a554:	e59f0008 	ldr	r0, [pc, #8]	; 13a564 <syscall_times+0x18>
  13a558:	ebfff8ee 	bl	138918 <syscall_trace>
  13a55c:	e3a00000 	mov	r0, #0
  13a560:	e8bd8010 	pop	{r4, pc}
  13a564:	0014a2ec 	.word	0x0014a2ec

0013a568 <syscall_sync>:
  13a568:	e92d4010 	push	{r4, lr}
  13a56c:	e3a0100d 	mov	r1, #13
  13a570:	e59f0008 	ldr	r0, [pc, #8]	; 13a580 <syscall_sync+0x18>
  13a574:	ebfff8e7 	bl	138918 <syscall_trace>
  13a578:	e3a00000 	mov	r0, #0
  13a57c:	e8bd8010 	pop	{r4, pc}
  13a580:	0014a280 	.word	0x0014a280

0013a584 <syscall_nice>:
  13a584:	e92d4010 	push	{r4, lr}
  13a588:	e3a0100d 	mov	r1, #13
  13a58c:	e59f0008 	ldr	r0, [pc, #8]	; 13a59c <syscall_nice+0x18>
  13a590:	ebfff8e0 	bl	138918 <syscall_trace>
  13a594:	e3a00000 	mov	r0, #0
  13a598:	e8bd8010 	pop	{r4, pc}
  13a59c:	0014a270 	.word	0x0014a270

0013a5a0 <syscall_pause>:
  13a5a0:	e92d4010 	push	{r4, lr}
  13a5a4:	e3a0100e 	mov	r1, #14
  13a5a8:	e59f0008 	ldr	r0, [pc, #8]	; 13a5b8 <syscall_pause+0x18>
  13a5ac:	ebfff8d9 	bl	138918 <syscall_trace>
  13a5b0:	e3a00000 	mov	r0, #0
  13a5b4:	e8bd8010 	pop	{r4, pc}
  13a5b8:	0014a250 	.word	0x0014a250

0013a5bc <syscall_ptrace>:
  13a5bc:	e92d4010 	push	{r4, lr}
  13a5c0:	e3a0100f 	mov	r1, #15
  13a5c4:	e59f0008 	ldr	r0, [pc, #8]	; 13a5d4 <syscall_ptrace+0x18>
  13a5c8:	ebfff8d2 	bl	138918 <syscall_trace>
  13a5cc:	e3a00000 	mov	r0, #0
  13a5d0:	e8bd8010 	pop	{r4, pc}
  13a5d4:	0014a240 	.word	0x0014a240

0013a5d8 <syscall_getuid>:
  13a5d8:	e92d4010 	push	{r4, lr}
  13a5dc:	e3a0100f 	mov	r1, #15
  13a5e0:	e59f0008 	ldr	r0, [pc, #8]	; 13a5f0 <syscall_getuid+0x18>
  13a5e4:	ebfff8cb 	bl	138918 <syscall_trace>
  13a5e8:	e3a00000 	mov	r0, #0
  13a5ec:	e8bd8010 	pop	{r4, pc}
  13a5f0:	0014a230 	.word	0x0014a230

0013a5f4 <syscall_setuid>:
  13a5f4:	e92d4010 	push	{r4, lr}
  13a5f8:	e3a0100f 	mov	r1, #15
  13a5fc:	e59f0008 	ldr	r0, [pc, #8]	; 13a60c <syscall_setuid+0x18>
  13a600:	ebfff8c4 	bl	138918 <syscall_trace>
  13a604:	e3a00000 	mov	r0, #0
  13a608:	e8bd8010 	pop	{r4, pc}
  13a60c:	0014a220 	.word	0x0014a220

0013a610 <syscall_mount>:
  13a610:	e92d4010 	push	{r4, lr}
  13a614:	e3a0100e 	mov	r1, #14
  13a618:	e59f0008 	ldr	r0, [pc, #8]	; 13a628 <syscall_mount+0x18>
  13a61c:	ebfff8bd 	bl	138918 <syscall_trace>
  13a620:	e3a00000 	mov	r0, #0
  13a624:	e8bd8010 	pop	{r4, pc}
  13a628:	0014a210 	.word	0x0014a210

0013a62c <syscall_lchown>:
  13a62c:	e92d4010 	push	{r4, lr}
  13a630:	e3a0100f 	mov	r1, #15
  13a634:	e59f0008 	ldr	r0, [pc, #8]	; 13a644 <syscall_lchown+0x18>
  13a638:	ebfff8b6 	bl	138918 <syscall_trace>
  13a63c:	e3a00000 	mov	r0, #0
  13a640:	e8bd8010 	pop	{r4, pc}
  13a644:	0014a1e0 	.word	0x0014a1e0

0013a648 <syscall_chmod>:
  13a648:	e92d4010 	push	{r4, lr}
  13a64c:	e3a0100e 	mov	r1, #14
  13a650:	e59f0008 	ldr	r0, [pc, #8]	; 13a660 <syscall_chmod+0x18>
  13a654:	ebfff8af 	bl	138918 <syscall_trace>
  13a658:	e3a00000 	mov	r0, #0
  13a65c:	e8bd8010 	pop	{r4, pc}
  13a660:	0014a1d0 	.word	0x0014a1d0

0013a664 <syscall_mknod>:
  13a664:	e92d4010 	push	{r4, lr}
  13a668:	e3a0100e 	mov	r1, #14
  13a66c:	e59f0008 	ldr	r0, [pc, #8]	; 13a67c <syscall_mknod+0x18>
  13a670:	ebfff8a8 	bl	138918 <syscall_trace>
  13a674:	e3a00000 	mov	r0, #0
  13a678:	e8bd8010 	pop	{r4, pc}
  13a67c:	0014a1c0 	.word	0x0014a1c0

0013a680 <syscall_link>:
  13a680:	e92d4010 	push	{r4, lr}
  13a684:	e3a0100d 	mov	r1, #13
  13a688:	e59f0008 	ldr	r0, [pc, #8]	; 13a698 <syscall_link+0x18>
  13a68c:	ebfff8a1 	bl	138918 <syscall_trace>
  13a690:	e3a00000 	mov	r0, #0
  13a694:	e8bd8010 	pop	{r4, pc}
  13a698:	0014a180 	.word	0x0014a180

0013a69c <syscall_creat>:
  13a69c:	e92d4010 	push	{r4, lr}
  13a6a0:	e3a0100e 	mov	r1, #14
  13a6a4:	e59f0008 	ldr	r0, [pc, #8]	; 13a6b4 <syscall_creat+0x18>
  13a6a8:	ebfff89a 	bl	138918 <syscall_trace>
  13a6ac:	e3a00000 	mov	r0, #0
  13a6b0:	e8bd8010 	pop	{r4, pc}
  13a6b4:	0014a170 	.word	0x0014a170

0013a6b8 <syscall_restart_syscall>:
  13a6b8:	e92d4010 	push	{r4, lr}
  13a6bc:	e3a01018 	mov	r1, #24
  13a6c0:	e59f0008 	ldr	r0, [pc, #8]	; 13a6d0 <syscall_restart_syscall+0x18>
  13a6c4:	ebfff893 	bl	138918 <syscall_trace>
  13a6c8:	e3a00000 	mov	r0, #0
  13a6cc:	e8bd8010 	pop	{r4, pc}
  13a6d0:	0014a0f8 	.word	0x0014a0f8

0013a6d4 <syscall_debug>:
  13a6d4:	e92d4070 	push	{r4, r5, r6, lr}
  13a6d8:	e1a04000 	mov	r4, r0
  13a6dc:	e1a05001 	mov	r5, r1
  13a6e0:	e3a0201d 	mov	r2, #29
  13a6e4:	e59f1018 	ldr	r1, [pc, #24]	; 13a704 <syscall_debug+0x30>
  13a6e8:	e3a000ff 	mov	r0, #255	; 0xff
  13a6ec:	eb0004f9 	bl	13bad8 <syscall>
  13a6f0:	e1a02005 	mov	r2, r5
  13a6f4:	e1a01004 	mov	r1, r4
  13a6f8:	e8bd4070 	pop	{r4, r5, r6, lr}
  13a6fc:	e3a000ff 	mov	r0, #255	; 0xff
  13a700:	ea0004f4 	b	13bad8 <syscall>
  13a704:	0014bbb8 	.word	0x0014bbb8

0013a708 <syscall_shmdt>:
  13a708:	e92d4010 	push	{r4, lr}
  13a70c:	e1a04000 	mov	r4, r0
  13a710:	e3a0100e 	mov	r1, #14
  13a714:	e59f0010 	ldr	r0, [pc, #16]	; 13a72c <syscall_shmdt+0x24>
  13a718:	ebffffed 	bl	13a6d4 <syscall_debug>
  13a71c:	e1a01004 	mov	r1, r4
  13a720:	e8bd4010 	pop	{r4, lr}
  13a724:	e59f0004 	ldr	r0, [pc, #4]	; 13a730 <syscall_shmdt+0x28>
  13a728:	ea0004ea 	b	13bad8 <syscall>
  13a72c:	0014b450 	.word	0x0014b450
  13a730:	00000132 	.word	0x00000132

0013a734 <syscall_set_tid_address>:
  13a734:	e92d4010 	push	{r4, lr}
  13a738:	e1a04000 	mov	r4, r0
  13a73c:	e3a01018 	mov	r1, #24
  13a740:	e59f0010 	ldr	r0, [pc, #16]	; 13a758 <syscall_set_tid_address+0x24>
  13a744:	ebffffe2 	bl	13a6d4 <syscall_debug>
  13a748:	e1a01004 	mov	r1, r4
  13a74c:	e8bd4010 	pop	{r4, lr}
  13a750:	e3a0007c 	mov	r0, #124	; 0x7c
  13a754:	ea0004df 	b	13bad8 <syscall>
  13a758:	0014b070 	.word	0x0014b070

0013a75c <syscall_exit_group>:
  13a75c:	e92d4010 	push	{r4, lr}
  13a760:	e1a04000 	mov	r4, r0
  13a764:	e3a01013 	mov	r1, #19
  13a768:	e59f0010 	ldr	r0, [pc, #16]	; 13a780 <syscall_exit_group+0x24>
  13a76c:	ebffffd8 	bl	13a6d4 <syscall_debug>
  13a770:	e1a01004 	mov	r1, r4
  13a774:	e8bd4010 	pop	{r4, lr}
  13a778:	e3a00062 	mov	r0, #98	; 0x62
  13a77c:	ea0004d5 	b	13bad8 <syscall>
  13a780:	0014afe8 	.word	0x0014afe8

0013a784 <syscall_sched_get_priority_min>:
  13a784:	e92d4010 	push	{r4, lr}
  13a788:	e1a04000 	mov	r4, r0
  13a78c:	e3a0101f 	mov	r1, #31
  13a790:	e59f0010 	ldr	r0, [pc, #16]	; 13a7a8 <syscall_sched_get_priority_min+0x24>
  13a794:	ebffffce 	bl	13a6d4 <syscall_debug>
  13a798:	e1a01004 	mov	r1, r4
  13a79c:	e8bd4010 	pop	{r4, lr}
  13a7a0:	e3a00097 	mov	r0, #151	; 0x97
  13a7a4:	ea0004cb 	b	13bad8 <syscall>
  13a7a8:	0014a980 	.word	0x0014a980

0013a7ac <syscall_sched_get_priority_max>:
  13a7ac:	e92d4010 	push	{r4, lr}
  13a7b0:	e1a04000 	mov	r4, r0
  13a7b4:	e3a0101f 	mov	r1, #31
  13a7b8:	e59f0010 	ldr	r0, [pc, #16]	; 13a7d0 <syscall_sched_get_priority_max+0x24>
  13a7bc:	ebffffc4 	bl	13a6d4 <syscall_debug>
  13a7c0:	e1a01004 	mov	r1, r4
  13a7c4:	e8bd4010 	pop	{r4, lr}
  13a7c8:	e3a00096 	mov	r0, #150	; 0x96
  13a7cc:	ea0004c1 	b	13bad8 <syscall>
  13a7d0:	0014a960 	.word	0x0014a960

0013a7d4 <syscall_fsync>:
  13a7d4:	e92d4010 	push	{r4, lr}
  13a7d8:	e1a04000 	mov	r4, r0
  13a7dc:	e3a0100e 	mov	r1, #14
  13a7e0:	e59f0010 	ldr	r0, [pc, #16]	; 13a7f8 <syscall_fsync+0x24>
  13a7e4:	ebffffba 	bl	13a6d4 <syscall_debug>
  13a7e8:	e1a01004 	mov	r1, r4
  13a7ec:	e8bd4010 	pop	{r4, lr}
  13a7f0:	e3a0009b 	mov	r0, #155	; 0x9b
  13a7f4:	ea0004b7 	b	13bad8 <syscall>
  13a7f8:	0014a69c 	.word	0x0014a69c

0013a7fc <syscall_brk>:
  13a7fc:	e92d4010 	push	{r4, lr}
  13a800:	e1a04000 	mov	r4, r0
  13a804:	e3a0100c 	mov	r1, #12
  13a808:	e59f0010 	ldr	r0, [pc, #16]	; 13a820 <syscall_brk+0x24>
  13a80c:	ebffffb0 	bl	13a6d4 <syscall_debug>
  13a810:	e1a01004 	mov	r1, r4
  13a814:	e8bd4010 	pop	{r4, lr}
  13a818:	e3a00034 	mov	r0, #52	; 0x34
  13a81c:	ea0004ad 	b	13bad8 <syscall>
  13a820:	0014a2fc 	.word	0x0014a2fc

0013a824 <syscall_pipe>:
  13a824:	e92d4010 	push	{r4, lr}
  13a828:	e1a04000 	mov	r4, r0
  13a82c:	e3a0100d 	mov	r1, #13
  13a830:	e59f0010 	ldr	r0, [pc, #16]	; 13a848 <syscall_pipe+0x24>
  13a834:	ebffffa6 	bl	13a6d4 <syscall_debug>
  13a838:	e1a01004 	mov	r1, r4
  13a83c:	e8bd4010 	pop	{r4, lr}
  13a840:	e3a0007e 	mov	r0, #126	; 0x7e
  13a844:	ea0004a3 	b	13bad8 <syscall>
  13a848:	0014a2dc 	.word	0x0014a2dc

0013a84c <syscall_dup>:
  13a84c:	e92d4010 	push	{r4, lr}
  13a850:	e1a04000 	mov	r4, r0
  13a854:	e3a0100c 	mov	r1, #12
  13a858:	e59f0010 	ldr	r0, [pc, #16]	; 13a870 <syscall_dup+0x24>
  13a85c:	ebffff9c 	bl	13a6d4 <syscall_debug>
  13a860:	e1a01004 	mov	r1, r4
  13a864:	e8bd4010 	pop	{r4, lr}
  13a868:	e3a00085 	mov	r0, #133	; 0x85
  13a86c:	ea000499 	b	13bad8 <syscall>
  13a870:	0014a2d0 	.word	0x0014a2d0

0013a874 <syscall_rmdir>:
  13a874:	e92d4010 	push	{r4, lr}
  13a878:	e1a04000 	mov	r4, r0
  13a87c:	e3a0100e 	mov	r1, #14
  13a880:	e59f0010 	ldr	r0, [pc, #16]	; 13a898 <syscall_rmdir+0x24>
  13a884:	ebffff92 	bl	13a6d4 <syscall_debug>
  13a888:	e1a01004 	mov	r1, r4
  13a88c:	e8bd4010 	pop	{r4, lr}
  13a890:	e3a00078 	mov	r0, #120	; 0x78
  13a894:	ea00048f 	b	13bad8 <syscall>
  13a898:	0014a2c0 	.word	0x0014a2c0

0013a89c <syscall_chdir>:
  13a89c:	e92d4010 	push	{r4, lr}
  13a8a0:	e1a04000 	mov	r4, r0
  13a8a4:	e3a0100e 	mov	r1, #14
  13a8a8:	e59f0010 	ldr	r0, [pc, #16]	; 13a8c0 <syscall_chdir+0x24>
  13a8ac:	ebffff88 	bl	13a6d4 <syscall_debug>
  13a8b0:	e1a01004 	mov	r1, r4
  13a8b4:	e8bd4010 	pop	{r4, lr}
  13a8b8:	e3a00075 	mov	r0, #117	; 0x75
  13a8bc:	ea000485 	b	13bad8 <syscall>
  13a8c0:	0014a1b0 	.word	0x0014a1b0

0013a8c4 <syscall_unlink>:
  13a8c4:	e92d4010 	push	{r4, lr}
  13a8c8:	e1a04000 	mov	r4, r0
  13a8cc:	e3a0100f 	mov	r1, #15
  13a8d0:	e59f0010 	ldr	r0, [pc, #16]	; 13a8e8 <syscall_unlink+0x24>
  13a8d4:	ebffff7e 	bl	13a6d4 <syscall_debug>
  13a8d8:	e1a01004 	mov	r1, r4
  13a8dc:	e8bd4010 	pop	{r4, lr}
  13a8e0:	e3a00076 	mov	r0, #118	; 0x76
  13a8e4:	ea00047b 	b	13bad8 <syscall>
  13a8e8:	0014a190 	.word	0x0014a190

0013a8ec <syscall_close>:
  13a8ec:	e92d4010 	push	{r4, lr}
  13a8f0:	e1a04000 	mov	r4, r0
  13a8f4:	e3a0100e 	mov	r1, #14
  13a8f8:	e59f0010 	ldr	r0, [pc, #16]	; 13a910 <syscall_close+0x24>
  13a8fc:	ebffff74 	bl	13a6d4 <syscall_debug>
  13a900:	e1a01004 	mov	r1, r4
  13a904:	e8bd4010 	pop	{r4, lr}
  13a908:	e3a00006 	mov	r0, #6
  13a90c:	ea000471 	b	13bad8 <syscall>
  13a910:	0014a160 	.word	0x0014a160

0013a914 <syscall_exit>:
  13a914:	e92d4010 	push	{r4, lr}
  13a918:	e1a04000 	mov	r4, r0
  13a91c:	e3a0100d 	mov	r1, #13
  13a920:	e59f0010 	ldr	r0, [pc, #16]	; 13a938 <syscall_exit+0x24>
  13a924:	ebffff6a 	bl	13a6d4 <syscall_debug>
  13a928:	e1a01004 	mov	r1, r4
  13a92c:	e8bd4010 	pop	{r4, lr}
  13a930:	e3a00001 	mov	r0, #1
  13a934:	ea000467 	b	13bad8 <syscall>
  13a938:	0014a110 	.word	0x0014a110

0013a93c <syscall_listen>:
  13a93c:	e92d4070 	push	{r4, r5, r6, lr}
  13a940:	e1a04000 	mov	r4, r0
  13a944:	e1a05001 	mov	r5, r1
  13a948:	e59f0018 	ldr	r0, [pc, #24]	; 13a968 <syscall_listen+0x2c>
  13a94c:	e3a0100f 	mov	r1, #15
  13a950:	ebffff5f 	bl	13a6d4 <syscall_debug>
  13a954:	e1a02005 	mov	r2, r5
  13a958:	e1a01004 	mov	r1, r4
  13a95c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13a960:	e3a0004d 	mov	r0, #77	; 0x4d
  13a964:	ea00045b 	b	13bad8 <syscall>
  13a968:	0014b2d4 	.word	0x0014b2d4

0013a96c <syscall_clock_getres>:
  13a96c:	e92d4070 	push	{r4, r5, r6, lr}
  13a970:	e1a04000 	mov	r4, r0
  13a974:	e1a05001 	mov	r5, r1
  13a978:	e59f0018 	ldr	r0, [pc, #24]	; 13a998 <syscall_clock_getres+0x2c>
  13a97c:	e3a01015 	mov	r1, #21
  13a980:	ebffff53 	bl	13a6d4 <syscall_debug>
  13a984:	e1a02005 	mov	r2, r5
  13a988:	e1a01004 	mov	r1, r4
  13a98c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13a990:	e3a00081 	mov	r0, #129	; 0x81
  13a994:	ea00044f 	b	13bad8 <syscall>
  13a998:	0014b134 	.word	0x0014b134

0013a99c <syscall_clock_gettime>:
  13a99c:	e92d4070 	push	{r4, r5, r6, lr}
  13a9a0:	e1a04000 	mov	r4, r0
  13a9a4:	e1a05001 	mov	r5, r1
  13a9a8:	e59f0018 	ldr	r0, [pc, #24]	; 13a9c8 <syscall_clock_gettime+0x2c>
  13a9ac:	e3a01016 	mov	r1, #22
  13a9b0:	ebffff47 	bl	13a6d4 <syscall_debug>
  13a9b4:	e1a02005 	mov	r2, r5
  13a9b8:	e1a01004 	mov	r1, r4
  13a9bc:	e8bd4070 	pop	{r4, r5, r6, lr}
  13a9c0:	e3a00080 	mov	r0, #128	; 0x80
  13a9c4:	ea000443 	b	13bad8 <syscall>
  13a9c8:	0014b11c 	.word	0x0014b11c

0013a9cc <syscall_clock_settime>:
  13a9cc:	e92d4070 	push	{r4, r5, r6, lr}
  13a9d0:	e1a04000 	mov	r4, r0
  13a9d4:	e1a05001 	mov	r5, r1
  13a9d8:	e59f0018 	ldr	r0, [pc, #24]	; 13a9f8 <syscall_clock_settime+0x2c>
  13a9dc:	e3a01016 	mov	r1, #22
  13a9e0:	ebffff3b 	bl	13a6d4 <syscall_debug>
  13a9e4:	e1a02005 	mov	r2, r5
  13a9e8:	e1a01004 	mov	r1, r4
  13a9ec:	e8bd4070 	pop	{r4, r5, r6, lr}
  13a9f0:	e3a0007f 	mov	r0, #127	; 0x7f
  13a9f4:	ea000437 	b	13bad8 <syscall>
  13a9f8:	0014b104 	.word	0x0014b104

0013a9fc <syscall_tkill>:
  13a9fc:	e92d4070 	push	{r4, r5, r6, lr}
  13aa00:	e1a04000 	mov	r4, r0
  13aa04:	e1a05001 	mov	r5, r1
  13aa08:	e59f0018 	ldr	r0, [pc, #24]	; 13aa28 <syscall_tkill+0x2c>
  13aa0c:	e3a0100e 	mov	r1, #14
  13aa10:	ebffff2f 	bl	13a6d4 <syscall_debug>
  13aa14:	e1a02005 	mov	r2, r5
  13aa18:	e1a01004 	mov	r1, r4
  13aa1c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13aa20:	e3a00069 	mov	r0, #105	; 0x69
  13aa24:	ea00042b 	b	13bad8 <syscall>
  13aa28:	0014af14 	.word	0x0014af14

0013aa2c <syscall_fstat64>:
  13aa2c:	e92d4070 	push	{r4, r5, r6, lr}
  13aa30:	e1a04000 	mov	r4, r0
  13aa34:	e1a05001 	mov	r5, r1
  13aa38:	e59f0018 	ldr	r0, [pc, #24]	; 13aa58 <syscall_fstat64+0x2c>
  13aa3c:	e3a01010 	mov	r1, #16
  13aa40:	ebffff23 	bl	13a6d4 <syscall_debug>
  13aa44:	e1a02005 	mov	r2, r5
  13aa48:	e1a01004 	mov	r1, r4
  13aa4c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13aa50:	e3a00008 	mov	r0, #8
  13aa54:	ea00041f 	b	13bad8 <syscall>
  13aa58:	0014ac18 	.word	0x0014ac18

0013aa5c <syscall_lstat64>:
  13aa5c:	e92d4070 	push	{r4, r5, r6, lr}
  13aa60:	e1a04000 	mov	r4, r0
  13aa64:	e1a05001 	mov	r5, r1
  13aa68:	e59f0018 	ldr	r0, [pc, #24]	; 13aa88 <syscall_lstat64+0x2c>
  13aa6c:	e3a01010 	mov	r1, #16
  13aa70:	ebffff17 	bl	13a6d4 <syscall_debug>
  13aa74:	e1a02005 	mov	r2, r5
  13aa78:	e1a01004 	mov	r1, r4
  13aa7c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13aa80:	e3a00043 	mov	r0, #67	; 0x43
  13aa84:	ea000413 	b	13bad8 <syscall>
  13aa88:	0014ac08 	.word	0x0014ac08

0013aa8c <syscall_stat64>:
  13aa8c:	e92d4070 	push	{r4, r5, r6, lr}
  13aa90:	e1a04000 	mov	r4, r0
  13aa94:	e1a05001 	mov	r5, r1
  13aa98:	e59f0018 	ldr	r0, [pc, #24]	; 13aab8 <syscall_stat64+0x2c>
  13aa9c:	e3a0100f 	mov	r1, #15
  13aaa0:	ebffff0b 	bl	13a6d4 <syscall_debug>
  13aaa4:	e1a02005 	mov	r2, r5
  13aaa8:	e1a01004 	mov	r1, r4
  13aaac:	e8bd4070 	pop	{r4, r5, r6, lr}
  13aab0:	e3a00043 	mov	r0, #67	; 0x43
  13aab4:	ea000407 	b	13bad8 <syscall>
  13aab8:	0014abf8 	.word	0x0014abf8

0013aabc <syscall_ugetrlimit>:
  13aabc:	e92d4070 	push	{r4, r5, r6, lr}
  13aac0:	e1a04000 	mov	r4, r0
  13aac4:	e1a05001 	mov	r5, r1
  13aac8:	e59f0018 	ldr	r0, [pc, #24]	; 13aae8 <syscall_ugetrlimit+0x2c>
  13aacc:	e3a01013 	mov	r1, #19
  13aad0:	ebfffeff 	bl	13a6d4 <syscall_debug>
  13aad4:	e1a02005 	mov	r2, r5
  13aad8:	e1a01004 	mov	r1, r4
  13aadc:	e8bd4070 	pop	{r4, r5, r6, lr}
  13aae0:	e3a0008d 	mov	r0, #141	; 0x8d
  13aae4:	ea0003fb 	b	13bad8 <syscall>
  13aae8:	0014abac 	.word	0x0014abac

0013aaec <syscall_getcwd>:
  13aaec:	e92d4070 	push	{r4, r5, r6, lr}
  13aaf0:	e1a04000 	mov	r4, r0
  13aaf4:	e1a05001 	mov	r5, r1
  13aaf8:	e59f0018 	ldr	r0, [pc, #24]	; 13ab18 <syscall_getcwd+0x2c>
  13aafc:	e3a0100f 	mov	r1, #15
  13ab00:	ebfffef3 	bl	13a6d4 <syscall_debug>
  13ab04:	e1a02005 	mov	r2, r5
  13ab08:	e1a01004 	mov	r1, r4
  13ab0c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13ab10:	e3a00074 	mov	r0, #116	; 0x74
  13ab14:	ea0003ef 	b	13bad8 <syscall>
  13ab18:	0014ab44 	.word	0x0014ab44

0013ab1c <syscall_nanosleep>:
  13ab1c:	e92d4070 	push	{r4, r5, r6, lr}
  13ab20:	e1a04000 	mov	r4, r0
  13ab24:	e1a05001 	mov	r5, r1
  13ab28:	e59f0018 	ldr	r0, [pc, #24]	; 13ab48 <syscall_nanosleep+0x2c>
  13ab2c:	e3a01012 	mov	r1, #18
  13ab30:	ebfffee7 	bl	13a6d4 <syscall_debug>
  13ab34:	e1a02005 	mov	r2, r5
  13ab38:	e1a01004 	mov	r1, r4
  13ab3c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13ab40:	e3a0000a 	mov	r0, #10
  13ab44:	ea0003e3 	b	13bad8 <syscall>
  13ab48:	0014a9c0 	.word	0x0014a9c0

0013ab4c <syscall_sched_getparam>:
  13ab4c:	e92d4070 	push	{r4, r5, r6, lr}
  13ab50:	e1a04000 	mov	r4, r0
  13ab54:	e1a05001 	mov	r5, r1
  13ab58:	e59f0018 	ldr	r0, [pc, #24]	; 13ab78 <syscall_sched_getparam+0x2c>
  13ab5c:	e3a01017 	mov	r1, #23
  13ab60:	ebfffedb 	bl	13a6d4 <syscall_debug>
  13ab64:	e1a02005 	mov	r2, r5
  13ab68:	e1a01004 	mov	r1, r4
  13ab6c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13ab70:	e3a00095 	mov	r0, #149	; 0x95
  13ab74:	ea0003d7 	b	13bad8 <syscall>
  13ab78:	0014a8fc 	.word	0x0014a8fc

0013ab7c <syscall_sched_setparam>:
  13ab7c:	e92d4070 	push	{r4, r5, r6, lr}
  13ab80:	e1a04000 	mov	r4, r0
  13ab84:	e1a05001 	mov	r5, r1
  13ab88:	e59f0018 	ldr	r0, [pc, #24]	; 13aba8 <syscall_sched_setparam+0x2c>
  13ab8c:	e3a01017 	mov	r1, #23
  13ab90:	ebfffecf 	bl	13a6d4 <syscall_debug>
  13ab94:	e1a02005 	mov	r2, r5
  13ab98:	e1a01004 	mov	r1, r4
  13ab9c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13aba0:	e3a00094 	mov	r0, #148	; 0x94
  13aba4:	ea0003cb 	b	13bad8 <syscall>
  13aba8:	0014a8e4 	.word	0x0014a8e4

0013abac <syscall_lstat>:
  13abac:	e92d4070 	push	{r4, r5, r6, lr}
  13abb0:	e1a04000 	mov	r4, r0
  13abb4:	e1a05001 	mov	r5, r1
  13abb8:	e59f0018 	ldr	r0, [pc, #24]	; 13abd8 <syscall_lstat+0x2c>
  13abbc:	e3a0100e 	mov	r1, #14
  13abc0:	ebfffec3 	bl	13a6d4 <syscall_debug>
  13abc4:	e1a02005 	mov	r2, r5
  13abc8:	e1a01004 	mov	r1, r4
  13abcc:	e8bd4070 	pop	{r4, r5, r6, lr}
  13abd0:	e3a00043 	mov	r0, #67	; 0x43
  13abd4:	ea0003bf 	b	13bad8 <syscall>
  13abd8:	0014a63c 	.word	0x0014a63c

0013abdc <syscall_stat>:
  13abdc:	e92d4070 	push	{r4, r5, r6, lr}
  13abe0:	e1a04000 	mov	r4, r0
  13abe4:	e1a05001 	mov	r5, r1
  13abe8:	e59f0018 	ldr	r0, [pc, #24]	; 13ac08 <syscall_stat+0x2c>
  13abec:	e3a0100d 	mov	r1, #13
  13abf0:	ebfffeb7 	bl	13a6d4 <syscall_debug>
  13abf4:	e1a02005 	mov	r2, r5
  13abf8:	e1a01004 	mov	r1, r4
  13abfc:	e8bd4070 	pop	{r4, r5, r6, lr}
  13ac00:	e3a00043 	mov	r0, #67	; 0x43
  13ac04:	ea0003b3 	b	13bad8 <syscall>
  13ac08:	0014a62c 	.word	0x0014a62c

0013ac0c <syscall_munmap>:
  13ac0c:	e92d4070 	push	{r4, r5, r6, lr}
  13ac10:	e1a04000 	mov	r4, r0
  13ac14:	e1a05001 	mov	r5, r1
  13ac18:	e59f0018 	ldr	r0, [pc, #24]	; 13ac38 <syscall_munmap+0x2c>
  13ac1c:	e3a0100f 	mov	r1, #15
  13ac20:	ebfffeab 	bl	13a6d4 <syscall_debug>
  13ac24:	e1a02005 	mov	r2, r5
  13ac28:	e1a01004 	mov	r1, r4
  13ac2c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13ac30:	e3a00036 	mov	r0, #54	; 0x36
  13ac34:	ea0003a7 	b	13bad8 <syscall>
  13ac38:	0014a554 	.word	0x0014a554

0013ac3c <syscall_setrlimit>:
  13ac3c:	e92d4070 	push	{r4, r5, r6, lr}
  13ac40:	e1a04000 	mov	r4, r0
  13ac44:	e1a05001 	mov	r5, r1
  13ac48:	e59f0018 	ldr	r0, [pc, #24]	; 13ac68 <syscall_setrlimit+0x2c>
  13ac4c:	e3a01012 	mov	r1, #18
  13ac50:	ebfffe9f 	bl	13a6d4 <syscall_debug>
  13ac54:	e1a02005 	mov	r2, r5
  13ac58:	e1a01004 	mov	r1, r4
  13ac5c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13ac60:	e3a0008e 	mov	r0, #142	; 0x8e
  13ac64:	ea00039b 	b	13bad8 <syscall>
  13ac68:	0014a480 	.word	0x0014a480

0013ac6c <syscall_dup2>:
  13ac6c:	e92d4070 	push	{r4, r5, r6, lr}
  13ac70:	e1a04000 	mov	r4, r0
  13ac74:	e1a05001 	mov	r5, r1
  13ac78:	e59f0018 	ldr	r0, [pc, #24]	; 13ac98 <syscall_dup2+0x2c>
  13ac7c:	e3a0100d 	mov	r1, #13
  13ac80:	ebfffe93 	bl	13a6d4 <syscall_debug>
  13ac84:	e1a02005 	mov	r2, r5
  13ac88:	e1a01004 	mov	r1, r4
  13ac8c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13ac90:	e3a00086 	mov	r0, #134	; 0x86
  13ac94:	ea00038f 	b	13bad8 <syscall>
  13ac98:	0014a3c8 	.word	0x0014a3c8

0013ac9c <syscall_mkdir>:
  13ac9c:	e92d4070 	push	{r4, r5, r6, lr}
  13aca0:	e1a04000 	mov	r4, r0
  13aca4:	e1a05001 	mov	r5, r1
  13aca8:	e59f0018 	ldr	r0, [pc, #24]	; 13acc8 <syscall_mkdir+0x2c>
  13acac:	e3a0100e 	mov	r1, #14
  13acb0:	ebfffe87 	bl	13a6d4 <syscall_debug>
  13acb4:	e1a02005 	mov	r2, r5
  13acb8:	e1a01004 	mov	r1, r4
  13acbc:	e8bd4070 	pop	{r4, r5, r6, lr}
  13acc0:	e3a00077 	mov	r0, #119	; 0x77
  13acc4:	ea000383 	b	13bad8 <syscall>
  13acc8:	0014a2b0 	.word	0x0014a2b0

0013accc <syscall_rename>:
  13accc:	e92d4070 	push	{r4, r5, r6, lr}
  13acd0:	e1a04000 	mov	r4, r0
  13acd4:	e1a05001 	mov	r5, r1
  13acd8:	e59f0018 	ldr	r0, [pc, #24]	; 13acf8 <syscall_rename+0x2c>
  13acdc:	e3a0100f 	mov	r1, #15
  13ace0:	ebfffe7b 	bl	13a6d4 <syscall_debug>
  13ace4:	e1a02005 	mov	r2, r5
  13ace8:	e1a01004 	mov	r1, r4
  13acec:	e8bd4070 	pop	{r4, r5, r6, lr}
  13acf0:	e3a00087 	mov	r0, #135	; 0x87
  13acf4:	ea000377 	b	13bad8 <syscall>
  13acf8:	0014a2a0 	.word	0x0014a2a0

0013acfc <syscall_kill>:
  13acfc:	e92d4070 	push	{r4, r5, r6, lr}
  13ad00:	e1a04000 	mov	r4, r0
  13ad04:	e1a05001 	mov	r5, r1
  13ad08:	e59f0018 	ldr	r0, [pc, #24]	; 13ad28 <syscall_kill+0x2c>
  13ad0c:	e3a0100d 	mov	r1, #13
  13ad10:	ebfffe6f 	bl	13a6d4 <syscall_debug>
  13ad14:	e1a02005 	mov	r2, r5
  13ad18:	e1a01004 	mov	r1, r4
  13ad1c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13ad20:	e3a0000e 	mov	r0, #14
  13ad24:	ea00036b 	b	13bad8 <syscall>
  13ad28:	0014a290 	.word	0x0014a290

0013ad2c <syscall_access>:
  13ad2c:	e92d4070 	push	{r4, r5, r6, lr}
  13ad30:	e1a04000 	mov	r4, r0
  13ad34:	e1a05001 	mov	r5, r1
  13ad38:	e59f0018 	ldr	r0, [pc, #24]	; 13ad58 <syscall_access+0x2c>
  13ad3c:	e3a0100f 	mov	r1, #15
  13ad40:	ebfffe63 	bl	13a6d4 <syscall_debug>
  13ad44:	e1a02005 	mov	r2, r5
  13ad48:	e1a01004 	mov	r1, r4
  13ad4c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13ad50:	e3a0007d 	mov	r0, #125	; 0x7d
  13ad54:	ea00035f 	b	13bad8 <syscall>
  13ad58:	0014a260 	.word	0x0014a260

0013ad5c <syscall_getrandom>:
  13ad5c:	e92d4070 	push	{r4, r5, r6, lr}
  13ad60:	e1a06002 	mov	r6, r2
  13ad64:	e1a04000 	mov	r4, r0
  13ad68:	e1a05001 	mov	r5, r1
  13ad6c:	e59f001c 	ldr	r0, [pc, #28]	; 13ad90 <syscall_getrandom+0x34>
  13ad70:	e3a01012 	mov	r1, #18
  13ad74:	ebfffe56 	bl	13a6d4 <syscall_debug>
  13ad78:	e1a03006 	mov	r3, r6
  13ad7c:	e1a02005 	mov	r2, r5
  13ad80:	e1a01004 	mov	r1, r4
  13ad84:	e8bd4070 	pop	{r4, r5, r6, lr}
  13ad88:	e3a00090 	mov	r0, #144	; 0x90
  13ad8c:	ea000351 	b	13bad8 <syscall>
  13ad90:	0014ba80 	.word	0x0014ba80

0013ad94 <syscall_shmctl>:
  13ad94:	e92d4070 	push	{r4, r5, r6, lr}
  13ad98:	e1a06002 	mov	r6, r2
  13ad9c:	e1a04000 	mov	r4, r0
  13ada0:	e1a05001 	mov	r5, r1
  13ada4:	e59f001c 	ldr	r0, [pc, #28]	; 13adc8 <syscall_shmctl+0x34>
  13ada8:	e3a0100f 	mov	r1, #15
  13adac:	ebfffe48 	bl	13a6d4 <syscall_debug>
  13adb0:	e1a03006 	mov	r3, r6
  13adb4:	e1a02005 	mov	r2, r5
  13adb8:	e1a01004 	mov	r1, r4
  13adbc:	e8bd4070 	pop	{r4, r5, r6, lr}
  13adc0:	e3a00f4d 	mov	r0, #308	; 0x134
  13adc4:	ea000343 	b	13bad8 <syscall>
  13adc8:	0014b470 	.word	0x0014b470

0013adcc <syscall_shmget>:
  13adcc:	e92d4070 	push	{r4, r5, r6, lr}
  13add0:	e1a06002 	mov	r6, r2
  13add4:	e1a04000 	mov	r4, r0
  13add8:	e1a05001 	mov	r5, r1
  13addc:	e59f001c 	ldr	r0, [pc, #28]	; 13ae00 <syscall_shmget+0x34>
  13ade0:	e3a0100f 	mov	r1, #15
  13ade4:	ebfffe3a 	bl	13a6d4 <syscall_debug>
  13ade8:	e1a03006 	mov	r3, r6
  13adec:	e1a02005 	mov	r2, r5
  13adf0:	e1a01004 	mov	r1, r4
  13adf4:	e8bd4070 	pop	{r4, r5, r6, lr}
  13adf8:	e59f0004 	ldr	r0, [pc, #4]	; 13ae04 <syscall_shmget+0x38>
  13adfc:	ea000335 	b	13bad8 <syscall>
  13ae00:	0014b460 	.word	0x0014b460
  13ae04:	00000133 	.word	0x00000133

0013ae08 <syscall_shmat>:
  13ae08:	e92d4070 	push	{r4, r5, r6, lr}
  13ae0c:	e1a06002 	mov	r6, r2
  13ae10:	e1a04000 	mov	r4, r0
  13ae14:	e1a05001 	mov	r5, r1
  13ae18:	e59f001c 	ldr	r0, [pc, #28]	; 13ae3c <syscall_shmat+0x34>
  13ae1c:	e3a0100e 	mov	r1, #14
  13ae20:	ebfffe2b 	bl	13a6d4 <syscall_debug>
  13ae24:	e1a03006 	mov	r3, r6
  13ae28:	e1a02005 	mov	r2, r5
  13ae2c:	e1a01004 	mov	r1, r4
  13ae30:	e8bd4070 	pop	{r4, r5, r6, lr}
  13ae34:	e59f0004 	ldr	r0, [pc, #4]	; 13ae40 <syscall_shmat+0x38>
  13ae38:	ea000326 	b	13bad8 <syscall>
  13ae3c:	0014b440 	.word	0x0014b440
  13ae40:	00000131 	.word	0x00000131

0013ae44 <syscall_getpeername>:
  13ae44:	e92d4070 	push	{r4, r5, r6, lr}
  13ae48:	e1a06002 	mov	r6, r2
  13ae4c:	e1a04000 	mov	r4, r0
  13ae50:	e1a05001 	mov	r5, r1
  13ae54:	e59f001c 	ldr	r0, [pc, #28]	; 13ae78 <syscall_getpeername+0x34>
  13ae58:	e3a01014 	mov	r1, #20
  13ae5c:	ebfffe1c 	bl	13a6d4 <syscall_debug>
  13ae60:	e1a03006 	mov	r3, r6
  13ae64:	e1a02005 	mov	r2, r5
  13ae68:	e1a01004 	mov	r1, r4
  13ae6c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13ae70:	e3a00048 	mov	r0, #72	; 0x48
  13ae74:	ea000317 	b	13bad8 <syscall>
  13ae78:	0014b308 	.word	0x0014b308

0013ae7c <syscall_getsockname>:
  13ae7c:	e92d4070 	push	{r4, r5, r6, lr}
  13ae80:	e1a06002 	mov	r6, r2
  13ae84:	e1a04000 	mov	r4, r0
  13ae88:	e1a05001 	mov	r5, r1
  13ae8c:	e59f001c 	ldr	r0, [pc, #28]	; 13aeb0 <syscall_getsockname+0x34>
  13ae90:	e3a01014 	mov	r1, #20
  13ae94:	ebfffe0e 	bl	13a6d4 <syscall_debug>
  13ae98:	e1a03006 	mov	r3, r6
  13ae9c:	e1a02005 	mov	r2, r5
  13aea0:	e1a01004 	mov	r1, r4
  13aea4:	e8bd4070 	pop	{r4, r5, r6, lr}
  13aea8:	e3a00049 	mov	r0, #73	; 0x49
  13aeac:	ea000309 	b	13bad8 <syscall>
  13aeb0:	0014b2f4 	.word	0x0014b2f4

0013aeb4 <syscall_accept>:
  13aeb4:	e92d4070 	push	{r4, r5, r6, lr}
  13aeb8:	e1a06002 	mov	r6, r2
  13aebc:	e1a04000 	mov	r4, r0
  13aec0:	e1a05001 	mov	r5, r1
  13aec4:	e59f001c 	ldr	r0, [pc, #28]	; 13aee8 <syscall_accept+0x34>
  13aec8:	e3a0100f 	mov	r1, #15
  13aecc:	ebfffe00 	bl	13a6d4 <syscall_debug>
  13aed0:	e1a03006 	mov	r3, r6
  13aed4:	e1a02005 	mov	r2, r5
  13aed8:	e1a01004 	mov	r1, r4
  13aedc:	e8bd4070 	pop	{r4, r5, r6, lr}
  13aee0:	e3a00045 	mov	r0, #69	; 0x45
  13aee4:	ea0002fb 	b	13bad8 <syscall>
  13aee8:	0014b2e4 	.word	0x0014b2e4

0013aeec <syscall_connect>:
  13aeec:	e92d4070 	push	{r4, r5, r6, lr}
  13aef0:	e1a06002 	mov	r6, r2
  13aef4:	e1a04000 	mov	r4, r0
  13aef8:	e1a05001 	mov	r5, r1
  13aefc:	e59f001c 	ldr	r0, [pc, #28]	; 13af20 <syscall_connect+0x34>
  13af00:	e3a01010 	mov	r1, #16
  13af04:	ebfffdf2 	bl	13a6d4 <syscall_debug>
  13af08:	e1a03006 	mov	r3, r6
  13af0c:	e1a02005 	mov	r2, r5
  13af10:	e1a01004 	mov	r1, r4
  13af14:	e8bd4070 	pop	{r4, r5, r6, lr}
  13af18:	e3a0004c 	mov	r0, #76	; 0x4c
  13af1c:	ea0002ed 	b	13bad8 <syscall>
  13af20:	0014b2c4 	.word	0x0014b2c4

0013af24 <syscall_bind>:
  13af24:	e92d4070 	push	{r4, r5, r6, lr}
  13af28:	e1a06002 	mov	r6, r2
  13af2c:	e1a04000 	mov	r4, r0
  13af30:	e1a05001 	mov	r5, r1
  13af34:	e59f001c 	ldr	r0, [pc, #28]	; 13af58 <syscall_bind+0x34>
  13af38:	e3a0100d 	mov	r1, #13
  13af3c:	ebfffde4 	bl	13a6d4 <syscall_debug>
  13af40:	e1a03006 	mov	r3, r6
  13af44:	e1a02005 	mov	r2, r5
  13af48:	e1a01004 	mov	r1, r4
  13af4c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13af50:	e3a00046 	mov	r0, #70	; 0x46
  13af54:	ea0002df 	b	13bad8 <syscall>
  13af58:	0014b2b4 	.word	0x0014b2b4

0013af5c <syscall_socket>:
  13af5c:	e92d4070 	push	{r4, r5, r6, lr}
  13af60:	e1a06002 	mov	r6, r2
  13af64:	e1a04000 	mov	r4, r0
  13af68:	e1a05001 	mov	r5, r1
  13af6c:	e59f001c 	ldr	r0, [pc, #28]	; 13af90 <syscall_socket+0x34>
  13af70:	e3a0100f 	mov	r1, #15
  13af74:	ebfffdd6 	bl	13a6d4 <syscall_debug>
  13af78:	e1a03006 	mov	r3, r6
  13af7c:	e1a02005 	mov	r2, r5
  13af80:	e1a01004 	mov	r1, r4
  13af84:	e8bd4070 	pop	{r4, r5, r6, lr}
  13af88:	e3a00052 	mov	r0, #82	; 0x52
  13af8c:	ea0002d1 	b	13bad8 <syscall>
  13af90:	0014b2a4 	.word	0x0014b2a4

0013af94 <syscall_sched_setaffinity>:
  13af94:	e92d4070 	push	{r4, r5, r6, lr}
  13af98:	e1a06002 	mov	r6, r2
  13af9c:	e1a04000 	mov	r4, r0
  13afa0:	e1a05001 	mov	r5, r1
  13afa4:	e59f001c 	ldr	r0, [pc, #28]	; 13afc8 <syscall_sched_setaffinity+0x34>
  13afa8:	e3a0101a 	mov	r1, #26
  13afac:	ebfffdc8 	bl	13a6d4 <syscall_debug>
  13afb0:	e1a03006 	mov	r3, r6
  13afb4:	e1a02005 	mov	r2, r5
  13afb8:	e1a01004 	mov	r1, r4
  13afbc:	e8bd4070 	pop	{r4, r5, r6, lr}
  13afc0:	e3a0009a 	mov	r0, #154	; 0x9a
  13afc4:	ea0002c3 	b	13bad8 <syscall>
  13afc8:	0014af48 	.word	0x0014af48

0013afcc <syscall_fcntl64>:
  13afcc:	e92d4070 	push	{r4, r5, r6, lr}
  13afd0:	e1a06002 	mov	r6, r2
  13afd4:	e1a04000 	mov	r4, r0
  13afd8:	e1a05001 	mov	r5, r1
  13afdc:	e59f001c 	ldr	r0, [pc, #28]	; 13b000 <syscall_fcntl64+0x34>
  13afe0:	e3a01010 	mov	r1, #16
  13afe4:	ebfffdba 	bl	13a6d4 <syscall_debug>
  13afe8:	e1a03006 	mov	r3, r6
  13afec:	e1a02005 	mov	r2, r5
  13aff0:	e1a01004 	mov	r1, r4
  13aff4:	e8bd4070 	pop	{r4, r5, r6, lr}
  13aff8:	e3a00007 	mov	r0, #7
  13affc:	ea0002b5 	b	13bad8 <syscall>
  13b000:	0014ade8 	.word	0x0014ade8

0013b004 <syscall_madvise>:
  13b004:	e92d4070 	push	{r4, r5, r6, lr}
  13b008:	e1a06002 	mov	r6, r2
  13b00c:	e1a04000 	mov	r4, r0
  13b010:	e1a05001 	mov	r5, r1
  13b014:	e59f001c 	ldr	r0, [pc, #28]	; 13b038 <syscall_madvise+0x34>
  13b018:	e3a01010 	mov	r1, #16
  13b01c:	ebfffdac 	bl	13a6d4 <syscall_debug>
  13b020:	e1a03006 	mov	r3, r6
  13b024:	e1a02005 	mov	r2, r5
  13b028:	e1a01004 	mov	r1, r4
  13b02c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b030:	e3a00093 	mov	r0, #147	; 0x93
  13b034:	ea0002a7 	b	13bad8 <syscall>
  13b038:	0014add8 	.word	0x0014add8

0013b03c <syscall_getdents64>:
  13b03c:	e92d4070 	push	{r4, r5, r6, lr}
  13b040:	e1a06002 	mov	r6, r2
  13b044:	e1a04000 	mov	r4, r0
  13b048:	e1a05001 	mov	r5, r1
  13b04c:	e59f001c 	ldr	r0, [pc, #28]	; 13b070 <syscall_getdents64+0x34>
  13b050:	e3a01013 	mov	r1, #19
  13b054:	ebfffd9e 	bl	13a6d4 <syscall_debug>
  13b058:	e1a03006 	mov	r3, r6
  13b05c:	e1a02005 	mov	r2, r5
  13b060:	e1a01004 	mov	r1, r4
  13b064:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b068:	e3a00079 	mov	r0, #121	; 0x79
  13b06c:	ea000299 	b	13bad8 <syscall>
  13b070:	0014ada0 	.word	0x0014ada0

0013b074 <syscall_poll>:
  13b074:	e92d4070 	push	{r4, r5, r6, lr}
  13b078:	e1a06002 	mov	r6, r2
  13b07c:	e1a04000 	mov	r4, r0
  13b080:	e1a05001 	mov	r5, r1
  13b084:	e59f001c 	ldr	r0, [pc, #28]	; 13b0a8 <syscall_poll+0x34>
  13b088:	e3a0100d 	mov	r1, #13
  13b08c:	ebfffd90 	bl	13a6d4 <syscall_debug>
  13b090:	e1a03006 	mov	r3, r6
  13b094:	e1a02005 	mov	r2, r5
  13b098:	e1a01004 	mov	r1, r4
  13b09c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b0a0:	e3a00009 	mov	r0, #9
  13b0a4:	ea00028b 	b	13bad8 <syscall>
  13b0a8:	0014aa0c 	.word	0x0014aa0c

0013b0ac <syscall_sched_getscheduler>:
  13b0ac:	e92d4070 	push	{r4, r5, r6, lr}
  13b0b0:	e1a06002 	mov	r6, r2
  13b0b4:	e1a04000 	mov	r4, r0
  13b0b8:	e1a05001 	mov	r5, r1
  13b0bc:	e59f001c 	ldr	r0, [pc, #28]	; 13b0e0 <syscall_sched_getscheduler+0x34>
  13b0c0:	e3a0101b 	mov	r1, #27
  13b0c4:	ebfffd82 	bl	13a6d4 <syscall_debug>
  13b0c8:	e1a03006 	mov	r3, r6
  13b0cc:	e1a02005 	mov	r2, r5
  13b0d0:	e1a01004 	mov	r1, r4
  13b0d4:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b0d8:	e3a00099 	mov	r0, #153	; 0x99
  13b0dc:	ea00027d 	b	13bad8 <syscall>
  13b0e0:	0014a930 	.word	0x0014a930

0013b0e4 <syscall_sched_setscheduler>:
  13b0e4:	e92d4070 	push	{r4, r5, r6, lr}
  13b0e8:	e1a06002 	mov	r6, r2
  13b0ec:	e1a04000 	mov	r4, r0
  13b0f0:	e1a05001 	mov	r5, r1
  13b0f4:	e59f001c 	ldr	r0, [pc, #28]	; 13b118 <syscall_sched_setscheduler+0x34>
  13b0f8:	e3a0101b 	mov	r1, #27
  13b0fc:	ebfffd74 	bl	13a6d4 <syscall_debug>
  13b100:	e1a03006 	mov	r3, r6
  13b104:	e1a02005 	mov	r2, r5
  13b108:	e1a01004 	mov	r1, r4
  13b10c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b110:	e3a00098 	mov	r0, #152	; 0x98
  13b114:	ea00026f 	b	13bad8 <syscall>
  13b118:	0014a914 	.word	0x0014a914

0013b11c <syscall_writev>:
  13b11c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13b120:	e1a06002 	mov	r6, r2
  13b124:	e1a08000 	mov	r8, r0
  13b128:	e1a04001 	mov	r4, r1
  13b12c:	e59f0088 	ldr	r0, [pc, #136]	; 13b1bc <syscall_writev+0xa0>
  13b130:	e3a0100f 	mov	r1, #15
  13b134:	ebfffd66 	bl	13a6d4 <syscall_debug>
  13b138:	e3560000 	cmp	r6, #0
  13b13c:	e3a07000 	mov	r7, #0
  13b140:	da000013 	ble	13b194 <syscall_writev+0x78>
  13b144:	e1a05007 	mov	r5, r7
  13b148:	ea000003 	b	13b15c <syscall_writev+0x40>
  13b14c:	e2855001 	add	r5, r5, #1
  13b150:	e1560005 	cmp	r6, r5
  13b154:	e2844008 	add	r4, r4, #8
  13b158:	0a00000d 	beq	13b194 <syscall_writev+0x78>
  13b15c:	e5943004 	ldr	r3, [r4, #4]
  13b160:	e3530000 	cmp	r3, #0
  13b164:	0afffff8 	beq	13b14c <syscall_writev+0x30>
  13b168:	e5942000 	ldr	r2, [r4]
  13b16c:	e1a01008 	mov	r1, r8
  13b170:	e3a00003 	mov	r0, #3
  13b174:	eb000257 	bl	13bad8 <syscall>
  13b178:	e3500000 	cmp	r0, #0
  13b17c:	da000006 	ble	13b19c <syscall_writev+0x80>
  13b180:	e2855001 	add	r5, r5, #1
  13b184:	e1560005 	cmp	r6, r5
  13b188:	e0877000 	add	r7, r7, r0
  13b18c:	e2844008 	add	r4, r4, #8
  13b190:	1afffff1 	bne	13b15c <syscall_writev+0x40>
  13b194:	e1a00007 	mov	r0, r7
  13b198:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13b19c:	13a03000 	movne	r3, #0
  13b1a0:	03a03001 	moveq	r3, #1
  13b1a4:	e3570000 	cmp	r7, #0
  13b1a8:	13a03001 	movne	r3, #1
  13b1ac:	e3530000 	cmp	r3, #0
  13b1b0:	01a07000 	moveq	r7, r0
  13b1b4:	e1a00007 	mov	r0, r7
  13b1b8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13b1bc:	0014a858 	.word	0x0014a858

0013b1c0 <syscall_readv>:
  13b1c0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13b1c4:	e1a06002 	mov	r6, r2
  13b1c8:	e1a08000 	mov	r8, r0
  13b1cc:	e1a04001 	mov	r4, r1
  13b1d0:	e59f0088 	ldr	r0, [pc, #136]	; 13b260 <syscall_readv+0xa0>
  13b1d4:	e3a0100e 	mov	r1, #14
  13b1d8:	ebfffd3d 	bl	13a6d4 <syscall_debug>
  13b1dc:	e3560000 	cmp	r6, #0
  13b1e0:	e3a07000 	mov	r7, #0
  13b1e4:	da000013 	ble	13b238 <syscall_readv+0x78>
  13b1e8:	e1a05007 	mov	r5, r7
  13b1ec:	ea000003 	b	13b200 <syscall_readv+0x40>
  13b1f0:	e2855001 	add	r5, r5, #1
  13b1f4:	e1560005 	cmp	r6, r5
  13b1f8:	e2844008 	add	r4, r4, #8
  13b1fc:	0a00000d 	beq	13b238 <syscall_readv+0x78>
  13b200:	e5943004 	ldr	r3, [r4, #4]
  13b204:	e3530000 	cmp	r3, #0
  13b208:	0afffff8 	beq	13b1f0 <syscall_readv+0x30>
  13b20c:	e5942000 	ldr	r2, [r4]
  13b210:	e1a01008 	mov	r1, r8
  13b214:	e3a00002 	mov	r0, #2
  13b218:	eb00022e 	bl	13bad8 <syscall>
  13b21c:	e3500000 	cmp	r0, #0
  13b220:	da000006 	ble	13b240 <syscall_readv+0x80>
  13b224:	e2855001 	add	r5, r5, #1
  13b228:	e1560005 	cmp	r6, r5
  13b22c:	e0877000 	add	r7, r7, r0
  13b230:	e2844008 	add	r4, r4, #8
  13b234:	1afffff1 	bne	13b200 <syscall_readv+0x40>
  13b238:	e1a00007 	mov	r0, r7
  13b23c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13b240:	13a03000 	movne	r3, #0
  13b244:	03a03001 	moveq	r3, #1
  13b248:	e3570000 	cmp	r7, #0
  13b24c:	13a03001 	movne	r3, #1
  13b250:	e3530000 	cmp	r3, #0
  13b254:	01a07000 	moveq	r7, r0
  13b258:	e1a00007 	mov	r0, r7
  13b25c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13b260:	0014a848 	.word	0x0014a848

0013b264 <syscall_getdents>:
  13b264:	e92d4070 	push	{r4, r5, r6, lr}
  13b268:	e1a06002 	mov	r6, r2
  13b26c:	e1a04000 	mov	r4, r0
  13b270:	e1a05001 	mov	r5, r1
  13b274:	e59f001c 	ldr	r0, [pc, #28]	; 13b298 <syscall_getdents+0x34>
  13b278:	e3a01011 	mov	r1, #17
  13b27c:	ebfffd14 	bl	13a6d4 <syscall_debug>
  13b280:	e1a03006 	mov	r3, r6
  13b284:	e1a02005 	mov	r2, r5
  13b288:	e1a01004 	mov	r1, r4
  13b28c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b290:	e3a00079 	mov	r0, #121	; 0x79
  13b294:	ea00020f 	b	13bad8 <syscall>
  13b298:	0014a800 	.word	0x0014a800

0013b29c <syscall_readlink>:
  13b29c:	e92d4070 	push	{r4, r5, r6, lr}
  13b2a0:	e1a06002 	mov	r6, r2
  13b2a4:	e1a04000 	mov	r4, r0
  13b2a8:	e1a05001 	mov	r5, r1
  13b2ac:	e59f001c 	ldr	r0, [pc, #28]	; 13b2d0 <syscall_readlink+0x34>
  13b2b0:	e3a01011 	mov	r1, #17
  13b2b4:	ebfffd06 	bl	13a6d4 <syscall_debug>
  13b2b8:	e1a03006 	mov	r3, r6
  13b2bc:	e1a02005 	mov	r2, r5
  13b2c0:	e1a01004 	mov	r1, r4
  13b2c4:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b2c8:	e3a00091 	mov	r0, #145	; 0x91
  13b2cc:	ea000201 	b	13bad8 <syscall>
  13b2d0:	0014a510 	.word	0x0014a510

0013b2d4 <syscall_fcntl>:
  13b2d4:	e92d4070 	push	{r4, r5, r6, lr}
  13b2d8:	e1a06002 	mov	r6, r2
  13b2dc:	e1a04000 	mov	r4, r0
  13b2e0:	e1a05001 	mov	r5, r1
  13b2e4:	e59f001c 	ldr	r0, [pc, #28]	; 13b308 <syscall_fcntl+0x34>
  13b2e8:	e3a0100e 	mov	r1, #14
  13b2ec:	ebfffcf8 	bl	13a6d4 <syscall_debug>
  13b2f0:	e1a03006 	mov	r3, r6
  13b2f4:	e1a02005 	mov	r2, r5
  13b2f8:	e1a01004 	mov	r1, r4
  13b2fc:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b300:	e3a00007 	mov	r0, #7
  13b304:	ea0001f3 	b	13bad8 <syscall>
  13b308:	0014a378 	.word	0x0014a378

0013b30c <syscall_execve>:
  13b30c:	e92d4070 	push	{r4, r5, r6, lr}
  13b310:	e1a06002 	mov	r6, r2
  13b314:	e1a04000 	mov	r4, r0
  13b318:	e1a05001 	mov	r5, r1
  13b31c:	e59f001c 	ldr	r0, [pc, #28]	; 13b340 <syscall_execve+0x34>
  13b320:	e3a0100f 	mov	r1, #15
  13b324:	ebfffcea 	bl	13a6d4 <syscall_debug>
  13b328:	e1a03006 	mov	r3, r6
  13b32c:	e1a02005 	mov	r2, r5
  13b330:	e1a01004 	mov	r1, r4
  13b334:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b338:	e3a00089 	mov	r0, #137	; 0x89
  13b33c:	ea0001e5 	b	13bad8 <syscall>
  13b340:	0014a1a0 	.word	0x0014a1a0

0013b344 <syscall_open>:
  13b344:	e92d4070 	push	{r4, r5, r6, lr}
  13b348:	e1a06002 	mov	r6, r2
  13b34c:	e1a04000 	mov	r4, r0
  13b350:	e1a05001 	mov	r5, r1
  13b354:	e59f001c 	ldr	r0, [pc, #28]	; 13b378 <syscall_open+0x34>
  13b358:	e3a0100d 	mov	r1, #13
  13b35c:	ebfffcdc 	bl	13a6d4 <syscall_debug>
  13b360:	e1a03006 	mov	r3, r6
  13b364:	e1a02005 	mov	r2, r5
  13b368:	e1a01004 	mov	r1, r4
  13b36c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b370:	e3a00005 	mov	r0, #5
  13b374:	ea0001d7 	b	13bad8 <syscall>
  13b378:	0014a150 	.word	0x0014a150

0013b37c <syscall_write>:
  13b37c:	e92d4070 	push	{r4, r5, r6, lr}
  13b380:	e1a06002 	mov	r6, r2
  13b384:	e1a04000 	mov	r4, r0
  13b388:	e1a05001 	mov	r5, r1
  13b38c:	e59f001c 	ldr	r0, [pc, #28]	; 13b3b0 <syscall_write+0x34>
  13b390:	e3a0100e 	mov	r1, #14
  13b394:	ebfffcce 	bl	13a6d4 <syscall_debug>
  13b398:	e1a03006 	mov	r3, r6
  13b39c:	e1a02005 	mov	r2, r5
  13b3a0:	e1a01004 	mov	r1, r4
  13b3a4:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b3a8:	e3a00003 	mov	r0, #3
  13b3ac:	ea0001c9 	b	13bad8 <syscall>
  13b3b0:	0014a140 	.word	0x0014a140

0013b3b4 <syscall_read>:
  13b3b4:	e92d4070 	push	{r4, r5, r6, lr}
  13b3b8:	e1a06002 	mov	r6, r2
  13b3bc:	e1a04000 	mov	r4, r0
  13b3c0:	e1a05001 	mov	r5, r1
  13b3c4:	e59f001c 	ldr	r0, [pc, #28]	; 13b3e8 <syscall_read+0x34>
  13b3c8:	e3a0100d 	mov	r1, #13
  13b3cc:	ebfffcc0 	bl	13a6d4 <syscall_debug>
  13b3d0:	e1a03006 	mov	r3, r6
  13b3d4:	e1a02005 	mov	r2, r5
  13b3d8:	e1a01004 	mov	r1, r4
  13b3dc:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b3e0:	e3a00002 	mov	r0, #2
  13b3e4:	ea0001bb 	b	13bad8 <syscall>
  13b3e8:	0014a130 	.word	0x0014a130

0013b3ec <syscall_prlimit64>:
  13b3ec:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13b3f0:	e1a06002 	mov	r6, r2
  13b3f4:	e1a07003 	mov	r7, r3
  13b3f8:	e1a04000 	mov	r4, r0
  13b3fc:	e1a05001 	mov	r5, r1
  13b400:	e24dd00c 	sub	sp, sp, #12
  13b404:	e3a01012 	mov	r1, #18
  13b408:	e59f0020 	ldr	r0, [pc, #32]	; 13b430 <syscall_prlimit64+0x44>
  13b40c:	ebfffcb0 	bl	13a6d4 <syscall_debug>
  13b410:	e58d7000 	str	r7, [sp]
  13b414:	e1a03006 	mov	r3, r6
  13b418:	e1a02005 	mov	r2, r5
  13b41c:	e1a01004 	mov	r1, r4
  13b420:	e3a0008c 	mov	r0, #140	; 0x8c
  13b424:	eb0001ab 	bl	13bad8 <syscall>
  13b428:	e28dd00c 	add	sp, sp, #12
  13b42c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  13b430:	0014b934 	.word	0x0014b934

0013b434 <syscall_recv>:
  13b434:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13b438:	e1a06002 	mov	r6, r2
  13b43c:	e1a07003 	mov	r7, r3
  13b440:	e1a04000 	mov	r4, r0
  13b444:	e1a05001 	mov	r5, r1
  13b448:	e24dd00c 	sub	sp, sp, #12
  13b44c:	e3a0100d 	mov	r1, #13
  13b450:	e59f0020 	ldr	r0, [pc, #32]	; 13b478 <syscall_recv+0x44>
  13b454:	ebfffc9e 	bl	13a6d4 <syscall_debug>
  13b458:	e58d7000 	str	r7, [sp]
  13b45c:	e1a03006 	mov	r3, r6
  13b460:	e1a02005 	mov	r2, r5
  13b464:	e1a01004 	mov	r1, r4
  13b468:	e3a0004e 	mov	r0, #78	; 0x4e
  13b46c:	eb000199 	bl	13bad8 <syscall>
  13b470:	e28dd00c 	add	sp, sp, #12
  13b474:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  13b478:	0014b350 	.word	0x0014b350

0013b47c <syscall_send>:
  13b47c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13b480:	e1a06002 	mov	r6, r2
  13b484:	e1a07003 	mov	r7, r3
  13b488:	e1a04000 	mov	r4, r0
  13b48c:	e1a05001 	mov	r5, r1
  13b490:	e24dd00c 	sub	sp, sp, #12
  13b494:	e3a0100d 	mov	r1, #13
  13b498:	e59f0020 	ldr	r0, [pc, #32]	; 13b4c0 <syscall_send+0x44>
  13b49c:	ebfffc8c 	bl	13a6d4 <syscall_debug>
  13b4a0:	e58d7000 	str	r7, [sp]
  13b4a4:	e1a03006 	mov	r3, r6
  13b4a8:	e1a02005 	mov	r2, r5
  13b4ac:	e1a01004 	mov	r1, r4
  13b4b0:	e3a00050 	mov	r0, #80	; 0x50
  13b4b4:	eb000187 	bl	13bad8 <syscall>
  13b4b8:	e28dd00c 	add	sp, sp, #12
  13b4bc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  13b4c0:	0014b330 	.word	0x0014b330

0013b4c4 <syscall_rt_sigprocmask>:
  13b4c4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13b4c8:	e1a06002 	mov	r6, r2
  13b4cc:	e1a07003 	mov	r7, r3
  13b4d0:	e1a04000 	mov	r4, r0
  13b4d4:	e1a05001 	mov	r5, r1
  13b4d8:	e24dd00c 	sub	sp, sp, #12
  13b4dc:	e3a01017 	mov	r1, #23
  13b4e0:	e59f0020 	ldr	r0, [pc, #32]	; 13b508 <syscall_rt_sigprocmask+0x44>
  13b4e4:	ebfffc7a 	bl	13a6d4 <syscall_debug>
  13b4e8:	e58d7000 	str	r7, [sp]
  13b4ec:	e1a03006 	mov	r3, r6
  13b4f0:	e1a02005 	mov	r2, r5
  13b4f4:	e1a01004 	mov	r1, r4
  13b4f8:	e3a00068 	mov	r0, #104	; 0x68
  13b4fc:	eb000175 	bl	13bad8 <syscall>
  13b500:	e28dd00c 	add	sp, sp, #12
  13b504:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  13b508:	0014aa98 	.word	0x0014aa98

0013b50c <syscall_rt_sigaction>:
  13b50c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13b510:	e1a06002 	mov	r6, r2
  13b514:	e1a07003 	mov	r7, r3
  13b518:	e1a04000 	mov	r4, r0
  13b51c:	e1a05001 	mov	r5, r1
  13b520:	e24dd00c 	sub	sp, sp, #12
  13b524:	e3a01015 	mov	r1, #21
  13b528:	e59f0020 	ldr	r0, [pc, #32]	; 13b550 <syscall_rt_sigaction+0x44>
  13b52c:	ebfffc68 	bl	13a6d4 <syscall_debug>
  13b530:	e58d7000 	str	r7, [sp]
  13b534:	e1a03006 	mov	r3, r6
  13b538:	e1a02005 	mov	r2, r5
  13b53c:	e1a01004 	mov	r1, r4
  13b540:	e3a00067 	mov	r0, #103	; 0x67
  13b544:	eb000163 	bl	13bad8 <syscall>
  13b548:	e28dd00c 	add	sp, sp, #12
  13b54c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  13b550:	0014aa80 	.word	0x0014aa80

0013b554 <syscall_sigprocmask>:
  13b554:	e92d4070 	push	{r4, r5, r6, lr}
  13b558:	e1a04000 	mov	r4, r0
  13b55c:	e24dd008 	sub	sp, sp, #8
  13b560:	e1a05001 	mov	r5, r1
  13b564:	e59f002c 	ldr	r0, [pc, #44]	; 13b598 <syscall_sigprocmask+0x44>
  13b568:	e3a01014 	mov	r1, #20
  13b56c:	e1a06002 	mov	r6, r2
  13b570:	ebfffc57 	bl	13a6d4 <syscall_debug>
  13b574:	e3a00080 	mov	r0, #128	; 0x80
  13b578:	e1a03006 	mov	r3, r6
  13b57c:	e58d0000 	str	r0, [sp]
  13b580:	e1a02005 	mov	r2, r5
  13b584:	e1a01004 	mov	r1, r4
  13b588:	e3a00068 	mov	r0, #104	; 0x68
  13b58c:	eb000151 	bl	13bad8 <syscall>
  13b590:	e28dd008 	add	sp, sp, #8
  13b594:	e8bd8070 	pop	{r4, r5, r6, pc}
  13b598:	0014a720 	.word	0x0014a720

0013b59c <syscall_sigaction>:
  13b59c:	e92d4070 	push	{r4, r5, r6, lr}
  13b5a0:	e1a04000 	mov	r4, r0
  13b5a4:	e24dd008 	sub	sp, sp, #8
  13b5a8:	e1a05001 	mov	r5, r1
  13b5ac:	e59f002c 	ldr	r0, [pc, #44]	; 13b5e0 <syscall_sigaction+0x44>
  13b5b0:	e3a01012 	mov	r1, #18
  13b5b4:	e1a06002 	mov	r6, r2
  13b5b8:	ebfffc45 	bl	13a6d4 <syscall_debug>
  13b5bc:	e3a00080 	mov	r0, #128	; 0x80
  13b5c0:	e1a03006 	mov	r3, r6
  13b5c4:	e58d0000 	str	r0, [sp]
  13b5c8:	e1a02005 	mov	r2, r5
  13b5cc:	e1a01004 	mov	r1, r4
  13b5d0:	e3a00067 	mov	r0, #103	; 0x67
  13b5d4:	eb00013f 	bl	13bad8 <syscall>
  13b5d8:	e28dd008 	add	sp, sp, #8
  13b5dc:	e8bd8070 	pop	{r4, r5, r6, pc}
  13b5e0:	0014a408 	.word	0x0014a408

0013b5e4 <syscall_getsockopt>:
  13b5e4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13b5e8:	e1a06002 	mov	r6, r2
  13b5ec:	e1a08003 	mov	r8, r3
  13b5f0:	e1a04000 	mov	r4, r0
  13b5f4:	e1a05001 	mov	r5, r1
  13b5f8:	e24dd008 	sub	sp, sp, #8
  13b5fc:	e59d7020 	ldr	r7, [sp, #32]
  13b600:	e3a01013 	mov	r1, #19
  13b604:	e59f0024 	ldr	r0, [pc, #36]	; 13b630 <syscall_getsockopt+0x4c>
  13b608:	ebfffc31 	bl	13a6d4 <syscall_debug>
  13b60c:	e58d8000 	str	r8, [sp]
  13b610:	e58d7004 	str	r7, [sp, #4]
  13b614:	e1a03006 	mov	r3, r6
  13b618:	e1a02005 	mov	r2, r5
  13b61c:	e1a01004 	mov	r1, r4
  13b620:	e3a0004a 	mov	r0, #74	; 0x4a
  13b624:	eb00012b 	bl	13bad8 <syscall>
  13b628:	e28dd008 	add	sp, sp, #8
  13b62c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13b630:	0014b39c 	.word	0x0014b39c

0013b634 <syscall_setsockopt>:
  13b634:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13b638:	e1a06002 	mov	r6, r2
  13b63c:	e1a08003 	mov	r8, r3
  13b640:	e1a04000 	mov	r4, r0
  13b644:	e1a05001 	mov	r5, r1
  13b648:	e24dd008 	sub	sp, sp, #8
  13b64c:	e59d7020 	ldr	r7, [sp, #32]
  13b650:	e3a01013 	mov	r1, #19
  13b654:	e59f0024 	ldr	r0, [pc, #36]	; 13b680 <syscall_setsockopt+0x4c>
  13b658:	ebfffc1d 	bl	13a6d4 <syscall_debug>
  13b65c:	e58d8000 	str	r8, [sp]
  13b660:	e58d7004 	str	r7, [sp, #4]
  13b664:	e1a03006 	mov	r3, r6
  13b668:	e1a02005 	mov	r2, r5
  13b66c:	e1a01004 	mov	r1, r4
  13b670:	e3a0004b 	mov	r0, #75	; 0x4b
  13b674:	eb000117 	bl	13bad8 <syscall>
  13b678:	e28dd008 	add	sp, sp, #8
  13b67c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13b680:	0014b388 	.word	0x0014b388

0013b684 <syscall_mremap>:
  13b684:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13b688:	e1a06002 	mov	r6, r2
  13b68c:	e1a08003 	mov	r8, r3
  13b690:	e1a04000 	mov	r4, r0
  13b694:	e1a05001 	mov	r5, r1
  13b698:	e24dd008 	sub	sp, sp, #8
  13b69c:	e59d7020 	ldr	r7, [sp, #32]
  13b6a0:	e3a0100f 	mov	r1, #15
  13b6a4:	e59f0024 	ldr	r0, [pc, #36]	; 13b6d0 <syscall_mremap+0x4c>
  13b6a8:	ebfffc09 	bl	13a6d4 <syscall_debug>
  13b6ac:	e58d8000 	str	r8, [sp]
  13b6b0:	e58d7004 	str	r7, [sp, #4]
  13b6b4:	e1a03006 	mov	r3, r6
  13b6b8:	e1a02005 	mov	r2, r5
  13b6bc:	e1a01004 	mov	r1, r4
  13b6c0:	e3a00092 	mov	r0, #146	; 0x92
  13b6c4:	eb000103 	bl	13bad8 <syscall>
  13b6c8:	e28dd008 	add	sp, sp, #8
  13b6cc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13b6d0:	0014a9d4 	.word	0x0014a9d4

0013b6d4 <syscall__newselect>:
  13b6d4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13b6d8:	e1a06002 	mov	r6, r2
  13b6dc:	e1a08003 	mov	r8, r3
  13b6e0:	e1a04000 	mov	r4, r0
  13b6e4:	e1a05001 	mov	r5, r1
  13b6e8:	e24dd008 	sub	sp, sp, #8
  13b6ec:	e59d7020 	ldr	r7, [sp, #32]
  13b6f0:	e3a01013 	mov	r1, #19
  13b6f4:	e59f0024 	ldr	r0, [pc, #36]	; 13b720 <syscall__newselect+0x4c>
  13b6f8:	ebfffbf5 	bl	13a6d4 <syscall_debug>
  13b6fc:	e58d8000 	str	r8, [sp]
  13b700:	e58d7004 	str	r7, [sp, #4]
  13b704:	e1a03006 	mov	r3, r6
  13b708:	e1a02005 	mov	r2, r5
  13b70c:	e1a01004 	mov	r1, r4
  13b710:	e3a0005e 	mov	r0, #94	; 0x5e
  13b714:	eb0000ef 	bl	13bad8 <syscall>
  13b718:	e28dd008 	add	sp, sp, #8
  13b71c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13b720:	0014a814 	.word	0x0014a814

0013b724 <syscall__llseek>:
  13b724:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13b728:	e1a06002 	mov	r6, r2
  13b72c:	e1a05000 	mov	r5, r0
  13b730:	e1a08001 	mov	r8, r1
  13b734:	e24dd008 	sub	sp, sp, #8
  13b738:	e59d7020 	ldr	r7, [sp, #32]
  13b73c:	e3a01010 	mov	r1, #16
  13b740:	e59f0034 	ldr	r0, [pc, #52]	; 13b77c <syscall__llseek+0x58>
  13b744:	e1a04003 	mov	r4, r3
  13b748:	ebfffbe1 	bl	13a6d4 <syscall_debug>
  13b74c:	e1a01005 	mov	r1, r5
  13b750:	e58d8000 	str	r8, [sp]
  13b754:	e58d7004 	str	r7, [sp, #4]
  13b758:	e1a03006 	mov	r3, r6
  13b75c:	e3a02000 	mov	r2, #0
  13b760:	e3a00004 	mov	r0, #4
  13b764:	eb0000db 	bl	13bad8 <syscall>
  13b768:	e1a01fc0 	asr	r1, r0, #31
  13b76c:	e8840003 	stm	r4, {r0, r1}
  13b770:	e1a00fc1 	asr	r0, r1, #31
  13b774:	e28dd008 	add	sp, sp, #8
  13b778:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13b77c:	0014a7f0 	.word	0x0014a7f0

0013b780 <syscall_recvfrom>:
  13b780:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  13b784:	e1a06002 	mov	r6, r2
  13b788:	e1a09003 	mov	r9, r3
  13b78c:	e1a04000 	mov	r4, r0
  13b790:	e1a05001 	mov	r5, r1
  13b794:	e24dd014 	sub	sp, sp, #20
  13b798:	e59d7030 	ldr	r7, [sp, #48]	; 0x30
  13b79c:	e59d8034 	ldr	r8, [sp, #52]	; 0x34
  13b7a0:	e3a01011 	mov	r1, #17
  13b7a4:	e59f0024 	ldr	r0, [pc, #36]	; 13b7d0 <syscall_recvfrom+0x50>
  13b7a8:	ebfffbc9 	bl	13a6d4 <syscall_debug>
  13b7ac:	e58d9000 	str	r9, [sp]
  13b7b0:	e98d0180 	stmib	sp, {r7, r8}
  13b7b4:	e1a03006 	mov	r3, r6
  13b7b8:	e1a02005 	mov	r2, r5
  13b7bc:	e1a01004 	mov	r1, r4
  13b7c0:	e3a0004f 	mov	r0, #79	; 0x4f
  13b7c4:	eb0000c3 	bl	13bad8 <syscall>
  13b7c8:	e28dd014 	add	sp, sp, #20
  13b7cc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  13b7d0:	0014b360 	.word	0x0014b360

0013b7d4 <syscall_sendto>:
  13b7d4:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  13b7d8:	e1a06002 	mov	r6, r2
  13b7dc:	e1a09003 	mov	r9, r3
  13b7e0:	e1a04000 	mov	r4, r0
  13b7e4:	e1a05001 	mov	r5, r1
  13b7e8:	e24dd014 	sub	sp, sp, #20
  13b7ec:	e59d7030 	ldr	r7, [sp, #48]	; 0x30
  13b7f0:	e59d8034 	ldr	r8, [sp, #52]	; 0x34
  13b7f4:	e3a0100f 	mov	r1, #15
  13b7f8:	e59f0024 	ldr	r0, [pc, #36]	; 13b824 <syscall_sendto+0x50>
  13b7fc:	ebfffbb4 	bl	13a6d4 <syscall_debug>
  13b800:	e58d9000 	str	r9, [sp]
  13b804:	e98d0180 	stmib	sp, {r7, r8}
  13b808:	e1a03006 	mov	r3, r6
  13b80c:	e1a02005 	mov	r2, r5
  13b810:	e1a01004 	mov	r1, r4
  13b814:	e3a00051 	mov	r0, #81	; 0x51
  13b818:	eb0000ae 	bl	13bad8 <syscall>
  13b81c:	e28dd014 	add	sp, sp, #20
  13b820:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  13b824:	0014b340 	.word	0x0014b340

0013b828 <syscall_futex>:
  13b828:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  13b82c:	e1a06002 	mov	r6, r2
  13b830:	e1a09003 	mov	r9, r3
  13b834:	e1a04000 	mov	r4, r0
  13b838:	e1a05001 	mov	r5, r1
  13b83c:	e24dd014 	sub	sp, sp, #20
  13b840:	e59d7030 	ldr	r7, [sp, #48]	; 0x30
  13b844:	e59d8034 	ldr	r8, [sp, #52]	; 0x34
  13b848:	e3a0100e 	mov	r1, #14
  13b84c:	e59f0024 	ldr	r0, [pc, #36]	; 13b878 <syscall_futex+0x50>
  13b850:	ebfffb9f 	bl	13a6d4 <syscall_debug>
  13b854:	e58d9000 	str	r9, [sp]
  13b858:	e98d0180 	stmib	sp, {r7, r8}
  13b85c:	e1a03006 	mov	r3, r6
  13b860:	e1a02005 	mov	r2, r5
  13b864:	e1a01004 	mov	r1, r4
  13b868:	e3a00083 	mov	r0, #131	; 0x83
  13b86c:	eb000099 	bl	13bad8 <syscall>
  13b870:	e28dd014 	add	sp, sp, #20
  13b874:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  13b878:	0014af38 	.word	0x0014af38

0013b87c <syscall_mmap2>:
  13b87c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  13b880:	e1a06002 	mov	r6, r2
  13b884:	e1a09003 	mov	r9, r3
  13b888:	e1a04000 	mov	r4, r0
  13b88c:	e1a05001 	mov	r5, r1
  13b890:	e59d7020 	ldr	r7, [sp, #32]
  13b894:	e59d8028 	ldr	r8, [sp, #40]	; 0x28
  13b898:	e3a0100e 	mov	r1, #14
  13b89c:	e59f0024 	ldr	r0, [pc, #36]	; 13b8c8 <syscall_mmap2+0x4c>
  13b8a0:	ebfffb8b 	bl	13a6d4 <syscall_debug>
  13b8a4:	e58d9020 	str	r9, [sp, #32]
  13b8a8:	e58d8028 	str	r8, [sp, #40]	; 0x28
  13b8ac:	e58d7024 	str	r7, [sp, #36]	; 0x24
  13b8b0:	e1a03006 	mov	r3, r6
  13b8b4:	e1a02005 	mov	r2, r5
  13b8b8:	e1a01004 	mov	r1, r4
  13b8bc:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
  13b8c0:	e3a00035 	mov	r0, #53	; 0x35
  13b8c4:	ea000083 	b	13bad8 <syscall>
  13b8c8:	0014abc0 	.word	0x0014abc0

0013b8cc <syscall_gettid>:
  13b8cc:	e92d4010 	push	{r4, lr}
  13b8d0:	e59f0010 	ldr	r0, [pc, #16]	; 13b8e8 <syscall_gettid+0x1c>
  13b8d4:	e3a0100f 	mov	r1, #15
  13b8d8:	ebfffb7d 	bl	13a6d4 <syscall_debug>
  13b8dc:	e8bd4010 	pop	{r4, lr}
  13b8e0:	e3a0008b 	mov	r0, #139	; 0x8b
  13b8e4:	ea00007b 	b	13bad8 <syscall>
  13b8e8:	0014adf8 	.word	0x0014adf8

0013b8ec <syscall_vfork>:
  13b8ec:	e92d4010 	push	{r4, lr}
  13b8f0:	e59f0010 	ldr	r0, [pc, #16]	; 13b908 <syscall_vfork+0x1c>
  13b8f4:	e3a0100e 	mov	r1, #14
  13b8f8:	ebfffb75 	bl	13a6d4 <syscall_debug>
  13b8fc:	e8bd4010 	pop	{r4, lr}
  13b900:	e3a0008a 	mov	r0, #138	; 0x8a
  13b904:	ea000073 	b	13bad8 <syscall>
  13b908:	0014ab9c 	.word	0x0014ab9c

0013b90c <syscall_setsid>:
  13b90c:	e92d4010 	push	{r4, lr}
  13b910:	e59f0010 	ldr	r0, [pc, #16]	; 13b928 <syscall_setsid+0x1c>
  13b914:	e3a0100f 	mov	r1, #15
  13b918:	ebfffb6d 	bl	13a6d4 <syscall_debug>
  13b91c:	e8bd4010 	pop	{r4, lr}
  13b920:	e3a0008f 	mov	r0, #143	; 0x8f
  13b924:	ea00006b 	b	13bad8 <syscall>
  13b928:	0014a3f8 	.word	0x0014a3f8

0013b92c <syscall_getpid>:
  13b92c:	e92d4010 	push	{r4, lr}
  13b930:	e59f0010 	ldr	r0, [pc, #16]	; 13b948 <syscall_getpid+0x1c>
  13b934:	e3a0100f 	mov	r1, #15
  13b938:	ebfffb65 	bl	13a6d4 <syscall_debug>
  13b93c:	e8bd4010 	pop	{r4, lr}
  13b940:	e3a0000f 	mov	r0, #15
  13b944:	ea000063 	b	13bad8 <syscall>
  13b948:	0014a200 	.word	0x0014a200

0013b94c <syscall_fork>:
  13b94c:	e92d4010 	push	{r4, lr}
  13b950:	e59f0010 	ldr	r0, [pc, #16]	; 13b968 <syscall_fork+0x1c>
  13b954:	e3a0100d 	mov	r1, #13
  13b958:	ebfffb5d 	bl	13a6d4 <syscall_debug>
  13b95c:	e8bd4010 	pop	{r4, lr}
  13b960:	e3a00088 	mov	r0, #136	; 0x88
  13b964:	ea00005b 	b	13bad8 <syscall>
  13b968:	0014a120 	.word	0x0014a120

0013b96c <syscall_ioctl>:
  13b96c:	e92d4070 	push	{r4, r5, r6, lr}
  13b970:	e1a04000 	mov	r4, r0
  13b974:	e1a05001 	mov	r5, r1
  13b978:	e59f0030 	ldr	r0, [pc, #48]	; 13b9b0 <syscall_ioctl+0x44>
  13b97c:	e3a0100e 	mov	r1, #14
  13b980:	e1a06002 	mov	r6, r2
  13b984:	ebfffb52 	bl	13a6d4 <syscall_debug>
  13b988:	e3540001 	cmp	r4, #1
  13b98c:	0a000005 	beq	13b9a8 <syscall_ioctl+0x3c>
  13b990:	e1a03006 	mov	r3, r6
  13b994:	e1a02005 	mov	r2, r5
  13b998:	e1a01004 	mov	r1, r4
  13b99c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b9a0:	e3a00007 	mov	r0, #7
  13b9a4:	ea00004b 	b	13bad8 <syscall>
  13b9a8:	e3a00000 	mov	r0, #0
  13b9ac:	e8bd8070 	pop	{r4, r5, r6, pc}
  13b9b0:	0014a368 	.word	0x0014a368

0013b9b4 <syscall_lseek>:
  13b9b4:	e92d4070 	push	{r4, r5, r6, lr}
  13b9b8:	e1a04001 	mov	r4, r1
  13b9bc:	e24dd008 	sub	sp, sp, #8
  13b9c0:	e1a05000 	mov	r5, r0
  13b9c4:	e3a0100e 	mov	r1, #14
  13b9c8:	e59f0058 	ldr	r0, [pc, #88]	; 13ba28 <syscall_lseek+0x74>
  13b9cc:	e1a06002 	mov	r6, r2
  13b9d0:	ebfffb3f 	bl	13a6d4 <syscall_debug>
  13b9d4:	e3540000 	cmp	r4, #0
  13b9d8:	ba000008 	blt	13ba00 <syscall_lseek+0x4c>
  13b9dc:	e3a02000 	mov	r2, #0
  13b9e0:	e58d6004 	str	r6, [sp, #4]
  13b9e4:	e1a03004 	mov	r3, r4
  13b9e8:	e1a01005 	mov	r1, r5
  13b9ec:	e58d2000 	str	r2, [sp]
  13b9f0:	e3a00004 	mov	r0, #4
  13b9f4:	eb000037 	bl	13bad8 <syscall>
  13b9f8:	e28dd008 	add	sp, sp, #8
  13b9fc:	e8bd8070 	pop	{r4, r5, r6, pc}
  13ba00:	e3e02000 	mvn	r2, #0
  13ba04:	e58d6004 	str	r6, [sp, #4]
  13ba08:	e58d2000 	str	r2, [sp]
  13ba0c:	e1a03004 	mov	r3, r4
  13ba10:	e1a01005 	mov	r1, r5
  13ba14:	e3a02000 	mov	r2, #0
  13ba18:	e3a00004 	mov	r0, #4
  13ba1c:	eb00002d 	bl	13bad8 <syscall>
  13ba20:	e28dd008 	add	sp, sp, #8
  13ba24:	e8bd8070 	pop	{r4, r5, r6, pc}
  13ba28:	0014a1f0 	.word	0x0014a1f0

0013ba2c <get_rtt_syscall>:
  13ba2c:	e3500e19 	cmp	r0, #400	; 0x190
  13ba30:	3a000005 	bcc	13ba4c <get_rtt_syscall+0x20>
  13ba34:	e59f201c 	ldr	r2, [pc, #28]	; 13ba58 <get_rtt_syscall+0x2c>
  13ba38:	e59f301c 	ldr	r3, [pc, #28]	; 13ba5c <get_rtt_syscall+0x30>
  13ba3c:	e1500002 	cmp	r0, r2
  13ba40:	01a00003 	moveq	r0, r3
  13ba44:	13a00000 	movne	r0, #0
  13ba48:	e12fff1e 	bx	lr
  13ba4c:	e59f300c 	ldr	r3, [pc, #12]	; 13ba60 <get_rtt_syscall+0x34>
  13ba50:	e7930100 	ldr	r0, [r3, r0, lsl #2]
  13ba54:	e12fff1e 	bx	lr
  13ba58:	000f0005 	.word	0x000f0005
  13ba5c:	0013890c 	.word	0x0013890c
  13ba60:	0014bbd8 	.word	0x0014bbd8

0013ba64 <___syscall>:
  13ba64:	e92d4070 	push	{r4, r5, r6, lr}
  13ba68:	e1a0c001 	mov	ip, r1
  13ba6c:	e3500e19 	cmp	r0, #400	; 0x190
  13ba70:	e1a01002 	mov	r1, r2
  13ba74:	e1a02003 	mov	r2, r3
  13ba78:	e28d3010 	add	r3, sp, #16
  13ba7c:	e8930078 	ldm	r3, {r3, r4, r5, r6}
  13ba80:	2a00000a 	bcs	13bab0 <___syscall+0x4c>
  13ba84:	e59fe03c 	ldr	lr, [pc, #60]	; 13bac8 <___syscall+0x64>
  13ba88:	e79ee100 	ldr	lr, [lr, r0, lsl #2]
  13ba8c:	e35e0000 	cmp	lr, #0
  13ba90:	0a00000a 	beq	13bac0 <___syscall+0x5c>
  13ba94:	e58d6018 	str	r6, [sp, #24]
  13ba98:	e58d5014 	str	r5, [sp, #20]
  13ba9c:	e58d4010 	str	r4, [sp, #16]
  13baa0:	e1a0000c 	mov	r0, ip
  13baa4:	e1a0c00e 	mov	ip, lr
  13baa8:	e8bd4070 	pop	{r4, r5, r6, lr}
  13baac:	e12fff1c 	bx	ip
  13bab0:	e59fe014 	ldr	lr, [pc, #20]	; 13bacc <___syscall+0x68>
  13bab4:	e150000e 	cmp	r0, lr
  13bab8:	059fe010 	ldreq	lr, [pc, #16]	; 13bad0 <___syscall+0x6c>
  13babc:	0afffff4 	beq	13ba94 <___syscall+0x30>
  13bac0:	e3a00000 	mov	r0, #0
  13bac4:	e8bd8070 	pop	{r4, r5, r6, pc}
  13bac8:	0014bbd8 	.word	0x0014bbd8
  13bacc:	000f0005 	.word	0x000f0005
  13bad0:	0013890c 	.word	0x0013890c

0013bad4 <__syscall>:
  13bad4:	eaffffe2 	b	13ba64 <___syscall>

0013bad8 <syscall>:
  13bad8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13badc:	e1a07000 	mov	r7, r0
  13bae0:	e1a00001 	mov	r0, r1
  13bae4:	e1a01002 	mov	r1, r2
  13bae8:	e1a02003 	mov	r2, r3
  13baec:	e28d6014 	add	r6, sp, #20
  13baf0:	e8960038 	ldm	r6, {r3, r4, r5}
  13baf4:	ef000000 	svc	0x00000000
  13baf8:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
  13bafc:	e12fff1e 	bx	lr

0013bb00 <__syscall_ret>:
  13bb00:	e3700a01 	cmn	r0, #4096	; 0x1000
  13bb04:	912fff1e 	bxls	lr
  13bb08:	e92d4010 	push	{r4, lr}
  13bb0c:	e1a04000 	mov	r4, r0
  13bb10:	ebfff28f 	bl	138554 <__errno_location>
  13bb14:	e2644000 	rsb	r4, r4, #0
  13bb18:	e5804000 	str	r4, [r0]
  13bb1c:	e3e00000 	mvn	r0, #0
  13bb20:	e8bd8010 	pop	{r4, pc}

0013bb24 <__lctrans_impl>:
  13bb24:	e12fff1e 	bx	lr

0013bb28 <__lctrans>:
  13bb28:	eafffffd 	b	13bb24 <__lctrans_impl>

0013bb2c <__lctrans_cur>:
  13bb2c:	e1a02000 	mov	r2, r0
  13bb30:	e59f301c 	ldr	r3, [pc, #28]	; 13bb54 <__lctrans_cur+0x28>
  13bb34:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13bb38:	e5930000 	ldr	r0, [r3]
  13bb3c:	e12fff30 	blx	r0
  13bb40:	e5103018 	ldr	r3, [r0, #-24]	; 0xffffffe8
  13bb44:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13bb48:	e1a00002 	mov	r0, r2
  13bb4c:	e5931014 	ldr	r1, [r3, #20]
  13bb50:	eafffff3 	b	13bb24 <__lctrans_impl>
  13bb54:	0014d3d4 	.word	0x0014d3d4

0013bb58 <__simple_malloc>:
  13bb58:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13bb5c:	e2505000 	subs	r5, r0, #0
  13bb60:	e24dd008 	sub	sp, sp, #8
  13bb64:	0a000016 	beq	13bbc4 <__simple_malloc+0x6c>
  13bb68:	e3550001 	cmp	r5, #1
  13bb6c:	9a000037 	bls	13bc50 <__simple_malloc+0xf8>
  13bb70:	e3a03001 	mov	r3, #1
  13bb74:	e1a03083 	lsl	r3, r3, #1
  13bb78:	e1550003 	cmp	r5, r3
  13bb7c:	83a02001 	movhi	r2, #1
  13bb80:	93a02000 	movls	r2, #0
  13bb84:	e353000f 	cmp	r3, #15
  13bb88:	83a02000 	movhi	r2, #0
  13bb8c:	e3520000 	cmp	r2, #0
  13bb90:	1afffff7 	bne	13bb74 <__simple_malloc+0x1c>
  13bb94:	e2434001 	sub	r4, r3, #1
  13bb98:	e59f60c8 	ldr	r6, [pc, #200]	; 13bc68 <__simple_malloc+0x110>
  13bb9c:	e59f00c8 	ldr	r0, [pc, #200]	; 13bc6c <__simple_malloc+0x114>
  13bba0:	eb001586 	bl	1411c0 <__lock>
  13bba4:	e5962000 	ldr	r2, [r6]
  13bba8:	e355013e 	cmp	r5, #-2147483633	; 0x8000000f
  13bbac:	e2623000 	rsb	r3, r2, #0
  13bbb0:	e0044003 	and	r4, r4, r3
  13bbb4:	8a000009 	bhi	13bbe0 <__simple_malloc+0x88>
  13bbb8:	e0853004 	add	r3, r5, r4
  13bbbc:	e1a05004 	mov	r5, r4
  13bbc0:	ea000004 	b	13bbd8 <__simple_malloc+0x80>
  13bbc4:	e59f00a0 	ldr	r0, [pc, #160]	; 13bc6c <__simple_malloc+0x114>
  13bbc8:	eb00157c 	bl	1411c0 <__lock>
  13bbcc:	e3a03001 	mov	r3, #1
  13bbd0:	e59f6090 	ldr	r6, [pc, #144]	; 13bc68 <__simple_malloc+0x110>
  13bbd4:	e5962000 	ldr	r2, [r6]
  13bbd8:	e1a04005 	mov	r4, r5
  13bbdc:	e1a05003 	mov	r5, r3
  13bbe0:	e59f8088 	ldr	r8, [pc, #136]	; 13bc70 <__simple_malloc+0x118>
  13bbe4:	e5981000 	ldr	r1, [r8]
  13bbe8:	e0411002 	sub	r1, r1, r2
  13bbec:	e1510005 	cmp	r1, r5
  13bbf0:	20827004 	addcs	r7, r2, r4
  13bbf4:	2a00000e 	bcs	13bc34 <__simple_malloc+0xdc>
  13bbf8:	e28d0008 	add	r0, sp, #8
  13bbfc:	e5205004 	str	r5, [r0, #-4]!
  13bc00:	eb001b2d 	bl	1428bc <__expand_heap>
  13bc04:	e2503000 	subs	r3, r0, #0
  13bc08:	0a000012 	beq	13bc58 <__simple_malloc+0x100>
  13bc0c:	e5982000 	ldr	r2, [r8]
  13bc10:	e59d1004 	ldr	r1, [sp, #4]
  13bc14:	e1520003 	cmp	r2, r3
  13bc18:	05962000 	ldreq	r2, [r6]
  13bc1c:	11a07003 	movne	r7, r3
  13bc20:	11a02003 	movne	r2, r3
  13bc24:	e0833001 	add	r3, r3, r1
  13bc28:	00827004 	addeq	r7, r2, r4
  13bc2c:	10455004 	subne	r5, r5, r4
  13bc30:	e5883000 	str	r3, [r8]
  13bc34:	e0825005 	add	r5, r2, r5
  13bc38:	e59f002c 	ldr	r0, [pc, #44]	; 13bc6c <__simple_malloc+0x114>
  13bc3c:	e5865000 	str	r5, [r6]
  13bc40:	eb0015b6 	bl	141320 <__unlock>
  13bc44:	e1a00007 	mov	r0, r7
  13bc48:	e28dd008 	add	sp, sp, #8
  13bc4c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13bc50:	e3a04000 	mov	r4, #0
  13bc54:	eaffffcf 	b	13bb98 <__simple_malloc+0x40>
  13bc58:	e59f000c 	ldr	r0, [pc, #12]	; 13bc6c <__simple_malloc+0x114>
  13bc5c:	e1a07003 	mov	r7, r3
  13bc60:	eb0015ae 	bl	141320 <__unlock>
  13bc64:	eafffff6 	b	13bc44 <__simple_malloc+0xec>
  13bc68:	0014e394 	.word	0x0014e394
  13bc6c:	0014e39c 	.word	0x0014e39c
  13bc70:	0014e398 	.word	0x0014e398

0013bc74 <__simple_calloc>:
  13bc74:	e3510000 	cmp	r1, #0
  13bc78:	e1a0c000 	mov	ip, r0
  13bc7c:	0a000002 	beq	13bc8c <__simple_calloc+0x18>
  13bc80:	e0832190 	umull	r2, r3, r0, r1
  13bc84:	e3530000 	cmp	r3, #0
  13bc88:	1a000001 	bne	13bc94 <__simple_calloc+0x20>
  13bc8c:	e0000c91 	mul	r0, r1, ip
  13bc90:	eaffffb0 	b	13bb58 <__simple_malloc>
  13bc94:	e92d4010 	push	{r4, lr}
  13bc98:	ebfff22d 	bl	138554 <__errno_location>
  13bc9c:	e3a0300c 	mov	r3, #12
  13bca0:	e5803000 	str	r3, [r0]
  13bca4:	e3a00000 	mov	r0, #0
  13bca8:	e8bd8010 	pop	{r4, pc}

0013bcac <adjust_size>:
  13bcac:	e5903000 	ldr	r3, [r0]
  13bcb0:	e59f2058 	ldr	r2, [pc, #88]	; 13bd10 <adjust_size+0x64>
  13bcb4:	e2431001 	sub	r1, r3, #1
  13bcb8:	e1510002 	cmp	r1, r2
  13bcbc:	9a000006 	bls	13bcdc <adjust_size+0x30>
  13bcc0:	e3530000 	cmp	r3, #0
  13bcc4:	03a01010 	moveq	r1, #16
  13bcc8:	01a02003 	moveq	r2, r3
  13bccc:	05801000 	streq	r1, [r0]
  13bcd0:	1a000007 	bne	13bcf4 <adjust_size+0x48>
  13bcd4:	e1a00002 	mov	r0, r2
  13bcd8:	e12fff1e 	bx	lr
  13bcdc:	e3a02000 	mov	r2, #0
  13bce0:	e2833017 	add	r3, r3, #23
  13bce4:	e3c3300f 	bic	r3, r3, #15
  13bce8:	e5803000 	str	r3, [r0]
  13bcec:	e1a00002 	mov	r0, r2
  13bcf0:	e12fff1e 	bx	lr
  13bcf4:	e92d4010 	push	{r4, lr}
  13bcf8:	ebfff215 	bl	138554 <__errno_location>
  13bcfc:	e3a0300c 	mov	r3, #12
  13bd00:	e3e02000 	mvn	r2, #0
  13bd04:	e5803000 	str	r3, [r0]
  13bd08:	e1a00002 	mov	r0, r2
  13bd0c:	e8bd8010 	pop	{r4, pc}
  13bd10:	7fffefef 	.word	0x7fffefef

0013bd14 <unbin>:
  13bd14:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13bd18:	e590200c 	ldr	r2, [r0, #12]
  13bd1c:	e1a07000 	mov	r7, r0
  13bd20:	e5900008 	ldr	r0, [r0, #8]
  13bd24:	e24dd00c 	sub	sp, sp, #12
  13bd28:	e1520000 	cmp	r2, r0
  13bd2c:	0a00000b 	beq	13bd60 <unbin+0x4c>
  13bd30:	e5973004 	ldr	r3, [r7, #4]
  13bd34:	e5820008 	str	r0, [r2, #8]
  13bd38:	e3c30001 	bic	r0, r3, #1
  13bd3c:	e7971000 	ldr	r1, [r7, r0]
  13bd40:	e597c008 	ldr	ip, [r7, #8]
  13bd44:	e3833001 	orr	r3, r3, #1
  13bd48:	e3811001 	orr	r1, r1, #1
  13bd4c:	e58c200c 	str	r2, [ip, #12]
  13bd50:	e5873004 	str	r3, [r7, #4]
  13bd54:	e7871000 	str	r1, [r7, r0]
  13bd58:	e28dd00c 	add	sp, sp, #12
  13bd5c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13bd60:	e3a00001 	mov	r0, #1
  13bd64:	e241c020 	sub	ip, r1, #32
  13bd68:	e1a0a110 	lsl	sl, r0, r1
  13bd6c:	e1a0bc10 	lsl	fp, r0, ip
  13bd70:	e261c020 	rsb	ip, r1, #32
  13bd74:	e1e0100a 	mvn	r1, sl
  13bd78:	e18bbc30 	orr	fp, fp, r0, lsr ip
  13bd7c:	e3710001 	cmn	r1, #1
  13bd80:	e1e0200b 	mvn	r2, fp
  13bd84:	0a000014 	beq	13bddc <unbin+0xc8>
  13bd88:	e59f40a4 	ldr	r4, [pc, #164]	; 13be34 <unbin+0x120>
  13bd8c:	e1a0b007 	mov	fp, r7
  13bd90:	e1a09004 	mov	r9, r4
  13bd94:	e1a07001 	mov	r7, r1
  13bd98:	e88d0006 	stm	sp, {r1, r2}
  13bd9c:	e59f6094 	ldr	r6, [pc, #148]	; 13be38 <unbin+0x124>
  13bda0:	e5945000 	ldr	r5, [r4]
  13bda4:	e0078005 	and	r8, r7, r5
  13bda8:	ea000002 	b	13bdb8 <unbin+0xa4>
  13bdac:	e5943000 	ldr	r3, [r4]
  13bdb0:	e1550003 	cmp	r5, r3
  13bdb4:	1afffff9 	bne	13bda0 <unbin+0x8c>
  13bdb8:	e1a00005 	mov	r0, r5
  13bdbc:	e1a01008 	mov	r1, r8
  13bdc0:	e1a02009 	mov	r2, r9
  13bdc4:	e5963000 	ldr	r3, [r6]
  13bdc8:	e12fff33 	blx	r3
  13bdcc:	e3500000 	cmp	r0, #0
  13bdd0:	1afffff5 	bne	13bdac <unbin+0x98>
  13bdd4:	e1a0700b 	mov	r7, fp
  13bdd8:	e89d0006 	ldm	sp, {r1, r2}
  13bddc:	e3720001 	cmn	r2, #1
  13bde0:	0a000010 	beq	13be28 <unbin+0x114>
  13bde4:	e1a0a002 	mov	sl, r2
  13bde8:	e59f4044 	ldr	r4, [pc, #68]	; 13be34 <unbin+0x120>
  13bdec:	e59f6044 	ldr	r6, [pc, #68]	; 13be38 <unbin+0x124>
  13bdf0:	e2849004 	add	r9, r4, #4
  13bdf4:	e5945004 	ldr	r5, [r4, #4]
  13bdf8:	e00a8005 	and	r8, sl, r5
  13bdfc:	ea000002 	b	13be0c <unbin+0xf8>
  13be00:	e5943004 	ldr	r3, [r4, #4]
  13be04:	e1550003 	cmp	r5, r3
  13be08:	1afffff9 	bne	13bdf4 <unbin+0xe0>
  13be0c:	e1a00005 	mov	r0, r5
  13be10:	e1a01008 	mov	r1, r8
  13be14:	e1a02009 	mov	r2, r9
  13be18:	e5963000 	ldr	r3, [r6]
  13be1c:	e12fff33 	blx	r3
  13be20:	e3500000 	cmp	r0, #0
  13be24:	1afffff5 	bne	13be00 <unbin+0xec>
  13be28:	e597200c 	ldr	r2, [r7, #12]
  13be2c:	e5970008 	ldr	r0, [r7, #8]
  13be30:	eaffffbe 	b	13bd30 <unbin+0x1c>
  13be34:	0014e3b0 	.word	0x0014e3b0
  13be38:	0014d3d0 	.word	0x0014d3d0

0013be3c <alloc_fwd>:
  13be3c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13be40:	e59f925c 	ldr	r9, [pc, #604]	; 13c0a4 <alloc_fwd+0x268>
  13be44:	e24dd00c 	sub	sp, sp, #12
  13be48:	e58d0004 	str	r0, [sp, #4]
  13be4c:	e59f6254 	ldr	r6, [pc, #596]	; 13c0a8 <alloc_fwd+0x26c>
  13be50:	e59d3004 	ldr	r3, [sp, #4]
  13be54:	e5938004 	ldr	r8, [r3, #4]
  13be58:	e3180001 	tst	r8, #1
  13be5c:	1a000055 	bne	13bfb8 <alloc_fwd+0x17c>
  13be60:	e1a07228 	lsr	r7, r8, #4
  13be64:	e2477001 	sub	r7, r7, #1
  13be68:	e3570020 	cmp	r7, #32
  13be6c:	9a000005 	bls	13be88 <alloc_fwd+0x4c>
  13be70:	e59f3234 	ldr	r3, [pc, #564]	; 13c0ac <alloc_fwd+0x270>
  13be74:	e1570003 	cmp	r7, r3
  13be78:	8a000058 	bhi	13bfe0 <alloc_fwd+0x1a4>
  13be7c:	e59f322c 	ldr	r3, [pc, #556]	; 13c0b0 <alloc_fwd+0x274>
  13be80:	e08371a7 	add	r7, r3, r7, lsr #3
  13be84:	e5577004 	ldrb	r7, [r7, #-4]
  13be88:	e1a0b007 	mov	fp, r7
  13be8c:	e1a04207 	lsl	r4, r7, #4
  13be90:	e2844008 	add	r4, r4, #8
  13be94:	e59f3218 	ldr	r3, [pc, #536]	; 13c0b4 <alloc_fwd+0x278>
  13be98:	e0894004 	add	r4, r9, r4
  13be9c:	e593300c 	ldr	r3, [r3, #12]
  13bea0:	e3530000 	cmp	r3, #0
  13bea4:	1284a004 	addne	sl, r4, #4
  13bea8:	1a000032 	bne	13bf78 <alloc_fwd+0x13c>
  13beac:	e28b3001 	add	r3, fp, #1
  13beb0:	e7992203 	ldr	r2, [r9, r3, lsl #4]
  13beb4:	e3520000 	cmp	r2, #0
  13beb8:	1a000053 	bne	13c00c <alloc_fwd+0x1d0>
  13bebc:	e1a02008 	mov	r2, r8
  13bec0:	e0891207 	add	r1, r9, r7, lsl #4
  13bec4:	e2811008 	add	r1, r1, #8
  13bec8:	e0890203 	add	r0, r9, r3, lsl #4
  13becc:	e7891203 	str	r1, [r9, r3, lsl #4]
  13bed0:	e5801004 	str	r1, [r0, #4]
  13bed4:	e1580002 	cmp	r8, r2
  13bed8:	0a00004b 	beq	13c00c <alloc_fwd+0x1d0>
  13bedc:	e5943000 	ldr	r3, [r4]
  13bee0:	e3530000 	cmp	r3, #0
  13bee4:	0a000030 	beq	13bfac <alloc_fwd+0x170>
  13bee8:	e59f31c8 	ldr	r3, [pc, #456]	; 13c0b8 <alloc_fwd+0x27c>
  13beec:	e593c000 	ldr	ip, [r3]
  13bef0:	e12fff3c 	blx	ip
  13bef4:	e3a02000 	mov	r2, #0
  13bef8:	e593c000 	ldr	ip, [r3]
  13befc:	e5842000 	str	r2, [r4]
  13bf00:	e12fff3c 	blx	ip
  13bf04:	e5943004 	ldr	r3, [r4, #4]
  13bf08:	e1530002 	cmp	r3, r2
  13bf0c:	0affffcf 	beq	13be50 <alloc_fwd+0x14>
  13bf10:	e3a000f0 	mov	r0, #240	; 0xf0
  13bf14:	ebfffec4 	bl	13ba2c <get_rtt_syscall>
  13bf18:	e2503000 	subs	r3, r0, #0
  13bf1c:	0affffca 	beq	13be4c <alloc_fwd+0x10>
  13bf20:	e3a02001 	mov	r2, #1
  13bf24:	e3a01081 	mov	r1, #129	; 0x81
  13bf28:	e1a00004 	mov	r0, r4
  13bf2c:	e12fff33 	blx	r3
  13bf30:	e3700026 	cmn	r0, #38	; 0x26
  13bf34:	1affffc4 	bne	13be4c <alloc_fwd+0x10>
  13bf38:	e3a000f0 	mov	r0, #240	; 0xf0
  13bf3c:	ebfffeba 	bl	13ba2c <get_rtt_syscall>
  13bf40:	e2503000 	subs	r3, r0, #0
  13bf44:	0affffc0 	beq	13be4c <alloc_fwd+0x10>
  13bf48:	e3a02001 	mov	r2, #1
  13bf4c:	e1a00004 	mov	r0, r4
  13bf50:	e1a01002 	mov	r1, r2
  13bf54:	e12fff33 	blx	r3
  13bf58:	eaffffbb 	b	13be4c <alloc_fwd+0x10>
  13bf5c:	e3550000 	cmp	r5, #0
  13bf60:	0a000017 	beq	13bfc4 <alloc_fwd+0x188>
  13bf64:	e1a03001 	mov	r3, r1
  13bf68:	e1a02001 	mov	r2, r1
  13bf6c:	e1a00004 	mov	r0, r4
  13bf70:	e1a0100a 	mov	r1, sl
  13bf74:	eb001514 	bl	1413cc <__wait>
  13bf78:	e5945000 	ldr	r5, [r4]
  13bf7c:	ea000002 	b	13bf8c <alloc_fwd+0x150>
  13bf80:	e5943000 	ldr	r3, [r4]
  13bf84:	e1550003 	cmp	r5, r3
  13bf88:	1afffffa 	bne	13bf78 <alloc_fwd+0x13c>
  13bf8c:	e1a00005 	mov	r0, r5
  13bf90:	e3a01001 	mov	r1, #1
  13bf94:	e1a02004 	mov	r2, r4
  13bf98:	e5963000 	ldr	r3, [r6]
  13bf9c:	e12fff33 	blx	r3
  13bfa0:	e3500000 	cmp	r0, #0
  13bfa4:	1afffff5 	bne	13bf80 <alloc_fwd+0x144>
  13bfa8:	eaffffeb 	b	13bf5c <alloc_fwd+0x120>
  13bfac:	e1a08002 	mov	r8, r2
  13bfb0:	e3180001 	tst	r8, #1
  13bfb4:	0affffa9 	beq	13be60 <alloc_fwd+0x24>
  13bfb8:	e3a00000 	mov	r0, #0
  13bfbc:	e28dd00c 	add	sp, sp, #12
  13bfc0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13bfc4:	e28b3001 	add	r3, fp, #1
  13bfc8:	e7991203 	ldr	r1, [r9, r3, lsl #4]
  13bfcc:	e59d2004 	ldr	r2, [sp, #4]
  13bfd0:	e3510000 	cmp	r1, #0
  13bfd4:	e5922004 	ldr	r2, [r2, #4]
  13bfd8:	1affffbd 	bne	13bed4 <alloc_fwd+0x98>
  13bfdc:	eaffffb7 	b	13bec0 <alloc_fwd+0x84>
  13bfe0:	e3570b07 	cmp	r7, #7168	; 0x1c00
  13bfe4:	83a0703f 	movhi	r7, #63	; 0x3f
  13bfe8:	959f30c0 	ldrls	r3, [pc, #192]	; 13c0b0 <alloc_fwd+0x274>
  13bfec:	83a04ffe 	movhi	r4, #1016	; 0x3f8
  13bff0:	908373a7 	addls	r7, r3, r7, lsr #7
  13bff4:	95577004 	ldrbls	r7, [r7, #-4]
  13bff8:	92877010 	addls	r7, r7, #16
  13bffc:	91a04207 	lslls	r4, r7, #4
  13c000:	92844008 	addls	r4, r4, #8
  13c004:	e1a0b007 	mov	fp, r7
  13c008:	eaffffa1 	b	13be94 <alloc_fwd+0x58>
  13c00c:	e1a0100b 	mov	r1, fp
  13c010:	e59d0004 	ldr	r0, [sp, #4]
  13c014:	ebffff3e 	bl	13bd14 <unbin>
  13c018:	e5943000 	ldr	r3, [r4]
  13c01c:	e3530000 	cmp	r3, #0
  13c020:	0a000009 	beq	13c04c <alloc_fwd+0x210>
  13c024:	e59f308c 	ldr	r3, [pc, #140]	; 13c0b8 <alloc_fwd+0x27c>
  13c028:	e593c000 	ldr	ip, [r3]
  13c02c:	e12fff3c 	blx	ip
  13c030:	e3a02000 	mov	r2, #0
  13c034:	e593c000 	ldr	ip, [r3]
  13c038:	e5842000 	str	r2, [r4]
  13c03c:	e12fff3c 	blx	ip
  13c040:	e5943004 	ldr	r3, [r4, #4]
  13c044:	e1530002 	cmp	r3, r2
  13c048:	1a000002 	bne	13c058 <alloc_fwd+0x21c>
  13c04c:	e3a00001 	mov	r0, #1
  13c050:	e28dd00c 	add	sp, sp, #12
  13c054:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13c058:	e3a000f0 	mov	r0, #240	; 0xf0
  13c05c:	ebfffe72 	bl	13ba2c <get_rtt_syscall>
  13c060:	e2503000 	subs	r3, r0, #0
  13c064:	0afffff8 	beq	13c04c <alloc_fwd+0x210>
  13c068:	e3a02001 	mov	r2, #1
  13c06c:	e3a01081 	mov	r1, #129	; 0x81
  13c070:	e1a00004 	mov	r0, r4
  13c074:	e12fff33 	blx	r3
  13c078:	e3700026 	cmn	r0, #38	; 0x26
  13c07c:	1afffff2 	bne	13c04c <alloc_fwd+0x210>
  13c080:	e3a000f0 	mov	r0, #240	; 0xf0
  13c084:	ebfffe68 	bl	13ba2c <get_rtt_syscall>
  13c088:	e2503000 	subs	r3, r0, #0
  13c08c:	0affffee 	beq	13c04c <alloc_fwd+0x210>
  13c090:	e3a02001 	mov	r2, #1
  13c094:	e1a00004 	mov	r0, r4
  13c098:	e1a01002 	mov	r1, r2
  13c09c:	e12fff33 	blx	r3
  13c0a0:	eaffffe9 	b	13c04c <alloc_fwd+0x210>
  13c0a4:	0014e3b0 	.word	0x0014e3b0
  13c0a8:	0014d3d0 	.word	0x0014d3d0
  13c0ac:	000001ff 	.word	0x000001ff
  13c0b0:	0014c238 	.word	0x0014c238
  13c0b4:	00575604 	.word	0x00575604
  13c0b8:	0014d3cc 	.word	0x0014d3cc

0013c0bc <alloc_rev>:
  13c0bc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13c0c0:	e59f9264 	ldr	r9, [pc, #612]	; 13c32c <alloc_rev+0x270>
  13c0c4:	e24dd00c 	sub	sp, sp, #12
  13c0c8:	e58d0004 	str	r0, [sp, #4]
  13c0cc:	e59f625c 	ldr	r6, [pc, #604]	; 13c330 <alloc_rev+0x274>
  13c0d0:	e59d3004 	ldr	r3, [sp, #4]
  13c0d4:	e5938000 	ldr	r8, [r3]
  13c0d8:	e3180001 	tst	r8, #1
  13c0dc:	1a000055 	bne	13c238 <alloc_rev+0x17c>
  13c0e0:	e1a07228 	lsr	r7, r8, #4
  13c0e4:	e2477001 	sub	r7, r7, #1
  13c0e8:	e3570020 	cmp	r7, #32
  13c0ec:	9a000005 	bls	13c108 <alloc_rev+0x4c>
  13c0f0:	e59f323c 	ldr	r3, [pc, #572]	; 13c334 <alloc_rev+0x278>
  13c0f4:	e1570003 	cmp	r7, r3
  13c0f8:	8a000058 	bhi	13c260 <alloc_rev+0x1a4>
  13c0fc:	e59f3234 	ldr	r3, [pc, #564]	; 13c338 <alloc_rev+0x27c>
  13c100:	e08371a7 	add	r7, r3, r7, lsr #3
  13c104:	e5577004 	ldrb	r7, [r7, #-4]
  13c108:	e1a0b007 	mov	fp, r7
  13c10c:	e1a04207 	lsl	r4, r7, #4
  13c110:	e2844008 	add	r4, r4, #8
  13c114:	e59f3220 	ldr	r3, [pc, #544]	; 13c33c <alloc_rev+0x280>
  13c118:	e0894004 	add	r4, r9, r4
  13c11c:	e593300c 	ldr	r3, [r3, #12]
  13c120:	e3530000 	cmp	r3, #0
  13c124:	1284a004 	addne	sl, r4, #4
  13c128:	1a000032 	bne	13c1f8 <alloc_rev+0x13c>
  13c12c:	e28b3001 	add	r3, fp, #1
  13c130:	e7992203 	ldr	r2, [r9, r3, lsl #4]
  13c134:	e3520000 	cmp	r2, #0
  13c138:	1a000053 	bne	13c28c <alloc_rev+0x1d0>
  13c13c:	e1a02008 	mov	r2, r8
  13c140:	e0891207 	add	r1, r9, r7, lsl #4
  13c144:	e2811008 	add	r1, r1, #8
  13c148:	e0890203 	add	r0, r9, r3, lsl #4
  13c14c:	e7891203 	str	r1, [r9, r3, lsl #4]
  13c150:	e5801004 	str	r1, [r0, #4]
  13c154:	e1580002 	cmp	r8, r2
  13c158:	0a00004b 	beq	13c28c <alloc_rev+0x1d0>
  13c15c:	e5943000 	ldr	r3, [r4]
  13c160:	e3530000 	cmp	r3, #0
  13c164:	0a000030 	beq	13c22c <alloc_rev+0x170>
  13c168:	e59f31d0 	ldr	r3, [pc, #464]	; 13c340 <alloc_rev+0x284>
  13c16c:	e593c000 	ldr	ip, [r3]
  13c170:	e12fff3c 	blx	ip
  13c174:	e3a02000 	mov	r2, #0
  13c178:	e593c000 	ldr	ip, [r3]
  13c17c:	e5842000 	str	r2, [r4]
  13c180:	e12fff3c 	blx	ip
  13c184:	e5943004 	ldr	r3, [r4, #4]
  13c188:	e1530002 	cmp	r3, r2
  13c18c:	0affffcf 	beq	13c0d0 <alloc_rev+0x14>
  13c190:	e3a000f0 	mov	r0, #240	; 0xf0
  13c194:	ebfffe24 	bl	13ba2c <get_rtt_syscall>
  13c198:	e2503000 	subs	r3, r0, #0
  13c19c:	0affffca 	beq	13c0cc <alloc_rev+0x10>
  13c1a0:	e3a02001 	mov	r2, #1
  13c1a4:	e3a01081 	mov	r1, #129	; 0x81
  13c1a8:	e1a00004 	mov	r0, r4
  13c1ac:	e12fff33 	blx	r3
  13c1b0:	e3700026 	cmn	r0, #38	; 0x26
  13c1b4:	1affffc4 	bne	13c0cc <alloc_rev+0x10>
  13c1b8:	e3a000f0 	mov	r0, #240	; 0xf0
  13c1bc:	ebfffe1a 	bl	13ba2c <get_rtt_syscall>
  13c1c0:	e2503000 	subs	r3, r0, #0
  13c1c4:	0affffc0 	beq	13c0cc <alloc_rev+0x10>
  13c1c8:	e3a02001 	mov	r2, #1
  13c1cc:	e1a00004 	mov	r0, r4
  13c1d0:	e1a01002 	mov	r1, r2
  13c1d4:	e12fff33 	blx	r3
  13c1d8:	eaffffbb 	b	13c0cc <alloc_rev+0x10>
  13c1dc:	e3550000 	cmp	r5, #0
  13c1e0:	0a000017 	beq	13c244 <alloc_rev+0x188>
  13c1e4:	e1a03001 	mov	r3, r1
  13c1e8:	e1a02001 	mov	r2, r1
  13c1ec:	e1a00004 	mov	r0, r4
  13c1f0:	e1a0100a 	mov	r1, sl
  13c1f4:	eb001474 	bl	1413cc <__wait>
  13c1f8:	e5945000 	ldr	r5, [r4]
  13c1fc:	ea000002 	b	13c20c <alloc_rev+0x150>
  13c200:	e5943000 	ldr	r3, [r4]
  13c204:	e1550003 	cmp	r5, r3
  13c208:	1afffffa 	bne	13c1f8 <alloc_rev+0x13c>
  13c20c:	e1a00005 	mov	r0, r5
  13c210:	e3a01001 	mov	r1, #1
  13c214:	e1a02004 	mov	r2, r4
  13c218:	e5963000 	ldr	r3, [r6]
  13c21c:	e12fff33 	blx	r3
  13c220:	e3500000 	cmp	r0, #0
  13c224:	1afffff5 	bne	13c200 <alloc_rev+0x144>
  13c228:	eaffffeb 	b	13c1dc <alloc_rev+0x120>
  13c22c:	e1a08002 	mov	r8, r2
  13c230:	e3180001 	tst	r8, #1
  13c234:	0affffa9 	beq	13c0e0 <alloc_rev+0x24>
  13c238:	e3a00000 	mov	r0, #0
  13c23c:	e28dd00c 	add	sp, sp, #12
  13c240:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13c244:	e28b3001 	add	r3, fp, #1
  13c248:	e7991203 	ldr	r1, [r9, r3, lsl #4]
  13c24c:	e59d2004 	ldr	r2, [sp, #4]
  13c250:	e3510000 	cmp	r1, #0
  13c254:	e5922000 	ldr	r2, [r2]
  13c258:	1affffbd 	bne	13c154 <alloc_rev+0x98>
  13c25c:	eaffffb7 	b	13c140 <alloc_rev+0x84>
  13c260:	e3570b07 	cmp	r7, #7168	; 0x1c00
  13c264:	83a0703f 	movhi	r7, #63	; 0x3f
  13c268:	959f30c8 	ldrls	r3, [pc, #200]	; 13c338 <alloc_rev+0x27c>
  13c26c:	83a04ffe 	movhi	r4, #1016	; 0x3f8
  13c270:	908373a7 	addls	r7, r3, r7, lsr #7
  13c274:	95577004 	ldrbls	r7, [r7, #-4]
  13c278:	92877010 	addls	r7, r7, #16
  13c27c:	91a04207 	lslls	r4, r7, #4
  13c280:	92844008 	addls	r4, r4, #8
  13c284:	e1a0b007 	mov	fp, r7
  13c288:	eaffffa1 	b	13c114 <alloc_rev+0x58>
  13c28c:	e59d3004 	ldr	r3, [sp, #4]
  13c290:	e3c80001 	bic	r0, r8, #1
  13c294:	e0430000 	sub	r0, r3, r0
  13c298:	e1a0100b 	mov	r1, fp
  13c29c:	ebfffe9c 	bl	13bd14 <unbin>
  13c2a0:	e5943000 	ldr	r3, [r4]
  13c2a4:	e3530000 	cmp	r3, #0
  13c2a8:	0a000009 	beq	13c2d4 <alloc_rev+0x218>
  13c2ac:	e59f308c 	ldr	r3, [pc, #140]	; 13c340 <alloc_rev+0x284>
  13c2b0:	e593c000 	ldr	ip, [r3]
  13c2b4:	e12fff3c 	blx	ip
  13c2b8:	e3a02000 	mov	r2, #0
  13c2bc:	e593c000 	ldr	ip, [r3]
  13c2c0:	e5842000 	str	r2, [r4]
  13c2c4:	e12fff3c 	blx	ip
  13c2c8:	e5943004 	ldr	r3, [r4, #4]
  13c2cc:	e1530002 	cmp	r3, r2
  13c2d0:	1a000002 	bne	13c2e0 <alloc_rev+0x224>
  13c2d4:	e3a00001 	mov	r0, #1
  13c2d8:	e28dd00c 	add	sp, sp, #12
  13c2dc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13c2e0:	e3a000f0 	mov	r0, #240	; 0xf0
  13c2e4:	ebfffdd0 	bl	13ba2c <get_rtt_syscall>
  13c2e8:	e2503000 	subs	r3, r0, #0
  13c2ec:	0afffff8 	beq	13c2d4 <alloc_rev+0x218>
  13c2f0:	e3a02001 	mov	r2, #1
  13c2f4:	e3a01081 	mov	r1, #129	; 0x81
  13c2f8:	e1a00004 	mov	r0, r4
  13c2fc:	e12fff33 	blx	r3
  13c300:	e3700026 	cmn	r0, #38	; 0x26
  13c304:	1afffff2 	bne	13c2d4 <alloc_rev+0x218>
  13c308:	e3a000f0 	mov	r0, #240	; 0xf0
  13c30c:	ebfffdc6 	bl	13ba2c <get_rtt_syscall>
  13c310:	e2503000 	subs	r3, r0, #0
  13c314:	0affffee 	beq	13c2d4 <alloc_rev+0x218>
  13c318:	e3a02001 	mov	r2, #1
  13c31c:	e1a00004 	mov	r0, r4
  13c320:	e1a01002 	mov	r1, r2
  13c324:	e12fff33 	blx	r3
  13c328:	eaffffe9 	b	13c2d4 <alloc_rev+0x218>
  13c32c:	0014e3b0 	.word	0x0014e3b0
  13c330:	0014d3d0 	.word	0x0014d3d0
  13c334:	000001ff 	.word	0x000001ff
  13c338:	0014c238 	.word	0x0014c238
  13c33c:	00575604 	.word	0x00575604
  13c340:	0014d3cc 	.word	0x0014d3cc

0013c344 <__bin_chunk>:
  13c344:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13c348:	e5903004 	ldr	r3, [r0, #4]
  13c34c:	e24dd01c 	sub	sp, sp, #28
  13c350:	e3c31001 	bic	r1, r3, #1
  13c354:	e7902001 	ldr	r2, [r0, r1]
  13c358:	e1a06000 	mov	r6, r0
  13c35c:	e1530002 	cmp	r3, r2
  13c360:	e58d1010 	str	r1, [sp, #16]
  13c364:	e080b001 	add	fp, r0, r1
  13c368:	0a000000 	beq	13c370 <__bin_chunk+0x2c>
  13c36c:	e7f000f0 	.word	0xe7f000f0
  13c370:	e59d3010 	ldr	r3, [sp, #16]
  13c374:	e59f55e8 	ldr	r5, [pc, #1512]	; 13c964 <__bin_chunk+0x620>
  13c378:	e58d3000 	str	r3, [sp]
  13c37c:	e3a03000 	mov	r3, #0
  13c380:	e58d3014 	str	r3, [sp, #20]
  13c384:	e2853b01 	add	r3, r5, #1024	; 0x400
  13c388:	e283300c 	add	r3, r3, #12
  13c38c:	e59f95d4 	ldr	r9, [pc, #1492]	; 13c968 <__bin_chunk+0x624>
  13c390:	e58d300c 	str	r3, [sp, #12]
  13c394:	e5963000 	ldr	r3, [r6]
  13c398:	e59b2004 	ldr	r2, [fp, #4]
  13c39c:	e0033002 	and	r3, r3, r2
  13c3a0:	e3130001 	tst	r3, #1
  13c3a4:	0a000038 	beq	13c48c <__bin_chunk+0x148>
  13c3a8:	e59d1000 	ldr	r1, [sp]
  13c3ac:	e1a03221 	lsr	r3, r1, #4
  13c3b0:	e2432001 	sub	r2, r3, #1
  13c3b4:	e3520020 	cmp	r2, #32
  13c3b8:	e3813001 	orr	r3, r1, #1
  13c3bc:	e5863004 	str	r3, [r6, #4]
  13c3c0:	e58d2008 	str	r2, [sp, #8]
  13c3c4:	e58b3000 	str	r3, [fp]
  13c3c8:	8a00006c 	bhi	13c580 <__bin_chunk+0x23c>
  13c3cc:	e1a04202 	lsl	r4, r2, #4
  13c3d0:	e2844008 	add	r4, r4, #8
  13c3d4:	e58d2004 	str	r2, [sp, #4]
  13c3d8:	e59f358c 	ldr	r3, [pc, #1420]	; 13c96c <__bin_chunk+0x628>
  13c3dc:	e0854004 	add	r4, r5, r4
  13c3e0:	e593300c 	ldr	r3, [r3, #12]
  13c3e4:	e3530000 	cmp	r3, #0
  13c3e8:	12848004 	addne	r8, r4, #4
  13c3ec:	1a000056 	bne	13c54c <__bin_chunk+0x208>
  13c3f0:	e59d3004 	ldr	r3, [sp, #4]
  13c3f4:	e2837001 	add	r7, r3, #1
  13c3f8:	e7953207 	ldr	r3, [r5, r7, lsl #4]
  13c3fc:	e3530000 	cmp	r3, #0
  13c400:	0a000069 	beq	13c5ac <__bin_chunk+0x268>
  13c404:	e59f3560 	ldr	r3, [pc, #1376]	; 13c96c <__bin_chunk+0x628>
  13c408:	e593300c 	ldr	r3, [r3, #12]
  13c40c:	e3530000 	cmp	r3, #0
  13c410:	1a00006f 	bne	13c5d4 <__bin_chunk+0x290>
  13c414:	e5963000 	ldr	r3, [r6]
  13c418:	e59b2004 	ldr	r2, [fp, #4]
  13c41c:	e0033002 	and	r3, r3, r2
  13c420:	e2133001 	ands	r3, r3, #1
  13c424:	1a0000b5 	bne	13c700 <__bin_chunk+0x3bc>
  13c428:	e5952408 	ldr	r2, [r5, #1032]	; 0x408
  13c42c:	e3520000 	cmp	r2, #0
  13c430:	0a000008 	beq	13c458 <__bin_chunk+0x114>
  13c434:	e59f2534 	ldr	r2, [pc, #1332]	; 13c970 <__bin_chunk+0x62c>
  13c438:	e592c000 	ldr	ip, [r2]
  13c43c:	e12fff3c 	blx	ip
  13c440:	e5853408 	str	r3, [r5, #1032]	; 0x408
  13c444:	e592c000 	ldr	ip, [r2]
  13c448:	e12fff3c 	blx	ip
  13c44c:	e595340c 	ldr	r3, [r5, #1036]	; 0x40c
  13c450:	e3530000 	cmp	r3, #0
  13c454:	1a000095 	bne	13c6b0 <__bin_chunk+0x36c>
  13c458:	e5943000 	ldr	r3, [r4]
  13c45c:	e3530000 	cmp	r3, #0
  13c460:	0a000009 	beq	13c48c <__bin_chunk+0x148>
  13c464:	e59f2504 	ldr	r2, [pc, #1284]	; 13c970 <__bin_chunk+0x62c>
  13c468:	e592c000 	ldr	ip, [r2]
  13c46c:	e12fff3c 	blx	ip
  13c470:	e3a03000 	mov	r3, #0
  13c474:	e592c000 	ldr	ip, [r2]
  13c478:	e5843000 	str	r3, [r4]
  13c47c:	e12fff3c 	blx	ip
  13c480:	e5943004 	ldr	r3, [r4, #4]
  13c484:	e3530000 	cmp	r3, #0
  13c488:	1a000075 	bne	13c664 <__bin_chunk+0x320>
  13c48c:	e1a00006 	mov	r0, r6
  13c490:	ebffff09 	bl	13c0bc <alloc_rev>
  13c494:	e3500000 	cmp	r0, #0
  13c498:	0a000010 	beq	13c4e0 <__bin_chunk+0x19c>
  13c49c:	e5963000 	ldr	r3, [r6]
  13c4a0:	e59d2010 	ldr	r2, [sp, #16]
  13c4a4:	e3c33001 	bic	r3, r3, #1
  13c4a8:	e0466003 	sub	r6, r6, r3
  13c4ac:	e5963004 	ldr	r3, [r6, #4]
  13c4b0:	e59d1000 	ldr	r1, [sp]
  13c4b4:	e3c33001 	bic	r3, r3, #1
  13c4b8:	e0822003 	add	r2, r2, r3
  13c4bc:	e0811003 	add	r1, r1, r3
  13c4c0:	e352090a 	cmp	r2, #163840	; 0x28000
  13c4c4:	e58d1000 	str	r1, [sp]
  13c4c8:	9a000004 	bls	13c4e0 <__bin_chunk+0x19c>
  13c4cc:	e0222003 	eor	r2, r2, r3
  13c4d0:	e1520003 	cmp	r2, r3
  13c4d4:	e59d1014 	ldr	r1, [sp, #20]
  13c4d8:	83a01001 	movhi	r1, #1
  13c4dc:	e58d1014 	str	r1, [sp, #20]
  13c4e0:	e1a0000b 	mov	r0, fp
  13c4e4:	ebfffe54 	bl	13be3c <alloc_fwd>
  13c4e8:	e3500000 	cmp	r0, #0
  13c4ec:	0affffa8 	beq	13c394 <__bin_chunk+0x50>
  13c4f0:	e59b3004 	ldr	r3, [fp, #4]
  13c4f4:	e59d2010 	ldr	r2, [sp, #16]
  13c4f8:	e3c33001 	bic	r3, r3, #1
  13c4fc:	e59d1000 	ldr	r1, [sp]
  13c500:	e0822003 	add	r2, r2, r3
  13c504:	e0811003 	add	r1, r1, r3
  13c508:	e352090a 	cmp	r2, #163840	; 0x28000
  13c50c:	e58d1000 	str	r1, [sp]
  13c510:	9a000004 	bls	13c528 <__bin_chunk+0x1e4>
  13c514:	e0222003 	eor	r2, r2, r3
  13c518:	e1520003 	cmp	r2, r3
  13c51c:	e59d1014 	ldr	r1, [sp, #20]
  13c520:	83a01001 	movhi	r1, #1
  13c524:	e58d1014 	str	r1, [sp, #20]
  13c528:	e08bb003 	add	fp, fp, r3
  13c52c:	eaffff98 	b	13c394 <__bin_chunk+0x50>
  13c530:	e3570000 	cmp	r7, #0
  13c534:	0affffad 	beq	13c3f0 <__bin_chunk+0xac>
  13c538:	e1a03001 	mov	r3, r1
  13c53c:	e1a02001 	mov	r2, r1
  13c540:	e1a00004 	mov	r0, r4
  13c544:	e1a01008 	mov	r1, r8
  13c548:	eb00139f 	bl	1413cc <__wait>
  13c54c:	e5947000 	ldr	r7, [r4]
  13c550:	ea000002 	b	13c560 <__bin_chunk+0x21c>
  13c554:	e5943000 	ldr	r3, [r4]
  13c558:	e1570003 	cmp	r7, r3
  13c55c:	1afffffa 	bne	13c54c <__bin_chunk+0x208>
  13c560:	e1a00007 	mov	r0, r7
  13c564:	e3a01001 	mov	r1, #1
  13c568:	e1a02004 	mov	r2, r4
  13c56c:	e5993000 	ldr	r3, [r9]
  13c570:	e12fff33 	blx	r3
  13c574:	e3500000 	cmp	r0, #0
  13c578:	1afffff5 	bne	13c554 <__bin_chunk+0x210>
  13c57c:	eaffffeb 	b	13c530 <__bin_chunk+0x1ec>
  13c580:	e59d3008 	ldr	r3, [sp, #8]
  13c584:	e3530c02 	cmp	r3, #512	; 0x200
  13c588:	2a000027 	bcs	13c62c <__bin_chunk+0x2e8>
  13c58c:	e59f23e0 	ldr	r2, [pc, #992]	; 13c974 <__bin_chunk+0x630>
  13c590:	e08231a3 	add	r3, r2, r3, lsr #3
  13c594:	e5533004 	ldrb	r3, [r3, #-4]
  13c598:	e1a04203 	lsl	r4, r3, #4
  13c59c:	e58d3008 	str	r3, [sp, #8]
  13c5a0:	e2844008 	add	r4, r4, #8
  13c5a4:	e58d3004 	str	r3, [sp, #4]
  13c5a8:	eaffff8a 	b	13c3d8 <__bin_chunk+0x94>
  13c5ac:	e59d3008 	ldr	r3, [sp, #8]
  13c5b0:	e0852207 	add	r2, r5, r7, lsl #4
  13c5b4:	e0853203 	add	r3, r5, r3, lsl #4
  13c5b8:	e2833008 	add	r3, r3, #8
  13c5bc:	e7853207 	str	r3, [r5, r7, lsl #4]
  13c5c0:	e5823004 	str	r3, [r2, #4]
  13c5c4:	e59f33a0 	ldr	r3, [pc, #928]	; 13c96c <__bin_chunk+0x628>
  13c5c8:	e593300c 	ldr	r3, [r3, #12]
  13c5cc:	e3530000 	cmp	r3, #0
  13c5d0:	0affff8f 	beq	13c414 <__bin_chunk+0xd0>
  13c5d4:	e59f339c 	ldr	r3, [pc, #924]	; 13c978 <__bin_chunk+0x634>
  13c5d8:	e283a008 	add	sl, r3, #8
  13c5dc:	e5958408 	ldr	r8, [r5, #1032]	; 0x408
  13c5e0:	ea000002 	b	13c5f0 <__bin_chunk+0x2ac>
  13c5e4:	e5953408 	ldr	r3, [r5, #1032]	; 0x408
  13c5e8:	e1580003 	cmp	r8, r3
  13c5ec:	1afffffa 	bne	13c5dc <__bin_chunk+0x298>
  13c5f0:	e1a00008 	mov	r0, r8
  13c5f4:	e3a01001 	mov	r1, #1
  13c5f8:	e1a0200a 	mov	r2, sl
  13c5fc:	e5993000 	ldr	r3, [r9]
  13c600:	e12fff33 	blx	r3
  13c604:	e3500000 	cmp	r0, #0
  13c608:	1afffff5 	bne	13c5e4 <__bin_chunk+0x2a0>
  13c60c:	e3580000 	cmp	r8, #0
  13c610:	0affff7f 	beq	13c414 <__bin_chunk+0xd0>
  13c614:	e1a03001 	mov	r3, r1
  13c618:	e1a02001 	mov	r2, r1
  13c61c:	e1a0000a 	mov	r0, sl
  13c620:	e59d100c 	ldr	r1, [sp, #12]
  13c624:	eb001368 	bl	1413cc <__wait>
  13c628:	eaffffeb 	b	13c5dc <__bin_chunk+0x298>
  13c62c:	e59d3008 	ldr	r3, [sp, #8]
  13c630:	e3530b07 	cmp	r3, #7168	; 0x1c00
  13c634:	83a0303f 	movhi	r3, #63	; 0x3f
  13c638:	959f2334 	ldrls	r2, [pc, #820]	; 13c974 <__bin_chunk+0x630>
  13c63c:	858d3008 	strhi	r3, [sp, #8]
  13c640:	908233a3 	addls	r3, r2, r3, lsr #7
  13c644:	95533004 	ldrbls	r3, [r3, #-4]
  13c648:	83a04ffe 	movhi	r4, #1016	; 0x3f8
  13c64c:	92833010 	addls	r3, r3, #16
  13c650:	91a04203 	lslls	r4, r3, #4
  13c654:	958d3008 	strls	r3, [sp, #8]
  13c658:	92844008 	addls	r4, r4, #8
  13c65c:	e58d3004 	str	r3, [sp, #4]
  13c660:	eaffff5c 	b	13c3d8 <__bin_chunk+0x94>
  13c664:	e3a000f0 	mov	r0, #240	; 0xf0
  13c668:	ebfffcef 	bl	13ba2c <get_rtt_syscall>
  13c66c:	e2503000 	subs	r3, r0, #0
  13c670:	0affff85 	beq	13c48c <__bin_chunk+0x148>
  13c674:	e3a02001 	mov	r2, #1
  13c678:	e3a01081 	mov	r1, #129	; 0x81
  13c67c:	e1a00004 	mov	r0, r4
  13c680:	e12fff33 	blx	r3
  13c684:	e3700026 	cmn	r0, #38	; 0x26
  13c688:	1affff7f 	bne	13c48c <__bin_chunk+0x148>
  13c68c:	e3a000f0 	mov	r0, #240	; 0xf0
  13c690:	ebfffce5 	bl	13ba2c <get_rtt_syscall>
  13c694:	e2503000 	subs	r3, r0, #0
  13c698:	0affff7b 	beq	13c48c <__bin_chunk+0x148>
  13c69c:	e3a02001 	mov	r2, #1
  13c6a0:	e1a00004 	mov	r0, r4
  13c6a4:	e1a01002 	mov	r1, r2
  13c6a8:	e12fff33 	blx	r3
  13c6ac:	eaffff76 	b	13c48c <__bin_chunk+0x148>
  13c6b0:	e3a000f0 	mov	r0, #240	; 0xf0
  13c6b4:	ebfffcdc 	bl	13ba2c <get_rtt_syscall>
  13c6b8:	e2503000 	subs	r3, r0, #0
  13c6bc:	e59f72b8 	ldr	r7, [pc, #696]	; 13c97c <__bin_chunk+0x638>
  13c6c0:	0affff64 	beq	13c458 <__bin_chunk+0x114>
  13c6c4:	e3a02001 	mov	r2, #1
  13c6c8:	e3a01081 	mov	r1, #129	; 0x81
  13c6cc:	e1a00007 	mov	r0, r7
  13c6d0:	e12fff33 	blx	r3
  13c6d4:	e3700026 	cmn	r0, #38	; 0x26
  13c6d8:	1affff5e 	bne	13c458 <__bin_chunk+0x114>
  13c6dc:	e3a000f0 	mov	r0, #240	; 0xf0
  13c6e0:	ebfffcd1 	bl	13ba2c <get_rtt_syscall>
  13c6e4:	e2503000 	subs	r3, r0, #0
  13c6e8:	0affff5a 	beq	13c458 <__bin_chunk+0x114>
  13c6ec:	e3a02001 	mov	r2, #1
  13c6f0:	e1a00007 	mov	r0, r7
  13c6f4:	e1a01002 	mov	r1, r2
  13c6f8:	e12fff33 	blx	r3
  13c6fc:	eaffff55 	b	13c458 <__bin_chunk+0x114>
  13c700:	e59d3004 	ldr	r3, [sp, #4]
  13c704:	e8950006 	ldm	r5, {r1, r2}
  13c708:	e263c020 	rsb	ip, r3, #32
  13c70c:	e1a08331 	lsr	r8, r1, r3
  13c710:	e2430020 	sub	r0, r3, #32
  13c714:	e3a03000 	mov	r3, #0
  13c718:	e1888c12 	orr	r8, r8, r2, lsl ip
  13c71c:	e1888032 	orr	r8, r8, r2, lsr r0
  13c720:	e2082001 	and	r2, r8, #1
  13c724:	e1923003 	orrs	r3, r2, r3
  13c728:	0a00005d 	beq	13c8a4 <__bin_chunk+0x560>
  13c72c:	e59d3000 	ldr	r3, [sp]
  13c730:	e5863004 	str	r3, [r6, #4]
  13c734:	e58b3000 	str	r3, [fp]
  13c738:	e5953408 	ldr	r3, [r5, #1032]	; 0x408
  13c73c:	e3530000 	cmp	r3, #0
  13c740:	0a000009 	beq	13c76c <__bin_chunk+0x428>
  13c744:	e59f3224 	ldr	r3, [pc, #548]	; 13c970 <__bin_chunk+0x62c>
  13c748:	e593c000 	ldr	ip, [r3]
  13c74c:	e12fff3c 	blx	ip
  13c750:	e3a02000 	mov	r2, #0
  13c754:	e593c000 	ldr	ip, [r3]
  13c758:	e5852408 	str	r2, [r5, #1032]	; 0x408
  13c75c:	e12fff3c 	blx	ip
  13c760:	e595340c 	ldr	r3, [r5, #1036]	; 0x40c
  13c764:	e1530002 	cmp	r3, r2
  13c768:	1a000039 	bne	13c854 <__bin_chunk+0x510>
  13c76c:	e59d3008 	ldr	r3, [sp, #8]
  13c770:	e0857207 	add	r7, r5, r7, lsl #4
  13c774:	e2833001 	add	r3, r3, #1
  13c778:	e5972004 	ldr	r2, [r7, #4]
  13c77c:	e0855203 	add	r5, r5, r3, lsl #4
  13c780:	e2453008 	sub	r3, r5, #8
  13c784:	e586200c 	str	r2, [r6, #12]
  13c788:	e5863008 	str	r3, [r6, #8]
  13c78c:	e59d2014 	ldr	r2, [sp, #20]
  13c790:	e5856004 	str	r6, [r5, #4]
  13c794:	e596300c 	ldr	r3, [r6, #12]
  13c798:	e3520000 	cmp	r2, #0
  13c79c:	e5836008 	str	r6, [r3, #8]
  13c7a0:	0a000008 	beq	13c7c8 <__bin_chunk+0x484>
  13c7a4:	e59f31d4 	ldr	r3, [pc, #468]	; 13c980 <__bin_chunk+0x63c>
  13c7a8:	e2866a01 	add	r6, r6, #4096	; 0x1000
  13c7ac:	e286600f 	add	r6, r6, #15
  13c7b0:	e24b1010 	sub	r1, fp, #16
  13c7b4:	e0060003 	and	r0, r6, r3
  13c7b8:	e0011003 	and	r1, r1, r3
  13c7bc:	e0411000 	sub	r1, r1, r0
  13c7c0:	e3a02004 	mov	r2, #4
  13c7c4:	eb0002ca 	bl	13d2f4 <__madvise>
  13c7c8:	e5943000 	ldr	r3, [r4]
  13c7cc:	e3530000 	cmp	r3, #0
  13c7d0:	0a000009 	beq	13c7fc <__bin_chunk+0x4b8>
  13c7d4:	e59f3194 	ldr	r3, [pc, #404]	; 13c970 <__bin_chunk+0x62c>
  13c7d8:	e593c000 	ldr	ip, [r3]
  13c7dc:	e12fff3c 	blx	ip
  13c7e0:	e3a02000 	mov	r2, #0
  13c7e4:	e593c000 	ldr	ip, [r3]
  13c7e8:	e5842000 	str	r2, [r4]
  13c7ec:	e12fff3c 	blx	ip
  13c7f0:	e5943004 	ldr	r3, [r4, #4]
  13c7f4:	e1530002 	cmp	r3, r2
  13c7f8:	1a000001 	bne	13c804 <__bin_chunk+0x4c0>
  13c7fc:	e28dd01c 	add	sp, sp, #28
  13c800:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13c804:	e3a000f0 	mov	r0, #240	; 0xf0
  13c808:	ebfffc87 	bl	13ba2c <get_rtt_syscall>
  13c80c:	e2503000 	subs	r3, r0, #0
  13c810:	0afffff9 	beq	13c7fc <__bin_chunk+0x4b8>
  13c814:	e3a02001 	mov	r2, #1
  13c818:	e3a01081 	mov	r1, #129	; 0x81
  13c81c:	e1a00004 	mov	r0, r4
  13c820:	e12fff33 	blx	r3
  13c824:	e3700026 	cmn	r0, #38	; 0x26
  13c828:	1afffff3 	bne	13c7fc <__bin_chunk+0x4b8>
  13c82c:	e3a000f0 	mov	r0, #240	; 0xf0
  13c830:	ebfffc7d 	bl	13ba2c <get_rtt_syscall>
  13c834:	e2503000 	subs	r3, r0, #0
  13c838:	0affffef 	beq	13c7fc <__bin_chunk+0x4b8>
  13c83c:	e3a02001 	mov	r2, #1
  13c840:	e1a00004 	mov	r0, r4
  13c844:	e1a01002 	mov	r1, r2
  13c848:	e28dd01c 	add	sp, sp, #28
  13c84c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13c850:	e12fff13 	bx	r3
  13c854:	e3a000f0 	mov	r0, #240	; 0xf0
  13c858:	ebfffc73 	bl	13ba2c <get_rtt_syscall>
  13c85c:	e2503000 	subs	r3, r0, #0
  13c860:	e59f8114 	ldr	r8, [pc, #276]	; 13c97c <__bin_chunk+0x638>
  13c864:	0affffc0 	beq	13c76c <__bin_chunk+0x428>
  13c868:	e3a02001 	mov	r2, #1
  13c86c:	e3a01081 	mov	r1, #129	; 0x81
  13c870:	e1a00008 	mov	r0, r8
  13c874:	e12fff33 	blx	r3
  13c878:	e3700026 	cmn	r0, #38	; 0x26
  13c87c:	1affffba 	bne	13c76c <__bin_chunk+0x428>
  13c880:	e3a000f0 	mov	r0, #240	; 0xf0
  13c884:	ebfffc68 	bl	13ba2c <get_rtt_syscall>
  13c888:	e2503000 	subs	r3, r0, #0
  13c88c:	0affffb6 	beq	13c76c <__bin_chunk+0x428>
  13c890:	e3a02001 	mov	r2, #1
  13c894:	e1a00008 	mov	r0, r8
  13c898:	e1a01002 	mov	r1, r2
  13c89c:	e12fff33 	blx	r3
  13c8a0:	eaffffb1 	b	13c76c <__bin_chunk+0x428>
  13c8a4:	e3a03001 	mov	r3, #1
  13c8a8:	e59d1004 	ldr	r1, [sp, #4]
  13c8ac:	e1a02013 	lsl	r2, r3, r0
  13c8b0:	e1b01113 	lsls	r1, r3, r1
  13c8b4:	e1823c33 	orr	r3, r2, r3, lsr ip
  13c8b8:	e58d100c 	str	r1, [sp, #12]
  13c8bc:	e58d3004 	str	r3, [sp, #4]
  13c8c0:	0a000011 	beq	13c90c <__bin_chunk+0x5c8>
  13c8c4:	e59f809c 	ldr	r8, [pc, #156]	; 13c968 <__bin_chunk+0x624>
  13c8c8:	e59fa094 	ldr	sl, [pc, #148]	; 13c964 <__bin_chunk+0x620>
  13c8cc:	e58db010 	str	fp, [sp, #16]
  13c8d0:	e5959000 	ldr	r9, [r5]
  13c8d4:	e59d300c 	ldr	r3, [sp, #12]
  13c8d8:	e183b009 	orr	fp, r3, r9
  13c8dc:	ea000002 	b	13c8ec <__bin_chunk+0x5a8>
  13c8e0:	e5953000 	ldr	r3, [r5]
  13c8e4:	e1590003 	cmp	r9, r3
  13c8e8:	1afffff8 	bne	13c8d0 <__bin_chunk+0x58c>
  13c8ec:	e1a00009 	mov	r0, r9
  13c8f0:	e1a0100b 	mov	r1, fp
  13c8f4:	e1a0200a 	mov	r2, sl
  13c8f8:	e5983000 	ldr	r3, [r8]
  13c8fc:	e12fff33 	blx	r3
  13c900:	e3500000 	cmp	r0, #0
  13c904:	1afffff5 	bne	13c8e0 <__bin_chunk+0x59c>
  13c908:	e59db010 	ldr	fp, [sp, #16]
  13c90c:	e59d3004 	ldr	r3, [sp, #4]
  13c910:	e3530000 	cmp	r3, #0
  13c914:	0affff84 	beq	13c72c <__bin_chunk+0x3e8>
  13c918:	e59f8048 	ldr	r8, [pc, #72]	; 13c968 <__bin_chunk+0x624>
  13c91c:	e59fa060 	ldr	sl, [pc, #96]	; 13c984 <__bin_chunk+0x640>
  13c920:	e58db00c 	str	fp, [sp, #12]
  13c924:	e5959004 	ldr	r9, [r5, #4]
  13c928:	e59d3004 	ldr	r3, [sp, #4]
  13c92c:	e183b009 	orr	fp, r3, r9
  13c930:	ea000002 	b	13c940 <__bin_chunk+0x5fc>
  13c934:	e5953004 	ldr	r3, [r5, #4]
  13c938:	e1590003 	cmp	r9, r3
  13c93c:	1afffff8 	bne	13c924 <__bin_chunk+0x5e0>
  13c940:	e1a00009 	mov	r0, r9
  13c944:	e1a0100b 	mov	r1, fp
  13c948:	e1a0200a 	mov	r2, sl
  13c94c:	e5983000 	ldr	r3, [r8]
  13c950:	e12fff33 	blx	r3
  13c954:	e3500000 	cmp	r0, #0
  13c958:	1afffff5 	bne	13c934 <__bin_chunk+0x5f0>
  13c95c:	e59db00c 	ldr	fp, [sp, #12]
  13c960:	eaffff71 	b	13c72c <__bin_chunk+0x3e8>
  13c964:	0014e3b0 	.word	0x0014e3b0
  13c968:	0014d3d0 	.word	0x0014d3d0
  13c96c:	00575604 	.word	0x00575604
  13c970:	0014d3cc 	.word	0x0014d3cc
  13c974:	0014c238 	.word	0x0014c238
  13c978:	0014e7b0 	.word	0x0014e7b0
  13c97c:	0014e7b8 	.word	0x0014e7b8
  13c980:	fffff000 	.word	0xfffff000
  13c984:	0014e3b4 	.word	0x0014e3b4

0013c988 <trim>:
  13c988:	e5903004 	ldr	r3, [r0, #4]
  13c98c:	e1a02000 	mov	r2, r0
  13c990:	e3c33001 	bic	r3, r3, #1
  13c994:	e2430010 	sub	r0, r3, #16
  13c998:	e1500001 	cmp	r0, r1
  13c99c:	912fff1e 	bxls	lr
  13c9a0:	e043c001 	sub	ip, r3, r1
  13c9a4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13c9a8:	e38cc001 	orr	ip, ip, #1
  13c9ac:	e381e001 	orr	lr, r1, #1
  13c9b0:	e0820001 	add	r0, r2, r1
  13c9b4:	e782e001 	str	lr, [r2, r1]
  13c9b8:	e580c004 	str	ip, [r0, #4]
  13c9bc:	e782c003 	str	ip, [r2, r3]
  13c9c0:	e582e004 	str	lr, [r2, #4]
  13c9c4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13c9c8:	eafffe5d 	b	13c344 <__bin_chunk>

0013c9cc <malloc>:
  13c9cc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13c9d0:	e24dd02c 	sub	sp, sp, #44	; 0x2c
  13c9d4:	e28d3028 	add	r3, sp, #40	; 0x28
  13c9d8:	e523000c 	str	r0, [r3, #-12]!
  13c9dc:	e1a00003 	mov	r0, r3
  13c9e0:	ebfffcb1 	bl	13bcac <adjust_size>
  13c9e4:	e3500000 	cmp	r0, #0
  13c9e8:	ba000145 	blt	13cf04 <malloc+0x538>
  13c9ec:	e59d301c 	ldr	r3, [sp, #28]
  13c9f0:	e3530907 	cmp	r3, #114688	; 0x1c000
  13c9f4:	8a000076 	bhi	13cbd4 <malloc+0x208>
  13c9f8:	e1a03223 	lsr	r3, r3, #4
  13c9fc:	e2432001 	sub	r2, r3, #1
  13ca00:	e3520020 	cmp	r2, #32
  13ca04:	958d2018 	strls	r2, [sp, #24]
  13ca08:	8a000066 	bhi	13cba8 <malloc+0x1dc>
  13ca0c:	e3a01001 	mov	r1, #1
  13ca10:	e59dc018 	ldr	ip, [sp, #24]
  13ca14:	e59f85a8 	ldr	r8, [pc, #1448]	; 13cfc4 <malloc+0x5f8>
  13ca18:	e24c0020 	sub	r0, ip, #32
  13ca1c:	e1a03011 	lsl	r3, r1, r0
  13ca20:	e1a02c11 	lsl	r2, r1, ip
  13ca24:	e26c0020 	rsb	r0, ip, #32
  13ca28:	e2722000 	rsbs	r2, r2, #0
  13ca2c:	e1833031 	orr	r3, r3, r1, lsr r0
  13ca30:	e2e33000 	rsc	r3, r3, #0
  13ca34:	e58d2010 	str	r2, [sp, #16]
  13ca38:	e58d3014 	str	r3, [sp, #20]
  13ca3c:	e59fb584 	ldr	fp, [pc, #1412]	; 13cfc8 <malloc+0x5fc>
  13ca40:	e59f6584 	ldr	r6, [pc, #1412]	; 13cfcc <malloc+0x600>
  13ca44:	e898000c 	ldm	r8, {r2, r3}
  13ca48:	e28d1010 	add	r1, sp, #16
  13ca4c:	e8910003 	ldm	r1, {r0, r1}
  13ca50:	e0011003 	and	r1, r1, r3
  13ca54:	e0000002 	and	r0, r0, r2
  13ca58:	e1a02000 	mov	r2, r0
  13ca5c:	e1a03001 	mov	r3, r1
  13ca60:	e1921003 	orrs	r1, r2, r3
  13ca64:	0a000073 	beq	13cc38 <malloc+0x26c>
  13ca68:	e3500000 	cmp	r0, #0
  13ca6c:	1a000048 	bne	13cb94 <malloc+0x1c8>
  13ca70:	e2637000 	rsb	r7, r3, #0
  13ca74:	e0077003 	and	r7, r7, r3
  13ca78:	e16f7f17 	clz	r7, r7
  13ca7c:	e267703f 	rsb	r7, r7, #63	; 0x3f
  13ca80:	e59b300c 	ldr	r3, [fp, #12]
  13ca84:	e1a09207 	lsl	r9, r7, #4
  13ca88:	e2899008 	add	r9, r9, #8
  13ca8c:	e3530000 	cmp	r3, #0
  13ca90:	e0885009 	add	r5, r8, r9
  13ca94:	1285a004 	addne	sl, r5, #4
  13ca98:	1a000030 	bne	13cb60 <malloc+0x194>
  13ca9c:	e2873001 	add	r3, r7, #1
  13caa0:	e7984203 	ldr	r4, [r8, r3, lsl #4]
  13caa4:	e0882009 	add	r2, r8, r9
  13caa8:	e3540000 	cmp	r4, #0
  13caac:	00881203 	addeq	r1, r8, r3, lsl #4
  13cab0:	07882203 	streq	r2, [r8, r3, lsl #4]
  13cab4:	05812004 	streq	r2, [r1, #4]
  13cab8:	0a000001 	beq	13cac4 <malloc+0xf8>
  13cabc:	e1540002 	cmp	r4, r2
  13cac0:	1a00009d 	bne	13cd3c <malloc+0x370>
  13cac4:	e7983009 	ldr	r3, [r8, r9]
  13cac8:	e3530000 	cmp	r3, #0
  13cacc:	0affffdc 	beq	13ca44 <malloc+0x78>
  13cad0:	e59f24f8 	ldr	r2, [pc, #1272]	; 13cfd0 <malloc+0x604>
  13cad4:	e592c000 	ldr	ip, [r2]
  13cad8:	e12fff3c 	blx	ip
  13cadc:	e3a03000 	mov	r3, #0
  13cae0:	e592c000 	ldr	ip, [r2]
  13cae4:	e5853000 	str	r3, [r5]
  13cae8:	e12fff3c 	blx	ip
  13caec:	e5953004 	ldr	r3, [r5, #4]
  13caf0:	e3530000 	cmp	r3, #0
  13caf4:	0affffd2 	beq	13ca44 <malloc+0x78>
  13caf8:	e3a000f0 	mov	r0, #240	; 0xf0
  13cafc:	ebfffbca 	bl	13ba2c <get_rtt_syscall>
  13cb00:	e2503000 	subs	r3, r0, #0
  13cb04:	0affffce 	beq	13ca44 <malloc+0x78>
  13cb08:	e3a02001 	mov	r2, #1
  13cb0c:	e3a01081 	mov	r1, #129	; 0x81
  13cb10:	e1a00005 	mov	r0, r5
  13cb14:	e12fff33 	blx	r3
  13cb18:	e3700026 	cmn	r0, #38	; 0x26
  13cb1c:	1affffc8 	bne	13ca44 <malloc+0x78>
  13cb20:	e3a000f0 	mov	r0, #240	; 0xf0
  13cb24:	ebfffbc0 	bl	13ba2c <get_rtt_syscall>
  13cb28:	e2503000 	subs	r3, r0, #0
  13cb2c:	0affffc4 	beq	13ca44 <malloc+0x78>
  13cb30:	e3a02001 	mov	r2, #1
  13cb34:	e1a00005 	mov	r0, r5
  13cb38:	e1a01002 	mov	r1, r2
  13cb3c:	e12fff33 	blx	r3
  13cb40:	eaffffbf 	b	13ca44 <malloc+0x78>
  13cb44:	e3540000 	cmp	r4, #0
  13cb48:	0affffd3 	beq	13ca9c <malloc+0xd0>
  13cb4c:	e1a03001 	mov	r3, r1
  13cb50:	e1a02001 	mov	r2, r1
  13cb54:	e1a00005 	mov	r0, r5
  13cb58:	e1a0100a 	mov	r1, sl
  13cb5c:	eb00121a 	bl	1413cc <__wait>
  13cb60:	e5954000 	ldr	r4, [r5]
  13cb64:	ea000002 	b	13cb74 <malloc+0x1a8>
  13cb68:	e5953000 	ldr	r3, [r5]
  13cb6c:	e1540003 	cmp	r4, r3
  13cb70:	1afffffa 	bne	13cb60 <malloc+0x194>
  13cb74:	e1a00004 	mov	r0, r4
  13cb78:	e3a01001 	mov	r1, #1
  13cb7c:	e1a02005 	mov	r2, r5
  13cb80:	e5963000 	ldr	r3, [r6]
  13cb84:	e12fff33 	blx	r3
  13cb88:	e3500000 	cmp	r0, #0
  13cb8c:	1afffff5 	bne	13cb68 <malloc+0x19c>
  13cb90:	eaffffeb 	b	13cb44 <malloc+0x178>
  13cb94:	e2607000 	rsb	r7, r0, #0
  13cb98:	e0077000 	and	r7, r7, r0
  13cb9c:	e16f7f17 	clz	r7, r7
  13cba0:	e267701f 	rsb	r7, r7, #31
  13cba4:	eaffffb5 	b	13ca80 <malloc+0xb4>
  13cba8:	e2433002 	sub	r3, r3, #2
  13cbac:	e59f2420 	ldr	r2, [pc, #1056]	; 13cfd4 <malloc+0x608>
  13cbb0:	e3530c02 	cmp	r3, #512	; 0x200
  13cbb4:	308231a3 	addcc	r3, r2, r3, lsr #3
  13cbb8:	208233a3 	addcs	r3, r2, r3, lsr #7
  13cbbc:	35533004 	ldrbcc	r3, [r3, #-4]
  13cbc0:	25533004 	ldrbcs	r3, [r3, #-4]
  13cbc4:	32833001 	addcc	r3, r3, #1
  13cbc8:	22833011 	addcs	r3, r3, #17
  13cbcc:	e58d3018 	str	r3, [sp, #24]
  13cbd0:	eaffff8d 	b	13ca0c <malloc+0x40>
  13cbd4:	e3e02000 	mvn	r2, #0
  13cbd8:	e3a06000 	mov	r6, #0
  13cbdc:	e3a07000 	mov	r7, #0
  13cbe0:	e2833a01 	add	r3, r3, #4096	; 0x1000
  13cbe4:	e2833007 	add	r3, r3, #7
  13cbe8:	e3c34eff 	bic	r4, r3, #4080	; 0xff0
  13cbec:	e3c4400f 	bic	r4, r4, #15
  13cbf0:	e58d2000 	str	r2, [sp]
  13cbf4:	e1a01004 	mov	r1, r4
  13cbf8:	e58d6008 	str	r6, [sp, #8]
  13cbfc:	e58d700c 	str	r7, [sp, #12]
  13cc00:	e3a03022 	mov	r3, #34	; 0x22
  13cc04:	e3a02003 	mov	r2, #3
  13cc08:	e3a00000 	mov	r0, #0
  13cc0c:	eb0001c9 	bl	13d338 <__mmap>
  13cc10:	e3700001 	cmn	r0, #1
  13cc14:	0a0000ba 	beq	13cf04 <malloc+0x538>
  13cc18:	e3a03008 	mov	r3, #8
  13cc1c:	e2444008 	sub	r4, r4, #8
  13cc20:	e580400c 	str	r4, [r0, #12]
  13cc24:	e5803008 	str	r3, [r0, #8]
  13cc28:	e2804010 	add	r4, r0, #16
  13cc2c:	e1a00004 	mov	r0, r4
  13cc30:	e28dd02c 	add	sp, sp, #44	; 0x2c
  13cc34:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13cc38:	e59b200c 	ldr	r2, [fp, #12]
  13cc3c:	e59d301c 	ldr	r3, [sp, #28]
  13cc40:	e3520000 	cmp	r2, #0
  13cc44:	e2833010 	add	r3, r3, #16
  13cc48:	e59f5388 	ldr	r5, [pc, #904]	; 13cfd8 <malloc+0x60c>
  13cc4c:	e58d3024 	str	r3, [sp, #36]	; 0x24
  13cc50:	1a000094 	bne	13cea8 <malloc+0x4dc>
  13cc54:	e28d0024 	add	r0, sp, #36	; 0x24
  13cc58:	eb001717 	bl	1428bc <__expand_heap>
  13cc5c:	e2504000 	subs	r4, r0, #0
  13cc60:	0a0000b8 	beq	13cf48 <malloc+0x57c>
  13cc64:	e59f1370 	ldr	r1, [pc, #880]	; 13cfdc <malloc+0x610>
  13cc68:	e3a07001 	mov	r7, #1
  13cc6c:	e5916000 	ldr	r6, [r1]
  13cc70:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
  13cc74:	e1540006 	cmp	r4, r6
  13cc78:	13a02001 	movne	r2, #1
  13cc7c:	e5950000 	ldr	r0, [r5]
  13cc80:	12433010 	subne	r3, r3, #16
  13cc84:	12846010 	addne	r6, r4, #16
  13cc88:	15842008 	strne	r2, [r4, #8]
  13cc8c:	158d3024 	strne	r3, [sp, #36]	; 0x24
  13cc90:	e0862003 	add	r2, r6, r3
  13cc94:	e3500000 	cmp	r0, #0
  13cc98:	e1833007 	orr	r3, r3, r7
  13cc9c:	e9020088 	stmdb	r2, {r3, r7}
  13cca0:	e5812000 	str	r2, [r1]
  13cca4:	e5063004 	str	r3, [r6, #-4]
  13cca8:	e2464008 	sub	r4, r6, #8
  13ccac:	0a000009 	beq	13ccd8 <malloc+0x30c>
  13ccb0:	e59f3318 	ldr	r3, [pc, #792]	; 13cfd0 <malloc+0x604>
  13ccb4:	e593c000 	ldr	ip, [r3]
  13ccb8:	e12fff3c 	blx	ip
  13ccbc:	e3a02000 	mov	r2, #0
  13ccc0:	e593c000 	ldr	ip, [r3]
  13ccc4:	e5852000 	str	r2, [r5]
  13ccc8:	e12fff3c 	blx	ip
  13cccc:	e5953004 	ldr	r3, [r5, #4]
  13ccd0:	e1530002 	cmp	r3, r2
  13ccd4:	1a000060 	bne	13ce5c <malloc+0x490>
  13ccd8:	e3540000 	cmp	r4, #0
  13ccdc:	0a000088 	beq	13cf04 <malloc+0x538>
  13cce0:	e1a00004 	mov	r0, r4
  13cce4:	ebfffcf4 	bl	13c0bc <alloc_rev>
  13cce8:	e3500000 	cmp	r0, #0
  13ccec:	0a00000b 	beq	13cd20 <malloc+0x354>
  13ccf0:	e5163008 	ldr	r3, [r6, #-8]
  13ccf4:	e5161004 	ldr	r1, [r6, #-4]
  13ccf8:	e3c33001 	bic	r3, r3, #1
  13ccfc:	e0443003 	sub	r3, r4, r3
  13cd00:	e5932004 	ldr	r2, [r3, #4]
  13cd04:	e3c22001 	bic	r2, r2, #1
  13cd08:	e0822001 	add	r2, r2, r1
  13cd0c:	e5832004 	str	r2, [r3, #4]
  13cd10:	e5161004 	ldr	r1, [r6, #-4]
  13cd14:	e3c11001 	bic	r1, r1, #1
  13cd18:	e7842001 	str	r2, [r4, r1]
  13cd1c:	e1a04003 	mov	r4, r3
  13cd20:	e1a00004 	mov	r0, r4
  13cd24:	e59d101c 	ldr	r1, [sp, #28]
  13cd28:	e2844008 	add	r4, r4, #8
  13cd2c:	ebffff15 	bl	13c988 <trim>
  13cd30:	e1a00004 	mov	r0, r4
  13cd34:	e28dd02c 	add	sp, sp, #44	; 0x2c
  13cd38:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13cd3c:	e3570027 	cmp	r7, #39	; 0x27
  13cd40:	da000041 	ble	13ce4c <malloc+0x480>
  13cd44:	e59d3018 	ldr	r3, [sp, #24]
  13cd48:	e59d001c 	ldr	r0, [sp, #28]
  13cd4c:	e2833002 	add	r3, r3, #2
  13cd50:	e1570003 	cmp	r7, r3
  13cd54:	da00003a 	ble	13ce44 <malloc+0x478>
  13cd58:	e5942004 	ldr	r2, [r4, #4]
  13cd5c:	e3c22001 	bic	r2, r2, #1
  13cd60:	e0421000 	sub	r1, r2, r0
  13cd64:	e1a03221 	lsr	r3, r1, #4
  13cd68:	e2433001 	sub	r3, r3, #1
  13cd6c:	e3530020 	cmp	r3, #32
  13cd70:	9a000035 	bls	13ce4c <malloc+0x480>
  13cd74:	e3530c02 	cmp	r3, #512	; 0x200
  13cd78:	2a000065 	bcs	13cf14 <malloc+0x548>
  13cd7c:	e59fc250 	ldr	ip, [pc, #592]	; 13cfd4 <malloc+0x608>
  13cd80:	e08c31a3 	add	r3, ip, r3, lsr #3
  13cd84:	e5533004 	ldrb	r3, [r3, #-4]
  13cd88:	e1570003 	cmp	r7, r3
  13cd8c:	1a00002e 	bne	13ce4c <malloc+0x480>
  13cd90:	e594c00c 	ldr	ip, [r4, #12]
  13cd94:	e594e008 	ldr	lr, [r4, #8]
  13cd98:	e0843000 	add	r3, r4, r0
  13cd9c:	e583c00c 	str	ip, [r3, #12]
  13cda0:	e583e008 	str	lr, [r3, #8]
  13cda4:	e58c3008 	str	r3, [ip, #8]
  13cda8:	e593e008 	ldr	lr, [r3, #8]
  13cdac:	e380c001 	orr	ip, r0, #1
  13cdb0:	e58e300c 	str	r3, [lr, #12]
  13cdb4:	e784c000 	str	ip, [r4, r0]
  13cdb8:	e5831004 	str	r1, [r3, #4]
  13cdbc:	e7841002 	str	r1, [r4, r2]
  13cdc0:	e584c004 	str	ip, [r4, #4]
  13cdc4:	e5953000 	ldr	r3, [r5]
  13cdc8:	e3530000 	cmp	r3, #0
  13cdcc:	0affffd3 	beq	13cd20 <malloc+0x354>
  13cdd0:	e59f31f8 	ldr	r3, [pc, #504]	; 13cfd0 <malloc+0x604>
  13cdd4:	e593c000 	ldr	ip, [r3]
  13cdd8:	e12fff3c 	blx	ip
  13cddc:	e3a02000 	mov	r2, #0
  13cde0:	e593c000 	ldr	ip, [r3]
  13cde4:	e5852000 	str	r2, [r5]
  13cde8:	e12fff3c 	blx	ip
  13cdec:	e5953004 	ldr	r3, [r5, #4]
  13cdf0:	e1530002 	cmp	r3, r2
  13cdf4:	0affffc9 	beq	13cd20 <malloc+0x354>
  13cdf8:	e3a000f0 	mov	r0, #240	; 0xf0
  13cdfc:	ebfffb0a 	bl	13ba2c <get_rtt_syscall>
  13ce00:	e2503000 	subs	r3, r0, #0
  13ce04:	0affffc5 	beq	13cd20 <malloc+0x354>
  13ce08:	e3a02001 	mov	r2, #1
  13ce0c:	e3a01081 	mov	r1, #129	; 0x81
  13ce10:	e1a00005 	mov	r0, r5
  13ce14:	e12fff33 	blx	r3
  13ce18:	e3700026 	cmn	r0, #38	; 0x26
  13ce1c:	1affffbf 	bne	13cd20 <malloc+0x354>
  13ce20:	e3a000f0 	mov	r0, #240	; 0xf0
  13ce24:	ebfffb00 	bl	13ba2c <get_rtt_syscall>
  13ce28:	e2503000 	subs	r3, r0, #0
  13ce2c:	0affffbb 	beq	13cd20 <malloc+0x354>
  13ce30:	e3a02001 	mov	r2, #1
  13ce34:	e1a00005 	mov	r0, r5
  13ce38:	e1a01002 	mov	r1, r2
  13ce3c:	e12fff33 	blx	r3
  13ce40:	eaffffb6 	b	13cd20 <malloc+0x354>
  13ce44:	e357003f 	cmp	r7, #63	; 0x3f
  13ce48:	0a000038 	beq	13cf30 <malloc+0x564>
  13ce4c:	e1a01007 	mov	r1, r7
  13ce50:	e1a00004 	mov	r0, r4
  13ce54:	ebfffbae 	bl	13bd14 <unbin>
  13ce58:	eaffffd9 	b	13cdc4 <malloc+0x3f8>
  13ce5c:	e3a000f0 	mov	r0, #240	; 0xf0
  13ce60:	ebfffaf1 	bl	13ba2c <get_rtt_syscall>
  13ce64:	e2503000 	subs	r3, r0, #0
  13ce68:	0affff9a 	beq	13ccd8 <malloc+0x30c>
  13ce6c:	e1a02007 	mov	r2, r7
  13ce70:	e3a01081 	mov	r1, #129	; 0x81
  13ce74:	e59f015c 	ldr	r0, [pc, #348]	; 13cfd8 <malloc+0x60c>
  13ce78:	e12fff33 	blx	r3
  13ce7c:	e3700026 	cmn	r0, #38	; 0x26
  13ce80:	1affff94 	bne	13ccd8 <malloc+0x30c>
  13ce84:	e3a000f0 	mov	r0, #240	; 0xf0
  13ce88:	ebfffae7 	bl	13ba2c <get_rtt_syscall>
  13ce8c:	e2503000 	subs	r3, r0, #0
  13ce90:	0affff90 	beq	13ccd8 <malloc+0x30c>
  13ce94:	e1a02007 	mov	r2, r7
  13ce98:	e1a01007 	mov	r1, r7
  13ce9c:	e59f0134 	ldr	r0, [pc, #308]	; 13cfd8 <malloc+0x60c>
  13cea0:	e12fff33 	blx	r3
  13cea4:	eaffff8b 	b	13ccd8 <malloc+0x30c>
  13cea8:	e1a06005 	mov	r6, r5
  13ceac:	e59f7118 	ldr	r7, [pc, #280]	; 13cfcc <malloc+0x600>
  13ceb0:	e2858004 	add	r8, r5, #4
  13ceb4:	e5954000 	ldr	r4, [r5]
  13ceb8:	ea000002 	b	13cec8 <malloc+0x4fc>
  13cebc:	e5953000 	ldr	r3, [r5]
  13cec0:	e1540003 	cmp	r4, r3
  13cec4:	1afffffa 	bne	13ceb4 <malloc+0x4e8>
  13cec8:	e1a00004 	mov	r0, r4
  13cecc:	e3a01001 	mov	r1, #1
  13ced0:	e1a02006 	mov	r2, r6
  13ced4:	e5973000 	ldr	r3, [r7]
  13ced8:	e12fff33 	blx	r3
  13cedc:	e3500000 	cmp	r0, #0
  13cee0:	1afffff5 	bne	13cebc <malloc+0x4f0>
  13cee4:	e3540000 	cmp	r4, #0
  13cee8:	0affff59 	beq	13cc54 <malloc+0x288>
  13ceec:	e1a03001 	mov	r3, r1
  13cef0:	e1a02001 	mov	r2, r1
  13cef4:	e59f00dc 	ldr	r0, [pc, #220]	; 13cfd8 <malloc+0x60c>
  13cef8:	e1a01008 	mov	r1, r8
  13cefc:	eb001132 	bl	1413cc <__wait>
  13cf00:	eaffffeb 	b	13ceb4 <malloc+0x4e8>
  13cf04:	e3a04000 	mov	r4, #0
  13cf08:	e1a00004 	mov	r0, r4
  13cf0c:	e28dd02c 	add	sp, sp, #44	; 0x2c
  13cf10:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13cf14:	e3530b07 	cmp	r3, #7168	; 0x1c00
  13cf18:	959fc0b4 	ldrls	ip, [pc, #180]	; 13cfd4 <malloc+0x608>
  13cf1c:	83a0303f 	movhi	r3, #63	; 0x3f
  13cf20:	908c33a3 	addls	r3, ip, r3, lsr #7
  13cf24:	95533004 	ldrbls	r3, [r3, #-4]
  13cf28:	92833010 	addls	r3, r3, #16
  13cf2c:	eaffff95 	b	13cd88 <malloc+0x3bc>
  13cf30:	e5942004 	ldr	r2, [r4, #4]
  13cf34:	e3c22001 	bic	r2, r2, #1
  13cf38:	e0421000 	sub	r1, r2, r0
  13cf3c:	e3510907 	cmp	r1, #114688	; 0x1c000
  13cf40:	8affff87 	bhi	13cd64 <malloc+0x398>
  13cf44:	eaffffc0 	b	13ce4c <malloc+0x480>
  13cf48:	e5953000 	ldr	r3, [r5]
  13cf4c:	e3530000 	cmp	r3, #0
  13cf50:	0affffeb 	beq	13cf04 <malloc+0x538>
  13cf54:	e59f3074 	ldr	r3, [pc, #116]	; 13cfd0 <malloc+0x604>
  13cf58:	e593c000 	ldr	ip, [r3]
  13cf5c:	e12fff3c 	blx	ip
  13cf60:	e5854000 	str	r4, [r5]
  13cf64:	e593c000 	ldr	ip, [r3]
  13cf68:	e12fff3c 	blx	ip
  13cf6c:	e5953004 	ldr	r3, [r5, #4]
  13cf70:	e3530000 	cmp	r3, #0
  13cf74:	0affffe2 	beq	13cf04 <malloc+0x538>
  13cf78:	e3a000f0 	mov	r0, #240	; 0xf0
  13cf7c:	ebfffaaa 	bl	13ba2c <get_rtt_syscall>
  13cf80:	e2503000 	subs	r3, r0, #0
  13cf84:	0affffde 	beq	13cf04 <malloc+0x538>
  13cf88:	e3a02001 	mov	r2, #1
  13cf8c:	e3a01081 	mov	r1, #129	; 0x81
  13cf90:	e59f0040 	ldr	r0, [pc, #64]	; 13cfd8 <malloc+0x60c>
  13cf94:	e12fff33 	blx	r3
  13cf98:	e3700026 	cmn	r0, #38	; 0x26
  13cf9c:	1affffd8 	bne	13cf04 <malloc+0x538>
  13cfa0:	e3a000f0 	mov	r0, #240	; 0xf0
  13cfa4:	ebfffaa0 	bl	13ba2c <get_rtt_syscall>
  13cfa8:	e2503000 	subs	r3, r0, #0
  13cfac:	0affffd4 	beq	13cf04 <malloc+0x538>
  13cfb0:	e3a02001 	mov	r2, #1
  13cfb4:	e59f001c 	ldr	r0, [pc, #28]	; 13cfd8 <malloc+0x60c>
  13cfb8:	e1a01002 	mov	r1, r2
  13cfbc:	e12fff33 	blx	r3
  13cfc0:	eaffff19 	b	13cc2c <malloc+0x260>
  13cfc4:	0014e3b0 	.word	0x0014e3b0
  13cfc8:	00575604 	.word	0x00575604
  13cfcc:	0014d3d0 	.word	0x0014d3d0
  13cfd0:	0014d3cc 	.word	0x0014d3cc
  13cfd4:	0014c238 	.word	0x0014c238
  13cfd8:	0014e3a4 	.word	0x0014e3a4
  13cfdc:	0014e3a0 	.word	0x0014e3a0

0013cfe0 <calloc>:
  13cfe0:	e3510000 	cmp	r1, #0
  13cfe4:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, fp, lr}
  13cfe8:	0a000002 	beq	13cff8 <calloc+0x18>
  13cfec:	e0832190 	umull	r2, r3, r0, r1
  13cff0:	e3530000 	cmp	r3, #0
  13cff4:	1a000013 	bne	13d048 <calloc+0x68>
  13cff8:	e0040190 	mul	r4, r0, r1
  13cffc:	e1a00004 	mov	r0, r4
  13d000:	ebfffe71 	bl	13c9cc <malloc>
  13d004:	e2509000 	subs	r9, r0, #0
  13d008:	0a000012 	beq	13d058 <calloc+0x78>
  13d00c:	e59f30a0 	ldr	r3, [pc, #160]	; 13d0b4 <calloc+0xd4>
  13d010:	e5933000 	ldr	r3, [r3]
  13d014:	e3530000 	cmp	r3, #0
  13d018:	1a000005 	bne	13d034 <calloc+0x54>
  13d01c:	e5193004 	ldr	r3, [r9, #-4]
  13d020:	e3130001 	tst	r3, #1
  13d024:	0a00000b 	beq	13d058 <calloc+0x78>
  13d028:	e59f3088 	ldr	r3, [pc, #136]	; 13d0b8 <calloc+0xd8>
  13d02c:	e1540003 	cmp	r4, r3
  13d030:	8a00000a 	bhi	13d060 <calloc+0x80>
  13d034:	e1a02004 	mov	r2, r4
  13d038:	e1a00009 	mov	r0, r9
  13d03c:	e8bd4bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
  13d040:	e3a01000 	mov	r1, #0
  13d044:	ea000e28 	b	1408ec <memset>
  13d048:	ebffed41 	bl	138554 <__errno_location>
  13d04c:	e3a0300c 	mov	r3, #12
  13d050:	e3a09000 	mov	r9, #0
  13d054:	e5803000 	str	r3, [r0]
  13d058:	e1a00009 	mov	r0, r9
  13d05c:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
  13d060:	e1a08003 	mov	r8, r3
  13d064:	e0890004 	add	r0, r9, r4
  13d068:	e0002003 	and	r2, r0, r3
  13d06c:	e0400002 	sub	r0, r0, r2
  13d070:	e3a01000 	mov	r1, #0
  13d074:	eb000e1c 	bl	1408ec <memset>
  13d078:	e0404009 	sub	r4, r0, r9
  13d07c:	e1540008 	cmp	r4, r8
  13d080:	9affffeb 	bls	13d034 <calloc+0x54>
  13d084:	e3a02a01 	mov	r2, #4096	; 0x1000
  13d088:	e9100030 	ldmdb	r0, {r4, r5}
  13d08c:	e2407010 	sub	r7, r0, #16
  13d090:	e89700c0 	ldm	r7, {r6, r7}
  13d094:	e184b006 	orr	fp, r4, r6
  13d098:	e185c007 	orr	ip, r5, r7
  13d09c:	e19b300c 	orrs	r3, fp, ip
  13d0a0:	1afffff1 	bne	13d06c <calloc+0x8c>
  13d0a4:	e2522010 	subs	r2, r2, #16
  13d0a8:	e2400010 	sub	r0, r0, #16
  13d0ac:	1afffff5 	bne	13d088 <calloc+0xa8>
  13d0b0:	eaffffed 	b	13d06c <calloc+0x8c>
  13d0b4:	00575648 	.word	0x00575648
  13d0b8:	00000fff 	.word	0x00000fff

0013d0bc <free>:
  13d0bc:	e2502000 	subs	r2, r0, #0
  13d0c0:	012fff1e 	bxeq	lr
  13d0c4:	e5123004 	ldr	r3, [r2, #-4]
  13d0c8:	e2420008 	sub	r0, r2, #8
  13d0cc:	e3130001 	tst	r3, #1
  13d0d0:	0a000000 	beq	13d0d8 <free+0x1c>
  13d0d4:	eafffc9a 	b	13c344 <__bin_chunk>
  13d0d8:	e5121008 	ldr	r1, [r2, #-8]
  13d0dc:	e3c33001 	bic	r3, r3, #1
  13d0e0:	e3110001 	tst	r1, #1
  13d0e4:	e0400001 	sub	r0, r0, r1
  13d0e8:	e0831001 	add	r1, r3, r1
  13d0ec:	0a000000 	beq	13d0f4 <free+0x38>
  13d0f0:	e7f000f0 	.word	0xe7f000f0
  13d0f4:	ea0000f5 	b	13d4d0 <__munmap>

0013d0f8 <realloc>:
  13d0f8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  13d0fc:	e2505000 	subs	r5, r0, #0
  13d100:	e24dd008 	sub	sp, sp, #8
  13d104:	e58d1004 	str	r1, [sp, #4]
  13d108:	0a000034 	beq	13d1e0 <realloc+0xe8>
  13d10c:	e28d0004 	add	r0, sp, #4
  13d110:	ebfffae5 	bl	13bcac <adjust_size>
  13d114:	e3500000 	cmp	r0, #0
  13d118:	ba00005b 	blt	13d28c <realloc+0x194>
  13d11c:	e5153004 	ldr	r3, [r5, #-4]
  13d120:	e2459008 	sub	r9, r5, #8
  13d124:	e3130001 	tst	r3, #1
  13d128:	e3c36001 	bic	r6, r3, #1
  13d12c:	0a000010 	beq	13d174 <realloc+0x7c>
  13d130:	e7992006 	ldr	r2, [r9, r6]
  13d134:	e0894006 	add	r4, r9, r6
  13d138:	e1530002 	cmp	r3, r2
  13d13c:	0a000000 	beq	13d144 <realloc+0x4c>
  13d140:	e7f000f0 	.word	0xe7f000f0
  13d144:	e59d1004 	ldr	r1, [sp, #4]
  13d148:	e1510006 	cmp	r1, r6
  13d14c:	93866001 	orrls	r6, r6, #1
  13d150:	95056004 	strls	r6, [r5, #-4]
  13d154:	95846000 	strls	r6, [r4]
  13d158:	8a000038 	bhi	13d240 <realloc+0x148>
  13d15c:	e1a00009 	mov	r0, r9
  13d160:	ebfffe08 	bl	13c988 <trim>
  13d164:	e1a07005 	mov	r7, r5
  13d168:	e1a00007 	mov	r0, r7
  13d16c:	e28dd008 	add	sp, sp, #8
  13d170:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  13d174:	e5158008 	ldr	r8, [r5, #-8]
  13d178:	e59d4004 	ldr	r4, [sp, #4]
  13d17c:	e3180001 	tst	r8, #1
  13d180:	e086a008 	add	sl, r6, r8
  13d184:	e0884004 	add	r4, r8, r4
  13d188:	1a00001a 	bne	13d1f8 <realloc+0x100>
  13d18c:	e3540a01 	cmp	r4, #4096	; 0x1000
  13d190:	3a00001b 	bcc	13d204 <realloc+0x10c>
  13d194:	e2844eff 	add	r4, r4, #4080	; 0xff0
  13d198:	e284400f 	add	r4, r4, #15
  13d19c:	e3c44eff 	bic	r4, r4, #4080	; 0xff0
  13d1a0:	e3c4400f 	bic	r4, r4, #15
  13d1a4:	e15a0004 	cmp	sl, r4
  13d1a8:	01a07005 	moveq	r7, r5
  13d1ac:	0affffed 	beq	13d168 <realloc+0x70>
  13d1b0:	e1a0100a 	mov	r1, sl
  13d1b4:	e0490008 	sub	r0, r9, r8
  13d1b8:	e3a03001 	mov	r3, #1
  13d1bc:	e1a02004 	mov	r2, r4
  13d1c0:	eb000099 	bl	13d42c <__mremap>
  13d1c4:	e3700001 	cmn	r0, #1
  13d1c8:	0a000031 	beq	13d294 <realloc+0x19c>
  13d1cc:	e0800008 	add	r0, r0, r8
  13d1d0:	e0444008 	sub	r4, r4, r8
  13d1d4:	e5804004 	str	r4, [r0, #4]
  13d1d8:	e2807008 	add	r7, r0, #8
  13d1dc:	eaffffe1 	b	13d168 <realloc+0x70>
  13d1e0:	e1a00001 	mov	r0, r1
  13d1e4:	ebfffdf8 	bl	13c9cc <malloc>
  13d1e8:	e1a07000 	mov	r7, r0
  13d1ec:	e1a00007 	mov	r0, r7
  13d1f0:	e28dd008 	add	sp, sp, #8
  13d1f4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  13d1f8:	e7f000f0 	.word	0xe7f000f0
  13d1fc:	e3540a01 	cmp	r4, #4096	; 0x1000
  13d200:	2affffe3 	bcs	13d194 <realloc+0x9c>
  13d204:	e59d0004 	ldr	r0, [sp, #4]
  13d208:	e2400008 	sub	r0, r0, #8
  13d20c:	ebfffdee 	bl	13c9cc <malloc>
  13d210:	e2507000 	subs	r7, r0, #0
  13d214:	0affffde 	beq	13d194 <realloc+0x9c>
  13d218:	e59d6004 	ldr	r6, [sp, #4]
  13d21c:	e2462008 	sub	r2, r6, #8
  13d220:	e1a01005 	mov	r1, r5
  13d224:	e1a00007 	mov	r0, r7
  13d228:	eb000c77 	bl	14040c <memcpy>
  13d22c:	e1a00005 	mov	r0, r5
  13d230:	ebffffa1 	bl	13d0bc <free>
  13d234:	e1a00007 	mov	r0, r7
  13d238:	e28dd008 	add	sp, sp, #8
  13d23c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  13d240:	e1a00004 	mov	r0, r4
  13d244:	ebfffafc 	bl	13be3c <alloc_fwd>
  13d248:	e3500000 	cmp	r0, #0
  13d24c:	01a03006 	moveq	r3, r6
  13d250:	15943004 	ldrne	r3, [r4, #4]
  13d254:	059d1004 	ldreq	r1, [sp, #4]
  13d258:	13c33001 	bicne	r3, r3, #1
  13d25c:	159d1004 	ldrne	r1, [sp, #4]
  13d260:	10844003 	addne	r4, r4, r3
  13d264:	10833006 	addne	r3, r3, r6
  13d268:	e1530001 	cmp	r3, r1
  13d26c:	e3833001 	orr	r3, r3, #1
  13d270:	e5053004 	str	r3, [r5, #-4]
  13d274:	e5843000 	str	r3, [r4]
  13d278:	2affffb7 	bcs	13d15c <realloc+0x64>
  13d27c:	e2410008 	sub	r0, r1, #8
  13d280:	ebfffdd1 	bl	13c9cc <malloc>
  13d284:	e2507000 	subs	r7, r0, #0
  13d288:	1affffe3 	bne	13d21c <realloc+0x124>
  13d28c:	e3a07000 	mov	r7, #0
  13d290:	eaffffb4 	b	13d168 <realloc+0x70>
  13d294:	e59d1004 	ldr	r1, [sp, #4]
  13d298:	eafffff7 	b	13d27c <realloc+0x184>

0013d29c <__malloc_donate>:
  13d29c:	e2602008 	rsb	r2, r0, #8
  13d2a0:	e201300f 	and	r3, r1, #15
  13d2a4:	e202200f 	and	r2, r2, #15
  13d2a8:	e2833008 	add	r3, r3, #8
  13d2ac:	e0833002 	add	r3, r3, r2
  13d2b0:	e041c000 	sub	ip, r1, r0
  13d2b4:	e15c0003 	cmp	ip, r3
  13d2b8:	912fff1e 	bxls	lr
  13d2bc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13d2c0:	e3a0e001 	mov	lr, #1
  13d2c4:	e2823008 	add	r3, r2, #8
  13d2c8:	e0803003 	add	r3, r0, r3
  13d2cc:	e3c1100f 	bic	r1, r1, #15
  13d2d0:	e041c003 	sub	ip, r1, r3
  13d2d4:	e18cc00e 	orr	ip, ip, lr
  13d2d8:	e501e004 	str	lr, [r1, #-4]
  13d2dc:	e0800002 	add	r0, r0, r2
  13d2e0:	e503e008 	str	lr, [r3, #-8]
  13d2e4:	e501c008 	str	ip, [r1, #-8]
  13d2e8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13d2ec:	e503c004 	str	ip, [r3, #-4]
  13d2f0:	eafffc13 	b	13c344 <__bin_chunk>

0013d2f4 <__madvise>:
  13d2f4:	e92d4070 	push	{r4, r5, r6, lr}
  13d2f8:	e1a04000 	mov	r4, r0
  13d2fc:	e3a000dc 	mov	r0, #220	; 0xdc
  13d300:	e1a05001 	mov	r5, r1
  13d304:	e1a06002 	mov	r6, r2
  13d308:	ebfff9c7 	bl	13ba2c <get_rtt_syscall>
  13d30c:	e2503000 	subs	r3, r0, #0
  13d310:	0a000005 	beq	13d32c <__madvise+0x38>
  13d314:	e1a02006 	mov	r2, r6
  13d318:	e1a01005 	mov	r1, r5
  13d31c:	e1a00004 	mov	r0, r4
  13d320:	e12fff33 	blx	r3
  13d324:	e8bd4070 	pop	{r4, r5, r6, lr}
  13d328:	eafff9f4 	b	13bb00 <__syscall_ret>
  13d32c:	e1a00003 	mov	r0, r3
  13d330:	eafffffb 	b	13d324 <__madvise+0x30>

0013d334 <dummy>:
  13d334:	e12fff1e 	bx	lr

0013d338 <__mmap>:
  13d338:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13d33c:	e28f50dc 	add	r5, pc, #220	; 0xdc
  13d340:	e8950030 	ldm	r5, {r4, r5}
  13d344:	e24dd00c 	sub	sp, sp, #12
  13d348:	e28d7038 	add	r7, sp, #56	; 0x38
  13d34c:	e89700c0 	ldm	r7, {r6, r7}
  13d350:	e0048006 	and	r8, r4, r6
  13d354:	e0059007 	and	r9, r5, r7
  13d358:	e198c009 	orrs	ip, r8, r9
  13d35c:	e59db030 	ldr	fp, [sp, #48]	; 0x30
  13d360:	1a000024 	bne	13d3f8 <__mmap+0xc0>
  13d364:	e371010a 	cmn	r1, #-2147483646	; 0x80000002
  13d368:	e1a08001 	mov	r8, r1
  13d36c:	8a00001b 	bhi	13d3e0 <__mmap+0xa8>
  13d370:	e3130010 	tst	r3, #16
  13d374:	e1a09000 	mov	r9, r0
  13d378:	e1a0a002 	mov	sl, r2
  13d37c:	e1a05003 	mov	r5, r3
  13d380:	1a000022 	bne	13d410 <__mmap+0xd8>
  13d384:	e3a000c0 	mov	r0, #192	; 0xc0
  13d388:	ebfff9a7 	bl	13ba2c <get_rtt_syscall>
  13d38c:	e1a03626 	lsr	r3, r6, #12
  13d390:	e2504000 	subs	r4, r0, #0
  13d394:	e1833a07 	orr	r3, r3, r7, lsl #20
  13d398:	0a00001e 	beq	13d418 <__mmap+0xe0>
  13d39c:	e58d3004 	str	r3, [sp, #4]
  13d3a0:	e58db000 	str	fp, [sp]
  13d3a4:	e1a0200a 	mov	r2, sl
  13d3a8:	e1a01008 	mov	r1, r8
  13d3ac:	e1a03005 	mov	r3, r5
  13d3b0:	e1a00009 	mov	r0, r9
  13d3b4:	e12fff34 	blx	r4
  13d3b8:	e3590000 	cmp	r9, #0
  13d3bc:	03700001 	cmneq	r0, #1
  13d3c0:	1a000003 	bne	13d3d4 <__mmap+0x9c>
  13d3c4:	e2055030 	and	r5, r5, #48	; 0x30
  13d3c8:	e3550020 	cmp	r5, #32
  13d3cc:	03e0000b 	mvneq	r0, #11
  13d3d0:	13e00000 	mvnne	r0, #0
  13d3d4:	e28dd00c 	add	sp, sp, #12
  13d3d8:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13d3dc:	eafff9c7 	b	13bb00 <__syscall_ret>
  13d3e0:	ebffec5b 	bl	138554 <__errno_location>
  13d3e4:	e3a0300c 	mov	r3, #12
  13d3e8:	e5803000 	str	r3, [r0]
  13d3ec:	e3e00000 	mvn	r0, #0
  13d3f0:	e28dd00c 	add	sp, sp, #12
  13d3f4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13d3f8:	ebffec55 	bl	138554 <__errno_location>
  13d3fc:	e3a03016 	mov	r3, #22
  13d400:	e5803000 	str	r3, [r0]
  13d404:	e3e00000 	mvn	r0, #0
  13d408:	e28dd00c 	add	sp, sp, #12
  13d40c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13d410:	eb00139d 	bl	14228c <__vm_wait>
  13d414:	eaffffda 	b	13d384 <__mmap+0x4c>
  13d418:	e1a00004 	mov	r0, r4
  13d41c:	eaffffec 	b	13d3d4 <__mmap+0x9c>
  13d420:	00000fff 	.word	0x00000fff
  13d424:	fffff000 	.word	0xfffff000

0013d428 <dummy>:
  13d428:	e12fff1e 	bx	lr

0013d42c <__mremap>:
  13d42c:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
  13d430:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13d434:	e372010a 	cmn	r2, #-2147483646	; 0x80000002
  13d438:	e24dd014 	sub	sp, sp, #20
  13d43c:	8a00001b 	bhi	13d4b0 <__mremap+0x84>
  13d440:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  13d444:	e1a05002 	mov	r5, r2
  13d448:	e2136002 	ands	r6, r3, #2
  13d44c:	e1a07000 	mov	r7, r0
  13d450:	e1a08001 	mov	r8, r1
  13d454:	1a000010 	bne	13d49c <__mremap+0x70>
  13d458:	e3a000a3 	mov	r0, #163	; 0xa3
  13d45c:	ebfff972 	bl	13ba2c <get_rtt_syscall>
  13d460:	e2504000 	subs	r4, r0, #0
  13d464:	0a000016 	beq	13d4c4 <__mremap+0x98>
  13d468:	e58d6000 	str	r6, [sp]
  13d46c:	e1a02005 	mov	r2, r5
  13d470:	e1a01008 	mov	r1, r8
  13d474:	e1a00007 	mov	r0, r7
  13d478:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  13d47c:	e12fff34 	blx	r4
  13d480:	ebfff99e 	bl	13bb00 <__syscall_ret>
  13d484:	e1a03000 	mov	r3, r0
  13d488:	e1a00003 	mov	r0, r3
  13d48c:	e28dd014 	add	sp, sp, #20
  13d490:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
  13d494:	e28dd004 	add	sp, sp, #4
  13d498:	e12fff1e 	bx	lr
  13d49c:	eb00137a 	bl	14228c <__vm_wait>
  13d4a0:	e28d3030 	add	r3, sp, #48	; 0x30
  13d4a4:	e58d300c 	str	r3, [sp, #12]
  13d4a8:	e59d6030 	ldr	r6, [sp, #48]	; 0x30
  13d4ac:	eaffffe9 	b	13d458 <__mremap+0x2c>
  13d4b0:	ebffec27 	bl	138554 <__errno_location>
  13d4b4:	e3a0200c 	mov	r2, #12
  13d4b8:	e3e03000 	mvn	r3, #0
  13d4bc:	e5802000 	str	r2, [r0]
  13d4c0:	eafffff0 	b	13d488 <__mremap+0x5c>
  13d4c4:	e1a00004 	mov	r0, r4
  13d4c8:	eaffffec 	b	13d480 <__mremap+0x54>

0013d4cc <dummy>:
  13d4cc:	e12fff1e 	bx	lr

0013d4d0 <__munmap>:
  13d4d0:	e92d4070 	push	{r4, r5, r6, lr}
  13d4d4:	e1a04000 	mov	r4, r0
  13d4d8:	e1a05001 	mov	r5, r1
  13d4dc:	eb00136a 	bl	14228c <__vm_wait>
  13d4e0:	e3a0005b 	mov	r0, #91	; 0x5b
  13d4e4:	ebfff950 	bl	13ba2c <get_rtt_syscall>
  13d4e8:	e2503000 	subs	r3, r0, #0
  13d4ec:	0a000004 	beq	13d504 <__munmap+0x34>
  13d4f0:	e1a01005 	mov	r1, r5
  13d4f4:	e1a00004 	mov	r0, r4
  13d4f8:	e12fff33 	blx	r3
  13d4fc:	e8bd4070 	pop	{r4, r5, r6, lr}
  13d500:	eafff97e 	b	13bb00 <__syscall_ret>
  13d504:	e1a00003 	mov	r0, r3
  13d508:	eafffffb 	b	13d4fc <__munmap+0x2c>

0013d50c <accept>:
  13d50c:	e3a0c000 	mov	ip, #0
  13d510:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13d514:	e24dd014 	sub	sp, sp, #20
  13d518:	e1a03002 	mov	r3, r2
  13d51c:	e58dc008 	str	ip, [sp, #8]
  13d520:	e1a02001 	mov	r2, r1
  13d524:	e58dc004 	str	ip, [sp, #4]
  13d528:	e1a01000 	mov	r1, r0
  13d52c:	e58dc000 	str	ip, [sp]
  13d530:	e59f000c 	ldr	r0, [pc, #12]	; 13d544 <accept+0x38>
  13d534:	eb000fa3 	bl	1413c8 <__syscall_cp>
  13d538:	e28dd014 	add	sp, sp, #20
  13d53c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13d540:	eafff96e 	b	13bb00 <__syscall_ret>
  13d544:	0000011d 	.word	0x0000011d

0013d548 <bind>:
  13d548:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13d54c:	e1a05000 	mov	r5, r0
  13d550:	e24dd00c 	sub	sp, sp, #12
  13d554:	e59f0040 	ldr	r0, [pc, #64]	; 13d59c <bind+0x54>
  13d558:	e1a06001 	mov	r6, r1
  13d55c:	e1a07002 	mov	r7, r2
  13d560:	ebfff931 	bl	13ba2c <get_rtt_syscall>
  13d564:	e2504000 	subs	r4, r0, #0
  13d568:	0a000009 	beq	13d594 <bind+0x4c>
  13d56c:	e3a03000 	mov	r3, #0
  13d570:	e1a02007 	mov	r2, r7
  13d574:	e1a01006 	mov	r1, r6
  13d578:	e1a00005 	mov	r0, r5
  13d57c:	e58d3004 	str	r3, [sp, #4]
  13d580:	e58d3000 	str	r3, [sp]
  13d584:	e12fff34 	blx	r4
  13d588:	e28dd00c 	add	sp, sp, #12
  13d58c:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
  13d590:	eafff95a 	b	13bb00 <__syscall_ret>
  13d594:	e1a00004 	mov	r0, r4
  13d598:	eafffffa 	b	13d588 <bind+0x40>
  13d59c:	0000011a 	.word	0x0000011a

0013d5a0 <connect>:
  13d5a0:	e3a0c000 	mov	ip, #0
  13d5a4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13d5a8:	e24dd014 	sub	sp, sp, #20
  13d5ac:	e1a03002 	mov	r3, r2
  13d5b0:	e58dc008 	str	ip, [sp, #8]
  13d5b4:	e1a02001 	mov	r2, r1
  13d5b8:	e58dc004 	str	ip, [sp, #4]
  13d5bc:	e1a01000 	mov	r1, r0
  13d5c0:	e58dc000 	str	ip, [sp]
  13d5c4:	e59f000c 	ldr	r0, [pc, #12]	; 13d5d8 <connect+0x38>
  13d5c8:	eb000f7e 	bl	1413c8 <__syscall_cp>
  13d5cc:	e28dd014 	add	sp, sp, #20
  13d5d0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13d5d4:	eafff949 	b	13bb00 <__syscall_ret>
  13d5d8:	0000011b 	.word	0x0000011b

0013d5dc <htonl>:
  13d5dc:	e0203860 	eor	r3, r0, r0, ror #16
  13d5e0:	e1a03423 	lsr	r3, r3, #8
  13d5e4:	e3c33cff 	bic	r3, r3, #65280	; 0xff00
  13d5e8:	e0230460 	eor	r0, r3, r0, ror #8
  13d5ec:	e12fff1e 	bx	lr

0013d5f0 <htons>:
  13d5f0:	e1a03420 	lsr	r3, r0, #8
  13d5f4:	e1830400 	orr	r0, r3, r0, lsl #8
  13d5f8:	e1a00800 	lsl	r0, r0, #16
  13d5fc:	e1a00820 	lsr	r0, r0, #16
  13d600:	e12fff1e 	bx	lr

0013d604 <listen>:
  13d604:	e92d4070 	push	{r4, r5, r6, lr}
  13d608:	e1a05000 	mov	r5, r0
  13d60c:	e24dd008 	sub	sp, sp, #8
  13d610:	e3a00f47 	mov	r0, #284	; 0x11c
  13d614:	e1a06001 	mov	r6, r1
  13d618:	ebfff903 	bl	13ba2c <get_rtt_syscall>
  13d61c:	e2504000 	subs	r4, r0, #0
  13d620:	0a000009 	beq	13d64c <listen+0x48>
  13d624:	e3a03000 	mov	r3, #0
  13d628:	e1a01006 	mov	r1, r6
  13d62c:	e1a00005 	mov	r0, r5
  13d630:	e58d3004 	str	r3, [sp, #4]
  13d634:	e58d3000 	str	r3, [sp]
  13d638:	e1a02003 	mov	r2, r3
  13d63c:	e12fff34 	blx	r4
  13d640:	e28dd008 	add	sp, sp, #8
  13d644:	e8bd4070 	pop	{r4, r5, r6, lr}
  13d648:	eafff92c 	b	13bb00 <__syscall_ret>
  13d64c:	e1a00004 	mov	r0, r4
  13d650:	eafffffa 	b	13d640 <listen+0x3c>

0013d654 <setsockopt>:
  13d654:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  13d658:	e1a05000 	mov	r5, r0
  13d65c:	e24dd00c 	sub	sp, sp, #12
  13d660:	e59f004c 	ldr	r0, [pc, #76]	; 13d6b4 <setsockopt+0x60>
  13d664:	e1a06001 	mov	r6, r1
  13d668:	e1a07002 	mov	r7, r2
  13d66c:	e1a08003 	mov	r8, r3
  13d670:	e59d9028 	ldr	r9, [sp, #40]	; 0x28
  13d674:	ebfff8ec 	bl	13ba2c <get_rtt_syscall>
  13d678:	e2504000 	subs	r4, r0, #0
  13d67c:	0a00000a 	beq	13d6ac <setsockopt+0x58>
  13d680:	e3a0c000 	mov	ip, #0
  13d684:	e58d9000 	str	r9, [sp]
  13d688:	e1a03008 	mov	r3, r8
  13d68c:	e1a02007 	mov	r2, r7
  13d690:	e1a01006 	mov	r1, r6
  13d694:	e1a00005 	mov	r0, r5
  13d698:	e58dc004 	str	ip, [sp, #4]
  13d69c:	e12fff34 	blx	r4
  13d6a0:	e28dd00c 	add	sp, sp, #12
  13d6a4:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
  13d6a8:	eafff914 	b	13bb00 <__syscall_ret>
  13d6ac:	e1a00004 	mov	r0, r4
  13d6b0:	eafffffa 	b	13d6a0 <setsockopt+0x4c>
  13d6b4:	00000126 	.word	0x00000126

0013d6b8 <socket>:
  13d6b8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13d6bc:	e1a06000 	mov	r6, r0
  13d6c0:	e24dd00c 	sub	sp, sp, #12
  13d6c4:	e59f0118 	ldr	r0, [pc, #280]	; 13d7e4 <socket+0x12c>
  13d6c8:	e1a05001 	mov	r5, r1
  13d6cc:	e1a07002 	mov	r7, r2
  13d6d0:	ebfff8d5 	bl	13ba2c <get_rtt_syscall>
  13d6d4:	e2504000 	subs	r4, r0, #0
  13d6d8:	0a000034 	beq	13d7b0 <socket+0xf8>
  13d6dc:	e3a03000 	mov	r3, #0
  13d6e0:	e1a02007 	mov	r2, r7
  13d6e4:	e58d3004 	str	r3, [sp, #4]
  13d6e8:	e58d3000 	str	r3, [sp]
  13d6ec:	e1a01005 	mov	r1, r5
  13d6f0:	e1a00006 	mov	r0, r6
  13d6f4:	e12fff34 	blx	r4
  13d6f8:	ebfff900 	bl	13bb00 <__syscall_ret>
  13d6fc:	e2504000 	subs	r4, r0, #0
  13d700:	ba000002 	blt	13d710 <socket+0x58>
  13d704:	e1a00004 	mov	r0, r4
  13d708:	e28dd00c 	add	sp, sp, #12
  13d70c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  13d710:	ebffeb8f 	bl	138554 <__errno_location>
  13d714:	e5903000 	ldr	r3, [r0]
  13d718:	e3530016 	cmp	r3, #22
  13d71c:	1a00001e 	bne	13d79c <socket+0xe4>
  13d720:	e59f30c0 	ldr	r3, [pc, #192]	; 13d7e8 <socket+0x130>
  13d724:	e1150003 	tst	r5, r3
  13d728:	0afffff5 	beq	13d704 <socket+0x4c>
  13d72c:	e59f00b0 	ldr	r0, [pc, #176]	; 13d7e4 <socket+0x12c>
  13d730:	ebfff8bd 	bl	13ba2c <get_rtt_syscall>
  13d734:	e3c51702 	bic	r1, r5, #524288	; 0x80000
  13d738:	e2504000 	subs	r4, r0, #0
  13d73c:	e3c11b02 	bic	r1, r1, #2048	; 0x800
  13d740:	0a000025 	beq	13d7dc <socket+0x124>
  13d744:	e3a03000 	mov	r3, #0
  13d748:	e1a02007 	mov	r2, r7
  13d74c:	e1a00006 	mov	r0, r6
  13d750:	e58d3004 	str	r3, [sp, #4]
  13d754:	e58d3000 	str	r3, [sp]
  13d758:	e12fff34 	blx	r4
  13d75c:	ebfff8e7 	bl	13bb00 <__syscall_ret>
  13d760:	e2504000 	subs	r4, r0, #0
  13d764:	baffffe6 	blt	13d704 <socket+0x4c>
  13d768:	e3150702 	tst	r5, #524288	; 0x80000
  13d76c:	1a000011 	bne	13d7b8 <socket+0x100>
  13d770:	e3150b02 	tst	r5, #2048	; 0x800
  13d774:	0affffe2 	beq	13d704 <socket+0x4c>
  13d778:	e3a000dd 	mov	r0, #221	; 0xdd
  13d77c:	ebfff8aa 	bl	13ba2c <get_rtt_syscall>
  13d780:	e2503000 	subs	r3, r0, #0
  13d784:	0affffde 	beq	13d704 <socket+0x4c>
  13d788:	e3a02b02 	mov	r2, #2048	; 0x800
  13d78c:	e3a01004 	mov	r1, #4
  13d790:	e1a00004 	mov	r0, r4
  13d794:	e12fff33 	blx	r3
  13d798:	eaffffd9 	b	13d704 <socket+0x4c>
  13d79c:	ebffeb6c 	bl	138554 <__errno_location>
  13d7a0:	e5903000 	ldr	r3, [r0]
  13d7a4:	e353005d 	cmp	r3, #93	; 0x5d
  13d7a8:	1affffd5 	bne	13d704 <socket+0x4c>
  13d7ac:	eaffffdb 	b	13d720 <socket+0x68>
  13d7b0:	e1a00004 	mov	r0, r4
  13d7b4:	eaffffcf 	b	13d6f8 <socket+0x40>
  13d7b8:	e3a000dd 	mov	r0, #221	; 0xdd
  13d7bc:	ebfff89a 	bl	13ba2c <get_rtt_syscall>
  13d7c0:	e2503000 	subs	r3, r0, #0
  13d7c4:	0affffe9 	beq	13d770 <socket+0xb8>
  13d7c8:	e3a02001 	mov	r2, #1
  13d7cc:	e3a01002 	mov	r1, #2
  13d7d0:	e1a00004 	mov	r0, r4
  13d7d4:	e12fff33 	blx	r3
  13d7d8:	eaffffe4 	b	13d770 <socket+0xb8>
  13d7dc:	e1a00004 	mov	r0, r4
  13d7e0:	eaffffdd 	b	13d75c <socket+0xa4>
  13d7e4:	00000119 	.word	0x00000119
  13d7e8:	00080800 	.word	0x00080800

0013d7ec <srand>:
  13d7ec:	e3a02000 	mov	r2, #0
  13d7f0:	e59f3008 	ldr	r3, [pc, #8]	; 13d800 <srand+0x14>
  13d7f4:	e2400001 	sub	r0, r0, #1
  13d7f8:	e8830005 	stm	r3, {r0, r2}
  13d7fc:	e12fff1e 	bx	lr
  13d800:	0014e7c0 	.word	0x0014e7c0

0013d804 <rand>:
  13d804:	e59f1034 	ldr	r1, [pc, #52]	; 13d840 <rand+0x3c>
  13d808:	e92d4800 	push	{fp, lr}
  13d80c:	e59f3030 	ldr	r3, [pc, #48]	; 13d844 <rand+0x40>
  13d810:	e591e000 	ldr	lr, [r1]
  13d814:	e5912004 	ldr	r2, [r1, #4]
  13d818:	e00b039e 	mul	fp, lr, r3
  13d81c:	e59fc024 	ldr	ip, [pc, #36]	; 13d848 <rand+0x44>
  13d820:	e020b29c 	mla	r0, ip, r2, fp
  13d824:	e0832c9e 	umull	r2, r3, lr, ip
  13d828:	e0803003 	add	r3, r0, r3
  13d82c:	e292b001 	adds	fp, r2, #1
  13d830:	e2a3c000 	adc	ip, r3, #0
  13d834:	e8811800 	stm	r1, {fp, ip}
  13d838:	e1a000ac 	lsr	r0, ip, #1
  13d83c:	e8bd8800 	pop	{fp, pc}
  13d840:	0014e7c0 	.word	0x0014e7c0
  13d844:	5851f42d 	.word	0x5851f42d
  13d848:	4c957f2d 	.word	0x4c957f2d

0013d84c <select>:
  13d84c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13d850:	e3a0e000 	mov	lr, #0
  13d854:	e24dd014 	sub	sp, sp, #20
  13d858:	e59dc018 	ldr	ip, [sp, #24]
  13d85c:	e58d3000 	str	r3, [sp]
  13d860:	e58de008 	str	lr, [sp, #8]
  13d864:	e1a03002 	mov	r3, r2
  13d868:	e58dc004 	str	ip, [sp, #4]
  13d86c:	e1a02001 	mov	r2, r1
  13d870:	e1a01000 	mov	r1, r0
  13d874:	e3a0008e 	mov	r0, #142	; 0x8e
  13d878:	eb000ed2 	bl	1413c8 <__syscall_cp>
  13d87c:	e28dd014 	add	sp, sp, #20
  13d880:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13d884:	eafff89d 	b	13bb00 <__syscall_ret>

0013d888 <raise>:
  13d888:	e92d4030 	push	{r4, r5, lr}
  13d88c:	e24dd084 	sub	sp, sp, #132	; 0x84
  13d890:	e1a05000 	mov	r5, r0
  13d894:	e1a0000d 	mov	r0, sp
  13d898:	eb001496 	bl	142af8 <__block_app_sigs>
  13d89c:	e59f3048 	ldr	r3, [pc, #72]	; 13d8ec <raise+0x64>
  13d8a0:	e5930000 	ldr	r0, [r3]
  13d8a4:	e12fff30 	blx	r0
  13d8a8:	e510405c 	ldr	r4, [r0, #-92]	; 0xffffffa4
  13d8ac:	e3a000ee 	mov	r0, #238	; 0xee
  13d8b0:	ebfff85d 	bl	13ba2c <get_rtt_syscall>
  13d8b4:	e2503000 	subs	r3, r0, #0
  13d8b8:	0a000009 	beq	13d8e4 <raise+0x5c>
  13d8bc:	e1a01005 	mov	r1, r5
  13d8c0:	e1a00004 	mov	r0, r4
  13d8c4:	e12fff33 	blx	r3
  13d8c8:	ebfff88c 	bl	13bb00 <__syscall_ret>
  13d8cc:	e1a04000 	mov	r4, r0
  13d8d0:	e1a0000d 	mov	r0, sp
  13d8d4:	eb001495 	bl	142b30 <__restore_sigs>
  13d8d8:	e1a00004 	mov	r0, r4
  13d8dc:	e28dd084 	add	sp, sp, #132	; 0x84
  13d8e0:	e8bd8030 	pop	{r4, r5, pc}
  13d8e4:	e1a00003 	mov	r0, r3
  13d8e8:	eafffff6 	b	13d8c8 <raise+0x40>
  13d8ec:	0014d3d4 	.word	0x0014d3d4

0013d8f0 <fflush>:
  13d8f0:	e92d4070 	push	{r4, r5, r6, lr}
  13d8f4:	e2504000 	subs	r4, r0, #0
  13d8f8:	e24dd008 	sub	sp, sp, #8
  13d8fc:	0a000027 	beq	13d9a0 <fflush+0xb0>
  13d900:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
  13d904:	e3530000 	cmp	r3, #0
  13d908:	b3a05000 	movlt	r5, #0
  13d90c:	aa000020 	bge	13d994 <fflush+0xa4>
  13d910:	e5942014 	ldr	r2, [r4, #20]
  13d914:	e594301c 	ldr	r3, [r4, #28]
  13d918:	e1520003 	cmp	r2, r3
  13d91c:	0a000007 	beq	13d940 <fflush+0x50>
  13d920:	e3a02000 	mov	r2, #0
  13d924:	e5943024 	ldr	r3, [r4, #36]	; 0x24
  13d928:	e1a01002 	mov	r1, r2
  13d92c:	e1a00004 	mov	r0, r4
  13d930:	e12fff33 	blx	r3
  13d934:	e5943014 	ldr	r3, [r4, #20]
  13d938:	e3530000 	cmp	r3, #0
  13d93c:	0a00003d 	beq	13da38 <fflush+0x148>
  13d940:	e994000c 	ldmib	r4, {r2, r3}
  13d944:	e1520003 	cmp	r2, r3
  13d948:	0a000006 	beq	13d968 <fflush+0x78>
  13d94c:	e3a01001 	mov	r1, #1
  13d950:	e0422003 	sub	r2, r2, r3
  13d954:	e58d1000 	str	r1, [sp]
  13d958:	e5941028 	ldr	r1, [r4, #40]	; 0x28
  13d95c:	e1a03fc2 	asr	r3, r2, #31
  13d960:	e1a00004 	mov	r0, r4
  13d964:	e12fff31 	blx	r1
  13d968:	e3a06000 	mov	r6, #0
  13d96c:	e1550006 	cmp	r5, r6
  13d970:	e5846010 	str	r6, [r4, #16]
  13d974:	e584601c 	str	r6, [r4, #28]
  13d978:	e5846014 	str	r6, [r4, #20]
  13d97c:	e5846008 	str	r6, [r4, #8]
  13d980:	e5846004 	str	r6, [r4, #4]
  13d984:	1a000032 	bne	13da54 <fflush+0x164>
  13d988:	e1a00005 	mov	r0, r5
  13d98c:	e28dd008 	add	sp, sp, #8
  13d990:	e8bd8070 	pop	{r4, r5, r6, pc}
  13d994:	eb001472 	bl	142b64 <__lockfile>
  13d998:	e1a05000 	mov	r5, r0
  13d99c:	eaffffdb 	b	13d910 <fflush+0x20>
  13d9a0:	e59f3104 	ldr	r3, [pc, #260]	; 13daac <fflush+0x1bc>
  13d9a4:	e5935000 	ldr	r5, [r3]
  13d9a8:	e3550000 	cmp	r5, #0
  13d9ac:	1a00003a 	bne	13da9c <fflush+0x1ac>
  13d9b0:	e59f30f8 	ldr	r3, [pc, #248]	; 13dab0 <fflush+0x1c0>
  13d9b4:	e5932000 	ldr	r2, [r3]
  13d9b8:	e3520000 	cmp	r2, #0
  13d9bc:	1a000032 	bne	13da8c <fflush+0x19c>
  13d9c0:	eb000047 	bl	13dae4 <__ofl_lock>
  13d9c4:	e5904000 	ldr	r4, [r0]
  13d9c8:	e3540000 	cmp	r4, #0
  13d9cc:	0a000009 	beq	13d9f8 <fflush+0x108>
  13d9d0:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
  13d9d4:	e3530000 	cmp	r3, #0
  13d9d8:	aa00000a 	bge	13da08 <fflush+0x118>
  13d9dc:	e5942014 	ldr	r2, [r4, #20]
  13d9e0:	e594301c 	ldr	r3, [r4, #28]
  13d9e4:	e1520003 	cmp	r2, r3
  13d9e8:	1a00001f 	bne	13da6c <fflush+0x17c>
  13d9ec:	e5944038 	ldr	r4, [r4, #56]	; 0x38
  13d9f0:	e3540000 	cmp	r4, #0
  13d9f4:	1afffff5 	bne	13d9d0 <fflush+0xe0>
  13d9f8:	eb000040 	bl	13db00 <__ofl_unlock>
  13d9fc:	e1a00005 	mov	r0, r5
  13da00:	e28dd008 	add	sp, sp, #8
  13da04:	e8bd8070 	pop	{r4, r5, r6, pc}
  13da08:	e1a00004 	mov	r0, r4
  13da0c:	eb001454 	bl	142b64 <__lockfile>
  13da10:	e5942014 	ldr	r2, [r4, #20]
  13da14:	e594301c 	ldr	r3, [r4, #28]
  13da18:	e1a06000 	mov	r6, r0
  13da1c:	e1520003 	cmp	r2, r3
  13da20:	1a000015 	bne	13da7c <fflush+0x18c>
  13da24:	e3560000 	cmp	r6, #0
  13da28:	0affffef 	beq	13d9ec <fflush+0xfc>
  13da2c:	e1a00004 	mov	r0, r4
  13da30:	eb001498 	bl	142c98 <__unlockfile>
  13da34:	eaffffec 	b	13d9ec <fflush+0xfc>
  13da38:	e3550000 	cmp	r5, #0
  13da3c:	03e05000 	mvneq	r5, #0
  13da40:	0affffd0 	beq	13d988 <fflush+0x98>
  13da44:	e1a00004 	mov	r0, r4
  13da48:	eb001492 	bl	142c98 <__unlockfile>
  13da4c:	e3e05000 	mvn	r5, #0
  13da50:	eaffffcc 	b	13d988 <fflush+0x98>
  13da54:	e1a05006 	mov	r5, r6
  13da58:	e1a00004 	mov	r0, r4
  13da5c:	eb00148d 	bl	142c98 <__unlockfile>
  13da60:	e1a00005 	mov	r0, r5
  13da64:	e28dd008 	add	sp, sp, #8
  13da68:	e8bd8070 	pop	{r4, r5, r6, pc}
  13da6c:	e1a00004 	mov	r0, r4
  13da70:	ebffff9e 	bl	13d8f0 <fflush>
  13da74:	e1855000 	orr	r5, r5, r0
  13da78:	eaffffdb 	b	13d9ec <fflush+0xfc>
  13da7c:	e1a00004 	mov	r0, r4
  13da80:	ebffff9a 	bl	13d8f0 <fflush>
  13da84:	e1855000 	orr	r5, r5, r0
  13da88:	eaffffe5 	b	13da24 <fflush+0x134>
  13da8c:	e5930000 	ldr	r0, [r3]
  13da90:	ebffff96 	bl	13d8f0 <fflush>
  13da94:	e1855000 	orr	r5, r5, r0
  13da98:	eaffffc8 	b	13d9c0 <fflush+0xd0>
  13da9c:	e5930000 	ldr	r0, [r3]
  13daa0:	ebffff92 	bl	13d8f0 <fflush>
  13daa4:	e1a05000 	mov	r5, r0
  13daa8:	eaffffc0 	b	13d9b0 <fflush+0xc0>
  13daac:	0014d3c8 	.word	0x0014d3c8
  13dab0:	0014d330 	.word	0x0014d330

0013dab4 <fprintf>:
  13dab4:	e92d000e 	push	{r1, r2, r3}
  13dab8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13dabc:	e24dd008 	sub	sp, sp, #8
  13dac0:	e28d3010 	add	r3, sp, #16
  13dac4:	e1a02003 	mov	r2, r3
  13dac8:	e59d100c 	ldr	r1, [sp, #12]
  13dacc:	e58d3004 	str	r3, [sp, #4]
  13dad0:	eb000959 	bl	14003c <vfprintf>
  13dad4:	e28dd008 	add	sp, sp, #8
  13dad8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13dadc:	e28dd00c 	add	sp, sp, #12
  13dae0:	e12fff1e 	bx	lr

0013dae4 <__ofl_lock>:
  13dae4:	e92d4010 	push	{r4, lr}
  13dae8:	e59f0008 	ldr	r0, [pc, #8]	; 13daf8 <__ofl_lock+0x14>
  13daec:	eb000db3 	bl	1411c0 <__lock>
  13daf0:	e59f0004 	ldr	r0, [pc, #4]	; 13dafc <__ofl_lock+0x18>
  13daf4:	e8bd8010 	pop	{r4, pc}
  13daf8:	0014e7d0 	.word	0x0014e7d0
  13dafc:	0014e7cc 	.word	0x0014e7cc

0013db00 <__ofl_unlock>:
  13db00:	e59f0000 	ldr	r0, [pc]	; 13db08 <__ofl_unlock+0x8>
  13db04:	ea000e05 	b	141320 <__unlock>
  13db08:	0014e7d0 	.word	0x0014e7d0

0013db0c <perror>:
  13db0c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  13db10:	e1a05000 	mov	r5, r0
  13db14:	ebffea8e 	bl	138554 <__errno_location>
  13db18:	e5900000 	ldr	r0, [r0]
  13db1c:	ebffeaae 	bl	1385dc <strerror>
  13db20:	e59f4104 	ldr	r4, [pc, #260]	; 13dc2c <perror+0x120>
  13db24:	e1a06000 	mov	r6, r0
  13db28:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
  13db2c:	e3530000 	cmp	r3, #0
  13db30:	aa000026 	bge	13dbd0 <perror+0xc4>
  13db34:	e3550000 	cmp	r5, #0
  13db38:	e5947088 	ldr	r7, [r4, #136]	; 0x88
  13db3c:	e5948048 	ldr	r8, [r4, #72]	; 0x48
  13db40:	13a09000 	movne	r9, #0
  13db44:	0a00002c 	beq	13dbfc <perror+0xf0>
  13db48:	e5d53000 	ldrb	r3, [r5]
  13db4c:	e3530000 	cmp	r3, #0
  13db50:	1a000010 	bne	13db98 <perror+0x8c>
  13db54:	e1a00006 	mov	r0, r6
  13db58:	eb000bf4 	bl	140b30 <strlen>
  13db5c:	e59f30c8 	ldr	r3, [pc, #200]	; 13dc2c <perror+0x120>
  13db60:	e1a01000 	mov	r1, r0
  13db64:	e3a02001 	mov	r2, #1
  13db68:	e1a00006 	mov	r0, r6
  13db6c:	eb0015fa 	bl	14335c <fwrite>
  13db70:	e59f10b4 	ldr	r1, [pc, #180]	; 13dc2c <perror+0x120>
  13db74:	e3a0000a 	mov	r0, #10
  13db78:	eb001578 	bl	143160 <fputc>
  13db7c:	e3590000 	cmp	r9, #0
  13db80:	e5848048 	str	r8, [r4, #72]	; 0x48
  13db84:	e5847088 	str	r7, [r4, #136]	; 0x88
  13db88:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
  13db8c:	e59f0098 	ldr	r0, [pc, #152]	; 13dc2c <perror+0x120>
  13db90:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
  13db94:	ea00143f 	b	142c98 <__unlockfile>
  13db98:	e1a00005 	mov	r0, r5
  13db9c:	eb000be3 	bl	140b30 <strlen>
  13dba0:	e59f3084 	ldr	r3, [pc, #132]	; 13dc2c <perror+0x120>
  13dba4:	e1a01000 	mov	r1, r0
  13dba8:	e3a02001 	mov	r2, #1
  13dbac:	e1a00005 	mov	r0, r5
  13dbb0:	eb0015e9 	bl	14335c <fwrite>
  13dbb4:	e59f1070 	ldr	r1, [pc, #112]	; 13dc2c <perror+0x120>
  13dbb8:	e3a0003a 	mov	r0, #58	; 0x3a
  13dbbc:	eb001567 	bl	143160 <fputc>
  13dbc0:	e59f1064 	ldr	r1, [pc, #100]	; 13dc2c <perror+0x120>
  13dbc4:	e3a00020 	mov	r0, #32
  13dbc8:	eb001564 	bl	143160 <fputc>
  13dbcc:	eaffffe0 	b	13db54 <perror+0x48>
  13dbd0:	e1a00004 	mov	r0, r4
  13dbd4:	eb0013e2 	bl	142b64 <__lockfile>
  13dbd8:	e3550000 	cmp	r5, #0
  13dbdc:	e1a09000 	mov	r9, r0
  13dbe0:	e5947088 	ldr	r7, [r4, #136]	; 0x88
  13dbe4:	e5948048 	ldr	r8, [r4, #72]	; 0x48
  13dbe8:	0affffd9 	beq	13db54 <perror+0x48>
  13dbec:	e5d53000 	ldrb	r3, [r5]
  13dbf0:	e3530000 	cmp	r3, #0
  13dbf4:	0affffd6 	beq	13db54 <perror+0x48>
  13dbf8:	eaffffe6 	b	13db98 <perror+0x8c>
  13dbfc:	eb000bcb 	bl	140b30 <strlen>
  13dc00:	e1a03004 	mov	r3, r4
  13dc04:	e1a01000 	mov	r1, r0
  13dc08:	e3a02001 	mov	r2, #1
  13dc0c:	e1a00006 	mov	r0, r6
  13dc10:	eb0015d1 	bl	14335c <fwrite>
  13dc14:	e1a01004 	mov	r1, r4
  13dc18:	e3a0000a 	mov	r0, #10
  13dc1c:	eb00154f 	bl	143160 <fputc>
  13dc20:	e5848048 	str	r8, [r4, #72]	; 0x48
  13dc24:	e5847088 	str	r7, [r4, #136]	; 0x88
  13dc28:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  13dc2c:	0014d2a0 	.word	0x0014d2a0

0013dc30 <printf>:
  13dc30:	e92d000f 	push	{r0, r1, r2, r3}
  13dc34:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13dc38:	e24dd00c 	sub	sp, sp, #12
  13dc3c:	e28d3014 	add	r3, sp, #20
  13dc40:	e1a02003 	mov	r2, r3
  13dc44:	e59d1010 	ldr	r1, [sp, #16]
  13dc48:	e59f0014 	ldr	r0, [pc, #20]	; 13dc64 <printf+0x34>
  13dc4c:	e58d3004 	str	r3, [sp, #4]
  13dc50:	eb0008f9 	bl	14003c <vfprintf>
  13dc54:	e28dd00c 	add	sp, sp, #12
  13dc58:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13dc5c:	e28dd010 	add	sp, sp, #16
  13dc60:	e12fff1e 	bx	lr
  13dc64:	0014d338 	.word	0x0014d338

0013dc68 <puts>:
  13dc68:	e92d4070 	push	{r4, r5, r6, lr}
  13dc6c:	e59f40b0 	ldr	r4, [pc, #176]	; 13dd24 <puts+0xbc>
  13dc70:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
  13dc74:	e3530000 	cmp	r3, #0
  13dc78:	aa00001b 	bge	13dcec <puts+0x84>
  13dc7c:	e1a01004 	mov	r1, r4
  13dc80:	eb001569 	bl	14322c <fputs>
  13dc84:	e3500000 	cmp	r0, #0
  13dc88:	a3a05000 	movge	r5, #0
  13dc8c:	ba000021 	blt	13dd18 <puts+0xb0>
  13dc90:	e5943050 	ldr	r3, [r4, #80]	; 0x50
  13dc94:	e353000a 	cmp	r3, #10
  13dc98:	0a00000e 	beq	13dcd8 <puts+0x70>
  13dc9c:	e5943014 	ldr	r3, [r4, #20]
  13dca0:	e5942010 	ldr	r2, [r4, #16]
  13dca4:	e1530002 	cmp	r3, r2
  13dca8:	0a00000a 	beq	13dcd8 <puts+0x70>
  13dcac:	e3a0200a 	mov	r2, #10
  13dcb0:	e2831001 	add	r1, r3, #1
  13dcb4:	e5841014 	str	r1, [r4, #20]
  13dcb8:	e3a04000 	mov	r4, #0
  13dcbc:	e5c32000 	strb	r2, [r3]
  13dcc0:	e3550000 	cmp	r5, #0
  13dcc4:	0a000001 	beq	13dcd0 <puts+0x68>
  13dcc8:	e59f0054 	ldr	r0, [pc, #84]	; 13dd24 <puts+0xbc>
  13dccc:	eb0013f1 	bl	142c98 <__unlockfile>
  13dcd0:	e1a00004 	mov	r0, r4
  13dcd4:	e8bd8070 	pop	{r4, r5, r6, pc}
  13dcd8:	e3a0100a 	mov	r1, #10
  13dcdc:	e59f0040 	ldr	r0, [pc, #64]	; 13dd24 <puts+0xbc>
  13dce0:	eb001412 	bl	142d30 <__overflow>
  13dce4:	e1a04fc0 	asr	r4, r0, #31
  13dce8:	eafffff4 	b	13dcc0 <puts+0x58>
  13dcec:	e1a06000 	mov	r6, r0
  13dcf0:	e1a00004 	mov	r0, r4
  13dcf4:	eb00139a 	bl	142b64 <__lockfile>
  13dcf8:	e1a01004 	mov	r1, r4
  13dcfc:	e1a05000 	mov	r5, r0
  13dd00:	e1a00006 	mov	r0, r6
  13dd04:	eb001548 	bl	14322c <fputs>
  13dd08:	e3500000 	cmp	r0, #0
  13dd0c:	b3e04000 	mvnlt	r4, #0
  13dd10:	aaffffde 	bge	13dc90 <puts+0x28>
  13dd14:	eaffffe9 	b	13dcc0 <puts+0x58>
  13dd18:	e3e04000 	mvn	r4, #0
  13dd1c:	e1a00004 	mov	r0, r4
  13dd20:	e8bd8070 	pop	{r4, r5, r6, pc}
  13dd24:	0014d338 	.word	0x0014d338

0013dd28 <pop_arg>:
  13dd28:	e2411009 	sub	r1, r1, #9
  13dd2c:	e92d0030 	push	{r4, r5}
  13dd30:	e3510011 	cmp	r1, #17
  13dd34:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
  13dd38:	ea000018 	b	13dda0 <pop_arg+0x78>
  13dd3c:	0013de68 	.word	0x0013de68
  13dd40:	0013ddcc 	.word	0x0013ddcc
  13dd44:	0013ddec 	.word	0x0013ddec
  13dd48:	0013dda8 	.word	0x0013dda8
  13dd4c:	0013ddcc 	.word	0x0013ddcc
  13dd50:	0013ddec 	.word	0x0013ddec
  13dd54:	0013dea0 	.word	0x0013dea0
  13dd58:	0013de10 	.word	0x0013de10
  13dd5c:	0013de30 	.word	0x0013de30
  13dd60:	0013de4c 	.word	0x0013de4c
  13dd64:	0013dda8 	.word	0x0013dda8
  13dd68:	0013ddec 	.word	0x0013ddec
  13dd6c:	0013dda8 	.word	0x0013dda8
  13dd70:	0013dda8 	.word	0x0013dda8
  13dd74:	0013ddcc 	.word	0x0013ddcc
  13dd78:	0013de80 	.word	0x0013de80
  13dd7c:	0013dd84 	.word	0x0013dd84
  13dd80:	0013dd84 	.word	0x0013dd84
  13dd84:	e5923000 	ldr	r3, [r2]
  13dd88:	e2833007 	add	r3, r3, #7
  13dd8c:	e3c33007 	bic	r3, r3, #7
  13dd90:	e2831008 	add	r1, r3, #8
  13dd94:	e5821000 	str	r1, [r2]
  13dd98:	e893000c 	ldm	r3, {r2, r3}
  13dd9c:	e880000c 	stm	r0, {r2, r3}
  13dda0:	e8bd0030 	pop	{r4, r5}
  13dda4:	e12fff1e 	bx	lr
  13dda8:	e5923000 	ldr	r3, [r2]
  13ddac:	e8bd0030 	pop	{r4, r5}
  13ddb0:	e2833007 	add	r3, r3, #7
  13ddb4:	e3c33007 	bic	r3, r3, #7
  13ddb8:	e2831008 	add	r1, r3, #8
  13ddbc:	e5821000 	str	r1, [r2]
  13ddc0:	e893000c 	ldm	r3, {r2, r3}
  13ddc4:	e880000c 	stm	r0, {r2, r3}
  13ddc8:	e12fff1e 	bx	lr
  13ddcc:	e5923000 	ldr	r3, [r2]
  13ddd0:	e5934000 	ldr	r4, [r3]
  13ddd4:	e2833004 	add	r3, r3, #4
  13ddd8:	e1a05fc4 	asr	r5, r4, #31
  13dddc:	e5823000 	str	r3, [r2]
  13dde0:	e8800030 	stm	r0, {r4, r5}
  13dde4:	e8bd0030 	pop	{r4, r5}
  13dde8:	e12fff1e 	bx	lr
  13ddec:	e3a01000 	mov	r1, #0
  13ddf0:	e8bd0030 	pop	{r4, r5}
  13ddf4:	e5923000 	ldr	r3, [r2]
  13ddf8:	e593c000 	ldr	ip, [r3]
  13ddfc:	e2833004 	add	r3, r3, #4
  13de00:	e5823000 	str	r3, [r2]
  13de04:	e580c000 	str	ip, [r0]
  13de08:	e5801004 	str	r1, [r0, #4]
  13de0c:	e12fff1e 	bx	lr
  13de10:	e3a01000 	mov	r1, #0
  13de14:	e5923000 	ldr	r3, [r2]
  13de18:	e1d3c0b0 	ldrh	ip, [r3]
  13de1c:	e2833004 	add	r3, r3, #4
  13de20:	e5823000 	str	r3, [r2]
  13de24:	e580c000 	str	ip, [r0]
  13de28:	e5801004 	str	r1, [r0, #4]
  13de2c:	eaffffdb 	b	13dda0 <pop_arg+0x78>
  13de30:	e5923000 	ldr	r3, [r2]
  13de34:	e1d340d0 	ldrsb	r4, [r3]
  13de38:	e2833004 	add	r3, r3, #4
  13de3c:	e1a05fc4 	asr	r5, r4, #31
  13de40:	e5823000 	str	r3, [r2]
  13de44:	e8800030 	stm	r0, {r4, r5}
  13de48:	eaffffd4 	b	13dda0 <pop_arg+0x78>
  13de4c:	e3a05000 	mov	r5, #0
  13de50:	e5923000 	ldr	r3, [r2]
  13de54:	e5d34000 	ldrb	r4, [r3]
  13de58:	e2833004 	add	r3, r3, #4
  13de5c:	e5823000 	str	r3, [r2]
  13de60:	e8800030 	stm	r0, {r4, r5}
  13de64:	eaffffcd 	b	13dda0 <pop_arg+0x78>
  13de68:	e5923000 	ldr	r3, [r2]
  13de6c:	e2831004 	add	r1, r3, #4
  13de70:	e5821000 	str	r1, [r2]
  13de74:	e5933000 	ldr	r3, [r3]
  13de78:	e5803000 	str	r3, [r0]
  13de7c:	eaffffc7 	b	13dda0 <pop_arg+0x78>
  13de80:	e3a01000 	mov	r1, #0
  13de84:	e5923000 	ldr	r3, [r2]
  13de88:	e283c004 	add	ip, r3, #4
  13de8c:	e582c000 	str	ip, [r2]
  13de90:	e5933000 	ldr	r3, [r3]
  13de94:	e5801004 	str	r1, [r0, #4]
  13de98:	e5803000 	str	r3, [r0]
  13de9c:	eaffffbf 	b	13dda0 <pop_arg+0x78>
  13dea0:	e5923000 	ldr	r3, [r2]
  13dea4:	e1d340f0 	ldrsh	r4, [r3]
  13dea8:	e2833004 	add	r3, r3, #4
  13deac:	e1a05fc4 	asr	r5, r4, #31
  13deb0:	e5823000 	str	r3, [r2]
  13deb4:	e8800030 	stm	r0, {r4, r5}
  13deb8:	eaffffb8 	b	13dda0 <pop_arg+0x78>

0013debc <pad.part.0>:
  13debc:	e92d4070 	push	{r4, r5, r6, lr}
  13dec0:	e0425003 	sub	r5, r2, r3
  13dec4:	e3550c01 	cmp	r5, #256	; 0x100
  13dec8:	e24ddc01 	sub	sp, sp, #256	; 0x100
  13decc:	31a02005 	movcc	r2, r5
  13ded0:	23a02c01 	movcs	r2, #256	; 0x100
  13ded4:	e1a06000 	mov	r6, r0
  13ded8:	e1a0000d 	mov	r0, sp
  13dedc:	eb000a82 	bl	1408ec <memset>
  13dee0:	e35500ff 	cmp	r5, #255	; 0xff
  13dee4:	9a00001b 	bls	13df58 <pad.part.0+0x9c>
  13dee8:	e5962000 	ldr	r2, [r6]
  13deec:	e1a04005 	mov	r4, r5
  13def0:	e2022020 	and	r2, r2, #32
  13def4:	ea000001 	b	13df00 <pad.part.0+0x44>
  13def8:	e35400ff 	cmp	r4, #255	; 0xff
  13defc:	9a00000c 	bls	13df34 <pad.part.0+0x78>
  13df00:	e3520000 	cmp	r2, #0
  13df04:	e2444c01 	sub	r4, r4, #256	; 0x100
  13df08:	e1a01002 	mov	r1, r2
  13df0c:	1afffff9 	bne	13def8 <pad.part.0+0x3c>
  13df10:	e1a02006 	mov	r2, r6
  13df14:	e3a01c01 	mov	r1, #256	; 0x100
  13df18:	e1a0000d 	mov	r0, sp
  13df1c:	eb0014cf 	bl	143260 <__fwritex>
  13df20:	e5962000 	ldr	r2, [r6]
  13df24:	e35400ff 	cmp	r4, #255	; 0xff
  13df28:	e2022020 	and	r2, r2, #32
  13df2c:	e1a01002 	mov	r1, r2
  13df30:	8afffff2 	bhi	13df00 <pad.part.0+0x44>
  13df34:	e20550ff 	and	r5, r5, #255	; 0xff
  13df38:	e3510000 	cmp	r1, #0
  13df3c:	1a000003 	bne	13df50 <pad.part.0+0x94>
  13df40:	e1a02006 	mov	r2, r6
  13df44:	e1a01005 	mov	r1, r5
  13df48:	e1a0000d 	mov	r0, sp
  13df4c:	eb0014c3 	bl	143260 <__fwritex>
  13df50:	e28ddc01 	add	sp, sp, #256	; 0x100
  13df54:	e8bd8070 	pop	{r4, r5, r6, pc}
  13df58:	e5961000 	ldr	r1, [r6]
  13df5c:	e2011020 	and	r1, r1, #32
  13df60:	eafffff4 	b	13df38 <pad.part.0+0x7c>
  13df64:	00000000 	andeq	r0, r0, r0

0013df68 <printf_core>:
  13df68:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13df6c:	e3a0a000 	mov	sl, #0
  13df70:	e1a0b001 	mov	fp, r1
  13df74:	e24ddfb3 	sub	sp, sp, #716	; 0x2cc
  13df78:	e58d0004 	str	r0, [sp, #4]
  13df7c:	e58d2018 	str	r2, [sp, #24]
  13df80:	e58d3028 	str	r3, [sp, #40]	; 0x28
  13df84:	e58da000 	str	sl, [sp]
  13df88:	e58da00c 	str	sl, [sp, #12]
  13df8c:	e59d2000 	ldr	r2, [sp]
  13df90:	e5db3000 	ldrb	r3, [fp]
  13df94:	e082200a 	add	r2, r2, sl
  13df98:	e3530000 	cmp	r3, #0
  13df9c:	e58d2000 	str	r2, [sp]
  13dfa0:	0a0001c8 	beq	13e6c8 <printf_core+0x760>
  13dfa4:	e3530025 	cmp	r3, #37	; 0x25
  13dfa8:	e1a0300b 	mov	r3, fp
  13dfac:	0a000005 	beq	13dfc8 <printf_core+0x60>
  13dfb0:	e5f32001 	ldrb	r2, [r3, #1]!
  13dfb4:	e3520000 	cmp	r2, #0
  13dfb8:	13520025 	cmpne	r2, #37	; 0x25
  13dfbc:	1afffffb 	bne	13dfb0 <printf_core+0x48>
  13dfc0:	e3520025 	cmp	r2, #37	; 0x25
  13dfc4:	1a00019c 	bne	13e63c <printf_core+0x6d4>
  13dfc8:	e5d32001 	ldrb	r2, [r3, #1]
  13dfcc:	e1a04003 	mov	r4, r3
  13dfd0:	e3520025 	cmp	r2, #37	; 0x25
  13dfd4:	0a000003 	beq	13dfe8 <printf_core+0x80>
  13dfd8:	ea000006 	b	13dff8 <printf_core+0x90>
  13dfdc:	e5d42001 	ldrb	r2, [r4, #1]
  13dfe0:	e3520025 	cmp	r2, #37	; 0x25
  13dfe4:	1a000003 	bne	13dff8 <printf_core+0x90>
  13dfe8:	e5f42002 	ldrb	r2, [r4, #2]!
  13dfec:	e2833001 	add	r3, r3, #1
  13dff0:	e3520025 	cmp	r2, #37	; 0x25
  13dff4:	0afffff8 	beq	13dfdc <printf_core+0x74>
  13dff8:	e3e02102 	mvn	r2, #-2147483648	; 0x80000000
  13dffc:	e043a00b 	sub	sl, r3, fp
  13e000:	e59d3000 	ldr	r3, [sp]
  13e004:	e0423003 	sub	r3, r2, r3
  13e008:	e15a0003 	cmp	sl, r3
  13e00c:	e58d3008 	str	r3, [sp, #8]
  13e010:	ca000181 	bgt	13e61c <printf_core+0x6b4>
  13e014:	e59d3004 	ldr	r3, [sp, #4]
  13e018:	e3530000 	cmp	r3, #0
  13e01c:	0a000002 	beq	13e02c <printf_core+0xc4>
  13e020:	e5933000 	ldr	r3, [r3]
  13e024:	e3130020 	tst	r3, #32
  13e028:	0a000146 	beq	13e548 <printf_core+0x5e0>
  13e02c:	e35a0000 	cmp	sl, #0
  13e030:	1a0000b7 	bne	13e314 <printf_core+0x3ac>
  13e034:	e5d42001 	ldrb	r2, [r4, #1]
  13e038:	e242c030 	sub	ip, r2, #48	; 0x30
  13e03c:	e35c0009 	cmp	ip, #9
  13e040:	8a000002 	bhi	13e050 <printf_core+0xe8>
  13e044:	e5d43002 	ldrb	r3, [r4, #2]
  13e048:	e3530024 	cmp	r3, #36	; 0x24
  13e04c:	0a000194 	beq	13e6a4 <printf_core+0x73c>
  13e050:	e2423020 	sub	r3, r2, #32
  13e054:	e353001f 	cmp	r3, #31
  13e058:	e3e0c000 	mvn	ip, #0
  13e05c:	e2846001 	add	r6, r4, #1
  13e060:	8a000196 	bhi	13e6c0 <printf_core+0x758>
  13e064:	e59f0f44 	ldr	r0, [pc, #3908]	; 13efb0 <printf_core+0x1048>
  13e068:	e1a01330 	lsr	r1, r0, r3
  13e06c:	e2118001 	ands	r8, r1, #1
  13e070:	0a00000a 	beq	13e0a0 <printf_core+0x138>
  13e074:	e3a08000 	mov	r8, #0
  13e078:	e3a0e001 	mov	lr, #1
  13e07c:	ea000002 	b	13e08c <printf_core+0x124>
  13e080:	e1a01330 	lsr	r1, r0, r3
  13e084:	e3110001 	tst	r1, #1
  13e088:	0a000004 	beq	13e0a0 <printf_core+0x138>
  13e08c:	e5f62001 	ldrb	r2, [r6, #1]!
  13e090:	e188831e 	orr	r8, r8, lr, lsl r3
  13e094:	e2423020 	sub	r3, r2, #32
  13e098:	e353001f 	cmp	r3, #31
  13e09c:	9afffff7 	bls	13e080 <printf_core+0x118>
  13e0a0:	e352002a 	cmp	r2, #42	; 0x2a
  13e0a4:	0a00009c 	beq	13e31c <printf_core+0x3b4>
  13e0a8:	e5d61000 	ldrb	r1, [r6]
  13e0ac:	e2413030 	sub	r3, r1, #48	; 0x30
  13e0b0:	e3530009 	cmp	r3, #9
  13e0b4:	81a02001 	movhi	r2, r1
  13e0b8:	83a09000 	movhi	r9, #0
  13e0bc:	8a000012 	bhi	13e10c <printf_core+0x1a4>
  13e0c0:	e3a09000 	mov	r9, #0
  13e0c4:	e59f0ee8 	ldr	r0, [pc, #3816]	; 13efb4 <printf_core+0x104c>
  13e0c8:	e0693e89 	rsb	r3, r9, r9, lsl #29
  13e0cc:	e0693103 	rsb	r3, r9, r3, lsl #2
  13e0d0:	e5f62001 	ldrb	r2, [r6, #1]!
  13e0d4:	e1a03083 	lsl	r3, r3, #1
  13e0d8:	e1590000 	cmp	r9, r0
  13e0dc:	e2411030 	sub	r1, r1, #48	; 0x30
  13e0e0:	e2433106 	sub	r3, r3, #-2147483647	; 0x80000001
  13e0e4:	e242e030 	sub	lr, r2, #48	; 0x30
  13e0e8:	8a000025 	bhi	13e184 <printf_core+0x21c>
  13e0ec:	e1510003 	cmp	r1, r3
  13e0f0:	e0899109 	add	r9, r9, r9, lsl #2
  13e0f4:	ca000022 	bgt	13e184 <printf_core+0x21c>
  13e0f8:	e35e0009 	cmp	lr, #9
  13e0fc:	e0819089 	add	r9, r1, r9, lsl #1
  13e100:	9a000022 	bls	13e190 <printf_core+0x228>
  13e104:	e3590000 	cmp	r9, #0
  13e108:	ba000143 	blt	13e61c <printf_core+0x6b4>
  13e10c:	e352002e 	cmp	r2, #46	; 0x2e
  13e110:	1a000097 	bne	13e374 <printf_core+0x40c>
  13e114:	e5d62001 	ldrb	r2, [r6, #1]
  13e118:	e352002a 	cmp	r2, #42	; 0x2a
  13e11c:	1a00011e 	bne	13e59c <printf_core+0x634>
  13e120:	e5d62002 	ldrb	r2, [r6, #2]
  13e124:	e2423030 	sub	r3, r2, #48	; 0x30
  13e128:	e3530009 	cmp	r3, #9
  13e12c:	8a000002 	bhi	13e13c <printf_core+0x1d4>
  13e130:	e5d63003 	ldrb	r3, [r6, #3]
  13e134:	e3530024 	cmp	r3, #36	; 0x24
  13e138:	0a000143 	beq	13e64c <printf_core+0x6e4>
  13e13c:	e59d300c 	ldr	r3, [sp, #12]
  13e140:	e3530000 	cmp	r3, #0
  13e144:	1a00009f 	bne	13e3c8 <printf_core+0x460>
  13e148:	e59d3004 	ldr	r3, [sp, #4]
  13e14c:	e2866002 	add	r6, r6, #2
  13e150:	e3530000 	cmp	r3, #0
  13e154:	159d1018 	ldrne	r1, [sp, #24]
  13e158:	03a03001 	moveq	r3, #1
  13e15c:	15913000 	ldrne	r3, [r1]
  13e160:	059d5004 	ldreq	r5, [sp, #4]
  13e164:	15935000 	ldrne	r5, [r3]
  13e168:	12832004 	addne	r2, r3, #4
  13e16c:	11e03005 	mvnne	r3, r5
  13e170:	15812000 	strne	r2, [r1]
  13e174:	11a03fa3 	lsrne	r3, r3, #31
  13e178:	15d62000 	ldrbne	r2, [r6]
  13e17c:	e58d301c 	str	r3, [sp, #28]
  13e180:	ea00007e 	b	13e380 <printf_core+0x418>
  13e184:	e35e0009 	cmp	lr, #9
  13e188:	8a000123 	bhi	13e61c <printf_core+0x6b4>
  13e18c:	e3e09000 	mvn	r9, #0
  13e190:	e1a01002 	mov	r1, r2
  13e194:	eaffffcb 	b	13e0c8 <printf_core+0x160>
  13e198:	e28d3070 	add	r3, sp, #112	; 0x70
  13e19c:	e893000c 	ldm	r3, {r2, r3}
  13e1a0:	e28da0d0 	add	sl, sp, #208	; 0xd0
  13e1a4:	e1921003 	orrs	r1, r2, r3
  13e1a8:	e1a0b00a 	mov	fp, sl
  13e1ac:	0a000009 	beq	13e1d8 <printf_core+0x270>
  13e1b0:	e1a001a2 	lsr	r0, r2, #3
  13e1b4:	e1800e83 	orr	r0, r0, r3, lsl #29
  13e1b8:	e1a0c1a3 	lsr	ip, r3, #3
  13e1bc:	e2021007 	and	r1, r2, #7
  13e1c0:	e1a0300c 	mov	r3, ip
  13e1c4:	e1a02000 	mov	r2, r0
  13e1c8:	e2811030 	add	r1, r1, #48	; 0x30
  13e1cc:	e1920003 	orrs	r0, r2, r3
  13e1d0:	e56b1001 	strb	r1, [fp, #-1]!
  13e1d4:	1afffff5 	bne	13e1b0 <printf_core+0x248>
  13e1d8:	e2183008 	ands	r3, r8, #8
  13e1dc:	0a00026f 	beq	13eba0 <printf_core+0xc38>
  13e1e0:	e04a300b 	sub	r3, sl, fp
  13e1e4:	e1530005 	cmp	r3, r5
  13e1e8:	ba00026b 	blt	13eb9c <printf_core+0xc34>
  13e1ec:	e2835001 	add	r5, r3, #1
  13e1f0:	e3a03000 	mov	r3, #0
  13e1f4:	e58d3020 	str	r3, [sp, #32]
  13e1f8:	e59f3db8 	ldr	r3, [pc, #3512]	; 13efb8 <printf_core+0x1050>
  13e1fc:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13e200:	e59d301c 	ldr	r3, [sp, #28]
  13e204:	e0132fa5 	ands	r2, r3, r5, lsr #31
  13e208:	1a000103 	bne	13e61c <printf_core+0x6b4>
  13e20c:	e59d2070 	ldr	r2, [sp, #112]	; 0x70
  13e210:	e3530000 	cmp	r3, #0
  13e214:	e59d3074 	ldr	r3, [sp, #116]	; 0x74
  13e218:	13c88801 	bicne	r8, r8, #65536	; 0x10000
  13e21c:	e1923003 	orrs	r3, r2, r3
  13e220:	03a03001 	moveq	r3, #1
  13e224:	13a03000 	movne	r3, #0
  13e228:	e3550000 	cmp	r5, #0
  13e22c:	01a02003 	moveq	r2, r3
  13e230:	13a02000 	movne	r2, #0
  13e234:	e3520000 	cmp	r2, #0
  13e238:	1a0002a8 	bne	13ece0 <printf_core+0xd78>
  13e23c:	e04a600b 	sub	r6, sl, fp
  13e240:	e1560005 	cmp	r6, r5
  13e244:	a1a05006 	movge	r5, r6
  13e248:	e0833006 	add	r3, r3, r6
  13e24c:	e1530005 	cmp	r3, r5
  13e250:	e3e02102 	mvn	r2, #-2147483648	; 0x80000000
  13e254:	a1a05003 	movge	r5, r3
  13e258:	e59d3020 	ldr	r3, [sp, #32]
  13e25c:	e0423003 	sub	r3, r2, r3
  13e260:	e1530005 	cmp	r3, r5
  13e264:	ba0000ec 	blt	13e61c <printf_core+0x6b4>
  13e268:	e59d3020 	ldr	r3, [sp, #32]
  13e26c:	e0857003 	add	r7, r5, r3
  13e270:	e1570009 	cmp	r7, r9
  13e274:	a1a0a007 	movge	sl, r7
  13e278:	b1a0a009 	movlt	sl, r9
  13e27c:	e59d3008 	ldr	r3, [sp, #8]
  13e280:	e153000a 	cmp	r3, sl
  13e284:	ba0000e4 	blt	13e61c <printf_core+0x6b4>
  13e288:	e157000a 	cmp	r7, sl
  13e28c:	b3a09000 	movlt	r9, #0
  13e290:	a3a09001 	movge	r9, #1
  13e294:	e3180a12 	tst	r8, #73728	; 0x12000
  13e298:	01a03009 	moveq	r3, r9
  13e29c:	13a03001 	movne	r3, #1
  13e2a0:	e3530000 	cmp	r3, #0
  13e2a4:	0a000281 	beq	13ecb0 <printf_core+0xd48>
  13e2a8:	e59d3004 	ldr	r3, [sp, #4]
  13e2ac:	e5933000 	ldr	r3, [r3]
  13e2b0:	e3130020 	tst	r3, #32
  13e2b4:	0a000233 	beq	13eb88 <printf_core+0xc20>
  13e2b8:	e2283801 	eor	r3, r8, #65536	; 0x10000
  13e2bc:	e3130a12 	tst	r3, #73728	; 0x12000
  13e2c0:	01a03009 	moveq	r3, r9
  13e2c4:	13a03001 	movne	r3, #1
  13e2c8:	e3530000 	cmp	r3, #0
  13e2cc:	0a00027d 	beq	13ecc8 <printf_core+0xd60>
  13e2d0:	e1550006 	cmp	r5, r6
  13e2d4:	ca000225 	bgt	13eb70 <printf_core+0xc08>
  13e2d8:	e59d3004 	ldr	r3, [sp, #4]
  13e2dc:	e5933000 	ldr	r3, [r3]
  13e2e0:	e3130020 	tst	r3, #32
  13e2e4:	0a00021c 	beq	13eb5c <printf_core+0xbf4>
  13e2e8:	e2283a02 	eor	r3, r8, #8192	; 0x2000
  13e2ec:	e3130a12 	tst	r3, #73728	; 0x12000
  13e2f0:	01a03009 	moveq	r3, r9
  13e2f4:	13a03001 	movne	r3, #1
  13e2f8:	e3530000 	cmp	r3, #0
  13e2fc:	1a000004 	bne	13e314 <printf_core+0x3ac>
  13e300:	e1a03007 	mov	r3, r7
  13e304:	e1a0200a 	mov	r2, sl
  13e308:	e3a01020 	mov	r1, #32
  13e30c:	e59d0004 	ldr	r0, [sp, #4]
  13e310:	ebfffee9 	bl	13debc <pad.part.0>
  13e314:	e1a0b004 	mov	fp, r4
  13e318:	eaffff1b 	b	13df8c <printf_core+0x24>
  13e31c:	e5d62001 	ldrb	r2, [r6, #1]
  13e320:	e2423030 	sub	r3, r2, #48	; 0x30
  13e324:	e3530009 	cmp	r3, #9
  13e328:	9a00008b 	bls	13e55c <printf_core+0x5f4>
  13e32c:	e59d300c 	ldr	r3, [sp, #12]
  13e330:	e3530000 	cmp	r3, #0
  13e334:	1a000023 	bne	13e3c8 <printf_core+0x460>
  13e338:	e59d3004 	ldr	r3, [sp, #4]
  13e33c:	e2866001 	add	r6, r6, #1
  13e340:	e3530000 	cmp	r3, #0
  13e344:	0a0000be 	beq	13e644 <printf_core+0x6dc>
  13e348:	e59d1018 	ldr	r1, [sp, #24]
  13e34c:	e5913000 	ldr	r3, [r1]
  13e350:	e2832004 	add	r2, r3, #4
  13e354:	e5939000 	ldr	r9, [r3]
  13e358:	e5812000 	str	r2, [r1]
  13e35c:	e5d62000 	ldrb	r2, [r6]
  13e360:	e3590000 	cmp	r9, #0
  13e364:	b3888a02 	orrlt	r8, r8, #8192	; 0x2000
  13e368:	b2699000 	rsblt	r9, r9, #0
  13e36c:	e352002e 	cmp	r2, #46	; 0x2e
  13e370:	0affff67 	beq	13e114 <printf_core+0x1ac>
  13e374:	e3a03000 	mov	r3, #0
  13e378:	e3e05000 	mvn	r5, #0
  13e37c:	e58d301c 	str	r3, [sp, #28]
  13e380:	e3a07000 	mov	r7, #0
  13e384:	e59f0c30 	ldr	r0, [pc, #3120]	; 13efbc <printf_core+0x1054>
  13e388:	ea000007 	b	13e3ac <printf_core+0x444>
  13e38c:	e5531041 	ldrb	r1, [r3, #-65]	; 0xffffffbf
  13e390:	e2864001 	add	r4, r6, #1
  13e394:	e2413001 	sub	r3, r1, #1
  13e398:	e3530007 	cmp	r3, #7
  13e39c:	8a000011 	bhi	13e3e8 <printf_core+0x480>
  13e3a0:	e5d62001 	ldrb	r2, [r6, #1]
  13e3a4:	e1a07001 	mov	r7, r1
  13e3a8:	e1a06004 	mov	r6, r4
  13e3ac:	e0673187 	rsb	r3, r7, r7, lsl #3
  13e3b0:	e0873103 	add	r3, r7, r3, lsl #2
  13e3b4:	e0803083 	add	r3, r0, r3, lsl #1
  13e3b8:	e0833002 	add	r3, r3, r2
  13e3bc:	e2422041 	sub	r2, r2, #65	; 0x41
  13e3c0:	e3520039 	cmp	r2, #57	; 0x39
  13e3c4:	9afffff0 	bls	13e38c <printf_core+0x424>
  13e3c8:	ebffe861 	bl	138554 <__errno_location>
  13e3cc:	e3a03016 	mov	r3, #22
  13e3d0:	e3e02000 	mvn	r2, #0
  13e3d4:	e58d2000 	str	r2, [sp]
  13e3d8:	e5803000 	str	r3, [r0]
  13e3dc:	e59d0000 	ldr	r0, [sp]
  13e3e0:	e28ddfb3 	add	sp, sp, #716	; 0x2cc
  13e3e4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13e3e8:	e3510000 	cmp	r1, #0
  13e3ec:	0afffff5 	beq	13e3c8 <printf_core+0x460>
  13e3f0:	e351001b 	cmp	r1, #27
  13e3f4:	0a000080 	beq	13e5fc <printf_core+0x694>
  13e3f8:	e35c0000 	cmp	ip, #0
  13e3fc:	ba0000a1 	blt	13e688 <printf_core+0x720>
  13e400:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
  13e404:	e59d22f0 	ldr	r2, [sp, #752]	; 0x2f0
  13e408:	e083318c 	add	r3, r3, ip, lsl #3
  13e40c:	e782110c 	str	r1, [r2, ip, lsl #2]
  13e410:	e893000c 	ldm	r3, {r2, r3}
  13e414:	e58d2070 	str	r2, [sp, #112]	; 0x70
  13e418:	e58d3074 	str	r3, [sp, #116]	; 0x74
  13e41c:	e59d3004 	ldr	r3, [sp, #4]
  13e420:	e3530000 	cmp	r3, #0
  13e424:	0a000079 	beq	13e610 <printf_core+0x6a8>
  13e428:	e5d63000 	ldrb	r3, [r6]
  13e42c:	e3570000 	cmp	r7, #0
  13e430:	e58d3010 	str	r3, [sp, #16]
  13e434:	0a000004 	beq	13e44c <printf_core+0x4e4>
  13e438:	e203300f 	and	r3, r3, #15
  13e43c:	e3530003 	cmp	r3, #3
  13e440:	059d3010 	ldreq	r3, [sp, #16]
  13e444:	03c33020 	biceq	r3, r3, #32
  13e448:	058d3010 	streq	r3, [sp, #16]
  13e44c:	e59d3010 	ldr	r3, [sp, #16]
  13e450:	e3180a02 	tst	r8, #8192	; 0x2000
  13e454:	e2433041 	sub	r3, r3, #65	; 0x41
  13e458:	13c88801 	bicne	r8, r8, #65536	; 0x10000
  13e45c:	e3530037 	cmp	r3, #55	; 0x37
  13e460:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  13e464:	ea0001a2 	b	13eaf4 <printf_core+0xb8c>
  13e468:	0013e948 	.word	0x0013e948
  13e46c:	0013eaf4 	.word	0x0013eaf4
  13e470:	0013e7e4 	.word	0x0013e7e4
  13e474:	0013eaf4 	.word	0x0013eaf4
  13e478:	0013e948 	.word	0x0013e948
  13e47c:	0013e948 	.word	0x0013e948
  13e480:	0013e948 	.word	0x0013e948
  13e484:	0013eaf4 	.word	0x0013eaf4
  13e488:	0013eaf4 	.word	0x0013eaf4
  13e48c:	0013eaf4 	.word	0x0013eaf4
  13e490:	0013eaf4 	.word	0x0013eaf4
  13e494:	0013eaf4 	.word	0x0013eaf4
  13e498:	0013eaf4 	.word	0x0013eaf4
  13e49c:	0013eaf4 	.word	0x0013eaf4
  13e4a0:	0013eaf4 	.word	0x0013eaf4
  13e4a4:	0013eaf4 	.word	0x0013eaf4
  13e4a8:	0013eaf4 	.word	0x0013eaf4
  13e4ac:	0013eaf4 	.word	0x0013eaf4
  13e4b0:	0013e854 	.word	0x0013e854
  13e4b4:	0013eaf4 	.word	0x0013eaf4
  13e4b8:	0013eaf4 	.word	0x0013eaf4
  13e4bc:	0013eaf4 	.word	0x0013eaf4
  13e4c0:	0013eaf4 	.word	0x0013eaf4
  13e4c4:	0013eae8 	.word	0x0013eae8
  13e4c8:	0013eaf4 	.word	0x0013eaf4
  13e4cc:	0013eaf4 	.word	0x0013eaf4
  13e4d0:	0013eaf4 	.word	0x0013eaf4
  13e4d4:	0013eaf4 	.word	0x0013eaf4
  13e4d8:	0013eaf4 	.word	0x0013eaf4
  13e4dc:	0013eaf4 	.word	0x0013eaf4
  13e4e0:	0013eaf4 	.word	0x0013eaf4
  13e4e4:	0013eaf4 	.word	0x0013eaf4
  13e4e8:	0013e948 	.word	0x0013e948
  13e4ec:	0013eaf4 	.word	0x0013eaf4
  13e4f0:	0013e868 	.word	0x0013e868
  13e4f4:	0013e8a4 	.word	0x0013e8a4
  13e4f8:	0013e948 	.word	0x0013e948
  13e4fc:	0013e948 	.word	0x0013e948
  13e500:	0013e948 	.word	0x0013e948
  13e504:	0013eaf4 	.word	0x0013eaf4
  13e508:	0013e8a4 	.word	0x0013e8a4
  13e50c:	0013eaf4 	.word	0x0013eaf4
  13e510:	0013eaf4 	.word	0x0013eaf4
  13e514:	0013eaf4 	.word	0x0013eaf4
  13e518:	0013e8ec 	.word	0x0013e8ec
  13e51c:	0013e91c 	.word	0x0013e91c
  13e520:	0013e198 	.word	0x0013e198
  13e524:	0013ea3c 	.word	0x0013ea3c
  13e528:	0013eaf4 	.word	0x0013eaf4
  13e52c:	0013eaf4 	.word	0x0013eaf4
  13e530:	0013ead4 	.word	0x0013ead4
  13e534:	0013eaf4 	.word	0x0013eaf4
  13e538:	0013e728 	.word	0x0013e728
  13e53c:	0013eaf4 	.word	0x0013eaf4
  13e540:	0013eaf4 	.word	0x0013eaf4
  13e544:	0013eae8 	.word	0x0013eae8
  13e548:	e59d2004 	ldr	r2, [sp, #4]
  13e54c:	e1a0100a 	mov	r1, sl
  13e550:	e1a0000b 	mov	r0, fp
  13e554:	eb001341 	bl	143260 <__fwritex>
  13e558:	eafffeb3 	b	13e02c <printf_core+0xc4>
  13e55c:	e5d63002 	ldrb	r3, [r6, #2]
  13e560:	e3530024 	cmp	r3, #36	; 0x24
  13e564:	1affff70 	bne	13e32c <printf_core+0x3c4>
  13e568:	e3a0300a 	mov	r3, #10
  13e56c:	e59d12f0 	ldr	r1, [sp, #752]	; 0x2f0
  13e570:	e24221c3 	sub	r2, r2, #-1073741776	; 0xc0000030
  13e574:	e7813102 	str	r3, [r1, r2, lsl #2]
  13e578:	e3a02001 	mov	r2, #1
  13e57c:	e5d63001 	ldrb	r3, [r6, #1]
  13e580:	e58d200c 	str	r2, [sp, #12]
  13e584:	e2833202 	add	r3, r3, #536870912	; 0x20000000
  13e588:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
  13e58c:	e2433030 	sub	r3, r3, #48	; 0x30
  13e590:	e7929183 	ldr	r9, [r2, r3, lsl #3]
  13e594:	e2866003 	add	r6, r6, #3
  13e598:	eaffff6f 	b	13e35c <printf_core+0x3f4>
  13e59c:	e2421030 	sub	r1, r2, #48	; 0x30
  13e5a0:	e3510009 	cmp	r1, #9
  13e5a4:	e3a05000 	mov	r5, #0
  13e5a8:	e2866001 	add	r6, r6, #1
  13e5ac:	8a00000f 	bhi	13e5f0 <printf_core+0x688>
  13e5b0:	e59f09fc 	ldr	r0, [pc, #2556]	; 13efb4 <printf_core+0x104c>
  13e5b4:	e0653e85 	rsb	r3, r5, r5, lsl #29
  13e5b8:	e0653103 	rsb	r3, r5, r3, lsl #2
  13e5bc:	e1a03083 	lsl	r3, r3, #1
  13e5c0:	e1550000 	cmp	r5, r0
  13e5c4:	e2433106 	sub	r3, r3, #-2147483647	; 0x80000001
  13e5c8:	8a000003 	bhi	13e5dc <printf_core+0x674>
  13e5cc:	e1510003 	cmp	r1, r3
  13e5d0:	e0855105 	add	r5, r5, r5, lsl #2
  13e5d4:	d0815085 	addle	r5, r1, r5, lsl #1
  13e5d8:	da000000 	ble	13e5e0 <printf_core+0x678>
  13e5dc:	e3e05000 	mvn	r5, #0
  13e5e0:	e5f62001 	ldrb	r2, [r6, #1]!
  13e5e4:	e2421030 	sub	r1, r2, #48	; 0x30
  13e5e8:	e3510009 	cmp	r1, #9
  13e5ec:	9afffff0 	bls	13e5b4 <printf_core+0x64c>
  13e5f0:	e3a03001 	mov	r3, #1
  13e5f4:	e58d301c 	str	r3, [sp, #28]
  13e5f8:	eaffff60 	b	13e380 <printf_core+0x418>
  13e5fc:	e35c0000 	cmp	ip, #0
  13e600:	aaffff70 	bge	13e3c8 <printf_core+0x460>
  13e604:	e59d3004 	ldr	r3, [sp, #4]
  13e608:	e3530000 	cmp	r3, #0
  13e60c:	1affff85 	bne	13e428 <printf_core+0x4c0>
  13e610:	e59d3008 	ldr	r3, [sp, #8]
  13e614:	e153000a 	cmp	r3, sl
  13e618:	aaffff3d 	bge	13e314 <printf_core+0x3ac>
  13e61c:	ebffe7cc 	bl	138554 <__errno_location>
  13e620:	e3e02000 	mvn	r2, #0
  13e624:	e3a0304b 	mov	r3, #75	; 0x4b
  13e628:	e58d2000 	str	r2, [sp]
  13e62c:	e5803000 	str	r3, [r0]
  13e630:	e59d0000 	ldr	r0, [sp]
  13e634:	e28ddfb3 	add	sp, sp, #716	; 0x2cc
  13e638:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13e63c:	e1a04003 	mov	r4, r3
  13e640:	eafffe6c 	b	13dff8 <printf_core+0x90>
  13e644:	e59d9004 	ldr	r9, [sp, #4]
  13e648:	eafffeaf 	b	13e10c <printf_core+0x1a4>
  13e64c:	e3a0300a 	mov	r3, #10
  13e650:	e59d12f0 	ldr	r1, [sp, #752]	; 0x2f0
  13e654:	e24221c3 	sub	r2, r2, #-1073741776	; 0xc0000030
  13e658:	e7813102 	str	r3, [r1, r2, lsl #2]
  13e65c:	e5d63002 	ldrb	r3, [r6, #2]
  13e660:	e59d1028 	ldr	r1, [sp, #40]	; 0x28
  13e664:	e2833202 	add	r3, r3, #536870912	; 0x20000000
  13e668:	e2433030 	sub	r3, r3, #48	; 0x30
  13e66c:	e7915183 	ldr	r5, [r1, r3, lsl #3]
  13e670:	e5d62004 	ldrb	r2, [r6, #4]
  13e674:	e1e03005 	mvn	r3, r5
  13e678:	e1a03fa3 	lsr	r3, r3, #31
  13e67c:	e2866004 	add	r6, r6, #4
  13e680:	e58d301c 	str	r3, [sp, #28]
  13e684:	eaffff3d 	b	13e380 <printf_core+0x418>
  13e688:	e59d3004 	ldr	r3, [sp, #4]
  13e68c:	e3530000 	cmp	r3, #0
  13e690:	0a000409 	beq	13f6bc <printf_core+0x1754>
  13e694:	e59d2018 	ldr	r2, [sp, #24]
  13e698:	e28d0070 	add	r0, sp, #112	; 0x70
  13e69c:	ebfffda1 	bl	13dd28 <pop_arg>
  13e6a0:	eaffff60 	b	13e428 <printf_core+0x4c0>
  13e6a4:	e3a03001 	mov	r3, #1
  13e6a8:	e5d42003 	ldrb	r2, [r4, #3]
  13e6ac:	e58d300c 	str	r3, [sp, #12]
  13e6b0:	e2423020 	sub	r3, r2, #32
  13e6b4:	e353001f 	cmp	r3, #31
  13e6b8:	e2846003 	add	r6, r4, #3
  13e6bc:	9afffe68 	bls	13e064 <printf_core+0xfc>
  13e6c0:	e3a08000 	mov	r8, #0
  13e6c4:	eafffe75 	b	13e0a0 <printf_core+0x138>
  13e6c8:	e59d3004 	ldr	r3, [sp, #4]
  13e6cc:	e3530000 	cmp	r3, #0
  13e6d0:	1affff41 	bne	13e3dc <printf_core+0x474>
  13e6d4:	e59d300c 	ldr	r3, [sp, #12]
  13e6d8:	e3530000 	cmp	r3, #0
  13e6dc:	0a0003f6 	beq	13f6bc <printf_core+0x1754>
  13e6e0:	e3a05001 	mov	r5, #1
  13e6e4:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
  13e6e8:	e59d62f0 	ldr	r6, [sp, #752]	; 0x2f0
  13e6ec:	e59d7018 	ldr	r7, [sp, #24]
  13e6f0:	e2834008 	add	r4, r3, #8
  13e6f4:	e5b61004 	ldr	r1, [r6, #4]!
  13e6f8:	e3510000 	cmp	r1, #0
  13e6fc:	0a0004f8 	beq	13fae4 <printf_core+0x1b7c>
  13e700:	e1a00004 	mov	r0, r4
  13e704:	e2855001 	add	r5, r5, #1
  13e708:	e1a02007 	mov	r2, r7
  13e70c:	ebfffd85 	bl	13dd28 <pop_arg>
  13e710:	e355000a 	cmp	r5, #10
  13e714:	e2844008 	add	r4, r4, #8
  13e718:	1afffff5 	bne	13e6f4 <printf_core+0x78c>
  13e71c:	e3a03001 	mov	r3, #1
  13e720:	e58d3000 	str	r3, [sp]
  13e724:	eaffff2c 	b	13e3dc <printf_core+0x474>
  13e728:	e3a03000 	mov	r3, #0
  13e72c:	e28d7070 	add	r7, sp, #112	; 0x70
  13e730:	e89700c0 	ldm	r7, {r6, r7}
  13e734:	e58d3020 	str	r3, [sp, #32]
  13e738:	e59f3878 	ldr	r3, [pc, #2168]	; 13efb8 <printf_core+0x1050>
  13e73c:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13e740:	e3a03000 	mov	r3, #0
  13e744:	e3e02000 	mvn	r2, #0
  13e748:	e1570003 	cmp	r7, r3
  13e74c:	01560002 	cmpeq	r6, r2
  13e750:	e28da0d0 	add	sl, sp, #208	; 0xd0
  13e754:	91a0b00a 	movls	fp, sl
  13e758:	9a000015 	bls	13e7b4 <printf_core+0x84c>
  13e75c:	e1a0b00a 	mov	fp, sl
  13e760:	e58d2010 	str	r2, [sp, #16]
  13e764:	e58d3014 	str	r3, [sp, #20]
  13e768:	e1a00006 	mov	r0, r6
  13e76c:	e1a01007 	mov	r1, r7
  13e770:	e3a0200a 	mov	r2, #10
  13e774:	e3a03000 	mov	r3, #0
  13e778:	eb001834 	bl	144850 <__aeabi_uldivmod>
  13e77c:	e2822030 	add	r2, r2, #48	; 0x30
  13e780:	e56b2001 	strb	r2, [fp, #-1]!
  13e784:	e1a00006 	mov	r0, r6
  13e788:	e1a01007 	mov	r1, r7
  13e78c:	e3a0200a 	mov	r2, #10
  13e790:	e3a03000 	mov	r3, #0
  13e794:	eb00182d 	bl	144850 <__aeabi_uldivmod>
  13e798:	e28d3010 	add	r3, sp, #16
  13e79c:	e893000c 	ldm	r3, {r2, r3}
  13e7a0:	e1510003 	cmp	r1, r3
  13e7a4:	01500002 	cmpeq	r0, r2
  13e7a8:	e1a06000 	mov	r6, r0
  13e7ac:	e1a07001 	mov	r7, r1
  13e7b0:	8affffec 	bhi	13e768 <printf_core+0x800>
  13e7b4:	e3560000 	cmp	r6, #0
  13e7b8:	0afffe90 	beq	13e200 <printf_core+0x298>
  13e7bc:	e59f1838 	ldr	r1, [pc, #2104]	; 13effc <printf_core+0x1094>
  13e7c0:	e0832196 	umull	r2, r3, r6, r1
  13e7c4:	e1a031a3 	lsr	r3, r3, #3
  13e7c8:	e0832103 	add	r2, r3, r3, lsl #2
  13e7cc:	e0466082 	sub	r6, r6, r2, lsl #1
  13e7d0:	e2862030 	add	r2, r6, #48	; 0x30
  13e7d4:	e2536000 	subs	r6, r3, #0
  13e7d8:	e56b2001 	strb	r2, [fp, #-1]!
  13e7dc:	1afffff6 	bne	13e7bc <printf_core+0x854>
  13e7e0:	eafffe86 	b	13e200 <printf_core+0x298>
  13e7e4:	e3a03000 	mov	r3, #0
  13e7e8:	e3e0a000 	mvn	sl, #0
  13e7ec:	e59d1070 	ldr	r1, [sp, #112]	; 0x70
  13e7f0:	e28d707c 	add	r7, sp, #124	; 0x7c
  13e7f4:	e58d3080 	str	r3, [sp, #128]	; 0x80
  13e7f8:	e58d107c 	str	r1, [sp, #124]	; 0x7c
  13e7fc:	e58d7070 	str	r7, [sp, #112]	; 0x70
  13e800:	e3510000 	cmp	r1, #0
  13e804:	0a000112 	beq	13ec54 <printf_core+0xcec>
  13e808:	e3a05000 	mov	r5, #0
  13e80c:	e28d6068 	add	r6, sp, #104	; 0x68
  13e810:	ea000007 	b	13e834 <printf_core+0x8cc>
  13e814:	e1530000 	cmp	r3, r0
  13e818:	3a0000e4 	bcc	13ebb0 <printf_core+0xc48>
  13e81c:	e0855000 	add	r5, r5, r0
  13e820:	e155000a 	cmp	r5, sl
  13e824:	2a0000e1 	bcs	13ebb0 <printf_core+0xc48>
  13e828:	e5b71004 	ldr	r1, [r7, #4]!
  13e82c:	e3510000 	cmp	r1, #0
  13e830:	0a0000de 	beq	13ebb0 <printf_core+0xc48>
  13e834:	e1a00006 	mov	r0, r6
  13e838:	eb00109c 	bl	142ab0 <wctomb>
  13e83c:	e3500000 	cmp	r0, #0
  13e840:	e04a3005 	sub	r3, sl, r5
  13e844:	aafffff2 	bge	13e814 <printf_core+0x8ac>
  13e848:	e3e03000 	mvn	r3, #0
  13e84c:	e58d3000 	str	r3, [sp]
  13e850:	eafffee1 	b	13e3dc <printf_core+0x474>
  13e854:	e255a000 	subs	sl, r5, #0
  13e858:	e59d7070 	ldr	r7, [sp, #112]	; 0x70
  13e85c:	0a0000fc 	beq	13ec54 <printf_core+0xcec>
  13e860:	e5971000 	ldr	r1, [r7]
  13e864:	eaffffe5 	b	13e800 <printf_core+0x898>
  13e868:	e3a00001 	mov	r0, #1
  13e86c:	e59d3070 	ldr	r3, [sp, #112]	; 0x70
  13e870:	e3c88801 	bic	r8, r8, #65536	; 0x10000
  13e874:	e5cd30cf 	strb	r3, [sp, #207]	; 0xcf
  13e878:	e28d60d0 	add	r6, sp, #208	; 0xd0
  13e87c:	e28db0cf 	add	fp, sp, #207	; 0xcf
  13e880:	e3a03000 	mov	r3, #0
  13e884:	e046600b 	sub	r6, r6, fp
  13e888:	e58d3020 	str	r3, [sp, #32]
  13e88c:	e59f3724 	ldr	r3, [pc, #1828]	; 13efb8 <printf_core+0x1050>
  13e890:	e1560000 	cmp	r6, r0
  13e894:	a1a05006 	movge	r5, r6
  13e898:	b1a05000 	movlt	r5, r0
  13e89c:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13e8a0:	eafffe70 	b	13e268 <printf_core+0x300>
  13e8a4:	e28d7070 	add	r7, sp, #112	; 0x70
  13e8a8:	e89700c0 	ldm	r7, {r6, r7}
  13e8ac:	e3560000 	cmp	r6, #0
  13e8b0:	e2d73000 	sbcs	r3, r7, #0
  13e8b4:	ba000122 	blt	13ed44 <printf_core+0xddc>
  13e8b8:	e3180b02 	tst	r8, #2048	; 0x800
  13e8bc:	1a000379 	bne	13f6a8 <printf_core+0x1740>
  13e8c0:	e59fa6f0 	ldr	sl, [pc, #1776]	; 13efb8 <printf_core+0x1050>
  13e8c4:	e2083001 	and	r3, r8, #1
  13e8c8:	e3530000 	cmp	r3, #0
  13e8cc:	e28a2002 	add	r2, sl, #2
  13e8d0:	01a0300a 	moveq	r3, sl
  13e8d4:	11a03002 	movne	r3, r2
  13e8d8:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13e8dc:	13a03001 	movne	r3, #1
  13e8e0:	03a03000 	moveq	r3, #0
  13e8e4:	e58d3020 	str	r3, [sp, #32]
  13e8e8:	eaffff94 	b	13e740 <printf_core+0x7d8>
  13e8ec:	ebffe718 	bl	138554 <__errno_location>
  13e8f0:	e5900000 	ldr	r0, [r0]
  13e8f4:	ebffe738 	bl	1385dc <strerror>
  13e8f8:	e1a0b000 	mov	fp, r0
  13e8fc:	e3550000 	cmp	r5, #0
  13e900:	ba0000fa 	blt	13ecf0 <printf_core+0xd88>
  13e904:	e1a01005 	mov	r1, r5
  13e908:	e1a0000b 	mov	r0, fp
  13e90c:	eb0008dd 	bl	140c88 <strnlen>
  13e910:	e08b6000 	add	r6, fp, r0
  13e914:	e3c88801 	bic	r8, r8, #65536	; 0x10000
  13e918:	eaffffd8 	b	13e880 <printf_core+0x918>
  13e91c:	e3570007 	cmp	r7, #7
  13e920:	979ff107 	ldrls	pc, [pc, r7, lsl #2]
  13e924:	eaffff39 	b	13e610 <printf_core+0x6a8>
  13e928:	0013eb18 	.word	0x0013eb18
  13e92c:	0013eb18 	.word	0x0013eb18
  13e930:	0013eb28 	.word	0x0013eb28
  13e934:	0013eb3c 	.word	0x0013eb3c
  13e938:	0013eb4c 	.word	0x0013eb4c
  13e93c:	0013e610 	.word	0x0013e610
  13e940:	0013eb18 	.word	0x0013eb18
  13e944:	0013eb28 	.word	0x0013eb28
  13e948:	e59d301c 	ldr	r3, [sp, #28]
  13e94c:	e0133fa5 	ands	r3, r3, r5, lsr #31
  13e950:	1affff31 	bne	13e61c <printf_core+0x6b4>
  13e954:	e28d7070 	add	r7, sp, #112	; 0x70
  13e958:	e89700c0 	ldm	r7, {r6, r7}
  13e95c:	e1b02fa7 	lsrs	r2, r7, #31
  13e960:	e58d2030 	str	r2, [sp, #48]	; 0x30
  13e964:	e58d306c 	str	r3, [sp, #108]	; 0x6c
  13e968:	0a0000e8 	beq	13ed10 <printf_core+0xda8>
  13e96c:	e2873102 	add	r3, r7, #-2147483648	; 0x80000000
  13e970:	e1a07003 	mov	r7, r3
  13e974:	e59f3644 	ldr	r3, [pc, #1604]	; 13efc0 <printf_core+0x1058>
  13e978:	e58d3034 	str	r3, [sp, #52]	; 0x34
  13e97c:	e3e02000 	mvn	r2, #0
  13e980:	e59f363c 	ldr	r3, [pc, #1596]	; 13efc4 <printf_core+0x105c>
  13e984:	e3c71102 	bic	r1, r7, #-2147483648	; 0x80000000
  13e988:	e1510003 	cmp	r1, r3
  13e98c:	01560002 	cmpeq	r6, r2
  13e990:	e1a00006 	mov	r0, r6
  13e994:	9a0000fb 	bls	13ed88 <printf_core+0xe20>
  13e998:	e59d3010 	ldr	r3, [sp, #16]
  13e99c:	e59fe624 	ldr	lr, [pc, #1572]	; 13efc8 <printf_core+0x1060>
  13e9a0:	e59fc624 	ldr	ip, [pc, #1572]	; 13efcc <printf_core+0x1064>
  13e9a4:	e213a020 	ands	sl, r3, #32
  13e9a8:	e1a02006 	mov	r2, r6
  13e9ac:	e1a03007 	mov	r3, r7
  13e9b0:	e1a01007 	mov	r1, r7
  13e9b4:	01a0600e 	moveq	r6, lr
  13e9b8:	11a0600c 	movne	r6, ip
  13e9bc:	eb001729 	bl	144668 <__aeabi_dcmpeq>
  13e9c0:	e3500000 	cmp	r0, #0
  13e9c4:	1a000004 	bne	13e9dc <printf_core+0xa74>
  13e9c8:	e59fe600 	ldr	lr, [pc, #1536]	; 13efd0 <printf_core+0x1068>
  13e9cc:	e59fc600 	ldr	ip, [pc, #1536]	; 13efd4 <printf_core+0x106c>
  13e9d0:	e35a0000 	cmp	sl, #0
  13e9d4:	01a0600e 	moveq	r6, lr
  13e9d8:	11a0600c 	movne	r6, ip
  13e9dc:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
  13e9e0:	e283a003 	add	sl, r3, #3
  13e9e4:	e159000a 	cmp	r9, sl
  13e9e8:	c3a07000 	movgt	r7, #0
  13e9ec:	d3a07001 	movle	r7, #1
  13e9f0:	e3180a02 	tst	r8, #8192	; 0x2000
  13e9f4:	01a03007 	moveq	r3, r7
  13e9f8:	13a03001 	movne	r3, #1
  13e9fc:	e3530000 	cmp	r3, #0
  13ea00:	0a00042e 	beq	13fac0 <printf_core+0x1b58>
  13ea04:	e59d3004 	ldr	r3, [sp, #4]
  13ea08:	e5933000 	ldr	r3, [r3]
  13ea0c:	e3130020 	tst	r3, #32
  13ea10:	0a00032c 	beq	13f6c8 <printf_core+0x1760>
  13ea14:	e2283a02 	eor	r3, r8, #8192	; 0x2000
  13ea18:	e3130a12 	tst	r3, #73728	; 0x12000
  13ea1c:	13a07001 	movne	r7, #1
  13ea20:	e3570000 	cmp	r7, #0
  13ea24:	0a00034f 	beq	13f768 <printf_core+0x1800>
  13ea28:	e159000a 	cmp	r9, sl
  13ea2c:	a1a0a009 	movge	sl, r9
  13ea30:	e35a0000 	cmp	sl, #0
  13ea34:	aafffef5 	bge	13e610 <printf_core+0x6a8>
  13ea38:	eafffef7 	b	13e61c <printf_core+0x6b4>
  13ea3c:	e3550008 	cmp	r5, #8
  13ea40:	e3a03078 	mov	r3, #120	; 0x78
  13ea44:	33a05008 	movcc	r5, #8
  13ea48:	e3a0c020 	mov	ip, #32
  13ea4c:	e58d3010 	str	r3, [sp, #16]
  13ea50:	e3888008 	orr	r8, r8, #8
  13ea54:	e28d3070 	add	r3, sp, #112	; 0x70
  13ea58:	e893000c 	ldm	r3, {r2, r3}
  13ea5c:	e28da0d0 	add	sl, sp, #208	; 0xd0
  13ea60:	e1921003 	orrs	r1, r2, r3
  13ea64:	e1a0b00a 	mov	fp, sl
  13ea68:	0a00004b 	beq	13eb9c <printf_core+0xc34>
  13ea6c:	e59f6584 	ldr	r6, [pc, #1412]	; 13eff8 <printf_core+0x1090>
  13ea70:	e3a01000 	mov	r1, #0
  13ea74:	e202000f 	and	r0, r2, #15
  13ea78:	e1a0e222 	lsr	lr, r2, #4
  13ea7c:	e58d0020 	str	r0, [sp, #32]
  13ea80:	e58d1024 	str	r1, [sp, #36]	; 0x24
  13ea84:	e18eee03 	orr	lr, lr, r3, lsl #28
  13ea88:	e1a01223 	lsr	r1, r3, #4
  13ea8c:	e1a03001 	mov	r3, r1
  13ea90:	e1a0200e 	mov	r2, lr
  13ea94:	e59d1020 	ldr	r1, [sp, #32]
  13ea98:	e0860001 	add	r0, r6, r1
  13ea9c:	e5d01000 	ldrb	r1, [r0]
  13eaa0:	e1920003 	orrs	r0, r2, r3
  13eaa4:	e18c1001 	orr	r1, ip, r1
  13eaa8:	e56b1001 	strb	r1, [fp, #-1]!
  13eaac:	1affffef 	bne	13ea70 <printf_core+0xb08>
  13eab0:	e2183008 	ands	r3, r8, #8
  13eab4:	0a000039 	beq	13eba0 <printf_core+0xc38>
  13eab8:	e3a02002 	mov	r2, #2
  13eabc:	e59f34f4 	ldr	r3, [pc, #1268]	; 13efb8 <printf_core+0x1050>
  13eac0:	e58d2020 	str	r2, [sp, #32]
  13eac4:	e59d2010 	ldr	r2, [sp, #16]
  13eac8:	e0833242 	add	r3, r3, r2, asr #4
  13eacc:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13ead0:	eafffdca 	b	13e200 <printf_core+0x298>
  13ead4:	e59db070 	ldr	fp, [sp, #112]	; 0x70
  13ead8:	e59f34f8 	ldr	r3, [pc, #1272]	; 13efd8 <printf_core+0x1070>
  13eadc:	e35b0000 	cmp	fp, #0
  13eae0:	01a0b003 	moveq	fp, r3
  13eae4:	eaffff84 	b	13e8fc <printf_core+0x994>
  13eae8:	e59d3010 	ldr	r3, [sp, #16]
  13eaec:	e203c020 	and	ip, r3, #32
  13eaf0:	eaffffd7 	b	13ea54 <printf_core+0xaec>
  13eaf4:	e3a03000 	mov	r3, #0
  13eaf8:	e28d60d0 	add	r6, sp, #208	; 0xd0
  13eafc:	e046600b 	sub	r6, r6, fp
  13eb00:	e58d3020 	str	r3, [sp, #32]
  13eb04:	e59f34ac 	ldr	r3, [pc, #1196]	; 13efb8 <printf_core+0x1050>
  13eb08:	e1560005 	cmp	r6, r5
  13eb0c:	a1a05006 	movge	r5, r6
  13eb10:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13eb14:	eafffdd3 	b	13e268 <printf_core+0x300>
  13eb18:	e59d3070 	ldr	r3, [sp, #112]	; 0x70
  13eb1c:	e59d2000 	ldr	r2, [sp]
  13eb20:	e5832000 	str	r2, [r3]
  13eb24:	eafffeb9 	b	13e610 <printf_core+0x6a8>
  13eb28:	e59d2000 	ldr	r2, [sp]
  13eb2c:	e59d1070 	ldr	r1, [sp, #112]	; 0x70
  13eb30:	e1a03fc2 	asr	r3, r2, #31
  13eb34:	e881000c 	stm	r1, {r2, r3}
  13eb38:	eafffeb4 	b	13e610 <printf_core+0x6a8>
  13eb3c:	e59d3070 	ldr	r3, [sp, #112]	; 0x70
  13eb40:	e59d2000 	ldr	r2, [sp]
  13eb44:	e1c320b0 	strh	r2, [r3]
  13eb48:	eafffeb0 	b	13e610 <printf_core+0x6a8>
  13eb4c:	e59d3070 	ldr	r3, [sp, #112]	; 0x70
  13eb50:	e59d2000 	ldr	r2, [sp]
  13eb54:	e5c32000 	strb	r2, [r3]
  13eb58:	eafffeac 	b	13e610 <printf_core+0x6a8>
  13eb5c:	e1a01006 	mov	r1, r6
  13eb60:	e1a0000b 	mov	r0, fp
  13eb64:	e59d2004 	ldr	r2, [sp, #4]
  13eb68:	eb0011bc 	bl	143260 <__fwritex>
  13eb6c:	eafffddd 	b	13e2e8 <printf_core+0x380>
  13eb70:	e1a02005 	mov	r2, r5
  13eb74:	e1a03006 	mov	r3, r6
  13eb78:	e3a01030 	mov	r1, #48	; 0x30
  13eb7c:	e59d0004 	ldr	r0, [sp, #4]
  13eb80:	ebfffccd 	bl	13debc <pad.part.0>
  13eb84:	eafffdd3 	b	13e2d8 <printf_core+0x370>
  13eb88:	e59d1020 	ldr	r1, [sp, #32]
  13eb8c:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
  13eb90:	e59d2004 	ldr	r2, [sp, #4]
  13eb94:	eb0011b1 	bl	143260 <__fwritex>
  13eb98:	eafffdc6 	b	13e2b8 <printf_core+0x350>
  13eb9c:	e3a03000 	mov	r3, #0
  13eba0:	e58d3020 	str	r3, [sp, #32]
  13eba4:	e59f340c 	ldr	r3, [pc, #1036]	; 13efb8 <printf_core+0x1050>
  13eba8:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13ebac:	eafffd93 	b	13e200 <printf_core+0x298>
  13ebb0:	e3550000 	cmp	r5, #0
  13ebb4:	e1a0b005 	mov	fp, r5
  13ebb8:	bafffe97 	blt	13e61c <printf_core+0x6b4>
  13ebbc:	e1550009 	cmp	r5, r9
  13ebc0:	b3a03000 	movlt	r3, #0
  13ebc4:	a3a03001 	movge	r3, #1
  13ebc8:	e3180a12 	tst	r8, #73728	; 0x12000
  13ebcc:	e58d3010 	str	r3, [sp, #16]
  13ebd0:	13a03001 	movne	r3, #1
  13ebd4:	e3530000 	cmp	r3, #0
  13ebd8:	0a000062 	beq	13ed68 <printf_core+0xe00>
  13ebdc:	e3550000 	cmp	r5, #0
  13ebe0:	e59d7070 	ldr	r7, [sp, #112]	; 0x70
  13ebe4:	0a000025 	beq	13ec80 <printf_core+0xd18>
  13ebe8:	e5971000 	ldr	r1, [r7]
  13ebec:	e3510000 	cmp	r1, #0
  13ebf0:	0a000022 	beq	13ec80 <printf_core+0xd18>
  13ebf4:	e3a0a000 	mov	sl, #0
  13ebf8:	e58d401c 	str	r4, [sp, #28]
  13ebfc:	e28d6068 	add	r6, sp, #104	; 0x68
  13ec00:	e1a0400a 	mov	r4, sl
  13ec04:	e59da004 	ldr	sl, [sp, #4]
  13ec08:	ea000004 	b	13ec20 <printf_core+0xcb8>
  13ec0c:	e1540005 	cmp	r4, r5
  13ec10:	2a000024 	bcs	13eca8 <printf_core+0xd40>
  13ec14:	e5b71004 	ldr	r1, [r7, #4]!
  13ec18:	e3510000 	cmp	r1, #0
  13ec1c:	0a000021 	beq	13eca8 <printf_core+0xd40>
  13ec20:	e1a00006 	mov	r0, r6
  13ec24:	eb000fa1 	bl	142ab0 <wctomb>
  13ec28:	e0844000 	add	r4, r4, r0
  13ec2c:	e1540005 	cmp	r4, r5
  13ec30:	8a00001c 	bhi	13eca8 <printf_core+0xd40>
  13ec34:	e59a2000 	ldr	r2, [sl]
  13ec38:	e3120020 	tst	r2, #32
  13ec3c:	1afffff2 	bne	13ec0c <printf_core+0xca4>
  13ec40:	e1a01000 	mov	r1, r0
  13ec44:	e1a0200a 	mov	r2, sl
  13ec48:	e1a00006 	mov	r0, r6
  13ec4c:	eb001183 	bl	143260 <__fwritex>
  13ec50:	eaffffed 	b	13ec0c <printf_core+0xca4>
  13ec54:	e3590000 	cmp	r9, #0
  13ec58:	c3a03000 	movgt	r3, #0
  13ec5c:	d3a03001 	movle	r3, #1
  13ec60:	e3180a12 	tst	r8, #73728	; 0x12000
  13ec64:	e58d3010 	str	r3, [sp, #16]
  13ec68:	13a03001 	movne	r3, #1
  13ec6c:	e3530000 	cmp	r3, #0
  13ec70:	01a0b003 	moveq	fp, r3
  13ec74:	01a0500b 	moveq	r5, fp
  13ec78:	0a00003a 	beq	13ed68 <printf_core+0xe00>
  13ec7c:	e3a0b000 	mov	fp, #0
  13ec80:	e2283a02 	eor	r3, r8, #8192	; 0x2000
  13ec84:	e3130a12 	tst	r3, #73728	; 0x12000
  13ec88:	e59d3010 	ldr	r3, [sp, #16]
  13ec8c:	13a03001 	movne	r3, #1
  13ec90:	e3530000 	cmp	r3, #0
  13ec94:	0a00027d 	beq	13f690 <printf_core+0x1728>
  13ec98:	e159000b 	cmp	r9, fp
  13ec9c:	a1a0a009 	movge	sl, r9
  13eca0:	b1a0a00b 	movlt	sl, fp
  13eca4:	eafffe59 	b	13e610 <printf_core+0x6a8>
  13eca8:	e59d401c 	ldr	r4, [sp, #28]
  13ecac:	eafffff3 	b	13ec80 <printf_core+0xd18>
  13ecb0:	e1a03007 	mov	r3, r7
  13ecb4:	e1a0200a 	mov	r2, sl
  13ecb8:	e3a01020 	mov	r1, #32
  13ecbc:	e59d0004 	ldr	r0, [sp, #4]
  13ecc0:	ebfffc7d 	bl	13debc <pad.part.0>
  13ecc4:	eafffd77 	b	13e2a8 <printf_core+0x340>
  13ecc8:	e1a03007 	mov	r3, r7
  13eccc:	e1a0200a 	mov	r2, sl
  13ecd0:	e3a01030 	mov	r1, #48	; 0x30
  13ecd4:	e59d0004 	ldr	r0, [sp, #4]
  13ecd8:	ebfffc77 	bl	13debc <pad.part.0>
  13ecdc:	eafffd7b 	b	13e2d0 <printf_core+0x368>
  13ece0:	e3a05000 	mov	r5, #0
  13ece4:	e1a0b00a 	mov	fp, sl
  13ece8:	e1a06005 	mov	r6, r5
  13ecec:	eafffd5d 	b	13e268 <printf_core+0x300>
  13ecf0:	e3e01102 	mvn	r1, #-2147483648	; 0x80000000
  13ecf4:	e1a0000b 	mov	r0, fp
  13ecf8:	eb0007e2 	bl	140c88 <strnlen>
  13ecfc:	e7db3000 	ldrb	r3, [fp, r0]
  13ed00:	e08b6000 	add	r6, fp, r0
  13ed04:	e3530000 	cmp	r3, #0
  13ed08:	0affff01 	beq	13e914 <printf_core+0x9ac>
  13ed0c:	eafffe42 	b	13e61c <printf_core+0x6b4>
  13ed10:	e3180b02 	tst	r8, #2048	; 0x800
  13ed14:	1a000278 	bne	13f6fc <printf_core+0x1794>
  13ed18:	e59f22bc 	ldr	r2, [pc, #700]	; 13efdc <printf_core+0x1074>
  13ed1c:	e2083001 	and	r3, r8, #1
  13ed20:	e3530000 	cmp	r3, #0
  13ed24:	e2821005 	add	r1, r2, #5
  13ed28:	01a03002 	moveq	r3, r2
  13ed2c:	11a03001 	movne	r3, r1
  13ed30:	e58d3034 	str	r3, [sp, #52]	; 0x34
  13ed34:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
  13ed38:	13a03001 	movne	r3, #1
  13ed3c:	e58d3030 	str	r3, [sp, #48]	; 0x30
  13ed40:	eaffff0d 	b	13e97c <printf_core+0xa14>
  13ed44:	e3a03001 	mov	r3, #1
  13ed48:	e2766000 	rsbs	r6, r6, #0
  13ed4c:	e58d3020 	str	r3, [sp, #32]
  13ed50:	e59f3260 	ldr	r3, [pc, #608]	; 13efb8 <printf_core+0x1050>
  13ed54:	e2e77000 	rsc	r7, r7, #0
  13ed58:	e58d6070 	str	r6, [sp, #112]	; 0x70
  13ed5c:	e58d7074 	str	r7, [sp, #116]	; 0x74
  13ed60:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13ed64:	eafffe75 	b	13e740 <printf_core+0x7d8>
  13ed68:	e1a0300b 	mov	r3, fp
  13ed6c:	e1a02009 	mov	r2, r9
  13ed70:	e3a01020 	mov	r1, #32
  13ed74:	e59d0004 	ldr	r0, [sp, #4]
  13ed78:	ebfffc4f 	bl	13debc <pad.part.0>
  13ed7c:	e3a03000 	mov	r3, #0
  13ed80:	e58d3010 	str	r3, [sp, #16]
  13ed84:	eaffff94 	b	13ebdc <printf_core+0xc74>
  13ed88:	e28d206c 	add	r2, sp, #108	; 0x6c
  13ed8c:	e1a01007 	mov	r1, r7
  13ed90:	eb000f2f 	bl	142a54 <frexpl>
  13ed94:	e1a02000 	mov	r2, r0
  13ed98:	e1a03001 	mov	r3, r1
  13ed9c:	eb0013f6 	bl	143d7c <__adddf3>
  13eda0:	e3a03000 	mov	r3, #0
  13eda4:	e3a02000 	mov	r2, #0
  13eda8:	e58d001c 	str	r0, [sp, #28]
  13edac:	e58d1038 	str	r1, [sp, #56]	; 0x38
  13edb0:	eb00162c 	bl	144668 <__aeabi_dcmpeq>
  13edb4:	e59d306c 	ldr	r3, [sp, #108]	; 0x6c
  13edb8:	e3500000 	cmp	r0, #0
  13edbc:	02433001 	subeq	r3, r3, #1
  13edc0:	158d3020 	strne	r3, [sp, #32]
  13edc4:	058d3020 	streq	r3, [sp, #32]
  13edc8:	058d306c 	streq	r3, [sp, #108]	; 0x6c
  13edcc:	e59d3010 	ldr	r3, [sp, #16]
  13edd0:	e3833020 	orr	r3, r3, #32
  13edd4:	e3530061 	cmp	r3, #97	; 0x61
  13edd8:	e58d303c 	str	r3, [sp, #60]	; 0x3c
  13eddc:	0a000267 	beq	13f780 <printf_core+0x1818>
  13ede0:	e3550000 	cmp	r5, #0
  13ede4:	ba000460 	blt	13ff6c <printf_core+0x2004>
  13ede8:	13a03001 	movne	r3, #1
  13edec:	03a03000 	moveq	r3, #0
  13edf0:	e58d3044 	str	r3, [sp, #68]	; 0x44
  13edf4:	e59d701c 	ldr	r7, [sp, #28]
  13edf8:	e59d6038 	ldr	r6, [sp, #56]	; 0x38
  13edfc:	e1a00007 	mov	r0, r7
  13ee00:	e1a01006 	mov	r1, r6
  13ee04:	e3a02000 	mov	r2, #0
  13ee08:	e3a03000 	mov	r3, #0
  13ee0c:	eb001615 	bl	144668 <__aeabi_dcmpeq>
  13ee10:	e3500000 	cmp	r0, #0
  13ee14:	1a00000a 	bne	13ee44 <printf_core+0xedc>
  13ee18:	e59f31c0 	ldr	r3, [pc, #448]	; 13efe0 <printf_core+0x1078>
  13ee1c:	e1a00007 	mov	r0, r7
  13ee20:	e1a01006 	mov	r1, r6
  13ee24:	e3a02000 	mov	r2, #0
  13ee28:	eb0014c0 	bl	144130 <__aeabi_dmul>
  13ee2c:	e59d3020 	ldr	r3, [sp, #32]
  13ee30:	e58d001c 	str	r0, [sp, #28]
  13ee34:	e243301c 	sub	r3, r3, #28
  13ee38:	e58d1038 	str	r1, [sp, #56]	; 0x38
  13ee3c:	e58d3020 	str	r3, [sp, #32]
  13ee40:	e58d306c 	str	r3, [sp, #108]	; 0x6c
  13ee44:	e59d3020 	ldr	r3, [sp, #32]
  13ee48:	e59d601c 	ldr	r6, [sp, #28]
  13ee4c:	e3530000 	cmp	r3, #0
  13ee50:	a28d3e1f 	addge	r3, sp, #496	; 0x1f0
  13ee54:	b28d30d0 	addlt	r3, sp, #208	; 0xd0
  13ee58:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13ee5c:	e59db02c 	ldr	fp, [sp, #44]	; 0x2c
  13ee60:	e59d7038 	ldr	r7, [sp, #56]	; 0x38
  13ee64:	e1a01007 	mov	r1, r7
  13ee68:	e1a00006 	mov	r0, r6
  13ee6c:	eb00162d 	bl	144728 <__aeabi_d2uiz>
  13ee70:	e48b0004 	str	r0, [fp], #4
  13ee74:	eb00146b 	bl	144028 <__aeabi_ui2d>
  13ee78:	e1a02000 	mov	r2, r0
  13ee7c:	e1a03001 	mov	r3, r1
  13ee80:	e1a00006 	mov	r0, r6
  13ee84:	e1a01007 	mov	r1, r7
  13ee88:	eb0013ba 	bl	143d78 <__aeabi_dsub>
  13ee8c:	e3a02000 	mov	r2, #0
  13ee90:	e59f314c 	ldr	r3, [pc, #332]	; 13efe4 <printf_core+0x107c>
  13ee94:	eb0014a5 	bl	144130 <__aeabi_dmul>
  13ee98:	e3a02000 	mov	r2, #0
  13ee9c:	e3a03000 	mov	r3, #0
  13eea0:	e1a07001 	mov	r7, r1
  13eea4:	e1a06000 	mov	r6, r0
  13eea8:	eb0015ee 	bl	144668 <__aeabi_dcmpeq>
  13eeac:	e3500000 	cmp	r0, #0
  13eeb0:	0affffeb 	beq	13ee64 <printf_core+0xefc>
  13eeb4:	e59d2020 	ldr	r2, [sp, #32]
  13eeb8:	e1a0300b 	mov	r3, fp
  13eebc:	e3520000 	cmp	r2, #0
  13eec0:	e58db01c 	str	fp, [sp, #28]
  13eec4:	e59db02c 	ldr	fp, [sp, #44]	; 0x2c
  13eec8:	da000067 	ble	13f06c <printf_core+0x1104>
  13eecc:	e58da048 	str	sl, [sp, #72]	; 0x48
  13eed0:	e1a0a003 	mov	sl, r3
  13eed4:	e58d5060 	str	r5, [sp, #96]	; 0x60
  13eed8:	e58d4064 	str	r4, [sp, #100]	; 0x64
  13eedc:	e58d9058 	str	r9, [sp, #88]	; 0x58
  13eee0:	e58d805c 	str	r8, [sp, #92]	; 0x5c
  13eee4:	e28d9050 	add	r9, sp, #80	; 0x50
  13eee8:	e8990300 	ldm	r9, {r8, r9}
  13eeec:	e59d2020 	ldr	r2, [sp, #32]
  13eef0:	e24a3004 	sub	r3, sl, #4
  13eef4:	e352001d 	cmp	r2, #29
  13eef8:	b1a05002 	movlt	r5, r2
  13eefc:	a3a0501d 	movge	r5, #29
  13ef00:	e153000b 	cmp	r3, fp
  13ef04:	e58d3038 	str	r3, [sp, #56]	; 0x38
  13ef08:	3a00001e 	bcc	13ef88 <printf_core+0x1020>
  13ef0c:	e1a04003 	mov	r4, r3
  13ef10:	e2453020 	sub	r3, r5, #32
  13ef14:	e58da040 	str	sl, [sp, #64]	; 0x40
  13ef18:	e3a00000 	mov	r0, #0
  13ef1c:	e1a0a003 	mov	sl, r3
  13ef20:	e2652020 	rsb	r2, r5, #32
  13ef24:	e58d201c 	str	r2, [sp, #28]
  13ef28:	e5941000 	ldr	r1, [r4]
  13ef2c:	e59dc01c 	ldr	ip, [sp, #28]
  13ef30:	e1a09a11 	lsl	r9, r1, sl
  13ef34:	e1a08511 	lsl	r8, r1, r5
  13ef38:	e0986000 	adds	r6, r8, r0
  13ef3c:	e1899c31 	orr	r9, r9, r1, lsr ip
  13ef40:	e2a97000 	adc	r7, r9, #0
  13ef44:	e28f305c 	add	r3, pc, #92	; 0x5c
  13ef48:	e893000c 	ldm	r3, {r2, r3}
  13ef4c:	e1a00006 	mov	r0, r6
  13ef50:	e1a01007 	mov	r1, r7
  13ef54:	eb00163d 	bl	144850 <__aeabi_uldivmod>
  13ef58:	e1a00006 	mov	r0, r6
  13ef5c:	e4042004 	str	r2, [r4], #-4
  13ef60:	e1a01007 	mov	r1, r7
  13ef64:	e28f303c 	add	r3, pc, #60	; 0x3c
  13ef68:	e893000c 	ldm	r3, {r2, r3}
  13ef6c:	eb001637 	bl	144850 <__aeabi_uldivmod>
  13ef70:	e154000b 	cmp	r4, fp
  13ef74:	2affffeb 	bcs	13ef28 <printf_core+0xfc0>
  13ef78:	e3500000 	cmp	r0, #0
  13ef7c:	e59da040 	ldr	sl, [sp, #64]	; 0x40
  13ef80:	150b0004 	strne	r0, [fp, #-4]
  13ef84:	124bb004 	subne	fp, fp, #4
  13ef88:	e15b000a 	cmp	fp, sl
  13ef8c:	2a000028 	bcs	13f034 <printf_core+0x10cc>
  13ef90:	e51a3004 	ldr	r3, [sl, #-4]
  13ef94:	e3530000 	cmp	r3, #0
  13ef98:	059d3038 	ldreq	r3, [sp, #56]	; 0x38
  13ef9c:	0a000021 	beq	13f028 <printf_core+0x10c0>
  13efa0:	ea000023 	b	13f034 <printf_core+0x10cc>
  13efa4:	e1a00000 	nop			; (mov r0, r0)
  13efa8:	3b9aca00 	.word	0x3b9aca00
  13efac:	00000000 	.word	0x00000000
  13efb0:	00012889 	.word	0x00012889
  13efb4:	0ccccccc 	.word	0x0ccccccc
  13efb8:	0014c27c 	.word	0x0014c27c
  13efbc:	0014c2b8 	.word	0x0014c2b8
  13efc0:	0014c290 	.word	0x0014c290
  13efc4:	7fefffff 	.word	0x7fefffff
  13efc8:	0014c2a8 	.word	0x0014c2a8
  13efcc:	0014c2a4 	.word	0x0014c2a4
  13efd0:	0014c2b0 	.word	0x0014c2b0
  13efd4:	0014c2ac 	.word	0x0014c2ac
  13efd8:	0014c288 	.word	0x0014c288
  13efdc:	0014c291 	.word	0x0014c291
  13efe0:	41b00000 	.word	0x41b00000
  13efe4:	41cdcd65 	.word	0x41cdcd65
  13efe8:	38e38e39 	.word	0x38e38e39
  13efec:	3b9aca00 	.word	0x3b9aca00
  13eff0:	0014c27d 	.word	0x0014c27d
  13eff4:	0014c293 	.word	0x0014c293
  13eff8:	0014c488 	.word	0x0014c488
  13effc:	cccccccd 	.word	0xcccccccd
  13f000:	0014c2b4 	.word	0x0014c2b4
  13f004:	3b9ac9ff 	.word	0x3b9ac9ff
  13f008:	40300000 	.word	0x40300000
  13f00c:	3fe00000 	.word	0x3fe00000
  13f010:	43400000 	.word	0x43400000
  13f014:	3ff00000 	.word	0x3ff00000
  13f018:	3ff80000 	.word	0x3ff80000
  13f01c:	e5332004 	ldr	r2, [r3, #-4]!
  13f020:	e3520000 	cmp	r2, #0
  13f024:	1a000002 	bne	13f034 <printf_core+0x10cc>
  13f028:	e153000b 	cmp	r3, fp
  13f02c:	e1a0a003 	mov	sl, r3
  13f030:	8afffff9 	bhi	13f01c <printf_core+0x10b4>
  13f034:	e59d3020 	ldr	r3, [sp, #32]
  13f038:	e0433005 	sub	r3, r3, r5
  13f03c:	e3530000 	cmp	r3, #0
  13f040:	e58d3020 	str	r3, [sp, #32]
  13f044:	caffffa8 	bgt	13eeec <printf_core+0xf84>
  13f048:	e58d8050 	str	r8, [sp, #80]	; 0x50
  13f04c:	e58d9054 	str	r9, [sp, #84]	; 0x54
  13f050:	e58da01c 	str	sl, [sp, #28]
  13f054:	e59d5060 	ldr	r5, [sp, #96]	; 0x60
  13f058:	e59da048 	ldr	sl, [sp, #72]	; 0x48
  13f05c:	e59d4064 	ldr	r4, [sp, #100]	; 0x64
  13f060:	e59d805c 	ldr	r8, [sp, #92]	; 0x5c
  13f064:	e59d9058 	ldr	r9, [sp, #88]	; 0x58
  13f068:	e58d306c 	str	r3, [sp, #108]	; 0x6c
  13f06c:	e59dc020 	ldr	ip, [sp, #32]
  13f070:	e35c0000 	cmp	ip, #0
  13f074:	0a000037 	beq	13f158 <printf_core+0x11f0>
  13f078:	e58da038 	str	sl, [sp, #56]	; 0x38
  13f07c:	e1a0a00c 	mov	sl, ip
  13f080:	e51f10a0 	ldr	r1, [pc, #-160]	; 13efe8 <printf_core+0x1080>
  13f084:	e2850019 	add	r0, r5, #25
  13f088:	e0832190 	umull	r2, r3, r0, r1
  13f08c:	e1a030a3 	lsr	r3, r3, #1
  13f090:	e2836001 	add	r6, r3, #1
  13f094:	e1a03106 	lsl	r3, r6, #2
  13f098:	e51f70b4 	ldr	r7, [pc, #-180]	; 13efec <printf_core+0x1084>
  13f09c:	e59d001c 	ldr	r0, [sp, #28]
  13f0a0:	e58d3020 	str	r3, [sp, #32]
  13f0a4:	e58d9040 	str	r9, [sp, #64]	; 0x40
  13f0a8:	e37a0009 	cmn	sl, #9
  13f0ac:	a26ac000 	rsbge	ip, sl, #0
  13f0b0:	b28aa009 	addlt	sl, sl, #9
  13f0b4:	b3a0c009 	movlt	ip, #9
  13f0b8:	a3a0a000 	movge	sl, #0
  13f0bc:	e150000b 	cmp	r0, fp
  13f0c0:	e59b1000 	ldr	r1, [fp]
  13f0c4:	9a000191 	bls	13f710 <printf_core+0x17a8>
  13f0c8:	e3a0e001 	mov	lr, #1
  13f0cc:	e1a0ec1e 	lsl	lr, lr, ip
  13f0d0:	e1a0200b 	mov	r2, fp
  13f0d4:	e3a03000 	mov	r3, #0
  13f0d8:	e24ee001 	sub	lr, lr, #1
  13f0dc:	e1a09c57 	asr	r9, r7, ip
  13f0e0:	ea000000 	b	13f0e8 <printf_core+0x1180>
  13f0e4:	e5921000 	ldr	r1, [r2]
  13f0e8:	e0833c31 	add	r3, r3, r1, lsr ip
  13f0ec:	e4823004 	str	r3, [r2], #4
  13f0f0:	e00e3001 	and	r3, lr, r1
  13f0f4:	e0010399 	mul	r1, r9, r3
  13f0f8:	e1520000 	cmp	r2, r0
  13f0fc:	e1a03001 	mov	r3, r1
  13f100:	3afffff7 	bcc	13f0e4 <printf_core+0x117c>
  13f104:	e59b2000 	ldr	r2, [fp]
  13f108:	e3520000 	cmp	r2, #0
  13f10c:	028bb004 	addeq	fp, fp, #4
  13f110:	e3510000 	cmp	r1, #0
  13f114:	15801000 	strne	r1, [r0]
  13f118:	12800004 	addne	r0, r0, #4
  13f11c:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
  13f120:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  13f124:	e3520066 	cmp	r2, #102	; 0x66
  13f128:	11a0300b 	movne	r3, fp
  13f12c:	e0402003 	sub	r2, r0, r3
  13f130:	e1560142 	cmp	r6, r2, asr #2
  13f134:	b59d2020 	ldrlt	r2, [sp, #32]
  13f138:	b0830002 	addlt	r0, r3, r2
  13f13c:	e35a0000 	cmp	sl, #0
  13f140:	1affffd8 	bne	13f0a8 <printf_core+0x1140>
  13f144:	e1a0300a 	mov	r3, sl
  13f148:	e59d9040 	ldr	r9, [sp, #64]	; 0x40
  13f14c:	e59da038 	ldr	sl, [sp, #56]	; 0x38
  13f150:	e58d001c 	str	r0, [sp, #28]
  13f154:	e58d306c 	str	r3, [sp, #108]	; 0x6c
  13f158:	e59d301c 	ldr	r3, [sp, #28]
  13f15c:	e153000b 	cmp	r3, fp
  13f160:	91a03005 	movls	r3, r5
  13f164:	93a06000 	movls	r6, #0
  13f168:	9a000013 	bls	13f1bc <printf_core+0x1254>
  13f16c:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  13f170:	e59b1000 	ldr	r1, [fp]
  13f174:	e043600b 	sub	r6, r3, fp
  13f178:	e59d303c 	ldr	r3, [sp, #60]	; 0x3c
  13f17c:	e1a06146 	asr	r6, r6, #2
  13f180:	e2530066 	subs	r0, r3, #102	; 0x66
  13f184:	13a00001 	movne	r0, #1
  13f188:	e3510009 	cmp	r1, #9
  13f18c:	e0866186 	add	r6, r6, r6, lsl #3
  13f190:	83a0200a 	movhi	r2, #10
  13f194:	81a03000 	movhi	r3, r0
  13f198:	9a000005 	bls	13f1b4 <printf_core+0x124c>
  13f19c:	e0822102 	add	r2, r2, r2, lsl #2
  13f1a0:	e1a02082 	lsl	r2, r2, #1
  13f1a4:	e1510002 	cmp	r1, r2
  13f1a8:	e2866001 	add	r6, r6, #1
  13f1ac:	2afffffa 	bcs	13f19c <printf_core+0x1234>
  13f1b0:	e1a00003 	mov	r0, r3
  13f1b4:	e0030096 	mul	r3, r6, r0
  13f1b8:	e0453003 	sub	r3, r5, r3
  13f1bc:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
  13f1c0:	e59d1044 	ldr	r1, [sp, #68]	; 0x44
  13f1c4:	e59dc02c 	ldr	ip, [sp, #44]	; 0x2c
  13f1c8:	e3520067 	cmp	r2, #103	; 0x67
  13f1cc:	13a01000 	movne	r1, #0
  13f1d0:	02011001 	andeq	r1, r1, #1
  13f1d4:	e59d201c 	ldr	r2, [sp, #28]
  13f1d8:	e0433001 	sub	r3, r3, r1
  13f1dc:	e042200c 	sub	r2, r2, ip
  13f1e0:	e1a02142 	asr	r2, r2, #2
  13f1e4:	e2422001 	sub	r2, r2, #1
  13f1e8:	e0822182 	add	r2, r2, r2, lsl #3
  13f1ec:	e1530002 	cmp	r3, r2
  13f1f0:	aa000057 	bge	13f354 <printf_core+0x13ec>
  13f1f4:	e51f2214 	ldr	r2, [pc, #-532]	; 13efe8 <printf_core+0x1080>
  13f1f8:	e2833b09 	add	r3, r3, #9216	; 0x2400
  13f1fc:	e0c10293 	smull	r0, r1, r3, r2
  13f200:	e1a07fc3 	asr	r7, r3, #31
  13f204:	e06770c1 	rsb	r7, r7, r1, asr #1
  13f208:	e0872187 	add	r2, r7, r7, lsl #3
  13f20c:	e0433002 	sub	r3, r3, r2
  13f210:	e2833001 	add	r3, r3, #1
  13f214:	e2477fff 	sub	r7, r7, #1020	; 0x3fc
  13f218:	e247710f 	sub	r7, r7, #-1073741821	; 0xc0000003
  13f21c:	e3530009 	cmp	r3, #9
  13f220:	e08c7107 	add	r7, ip, r7, lsl #2
  13f224:	0a00036b 	beq	13ffd8 <printf_core+0x2070>
  13f228:	e3a0200a 	mov	r2, #10
  13f22c:	e2833001 	add	r3, r3, #1
  13f230:	e0822102 	add	r2, r2, r2, lsl #2
  13f234:	e3530009 	cmp	r3, #9
  13f238:	e1a02082 	lsl	r2, r2, #1
  13f23c:	1afffffa 	bne	13f22c <printf_core+0x12c4>
  13f240:	e58d2038 	str	r2, [sp, #56]	; 0x38
  13f244:	e5973000 	ldr	r3, [r7]
  13f248:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
  13f24c:	e1a00003 	mov	r0, r3
  13f250:	e58d3048 	str	r3, [sp, #72]	; 0x48
  13f254:	ebffe3a0 	bl	1380dc <__aeabi_uidivmod>
  13f258:	e2513000 	subs	r3, r1, #0
  13f25c:	e58d3044 	str	r3, [sp, #68]	; 0x44
  13f260:	1a000003 	bne	13f274 <printf_core+0x130c>
  13f264:	e59d301c 	ldr	r3, [sp, #28]
  13f268:	e287c004 	add	ip, r7, #4
  13f26c:	e153000c 	cmp	r3, ip
  13f270:	0a000033 	beq	13f344 <printf_core+0x13dc>
  13f274:	e3100001 	tst	r0, #1
  13f278:	1a000336 	bne	13ff58 <printf_core+0x1ff0>
  13f27c:	e51f3298 	ldr	r3, [pc, #-664]	; 13efec <printf_core+0x1084>
  13f280:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
  13f284:	e157000b 	cmp	r7, fp
  13f288:	e0422003 	sub	r2, r2, r3
  13f28c:	e16f2f12 	clz	r2, r2
  13f290:	e1a022a2 	lsr	r2, r2, #5
  13f294:	93a02000 	movls	r2, #0
  13f298:	e3520000 	cmp	r2, #0
  13f29c:	0a000329 	beq	13ff48 <printf_core+0x1fe0>
  13f2a0:	e5173004 	ldr	r3, [r7, #-4]
  13f2a4:	e51f229c 	ldr	r2, [pc, #-668]	; 13f010 <printf_core+0x10a8>
  13f2a8:	e2033001 	and	r3, r3, #1
  13f2ac:	e58d2020 	str	r2, [sp, #32]
  13f2b0:	e58d3040 	str	r3, [sp, #64]	; 0x40
  13f2b4:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
  13f2b8:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
  13f2bc:	e15300c2 	cmp	r3, r2, asr #1
  13f2c0:	3a00031d 	bcc	13ff3c <printf_core+0x1fd4>
  13f2c4:	13a0e000 	movne	lr, #0
  13f2c8:	151fc2b8 	ldrne	ip, [pc, #-696]	; 13f018 <printf_core+0x10b0>
  13f2cc:	0a00032a 	beq	13ff7c <printf_core+0x2014>
  13f2d0:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
  13f2d4:	e3530000 	cmp	r3, #0
  13f2d8:	0a000006 	beq	13f2f8 <printf_core+0x1390>
  13f2dc:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
  13f2e0:	e5d33000 	ldrb	r3, [r3]
  13f2e4:	e353002d 	cmp	r3, #45	; 0x2d
  13f2e8:	059d3020 	ldreq	r3, [sp, #32]
  13f2ec:	028cc102 	addeq	ip, ip, #-2147483648	; 0x80000000
  13f2f0:	02833102 	addeq	r3, r3, #-2147483648	; 0x80000000
  13f2f4:	058d3020 	streq	r3, [sp, #32]
  13f2f8:	e1a0200e 	mov	r2, lr
  13f2fc:	e1a0300c 	mov	r3, ip
  13f300:	e59de044 	ldr	lr, [sp, #68]	; 0x44
  13f304:	e59dc048 	ldr	ip, [sp, #72]	; 0x48
  13f308:	e59d0040 	ldr	r0, [sp, #64]	; 0x40
  13f30c:	e04cc00e 	sub	ip, ip, lr
  13f310:	e59d1020 	ldr	r1, [sp, #32]
  13f314:	e58dc044 	str	ip, [sp, #68]	; 0x44
  13f318:	eb001297 	bl	143d7c <__adddf3>
  13f31c:	e1a02000 	mov	r2, r0
  13f320:	e1a03001 	mov	r3, r1
  13f324:	e59d0040 	ldr	r0, [sp, #64]	; 0x40
  13f328:	e59d1020 	ldr	r1, [sp, #32]
  13f32c:	eb0014cd 	bl	144668 <__aeabi_dcmpeq>
  13f330:	e2502000 	subs	r2, r0, #0
  13f334:	0a0002ab 	beq	13fde8 <printf_core+0x1e80>
  13f338:	e1a0c007 	mov	ip, r7
  13f33c:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
  13f340:	e48c3004 	str	r3, [ip], #4
  13f344:	e59d301c 	ldr	r3, [sp, #28]
  13f348:	e153000c 	cmp	r3, ip
  13f34c:	21a0300c 	movcs	r3, ip
  13f350:	e58d301c 	str	r3, [sp, #28]
  13f354:	e59d301c 	ldr	r3, [sp, #28]
  13f358:	e15b0003 	cmp	fp, r3
  13f35c:	2a00000c 	bcs	13f394 <printf_core+0x142c>
  13f360:	e5133004 	ldr	r3, [r3, #-4]
  13f364:	e3530000 	cmp	r3, #0
  13f368:	059d301c 	ldreq	r3, [sp, #28]
  13f36c:	02433004 	subeq	r3, r3, #4
  13f370:	0a000003 	beq	13f384 <printf_core+0x141c>
  13f374:	ea000006 	b	13f394 <printf_core+0x142c>
  13f378:	e5332004 	ldr	r2, [r3, #-4]!
  13f37c:	e3520000 	cmp	r2, #0
  13f380:	1a000002 	bne	13f390 <printf_core+0x1428>
  13f384:	e153000b 	cmp	r3, fp
  13f388:	e1a01003 	mov	r1, r3
  13f38c:	8afffff9 	bhi	13f378 <printf_core+0x1410>
  13f390:	e58d101c 	str	r1, [sp, #28]
  13f394:	e59d303c 	ldr	r3, [sp, #60]	; 0x3c
  13f398:	e3530067 	cmp	r3, #103	; 0x67
  13f39c:	0a000192 	beq	13f9ec <printf_core+0x1a84>
  13f3a0:	e3550000 	cmp	r5, #0
  13f3a4:	1a00018b 	bne	13f9d8 <printf_core+0x1a70>
  13f3a8:	e3a02001 	mov	r2, #1
  13f3ac:	e1a031a8 	lsr	r3, r8, #3
  13f3b0:	e0033002 	and	r3, r3, r2
  13f3b4:	e3e0e102 	mvn	lr, #-2147483648	; 0x80000000
  13f3b8:	e59d1010 	ldr	r1, [sp, #16]
  13f3bc:	e0833002 	add	r3, r3, r2
  13f3c0:	e381a020 	orr	sl, r1, #32
  13f3c4:	e35a0066 	cmp	sl, #102	; 0x66
  13f3c8:	e04ee003 	sub	lr, lr, r3
  13f3cc:	0a000280 	beq	13fdd4 <printf_core+0x1e6c>
  13f3d0:	e026cfc6 	eor	ip, r6, r6, asr #31
  13f3d4:	e28d7090 	add	r7, sp, #144	; 0x90
  13f3d8:	e3560000 	cmp	r6, #0
  13f3dc:	e04ccfc6 	sub	ip, ip, r6, asr #31
  13f3e0:	e1a02007 	mov	r2, r7
  13f3e4:	0a00000a 	beq	13f414 <printf_core+0x14ac>
  13f3e8:	e58d3020 	str	r3, [sp, #32]
  13f3ec:	e51f33f8 	ldr	r3, [pc, #-1016]	; 13effc <printf_core+0x1094>
  13f3f0:	e081039c 	umull	r0, r1, ip, r3
  13f3f4:	e1a001a1 	lsr	r0, r1, #3
  13f3f8:	e0801100 	add	r1, r0, r0, lsl #2
  13f3fc:	e04c1081 	sub	r1, ip, r1, lsl #1
  13f400:	e2811030 	add	r1, r1, #48	; 0x30
  13f404:	e250c000 	subs	ip, r0, #0
  13f408:	e5621001 	strb	r1, [r2, #-1]!
  13f40c:	1afffff6 	bne	13f3ec <printf_core+0x1484>
  13f410:	e59d3020 	ldr	r3, [sp, #32]
  13f414:	e0471002 	sub	r1, r7, r2
  13f418:	e3510001 	cmp	r1, #1
  13f41c:	ca000004 	bgt	13f434 <printf_core+0x14cc>
  13f420:	e3a01030 	mov	r1, #48	; 0x30
  13f424:	e5621001 	strb	r1, [r2, #-1]!
  13f428:	e0470002 	sub	r0, r7, r2
  13f42c:	e3500001 	cmp	r0, #1
  13f430:	dafffffb 	ble	13f424 <printf_core+0x14bc>
  13f434:	e3560000 	cmp	r6, #0
  13f438:	a3a0102b 	movge	r1, #43	; 0x2b
  13f43c:	b3a0102d 	movlt	r1, #45	; 0x2d
  13f440:	e2420002 	sub	r0, r2, #2
  13f444:	e0477000 	sub	r7, r7, r0
  13f448:	e58d004c 	str	r0, [sp, #76]	; 0x4c
  13f44c:	e59d0010 	ldr	r0, [sp, #16]
  13f450:	e157000e 	cmp	r7, lr
  13f454:	e5420002 	strb	r0, [r2, #-2]
  13f458:	e5421001 	strb	r1, [r2, #-1]
  13f45c:	cafffc6e 	bgt	13e61c <printf_core+0x6b4>
  13f460:	e0833007 	add	r3, r3, r7
  13f464:	e3e02102 	mvn	r2, #-2147483648	; 0x80000000
  13f468:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
  13f46c:	e0422001 	sub	r2, r2, r1
  13f470:	e1520003 	cmp	r2, r3
  13f474:	bafffc68 	blt	13e61c <printf_core+0x6b4>
  13f478:	e0813003 	add	r3, r1, r3
  13f47c:	e1590003 	cmp	r9, r3
  13f480:	e58d3010 	str	r3, [sp, #16]
  13f484:	c3a03000 	movgt	r3, #0
  13f488:	d3a03001 	movle	r3, #1
  13f48c:	e3180a12 	tst	r8, #73728	; 0x12000
  13f490:	e58d3020 	str	r3, [sp, #32]
  13f494:	13a03001 	movne	r3, #1
  13f498:	e3530000 	cmp	r3, #0
  13f49c:	0a000246 	beq	13fdbc <printf_core+0x1e54>
  13f4a0:	e59d3004 	ldr	r3, [sp, #4]
  13f4a4:	e5933000 	ldr	r3, [r3]
  13f4a8:	e3130020 	tst	r3, #32
  13f4ac:	0a00023d 	beq	13fda8 <printf_core+0x1e40>
  13f4b0:	e2283801 	eor	r3, r8, #65536	; 0x10000
  13f4b4:	e3130a12 	tst	r3, #73728	; 0x12000
  13f4b8:	e59d3020 	ldr	r3, [sp, #32]
  13f4bc:	13a03001 	movne	r3, #1
  13f4c0:	e3530000 	cmp	r3, #0
  13f4c4:	0a000231 	beq	13fd90 <printf_core+0x1e28>
  13f4c8:	e35a0066 	cmp	sl, #102	; 0x66
  13f4cc:	0a00018f 	beq	13fb10 <printf_core+0x1ba8>
  13f4d0:	e59d301c 	ldr	r3, [sp, #28]
  13f4d4:	e15b0003 	cmp	fp, r3
  13f4d8:	228b3004 	addcs	r3, fp, #4
  13f4dc:	258d301c 	strcs	r3, [sp, #28]
  13f4e0:	e59d301c 	ldr	r3, [sp, #28]
  13f4e4:	e15b0003 	cmp	fp, r3
  13f4e8:	23a03000 	movcs	r3, #0
  13f4ec:	33a03001 	movcc	r3, #1
  13f4f0:	e3550000 	cmp	r5, #0
  13f4f4:	b3a03000 	movlt	r3, #0
  13f4f8:	e3530000 	cmp	r3, #0
  13f4fc:	0a000036 	beq	13f5dc <printf_core+0x1674>
  13f500:	e1a0600b 	mov	r6, fp
  13f504:	e28d7090 	add	r7, sp, #144	; 0x90
  13f508:	e58d9030 	str	r9, [sp, #48]	; 0x30
  13f50c:	e59d9004 	ldr	r9, [sp, #4]
  13f510:	e287a009 	add	sl, r7, #9
  13f514:	e58d802c 	str	r8, [sp, #44]	; 0x2c
  13f518:	e58d4034 	str	r4, [sp, #52]	; 0x34
  13f51c:	e5962000 	ldr	r2, [r6]
  13f520:	e599e000 	ldr	lr, [r9]
  13f524:	e3520000 	cmp	r2, #0
  13f528:	1287c009 	addne	ip, r7, #9
  13f52c:	0a000046 	beq	13f64c <printf_core+0x16e4>
  13f530:	e51f353c 	ldr	r3, [pc, #-1340]	; 13effc <printf_core+0x1094>
  13f534:	e0810392 	umull	r0, r1, r2, r3
  13f538:	e1a031a1 	lsr	r3, r1, #3
  13f53c:	e0831103 	add	r1, r3, r3, lsl #2
  13f540:	e0422081 	sub	r2, r2, r1, lsl #1
  13f544:	e2821030 	add	r1, r2, #48	; 0x30
  13f548:	e2532000 	subs	r2, r3, #0
  13f54c:	e56c1001 	strb	r1, [ip, #-1]!
  13f550:	1afffff6 	bne	13f530 <printf_core+0x15c8>
  13f554:	e2872009 	add	r2, r7, #9
  13f558:	e15c0002 	cmp	ip, r2
  13f55c:	0a00003a 	beq	13f64c <printf_core+0x16e4>
  13f560:	e15b0006 	cmp	fp, r6
  13f564:	e20ee020 	and	lr, lr, #32
  13f568:	0a00003d 	beq	13f664 <printf_core+0x16fc>
  13f56c:	e15c0007 	cmp	ip, r7
  13f570:	9a000003 	bls	13f584 <printf_core+0x161c>
  13f574:	e3a02030 	mov	r2, #48	; 0x30
  13f578:	e56c2001 	strb	r2, [ip, #-1]!
  13f57c:	e15c0007 	cmp	ip, r7
  13f580:	8afffffc 	bhi	13f578 <printf_core+0x1610>
  13f584:	e04a400c 	sub	r4, sl, ip
  13f588:	e35e0000 	cmp	lr, #0
  13f58c:	1a000005 	bne	13f5a8 <printf_core+0x1640>
  13f590:	e1550004 	cmp	r5, r4
  13f594:	e1a0000c 	mov	r0, ip
  13f598:	b1a01005 	movlt	r1, r5
  13f59c:	a1a01004 	movge	r1, r4
  13f5a0:	e1a02009 	mov	r2, r9
  13f5a4:	eb000f2d 	bl	143260 <__fwritex>
  13f5a8:	e59d201c 	ldr	r2, [sp, #28]
  13f5ac:	e2866004 	add	r6, r6, #4
  13f5b0:	e1560002 	cmp	r6, r2
  13f5b4:	e0455004 	sub	r5, r5, r4
  13f5b8:	23a02000 	movcs	r2, #0
  13f5bc:	33a02001 	movcc	r2, #1
  13f5c0:	e3550000 	cmp	r5, #0
  13f5c4:	b3a02000 	movlt	r2, #0
  13f5c8:	e3520000 	cmp	r2, #0
  13f5cc:	1affffd2 	bne	13f51c <printf_core+0x15b4>
  13f5d0:	e59d9030 	ldr	r9, [sp, #48]	; 0x30
  13f5d4:	e59d802c 	ldr	r8, [sp, #44]	; 0x2c
  13f5d8:	e59d4034 	ldr	r4, [sp, #52]	; 0x34
  13f5dc:	e2852012 	add	r2, r5, #18
  13f5e0:	e3520012 	cmp	r2, #18
  13f5e4:	da000003 	ble	13f5f8 <printf_core+0x1690>
  13f5e8:	e3a03012 	mov	r3, #18
  13f5ec:	e3a01030 	mov	r1, #48	; 0x30
  13f5f0:	e59d0004 	ldr	r0, [sp, #4]
  13f5f4:	ebfffa30 	bl	13debc <pad.part.0>
  13f5f8:	e59d3004 	ldr	r3, [sp, #4]
  13f5fc:	e5933000 	ldr	r3, [r3]
  13f600:	e3130020 	tst	r3, #32
  13f604:	1a000005 	bne	13f620 <printf_core+0x16b8>
  13f608:	e59d304c 	ldr	r3, [sp, #76]	; 0x4c
  13f60c:	e28d7090 	add	r7, sp, #144	; 0x90
  13f610:	e0471003 	sub	r1, r7, r3
  13f614:	e59d2004 	ldr	r2, [sp, #4]
  13f618:	e1a00003 	mov	r0, r3
  13f61c:	eb000f0f 	bl	143260 <__fwritex>
  13f620:	e2283a02 	eor	r3, r8, #8192	; 0x2000
  13f624:	e3130a12 	tst	r3, #73728	; 0x12000
  13f628:	e59d3020 	ldr	r3, [sp, #32]
  13f62c:	13a03001 	movne	r3, #1
  13f630:	e3530000 	cmp	r3, #0
  13f634:	0a00023a 	beq	13ff24 <printf_core+0x1fbc>
  13f638:	e59d3010 	ldr	r3, [sp, #16]
  13f63c:	e1590003 	cmp	r9, r3
  13f640:	a1a0a009 	movge	sl, r9
  13f644:	b1a0a003 	movlt	sl, r3
  13f648:	eafffbf0 	b	13e610 <printf_core+0x6a8>
  13f64c:	e3a02030 	mov	r2, #48	; 0x30
  13f650:	e15b0006 	cmp	fp, r6
  13f654:	e28dc098 	add	ip, sp, #152	; 0x98
  13f658:	e20ee020 	and	lr, lr, #32
  13f65c:	e5cd2098 	strb	r2, [sp, #152]	; 0x98
  13f660:	1affffc3 	bne	13f574 <printf_core+0x160c>
  13f664:	e35e0000 	cmp	lr, #0
  13f668:	e28c8001 	add	r8, ip, #1
  13f66c:	0a00002a 	beq	13f71c <printf_core+0x17b4>
  13f670:	e3550000 	cmp	r5, #0
  13f674:	e04a4008 	sub	r4, sl, r8
  13f678:	1affffca 	bne	13f5a8 <printf_core+0x1640>
  13f67c:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  13f680:	e3130008 	tst	r3, #8
  13f684:	1a00002d 	bne	13f740 <printf_core+0x17d8>
  13f688:	e1a0c008 	mov	ip, r8
  13f68c:	eaffffbd 	b	13f588 <printf_core+0x1620>
  13f690:	e1a0300b 	mov	r3, fp
  13f694:	e1a02009 	mov	r2, r9
  13f698:	e3a01020 	mov	r1, #32
  13f69c:	e59d0004 	ldr	r0, [sp, #4]
  13f6a0:	ebfffa05 	bl	13debc <pad.part.0>
  13f6a4:	eafffd7b 	b	13ec98 <printf_core+0xd30>
  13f6a8:	e3a03001 	mov	r3, #1
  13f6ac:	e58d3020 	str	r3, [sp, #32]
  13f6b0:	e51f36c8 	ldr	r3, [pc, #-1736]	; 13eff0 <printf_core+0x1088>
  13f6b4:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13f6b8:	eafffc20 	b	13e740 <printf_core+0x7d8>
  13f6bc:	e3a03000 	mov	r3, #0
  13f6c0:	e58d3000 	str	r3, [sp]
  13f6c4:	eafffb44 	b	13e3dc <printf_core+0x474>
  13f6c8:	e59d5004 	ldr	r5, [sp, #4]
  13f6cc:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
  13f6d0:	e1a02005 	mov	r2, r5
  13f6d4:	e59d0034 	ldr	r0, [sp, #52]	; 0x34
  13f6d8:	eb000ee0 	bl	143260 <__fwritex>
  13f6dc:	e5953000 	ldr	r3, [r5]
  13f6e0:	e1a02005 	mov	r2, r5
  13f6e4:	e3130020 	tst	r3, #32
  13f6e8:	1afffcc9 	bne	13ea14 <printf_core+0xaac>
  13f6ec:	e1a00006 	mov	r0, r6
  13f6f0:	e3a01003 	mov	r1, #3
  13f6f4:	eb000ed9 	bl	143260 <__fwritex>
  13f6f8:	eafffcc5 	b	13ea14 <printf_core+0xaac>
  13f6fc:	e3a03001 	mov	r3, #1
  13f700:	e58d3030 	str	r3, [sp, #48]	; 0x30
  13f704:	e51f3718 	ldr	r3, [pc, #-1816]	; 13eff4 <printf_core+0x108c>
  13f708:	e58d3034 	str	r3, [sp, #52]	; 0x34
  13f70c:	eafffc9a 	b	13e97c <printf_core+0xa14>
  13f710:	e3510000 	cmp	r1, #0
  13f714:	028bb004 	addeq	fp, fp, #4
  13f718:	eafffe7f 	b	13f11c <printf_core+0x11b4>
  13f71c:	e1a0000c 	mov	r0, ip
  13f720:	e1a02009 	mov	r2, r9
  13f724:	e3a01001 	mov	r1, #1
  13f728:	eb000ecc 	bl	143260 <__fwritex>
  13f72c:	e599e000 	ldr	lr, [r9]
  13f730:	e3550000 	cmp	r5, #0
  13f734:	e20ee020 	and	lr, lr, #32
  13f738:	e04a4008 	sub	r4, sl, r8
  13f73c:	0affffce 	beq	13f67c <printf_core+0x1714>
  13f740:	e35e0000 	cmp	lr, #0
  13f744:	1affff97 	bne	13f5a8 <printf_core+0x1640>
  13f748:	e1a02009 	mov	r2, r9
  13f74c:	e3a01001 	mov	r1, #1
  13f750:	e51f0758 	ldr	r0, [pc, #-1880]	; 13f000 <printf_core+0x1098>
  13f754:	eb000ec1 	bl	143260 <__fwritex>
  13f758:	e599e000 	ldr	lr, [r9]
  13f75c:	e1a0c008 	mov	ip, r8
  13f760:	e20ee020 	and	lr, lr, #32
  13f764:	eaffff87 	b	13f588 <printf_core+0x1620>
  13f768:	e1a0300a 	mov	r3, sl
  13f76c:	e1a02009 	mov	r2, r9
  13f770:	e3a01020 	mov	r1, #32
  13f774:	e59d0004 	ldr	r0, [sp, #4]
  13f778:	ebfff9cf 	bl	13debc <pad.part.0>
  13f77c:	eafffca9 	b	13ea28 <printf_core+0xac0>
  13f780:	e59d3010 	ldr	r3, [sp, #16]
  13f784:	e213b020 	ands	fp, r3, #32
  13f788:	159d3034 	ldrne	r3, [sp, #52]	; 0x34
  13f78c:	12833009 	addne	r3, r3, #9
  13f790:	158d3034 	strne	r3, [sp, #52]	; 0x34
  13f794:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
  13f798:	e355000b 	cmp	r5, #11
  13f79c:	e2833002 	add	r3, r3, #2
  13f7a0:	e58d3030 	str	r3, [sp, #48]	; 0x30
  13f7a4:	9a0001b8 	bls	13fe8c <printf_core+0x1f24>
  13f7a8:	e59d2020 	ldr	r2, [sp, #32]
  13f7ac:	e28d7090 	add	r7, sp, #144	; 0x90
  13f7b0:	e3520000 	cmp	r2, #0
  13f7b4:	e1a03002 	mov	r3, r2
  13f7b8:	b2623000 	rsblt	r3, r2, #0
  13f7bc:	e3520000 	cmp	r2, #0
  13f7c0:	11a0c007 	movne	ip, r7
  13f7c4:	0a0001ac 	beq	13fe7c <printf_core+0x1f14>
  13f7c8:	e51f27d4 	ldr	r2, [pc, #-2004]	; 13effc <printf_core+0x1094>
  13f7cc:	e0810293 	umull	r0, r1, r3, r2
  13f7d0:	e1a021a1 	lsr	r2, r1, #3
  13f7d4:	e0821102 	add	r1, r2, r2, lsl #2
  13f7d8:	e0433081 	sub	r3, r3, r1, lsl #1
  13f7dc:	e2831030 	add	r1, r3, #48	; 0x30
  13f7e0:	e2523000 	subs	r3, r2, #0
  13f7e4:	e56c1001 	strb	r1, [ip, #-1]!
  13f7e8:	1afffff6 	bne	13f7c8 <printf_core+0x1860>
  13f7ec:	e15c0007 	cmp	ip, r7
  13f7f0:	0a0001a1 	beq	13fe7c <printf_core+0x1f14>
  13f7f4:	e59d3020 	ldr	r3, [sp, #32]
  13f7f8:	e59d2010 	ldr	r2, [sp, #16]
  13f7fc:	e3530000 	cmp	r3, #0
  13f800:	a3a0302b 	movge	r3, #43	; 0x2b
  13f804:	b3a0302d 	movlt	r3, #45	; 0x2d
  13f808:	e54c3001 	strb	r3, [ip, #-1]
  13f80c:	e24c3002 	sub	r3, ip, #2
  13f810:	e282200f 	add	r2, r2, #15
  13f814:	e58d3010 	str	r3, [sp, #16]
  13f818:	e2083008 	and	r3, r8, #8
  13f81c:	e58db020 	str	fp, [sp, #32]
  13f820:	e58d8040 	str	r8, [sp, #64]	; 0x40
  13f824:	e58d4044 	str	r4, [sp, #68]	; 0x44
  13f828:	e1a0b007 	mov	fp, r7
  13f82c:	e51f683c 	ldr	r6, [pc, #-2108]	; 13eff8 <printf_core+0x1090>
  13f830:	e54c2002 	strb	r2, [ip, #-2]
  13f834:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13f838:	e58da03c 	str	sl, [sp, #60]	; 0x3c
  13f83c:	e59d401c 	ldr	r4, [sp, #28]
  13f840:	e59d8038 	ldr	r8, [sp, #56]	; 0x38
  13f844:	ea000007 	b	13f868 <printf_core+0x1900>
  13f848:	e1a0b00a 	mov	fp, sl
  13f84c:	e1a00004 	mov	r0, r4
  13f850:	e1a01008 	mov	r1, r8
  13f854:	e3a02000 	mov	r2, #0
  13f858:	e3a03000 	mov	r3, #0
  13f85c:	eb001381 	bl	144668 <__aeabi_dcmpeq>
  13f860:	e3500000 	cmp	r0, #0
  13f864:	1a000026 	bne	13f904 <printf_core+0x199c>
  13f868:	e1a01008 	mov	r1, r8
  13f86c:	e1a00004 	mov	r0, r4
  13f870:	eb001395 	bl	1446cc <__aeabi_d2iz>
  13f874:	e59d2020 	ldr	r2, [sp, #32]
  13f878:	e7d63000 	ldrb	r3, [r6, r0]
  13f87c:	e28ba001 	add	sl, fp, #1
  13f880:	e1823003 	orr	r3, r2, r3
  13f884:	e5cb3000 	strb	r3, [fp]
  13f888:	eb0011ef 	bl	14404c <__aeabi_i2d>
  13f88c:	e1a02000 	mov	r2, r0
  13f890:	e1a03001 	mov	r3, r1
  13f894:	e1a00004 	mov	r0, r4
  13f898:	e1a01008 	mov	r1, r8
  13f89c:	eb001135 	bl	143d78 <__aeabi_dsub>
  13f8a0:	e51f38a0 	ldr	r3, [pc, #-2208]	; 13f008 <printf_core+0x10a0>
  13f8a4:	e3a02000 	mov	r2, #0
  13f8a8:	eb001220 	bl	144130 <__aeabi_dmul>
  13f8ac:	e04a3007 	sub	r3, sl, r7
  13f8b0:	e3530001 	cmp	r3, #1
  13f8b4:	e1a04000 	mov	r4, r0
  13f8b8:	e1a08001 	mov	r8, r1
  13f8bc:	1affffe1 	bne	13f848 <printf_core+0x18e0>
  13f8c0:	e3a03000 	mov	r3, #0
  13f8c4:	e3a02000 	mov	r2, #0
  13f8c8:	eb001366 	bl	144668 <__aeabi_dcmpeq>
  13f8cc:	e3500000 	cmp	r0, #0
  13f8d0:	e3a03001 	mov	r3, #1
  13f8d4:	13a03000 	movne	r3, #0
  13f8d8:	e3550000 	cmp	r5, #0
  13f8dc:	c3833001 	orrgt	r3, r3, #1
  13f8e0:	e3130001 	tst	r3, #1
  13f8e4:	1a000002 	bne	13f8f4 <printf_core+0x198c>
  13f8e8:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  13f8ec:	e3530000 	cmp	r3, #0
  13f8f0:	0affffd4 	beq	13f848 <printf_core+0x18e0>
  13f8f4:	e3a0302e 	mov	r3, #46	; 0x2e
  13f8f8:	e28bb002 	add	fp, fp, #2
  13f8fc:	e54b3001 	strb	r3, [fp, #-1]
  13f900:	eaffffd1 	b	13f84c <printf_core+0x18e4>
  13f904:	e3e0310a 	mvn	r3, #-2147483646	; 0x80000002
  13f908:	e59d2010 	ldr	r2, [sp, #16]
  13f90c:	e59da03c 	ldr	sl, [sp, #60]	; 0x3c
  13f910:	e0476002 	sub	r6, r7, r2
  13f914:	e59d2030 	ldr	r2, [sp, #48]	; 0x30
  13f918:	e0433006 	sub	r3, r3, r6
  13f91c:	e0433002 	sub	r3, r3, r2
  13f920:	e1550003 	cmp	r5, r3
  13f924:	e59d8040 	ldr	r8, [sp, #64]	; 0x40
  13f928:	e59d4044 	ldr	r4, [sp, #68]	; 0x44
  13f92c:	cafffb3a 	bgt	13e61c <printf_core+0x6b4>
  13f930:	e04b2007 	sub	r2, fp, r7
  13f934:	e3550000 	cmp	r5, #0
  13f938:	e58d201c 	str	r2, [sp, #28]
  13f93c:	0a000065 	beq	13fad8 <printf_core+0x1b70>
  13f940:	e2423001 	sub	r3, r2, #1
  13f944:	e1550003 	cmp	r5, r3
  13f948:	ba000062 	blt	13fad8 <printf_core+0x1b70>
  13f94c:	e2853002 	add	r3, r5, #2
  13f950:	e0865003 	add	r5, r6, r3
  13f954:	e043a002 	sub	sl, r3, r2
  13f958:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
  13f95c:	e0835005 	add	r5, r3, r5
  13f960:	e1590005 	cmp	r9, r5
  13f964:	c3a0b000 	movgt	fp, #0
  13f968:	d3a0b001 	movle	fp, #1
  13f96c:	e3180a12 	tst	r8, #73728	; 0x12000
  13f970:	01a0300b 	moveq	r3, fp
  13f974:	13a03001 	movne	r3, #1
  13f978:	e3530000 	cmp	r3, #0
  13f97c:	0a0001a8 	beq	140024 <printf_core+0x20bc>
  13f980:	e59d3004 	ldr	r3, [sp, #4]
  13f984:	e5933000 	ldr	r3, [r3]
  13f988:	e3130020 	tst	r3, #32
  13f98c:	0a0000e4 	beq	13fd24 <printf_core+0x1dbc>
  13f990:	e2283801 	eor	r3, r8, #65536	; 0x10000
  13f994:	e3130a12 	tst	r3, #73728	; 0x12000
  13f998:	01a0300b 	moveq	r3, fp
  13f99c:	13a03001 	movne	r3, #1
  13f9a0:	e3530000 	cmp	r3, #0
  13f9a4:	0a000198 	beq	14000c <printf_core+0x20a4>
  13f9a8:	e35a0000 	cmp	sl, #0
  13f9ac:	ca00012c 	bgt	13fe64 <printf_core+0x1efc>
  13f9b0:	e2283a02 	eor	r3, r8, #8192	; 0x2000
  13f9b4:	e3130a12 	tst	r3, #73728	; 0x12000
  13f9b8:	01a0300b 	moveq	r3, fp
  13f9bc:	13a03001 	movne	r3, #1
  13f9c0:	e3530000 	cmp	r3, #0
  13f9c4:	0a000186 	beq	13ffe4 <printf_core+0x207c>
  13f9c8:	e1590005 	cmp	r9, r5
  13f9cc:	a1a0a009 	movge	sl, r9
  13f9d0:	b1a0a005 	movlt	sl, r5
  13f9d4:	eafffb0d 	b	13e610 <printf_core+0x6a8>
  13f9d8:	e375010e 	cmn	r5, #-2147483645	; 0x80000003
  13f9dc:	cafffb0e 	bgt	13e61c <printf_core+0x6b4>
  13f9e0:	e2852001 	add	r2, r5, #1
  13f9e4:	e3a03001 	mov	r3, #1
  13f9e8:	eafffe71 	b	13f3b4 <printf_core+0x144c>
  13f9ec:	e3550000 	cmp	r5, #0
  13f9f0:	03a05001 	moveq	r5, #1
  13f9f4:	e3760004 	cmn	r6, #4
  13f9f8:	a1550006 	cmpge	r5, r6
  13f9fc:	c59d2010 	ldrgt	r2, [sp, #16]
  13fa00:	d59d3010 	ldrle	r3, [sp, #16]
  13fa04:	c2863001 	addgt	r3, r6, #1
  13fa08:	c2422001 	subgt	r2, r2, #1
  13fa0c:	d2433002 	suble	r3, r3, #2
  13fa10:	c58d2010 	strgt	r2, [sp, #16]
  13fa14:	c0455003 	subgt	r5, r5, r3
  13fa18:	d58d3010 	strle	r3, [sp, #16]
  13fa1c:	d2455001 	suble	r5, r5, #1
  13fa20:	e3180008 	tst	r8, #8
  13fa24:	1afffe5d 	bne	13f3a0 <printf_core+0x1438>
  13fa28:	e59d301c 	ldr	r3, [sp, #28]
  13fa2c:	e15b0003 	cmp	fp, r3
  13fa30:	2a000034 	bcs	13fb08 <printf_core+0x1ba0>
  13fa34:	e5137004 	ldr	r7, [r3, #-4]
  13fa38:	e3570000 	cmp	r7, #0
  13fa3c:	0a000031 	beq	13fb08 <printf_core+0x1ba0>
  13fa40:	e3a0100a 	mov	r1, #10
  13fa44:	e1a00007 	mov	r0, r7
  13fa48:	ebffe1a3 	bl	1380dc <__aeabi_uidivmod>
  13fa4c:	e3510000 	cmp	r1, #0
  13fa50:	1a00000b 	bne	13fa84 <printf_core+0x1b1c>
  13fa54:	e3a0300a 	mov	r3, #10
  13fa58:	e58d4020 	str	r4, [sp, #32]
  13fa5c:	e1a04003 	mov	r4, r3
  13fa60:	e0844104 	add	r4, r4, r4, lsl #2
  13fa64:	e1a04084 	lsl	r4, r4, #1
  13fa68:	e1a01004 	mov	r1, r4
  13fa6c:	e1a00007 	mov	r0, r7
  13fa70:	ebffe199 	bl	1380dc <__aeabi_uidivmod>
  13fa74:	e3510000 	cmp	r1, #0
  13fa78:	e28aa001 	add	sl, sl, #1
  13fa7c:	0afffff7 	beq	13fa60 <printf_core+0x1af8>
  13fa80:	e59d4020 	ldr	r4, [sp, #32]
  13fa84:	e59d202c 	ldr	r2, [sp, #44]	; 0x2c
  13fa88:	e59d301c 	ldr	r3, [sp, #28]
  13fa8c:	e0433002 	sub	r3, r3, r2
  13fa90:	e59d2010 	ldr	r2, [sp, #16]
  13fa94:	e1a03143 	asr	r3, r3, #2
  13fa98:	e3822020 	orr	r2, r2, #32
  13fa9c:	e2433001 	sub	r3, r3, #1
  13faa0:	e3520066 	cmp	r2, #102	; 0x66
  13faa4:	e0833183 	add	r3, r3, r3, lsl #3
  13faa8:	10863003 	addne	r3, r6, r3
  13faac:	e043300a 	sub	r3, r3, sl
  13fab0:	e1c33fc3 	bic	r3, r3, r3, asr #31
  13fab4:	e1550003 	cmp	r5, r3
  13fab8:	a1a05003 	movge	r5, r3
  13fabc:	eafffe37 	b	13f3a0 <printf_core+0x1438>
  13fac0:	e1a0300a 	mov	r3, sl
  13fac4:	e1a02009 	mov	r2, r9
  13fac8:	e3a01020 	mov	r1, #32
  13facc:	e59d0004 	ldr	r0, [sp, #4]
  13fad0:	ebfff8f9 	bl	13debc <pad.part.0>
  13fad4:	eafffbca 	b	13ea04 <printf_core+0xa9c>
  13fad8:	e59d301c 	ldr	r3, [sp, #28]
  13fadc:	e0865003 	add	r5, r6, r3
  13fae0:	eaffff9c 	b	13f958 <printf_core+0x19f0>
  13fae4:	e59d32f0 	ldr	r3, [sp, #752]	; 0x2f0
  13fae8:	e0832105 	add	r2, r3, r5, lsl #2
  13faec:	e2833024 	add	r3, r3, #36	; 0x24
  13faf0:	e1530002 	cmp	r3, r2
  13faf4:	0afffb08 	beq	13e71c <printf_core+0x7b4>
  13faf8:	e5b21004 	ldr	r1, [r2, #4]!
  13fafc:	e3510000 	cmp	r1, #0
  13fb00:	0afffffa 	beq	13faf0 <printf_core+0x1b88>
  13fb04:	eafffa2f 	b	13e3c8 <printf_core+0x460>
  13fb08:	e3a0a009 	mov	sl, #9
  13fb0c:	eaffffdc 	b	13fa84 <printf_core+0x1b1c>
  13fb10:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  13fb14:	e15b0003 	cmp	fp, r3
  13fb18:	31a0a00b 	movcc	sl, fp
  13fb1c:	21a0a003 	movcs	sl, r3
  13fb20:	e15a0003 	cmp	sl, r3
  13fb24:	8a00002f 	bhi	13fbe8 <printf_core+0x1c80>
  13fb28:	e28d7090 	add	r7, sp, #144	; 0x90
  13fb2c:	e043b00a 	sub	fp, r3, sl
  13fb30:	e2872009 	add	r2, r7, #9
  13fb34:	e58d2030 	str	r2, [sp, #48]	; 0x30
  13fb38:	e58d2034 	str	r2, [sp, #52]	; 0x34
  13fb3c:	e3cb2003 	bic	r2, fp, #3
  13fb40:	e08a3002 	add	r3, sl, r2
  13fb44:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13fb48:	e24a3004 	sub	r3, sl, #4
  13fb4c:	e58db038 	str	fp, [sp, #56]	; 0x38
  13fb50:	e3a06030 	mov	r6, #48	; 0x30
  13fb54:	e1a0b004 	mov	fp, r4
  13fb58:	e1a04003 	mov	r4, r3
  13fb5c:	e5b4c004 	ldr	ip, [r4, #4]!
  13fb60:	e35c0000 	cmp	ip, #0
  13fb64:	0a000068 	beq	13fd0c <printf_core+0x1da4>
  13fb68:	e2870009 	add	r0, r7, #9
  13fb6c:	e51f1b78 	ldr	r1, [pc, #-2936]	; 13effc <printf_core+0x1094>
  13fb70:	e083219c 	umull	r2, r3, ip, r1
  13fb74:	e1a021a3 	lsr	r2, r3, #3
  13fb78:	e0823102 	add	r3, r2, r2, lsl #2
  13fb7c:	e04c3083 	sub	r3, ip, r3, lsl #1
  13fb80:	e2833030 	add	r3, r3, #48	; 0x30
  13fb84:	e252c000 	subs	ip, r2, #0
  13fb88:	e5603001 	strb	r3, [r0, #-1]!
  13fb8c:	1afffff6 	bne	13fb6c <printf_core+0x1c04>
  13fb90:	e15a0004 	cmp	sl, r4
  13fb94:	1a000001 	bne	13fba0 <printf_core+0x1c38>
  13fb98:	ea000117 	b	13fffc <printf_core+0x2094>
  13fb9c:	e5606001 	strb	r6, [r0, #-1]!
  13fba0:	e1500007 	cmp	r0, r7
  13fba4:	8afffffc 	bhi	13fb9c <printf_core+0x1c34>
  13fba8:	e59d3004 	ldr	r3, [sp, #4]
  13fbac:	e5932000 	ldr	r2, [r3]
  13fbb0:	e3120020 	tst	r2, #32
  13fbb4:	1a000003 	bne	13fbc8 <printf_core+0x1c60>
  13fbb8:	e1a02003 	mov	r2, r3
  13fbbc:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
  13fbc0:	e0431000 	sub	r1, r3, r0
  13fbc4:	eb000da5 	bl	143260 <__fwritex>
  13fbc8:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  13fbcc:	e1530004 	cmp	r3, r4
  13fbd0:	1affffe1 	bne	13fb5c <printf_core+0x1bf4>
  13fbd4:	e1a0400b 	mov	r4, fp
  13fbd8:	e59db038 	ldr	fp, [sp, #56]	; 0x38
  13fbdc:	e3cb3003 	bic	r3, fp, #3
  13fbe0:	e2833004 	add	r3, r3, #4
  13fbe4:	e08aa003 	add	sl, sl, r3
  13fbe8:	e3550000 	cmp	r5, #0
  13fbec:	0a00003b 	beq	13fce0 <printf_core+0x1d78>
  13fbf0:	e59d3004 	ldr	r3, [sp, #4]
  13fbf4:	e5933000 	ldr	r3, [r3]
  13fbf8:	e3130020 	tst	r3, #32
  13fbfc:	0a00003d 	beq	13fcf8 <printf_core+0x1d90>
  13fc00:	e59d201c 	ldr	r2, [sp, #28]
  13fc04:	e3550000 	cmp	r5, #0
  13fc08:	d3a03000 	movle	r3, #0
  13fc0c:	c3a03001 	movgt	r3, #1
  13fc10:	e15a0002 	cmp	sl, r2
  13fc14:	23a03000 	movcs	r3, #0
  13fc18:	e3530000 	cmp	r3, #0
  13fc1c:	0a000027 	beq	13fcc0 <printf_core+0x1d58>
  13fc20:	e1a0600a 	mov	r6, sl
  13fc24:	e3a0a030 	mov	sl, #48	; 0x30
  13fc28:	e59db004 	ldr	fp, [sp, #4]
  13fc2c:	e28d7090 	add	r7, sp, #144	; 0x90
  13fc30:	e4963004 	ldr	r3, [r6], #4
  13fc34:	e287c009 	add	ip, r7, #9
  13fc38:	e3530000 	cmp	r3, #0
  13fc3c:	0a00000a 	beq	13fc6c <printf_core+0x1d04>
  13fc40:	e1a01003 	mov	r1, r3
  13fc44:	e51f0c50 	ldr	r0, [pc, #-3152]	; 13effc <printf_core+0x1094>
  13fc48:	e0832091 	umull	r2, r3, r1, r0
  13fc4c:	e1a031a3 	lsr	r3, r3, #3
  13fc50:	e0832103 	add	r2, r3, r3, lsl #2
  13fc54:	e0412082 	sub	r2, r1, r2, lsl #1
  13fc58:	e2822030 	add	r2, r2, #48	; 0x30
  13fc5c:	e2531000 	subs	r1, r3, #0
  13fc60:	e56c2001 	strb	r2, [ip, #-1]!
  13fc64:	1afffff6 	bne	13fc44 <printf_core+0x1cdc>
  13fc68:	ea000000 	b	13fc70 <printf_core+0x1d08>
  13fc6c:	e56ca001 	strb	sl, [ip, #-1]!
  13fc70:	e15c0007 	cmp	ip, r7
  13fc74:	8afffffc 	bhi	13fc6c <printf_core+0x1d04>
  13fc78:	e59b3000 	ldr	r3, [fp]
  13fc7c:	e3130020 	tst	r3, #32
  13fc80:	1a000005 	bne	13fc9c <printf_core+0x1d34>
  13fc84:	e3550009 	cmp	r5, #9
  13fc88:	e1a0000c 	mov	r0, ip
  13fc8c:	b1a01005 	movlt	r1, r5
  13fc90:	a3a01009 	movge	r1, #9
  13fc94:	e1a0200b 	mov	r2, fp
  13fc98:	eb000d70 	bl	143260 <__fwritex>
  13fc9c:	e59d301c 	ldr	r3, [sp, #28]
  13fca0:	e2455009 	sub	r5, r5, #9
  13fca4:	e1530006 	cmp	r3, r6
  13fca8:	93a03000 	movls	r3, #0
  13fcac:	83a03001 	movhi	r3, #1
  13fcb0:	e3550000 	cmp	r5, #0
  13fcb4:	d3a03000 	movle	r3, #0
  13fcb8:	e3530000 	cmp	r3, #0
  13fcbc:	1affffdb 	bne	13fc30 <printf_core+0x1cc8>
  13fcc0:	e2852009 	add	r2, r5, #9
  13fcc4:	e3520009 	cmp	r2, #9
  13fcc8:	dafffe54 	ble	13f620 <printf_core+0x16b8>
  13fccc:	e3a03009 	mov	r3, #9
  13fcd0:	e3a01030 	mov	r1, #48	; 0x30
  13fcd4:	e59d0004 	ldr	r0, [sp, #4]
  13fcd8:	ebfff877 	bl	13debc <pad.part.0>
  13fcdc:	eafffe4f 	b	13f620 <printf_core+0x16b8>
  13fce0:	e3180008 	tst	r8, #8
  13fce4:	0afffe4d 	beq	13f620 <printf_core+0x16b8>
  13fce8:	e59d3004 	ldr	r3, [sp, #4]
  13fcec:	e5933000 	ldr	r3, [r3]
  13fcf0:	e3130020 	tst	r3, #32
  13fcf4:	1afffe49 	bne	13f620 <printf_core+0x16b8>
  13fcf8:	e59d2004 	ldr	r2, [sp, #4]
  13fcfc:	e3a01001 	mov	r1, #1
  13fd00:	e51f0d08 	ldr	r0, [pc, #-3336]	; 13f000 <printf_core+0x1098>
  13fd04:	eb000d55 	bl	143260 <__fwritex>
  13fd08:	eaffffbc 	b	13fc00 <printf_core+0x1c98>
  13fd0c:	e15a0004 	cmp	sl, r4
  13fd10:	12870009 	addne	r0, r7, #9
  13fd14:	1affffa0 	bne	13fb9c <printf_core+0x1c34>
  13fd18:	e28d0fb2 	add	r0, sp, #712	; 0x2c8
  13fd1c:	e5606230 	strb	r6, [r0, #-560]!	; 0xfffffdd0
  13fd20:	eaffffa0 	b	13fba8 <printf_core+0x1c40>
  13fd24:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
  13fd28:	e59d0034 	ldr	r0, [sp, #52]	; 0x34
  13fd2c:	e59d2004 	ldr	r2, [sp, #4]
  13fd30:	eb000d4a 	bl	143260 <__fwritex>
  13fd34:	e2283801 	eor	r3, r8, #65536	; 0x10000
  13fd38:	e3130a12 	tst	r3, #73728	; 0x12000
  13fd3c:	01a0300b 	moveq	r3, fp
  13fd40:	13a03001 	movne	r3, #1
  13fd44:	e3530000 	cmp	r3, #0
  13fd48:	0a0000af 	beq	14000c <printf_core+0x20a4>
  13fd4c:	e59d2004 	ldr	r2, [sp, #4]
  13fd50:	e5923000 	ldr	r3, [r2]
  13fd54:	e3130020 	tst	r3, #32
  13fd58:	1affff12 	bne	13f9a8 <printf_core+0x1a40>
  13fd5c:	e59d101c 	ldr	r1, [sp, #28]
  13fd60:	e1a00007 	mov	r0, r7
  13fd64:	eb000d3d 	bl	143260 <__fwritex>
  13fd68:	e35a0000 	cmp	sl, #0
  13fd6c:	ca00003c 	bgt	13fe64 <printf_core+0x1efc>
  13fd70:	e59d2004 	ldr	r2, [sp, #4]
  13fd74:	e5923000 	ldr	r3, [r2]
  13fd78:	e3130020 	tst	r3, #32
  13fd7c:	1affff0b 	bne	13f9b0 <printf_core+0x1a48>
  13fd80:	e1a01006 	mov	r1, r6
  13fd84:	e59d0010 	ldr	r0, [sp, #16]
  13fd88:	eb000d34 	bl	143260 <__fwritex>
  13fd8c:	eaffff07 	b	13f9b0 <printf_core+0x1a48>
  13fd90:	e59d3010 	ldr	r3, [sp, #16]
  13fd94:	e1a02009 	mov	r2, r9
  13fd98:	e3a01030 	mov	r1, #48	; 0x30
  13fd9c:	e59d0004 	ldr	r0, [sp, #4]
  13fda0:	ebfff845 	bl	13debc <pad.part.0>
  13fda4:	eafffdc7 	b	13f4c8 <printf_core+0x1560>
  13fda8:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
  13fdac:	e59d0034 	ldr	r0, [sp, #52]	; 0x34
  13fdb0:	e59d2004 	ldr	r2, [sp, #4]
  13fdb4:	eb000d29 	bl	143260 <__fwritex>
  13fdb8:	eafffdbc 	b	13f4b0 <printf_core+0x1548>
  13fdbc:	e59d3010 	ldr	r3, [sp, #16]
  13fdc0:	e1a02009 	mov	r2, r9
  13fdc4:	e3a01020 	mov	r1, #32
  13fdc8:	e59d0004 	ldr	r0, [sp, #4]
  13fdcc:	ebfff83a 	bl	13debc <pad.part.0>
  13fdd0:	eafffdb2 	b	13f4a0 <printf_core+0x1538>
  13fdd4:	e156000e 	cmp	r6, lr
  13fdd8:	cafffa0f 	bgt	13e61c <printf_core+0x6b4>
  13fddc:	e3560000 	cmp	r6, #0
  13fde0:	c0833006 	addgt	r3, r3, r6
  13fde4:	eafffd9e 	b	13f464 <printf_core+0x14fc>
  13fde8:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
  13fdec:	e59d0044 	ldr	r0, [sp, #68]	; 0x44
  13fdf0:	e51f3df4 	ldr	r3, [pc, #-3572]	; 13f004 <printf_core+0x109c>
  13fdf4:	e0811000 	add	r1, r1, r0
  13fdf8:	e1510003 	cmp	r1, r3
  13fdfc:	e5871000 	str	r1, [r7]
  13fe00:	9a000008 	bls	13fe28 <printf_core+0x1ec0>
  13fe04:	e4072004 	str	r2, [r7], #-4
  13fe08:	e157000b 	cmp	r7, fp
  13fe0c:	350b2004 	strcc	r2, [fp, #-4]
  13fe10:	e5971000 	ldr	r1, [r7]
  13fe14:	324bb004 	subcc	fp, fp, #4
  13fe18:	e2811001 	add	r1, r1, #1
  13fe1c:	e1510003 	cmp	r1, r3
  13fe20:	e5871000 	str	r1, [r7]
  13fe24:	8afffff6 	bhi	13fe04 <printf_core+0x1e9c>
  13fe28:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  13fe2c:	e59b2000 	ldr	r2, [fp]
  13fe30:	e043600b 	sub	r6, r3, fp
  13fe34:	e1a06146 	asr	r6, r6, #2
  13fe38:	e3520009 	cmp	r2, #9
  13fe3c:	e0866186 	add	r6, r6, r6, lsl #3
  13fe40:	83a0300a 	movhi	r3, #10
  13fe44:	9a000004 	bls	13fe5c <printf_core+0x1ef4>
  13fe48:	e0833103 	add	r3, r3, r3, lsl #2
  13fe4c:	e1a03083 	lsl	r3, r3, #1
  13fe50:	e1520003 	cmp	r2, r3
  13fe54:	e2866001 	add	r6, r6, #1
  13fe58:	2afffffa 	bcs	13fe48 <printf_core+0x1ee0>
  13fe5c:	e287c004 	add	ip, r7, #4
  13fe60:	eafffd37 	b	13f344 <printf_core+0x13dc>
  13fe64:	e1a0200a 	mov	r2, sl
  13fe68:	e3a03000 	mov	r3, #0
  13fe6c:	e3a01030 	mov	r1, #48	; 0x30
  13fe70:	e59d0004 	ldr	r0, [sp, #4]
  13fe74:	ebfff810 	bl	13debc <pad.part.0>
  13fe78:	eaffffbc 	b	13fd70 <printf_core+0x1e08>
  13fe7c:	e3a03030 	mov	r3, #48	; 0x30
  13fe80:	e28dc08f 	add	ip, sp, #143	; 0x8f
  13fe84:	e5cd308f 	strb	r3, [sp, #143]	; 0x8f
  13fe88:	eafffe59 	b	13f7f4 <printf_core+0x188c>
  13fe8c:	e265300b 	rsb	r3, r5, #11
  13fe90:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13fe94:	e1a0300b 	mov	r3, fp
  13fe98:	e3a06000 	mov	r6, #0
  13fe9c:	e1a0b004 	mov	fp, r4
  13fea0:	e1a04003 	mov	r4, r3
  13fea4:	e51f7ea4 	ldr	r7, [pc, #-3748]	; 13f008 <printf_core+0x10a0>
  13fea8:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  13feac:	e1a00006 	mov	r0, r6
  13feb0:	e2433001 	sub	r3, r3, #1
  13feb4:	e1a01007 	mov	r1, r7
  13feb8:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13febc:	e3a02000 	mov	r2, #0
  13fec0:	e51f3ec0 	ldr	r3, [pc, #-3776]	; 13f008 <printf_core+0x10a0>
  13fec4:	eb001099 	bl	144130 <__aeabi_dmul>
  13fec8:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  13fecc:	e1a06000 	mov	r6, r0
  13fed0:	e3730001 	cmn	r3, #1
  13fed4:	e1a07001 	mov	r7, r1
  13fed8:	1afffff2 	bne	13fea8 <printf_core+0x1f40>
  13fedc:	e1a03004 	mov	r3, r4
  13fee0:	e1a0400b 	mov	r4, fp
  13fee4:	e1a0b003 	mov	fp, r3
  13fee8:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
  13feec:	e59d001c 	ldr	r0, [sp, #28]
  13fef0:	e5d33000 	ldrb	r3, [r3]
  13fef4:	e353002d 	cmp	r3, #45	; 0x2d
  13fef8:	0a000028 	beq	13ffa0 <printf_core+0x2038>
  13fefc:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
  13ff00:	e1a02006 	mov	r2, r6
  13ff04:	e1a03007 	mov	r3, r7
  13ff08:	eb000f9b 	bl	143d7c <__adddf3>
  13ff0c:	e1a02006 	mov	r2, r6
  13ff10:	e1a03007 	mov	r3, r7
  13ff14:	eb000f97 	bl	143d78 <__aeabi_dsub>
  13ff18:	e58d001c 	str	r0, [sp, #28]
  13ff1c:	e58d1038 	str	r1, [sp, #56]	; 0x38
  13ff20:	eafffe20 	b	13f7a8 <printf_core+0x1840>
  13ff24:	e59d3010 	ldr	r3, [sp, #16]
  13ff28:	e1a02009 	mov	r2, r9
  13ff2c:	e3a01020 	mov	r1, #32
  13ff30:	e59d0004 	ldr	r0, [sp, #4]
  13ff34:	ebfff7e0 	bl	13debc <pad.part.0>
  13ff38:	eafffdbe 	b	13f638 <printf_core+0x16d0>
  13ff3c:	e3a0e000 	mov	lr, #0
  13ff40:	e51fcf3c 	ldr	ip, [pc, #-3900]	; 13f00c <printf_core+0x10a4>
  13ff44:	eafffce1 	b	13f2d0 <printf_core+0x1368>
  13ff48:	e51f3f40 	ldr	r3, [pc, #-3904]	; 13f010 <printf_core+0x10a8>
  13ff4c:	e58d2040 	str	r2, [sp, #64]	; 0x40
  13ff50:	e58d3020 	str	r3, [sp, #32]
  13ff54:	eafffcd6 	b	13f2b4 <printf_core+0x134c>
  13ff58:	e3a03001 	mov	r3, #1
  13ff5c:	e58d3040 	str	r3, [sp, #64]	; 0x40
  13ff60:	e51f3f58 	ldr	r3, [pc, #-3928]	; 13f010 <printf_core+0x10a8>
  13ff64:	e58d3020 	str	r3, [sp, #32]
  13ff68:	eafffcd1 	b	13f2b4 <printf_core+0x134c>
  13ff6c:	e3a03001 	mov	r3, #1
  13ff70:	e3a05006 	mov	r5, #6
  13ff74:	e58d3044 	str	r3, [sp, #68]	; 0x44
  13ff78:	eafffb9d 	b	13edf4 <printf_core+0xe8c>
  13ff7c:	e59d101c 	ldr	r1, [sp, #28]
  13ff80:	e287c004 	add	ip, r7, #4
  13ff84:	e51f2f78 	ldr	r2, [pc, #-3960]	; 13f014 <printf_core+0x10ac>
  13ff88:	e51f3f78 	ldr	r3, [pc, #-3960]	; 13f018 <printf_core+0x10b0>
  13ff8c:	e151000c 	cmp	r1, ip
  13ff90:	01a0c002 	moveq	ip, r2
  13ff94:	11a0c003 	movne	ip, r3
  13ff98:	e3a0e000 	mov	lr, #0
  13ff9c:	eafffccb 	b	13f2d0 <printf_core+0x1368>
  13ffa0:	e59d3038 	ldr	r3, [sp, #56]	; 0x38
  13ffa4:	e1a02006 	mov	r2, r6
  13ffa8:	e2831102 	add	r1, r3, #-2147483648	; 0x80000000
  13ffac:	e1a03007 	mov	r3, r7
  13ffb0:	eb000f70 	bl	143d78 <__aeabi_dsub>
  13ffb4:	e1a03001 	mov	r3, r1
  13ffb8:	e1a02000 	mov	r2, r0
  13ffbc:	e1a01007 	mov	r1, r7
  13ffc0:	e1a00006 	mov	r0, r6
  13ffc4:	eb000f6c 	bl	143d7c <__adddf3>
  13ffc8:	e2813102 	add	r3, r1, #-2147483648	; 0x80000000
  13ffcc:	e58d001c 	str	r0, [sp, #28]
  13ffd0:	e58d3038 	str	r3, [sp, #56]	; 0x38
  13ffd4:	eafffdf3 	b	13f7a8 <printf_core+0x1840>
  13ffd8:	e3a0300a 	mov	r3, #10
  13ffdc:	e58d3038 	str	r3, [sp, #56]	; 0x38
  13ffe0:	eafffc97 	b	13f244 <printf_core+0x12dc>
  13ffe4:	e1a03005 	mov	r3, r5
  13ffe8:	e1a02009 	mov	r2, r9
  13ffec:	e3a01020 	mov	r1, #32
  13fff0:	e59d0004 	ldr	r0, [sp, #4]
  13fff4:	ebfff7b0 	bl	13debc <pad.part.0>
  13fff8:	eafffe72 	b	13f9c8 <printf_core+0x1a60>
  13fffc:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
  140000:	e1500003 	cmp	r0, r3
  140004:	1afffee7 	bne	13fba8 <printf_core+0x1c40>
  140008:	eaffff42 	b	13fd18 <printf_core+0x1db0>
  14000c:	e1a03005 	mov	r3, r5
  140010:	e1a02009 	mov	r2, r9
  140014:	e3a01030 	mov	r1, #48	; 0x30
  140018:	e59d0004 	ldr	r0, [sp, #4]
  14001c:	ebfff7a6 	bl	13debc <pad.part.0>
  140020:	eaffff49 	b	13fd4c <printf_core+0x1de4>
  140024:	e1a03005 	mov	r3, r5
  140028:	e1a02009 	mov	r2, r9
  14002c:	e3a01020 	mov	r1, #32
  140030:	e59d0004 	ldr	r0, [sp, #4]
  140034:	ebfff7a0 	bl	13debc <pad.part.0>
  140038:	eafffe50 	b	13f980 <printf_core+0x1a18>

0014003c <vfprintf>:
  14003c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  140040:	e1a09001 	mov	r9, r1
  140044:	e1a06002 	mov	r6, r2
  140048:	e24dd0dc 	sub	sp, sp, #220	; 0xdc
  14004c:	e28d5010 	add	r5, sp, #16
  140050:	e3a02028 	mov	r2, #40	; 0x28
  140054:	e3a01000 	mov	r1, #0
  140058:	e1a04000 	mov	r4, r0
  14005c:	e1a00005 	mov	r0, r5
  140060:	eb000221 	bl	1408ec <memset>
  140064:	e58d5000 	str	r5, [sp]
  140068:	e1a01009 	mov	r1, r9
  14006c:	e28d3038 	add	r3, sp, #56	; 0x38
  140070:	e28d200c 	add	r2, sp, #12
  140074:	e3a00000 	mov	r0, #0
  140078:	e58d600c 	str	r6, [sp, #12]
  14007c:	ebfff7b9 	bl	13df68 <printf_core>
  140080:	e3500000 	cmp	r0, #0
  140084:	ba000047 	blt	1401a8 <vfprintf+0x16c>
  140088:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
  14008c:	e3530000 	cmp	r3, #0
  140090:	b3a08000 	movlt	r8, #0
  140094:	ba000002 	blt	1400a4 <vfprintf+0x68>
  140098:	e1a00004 	mov	r0, r4
  14009c:	eb000ab0 	bl	142b64 <__lockfile>
  1400a0:	e1a08000 	mov	r8, r0
  1400a4:	e5942048 	ldr	r2, [r4, #72]	; 0x48
  1400a8:	e5943000 	ldr	r3, [r4]
  1400ac:	e3520000 	cmp	r2, #0
  1400b0:	e2036020 	and	r6, r3, #32
  1400b4:	d3c33020 	bicle	r3, r3, #32
  1400b8:	d5843000 	strle	r3, [r4]
  1400bc:	e5943030 	ldr	r3, [r4, #48]	; 0x30
  1400c0:	e3530000 	cmp	r3, #0
  1400c4:	0a000024 	beq	14015c <vfprintf+0x120>
  1400c8:	e5947010 	ldr	r7, [r4, #16]
  1400cc:	e3570000 	cmp	r7, #0
  1400d0:	13a07000 	movne	r7, #0
  1400d4:	0a000035 	beq	1401b0 <vfprintf+0x174>
  1400d8:	e58d5000 	str	r5, [sp]
  1400dc:	e28d3038 	add	r3, sp, #56	; 0x38
  1400e0:	e28d200c 	add	r2, sp, #12
  1400e4:	e1a01009 	mov	r1, r9
  1400e8:	e1a00004 	mov	r0, r4
  1400ec:	ebfff79d 	bl	13df68 <printf_core>
  1400f0:	e1a05000 	mov	r5, r0
  1400f4:	e3570000 	cmp	r7, #0
  1400f8:	0a00000d 	beq	140134 <vfprintf+0xf8>
  1400fc:	e3a02000 	mov	r2, #0
  140100:	e5943024 	ldr	r3, [r4, #36]	; 0x24
  140104:	e1a01002 	mov	r1, r2
  140108:	e1a00004 	mov	r0, r4
  14010c:	e12fff33 	blx	r3
  140110:	e3a03000 	mov	r3, #0
  140114:	e5942014 	ldr	r2, [r4, #20]
  140118:	e584702c 	str	r7, [r4, #44]	; 0x2c
  14011c:	e1520003 	cmp	r2, r3
  140120:	03e05000 	mvneq	r5, #0
  140124:	e5843030 	str	r3, [r4, #48]	; 0x30
  140128:	e5843010 	str	r3, [r4, #16]
  14012c:	e584301c 	str	r3, [r4, #28]
  140130:	e5843014 	str	r3, [r4, #20]
  140134:	e5943000 	ldr	r3, [r4]
  140138:	e3130020 	tst	r3, #32
  14013c:	13e05000 	mvnne	r5, #0
  140140:	e1866003 	orr	r6, r6, r3
  140144:	e3580000 	cmp	r8, #0
  140148:	e5846000 	str	r6, [r4]
  14014c:	1a000010 	bne	140194 <vfprintf+0x158>
  140150:	e1a00005 	mov	r0, r5
  140154:	e28dd0dc 	add	sp, sp, #220	; 0xdc
  140158:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  14015c:	e3a01050 	mov	r1, #80	; 0x50
  140160:	e28d2088 	add	r2, sp, #136	; 0x88
  140164:	e594702c 	ldr	r7, [r4, #44]	; 0x2c
  140168:	e5843010 	str	r3, [r4, #16]
  14016c:	e584301c 	str	r3, [r4, #28]
  140170:	e5843014 	str	r3, [r4, #20]
  140174:	e5841030 	str	r1, [r4, #48]	; 0x30
  140178:	e584202c 	str	r2, [r4, #44]	; 0x2c
  14017c:	e1a00004 	mov	r0, r4
  140180:	eb000b95 	bl	142fdc <__towrite>
  140184:	e3500000 	cmp	r0, #0
  140188:	13e05000 	mvnne	r5, #0
  14018c:	1affffd8 	bne	1400f4 <vfprintf+0xb8>
  140190:	eaffffd0 	b	1400d8 <vfprintf+0x9c>
  140194:	e1a00004 	mov	r0, r4
  140198:	eb000abe 	bl	142c98 <__unlockfile>
  14019c:	e1a00005 	mov	r0, r5
  1401a0:	e28dd0dc 	add	sp, sp, #220	; 0xdc
  1401a4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  1401a8:	e3e05000 	mvn	r5, #0
  1401ac:	eaffffe7 	b	140150 <vfprintf+0x114>
  1401b0:	e1a00004 	mov	r0, r4
  1401b4:	eb000b88 	bl	142fdc <__towrite>
  1401b8:	e3500000 	cmp	r0, #0
  1401bc:	13e05000 	mvnne	r5, #0
  1401c0:	1affffdb 	bne	140134 <vfprintf+0xf8>
  1401c4:	eaffffc3 	b	1400d8 <vfprintf+0x9c>

001401c8 <sn_write>:
  1401c8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  1401cc:	e5906054 	ldr	r6, [r0, #84]	; 0x54
  1401d0:	e590c01c 	ldr	ip, [r0, #28]
  1401d4:	e1a05000 	mov	r5, r0
  1401d8:	e5900014 	ldr	r0, [r0, #20]
  1401dc:	e5963004 	ldr	r3, [r6, #4]
  1401e0:	e040000c 	sub	r0, r0, ip
  1401e4:	e1500003 	cmp	r0, r3
  1401e8:	31a04000 	movcc	r4, r0
  1401ec:	21a04003 	movcs	r4, r3
  1401f0:	e3540000 	cmp	r4, #0
  1401f4:	e1a08001 	mov	r8, r1
  1401f8:	e1a07002 	mov	r7, r2
  1401fc:	e5960000 	ldr	r0, [r6]
  140200:	1a000012 	bne	140250 <sn_write+0x88>
  140204:	e1570003 	cmp	r7, r3
  140208:	31a04007 	movcc	r4, r7
  14020c:	21a04003 	movcs	r4, r3
  140210:	e3540000 	cmp	r4, #0
  140214:	0a000006 	beq	140234 <sn_write+0x6c>
  140218:	e1a01008 	mov	r1, r8
  14021c:	e1a02004 	mov	r2, r4
  140220:	eb000079 	bl	14040c <memcpy>
  140224:	e8960009 	ldm	r6, {r0, r3}
  140228:	e0800004 	add	r0, r0, r4
  14022c:	e0433004 	sub	r3, r3, r4
  140230:	e8860009 	stm	r6, {r0, r3}
  140234:	e3a03000 	mov	r3, #0
  140238:	e5c03000 	strb	r3, [r0]
  14023c:	e595302c 	ldr	r3, [r5, #44]	; 0x2c
  140240:	e1a00007 	mov	r0, r7
  140244:	e585301c 	str	r3, [r5, #28]
  140248:	e5853014 	str	r3, [r5, #20]
  14024c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  140250:	e1a0100c 	mov	r1, ip
  140254:	e1a02004 	mov	r2, r4
  140258:	eb00006b 	bl	14040c <memcpy>
  14025c:	e8960009 	ldm	r6, {r0, r3}
  140260:	e0800004 	add	r0, r0, r4
  140264:	e0433004 	sub	r3, r3, r4
  140268:	e8860009 	stm	r6, {r0, r3}
  14026c:	eaffffe4 	b	140204 <sn_write+0x3c>

00140270 <vsnprintf>:
  140270:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  140274:	e2516000 	subs	r6, r1, #0
  140278:	e24dd0a4 	sub	sp, sp, #164	; 0xa4
  14027c:	e1a08002 	mov	r8, r2
  140280:	e1a09003 	mov	r9, r3
  140284:	1a000018 	bne	1402ec <vsnprintf+0x7c>
  140288:	e28d7010 	add	r7, sp, #16
  14028c:	e3a02090 	mov	r2, #144	; 0x90
  140290:	e1a00007 	mov	r0, r7
  140294:	e28d4004 	add	r4, sp, #4
  140298:	e58d600c 	str	r6, [sp, #12]
  14029c:	e58d4008 	str	r4, [sp, #8]
  1402a0:	eb000191 	bl	1408ec <memset>
  1402a4:	e3e02000 	mvn	r2, #0
  1402a8:	e59f1098 	ldr	r1, [pc, #152]	; 140348 <vsnprintf+0xd8>
  1402ac:	e28d3008 	add	r3, sp, #8
  1402b0:	e58d205c 	str	r2, [sp, #92]	; 0x5c
  1402b4:	e58d2060 	str	r2, [sp, #96]	; 0x60
  1402b8:	e58d1034 	str	r1, [sp, #52]	; 0x34
  1402bc:	e58dd03c 	str	sp, [sp, #60]	; 0x3c
  1402c0:	e58d3064 	str	r3, [sp, #100]	; 0x64
  1402c4:	e3a0c000 	mov	ip, #0
  1402c8:	e1a02009 	mov	r2, r9
  1402cc:	e1a01008 	mov	r1, r8
  1402d0:	e1a00007 	mov	r0, r7
  1402d4:	e5c4c000 	strb	ip, [r4]
  1402d8:	ebffff57 	bl	14003c <vfprintf>
  1402dc:	e1a05000 	mov	r5, r0
  1402e0:	e1a00005 	mov	r0, r5
  1402e4:	e28dd0a4 	add	sp, sp, #164	; 0xa4
  1402e8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  1402ec:	e3e05000 	mvn	r5, #0
  1402f0:	e1a04000 	mov	r4, r0
  1402f4:	e28d7010 	add	r7, sp, #16
  1402f8:	e0863005 	add	r3, r6, r5
  1402fc:	e3a02090 	mov	r2, #144	; 0x90
  140300:	e1a00007 	mov	r0, r7
  140304:	e3a01000 	mov	r1, #0
  140308:	e58d300c 	str	r3, [sp, #12]
  14030c:	e58d4008 	str	r4, [sp, #8]
  140310:	eb000175 	bl	1408ec <memset>
  140314:	e59f202c 	ldr	r2, [pc, #44]	; 140348 <vsnprintf+0xd8>
  140318:	e28d3008 	add	r3, sp, #8
  14031c:	e3560000 	cmp	r6, #0
  140320:	e58d505c 	str	r5, [sp, #92]	; 0x5c
  140324:	e58d5060 	str	r5, [sp, #96]	; 0x60
  140328:	e58d2034 	str	r2, [sp, #52]	; 0x34
  14032c:	e58dd03c 	str	sp, [sp, #60]	; 0x3c
  140330:	e58d3064 	str	r3, [sp, #100]	; 0x64
  140334:	aaffffe2 	bge	1402c4 <vsnprintf+0x54>
  140338:	ebffe085 	bl	138554 <__errno_location>
  14033c:	e3a0204b 	mov	r2, #75	; 0x4b
  140340:	e5802000 	str	r2, [r0]
  140344:	eaffffe5 	b	1402e0 <vsnprintf+0x70>
  140348:	001401c8 	.word	0x001401c8

0014034c <vsprintf>:
  14034c:	e1a03002 	mov	r3, r2
  140350:	e1a02001 	mov	r2, r1
  140354:	e3e01102 	mvn	r1, #-2147483648	; 0x80000000
  140358:	eaffffc4 	b	140270 <vsnprintf>

0014035c <atoi>:
  14035c:	e5d03000 	ldrb	r3, [r0]
  140360:	e2432009 	sub	r2, r3, #9
  140364:	e3530020 	cmp	r3, #32
  140368:	13520004 	cmpne	r2, #4
  14036c:	8a000004 	bhi	140384 <atoi+0x28>
  140370:	e5f03001 	ldrb	r3, [r0, #1]!
  140374:	e2432009 	sub	r2, r3, #9
  140378:	e3530020 	cmp	r3, #32
  14037c:	13520004 	cmpne	r2, #4
  140380:	9afffffa 	bls	140370 <atoi+0x14>
  140384:	e353002b 	cmp	r3, #43	; 0x2b
  140388:	0a000019 	beq	1403f4 <atoi+0x98>
  14038c:	e353002d 	cmp	r3, #45	; 0x2d
  140390:	0a00000f 	beq	1403d4 <atoi+0x78>
  140394:	e5d01000 	ldrb	r1, [r0]
  140398:	e2412030 	sub	r2, r1, #48	; 0x30
  14039c:	e3520009 	cmp	r2, #9
  1403a0:	91a03000 	movls	r3, r0
  1403a4:	8a000010 	bhi	1403ec <atoi+0x90>
  1403a8:	e3a0c000 	mov	ip, #0
  1403ac:	e3a00000 	mov	r0, #0
  1403b0:	e5f31001 	ldrb	r1, [r3, #1]!
  1403b4:	e0800100 	add	r0, r0, r0, lsl #2
  1403b8:	e0620080 	rsb	r0, r2, r0, lsl #1
  1403bc:	e2412030 	sub	r2, r1, #48	; 0x30
  1403c0:	e3520009 	cmp	r2, #9
  1403c4:	9afffff9 	bls	1403b0 <atoi+0x54>
  1403c8:	e35c0000 	cmp	ip, #0
  1403cc:	02600000 	rsbeq	r0, r0, #0
  1403d0:	e12fff1e 	bx	lr
  1403d4:	e5d01001 	ldrb	r1, [r0, #1]
  1403d8:	e2803001 	add	r3, r0, #1
  1403dc:	e2412030 	sub	r2, r1, #48	; 0x30
  1403e0:	e3520009 	cmp	r2, #9
  1403e4:	93a0c001 	movls	ip, #1
  1403e8:	9affffef 	bls	1403ac <atoi+0x50>
  1403ec:	e3a00000 	mov	r0, #0
  1403f0:	e12fff1e 	bx	lr
  1403f4:	e5d01001 	ldrb	r1, [r0, #1]
  1403f8:	e2803001 	add	r3, r0, #1
  1403fc:	e2412030 	sub	r2, r1, #48	; 0x30
  140400:	e3520009 	cmp	r2, #9
  140404:	9affffe7 	bls	1403a8 <atoi+0x4c>
  140408:	eafffff7 	b	1403ec <atoi+0x90>

0014040c <memcpy>:
  14040c:	e92d4011 	push	{r0, r4, lr}
  140410:	e24dd01c 	sub	sp, sp, #28
  140414:	e3520004 	cmp	r2, #4
  140418:	3a0000b0 	bcc	1406e0 <copy_last_3_and_return>
  14041c:	e2613000 	rsb	r3, r1, #0
  140420:	e2133003 	ands	r3, r3, #3
  140424:	0a000007 	beq	140448 <src_aligned>
  140428:	e1b0cf83 	lsls	ip, r3, #31
  14042c:	e0422003 	sub	r2, r2, r3
  140430:	44d13001 	ldrbmi	r3, [r1], #1
  140434:	24d14001 	ldrbcs	r4, [r1], #1
  140438:	24d1c001 	ldrbcs	ip, [r1], #1
  14043c:	44c03001 	strbmi	r3, [r0], #1
  140440:	24c04001 	strbcs	r4, [r0], #1
  140444:	24c0c001 	strbcs	ip, [r0], #1

00140448 <src_aligned>:
  140448:	e020c001 	eor	ip, r0, r1
  14044c:	e31c0003 	tst	ip, #3
  140450:	1a000027 	bne	1404f4 <non_congruent>
  140454:	e88d0fe0 	stm	sp, {r5, r6, r7, r8, r9, sl, fp}
  140458:	e2603000 	rsb	r3, r0, #0
  14045c:	e213301c 	ands	r3, r3, #28
  140460:	0a00000a 	beq	140490 <cached_aligned32>
  140464:	e1530002 	cmp	r3, r2
  140468:	8202301c 	andhi	r3, r2, #28
  14046c:	e1b0ce03 	lsls	ip, r3, #28
  140470:	28b100f0 	ldmcs	r1!, {r4, r5, r6, r7}
  140474:	48b10300 	ldmmi	r1!, {r8, r9}
  140478:	28a000f0 	stmiacs	r0!, {r4, r5, r6, r7}
  14047c:	48a00300 	stmiami	r0!, {r8, r9}
  140480:	e3130004 	tst	r3, #4
  140484:	1491a004 	ldrne	sl, [r1], #4
  140488:	1480a004 	strne	sl, [r0], #4
  14048c:	e0422003 	sub	r2, r2, r3

00140490 <cached_aligned32>:
  140490:	e2522020 	subs	r2, r2, #32
  140494:	3a000004 	bcc	1404ac <less_than_32_left>
  140498:	e8b10ff0 	ldm	r1!, {r4, r5, r6, r7, r8, r9, sl, fp}
  14049c:	e2522020 	subs	r2, r2, #32
  1404a0:	e8a00ff0 	stmia	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  1404a4:	2afffffb 	bcs	140498 <cached_aligned32+0x8>
  1404a8:	e2822020 	add	r2, r2, #32

001404ac <less_than_32_left>:
  1404ac:	e312001f 	tst	r2, #31
  1404b0:	0a00000c 	beq	1404e8 <less_than_32_left+0x3c>
  1404b4:	e1b0ce02 	lsls	ip, r2, #28
  1404b8:	28b100f0 	ldmcs	r1!, {r4, r5, r6, r7}
  1404bc:	48b10300 	ldmmi	r1!, {r8, r9}
  1404c0:	28a000f0 	stmiacs	r0!, {r4, r5, r6, r7}
  1404c4:	48a00300 	stmiami	r0!, {r8, r9}
  1404c8:	e1b0cf02 	lsls	ip, r2, #30
  1404cc:	24913004 	ldrcs	r3, [r1], #4
  1404d0:	40d140b2 	ldrhmi	r4, [r1], #2
  1404d4:	24803004 	strcs	r3, [r0], #4
  1404d8:	40c040b2 	strhmi	r4, [r0], #2
  1404dc:	e3120001 	tst	r2, #1
  1404e0:	15d13000 	ldrbne	r3, [r1]
  1404e4:	15c03000 	strbne	r3, [r0]
  1404e8:	e8bd0fe0 	pop	{r5, r6, r7, r8, r9, sl, fp}
  1404ec:	e8bd4011 	pop	{r0, r4, lr}
  1404f0:	e12fff1e 	bx	lr

001404f4 <non_congruent>:
  1404f4:	e3520004 	cmp	r2, #4
  1404f8:	3a000078 	bcc	1406e0 <copy_last_3_and_return>
  1404fc:	e88d0fe0 	stm	sp, {r5, r6, r7, r8, r9, sl, fp}
  140500:	e2605000 	rsb	r5, r0, #0
  140504:	e2055003 	and	r5, r5, #3
  140508:	e1a0c185 	lsl	ip, r5, #3
  14050c:	e26ce020 	rsb	lr, ip, #32
  140510:	e4913004 	ldr	r3, [r1], #4
  140514:	e2422004 	sub	r2, r2, #4
  140518:	e1b05f85 	lsls	r5, r5, #31
  14051c:	44c03001 	strbmi	r3, [r0], #1
  140520:	41a03423 	lsrmi	r3, r3, #8
  140524:	24c03001 	strbcs	r3, [r0], #1
  140528:	21a03423 	lsrcs	r3, r3, #8
  14052c:	24c03001 	strbcs	r3, [r0], #1
  140530:	21a03423 	lsrcs	r3, r3, #8
  140534:	e3520004 	cmp	r2, #4
  140538:	3a000061 	bcc	1406c4 <partial_word_tail>
  14053c:	e310001c 	tst	r0, #28
  140540:	0a000007 	beq	140564 <non_congruent+0x70>
  140544:	e4915004 	ldr	r5, [r1], #4
  140548:	e2422004 	sub	r2, r2, #4
  14054c:	e1834e15 	orr	r4, r3, r5, lsl lr
  140550:	e1a03c35 	lsr	r3, r5, ip
  140554:	e4804004 	str	r4, [r0], #4
  140558:	e3520004 	cmp	r2, #4
  14055c:	2afffff6 	bcs	14053c <non_congruent+0x48>
  140560:	3a000057 	bcc	1406c4 <partial_word_tail>
  140564:	e2522020 	subs	r2, r2, #32
  140568:	3a00004a 	bcc	140698 <less_than_thirtytwo>
  14056c:	e35c0018 	cmp	ip, #24
  140570:	0a000031 	beq	14063c <loop24>
  140574:	e35c0008 	cmp	ip, #8
  140578:	0a000017 	beq	1405dc <loop8>

0014057c <loop16>:
  14057c:	e491c004 	ldr	ip, [r1], #4
  140580:	e1a0400c 	mov	r4, ip
  140584:	e8b10fe0 	ldm	r1!, {r5, r6, r7, r8, r9, sl, fp}
  140588:	e2522020 	subs	r2, r2, #32
  14058c:	2491c004 	ldrcs	ip, [r1], #4
  140590:	e1833804 	orr	r3, r3, r4, lsl #16
  140594:	e1a04824 	lsr	r4, r4, #16
  140598:	e1844805 	orr	r4, r4, r5, lsl #16
  14059c:	e1a05825 	lsr	r5, r5, #16
  1405a0:	e1855806 	orr	r5, r5, r6, lsl #16
  1405a4:	e1a06826 	lsr	r6, r6, #16
  1405a8:	e1866807 	orr	r6, r6, r7, lsl #16
  1405ac:	e1a07827 	lsr	r7, r7, #16
  1405b0:	e1877808 	orr	r7, r7, r8, lsl #16
  1405b4:	e1a08828 	lsr	r8, r8, #16
  1405b8:	e1888809 	orr	r8, r8, r9, lsl #16
  1405bc:	e1a09829 	lsr	r9, r9, #16
  1405c0:	e189980a 	orr	r9, r9, sl, lsl #16
  1405c4:	e1a0a82a 	lsr	sl, sl, #16
  1405c8:	e18aa80b 	orr	sl, sl, fp, lsl #16
  1405cc:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
  1405d0:	e1a0382b 	lsr	r3, fp, #16
  1405d4:	2affffe9 	bcs	140580 <loop16+0x4>
  1405d8:	ea00002e 	b	140698 <less_than_thirtytwo>

001405dc <loop8>:
  1405dc:	e491c004 	ldr	ip, [r1], #4
  1405e0:	e1a0400c 	mov	r4, ip
  1405e4:	e8b10fe0 	ldm	r1!, {r5, r6, r7, r8, r9, sl, fp}
  1405e8:	e2522020 	subs	r2, r2, #32
  1405ec:	2491c004 	ldrcs	ip, [r1], #4
  1405f0:	e1833c04 	orr	r3, r3, r4, lsl #24
  1405f4:	e1a04424 	lsr	r4, r4, #8
  1405f8:	e1844c05 	orr	r4, r4, r5, lsl #24
  1405fc:	e1a05425 	lsr	r5, r5, #8
  140600:	e1855c06 	orr	r5, r5, r6, lsl #24
  140604:	e1a06426 	lsr	r6, r6, #8
  140608:	e1866c07 	orr	r6, r6, r7, lsl #24
  14060c:	e1a07427 	lsr	r7, r7, #8
  140610:	e1877c08 	orr	r7, r7, r8, lsl #24
  140614:	e1a08428 	lsr	r8, r8, #8
  140618:	e1888c09 	orr	r8, r8, r9, lsl #24
  14061c:	e1a09429 	lsr	r9, r9, #8
  140620:	e1899c0a 	orr	r9, r9, sl, lsl #24
  140624:	e1a0a42a 	lsr	sl, sl, #8
  140628:	e18aac0b 	orr	sl, sl, fp, lsl #24
  14062c:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
  140630:	e1a0342b 	lsr	r3, fp, #8
  140634:	2affffe9 	bcs	1405e0 <loop8+0x4>
  140638:	ea000016 	b	140698 <less_than_thirtytwo>

0014063c <loop24>:
  14063c:	e491c004 	ldr	ip, [r1], #4
  140640:	e1a0400c 	mov	r4, ip
  140644:	e8b10fe0 	ldm	r1!, {r5, r6, r7, r8, r9, sl, fp}
  140648:	e2522020 	subs	r2, r2, #32
  14064c:	2491c004 	ldrcs	ip, [r1], #4
  140650:	e1833404 	orr	r3, r3, r4, lsl #8
  140654:	e1a04c24 	lsr	r4, r4, #24
  140658:	e1844405 	orr	r4, r4, r5, lsl #8
  14065c:	e1a05c25 	lsr	r5, r5, #24
  140660:	e1855406 	orr	r5, r5, r6, lsl #8
  140664:	e1a06c26 	lsr	r6, r6, #24
  140668:	e1866407 	orr	r6, r6, r7, lsl #8
  14066c:	e1a07c27 	lsr	r7, r7, #24
  140670:	e1877408 	orr	r7, r7, r8, lsl #8
  140674:	e1a08c28 	lsr	r8, r8, #24
  140678:	e1888409 	orr	r8, r8, r9, lsl #8
  14067c:	e1a09c29 	lsr	r9, r9, #24
  140680:	e189940a 	orr	r9, r9, sl, lsl #8
  140684:	e1a0ac2a 	lsr	sl, sl, #24
  140688:	e18aa40b 	orr	sl, sl, fp, lsl #8
  14068c:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
  140690:	e1a03c2b 	lsr	r3, fp, #24
  140694:	2affffe9 	bcs	140640 <loop24+0x4>

00140698 <less_than_thirtytwo>:
  140698:	e26ec020 	rsb	ip, lr, #32
  14069c:	e2822020 	add	r2, r2, #32
  1406a0:	e3520004 	cmp	r2, #4
  1406a4:	3a000006 	bcc	1406c4 <partial_word_tail>
  1406a8:	e4915004 	ldr	r5, [r1], #4
  1406ac:	e2422004 	sub	r2, r2, #4
  1406b0:	e1834e15 	orr	r4, r3, r5, lsl lr
  1406b4:	e1a03c35 	lsr	r3, r5, ip
  1406b8:	e4804004 	str	r4, [r0], #4
  1406bc:	e3520004 	cmp	r2, #4
  1406c0:	2afffff8 	bcs	1406a8 <less_than_thirtytwo+0x10>

001406c4 <partial_word_tail>:
  1406c4:	e1b05e0e 	lsls	r5, lr, #28
  1406c8:	44c03001 	strbmi	r3, [r0], #1
  1406cc:	41a03423 	lsrmi	r3, r3, #8
  1406d0:	24c03001 	strbcs	r3, [r0], #1
  1406d4:	21a03423 	lsrcs	r3, r3, #8
  1406d8:	24c03001 	strbcs	r3, [r0], #1
  1406dc:	e89d0fe0 	ldm	sp, {r5, r6, r7, r8, r9, sl, fp}

001406e0 <copy_last_3_and_return>:
  1406e0:	e1b02f82 	lsls	r2, r2, #31
  1406e4:	44d12001 	ldrbmi	r2, [r1], #1
  1406e8:	24d13001 	ldrbcs	r3, [r1], #1
  1406ec:	25d1c000 	ldrbcs	ip, [r1]
  1406f0:	44c02001 	strbmi	r2, [r0], #1
  1406f4:	24c03001 	strbcs	r3, [r0], #1
  1406f8:	25c0c000 	strbcs	ip, [r0]
  1406fc:	e28dd01c 	add	sp, sp, #28
  140700:	e8bd4011 	pop	{r0, r4, lr}
  140704:	e12fff1e 	bx	lr

00140708 <memcmp>:
  140708:	e3520000 	cmp	r2, #0
  14070c:	0a00000c 	beq	140744 <memcmp+0x3c>
  140710:	e5d0c000 	ldrb	ip, [r0]
  140714:	e5d13000 	ldrb	r3, [r1]
  140718:	e153000c 	cmp	r3, ip
  14071c:	1a00000a 	bne	14074c <memcmp+0x44>
  140720:	e2422001 	sub	r2, r2, #1
  140724:	e0812002 	add	r2, r1, r2
  140728:	ea000003 	b	14073c <memcmp+0x34>
  14072c:	e5f0c001 	ldrb	ip, [r0, #1]!
  140730:	e5f13001 	ldrb	r3, [r1, #1]!
  140734:	e15c0003 	cmp	ip, r3
  140738:	1a000003 	bne	14074c <memcmp+0x44>
  14073c:	e1510002 	cmp	r1, r2
  140740:	1afffff9 	bne	14072c <memcmp+0x24>
  140744:	e3a00000 	mov	r0, #0
  140748:	e12fff1e 	bx	lr
  14074c:	e04c0003 	sub	r0, ip, r3
  140750:	e12fff1e 	bx	lr

00140754 <memmove>:
  140754:	e1500001 	cmp	r0, r1
  140758:	e92d4030 	push	{r4, r5, lr}
  14075c:	e1a0e000 	mov	lr, r0
  140760:	0a000030 	beq	140828 <memmove+0xd4>
  140764:	e0414000 	sub	r4, r1, r0
  140768:	e0444002 	sub	r4, r4, r2
  14076c:	e0625f82 	rsb	r5, r2, r2, lsl #31
  140770:	e1540085 	cmp	r4, r5, lsl #1
  140774:	e1a0c001 	mov	ip, r1
  140778:	e1a03002 	mov	r3, r2
  14077c:	9a000054 	bls	1408d4 <memmove+0x180>
  140780:	e0212000 	eor	r2, r1, r0
  140784:	e1500001 	cmp	r0, r1
  140788:	e2022003 	and	r2, r2, #3
  14078c:	2a000027 	bcs	140830 <memmove+0xdc>
  140790:	e3520000 	cmp	r2, #0
  140794:	1a00001a 	bne	140804 <memmove+0xb0>
  140798:	e3100003 	tst	r0, #3
  14079c:	0a000050 	beq	1408e4 <memmove+0x190>
  1407a0:	e3530000 	cmp	r3, #0
  1407a4:	11a02000 	movne	r2, r0
  1407a8:	e2433001 	sub	r3, r3, #1
  1407ac:	1a000002 	bne	1407bc <memmove+0x68>
  1407b0:	ea00001c 	b	140828 <memmove+0xd4>
  1407b4:	e2533001 	subs	r3, r3, #1
  1407b8:	3a00001a 	bcc	140828 <memmove+0xd4>
  1407bc:	e4dc1001 	ldrb	r1, [ip], #1
  1407c0:	e4c21001 	strb	r1, [r2], #1
  1407c4:	e3120003 	tst	r2, #3
  1407c8:	1afffff9 	bne	1407b4 <memmove+0x60>
  1407cc:	e3530003 	cmp	r3, #3
  1407d0:	9a00000c 	bls	140808 <memmove+0xb4>
  1407d4:	e2435004 	sub	r5, r3, #4
  1407d8:	e3c55003 	bic	r5, r5, #3
  1407dc:	e2855004 	add	r5, r5, #4
  1407e0:	e0824005 	add	r4, r2, r5
  1407e4:	e24c1004 	sub	r1, ip, #4
  1407e8:	e5b10004 	ldr	r0, [r1, #4]!
  1407ec:	e4820004 	str	r0, [r2], #4
  1407f0:	e1540002 	cmp	r4, r2
  1407f4:	1afffffb 	bne	1407e8 <memmove+0x94>
  1407f8:	e2033003 	and	r3, r3, #3
  1407fc:	e08cc005 	add	ip, ip, r5
  140800:	ea000000 	b	140808 <memmove+0xb4>
  140804:	e1a02000 	mov	r2, r0
  140808:	e3530000 	cmp	r3, #0
  14080c:	12422001 	subne	r2, r2, #1
  140810:	108c3003 	addne	r3, ip, r3
  140814:	0a000003 	beq	140828 <memmove+0xd4>
  140818:	e4dc1001 	ldrb	r1, [ip], #1
  14081c:	e153000c 	cmp	r3, ip
  140820:	e5e21001 	strb	r1, [r2, #1]!
  140824:	1afffffb 	bne	140818 <memmove+0xc4>
  140828:	e1a0000e 	mov	r0, lr
  14082c:	e8bd8030 	pop	{r4, r5, pc}
  140830:	e3520000 	cmp	r2, #0
  140834:	1a00001c 	bne	1408ac <memmove+0x158>
  140838:	e0801003 	add	r1, r0, r3
  14083c:	e3110003 	tst	r1, #3
  140840:	0a000025 	beq	1408dc <memmove+0x188>
  140844:	e3530000 	cmp	r3, #0
  140848:	e2432001 	sub	r2, r3, #1
  14084c:	0afffff5 	beq	140828 <memmove+0xd4>
  140850:	e08c3003 	add	r3, ip, r3
  140854:	ea000001 	b	140860 <memmove+0x10c>
  140858:	e2522001 	subs	r2, r2, #1
  14085c:	3afffff1 	bcc	140828 <memmove+0xd4>
  140860:	e5730001 	ldrb	r0, [r3, #-1]!
  140864:	e5610001 	strb	r0, [r1, #-1]!
  140868:	e3110003 	tst	r1, #3
  14086c:	1afffff9 	bne	140858 <memmove+0x104>
  140870:	e3520003 	cmp	r2, #3
  140874:	91a03002 	movls	r3, r2
  140878:	9a00000b 	bls	1408ac <memmove+0x158>
  14087c:	e24c0004 	sub	r0, ip, #4
  140880:	e2423004 	sub	r3, r2, #4
  140884:	e3c33003 	bic	r3, r3, #3
  140888:	e0800002 	add	r0, r0, r2
  14088c:	e0400003 	sub	r0, r0, r3
  140890:	e08e1002 	add	r1, lr, r2
  140894:	e08c3002 	add	r3, ip, r2
  140898:	e5334004 	ldr	r4, [r3, #-4]!
  14089c:	e1530000 	cmp	r3, r0
  1408a0:	e5214004 	str	r4, [r1, #-4]!
  1408a4:	1afffffb 	bne	140898 <memmove+0x144>
  1408a8:	e2023003 	and	r3, r2, #3
  1408ac:	e3530000 	cmp	r3, #0
  1408b0:	108c2003 	addne	r2, ip, r3
  1408b4:	108e3003 	addne	r3, lr, r3
  1408b8:	0affffda 	beq	140828 <memmove+0xd4>
  1408bc:	e5721001 	ldrb	r1, [r2, #-1]!
  1408c0:	e15c0002 	cmp	ip, r2
  1408c4:	e5631001 	strb	r1, [r3, #-1]!
  1408c8:	1afffffb 	bne	1408bc <memmove+0x168>
  1408cc:	e1a0000e 	mov	r0, lr
  1408d0:	e8bd8030 	pop	{r4, r5, pc}
  1408d4:	e8bd4030 	pop	{r4, r5, lr}
  1408d8:	eafffecb 	b	14040c <memcpy>
  1408dc:	e1a02003 	mov	r2, r3
  1408e0:	eaffffe2 	b	140870 <memmove+0x11c>
  1408e4:	e1a02000 	mov	r2, r0
  1408e8:	eaffffb7 	b	1407cc <memmove+0x78>

001408ec <memset>:
  1408ec:	e3520000 	cmp	r2, #0
  1408f0:	012fff1e 	bxeq	lr
  1408f4:	e1a03000 	mov	r3, r0
  1408f8:	e20110ff 	and	r1, r1, #255	; 0xff
  1408fc:	e6c31002 	strb	r1, [r3], r2
  140900:	e3520002 	cmp	r2, #2
  140904:	e5431001 	strb	r1, [r3, #-1]
  140908:	912fff1e 	bxls	lr
  14090c:	e3520006 	cmp	r2, #6
  140910:	e5c01001 	strb	r1, [r0, #1]
  140914:	e5c01002 	strb	r1, [r0, #2]
  140918:	e5431002 	strb	r1, [r3, #-2]
  14091c:	e5431003 	strb	r1, [r3, #-3]
  140920:	912fff1e 	bxls	lr
  140924:	e3520008 	cmp	r2, #8
  140928:	e5c01003 	strb	r1, [r0, #3]
  14092c:	e5431004 	strb	r1, [r3, #-4]
  140930:	912fff1e 	bxls	lr
  140934:	e260c000 	rsb	ip, r0, #0
  140938:	e20cc003 	and	ip, ip, #3
  14093c:	e042200c 	sub	r2, r2, ip
  140940:	e3c22003 	bic	r2, r2, #3
  140944:	e0811401 	add	r1, r1, r1, lsl #8
  140948:	e080300c 	add	r3, r0, ip
  14094c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  140950:	e0811801 	add	r1, r1, r1, lsl #16
  140954:	e3520008 	cmp	r2, #8
  140958:	e083e002 	add	lr, r3, r2
  14095c:	e780100c 	str	r1, [r0, ip]
  140960:	e50e1004 	str	r1, [lr, #-4]
  140964:	98bd80f0 	popls	{r4, r5, r6, r7, pc}
  140968:	e3520018 	cmp	r2, #24
  14096c:	e5831004 	str	r1, [r3, #4]
  140970:	e5831008 	str	r1, [r3, #8]
  140974:	e50e100c 	str	r1, [lr, #-12]
  140978:	e50e1008 	str	r1, [lr, #-8]
  14097c:	98bd80f0 	popls	{r4, r5, r6, r7, pc}
  140980:	e3a04000 	mov	r4, #0
  140984:	e203c004 	and	ip, r3, #4
  140988:	e28cc018 	add	ip, ip, #24
  14098c:	e042200c 	sub	r2, r2, ip
  140990:	e352001f 	cmp	r2, #31
  140994:	e583100c 	str	r1, [r3, #12]
  140998:	e5831010 	str	r1, [r3, #16]
  14099c:	e5831014 	str	r1, [r3, #20]
  1409a0:	e5831018 	str	r1, [r3, #24]
  1409a4:	e1a05001 	mov	r5, r1
  1409a8:	e50e101c 	str	r1, [lr, #-28]	; 0xffffffe4
  1409ac:	e50e1018 	str	r1, [lr, #-24]	; 0xffffffe8
  1409b0:	e50e1014 	str	r1, [lr, #-20]	; 0xffffffec
  1409b4:	e50e1010 	str	r1, [lr, #-16]
  1409b8:	e1846001 	orr	r6, r4, r1
  1409bc:	e1a07001 	mov	r7, r1
  1409c0:	e083100c 	add	r1, r3, ip
  1409c4:	98bd80f0 	popls	{r4, r5, r6, r7, pc}
  1409c8:	e2422020 	sub	r2, r2, #32
  1409cc:	e3c2301f 	bic	r3, r2, #31
  1409d0:	e2812040 	add	r2, r1, #64	; 0x40
  1409d4:	e0833002 	add	r3, r3, r2
  1409d8:	e2812020 	add	r2, r1, #32
  1409dc:	e5026020 	str	r6, [r2, #-32]	; 0xffffffe0
  1409e0:	e502701c 	str	r7, [r2, #-28]	; 0xffffffe4
  1409e4:	e5026018 	str	r6, [r2, #-24]	; 0xffffffe8
  1409e8:	e5027014 	str	r7, [r2, #-20]	; 0xffffffec
  1409ec:	e5026010 	str	r6, [r2, #-16]
  1409f0:	e502700c 	str	r7, [r2, #-12]
  1409f4:	e90200c0 	stmdb	r2, {r6, r7}
  1409f8:	e2822020 	add	r2, r2, #32
  1409fc:	e1520003 	cmp	r2, r3
  140a00:	1afffff5 	bne	1409dc <memset+0xf0>
  140a04:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00140a08 <strcasecmp>:
  140a08:	e92d4070 	push	{r4, r5, r6, lr}
  140a0c:	e1a05000 	mov	r5, r0
  140a10:	e5d00000 	ldrb	r0, [r0]
  140a14:	e1a04001 	mov	r4, r1
  140a18:	e3500000 	cmp	r0, #0
  140a1c:	1a00000c 	bne	140a54 <strcasecmp+0x4c>
  140a20:	ea00000e 	b	140a60 <strcasecmp+0x58>
  140a24:	e1500003 	cmp	r0, r3
  140a28:	0a000005 	beq	140a44 <strcasecmp+0x3c>
  140a2c:	eb00067f 	bl	142430 <tolower>
  140a30:	e1a06000 	mov	r6, r0
  140a34:	e5d40000 	ldrb	r0, [r4]
  140a38:	eb00067c 	bl	142430 <tolower>
  140a3c:	e1560000 	cmp	r6, r0
  140a40:	1a00000c 	bne	140a78 <strcasecmp+0x70>
  140a44:	e5f50001 	ldrb	r0, [r5, #1]!
  140a48:	e2844001 	add	r4, r4, #1
  140a4c:	e3500000 	cmp	r0, #0
  140a50:	0a000002 	beq	140a60 <strcasecmp+0x58>
  140a54:	e5d43000 	ldrb	r3, [r4]
  140a58:	e3530000 	cmp	r3, #0
  140a5c:	1afffff0 	bne	140a24 <strcasecmp+0x1c>
  140a60:	eb000672 	bl	142430 <tolower>
  140a64:	e1a05000 	mov	r5, r0
  140a68:	e5d40000 	ldrb	r0, [r4]
  140a6c:	eb00066f 	bl	142430 <tolower>
  140a70:	e0450000 	sub	r0, r5, r0
  140a74:	e8bd8070 	pop	{r4, r5, r6, pc}
  140a78:	e5d50000 	ldrb	r0, [r5]
  140a7c:	eafffff7 	b	140a60 <strcasecmp+0x58>

00140a80 <__strcasecmp_l>:
  140a80:	eaffffe0 	b	140a08 <strcasecmp>

00140a84 <strcat>:
  140a84:	e92d4070 	push	{r4, r5, r6, lr}
  140a88:	e1a04000 	mov	r4, r0
  140a8c:	e1a05001 	mov	r5, r1
  140a90:	eb000026 	bl	140b30 <strlen>
  140a94:	e1a01005 	mov	r1, r5
  140a98:	e0840000 	add	r0, r4, r0
  140a9c:	eb000012 	bl	140aec <strcpy>
  140aa0:	e1a00004 	mov	r0, r4
  140aa4:	e8bd8070 	pop	{r4, r5, r6, pc}

00140aa8 <strcmp>:
  140aa8:	e5d02000 	ldrb	r2, [r0]
  140aac:	e5d13000 	ldrb	r3, [r1]
  140ab0:	e1530002 	cmp	r3, r2
  140ab4:	0a000004 	beq	140acc <strcmp+0x24>
  140ab8:	ea000009 	b	140ae4 <strcmp+0x3c>
  140abc:	e5f03001 	ldrb	r3, [r0, #1]!
  140ac0:	e5f12001 	ldrb	r2, [r1, #1]!
  140ac4:	e1530002 	cmp	r3, r2
  140ac8:	1a000003 	bne	140adc <strcmp+0x34>
  140acc:	e3530000 	cmp	r3, #0
  140ad0:	1afffff9 	bne	140abc <strcmp+0x14>
  140ad4:	e1a00003 	mov	r0, r3
  140ad8:	e12fff1e 	bx	lr
  140adc:	e0430002 	sub	r0, r3, r2
  140ae0:	e12fff1e 	bx	lr
  140ae4:	e0420003 	sub	r0, r2, r3
  140ae8:	e12fff1e 	bx	lr

00140aec <strcpy>:
  140aec:	e92d4010 	push	{r4, lr}
  140af0:	e1a04000 	mov	r4, r0
  140af4:	eb000a94 	bl	14354c <__stpcpy>
  140af8:	e1a00004 	mov	r0, r4
  140afc:	e8bd8010 	pop	{r4, pc}

00140b00 <strdup>:
  140b00:	e92d4070 	push	{r4, r5, r6, lr}
  140b04:	e1a05000 	mov	r5, r0
  140b08:	eb000008 	bl	140b30 <strlen>
  140b0c:	e2804001 	add	r4, r0, #1
  140b10:	e1a00004 	mov	r0, r4
  140b14:	ebffefac 	bl	13c9cc <malloc>
  140b18:	e3500000 	cmp	r0, #0
  140b1c:	08bd8070 	popeq	{r4, r5, r6, pc}
  140b20:	e1a02004 	mov	r2, r4
  140b24:	e1a01005 	mov	r1, r5
  140b28:	e8bd4070 	pop	{r4, r5, r6, lr}
  140b2c:	eafffe36 	b	14040c <memcpy>

00140b30 <strlen>:
  140b30:	e3100003 	tst	r0, #3
  140b34:	0a000023 	beq	140bc8 <strlen+0x98>
  140b38:	e5d03000 	ldrb	r3, [r0]
  140b3c:	e3530000 	cmp	r3, #0
  140b40:	12803001 	addne	r3, r0, #1
  140b44:	1a000005 	bne	140b60 <strlen+0x30>
  140b48:	ea000020 	b	140bd0 <strlen+0xa0>
  140b4c:	e5d31000 	ldrb	r1, [r3]
  140b50:	e283c001 	add	ip, r3, #1
  140b54:	e3510000 	cmp	r1, #0
  140b58:	0a000018 	beq	140bc0 <strlen+0x90>
  140b5c:	e1a0300c 	mov	r3, ip
  140b60:	e3130003 	tst	r3, #3
  140b64:	e1a02003 	mov	r2, r3
  140b68:	1afffff7 	bne	140b4c <strlen+0x1c>
  140b6c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  140b70:	e59fe060 	ldr	lr, [pc, #96]	; 140bd8 <strlen+0xa8>
  140b74:	e592c000 	ldr	ip, [r2]
  140b78:	e59f305c 	ldr	r3, [pc, #92]	; 140bdc <strlen+0xac>
  140b7c:	e08c100e 	add	r1, ip, lr
  140b80:	e1c1100c 	bic	r1, r1, ip
  140b84:	e1110003 	tst	r1, r3
  140b88:	1a000004 	bne	140ba0 <strlen+0x70>
  140b8c:	e5b2c004 	ldr	ip, [r2, #4]!
  140b90:	e08c100e 	add	r1, ip, lr
  140b94:	e1c1100c 	bic	r1, r1, ip
  140b98:	e1110003 	tst	r1, r3
  140b9c:	0afffffa 	beq	140b8c <strlen+0x5c>
  140ba0:	e5d23000 	ldrb	r3, [r2]
  140ba4:	e3530000 	cmp	r3, #0
  140ba8:	0a000002 	beq	140bb8 <strlen+0x88>
  140bac:	e5f23001 	ldrb	r3, [r2, #1]!
  140bb0:	e3530000 	cmp	r3, #0
  140bb4:	1afffffc 	bne	140bac <strlen+0x7c>
  140bb8:	e0420000 	sub	r0, r2, r0
  140bbc:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
  140bc0:	e0430000 	sub	r0, r3, r0
  140bc4:	e12fff1e 	bx	lr
  140bc8:	e1a02000 	mov	r2, r0
  140bcc:	eaffffe6 	b	140b6c <strlen+0x3c>
  140bd0:	e1a00003 	mov	r0, r3
  140bd4:	e12fff1e 	bx	lr
  140bd8:	fefefeff 	.word	0xfefefeff
  140bdc:	80808080 	.word	0x80808080

00140be0 <strncmp>:
  140be0:	e3520000 	cmp	r2, #0
  140be4:	0a00001e 	beq	140c64 <strncmp+0x84>
  140be8:	e92d4010 	push	{r4, lr}
  140bec:	e5d04000 	ldrb	r4, [r0]
  140bf0:	e5d1c000 	ldrb	ip, [r1]
  140bf4:	e3540000 	cmp	r4, #0
  140bf8:	0a00001b 	beq	140c6c <strncmp+0x8c>
  140bfc:	e3520001 	cmp	r2, #1
  140c00:	135c0000 	cmpne	ip, #0
  140c04:	13a03001 	movne	r3, #1
  140c08:	03a03000 	moveq	r3, #0
  140c0c:	e154000c 	cmp	r4, ip
  140c10:	13a03000 	movne	r3, #0
  140c14:	02033001 	andeq	r3, r3, #1
  140c18:	e3530000 	cmp	r3, #0
  140c1c:	e242e001 	sub	lr, r2, #1
  140c20:	0a000011 	beq	140c6c <strncmp+0x8c>
  140c24:	e5f02001 	ldrb	r2, [r0, #1]!
  140c28:	e24ee001 	sub	lr, lr, #1
  140c2c:	e3520000 	cmp	r2, #0
  140c30:	e5f1c001 	ldrb	ip, [r1, #1]!
  140c34:	0a000008 	beq	140c5c <strncmp+0x7c>
  140c38:	e042300c 	sub	r3, r2, ip
  140c3c:	e16f3f13 	clz	r3, r3
  140c40:	e35c0000 	cmp	ip, #0
  140c44:	e1a032a3 	lsr	r3, r3, #5
  140c48:	03a03000 	moveq	r3, #0
  140c4c:	e35e0000 	cmp	lr, #0
  140c50:	03a03000 	moveq	r3, #0
  140c54:	e3530000 	cmp	r3, #0
  140c58:	1afffff1 	bne	140c24 <strncmp+0x44>
  140c5c:	e042000c 	sub	r0, r2, ip
  140c60:	e8bd8010 	pop	{r4, pc}
  140c64:	e1a00002 	mov	r0, r2
  140c68:	e12fff1e 	bx	lr
  140c6c:	e1a02004 	mov	r2, r4
  140c70:	eafffff9 	b	140c5c <strncmp+0x7c>

00140c74 <strncpy>:
  140c74:	e92d4010 	push	{r4, lr}
  140c78:	e1a04000 	mov	r4, r0
  140c7c:	eb000a63 	bl	143610 <__stpncpy>
  140c80:	e1a00004 	mov	r0, r4
  140c84:	e8bd8010 	pop	{r4, pc}

00140c88 <strnlen>:
  140c88:	e92d4070 	push	{r4, r5, r6, lr}
  140c8c:	e1a04001 	mov	r4, r1
  140c90:	e3a01000 	mov	r1, #0
  140c94:	e1a02004 	mov	r2, r4
  140c98:	e1a05000 	mov	r5, r0
  140c9c:	eb0009d4 	bl	1433f4 <memchr>
  140ca0:	e3500000 	cmp	r0, #0
  140ca4:	10400005 	subne	r0, r0, r5
  140ca8:	01a00004 	moveq	r0, r4
  140cac:	e8bd8070 	pop	{r4, r5, r6, pc}

00140cb0 <twoway_strstr>:
  140cb0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  140cb4:	e1a08001 	mov	r8, r1
  140cb8:	e24dde43 	sub	sp, sp, #1072	; 0x430
  140cbc:	e24dd004 	sub	sp, sp, #4
  140cc0:	e1a09000 	mov	r9, r0
  140cc4:	e3a02020 	mov	r2, #32
  140cc8:	e3a01000 	mov	r1, #0
  140ccc:	e28d0010 	add	r0, sp, #16
  140cd0:	ebffff05 	bl	1408ec <memset>
  140cd4:	e5d83000 	ldrb	r3, [r8]
  140cd8:	e3530000 	cmp	r3, #0
  140cdc:	0a0000c8 	beq	141004 <twoway_strstr+0x354>
  140ce0:	e5d92000 	ldrb	r2, [r9]
  140ce4:	e3520000 	cmp	r2, #0
  140ce8:	11a0c008 	movne	ip, r8
  140cec:	11a0e009 	movne	lr, r9
  140cf0:	13a05000 	movne	r5, #0
  140cf4:	13a06001 	movne	r6, #1
  140cf8:	1a000003 	bne	140d0c <twoway_strstr+0x5c>
  140cfc:	ea000075 	b	140ed8 <twoway_strstr+0x228>
  140d00:	e5fe2001 	ldrb	r2, [lr, #1]!
  140d04:	e3520000 	cmp	r2, #0
  140d08:	0a000072 	beq	140ed8 <twoway_strstr+0x228>
  140d0c:	e28d1e43 	add	r1, sp, #1072	; 0x430
  140d10:	e1a022a3 	lsr	r2, r3, #5
  140d14:	e0812102 	add	r2, r1, r2, lsl #2
  140d18:	e0810103 	add	r0, r1, r3, lsl #2
  140d1c:	e203401f 	and	r4, r3, #31
  140d20:	e5121420 	ldr	r1, [r2, #-1056]	; 0xfffffbe0
  140d24:	e5fc3001 	ldrb	r3, [ip, #1]!
  140d28:	e2855001 	add	r5, r5, #1
  140d2c:	e1811416 	orr	r1, r1, r6, lsl r4
  140d30:	e3530000 	cmp	r3, #0
  140d34:	e5005400 	str	r5, [r0, #-1024]	; 0xfffffc00
  140d38:	e5021420 	str	r1, [r2, #-1056]	; 0xfffffbe0
  140d3c:	1affffef 	bne	140d00 <twoway_strstr+0x50>
  140d40:	e3a00001 	mov	r0, #1
  140d44:	e3e0c000 	mvn	ip, #0
  140d48:	e1a01000 	mov	r1, r0
  140d4c:	e0832001 	add	r2, r3, r1
  140d50:	e1550002 	cmp	r5, r2
  140d54:	e088e00c 	add	lr, r8, ip
  140d58:	9a00000b 	bls	140d8c <twoway_strstr+0xdc>
  140d5c:	e7de4001 	ldrb	r4, [lr, r1]
  140d60:	e7d8e002 	ldrb	lr, [r8, r2]
  140d64:	e154000e 	cmp	r4, lr
  140d68:	0a00008f 	beq	140fac <twoway_strstr+0x2fc>
  140d6c:	9a000096 	bls	140fcc <twoway_strstr+0x31c>
  140d70:	e042000c 	sub	r0, r2, ip
  140d74:	e1a03002 	mov	r3, r2
  140d78:	e3a01001 	mov	r1, #1
  140d7c:	e0832001 	add	r2, r3, r1
  140d80:	e1550002 	cmp	r5, r2
  140d84:	e088e00c 	add	lr, r8, ip
  140d88:	8afffff3 	bhi	140d5c <twoway_strstr+0xac>
  140d8c:	e3a06001 	mov	r6, #1
  140d90:	e3a01000 	mov	r1, #0
  140d94:	e1a02006 	mov	r2, r6
  140d98:	e3e0a000 	mvn	sl, #0
  140d9c:	e0813002 	add	r3, r1, r2
  140da0:	e1550003 	cmp	r5, r3
  140da4:	e088e002 	add	lr, r8, r2
  140da8:	9a00000b 	bls	140ddc <twoway_strstr+0x12c>
  140dac:	e7de400a 	ldrb	r4, [lr, sl]
  140db0:	e7d8e003 	ldrb	lr, [r8, r3]
  140db4:	e154000e 	cmp	r4, lr
  140db8:	0a00007f 	beq	140fbc <twoway_strstr+0x30c>
  140dbc:	2a000087 	bcs	140fe0 <twoway_strstr+0x330>
  140dc0:	e043600a 	sub	r6, r3, sl
  140dc4:	e3a02001 	mov	r2, #1
  140dc8:	e1a01003 	mov	r1, r3
  140dcc:	e0813002 	add	r3, r1, r2
  140dd0:	e1550003 	cmp	r5, r3
  140dd4:	e088e002 	add	lr, r8, r2
  140dd8:	8afffff3 	bhi	140dac <twoway_strstr+0xfc>
  140ddc:	e58d6008 	str	r6, [sp, #8]
  140de0:	e28a2001 	add	r2, sl, #1
  140de4:	e28c3001 	add	r3, ip, #1
  140de8:	e1520003 	cmp	r2, r3
  140dec:	91a0b003 	movls	fp, r3
  140df0:	81a0b002 	movhi	fp, r2
  140df4:	e59d3008 	ldr	r3, [sp, #8]
  140df8:	91a03000 	movls	r3, r0
  140dfc:	e1a0200b 	mov	r2, fp
  140e00:	e0881003 	add	r1, r8, r3
  140e04:	e1a00008 	mov	r0, r8
  140e08:	91a0a00c 	movls	sl, ip
  140e0c:	e58d3008 	str	r3, [sp, #8]
  140e10:	ebfffe3c 	bl	140708 <memcmp>
  140e14:	e3500000 	cmp	r0, #0
  140e18:	0a000075 	beq	140ff4 <twoway_strstr+0x344>
  140e1c:	e2452001 	sub	r2, r5, #1
  140e20:	e042200a 	sub	r2, r2, sl
  140e24:	e152000a 	cmp	r2, sl
  140e28:	e3a03000 	mov	r3, #0
  140e2c:	31a0200a 	movcc	r2, sl
  140e30:	e58d300c 	str	r3, [sp, #12]
  140e34:	e2823001 	add	r3, r2, #1
  140e38:	e58d3008 	str	r3, [sp, #8]
  140e3c:	e1a04009 	mov	r4, r9
  140e40:	e3a06000 	mov	r6, #0
  140e44:	e3a07001 	mov	r7, #1
  140e48:	e385303f 	orr	r3, r5, #63	; 0x3f
  140e4c:	e58d3004 	str	r3, [sp, #4]
  140e50:	e0493004 	sub	r3, r9, r4
  140e54:	e1530005 	cmp	r3, r5
  140e58:	3a000014 	bcc	140eb0 <twoway_strstr+0x200>
  140e5c:	e0841005 	add	r1, r4, r5
  140e60:	e5513001 	ldrb	r3, [r1, #-1]
  140e64:	e28d0e43 	add	r0, sp, #1072	; 0x430
  140e68:	e1a022a3 	lsr	r2, r3, #5
  140e6c:	e0802102 	add	r2, r0, r2, lsl #2
  140e70:	e5122420 	ldr	r2, [r2, #-1056]	; 0xfffffbe0
  140e74:	e203001f 	and	r0, r3, #31
  140e78:	e0122017 	ands	r2, r2, r7, lsl r0
  140e7c:	0a000040 	beq	140f84 <twoway_strstr+0x2d4>
  140e80:	e28d2e43 	add	r2, sp, #1072	; 0x430
  140e84:	e0823103 	add	r3, r2, r3, lsl #2
  140e88:	e5133400 	ldr	r3, [r3, #-1024]	; 0xfffffc00
  140e8c:	e0553003 	subs	r3, r5, r3
  140e90:	0a000015 	beq	140eec <twoway_strstr+0x23c>
  140e94:	e1560003 	cmp	r6, r3
  140e98:	20844006 	addcs	r4, r4, r6
  140e9c:	30844003 	addcc	r4, r4, r3
  140ea0:	e0493004 	sub	r3, r9, r4
  140ea4:	e1530005 	cmp	r3, r5
  140ea8:	e3a06000 	mov	r6, #0
  140eac:	2affffea 	bcs	140e5c <twoway_strstr+0x1ac>
  140eb0:	e59d2004 	ldr	r2, [sp, #4]
  140eb4:	e3a01000 	mov	r1, #0
  140eb8:	e1a00009 	mov	r0, r9
  140ebc:	eb00094c 	bl	1433f4 <memchr>
  140ec0:	e3500000 	cmp	r0, #0
  140ec4:	0a000035 	beq	140fa0 <twoway_strstr+0x2f0>
  140ec8:	e0403004 	sub	r3, r0, r4
  140ecc:	e1530005 	cmp	r3, r5
  140ed0:	21a09000 	movcs	r9, r0
  140ed4:	2affffe0 	bcs	140e5c <twoway_strstr+0x1ac>
  140ed8:	e3a04000 	mov	r4, #0
  140edc:	e1a00004 	mov	r0, r4
  140ee0:	e28dde43 	add	sp, sp, #1072	; 0x430
  140ee4:	e28dd004 	add	sp, sp, #4
  140ee8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  140eec:	e156000b 	cmp	r6, fp
  140ef0:	21a03006 	movcs	r3, r6
  140ef4:	31a0300b 	movcc	r3, fp
  140ef8:	e7d82003 	ldrb	r2, [r8, r3]
  140efc:	e0881003 	add	r1, r8, r3
  140f00:	e3520000 	cmp	r2, #0
  140f04:	0a00000b 	beq	140f38 <twoway_strstr+0x288>
  140f08:	e7d4c003 	ldrb	ip, [r4, r3]
  140f0c:	e0840003 	add	r0, r4, r3
  140f10:	e15c0002 	cmp	ip, r2
  140f14:	0a000003 	beq	140f28 <twoway_strstr+0x278>
  140f18:	ea00001c 	b	140f90 <twoway_strstr+0x2e0>
  140f1c:	e5f0c001 	ldrb	ip, [r0, #1]!
  140f20:	e15c0002 	cmp	ip, r2
  140f24:	1a000019 	bne	140f90 <twoway_strstr+0x2e0>
  140f28:	e5f12001 	ldrb	r2, [r1, #1]!
  140f2c:	e2833001 	add	r3, r3, #1
  140f30:	e3520000 	cmp	r2, #0
  140f34:	1afffff8 	bne	140f1c <twoway_strstr+0x26c>
  140f38:	e156000b 	cmp	r6, fp
  140f3c:	2affffe6 	bcs	140edc <twoway_strstr+0x22c>
  140f40:	e7d8300a 	ldrb	r3, [r8, sl]
  140f44:	e7d4100a 	ldrb	r1, [r4, sl]
  140f48:	e088200a 	add	r2, r8, sl
  140f4c:	e1510003 	cmp	r1, r3
  140f50:	e084300a 	add	r3, r4, sl
  140f54:	1a000006 	bne	140f74 <twoway_strstr+0x2c4>
  140f58:	e0431004 	sub	r1, r3, r4
  140f5c:	e1560001 	cmp	r6, r1
  140f60:	2affffdd 	bcs	140edc <twoway_strstr+0x22c>
  140f64:	e5720001 	ldrb	r0, [r2, #-1]!
  140f68:	e5731001 	ldrb	r1, [r3, #-1]!
  140f6c:	e1500001 	cmp	r0, r1
  140f70:	0afffff8 	beq	140f58 <twoway_strstr+0x2a8>
  140f74:	e59d3008 	ldr	r3, [sp, #8]
  140f78:	e59d600c 	ldr	r6, [sp, #12]
  140f7c:	e0844003 	add	r4, r4, r3
  140f80:	eaffffb2 	b	140e50 <twoway_strstr+0x1a0>
  140f84:	e1a04001 	mov	r4, r1
  140f88:	e1a06002 	mov	r6, r2
  140f8c:	eaffffaf 	b	140e50 <twoway_strstr+0x1a0>
  140f90:	e043300a 	sub	r3, r3, sl
  140f94:	e0844003 	add	r4, r4, r3
  140f98:	e3a06000 	mov	r6, #0
  140f9c:	eaffffab 	b	140e50 <twoway_strstr+0x1a0>
  140fa0:	e59d3004 	ldr	r3, [sp, #4]
  140fa4:	e0899003 	add	r9, r9, r3
  140fa8:	eaffffab 	b	140e5c <twoway_strstr+0x1ac>
  140fac:	e1510000 	cmp	r1, r0
  140fb0:	12811001 	addne	r1, r1, #1
  140fb4:	1affff64 	bne	140d4c <twoway_strstr+0x9c>
  140fb8:	eaffff6d 	b	140d74 <twoway_strstr+0xc4>
  140fbc:	e1520006 	cmp	r2, r6
  140fc0:	12822001 	addne	r2, r2, #1
  140fc4:	1affff74 	bne	140d9c <twoway_strstr+0xec>
  140fc8:	eaffff7d 	b	140dc4 <twoway_strstr+0x114>
  140fcc:	e3a00001 	mov	r0, #1
  140fd0:	e1a0c003 	mov	ip, r3
  140fd4:	e1a01000 	mov	r1, r0
  140fd8:	e0833000 	add	r3, r3, r0
  140fdc:	eaffff5a 	b	140d4c <twoway_strstr+0x9c>
  140fe0:	e3a06001 	mov	r6, #1
  140fe4:	e1a0a001 	mov	sl, r1
  140fe8:	e1a02006 	mov	r2, r6
  140fec:	e0811006 	add	r1, r1, r6
  140ff0:	eaffff69 	b	140d9c <twoway_strstr+0xec>
  140ff4:	e59d3008 	ldr	r3, [sp, #8]
  140ff8:	e0453003 	sub	r3, r5, r3
  140ffc:	e58d300c 	str	r3, [sp, #12]
  141000:	eaffff8d 	b	140e3c <twoway_strstr+0x18c>
  141004:	e3e0c000 	mvn	ip, #0
  141008:	e3a00001 	mov	r0, #1
  14100c:	e1a05003 	mov	r5, r3
  141010:	e1a0a00c 	mov	sl, ip
  141014:	e58d0008 	str	r0, [sp, #8]
  141018:	eaffff70 	b	140de0 <twoway_strstr+0x130>

0014101c <strstr>:
  14101c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  141020:	e1a04001 	mov	r4, r1
  141024:	e5d11000 	ldrb	r1, [r1]
  141028:	e1a03000 	mov	r3, r0
  14102c:	e3510000 	cmp	r1, #0
  141030:	1a000001 	bne	14103c <strstr+0x20>
  141034:	e1a00003 	mov	r0, r3
  141038:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  14103c:	eb0009c5 	bl	143758 <strchr>
  141040:	e2503000 	subs	r3, r0, #0
  141044:	0afffffa 	beq	141034 <strstr+0x18>
  141048:	e5d41001 	ldrb	r1, [r4, #1]
  14104c:	e3510000 	cmp	r1, #0
  141050:	0afffff7 	beq	141034 <strstr+0x18>
  141054:	e5d3c001 	ldrb	ip, [r3, #1]
  141058:	e35c0000 	cmp	ip, #0
  14105c:	0a000051 	beq	1411a8 <strstr+0x18c>
  141060:	e5d4e002 	ldrb	lr, [r4, #2]
  141064:	e35e0000 	cmp	lr, #0
  141068:	0a000029 	beq	141114 <strstr+0xf8>
  14106c:	e5d35002 	ldrb	r5, [r3, #2]
  141070:	e3550000 	cmp	r5, #0
  141074:	0a00004d 	beq	1411b0 <strstr+0x194>
  141078:	e5d47003 	ldrb	r7, [r4, #3]
  14107c:	e3570000 	cmp	r7, #0
  141080:	0a000032 	beq	141150 <strstr+0x134>
  141084:	e5d36003 	ldrb	r6, [r3, #3]
  141088:	e3560000 	cmp	r6, #0
  14108c:	0a000049 	beq	1411b8 <strstr+0x19c>
  141090:	e5d42004 	ldrb	r2, [r4, #4]
  141094:	e3520000 	cmp	r2, #0
  141098:	0a000002 	beq	1410a8 <strstr+0x8c>
  14109c:	e1a01004 	mov	r1, r4
  1410a0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
  1410a4:	eaffff01 	b	140cb0 <twoway_strstr>
  1410a8:	e5d40000 	ldrb	r0, [r4]
  1410ac:	e4d32003 	ldrb	r2, [r3], #3
  1410b0:	e1800401 	orr	r0, r0, r1, lsl #8
  1410b4:	e182240c 	orr	r2, r2, ip, lsl #8
  1410b8:	e180080e 	orr	r0, r0, lr, lsl #16
  1410bc:	e1822805 	orr	r2, r2, r5, lsl #16
  1410c0:	e180ec07 	orr	lr, r0, r7, lsl #24
  1410c4:	e1825c06 	orr	r5, r2, r6, lsl #24
  1410c8:	e0252865 	eor	r2, r5, r5, ror #16
  1410cc:	e02e086e 	eor	r0, lr, lr, ror #16
  1410d0:	e1a02422 	lsr	r2, r2, #8
  1410d4:	e1a00420 	lsr	r0, r0, #8
  1410d8:	e3c22cff 	bic	r2, r2, #65280	; 0xff00
  1410dc:	e3c00cff 	bic	r0, r0, #65280	; 0xff00
  1410e0:	e0222465 	eor	r2, r2, r5, ror #8
  1410e4:	e020046e 	eor	r0, r0, lr, ror #8
  1410e8:	e1520000 	cmp	r2, r0
  1410ec:	1a000002 	bne	1410fc <strstr+0xe0>
  1410f0:	ea000028 	b	141198 <strstr+0x17c>
  1410f4:	e1500002 	cmp	r0, r2
  1410f8:	0a000026 	beq	141198 <strstr+0x17c>
  1410fc:	e5f31001 	ldrb	r1, [r3, #1]!
  141100:	e3510000 	cmp	r1, #0
  141104:	e1812402 	orr	r2, r1, r2, lsl #8
  141108:	1afffff9 	bne	1410f4 <strstr+0xd8>
  14110c:	e1a03001 	mov	r3, r1
  141110:	eaffffc7 	b	141034 <strstr+0x18>
  141114:	e5d40000 	ldrb	r0, [r4]
  141118:	e4d32001 	ldrb	r2, [r3], #1
  14111c:	e1811400 	orr	r1, r1, r0, lsl #8
  141120:	e18c2402 	orr	r2, ip, r2, lsl #8
  141124:	ea000005 	b	141140 <strstr+0x124>
  141128:	e5f30001 	ldrb	r0, [r3, #1]!
  14112c:	e1802402 	orr	r2, r0, r2, lsl #8
  141130:	e1a02802 	lsl	r2, r2, #16
  141134:	e3500000 	cmp	r0, #0
  141138:	e1a02822 	lsr	r2, r2, #16
  14113c:	0a000017 	beq	1411a0 <strstr+0x184>
  141140:	e1510002 	cmp	r1, r2
  141144:	1afffff7 	bne	141128 <strstr+0x10c>
  141148:	e2433001 	sub	r3, r3, #1
  14114c:	eaffffb8 	b	141034 <strstr+0x18>
  141150:	e5d46000 	ldrb	r6, [r4]
  141154:	e4d34002 	ldrb	r4, [r3], #2
  141158:	e1a00801 	lsl	r0, r1, #16
  14115c:	e1a0280c 	lsl	r2, ip, #16
  141160:	e1800c06 	orr	r0, r0, r6, lsl #24
  141164:	e1822c04 	orr	r2, r2, r4, lsl #24
  141168:	e180040e 	orr	r0, r0, lr, lsl #8
  14116c:	e1822405 	orr	r2, r2, r5, lsl #8
  141170:	ea000004 	b	141188 <strstr+0x16c>
  141174:	e5f31001 	ldrb	r1, [r3, #1]!
  141178:	e1812002 	orr	r2, r1, r2
  14117c:	e3510000 	cmp	r1, #0
  141180:	e1a02402 	lsl	r2, r2, #8
  141184:	0affffe0 	beq	14110c <strstr+0xf0>
  141188:	e1500002 	cmp	r0, r2
  14118c:	1afffff8 	bne	141174 <strstr+0x158>
  141190:	e2433002 	sub	r3, r3, #2
  141194:	eaffffa6 	b	141034 <strstr+0x18>
  141198:	e2433003 	sub	r3, r3, #3
  14119c:	eaffffa4 	b	141034 <strstr+0x18>
  1411a0:	e1a03000 	mov	r3, r0
  1411a4:	eaffffa2 	b	141034 <strstr+0x18>
  1411a8:	e1a0300c 	mov	r3, ip
  1411ac:	eaffffa0 	b	141034 <strstr+0x18>
  1411b0:	e1a03005 	mov	r3, r5
  1411b4:	eaffff9e 	b	141034 <strstr+0x18>
  1411b8:	e1a03006 	mov	r3, r6
  1411bc:	eaffff9c 	b	141034 <strstr+0x18>

001411c0 <__lock>:
  1411c0:	e59f3150 	ldr	r3, [pc, #336]	; 141318 <__lock+0x158>
  1411c4:	e593300c 	ldr	r3, [r3, #12]
  1411c8:	e3530000 	cmp	r3, #0
  1411cc:	012fff1e 	bxeq	lr
  1411d0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  1411d4:	e1a04000 	mov	r4, r0
  1411d8:	e59f613c 	ldr	r6, [pc, #316]	; 14131c <__lock+0x15c>
  1411dc:	e3a00000 	mov	r0, #0
  1411e0:	e3a01106 	mov	r1, #-2147483647	; 0x80000001
  1411e4:	e1a02004 	mov	r2, r4
  1411e8:	e5963000 	ldr	r3, [r6]
  1411ec:	e12fff33 	blx	r3
  1411f0:	e3500000 	cmp	r0, #0
  1411f4:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  1411f8:	e5945000 	ldr	r5, [r4]
  1411fc:	e3550000 	cmp	r5, #0
  141200:	0afffff5 	beq	1411dc <__lock+0x1c>
  141204:	e3a0800a 	mov	r8, #10
  141208:	e3550000 	cmp	r5, #0
  14120c:	b2455106 	sublt	r5, r5, #-2147483647	; 0x80000001
  141210:	e2857106 	add	r7, r5, #-2147483647	; 0x80000001
  141214:	e1a00005 	mov	r0, r5
  141218:	e1a01007 	mov	r1, r7
  14121c:	e1a02004 	mov	r2, r4
  141220:	e5963000 	ldr	r3, [r6]
  141224:	e12fff33 	blx	r3
  141228:	e3500000 	cmp	r0, #0
  14122c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  141230:	e5943000 	ldr	r3, [r4]
  141234:	e1550003 	cmp	r5, r3
  141238:	0afffff5 	beq	141214 <__lock+0x54>
  14123c:	e2588001 	subs	r8, r8, #1
  141240:	e1a05003 	mov	r5, r3
  141244:	1affffef 	bne	141208 <__lock+0x48>
  141248:	e5947000 	ldr	r7, [r4]
  14124c:	e2875001 	add	r5, r7, #1
  141250:	ea000002 	b	141260 <__lock+0xa0>
  141254:	e5943000 	ldr	r3, [r4]
  141258:	e1570003 	cmp	r7, r3
  14125c:	1afffff9 	bne	141248 <__lock+0x88>
  141260:	e1a00007 	mov	r0, r7
  141264:	e1a01005 	mov	r1, r5
  141268:	e1a02004 	mov	r2, r4
  14126c:	e5963000 	ldr	r3, [r6]
  141270:	e12fff33 	blx	r3
  141274:	e3500000 	cmp	r0, #0
  141278:	1afffff5 	bne	141254 <__lock+0x94>
  14127c:	e3550000 	cmp	r5, #0
  141280:	ba00000d 	blt	1412bc <__lock+0xfc>
  141284:	e2857102 	add	r7, r5, #-2147483648	; 0x80000000
  141288:	e1a00005 	mov	r0, r5
  14128c:	e1a01007 	mov	r1, r7
  141290:	e1a02004 	mov	r2, r4
  141294:	e5963000 	ldr	r3, [r6]
  141298:	e12fff33 	blx	r3
  14129c:	e3500000 	cmp	r0, #0
  1412a0:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  1412a4:	e5943000 	ldr	r3, [r4]
  1412a8:	e1550003 	cmp	r5, r3
  1412ac:	0afffff5 	beq	141288 <__lock+0xc8>
  1412b0:	e1a05003 	mov	r5, r3
  1412b4:	e3550000 	cmp	r5, #0
  1412b8:	aafffff1 	bge	141284 <__lock+0xc4>
  1412bc:	e3a000f0 	mov	r0, #240	; 0xf0
  1412c0:	ebffe9d9 	bl	13ba2c <get_rtt_syscall>
  1412c4:	e2507000 	subs	r7, r0, #0
  1412c8:	0a000006 	beq	1412e8 <__lock+0x128>
  1412cc:	e3a03000 	mov	r3, #0
  1412d0:	e1a02005 	mov	r2, r5
  1412d4:	e3a01080 	mov	r1, #128	; 0x80
  1412d8:	e1a00004 	mov	r0, r4
  1412dc:	e12fff37 	blx	r7
  1412e0:	e3700026 	cmn	r0, #38	; 0x26
  1412e4:	0a000001 	beq	1412f0 <__lock+0x130>
  1412e8:	e2455106 	sub	r5, r5, #-2147483647	; 0x80000001
  1412ec:	eaffffe4 	b	141284 <__lock+0xc4>
  1412f0:	e3a000f0 	mov	r0, #240	; 0xf0
  1412f4:	ebffe9cc 	bl	13ba2c <get_rtt_syscall>
  1412f8:	e2507000 	subs	r7, r0, #0
  1412fc:	0afffff9 	beq	1412e8 <__lock+0x128>
  141300:	e3a03000 	mov	r3, #0
  141304:	e1a02005 	mov	r2, r5
  141308:	e1a01003 	mov	r1, r3
  14130c:	e1a00004 	mov	r0, r4
  141310:	e12fff37 	blx	r7
  141314:	eafffff3 	b	1412e8 <__lock+0x128>
  141318:	00575604 	.word	0x00575604
  14131c:	0014d3d0 	.word	0x0014d3d0

00141320 <__unlock>:
  141320:	e5903000 	ldr	r3, [r0]
  141324:	e3530000 	cmp	r3, #0
  141328:	a12fff1e 	bxge	lr
  14132c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  141330:	e1a05000 	mov	r5, r0
  141334:	e59f7084 	ldr	r7, [pc, #132]	; 1413c0 <__unlock+0xa0>
  141338:	e5954000 	ldr	r4, [r5]
  14133c:	e2446106 	sub	r6, r4, #-2147483647	; 0x80000001
  141340:	ea000002 	b	141350 <__unlock+0x30>
  141344:	e5953000 	ldr	r3, [r5]
  141348:	e1540003 	cmp	r4, r3
  14134c:	1afffff9 	bne	141338 <__unlock+0x18>
  141350:	e1a00004 	mov	r0, r4
  141354:	e1a01006 	mov	r1, r6
  141358:	e1a02005 	mov	r2, r5
  14135c:	e5973000 	ldr	r3, [r7]
  141360:	e12fff33 	blx	r3
  141364:	e3500000 	cmp	r0, #0
  141368:	1afffff5 	bne	141344 <__unlock+0x24>
  14136c:	e3540106 	cmp	r4, #-2147483647	; 0x80000001
  141370:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  141374:	e3a000f0 	mov	r0, #240	; 0xf0
  141378:	ebffe9ab 	bl	13ba2c <get_rtt_syscall>
  14137c:	e2503000 	subs	r3, r0, #0
  141380:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  141384:	e3a02001 	mov	r2, #1
  141388:	e3a01081 	mov	r1, #129	; 0x81
  14138c:	e1a00005 	mov	r0, r5
  141390:	e12fff33 	blx	r3
  141394:	e3700026 	cmn	r0, #38	; 0x26
  141398:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
  14139c:	e3a000f0 	mov	r0, #240	; 0xf0
  1413a0:	ebffe9a1 	bl	13ba2c <get_rtt_syscall>
  1413a4:	e2503000 	subs	r3, r0, #0
  1413a8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  1413ac:	e3a02001 	mov	r2, #1
  1413b0:	e1a00005 	mov	r0, r5
  1413b4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
  1413b8:	e1a01002 	mov	r1, r2
  1413bc:	e12fff13 	bx	r3
  1413c0:	0014d3d0 	.word	0x0014d3d0

001413c4 <__syscall_cp_c>:
  1413c4:	eaffe9c2 	b	13bad4 <__syscall>

001413c8 <__syscall_cp>:
  1413c8:	eaffe9c1 	b	13bad4 <__syscall>

001413cc <__wait>:
  1413cc:	e3530000 	cmp	r3, #0
  1413d0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  1413d4:	e3a03064 	mov	r3, #100	; 0x64
  1413d8:	e1a04001 	mov	r4, r1
  1413dc:	e1a07000 	mov	r7, r0
  1413e0:	e1a08002 	mov	r8, r2
  1413e4:	13a09080 	movne	r9, #128	; 0x80
  1413e8:	03a09000 	moveq	r9, #0
  1413ec:	e59f1120 	ldr	r1, [pc, #288]	; 141514 <__wait+0x148>
  1413f0:	ea000006 	b	141410 <__wait+0x44>
  1413f4:	e5972000 	ldr	r2, [r7]
  1413f8:	e1520008 	cmp	r2, r8
  1413fc:	18bd87f0 	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
  141400:	e591c000 	ldr	ip, [r1]
  141404:	e12fff3c 	blx	ip
  141408:	e2533001 	subs	r3, r3, #1
  14140c:	0a00003d 	beq	141508 <__wait+0x13c>
  141410:	e3540000 	cmp	r4, #0
  141414:	0afffff6 	beq	1413f4 <__wait+0x28>
  141418:	e5942000 	ldr	r2, [r4]
  14141c:	e3520000 	cmp	r2, #0
  141420:	0afffff3 	beq	1413f4 <__wait+0x28>
  141424:	e59f60ec 	ldr	r6, [pc, #236]	; 141518 <__wait+0x14c>
  141428:	e5945000 	ldr	r5, [r4]
  14142c:	e285a001 	add	sl, r5, #1
  141430:	ea000002 	b	141440 <__wait+0x74>
  141434:	e5943000 	ldr	r3, [r4]
  141438:	e1550003 	cmp	r5, r3
  14143c:	1afffff9 	bne	141428 <__wait+0x5c>
  141440:	e1a00005 	mov	r0, r5
  141444:	e1a0100a 	mov	r1, sl
  141448:	e1a02004 	mov	r2, r4
  14144c:	e5963000 	ldr	r3, [r6]
  141450:	e12fff33 	blx	r3
  141454:	e3500000 	cmp	r0, #0
  141458:	1afffff5 	bne	141434 <__wait+0x68>
  14145c:	e5973000 	ldr	r3, [r7]
  141460:	e1530008 	cmp	r3, r8
  141464:	1a000006 	bne	141484 <__wait+0xb8>
  141468:	e3a000f0 	mov	r0, #240	; 0xf0
  14146c:	ebffe96e 	bl	13ba2c <get_rtt_syscall>
  141470:	e2505000 	subs	r5, r0, #0
  141474:	1a000012 	bne	1414c4 <__wait+0xf8>
  141478:	e5973000 	ldr	r3, [r7]
  14147c:	e1530008 	cmp	r3, r8
  141480:	0afffff8 	beq	141468 <__wait+0x9c>
  141484:	e3540000 	cmp	r4, #0
  141488:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
  14148c:	e59f6084 	ldr	r6, [pc, #132]	; 141518 <__wait+0x14c>
  141490:	e5945000 	ldr	r5, [r4]
  141494:	e2457001 	sub	r7, r5, #1
  141498:	e1a00005 	mov	r0, r5
  14149c:	e1a01007 	mov	r1, r7
  1414a0:	e1a02004 	mov	r2, r4
  1414a4:	e5963000 	ldr	r3, [r6]
  1414a8:	e12fff33 	blx	r3
  1414ac:	e3500000 	cmp	r0, #0
  1414b0:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
  1414b4:	e5943000 	ldr	r3, [r4]
  1414b8:	e1550003 	cmp	r5, r3
  1414bc:	0afffff5 	beq	141498 <__wait+0xcc>
  1414c0:	eafffff2 	b	141490 <__wait+0xc4>
  1414c4:	e3a03000 	mov	r3, #0
  1414c8:	e1a02008 	mov	r2, r8
  1414cc:	e1a01009 	mov	r1, r9
  1414d0:	e1a00007 	mov	r0, r7
  1414d4:	e12fff35 	blx	r5
  1414d8:	e3700026 	cmn	r0, #38	; 0x26
  1414dc:	1affffe5 	bne	141478 <__wait+0xac>
  1414e0:	e3a000f0 	mov	r0, #240	; 0xf0
  1414e4:	ebffe950 	bl	13ba2c <get_rtt_syscall>
  1414e8:	e2505000 	subs	r5, r0, #0
  1414ec:	0affffe1 	beq	141478 <__wait+0xac>
  1414f0:	e3a03000 	mov	r3, #0
  1414f4:	e1a02008 	mov	r2, r8
  1414f8:	e1a01003 	mov	r1, r3
  1414fc:	e1a00007 	mov	r0, r7
  141500:	e12fff35 	blx	r5
  141504:	eaffffdb 	b	141478 <__wait+0xac>
  141508:	e3540000 	cmp	r4, #0
  14150c:	0affffd9 	beq	141478 <__wait+0xac>
  141510:	eaffffc3 	b	141424 <__wait+0x58>
  141514:	0014d3cc 	.word	0x0014d3cc
  141518:	0014d3d0 	.word	0x0014d3d0

0014151c <__a_barrier_dummy>:
  14151c:	e12fff1e 	bx	lr

00141520 <__a_barrier_oldkuser>:
  141520:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
  141524:	e1a01000 	mov	r1, r0
  141528:	e1a0200d 	mov	r2, sp
  14152c:	e59fc080 	ldr	ip, [pc, #128]	; 1415b4 <__a_gettp_cp15+0x8>
  141530:	e1a0e00f 	mov	lr, pc
  141534:	e1a0f00c 	mov	pc, ip
  141538:	e8bd500f 	pop	{r0, r1, r2, r3, ip, lr}
  14153c:	e12fff1e 	bx	lr

00141540 <__a_barrier_v6>:
  141540:	ee070fba 	mcr	15, 0, r0, cr7, cr10, {5}
  141544:	e12fff1e 	bx	lr

00141548 <__a_barrier_v7>:
  141548:	f57ff05b 	dmb	ish
  14154c:	e12fff1e 	bx	lr

00141550 <__a_cas_dummy>:
  141550:	e1a03000 	mov	r3, r0
  141554:	e5920000 	ldr	r0, [r2]
  141558:	e0530000 	subs	r0, r3, r0
  14155c:	05821000 	streq	r1, [r2]
  141560:	e12fff1e 	bx	lr

00141564 <__a_cas_v6>:
  141564:	e1a03000 	mov	r3, r0
  141568:	ee070fba 	mcr	15, 0, r0, cr7, cr10, {5}
  14156c:	e1920f9f 	ldrex	r0, [r2]
  141570:	e0530000 	subs	r0, r3, r0
  141574:	01820f91 	strexeq	r0, r1, [r2]
  141578:	03300001 	teqeq	r0, #1
  14157c:	0afffffa 	beq	14156c <__a_cas_v6+0x8>
  141580:	ee070fba 	mcr	15, 0, r0, cr7, cr10, {5}
  141584:	e12fff1e 	bx	lr

00141588 <__a_cas_v7>:
  141588:	e1a03000 	mov	r3, r0
  14158c:	f57ff05b 	dmb	ish
  141590:	e1920f9f 	ldrex	r0, [r2]
  141594:	e0530000 	subs	r0, r3, r0
  141598:	01820f91 	strexeq	r0, r1, [r2]
  14159c:	03300001 	teqeq	r0, #1
  1415a0:	0afffffa 	beq	141590 <__a_cas_v7+0x8>
  1415a4:	f57ff05b 	dmb	ish
  1415a8:	e12fff1e 	bx	lr

001415ac <__a_gettp_cp15>:
  1415ac:	ee1d0f70 	mrc	15, 0, r0, cr13, cr0, {3}
  1415b0:	e12fff1e 	bx	lr
  1415b4:	ffff0fc0 	.word	0xffff0fc0

001415b8 <__wake.constprop.2>:
  1415b8:	e92d4070 	push	{r4, r5, r6, lr}
  1415bc:	e3510000 	cmp	r1, #0
  1415c0:	e1a04000 	mov	r4, r0
  1415c4:	e3a000f0 	mov	r0, #240	; 0xf0
  1415c8:	03a05001 	moveq	r5, #1
  1415cc:	13a05081 	movne	r5, #129	; 0x81
  1415d0:	ebffe915 	bl	13ba2c <get_rtt_syscall>
  1415d4:	e2503000 	subs	r3, r0, #0
  1415d8:	08bd8070 	popeq	{r4, r5, r6, pc}
  1415dc:	e1a01005 	mov	r1, r5
  1415e0:	e3a02001 	mov	r2, #1
  1415e4:	e1a00004 	mov	r0, r4
  1415e8:	e12fff33 	blx	r3
  1415ec:	e3700026 	cmn	r0, #38	; 0x26
  1415f0:	18bd8070 	popne	{r4, r5, r6, pc}
  1415f4:	e3a000f0 	mov	r0, #240	; 0xf0
  1415f8:	ebffe90b 	bl	13ba2c <get_rtt_syscall>
  1415fc:	e2503000 	subs	r3, r0, #0
  141600:	08bd8070 	popeq	{r4, r5, r6, pc}
  141604:	e3a02001 	mov	r2, #1
  141608:	e1a00004 	mov	r0, r4
  14160c:	e8bd4070 	pop	{r4, r5, r6, lr}
  141610:	e1a01002 	mov	r1, r2
  141614:	e12fff13 	bx	r3

00141618 <__acquire_ptc>:
  141618:	e12fff1e 	bx	lr

0014161c <__tl_lock>:
  14161c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  141620:	e59f3070 	ldr	r3, [pc, #112]	; 141698 <__tl_lock+0x7c>
  141624:	e59f4070 	ldr	r4, [pc, #112]	; 14169c <__tl_lock+0x80>
  141628:	e5930000 	ldr	r0, [r3]
  14162c:	e5943000 	ldr	r3, [r4]
  141630:	e12fff30 	blx	r0
  141634:	e510505c 	ldr	r5, [r0, #-92]	; 0xffffffa4
  141638:	e1550003 	cmp	r5, r3
  14163c:	0a000010 	beq	141684 <__tl_lock+0x68>
  141640:	e59f6058 	ldr	r6, [pc, #88]	; 1416a0 <__tl_lock+0x84>
  141644:	e59f7058 	ldr	r7, [pc, #88]	; 1416a4 <__tl_lock+0x88>
  141648:	e3a00000 	mov	r0, #0
  14164c:	e1a01005 	mov	r1, r5
  141650:	e1a02004 	mov	r2, r4
  141654:	e5963000 	ldr	r3, [r6]
  141658:	e12fff33 	blx	r3
  14165c:	e3500000 	cmp	r0, #0
  141660:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  141664:	e5942000 	ldr	r2, [r4]
  141668:	e3520000 	cmp	r2, #0
  14166c:	0afffff5 	beq	141648 <__tl_lock+0x2c>
  141670:	e3a03000 	mov	r3, #0
  141674:	e1a01007 	mov	r1, r7
  141678:	e1a00004 	mov	r0, r4
  14167c:	ebffff52 	bl	1413cc <__wait>
  141680:	eafffff0 	b	141648 <__tl_lock+0x2c>
  141684:	e59f201c 	ldr	r2, [pc, #28]	; 1416a8 <__tl_lock+0x8c>
  141688:	e5923000 	ldr	r3, [r2]
  14168c:	e2833001 	add	r3, r3, #1
  141690:	e5823000 	str	r3, [r2]
  141694:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  141698:	0014d3d4 	.word	0x0014d3d4
  14169c:	0057564c 	.word	0x0057564c
  1416a0:	0014d3d0 	.word	0x0014d3d0
  1416a4:	0014ebf4 	.word	0x0014ebf4
  1416a8:	0014ebf0 	.word	0x0014ebf0

001416ac <__tl_unlock>:
  1416ac:	e59f2090 	ldr	r2, [pc, #144]	; 141744 <__tl_unlock+0x98>
  1416b0:	e5923000 	ldr	r3, [r2]
  1416b4:	e3530000 	cmp	r3, #0
  1416b8:	1a00001e 	bne	141738 <__tl_unlock+0x8c>
  1416bc:	e59f2084 	ldr	r2, [pc, #132]	; 141748 <__tl_unlock+0x9c>
  1416c0:	e92d4010 	push	{r4, lr}
  1416c4:	e592c000 	ldr	ip, [r2]
  1416c8:	e12fff3c 	blx	ip
  1416cc:	e59f4078 	ldr	r4, [pc, #120]	; 14174c <__tl_unlock+0xa0>
  1416d0:	e592c000 	ldr	ip, [r2]
  1416d4:	e5843000 	str	r3, [r4]
  1416d8:	e12fff3c 	blx	ip
  1416dc:	e59f306c 	ldr	r3, [pc, #108]	; 141750 <__tl_unlock+0xa4>
  1416e0:	e5933000 	ldr	r3, [r3]
  1416e4:	e3530000 	cmp	r3, #0
  1416e8:	08bd8010 	popeq	{r4, pc}
  1416ec:	e3a000f0 	mov	r0, #240	; 0xf0
  1416f0:	ebffe8cd 	bl	13ba2c <get_rtt_syscall>
  1416f4:	e2503000 	subs	r3, r0, #0
  1416f8:	08bd8010 	popeq	{r4, pc}
  1416fc:	e3a02001 	mov	r2, #1
  141700:	e1a00004 	mov	r0, r4
  141704:	e1a01002 	mov	r1, r2
  141708:	e12fff33 	blx	r3
  14170c:	e3700026 	cmn	r0, #38	; 0x26
  141710:	18bd8010 	popne	{r4, pc}
  141714:	e3a000f0 	mov	r0, #240	; 0xf0
  141718:	ebffe8c3 	bl	13ba2c <get_rtt_syscall>
  14171c:	e2503000 	subs	r3, r0, #0
  141720:	08bd8010 	popeq	{r4, pc}
  141724:	e3a02001 	mov	r2, #1
  141728:	e1a00004 	mov	r0, r4
  14172c:	e8bd4010 	pop	{r4, lr}
  141730:	e1a01002 	mov	r1, r2
  141734:	e12fff13 	bx	r3
  141738:	e2433001 	sub	r3, r3, #1
  14173c:	e5823000 	str	r3, [r2]
  141740:	e12fff1e 	bx	lr
  141744:	0014ebf0 	.word	0x0014ebf0
  141748:	0014d3cc 	.word	0x0014d3cc
  14174c:	0057564c 	.word	0x0057564c
  141750:	0014ebf4 	.word	0x0014ebf4

00141754 <__tl_sync>:
  141754:	e59f3084 	ldr	r3, [pc, #132]	; 1417e0 <__tl_sync+0x8c>
  141758:	e92d4070 	push	{r4, r5, r6, lr}
  14175c:	e593c000 	ldr	ip, [r3]
  141760:	e12fff3c 	blx	ip
  141764:	e59f4078 	ldr	r4, [pc, #120]	; 1417e4 <__tl_sync+0x90>
  141768:	e5942000 	ldr	r2, [r4]
  14176c:	e3520000 	cmp	r2, #0
  141770:	08bd8070 	popeq	{r4, r5, r6, pc}
  141774:	e59f506c 	ldr	r5, [pc, #108]	; 1417e8 <__tl_sync+0x94>
  141778:	e3a03000 	mov	r3, #0
  14177c:	e1a01005 	mov	r1, r5
  141780:	e1a00004 	mov	r0, r4
  141784:	ebffff10 	bl	1413cc <__wait>
  141788:	e5953000 	ldr	r3, [r5]
  14178c:	e3530000 	cmp	r3, #0
  141790:	08bd8070 	popeq	{r4, r5, r6, pc}
  141794:	e3a000f0 	mov	r0, #240	; 0xf0
  141798:	ebffe8a3 	bl	13ba2c <get_rtt_syscall>
  14179c:	e2503000 	subs	r3, r0, #0
  1417a0:	08bd8070 	popeq	{r4, r5, r6, pc}
  1417a4:	e3a02001 	mov	r2, #1
  1417a8:	e1a00004 	mov	r0, r4
  1417ac:	e1a01002 	mov	r1, r2
  1417b0:	e12fff33 	blx	r3
  1417b4:	e3700026 	cmn	r0, #38	; 0x26
  1417b8:	18bd8070 	popne	{r4, r5, r6, pc}
  1417bc:	e3a000f0 	mov	r0, #240	; 0xf0
  1417c0:	ebffe899 	bl	13ba2c <get_rtt_syscall>
  1417c4:	e2503000 	subs	r3, r0, #0
  1417c8:	08bd8070 	popeq	{r4, r5, r6, pc}
  1417cc:	e3a02001 	mov	r2, #1
  1417d0:	e1a00004 	mov	r0, r4
  1417d4:	e8bd4070 	pop	{r4, r5, r6, lr}
  1417d8:	e1a01002 	mov	r1, r2
  1417dc:	e12fff13 	bx	r3
  1417e0:	0014d3cc 	.word	0x0014d3cc
  1417e4:	0057564c 	.word	0x0057564c
  1417e8:	0014ebf4 	.word	0x0014ebf4

001417ec <__pthread_exit>:
  1417ec:	e3a02000 	mov	r2, #0
  1417f0:	e1a0c000 	mov	ip, r0
  1417f4:	e3a01001 	mov	r1, #1
  1417f8:	e59f3224 	ldr	r3, [pc, #548]	; 141a24 <__pthread_exit+0x238>
  1417fc:	e92d4880 	push	{r7, fp, lr}
  141800:	e5930000 	ldr	r0, [r3]
  141804:	e12fff30 	blx	r0
  141808:	e2404078 	sub	r4, r0, #120	; 0x78
  14180c:	e5943048 	ldr	r3, [r4, #72]	; 0x48
  141810:	e5c4102c 	strb	r1, [r4, #44]	; 0x2c
  141814:	e1530002 	cmp	r3, r2
  141818:	e24dd08c 	sub	sp, sp, #140	; 0x8c
  14181c:	e584c044 	str	ip, [r4, #68]	; 0x44
  141820:	e5c4202d 	strb	r2, [r4, #45]	; 0x2d
  141824:	0a000006 	beq	141844 <__pthread_exit+0x58>
  141828:	e9930005 	ldmib	r3, {r0, r2}
  14182c:	e5933000 	ldr	r3, [r3]
  141830:	e5842048 	str	r2, [r4, #72]	; 0x48
  141834:	e12fff33 	blx	r3
  141838:	e5943048 	ldr	r3, [r4, #72]	; 0x48
  14183c:	e3530000 	cmp	r3, #0
  141840:	1afffff8 	bne	141828 <__pthread_exit+0x3c>
  141844:	e2849064 	add	r9, r4, #100	; 0x64
  141848:	ebffff72 	bl	141618 <__acquire_ptc>
  14184c:	e1a00009 	mov	r0, r9
  141850:	ebfffe5a 	bl	1411c0 <__lock>
  141854:	e28d0008 	add	r0, sp, #8
  141858:	eb0004a6 	bl	142af8 <__block_app_sigs>
  14185c:	ebffff6e 	bl	14161c <__tl_lock>
  141860:	e594300c 	ldr	r3, [r4, #12]
  141864:	e1530004 	cmp	r3, r4
  141868:	0a000041 	beq	141974 <__pthread_exit+0x188>
  14186c:	e59f11b4 	ldr	r1, [pc, #436]	; 141a28 <__pthread_exit+0x23c>
  141870:	e5940008 	ldr	r0, [r4, #8]
  141874:	e591200c 	ldr	r2, [r1, #12]
  141878:	e59f81ac 	ldr	r8, [pc, #428]	; 141a2c <__pthread_exit+0x240>
  14187c:	e2422001 	sub	r2, r2, #1
  141880:	e581200c 	str	r2, [r1, #12]
  141884:	e5830008 	str	r0, [r3, #8]
  141888:	e5942008 	ldr	r2, [r4, #8]
  14188c:	e582300c 	str	r3, [r2, #12]
  141890:	e584400c 	str	r4, [r4, #12]
  141894:	e5844008 	str	r4, [r4, #8]
  141898:	eb00028a 	bl	1422c8 <__vm_lock>
  14189c:	e2843050 	add	r3, r4, #80	; 0x50
  1418a0:	e58d3004 	str	r3, [sp, #4]
  1418a4:	e5946050 	ldr	r6, [r4, #80]	; 0x50
  1418a8:	e3560000 	cmp	r6, #0
  1418ac:	0a000020 	beq	141934 <__pthread_exit+0x148>
  1418b0:	e59d3004 	ldr	r3, [sp, #4]
  1418b4:	e1560003 	cmp	r6, r3
  1418b8:	0a00001d 	beq	141934 <__pthread_exit+0x148>
  1418bc:	e1a07006 	mov	r7, r6
  1418c0:	e516b008 	ldr	fp, [r6, #-8]
  1418c4:	e516a010 	ldr	sl, [r6, #-16]
  1418c8:	e5846058 	str	r6, [r4, #88]	; 0x58
  1418cc:	e417300c 	ldr	r3, [r7], #-12
  1418d0:	e5843050 	str	r3, [r4, #80]	; 0x50
  1418d4:	e516500c 	ldr	r5, [r6, #-12]
  1418d8:	ea000002 	b	1418e8 <__pthread_exit+0xfc>
  1418dc:	e516300c 	ldr	r3, [r6, #-12]
  1418e0:	e1550003 	cmp	r5, r3
  1418e4:	1afffffa 	bne	1418d4 <__pthread_exit+0xe8>
  1418e8:	e1a00005 	mov	r0, r5
  1418ec:	e3a01101 	mov	r1, #1073741824	; 0x40000000
  1418f0:	e1a02007 	mov	r2, r7
  1418f4:	e5983000 	ldr	r3, [r8]
  1418f8:	e12fff33 	blx	r3
  1418fc:	e3500000 	cmp	r0, #0
  141900:	1afffff5 	bne	1418dc <__pthread_exit+0xf0>
  141904:	e29bb000 	adds	fp, fp, #0
  141908:	13a0b001 	movne	fp, #1
  14190c:	e19b3fa5 	orrs	r3, fp, r5, lsr #31
  141910:	e5840058 	str	r0, [r4, #88]	; 0x58
  141914:	0affffe2 	beq	1418a4 <__pthread_exit+0xb8>
  141918:	e1e0100a 	mvn	r1, sl
  14191c:	e1a00007 	mov	r0, r7
  141920:	e2011080 	and	r1, r1, #128	; 0x80
  141924:	ebffff23 	bl	1415b8 <__wake.constprop.2>
  141928:	e5946050 	ldr	r6, [r4, #80]	; 0x50
  14192c:	e3560000 	cmp	r6, #0
  141930:	1affffde 	bne	1418b0 <__pthread_exit+0xc4>
  141934:	eb000276 	bl	142314 <__vm_unlock>
  141938:	e2845024 	add	r5, r4, #36	; 0x24
  14193c:	ebffff35 	bl	141618 <__acquire_ptc>
  141940:	ebffff34 	bl	141618 <__acquire_ptc>
  141944:	ea000002 	b	141954 <__pthread_exit+0x168>
  141948:	e5943024 	ldr	r3, [r4, #36]	; 0x24
  14194c:	e3530001 	cmp	r3, #1
  141950:	1a00000e 	bne	141990 <__pthread_exit+0x1a4>
  141954:	e3a00001 	mov	r0, #1
  141958:	e3a01000 	mov	r1, #0
  14195c:	e1a02005 	mov	r2, r5
  141960:	e5983000 	ldr	r3, [r8]
  141964:	e12fff33 	blx	r3
  141968:	e1500001 	cmp	r0, r1
  14196c:	1afffff5 	bne	141948 <__pthread_exit+0x15c>
  141970:	ea000008 	b	141998 <__pthread_exit+0x1ac>
  141974:	ebffff4c 	bl	1416ac <__tl_unlock>
  141978:	e28d0008 	add	r0, sp, #8
  14197c:	eb00046b 	bl	142b30 <__restore_sigs>
  141980:	e1a00009 	mov	r0, r9
  141984:	ebfffe65 	bl	141320 <__unlock>
  141988:	e3a00000 	mov	r0, #0
  14198c:	ebffdb38 	bl	138674 <exit>
  141990:	e3530002 	cmp	r3, #2
  141994:	0a00000d 	beq	1419d0 <__pthread_exit+0x1e4>
  141998:	e1a00005 	mov	r0, r5
  14199c:	e3a01001 	mov	r1, #1
  1419a0:	ebffff04 	bl	1415b8 <__wake.constprop.2>
  1419a4:	e3a03000 	mov	r3, #0
  1419a8:	e1a00009 	mov	r0, r9
  1419ac:	e584301c 	str	r3, [r4, #28]
  1419b0:	ebfffe5a 	bl	141320 <__unlock>
  1419b4:	e3a00001 	mov	r0, #1
  1419b8:	ebffe81b 	bl	13ba2c <get_rtt_syscall>
  1419bc:	e2503000 	subs	r3, r0, #0
  1419c0:	0afffffb 	beq	1419b4 <__pthread_exit+0x1c8>
  1419c4:	e3a00000 	mov	r0, #0
  1419c8:	e12fff33 	blx	r3
  1419cc:	eafffff8 	b	1419b4 <__pthread_exit+0x1c8>
  1419d0:	e5943030 	ldr	r3, [r4, #48]	; 0x30
  1419d4:	e1530001 	cmp	r3, r1
  1419d8:	0affffee 	beq	141998 <__pthread_exit+0x1ac>
  1419dc:	e28d0008 	add	r0, sp, #8
  1419e0:	eb000436 	bl	142ac0 <__block_all_sigs>
  1419e4:	e5943054 	ldr	r3, [r4, #84]	; 0x54
  1419e8:	e3530000 	cmp	r3, #0
  1419ec:	1a000004 	bne	141a04 <__pthread_exit+0x218>
  1419f0:	eb000225 	bl	14228c <__vm_wait>
  1419f4:	e5941034 	ldr	r1, [r4, #52]	; 0x34
  1419f8:	e5940030 	ldr	r0, [r4, #48]	; 0x30
  1419fc:	eb0007ec 	bl	1439b4 <__unmapself>
  141a00:	eaffffe4 	b	141998 <__pthread_exit+0x1ac>
  141a04:	e59f0024 	ldr	r0, [pc, #36]	; 141a30 <__pthread_exit+0x244>
  141a08:	ebffe807 	bl	13ba2c <get_rtt_syscall>
  141a0c:	e2503000 	subs	r3, r0, #0
  141a10:	0afffff6 	beq	1419f0 <__pthread_exit+0x204>
  141a14:	e3a0100c 	mov	r1, #12
  141a18:	e3a00000 	mov	r0, #0
  141a1c:	e12fff33 	blx	r3
  141a20:	eafffff2 	b	1419f0 <__pthread_exit+0x204>
  141a24:	0014d3d4 	.word	0x0014d3d4
  141a28:	00575604 	.word	0x00575604
  141a2c:	0014d3d0 	.word	0x0014d3d0
  141a30:	00000152 	.word	0x00000152

00141a34 <start>:
  141a34:	e5902008 	ldr	r2, [r0, #8]
  141a38:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  141a3c:	e3520000 	cmp	r2, #0
  141a40:	e1a08000 	mov	r8, r0
  141a44:	0a000022 	beq	141ad4 <start+0xa0>
  141a48:	e59f30d8 	ldr	r3, [pc, #216]	; 141b28 <start+0xf4>
  141a4c:	e5926014 	ldr	r6, [r2, #20]
  141a50:	e5930000 	ldr	r0, [r3]
  141a54:	e12fff30 	blx	r0
  141a58:	e2409078 	sub	r9, r0, #120	; 0x78
  141a5c:	e3a0009c 	mov	r0, #156	; 0x9c
  141a60:	e599501c 	ldr	r5, [r9, #28]
  141a64:	e2824018 	add	r4, r2, #24
  141a68:	ebffe7ef 	bl	13ba2c <get_rtt_syscall>
  141a6c:	e250a000 	subs	sl, r0, #0
  141a70:	0a000004 	beq	141a88 <start+0x54>
  141a74:	e1a02004 	mov	r2, r4
  141a78:	e1a01006 	mov	r1, r6
  141a7c:	e1a00005 	mov	r0, r5
  141a80:	e12fff3a 	blx	sl
  141a84:	e1a0a000 	mov	sl, r0
  141a88:	e598500c 	ldr	r5, [r8, #12]
  141a8c:	e59f7098 	ldr	r7, [pc, #152]	; 141b2c <start+0xf8>
  141a90:	e26a6000 	rsb	r6, sl, #0
  141a94:	e5954000 	ldr	r4, [r5]
  141a98:	ea000002 	b	141aa8 <start+0x74>
  141a9c:	e5953000 	ldr	r3, [r5]
  141aa0:	e1540003 	cmp	r4, r3
  141aa4:	1afffffa 	bne	141a94 <start+0x60>
  141aa8:	e1a00004 	mov	r0, r4
  141aac:	e1a01006 	mov	r1, r6
  141ab0:	e1a02005 	mov	r2, r5
  141ab4:	e5973000 	ldr	r3, [r7]
  141ab8:	e12fff33 	blx	r3
  141abc:	e3500000 	cmp	r0, #0
  141ac0:	1afffff5 	bne	141a9c <start+0x68>
  141ac4:	e3740002 	cmn	r4, #2
  141ac8:	0a000012 	beq	141b18 <start+0xe4>
  141acc:	e35a0000 	cmp	sl, #0
  141ad0:	1a00000c 	bne	141b08 <start+0xd4>
  141ad4:	e3a000af 	mov	r0, #175	; 0xaf
  141ad8:	ebffe7d3 	bl	13ba2c <get_rtt_syscall>
  141adc:	e2504000 	subs	r4, r0, #0
  141ae0:	e2881010 	add	r1, r8, #16
  141ae4:	0a000003 	beq	141af8 <start+0xc4>
  141ae8:	e3a03008 	mov	r3, #8
  141aec:	e3a02000 	mov	r2, #0
  141af0:	e3a00002 	mov	r0, #2
  141af4:	e12fff34 	blx	r4
  141af8:	e5983000 	ldr	r3, [r8]
  141afc:	e5980004 	ldr	r0, [r8, #4]
  141b00:	e12fff33 	blx	r3
  141b04:	ebffff38 	bl	1417ec <__pthread_exit>
  141b08:	e3a03002 	mov	r3, #2
  141b0c:	e3a00000 	mov	r0, #0
  141b10:	e5893024 	str	r3, [r9, #36]	; 0x24
  141b14:	ebffff34 	bl	1417ec <__pthread_exit>
  141b18:	e3a01001 	mov	r1, #1
  141b1c:	e598000c 	ldr	r0, [r8, #12]
  141b20:	ebfffea4 	bl	1415b8 <__wake.constprop.2>
  141b24:	eaffffe8 	b	141acc <start+0x98>
  141b28:	0014d3d4 	.word	0x0014d3d4
  141b2c:	0014d3d0 	.word	0x0014d3d0

00141b30 <start_c11>:
  141b30:	e5903000 	ldr	r3, [r0]
  141b34:	e92d4010 	push	{r4, lr}
  141b38:	e5900004 	ldr	r0, [r0, #4]
  141b3c:	e12fff33 	blx	r3
  141b40:	ebffff29 	bl	1417ec <__pthread_exit>

00141b44 <__do_cleanup_push>:
  141b44:	e1a03000 	mov	r3, r0
  141b48:	e59f2018 	ldr	r2, [pc, #24]	; 141b68 <__do_cleanup_push+0x24>
  141b4c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  141b50:	e5920000 	ldr	r0, [r2]
  141b54:	e12fff30 	blx	r0
  141b58:	e5102030 	ldr	r2, [r0, #-48]	; 0xffffffd0
  141b5c:	e5832008 	str	r2, [r3, #8]
  141b60:	e5003030 	str	r3, [r0, #-48]	; 0xffffffd0
  141b64:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
  141b68:	0014d3d4 	.word	0x0014d3d4

00141b6c <__do_cleanup_pop>:
  141b6c:	e5903008 	ldr	r3, [r0, #8]
  141b70:	e59f2010 	ldr	r2, [pc, #16]	; 141b88 <__do_cleanup_pop+0x1c>
  141b74:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  141b78:	e5920000 	ldr	r0, [r2]
  141b7c:	e12fff30 	blx	r0
  141b80:	e5003030 	str	r3, [r0, #-48]	; 0xffffffd0
  141b84:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
  141b88:	0014d3d4 	.word	0x0014d3d4

00141b8c <__pthread_create>:
  141b8c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  141b90:	e24dd0dc 	sub	sp, sp, #220	; 0xdc
  141b94:	e58d001c 	str	r0, [sp, #28]
  141b98:	e58d2014 	str	r2, [sp, #20]
  141b9c:	e1a09001 	mov	r9, r1
  141ba0:	e28d0034 	add	r0, sp, #52	; 0x34
  141ba4:	e3a02024 	mov	r2, #36	; 0x24
  141ba8:	e3a01000 	mov	r1, #0
  141bac:	e58d3018 	str	r3, [sp, #24]
  141bb0:	ebfffb4d 	bl	1408ec <memset>
  141bb4:	e3e03000 	mvn	r3, #0
  141bb8:	e59f656c 	ldr	r6, [pc, #1388]	; 14212c <__pthread_create+0x5a0>
  141bbc:	e58d3028 	str	r3, [sp, #40]	; 0x28
  141bc0:	e5963000 	ldr	r3, [r6]
  141bc4:	e3530000 	cmp	r3, #0
  141bc8:	03a00026 	moveq	r0, #38	; 0x26
  141bcc:	0a0000a3 	beq	141e60 <__pthread_create+0x2d4>
  141bd0:	e59f3558 	ldr	r3, [pc, #1368]	; 142130 <__pthread_create+0x5a4>
  141bd4:	e5964004 	ldr	r4, [r6, #4]
  141bd8:	e5930000 	ldr	r0, [r3]
  141bdc:	e12fff30 	blx	r0
  141be0:	e3540000 	cmp	r4, #0
  141be4:	e240a078 	sub	sl, r0, #120	; 0x78
  141be8:	0a0000da 	beq	141f58 <__pthread_create+0x3cc>
  141bec:	e2493001 	sub	r3, r9, #1
  141bf0:	e3730003 	cmn	r3, #3
  141bf4:	9a00009b 	bls	141e68 <__pthread_create+0x2dc>
  141bf8:	ebfffe86 	bl	141618 <__acquire_ptc>
  141bfc:	e59f2530 	ldr	r2, [pc, #1328]	; 142134 <__pthread_create+0x5a8>
  141c00:	e59f3530 	ldr	r3, [pc, #1328]	; 142138 <__pthread_create+0x5ac>
  141c04:	e5927000 	ldr	r7, [r2]
  141c08:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
  141c0c:	e5933000 	ldr	r3, [r3]
  141c10:	e3520000 	cmp	r2, #0
  141c14:	e58d7034 	str	r7, [sp, #52]	; 0x34
  141c18:	e58d3038 	str	r3, [sp, #56]	; 0x38
  141c1c:	e5960018 	ldr	r0, [r6, #24]
  141c20:	0a00009e 	beq	141ea0 <__pthread_create+0x314>
  141c24:	e59f4510 	ldr	r4, [pc, #1296]	; 14213c <__pthread_create+0x5b0>
  141c28:	e1a031a7 	lsr	r3, r7, #3
  141c2c:	e5941000 	ldr	r1, [r4]
  141c30:	e3c2500f 	bic	r5, r2, #15
  141c34:	e0811000 	add	r1, r1, r0
  141c38:	e3510b02 	cmp	r1, #2048	; 0x800
  141c3c:	23a0c000 	movcs	ip, #0
  141c40:	33a0c001 	movcc	ip, #1
  141c44:	e1530001 	cmp	r3, r1
  141c48:	93a0c000 	movls	ip, #0
  141c4c:	e0423007 	sub	r3, r2, r7
  141c50:	e35c0000 	cmp	ip, #0
  141c54:	e58d3020 	str	r3, [sp, #32]
  141c58:	1a000111 	bne	1420a4 <__pthread_create+0x518>
  141c5c:	e2817eff 	add	r7, r1, #4080	; 0xff0
  141c60:	e287700f 	add	r7, r7, #15
  141c64:	e3c77eff 	bic	r7, r7, #4080	; 0xff0
  141c68:	e3c7700f 	bic	r7, r7, #15
  141c6c:	e3a00000 	mov	r0, #0
  141c70:	e3a01000 	mov	r1, #0
  141c74:	e3e03000 	mvn	r3, #0
  141c78:	e58d0008 	str	r0, [sp, #8]
  141c7c:	e58d100c 	str	r1, [sp, #12]
  141c80:	e58d3000 	str	r3, [sp]
  141c84:	e3a02003 	mov	r2, #3
  141c88:	e3a03022 	mov	r3, #34	; 0x22
  141c8c:	e1a01007 	mov	r1, r7
  141c90:	ebffeda8 	bl	13d338 <__mmap>
  141c94:	e3700001 	cmn	r0, #1
  141c98:	e1a0b000 	mov	fp, r0
  141c9c:	0a0000ed 	beq	142058 <__pthread_create+0x4cc>
  141ca0:	e5943000 	ldr	r3, [r4]
  141ca4:	e5960018 	ldr	r0, [r6, #24]
  141ca8:	e0473003 	sub	r3, r7, r3
  141cac:	e08b3003 	add	r3, fp, r3
  141cb0:	e3550000 	cmp	r5, #0
  141cb4:	e58d3024 	str	r3, [sp, #36]	; 0x24
  141cb8:	e2600000 	rsb	r0, r0, #0
  141cbc:	0a000108 	beq	1420e4 <__pthread_create+0x558>
  141cc0:	e3a08000 	mov	r8, #0
  141cc4:	e0830000 	add	r0, r3, r0
  141cc8:	eb000202 	bl	1424d8 <__copy_tls>
  141ccc:	e1a04000 	mov	r4, r0
  141cd0:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
  141cd4:	e5805038 	str	r5, [r0, #56]	; 0x38
  141cd8:	e3530000 	cmp	r3, #0
  141cdc:	e59f345c 	ldr	r3, [pc, #1116]	; 142140 <__pthread_create+0x5b4>
  141ce0:	e5808040 	str	r8, [r0, #64]	; 0x40
  141ce4:	e580b030 	str	fp, [r0, #48]	; 0x30
  141ce8:	e5807034 	str	r7, [r0, #52]	; 0x34
  141cec:	e5840000 	str	r0, [r4]
  141cf0:	e5803060 	str	r3, [r0, #96]	; 0x60
  141cf4:	13a03002 	movne	r3, #2
  141cf8:	03a03001 	moveq	r3, #1
  141cfc:	e59d2020 	ldr	r2, [sp, #32]
  141d00:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
  141d04:	e0452002 	sub	r2, r5, r2
  141d08:	e5803024 	str	r3, [r0, #36]	; 0x24
  141d0c:	e580203c 	str	r2, [r0, #60]	; 0x3c
  141d10:	e59a2014 	ldr	r2, [sl, #20]
  141d14:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
  141d18:	e5802014 	str	r2, [r0, #20]
  141d1c:	e2802050 	add	r2, r0, #80	; 0x50
  141d20:	e5802050 	str	r2, [r0, #80]	; 0x50
  141d24:	e59d2014 	ldr	r2, [sp, #20]
  141d28:	e3c55003 	bic	r5, r5, #3
  141d2c:	e580104c 	str	r1, [r0, #76]	; 0x4c
  141d30:	e5052018 	str	r2, [r5, #-24]	; 0xffffffe8
  141d34:	e59d2018 	ldr	r2, [sp, #24]
  141d38:	e3530000 	cmp	r3, #0
  141d3c:	128d3028 	addne	r3, sp, #40	; 0x28
  141d40:	e5052014 	str	r2, [r5, #-20]	; 0xffffffec
  141d44:	128d2034 	addne	r2, sp, #52	; 0x34
  141d48:	15052010 	strne	r2, [r5, #-16]
  141d4c:	05053010 	streq	r3, [r5, #-16]
  141d50:	e505300c 	str	r3, [r5, #-12]
  141d54:	e28d0058 	add	r0, sp, #88	; 0x58
  141d58:	eb000366 	bl	142af8 <__block_app_sigs>
  141d5c:	e28d1058 	add	r1, sp, #88	; 0x58
  141d60:	e3a02008 	mov	r2, #8
  141d64:	e2450008 	sub	r0, r5, #8
  141d68:	ebfff9a7 	bl	14040c <memcpy>
  141d6c:	e5153004 	ldr	r3, [r5, #-4]
  141d70:	e2458018 	sub	r8, r5, #24
  141d74:	e3c33001 	bic	r3, r3, #1
  141d78:	e5053004 	str	r3, [r5, #-4]
  141d7c:	ebfffe26 	bl	14161c <__tl_lock>
  141d80:	e59f33bc 	ldr	r3, [pc, #956]	; 142144 <__pthread_create+0x5b8>
  141d84:	e596c00c 	ldr	ip, [r6, #12]
  141d88:	e3790001 	cmn	r9, #1
  141d8c:	e59f13b4 	ldr	r1, [pc, #948]	; 142148 <__pthread_create+0x5bc>
  141d90:	e59f03b4 	ldr	r0, [pc, #948]	; 14214c <__pthread_create+0x5c0>
  141d94:	e2842078 	add	r2, r4, #120	; 0x78
  141d98:	01a00003 	moveq	r0, r3
  141d9c:	e284301c 	add	r3, r4, #28
  141da0:	e28cc001 	add	ip, ip, #1
  141da4:	e58d1008 	str	r1, [sp, #8]
  141da8:	e58d2004 	str	r2, [sp, #4]
  141dac:	e58d3000 	str	r3, [sp]
  141db0:	e1a01008 	mov	r1, r8
  141db4:	e1a03008 	mov	r3, r8
  141db8:	e59f2390 	ldr	r2, [pc, #912]	; 142150 <__pthread_create+0x5c4>
  141dbc:	e586c00c 	str	ip, [r6, #12]
  141dc0:	eb0006ff 	bl	1439c4 <__clone>
  141dc4:	e3500000 	cmp	r0, #0
  141dc8:	ba0000a5 	blt	142064 <__pthread_create+0x4d8>
  141dcc:	e59a300c 	ldr	r3, [sl, #12]
  141dd0:	e584a008 	str	sl, [r4, #8]
  141dd4:	e584300c 	str	r3, [r4, #12]
  141dd8:	e5834008 	str	r4, [r3, #8]
  141ddc:	e5943008 	ldr	r3, [r4, #8]
  141de0:	e583400c 	str	r4, [r3, #12]
  141de4:	ebfffe30 	bl	1416ac <__tl_unlock>
  141de8:	e28d0058 	add	r0, sp, #88	; 0x58
  141dec:	eb00034f 	bl	142b30 <__restore_sigs>
  141df0:	ebfffe08 	bl	141618 <__acquire_ptc>
  141df4:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
  141df8:	e3530000 	cmp	r3, #0
  141dfc:	0a000014 	beq	141e54 <__pthread_create+0x2c8>
  141e00:	e59f534c 	ldr	r5, [pc, #844]	; 142154 <__pthread_create+0x5c8>
  141e04:	ea000002 	b	141e14 <__pthread_create+0x288>
  141e08:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
  141e0c:	e3730001 	cmn	r3, #1
  141e10:	1a00000c 	bne	141e48 <__pthread_create+0x2bc>
  141e14:	e3e00000 	mvn	r0, #0
  141e18:	e3e01001 	mvn	r1, #1
  141e1c:	e28d2028 	add	r2, sp, #40	; 0x28
  141e20:	e5953000 	ldr	r3, [r5]
  141e24:	e12fff33 	blx	r3
  141e28:	e3500000 	cmp	r0, #0
  141e2c:	1afffff5 	bne	141e08 <__pthread_create+0x27c>
  141e30:	e1a03000 	mov	r3, r0
  141e34:	e1a02001 	mov	r2, r1
  141e38:	e28d0028 	add	r0, sp, #40	; 0x28
  141e3c:	e1a01003 	mov	r1, r3
  141e40:	e3a03001 	mov	r3, #1
  141e44:	ebfffd60 	bl	1413cc <__wait>
  141e48:	e59d0028 	ldr	r0, [sp, #40]	; 0x28
  141e4c:	e3500000 	cmp	r0, #0
  141e50:	1a000002 	bne	141e60 <__pthread_create+0x2d4>
  141e54:	e3a00000 	mov	r0, #0
  141e58:	e59d301c 	ldr	r3, [sp, #28]
  141e5c:	e5834000 	str	r4, [r3]
  141e60:	e28dd0dc 	add	sp, sp, #220	; 0xdc
  141e64:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  141e68:	e1a0e009 	mov	lr, r9
  141e6c:	e28dc034 	add	ip, sp, #52	; 0x34
  141e70:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
  141e74:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
  141e78:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
  141e7c:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
  141e80:	e59e3000 	ldr	r3, [lr]
  141e84:	e58c3000 	str	r3, [ip]
  141e88:	ebfffde2 	bl	141618 <__acquire_ptc>
  141e8c:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
  141e90:	e59d7034 	ldr	r7, [sp, #52]	; 0x34
  141e94:	e3520000 	cmp	r2, #0
  141e98:	e5960018 	ldr	r0, [r6, #24]
  141e9c:	1affff60 	bne	141c24 <__pthread_create+0x98>
  141ea0:	e59f5294 	ldr	r5, [pc, #660]	; 14213c <__pthread_create+0x5b0>
  141ea4:	e3a01000 	mov	r1, #0
  141ea8:	e5953000 	ldr	r3, [r5]
  141eac:	e59d8038 	ldr	r8, [sp, #56]	; 0x38
  141eb0:	e0833000 	add	r3, r3, r0
  141eb4:	e2833eff 	add	r3, r3, #4080	; 0xff0
  141eb8:	e283300f 	add	r3, r3, #15
  141ebc:	e0837007 	add	r7, r3, r7
  141ec0:	e3a00000 	mov	r0, #0
  141ec4:	e3e03000 	mvn	r3, #0
  141ec8:	e59f4288 	ldr	r4, [pc, #648]	; 142158 <__pthread_create+0x5cc>
  141ecc:	e2888eff 	add	r8, r8, #4080	; 0xff0
  141ed0:	e288800f 	add	r8, r8, #15
  141ed4:	e0088004 	and	r8, r8, r4
  141ed8:	e3580000 	cmp	r8, #0
  141edc:	e0044007 	and	r4, r4, r7
  141ee0:	e58d3000 	str	r3, [sp]
  141ee4:	e58d0008 	str	r0, [sp, #8]
  141ee8:	e58d100c 	str	r1, [sp, #12]
  141eec:	e3a03022 	mov	r3, #34	; 0x22
  141ef0:	e0847008 	add	r7, r4, r8
  141ef4:	0a00007d 	beq	1420f0 <__pthread_create+0x564>
  141ef8:	e1a00002 	mov	r0, r2
  141efc:	e1a01007 	mov	r1, r7
  141f00:	ebffed0c 	bl	13d338 <__mmap>
  141f04:	e3700001 	cmn	r0, #1
  141f08:	e1a0b000 	mov	fp, r0
  141f0c:	0a000051 	beq	142058 <__pthread_create+0x4cc>
  141f10:	e0803008 	add	r3, r0, r8
  141f14:	e1a01004 	mov	r1, r4
  141f18:	e1a00003 	mov	r0, r3
  141f1c:	e3a02003 	mov	r2, #3
  141f20:	e58d3020 	str	r3, [sp, #32]
  141f24:	eb0002cb 	bl	142a58 <__mprotect>
  141f28:	e3500000 	cmp	r0, #0
  141f2c:	1a000042 	bne	14203c <__pthread_create+0x4b0>
  141f30:	e5953000 	ldr	r3, [r5]
  141f34:	e5960018 	ldr	r0, [r6, #24]
  141f38:	e0473003 	sub	r3, r7, r3
  141f3c:	e08b3003 	add	r3, fp, r3
  141f40:	e58d3024 	str	r3, [sp, #36]	; 0x24
  141f44:	e2600000 	rsb	r0, r0, #0
  141f48:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
  141f4c:	e0835000 	add	r5, r3, r0
  141f50:	e1a00005 	mov	r0, r5
  141f54:	eaffff5b 	b	141cc8 <__pthread_create+0x13c>
  141f58:	ebffeee1 	bl	13dae4 <__ofl_lock>
  141f5c:	e5903000 	ldr	r3, [r0]
  141f60:	e3530000 	cmp	r3, #0
  141f64:	0a000005 	beq	141f80 <__pthread_create+0x3f4>
  141f68:	e593204c 	ldr	r2, [r3, #76]	; 0x4c
  141f6c:	e3520000 	cmp	r2, #0
  141f70:	b583404c 	strlt	r4, [r3, #76]	; 0x4c
  141f74:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  141f78:	e3530000 	cmp	r3, #0
  141f7c:	1afffff9 	bne	141f68 <__pthread_create+0x3dc>
  141f80:	ebffeede 	bl	13db00 <__ofl_unlock>
  141f84:	e59f31d0 	ldr	r3, [pc, #464]	; 14215c <__pthread_create+0x5d0>
  141f88:	e5933000 	ldr	r3, [r3]
  141f8c:	e3530000 	cmp	r3, #0
  141f90:	0a000003 	beq	141fa4 <__pthread_create+0x418>
  141f94:	e593204c 	ldr	r2, [r3, #76]	; 0x4c
  141f98:	e3520000 	cmp	r2, #0
  141f9c:	b3a02000 	movlt	r2, #0
  141fa0:	b583204c 	strlt	r2, [r3, #76]	; 0x4c
  141fa4:	e59f31b4 	ldr	r3, [pc, #436]	; 142160 <__pthread_create+0x5d4>
  141fa8:	e5933000 	ldr	r3, [r3]
  141fac:	e3530000 	cmp	r3, #0
  141fb0:	0a000003 	beq	141fc4 <__pthread_create+0x438>
  141fb4:	e593204c 	ldr	r2, [r3, #76]	; 0x4c
  141fb8:	e3520000 	cmp	r2, #0
  141fbc:	b3a02000 	movlt	r2, #0
  141fc0:	b583204c 	strlt	r2, [r3, #76]	; 0x4c
  141fc4:	e59f3198 	ldr	r3, [pc, #408]	; 142164 <__pthread_create+0x5d8>
  141fc8:	e5933000 	ldr	r3, [r3]
  141fcc:	e3530000 	cmp	r3, #0
  141fd0:	0a000003 	beq	141fe4 <__pthread_create+0x458>
  141fd4:	e593204c 	ldr	r2, [r3, #76]	; 0x4c
  141fd8:	e3520000 	cmp	r2, #0
  141fdc:	b3a02000 	movlt	r2, #0
  141fe0:	b583204c 	strlt	r2, [r3, #76]	; 0x4c
  141fe4:	e3a03003 	mov	r3, #3
  141fe8:	e3a04000 	mov	r4, #0
  141fec:	e3a000af 	mov	r0, #175	; 0xaf
  141ff0:	e58d402c 	str	r4, [sp, #44]	; 0x2c
  141ff4:	e58d3030 	str	r3, [sp, #48]	; 0x30
  141ff8:	ebffe68b 	bl	13ba2c <get_rtt_syscall>
  141ffc:	e2505000 	subs	r5, r0, #0
  142000:	0a000004 	beq	142018 <__pthread_create+0x48c>
  142004:	e1a02004 	mov	r2, r4
  142008:	e28d102c 	add	r1, sp, #44	; 0x2c
  14200c:	e3a03008 	mov	r3, #8
  142010:	e3a00001 	mov	r0, #1
  142014:	e12fff35 	blx	r5
  142018:	e59f3148 	ldr	r3, [pc, #328]	; 142168 <__pthread_create+0x5dc>
  14201c:	e58a304c 	str	r3, [sl, #76]	; 0x4c
  142020:	ebfffd7c 	bl	141618 <__acquire_ptc>
  142024:	e3a03001 	mov	r3, #1
  142028:	e5863004 	str	r3, [r6, #4]
  14202c:	e2493001 	sub	r3, r9, #1
  142030:	e3730003 	cmn	r3, #3
  142034:	8afffeef 	bhi	141bf8 <__pthread_create+0x6c>
  142038:	eaffff8a 	b	141e68 <__pthread_create+0x2dc>
  14203c:	ebffd944 	bl	138554 <__errno_location>
  142040:	e5903000 	ldr	r3, [r0]
  142044:	e3530026 	cmp	r3, #38	; 0x26
  142048:	0affffb8 	beq	141f30 <__pthread_create+0x3a4>
  14204c:	e1a01007 	mov	r1, r7
  142050:	e1a0000b 	mov	r0, fp
  142054:	ebffed1d 	bl	13d4d0 <__munmap>
  142058:	ebfffd6e 	bl	141618 <__acquire_ptc>
  14205c:	e3a0000b 	mov	r0, #11
  142060:	eaffff7e 	b	141e60 <__pthread_create+0x2d4>
  142064:	ebfffd90 	bl	1416ac <__tl_unlock>
  142068:	e28d0058 	add	r0, sp, #88	; 0x58
  14206c:	eb0002af 	bl	142b30 <__restore_sigs>
  142070:	ebfffd68 	bl	141618 <__acquire_ptc>
  142074:	e596300c 	ldr	r3, [r6, #12]
  142078:	e35b0000 	cmp	fp, #0
  14207c:	e2433001 	sub	r3, r3, #1
  142080:	e586300c 	str	r3, [r6, #12]
  142084:	03a0000b 	moveq	r0, #11
  142088:	0affff74 	beq	141e60 <__pthread_create+0x2d4>
  14208c:	e1a01007 	mov	r1, r7
  142090:	e1a0000b 	mov	r0, fp
  142094:	ebffed0d 	bl	13d4d0 <__munmap>
  142098:	e3a0000b 	mov	r0, #11
  14209c:	e28dd0dc 	add	sp, sp, #220	; 0xdc
  1420a0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  1420a4:	e5943000 	ldr	r3, [r4]
  1420a8:	e1a02001 	mov	r2, r1
  1420ac:	e0458003 	sub	r8, r5, r3
  1420b0:	e0485000 	sub	r5, r8, r0
  1420b4:	e1a00005 	mov	r0, r5
  1420b8:	e3a01000 	mov	r1, #0
  1420bc:	e58d8024 	str	r8, [sp, #36]	; 0x24
  1420c0:	ebfffa09 	bl	1408ec <memset>
  1420c4:	e3580000 	cmp	r8, #0
  1420c8:	e1a03008 	mov	r3, r8
  1420cc:	0afffee6 	beq	141c6c <__pthread_create+0xe0>
  1420d0:	e3a08000 	mov	r8, #0
  1420d4:	e5960018 	ldr	r0, [r6, #24]
  1420d8:	e1a0b008 	mov	fp, r8
  1420dc:	e0430000 	sub	r0, r3, r0
  1420e0:	eafffef8 	b	141cc8 <__pthread_create+0x13c>
  1420e4:	e1a08005 	mov	r8, r5
  1420e8:	e58db020 	str	fp, [sp, #32]
  1420ec:	eaffff95 	b	141f48 <__pthread_create+0x3bc>
  1420f0:	e3a02003 	mov	r2, #3
  1420f4:	e1a01007 	mov	r1, r7
  1420f8:	e1a00008 	mov	r0, r8
  1420fc:	ebffec8d 	bl	13d338 <__mmap>
  142100:	e3700001 	cmn	r0, #1
  142104:	e1a0b000 	mov	fp, r0
  142108:	0affffd2 	beq	142058 <__pthread_create+0x4cc>
  14210c:	e5953000 	ldr	r3, [r5]
  142110:	e5960018 	ldr	r0, [r6, #24]
  142114:	e0473003 	sub	r3, r7, r3
  142118:	e08b3003 	add	r3, fp, r3
  14211c:	e58d3024 	str	r3, [sp, #36]	; 0x24
  142120:	e2600000 	rsb	r0, r0, #0
  142124:	e58db020 	str	fp, [sp, #32]
  142128:	eaffff86 	b	141f48 <__pthread_create+0x3bc>
  14212c:	00575604 	.word	0x00575604
  142130:	0014d3d4 	.word	0x0014d3d4
  142134:	0014d3dc 	.word	0x0014d3dc
  142138:	0014d3d8 	.word	0x0014d3d8
  14213c:	0014ebe4 	.word	0x0014ebe4
  142140:	0057562c 	.word	0x0057562c
  142144:	00141b30 	.word	0x00141b30
  142148:	0057564c 	.word	0x0057564c
  14214c:	00141a34 	.word	0x00141a34
  142150:	007d0f00 	.word	0x007d0f00
  142154:	0014d3d0 	.word	0x0014d3d0
  142158:	fffff000 	.word	0xfffff000
  14215c:	0014ebe8 	.word	0x0014ebe8
  142160:	0014d3c8 	.word	0x0014d3c8
  142164:	0014d330 	.word	0x0014d330
  142168:	0014ebec 	.word	0x0014ebec

0014216c <__get_thread_map>:
  14216c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  142170:	e2504000 	subs	r4, r0, #0
  142174:	e24dd014 	sub	sp, sp, #20
  142178:	0a000002 	beq	142188 <__get_thread_map+0x1c>
  14217c:	e2840078 	add	r0, r4, #120	; 0x78
  142180:	e28dd014 	add	sp, sp, #20
  142184:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  142188:	e3a06000 	mov	r6, #0
  14218c:	e3a07000 	mov	r7, #0
  142190:	e3e03000 	mvn	r3, #0
  142194:	e58d6008 	str	r6, [sp, #8]
  142198:	e58d700c 	str	r7, [sp, #12]
  14219c:	e59f5074 	ldr	r5, [pc, #116]	; 142218 <__get_thread_map+0xac>
  1421a0:	e3a02003 	mov	r2, #3
  1421a4:	e5951018 	ldr	r1, [r5, #24]
  1421a8:	e58d3000 	str	r3, [sp]
  1421ac:	e3510000 	cmp	r1, #0
  1421b0:	03a01078 	moveq	r1, #120	; 0x78
  1421b4:	e3a03022 	mov	r3, #34	; 0x22
  1421b8:	ebffec5e 	bl	13d338 <__mmap>
  1421bc:	e2504000 	subs	r4, r0, #0
  1421c0:	0a000012 	beq	142210 <__get_thread_map+0xa4>
  1421c4:	e59f3050 	ldr	r3, [pc, #80]	; 14221c <__get_thread_map+0xb0>
  1421c8:	e2855028 	add	r5, r5, #40	; 0x28
  1421cc:	e5932000 	ldr	r2, [r3]
  1421d0:	e2843050 	add	r3, r4, #80	; 0x50
  1421d4:	e5845060 	str	r5, [r4, #96]	; 0x60
  1421d8:	e5844000 	str	r4, [r4]
  1421dc:	e5844008 	str	r4, [r4, #8]
  1421e0:	e584400c 	str	r4, [r4, #12]
  1421e4:	e5842014 	str	r2, [r4, #20]
  1421e8:	e5843050 	str	r3, [r4, #80]	; 0x50
  1421ec:	e3a000e0 	mov	r0, #224	; 0xe0
  1421f0:	ebffe60d 	bl	13ba2c <get_rtt_syscall>
  1421f4:	e3500000 	cmp	r0, #0
  1421f8:	0a000000 	beq	142200 <__get_thread_map+0x94>
  1421fc:	e12fff30 	blx	r0
  142200:	e3a03000 	mov	r3, #0
  142204:	e584001c 	str	r0, [r4, #28]
  142208:	e5843020 	str	r3, [r4, #32]
  14220c:	eaffffda 	b	14217c <__get_thread_map+0x10>
  142210:	e1a00004 	mov	r0, r4
  142214:	eaffffd9 	b	142180 <__get_thread_map+0x14>
  142218:	00575604 	.word	0x00575604
  14221c:	00575650 	.word	0x00575650

00142220 <__put_thread_map>:
  142220:	e3500000 	cmp	r0, #0
  142224:	012fff1e 	bxeq	lr
  142228:	e59f3010 	ldr	r3, [pc, #16]	; 142240 <__put_thread_map+0x20>
  14222c:	e2400078 	sub	r0, r0, #120	; 0x78
  142230:	e5931018 	ldr	r1, [r3, #24]
  142234:	e3510000 	cmp	r1, #0
  142238:	03a01078 	moveq	r1, #120	; 0x78
  14223c:	eaffeca3 	b	13d4d0 <__munmap>
  142240:	00575604 	.word	0x00575604

00142244 <__pthread_init_run>:
  142244:	e92d4070 	push	{r4, r5, r6, lr}
  142248:	e1a05000 	mov	r5, r0
  14224c:	e3a00000 	mov	r0, #0
  142250:	e1a06001 	mov	r6, r1
  142254:	ebffffc4 	bl	14216c <__get_thread_map>
  142258:	e2504000 	subs	r4, r0, #0
  14225c:	08bd8070 	popeq	{r4, r5, r6, pc}
  142260:	eb000582 	bl	143870 <__set_thread_area>
  142264:	e1a00006 	mov	r0, r6
  142268:	e12fff35 	blx	r5
  14226c:	e59f3014 	ldr	r3, [pc, #20]	; 142288 <__pthread_init_run+0x44>
  142270:	e2440078 	sub	r0, r4, #120	; 0x78
  142274:	e5931018 	ldr	r1, [r3, #24]
  142278:	e8bd4070 	pop	{r4, r5, r6, lr}
  14227c:	e3510000 	cmp	r1, #0
  142280:	03a01078 	moveq	r1, #120	; 0x78
  142284:	eaffec91 	b	13d4d0 <__munmap>
  142288:	00575604 	.word	0x00575604

0014228c <__vm_wait>:
  14228c:	e92d4070 	push	{r4, r5, r6, lr}
  142290:	e59f402c 	ldr	r4, [pc, #44]	; 1422c4 <__vm_wait+0x38>
  142294:	e5942000 	ldr	r2, [r4]
  142298:	e3520000 	cmp	r2, #0
  14229c:	08bd8070 	popeq	{r4, r5, r6, pc}
  1422a0:	e2845004 	add	r5, r4, #4
  1422a4:	e3a03001 	mov	r3, #1
  1422a8:	e1a01005 	mov	r1, r5
  1422ac:	e59f0010 	ldr	r0, [pc, #16]	; 1422c4 <__vm_wait+0x38>
  1422b0:	ebfffc45 	bl	1413cc <__wait>
  1422b4:	e5942000 	ldr	r2, [r4]
  1422b8:	e3520000 	cmp	r2, #0
  1422bc:	1afffff8 	bne	1422a4 <__vm_wait+0x18>
  1422c0:	e8bd8070 	pop	{r4, r5, r6, pc}
  1422c4:	0014ebf8 	.word	0x0014ebf8

001422c8 <__vm_lock>:
  1422c8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  1422cc:	e59f6038 	ldr	r6, [pc, #56]	; 14230c <__vm_lock+0x44>
  1422d0:	e59f8038 	ldr	r8, [pc, #56]	; 142310 <__vm_lock+0x48>
  1422d4:	e1a07006 	mov	r7, r6
  1422d8:	e5964000 	ldr	r4, [r6]
  1422dc:	e2845001 	add	r5, r4, #1
  1422e0:	e1a00004 	mov	r0, r4
  1422e4:	e1a01005 	mov	r1, r5
  1422e8:	e1a02007 	mov	r2, r7
  1422ec:	e5983000 	ldr	r3, [r8]
  1422f0:	e12fff33 	blx	r3
  1422f4:	e3500000 	cmp	r0, #0
  1422f8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  1422fc:	e5963000 	ldr	r3, [r6]
  142300:	e1540003 	cmp	r4, r3
  142304:	0afffff5 	beq	1422e0 <__vm_lock+0x18>
  142308:	eafffff2 	b	1422d8 <__vm_lock+0x10>
  14230c:	0014ebf8 	.word	0x0014ebf8
  142310:	0014d3d0 	.word	0x0014d3d0

00142314 <__vm_unlock>:
  142314:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  142318:	e59f6098 	ldr	r6, [pc, #152]	; 1423b8 <__vm_unlock+0xa4>
  14231c:	e59f8098 	ldr	r8, [pc, #152]	; 1423bc <__vm_unlock+0xa8>
  142320:	e1a07006 	mov	r7, r6
  142324:	e5964000 	ldr	r4, [r6]
  142328:	e2445001 	sub	r5, r4, #1
  14232c:	ea000002 	b	14233c <__vm_unlock+0x28>
  142330:	e5963000 	ldr	r3, [r6]
  142334:	e1540003 	cmp	r4, r3
  142338:	1afffff9 	bne	142324 <__vm_unlock+0x10>
  14233c:	e1a00004 	mov	r0, r4
  142340:	e1a01005 	mov	r1, r5
  142344:	e1a02007 	mov	r2, r7
  142348:	e5983000 	ldr	r3, [r8]
  14234c:	e12fff33 	blx	r3
  142350:	e3500000 	cmp	r0, #0
  142354:	1afffff5 	bne	142330 <__vm_unlock+0x1c>
  142358:	e3540001 	cmp	r4, #1
  14235c:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
  142360:	e5963004 	ldr	r3, [r6, #4]
  142364:	e3530000 	cmp	r3, #0
  142368:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  14236c:	e3a000f0 	mov	r0, #240	; 0xf0
  142370:	ebffe5ad 	bl	13ba2c <get_rtt_syscall>
  142374:	e2503000 	subs	r3, r0, #0
  142378:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  14237c:	e3e02102 	mvn	r2, #-2147483648	; 0x80000000
  142380:	e3a01081 	mov	r1, #129	; 0x81
  142384:	e59f002c 	ldr	r0, [pc, #44]	; 1423b8 <__vm_unlock+0xa4>
  142388:	e12fff33 	blx	r3
  14238c:	e3700026 	cmn	r0, #38	; 0x26
  142390:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
  142394:	e3a000f0 	mov	r0, #240	; 0xf0
  142398:	ebffe5a3 	bl	13ba2c <get_rtt_syscall>
  14239c:	e2503000 	subs	r3, r0, #0
  1423a0:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  1423a4:	e1a01004 	mov	r1, r4
  1423a8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
  1423ac:	e3e02102 	mvn	r2, #-2147483648	; 0x80000000
  1423b0:	e59f0000 	ldr	r0, [pc]	; 1423b8 <__vm_unlock+0xa4>
  1423b4:	e12fff13 	bx	r3
  1423b8:	0014ebf8 	.word	0x0014ebf8
  1423bc:	0014d3d0 	.word	0x0014d3d0

001423c0 <time>:
  1423c0:	e92d4010 	push	{r4, lr}
  1423c4:	e1a04000 	mov	r4, r0
  1423c8:	e24dd010 	sub	sp, sp, #16
  1423cc:	e1a0100d 	mov	r1, sp
  1423d0:	e3a00000 	mov	r0, #0
  1423d4:	eb000595 	bl	143a30 <__clock_gettime>
  1423d8:	e89d0003 	ldm	sp, {r0, r1}
  1423dc:	e3540000 	cmp	r4, #0
  1423e0:	18840003 	stmne	r4, {r0, r1}
  1423e4:	e28dd010 	add	sp, sp, #16
  1423e8:	e8bd8010 	pop	{r4, pc}

001423ec <__aio_close>:
  1423ec:	e12fff1e 	bx	lr

001423f0 <close>:
  1423f0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  1423f4:	e24dd014 	sub	sp, sp, #20
  1423f8:	ebfffffb 	bl	1423ec <__aio_close>
  1423fc:	e3a03000 	mov	r3, #0
  142400:	e1a01000 	mov	r1, r0
  142404:	e58d3008 	str	r3, [sp, #8]
  142408:	e58d3004 	str	r3, [sp, #4]
  14240c:	e58d3000 	str	r3, [sp]
  142410:	e1a02003 	mov	r2, r3
  142414:	e3a00006 	mov	r0, #6
  142418:	ebfffbea 	bl	1413c8 <__syscall_cp>
  14241c:	e3700004 	cmn	r0, #4
  142420:	03a00000 	moveq	r0, #0
  142424:	e28dd014 	add	sp, sp, #20
  142428:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  14242c:	eaffe5b3 	b	13bb00 <__syscall_ret>

00142430 <tolower>:
  142430:	e2403041 	sub	r3, r0, #65	; 0x41
  142434:	e3530019 	cmp	r3, #25
  142438:	93800020 	orrls	r0, r0, #32
  14243c:	e12fff1e 	bx	lr

00142440 <__tolower_l>:
  142440:	e2403041 	sub	r3, r0, #65	; 0x41
  142444:	e3530019 	cmp	r3, #25
  142448:	93800020 	orrls	r0, r0, #32
  14244c:	e12fff1e 	bx	lr

00142450 <__init_tp>:
  142450:	e92d4010 	push	{r4, lr}
  142454:	e5800000 	str	r0, [r0]
  142458:	e1a04000 	mov	r4, r0
  14245c:	e2800078 	add	r0, r0, #120	; 0x78
  142460:	eb000502 	bl	143870 <__set_thread_area>
  142464:	e3500000 	cmp	r0, #0
  142468:	ba000015 	blt	1424c4 <__init_tp+0x74>
  14246c:	03a02001 	moveq	r2, #1
  142470:	059f3054 	ldreq	r3, [pc, #84]	; 1424cc <__init_tp+0x7c>
  142474:	e3a00c01 	mov	r0, #256	; 0x100
  142478:	05832000 	streq	r2, [r3]
  14247c:	e3a03001 	mov	r3, #1
  142480:	e5843024 	str	r3, [r4, #36]	; 0x24
  142484:	ebffe568 	bl	13ba2c <get_rtt_syscall>
  142488:	e2503000 	subs	r3, r0, #0
  14248c:	0a00000a 	beq	1424bc <__init_tp+0x6c>
  142490:	e59f0038 	ldr	r0, [pc, #56]	; 1424d0 <__init_tp+0x80>
  142494:	e12fff33 	blx	r3
  142498:	e59f2034 	ldr	r2, [pc, #52]	; 1424d4 <__init_tp+0x84>
  14249c:	e2843050 	add	r3, r4, #80	; 0x50
  1424a0:	e584001c 	str	r0, [r4, #28]
  1424a4:	e5844008 	str	r4, [r4, #8]
  1424a8:	e584400c 	str	r4, [r4, #12]
  1424ac:	e5842060 	str	r2, [r4, #96]	; 0x60
  1424b0:	e5843050 	str	r3, [r4, #80]	; 0x50
  1424b4:	e3a00000 	mov	r0, #0
  1424b8:	e8bd8010 	pop	{r4, pc}
  1424bc:	e1a00003 	mov	r0, r3
  1424c0:	eafffff4 	b	142498 <__init_tp+0x48>
  1424c4:	e3e00000 	mvn	r0, #0
  1424c8:	e8bd8010 	pop	{r4, pc}
  1424cc:	00575604 	.word	0x00575604
  1424d0:	0057564c 	.word	0x0057564c
  1424d4:	0057562c 	.word	0x0057562c

001424d8 <__copy_tls>:
  1424d8:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  1424dc:	e59f808c 	ldr	r8, [pc, #140]	; 142570 <__copy_tls+0x98>
  1424e0:	e3e03077 	mvn	r3, #119	; 0x77
  1424e4:	e5982020 	ldr	r2, [r8, #32]
  1424e8:	e598601c 	ldr	r6, [r8, #28]
  1424ec:	e1a07102 	lsl	r7, r2, #2
  1424f0:	e2277003 	eor	r7, r7, #3
  1424f4:	e1e07007 	mvn	r7, r7
  1424f8:	e5981018 	ldr	r1, [r8, #24]
  1424fc:	e5984014 	ldr	r4, [r8, #20]
  142500:	e2466001 	sub	r6, r6, #1
  142504:	e0433000 	sub	r3, r3, r0
  142508:	e0066003 	and	r6, r6, r3
  14250c:	e0877001 	add	r7, r7, r1
  142510:	e3540000 	cmp	r4, #0
  142514:	e1a09000 	mov	r9, r0
  142518:	e0806006 	add	r6, r0, r6
  14251c:	e080a007 	add	sl, r0, r7
  142520:	0a00000d 	beq	14255c <__copy_tls+0x84>
  142524:	e1a0b00a 	mov	fp, sl
  142528:	e2865078 	add	r5, r6, #120	; 0x78
  14252c:	e5943014 	ldr	r3, [r4, #20]
  142530:	e5941004 	ldr	r1, [r4, #4]
  142534:	e0853003 	add	r3, r5, r3
  142538:	e5ab3004 	str	r3, [fp, #4]!
  14253c:	e5940014 	ldr	r0, [r4, #20]
  142540:	e5942008 	ldr	r2, [r4, #8]
  142544:	e0850000 	add	r0, r5, r0
  142548:	ebfff7af 	bl	14040c <memcpy>
  14254c:	e5944000 	ldr	r4, [r4]
  142550:	e3540000 	cmp	r4, #0
  142554:	1afffff4 	bne	14252c <__copy_tls+0x54>
  142558:	e5982020 	ldr	r2, [r8, #32]
  14255c:	e7892007 	str	r2, [r9, r7]
  142560:	e1a00006 	mov	r0, r6
  142564:	e586a074 	str	sl, [r6, #116]	; 0x74
  142568:	e586a004 	str	sl, [r6, #4]
  14256c:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  142570:	00575604 	.word	0x00575604

00142574 <__init_tls>:
  142574:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  142578:	e5901014 	ldr	r1, [r0, #20]
  14257c:	e24dd00c 	sub	sp, sp, #12
  142580:	e3510000 	cmp	r1, #0
  142584:	e590600c 	ldr	r6, [r0, #12]
  142588:	0a000062 	beq	142718 <__init_tls+0x1a4>
  14258c:	e3a04000 	mov	r4, #0
  142590:	e59f81a0 	ldr	r8, [pc, #416]	; 142738 <__init_tls+0x1c4>
  142594:	e1a02006 	mov	r2, r6
  142598:	e1a03004 	mov	r3, r4
  14259c:	e1a0e004 	mov	lr, r4
  1425a0:	e590c010 	ldr	ip, [r0, #16]
  1425a4:	e5987000 	ldr	r7, [r8]
  1425a8:	e59f918c 	ldr	r9, [pc, #396]	; 14273c <__init_tls+0x1c8>
  1425ac:	e59f518c 	ldr	r5, [pc, #396]	; 142740 <__init_tls+0x1cc>
  1425b0:	ea000007 	b	1425d4 <__init_tls+0x60>
  1425b4:	e3500002 	cmp	r0, #2
  1425b8:	1a00003c 	bne	1426b0 <__init_tls+0x13c>
  1425bc:	e3550000 	cmp	r5, #0
  1425c0:	15923008 	ldrne	r3, [r2, #8]
  1425c4:	10453003 	subne	r3, r5, r3
  1425c8:	e2511001 	subs	r1, r1, #1
  1425cc:	e082200c 	add	r2, r2, ip
  1425d0:	0a000007 	beq	1425f4 <__init_tls+0x80>
  1425d4:	e5920000 	ldr	r0, [r2]
  1425d8:	e3500006 	cmp	r0, #6
  1425dc:	1afffff4 	bne	1425b4 <__init_tls+0x40>
  1425e0:	e5923008 	ldr	r3, [r2, #8]
  1425e4:	e2511001 	subs	r1, r1, #1
  1425e8:	e0463003 	sub	r3, r6, r3
  1425ec:	e082200c 	add	r2, r2, ip
  1425f0:	1afffff7 	bne	1425d4 <__init_tls+0x60>
  1425f4:	e3540000 	cmp	r4, #0
  1425f8:	15887000 	strne	r7, [r8]
  1425fc:	e35e0000 	cmp	lr, #0
  142600:	0a000044 	beq	142718 <__init_tls+0x1a4>
  142604:	e3a04001 	mov	r4, #1
  142608:	e59ec008 	ldr	ip, [lr, #8]
  14260c:	e59e1010 	ldr	r1, [lr, #16]
  142610:	e59f212c 	ldr	r2, [pc, #300]	; 142744 <__init_tls+0x1d0>
  142614:	e59e001c 	ldr	r0, [lr, #28]
  142618:	e083300c 	add	r3, r3, ip
  14261c:	e59fc124 	ldr	ip, [pc, #292]	; 142748 <__init_tls+0x1d4>
  142620:	e5821008 	str	r1, [r2, #8]
  142624:	e5823004 	str	r3, [r2, #4]
  142628:	e59e1014 	ldr	r1, [lr, #20]
  14262c:	e5820010 	str	r0, [r2, #16]
  142630:	e58c2014 	str	r2, [ip, #20]
  142634:	e58c4020 	str	r4, [ip, #32]
  142638:	e3500003 	cmp	r0, #3
  14263c:	93a0e004 	movls	lr, #4
  142640:	e0833001 	add	r3, r3, r1
  142644:	e2404001 	sub	r4, r0, #1
  142648:	e2633000 	rsb	r3, r3, #0
  14264c:	e0033004 	and	r3, r3, r4
  142650:	e0833001 	add	r3, r3, r1
  142654:	93a01087 	movls	r1, #135	; 0x87
  142658:	91a0000e 	movls	r0, lr
  14265c:	e3c44007 	bic	r4, r4, #7
  142660:	e2844008 	add	r4, r4, #8
  142664:	82801083 	addhi	r1, r0, #131	; 0x83
  142668:	e5824014 	str	r4, [r2, #20]
  14266c:	e0834004 	add	r4, r3, r4
  142670:	e0844001 	add	r4, r4, r1
  142674:	e3c44003 	bic	r4, r4, #3
  142678:	9582e010 	strls	lr, [r2, #16]
  14267c:	e35400bc 	cmp	r4, #188	; 0xbc
  142680:	e58c001c 	str	r0, [ip, #28]
  142684:	e582300c 	str	r3, [r2, #12]
  142688:	e58c4018 	str	r4, [ip, #24]
  14268c:	959f00b8 	ldrls	r0, [pc, #184]	; 14274c <__init_tls+0x1d8>
  142690:	8a000013 	bhi	1426e4 <__init_tls+0x170>
  142694:	ebffff8f 	bl	1424d8 <__copy_tls>
  142698:	ebffff6c 	bl	142450 <__init_tp>
  14269c:	e3500000 	cmp	r0, #0
  1426a0:	aa000000 	bge	1426a8 <__init_tls+0x134>
  1426a4:	e7f000f0 	.word	0xe7f000f0
  1426a8:	e28dd00c 	add	sp, sp, #12
  1426ac:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  1426b0:	e3500007 	cmp	r0, #7
  1426b4:	01a0e002 	moveq	lr, r2
  1426b8:	0affffc2 	beq	1425c8 <__init_tls+0x54>
  1426bc:	e1500009 	cmp	r0, r9
  1426c0:	1affffc0 	bne	1425c8 <__init_tls+0x54>
  1426c4:	e5920014 	ldr	r0, [r2, #20]
  1426c8:	e1500007 	cmp	r0, r7
  1426cc:	9affffbd 	bls	1425c8 <__init_tls+0x54>
  1426d0:	e3500502 	cmp	r0, #8388608	; 0x800000
  1426d4:	31a07000 	movcc	r7, r0
  1426d8:	23a07502 	movcs	r7, #8388608	; 0x800000
  1426dc:	e3a04001 	mov	r4, #1
  1426e0:	eaffffb8 	b	1425c8 <__init_tls+0x54>
  1426e4:	e3a000c0 	mov	r0, #192	; 0xc0
  1426e8:	ebffe4cf 	bl	13ba2c <get_rtt_syscall>
  1426ec:	e2505000 	subs	r5, r0, #0
  1426f0:	0a00000e 	beq	142730 <__init_tls+0x1bc>
  1426f4:	e3e03000 	mvn	r3, #0
  1426f8:	e3a00000 	mov	r0, #0
  1426fc:	e58d3000 	str	r3, [sp]
  142700:	e1a01004 	mov	r1, r4
  142704:	e58d0004 	str	r0, [sp, #4]
  142708:	e3a03022 	mov	r3, #34	; 0x22
  14270c:	e3a02003 	mov	r2, #3
  142710:	e12fff35 	blx	r5
  142714:	eaffffde 	b	142694 <__init_tls+0x120>
  142718:	e59f2024 	ldr	r2, [pc, #36]	; 142744 <__init_tls+0x1d0>
  14271c:	e59fc024 	ldr	ip, [pc, #36]	; 142748 <__init_tls+0x1d4>
  142720:	e592100c 	ldr	r1, [r2, #12]
  142724:	e5923004 	ldr	r3, [r2, #4]
  142728:	e5920010 	ldr	r0, [r2, #16]
  14272c:	eaffffc1 	b	142638 <__init_tls+0xc4>
  142730:	e1a00005 	mov	r0, r5
  142734:	eaffffd6 	b	142694 <__init_tls+0x120>
  142738:	0014d3dc 	.word	0x0014d3dc
  14273c:	6474e551 	.word	0x6474e551
  142740:	00000000 	.word	0x00000000
  142744:	0014ecc0 	.word	0x0014ecc0
  142748:	00575604 	.word	0x00575604
  14274c:	0014ec04 	.word	0x0014ec04

00142750 <__init_ssp>:
  142750:	e2501000 	subs	r1, r0, #0
  142754:	e92d4010 	push	{r4, lr}
  142758:	1a000009 	bne	142784 <__init_ssp+0x34>
  14275c:	e59f3034 	ldr	r3, [pc, #52]	; 142798 <__init_ssp+0x48>
  142760:	e59f2034 	ldr	r2, [pc, #52]	; 14279c <__init_ssp+0x4c>
  142764:	e0010293 	mul	r1, r3, r2
  142768:	e5831000 	str	r1, [r3]
  14276c:	e5933000 	ldr	r3, [r3]
  142770:	e59f2028 	ldr	r2, [pc, #40]	; 1427a0 <__init_ssp+0x50>
  142774:	e5920000 	ldr	r0, [r2]
  142778:	e12fff30 	blx	r0
  14277c:	e5003064 	str	r3, [r0, #-100]	; 0xffffff9c
  142780:	e8bd8010 	pop	{r4, pc}
  142784:	e3a02004 	mov	r2, #4
  142788:	e59f0008 	ldr	r0, [pc, #8]	; 142798 <__init_ssp+0x48>
  14278c:	ebfff71e 	bl	14040c <memcpy>
  142790:	e59f3000 	ldr	r3, [pc]	; 142798 <__init_ssp+0x48>
  142794:	eafffff4 	b	14276c <__init_ssp+0x1c>
  142798:	00575650 	.word	0x00575650
  14279c:	41c64e6d 	.word	0x41c64e6d
  1427a0:	0014d3d4 	.word	0x0014d3d4

001427a4 <__stack_chk_fail>:
  1427a4:	e7f000f0 	.word	0xe7f000f0
  1427a8:	e12fff1e 	bx	lr

001427ac <_Exit>:
  1427ac:	e92d4010 	push	{r4, lr}
  1427b0:	e1a04000 	mov	r4, r0
  1427b4:	e3a000f8 	mov	r0, #248	; 0xf8
  1427b8:	ebffe49b 	bl	13ba2c <get_rtt_syscall>
  1427bc:	e2503000 	subs	r3, r0, #0
  1427c0:	0a000001 	beq	1427cc <_Exit+0x20>
  1427c4:	e1a00004 	mov	r0, r4
  1427c8:	e12fff33 	blx	r3
  1427cc:	e3a00001 	mov	r0, #1
  1427d0:	ebffe495 	bl	13ba2c <get_rtt_syscall>
  1427d4:	e2503000 	subs	r3, r0, #0
  1427d8:	0afffffb 	beq	1427cc <_Exit+0x20>
  1427dc:	eafffff8 	b	1427c4 <_Exit+0x18>

001427e0 <abort>:
  1427e0:	e3a04000 	mov	r4, #0
  1427e4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  1427e8:	e3a00006 	mov	r0, #6
  1427ec:	e24dd024 	sub	sp, sp, #36	; 0x24
  1427f0:	ebffec24 	bl	13d888 <raise>
  1427f4:	e1a00004 	mov	r0, r4
  1427f8:	eb0000b0 	bl	142ac0 <__block_all_sigs>
  1427fc:	e59f00b0 	ldr	r0, [pc, #176]	; 1428b4 <abort+0xd4>
  142800:	ebfffa6e 	bl	1411c0 <__lock>
  142804:	e3a000ae 	mov	r0, #174	; 0xae
  142808:	e58d400c 	str	r4, [sp, #12]
  14280c:	e58d4010 	str	r4, [sp, #16]
  142810:	e58d4014 	str	r4, [sp, #20]
  142814:	e58d4018 	str	r4, [sp, #24]
  142818:	e58d401c 	str	r4, [sp, #28]
  14281c:	ebffe482 	bl	13ba2c <get_rtt_syscall>
  142820:	e2505000 	subs	r5, r0, #0
  142824:	0a000004 	beq	14283c <abort+0x5c>
  142828:	e1a02004 	mov	r2, r4
  14282c:	e28d100c 	add	r1, sp, #12
  142830:	e3a03008 	mov	r3, #8
  142834:	e3a00006 	mov	r0, #6
  142838:	e12fff35 	blx	r5
  14283c:	e59f3074 	ldr	r3, [pc, #116]	; 1428b8 <abort+0xd8>
  142840:	e5930000 	ldr	r0, [r3]
  142844:	e12fff30 	blx	r0
  142848:	e510405c 	ldr	r4, [r0, #-92]	; 0xffffffa4
  14284c:	e3a000ee 	mov	r0, #238	; 0xee
  142850:	ebffe475 	bl	13ba2c <get_rtt_syscall>
  142854:	e2503000 	subs	r3, r0, #0
  142858:	0a000002 	beq	142868 <abort+0x88>
  14285c:	e1a00004 	mov	r0, r4
  142860:	e3a01006 	mov	r1, #6
  142864:	e12fff33 	blx	r3
  142868:	e3a03020 	mov	r3, #32
  14286c:	e3a05000 	mov	r5, #0
  142870:	e08d4003 	add	r4, sp, r3
  142874:	e3a000af 	mov	r0, #175	; 0xaf
  142878:	e58d5008 	str	r5, [sp, #8]
  14287c:	e524301c 	str	r3, [r4, #-28]!	; 0xffffffe4
  142880:	ebffe469 	bl	13ba2c <get_rtt_syscall>
  142884:	e2506000 	subs	r6, r0, #0
  142888:	0a000004 	beq	1428a0 <abort+0xc0>
  14288c:	e1a02005 	mov	r2, r5
  142890:	e1a01004 	mov	r1, r4
  142894:	e3a03008 	mov	r3, #8
  142898:	e3a00001 	mov	r0, #1
  14289c:	e12fff36 	blx	r6
  1428a0:	e7f000f0 	.word	0xe7f000f0
  1428a4:	e3a00009 	mov	r0, #9
  1428a8:	ebffebf6 	bl	13d888 <raise>
  1428ac:	e3a0007f 	mov	r0, #127	; 0x7f
  1428b0:	ebffffbd 	bl	1427ac <_Exit>
  1428b4:	00575654 	.word	0x00575654
  1428b8:	0014d3d4 	.word	0x0014d3d4

001428bc <__expand_heap>:
  1428bc:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  1428c0:	e59f2178 	ldr	r2, [pc, #376]	; 142a40 <__expand_heap+0x184>
  1428c4:	e5903000 	ldr	r3, [r0]
  1428c8:	e24dd01c 	sub	sp, sp, #28
  1428cc:	e1530002 	cmp	r3, r2
  1428d0:	8a000051 	bhi	142a1c <__expand_heap+0x160>
  1428d4:	e59f7168 	ldr	r7, [pc, #360]	; 142a44 <__expand_heap+0x188>
  1428d8:	e59f8168 	ldr	r8, [pc, #360]	; 142a48 <__expand_heap+0x18c>
  1428dc:	e5975000 	ldr	r5, [r7]
  1428e0:	e2634000 	rsb	r4, r3, #0
  1428e4:	e3550000 	cmp	r5, #0
  1428e8:	e0044008 	and	r4, r4, r8
  1428ec:	e0844003 	add	r4, r4, r3
  1428f0:	e1a06000 	mov	r6, r0
  1428f4:	11e03005 	mvnne	r3, r5
  1428f8:	0a00003b 	beq	1429ec <__expand_heap+0x130>
  1428fc:	e1540003 	cmp	r4, r3
  142900:	2a00001d 	bcs	14297c <__expand_heap+0xc0>
  142904:	e59f3140 	ldr	r3, [pc, #320]	; 142a4c <__expand_heap+0x190>
  142908:	e0848005 	add	r8, r4, r5
  14290c:	e5933010 	ldr	r3, [r3, #16]
  142910:	e3530502 	cmp	r3, #8388608	; 0x800000
  142914:	21a02003 	movcs	r2, r3
  142918:	33a02502 	movcc	r2, #8388608	; 0x800000
  14291c:	e2422502 	sub	r2, r2, #8388608	; 0x800000
  142920:	e1580002 	cmp	r8, r2
  142924:	81530005 	cmphi	r3, r5
  142928:	8a000013 	bhi	14297c <__expand_heap+0xc0>
  14292c:	e28d3014 	add	r3, sp, #20
  142930:	e3530502 	cmp	r3, #8388608	; 0x800000
  142934:	21a02003 	movcs	r2, r3
  142938:	33a02502 	movcc	r2, #8388608	; 0x800000
  14293c:	e2422502 	sub	r2, r2, #8388608	; 0x800000
  142940:	e1580002 	cmp	r8, r2
  142944:	81530005 	cmphi	r3, r5
  142948:	8a00000b 	bhi	14297c <__expand_heap+0xc0>
  14294c:	e3a0002d 	mov	r0, #45	; 0x2d
  142950:	ebffe435 	bl	13ba2c <get_rtt_syscall>
  142954:	e2503000 	subs	r3, r0, #0
  142958:	0a000036 	beq	142a38 <__expand_heap+0x17c>
  14295c:	e1a00008 	mov	r0, r8
  142960:	e12fff33 	blx	r3
  142964:	e5972000 	ldr	r2, [r7]
  142968:	e0823004 	add	r3, r2, r4
  14296c:	e1530000 	cmp	r3, r0
  142970:	05864000 	streq	r4, [r6]
  142974:	05870000 	streq	r0, [r7]
  142978:	0a000018 	beq	1429e0 <__expand_heap+0x124>
  14297c:	e3a01a01 	mov	r1, #4096	; 0x1000
  142980:	e59f50c8 	ldr	r5, [pc, #200]	; 142a50 <__expand_heap+0x194>
  142984:	e3a08000 	mov	r8, #0
  142988:	e5953000 	ldr	r3, [r5]
  14298c:	e3a09000 	mov	r9, #0
  142990:	e1a030a3 	lsr	r3, r3, #1
  142994:	e1a01311 	lsl	r1, r1, r3
  142998:	e1510004 	cmp	r1, r4
  14299c:	21a04001 	movcs	r4, r1
  1429a0:	e3e03000 	mvn	r3, #0
  1429a4:	e3a02003 	mov	r2, #3
  1429a8:	e58d3000 	str	r3, [sp]
  1429ac:	e58d8008 	str	r8, [sp, #8]
  1429b0:	e58d900c 	str	r9, [sp, #12]
  1429b4:	e3a03022 	mov	r3, #34	; 0x22
  1429b8:	e1a01004 	mov	r1, r4
  1429bc:	e3a00000 	mov	r0, #0
  1429c0:	ebffea5c 	bl	13d338 <__mmap>
  1429c4:	e3700001 	cmn	r0, #1
  1429c8:	e1a02000 	mov	r2, r0
  1429cc:	03a02000 	moveq	r2, #0
  1429d0:	15953000 	ldrne	r3, [r5]
  1429d4:	15864000 	strne	r4, [r6]
  1429d8:	12833001 	addne	r3, r3, #1
  1429dc:	15853000 	strne	r3, [r5]
  1429e0:	e1a00002 	mov	r0, r2
  1429e4:	e28dd01c 	add	sp, sp, #28
  1429e8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  1429ec:	e3a0002d 	mov	r0, #45	; 0x2d
  1429f0:	ebffe40d 	bl	13ba2c <get_rtt_syscall>
  1429f4:	e2503000 	subs	r3, r0, #0
  1429f8:	0a00000c 	beq	142a30 <__expand_heap+0x174>
  1429fc:	e1a00005 	mov	r0, r5
  142a00:	e12fff33 	blx	r3
  142a04:	e2605000 	rsb	r5, r0, #0
  142a08:	e0055008 	and	r5, r5, r8
  142a0c:	e0855000 	add	r5, r5, r0
  142a10:	e1e03005 	mvn	r3, r5
  142a14:	e5875000 	str	r5, [r7]
  142a18:	eaffffb7 	b	1428fc <__expand_heap+0x40>
  142a1c:	ebffd6cc 	bl	138554 <__errno_location>
  142a20:	e3a0300c 	mov	r3, #12
  142a24:	e3a02000 	mov	r2, #0
  142a28:	e5803000 	str	r3, [r0]
  142a2c:	eaffffeb 	b	1429e0 <__expand_heap+0x124>
  142a30:	e3e03000 	mvn	r3, #0
  142a34:	eafffff6 	b	142a14 <__expand_heap+0x158>
  142a38:	e1a00003 	mov	r0, r3
  142a3c:	eaffffc8 	b	142964 <__expand_heap+0xa8>
  142a40:	7fffefff 	.word	0x7fffefff
  142a44:	0014ecd8 	.word	0x0014ecd8
  142a48:	00000fff 	.word	0x00000fff
  142a4c:	00575604 	.word	0x00575604
  142a50:	0014ecdc 	.word	0x0014ecdc

00142a54 <frexpl>:
  142a54:	ea000417 	b	143ab8 <frexp>

00142a58 <__mprotect>:
  142a58:	e2811eff 	add	r1, r1, #4080	; 0xff0
  142a5c:	e92d4070 	push	{r4, r5, r6, lr}
  142a60:	e281100f 	add	r1, r1, #15
  142a64:	e59f5040 	ldr	r5, [pc, #64]	; 142aac <__mprotect+0x54>
  142a68:	e0801001 	add	r1, r0, r1
  142a6c:	e0011005 	and	r1, r1, r5
  142a70:	e0055000 	and	r5, r5, r0
  142a74:	e3a0007d 	mov	r0, #125	; 0x7d
  142a78:	e1a06002 	mov	r6, r2
  142a7c:	e0414005 	sub	r4, r1, r5
  142a80:	ebffe3e9 	bl	13ba2c <get_rtt_syscall>
  142a84:	e2503000 	subs	r3, r0, #0
  142a88:	0a000005 	beq	142aa4 <__mprotect+0x4c>
  142a8c:	e1a02006 	mov	r2, r6
  142a90:	e1a01004 	mov	r1, r4
  142a94:	e1a00005 	mov	r0, r5
  142a98:	e12fff33 	blx	r3
  142a9c:	e8bd4070 	pop	{r4, r5, r6, lr}
  142aa0:	eaffe416 	b	13bb00 <__syscall_ret>
  142aa4:	e1a00003 	mov	r0, r3
  142aa8:	eafffffb 	b	142a9c <__mprotect+0x44>
  142aac:	fffff000 	.word	0xfffff000

00142ab0 <wctomb>:
  142ab0:	e3500000 	cmp	r0, #0
  142ab4:	012fff1e 	bxeq	lr
  142ab8:	e3a02000 	mov	r2, #0
  142abc:	ea00042a 	b	143b6c <wcrtomb>

00142ac0 <__block_all_sigs>:
  142ac0:	e92d4010 	push	{r4, lr}
  142ac4:	e1a04000 	mov	r4, r0
  142ac8:	e3a000af 	mov	r0, #175	; 0xaf
  142acc:	ebffe3d6 	bl	13ba2c <get_rtt_syscall>
  142ad0:	e250e000 	subs	lr, r0, #0
  142ad4:	08bd8010 	popeq	{r4, pc}
  142ad8:	e1a02004 	mov	r2, r4
  142adc:	e1a0c00e 	mov	ip, lr
  142ae0:	e8bd4010 	pop	{r4, lr}
  142ae4:	e3a03008 	mov	r3, #8
  142ae8:	e59f1004 	ldr	r1, [pc, #4]	; 142af4 <__block_all_sigs+0x34>
  142aec:	e3a00000 	mov	r0, #0
  142af0:	e12fff1c 	bx	ip
  142af4:	0014c498 	.word	0x0014c498

00142af8 <__block_app_sigs>:
  142af8:	e92d4010 	push	{r4, lr}
  142afc:	e1a04000 	mov	r4, r0
  142b00:	e3a000af 	mov	r0, #175	; 0xaf
  142b04:	ebffe3c8 	bl	13ba2c <get_rtt_syscall>
  142b08:	e250e000 	subs	lr, r0, #0
  142b0c:	08bd8010 	popeq	{r4, pc}
  142b10:	e1a02004 	mov	r2, r4
  142b14:	e1a0c00e 	mov	ip, lr
  142b18:	e8bd4010 	pop	{r4, lr}
  142b1c:	e3a03008 	mov	r3, #8
  142b20:	e59f1004 	ldr	r1, [pc, #4]	; 142b2c <__block_app_sigs+0x34>
  142b24:	e3a00000 	mov	r0, #0
  142b28:	e12fff1c 	bx	ip
  142b2c:	0014c4a0 	.word	0x0014c4a0

00142b30 <__restore_sigs>:
  142b30:	e92d4010 	push	{r4, lr}
  142b34:	e1a04000 	mov	r4, r0
  142b38:	e3a000af 	mov	r0, #175	; 0xaf
  142b3c:	ebffe3ba 	bl	13ba2c <get_rtt_syscall>
  142b40:	e250e000 	subs	lr, r0, #0
  142b44:	08bd8010 	popeq	{r4, pc}
  142b48:	e1a01004 	mov	r1, r4
  142b4c:	e1a0c00e 	mov	ip, lr
  142b50:	e8bd4010 	pop	{r4, lr}
  142b54:	e3a03008 	mov	r3, #8
  142b58:	e3a02000 	mov	r2, #0
  142b5c:	e3a00002 	mov	r0, #2
  142b60:	e12fff1c 	bx	ip

00142b64 <__lockfile>:
  142b64:	e59f2124 	ldr	r2, [pc, #292]	; 142c90 <__lockfile+0x12c>
  142b68:	e590304c 	ldr	r3, [r0, #76]	; 0x4c
  142b6c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  142b70:	e1a06000 	mov	r6, r0
  142b74:	e5920000 	ldr	r0, [r2]
  142b78:	e12fff30 	blx	r0
  142b7c:	e510805c 	ldr	r8, [r0, #-92]	; 0xffffffa4
  142b80:	e3c33101 	bic	r3, r3, #1073741824	; 0x40000000
  142b84:	e1530008 	cmp	r3, r8
  142b88:	0a00003e 	beq	142c88 <__lockfile+0x124>
  142b8c:	e59f7100 	ldr	r7, [pc, #256]	; 142c94 <__lockfile+0x130>
  142b90:	e286504c 	add	r5, r6, #76	; 0x4c
  142b94:	ea000002 	b	142ba4 <__lockfile+0x40>
  142b98:	e596304c 	ldr	r3, [r6, #76]	; 0x4c
  142b9c:	e3530000 	cmp	r3, #0
  142ba0:	1a000008 	bne	142bc8 <__lockfile+0x64>
  142ba4:	e3a00000 	mov	r0, #0
  142ba8:	e1a01008 	mov	r1, r8
  142bac:	e1a02005 	mov	r2, r5
  142bb0:	e5973000 	ldr	r3, [r7]
  142bb4:	e12fff33 	blx	r3
  142bb8:	e3500000 	cmp	r0, #0
  142bbc:	1afffff5 	bne	142b98 <__lockfile+0x34>
  142bc0:	e3a00001 	mov	r0, #1
  142bc4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  142bc8:	e3888101 	orr	r8, r8, #1073741824	; 0x40000000
  142bcc:	ea000002 	b	142bdc <__lockfile+0x78>
  142bd0:	e596404c 	ldr	r4, [r6, #76]	; 0x4c
  142bd4:	e3540000 	cmp	r4, #0
  142bd8:	1a000007 	bne	142bfc <__lockfile+0x98>
  142bdc:	e3a00000 	mov	r0, #0
  142be0:	e1a01008 	mov	r1, r8
  142be4:	e1a02005 	mov	r2, r5
  142be8:	e5973000 	ldr	r3, [r7]
  142bec:	e12fff33 	blx	r3
  142bf0:	e3500000 	cmp	r0, #0
  142bf4:	1afffff5 	bne	142bd0 <__lockfile+0x6c>
  142bf8:	eafffff0 	b	142bc0 <__lockfile+0x5c>
  142bfc:	e3140101 	tst	r4, #1073741824	; 0x40000000
  142c00:	e3849101 	orr	r9, r4, #1073741824	; 0x40000000
  142c04:	0a000017 	beq	142c68 <__lockfile+0x104>
  142c08:	e3a000f0 	mov	r0, #240	; 0xf0
  142c0c:	ebffe386 	bl	13ba2c <get_rtt_syscall>
  142c10:	e2504000 	subs	r4, r0, #0
  142c14:	0afffff0 	beq	142bdc <__lockfile+0x78>
  142c18:	e3a03000 	mov	r3, #0
  142c1c:	e1a02009 	mov	r2, r9
  142c20:	e3a01080 	mov	r1, #128	; 0x80
  142c24:	e1a00005 	mov	r0, r5
  142c28:	e12fff34 	blx	r4
  142c2c:	e3700026 	cmn	r0, #38	; 0x26
  142c30:	1affffe9 	bne	142bdc <__lockfile+0x78>
  142c34:	e3a000f0 	mov	r0, #240	; 0xf0
  142c38:	ebffe37b 	bl	13ba2c <get_rtt_syscall>
  142c3c:	e2504000 	subs	r4, r0, #0
  142c40:	0affffe5 	beq	142bdc <__lockfile+0x78>
  142c44:	e3a03000 	mov	r3, #0
  142c48:	e1a02009 	mov	r2, r9
  142c4c:	e1a01003 	mov	r1, r3
  142c50:	e1a00005 	mov	r0, r5
  142c54:	e12fff34 	blx	r4
  142c58:	eaffffdf 	b	142bdc <__lockfile+0x78>
  142c5c:	e596304c 	ldr	r3, [r6, #76]	; 0x4c
  142c60:	e1530004 	cmp	r3, r4
  142c64:	1affffdc 	bne	142bdc <__lockfile+0x78>
  142c68:	e1a00004 	mov	r0, r4
  142c6c:	e1a01009 	mov	r1, r9
  142c70:	e1a02005 	mov	r2, r5
  142c74:	e5973000 	ldr	r3, [r7]
  142c78:	e12fff33 	blx	r3
  142c7c:	e3500000 	cmp	r0, #0
  142c80:	1afffff5 	bne	142c5c <__lockfile+0xf8>
  142c84:	eaffffdf 	b	142c08 <__lockfile+0xa4>
  142c88:	e3a00000 	mov	r0, #0
  142c8c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  142c90:	0014d3d4 	.word	0x0014d3d4
  142c94:	0014d3d0 	.word	0x0014d3d0

00142c98 <__unlockfile>:
  142c98:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  142c9c:	e1a05000 	mov	r5, r0
  142ca0:	e59f7084 	ldr	r7, [pc, #132]	; 142d2c <__unlockfile+0x94>
  142ca4:	e280604c 	add	r6, r0, #76	; 0x4c
  142ca8:	e595404c 	ldr	r4, [r5, #76]	; 0x4c
  142cac:	ea000002 	b	142cbc <__unlockfile+0x24>
  142cb0:	e595304c 	ldr	r3, [r5, #76]	; 0x4c
  142cb4:	e1540003 	cmp	r4, r3
  142cb8:	1afffffa 	bne	142ca8 <__unlockfile+0x10>
  142cbc:	e1a00004 	mov	r0, r4
  142cc0:	e3a01000 	mov	r1, #0
  142cc4:	e1a02006 	mov	r2, r6
  142cc8:	e5973000 	ldr	r3, [r7]
  142ccc:	e12fff33 	blx	r3
  142cd0:	e1500001 	cmp	r0, r1
  142cd4:	1afffff5 	bne	142cb0 <__unlockfile+0x18>
  142cd8:	e3140101 	tst	r4, #1073741824	; 0x40000000
  142cdc:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  142ce0:	e3a000f0 	mov	r0, #240	; 0xf0
  142ce4:	ebffe350 	bl	13ba2c <get_rtt_syscall>
  142ce8:	e2503000 	subs	r3, r0, #0
  142cec:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  142cf0:	e3a02001 	mov	r2, #1
  142cf4:	e3a01081 	mov	r1, #129	; 0x81
  142cf8:	e1a00006 	mov	r0, r6
  142cfc:	e12fff33 	blx	r3
  142d00:	e3700026 	cmn	r0, #38	; 0x26
  142d04:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
  142d08:	e3a000f0 	mov	r0, #240	; 0xf0
  142d0c:	ebffe346 	bl	13ba2c <get_rtt_syscall>
  142d10:	e2503000 	subs	r3, r0, #0
  142d14:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  142d18:	e3a02001 	mov	r2, #1
  142d1c:	e1a00006 	mov	r0, r6
  142d20:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
  142d24:	e1a01002 	mov	r1, r2
  142d28:	e12fff13 	bx	r3
  142d2c:	0014d3d0 	.word	0x0014d3d0

00142d30 <__overflow>:
  142d30:	e92d4010 	push	{r4, lr}
  142d34:	e5903010 	ldr	r3, [r0, #16]
  142d38:	e24dd008 	sub	sp, sp, #8
  142d3c:	e3530000 	cmp	r3, #0
  142d40:	e1a04000 	mov	r4, r0
  142d44:	e5cd1007 	strb	r1, [sp, #7]
  142d48:	0a000015 	beq	142da4 <__overflow+0x74>
  142d4c:	e5942014 	ldr	r2, [r4, #20]
  142d50:	e1520003 	cmp	r2, r3
  142d54:	1a000009 	bne	142d80 <__overflow+0x50>
  142d58:	e5943024 	ldr	r3, [r4, #36]	; 0x24
  142d5c:	e1a00004 	mov	r0, r4
  142d60:	e3a02001 	mov	r2, #1
  142d64:	e28d1007 	add	r1, sp, #7
  142d68:	e12fff33 	blx	r3
  142d6c:	e3500001 	cmp	r0, #1
  142d70:	1a00000f 	bne	142db4 <__overflow+0x84>
  142d74:	e5dd0007 	ldrb	r0, [sp, #7]
  142d78:	e28dd008 	add	sp, sp, #8
  142d7c:	e8bd8010 	pop	{r4, pc}
  142d80:	e5dd0007 	ldrb	r0, [sp, #7]
  142d84:	e5943050 	ldr	r3, [r4, #80]	; 0x50
  142d88:	e1500003 	cmp	r0, r3
  142d8c:	0afffff1 	beq	142d58 <__overflow+0x28>
  142d90:	e2823001 	add	r3, r2, #1
  142d94:	e5843014 	str	r3, [r4, #20]
  142d98:	e5c20000 	strb	r0, [r2]
  142d9c:	e28dd008 	add	sp, sp, #8
  142da0:	e8bd8010 	pop	{r4, pc}
  142da4:	eb00008c 	bl	142fdc <__towrite>
  142da8:	e3500000 	cmp	r0, #0
  142dac:	05943010 	ldreq	r3, [r4, #16]
  142db0:	0affffe5 	beq	142d4c <__overflow+0x1c>
  142db4:	e3e00000 	mvn	r0, #0
  142db8:	eaffffee 	b	142d78 <__overflow+0x48>

00142dbc <dummy>:
  142dbc:	e12fff1e 	bx	lr

00142dc0 <__stdio_close>:
  142dc0:	e92d4010 	push	{r4, lr}
  142dc4:	e590003c 	ldr	r0, [r0, #60]	; 0x3c
  142dc8:	ebfffd87 	bl	1423ec <__aio_close>
  142dcc:	e1a04000 	mov	r4, r0
  142dd0:	e3a00006 	mov	r0, #6
  142dd4:	ebffe314 	bl	13ba2c <get_rtt_syscall>
  142dd8:	e2503000 	subs	r3, r0, #0
  142ddc:	0a000003 	beq	142df0 <__stdio_close+0x30>
  142de0:	e1a00004 	mov	r0, r4
  142de4:	e12fff33 	blx	r3
  142de8:	e8bd4010 	pop	{r4, lr}
  142dec:	eaffe343 	b	13bb00 <__syscall_ret>
  142df0:	e1a00003 	mov	r0, r3
  142df4:	eafffffb 	b	142de8 <__stdio_close+0x28>

00142df8 <__stdio_seek>:
  142df8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  142dfc:	e590503c 	ldr	r5, [r0, #60]	; 0x3c
  142e00:	e24dd014 	sub	sp, sp, #20
  142e04:	e3a0008c 	mov	r0, #140	; 0x8c
  142e08:	e1a07002 	mov	r7, r2
  142e0c:	e1a06003 	mov	r6, r3
  142e10:	ebffe305 	bl	13ba2c <get_rtt_syscall>
  142e14:	e2504000 	subs	r4, r0, #0
  142e18:	0a00000e 	beq	142e58 <__stdio_seek+0x60>
  142e1c:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
  142e20:	e1a02007 	mov	r2, r7
  142e24:	e58d3000 	str	r3, [sp]
  142e28:	e1a01006 	mov	r1, r6
  142e2c:	e28d3008 	add	r3, sp, #8
  142e30:	e1a00005 	mov	r0, r5
  142e34:	e12fff34 	blx	r4
  142e38:	ebffe330 	bl	13bb00 <__syscall_ret>
  142e3c:	e3500000 	cmp	r0, #0
  142e40:	b3e00000 	mvnlt	r0, #0
  142e44:	b3e01000 	mvnlt	r1, #0
  142e48:	a28d1008 	addge	r1, sp, #8
  142e4c:	a8910003 	ldmge	r1, {r0, r1}
  142e50:	e28dd014 	add	sp, sp, #20
  142e54:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  142e58:	e1a00004 	mov	r0, r4
  142e5c:	eafffff5 	b	142e38 <__stdio_seek+0x40>

00142e60 <__stdio_write>:
  142e60:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  142e64:	e590301c 	ldr	r3, [r0, #28]
  142e68:	e5905014 	ldr	r5, [r0, #20]
  142e6c:	e24dd014 	sub	sp, sp, #20
  142e70:	e0455003 	sub	r5, r5, r3
  142e74:	e88d0028 	stm	sp, {r3, r5}
  142e78:	e1a06000 	mov	r6, r0
  142e7c:	e1a08002 	mov	r8, r2
  142e80:	e3a07002 	mov	r7, #2
  142e84:	e58d200c 	str	r2, [sp, #12]
  142e88:	e58d1008 	str	r1, [sp, #8]
  142e8c:	e0855002 	add	r5, r5, r2
  142e90:	e1a0400d 	mov	r4, sp
  142e94:	ea00000d 	b	142ed0 <__stdio_write+0x70>
  142e98:	e3500000 	cmp	r0, #0
  142e9c:	ba000020 	blt	142f24 <__stdio_write+0xc4>
  142ea0:	e5943004 	ldr	r3, [r4, #4]
  142ea4:	e0455000 	sub	r5, r5, r0
  142ea8:	e1500003 	cmp	r0, r3
  142eac:	80400003 	subhi	r0, r0, r3
  142eb0:	8594300c 	ldrhi	r3, [r4, #12]
  142eb4:	82844008 	addhi	r4, r4, #8
  142eb8:	e5942000 	ldr	r2, [r4]
  142ebc:	e0433000 	sub	r3, r3, r0
  142ec0:	e0820000 	add	r0, r2, r0
  142ec4:	82477001 	subhi	r7, r7, #1
  142ec8:	e5843004 	str	r3, [r4, #4]
  142ecc:	e5840000 	str	r0, [r4]
  142ed0:	e3a00092 	mov	r0, #146	; 0x92
  142ed4:	e596903c 	ldr	r9, [r6, #60]	; 0x3c
  142ed8:	ebffe2d3 	bl	13ba2c <get_rtt_syscall>
  142edc:	e2503000 	subs	r3, r0, #0
  142ee0:	0a00001c 	beq	142f58 <__stdio_write+0xf8>
  142ee4:	e1a00009 	mov	r0, r9
  142ee8:	e1a02007 	mov	r2, r7
  142eec:	e1a01004 	mov	r1, r4
  142ef0:	e12fff33 	blx	r3
  142ef4:	ebffe301 	bl	13bb00 <__syscall_ret>
  142ef8:	e1500005 	cmp	r0, r5
  142efc:	1affffe5 	bne	142e98 <__stdio_write+0x38>
  142f00:	e1a00008 	mov	r0, r8
  142f04:	e596202c 	ldr	r2, [r6, #44]	; 0x2c
  142f08:	e5963030 	ldr	r3, [r6, #48]	; 0x30
  142f0c:	e586201c 	str	r2, [r6, #28]
  142f10:	e0823003 	add	r3, r2, r3
  142f14:	e5862014 	str	r2, [r6, #20]
  142f18:	e5863010 	str	r3, [r6, #16]
  142f1c:	e28dd014 	add	sp, sp, #20
  142f20:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  142f24:	e3a00000 	mov	r0, #0
  142f28:	e5963000 	ldr	r3, [r6]
  142f2c:	e3570002 	cmp	r7, #2
  142f30:	e3833020 	orr	r3, r3, #32
  142f34:	e5863000 	str	r3, [r6]
  142f38:	e5860010 	str	r0, [r6, #16]
  142f3c:	e586001c 	str	r0, [r6, #28]
  142f40:	e5860014 	str	r0, [r6, #20]
  142f44:	0afffff4 	beq	142f1c <__stdio_write+0xbc>
  142f48:	e5940004 	ldr	r0, [r4, #4]
  142f4c:	e0480000 	sub	r0, r8, r0
  142f50:	e28dd014 	add	sp, sp, #20
  142f54:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  142f58:	e1a00003 	mov	r0, r3
  142f5c:	eaffffe4 	b	142ef4 <__stdio_write+0x94>

00142f60 <__stdout_write>:
  142f60:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  142f64:	e1a04000 	mov	r4, r0
  142f68:	e5900000 	ldr	r0, [r0]
  142f6c:	e59f3060 	ldr	r3, [pc, #96]	; 142fd4 <__stdout_write+0x74>
  142f70:	e3100040 	tst	r0, #64	; 0x40
  142f74:	e24dd00c 	sub	sp, sp, #12
  142f78:	e1a05001 	mov	r5, r1
  142f7c:	e1a06002 	mov	r6, r2
  142f80:	e5843024 	str	r3, [r4, #36]	; 0x24
  142f84:	0a000005 	beq	142fa0 <__stdout_write+0x40>
  142f88:	e1a02006 	mov	r2, r6
  142f8c:	e1a01005 	mov	r1, r5
  142f90:	e1a00004 	mov	r0, r4
  142f94:	ebffffb1 	bl	142e60 <__stdio_write>
  142f98:	e28dd00c 	add	sp, sp, #12
  142f9c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  142fa0:	e3a00036 	mov	r0, #54	; 0x36
  142fa4:	e594703c 	ldr	r7, [r4, #60]	; 0x3c
  142fa8:	ebffe29f 	bl	13ba2c <get_rtt_syscall>
  142fac:	e2503000 	subs	r3, r0, #0
  142fb0:	0afffff4 	beq	142f88 <__stdout_write+0x28>
  142fb4:	e1a0200d 	mov	r2, sp
  142fb8:	e1a00007 	mov	r0, r7
  142fbc:	e59f1014 	ldr	r1, [pc, #20]	; 142fd8 <__stdout_write+0x78>
  142fc0:	e12fff33 	blx	r3
  142fc4:	e3500000 	cmp	r0, #0
  142fc8:	13e03000 	mvnne	r3, #0
  142fcc:	15843050 	strne	r3, [r4, #80]	; 0x50
  142fd0:	eaffffec 	b	142f88 <__stdout_write+0x28>
  142fd4:	00142e60 	.word	0x00142e60
  142fd8:	00005413 	.word	0x00005413

00142fdc <__towrite>:
  142fdc:	e1a03000 	mov	r3, r0
  142fe0:	e5901048 	ldr	r1, [r0, #72]	; 0x48
  142fe4:	e5900000 	ldr	r0, [r0]
  142fe8:	e2412001 	sub	r2, r1, #1
  142fec:	e1822001 	orr	r2, r2, r1
  142ff0:	e2101008 	ands	r1, r0, #8
  142ff4:	e5832048 	str	r2, [r3, #72]	; 0x48
  142ff8:	1a000009 	bne	143024 <__towrite+0x48>
  142ffc:	e593c02c 	ldr	ip, [r3, #44]	; 0x2c
  143000:	e5932030 	ldr	r2, [r3, #48]	; 0x30
  143004:	e1a00001 	mov	r0, r1
  143008:	e08c2002 	add	r2, ip, r2
  14300c:	e5831008 	str	r1, [r3, #8]
  143010:	e5831004 	str	r1, [r3, #4]
  143014:	e583c01c 	str	ip, [r3, #28]
  143018:	e583c014 	str	ip, [r3, #20]
  14301c:	e5832010 	str	r2, [r3, #16]
  143020:	e12fff1e 	bx	lr
  143024:	e3800020 	orr	r0, r0, #32
  143028:	e5830000 	str	r0, [r3]
  14302c:	e3e00000 	mvn	r0, #0
  143030:	e12fff1e 	bx	lr

00143034 <__towrite_needs_stdio_exit>:
  143034:	ea000336 	b	143d14 <__stdio_exit>

00143038 <locking_putc>:
  143038:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  14303c:	e1a05001 	mov	r5, r1
  143040:	e1a04000 	mov	r4, r0
  143044:	e59f7110 	ldr	r7, [pc, #272]	; 14315c <locking_putc+0x124>
  143048:	e281604c 	add	r6, r1, #76	; 0x4c
  14304c:	ea000002 	b	14305c <locking_putc+0x24>
  143050:	e595304c 	ldr	r3, [r5, #76]	; 0x4c
  143054:	e3530000 	cmp	r3, #0
  143058:	1a000021 	bne	1430e4 <locking_putc+0xac>
  14305c:	e3a00000 	mov	r0, #0
  143060:	e3e01103 	mvn	r1, #-1073741824	; 0xc0000000
  143064:	e1a02006 	mov	r2, r6
  143068:	e5973000 	ldr	r3, [r7]
  14306c:	e12fff33 	blx	r3
  143070:	e3500000 	cmp	r0, #0
  143074:	1afffff5 	bne	143050 <locking_putc+0x18>
  143078:	e5953050 	ldr	r3, [r5, #80]	; 0x50
  14307c:	e20480ff 	and	r8, r4, #255	; 0xff
  143080:	e1530008 	cmp	r3, r8
  143084:	0a00001c 	beq	1430fc <locking_putc+0xc4>
  143088:	e5953014 	ldr	r3, [r5, #20]
  14308c:	e5952010 	ldr	r2, [r5, #16]
  143090:	e1530002 	cmp	r3, r2
  143094:	0a000018 	beq	1430fc <locking_putc+0xc4>
  143098:	e2832001 	add	r2, r3, #1
  14309c:	e5852014 	str	r2, [r5, #20]
  1430a0:	e5c34000 	strb	r4, [r3]
  1430a4:	e595404c 	ldr	r4, [r5, #76]	; 0x4c
  1430a8:	ea000002 	b	1430b8 <locking_putc+0x80>
  1430ac:	e595304c 	ldr	r3, [r5, #76]	; 0x4c
  1430b0:	e1540003 	cmp	r4, r3
  1430b4:	1afffffa 	bne	1430a4 <locking_putc+0x6c>
  1430b8:	e1a00004 	mov	r0, r4
  1430bc:	e3a01000 	mov	r1, #0
  1430c0:	e1a02006 	mov	r2, r6
  1430c4:	e5973000 	ldr	r3, [r7]
  1430c8:	e12fff33 	blx	r3
  1430cc:	e1500001 	cmp	r0, r1
  1430d0:	1afffff5 	bne	1430ac <locking_putc+0x74>
  1430d4:	e3140101 	tst	r4, #1073741824	; 0x40000000
  1430d8:	1a00000c 	bne	143110 <locking_putc+0xd8>
  1430dc:	e1a00008 	mov	r0, r8
  1430e0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  1430e4:	e1a00005 	mov	r0, r5
  1430e8:	ebfffe9d 	bl	142b64 <__lockfile>
  1430ec:	e5953050 	ldr	r3, [r5, #80]	; 0x50
  1430f0:	e20480ff 	and	r8, r4, #255	; 0xff
  1430f4:	e1530008 	cmp	r3, r8
  1430f8:	1affffe2 	bne	143088 <locking_putc+0x50>
  1430fc:	e1a01008 	mov	r1, r8
  143100:	e1a00005 	mov	r0, r5
  143104:	ebffff09 	bl	142d30 <__overflow>
  143108:	e1a08000 	mov	r8, r0
  14310c:	eaffffe4 	b	1430a4 <locking_putc+0x6c>
  143110:	e3a000f0 	mov	r0, #240	; 0xf0
  143114:	ebffe244 	bl	13ba2c <get_rtt_syscall>
  143118:	e2503000 	subs	r3, r0, #0
  14311c:	0affffee 	beq	1430dc <locking_putc+0xa4>
  143120:	e3a02001 	mov	r2, #1
  143124:	e3a01081 	mov	r1, #129	; 0x81
  143128:	e1a00006 	mov	r0, r6
  14312c:	e12fff33 	blx	r3
  143130:	e3700026 	cmn	r0, #38	; 0x26
  143134:	1affffe8 	bne	1430dc <locking_putc+0xa4>
  143138:	e3a000f0 	mov	r0, #240	; 0xf0
  14313c:	ebffe23a 	bl	13ba2c <get_rtt_syscall>
  143140:	e2503000 	subs	r3, r0, #0
  143144:	0affffe4 	beq	1430dc <locking_putc+0xa4>
  143148:	e3a02001 	mov	r2, #1
  14314c:	e1a00006 	mov	r0, r6
  143150:	e1a01002 	mov	r1, r2
  143154:	e12fff33 	blx	r3
  143158:	eaffffdf 	b	1430dc <locking_putc+0xa4>
  14315c:	0014d3d0 	.word	0x0014d3d0

00143160 <fputc>:
  143160:	e591204c 	ldr	r2, [r1, #76]	; 0x4c
  143164:	e1a03001 	mov	r3, r1
  143168:	e3520000 	cmp	r2, #0
  14316c:	e1a0c000 	mov	ip, r0
  143170:	ba00001d 	blt	1431ec <fputc+0x8c>
  143174:	0a000017 	beq	1431d8 <fputc+0x78>
  143178:	e59f10a8 	ldr	r1, [pc, #168]	; 143228 <fputc+0xc8>
  14317c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  143180:	e5910000 	ldr	r0, [r1]
  143184:	e12fff30 	blx	r0
  143188:	e510105c 	ldr	r1, [r0, #-92]	; 0xffffffa4
  14318c:	e3c22101 	bic	r2, r2, #1073741824	; 0x40000000
  143190:	e1520001 	cmp	r2, r1
  143194:	0a000003 	beq	1431a8 <fputc+0x48>
  143198:	e1a01003 	mov	r1, r3
  14319c:	e1a0000c 	mov	r0, ip
  1431a0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  1431a4:	eaffffa3 	b	143038 <locking_putc>
  1431a8:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  1431ac:	e20c00ff 	and	r0, ip, #255	; 0xff
  1431b0:	e1500002 	cmp	r0, r2
  1431b4:	0a000008 	beq	1431dc <fputc+0x7c>
  1431b8:	e5932014 	ldr	r2, [r3, #20]
  1431bc:	e5931010 	ldr	r1, [r3, #16]
  1431c0:	e1520001 	cmp	r2, r1
  1431c4:	0a000004 	beq	1431dc <fputc+0x7c>
  1431c8:	e2821001 	add	r1, r2, #1
  1431cc:	e5831014 	str	r1, [r3, #20]
  1431d0:	e5c2c000 	strb	ip, [r2]
  1431d4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
  1431d8:	eaffff96 	b	143038 <locking_putc>
  1431dc:	e1a01000 	mov	r1, r0
  1431e0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  1431e4:	e1a00003 	mov	r0, r3
  1431e8:	eafffed0 	b	142d30 <__overflow>
  1431ec:	e5912050 	ldr	r2, [r1, #80]	; 0x50
  1431f0:	e20000ff 	and	r0, r0, #255	; 0xff
  1431f4:	e1500002 	cmp	r0, r2
  1431f8:	0a000007 	beq	14321c <fputc+0xbc>
  1431fc:	e5912014 	ldr	r2, [r1, #20]
  143200:	e5911010 	ldr	r1, [r1, #16]
  143204:	e1520001 	cmp	r2, r1
  143208:	0a000003 	beq	14321c <fputc+0xbc>
  14320c:	e2821001 	add	r1, r2, #1
  143210:	e5831014 	str	r1, [r3, #20]
  143214:	e5c2c000 	strb	ip, [r2]
  143218:	e12fff1e 	bx	lr
  14321c:	e1a01000 	mov	r1, r0
  143220:	e1a00003 	mov	r0, r3
  143224:	eafffec1 	b	142d30 <__overflow>
  143228:	0014d3d4 	.word	0x0014d3d4

0014322c <fputs>:
  14322c:	e92d4070 	push	{r4, r5, r6, lr}
  143230:	e1a06001 	mov	r6, r1
  143234:	e1a05000 	mov	r5, r0
  143238:	ebfff63c 	bl	140b30 <strlen>
  14323c:	e1a03006 	mov	r3, r6
  143240:	e1a04000 	mov	r4, r0
  143244:	e1a02000 	mov	r2, r0
  143248:	e3a01001 	mov	r1, #1
  14324c:	e1a00005 	mov	r0, r5
  143250:	eb000041 	bl	14335c <fwrite>
  143254:	e0500004 	subs	r0, r0, r4
  143258:	13e00000 	mvnne	r0, #0
  14325c:	e8bd8070 	pop	{r4, r5, r6, pc}

00143260 <__fwritex>:
  143260:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  143264:	e5924010 	ldr	r4, [r2, #16]
  143268:	e1a05002 	mov	r5, r2
  14326c:	e3540000 	cmp	r4, #0
  143270:	e1a06000 	mov	r6, r0
  143274:	e1a07001 	mov	r7, r1
  143278:	0a000009 	beq	1432a4 <__fwritex+0x44>
  14327c:	e5950014 	ldr	r0, [r5, #20]
  143280:	e0444000 	sub	r4, r4, r0
  143284:	e1540007 	cmp	r4, r7
  143288:	2a00000b 	bcs	1432bc <__fwritex+0x5c>
  14328c:	e1a02007 	mov	r2, r7
  143290:	e1a01006 	mov	r1, r6
  143294:	e5953024 	ldr	r3, [r5, #36]	; 0x24
  143298:	e1a00005 	mov	r0, r5
  14329c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
  1432a0:	e12fff13 	bx	r3
  1432a4:	e1a00002 	mov	r0, r2
  1432a8:	ebffff4b 	bl	142fdc <__towrite>
  1432ac:	e3500000 	cmp	r0, #0
  1432b0:	1a000027 	bne	143354 <__fwritex+0xf4>
  1432b4:	e5954010 	ldr	r4, [r5, #16]
  1432b8:	eaffffef 	b	14327c <__fwritex+0x1c>
  1432bc:	e5953050 	ldr	r3, [r5, #80]	; 0x50
  1432c0:	e3530000 	cmp	r3, #0
  1432c4:	ba00000d 	blt	143300 <__fwritex+0xa0>
  1432c8:	e3570000 	cmp	r7, #0
  1432cc:	0a00000b 	beq	143300 <__fwritex+0xa0>
  1432d0:	e2473001 	sub	r3, r7, #1
  1432d4:	e7d62003 	ldrb	r2, [r6, r3]
  1432d8:	e0863003 	add	r3, r6, r3
  1432dc:	e352000a 	cmp	r2, #10
  1432e0:	1a000003 	bne	1432f4 <__fwritex+0x94>
  1432e4:	ea00000e 	b	143324 <__fwritex+0xc4>
  1432e8:	e5732001 	ldrb	r2, [r3, #-1]!
  1432ec:	e352000a 	cmp	r2, #10
  1432f0:	0a00000c 	beq	143328 <__fwritex+0xc8>
  1432f4:	e1530006 	cmp	r3, r6
  1432f8:	e0434006 	sub	r4, r3, r6
  1432fc:	1afffff9 	bne	1432e8 <__fwritex+0x88>
  143300:	e1a04007 	mov	r4, r7
  143304:	e1a02004 	mov	r2, r4
  143308:	e1a01006 	mov	r1, r6
  14330c:	ebfff43e 	bl	14040c <memcpy>
  143310:	e5953014 	ldr	r3, [r5, #20]
  143314:	e1a00007 	mov	r0, r7
  143318:	e0834004 	add	r4, r3, r4
  14331c:	e5854014 	str	r4, [r5, #20]
  143320:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  143324:	e1a04007 	mov	r4, r7
  143328:	e5953024 	ldr	r3, [r5, #36]	; 0x24
  14332c:	e1a02004 	mov	r2, r4
  143330:	e1a01006 	mov	r1, r6
  143334:	e1a00005 	mov	r0, r5
  143338:	e12fff33 	blx	r3
  14333c:	e1500004 	cmp	r0, r4
  143340:	38bd81f0 	popcc	{r4, r5, r6, r7, r8, pc}
  143344:	e0866004 	add	r6, r6, r4
  143348:	e5950014 	ldr	r0, [r5, #20]
  14334c:	e0474004 	sub	r4, r7, r4
  143350:	eaffffeb 	b	143304 <__fwritex+0xa4>
  143354:	e1a00004 	mov	r0, r4
  143358:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0014335c <fwrite>:
  14335c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  143360:	e1a05003 	mov	r5, r3
  143364:	e593304c 	ldr	r3, [r3, #76]	; 0x4c
  143368:	e3510000 	cmp	r1, #0
  14336c:	e1a04002 	mov	r4, r2
  143370:	11a04002 	movne	r4, r2
  143374:	03a04000 	moveq	r4, #0
  143378:	e3530000 	cmp	r3, #0
  14337c:	e1a06001 	mov	r6, r1
  143380:	e0070192 	mul	r7, r2, r1
  143384:	aa000009 	bge	1433b0 <fwrite+0x54>
  143388:	e1a02005 	mov	r2, r5
  14338c:	e1a01007 	mov	r1, r7
  143390:	ebffffb2 	bl	143260 <__fwritex>
  143394:	e1a08000 	mov	r8, r0
  143398:	e1570008 	cmp	r7, r8
  14339c:	0a000012 	beq	1433ec <fwrite+0x90>
  1433a0:	e1a01006 	mov	r1, r6
  1433a4:	e1a00008 	mov	r0, r8
  1433a8:	ebffd2d0 	bl	137ef0 <__udivsi3>
  1433ac:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  1433b0:	e1a08000 	mov	r8, r0
  1433b4:	e1a00005 	mov	r0, r5
  1433b8:	ebfffde9 	bl	142b64 <__lockfile>
  1433bc:	e1a02005 	mov	r2, r5
  1433c0:	e1a09000 	mov	r9, r0
  1433c4:	e1a01007 	mov	r1, r7
  1433c8:	e1a00008 	mov	r0, r8
  1433cc:	ebffffa3 	bl	143260 <__fwritex>
  1433d0:	e3590000 	cmp	r9, #0
  1433d4:	e1a08000 	mov	r8, r0
  1433d8:	0affffee 	beq	143398 <fwrite+0x3c>
  1433dc:	e1a00005 	mov	r0, r5
  1433e0:	ebfffe2c 	bl	142c98 <__unlockfile>
  1433e4:	e1570008 	cmp	r7, r8
  1433e8:	1affffec 	bne	1433a0 <fwrite+0x44>
  1433ec:	e1a00004 	mov	r0, r4
  1433f0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

001433f4 <memchr>:
  1433f4:	e3100003 	tst	r0, #3
  1433f8:	e20110ff 	and	r1, r1, #255	; 0xff
  1433fc:	0a000010 	beq	143444 <memchr+0x50>
  143400:	e3520000 	cmp	r2, #0
  143404:	0a000031 	beq	1434d0 <memchr+0xdc>
  143408:	e5d03000 	ldrb	r3, [r0]
  14340c:	e1530001 	cmp	r3, r1
  143410:	0a00003e 	beq	143510 <memchr+0x11c>
  143414:	e2803001 	add	r3, r0, #1
  143418:	ea000005 	b	143434 <memchr+0x40>
  14341c:	e3520000 	cmp	r2, #0
  143420:	0a00002a 	beq	1434d0 <memchr+0xdc>
  143424:	e5d3c000 	ldrb	ip, [r3]
  143428:	e2833001 	add	r3, r3, #1
  14342c:	e15c0001 	cmp	ip, r1
  143430:	0a000036 	beq	143510 <memchr+0x11c>
  143434:	e3130003 	tst	r3, #3
  143438:	e2422001 	sub	r2, r2, #1
  14343c:	e1a00003 	mov	r0, r3
  143440:	1afffff5 	bne	14341c <memchr+0x28>
  143444:	e3520000 	cmp	r2, #0
  143448:	0a000020 	beq	1434d0 <memchr+0xdc>
  14344c:	e5d03000 	ldrb	r3, [r0]
  143450:	e1530001 	cmp	r3, r1
  143454:	0a00002d 	beq	143510 <memchr+0x11c>
  143458:	e92d4070 	push	{r4, r5, r6, lr}
  14345c:	e3520003 	cmp	r2, #3
  143460:	e0814401 	add	r4, r1, r1, lsl #8
  143464:	e0844804 	add	r4, r4, r4, lsl #16
  143468:	9a00001d 	bls	1434e4 <memchr+0xf0>
  14346c:	e5903000 	ldr	r3, [r0]
  143470:	e59f60cc 	ldr	r6, [pc, #204]	; 143544 <memchr+0x150>
  143474:	e0233004 	eor	r3, r3, r4
  143478:	e083c006 	add	ip, r3, r6
  14347c:	e59f50c4 	ldr	r5, [pc, #196]	; 143548 <memchr+0x154>
  143480:	e1cc3003 	bic	r3, ip, r3
  143484:	e1130005 	tst	r3, r5
  143488:	1a000015 	bne	1434e4 <memchr+0xf0>
  14348c:	e280e004 	add	lr, r0, #4
  143490:	ea000006 	b	1434b0 <memchr+0xbc>
  143494:	e59e3000 	ldr	r3, [lr]
  143498:	e28ee004 	add	lr, lr, #4
  14349c:	e0233004 	eor	r3, r3, r4
  1434a0:	e083c006 	add	ip, r3, r6
  1434a4:	e1cc3003 	bic	r3, ip, r3
  1434a8:	e1130005 	tst	r3, r5
  1434ac:	1a000009 	bne	1434d8 <memchr+0xe4>
  1434b0:	e2422004 	sub	r2, r2, #4
  1434b4:	e3520003 	cmp	r2, #3
  1434b8:	e1a0000e 	mov	r0, lr
  1434bc:	8afffff4 	bhi	143494 <memchr+0xa0>
  1434c0:	e3520000 	cmp	r2, #0
  1434c4:	1a000003 	bne	1434d8 <memchr+0xe4>
  1434c8:	e3a00000 	mov	r0, #0
  1434cc:	e8bd8070 	pop	{r4, r5, r6, pc}
  1434d0:	e3a00000 	mov	r0, #0
  1434d4:	e12fff1e 	bx	lr
  1434d8:	e5d03000 	ldrb	r3, [r0]
  1434dc:	e1510003 	cmp	r1, r3
  1434e0:	08bd8070 	popeq	{r4, r5, r6, pc}
  1434e4:	e0802002 	add	r2, r0, r2
  1434e8:	e2803001 	add	r3, r0, #1
  1434ec:	ea000003 	b	143500 <memchr+0x10c>
  1434f0:	e5d3c000 	ldrb	ip, [r3]
  1434f4:	e2833001 	add	r3, r3, #1
  1434f8:	e15c0001 	cmp	ip, r1
  1434fc:	08bd8070 	popeq	{r4, r5, r6, pc}
  143500:	e1520003 	cmp	r2, r3
  143504:	e1a00003 	mov	r0, r3
  143508:	1afffff8 	bne	1434f0 <memchr+0xfc>
  14350c:	eaffffed 	b	1434c8 <memchr+0xd4>
  143510:	e5d03000 	ldrb	r3, [r0]
  143514:	e1510003 	cmp	r1, r3
  143518:	012fff1e 	bxeq	lr
  14351c:	e0802002 	add	r2, r0, r2
  143520:	e2803001 	add	r3, r0, #1
  143524:	e1520003 	cmp	r2, r3
  143528:	e1a00003 	mov	r0, r3
  14352c:	0affffe7 	beq	1434d0 <memchr+0xdc>
  143530:	e5d3c000 	ldrb	ip, [r3]
  143534:	e2833001 	add	r3, r3, #1
  143538:	e15c0001 	cmp	ip, r1
  14353c:	1afffff8 	bne	143524 <memchr+0x130>
  143540:	e12fff1e 	bx	lr
  143544:	fefefeff 	.word	0xfefefeff
  143548:	80808080 	.word	0x80808080

0014354c <__stpcpy>:
  14354c:	e0203001 	eor	r3, r0, r1
  143550:	e3130003 	tst	r3, #3
  143554:	e92d4010 	push	{r4, lr}
  143558:	1a00001f 	bne	1435dc <__stpcpy+0x90>
  14355c:	e3110003 	tst	r1, #3
  143560:	0a00000e 	beq	1435a0 <__stpcpy+0x54>
  143564:	e5d13000 	ldrb	r3, [r1]
  143568:	e3530000 	cmp	r3, #0
  14356c:	e5c03000 	strb	r3, [r0]
  143570:	08bd8010 	popeq	{r4, pc}
  143574:	e2813001 	add	r3, r1, #1
  143578:	e2802001 	add	r2, r0, #1
  14357c:	ea000003 	b	143590 <__stpcpy+0x44>
  143580:	e4d31001 	ldrb	r1, [r3], #1
  143584:	e3510000 	cmp	r1, #0
  143588:	e4c21001 	strb	r1, [r2], #1
  14358c:	08bd8010 	popeq	{r4, pc}
  143590:	e3130003 	tst	r3, #3
  143594:	e1a01003 	mov	r1, r3
  143598:	e1a00002 	mov	r0, r2
  14359c:	1afffff7 	bne	143580 <__stpcpy+0x34>
  1435a0:	e5913000 	ldr	r3, [r1]
  1435a4:	e59f405c 	ldr	r4, [pc, #92]	; 143608 <__stpcpy+0xbc>
  1435a8:	e59fe05c 	ldr	lr, [pc, #92]	; 14360c <__stpcpy+0xc0>
  1435ac:	e0832004 	add	r2, r3, r4
  1435b0:	e1c22003 	bic	r2, r2, r3
  1435b4:	e112000e 	tst	r2, lr
  1435b8:	1a000007 	bne	1435dc <__stpcpy+0x90>
  1435bc:	e281c004 	add	ip, r1, #4
  1435c0:	e4803004 	str	r3, [r0], #4
  1435c4:	e1a0100c 	mov	r1, ip
  1435c8:	e49c3004 	ldr	r3, [ip], #4
  1435cc:	e0832004 	add	r2, r3, r4
  1435d0:	e1c22003 	bic	r2, r2, r3
  1435d4:	e112000e 	tst	r2, lr
  1435d8:	0afffff8 	beq	1435c0 <__stpcpy+0x74>
  1435dc:	e5d13000 	ldrb	r3, [r1]
  1435e0:	e3530000 	cmp	r3, #0
  1435e4:	e5c03000 	strb	r3, [r0]
  1435e8:	08bd8010 	popeq	{r4, pc}
  1435ec:	e2803001 	add	r3, r0, #1
  1435f0:	e5f12001 	ldrb	r2, [r1, #1]!
  1435f4:	e1a00003 	mov	r0, r3
  1435f8:	e3520000 	cmp	r2, #0
  1435fc:	e4c32001 	strb	r2, [r3], #1
  143600:	1afffffa 	bne	1435f0 <__stpcpy+0xa4>
  143604:	e8bd8010 	pop	{r4, pc}
  143608:	fefefeff 	.word	0xfefefeff
  14360c:	80808080 	.word	0x80808080

00143610 <__stpncpy>:
  143610:	e0203001 	eor	r3, r0, r1
  143614:	e3130003 	tst	r3, #3
  143618:	e92d4070 	push	{r4, r5, r6, lr}
  14361c:	1a000030 	bne	1436e4 <__stpncpy+0xd4>
  143620:	e3110003 	tst	r1, #3
  143624:	0a000044 	beq	14373c <__stpncpy+0x12c>
  143628:	e3520000 	cmp	r2, #0
  14362c:	0a000040 	beq	143734 <__stpncpy+0x124>
  143630:	e5d13000 	ldrb	r3, [r1]
  143634:	e3530000 	cmp	r3, #0
  143638:	e5c03000 	strb	r3, [r0]
  14363c:	0a00003c 	beq	143734 <__stpncpy+0x124>
  143640:	e2813001 	add	r3, r1, #1
  143644:	e2800001 	add	r0, r0, #1
  143648:	ea000005 	b	143664 <__stpncpy+0x54>
  14364c:	e3520000 	cmp	r2, #0
  143650:	0a000032 	beq	143720 <__stpncpy+0x110>
  143654:	e4d31001 	ldrb	r1, [r3], #1
  143658:	e3510000 	cmp	r1, #0
  14365c:	e4c01001 	strb	r1, [r0], #1
  143660:	0a00002e 	beq	143720 <__stpncpy+0x110>
  143664:	e3130003 	tst	r3, #3
  143668:	e2422001 	sub	r2, r2, #1
  14366c:	e1a01003 	mov	r1, r3
  143670:	e1a04000 	mov	r4, r0
  143674:	1afffff4 	bne	14364c <__stpncpy+0x3c>
  143678:	e3520000 	cmp	r2, #0
  14367c:	0a000027 	beq	143720 <__stpncpy+0x110>
  143680:	e5d1c000 	ldrb	ip, [r1]
  143684:	e35c0000 	cmp	ip, #0
  143688:	0a000024 	beq	143720 <__stpncpy+0x110>
  14368c:	e3520003 	cmp	r2, #3
  143690:	9a00002b 	bls	143744 <__stpncpy+0x134>
  143694:	e5913000 	ldr	r3, [r1]
  143698:	e59f60b0 	ldr	r6, [pc, #176]	; 143750 <__stpncpy+0x140>
  14369c:	e59f50b0 	ldr	r5, [pc, #176]	; 143754 <__stpncpy+0x144>
  1436a0:	e0830006 	add	r0, r3, r6
  1436a4:	e1c00003 	bic	r0, r0, r3
  1436a8:	e1100005 	tst	r0, r5
  1436ac:	1a000024 	bne	143744 <__stpncpy+0x134>
  1436b0:	e281e004 	add	lr, r1, #4
  1436b4:	ea000004 	b	1436cc <__stpncpy+0xbc>
  1436b8:	e49e3004 	ldr	r3, [lr], #4
  1436bc:	e083c006 	add	ip, r3, r6
  1436c0:	e1ccc003 	bic	ip, ip, r3
  1436c4:	e11c0005 	tst	ip, r5
  1436c8:	1a000007 	bne	1436ec <__stpncpy+0xdc>
  1436cc:	e2422004 	sub	r2, r2, #4
  1436d0:	e4843004 	str	r3, [r4], #4
  1436d4:	e3520003 	cmp	r2, #3
  1436d8:	e1a00004 	mov	r0, r4
  1436dc:	e1a0100e 	mov	r1, lr
  1436e0:	8afffff4 	bhi	1436b8 <__stpncpy+0xa8>
  1436e4:	e3520000 	cmp	r2, #0
  1436e8:	0a000011 	beq	143734 <__stpncpy+0x124>
  1436ec:	e5d13000 	ldrb	r3, [r1]
  1436f0:	e3530000 	cmp	r3, #0
  1436f4:	e5c03000 	strb	r3, [r0]
  1436f8:	0a00000d 	beq	143734 <__stpncpy+0x124>
  1436fc:	e2800001 	add	r0, r0, #1
  143700:	ea000003 	b	143714 <__stpncpy+0x104>
  143704:	e5f13001 	ldrb	r3, [r1, #1]!
  143708:	e3530000 	cmp	r3, #0
  14370c:	e4c03001 	strb	r3, [r0], #1
  143710:	0a000002 	beq	143720 <__stpncpy+0x110>
  143714:	e2522001 	subs	r2, r2, #1
  143718:	e1a04000 	mov	r4, r0
  14371c:	1afffff8 	bne	143704 <__stpncpy+0xf4>
  143720:	e3a01000 	mov	r1, #0
  143724:	e1a00004 	mov	r0, r4
  143728:	ebfff46f 	bl	1408ec <memset>
  14372c:	e1a00004 	mov	r0, r4
  143730:	e8bd8070 	pop	{r4, r5, r6, pc}
  143734:	e1a04000 	mov	r4, r0
  143738:	eafffff8 	b	143720 <__stpncpy+0x110>
  14373c:	e1a04000 	mov	r4, r0
  143740:	eaffffcc 	b	143678 <__stpncpy+0x68>
  143744:	e5c4c000 	strb	ip, [r4]
  143748:	e1a00004 	mov	r0, r4
  14374c:	eaffffea 	b	1436fc <__stpncpy+0xec>
  143750:	fefefeff 	.word	0xfefefeff
  143754:	80808080 	.word	0x80808080

00143758 <strchr>:
  143758:	e92d4010 	push	{r4, lr}
  14375c:	e1a04001 	mov	r4, r1
  143760:	eb000004 	bl	143778 <__strchrnul>
  143764:	e5d03000 	ldrb	r3, [r0]
  143768:	e20440ff 	and	r4, r4, #255	; 0xff
  14376c:	e1540003 	cmp	r4, r3
  143770:	13a00000 	movne	r0, #0
  143774:	e8bd8010 	pop	{r4, pc}

00143778 <__strchrnul>:
  143778:	e20110ff 	and	r1, r1, #255	; 0xff
  14377c:	e3510000 	cmp	r1, #0
  143780:	e92d4070 	push	{r4, r5, r6, lr}
  143784:	e1a04000 	mov	r4, r0
  143788:	0a000031 	beq	143854 <__strchrnul+0xdc>
  14378c:	e3100003 	tst	r0, #3
  143790:	0a00000e 	beq	1437d0 <__strchrnul+0x58>
  143794:	e5d02000 	ldrb	r2, [r0]
  143798:	e3520000 	cmp	r2, #0
  14379c:	0a00002f 	beq	143860 <__strchrnul+0xe8>
  1437a0:	e1510002 	cmp	r1, r2
  1437a4:	0a00002d 	beq	143860 <__strchrnul+0xe8>
  1437a8:	e2803001 	add	r3, r0, #1
  1437ac:	ea000004 	b	1437c4 <__strchrnul+0x4c>
  1437b0:	e4d32001 	ldrb	r2, [r3], #1
  1437b4:	e3520000 	cmp	r2, #0
  1437b8:	08bd8070 	popeq	{r4, r5, r6, pc}
  1437bc:	e1520001 	cmp	r2, r1
  1437c0:	08bd8070 	popeq	{r4, r5, r6, pc}
  1437c4:	e3130003 	tst	r3, #3
  1437c8:	e1a00003 	mov	r0, r3
  1437cc:	1afffff7 	bne	1437b0 <__strchrnul+0x38>
  1437d0:	e590c000 	ldr	ip, [r0]
  1437d4:	e0815401 	add	r5, r1, r1, lsl #8
  1437d8:	e59f4088 	ldr	r4, [pc, #136]	; 143868 <__strchrnul+0xf0>
  1437dc:	e0855805 	add	r5, r5, r5, lsl #16
  1437e0:	e025e00c 	eor	lr, r5, ip
  1437e4:	e08e2004 	add	r2, lr, r4
  1437e8:	e08c3004 	add	r3, ip, r4
  1437ec:	e1c2200e 	bic	r2, r2, lr
  1437f0:	e1c3300c 	bic	r3, r3, ip
  1437f4:	e59f6070 	ldr	r6, [pc, #112]	; 14386c <__strchrnul+0xf4>
  1437f8:	e1833002 	orr	r3, r3, r2
  1437fc:	e1130006 	tst	r3, r6
  143800:	1a000008 	bne	143828 <__strchrnul+0xb0>
  143804:	e5b0c004 	ldr	ip, [r0, #4]!
  143808:	e02ce005 	eor	lr, ip, r5
  14380c:	e08e2004 	add	r2, lr, r4
  143810:	e08c3004 	add	r3, ip, r4
  143814:	e1c2200e 	bic	r2, r2, lr
  143818:	e1c3300c 	bic	r3, r3, ip
  14381c:	e1833002 	orr	r3, r3, r2
  143820:	e1130006 	tst	r3, r6
  143824:	0afffff6 	beq	143804 <__strchrnul+0x8c>
  143828:	e5d03000 	ldrb	r3, [r0]
  14382c:	e3530000 	cmp	r3, #0
  143830:	08bd8070 	popeq	{r4, r5, r6, pc}
  143834:	e1510003 	cmp	r1, r3
  143838:	08bd8070 	popeq	{r4, r5, r6, pc}
  14383c:	e5f03001 	ldrb	r3, [r0, #1]!
  143840:	e3530000 	cmp	r3, #0
  143844:	08bd8070 	popeq	{r4, r5, r6, pc}
  143848:	e1530001 	cmp	r3, r1
  14384c:	1afffffa 	bne	14383c <__strchrnul+0xc4>
  143850:	e8bd8070 	pop	{r4, r5, r6, pc}
  143854:	ebfff4b5 	bl	140b30 <strlen>
  143858:	e0840000 	add	r0, r4, r0
  14385c:	e8bd8070 	pop	{r4, r5, r6, pc}
  143860:	e1a00004 	mov	r0, r4
  143864:	e8bd8070 	pop	{r4, r5, r6, pc}
  143868:	fefefeff 	.word	0xfefefeff
  14386c:	80808080 	.word	0x80808080

00143870 <__set_thread_area>:
  143870:	e59f3108 	ldr	r3, [pc, #264]	; 143980 <__set_thread_area+0x110>
  143874:	e92d4010 	push	{r4, lr}
  143878:	e5933000 	ldr	r3, [r3]
  14387c:	e1a04000 	mov	r4, r0
  143880:	e3130902 	tst	r3, #32768	; 0x8000
  143884:	0a000017 	beq	1438e8 <__set_thread_area+0x78>
  143888:	e59f20f4 	ldr	r2, [pc, #244]	; 143984 <__set_thread_area+0x114>
  14388c:	e59f10f4 	ldr	r1, [pc, #244]	; 143988 <__set_thread_area+0x118>
  143890:	e59f00f4 	ldr	r0, [pc, #244]	; 14398c <__set_thread_area+0x11c>
  143894:	e59fc0f4 	ldr	ip, [pc, #244]	; 143990 <__set_thread_area+0x120>
  143898:	e59f30f4 	ldr	r3, [pc, #244]	; 143994 <__set_thread_area+0x124>
  14389c:	e5922010 	ldr	r2, [r2, #16]
  1438a0:	e580c000 	str	ip, [r0]
  1438a4:	e5831000 	str	r1, [r3]
  1438a8:	e5921000 	ldr	r1, [r2]
  1438ac:	e3510000 	cmp	r1, #0
  1438b0:	0a000005 	beq	1438cc <__set_thread_area+0x5c>
  1438b4:	e351000f 	cmp	r1, #15
  1438b8:	1a00001b 	bne	14392c <__set_thread_area+0xbc>
  1438bc:	e5922004 	ldr	r2, [r2, #4]
  1438c0:	e5d21000 	ldrb	r1, [r2]
  1438c4:	e3510076 	cmp	r1, #118	; 0x76
  1438c8:	0a000021 	beq	143954 <__set_thread_area+0xe4>
  1438cc:	e59f00c4 	ldr	r0, [pc, #196]	; 143998 <__set_thread_area+0x128>
  1438d0:	ebffe055 	bl	13ba2c <get_rtt_syscall>
  1438d4:	e2503000 	subs	r3, r0, #0
  1438d8:	08bd8010 	popeq	{r4, pc}
  1438dc:	e1a00004 	mov	r0, r4
  1438e0:	e8bd4010 	pop	{r4, lr}
  1438e4:	e12fff13 	bx	r3
  1438e8:	e3e03a0f 	mvn	r3, #61440	; 0xf000
  1438ec:	e59f10a8 	ldr	r1, [pc, #168]	; 14399c <__set_thread_area+0x12c>
  1438f0:	e5132003 	ldr	r2, [r3, #-3]
  1438f4:	e59f30a4 	ldr	r3, [pc, #164]	; 1439a0 <__set_thread_area+0x130>
  1438f8:	e59f008c 	ldr	r0, [pc, #140]	; 14398c <__set_thread_area+0x11c>
  1438fc:	e5831000 	str	r1, [r3]
  143900:	e59fc09c 	ldr	ip, [pc, #156]	; 1439a4 <__set_thread_area+0x134>
  143904:	e59f3088 	ldr	r3, [pc, #136]	; 143994 <__set_thread_area+0x124>
  143908:	e2411040 	sub	r1, r1, #64	; 0x40
  14390c:	e3520001 	cmp	r2, #1
  143910:	e580c000 	str	ip, [r0]
  143914:	e5831000 	str	r1, [r3]
  143918:	da000009 	ble	143944 <__set_thread_area+0xd4>
  14391c:	e3520002 	cmp	r2, #2
  143920:	059f2080 	ldreq	r2, [pc, #128]	; 1439a8 <__set_thread_area+0x138>
  143924:	05832000 	streq	r2, [r3]
  143928:	eaffffe7 	b	1438cc <__set_thread_area+0x5c>
  14392c:	e5b21008 	ldr	r1, [r2, #8]!
  143930:	e3510000 	cmp	r1, #0
  143934:	0affffe4 	beq	1438cc <__set_thread_area+0x5c>
  143938:	e351000f 	cmp	r1, #15
  14393c:	0affffde 	beq	1438bc <__set_thread_area+0x4c>
  143940:	eafffff9 	b	14392c <__set_thread_area+0xbc>
  143944:	e7f000f0 	.word	0xe7f000f0
  143948:	e59f2058 	ldr	r2, [pc, #88]	; 1439a8 <__set_thread_area+0x138>
  14394c:	e5832000 	str	r2, [r3]
  143950:	eaffffdd 	b	1438cc <__set_thread_area+0x5c>
  143954:	e5d21001 	ldrb	r1, [r2, #1]
  143958:	e3510036 	cmp	r1, #54	; 0x36
  14395c:	1affffda 	bne	1438cc <__set_thread_area+0x5c>
  143960:	e5d22002 	ldrb	r2, [r2, #2]
  143964:	e2422030 	sub	r2, r2, #48	; 0x30
  143968:	e3520009 	cmp	r2, #9
  14396c:	859f1038 	ldrhi	r1, [pc, #56]	; 1439ac <__set_thread_area+0x13c>
  143970:	859f2038 	ldrhi	r2, [pc, #56]	; 1439b0 <__set_thread_area+0x140>
  143974:	85801000 	strhi	r1, [r0]
  143978:	85832000 	strhi	r2, [r3]
  14397c:	eaffffd2 	b	1438cc <__set_thread_area+0x5c>
  143980:	00575600 	.word	0x00575600
  143984:	00575604 	.word	0x00575604
  143988:	00141548 	.word	0x00141548
  14398c:	0014d3d0 	.word	0x0014d3d0
  143990:	00141588 	.word	0x00141588
  143994:	0014d3cc 	.word	0x0014d3cc
  143998:	000f0005 	.word	0x000f0005
  14399c:	ffff0fe0 	.word	0xffff0fe0
  1439a0:	0014d3d4 	.word	0x0014d3d4
  1439a4:	ffff0fc0 	.word	0xffff0fc0
  1439a8:	00141520 	.word	0x00141520
  1439ac:	00141564 	.word	0x00141564
  1439b0:	00141540 	.word	0x00141540

001439b4 <__unmapself>:
  1439b4:	e3a07036 	mov	r7, #54	; 0x36
  1439b8:	ef000000 	svc	0x00000000
  1439bc:	e3a07001 	mov	r7, #1
  1439c0:	ef000000 	svc	0x00000000

001439c4 <__clone>:
  1439c4:	e92d00f0 	push	{r4, r5, r6, r7}
  1439c8:	e3a07082 	mov	r7, #130	; 0x82
  1439cc:	e1a06003 	mov	r6, r3
  1439d0:	e1a05000 	mov	r5, r0
  1439d4:	e1a00002 	mov	r0, r2
  1439d8:	e3c1100f 	bic	r1, r1, #15
  1439dc:	e59d2010 	ldr	r2, [sp, #16]
  1439e0:	e59d3014 	ldr	r3, [sp, #20]
  1439e4:	e59d4018 	ldr	r4, [sp, #24]
  1439e8:	e92d007f 	push	{r0, r1, r2, r3, r4, r5, r6}
  1439ec:	e1a0000d 	mov	r0, sp
  1439f0:	ef000000 	svc	0x00000000
  1439f4:	e1100000 	tst	r0, r0
  1439f8:	0a000002 	beq	143a08 <__clone+0x44>
  1439fc:	e28dd01c 	add	sp, sp, #28
  143a00:	e8bd00f0 	pop	{r4, r5, r6, r7}
  143a04:	e12fff1e 	bx	lr
  143a08:	e1a00006 	mov	r0, r6
  143a0c:	e3150001 	tst	r5, #1
  143a10:	1a000003 	bne	143a24 <__clone+0x60>
  143a14:	e1a0e00f 	mov	lr, pc
  143a18:	e1a0f005 	mov	pc, r5
  143a1c:	e3a07001 	mov	r7, #1
  143a20:	ef000000 	svc	0x00000000
  143a24:	e1a0e00f 	mov	lr, pc
  143a28:	e12fff15 	bx	r5
  143a2c:	eafffffa 	b	143a1c <__clone+0x58>

00143a30 <__clock_gettime>:
  143a30:	e92d4070 	push	{r4, r5, r6, lr}
  143a34:	e1a04000 	mov	r4, r0
  143a38:	e59f0074 	ldr	r0, [pc, #116]	; 143ab4 <__clock_gettime+0x84>
  143a3c:	e1a05001 	mov	r5, r1
  143a40:	ebffdff9 	bl	13ba2c <get_rtt_syscall>
  143a44:	e2503000 	subs	r3, r0, #0
  143a48:	0a000017 	beq	143aac <__clock_gettime+0x7c>
  143a4c:	e1a01005 	mov	r1, r5
  143a50:	e1a00004 	mov	r0, r4
  143a54:	e12fff33 	blx	r3
  143a58:	e3700026 	cmn	r0, #38	; 0x26
  143a5c:	0a000001 	beq	143a68 <__clock_gettime+0x38>
  143a60:	e8bd4070 	pop	{r4, r5, r6, lr}
  143a64:	eaffe025 	b	13bb00 <__syscall_ret>
  143a68:	e3540000 	cmp	r4, #0
  143a6c:	13e00015 	mvnne	r0, #21
  143a70:	1afffffa 	bne	143a60 <__clock_gettime+0x30>
  143a74:	e3a0004e 	mov	r0, #78	; 0x4e
  143a78:	ebffdfeb 	bl	13ba2c <get_rtt_syscall>
  143a7c:	e2503000 	subs	r3, r0, #0
  143a80:	0a000002 	beq	143a90 <__clock_gettime+0x60>
  143a84:	e1a01004 	mov	r1, r4
  143a88:	e1a00005 	mov	r0, r5
  143a8c:	e12fff33 	blx	r3
  143a90:	e5953008 	ldr	r3, [r5, #8]
  143a94:	e3a00000 	mov	r0, #0
  143a98:	e0632283 	rsb	r2, r3, r3, lsl #5
  143a9c:	e0833102 	add	r3, r3, r2, lsl #2
  143aa0:	e1a03183 	lsl	r3, r3, #3
  143aa4:	e5853008 	str	r3, [r5, #8]
  143aa8:	e8bd8070 	pop	{r4, r5, r6, pc}
  143aac:	e1a00003 	mov	r0, r3
  143ab0:	eaffffea 	b	143a60 <__clock_gettime+0x30>
  143ab4:	00000107 	.word	0x00000107

00143ab8 <frexp>:
  143ab8:	e59fc09c 	ldr	ip, [pc, #156]	; 143b5c <frexp+0xa4>
  143abc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  143ac0:	e01c6a21 	ands	r6, ip, r1, lsr #20
  143ac4:	e1a04000 	mov	r4, r0
  143ac8:	e1a05001 	mov	r5, r1
  143acc:	1a000009 	bne	143af8 <frexp+0x40>
  143ad0:	e1a07002 	mov	r7, r2
  143ad4:	e3a03000 	mov	r3, #0
  143ad8:	e3a02000 	mov	r2, #0
  143adc:	eb0002e1 	bl	144668 <__aeabi_dcmpeq>
  143ae0:	e3500000 	cmp	r0, #0
  143ae4:	0a000011 	beq	143b30 <frexp+0x78>
  143ae8:	e5876000 	str	r6, [r7]
  143aec:	e1a00004 	mov	r0, r4
  143af0:	e1a01005 	mov	r1, r5
  143af4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  143af8:	e156000c 	cmp	r6, ip
  143afc:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  143b00:	e3e00000 	mvn	r0, #0
  143b04:	e0007004 	and	r7, r0, r4
  143b08:	e3a04000 	mov	r4, #0
  143b0c:	e59f104c 	ldr	r1, [pc, #76]	; 143b60 <frexp+0xa8>
  143b10:	e2463fff 	sub	r3, r6, #1020	; 0x3fc
  143b14:	e0018005 	and	r8, r1, r5
  143b18:	e59f5044 	ldr	r5, [pc, #68]	; 143b64 <frexp+0xac>
  143b1c:	e2433002 	sub	r3, r3, #2
  143b20:	e5823000 	str	r3, [r2]
  143b24:	e1870004 	orr	r0, r7, r4
  143b28:	e1881005 	orr	r1, r8, r5
  143b2c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  143b30:	e59f3030 	ldr	r3, [pc, #48]	; 143b68 <frexp+0xb0>
  143b34:	e1a00004 	mov	r0, r4
  143b38:	e1a01005 	mov	r1, r5
  143b3c:	e3a02000 	mov	r2, #0
  143b40:	eb00017a 	bl	144130 <__aeabi_dmul>
  143b44:	e1a02007 	mov	r2, r7
  143b48:	ebffffda 	bl	143ab8 <frexp>
  143b4c:	e5973000 	ldr	r3, [r7]
  143b50:	e2433040 	sub	r3, r3, #64	; 0x40
  143b54:	e5873000 	str	r3, [r7]
  143b58:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  143b5c:	000007ff 	.word	0x000007ff
  143b60:	800fffff 	.word	0x800fffff
  143b64:	3fe00000 	.word	0x3fe00000
  143b68:	43f00000 	.word	0x43f00000

00143b6c <wcrtomb>:
  143b6c:	e2502000 	subs	r2, r0, #0
  143b70:	0a000025 	beq	143c0c <wcrtomb+0xa0>
  143b74:	e351007f 	cmp	r1, #127	; 0x7f
  143b78:	9a000022 	bls	143c08 <wcrtomb+0x9c>
  143b7c:	e59f0114 	ldr	r0, [pc, #276]	; 143c98 <wcrtomb+0x12c>
  143b80:	e92d4010 	push	{r4, lr}
  143b84:	e5900000 	ldr	r0, [r0]
  143b88:	e12fff30 	blx	r0
  143b8c:	e5100018 	ldr	r0, [r0, #-24]	; 0xffffffe8
  143b90:	e1a03001 	mov	r3, r1
  143b94:	e5900000 	ldr	r0, [r0]
  143b98:	e1a0c002 	mov	ip, r2
  143b9c:	e3500000 	cmp	r0, #0
  143ba0:	0a000025 	beq	143c3c <wcrtomb+0xd0>
  143ba4:	e3510b02 	cmp	r1, #2048	; 0x800
  143ba8:	3a00001a 	bcc	143c18 <wcrtomb+0xac>
  143bac:	e2412a0e 	sub	r2, r1, #57344	; 0xe000
  143bb0:	e3510b36 	cmp	r1, #55296	; 0xd800
  143bb4:	23520a02 	cmpcs	r2, #8192	; 0x2000
  143bb8:	3a00002a 	bcc	143c68 <wcrtomb+0xfc>
  143bbc:	e2412801 	sub	r2, r1, #65536	; 0x10000
  143bc0:	e3520601 	cmp	r2, #1048576	; 0x100000
  143bc4:	2a000022 	bcs	143c54 <wcrtomb+0xe8>
  143bc8:	e3e0e00f 	mvn	lr, #15
  143bcc:	e3e0207f 	mvn	r2, #127	; 0x7f
  143bd0:	e18ee923 	orr	lr, lr, r3, lsr #18
  143bd4:	e203303f 	and	r3, r3, #63	; 0x3f
  143bd8:	e1823003 	orr	r3, r2, r3
  143bdc:	e5cc3003 	strb	r3, [ip, #3]
  143be0:	e3a03004 	mov	r3, #4
  143be4:	e1a00701 	lsl	r0, r1, #14
  143be8:	e1a01a01 	lsl	r1, r1, #20
  143bec:	e1820d20 	orr	r0, r2, r0, lsr #26
  143bf0:	e1821d21 	orr	r1, r2, r1, lsr #26
  143bf4:	e5cce000 	strb	lr, [ip]
  143bf8:	e5cc0001 	strb	r0, [ip, #1]
  143bfc:	e5cc1002 	strb	r1, [ip, #2]
  143c00:	e1a00003 	mov	r0, r3
  143c04:	e8bd8010 	pop	{r4, pc}
  143c08:	e5c21000 	strb	r1, [r2]
  143c0c:	e3a03001 	mov	r3, #1
  143c10:	e1a00003 	mov	r0, r3
  143c14:	e12fff1e 	bx	lr
  143c18:	e201203f 	and	r2, r1, #63	; 0x3f
  143c1c:	e1e02c82 	mvn	r2, r2, lsl #25
  143c20:	e3e0103f 	mvn	r1, #63	; 0x3f
  143c24:	e1e02ca2 	mvn	r2, r2, lsr #25
  143c28:	e1813323 	orr	r3, r1, r3, lsr #6
  143c2c:	e5cc3000 	strb	r3, [ip]
  143c30:	e5cc2001 	strb	r2, [ip, #1]
  143c34:	e3a03002 	mov	r3, #2
  143c38:	eafffff0 	b	143c00 <wcrtomb+0x94>
  143c3c:	e2413cdf 	sub	r3, r1, #57088	; 0xdf00
  143c40:	e2433080 	sub	r3, r3, #128	; 0x80
  143c44:	e353007f 	cmp	r3, #127	; 0x7f
  143c48:	95c21000 	strbls	r1, [r2]
  143c4c:	93a03001 	movls	r3, #1
  143c50:	9affffea 	bls	143c00 <wcrtomb+0x94>
  143c54:	ebffd23e 	bl	138554 <__errno_location>
  143c58:	e3a02054 	mov	r2, #84	; 0x54
  143c5c:	e3e03000 	mvn	r3, #0
  143c60:	e5802000 	str	r2, [r0]
  143c64:	eaffffe5 	b	143c00 <wcrtomb+0x94>
  143c68:	e3e0207f 	mvn	r2, #127	; 0x7f
  143c6c:	e3e0001f 	mvn	r0, #31
  143c70:	e203e03f 	and	lr, r3, #63	; 0x3f
  143c74:	e1a01a01 	lsl	r1, r1, #20
  143c78:	e1803623 	orr	r3, r0, r3, lsr #12
  143c7c:	e1821d21 	orr	r1, r2, r1, lsr #26
  143c80:	e182200e 	orr	r2, r2, lr
  143c84:	e5cc3000 	strb	r3, [ip]
  143c88:	e5cc1001 	strb	r1, [ip, #1]
  143c8c:	e5cc2002 	strb	r2, [ip, #2]
  143c90:	e3a03003 	mov	r3, #3
  143c94:	eaffffd9 	b	143c00 <wcrtomb+0x94>
  143c98:	0014d3d4 	.word	0x0014d3d4

00143c9c <close_file>:
  143c9c:	e92d4010 	push	{r4, lr}
  143ca0:	e2504000 	subs	r4, r0, #0
  143ca4:	e24dd008 	sub	sp, sp, #8
  143ca8:	0a000015 	beq	143d04 <close_file+0x68>
  143cac:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
  143cb0:	e3530000 	cmp	r3, #0
  143cb4:	aa000014 	bge	143d0c <close_file+0x70>
  143cb8:	e5942014 	ldr	r2, [r4, #20]
  143cbc:	e594301c 	ldr	r3, [r4, #28]
  143cc0:	e1520003 	cmp	r2, r3
  143cc4:	0a000004 	beq	143cdc <close_file+0x40>
  143cc8:	e3a02000 	mov	r2, #0
  143ccc:	e5943024 	ldr	r3, [r4, #36]	; 0x24
  143cd0:	e1a01002 	mov	r1, r2
  143cd4:	e1a00004 	mov	r0, r4
  143cd8:	e12fff33 	blx	r3
  143cdc:	e994000c 	ldmib	r4, {r2, r3}
  143ce0:	e1520003 	cmp	r2, r3
  143ce4:	0a000006 	beq	143d04 <close_file+0x68>
  143ce8:	e3a01001 	mov	r1, #1
  143cec:	e0422003 	sub	r2, r2, r3
  143cf0:	e58d1000 	str	r1, [sp]
  143cf4:	e5941028 	ldr	r1, [r4, #40]	; 0x28
  143cf8:	e1a00004 	mov	r0, r4
  143cfc:	e1a03fc2 	asr	r3, r2, #31
  143d00:	e12fff31 	blx	r1
  143d04:	e28dd008 	add	sp, sp, #8
  143d08:	e8bd8010 	pop	{r4, pc}
  143d0c:	ebfffb94 	bl	142b64 <__lockfile>
  143d10:	eaffffe8 	b	143cb8 <close_file+0x1c>

00143d14 <__stdio_exit>:
  143d14:	e92d4010 	push	{r4, lr}
  143d18:	ebffe771 	bl	13dae4 <__ofl_lock>
  143d1c:	e5904000 	ldr	r4, [r0]
  143d20:	e3540000 	cmp	r4, #0
  143d24:	0a000004 	beq	143d3c <__stdio_exit+0x28>
  143d28:	e1a00004 	mov	r0, r4
  143d2c:	ebffffda 	bl	143c9c <close_file>
  143d30:	e5944038 	ldr	r4, [r4, #56]	; 0x38
  143d34:	e3540000 	cmp	r4, #0
  143d38:	1afffffa 	bne	143d28 <__stdio_exit+0x14>
  143d3c:	e59f3020 	ldr	r3, [pc, #32]	; 143d64 <__stdio_exit+0x50>
  143d40:	e5930000 	ldr	r0, [r3]
  143d44:	ebffffd4 	bl	143c9c <close_file>
  143d48:	e59f3018 	ldr	r3, [pc, #24]	; 143d68 <__stdio_exit+0x54>
  143d4c:	e5930000 	ldr	r0, [r3]
  143d50:	ebffffd1 	bl	143c9c <close_file>
  143d54:	e8bd4010 	pop	{r4, lr}
  143d58:	e59f300c 	ldr	r3, [pc, #12]	; 143d6c <__stdio_exit+0x58>
  143d5c:	e5930000 	ldr	r0, [r3]
  143d60:	eaffffcd 	b	143c9c <close_file>
  143d64:	0014ebe8 	.word	0x0014ebe8
  143d68:	0014d3c8 	.word	0x0014d3c8
  143d6c:	0014d330 	.word	0x0014d330

00143d70 <__aeabi_drsub>:
  143d70:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000
  143d74:	ea000000 	b	143d7c <__adddf3>

00143d78 <__aeabi_dsub>:
  143d78:	e2233102 	eor	r3, r3, #-2147483648	; 0x80000000

00143d7c <__adddf3>:
  143d7c:	e92d4030 	push	{r4, r5, lr}
  143d80:	e1a04081 	lsl	r4, r1, #1
  143d84:	e1a05083 	lsl	r5, r3, #1
  143d88:	e1340005 	teq	r4, r5
  143d8c:	01300002 	teqeq	r0, r2
  143d90:	1194c000 	orrsne	ip, r4, r0
  143d94:	1195c002 	orrsne	ip, r5, r2
  143d98:	11f0cac4 	mvnsne	ip, r4, asr #21
  143d9c:	11f0cac5 	mvnsne	ip, r5, asr #21
  143da0:	0a000079 	beq	143f8c <__adddf3+0x210>
  143da4:	e1a04aa4 	lsr	r4, r4, #21
  143da8:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
  143dac:	b2655000 	rsblt	r5, r5, #0
  143db0:	da000006 	ble	143dd0 <__adddf3+0x54>
  143db4:	e0844005 	add	r4, r4, r5
  143db8:	e0202002 	eor	r2, r0, r2
  143dbc:	e0213003 	eor	r3, r1, r3
  143dc0:	e0220000 	eor	r0, r2, r0
  143dc4:	e0231001 	eor	r1, r3, r1
  143dc8:	e0202002 	eor	r2, r0, r2
  143dcc:	e0213003 	eor	r3, r1, r3
  143dd0:	e3550036 	cmp	r5, #54	; 0x36
  143dd4:	88bd8030 	pophi	{r4, r5, pc}
  143dd8:	e3110102 	tst	r1, #-2147483648	; 0x80000000
  143ddc:	e1a01601 	lsl	r1, r1, #12
  143de0:	e3a0c601 	mov	ip, #1048576	; 0x100000
  143de4:	e18c1621 	orr	r1, ip, r1, lsr #12
  143de8:	0a000001 	beq	143df4 <__adddf3+0x78>
  143dec:	e2700000 	rsbs	r0, r0, #0
  143df0:	e2e11000 	rsc	r1, r1, #0
  143df4:	e3130102 	tst	r3, #-2147483648	; 0x80000000
  143df8:	e1a03603 	lsl	r3, r3, #12
  143dfc:	e18c3623 	orr	r3, ip, r3, lsr #12
  143e00:	0a000001 	beq	143e0c <__adddf3+0x90>
  143e04:	e2722000 	rsbs	r2, r2, #0
  143e08:	e2e33000 	rsc	r3, r3, #0
  143e0c:	e1340005 	teq	r4, r5
  143e10:	0a000057 	beq	143f74 <__adddf3+0x1f8>
  143e14:	e2444001 	sub	r4, r4, #1
  143e18:	e275e020 	rsbs	lr, r5, #32
  143e1c:	ba000005 	blt	143e38 <__adddf3+0xbc>
  143e20:	e1a0ce12 	lsl	ip, r2, lr
  143e24:	e0900532 	adds	r0, r0, r2, lsr r5
  143e28:	e2a11000 	adc	r1, r1, #0
  143e2c:	e0900e13 	adds	r0, r0, r3, lsl lr
  143e30:	e0b11553 	adcs	r1, r1, r3, asr r5
  143e34:	ea000006 	b	143e54 <__adddf3+0xd8>
  143e38:	e2455020 	sub	r5, r5, #32
  143e3c:	e28ee020 	add	lr, lr, #32
  143e40:	e3520001 	cmp	r2, #1
  143e44:	e1a0ce13 	lsl	ip, r3, lr
  143e48:	238cc002 	orrcs	ip, ip, #2
  143e4c:	e0900553 	adds	r0, r0, r3, asr r5
  143e50:	e0b11fc3 	adcs	r1, r1, r3, asr #31
  143e54:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
  143e58:	5a000002 	bpl	143e68 <__adddf3+0xec>
  143e5c:	e27cc000 	rsbs	ip, ip, #0
  143e60:	e2f00000 	rscs	r0, r0, #0
  143e64:	e2e11000 	rsc	r1, r1, #0
  143e68:	e3510601 	cmp	r1, #1048576	; 0x100000
  143e6c:	3a00000e 	bcc	143eac <__adddf3+0x130>
  143e70:	e3510602 	cmp	r1, #2097152	; 0x200000
  143e74:	3a000006 	bcc	143e94 <__adddf3+0x118>
  143e78:	e1b010a1 	lsrs	r1, r1, #1
  143e7c:	e1b00060 	rrxs	r0, r0
  143e80:	e1a0c06c 	rrx	ip, ip
  143e84:	e2844001 	add	r4, r4, #1
  143e88:	e1a02a84 	lsl	r2, r4, #21
  143e8c:	e3720501 	cmn	r2, #4194304	; 0x400000
  143e90:	2a000055 	bcs	143fec <__adddf3+0x270>
  143e94:	e35c0102 	cmp	ip, #-2147483648	; 0x80000000
  143e98:	01b0c0a0 	lsrseq	ip, r0, #1
  143e9c:	e2b00000 	adcs	r0, r0, #0
  143ea0:	e0a11a04 	adc	r1, r1, r4, lsl #20
  143ea4:	e1811005 	orr	r1, r1, r5
  143ea8:	e8bd8030 	pop	{r4, r5, pc}
  143eac:	e1b0c08c 	lsls	ip, ip, #1
  143eb0:	e0b00000 	adcs	r0, r0, r0
  143eb4:	e0a11001 	adc	r1, r1, r1
  143eb8:	e3110601 	tst	r1, #1048576	; 0x100000
  143ebc:	e2444001 	sub	r4, r4, #1
  143ec0:	1afffff3 	bne	143e94 <__adddf3+0x118>
  143ec4:	e3310000 	teq	r1, #0
  143ec8:	01a01000 	moveq	r1, r0
  143ecc:	03a00000 	moveq	r0, #0
  143ed0:	e16f3f11 	clz	r3, r1
  143ed4:	02833020 	addeq	r3, r3, #32
  143ed8:	e243300b 	sub	r3, r3, #11
  143edc:	e2532020 	subs	r2, r3, #32
  143ee0:	aa000007 	bge	143f04 <__adddf3+0x188>
  143ee4:	e292200c 	adds	r2, r2, #12
  143ee8:	da000004 	ble	143f00 <__adddf3+0x184>
  143eec:	e282c014 	add	ip, r2, #20
  143ef0:	e262200c 	rsb	r2, r2, #12
  143ef4:	e1a00c11 	lsl	r0, r1, ip
  143ef8:	e1a01231 	lsr	r1, r1, r2
  143efc:	ea000004 	b	143f14 <__adddf3+0x198>
  143f00:	e2822014 	add	r2, r2, #20
  143f04:	d262c020 	rsble	ip, r2, #32
  143f08:	e1a01211 	lsl	r1, r1, r2
  143f0c:	d1811c30 	orrle	r1, r1, r0, lsr ip
  143f10:	d1a00210 	lslle	r0, r0, r2
  143f14:	e0544003 	subs	r4, r4, r3
  143f18:	a0811a04 	addge	r1, r1, r4, lsl #20
  143f1c:	a1811005 	orrge	r1, r1, r5
  143f20:	a8bd8030 	popge	{r4, r5, pc}
  143f24:	e1e04004 	mvn	r4, r4
  143f28:	e254401f 	subs	r4, r4, #31
  143f2c:	aa00000d 	bge	143f68 <__adddf3+0x1ec>
  143f30:	e294400c 	adds	r4, r4, #12
  143f34:	ca000005 	bgt	143f50 <__adddf3+0x1d4>
  143f38:	e2844014 	add	r4, r4, #20
  143f3c:	e2642020 	rsb	r2, r4, #32
  143f40:	e1a00430 	lsr	r0, r0, r4
  143f44:	e1800211 	orr	r0, r0, r1, lsl r2
  143f48:	e1851431 	orr	r1, r5, r1, lsr r4
  143f4c:	e8bd8030 	pop	{r4, r5, pc}
  143f50:	e264400c 	rsb	r4, r4, #12
  143f54:	e2642020 	rsb	r2, r4, #32
  143f58:	e1a00230 	lsr	r0, r0, r2
  143f5c:	e1800411 	orr	r0, r0, r1, lsl r4
  143f60:	e1a01005 	mov	r1, r5
  143f64:	e8bd8030 	pop	{r4, r5, pc}
  143f68:	e1a00431 	lsr	r0, r1, r4
  143f6c:	e1a01005 	mov	r1, r5
  143f70:	e8bd8030 	pop	{r4, r5, pc}
  143f74:	e3340000 	teq	r4, #0
  143f78:	e2233601 	eor	r3, r3, #1048576	; 0x100000
  143f7c:	02211601 	eoreq	r1, r1, #1048576	; 0x100000
  143f80:	02844001 	addeq	r4, r4, #1
  143f84:	12455001 	subne	r5, r5, #1
  143f88:	eaffffa1 	b	143e14 <__adddf3+0x98>
  143f8c:	e1f0cac4 	mvns	ip, r4, asr #21
  143f90:	11f0cac5 	mvnsne	ip, r5, asr #21
  143f94:	0a000018 	beq	143ffc <__adddf3+0x280>
  143f98:	e1340005 	teq	r4, r5
  143f9c:	01300002 	teqeq	r0, r2
  143fa0:	0a000003 	beq	143fb4 <__adddf3+0x238>
  143fa4:	e194c000 	orrs	ip, r4, r0
  143fa8:	01a01003 	moveq	r1, r3
  143fac:	01a00002 	moveq	r0, r2
  143fb0:	e8bd8030 	pop	{r4, r5, pc}
  143fb4:	e1310003 	teq	r1, r3
  143fb8:	13a01000 	movne	r1, #0
  143fbc:	13a00000 	movne	r0, #0
  143fc0:	18bd8030 	popne	{r4, r5, pc}
  143fc4:	e1b0caa4 	lsrs	ip, r4, #21
  143fc8:	1a000003 	bne	143fdc <__adddf3+0x260>
  143fcc:	e1b00080 	lsls	r0, r0, #1
  143fd0:	e0b11001 	adcs	r1, r1, r1
  143fd4:	23811102 	orrcs	r1, r1, #-2147483648	; 0x80000000
  143fd8:	e8bd8030 	pop	{r4, r5, pc}
  143fdc:	e2944501 	adds	r4, r4, #4194304	; 0x400000
  143fe0:	32811601 	addcc	r1, r1, #1048576	; 0x100000
  143fe4:	38bd8030 	popcc	{r4, r5, pc}
  143fe8:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
  143fec:	e385147f 	orr	r1, r5, #2130706432	; 0x7f000000
  143ff0:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
  143ff4:	e3a00000 	mov	r0, #0
  143ff8:	e8bd8030 	pop	{r4, r5, pc}
  143ffc:	e1f0cac4 	mvns	ip, r4, asr #21
  144000:	11a01003 	movne	r1, r3
  144004:	11a00002 	movne	r0, r2
  144008:	01f0cac5 	mvnseq	ip, r5, asr #21
  14400c:	11a03001 	movne	r3, r1
  144010:	11a02000 	movne	r2, r0
  144014:	e1904601 	orrs	r4, r0, r1, lsl #12
  144018:	01925603 	orrseq	r5, r2, r3, lsl #12
  14401c:	01310003 	teqeq	r1, r3
  144020:	13811702 	orrne	r1, r1, #524288	; 0x80000
  144024:	e8bd8030 	pop	{r4, r5, pc}

00144028 <__aeabi_ui2d>:
  144028:	e3300000 	teq	r0, #0
  14402c:	03a01000 	moveq	r1, #0
  144030:	012fff1e 	bxeq	lr
  144034:	e92d4030 	push	{r4, r5, lr}
  144038:	e3a04b01 	mov	r4, #1024	; 0x400
  14403c:	e2844032 	add	r4, r4, #50	; 0x32
  144040:	e3a05000 	mov	r5, #0
  144044:	e3a01000 	mov	r1, #0
  144048:	eaffff9d 	b	143ec4 <__adddf3+0x148>

0014404c <__aeabi_i2d>:
  14404c:	e3300000 	teq	r0, #0
  144050:	03a01000 	moveq	r1, #0
  144054:	012fff1e 	bxeq	lr
  144058:	e92d4030 	push	{r4, r5, lr}
  14405c:	e3a04b01 	mov	r4, #1024	; 0x400
  144060:	e2844032 	add	r4, r4, #50	; 0x32
  144064:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
  144068:	42600000 	rsbmi	r0, r0, #0
  14406c:	e3a01000 	mov	r1, #0
  144070:	eaffff93 	b	143ec4 <__adddf3+0x148>

00144074 <__aeabi_f2d>:
  144074:	e1b02080 	lsls	r2, r0, #1
  144078:	e1a011c2 	asr	r1, r2, #3
  14407c:	e1a01061 	rrx	r1, r1
  144080:	e1a00e02 	lsl	r0, r2, #28
  144084:	121234ff 	andsne	r3, r2, #-16777216	; 0xff000000
  144088:	133304ff 	teqne	r3, #-16777216	; 0xff000000
  14408c:	1221130e 	eorne	r1, r1, #939524096	; 0x38000000
  144090:	112fff1e 	bxne	lr
  144094:	e3d224ff 	bics	r2, r2, #-16777216	; 0xff000000
  144098:	012fff1e 	bxeq	lr
  14409c:	e33304ff 	teq	r3, #-16777216	; 0xff000000
  1440a0:	03811702 	orreq	r1, r1, #524288	; 0x80000
  1440a4:	012fff1e 	bxeq	lr
  1440a8:	e92d4030 	push	{r4, r5, lr}
  1440ac:	e3a04d0e 	mov	r4, #896	; 0x380
  1440b0:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
  1440b4:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
  1440b8:	eaffff81 	b	143ec4 <__adddf3+0x148>

001440bc <__aeabi_ul2d>:
  1440bc:	e1902001 	orrs	r2, r0, r1
  1440c0:	012fff1e 	bxeq	lr
  1440c4:	e92d4030 	push	{r4, r5, lr}
  1440c8:	e3a05000 	mov	r5, #0
  1440cc:	ea000006 	b	1440ec <__aeabi_l2d+0x1c>

001440d0 <__aeabi_l2d>:
  1440d0:	e1902001 	orrs	r2, r0, r1
  1440d4:	012fff1e 	bxeq	lr
  1440d8:	e92d4030 	push	{r4, r5, lr}
  1440dc:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
  1440e0:	5a000001 	bpl	1440ec <__aeabi_l2d+0x1c>
  1440e4:	e2700000 	rsbs	r0, r0, #0
  1440e8:	e2e11000 	rsc	r1, r1, #0
  1440ec:	e3a04b01 	mov	r4, #1024	; 0x400
  1440f0:	e2844032 	add	r4, r4, #50	; 0x32
  1440f4:	e1b0cb21 	lsrs	ip, r1, #22
  1440f8:	0affff5a 	beq	143e68 <__adddf3+0xec>
  1440fc:	e3a02003 	mov	r2, #3
  144100:	e1b0c1ac 	lsrs	ip, ip, #3
  144104:	12822003 	addne	r2, r2, #3
  144108:	e1b0c1ac 	lsrs	ip, ip, #3
  14410c:	12822003 	addne	r2, r2, #3
  144110:	e08221ac 	add	r2, r2, ip, lsr #3
  144114:	e2623020 	rsb	r3, r2, #32
  144118:	e1a0c310 	lsl	ip, r0, r3
  14411c:	e1a00230 	lsr	r0, r0, r2
  144120:	e1800311 	orr	r0, r0, r1, lsl r3
  144124:	e1a01231 	lsr	r1, r1, r2
  144128:	e0844002 	add	r4, r4, r2
  14412c:	eaffff4d 	b	143e68 <__adddf3+0xec>

00144130 <__aeabi_dmul>:
  144130:	e92d4070 	push	{r4, r5, r6, lr}
  144134:	e3a0c0ff 	mov	ip, #255	; 0xff
  144138:	e38ccc07 	orr	ip, ip, #1792	; 0x700
  14413c:	e01c4a21 	ands	r4, ip, r1, lsr #20
  144140:	101c5a23 	andsne	r5, ip, r3, lsr #20
  144144:	1134000c 	teqne	r4, ip
  144148:	1135000c 	teqne	r5, ip
  14414c:	0b00006f 	bleq	144310 <__aeabi_dmul+0x1e0>
  144150:	e0844005 	add	r4, r4, r5
  144154:	e0216003 	eor	r6, r1, r3
  144158:	e1c11a8c 	bic	r1, r1, ip, lsl #21
  14415c:	e1c33a8c 	bic	r3, r3, ip, lsl #21
  144160:	e1905601 	orrs	r5, r0, r1, lsl #12
  144164:	11925603 	orrsne	r5, r2, r3, lsl #12
  144168:	e3811601 	orr	r1, r1, #1048576	; 0x100000
  14416c:	e3833601 	orr	r3, r3, #1048576	; 0x100000
  144170:	0a00001c 	beq	1441e8 <__aeabi_dmul+0xb8>
  144174:	e08ec290 	umull	ip, lr, r0, r2
  144178:	e3a05000 	mov	r5, #0
  14417c:	e0a5e291 	umlal	lr, r5, r1, r2
  144180:	e2062102 	and	r2, r6, #-2147483648	; 0x80000000
  144184:	e0a5e390 	umlal	lr, r5, r0, r3
  144188:	e3a06000 	mov	r6, #0
  14418c:	e0a65391 	umlal	r5, r6, r1, r3
  144190:	e33c0000 	teq	ip, #0
  144194:	138ee001 	orrne	lr, lr, #1
  144198:	e24440ff 	sub	r4, r4, #255	; 0xff
  14419c:	e3560c02 	cmp	r6, #512	; 0x200
  1441a0:	e2c44c03 	sbc	r4, r4, #768	; 0x300
  1441a4:	2a000002 	bcs	1441b4 <__aeabi_dmul+0x84>
  1441a8:	e1b0e08e 	lsls	lr, lr, #1
  1441ac:	e0b55005 	adcs	r5, r5, r5
  1441b0:	e0a66006 	adc	r6, r6, r6
  1441b4:	e1821586 	orr	r1, r2, r6, lsl #11
  1441b8:	e1811aa5 	orr	r1, r1, r5, lsr #21
  1441bc:	e1a00585 	lsl	r0, r5, #11
  1441c0:	e1800aae 	orr	r0, r0, lr, lsr #21
  1441c4:	e1a0e58e 	lsl	lr, lr, #11
  1441c8:	e254c0fd 	subs	ip, r4, #253	; 0xfd
  1441cc:	835c0c07 	cmphi	ip, #1792	; 0x700
  1441d0:	8a00000f 	bhi	144214 <__aeabi_dmul+0xe4>
  1441d4:	e35e0102 	cmp	lr, #-2147483648	; 0x80000000
  1441d8:	01b0e0a0 	lsrseq	lr, r0, #1
  1441dc:	e2b00000 	adcs	r0, r0, #0
  1441e0:	e0a11a04 	adc	r1, r1, r4, lsl #20
  1441e4:	e8bd8070 	pop	{r4, r5, r6, pc}
  1441e8:	e2066102 	and	r6, r6, #-2147483648	; 0x80000000
  1441ec:	e1861001 	orr	r1, r6, r1
  1441f0:	e1800002 	orr	r0, r0, r2
  1441f4:	e0211003 	eor	r1, r1, r3
  1441f8:	e05440ac 	subs	r4, r4, ip, lsr #1
  1441fc:	c074500c 	rsbsgt	r5, r4, ip
  144200:	c1811a04 	orrgt	r1, r1, r4, lsl #20
  144204:	c8bd8070 	popgt	{r4, r5, r6, pc}
  144208:	e3811601 	orr	r1, r1, #1048576	; 0x100000
  14420c:	e3a0e000 	mov	lr, #0
  144210:	e2544001 	subs	r4, r4, #1
  144214:	ca000058 	bgt	14437c <__aeabi_dmul+0x24c>
  144218:	e3740036 	cmn	r4, #54	; 0x36
  14421c:	d3a00000 	movle	r0, #0
  144220:	d2011102 	andle	r1, r1, #-2147483648	; 0x80000000
  144224:	d8bd8070 	pople	{r4, r5, r6, pc}
  144228:	e2644000 	rsb	r4, r4, #0
  14422c:	e2544020 	subs	r4, r4, #32
  144230:	aa000018 	bge	144298 <__aeabi_dmul+0x168>
  144234:	e294400c 	adds	r4, r4, #12
  144238:	ca00000b 	bgt	14426c <__aeabi_dmul+0x13c>
  14423c:	e2844014 	add	r4, r4, #20
  144240:	e2645020 	rsb	r5, r4, #32
  144244:	e1a03510 	lsl	r3, r0, r5
  144248:	e1a00430 	lsr	r0, r0, r4
  14424c:	e1800511 	orr	r0, r0, r1, lsl r5
  144250:	e2012102 	and	r2, r1, #-2147483648	; 0x80000000
  144254:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
  144258:	e0900fa3 	adds	r0, r0, r3, lsr #31
  14425c:	e0a21431 	adc	r1, r2, r1, lsr r4
  144260:	e19ee083 	orrs	lr, lr, r3, lsl #1
  144264:	01c00fa3 	biceq	r0, r0, r3, lsr #31
  144268:	e8bd8070 	pop	{r4, r5, r6, pc}
  14426c:	e264400c 	rsb	r4, r4, #12
  144270:	e2645020 	rsb	r5, r4, #32
  144274:	e1a03410 	lsl	r3, r0, r4
  144278:	e1a00530 	lsr	r0, r0, r5
  14427c:	e1800411 	orr	r0, r0, r1, lsl r4
  144280:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
  144284:	e0900fa3 	adds	r0, r0, r3, lsr #31
  144288:	e2a11000 	adc	r1, r1, #0
  14428c:	e19ee083 	orrs	lr, lr, r3, lsl #1
  144290:	01c00fa3 	biceq	r0, r0, r3, lsr #31
  144294:	e8bd8070 	pop	{r4, r5, r6, pc}
  144298:	e2645020 	rsb	r5, r4, #32
  14429c:	e18ee510 	orr	lr, lr, r0, lsl r5
  1442a0:	e1a03430 	lsr	r3, r0, r4
  1442a4:	e1833511 	orr	r3, r3, r1, lsl r5
  1442a8:	e1a00431 	lsr	r0, r1, r4
  1442ac:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
  1442b0:	e1c00431 	bic	r0, r0, r1, lsr r4
  1442b4:	e0800fa3 	add	r0, r0, r3, lsr #31
  1442b8:	e19ee083 	orrs	lr, lr, r3, lsl #1
  1442bc:	01c00fa3 	biceq	r0, r0, r3, lsr #31
  1442c0:	e8bd8070 	pop	{r4, r5, r6, pc}
  1442c4:	e3340000 	teq	r4, #0
  1442c8:	1a000008 	bne	1442f0 <__aeabi_dmul+0x1c0>
  1442cc:	e2016102 	and	r6, r1, #-2147483648	; 0x80000000
  1442d0:	e1b00080 	lsls	r0, r0, #1
  1442d4:	e0a11001 	adc	r1, r1, r1
  1442d8:	e3110601 	tst	r1, #1048576	; 0x100000
  1442dc:	02444001 	subeq	r4, r4, #1
  1442e0:	0afffffa 	beq	1442d0 <__aeabi_dmul+0x1a0>
  1442e4:	e1811006 	orr	r1, r1, r6
  1442e8:	e3350000 	teq	r5, #0
  1442ec:	112fff1e 	bxne	lr
  1442f0:	e2036102 	and	r6, r3, #-2147483648	; 0x80000000
  1442f4:	e1b02082 	lsls	r2, r2, #1
  1442f8:	e0a33003 	adc	r3, r3, r3
  1442fc:	e3130601 	tst	r3, #1048576	; 0x100000
  144300:	02455001 	subeq	r5, r5, #1
  144304:	0afffffa 	beq	1442f4 <__aeabi_dmul+0x1c4>
  144308:	e1833006 	orr	r3, r3, r6
  14430c:	e12fff1e 	bx	lr
  144310:	e134000c 	teq	r4, ip
  144314:	e00c5a23 	and	r5, ip, r3, lsr #20
  144318:	1135000c 	teqne	r5, ip
  14431c:	0a000006 	beq	14433c <__aeabi_dmul+0x20c>
  144320:	e1906081 	orrs	r6, r0, r1, lsl #1
  144324:	11926083 	orrsne	r6, r2, r3, lsl #1
  144328:	1affffe5 	bne	1442c4 <__aeabi_dmul+0x194>
  14432c:	e0211003 	eor	r1, r1, r3
  144330:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
  144334:	e3a00000 	mov	r0, #0
  144338:	e8bd8070 	pop	{r4, r5, r6, pc}
  14433c:	e1906081 	orrs	r6, r0, r1, lsl #1
  144340:	01a00002 	moveq	r0, r2
  144344:	01a01003 	moveq	r1, r3
  144348:	11926083 	orrsne	r6, r2, r3, lsl #1
  14434c:	0a00000f 	beq	144390 <__aeabi_dmul+0x260>
  144350:	e134000c 	teq	r4, ip
  144354:	1a000001 	bne	144360 <__aeabi_dmul+0x230>
  144358:	e1906601 	orrs	r6, r0, r1, lsl #12
  14435c:	1a00000b 	bne	144390 <__aeabi_dmul+0x260>
  144360:	e135000c 	teq	r5, ip
  144364:	1a000003 	bne	144378 <__aeabi_dmul+0x248>
  144368:	e1926603 	orrs	r6, r2, r3, lsl #12
  14436c:	11a00002 	movne	r0, r2
  144370:	11a01003 	movne	r1, r3
  144374:	1a000005 	bne	144390 <__aeabi_dmul+0x260>
  144378:	e0211003 	eor	r1, r1, r3
  14437c:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
  144380:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
  144384:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
  144388:	e3a00000 	mov	r0, #0
  14438c:	e8bd8070 	pop	{r4, r5, r6, pc}
  144390:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
  144394:	e381173e 	orr	r1, r1, #16252928	; 0xf80000
  144398:	e8bd8070 	pop	{r4, r5, r6, pc}

0014439c <__aeabi_ddiv>:
  14439c:	e92d4070 	push	{r4, r5, r6, lr}
  1443a0:	e3a0c0ff 	mov	ip, #255	; 0xff
  1443a4:	e38ccc07 	orr	ip, ip, #1792	; 0x700
  1443a8:	e01c4a21 	ands	r4, ip, r1, lsr #20
  1443ac:	101c5a23 	andsne	r5, ip, r3, lsr #20
  1443b0:	1134000c 	teqne	r4, ip
  1443b4:	1135000c 	teqne	r5, ip
  1443b8:	0b00005c 	bleq	144530 <__aeabi_ddiv+0x194>
  1443bc:	e0444005 	sub	r4, r4, r5
  1443c0:	e021e003 	eor	lr, r1, r3
  1443c4:	e1925603 	orrs	r5, r2, r3, lsl #12
  1443c8:	e1a01601 	lsl	r1, r1, #12
  1443cc:	0a00004b 	beq	144500 <__aeabi_ddiv+0x164>
  1443d0:	e1a03603 	lsl	r3, r3, #12
  1443d4:	e3a05201 	mov	r5, #268435456	; 0x10000000
  1443d8:	e1853223 	orr	r3, r5, r3, lsr #4
  1443dc:	e1833c22 	orr	r3, r3, r2, lsr #24
  1443e0:	e1a02402 	lsl	r2, r2, #8
  1443e4:	e1855221 	orr	r5, r5, r1, lsr #4
  1443e8:	e1855c20 	orr	r5, r5, r0, lsr #24
  1443ec:	e1a06400 	lsl	r6, r0, #8
  1443f0:	e20e1102 	and	r1, lr, #-2147483648	; 0x80000000
  1443f4:	e1550003 	cmp	r5, r3
  1443f8:	01560002 	cmpeq	r6, r2
  1443fc:	e2a440fd 	adc	r4, r4, #253	; 0xfd
  144400:	e2844c03 	add	r4, r4, #768	; 0x300
  144404:	2a000001 	bcs	144410 <__aeabi_ddiv+0x74>
  144408:	e1b030a3 	lsrs	r3, r3, #1
  14440c:	e1a02062 	rrx	r2, r2
  144410:	e0566002 	subs	r6, r6, r2
  144414:	e0c55003 	sbc	r5, r5, r3
  144418:	e1b030a3 	lsrs	r3, r3, #1
  14441c:	e1a02062 	rrx	r2, r2
  144420:	e3a00601 	mov	r0, #1048576	; 0x100000
  144424:	e3a0c702 	mov	ip, #524288	; 0x80000
  144428:	e056e002 	subs	lr, r6, r2
  14442c:	e0d5e003 	sbcs	lr, r5, r3
  144430:	20466002 	subcs	r6, r6, r2
  144434:	21a0500e 	movcs	r5, lr
  144438:	2180000c 	orrcs	r0, r0, ip
  14443c:	e1b030a3 	lsrs	r3, r3, #1
  144440:	e1a02062 	rrx	r2, r2
  144444:	e056e002 	subs	lr, r6, r2
  144448:	e0d5e003 	sbcs	lr, r5, r3
  14444c:	20466002 	subcs	r6, r6, r2
  144450:	21a0500e 	movcs	r5, lr
  144454:	218000ac 	orrcs	r0, r0, ip, lsr #1
  144458:	e1b030a3 	lsrs	r3, r3, #1
  14445c:	e1a02062 	rrx	r2, r2
  144460:	e056e002 	subs	lr, r6, r2
  144464:	e0d5e003 	sbcs	lr, r5, r3
  144468:	20466002 	subcs	r6, r6, r2
  14446c:	21a0500e 	movcs	r5, lr
  144470:	2180012c 	orrcs	r0, r0, ip, lsr #2
  144474:	e1b030a3 	lsrs	r3, r3, #1
  144478:	e1a02062 	rrx	r2, r2
  14447c:	e056e002 	subs	lr, r6, r2
  144480:	e0d5e003 	sbcs	lr, r5, r3
  144484:	20466002 	subcs	r6, r6, r2
  144488:	21a0500e 	movcs	r5, lr
  14448c:	218001ac 	orrcs	r0, r0, ip, lsr #3
  144490:	e195e006 	orrs	lr, r5, r6
  144494:	0a00000d 	beq	1444d0 <__aeabi_ddiv+0x134>
  144498:	e1a05205 	lsl	r5, r5, #4
  14449c:	e1855e26 	orr	r5, r5, r6, lsr #28
  1444a0:	e1a06206 	lsl	r6, r6, #4
  1444a4:	e1a03183 	lsl	r3, r3, #3
  1444a8:	e1833ea2 	orr	r3, r3, r2, lsr #29
  1444ac:	e1a02182 	lsl	r2, r2, #3
  1444b0:	e1b0c22c 	lsrs	ip, ip, #4
  1444b4:	1affffdb 	bne	144428 <__aeabi_ddiv+0x8c>
  1444b8:	e3110601 	tst	r1, #1048576	; 0x100000
  1444bc:	1a000006 	bne	1444dc <__aeabi_ddiv+0x140>
  1444c0:	e1811000 	orr	r1, r1, r0
  1444c4:	e3a00000 	mov	r0, #0
  1444c8:	e3a0c102 	mov	ip, #-2147483648	; 0x80000000
  1444cc:	eaffffd5 	b	144428 <__aeabi_ddiv+0x8c>
  1444d0:	e3110601 	tst	r1, #1048576	; 0x100000
  1444d4:	01811000 	orreq	r1, r1, r0
  1444d8:	03a00000 	moveq	r0, #0
  1444dc:	e254c0fd 	subs	ip, r4, #253	; 0xfd
  1444e0:	835c0c07 	cmphi	ip, #1792	; 0x700
  1444e4:	8affff4a 	bhi	144214 <__aeabi_dmul+0xe4>
  1444e8:	e055c003 	subs	ip, r5, r3
  1444ec:	0056c002 	subseq	ip, r6, r2
  1444f0:	01b0c0a0 	lsrseq	ip, r0, #1
  1444f4:	e2b00000 	adcs	r0, r0, #0
  1444f8:	e0a11a04 	adc	r1, r1, r4, lsl #20
  1444fc:	e8bd8070 	pop	{r4, r5, r6, pc}
  144500:	e20ee102 	and	lr, lr, #-2147483648	; 0x80000000
  144504:	e18e1621 	orr	r1, lr, r1, lsr #12
  144508:	e09440ac 	adds	r4, r4, ip, lsr #1
  14450c:	c074500c 	rsbsgt	r5, r4, ip
  144510:	c1811a04 	orrgt	r1, r1, r4, lsl #20
  144514:	c8bd8070 	popgt	{r4, r5, r6, pc}
  144518:	e3811601 	orr	r1, r1, #1048576	; 0x100000
  14451c:	e3a0e000 	mov	lr, #0
  144520:	e2544001 	subs	r4, r4, #1
  144524:	eaffff3a 	b	144214 <__aeabi_dmul+0xe4>
  144528:	e185e006 	orr	lr, r5, r6
  14452c:	eaffff38 	b	144214 <__aeabi_dmul+0xe4>
  144530:	e00c5a23 	and	r5, ip, r3, lsr #20
  144534:	e134000c 	teq	r4, ip
  144538:	0135000c 	teqeq	r5, ip
  14453c:	0affff93 	beq	144390 <__aeabi_dmul+0x260>
  144540:	e134000c 	teq	r4, ip
  144544:	1a000006 	bne	144564 <__aeabi_ddiv+0x1c8>
  144548:	e1904601 	orrs	r4, r0, r1, lsl #12
  14454c:	1affff8f 	bne	144390 <__aeabi_dmul+0x260>
  144550:	e135000c 	teq	r5, ip
  144554:	1affff87 	bne	144378 <__aeabi_dmul+0x248>
  144558:	e1a00002 	mov	r0, r2
  14455c:	e1a01003 	mov	r1, r3
  144560:	eaffff8a 	b	144390 <__aeabi_dmul+0x260>
  144564:	e135000c 	teq	r5, ip
  144568:	1a000004 	bne	144580 <__aeabi_ddiv+0x1e4>
  14456c:	e1925603 	orrs	r5, r2, r3, lsl #12
  144570:	0affff6d 	beq	14432c <__aeabi_dmul+0x1fc>
  144574:	e1a00002 	mov	r0, r2
  144578:	e1a01003 	mov	r1, r3
  14457c:	eaffff83 	b	144390 <__aeabi_dmul+0x260>
  144580:	e1906081 	orrs	r6, r0, r1, lsl #1
  144584:	11926083 	orrsne	r6, r2, r3, lsl #1
  144588:	1affff4d 	bne	1442c4 <__aeabi_dmul+0x194>
  14458c:	e1904081 	orrs	r4, r0, r1, lsl #1
  144590:	1affff78 	bne	144378 <__aeabi_dmul+0x248>
  144594:	e1925083 	orrs	r5, r2, r3, lsl #1
  144598:	1affff63 	bne	14432c <__aeabi_dmul+0x1fc>
  14459c:	eaffff7b 	b	144390 <__aeabi_dmul+0x260>

001445a0 <__gedf2>:
  1445a0:	e3e0c000 	mvn	ip, #0
  1445a4:	ea000002 	b	1445b4 <__cmpdf2+0x4>

001445a8 <__ledf2>:
  1445a8:	e3a0c001 	mov	ip, #1
  1445ac:	ea000000 	b	1445b4 <__cmpdf2+0x4>

001445b0 <__cmpdf2>:
  1445b0:	e3a0c001 	mov	ip, #1
  1445b4:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
  1445b8:	e1a0c081 	lsl	ip, r1, #1
  1445bc:	e1f0cacc 	mvns	ip, ip, asr #21
  1445c0:	e1a0c083 	lsl	ip, r3, #1
  1445c4:	11f0cacc 	mvnsne	ip, ip, asr #21
  1445c8:	0a00000e 	beq	144608 <__cmpdf2+0x58>
  1445cc:	e28dd004 	add	sp, sp, #4
  1445d0:	e190c081 	orrs	ip, r0, r1, lsl #1
  1445d4:	0192c083 	orrseq	ip, r2, r3, lsl #1
  1445d8:	11310003 	teqne	r1, r3
  1445dc:	01300002 	teqeq	r0, r2
  1445e0:	03a00000 	moveq	r0, #0
  1445e4:	012fff1e 	bxeq	lr
  1445e8:	e3700000 	cmn	r0, #0
  1445ec:	e1310003 	teq	r1, r3
  1445f0:	51510003 	cmppl	r1, r3
  1445f4:	01500002 	cmpeq	r0, r2
  1445f8:	21a00fc3 	asrcs	r0, r3, #31
  1445fc:	31e00fc3 	mvncc	r0, r3, asr #31
  144600:	e3800001 	orr	r0, r0, #1
  144604:	e12fff1e 	bx	lr
  144608:	e1a0c081 	lsl	ip, r1, #1
  14460c:	e1f0cacc 	mvns	ip, ip, asr #21
  144610:	1a000001 	bne	14461c <__cmpdf2+0x6c>
  144614:	e190c601 	orrs	ip, r0, r1, lsl #12
  144618:	1a000004 	bne	144630 <__cmpdf2+0x80>
  14461c:	e1a0c083 	lsl	ip, r3, #1
  144620:	e1f0cacc 	mvns	ip, ip, asr #21
  144624:	1affffe8 	bne	1445cc <__cmpdf2+0x1c>
  144628:	e192c603 	orrs	ip, r2, r3, lsl #12
  14462c:	0affffe6 	beq	1445cc <__cmpdf2+0x1c>
  144630:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
  144634:	e12fff1e 	bx	lr

00144638 <__aeabi_cdrcmple>:
  144638:	e1a0c000 	mov	ip, r0
  14463c:	e1a00002 	mov	r0, r2
  144640:	e1a0200c 	mov	r2, ip
  144644:	e1a0c001 	mov	ip, r1
  144648:	e1a01003 	mov	r1, r3
  14464c:	e1a0300c 	mov	r3, ip
  144650:	eaffffff 	b	144654 <__aeabi_cdcmpeq>

00144654 <__aeabi_cdcmpeq>:
  144654:	e92d4001 	push	{r0, lr}
  144658:	ebffffd4 	bl	1445b0 <__cmpdf2>
  14465c:	e3500000 	cmp	r0, #0
  144660:	43700000 	cmnmi	r0, #0
  144664:	e8bd8001 	pop	{r0, pc}

00144668 <__aeabi_dcmpeq>:
  144668:	e52de008 	str	lr, [sp, #-8]!
  14466c:	ebfffff8 	bl	144654 <__aeabi_cdcmpeq>
  144670:	03a00001 	moveq	r0, #1
  144674:	13a00000 	movne	r0, #0
  144678:	e49df008 	ldr	pc, [sp], #8

0014467c <__aeabi_dcmplt>:
  14467c:	e52de008 	str	lr, [sp, #-8]!
  144680:	ebfffff3 	bl	144654 <__aeabi_cdcmpeq>
  144684:	33a00001 	movcc	r0, #1
  144688:	23a00000 	movcs	r0, #0
  14468c:	e49df008 	ldr	pc, [sp], #8

00144690 <__aeabi_dcmple>:
  144690:	e52de008 	str	lr, [sp, #-8]!
  144694:	ebffffee 	bl	144654 <__aeabi_cdcmpeq>
  144698:	93a00001 	movls	r0, #1
  14469c:	83a00000 	movhi	r0, #0
  1446a0:	e49df008 	ldr	pc, [sp], #8

001446a4 <__aeabi_dcmpge>:
  1446a4:	e52de008 	str	lr, [sp, #-8]!
  1446a8:	ebffffe2 	bl	144638 <__aeabi_cdrcmple>
  1446ac:	93a00001 	movls	r0, #1
  1446b0:	83a00000 	movhi	r0, #0
  1446b4:	e49df008 	ldr	pc, [sp], #8

001446b8 <__aeabi_dcmpgt>:
  1446b8:	e52de008 	str	lr, [sp, #-8]!
  1446bc:	ebffffdd 	bl	144638 <__aeabi_cdrcmple>
  1446c0:	33a00001 	movcc	r0, #1
  1446c4:	23a00000 	movcs	r0, #0
  1446c8:	e49df008 	ldr	pc, [sp], #8

001446cc <__aeabi_d2iz>:
  1446cc:	e1a02081 	lsl	r2, r1, #1
  1446d0:	e2922602 	adds	r2, r2, #2097152	; 0x200000
  1446d4:	2a00000c 	bcs	14470c <__aeabi_d2iz+0x40>
  1446d8:	5a000009 	bpl	144704 <__aeabi_d2iz+0x38>
  1446dc:	e3e03e3e 	mvn	r3, #992	; 0x3e0
  1446e0:	e0532ac2 	subs	r2, r3, r2, asr #21
  1446e4:	9a00000a 	bls	144714 <__aeabi_d2iz+0x48>
  1446e8:	e1a03581 	lsl	r3, r1, #11
  1446ec:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
  1446f0:	e1833aa0 	orr	r3, r3, r0, lsr #21
  1446f4:	e3110102 	tst	r1, #-2147483648	; 0x80000000
  1446f8:	e1a00233 	lsr	r0, r3, r2
  1446fc:	12600000 	rsbne	r0, r0, #0
  144700:	e12fff1e 	bx	lr
  144704:	e3a00000 	mov	r0, #0
  144708:	e12fff1e 	bx	lr
  14470c:	e1900601 	orrs	r0, r0, r1, lsl #12
  144710:	1a000002 	bne	144720 <__aeabi_d2iz+0x54>
  144714:	e2110102 	ands	r0, r1, #-2147483648	; 0x80000000
  144718:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
  14471c:	e12fff1e 	bx	lr
  144720:	e3a00000 	mov	r0, #0
  144724:	e12fff1e 	bx	lr

00144728 <__aeabi_d2uiz>:
  144728:	e1b02081 	lsls	r2, r1, #1
  14472c:	2a00000a 	bcs	14475c <__aeabi_d2uiz+0x34>
  144730:	e2922602 	adds	r2, r2, #2097152	; 0x200000
  144734:	2a00000a 	bcs	144764 <__aeabi_d2uiz+0x3c>
  144738:	5a000007 	bpl	14475c <__aeabi_d2uiz+0x34>
  14473c:	e3e03e3e 	mvn	r3, #992	; 0x3e0
  144740:	e0532ac2 	subs	r2, r3, r2, asr #21
  144744:	4a000008 	bmi	14476c <__aeabi_d2uiz+0x44>
  144748:	e1a03581 	lsl	r3, r1, #11
  14474c:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
  144750:	e1833aa0 	orr	r3, r3, r0, lsr #21
  144754:	e1a00233 	lsr	r0, r3, r2
  144758:	e12fff1e 	bx	lr
  14475c:	e3a00000 	mov	r0, #0
  144760:	e12fff1e 	bx	lr
  144764:	e1900601 	orrs	r0, r0, r1, lsl #12
  144768:	1a000001 	bne	144774 <__aeabi_d2uiz+0x4c>
  14476c:	e3e00000 	mvn	r0, #0
  144770:	e12fff1e 	bx	lr
  144774:	e3a00000 	mov	r0, #0
  144778:	e12fff1e 	bx	lr

0014477c <__aeabi_ldivmod>:
  14477c:	e3530000 	cmp	r3, #0
  144780:	03520000 	cmpeq	r2, #0
  144784:	1a000007 	bne	1447a8 <__aeabi_ldivmod+0x2c>
  144788:	e3510000 	cmp	r1, #0
  14478c:	b3a01102 	movlt	r1, #-2147483648	; 0x80000000
  144790:	b3a00000 	movlt	r0, #0
  144794:	ba000002 	blt	1447a4 <__aeabi_ldivmod+0x28>
  144798:	03500000 	cmpeq	r0, #0
  14479c:	13e01102 	mvnne	r1, #-2147483648	; 0x80000000
  1447a0:	13e00000 	mvnne	r0, #0
  1447a4:	eaffcee4 	b	13833c <__aeabi_idiv0>
  1447a8:	e24dd008 	sub	sp, sp, #8
  1447ac:	e92d6000 	push	{sp, lr}
  1447b0:	e3510000 	cmp	r1, #0
  1447b4:	ba000006 	blt	1447d4 <__aeabi_ldivmod+0x58>
  1447b8:	e3530000 	cmp	r3, #0
  1447bc:	ba000011 	blt	144808 <__aeabi_ldivmod+0x8c>
  1447c0:	eb000031 	bl	14488c <__udivmoddi4>
  1447c4:	e59de004 	ldr	lr, [sp, #4]
  1447c8:	e28dd008 	add	sp, sp, #8
  1447cc:	e8bd000c 	pop	{r2, r3}
  1447d0:	e12fff1e 	bx	lr
  1447d4:	e2700000 	rsbs	r0, r0, #0
  1447d8:	e0c11081 	sbc	r1, r1, r1, lsl #1
  1447dc:	e3530000 	cmp	r3, #0
  1447e0:	ba000011 	blt	14482c <__aeabi_ldivmod+0xb0>
  1447e4:	eb000028 	bl	14488c <__udivmoddi4>
  1447e8:	e59de004 	ldr	lr, [sp, #4]
  1447ec:	e28dd008 	add	sp, sp, #8
  1447f0:	e8bd000c 	pop	{r2, r3}
  1447f4:	e2700000 	rsbs	r0, r0, #0
  1447f8:	e0c11081 	sbc	r1, r1, r1, lsl #1
  1447fc:	e2722000 	rsbs	r2, r2, #0
  144800:	e0c33083 	sbc	r3, r3, r3, lsl #1
  144804:	e12fff1e 	bx	lr
  144808:	e2722000 	rsbs	r2, r2, #0
  14480c:	e0c33083 	sbc	r3, r3, r3, lsl #1
  144810:	eb00001d 	bl	14488c <__udivmoddi4>
  144814:	e59de004 	ldr	lr, [sp, #4]
  144818:	e28dd008 	add	sp, sp, #8
  14481c:	e8bd000c 	pop	{r2, r3}
  144820:	e2700000 	rsbs	r0, r0, #0
  144824:	e0c11081 	sbc	r1, r1, r1, lsl #1
  144828:	e12fff1e 	bx	lr
  14482c:	e2722000 	rsbs	r2, r2, #0
  144830:	e0c33083 	sbc	r3, r3, r3, lsl #1
  144834:	eb000014 	bl	14488c <__udivmoddi4>
  144838:	e59de004 	ldr	lr, [sp, #4]
  14483c:	e28dd008 	add	sp, sp, #8
  144840:	e8bd000c 	pop	{r2, r3}
  144844:	e2722000 	rsbs	r2, r2, #0
  144848:	e0c33083 	sbc	r3, r3, r3, lsl #1
  14484c:	e12fff1e 	bx	lr

00144850 <__aeabi_uldivmod>:
  144850:	e3530000 	cmp	r3, #0
  144854:	03520000 	cmpeq	r2, #0
  144858:	1a000004 	bne	144870 <__aeabi_uldivmod+0x20>
  14485c:	e3510000 	cmp	r1, #0
  144860:	03500000 	cmpeq	r0, #0
  144864:	13e01000 	mvnne	r1, #0
  144868:	13e00000 	mvnne	r0, #0
  14486c:	eaffceb2 	b	13833c <__aeabi_idiv0>
  144870:	e24dd008 	sub	sp, sp, #8
  144874:	e92d6000 	push	{sp, lr}
  144878:	eb000003 	bl	14488c <__udivmoddi4>
  14487c:	e59de004 	ldr	lr, [sp, #4]
  144880:	e28dd008 	add	sp, sp, #8
  144884:	e8bd000c 	pop	{r2, r3}
  144888:	e12fff1e 	bx	lr

0014488c <__udivmoddi4>:
  14488c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  144890:	e1510003 	cmp	r1, r3
  144894:	e24dd008 	sub	sp, sp, #8
  144898:	01500002 	cmpeq	r0, r2
  14489c:	e1a09000 	mov	r9, r0
  1448a0:	e1a0a001 	mov	sl, r1
  1448a4:	e59d8028 	ldr	r8, [sp, #40]	; 0x28
  1448a8:	3a00003c 	bcc	1449a0 <__udivmoddi4+0x114>
  1448ac:	e1a00002 	mov	r0, r2
  1448b0:	e3530000 	cmp	r3, #0
  1448b4:	e1a01003 	mov	r1, r3
  1448b8:	016f3f10 	clzeq	r3, r0
  1448bc:	116f2f13 	clzne	r2, r3
  1448c0:	02832020 	addeq	r2, r3, #32
  1448c4:	e35a0000 	cmp	sl, #0
  1448c8:	016f3f19 	clzeq	r3, r9
  1448cc:	116f3f1a 	clzne	r3, sl
  1448d0:	02833020 	addeq	r3, r3, #32
  1448d4:	e0423003 	sub	r3, r2, r3
  1448d8:	e243c020 	sub	ip, r3, #32
  1448dc:	e1a07311 	lsl	r7, r1, r3
  1448e0:	e1877c10 	orr	r7, r7, r0, lsl ip
  1448e4:	e263e020 	rsb	lr, r3, #32
  1448e8:	e1877e30 	orr	r7, r7, r0, lsr lr
  1448ec:	e1a06310 	lsl	r6, r0, r3
  1448f0:	e15a0007 	cmp	sl, r7
  1448f4:	01590006 	cmpeq	r9, r6
  1448f8:	2a000030 	bcs	1449c0 <__udivmoddi4+0x134>
  1448fc:	e3a01000 	mov	r1, #0
  144900:	e3a02000 	mov	r2, #0
  144904:	e88d0006 	stm	sp, {r1, r2}
  144908:	e3530000 	cmp	r3, #0
  14490c:	0a000026 	beq	1449ac <__udivmoddi4+0x120>
  144910:	e1b070a7 	lsrs	r7, r7, #1
  144914:	e1a06066 	rrx	r6, r6
  144918:	e1a02003 	mov	r2, r3
  14491c:	ea000007 	b	144940 <__udivmoddi4+0xb4>
  144920:	e0590006 	subs	r0, r9, r6
  144924:	e0ca1007 	sbc	r1, sl, r7
  144928:	e0904000 	adds	r4, r0, r0
  14492c:	e0a15001 	adc	r5, r1, r1
  144930:	e2949001 	adds	r9, r4, #1
  144934:	e2a5a000 	adc	sl, r5, #0
  144938:	e2522001 	subs	r2, r2, #1
  14493c:	0a000006 	beq	14495c <__udivmoddi4+0xd0>
  144940:	e15a0007 	cmp	sl, r7
  144944:	01590006 	cmpeq	r9, r6
  144948:	2afffff4 	bcs	144920 <__udivmoddi4+0x94>
  14494c:	e0999009 	adds	r9, r9, r9
  144950:	e0aaa00a 	adc	sl, sl, sl
  144954:	e2522001 	subs	r2, r2, #1
  144958:	1afffff8 	bne	144940 <__udivmoddi4+0xb4>
  14495c:	e89d00c0 	ldm	sp, {r6, r7}
  144960:	e1a02339 	lsr	r2, r9, r3
  144964:	e0966009 	adds	r6, r6, r9
  144968:	e1822e1a 	orr	r2, r2, sl, lsl lr
  14496c:	e1a0133a 	lsr	r1, sl, r3
  144970:	e1822c3a 	orr	r2, r2, sl, lsr ip
  144974:	e0a7700a 	adc	r7, r7, sl
  144978:	e1a0a001 	mov	sl, r1
  14497c:	e1a0131a 	lsl	r1, sl, r3
  144980:	e1811c12 	orr	r1, r1, r2, lsl ip
  144984:	e1a00312 	lsl	r0, r2, r3
  144988:	e0566000 	subs	r6, r6, r0
  14498c:	e1811e32 	orr	r1, r1, r2, lsr lr
  144990:	e0c77001 	sbc	r7, r7, r1
  144994:	e1a09002 	mov	r9, r2
  144998:	e88d00c0 	stm	sp, {r6, r7}
  14499c:	ea000002 	b	1449ac <__udivmoddi4+0x120>
  1449a0:	e3a03000 	mov	r3, #0
  1449a4:	e3a04000 	mov	r4, #0
  1449a8:	e88d0018 	stm	sp, {r3, r4}
  1449ac:	e3580000 	cmp	r8, #0
  1449b0:	18880600 	stmne	r8, {r9, sl}
  1449b4:	e89d0003 	ldm	sp, {r0, r1}
  1449b8:	e28dd008 	add	sp, sp, #8
  1449bc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  1449c0:	e3a02001 	mov	r2, #1
  1449c4:	e1a01c12 	lsl	r1, r2, ip
  1449c8:	e1811e32 	orr	r1, r1, r2, lsr lr
  1449cc:	e0599006 	subs	r9, r9, r6
  1449d0:	e1a02312 	lsl	r2, r2, r3
  1449d4:	e58d1004 	str	r1, [sp, #4]
  1449d8:	e0caa007 	sbc	sl, sl, r7
  1449dc:	e58d2000 	str	r2, [sp]
  1449e0:	eaffffc8 	b	144908 <__udivmoddi4+0x7c>

001449e4 <_init>:
  1449e4:	e92d4001 	push	{r0, lr}
  1449e8:	e8bd4001 	pop	{r0, lr}
  1449ec:	e12fff1e 	bx	lr

001449f0 <_fini>:
  1449f0:	e92d4001 	push	{r0, lr}
  1449f4:	e8bd4001 	pop	{r0, lr}
  1449f8:	e12fff1e 	bx	lr
  1449fc:	706d6f63 	.word	0x706d6f63
  144a00:	6974656c 	.word	0x6974656c
  144a04:	00006e6f 	.word	0x00006e6f
  144a08:	20746553 	.word	0x20746553
  144a0c:	6c626f6e 	.word	0x6c626f6e
  144a10:	696b636f 	.word	0x696b636f
  144a14:	6520676e 	.word	0x6520676e
  144a18:	726f7272 	.word	0x726f7272
  144a1c:	00000021 	.word	0x00000021
  144a20:	61657243 	.word	0x61657243
  144a24:	6c206574 	.word	0x6c206574
  144a28:	65747369 	.word	0x65747369
  144a2c:	2064666e 	.word	0x2064666e
  144a30:	6b636f73 	.word	0x6b636f73
  144a34:	65207465 	.word	0x65207465
  144a38:	726f7272 	.word	0x726f7272
  144a3c:	7325203a 	.word	0x7325203a
  144a40:	72726528 	.word	0x72726528
  144a44:	203a6f6e 	.word	0x203a6f6e
  144a48:	0a296425 	.word	0x0a296425
  144a4c:	00000000 	.word	0x00000000
  144a50:	73746553 	.word	0x73746553
  144a54:	6f6b636f 	.word	0x6f6b636f
  144a58:	72207470 	.word	0x72207470
  144a5c:	65737565 	.word	0x65737565
  144a60:	20646461 	.word	0x20646461
  144a64:	6c696166 	.word	0x6c696166
  144a68:	00006465 	.word	0x00006465
  144a6c:	646e6942 	.word	0x646e6942
  144a70:	636f7320 	.word	0x636f7320
  144a74:	2074656b 	.word	0x2074656b
  144a78:	6f727265 	.word	0x6f727265
  144a7c:	25203a72 	.word	0x25203a72
  144a80:	72652873 	.word	0x72652873
  144a84:	3a6f6e72 	.word	0x3a6f6e72
  144a88:	29642520 	.word	0x29642520
  144a8c:	6466202c 	.word	0x6466202c
  144a90:	0a64253d 	.word	0x0a64253d
  144a94:	00000000 	.word	0x00000000
  144a98:	7473694c 	.word	0x7473694c
  144a9c:	73206e65 	.word	0x73206e65
  144aa0:	656b636f 	.word	0x656b636f
  144aa4:	72652074 	.word	0x72652074
  144aa8:	3a726f72 	.word	0x3a726f72
  144aac:	28732520 	.word	0x28732520
  144ab0:	6e727265 	.word	0x6e727265
  144ab4:	25203a6f 	.word	0x25203a6f
  144ab8:	000a2964 	.word	0x000a2964
  144abc:	61657243 	.word	0x61657243
  144ac0:	63206574 	.word	0x63206574
  144ac4:	6e65696c 	.word	0x6e65696c
  144ac8:	20646674 	.word	0x20646674
  144acc:	6b636f73 	.word	0x6b636f73
  144ad0:	65207465 	.word	0x65207465
  144ad4:	726f7272 	.word	0x726f7272
  144ad8:	7325203a 	.word	0x7325203a
  144adc:	72726528 	.word	0x72726528
  144ae0:	203a6f6e 	.word	0x203a6f6e
  144ae4:	0a296425 	.word	0x0a296425
  144ae8:	00000000 	.word	0x00000000
  144aec:	656c6573 	.word	0x656c6573
  144af0:	65207463 	.word	0x65207463
  144af4:	726f7272 	.word	0x726f7272
  144af8:	00000000 	.word	0x00000000
  144afc:	746e6f63 	.word	0x746e6f63
  144b00:	65756e69 	.word	0x65756e69
  144b04:	00000000 	.word	0x00000000
  144b08:	69745f75 	.word	0x69745f75
  144b0c:	0072656d 	.word	0x0072656d
  144b10:	5f6d7475 	.word	0x5f6d7475
  144b14:	6574756d 	.word	0x6574756d
  144b18:	00000078 	.word	0x00000078
  144b1c:	00007325 	.word	0x00007325
  144b20:	72657355 	.word	0x72657355
  144b24:	3a505041 	.word	0x3a505041
  144b28:	73252820 	.word	0x73252820
  144b2c:	73612029 	.word	0x73612029
  144b30:	74726573 	.word	0x74726573
  144b34:	206e6f69 	.word	0x206e6f69
  144b38:	6c696166 	.word	0x6c696166
  144b3c:	61206465 	.word	0x61206465
  144b40:	75662074 	.word	0x75662074
  144b44:	6974636e 	.word	0x6974636e
  144b48:	253a6e6f 	.word	0x253a6e6f
  144b4c:	6c202c73 	.word	0x6c202c73
  144b50:	20656e69 	.word	0x20656e69
  144b54:	626d756e 	.word	0x626d756e
  144b58:	253a7265 	.word	0x253a7265
  144b5c:	000a2064 	.word	0x000a2064
  144b60:	6e616863 	.word	0x6e616863
  144b64:	206c656e 	.word	0x206c656e
  144b68:	30203d3e 	.word	0x30203d3e
  144b6c:	00000000 	.word	0x00000000
  144b70:	5049776c 	.word	0x5049776c
  144b74:	0074694b 	.word	0x0074694b
  144b78:	6c207325 	.word	0x6c207325
  144b7c:	20656e69 	.word	0x20656e69
  144b80:	73206425 	.word	0x73206425
  144b84:	74646e65 	.word	0x74646e65
  144b88:	7265206f 	.word	0x7265206f
  144b8c:	0a726f72 	.word	0x0a726f72
  144b90:	00000000 	.word	0x00000000
  144b94:	5049776c 	.word	0x5049776c
  144b98:	2074694b 	.word	0x2074694b
  144b9c:	67617355 	.word	0x67617355
  144ba0:	090a3a65 	.word	0x090a3a65
  144ba4:	5049776c 	.word	0x5049776c
  144ba8:	2074694b 	.word	0x2074694b
  144bac:	20202020 	.word	0x20202020
  144bb0:	20202020 	.word	0x20202020
  144bb4:	20202020 	.word	0x20202020
  144bb8:	203a2020 	.word	0x203a2020
  144bbc:	6e757220 	.word	0x6e757220
  144bc0:	49776c20 	.word	0x49776c20
  144bc4:	74694b50 	.word	0x74694b50
  144bc8:	6177202c 	.word	0x6177202c
  144bcc:	66207469 	.word	0x66207469
  144bd0:	6520726f 	.word	0x6520726f
  144bd4:	65646874 	.word	0x65646874
  144bd8:	6f742076 	.word	0x6f742076
  144bdc:	74746120 	.word	0x74746120
  144be0:	0a686361 	.word	0x0a686361
  144be4:	49776c09 	.word	0x49776c09
  144be8:	74694b50 	.word	0x74694b50
  144bec:	74746120 	.word	0x74746120
  144bf0:	20686361 	.word	0x20686361
  144bf4:	653c2020 	.word	0x653c2020
  144bf8:	3a3e6874 	.word	0x3a3e6874
  144bfc:	74612020 	.word	0x74612020
  144c00:	68636174 	.word	0x68636174
  144c04:	65687420 	.word	0x65687420
  144c08:	76656420 	.word	0x76656420
  144c0c:	20656369 	.word	0x20656369
  144c10:	6874653c 	.word	0x6874653c
  144c14:	6f74203e 	.word	0x6f74203e
  144c18:	49776c20 	.word	0x49776c20
  144c1c:	74694b50 	.word	0x74694b50
  144c20:	776c090a 	.word	0x776c090a
  144c24:	694b5049 	.word	0x694b5049
  144c28:	65642074 	.word	0x65642074
  144c2c:	61747461 	.word	0x61747461
  144c30:	3c206863 	.word	0x3c206863
  144c34:	3e687465 	.word	0x3e687465
  144c38:	6420203a 	.word	0x6420203a
  144c3c:	74612d65 	.word	0x74612d65
  144c40:	68636174 	.word	0x68636174
  144c44:	65687420 	.word	0x65687420
  144c48:	76656420 	.word	0x76656420
  144c4c:	20656369 	.word	0x20656369
  144c50:	6874653c 	.word	0x6874653c
  144c54:	7266203e 	.word	0x7266203e
  144c58:	6c206d6f 	.word	0x6c206d6f
  144c5c:	4b504977 	.word	0x4b504977
  144c60:	090a7469 	.word	0x090a7469
  144c64:	5049776c 	.word	0x5049776c
  144c68:	2074694b 	.word	0x2074694b
  144c6c:	61666564 	.word	0x61666564
  144c70:	20746c75 	.word	0x20746c75
  144c74:	74653c20 	.word	0x74653c20
  144c78:	203a3e68 	.word	0x203a3e68
  144c7c:	74657320 	.word	0x74657320
  144c80:	74653c20 	.word	0x74653c20
  144c84:	61203e68 	.word	0x61203e68
  144c88:	68742073 	.word	0x68742073
  144c8c:	65642065 	.word	0x65642065
  144c90:	6c756166 	.word	0x6c756166
  144c94:	65642074 	.word	0x65642074
  144c98:	65636976 	.word	0x65636976
  144c9c:	776c090a 	.word	0x776c090a
  144ca0:	694b5049 	.word	0x694b5049
  144ca4:	74732074 	.word	0x74732074
  144ca8:	73757461 	.word	0x73757461
  144cac:	20202020 	.word	0x20202020
  144cb0:	20202020 	.word	0x20202020
  144cb4:	7320203a 	.word	0x7320203a
  144cb8:	20776f68 	.word	0x20776f68
  144cbc:	20656874 	.word	0x20656874
  144cc0:	74617473 	.word	0x74617473
  144cc4:	6f207375 	.word	0x6f207375
  144cc8:	75722066 	.word	0x75722066
  144ccc:	6e696e6e 	.word	0x6e696e6e
  144cd0:	776c2067 	.word	0x776c2067
  144cd4:	494b5049 	.word	0x494b5049
  144cd8:	00000074 	.word	0x00000074
  144cdc:	5049776c 	.word	0x5049776c
  144ce0:	3a74694b 	.word	0x3a74694b
  144ce4:	61747320 	.word	0x61747320
  144ce8:	20737472 	.word	0x20737472
  144cec:	72206f74 	.word	0x72206f74
  144cf0:	61206e75 	.word	0x61206e75
  144cf4:	68742073 	.word	0x68742073
  144cf8:	65732065 	.word	0x65732065
  144cfc:	72657672 	.word	0x72657672
  144d00:	00000000 	.word	0x00000000
  144d04:	2e2e2e20 	.word	0x2e2e2e20
  144d08:	6c696166 	.word	0x6c696166
  144d0c:	00216465 	.word	0x00216465
  144d10:	2e2e2e20 	.word	0x2e2e2e20
  144d14:	70696b73 	.word	0x70696b73
  144d18:	21646570 	.word	0x21646570
  144d1c:	726c4120 	.word	0x726c4120
  144d20:	79646165 	.word	0x79646165
  144d24:	696e6920 	.word	0x696e6920
  144d28:	6c616974 	.word	0x6c616974
  144d2c:	64657a69 	.word	0x64657a69
  144d30:	00000000 	.word	0x00000000
  144d34:	2e2e2e20 	.word	0x2e2e2e20
  144d38:	63637573 	.word	0x63637573
  144d3c:	65646565 	.word	0x65646565
  144d40:	00002164 	.word	0x00002164
  144d44:	5049776c 	.word	0x5049776c
  144d48:	3a74694b 	.word	0x3a74694b
  144d4c:	696e6920 	.word	0x696e6920
  144d50:	74652074 	.word	0x74652074
  144d54:	65642068 	.word	0x65642068
  144d58:	2e2e2e76 	.word	0x2e2e2e76
  144d5c:	00000000 	.word	0x00000000
  144d60:	2e2e2e20 	.word	0x2e2e2e20
  144d64:	63637573 	.word	0x63637573
  144d68:	65646565 	.word	0x65646565
  144d6c:	00000064 	.word	0x00000064

00144d70 <__func__.9539>:
  144d70:	63617473 75725f6b 0000006e              stack_run...

00144d7c <__FUNCTION__.6247>:
  144d7c:	6e616863 5f6c656e 5f646d63 76636572     channel_cmd_recv
  144d8c:	00000000                                ....

00144d90 <__FUNCTION__.6253>:
  144d90:	6e616863 5f6c656e 5f646d63 6c706572     channel_cmd_repl
  144da0:	00000079 3a207325 6c696146 206f7420     y...%s :Fail to 
  144db0:	6f6c6c61 65746163 73206120 65726168     allocate a share
  144dc0:	656d2064 79726f6d 735f2021 6b5f6d68     d memory! _shm_k
  144dd0:	25207965 000a646c 20656854 6f6c6c61     ey %ld..The allo
  144de0:	65746163 68732064 64657261 6d656d20     cated shared mem
  144df0:	2079726f 73656f64 2074276e 65766168     ory doesn't have
  144e00:	76206120 64696c61 64646120 73736572      a valid address
  144e10:	00000021                                !...

00144e14 <__func__.6282>:
  144e14:	6e616863 5f6c656e 706d6f63 5f65736f     channel_compose_
  144e24:	00646d63 6e616863 206c656e 30203d3e     cmd.channel >= 0
  144e34:	00000000 5f637069 00767273 68746575     ....ipc_srv.ueth
  144e44:	746e695f 00000000 6e65706f 20732520     _int....open %s 
  144e54:	6c696166 000a6465                       failed..

00144e5c <__FUNCTION__.5856>:
  144e5c:	6e616863 5f6c656e 5f646d63 76636572     channel_cmd_recv
  144e6c:	00000000                                ....

00144e70 <__FUNCTION__.5845>:
  144e70:	6e616863 5f6c656e 5f646d63 646e6573     channel_cmd_send
  144e80:	6365725f 00000076                       _recv...

00144e88 <unet_socket_ops>:
  144e88:	001088c0 0010893c 00108968 001089a0     ....<...h.......
  144e98:	001089d0 00108a08 00108a44 00108af4     ........D.......
  144ea8:	00108b88 00108bd0 00108c18 00108c48     ............H...
  144eb8:	00108c80 00104384 00000000              .....C......

00144ec4 <unet_netdb_ops>:
  144ec4:	00108d28 00108e68 00108e98 00108ed8     (...h...........

00144ed4 <unet_inet_family>:
  144ed4:	00000002 00000002 00144e88 00144ec4     .........N...N..
  144ee4:	6474656e 00007665                       netdev..

00144eec <__FUNCTION__.7159>:
  144eec:	5f6c6173 74656e75 74656e5f 5f766564     sal_unet_netdev_
  144efc:	5f746573 695f6670 006f666e 20766564     set_pf_info.dev 
  144f0c:	52203d21 554e5f54 00004c4c 2d766564     != RT_NULL..dev-
  144f1c:	7261703e 2e746e65 65707974 203d3d20     >parent.type == 
  144f2c:	4f5f5452 63656a62 6c435f74 5f737361     RT_Object_Class_
  144f3c:	69766544 00006563 69206f54 6974696e     Device..To initi
  144f4c:	7a696c61 65642065 65636976 2073253a     alize device:%s 
  144f5c:	6c696166 202e6465 20656854 6f727265     failed. The erro
  144f6c:	6f632072 69206564 6c252073 00000a64     r code is %ld...

00144f7c <__FUNCTION__.6035>:
  144f7c:	68746575 7665645f 5f656369 65726e75     ueth_device_unre
  144f8c:	74736967 00007265                       gister..

00144f94 <__FUNCTION__.6044>:
  144f94:	68746575 7665645f 5f656369 74696e69     ueth_device_init
  144fa4:	00000000                                ....

00144fa8 <__FUNCTION__.6049>:
  144fa8:	68746575 7665645f 5f656369 736f6c63     ueth_device_clos
  144fb8:	00000065                                e...

00144fbc <__FUNCTION__.6055>:
  144fbc:	68746575 7665645f 5f656369 746e6f63     ueth_device_cont
  144fcc:	006c6f72 6474656e 00007665 656d616e     rol.netdev..name
  144fdc:	00000000 31335b1b 2f455b6d 6474656e     .....[31m[E/netd
  144fec:	205d7665 00000000 20656854 7774656e     ev] ....The netw
  144ffc:	206b726f 65746e69 63616672 65642065     ork interface de
  14500c:	65636976 29732528 746f6e20 70757320     vice(%s) not sup
  14501c:	74726f70 206f7420 20746573 74617473     port to set stat
  14502c:	002e7375 6d305b1b 0000000a 20656854     us...[0m....The 
  14503c:	7774656e 206b726f 65746e69 63616672     network interfac
  14504c:	65642065 65636976 29732528 746f6e20     e device(%s) not
  14505c:	70757320 74726f70 206f7420 20746573      support to set 
  14506c:	50434844 61747320 2e737574 00000000     DHCP status.....
  14507c:	615f7069 00726464 20656854 7774656e     ip_addr.The netw
  14508c:	206b726f 65746e69 63616672 65642065     ork interface de
  14509c:	65636976 29732528 746f6e20 70757320     vice(%s) not sup
  1450ac:	74726f70 206f7420 20746573 61205049     port to set IP a
  1450bc:	65726464 002e7373 20656854 7774656e     ddress..The netw
  1450cc:	206b726f 65746e69 63616672 65642065     ork interface de
  1450dc:	65636976 29732528 43484420 61632050     vice(%s) DHCP ca
  1450ec:	69626170 7974696c 20736920 62616e65     pability is enab
  1450fc:	202c656c 20746f6e 70707573 2074726f     le, not support 
  14510c:	20746573 61205049 65726464 002e7373     set IP address..
  14511c:	6d74656e 006b7361 20656854 7774656e     netmask.The netw
  14512c:	206b726f 65746e69 63616672 65642065     ork interface de
  14513c:	65636976 29732528 746f6e20 70757320     vice(%s) not sup
  14514c:	74726f70 206f7420 20746573 6d74656e     port to set netm
  14515c:	206b7361 72646461 2e737365 00000000     ask address.....
  14516c:	20656854 7774656e 206b726f 65746e69     The network inte
  14517c:	63616672 65642065 65636976 29732528     rface device(%s)
  14518c:	43484420 61632050 69626170 7974696c      DHCP capability
  14519c:	20736920 62616e65 202c656c 20746f6e      is enable, not 
  1451ac:	70707573 2074726f 20746573 6d74656e     support set netm
  1451bc:	206b7361 72646461 2e737365 00000000     ask address.....
  1451cc:	00007767 20656854 7774656e 206b726f     gw..The network 
  1451dc:	65746e69 63616672 65642065 65636976     interface device
  1451ec:	29732528 746f6e20 70757320 74726f70     (%s) not support
  1451fc:	206f7420 20746573 65746167 20796177      to set gateway 
  14520c:	72646461 2e737365 00000000 20656854     address.....The 
  14521c:	7774656e 206b726f 65746e69 63616672     network interfac
  14522c:	65642065 65636976 29732528 43484420     e device(%s) DHC
  14523c:	61632050 69626170 7974696c 20736920     P capability is 
  14524c:	62616e65 202c656c 20746f6e 70707573     enable, not supp
  14525c:	2074726f 20746573 65746167 20796177     ort set gateway 
  14526c:	72646461 2e737365 00000000 5f736e64     address.....dns_
  14527c:	76726573 00007265 20656854 626d756e     server..The numb
  14528c:	6f207265 4e442066 65732053 72657672     er of DNS server
  14529c:	64252873 65732029 78652074 64656563     s(%d) set exceed
  1452ac:	68742073 616d2065 756d6978 756e206d     s the maximum nu
  1452bc:	7265626d 29642528 0000002e 20656854     mber(%d)....The 
  1452cc:	7774656e 206b726f 65746e69 63616672     network interfac
  1452dc:	65642065 65636976 29732528 746f6e20     e device(%s) not
  1452ec:	70757320 74726f70 206f7420 20746573      support to set 
  1452fc:	20534e44 76726573 61207265 65726464     DNS server addre
  14530c:	002e7373 74617473 635f7375 626c6c61     ss..status_callb
  14531c:	006b6361 72646461 6c61635f 6361626c     ack.addr_callbac
  14532c:	0000006b                                k...

00145330 <__FUNCTION__.6920>:
  145330:	6474656e 725f7665 73696765 00726574     netdev_register.

00145340 <__FUNCTION__.6929>:
  145340:	6474656e 755f7665 6765726e 65747369     netdev_unregiste
  145350:	00000072                                r...

00145354 <__FUNCTION__.6975>:
  145354:	6474656e 665f7665 6c696d61 65675f79     netdev_family_ge
  145364:	00000074                                t...

00145368 <__FUNCTION__.6982>:
  145368:	6474656e 735f7665 755f7465 00000070     netdev_set_up...

00145378 <__FUNCTION__.6986>:
  145378:	6474656e 735f7665 645f7465 006e776f     netdev_set_down.

00145388 <__FUNCTION__.6991>:
  145388:	6474656e 645f7665 5f706368 62616e65     netdev_dhcp_enab
  145398:	0064656c                                led.

0014539c <__FUNCTION__.6996>:
  14539c:	6474656e 735f7665 695f7465 64646170     netdev_set_ipadd
  1453ac:	00000072                                r...

001453b0 <__FUNCTION__.7001>:
  1453b0:	6474656e 735f7665 6e5f7465 616d7465     netdev_set_netma
  1453c0:	00006b73                                sk..

001453c4 <__FUNCTION__.7006>:
  1453c4:	6474656e 735f7665 675f7465 00000077     netdev_set_gw...

001453d4 <__FUNCTION__.7012>:
  1453d4:	6474656e 735f7665 645f7465 735f736e     netdev_set_dns_s
  1453e4:	65767265 00000072                       erver...

001453ec <__FUNCTION__.7017>:
  1453ec:	6474656e 735f7665 735f7465 75746174     netdev_set_statu
  1453fc:	61635f73 61626c6c 00006b63              s_callback..

00145408 <__FUNCTION__.7022>:
  145408:	6474656e 735f7665 615f7465 5f726464     netdev_set_addr_
  145418:	6c6c6163 6b636162 00000000              callback....

00145424 <__FUNCTION__.7027>:
  145424:	6474656e 6c5f7665 6c5f776f 6c657665     netdev_low_level
  145434:	7465735f 6170695f 00726464              _set_ipaddr.

00145440 <__FUNCTION__.7032>:
  145440:	6474656e 6c5f7665 6c5f776f 6c657665     netdev_low_level
  145450:	7465735f 74656e5f 6b73616d 00000000     _set_netmask....

00145460 <__FUNCTION__.7037>:
  145460:	6474656e 6c5f7665 6c5f776f 6c657665     netdev_low_level
  145470:	7465735f 0077675f                       _set_gw.

00145478 <__FUNCTION__.7044>:
  145478:	6474656e 6c5f7665 6c5f776f 6c657665     netdev_low_level
  145488:	7465735f 736e645f 7265735f 00726576     _set_dns_server.
  145498:	00000030                                0...

0014549c <__FUNCTION__.5841>:
  14549c:	6474656e 695f7665 64613470 615f7264     netdev_ip4addr_a
  1454ac:	006e6f74 31335b1b 2f455b6d 2e6c6173     ton..[31m[E/sal.
  1454bc:	5d746b73 00000020 6d206f4e 726f6d65     skt] ...No memor
  1454cc:	6f662079 6f732072 74656b63 62617420     y for socket tab
  1454dc:	0a2e656c 00000000 6d305b1b 0000000a     le.......[0m....
  1454ec:	5f6c6173 6b636f6c 00000000 32335b1b     sal_lock.....[32
  1454fc:	2f495b6d 2e6c6173 5d746b73 00000020     m[I/sal.skt] ...
  14550c:	6b636f53 41207465 72747362 69746361     Socket Abstracti
  14551c:	4c206e6f 72657961 696e6920 6c616974     on Layer initial
  14552c:	20657a69 63637573 2e737365 00000000     ize success.....
  14553c:	6b6e696c 2d74722e 65726874 6f2e6461     link.rt-thread.o
  14554c:	00006772 20706553 32203831 00323230     rg..Sep 18 2022.
  14555c:	00007325 006e614a 00626546 0072614d     %s..Jan.Feb.Mar.
  14556c:	00727041 0079614d 006e754a 006c754a     Apr.May.Jun.Jul.
  14557c:	00677541 00706553 0074634f 00766f4e     Aug.Sep.Oct.Nov.
  14558c:	00636544 3e2d7473 6b636f73 5b737465     Dec.st->sockets[
  14559c:	6b636f73 2d5d7465 67616d3e 3d206369     socket]->magic =
  1455ac:	4153203d 4f535f4c 54454b43 47414d5f     = SAL_SOCKET_MAG
  1455bc:	00004349 00000030 20746f6e 646e6966     IC..0...not find
  1455cc:	74656e20 6b726f77 746e6920 61667265      network interfa
  1455dc:	64206563 63697665 79622065 6f727020     ce device by pro
  1455ec:	6f636f74 6166206c 796c696d 29642528     tocol family(%d)
  1455fc:	0000002e 6b636f73 203d2120 4e5f5452     ....sock != RT_N
  14560c:	004c4c55 2077654e 6b636f73 72207465     ULL.New socket r
  14561c:	73696765 65726574 61662064 64656c69     egistered failed
  14562c:	6572202c 6e727574 72726520 2520726f     , return error %
  14563c:	00002e64 656d616e 00000000 204c4153     d...name....SAL 
  14564c:	6b636f73 70207465 6f746f72 206c6f63     socket protocol 
  14565c:	696d6166 6920796c 7475706e 69616620     family input fai
  14566c:	2c64656c 74657220 206e7275 6f727265     led, return erro
  14567c:	64252072 0000002e                       r %d....

00145684 <__FUNCTION__.6969>:
  145684:	5f6c6173 5f746567 6b636f73 00007465     sal_get_socket..

00145694 <__FUNCTION__.6974>:
  145694:	5f6c6173 6b636f6c 00000000              sal_lock....

001456a0 <__FUNCTION__.7032>:
  1456a0:	6b636f73 645f7465 74656c65 00000065     socket_delete...

001456b0 <__FUNCTION__.7057>:
  1456b0:	5f6c6173 646e6962 00000000 6c207325     sal_bind....%s l
  1456c0:	20656e69 73206425 74646e65 7265206f     ine %d sendto er
  1456d0:	0a726f72 00000000                       ror.....

001456d8 <__func__.6506>:
  1456d8:	74656e75 6e65735f 006f7464 20736664     unet_sendto.dfs 
  1456e8:	65726c61 20796461 74696e69 00000a2e     already init....
  1456f8:	6f6c7366 00006b63 6f6c6466 00006b63     fslock..fdlock..
  145708:	00000030 20534644 6e206466 69207765     0...DFS fd new i
  145718:	61662073 64656c69 6f432021 20646c75     s failed! Could 
  145728:	20746f6e 6e756f66 6e612064 706d6520     not found an emp
  145738:	66207974 6e652064 2e797274 00000000     ty fd entry.....
  145748:	20746466 4e203d21 004c4c55 735f6466     fdt != NULL.fd_s
  145758:	2d746f6c 67616d3e 3d206369 4644203d     lot->magic == DF
  145768:	44465f53 47414d5f 00004349              S_FD_MAGIC..

00145774 <__FUNCTION__.6409>:
  145774:	5f736664 6b636f6c 00000000              dfs_lock....

00145780 <__FUNCTION__.6417>:
  145780:	5f736664 6c5f6466 006b636f              dfs_fd_lock.

0014578c <__FUNCTION__.6470>:
  14578c:	5f746466 725f6466 61656c65 00006573     fdt_fd_release..
  14579c:	5f736664 0072676d                       dfs_mgr.

001457a4 <_net_fops>:
  1457a4:	00109ea0 00109d1c 00109d90 00109e18     ................
  1457b4:	00109ef8 7069776c 73797320 206d6574     ....lwip system 
  1457c4:	65726c61 20796461 74696e69 00000a2e     already init....
  1457d4:	656e6f64 00000000 6c696146 74206465     done....Failed t
  1457e4:	7263206f 65746165 6d657320 6f687061     o create semapho
  1457f4:	00006572 76726573 73656369 49776c2f     re..services/lwI
  145804:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  145814:	2f637273 68637261 7379732f 6372615f     src/arch/sys_arc
  145824:	00632e68 69706374 626d5f70 6d69745f     h.c.tcpip_mb_tim
  145834:	00007265 006d6573 64257325 00000000     er..sem.%s%d....
  145844:	0000756d 786f626d 00000000 6d5f7472     mu..mbox....rt_m
  145854:	65725f62 72207663 72757465 2064656e     b_recv returned 
  145864:	68746977 72726520 0021726f 3d212074     with error!.t !=
  145874:	5f545220 4c4c554e 00000000 7373410a      RT_NULL.....Ass
  145884:	69747265 203a6e6f 69206425 7325206e     ertion: %d in %s
  145894:	0000000a 00000030                       ....0...

0014589c <__FUNCTION__.7531>:
  14589c:	5f737973 65726874 6e5f6461 00007765     sys_thread_new..

001458ac <__FUNCTION__.7543>:
  1458ac:	5f737973 68637261 7373615f 00747265     sys_arch_assert.
  1458bc:	65657266 20676e69 6e6e6f63 74697720     freeing conn wit
  1458cc:	74756f68 65726620 676e6965 62637020     hout freeing pcb
  1458dc:	00000000 76726573 73656369 49776c2f     ....services/lwI
  1458ec:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  1458fc:	2f637273 2f697061 5f697061 2e62696c     src/api/api_lib.
  14590c:	00000063 6e6e6f63 73616820 206f6e20     c...conn has no 
  14591c:	76636572 786f626d 00000000 6e6e6f63     recvmbox....conn
  14592c:	63613e2d 74706563 786f626d 6f687320     ->acceptmbox sho
  14593c:	6e646c75 65207427 74736978 00000000     uldn't exist....
  14594c:	6e6e6f63 73616820 206f6e20 635f706f     conn has no op_c
  14595c:	6c706d6f 64657465 00000000 6374656e     ompleted....netc
  14596c:	5f6e6e6f 61746567 3a726464 766e6920     onn_getaddr: inv
  14597c:	64696c61 6e6f6320 0000006e 6374656e     alid conn...netc
  14598c:	5f6e6e6f 61746567 3a726464 766e6920     onn_getaddr: inv
  14599c:	64696c61 64646120 00000072 6374656e     alid addr...netc
  1459ac:	5f6e6e6f 61746567 3a726464 766e6920     onn_getaddr: inv
  1459bc:	64696c61 726f7020 00000074 6374656e     alid port...netc
  1459cc:	5f6e6e6f 646e6962 6e69203a 696c6176     onn_bind: invali
  1459dc:	6f632064 00006e6e 6374656e 5f6e6e6f     d conn..netconn_
  1459ec:	6e6e6f63 3a746365 766e6920 64696c61     connect: invalid
  1459fc:	6e6f6320 0000006e 6374656e 5f6e6e6f      conn...netconn_
  145a0c:	63736964 656e6e6f 203a7463 61766e69     disconnect: inva
  145a1c:	2064696c 6e6e6f63 00000000 6374656e     lid conn....netc
  145a2c:	5f6e6e6f 7473696c 203a6e65 61766e69     onn_listen: inva
  145a3c:	2064696c 6e6e6f63 00000000 6374656e     lid conn....netc
  145a4c:	5f6e6e6f 65636361 203a7470 61766e69     onn_accept: inva
  145a5c:	2064696c 6e696f70 00726574 6374656e     lid pointer.netc
  145a6c:	5f6e6e6f 65636361 203a7470 61766e69     onn_accept: inva
  145a7c:	2064696c 6e6e6f63 00000000 6374656e     lid conn....netc
  145a8c:	5f6e6e6f 76636572 6e69203a 696c6176     onn_recv: invali
  145a9c:	6f702064 65746e69 00000072 6374656e     d pointer...netc
  145aac:	5f6e6e6f 76636572 6e69203a 696c6176     onn_recv: invali
  145abc:	6f632064 00006e6e 6374656e 5f6e6e6f     d conn..netconn_
  145acc:	76636572 6e69203a 696c6176 65722064     recv: invalid re
  145adc:	626d7663 0000786f 20667562 4e203d21     cvmbox..buf != N
  145aec:	004c4c55 3d212070 4c554e20 0000004c     ULL.p != NULL...
  145afc:	6374656e 5f6e6e6f 646e6573 6e69203a     netconn_send: in
  145b0c:	696c6176 6f632064 00006e6e 6374656e     valid conn..netc
  145b1c:	5f6e6e6f 74697277 69203a65 6c61766e     onn_write: inval
  145b2c:	63206469 006e6e6f 6374656e 5f6e6e6f     id conn.netconn_
  145b3c:	74697277 69203a65 6c61766e 63206469     write: invalid c
  145b4c:	2d6e6e6f 7079743e 00000065 6374656e     onn->type...netc
  145b5c:	5f6e6e6f 736f6c63 69203a65 6c61766e     onn_close: inval
  145b6c:	63206469 006e6e6f 6374656e 5f6e6e6f     id conn.netconn_
  145b7c:	6e696f6a 61656c5f 675f6576 70756f72     join_leave_group
  145b8c:	6e69203a 696c6176 6f632064 00006e6e     : invalid conn..
  145b9c:	6374656e 5f6e6e6f 68746567 6274736f     netconn_gethostb
  145bac:	6d616e79 69203a65 6c61766e 6e206469     yname: invalid n
  145bbc:	00656d61 6374656e 5f6e6e6f 68746567     ame.netconn_geth
  145bcc:	6274736f 6d616e79 69203a65 6c61766e     ostbyname: inval
  145bdc:	61206469 00726464 76726573 73656369     id addr.services
  145bec:	49776c2f 74694b50 69776c2f 2e322d70     /lwIPKit/lwip-2.
  145bfc:	2f322e30 2f637273 2f697061 5f697061     0.2/src/api/api_
  145c0c:	2e67736d 00000063 76636572 7064755f     msg.c...recv_udp
  145c1c:	73756d20 61682074 61206576 62637020      must have a pcb
  145c2c:	67726120 6e656d75 00000074 76636572      argument...recv
  145c3c:	7064755f 73756d20 61682074 61206576     _udp must have a
  145c4c:	7261206e 656d7567 0000746e 76636572     n argument..recv
  145c5c:	7064755f 6572203a 66207663 7720726f     _udp: recv for w
  145c6c:	676e6f72 62637020 00000021 76636572     rong pcb!...recv
  145c7c:	7063745f 73756d20 61682074 61206576     _tcp must have a
  145c8c:	62637020 67726120 6e656d75 00000074      pcb argument...
  145c9c:	76636572 7063745f 73756d20 61682074     recv_tcp must ha
  145cac:	61206576 7261206e 656d7567 0000746e     ve an argument..
  145cbc:	76636572 7063745f 6572203a 66207663     recv_tcp: recv f
  145ccc:	7720726f 676e6f72 62637020 00000021     or wrong pcb!...
  145cdc:	6e6e6f63 203d2120 4c4c554e 00000000     conn != NULL....
  145cec:	6e6e6f63 75633e2d 6e657272 736d5f74     conn->current_ms
  145cfc:	3d212067 4c554e20 0000004c 76616e69     g != NULL...inav
  145d0c:	2064696c 635f706f 6c706d6f 64657465     lid op_completed
  145d1c:	6d65735f 00000000 6e6e6f63 75633e2d     _sem....conn->cu
  145d2c:	6e657272 736d5f74 3d3d2067 4c554e20     rrent_msg == NUL
  145d3c:	0000004c 5f626370 3a77656e 62637020     L...pcb_new: pcb
  145d4c:	726c6120 79646165 6c6c6120 7461636f      already allocat
  145d5c:	00006465 6374656e 5f6e6e6f 6f6c6c61     ed..netconn_allo
  145d6c:	75203a63 6665646e 64656e69 74656e20     c: undefined net
  145d7c:	6e6e6f63 7079745f 00000065 20424350     conn_type...PCB 
  145d8c:	7473756d 20656220 6c616564 61636f6c     must be dealloca
  145d9c:	20646574 7374756f 20656469 73696874     ted outside this
  145dac:	6e756620 6f697463 0000006e 76636572      function...recv
  145dbc:	786f626d 73756d20 65622074 61656420     mbox must be dea
  145dcc:	636f6c6c 64657461 66656220 2065726f     llocated before 
  145ddc:	6c6c6163 20676e69 73696874 6e756620     calling this fun
  145dec:	6f697463 0000006e 65636361 626d7470     ction...acceptmb
  145dfc:	6d20786f 20747375 64206562 6c6c6165     ox must be deall
  145e0c:	7461636f 62206465 726f6665 61632065     ocated before ca
  145e1c:	6e696c6c 68742067 66207369 74636e75     lling this funct
  145e2c:	006e6f69 61766e69 2064696c 6e6e6f63     ion.invalid conn
  145e3c:	00000000 73696874 20736920 20726f66     ....this is for 
  145e4c:	20706374 6374656e 736e6e6f 6c6e6f20     tcp netconns onl
  145e5c:	00000079 6e6e6f63 73756d20 65622074     y...conn must be
  145e6c:	206e6920 74617473 454e2065 4e4f4354      in state NETCON
  145e7c:	4c435f4e 0045534f 20626370 65726c61     N_CLOSE.pcb alre
  145e8c:	20796461 736f6c63 00006465 736f6c43     ady closed..Clos
  145e9c:	20676e69 696c2061 6e657473 62637020     ing a listen pcb
  145eac:	79616d20 746f6e20 69616620 0000216c      may not fail!..
  145ebc:	20727265 45203d21 4f5f5252 0000004b     err != ERR_OK...
  145ecc:	6374656e 206e6e6f 74617473 72652065     netconn state er
  145edc:	00726f72 636f6c62 676e696b 6e6f6320     ror.blocking con
  145eec:	7463656e 206e6920 676f7270 73736572     nect in progress
  145efc:	00000000 65726c61 20796461 74697277     ....already writ
  145f0c:	20676e69 6320726f 69736f6c 0000676e     ing or closing..
  145f1c:	74617473 00002165 6e6e6f63 74733e2d     state!..conn->st
  145f2c:	20657461 4e203d3d 4f435445 435f4e4e     ate == NETCONN_C
  145f3c:	454e4e4f 00005443 6e6f6328 633e2d6e     ONNECT..(conn->c
  145f4c:	65727275 6d5f746e 21206773 554e203d     urrent_msg != NU
  145f5c:	20294c4c 63207c7c 2d6e6e6f 5f6e693e     LL) || conn->in_
  145f6c:	5f6e6f6e 636f6c62 676e696b 6e6f635f     non_blocking_con
  145f7c:	7463656e 00000000 636f6c62 676e696b     nect....blocking
  145f8c:	6e6f6320 7463656e 61747320 65206574      connect state e
  145f9c:	726f7272 00000000 61766e49 2064696c     rror....Invalid 
  145fac:	6374656e 206e6e6f 65707974 00000000     netconn type....
  145fbc:	6e6e6f63 74733e2d 20657461 4e203d3d     conn->state == N
  145fcc:	4f435445 575f4e4e 45544952 00000000     ETCONN_WRITE....
  145fdc:	6e6e6f63 63703e2d 63742e62 3d212070     conn->pcb.tcp !=
  145fec:	4c554e20 0000004c 6e6e6f63 72773e2d      NULL...conn->wr
  145ffc:	5f657469 7366666f 3c207465 6e6f6320     ite_offset < con
  14600c:	633e2d6e 65727275 6d5f746e 3e2d6773     n->current_msg->
  14601c:	2e67736d 656c2e77 0000006e 7069776c     msg.w.len...lwip
  14602c:	74656e5f 6e6e6f63 5f6f645f 74697277     _netconn_do_writ
  14603c:	726f6d65 69203a65 6c61766e 6c206469     emore: invalid l
  14604c:	74676e65 00002168 2d67736d 67736d3e     ength!..msg->msg
  14605c:	6c2e772e 21206e65 0030203d 61766e69     .w.len != 0.inva
  14606c:	2064696c 6374656e 5f6e6e6f 65707974     lid netconn_type
  14607c:	00000000                                ....

00146080 <err_to_errno_table>:
  146080:	00000000 0000000c 00000069 0000000b     ........i.......
  146090:	00000071 00000073 00000016 0000000b     q...s...........
  1460a0:	00000062 00000072 0000006a 0000006b     b...r...j...k...
  1460b0:	ffffffff 00000067 00000068 0000006b     ....g...h...k...
  1460c0:	00000005 76726573 73656369 49776c2f     ....services/lwI
  1460d0:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  1460e0:	2f637273 2f697061 6274656e 632e6675     src/api/netbuf.c
  1460f0:	00000000 6274656e 615f6675 636f6c6c     ....netbuf_alloc
  146100:	6e69203a 696c6176 75622064 00000066     : invalid buf...
  146110:	63656863 6874206b 66207461 74737269     check that first
  146120:	75627020 61632066 6f68206e 7320646c      pbuf can hold s
  146130:	00657a69 6274656e 665f6675 3a656572     ize.netbuf_free:
  146140:	766e6920 64696c61 66756220 00000000      invalid buf....
  146150:	6274656e 725f6675 203a6665 61766e69     netbuf_ref: inva
  146160:	2064696c 00667562 6274656e 635f6675     lid buf.netbuf_c
  146170:	6e696168 6e69203a 696c6176 65682064     hain: invalid he
  146180:	00006461 6274656e 635f6675 6e696168     ad..netbuf_chain
  146190:	6e69203a 696c6176 61742064 00006c69     : invalid tail..
  1461a0:	6274656e 645f6675 3a617461 766e6920     netbuf_data: inv
  1461b0:	64696c61 66756220 00000000 6274656e     alid buf....netb
  1461c0:	645f6675 3a617461 766e6920 64696c61     uf_data: invalid
  1461d0:	74616420 72747061 00000000 6274656e      dataptr....netb
  1461e0:	645f6675 3a617461 766e6920 64696c61     uf_data: invalid
  1461f0:	6e656c20 00000000 6274656e 6e5f6675      len....netbuf_n
  146200:	3a747865 766e6920 64696c61 66756220     ext: invalid buf
  146210:	00000000 6274656e 665f6675 74737269     ....netbuf_first
  146220:	6e69203a 696c6176 75622064 00000066     : invalid buf...
  146230:	656d616e 206e656c 74207369 6c206f6f     namelen is too l
  146240:	00676e6f 76726573 73656369 49776c2f     ong.services/lwI
  146250:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  146260:	2f637273 2f697061 6474656e 00632e62     src/api/netdb.c.
  146270:	61746f74 69735f6c 3c20657a 454e203d     total_size <= NE
  146280:	5f424454 4d454c45 5a49535f 70203a45     TDB_ELEM_SIZE: p
  146290:	7361656c 65722065 74726f70 69687420     lease report thi
  1462a0:	00002173 6377656e 206e6e6f 4e203d21     s!..newconn != N
  1462b0:	004c4c55 76726573 73656369 49776c2f     ULL.services/lwI
  1462c0:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  1462d0:	2f637273 2f697061 6b636f73 2e737465     src/api/sockets.
  1462e0:	00000063 61766e69 2064696c 6b636f73     c...invalid sock
  1462f0:	69207465 7865646e 00000000 72646461     et index....addr
  146300:	6c617620 62206469 61207475 6c726464      valid but addrl
  146310:	4e206e65 004c4c55 7069776c 6e69625f     en NULL.lwip_bin
  146320:	69203a64 6c61766e 61206469 65726464     d: invalid addre
  146330:	00007373 6b636f73 616c3e2d 61647473     ss..sock->lastda
  146340:	3d206174 554e203d 00004c4c 7069776c     ta == NULL..lwip
  146350:	6e6f635f 7463656e 6e69203a 696c6176     _connect: invali
  146360:	64612064 73657264 00000073 20667562     d address...buf 
  146370:	4e203d21 004c4c55 61766e69 2064696c     != NULL.invalid 
  146380:	79706f63 2c6e656c 6e656c20 756f7720     copylen, len wou
  146390:	7520646c 7265646e 776f6c66 00000000     ld underflow....
  1463a0:	7069776c 6e65735f 67736d64 6e69203a     lwip_sendmsg: in
  1463b0:	696c6176 736d2064 72646867 00000000     valid msghdr....
  1463c0:	7069776c 6e65735f 67736d64 6e69203a     lwip_sendmsg: in
  1463d0:	696c6176 736d2064 72646867 766f6920     valid msghdr iov
  1463e0:	00000000 7069776c 6e65735f 67736d64     ....lwip_sendmsg
  1463f0:	6e69203a 696c6176 736d2064 72646867     : invalid msghdr
  146400:	6d616e20 00000065 5f766f69 206e656c      name...iov_len 
  146410:	3175203c 00745f36 7069776c 6e65735f     < u16_t.lwip_sen
  146420:	3a6f7464 7a697320 756d2065 66207473     dto: size must f
  146430:	69207469 3175206e 00745f36 7069776c     it in u16_t.lwip
  146440:	6e65735f 3a6f7464 766e6920 64696c61     _sendto: invalid
  146450:	64646120 73736572 00000000 6165726e      address....nrea
  146460:	3e207964 0030203d 6b636f73 65733e2d     dy >= 0.sock->se
  146470:	7463656c 6961775f 676e6974 30203e20     lect_waiting > 0
  146480:	00000000 656c6573 635f7463 72702e62     ....select_cb.pr
  146490:	3d207665 554e203d 00004c4c 656c6573     ev == NULL..sele
  1464a0:	635f7463 72702e62 21207665 554e203d     ct_cb.prev != NU
  1464b0:	00004c4c 6e6b6e75 206e776f 6e657665     LL..unknown even
  1464c0:	00000074 69706374 68745f70 64616572     t...tcpip_thread
  1464d0:	6e69203a 696c6176 656d2064 67617373     : invalid messag
  1464e0:	00000065 76726573 73656369 49776c2f     e...services/lwI
  1464f0:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  146500:	2f637273 2f697061 69706374 00632e70     src/api/tcpip.c.
  146510:	61766e49 2064696c 786f626d 00000000     Invalid mbox....
  146520:	6c696166 74206465 7263206f 65746165     failed to create
  146530:	70637420 745f7069 61657268 626d2064      tcpip_thread mb
  146540:	0000786f 6c696166 74206465 7263206f     ox..failed to cr
  146550:	65746165 636f6c20 63745f6b 5f706970     eate lock_tcpip_
  146560:	65726f63 00000000 69706374 00000070     core....tcpip...
  146570:	7778797a 73747576 6f707172 6b6c6d6e     zyxwvutsrqponmlk
  146580:	6768696a 63646566 38396162 34353637     jihgfedcba987654
  146590:	30313233 34333231 38373635 63626139     3210123456789abc
  1465a0:	67666564 6b6a6968 6f6e6d6c 73727170     defghijklmnopqrs
  1465b0:	77767574 007a7978                       tuvwxyz.

001465b8 <dns_mquery_v4group>:
  1465b8:	fb0000e0 20736e64 76726573 6f207265     ....dns server o
  1465c8:	6f207475 72612066 00796172 76726573     ut of array.serv
  1465d8:	73656369 49776c2f 74694b50 69776c2f     ices/lwIPKit/lwi
  1465e8:	2e322d70 2f322e30 2f637273 65726f63     p-2.0.2/src/core
  1465f8:	736e642f 0000632e 61727261 6e692079     /dns.c..array in
  146608:	20786564 2074756f 6220666f 646e756f     dex out of bound
  146618:	00000073 6e6b6e75 206e776f 5f736e64     s...unknown dns_
  146628:	6c626174 6e652065 20797274 74617473     table entry stat
  146638:	00003a65 656c6564 6d206574 00000065     e:..delete me...
  146648:	76726573 73656369 49776c2f 74694b50     services/lwIPKit
  146658:	69776c2f 2e322d70 2f322e30 2f637273     /lwip-2.0.2/src/
  146668:	65726f63 656e692f 68635f74 6d75736b     core/inet_chksum
  146678:	0000632e 5f574152 00424350              .c..RAW_PCB.

00146684 <memp_RAW_PCB>:
  146684:	0014667c 0014e0b4 0004001c 0018b508     |f..............
  146694:	0014e0c4 5f504455 00424350              ....UDP_PCB.

001466a0 <memp_UDP_PCB>:
  1466a0:	00146698 0014e0c8 00080028 00573f9c     .f......(....?W.
  1466b0:	0014e0d8 5f504354 00424350              ....TCP_PCB.

001466bc <memp_TCP_PCB>:
  1466bc:	001466b4 0014e0dc 000800a4 00574788     .f...........GW.
  1466cc:	0014e0ec 5f504354 5f424350 5453494c     ....TCP_PCB_LIST
  1466dc:	00004e45                                EN..

001466e0 <memp_TCP_PCB_LISTEN>:
  1466e0:	001466d0 0014e0f0 00080020 00573a3c     .f...... ...<:W.
  1466f0:	0014e100 5f504354 00474553              ....TCP_SEG.

001466fc <memp_TCP_SEG>:
  1466fc:	001466f4 0014e104 20000010 0018b62c     .f......... ,...
  14670c:	0014e114 53414552 54414453 00000041     ....REASSDATA...

0014671c <memp_REASSDATA>:
  14671c:	00146710 0014e118 000a0020 00573ca0     .g...... ....<W.
  14672c:	0014e128 47415246 5542505f 00000046     (...FRAG_PBUF...

0014673c <memp_FRAG_PBUF>:
  14673c:	00146730 0014e12c 000f0018 00527634     0g..,.......4vR.
  14674c:	0014e13c 4254454e 00004655              <...NETBUF..

00146758 <memp_NETBUF>:
  146758:	00146750 0014e140 08000010 0014eee4     Pg..@...........
  146768:	0014e150 4354454e 004e4e4f              P...NETCONN.

00146774 <memp_NETCONN>:
  146774:	0014676c 0014e154 00080040 00574240     lg..T...@...@BW.
  146784:	0014e164 49504354 534d5f50 50415f47     d...TCPIP_MSG_AP
  146794:	00000049                                I...

00146798 <memp_TCPIP_MSG_API>:
  146798:	00146788 0014e168 08000010 00527a34     .g..h.......4zR.
  1467a8:	0014e178 49504354 534d5f50 4e495f47     x...TCPIP_MSG_IN
  1467b8:	00544b50                                PKT.

001467bc <memp_TCPIP_MSG_INPKT>:
  1467bc:	001467ac 0014e17c 08000010 0016cee8     .g..|...........
  1467cc:	0014e18c 5f505241 55455551 00000045     ....ARP_QUEUE...

001467dc <memp_ARP_QUEUE>:
  1467dc:	001467d0 0014e190 001e0008 0018aeec     .g..............
  1467ec:	0014e1a0 504d4749 4f52475f 00005055     ....IGMP_GROUP..

001467fc <memp_IGMP_GROUP>:
  1467fc:	001467f0 0014e1a4 00080010 005745a4     .g...........EW.
  14680c:	0014e1b4 5f535953 454d4954 0054554f     ....SYS_TIMEOUT.

0014681c <memp_SYS_TIMEOUT>:
  14681c:	00146810 0014e1b8 00070010 00574e0c     .h...........NW.
  14682c:	0014e1c8 4454454e 00000042              ....NETDB...

00146838 <memp_NETDB>:
  146838:	00146830 0014e1cc 00010134 0014ed80     0h......4.......
  146848:	0014e1dc 46554250 4645525f 4d4f522f     ....PBUF_REF/ROM
  146858:	00000000                                ....

0014685c <memp_PBUF>:
  14685c:	0014684c 0014e1e0 08000030 00545a38     Lh......0...8ZT.
  14686c:	0014e1f0 46554250 4f4f505f 0000004c     ....PBUF_POOL...

0014687c <memp_PBUF_POOL>:
  14687c:	00146870 0014e1f4 0800061c 00203630     ph..........06 .
  14688c:	0014e204                                ....

00146890 <memp_pools>:
  146890:	00146684 001466a0 001466bc 001466e0     .f...f...f...f..
  1468a0:	001466fc 0014671c 0014673c 00146758     .f...g..<g..Xg..
  1468b0:	00146774 00146798 001467bc 001467dc     tg...g...g...g..
  1468c0:	001467fc 0014681c 00146838 0014685c     .g...h..8h..\h..
  1468d0:	0014687c 76726573 73656369 49776c2f     |h..services/lwI
  1468e0:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  1468f0:	2f637273 65726f63 6d656d2f 00632e70     src/core/memp.c.
  146900:	65746564 64657463 6d656d20 766f2070     detected memp ov
  146910:	6c667265 6920776f 6f70206e 00206c6f     erflow in pool .
	...
  146980:	65746564 64657463 6d656d20 6e752070     detected memp un
  146990:	66726564 20776f6c 70206e69 206c6f6f     derflow in pool 
	...
  146a00:	706d656d 6c616d5f 3a636f6c 6d656d20     memp_malloc: mem
  146a10:	72702070 7265706f 6120796c 6e67696c     p properly align
  146a20:	00006465 61766e69 2064696c 6c6f6f70     ed..invalid pool
  146a30:	73656420 00000063 706d656d 6c616d5f      desc...memp_mal
  146a40:	3a636f6c 70797420 203c2065 504d454d     loc: type < MEMP
  146a50:	58414d5f 00000000 706d656d 6572665f     _MAX....memp_fre
  146a60:	6d203a65 70206d65 65706f72 20796c72     e: mem properly 
  146a70:	67696c61 0064656e 706d656d 6572665f     aligned.memp_fre
  146a80:	74203a65 20657079 454d203c 4d5f504d     e: type < MEMP_M
  146a90:	00005841 69206f4e 2074696e 636e7566     AX..No init func
  146aa0:	6e6f6974 76696720 00006e65 76726573     tion given..serv
  146ab0:	73656369 49776c2f 74694b50 69776c2f     ices/lwIPKit/lwi
  146ac0:	2e322d70 2f322e30 2f637273 65726f63     p-2.0.2/src/core
  146ad0:	74656e2f 632e6669 00000000 66206669     /netif.c....if f
  146ae0:	74737269 203d2120 4c4c554e 616c202c     irst != NULL, la
  146af0:	6d207473 20747375 6f736c61 20656220     st must also be 
  146b00:	4e203d21 004c4c55 75676f62 62702073     != NULL.bogus pb
  146b10:	203a6675 206e656c 74203d21 6c5f746f     uf: len != tot_l
  146b20:	62206e65 6e207475 20747865 4e203d3d     en but next == N
  146b30:	214c4c55 00000000 756f6873 6e20646c     ULL!....should n
  146b40:	6220746f 756e2065 73206c6c 65636e69     ot be null since
  146b50:	72696620 21207473 616c203d 00217473      first != last!.
  146b60:	66756270 6c6c615f 203a636f 20646162     pbuf_alloc: bad 
  146b70:	66756270 79616c20 00007265 76726573     pbuf layer..serv
  146b80:	73656369 49776c2f 74694b50 69776c2f     ices/lwIPKit/lwi
  146b90:	2e322d70 2f322e30 2f637273 65726f63     p-2.0.2/src/core
  146ba0:	7562702f 00632e66 66756270 6c6c615f     /pbuf.c.pbuf_all
  146bb0:	203a636f 66756270 3e2d7020 6c796170     oc: pbuf p->payl
  146bc0:	2064616f 706f7270 796c7265 696c6120     oad properly ali
  146bd0:	64656e67 00000000 63656863 2d70206b     gned....check p-
  146be0:	7961703e 64616f6c 70202b20 656c3e2d     >payload + p->le
  146bf0:	6f64206e 6e207365 6f20746f 66726576     n does not overf
  146c00:	20776f6c 66756270 00000000 46554250     low pbuf....PBUF
  146c10:	4f4f505f 55425f4c 5a495346 756d2045     _POOL_BUFSIZE mu
  146c20:	62207473 69622065 72656767 61687420     st be bigger tha
  146c30:	454d206e 4c415f4d 4d4e4749 00544e45     n MEM_ALIGNMENT.
  146c40:	5f6d6572 206e656c 616d203c 31755f78     rem_len < max_u1
  146c50:	00745f36 66756270 6c6c615f 203a636f     6_t.pbuf_alloc: 
  146c60:	66756270 3e2d7120 6c796170 2064616f     pbuf q->payload 
  146c70:	706f7270 796c7265 696c6120 64656e67     properly aligned
  146c80:	00000000 66756270 6c6c615f 203a636f     ....pbuf_alloc: 
  146c90:	66756270 61703e2d 616f6c79 72702064     pbuf->payload pr
  146ca0:	7265706f 6120796c 6e67696c 00006465     operly aligned..
  146cb0:	66756270 6c6c615f 203a636f 6f727265     pbuf_alloc: erro
  146cc0:	756f656e 79742073 00006570 66756270     neous type..pbuf
  146cd0:	6c6c615f 6465636f 7375635f 3a6d6f74     _alloced_custom:
  146ce0:	64616220 75627020 616c2066 00726579      bad pbuf layer.
  146cf0:	66756270 6165725f 636f6c6c 2070203a     pbuf_realloc: p 
  146d00:	4e203d21 004c4c55 66756270 6165725f     != NULL.pbuf_rea
  146d10:	636f6c6c 6173203a 7020656e 79743e2d     lloc: sane p->ty
  146d20:	00006570 776f7267 6d203c20 755f7861     pe..grow < max_u
  146d30:	745f3631 00000000 66756270 6165725f     16_t....pbuf_rea
  146d40:	636f6c6c 2071203a 4e203d21 004c4c55     lloc: q != NULL.
  146d50:	5f6d656d 6d697274 74657220 656e7275     mem_trim returne
  146d60:	20712064 4e203d3d 004c4c55 3d212070     d q == NULL.p !=
  146d70:	4c554e20 0000004c 72636e69 6e656d65      NULL...incremen
  146d80:	616d5f74 74696e67 20656475 70203d3c     t_magnitude <= p
  146d90:	656c3e2d 0000006e 20646162 66756270     ->len...bad pbuf
  146da0:	70797420 00000065 66756270 6572665f      type...pbuf_fre
  146db0:	73203a65 20656e61 65707974 00000000     e: sane type....
  146dc0:	66756270 6572665f 70203a65 65723e2d     pbuf_free: p->re
  146dd0:	203e2066 00000030 3e2d6370 74737563     f > 0...pc->cust
  146de0:	665f6d6f 5f656572 636e7566 6e6f6974     om_free_function
  146df0:	203d2120 4c4c554e 00000000 66756270      != NULL....pbuf
  146e00:	66657220 65766f20 6f6c6672 00000077      ref overflow...
  146e10:	21206828 554e203d 20294c4c 28202626     (h != NULL) && (
  146e20:	3d212074 4c554e20 2820294c 676f7270     t != NULL) (prog
  146e30:	6d6d6172 76207265 616c6f69 20736574     rammer violates 
  146e40:	29495041 00000000 743e2d70 6c5f746f     API)....p->tot_l
  146e50:	3d206e65 2d70203d 6e656c3e 666f2820     en == p->len (of
  146e60:	73616c20 62702074 69206675 6863206e      last pbuf in ch
  146e70:	296e6961 00000000 6e3e2d70 20747865     ain)....p->next 
  146e80:	4e203d3d 004c4c55 743e2d70 6c5f746f     == NULL.p->tot_l
  146e90:	3d206e65 2d70203d 6e656c3e 71202b20     en == p->len + q
  146ea0:	6f743e2d 656c5f74 0000006e 743e2d70     ->tot_len...p->t
  146eb0:	6c5f746f 3d206e65 2d70203d 6e656c3e     ot_len == p->len
  146ec0:	00000000 66756270 706f635f 74203a79     ....pbuf_copy: t
  146ed0:	65677261 6f6e2074 69622074 6e652067     arget not big en
  146ee0:	6867756f 206f7420 646c6f68 756f7320     ough to hold sou
  146ef0:	00656372 7366666f 745f7465 3d3c206f     rce.offset_to <=
  146f00:	745f7020 6c3e2d6f 00006e65 7366666f      p_to->len..offs
  146f10:	665f7465 206d6f72 70203d3c 6f72665f     et_from <= p_fro
  146f20:	6c3e2d6d 00006e65 6f745f70 203d2120     m->len..p_to != 
  146f30:	4c4c554e 00000000 66756270 706f635f     NULL....pbuf_cop
  146f40:	20292879 73656f64 746f6e20 6c6c6120     y() does not all
  146f50:	7020776f 656b6361 75712074 73657565     ow packet queues
  146f60:	00000021 66756270 706f635f 61705f79     !...pbuf_copy_pa
  146f70:	61697472 69203a6c 6c61766e 62206469     rtial: invalid b
  146f80:	00006675 66756270 706f635f 61705f79     uf..pbuf_copy_pa
  146f90:	61697472 69203a6c 6c61766e 64206469     rtial: invalid d
  146fa0:	70617461 00007274 66756270 6b61745f     ataptr..pbuf_tak
  146fb0:	69203a65 6c61766e 62206469 00006675     e: invalid buf..
  146fc0:	66756270 6b61745f 69203a65 6c61766e     pbuf_take: inval
  146fd0:	64206469 70617461 00007274 66756270     id dataptr..pbuf
  146fe0:	6b61745f 62203a65 6e206675 6c20746f     _take: buf not l
  146ff0:	65677261 6f6e6520 00686775 66756270     arge enough.pbuf
  147000:	6b61745f 69203a65 6c61766e 70206469     _take: invalid p
  147010:	00667562 20646964 20746f6e 79706f63     buf.did not copy
  147020:	6c6c6120 74616420 00000061 66756270      all data...pbuf
  147030:	706f635f 61662079 64656c69 00000000     _copy failed....
  147040:	20776172 20626370 76636572 6c616320     raw pcb recv cal
  147050:	6361626c 6c61206b 65726574 62702064     lback altered pb
  147060:	70206675 6f6c7961 70206461 746e696f     uf payload point
  147070:	77207265 6f687469 65207475 6e697461     er without eatin
  147080:	61702067 74656b63 00000000 76726573     g packet....serv
  147090:	73656369 49776c2f 74694b50 69776c2f     ices/lwIPKit/lwi
  1470a0:	2e322d70 2f322e30 2f637273 65726f63     p-2.0.2/src/core
  1470b0:	7761722f 0000632e 276e6143 65722074     /raw.c..Can't re
  1470c0:	726f7473 65682065 72656461 20657720     store header we 
  1470d0:	7473756a 6d657220 6465766f 00000021     just removed!...
  1470e0:	0a73250a 00000009 74696d78 6825203a     .%s.....xmit: %h
  1470f0:	00090a75 76636572 6825203a 00090a75     u...recv: %hu...
  147100:	203a7766 0a756825 00000009 706f7264     fw: %hu.....drop
  147110:	6825203a 00090a75 656b6863 203a7272     : %hu...chkerr: 
  147120:	0a756825 00000009 656e656c 203a7272     %hu.....lenerr: 
  147130:	0a756825 00000009 656d656d 203a7272     %hu.....memerr: 
  147140:	0a756825 00000009 72657472 25203a72     %hu.....rterr: %
  147150:	090a7568 00000000 746f7270 3a727265     hu......proterr:
  147160:	75682520 0000090a 6574706f 203a7272      %hu....opterr: 
  147170:	0a756825 00000009 3a727265 75682520     %hu.....err: %hu
  147180:	0000090a 68636163 74696865 6825203a     ....cachehit: %h
  147190:	00000a75 765f7872 25203a31 090a7568     u...rx_v1: %hu..
  1471a0:	00000000 675f7872 70756f72 6825203a     ....rx_group: %h
  1471b0:	00090a75 675f7872 72656e65 203a6c61     u...rx_general: 
  1471c0:	0a756825 00000009 725f7872 726f7065     %hu.....rx_repor
  1471d0:	25203a74 090a7568 00000000 6a5f7874     t: %hu......tx_j
  1471e0:	3a6e696f 75682520 0000090a 6c5f7874     oin: %hu....tx_l
  1471f0:	65766165 6825203a 00090a75 725f7874     eave: %hu...tx_r
  147200:	726f7065 25203a74 000a7568 4d454d0a     eport: %hu...MEM
  147210:	0a732520 00000009 69617661 25203a6c      %s.....avail: %
  147220:	090a756c 00000000 64657375 6c25203a     lu......used: %l
  147230:	00090a75 3a78616d 756c2520 0000090a     u...max: %lu....
  147240:	3a727265 756c2520 0000000a 5359530a     err: %lu.....SYS
  147250:	0000090a 2e6d6573 64657375 2520203a     ....sem.used:  %
  147260:	090a756c 00000000 2e6d6573 3a78616d     lu......sem.max:
  147270:	25202020 090a756c 00000000 2e6d6573        %lu......sem.
  147280:	3a727265 25202020 090a756c 00000000     err:   %lu......
  147290:	6574756d 73752e78 203a6465 0a756c25     mutex.used: %lu.
  1472a0:	00000009 6574756d 616d2e78 20203a78     ....mutex.max:  
  1472b0:	0a756c25 00000009 6574756d 72652e78     %lu.....mutex.er
  1472c0:	20203a72 0a756c25 00000009 786f626d     r:  %lu.....mbox
  1472d0:	6573752e 20203a64 0a756c25 00000009     .used:  %lu.....
  1472e0:	786f626d 78616d2e 2020203a 0a756c25     mbox.max:   %lu.
  1472f0:	00000009 786f626d 7272652e 2020203a     ....mbox.err:   
  147300:	0a756c25 00000000 4b4e494c 00000000     %lu.....LINK....
  147310:	41485445 00005052 465f5049 00474152     ETHARP..IP_FRAG.
  147320:	00005049 504d4749 00000000 504d4349     IP..IGMP....ICMP
  147330:	00000000 00504455 00504354 50414548     ....UDP.TCP.HEAP
  147340:	00000000 534f4c43 00004445 5453494c     ....CLOSED..LIST
  147350:	00004e45 5f4e5953 544e4553 00000000     EN..SYN_SENT....
  147360:	5f4e5953 44564352 00000000 41545345     SYN_RCVD....ESTA
  147370:	53494c42 00444548 5f4e4946 54494157     BLISHED.FIN_WAIT
  147380:	0000315f 5f4e4946 54494157 0000325f     _1..FIN_WAIT_2..
  147390:	534f4c43 41575f45 00005449 534f4c43     CLOSE_WAIT..CLOS
  1473a0:	00474e49 5453414c 4b43415f 00000000     ING.LAST_ACK....
  1473b0:	454d4954 4941575f 00000054              TIME_WAIT...

001473bc <tcp_state_str>:
  1473bc:	00147344 0014734c 00147354 00147360     Ds..Ls..Ts..`s..
  1473cc:	0014736c 00147378 00147384 00147390     ls..xs...s...s..
  1473dc:	0014739c 001473a4 001473b0              .s...s...s..

001473e8 <tcp_backoff>:
  1473e8:	04030201 07070605 07070707 00000007     ................

001473f8 <tcp_persist_backoff>:
  1473f8:	180c0603 00786030                       ....0`x.

00147400 <tcp_pcb_lists>:
  147400:	005751b8 005751bc 005751b0 005751c0     .QW..QW..QW..QW.
  147410:	20626370 4e203d21 004c4c55 76726573     pcb != NULL.serv
  147420:	73656369 49776c2f 74694b50 69776c2f     ices/lwIPKit/lwi
  147430:	2e322d70 2f322e30 2f637273 65726f63     p-2.0.2/src/core
  147440:	7063742f 0000632e 2d626370 6174733e     /tcp.c..pcb->sta
  147450:	3d206574 494c203d 4e455453 00000000     te == LISTEN....
  147460:	2d626370 616c663e 26207367 5f465420     pcb->flags & TF_
  147470:	4c435852 4445534f 00000000 276e6f64     RXCLOSED....don'
  147480:	61632074 74206c6c 615f7063 74726f62     t call tcp_abort
  147490:	7063742f 6162615f 6e6f646e 726f6620     /tcp_abandon for
  1474a0:	73696c20 2d6e6574 73626370 00000000      listen-pcbs....
  1474b0:	5f706374 646e6962 6163203a 6e6f206e     tcp_bind: can on
  1474c0:	6220796c 20646e69 73206e69 65746174     ly bind in state
  1474d0:	4f4c4320 00444553 5f706374 7473696c      CLOSED.tcp_list
  1474e0:	203a6e65 20626370 65726c61 20796461     en: pcb already 
  1474f0:	6e6e6f63 65746365 00000064 5f77656e     connected...new_
  147500:	5f766372 5f6e6e61 20646e77 30203d3c     rcv_ann_wnd <= 0
  147510:	66666678 00000066 276e6f64 61632074     xffff...don't ca
  147520:	74206c6c 725f7063 65766365 6f662064     ll tcp_recved fo
  147530:	696c2072 6e657473 6263702d 00000073     r listen-pcbs...
  147540:	5f706374 76636572 203a6465 206e656c     tcp_recved: len 
  147550:	70617277 20646570 5f766372 0a646e77     wrapped rcv_wnd.
  147560:	00000000 5f706374 6e6e6f63 3a746365     ....tcp_connect:
  147570:	6e616320 6c6e6f20 6f632079 63656e6e      can only connec
  147580:	72662074 73206d6f 65746174 4f4c4320     t from state CLO
  147590:	00444553 5f706374 776f6c73 3a726d74     SED.tcp_slowtmr:
  1475a0:	74636120 20657669 2d626370 6174733e      active pcb->sta
  1475b0:	21206574 4c43203d 4445534f 0000000a     te != CLOSED....
  1475c0:	5f706374 776f6c73 3a726d74 74636120     tcp_slowtmr: act
  1475d0:	20657669 2d626370 6174733e 21206574     ive pcb->state !
  1475e0:	494c203d 4e455453 0000000a 5f706374     = LISTEN....tcp_
  1475f0:	776f6c73 3a726d74 74636120 20657669     slowtmr: active 
  147600:	2d626370 6174733e 21206574 4954203d     pcb->state != TI
  147610:	572d454d 0a544941 00000000 5f706374     ME-WAIT.....tcp_
  147620:	776f6c73 3a726d74 64696d20 20656c64     slowtmr: middle 
  147630:	20706374 74203d21 615f7063 76697463     tcp != tcp_activ
  147640:	63705f65 00007362 5f706374 776f6c73     e_pcbs..tcp_slow
  147650:	3a726d74 72696620 70207473 3d206263     tmr: first pcb =
  147660:	6374203d 63615f70 65766974 6263705f     = tcp_active_pcb
  147670:	00000073 5f706374 776f6c73 3a726d74     s...tcp_slowtmr:
  147680:	4d495420 41572d45 70205449 3e2d6263      TIME-WAIT pcb->
  147690:	74617473 3d3d2065 4d495420 41572d45     state == TIME-WA
  1476a0:	00005449 5f706374 776f6c73 3a726d74     IT..tcp_slowtmr:
  1476b0:	64696d20 20656c64 20706374 74203d21      middle tcp != t
  1476c0:	745f7063 63705f77 00007362 5f706374     cp_tw_pcbs..tcp_
  1476d0:	776f6c73 3a726d74 72696620 70207473     slowtmr: first p
  1476e0:	3d206263 6374203d 77745f70 6263705f     cb == tcp_tw_pcb
  1476f0:	00000073 61766e69 2064696c 74617473     s...invalid stat
  147700:	00000065 61766e69 2064696c 6b636f73     e...invalid sock
  147710:	73207465 65746174 726f6620 63657220     et state for rec
  147720:	61632076 61626c6c 00006b63 61766e69     v callback..inva
  147730:	2064696c 6b636f73 73207465 65746174     lid socket state
  147740:	726f6620 6e657320 61632074 61626c6c      for sent callba
  147750:	00006b63 61766e69 2064696c 6b636f73     ck..invalid sock
  147760:	73207465 65746174 726f6620 72726520     et state for err
  147770:	6c616320 6361626c 0000006b 61766e69      callback...inva
  147780:	2064696c 6b636f73 73207465 65746174     lid socket state
  147790:	726f6620 6c6f7020 0000006c 65736e75      for poll...unse
  1477a0:	7320746e 656d6765 2073746e 6b61656c     nt segments leak
  1477b0:	00676e69 63616e75 2064656b 6d676573     ing.unacked segm
  1477c0:	73746e65 61656c20 676e696b 00000000     ents leaking....
  1477d0:	65736f6f 65732071 6e656d67 6c207374     ooseq segments l
  1477e0:	696b6165 0000676e 6e3e2d70 20747865     eaking..p->next 
  1477f0:	4e203d21 004c4c55 76726573 73656369     != NULL.services
  147800:	49776c2f 74694b50 69776c2f 2e322d70     /lwIPKit/lwip-2.
  147810:	2f322e30 2f637273 65726f63 7063742f     0.2/src/core/tcp
  147820:	2e6e695f 00000063 6c3e2d70 3d206e65     _in.c...p->len =
  147830:	0030203d 743e2d70 6c5f746f 3d206e65     = 0.p->tot_len =
  147840:	2d70203d 78656e3e 743e2d74 6c5f746f     = p->next->tot_l
  147850:	00006e65 5f706374 75706e69 61203a74     en..tcp_input: a
  147860:	76697463 63702065 733e2d62 65746174     ctive pcb->state
  147870:	203d2120 534f4c43 00004445 5f706374      != CLOSED..tcp_
  147880:	75706e69 61203a74 76697463 63702065     input: active pc
  147890:	733e2d62 65746174 203d2120 454d4954     b->state != TIME
  1478a0:	4941572d 00000054 5f706374 75706e69     -WAIT...tcp_inpu
  1478b0:	61203a74 76697463 63702065 733e2d62     t: active pcb->s
  1478c0:	65746174 203d2120 5453494c 00004e45     tate != LISTEN..
  1478d0:	5f706374 75706e69 70203a74 3e2d6263     tcp_input: pcb->
  1478e0:	7478656e 203d2120 20626370 66656228     next != pcb (bef
  1478f0:	2065726f 68636163 00002965 5f706374     ore cache)..tcp_
  147900:	75706e69 70203a74 3e2d6263 7478656e     input: pcb->next
  147910:	203d2120 20626370 74666128 63207265      != pcb (after c
  147920:	65686361 00000029 5f706374 75706e69     ache)...tcp_inpu
  147930:	54203a74 2d454d49 54494157 62637020     t: TIME-WAIT pcb
  147940:	74733e2d 20657461 54203d3d 2d454d49     ->state == TIME-
  147950:	54494157 00000000 2d626370 6665723e     WAIT....pcb->ref
  147960:	64657375 7461645f 3d3d2061 4c554e20     used_data == NUL
  147970:	0000004c 5f706374 75706e69 70203a74     L...tcp_input: p
  147980:	3e2d6263 74617473 3d212065 4f4c4320     cb->state != CLO
  147990:	00444553 2d626370 646e733e 6575715f     SED.pcb->snd_que
  1479a0:	656c6575 203e206e 00000030 73206f6e     uelen > 0...no s
  1479b0:	656d6765 7420746e 7266206f 00006565     egment to free..
  1479c0:	2d626370 73696c3e 656e6574 613e2d72     pcb->listener->a
  1479d0:	70656363 3d212074 4c554e20 0000004c     ccept != NULL...
  1479e0:	5f706374 65636572 3a657669 6f727720     tcp_receive: wro
  1479f0:	7320676e 65746174 00000000 2d626370     ng state....pcb-
  147a00:	646e733e 6575715f 656c6575 3d3e206e     >snd_queuelen >=
  147a10:	75627020 6c635f66 6e286e65 2d747865      pbuf_clen(next-
  147a20:	0029703e 5f706374 65636572 3a657669     >p).tcp_receive:
  147a30:	6c617620 71206469 65756575 6e656c20      valid queue len
  147a40:	00687467 65736e69 20702e67 4e203d21     gth.inseg.p != N
  147a50:	004c4c55 61736e69 6f20656e 65736666     ULL.insane offse
  147a60:	00002174 66756270 6f6f7420 6f687320     t!..pbuf too sho
  147a70:	00217472 66756270 6165685f 20726564     rt!.pbuf_header 
  147a80:	6c696166 00006465 5f706374 65636572     failed..tcp_rece
  147a90:	3a657669 67657320 746e656d 746f6e20     ive: segment not
  147aa0:	69727420 64656d6d 726f6320 74636572      trimmed correct
  147ab0:	7420796c 6372206f 6e775f76 00000a64     ly to rcv_wnd...
  147ac0:	5f706374 65636572 3a657669 67657320     tcp_receive: seg
  147ad0:	746e656d 746f6e20 69727420 64656d6d     ment not trimmed
  147ae0:	726f6320 74636572 7420796c 6f6f206f      correctly to oo
  147af0:	20716573 75657571 00000a65 5f706374     seq queue...tcp_
  147b00:	65636572 3a657669 70637420 206e656c     receive: tcplen 
  147b10:	6372203e 6e775f76 00000a64 5f706374     > rcv_wnd...tcp_
  147b20:	65636572 3a657669 736f6f20 74207165     receive: ooseq t
  147b30:	656c7063 203e206e 5f766372 0a646e77     cplen > rcv_wnd.
  147b40:	00000000 63656863 6874206b 66207461     ....check that f
  147b50:	74737269 75627020 61632066 6f68206e     irst pbuf can ho
  147b60:	7320646c 63757274 63742074 64685f70     ld struct tcp_hd
  147b70:	00000072 76726573 73656369 49776c2f     r...services/lwI
  147b80:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  147b90:	2f637273 65726f63 7063742f 74756f5f     src/core/tcp_out
  147ba0:	0000632e 743e2d70 6c5f746f 3e206e65     .c..p->tot_len >
  147bb0:	706f203d 6e656c74 00000000 6465656e     = optlen....need
  147bc0:	636e7520 6e696168 70206465 00667562      unchained pbuf.
  147bd0:	5f706374 74697277 70203a65 73667562     tcp_write: pbufs
  147be0:	206e6f20 75657571 3e3d2065 20746120      on queue => at 
  147bf0:	7361656c 6e6f2074 75712065 20657565     least one queue 
  147c00:	2d6e6f6e 74706d65 00000079 5f706374     non-empty...tcp_
  147c10:	74697277 6e203a65 6270206f 20736675     write: no pbufs 
  147c20:	71206e6f 65756575 203e3d20 68746f62     on queue => both
  147c30:	65757120 20736575 74706d65 00000079      queues empty...
  147c40:	5f706374 74697277 61203a65 3d206772     tcp_write: arg =
  147c50:	554e203d 28204c4c 676f7270 6d6d6172     = NULL (programm
  147c60:	76207265 616c6f69 20736574 29495041     er violates API)
  147c70:	00000000 5f73736d 61636f6c 7369206c     ....mss_local is
  147c80:	6f6f7420 616d7320 00006c6c 6f636e69      too small..inco
  147c90:	7369736e 746e6574 65766f20 7a697372     nsistent oversiz
  147ca0:	73762065 7073202e 00656361 6f636e69     e vs. space.inco
  147cb0:	7369736e 746e6574 65766f20 7a697372     nsistent oversiz
  147cc0:	73762065 656c202e 0000006e 5f706374     e vs. len...tcp_
  147cd0:	74697277 52203a65 70204d4f 73667562     write: ROM pbufs
  147ce0:	6e616320 20746f6e 6f206562 73726576      cannot be overs
  147cf0:	64657a69 00000000 65736e75 6f5f746e     ized....unsent_o
  147d00:	73726576 20657a69 6d73696d 68637461     versize mismatch
  147d10:	63702820 753e2d62 6e65736e 73692074      (pcb->unsent is
  147d20:	4c554e20 0000294c 5f706374 74697277      NULL)..tcp_writ
  147d30:	63203a65 6b636568 61687420 69662074     e: check that fi
  147d40:	20747372 66756270 6e616320 6c6f6820     rst pbuf can hol
  147d50:	68742064 6f632065 656c706d 73206574     d the complete s
  147d60:	656c6765 0000006e 7265766f 657a6973     eglen...oversize
  147d70:	203d3d20 00000030 76657270 6765735f      == 0...prev_seg
  147d80:	203d2120 4c4c554e 00000000 5f706374      != NULL....tcp_
  147d90:	74697277 63203a65 6f6e6e61 6f632074     write: cannot co
  147da0:	7461636e 74616e65 68772065 70206e65     ncatenate when p
  147db0:	3e2d6263 65736e75 6920746e 6d652073     cb->unsent is em
  147dc0:	00797470 5f706374 74697277 65203a65     pty.tcp_write: e
  147dd0:	6e657478 6e6f6973 20666f20 65666572     xtension of refe
  147de0:	636e6572 65722065 72697571 72207365     rence requires r
  147df0:	72656665 65636e65 00000000 5f706374     eference....tcp_
  147e00:	74697277 76203a65 64696c61 65757120     write: valid que
  147e10:	6c206575 74676e65 00000068 5f706374     ue length...tcp_
  147e20:	75716e65 5f657565 67616c66 6e203a73     enqueue_flags: n
  147e30:	20646565 68746965 54207265 535f5043     eed either TCP_S
  147e40:	6f204e59 43542072 49465f50 6e69204e     YN or TCP_FIN in
  147e50:	616c6620 28207367 676f7270 6d6d6172      flags (programm
  147e60:	76207265 616c6f69 20736574 29495041     er violates API)
  147e70:	00000000 5f706374 75716e65 5f657565     ....tcp_enqueue_
  147e80:	67616c66 63203a73 6b636568 61687420     flags: check tha
  147e90:	69662074 20747372 66756270 6e616320     t first pbuf can
  147ea0:	6c6f6820 706f2064 6e656c74 00000000      hold optlen....
  147eb0:	2d676573 7063743e 20726468 20746f6e     seg->tcphdr not 
  147ec0:	67696c61 0064656e 5f706374 75716e65     aligned.tcp_enqu
  147ed0:	5f657565 67616c66 69203a73 6c61766e     eue_flags: inval
  147ee0:	73206469 656d6765 6c20746e 74676e65     id segment lengt
  147ef0:	00000068 5f706374 75716e65 5f657565     h...tcp_enqueue_
  147f00:	67616c66 69203a73 6c61766e 71206469     flags: invalid q
  147f10:	65756575 6e656c20 00687467 276e6f64     ueue length.don'
  147f20:	61632074 74206c6c 6f5f7063 75707475     t call tcp_outpu
  147f30:	6f662074 696c2072 6e657473 6263702d     t for listen-pcb
  147f40:	00000073 20545352 20746f6e 65707865     s...RST not expe
  147f50:	64657463 72656820 00002165              cted here!..

00147f5c <lwip_cyclic_timers>:
  147f5c:	000000fa 0011cc6c 000003e8 00132884     ....l........(..
  147f6c:	000003e8 0012d4d4 0000ea60 0012a114     ........`.......
  147f7c:	000001f4 0012a248 00000064 00130880     ....H...d.......
  147f8c:	000003e8 00116788 76726573 73656369     .....g..services
  147f9c:	49776c2f 74694b50 69776c2f 2e322d70     /lwIPKit/lwip-2.
  147fac:	2f322e30 2f637273 65726f63 6d69742f     0.2/src/core/tim
  147fbc:	74756f65 00632e73 5f737973 656d6974     eouts.c.sys_time
  147fcc:	3a74756f 6d697420 74756f65 203d2120     out: timeout != 
  147fdc:	4c4c554e 6f70202c 4d206c6f 5f504d45     NULL, pool MEMP_
  147fec:	5f535953 454d4954 2054554f 65207369     SYS_TIMEOUT is e
  147ffc:	7974706d 00000000 66756270 6165685f     mpty....pbuf_hea
  14800c:	20726564 6c696166 000a6465 76726573     der failed..serv
  14801c:	73656369 49776c2f 74694b50 69776c2f     ices/lwIPKit/lwi
  14802c:	2e322d70 2f322e30 2f637273 65726f63     p-2.0.2/src/core
  14803c:	7064752f 0000632e 63656863 6874206b     /udp.c..check th
  14804c:	66207461 74737269 75627020 61632066     at first pbuf ca
  14805c:	6f68206e 7320646c 63757274 64752074     n hold struct ud
  14806c:	64685f70 00000072                       p_hdr...

00148074 <ethbroadcast>:
  148074:	ffffffff 0000ffff                       ........

0014807c <ethzero>:
	...
  148084:	6974656e 683e2d66 64646177 656c5f72     netif->hwaddr_le
  148094:	756d206e 62207473 20362065 20726f66     n must be 6 for 
  1480a4:	65687465 74656e72 74756f5f 21747570     ethernet_output!
  1480b4:	00000000 76726573 73656369 49776c2f     ....services/lwI
  1480c4:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  1480d4:	2f637273 6974656e 74652f66 6e726568     src/netif/ethern
  1480e4:	632e7465 00000000 6974656e 00000066     et.c....netif...
  1480f4:	74736f68 00000000 676e6970 7365725f     host....ping_res
  148104:	00000070                                p...

00148108 <lwip_netdev_ops>:
  148108:	00128c98 00128cc8 00128cf8 00128dc4     ................
  148118:	00128e00 00128e60 00000000 00129120     ....`....... ...
  148128:	7069776c 74656e5f 00006669 6974656e     lwip_netif..neti
  148138:	3d212066 5f545220 4c4c554e 00000000     f != RT_NULL....
  148148:	6c6c616d 6e20636f 66697465 69616620     malloc netif fai
  148158:	0a64656c 00000000 68747472 64616572     led.....rtthread
  148168:	3230255f 32302578 00000078 69706374     _%02x%02x...tcpi
  148178:	00000070 20766564 52203d21 554e5f54     p...dev != RT_NU
  148188:	00004c4c 00787265 75736572 3d20746c     LL..erx.result =
  148198:	5452203d 4b4f455f 00000000 7774656e     = RT_EOK....netw
  1481a8:	206b726f 65746e69 63616672 616e2065     ork interface na
  1481b8:	7420656d 6c206f6f 21676e6f 00000a0d     me too long!....
  1481c8:	7774656e 206b726f 65746e69 63616672     network interfac
  1481d8:	25203a65 6f6e2073 6f662074 21646e75     e: %s not found!
  1481e8:	00000a0d                                ....

001481ec <__FUNCTION__.7798>:
  1481ec:	7069776c 74656e5f 5f766564 676e6970     lwip_netdev_ping
  1481fc:	00000000                                ....

00148200 <__FUNCTION__.7810>:
  148200:	6474656e 615f7665 00006464              netdev_add..

0014820c <__FUNCTION__.7819>:
  14820c:	6474656e 645f7665 00006c65              netdev_del..

00148218 <__FUNCTION__.7824>:
  148218:	6474656e 665f7665 7367616c 6e79735f     netdev_flags_syn
  148228:	00000063                                c...

0014822c <__FUNCTION__.7830>:
  14822c:	65687465 74656e72 6c5f6669 6f6b6e69     ethernetif_linko
  14823c:	75707475 00000074                       utput...

00148244 <__FUNCTION__.7859>:
  148244:	5f687465 69766564 6c5f6563 636b6e69     eth_device_linkc
  148254:	676e6168 00000065                       hange...

0014825c <__FUNCTION__.7884>:
  14825c:	5f687465 74737973 645f6d65 63697665     eth_system_devic
  14826c:	6e695f65 705f7469 61766972 00006574     e_init_private..
  14827c:	70636864 636e695f 6263705f 6665725f     dhcp_inc_pcb_ref
  14828c:	6e756f63 3a292874 6d656d20 2079726f     count(): memory 
  14829c:	6b61656c 00000000 76726573 73656369     leak....services
  1482ac:	49776c2f 74694b50 69776c2f 2e322d70     /lwIPKit/lwip-2.
  1482bc:	2f322e30 2f637273 65726f63 7670692f     0.2/src/core/ipv
  1482cc:	68642f34 632e7063 00000000 70636864     4/dhcp.c....dhcp
  1482dc:	6263705f 6665725f 6e756f63 3a292874     _pcb_refcount():
  1482ec:	66657220 6e756f63 72652074 00726f72      refcount error.
  1482fc:	6974656e 3d212066 4c554e20 0000004c     netif != NULL...
  14830c:	70636864 203d2120 4c4c554e 00000000     dhcp != NULL....
  14831c:	6974656e 6c612066 64616572 61682079     netif already ha
  14832c:	20612073 75727473 64207463 20706368     s a struct dhcp 
  14833c:	00746573 6974656e 73692066 746f6e20     set.netif is not
  14834c:	2c707520 646c6f20 79747320 7020656c      up, old style p
  14835c:	3f74726f 00000000 66756270 6f5f7020     ort?....pbuf p_o
  14836c:	77207475 276e7361 72662074 00646565     ut wasn't freed.
  14837c:	6c706572 61772079 74276e73 65726620     reply wasn't fre
  14838c:	00006465 70636864 6e69625f 6e203a64     ed..dhcp_bind: n
  14839c:	66697465 203d2120 4c4c554e 00000000     etif != NULL....
  1483ac:	70636864 6e69625f 64203a64 20706368     dhcp_bind: dhcp 
  1483bc:	4e203d21 004c4c55 70636864 6f74735f     != NULL.dhcp_sto
  1483cc:	6e203a70 66697465 203d2120 4c4c554e     p: netif != NULL
  1483dc:	00000000 70636864 74706f5f 3a6e6f69     ....dhcp_option:
  1483ec:	63686420 6f3e2d70 6f697470 6f5f736e      dhcp->options_o
  1483fc:	6c5f7475 2b206e65 2b203220 74706f20     ut_len + 2 + opt
  14840c:	5f6e6f69 206e656c 44203d3c 5f504348     ion_len <= DHCP_
  14841c:	4954504f 5f534e4f 004e454c 70636864     OPTIONS_LEN.dhcp
  14842c:	74706f5f 5f6e6f69 65747962 6864203a     _option_byte: dh
  14843c:	3e2d7063 6974706f 5f736e6f 5f74756f     cp->options_out_
  14844c:	206e656c 4844203c 4f5f5043 4f495450     len < DHCP_OPTIO
  14845c:	4c5f534e 00004e45 70636864 74706f5f     NS_LEN..dhcp_opt
  14846c:	5f6e6f69 726f6873 64203a74 2d706368     ion_short: dhcp-
  14847c:	74706f3e 736e6f69 74756f5f 6e656c5f     >options_out_len
  14848c:	32202b20 203d3c20 50434844 54504f5f      + 2 <= DHCP_OPT
  14849c:	534e4f49 4e454c5f 00000000 70636864     IONS_LEN....dhcp
  1484ac:	74706f5f 5f6e6f69 676e6f6c 6864203a     _option_long: dh
  1484bc:	3e2d7063 6974706f 5f736e6f 5f74756f     cp->options_out_
  1484cc:	206e656c 2034202b 44203d3c 5f504348     len + 4 <= DHCP_
  1484dc:	4954504f 5f534e4f 004e454c 50434844     OPTIONS_LEN.DHCP
  1484ec:	6f68203a 616e7473 6920656d 6f742073     : hostname is to
  1484fc:	6f6c206f 0021676e 206e656c 34203d3d     o long!.len == 4
  14850c:	00000000 206e656c 64203d3e 646f6365     ....len >= decod
  14851c:	656c5f65 0000006e 206e656c 34202525     e_len...len %% 4
  14852c:	203d3d20 00000030 206e656c 31203d3d      == 0...len == 1
  14853c:	00000000 7265766f 64616f6c 206e6920     ....overload in 
  14854c:	656c6966 616e732f 0000656d 63656863     file/sname..chec
  14855c:	6564206b 65646f63 7864695f 00000000     k decode_idx....
  14856c:	6f636564 6c5f6564 25206e65 20342025     decode_len %% 4 
  14857c:	30203d3d 00000000 61766e69 2064696c     == 0....invalid 
  14858c:	6f636564 6c5f6564 00006e65 7478656e     decode_len..next
  14859c:	75627020 61772066 756e2073 00006c6c      pbuf was null..
  1485ac:	70636864 6572635f 5f657461 3a67736d     dhcp_create_msg:
  1485bc:	74656e20 21206669 554e203d 00004c4c      netif != NULL..
  1485cc:	70636864 6572635f 5f657461 3a67736d     dhcp_create_msg:
  1485dc:	63686420 3d212070 4c554e20 0000004c      dhcp != NULL...
  1485ec:	70636864 6572635f 5f657461 3a67736d     dhcp_create_msg:
  1485fc:	63686420 703e2d70 74756f5f 203d3d20      dhcp->p_out == 
  14860c:	4c4c554e 00000000 70636864 6572635f     NULL....dhcp_cre
  14861c:	5f657461 3a67736d 63686420 6d3e2d70     ate_msg: dhcp->m
  14862c:	6f5f6773 3d207475 554e203d 00004c4c     sg_out == NULL..
  14863c:	70636864 6572635f 5f657461 3a67736d     dhcp_create_msg:
  14864c:	65686320 74206b63 20746168 73726966      check that firs
  14865c:	62702074 63206675 68206e61 20646c6f     t pbuf can hold 
  14866c:	75727473 64207463 5f706368 0067736d     struct dhcp_msg.
  14867c:	70636864 6c65645f 5f657465 3a67736d     dhcp_delete_msg:
  14868c:	63686420 3d212070 4c554e20 0000004c      dhcp != NULL...
  14869c:	70636864 6c65645f 5f657465 3a67736d     dhcp_delete_msg:
  1486ac:	63686420 703e2d70 74756f5f 203d2120      dhcp->p_out != 
  1486bc:	4c4c554e 00000000 70636864 6c65645f     NULL....dhcp_del
  1486cc:	5f657465 3a67736d 63686420 6d3e2d70     ete_msg: dhcp->m
  1486dc:	6f5f6773 21207475 554e203d 00004c4c     sg_out != NULL..
  1486ec:	70636864 74706f5f 5f6e6f69 69617274     dhcp_option_trai
  1486fc:	3a72656c 63686420 3d212070 4c554e20     ler: dhcp != NUL
  14870c:	0000004c 70636864 74706f5f 5f6e6f69     L...dhcp_option_
  14871c:	69617274 3a72656c 63686420 6d3e2d70     trailer: dhcp->m
  14872c:	6f5f6773 21207475 554e203d 000a4c4c     sg_out != NULL..
  14873c:	70636864 74706f5f 5f6e6f69 69617274     dhcp_option_trai
  14874c:	3a72656c 63686420 6f3e2d70 6f697470     ler: dhcp->optio
  14875c:	6f5f736e 6c5f7475 3c206e65 43484420     ns_out_len < DHC
  14876c:	504f5f50 4e4f4954 454c5f53 00000a4e     P_OPTIONS_LEN...
  14877c:	3d212071 4c554e20 0000004c 76726573     q != NULL...serv
  14878c:	73656369 49776c2f 74694b50 69776c2f     ices/lwIPKit/lwi
  14879c:	2e322d70 2f322e30 2f637273 65726f63     p-2.0.2/src/core
  1487ac:	7670692f 74652f34 70726168 0000632e     /ipv4/etharp.c..
  1487bc:	703e2d71 203d2120 4c4c554e 00000000     q->p != NULL....
  1487cc:	703e2d72 203d2120 4c4c554e 00000000     r->p != NULL....
  1487dc:	74617473 3d3d2065 48544520 5f505241     state == ETHARP_
  1487ec:	54415453 45505f45 4e49444e 7c7c2047     STATE_PENDING ||
  1487fc:	61747320 3e206574 5445203d 50524148      state >= ETHARP
  14880c:	4154535f 535f4554 4c424154 00000045     _STATE_STABLE...
  14881c:	5f707261 6c626174 5d695b65 3d20712e     arp_table[i].q =
  14882c:	554e203d 00004c4c 203c2069 5f505241     = NULL..i < ARP_
  14883c:	4c424154 49535f45 0000455a 5f707261     TABLE_SIZE..arp_
  14884c:	6c626174 5d695b65 6174732e 3d206574     table[i].state =
  14885c:	5445203d 50524148 4154535f 455f4554     = ETHARP_STATE_E
  14886c:	5954504d 00000000 6974656e 683e2d66     MPTY....netif->h
  14887c:	64646177 656c5f72 3d3d206e 48544520     waddr_len == ETH
  14888c:	4157485f 5f524444 004e454c 5f687465     _HWADDR_LEN.eth_
  14889c:	20746572 4e203d21 204c4c55 69202626     ret != NULL && i
  1488ac:	65725f70 3d212074 4c554e20 0000004c     p_ret != NULL...
  1488bc:	64617069 21207264 554e203d 00004c4c     ipaddr != NULL..
  1488cc:	6974656e 3d212066 4c554e20 0000004c     netif != NULL...
  1488dc:	5f687465 20746572 4e203d21 004c4c55     eth_ret != NULL.
  1488ec:	5f707261 6c626174 72615b65 64695f70     arp_table[arp_id
  1488fc:	732e5d78 65746174 203d3e20 41485445     x].state >= ETHA
  14890c:	535f5052 45544154 4154535f 00454c42     RP_STATE_STABLE.
  14891c:	5f707261 6c626174 5d695b65 6174732e     arp_table[i].sta
  14892c:	3d206574 4550203d 4e49444e 726f2047     te == PENDING or
  14893c:	41545320 00454c42 70206f6e 656b6361      STABLE.no packe
  14894c:	75712074 73657565 6c6c6120 6465776f     t queues allowed
  14895c:	00000021 63656863 6874206b 66207461     !...check that f
  14896c:	74737269 75627020 61632066 6f68206e     irst pbuf can ho
  14897c:	7320646c 63757274 74652074 70726168     ld struct etharp
  14898c:	7264685f 00000000 6974656e 683e2d66     _hdr....netif->h
  14899c:	64646177 656c5f72 756d206e 62207473     waddr_len must b
  1489ac:	68742065 61732065 6120656d 54452073     e the same as ET
  1489bc:	57485f48 52444441 4e454c5f 726f6620     H_HWADDR_LEN for
  1489cc:	68746520 21707261 00000000 706d6369      etharp!....icmp
  1489dc:	706e695f 203a7475 69766f6d 7220676e     _input: moving r
  1489ec:	61703e2d 616f6c79 6f742064 6d636920     ->payload to icm
  1489fc:	65682070 72656461 69616620 0a64656c     p header failed.
  148a0c:	00000000 76726573 73656369 49776c2f     ....services/lwI
  148a1c:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  148a2c:	2f637273 65726f63 7670692f 63692f34     src/core/ipv4/ic
  148a3c:	632e706d 00000000 706d6369 706e695f     mp.c....icmp_inp
  148a4c:	203a7475 74736572 6e69726f 726f2067     ut: restoring or
  148a5c:	6e696769 70206c61 61703e2d 616f6c79     iginal p->payloa
  148a6c:	61662064 64656c69 0000000a 63656863     d failed....chec
  148a7c:	6874206b 66207461 74737269 75627020     k that first pbu
  148a8c:	61632066 6f68206e 6920646c 20706d63     f can hold icmp 
  148a9c:	7373656d 00656761 76726573 73656369     message.services
  148aac:	49776c2f 74694b50 69776c2f 2e322d70     /lwIPKit/lwip-2.
  148abc:	2f322e30 2f637273 65726f63 7670692f     0.2/src/core/ipv
  148acc:	67692f34 632e706d 00000000 706d6769     4/igmp.c....igmp
  148adc:	6f6f6c5f 5f70756b 756f7267 66203a70     _lookup_group: f
  148aec:	74737269 6f726720 6d207075 20747375     irst group must 
  148afc:	61206562 79736c6c 6d657473 00000073     be allsystems...
  148b0c:	706d6769 6f6f6c5f 5f70756b 756f7267     igmp_lookup_grou
  148b1c:	61203a70 65206c6c 70656378 69662074     p: all except fi
  148b2c:	20747372 756f7267 756d2070 6e207473     rst group must n
  148b3c:	6220746f 6c612065 7379736c 736d6574     ot be allsystems
  148b4c:	00000000 706d6769 696f6a5f 6f72676e     ....igmp_joingro
  148b5c:	203a7075 65747461 2074706d 6a206f74     up: attempt to j
  148b6c:	206e696f 2d6e6f6e 746c756d 73616369     oin non-multicas
  148b7c:	64612074 73657264 00000073 706d6769     t address...igmp
  148b8c:	696f6a5f 6f72676e 203a7075 65747461     _joingroup: atte
  148b9c:	2074706d 6a206f74 206e696f 736c6c61     mpt to join alls
  148bac:	65747379 6120736d 65726464 00007373     ystems address..
  148bbc:	706d6769 696f6a5f 6f72676e 6e5f7075     igmp_joingroup_n
  148bcc:	66697465 7461203a 706d6574 6f742074     etif: attempt to
  148bdc:	696f6a20 6f6e206e 756d2d6e 6369746c      join non-multic
  148bec:	20747361 72646461 00737365 706d6769     ast address.igmp
  148bfc:	696f6a5f 6f72676e 6e5f7075 66697465     _joingroup_netif
  148c0c:	7461203a 706d6574 6f742074 696f6a20     : attempt to joi
  148c1c:	6c61206e 7379736c 736d6574 64646120     n allsystems add
  148c2c:	73736572 00000000 706d6769 696f6a5f     ress....igmp_joi
  148c3c:	6f72676e 6e5f7075 66697465 7461203a     ngroup_netif: at
  148c4c:	706d6574 6f742074 696f6a20 6e6f206e     tempt to join on
  148c5c:	6e6f6e20 4d47492d 656e2050 00666974      non-IGMP netif.
  148c6c:	706d6769 61656c5f 72676576 3a70756f     igmp_leavegroup:
  148c7c:	74746120 74706d65 206f7420 7661656c      attempt to leav
  148c8c:	6f6e2065 756d2d6e 6369746c 20747361     e non-multicast 
  148c9c:	72646461 00737365 706d6769 61656c5f     address.igmp_lea
  148cac:	72676576 3a70756f 74746120 74706d65     vegroup: attempt
  148cbc:	206f7420 7661656c 6c612065 7379736c      to leave allsys
  148ccc:	736d6574 64646120 73736572 00000000     tems address....
  148cdc:	706d6769 61656c5f 72676576 5f70756f     igmp_leavegroup_
  148cec:	6974656e 61203a66 6d657474 74207470     netif: attempt t
  148cfc:	656c206f 20657661 2d6e6f6e 746c756d     o leave non-mult
  148d0c:	73616369 64612074 73657264 00000073     icast address...
  148d1c:	706d6769 61656c5f 72676576 5f70756f     igmp_leavegroup_
  148d2c:	6974656e 61203a66 6d657474 74207470     netif: attempt t
  148d3c:	656c206f 20657661 736c6c61 65747379     o leave allsyste
  148d4c:	6120736d 65726464 00007373 706d6769     ms address..igmp
  148d5c:	61656c5f 72676576 5f70756f 6974656e     _leavegroup_neti
  148d6c:	61203a66 6d657474 74207470 656c206f     f: attempt to le
  148d7c:	20657661 6e206e6f 492d6e6f 20504d47     ave on non-IGMP 
  148d8c:	6974656e 00000066 706d6769 6e65735f     netif...igmp_sen
  148d9c:	63203a64 6b636568 61687420 69662074     d: check that fi
  148dac:	20747372 66756270 6e616320 6c6f6820     rst pbuf can hol
  148dbc:	74732064 74637572 6d676920 736d5f70     d struct igmp_ms
  148dcc:	00000067 723e2d70 3d206665 0031203d     g...p->ref == 1.
  148ddc:	76726573 73656369 49776c2f 74694b50     services/lwIPKit
  148dec:	69776c2f 2e322d70 2f322e30 2f637273     /lwip-2.0.2/src/
  148dfc:	65726f63 7670692f 70692f34 00632e34     core/ipv4/ip4.c.
  148e0c:	63656863 6874206b 66207461 74737269     check that first
  148e1c:	75627020 61632066 6f68206e 7320646c      pbuf can hold s
  148e2c:	63757274 70692074 7264685f 00000000     truct ip_hdr....

00148e3c <ip_addr_any>:
  148e3c:	00000000                                ....

00148e40 <ip_addr_broadcast>:
  148e40:	ffffffff 61686e75 656c646e 00000064     ....unhandled...
  148e50:	76726573 73656369 49776c2f 74694b50     services/lwIPKit
  148e60:	69776c2f 2e322d70 2f322e30 2f637273     /lwip-2.0.2/src/
  148e70:	65726f63 7670692f 70692f34 64615f34     core/ipv4/ip4_ad
  148e80:	632e7264 00000000 76657270 203d2120     dr.c....prev != 
  148e90:	00727069 76726573 73656369 49776c2f     ipr.services/lwI
  148ea0:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  148eb0:	2f637273 65726f63 7670692f 70692f34     src/core/ipv4/ip
  148ec0:	72665f34 632e6761 00000000 76657270     4_frag.c....prev
  148ed0:	656e3e2d 3d207478 7069203d 00000072     ->next == ipr...
  148ee0:	66756270 72665f73 20646565 6c63202b     pbufs_freed + cl
  148ef0:	3c206e65 7830203d 66666666 00000000     en <= 0xffff....
  148f00:	725f7069 73736165 7562705f 756f6366     ip_reass_pbufcou
  148f10:	3e20746e 6c63203d 00006e65 696e6173     nt >= clen..sani
  148f20:	63207974 6b636568 6e696c20 2064656b     ty check linked 
  148f30:	7473696c 00000000 63656863 7266206b     list....check fr
  148f40:	656d6761 2073746e 276e6f64 766f2074     agments don't ov
  148f50:	616c7265 00000070 70206f6e 69766572     erlap...no previ
  148f60:	2073756f 67617266 746e656d 6874202c     ous fragment, th
  148f70:	6d207369 20747375 74206562 66206568     is must be the f
  148f80:	74737269 61726620 6e656d67 00002174     irst fragment!..
  148f90:	696e6173 63207974 6b636568 00000000     sanity check....
  148fa0:	696c6176 65746164 7461645f 61726761     validate_datagra
  148fb0:	656e3a6d 705f7478 21667562 4c554e3d     m:next_pbuf!=NUL
  148fc0:	0000004c 696c6176 65746164 7461645f     L...validate_dat
  148fd0:	61726761 61643a6d 72676174 65206d61     agram:datagram e
  148fe0:	3d21646e 61746164 6d617267 6e656c20     nd!=datagram len
  148ff0:	00000000 3d212070 4c554e20 0000004c     ....p != NULL...
  149000:	20726370 4e203d21 004c4c55 20726370     pcr != NULL.pcr 
  149010:	70203d3d 00000000 5f347069 67617266     == p....ip4_frag
  149020:	64202928 2073656f 20746f6e 70707573     () does not supp
  149030:	2074726f 6f205049 6f697470 0000736e     ort IP options..
  149040:	665f7069 28676172 4d203a29 6c612046     ip_frag(): MF al
  149050:	64616572 65732079 00000074 73696874     ready set...this
  149060:	65656e20 61207364 75627020 6e692066      needs a pbuf in
  149070:	656e6f20 65697020 00216563 676e6970      one piece!.ping
  149080:	7a69735f 73692065 6f6f7420 67696220     _size is too big
  149090:	00000000 76726573 73656369 49776c2f     ....services/lwI
  1490a0:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  1490b0:	2f637273 73707061 6e69702f 69702f67     src/apps/ping/pi
  1490c0:	632e676e 00000000 00003165 63616d65     ng.c....e1..emac
  1490d0:	6e695f31 00007274 6d305b1b 642f445b     1_intr...[0m[D/d
  1490e0:	652e7672 5d74656e 00000020 74656e65     rv.enet] ...enet
  1490f0:	6c206425 206b6e69 00007075 6d305b1b     %d link up...[0m
  149100:	0000000a 74656e65 6c206425 206b6e69     ....enet%d link 
  149110:	6e776f64 00000000 31335b1b 2f455b6d     down.....[31m[E/
  149120:	2e767264 74656e65 0000205d 4f525245     drv.enet] ..ERRO
  149130:	61203a52 636f6c6c 6d656d20 746f6e20     R: alloc mem not
  149140:	6f6e6520 20686775 20726f66 74656e65      enough for enet
  149150:	69726420 00726576 4f525245 72203a52      driver.ERROR: r
  149160:	75622078 70206666 20656761 6f6c6c61     x buff page allo
  149170:	61662063 64656c69 00000000 4f525245     c failed....ERRO
  149180:	74203a52 75622078 70206666 20656761     R: tx buff page 
  149190:	6f6c6c61 61662063 64656c69 00000000     alloc failed....
  1491a0:	4f525245 72203a52 64622078 67617020     ERROR: rx bd pag
  1491b0:	6c612065 20636f6c 6c696166 00006465     e alloc failed..
  1491c0:	4f525245 74203a52 64622078 67617020     ERROR: tx bd pag
  1491d0:	6c612065 20636f6c 6c696166 00006465     e alloc failed..
  1491e0:	51494e55 495f4555 73692044 25782520     UNIQUE_ID is %x%
  1491f0:	00000078 51494e55 495f4555 68632044     x...UNIQUE_ID ch
  149200:	65676e61 206f7420 62203233 20737469     ange to 32 bits 
  149210:	00007825 00000070 2074656e 6f727265     %x..p...net erro
  149220:	65732072 6c20646e 74676e65 64252068     r send length %d
  149230:	63786520 20646565 2078616d 676e656c      exceed max leng
  149240:	00006874 2074656e 6f727265 65722072     th..net error re
  149250:	6c207663 74676e65 64252068 63786520     cv length %d exc
  149260:	20646565 2078616d 676e656c 00006874     eed max length..
  149270:	20687465 64616572 766e6920 64696c61     eth read invalid
  149280:	72617020 74656d61 62207265 65666675      parameter buffe
  149290:	70252072 7a697320 64252065 00000000     r %p size %d....
  1492a0:	20687465 74697277 6e692065 696c6176     eth write invali
  1492b0:	61702064 656d6172 20726574 66667562     d parameter buff
  1492c0:	25207265 69732070 2520657a 00000064     er %p size %d...
  1492d0:	65746e69 75707272 616d2074 20686374     interrput match 
  1492e0:	65736162 64646120 72652072 00726f72     base addr error.
  1492f0:	33335b1b 2f575b6d 2e767264 74656e65     .[33m[W/drv.enet
  149300:	0000205d 20594850 6b6e694c 776f6420     ] ..PHY Link dow
  149310:	70202c6e 7361656c 68632065 206b6365     n, please check 
  149320:	20656874 6c626163 6f632065 63656e6e     the cable connec
  149330:	6e6f6974 646e6120 6e696c20 6170206b     tion and link pa
  149340:	656e7472 65732072 6e697474 00002e67     rtner setting...

00149350 <_k_enet_ops>:
  149350:	00000000 00134e04 00134e4c 00134e88     .....N..LN...N..
  149360:	00134f38 00134838 32335b1b 2f495b6d     8O..8H...[32m[I/
  149370:	2e767264 74656e65 0000205d 63616d65     drv.enet] ..emac
  149380:	76656420 20656369 74696e69 63757320      device init suc
  149390:	73736563 00000000 63616d65 76656420     cess....emac dev
  1493a0:	20656369 74696e69 69616620 203a646c     ice init faild: 
  1493b0:	00006425 6b6e696c 6425645f 00000000     %d..link_d%d....

001493c0 <__FUNCTION__.9244>:
  1493c0:	695f7472 7536786d 74655f6c 78745f68     rt_imx6ul_eth_tx
  1493d0:	00000000 45535341 45205452 524f5252     ....ASSERT ERROR
  1493e0:	25202220 3a222073 6c696620 25222065      " %s ": file "%
  1493f0:	4c202273 20656e69 22642522 6e756620     s" Line "%d" fun
  149400:	6f697463 616e206e 2220656d 20227325     ction name "%s" 
  149410:	0000000a                                ....

00149414 <s_enetBases>:
  149414:	00000000 02188000 020b4000 74736e69     .........@..inst
  149424:	65636e61 41203c20 59415252 5a49535f     ance < ARRAY_SIZ
  149434:	5f732845 74656e65 65736142 00002973     E(s_enetBases)..
  149444:	666e6f63 00006769 646e6168 0000656c     config..handle..
  149454:	66667562 6f437265 6769666e 00000000     bufferConfig....
  149464:	66667562 6f437265 6769666e 78723e2d     bufferConfig->rx
  149474:	74536442 41747261 41726464 6e67696c     BdStartAddrAlign
  149484:	00000000 66667562 6f437265 6769666e     ....bufferConfig
  149494:	78743e2d 74536442 41747261 41726464     ->txBdStartAddrA
  1494a4:	6e67696c 00000000 66667562 6f437265     lign....bufferCo
  1494b4:	6769666e 78723e2d 66667542 6c417265     nfig->rxBufferAl
  1494c4:	006e6769 66667562 6f437265 6769666e     ign.bufferConfig
  1494d4:	78743e2d 66667542 6c417265 006e6769     ->txBufferAlign.
  1494e4:	4163616d 00726464 66667562 6f437265     macAddr.bufferCo
  1494f4:	6769666e 78723e2d 66667542 657a6953     nfig->rxBuffSize
  149504:	67696c41 3d3e206e 454e4520 58525f54     Align >= ENET_RX
  149514:	4e494d5f 4655425f 53524546 00455a49     _MIN_BUFFERSIZE.
  149524:	66667562 6f437265 6769666e 78743e2d     bufferConfig->tx
  149534:	66667542 657a6953 67696c41 202a206e     BuffSizeAlign * 
  149544:	66667562 6f437265 6769666e 78743e2d     bufferConfig->tx
  149554:	754e6442 7265626d 28203e20 54454e45     BdNumber > (ENET
  149564:	4152465f 4d5f454d 465f5841 454d4152     _FRAME_MAX_FRAME
  149574:	204e454c 4e45202b 465f5445 454d4152     LEN + ENET_FRAME
  149584:	414c565f 41545f4e 4e454c47 00000029     _VLAN_TAGLEN)...
  149594:	66667562 6f437265 6769666e 78743e2d     bufferConfig->tx
  1495a4:	66667542 657a6953 67696c41 202a206e     BuffSizeAlign * 
  1495b4:	66667562 6f437265 6769666e 78743e2d     bufferConfig->tx
  1495c4:	754e6442 7265626d 45203e20 5f54454e     BdNumber > ENET_
  1495d4:	4d415246 414d5f45 52465f58 4c454d41     FRAME_MAX_FRAMEL
  1495e4:	00004e45 66667562 6f437265 6769666e     EN..bufferConfig
  1495f4:	78723e2d 66667542 657a6953 67696c41     ->rxBuffSizeAlig
  149604:	202a206e 66667562 6f437265 6769666e     n * bufferConfig
  149614:	78723e2d 754e6442 7265626d 63203e20     ->rxBdNumber > c
  149624:	69666e6f 723e2d67 78614d78 6d617246     onfig->rxMaxFram
  149634:	6e654c65 00000000 64427874 72617453     eLen....txBdStar
  149644:	696c4174 00006e67 75427874 74536666     tAlign..txBuffSt
  149654:	41747261 6e67696c 00000000 64427872     artAlign....rxBd
  149664:	72617453 696c4174 00006e67 75427872     StartAlign..rxBu
  149674:	74536666 41747261 6e67696c 00000000     ffStartAlign....
  149684:	43637273 6b636f6c 007a485f 646e6168     srcClock_Hz.hand
  149694:	3e2d656c 64427872 72727543 00746e65     le->rxBdCurrent.
  1496a4:	72724565 7453726f 63697461 00000000     eErrorStatic....
  1496b4:	676e656c 00006874 31335b1b 2f455b6d     length...[31m[E/
  1496c4:	2e767264 74656e65 0000205d 6d617266     drv.enet] ..fram
  1496d4:	72652065 30726f72 72756320 66667542     e error0 curBuff
  1496e4:	63736544 2d706972 6e6f633e 6c6f7274     Descrip->control
  1496f4:	25783020 20783430 676e656c 25206874      0x%04x length %
  149704:	00000a64 6d305b1b 0000000a 6d617266     d....[0m....fram
  149714:	72652065 31726f72 72756320 66667542     e error1 curBuff
  149724:	63736544 2d706972 6e6f633e 6c6f7274     Descrip->control
  149734:	25783020 20783430 676e656c 25206874      0x%04x length %
  149744:	00000a64 646e6168 3e2d656c 64427874     d...handle->txBd
  149754:	72727543 00746e65 61746164 00000000     Current.data....
  149764:	676e656c 3c206874 4e45203d 465f5445     length <= ENET_F
  149774:	454d4152 58414d5f 4152465f 454c454d     RAME_MAX_FRAMELE
  149784:	0000004e 72646461 00737365              N...address.

00149790 <__FUNCTION__.9208>:
  149790:	54454e45 7465475f 74736e49 65636e61     ENET_GetInstance
  1497a0:	00000000                                ....

001497a4 <__FUNCTION__.9213>:
  1497a4:	54454e45 7465475f 61666544 43746c75     ENET_GetDefaultC
  1497b4:	69666e6f 00000067                       onfig...

001497bc <__FUNCTION__.9222>:
  1497bc:	54454e45 696e495f 00000074              ENET_Init...

001497c8 <__FUNCTION__.9231>:
  1497c8:	54454e45 7465535f 6c6c6143 6b636162     ENET_SetCallback
  1497d8:	00000000                                ....

001497dc <__FUNCTION__.9260>:
  1497dc:	54454e45 7465535f 75427854 72656666     ENET_SetTxBuffer
  1497ec:	63736544 74706972 0073726f              Descriptors.

001497f8 <__FUNCTION__.9274>:
  1497f8:	54454e45 7465535f 75427852 72656666     ENET_SetRxBuffer
  149808:	63736544 74706972 0073726f              Descriptors.

00149814 <__FUNCTION__.9296>:
  149814:	54454e45 7465475f 4163614d 00726464     ENET_GetMacAddr.

00149824 <__FUNCTION__.9303>:
  149824:	54454e45 7465535f 00494d53              ENET_SetSMI.

00149830 <__FUNCTION__.9343>:
  149830:	54454e45 7465475f 72457852 66654272     ENET_GetRxErrBef
  149840:	5265726f 46646165 656d6172 00000000     oreReadFrame....

00149850 <__FUNCTION__.9355>:
  149850:	54454e45 6165525f 61724664 0000656d     ENET_ReadFrame..

00149860 <__FUNCTION__.9362>:
  149860:	54454e45 6470555f 52657461 42646165     ENET_UpdateReadB
  149870:	65666675 00007372                       uffers..

00149878 <__FUNCTION__.9370>:
  149878:	54454e45 6e65535f 61724664 0000656d     ENET_SendFrame..

00149888 <__FUNCTION__.9379>:
  149888:	54454e45 6464415f 746c754d 73616369     ENET_AddMulticas
  149898:	6f724774 00007075                       tGroup..

001498a0 <__FUNCTION__.9394>:
  1498a0:	54454e45 61654c5f 754d6576 6369746c     ENET_LeaveMultic
  1498b0:	47747361 70756f72 00000000 76726573     astGroup....serv
  1498c0:	73656369 49776c2f 74694b50 7672642f     ices/lwIPKit/drv
  1498d0:	656e655f 72642f74 72657669 6c73662f     _enet/driver/fsl
  1498e0:	6970675f 00632e6f 206e6970 3233203c     _gpio.c.pin < 32
  1498f0:	00000000                                ....

001498f4 <__func__.6332>:
  1498f4:	4f495047 6972575f 69506574 74754f6e     GPIO_WritePinOut
  149904:	00747570 61746164 00727450 74617473     put.dataPtr.stat
  149914:	00007375 6c707564 00007865              us..duplex..

00149920 <__FUNCTION__.8394>:
  149920:	5f594850 64616552 00000000              PHY_Read....

0014992c <__FUNCTION__.8412>:
  14992c:	5f594850 4c746547 536b6e69 75746174     PHY_GetLinkStatu
  14993c:	00000073                                s...

00149940 <__FUNCTION__.8421>:
  149940:	5f594850 4c746547 536b6e69 64656570     PHY_GetLinkSpeed
  149950:	6c707544 00007865                       Duplex..

00149958 <errid>:
  149958:	19222154 0302010d 0c1c4b11 1d0b0410     T!"......K......
  149968:	68271e12 71706f6e 06052062 1514130f     ..'hnopqb ......
  149978:	0716081a 18172428 1b0e0a09 8323251f     ....($.......%#.
  149988:	2a267d82 3e3d3c2b 4a47433f 5a59584d     .}&*+<=>?CGJMXYZ
  149998:	5e5d5c5b 6361605f 67666564 6c6b6a69     [\]^_`acdefgijkl
  1499a8:	79747372 487c7b7a 00000000              rstyz{|H....

001499b4 <errmsg>:
  1499b4:	656c6c49 206c6167 65747962 71657320     Illegal byte seq
  1499c4:	636e6575 6f440065 6e69616d 72726520     uence.Domain err
  1499d4:	5200726f 6c757365 6f6e2074 65722074     or.Result not re
  1499e4:	73657270 61746e65 00656c62 20746f4e     presentable.Not 
  1499f4:	74742061 65500079 73696d72 6e6f6973     a tty.Permission
  149a04:	6e656420 00646569 7265704f 6f697461      denied.Operatio
  149a14:	6f6e206e 65702074 74696d72 00646574     n not permitted.
  149a24:	73206f4e 20686375 656c6966 20726f20     No such file or 
  149a34:	65726964 726f7463 6f4e0079 63757320     directory.No suc
  149a44:	72702068 7365636f 69460073 6520656c     h process.File e
  149a54:	74736978 61560073 2065756c 206f6f74     xists.Value too 
  149a64:	6772616c 6f662065 61642072 74206174     large for data t
  149a74:	00657079 73206f4e 65636170 66656c20     ype.No space lef
  149a84:	6e6f2074 76656420 00656369 2074754f     t on device.Out 
  149a94:	6d20666f 726f6d65 65520079 72756f73     of memory.Resour
  149aa4:	62206563 00797375 65746e49 70757272     ce busy.Interrup
  149ab4:	20646574 74737973 63206d65 006c6c61     ted system call.
  149ac4:	6f736552 65637275 6d657420 61726f70     Resource tempora
  149ad4:	796c6972 616e7520 6c696176 656c6261     rily unavailable
  149ae4:	766e4900 64696c61 65657320 7243006b     .Invalid seek.Cr
  149af4:	2d73736f 69766564 6c206563 006b6e69     oss-device link.
  149b04:	64616552 6c6e6f2d 69662079 7320656c     Read-only file s
  149b14:	65747379 6944006d 74636572 2079726f     ystem.Directory 
  149b24:	20746f6e 74706d65 6f430079 63656e6e     not empty.Connec
  149b34:	6e6f6974 73657220 62207465 65702079     tion reset by pe
  149b44:	4f007265 61726570 6e6f6974 6d697420     er.Operation tim
  149b54:	6f206465 43007475 656e6e6f 6f697463     ed out.Connectio
  149b64:	6572206e 65737566 6f480064 69207473     n refused.Host i
  149b74:	6f642073 48006e77 2074736f 75207369     s down.Host is u
  149b84:	6165726e 62616863 4100656c 65726464     nreachable.Addre
  149b94:	69207373 7375206e 72420065 6e656b6f     ss in use.Broken
  149ba4:	70697020 2f490065 7265204f 00726f72      pipe.I/O error.
  149bb4:	73206f4e 20686375 69766564 6f206563     No such device o
  149bc4:	64612072 73657264 6c420073 206b636f     r address.Block 
  149bd4:	69766564 72206563 69757165 00646572     device required.
  149be4:	73206f4e 20686375 69766564 4e006563     No such device.N
  149bf4:	6120746f 72696420 6f746365 49007972     ot a directory.I
  149c04:	20612073 65726964 726f7463 65540079     s a directory.Te
  149c14:	66207478 20656c69 79737562 65784500     xt file busy.Exe
  149c24:	6f662063 74616d72 72726520 4900726f     c format error.I
  149c34:	6c61766e 61206469 6d756772 00746e65     nvalid argument.
  149c44:	75677241 746e656d 73696c20 6f742074     Argument list to
  149c54:	6f6c206f 5300676e 6f626d79 2063696c     o long.Symbolic 
  149c64:	6b6e696c 6f6f6c20 69460070 616e656c     link loop.Filena
  149c74:	7420656d 6c206f6f 00676e6f 206f6f54     me too long.Too 
  149c84:	796e616d 65706f20 6966206e 2073656c     many open files 
  149c94:	73206e69 65747379 6f4e006d 6c696620     in system.No fil
  149ca4:	65642065 69726373 726f7470 76612073     e descriptors av
  149cb4:	616c6961 00656c62 20646142 656c6966     ailable.Bad file
  149cc4:	73656420 70697263 00726f74 63206f4e      descriptor.No c
  149cd4:	646c6968 6f727020 73736563 64614200     hild process.Bad
  149ce4:	64646120 73736572 6c694600 6f742065      address.File to
  149cf4:	616c206f 00656772 206f6f54 796e616d     o large.Too many
  149d04:	6e696c20 4e00736b 6f6c206f 20736b63      links.No locks 
  149d14:	69617661 6c62616c 65520065 72756f73     available.Resour
  149d24:	64206563 6c646165 206b636f 6c756f77     ce deadlock woul
  149d34:	636f2064 00727563 74617453 6f6e2065     d occur.State no
  149d44:	65722074 65766f63 6c626172 72500065     t recoverable.Pr
  149d54:	6f697665 6f207375 72656e77 65696420     evious owner die
  149d64:	704f0064 74617265 206e6f69 636e6163     d.Operation canc
  149d74:	64656c65 6e754600 6f697463 6f6e206e     eled.Function no
  149d84:	6d692074 6d656c70 65746e65 6f4e0064     t implemented.No
  149d94:	73656d20 65676173 20666f20 69736564      message of desi
  149da4:	20646572 65707974 65644900 6669746e     red type.Identif
  149db4:	20726569 6f6d6572 00646576 69766544     ier removed.Devi
  149dc4:	6e206563 6120746f 72747320 006d6165     ce not a stream.
  149dd4:	64206f4e 20617461 69617661 6c62616c     No data availabl
  149de4:	65440065 65636976 6d697420 74756f65     e.Device timeout
  149df4:	74754f00 20666f20 65727473 20736d61     .Out of streams 
  149e04:	6f736572 65637275 694c0073 68206b6e     resources.Link h
  149e14:	62207361 206e6565 65766573 00646572     as been severed.
  149e24:	746f7250 6c6f636f 72726520 4200726f     Protocol error.B
  149e34:	6d206461 61737365 46006567 20656c69     ad message.File 
  149e44:	63736564 74706972 6920726f 6162206e     descriptor in ba
  149e54:	74732064 00657461 20746f4e 6f732061     d state.Not a so
  149e64:	74656b63 73654400 616e6974 6e6f6974     cket.Destination
  149e74:	64646120 73736572 71657220 65726975      address require
  149e84:	654d0064 67617373 6f742065 616c206f     d.Message too la
  149e94:	00656772 746f7250 6c6f636f 6f727720     rge.Protocol wro
  149ea4:	7420676e 20657079 20726f66 6b636f73     ng type for sock
  149eb4:	50007465 6f746f72 206c6f63 20746f6e     et.Protocol not 
  149ec4:	69617661 6c62616c 72500065 636f746f     available.Protoc
  149ed4:	6e206c6f 7320746f 6f707075 64657472     ol not supported
  149ee4:	636f5300 2074656b 65707974 746f6e20     .Socket type not
  149ef4:	70757320 74726f70 4e006465 7320746f      supported.Not s
  149f04:	6f707075 64657472 6f725000 6f636f74     upported.Protoco
  149f14:	6166206c 796c696d 746f6e20 70757320     l family not sup
  149f24:	74726f70 41006465 65726464 66207373     ported.Address f
  149f34:	6c696d61 6f6e2079 75732074 726f7070     amily not suppor
  149f44:	20646574 70207962 6f746f72 006c6f63     ted by protocol.
  149f54:	72646441 20737365 20746f6e 69617661     Address not avai
  149f64:	6c62616c 654e0065 726f7774 7369206b     lable.Network is
  149f74:	776f6420 654e006e 726f7774 6e75206b      down.Network un
  149f84:	63616572 6c626168 6f430065 63656e6e     reachable.Connec
  149f94:	6e6f6974 73657220 62207465 656e2079     tion reset by ne
  149fa4:	726f7774 6f43006b 63656e6e 6e6f6974     twork.Connection
  149fb4:	6f626120 64657472 206f4e00 66667562      aborted.No buff
  149fc4:	73207265 65636170 61766120 62616c69     er space availab
  149fd4:	5300656c 656b636f 73692074 6e6f6320     le.Socket is con
  149fe4:	7463656e 53006465 656b636f 6f6e2074     nected.Socket no
  149ff4:	6f632074 63656e6e 00646574 6e6e6143     t connected.Cann
  14a004:	7320746f 20646e65 65746661 6f732072     ot send after so
  14a014:	74656b63 75687320 776f6474 704f006e     cket shutdown.Op
  14a024:	74617265 206e6f69 65726c61 20796461     eration already 
  14a034:	70206e69 72676f72 00737365 7265704f     in progress.Oper
  14a044:	6f697461 6e69206e 6f727020 73657267     ation in progres
  14a054:	74530073 20656c61 656c6966 6e616820     s.Stale file han
  14a064:	00656c64 6f6d6552 49206574 65204f2f     dle.Remote I/O e
  14a074:	726f7272 6f755100 65206174 65656378     rror.Quota excee
  14a084:	00646564 6d206f4e 75696465 6f66206d     ded.No medium fo
  14a094:	00646e75 6e6f7257 656d2067 6d756964     und.Wrong medium
  14a0a4:	70797420 754d0065 6869746c 6120706f      type.Multihop a
  14a0b4:	6d657474 64657470 206f4e00 6f727265     ttempted.No erro
  14a0c4:	6e692072 6d726f66 6f697461 0000006e     r information...
  14a0d4:	65737341 6f697472 6166206e 64656c69     Assertion failed
  14a0e4:	7325203a 73252820 7325203a 6425203a     : %s (%s: %s: %d
  14a0f4:	00000a29                                )...

0014a0f8 <__FUNCTION__.6013>:
  14a0f8:	63737973 5f6c6c61 74736572 5f747261     syscall_restart_
  14a108:	63737973 006c6c61                       syscall.

0014a110 <__FUNCTION__.6017>:
  14a110:	63737973 5f6c6c61 74697865 00000000     syscall_exit....

0014a120 <__FUNCTION__.6020>:
  14a120:	63737973 5f6c6c61 6b726f66 00000000     syscall_fork....

0014a130 <__FUNCTION__.6026>:
  14a130:	63737973 5f6c6c61 64616572 00000000     syscall_read....

0014a140 <__FUNCTION__.6032>:
  14a140:	63737973 5f6c6c61 74697277 00000065     syscall_write...

0014a150 <__FUNCTION__.6038>:
  14a150:	63737973 5f6c6c61 6e65706f 00000000     syscall_open....

0014a160 <__FUNCTION__.6042>:
  14a160:	63737973 5f6c6c61 736f6c63 00000065     syscall_close...

0014a170 <__FUNCTION__.6045>:
  14a170:	63737973 5f6c6c61 61657263 00000074     syscall_creat...

0014a180 <__FUNCTION__.6048>:
  14a180:	63737973 5f6c6c61 6b6e696c 00000000     syscall_link....

0014a190 <__FUNCTION__.6052>:
  14a190:	63737973 5f6c6c61 696c6e75 00006b6e     syscall_unlink..

0014a1a0 <__FUNCTION__.6058>:
  14a1a0:	63737973 5f6c6c61 63657865 00006576     syscall_execve..

0014a1b0 <__FUNCTION__.6062>:
  14a1b0:	63737973 5f6c6c61 69646863 00000072     syscall_chdir...

0014a1c0 <__FUNCTION__.6065>:
  14a1c0:	63737973 5f6c6c61 6f6e6b6d 00000064     syscall_mknod...

0014a1d0 <__FUNCTION__.6068>:
  14a1d0:	63737973 5f6c6c61 6f6d6863 00000064     syscall_chmod...

0014a1e0 <__FUNCTION__.6071>:
  14a1e0:	63737973 5f6c6c61 6f68636c 00006e77     syscall_lchown..

0014a1f0 <__FUNCTION__.6077>:
  14a1f0:	63737973 5f6c6c61 6565736c 0000006b     syscall_lseek...

0014a200 <__FUNCTION__.6080>:
  14a200:	63737973 5f6c6c61 70746567 00006469     syscall_getpid..

0014a210 <__FUNCTION__.6083>:
  14a210:	63737973 5f6c6c61 6e756f6d 00000074     syscall_mount...

0014a220 <__FUNCTION__.6086>:
  14a220:	63737973 5f6c6c61 75746573 00006469     syscall_setuid..

0014a230 <__FUNCTION__.6089>:
  14a230:	63737973 5f6c6c61 75746567 00006469     syscall_getuid..

0014a240 <__FUNCTION__.6092>:
  14a240:	63737973 5f6c6c61 61727470 00006563     syscall_ptrace..

0014a250 <__FUNCTION__.6095>:
  14a250:	63737973 5f6c6c61 73756170 00000065     syscall_pause...

0014a260 <__FUNCTION__.6100>:
  14a260:	63737973 5f6c6c61 65636361 00007373     syscall_access..

0014a270 <__FUNCTION__.6103>:
  14a270:	63737973 5f6c6c61 6563696e 00000000     syscall_nice....

0014a280 <__FUNCTION__.6106>:
  14a280:	63737973 5f6c6c61 636e7973 00000000     syscall_sync....

0014a290 <__FUNCTION__.6111>:
  14a290:	63737973 5f6c6c61 6c6c696b 00000000     syscall_kill....

0014a2a0 <__FUNCTION__.6116>:
  14a2a0:	63737973 5f6c6c61 616e6572 0000656d     syscall_rename..

0014a2b0 <__FUNCTION__.6121>:
  14a2b0:	63737973 5f6c6c61 69646b6d 00000072     syscall_mkdir...

0014a2c0 <__FUNCTION__.6125>:
  14a2c0:	63737973 5f6c6c61 69646d72 00000072     syscall_rmdir...

0014a2d0 <__FUNCTION__.6129>:
  14a2d0:	63737973 5f6c6c61 00707564              syscall_dup.

0014a2dc <__FUNCTION__.6133>:
  14a2dc:	63737973 5f6c6c61 65706970 00000000     syscall_pipe....

0014a2ec <__FUNCTION__.6136>:
  14a2ec:	63737973 5f6c6c61 656d6974 00000073     syscall_times...

0014a2fc <__FUNCTION__.6140>:
  14a2fc:	63737973 5f6c6c61 006b7262              syscall_brk.

0014a308 <__FUNCTION__.6143>:
  14a308:	63737973 5f6c6c61 67746573 00006469     syscall_setgid..

0014a318 <__FUNCTION__.6146>:
  14a318:	63737973 5f6c6c61 67746567 00006469     syscall_getgid..

0014a328 <__FUNCTION__.6149>:
  14a328:	63737973 5f6c6c61 65746567 00646975     syscall_geteuid.

0014a338 <__FUNCTION__.6152>:
  14a338:	63737973 5f6c6c61 65746567 00646967     syscall_getegid.

0014a348 <__FUNCTION__.6155>:
  14a348:	63737973 5f6c6c61 74636361 00000000     syscall_acct....

0014a358 <__FUNCTION__.6158>:
  14a358:	63737973 5f6c6c61 756f6d75 0032746e     syscall_umount2.

0014a368 <__FUNCTION__.6164>:
  14a368:	63737973 5f6c6c61 74636f69 0000006c     syscall_ioctl...

0014a378 <__FUNCTION__.6170>:
  14a378:	63737973 5f6c6c61 746e6366 0000006c     syscall_fcntl...

0014a388 <__FUNCTION__.6173>:
  14a388:	63737973 5f6c6c61 70746573 00646967     syscall_setpgid.

0014a398 <__FUNCTION__.6176>:
  14a398:	63737973 5f6c6c61 73616d75 0000006b     syscall_umask...

0014a3a8 <__FUNCTION__.6179>:
  14a3a8:	63737973 5f6c6c61 6f726863 0000746f     syscall_chroot..

0014a3b8 <__FUNCTION__.6182>:
  14a3b8:	63737973 5f6c6c61 61747375 00000074     syscall_ustat...

0014a3c8 <__FUNCTION__.6187>:
  14a3c8:	63737973 5f6c6c61 32707564 00000000     syscall_dup2....

0014a3d8 <__FUNCTION__.6190>:
  14a3d8:	63737973 5f6c6c61 70746567 00646970     syscall_getppid.

0014a3e8 <__FUNCTION__.6193>:
  14a3e8:	63737973 5f6c6c61 70746567 00707267     syscall_getpgrp.

0014a3f8 <__FUNCTION__.6196>:
  14a3f8:	63737973 5f6c6c61 73746573 00006469     syscall_setsid..

0014a408 <__FUNCTION__.6203>:
  14a408:	63737973 5f6c6c61 61676973 6f697463     syscall_sigactio
  14a418:	0000006e                                n...

0014a41c <__FUNCTION__.6206>:
  14a41c:	63737973 5f6c6c61 72746573 64697565     syscall_setreuid
  14a42c:	00000000                                ....

0014a430 <__FUNCTION__.6209>:
  14a430:	63737973 5f6c6c61 72746573 64696765     syscall_setregid
  14a440:	00000000                                ....

0014a444 <__FUNCTION__.6212>:
  14a444:	63737973 5f6c6c61 73676973 65707375     syscall_sigsuspe
  14a454:	0000646e                                nd..

0014a458 <__FUNCTION__.6215>:
  14a458:	63737973 5f6c6c61 70676973 69646e65     syscall_sigpendi
  14a468:	0000676e                                ng..

0014a46c <__FUNCTION__.6218>:
  14a46c:	63737973 5f6c6c61 68746573 6e74736f     syscall_sethostn
  14a47c:	00656d61                                ame.

0014a480 <__FUNCTION__.6223>:
  14a480:	63737973 5f6c6c61 72746573 696d696c     syscall_setrlimi
  14a490:	00000074                                t...

0014a494 <__FUNCTION__.6226>:
  14a494:	63737973 5f6c6c61 72746567 67617375     syscall_getrusag
  14a4a4:	00000065                                e...

0014a4a8 <__FUNCTION__.6229>:
  14a4a8:	63737973 5f6c6c61 74746567 6f656d69     syscall_gettimeo
  14a4b8:	79616466 00000000                       fday....

0014a4c0 <__FUNCTION__.6232>:
  14a4c0:	63737973 5f6c6c61 74746573 6f656d69     syscall_settimeo
  14a4d0:	79616466 00000000                       fday....

0014a4d8 <__FUNCTION__.6235>:
  14a4d8:	63737973 5f6c6c61 67746567 70756f72     syscall_getgroup
  14a4e8:	00000073                                s...

0014a4ec <__FUNCTION__.6238>:
  14a4ec:	63737973 5f6c6c61 67746573 70756f72     syscall_setgroup
  14a4fc:	00000073                                s...

0014a500 <__FUNCTION__.6241>:
  14a500:	63737973 5f6c6c61 6c6d7973 006b6e69     syscall_symlink.

0014a510 <__FUNCTION__.6247>:
  14a510:	63737973 5f6c6c61 64616572 6b6e696c     syscall_readlink
  14a520:	00000000                                ....

0014a524 <__FUNCTION__.6250>:
  14a524:	63737973 5f6c6c61 6c657375 00006269     syscall_uselib..

0014a534 <__FUNCTION__.6253>:
  14a534:	63737973 5f6c6c61 70617773 00006e6f     syscall_swapon..

0014a544 <__FUNCTION__.6256>:
  14a544:	63737973 5f6c6c61 6f626572 0000746f     syscall_reboot..

0014a554 <__FUNCTION__.6261>:
  14a554:	63737973 5f6c6c61 6d6e756d 00007061     syscall_munmap..

0014a564 <__FUNCTION__.6264>:
  14a564:	63737973 5f6c6c61 6e757274 65746163     syscall_truncate
  14a574:	00000000                                ....

0014a578 <__FUNCTION__.6267>:
  14a578:	63737973 5f6c6c61 75727466 7461636e     syscall_ftruncat
  14a588:	00000065                                e...

0014a58c <__FUNCTION__.6270>:
  14a58c:	63737973 5f6c6c61 6d686366 0000646f     syscall_fchmod..

0014a59c <__FUNCTION__.6273>:
  14a59c:	63737973 5f6c6c61 6f686366 00006e77     syscall_fchown..

0014a5ac <__FUNCTION__.6276>:
  14a5ac:	63737973 5f6c6c61 70746567 726f6972     syscall_getprior
  14a5bc:	00797469                                ity.

0014a5c0 <__FUNCTION__.6279>:
  14a5c0:	63737973 5f6c6c61 70746573 726f6972     syscall_setprior
  14a5d0:	00797469                                ity.

0014a5d4 <__FUNCTION__.6285>:
  14a5d4:	63737973 5f6c6c61 74617473 00007366     syscall_statfs..

0014a5e4 <__FUNCTION__.6291>:
  14a5e4:	63737973 5f6c6c61 61747366 00736674     syscall_fstatfs.

0014a5f4 <__FUNCTION__.6294>:
  14a5f4:	63737973 5f6c6c61 6c737973 0000676f     syscall_syslog..

0014a604 <__FUNCTION__.6297>:
  14a604:	63737973 5f6c6c61 69746573 656d6974     syscall_setitime
  14a614:	00000072                                r...

0014a618 <__FUNCTION__.6300>:
  14a618:	63737973 5f6c6c61 69746567 656d6974     syscall_getitime
  14a628:	00000072                                r...

0014a62c <__FUNCTION__.6305>:
  14a62c:	63737973 5f6c6c61 74617473 00000000     syscall_stat....

0014a63c <__FUNCTION__.6310>:
  14a63c:	63737973 5f6c6c61 6174736c 00000074     syscall_lstat...

0014a64c <__FUNCTION__.6315>:
  14a64c:	63737973 5f6c6c61 61747366 00000074     syscall_fstat...

0014a65c <__FUNCTION__.6318>:
  14a65c:	63737973 5f6c6c61 6e616876 00707567     syscall_vhangup.

0014a66c <__FUNCTION__.6321>:
  14a66c:	63737973 5f6c6c61 74696177 00000034     syscall_wait4...

0014a67c <__FUNCTION__.6324>:
  14a67c:	63737973 5f6c6c61 70617773 0066666f     syscall_swapoff.

0014a68c <__FUNCTION__.6327>:
  14a68c:	63737973 5f6c6c61 69737973 006f666e     syscall_sysinfo.

0014a69c <__FUNCTION__.6331>:
  14a69c:	63737973 5f6c6c61 6e797366 00000063     syscall_fsync...

0014a6ac <__FUNCTION__.6334>:
  14a6ac:	63737973 5f6c6c61 72676973 72757465     syscall_sigretur
  14a6bc:	0000006e                                n...

0014a6c0 <__FUNCTION__.6337>:
  14a6c0:	63737973 5f6c6c61 6e6f6c63 00000065     syscall_clone...

0014a6d0 <__FUNCTION__.6340>:
  14a6d0:	63737973 5f6c6c61 64746573 69616d6f     syscall_setdomai
  14a6e0:	6d616e6e 00000065                       nname...

0014a6e8 <__FUNCTION__.6343>:
  14a6e8:	63737973 5f6c6c61 6d616e75 00000065     syscall_uname...

0014a6f8 <__FUNCTION__.6346>:
  14a6f8:	63737973 5f6c6c61 746a6461 78656d69     syscall_adjtimex
  14a708:	00000000                                ....

0014a70c <__FUNCTION__.6349>:
  14a70c:	63737973 5f6c6c61 6f72706d 74636574     syscall_mprotect
  14a71c:	00000000                                ....

0014a720 <__FUNCTION__.6356>:
  14a720:	63737973 5f6c6c61 70676973 6d636f72     syscall_sigprocm
  14a730:	006b7361                                ask.

0014a734 <__FUNCTION__.6359>:
  14a734:	63737973 5f6c6c61 74696e69 646f6d5f     syscall_init_mod
  14a744:	00656c75                                ule.

0014a748 <__FUNCTION__.6362>:
  14a748:	63737973 5f6c6c61 656c6564 6d5f6574     syscall_delete_m
  14a758:	6c75646f 00000065                       odule...

0014a760 <__FUNCTION__.6365>:
  14a760:	63737973 5f6c6c61 746f7571 6c746361     syscall_quotactl
  14a770:	00000000                                ....

0014a774 <__FUNCTION__.6368>:
  14a774:	63737973 5f6c6c61 70746567 00646967     syscall_getpgid.

0014a784 <__FUNCTION__.6371>:
  14a784:	63737973 5f6c6c61 64686366 00007269     syscall_fchdir..

0014a794 <__FUNCTION__.6374>:
  14a794:	63737973 5f6c6c61 6c666462 00687375     syscall_bdflush.

0014a7a4 <__FUNCTION__.6377>:
  14a7a4:	63737973 5f6c6c61 66737973 00000073     syscall_sysfs...

0014a7b4 <__FUNCTION__.6380>:
  14a7b4:	63737973 5f6c6c61 73726570 6c616e6f     syscall_personal
  14a7c4:	00797469                                ity.

0014a7c8 <__FUNCTION__.6383>:
  14a7c8:	63737973 5f6c6c61 66746573 64697573     syscall_setfsuid
  14a7d8:	00000000                                ....

0014a7dc <__FUNCTION__.6386>:
  14a7dc:	63737973 5f6c6c61 66746573 64696773     syscall_setfsgid
  14a7ec:	00000000                                ....

0014a7f0 <__FUNCTION__.6394>:
  14a7f0:	63737973 5f6c6c61 736c6c5f 006b6565     syscall__llseek.

0014a800 <__FUNCTION__.6400>:
  14a800:	63737973 5f6c6c61 64746567 73746e65     syscall_getdents
  14a810:	00000000                                ....

0014a814 <__FUNCTION__.6408>:
  14a814:	63737973 5f6c6c61 77656e5f 656c6573     syscall__newsele
  14a824:	00007463                                ct..

0014a828 <__FUNCTION__.6411>:
  14a828:	63737973 5f6c6c61 636f6c66 0000006b     syscall_flock...

0014a838 <__FUNCTION__.6414>:
  14a838:	63737973 5f6c6c61 6e79736d 00000063     syscall_msync...

0014a848 <__FUNCTION__.6422>:
  14a848:	63737973 5f6c6c61 64616572 00000076     syscall_readv...

0014a858 <__FUNCTION__.6434>:
  14a858:	63737973 5f6c6c61 74697277 00007665     syscall_writev..

0014a868 <__FUNCTION__.6441>:
  14a868:	63737973 5f6c6c61 73746567 00006469     syscall_getsid..

0014a878 <__FUNCTION__.6444>:
  14a878:	63737973 5f6c6c61 74616466 6e797361     syscall_fdatasyn
  14a888:	00000063                                c...

0014a88c <__FUNCTION__.6447>:
  14a88c:	63737973 5f6c6c61 7379735f 006c7463     syscall__sysctl.

0014a89c <__FUNCTION__.6450>:
  14a89c:	63737973 5f6c6c61 636f6c6d 0000006b     syscall_mlock...

0014a8ac <__FUNCTION__.6453>:
  14a8ac:	63737973 5f6c6c61 6c6e756d 006b636f     syscall_munlock.

0014a8bc <__FUNCTION__.6456>:
  14a8bc:	63737973 5f6c6c61 636f6c6d 6c6c616b     syscall_mlockall
  14a8cc:	00000000                                ....

0014a8d0 <__FUNCTION__.6459>:
  14a8d0:	63737973 5f6c6c61 6c6e756d 616b636f     syscall_munlocka
  14a8e0:	00006c6c                                ll..

0014a8e4 <__FUNCTION__.6464>:
  14a8e4:	63737973 5f6c6c61 65686373 65735f64     syscall_sched_se
  14a8f4:	72617074 00006d61                       tparam..

0014a8fc <__FUNCTION__.6469>:
  14a8fc:	63737973 5f6c6c61 65686373 65675f64     syscall_sched_ge
  14a90c:	72617074 00006d61                       tparam..

0014a914 <__FUNCTION__.6475>:
  14a914:	63737973 5f6c6c61 65686373 65735f64     syscall_sched_se
  14a924:	68637374 6c756465 00007265              tscheduler..

0014a930 <__FUNCTION__.6481>:
  14a930:	63737973 5f6c6c61 65686373 65675f64     syscall_sched_ge
  14a940:	68637374 6c756465 00007265              tscheduler..

0014a94c <__FUNCTION__.6484>:
  14a94c:	63737973 5f6c6c61 65686373 69795f64     syscall_sched_yi
  14a95c:	00646c65                                eld.

0014a960 <__FUNCTION__.6488>:
  14a960:	63737973 5f6c6c61 65686373 65675f64     syscall_sched_ge
  14a970:	72705f74 69726f69 6d5f7974 00007861     t_priority_max..

0014a980 <__FUNCTION__.6492>:
  14a980:	63737973 5f6c6c61 65686373 65675f64     syscall_sched_ge
  14a990:	72705f74 69726f69 6d5f7974 00006e69     t_priority_min..

0014a9a0 <__FUNCTION__.6495>:
  14a9a0:	63737973 5f6c6c61 65686373 72725f64     syscall_sched_rr
  14a9b0:	7465675f 746e695f 61767265 0000006c     _get_interval...

0014a9c0 <__FUNCTION__.6500>:
  14a9c0:	63737973 5f6c6c61 6f6e616e 65656c73     syscall_nanoslee
  14a9d0:	00000070                                p...

0014a9d4 <__FUNCTION__.6508>:
  14a9d4:	63737973 5f6c6c61 6d65726d 00007061     syscall_mremap..

0014a9e4 <__FUNCTION__.6511>:
  14a9e4:	63737973 5f6c6c61 72746573 69757365     syscall_setresui
  14a9f4:	00000064                                d...

0014a9f8 <__FUNCTION__.6514>:
  14a9f8:	63737973 5f6c6c61 72746567 69757365     syscall_getresui
  14aa08:	00000064                                d...

0014aa0c <__FUNCTION__.6520>:
  14aa0c:	63737973 5f6c6c61 6c6c6f70 00000000     syscall_poll....

0014aa1c <__FUNCTION__.6523>:
  14aa1c:	63737973 5f6c6c61 7373666e 63767265     syscall_nfsservc
  14aa2c:	00006c74                                tl..

0014aa30 <__FUNCTION__.6526>:
  14aa30:	63737973 5f6c6c61 72746573 69677365     syscall_setresgi
  14aa40:	00000064                                d...

0014aa44 <__FUNCTION__.6529>:
  14aa44:	63737973 5f6c6c61 72746567 69677365     syscall_getresgi
  14aa54:	00000064                                d...

0014aa58 <__FUNCTION__.6532>:
  14aa58:	63737973 5f6c6c61 74637270 0000006c     syscall_prctl...

0014aa68 <__FUNCTION__.6535>:
  14aa68:	63737973 5f6c6c61 735f7472 65726769     syscall_rt_sigre
  14aa78:	6e727574 00000000                       turn....

0014aa80 <__FUNCTION__.6543>:
  14aa80:	63737973 5f6c6c61 735f7472 63616769     syscall_rt_sigac
  14aa90:	6e6f6974 00000000                       tion....

0014aa98 <__FUNCTION__.6551>:
  14aa98:	63737973 5f6c6c61 735f7472 72706769     syscall_rt_sigpr
  14aaa8:	616d636f 00006b73                       ocmask..

0014aab0 <__FUNCTION__.6554>:
  14aab0:	63737973 5f6c6c61 735f7472 65706769     syscall_rt_sigpe
  14aac0:	6e69646e 00000067                       nding...

0014aac8 <__FUNCTION__.6557>:
  14aac8:	63737973 5f6c6c61 735f7472 69746769     syscall_rt_sigti
  14aad8:	7764656d 00746961                       medwait.

0014aae0 <__FUNCTION__.6560>:
  14aae0:	63737973 5f6c6c61 735f7472 75716769     syscall_rt_sigqu
  14aaf0:	69657565 006f666e                       eueinfo.

0014aaf8 <__FUNCTION__.6563>:
  14aaf8:	63737973 5f6c6c61 735f7472 75736769     syscall_rt_sigsu
  14ab08:	6e657073 00000064                       spend...

0014ab10 <__FUNCTION__.6566>:
  14ab10:	63737973 5f6c6c61 61657270 00343664     syscall_pread64.

0014ab20 <__FUNCTION__.6569>:
  14ab20:	63737973 5f6c6c61 69727770 34366574     syscall_pwrite64
  14ab30:	00000000                                ....

0014ab34 <__FUNCTION__.6572>:
  14ab34:	63737973 5f6c6c61 776f6863 0000006e     syscall_chown...

0014ab44 <__FUNCTION__.6577>:
  14ab44:	63737973 5f6c6c61 63746567 00006477     syscall_getcwd..

0014ab54 <__FUNCTION__.6580>:
  14ab54:	63737973 5f6c6c61 67706163 00007465     syscall_capget..

0014ab64 <__FUNCTION__.6583>:
  14ab64:	63737973 5f6c6c61 73706163 00007465     syscall_capset..

0014ab74 <__FUNCTION__.6586>:
  14ab74:	63737973 5f6c6c61 61676973 7473746c     syscall_sigaltst
  14ab84:	006b6361                                ack.

0014ab88 <__FUNCTION__.6589>:
  14ab88:	63737973 5f6c6c61 646e6573 656c6966     syscall_sendfile
  14ab98:	00000000                                ....

0014ab9c <__FUNCTION__.6592>:
  14ab9c:	63737973 5f6c6c61 726f6676 0000006b     syscall_vfork...

0014abac <__FUNCTION__.6597>:
  14abac:	63737973 5f6c6c61 74656775 6d696c72     syscall_ugetrlim
  14abbc:	00007469                                it..

0014abc0 <__FUNCTION__.6606>:
  14abc0:	63737973 5f6c6c61 70616d6d 00000032     syscall_mmap2...

0014abd0 <__FUNCTION__.6609>:
  14abd0:	63737973 5f6c6c61 6e757274 65746163     syscall_truncate
  14abe0:	00003436                                64..

0014abe4 <__FUNCTION__.6612>:
  14abe4:	63737973 5f6c6c61 75727466 7461636e     syscall_ftruncat
  14abf4:	00343665                                e64.

0014abf8 <__FUNCTION__.6617>:
  14abf8:	63737973 5f6c6c61 74617473 00003436     syscall_stat64..

0014ac08 <__FUNCTION__.6622>:
  14ac08:	63737973 5f6c6c61 6174736c 00343674     syscall_lstat64.

0014ac18 <__FUNCTION__.6627>:
  14ac18:	63737973 5f6c6c61 61747366 00343674     syscall_fstat64.

0014ac28 <__FUNCTION__.6630>:
  14ac28:	63737973 5f6c6c61 6f68636c 32336e77     syscall_lchown32
  14ac38:	00000000                                ....

0014ac3c <__FUNCTION__.6633>:
  14ac3c:	63737973 5f6c6c61 75746567 32336469     syscall_getuid32
  14ac4c:	00000000                                ....

0014ac50 <__FUNCTION__.6636>:
  14ac50:	63737973 5f6c6c61 67746567 32336469     syscall_getgid32
  14ac60:	00000000                                ....

0014ac64 <__FUNCTION__.6639>:
  14ac64:	63737973 5f6c6c61 65746567 33646975     syscall_geteuid3
  14ac74:	00000032                                2...

0014ac78 <__FUNCTION__.6642>:
  14ac78:	63737973 5f6c6c61 65746567 33646967     syscall_getegid3
  14ac88:	00000032                                2...

0014ac8c <__FUNCTION__.6645>:
  14ac8c:	63737973 5f6c6c61 72746573 64697565     syscall_setreuid
  14ac9c:	00003233                                32..

0014aca0 <__FUNCTION__.6648>:
  14aca0:	63737973 5f6c6c61 72746573 64696765     syscall_setregid
  14acb0:	00003233                                32..

0014acb4 <__FUNCTION__.6651>:
  14acb4:	63737973 5f6c6c61 67746567 70756f72     syscall_getgroup
  14acc4:	00323373                                s32.

0014acc8 <__FUNCTION__.6654>:
  14acc8:	63737973 5f6c6c61 67746573 70756f72     syscall_setgroup
  14acd8:	00323373                                s32.

0014acdc <__FUNCTION__.6657>:
  14acdc:	63737973 5f6c6c61 6f686366 32336e77     syscall_fchown32
  14acec:	00000000                                ....

0014acf0 <__FUNCTION__.6660>:
  14acf0:	63737973 5f6c6c61 72746573 69757365     syscall_setresui
  14ad00:	00323364                                d32.

0014ad04 <__FUNCTION__.6663>:
  14ad04:	63737973 5f6c6c61 72746567 69757365     syscall_getresui
  14ad14:	00323364                                d32.

0014ad18 <__FUNCTION__.6666>:
  14ad18:	63737973 5f6c6c61 72746573 69677365     syscall_setresgi
  14ad28:	00323364                                d32.

0014ad2c <__FUNCTION__.6669>:
  14ad2c:	63737973 5f6c6c61 72746567 69677365     syscall_getresgi
  14ad3c:	00323364                                d32.

0014ad40 <__FUNCTION__.6672>:
  14ad40:	63737973 5f6c6c61 776f6863 0032336e     syscall_chown32.

0014ad50 <__FUNCTION__.6675>:
  14ad50:	63737973 5f6c6c61 75746573 32336469     syscall_setuid32
  14ad60:	00000000                                ....

0014ad64 <__FUNCTION__.6678>:
  14ad64:	63737973 5f6c6c61 67746573 32336469     syscall_setgid32
  14ad74:	00000000                                ....

0014ad78 <__FUNCTION__.6681>:
  14ad78:	63737973 5f6c6c61 66746573 64697573     syscall_setfsuid
  14ad88:	00003233                                32..

0014ad8c <__FUNCTION__.6684>:
  14ad8c:	63737973 5f6c6c61 66746573 64696773     syscall_setfsgid
  14ad9c:	00003233                                32..

0014ada0 <__FUNCTION__.6690>:
  14ada0:	63737973 5f6c6c61 64746567 73746e65     syscall_getdents
  14adb0:	00003436                                64..

0014adb4 <__FUNCTION__.6693>:
  14adb4:	63737973 5f6c6c61 6f766970 6f725f74     syscall_pivot_ro
  14adc4:	0000746f                                ot..

0014adc8 <__FUNCTION__.6696>:
  14adc8:	63737973 5f6c6c61 636e696d 0065726f     syscall_mincore.

0014add8 <__FUNCTION__.6702>:
  14add8:	63737973 5f6c6c61 7664616d 00657369     syscall_madvise.

0014ade8 <__FUNCTION__.6708>:
  14ade8:	63737973 5f6c6c61 746e6366 0034366c     syscall_fcntl64.

0014adf8 <__FUNCTION__.6711>:
  14adf8:	63737973 5f6c6c61 74746567 00006469     syscall_gettid..

0014ae08 <__FUNCTION__.6714>:
  14ae08:	63737973 5f6c6c61 64616572 61656861     syscall_readahea
  14ae18:	00000064                                d...

0014ae1c <__FUNCTION__.6717>:
  14ae1c:	63737973 5f6c6c61 78746573 72747461     syscall_setxattr
  14ae2c:	00000000                                ....

0014ae30 <__FUNCTION__.6720>:
  14ae30:	63737973 5f6c6c61 7465736c 74746178     syscall_lsetxatt
  14ae40:	00000072                                r...

0014ae44 <__FUNCTION__.6723>:
  14ae44:	63737973 5f6c6c61 74657366 74746178     syscall_fsetxatt
  14ae54:	00000072                                r...

0014ae58 <__FUNCTION__.6726>:
  14ae58:	63737973 5f6c6c61 78746567 72747461     syscall_getxattr
  14ae68:	00000000                                ....

0014ae6c <__FUNCTION__.6729>:
  14ae6c:	63737973 5f6c6c61 7465676c 74746178     syscall_lgetxatt
  14ae7c:	00000072                                r...

0014ae80 <__FUNCTION__.6732>:
  14ae80:	63737973 5f6c6c61 74656766 74746178     syscall_fgetxatt
  14ae90:	00000072                                r...

0014ae94 <__FUNCTION__.6735>:
  14ae94:	63737973 5f6c6c61 7473696c 74746178     syscall_listxatt
  14aea4:	00000072                                r...

0014aea8 <__FUNCTION__.6738>:
  14aea8:	63737973 5f6c6c61 73696c6c 74617874     syscall_llistxat
  14aeb8:	00007274                                tr..

0014aebc <__FUNCTION__.6741>:
  14aebc:	63737973 5f6c6c61 73696c66 74617874     syscall_flistxat
  14aecc:	00007274                                tr..

0014aed0 <__FUNCTION__.6744>:
  14aed0:	63737973 5f6c6c61 6f6d6572 61786576     syscall_removexa
  14aee0:	00727474                                ttr.

0014aee4 <__FUNCTION__.6747>:
  14aee4:	63737973 5f6c6c61 6d65726c 7865766f     syscall_lremovex
  14aef4:	72747461 00000000                       attr....

0014aefc <__FUNCTION__.6750>:
  14aefc:	63737973 5f6c6c61 6d657266 7865766f     syscall_fremovex
  14af0c:	72747461 00000000                       attr....

0014af14 <__FUNCTION__.6755>:
  14af14:	63737973 5f6c6c61 6c696b74 0000006c     syscall_tkill...

0014af24 <__FUNCTION__.6758>:
  14af24:	63737973 5f6c6c61 646e6573 656c6966     syscall_sendfile
  14af34:	00003436                                64..

0014af38 <__FUNCTION__.6767>:
  14af38:	63737973 5f6c6c61 65747566 00000078     syscall_futex...

0014af48 <__FUNCTION__.6773>:
  14af48:	63737973 5f6c6c61 65686373 65735f64     syscall_sched_se
  14af58:	66666174 74696e69 00000079              taffinity...

0014af64 <__FUNCTION__.6776>:
  14af64:	63737973 5f6c6c61 65686373 65675f64     syscall_sched_ge
  14af74:	66666174 74696e69 00000079              taffinity...

0014af80 <__FUNCTION__.6779>:
  14af80:	63737973 5f6c6c61 735f6f69 70757465     syscall_io_setup
  14af90:	00000000                                ....

0014af94 <__FUNCTION__.6782>:
  14af94:	63737973 5f6c6c61 645f6f69 72747365     syscall_io_destr
  14afa4:	0000796f                                oy..

0014afa8 <__FUNCTION__.6785>:
  14afa8:	63737973 5f6c6c61 675f6f69 76657465     syscall_io_getev
  14afb8:	73746e65 00000000                       ents....

0014afc0 <__FUNCTION__.6788>:
  14afc0:	63737973 5f6c6c61 735f6f69 696d6275     syscall_io_submi
  14afd0:	00000074                                t...

0014afd4 <__FUNCTION__.6791>:
  14afd4:	63737973 5f6c6c61 635f6f69 65636e61     syscall_io_cance
  14afe4:	0000006c                                l...

0014afe8 <__FUNCTION__.6795>:
  14afe8:	63737973 5f6c6c61 74697865 6f72675f     syscall_exit_gro
  14aff8:	00007075                                up..

0014affc <__FUNCTION__.6798>:
  14affc:	63737973 5f6c6c61 6b6f6f6c 645f7075     syscall_lookup_d
  14b00c:	6b6f6f63 00006569                       cookie..

0014b014 <__FUNCTION__.6801>:
  14b014:	63737973 5f6c6c61 6c6f7065 72635f6c     syscall_epoll_cr
  14b024:	65746165 00000000                       eate....

0014b02c <__FUNCTION__.6804>:
  14b02c:	63737973 5f6c6c61 6c6f7065 74635f6c     syscall_epoll_ct
  14b03c:	0000006c                                l...

0014b040 <__FUNCTION__.6807>:
  14b040:	63737973 5f6c6c61 6c6f7065 61775f6c     syscall_epoll_wa
  14b050:	00007469                                it..

0014b054 <__FUNCTION__.6810>:
  14b054:	63737973 5f6c6c61 616d6572 69665f70     syscall_remap_fi
  14b064:	705f656c 73656761 00000000              le_pages....

0014b070 <__FUNCTION__.6814>:
  14b070:	63737973 5f6c6c61 5f746573 5f646974     syscall_set_tid_
  14b080:	72646461 00737365                       address.

0014b088 <__FUNCTION__.6817>:
  14b088:	63737973 5f6c6c61 656d6974 72635f72     syscall_timer_cr
  14b098:	65746165 00000000                       eate....

0014b0a0 <__FUNCTION__.6820>:
  14b0a0:	63737973 5f6c6c61 656d6974 65735f72     syscall_timer_se
  14b0b0:	6d697474 00000065                       ttime...

0014b0b8 <__FUNCTION__.6823>:
  14b0b8:	63737973 5f6c6c61 656d6974 65675f72     syscall_timer_ge
  14b0c8:	6d697474 00000065                       ttime...

0014b0d0 <__FUNCTION__.6826>:
  14b0d0:	63737973 5f6c6c61 656d6974 65675f72     syscall_timer_ge
  14b0e0:	65766f74 6e757272 00000000              toverrun....

0014b0ec <__FUNCTION__.6829>:
  14b0ec:	63737973 5f6c6c61 656d6974 65645f72     syscall_timer_de
  14b0fc:	6574656c 00000000                       lete....

0014b104 <__FUNCTION__.6834>:
  14b104:	63737973 5f6c6c61 636f6c63 65735f6b     syscall_clock_se
  14b114:	6d697474 00000065                       ttime...

0014b11c <__FUNCTION__.6839>:
  14b11c:	63737973 5f6c6c61 636f6c63 65675f6b     syscall_clock_ge
  14b12c:	6d697474 00000065                       ttime...

0014b134 <__FUNCTION__.6844>:
  14b134:	63737973 5f6c6c61 636f6c63 65675f6b     syscall_clock_ge
  14b144:	73657274 00000000                       tres....

0014b14c <__FUNCTION__.6847>:
  14b14c:	63737973 5f6c6c61 636f6c63 616e5f6b     syscall_clock_na
  14b15c:	6c736f6e 00706565                       nosleep.

0014b164 <__FUNCTION__.6853>:
  14b164:	63737973 5f6c6c61 74617473 34367366     syscall_statfs64
  14b174:	00000000                                ....

0014b178 <__FUNCTION__.6859>:
  14b178:	63737973 5f6c6c61 61747366 36736674     syscall_fstatfs6
  14b188:	00000034                                4...

0014b18c <__FUNCTION__.6862>:
  14b18c:	63737973 5f6c6c61 696b6774 00006c6c     syscall_tgkill..

0014b19c <__FUNCTION__.6865>:
  14b19c:	63737973 5f6c6c61 6d697475 00007365     syscall_utimes..

0014b1ac <__FUNCTION__.6868>:
  14b1ac:	63737973 5f6c6c61 5f6d7261 76646166     syscall_arm_fadv
  14b1bc:	36657369 34365f34 00000000              ise64_64....

0014b1c8 <__FUNCTION__.6871>:
  14b1c8:	63737973 5f6c6c61 63696370 69666e6f     syscall_pciconfi
  14b1d8:	6f695f67 65736162 00000000              g_iobase....

0014b1e4 <__FUNCTION__.6874>:
  14b1e4:	63737973 5f6c6c61 63696370 69666e6f     syscall_pciconfi
  14b1f4:	65725f67 00006461                       g_read..

0014b1fc <__FUNCTION__.6877>:
  14b1fc:	63737973 5f6c6c61 63696370 69666e6f     syscall_pciconfi
  14b20c:	72775f67 00657469                       g_write.

0014b214 <__FUNCTION__.6880>:
  14b214:	63737973 5f6c6c61 6f5f716d 006e6570     syscall_mq_open.

0014b224 <__FUNCTION__.6883>:
  14b224:	63737973 5f6c6c61 755f716d 6e696c6e     syscall_mq_unlin
  14b234:	0000006b                                k...

0014b238 <__FUNCTION__.6886>:
  14b238:	63737973 5f6c6c61 745f716d 64656d69     syscall_mq_timed
  14b248:	646e6573 00000000                       send....

0014b250 <__FUNCTION__.6889>:
  14b250:	63737973 5f6c6c61 745f716d 64656d69     syscall_mq_timed
  14b260:	65636572 00657669                       receive.

0014b268 <__FUNCTION__.6892>:
  14b268:	63737973 5f6c6c61 6e5f716d 6669746f     syscall_mq_notif
  14b278:	00000079                                y...

0014b27c <__FUNCTION__.6895>:
  14b27c:	63737973 5f6c6c61 675f716d 65737465     syscall_mq_getse
  14b28c:	74746174 00000072                       tattr...

0014b294 <__FUNCTION__.6898>:
  14b294:	63737973 5f6c6c61 74696177 00006469     syscall_waitid..

0014b2a4 <__FUNCTION__.6904>:
  14b2a4:	63737973 5f6c6c61 6b636f73 00007465     syscall_socket..

0014b2b4 <__FUNCTION__.6910>:
  14b2b4:	63737973 5f6c6c61 646e6962 00000000     syscall_bind....

0014b2c4 <__FUNCTION__.6916>:
  14b2c4:	63737973 5f6c6c61 6e6e6f63 00746365     syscall_connect.

0014b2d4 <__FUNCTION__.6921>:
  14b2d4:	63737973 5f6c6c61 7473696c 00006e65     syscall_listen..

0014b2e4 <__FUNCTION__.6927>:
  14b2e4:	63737973 5f6c6c61 65636361 00007470     syscall_accept..

0014b2f4 <__FUNCTION__.6933>:
  14b2f4:	63737973 5f6c6c61 73746567 6e6b636f     syscall_getsockn
  14b304:	00656d61                                ame.

0014b308 <__FUNCTION__.6939>:
  14b308:	63737973 5f6c6c61 70746567 6e726565     syscall_getpeern
  14b318:	00656d61                                ame.

0014b31c <__FUNCTION__.6942>:
  14b31c:	63737973 5f6c6c61 6b636f73 61707465     syscall_socketpa
  14b32c:	00007269                                ir..

0014b330 <__FUNCTION__.6949>:
  14b330:	63737973 5f6c6c61 646e6573 00000000     syscall_send....

0014b340 <__FUNCTION__.6958>:
  14b340:	63737973 5f6c6c61 646e6573 00006f74     syscall_sendto..

0014b350 <__FUNCTION__.6965>:
  14b350:	63737973 5f6c6c61 76636572 00000000     syscall_recv....

0014b360 <__FUNCTION__.6974>:
  14b360:	63737973 5f6c6c61 76636572 6d6f7266     syscall_recvfrom
  14b370:	00000000                                ....

0014b374 <__FUNCTION__.6977>:
  14b374:	63737973 5f6c6c61 74756873 6e776f64     syscall_shutdown
  14b384:	00000000                                ....

0014b388 <__FUNCTION__.6985>:
  14b388:	63737973 5f6c6c61 73746573 6f6b636f     syscall_setsocko
  14b398:	00007470                                pt..

0014b39c <__FUNCTION__.6993>:
  14b39c:	63737973 5f6c6c61 73746567 6f6b636f     syscall_getsocko
  14b3ac:	00007470                                pt..

0014b3b0 <__FUNCTION__.6996>:
  14b3b0:	63737973 5f6c6c61 646e6573 0067736d     syscall_sendmsg.

0014b3c0 <__FUNCTION__.6999>:
  14b3c0:	63737973 5f6c6c61 76636572 0067736d     syscall_recvmsg.

0014b3d0 <__FUNCTION__.7002>:
  14b3d0:	63737973 5f6c6c61 6f6d6573 00000070     syscall_semop...

0014b3e0 <__FUNCTION__.7005>:
  14b3e0:	63737973 5f6c6c61 676d6573 00007465     syscall_semget..

0014b3f0 <__FUNCTION__.7008>:
  14b3f0:	63737973 5f6c6c61 636d6573 00006c74     syscall_semctl..

0014b400 <__FUNCTION__.7011>:
  14b400:	63737973 5f6c6c61 7367736d 0000646e     syscall_msgsnd..

0014b410 <__FUNCTION__.7014>:
  14b410:	63737973 5f6c6c61 7267736d 00007663     syscall_msgrcv..

0014b420 <__FUNCTION__.7017>:
  14b420:	63737973 5f6c6c61 6767736d 00007465     syscall_msgget..

0014b430 <__FUNCTION__.7020>:
  14b430:	63737973 5f6c6c61 6367736d 00006c74     syscall_msgctl..

0014b440 <__FUNCTION__.7026>:
  14b440:	63737973 5f6c6c61 616d6873 00000074     syscall_shmat...

0014b450 <__FUNCTION__.7030>:
  14b450:	63737973 5f6c6c61 646d6873 00000074     syscall_shmdt...

0014b460 <__FUNCTION__.7036>:
  14b460:	63737973 5f6c6c61 676d6873 00007465     syscall_shmget..

0014b470 <__FUNCTION__.7042>:
  14b470:	63737973 5f6c6c61 636d6873 00006c74     syscall_shmctl..

0014b480 <__FUNCTION__.7045>:
  14b480:	63737973 5f6c6c61 5f646461 0079656b     syscall_add_key.

0014b490 <__FUNCTION__.7048>:
  14b490:	63737973 5f6c6c61 75716572 5f747365     syscall_request_
  14b4a0:	0079656b                                key.

0014b4a4 <__FUNCTION__.7051>:
  14b4a4:	63737973 5f6c6c61 6379656b 00006c74     syscall_keyctl..

0014b4b4 <__FUNCTION__.7054>:
  14b4b4:	63737973 5f6c6c61 746d6573 64656d69     syscall_semtimed
  14b4c4:	0000706f                                op..

0014b4c8 <__FUNCTION__.7057>:
  14b4c8:	63737973 5f6c6c61 72657376 00726576     syscall_vserver.

0014b4d8 <__FUNCTION__.7060>:
  14b4d8:	63737973 5f6c6c61 72706f69 735f6f69     syscall_ioprio_s
  14b4e8:	00007465                                et..

0014b4ec <__FUNCTION__.7063>:
  14b4ec:	63737973 5f6c6c61 72706f69 675f6f69     syscall_ioprio_g
  14b4fc:	00007465                                et..

0014b500 <__FUNCTION__.7066>:
  14b500:	63737973 5f6c6c61 746f6e69 5f796669     syscall_inotify_
  14b510:	74696e69 00000000                       init....

0014b518 <__FUNCTION__.7069>:
  14b518:	63737973 5f6c6c61 746f6e69 5f796669     syscall_inotify_
  14b528:	5f646461 63746177 00000068              add_watch...

0014b534 <__FUNCTION__.7072>:
  14b534:	63737973 5f6c6c61 746f6e69 5f796669     syscall_inotify_
  14b544:	775f6d72 68637461 00000000              rm_watch....

0014b550 <__FUNCTION__.7075>:
  14b550:	63737973 5f6c6c61 6e69626d 00000064     syscall_mbind...

0014b560 <__FUNCTION__.7078>:
  14b560:	63737973 5f6c6c61 5f746567 706d656d     syscall_get_memp
  14b570:	63696c6f 00000079                       olicy...

0014b578 <__FUNCTION__.7081>:
  14b578:	63737973 5f6c6c61 5f746573 706d656d     syscall_set_memp
  14b588:	63696c6f 00000079                       olicy...

0014b590 <__FUNCTION__.7084>:
  14b590:	63737973 5f6c6c61 6e65706f 00007461     syscall_openat..

0014b5a0 <__FUNCTION__.7087>:
  14b5a0:	63737973 5f6c6c61 69646b6d 00746172     syscall_mkdirat.

0014b5b0 <__FUNCTION__.7090>:
  14b5b0:	63737973 5f6c6c61 6f6e6b6d 00746164     syscall_mknodat.

0014b5c0 <__FUNCTION__.7093>:
  14b5c0:	63737973 5f6c6c61 6f686366 74616e77     syscall_fchownat
  14b5d0:	00000000                                ....

0014b5d4 <__FUNCTION__.7096>:
  14b5d4:	63737973 5f6c6c61 69747566 6173656d     syscall_futimesa
  14b5e4:	00000074                                t...

0014b5e8 <__FUNCTION__.7099>:
  14b5e8:	63737973 5f6c6c61 61747366 36746174     syscall_fstatat6
  14b5f8:	00000034                                4...

0014b5fc <__FUNCTION__.7102>:
  14b5fc:	63737973 5f6c6c61 696c6e75 74616b6e     syscall_unlinkat
  14b60c:	00000000                                ....

0014b610 <__FUNCTION__.7105>:
  14b610:	63737973 5f6c6c61 616e6572 7461656d     syscall_renameat
  14b620:	00000000                                ....

0014b624 <__FUNCTION__.7108>:
  14b624:	63737973 5f6c6c61 6b6e696c 00007461     syscall_linkat..

0014b634 <__FUNCTION__.7111>:
  14b634:	63737973 5f6c6c61 6c6d7973 616b6e69     syscall_symlinka
  14b644:	00000074                                t...

0014b648 <__FUNCTION__.7114>:
  14b648:	63737973 5f6c6c61 64616572 6b6e696c     syscall_readlink
  14b658:	00007461                                at..

0014b65c <__FUNCTION__.7117>:
  14b65c:	63737973 5f6c6c61 6d686366 7461646f     syscall_fchmodat
  14b66c:	00000000                                ....

0014b670 <__FUNCTION__.7120>:
  14b670:	63737973 5f6c6c61 63636166 61737365     syscall_faccessa
  14b680:	00000074                                t...

0014b684 <__FUNCTION__.7123>:
  14b684:	63737973 5f6c6c61 6c657370 36746365     syscall_pselect6
  14b694:	00000000                                ....

0014b698 <__FUNCTION__.7126>:
  14b698:	63737973 5f6c6c61 6c6f7070 0000006c     syscall_ppoll...

0014b6a8 <__FUNCTION__.7129>:
  14b6a8:	63737973 5f6c6c61 68736e75 00657261     syscall_unshare.

0014b6b8 <__FUNCTION__.7132>:
  14b6b8:	63737973 5f6c6c61 5f746573 75626f72     syscall_set_robu
  14b6c8:	6c5f7473 00747369                       st_list.

0014b6d0 <__FUNCTION__.7135>:
  14b6d0:	63737973 5f6c6c61 5f746567 75626f72     syscall_get_robu
  14b6e0:	6c5f7473 00747369                       st_list.

0014b6e8 <__FUNCTION__.7138>:
  14b6e8:	63737973 5f6c6c61 696c7073 00006563     syscall_splice..

0014b6f8 <__FUNCTION__.7141>:
  14b6f8:	63737973 5f6c6c61 5f6d7261 636e7973     syscall_arm_sync
  14b708:	6c69665f 61725f65 0065676e              _file_range.

0014b714 <__FUNCTION__.7144>:
  14b714:	63737973 5f6c6c61 00656574              syscall_tee.

0014b720 <__FUNCTION__.7147>:
  14b720:	63737973 5f6c6c61 70736d76 6563696c     syscall_vmsplice
  14b730:	00000000                                ....

0014b734 <__FUNCTION__.7150>:
  14b734:	63737973 5f6c6c61 65766f6d 6761705f     syscall_move_pag
  14b744:	00007365                                es..

0014b748 <__FUNCTION__.7153>:
  14b748:	63737973 5f6c6c61 63746567 00007570     syscall_getcpu..

0014b758 <__FUNCTION__.7156>:
  14b758:	63737973 5f6c6c61 6c6f7065 77705f6c     syscall_epoll_pw
  14b768:	00746961                                ait.

0014b76c <__FUNCTION__.7159>:
  14b76c:	63737973 5f6c6c61 6578656b 6f6c5f63     syscall_kexec_lo
  14b77c:	00006461                                ad..

0014b780 <__FUNCTION__.7162>:
  14b780:	63737973 5f6c6c61 6d697475 61736e65     syscall_utimensa
  14b790:	00000074                                t...

0014b794 <__FUNCTION__.7165>:
  14b794:	63737973 5f6c6c61 6e676973 64666c61     syscall_signalfd
  14b7a4:	00000000                                ....

0014b7a8 <__FUNCTION__.7168>:
  14b7a8:	63737973 5f6c6c61 656d6974 5f646672     syscall_timerfd_
  14b7b8:	61657263 00006574                       create..

0014b7c0 <__FUNCTION__.7171>:
  14b7c0:	63737973 5f6c6c61 6e657665 00646674     syscall_eventfd.

0014b7d0 <__FUNCTION__.7174>:
  14b7d0:	63737973 5f6c6c61 6c6c6166 7461636f     syscall_fallocat
  14b7e0:	00000065                                e...

0014b7e4 <__FUNCTION__.7177>:
  14b7e4:	63737973 5f6c6c61 656d6974 5f646672     syscall_timerfd_
  14b7f4:	74746573 00656d69                       settime.

0014b7fc <__FUNCTION__.7180>:
  14b7fc:	63737973 5f6c6c61 656d6974 5f646672     syscall_timerfd_
  14b80c:	74746567 00656d69                       gettime.

0014b814 <__FUNCTION__.7183>:
  14b814:	63737973 5f6c6c61 6e676973 64666c61     syscall_signalfd
  14b824:	00000034                                4...

0014b828 <__FUNCTION__.7186>:
  14b828:	63737973 5f6c6c61 6e657665 32646674     syscall_eventfd2
  14b838:	00000000                                ....

0014b83c <__FUNCTION__.7189>:
  14b83c:	63737973 5f6c6c61 6c6f7065 72635f6c     syscall_epoll_cr
  14b84c:	65746165 00000031                       eate1...

0014b854 <__FUNCTION__.7192>:
  14b854:	63737973 5f6c6c61 33707564 00000000     syscall_dup3....

0014b864 <__FUNCTION__.7195>:
  14b864:	63737973 5f6c6c61 65706970 00000032     syscall_pipe2...

0014b874 <__FUNCTION__.7198>:
  14b874:	63737973 5f6c6c61 746f6e69 5f796669     syscall_inotify_
  14b884:	74696e69 00000031                       init1...

0014b88c <__FUNCTION__.7201>:
  14b88c:	63737973 5f6c6c61 61657270 00007664     syscall_preadv..

0014b89c <__FUNCTION__.7204>:
  14b89c:	63737973 5f6c6c61 69727770 00766574     syscall_pwritev.

0014b8ac <__FUNCTION__.7207>:
  14b8ac:	63737973 5f6c6c61 745f7472 67697367     syscall_rt_tgsig
  14b8bc:	75657571 666e6965 0000006f              queueinfo...

0014b8c8 <__FUNCTION__.7210>:
  14b8c8:	63737973 5f6c6c61 66726570 6576655f     syscall_perf_eve
  14b8d8:	6f5f746e 006e6570                       nt_open.

0014b8e0 <__FUNCTION__.7213>:
  14b8e0:	63737973 5f6c6c61 76636572 67736d6d     syscall_recvmmsg
  14b8f0:	00000000                                ....

0014b8f4 <__FUNCTION__.7216>:
  14b8f4:	63737973 5f6c6c61 65636361 00347470     syscall_accept4.

0014b904 <__FUNCTION__.7219>:
  14b904:	63737973 5f6c6c61 6f6e6166 79666974     syscall_fanotify
  14b914:	696e695f 00000074                       _init...

0014b91c <__FUNCTION__.7222>:
  14b91c:	63737973 5f6c6c61 6f6e6166 79666974     syscall_fanotify
  14b92c:	72616d5f 0000006b                       _mark...

0014b934 <__FUNCTION__.7230>:
  14b934:	63737973 5f6c6c61 696c7270 3674696d     syscall_prlimit6
  14b944:	00000034                                4...

0014b948 <__FUNCTION__.7233>:
  14b948:	63737973 5f6c6c61 656d616e 5f6f745f     syscall_name_to_
  14b958:	646e6168 615f656c 00000074              handle_at...

0014b964 <__FUNCTION__.7236>:
  14b964:	63737973 5f6c6c61 6e65706f 5f79625f     syscall_open_by_
  14b974:	646e6168 615f656c 00000074              handle_at...

0014b980 <__FUNCTION__.7239>:
  14b980:	63737973 5f6c6c61 636f6c63 64615f6b     syscall_clock_ad
  14b990:	6d69746a 00000065                       jtime...

0014b998 <__FUNCTION__.7242>:
  14b998:	63737973 5f6c6c61 636e7973 00007366     syscall_syncfs..

0014b9a8 <__FUNCTION__.7245>:
  14b9a8:	63737973 5f6c6c61 646e6573 67736d6d     syscall_sendmmsg
  14b9b8:	00000000                                ....

0014b9bc <__FUNCTION__.7248>:
  14b9bc:	63737973 5f6c6c61 6e746573 00000073     syscall_setns...

0014b9cc <__FUNCTION__.7251>:
  14b9cc:	63737973 5f6c6c61 636f7270 5f737365     syscall_process_
  14b9dc:	725f6d76 76646165 00000000              vm_readv....

0014b9e8 <__FUNCTION__.7254>:
  14b9e8:	63737973 5f6c6c61 636f7270 5f737365     syscall_process_
  14b9f8:	775f6d76 65746972 00000076              vm_writev...

0014ba04 <__FUNCTION__.7257>:
  14ba04:	63737973 5f6c6c61 706d636b 00000000     syscall_kcmp....

0014ba14 <__FUNCTION__.7260>:
  14ba14:	63737973 5f6c6c61 696e6966 6f6d5f74     syscall_finit_mo
  14ba24:	656c7564 00000000                       dule....

0014ba2c <__FUNCTION__.7263>:
  14ba2c:	63737973 5f6c6c61 65686373 65735f64     syscall_sched_se
  14ba3c:	74746174 00000072                       tattr...

0014ba44 <__FUNCTION__.7266>:
  14ba44:	63737973 5f6c6c61 65686373 65675f64     syscall_sched_ge
  14ba54:	74746174 00000072                       tattr...

0014ba5c <__FUNCTION__.7269>:
  14ba5c:	63737973 5f6c6c61 616e6572 7461656d     syscall_renameat
  14ba6c:	00000032                                2...

0014ba70 <__FUNCTION__.7272>:
  14ba70:	63737973 5f6c6c61 63636573 00706d6f     syscall_seccomp.

0014ba80 <__FUNCTION__.7278>:
  14ba80:	63737973 5f6c6c61 72746567 6f646e61     syscall_getrando
  14ba90:	0000006d                                m...

0014ba94 <__FUNCTION__.7281>:
  14ba94:	63737973 5f6c6c61 666d656d 72635f64     syscall_memfd_cr
  14baa4:	65746165 00000000                       eate....

0014baac <__FUNCTION__.7284>:
  14baac:	63737973 5f6c6c61 00667062              syscall_bpf.

0014bab8 <__FUNCTION__.7287>:
  14bab8:	63737973 5f6c6c61 63657865 74616576     syscall_execveat
  14bac8:	00000000                                ....

0014bacc <__FUNCTION__.7290>:
  14bacc:	63737973 5f6c6c61 72657375 6c756166     syscall_userfaul
  14badc:	00646674                                tfd.

0014bae0 <__FUNCTION__.7293>:
  14bae0:	63737973 5f6c6c61 626d656d 69727261     syscall_membarri
  14baf0:	00007265                                er..

0014baf4 <__FUNCTION__.7296>:
  14baf4:	63737973 5f6c6c61 636f6c6d 0000326b     syscall_mlock2..

0014bb04 <__FUNCTION__.7299>:
  14bb04:	63737973 5f6c6c61 79706f63 6c69665f     syscall_copy_fil
  14bb14:	61725f65 0065676e                       e_range.

0014bb1c <__FUNCTION__.7302>:
  14bb1c:	63737973 5f6c6c61 61657270 00327664     syscall_preadv2.

0014bb2c <__FUNCTION__.7305>:
  14bb2c:	63737973 5f6c6c61 69727770 32766574     syscall_pwritev2
  14bb3c:	00000000                                ....

0014bb40 <__FUNCTION__.7308>:
  14bb40:	63737973 5f6c6c61 79656b70 72706d5f     syscall_pkey_mpr
  14bb50:	6365746f 00000074                       otect...

0014bb58 <__FUNCTION__.7311>:
  14bb58:	63737973 5f6c6c61 79656b70 6c6c615f     syscall_pkey_all
  14bb68:	0000636f                                oc..

0014bb6c <__FUNCTION__.7314>:
  14bb6c:	63737973 5f6c6c61 79656b70 6572665f     syscall_pkey_fre
  14bb7c:	00000065                                e...

0014bb80 <__FUNCTION__.7317>:
  14bb80:	63737973 5f6c6c61 74617473 00000078     syscall_statx...

0014bb90 <__FUNCTION__.7320>:
  14bb90:	63737973 5f6c6c61 71657372 00000000     syscall_rseq....

0014bba0 <__FUNCTION__.7323>:
  14bba0:	63737973 5f6c6c61 705f6f69 65746567     syscall_io_pgete
  14bbb0:	746e6576 00000073 335b1a0a 5b206d34     vents.....[34m [
  14bbc0:	64202020 7973206f 6c616373 203a5d6c        do syscall]: 
  14bbd0:	6d305b1b 00000000                       .[0m....

0014bbd8 <syscall_table>:
  14bbd8:	0013a6b8 0013a914 0013b94c 0013b3b4     ........L.......
  14bbe8:	0013b37c 0013b344 0013a8ec 00000000     |...D...........
  14bbf8:	0013a69c 0013a680 0013a8c4 0013b30c     ................
  14bc08:	0013a89c 00000000 0013a664 0013a648     ........d...H...
  14bc18:	0013a62c 00000000 00000000 0013b9b4     ,...............
  14bc28:	0013b92c 0013a610 00000000 0013a5f4     ,...............
  14bc38:	0013a5d8 00000000 0013a5bc 00000000     ................
  14bc48:	00000000 0013a5a0 00000000 00000000     ................
  14bc58:	00000000 0013ad2c 0013a584 00000000     ....,...........
  14bc68:	0013a568 0013acfc 0013accc 0013ac9c     h...............
  14bc78:	0013a874 0013a84c 0013a824 0013a54c     t...L...$...L...
  14bc88:	00000000 0013a7fc 0013a530 0013a514     ........0.......
  14bc98:	00000000 0013a4f8 0013a4dc 0013a4c0     ................
  14bca8:	0013a4a4 00000000 0013b96c 0013b2d4     ........l.......
  14bcb8:	00000000 0013a488 00000000 00000000     ................
  14bcc8:	0013a46c 0013a450 0013a434 0013ac6c     l...P...4...l...
  14bcd8:	0013a418 0013a3fc 0013b90c 0013b59c     ................
	...
  14bcf0:	0013a3e0 0013a3c4 0013a3a8 0013a38c     ................
  14bd00:	0013a370 0013ac3c 00000000 0013a354     p...<.......T...
  14bd10:	0013a338 0013a31c 0013a300 0013a2e4     8...............
  14bd20:	00000000 0013a2c8 00000000 0013b29c     ................
  14bd30:	0013a2ac 0013a290 0013a274 00000000     ........t.......
  14bd40:	00000000 0013ac0c 0013a258 0013a23c     ........X...<...
  14bd50:	0013a220 0013a204 0013a1e8 0013a1cc      ...............
  14bd60:	00000000 0013a1b0 0013a194 00000000     ................
  14bd70:	00000000 0013a178 0013a15c 0013a140     ....x...\...@...
  14bd80:	0013abdc 0013abac 0013a124 00000000     ........$.......
  14bd90:	00000000 0013a108 00000000 00000000     ................
  14bda0:	0013a0ec 0013a0d0 0013a0b4 00000000     ................
  14bdb0:	0013a7d4 0013a098 0013a07c 0013a060     ........|...`...
  14bdc0:	0013a044 00000000 0013a028 0013a00c     D.......(.......
  14bdd0:	0013b554 00000000 00139ff0 00139fd4     T...............
  14bde0:	00000000 00139fb8 00139f9c 00139f80     ................
  14bdf0:	00139f64 00139f48 00139f2c 00000000     d...H...,.......
  14be00:	00139f10 00139ef4 0013b724 0013b264     ........$...d...
  14be10:	0013b6d4 00139ed8 00139ebc 0013b1c0     ................
  14be20:	0013b11c 00139ea0 00139e84 00139e68     ............h...
  14be30:	00139e4c 00139e30 00139e14 00139df8     L...0...........
  14be40:	0013ab7c 0013ab4c 0013b0e4 0013b0ac     |...L...........
  14be50:	00139ddc 0013a7ac 0013a784 00139dc0     ................
  14be60:	0013ab1c 0013b684 00139da4 00139d88     ................
	...
  14be78:	0013b074 00139d6c 00139d50 00139d34     t...l...P...4...
  14be88:	00139d18 00139cfc 0013b50c 0013b4c4     ................
  14be98:	00139ce0 00139cc4 00139ca8 00139c8c     ................
  14bea8:	00139c70 00139c54 00139c38 0013aaec     p...T...8.......
  14beb8:	00139c1c 00139c00 00139be4 00139bc8     ................
	...
  14bed0:	0013b8ec 0013aabc 0013b87c 00139bac     ........|.......
  14bee0:	00139b90 0013aa8c 0013aa5c 0013aa2c     ........\...,...
  14bef0:	00139b74 00139b58 00139b3c 00139b20     t...X...<... ...
  14bf00:	00139b04 00139ae8 00139acc 00139ab0     ................
  14bf10:	00139a94 00139a78 00139a5c 00139a40     ....x...\...@...
  14bf20:	00139a24 00139a08 001399ec 001399d0     $...............
  14bf30:	001399b4 00139998 0013997c 0013b03c     ........|...<...
  14bf40:	00139960 00139944 0013b004 0013afcc     `...D...........
	...
  14bf58:	0013b8cc 00139928 0013990c 001398f0     ....(...........
  14bf68:	001398d4 001398b8 0013989c 00139880     ................
  14bf78:	00139864 00139848 0013982c 00139810     d...H...,.......
  14bf88:	001397f4 001397d8 0013a9fc 001397bc     ................
  14bf98:	0013b828 0013af94 001397a0 00139784     (...............
  14bfa8:	00139768 0013974c 00139730 00139714     h...L...0.......
  14bfb8:	0013a75c 001396f8 001396dc 001396c0     \...............
  14bfc8:	001396a4 00139688 00000000 00000000     ................
  14bfd8:	0013a734 0013966c 00139650 00139634     4...l...P...4...
  14bfe8:	00139618 001395fc 0013a9cc 0013a99c     ................
  14bff8:	0013a96c 001395e0 001395c4 001395a8     l...............
  14c008:	0013958c 00139570 00139554 00139538     ....p...T...8...
  14c018:	0013951c 00139500 001394e4 001394c8     ................
  14c028:	001394ac 00139490 00139474 00139458     ........t...X...
  14c038:	0013943c 0013af5c 0013af24 0013aeec     <...\...$.......
  14c048:	0013a93c 0013aeb4 0013ae7c 0013ae44     <.......|...D...
  14c058:	00139420 0013b47c 0013b7d4 0013b434      ...|.......4...
  14c068:	0013b780 00139404 0013b634 0013b5e4     ........4.......
  14c078:	001393e8 001393cc 001393b0 00139394     ................
  14c088:	00139378 0013935c 00139340 00139324     x...\...@...$...
  14c098:	00139308 0013ae08 0013a708 0013adcc     ................
  14c0a8:	0013ad94 001392ec 001392d0 001392b4     ................
  14c0b8:	00139298 0013927c 00139260 00139244     ....|...`...D...
  14c0c8:	00139228 0013920c 001391f0 001391d4     (...............
  14c0d8:	001391b8 0013919c 00139180 00139164     ............d...
  14c0e8:	00139148 0013912c 00139110 001390f4     H...,...........
  14c0f8:	001390d8 001390bc 001390a0 00139084     ................
  14c108:	00139068 0013904c 00139030 00139014     h...L...0.......
  14c118:	00138ff8 00138fdc 00138fc0 00138fa4     ................
  14c128:	00138f88 00138f6c 00138f50 00138f34     ....l...P...4...
  14c138:	00138f18 00138efc 00138ee0 00138ec4     ................
  14c148:	00138ea8 00138e8c 00138e70 00138e54     ........p...T...
  14c158:	00138e38 00138e1c 00138e00 00138de4     8...............
  14c168:	00138dc8 00138dac 00138d90 00138d74     ............t...
  14c178:	00138d58 00138d3c 00138d20 00138d04     X...<... .......
  14c188:	00138ce8 00138ccc 00138cb0 00138c94     ................
  14c198:	00138c78 0013b3ec 00138c5c 00138c40     x.......\...@...
  14c1a8:	00138c24 00138c08 00138bec 00138bd0     $...............
  14c1b8:	00138bb4 00138b98 00138b7c 00138b60     ........|...`...
  14c1c8:	00138b44 00138b28 00138b0c 00138af0     D...(...........
  14c1d8:	0013ad5c 00138ad4 00138ab8 00138a9c     \...............
  14c1e8:	00138a80 00138a64 00138a48 00138a2c     ....d...H...,...
  14c1f8:	00138a10 001389f4 001389d8 001389bc     ................
  14c208:	001389a0 00138984 00138968 0013894c     ........h...L...
  14c218:	335b1b0a 5b206d31 74706d65 79732079     ..[31m [empty sy
  14c228:	6c616373 203a5d6c 6d305b1b 00000000     scall]: .[0m....

0014c238 <bin_tab>:
  14c238:	23222120 25252424 27272626 28282828      !"#$$%%&&''((((
  14c248:	29292929 2a2a2a2a 2b2b2b2b 2c2c2c2c     ))))****++++,,,,
  14c258:	2c2c2c2c 2d2d2d2d 2d2d2d2d 2e2e2e2e     ,,,,--------....
  14c268:	2e2e2e2e 2f2f2f2f 2f2f2f2f              ....////////

0014c274 <stderr>:
  14c274:	0014d2a0                                ....

0014c278 <stdout>:
  14c278:	0014d338 20202b2d 30583020 00000078     8...-+   0X0x...
  14c288:	6c756e28 0000296c 2b58302d 30205830     (null)..-0X+0X 0
  14c298:	78302d58 2078302b 00007830 00666e69     X-0x+0x 0x..inf.
  14c2a8:	00464e49 006e616e 004e414e 0000002e     INF.nan.NAN.....

0014c2b8 <states>:
  14c2b8:	000a0019 00191919 05000000 00000000     ................
  14c2c8:	00090000 0b000000 00000000 00000000     ................
  14c2d8:	0a110019 03191919 0100070a 180b091b     ................
  14c2e8:	06090000 0b00000b 00190600 19190000     ................
  14c2f8:	00000019 00000000 00000000 00000000     ................
  14c308:	00000e00 00000000 00190000 19190d0a     ................
  14c318:	000d0019 09000200 0000000e 000e0009     ................
  14c328:	00000e00 00000000 00000000 00000000     ................
	...
  14c340:	0c000000 00000000 00000000 13000000     ................
  14c350:	00000000 00000013 000c0900 00000000     ................
  14c360:	0c00000c 00000000 00000000 00000000     ................
	...
  14c37c:	00001000 00000000 00000000 00000f00     ................
  14c38c:	000f0400 09000000 00000010 00100000     ................
  14c39c:	00001000 00000000 00000000 00000000     ................
	...
  14c3b4:	12000000 00000000 00000000 11000000     ................
  14c3c4:	00000000 00000011 00120900 00000000     ................
  14c3d4:	12000012 001a0000 1a1a0000 0000001a     ................
	...
  14c3f8:	001a0000 1a1a0000 0000001a 09000000     ................
	...
  14c428:	14000000 00000000 00000000 17000000     ................
  14c438:	00000000 00000017 00140900 00000000     ................
  14c448:	14000014 00000000 00000000 00000000     ................
	...
  14c464:	00001600 00000000 00000000 00001500     ................
  14c474:	00150000 09000000 00000016 00160000     ................
  14c484:	00001600                                ....

0014c488 <xdigits>:
  14c488:	33323130 37363534 42413938 46454443     0123456789ABCDEF

0014c498 <all_mask>:
  14c498:	ffffffff ffffffff                       ........

0014c4a0 <app_mask>:
  14c4a0:	7fffffff fffffffc                       ........

0014c4a8 <__EH_FRAME_BEGIN__>:
  14c4a8:	00000000                                ....
