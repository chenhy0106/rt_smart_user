
root/bin/lwIPKit.elf:     file format elf32-littlearm


Disassembly of section .text:

00100000 <_start>:
  100000:	e1a0d003 	mov	sp, r3
  100004:	ebffffff 	bl	100008 <_start_c>

00100008 <_start_c>:
  100008:	e3a0c000 	mov	ip, #0
  10000c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  100010:	e59f3018 	ldr	r3, [pc, #24]	; 100030 <_start_c+0x28>
  100014:	e24dd00c 	sub	sp, sp, #12
  100018:	e5901000 	ldr	r1, [r0]
  10001c:	e2802004 	add	r2, r0, #4
  100020:	e88d1008 	stm	sp, {r3, ip}
  100024:	e59f0008 	ldr	r0, [pc, #8]	; 100034 <_start_c+0x2c>
  100028:	e59f3008 	ldr	r3, [pc, #8]	; 100038 <_start_c+0x30>
  10002c:	eb00e39b 	bl	138ea0 <__libc_start_main>
  100030:	00145378 	.word	0x00145378
  100034:	00103c5c 	.word	0x00103c5c
  100038:	0014536c 	.word	0x0014536c

0010003c <deregister_tm_clones>:
  10003c:	e59f0018 	ldr	r0, [pc, #24]	; 10005c <deregister_tm_clones+0x20>
  100040:	e59f3018 	ldr	r3, [pc, #24]	; 100060 <deregister_tm_clones+0x24>
  100044:	e1530000 	cmp	r3, r0
  100048:	012fff1e 	bxeq	lr
  10004c:	e59f3010 	ldr	r3, [pc, #16]	; 100064 <deregister_tm_clones+0x28>
  100050:	e3530000 	cmp	r3, #0
  100054:	012fff1e 	bxeq	lr
  100058:	e12fff13 	bx	r3
  10005c:	0014d3f0 	.word	0x0014d3f0
  100060:	0014d3f0 	.word	0x0014d3f0
  100064:	00000000 	.word	0x00000000

00100068 <register_tm_clones>:
  100068:	e59f0024 	ldr	r0, [pc, #36]	; 100094 <register_tm_clones+0x2c>
  10006c:	e59f1024 	ldr	r1, [pc, #36]	; 100098 <register_tm_clones+0x30>
  100070:	e0411000 	sub	r1, r1, r0
  100074:	e1a01141 	asr	r1, r1, #2
  100078:	e0811fa1 	add	r1, r1, r1, lsr #31
  10007c:	e1b010c1 	asrs	r1, r1, #1
  100080:	012fff1e 	bxeq	lr
  100084:	e59f3010 	ldr	r3, [pc, #16]	; 10009c <register_tm_clones+0x34>
  100088:	e3530000 	cmp	r3, #0
  10008c:	012fff1e 	bxeq	lr
  100090:	e12fff13 	bx	r3
  100094:	0014d3f0 	.word	0x0014d3f0
  100098:	0014d3f0 	.word	0x0014d3f0
  10009c:	00000000 	.word	0x00000000

001000a0 <__do_global_dtors_aux>:
  1000a0:	e92d4010 	push	{r4, lr}
  1000a4:	e59f402c 	ldr	r4, [pc, #44]	; 1000d8 <__do_global_dtors_aux+0x38>
  1000a8:	e5d43000 	ldrb	r3, [r4]
  1000ac:	e3530000 	cmp	r3, #0
  1000b0:	18bd8010 	popne	{r4, pc}
  1000b4:	ebffffe0 	bl	10003c <deregister_tm_clones>
  1000b8:	e59f301c 	ldr	r3, [pc, #28]	; 1000dc <__do_global_dtors_aux+0x3c>
  1000bc:	e3530000 	cmp	r3, #0
  1000c0:	0a000001 	beq	1000cc <__do_global_dtors_aux+0x2c>
  1000c4:	e59f0014 	ldr	r0, [pc, #20]	; 1000e0 <__do_global_dtors_aux+0x40>
  1000c8:	e320f000 	nop	{0}
  1000cc:	e3a03001 	mov	r3, #1
  1000d0:	e5c43000 	strb	r3, [r4]
  1000d4:	e8bd8010 	pop	{r4, pc}
  1000d8:	0014d3f0 	.word	0x0014d3f0
  1000dc:	00000000 	.word	0x00000000
  1000e0:	0014cfbc 	.word	0x0014cfbc

001000e4 <frame_dummy>:
  1000e4:	e59f3020 	ldr	r3, [pc, #32]	; 10010c <frame_dummy+0x28>
  1000e8:	e3530000 	cmp	r3, #0
  1000ec:	0a000005 	beq	100108 <frame_dummy+0x24>
  1000f0:	e92d4010 	push	{r4, lr}
  1000f4:	e59f1014 	ldr	r1, [pc, #20]	; 100110 <frame_dummy+0x2c>
  1000f8:	e59f0014 	ldr	r0, [pc, #20]	; 100114 <frame_dummy+0x30>
  1000fc:	e320f000 	nop	{0}
  100100:	e8bd4010 	pop	{r4, lr}
  100104:	eaffffd7 	b	100068 <register_tm_clones>
  100108:	eaffffd6 	b	100068 <register_tm_clones>
  10010c:	00000000 	.word	0x00000000
  100110:	0014d3f4 	.word	0x0014d3f4
  100114:	0014cfbc 	.word	0x0014cfbc

00100118 <rt_channel_open>:

#include <sys/rtt_syscall.h>
#include <rtthread.h>

int rt_channel_open(const char *name, int flags)
{
  100118:	e92d4800 	push	{fp, lr}
  10011c:	e28db004 	add	fp, sp, #4
  100120:	e24dd008 	sub	sp, sp, #8
  100124:	e50b0008 	str	r0, [fp, #-8]
  100128:	e50b100c 	str	r1, [fp, #-12]
    return syscall(_NRSYS_channel_open, name, flags);
  10012c:	e51b200c 	ldr	r2, [fp, #-12]
  100130:	e51b1008 	ldr	r1, [fp, #-8]
  100134:	e3a0002c 	mov	r0, #44	; 0x2c
  100138:	eb00f0c8 	bl	13c460 <syscall>
  10013c:	e1a03000 	mov	r3, r0
}
  100140:	e1a00003 	mov	r0, r3
  100144:	e24bd004 	sub	sp, fp, #4
  100148:	e8bd8800 	pop	{fp, pc}

0010014c <rt_channel_close>:

rt_err_t rt_channel_close(int fd)
{
  10014c:	e92d4800 	push	{fp, lr}
  100150:	e28db004 	add	fp, sp, #4
  100154:	e24dd008 	sub	sp, sp, #8
  100158:	e50b0008 	str	r0, [fp, #-8]
    return syscall(_NRSYS_channel_close, fd);
  10015c:	e51b1008 	ldr	r1, [fp, #-8]
  100160:	e3a0002d 	mov	r0, #45	; 0x2d
  100164:	eb00f0bd 	bl	13c460 <syscall>
  100168:	e1a03000 	mov	r3, r0
}
  10016c:	e1a00003 	mov	r0, r3
  100170:	e24bd004 	sub	sp, fp, #4
  100174:	e8bd8800 	pop	{fp, pc}

00100178 <rt_channel_send_recv>:

rt_err_t rt_channel_send_recv(int fd, rt_channel_msg_t data, rt_channel_msg_t data_ret)
{
  100178:	e92d4800 	push	{fp, lr}
  10017c:	e28db004 	add	fp, sp, #4
  100180:	e24dd018 	sub	sp, sp, #24
  100184:	e50b0008 	str	r0, [fp, #-8]
  100188:	e50b100c 	str	r1, [fp, #-12]
  10018c:	e50b2010 	str	r2, [fp, #-16]
    return syscall(_NRSYS_channel_send_recv_timeout, fd, data, data_ret, RT_WAITING_FOREVER);
  100190:	e3e03000 	mvn	r3, #0
  100194:	e58d3000 	str	r3, [sp]
  100198:	e51b3010 	ldr	r3, [fp, #-16]
  10019c:	e51b200c 	ldr	r2, [fp, #-12]
  1001a0:	e51b1008 	ldr	r1, [fp, #-8]
  1001a4:	e3a0002f 	mov	r0, #47	; 0x2f
  1001a8:	eb00f0ac 	bl	13c460 <syscall>
  1001ac:	e1a03000 	mov	r3, r0
}
  1001b0:	e1a00003 	mov	r0, r3
  1001b4:	e24bd004 	sub	sp, fp, #4
  1001b8:	e8bd8800 	pop	{fp, pc}

001001bc <rt_channel_send_recv_timeout>:

rt_err_t rt_channel_send_recv_timeout(int fd, rt_channel_msg_t data, rt_channel_msg_t data_ret, rt_int32_t time)
{
  1001bc:	e92d4800 	push	{fp, lr}
  1001c0:	e28db004 	add	fp, sp, #4
  1001c4:	e24dd018 	sub	sp, sp, #24
  1001c8:	e50b0008 	str	r0, [fp, #-8]
  1001cc:	e50b100c 	str	r1, [fp, #-12]
  1001d0:	e50b2010 	str	r2, [fp, #-16]
  1001d4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return syscall(_NRSYS_channel_send_recv_timeout, fd, data, data_ret, time);
  1001d8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1001dc:	e58d3000 	str	r3, [sp]
  1001e0:	e51b3010 	ldr	r3, [fp, #-16]
  1001e4:	e51b200c 	ldr	r2, [fp, #-12]
  1001e8:	e51b1008 	ldr	r1, [fp, #-8]
  1001ec:	e3a0002f 	mov	r0, #47	; 0x2f
  1001f0:	eb00f09a 	bl	13c460 <syscall>
  1001f4:	e1a03000 	mov	r3, r0
}
  1001f8:	e1a00003 	mov	r0, r3
  1001fc:	e24bd004 	sub	sp, fp, #4
  100200:	e8bd8800 	pop	{fp, pc}

00100204 <rt_channel_send>:

rt_err_t rt_channel_send(int fd, rt_channel_msg_t data)
{
  100204:	e92d4800 	push	{fp, lr}
  100208:	e28db004 	add	fp, sp, #4
  10020c:	e24dd008 	sub	sp, sp, #8
  100210:	e50b0008 	str	r0, [fp, #-8]
  100214:	e50b100c 	str	r1, [fp, #-12]
    return syscall(_NRSYS_channel_send, fd, data);
  100218:	e51b200c 	ldr	r2, [fp, #-12]
  10021c:	e51b1008 	ldr	r1, [fp, #-8]
  100220:	e3a0002e 	mov	r0, #46	; 0x2e
  100224:	eb00f08d 	bl	13c460 <syscall>
  100228:	e1a03000 	mov	r3, r0
}
  10022c:	e1a00003 	mov	r0, r3
  100230:	e24bd004 	sub	sp, fp, #4
  100234:	e8bd8800 	pop	{fp, pc}

00100238 <rt_channel_reply>:

rt_err_t rt_channel_reply(int fd, rt_channel_msg_t data)
{
  100238:	e92d4800 	push	{fp, lr}
  10023c:	e28db004 	add	fp, sp, #4
  100240:	e24dd008 	sub	sp, sp, #8
  100244:	e50b0008 	str	r0, [fp, #-8]
  100248:	e50b100c 	str	r1, [fp, #-12]
    return syscall(_NRSYS_channel_reply, fd, data);
  10024c:	e51b200c 	ldr	r2, [fp, #-12]
  100250:	e51b1008 	ldr	r1, [fp, #-8]
  100254:	e3a00030 	mov	r0, #48	; 0x30
  100258:	eb00f080 	bl	13c460 <syscall>
  10025c:	e1a03000 	mov	r3, r0
}
  100260:	e1a00003 	mov	r0, r3
  100264:	e24bd004 	sub	sp, fp, #4
  100268:	e8bd8800 	pop	{fp, pc}

0010026c <rt_channel_recv>:

rt_err_t rt_channel_recv(int fd, rt_channel_msg_t data)
{
  10026c:	e92d4800 	push	{fp, lr}
  100270:	e28db004 	add	fp, sp, #4
  100274:	e24dd008 	sub	sp, sp, #8
  100278:	e50b0008 	str	r0, [fp, #-8]
  10027c:	e50b100c 	str	r1, [fp, #-12]
    return syscall(_NRSYS_channel_recv_timeout, fd, data, RT_WAITING_FOREVER);
  100280:	e3e03000 	mvn	r3, #0
  100284:	e51b200c 	ldr	r2, [fp, #-12]
  100288:	e51b1008 	ldr	r1, [fp, #-8]
  10028c:	e3a00031 	mov	r0, #49	; 0x31
  100290:	eb00f072 	bl	13c460 <syscall>
  100294:	e1a03000 	mov	r3, r0
}
  100298:	e1a00003 	mov	r0, r3
  10029c:	e24bd004 	sub	sp, fp, #4
  1002a0:	e8bd8800 	pop	{fp, pc}

001002a4 <rt_channel_recv_timeout>:

rt_err_t rt_channel_recv_timeout(int fd, rt_channel_msg_t data, rt_int32_t time)
{
  1002a4:	e92d4800 	push	{fp, lr}
  1002a8:	e28db004 	add	fp, sp, #4
  1002ac:	e24dd010 	sub	sp, sp, #16
  1002b0:	e50b0008 	str	r0, [fp, #-8]
  1002b4:	e50b100c 	str	r1, [fp, #-12]
  1002b8:	e50b2010 	str	r2, [fp, #-16]
    return syscall(_NRSYS_channel_recv_timeout, fd, data, time);
  1002bc:	e51b3010 	ldr	r3, [fp, #-16]
  1002c0:	e51b200c 	ldr	r2, [fp, #-12]
  1002c4:	e51b1008 	ldr	r1, [fp, #-8]
  1002c8:	e3a00031 	mov	r0, #49	; 0x31
  1002cc:	eb00f063 	bl	13c460 <syscall>
  1002d0:	e1a03000 	mov	r3, r0
}
  1002d4:	e1a00003 	mov	r0, r3
  1002d8:	e24bd004 	sub	sp, fp, #4
  1002dc:	e8bd8800 	pop	{fp, pc}

001002e0 <rt_channel_peek>:

rt_err_t rt_channel_peek(int fd, rt_channel_msg_t data)
{
  1002e0:	e92d4800 	push	{fp, lr}
  1002e4:	e28db004 	add	fp, sp, #4
  1002e8:	e24dd008 	sub	sp, sp, #8
  1002ec:	e50b0008 	str	r0, [fp, #-8]
  1002f0:	e50b100c 	str	r1, [fp, #-12]
    return syscall(_NRSYS_channel_recv_timeout, fd, data, 0);
  1002f4:	e3a03000 	mov	r3, #0
  1002f8:	e51b200c 	ldr	r2, [fp, #-12]
  1002fc:	e51b1008 	ldr	r1, [fp, #-8]
  100300:	e3a00031 	mov	r0, #49	; 0x31
  100304:	eb00f055 	bl	13c460 <syscall>
  100308:	e1a03000 	mov	r3, r0
}
  10030c:	e1a00003 	mov	r0, r3
  100310:	e24bd004 	sub	sp, fp, #4
  100314:	e8bd8800 	pop	{fp, pc}

00100318 <rt_completion_init>:
 * 2019-10-01     Bernard      code cleanup
 */
#include <rtdevice.h>

void rt_completion_init(struct rt_completion *completion)
{
  100318:	e92d4800 	push	{fp, lr}
  10031c:	e28db004 	add	fp, sp, #4
  100320:	e24dd008 	sub	sp, sp, #8
  100324:	e50b0008 	str	r0, [fp, #-8]
    if (completion && completion->flag == 0)
  100328:	e51b3008 	ldr	r3, [fp, #-8]
  10032c:	e3530000 	cmp	r3, #0
  100330:	0a00000d 	beq	10036c <rt_completion_init+0x54>
  100334:	e51b3008 	ldr	r3, [fp, #-8]
  100338:	e5933000 	ldr	r3, [r3]
  10033c:	e3530000 	cmp	r3, #0
  100340:	1a000009 	bne	10036c <rt_completion_init+0x54>
    {
        completion->flag = 0x5A5A;
  100344:	e51b3008 	ldr	r3, [fp, #-8]
  100348:	e3052a5a 	movw	r2, #23130	; 0x5a5a
  10034c:	e5832000 	str	r2, [r3]
        completion->wait_event = rt_event_create("completion", RT_IPC_FLAG_FIFO);
  100350:	e3a01000 	mov	r1, #0
  100354:	e3050384 	movw	r0, #21380	; 0x5384
  100358:	e3400014 	movt	r0, #20
  10035c:	eb0005e5 	bl	101af8 <rt_event_create>
  100360:	e1a02000 	mov	r2, r0
  100364:	e51b3008 	ldr	r3, [fp, #-8]
  100368:	e5832004 	str	r2, [r3, #4]
    }
}
  10036c:	e320f000 	nop	{0}
  100370:	e24bd004 	sub	sp, fp, #4
  100374:	e8bd8800 	pop	{fp, pc}

00100378 <rt_completion_wait>:

rt_err_t rt_completion_wait(struct rt_completion *completion,
    rt_int32_t timeout)
{
  100378:	e92d4800 	push	{fp, lr}
  10037c:	e28db004 	add	fp, sp, #4
  100380:	e24dd018 	sub	sp, sp, #24
  100384:	e50b0010 	str	r0, [fp, #-16]
  100388:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    rt_err_t ret;
    rt_uint32_t recv = 0;
  10038c:	e3a03000 	mov	r3, #0
  100390:	e50b300c 	str	r3, [fp, #-12]

    ret = rt_event_recv(completion->wait_event, 0x01, RT_EVENT_FLAG_OR | RT_EVENT_FLAG_CLEAR, timeout, &recv);
  100394:	e51b3010 	ldr	r3, [fp, #-16]
  100398:	e5930004 	ldr	r0, [r3, #4]
  10039c:	e24b300c 	sub	r3, fp, #12
  1003a0:	e58d3000 	str	r3, [sp]
  1003a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1003a8:	e3a02006 	mov	r2, #6
  1003ac:	e3a01001 	mov	r1, #1
  1003b0:	eb000684 	bl	101dc8 <rt_event_recv>
  1003b4:	e50b0008 	str	r0, [fp, #-8]

    return ret;
  1003b8:	e51b3008 	ldr	r3, [fp, #-8]
}
  1003bc:	e1a00003 	mov	r0, r3
  1003c0:	e24bd004 	sub	sp, fp, #4
  1003c4:	e8bd8800 	pop	{fp, pc}

001003c8 <rt_completion_done>:

void rt_completion_done(struct rt_completion *completion)
{
  1003c8:	e92d4800 	push	{fp, lr}
  1003cc:	e28db004 	add	fp, sp, #4
  1003d0:	e24dd008 	sub	sp, sp, #8
  1003d4:	e50b0008 	str	r0, [fp, #-8]
    rt_event_send(completion->wait_event, 0x01);
  1003d8:	e51b3008 	ldr	r3, [fp, #-8]
  1003dc:	e5933004 	ldr	r3, [r3, #4]
  1003e0:	e3a01001 	mov	r1, #1
  1003e4:	e1a00003 	mov	r0, r3
  1003e8:	eb000658 	bl	101d50 <rt_event_send>
}
  1003ec:	e320f000 	nop	{0}
  1003f0:	e24bd004 	sub	sp, fp, #4
  1003f4:	e8bd8800 	pop	{fp, pc}

001003f8 <rt_device_init>:

#include <sys/rtt_syscall.h>
#include <rtthread.h>

rt_err_t rt_device_init(rt_device_t dev)
{
  1003f8:	e92d4800 	push	{fp, lr}
  1003fc:	e28db004 	add	fp, sp, #4
  100400:	e24dd008 	sub	sp, sp, #8
  100404:	e50b0008 	str	r0, [fp, #-8]
    return syscall(_NRSYS_rt_device_init, dev);
  100408:	e51b1008 	ldr	r1, [fp, #-8]
  10040c:	e3a0003b 	mov	r0, #59	; 0x3b
  100410:	eb00f012 	bl	13c460 <syscall>
  100414:	e1a03000 	mov	r3, r0
}
  100418:	e1a00003 	mov	r0, r3
  10041c:	e24bd004 	sub	sp, fp, #4
  100420:	e8bd8800 	pop	{fp, pc}

00100424 <rt_device_register>:

rt_err_t rt_device_register(rt_device_t dev,
        const char *name,
        rt_uint16_t flags)
{
  100424:	e92d4800 	push	{fp, lr}
  100428:	e28db004 	add	fp, sp, #4
  10042c:	e24dd010 	sub	sp, sp, #16
  100430:	e50b0008 	str	r0, [fp, #-8]
  100434:	e50b100c 	str	r1, [fp, #-12]
  100438:	e1a03002 	mov	r3, r2
  10043c:	e14b30be 	strh	r3, [fp, #-14]
    return syscall(_NRSYS_rt_device_register, dev, name, flags);
  100440:	e15b30be 	ldrh	r3, [fp, #-14]
  100444:	e51b200c 	ldr	r2, [fp, #-12]
  100448:	e51b1008 	ldr	r1, [fp, #-8]
  10044c:	e3a0003c 	mov	r0, #60	; 0x3c
  100450:	eb00f002 	bl	13c460 <syscall>
  100454:	e1a03000 	mov	r3, r0
}
  100458:	e1a00003 	mov	r0, r3
  10045c:	e24bd004 	sub	sp, fp, #4
  100460:	e8bd8800 	pop	{fp, pc}

00100464 <rt_device_control>:

rt_err_t rt_device_control(rt_device_t dev, int cmd, void *arg)
{
  100464:	e92d4800 	push	{fp, lr}
  100468:	e28db004 	add	fp, sp, #4
  10046c:	e24dd010 	sub	sp, sp, #16
  100470:	e50b0008 	str	r0, [fp, #-8]
  100474:	e50b100c 	str	r1, [fp, #-12]
  100478:	e50b2010 	str	r2, [fp, #-16]
    return syscall(_NRSYS_rt_device_control, dev, cmd, arg);
  10047c:	e51b3010 	ldr	r3, [fp, #-16]
  100480:	e51b200c 	ldr	r2, [fp, #-12]
  100484:	e51b1008 	ldr	r1, [fp, #-8]
  100488:	e3a0003d 	mov	r0, #61	; 0x3d
  10048c:	eb00eff3 	bl	13c460 <syscall>
  100490:	e1a03000 	mov	r3, r0
}
  100494:	e1a00003 	mov	r0, r3
  100498:	e24bd004 	sub	sp, fp, #4
  10049c:	e8bd8800 	pop	{fp, pc}

001004a0 <rt_device_find>:

rt_device_t rt_device_find(const char *name)
{
  1004a0:	e92d4800 	push	{fp, lr}
  1004a4:	e28db004 	add	fp, sp, #4
  1004a8:	e24dd008 	sub	sp, sp, #8
  1004ac:	e50b0008 	str	r0, [fp, #-8]
    return (rt_device_t)syscall(_NRSYS_rt_device_find, name);
  1004b0:	e51b1008 	ldr	r1, [fp, #-8]
  1004b4:	e3a0003e 	mov	r0, #62	; 0x3e
  1004b8:	eb00efe8 	bl	13c460 <syscall>
  1004bc:	e1a03000 	mov	r3, r0
}
  1004c0:	e1a00003 	mov	r0, r3
  1004c4:	e24bd004 	sub	sp, fp, #4
  1004c8:	e8bd8800 	pop	{fp, pc}

001004cc <rt_device_open>:

rt_err_t rt_device_open(rt_device_t dev, rt_uint16_t oflag)
{
  1004cc:	e92d4800 	push	{fp, lr}
  1004d0:	e28db004 	add	fp, sp, #4
  1004d4:	e24dd008 	sub	sp, sp, #8
  1004d8:	e50b0008 	str	r0, [fp, #-8]
  1004dc:	e1a03001 	mov	r3, r1
  1004e0:	e14b30ba 	strh	r3, [fp, #-10]
    return syscall(_NRSYS_rt_device_open, dev, oflag);
  1004e4:	e15b30ba 	ldrh	r3, [fp, #-10]
  1004e8:	e1a02003 	mov	r2, r3
  1004ec:	e51b1008 	ldr	r1, [fp, #-8]
  1004f0:	e3a0003f 	mov	r0, #63	; 0x3f
  1004f4:	eb00efd9 	bl	13c460 <syscall>
  1004f8:	e1a03000 	mov	r3, r0
}
  1004fc:	e1a00003 	mov	r0, r3
  100500:	e24bd004 	sub	sp, fp, #4
  100504:	e8bd8800 	pop	{fp, pc}

00100508 <rt_device_close>:

rt_err_t rt_device_close(rt_device_t dev)
{
  100508:	e92d4800 	push	{fp, lr}
  10050c:	e28db004 	add	fp, sp, #4
  100510:	e24dd008 	sub	sp, sp, #8
  100514:	e50b0008 	str	r0, [fp, #-8]
    return syscall(_NRSYS_rt_device_close, dev);
  100518:	e51b1008 	ldr	r1, [fp, #-8]
  10051c:	e3a00040 	mov	r0, #64	; 0x40
  100520:	eb00efce 	bl	13c460 <syscall>
  100524:	e1a03000 	mov	r3, r0
}
  100528:	e1a00003 	mov	r0, r3
  10052c:	e24bd004 	sub	sp, fp, #4
  100530:	e8bd8800 	pop	{fp, pc}

00100534 <rt_device_read>:

rt_size_t rt_device_read(rt_device_t dev,
        rt_off_t    pos,
        void       *buffer,
        rt_size_t   size)
{
  100534:	e92d4800 	push	{fp, lr}
  100538:	e28db004 	add	fp, sp, #4
  10053c:	e24dd018 	sub	sp, sp, #24
  100540:	e50b0008 	str	r0, [fp, #-8]
  100544:	e50b100c 	str	r1, [fp, #-12]
  100548:	e50b2010 	str	r2, [fp, #-16]
  10054c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return syscall(_NRSYS_rt_device_read, dev, pos, buffer, size);
  100550:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  100554:	e58d3000 	str	r3, [sp]
  100558:	e51b3010 	ldr	r3, [fp, #-16]
  10055c:	e51b200c 	ldr	r2, [fp, #-12]
  100560:	e51b1008 	ldr	r1, [fp, #-8]
  100564:	e3a00041 	mov	r0, #65	; 0x41
  100568:	eb00efbc 	bl	13c460 <syscall>
  10056c:	e1a03000 	mov	r3, r0
}
  100570:	e1a00003 	mov	r0, r3
  100574:	e24bd004 	sub	sp, fp, #4
  100578:	e8bd8800 	pop	{fp, pc}

0010057c <rt_device_write>:

rt_size_t rt_device_write(rt_device_t dev,
        rt_off_t    pos,
        const void *buffer,
        rt_size_t   size)
{
  10057c:	e92d4800 	push	{fp, lr}
  100580:	e28db004 	add	fp, sp, #4
  100584:	e24dd018 	sub	sp, sp, #24
  100588:	e50b0008 	str	r0, [fp, #-8]
  10058c:	e50b100c 	str	r1, [fp, #-12]
  100590:	e50b2010 	str	r2, [fp, #-16]
  100594:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return syscall(_NRSYS_rt_device_write, dev, pos, buffer, size);;
  100598:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10059c:	e58d3000 	str	r3, [sp]
  1005a0:	e51b3010 	ldr	r3, [fp, #-16]
  1005a4:	e51b200c 	ldr	r2, [fp, #-12]
  1005a8:	e51b1008 	ldr	r1, [fp, #-8]
  1005ac:	e3a00042 	mov	r0, #66	; 0x42
  1005b0:	eb00efaa 	bl	13c460 <syscall>
  1005b4:	e1a03000 	mov	r3, r0
}
  1005b8:	e1a00003 	mov	r0, r3
  1005bc:	e24bd004 	sub	sp, fp, #4
  1005c0:	e8bd8800 	pop	{fp, pc}

001005c4 <closesocket>:
#include <netinet/in.h>
#include <fcntl.h>
#include <time.h>

int closesocket(int s)
{
  1005c4:	e92d4800 	push	{fp, lr}
  1005c8:	e28db004 	add	fp, sp, #4
  1005cc:	e24dd008 	sub	sp, sp, #8
  1005d0:	e50b0008 	str	r0, [fp, #-8]
    return (int)syscall(_NRSYS_closesocket, s);
  1005d4:	e51b1008 	ldr	r1, [fp, #-8]
  1005d8:	e3a00053 	mov	r0, #83	; 0x53
  1005dc:	eb00ef9f 	bl	13c460 <syscall>
  1005e0:	e1a03000 	mov	r3, r0
}
  1005e4:	e1a00003 	mov	r0, r3
  1005e8:	e24bd004 	sub	sp, fp, #4
  1005ec:	e8bd8800 	pop	{fp, pc}

001005f0 <getaddrinfo>:

int getaddrinfo(const char *restrict host, const char *restrict serv, const struct addrinfo *restrict hint, struct addrinfo **restrict res)
{
  1005f0:	e92d4800 	push	{fp, lr}
  1005f4:	e28db004 	add	fp, sp, #4
  1005f8:	e24dd020 	sub	sp, sp, #32
  1005fc:	e50b0010 	str	r0, [fp, #-16]
  100600:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  100604:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  100608:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    struct addrinfo *ret = NULL;
  10060c:	e3a03000 	mov	r3, #0
  100610:	e50b3008 	str	r3, [fp, #-8]

    ret = (struct addrinfo *) malloc(sizeof(struct addrinfo) + sizeof(struct sockaddr));
  100614:	e3a00030 	mov	r0, #48	; 0x30
  100618:	eb00f34d 	bl	13d354 <malloc>
  10061c:	e1a03000 	mov	r3, r0
  100620:	e50b3008 	str	r3, [fp, #-8]
    if (ret)
  100624:	e51b3008 	ldr	r3, [fp, #-8]
  100628:	e3530000 	cmp	r3, #0
  10062c:	0a000011 	beq	100678 <getaddrinfo+0x88>
    {
        ret->ai_addr = (struct sockaddr *)(ret + 1);
  100630:	e51b3008 	ldr	r3, [fp, #-8]
  100634:	e2832020 	add	r2, r3, #32
  100638:	e51b3008 	ldr	r3, [fp, #-8]
  10063c:	e5832014 	str	r2, [r3, #20]

        /* invoke syscall */
        int result = syscall(_NRSYS_getaddrinfo, host, serv, hint, ret);
  100640:	e51b3008 	ldr	r3, [fp, #-8]
  100644:	e58d3000 	str	r3, [sp]
  100648:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10064c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  100650:	e51b1010 	ldr	r1, [fp, #-16]
  100654:	e3a00054 	mov	r0, #84	; 0x54
  100658:	eb00ef80 	bl	13c460 <syscall>
  10065c:	e50b000c 	str	r0, [fp, #-12]
        if (result == 0)
  100660:	e51b300c 	ldr	r3, [fp, #-12]
  100664:	e3530000 	cmp	r3, #0
  100668:	1a000002 	bne	100678 <getaddrinfo+0x88>
        {
            *res = ret;
  10066c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100670:	e51b2008 	ldr	r2, [fp, #-8]
  100674:	e5832000 	str	r2, [r3]
        }
    }

    return 0;
  100678:	e3a03000 	mov	r3, #0
}
  10067c:	e1a00003 	mov	r0, r3
  100680:	e24bd004 	sub	sp, fp, #4
  100684:	e8bd8800 	pop	{fp, pc}

00100688 <freeaddrinfo>:

void freeaddrinfo(struct addrinfo *p)
{
  100688:	e92d4800 	push	{fp, lr}
  10068c:	e28db004 	add	fp, sp, #4
  100690:	e24dd008 	sub	sp, sp, #8
  100694:	e50b0008 	str	r0, [fp, #-8]
    /* p->ai_canonname, p->ai_next should be NULL. */
    free(p);
  100698:	e51b0008 	ldr	r0, [fp, #-8]
  10069c:	eb00f4e8 	bl	13da44 <free>
}
  1006a0:	e320f000 	nop	{0}
  1006a4:	e24bd004 	sub	sp, fp, #4
  1006a8:	e8bd8800 	pop	{fp, pc}

001006ac <gethostbyname2_r>:

int gethostbyname2_r(const char *name, int af, struct hostent *ret,
                    char *buf, size_t buflen,
                    struct hostent **result, int *err)
{
  1006ac:	e92d4800 	push	{fp, lr}
  1006b0:	e28db004 	add	fp, sp, #4
  1006b4:	e24dd020 	sub	sp, sp, #32
  1006b8:	e50b0008 	str	r0, [fp, #-8]
  1006bc:	e50b100c 	str	r1, [fp, #-12]
  1006c0:	e50b2010 	str	r2, [fp, #-16]
  1006c4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return syscall(_NRSYS_gethostbyname2_r, name, af, ret, buf, buflen, result, err);
  1006c8:	e59b300c 	ldr	r3, [fp, #12]
  1006cc:	e58d300c 	str	r3, [sp, #12]
  1006d0:	e59b3008 	ldr	r3, [fp, #8]
  1006d4:	e58d3008 	str	r3, [sp, #8]
  1006d8:	e59b3004 	ldr	r3, [fp, #4]
  1006dc:	e58d3004 	str	r3, [sp, #4]
  1006e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1006e4:	e58d3000 	str	r3, [sp]
  1006e8:	e51b3010 	ldr	r3, [fp, #-16]
  1006ec:	e51b200c 	ldr	r2, [fp, #-12]
  1006f0:	e51b1008 	ldr	r1, [fp, #-8]
  1006f4:	e3a00055 	mov	r0, #85	; 0x55
  1006f8:	eb00ef58 	bl	13c460 <syscall>
  1006fc:	e1a03000 	mov	r3, r0
}
  100700:	e1a00003 	mov	r0, r3
  100704:	e24bd004 	sub	sp, fp, #4
  100708:	e8bd8800 	pop	{fp, pc}

0010070c <setnonblocking>:

/* set non-blocking */
int setnonblocking(int fd)
{
  10070c:	e92d4800 	push	{fp, lr}
  100710:	e28db004 	add	fp, sp, #4
  100714:	e24dd010 	sub	sp, sp, #16
  100718:	e50b0010 	str	r0, [fp, #-16]
    int old_option = fcntl( fd, F_GETFL, 0);
  10071c:	e3a02000 	mov	r2, #0
  100720:	e3a01003 	mov	r1, #3
  100724:	e51b0010 	ldr	r0, [fp, #-16]
  100728:	eb00e23a 	bl	139018 <fcntl>
  10072c:	e50b0008 	str	r0, [fp, #-8]
    int new_option = old_option | O_NONBLOCK;
  100730:	e51b3008 	ldr	r3, [fp, #-8]
  100734:	e3833b02 	orr	r3, r3, #2048	; 0x800
  100738:	e50b300c 	str	r3, [fp, #-12]
    if (fcntl(fd, F_SETFL, new_option) == -1)
  10073c:	e51b200c 	ldr	r2, [fp, #-12]
  100740:	e3a01004 	mov	r1, #4
  100744:	e51b0010 	ldr	r0, [fp, #-16]
  100748:	eb00e232 	bl	139018 <fcntl>
  10074c:	e1a03000 	mov	r3, r0
  100750:	e3730001 	cmn	r3, #1
  100754:	1a000004 	bne	10076c <setnonblocking+0x60>
    {
        printf("Set noblocking error!\n");
  100758:	e3050390 	movw	r0, #21392	; 0x5390
  10075c:	e3400014 	movt	r0, #20
  100760:	eb00f7a2 	bl	13e5f0 <puts>
        return 1;
  100764:	e3a03001 	mov	r3, #1
  100768:	ea000000 	b	100770 <setnonblocking+0x64>
    }
    return old_option;
  10076c:	e51b3008 	ldr	r3, [fp, #-8]
}
  100770:	e1a00003 	mov	r0, r3
  100774:	e24bd004 	sub	sp, fp, #4
  100778:	e8bd8800 	pop	{fp, pc}

0010077c <socketpair>:

int socketpair(int domain, int type, int protocol, int sv[2])
{
  10077c:	e92d4810 	push	{r4, fp, lr}
  100780:	e28db008 	add	fp, sp, #8
  100784:	e24ddf43 	sub	sp, sp, #268	; 0x10c
  100788:	e50b0100 	str	r0, [fp, #-256]	; 0xffffff00
  10078c:	e50b1104 	str	r1, [fp, #-260]	; 0xfffffefc
  100790:	e50b2108 	str	r2, [fp, #-264]	; 0xfffffef8
  100794:	e50b310c 	str	r3, [fp, #-268]	; 0xfffffef4
    int listenfd = -1, acceptfd = -1, clientfd = -1;
  100798:	e3e03000 	mvn	r3, #0
  10079c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  1007a0:	e3e03000 	mvn	r3, #0
  1007a4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  1007a8:	e3e03000 	mvn	r3, #0
  1007ac:	e50b3010 	str	r3, [fp, #-16]
    /* for server, accept, client */
    struct sockaddr_in saddr, aaddr, caddr;
    socklen_t len = sizeof(struct sockaddr_in);
  1007b0:	e3a03010 	mov	r3, #16
  1007b4:	e50b3064 	str	r3, [fp, #-100]	; 0xffffff9c
    int on = 1;
  1007b8:	e3a03001 	mov	r3, #1
  1007bc:	e50b3068 	str	r3, [fp, #-104]	; 0xffffff98
    int fdopt;
    int rt_port;

    /* for select */
    int maxfdp = 0;
  1007c0:	e3a03000 	mov	r3, #0
  1007c4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    int rst;
    fd_set rfd;
    struct timeval timeout = {0, 1000};
  1007c8:	e3a02000 	mov	r2, #0
  1007cc:	e3a03000 	mov	r3, #0
  1007d0:	e14b2ffc 	strd	r2, [fp, #-252]	; 0xffffff04
  1007d4:	e3a03ffa 	mov	r3, #1000	; 0x3e8
  1007d8:	e50b30f4 	str	r3, [fp, #-244]	; 0xffffff0c

    /* server socket */
    if ((listenfd = socket(domain, type, protocol)) < 0)
  1007dc:	e51b2108 	ldr	r2, [fp, #-264]	; 0xfffffef8
  1007e0:	e51b1104 	ldr	r1, [fp, #-260]	; 0xfffffefc
  1007e4:	e51b0100 	ldr	r0, [fp, #-256]	; 0xffffff00
  1007e8:	eb00f614 	bl	13e040 <socket>
  1007ec:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
  1007f0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1007f4:	e3530000 	cmp	r3, #0
  1007f8:	aa00000f 	bge	10083c <socketpair+0xc0>
    {
        printf("Create listenfd socket error: %s(errno: %d)\n", strerror(errno), errno);
  1007fc:	eb00e1b6 	bl	138edc <__errno_location>
  100800:	e1a03000 	mov	r3, r0
  100804:	e5933000 	ldr	r3, [r3]
  100808:	e1a00003 	mov	r0, r3
  10080c:	eb00e1d4 	bl	138f64 <strerror>
  100810:	e1a04000 	mov	r4, r0
  100814:	eb00e1b0 	bl	138edc <__errno_location>
  100818:	e1a03000 	mov	r3, r0
  10081c:	e5933000 	ldr	r3, [r3]
  100820:	e1a02003 	mov	r2, r3
  100824:	e1a01004 	mov	r1, r4
  100828:	e30503a8 	movw	r0, #21416	; 0x53a8
  10082c:	e3400014 	movt	r0, #20
  100830:	eb00f760 	bl	13e5b8 <printf>
        return -1;
  100834:	e3e03000 	mvn	r3, #0
  100838:	ea000117 	b	100c9c <socketpair+0x520>
    }
    /* non-blocking */
    setnonblocking(listenfd);
  10083c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  100840:	ebffffb1 	bl	10070c <setnonblocking>

    /* get random port: 5001~65001 */
    srand((unsigned)time(NULL));
  100844:	e3a00000 	mov	r0, #0
  100848:	eb01093e 	bl	142d48 <time>
  10084c:	e1a02000 	mov	r2, r0
  100850:	e1a03001 	mov	r3, r1
  100854:	e1a03002 	mov	r3, r2
  100858:	e1a00003 	mov	r0, r3
  10085c:	eb00f644 	bl	13e174 <srand>
    rt_port = rand() % 60000 + 5001;
  100860:	eb00f649 	bl	13e18c <rand>
  100864:	e1a02000 	mov	r2, r0
  100868:	e30b3273 	movw	r3, #45683	; 0xb273
  10086c:	e34435e7 	movt	r3, #17895	; 0x45e7
  100870:	e0c10392 	smull	r0, r1, r2, r3
  100874:	e1a01741 	asr	r1, r1, #14
  100878:	e1a03fc2 	asr	r3, r2, #31
  10087c:	e0413003 	sub	r3, r1, r3
  100880:	e30e1a60 	movw	r1, #60000	; 0xea60
  100884:	e0030391 	mul	r3, r1, r3
  100888:	e0423003 	sub	r3, r2, r3
  10088c:	e2833d4e 	add	r3, r3, #4992	; 0x1380
  100890:	e2833009 	add	r3, r3, #9
  100894:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8

    /* bind and listen */
    memset(&saddr, 0, sizeof(saddr));
  100898:	e24b3040 	sub	r3, fp, #64	; 0x40
  10089c:	e3a02010 	mov	r2, #16
  1008a0:	e3a01000 	mov	r1, #0
  1008a4:	e1a00003 	mov	r0, r3
  1008a8:	eb010271 	bl	141274 <memset>
    memset(&aaddr, 0, sizeof(aaddr));
  1008ac:	e24b3050 	sub	r3, fp, #80	; 0x50
  1008b0:	e3a02010 	mov	r2, #16
  1008b4:	e3a01000 	mov	r1, #0
  1008b8:	e1a00003 	mov	r0, r3
  1008bc:	eb01026c 	bl	141274 <memset>
    saddr.sin_family = domain;
  1008c0:	e51b3100 	ldr	r3, [fp, #-256]	; 0xffffff00
  1008c4:	e6ff3073 	uxth	r3, r3
  1008c8:	e14b34b0 	strh	r3, [fp, #-64]	; 0xffffffc0
    saddr.sin_port = htons(rt_port);
  1008cc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1008d0:	e6ff3073 	uxth	r3, r3
  1008d4:	e1a00003 	mov	r0, r3
  1008d8:	eb00f5a6 	bl	13df78 <htons>
  1008dc:	e1a03000 	mov	r3, r0
  1008e0:	e14b33be 	strh	r3, [fp, #-62]	; 0xffffffc2
    saddr.sin_addr.s_addr = htonl(INADDR_ANY);
  1008e4:	e3a00000 	mov	r0, #0
  1008e8:	eb00f59d 	bl	13df64 <htonl>
  1008ec:	e1a03000 	mov	r3, r0
  1008f0:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4

    if (setsockopt(listenfd, SOL_SOCKET, SO_REUSEADDR, (const char*)&on, sizeof(int)) < 0)
  1008f4:	e24b2068 	sub	r2, fp, #104	; 0x68
  1008f8:	e3a03004 	mov	r3, #4
  1008fc:	e58d3000 	str	r3, [sp]
  100900:	e1a03002 	mov	r3, r2
  100904:	e3a02002 	mov	r2, #2
  100908:	e3a01001 	mov	r1, #1
  10090c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  100910:	eb00f5b1 	bl	13dfdc <setsockopt>
  100914:	e1a03000 	mov	r3, r0
  100918:	e3530000 	cmp	r3, #0
  10091c:	aa000003 	bge	100930 <socketpair+0x1b4>
    {
        perror("Setsockopt reuseadd failed");
  100920:	e30503d8 	movw	r0, #21464	; 0x53d8
  100924:	e3400014 	movt	r0, #20
  100928:	eb00f6d9 	bl	13e494 <perror>
        goto __exit;
  10092c:	ea0000cf 	b	100c70 <socketpair+0x4f4>
    }

    if (bind(listenfd, (struct sockaddr*)&saddr, sizeof(saddr)) == -1)
  100930:	e24b3040 	sub	r3, fp, #64	; 0x40
  100934:	e3a02010 	mov	r2, #16
  100938:	e1a01003 	mov	r1, r3
  10093c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  100940:	eb00f562 	bl	13ded0 <bind>
  100944:	e1a03000 	mov	r3, r0
  100948:	e3730001 	cmn	r3, #1
  10094c:	1a00000e 	bne	10098c <socketpair+0x210>
    {
        printf("Bind socket error: %s(errno: %d), fd=%d\n", strerror(errno), errno, listenfd);
  100950:	eb00e161 	bl	138edc <__errno_location>
  100954:	e1a03000 	mov	r3, r0
  100958:	e5933000 	ldr	r3, [r3]
  10095c:	e1a00003 	mov	r0, r3
  100960:	eb00e17f 	bl	138f64 <strerror>
  100964:	e1a04000 	mov	r4, r0
  100968:	eb00e15b 	bl	138edc <__errno_location>
  10096c:	e1a03000 	mov	r3, r0
  100970:	e5932000 	ldr	r2, [r3]
  100974:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100978:	e1a01004 	mov	r1, r4
  10097c:	e30503f4 	movw	r0, #21492	; 0x53f4
  100980:	e3400014 	movt	r0, #20
  100984:	eb00f70b 	bl	13e5b8 <printf>
        goto __exit;
  100988:	ea0000b8 	b	100c70 <socketpair+0x4f4>
    }

    if (listen(listenfd, 10) == -1)
  10098c:	e3a0100a 	mov	r1, #10
  100990:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  100994:	eb00f57c 	bl	13df8c <listen>
  100998:	e1a03000 	mov	r3, r0
  10099c:	e3730001 	cmn	r3, #1
  1009a0:	1a00000e 	bne	1009e0 <socketpair+0x264>
    {
        printf("Listen socket error: %s(errno: %d)\n", strerror(errno), errno);
  1009a4:	eb00e14c 	bl	138edc <__errno_location>
  1009a8:	e1a03000 	mov	r3, r0
  1009ac:	e5933000 	ldr	r3, [r3]
  1009b0:	e1a00003 	mov	r0, r3
  1009b4:	eb00e16a 	bl	138f64 <strerror>
  1009b8:	e1a04000 	mov	r4, r0
  1009bc:	eb00e146 	bl	138edc <__errno_location>
  1009c0:	e1a03000 	mov	r3, r0
  1009c4:	e5933000 	ldr	r3, [r3]
  1009c8:	e1a02003 	mov	r2, r3
  1009cc:	e1a01004 	mov	r1, r4
  1009d0:	e3050420 	movw	r0, #21536	; 0x5420
  1009d4:	e3400014 	movt	r0, #20
  1009d8:	eb00f6f6 	bl	13e5b8 <printf>
        goto __exit;
  1009dc:	ea0000a3 	b	100c70 <socketpair+0x4f4>
    }

    /* client socket */
    if ((clientfd = socket(domain, type, protocol)) < 0)
  1009e0:	e51b2108 	ldr	r2, [fp, #-264]	; 0xfffffef8
  1009e4:	e51b1104 	ldr	r1, [fp, #-260]	; 0xfffffefc
  1009e8:	e51b0100 	ldr	r0, [fp, #-256]	; 0xffffff00
  1009ec:	eb00f593 	bl	13e040 <socket>
  1009f0:	e50b0010 	str	r0, [fp, #-16]
  1009f4:	e51b3010 	ldr	r3, [fp, #-16]
  1009f8:	e3530000 	cmp	r3, #0
  1009fc:	aa00000e 	bge	100a3c <socketpair+0x2c0>
    {
        printf("Create clientfd socket error: %s(errno: %d)\n", strerror(errno), errno);
  100a00:	eb00e135 	bl	138edc <__errno_location>
  100a04:	e1a03000 	mov	r3, r0
  100a08:	e5933000 	ldr	r3, [r3]
  100a0c:	e1a00003 	mov	r0, r3
  100a10:	eb00e153 	bl	138f64 <strerror>
  100a14:	e1a04000 	mov	r4, r0
  100a18:	eb00e12f 	bl	138edc <__errno_location>
  100a1c:	e1a03000 	mov	r3, r0
  100a20:	e5933000 	ldr	r3, [r3]
  100a24:	e1a02003 	mov	r2, r3
  100a28:	e1a01004 	mov	r1, r4
  100a2c:	e3050444 	movw	r0, #21572	; 0x5444
  100a30:	e3400014 	movt	r0, #20
  100a34:	eb00f6df 	bl	13e5b8 <printf>
        goto __exit;
  100a38:	ea00008c 	b	100c70 <socketpair+0x4f4>
    }

    /* non-blocking */
    fdopt = setnonblocking(clientfd);
  100a3c:	e51b0010 	ldr	r0, [fp, #-16]
  100a40:	ebffff31 	bl	10070c <setnonblocking>
  100a44:	e50b002c 	str	r0, [fp, #-44]	; 0xffffffd4
    /* client connect */
    memset(&caddr, 0, sizeof(caddr));
  100a48:	e24b3060 	sub	r3, fp, #96	; 0x60
  100a4c:	e3a02010 	mov	r2, #16
  100a50:	e3a01000 	mov	r1, #0
  100a54:	e1a00003 	mov	r0, r3
  100a58:	eb010205 	bl	141274 <memset>
    caddr.sin_family = domain;
  100a5c:	e51b3100 	ldr	r3, [fp, #-256]	; 0xffffff00
  100a60:	e6ff3073 	uxth	r3, r3
  100a64:	e14b36b0 	strh	r3, [fp, #-96]	; 0xffffffa0
    caddr.sin_port =htons(rt_port);
  100a68:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  100a6c:	e6ff3073 	uxth	r3, r3
  100a70:	e1a00003 	mov	r0, r3
  100a74:	eb00f53f 	bl	13df78 <htons>
  100a78:	e1a03000 	mov	r3, r0
  100a7c:	e14b35be 	strh	r3, [fp, #-94]	; 0xffffffa2
    caddr.sin_addr.s_addr=htonl(INADDR_ANY);
  100a80:	e3a00000 	mov	r0, #0
  100a84:	eb00f536 	bl	13df64 <htonl>
  100a88:	e1a03000 	mov	r3, r0
  100a8c:	e50b305c 	str	r3, [fp, #-92]	; 0xffffffa4
    connect(clientfd, (struct sockaddr*)&caddr, sizeof(caddr));
  100a90:	e24b3060 	sub	r3, fp, #96	; 0x60
  100a94:	e3a02010 	mov	r2, #16
  100a98:	e1a01003 	mov	r1, r3
  100a9c:	e51b0010 	ldr	r0, [fp, #-16]
  100aa0:	eb00f520 	bl	13df28 <connect>

    /* do select */
    FD_ZERO(&rfd);
  100aa4:	e24b30e8 	sub	r3, fp, #232	; 0xe8
  100aa8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  100aac:	e3a03020 	mov	r3, #32
  100ab0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  100ab4:	ea000007 	b	100ad8 <socketpair+0x35c>
  100ab8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  100abc:	e2832004 	add	r2, r3, #4
  100ac0:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  100ac4:	e3a02000 	mov	r2, #0
  100ac8:	e5832000 	str	r2, [r3]
  100acc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  100ad0:	e2433001 	sub	r3, r3, #1
  100ad4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  100ad8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  100adc:	e3530000 	cmp	r3, #0
  100ae0:	1afffff4 	bne	100ab8 <socketpair+0x33c>
    FD_SET(listenfd, &rfd);
  100ae4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100ae8:	e1a022a3 	lsr	r2, r3, #5
  100aec:	e1a03102 	lsl	r3, r2, #2
  100af0:	e24b100c 	sub	r1, fp, #12
  100af4:	e0813003 	add	r3, r1, r3
  100af8:	e51310dc 	ldr	r1, [r3, #-220]	; 0xffffff24
  100afc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100b00:	e203301f 	and	r3, r3, #31
  100b04:	e3a00001 	mov	r0, #1
  100b08:	e1a03310 	lsl	r3, r0, r3
  100b0c:	e1811003 	orr	r1, r1, r3
  100b10:	e1a03102 	lsl	r3, r2, #2
  100b14:	e24b200c 	sub	r2, fp, #12
  100b18:	e0823003 	add	r3, r2, r3
  100b1c:	e50310dc 	str	r1, [r3, #-220]	; 0xffffff24
    FD_SET(clientfd, &rfd);
  100b20:	e51b3010 	ldr	r3, [fp, #-16]
  100b24:	e1a022a3 	lsr	r2, r3, #5
  100b28:	e1a03102 	lsl	r3, r2, #2
  100b2c:	e24b100c 	sub	r1, fp, #12
  100b30:	e0813003 	add	r3, r1, r3
  100b34:	e51310dc 	ldr	r1, [r3, #-220]	; 0xffffff24
  100b38:	e51b3010 	ldr	r3, [fp, #-16]
  100b3c:	e203301f 	and	r3, r3, #31
  100b40:	e3a00001 	mov	r0, #1
  100b44:	e1a03310 	lsl	r3, r0, r3
  100b48:	e1811003 	orr	r1, r1, r3
  100b4c:	e1a03102 	lsl	r3, r2, #2
  100b50:	e24b200c 	sub	r2, fp, #12
  100b54:	e0823003 	add	r3, r2, r3
  100b58:	e50310dc 	str	r1, [r3, #-220]	; 0xffffff24
    maxfdp = listenfd > clientfd ? listenfd+1 : clientfd+1;
  100b5c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  100b60:	e51b3010 	ldr	r3, [fp, #-16]
  100b64:	e1520003 	cmp	r2, r3
  100b68:	da000002 	ble	100b78 <socketpair+0x3fc>
  100b6c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100b70:	e2833001 	add	r3, r3, #1
  100b74:	ea000001 	b	100b80 <socketpair+0x404>
  100b78:	e51b3010 	ldr	r3, [fp, #-16]
  100b7c:	e2833001 	add	r3, r3, #1
  100b80:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    rst = select(maxfdp, &rfd, NULL, NULL, &timeout);
  100b84:	e24b10e8 	sub	r1, fp, #232	; 0xe8
  100b88:	e24b30fc 	sub	r3, fp, #252	; 0xfc
  100b8c:	e58d3000 	str	r3, [sp]
  100b90:	e3a03000 	mov	r3, #0
  100b94:	e3a02000 	mov	r2, #0
  100b98:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  100b9c:	eb00f58c 	bl	13e1d4 <select>
  100ba0:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
    switch(rst)
  100ba4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  100ba8:	e3730001 	cmn	r3, #1
  100bac:	0a000002 	beq	100bbc <socketpair+0x440>
  100bb0:	e3530000 	cmp	r3, #0
  100bb4:	0a000004 	beq	100bcc <socketpair+0x450>
  100bb8:	ea000007 	b	100bdc <socketpair+0x460>
    {
    case -1:
        perror("select error");
  100bbc:	e3050474 	movw	r0, #21620	; 0x5474
  100bc0:	e3400014 	movt	r0, #20
  100bc4:	eb00f632 	bl	13e494 <perror>
        goto __exit;
  100bc8:	ea000028 	b	100c70 <socketpair+0x4f4>
        break;
    case 0:
        perror("continue");
  100bcc:	e3050484 	movw	r0, #21636	; 0x5484
  100bd0:	e3400014 	movt	r0, #20
  100bd4:	eb00f62e 	bl	13e494 <perror>
        break;
  100bd8:	ea000024 	b	100c70 <socketpair+0x4f4>
    default:
        if (FD_ISSET(listenfd, &rfd))
  100bdc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100be0:	e1a032a3 	lsr	r3, r3, #5
  100be4:	e1a03103 	lsl	r3, r3, #2
  100be8:	e24b200c 	sub	r2, fp, #12
  100bec:	e0823003 	add	r3, r2, r3
  100bf0:	e51320dc 	ldr	r2, [r3, #-220]	; 0xffffff24
  100bf4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100bf8:	e203301f 	and	r3, r3, #31
  100bfc:	e1a03332 	lsr	r3, r2, r3
  100c00:	e2033001 	and	r3, r3, #1
  100c04:	e3530000 	cmp	r3, #0
  100c08:	0a000017 	beq	100c6c <socketpair+0x4f0>
        {
            if ((acceptfd = accept(listenfd, (struct sockaddr*)&caddr, &len)) > 0)
  100c0c:	e24b2064 	sub	r2, fp, #100	; 0x64
  100c10:	e24b3060 	sub	r3, fp, #96	; 0x60
  100c14:	e1a01003 	mov	r1, r3
  100c18:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  100c1c:	eb00f49c 	bl	13de94 <accept>
  100c20:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  100c24:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  100c28:	e3530000 	cmp	r3, #0
  100c2c:	da00000c 	ble	100c64 <socketpair+0x4e8>
            {
                close(listenfd);
  100c30:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  100c34:	eb01084f 	bl	142d78 <close>
                /* set old optional back */
                fcntl(clientfd, F_SETFL, fdopt);
  100c38:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  100c3c:	e3a01004 	mov	r1, #4
  100c40:	e51b0010 	ldr	r0, [fp, #-16]
  100c44:	eb00e0f3 	bl	139018 <fcntl>
                sv[0] = clientfd;
  100c48:	e51b310c 	ldr	r3, [fp, #-268]	; 0xfffffef4
  100c4c:	e51b2010 	ldr	r2, [fp, #-16]
  100c50:	e5832000 	str	r2, [r3]
                sv[1] = acceptfd;
  100c54:	e51b310c 	ldr	r3, [fp, #-268]	; 0xfffffef4
  100c58:	e2833004 	add	r3, r3, #4
  100c5c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  100c60:	e5832000 	str	r2, [r3]
            }

            return 0;
  100c64:	e3a03000 	mov	r3, #0
  100c68:	ea00000b 	b	100c9c <socketpair+0x520>
        }
    }

__exit:
  100c6c:	e320f000 	nop	{0}
    if (listenfd >= 0) close(listenfd);
  100c70:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100c74:	e3530000 	cmp	r3, #0
  100c78:	ba000001 	blt	100c84 <socketpair+0x508>
  100c7c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  100c80:	eb01083c 	bl	142d78 <close>
    if (clientfd >= 0) close(clientfd);
  100c84:	e51b3010 	ldr	r3, [fp, #-16]
  100c88:	e3530000 	cmp	r3, #0
  100c8c:	ba000001 	blt	100c98 <socketpair+0x51c>
  100c90:	e51b0010 	ldr	r0, [fp, #-16]
  100c94:	eb010837 	bl	142d78 <close>

    return -1;
  100c98:	e3e03000 	mvn	r3, #0
}
  100c9c:	e1a00003 	mov	r0, r3
  100ca0:	e24bd008 	sub	sp, fp, #8
  100ca4:	e8bd8810 	pop	{r4, fp, pc}

00100ca8 <rt_mutex_create>:
            return RT_EIO;\
        }\
    } while (0)

rt_mutex_t rt_mutex_create(const char *name, rt_uint8_t flag)
{
  100ca8:	e92d4800 	push	{fp, lr}
  100cac:	e28db004 	add	fp, sp, #4
  100cb0:	e24dd010 	sub	sp, sp, #16
  100cb4:	e50b0010 	str	r0, [fp, #-16]
  100cb8:	e1a03001 	mov	r3, r1
  100cbc:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    RT_USER_IPC_CREATE(RT_Object_Class_Mutex, _NRSYS_mutex_create, name, flag);
  100cc0:	e3a00008 	mov	r0, #8
  100cc4:	eb00f1a2 	bl	13d354 <malloc>
  100cc8:	e1a03000 	mov	r3, r0
  100ccc:	e50b3008 	str	r3, [fp, #-8]
  100cd0:	e51b3008 	ldr	r3, [fp, #-8]
  100cd4:	e3530000 	cmp	r3, #0
  100cd8:	1a000001 	bne	100ce4 <rt_mutex_create+0x3c>
  100cdc:	e3a03000 	mov	r3, #0
  100ce0:	ea000015 	b	100d3c <rt_mutex_create+0x94>
  100ce4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  100ce8:	e1a02003 	mov	r2, r3
  100cec:	e51b1010 	ldr	r1, [fp, #-16]
  100cf0:	e3a00016 	mov	r0, #22
  100cf4:	eb00edd9 	bl	13c460 <syscall>
  100cf8:	e1a03000 	mov	r3, r0
  100cfc:	e1a02003 	mov	r2, r3
  100d00:	e51b3008 	ldr	r3, [fp, #-8]
  100d04:	e5832004 	str	r2, [r3, #4]
  100d08:	e51b3008 	ldr	r3, [fp, #-8]
  100d0c:	e5933004 	ldr	r3, [r3, #4]
  100d10:	e3530000 	cmp	r3, #0
  100d14:	0a000003 	beq	100d28 <rt_mutex_create+0x80>
  100d18:	e51b3008 	ldr	r3, [fp, #-8]
  100d1c:	e3a02003 	mov	r2, #3
  100d20:	e5832000 	str	r2, [r3]
  100d24:	ea000003 	b	100d38 <rt_mutex_create+0x90>
  100d28:	e51b0008 	ldr	r0, [fp, #-8]
  100d2c:	eb00f344 	bl	13da44 <free>
  100d30:	e3a03000 	mov	r3, #0
  100d34:	e50b3008 	str	r3, [fp, #-8]
  100d38:	e51b3008 	ldr	r3, [fp, #-8]
}
  100d3c:	e1a00003 	mov	r0, r3
  100d40:	e24bd004 	sub	sp, fp, #4
  100d44:	e8bd8800 	pop	{fp, pc}

00100d48 <rt_mutex_init>:

rt_err_t rt_mutex_init(rt_mutex_t mutex, const char *name, rt_uint8_t flag)
{
  100d48:	e92d4800 	push	{fp, lr}
  100d4c:	e28db004 	add	fp, sp, #4
  100d50:	e24dd010 	sub	sp, sp, #16
  100d54:	e50b0008 	str	r0, [fp, #-8]
  100d58:	e50b100c 	str	r1, [fp, #-12]
  100d5c:	e1a03002 	mov	r3, r2
  100d60:	e54b300d 	strb	r3, [fp, #-13]
    RT_USER_IPC_INIT(mutex, RT_Object_Class_Mutex, _NRSYS_mutex_create, name, flag);
  100d64:	e51b3008 	ldr	r3, [fp, #-8]
  100d68:	e3530000 	cmp	r3, #0
  100d6c:	1a000001 	bne	100d78 <rt_mutex_init+0x30>
  100d70:	e3a03008 	mov	r3, #8
  100d74:	ea000012 	b	100dc4 <rt_mutex_init+0x7c>
  100d78:	e55b300d 	ldrb	r3, [fp, #-13]
  100d7c:	e1a02003 	mov	r2, r3
  100d80:	e51b100c 	ldr	r1, [fp, #-12]
  100d84:	e3a00016 	mov	r0, #22
  100d88:	eb00edb4 	bl	13c460 <syscall>
  100d8c:	e1a03000 	mov	r3, r0
  100d90:	e1a02003 	mov	r2, r3
  100d94:	e51b3008 	ldr	r3, [fp, #-8]
  100d98:	e5832004 	str	r2, [r3, #4]
  100d9c:	e51b3008 	ldr	r3, [fp, #-8]
  100da0:	e5933004 	ldr	r3, [r3, #4]
  100da4:	e3530000 	cmp	r3, #0
  100da8:	0a000004 	beq	100dc0 <rt_mutex_init+0x78>
  100dac:	e51b3008 	ldr	r3, [fp, #-8]
  100db0:	e3a02003 	mov	r2, #3
  100db4:	e5832000 	str	r2, [r3]
  100db8:	e3a03000 	mov	r3, #0
  100dbc:	ea000000 	b	100dc4 <rt_mutex_init+0x7c>
  100dc0:	e3a03001 	mov	r3, #1
}
  100dc4:	e1a00003 	mov	r0, r3
  100dc8:	e24bd004 	sub	sp, fp, #4
  100dcc:	e8bd8800 	pop	{fp, pc}

00100dd0 <rt_mutex_delete>:

rt_err_t rt_mutex_delete(rt_mutex_t mutex)
{
  100dd0:	e92d4800 	push	{fp, lr}
  100dd4:	e28db004 	add	fp, sp, #4
  100dd8:	e24dd010 	sub	sp, sp, #16
  100ddc:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DELETE(mutex, RT_Object_Class_Mutex, _NRSYS_mutex_delete);
  100de0:	e51b3010 	ldr	r3, [fp, #-16]
  100de4:	e3530000 	cmp	r3, #0
  100de8:	0a000003 	beq	100dfc <rt_mutex_delete+0x2c>
  100dec:	e51b3010 	ldr	r3, [fp, #-16]
  100df0:	e5933004 	ldr	r3, [r3, #4]
  100df4:	e3530000 	cmp	r3, #0
  100df8:	1a000001 	bne	100e04 <rt_mutex_delete+0x34>
  100dfc:	e3a03008 	mov	r3, #8
  100e00:	ea000013 	b	100e54 <rt_mutex_delete+0x84>
  100e04:	e51b3010 	ldr	r3, [fp, #-16]
  100e08:	e5933000 	ldr	r3, [r3]
  100e0c:	e3530003 	cmp	r3, #3
  100e10:	0a000001 	beq	100e1c <rt_mutex_delete+0x4c>
  100e14:	e3a03008 	mov	r3, #8
  100e18:	ea00000d 	b	100e54 <rt_mutex_delete+0x84>
  100e1c:	e51b3010 	ldr	r3, [fp, #-16]
  100e20:	e5933004 	ldr	r3, [r3, #4]
  100e24:	e1a01003 	mov	r1, r3
  100e28:	e3a00017 	mov	r0, #23
  100e2c:	eb00ed8b 	bl	13c460 <syscall>
  100e30:	e50b0008 	str	r0, [fp, #-8]
  100e34:	e51b3008 	ldr	r3, [fp, #-8]
  100e38:	e3530000 	cmp	r3, #0
  100e3c:	0a000001 	beq	100e48 <rt_mutex_delete+0x78>
  100e40:	e51b3008 	ldr	r3, [fp, #-8]
  100e44:	ea000002 	b	100e54 <rt_mutex_delete+0x84>
  100e48:	e51b0010 	ldr	r0, [fp, #-16]
  100e4c:	eb00f2fc 	bl	13da44 <free>
  100e50:	e3a03000 	mov	r3, #0
}
  100e54:	e1a00003 	mov	r0, r3
  100e58:	e24bd004 	sub	sp, fp, #4
  100e5c:	e8bd8800 	pop	{fp, pc}

00100e60 <rt_mutex_detach>:

rt_err_t rt_mutex_detach(rt_mutex_t mutex)
{
  100e60:	e92d4800 	push	{fp, lr}
  100e64:	e28db004 	add	fp, sp, #4
  100e68:	e24dd010 	sub	sp, sp, #16
  100e6c:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DETACH(mutex, RT_Object_Class_Mutex, _NRSYS_mutex_delete);
  100e70:	e51b3010 	ldr	r3, [fp, #-16]
  100e74:	e3530000 	cmp	r3, #0
  100e78:	0a000003 	beq	100e8c <rt_mutex_detach+0x2c>
  100e7c:	e51b3010 	ldr	r3, [fp, #-16]
  100e80:	e5933004 	ldr	r3, [r3, #4]
  100e84:	e3530000 	cmp	r3, #0
  100e88:	1a000001 	bne	100e94 <rt_mutex_detach+0x34>
  100e8c:	e3a03008 	mov	r3, #8
  100e90:	ea000017 	b	100ef4 <rt_mutex_detach+0x94>
  100e94:	e51b3010 	ldr	r3, [fp, #-16]
  100e98:	e5933000 	ldr	r3, [r3]
  100e9c:	e3530003 	cmp	r3, #3
  100ea0:	0a000001 	beq	100eac <rt_mutex_detach+0x4c>
  100ea4:	e3a03008 	mov	r3, #8
  100ea8:	ea000011 	b	100ef4 <rt_mutex_detach+0x94>
  100eac:	e51b3010 	ldr	r3, [fp, #-16]
  100eb0:	e5933004 	ldr	r3, [r3, #4]
  100eb4:	e1a01003 	mov	r1, r3
  100eb8:	e3a00017 	mov	r0, #23
  100ebc:	eb00ed67 	bl	13c460 <syscall>
  100ec0:	e50b0008 	str	r0, [fp, #-8]
  100ec4:	e51b3008 	ldr	r3, [fp, #-8]
  100ec8:	e3530000 	cmp	r3, #0
  100ecc:	0a000001 	beq	100ed8 <rt_mutex_detach+0x78>
  100ed0:	e51b3008 	ldr	r3, [fp, #-8]
  100ed4:	ea000006 	b	100ef4 <rt_mutex_detach+0x94>
  100ed8:	e51b3010 	ldr	r3, [fp, #-16]
  100edc:	e3a02000 	mov	r2, #0
  100ee0:	e5832000 	str	r2, [r3]
  100ee4:	e51b3010 	ldr	r3, [fp, #-16]
  100ee8:	e3a02000 	mov	r2, #0
  100eec:	e5832004 	str	r2, [r3, #4]
  100ef0:	e3a03000 	mov	r3, #0
}
  100ef4:	e1a00003 	mov	r0, r3
  100ef8:	e24bd004 	sub	sp, fp, #4
  100efc:	e8bd8800 	pop	{fp, pc}

00100f00 <rt_mutex_take>:

rt_err_t rt_mutex_take(rt_mutex_t mutex, rt_int32_t time)
{
  100f00:	e92d4800 	push	{fp, lr}
  100f04:	e28db004 	add	fp, sp, #4
  100f08:	e24dd008 	sub	sp, sp, #8
  100f0c:	e50b0008 	str	r0, [fp, #-8]
  100f10:	e50b100c 	str	r1, [fp, #-12]
    RT_USER_IPC_CHECK(mutex, RT_Object_Class_Mutex);
  100f14:	e51b3008 	ldr	r3, [fp, #-8]
  100f18:	e3530000 	cmp	r3, #0
  100f1c:	0a000003 	beq	100f30 <rt_mutex_take+0x30>
  100f20:	e51b3008 	ldr	r3, [fp, #-8]
  100f24:	e5933004 	ldr	r3, [r3, #4]
  100f28:	e3530000 	cmp	r3, #0
  100f2c:	1a000001 	bne	100f38 <rt_mutex_take+0x38>
  100f30:	e3a03008 	mov	r3, #8
  100f34:	ea00000c 	b	100f6c <rt_mutex_take+0x6c>
  100f38:	e51b3008 	ldr	r3, [fp, #-8]
  100f3c:	e5933000 	ldr	r3, [r3]
  100f40:	e3530003 	cmp	r3, #3
  100f44:	0a000001 	beq	100f50 <rt_mutex_take+0x50>
  100f48:	e3a03008 	mov	r3, #8
  100f4c:	ea000006 	b	100f6c <rt_mutex_take+0x6c>
    return syscall(_NRSYS_mutex_take, mutex->data, time);
  100f50:	e51b3008 	ldr	r3, [fp, #-8]
  100f54:	e5933004 	ldr	r3, [r3, #4]
  100f58:	e51b200c 	ldr	r2, [fp, #-12]
  100f5c:	e1a01003 	mov	r1, r3
  100f60:	e3a00018 	mov	r0, #24
  100f64:	eb00ed3d 	bl	13c460 <syscall>
  100f68:	e1a03000 	mov	r3, r0
}
  100f6c:	e1a00003 	mov	r0, r3
  100f70:	e24bd004 	sub	sp, fp, #4
  100f74:	e8bd8800 	pop	{fp, pc}

00100f78 <rt_mutex_release>:

rt_err_t rt_mutex_release(rt_mutex_t mutex)
{
  100f78:	e92d4800 	push	{fp, lr}
  100f7c:	e28db004 	add	fp, sp, #4
  100f80:	e24dd008 	sub	sp, sp, #8
  100f84:	e50b0008 	str	r0, [fp, #-8]
    RT_USER_IPC_CHECK(mutex, RT_Object_Class_Mutex);
  100f88:	e51b3008 	ldr	r3, [fp, #-8]
  100f8c:	e3530000 	cmp	r3, #0
  100f90:	0a000003 	beq	100fa4 <rt_mutex_release+0x2c>
  100f94:	e51b3008 	ldr	r3, [fp, #-8]
  100f98:	e5933004 	ldr	r3, [r3, #4]
  100f9c:	e3530000 	cmp	r3, #0
  100fa0:	1a000001 	bne	100fac <rt_mutex_release+0x34>
  100fa4:	e3a03008 	mov	r3, #8
  100fa8:	ea00000b 	b	100fdc <rt_mutex_release+0x64>
  100fac:	e51b3008 	ldr	r3, [fp, #-8]
  100fb0:	e5933000 	ldr	r3, [r3]
  100fb4:	e3530003 	cmp	r3, #3
  100fb8:	0a000001 	beq	100fc4 <rt_mutex_release+0x4c>
  100fbc:	e3a03008 	mov	r3, #8
  100fc0:	ea000005 	b	100fdc <rt_mutex_release+0x64>
    return syscall(_NRSYS_mutex_release, mutex->data);
  100fc4:	e51b3008 	ldr	r3, [fp, #-8]
  100fc8:	e5933004 	ldr	r3, [r3, #4]
  100fcc:	e1a01003 	mov	r1, r3
  100fd0:	e3a00019 	mov	r0, #25
  100fd4:	eb00ed21 	bl	13c460 <syscall>
  100fd8:	e1a03000 	mov	r3, r0
}
  100fdc:	e1a00003 	mov	r0, r3
  100fe0:	e24bd004 	sub	sp, fp, #4
  100fe4:	e8bd8800 	pop	{fp, pc}

00100fe8 <rt_sem_create>:

rt_sem_t rt_sem_create(const char *name, rt_uint32_t value, rt_uint8_t flag)
{
  100fe8:	e92d4800 	push	{fp, lr}
  100fec:	e28db004 	add	fp, sp, #4
  100ff0:	e24dd018 	sub	sp, sp, #24
  100ff4:	e50b0010 	str	r0, [fp, #-16]
  100ff8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  100ffc:	e1a03002 	mov	r3, r2
  101000:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
    RT_USER_IPC_CREATE(RT_Object_Class_Semaphore, _NRSYS_sem_create, name, value, flag);
  101004:	e3a00008 	mov	r0, #8
  101008:	eb00f0d1 	bl	13d354 <malloc>
  10100c:	e1a03000 	mov	r3, r0
  101010:	e50b3008 	str	r3, [fp, #-8]
  101014:	e51b3008 	ldr	r3, [fp, #-8]
  101018:	e3530000 	cmp	r3, #0
  10101c:	1a000001 	bne	101028 <rt_sem_create+0x40>
  101020:	e3a03000 	mov	r3, #0
  101024:	ea000015 	b	101080 <rt_sem_create+0x98>
  101028:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  10102c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  101030:	e51b1010 	ldr	r1, [fp, #-16]
  101034:	e3a00012 	mov	r0, #18
  101038:	eb00ed08 	bl	13c460 <syscall>
  10103c:	e1a03000 	mov	r3, r0
  101040:	e1a02003 	mov	r2, r3
  101044:	e51b3008 	ldr	r3, [fp, #-8]
  101048:	e5832004 	str	r2, [r3, #4]
  10104c:	e51b3008 	ldr	r3, [fp, #-8]
  101050:	e5933004 	ldr	r3, [r3, #4]
  101054:	e3530000 	cmp	r3, #0
  101058:	0a000003 	beq	10106c <rt_sem_create+0x84>
  10105c:	e51b3008 	ldr	r3, [fp, #-8]
  101060:	e3a02002 	mov	r2, #2
  101064:	e5832000 	str	r2, [r3]
  101068:	ea000003 	b	10107c <rt_sem_create+0x94>
  10106c:	e51b0008 	ldr	r0, [fp, #-8]
  101070:	eb00f273 	bl	13da44 <free>
  101074:	e3a03000 	mov	r3, #0
  101078:	e50b3008 	str	r3, [fp, #-8]
  10107c:	e51b3008 	ldr	r3, [fp, #-8]
}
  101080:	e1a00003 	mov	r0, r3
  101084:	e24bd004 	sub	sp, fp, #4
  101088:	e8bd8800 	pop	{fp, pc}

0010108c <rt_sem_init>:

rt_err_t rt_sem_init(rt_sem_t sem,
                     const char *name,
                     rt_uint32_t value,
                     rt_uint8_t  flag)
{
  10108c:	e92d4800 	push	{fp, lr}
  101090:	e28db004 	add	fp, sp, #4
  101094:	e24dd010 	sub	sp, sp, #16
  101098:	e50b0008 	str	r0, [fp, #-8]
  10109c:	e50b100c 	str	r1, [fp, #-12]
  1010a0:	e50b2010 	str	r2, [fp, #-16]
  1010a4:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    RT_USER_IPC_INIT(sem, RT_Object_Class_Semaphore, _NRSYS_sem_create, name, value, flag);
  1010a8:	e51b3008 	ldr	r3, [fp, #-8]
  1010ac:	e3530000 	cmp	r3, #0
  1010b0:	1a000001 	bne	1010bc <rt_sem_init+0x30>
  1010b4:	e3a03008 	mov	r3, #8
  1010b8:	ea000012 	b	101108 <rt_sem_init+0x7c>
  1010bc:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  1010c0:	e51b2010 	ldr	r2, [fp, #-16]
  1010c4:	e51b100c 	ldr	r1, [fp, #-12]
  1010c8:	e3a00012 	mov	r0, #18
  1010cc:	eb00ece3 	bl	13c460 <syscall>
  1010d0:	e1a03000 	mov	r3, r0
  1010d4:	e1a02003 	mov	r2, r3
  1010d8:	e51b3008 	ldr	r3, [fp, #-8]
  1010dc:	e5832004 	str	r2, [r3, #4]
  1010e0:	e51b3008 	ldr	r3, [fp, #-8]
  1010e4:	e5933004 	ldr	r3, [r3, #4]
  1010e8:	e3530000 	cmp	r3, #0
  1010ec:	0a000004 	beq	101104 <rt_sem_init+0x78>
  1010f0:	e51b3008 	ldr	r3, [fp, #-8]
  1010f4:	e3a02002 	mov	r2, #2
  1010f8:	e5832000 	str	r2, [r3]
  1010fc:	e3a03000 	mov	r3, #0
  101100:	ea000000 	b	101108 <rt_sem_init+0x7c>
  101104:	e3a03001 	mov	r3, #1
}
  101108:	e1a00003 	mov	r0, r3
  10110c:	e24bd004 	sub	sp, fp, #4
  101110:	e8bd8800 	pop	{fp, pc}

00101114 <rt_sem_delete>:

rt_err_t rt_sem_delete(rt_sem_t sem)
{
  101114:	e92d4800 	push	{fp, lr}
  101118:	e28db004 	add	fp, sp, #4
  10111c:	e24dd010 	sub	sp, sp, #16
  101120:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DELETE(sem, RT_Object_Class_Semaphore, _NRSYS_sem_delete);
  101124:	e51b3010 	ldr	r3, [fp, #-16]
  101128:	e3530000 	cmp	r3, #0
  10112c:	0a000003 	beq	101140 <rt_sem_delete+0x2c>
  101130:	e51b3010 	ldr	r3, [fp, #-16]
  101134:	e5933004 	ldr	r3, [r3, #4]
  101138:	e3530000 	cmp	r3, #0
  10113c:	1a000001 	bne	101148 <rt_sem_delete+0x34>
  101140:	e3a03008 	mov	r3, #8
  101144:	ea000013 	b	101198 <rt_sem_delete+0x84>
  101148:	e51b3010 	ldr	r3, [fp, #-16]
  10114c:	e5933000 	ldr	r3, [r3]
  101150:	e3530002 	cmp	r3, #2
  101154:	0a000001 	beq	101160 <rt_sem_delete+0x4c>
  101158:	e3a03008 	mov	r3, #8
  10115c:	ea00000d 	b	101198 <rt_sem_delete+0x84>
  101160:	e51b3010 	ldr	r3, [fp, #-16]
  101164:	e5933004 	ldr	r3, [r3, #4]
  101168:	e1a01003 	mov	r1, r3
  10116c:	e3a00013 	mov	r0, #19
  101170:	eb00ecba 	bl	13c460 <syscall>
  101174:	e50b0008 	str	r0, [fp, #-8]
  101178:	e51b3008 	ldr	r3, [fp, #-8]
  10117c:	e3530000 	cmp	r3, #0
  101180:	0a000001 	beq	10118c <rt_sem_delete+0x78>
  101184:	e51b3008 	ldr	r3, [fp, #-8]
  101188:	ea000002 	b	101198 <rt_sem_delete+0x84>
  10118c:	e51b0010 	ldr	r0, [fp, #-16]
  101190:	eb00f22b 	bl	13da44 <free>
  101194:	e3a03000 	mov	r3, #0
}
  101198:	e1a00003 	mov	r0, r3
  10119c:	e24bd004 	sub	sp, fp, #4
  1011a0:	e8bd8800 	pop	{fp, pc}

001011a4 <rt_sem_detach>:

rt_err_t rt_sem_detach(rt_sem_t sem)
{
  1011a4:	e92d4800 	push	{fp, lr}
  1011a8:	e28db004 	add	fp, sp, #4
  1011ac:	e24dd010 	sub	sp, sp, #16
  1011b0:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DETACH(sem, RT_Object_Class_Semaphore, _NRSYS_sem_delete);
  1011b4:	e51b3010 	ldr	r3, [fp, #-16]
  1011b8:	e3530000 	cmp	r3, #0
  1011bc:	0a000003 	beq	1011d0 <rt_sem_detach+0x2c>
  1011c0:	e51b3010 	ldr	r3, [fp, #-16]
  1011c4:	e5933004 	ldr	r3, [r3, #4]
  1011c8:	e3530000 	cmp	r3, #0
  1011cc:	1a000001 	bne	1011d8 <rt_sem_detach+0x34>
  1011d0:	e3a03008 	mov	r3, #8
  1011d4:	ea000017 	b	101238 <rt_sem_detach+0x94>
  1011d8:	e51b3010 	ldr	r3, [fp, #-16]
  1011dc:	e5933000 	ldr	r3, [r3]
  1011e0:	e3530002 	cmp	r3, #2
  1011e4:	0a000001 	beq	1011f0 <rt_sem_detach+0x4c>
  1011e8:	e3a03008 	mov	r3, #8
  1011ec:	ea000011 	b	101238 <rt_sem_detach+0x94>
  1011f0:	e51b3010 	ldr	r3, [fp, #-16]
  1011f4:	e5933004 	ldr	r3, [r3, #4]
  1011f8:	e1a01003 	mov	r1, r3
  1011fc:	e3a00013 	mov	r0, #19
  101200:	eb00ec96 	bl	13c460 <syscall>
  101204:	e50b0008 	str	r0, [fp, #-8]
  101208:	e51b3008 	ldr	r3, [fp, #-8]
  10120c:	e3530000 	cmp	r3, #0
  101210:	0a000001 	beq	10121c <rt_sem_detach+0x78>
  101214:	e51b3008 	ldr	r3, [fp, #-8]
  101218:	ea000006 	b	101238 <rt_sem_detach+0x94>
  10121c:	e51b3010 	ldr	r3, [fp, #-16]
  101220:	e3a02000 	mov	r2, #0
  101224:	e5832000 	str	r2, [r3]
  101228:	e51b3010 	ldr	r3, [fp, #-16]
  10122c:	e3a02000 	mov	r2, #0
  101230:	e5832004 	str	r2, [r3, #4]
  101234:	e3a03000 	mov	r3, #0
}
  101238:	e1a00003 	mov	r0, r3
  10123c:	e24bd004 	sub	sp, fp, #4
  101240:	e8bd8800 	pop	{fp, pc}

00101244 <rt_sem_release>:

rt_err_t rt_sem_release(rt_sem_t sem)
{
  101244:	e92d4800 	push	{fp, lr}
  101248:	e28db004 	add	fp, sp, #4
  10124c:	e24dd008 	sub	sp, sp, #8
  101250:	e50b0008 	str	r0, [fp, #-8]
    RT_USER_IPC_CHECK(sem, RT_Object_Class_Semaphore);
  101254:	e51b3008 	ldr	r3, [fp, #-8]
  101258:	e3530000 	cmp	r3, #0
  10125c:	0a000003 	beq	101270 <rt_sem_release+0x2c>
  101260:	e51b3008 	ldr	r3, [fp, #-8]
  101264:	e5933004 	ldr	r3, [r3, #4]
  101268:	e3530000 	cmp	r3, #0
  10126c:	1a000001 	bne	101278 <rt_sem_release+0x34>
  101270:	e3a03008 	mov	r3, #8
  101274:	ea00000b 	b	1012a8 <rt_sem_release+0x64>
  101278:	e51b3008 	ldr	r3, [fp, #-8]
  10127c:	e5933000 	ldr	r3, [r3]
  101280:	e3530002 	cmp	r3, #2
  101284:	0a000001 	beq	101290 <rt_sem_release+0x4c>
  101288:	e3a03008 	mov	r3, #8
  10128c:	ea000005 	b	1012a8 <rt_sem_release+0x64>
    return syscall(_NRSYS_sem_release, sem->data);
  101290:	e51b3008 	ldr	r3, [fp, #-8]
  101294:	e5933004 	ldr	r3, [r3, #4]
  101298:	e1a01003 	mov	r1, r3
  10129c:	e3a00015 	mov	r0, #21
  1012a0:	eb00ec6e 	bl	13c460 <syscall>
  1012a4:	e1a03000 	mov	r3, r0
}
  1012a8:	e1a00003 	mov	r0, r3
  1012ac:	e24bd004 	sub	sp, fp, #4
  1012b0:	e8bd8800 	pop	{fp, pc}

001012b4 <rt_sem_take>:

rt_err_t rt_sem_take(rt_sem_t sem, rt_int32_t time)
{
  1012b4:	e92d4800 	push	{fp, lr}
  1012b8:	e28db004 	add	fp, sp, #4
  1012bc:	e24dd008 	sub	sp, sp, #8
  1012c0:	e50b0008 	str	r0, [fp, #-8]
  1012c4:	e50b100c 	str	r1, [fp, #-12]
    RT_USER_IPC_CHECK(sem, RT_Object_Class_Semaphore);
  1012c8:	e51b3008 	ldr	r3, [fp, #-8]
  1012cc:	e3530000 	cmp	r3, #0
  1012d0:	0a000003 	beq	1012e4 <rt_sem_take+0x30>
  1012d4:	e51b3008 	ldr	r3, [fp, #-8]
  1012d8:	e5933004 	ldr	r3, [r3, #4]
  1012dc:	e3530000 	cmp	r3, #0
  1012e0:	1a000001 	bne	1012ec <rt_sem_take+0x38>
  1012e4:	e3a03008 	mov	r3, #8
  1012e8:	ea00000c 	b	101320 <rt_sem_take+0x6c>
  1012ec:	e51b3008 	ldr	r3, [fp, #-8]
  1012f0:	e5933000 	ldr	r3, [r3]
  1012f4:	e3530002 	cmp	r3, #2
  1012f8:	0a000001 	beq	101304 <rt_sem_take+0x50>
  1012fc:	e3a03008 	mov	r3, #8
  101300:	ea000006 	b	101320 <rt_sem_take+0x6c>
    return syscall(_NRSYS_sem_take, sem->data, time);
  101304:	e51b3008 	ldr	r3, [fp, #-8]
  101308:	e5933004 	ldr	r3, [r3, #4]
  10130c:	e51b200c 	ldr	r2, [fp, #-12]
  101310:	e1a01003 	mov	r1, r3
  101314:	e3a00014 	mov	r0, #20
  101318:	eb00ec50 	bl	13c460 <syscall>
  10131c:	e1a03000 	mov	r3, r0
}
  101320:	e1a00003 	mov	r0, r3
  101324:	e24bd004 	sub	sp, fp, #4
  101328:	e8bd8800 	pop	{fp, pc}

0010132c <rt_mb_create>:

rt_mailbox_t rt_mb_create(const char *name, rt_size_t size, rt_uint8_t flag)
{
  10132c:	e92d4800 	push	{fp, lr}
  101330:	e28db004 	add	fp, sp, #4
  101334:	e24dd018 	sub	sp, sp, #24
  101338:	e50b0010 	str	r0, [fp, #-16]
  10133c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  101340:	e1a03002 	mov	r3, r2
  101344:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
    RT_USER_IPC_CREATE(RT_Object_Class_MailBox, _NRSYS_mb_create, name, size, flag);
  101348:	e3a00008 	mov	r0, #8
  10134c:	eb00f000 	bl	13d354 <malloc>
  101350:	e1a03000 	mov	r3, r0
  101354:	e50b3008 	str	r3, [fp, #-8]
  101358:	e51b3008 	ldr	r3, [fp, #-8]
  10135c:	e3530000 	cmp	r3, #0
  101360:	1a000001 	bne	10136c <rt_mb_create+0x40>
  101364:	e3a03000 	mov	r3, #0
  101368:	ea000015 	b	1013c4 <rt_mb_create+0x98>
  10136c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  101370:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  101374:	e51b1010 	ldr	r1, [fp, #-16]
  101378:	e3a0001e 	mov	r0, #30
  10137c:	eb00ec37 	bl	13c460 <syscall>
  101380:	e1a03000 	mov	r3, r0
  101384:	e1a02003 	mov	r2, r3
  101388:	e51b3008 	ldr	r3, [fp, #-8]
  10138c:	e5832004 	str	r2, [r3, #4]
  101390:	e51b3008 	ldr	r3, [fp, #-8]
  101394:	e5933004 	ldr	r3, [r3, #4]
  101398:	e3530000 	cmp	r3, #0
  10139c:	0a000003 	beq	1013b0 <rt_mb_create+0x84>
  1013a0:	e51b3008 	ldr	r3, [fp, #-8]
  1013a4:	e3a02005 	mov	r2, #5
  1013a8:	e5832000 	str	r2, [r3]
  1013ac:	ea000003 	b	1013c0 <rt_mb_create+0x94>
  1013b0:	e51b0008 	ldr	r0, [fp, #-8]
  1013b4:	eb00f1a2 	bl	13da44 <free>
  1013b8:	e3a03000 	mov	r3, #0
  1013bc:	e50b3008 	str	r3, [fp, #-8]
  1013c0:	e51b3008 	ldr	r3, [fp, #-8]
}
  1013c4:	e1a00003 	mov	r0, r3
  1013c8:	e24bd004 	sub	sp, fp, #4
  1013cc:	e8bd8800 	pop	{fp, pc}

001013d0 <rt_mb_init>:
rt_err_t rt_mb_init(rt_mailbox_t mb,
                    const char  *name,
                    void        *msgpool,
                    rt_size_t    size,
                    rt_uint8_t   flag)
{
  1013d0:	e92d4800 	push	{fp, lr}
  1013d4:	e28db004 	add	fp, sp, #4
  1013d8:	e24dd010 	sub	sp, sp, #16
  1013dc:	e50b0008 	str	r0, [fp, #-8]
  1013e0:	e50b100c 	str	r1, [fp, #-12]
  1013e4:	e50b2010 	str	r2, [fp, #-16]
  1013e8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    RT_USER_IPC_INIT(mb, RT_Object_Class_MailBox, _NRSYS_mb_create, name, size, flag);
  1013ec:	e51b3008 	ldr	r3, [fp, #-8]
  1013f0:	e3530000 	cmp	r3, #0
  1013f4:	1a000001 	bne	101400 <rt_mb_init+0x30>
  1013f8:	e3a03008 	mov	r3, #8
  1013fc:	ea000012 	b	10144c <rt_mb_init+0x7c>
  101400:	e5db3004 	ldrb	r3, [fp, #4]
  101404:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  101408:	e51b100c 	ldr	r1, [fp, #-12]
  10140c:	e3a0001e 	mov	r0, #30
  101410:	eb00ec12 	bl	13c460 <syscall>
  101414:	e1a03000 	mov	r3, r0
  101418:	e1a02003 	mov	r2, r3
  10141c:	e51b3008 	ldr	r3, [fp, #-8]
  101420:	e5832004 	str	r2, [r3, #4]
  101424:	e51b3008 	ldr	r3, [fp, #-8]
  101428:	e5933004 	ldr	r3, [r3, #4]
  10142c:	e3530000 	cmp	r3, #0
  101430:	0a000004 	beq	101448 <rt_mb_init+0x78>
  101434:	e51b3008 	ldr	r3, [fp, #-8]
  101438:	e3a02005 	mov	r2, #5
  10143c:	e5832000 	str	r2, [r3]
  101440:	e3a03000 	mov	r3, #0
  101444:	ea000000 	b	10144c <rt_mb_init+0x7c>
  101448:	e3a03001 	mov	r3, #1
}
  10144c:	e1a00003 	mov	r0, r3
  101450:	e24bd004 	sub	sp, fp, #4
  101454:	e8bd8800 	pop	{fp, pc}

00101458 <rt_mb_delete>:


rt_err_t rt_mb_delete(rt_mailbox_t mb)
{
  101458:	e92d4800 	push	{fp, lr}
  10145c:	e28db004 	add	fp, sp, #4
  101460:	e24dd010 	sub	sp, sp, #16
  101464:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DELETE(mb, RT_Object_Class_MailBox, _NRSYS_mb_delete);
  101468:	e51b3010 	ldr	r3, [fp, #-16]
  10146c:	e3530000 	cmp	r3, #0
  101470:	0a000003 	beq	101484 <rt_mb_delete+0x2c>
  101474:	e51b3010 	ldr	r3, [fp, #-16]
  101478:	e5933004 	ldr	r3, [r3, #4]
  10147c:	e3530000 	cmp	r3, #0
  101480:	1a000001 	bne	10148c <rt_mb_delete+0x34>
  101484:	e3a03008 	mov	r3, #8
  101488:	ea000013 	b	1014dc <rt_mb_delete+0x84>
  10148c:	e51b3010 	ldr	r3, [fp, #-16]
  101490:	e5933000 	ldr	r3, [r3]
  101494:	e3530005 	cmp	r3, #5
  101498:	0a000001 	beq	1014a4 <rt_mb_delete+0x4c>
  10149c:	e3a03008 	mov	r3, #8
  1014a0:	ea00000d 	b	1014dc <rt_mb_delete+0x84>
  1014a4:	e51b3010 	ldr	r3, [fp, #-16]
  1014a8:	e5933004 	ldr	r3, [r3, #4]
  1014ac:	e1a01003 	mov	r1, r3
  1014b0:	e3a0001f 	mov	r0, #31
  1014b4:	eb00ebe9 	bl	13c460 <syscall>
  1014b8:	e50b0008 	str	r0, [fp, #-8]
  1014bc:	e51b3008 	ldr	r3, [fp, #-8]
  1014c0:	e3530000 	cmp	r3, #0
  1014c4:	0a000001 	beq	1014d0 <rt_mb_delete+0x78>
  1014c8:	e51b3008 	ldr	r3, [fp, #-8]
  1014cc:	ea000002 	b	1014dc <rt_mb_delete+0x84>
  1014d0:	e51b0010 	ldr	r0, [fp, #-16]
  1014d4:	eb00f15a 	bl	13da44 <free>
  1014d8:	e3a03000 	mov	r3, #0
}
  1014dc:	e1a00003 	mov	r0, r3
  1014e0:	e24bd004 	sub	sp, fp, #4
  1014e4:	e8bd8800 	pop	{fp, pc}

001014e8 <rt_mb_detach>:

rt_err_t rt_mb_detach(rt_mailbox_t mb)
{
  1014e8:	e92d4800 	push	{fp, lr}
  1014ec:	e28db004 	add	fp, sp, #4
  1014f0:	e24dd010 	sub	sp, sp, #16
  1014f4:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DETACH(mb, RT_Object_Class_MailBox, _NRSYS_mb_delete);
  1014f8:	e51b3010 	ldr	r3, [fp, #-16]
  1014fc:	e3530000 	cmp	r3, #0
  101500:	0a000003 	beq	101514 <rt_mb_detach+0x2c>
  101504:	e51b3010 	ldr	r3, [fp, #-16]
  101508:	e5933004 	ldr	r3, [r3, #4]
  10150c:	e3530000 	cmp	r3, #0
  101510:	1a000001 	bne	10151c <rt_mb_detach+0x34>
  101514:	e3a03008 	mov	r3, #8
  101518:	ea000017 	b	10157c <rt_mb_detach+0x94>
  10151c:	e51b3010 	ldr	r3, [fp, #-16]
  101520:	e5933000 	ldr	r3, [r3]
  101524:	e3530005 	cmp	r3, #5
  101528:	0a000001 	beq	101534 <rt_mb_detach+0x4c>
  10152c:	e3a03008 	mov	r3, #8
  101530:	ea000011 	b	10157c <rt_mb_detach+0x94>
  101534:	e51b3010 	ldr	r3, [fp, #-16]
  101538:	e5933004 	ldr	r3, [r3, #4]
  10153c:	e1a01003 	mov	r1, r3
  101540:	e3a0001f 	mov	r0, #31
  101544:	eb00ebc5 	bl	13c460 <syscall>
  101548:	e50b0008 	str	r0, [fp, #-8]
  10154c:	e51b3008 	ldr	r3, [fp, #-8]
  101550:	e3530000 	cmp	r3, #0
  101554:	0a000001 	beq	101560 <rt_mb_detach+0x78>
  101558:	e51b3008 	ldr	r3, [fp, #-8]
  10155c:	ea000006 	b	10157c <rt_mb_detach+0x94>
  101560:	e51b3010 	ldr	r3, [fp, #-16]
  101564:	e3a02000 	mov	r2, #0
  101568:	e5832000 	str	r2, [r3]
  10156c:	e51b3010 	ldr	r3, [fp, #-16]
  101570:	e3a02000 	mov	r2, #0
  101574:	e5832004 	str	r2, [r3, #4]
  101578:	e3a03000 	mov	r3, #0
}
  10157c:	e1a00003 	mov	r0, r3
  101580:	e24bd004 	sub	sp, fp, #4
  101584:	e8bd8800 	pop	{fp, pc}

00101588 <rt_mb_send_wait>:

rt_err_t rt_mb_send_wait(rt_mailbox_t mb,
        rt_ubase_t   value,
        rt_int32_t   timeout)
{
  101588:	e92d4800 	push	{fp, lr}
  10158c:	e28db004 	add	fp, sp, #4
  101590:	e24dd010 	sub	sp, sp, #16
  101594:	e50b0008 	str	r0, [fp, #-8]
  101598:	e50b100c 	str	r1, [fp, #-12]
  10159c:	e50b2010 	str	r2, [fp, #-16]
    RT_USER_IPC_CHECK(mb, RT_Object_Class_MailBox);
  1015a0:	e51b3008 	ldr	r3, [fp, #-8]
  1015a4:	e3530000 	cmp	r3, #0
  1015a8:	0a000003 	beq	1015bc <rt_mb_send_wait+0x34>
  1015ac:	e51b3008 	ldr	r3, [fp, #-8]
  1015b0:	e5933004 	ldr	r3, [r3, #4]
  1015b4:	e3530000 	cmp	r3, #0
  1015b8:	1a000001 	bne	1015c4 <rt_mb_send_wait+0x3c>
  1015bc:	e3a03008 	mov	r3, #8
  1015c0:	ea00000c 	b	1015f8 <rt_mb_send_wait+0x70>
  1015c4:	e51b3008 	ldr	r3, [fp, #-8]
  1015c8:	e5933000 	ldr	r3, [r3]
  1015cc:	e3530005 	cmp	r3, #5
  1015d0:	0a000001 	beq	1015dc <rt_mb_send_wait+0x54>
  1015d4:	e3a03008 	mov	r3, #8
  1015d8:	ea000006 	b	1015f8 <rt_mb_send_wait+0x70>
    return syscall(_NRSYS_mb_send_wait, mb->data, value, timeout);
  1015dc:	e51b3008 	ldr	r3, [fp, #-8]
  1015e0:	e5931004 	ldr	r1, [r3, #4]
  1015e4:	e51b3010 	ldr	r3, [fp, #-16]
  1015e8:	e51b200c 	ldr	r2, [fp, #-12]
  1015ec:	e3a00021 	mov	r0, #33	; 0x21
  1015f0:	eb00eb9a 	bl	13c460 <syscall>
  1015f4:	e1a03000 	mov	r3, r0
}
  1015f8:	e1a00003 	mov	r0, r3
  1015fc:	e24bd004 	sub	sp, fp, #4
  101600:	e8bd8800 	pop	{fp, pc}

00101604 <rt_mb_send>:

rt_err_t rt_mb_send(rt_mailbox_t mb, rt_ubase_t value)
{
  101604:	e92d4800 	push	{fp, lr}
  101608:	e28db004 	add	fp, sp, #4
  10160c:	e24dd008 	sub	sp, sp, #8
  101610:	e50b0008 	str	r0, [fp, #-8]
  101614:	e50b100c 	str	r1, [fp, #-12]
    RT_USER_IPC_CHECK(mb, RT_Object_Class_MailBox);
  101618:	e51b3008 	ldr	r3, [fp, #-8]
  10161c:	e3530000 	cmp	r3, #0
  101620:	0a000003 	beq	101634 <rt_mb_send+0x30>
  101624:	e51b3008 	ldr	r3, [fp, #-8]
  101628:	e5933004 	ldr	r3, [r3, #4]
  10162c:	e3530000 	cmp	r3, #0
  101630:	1a000001 	bne	10163c <rt_mb_send+0x38>
  101634:	e3a03008 	mov	r3, #8
  101638:	ea00000c 	b	101670 <rt_mb_send+0x6c>
  10163c:	e51b3008 	ldr	r3, [fp, #-8]
  101640:	e5933000 	ldr	r3, [r3]
  101644:	e3530005 	cmp	r3, #5
  101648:	0a000001 	beq	101654 <rt_mb_send+0x50>
  10164c:	e3a03008 	mov	r3, #8
  101650:	ea000006 	b	101670 <rt_mb_send+0x6c>
    return syscall(_NRSYS_mb_send, mb->data, value);
  101654:	e51b3008 	ldr	r3, [fp, #-8]
  101658:	e5933004 	ldr	r3, [r3, #4]
  10165c:	e51b200c 	ldr	r2, [fp, #-12]
  101660:	e1a01003 	mov	r1, r3
  101664:	e3a00020 	mov	r0, #32
  101668:	eb00eb7c 	bl	13c460 <syscall>
  10166c:	e1a03000 	mov	r3, r0
}
  101670:	e1a00003 	mov	r0, r3
  101674:	e24bd004 	sub	sp, fp, #4
  101678:	e8bd8800 	pop	{fp, pc}

0010167c <rt_mb_recv>:

rt_err_t rt_mb_recv(rt_mailbox_t mb, rt_ubase_t *value, rt_int32_t timeout)
{
  10167c:	e92d4800 	push	{fp, lr}
  101680:	e28db004 	add	fp, sp, #4
  101684:	e24dd010 	sub	sp, sp, #16
  101688:	e50b0008 	str	r0, [fp, #-8]
  10168c:	e50b100c 	str	r1, [fp, #-12]
  101690:	e50b2010 	str	r2, [fp, #-16]
    RT_USER_IPC_CHECK(mb, RT_Object_Class_MailBox);
  101694:	e51b3008 	ldr	r3, [fp, #-8]
  101698:	e3530000 	cmp	r3, #0
  10169c:	0a000003 	beq	1016b0 <rt_mb_recv+0x34>
  1016a0:	e51b3008 	ldr	r3, [fp, #-8]
  1016a4:	e5933004 	ldr	r3, [r3, #4]
  1016a8:	e3530000 	cmp	r3, #0
  1016ac:	1a000001 	bne	1016b8 <rt_mb_recv+0x3c>
  1016b0:	e3a03008 	mov	r3, #8
  1016b4:	ea00000c 	b	1016ec <rt_mb_recv+0x70>
  1016b8:	e51b3008 	ldr	r3, [fp, #-8]
  1016bc:	e5933000 	ldr	r3, [r3]
  1016c0:	e3530005 	cmp	r3, #5
  1016c4:	0a000001 	beq	1016d0 <rt_mb_recv+0x54>
  1016c8:	e3a03008 	mov	r3, #8
  1016cc:	ea000006 	b	1016ec <rt_mb_recv+0x70>
    return syscall(_NRSYS_mb_recv, mb->data, value, timeout);
  1016d0:	e51b3008 	ldr	r3, [fp, #-8]
  1016d4:	e5931004 	ldr	r1, [r3, #4]
  1016d8:	e51b3010 	ldr	r3, [fp, #-16]
  1016dc:	e51b200c 	ldr	r2, [fp, #-12]
  1016e0:	e3a00022 	mov	r0, #34	; 0x22
  1016e4:	eb00eb5d 	bl	13c460 <syscall>
  1016e8:	e1a03000 	mov	r3, r0
}
  1016ec:	e1a00003 	mov	r0, r3
  1016f0:	e24bd004 	sub	sp, fp, #4
  1016f4:	e8bd8800 	pop	{fp, pc}

001016f8 <rt_mq_create>:

rt_mq_t rt_mq_create(const char *name,
                     rt_size_t   msg_size,
                     rt_size_t   max_msgs,
                     rt_uint8_t  flag)
{
  1016f8:	e92d4800 	push	{fp, lr}
  1016fc:	e28db004 	add	fp, sp, #4
  101700:	e24dd020 	sub	sp, sp, #32
  101704:	e50b0010 	str	r0, [fp, #-16]
  101708:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10170c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  101710:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
    RT_USER_IPC_CREATE(RT_Object_Class_MessageQueue, _NRSYS_mq_create, name, msg_size, max_msgs, flag);
  101714:	e3a00008 	mov	r0, #8
  101718:	eb00ef0d 	bl	13d354 <malloc>
  10171c:	e1a03000 	mov	r3, r0
  101720:	e50b3008 	str	r3, [fp, #-8]
  101724:	e51b3008 	ldr	r3, [fp, #-8]
  101728:	e3530000 	cmp	r3, #0
  10172c:	1a000001 	bne	101738 <rt_mq_create+0x40>
  101730:	e3a03000 	mov	r3, #0
  101734:	ea000017 	b	101798 <rt_mq_create+0xa0>
  101738:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
  10173c:	e58d3000 	str	r3, [sp]
  101740:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  101744:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  101748:	e51b1010 	ldr	r1, [fp, #-16]
  10174c:	e3a00023 	mov	r0, #35	; 0x23
  101750:	eb00eb42 	bl	13c460 <syscall>
  101754:	e1a03000 	mov	r3, r0
  101758:	e1a02003 	mov	r2, r3
  10175c:	e51b3008 	ldr	r3, [fp, #-8]
  101760:	e5832004 	str	r2, [r3, #4]
  101764:	e51b3008 	ldr	r3, [fp, #-8]
  101768:	e5933004 	ldr	r3, [r3, #4]
  10176c:	e3530000 	cmp	r3, #0
  101770:	0a000003 	beq	101784 <rt_mq_create+0x8c>
  101774:	e51b3008 	ldr	r3, [fp, #-8]
  101778:	e3a02006 	mov	r2, #6
  10177c:	e5832000 	str	r2, [r3]
  101780:	ea000003 	b	101794 <rt_mq_create+0x9c>
  101784:	e51b0008 	ldr	r0, [fp, #-8]
  101788:	eb00f0ad 	bl	13da44 <free>
  10178c:	e3a03000 	mov	r3, #0
  101790:	e50b3008 	str	r3, [fp, #-8]
  101794:	e51b3008 	ldr	r3, [fp, #-8]
}
  101798:	e1a00003 	mov	r0, r3
  10179c:	e24bd004 	sub	sp, fp, #4
  1017a0:	e8bd8800 	pop	{fp, pc}

001017a4 <rt_mq_init>:
                    const char *name,
                    void       *msgpool,
                    rt_size_t   msg_size,
                    rt_size_t   pool_size,
                    rt_uint8_t  flag)
{
  1017a4:	e92d4800 	push	{fp, lr}
  1017a8:	e28db004 	add	fp, sp, #4
  1017ac:	e24dd018 	sub	sp, sp, #24
  1017b0:	e50b0008 	str	r0, [fp, #-8]
  1017b4:	e50b100c 	str	r1, [fp, #-12]
  1017b8:	e50b2010 	str	r2, [fp, #-16]
  1017bc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    RT_USER_IPC_INIT(mq, RT_Object_Class_MessageQueue, _NRSYS_mq_create, name, msg_size, pool_size/msg_size, flag);
  1017c0:	e51b3008 	ldr	r3, [fp, #-8]
  1017c4:	e3530000 	cmp	r3, #0
  1017c8:	1a000001 	bne	1017d4 <rt_mq_init+0x30>
  1017cc:	e3a03008 	mov	r3, #8
  1017d0:	ea000019 	b	10183c <rt_mq_init+0x98>
  1017d4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1017d8:	e59b0004 	ldr	r0, [fp, #4]
  1017dc:	eb00dc25 	bl	138878 <__udivsi3>
  1017e0:	e1a03000 	mov	r3, r0
  1017e4:	e1a02003 	mov	r2, r3
  1017e8:	e5db3008 	ldrb	r3, [fp, #8]
  1017ec:	e58d3000 	str	r3, [sp]
  1017f0:	e1a03002 	mov	r3, r2
  1017f4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1017f8:	e51b100c 	ldr	r1, [fp, #-12]
  1017fc:	e3a00023 	mov	r0, #35	; 0x23
  101800:	eb00eb16 	bl	13c460 <syscall>
  101804:	e1a03000 	mov	r3, r0
  101808:	e1a02003 	mov	r2, r3
  10180c:	e51b3008 	ldr	r3, [fp, #-8]
  101810:	e5832004 	str	r2, [r3, #4]
  101814:	e51b3008 	ldr	r3, [fp, #-8]
  101818:	e5933004 	ldr	r3, [r3, #4]
  10181c:	e3530000 	cmp	r3, #0
  101820:	0a000004 	beq	101838 <rt_mq_init+0x94>
  101824:	e51b3008 	ldr	r3, [fp, #-8]
  101828:	e3a02006 	mov	r2, #6
  10182c:	e5832000 	str	r2, [r3]
  101830:	e3a03000 	mov	r3, #0
  101834:	ea000000 	b	10183c <rt_mq_init+0x98>
  101838:	e3a03001 	mov	r3, #1
}
  10183c:	e1a00003 	mov	r0, r3
  101840:	e24bd004 	sub	sp, fp, #4
  101844:	e8bd8800 	pop	{fp, pc}

00101848 <rt_mq_delete>:

rt_err_t rt_mq_delete(rt_mq_t mq)
{
  101848:	e92d4800 	push	{fp, lr}
  10184c:	e28db004 	add	fp, sp, #4
  101850:	e24dd010 	sub	sp, sp, #16
  101854:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DELETE(mq, RT_Object_Class_MessageQueue, _NRSYS_mq_delete);
  101858:	e51b3010 	ldr	r3, [fp, #-16]
  10185c:	e3530000 	cmp	r3, #0
  101860:	0a000003 	beq	101874 <rt_mq_delete+0x2c>
  101864:	e51b3010 	ldr	r3, [fp, #-16]
  101868:	e5933004 	ldr	r3, [r3, #4]
  10186c:	e3530000 	cmp	r3, #0
  101870:	1a000001 	bne	10187c <rt_mq_delete+0x34>
  101874:	e3a03008 	mov	r3, #8
  101878:	ea000013 	b	1018cc <rt_mq_delete+0x84>
  10187c:	e51b3010 	ldr	r3, [fp, #-16]
  101880:	e5933000 	ldr	r3, [r3]
  101884:	e3530006 	cmp	r3, #6
  101888:	0a000001 	beq	101894 <rt_mq_delete+0x4c>
  10188c:	e3a03008 	mov	r3, #8
  101890:	ea00000d 	b	1018cc <rt_mq_delete+0x84>
  101894:	e51b3010 	ldr	r3, [fp, #-16]
  101898:	e5933004 	ldr	r3, [r3, #4]
  10189c:	e1a01003 	mov	r1, r3
  1018a0:	e3a00024 	mov	r0, #36	; 0x24
  1018a4:	eb00eaed 	bl	13c460 <syscall>
  1018a8:	e50b0008 	str	r0, [fp, #-8]
  1018ac:	e51b3008 	ldr	r3, [fp, #-8]
  1018b0:	e3530000 	cmp	r3, #0
  1018b4:	0a000001 	beq	1018c0 <rt_mq_delete+0x78>
  1018b8:	e51b3008 	ldr	r3, [fp, #-8]
  1018bc:	ea000002 	b	1018cc <rt_mq_delete+0x84>
  1018c0:	e51b0010 	ldr	r0, [fp, #-16]
  1018c4:	eb00f05e 	bl	13da44 <free>
  1018c8:	e3a03000 	mov	r3, #0
}
  1018cc:	e1a00003 	mov	r0, r3
  1018d0:	e24bd004 	sub	sp, fp, #4
  1018d4:	e8bd8800 	pop	{fp, pc}

001018d8 <rt_mq_detach>:

rt_err_t rt_mq_detach(rt_mq_t mq)
{
  1018d8:	e92d4800 	push	{fp, lr}
  1018dc:	e28db004 	add	fp, sp, #4
  1018e0:	e24dd010 	sub	sp, sp, #16
  1018e4:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DETACH(mq, RT_Object_Class_MessageQueue, _NRSYS_mq_delete);
  1018e8:	e51b3010 	ldr	r3, [fp, #-16]
  1018ec:	e3530000 	cmp	r3, #0
  1018f0:	0a000003 	beq	101904 <rt_mq_detach+0x2c>
  1018f4:	e51b3010 	ldr	r3, [fp, #-16]
  1018f8:	e5933004 	ldr	r3, [r3, #4]
  1018fc:	e3530000 	cmp	r3, #0
  101900:	1a000001 	bne	10190c <rt_mq_detach+0x34>
  101904:	e3a03008 	mov	r3, #8
  101908:	ea000017 	b	10196c <rt_mq_detach+0x94>
  10190c:	e51b3010 	ldr	r3, [fp, #-16]
  101910:	e5933000 	ldr	r3, [r3]
  101914:	e3530006 	cmp	r3, #6
  101918:	0a000001 	beq	101924 <rt_mq_detach+0x4c>
  10191c:	e3a03008 	mov	r3, #8
  101920:	ea000011 	b	10196c <rt_mq_detach+0x94>
  101924:	e51b3010 	ldr	r3, [fp, #-16]
  101928:	e5933004 	ldr	r3, [r3, #4]
  10192c:	e1a01003 	mov	r1, r3
  101930:	e3a00024 	mov	r0, #36	; 0x24
  101934:	eb00eac9 	bl	13c460 <syscall>
  101938:	e50b0008 	str	r0, [fp, #-8]
  10193c:	e51b3008 	ldr	r3, [fp, #-8]
  101940:	e3530000 	cmp	r3, #0
  101944:	0a000001 	beq	101950 <rt_mq_detach+0x78>
  101948:	e51b3008 	ldr	r3, [fp, #-8]
  10194c:	ea000006 	b	10196c <rt_mq_detach+0x94>
  101950:	e51b3010 	ldr	r3, [fp, #-16]
  101954:	e3a02000 	mov	r2, #0
  101958:	e5832000 	str	r2, [r3]
  10195c:	e51b3010 	ldr	r3, [fp, #-16]
  101960:	e3a02000 	mov	r2, #0
  101964:	e5832004 	str	r2, [r3, #4]
  101968:	e3a03000 	mov	r3, #0
}
  10196c:	e1a00003 	mov	r0, r3
  101970:	e24bd004 	sub	sp, fp, #4
  101974:	e8bd8800 	pop	{fp, pc}

00101978 <rt_mq_send>:

rt_err_t rt_mq_send(rt_mq_t mq, const void *buffer, rt_size_t size)
{
  101978:	e92d4800 	push	{fp, lr}
  10197c:	e28db004 	add	fp, sp, #4
  101980:	e24dd010 	sub	sp, sp, #16
  101984:	e50b0008 	str	r0, [fp, #-8]
  101988:	e50b100c 	str	r1, [fp, #-12]
  10198c:	e50b2010 	str	r2, [fp, #-16]
    RT_USER_IPC_CHECK(mq, RT_Object_Class_MessageQueue);
  101990:	e51b3008 	ldr	r3, [fp, #-8]
  101994:	e3530000 	cmp	r3, #0
  101998:	0a000003 	beq	1019ac <rt_mq_send+0x34>
  10199c:	e51b3008 	ldr	r3, [fp, #-8]
  1019a0:	e5933004 	ldr	r3, [r3, #4]
  1019a4:	e3530000 	cmp	r3, #0
  1019a8:	1a000001 	bne	1019b4 <rt_mq_send+0x3c>
  1019ac:	e3a03008 	mov	r3, #8
  1019b0:	ea00000c 	b	1019e8 <rt_mq_send+0x70>
  1019b4:	e51b3008 	ldr	r3, [fp, #-8]
  1019b8:	e5933000 	ldr	r3, [r3]
  1019bc:	e3530006 	cmp	r3, #6
  1019c0:	0a000001 	beq	1019cc <rt_mq_send+0x54>
  1019c4:	e3a03008 	mov	r3, #8
  1019c8:	ea000006 	b	1019e8 <rt_mq_send+0x70>
    return syscall(_NRSYS_mq_send, mq->data, buffer, size);
  1019cc:	e51b3008 	ldr	r3, [fp, #-8]
  1019d0:	e5931004 	ldr	r1, [r3, #4]
  1019d4:	e51b3010 	ldr	r3, [fp, #-16]
  1019d8:	e51b200c 	ldr	r2, [fp, #-12]
  1019dc:	e3a00025 	mov	r0, #37	; 0x25
  1019e0:	eb00ea9e 	bl	13c460 <syscall>
  1019e4:	e1a03000 	mov	r3, r0
}
  1019e8:	e1a00003 	mov	r0, r3
  1019ec:	e24bd004 	sub	sp, fp, #4
  1019f0:	e8bd8800 	pop	{fp, pc}

001019f4 <rt_mq_urgent>:

rt_err_t rt_mq_urgent(rt_mq_t mq, const void *buffer, rt_size_t size)
{
  1019f4:	e92d4800 	push	{fp, lr}
  1019f8:	e28db004 	add	fp, sp, #4
  1019fc:	e24dd010 	sub	sp, sp, #16
  101a00:	e50b0008 	str	r0, [fp, #-8]
  101a04:	e50b100c 	str	r1, [fp, #-12]
  101a08:	e50b2010 	str	r2, [fp, #-16]
    RT_USER_IPC_CHECK(mq, RT_Object_Class_MessageQueue);
  101a0c:	e51b3008 	ldr	r3, [fp, #-8]
  101a10:	e3530000 	cmp	r3, #0
  101a14:	0a000003 	beq	101a28 <rt_mq_urgent+0x34>
  101a18:	e51b3008 	ldr	r3, [fp, #-8]
  101a1c:	e5933004 	ldr	r3, [r3, #4]
  101a20:	e3530000 	cmp	r3, #0
  101a24:	1a000001 	bne	101a30 <rt_mq_urgent+0x3c>
  101a28:	e3a03008 	mov	r3, #8
  101a2c:	ea00000c 	b	101a64 <rt_mq_urgent+0x70>
  101a30:	e51b3008 	ldr	r3, [fp, #-8]
  101a34:	e5933000 	ldr	r3, [r3]
  101a38:	e3530006 	cmp	r3, #6
  101a3c:	0a000001 	beq	101a48 <rt_mq_urgent+0x54>
  101a40:	e3a03008 	mov	r3, #8
  101a44:	ea000006 	b	101a64 <rt_mq_urgent+0x70>
    return syscall(_NRSYS_mq_urgent, mq->data, buffer, size);
  101a48:	e51b3008 	ldr	r3, [fp, #-8]
  101a4c:	e5931004 	ldr	r1, [r3, #4]
  101a50:	e51b3010 	ldr	r3, [fp, #-16]
  101a54:	e51b200c 	ldr	r2, [fp, #-12]
  101a58:	e3a00026 	mov	r0, #38	; 0x26
  101a5c:	eb00ea7f 	bl	13c460 <syscall>
  101a60:	e1a03000 	mov	r3, r0
}
  101a64:	e1a00003 	mov	r0, r3
  101a68:	e24bd004 	sub	sp, fp, #4
  101a6c:	e8bd8800 	pop	{fp, pc}

00101a70 <rt_mq_recv>:

rt_err_t rt_mq_recv(rt_mq_t    mq,
                    void      *buffer,
                    rt_size_t  size,
                    rt_int32_t timeout)
{
  101a70:	e92d4800 	push	{fp, lr}
  101a74:	e28db004 	add	fp, sp, #4
  101a78:	e24dd018 	sub	sp, sp, #24
  101a7c:	e50b0008 	str	r0, [fp, #-8]
  101a80:	e50b100c 	str	r1, [fp, #-12]
  101a84:	e50b2010 	str	r2, [fp, #-16]
  101a88:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    RT_USER_IPC_CHECK(mq, RT_Object_Class_MessageQueue);
  101a8c:	e51b3008 	ldr	r3, [fp, #-8]
  101a90:	e3530000 	cmp	r3, #0
  101a94:	0a000003 	beq	101aa8 <rt_mq_recv+0x38>
  101a98:	e51b3008 	ldr	r3, [fp, #-8]
  101a9c:	e5933004 	ldr	r3, [r3, #4]
  101aa0:	e3530000 	cmp	r3, #0
  101aa4:	1a000001 	bne	101ab0 <rt_mq_recv+0x40>
  101aa8:	e3a03008 	mov	r3, #8
  101aac:	ea00000e 	b	101aec <rt_mq_recv+0x7c>
  101ab0:	e51b3008 	ldr	r3, [fp, #-8]
  101ab4:	e5933000 	ldr	r3, [r3]
  101ab8:	e3530006 	cmp	r3, #6
  101abc:	0a000001 	beq	101ac8 <rt_mq_recv+0x58>
  101ac0:	e3a03008 	mov	r3, #8
  101ac4:	ea000008 	b	101aec <rt_mq_recv+0x7c>
    return syscall(_NRSYS_mq_recv, mq->data, buffer, size, timeout);
  101ac8:	e51b3008 	ldr	r3, [fp, #-8]
  101acc:	e5931004 	ldr	r1, [r3, #4]
  101ad0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  101ad4:	e58d3000 	str	r3, [sp]
  101ad8:	e51b3010 	ldr	r3, [fp, #-16]
  101adc:	e51b200c 	ldr	r2, [fp, #-12]
  101ae0:	e3a00027 	mov	r0, #39	; 0x27
  101ae4:	eb00ea5d 	bl	13c460 <syscall>
  101ae8:	e1a03000 	mov	r3, r0
}
  101aec:	e1a00003 	mov	r0, r3
  101af0:	e24bd004 	sub	sp, fp, #4
  101af4:	e8bd8800 	pop	{fp, pc}

00101af8 <rt_event_create>:

rt_event_t rt_event_create(const char *name, rt_uint8_t flag)
{
  101af8:	e92d4800 	push	{fp, lr}
  101afc:	e28db004 	add	fp, sp, #4
  101b00:	e24dd010 	sub	sp, sp, #16
  101b04:	e50b0010 	str	r0, [fp, #-16]
  101b08:	e1a03001 	mov	r3, r1
  101b0c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    RT_USER_IPC_CREATE(RT_Object_Class_Event, _NRSYS_event_create, name, flag);
  101b10:	e3a00008 	mov	r0, #8
  101b14:	eb00ee0e 	bl	13d354 <malloc>
  101b18:	e1a03000 	mov	r3, r0
  101b1c:	e50b3008 	str	r3, [fp, #-8]
  101b20:	e51b3008 	ldr	r3, [fp, #-8]
  101b24:	e3530000 	cmp	r3, #0
  101b28:	1a000001 	bne	101b34 <rt_event_create+0x3c>
  101b2c:	e3a03000 	mov	r3, #0
  101b30:	ea000015 	b	101b8c <rt_event_create+0x94>
  101b34:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  101b38:	e1a02003 	mov	r2, r3
  101b3c:	e51b1010 	ldr	r1, [fp, #-16]
  101b40:	e3a0001a 	mov	r0, #26
  101b44:	eb00ea45 	bl	13c460 <syscall>
  101b48:	e1a03000 	mov	r3, r0
  101b4c:	e1a02003 	mov	r2, r3
  101b50:	e51b3008 	ldr	r3, [fp, #-8]
  101b54:	e5832004 	str	r2, [r3, #4]
  101b58:	e51b3008 	ldr	r3, [fp, #-8]
  101b5c:	e5933004 	ldr	r3, [r3, #4]
  101b60:	e3530000 	cmp	r3, #0
  101b64:	0a000003 	beq	101b78 <rt_event_create+0x80>
  101b68:	e51b3008 	ldr	r3, [fp, #-8]
  101b6c:	e3a02004 	mov	r2, #4
  101b70:	e5832000 	str	r2, [r3]
  101b74:	ea000003 	b	101b88 <rt_event_create+0x90>
  101b78:	e51b0008 	ldr	r0, [fp, #-8]
  101b7c:	eb00efb0 	bl	13da44 <free>
  101b80:	e3a03000 	mov	r3, #0
  101b84:	e50b3008 	str	r3, [fp, #-8]
  101b88:	e51b3008 	ldr	r3, [fp, #-8]
}
  101b8c:	e1a00003 	mov	r0, r3
  101b90:	e24bd004 	sub	sp, fp, #4
  101b94:	e8bd8800 	pop	{fp, pc}

00101b98 <rt_event_init>:

rt_err_t rt_event_init(rt_event_t event, const char *name, rt_uint8_t flag)
{
  101b98:	e92d4800 	push	{fp, lr}
  101b9c:	e28db004 	add	fp, sp, #4
  101ba0:	e24dd010 	sub	sp, sp, #16
  101ba4:	e50b0008 	str	r0, [fp, #-8]
  101ba8:	e50b100c 	str	r1, [fp, #-12]
  101bac:	e1a03002 	mov	r3, r2
  101bb0:	e54b300d 	strb	r3, [fp, #-13]
    RT_USER_IPC_INIT(event, RT_Object_Class_Event, _NRSYS_event_create, name, flag);
  101bb4:	e51b3008 	ldr	r3, [fp, #-8]
  101bb8:	e3530000 	cmp	r3, #0
  101bbc:	1a000001 	bne	101bc8 <rt_event_init+0x30>
  101bc0:	e3a03008 	mov	r3, #8
  101bc4:	ea000012 	b	101c14 <rt_event_init+0x7c>
  101bc8:	e55b300d 	ldrb	r3, [fp, #-13]
  101bcc:	e1a02003 	mov	r2, r3
  101bd0:	e51b100c 	ldr	r1, [fp, #-12]
  101bd4:	e3a0001a 	mov	r0, #26
  101bd8:	eb00ea20 	bl	13c460 <syscall>
  101bdc:	e1a03000 	mov	r3, r0
  101be0:	e1a02003 	mov	r2, r3
  101be4:	e51b3008 	ldr	r3, [fp, #-8]
  101be8:	e5832004 	str	r2, [r3, #4]
  101bec:	e51b3008 	ldr	r3, [fp, #-8]
  101bf0:	e5933004 	ldr	r3, [r3, #4]
  101bf4:	e3530000 	cmp	r3, #0
  101bf8:	0a000004 	beq	101c10 <rt_event_init+0x78>
  101bfc:	e51b3008 	ldr	r3, [fp, #-8]
  101c00:	e3a02004 	mov	r2, #4
  101c04:	e5832000 	str	r2, [r3]
  101c08:	e3a03000 	mov	r3, #0
  101c0c:	ea000000 	b	101c14 <rt_event_init+0x7c>
  101c10:	e3a03001 	mov	r3, #1
}
  101c14:	e1a00003 	mov	r0, r3
  101c18:	e24bd004 	sub	sp, fp, #4
  101c1c:	e8bd8800 	pop	{fp, pc}

00101c20 <rt_event_delete>:

rt_err_t rt_event_delete(rt_event_t event)
{
  101c20:	e92d4800 	push	{fp, lr}
  101c24:	e28db004 	add	fp, sp, #4
  101c28:	e24dd010 	sub	sp, sp, #16
  101c2c:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DELETE(event, RT_Object_Class_Event, _NRSYS_event_delete);
  101c30:	e51b3010 	ldr	r3, [fp, #-16]
  101c34:	e3530000 	cmp	r3, #0
  101c38:	0a000003 	beq	101c4c <rt_event_delete+0x2c>
  101c3c:	e51b3010 	ldr	r3, [fp, #-16]
  101c40:	e5933004 	ldr	r3, [r3, #4]
  101c44:	e3530000 	cmp	r3, #0
  101c48:	1a000001 	bne	101c54 <rt_event_delete+0x34>
  101c4c:	e3a03008 	mov	r3, #8
  101c50:	ea000013 	b	101ca4 <rt_event_delete+0x84>
  101c54:	e51b3010 	ldr	r3, [fp, #-16]
  101c58:	e5933000 	ldr	r3, [r3]
  101c5c:	e3530004 	cmp	r3, #4
  101c60:	0a000001 	beq	101c6c <rt_event_delete+0x4c>
  101c64:	e3a03008 	mov	r3, #8
  101c68:	ea00000d 	b	101ca4 <rt_event_delete+0x84>
  101c6c:	e51b3010 	ldr	r3, [fp, #-16]
  101c70:	e5933004 	ldr	r3, [r3, #4]
  101c74:	e1a01003 	mov	r1, r3
  101c78:	e3a0001b 	mov	r0, #27
  101c7c:	eb00e9f7 	bl	13c460 <syscall>
  101c80:	e50b0008 	str	r0, [fp, #-8]
  101c84:	e51b3008 	ldr	r3, [fp, #-8]
  101c88:	e3530000 	cmp	r3, #0
  101c8c:	0a000001 	beq	101c98 <rt_event_delete+0x78>
  101c90:	e51b3008 	ldr	r3, [fp, #-8]
  101c94:	ea000002 	b	101ca4 <rt_event_delete+0x84>
  101c98:	e51b0010 	ldr	r0, [fp, #-16]
  101c9c:	eb00ef68 	bl	13da44 <free>
  101ca0:	e3a03000 	mov	r3, #0
}
  101ca4:	e1a00003 	mov	r0, r3
  101ca8:	e24bd004 	sub	sp, fp, #4
  101cac:	e8bd8800 	pop	{fp, pc}

00101cb0 <rt_event_detach>:

rt_err_t rt_event_detach(rt_event_t event)
{
  101cb0:	e92d4800 	push	{fp, lr}
  101cb4:	e28db004 	add	fp, sp, #4
  101cb8:	e24dd010 	sub	sp, sp, #16
  101cbc:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DETACH(event, RT_Object_Class_Event, _NRSYS_event_delete);
  101cc0:	e51b3010 	ldr	r3, [fp, #-16]
  101cc4:	e3530000 	cmp	r3, #0
  101cc8:	0a000003 	beq	101cdc <rt_event_detach+0x2c>
  101ccc:	e51b3010 	ldr	r3, [fp, #-16]
  101cd0:	e5933004 	ldr	r3, [r3, #4]
  101cd4:	e3530000 	cmp	r3, #0
  101cd8:	1a000001 	bne	101ce4 <rt_event_detach+0x34>
  101cdc:	e3a03008 	mov	r3, #8
  101ce0:	ea000017 	b	101d44 <rt_event_detach+0x94>
  101ce4:	e51b3010 	ldr	r3, [fp, #-16]
  101ce8:	e5933000 	ldr	r3, [r3]
  101cec:	e3530004 	cmp	r3, #4
  101cf0:	0a000001 	beq	101cfc <rt_event_detach+0x4c>
  101cf4:	e3a03008 	mov	r3, #8
  101cf8:	ea000011 	b	101d44 <rt_event_detach+0x94>
  101cfc:	e51b3010 	ldr	r3, [fp, #-16]
  101d00:	e5933004 	ldr	r3, [r3, #4]
  101d04:	e1a01003 	mov	r1, r3
  101d08:	e3a0001b 	mov	r0, #27
  101d0c:	eb00e9d3 	bl	13c460 <syscall>
  101d10:	e50b0008 	str	r0, [fp, #-8]
  101d14:	e51b3008 	ldr	r3, [fp, #-8]
  101d18:	e3530000 	cmp	r3, #0
  101d1c:	0a000001 	beq	101d28 <rt_event_detach+0x78>
  101d20:	e51b3008 	ldr	r3, [fp, #-8]
  101d24:	ea000006 	b	101d44 <rt_event_detach+0x94>
  101d28:	e51b3010 	ldr	r3, [fp, #-16]
  101d2c:	e3a02000 	mov	r2, #0
  101d30:	e5832000 	str	r2, [r3]
  101d34:	e51b3010 	ldr	r3, [fp, #-16]
  101d38:	e3a02000 	mov	r2, #0
  101d3c:	e5832004 	str	r2, [r3, #4]
  101d40:	e3a03000 	mov	r3, #0
}
  101d44:	e1a00003 	mov	r0, r3
  101d48:	e24bd004 	sub	sp, fp, #4
  101d4c:	e8bd8800 	pop	{fp, pc}

00101d50 <rt_event_send>:

rt_err_t rt_event_send(rt_event_t event, rt_uint32_t set)
{
  101d50:	e92d4800 	push	{fp, lr}
  101d54:	e28db004 	add	fp, sp, #4
  101d58:	e24dd008 	sub	sp, sp, #8
  101d5c:	e50b0008 	str	r0, [fp, #-8]
  101d60:	e50b100c 	str	r1, [fp, #-12]
    RT_USER_IPC_CHECK(event, RT_Object_Class_Event);
  101d64:	e51b3008 	ldr	r3, [fp, #-8]
  101d68:	e3530000 	cmp	r3, #0
  101d6c:	0a000003 	beq	101d80 <rt_event_send+0x30>
  101d70:	e51b3008 	ldr	r3, [fp, #-8]
  101d74:	e5933004 	ldr	r3, [r3, #4]
  101d78:	e3530000 	cmp	r3, #0
  101d7c:	1a000001 	bne	101d88 <rt_event_send+0x38>
  101d80:	e3a03008 	mov	r3, #8
  101d84:	ea00000c 	b	101dbc <rt_event_send+0x6c>
  101d88:	e51b3008 	ldr	r3, [fp, #-8]
  101d8c:	e5933000 	ldr	r3, [r3]
  101d90:	e3530004 	cmp	r3, #4
  101d94:	0a000001 	beq	101da0 <rt_event_send+0x50>
  101d98:	e3a03008 	mov	r3, #8
  101d9c:	ea000006 	b	101dbc <rt_event_send+0x6c>
    return syscall(_NRSYS_event_send, event->data, set);
  101da0:	e51b3008 	ldr	r3, [fp, #-8]
  101da4:	e5933004 	ldr	r3, [r3, #4]
  101da8:	e51b200c 	ldr	r2, [fp, #-12]
  101dac:	e1a01003 	mov	r1, r3
  101db0:	e3a0001c 	mov	r0, #28
  101db4:	eb00e9a9 	bl	13c460 <syscall>
  101db8:	e1a03000 	mov	r3, r0
}
  101dbc:	e1a00003 	mov	r0, r3
  101dc0:	e24bd004 	sub	sp, fp, #4
  101dc4:	e8bd8800 	pop	{fp, pc}

00101dc8 <rt_event_recv>:
rt_err_t rt_event_recv(rt_event_t   event,
                       rt_uint32_t  set,
                       rt_uint8_t   opt,
                       rt_int32_t   timeout,
                       rt_uint32_t *recved)
{
  101dc8:	e92d4800 	push	{fp, lr}
  101dcc:	e28db004 	add	fp, sp, #4
  101dd0:	e24dd018 	sub	sp, sp, #24
  101dd4:	e50b0008 	str	r0, [fp, #-8]
  101dd8:	e50b100c 	str	r1, [fp, #-12]
  101ddc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  101de0:	e1a03002 	mov	r3, r2
  101de4:	e54b300d 	strb	r3, [fp, #-13]
    RT_USER_IPC_CHECK(event, RT_Object_Class_Event);
  101de8:	e51b3008 	ldr	r3, [fp, #-8]
  101dec:	e3530000 	cmp	r3, #0
  101df0:	0a000003 	beq	101e04 <rt_event_recv+0x3c>
  101df4:	e51b3008 	ldr	r3, [fp, #-8]
  101df8:	e5933004 	ldr	r3, [r3, #4]
  101dfc:	e3530000 	cmp	r3, #0
  101e00:	1a000001 	bne	101e0c <rt_event_recv+0x44>
  101e04:	e3a03008 	mov	r3, #8
  101e08:	ea000011 	b	101e54 <rt_event_recv+0x8c>
  101e0c:	e51b3008 	ldr	r3, [fp, #-8]
  101e10:	e5933000 	ldr	r3, [r3]
  101e14:	e3530004 	cmp	r3, #4
  101e18:	0a000001 	beq	101e24 <rt_event_recv+0x5c>
  101e1c:	e3a03008 	mov	r3, #8
  101e20:	ea00000b 	b	101e54 <rt_event_recv+0x8c>
    return syscall(_NRSYS_event_recv, event->data, set, opt, timeout, recved);
  101e24:	e51b3008 	ldr	r3, [fp, #-8]
  101e28:	e5931004 	ldr	r1, [r3, #4]
  101e2c:	e55b200d 	ldrb	r2, [fp, #-13]
  101e30:	e59b3004 	ldr	r3, [fp, #4]
  101e34:	e58d3004 	str	r3, [sp, #4]
  101e38:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  101e3c:	e58d3000 	str	r3, [sp]
  101e40:	e1a03002 	mov	r3, r2
  101e44:	e51b200c 	ldr	r2, [fp, #-12]
  101e48:	e3a0001d 	mov	r0, #29
  101e4c:	eb00e983 	bl	13c460 <syscall>
  101e50:	e1a03000 	mov	r3, r0
}
  101e54:	e1a00003 	mov	r0, r3
  101e58:	e24bd004 	sub	sp, fp, #4
  101e5c:	e8bd8800 	pop	{fp, pc}

00101e60 <rt_tick_get>:

rt_tick_t rt_tick_get(void)
{
  101e60:	e92d4800 	push	{fp, lr}
  101e64:	e28db004 	add	fp, sp, #4
    return (rt_tick_t)syscall(_NRSYS_rt_tick_get);
  101e68:	e3a00061 	mov	r0, #97	; 0x61
  101e6c:	eb00e97b 	bl	13c460 <syscall>
  101e70:	e1a03000 	mov	r3, r0
}
  101e74:	e1a00003 	mov	r0, r3
  101e78:	e8bd8800 	pop	{fp, pc}

00101e7c <rt_thread_mdelay>:

rt_err_t rt_thread_mdelay(rt_int32_t ms)
{
  101e7c:	e92d4800 	push	{fp, lr}
  101e80:	e28db004 	add	fp, sp, #4
  101e84:	e24dd008 	sub	sp, sp, #8
  101e88:	e50b0008 	str	r0, [fp, #-8]
    return (rt_err_t)syscall(_NRSYS_rt_thread_mdelay, ms);
  101e8c:	e51b1008 	ldr	r1, [fp, #-8]
  101e90:	e3a00066 	mov	r0, #102	; 0x66
  101e94:	eb00e971 	bl	13c460 <syscall>
  101e98:	e1a03000 	mov	r3, r0
}
  101e9c:	e1a00003 	mov	r0, r3
  101ea0:	e24bd004 	sub	sp, fp, #4
  101ea4:	e8bd8800 	pop	{fp, pc}

00101ea8 <lwp_shmget>:

int lwp_shmget(size_t key, size_t size, int create)
{
  101ea8:	e92d4800 	push	{fp, lr}
  101eac:	e28db004 	add	fp, sp, #4
  101eb0:	e24dd010 	sub	sp, sp, #16
  101eb4:	e50b0008 	str	r0, [fp, #-8]
  101eb8:	e50b100c 	str	r1, [fp, #-12]
  101ebc:	e50b2010 	str	r2, [fp, #-16]
    return (int)syscall(_NRSYS_shmget, key, size, create);
  101ec0:	e51b3010 	ldr	r3, [fp, #-16]
  101ec4:	e51b200c 	ldr	r2, [fp, #-12]
  101ec8:	e51b1008 	ldr	r1, [fp, #-8]
  101ecc:	e3a00037 	mov	r0, #55	; 0x37
  101ed0:	eb00e962 	bl	13c460 <syscall>
  101ed4:	e1a03000 	mov	r3, r0
}
  101ed8:	e1a00003 	mov	r0, r3
  101edc:	e24bd004 	sub	sp, fp, #4
  101ee0:	e8bd8800 	pop	{fp, pc}

00101ee4 <lwp_shmrm>:

int lwp_shmrm(int id)
{
  101ee4:	e92d4800 	push	{fp, lr}
  101ee8:	e28db004 	add	fp, sp, #4
  101eec:	e24dd008 	sub	sp, sp, #8
  101ef0:	e50b0008 	str	r0, [fp, #-8]
    return (int)syscall(_NRSYS_shmrm, id);
  101ef4:	e51b1008 	ldr	r1, [fp, #-8]
  101ef8:	e3a00038 	mov	r0, #56	; 0x38
  101efc:	eb00e957 	bl	13c460 <syscall>
  101f00:	e1a03000 	mov	r3, r0
}
  101f04:	e1a00003 	mov	r0, r3
  101f08:	e24bd004 	sub	sp, fp, #4
  101f0c:	e8bd8800 	pop	{fp, pc}

00101f10 <lwp_shmat>:

void* lwp_shmat(int id, void* shm_vaddr)
{
  101f10:	e92d4800 	push	{fp, lr}
  101f14:	e28db004 	add	fp, sp, #4
  101f18:	e24dd008 	sub	sp, sp, #8
  101f1c:	e50b0008 	str	r0, [fp, #-8]
  101f20:	e50b100c 	str	r1, [fp, #-12]
    return (void*)syscall(_NRSYS_shmat, id, shm_vaddr);
  101f24:	e51b200c 	ldr	r2, [fp, #-12]
  101f28:	e51b1008 	ldr	r1, [fp, #-8]
  101f2c:	e3a00039 	mov	r0, #57	; 0x39
  101f30:	eb00e94a 	bl	13c460 <syscall>
  101f34:	e1a03000 	mov	r3, r0
}
  101f38:	e1a00003 	mov	r0, r3
  101f3c:	e24bd004 	sub	sp, fp, #4
  101f40:	e8bd8800 	pop	{fp, pc}

00101f44 <lwp_shmdt>:

int lwp_shmdt(void* shm_vaddr)
{
  101f44:	e92d4800 	push	{fp, lr}
  101f48:	e28db004 	add	fp, sp, #4
  101f4c:	e24dd008 	sub	sp, sp, #8
  101f50:	e50b0008 	str	r0, [fp, #-8]
    return (int)syscall(_NRSYS_shmdt, shm_vaddr);
  101f54:	e51b1008 	ldr	r1, [fp, #-8]
  101f58:	e3a0003a 	mov	r0, #58	; 0x3a
  101f5c:	eb00e93f 	bl	13c460 <syscall>
  101f60:	e1a03000 	mov	r3, r0
}
  101f64:	e1a00003 	mov	r0, r3
  101f68:	e24bd004 	sub	sp, fp, #4
  101f6c:	e8bd8800 	pop	{fp, pc}

00101f70 <exec>:

int exec(char *filename, int argc, char **argv, char **envp)
{
  101f70:	e92d4800 	push	{fp, lr}
  101f74:	e28db004 	add	fp, sp, #4
  101f78:	e24dd018 	sub	sp, sp, #24
  101f7c:	e50b0008 	str	r0, [fp, #-8]
  101f80:	e50b100c 	str	r1, [fp, #-12]
  101f84:	e50b2010 	str	r2, [fp, #-16]
  101f88:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return (int)syscall(_NRSYS_exec, filename, argc, argv, envp);
  101f8c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  101f90:	e58d3000 	str	r3, [sp]
  101f94:	e51b3010 	ldr	r3, [fp, #-16]
  101f98:	e51b200c 	ldr	r2, [fp, #-12]
  101f9c:	e51b1008 	ldr	r1, [fp, #-8]
  101fa0:	e3a0000d 	mov	r0, #13
  101fa4:	eb00e92d 	bl	13c460 <syscall>
  101fa8:	e1a03000 	mov	r3, r0
}
  101fac:	e1a00003 	mov	r0, r3
  101fb0:	e24bd004 	sub	sp, fp, #4
  101fb4:	e8bd8800 	pop	{fp, pc}

00101fb8 <lwp_kill>:

int lwp_kill(pid_t pid, int sig)
{
  101fb8:	e92d4800 	push	{fp, lr}
  101fbc:	e28db004 	add	fp, sp, #4
  101fc0:	e24dd008 	sub	sp, sp, #8
  101fc4:	e50b0008 	str	r0, [fp, #-8]
  101fc8:	e50b100c 	str	r1, [fp, #-12]
    return (int)syscall(_NRSYS_kill, pid, sig);
  101fcc:	e51b200c 	ldr	r2, [fp, #-12]
  101fd0:	e51b1008 	ldr	r1, [fp, #-8]
  101fd4:	e3a0000e 	mov	r0, #14
  101fd8:	eb00e920 	bl	13c460 <syscall>
  101fdc:	e1a03000 	mov	r3, r0
}
  101fe0:	e1a00003 	mov	r0, r3
  101fe4:	e24bd004 	sub	sp, fp, #4
  101fe8:	e8bd8800 	pop	{fp, pc}

00101fec <lwp_tkill>:

int lwp_tkill(int tid, int sig)
{
  101fec:	e92d4800 	push	{fp, lr}
  101ff0:	e28db004 	add	fp, sp, #4
  101ff4:	e24dd008 	sub	sp, sp, #8
  101ff8:	e50b0008 	str	r0, [fp, #-8]
  101ffc:	e50b100c 	str	r1, [fp, #-12]
    return (int)syscall(_NRSYS_tkill, tid, sig);
  102000:	e51b200c 	ldr	r2, [fp, #-12]
  102004:	e51b1008 	ldr	r1, [fp, #-8]
  102008:	e3a00069 	mov	r0, #105	; 0x69
  10200c:	eb00e913 	bl	13c460 <syscall>
  102010:	e1a03000 	mov	r3, r0
}
  102014:	e1a00003 	mov	r0, r3
  102018:	e24bd004 	sub	sp, fp, #4
  10201c:	e8bd8800 	pop	{fp, pc}

00102020 <waitpid>:

pid_t waitpid(pid_t pid, int *status, int options)
{
  102020:	e92d4800 	push	{fp, lr}
  102024:	e28db004 	add	fp, sp, #4
  102028:	e24dd010 	sub	sp, sp, #16
  10202c:	e50b0008 	str	r0, [fp, #-8]
  102030:	e50b100c 	str	r1, [fp, #-12]
  102034:	e50b2010 	str	r2, [fp, #-16]
    return (int)syscall(_NRSYS_waitpid, pid, status, options);
  102038:	e51b3010 	ldr	r3, [fp, #-16]
  10203c:	e51b200c 	ldr	r2, [fp, #-12]
  102040:	e51b1008 	ldr	r1, [fp, #-8]
  102044:	e3a0006e 	mov	r0, #110	; 0x6e
  102048:	eb00e904 	bl	13c460 <syscall>
  10204c:	e1a03000 	mov	r3, r0
}
  102050:	e1a00003 	mov	r0, r3
  102054:	e24bd004 	sub	sp, fp, #4
  102058:	e8bd8800 	pop	{fp, pc}

0010205c <rt_get_errno>:

rt_err_t rt_get_errno(void)
{
  10205c:	e92d4800 	push	{fp, lr}
  102060:	e28db004 	add	fp, sp, #4
    return (rt_err_t)syscall(_NRSYS_rt_get_errno);
  102064:	e3a0007a 	mov	r0, #122	; 0x7a
  102068:	eb00e8fc 	bl	13c460 <syscall>
  10206c:	e1a03000 	mov	r3, r0
}
  102070:	e1a00003 	mov	r0, r3
  102074:	e8bd8800 	pop	{fp, pc}

00102078 <rt_thread_find>:
#include <pthread.h>

void __pthread_init_run(void (*enter)(void *parameter), void *parameter);

rt_thread_t rt_thread_find(char *name)
{
  102078:	e92d4800 	push	{fp, lr}
  10207c:	e28db004 	add	fp, sp, #4
  102080:	e24dd008 	sub	sp, sp, #8
  102084:	e50b0008 	str	r0, [fp, #-8]
    return (rt_thread_t)syscall(_NRSYS_rt_thread_find, name);
  102088:	e51b1008 	ldr	r1, [fp, #-8]
  10208c:	e3a00044 	mov	r0, #68	; 0x44
  102090:	eb00e8f2 	bl	13c460 <syscall>
  102094:	e1a03000 	mov	r3, r0
}
  102098:	e1a00003 	mov	r0, r3
  10209c:	e24bd004 	sub	sp, fp, #4
  1020a0:	e8bd8800 	pop	{fp, pc}

001020a4 <rt_thread_user_entry>:
    void (*entry)(void *parameter);
    void *parameter;
};

static void rt_thread_user_entry(void *arg)
{
  1020a4:	e92d4800 	push	{fp, lr}
  1020a8:	e28db004 	add	fp, sp, #4
  1020ac:	e24dd018 	sub	sp, sp, #24
  1020b0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    struct rt_thread_startup_ucontext *ucontext;
    void (*entry)(void *parameter);
    void *parameter;

    ucontext = (struct rt_thread_startup_ucontext *)arg;
  1020b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1020b8:	e50b3008 	str	r3, [fp, #-8]
    entry = ucontext->entry;
  1020bc:	e51b3008 	ldr	r3, [fp, #-8]
  1020c0:	e5933000 	ldr	r3, [r3]
  1020c4:	e50b300c 	str	r3, [fp, #-12]
    parameter = ucontext->parameter;
  1020c8:	e51b3008 	ldr	r3, [fp, #-8]
  1020cc:	e5933004 	ldr	r3, [r3, #4]
  1020d0:	e50b3010 	str	r3, [fp, #-16]
    rt_free(ucontext);
  1020d4:	e51b0008 	ldr	r0, [fp, #-8]
  1020d8:	eb0003b7 	bl	102fbc <rt_free>

    __pthread_init_run(entry, parameter);
  1020dc:	e51b1010 	ldr	r1, [fp, #-16]
  1020e0:	e51b000c 	ldr	r0, [fp, #-12]
  1020e4:	eb0102b8 	bl	142bcc <__pthread_init_run>
}
  1020e8:	e320f000 	nop	{0}
  1020ec:	e24bd004 	sub	sp, fp, #4
  1020f0:	e8bd8800 	pop	{fp, pc}

001020f4 <rt_thread_create>:
        void (*entry)(void *parameter),
        void       *parameter,
        rt_uint32_t stack_size,
        rt_uint8_t  priority,
        rt_uint32_t tick)
{
  1020f4:	e92d4800 	push	{fp, lr}
  1020f8:	e28db004 	add	fp, sp, #4
  1020fc:	e24dd030 	sub	sp, sp, #48	; 0x30
  102100:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  102104:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  102108:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  10210c:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
    rt_thread_t thread;
    void * arg[] = {(void *)name, (void*)entry, (void*)parameter, (void*)(size_t)stack_size, (void*)(size_t)priority, (void*)(size_t)tick};
  102110:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  102114:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  102118:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10211c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  102120:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  102124:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  102128:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  10212c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  102130:	e5db3004 	ldrb	r3, [fp, #4]
  102134:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  102138:	e59b3008 	ldr	r3, [fp, #8]
  10213c:	e50b3010 	str	r3, [fp, #-16]
    struct rt_thread_startup_ucontext *ucontext;

    ucontext = rt_malloc(sizeof *ucontext);
  102140:	e3a00008 	mov	r0, #8
  102144:	eb000392 	bl	102f94 <rt_malloc>
  102148:	e50b0008 	str	r0, [fp, #-8]
    if (!ucontext)
  10214c:	e51b3008 	ldr	r3, [fp, #-8]
  102150:	e3530000 	cmp	r3, #0
  102154:	1a000001 	bne	102160 <rt_thread_create+0x6c>
    {
        return RT_NULL;
  102158:	e3a03000 	mov	r3, #0
  10215c:	ea000016 	b	1021bc <rt_thread_create+0xc8>
    }
    ucontext->entry = entry;
  102160:	e51b3008 	ldr	r3, [fp, #-8]
  102164:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  102168:	e5832000 	str	r2, [r3]
    ucontext->parameter = parameter;
  10216c:	e51b3008 	ldr	r3, [fp, #-8]
  102170:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  102174:	e5832004 	str	r2, [r3, #4]
    arg[1] = rt_thread_user_entry;
  102178:	e30230a4 	movw	r3, #8356	; 0x20a4
  10217c:	e3403010 	movt	r3, #16
  102180:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    arg[2] = ucontext;
  102184:	e51b3008 	ldr	r3, [fp, #-8]
  102188:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    thread = (rt_thread_t)syscall(_NRSYS_thread_create, arg);
  10218c:	e24b3024 	sub	r3, fp, #36	; 0x24
  102190:	e1a01003 	mov	r1, r3
  102194:	e3a00028 	mov	r0, #40	; 0x28
  102198:	eb00e8b0 	bl	13c460 <syscall>
  10219c:	e1a03000 	mov	r3, r0
  1021a0:	e50b300c 	str	r3, [fp, #-12]
    if (!thread)
  1021a4:	e51b300c 	ldr	r3, [fp, #-12]
  1021a8:	e3530000 	cmp	r3, #0
  1021ac:	1a000001 	bne	1021b8 <rt_thread_create+0xc4>
    {
        rt_free(ucontext);
  1021b0:	e51b0008 	ldr	r0, [fp, #-8]
  1021b4:	eb000380 	bl	102fbc <rt_free>
    }
    return thread;
  1021b8:	e51b300c 	ldr	r3, [fp, #-12]
}
  1021bc:	e1a00003 	mov	r0, r3
  1021c0:	e24bd004 	sub	sp, fp, #4
  1021c4:	e8bd8800 	pop	{fp, pc}

001021c8 <rt_thread_startup>:

rt_err_t rt_thread_startup(rt_thread_t thread)
{
  1021c8:	e92d4800 	push	{fp, lr}
  1021cc:	e28db004 	add	fp, sp, #4
  1021d0:	e24dd008 	sub	sp, sp, #8
  1021d4:	e50b0008 	str	r0, [fp, #-8]
    return syscall(_NRSYS_thread_startup, thread);
  1021d8:	e51b1008 	ldr	r1, [fp, #-8]
  1021dc:	e3a0002a 	mov	r0, #42	; 0x2a
  1021e0:	eb00e89e 	bl	13c460 <syscall>
  1021e4:	e1a03000 	mov	r3, r0
}
  1021e8:	e1a00003 	mov	r0, r3
  1021ec:	e24bd004 	sub	sp, fp, #4
  1021f0:	e8bd8800 	pop	{fp, pc}

001021f4 <rt_thread_self>:

rt_thread_t rt_thread_self(void)
{
  1021f4:	e92d4800 	push	{fp, lr}
  1021f8:	e28db004 	add	fp, sp, #4
    return (rt_thread_t)syscall(_NRSYS_thread_self);
  1021fc:	e3a0002b 	mov	r0, #43	; 0x2b
  102200:	eb00e896 	bl	13c460 <syscall>
  102204:	e1a03000 	mov	r3, r0
}
  102208:	e1a00003 	mov	r0, r3
  10220c:	e8bd8800 	pop	{fp, pc}

00102210 <rt_thread_delete>:

rt_err_t rt_thread_delete(rt_thread_t thread)
{
  102210:	e92d4800 	push	{fp, lr}
  102214:	e28db004 	add	fp, sp, #4
  102218:	e24dd008 	sub	sp, sp, #8
  10221c:	e50b0008 	str	r0, [fp, #-8]
    return syscall(_NRSYS_thread_delete, thread);
  102220:	e51b1008 	ldr	r1, [fp, #-8]
  102224:	e3a00029 	mov	r0, #41	; 0x29
  102228:	eb00e88c 	bl	13c460 <syscall>
  10222c:	e1a03000 	mov	r3, r0
}
  102230:	e1a00003 	mov	r0, r3
  102234:	e24bd004 	sub	sp, fp, #4
  102238:	e8bd8800 	pop	{fp, pc}

0010223c <rt_enter_critical>:

void rt_enter_critical(void)
{
  10223c:	e92d4800 	push	{fp, lr}
  102240:	e28db004 	add	fp, sp, #4
    syscall(_NRSYS_enter_critical);
  102244:	e3a00032 	mov	r0, #50	; 0x32
  102248:	eb00e884 	bl	13c460 <syscall>
}
  10224c:	e320f000 	nop	{0}
  102250:	e8bd8800 	pop	{fp, pc}

00102254 <rt_exit_critical>:

void rt_exit_critical(void)
{
  102254:	e92d4800 	push	{fp, lr}
  102258:	e28db004 	add	fp, sp, #4
    syscall(_NRSYS_exit_critical);
  10225c:	e3a00033 	mov	r0, #51	; 0x33
  102260:	eb00e87e 	bl	13c460 <syscall>
}
  102264:	e320f000 	nop	{0}
  102268:	e8bd8800 	pop	{fp, pc}

0010226c <cacheflush>:

int cacheflush(void *addr, int size, int cache)
{
  10226c:	e92d4800 	push	{fp, lr}
  102270:	e28db004 	add	fp, sp, #4
  102274:	e24dd010 	sub	sp, sp, #16
  102278:	e50b0008 	str	r0, [fp, #-8]
  10227c:	e50b100c 	str	r1, [fp, #-12]
  102280:	e50b2010 	str	r2, [fp, #-16]
    return syscall(_NRSYS_cacheflush, addr, size, cache);
  102284:	e51b3010 	ldr	r3, [fp, #-16]
  102288:	e51b200c 	ldr	r2, [fp, #-12]
  10228c:	e51b1008 	ldr	r1, [fp, #-8]
  102290:	e3a0006b 	mov	r0, #107	; 0x6b
  102294:	eb00e871 	bl	13c460 <syscall>
  102298:	e1a03000 	mov	r3, r0
}
  10229c:	e1a00003 	mov	r0, r3
  1022a0:	e24bd004 	sub	sp, fp, #4
  1022a4:	e8bd8800 	pop	{fp, pc}

001022a8 <rt_list_init>:
 * @brief initialize a list
 *
 * @param l list to be initialized
 */
rt_inline void rt_list_init(rt_list_t *l)
{
  1022a8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1022ac:	e28db000 	add	fp, sp, #0
  1022b0:	e24dd00c 	sub	sp, sp, #12
  1022b4:	e50b0008 	str	r0, [fp, #-8]
    l->next = l->prev = l;
  1022b8:	e51b3008 	ldr	r3, [fp, #-8]
  1022bc:	e51b2008 	ldr	r2, [fp, #-8]
  1022c0:	e5832004 	str	r2, [r3, #4]
  1022c4:	e51b3008 	ldr	r3, [fp, #-8]
  1022c8:	e5932004 	ldr	r2, [r3, #4]
  1022cc:	e51b3008 	ldr	r3, [fp, #-8]
  1022d0:	e5832000 	str	r2, [r3]
}
  1022d4:	e320f000 	nop	{0}
  1022d8:	e28bd000 	add	sp, fp, #0
  1022dc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1022e0:	e12fff1e 	bx	lr

001022e4 <rt_list_insert_after>:
 *
 * @param l list to insert it
 * @param n new node to be inserted
 */
rt_inline void rt_list_insert_after(rt_list_t *l, rt_list_t *n)
{
  1022e4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1022e8:	e28db000 	add	fp, sp, #0
  1022ec:	e24dd00c 	sub	sp, sp, #12
  1022f0:	e50b0008 	str	r0, [fp, #-8]
  1022f4:	e50b100c 	str	r1, [fp, #-12]
    l->next->prev = n;
  1022f8:	e51b3008 	ldr	r3, [fp, #-8]
  1022fc:	e5933000 	ldr	r3, [r3]
  102300:	e51b200c 	ldr	r2, [fp, #-12]
  102304:	e5832004 	str	r2, [r3, #4]
    n->next = l->next;
  102308:	e51b3008 	ldr	r3, [fp, #-8]
  10230c:	e5932000 	ldr	r2, [r3]
  102310:	e51b300c 	ldr	r3, [fp, #-12]
  102314:	e5832000 	str	r2, [r3]

    l->next = n;
  102318:	e51b3008 	ldr	r3, [fp, #-8]
  10231c:	e51b200c 	ldr	r2, [fp, #-12]
  102320:	e5832000 	str	r2, [r3]
    n->prev = l;
  102324:	e51b300c 	ldr	r3, [fp, #-12]
  102328:	e51b2008 	ldr	r2, [fp, #-8]
  10232c:	e5832004 	str	r2, [r3, #4]
}
  102330:	e320f000 	nop	{0}
  102334:	e28bd000 	add	sp, fp, #0
  102338:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10233c:	e12fff1e 	bx	lr

00102340 <rt_list_remove>:
/**
 * @brief remove node from list.
 * @param n the node to remove from the list.
 */
rt_inline void rt_list_remove(rt_list_t *n)
{
  102340:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  102344:	e28db000 	add	fp, sp, #0
  102348:	e24dd00c 	sub	sp, sp, #12
  10234c:	e50b0008 	str	r0, [fp, #-8]
    n->next->prev = n->prev;
  102350:	e51b3008 	ldr	r3, [fp, #-8]
  102354:	e5933000 	ldr	r3, [r3]
  102358:	e51b2008 	ldr	r2, [fp, #-8]
  10235c:	e5922004 	ldr	r2, [r2, #4]
  102360:	e5832004 	str	r2, [r3, #4]
    n->prev->next = n->next;
  102364:	e51b3008 	ldr	r3, [fp, #-8]
  102368:	e5933004 	ldr	r3, [r3, #4]
  10236c:	e51b2008 	ldr	r2, [fp, #-8]
  102370:	e5922000 	ldr	r2, [r2]
  102374:	e5832000 	str	r2, [r3]

    n->next = n->prev = n;
  102378:	e51b3008 	ldr	r3, [fp, #-8]
  10237c:	e51b2008 	ldr	r2, [fp, #-8]
  102380:	e5832004 	str	r2, [r3, #4]
  102384:	e51b3008 	ldr	r3, [fp, #-8]
  102388:	e5932004 	ldr	r2, [r3, #4]
  10238c:	e51b3008 	ldr	r3, [fp, #-8]
  102390:	e5832000 	str	r2, [r3]
}
  102394:	e320f000 	nop	{0}
  102398:	e28bd000 	add	sp, fp, #0
  10239c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1023a0:	e12fff1e 	bx	lr

001023a4 <rt_list_isempty>:
/**
 * @brief tests whether a list is empty
 * @param l the list to test.
 */
rt_inline int rt_list_isempty(const rt_list_t *l)
{
  1023a4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1023a8:	e28db000 	add	fp, sp, #0
  1023ac:	e24dd00c 	sub	sp, sp, #12
  1023b0:	e50b0008 	str	r0, [fp, #-8]
    return l->next == l;
  1023b4:	e51b3008 	ldr	r3, [fp, #-8]
  1023b8:	e5933000 	ldr	r3, [r3]
  1023bc:	e51b2008 	ldr	r2, [fp, #-8]
  1023c0:	e1520003 	cmp	r2, r3
  1023c4:	03a03001 	moveq	r3, #1
  1023c8:	13a03000 	movne	r3, #0
  1023cc:	e6ef3073 	uxtb	r3, r3
}
  1023d0:	e1a00003 	mov	r0, r3
  1023d4:	e28bd000 	add	sp, fp, #0
  1023d8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1023dc:	e12fff1e 	bx	lr

001023e0 <_rt_timer_init>:
static void _rt_timer_init(rt_timer_t timer,
                           void (*timeout)(void *parameter),
                           void      *parameter,
                           rt_tick_t  time,
                           rt_uint8_t flag)
{
  1023e0:	e92d4800 	push	{fp, lr}
  1023e4:	e28db004 	add	fp, sp, #4
  1023e8:	e24dd018 	sub	sp, sp, #24
  1023ec:	e50b0010 	str	r0, [fp, #-16]
  1023f0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1023f4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  1023f8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    int i;

    /* set flag */
    timer->parent.flag  = flag;
  1023fc:	e51b3010 	ldr	r3, [fp, #-16]
  102400:	e5db2004 	ldrb	r2, [fp, #4]
  102404:	e5c32009 	strb	r2, [r3, #9]

    /* set deactivated */
    timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
  102408:	e51b3010 	ldr	r3, [fp, #-16]
  10240c:	e5d33009 	ldrb	r3, [r3, #9]
  102410:	e3c33001 	bic	r3, r3, #1
  102414:	e6ef2073 	uxtb	r2, r3
  102418:	e51b3010 	ldr	r3, [fp, #-16]
  10241c:	e5c32009 	strb	r2, [r3, #9]

    timer->timeout_func = timeout;
  102420:	e51b3010 	ldr	r3, [fp, #-16]
  102424:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  102428:	e583201c 	str	r2, [r3, #28]
    timer->parameter    = parameter;
  10242c:	e51b3010 	ldr	r3, [fp, #-16]
  102430:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  102434:	e5832020 	str	r2, [r3, #32]

    timer->timeout_tick = 0;
  102438:	e51b3010 	ldr	r3, [fp, #-16]
  10243c:	e3a02000 	mov	r2, #0
  102440:	e5832028 	str	r2, [r3, #40]	; 0x28
    timer->init_tick    = time;
  102444:	e51b3010 	ldr	r3, [fp, #-16]
  102448:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  10244c:	e5832024 	str	r2, [r3, #36]	; 0x24

    /* initialize timer list */
    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
  102450:	e3a03000 	mov	r3, #0
  102454:	e50b3008 	str	r3, [fp, #-8]
  102458:	ea00000a 	b	102488 <_rt_timer_init+0xa8>
    {
        rt_list_init(&(timer->row[i]));
  10245c:	e51b3008 	ldr	r3, [fp, #-8]
  102460:	e2833002 	add	r3, r3, #2
  102464:	e1a03183 	lsl	r3, r3, #3
  102468:	e51b2010 	ldr	r2, [fp, #-16]
  10246c:	e0823003 	add	r3, r2, r3
  102470:	e2833004 	add	r3, r3, #4
  102474:	e1a00003 	mov	r0, r3
  102478:	ebffff8a 	bl	1022a8 <rt_list_init>
    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
  10247c:	e51b3008 	ldr	r3, [fp, #-8]
  102480:	e2833001 	add	r3, r3, #1
  102484:	e50b3008 	str	r3, [fp, #-8]
  102488:	e51b3008 	ldr	r3, [fp, #-8]
  10248c:	e3530000 	cmp	r3, #0
  102490:	dafffff1 	ble	10245c <_rt_timer_init+0x7c>
    }
}
  102494:	e320f000 	nop	{0}
  102498:	e24bd004 	sub	sp, fp, #4
  10249c:	e8bd8800 	pop	{fp, pc}

001024a0 <rt_timer_list_next_timeout>:

/* the fist timer always in the last row */
static rt_tick_t rt_timer_list_next_timeout(rt_list_t timer_list[])
{
  1024a0:	e92d4800 	push	{fp, lr}
  1024a4:	e28db004 	add	fp, sp, #4
  1024a8:	e24dd010 	sub	sp, sp, #16
  1024ac:	e50b0010 	str	r0, [fp, #-16]
    struct rt_timer *timer;

    if (rt_list_isempty(&timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1]))
  1024b0:	e51b0010 	ldr	r0, [fp, #-16]
  1024b4:	ebffffba 	bl	1023a4 <rt_list_isempty>
  1024b8:	e1a03000 	mov	r3, r0
  1024bc:	e3530000 	cmp	r3, #0
  1024c0:	0a000001 	beq	1024cc <rt_timer_list_next_timeout+0x2c>
        return RT_TICK_MAX;
  1024c4:	e3e03000 	mvn	r3, #0
  1024c8:	ea000005 	b	1024e4 <rt_timer_list_next_timeout+0x44>

    timer = rt_list_entry(timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1].next,
  1024cc:	e51b3010 	ldr	r3, [fp, #-16]
  1024d0:	e5933000 	ldr	r3, [r3]
  1024d4:	e2433014 	sub	r3, r3, #20
  1024d8:	e50b3008 	str	r3, [fp, #-8]
                          struct rt_timer, row[RT_TIMER_SKIP_LIST_LEVEL - 1]);

    return timer->timeout_tick;
  1024dc:	e51b3008 	ldr	r3, [fp, #-8]
  1024e0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
}
  1024e4:	e1a00003 	mov	r0, r3
  1024e8:	e24bd004 	sub	sp, fp, #4
  1024ec:	e8bd8800 	pop	{fp, pc}

001024f0 <_rt_timer_remove>:

rt_inline void _rt_timer_remove(rt_timer_t timer)
{
  1024f0:	e92d4800 	push	{fp, lr}
  1024f4:	e28db004 	add	fp, sp, #4
  1024f8:	e24dd010 	sub	sp, sp, #16
  1024fc:	e50b0010 	str	r0, [fp, #-16]
    int i;

    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
  102500:	e3a03000 	mov	r3, #0
  102504:	e50b3008 	str	r3, [fp, #-8]
  102508:	ea00000a 	b	102538 <_rt_timer_remove+0x48>
    {
        rt_list_remove(&timer->row[i]);
  10250c:	e51b3008 	ldr	r3, [fp, #-8]
  102510:	e2833002 	add	r3, r3, #2
  102514:	e1a03183 	lsl	r3, r3, #3
  102518:	e51b2010 	ldr	r2, [fp, #-16]
  10251c:	e0823003 	add	r3, r2, r3
  102520:	e2833004 	add	r3, r3, #4
  102524:	e1a00003 	mov	r0, r3
  102528:	ebffff84 	bl	102340 <rt_list_remove>
    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
  10252c:	e51b3008 	ldr	r3, [fp, #-8]
  102530:	e2833001 	add	r3, r3, #1
  102534:	e50b3008 	str	r3, [fp, #-8]
  102538:	e51b3008 	ldr	r3, [fp, #-8]
  10253c:	e3530000 	cmp	r3, #0
  102540:	dafffff1 	ble	10250c <_rt_timer_remove+0x1c>
    }
}
  102544:	e320f000 	nop	{0}
  102548:	e24bd004 	sub	sp, fp, #4
  10254c:	e8bd8800 	pop	{fp, pc}

00102550 <rt_timer_init>:
                   const char *name,
                   void (*timeout)(void *parameter),
                   void       *parameter,
                   rt_tick_t   time,
                   rt_uint8_t  flag)
{
  102550:	e92d4800 	push	{fp, lr}
  102554:	e28db004 	add	fp, sp, #4
  102558:	e24dd018 	sub	sp, sp, #24
  10255c:	e50b0008 	str	r0, [fp, #-8]
  102560:	e50b100c 	str	r1, [fp, #-12]
  102564:	e50b2010 	str	r2, [fp, #-16]
  102568:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    _rt_timer_init(timer, timeout, parameter, time, flag);
  10256c:	e5db3008 	ldrb	r3, [fp, #8]
  102570:	e58d3000 	str	r3, [sp]
  102574:	e59b3004 	ldr	r3, [fp, #4]
  102578:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  10257c:	e51b1010 	ldr	r1, [fp, #-16]
  102580:	e51b0008 	ldr	r0, [fp, #-8]
  102584:	ebffff95 	bl	1023e0 <_rt_timer_init>
}
  102588:	e320f000 	nop	{0}
  10258c:	e24bd004 	sub	sp, fp, #4
  102590:	e8bd8800 	pop	{fp, pc}

00102594 <rt_timer_detach>:
 * @param timer the static timer object
 *
 * @return the operation status, RT_EOK on OK; RT_ERROR on error
 */
rt_err_t rt_timer_detach(rt_timer_t timer)
{
  102594:	e92d4800 	push	{fp, lr}
  102598:	e28db004 	add	fp, sp, #4
  10259c:	e24dd008 	sub	sp, sp, #8
  1025a0:	e50b0008 	str	r0, [fp, #-8]

    /* make sure take mutex */
    while(rt_mutex_take(mutex, RT_WAITING_FOREVER) != RT_EOK);
  1025a4:	e320f000 	nop	{0}
  1025a8:	e30d3410 	movw	r3, #54288	; 0xd410
  1025ac:	e3403014 	movt	r3, #20
  1025b0:	e5933000 	ldr	r3, [r3]
  1025b4:	e3e01000 	mvn	r1, #0
  1025b8:	e1a00003 	mov	r0, r3
  1025bc:	ebfffa4f 	bl	100f00 <rt_mutex_take>
  1025c0:	e1a03000 	mov	r3, r0
  1025c4:	e3530000 	cmp	r3, #0
  1025c8:	1afffff6 	bne	1025a8 <rt_timer_detach+0x14>

    _rt_timer_remove(timer);
  1025cc:	e51b0008 	ldr	r0, [fp, #-8]
  1025d0:	ebffffc6 	bl	1024f0 <_rt_timer_remove>

    /* release mutex */
    rt_mutex_release(mutex);
  1025d4:	e30d3410 	movw	r3, #54288	; 0xd410
  1025d8:	e3403014 	movt	r3, #20
  1025dc:	e5933000 	ldr	r3, [r3]
  1025e0:	e1a00003 	mov	r0, r3
  1025e4:	ebfffa63 	bl	100f78 <rt_mutex_release>

    return RT_EOK;
  1025e8:	e3a03000 	mov	r3, #0
}
  1025ec:	e1a00003 	mov	r0, r3
  1025f0:	e24bd004 	sub	sp, fp, #4
  1025f4:	e8bd8800 	pop	{fp, pc}

001025f8 <rt_timer_create>:
rt_timer_t rt_timer_create(const char *name,
                           void (*timeout)(void *parameter),
                           void       *parameter,
                           rt_tick_t   time,
                           rt_uint8_t  flag)
{
  1025f8:	e92d4800 	push	{fp, lr}
  1025fc:	e28db004 	add	fp, sp, #4
  102600:	e24dd020 	sub	sp, sp, #32
  102604:	e50b0010 	str	r0, [fp, #-16]
  102608:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10260c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  102610:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    struct rt_timer *timer;

    /* allocate a timer object */
    timer = (struct rt_timer *)malloc(sizeof(struct rt_timer));
  102614:	e3a0002c 	mov	r0, #44	; 0x2c
  102618:	eb00eb4d 	bl	13d354 <malloc>
  10261c:	e1a03000 	mov	r3, r0
  102620:	e50b3008 	str	r3, [fp, #-8]
    if (timer == RT_NULL)
  102624:	e51b3008 	ldr	r3, [fp, #-8]
  102628:	e3530000 	cmp	r3, #0
  10262c:	1a000001 	bne	102638 <rt_timer_create+0x40>
    {
        return RT_NULL;
  102630:	e3a03000 	mov	r3, #0
  102634:	ea000007 	b	102658 <rt_timer_create+0x60>
    }

    _rt_timer_init(timer, timeout, parameter, time, flag);
  102638:	e5db3004 	ldrb	r3, [fp, #4]
  10263c:	e58d3000 	str	r3, [sp]
  102640:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  102644:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  102648:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10264c:	e51b0008 	ldr	r0, [fp, #-8]
  102650:	ebffff62 	bl	1023e0 <_rt_timer_init>

    return timer;
  102654:	e51b3008 	ldr	r3, [fp, #-8]
}
  102658:	e1a00003 	mov	r0, r3
  10265c:	e24bd004 	sub	sp, fp, #4
  102660:	e8bd8800 	pop	{fp, pc}

00102664 <rt_timer_delete>:
 * @param timer the timer to be deleted
 *
 * @return the operation status, RT_EOK on OK; RT_ERROR on error
 */
rt_err_t rt_timer_delete(rt_timer_t timer)
{
  102664:	e92d4800 	push	{fp, lr}
  102668:	e28db004 	add	fp, sp, #4
  10266c:	e24dd008 	sub	sp, sp, #8
  102670:	e50b0008 	str	r0, [fp, #-8]

    /* make sure take mutex */
    while(rt_mutex_take(mutex, RT_WAITING_FOREVER) != RT_EOK);
  102674:	e320f000 	nop	{0}
  102678:	e30d3410 	movw	r3, #54288	; 0xd410
  10267c:	e3403014 	movt	r3, #20
  102680:	e5933000 	ldr	r3, [r3]
  102684:	e3e01000 	mvn	r1, #0
  102688:	e1a00003 	mov	r0, r3
  10268c:	ebfffa1b 	bl	100f00 <rt_mutex_take>
  102690:	e1a03000 	mov	r3, r0
  102694:	e3530000 	cmp	r3, #0
  102698:	1afffff6 	bne	102678 <rt_timer_delete+0x14>

    _rt_timer_remove(timer);
  10269c:	e51b0008 	ldr	r0, [fp, #-8]
  1026a0:	ebffff92 	bl	1024f0 <_rt_timer_remove>

    /*free timer object */
    free(timer);
  1026a4:	e51b0008 	ldr	r0, [fp, #-8]
  1026a8:	eb00ece5 	bl	13da44 <free>

    /* release mutex */
    rt_mutex_release(mutex);
  1026ac:	e30d3410 	movw	r3, #54288	; 0xd410
  1026b0:	e3403014 	movt	r3, #20
  1026b4:	e5933000 	ldr	r3, [r3]
  1026b8:	e1a00003 	mov	r0, r3
  1026bc:	ebfffa2d 	bl	100f78 <rt_mutex_release>

    return RT_EOK;
  1026c0:	e3a03000 	mov	r3, #0
}
  1026c4:	e1a00003 	mov	r0, r3
  1026c8:	e24bd004 	sub	sp, fp, #4
  1026cc:	e8bd8800 	pop	{fp, pc}

001026d0 <rt_timer_start>:
 * @param timer the timer to be started
 *
 * @return the operation status, RT_EOK on OK, -RT_ERROR on error
 */
rt_err_t rt_timer_start(rt_timer_t timer)
{
  1026d0:	e92d4800 	push	{fp, lr}
  1026d4:	e28db004 	add	fp, sp, #4
  1026d8:	e24dd020 	sub	sp, sp, #32
  1026dc:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
    rt_list_t *row_head[RT_TIMER_SKIP_LIST_LEVEL];
    unsigned int tst_nr;
    static unsigned int random_nr;

    /* make sure take mutex */
    while(rt_mutex_take(mutex, RT_WAITING_FOREVER) != RT_EOK);
  1026e0:	e320f000 	nop	{0}
  1026e4:	e30d3410 	movw	r3, #54288	; 0xd410
  1026e8:	e3403014 	movt	r3, #20
  1026ec:	e5933000 	ldr	r3, [r3]
  1026f0:	e3e01000 	mvn	r1, #0
  1026f4:	e1a00003 	mov	r0, r3
  1026f8:	ebfffa00 	bl	100f00 <rt_mutex_take>
  1026fc:	e1a03000 	mov	r3, r0
  102700:	e3530000 	cmp	r3, #0
  102704:	1afffff6 	bne	1026e4 <rt_timer_start+0x14>
    /* remove timer from list */
    _rt_timer_remove(timer);
  102708:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10270c:	ebffff77 	bl	1024f0 <_rt_timer_remove>
    /* change status of timer */
    timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
  102710:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  102714:	e5d33009 	ldrb	r3, [r3, #9]
  102718:	e3c33001 	bic	r3, r3, #1
  10271c:	e6ef2073 	uxtb	r2, r3
  102720:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  102724:	e5c32009 	strb	r2, [r3, #9]
    /* release mutex */
    rt_mutex_release(mutex);
  102728:	e30d3410 	movw	r3, #54288	; 0xd410
  10272c:	e3403014 	movt	r3, #20
  102730:	e5933000 	ldr	r3, [r3]
  102734:	e1a00003 	mov	r0, r3
  102738:	ebfffa0e 	bl	100f78 <rt_mutex_release>

    /*
     * get timeout tick,
     * the max timeout tick shall not great than RT_TICK_MAX/2
     */
    timer->timeout_tick = rt_tick_get() + timer->init_tick;
  10273c:	ebfffdc7 	bl	101e60 <rt_tick_get>
  102740:	e1a02000 	mov	r2, r0
  102744:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  102748:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  10274c:	e0822003 	add	r2, r2, r3
  102750:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  102754:	e5832028 	str	r2, [r3, #40]	; 0x28

    /* make sure take mutex */
    while(rt_mutex_take(mutex, RT_WAITING_FOREVER) != RT_EOK);
  102758:	e320f000 	nop	{0}
  10275c:	e30d3410 	movw	r3, #54288	; 0xd410
  102760:	e3403014 	movt	r3, #20
  102764:	e5933000 	ldr	r3, [r3]
  102768:	e3e01000 	mvn	r1, #0
  10276c:	e1a00003 	mov	r0, r3
  102770:	ebfff9e2 	bl	100f00 <rt_mutex_take>
  102774:	e1a03000 	mov	r3, r0
  102778:	e3530000 	cmp	r3, #0
  10277c:	1afffff6 	bne	10275c <rt_timer_start+0x8c>

    /* insert timer to soft timer list */
    timer_list = rt_soft_timer_list;
  102780:	e30d3418 	movw	r3, #54296	; 0xd418
  102784:	e3403014 	movt	r3, #20
  102788:	e50b3010 	str	r3, [fp, #-16]

    row_head[0]  = &timer_list[0];
  10278c:	e51b3010 	ldr	r3, [fp, #-16]
  102790:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    for (row_lvl = 0; row_lvl < RT_TIMER_SKIP_LIST_LEVEL; row_lvl++)
  102794:	e3a03000 	mov	r3, #0
  102798:	e50b3008 	str	r3, [fp, #-8]
  10279c:	ea000047 	b	1028c0 <rt_timer_start+0x1f0>
    {
        for (; row_head[row_lvl] != timer_list[row_lvl].prev;
             row_head[row_lvl]  = row_head[row_lvl]->next)
        {
            struct rt_timer *t;
            rt_list_t *p = row_head[row_lvl]->next;
  1027a0:	e51b3008 	ldr	r3, [fp, #-8]
  1027a4:	e1a03103 	lsl	r3, r3, #2
  1027a8:	e24b2004 	sub	r2, fp, #4
  1027ac:	e0823003 	add	r3, r2, r3
  1027b0:	e5133018 	ldr	r3, [r3, #-24]	; 0xffffffe8
  1027b4:	e5933000 	ldr	r3, [r3]
  1027b8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

            /* fix up the entry pointer */
            t = rt_list_entry(p, struct rt_timer, row[row_lvl]);
  1027bc:	e51b3008 	ldr	r3, [fp, #-8]
  1027c0:	e1a03183 	lsl	r3, r3, #3
  1027c4:	e2833014 	add	r3, r3, #20
  1027c8:	e2633000 	rsb	r3, r3, #0
  1027cc:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1027d0:	e0823003 	add	r3, r2, r3
  1027d4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
            /* If we have two timers that timeout at the same time, it's
             * preferred that the timer inserted early get called early.
             * So insert the new timer to the end the the some-timeout timer
             * list.
             */
            if ((t->timeout_tick - timer->timeout_tick) == 0)
  1027d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1027dc:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  1027e0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1027e4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  1027e8:	e1520003 	cmp	r2, r3
  1027ec:	0a000007 	beq	102810 <rt_timer_start+0x140>
            {
                continue;
            }
            else if ((t->timeout_tick - timer->timeout_tick) < RT_TICK_MAX / 2)
  1027f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1027f4:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  1027f8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1027fc:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  102800:	e0423003 	sub	r3, r2, r3
  102804:	e373010a 	cmn	r3, #-2147483646	; 0x80000002
  102808:	9a000019 	bls	102874 <rt_timer_start+0x1a4>
  10280c:	ea000000 	b	102814 <rt_timer_start+0x144>
                continue;
  102810:	e320f000 	nop	{0}
             row_head[row_lvl]  = row_head[row_lvl]->next)
  102814:	e51b3008 	ldr	r3, [fp, #-8]
  102818:	e1a03103 	lsl	r3, r3, #2
  10281c:	e24b2004 	sub	r2, fp, #4
  102820:	e0823003 	add	r3, r2, r3
  102824:	e5133018 	ldr	r3, [r3, #-24]	; 0xffffffe8
  102828:	e5932000 	ldr	r2, [r3]
  10282c:	e51b3008 	ldr	r3, [fp, #-8]
  102830:	e1a03103 	lsl	r3, r3, #2
  102834:	e24b1004 	sub	r1, fp, #4
  102838:	e0813003 	add	r3, r1, r3
  10283c:	e5032018 	str	r2, [r3, #-24]	; 0xffffffe8
        for (; row_head[row_lvl] != timer_list[row_lvl].prev;
  102840:	e51b3008 	ldr	r3, [fp, #-8]
  102844:	e1a03103 	lsl	r3, r3, #2
  102848:	e24b2004 	sub	r2, fp, #4
  10284c:	e0823003 	add	r3, r2, r3
  102850:	e5132018 	ldr	r2, [r3, #-24]	; 0xffffffe8
  102854:	e51b3008 	ldr	r3, [fp, #-8]
  102858:	e1a03183 	lsl	r3, r3, #3
  10285c:	e51b1010 	ldr	r1, [fp, #-16]
  102860:	e0813003 	add	r3, r1, r3
  102864:	e5933004 	ldr	r3, [r3, #4]
  102868:	e1520003 	cmp	r2, r3
  10286c:	1affffcb 	bne	1027a0 <rt_timer_start+0xd0>
  102870:	ea000000 	b	102878 <rt_timer_start+0x1a8>
            {
                break;
  102874:	e320f000 	nop	{0}
            }
        }
        if (row_lvl != RT_TIMER_SKIP_LIST_LEVEL - 1)
  102878:	e51b3008 	ldr	r3, [fp, #-8]
  10287c:	e3530000 	cmp	r3, #0
  102880:	0a00000b 	beq	1028b4 <rt_timer_start+0x1e4>
            row_head[row_lvl + 1] = row_head[row_lvl] + 1;
  102884:	e51b3008 	ldr	r3, [fp, #-8]
  102888:	e1a03103 	lsl	r3, r3, #2
  10288c:	e24b2004 	sub	r2, fp, #4
  102890:	e0823003 	add	r3, r2, r3
  102894:	e5132018 	ldr	r2, [r3, #-24]	; 0xffffffe8
  102898:	e51b3008 	ldr	r3, [fp, #-8]
  10289c:	e2833001 	add	r3, r3, #1
  1028a0:	e2822008 	add	r2, r2, #8
  1028a4:	e1a03103 	lsl	r3, r3, #2
  1028a8:	e24b1004 	sub	r1, fp, #4
  1028ac:	e0813003 	add	r3, r1, r3
  1028b0:	e5032018 	str	r2, [r3, #-24]	; 0xffffffe8
    for (row_lvl = 0; row_lvl < RT_TIMER_SKIP_LIST_LEVEL; row_lvl++)
  1028b4:	e51b3008 	ldr	r3, [fp, #-8]
  1028b8:	e2833001 	add	r3, r3, #1
  1028bc:	e50b3008 	str	r3, [fp, #-8]
  1028c0:	e51b3008 	ldr	r3, [fp, #-8]
  1028c4:	e3530000 	cmp	r3, #0
  1028c8:	0affffdc 	beq	102840 <rt_timer_start+0x170>

    /* Interestingly, this super simple timer insert counter works very very
     * well on distributing the list height uniformly. By means of "very very
     * well", I mean it beats the randomness of timer->timeout_tick very easily
     * (actually, the timeout_tick is not random and easy to be attacked). */
    random_nr++;
  1028cc:	e30d3420 	movw	r3, #54304	; 0xd420
  1028d0:	e3403014 	movt	r3, #20
  1028d4:	e5933000 	ldr	r3, [r3]
  1028d8:	e2832001 	add	r2, r3, #1
  1028dc:	e30d3420 	movw	r3, #54304	; 0xd420
  1028e0:	e3403014 	movt	r3, #20
  1028e4:	e5832000 	str	r2, [r3]
    tst_nr = random_nr;
  1028e8:	e30d3420 	movw	r3, #54304	; 0xd420
  1028ec:	e3403014 	movt	r3, #20
  1028f0:	e5933000 	ldr	r3, [r3]
  1028f4:	e50b300c 	str	r3, [fp, #-12]

    rt_list_insert_after(row_head[RT_TIMER_SKIP_LIST_LEVEL - 1],
  1028f8:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1028fc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  102900:	e2833014 	add	r3, r3, #20
  102904:	e1a01003 	mov	r1, r3
  102908:	e1a00002 	mov	r0, r2
  10290c:	ebfffe74 	bl	1022e4 <rt_list_insert_after>
                         &(timer->row[RT_TIMER_SKIP_LIST_LEVEL - 1]));
    for (row_lvl = 2; row_lvl <= RT_TIMER_SKIP_LIST_LEVEL; row_lvl++)
  102910:	e3a03002 	mov	r3, #2
  102914:	e50b3008 	str	r3, [fp, #-8]
  102918:	ea000018 	b	102980 <rt_timer_start+0x2b0>
    {
        if (!(tst_nr & RT_TIMER_SKIP_LIST_MASK))
  10291c:	e51b300c 	ldr	r3, [fp, #-12]
  102920:	e2033003 	and	r3, r3, #3
  102924:	e3530000 	cmp	r3, #0
  102928:	1a000018 	bne	102990 <rt_timer_start+0x2c0>
            rt_list_insert_after(row_head[RT_TIMER_SKIP_LIST_LEVEL - row_lvl],
  10292c:	e51b3008 	ldr	r3, [fp, #-8]
  102930:	e2633001 	rsb	r3, r3, #1
  102934:	e1a03103 	lsl	r3, r3, #2
  102938:	e24b2004 	sub	r2, fp, #4
  10293c:	e0823003 	add	r3, r2, r3
  102940:	e5130018 	ldr	r0, [r3, #-24]	; 0xffffffe8
                                 &(timer->row[RT_TIMER_SKIP_LIST_LEVEL - row_lvl]));
  102944:	e51b3008 	ldr	r3, [fp, #-8]
  102948:	e2633001 	rsb	r3, r3, #1
            rt_list_insert_after(row_head[RT_TIMER_SKIP_LIST_LEVEL - row_lvl],
  10294c:	e2833002 	add	r3, r3, #2
  102950:	e1a03183 	lsl	r3, r3, #3
  102954:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  102958:	e0823003 	add	r3, r2, r3
  10295c:	e2833004 	add	r3, r3, #4
  102960:	e1a01003 	mov	r1, r3
  102964:	ebfffe5e 	bl	1022e4 <rt_list_insert_after>
        else
            break;
        /* Shift over the bits we have tested. Works well with 1 bit and 2
         * bits. */
        tst_nr >>= (RT_TIMER_SKIP_LIST_MASK + 1) >> 1;
  102968:	e51b300c 	ldr	r3, [fp, #-12]
  10296c:	e1a03123 	lsr	r3, r3, #2
  102970:	e50b300c 	str	r3, [fp, #-12]
    for (row_lvl = 2; row_lvl <= RT_TIMER_SKIP_LIST_LEVEL; row_lvl++)
  102974:	e51b3008 	ldr	r3, [fp, #-8]
  102978:	e2833001 	add	r3, r3, #1
  10297c:	e50b3008 	str	r3, [fp, #-8]
  102980:	e51b3008 	ldr	r3, [fp, #-8]
  102984:	e3530001 	cmp	r3, #1
  102988:	9affffe3 	bls	10291c <rt_timer_start+0x24c>
  10298c:	ea000000 	b	102994 <rt_timer_start+0x2c4>
            break;
  102990:	e320f000 	nop	{0}
    }

    timer->parent.flag |= RT_TIMER_FLAG_ACTIVATED;
  102994:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  102998:	e5d33009 	ldrb	r3, [r3, #9]
  10299c:	e3833001 	orr	r3, r3, #1
  1029a0:	e6ef2073 	uxtb	r2, r3
  1029a4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1029a8:	e5c32009 	strb	r2, [r3, #9]

    /* release mutex */
    rt_mutex_release(mutex);
  1029ac:	e30d3410 	movw	r3, #54288	; 0xd410
  1029b0:	e3403014 	movt	r3, #20
  1029b4:	e5933000 	ldr	r3, [r3]
  1029b8:	e1a00003 	mov	r0, r3
  1029bc:	ebfff96d 	bl	100f78 <rt_mutex_release>

    /* update hardware timer */
    rt_hw_timer_update();
  1029c0:	eb0000cc 	bl	102cf8 <rt_hw_timer_update>

    return RT_EOK;
  1029c4:	e3a03000 	mov	r3, #0
}
  1029c8:	e1a00003 	mov	r0, r3
  1029cc:	e24bd004 	sub	sp, fp, #4
  1029d0:	e8bd8800 	pop	{fp, pc}

001029d4 <rt_timer_stop>:
 * @param timer the timer to be stopped
 *
 * @return the operation status, RT_EOK on OK, -RT_ERROR on error
 */
rt_err_t rt_timer_stop(rt_timer_t timer)
{
  1029d4:	e92d4800 	push	{fp, lr}
  1029d8:	e28db004 	add	fp, sp, #4
  1029dc:	e24dd008 	sub	sp, sp, #8
  1029e0:	e50b0008 	str	r0, [fp, #-8]
    if (!(timer->parent.flag & RT_TIMER_FLAG_ACTIVATED))
  1029e4:	e51b3008 	ldr	r3, [fp, #-8]
  1029e8:	e5d33009 	ldrb	r3, [r3, #9]
  1029ec:	e2033001 	and	r3, r3, #1
  1029f0:	e3530000 	cmp	r3, #0
  1029f4:	1a000001 	bne	102a00 <rt_timer_stop+0x2c>
        return -RT_ERROR;
  1029f8:	e3e03000 	mvn	r3, #0
  1029fc:	ea000017 	b	102a60 <rt_timer_stop+0x8c>

    /* make sure take mutex */
    while(rt_mutex_take(mutex, RT_WAITING_FOREVER) != RT_EOK);
  102a00:	e320f000 	nop	{0}
  102a04:	e30d3410 	movw	r3, #54288	; 0xd410
  102a08:	e3403014 	movt	r3, #20
  102a0c:	e5933000 	ldr	r3, [r3]
  102a10:	e3e01000 	mvn	r1, #0
  102a14:	e1a00003 	mov	r0, r3
  102a18:	ebfff938 	bl	100f00 <rt_mutex_take>
  102a1c:	e1a03000 	mov	r3, r0
  102a20:	e3530000 	cmp	r3, #0
  102a24:	1afffff6 	bne	102a04 <rt_timer_stop+0x30>

    _rt_timer_remove(timer);
  102a28:	e51b0008 	ldr	r0, [fp, #-8]
  102a2c:	ebfffeaf 	bl	1024f0 <_rt_timer_remove>

    /* release mutex */
    rt_mutex_release(mutex);
  102a30:	e30d3410 	movw	r3, #54288	; 0xd410
  102a34:	e3403014 	movt	r3, #20
  102a38:	e5933000 	ldr	r3, [r3]
  102a3c:	e1a00003 	mov	r0, r3
  102a40:	ebfff94c 	bl	100f78 <rt_mutex_release>

    /* change stat */
    timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
  102a44:	e51b3008 	ldr	r3, [fp, #-8]
  102a48:	e5d33009 	ldrb	r3, [r3, #9]
  102a4c:	e3c33001 	bic	r3, r3, #1
  102a50:	e6ef2073 	uxtb	r2, r3
  102a54:	e51b3008 	ldr	r3, [fp, #-8]
  102a58:	e5c32009 	strb	r2, [r3, #9]

    return RT_EOK;
  102a5c:	e3a03000 	mov	r3, #0
}
  102a60:	e1a00003 	mov	r0, r3
  102a64:	e24bd004 	sub	sp, fp, #4
  102a68:	e8bd8800 	pop	{fp, pc}

00102a6c <rt_timer_control>:
 * @param arg the argument
 *
 * @return RT_EOK
 */
rt_err_t rt_timer_control(rt_timer_t timer, int cmd, void *arg)
{
  102a6c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  102a70:	e28db000 	add	fp, sp, #0
  102a74:	e24dd014 	sub	sp, sp, #20
  102a78:	e50b0008 	str	r0, [fp, #-8]
  102a7c:	e50b100c 	str	r1, [fp, #-12]
  102a80:	e50b2010 	str	r2, [fp, #-16]
    switch (cmd)
  102a84:	e51b300c 	ldr	r3, [fp, #-12]
  102a88:	e3530008 	cmp	r3, #8
  102a8c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  102a90:	ea000032 	b	102b60 <rt_timer_control+0xf4>
  102a94:	00102acc 	.word	0x00102acc
  102a98:	00102ab8 	.word	0x00102ab8
  102a9c:	00102ae0 	.word	0x00102ae0
  102aa0:	00102afc 	.word	0x00102afc
  102aa4:	00102b60 	.word	0x00102b60
  102aa8:	00102b18 	.word	0x00102b18
  102aac:	00102b2c 	.word	0x00102b2c
  102ab0:	00102b3c 	.word	0x00102b3c
  102ab4:	00102b50 	.word	0x00102b50
    {
    case RT_TIMER_CTRL_GET_TIME:
        *(rt_tick_t *)arg = timer->init_tick;
  102ab8:	e51b3008 	ldr	r3, [fp, #-8]
  102abc:	e5932024 	ldr	r2, [r3, #36]	; 0x24
  102ac0:	e51b3010 	ldr	r3, [fp, #-16]
  102ac4:	e5832000 	str	r2, [r3]
        break;
  102ac8:	ea000024 	b	102b60 <rt_timer_control+0xf4>

    case RT_TIMER_CTRL_SET_TIME:
        timer->init_tick = *(rt_tick_t *)arg;
  102acc:	e51b3010 	ldr	r3, [fp, #-16]
  102ad0:	e5932000 	ldr	r2, [r3]
  102ad4:	e51b3008 	ldr	r3, [fp, #-8]
  102ad8:	e5832024 	str	r2, [r3, #36]	; 0x24
        break;
  102adc:	ea00001f 	b	102b60 <rt_timer_control+0xf4>

    case RT_TIMER_CTRL_SET_ONESHOT:
        timer->parent.flag &= ~RT_TIMER_FLAG_PERIODIC;
  102ae0:	e51b3008 	ldr	r3, [fp, #-8]
  102ae4:	e5d33009 	ldrb	r3, [r3, #9]
  102ae8:	e3c33002 	bic	r3, r3, #2
  102aec:	e6ef2073 	uxtb	r2, r3
  102af0:	e51b3008 	ldr	r3, [fp, #-8]
  102af4:	e5c32009 	strb	r2, [r3, #9]
        break;
  102af8:	ea000018 	b	102b60 <rt_timer_control+0xf4>

    case RT_TIMER_CTRL_SET_PERIODIC:
        timer->parent.flag |= RT_TIMER_FLAG_PERIODIC;
  102afc:	e51b3008 	ldr	r3, [fp, #-8]
  102b00:	e5d33009 	ldrb	r3, [r3, #9]
  102b04:	e3833002 	orr	r3, r3, #2
  102b08:	e6ef2073 	uxtb	r2, r3
  102b0c:	e51b3008 	ldr	r3, [fp, #-8]
  102b10:	e5c32009 	strb	r2, [r3, #9]
        break;
  102b14:	ea000011 	b	102b60 <rt_timer_control+0xf4>

    case RT_TIMER_CTRL_GET_FUNC:
        *(void **)arg = timer->timeout_func;
  102b18:	e51b3008 	ldr	r3, [fp, #-8]
  102b1c:	e593201c 	ldr	r2, [r3, #28]
  102b20:	e51b3010 	ldr	r3, [fp, #-16]
  102b24:	e5832000 	str	r2, [r3]
        break;
  102b28:	ea00000c 	b	102b60 <rt_timer_control+0xf4>

    case RT_TIMER_CTRL_SET_FUNC:
        timer->timeout_func = (void (*)(void*))arg;
  102b2c:	e51b2010 	ldr	r2, [fp, #-16]
  102b30:	e51b3008 	ldr	r3, [fp, #-8]
  102b34:	e583201c 	str	r2, [r3, #28]
        break;
  102b38:	ea000008 	b	102b60 <rt_timer_control+0xf4>

    case RT_TIMER_CTRL_GET_PARM:
        *(void **)arg = timer->parameter;
  102b3c:	e51b3008 	ldr	r3, [fp, #-8]
  102b40:	e5932020 	ldr	r2, [r3, #32]
  102b44:	e51b3010 	ldr	r3, [fp, #-16]
  102b48:	e5832000 	str	r2, [r3]
        break;
  102b4c:	ea000003 	b	102b60 <rt_timer_control+0xf4>

    case RT_TIMER_CTRL_SET_PARM:
        timer->parameter = arg;
  102b50:	e51b3008 	ldr	r3, [fp, #-8]
  102b54:	e51b2010 	ldr	r2, [fp, #-16]
  102b58:	e5832020 	str	r2, [r3, #32]
        break;
  102b5c:	e320f000 	nop	{0}
    }

    return RT_EOK;
  102b60:	e3a03000 	mov	r3, #0
}
  102b64:	e1a00003 	mov	r0, r3
  102b68:	e28bd000 	add	sp, fp, #0
  102b6c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  102b70:	e12fff1e 	bx	lr

00102b74 <rt_soft_timer_check>:
/**
 * This function will check timer list, if a timeout event happens, the
 * corresponding timeout function will be invoked.
 */
void rt_soft_timer_check(void)
{
  102b74:	e92d4800 	push	{fp, lr}
  102b78:	e28db004 	add	fp, sp, #4
  102b7c:	e24dd010 	sub	sp, sp, #16
    rt_list_t *n;
    struct rt_timer *t;

    RT_DEBUG_LOG(RT_DEBUG_TIMER, ("software timer check enter\n"));

    current_tick = rt_tick_get();
  102b80:	ebfffcb6 	bl	101e60 <rt_tick_get>
  102b84:	e50b0008 	str	r0, [fp, #-8]

    /* make sure take mutex */
    while(rt_mutex_take(mutex, RT_WAITING_FOREVER) != RT_EOK);
  102b88:	e320f000 	nop	{0}
  102b8c:	e30d3410 	movw	r3, #54288	; 0xd410
  102b90:	e3403014 	movt	r3, #20
  102b94:	e5933000 	ldr	r3, [r3]
  102b98:	e3e01000 	mvn	r1, #0
  102b9c:	e1a00003 	mov	r0, r3
  102ba0:	ebfff8d6 	bl	100f00 <rt_mutex_take>
  102ba4:	e1a03000 	mov	r3, r0
  102ba8:	e3530000 	cmp	r3, #0
  102bac:	1afffff6 	bne	102b8c <rt_soft_timer_check+0x18>

    for (n = rt_soft_timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1].next;
  102bb0:	e30d3418 	movw	r3, #54296	; 0xd418
  102bb4:	e3403014 	movt	r3, #20
  102bb8:	e5933000 	ldr	r3, [r3]
  102bbc:	e50b300c 	str	r3, [fp, #-12]
  102bc0:	ea00003d 	b	102cbc <rt_soft_timer_check+0x148>
         n != &(rt_soft_timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1]);)
    {
        t = rt_list_entry(n, struct rt_timer, row[RT_TIMER_SKIP_LIST_LEVEL - 1]);
  102bc4:	e51b300c 	ldr	r3, [fp, #-12]
  102bc8:	e2433014 	sub	r3, r3, #20
  102bcc:	e50b3010 	str	r3, [fp, #-16]

        /*
         * It supposes that the new tick shall less than the half duration of
         * tick max.
         */
        if ((current_tick - t->timeout_tick) < RT_TICK_MAX / 2)
  102bd0:	e51b3010 	ldr	r3, [fp, #-16]
  102bd4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  102bd8:	e51b2008 	ldr	r2, [fp, #-8]
  102bdc:	e0423003 	sub	r3, r2, r3
  102be0:	e373010a 	cmn	r3, #-2147483646	; 0x80000002
  102be4:	8a00003a 	bhi	102cd4 <rt_soft_timer_check+0x160>
        {
            /* move node to the next */
            n = n->next;
  102be8:	e51b300c 	ldr	r3, [fp, #-12]
  102bec:	e5933000 	ldr	r3, [r3]
  102bf0:	e50b300c 	str	r3, [fp, #-12]

            /* remove timer from timer list firstly */
            _rt_timer_remove(t);
  102bf4:	e51b0010 	ldr	r0, [fp, #-16]
  102bf8:	ebfffe3c 	bl	1024f0 <_rt_timer_remove>

            /* release mutex */
            rt_mutex_release(mutex);
  102bfc:	e30d3410 	movw	r3, #54288	; 0xd410
  102c00:	e3403014 	movt	r3, #20
  102c04:	e5933000 	ldr	r3, [r3]
  102c08:	e1a00003 	mov	r0, r3
  102c0c:	ebfff8d9 	bl	100f78 <rt_mutex_release>
            /* call timeout function */
            t->timeout_func(t->parameter);
  102c10:	e51b3010 	ldr	r3, [fp, #-16]
  102c14:	e593301c 	ldr	r3, [r3, #28]
  102c18:	e51b2010 	ldr	r2, [fp, #-16]
  102c1c:	e5922020 	ldr	r2, [r2, #32]
  102c20:	e1a00002 	mov	r0, r2
  102c24:	e12fff33 	blx	r3

            /* re-get tick */
            current_tick = rt_tick_get();
  102c28:	ebfffc8c 	bl	101e60 <rt_tick_get>
  102c2c:	e50b0008 	str	r0, [fp, #-8]

            RT_DEBUG_LOG(RT_DEBUG_TIMER, ("current tick: %d\n", current_tick));

            /* make sure take mutex */
            while(rt_mutex_take(mutex, RT_WAITING_FOREVER) != RT_EOK);
  102c30:	e320f000 	nop	{0}
  102c34:	e30d3410 	movw	r3, #54288	; 0xd410
  102c38:	e3403014 	movt	r3, #20
  102c3c:	e5933000 	ldr	r3, [r3]
  102c40:	e3e01000 	mvn	r1, #0
  102c44:	e1a00003 	mov	r0, r3
  102c48:	ebfff8ac 	bl	100f00 <rt_mutex_take>
  102c4c:	e1a03000 	mov	r3, r0
  102c50:	e3530000 	cmp	r3, #0
  102c54:	1afffff6 	bne	102c34 <rt_soft_timer_check+0xc0>


            if ((t->parent.flag & RT_TIMER_FLAG_PERIODIC) &&
  102c58:	e51b3010 	ldr	r3, [fp, #-16]
  102c5c:	e5d33009 	ldrb	r3, [r3, #9]
  102c60:	e2033002 	and	r3, r3, #2
  102c64:	e3530000 	cmp	r3, #0
  102c68:	0a00000d 	beq	102ca4 <rt_soft_timer_check+0x130>
                    (t->parent.flag & RT_TIMER_FLAG_ACTIVATED))
  102c6c:	e51b3010 	ldr	r3, [fp, #-16]
  102c70:	e5d33009 	ldrb	r3, [r3, #9]
  102c74:	e2033001 	and	r3, r3, #1
            if ((t->parent.flag & RT_TIMER_FLAG_PERIODIC) &&
  102c78:	e3530000 	cmp	r3, #0
  102c7c:	0a000008 	beq	102ca4 <rt_soft_timer_check+0x130>
            {
                /* start it */
                t->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
  102c80:	e51b3010 	ldr	r3, [fp, #-16]
  102c84:	e5d33009 	ldrb	r3, [r3, #9]
  102c88:	e3c33001 	bic	r3, r3, #1
  102c8c:	e6ef2073 	uxtb	r2, r3
  102c90:	e51b3010 	ldr	r3, [fp, #-16]
  102c94:	e5c32009 	strb	r2, [r3, #9]
                rt_timer_start(t);
  102c98:	e51b0010 	ldr	r0, [fp, #-16]
  102c9c:	ebfffe8b 	bl	1026d0 <rt_timer_start>
  102ca0:	ea000005 	b	102cbc <rt_soft_timer_check+0x148>
            }
            else
            {
                /* stop timer */
                t->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
  102ca4:	e51b3010 	ldr	r3, [fp, #-16]
  102ca8:	e5d33009 	ldrb	r3, [r3, #9]
  102cac:	e3c33001 	bic	r3, r3, #1
  102cb0:	e6ef2073 	uxtb	r2, r3
  102cb4:	e51b3010 	ldr	r3, [fp, #-16]
  102cb8:	e5c32009 	strb	r2, [r3, #9]
    for (n = rt_soft_timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1].next;
  102cbc:	e51b200c 	ldr	r2, [fp, #-12]
  102cc0:	e30d3418 	movw	r3, #54296	; 0xd418
  102cc4:	e3403014 	movt	r3, #20
  102cc8:	e1520003 	cmp	r2, r3
  102ccc:	1affffbc 	bne	102bc4 <rt_soft_timer_check+0x50>
  102cd0:	ea000000 	b	102cd8 <rt_soft_timer_check+0x164>
            }
        }
        else break; /* not check anymore */
  102cd4:	e320f000 	nop	{0}
    }

    /* release mutex */
    rt_mutex_release(mutex);
  102cd8:	e30d3410 	movw	r3, #54288	; 0xd410
  102cdc:	e3403014 	movt	r3, #20
  102ce0:	e5933000 	ldr	r3, [r3]
  102ce4:	e1a00003 	mov	r0, r3
  102ce8:	ebfff8a2 	bl	100f78 <rt_mutex_release>

    RT_DEBUG_LOG(RT_DEBUG_TIMER, ("software timer check leave\n"));
}
  102cec:	e320f000 	nop	{0}
  102cf0:	e24bd004 	sub	sp, fp, #4
  102cf4:	e8bd8800 	pop	{fp, pc}

00102cf8 <rt_hw_timer_update>:

/* update hardware timer */
static void rt_hw_timer_update(void)
{
  102cf8:	e92d4800 	push	{fp, lr}
  102cfc:	e28db004 	add	fp, sp, #4
  102d00:	e24dd008 	sub	sp, sp, #8
    rt_tick_t next_timeout;
    rt_tick_t current_tick;

    /* get the next timeout tick */
    next_timeout = rt_timer_list_next_timeout(rt_soft_timer_list);
  102d04:	e30d0418 	movw	r0, #54296	; 0xd418
  102d08:	e3400014 	movt	r0, #20
  102d0c:	ebfffde3 	bl	1024a0 <rt_timer_list_next_timeout>
  102d10:	e1a03000 	mov	r3, r0
  102d14:	e50b300c 	str	r3, [fp, #-12]
    if (next_timeout == RT_TICK_MAX)
  102d18:	e51b300c 	ldr	r3, [fp, #-12]
  102d1c:	e3730001 	cmn	r3, #1
  102d20:	0a00001f 	beq	102da4 <rt_hw_timer_update+0xac>
        /* no software timer exist, return. */
        return;
    }

    /* get current tick */
    current_tick = rt_tick_get();
  102d24:	ebfffc4d 	bl	101e60 <rt_tick_get>
  102d28:	e50b0008 	str	r0, [fp, #-8]

    if ((next_timeout - current_tick) < RT_TICK_MAX / 2)
  102d2c:	e51b200c 	ldr	r2, [fp, #-12]
  102d30:	e51b3008 	ldr	r3, [fp, #-8]
  102d34:	e0423003 	sub	r3, r2, r3
  102d38:	e373010a 	cmn	r3, #-2147483646	; 0x80000002
  102d3c:	8a00001a 	bhi	102dac <rt_hw_timer_update+0xb4>
    {
        syscall(_NRSYS_timer_stop, hw_timer);
  102d40:	e30d340c 	movw	r3, #54284	; 0xd40c
  102d44:	e3403014 	movt	r3, #20
  102d48:	e5933000 	ldr	r3, [r3]
  102d4c:	e1a01003 	mov	r1, r3
  102d50:	e3a00072 	mov	r0, #114	; 0x72
  102d54:	eb00e5c1 	bl	13c460 <syscall>
        /* get the delta timeout tick */
        next_timeout = next_timeout - current_tick;
  102d58:	e51b200c 	ldr	r2, [fp, #-12]
  102d5c:	e51b3008 	ldr	r3, [fp, #-8]
  102d60:	e0423003 	sub	r3, r2, r3
  102d64:	e50b300c 	str	r3, [fp, #-12]
        syscall(_NRSYS_timer_control,
  102d68:	e30d340c 	movw	r3, #54284	; 0xd40c
  102d6c:	e3403014 	movt	r3, #20
  102d70:	e5931000 	ldr	r1, [r3]
  102d74:	e24b300c 	sub	r3, fp, #12
  102d78:	e3a02000 	mov	r2, #0
  102d7c:	e3a00073 	mov	r0, #115	; 0x73
  102d80:	eb00e5b6 	bl	13c460 <syscall>
                hw_timer,
                RT_TIMER_CTRL_SET_TIME,
                &next_timeout);
        syscall(_NRSYS_timer_start, hw_timer);
  102d84:	e30d340c 	movw	r3, #54284	; 0xd40c
  102d88:	e3403014 	movt	r3, #20
  102d8c:	e5933000 	ldr	r3, [r3]
  102d90:	e1a01003 	mov	r1, r3
  102d94:	e3a00071 	mov	r0, #113	; 0x71
  102d98:	eb00e5b0 	bl	13c460 <syscall>
    }
    return;
  102d9c:	e320f000 	nop	{0}
  102da0:	ea000001 	b	102dac <rt_hw_timer_update+0xb4>
        return;
  102da4:	e320f000 	nop	{0}
  102da8:	ea000000 	b	102db0 <rt_hw_timer_update+0xb8>
    return;
  102dac:	e320f000 	nop	{0}
}
  102db0:	e24bd004 	sub	sp, fp, #4
  102db4:	e8bd8800 	pop	{fp, pc}

00102db8 <rt_thread_timer_handler>:

/* timer signal handler */
static void rt_thread_timer_handler(void)
{
  102db8:	e92d4800 	push	{fp, lr}
  102dbc:	e28db004 	add	fp, sp, #4
    /* update hardware timer */
    rt_hw_timer_update();
  102dc0:	ebffffcc 	bl	102cf8 <rt_hw_timer_update>
    /* check software timer */
    rt_soft_timer_check();
  102dc4:	ebffff6a 	bl	102b74 <rt_soft_timer_check>
}
  102dc8:	e320f000 	nop	{0}
  102dcc:	e8bd8800 	pop	{fp, pc}

00102dd0 <timer_thread_entry>:

static void timer_thread_entry(void* parameter)
{
  102dd0:	e92d4800 	push	{fp, lr}
  102dd4:	e28db004 	add	fp, sp, #4
  102dd8:	e24dd010 	sub	sp, sp, #16
  102ddc:	e50b0010 	str	r0, [fp, #-16]
    while (1)
    {
        rt_err_t ret;
        ret = rt_sem_take(sem, RT_WAITING_FOREVER);
  102de0:	e30d3414 	movw	r3, #54292	; 0xd414
  102de4:	e3403014 	movt	r3, #20
  102de8:	e5933000 	ldr	r3, [r3]
  102dec:	e3e01000 	mvn	r1, #0
  102df0:	e1a00003 	mov	r0, r3
  102df4:	ebfff92e 	bl	1012b4 <rt_sem_take>
  102df8:	e50b0008 	str	r0, [fp, #-8]
        if (ret != RT_EOK)
  102dfc:	e51b3008 	ldr	r3, [fp, #-8]
  102e00:	e3530000 	cmp	r3, #0
  102e04:	1a000001 	bne	102e10 <timer_thread_entry+0x40>
        {
            break;
        }
        rt_thread_timer_handler();
  102e08:	ebffffea 	bl	102db8 <rt_thread_timer_handler>
    {
  102e0c:	eafffff3 	b	102de0 <timer_thread_entry+0x10>
            break;
  102e10:	e320f000 	nop	{0}
    }
}
  102e14:	e320f000 	nop	{0}
  102e18:	e24bd004 	sub	sp, fp, #4
  102e1c:	e8bd8800 	pop	{fp, pc}

00102e20 <rt_system_timer_init>:

void rt_system_timer_init(rt_uint32_t timer_stack_size)
{
  102e20:	e92d4800 	push	{fp, lr}
  102e24:	e28db004 	add	fp, sp, #4
  102e28:	e24dd018 	sub	sp, sp, #24
  102e2c:	e50b0010 	str	r0, [fp, #-16]
    int i;
    rt_thread_t tid;

    if (!sem)
  102e30:	e30d3414 	movw	r3, #54292	; 0xd414
  102e34:	e3403014 	movt	r3, #20
  102e38:	e5933000 	ldr	r3, [r3]
  102e3c:	e3530000 	cmp	r3, #0
  102e40:	1a000008 	bne	102e68 <rt_system_timer_init+0x48>
    {
        sem = rt_sem_create("u_timer", 0, RT_IPC_FLAG_FIFO);
  102e44:	e3a02000 	mov	r2, #0
  102e48:	e3a01000 	mov	r1, #0
  102e4c:	e3050490 	movw	r0, #21648	; 0x5490
  102e50:	e3400014 	movt	r0, #20
  102e54:	ebfff863 	bl	100fe8 <rt_sem_create>
  102e58:	e1a02000 	mov	r2, r0
  102e5c:	e30d3414 	movw	r3, #54292	; 0xd414
  102e60:	e3403014 	movt	r3, #20
  102e64:	e5832000 	str	r2, [r3]
    }

    if (!mutex)
  102e68:	e30d3410 	movw	r3, #54288	; 0xd410
  102e6c:	e3403014 	movt	r3, #20
  102e70:	e5933000 	ldr	r3, [r3]
  102e74:	e3530000 	cmp	r3, #0
  102e78:	1a000007 	bne	102e9c <rt_system_timer_init+0x7c>
    {
        mutex = rt_mutex_create("utm_mutex", RT_IPC_FLAG_FIFO);
  102e7c:	e3a01000 	mov	r1, #0
  102e80:	e3050498 	movw	r0, #21656	; 0x5498
  102e84:	e3400014 	movt	r0, #20
  102e88:	ebfff786 	bl	100ca8 <rt_mutex_create>
  102e8c:	e1a02000 	mov	r2, r0
  102e90:	e30d3410 	movw	r3, #54288	; 0xd410
  102e94:	e3403014 	movt	r3, #20
  102e98:	e5832000 	str	r2, [r3]
    }

    for (i = 0;
  102e9c:	e3a03000 	mov	r3, #0
  102ea0:	e50b3008 	str	r3, [fp, #-8]
  102ea4:	ea000009 	b	102ed0 <rt_system_timer_init+0xb0>
         i < sizeof(rt_soft_timer_list) / sizeof(rt_soft_timer_list[0]);
         i++)
    {
        rt_list_init(rt_soft_timer_list + i);
  102ea8:	e51b3008 	ldr	r3, [fp, #-8]
  102eac:	e1a02183 	lsl	r2, r3, #3
  102eb0:	e30d3418 	movw	r3, #54296	; 0xd418
  102eb4:	e3403014 	movt	r3, #20
  102eb8:	e0823003 	add	r3, r2, r3
  102ebc:	e1a00003 	mov	r0, r3
  102ec0:	ebfffcf8 	bl	1022a8 <rt_list_init>
         i++)
  102ec4:	e51b3008 	ldr	r3, [fp, #-8]
  102ec8:	e2833001 	add	r3, r3, #1
  102ecc:	e50b3008 	str	r3, [fp, #-8]
    for (i = 0;
  102ed0:	e51b3008 	ldr	r3, [fp, #-8]
  102ed4:	e3530000 	cmp	r3, #0
  102ed8:	0afffff2 	beq	102ea8 <rt_system_timer_init+0x88>
    }

    /* initial hardware timer */
    if (!hw_timer)
  102edc:	e30d340c 	movw	r3, #54284	; 0xd40c
  102ee0:	e3403014 	movt	r3, #20
  102ee4:	e5933000 	ldr	r3, [r3]
  102ee8:	e3530000 	cmp	r3, #0
  102eec:	1a00000f 	bne	102f30 <rt_system_timer_init+0x110>
    {
        hw_timer = (rt_timer_t)syscall(_NRSYS_timer_create,
                "u_timer",
                sem->data, //SIG_HW_TIMER,
  102ef0:	e30d3414 	movw	r3, #54292	; 0xd414
  102ef4:	e3403014 	movt	r3, #20
  102ef8:	e5933000 	ldr	r3, [r3]
        hw_timer = (rt_timer_t)syscall(_NRSYS_timer_create,
  102efc:	e5932004 	ldr	r2, [r3, #4]
  102f00:	e3a03000 	mov	r3, #0
  102f04:	e58d3000 	str	r3, [sp]
  102f08:	e3a03000 	mov	r3, #0
  102f0c:	e3051490 	movw	r1, #21648	; 0x5490
  102f10:	e3401014 	movt	r1, #20
  102f14:	e3a0006f 	mov	r0, #111	; 0x6f
  102f18:	eb00e550 	bl	13c460 <syscall>
  102f1c:	e1a03000 	mov	r3, r0
  102f20:	e1a02003 	mov	r2, r3
  102f24:	e30d340c 	movw	r3, #54284	; 0xd40c
  102f28:	e3403014 	movt	r3, #20
  102f2c:	e5832000 	str	r2, [r3]
                0,
                RT_TIMER_FLAG_ONE_SHOT|RT_TIMER_FLAG_HARD_TIMER);
    }

    if (timer_stack_size < 4096)
  102f30:	e51b3010 	ldr	r3, [fp, #-16]
  102f34:	e3530a01 	cmp	r3, #4096	; 0x1000
  102f38:	2a000001 	bcs	102f44 <rt_system_timer_init+0x124>
    {
        timer_stack_size = 4096;
  102f3c:	e3a03a01 	mov	r3, #4096	; 0x1000
  102f40:	e50b3010 	str	r3, [fp, #-16]
    }

    tid = rt_thread_create("u_timer", timer_thread_entry, RT_NULL,
  102f44:	e3a0300a 	mov	r3, #10
  102f48:	e58d3004 	str	r3, [sp, #4]
  102f4c:	e3a03002 	mov	r3, #2
  102f50:	e58d3000 	str	r3, [sp]
  102f54:	e51b3010 	ldr	r3, [fp, #-16]
  102f58:	e3a02000 	mov	r2, #0
  102f5c:	e3021dd0 	movw	r1, #11728	; 0x2dd0
  102f60:	e3401010 	movt	r1, #16
  102f64:	e3050490 	movw	r0, #21648	; 0x5490
  102f68:	e3400014 	movt	r0, #20
  102f6c:	ebfffc60 	bl	1020f4 <rt_thread_create>
  102f70:	e50b000c 	str	r0, [fp, #-12]
            timer_stack_size, 2, 10);
    if (tid)
  102f74:	e51b300c 	ldr	r3, [fp, #-12]
  102f78:	e3530000 	cmp	r3, #0
  102f7c:	0a000001 	beq	102f88 <rt_system_timer_init+0x168>
    {
        rt_thread_startup(tid);
  102f80:	e51b000c 	ldr	r0, [fp, #-12]
  102f84:	ebfffc8f 	bl	1021c8 <rt_thread_startup>
    }
}
  102f88:	e320f000 	nop	{0}
  102f8c:	e24bd004 	sub	sp, fp, #4
  102f90:	e8bd8800 	pop	{fp, pc}

00102f94 <rt_malloc>:
#include <stdarg.h>

#include <rtthread.h>

void *rt_malloc(rt_size_t nbytes)
{
  102f94:	e92d4800 	push	{fp, lr}
  102f98:	e28db004 	add	fp, sp, #4
  102f9c:	e24dd008 	sub	sp, sp, #8
  102fa0:	e50b0008 	str	r0, [fp, #-8]
    return malloc(nbytes);
  102fa4:	e51b0008 	ldr	r0, [fp, #-8]
  102fa8:	eb00e8e9 	bl	13d354 <malloc>
  102fac:	e1a03000 	mov	r3, r0
}
  102fb0:	e1a00003 	mov	r0, r3
  102fb4:	e24bd004 	sub	sp, fp, #4
  102fb8:	e8bd8800 	pop	{fp, pc}

00102fbc <rt_free>:

void rt_free(void *ptr)
{
  102fbc:	e92d4800 	push	{fp, lr}
  102fc0:	e28db004 	add	fp, sp, #4
  102fc4:	e24dd008 	sub	sp, sp, #8
  102fc8:	e50b0008 	str	r0, [fp, #-8]
    return free(ptr);
  102fcc:	e51b0008 	ldr	r0, [fp, #-8]
  102fd0:	eb00ea9b 	bl	13da44 <free>
}
  102fd4:	e24bd004 	sub	sp, fp, #4
  102fd8:	e8bd8800 	pop	{fp, pc}

00102fdc <rt_realloc>:

void *rt_realloc(void *ptr, rt_size_t nbytes)
{
  102fdc:	e92d4800 	push	{fp, lr}
  102fe0:	e28db004 	add	fp, sp, #4
  102fe4:	e24dd008 	sub	sp, sp, #8
  102fe8:	e50b0008 	str	r0, [fp, #-8]
  102fec:	e50b100c 	str	r1, [fp, #-12]
    return realloc(ptr, nbytes);
  102ff0:	e51b100c 	ldr	r1, [fp, #-12]
  102ff4:	e51b0008 	ldr	r0, [fp, #-8]
  102ff8:	eb00eaa0 	bl	13da80 <realloc>
  102ffc:	e1a03000 	mov	r3, r0
}
  103000:	e1a00003 	mov	r0, r3
  103004:	e24bd004 	sub	sp, fp, #4
  103008:	e8bd8800 	pop	{fp, pc}

0010300c <rt_calloc>:

void *rt_calloc(rt_size_t count, rt_size_t size)
{
  10300c:	e92d4800 	push	{fp, lr}
  103010:	e28db004 	add	fp, sp, #4
  103014:	e24dd008 	sub	sp, sp, #8
  103018:	e50b0008 	str	r0, [fp, #-8]
  10301c:	e50b100c 	str	r1, [fp, #-12]
    return calloc(count, size);
  103020:	e51b100c 	ldr	r1, [fp, #-12]
  103024:	e51b0008 	ldr	r0, [fp, #-8]
  103028:	eb00ea4e 	bl	13d968 <calloc>
  10302c:	e1a03000 	mov	r3, r0
}
  103030:	e1a00003 	mov	r0, r3
  103034:	e24bd004 	sub	sp, fp, #4
  103038:	e8bd8800 	pop	{fp, pc}

0010303c <rt_snprintf>:

rt_int32_t rt_snprintf(char *buf, rt_size_t size, const char *format, ...)
{
  10303c:	e92d000c 	push	{r2, r3}
  103040:	e92d4800 	push	{fp, lr}
  103044:	e28db004 	add	fp, sp, #4
  103048:	e24dd010 	sub	sp, sp, #16
  10304c:	e50b0010 	str	r0, [fp, #-16]
  103050:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int ret;
    va_list ap;
    va_start(ap, format);
  103054:	e28b3008 	add	r3, fp, #8
  103058:	e50b300c 	str	r3, [fp, #-12]
    ret = vsnprintf(buf, size, format, ap);
  10305c:	e51b300c 	ldr	r3, [fp, #-12]
  103060:	e59b2004 	ldr	r2, [fp, #4]
  103064:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  103068:	e51b0010 	ldr	r0, [fp, #-16]
  10306c:	eb00f6e1 	bl	140bf8 <vsnprintf>
  103070:	e50b0008 	str	r0, [fp, #-8]
    va_end(ap);
    return ret;
  103074:	e51b3008 	ldr	r3, [fp, #-8]
}
  103078:	e1a00003 	mov	r0, r3
  10307c:	e24bd004 	sub	sp, fp, #4
  103080:	e8bd4800 	pop	{fp, lr}
  103084:	e28dd008 	add	sp, sp, #8
  103088:	e12fff1e 	bx	lr

0010308c <rt_sprintf>:

rt_int32_t rt_sprintf(char *buf, const char *format, ...)
{
  10308c:	e92d000e 	push	{r1, r2, r3}
  103090:	e92d4800 	push	{fp, lr}
  103094:	e28db004 	add	fp, sp, #4
  103098:	e24dd014 	sub	sp, sp, #20
  10309c:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    int ret;
    va_list ap;
    va_start(ap, format);
  1030a0:	e28b3008 	add	r3, fp, #8
  1030a4:	e50b3010 	str	r3, [fp, #-16]
    ret = vsprintf(buf, format, ap);
  1030a8:	e51b2010 	ldr	r2, [fp, #-16]
  1030ac:	e59b1004 	ldr	r1, [fp, #4]
  1030b0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1030b4:	eb00f706 	bl	140cd4 <vsprintf>
  1030b8:	e50b000c 	str	r0, [fp, #-12]
    va_end(ap);
    return ret;
  1030bc:	e51b300c 	ldr	r3, [fp, #-12]
}
  1030c0:	e1a00003 	mov	r0, r3
  1030c4:	e24bd004 	sub	sp, fp, #4
  1030c8:	e8bd4800 	pop	{fp, lr}
  1030cc:	e28dd00c 	add	sp, sp, #12
  1030d0:	e12fff1e 	bx	lr

001030d4 <rt_vsnprintf>:

rt_int32_t rt_vsnprintf(char *buf,
    rt_size_t size,
    const char *fmt,
    va_list args)
{
  1030d4:	e92d4800 	push	{fp, lr}
  1030d8:	e28db004 	add	fp, sp, #4
  1030dc:	e24dd010 	sub	sp, sp, #16
  1030e0:	e50b0008 	str	r0, [fp, #-8]
  1030e4:	e50b100c 	str	r1, [fp, #-12]
  1030e8:	e50b2010 	str	r2, [fp, #-16]
  1030ec:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return (rt_int32_t)vsnprintf(buf, size, fmt, args);
  1030f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1030f4:	e51b2010 	ldr	r2, [fp, #-16]
  1030f8:	e51b100c 	ldr	r1, [fp, #-12]
  1030fc:	e51b0008 	ldr	r0, [fp, #-8]
  103100:	eb00f6bc 	bl	140bf8 <vsnprintf>
  103104:	e1a03000 	mov	r3, r0
}
  103108:	e1a00003 	mov	r0, r3
  10310c:	e24bd004 	sub	sp, fp, #4
  103110:	e8bd8800 	pop	{fp, pc}

00103114 <rt_kprintf>:

void rt_kprintf(const char *fmt, ...)
{
  103114:	e92d000f 	push	{r0, r1, r2, r3}
  103118:	e92d4800 	push	{fp, lr}
  10311c:	e28db004 	add	fp, sp, #4
  103120:	e24dd060 	sub	sp, sp, #96	; 0x60
    int ret;
    va_list ap;
    char buf[81];

    va_start(ap, fmt);
  103124:	e28b3008 	add	r3, fp, #8
  103128:	e50b300c 	str	r3, [fp, #-12]
    ret = vsnprintf(buf, 81, fmt, ap);
  10312c:	e24b0060 	sub	r0, fp, #96	; 0x60
  103130:	e51b300c 	ldr	r3, [fp, #-12]
  103134:	e59b2004 	ldr	r2, [fp, #4]
  103138:	e3a01051 	mov	r1, #81	; 0x51
  10313c:	eb00f6ad 	bl	140bf8 <vsnprintf>
  103140:	e50b0008 	str	r0, [fp, #-8]
    va_end(ap);
    if (ret > 0)
  103144:	e51b3008 	ldr	r3, [fp, #-8]
  103148:	e3530000 	cmp	r3, #0
  10314c:	da000004 	ble	103164 <rt_kprintf+0x50>
        printf("%s", buf);
  103150:	e24b3060 	sub	r3, fp, #96	; 0x60
  103154:	e1a01003 	mov	r1, r3
  103158:	e30504a4 	movw	r0, #21668	; 0x54a4
  10315c:	e3400014 	movt	r0, #20
  103160:	eb00ed14 	bl	13e5b8 <printf>
}
  103164:	e320f000 	nop	{0}
  103168:	e24bd004 	sub	sp, fp, #4
  10316c:	e8bd4800 	pop	{fp, lr}
  103170:	e28dd010 	add	sp, sp, #16
  103174:	e12fff1e 	bx	lr

00103178 <rt_strdup>:

char *rt_strdup(const char* s)
{
  103178:	e92d4800 	push	{fp, lr}
  10317c:	e28db004 	add	fp, sp, #4
  103180:	e24dd008 	sub	sp, sp, #8
  103184:	e50b0008 	str	r0, [fp, #-8]
    return strdup(s);
  103188:	e51b0008 	ldr	r0, [fp, #-8]
  10318c:	eb00f8bd 	bl	141488 <strdup>
  103190:	e1a03000 	mov	r3, r0
}
  103194:	e1a00003 	mov	r0, r3
  103198:	e24bd004 	sub	sp, fp, #4
  10319c:	e8bd8800 	pop	{fp, pc}

001031a0 <rt_strstr>:

char *rt_strstr(const char *s1, const char *s2)
{
  1031a0:	e92d4800 	push	{fp, lr}
  1031a4:	e28db004 	add	fp, sp, #4
  1031a8:	e24dd008 	sub	sp, sp, #8
  1031ac:	e50b0008 	str	r0, [fp, #-8]
  1031b0:	e50b100c 	str	r1, [fp, #-12]
    return strstr(s1, s2);
  1031b4:	e51b100c 	ldr	r1, [fp, #-12]
  1031b8:	e51b0008 	ldr	r0, [fp, #-8]
  1031bc:	eb00f9f8 	bl	1419a4 <strstr>
  1031c0:	e1a03000 	mov	r3, r0
}
  1031c4:	e1a00003 	mov	r0, r3
  1031c8:	e24bd004 	sub	sp, fp, #4
  1031cc:	e8bd8800 	pop	{fp, pc}

001031d0 <rt_strcmp>:

rt_int32_t rt_strcmp(const char *cs, const char *ct)
{
  1031d0:	e92d4800 	push	{fp, lr}
  1031d4:	e28db004 	add	fp, sp, #4
  1031d8:	e24dd008 	sub	sp, sp, #8
  1031dc:	e50b0008 	str	r0, [fp, #-8]
  1031e0:	e50b100c 	str	r1, [fp, #-12]
    return (rt_int32_t)strcmp(cs, ct);
  1031e4:	e51b100c 	ldr	r1, [fp, #-12]
  1031e8:	e51b0008 	ldr	r0, [fp, #-8]
  1031ec:	eb00f88f 	bl	141430 <strcmp>
  1031f0:	e1a03000 	mov	r3, r0
}
  1031f4:	e1a00003 	mov	r0, r3
  1031f8:	e24bd004 	sub	sp, fp, #4
  1031fc:	e8bd8800 	pop	{fp, pc}

00103200 <rt_strlen>:

rt_size_t rt_strlen(const char *src)
{
  103200:	e92d4800 	push	{fp, lr}
  103204:	e28db004 	add	fp, sp, #4
  103208:	e24dd008 	sub	sp, sp, #8
  10320c:	e50b0008 	str	r0, [fp, #-8]
    return strlen(src);
  103210:	e51b0008 	ldr	r0, [fp, #-8]
  103214:	eb00f8a7 	bl	1414b8 <strlen>
  103218:	e1a03000 	mov	r3, r0
}
  10321c:	e1a00003 	mov	r0, r3
  103220:	e24bd004 	sub	sp, fp, #4
  103224:	e8bd8800 	pop	{fp, pc}

00103228 <rt_strncmp>:

rt_int32_t rt_strncmp(const char *cs, const char *ct, rt_ubase_t count)
{
  103228:	e92d4800 	push	{fp, lr}
  10322c:	e28db004 	add	fp, sp, #4
  103230:	e24dd010 	sub	sp, sp, #16
  103234:	e50b0008 	str	r0, [fp, #-8]
  103238:	e50b100c 	str	r1, [fp, #-12]
  10323c:	e50b2010 	str	r2, [fp, #-16]
    return strncmp(cs, ct, count);
  103240:	e51b2010 	ldr	r2, [fp, #-16]
  103244:	e51b100c 	ldr	r1, [fp, #-12]
  103248:	e51b0008 	ldr	r0, [fp, #-8]
  10324c:	eb00f8c5 	bl	141568 <strncmp>
  103250:	e1a03000 	mov	r3, r0
}
  103254:	e1a00003 	mov	r0, r3
  103258:	e24bd004 	sub	sp, fp, #4
  10325c:	e8bd8800 	pop	{fp, pc}

00103260 <rt_strncpy>:

char *rt_strncpy(char *dest, const char *src, rt_ubase_t n)
{
  103260:	e92d4800 	push	{fp, lr}
  103264:	e28db004 	add	fp, sp, #4
  103268:	e24dd010 	sub	sp, sp, #16
  10326c:	e50b0008 	str	r0, [fp, #-8]
  103270:	e50b100c 	str	r1, [fp, #-12]
  103274:	e50b2010 	str	r2, [fp, #-16]
    return strncpy(dest, src, n);
  103278:	e51b2010 	ldr	r2, [fp, #-16]
  10327c:	e51b100c 	ldr	r1, [fp, #-12]
  103280:	e51b0008 	ldr	r0, [fp, #-8]
  103284:	eb00f8dc 	bl	1415fc <strncpy>
  103288:	e1a03000 	mov	r3, r0
}
  10328c:	e1a00003 	mov	r0, r3
  103290:	e24bd004 	sub	sp, fp, #4
  103294:	e8bd8800 	pop	{fp, pc}

00103298 <rt_strcasecmp>:

rt_uint32_t rt_strcasecmp(const char *a, const char *b)
{
  103298:	e92d4800 	push	{fp, lr}
  10329c:	e28db004 	add	fp, sp, #4
  1032a0:	e24dd008 	sub	sp, sp, #8
  1032a4:	e50b0008 	str	r0, [fp, #-8]
  1032a8:	e50b100c 	str	r1, [fp, #-12]
    return strcasecmp(a, b);
  1032ac:	e51b100c 	ldr	r1, [fp, #-12]
  1032b0:	e51b0008 	ldr	r0, [fp, #-8]
  1032b4:	eb00f835 	bl	141390 <strcasecmp>
  1032b8:	e1a03000 	mov	r3, r0
}
  1032bc:	e1a00003 	mov	r0, r3
  1032c0:	e24bd004 	sub	sp, fp, #4
  1032c4:	e8bd8800 	pop	{fp, pc}

001032c8 <rt_memset>:

void *rt_memset(void *src, int c, rt_ubase_t n)
{
  1032c8:	e92d4800 	push	{fp, lr}
  1032cc:	e28db004 	add	fp, sp, #4
  1032d0:	e24dd010 	sub	sp, sp, #16
  1032d4:	e50b0008 	str	r0, [fp, #-8]
  1032d8:	e50b100c 	str	r1, [fp, #-12]
  1032dc:	e50b2010 	str	r2, [fp, #-16]
    return memset(src, c, n);
  1032e0:	e51b2010 	ldr	r2, [fp, #-16]
  1032e4:	e51b100c 	ldr	r1, [fp, #-12]
  1032e8:	e51b0008 	ldr	r0, [fp, #-8]
  1032ec:	eb00f7e0 	bl	141274 <memset>
  1032f0:	e1a03000 	mov	r3, r0
}
  1032f4:	e1a00003 	mov	r0, r3
  1032f8:	e24bd004 	sub	sp, fp, #4
  1032fc:	e8bd8800 	pop	{fp, pc}

00103300 <rt_memcpy>:

void *rt_memcpy(void *dest, const void *src, rt_ubase_t n)
{
  103300:	e92d4800 	push	{fp, lr}
  103304:	e28db004 	add	fp, sp, #4
  103308:	e24dd010 	sub	sp, sp, #16
  10330c:	e50b0008 	str	r0, [fp, #-8]
  103310:	e50b100c 	str	r1, [fp, #-12]
  103314:	e50b2010 	str	r2, [fp, #-16]
    return memcpy(dest, src, n);
  103318:	e51b2010 	ldr	r2, [fp, #-16]
  10331c:	e51b100c 	ldr	r1, [fp, #-12]
  103320:	e51b0008 	ldr	r0, [fp, #-8]
  103324:	eb00f69a 	bl	140d94 <memcpy>
  103328:	e1a03000 	mov	r3, r0
}
  10332c:	e1a00003 	mov	r0, r3
  103330:	e24bd004 	sub	sp, fp, #4
  103334:	e8bd8800 	pop	{fp, pc}

00103338 <rt_memcmp>:

rt_int32_t rt_memcmp(const void *cs, const void *ct, rt_ubase_t count)
{
  103338:	e92d4800 	push	{fp, lr}
  10333c:	e28db004 	add	fp, sp, #4
  103340:	e24dd010 	sub	sp, sp, #16
  103344:	e50b0008 	str	r0, [fp, #-8]
  103348:	e50b100c 	str	r1, [fp, #-12]
  10334c:	e50b2010 	str	r2, [fp, #-16]
    return memcmp(cs, ct, count);
  103350:	e51b2010 	ldr	r2, [fp, #-16]
  103354:	e51b100c 	ldr	r1, [fp, #-12]
  103358:	e51b0008 	ldr	r0, [fp, #-8]
  10335c:	eb00f74b 	bl	141090 <memcmp>
  103360:	e1a03000 	mov	r3, r0
}
  103364:	e1a00003 	mov	r0, r3
  103368:	e24bd004 	sub	sp, fp, #4
  10336c:	e8bd8800 	pop	{fp, pc}

00103370 <rt_memmove>:

void *rt_memmove(void *dest, const void *src, rt_ubase_t n)
{
  103370:	e92d4800 	push	{fp, lr}
  103374:	e28db004 	add	fp, sp, #4
  103378:	e24dd010 	sub	sp, sp, #16
  10337c:	e50b0008 	str	r0, [fp, #-8]
  103380:	e50b100c 	str	r1, [fp, #-12]
  103384:	e50b2010 	str	r2, [fp, #-16]
    return memmove(dest, src, n);
  103388:	e51b2010 	ldr	r2, [fp, #-16]
  10338c:	e51b100c 	ldr	r1, [fp, #-12]
  103390:	e51b0008 	ldr	r0, [fp, #-8]
  103394:	eb00f750 	bl	1410dc <memmove>
  103398:	e1a03000 	mov	r3, r0
}
  10339c:	e1a00003 	mov	r0, r3
  1033a0:	e24bd004 	sub	sp, fp, #4
  1033a4:	e8bd8800 	pop	{fp, pc}

001033a8 <rt_tick_from_millisecond>:

rt_tick_t rt_tick_from_millisecond(rt_int32_t ms)
{
  1033a8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1033ac:	e28db000 	add	fp, sp, #0
  1033b0:	e24dd014 	sub	sp, sp, #20
  1033b4:	e50b0010 	str	r0, [fp, #-16]
    rt_tick_t tick;

    if (ms < 0)
  1033b8:	e51b3010 	ldr	r3, [fp, #-16]
  1033bc:	e3530000 	cmp	r3, #0
  1033c0:	aa000002 	bge	1033d0 <rt_tick_from_millisecond+0x28>
    {
        tick = (rt_tick_t)RT_WAITING_FOREVER;
  1033c4:	e3e03000 	mvn	r3, #0
  1033c8:	e50b3008 	str	r3, [fp, #-8]
  1033cc:	ea000021 	b	103458 <rt_tick_from_millisecond+0xb0>
    }
    else
    {
        tick = RT_TICK_PER_SECOND * (ms / 1000);
  1033d0:	e51b1010 	ldr	r1, [fp, #-16]
  1033d4:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  1033d8:	e3413062 	movt	r3, #4194	; 0x1062
  1033dc:	e0c32391 	smull	r2, r3, r1, r3
  1033e0:	e1a02343 	asr	r2, r3, #6
  1033e4:	e1a03fc1 	asr	r3, r1, #31
  1033e8:	e0423003 	sub	r3, r2, r3
  1033ec:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  1033f0:	e0030392 	mul	r3, r2, r3
  1033f4:	e50b3008 	str	r3, [fp, #-8]
        tick += (RT_TICK_PER_SECOND * (ms % 1000) + 999) / 1000;
  1033f8:	e51b2010 	ldr	r2, [fp, #-16]
  1033fc:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  103400:	e3413062 	movt	r3, #4194	; 0x1062
  103404:	e0c10392 	smull	r0, r1, r2, r3
  103408:	e1a01341 	asr	r1, r1, #6
  10340c:	e1a03fc2 	asr	r3, r2, #31
  103410:	e0413003 	sub	r3, r1, r3
  103414:	e3a01ffa 	mov	r1, #1000	; 0x3e8
  103418:	e0030391 	mul	r3, r1, r3
  10341c:	e0423003 	sub	r3, r2, r3
  103420:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  103424:	e0030392 	mul	r3, r2, r3
  103428:	e2833ff9 	add	r3, r3, #996	; 0x3e4
  10342c:	e2833003 	add	r3, r3, #3
  103430:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  103434:	e3412062 	movt	r2, #4194	; 0x1062
  103438:	e0c10293 	smull	r0, r1, r3, r2
  10343c:	e1a02341 	asr	r2, r1, #6
  103440:	e1a03fc3 	asr	r3, r3, #31
  103444:	e0423003 	sub	r3, r2, r3
  103448:	e1a02003 	mov	r2, r3
  10344c:	e51b3008 	ldr	r3, [fp, #-8]
  103450:	e0833002 	add	r3, r3, r2
  103454:	e50b3008 	str	r3, [fp, #-8]
    }

    /* return the calculated tick */
    return tick;
  103458:	e51b3008 	ldr	r3, [fp, #-8]
}
  10345c:	e1a00003 	mov	r0, r3
  103460:	e28bd000 	add	sp, fp, #0
  103464:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  103468:	e12fff1e 	bx	lr

0010346c <rt_malloc_align>:
 * @param align the alignment size
 *
 * @return the allocated memory block on successful, otherwise returns RT_NULL
 */
void *rt_malloc_align(rt_size_t size, rt_size_t align)
{
  10346c:	e92d4800 	push	{fp, lr}
  103470:	e28db004 	add	fp, sp, #4
  103474:	e24dd018 	sub	sp, sp, #24
  103478:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10347c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    void *align_ptr;
    int uintptr_size;
    rt_size_t align_size;

    /* sizeof pointer */
    uintptr_size = sizeof(void*);
  103480:	e3a03004 	mov	r3, #4
  103484:	e50b3010 	str	r3, [fp, #-16]
    uintptr_size -= 1;
  103488:	e51b3010 	ldr	r3, [fp, #-16]
  10348c:	e2433001 	sub	r3, r3, #1
  103490:	e50b3010 	str	r3, [fp, #-16]

    /* align the alignment size to uintptr size byte */
    align = ((align + uintptr_size) & ~uintptr_size);
  103494:	e51b2010 	ldr	r2, [fp, #-16]
  103498:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10349c:	e0823003 	add	r3, r2, r3
  1034a0:	e51b2010 	ldr	r2, [fp, #-16]
  1034a4:	e1e02002 	mvn	r2, r2
  1034a8:	e0033002 	and	r3, r3, r2
  1034ac:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    /* get total aligned size */
    align_size = ((size + uintptr_size) & ~uintptr_size) + align;
  1034b0:	e51b2010 	ldr	r2, [fp, #-16]
  1034b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1034b8:	e0823003 	add	r3, r2, r3
  1034bc:	e51b2010 	ldr	r2, [fp, #-16]
  1034c0:	e1e02002 	mvn	r2, r2
  1034c4:	e0033002 	and	r3, r3, r2
  1034c8:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1034cc:	e0823003 	add	r3, r2, r3
  1034d0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    /* allocate memory block from heap */
    ptr = rt_malloc(align_size);
  1034d4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1034d8:	ebfffead 	bl	102f94 <rt_malloc>
  1034dc:	e50b0008 	str	r0, [fp, #-8]
    if (ptr != RT_NULL)
  1034e0:	e51b3008 	ldr	r3, [fp, #-8]
  1034e4:	e3530000 	cmp	r3, #0
  1034e8:	0a000019 	beq	103554 <rt_malloc_align+0xe8>
    {
        /* the allocated memory block is aligned */
        if (((rt_ubase_t)ptr & (align - 1)) == 0)
  1034ec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1034f0:	e2432001 	sub	r2, r3, #1
  1034f4:	e51b3008 	ldr	r3, [fp, #-8]
  1034f8:	e0033002 	and	r3, r3, r2
  1034fc:	e3530000 	cmp	r3, #0
  103500:	1a000004 	bne	103518 <rt_malloc_align+0xac>
        {
            align_ptr = (void *)((rt_ubase_t)ptr + align);
  103504:	e51b2008 	ldr	r2, [fp, #-8]
  103508:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10350c:	e0823003 	add	r3, r2, r3
  103510:	e50b300c 	str	r3, [fp, #-12]
  103514:	ea000007 	b	103538 <rt_malloc_align+0xcc>
        }
        else
        {
            align_ptr = (void *)(((rt_ubase_t)ptr + (align - 1)) & ~(align - 1));
  103518:	e51b2008 	ldr	r2, [fp, #-8]
  10351c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  103520:	e0823003 	add	r3, r2, r3
  103524:	e2432001 	sub	r2, r3, #1
  103528:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10352c:	e2633000 	rsb	r3, r3, #0
  103530:	e0033002 	and	r3, r3, r2
  103534:	e50b300c 	str	r3, [fp, #-12]
        }

        /* set the pointer before alignment pointer to the real pointer */
        *((rt_ubase_t *)((rt_ubase_t)align_ptr - sizeof(void *))) = (rt_ubase_t)ptr;
  103538:	e51b300c 	ldr	r3, [fp, #-12]
  10353c:	e2433004 	sub	r3, r3, #4
  103540:	e1a02003 	mov	r2, r3
  103544:	e51b3008 	ldr	r3, [fp, #-8]
  103548:	e5823000 	str	r3, [r2]

        ptr = align_ptr;
  10354c:	e51b300c 	ldr	r3, [fp, #-12]
  103550:	e50b3008 	str	r3, [fp, #-8]
    }

    return ptr;
  103554:	e51b3008 	ldr	r3, [fp, #-8]
}
  103558:	e1a00003 	mov	r0, r3
  10355c:	e24bd004 	sub	sp, fp, #4
  103560:	e8bd8800 	pop	{fp, pc}

00103564 <rt_free_align>:
 * rt_malloc_align function and address is aligned.
 *
 * @param ptr the memory block pointer
 */
void rt_free_align(void *ptr)
{
  103564:	e92d4800 	push	{fp, lr}
  103568:	e28db004 	add	fp, sp, #4
  10356c:	e24dd010 	sub	sp, sp, #16
  103570:	e50b0010 	str	r0, [fp, #-16]
    void *real_ptr;

    real_ptr = (void *) * (rt_ubase_t *)((rt_ubase_t)ptr - sizeof(void *));
  103574:	e51b3010 	ldr	r3, [fp, #-16]
  103578:	e2433004 	sub	r3, r3, #4
  10357c:	e5933000 	ldr	r3, [r3]
  103580:	e50b3008 	str	r3, [fp, #-8]
    rt_free(real_ptr);
  103584:	e51b0008 	ldr	r0, [fp, #-8]
  103588:	ebfffe8b 	bl	102fbc <rt_free>
}
  10358c:	e320f000 	nop	{0}
  103590:	e24bd004 	sub	sp, fp, #4
  103594:	e8bd8800 	pop	{fp, pc}

00103598 <rt_assert_handler>:

void rt_assert_handler(const char *ex_string, const char *func, rt_size_t line)
{
  103598:	e92d4800 	push	{fp, lr}
  10359c:	e28db004 	add	fp, sp, #4
  1035a0:	e24dd010 	sub	sp, sp, #16
  1035a4:	e50b0008 	str	r0, [fp, #-8]
  1035a8:	e50b100c 	str	r1, [fp, #-12]
  1035ac:	e50b2010 	str	r2, [fp, #-16]
    printf("UserAPP: (%s) assertion failed at function:%s, line number:%d \n", ex_string, func, (int)line);
  1035b0:	e51b3010 	ldr	r3, [fp, #-16]
  1035b4:	e51b200c 	ldr	r2, [fp, #-12]
  1035b8:	e51b1008 	ldr	r1, [fp, #-8]
  1035bc:	e30504a8 	movw	r0, #21672	; 0x54a8
  1035c0:	e3400014 	movt	r0, #20
  1035c4:	eb00ebfb 	bl	13e5b8 <printf>
    exit(-1);
  1035c8:	e3e00000 	mvn	r0, #0
  1035cc:	eb00d68a 	bl	138ffc <exit>

001035d0 <channel_cmd_send>:
    /* Watch this, we use a void pointer to transfer the returned value. */
    return chn_msg.u.d;
}

rt_inline void channel_cmd_send(int channel, void *cmd)
{
  1035d0:	e92d4800 	push	{fp, lr}
  1035d4:	e28db004 	add	fp, sp, #4
  1035d8:	e24dd018 	sub	sp, sp, #24
  1035dc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1035e0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(channel >= 0);
  1035e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1035e8:	e3530000 	cmp	r3, #0
  1035ec:	aa000005 	bge	103608 <channel_cmd_send+0x38>
  1035f0:	e3a0201a 	mov	r2, #26
  1035f4:	e3051834 	movw	r1, #22580	; 0x5834
  1035f8:	e3401014 	movt	r1, #20
  1035fc:	e30504e8 	movw	r0, #21736	; 0x54e8
  103600:	e3400014 	movt	r0, #20
  103604:	ebffffe3 	bl	103598 <rt_assert_handler>

    /* wrap the command and data into an IPC message */
    struct rt_channel_msg chn_msg;
    chn_msg.type   = RT_CHANNEL_RAW;
  103608:	e3a03000 	mov	r3, #0
  10360c:	e50b3010 	str	r3, [fp, #-16]
    chn_msg.u.d    = cmd;
  103610:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  103614:	e50b300c 	str	r3, [fp, #-12]

    /* send the command and not wait for the result */
    rt_channel_send(channel, &chn_msg);
  103618:	e24b3014 	sub	r3, fp, #20
  10361c:	e1a01003 	mov	r1, r3
  103620:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  103624:	ebfff2f6 	bl	100204 <rt_channel_send>
}
  103628:	e320f000 	nop	{0}
  10362c:	e24bd004 	sub	sp, fp, #4
  103630:	e8bd8800 	pop	{fp, pc}

00103634 <channel_cmd_recv>:

rt_inline void *channel_cmd_recv(int channel)
{
  103634:	e92d4800 	push	{fp, lr}
  103638:	e28db004 	add	fp, sp, #4
  10363c:	e24dd018 	sub	sp, sp, #24
  103640:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    RT_ASSERT(channel >= 0);
  103644:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  103648:	e3530000 	cmp	r3, #0
  10364c:	aa000005 	bge	103668 <channel_cmd_recv+0x34>
  103650:	e3a02027 	mov	r2, #39	; 0x27
  103654:	e305180c 	movw	r1, #22540	; 0x580c
  103658:	e3401014 	movt	r1, #20
  10365c:	e30504e8 	movw	r0, #21736	; 0x54e8
  103660:	e3400014 	movt	r0, #20
  103664:	ebffffcb 	bl	103598 <rt_assert_handler>

    struct rt_channel_msg chn_msg;
    chn_msg.type = RT_CHANNEL_RAW;
  103668:	e3a03000 	mov	r3, #0
  10366c:	e50b3010 	str	r3, [fp, #-16]
    rt_channel_recv(channel, &chn_msg);
  103670:	e24b3014 	sub	r3, fp, #20
  103674:	e1a01003 	mov	r1, r3
  103678:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  10367c:	ebfff2fa 	bl	10026c <rt_channel_recv>

    return chn_msg.u.d;
  103680:	e51b300c 	ldr	r3, [fp, #-12]
}
  103684:	e1a00003 	mov	r0, r3
  103688:	e24bd004 	sub	sp, fp, #4
  10368c:	e8bd8800 	pop	{fp, pc}

00103690 <channel_cmd_reply>:

rt_inline void channel_cmd_reply(int channel, void *cmd)
{
  103690:	e92d4800 	push	{fp, lr}
  103694:	e28db004 	add	fp, sp, #4
  103698:	e24dd018 	sub	sp, sp, #24
  10369c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1036a0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(channel >= 0);
  1036a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1036a8:	e3530000 	cmp	r3, #0
  1036ac:	aa000005 	bge	1036c8 <channel_cmd_reply+0x38>
  1036b0:	e3a02032 	mov	r2, #50	; 0x32
  1036b4:	e3051820 	movw	r1, #22560	; 0x5820
  1036b8:	e3401014 	movt	r1, #20
  1036bc:	e30504e8 	movw	r0, #21736	; 0x54e8
  1036c0:	e3400014 	movt	r0, #20
  1036c4:	ebffffb3 	bl	103598 <rt_assert_handler>

    struct rt_channel_msg chn_msg;
    chn_msg.type = RT_CHANNEL_RAW;
  1036c8:	e3a03000 	mov	r3, #0
  1036cc:	e50b3010 	str	r3, [fp, #-16]
    chn_msg.u.d = cmd;
  1036d0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1036d4:	e50b300c 	str	r3, [fp, #-12]

    rt_channel_reply(channel, &chn_msg);
  1036d8:	e24b3014 	sub	r3, fp, #20
  1036dc:	e1a01003 	mov	r1, r3
  1036e0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1036e4:	ebfff2d3 	bl	100238 <rt_channel_reply>
}
  1036e8:	e320f000 	nop	{0}
  1036ec:	e24bd004 	sub	sp, fp, #4
  1036f0:	e8bd8800 	pop	{fp, pc}

001036f4 <stack_init>:
 *  0: initialization completes successfully, further actions can be carried on
 *  1: initialization has been done before, we could do anything but another
 *  initialization
 */
int stack_init(void)
{
  1036f4:	e92d4800 	push	{fp, lr}
  1036f8:	e28db004 	add	fp, sp, #4
    /* stack channel as a flag whether the stack has been initialized */
    stack_channel = rt_channel_open(chn_name, O_CREAT);
  1036fc:	e30d3014 	movw	r3, #53268	; 0xd014
  103700:	e3403014 	movt	r3, #20
  103704:	e5933000 	ldr	r3, [r3]
  103708:	e3a01040 	mov	r1, #64	; 0x40
  10370c:	e1a00003 	mov	r0, r3
  103710:	ebfff280 	bl	100118 <rt_channel_open>
  103714:	e1a02000 	mov	r2, r0
  103718:	e30d3010 	movw	r3, #53264	; 0xd010
  10371c:	e3403014 	movt	r3, #20
  103720:	e5832000 	str	r2, [r3]
    if (stack_channel < 0) return 1;    /* initialization has been done */
  103724:	e30d3010 	movw	r3, #53264	; 0xd010
  103728:	e3403014 	movt	r3, #20
  10372c:	e5933000 	ldr	r3, [r3]
  103730:	e3530000 	cmp	r3, #0
  103734:	aa000001 	bge	103740 <stack_init+0x4c>
  103738:	e3a03001 	mov	r3, #1
  10373c:	ea000001 	b	103748 <stack_init+0x54>
    //     printf("attach stack failed!\n");
    //     goto close_unet_channel;
    // }

    /* start the TCPIP thread */
    lwip_system_init();
  103740:	eb001be5 	bl	10a6dc <lwip_system_init>
    return 0;
  103744:	e3a03000 	mov	r3, #0
//     data_channel = -1;
// close_stack_channel:
//     rt_channel_close(stack_channel);
//     stack_channel = -1;
//     return -1;      /* initialization fails */
}
  103748:	e1a00003 	mov	r0, r3
  10374c:	e8bd8800 	pop	{fp, pc}

00103750 <stack_run>:
};
extern struct lwip_sock *lwip_tryget_socket(int s);
extern struct lwip_sock * get_socket(int s);
extern int access_is_blocking(u32_t flags, struct lwip_sock *sock);
int stack_run(void)
{
  103750:	e92d4800 	push	{fp, lr}
  103754:	e28db004 	add	fp, sp, #4
  103758:	e24dd050 	sub	sp, sp, #80	; 0x50
    // struct lwip_sock *sock = RT_NULL;

    /* run stack event loop */
    while (1)
    {
        int shmid = (int)(size_t)channel_cmd_recv(stack_channel);
  10375c:	e30d3010 	movw	r3, #53264	; 0xd010
  103760:	e3403014 	movt	r3, #20
  103764:	e5933000 	ldr	r3, [r3]
  103768:	e1a00003 	mov	r0, r3
  10376c:	ebffffb0 	bl	103634 <channel_cmd_recv>
  103770:	e1a03000 	mov	r3, r0
  103774:	e50b300c 	str	r3, [fp, #-12]
        if (shmid >= 0)
  103778:	e51b300c 	ldr	r3, [fp, #-12]
  10377c:	e3530000 	cmp	r3, #0
  103780:	ba000124 	blt	103c18 <stack_run+0x4c8>
        {
            cmd = lwp_shmat(shmid, NULL);
  103784:	e3a01000 	mov	r1, #0
  103788:	e51b000c 	ldr	r0, [fp, #-12]
  10378c:	ebfff9df 	bl	101f10 <lwp_shmat>
  103790:	e50b0010 	str	r0, [fp, #-16]
            if (!cmd)
  103794:	e51b3010 	ldr	r3, [fp, #-16]
  103798:	e3530000 	cmp	r3, #0
  10379c:	1a000002 	bne	1037ac <stack_run+0x5c>
            {
                lwp_shmrm(shmid);
  1037a0:	e51b000c 	ldr	r0, [fp, #-12]
  1037a4:	ebfff9ce 	bl	101ee4 <lwp_shmrm>
                continue;
  1037a8:	ea00011d 	b	103c24 <stack_run+0x4d4>
            }

            switch (cmd->cmd)
  1037ac:	e51b3010 	ldr	r3, [fp, #-16]
  1037b0:	e5933000 	ldr	r3, [r3]
  1037b4:	e2433014 	sub	r3, r3, #20
  1037b8:	e3530009 	cmp	r3, #9
  1037bc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  1037c0:	ea000116 	b	103c20 <stack_run+0x4d0>
  1037c4:	001037ec 	.word	0x001037ec
  1037c8:	00103c20 	.word	0x00103c20
  1037cc:	0010384c 	.word	0x0010384c
  1037d0:	001038b0 	.word	0x001038b0
  1037d4:	001038fc 	.word	0x001038fc
  1037d8:	00103960 	.word	0x00103960
  1037dc:	001039bc 	.word	0x001039bc
  1037e0:	00103ac8 	.word	0x00103ac8
  1037e4:	00103c20 	.word	0x00103c20
  1037e8:	00103b94 	.word	0x00103b94
            {
            /* handle socket requests */
            case UNET_SRV_CMD_SOCKET:
                domain = (int)(size_t)cmd->argv[0];
  1037ec:	e51b3010 	ldr	r3, [fp, #-16]
  1037f0:	e5933004 	ldr	r3, [r3, #4]
  1037f4:	e50b3044 	str	r3, [fp, #-68]	; 0xffffffbc
                type = (int)(size_t)cmd->argv[1];
  1037f8:	e51b3010 	ldr	r3, [fp, #-16]
  1037fc:	e5933008 	ldr	r3, [r3, #8]
  103800:	e50b3048 	str	r3, [fp, #-72]	; 0xffffffb8
                protocol = (int)(size_t)cmd->argv[2];
  103804:	e51b3010 	ldr	r3, [fp, #-16]
  103808:	e593300c 	ldr	r3, [r3, #12]
  10380c:	e50b304c 	str	r3, [fp, #-76]	; 0xffffffb4
                socket = socket_internal(domain, type, protocol);
  103810:	e51b204c 	ldr	r2, [fp, #-76]	; 0xffffffb4
  103814:	e51b1048 	ldr	r1, [fp, #-72]	; 0xffffffb8
  103818:	e51b0044 	ldr	r0, [fp, #-68]	; 0xffffffbc
  10381c:	eb001823 	bl	1098b0 <socket_internal>
  103820:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
                lwp_shmdt(cmd);
  103824:	e51b0010 	ldr	r0, [fp, #-16]
  103828:	ebfff9c5 	bl	101f44 <lwp_shmdt>
                channel_cmd_reply(stack_channel, (void *)(size_t)socket);
  10382c:	e30d3010 	movw	r3, #53264	; 0xd010
  103830:	e3403014 	movt	r3, #20
  103834:	e5933000 	ldr	r3, [r3]
  103838:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  10383c:	e1a01002 	mov	r1, r2
  103840:	e1a00003 	mov	r0, r3
  103844:	ebffff91 	bl	103690 <channel_cmd_reply>
                break;
  103848:	ea0000f5 	b	103c24 <stack_run+0x4d4>
            //     lwp_shmdt(cmd);
            //     channel_cmd_reply(stack_channel, (void *)(size_t)result);
            //     break;

            case UNET_SRV_CMD_BIND:
                socket = (int)(size_t)cmd->argv[0];
  10384c:	e51b3010 	ldr	r3, [fp, #-16]
  103850:	e5933004 	ldr	r3, [r3, #4]
  103854:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                psockaddr = (void *)(size_t)cmd + UNET_CMD_OFFSET;
  103858:	e51b3010 	ldr	r3, [fp, #-16]
  10385c:	e283301c 	add	r3, r3, #28
  103860:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
                len = (int)(size_t)cmd->argv[1];
  103864:	e51b3010 	ldr	r3, [fp, #-16]
  103868:	e5933008 	ldr	r3, [r3, #8]
  10386c:	e50b3040 	str	r3, [fp, #-64]	; 0xffffffc0

                result = bind_internal(socket, psockaddr, len);
  103870:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  103874:	e1a02003 	mov	r2, r3
  103878:	e51b1038 	ldr	r1, [fp, #-56]	; 0xffffffc8
  10387c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103880:	eb001768 	bl	109628 <bind_internal>
  103884:	e50b0008 	str	r0, [fp, #-8]

                lwp_shmdt(cmd);
  103888:	e51b0010 	ldr	r0, [fp, #-16]
  10388c:	ebfff9ac 	bl	101f44 <lwp_shmdt>
                channel_cmd_reply(stack_channel, (void *)(size_t)result);
  103890:	e30d3010 	movw	r3, #53264	; 0xd010
  103894:	e3403014 	movt	r3, #20
  103898:	e5933000 	ldr	r3, [r3]
  10389c:	e51b2008 	ldr	r2, [fp, #-8]
  1038a0:	e1a01002 	mov	r1, r2
  1038a4:	e1a00003 	mov	r0, r3
  1038a8:	ebffff78 	bl	103690 <channel_cmd_reply>
                break;
  1038ac:	ea0000dc 	b	103c24 <stack_run+0x4d4>

            case UNET_SRV_CMD_LISTEN:
                socket = (int)(size_t)cmd->argv[0];
  1038b0:	e51b3010 	ldr	r3, [fp, #-16]
  1038b4:	e5933004 	ldr	r3, [r3, #4]
  1038b8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

                result = listen_internal(socket, (int)(size_t)cmd->argv[1]);
  1038bc:	e51b3010 	ldr	r3, [fp, #-16]
  1038c0:	e5933008 	ldr	r3, [r3, #8]
  1038c4:	e1a01003 	mov	r1, r3
  1038c8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1038cc:	eb00178c 	bl	109704 <listen_internal>
  1038d0:	e50b0008 	str	r0, [fp, #-8]

                lwp_shmdt(cmd);
  1038d4:	e51b0010 	ldr	r0, [fp, #-16]
  1038d8:	ebfff999 	bl	101f44 <lwp_shmdt>
                channel_cmd_reply(stack_channel, (void *)(size_t)result);
  1038dc:	e30d3010 	movw	r3, #53264	; 0xd010
  1038e0:	e3403014 	movt	r3, #20
  1038e4:	e5933000 	ldr	r3, [r3]
  1038e8:	e51b2008 	ldr	r2, [fp, #-8]
  1038ec:	e1a01002 	mov	r1, r2
  1038f0:	e1a00003 	mov	r0, r3
  1038f4:	ebffff65 	bl	103690 <channel_cmd_reply>
                break;
  1038f8:	ea0000c9 	b	103c24 <stack_run+0x4d4>

            case UNET_SRV_CMD_CONNECT:
                socket = (int)(size_t)cmd->argv[0];
  1038fc:	e51b3010 	ldr	r3, [fp, #-16]
  103900:	e5933004 	ldr	r3, [r3, #4]
  103904:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                psockaddr = (void *)(size_t)cmd + UNET_CMD_OFFSET;
  103908:	e51b3010 	ldr	r3, [fp, #-16]
  10390c:	e283301c 	add	r3, r3, #28
  103910:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
                len = (int)(size_t)cmd->argv[1];
  103914:	e51b3010 	ldr	r3, [fp, #-16]
  103918:	e5933008 	ldr	r3, [r3, #8]
  10391c:	e50b3040 	str	r3, [fp, #-64]	; 0xffffffc0

                result = connect_internal(socket, psockaddr, len);
  103920:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  103924:	e1a02003 	mov	r2, r3
  103928:	e51b1038 	ldr	r1, [fp, #-56]	; 0xffffffc8
  10392c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103930:	eb00174d 	bl	10966c <connect_internal>
  103934:	e50b0008 	str	r0, [fp, #-8]

                lwp_shmdt(cmd);
  103938:	e51b0010 	ldr	r0, [fp, #-16]
  10393c:	ebfff980 	bl	101f44 <lwp_shmdt>
                channel_cmd_reply(stack_channel, (void *)(size_t)result);
  103940:	e30d3010 	movw	r3, #53264	; 0xd010
  103944:	e3403014 	movt	r3, #20
  103948:	e5933000 	ldr	r3, [r3]
  10394c:	e51b2008 	ldr	r2, [fp, #-8]
  103950:	e1a01002 	mov	r1, r2
  103954:	e1a00003 	mov	r0, r3
  103958:	ebffff4c 	bl	103690 <channel_cmd_reply>
                break;
  10395c:	ea0000b0 	b	103c24 <stack_run+0x4d4>

            case UNET_SRV_CMD_ACCEPT:
                socket = (int)(size_t)cmd->argv[0];
  103960:	e51b3010 	ldr	r3, [fp, #-16]
  103964:	e5933004 	ldr	r3, [r3, #4]
  103968:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                psockaddr = (void *)(size_t)cmd + UNET_CMD_OFFSET;
  10396c:	e51b3010 	ldr	r3, [fp, #-16]
  103970:	e283301c 	add	r3, r3, #28
  103974:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
                result = accept_internal(socket, psockaddr, (socklen_t *)&cmd->argv[1]);
  103978:	e51b3010 	ldr	r3, [fp, #-16]
  10397c:	e2833008 	add	r3, r3, #8
  103980:	e1a02003 	mov	r2, r3
  103984:	e51b1038 	ldr	r1, [fp, #-56]	; 0xffffffc8
  103988:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  10398c:	eb0016bd 	bl	109488 <accept_internal>
  103990:	e50b0008 	str	r0, [fp, #-8]
                lwp_shmdt(cmd);
  103994:	e51b0010 	ldr	r0, [fp, #-16]
  103998:	ebfff969 	bl	101f44 <lwp_shmdt>
                channel_cmd_reply(stack_channel, (void *)(size_t)result);
  10399c:	e30d3010 	movw	r3, #53264	; 0xd010
  1039a0:	e3403014 	movt	r3, #20
  1039a4:	e5933000 	ldr	r3, [r3]
  1039a8:	e51b2008 	ldr	r2, [fp, #-8]
  1039ac:	e1a01002 	mov	r1, r2
  1039b0:	e1a00003 	mov	r0, r3
  1039b4:	ebffff35 	bl	103690 <channel_cmd_reply>
                break;
  1039b8:	ea000099 	b	103c24 <stack_run+0x4d4>

            case UNET_SRV_CMD_SENDTO:
                socket = (int)(size_t)cmd->argv[0];
  1039bc:	e51b3010 	ldr	r3, [fp, #-16]
  1039c0:	e5933004 	ldr	r3, [r3, #4]
  1039c4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                size = (size_t)cmd->argv[1];
  1039c8:	e51b3010 	ldr	r3, [fp, #-16]
  1039cc:	e5933008 	ldr	r3, [r3, #8]
  1039d0:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
                flags = (int)(size_t)cmd->argv[2];
  1039d4:	e51b3010 	ldr	r3, [fp, #-16]
  1039d8:	e593300c 	ldr	r3, [r3, #12]
  1039dc:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
                tolen = (int)(size_t)cmd->argv[3];
  1039e0:	e51b3010 	ldr	r3, [fp, #-16]
  1039e4:	e5933010 	ldr	r3, [r3, #16]
  1039e8:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
                data = (void *)(size_t)cmd + UNET_CMD_OFFSET;
  1039ec:	e51b3010 	ldr	r3, [fp, #-16]
  1039f0:	e283301c 	add	r3, r3, #28
  1039f4:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc

                lwip_send_count++;
  1039f8:	e30d3424 	movw	r3, #54308	; 0xd424
  1039fc:	e3403014 	movt	r3, #20
  103a00:	e5933000 	ldr	r3, [r3]
  103a04:	e2832001 	add	r2, r3, #1
  103a08:	e30d3424 	movw	r3, #54308	; 0xd424
  103a0c:	e3403014 	movt	r3, #20
  103a10:	e5832000 	str	r2, [r3]
                if(tolen  == 0)
  103a14:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  103a18:	e3530000 	cmp	r3, #0
  103a1c:	1a000006 	bne	103a3c <stack_run+0x2ec>
                {
                    result = send_internal(socket, data, size, flags);
  103a20:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103a24:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  103a28:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  103a2c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103a30:	eb001770 	bl	1097f8 <send_internal>
  103a34:	e50b0008 	str	r0, [fp, #-8]
  103a38:	ea00000f 	b	103a7c <stack_run+0x32c>
                }
                else
                {
                    psockaddr = (void *)(size_t)cmd + UNET_CMD_OFFSET + size;
  103a3c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  103a40:	e283301c 	add	r3, r3, #28
  103a44:	e51b2010 	ldr	r2, [fp, #-16]
  103a48:	e0823003 	add	r3, r2, r3
  103a4c:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
                    result = sendto_internal(socket, data, size, flags, psockaddr, tolen);
  103a50:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  103a54:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  103a58:	e58d3004 	str	r3, [sp, #4]
  103a5c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  103a60:	e58d3000 	str	r3, [sp]
  103a64:	e1a03002 	mov	r3, r2
  103a68:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  103a6c:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  103a70:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103a74:	eb001776 	bl	109854 <sendto_internal>
  103a78:	e50b0008 	str	r0, [fp, #-8]
                }
                if(result <= 0)
  103a7c:	e51b3008 	ldr	r3, [fp, #-8]
  103a80:	e3530000 	cmp	r3, #0
  103a84:	ca000005 	bgt	103aa0 <stack_run+0x350>
                {
                    rt_kprintf("%s line %d sendto error\n",__func__,__LINE__);
  103a88:	e3a02f53 	mov	r2, #332	; 0x14c
  103a8c:	e3051800 	movw	r1, #22528	; 0x5800
  103a90:	e3401014 	movt	r1, #20
  103a94:	e3050508 	movw	r0, #21768	; 0x5508
  103a98:	e3400014 	movt	r0, #20
  103a9c:	ebfffd9c 	bl	103114 <rt_kprintf>
                }
                lwp_shmdt(cmd);
  103aa0:	e51b0010 	ldr	r0, [fp, #-16]
  103aa4:	ebfff926 	bl	101f44 <lwp_shmdt>
                channel_cmd_reply(stack_channel, (void *)(size_t)result);
  103aa8:	e30d3010 	movw	r3, #53264	; 0xd010
  103aac:	e3403014 	movt	r3, #20
  103ab0:	e5933000 	ldr	r3, [r3]
  103ab4:	e51b2008 	ldr	r2, [fp, #-8]
  103ab8:	e1a01002 	mov	r1, r2
  103abc:	e1a00003 	mov	r0, r3
  103ac0:	ebfffef2 	bl	103690 <channel_cmd_reply>
                break;
  103ac4:	ea000056 	b	103c24 <stack_run+0x4d4>

            case UNET_SRV_CMD_RECVFROM:
                socket = (int)(size_t)cmd->argv[0];
  103ac8:	e51b3010 	ldr	r3, [fp, #-16]
  103acc:	e5933004 	ldr	r3, [r3, #4]
  103ad0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                size = (size_t)cmd->argv[1];
  103ad4:	e51b3010 	ldr	r3, [fp, #-16]
  103ad8:	e5933008 	ldr	r3, [r3, #8]
  103adc:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
                flags = (int)(size_t)cmd->argv[2];
  103ae0:	e51b3010 	ldr	r3, [fp, #-16]
  103ae4:	e593300c 	ldr	r3, [r3, #12]
  103ae8:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
                fromlen = (socklen_t*)cmd->argv[3];
  103aec:	e51b3010 	ldr	r3, [fp, #-16]
  103af0:	e5933010 	ldr	r3, [r3, #16]
  103af4:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
                data = (void *)(size_t)cmd + UNET_CMD_OFFSET;
  103af8:	e51b3010 	ldr	r3, [fp, #-16]
  103afc:	e283301c 	add	r3, r3, #28
  103b00:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc

                if(fromlen == RT_NULL)
  103b04:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  103b08:	e3530000 	cmp	r3, #0
  103b0c:	1a000006 	bne	103b2c <stack_run+0x3dc>
                {
                    result = recv_internal(socket, data, size, flags);
  103b10:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103b14:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  103b18:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  103b1c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103b20:	eb001706 	bl	109740 <recv_internal>
  103b24:	e50b0008 	str	r0, [fp, #-8]
  103b28:	ea00000f 	b	103b6c <stack_run+0x41c>
                }
                else
                {
                    psockaddr =  (void *)(size_t)cmd + UNET_CMD_OFFSET + size;
  103b2c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  103b30:	e283301c 	add	r3, r3, #28
  103b34:	e51b2010 	ldr	r2, [fp, #-16]
  103b38:	e0823003 	add	r3, r2, r3
  103b3c:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
                    result = recvfrom_internal(socket, data, size, flags , psockaddr, fromlen);
  103b40:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  103b44:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  103b48:	e58d3004 	str	r3, [sp, #4]
  103b4c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  103b50:	e58d3000 	str	r3, [sp]
  103b54:	e1a03002 	mov	r3, r2
  103b58:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  103b5c:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  103b60:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103b64:	eb00170c 	bl	10979c <recvfrom_internal>
  103b68:	e50b0008 	str	r0, [fp, #-8]
                }

                lwp_shmdt(cmd);
  103b6c:	e51b0010 	ldr	r0, [fp, #-16]
  103b70:	ebfff8f3 	bl	101f44 <lwp_shmdt>
                channel_cmd_reply(stack_channel, (void *)(size_t)result);
  103b74:	e30d3010 	movw	r3, #53264	; 0xd010
  103b78:	e3403014 	movt	r3, #20
  103b7c:	e5933000 	ldr	r3, [r3]
  103b80:	e51b2008 	ldr	r2, [fp, #-8]
  103b84:	e1a01002 	mov	r1, r2
  103b88:	e1a00003 	mov	r0, r3
  103b8c:	ebfffebf 	bl	103690 <channel_cmd_reply>
                break;
  103b90:	ea000023 	b	103c24 <stack_run+0x4d4>
            //     channel_cmd_reply(stack_channel, (void *)(size_t)result);
            //     break;

            case UNET_SRV_CMD_SETSOCKOPT:
            {
                socket = (int)(size_t)cmd->argv[0];
  103b94:	e51b3010 	ldr	r3, [fp, #-16]
  103b98:	e5933004 	ldr	r3, [r3, #4]
  103b9c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                int level = (int)(size_t)cmd->argv[1];
  103ba0:	e51b3010 	ldr	r3, [fp, #-16]
  103ba4:	e5933008 	ldr	r3, [r3, #8]
  103ba8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
                int opt = (int)(size_t)cmd->argv[2];
  103bac:	e51b3010 	ldr	r3, [fp, #-16]
  103bb0:	e593300c 	ldr	r3, [r3, #12]
  103bb4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
                socklen = (socklen_t)(size_t)cmd->argv[3];
  103bb8:	e51b3010 	ldr	r3, [fp, #-16]
  103bbc:	e5933010 	ldr	r3, [r3, #16]
  103bc0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
                void *optval =  (void *)(size_t)cmd + UNET_CMD_OFFSET;
  103bc4:	e51b3010 	ldr	r3, [fp, #-16]
  103bc8:	e283301c 	add	r3, r3, #28
  103bcc:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc

                result = setsockopt_internal(socket, level, opt, optval, socklen);
  103bd0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  103bd4:	e58d3000 	str	r3, [sp]
  103bd8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  103bdc:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  103be0:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  103be4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103be8:	eb0016b0 	bl	1096b0 <setsockopt_internal>
  103bec:	e50b0008 	str	r0, [fp, #-8]

                lwp_shmdt(cmd);
  103bf0:	e51b0010 	ldr	r0, [fp, #-16]
  103bf4:	ebfff8d2 	bl	101f44 <lwp_shmdt>
                channel_cmd_reply(stack_channel, (void *)(size_t)result);
  103bf8:	e30d3010 	movw	r3, #53264	; 0xd010
  103bfc:	e3403014 	movt	r3, #20
  103c00:	e5933000 	ldr	r3, [r3]
  103c04:	e51b2008 	ldr	r2, [fp, #-8]
  103c08:	e1a01002 	mov	r1, r2
  103c0c:	e1a00003 	mov	r0, r3
  103c10:	ebfffe9e 	bl	103690 <channel_cmd_reply>
                break;
  103c14:	ea000002 	b	103c24 <stack_run+0x4d4>
    //             break;

            default :
                break;
            }
        }
  103c18:	e320f000 	nop	{0}
  103c1c:	eafffece 	b	10375c <stack_run+0xc>
                break;
  103c20:	e320f000 	nop	{0}
    {
  103c24:	eafffecc 	b	10375c <stack_run+0xc>

00103c28 <lwipkit_status>:

    return 0;
}

static void lwipkit_status(void)
{
  103c28:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  103c2c:	e28db000 	add	fp, sp, #0
}
  103c30:	e320f000 	nop	{0}
  103c34:	e28bd000 	add	sp, fp, #0
  103c38:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  103c3c:	e12fff1e 	bx	lr

00103c40 <lwipkit_usage>:

/* lwIPKit initialization should be done once at most */
static void lwipkit_usage(void)
{
  103c40:	e92d4800 	push	{fp, lr}
  103c44:	e28db004 	add	fp, sp, #4
    printf("lwIPKit Usage:\n"
  103c48:	e3050524 	movw	r0, #21796	; 0x5524
  103c4c:	e3400014 	movt	r0, #20
  103c50:	eb00ea66 	bl	13e5f0 <puts>
            "\tlwIPKit               :  run lwIPKit, wait for ethdev to attach\n"
            "\tlwIPKit attach   <eth>:  attach the device <eth> to lwIPKit\n"
            "\tlwIPKit deattach <eth>:  de-attach the device <eth> from lwIPKit\n"
            "\tlwIPKit default  <eth>:  set <eth> as the default device\n"
            "\tlwIPKit status        :  show the status of running lwIPKIt\n");
}
  103c54:	e320f000 	nop	{0}
  103c58:	e8bd8800 	pop	{fp, pc}

00103c5c <main>:

/* entry point */
extern void sal_init(void);
extern int dfs_init(void);
int main(int argc, char **argv)
{
  103c5c:	e92d4810 	push	{r4, fp, lr}
  103c60:	e28db008 	add	fp, sp, #8
  103c64:	e24dd034 	sub	sp, sp, #52	; 0x34
  103c68:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  103c6c:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
    int initialized = 0;
  103c70:	e3a03000 	mov	r3, #0
  103c74:	e50b3010 	str	r3, [fp, #-16]

    int data_channel = -1;  /* local variable, not the global one */
  103c78:	e3e03000 	mvn	r3, #0
  103c7c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    int shmid = -1;
  103c80:	e3e03000 	mvn	r3, #0
  103c84:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    struct channel_cmd *cmd = NULL;
  103c88:	e3a03000 	mov	r3, #0
  103c8c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    /* no arguments, we want to run lwIPKit as a server */
    if (argc < 2)
  103c90:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  103c94:	e3530001 	cmp	r3, #1
  103c98:	ca000035 	bgt	103d74 <main+0x118>
    {        
        printf("lwIPKit: starts to run as the server");
  103c9c:	e305066c 	movw	r0, #22124	; 0x566c
  103ca0:	e3400014 	movt	r0, #20
  103ca4:	eb00ea43 	bl	13e5b8 <printf>
        initialized = stack_init();
  103ca8:	ebfffe91 	bl	1036f4 <stack_init>
  103cac:	e50b0010 	str	r0, [fp, #-16]
        if (initialized < 0)
  103cb0:	e51b3010 	ldr	r3, [fp, #-16]
  103cb4:	e3530000 	cmp	r3, #0
  103cb8:	aa000004 	bge	103cd0 <main+0x74>
        {
            printf(" ...failed!\n");
  103cbc:	e3050694 	movw	r0, #22164	; 0x5694
  103cc0:	e3400014 	movt	r0, #20
  103cc4:	eb00ea49 	bl	13e5f0 <puts>
            return -1;
  103cc8:	e3e03000 	mvn	r3, #0
  103ccc:	ea0000f7 	b	1040b0 <main+0x454>
        }
        else if (initialized > 0)   /* valid lwIPKit process exists */
  103cd0:	e51b3010 	ldr	r3, [fp, #-16]
  103cd4:	e3530000 	cmp	r3, #0
  103cd8:	da000004 	ble	103cf0 <main+0x94>
        {
            printf(" ...skipped! Already initialized\n");
  103cdc:	e30506a0 	movw	r0, #22176	; 0x56a0
  103ce0:	e3400014 	movt	r0, #20
  103ce4:	eb00ea41 	bl	13e5f0 <puts>
            return 0;
  103ce8:	e3a03000 	mov	r3, #0
  103cec:	ea0000ef 	b	1040b0 <main+0x454>
        }
        else
        {
            // netdev_list_init();
            printf(" ...succeeded!\n");
  103cf0:	e30506c4 	movw	r0, #22212	; 0x56c4
  103cf4:	e3400014 	movt	r0, #20
  103cf8:	eb00ea3c 	bl	13e5f0 <puts>

            // rt_thread_t tid = rt_thread_create("ipdata", stack_data_input, NULL, 8192,
            //     25, 10);            /* handle the input data */
            // if (tid) rt_thread_startup(tid);

            printf("lwIPKit: init eth dev...");
  103cfc:	e30506d4 	movw	r0, #22228	; 0x56d4
  103d00:	e3400014 	movt	r0, #20
  103d04:	eb00ea2b 	bl	13e5b8 <printf>
            const char * eth_name;
            initialized = imx6ul_eth_init(0, &eth_name);
  103d08:	e24b3024 	sub	r3, fp, #36	; 0x24
  103d0c:	e1a01003 	mov	r1, r3
  103d10:	e3a00000 	mov	r0, #0
  103d14:	eb00c6b1 	bl	1357e0 <imx6ul_eth_init>
  103d18:	e50b0010 	str	r0, [fp, #-16]
            if (initialized < 0)
  103d1c:	e51b3010 	ldr	r3, [fp, #-16]
  103d20:	e3530000 	cmp	r3, #0
  103d24:	aa000004 	bge	103d3c <main+0xe0>
            {
                printf(" ...failed!\n");
  103d28:	e3050694 	movw	r0, #22164	; 0x5694
  103d2c:	e3400014 	movt	r0, #20
  103d30:	eb00ea2e 	bl	13e5f0 <puts>
                return -1;
  103d34:	e3e03000 	mvn	r3, #0
  103d38:	ea0000dc 	b	1040b0 <main+0x454>
            }
            else if (initialized > 0)   /* valid lwIPKit process exists */
  103d3c:	e51b3010 	ldr	r3, [fp, #-16]
  103d40:	e3530000 	cmp	r3, #0
  103d44:	da000004 	ble	103d5c <main+0x100>
            {
                printf(" ...skipped! Already initialized\n");
  103d48:	e30506a0 	movw	r0, #22176	; 0x56a0
  103d4c:	e3400014 	movt	r0, #20
  103d50:	eb00ea26 	bl	13e5f0 <puts>
                return 0;
  103d54:	e3a03000 	mov	r3, #0
  103d58:	ea0000d4 	b	1040b0 <main+0x454>
            } 
            else 
            {
                printf("succeeded\n");
  103d5c:	e30506f0 	movw	r0, #22256	; 0x56f0
  103d60:	e3400014 	movt	r0, #20
  103d64:	eb00ea21 	bl	13e5f0 <puts>
                dfs_init();
  103d68:	eb001730 	bl	109a30 <dfs_init>
                sal_init();
  103d6c:	eb000c20 	bl	106df4 <sal_init>
                // netdev_init(eth_name);
            }

            stack_run();            /* handle network requests, never return */
  103d70:	ebfffe76 	bl	103750 <stack_run>
        }
    }

    /* attach the device */
    if (argc >= 3 && strncmp(argv[1], "attach", 6) == 0)
  103d74:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  103d78:	e3530002 	cmp	r3, #2
  103d7c:	da000050 	ble	103ec4 <main+0x268>
  103d80:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103d84:	e2833004 	add	r3, r3, #4
  103d88:	e5933000 	ldr	r3, [r3]
  103d8c:	e3a02006 	mov	r2, #6
  103d90:	e30516fc 	movw	r1, #22268	; 0x56fc
  103d94:	e3401014 	movt	r1, #20
  103d98:	e1a00003 	mov	r0, r3
  103d9c:	eb00f5f1 	bl	141568 <strncmp>
  103da0:	e1a03000 	mov	r3, r0
  103da4:	e3530000 	cmp	r3, #0
  103da8:	1a000045 	bne	103ec4 <main+0x268>
    {
        int static_ip = 0;
  103dac:	e3a03000 	mov	r3, #0
  103db0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
        printf("lwIPKit: attach device %s\n", argv[2]);
  103db4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103db8:	e2833008 	add	r3, r3, #8
  103dbc:	e5933000 	ldr	r3, [r3]
  103dc0:	e1a01003 	mov	r1, r3
  103dc4:	e3050704 	movw	r0, #22276	; 0x5704
  103dc8:	e3400014 	movt	r0, #20
  103dcc:	eb00e9f9 	bl	13e5b8 <printf>

        data_channel = rt_channel_open(data_name, O_RDWR);
  103dd0:	e30d3018 	movw	r3, #53272	; 0xd018
  103dd4:	e3403014 	movt	r3, #20
  103dd8:	e5933000 	ldr	r3, [r3]
  103ddc:	e3a01002 	mov	r1, #2
  103de0:	e1a00003 	mov	r0, r3
  103de4:	ebfff0cb 	bl	100118 <rt_channel_open>
  103de8:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
        if (data_channel < 0)
  103dec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103df0:	e3530000 	cmp	r3, #0
  103df4:	aa000004 	bge	103e0c <main+0x1b0>
        {
            printf("cannot open data_channel, please make sure lwIPKit server is running!\n");
  103df8:	e3050720 	movw	r0, #22304	; 0x5720
  103dfc:	e3400014 	movt	r0, #20
  103e00:	eb00e9fa 	bl	13e5f0 <puts>
            return -1;
  103e04:	e3e03000 	mvn	r3, #0
  103e08:	ea0000a8 	b	1040b0 <main+0x454>
        }

        shmid = channel_compose_cmd1(UNET_NETDEV_REQ_ATTACH, (void *)(size_t)static_ip, strlen(argv[2]) + 1);
  103e0c:	e51b4020 	ldr	r4, [fp, #-32]	; 0xffffffe0
  103e10:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103e14:	e2833008 	add	r3, r3, #8
  103e18:	e5933000 	ldr	r3, [r3]
  103e1c:	e1a00003 	mov	r0, r3
  103e20:	eb00f5a4 	bl	1414b8 <strlen>
  103e24:	e1a03000 	mov	r3, r0
  103e28:	e2833001 	add	r3, r3, #1
  103e2c:	e58d300c 	str	r3, [sp, #12]
  103e30:	e3a03000 	mov	r3, #0
  103e34:	e58d3008 	str	r3, [sp, #8]
  103e38:	e3a03000 	mov	r3, #0
  103e3c:	e58d3004 	str	r3, [sp, #4]
  103e40:	e3a03000 	mov	r3, #0
  103e44:	e58d3000 	str	r3, [sp]
  103e48:	e3a03000 	mov	r3, #0
  103e4c:	e3a02000 	mov	r2, #0
  103e50:	e1a01004 	mov	r1, r4
  103e54:	e3a00065 	mov	r0, #101	; 0x65
  103e58:	eb000097 	bl	1040bc <channel_compose_cmd>
  103e5c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
        cmd = (struct channel_cmd*)lwp_shmat(shmid, NULL);
  103e60:	e3a01000 	mov	r1, #0
  103e64:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  103e68:	ebfff828 	bl	101f10 <lwp_shmat>
  103e6c:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
        if (cmd)
  103e70:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  103e74:	e3530000 	cmp	r3, #0
  103e78:	0a000009 	beq	103ea4 <main+0x248>
        {
            strcpy(CHANNEL_CMD_DATA(cmd), argv[2]);
  103e7c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  103e80:	e283201c 	add	r2, r3, #28
  103e84:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103e88:	e2833008 	add	r3, r3, #8
  103e8c:	e5933000 	ldr	r3, [r3]
  103e90:	e1a01003 	mov	r1, r3
  103e94:	e1a00002 	mov	r0, r2
  103e98:	eb00f575 	bl	141474 <strcpy>
            lwp_shmdt(cmd);
  103e9c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  103ea0:	ebfff827 	bl	101f44 <lwp_shmdt>
        }
        channel_cmd_send(data_channel, (void *)(size_t)shmid);
  103ea4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  103ea8:	e1a01003 	mov	r1, r3
  103eac:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103eb0:	ebfffdc6 	bl	1035d0 <channel_cmd_send>
        rt_channel_close(data_channel);
  103eb4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103eb8:	ebfff0a3 	bl	10014c <rt_channel_close>

        return 0;
  103ebc:	e3a03000 	mov	r3, #0
  103ec0:	ea00007a 	b	1040b0 <main+0x454>
    }

    /* deattach the device and restore it to the uninitialized state */
    if (argc == 3)
  103ec4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  103ec8:	e3530003 	cmp	r3, #3
  103ecc:	1a000061 	bne	104058 <main+0x3fc>
    {
        if (strncmp(argv[1], "deattach", 8) == 0)
  103ed0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103ed4:	e2833004 	add	r3, r3, #4
  103ed8:	e5933000 	ldr	r3, [r3]
  103edc:	e3a02008 	mov	r2, #8
  103ee0:	e3051768 	movw	r1, #22376	; 0x5768
  103ee4:	e3401014 	movt	r1, #20
  103ee8:	e1a00003 	mov	r0, r3
  103eec:	eb00f59d 	bl	141568 <strncmp>
  103ef0:	e1a03000 	mov	r3, r0
  103ef4:	e3530000 	cmp	r3, #0
  103ef8:	1a000042 	bne	104008 <main+0x3ac>
        {
            printf("lwIPKit: de-attach device %s\n", argv[2]);
  103efc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103f00:	e2833008 	add	r3, r3, #8
  103f04:	e5933000 	ldr	r3, [r3]
  103f08:	e1a01003 	mov	r1, r3
  103f0c:	e3050774 	movw	r0, #22388	; 0x5774
  103f10:	e3400014 	movt	r0, #20
  103f14:	eb00e9a7 	bl	13e5b8 <printf>

            data_channel = rt_channel_open(data_name, O_RDWR);
  103f18:	e30d3018 	movw	r3, #53272	; 0xd018
  103f1c:	e3403014 	movt	r3, #20
  103f20:	e5933000 	ldr	r3, [r3]
  103f24:	e3a01002 	mov	r1, #2
  103f28:	e1a00003 	mov	r0, r3
  103f2c:	ebfff079 	bl	100118 <rt_channel_open>
  103f30:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
            if (data_channel < 0)
  103f34:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103f38:	e3530000 	cmp	r3, #0
  103f3c:	aa000004 	bge	103f54 <main+0x2f8>
            {
                printf("cannot open data_channel, please make sure lwIPKit server is running!\n");
  103f40:	e3050720 	movw	r0, #22304	; 0x5720
  103f44:	e3400014 	movt	r0, #20
  103f48:	eb00e9a8 	bl	13e5f0 <puts>
                return -1;
  103f4c:	e3e03000 	mvn	r3, #0
  103f50:	ea000056 	b	1040b0 <main+0x454>
            }

            shmid = channel_compose_cmd0(UNET_NETDEV_REQ_DETACH, strlen(argv[2]) + 1);
  103f54:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103f58:	e2833008 	add	r3, r3, #8
  103f5c:	e5933000 	ldr	r3, [r3]
  103f60:	e1a00003 	mov	r0, r3
  103f64:	eb00f553 	bl	1414b8 <strlen>
  103f68:	e1a03000 	mov	r3, r0
  103f6c:	e2833001 	add	r3, r3, #1
  103f70:	e58d300c 	str	r3, [sp, #12]
  103f74:	e3a03000 	mov	r3, #0
  103f78:	e58d3008 	str	r3, [sp, #8]
  103f7c:	e3a03000 	mov	r3, #0
  103f80:	e58d3004 	str	r3, [sp, #4]
  103f84:	e3a03000 	mov	r3, #0
  103f88:	e58d3000 	str	r3, [sp]
  103f8c:	e3a03000 	mov	r3, #0
  103f90:	e3a02000 	mov	r2, #0
  103f94:	e3a01000 	mov	r1, #0
  103f98:	e3a00066 	mov	r0, #102	; 0x66
  103f9c:	eb000046 	bl	1040bc <channel_compose_cmd>
  103fa0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
            cmd = (struct channel_cmd*)lwp_shmat(shmid, NULL);
  103fa4:	e3a01000 	mov	r1, #0
  103fa8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  103fac:	ebfff7d7 	bl	101f10 <lwp_shmat>
  103fb0:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
            if (cmd)
  103fb4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  103fb8:	e3530000 	cmp	r3, #0
  103fbc:	0a000009 	beq	103fe8 <main+0x38c>
            {
                strcpy(CHANNEL_CMD_DATA(cmd), argv[2]);
  103fc0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  103fc4:	e283201c 	add	r2, r3, #28
  103fc8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103fcc:	e2833008 	add	r3, r3, #8
  103fd0:	e5933000 	ldr	r3, [r3]
  103fd4:	e1a01003 	mov	r1, r3
  103fd8:	e1a00002 	mov	r0, r2
  103fdc:	eb00f524 	bl	141474 <strcpy>
                lwp_shmdt(cmd);
  103fe0:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  103fe4:	ebfff7d6 	bl	101f44 <lwp_shmdt>
            }
            channel_cmd_send(data_channel, (void *)(size_t)shmid);
  103fe8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  103fec:	e1a01003 	mov	r1, r3
  103ff0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103ff4:	ebfffd75 	bl	1035d0 <channel_cmd_send>
            rt_channel_close(data_channel);
  103ff8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103ffc:	ebfff052 	bl	10014c <rt_channel_close>

            return 0;
  104000:	e3a03000 	mov	r3, #0
  104004:	ea000029 	b	1040b0 <main+0x454>
        }


        if (strncmp(argv[1], "default", 8) == 0)
  104008:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10400c:	e2833004 	add	r3, r3, #4
  104010:	e5933000 	ldr	r3, [r3]
  104014:	e3a02008 	mov	r2, #8
  104018:	e3051794 	movw	r1, #22420	; 0x5794
  10401c:	e3401014 	movt	r1, #20
  104020:	e1a00003 	mov	r0, r3
  104024:	eb00f54f 	bl	141568 <strncmp>
  104028:	e1a03000 	mov	r3, r0
  10402c:	e3530000 	cmp	r3, #0
  104030:	1a000008 	bne	104058 <main+0x3fc>
        {
            printf("lwIPKit: set the default device %s", argv[2]);
  104034:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  104038:	e2833008 	add	r3, r3, #8
  10403c:	e5933000 	ldr	r3, [r3]
  104040:	e1a01003 	mov	r1, r3
  104044:	e305079c 	movw	r0, #22428	; 0x579c
  104048:	e3400014 	movt	r0, #20
  10404c:	eb00e959 	bl	13e5b8 <printf>
            //eth_set_default(argv[2]);
            return 0;
  104050:	e3a03000 	mov	r3, #0
  104054:	ea000015 	b	1040b0 <main+0x454>
        }
    }

    /* show the status */
    if (argc == 2 && strncmp(argv[1], "status", 6) == 0)
  104058:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10405c:	e3530002 	cmp	r3, #2
  104060:	1a000010 	bne	1040a8 <main+0x44c>
  104064:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  104068:	e2833004 	add	r3, r3, #4
  10406c:	e5933000 	ldr	r3, [r3]
  104070:	e3a02006 	mov	r2, #6
  104074:	e30517c0 	movw	r1, #22464	; 0x57c0
  104078:	e3401014 	movt	r1, #20
  10407c:	e1a00003 	mov	r0, r3
  104080:	eb00f538 	bl	141568 <strncmp>
  104084:	e1a03000 	mov	r3, r0
  104088:	e3530000 	cmp	r3, #0
  10408c:	1a000005 	bne	1040a8 <main+0x44c>
    {
        printf("lwIPKit: the status of the attached devices as follows\n");
  104090:	e30507c8 	movw	r0, #22472	; 0x57c8
  104094:	e3400014 	movt	r0, #20
  104098:	eb00e954 	bl	13e5f0 <puts>
        lwipkit_status();
  10409c:	ebfffee1 	bl	103c28 <lwipkit_status>
        return 0;
  1040a0:	e3a03000 	mov	r3, #0
  1040a4:	ea000001 	b	1040b0 <main+0x454>
    }

    lwipkit_usage();
  1040a8:	ebfffee4 	bl	103c40 <lwipkit_usage>
    return -1;
  1040ac:	e3e03000 	mvn	r3, #0
}
  1040b0:	e1a00003 	mov	r0, r3
  1040b4:	e24bd008 	sub	sp, fp, #8
  1040b8:	e8bd8810 	pop	{r4, fp, pc}

001040bc <channel_compose_cmd>:
#include "channel.h"

static int _shm_key = -1;
int channel_compose_cmd(uint32_t cmd, void *arg0, void *arg1, void *arg2,
    void *arg3, void *arg4, void *arg5, size_t datalen)
{
  1040bc:	e92d4800 	push	{fp, lr}
  1040c0:	e28db004 	add	fp, sp, #4
  1040c4:	e24dd020 	sub	sp, sp, #32
  1040c8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1040cc:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  1040d0:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  1040d4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    int shmid;
    void *shm_vaddr = NULL;
  1040d8:	e3a03000 	mov	r3, #0
  1040dc:	e50b3008 	str	r3, [fp, #-8]
    struct channel_cmd *pcmd = NULL;
  1040e0:	e3a03000 	mov	r3, #0
  1040e4:	e50b300c 	str	r3, [fp, #-12]

    /* the shared memory includes the command and the possible data */
    size_t len = datalen + CHANNEL_CMD_OFFSET;
  1040e8:	e59b3010 	ldr	r3, [fp, #16]
  1040ec:	e283301c 	add	r3, r3, #28
  1040f0:	e50b3010 	str	r3, [fp, #-16]

    /* use the current thread ID to label the shared memory */
    if (_shm_key == -1)_shm_key = (int)(unsigned long)rt_thread_self();
  1040f4:	e30d301c 	movw	r3, #53276	; 0xd01c
  1040f8:	e3403014 	movt	r3, #20
  1040fc:	e5933000 	ldr	r3, [r3]
  104100:	e3730001 	cmn	r3, #1
  104104:	1a000005 	bne	104120 <channel_compose_cmd+0x64>
  104108:	ebfff839 	bl	1021f4 <rt_thread_self>
  10410c:	e1a03000 	mov	r3, r0
  104110:	e1a02003 	mov	r2, r3
  104114:	e30d301c 	movw	r3, #53276	; 0xd01c
  104118:	e3403014 	movt	r3, #20
  10411c:	e5832000 	str	r2, [r3]
    _shm_key = _shm_key + 2;
  104120:	e30d301c 	movw	r3, #53276	; 0xd01c
  104124:	e3403014 	movt	r3, #20
  104128:	e5933000 	ldr	r3, [r3]
  10412c:	e2832002 	add	r2, r3, #2
  104130:	e30d301c 	movw	r3, #53276	; 0xd01c
  104134:	e3403014 	movt	r3, #20
  104138:	e5832000 	str	r2, [r3]

    shmid = lwp_shmget(_shm_key, len, 1);    /* create a new shared-memory */
  10413c:	e30d301c 	movw	r3, #53276	; 0xd01c
  104140:	e3403014 	movt	r3, #20
  104144:	e5933000 	ldr	r3, [r3]
  104148:	e3a02001 	mov	r2, #1
  10414c:	e51b1010 	ldr	r1, [fp, #-16]
  104150:	e1a00003 	mov	r0, r3
  104154:	ebfff753 	bl	101ea8 <lwp_shmget>
  104158:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    if (shmid == -1)
  10415c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  104160:	e3730001 	cmn	r3, #1
  104164:	1a00000a 	bne	104194 <channel_compose_cmd+0xd8>
    {
        rt_kprintf("%s :Fail to allocate a shared memory! _shm_key %ld\n",__func__,_shm_key);
  104168:	e30d301c 	movw	r3, #53276	; 0xd01c
  10416c:	e3403014 	movt	r3, #20
  104170:	e5933000 	ldr	r3, [r3]
  104174:	e1a02003 	mov	r2, r3
  104178:	e30518b8 	movw	r1, #22712	; 0x58b8
  10417c:	e3401014 	movt	r1, #20
  104180:	e3050848 	movw	r0, #22600	; 0x5848
  104184:	e3400014 	movt	r0, #20
  104188:	ebfffbe1 	bl	103114 <rt_kprintf>
        return -1;
  10418c:	e3e03000 	mvn	r3, #0
  104190:	ea000027 	b	104234 <channel_compose_cmd+0x178>
    }

    /* get the start address of the shared memory */
    shm_vaddr = lwp_shmat(shmid, NULL);
  104194:	e3a01000 	mov	r1, #0
  104198:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  10419c:	ebfff75b 	bl	101f10 <lwp_shmat>
  1041a0:	e50b0008 	str	r0, [fp, #-8]
    if (shm_vaddr == NULL)
  1041a4:	e51b3008 	ldr	r3, [fp, #-8]
  1041a8:	e3530000 	cmp	r3, #0
  1041ac:	1a000006 	bne	1041cc <channel_compose_cmd+0x110>
    {
        printf("The allocated shared memory doesn't have a valid address!\n");
  1041b0:	e305087c 	movw	r0, #22652	; 0x587c
  1041b4:	e3400014 	movt	r0, #20
  1041b8:	eb00e90c 	bl	13e5f0 <puts>
        lwp_shmrm(shmid);
  1041bc:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1041c0:	ebfff747 	bl	101ee4 <lwp_shmrm>
        return -1;
  1041c4:	e3e03000 	mvn	r3, #0
  1041c8:	ea000019 	b	104234 <channel_compose_cmd+0x178>
    }

    /* prepare the command structure */
    pcmd = (struct channel_cmd *) shm_vaddr;
  1041cc:	e51b3008 	ldr	r3, [fp, #-8]
  1041d0:	e50b300c 	str	r3, [fp, #-12]

    pcmd->cmd = cmd;
  1041d4:	e51b300c 	ldr	r3, [fp, #-12]
  1041d8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1041dc:	e5832000 	str	r2, [r3]
    pcmd->argv[0] = arg0;
  1041e0:	e51b300c 	ldr	r3, [fp, #-12]
  1041e4:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1041e8:	e5832004 	str	r2, [r3, #4]
    pcmd->argv[1] = arg1;
  1041ec:	e51b300c 	ldr	r3, [fp, #-12]
  1041f0:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1041f4:	e5832008 	str	r2, [r3, #8]
    pcmd->argv[2] = arg2;
  1041f8:	e51b300c 	ldr	r3, [fp, #-12]
  1041fc:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  104200:	e583200c 	str	r2, [r3, #12]
    pcmd->argv[3] = arg3;
  104204:	e51b300c 	ldr	r3, [fp, #-12]
  104208:	e59b2004 	ldr	r2, [fp, #4]
  10420c:	e5832010 	str	r2, [r3, #16]
    pcmd->argv[4] = arg4;
  104210:	e51b300c 	ldr	r3, [fp, #-12]
  104214:	e59b2008 	ldr	r2, [fp, #8]
  104218:	e5832014 	str	r2, [r3, #20]
    pcmd->argv[5] = arg5;
  10421c:	e51b300c 	ldr	r3, [fp, #-12]
  104220:	e59b200c 	ldr	r2, [fp, #12]
  104224:	e5832018 	str	r2, [r3, #24]

    lwp_shmdt(shm_vaddr);
  104228:	e51b0008 	ldr	r0, [fp, #-8]
  10422c:	ebfff744 	bl	101f44 <lwp_shmdt>

    return shmid;
  104230:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
}
  104234:	e1a00003 	mov	r0, r3
  104238:	e24bd004 	sub	sp, fp, #4
  10423c:	e8bd8800 	pop	{fp, pc}

00104240 <channel_cmd_send_recv>:
{
  104240:	e92d4800 	push	{fp, lr}
  104244:	e28db004 	add	fp, sp, #4
  104248:	e24dd018 	sub	sp, sp, #24
  10424c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  104250:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(channel >= 0);
  104254:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  104258:	e3530000 	cmp	r3, #0
  10425c:	aa000005 	bge	104278 <channel_cmd_send_recv+0x38>
  104260:	e3a0200a 	mov	r2, #10
  104264:	e3051918 	movw	r1, #22808	; 0x5918
  104268:	e3401014 	movt	r1, #20
  10426c:	e30508cc 	movw	r0, #22732	; 0x58cc
  104270:	e3400014 	movt	r0, #20
  104274:	ebfffcc7 	bl	103598 <rt_assert_handler>
    chn_msg.type   = RT_CHANNEL_RAW;
  104278:	e3a03000 	mov	r3, #0
  10427c:	e50b3010 	str	r3, [fp, #-16]
    chn_msg.u.d    = cmd;
  104280:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  104284:	e50b300c 	str	r3, [fp, #-12]
    rt_channel_send_recv(channel, &chn_msg, &chn_msg);
  104288:	e24b2014 	sub	r2, fp, #20
  10428c:	e24b3014 	sub	r3, fp, #20
  104290:	e1a01003 	mov	r1, r3
  104294:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  104298:	ebffefb6 	bl	100178 <rt_channel_send_recv>
    return chn_msg.u.d;
  10429c:	e51b300c 	ldr	r3, [fp, #-12]
}
  1042a0:	e1a00003 	mov	r0, r3
  1042a4:	e24bd004 	sub	sp, fp, #4
  1042a8:	e8bd8800 	pop	{fp, pc}

001042ac <channel_cmd_recv>:
{
  1042ac:	e92d4800 	push	{fp, lr}
  1042b0:	e28db004 	add	fp, sp, #4
  1042b4:	e24dd018 	sub	sp, sp, #24
  1042b8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    RT_ASSERT(channel >= 0);
  1042bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1042c0:	e3530000 	cmp	r3, #0
  1042c4:	aa000005 	bge	1042e0 <channel_cmd_recv+0x34>
  1042c8:	e3a02027 	mov	r2, #39	; 0x27
  1042cc:	e3051904 	movw	r1, #22788	; 0x5904
  1042d0:	e3401014 	movt	r1, #20
  1042d4:	e30508cc 	movw	r0, #22732	; 0x58cc
  1042d8:	e3400014 	movt	r0, #20
  1042dc:	ebfffcad 	bl	103598 <rt_assert_handler>
    chn_msg.type = RT_CHANNEL_RAW;
  1042e0:	e3a03000 	mov	r3, #0
  1042e4:	e50b3010 	str	r3, [fp, #-16]
    rt_channel_recv(channel, &chn_msg);
  1042e8:	e24b3014 	sub	r3, fp, #20
  1042ec:	e1a01003 	mov	r1, r3
  1042f0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1042f4:	ebffefdc 	bl	10026c <rt_channel_recv>
    return chn_msg.u.d;
  1042f8:	e51b300c 	ldr	r3, [fp, #-12]
}
  1042fc:	e1a00003 	mov	r0, r3
  104300:	e24bd004 	sub	sp, fp, #4
  104304:	e8bd8800 	pop	{fp, pc}

00104308 <ipc_service_init>:
const char *ueth_srv_name = "ueth_srv";
static int ueth_int_channel = -1;
const char *ueth_int_name = "ueth_int";

rt_err_t ipc_service_init()
{
  104308:	e92d4800 	push	{fp, lr}
  10430c:	e28db004 	add	fp, sp, #4
    ueth_ueth_srv_channel = rt_channel_open(ueth_srv_name, O_RDWR);
  104310:	e30d3024 	movw	r3, #53284	; 0xd024
  104314:	e3403014 	movt	r3, #20
  104318:	e5933000 	ldr	r3, [r3]
  10431c:	e3a01002 	mov	r1, #2
  104320:	e1a00003 	mov	r0, r3
  104324:	ebffef7b 	bl	100118 <rt_channel_open>
  104328:	e1a02000 	mov	r2, r0
  10432c:	e30d3020 	movw	r3, #53280	; 0xd020
  104330:	e3403014 	movt	r3, #20
  104334:	e5832000 	str	r2, [r3]
    if (ueth_ueth_srv_channel < 0)
  104338:	e30d3020 	movw	r3, #53280	; 0xd020
  10433c:	e3403014 	movt	r3, #20
  104340:	e5933000 	ldr	r3, [r3]
  104344:	e3530000 	cmp	r3, #0
  104348:	aa000008 	bge	104370 <ipc_service_init+0x68>
    {
        printf("open %s failed\n", ueth_srv_name);
  10434c:	e30d3024 	movw	r3, #53284	; 0xd024
  104350:	e3403014 	movt	r3, #20
  104354:	e5933000 	ldr	r3, [r3]
  104358:	e1a01003 	mov	r1, r3
  10435c:	e30508f4 	movw	r0, #22772	; 0x58f4
  104360:	e3400014 	movt	r0, #20
  104364:	eb00e893 	bl	13e5b8 <printf>
        return RT_ERROR;
  104368:	e3a03001 	mov	r3, #1
  10436c:	ea000018 	b	1043d4 <ipc_service_init+0xcc>
    }

    ueth_int_channel = rt_channel_open(ueth_int_name, O_RDWR);
  104370:	e30d302c 	movw	r3, #53292	; 0xd02c
  104374:	e3403014 	movt	r3, #20
  104378:	e5933000 	ldr	r3, [r3]
  10437c:	e3a01002 	mov	r1, #2
  104380:	e1a00003 	mov	r0, r3
  104384:	ebffef63 	bl	100118 <rt_channel_open>
  104388:	e1a02000 	mov	r2, r0
  10438c:	e30d3028 	movw	r3, #53288	; 0xd028
  104390:	e3403014 	movt	r3, #20
  104394:	e5832000 	str	r2, [r3]
    if (ueth_int_channel < 0)
  104398:	e30d3028 	movw	r3, #53288	; 0xd028
  10439c:	e3403014 	movt	r3, #20
  1043a0:	e5933000 	ldr	r3, [r3]
  1043a4:	e3530000 	cmp	r3, #0
  1043a8:	aa000008 	bge	1043d0 <ipc_service_init+0xc8>
    {
        printf("open %s failed\n", ueth_int_name);
  1043ac:	e30d302c 	movw	r3, #53292	; 0xd02c
  1043b0:	e3403014 	movt	r3, #20
  1043b4:	e5933000 	ldr	r3, [r3]
  1043b8:	e1a01003 	mov	r1, r3
  1043bc:	e30508f4 	movw	r0, #22772	; 0x58f4
  1043c0:	e3400014 	movt	r0, #20
  1043c4:	eb00e87b 	bl	13e5b8 <printf>
        return RT_ERROR;
  1043c8:	e3a03001 	mov	r3, #1
  1043cc:	ea000000 	b	1043d4 <ipc_service_init+0xcc>
    }

    return RT_EOK;
  1043d0:	e3a03000 	mov	r3, #0
}
  1043d4:	e1a00003 	mov	r0, r3
  1043d8:	e8bd8800 	pop	{fp, pc}

001043dc <ueth_int_recv>:

void ueth_int_recv(void)
{
  1043dc:	e92d4800 	push	{fp, lr}
  1043e0:	e28db004 	add	fp, sp, #4
    channel_cmd_recv(ueth_int_channel);
  1043e4:	e30d3028 	movw	r3, #53288	; 0xd028
  1043e8:	e3403014 	movt	r3, #20
  1043ec:	e5933000 	ldr	r3, [r3]
  1043f0:	e1a00003 	mov	r0, r3
  1043f4:	ebffffac 	bl	1042ac <channel_cmd_recv>
}
  1043f8:	e320f000 	nop	{0}
  1043fc:	e8bd8800 	pop	{fp, pc}

00104400 <ueth_v2p>:

void *ueth_v2p(void * addr)
{
  104400:	e92d4800 	push	{fp, lr}
  104404:	e28db004 	add	fp, sp, #4
  104408:	e24dd028 	sub	sp, sp, #40	; 0x28
  10440c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    void* thread_self = rt_thread_self();
  104410:	ebfff777 	bl	1021f4 <rt_thread_self>
  104414:	e50b000c 	str	r0, [fp, #-12]
    int shmid = channel_compose_cmd3(UETH_V2P_REQ, (void*)0, thread_self, addr, 0);
  104418:	e3a03000 	mov	r3, #0
  10441c:	e58d300c 	str	r3, [sp, #12]
  104420:	e3a03000 	mov	r3, #0
  104424:	e58d3008 	str	r3, [sp, #8]
  104428:	e3a03000 	mov	r3, #0
  10442c:	e58d3004 	str	r3, [sp, #4]
  104430:	e3a03000 	mov	r3, #0
  104434:	e58d3000 	str	r3, [sp]
  104438:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10443c:	e51b200c 	ldr	r2, [fp, #-12]
  104440:	e3a01000 	mov	r1, #0
  104444:	e3a00005 	mov	r0, #5
  104448:	ebffff1b 	bl	1040bc <channel_compose_cmd>
  10444c:	e50b0010 	str	r0, [fp, #-16]
    void *res = RT_NULL;
  104450:	e3a03000 	mov	r3, #0
  104454:	e50b3008 	str	r3, [fp, #-8]
    struct channel_cmd *cmd  = (struct channel_cmd *)lwp_shmat(shmid, NULL);
  104458:	e3a01000 	mov	r1, #0
  10445c:	e51b0010 	ldr	r0, [fp, #-16]
  104460:	ebfff6aa 	bl	101f10 <lwp_shmat>
  104464:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    if (cmd) 
  104468:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10446c:	e3530000 	cmp	r3, #0
  104470:	0a000009 	beq	10449c <ueth_v2p+0x9c>
    {
        res = channel_cmd_send_recv(ueth_ueth_srv_channel, (void*)(size_t)shmid);
  104474:	e30d3020 	movw	r3, #53280	; 0xd020
  104478:	e3403014 	movt	r3, #20
  10447c:	e5933000 	ldr	r3, [r3]
  104480:	e51b2010 	ldr	r2, [fp, #-16]
  104484:	e1a01002 	mov	r1, r2
  104488:	e1a00003 	mov	r0, r3
  10448c:	ebffff6b 	bl	104240 <channel_cmd_send_recv>
  104490:	e50b0008 	str	r0, [fp, #-8]
        lwp_shmdt(cmd);
  104494:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  104498:	ebfff6a9 	bl	101f44 <lwp_shmdt>
    }

    lwp_shmrm(shmid);
  10449c:	e51b0010 	ldr	r0, [fp, #-16]
  1044a0:	ebfff68f 	bl	101ee4 <lwp_shmrm>
    return res;
  1044a4:	e51b3008 	ldr	r3, [fp, #-8]

}
  1044a8:	e1a00003 	mov	r0, r3
  1044ac:	e24bd004 	sub	sp, fp, #4
  1044b0:	e8bd8800 	pop	{fp, pc}

001044b4 <ueth_remap>:

void *ueth_remap(void * addr, int type, size_t size) 
{
  1044b4:	e92d4800 	push	{fp, lr}
  1044b8:	e28db004 	add	fp, sp, #4
  1044bc:	e24dd030 	sub	sp, sp, #48	; 0x30
  1044c0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1044c4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  1044c8:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
    void* thread_self = rt_thread_self();
  1044cc:	ebfff748 	bl	1021f4 <rt_thread_self>
  1044d0:	e50b000c 	str	r0, [fp, #-12]
    int shmid = channel_compose_cmd4(UETH_REMAP_REQ, (void*)0, thread_self, (void*)type, addr, sizeof(size_t));
  1044d4:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1044d8:	e3a03004 	mov	r3, #4
  1044dc:	e58d300c 	str	r3, [sp, #12]
  1044e0:	e3a03000 	mov	r3, #0
  1044e4:	e58d3008 	str	r3, [sp, #8]
  1044e8:	e3a03000 	mov	r3, #0
  1044ec:	e58d3004 	str	r3, [sp, #4]
  1044f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1044f4:	e58d3000 	str	r3, [sp]
  1044f8:	e1a03002 	mov	r3, r2
  1044fc:	e51b200c 	ldr	r2, [fp, #-12]
  104500:	e3a01000 	mov	r1, #0
  104504:	e3a00001 	mov	r0, #1
  104508:	ebfffeeb 	bl	1040bc <channel_compose_cmd>
  10450c:	e50b0010 	str	r0, [fp, #-16]
    void *res = RT_NULL;
  104510:	e3a03000 	mov	r3, #0
  104514:	e50b3008 	str	r3, [fp, #-8]
    struct channel_cmd *cmd  = (struct channel_cmd *)lwp_shmat(shmid, NULL);
  104518:	e3a01000 	mov	r1, #0
  10451c:	e51b0010 	ldr	r0, [fp, #-16]
  104520:	ebfff67a 	bl	101f10 <lwp_shmat>
  104524:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    if (cmd) 
  104528:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10452c:	e3530000 	cmp	r3, #0
  104530:	0a00000d 	beq	10456c <ueth_remap+0xb8>
    {
        memcpy(CHANNEL_CMD_DATA(cmd), (void*)&size, sizeof(size_t));
  104534:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  104538:	e283301c 	add	r3, r3, #28
  10453c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  104540:	e5832000 	str	r2, [r3]
        res = channel_cmd_send_recv(ueth_ueth_srv_channel, (void*)(size_t)shmid);
  104544:	e30d3020 	movw	r3, #53280	; 0xd020
  104548:	e3403014 	movt	r3, #20
  10454c:	e5933000 	ldr	r3, [r3]
  104550:	e51b2010 	ldr	r2, [fp, #-16]
  104554:	e1a01002 	mov	r1, r2
  104558:	e1a00003 	mov	r0, r3
  10455c:	ebffff37 	bl	104240 <channel_cmd_send_recv>
  104560:	e50b0008 	str	r0, [fp, #-8]
        lwp_shmdt(cmd);
  104564:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  104568:	ebfff675 	bl	101f44 <lwp_shmdt>
    }

    lwp_shmrm(shmid);
  10456c:	e51b0010 	ldr	r0, [fp, #-16]
  104570:	ebfff65b 	bl	101ee4 <lwp_shmrm>
    return res;
  104574:	e51b3008 	ldr	r3, [fp, #-8]
}
  104578:	e1a00003 	mov	r0, r3
  10457c:	e24bd004 	sub	sp, fp, #4
  104580:	e8bd8800 	pop	{fp, pc}

00104584 <ueth_gpioinit>:

void ueth_gpioinit(void *gpio, size_t size) 
{
  104584:	e92d4800 	push	{fp, lr}
  104588:	e28db004 	add	fp, sp, #4
  10458c:	e24dd020 	sub	sp, sp, #32
  104590:	e50b0010 	str	r0, [fp, #-16]
  104594:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int shmid = channel_compose_cmd1(UETH_GPIOINIT_REQ, (void*)0, size);
  104598:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10459c:	e58d300c 	str	r3, [sp, #12]
  1045a0:	e3a03000 	mov	r3, #0
  1045a4:	e58d3008 	str	r3, [sp, #8]
  1045a8:	e3a03000 	mov	r3, #0
  1045ac:	e58d3004 	str	r3, [sp, #4]
  1045b0:	e3a03000 	mov	r3, #0
  1045b4:	e58d3000 	str	r3, [sp]
  1045b8:	e3a03000 	mov	r3, #0
  1045bc:	e3a02000 	mov	r2, #0
  1045c0:	e3a01000 	mov	r1, #0
  1045c4:	e3a00002 	mov	r0, #2
  1045c8:	ebfffebb 	bl	1040bc <channel_compose_cmd>
  1045cc:	e50b0008 	str	r0, [fp, #-8]
    struct channel_cmd *cmd = (struct channel_cmd*)lwp_shmat(shmid, NULL);
  1045d0:	e3a01000 	mov	r1, #0
  1045d4:	e51b0008 	ldr	r0, [fp, #-8]
  1045d8:	ebfff64c 	bl	101f10 <lwp_shmat>
  1045dc:	e50b000c 	str	r0, [fp, #-12]
    if (cmd)
  1045e0:	e51b300c 	ldr	r3, [fp, #-12]
  1045e4:	e3530000 	cmp	r3, #0
  1045e8:	0a00000e 	beq	104628 <ueth_gpioinit+0xa4>
    {
        memcpy(CHANNEL_CMD_DATA(cmd), gpio, size);
  1045ec:	e51b300c 	ldr	r3, [fp, #-12]
  1045f0:	e283301c 	add	r3, r3, #28
  1045f4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1045f8:	e51b1010 	ldr	r1, [fp, #-16]
  1045fc:	e1a00003 	mov	r0, r3
  104600:	eb00f1e3 	bl	140d94 <memcpy>
        channel_cmd_send_recv(ueth_ueth_srv_channel, (void *)(size_t)shmid);
  104604:	e30d3020 	movw	r3, #53280	; 0xd020
  104608:	e3403014 	movt	r3, #20
  10460c:	e5933000 	ldr	r3, [r3]
  104610:	e51b2008 	ldr	r2, [fp, #-8]
  104614:	e1a01002 	mov	r1, r2
  104618:	e1a00003 	mov	r0, r3
  10461c:	ebffff07 	bl	104240 <channel_cmd_send_recv>
        lwp_shmdt(cmd);
  104620:	e51b000c 	ldr	r0, [fp, #-12]
  104624:	ebfff646 	bl	101f44 <lwp_shmdt>
    }

    lwp_shmrm(shmid);
  104628:	e51b0008 	ldr	r0, [fp, #-8]
  10462c:	ebfff62c 	bl	101ee4 <lwp_shmrm>
}
  104630:	e320f000 	nop	{0}
  104634:	e24bd004 	sub	sp, fp, #4
  104638:	e8bd8800 	pop	{fp, pc}

0010463c <ueth_init_clock>:

void ueth_init_clock() 
{
  10463c:	e92d4800 	push	{fp, lr}
  104640:	e28db004 	add	fp, sp, #4
  104644:	e24dd018 	sub	sp, sp, #24
    int shmid = channel_compose_cmd1(UETH_CLOCKINIT_REQ, (void*)0, 0);
  104648:	e3a03000 	mov	r3, #0
  10464c:	e58d300c 	str	r3, [sp, #12]
  104650:	e3a03000 	mov	r3, #0
  104654:	e58d3008 	str	r3, [sp, #8]
  104658:	e3a03000 	mov	r3, #0
  10465c:	e58d3004 	str	r3, [sp, #4]
  104660:	e3a03000 	mov	r3, #0
  104664:	e58d3000 	str	r3, [sp]
  104668:	e3a03000 	mov	r3, #0
  10466c:	e3a02000 	mov	r2, #0
  104670:	e3a01000 	mov	r1, #0
  104674:	e3a00003 	mov	r0, #3
  104678:	ebfffe8f 	bl	1040bc <channel_compose_cmd>
  10467c:	e50b0008 	str	r0, [fp, #-8]
    struct channel_cmd *cmd = (struct channel_cmd*)lwp_shmat(shmid, NULL);
  104680:	e3a01000 	mov	r1, #0
  104684:	e51b0008 	ldr	r0, [fp, #-8]
  104688:	ebfff620 	bl	101f10 <lwp_shmat>
  10468c:	e50b000c 	str	r0, [fp, #-12]
    if (cmd)
  104690:	e51b300c 	ldr	r3, [fp, #-12]
  104694:	e3530000 	cmp	r3, #0
  104698:	0a000008 	beq	1046c0 <ueth_init_clock+0x84>
    {
        channel_cmd_send_recv(ueth_ueth_srv_channel, (void *)(size_t)shmid);
  10469c:	e30d3020 	movw	r3, #53280	; 0xd020
  1046a0:	e3403014 	movt	r3, #20
  1046a4:	e5933000 	ldr	r3, [r3]
  1046a8:	e51b2008 	ldr	r2, [fp, #-8]
  1046ac:	e1a01002 	mov	r1, r2
  1046b0:	e1a00003 	mov	r0, r3
  1046b4:	ebfffee1 	bl	104240 <channel_cmd_send_recv>
        lwp_shmdt(cmd);
  1046b8:	e51b000c 	ldr	r0, [fp, #-12]
  1046bc:	ebfff620 	bl	101f44 <lwp_shmdt>
    }

    lwp_shmrm(shmid);
  1046c0:	e51b0008 	ldr	r0, [fp, #-8]
  1046c4:	ebfff606 	bl	101ee4 <lwp_shmrm>
}
  1046c8:	e320f000 	nop	{0}
  1046cc:	e24bd004 	sub	sp, fp, #4
  1046d0:	e8bd8800 	pop	{fp, pc}

001046d4 <ueth_dcache_clean>:

void ueth_dcache_clean(void *paddr, size_t size)
{
  1046d4:	e92d4800 	push	{fp, lr}
  1046d8:	e28db004 	add	fp, sp, #4
  1046dc:	e24dd020 	sub	sp, sp, #32
  1046e0:	e50b0010 	str	r0, [fp, #-16]
  1046e4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int shmid = channel_compose_cmd3(UETH_DCACHE_REQ, (void*)0, (void*)UETH_DCACHE_CLEAN, paddr, sizeof(size_t));
  1046e8:	e3a03004 	mov	r3, #4
  1046ec:	e58d300c 	str	r3, [sp, #12]
  1046f0:	e3a03000 	mov	r3, #0
  1046f4:	e58d3008 	str	r3, [sp, #8]
  1046f8:	e3a03000 	mov	r3, #0
  1046fc:	e58d3004 	str	r3, [sp, #4]
  104700:	e3a03000 	mov	r3, #0
  104704:	e58d3000 	str	r3, [sp]
  104708:	e51b3010 	ldr	r3, [fp, #-16]
  10470c:	e3a02001 	mov	r2, #1
  104710:	e3a01000 	mov	r1, #0
  104714:	e3a00004 	mov	r0, #4
  104718:	ebfffe67 	bl	1040bc <channel_compose_cmd>
  10471c:	e50b0008 	str	r0, [fp, #-8]
    struct channel_cmd *cmd = (struct channel_cmd*)lwp_shmat(shmid, NULL);
  104720:	e3a01000 	mov	r1, #0
  104724:	e51b0008 	ldr	r0, [fp, #-8]
  104728:	ebfff5f8 	bl	101f10 <lwp_shmat>
  10472c:	e50b000c 	str	r0, [fp, #-12]
    if (cmd)
  104730:	e51b300c 	ldr	r3, [fp, #-12]
  104734:	e3530000 	cmp	r3, #0
  104738:	0a00000c 	beq	104770 <ueth_dcache_clean+0x9c>
    {
        memcpy(CHANNEL_CMD_DATA(cmd), (void*)&size, sizeof(size_t));
  10473c:	e51b300c 	ldr	r3, [fp, #-12]
  104740:	e283301c 	add	r3, r3, #28
  104744:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  104748:	e5832000 	str	r2, [r3]
        channel_cmd_send_recv(ueth_ueth_srv_channel, (void *)(size_t)shmid);
  10474c:	e30d3020 	movw	r3, #53280	; 0xd020
  104750:	e3403014 	movt	r3, #20
  104754:	e5933000 	ldr	r3, [r3]
  104758:	e51b2008 	ldr	r2, [fp, #-8]
  10475c:	e1a01002 	mov	r1, r2
  104760:	e1a00003 	mov	r0, r3
  104764:	ebfffeb5 	bl	104240 <channel_cmd_send_recv>
        lwp_shmdt(cmd);
  104768:	e51b000c 	ldr	r0, [fp, #-12]
  10476c:	ebfff5f4 	bl	101f44 <lwp_shmdt>
    }

    lwp_shmrm(shmid);
  104770:	e51b0008 	ldr	r0, [fp, #-8]
  104774:	ebfff5da 	bl	101ee4 <lwp_shmrm>
    return;
  104778:	e320f000 	nop	{0}
}
  10477c:	e24bd004 	sub	sp, fp, #4
  104780:	e8bd8800 	pop	{fp, pc}

00104784 <ueth_dcache_invalid>:

void ueth_dcache_invalid(void *paddr, size_t size)
{
  104784:	e92d4800 	push	{fp, lr}
  104788:	e28db004 	add	fp, sp, #4
  10478c:	e24dd020 	sub	sp, sp, #32
  104790:	e50b0010 	str	r0, [fp, #-16]
  104794:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int shmid = channel_compose_cmd3(UETH_DCACHE_REQ, (void*)0, (void*)UETH_DCACHE_INVALID, paddr, sizeof(size_t));
  104798:	e3a03004 	mov	r3, #4
  10479c:	e58d300c 	str	r3, [sp, #12]
  1047a0:	e3a03000 	mov	r3, #0
  1047a4:	e58d3008 	str	r3, [sp, #8]
  1047a8:	e3a03000 	mov	r3, #0
  1047ac:	e58d3004 	str	r3, [sp, #4]
  1047b0:	e3a03000 	mov	r3, #0
  1047b4:	e58d3000 	str	r3, [sp]
  1047b8:	e51b3010 	ldr	r3, [fp, #-16]
  1047bc:	e3a02002 	mov	r2, #2
  1047c0:	e3a01000 	mov	r1, #0
  1047c4:	e3a00004 	mov	r0, #4
  1047c8:	ebfffe3b 	bl	1040bc <channel_compose_cmd>
  1047cc:	e50b0008 	str	r0, [fp, #-8]
    struct channel_cmd *cmd = (struct channel_cmd*)lwp_shmat(shmid, NULL);
  1047d0:	e3a01000 	mov	r1, #0
  1047d4:	e51b0008 	ldr	r0, [fp, #-8]
  1047d8:	ebfff5cc 	bl	101f10 <lwp_shmat>
  1047dc:	e50b000c 	str	r0, [fp, #-12]
    if (cmd)
  1047e0:	e51b300c 	ldr	r3, [fp, #-12]
  1047e4:	e3530000 	cmp	r3, #0
  1047e8:	0a00000c 	beq	104820 <ueth_dcache_invalid+0x9c>
    {
        memcpy(CHANNEL_CMD_DATA(cmd), (void*)&size, sizeof(size_t));
  1047ec:	e51b300c 	ldr	r3, [fp, #-12]
  1047f0:	e283301c 	add	r3, r3, #28
  1047f4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1047f8:	e5832000 	str	r2, [r3]
        channel_cmd_send_recv(ueth_ueth_srv_channel, (void *)(size_t)shmid);
  1047fc:	e30d3020 	movw	r3, #53280	; 0xd020
  104800:	e3403014 	movt	r3, #20
  104804:	e5933000 	ldr	r3, [r3]
  104808:	e51b2008 	ldr	r2, [fp, #-8]
  10480c:	e1a01002 	mov	r1, r2
  104810:	e1a00003 	mov	r0, r3
  104814:	ebfffe89 	bl	104240 <channel_cmd_send_recv>
        lwp_shmdt(cmd);
  104818:	e51b000c 	ldr	r0, [fp, #-12]
  10481c:	ebfff5c8 	bl	101f44 <lwp_shmdt>
    }

    lwp_shmrm(shmid);
  104820:	e51b0008 	ldr	r0, [fp, #-8]
  104824:	ebfff5ae 	bl	101ee4 <lwp_shmrm>
    return;
  104828:	e320f000 	nop	{0}
}
  10482c:	e24bd004 	sub	sp, fp, #4
  104830:	e8bd8800 	pop	{fp, pc}

00104834 <ueth_hw_interrupt_install>:

void ueth_hw_interrupt_install(int vector, void * param) {
  104834:	e92d4800 	push	{fp, lr}
  104838:	e28db004 	add	fp, sp, #4
  10483c:	e24dd020 	sub	sp, sp, #32
  104840:	e50b0010 	str	r0, [fp, #-16]
  104844:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int shmid = channel_compose_cmd3(UETH_INSTALL_INTERRUPT_REQ, (void*)0, (void*)vector, param, 0);
  104848:	e51b2010 	ldr	r2, [fp, #-16]
  10484c:	e3a03000 	mov	r3, #0
  104850:	e58d300c 	str	r3, [sp, #12]
  104854:	e3a03000 	mov	r3, #0
  104858:	e58d3008 	str	r3, [sp, #8]
  10485c:	e3a03000 	mov	r3, #0
  104860:	e58d3004 	str	r3, [sp, #4]
  104864:	e3a03000 	mov	r3, #0
  104868:	e58d3000 	str	r3, [sp]
  10486c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  104870:	e3a01000 	mov	r1, #0
  104874:	e3a00006 	mov	r0, #6
  104878:	ebfffe0f 	bl	1040bc <channel_compose_cmd>
  10487c:	e50b0008 	str	r0, [fp, #-8]
    struct channel_cmd *cmd = (struct channel_cmd*)lwp_shmat(shmid, NULL);
  104880:	e3a01000 	mov	r1, #0
  104884:	e51b0008 	ldr	r0, [fp, #-8]
  104888:	ebfff5a0 	bl	101f10 <lwp_shmat>
  10488c:	e50b000c 	str	r0, [fp, #-12]
    if (cmd)
  104890:	e51b300c 	ldr	r3, [fp, #-12]
  104894:	e3530000 	cmp	r3, #0
  104898:	0a000008 	beq	1048c0 <ueth_hw_interrupt_install+0x8c>
    {
        channel_cmd_send_recv(ueth_ueth_srv_channel, (void *)(size_t)shmid);
  10489c:	e30d3020 	movw	r3, #53280	; 0xd020
  1048a0:	e3403014 	movt	r3, #20
  1048a4:	e5933000 	ldr	r3, [r3]
  1048a8:	e51b2008 	ldr	r2, [fp, #-8]
  1048ac:	e1a01002 	mov	r1, r2
  1048b0:	e1a00003 	mov	r0, r3
  1048b4:	ebfffe61 	bl	104240 <channel_cmd_send_recv>
        lwp_shmdt(cmd);
  1048b8:	e51b000c 	ldr	r0, [fp, #-12]
  1048bc:	ebfff5a0 	bl	101f44 <lwp_shmdt>
        
    }
    
    lwp_shmrm(shmid);
  1048c0:	e51b0008 	ldr	r0, [fp, #-8]
  1048c4:	ebfff586 	bl	101ee4 <lwp_shmrm>
  1048c8:	e320f000 	nop	{0}
  1048cc:	e24bd004 	sub	sp, fp, #4
  1048d0:	e8bd8800 	pop	{fp, pc}

001048d4 <inet_ioctlsocket>:
// #include "af_inet.h"

#include "netdev.h"

int inet_ioctlsocket(int socket, long cmd, void *arg)
{
  1048d4:	e92d4800 	push	{fp, lr}
  1048d8:	e28db004 	add	fp, sp, #4
  1048dc:	e24dd010 	sub	sp, sp, #16
  1048e0:	e50b0008 	str	r0, [fp, #-8]
  1048e4:	e50b100c 	str	r1, [fp, #-12]
  1048e8:	e50b2010 	str	r2, [fp, #-16]
    switch (cmd)
  1048ec:	e51b300c 	ldr	r3, [fp, #-12]
  1048f0:	e2433003 	sub	r3, r3, #3
  1048f4:	e3530001 	cmp	r3, #1
  1048f8:	8a000006 	bhi	104918 <inet_ioctlsocket+0x44>
    {
    case F_GETFL:
    case F_SETFL:
        return unet_fcntl(socket, cmd, (int)(unsigned long) arg);
  1048fc:	e51b3010 	ldr	r3, [fp, #-16]
  104900:	e1a02003 	mov	r2, r3
  104904:	e51b100c 	ldr	r1, [fp, #-12]
  104908:	e51b0008 	ldr	r0, [fp, #-8]
  10490c:	eb00123d 	bl	109208 <unet_fcntl>
  104910:	e1a03000 	mov	r3, r0
  104914:	ea000004 	b	10492c <inet_ioctlsocket+0x58>

    default:
        return unet_ioctl(socket, cmd, arg);
  104918:	e51b2010 	ldr	r2, [fp, #-16]
  10491c:	e51b100c 	ldr	r1, [fp, #-12]
  104920:	e51b0008 	ldr	r0, [fp, #-8]
  104924:	eb001245 	bl	109240 <unet_ioctl>
  104928:	e1a03000 	mov	r3, r0
    }
}
  10492c:	e1a00003 	mov	r0, r3
  104930:	e24bd004 	sub	sp, fp, #4
  104934:	e8bd8800 	pop	{fp, pc}

00104938 <sal_unet_netdev_set_pf_info>:
    &unet_netdb_ops,
};

/* Set lwIP network interface device protocol family information */
int sal_unet_netdev_set_pf_info(struct netdev *netdev)
{
  104938:	e92d4800 	push	{fp, lr}
  10493c:	e28db004 	add	fp, sp, #4
  104940:	e24dd008 	sub	sp, sp, #8
  104944:	e50b0008 	str	r0, [fp, #-8]
    RT_ASSERT(netdev);
  104948:	e51b3008 	ldr	r3, [fp, #-8]
  10494c:	e3530000 	cmp	r3, #0
  104950:	1a000005 	bne	10496c <sal_unet_netdev_set_pf_info+0x34>
  104954:	e3a02086 	mov	r2, #134	; 0x86
  104958:	e3051994 	movw	r1, #22932	; 0x5994
  10495c:	e3401014 	movt	r1, #20
  104960:	e305098c 	movw	r0, #22924	; 0x598c
  104964:	e3400014 	movt	r0, #20
  104968:	ebfffb0a 	bl	103598 <rt_assert_handler>

    netdev->sal_user_data = (void *)(unsigned long) &unet_inet_family;
  10496c:	e51b2008 	ldr	r2, [fp, #-8]
  104970:	e305397c 	movw	r3, #22908	; 0x597c
  104974:	e3403014 	movt	r3, #20
  104978:	e582303c 	str	r3, [r2, #60]	; 0x3c
    return 0;
  10497c:	e3a03000 	mov	r3, #0
}
  104980:	e1a00003 	mov	r0, r3
  104984:	e24bd004 	sub	sp, fp, #4
  104988:	e8bd8800 	pop	{fp, pc}

0010498c <ueth_device_find>:
#define MAX_DEV_NUM 3
static eth_device_node ueth_dev_list[MAX_DEV_NUM];
static char ueth_dev_list_valid[MAX_DEV_NUM];

rt_device_t ueth_device_find(const char *name)
{
  10498c:	e92d4800 	push	{fp, lr}
  104990:	e28db004 	add	fp, sp, #4
  104994:	e24dd010 	sub	sp, sp, #16
  104998:	e50b0010 	str	r0, [fp, #-16]
    for (int i = 0; i < MAX_DEV_NUM; i++)
  10499c:	e3a03000 	mov	r3, #0
  1049a0:	e50b3008 	str	r3, [fp, #-8]
  1049a4:	ea00001f 	b	104a28 <ueth_device_find+0x9c>
    {
        if (ueth_dev_list_valid[i])
  1049a8:	e30d344c 	movw	r3, #54348	; 0xd44c
  1049ac:	e3403014 	movt	r3, #20
  1049b0:	e51b2008 	ldr	r2, [fp, #-8]
  1049b4:	e0833002 	add	r3, r3, r2
  1049b8:	e5d33000 	ldrb	r3, [r3]
  1049bc:	e3530000 	cmp	r3, #0
  1049c0:	0a000015 	beq	104a1c <ueth_device_find+0x90>
        {
            if (strncmp(ueth_dev_list[i].name, name, 8) == 0)
  1049c4:	e51b3008 	ldr	r3, [fp, #-8]
  1049c8:	e3a0200c 	mov	r2, #12
  1049cc:	e0020392 	mul	r2, r2, r3
  1049d0:	e30d3428 	movw	r3, #54312	; 0xd428
  1049d4:	e3403014 	movt	r3, #20
  1049d8:	e0823003 	add	r3, r2, r3
  1049dc:	e2833004 	add	r3, r3, #4
  1049e0:	e3a02008 	mov	r2, #8
  1049e4:	e51b1010 	ldr	r1, [fp, #-16]
  1049e8:	e1a00003 	mov	r0, r3
  1049ec:	eb00f2dd 	bl	141568 <strncmp>
  1049f0:	e1a03000 	mov	r3, r0
  1049f4:	e3530000 	cmp	r3, #0
  1049f8:	1a000007 	bne	104a1c <ueth_device_find+0x90>
            {  
                return ueth_dev_list[i].dev;
  1049fc:	e30d3428 	movw	r3, #54312	; 0xd428
  104a00:	e3403014 	movt	r3, #20
  104a04:	e51b2008 	ldr	r2, [fp, #-8]
  104a08:	e3a0100c 	mov	r1, #12
  104a0c:	e0020291 	mul	r2, r1, r2
  104a10:	e0833002 	add	r3, r3, r2
  104a14:	e5933000 	ldr	r3, [r3]
  104a18:	ea000006 	b	104a38 <ueth_device_find+0xac>
    for (int i = 0; i < MAX_DEV_NUM; i++)
  104a1c:	e51b3008 	ldr	r3, [fp, #-8]
  104a20:	e2833001 	add	r3, r3, #1
  104a24:	e50b3008 	str	r3, [fp, #-8]
  104a28:	e51b3008 	ldr	r3, [fp, #-8]
  104a2c:	e3530002 	cmp	r3, #2
  104a30:	daffffdc 	ble	1049a8 <ueth_device_find+0x1c>
            }
        }
    }

    return RT_NULL;
  104a34:	e3a03000 	mov	r3, #0
}
  104a38:	e1a00003 	mov	r0, r3
  104a3c:	e24bd004 	sub	sp, fp, #4
  104a40:	e8bd8800 	pop	{fp, pc}

00104a44 <ueth_device_register>:

rt_err_t ueth_device_register(rt_device_t dev, const char *name, rt_uint16_t flags)
{
  104a44:	e92d4800 	push	{fp, lr}
  104a48:	e28db004 	add	fp, sp, #4
  104a4c:	e24dd018 	sub	sp, sp, #24
  104a50:	e50b0010 	str	r0, [fp, #-16]
  104a54:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  104a58:	e1a03002 	mov	r3, r2
  104a5c:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
    if (dev == RT_NULL)
  104a60:	e51b3010 	ldr	r3, [fp, #-16]
  104a64:	e3530000 	cmp	r3, #0
  104a68:	1a000001 	bne	104a74 <ueth_device_register+0x30>
        return -RT_ERROR;
  104a6c:	e3e03000 	mvn	r3, #0
  104a70:	ea000042 	b	104b80 <ueth_device_register+0x13c>

    if (ueth_device_find(name) != RT_NULL)
  104a74:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  104a78:	ebffffc3 	bl	10498c <ueth_device_find>
  104a7c:	e1a03000 	mov	r3, r0
  104a80:	e3530000 	cmp	r3, #0
  104a84:	0a000001 	beq	104a90 <ueth_device_register+0x4c>
        return -RT_ERROR;
  104a88:	e3e03000 	mvn	r3, #0
  104a8c:	ea00003b 	b	104b80 <ueth_device_register+0x13c>

    int ueth_dev_list_index = 0;
  104a90:	e3a03000 	mov	r3, #0
  104a94:	e50b3008 	str	r3, [fp, #-8]
    while (ueth_dev_list_index < MAX_DEV_NUM)
  104a98:	ea000009 	b	104ac4 <ueth_device_register+0x80>
    {
        if (!ueth_dev_list_valid[ueth_dev_list_index])
  104a9c:	e30d344c 	movw	r3, #54348	; 0xd44c
  104aa0:	e3403014 	movt	r3, #20
  104aa4:	e51b2008 	ldr	r2, [fp, #-8]
  104aa8:	e0833002 	add	r3, r3, r2
  104aac:	e5d33000 	ldrb	r3, [r3]
  104ab0:	e3530000 	cmp	r3, #0
  104ab4:	0a000006 	beq	104ad4 <ueth_device_register+0x90>
        {
            break;
        }
        ueth_dev_list_index++;
  104ab8:	e51b3008 	ldr	r3, [fp, #-8]
  104abc:	e2833001 	add	r3, r3, #1
  104ac0:	e50b3008 	str	r3, [fp, #-8]
    while (ueth_dev_list_index < MAX_DEV_NUM)
  104ac4:	e51b3008 	ldr	r3, [fp, #-8]
  104ac8:	e3530002 	cmp	r3, #2
  104acc:	dafffff2 	ble	104a9c <ueth_device_register+0x58>
  104ad0:	ea000000 	b	104ad8 <ueth_device_register+0x94>
            break;
  104ad4:	e320f000 	nop	{0}
    }

    if (ueth_dev_list_index == MAX_DEV_NUM)
  104ad8:	e51b3008 	ldr	r3, [fp, #-8]
  104adc:	e3530003 	cmp	r3, #3
  104ae0:	1a000001 	bne	104aec <ueth_device_register+0xa8>
    {
        return -RT_ERROR;
  104ae4:	e3e03000 	mvn	r3, #0
  104ae8:	ea000024 	b	104b80 <ueth_device_register+0x13c>
    }
    
    strcpy(ueth_dev_list[ueth_dev_list_index].name, name);
  104aec:	e51b3008 	ldr	r3, [fp, #-8]
  104af0:	e3a0200c 	mov	r2, #12
  104af4:	e0020392 	mul	r2, r2, r3
  104af8:	e30d3428 	movw	r3, #54312	; 0xd428
  104afc:	e3403014 	movt	r3, #20
  104b00:	e0823003 	add	r3, r2, r3
  104b04:	e2833004 	add	r3, r3, #4
  104b08:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  104b0c:	e1a00003 	mov	r0, r3
  104b10:	eb00f257 	bl	141474 <strcpy>
    ueth_dev_list[ueth_dev_list_index].dev = dev;
  104b14:	e30d3428 	movw	r3, #54312	; 0xd428
  104b18:	e3403014 	movt	r3, #20
  104b1c:	e51b2008 	ldr	r2, [fp, #-8]
  104b20:	e3a0100c 	mov	r1, #12
  104b24:	e0020291 	mul	r2, r1, r2
  104b28:	e0833002 	add	r3, r3, r2
  104b2c:	e51b2010 	ldr	r2, [fp, #-16]
  104b30:	e5832000 	str	r2, [r3]
    ueth_dev_list_valid[ueth_dev_list_index] = 1;
  104b34:	e30d344c 	movw	r3, #54348	; 0xd44c
  104b38:	e3403014 	movt	r3, #20
  104b3c:	e51b2008 	ldr	r2, [fp, #-8]
  104b40:	e0833002 	add	r3, r3, r2
  104b44:	e3a02001 	mov	r2, #1
  104b48:	e5c32000 	strb	r2, [r3]
    dev->flag = flags;
  104b4c:	e51b3010 	ldr	r3, [fp, #-16]
  104b50:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  104b54:	e1c321bc 	strh	r2, [r3, #28]
    dev->ref_count = 0;
  104b58:	e51b3010 	ldr	r3, [fp, #-16]
  104b5c:	e3a02000 	mov	r2, #0
  104b60:	e5c32020 	strb	r2, [r3, #32]
    dev->open_flag = 0;
  104b64:	e51b3010 	ldr	r3, [fp, #-16]
  104b68:	e3a02000 	mov	r2, #0
  104b6c:	e1c321be 	strh	r2, [r3, #30]

    dev->parent.type = RT_Object_Class_Device;
  104b70:	e51b3010 	ldr	r3, [fp, #-16]
  104b74:	e3a02009 	mov	r2, #9
  104b78:	e5c32008 	strb	r2, [r3, #8]

    return RT_EOK;
  104b7c:	e3a03000 	mov	r3, #0
}
  104b80:	e1a00003 	mov	r0, r3
  104b84:	e24bd004 	sub	sp, fp, #4
  104b88:	e8bd8800 	pop	{fp, pc}

00104b8c <ueth_device_unregister>:

rt_err_t ueth_device_unregister(rt_device_t dev)
{
  104b8c:	e92d4800 	push	{fp, lr}
  104b90:	e28db004 	add	fp, sp, #4
  104b94:	e24dd010 	sub	sp, sp, #16
  104b98:	e50b0010 	str	r0, [fp, #-16]
    RT_ASSERT(dev != RT_NULL);
  104b9c:	e51b3010 	ldr	r3, [fp, #-16]
  104ba0:	e3530000 	cmp	r3, #0
  104ba4:	1a000005 	bne	104bc0 <ueth_device_unregister+0x34>
  104ba8:	e3a02048 	mov	r2, #72	; 0x48
  104bac:	e3051a24 	movw	r1, #23076	; 0x5a24
  104bb0:	e3401014 	movt	r1, #20
  104bb4:	e30509b0 	movw	r0, #22960	; 0x59b0
  104bb8:	e3400014 	movt	r0, #20
  104bbc:	ebfffa75 	bl	103598 <rt_assert_handler>
    RT_ASSERT(dev->parent.type == RT_Object_Class_Device);
  104bc0:	e51b3010 	ldr	r3, [fp, #-16]
  104bc4:	e5d33008 	ldrb	r3, [r3, #8]
  104bc8:	e3530009 	cmp	r3, #9
  104bcc:	0a000005 	beq	104be8 <ueth_device_unregister+0x5c>
  104bd0:	e3a02049 	mov	r2, #73	; 0x49
  104bd4:	e3051a24 	movw	r1, #23076	; 0x5a24
  104bd8:	e3401014 	movt	r1, #20
  104bdc:	e30509c0 	movw	r0, #22976	; 0x59c0
  104be0:	e3400014 	movt	r0, #20
  104be4:	ebfffa6b 	bl	103598 <rt_assert_handler>

    for (int i = 0; i < MAX_DEV_NUM; i++)
  104be8:	e3a03000 	mov	r3, #0
  104bec:	e50b3008 	str	r3, [fp, #-8]
  104bf0:	ea000019 	b	104c5c <ueth_device_unregister+0xd0>
    {
        if (ueth_dev_list_valid[i] && dev == ueth_dev_list[i].dev)
  104bf4:	e30d344c 	movw	r3, #54348	; 0xd44c
  104bf8:	e3403014 	movt	r3, #20
  104bfc:	e51b2008 	ldr	r2, [fp, #-8]
  104c00:	e0833002 	add	r3, r3, r2
  104c04:	e5d33000 	ldrb	r3, [r3]
  104c08:	e3530000 	cmp	r3, #0
  104c0c:	0a00000f 	beq	104c50 <ueth_device_unregister+0xc4>
  104c10:	e30d3428 	movw	r3, #54312	; 0xd428
  104c14:	e3403014 	movt	r3, #20
  104c18:	e51b2008 	ldr	r2, [fp, #-8]
  104c1c:	e3a0100c 	mov	r1, #12
  104c20:	e0020291 	mul	r2, r1, r2
  104c24:	e0833002 	add	r3, r3, r2
  104c28:	e5933000 	ldr	r3, [r3]
  104c2c:	e51b2010 	ldr	r2, [fp, #-16]
  104c30:	e1520003 	cmp	r2, r3
  104c34:	1a000005 	bne	104c50 <ueth_device_unregister+0xc4>
        {
            ueth_dev_list_valid[i] = 0;
  104c38:	e30d344c 	movw	r3, #54348	; 0xd44c
  104c3c:	e3403014 	movt	r3, #20
  104c40:	e51b2008 	ldr	r2, [fp, #-8]
  104c44:	e0833002 	add	r3, r3, r2
  104c48:	e3a02000 	mov	r2, #0
  104c4c:	e5c32000 	strb	r2, [r3]
    for (int i = 0; i < MAX_DEV_NUM; i++)
  104c50:	e51b3008 	ldr	r3, [fp, #-8]
  104c54:	e2833001 	add	r3, r3, #1
  104c58:	e50b3008 	str	r3, [fp, #-8]
  104c5c:	e51b3008 	ldr	r3, [fp, #-8]
  104c60:	e3530002 	cmp	r3, #2
  104c64:	daffffe2 	ble	104bf4 <ueth_device_unregister+0x68>
        }
    }

    return RT_EOK;
  104c68:	e3a03000 	mov	r3, #0
}
  104c6c:	e1a00003 	mov	r0, r3
  104c70:	e24bd004 	sub	sp, fp, #4
  104c74:	e8bd8800 	pop	{fp, pc}

00104c78 <ueth_device_init>:

rt_err_t ueth_device_init(rt_device_t dev)
{
  104c78:	e92d4800 	push	{fp, lr}
  104c7c:	e28db004 	add	fp, sp, #4
  104c80:	e24dd010 	sub	sp, sp, #16
  104c84:	e50b0010 	str	r0, [fp, #-16]
    rt_err_t result = RT_EOK;
  104c88:	e3a03000 	mov	r3, #0
  104c8c:	e50b3008 	str	r3, [fp, #-8]

    RT_ASSERT(dev != RT_NULL);
  104c90:	e51b3010 	ldr	r3, [fp, #-16]
  104c94:	e3530000 	cmp	r3, #0
  104c98:	1a000005 	bne	104cb4 <ueth_device_init+0x3c>
  104c9c:	e3a0205a 	mov	r2, #90	; 0x5a
  104ca0:	e3051a3c 	movw	r1, #23100	; 0x5a3c
  104ca4:	e3401014 	movt	r1, #20
  104ca8:	e30509b0 	movw	r0, #22960	; 0x59b0
  104cac:	e3400014 	movt	r0, #20
  104cb0:	ebfffa38 	bl	103598 <rt_assert_handler>
    RT_ASSERT(dev->parent.type == RT_Object_Class_Device);
  104cb4:	e51b3010 	ldr	r3, [fp, #-16]
  104cb8:	e5d33008 	ldrb	r3, [r3, #8]
  104cbc:	e3530009 	cmp	r3, #9
  104cc0:	0a000005 	beq	104cdc <ueth_device_init+0x64>
  104cc4:	e3a0205b 	mov	r2, #91	; 0x5b
  104cc8:	e3051a3c 	movw	r1, #23100	; 0x5a3c
  104ccc:	e3401014 	movt	r1, #20
  104cd0:	e30509c0 	movw	r0, #22976	; 0x59c0
  104cd4:	e3400014 	movt	r0, #20
  104cd8:	ebfffa2e 	bl	103598 <rt_assert_handler>

    /* get device_init handler */
    if (DEV_INIT != RT_NULL)
  104cdc:	e51b3010 	ldr	r3, [fp, #-16]
  104ce0:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  104ce4:	e5933000 	ldr	r3, [r3]
  104ce8:	e3530000 	cmp	r3, #0
  104cec:	0a00001a 	beq	104d5c <ueth_device_init+0xe4>
    {
        if (!(dev->flag & RT_DEVICE_FLAG_ACTIVATED))
  104cf0:	e51b3010 	ldr	r3, [fp, #-16]
  104cf4:	e1d331bc 	ldrh	r3, [r3, #28]
  104cf8:	e2033010 	and	r3, r3, #16
  104cfc:	e3530000 	cmp	r3, #0
  104d00:	1a000015 	bne	104d5c <ueth_device_init+0xe4>
        {
            result = DEV_INIT(dev);
  104d04:	e51b3010 	ldr	r3, [fp, #-16]
  104d08:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  104d0c:	e5933000 	ldr	r3, [r3]
  104d10:	e51b0010 	ldr	r0, [fp, #-16]
  104d14:	e12fff33 	blx	r3
  104d18:	e50b0008 	str	r0, [fp, #-8]
            if (result != RT_EOK)
  104d1c:	e51b3008 	ldr	r3, [fp, #-8]
  104d20:	e3530000 	cmp	r3, #0
  104d24:	0a000006 	beq	104d44 <ueth_device_init+0xcc>
            {
                printf("To initialize device:%s failed. The error code is %ld\n",
                           dev->parent.name, result);
  104d28:	e51b3010 	ldr	r3, [fp, #-16]
                printf("To initialize device:%s failed. The error code is %ld\n",
  104d2c:	e51b2008 	ldr	r2, [fp, #-8]
  104d30:	e1a01003 	mov	r1, r3
  104d34:	e30509ec 	movw	r0, #23020	; 0x59ec
  104d38:	e3400014 	movt	r0, #20
  104d3c:	eb00e61d 	bl	13e5b8 <printf>
  104d40:	ea000005 	b	104d5c <ueth_device_init+0xe4>
            }
            else
            {
                dev->flag |= RT_DEVICE_FLAG_ACTIVATED;
  104d44:	e51b3010 	ldr	r3, [fp, #-16]
  104d48:	e1d331bc 	ldrh	r3, [r3, #28]
  104d4c:	e3833010 	orr	r3, r3, #16
  104d50:	e6ff2073 	uxth	r2, r3
  104d54:	e51b3010 	ldr	r3, [fp, #-16]
  104d58:	e1c321bc 	strh	r2, [r3, #28]
            }
        }
    }

    return result;
  104d5c:	e51b3008 	ldr	r3, [fp, #-8]
}
  104d60:	e1a00003 	mov	r0, r3
  104d64:	e24bd004 	sub	sp, fp, #4
  104d68:	e8bd8800 	pop	{fp, pc}

00104d6c <ueth_device_close>:

rt_err_t ueth_device_close(rt_device_t dev)
{
  104d6c:	e92d4800 	push	{fp, lr}
  104d70:	e28db004 	add	fp, sp, #4
  104d74:	e24dd010 	sub	sp, sp, #16
  104d78:	e50b0010 	str	r0, [fp, #-16]
    rt_err_t result = RT_EOK;
  104d7c:	e3a03000 	mov	r3, #0
  104d80:	e50b3008 	str	r3, [fp, #-8]

    RT_ASSERT(dev != RT_NULL);
  104d84:	e51b3010 	ldr	r3, [fp, #-16]
  104d88:	e3530000 	cmp	r3, #0
  104d8c:	1a000005 	bne	104da8 <ueth_device_close+0x3c>
  104d90:	e3a02076 	mov	r2, #118	; 0x76
  104d94:	e3051a50 	movw	r1, #23120	; 0x5a50
  104d98:	e3401014 	movt	r1, #20
  104d9c:	e30509b0 	movw	r0, #22960	; 0x59b0
  104da0:	e3400014 	movt	r0, #20
  104da4:	ebfff9fb 	bl	103598 <rt_assert_handler>
    RT_ASSERT(dev->parent.type == RT_Object_Class_Device);
  104da8:	e51b3010 	ldr	r3, [fp, #-16]
  104dac:	e5d33008 	ldrb	r3, [r3, #8]
  104db0:	e3530009 	cmp	r3, #9
  104db4:	0a000005 	beq	104dd0 <ueth_device_close+0x64>
  104db8:	e3a02077 	mov	r2, #119	; 0x77
  104dbc:	e3051a50 	movw	r1, #23120	; 0x5a50
  104dc0:	e3401014 	movt	r1, #20
  104dc4:	e30509c0 	movw	r0, #22976	; 0x59c0
  104dc8:	e3400014 	movt	r0, #20
  104dcc:	ebfff9f1 	bl	103598 <rt_assert_handler>

    if (dev->ref_count == 0)
  104dd0:	e51b3010 	ldr	r3, [fp, #-16]
  104dd4:	e5d33020 	ldrb	r3, [r3, #32]
  104dd8:	e3530000 	cmp	r3, #0
  104ddc:	1a000001 	bne	104de8 <ueth_device_close+0x7c>
        return -RT_ERROR;
  104de0:	e3e03000 	mvn	r3, #0
  104de4:	ea000020 	b	104e6c <ueth_device_close+0x100>

    dev->ref_count--;
  104de8:	e51b3010 	ldr	r3, [fp, #-16]
  104dec:	e5d33020 	ldrb	r3, [r3, #32]
  104df0:	e2433001 	sub	r3, r3, #1
  104df4:	e6ef2073 	uxtb	r2, r3
  104df8:	e51b3010 	ldr	r3, [fp, #-16]
  104dfc:	e5c32020 	strb	r2, [r3, #32]

    if (dev->ref_count != 0)
  104e00:	e51b3010 	ldr	r3, [fp, #-16]
  104e04:	e5d33020 	ldrb	r3, [r3, #32]
  104e08:	e3530000 	cmp	r3, #0
  104e0c:	0a000001 	beq	104e18 <ueth_device_close+0xac>
        return RT_EOK;
  104e10:	e3a03000 	mov	r3, #0
  104e14:	ea000014 	b	104e6c <ueth_device_close+0x100>

    /* call device_close interface */
    if (DEV_CLOSE != RT_NULL)
  104e18:	e51b3010 	ldr	r3, [fp, #-16]
  104e1c:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  104e20:	e5933008 	ldr	r3, [r3, #8]
  104e24:	e3530000 	cmp	r3, #0
  104e28:	0a000005 	beq	104e44 <ueth_device_close+0xd8>
    {
        result = DEV_CLOSE(dev);
  104e2c:	e51b3010 	ldr	r3, [fp, #-16]
  104e30:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  104e34:	e5933008 	ldr	r3, [r3, #8]
  104e38:	e51b0010 	ldr	r0, [fp, #-16]
  104e3c:	e12fff33 	blx	r3
  104e40:	e50b0008 	str	r0, [fp, #-8]
    }

    /* set open flag */
    if (result == RT_EOK || result == -RT_ENOSYS)
  104e44:	e51b3008 	ldr	r3, [fp, #-8]
  104e48:	e3530000 	cmp	r3, #0
  104e4c:	0a000002 	beq	104e5c <ueth_device_close+0xf0>
  104e50:	e51b3008 	ldr	r3, [fp, #-8]
  104e54:	e3730006 	cmn	r3, #6
  104e58:	1a000002 	bne	104e68 <ueth_device_close+0xfc>
        dev->open_flag = RT_DEVICE_OFLAG_CLOSE;
  104e5c:	e51b3010 	ldr	r3, [fp, #-16]
  104e60:	e3a02000 	mov	r2, #0
  104e64:	e1c321be 	strh	r2, [r3, #30]

    return result;
  104e68:	e51b3008 	ldr	r3, [fp, #-8]
}
  104e6c:	e1a00003 	mov	r0, r3
  104e70:	e24bd004 	sub	sp, fp, #4
  104e74:	e8bd8800 	pop	{fp, pc}

00104e78 <ueth_device_control>:

rt_err_t ueth_device_control(rt_device_t dev, int cmd, void *arg)
{
  104e78:	e92d4800 	push	{fp, lr}
  104e7c:	e28db004 	add	fp, sp, #4
  104e80:	e24dd010 	sub	sp, sp, #16
  104e84:	e50b0008 	str	r0, [fp, #-8]
  104e88:	e50b100c 	str	r1, [fp, #-12]
  104e8c:	e50b2010 	str	r2, [fp, #-16]
    RT_ASSERT(dev != RT_NULL);
  104e90:	e51b3008 	ldr	r3, [fp, #-8]
  104e94:	e3530000 	cmp	r3, #0
  104e98:	1a000005 	bne	104eb4 <ueth_device_control+0x3c>
  104e9c:	e3a02090 	mov	r2, #144	; 0x90
  104ea0:	e3051a64 	movw	r1, #23140	; 0x5a64
  104ea4:	e3401014 	movt	r1, #20
  104ea8:	e30509b0 	movw	r0, #22960	; 0x59b0
  104eac:	e3400014 	movt	r0, #20
  104eb0:	ebfff9b8 	bl	103598 <rt_assert_handler>
    RT_ASSERT(dev->parent.type == RT_Object_Class_Device);
  104eb4:	e51b3008 	ldr	r3, [fp, #-8]
  104eb8:	e5d33008 	ldrb	r3, [r3, #8]
  104ebc:	e3530009 	cmp	r3, #9
  104ec0:	0a000005 	beq	104edc <ueth_device_control+0x64>
  104ec4:	e3a02091 	mov	r2, #145	; 0x91
  104ec8:	e3051a64 	movw	r1, #23140	; 0x5a64
  104ecc:	e3401014 	movt	r1, #20
  104ed0:	e30509c0 	movw	r0, #22976	; 0x59c0
  104ed4:	e3400014 	movt	r0, #20
  104ed8:	ebfff9ae 	bl	103598 <rt_assert_handler>

    /* call device_write interface */
    if (DEV_CONTROL != RT_NULL)
  104edc:	e51b3008 	ldr	r3, [fp, #-8]
  104ee0:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  104ee4:	e5933014 	ldr	r3, [r3, #20]
  104ee8:	e3530000 	cmp	r3, #0
  104eec:	0a000008 	beq	104f14 <ueth_device_control+0x9c>
    {
        return DEV_CONTROL(dev, cmd, arg);
  104ef0:	e51b3008 	ldr	r3, [fp, #-8]
  104ef4:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  104ef8:	e5933014 	ldr	r3, [r3, #20]
  104efc:	e51b2010 	ldr	r2, [fp, #-16]
  104f00:	e51b100c 	ldr	r1, [fp, #-12]
  104f04:	e51b0008 	ldr	r0, [fp, #-8]
  104f08:	e12fff33 	blx	r3
  104f0c:	e1a03000 	mov	r3, r0
  104f10:	ea000000 	b	104f18 <ueth_device_control+0xa0>
    }

    return -RT_ENOSYS;
  104f14:	e3e03005 	mvn	r3, #5
  104f18:	e1a00003 	mov	r0, r3
  104f1c:	e24bd004 	sub	sp, fp, #4
  104f20:	e8bd8800 	pop	{fp, pc}

00104f24 <rt_slist_init>:
 * @brief initialize a single list
 *
 * @param l the single list to be initialized
 */
rt_inline void rt_slist_init(rt_slist_t *l)
{
  104f24:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  104f28:	e28db000 	add	fp, sp, #0
  104f2c:	e24dd00c 	sub	sp, sp, #12
  104f30:	e50b0008 	str	r0, [fp, #-8]
    l->next = RT_NULL;
  104f34:	e51b3008 	ldr	r3, [fp, #-8]
  104f38:	e3a02000 	mov	r2, #0
  104f3c:	e5832000 	str	r2, [r3]
}
  104f40:	e320f000 	nop	{0}
  104f44:	e28bd000 	add	sp, fp, #0
  104f48:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  104f4c:	e12fff1e 	bx	lr

00104f50 <rt_slist_append>:

rt_inline void rt_slist_append(rt_slist_t *l, rt_slist_t *n)
{
  104f50:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  104f54:	e28db000 	add	fp, sp, #0
  104f58:	e24dd014 	sub	sp, sp, #20
  104f5c:	e50b0010 	str	r0, [fp, #-16]
  104f60:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    struct rt_slist_node *node;

    node = l;
  104f64:	e51b3010 	ldr	r3, [fp, #-16]
  104f68:	e50b3008 	str	r3, [fp, #-8]
    while (node->next) node = node->next;
  104f6c:	ea000002 	b	104f7c <rt_slist_append+0x2c>
  104f70:	e51b3008 	ldr	r3, [fp, #-8]
  104f74:	e5933000 	ldr	r3, [r3]
  104f78:	e50b3008 	str	r3, [fp, #-8]
  104f7c:	e51b3008 	ldr	r3, [fp, #-8]
  104f80:	e5933000 	ldr	r3, [r3]
  104f84:	e3530000 	cmp	r3, #0
  104f88:	1afffff8 	bne	104f70 <rt_slist_append+0x20>

    /* append the node to the tail */
    node->next = n;
  104f8c:	e51b3008 	ldr	r3, [fp, #-8]
  104f90:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  104f94:	e5832000 	str	r2, [r3]
    n->next = RT_NULL;
  104f98:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  104f9c:	e3a02000 	mov	r2, #0
  104fa0:	e5832000 	str	r2, [r3]
}
  104fa4:	e320f000 	nop	{0}
  104fa8:	e28bd000 	add	sp, fp, #0
  104fac:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  104fb0:	e12fff1e 	bx	lr

00104fb4 <rt_slist_remove>:

    return len;
}

rt_inline rt_slist_t *rt_slist_remove(rt_slist_t *l, rt_slist_t *n)
{
  104fb4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  104fb8:	e28db000 	add	fp, sp, #0
  104fbc:	e24dd014 	sub	sp, sp, #20
  104fc0:	e50b0010 	str	r0, [fp, #-16]
  104fc4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    /* remove slist head */
    struct rt_slist_node *node = l;
  104fc8:	e51b3010 	ldr	r3, [fp, #-16]
  104fcc:	e50b3008 	str	r3, [fp, #-8]
    while (node->next && node->next != n) node = node->next;
  104fd0:	ea000002 	b	104fe0 <rt_slist_remove+0x2c>
  104fd4:	e51b3008 	ldr	r3, [fp, #-8]
  104fd8:	e5933000 	ldr	r3, [r3]
  104fdc:	e50b3008 	str	r3, [fp, #-8]
  104fe0:	e51b3008 	ldr	r3, [fp, #-8]
  104fe4:	e5933000 	ldr	r3, [r3]
  104fe8:	e3530000 	cmp	r3, #0
  104fec:	0a000004 	beq	105004 <rt_slist_remove+0x50>
  104ff0:	e51b3008 	ldr	r3, [fp, #-8]
  104ff4:	e5933000 	ldr	r3, [r3]
  104ff8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  104ffc:	e1520003 	cmp	r2, r3
  105000:	1afffff3 	bne	104fd4 <rt_slist_remove+0x20>

    /* remove node */
    if (node->next != (rt_slist_t *)0) node->next = node->next->next;
  105004:	e51b3008 	ldr	r3, [fp, #-8]
  105008:	e5933000 	ldr	r3, [r3]
  10500c:	e3530000 	cmp	r3, #0
  105010:	0a000004 	beq	105028 <rt_slist_remove+0x74>
  105014:	e51b3008 	ldr	r3, [fp, #-8]
  105018:	e5933000 	ldr	r3, [r3]
  10501c:	e5932000 	ldr	r2, [r3]
  105020:	e51b3008 	ldr	r3, [fp, #-8]
  105024:	e5832000 	str	r2, [r3]

    return l;
  105028:	e51b3010 	ldr	r3, [fp, #-16]
}
  10502c:	e1a00003 	mov	r0, r3
  105030:	e28bd000 	add	sp, fp, #0
  105034:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  105038:	e12fff1e 	bx	lr

0010503c <rt_slist_next>:

    return l;
}

rt_inline rt_slist_t *rt_slist_next(rt_slist_t *n)
{
  10503c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  105040:	e28db000 	add	fp, sp, #0
  105044:	e24dd00c 	sub	sp, sp, #12
  105048:	e50b0008 	str	r0, [fp, #-8]
    return n->next;
  10504c:	e51b3008 	ldr	r3, [fp, #-8]
  105050:	e5933000 	ldr	r3, [r3]
}
  105054:	e1a00003 	mov	r0, r3
  105058:	e28bd000 	add	sp, fp, #0
  10505c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  105060:	e12fff1e 	bx	lr

00105064 <netdev_register>:
 *
 * @return  0: registered successfully
 *         -1: registered failed
 */
int netdev_register(struct netdev *netdev, const char *name, void *user_data)
{
  105064:	e92d4810 	push	{r4, fp, lr}
  105068:	e28db008 	add	fp, sp, #8
  10506c:	e24dd01c 	sub	sp, sp, #28
  105070:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  105074:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  105078:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
    // rt_base_t level;
    uint16_t flags_mask;
    int index;

    RT_ASSERT(netdev);
  10507c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  105080:	e3530000 	cmp	r3, #0
  105084:	1a000005 	bne	1050a0 <netdev_register+0x3c>
  105088:	e3a02032 	mov	r2, #50	; 0x32
  10508c:	e3051dd8 	movw	r1, #24024	; 0x5dd8
  105090:	e3401014 	movt	r1, #20
  105094:	e3050a78 	movw	r0, #23160	; 0x5a78
  105098:	e3400014 	movt	r0, #20
  10509c:	ebfff93d 	bl	103598 <rt_assert_handler>
    RT_ASSERT(name);
  1050a0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1050a4:	e3530000 	cmp	r3, #0
  1050a8:	1a000005 	bne	1050c4 <netdev_register+0x60>
  1050ac:	e3a02033 	mov	r2, #51	; 0x33
  1050b0:	e3051dd8 	movw	r1, #24024	; 0x5dd8
  1050b4:	e3401014 	movt	r1, #20
  1050b8:	e3050a80 	movw	r0, #23168	; 0x5a80
  1050bc:	e3400014 	movt	r0, #20
  1050c0:	ebfff934 	bl	103598 <rt_assert_handler>

    /* clean network interface device */
    flags_mask = NETDEV_FLAG_UP | NETDEV_FLAG_LINK_UP | NETDEV_FLAG_INTERNET_UP | NETDEV_FLAG_DHCP;
  1050c4:	e3003185 	movw	r3, #389	; 0x185
  1050c8:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
    netdev->flags &= ~flags_mask;
  1050cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1050d0:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1050d4:	e6bf2073 	sxth	r2, r3
  1050d8:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  1050dc:	e1e03003 	mvn	r3, r3
  1050e0:	e6bf3073 	sxth	r3, r3
  1050e4:	e0033002 	and	r3, r3, r2
  1050e8:	e6bf3073 	sxth	r3, r3
  1050ec:	e6ff2073 	uxth	r2, r3
  1050f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1050f4:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a

    ip_addr_set_zero(&(netdev->ip_addr));
  1050f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1050fc:	e3a02000 	mov	r2, #0
  105100:	e583200c 	str	r2, [r3, #12]
    ip_addr_set_zero(&(netdev->netmask));
  105104:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  105108:	e3a02000 	mov	r2, #0
  10510c:	e5832010 	str	r2, [r3, #16]
    ip_addr_set_zero(&(netdev->gw));
  105110:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  105114:	e3a02000 	mov	r2, #0
  105118:	e5832014 	str	r2, [r3, #20]
    {
        ip_addr_set_zero(&(netdev->ip6_addr[index]));
        IP_SET_TYPE_VAL(netdev->ip_addr, IPADDR_TYPE_V6);
    }
#endif /* NETDEV_IPV6 */
    for (index = 0; index < NETDEV_DNS_SERVERS_NUM; index++)
  10511c:	e3a03000 	mov	r3, #0
  105120:	e50b3010 	str	r3, [fp, #-16]
  105124:	ea000007 	b	105148 <netdev_register+0xe4>
    {
        ip_addr_set_zero(&(netdev->dns_servers[index]));
  105128:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10512c:	e51b2010 	ldr	r2, [fp, #-16]
  105130:	e2822006 	add	r2, r2, #6
  105134:	e3a01000 	mov	r1, #0
  105138:	e7831102 	str	r1, [r3, r2, lsl #2]
    for (index = 0; index < NETDEV_DNS_SERVERS_NUM; index++)
  10513c:	e51b3010 	ldr	r3, [fp, #-16]
  105140:	e2833001 	add	r3, r3, #1
  105144:	e50b3010 	str	r3, [fp, #-16]
  105148:	e51b3010 	ldr	r3, [fp, #-16]
  10514c:	e3530001 	cmp	r3, #1
  105150:	9afffff4 	bls	105128 <netdev_register+0xc4>
        IP_SET_TYPE_VAL(netdev->ip_addr, IPADDR_TYPE_V4);
    }
    netdev->status_callback = RT_NULL;
  105154:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  105158:	e3a02000 	mov	r2, #0
  10515c:	e5832034 	str	r2, [r3, #52]	; 0x34
    netdev->addr_callback = RT_NULL;
  105160:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  105164:	e3a02000 	mov	r2, #0
  105168:	e5832038 	str	r2, [r3, #56]	; 0x38

    /* fill network interface device */
    rt_strncpy(netdev->name, name, rt_strlen(name));
  10516c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  105170:	e2834004 	add	r4, r3, #4
  105174:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  105178:	ebfff820 	bl	103200 <rt_strlen>
  10517c:	e1a03000 	mov	r3, r0
  105180:	e1a02003 	mov	r2, r3
  105184:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  105188:	e1a00004 	mov	r0, r4
  10518c:	ebfff833 	bl	103260 <rt_strncpy>
    netdev->user_data = user_data;
  105190:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  105194:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  105198:	e5832040 	str	r2, [r3, #64]	; 0x40

    /* initialize current network interface device single list */
    rt_slist_init(&(netdev->list));
  10519c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1051a0:	e1a00003 	mov	r0, r3
  1051a4:	ebffff5e 	bl	104f24 <rt_slist_init>

    // level = rt_hw_interrupt_disable();

    if (netdev_list == RT_NULL)
  1051a8:	e30f3578 	movw	r3, #62840	; 0xf578
  1051ac:	e3403014 	movt	r3, #20
  1051b0:	e5933000 	ldr	r3, [r3]
  1051b4:	e3530000 	cmp	r3, #0
  1051b8:	1a000008 	bne	1051e0 <netdev_register+0x17c>
    {
        netdev_list = netdev;
  1051bc:	e30f3578 	movw	r3, #62840	; 0xf578
  1051c0:	e3403014 	movt	r3, #20
  1051c4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1051c8:	e5832000 	str	r2, [r3]
        netdev_default = netdev;
  1051cc:	e30f3574 	movw	r3, #62836	; 0xf574
  1051d0:	e3403014 	movt	r3, #20
  1051d4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1051d8:	e5832000 	str	r2, [r3]
  1051dc:	ea000007 	b	105200 <netdev_register+0x19c>
    }
    else
    {
        /* tail insertion */
        rt_slist_append(&(netdev_list->list), &(netdev->list));
  1051e0:	e30f3578 	movw	r3, #62840	; 0xf578
  1051e4:	e3403014 	movt	r3, #20
  1051e8:	e5933000 	ldr	r3, [r3]
  1051ec:	e1a02003 	mov	r2, r3
  1051f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1051f4:	e1a01003 	mov	r1, r3
  1051f8:	e1a00002 	mov	r0, r2
  1051fc:	ebffff53 	bl	104f50 <rt_slist_append>
    }

    // rt_hw_interrupt_enable(level);

    return RT_EOK;
  105200:	e3a03000 	mov	r3, #0
}
  105204:	e1a00003 	mov	r0, r3
  105208:	e24bd008 	sub	sp, fp, #8
  10520c:	e8bd8810 	pop	{r4, fp, pc}

00105210 <netdev_unregister>:
 *
 * @return  0: unregistered successfully
 *         -1: unregistered failed
 */
int netdev_unregister(struct netdev *netdev)
{
  105210:	e92d4800 	push	{fp, lr}
  105214:	e28db004 	add	fp, sp, #4
  105218:	e24dd010 	sub	sp, sp, #16
  10521c:	e50b0010 	str	r0, [fp, #-16]
    // rt_base_t level;
    rt_slist_t *node = RT_NULL;
  105220:	e3a03000 	mov	r3, #0
  105224:	e50b3008 	str	r3, [fp, #-8]
    struct netdev *cur_netdev = RT_NULL;
  105228:	e3a03000 	mov	r3, #0
  10522c:	e50b300c 	str	r3, [fp, #-12]

    RT_ASSERT(netdev);
  105230:	e51b3010 	ldr	r3, [fp, #-16]
  105234:	e3530000 	cmp	r3, #0
  105238:	1a000005 	bne	105254 <netdev_unregister+0x44>
  10523c:	e3a02077 	mov	r2, #119	; 0x77
  105240:	e3051de8 	movw	r1, #24040	; 0x5de8
  105244:	e3401014 	movt	r1, #20
  105248:	e3050a78 	movw	r0, #23160	; 0x5a78
  10524c:	e3400014 	movt	r0, #20
  105250:	ebfff8d0 	bl	103598 <rt_assert_handler>

    if (netdev_list == RT_NULL)
  105254:	e30f3578 	movw	r3, #62840	; 0xf578
  105258:	e3403014 	movt	r3, #20
  10525c:	e5933000 	ldr	r3, [r3]
  105260:	e3530000 	cmp	r3, #0
  105264:	1a000001 	bne	105270 <netdev_unregister+0x60>
    {
        return -RT_ERROR;
  105268:	e3e03000 	mvn	r3, #0
  10526c:	ea000045 	b	105388 <netdev_unregister+0x178>
    }

    // level = rt_hw_interrupt_disable();

    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  105270:	e30f3578 	movw	r3, #62840	; 0xf578
  105274:	e3403014 	movt	r3, #20
  105278:	e5933000 	ldr	r3, [r3]
  10527c:	e50b3008 	str	r3, [fp, #-8]
  105280:	ea000030 	b	105348 <netdev_unregister+0x138>
    {
        cur_netdev = rt_slist_entry(node, struct netdev, list);
  105284:	e51b3008 	ldr	r3, [fp, #-8]
  105288:	e50b300c 	str	r3, [fp, #-12]
        if (cur_netdev == netdev)
  10528c:	e51b200c 	ldr	r2, [fp, #-12]
  105290:	e51b3010 	ldr	r3, [fp, #-16]
  105294:	e1520003 	cmp	r2, r3
  105298:	1a000027 	bne	10533c <netdev_unregister+0x12c>
        {
            /* find this network interface device in network interface device list */
            if (netdev_list == netdev && rt_slist_next(&netdev_list->list) == RT_NULL)
  10529c:	e30f3578 	movw	r3, #62840	; 0xf578
  1052a0:	e3403014 	movt	r3, #20
  1052a4:	e5933000 	ldr	r3, [r3]
  1052a8:	e51b2010 	ldr	r2, [fp, #-16]
  1052ac:	e1520003 	cmp	r2, r3
  1052b0:	1a00000c 	bne	1052e8 <netdev_unregister+0xd8>
  1052b4:	e30f3578 	movw	r3, #62840	; 0xf578
  1052b8:	e3403014 	movt	r3, #20
  1052bc:	e5933000 	ldr	r3, [r3]
  1052c0:	e1a00003 	mov	r0, r3
  1052c4:	ebffff5c 	bl	10503c <rt_slist_next>
  1052c8:	e1a03000 	mov	r3, r0
  1052cc:	e3530000 	cmp	r3, #0
  1052d0:	1a000004 	bne	1052e8 <netdev_unregister+0xd8>
            {
                netdev_list = RT_NULL;
  1052d4:	e30f3578 	movw	r3, #62840	; 0xf578
  1052d8:	e3403014 	movt	r3, #20
  1052dc:	e3a02000 	mov	r2, #0
  1052e0:	e5832000 	str	r2, [r3]
  1052e4:	ea000007 	b	105308 <netdev_unregister+0xf8>
            }
            else
            {
                rt_slist_remove(&(netdev_list->list), &(cur_netdev->list));
  1052e8:	e30f3578 	movw	r3, #62840	; 0xf578
  1052ec:	e3403014 	movt	r3, #20
  1052f0:	e5933000 	ldr	r3, [r3]
  1052f4:	e1a02003 	mov	r2, r3
  1052f8:	e51b300c 	ldr	r3, [fp, #-12]
  1052fc:	e1a01003 	mov	r1, r3
  105300:	e1a00002 	mov	r0, r2
  105304:	ebffff2a 	bl	104fb4 <rt_slist_remove>
            }
            if (netdev_default == netdev)
  105308:	e30f3574 	movw	r3, #62836	; 0xf574
  10530c:	e3403014 	movt	r3, #20
  105310:	e5933000 	ldr	r3, [r3]
  105314:	e51b2010 	ldr	r2, [fp, #-16]
  105318:	e1520003 	cmp	r2, r3
  10531c:	1a00000d 	bne	105358 <netdev_unregister+0x148>
            {
                netdev_default = netdev_list;
  105320:	e30f3578 	movw	r3, #62840	; 0xf578
  105324:	e3403014 	movt	r3, #20
  105328:	e5932000 	ldr	r2, [r3]
  10532c:	e30f3574 	movw	r3, #62836	; 0xf574
  105330:	e3403014 	movt	r3, #20
  105334:	e5832000 	str	r2, [r3]
            }
            break;
  105338:	ea000006 	b	105358 <netdev_unregister+0x148>
    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  10533c:	e51b0008 	ldr	r0, [fp, #-8]
  105340:	ebffff3d 	bl	10503c <rt_slist_next>
  105344:	e50b0008 	str	r0, [fp, #-8]
  105348:	e51b3008 	ldr	r3, [fp, #-8]
  10534c:	e3530000 	cmp	r3, #0
  105350:	1affffcb 	bne	105284 <netdev_unregister+0x74>
  105354:	ea000000 	b	10535c <netdev_unregister+0x14c>
            break;
  105358:	e320f000 	nop	{0}
        }
    }
    // rt_hw_interrupt_enable(level);

    if (cur_netdev == netdev)
  10535c:	e51b200c 	ldr	r2, [fp, #-12]
  105360:	e51b3010 	ldr	r3, [fp, #-16]
  105364:	e1520003 	cmp	r2, r3
  105368:	1a000005 	bne	105384 <netdev_unregister+0x174>
    {
#ifdef RT_USING_SAL
        extern int sal_netdev_cleanup(struct netdev *netdev);
        sal_netdev_cleanup(netdev);
  10536c:	e51b0010 	ldr	r0, [fp, #-16]
  105370:	eb000823 	bl	107404 <sal_netdev_cleanup>
#endif
        rt_memset(netdev, 0, sizeof(*netdev));
  105374:	e3a02044 	mov	r2, #68	; 0x44
  105378:	e3a01000 	mov	r1, #0
  10537c:	e51b0010 	ldr	r0, [fp, #-16]
  105380:	ebfff7d0 	bl	1032c8 <rt_memset>
    }

    return -RT_ERROR;
  105384:	e3e03000 	mvn	r3, #0
}
  105388:	e1a00003 	mov	r0, r3
  10538c:	e24bd004 	sub	sp, fp, #4
  105390:	e8bd8800 	pop	{fp, pc}

00105394 <netdev_get_first_by_flags>:
 *
 * @return != NULL: network interface device object
 *            NULL: get failed
 */
struct netdev *netdev_get_first_by_flags(uint16_t flags)
{
  105394:	e92d4800 	push	{fp, lr}
  105398:	e28db004 	add	fp, sp, #4
  10539c:	e24dd010 	sub	sp, sp, #16
  1053a0:	e1a03000 	mov	r3, r0
  1053a4:	e14b30be 	strh	r3, [fp, #-14]
    // rt_base_t level;
    rt_slist_t *node = RT_NULL;
  1053a8:	e3a03000 	mov	r3, #0
  1053ac:	e50b3008 	str	r3, [fp, #-8]
    struct netdev *netdev = RT_NULL;
  1053b0:	e3a03000 	mov	r3, #0
  1053b4:	e50b300c 	str	r3, [fp, #-12]

    if (netdev_list == RT_NULL)
  1053b8:	e30f3578 	movw	r3, #62840	; 0xf578
  1053bc:	e3403014 	movt	r3, #20
  1053c0:	e5933000 	ldr	r3, [r3]
  1053c4:	e3530000 	cmp	r3, #0
  1053c8:	1a000001 	bne	1053d4 <netdev_get_first_by_flags+0x40>
    {
        return RT_NULL;
  1053cc:	e3a03000 	mov	r3, #0
  1053d0:	ea000019 	b	10543c <netdev_get_first_by_flags+0xa8>
    }

    // level = rt_hw_interrupt_disable();

    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  1053d4:	e30f3578 	movw	r3, #62840	; 0xf578
  1053d8:	e3403014 	movt	r3, #20
  1053dc:	e5933000 	ldr	r3, [r3]
  1053e0:	e50b3008 	str	r3, [fp, #-8]
  1053e4:	ea000010 	b	10542c <netdev_get_first_by_flags+0x98>
    {
        netdev = rt_slist_entry(node, struct netdev, list);
  1053e8:	e51b3008 	ldr	r3, [fp, #-8]
  1053ec:	e50b300c 	str	r3, [fp, #-12]
        if (netdev && (netdev->flags & flags) != 0)
  1053f0:	e51b300c 	ldr	r3, [fp, #-12]
  1053f4:	e3530000 	cmp	r3, #0
  1053f8:	0a000008 	beq	105420 <netdev_get_first_by_flags+0x8c>
  1053fc:	e51b300c 	ldr	r3, [fp, #-12]
  105400:	e1d322ba 	ldrh	r2, [r3, #42]	; 0x2a
  105404:	e15b30be 	ldrh	r3, [fp, #-14]
  105408:	e0033002 	and	r3, r3, r2
  10540c:	e6ff3073 	uxth	r3, r3
  105410:	e3530000 	cmp	r3, #0
  105414:	0a000001 	beq	105420 <netdev_get_first_by_flags+0x8c>
        {
            // rt_hw_interrupt_enable(level);
            return netdev;
  105418:	e51b300c 	ldr	r3, [fp, #-12]
  10541c:	ea000006 	b	10543c <netdev_get_first_by_flags+0xa8>
    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  105420:	e51b0008 	ldr	r0, [fp, #-8]
  105424:	ebffff04 	bl	10503c <rt_slist_next>
  105428:	e50b0008 	str	r0, [fp, #-8]
  10542c:	e51b3008 	ldr	r3, [fp, #-8]
  105430:	e3530000 	cmp	r3, #0
  105434:	1affffeb 	bne	1053e8 <netdev_get_first_by_flags+0x54>
        }
    }

    // rt_hw_interrupt_enable(level);

    return RT_NULL;
  105438:	e3a03000 	mov	r3, #0
}
  10543c:	e1a00003 	mov	r0, r3
  105440:	e24bd004 	sub	sp, fp, #4
  105444:	e8bd8800 	pop	{fp, pc}

00105448 <netdev_get_by_ipaddr>:
 *
 * @return != NULL: network interface device object
 *            NULL: get failed
 */
struct netdev *netdev_get_by_ipaddr(ip_addr_t *ip_addr)
{
  105448:	e92d4800 	push	{fp, lr}
  10544c:	e28db004 	add	fp, sp, #4
  105450:	e24dd010 	sub	sp, sp, #16
  105454:	e50b0010 	str	r0, [fp, #-16]
    // rt_base_t level;
    rt_slist_t *node = RT_NULL;
  105458:	e3a03000 	mov	r3, #0
  10545c:	e50b3008 	str	r3, [fp, #-8]
    struct netdev *netdev = RT_NULL;
  105460:	e3a03000 	mov	r3, #0
  105464:	e50b300c 	str	r3, [fp, #-12]

    if (netdev_list == RT_NULL)
  105468:	e30f3578 	movw	r3, #62840	; 0xf578
  10546c:	e3403014 	movt	r3, #20
  105470:	e5933000 	ldr	r3, [r3]
  105474:	e3530000 	cmp	r3, #0
  105478:	1a000001 	bne	105484 <netdev_get_by_ipaddr+0x3c>
    {
        return RT_NULL;
  10547c:	e3a03000 	mov	r3, #0
  105480:	ea000018 	b	1054e8 <netdev_get_by_ipaddr+0xa0>
    }

    // level = rt_hw_interrupt_disable();

    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  105484:	e30f3578 	movw	r3, #62840	; 0xf578
  105488:	e3403014 	movt	r3, #20
  10548c:	e5933000 	ldr	r3, [r3]
  105490:	e50b3008 	str	r3, [fp, #-8]
  105494:	ea00000f 	b	1054d8 <netdev_get_by_ipaddr+0x90>
    {
        netdev = rt_slist_entry(node, struct netdev, list);
  105498:	e51b3008 	ldr	r3, [fp, #-8]
  10549c:	e50b300c 	str	r3, [fp, #-12]
        if (netdev && ip_addr_cmp(&(netdev->ip_addr), ip_addr))
  1054a0:	e51b300c 	ldr	r3, [fp, #-12]
  1054a4:	e3530000 	cmp	r3, #0
  1054a8:	0a000007 	beq	1054cc <netdev_get_by_ipaddr+0x84>
  1054ac:	e51b300c 	ldr	r3, [fp, #-12]
  1054b0:	e593200c 	ldr	r2, [r3, #12]
  1054b4:	e51b3010 	ldr	r3, [fp, #-16]
  1054b8:	e5933000 	ldr	r3, [r3]
  1054bc:	e1520003 	cmp	r2, r3
  1054c0:	1a000001 	bne	1054cc <netdev_get_by_ipaddr+0x84>
        {
            // rt_hw_interrupt_enable(level);
            return netdev;
  1054c4:	e51b300c 	ldr	r3, [fp, #-12]
  1054c8:	ea000006 	b	1054e8 <netdev_get_by_ipaddr+0xa0>
    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  1054cc:	e51b0008 	ldr	r0, [fp, #-8]
  1054d0:	ebfffed9 	bl	10503c <rt_slist_next>
  1054d4:	e50b0008 	str	r0, [fp, #-8]
  1054d8:	e51b3008 	ldr	r3, [fp, #-8]
  1054dc:	e3530000 	cmp	r3, #0
  1054e0:	1affffec 	bne	105498 <netdev_get_by_ipaddr+0x50>
        }
    }

    // rt_hw_interrupt_enable(level);

    return RT_NULL;
  1054e4:	e3a03000 	mov	r3, #0
}
  1054e8:	e1a00003 	mov	r0, r3
  1054ec:	e24bd004 	sub	sp, fp, #4
  1054f0:	e8bd8800 	pop	{fp, pc}

001054f4 <netdev_get_by_name>:
 *
 * @return != NULL: network interface device object
 *            NULL: get failed
 */
struct netdev *netdev_get_by_name(const char *name)
{
  1054f4:	e92d4810 	push	{r4, fp, lr}
  1054f8:	e28db008 	add	fp, sp, #8
  1054fc:	e24dd014 	sub	sp, sp, #20
  105500:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    // rt_base_t level;
    rt_slist_t *node = RT_NULL;
  105504:	e3a03000 	mov	r3, #0
  105508:	e50b3010 	str	r3, [fp, #-16]
    struct netdev *netdev = RT_NULL;
  10550c:	e3a03000 	mov	r3, #0
  105510:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

    if (netdev_list == RT_NULL)
  105514:	e30f3578 	movw	r3, #62840	; 0xf578
  105518:	e3403014 	movt	r3, #20
  10551c:	e5933000 	ldr	r3, [r3]
  105520:	e3530000 	cmp	r3, #0
  105524:	1a000001 	bne	105530 <netdev_get_by_name+0x3c>
    {
        return RT_NULL;
  105528:	e3a03000 	mov	r3, #0
  10552c:	ea000020 	b	1055b4 <netdev_get_by_name+0xc0>
    }

    // level = rt_hw_interrupt_disable();

    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  105530:	e30f3578 	movw	r3, #62840	; 0xf578
  105534:	e3403014 	movt	r3, #20
  105538:	e5933000 	ldr	r3, [r3]
  10553c:	e50b3010 	str	r3, [fp, #-16]
  105540:	ea000017 	b	1055a4 <netdev_get_by_name+0xb0>
    {
        netdev = rt_slist_entry(node, struct netdev, list);
  105544:	e51b3010 	ldr	r3, [fp, #-16]
  105548:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        if (netdev && (rt_strncmp(netdev->name, name, rt_strlen(netdev->name)) == 0))
  10554c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105550:	e3530000 	cmp	r3, #0
  105554:	0a00000f 	beq	105598 <netdev_get_by_name+0xa4>
  105558:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10555c:	e2834004 	add	r4, r3, #4
  105560:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105564:	e2833004 	add	r3, r3, #4
  105568:	e1a00003 	mov	r0, r3
  10556c:	ebfff723 	bl	103200 <rt_strlen>
  105570:	e1a03000 	mov	r3, r0
  105574:	e1a02003 	mov	r2, r3
  105578:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  10557c:	e1a00004 	mov	r0, r4
  105580:	ebfff728 	bl	103228 <rt_strncmp>
  105584:	e1a03000 	mov	r3, r0
  105588:	e3530000 	cmp	r3, #0
  10558c:	1a000001 	bne	105598 <netdev_get_by_name+0xa4>
        {
            // rt_hw_interrupt_enable(level);
            return netdev;
  105590:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105594:	ea000006 	b	1055b4 <netdev_get_by_name+0xc0>
    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  105598:	e51b0010 	ldr	r0, [fp, #-16]
  10559c:	ebfffea6 	bl	10503c <rt_slist_next>
  1055a0:	e50b0010 	str	r0, [fp, #-16]
  1055a4:	e51b3010 	ldr	r3, [fp, #-16]
  1055a8:	e3530000 	cmp	r3, #0
  1055ac:	1affffe4 	bne	105544 <netdev_get_by_name+0x50>
        }
    }

    // rt_hw_interrupt_enable(level);

    return RT_NULL;
  1055b0:	e3a03000 	mov	r3, #0
}
  1055b4:	e1a00003 	mov	r0, r3
  1055b8:	e24bd008 	sub	sp, fp, #8
  1055bc:	e8bd8810 	pop	{r4, fp, pc}

001055c0 <netdev_get_by_family>:
 *
 * @return != NULL: network interface device object
 *            NULL: get failed
 */
struct netdev *netdev_get_by_family(int family)
{
  1055c0:	e92d4800 	push	{fp, lr}
  1055c4:	e28db004 	add	fp, sp, #4
  1055c8:	e24dd018 	sub	sp, sp, #24
  1055cc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    // rt_base_t level;
    rt_slist_t *node = RT_NULL;
  1055d0:	e3a03000 	mov	r3, #0
  1055d4:	e50b3008 	str	r3, [fp, #-8]
    struct netdev *netdev = RT_NULL;
  1055d8:	e3a03000 	mov	r3, #0
  1055dc:	e50b300c 	str	r3, [fp, #-12]
    struct sal_proto_family *pf = RT_NULL;
  1055e0:	e3a03000 	mov	r3, #0
  1055e4:	e50b3010 	str	r3, [fp, #-16]

    if (netdev_list == RT_NULL)
  1055e8:	e30f3578 	movw	r3, #62840	; 0xf578
  1055ec:	e3403014 	movt	r3, #20
  1055f0:	e5933000 	ldr	r3, [r3]
  1055f4:	e3530000 	cmp	r3, #0
  1055f8:	1a000001 	bne	105604 <netdev_get_by_family+0x44>
    {
        return RT_NULL;
  1055fc:	e3a03000 	mov	r3, #0
  105600:	ea000048 	b	105728 <netdev_get_by_family+0x168>
    }

    // level = rt_hw_interrupt_disable();

    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  105604:	e30f3578 	movw	r3, #62840	; 0xf578
  105608:	e3403014 	movt	r3, #20
  10560c:	e5933000 	ldr	r3, [r3]
  105610:	e50b3008 	str	r3, [fp, #-8]
  105614:	ea00001b 	b	105688 <netdev_get_by_family+0xc8>
    {
        netdev = rt_slist_entry(node, struct netdev, list);
  105618:	e51b3008 	ldr	r3, [fp, #-8]
  10561c:	e50b300c 	str	r3, [fp, #-12]
        pf = (struct sal_proto_family *) netdev->sal_user_data;
  105620:	e51b300c 	ldr	r3, [fp, #-12]
  105624:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  105628:	e50b3010 	str	r3, [fp, #-16]
        if (pf && pf->skt_ops && pf->family == family && netdev_is_up(netdev))
  10562c:	e51b3010 	ldr	r3, [fp, #-16]
  105630:	e3530000 	cmp	r3, #0
  105634:	0a000010 	beq	10567c <netdev_get_by_family+0xbc>
  105638:	e51b3010 	ldr	r3, [fp, #-16]
  10563c:	e5933008 	ldr	r3, [r3, #8]
  105640:	e3530000 	cmp	r3, #0
  105644:	0a00000c 	beq	10567c <netdev_get_by_family+0xbc>
  105648:	e51b3010 	ldr	r3, [fp, #-16]
  10564c:	e5933000 	ldr	r3, [r3]
  105650:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  105654:	e1520003 	cmp	r2, r3
  105658:	1a000007 	bne	10567c <netdev_get_by_family+0xbc>
  10565c:	e51b300c 	ldr	r3, [fp, #-12]
  105660:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  105664:	e2033001 	and	r3, r3, #1
  105668:	e6ef3073 	uxtb	r3, r3
  10566c:	e3530000 	cmp	r3, #0
  105670:	0a000001 	beq	10567c <netdev_get_by_family+0xbc>
        {
            // rt_hw_interrupt_enable(level);
            return netdev;
  105674:	e51b300c 	ldr	r3, [fp, #-12]
  105678:	ea00002a 	b	105728 <netdev_get_by_family+0x168>
    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  10567c:	e51b0008 	ldr	r0, [fp, #-8]
  105680:	ebfffe6d 	bl	10503c <rt_slist_next>
  105684:	e50b0008 	str	r0, [fp, #-8]
  105688:	e51b3008 	ldr	r3, [fp, #-8]
  10568c:	e3530000 	cmp	r3, #0
  105690:	1affffe0 	bne	105618 <netdev_get_by_family+0x58>
        }
    }

    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  105694:	e30f3578 	movw	r3, #62840	; 0xf578
  105698:	e3403014 	movt	r3, #20
  10569c:	e5933000 	ldr	r3, [r3]
  1056a0:	e50b3008 	str	r3, [fp, #-8]
  1056a4:	ea00001b 	b	105718 <netdev_get_by_family+0x158>
    {
        netdev = rt_slist_entry(node, struct netdev, list);
  1056a8:	e51b3008 	ldr	r3, [fp, #-8]
  1056ac:	e50b300c 	str	r3, [fp, #-12]
        pf = (struct sal_proto_family *) netdev->sal_user_data;
  1056b0:	e51b300c 	ldr	r3, [fp, #-12]
  1056b4:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  1056b8:	e50b3010 	str	r3, [fp, #-16]
        if (pf && pf->skt_ops && pf->sec_family == family && netdev_is_up(netdev))
  1056bc:	e51b3010 	ldr	r3, [fp, #-16]
  1056c0:	e3530000 	cmp	r3, #0
  1056c4:	0a000010 	beq	10570c <netdev_get_by_family+0x14c>
  1056c8:	e51b3010 	ldr	r3, [fp, #-16]
  1056cc:	e5933008 	ldr	r3, [r3, #8]
  1056d0:	e3530000 	cmp	r3, #0
  1056d4:	0a00000c 	beq	10570c <netdev_get_by_family+0x14c>
  1056d8:	e51b3010 	ldr	r3, [fp, #-16]
  1056dc:	e5933004 	ldr	r3, [r3, #4]
  1056e0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1056e4:	e1520003 	cmp	r2, r3
  1056e8:	1a000007 	bne	10570c <netdev_get_by_family+0x14c>
  1056ec:	e51b300c 	ldr	r3, [fp, #-12]
  1056f0:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1056f4:	e2033001 	and	r3, r3, #1
  1056f8:	e6ef3073 	uxtb	r3, r3
  1056fc:	e3530000 	cmp	r3, #0
  105700:	0a000001 	beq	10570c <netdev_get_by_family+0x14c>
        {
            // rt_hw_interrupt_enable(level);
            return netdev;
  105704:	e51b300c 	ldr	r3, [fp, #-12]
  105708:	ea000006 	b	105728 <netdev_get_by_family+0x168>
    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  10570c:	e51b0008 	ldr	r0, [fp, #-8]
  105710:	ebfffe49 	bl	10503c <rt_slist_next>
  105714:	e50b0008 	str	r0, [fp, #-8]
  105718:	e51b3008 	ldr	r3, [fp, #-8]
  10571c:	e3530000 	cmp	r3, #0
  105720:	1affffe0 	bne	1056a8 <netdev_get_by_family+0xe8>
        }
    }

    // rt_hw_interrupt_enable(level);

    return RT_NULL;
  105724:	e3a03000 	mov	r3, #0
}
  105728:	e1a00003 	mov	r0, r3
  10572c:	e24bd004 	sub	sp, fp, #4
  105730:	e8bd8800 	pop	{fp, pc}

00105734 <netdev_family_get>:
 * @param netdev network interface device object
 *
 * @return the network interface device family type
 */
int netdev_family_get(struct netdev *netdev)
{
  105734:	e92d4800 	push	{fp, lr}
  105738:	e28db004 	add	fp, sp, #4
  10573c:	e24dd008 	sub	sp, sp, #8
  105740:	e50b0008 	str	r0, [fp, #-8]
    RT_ASSERT(netdev);
  105744:	e51b3008 	ldr	r3, [fp, #-8]
  105748:	e3530000 	cmp	r3, #0
  10574c:	1a000005 	bne	105768 <netdev_family_get+0x34>
  105750:	e300214e 	movw	r2, #334	; 0x14e
  105754:	e3051dfc 	movw	r1, #24060	; 0x5dfc
  105758:	e3401014 	movt	r1, #20
  10575c:	e3050a78 	movw	r0, #23160	; 0x5a78
  105760:	e3400014 	movt	r0, #20
  105764:	ebfff78b 	bl	103598 <rt_assert_handler>

    return ((struct sal_proto_family *)netdev->sal_user_data)->family;
  105768:	e51b3008 	ldr	r3, [fp, #-8]
  10576c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  105770:	e5933000 	ldr	r3, [r3]
}
  105774:	e1a00003 	mov	r0, r3
  105778:	e24bd004 	sub	sp, fp, #4
  10577c:	e8bd8800 	pop	{fp, pc}

00105780 <netdev_set_default>:
 * This function will set default network interface device.
 *
 * @param netdev the network interface device to change
 */
void netdev_set_default(struct netdev *netdev)
{
  105780:	e92d4800 	push	{fp, lr}
  105784:	e28db004 	add	fp, sp, #4
  105788:	e24dd008 	sub	sp, sp, #8
  10578c:	e50b0008 	str	r0, [fp, #-8]
    if (netdev)
  105790:	e51b3008 	ldr	r3, [fp, #-8]
  105794:	e3530000 	cmp	r3, #0
  105798:	0a00000d 	beq	1057d4 <netdev_set_default+0x54>
    {
        netdev_default = netdev;
  10579c:	e30f3574 	movw	r3, #62836	; 0xf574
  1057a0:	e3403014 	movt	r3, #20
  1057a4:	e51b2008 	ldr	r2, [fp, #-8]
  1057a8:	e5832000 	str	r2, [r3]

        if (netdev->ops->set_default)
  1057ac:	e51b3008 	ldr	r3, [fp, #-8]
  1057b0:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  1057b4:	e593301c 	ldr	r3, [r3, #28]
  1057b8:	e3530000 	cmp	r3, #0
  1057bc:	0a000004 	beq	1057d4 <netdev_set_default+0x54>
        {
            /* set default network interface device in the current network stack */
            netdev->ops->set_default(netdev);
  1057c0:	e51b3008 	ldr	r3, [fp, #-8]
  1057c4:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  1057c8:	e593301c 	ldr	r3, [r3, #28]
  1057cc:	e51b0008 	ldr	r0, [fp, #-8]
  1057d0:	e12fff33 	blx	r3
        }
        LOG_D("Setting default network interface device name(%s) successfully.", netdev->name);
    }
}
  1057d4:	e320f000 	nop	{0}
  1057d8:	e24bd004 	sub	sp, fp, #4
  1057dc:	e8bd8800 	pop	{fp, pc}

001057e0 <netdev_set_up>:
 *
 * @return  0: set status successfully
 *         -1: set status failed
 */
int netdev_set_up(struct netdev *netdev)
{
  1057e0:	e92d4800 	push	{fp, lr}
  1057e4:	e28db004 	add	fp, sp, #4
  1057e8:	e24dd008 	sub	sp, sp, #8
  1057ec:	e50b0008 	str	r0, [fp, #-8]
    RT_ASSERT(netdev);
  1057f0:	e51b3008 	ldr	r3, [fp, #-8]
  1057f4:	e3530000 	cmp	r3, #0
  1057f8:	1a000005 	bne	105814 <netdev_set_up+0x34>
  1057fc:	e3002173 	movw	r2, #371	; 0x173
  105800:	e3051e10 	movw	r1, #24080	; 0x5e10
  105804:	e3401014 	movt	r1, #20
  105808:	e3050a78 	movw	r0, #23160	; 0x5a78
  10580c:	e3400014 	movt	r0, #20
  105810:	ebfff760 	bl	103598 <rt_assert_handler>

    if (!netdev->ops || !netdev->ops->set_up)
  105814:	e51b3008 	ldr	r3, [fp, #-8]
  105818:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  10581c:	e3530000 	cmp	r3, #0
  105820:	0a000004 	beq	105838 <netdev_set_up+0x58>
  105824:	e51b3008 	ldr	r3, [fp, #-8]
  105828:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  10582c:	e5933000 	ldr	r3, [r3]
  105830:	e3530000 	cmp	r3, #0
  105834:	1a00000d 	bne	105870 <netdev_set_up+0x90>
    {
        LOG_E("The network interface device(%s) not support to set status.", netdev->name);
  105838:	e3050a88 	movw	r0, #23176	; 0x5a88
  10583c:	e3400014 	movt	r0, #20
  105840:	ebfff633 	bl	103114 <rt_kprintf>
  105844:	e51b3008 	ldr	r3, [fp, #-8]
  105848:	e2833004 	add	r3, r3, #4
  10584c:	e1a01003 	mov	r1, r3
  105850:	e3050a9c 	movw	r0, #23196	; 0x5a9c
  105854:	e3400014 	movt	r0, #20
  105858:	ebfff62d 	bl	103114 <rt_kprintf>
  10585c:	e3050ad8 	movw	r0, #23256	; 0x5ad8
  105860:	e3400014 	movt	r0, #20
  105864:	ebfff62a 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105868:	e3e03000 	mvn	r3, #0
  10586c:	ea00000d 	b	1058a8 <netdev_set_up+0xc8>
    }

    /* network interface device status flags check */
    if (netdev_is_up(netdev))
  105870:	e51b3008 	ldr	r3, [fp, #-8]
  105874:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  105878:	e2033001 	and	r3, r3, #1
  10587c:	e6ef3073 	uxtb	r3, r3
  105880:	e3530000 	cmp	r3, #0
  105884:	0a000001 	beq	105890 <netdev_set_up+0xb0>
    {
        return RT_EOK;
  105888:	e3a03000 	mov	r3, #0
  10588c:	ea000005 	b	1058a8 <netdev_set_up+0xc8>
    }

    /* execute enable network interface device operations by network interface device driver */
    return netdev->ops->set_up(netdev);
  105890:	e51b3008 	ldr	r3, [fp, #-8]
  105894:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105898:	e5933000 	ldr	r3, [r3]
  10589c:	e51b0008 	ldr	r0, [fp, #-8]
  1058a0:	e12fff33 	blx	r3
  1058a4:	e1a03000 	mov	r3, r0
}
  1058a8:	e1a00003 	mov	r0, r3
  1058ac:	e24bd004 	sub	sp, fp, #4
  1058b0:	e8bd8800 	pop	{fp, pc}

001058b4 <netdev_set_down>:
 *
 * @return  0: set status successfully
 *         -1: set sttaus failed
 */
int netdev_set_down(struct netdev *netdev)
{
  1058b4:	e92d4800 	push	{fp, lr}
  1058b8:	e28db004 	add	fp, sp, #4
  1058bc:	e24dd008 	sub	sp, sp, #8
  1058c0:	e50b0008 	str	r0, [fp, #-8]
    RT_ASSERT(netdev);
  1058c4:	e51b3008 	ldr	r3, [fp, #-8]
  1058c8:	e3530000 	cmp	r3, #0
  1058cc:	1a000005 	bne	1058e8 <netdev_set_down+0x34>
  1058d0:	e300218e 	movw	r2, #398	; 0x18e
  1058d4:	e3051e20 	movw	r1, #24096	; 0x5e20
  1058d8:	e3401014 	movt	r1, #20
  1058dc:	e3050a78 	movw	r0, #23160	; 0x5a78
  1058e0:	e3400014 	movt	r0, #20
  1058e4:	ebfff72b 	bl	103598 <rt_assert_handler>

    if (!netdev->ops || !netdev->ops->set_down)
  1058e8:	e51b3008 	ldr	r3, [fp, #-8]
  1058ec:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  1058f0:	e3530000 	cmp	r3, #0
  1058f4:	0a000004 	beq	10590c <netdev_set_down+0x58>
  1058f8:	e51b3008 	ldr	r3, [fp, #-8]
  1058fc:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105900:	e5933004 	ldr	r3, [r3, #4]
  105904:	e3530000 	cmp	r3, #0
  105908:	1a00000d 	bne	105944 <netdev_set_down+0x90>
    {
        LOG_E("The network interface device(%s) not support to set status.", netdev->name);
  10590c:	e3050a88 	movw	r0, #23176	; 0x5a88
  105910:	e3400014 	movt	r0, #20
  105914:	ebfff5fe 	bl	103114 <rt_kprintf>
  105918:	e51b3008 	ldr	r3, [fp, #-8]
  10591c:	e2833004 	add	r3, r3, #4
  105920:	e1a01003 	mov	r1, r3
  105924:	e3050a9c 	movw	r0, #23196	; 0x5a9c
  105928:	e3400014 	movt	r0, #20
  10592c:	ebfff5f8 	bl	103114 <rt_kprintf>
  105930:	e3050ad8 	movw	r0, #23256	; 0x5ad8
  105934:	e3400014 	movt	r0, #20
  105938:	ebfff5f5 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  10593c:	e3e03000 	mvn	r3, #0
  105940:	ea00000c 	b	105978 <netdev_set_down+0xc4>
    }

    /* network interface device status flags check */
    if (!netdev_is_up(netdev))
  105944:	e51b3008 	ldr	r3, [fp, #-8]
  105948:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  10594c:	e2033001 	and	r3, r3, #1
  105950:	e3530000 	cmp	r3, #0
  105954:	1a000001 	bne	105960 <netdev_set_down+0xac>
    {
        return RT_EOK;
  105958:	e3a03000 	mov	r3, #0
  10595c:	ea000005 	b	105978 <netdev_set_down+0xc4>
    }

    /* execute disable network interface device operations by network interface driver */
    return netdev->ops->set_down(netdev);
  105960:	e51b3008 	ldr	r3, [fp, #-8]
  105964:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105968:	e5933004 	ldr	r3, [r3, #4]
  10596c:	e51b0008 	ldr	r0, [fp, #-8]
  105970:	e12fff33 	blx	r3
  105974:	e1a03000 	mov	r3, r0
}
  105978:	e1a00003 	mov	r0, r3
  10597c:	e24bd004 	sub	sp, fp, #4
  105980:	e8bd8800 	pop	{fp, pc}

00105984 <netdev_dhcp_enabled>:
 *
 * @return  0: set DHCP status successfully
 *         -1: set DHCP status failed
 */
int netdev_dhcp_enabled(struct netdev *netdev, rt_bool_t is_enabled)
{
  105984:	e92d4800 	push	{fp, lr}
  105988:	e28db004 	add	fp, sp, #4
  10598c:	e24dd008 	sub	sp, sp, #8
  105990:	e50b0008 	str	r0, [fp, #-8]
  105994:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(netdev);
  105998:	e51b3008 	ldr	r3, [fp, #-8]
  10599c:	e3530000 	cmp	r3, #0
  1059a0:	1a000005 	bne	1059bc <netdev_dhcp_enabled+0x38>
  1059a4:	e30021ab 	movw	r2, #427	; 0x1ab
  1059a8:	e3051e30 	movw	r1, #24112	; 0x5e30
  1059ac:	e3401014 	movt	r1, #20
  1059b0:	e3050a78 	movw	r0, #23160	; 0x5a78
  1059b4:	e3400014 	movt	r0, #20
  1059b8:	ebfff6f6 	bl	103598 <rt_assert_handler>

    if (!netdev->ops || !netdev->ops->set_dhcp)
  1059bc:	e51b3008 	ldr	r3, [fp, #-8]
  1059c0:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  1059c4:	e3530000 	cmp	r3, #0
  1059c8:	0a000004 	beq	1059e0 <netdev_dhcp_enabled+0x5c>
  1059cc:	e51b3008 	ldr	r3, [fp, #-8]
  1059d0:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  1059d4:	e5933010 	ldr	r3, [r3, #16]
  1059d8:	e3530000 	cmp	r3, #0
  1059dc:	1a00000d 	bne	105a18 <netdev_dhcp_enabled+0x94>
    {
        LOG_E("The network interface device(%s) not support to set DHCP status.", netdev->name);
  1059e0:	e3050a88 	movw	r0, #23176	; 0x5a88
  1059e4:	e3400014 	movt	r0, #20
  1059e8:	ebfff5c9 	bl	103114 <rt_kprintf>
  1059ec:	e51b3008 	ldr	r3, [fp, #-8]
  1059f0:	e2833004 	add	r3, r3, #4
  1059f4:	e1a01003 	mov	r1, r3
  1059f8:	e3050ae0 	movw	r0, #23264	; 0x5ae0
  1059fc:	e3400014 	movt	r0, #20
  105a00:	ebfff5c3 	bl	103114 <rt_kprintf>
  105a04:	e3050ad8 	movw	r0, #23256	; 0x5ad8
  105a08:	e3400014 	movt	r0, #20
  105a0c:	ebfff5c0 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105a10:	e3e03000 	mvn	r3, #0
  105a14:	ea00000f 	b	105a58 <netdev_dhcp_enabled+0xd4>
    }

    /* network interface device DHCP flags check */
    if (netdev_is_dhcp_enabled(netdev) == is_enabled)
  105a18:	e51b3008 	ldr	r3, [fp, #-8]
  105a1c:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  105a20:	e1a03423 	lsr	r3, r3, #8
  105a24:	e2033001 	and	r3, r3, #1
  105a28:	e51b200c 	ldr	r2, [fp, #-12]
  105a2c:	e1520003 	cmp	r2, r3
  105a30:	1a000001 	bne	105a3c <netdev_dhcp_enabled+0xb8>
    {
        return RT_EOK;
  105a34:	e3a03000 	mov	r3, #0
  105a38:	ea000006 	b	105a58 <netdev_dhcp_enabled+0xd4>
    }

    /* execute network interface device DHCP capability control operations */
    return netdev->ops->set_dhcp(netdev, is_enabled);
  105a3c:	e51b3008 	ldr	r3, [fp, #-8]
  105a40:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105a44:	e5933010 	ldr	r3, [r3, #16]
  105a48:	e51b100c 	ldr	r1, [fp, #-12]
  105a4c:	e51b0008 	ldr	r0, [fp, #-8]
  105a50:	e12fff33 	blx	r3
  105a54:	e1a03000 	mov	r3, r0
}
  105a58:	e1a00003 	mov	r0, r3
  105a5c:	e24bd004 	sub	sp, fp, #4
  105a60:	e8bd8800 	pop	{fp, pc}

00105a64 <netdev_set_ipaddr>:
 *
 * @return  0: set IP address successfully
 *         -1: set IP address failed
 */
int netdev_set_ipaddr(struct netdev *netdev, const ip_addr_t *ip_addr)
{
  105a64:	e92d4810 	push	{r4, fp, lr}
  105a68:	e28db008 	add	fp, sp, #8
  105a6c:	e24dd00c 	sub	sp, sp, #12
  105a70:	e50b0010 	str	r0, [fp, #-16]
  105a74:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    RT_ASSERT(netdev);
  105a78:	e51b3010 	ldr	r3, [fp, #-16]
  105a7c:	e3530000 	cmp	r3, #0
  105a80:	1a000005 	bne	105a9c <netdev_set_ipaddr+0x38>
  105a84:	e3a02f72 	mov	r2, #456	; 0x1c8
  105a88:	e3051e44 	movw	r1, #24132	; 0x5e44
  105a8c:	e3401014 	movt	r1, #20
  105a90:	e3050a78 	movw	r0, #23160	; 0x5a78
  105a94:	e3400014 	movt	r0, #20
  105a98:	ebfff6be 	bl	103598 <rt_assert_handler>
    RT_ASSERT(ip_addr);
  105a9c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105aa0:	e3530000 	cmp	r3, #0
  105aa4:	1a000005 	bne	105ac0 <netdev_set_ipaddr+0x5c>
  105aa8:	e30021c9 	movw	r2, #457	; 0x1c9
  105aac:	e3051e44 	movw	r1, #24132	; 0x5e44
  105ab0:	e3401014 	movt	r1, #20
  105ab4:	e3050b24 	movw	r0, #23332	; 0x5b24
  105ab8:	e3400014 	movt	r0, #20
  105abc:	ebfff6b5 	bl	103598 <rt_assert_handler>

    if (!netdev->ops || !netdev->ops->set_addr_info)
  105ac0:	e51b3010 	ldr	r3, [fp, #-16]
  105ac4:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105ac8:	e3530000 	cmp	r3, #0
  105acc:	0a000004 	beq	105ae4 <netdev_set_ipaddr+0x80>
  105ad0:	e51b3010 	ldr	r3, [fp, #-16]
  105ad4:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105ad8:	e5933008 	ldr	r3, [r3, #8]
  105adc:	e3530000 	cmp	r3, #0
  105ae0:	1a00000d 	bne	105b1c <netdev_set_ipaddr+0xb8>
    {
        LOG_E("The network interface device(%s) not support to set IP address.", netdev->name);
  105ae4:	e3050a88 	movw	r0, #23176	; 0x5a88
  105ae8:	e3400014 	movt	r0, #20
  105aec:	ebfff588 	bl	103114 <rt_kprintf>
  105af0:	e51b3010 	ldr	r3, [fp, #-16]
  105af4:	e2833004 	add	r3, r3, #4
  105af8:	e1a01003 	mov	r1, r3
  105afc:	e3050b2c 	movw	r0, #23340	; 0x5b2c
  105b00:	e3400014 	movt	r0, #20
  105b04:	ebfff582 	bl	103114 <rt_kprintf>
  105b08:	e3050ad8 	movw	r0, #23256	; 0x5ad8
  105b0c:	e3400014 	movt	r0, #20
  105b10:	ebfff57f 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105b14:	e3e03000 	mvn	r3, #0
  105b18:	ea00001d 	b	105b94 <netdev_set_ipaddr+0x130>
    }

    if (netdev_is_dhcp_enabled(netdev))
  105b1c:	e51b3010 	ldr	r3, [fp, #-16]
  105b20:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  105b24:	e1a03423 	lsr	r3, r3, #8
  105b28:	e2033001 	and	r3, r3, #1
  105b2c:	e6ef3073 	uxtb	r3, r3
  105b30:	e3530000 	cmp	r3, #0
  105b34:	0a00000d 	beq	105b70 <netdev_set_ipaddr+0x10c>
    {
        LOG_E("The network interface device(%s) DHCP capability is enable, not support set IP address.", netdev->name);
  105b38:	e3050a88 	movw	r0, #23176	; 0x5a88
  105b3c:	e3400014 	movt	r0, #20
  105b40:	ebfff573 	bl	103114 <rt_kprintf>
  105b44:	e51b3010 	ldr	r3, [fp, #-16]
  105b48:	e2833004 	add	r3, r3, #4
  105b4c:	e1a01003 	mov	r1, r3
  105b50:	e3050b6c 	movw	r0, #23404	; 0x5b6c
  105b54:	e3400014 	movt	r0, #20
  105b58:	ebfff56d 	bl	103114 <rt_kprintf>
  105b5c:	e3050ad8 	movw	r0, #23256	; 0x5ad8
  105b60:	e3400014 	movt	r0, #20
  105b64:	ebfff56a 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105b68:	e3e03000 	mvn	r3, #0
  105b6c:	ea000008 	b	105b94 <netdev_set_ipaddr+0x130>
    }

     /* execute network interface device set IP address operations */
    return netdev->ops->set_addr_info(netdev, (ip_addr_t *)ip_addr, RT_NULL, RT_NULL);
  105b70:	e51b3010 	ldr	r3, [fp, #-16]
  105b74:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105b78:	e5934008 	ldr	r4, [r3, #8]
  105b7c:	e3a03000 	mov	r3, #0
  105b80:	e3a02000 	mov	r2, #0
  105b84:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  105b88:	e51b0010 	ldr	r0, [fp, #-16]
  105b8c:	e12fff34 	blx	r4
  105b90:	e1a03000 	mov	r3, r0
}
  105b94:	e1a00003 	mov	r0, r3
  105b98:	e24bd008 	sub	sp, fp, #8
  105b9c:	e8bd8810 	pop	{r4, fp, pc}

00105ba0 <netdev_set_netmask>:
 *
 * @return  0: set netmask address successfully
 *         -1: set netmask address failed
 */
int netdev_set_netmask(struct netdev *netdev, const ip_addr_t *netmask)
{
  105ba0:	e92d4810 	push	{r4, fp, lr}
  105ba4:	e28db008 	add	fp, sp, #8
  105ba8:	e24dd00c 	sub	sp, sp, #12
  105bac:	e50b0010 	str	r0, [fp, #-16]
  105bb0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    RT_ASSERT(netdev);
  105bb4:	e51b3010 	ldr	r3, [fp, #-16]
  105bb8:	e3530000 	cmp	r3, #0
  105bbc:	1a000005 	bne	105bd8 <netdev_set_netmask+0x38>
  105bc0:	e30021e6 	movw	r2, #486	; 0x1e6
  105bc4:	e3051e58 	movw	r1, #24152	; 0x5e58
  105bc8:	e3401014 	movt	r1, #20
  105bcc:	e3050a78 	movw	r0, #23160	; 0x5a78
  105bd0:	e3400014 	movt	r0, #20
  105bd4:	ebfff66f 	bl	103598 <rt_assert_handler>
    RT_ASSERT(netmask);
  105bd8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105bdc:	e3530000 	cmp	r3, #0
  105be0:	1a000005 	bne	105bfc <netdev_set_netmask+0x5c>
  105be4:	e30021e7 	movw	r2, #487	; 0x1e7
  105be8:	e3051e58 	movw	r1, #24152	; 0x5e58
  105bec:	e3401014 	movt	r1, #20
  105bf0:	e3050bc4 	movw	r0, #23492	; 0x5bc4
  105bf4:	e3400014 	movt	r0, #20
  105bf8:	ebfff666 	bl	103598 <rt_assert_handler>

    if (!netdev->ops || !netdev->ops->set_addr_info)
  105bfc:	e51b3010 	ldr	r3, [fp, #-16]
  105c00:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105c04:	e3530000 	cmp	r3, #0
  105c08:	0a000004 	beq	105c20 <netdev_set_netmask+0x80>
  105c0c:	e51b3010 	ldr	r3, [fp, #-16]
  105c10:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105c14:	e5933008 	ldr	r3, [r3, #8]
  105c18:	e3530000 	cmp	r3, #0
  105c1c:	1a00000d 	bne	105c58 <netdev_set_netmask+0xb8>
    {
        LOG_E("The network interface device(%s) not support to set netmask address.", netdev->name);
  105c20:	e3050a88 	movw	r0, #23176	; 0x5a88
  105c24:	e3400014 	movt	r0, #20
  105c28:	ebfff539 	bl	103114 <rt_kprintf>
  105c2c:	e51b3010 	ldr	r3, [fp, #-16]
  105c30:	e2833004 	add	r3, r3, #4
  105c34:	e1a01003 	mov	r1, r3
  105c38:	e3050bcc 	movw	r0, #23500	; 0x5bcc
  105c3c:	e3400014 	movt	r0, #20
  105c40:	ebfff533 	bl	103114 <rt_kprintf>
  105c44:	e3050ad8 	movw	r0, #23256	; 0x5ad8
  105c48:	e3400014 	movt	r0, #20
  105c4c:	ebfff530 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105c50:	e3e03000 	mvn	r3, #0
  105c54:	ea00001d 	b	105cd0 <netdev_set_netmask+0x130>
    }

    if (netdev_is_dhcp_enabled(netdev))
  105c58:	e51b3010 	ldr	r3, [fp, #-16]
  105c5c:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  105c60:	e1a03423 	lsr	r3, r3, #8
  105c64:	e2033001 	and	r3, r3, #1
  105c68:	e6ef3073 	uxtb	r3, r3
  105c6c:	e3530000 	cmp	r3, #0
  105c70:	0a00000d 	beq	105cac <netdev_set_netmask+0x10c>
    {
        LOG_E("The network interface device(%s) DHCP capability is enable, not support set netmask address.", netdev->name);
  105c74:	e3050a88 	movw	r0, #23176	; 0x5a88
  105c78:	e3400014 	movt	r0, #20
  105c7c:	ebfff524 	bl	103114 <rt_kprintf>
  105c80:	e51b3010 	ldr	r3, [fp, #-16]
  105c84:	e2833004 	add	r3, r3, #4
  105c88:	e1a01003 	mov	r1, r3
  105c8c:	e3050c14 	movw	r0, #23572	; 0x5c14
  105c90:	e3400014 	movt	r0, #20
  105c94:	ebfff51e 	bl	103114 <rt_kprintf>
  105c98:	e3050ad8 	movw	r0, #23256	; 0x5ad8
  105c9c:	e3400014 	movt	r0, #20
  105ca0:	ebfff51b 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105ca4:	e3e03000 	mvn	r3, #0
  105ca8:	ea000008 	b	105cd0 <netdev_set_netmask+0x130>
    }

    /* execute network interface device set netmask address operations */
    return netdev->ops->set_addr_info(netdev, RT_NULL, (ip_addr_t *)netmask, RT_NULL);
  105cac:	e51b3010 	ldr	r3, [fp, #-16]
  105cb0:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105cb4:	e5934008 	ldr	r4, [r3, #8]
  105cb8:	e3a03000 	mov	r3, #0
  105cbc:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  105cc0:	e3a01000 	mov	r1, #0
  105cc4:	e51b0010 	ldr	r0, [fp, #-16]
  105cc8:	e12fff34 	blx	r4
  105ccc:	e1a03000 	mov	r3, r0
}
  105cd0:	e1a00003 	mov	r0, r3
  105cd4:	e24bd008 	sub	sp, fp, #8
  105cd8:	e8bd8810 	pop	{r4, fp, pc}

00105cdc <netdev_set_gw>:
 *
 * @return  0: set gateway address successfully
 *         -1: set gateway address failed
 */
int netdev_set_gw(struct netdev *netdev, const ip_addr_t *gw)
{
  105cdc:	e92d4810 	push	{r4, fp, lr}
  105ce0:	e28db008 	add	fp, sp, #8
  105ce4:	e24dd00c 	sub	sp, sp, #12
  105ce8:	e50b0010 	str	r0, [fp, #-16]
  105cec:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    RT_ASSERT(netdev);
  105cf0:	e51b3010 	ldr	r3, [fp, #-16]
  105cf4:	e3530000 	cmp	r3, #0
  105cf8:	1a000005 	bne	105d14 <netdev_set_gw+0x38>
  105cfc:	e3a02f81 	mov	r2, #516	; 0x204
  105d00:	e3051e6c 	movw	r1, #24172	; 0x5e6c
  105d04:	e3401014 	movt	r1, #20
  105d08:	e3050a78 	movw	r0, #23160	; 0x5a78
  105d0c:	e3400014 	movt	r0, #20
  105d10:	ebfff620 	bl	103598 <rt_assert_handler>
    RT_ASSERT(gw);
  105d14:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105d18:	e3530000 	cmp	r3, #0
  105d1c:	1a000005 	bne	105d38 <netdev_set_gw+0x5c>
  105d20:	e3002205 	movw	r2, #517	; 0x205
  105d24:	e3051e6c 	movw	r1, #24172	; 0x5e6c
  105d28:	e3401014 	movt	r1, #20
  105d2c:	e3050c74 	movw	r0, #23668	; 0x5c74
  105d30:	e3400014 	movt	r0, #20
  105d34:	ebfff617 	bl	103598 <rt_assert_handler>

    if (!netdev->ops || !netdev->ops->set_addr_info)
  105d38:	e51b3010 	ldr	r3, [fp, #-16]
  105d3c:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105d40:	e3530000 	cmp	r3, #0
  105d44:	0a000004 	beq	105d5c <netdev_set_gw+0x80>
  105d48:	e51b3010 	ldr	r3, [fp, #-16]
  105d4c:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105d50:	e5933008 	ldr	r3, [r3, #8]
  105d54:	e3530000 	cmp	r3, #0
  105d58:	1a00000d 	bne	105d94 <netdev_set_gw+0xb8>
    {
        LOG_E("The network interface device(%s) not support to set gateway address.", netdev->name);
  105d5c:	e3050a88 	movw	r0, #23176	; 0x5a88
  105d60:	e3400014 	movt	r0, #20
  105d64:	ebfff4ea 	bl	103114 <rt_kprintf>
  105d68:	e51b3010 	ldr	r3, [fp, #-16]
  105d6c:	e2833004 	add	r3, r3, #4
  105d70:	e1a01003 	mov	r1, r3
  105d74:	e3050c78 	movw	r0, #23672	; 0x5c78
  105d78:	e3400014 	movt	r0, #20
  105d7c:	ebfff4e4 	bl	103114 <rt_kprintf>
  105d80:	e3050ad8 	movw	r0, #23256	; 0x5ad8
  105d84:	e3400014 	movt	r0, #20
  105d88:	ebfff4e1 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105d8c:	e3e03000 	mvn	r3, #0
  105d90:	ea00001d 	b	105e0c <netdev_set_gw+0x130>
    }

    if (netdev_is_dhcp_enabled(netdev))
  105d94:	e51b3010 	ldr	r3, [fp, #-16]
  105d98:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  105d9c:	e1a03423 	lsr	r3, r3, #8
  105da0:	e2033001 	and	r3, r3, #1
  105da4:	e6ef3073 	uxtb	r3, r3
  105da8:	e3530000 	cmp	r3, #0
  105dac:	0a00000d 	beq	105de8 <netdev_set_gw+0x10c>
    {
        LOG_E("The network interface device(%s) DHCP capability is enable, not support set gateway address.", netdev->name);
  105db0:	e3050a88 	movw	r0, #23176	; 0x5a88
  105db4:	e3400014 	movt	r0, #20
  105db8:	ebfff4d5 	bl	103114 <rt_kprintf>
  105dbc:	e51b3010 	ldr	r3, [fp, #-16]
  105dc0:	e2833004 	add	r3, r3, #4
  105dc4:	e1a01003 	mov	r1, r3
  105dc8:	e3050cc0 	movw	r0, #23744	; 0x5cc0
  105dcc:	e3400014 	movt	r0, #20
  105dd0:	ebfff4cf 	bl	103114 <rt_kprintf>
  105dd4:	e3050ad8 	movw	r0, #23256	; 0x5ad8
  105dd8:	e3400014 	movt	r0, #20
  105ddc:	ebfff4cc 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105de0:	e3e03000 	mvn	r3, #0
  105de4:	ea000008 	b	105e0c <netdev_set_gw+0x130>
    }

    /* execute network interface device set gateway address operations */
    return netdev->ops->set_addr_info(netdev, RT_NULL, RT_NULL, (ip_addr_t *)gw);
  105de8:	e51b3010 	ldr	r3, [fp, #-16]
  105dec:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105df0:	e5934008 	ldr	r4, [r3, #8]
  105df4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105df8:	e3a02000 	mov	r2, #0
  105dfc:	e3a01000 	mov	r1, #0
  105e00:	e51b0010 	ldr	r0, [fp, #-16]
  105e04:	e12fff34 	blx	r4
  105e08:	e1a03000 	mov	r3, r0
}
  105e0c:	e1a00003 	mov	r0, r3
  105e10:	e24bd008 	sub	sp, fp, #8
  105e14:	e8bd8810 	pop	{r4, fp, pc}

00105e18 <netdev_set_dns_server>:
 *
 * @return  0: set netmask address successfully
 *         -1: set netmask address failed
 */
int netdev_set_dns_server(struct netdev *netdev, uint8_t dns_num, const ip_addr_t *dns_server)
{
  105e18:	e92d4800 	push	{fp, lr}
  105e1c:	e28db004 	add	fp, sp, #4
  105e20:	e24dd010 	sub	sp, sp, #16
  105e24:	e50b0008 	str	r0, [fp, #-8]
  105e28:	e1a03001 	mov	r3, r1
  105e2c:	e50b2010 	str	r2, [fp, #-16]
  105e30:	e54b3009 	strb	r3, [fp, #-9]
    RT_ASSERT(netdev);
  105e34:	e51b3008 	ldr	r3, [fp, #-8]
  105e38:	e3530000 	cmp	r3, #0
  105e3c:	1a000005 	bne	105e58 <netdev_set_dns_server+0x40>
  105e40:	e3002222 	movw	r2, #546	; 0x222
  105e44:	e3051e7c 	movw	r1, #24188	; 0x5e7c
  105e48:	e3401014 	movt	r1, #20
  105e4c:	e3050a78 	movw	r0, #23160	; 0x5a78
  105e50:	e3400014 	movt	r0, #20
  105e54:	ebfff5cf 	bl	103598 <rt_assert_handler>
    RT_ASSERT(dns_server);
  105e58:	e51b3010 	ldr	r3, [fp, #-16]
  105e5c:	e3530000 	cmp	r3, #0
  105e60:	1a000005 	bne	105e7c <netdev_set_dns_server+0x64>
  105e64:	e3002223 	movw	r2, #547	; 0x223
  105e68:	e3051e7c 	movw	r1, #24188	; 0x5e7c
  105e6c:	e3401014 	movt	r1, #20
  105e70:	e3050d20 	movw	r0, #23840	; 0x5d20
  105e74:	e3400014 	movt	r0, #20
  105e78:	ebfff5c6 	bl	103598 <rt_assert_handler>

    if (dns_num >= NETDEV_DNS_SERVERS_NUM)
  105e7c:	e55b3009 	ldrb	r3, [fp, #-9]
  105e80:	e3530001 	cmp	r3, #1
  105e84:	9a00000e 	bls	105ec4 <netdev_set_dns_server+0xac>
    {
        LOG_E("The number of DNS servers(%d) set exceeds the maximum number(%d).", dns_num + 1, NETDEV_DNS_SERVERS_NUM);
  105e88:	e3050a88 	movw	r0, #23176	; 0x5a88
  105e8c:	e3400014 	movt	r0, #20
  105e90:	ebfff49f 	bl	103114 <rt_kprintf>
  105e94:	e55b3009 	ldrb	r3, [fp, #-9]
  105e98:	e2833001 	add	r3, r3, #1
  105e9c:	e3a02002 	mov	r2, #2
  105ea0:	e1a01003 	mov	r1, r3
  105ea4:	e3050d2c 	movw	r0, #23852	; 0x5d2c
  105ea8:	e3400014 	movt	r0, #20
  105eac:	ebfff498 	bl	103114 <rt_kprintf>
  105eb0:	e3050ad8 	movw	r0, #23256	; 0x5ad8
  105eb4:	e3400014 	movt	r0, #20
  105eb8:	ebfff495 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105ebc:	e3e03000 	mvn	r3, #0
  105ec0:	ea00001e 	b	105f40 <netdev_set_dns_server+0x128>
    }

    if (!netdev->ops || !netdev->ops->set_dns_server)
  105ec4:	e51b3008 	ldr	r3, [fp, #-8]
  105ec8:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105ecc:	e3530000 	cmp	r3, #0
  105ed0:	0a000004 	beq	105ee8 <netdev_set_dns_server+0xd0>
  105ed4:	e51b3008 	ldr	r3, [fp, #-8]
  105ed8:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105edc:	e593300c 	ldr	r3, [r3, #12]
  105ee0:	e3530000 	cmp	r3, #0
  105ee4:	1a00000d 	bne	105f20 <netdev_set_dns_server+0x108>
    {
        LOG_E("The network interface device(%s) not support to set DNS server address.", netdev->name);
  105ee8:	e3050a88 	movw	r0, #23176	; 0x5a88
  105eec:	e3400014 	movt	r0, #20
  105ef0:	ebfff487 	bl	103114 <rt_kprintf>
  105ef4:	e51b3008 	ldr	r3, [fp, #-8]
  105ef8:	e2833004 	add	r3, r3, #4
  105efc:	e1a01003 	mov	r1, r3
  105f00:	e3050d70 	movw	r0, #23920	; 0x5d70
  105f04:	e3400014 	movt	r0, #20
  105f08:	ebfff481 	bl	103114 <rt_kprintf>
  105f0c:	e3050ad8 	movw	r0, #23256	; 0x5ad8
  105f10:	e3400014 	movt	r0, #20
  105f14:	ebfff47e 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105f18:	e3e03000 	mvn	r3, #0
  105f1c:	ea000007 	b	105f40 <netdev_set_dns_server+0x128>
    }

    /* execute network interface device set DNS server address operations */
    return netdev->ops->set_dns_server(netdev, dns_num, (ip_addr_t *)dns_server);
  105f20:	e51b3008 	ldr	r3, [fp, #-8]
  105f24:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105f28:	e593300c 	ldr	r3, [r3, #12]
  105f2c:	e55b1009 	ldrb	r1, [fp, #-9]
  105f30:	e51b2010 	ldr	r2, [fp, #-16]
  105f34:	e51b0008 	ldr	r0, [fp, #-8]
  105f38:	e12fff33 	blx	r3
  105f3c:	e1a03000 	mov	r3, r0
}
  105f40:	e1a00003 	mov	r0, r3
  105f44:	e24bd004 	sub	sp, fp, #4
  105f48:	e8bd8800 	pop	{fp, pc}

00105f4c <netdev_set_status_callback>:
 *
 * @param netdev the network interface device to change
 * @param status_callback the callback be called when the status has been changed.
 */
void netdev_set_status_callback(struct netdev *netdev, netdev_callback_fn status_callback)
{
  105f4c:	e92d4800 	push	{fp, lr}
  105f50:	e28db004 	add	fp, sp, #4
  105f54:	e24dd008 	sub	sp, sp, #8
  105f58:	e50b0008 	str	r0, [fp, #-8]
  105f5c:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(netdev);
  105f60:	e51b3008 	ldr	r3, [fp, #-8]
  105f64:	e3530000 	cmp	r3, #0
  105f68:	1a000005 	bne	105f84 <netdev_set_status_callback+0x38>
  105f6c:	e300223d 	movw	r2, #573	; 0x23d
  105f70:	e3051e94 	movw	r1, #24212	; 0x5e94
  105f74:	e3401014 	movt	r1, #20
  105f78:	e3050a78 	movw	r0, #23160	; 0x5a78
  105f7c:	e3400014 	movt	r0, #20
  105f80:	ebfff584 	bl	103598 <rt_assert_handler>
    RT_ASSERT(status_callback);
  105f84:	e51b300c 	ldr	r3, [fp, #-12]
  105f88:	e3530000 	cmp	r3, #0
  105f8c:	1a000005 	bne	105fa8 <netdev_set_status_callback+0x5c>
  105f90:	e300223e 	movw	r2, #574	; 0x23e
  105f94:	e3051e94 	movw	r1, #24212	; 0x5e94
  105f98:	e3401014 	movt	r1, #20
  105f9c:	e3050db8 	movw	r0, #23992	; 0x5db8
  105fa0:	e3400014 	movt	r0, #20
  105fa4:	ebfff57b 	bl	103598 <rt_assert_handler>

    netdev->status_callback = status_callback;
  105fa8:	e51b3008 	ldr	r3, [fp, #-8]
  105fac:	e51b200c 	ldr	r2, [fp, #-12]
  105fb0:	e5832034 	str	r2, [r3, #52]	; 0x34
}
  105fb4:	e320f000 	nop	{0}
  105fb8:	e24bd004 	sub	sp, fp, #4
  105fbc:	e8bd8800 	pop	{fp, pc}

00105fc0 <netdev_set_addr_callback>:
 *
 * @param netdev the network interface device to change
 * @param addr_callback the callback be called when the address has been changed.
 */
void netdev_set_addr_callback(struct netdev *netdev, netdev_callback_fn addr_callback)
{
  105fc0:	e92d4800 	push	{fp, lr}
  105fc4:	e28db004 	add	fp, sp, #4
  105fc8:	e24dd008 	sub	sp, sp, #8
  105fcc:	e50b0008 	str	r0, [fp, #-8]
  105fd0:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(netdev);
  105fd4:	e51b3008 	ldr	r3, [fp, #-8]
  105fd8:	e3530000 	cmp	r3, #0
  105fdc:	1a000005 	bne	105ff8 <netdev_set_addr_callback+0x38>
  105fe0:	e300224b 	movw	r2, #587	; 0x24b
  105fe4:	e3051eb0 	movw	r1, #24240	; 0x5eb0
  105fe8:	e3401014 	movt	r1, #20
  105fec:	e3050a78 	movw	r0, #23160	; 0x5a78
  105ff0:	e3400014 	movt	r0, #20
  105ff4:	ebfff567 	bl	103598 <rt_assert_handler>
    RT_ASSERT(addr_callback);
  105ff8:	e51b300c 	ldr	r3, [fp, #-12]
  105ffc:	e3530000 	cmp	r3, #0
  106000:	1a000005 	bne	10601c <netdev_set_addr_callback+0x5c>
  106004:	e3a02f93 	mov	r2, #588	; 0x24c
  106008:	e3051eb0 	movw	r1, #24240	; 0x5eb0
  10600c:	e3401014 	movt	r1, #20
  106010:	e3050dc8 	movw	r0, #24008	; 0x5dc8
  106014:	e3400014 	movt	r0, #20
  106018:	ebfff55e 	bl	103598 <rt_assert_handler>

    netdev->addr_callback = addr_callback;
  10601c:	e51b3008 	ldr	r3, [fp, #-8]
  106020:	e51b200c 	ldr	r2, [fp, #-12]
  106024:	e5832038 	str	r2, [r3, #56]	; 0x38
}
  106028:	e320f000 	nop	{0}
  10602c:	e24bd004 	sub	sp, fp, #4
  106030:	e8bd8800 	pop	{fp, pc}

00106034 <netdev_low_level_set_ipaddr>:
 *
 * @param netdev the network interface device to change
 * @param ipaddr the new IP address
 */
void netdev_low_level_set_ipaddr(struct netdev *netdev, const ip_addr_t *ip_addr)
{
  106034:	e92d4800 	push	{fp, lr}
  106038:	e28db004 	add	fp, sp, #4
  10603c:	e24dd008 	sub	sp, sp, #8
  106040:	e50b0008 	str	r0, [fp, #-8]
  106044:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(ip_addr);
  106048:	e51b300c 	ldr	r3, [fp, #-12]
  10604c:	e3530000 	cmp	r3, #0
  106050:	1a000005 	bne	10606c <netdev_low_level_set_ipaddr+0x38>
  106054:	e300225b 	movw	r2, #603	; 0x25b
  106058:	e3051ecc 	movw	r1, #24268	; 0x5ecc
  10605c:	e3401014 	movt	r1, #20
  106060:	e3050b24 	movw	r0, #23332	; 0x5b24
  106064:	e3400014 	movt	r0, #20
  106068:	ebfff54a 	bl	103598 <rt_assert_handler>

    if (netdev && ip_addr_cmp(&(netdev->ip_addr), ip_addr) == 0)
  10606c:	e51b3008 	ldr	r3, [fp, #-8]
  106070:	e3530000 	cmp	r3, #0
  106074:	0a000025 	beq	106110 <netdev_low_level_set_ipaddr+0xdc>
  106078:	e51b3008 	ldr	r3, [fp, #-8]
  10607c:	e593200c 	ldr	r2, [r3, #12]
  106080:	e51b300c 	ldr	r3, [fp, #-12]
  106084:	e5933000 	ldr	r3, [r3]
  106088:	e1520003 	cmp	r2, r3
  10608c:	0a00001f 	beq	106110 <netdev_low_level_set_ipaddr+0xdc>
    {
        ip_addr_copy(netdev->ip_addr, *ip_addr);
  106090:	e51b300c 	ldr	r3, [fp, #-12]
  106094:	e5932000 	ldr	r2, [r3]
  106098:	e51b3008 	ldr	r3, [fp, #-8]
  10609c:	e583200c 	str	r2, [r3, #12]

#ifdef RT_USING_SAL
        /* set network interface device flags to internet up */
        if (netdev_is_up(netdev) && netdev_is_link_up(netdev))
  1060a0:	e51b3008 	ldr	r3, [fp, #-8]
  1060a4:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1060a8:	e2033001 	and	r3, r3, #1
  1060ac:	e6ef3073 	uxtb	r3, r3
  1060b0:	e3530000 	cmp	r3, #0
  1060b4:	0a00000c 	beq	1060ec <netdev_low_level_set_ipaddr+0xb8>
  1060b8:	e51b3008 	ldr	r3, [fp, #-8]
  1060bc:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1060c0:	e1a03123 	lsr	r3, r3, #2
  1060c4:	e2033001 	and	r3, r3, #1
  1060c8:	e6ef3073 	uxtb	r3, r3
  1060cc:	e3530000 	cmp	r3, #0
  1060d0:	0a000005 	beq	1060ec <netdev_low_level_set_ipaddr+0xb8>
        {
            // sal_check_netdev_internet_up(netdev);
            // check_netdev_internet_up_work(netdev);
            netdev->flags |= NETDEV_FLAG_INTERNET_UP;
  1060d4:	e51b3008 	ldr	r3, [fp, #-8]
  1060d8:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1060dc:	e3833080 	orr	r3, r3, #128	; 0x80
  1060e0:	e6ff2073 	uxth	r2, r3
  1060e4:	e51b3008 	ldr	r3, [fp, #-8]
  1060e8:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
        }
#endif /* RT_USING_SAL */

        /* execute IP address change callback function */
        if (netdev->addr_callback)
  1060ec:	e51b3008 	ldr	r3, [fp, #-8]
  1060f0:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  1060f4:	e3530000 	cmp	r3, #0
  1060f8:	0a000004 	beq	106110 <netdev_low_level_set_ipaddr+0xdc>
        {
            netdev->addr_callback(netdev, NETDEV_CB_ADDR_IP);
  1060fc:	e51b3008 	ldr	r3, [fp, #-8]
  106100:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  106104:	e3a01000 	mov	r1, #0
  106108:	e51b0008 	ldr	r0, [fp, #-8]
  10610c:	e12fff33 	blx	r3
        }
    }
}
  106110:	e320f000 	nop	{0}
  106114:	e24bd004 	sub	sp, fp, #4
  106118:	e8bd8800 	pop	{fp, pc}

0010611c <netdev_low_level_set_netmask>:
 *
 * @param netdev the network interface device to change
 * @param netmask the new netmask address
 */
void netdev_low_level_set_netmask(struct netdev *netdev, const ip_addr_t *netmask)
{
  10611c:	e92d4800 	push	{fp, lr}
  106120:	e28db004 	add	fp, sp, #4
  106124:	e24dd008 	sub	sp, sp, #8
  106128:	e50b0008 	str	r0, [fp, #-8]
  10612c:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(netmask);
  106130:	e51b300c 	ldr	r3, [fp, #-12]
  106134:	e3530000 	cmp	r3, #0
  106138:	1a000005 	bne	106154 <netdev_low_level_set_netmask+0x38>
  10613c:	e3a02f9f 	mov	r2, #636	; 0x27c
  106140:	e3051ee8 	movw	r1, #24296	; 0x5ee8
  106144:	e3401014 	movt	r1, #20
  106148:	e3050bc4 	movw	r0, #23492	; 0x5bc4
  10614c:	e3400014 	movt	r0, #20
  106150:	ebfff510 	bl	103598 <rt_assert_handler>

    if (netdev && ip_addr_cmp(&(netdev->netmask), netmask) == 0)
  106154:	e51b3008 	ldr	r3, [fp, #-8]
  106158:	e3530000 	cmp	r3, #0
  10615c:	0a00002d 	beq	106218 <netdev_low_level_set_netmask+0xfc>
  106160:	e51b3008 	ldr	r3, [fp, #-8]
  106164:	e5932010 	ldr	r2, [r3, #16]
  106168:	e51b300c 	ldr	r3, [fp, #-12]
  10616c:	e5933000 	ldr	r3, [r3]
  106170:	e1520003 	cmp	r2, r3
  106174:	0a000027 	beq	106218 <netdev_low_level_set_netmask+0xfc>
    {
        ip_addr_copy(netdev->netmask, *netmask);
  106178:	e51b300c 	ldr	r3, [fp, #-12]
  10617c:	e5932000 	ldr	r2, [r3]
  106180:	e51b3008 	ldr	r3, [fp, #-8]
  106184:	e5832010 	str	r2, [r3, #16]

#ifdef RT_USING_SAL
        /* set network interface device flags to internet up */
        if (netdev_is_up(netdev) && netdev_is_link_up(netdev) &&
  106188:	e51b3008 	ldr	r3, [fp, #-8]
  10618c:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106190:	e2033001 	and	r3, r3, #1
  106194:	e6ef3073 	uxtb	r3, r3
  106198:	e3530000 	cmp	r3, #0
  10619c:	0a000014 	beq	1061f4 <netdev_low_level_set_netmask+0xd8>
  1061a0:	e51b3008 	ldr	r3, [fp, #-8]
  1061a4:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1061a8:	e1a03123 	lsr	r3, r3, #2
  1061ac:	e2033001 	and	r3, r3, #1
  1061b0:	e6ef3073 	uxtb	r3, r3
  1061b4:	e3530000 	cmp	r3, #0
  1061b8:	0a00000d 	beq	1061f4 <netdev_low_level_set_netmask+0xd8>
                !ip_addr_isany(&(netdev->ip_addr)))
  1061bc:	e51b3008 	ldr	r3, [fp, #-8]
  1061c0:	e283300c 	add	r3, r3, #12
        if (netdev_is_up(netdev) && netdev_is_link_up(netdev) &&
  1061c4:	e3530000 	cmp	r3, #0
  1061c8:	0a000009 	beq	1061f4 <netdev_low_level_set_netmask+0xd8>
                !ip_addr_isany(&(netdev->ip_addr)))
  1061cc:	e51b3008 	ldr	r3, [fp, #-8]
  1061d0:	e593300c 	ldr	r3, [r3, #12]
  1061d4:	e3530000 	cmp	r3, #0
  1061d8:	0a000005 	beq	1061f4 <netdev_low_level_set_netmask+0xd8>
        {
            // sal_check_netdev_internet_up(netdev);
            // check_netdev_internet_up_work(netdev);
            netdev->flags |= NETDEV_FLAG_INTERNET_UP;
  1061dc:	e51b3008 	ldr	r3, [fp, #-8]
  1061e0:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1061e4:	e3833080 	orr	r3, r3, #128	; 0x80
  1061e8:	e6ff2073 	uxth	r2, r3
  1061ec:	e51b3008 	ldr	r3, [fp, #-8]
  1061f0:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
        }
#endif /* RT_USING_SAL */

        /* execute netmask address change callback function */
        if (netdev->addr_callback)
  1061f4:	e51b3008 	ldr	r3, [fp, #-8]
  1061f8:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  1061fc:	e3530000 	cmp	r3, #0
  106200:	0a000004 	beq	106218 <netdev_low_level_set_netmask+0xfc>
        {
            netdev->addr_callback(netdev, NETDEV_CB_ADDR_NETMASK);
  106204:	e51b3008 	ldr	r3, [fp, #-8]
  106208:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10620c:	e3a01001 	mov	r1, #1
  106210:	e51b0008 	ldr	r0, [fp, #-8]
  106214:	e12fff33 	blx	r3
        }
    }
}
  106218:	e320f000 	nop	{0}
  10621c:	e24bd004 	sub	sp, fp, #4
  106220:	e8bd8800 	pop	{fp, pc}

00106224 <netdev_low_level_set_gw>:
 *
 * @param netdev the network interface device to change
 * @param gateway the new gateway address
 */
void netdev_low_level_set_gw(struct netdev *netdev, const ip_addr_t *gw)
{
  106224:	e92d4800 	push	{fp, lr}
  106228:	e28db004 	add	fp, sp, #4
  10622c:	e24dd008 	sub	sp, sp, #8
  106230:	e50b0008 	str	r0, [fp, #-8]
  106234:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(gw);
  106238:	e51b300c 	ldr	r3, [fp, #-12]
  10623c:	e3530000 	cmp	r3, #0
  106240:	1a000005 	bne	10625c <netdev_low_level_set_gw+0x38>
  106244:	e300229e 	movw	r2, #670	; 0x29e
  106248:	e3051f08 	movw	r1, #24328	; 0x5f08
  10624c:	e3401014 	movt	r1, #20
  106250:	e3050c74 	movw	r0, #23668	; 0x5c74
  106254:	e3400014 	movt	r0, #20
  106258:	ebfff4ce 	bl	103598 <rt_assert_handler>

    if (netdev && ip_addr_cmp(&(netdev->gw), gw) == 0)
  10625c:	e51b3008 	ldr	r3, [fp, #-8]
  106260:	e3530000 	cmp	r3, #0
  106264:	0a00002d 	beq	106320 <netdev_low_level_set_gw+0xfc>
  106268:	e51b3008 	ldr	r3, [fp, #-8]
  10626c:	e5932014 	ldr	r2, [r3, #20]
  106270:	e51b300c 	ldr	r3, [fp, #-12]
  106274:	e5933000 	ldr	r3, [r3]
  106278:	e1520003 	cmp	r2, r3
  10627c:	0a000027 	beq	106320 <netdev_low_level_set_gw+0xfc>
    {
        ip_addr_copy(netdev->gw, *gw);
  106280:	e51b300c 	ldr	r3, [fp, #-12]
  106284:	e5932000 	ldr	r2, [r3]
  106288:	e51b3008 	ldr	r3, [fp, #-8]
  10628c:	e5832014 	str	r2, [r3, #20]

#ifdef RT_USING_SAL
        /* set network interface device flags to internet up */
        if (netdev_is_up(netdev) && netdev_is_link_up(netdev) &&
  106290:	e51b3008 	ldr	r3, [fp, #-8]
  106294:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106298:	e2033001 	and	r3, r3, #1
  10629c:	e6ef3073 	uxtb	r3, r3
  1062a0:	e3530000 	cmp	r3, #0
  1062a4:	0a000014 	beq	1062fc <netdev_low_level_set_gw+0xd8>
  1062a8:	e51b3008 	ldr	r3, [fp, #-8]
  1062ac:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1062b0:	e1a03123 	lsr	r3, r3, #2
  1062b4:	e2033001 	and	r3, r3, #1
  1062b8:	e6ef3073 	uxtb	r3, r3
  1062bc:	e3530000 	cmp	r3, #0
  1062c0:	0a00000d 	beq	1062fc <netdev_low_level_set_gw+0xd8>
                !ip_addr_isany(&(netdev->ip_addr)))
  1062c4:	e51b3008 	ldr	r3, [fp, #-8]
  1062c8:	e283300c 	add	r3, r3, #12
        if (netdev_is_up(netdev) && netdev_is_link_up(netdev) &&
  1062cc:	e3530000 	cmp	r3, #0
  1062d0:	0a000009 	beq	1062fc <netdev_low_level_set_gw+0xd8>
                !ip_addr_isany(&(netdev->ip_addr)))
  1062d4:	e51b3008 	ldr	r3, [fp, #-8]
  1062d8:	e593300c 	ldr	r3, [r3, #12]
  1062dc:	e3530000 	cmp	r3, #0
  1062e0:	0a000005 	beq	1062fc <netdev_low_level_set_gw+0xd8>
        {
            // sal_check_netdev_internet_up(netdev);
            // check_netdev_internet_up_work(netdev);
            netdev->flags |= NETDEV_FLAG_INTERNET_UP;
  1062e4:	e51b3008 	ldr	r3, [fp, #-8]
  1062e8:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1062ec:	e3833080 	orr	r3, r3, #128	; 0x80
  1062f0:	e6ff2073 	uxth	r2, r3
  1062f4:	e51b3008 	ldr	r3, [fp, #-8]
  1062f8:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
        }
#endif /* RT_USING_SAL */

        /* execute gateway address change callback function */
        if (netdev->addr_callback)
  1062fc:	e51b3008 	ldr	r3, [fp, #-8]
  106300:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  106304:	e3530000 	cmp	r3, #0
  106308:	0a000004 	beq	106320 <netdev_low_level_set_gw+0xfc>
        {
            netdev->addr_callback(netdev, NETDEV_CB_ADDR_GATEWAY);
  10630c:	e51b3008 	ldr	r3, [fp, #-8]
  106310:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  106314:	e3a01002 	mov	r1, #2
  106318:	e51b0008 	ldr	r0, [fp, #-8]
  10631c:	e12fff33 	blx	r3
        }
    }
}
  106320:	e320f000 	nop	{0}
  106324:	e24bd004 	sub	sp, fp, #4
  106328:	e8bd8800 	pop	{fp, pc}

0010632c <netdev_low_level_set_dns_server>:
 * @param netdev the network interface device to change
 * @param dns_server the new DNS server address
 *
 */
void netdev_low_level_set_dns_server(struct netdev *netdev, uint8_t dns_num, const ip_addr_t *dns_server)
{
  10632c:	e92d4800 	push	{fp, lr}
  106330:	e28db004 	add	fp, sp, #4
  106334:	e24dd018 	sub	sp, sp, #24
  106338:	e50b0010 	str	r0, [fp, #-16]
  10633c:	e1a03001 	mov	r3, r1
  106340:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  106344:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    int index;

    RT_ASSERT(dns_server);
  106348:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10634c:	e3530000 	cmp	r3, #0
  106350:	1a000005 	bne	10636c <netdev_low_level_set_dns_server+0x40>
  106354:	e30022c3 	movw	r2, #707	; 0x2c3
  106358:	e3051f20 	movw	r1, #24352	; 0x5f20
  10635c:	e3401014 	movt	r1, #20
  106360:	e3050d20 	movw	r0, #23840	; 0x5d20
  106364:	e3400014 	movt	r0, #20
  106368:	ebfff48a 	bl	103598 <rt_assert_handler>

    if (netdev == RT_NULL)
  10636c:	e51b3010 	ldr	r3, [fp, #-16]
  106370:	e3530000 	cmp	r3, #0
  106374:	0a000023 	beq	106408 <netdev_low_level_set_dns_server+0xdc>
    {
        return;
    }
    /* check DNS servers is exist */
    for (index = 0; index < NETDEV_DNS_SERVERS_NUM; index++)
  106378:	e3a03000 	mov	r3, #0
  10637c:	e50b3008 	str	r3, [fp, #-8]
  106380:	ea00000a 	b	1063b0 <netdev_low_level_set_dns_server+0x84>
    {
        if (ip_addr_cmp(&(netdev->dns_servers[index]), dns_server))
  106384:	e51b3010 	ldr	r3, [fp, #-16]
  106388:	e51b2008 	ldr	r2, [fp, #-8]
  10638c:	e2822006 	add	r2, r2, #6
  106390:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  106394:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  106398:	e5933000 	ldr	r3, [r3]
  10639c:	e1520003 	cmp	r2, r3
  1063a0:	0a00001a 	beq	106410 <netdev_low_level_set_dns_server+0xe4>
    for (index = 0; index < NETDEV_DNS_SERVERS_NUM; index++)
  1063a4:	e51b3008 	ldr	r3, [fp, #-8]
  1063a8:	e2833001 	add	r3, r3, #1
  1063ac:	e50b3008 	str	r3, [fp, #-8]
  1063b0:	e51b3008 	ldr	r3, [fp, #-8]
  1063b4:	e3530001 	cmp	r3, #1
  1063b8:	9afffff1 	bls	106384 <netdev_low_level_set_dns_server+0x58>
        {
            return;
        }
    }

    if (dns_num < NETDEV_DNS_SERVERS_NUM)
  1063bc:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  1063c0:	e3530001 	cmp	r3, #1
  1063c4:	8a000012 	bhi	106414 <netdev_low_level_set_dns_server+0xe8>
    {
        ip_addr_copy(netdev->dns_servers[dns_num], *dns_server);
  1063c8:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  1063cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1063d0:	e5931000 	ldr	r1, [r3]
  1063d4:	e51b3010 	ldr	r3, [fp, #-16]
  1063d8:	e2822006 	add	r2, r2, #6
  1063dc:	e7831102 	str	r1, [r3, r2, lsl #2]

        /* execute DNS servers address change callback function */
        if (netdev->addr_callback)
  1063e0:	e51b3010 	ldr	r3, [fp, #-16]
  1063e4:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  1063e8:	e3530000 	cmp	r3, #0
  1063ec:	0a000008 	beq	106414 <netdev_low_level_set_dns_server+0xe8>
        {
            netdev->addr_callback(netdev, NETDEV_CB_ADDR_DNS_SERVER);
  1063f0:	e51b3010 	ldr	r3, [fp, #-16]
  1063f4:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  1063f8:	e3a01003 	mov	r1, #3
  1063fc:	e51b0010 	ldr	r0, [fp, #-16]
  106400:	e12fff33 	blx	r3
  106404:	ea000002 	b	106414 <netdev_low_level_set_dns_server+0xe8>
        return;
  106408:	e320f000 	nop	{0}
  10640c:	ea000000 	b	106414 <netdev_low_level_set_dns_server+0xe8>
            return;
  106410:	e320f000 	nop	{0}
        }
    }
}
  106414:	e24bd004 	sub	sp, fp, #4
  106418:	e8bd8800 	pop	{fp, pc}

0010641c <netdev_low_level_set_status>:
 *
 * @param netdev the network interface device to change
 * @param is_up the new status
 */
void netdev_low_level_set_status(struct netdev *netdev, rt_bool_t is_up)
{
  10641c:	e92d4800 	push	{fp, lr}
  106420:	e28db004 	add	fp, sp, #4
  106424:	e24dd008 	sub	sp, sp, #8
  106428:	e50b0008 	str	r0, [fp, #-8]
  10642c:	e50b100c 	str	r1, [fp, #-12]
    if (netdev && netdev_is_up(netdev) != is_up)
  106430:	e51b3008 	ldr	r3, [fp, #-8]
  106434:	e3530000 	cmp	r3, #0
  106438:	0a000024 	beq	1064d0 <netdev_low_level_set_status+0xb4>
  10643c:	e51b3008 	ldr	r3, [fp, #-8]
  106440:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106444:	e2033001 	and	r3, r3, #1
  106448:	e51b200c 	ldr	r2, [fp, #-12]
  10644c:	e1520003 	cmp	r2, r3
  106450:	0a00001e 	beq	1064d0 <netdev_low_level_set_status+0xb4>
    {
        if (is_up)
  106454:	e51b300c 	ldr	r3, [fp, #-12]
  106458:	e3530000 	cmp	r3, #0
  10645c:	0a000006 	beq	10647c <netdev_low_level_set_status+0x60>
        {
            netdev->flags |= NETDEV_FLAG_UP;
  106460:	e51b3008 	ldr	r3, [fp, #-8]
  106464:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106468:	e3833001 	orr	r3, r3, #1
  10646c:	e6ff2073 	uxth	r2, r3
  106470:	e51b3008 	ldr	r3, [fp, #-8]
  106474:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
  106478:	ea000005 	b	106494 <netdev_low_level_set_status+0x78>
        }
        else
        {
            netdev->flags &= ~NETDEV_FLAG_UP;
  10647c:	e51b3008 	ldr	r3, [fp, #-8]
  106480:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106484:	e3c33001 	bic	r3, r3, #1
  106488:	e6ff2073 	uxth	r2, r3
  10648c:	e51b3008 	ldr	r3, [fp, #-8]
  106490:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
            netdev_auto_change_default(netdev);
#endif /* NETDEV_USING_AUTO_DEFAULT */
        }

        /* execute  network interface device status change callback function */
        if (netdev->status_callback)
  106494:	e51b3008 	ldr	r3, [fp, #-8]
  106498:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10649c:	e3530000 	cmp	r3, #0
  1064a0:	0a00000a 	beq	1064d0 <netdev_low_level_set_status+0xb4>
        {
            netdev->status_callback(netdev, is_up ? NETDEV_CB_STATUS_UP : NETDEV_CB_STATUS_DOWN);
  1064a4:	e51b3008 	ldr	r3, [fp, #-8]
  1064a8:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  1064ac:	e51b200c 	ldr	r2, [fp, #-12]
  1064b0:	e3520000 	cmp	r2, #0
  1064b4:	0a000001 	beq	1064c0 <netdev_low_level_set_status+0xa4>
  1064b8:	e3a02004 	mov	r2, #4
  1064bc:	ea000000 	b	1064c4 <netdev_low_level_set_status+0xa8>
  1064c0:	e3a02005 	mov	r2, #5
  1064c4:	e1a01002 	mov	r1, r2
  1064c8:	e51b0008 	ldr	r0, [fp, #-8]
  1064cc:	e12fff33 	blx	r3
        }
    }
}
  1064d0:	e320f000 	nop	{0}
  1064d4:	e24bd004 	sub	sp, fp, #4
  1064d8:	e8bd8800 	pop	{fp, pc}

001064dc <netdev_low_level_set_link_status>:
 *
 * @param netdev the network interface device to change
 * @param is_up the new link status
 */
void netdev_low_level_set_link_status(struct netdev *netdev, rt_bool_t is_up)
{
  1064dc:	e92d4800 	push	{fp, lr}
  1064e0:	e28db004 	add	fp, sp, #4
  1064e4:	e24dd008 	sub	sp, sp, #8
  1064e8:	e50b0008 	str	r0, [fp, #-8]
  1064ec:	e50b100c 	str	r1, [fp, #-12]
    if (netdev && netdev_is_link_up(netdev) != is_up)
  1064f0:	e51b3008 	ldr	r3, [fp, #-8]
  1064f4:	e3530000 	cmp	r3, #0
  1064f8:	0a00003f 	beq	1065fc <netdev_low_level_set_link_status+0x120>
  1064fc:	e51b3008 	ldr	r3, [fp, #-8]
  106500:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106504:	e1a03123 	lsr	r3, r3, #2
  106508:	e2033001 	and	r3, r3, #1
  10650c:	e51b200c 	ldr	r2, [fp, #-12]
  106510:	e1520003 	cmp	r2, r3
  106514:	0a000038 	beq	1065fc <netdev_low_level_set_link_status+0x120>
    {
        if (is_up)
  106518:	e51b300c 	ldr	r3, [fp, #-12]
  10651c:	e3530000 	cmp	r3, #0
  106520:	0a00001a 	beq	106590 <netdev_low_level_set_link_status+0xb4>
        {
            netdev->flags |= NETDEV_FLAG_LINK_UP;
  106524:	e51b3008 	ldr	r3, [fp, #-8]
  106528:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  10652c:	e3833004 	orr	r3, r3, #4
  106530:	e6ff2073 	uxth	r2, r3
  106534:	e51b3008 	ldr	r3, [fp, #-8]
  106538:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a

#ifdef RT_USING_SAL
            /* set network interface device flags to internet up */
            if (netdev_is_up(netdev) && !ip_addr_isany(&(netdev->ip_addr)))
  10653c:	e51b3008 	ldr	r3, [fp, #-8]
  106540:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106544:	e2033001 	and	r3, r3, #1
  106548:	e6ef3073 	uxtb	r3, r3
  10654c:	e3530000 	cmp	r3, #0
  106550:	0a00001a 	beq	1065c0 <netdev_low_level_set_link_status+0xe4>
  106554:	e51b3008 	ldr	r3, [fp, #-8]
  106558:	e283300c 	add	r3, r3, #12
  10655c:	e3530000 	cmp	r3, #0
  106560:	0a000016 	beq	1065c0 <netdev_low_level_set_link_status+0xe4>
  106564:	e51b3008 	ldr	r3, [fp, #-8]
  106568:	e593300c 	ldr	r3, [r3, #12]
  10656c:	e3530000 	cmp	r3, #0
  106570:	0a000012 	beq	1065c0 <netdev_low_level_set_link_status+0xe4>
            {
                // sal_check_netdev_internet_up(netdev);
                // check_netdev_internet_up_work(netdev);
                netdev->flags |= NETDEV_FLAG_INTERNET_UP;
  106574:	e51b3008 	ldr	r3, [fp, #-8]
  106578:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  10657c:	e3833080 	orr	r3, r3, #128	; 0x80
  106580:	e6ff2073 	uxth	r2, r3
  106584:	e51b3008 	ldr	r3, [fp, #-8]
  106588:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
  10658c:	ea00000b 	b	1065c0 <netdev_low_level_set_link_status+0xe4>
            }
#endif /* RT_USING_SAL */
        }
        else
        {
            netdev->flags &= ~NETDEV_FLAG_LINK_UP;
  106590:	e51b3008 	ldr	r3, [fp, #-8]
  106594:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106598:	e3c33004 	bic	r3, r3, #4
  10659c:	e6ff2073 	uxth	r2, r3
  1065a0:	e51b3008 	ldr	r3, [fp, #-8]
  1065a4:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a

            /* set network interface device flags to internet down */
            netdev->flags &= ~NETDEV_FLAG_INTERNET_UP;
  1065a8:	e51b3008 	ldr	r3, [fp, #-8]
  1065ac:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1065b0:	e3c33080 	bic	r3, r3, #128	; 0x80
  1065b4:	e6ff2073 	uxth	r2, r3
  1065b8:	e51b3008 	ldr	r3, [fp, #-8]
  1065bc:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
            /* change to the first link_up network interface device automatically */
            netdev_auto_change_default(netdev);
#endif /* NETDEV_USING_AUTO_DEFAULT */

        /* execute link status change callback function */
        if (netdev->status_callback)
  1065c0:	e51b3008 	ldr	r3, [fp, #-8]
  1065c4:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  1065c8:	e3530000 	cmp	r3, #0
  1065cc:	0a00000a 	beq	1065fc <netdev_low_level_set_link_status+0x120>
        {
            netdev->status_callback(netdev, is_up ? NETDEV_CB_STATUS_LINK_UP : NETDEV_CB_STATUS_LINK_DOWN);
  1065d0:	e51b3008 	ldr	r3, [fp, #-8]
  1065d4:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  1065d8:	e51b200c 	ldr	r2, [fp, #-12]
  1065dc:	e3520000 	cmp	r2, #0
  1065e0:	0a000001 	beq	1065ec <netdev_low_level_set_link_status+0x110>
  1065e4:	e3a02006 	mov	r2, #6
  1065e8:	ea000000 	b	1065f0 <netdev_low_level_set_link_status+0x114>
  1065ec:	e3a02007 	mov	r2, #7
  1065f0:	e1a01002 	mov	r1, r2
  1065f4:	e51b0008 	ldr	r0, [fp, #-8]
  1065f8:	e12fff33 	blx	r3
        }
    }
}
  1065fc:	e320f000 	nop	{0}
  106600:	e24bd004 	sub	sp, fp, #4
  106604:	e8bd8800 	pop	{fp, pc}

00106608 <netdev_low_level_set_dhcp_status>:
 *
 * @param netdev the network interface device to change
 * @param is_up the new DHCP status
 */
void netdev_low_level_set_dhcp_status(struct netdev *netdev, rt_bool_t is_enable)
{
  106608:	e92d4800 	push	{fp, lr}
  10660c:	e28db004 	add	fp, sp, #4
  106610:	e24dd008 	sub	sp, sp, #8
  106614:	e50b0008 	str	r0, [fp, #-8]
  106618:	e50b100c 	str	r1, [fp, #-12]
    if (netdev && netdev_is_dhcp_enabled(netdev) != is_enable)
  10661c:	e51b3008 	ldr	r3, [fp, #-8]
  106620:	e3530000 	cmp	r3, #0
  106624:	0a000025 	beq	1066c0 <netdev_low_level_set_dhcp_status+0xb8>
  106628:	e51b3008 	ldr	r3, [fp, #-8]
  10662c:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106630:	e1a03423 	lsr	r3, r3, #8
  106634:	e2033001 	and	r3, r3, #1
  106638:	e51b200c 	ldr	r2, [fp, #-12]
  10663c:	e1520003 	cmp	r2, r3
  106640:	0a00001e 	beq	1066c0 <netdev_low_level_set_dhcp_status+0xb8>
    {
        if (is_enable)
  106644:	e51b300c 	ldr	r3, [fp, #-12]
  106648:	e3530000 	cmp	r3, #0
  10664c:	0a000006 	beq	10666c <netdev_low_level_set_dhcp_status+0x64>
        {
            netdev->flags |= NETDEV_FLAG_DHCP;
  106650:	e51b3008 	ldr	r3, [fp, #-8]
  106654:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106658:	e3833c01 	orr	r3, r3, #256	; 0x100
  10665c:	e6ff2073 	uxth	r2, r3
  106660:	e51b3008 	ldr	r3, [fp, #-8]
  106664:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
  106668:	ea000005 	b	106684 <netdev_low_level_set_dhcp_status+0x7c>
        }
        else
        {
            netdev->flags &= ~NETDEV_FLAG_DHCP;
  10666c:	e51b3008 	ldr	r3, [fp, #-8]
  106670:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106674:	e3c33c01 	bic	r3, r3, #256	; 0x100
  106678:	e6ff2073 	uxth	r2, r3
  10667c:	e51b3008 	ldr	r3, [fp, #-8]
  106680:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
        }

        /* execute DHCP status change callback function */
        if (netdev->status_callback)
  106684:	e51b3008 	ldr	r3, [fp, #-8]
  106688:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10668c:	e3530000 	cmp	r3, #0
  106690:	0a00000a 	beq	1066c0 <netdev_low_level_set_dhcp_status+0xb8>
        {
            netdev->status_callback(netdev, is_enable ? NETDEV_CB_STATUS_DHCP_ENABLE : NETDEV_CB_STATUS_DHCP_DISABLE);
  106694:	e51b3008 	ldr	r3, [fp, #-8]
  106698:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10669c:	e51b200c 	ldr	r2, [fp, #-12]
  1066a0:	e3520000 	cmp	r2, #0
  1066a4:	0a000001 	beq	1066b0 <netdev_low_level_set_dhcp_status+0xa8>
  1066a8:	e3a0200a 	mov	r2, #10
  1066ac:	ea000000 	b	1066b4 <netdev_low_level_set_dhcp_status+0xac>
  1066b0:	e3a0200b 	mov	r2, #11
  1066b4:	e1a01002 	mov	r1, r2
  1066b8:	e51b0008 	ldr	r0, [fp, #-8]
  1066bc:	e12fff33 	blx	r3
        }
    }
}
  1066c0:	e320f000 	nop	{0}
  1066c4:	e24bd004 	sub	sp, fp, #4
  1066c8:	e8bd8800 	pop	{fp, pc}

001066cc <netdev_ip4addr_aton>:
 * @param cp IP address in ascii representation (e.g. "127.0.0.1")
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int netdev_ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
  1066cc:	e92d4800 	push	{fp, lr}
  1066d0:	e28db004 	add	fp, sp, #4
  1066d4:	e24dd028 	sub	sp, sp, #40	; 0x28
  1066d8:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  1066dc:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
    uint32_t val;
    uint8_t base;
    char c;
    uint32_t parts[4];
    uint32_t *pp = parts;
  1066e0:	e24b3020 	sub	r3, fp, #32
  1066e4:	e50b3010 	str	r3, [fp, #-16]

    c = *cp;
  1066e8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1066ec:	e5d33000 	ldrb	r3, [r3]
  1066f0:	e54b300a 	strb	r3, [fp, #-10]
        /*
         * Collect number up to ``.''.
         * Values are specified as for C:
         * 0x=hex, 0=octal, 1-9=decimal.
         */
        if (!isdigit(c))
  1066f4:	e55b300a 	ldrb	r3, [fp, #-10]
  1066f8:	e353002f 	cmp	r3, #47	; 0x2f
  1066fc:	9a000002 	bls	10670c <netdev_ip4addr_aton+0x40>
  106700:	e55b300a 	ldrb	r3, [fp, #-10]
  106704:	e3530039 	cmp	r3, #57	; 0x39
  106708:	9a000001 	bls	106714 <netdev_ip4addr_aton+0x48>
        {
            return 0;
  10670c:	e3a03000 	mov	r3, #0
  106710:	ea0000f7 	b	106af4 <netdev_ip4addr_aton+0x428>
        }
        val = 0;
  106714:	e3a03000 	mov	r3, #0
  106718:	e50b3008 	str	r3, [fp, #-8]
        base = 10;
  10671c:	e3a0300a 	mov	r3, #10
  106720:	e54b3009 	strb	r3, [fp, #-9]
        if (c == '0')
  106724:	e55b300a 	ldrb	r3, [fp, #-10]
  106728:	e3530030 	cmp	r3, #48	; 0x30
  10672c:	1a000016 	bne	10678c <netdev_ip4addr_aton+0xc0>
        {
            c = *++cp;
  106730:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106734:	e2833001 	add	r3, r3, #1
  106738:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  10673c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106740:	e5d33000 	ldrb	r3, [r3]
  106744:	e54b300a 	strb	r3, [fp, #-10]
            if (c == 'x' || c == 'X')
  106748:	e55b300a 	ldrb	r3, [fp, #-10]
  10674c:	e3530078 	cmp	r3, #120	; 0x78
  106750:	0a000002 	beq	106760 <netdev_ip4addr_aton+0x94>
  106754:	e55b300a 	ldrb	r3, [fp, #-10]
  106758:	e3530058 	cmp	r3, #88	; 0x58
  10675c:	1a000008 	bne	106784 <netdev_ip4addr_aton+0xb8>
            {
                base = 16;
  106760:	e3a03010 	mov	r3, #16
  106764:	e54b3009 	strb	r3, [fp, #-9]
                c = *++cp;
  106768:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10676c:	e2833001 	add	r3, r3, #1
  106770:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  106774:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106778:	e5d33000 	ldrb	r3, [r3]
  10677c:	e54b300a 	strb	r3, [fp, #-10]
  106780:	ea000001 	b	10678c <netdev_ip4addr_aton+0xc0>
            }
            else
            {
                base = 8;
  106784:	e3a03008 	mov	r3, #8
  106788:	e54b3009 	strb	r3, [fp, #-9]
            }
        }
        for (;;)
        {
            if (isdigit(c))
  10678c:	e55b300a 	ldrb	r3, [fp, #-10]
  106790:	e353002f 	cmp	r3, #47	; 0x2f
  106794:	9a000010 	bls	1067dc <netdev_ip4addr_aton+0x110>
  106798:	e55b300a 	ldrb	r3, [fp, #-10]
  10679c:	e3530039 	cmp	r3, #57	; 0x39
  1067a0:	8a00000d 	bhi	1067dc <netdev_ip4addr_aton+0x110>
            {
                val = (val * base) + (uint32_t) (c - '0');
  1067a4:	e55b3009 	ldrb	r3, [fp, #-9]
  1067a8:	e51b2008 	ldr	r2, [fp, #-8]
  1067ac:	e0020392 	mul	r2, r2, r3
  1067b0:	e55b300a 	ldrb	r3, [fp, #-10]
  1067b4:	e0823003 	add	r3, r2, r3
  1067b8:	e2433030 	sub	r3, r3, #48	; 0x30
  1067bc:	e50b3008 	str	r3, [fp, #-8]
                c = *++cp;
  1067c0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1067c4:	e2833001 	add	r3, r3, #1
  1067c8:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  1067cc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1067d0:	e5d33000 	ldrb	r3, [r3]
  1067d4:	e54b300a 	strb	r3, [fp, #-10]
  1067d8:	ea00002a 	b	106888 <netdev_ip4addr_aton+0x1bc>
            }
            else if (base == 16 && isxdigit(c))
  1067dc:	e55b3009 	ldrb	r3, [fp, #-9]
  1067e0:	e3530010 	cmp	r3, #16
  1067e4:	1a000028 	bne	10688c <netdev_ip4addr_aton+0x1c0>
  1067e8:	e55b300a 	ldrb	r3, [fp, #-10]
  1067ec:	e353002f 	cmp	r3, #47	; 0x2f
  1067f0:	9a000002 	bls	106800 <netdev_ip4addr_aton+0x134>
  1067f4:	e55b300a 	ldrb	r3, [fp, #-10]
  1067f8:	e3530039 	cmp	r3, #57	; 0x39
  1067fc:	9a00000b 	bls	106830 <netdev_ip4addr_aton+0x164>
  106800:	e55b300a 	ldrb	r3, [fp, #-10]
  106804:	e3530060 	cmp	r3, #96	; 0x60
  106808:	9a000002 	bls	106818 <netdev_ip4addr_aton+0x14c>
  10680c:	e55b300a 	ldrb	r3, [fp, #-10]
  106810:	e3530066 	cmp	r3, #102	; 0x66
  106814:	9a000005 	bls	106830 <netdev_ip4addr_aton+0x164>
  106818:	e55b300a 	ldrb	r3, [fp, #-10]
  10681c:	e3530040 	cmp	r3, #64	; 0x40
  106820:	9a000019 	bls	10688c <netdev_ip4addr_aton+0x1c0>
  106824:	e55b300a 	ldrb	r3, [fp, #-10]
  106828:	e3530046 	cmp	r3, #70	; 0x46
  10682c:	8a000016 	bhi	10688c <netdev_ip4addr_aton+0x1c0>
            {
                val = (val << 4) | (uint32_t) (c + 10 - (islower(c) ? 'a' : 'A'));
  106830:	e51b3008 	ldr	r3, [fp, #-8]
  106834:	e1a03203 	lsl	r3, r3, #4
  106838:	e55b200a 	ldrb	r2, [fp, #-10]
  10683c:	e282100a 	add	r1, r2, #10
  106840:	e55b200a 	ldrb	r2, [fp, #-10]
  106844:	e3520060 	cmp	r2, #96	; 0x60
  106848:	9a000004 	bls	106860 <netdev_ip4addr_aton+0x194>
  10684c:	e55b200a 	ldrb	r2, [fp, #-10]
  106850:	e352007a 	cmp	r2, #122	; 0x7a
  106854:	8a000001 	bhi	106860 <netdev_ip4addr_aton+0x194>
  106858:	e3a02061 	mov	r2, #97	; 0x61
  10685c:	ea000000 	b	106864 <netdev_ip4addr_aton+0x198>
  106860:	e3a02041 	mov	r2, #65	; 0x41
  106864:	e0412002 	sub	r2, r1, r2
  106868:	e1833002 	orr	r3, r3, r2
  10686c:	e50b3008 	str	r3, [fp, #-8]
                c = *++cp;
  106870:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106874:	e2833001 	add	r3, r3, #1
  106878:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  10687c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106880:	e5d33000 	ldrb	r3, [r3]
  106884:	e54b300a 	strb	r3, [fp, #-10]
            if (isdigit(c))
  106888:	eaffffbf 	b	10678c <netdev_ip4addr_aton+0xc0>
            else
            {
                break;
            }
        }
        if (c == '.')
  10688c:	e55b300a 	ldrb	r3, [fp, #-10]
  106890:	e353002e 	cmp	r3, #46	; 0x2e
  106894:	1a000012 	bne	1068e4 <netdev_ip4addr_aton+0x218>
             * Internet format:
             *  a.b.c.d
             *  a.b.c   (with c treated as 16 bits)
             *  a.b (with b treated as 24 bits)
             */
            if (pp >= parts + 3)
  106898:	e24b3020 	sub	r3, fp, #32
  10689c:	e283300c 	add	r3, r3, #12
  1068a0:	e51b2010 	ldr	r2, [fp, #-16]
  1068a4:	e1520003 	cmp	r2, r3
  1068a8:	3a000001 	bcc	1068b4 <netdev_ip4addr_aton+0x1e8>
            {
                return 0;
  1068ac:	e3a03000 	mov	r3, #0
  1068b0:	ea00008f 	b	106af4 <netdev_ip4addr_aton+0x428>
            }
            *pp++ = val;
  1068b4:	e51b3010 	ldr	r3, [fp, #-16]
  1068b8:	e2832004 	add	r2, r3, #4
  1068bc:	e50b2010 	str	r2, [fp, #-16]
  1068c0:	e51b2008 	ldr	r2, [fp, #-8]
  1068c4:	e5832000 	str	r2, [r3]
            c = *++cp;
  1068c8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1068cc:	e2833001 	add	r3, r3, #1
  1068d0:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  1068d4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1068d8:	e5d33000 	ldrb	r3, [r3]
  1068dc:	e54b300a 	strb	r3, [fp, #-10]
        if (!isdigit(c))
  1068e0:	eaffff83 	b	1066f4 <netdev_ip4addr_aton+0x28>
        }
        else
        {
            break;
  1068e4:	e320f000 	nop	{0}
        }
    }
    /*
     * Check for trailing characters.
     */
    if (c != '\0' && !isspace(c))
  1068e8:	e55b300a 	ldrb	r3, [fp, #-10]
  1068ec:	e3530000 	cmp	r3, #0
  1068f0:	0a000013 	beq	106944 <netdev_ip4addr_aton+0x278>
  1068f4:	e55b300a 	ldrb	r3, [fp, #-10]
  1068f8:	e3530020 	cmp	r3, #32
  1068fc:	0a000010 	beq	106944 <netdev_ip4addr_aton+0x278>
  106900:	e55b300a 	ldrb	r3, [fp, #-10]
  106904:	e353000c 	cmp	r3, #12
  106908:	0a00000d 	beq	106944 <netdev_ip4addr_aton+0x278>
  10690c:	e55b300a 	ldrb	r3, [fp, #-10]
  106910:	e353000a 	cmp	r3, #10
  106914:	0a00000a 	beq	106944 <netdev_ip4addr_aton+0x278>
  106918:	e55b300a 	ldrb	r3, [fp, #-10]
  10691c:	e353000d 	cmp	r3, #13
  106920:	0a000007 	beq	106944 <netdev_ip4addr_aton+0x278>
  106924:	e55b300a 	ldrb	r3, [fp, #-10]
  106928:	e3530009 	cmp	r3, #9
  10692c:	0a000004 	beq	106944 <netdev_ip4addr_aton+0x278>
  106930:	e55b300a 	ldrb	r3, [fp, #-10]
  106934:	e353000b 	cmp	r3, #11
  106938:	0a000001 	beq	106944 <netdev_ip4addr_aton+0x278>
    {
        return 0;
  10693c:	e3a03000 	mov	r3, #0
  106940:	ea00006b 	b	106af4 <netdev_ip4addr_aton+0x428>
    }
    /*
     * Concoct the address according to
     * the number of parts specified.
     */
    switch (pp - parts + 1)
  106944:	e51b2010 	ldr	r2, [fp, #-16]
  106948:	e24b3020 	sub	r3, fp, #32
  10694c:	e0423003 	sub	r3, r2, r3
  106950:	e1a03143 	asr	r3, r3, #2
  106954:	e2833001 	add	r3, r3, #1
  106958:	e3530004 	cmp	r3, #4
  10695c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  106960:	ea000048 	b	106a88 <netdev_ip4addr_aton+0x3bc>
  106964:	00106978 	.word	0x00106978
  106968:	00106aa4 	.word	0x00106aa4
  10696c:	00106980 	.word	0x00106980
  106970:	001069c0 	.word	0x001069c0
  106974:	00106a18 	.word	0x00106a18
    {

    case 0:
        return 0; /* initial nondigit */
  106978:	e3a03000 	mov	r3, #0
  10697c:	ea00005c 	b	106af4 <netdev_ip4addr_aton+0x428>

    case 1: /* a -- 32 bits */
        break;

    case 2: /* a.b -- 8.24 bits */
        if (val > 0xffffffUL)
  106980:	e51b3008 	ldr	r3, [fp, #-8]
  106984:	e3530401 	cmp	r3, #16777216	; 0x1000000
  106988:	3a000001 	bcc	106994 <netdev_ip4addr_aton+0x2c8>
        {
            return 0;
  10698c:	e3a03000 	mov	r3, #0
  106990:	ea000057 	b	106af4 <netdev_ip4addr_aton+0x428>
        }
        if (parts[0] > 0xff)
  106994:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  106998:	e35300ff 	cmp	r3, #255	; 0xff
  10699c:	9a000001 	bls	1069a8 <netdev_ip4addr_aton+0x2dc>
        {
            return 0;
  1069a0:	e3a03000 	mov	r3, #0
  1069a4:	ea000052 	b	106af4 <netdev_ip4addr_aton+0x428>
        }
        val |= parts[0] << 24;
  1069a8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1069ac:	e1a03c03 	lsl	r3, r3, #24
  1069b0:	e51b2008 	ldr	r2, [fp, #-8]
  1069b4:	e1823003 	orr	r3, r2, r3
  1069b8:	e50b3008 	str	r3, [fp, #-8]
        break;
  1069bc:	ea000039 	b	106aa8 <netdev_ip4addr_aton+0x3dc>

    case 3: /* a.b.c -- 8.8.16 bits */
        if (val > 0xffff)
  1069c0:	e51b3008 	ldr	r3, [fp, #-8]
  1069c4:	e3530801 	cmp	r3, #65536	; 0x10000
  1069c8:	3a000001 	bcc	1069d4 <netdev_ip4addr_aton+0x308>
        {
            return 0;
  1069cc:	e3a03000 	mov	r3, #0
  1069d0:	ea000047 	b	106af4 <netdev_ip4addr_aton+0x428>
        }
        if ((parts[0] > 0xff) || (parts[1] > 0xff))
  1069d4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1069d8:	e35300ff 	cmp	r3, #255	; 0xff
  1069dc:	8a000002 	bhi	1069ec <netdev_ip4addr_aton+0x320>
  1069e0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1069e4:	e35300ff 	cmp	r3, #255	; 0xff
  1069e8:	9a000001 	bls	1069f4 <netdev_ip4addr_aton+0x328>
        {
            return 0;
  1069ec:	e3a03000 	mov	r3, #0
  1069f0:	ea00003f 	b	106af4 <netdev_ip4addr_aton+0x428>
        }
        val |= (parts[0] << 24) | (parts[1] << 16);
  1069f4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1069f8:	e1a02c03 	lsl	r2, r3, #24
  1069fc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  106a00:	e1a03803 	lsl	r3, r3, #16
  106a04:	e1823003 	orr	r3, r2, r3
  106a08:	e51b2008 	ldr	r2, [fp, #-8]
  106a0c:	e1823003 	orr	r3, r2, r3
  106a10:	e50b3008 	str	r3, [fp, #-8]
        break;
  106a14:	ea000023 	b	106aa8 <netdev_ip4addr_aton+0x3dc>

    case 4: /* a.b.c.d -- 8.8.8.8 bits */
        if (val > 0xff)
  106a18:	e51b3008 	ldr	r3, [fp, #-8]
  106a1c:	e35300ff 	cmp	r3, #255	; 0xff
  106a20:	9a000001 	bls	106a2c <netdev_ip4addr_aton+0x360>
        {
            return 0;
  106a24:	e3a03000 	mov	r3, #0
  106a28:	ea000031 	b	106af4 <netdev_ip4addr_aton+0x428>
        }
        if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff))
  106a2c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  106a30:	e35300ff 	cmp	r3, #255	; 0xff
  106a34:	8a000005 	bhi	106a50 <netdev_ip4addr_aton+0x384>
  106a38:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  106a3c:	e35300ff 	cmp	r3, #255	; 0xff
  106a40:	8a000002 	bhi	106a50 <netdev_ip4addr_aton+0x384>
  106a44:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  106a48:	e35300ff 	cmp	r3, #255	; 0xff
  106a4c:	9a000001 	bls	106a58 <netdev_ip4addr_aton+0x38c>
        {
            return 0;
  106a50:	e3a03000 	mov	r3, #0
  106a54:	ea000026 	b	106af4 <netdev_ip4addr_aton+0x428>
        }
        val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
  106a58:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  106a5c:	e1a02c03 	lsl	r2, r3, #24
  106a60:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  106a64:	e1a03803 	lsl	r3, r3, #16
  106a68:	e1822003 	orr	r2, r2, r3
  106a6c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  106a70:	e1a03403 	lsl	r3, r3, #8
  106a74:	e1823003 	orr	r3, r2, r3
  106a78:	e51b2008 	ldr	r2, [fp, #-8]
  106a7c:	e1823003 	orr	r3, r2, r3
  106a80:	e50b3008 	str	r3, [fp, #-8]
        break;
  106a84:	ea000007 	b	106aa8 <netdev_ip4addr_aton+0x3dc>
    default:
        RT_ASSERT(0);
  106a88:	e3a020a7 	mov	r2, #167	; 0xa7
  106a8c:	e3051f44 	movw	r1, #24388	; 0x5f44
  106a90:	e3401014 	movt	r1, #20
  106a94:	e3050f40 	movw	r0, #24384	; 0x5f40
  106a98:	e3400014 	movt	r0, #20
  106a9c:	ebfff2bd 	bl	103598 <rt_assert_handler>
        break;
  106aa0:	ea000000 	b	106aa8 <netdev_ip4addr_aton+0x3dc>
        break;
  106aa4:	e320f000 	nop	{0}
    }
    if (addr)
  106aa8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  106aac:	e3530000 	cmp	r3, #0
  106ab0:	0a00000e 	beq	106af0 <netdev_ip4addr_aton+0x424>
    {
        ip4_addr_set_u32(addr, htonl(val));
  106ab4:	e51b3008 	ldr	r3, [fp, #-8]
  106ab8:	e1a02c03 	lsl	r2, r3, #24
  106abc:	e51b3008 	ldr	r3, [fp, #-8]
  106ac0:	e1a03403 	lsl	r3, r3, #8
  106ac4:	e20338ff 	and	r3, r3, #16711680	; 0xff0000
  106ac8:	e1822003 	orr	r2, r2, r3
  106acc:	e51b3008 	ldr	r3, [fp, #-8]
  106ad0:	e1a03423 	lsr	r3, r3, #8
  106ad4:	e2033cff 	and	r3, r3, #65280	; 0xff00
  106ad8:	e1822003 	orr	r2, r2, r3
  106adc:	e51b3008 	ldr	r3, [fp, #-8]
  106ae0:	e1a03c23 	lsr	r3, r3, #24
  106ae4:	e1822003 	orr	r2, r2, r3
  106ae8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  106aec:	e5832000 	str	r2, [r3]
    }
    return 1;
  106af0:	e3a03001 	mov	r3, #1
}
  106af4:	e1a00003 	mov	r0, r3
  106af8:	e24bd004 	sub	sp, fp, #4
  106afc:	e8bd8800 	pop	{fp, pc}

00106b00 <netdev_ip4addr_ntoa_r>:
 * @param buflen length of buf
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *netdev_ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
  106b00:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  106b04:	e28db000 	add	fp, sp, #0
  106b08:	e24dd034 	sub	sp, sp, #52	; 0x34
  106b0c:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  106b10:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  106b14:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
    char *rp;
    uint8_t *ap;
    uint8_t rem;
    uint8_t n;
    uint8_t i;
    int len = 0;
  106b18:	e3a03000 	mov	r3, #0
  106b1c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

    s_addr = ip4_addr_get_u32(addr);
  106b20:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106b24:	e5933000 	ldr	r3, [r3]
  106b28:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    rp = buf;
  106b2c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  106b30:	e50b3008 	str	r3, [fp, #-8]
    ap = (uint8_t *) &s_addr;
  106b34:	e24b301c 	sub	r3, fp, #28
  106b38:	e50b300c 	str	r3, [fp, #-12]
    for (n = 0; n < 4; n++)
  106b3c:	e3a03000 	mov	r3, #0
  106b40:	e54b300d 	strb	r3, [fp, #-13]
  106b44:	ea00004b 	b	106c78 <netdev_ip4addr_ntoa_r+0x178>
    {
        i = 0;
  106b48:	e3a03000 	mov	r3, #0
  106b4c:	e54b300e 	strb	r3, [fp, #-14]
        do
        {
            rem = *ap % (uint8_t) 10;
  106b50:	e51b300c 	ldr	r3, [fp, #-12]
  106b54:	e5d31000 	ldrb	r1, [r3]
  106b58:	e30c3ccd 	movw	r3, #52429	; 0xcccd
  106b5c:	e34c3ccc 	movt	r3, #52428	; 0xcccc
  106b60:	e0832391 	umull	r2, r3, r1, r3
  106b64:	e1a031a3 	lsr	r3, r3, #3
  106b68:	e3a0200a 	mov	r2, #10
  106b6c:	e0030392 	mul	r3, r2, r3
  106b70:	e0413003 	sub	r3, r1, r3
  106b74:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
            *ap /= (uint8_t) 10;
  106b78:	e51b300c 	ldr	r3, [fp, #-12]
  106b7c:	e5d32000 	ldrb	r2, [r3]
  106b80:	e30c3ccd 	movw	r3, #52429	; 0xcccd
  106b84:	e34c3ccc 	movt	r3, #52428	; 0xcccc
  106b88:	e0832392 	umull	r2, r3, r2, r3
  106b8c:	e1a031a3 	lsr	r3, r3, #3
  106b90:	e6ef2073 	uxtb	r2, r3
  106b94:	e51b300c 	ldr	r3, [fp, #-12]
  106b98:	e5c32000 	strb	r2, [r3]
            inv[i++] = (char) ('0' + rem);
  106b9c:	e55b300e 	ldrb	r3, [fp, #-14]
  106ba0:	e2832001 	add	r2, r3, #1
  106ba4:	e54b200e 	strb	r2, [fp, #-14]
  106ba8:	e1a01003 	mov	r1, r3
  106bac:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  106bb0:	e2833030 	add	r3, r3, #48	; 0x30
  106bb4:	e6ef2073 	uxtb	r2, r3
  106bb8:	e24b3004 	sub	r3, fp, #4
  106bbc:	e0833001 	add	r3, r3, r1
  106bc0:	e543201c 	strb	r2, [r3, #-28]	; 0xffffffe4
        } while (*ap);
  106bc4:	e51b300c 	ldr	r3, [fp, #-12]
  106bc8:	e5d33000 	ldrb	r3, [r3]
  106bcc:	e3530000 	cmp	r3, #0
  106bd0:	1affffde 	bne	106b50 <netdev_ip4addr_ntoa_r+0x50>
        while (i--)
  106bd4:	ea00000f 	b	106c18 <netdev_ip4addr_ntoa_r+0x118>
        {
            if (len++ >= buflen)
  106bd8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  106bdc:	e2832001 	add	r2, r3, #1
  106be0:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
  106be4:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  106be8:	e1520003 	cmp	r2, r3
  106bec:	ca000001 	bgt	106bf8 <netdev_ip4addr_ntoa_r+0xf8>
            {
                return NULL;
  106bf0:	e3a03000 	mov	r3, #0
  106bf4:	ea000029 	b	106ca0 <netdev_ip4addr_ntoa_r+0x1a0>
            }
            *rp++ = inv[i];
  106bf8:	e55b200e 	ldrb	r2, [fp, #-14]
  106bfc:	e51b3008 	ldr	r3, [fp, #-8]
  106c00:	e2831001 	add	r1, r3, #1
  106c04:	e50b1008 	str	r1, [fp, #-8]
  106c08:	e24b1004 	sub	r1, fp, #4
  106c0c:	e0812002 	add	r2, r1, r2
  106c10:	e552201c 	ldrb	r2, [r2, #-28]	; 0xffffffe4
  106c14:	e5c32000 	strb	r2, [r3]
        while (i--)
  106c18:	e55b300e 	ldrb	r3, [fp, #-14]
  106c1c:	e2432001 	sub	r2, r3, #1
  106c20:	e54b200e 	strb	r2, [fp, #-14]
  106c24:	e3530000 	cmp	r3, #0
  106c28:	1affffea 	bne	106bd8 <netdev_ip4addr_ntoa_r+0xd8>
        }
        if (len++ >= buflen)
  106c2c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  106c30:	e2832001 	add	r2, r3, #1
  106c34:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
  106c38:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  106c3c:	e1520003 	cmp	r2, r3
  106c40:	ca000001 	bgt	106c4c <netdev_ip4addr_ntoa_r+0x14c>
        {
            return NULL;
  106c44:	e3a03000 	mov	r3, #0
  106c48:	ea000014 	b	106ca0 <netdev_ip4addr_ntoa_r+0x1a0>
        }
        *rp++ = '.';
  106c4c:	e51b3008 	ldr	r3, [fp, #-8]
  106c50:	e2832001 	add	r2, r3, #1
  106c54:	e50b2008 	str	r2, [fp, #-8]
  106c58:	e3a0202e 	mov	r2, #46	; 0x2e
  106c5c:	e5c32000 	strb	r2, [r3]
        ap++;
  106c60:	e51b300c 	ldr	r3, [fp, #-12]
  106c64:	e2833001 	add	r3, r3, #1
  106c68:	e50b300c 	str	r3, [fp, #-12]
    for (n = 0; n < 4; n++)
  106c6c:	e55b300d 	ldrb	r3, [fp, #-13]
  106c70:	e2833001 	add	r3, r3, #1
  106c74:	e54b300d 	strb	r3, [fp, #-13]
  106c78:	e55b300d 	ldrb	r3, [fp, #-13]
  106c7c:	e3530003 	cmp	r3, #3
  106c80:	9affffb0 	bls	106b48 <netdev_ip4addr_ntoa_r+0x48>
    }
    *--rp = 0;
  106c84:	e51b3008 	ldr	r3, [fp, #-8]
  106c88:	e2433001 	sub	r3, r3, #1
  106c8c:	e50b3008 	str	r3, [fp, #-8]
  106c90:	e51b3008 	ldr	r3, [fp, #-8]
  106c94:	e3a02000 	mov	r2, #0
  106c98:	e5c32000 	strb	r2, [r3]
    return buf;
  106c9c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
}
  106ca0:	e1a00003 	mov	r0, r3
  106ca4:	e28bd000 	add	sp, fp, #0
  106ca8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  106cac:	e12fff1e 	bx	lr

00106cb0 <netdev_ip4addr_ntoa>:
 * @param addr ip address in network order to convert
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *netdev_ip4addr_ntoa(const ip4_addr_t *addr)
{
  106cb0:	e92d4800 	push	{fp, lr}
  106cb4:	e28db004 	add	fp, sp, #4
  106cb8:	e24dd008 	sub	sp, sp, #8
  106cbc:	e50b0008 	str	r0, [fp, #-8]
    static char str[IP4ADDR_STRLEN_MAX];
    return netdev_ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
  106cc0:	e3a02010 	mov	r2, #16
  106cc4:	e30d1450 	movw	r1, #54352	; 0xd450
  106cc8:	e3401014 	movt	r1, #20
  106ccc:	e51b0008 	ldr	r0, [fp, #-8]
  106cd0:	ebffff8a 	bl	106b00 <netdev_ip4addr_ntoa_r>
  106cd4:	e1a03000 	mov	r3, r0
}
  106cd8:	e1a00003 	mov	r0, r3
  106cdc:	e24bd004 	sub	sp, fp, #4
  106ce0:	e8bd8800 	pop	{fp, pc}

00106ce4 <netdev_ipaddr_addr>:
 *
 * @param cp IP address in ascii representation (e.g. "127.0.0.1")
 * @return ip address in network order
 */
in_addr_t netdev_ipaddr_addr(const char *cp)
{
  106ce4:	e92d4800 	push	{fp, lr}
  106ce8:	e28db004 	add	fp, sp, #4
  106cec:	e24dd010 	sub	sp, sp, #16
  106cf0:	e50b0010 	str	r0, [fp, #-16]
    ip4_addr_t val;

    if (netdev_ip4addr_aton(cp, &val)) {
  106cf4:	e24b3008 	sub	r3, fp, #8
  106cf8:	e1a01003 	mov	r1, r3
  106cfc:	e51b0010 	ldr	r0, [fp, #-16]
  106d00:	ebfffe71 	bl	1066cc <netdev_ip4addr_aton>
  106d04:	e1a03000 	mov	r3, r0
  106d08:	e3530000 	cmp	r3, #0
  106d0c:	0a000001 	beq	106d18 <netdev_ipaddr_addr+0x34>
        return ip4_addr_get_u32(&val);
  106d10:	e51b3008 	ldr	r3, [fp, #-8]
  106d14:	ea000000 	b	106d1c <netdev_ipaddr_addr+0x38>
    }
    return (IPADDR_NONE);
  106d18:	e3e03000 	mvn	r3, #0
}
  106d1c:	e1a00003 	mov	r0, r3
  106d20:	e24bd004 	sub	sp, fp, #4
  106d24:	e8bd8800 	pop	{fp, pc}

00106d28 <netdev_inet_ntop>:

#endif /* NETDEV_IPV6 */

const char *
netdev_inet_ntop(int af, const void *src, char *dst, int32_t size)
{
  106d28:	e92d4800 	push	{fp, lr}
  106d2c:	e28db004 	add	fp, sp, #4
  106d30:	e24dd018 	sub	sp, sp, #24
  106d34:	e50b0010 	str	r0, [fp, #-16]
  106d38:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  106d3c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  106d40:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
#define AF_INET         2
#define AF_INET6        10

    const char *ret = NULL;
  106d44:	e3a03000 	mov	r3, #0
  106d48:	e50b3008 	str	r3, [fp, #-8]
    int size_int = (int)size;
  106d4c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  106d50:	e50b300c 	str	r3, [fp, #-12]
    if (size_int < 0)
  106d54:	e51b300c 	ldr	r3, [fp, #-12]
  106d58:	e3530000 	cmp	r3, #0
  106d5c:	aa000001 	bge	106d68 <netdev_inet_ntop+0x40>
    {
        return NULL;
  106d60:	e3a03000 	mov	r3, #0
  106d64:	ea00000a 	b	106d94 <netdev_inet_ntop+0x6c>
    }
    switch (af)
  106d68:	e51b3010 	ldr	r3, [fp, #-16]
  106d6c:	e3530002 	cmp	r3, #2
  106d70:	0a000002 	beq	106d80 <netdev_inet_ntop+0x58>
#if NETDEV_IPV6
    case AF_INET6:
        return netdev_ip6addr_ntoa_r((const ip6_addr_t *)src, dst, size_int);
#endif
    default:
        break;
  106d74:	e320f000 	nop	{0}
    }
    return ret;
  106d78:	e51b3008 	ldr	r3, [fp, #-8]
  106d7c:	ea000004 	b	106d94 <netdev_inet_ntop+0x6c>
        return netdev_ip4addr_ntoa_r((const ip4_addr_t *)src, dst, size_int);
  106d80:	e51b200c 	ldr	r2, [fp, #-12]
  106d84:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  106d88:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  106d8c:	ebffff5b 	bl	106b00 <netdev_ip4addr_ntoa_r>
  106d90:	e1a03000 	mov	r3, r0
}
  106d94:	e1a00003 	mov	r0, r3
  106d98:	e24bd004 	sub	sp, fp, #4
  106d9c:	e8bd8800 	pop	{fp, pc}

00106da0 <netdev_inet_pton>:

int
netdev_inet_pton(int af, const char *src, void *dst)
{
  106da0:	e92d4800 	push	{fp, lr}
  106da4:	e28db004 	add	fp, sp, #4
  106da8:	e24dd018 	sub	sp, sp, #24
  106dac:	e50b0010 	str	r0, [fp, #-16]
  106db0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  106db4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
#define AF_INET         2
#define AF_INET6        10

    int err;
    switch (af)
  106db8:	e51b3010 	ldr	r3, [fp, #-16]
  106dbc:	e3530002 	cmp	r3, #2
  106dc0:	1a000004 	bne	106dd8 <netdev_inet_pton+0x38>
    {
#if NETDEV_IPV4
    case AF_INET:
        err = netdev_ip4addr_aton(src, (ip4_addr_t *)dst);
  106dc4:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  106dc8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  106dcc:	ebfffe3e 	bl	1066cc <netdev_ip4addr_aton>
  106dd0:	e50b0008 	str	r0, [fp, #-8]
        break;
  106dd4:	ea000002 	b	106de4 <netdev_inet_pton+0x44>
        }
        break;
    }
#endif
    default:
        err = -1;
  106dd8:	e3e03000 	mvn	r3, #0
  106ddc:	e50b3008 	str	r3, [fp, #-8]
        break;
  106de0:	e320f000 	nop	{0}
    }
    return err;
  106de4:	e51b3008 	ldr	r3, [fp, #-8]
}
  106de8:	e1a00003 	mov	r0, r3
  106dec:	e24bd004 	sub	sp, fp, #4
  106df0:	e8bd8800 	pop	{fp, pc}

00106df4 <sal_init>:
 *
 * @return result  0: initialize success
 *                -1: initialize failed
 */
int sal_init(void)
{
  106df4:	e92d4800 	push	{fp, lr}
  106df8:	e28db004 	add	fp, sp, #4
  106dfc:	e24dd008 	sub	sp, sp, #8
    int cn;

    if (init_ok)
  106e00:	e30d3490 	movw	r3, #54416	; 0xd490
  106e04:	e3403014 	movt	r3, #20
  106e08:	e5933000 	ldr	r3, [r3]
  106e0c:	e3530000 	cmp	r3, #0
  106e10:	0a000001 	beq	106e1c <sal_init+0x28>
    {
        LOG_D("Socket Abstraction Layer is already initialized.");
        return 0;
  106e14:	e3a03000 	mov	r3, #0
  106e18:	ea000032 	b	106ee8 <sal_init+0xf4>
    }

    /* init sal socket table */
    cn = SOCKET_TABLE_STEP_LEN < SAL_SOCKETS_NUM ? SOCKET_TABLE_STEP_LEN : SAL_SOCKETS_NUM;
  106e1c:	e3a03004 	mov	r3, #4
  106e20:	e50b3008 	str	r3, [fp, #-8]
    socket_table.max_socket = cn;
  106e24:	e51b2008 	ldr	r2, [fp, #-8]
  106e28:	e30d3460 	movw	r3, #54368	; 0xd460
  106e2c:	e3403014 	movt	r3, #20
  106e30:	e5832000 	str	r2, [r3]
    socket_table.sockets = rt_calloc(1, cn * sizeof(struct sal_socket *));
  106e34:	e51b3008 	ldr	r3, [fp, #-8]
  106e38:	e1a03103 	lsl	r3, r3, #2
  106e3c:	e1a01003 	mov	r1, r3
  106e40:	e3a00001 	mov	r0, #1
  106e44:	ebfff070 	bl	10300c <rt_calloc>
  106e48:	e1a02000 	mov	r2, r0
  106e4c:	e30d3460 	movw	r3, #54368	; 0xd460
  106e50:	e3403014 	movt	r3, #20
  106e54:	e5832004 	str	r2, [r3, #4]
    if (socket_table.sockets == RT_NULL)
  106e58:	e30d3460 	movw	r3, #54368	; 0xd460
  106e5c:	e3403014 	movt	r3, #20
  106e60:	e5933004 	ldr	r3, [r3, #4]
  106e64:	e3530000 	cmp	r3, #0
  106e68:	1a00000a 	bne	106e98 <sal_init+0xa4>
    {
        LOG_E("No memory for socket table.\n");
  106e6c:	e3050f58 	movw	r0, #24408	; 0x5f58
  106e70:	e3400014 	movt	r0, #20
  106e74:	ebfff0a6 	bl	103114 <rt_kprintf>
  106e78:	e3050f6c 	movw	r0, #24428	; 0x5f6c
  106e7c:	e3400014 	movt	r0, #20
  106e80:	ebfff0a3 	bl	103114 <rt_kprintf>
  106e84:	e3050f8c 	movw	r0, #24460	; 0x5f8c
  106e88:	e3400014 	movt	r0, #20
  106e8c:	ebfff0a0 	bl	103114 <rt_kprintf>
        return -1;
  106e90:	e3e03000 	mvn	r3, #0
  106e94:	ea000013 	b	106ee8 <sal_init+0xf4>
    }

    /* create sal socket lock */
    rt_mutex_init(&sal_core_lock, "sal_lock", RT_IPC_FLAG_FIFO);
  106e98:	e3a02000 	mov	r2, #0
  106e9c:	e3051f94 	movw	r1, #24468	; 0x5f94
  106ea0:	e3401014 	movt	r1, #20
  106ea4:	e30d0468 	movw	r0, #54376	; 0xd468
  106ea8:	e3400014 	movt	r0, #20
  106eac:	ebffe7a5 	bl	100d48 <rt_mutex_init>

    LOG_I("Socket Abstraction Layer initialize success.");
  106eb0:	e3050fa0 	movw	r0, #24480	; 0x5fa0
  106eb4:	e3400014 	movt	r0, #20
  106eb8:	ebfff095 	bl	103114 <rt_kprintf>
  106ebc:	e3050fb4 	movw	r0, #24500	; 0x5fb4
  106ec0:	e3400014 	movt	r0, #20
  106ec4:	ebfff092 	bl	103114 <rt_kprintf>
  106ec8:	e3050f8c 	movw	r0, #24460	; 0x5f8c
  106ecc:	e3400014 	movt	r0, #20
  106ed0:	ebfff08f 	bl	103114 <rt_kprintf>
    init_ok = RT_TRUE;
  106ed4:	e30d3490 	movw	r3, #54416	; 0xd490
  106ed8:	e3403014 	movt	r3, #20
  106edc:	e3a02001 	mov	r2, #1
  106ee0:	e5832000 	str	r2, [r3]

    return 0;
  106ee4:	e3a03000 	mov	r3, #0
}
  106ee8:	e1a00003 	mov	r0, r3
  106eec:	e24bd004 	sub	sp, fp, #4
  106ef0:	e8bd8800 	pop	{fp, pc}

00106ef4 <check_netdev_internet_up_work>:

/* check SAL network interface device internet status */
void check_netdev_internet_up_work(void *work_data)
{
  106ef4:	e92d4810 	push	{r4, fp, lr}
  106ef8:	e28db008 	add	fp, sp, #8
  106efc:	e24dd0ac 	sub	sp, sp, #172	; 0xac
  106f00:	e50b00a8 	str	r0, [fp, #-168]	; 0xffffff58
#define SAL_INTERNET_PORT      8101

#define SAL_INTERNET_MONTH_LEN 4
#define SAL_INTERNET_DATE_LEN  16

    int index, sockfd = -1, result = 0;
  106f04:	e3e03000 	mvn	r3, #0
  106f08:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  106f0c:	e3a03000 	mov	r3, #0
  106f10:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    struct sockaddr_in server_addr;
    struct hostent *host;
    struct timeval timeout;
    struct netdev *netdev = (struct netdev *)work_data;
  106f14:	e51b30a8 	ldr	r3, [fp, #-168]	; 0xffffff58
  106f18:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    socklen_t addr_len = sizeof(struct sockaddr_in);
  106f1c:	e3a03010 	mov	r3, #16
  106f20:	e50b3050 	str	r3, [fp, #-80]	; 0xffffffb0
    char send_data[SAL_INTERNET_BUFF_LEN], recv_data = 0;
  106f24:	e3a03000 	mov	r3, #0
  106f28:	e54b305d 	strb	r3, [fp, #-93]	; 0xffffffa3
    // struct rt_delayed_work *delay_work = (struct rt_delayed_work *)work;

    const char month[][SAL_INTERNET_MONTH_LEN] = {"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"};
  106f2c:	e3063008 	movw	r3, #24584	; 0x6008
  106f30:	e3403014 	movt	r3, #20
  106f34:	e24bc090 	sub	ip, fp, #144	; 0x90
  106f38:	e1a0e003 	mov	lr, r3
  106f3c:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
  106f40:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
  106f44:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
  106f48:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
  106f4c:	e89e000f 	ldm	lr, {r0, r1, r2, r3}
  106f50:	e88c000f 	stm	ip, {r0, r1, r2, r3}
    char date[SAL_INTERNET_DATE_LEN];
    int moth_num = 0;
  106f54:	e3a03000 	mov	r3, #0
  106f58:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    struct sal_proto_family *pf = (struct sal_proto_family *) netdev->sal_user_data;
  106f5c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  106f60:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  106f64:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
    // {
    //     rt_free(delay_work);
    // }

    /* get network interface socket operations */
    if (pf == RT_NULL || pf->skt_ops == RT_NULL)
  106f68:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106f6c:	e3530000 	cmp	r3, #0
  106f70:	0a000003 	beq	106f84 <check_netdev_internet_up_work+0x90>
  106f74:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106f78:	e5933008 	ldr	r3, [r3, #8]
  106f7c:	e3530000 	cmp	r3, #0
  106f80:	1a000002 	bne	106f90 <check_netdev_internet_up_work+0x9c>
    {
        result = -RT_ERROR;
  106f84:	e3e03000 	mvn	r3, #0
  106f88:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        goto __exit;
  106f8c:	ea0000bc 	b	107284 <check_netdev_internet_up_work+0x390>
    }

    host = (struct hostent *) pf->netdb_ops->gethostbyname(SAL_INTERNET_HOST);
  106f90:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106f94:	e593300c 	ldr	r3, [r3, #12]
  106f98:	e5933000 	ldr	r3, [r3]
  106f9c:	e3050fe4 	movw	r0, #24548	; 0x5fe4
  106fa0:	e3400014 	movt	r0, #20
  106fa4:	e12fff33 	blx	r3
  106fa8:	e50b002c 	str	r0, [fp, #-44]	; 0xffffffd4
    if (host == RT_NULL)
  106fac:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  106fb0:	e3530000 	cmp	r3, #0
  106fb4:	1a000002 	bne	106fc4 <check_netdev_internet_up_work+0xd0>
    {
        result = -RT_ERROR;
  106fb8:	e3e03000 	mvn	r3, #0
  106fbc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        goto __exit;
  106fc0:	ea0000af 	b	107284 <check_netdev_internet_up_work+0x390>
    }

    skt_ops = pf->skt_ops;
  106fc4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106fc8:	e5933008 	ldr	r3, [r3, #8]
  106fcc:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    if ((sockfd = skt_ops->socket(AF_INET, SOCK_DGRAM, 0)) < 0)
  106fd0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  106fd4:	e5933000 	ldr	r3, [r3]
  106fd8:	e3a02000 	mov	r2, #0
  106fdc:	e3a01002 	mov	r1, #2
  106fe0:	e3a00002 	mov	r0, #2
  106fe4:	e12fff33 	blx	r3
  106fe8:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  106fec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  106ff0:	e3530000 	cmp	r3, #0
  106ff4:	aa000002 	bge	107004 <check_netdev_internet_up_work+0x110>
    {
        result = -RT_ERROR;
  106ff8:	e3e03000 	mvn	r3, #0
  106ffc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        goto __exit;
  107000:	ea00009f 	b	107284 <check_netdev_internet_up_work+0x390>
    }
    
    server_addr.sin_family = AF_INET;
  107004:	e3a03002 	mov	r3, #2
  107008:	e54b303b 	strb	r3, [fp, #-59]	; 0xffffffc5
    server_addr.sin_port = htons(SAL_INTERNET_PORT);
  10700c:	e30a351f 	movw	r3, #42271	; 0xa51f
  107010:	e34f3fff 	movt	r3, #65535	; 0xffff
  107014:	e14b33ba 	strh	r3, [fp, #-58]	; 0xffffffc6
    server_addr.sin_addr = *((struct in_addr *)host->h_addr);
  107018:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10701c:	e5933010 	ldr	r3, [r3, #16]
  107020:	e5933000 	ldr	r3, [r3]
  107024:	e5933000 	ldr	r3, [r3]
  107028:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
    rt_memset(&(server_addr.sin_zero), 0, sizeof(server_addr.sin_zero));
  10702c:	e24b303c 	sub	r3, fp, #60	; 0x3c
  107030:	e2833008 	add	r3, r3, #8
  107034:	e3a02008 	mov	r2, #8
  107038:	e3a01000 	mov	r1, #0
  10703c:	e1a00003 	mov	r0, r3
  107040:	ebfff0a0 	bl	1032c8 <rt_memset>

    timeout.tv_sec = SAL_INTERNET_TIMEOUT;
  107044:	e3a02002 	mov	r2, #2
  107048:	e3a03000 	mov	r3, #0
  10704c:	e14b24fc 	strd	r2, [fp, #-76]	; 0xffffffb4
    timeout.tv_usec = 0;
  107050:	e3a03000 	mov	r3, #0
  107054:	e50b3044 	str	r3, [fp, #-68]	; 0xffffffbc

    /* set receive and send timeout */
    skt_ops->setsockopt(sockfd, SOL_SOCKET, SO_RCVTIMEO, (void *) &timeout, sizeof(timeout));
  107058:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10705c:	e5934024 	ldr	r4, [r3, #36]	; 0x24
  107060:	e24b204c 	sub	r2, fp, #76	; 0x4c
  107064:	e3a03010 	mov	r3, #16
  107068:	e58d3000 	str	r3, [sp]
  10706c:	e1a03002 	mov	r3, r2
  107070:	e3012006 	movw	r2, #4102	; 0x1006
  107074:	e3001fff 	movw	r1, #4095	; 0xfff
  107078:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  10707c:	e12fff34 	blx	r4
    skt_ops->setsockopt(sockfd, SOL_SOCKET, SO_SNDTIMEO, (void *) &timeout, sizeof(timeout));
  107080:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107084:	e5934024 	ldr	r4, [r3, #36]	; 0x24
  107088:	e24b204c 	sub	r2, fp, #76	; 0x4c
  10708c:	e3a03010 	mov	r3, #16
  107090:	e58d3000 	str	r3, [sp]
  107094:	e1a03002 	mov	r3, r2
  107098:	e3012005 	movw	r2, #4101	; 0x1005
  10709c:	e3001fff 	movw	r1, #4095	; 0xfff
  1070a0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1070a4:	e12fff34 	blx	r4

    /* get build moth value*/
    rt_memset(date, 0x00, SAL_INTERNET_DATE_LEN);
  1070a8:	e24b30a0 	sub	r3, fp, #160	; 0xa0
  1070ac:	e3a02010 	mov	r2, #16
  1070b0:	e3a01000 	mov	r1, #0
  1070b4:	e1a00003 	mov	r0, r3
  1070b8:	ebfff082 	bl	1032c8 <rt_memset>
    rt_snprintf(date, SAL_INTERNET_DATE_LEN, "%s", __DATE__);
  1070bc:	e24b00a0 	sub	r0, fp, #160	; 0xa0
  1070c0:	e3053ff8 	movw	r3, #24568	; 0x5ff8
  1070c4:	e3403014 	movt	r3, #20
  1070c8:	e3062004 	movw	r2, #24580	; 0x6004
  1070cc:	e3402014 	movt	r2, #20
  1070d0:	e3a01010 	mov	r1, #16
  1070d4:	ebffefd8 	bl	10303c <rt_snprintf>

    for (index = 0; index < sizeof(month) / SAL_INTERNET_MONTH_LEN; index++)
  1070d8:	e3a03000 	mov	r3, #0
  1070dc:	e50b3010 	str	r3, [fp, #-16]
  1070e0:	ea000011 	b	10712c <check_netdev_internet_up_work+0x238>
    {
        if (rt_memcmp(date, month[index], SAL_INTERNET_MONTH_LEN - 1) == 0)
  1070e4:	e24b2090 	sub	r2, fp, #144	; 0x90
  1070e8:	e51b3010 	ldr	r3, [fp, #-16]
  1070ec:	e1a03103 	lsl	r3, r3, #2
  1070f0:	e0821003 	add	r1, r2, r3
  1070f4:	e24b30a0 	sub	r3, fp, #160	; 0xa0
  1070f8:	e3a02003 	mov	r2, #3
  1070fc:	e1a00003 	mov	r0, r3
  107100:	ebfff08c 	bl	103338 <rt_memcmp>
  107104:	e1a03000 	mov	r3, r0
  107108:	e3530000 	cmp	r3, #0
  10710c:	1a000003 	bne	107120 <check_netdev_internet_up_work+0x22c>
        {
            moth_num = index + 1;
  107110:	e51b3010 	ldr	r3, [fp, #-16]
  107114:	e2833001 	add	r3, r3, #1
  107118:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
            break;
  10711c:	ea000005 	b	107138 <check_netdev_internet_up_work+0x244>
    for (index = 0; index < sizeof(month) / SAL_INTERNET_MONTH_LEN; index++)
  107120:	e51b3010 	ldr	r3, [fp, #-16]
  107124:	e2833001 	add	r3, r3, #1
  107128:	e50b3010 	str	r3, [fp, #-16]
  10712c:	e51b3010 	ldr	r3, [fp, #-16]
  107130:	e353000b 	cmp	r3, #11
  107134:	9affffea 	bls	1070e4 <check_netdev_internet_up_work+0x1f0>
        }
    }

    /* not find build month */
    if (moth_num == 0 || moth_num > sizeof(month) / SAL_INTERNET_MONTH_LEN)
  107138:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10713c:	e3530000 	cmp	r3, #0
  107140:	0a000002 	beq	107150 <check_netdev_internet_up_work+0x25c>
  107144:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  107148:	e353000c 	cmp	r3, #12
  10714c:	9a000002 	bls	10715c <check_netdev_internet_up_work+0x268>
    {
        result = -RT_ERROR;
  107150:	e3e03000 	mvn	r3, #0
  107154:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        goto __exit;
  107158:	ea000049 	b	107284 <check_netdev_internet_up_work+0x390>
    }

    rt_memset(send_data, 0x00, SAL_INTERNET_BUFF_LEN);
  10715c:	e24b305c 	sub	r3, fp, #92	; 0x5c
  107160:	e3a0200c 	mov	r2, #12
  107164:	e3a01000 	mov	r1, #0
  107168:	e1a00003 	mov	r0, r3
  10716c:	ebfff055 	bl	1032c8 <rt_memset>
    send_data[0] = SAL_INTERNET_VERSION;
  107170:	e3a03000 	mov	r3, #0
  107174:	e54b305c 	strb	r3, [fp, #-92]	; 0xffffffa4
    for (index = 0; index < netdev->hwaddr_len; index++)
  107178:	e3a03000 	mov	r3, #0
  10717c:	e50b3010 	str	r3, [fp, #-16]
  107180:	ea000010 	b	1071c8 <check_netdev_internet_up_work+0x2d4>
    {
        send_data[index + 1] = netdev->hwaddr[index] + moth_num;
  107184:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  107188:	e51b3010 	ldr	r3, [fp, #-16]
  10718c:	e0823003 	add	r3, r2, r3
  107190:	e2833021 	add	r3, r3, #33	; 0x21
  107194:	e5d31000 	ldrb	r1, [r3]
  107198:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10719c:	e6ef2073 	uxtb	r2, r3
  1071a0:	e51b3010 	ldr	r3, [fp, #-16]
  1071a4:	e2833001 	add	r3, r3, #1
  1071a8:	e0812002 	add	r2, r1, r2
  1071ac:	e6ef2072 	uxtb	r2, r2
  1071b0:	e24b100c 	sub	r1, fp, #12
  1071b4:	e0813003 	add	r3, r1, r3
  1071b8:	e5432050 	strb	r2, [r3, #-80]	; 0xffffffb0
    for (index = 0; index < netdev->hwaddr_len; index++)
  1071bc:	e51b3010 	ldr	r3, [fp, #-16]
  1071c0:	e2833001 	add	r3, r3, #1
  1071c4:	e50b3010 	str	r3, [fp, #-16]
  1071c8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1071cc:	e5d33020 	ldrb	r3, [r3, #32]
  1071d0:	e1a02003 	mov	r2, r3
  1071d4:	e51b3010 	ldr	r3, [fp, #-16]
  1071d8:	e1530002 	cmp	r3, r2
  1071dc:	baffffe8 	blt	107184 <check_netdev_internet_up_work+0x290>
    }
    send_data[9] = RT_VERSION;
  1071e0:	e3a03005 	mov	r3, #5
  1071e4:	e54b3053 	strb	r3, [fp, #-83]	; 0xffffffad
    send_data[10] = RT_SUBVERSION;
  1071e8:	e3a03000 	mov	r3, #0
  1071ec:	e54b3052 	strb	r3, [fp, #-82]	; 0xffffffae
    send_data[11] = RT_REVISION;
  1071f0:	e3a03000 	mov	r3, #0
  1071f4:	e54b3051 	strb	r3, [fp, #-81]	; 0xffffffaf

    skt_ops->sendto(sockfd, send_data, SAL_INTERNET_BUFF_LEN, 0,
  1071f8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1071fc:	e5934018 	ldr	r4, [r3, #24]
  107200:	e24b105c 	sub	r1, fp, #92	; 0x5c
  107204:	e3a03010 	mov	r3, #16
  107208:	e58d3004 	str	r3, [sp, #4]
  10720c:	e24b303c 	sub	r3, fp, #60	; 0x3c
  107210:	e58d3000 	str	r3, [sp]
  107214:	e3a03000 	mov	r3, #0
  107218:	e3a0200c 	mov	r2, #12
  10721c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  107220:	e12fff34 	blx	r4
                    (struct sockaddr *)&server_addr, sizeof(struct sockaddr));

    result = skt_ops->recvfrom(sockfd, &recv_data, sizeof(recv_data), 0, (struct sockaddr *)&server_addr, &addr_len);
  107224:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107228:	e593401c 	ldr	r4, [r3, #28]
  10722c:	e24b105d 	sub	r1, fp, #93	; 0x5d
  107230:	e24b3050 	sub	r3, fp, #80	; 0x50
  107234:	e58d3004 	str	r3, [sp, #4]
  107238:	e24b303c 	sub	r3, fp, #60	; 0x3c
  10723c:	e58d3000 	str	r3, [sp]
  107240:	e3a03000 	mov	r3, #0
  107244:	e3a02001 	mov	r2, #1
  107248:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  10724c:	e12fff34 	blx	r4
  107250:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    if (result < 0)
  107254:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  107258:	e3530000 	cmp	r3, #0
  10725c:	ba000005 	blt	107278 <check_netdev_internet_up_work+0x384>
    {
        goto __exit;
    }

    if (recv_data == RT_FALSE)
  107260:	e55b305d 	ldrb	r3, [fp, #-93]	; 0xffffffa3
  107264:	e3530000 	cmp	r3, #0
  107268:	1a000004 	bne	107280 <check_netdev_internet_up_work+0x38c>
    {
        result = -RT_ERROR;
  10726c:	e3e03000 	mvn	r3, #0
  107270:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        goto __exit;
  107274:	ea000002 	b	107284 <check_netdev_internet_up_work+0x390>
        goto __exit;
  107278:	e320f000 	nop	{0}
  10727c:	ea000000 	b	107284 <check_netdev_internet_up_work+0x390>
    }

__exit:
  107280:	e320f000 	nop	{0}
    if (result > 0)
  107284:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  107288:	e3530000 	cmp	r3, #0
  10728c:	da000006 	ble	1072ac <check_netdev_internet_up_work+0x3b8>
    {
        LOG_D("Set network interface device(%s) internet status up.", netdev->name);
        netdev->flags |= NETDEV_FLAG_INTERNET_UP;
  107290:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  107294:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  107298:	e3833080 	orr	r3, r3, #128	; 0x80
  10729c:	e6ff2073 	uxth	r2, r3
  1072a0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1072a4:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
  1072a8:	ea000005 	b	1072c4 <check_netdev_internet_up_work+0x3d0>
    }
    else
    {
        LOG_D("Set network interface device(%s) internet status down.", netdev->name);
        netdev->flags &= ~NETDEV_FLAG_INTERNET_UP;
  1072ac:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1072b0:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1072b4:	e3c33080 	bic	r3, r3, #128	; 0x80
  1072b8:	e6ff2073 	uxth	r2, r3
  1072bc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1072c0:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
    }

    if (sockfd >= 0)
  1072c4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1072c8:	e3530000 	cmp	r3, #0
  1072cc:	ba000003 	blt	1072e0 <check_netdev_internet_up_work+0x3ec>
    {
        skt_ops->closesocket(sockfd);
  1072d0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1072d4:	e5933004 	ldr	r3, [r3, #4]
  1072d8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1072dc:	e12fff33 	blx	r3
    }
}
  1072e0:	e320f000 	nop	{0}
  1072e4:	e24bd008 	sub	sp, fp, #8
  1072e8:	e8bd8810 	pop	{r4, fp, pc}

001072ec <sal_get_socket>:
 * @param socket sal socket index
 *
 * @return sal socket object of the current sal socket index
 */
struct sal_socket *sal_get_socket(int socket)
{
  1072ec:	e92d4800 	push	{fp, lr}
  1072f0:	e28db004 	add	fp, sp, #4
  1072f4:	e24dd010 	sub	sp, sp, #16
  1072f8:	e50b0010 	str	r0, [fp, #-16]
    struct sal_socket_table *st = &socket_table;
  1072fc:	e30d3460 	movw	r3, #54368	; 0xd460
  107300:	e3403014 	movt	r3, #20
  107304:	e50b3008 	str	r3, [fp, #-8]

    if (socket < 0 || socket >= (int) st->max_socket)
  107308:	e51b3010 	ldr	r3, [fp, #-16]
  10730c:	e3530000 	cmp	r3, #0
  107310:	ba000005 	blt	10732c <sal_get_socket+0x40>
  107314:	e51b3008 	ldr	r3, [fp, #-8]
  107318:	e5933000 	ldr	r3, [r3]
  10731c:	e1a02003 	mov	r2, r3
  107320:	e51b3010 	ldr	r3, [fp, #-16]
  107324:	e1530002 	cmp	r3, r2
  107328:	ba000001 	blt	107334 <sal_get_socket+0x48>
    {
        return RT_NULL;
  10732c:	e3a03000 	mov	r3, #0
  107330:	ea000015 	b	10738c <sal_get_socket+0xa0>
    }

    socket = socket - SAL_SOCKET_OFFSET;
    /* check socket structure valid or not */
    RT_ASSERT(st->sockets[socket]->magic == SAL_SOCKET_MAGIC);
  107334:	e51b3008 	ldr	r3, [fp, #-8]
  107338:	e5932004 	ldr	r2, [r3, #4]
  10733c:	e51b3010 	ldr	r3, [fp, #-16]
  107340:	e1a03103 	lsl	r3, r3, #2
  107344:	e0823003 	add	r3, r2, r3
  107348:	e5933000 	ldr	r3, [r3]
  10734c:	e5933000 	ldr	r3, [r3]
  107350:	e3052a10 	movw	r2, #23056	; 0x5a10
  107354:	e1530002 	cmp	r3, r2
  107358:	0a000005 	beq	107374 <sal_get_socket+0x88>
  10735c:	e300213b 	movw	r2, #315	; 0x13b
  107360:	e306112c 	movw	r1, #24876	; 0x612c
  107364:	e3401014 	movt	r1, #20
  107368:	e3060038 	movw	r0, #24632	; 0x6038
  10736c:	e3400014 	movt	r0, #20
  107370:	ebfff088 	bl	103598 <rt_assert_handler>

    return st->sockets[socket];
  107374:	e51b3008 	ldr	r3, [fp, #-8]
  107378:	e5932004 	ldr	r2, [r3, #4]
  10737c:	e51b3010 	ldr	r3, [fp, #-16]
  107380:	e1a03103 	lsl	r3, r3, #2
  107384:	e0823003 	add	r3, r2, r3
  107388:	e5933000 	ldr	r3, [r3]
}
  10738c:	e1a00003 	mov	r0, r3
  107390:	e24bd004 	sub	sp, fp, #4
  107394:	e8bd8800 	pop	{fp, pc}

00107398 <sal_lock>:
 * This function will lock sal socket.
 *
 * @note please don't invoke it on ISR.
 */
static void sal_lock(void)
{
  107398:	e92d4800 	push	{fp, lr}
  10739c:	e28db004 	add	fp, sp, #4
  1073a0:	e24dd008 	sub	sp, sp, #8
    rt_err_t result;

    result = rt_mutex_take(&sal_core_lock, RT_WAITING_FOREVER);
  1073a4:	e3e01000 	mvn	r1, #0
  1073a8:	e30d0468 	movw	r0, #54376	; 0xd468
  1073ac:	e3400014 	movt	r0, #20
  1073b0:	ebffe6d2 	bl	100f00 <rt_mutex_take>
  1073b4:	e50b0008 	str	r0, [fp, #-8]
    if (result != RT_EOK)
  1073b8:	e51b3008 	ldr	r3, [fp, #-8]
  1073bc:	e3530000 	cmp	r3, #0
  1073c0:	0a000005 	beq	1073dc <sal_lock+0x44>
    {
        RT_ASSERT(0);
  1073c4:	e3a02f53 	mov	r2, #332	; 0x14c
  1073c8:	e306113c 	movw	r1, #24892	; 0x613c
  1073cc:	e3401014 	movt	r1, #20
  1073d0:	e3060068 	movw	r0, #24680	; 0x6068
  1073d4:	e3400014 	movt	r0, #20
  1073d8:	ebfff06e 	bl	103598 <rt_assert_handler>
    }
}
  1073dc:	e320f000 	nop	{0}
  1073e0:	e24bd004 	sub	sp, fp, #4
  1073e4:	e8bd8800 	pop	{fp, pc}

001073e8 <sal_unlock>:
 * This function will lock sal socket.
 *
 * @note please don't invoke it on ISR.
 */
static void sal_unlock(void)
{
  1073e8:	e92d4800 	push	{fp, lr}
  1073ec:	e28db004 	add	fp, sp, #4
    rt_mutex_release(&sal_core_lock);
  1073f0:	e30d0468 	movw	r0, #54376	; 0xd468
  1073f4:	e3400014 	movt	r0, #20
  1073f8:	ebffe6de 	bl	100f78 <rt_mutex_release>
}
  1073fc:	e320f000 	nop	{0}
  107400:	e8bd8800 	pop	{fp, pc}

00107404 <sal_netdev_cleanup>:
 * This function will clean the netdev.
 *
 * @note please don't invoke it on ISR.
 */
int sal_netdev_cleanup(struct netdev *netdev)
{
  107404:	e92d4800 	push	{fp, lr}
  107408:	e28db004 	add	fp, sp, #4
  10740c:	e24dd010 	sub	sp, sp, #16
  107410:	e50b0010 	str	r0, [fp, #-16]
    int idx = 0, find_dev;
  107414:	e3a03000 	mov	r3, #0
  107418:	e50b3008 	str	r3, [fp, #-8]

    do
    {
        find_dev = 0;
  10741c:	e3a03000 	mov	r3, #0
  107420:	e50b300c 	str	r3, [fp, #-12]
        sal_lock();
  107424:	ebffffdb 	bl	107398 <sal_lock>
        for (idx = 0; idx < socket_table.max_socket; idx++)
  107428:	e3a03000 	mov	r3, #0
  10742c:	e50b3008 	str	r3, [fp, #-8]
  107430:	ea000019 	b	10749c <sal_netdev_cleanup+0x98>
        {
            if (socket_table.sockets[idx] && socket_table.sockets[idx]->netdev == netdev)
  107434:	e30d3460 	movw	r3, #54368	; 0xd460
  107438:	e3403014 	movt	r3, #20
  10743c:	e5932004 	ldr	r2, [r3, #4]
  107440:	e51b3008 	ldr	r3, [fp, #-8]
  107444:	e1a03103 	lsl	r3, r3, #2
  107448:	e0823003 	add	r3, r2, r3
  10744c:	e5933000 	ldr	r3, [r3]
  107450:	e3530000 	cmp	r3, #0
  107454:	0a00000d 	beq	107490 <sal_netdev_cleanup+0x8c>
  107458:	e30d3460 	movw	r3, #54368	; 0xd460
  10745c:	e3403014 	movt	r3, #20
  107460:	e5932004 	ldr	r2, [r3, #4]
  107464:	e51b3008 	ldr	r3, [fp, #-8]
  107468:	e1a03103 	lsl	r3, r3, #2
  10746c:	e0823003 	add	r3, r2, r3
  107470:	e5933000 	ldr	r3, [r3]
  107474:	e5933014 	ldr	r3, [r3, #20]
  107478:	e51b2010 	ldr	r2, [fp, #-16]
  10747c:	e1520003 	cmp	r2, r3
  107480:	1a000002 	bne	107490 <sal_netdev_cleanup+0x8c>
            {
                find_dev = 1;
  107484:	e3a03001 	mov	r3, #1
  107488:	e50b300c 	str	r3, [fp, #-12]
                break;
  10748c:	ea000008 	b	1074b4 <sal_netdev_cleanup+0xb0>
        for (idx = 0; idx < socket_table.max_socket; idx++)
  107490:	e51b3008 	ldr	r3, [fp, #-8]
  107494:	e2833001 	add	r3, r3, #1
  107498:	e50b3008 	str	r3, [fp, #-8]
  10749c:	e30d3460 	movw	r3, #54368	; 0xd460
  1074a0:	e3403014 	movt	r3, #20
  1074a4:	e5932000 	ldr	r2, [r3]
  1074a8:	e51b3008 	ldr	r3, [fp, #-8]
  1074ac:	e1520003 	cmp	r2, r3
  1074b0:	8affffdf 	bhi	107434 <sal_netdev_cleanup+0x30>
            }
        }
        sal_unlock();
  1074b4:	ebffffcb 	bl	1073e8 <sal_unlock>
        if (find_dev)
  1074b8:	e51b300c 	ldr	r3, [fp, #-12]
  1074bc:	e3530000 	cmp	r3, #0
  1074c0:	0a000001 	beq	1074cc <sal_netdev_cleanup+0xc8>
        {
            rt_thread_mdelay(100);
  1074c4:	e3a00064 	mov	r0, #100	; 0x64
  1074c8:	ebffea6b 	bl	101e7c <rt_thread_mdelay>
        }
    }
    while (find_dev);
  1074cc:	e51b300c 	ldr	r3, [fp, #-12]
  1074d0:	e3530000 	cmp	r3, #0
  1074d4:	1affffd0 	bne	10741c <sal_netdev_cleanup+0x18>

    return 0;
  1074d8:	e3a03000 	mov	r3, #0
}
  1074dc:	e1a00003 	mov	r0, r3
  1074e0:	e24bd004 	sub	sp, fp, #4
  1074e4:	e8bd8800 	pop	{fp, pc}

001074e8 <socket_init>:
 *         -1 : input the wrong family
 *         -2 : input the wrong socket type
 *         -3 : get network interface failed
 */
static int socket_init(int family, int type, int protocol, struct sal_socket **res)
{
  1074e8:	e92d4800 	push	{fp, lr}
  1074ec:	e28db004 	add	fp, sp, #4
  1074f0:	e24dd028 	sub	sp, sp, #40	; 0x28
  1074f4:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  1074f8:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  1074fc:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  107500:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4

    struct sal_socket *sock;
    struct sal_proto_family *pf;
    struct netdev *netdv_def = netdev_default;
  107504:	e30f3574 	movw	r3, #62836	; 0xf574
  107508:	e3403014 	movt	r3, #20
  10750c:	e5933000 	ldr	r3, [r3]
  107510:	e50b300c 	str	r3, [fp, #-12]
    struct netdev *netdev = RT_NULL;
  107514:	e3a03000 	mov	r3, #0
  107518:	e50b3010 	str	r3, [fp, #-16]
    rt_bool_t flag = RT_FALSE;
  10751c:	e3a03000 	mov	r3, #0
  107520:	e50b3008 	str	r3, [fp, #-8]

    if (family < 0 || family > AF_MAX)
  107524:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107528:	e3530000 	cmp	r3, #0
  10752c:	ba000002 	blt	10753c <socket_init+0x54>
  107530:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107534:	e353002f 	cmp	r3, #47	; 0x2f
  107538:	da000001 	ble	107544 <socket_init+0x5c>
    {
        return -1;
  10753c:	e3e03000 	mvn	r3, #0
  107540:	ea000050 	b	107688 <socket_init+0x1a0>
    }

    if (type < 0 || type > SOCK_MAX)
  107544:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  107548:	e3530000 	cmp	r3, #0
  10754c:	ba000004 	blt	107564 <socket_init+0x7c>
  107550:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  107554:	e3a03001 	mov	r3, #1
  107558:	e3403008 	movt	r3, #8
  10755c:	e1520003 	cmp	r2, r3
  107560:	da000001 	ble	10756c <socket_init+0x84>
    {
        return -2;
  107564:	e3e03001 	mvn	r3, #1
  107568:	ea000046 	b	107688 <socket_init+0x1a0>
    }

    sock = *res;
  10756c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  107570:	e5933000 	ldr	r3, [r3]
  107574:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    sock->domain = family;
  107578:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10757c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  107580:	e5832008 	str	r2, [r3, #8]
    sock->type = type;
  107584:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107588:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  10758c:	e583200c 	str	r2, [r3, #12]
    sock->protocol = protocol;
  107590:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107594:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  107598:	e5832010 	str	r2, [r3, #16]

    if (netdv_def && netdev_is_up(netdv_def))
  10759c:	e51b300c 	ldr	r3, [fp, #-12]
  1075a0:	e3530000 	cmp	r3, #0
  1075a4:	0a00001e 	beq	107624 <socket_init+0x13c>
  1075a8:	e51b300c 	ldr	r3, [fp, #-12]
  1075ac:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1075b0:	e2033001 	and	r3, r3, #1
  1075b4:	e6ef3073 	uxtb	r3, r3
  1075b8:	e3530000 	cmp	r3, #0
  1075bc:	0a000018 	beq	107624 <socket_init+0x13c>
    {
        /* check default network interface device protocol family */
        pf = (struct sal_proto_family *) netdv_def->sal_user_data;
  1075c0:	e51b300c 	ldr	r3, [fp, #-12]
  1075c4:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  1075c8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        if (pf != RT_NULL && pf->skt_ops && (pf->family == family || pf->sec_family == family))
  1075cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1075d0:	e3530000 	cmp	r3, #0
  1075d4:	0a000012 	beq	107624 <socket_init+0x13c>
  1075d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1075dc:	e5933008 	ldr	r3, [r3, #8]
  1075e0:	e3530000 	cmp	r3, #0
  1075e4:	0a00000e 	beq	107624 <socket_init+0x13c>
  1075e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1075ec:	e5933000 	ldr	r3, [r3]
  1075f0:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1075f4:	e1520003 	cmp	r2, r3
  1075f8:	0a000004 	beq	107610 <socket_init+0x128>
  1075fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  107600:	e5933004 	ldr	r3, [r3, #4]
  107604:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  107608:	e1520003 	cmp	r2, r3
  10760c:	1a000004 	bne	107624 <socket_init+0x13c>
        {
            sock->netdev = netdv_def;
  107610:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107614:	e51b200c 	ldr	r2, [fp, #-12]
  107618:	e5832014 	str	r2, [r3, #20]
            flag = RT_TRUE;
  10761c:	e3a03001 	mov	r3, #1
  107620:	e50b3008 	str	r3, [fp, #-8]
        }
    }

    if (flag == RT_FALSE)
  107624:	e51b3008 	ldr	r3, [fp, #-8]
  107628:	e3530000 	cmp	r3, #0
  10762c:	1a000014 	bne	107684 <socket_init+0x19c>
    {
        /* get network interface device by protocol family */
        netdev = netdev_get_by_family(family);
  107630:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  107634:	ebfff7e1 	bl	1055c0 <netdev_get_by_family>
  107638:	e50b0010 	str	r0, [fp, #-16]
        if (netdev == RT_NULL)
  10763c:	e51b3010 	ldr	r3, [fp, #-16]
  107640:	e3530000 	cmp	r3, #0
  107644:	1a00000b 	bne	107678 <socket_init+0x190>
        {
            LOG_E("not find network interface device by protocol family(%d).", family);
  107648:	e3050f58 	movw	r0, #24408	; 0x5f58
  10764c:	e3400014 	movt	r0, #20
  107650:	ebffeeaf 	bl	103114 <rt_kprintf>
  107654:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  107658:	e306006c 	movw	r0, #24684	; 0x606c
  10765c:	e3400014 	movt	r0, #20
  107660:	ebffeeab 	bl	103114 <rt_kprintf>
  107664:	e3050f8c 	movw	r0, #24460	; 0x5f8c
  107668:	e3400014 	movt	r0, #20
  10766c:	ebffeea8 	bl	103114 <rt_kprintf>
            return -3;
  107670:	e3e03002 	mvn	r3, #2
  107674:	ea000003 	b	107688 <socket_init+0x1a0>
        }

        sock->netdev = netdev;
  107678:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10767c:	e51b2010 	ldr	r2, [fp, #-16]
  107680:	e5832014 	str	r2, [r3, #20]
    }

    return 0;
  107684:	e3a03000 	mov	r3, #0
}
  107688:	e1a00003 	mov	r0, r3
  10768c:	e24bd004 	sub	sp, fp, #4
  107690:	e8bd8800 	pop	{fp, pc}

00107694 <socket_alloc>:

static int socket_alloc(struct sal_socket_table *st, int f_socket)
{
  107694:	e92d4810 	push	{r4, fp, lr}
  107698:	e28db008 	add	fp, sp, #8
  10769c:	e24dd01c 	sub	sp, sp, #28
  1076a0:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  1076a4:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
    int idx;

    /* find an empty socket entry */
    for (idx = f_socket; idx < (int) st->max_socket; idx++)
  1076a8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1076ac:	e50b3010 	str	r3, [fp, #-16]
  1076b0:	ea00000a 	b	1076e0 <socket_alloc+0x4c>
    {
        if (st->sockets[idx] == RT_NULL)
  1076b4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1076b8:	e5932004 	ldr	r2, [r3, #4]
  1076bc:	e51b3010 	ldr	r3, [fp, #-16]
  1076c0:	e1a03103 	lsl	r3, r3, #2
  1076c4:	e0823003 	add	r3, r2, r3
  1076c8:	e5933000 	ldr	r3, [r3]
  1076cc:	e3530000 	cmp	r3, #0
  1076d0:	0a000009 	beq	1076fc <socket_alloc+0x68>
    for (idx = f_socket; idx < (int) st->max_socket; idx++)
  1076d4:	e51b3010 	ldr	r3, [fp, #-16]
  1076d8:	e2833001 	add	r3, r3, #1
  1076dc:	e50b3010 	str	r3, [fp, #-16]
  1076e0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1076e4:	e5933000 	ldr	r3, [r3]
  1076e8:	e1a02003 	mov	r2, r3
  1076ec:	e51b3010 	ldr	r3, [fp, #-16]
  1076f0:	e1530002 	cmp	r3, r2
  1076f4:	baffffee 	blt	1076b4 <socket_alloc+0x20>
  1076f8:	ea000000 	b	107700 <socket_alloc+0x6c>
        {
            break;
  1076fc:	e320f000 	nop	{0}
        }
    }

    /* allocate a larger sockte container */
    if (idx == (int) st->max_socket &&  st->max_socket < SAL_SOCKETS_NUM)
  107700:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107704:	e5933000 	ldr	r3, [r3]
  107708:	e1a02003 	mov	r2, r3
  10770c:	e51b3010 	ldr	r3, [fp, #-16]
  107710:	e1530002 	cmp	r3, r2
  107714:	1a00002e 	bne	1077d4 <socket_alloc+0x140>
  107718:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10771c:	e5933000 	ldr	r3, [r3]
  107720:	e353001f 	cmp	r3, #31
  107724:	8a00002a 	bhi	1077d4 <socket_alloc+0x140>
    {
        int cnt, index;
        struct sal_socket **sockets;

        /* increase the number of socket with 4 step length */
        cnt = st->max_socket + SOCKET_TABLE_STEP_LEN;
  107728:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10772c:	e5933000 	ldr	r3, [r3]
  107730:	e2833004 	add	r3, r3, #4
  107734:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        cnt = cnt > SAL_SOCKETS_NUM ? SAL_SOCKETS_NUM : cnt;
  107738:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10773c:	e3530020 	cmp	r3, #32
  107740:	b1a03003 	movlt	r3, r3
  107744:	a3a03020 	movge	r3, #32
  107748:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

        sockets = rt_realloc(st->sockets, cnt * sizeof(struct sal_socket *));
  10774c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107750:	e5932004 	ldr	r2, [r3, #4]
  107754:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  107758:	e1a03103 	lsl	r3, r3, #2
  10775c:	e1a01003 	mov	r1, r3
  107760:	e1a00002 	mov	r0, r2
  107764:	ebffee1c 	bl	102fdc <rt_realloc>
  107768:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
        if (sockets == RT_NULL)
  10776c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  107770:	e3530000 	cmp	r3, #0
  107774:	0a00003a 	beq	107864 <socket_alloc+0x1d0>
            goto __result; /* return st->max_socket */

        /* clean the new allocated fds */
        for (index = st->max_socket; index < cnt; index++)
  107778:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10777c:	e5933000 	ldr	r3, [r3]
  107780:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  107784:	ea000008 	b	1077ac <socket_alloc+0x118>
        {
            sockets[index] = RT_NULL;
  107788:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10778c:	e1a03103 	lsl	r3, r3, #2
  107790:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  107794:	e0823003 	add	r3, r2, r3
  107798:	e3a02000 	mov	r2, #0
  10779c:	e5832000 	str	r2, [r3]
        for (index = st->max_socket; index < cnt; index++)
  1077a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1077a4:	e2833001 	add	r3, r3, #1
  1077a8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1077ac:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1077b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1077b4:	e1520003 	cmp	r2, r3
  1077b8:	bafffff2 	blt	107788 <socket_alloc+0xf4>
        }

        st->sockets = sockets;
  1077bc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1077c0:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1077c4:	e5832004 	str	r2, [r3, #4]
        st->max_socket = cnt;
  1077c8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1077cc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1077d0:	e5832000 	str	r2, [r3]
    }

    /* allocate  'struct sal_socket' */
    if (idx < (int) st->max_socket && st->sockets[idx] == RT_NULL)
  1077d4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1077d8:	e5933000 	ldr	r3, [r3]
  1077dc:	e1a02003 	mov	r2, r3
  1077e0:	e51b3010 	ldr	r3, [fp, #-16]
  1077e4:	e1530002 	cmp	r3, r2
  1077e8:	aa00001f 	bge	10786c <socket_alloc+0x1d8>
  1077ec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1077f0:	e5932004 	ldr	r2, [r3, #4]
  1077f4:	e51b3010 	ldr	r3, [fp, #-16]
  1077f8:	e1a03103 	lsl	r3, r3, #2
  1077fc:	e0823003 	add	r3, r2, r3
  107800:	e5933000 	ldr	r3, [r3]
  107804:	e3530000 	cmp	r3, #0
  107808:	1a000017 	bne	10786c <socket_alloc+0x1d8>
    {
        st->sockets[idx] = rt_calloc(1, sizeof(struct sal_socket));
  10780c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107810:	e5932004 	ldr	r2, [r3, #4]
  107814:	e51b3010 	ldr	r3, [fp, #-16]
  107818:	e1a03103 	lsl	r3, r3, #2
  10781c:	e0824003 	add	r4, r2, r3
  107820:	e3a0101c 	mov	r1, #28
  107824:	e3a00001 	mov	r0, #1
  107828:	ebffedf7 	bl	10300c <rt_calloc>
  10782c:	e1a03000 	mov	r3, r0
  107830:	e5843000 	str	r3, [r4]
        if (st->sockets[idx] == RT_NULL)
  107834:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107838:	e5932004 	ldr	r2, [r3, #4]
  10783c:	e51b3010 	ldr	r3, [fp, #-16]
  107840:	e1a03103 	lsl	r3, r3, #2
  107844:	e0823003 	add	r3, r2, r3
  107848:	e5933000 	ldr	r3, [r3]
  10784c:	e3530000 	cmp	r3, #0
  107850:	1a000005 	bne	10786c <socket_alloc+0x1d8>
        {
            idx = st->max_socket;
  107854:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107858:	e5933000 	ldr	r3, [r3]
  10785c:	e50b3010 	str	r3, [fp, #-16]
  107860:	ea000002 	b	107870 <socket_alloc+0x1dc>
            goto __result; /* return st->max_socket */
  107864:	e320f000 	nop	{0}
  107868:	ea000000 	b	107870 <socket_alloc+0x1dc>
        }
    }

__result:
  10786c:	e320f000 	nop	{0}
    return idx;
  107870:	e51b3010 	ldr	r3, [fp, #-16]
}
  107874:	e1a00003 	mov	r0, r3
  107878:	e24bd008 	sub	sp, fp, #8
  10787c:	e8bd8810 	pop	{r4, fp, pc}

00107880 <socket_free>:

static void socket_free(struct sal_socket_table *st, int idx)
{
  107880:	e92d4800 	push	{fp, lr}
  107884:	e28db004 	add	fp, sp, #4
  107888:	e24dd010 	sub	sp, sp, #16
  10788c:	e50b0010 	str	r0, [fp, #-16]
  107890:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    struct sal_socket *sock;

    sock = st->sockets[idx];
  107894:	e51b3010 	ldr	r3, [fp, #-16]
  107898:	e5932004 	ldr	r2, [r3, #4]
  10789c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1078a0:	e1a03103 	lsl	r3, r3, #2
  1078a4:	e0823003 	add	r3, r2, r3
  1078a8:	e5933000 	ldr	r3, [r3]
  1078ac:	e50b3008 	str	r3, [fp, #-8]
    st->sockets[idx] = RT_NULL;
  1078b0:	e51b3010 	ldr	r3, [fp, #-16]
  1078b4:	e5932004 	ldr	r2, [r3, #4]
  1078b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1078bc:	e1a03103 	lsl	r3, r3, #2
  1078c0:	e0823003 	add	r3, r2, r3
  1078c4:	e3a02000 	mov	r2, #0
  1078c8:	e5832000 	str	r2, [r3]
    rt_free(sock);
  1078cc:	e51b0008 	ldr	r0, [fp, #-8]
  1078d0:	ebffedb9 	bl	102fbc <rt_free>
}
  1078d4:	e320f000 	nop	{0}
  1078d8:	e24bd004 	sub	sp, fp, #4
  1078dc:	e8bd8800 	pop	{fp, pc}

001078e0 <socket_new>:

static int socket_new(void)
{
  1078e0:	e92d4800 	push	{fp, lr}
  1078e4:	e28db004 	add	fp, sp, #4
  1078e8:	e24dd010 	sub	sp, sp, #16
    struct sal_socket *sock;
    struct sal_socket_table *st = &socket_table;
  1078ec:	e30d3460 	movw	r3, #54368	; 0xd460
  1078f0:	e3403014 	movt	r3, #20
  1078f4:	e50b300c 	str	r3, [fp, #-12]
    int idx;

    sal_lock();
  1078f8:	ebfffea6 	bl	107398 <sal_lock>

    /* find an empty sal socket entry */
    idx = socket_alloc(st, 0);
  1078fc:	e3a01000 	mov	r1, #0
  107900:	e51b000c 	ldr	r0, [fp, #-12]
  107904:	ebffff62 	bl	107694 <socket_alloc>
  107908:	e50b0008 	str	r0, [fp, #-8]

    /* can't find an empty sal socket entry */
    if (idx == (int) st->max_socket)
  10790c:	e51b300c 	ldr	r3, [fp, #-12]
  107910:	e5933000 	ldr	r3, [r3]
  107914:	e1a02003 	mov	r2, r3
  107918:	e51b3008 	ldr	r3, [fp, #-8]
  10791c:	e1530002 	cmp	r3, r2
  107920:	1a000002 	bne	107930 <socket_new+0x50>
    {
        idx = -(1 + SAL_SOCKET_OFFSET);
  107924:	e3e03000 	mvn	r3, #0
  107928:	e50b3008 	str	r3, [fp, #-8]
        goto __result;
  10792c:	ea000012 	b	10797c <socket_new+0x9c>
    }

    sock = st->sockets[idx];
  107930:	e51b300c 	ldr	r3, [fp, #-12]
  107934:	e5932004 	ldr	r2, [r3, #4]
  107938:	e51b3008 	ldr	r3, [fp, #-8]
  10793c:	e1a03103 	lsl	r3, r3, #2
  107940:	e0823003 	add	r3, r2, r3
  107944:	e5933000 	ldr	r3, [r3]
  107948:	e50b3010 	str	r3, [fp, #-16]
    sock->socket = idx + SAL_SOCKET_OFFSET;
  10794c:	e51b3010 	ldr	r3, [fp, #-16]
  107950:	e51b2008 	ldr	r2, [fp, #-8]
  107954:	e5832004 	str	r2, [r3, #4]
    sock->magic = SAL_SOCKET_MAGIC;
  107958:	e51b3010 	ldr	r3, [fp, #-16]
  10795c:	e3052a10 	movw	r2, #23056	; 0x5a10
  107960:	e5832000 	str	r2, [r3]
    sock->netdev = RT_NULL;
  107964:	e51b3010 	ldr	r3, [fp, #-16]
  107968:	e3a02000 	mov	r2, #0
  10796c:	e5832014 	str	r2, [r3, #20]
    sock->user_data = RT_NULL;
  107970:	e51b3010 	ldr	r3, [fp, #-16]
  107974:	e3a02000 	mov	r2, #0
  107978:	e5832018 	str	r2, [r3, #24]
#ifdef SAL_USING_TLS
    sock->user_data_tls = RT_NULL;
#endif

__result:
    sal_unlock();
  10797c:	ebfffe99 	bl	1073e8 <sal_unlock>
    return idx + SAL_SOCKET_OFFSET;
  107980:	e51b3008 	ldr	r3, [fp, #-8]
}
  107984:	e1a00003 	mov	r0, r3
  107988:	e24bd004 	sub	sp, fp, #4
  10798c:	e8bd8800 	pop	{fp, pc}

00107990 <socket_delete>:

static void socket_delete(int socket)
{
  107990:	e92d4800 	push	{fp, lr}
  107994:	e28db004 	add	fp, sp, #4
  107998:	e24dd018 	sub	sp, sp, #24
  10799c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    struct sal_socket *sock;
    struct sal_socket_table *st = &socket_table;
  1079a0:	e30d3460 	movw	r3, #54368	; 0xd460
  1079a4:	e3403014 	movt	r3, #20
  1079a8:	e50b3008 	str	r3, [fp, #-8]
    int idx;

    idx = socket - SAL_SOCKET_OFFSET;
  1079ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1079b0:	e50b300c 	str	r3, [fp, #-12]
    if (idx < 0 || idx >= (int) st->max_socket)
  1079b4:	e51b300c 	ldr	r3, [fp, #-12]
  1079b8:	e3530000 	cmp	r3, #0
  1079bc:	ba00001d 	blt	107a38 <socket_delete+0xa8>
  1079c0:	e51b3008 	ldr	r3, [fp, #-8]
  1079c4:	e5933000 	ldr	r3, [r3]
  1079c8:	e1a02003 	mov	r2, r3
  1079cc:	e51b300c 	ldr	r3, [fp, #-12]
  1079d0:	e1530002 	cmp	r3, r2
  1079d4:	aa000017 	bge	107a38 <socket_delete+0xa8>
    {
        return;
    }
    sal_lock();
  1079d8:	ebfffe6e 	bl	107398 <sal_lock>
    sock = sal_get_socket(socket);
  1079dc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1079e0:	ebfffe41 	bl	1072ec <sal_get_socket>
  1079e4:	e50b0010 	str	r0, [fp, #-16]
    RT_ASSERT(sock != RT_NULL);
  1079e8:	e51b3010 	ldr	r3, [fp, #-16]
  1079ec:	e3530000 	cmp	r3, #0
  1079f0:	1a000005 	bne	107a0c <socket_delete+0x7c>
  1079f4:	e3002223 	movw	r2, #547	; 0x223
  1079f8:	e3061148 	movw	r1, #24904	; 0x6148
  1079fc:	e3401014 	movt	r1, #20
  107a00:	e30600a8 	movw	r0, #24744	; 0x60a8
  107a04:	e3400014 	movt	r0, #20
  107a08:	ebffeee2 	bl	103598 <rt_assert_handler>
    sock->magic = 0;
  107a0c:	e51b3010 	ldr	r3, [fp, #-16]
  107a10:	e3a02000 	mov	r2, #0
  107a14:	e5832000 	str	r2, [r3]
    sock->netdev = RT_NULL;
  107a18:	e51b3010 	ldr	r3, [fp, #-16]
  107a1c:	e3a02000 	mov	r2, #0
  107a20:	e5832014 	str	r2, [r3, #20]
    socket_free(st, idx);
  107a24:	e51b100c 	ldr	r1, [fp, #-12]
  107a28:	e51b0008 	ldr	r0, [fp, #-8]
  107a2c:	ebffff93 	bl	107880 <socket_free>
    sal_unlock();
  107a30:	ebfffe6c 	bl	1073e8 <sal_unlock>
  107a34:	ea000000 	b	107a3c <socket_delete+0xac>
        return;
  107a38:	e320f000 	nop	{0}
}
  107a3c:	e24bd004 	sub	sp, fp, #4
  107a40:	e8bd8800 	pop	{fp, pc}

00107a44 <sal_accept>:

int sal_accept(int socket, struct sockaddr *addr, socklen_t *addrlen)
{
  107a44:	e92d4800 	push	{fp, lr}
  107a48:	e28db004 	add	fp, sp, #4
  107a4c:	e24dd028 	sub	sp, sp, #40	; 0x28
  107a50:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  107a54:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  107a58:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
    int new_socket;
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  107a5c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  107a60:	ebfffe21 	bl	1072ec <sal_get_socket>
  107a64:	e50b0008 	str	r0, [fp, #-8]
  107a68:	e51b3008 	ldr	r3, [fp, #-8]
  107a6c:	e3530000 	cmp	r3, #0
  107a70:	1a000001 	bne	107a7c <sal_accept+0x38>
  107a74:	e3e03000 	mvn	r3, #0
  107a78:	ea000059 	b	107be4 <sal_accept+0x1a0>

    /* check the network interface is up status */
    SAL_NETDEV_IS_UP(sock->netdev);
  107a7c:	e51b3008 	ldr	r3, [fp, #-8]
  107a80:	e5933014 	ldr	r3, [r3, #20]
  107a84:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  107a88:	e2033001 	and	r3, r3, #1
  107a8c:	e3530000 	cmp	r3, #0
  107a90:	1a000001 	bne	107a9c <sal_accept+0x58>
  107a94:	e3e03000 	mvn	r3, #0
  107a98:	ea000051 	b	107be4 <sal_accept+0x1a0>

    /* check the network interface socket operations */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, accept);
  107a9c:	e51b3008 	ldr	r3, [fp, #-8]
  107aa0:	e5933014 	ldr	r3, [r3, #20]
  107aa4:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  107aa8:	e50b300c 	str	r3, [fp, #-12]
  107aac:	e51b300c 	ldr	r3, [fp, #-12]
  107ab0:	e5933008 	ldr	r3, [r3, #8]
  107ab4:	e5933014 	ldr	r3, [r3, #20]
  107ab8:	e3530000 	cmp	r3, #0
  107abc:	1a000001 	bne	107ac8 <sal_accept+0x84>
  107ac0:	e3e03000 	mvn	r3, #0
  107ac4:	ea000046 	b	107be4 <sal_accept+0x1a0>

    new_socket = pf->skt_ops->accept((int)(size_t)sock->user_data, addr, addrlen);
  107ac8:	e51b300c 	ldr	r3, [fp, #-12]
  107acc:	e5933008 	ldr	r3, [r3, #8]
  107ad0:	e5933014 	ldr	r3, [r3, #20]
  107ad4:	e51b2008 	ldr	r2, [fp, #-8]
  107ad8:	e5922018 	ldr	r2, [r2, #24]
  107adc:	e1a00002 	mov	r0, r2
  107ae0:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  107ae4:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  107ae8:	e12fff33 	blx	r3
  107aec:	e50b0010 	str	r0, [fp, #-16]
    if (new_socket != -1)
  107af0:	e51b3010 	ldr	r3, [fp, #-16]
  107af4:	e3730001 	cmn	r3, #1
  107af8:	0a000038 	beq	107be0 <sal_accept+0x19c>
        int retval;
        int new_sal_socket;
        struct sal_socket *new_sock;

        /* allocate a new socket structure and registered socket options */
        new_sal_socket = socket_new();
  107afc:	ebffff77 	bl	1078e0 <socket_new>
  107b00:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
        new_sock = sal_get_socket(new_sal_socket);
  107b04:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  107b08:	ebfffdf7 	bl	1072ec <sal_get_socket>
  107b0c:	e1a03000 	mov	r3, r0
  107b10:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
        if (new_sock == RT_NULL)
  107b14:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  107b18:	e3530000 	cmp	r3, #0
  107b1c:	1a000006 	bne	107b3c <sal_accept+0xf8>
        {
            pf->skt_ops->closesocket(new_socket);
  107b20:	e51b300c 	ldr	r3, [fp, #-12]
  107b24:	e5933008 	ldr	r3, [r3, #8]
  107b28:	e5933004 	ldr	r3, [r3, #4]
  107b2c:	e51b0010 	ldr	r0, [fp, #-16]
  107b30:	e12fff33 	blx	r3
            return -1;
  107b34:	e3e03000 	mvn	r3, #0
  107b38:	ea000029 	b	107be4 <sal_accept+0x1a0>
        }

        retval = socket_init(sock->domain, sock->type, sock->protocol, &new_sock);
  107b3c:	e51b3008 	ldr	r3, [fp, #-8]
  107b40:	e5930008 	ldr	r0, [r3, #8]
  107b44:	e51b3008 	ldr	r3, [fp, #-8]
  107b48:	e593100c 	ldr	r1, [r3, #12]
  107b4c:	e51b3008 	ldr	r3, [fp, #-8]
  107b50:	e5932010 	ldr	r2, [r3, #16]
  107b54:	e24b301c 	sub	r3, fp, #28
  107b58:	ebfffe62 	bl	1074e8 <socket_init>
  107b5c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
        if (retval < 0)
  107b60:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  107b64:	e3530000 	cmp	r3, #0
  107b68:	aa000017 	bge	107bcc <sal_accept+0x188>
        {
            pf->skt_ops->closesocket(new_socket);
  107b6c:	e51b300c 	ldr	r3, [fp, #-12]
  107b70:	e5933008 	ldr	r3, [r3, #8]
  107b74:	e5933004 	ldr	r3, [r3, #4]
  107b78:	e51b0010 	ldr	r0, [fp, #-16]
  107b7c:	e12fff33 	blx	r3
            rt_memset(new_sock, 0x00, sizeof(struct sal_socket));
  107b80:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  107b84:	e3a0201c 	mov	r2, #28
  107b88:	e3a01000 	mov	r1, #0
  107b8c:	e1a00003 	mov	r0, r3
  107b90:	ebffedcc 	bl	1032c8 <rt_memset>
            /* socket init failed, delete socket */
            socket_delete(new_sal_socket);
  107b94:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  107b98:	ebffff7c 	bl	107990 <socket_delete>
            LOG_E("New socket registered failed, return error %d.", retval);
  107b9c:	e3050f58 	movw	r0, #24408	; 0x5f58
  107ba0:	e3400014 	movt	r0, #20
  107ba4:	ebffed5a 	bl	103114 <rt_kprintf>
  107ba8:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  107bac:	e30600b8 	movw	r0, #24760	; 0x60b8
  107bb0:	e3400014 	movt	r0, #20
  107bb4:	ebffed56 	bl	103114 <rt_kprintf>
  107bb8:	e3050f8c 	movw	r0, #24460	; 0x5f8c
  107bbc:	e3400014 	movt	r0, #20
  107bc0:	ebffed53 	bl	103114 <rt_kprintf>
            return -1;
  107bc4:	e3e03000 	mvn	r3, #0
  107bc8:	ea000005 	b	107be4 <sal_accept+0x1a0>
        }

        /* socket structure user_data used to store the acquired new socket */
        new_sock->user_data = (void *)(size_t)new_socket;
  107bcc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  107bd0:	e51b2010 	ldr	r2, [fp, #-16]
  107bd4:	e5832018 	str	r2, [r3, #24]

        return new_sal_socket;
  107bd8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107bdc:	ea000000 	b	107be4 <sal_accept+0x1a0>
    }

    return -1;
  107be0:	e3e03000 	mvn	r3, #0
}
  107be4:	e1a00003 	mov	r0, r3
  107be8:	e24bd004 	sub	sp, fp, #4
  107bec:	e8bd8800 	pop	{fp, pc}

00107bf0 <sal_sockaddr_to_ipaddr>:

static void sal_sockaddr_to_ipaddr(const struct sockaddr *name, ip_addr_t *local_ipaddr)
{
  107bf0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  107bf4:	e28db000 	add	fp, sp, #0
  107bf8:	e24dd014 	sub	sp, sp, #20
  107bfc:	e50b0010 	str	r0, [fp, #-16]
  107c00:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    const struct sockaddr_in *svr_addr = (const struct sockaddr_in *) name;
  107c04:	e51b3010 	ldr	r3, [fp, #-16]
  107c08:	e50b3008 	str	r3, [fp, #-8]

#if NETDEV_IPV4 && NETDEV_IPV6
    local_ipaddr->u_addr.ip4.addr = svr_addr->sin_addr.s_addr;
    local_ipaddr->type = IPADDR_TYPE_V4;
#elif NETDEV_IPV4
    local_ipaddr->addr = svr_addr->sin_addr.s_addr;
  107c0c:	e51b3008 	ldr	r3, [fp, #-8]
  107c10:	e5932004 	ldr	r2, [r3, #4]
  107c14:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107c18:	e5832000 	str	r2, [r3]
#elif NETDEV_IPV6
#error "not only support IPV6"
#endif /* NETDEV_IPV4 && NETDEV_IPV6*/
}
  107c1c:	e320f000 	nop	{0}
  107c20:	e28bd000 	add	sp, fp, #0
  107c24:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  107c28:	e12fff1e 	bx	lr

00107c2c <sal_bind>:

int sal_bind(int socket, const struct sockaddr *name, socklen_t namelen)
{
  107c2c:	e92d4800 	push	{fp, lr}
  107c30:	e28db004 	add	fp, sp, #4
  107c34:	e24dd030 	sub	sp, sp, #48	; 0x30
  107c38:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  107c3c:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  107c40:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
    struct sal_socket *sock;
    struct sal_proto_family *pf;
    ip_addr_t input_ipaddr;

    RT_ASSERT(name);
  107c44:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  107c48:	e3530000 	cmp	r3, #0
  107c4c:	1a000005 	bne	107c68 <sal_bind+0x3c>
  107c50:	e3002271 	movw	r2, #625	; 0x271
  107c54:	e3061158 	movw	r1, #24920	; 0x6158
  107c58:	e3401014 	movt	r1, #20
  107c5c:	e30600e8 	movw	r0, #24808	; 0x60e8
  107c60:	e3400014 	movt	r0, #20
  107c64:	ebffee4b 	bl	103598 <rt_assert_handler>

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  107c68:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  107c6c:	ebfffd9e 	bl	1072ec <sal_get_socket>
  107c70:	e50b0008 	str	r0, [fp, #-8]
  107c74:	e51b3008 	ldr	r3, [fp, #-8]
  107c78:	e3530000 	cmp	r3, #0
  107c7c:	1a000001 	bne	107c88 <sal_bind+0x5c>
  107c80:	e3e03000 	mvn	r3, #0
  107c84:	ea000062 	b	107e14 <sal_bind+0x1e8>

    /* bind network interface by ip address */
    sal_sockaddr_to_ipaddr(name, &input_ipaddr);
  107c88:	e24b3020 	sub	r3, fp, #32
  107c8c:	e1a01003 	mov	r1, r3
  107c90:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
  107c94:	ebffffd5 	bl	107bf0 <sal_sockaddr_to_ipaddr>

    /* check input ipaddr is default netdev ipaddr */
    if (!ip_addr_isany_val(input_ipaddr))
  107c98:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107c9c:	e3530000 	cmp	r3, #0
  107ca0:	0a000046 	beq	107dc0 <sal_bind+0x194>
    {
        struct sal_proto_family *input_pf = RT_NULL, *local_pf = RT_NULL;
  107ca4:	e3a03000 	mov	r3, #0
  107ca8:	e50b300c 	str	r3, [fp, #-12]
  107cac:	e3a03000 	mov	r3, #0
  107cb0:	e50b3010 	str	r3, [fp, #-16]
        struct netdev *new_netdev = RT_NULL;
  107cb4:	e3a03000 	mov	r3, #0
  107cb8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

        new_netdev = netdev_get_by_ipaddr(&input_ipaddr);
  107cbc:	e24b3020 	sub	r3, fp, #32
  107cc0:	e1a00003 	mov	r0, r3
  107cc4:	ebfff5df 	bl	105448 <netdev_get_by_ipaddr>
  107cc8:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
        if (new_netdev == RT_NULL)
  107ccc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107cd0:	e3530000 	cmp	r3, #0
  107cd4:	1a000001 	bne	107ce0 <sal_bind+0xb4>
        {
            return -1;
  107cd8:	e3e03000 	mvn	r3, #0
  107cdc:	ea00004c 	b	107e14 <sal_bind+0x1e8>
        }

        /* get input and local ip address proto_family */
        SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, local_pf, bind);
  107ce0:	e51b3008 	ldr	r3, [fp, #-8]
  107ce4:	e5933014 	ldr	r3, [r3, #20]
  107ce8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  107cec:	e50b3010 	str	r3, [fp, #-16]
  107cf0:	e51b3010 	ldr	r3, [fp, #-16]
  107cf4:	e5933008 	ldr	r3, [r3, #8]
  107cf8:	e5933008 	ldr	r3, [r3, #8]
  107cfc:	e3530000 	cmp	r3, #0
  107d00:	1a000001 	bne	107d0c <sal_bind+0xe0>
  107d04:	e3e03000 	mvn	r3, #0
  107d08:	ea000041 	b	107e14 <sal_bind+0x1e8>
        SAL_NETDEV_SOCKETOPS_VALID(new_netdev, input_pf, bind);
  107d0c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107d10:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  107d14:	e50b300c 	str	r3, [fp, #-12]
  107d18:	e51b300c 	ldr	r3, [fp, #-12]
  107d1c:	e5933008 	ldr	r3, [r3, #8]
  107d20:	e5933008 	ldr	r3, [r3, #8]
  107d24:	e3530000 	cmp	r3, #0
  107d28:	1a000001 	bne	107d34 <sal_bind+0x108>
  107d2c:	e3e03000 	mvn	r3, #0
  107d30:	ea000037 	b	107e14 <sal_bind+0x1e8>

        /* check the network interface protocol family type */
        if (input_pf->family != local_pf->family)
  107d34:	e51b300c 	ldr	r3, [fp, #-12]
  107d38:	e5932000 	ldr	r2, [r3]
  107d3c:	e51b3010 	ldr	r3, [fp, #-16]
  107d40:	e5933000 	ldr	r3, [r3]
  107d44:	e1520003 	cmp	r2, r3
  107d48:	0a00001c 	beq	107dc0 <sal_bind+0x194>
        {
            int new_socket = -1;
  107d4c:	e3e03000 	mvn	r3, #0
  107d50:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

            /* protocol family is different, close old socket and create new socket by input ip address */
            local_pf->skt_ops->closesocket(socket);
  107d54:	e51b3010 	ldr	r3, [fp, #-16]
  107d58:	e5933008 	ldr	r3, [r3, #8]
  107d5c:	e5933004 	ldr	r3, [r3, #4]
  107d60:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  107d64:	e12fff33 	blx	r3

            new_socket = input_pf->skt_ops->socket(input_pf->family, sock->type, sock->protocol);
  107d68:	e51b300c 	ldr	r3, [fp, #-12]
  107d6c:	e5933008 	ldr	r3, [r3, #8]
  107d70:	e5933000 	ldr	r3, [r3]
  107d74:	e51b200c 	ldr	r2, [fp, #-12]
  107d78:	e5920000 	ldr	r0, [r2]
  107d7c:	e51b2008 	ldr	r2, [fp, #-8]
  107d80:	e592100c 	ldr	r1, [r2, #12]
  107d84:	e51b2008 	ldr	r2, [fp, #-8]
  107d88:	e5922010 	ldr	r2, [r2, #16]
  107d8c:	e12fff33 	blx	r3
  107d90:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
            if (new_socket < 0)
  107d94:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  107d98:	e3530000 	cmp	r3, #0
  107d9c:	aa000001 	bge	107da8 <sal_bind+0x17c>
            {
                return -1;
  107da0:	e3e03000 	mvn	r3, #0
  107da4:	ea00001a 	b	107e14 <sal_bind+0x1e8>
            }
            sock->netdev = new_netdev;
  107da8:	e51b3008 	ldr	r3, [fp, #-8]
  107dac:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  107db0:	e5832014 	str	r2, [r3, #20]
            sock->user_data = (void *)(size_t)new_socket;
  107db4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  107db8:	e51b3008 	ldr	r3, [fp, #-8]
  107dbc:	e5832018 	str	r2, [r3, #24]
        }
    }

    /* check and get protocol families by the network interface device */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, bind);
  107dc0:	e51b3008 	ldr	r3, [fp, #-8]
  107dc4:	e5933014 	ldr	r3, [r3, #20]
  107dc8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  107dcc:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  107dd0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  107dd4:	e5933008 	ldr	r3, [r3, #8]
  107dd8:	e5933008 	ldr	r3, [r3, #8]
  107ddc:	e3530000 	cmp	r3, #0
  107de0:	1a000001 	bne	107dec <sal_bind+0x1c0>
  107de4:	e3e03000 	mvn	r3, #0
  107de8:	ea000009 	b	107e14 <sal_bind+0x1e8>
    return pf->skt_ops->bind((int)(size_t)sock->user_data, name, namelen);
  107dec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  107df0:	e5933008 	ldr	r3, [r3, #8]
  107df4:	e5933008 	ldr	r3, [r3, #8]
  107df8:	e51b2008 	ldr	r2, [fp, #-8]
  107dfc:	e5922018 	ldr	r2, [r2, #24]
  107e00:	e1a00002 	mov	r0, r2
  107e04:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  107e08:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  107e0c:	e12fff33 	blx	r3
  107e10:	e1a03000 	mov	r3, r0
}
  107e14:	e1a00003 	mov	r0, r3
  107e18:	e24bd004 	sub	sp, fp, #4
  107e1c:	e8bd8800 	pop	{fp, pc}

00107e20 <sal_shutdown>:

int sal_shutdown(int socket, int how)
{
  107e20:	e92d4800 	push	{fp, lr}
  107e24:	e28db004 	add	fp, sp, #4
  107e28:	e24dd018 	sub	sp, sp, #24
  107e2c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  107e30:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    struct sal_socket *sock;
    struct sal_proto_family *pf;
    int error = 0;
  107e34:	e3a03000 	mov	r3, #0
  107e38:	e50b3008 	str	r3, [fp, #-8]

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  107e3c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  107e40:	ebfffd29 	bl	1072ec <sal_get_socket>
  107e44:	e50b000c 	str	r0, [fp, #-12]
  107e48:	e51b300c 	ldr	r3, [fp, #-12]
  107e4c:	e3530000 	cmp	r3, #0
  107e50:	1a000001 	bne	107e5c <sal_shutdown+0x3c>
  107e54:	e3e03000 	mvn	r3, #0
  107e58:	ea00001b 	b	107ecc <sal_shutdown+0xac>

    /* shutdown operation not need to check network interface status */
    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, shutdown);
  107e5c:	e51b300c 	ldr	r3, [fp, #-12]
  107e60:	e5933014 	ldr	r3, [r3, #20]
  107e64:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  107e68:	e50b3010 	str	r3, [fp, #-16]
  107e6c:	e51b3010 	ldr	r3, [fp, #-16]
  107e70:	e5933008 	ldr	r3, [r3, #8]
  107e74:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  107e78:	e3530000 	cmp	r3, #0
  107e7c:	1a000001 	bne	107e88 <sal_shutdown+0x68>
  107e80:	e3e03000 	mvn	r3, #0
  107e84:	ea000010 	b	107ecc <sal_shutdown+0xac>

    if (pf->skt_ops->shutdown((int)(size_t)sock->user_data, how) == 0)
  107e88:	e51b3010 	ldr	r3, [fp, #-16]
  107e8c:	e5933008 	ldr	r3, [r3, #8]
  107e90:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  107e94:	e51b200c 	ldr	r2, [fp, #-12]
  107e98:	e5922018 	ldr	r2, [r2, #24]
  107e9c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  107ea0:	e1a00002 	mov	r0, r2
  107ea4:	e12fff33 	blx	r3
  107ea8:	e1a03000 	mov	r3, r0
  107eac:	e3530000 	cmp	r3, #0
  107eb0:	1a000002 	bne	107ec0 <sal_shutdown+0xa0>
            {
                return -1;
            }
        }
#endif
        error = 0;
  107eb4:	e3a03000 	mov	r3, #0
  107eb8:	e50b3008 	str	r3, [fp, #-8]
  107ebc:	ea000001 	b	107ec8 <sal_shutdown+0xa8>
    }
    else
    {
        error = -1;
  107ec0:	e3e03000 	mvn	r3, #0
  107ec4:	e50b3008 	str	r3, [fp, #-8]
    }


    return error;
  107ec8:	e51b3008 	ldr	r3, [fp, #-8]
}
  107ecc:	e1a00003 	mov	r0, r3
  107ed0:	e24bd004 	sub	sp, fp, #4
  107ed4:	e8bd8800 	pop	{fp, pc}

00107ed8 <sal_getpeername>:

int sal_getpeername(int socket, struct sockaddr *name, socklen_t *namelen)
{
  107ed8:	e92d4800 	push	{fp, lr}
  107edc:	e28db004 	add	fp, sp, #4
  107ee0:	e24dd018 	sub	sp, sp, #24
  107ee4:	e50b0010 	str	r0, [fp, #-16]
  107ee8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  107eec:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  107ef0:	e51b0010 	ldr	r0, [fp, #-16]
  107ef4:	ebfffcfc 	bl	1072ec <sal_get_socket>
  107ef8:	e50b0008 	str	r0, [fp, #-8]
  107efc:	e51b3008 	ldr	r3, [fp, #-8]
  107f00:	e3530000 	cmp	r3, #0
  107f04:	1a000001 	bne	107f10 <sal_getpeername+0x38>
  107f08:	e3e03000 	mvn	r3, #0
  107f0c:	ea000014 	b	107f64 <sal_getpeername+0x8c>

    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, getpeername);
  107f10:	e51b3008 	ldr	r3, [fp, #-8]
  107f14:	e5933014 	ldr	r3, [r3, #20]
  107f18:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  107f1c:	e50b300c 	str	r3, [fp, #-12]
  107f20:	e51b300c 	ldr	r3, [fp, #-12]
  107f24:	e5933008 	ldr	r3, [r3, #8]
  107f28:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  107f2c:	e3530000 	cmp	r3, #0
  107f30:	1a000001 	bne	107f3c <sal_getpeername+0x64>
  107f34:	e3e03000 	mvn	r3, #0
  107f38:	ea000009 	b	107f64 <sal_getpeername+0x8c>

    return pf->skt_ops->getpeername((int)(size_t)sock->user_data, name, namelen);
  107f3c:	e51b300c 	ldr	r3, [fp, #-12]
  107f40:	e5933008 	ldr	r3, [r3, #8]
  107f44:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  107f48:	e51b2008 	ldr	r2, [fp, #-8]
  107f4c:	e5922018 	ldr	r2, [r2, #24]
  107f50:	e1a00002 	mov	r0, r2
  107f54:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  107f58:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  107f5c:	e12fff33 	blx	r3
  107f60:	e1a03000 	mov	r3, r0
}
  107f64:	e1a00003 	mov	r0, r3
  107f68:	e24bd004 	sub	sp, fp, #4
  107f6c:	e8bd8800 	pop	{fp, pc}

00107f70 <sal_getsockname>:

int sal_getsockname(int socket, struct sockaddr *name, socklen_t *namelen)
{
  107f70:	e92d4800 	push	{fp, lr}
  107f74:	e28db004 	add	fp, sp, #4
  107f78:	e24dd018 	sub	sp, sp, #24
  107f7c:	e50b0010 	str	r0, [fp, #-16]
  107f80:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  107f84:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  107f88:	e51b0010 	ldr	r0, [fp, #-16]
  107f8c:	ebfffcd6 	bl	1072ec <sal_get_socket>
  107f90:	e50b0008 	str	r0, [fp, #-8]
  107f94:	e51b3008 	ldr	r3, [fp, #-8]
  107f98:	e3530000 	cmp	r3, #0
  107f9c:	1a000001 	bne	107fa8 <sal_getsockname+0x38>
  107fa0:	e3e03000 	mvn	r3, #0
  107fa4:	ea000014 	b	107ffc <sal_getsockname+0x8c>

    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, getsockname);
  107fa8:	e51b3008 	ldr	r3, [fp, #-8]
  107fac:	e5933014 	ldr	r3, [r3, #20]
  107fb0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  107fb4:	e50b300c 	str	r3, [fp, #-12]
  107fb8:	e51b300c 	ldr	r3, [fp, #-12]
  107fbc:	e5933008 	ldr	r3, [r3, #8]
  107fc0:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  107fc4:	e3530000 	cmp	r3, #0
  107fc8:	1a000001 	bne	107fd4 <sal_getsockname+0x64>
  107fcc:	e3e03000 	mvn	r3, #0
  107fd0:	ea000009 	b	107ffc <sal_getsockname+0x8c>

    return pf->skt_ops->getsockname((int)(size_t)sock->user_data, name, namelen);
  107fd4:	e51b300c 	ldr	r3, [fp, #-12]
  107fd8:	e5933008 	ldr	r3, [r3, #8]
  107fdc:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  107fe0:	e51b2008 	ldr	r2, [fp, #-8]
  107fe4:	e5922018 	ldr	r2, [r2, #24]
  107fe8:	e1a00002 	mov	r0, r2
  107fec:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  107ff0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  107ff4:	e12fff33 	blx	r3
  107ff8:	e1a03000 	mov	r3, r0
}
  107ffc:	e1a00003 	mov	r0, r3
  108000:	e24bd004 	sub	sp, fp, #4
  108004:	e8bd8800 	pop	{fp, pc}

00108008 <sal_getsockopt>:

int sal_getsockopt(int socket, int level, int optname, void *optval, socklen_t *optlen)
{
  108008:	e92d4810 	push	{r4, fp, lr}
  10800c:	e28db008 	add	fp, sp, #8
  108010:	e24dd024 	sub	sp, sp, #36	; 0x24
  108014:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  108018:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  10801c:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  108020:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  108024:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  108028:	ebfffcaf 	bl	1072ec <sal_get_socket>
  10802c:	e50b0010 	str	r0, [fp, #-16]
  108030:	e51b3010 	ldr	r3, [fp, #-16]
  108034:	e3530000 	cmp	r3, #0
  108038:	1a000001 	bne	108044 <sal_getsockopt+0x3c>
  10803c:	e3e03000 	mvn	r3, #0
  108040:	ea000017 	b	1080a4 <sal_getsockopt+0x9c>

    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, getsockopt);
  108044:	e51b3010 	ldr	r3, [fp, #-16]
  108048:	e5933014 	ldr	r3, [r3, #20]
  10804c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108050:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  108054:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108058:	e5933008 	ldr	r3, [r3, #8]
  10805c:	e5933020 	ldr	r3, [r3, #32]
  108060:	e3530000 	cmp	r3, #0
  108064:	1a000001 	bne	108070 <sal_getsockopt+0x68>
  108068:	e3e03000 	mvn	r3, #0
  10806c:	ea00000c 	b	1080a4 <sal_getsockopt+0x9c>

    return pf->skt_ops->getsockopt((int)(size_t)sock->user_data, level, optname, optval, optlen);
  108070:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108074:	e5933008 	ldr	r3, [r3, #8]
  108078:	e5934020 	ldr	r4, [r3, #32]
  10807c:	e51b3010 	ldr	r3, [fp, #-16]
  108080:	e5933018 	ldr	r3, [r3, #24]
  108084:	e1a00003 	mov	r0, r3
  108088:	e59b3004 	ldr	r3, [fp, #4]
  10808c:	e58d3000 	str	r3, [sp]
  108090:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  108094:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  108098:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  10809c:	e12fff34 	blx	r4
  1080a0:	e1a03000 	mov	r3, r0
}
  1080a4:	e1a00003 	mov	r0, r3
  1080a8:	e24bd008 	sub	sp, fp, #8
  1080ac:	e8bd8810 	pop	{r4, fp, pc}

001080b0 <sal_setsockopt>:

int sal_setsockopt(int socket, int level, int optname, const void *optval, socklen_t optlen)
{
  1080b0:	e92d4810 	push	{r4, fp, lr}
  1080b4:	e28db008 	add	fp, sp, #8
  1080b8:	e24dd024 	sub	sp, sp, #36	; 0x24
  1080bc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1080c0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  1080c4:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  1080c8:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  1080cc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1080d0:	ebfffc85 	bl	1072ec <sal_get_socket>
  1080d4:	e50b0010 	str	r0, [fp, #-16]
  1080d8:	e51b3010 	ldr	r3, [fp, #-16]
  1080dc:	e3530000 	cmp	r3, #0
  1080e0:	1a000001 	bne	1080ec <sal_setsockopt+0x3c>
  1080e4:	e3e03000 	mvn	r3, #0
  1080e8:	ea000017 	b	10814c <sal_setsockopt+0x9c>

    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, setsockopt);
  1080ec:	e51b3010 	ldr	r3, [fp, #-16]
  1080f0:	e5933014 	ldr	r3, [r3, #20]
  1080f4:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  1080f8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1080fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108100:	e5933008 	ldr	r3, [r3, #8]
  108104:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  108108:	e3530000 	cmp	r3, #0
  10810c:	1a000001 	bne	108118 <sal_setsockopt+0x68>
  108110:	e3e03000 	mvn	r3, #0
  108114:	ea00000c 	b	10814c <sal_setsockopt+0x9c>
    else
    {
        return pf->skt_ops->setsockopt((int) sock->user_data, level, optname, optval, optlen);
    }
#else
    return pf->skt_ops->setsockopt((int)(size_t)sock->user_data, level, optname, optval, optlen);
  108118:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10811c:	e5933008 	ldr	r3, [r3, #8]
  108120:	e5934024 	ldr	r4, [r3, #36]	; 0x24
  108124:	e51b3010 	ldr	r3, [fp, #-16]
  108128:	e5933018 	ldr	r3, [r3, #24]
  10812c:	e1a00003 	mov	r0, r3
  108130:	e59b3004 	ldr	r3, [fp, #4]
  108134:	e58d3000 	str	r3, [sp]
  108138:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  10813c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  108140:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108144:	e12fff34 	blx	r4
  108148:	e1a03000 	mov	r3, r0
#endif /* SAL_USING_TLS */
}
  10814c:	e1a00003 	mov	r0, r3
  108150:	e24bd008 	sub	sp, fp, #8
  108154:	e8bd8810 	pop	{r4, fp, pc}

00108158 <sal_connect>:

int sal_connect(int socket, const struct sockaddr *name, socklen_t namelen)
{
  108158:	e92d4800 	push	{fp, lr}
  10815c:	e28db004 	add	fp, sp, #4
  108160:	e24dd020 	sub	sp, sp, #32
  108164:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  108168:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  10816c:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
    struct sal_socket *sock;
    struct sal_proto_family *pf;
    int ret;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  108170:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  108174:	ebfffc5c 	bl	1072ec <sal_get_socket>
  108178:	e50b0008 	str	r0, [fp, #-8]
  10817c:	e51b3008 	ldr	r3, [fp, #-8]
  108180:	e3530000 	cmp	r3, #0
  108184:	1a000001 	bne	108190 <sal_connect+0x38>
  108188:	e3e03000 	mvn	r3, #0
  10818c:	ea00001d 	b	108208 <sal_connect+0xb0>

    /* check the network interface is up status */
    SAL_NETDEV_IS_UP(sock->netdev);
  108190:	e51b3008 	ldr	r3, [fp, #-8]
  108194:	e5933014 	ldr	r3, [r3, #20]
  108198:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  10819c:	e2033001 	and	r3, r3, #1
  1081a0:	e3530000 	cmp	r3, #0
  1081a4:	1a000001 	bne	1081b0 <sal_connect+0x58>
  1081a8:	e3e03000 	mvn	r3, #0
  1081ac:	ea000015 	b	108208 <sal_connect+0xb0>
    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, connect);
  1081b0:	e51b3008 	ldr	r3, [fp, #-8]
  1081b4:	e5933014 	ldr	r3, [r3, #20]
  1081b8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  1081bc:	e50b300c 	str	r3, [fp, #-12]
  1081c0:	e51b300c 	ldr	r3, [fp, #-12]
  1081c4:	e5933008 	ldr	r3, [r3, #8]
  1081c8:	e5933010 	ldr	r3, [r3, #16]
  1081cc:	e3530000 	cmp	r3, #0
  1081d0:	1a000001 	bne	1081dc <sal_connect+0x84>
  1081d4:	e3e03000 	mvn	r3, #0
  1081d8:	ea00000a 	b	108208 <sal_connect+0xb0>

    ret = pf->skt_ops->connect((int)(size_t)sock->user_data, name, namelen);
  1081dc:	e51b300c 	ldr	r3, [fp, #-12]
  1081e0:	e5933008 	ldr	r3, [r3, #8]
  1081e4:	e5933010 	ldr	r3, [r3, #16]
  1081e8:	e51b2008 	ldr	r2, [fp, #-8]
  1081ec:	e5922018 	ldr	r2, [r2, #24]
  1081f0:	e1a00002 	mov	r0, r2
  1081f4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1081f8:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1081fc:	e12fff33 	blx	r3
  108200:	e50b0010 	str	r0, [fp, #-16]

        return ret;
    }
#endif

    return ret;
  108204:	e51b3010 	ldr	r3, [fp, #-16]
}
  108208:	e1a00003 	mov	r0, r3
  10820c:	e24bd004 	sub	sp, fp, #4
  108210:	e8bd8800 	pop	{fp, pc}

00108214 <sal_listen>:

int sal_listen(int socket, int backlog)
{
  108214:	e92d4800 	push	{fp, lr}
  108218:	e28db004 	add	fp, sp, #4
  10821c:	e24dd010 	sub	sp, sp, #16
  108220:	e50b0010 	str	r0, [fp, #-16]
  108224:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  108228:	e51b0010 	ldr	r0, [fp, #-16]
  10822c:	ebfffc2e 	bl	1072ec <sal_get_socket>
  108230:	e50b0008 	str	r0, [fp, #-8]
  108234:	e51b3008 	ldr	r3, [fp, #-8]
  108238:	e3530000 	cmp	r3, #0
  10823c:	1a000001 	bne	108248 <sal_listen+0x34>
  108240:	e3e03000 	mvn	r3, #0
  108244:	ea000013 	b	108298 <sal_listen+0x84>

    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, listen);
  108248:	e51b3008 	ldr	r3, [fp, #-8]
  10824c:	e5933014 	ldr	r3, [r3, #20]
  108250:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108254:	e50b300c 	str	r3, [fp, #-12]
  108258:	e51b300c 	ldr	r3, [fp, #-12]
  10825c:	e5933008 	ldr	r3, [r3, #8]
  108260:	e593300c 	ldr	r3, [r3, #12]
  108264:	e3530000 	cmp	r3, #0
  108268:	1a000001 	bne	108274 <sal_listen+0x60>
  10826c:	e3e03000 	mvn	r3, #0
  108270:	ea000008 	b	108298 <sal_listen+0x84>

    return pf->skt_ops->listen((int)(size_t)sock->user_data, backlog);
  108274:	e51b300c 	ldr	r3, [fp, #-12]
  108278:	e5933008 	ldr	r3, [r3, #8]
  10827c:	e593300c 	ldr	r3, [r3, #12]
  108280:	e51b2008 	ldr	r2, [fp, #-8]
  108284:	e5922018 	ldr	r2, [r2, #24]
  108288:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10828c:	e1a00002 	mov	r0, r2
  108290:	e12fff33 	blx	r3
  108294:	e1a03000 	mov	r3, r0
}
  108298:	e1a00003 	mov	r0, r3
  10829c:	e24bd004 	sub	sp, fp, #4
  1082a0:	e8bd8800 	pop	{fp, pc}

001082a4 <sal_recvfrom>:

int sal_recvfrom(int socket, void *mem, size_t len, int flags,
                 struct sockaddr *from, socklen_t *fromlen)
{
  1082a4:	e92d4810 	push	{r4, fp, lr}
  1082a8:	e28db008 	add	fp, sp, #8
  1082ac:	e24dd024 	sub	sp, sp, #36	; 0x24
  1082b0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1082b4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  1082b8:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  1082bc:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  1082c0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1082c4:	ebfffc08 	bl	1072ec <sal_get_socket>
  1082c8:	e50b0010 	str	r0, [fp, #-16]
  1082cc:	e51b3010 	ldr	r3, [fp, #-16]
  1082d0:	e3530000 	cmp	r3, #0
  1082d4:	1a000001 	bne	1082e0 <sal_recvfrom+0x3c>
  1082d8:	e3e03000 	mvn	r3, #0
  1082dc:	ea000021 	b	108368 <sal_recvfrom+0xc4>

    /* check the network interface is up status  */
    SAL_NETDEV_IS_UP(sock->netdev);
  1082e0:	e51b3010 	ldr	r3, [fp, #-16]
  1082e4:	e5933014 	ldr	r3, [r3, #20]
  1082e8:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1082ec:	e2033001 	and	r3, r3, #1
  1082f0:	e3530000 	cmp	r3, #0
  1082f4:	1a000001 	bne	108300 <sal_recvfrom+0x5c>
  1082f8:	e3e03000 	mvn	r3, #0
  1082fc:	ea000019 	b	108368 <sal_recvfrom+0xc4>
    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, recvfrom);
  108300:	e51b3010 	ldr	r3, [fp, #-16]
  108304:	e5933014 	ldr	r3, [r3, #20]
  108308:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10830c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  108310:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108314:	e5933008 	ldr	r3, [r3, #8]
  108318:	e593301c 	ldr	r3, [r3, #28]
  10831c:	e3530000 	cmp	r3, #0
  108320:	1a000001 	bne	10832c <sal_recvfrom+0x88>
  108324:	e3e03000 	mvn	r3, #0
  108328:	ea00000e 	b	108368 <sal_recvfrom+0xc4>
    else
    {
        return pf->skt_ops->recvfrom((int)(size_t)sock->user_data, mem, len, flags, from, fromlen);
    }
#else
    return pf->skt_ops->recvfrom((int)(size_t)sock->user_data, mem, len, flags, from, fromlen);
  10832c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108330:	e5933008 	ldr	r3, [r3, #8]
  108334:	e593401c 	ldr	r4, [r3, #28]
  108338:	e51b3010 	ldr	r3, [fp, #-16]
  10833c:	e5933018 	ldr	r3, [r3, #24]
  108340:	e1a00003 	mov	r0, r3
  108344:	e59b3008 	ldr	r3, [fp, #8]
  108348:	e58d3004 	str	r3, [sp, #4]
  10834c:	e59b3004 	ldr	r3, [fp, #4]
  108350:	e58d3000 	str	r3, [sp]
  108354:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  108358:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  10835c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108360:	e12fff34 	blx	r4
  108364:	e1a03000 	mov	r3, r0
#endif
}
  108368:	e1a00003 	mov	r0, r3
  10836c:	e24bd008 	sub	sp, fp, #8
  108370:	e8bd8810 	pop	{r4, fp, pc}

00108374 <sal_sendto>:

int sal_sendto(int socket, const void *dataptr, size_t size, int flags,
               const struct sockaddr *to, socklen_t tolen)
{
  108374:	e92d4810 	push	{r4, fp, lr}
  108378:	e28db008 	add	fp, sp, #8
  10837c:	e24dd024 	sub	sp, sp, #36	; 0x24
  108380:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  108384:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  108388:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  10838c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  108390:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  108394:	ebfffbd4 	bl	1072ec <sal_get_socket>
  108398:	e50b0010 	str	r0, [fp, #-16]
  10839c:	e51b3010 	ldr	r3, [fp, #-16]
  1083a0:	e3530000 	cmp	r3, #0
  1083a4:	1a000001 	bne	1083b0 <sal_sendto+0x3c>
  1083a8:	e3e03000 	mvn	r3, #0
  1083ac:	ea000021 	b	108438 <sal_sendto+0xc4>

    /* check the network interface is up status  */
    SAL_NETDEV_IS_UP(sock->netdev);
  1083b0:	e51b3010 	ldr	r3, [fp, #-16]
  1083b4:	e5933014 	ldr	r3, [r3, #20]
  1083b8:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1083bc:	e2033001 	and	r3, r3, #1
  1083c0:	e3530000 	cmp	r3, #0
  1083c4:	1a000001 	bne	1083d0 <sal_sendto+0x5c>
  1083c8:	e3e03000 	mvn	r3, #0
  1083cc:	ea000019 	b	108438 <sal_sendto+0xc4>
    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, sendto);
  1083d0:	e51b3010 	ldr	r3, [fp, #-16]
  1083d4:	e5933014 	ldr	r3, [r3, #20]
  1083d8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  1083dc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1083e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1083e4:	e5933008 	ldr	r3, [r3, #8]
  1083e8:	e5933018 	ldr	r3, [r3, #24]
  1083ec:	e3530000 	cmp	r3, #0
  1083f0:	1a000001 	bne	1083fc <sal_sendto+0x88>
  1083f4:	e3e03000 	mvn	r3, #0
  1083f8:	ea00000e 	b	108438 <sal_sendto+0xc4>
    else
    {
        return pf->skt_ops->sendto((int) sock->user_data, dataptr, size, flags, to, tolen);
    }
#else
    return pf->skt_ops->sendto((int)(size_t)sock->user_data, dataptr, size, flags, to, tolen);
  1083fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108400:	e5933008 	ldr	r3, [r3, #8]
  108404:	e5934018 	ldr	r4, [r3, #24]
  108408:	e51b3010 	ldr	r3, [fp, #-16]
  10840c:	e5933018 	ldr	r3, [r3, #24]
  108410:	e1a00003 	mov	r0, r3
  108414:	e59b3008 	ldr	r3, [fp, #8]
  108418:	e58d3004 	str	r3, [sp, #4]
  10841c:	e59b3004 	ldr	r3, [fp, #4]
  108420:	e58d3000 	str	r3, [sp]
  108424:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  108428:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  10842c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108430:	e12fff34 	blx	r4
  108434:	e1a03000 	mov	r3, r0
#endif
}
  108438:	e1a00003 	mov	r0, r3
  10843c:	e24bd008 	sub	sp, fp, #8
  108440:	e8bd8810 	pop	{r4, fp, pc}

00108444 <sal_socket>:

int sal_socket(int domain, int type, int protocol)
{
  108444:	e92d4800 	push	{fp, lr}
  108448:	e28db004 	add	fp, sp, #4
  10844c:	e24dd028 	sub	sp, sp, #40	; 0x28
  108450:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  108454:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  108458:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
    int socket, proto_socket;
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* allocate a new socket and registered socket options */
    socket = socket_new();
  10845c:	ebfffd1f 	bl	1078e0 <socket_new>
  108460:	e50b0008 	str	r0, [fp, #-8]
    if (socket < 0)
  108464:	e51b3008 	ldr	r3, [fp, #-8]
  108468:	e3530000 	cmp	r3, #0
  10846c:	aa000001 	bge	108478 <sal_socket+0x34>
    {
        return -1;
  108470:	e3e03000 	mvn	r3, #0
  108474:	ea000040 	b	10857c <sal_socket+0x138>
    }

    /* get sal socket object by socket descriptor */
    sock = sal_get_socket(socket);
  108478:	e51b0008 	ldr	r0, [fp, #-8]
  10847c:	ebfffb9a 	bl	1072ec <sal_get_socket>
  108480:	e1a03000 	mov	r3, r0
  108484:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    if (sock == RT_NULL)
  108488:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10848c:	e3530000 	cmp	r3, #0
  108490:	1a000003 	bne	1084a4 <sal_socket+0x60>
    {
        socket_delete(socket);
  108494:	e51b0008 	ldr	r0, [fp, #-8]
  108498:	ebfffd3c 	bl	107990 <socket_delete>
        return -1;
  10849c:	e3e03000 	mvn	r3, #0
  1084a0:	ea000035 	b	10857c <sal_socket+0x138>
    }

    /* Initialize sal socket object */
    retval = socket_init(domain, type, protocol, &sock);
  1084a4:	e24b3018 	sub	r3, fp, #24
  1084a8:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  1084ac:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  1084b0:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1084b4:	ebfffc0b 	bl	1074e8 <socket_init>
  1084b8:	e50b000c 	str	r0, [fp, #-12]
    if (retval < 0)
  1084bc:	e51b300c 	ldr	r3, [fp, #-12]
  1084c0:	e3530000 	cmp	r3, #0
  1084c4:	aa00000d 	bge	108500 <sal_socket+0xbc>
    {
        LOG_E("SAL socket protocol family input failed, return error %d.", retval);
  1084c8:	e3050f58 	movw	r0, #24408	; 0x5f58
  1084cc:	e3400014 	movt	r0, #20
  1084d0:	ebffeb0f 	bl	103114 <rt_kprintf>
  1084d4:	e51b100c 	ldr	r1, [fp, #-12]
  1084d8:	e30600f0 	movw	r0, #24816	; 0x60f0
  1084dc:	e3400014 	movt	r0, #20
  1084e0:	ebffeb0b 	bl	103114 <rt_kprintf>
  1084e4:	e3050f8c 	movw	r0, #24460	; 0x5f8c
  1084e8:	e3400014 	movt	r0, #20
  1084ec:	ebffeb08 	bl	103114 <rt_kprintf>
        socket_delete(socket);
  1084f0:	e51b0008 	ldr	r0, [fp, #-8]
  1084f4:	ebfffd25 	bl	107990 <socket_delete>
        return -1;
  1084f8:	e3e03000 	mvn	r3, #0
  1084fc:	ea00001e 	b	10857c <sal_socket+0x138>
    }

    /* valid the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, socket);
  108500:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  108504:	e5933014 	ldr	r3, [r3, #20]
  108508:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10850c:	e50b3010 	str	r3, [fp, #-16]
  108510:	e51b3010 	ldr	r3, [fp, #-16]
  108514:	e5933008 	ldr	r3, [r3, #8]
  108518:	e5933000 	ldr	r3, [r3]
  10851c:	e3530000 	cmp	r3, #0
  108520:	1a000001 	bne	10852c <sal_socket+0xe8>
  108524:	e3e03000 	mvn	r3, #0
  108528:	ea000013 	b	10857c <sal_socket+0x138>

    proto_socket = pf->skt_ops->socket(domain, type, protocol);
  10852c:	e51b3010 	ldr	r3, [fp, #-16]
  108530:	e5933008 	ldr	r3, [r3, #8]
  108534:	e5933000 	ldr	r3, [r3]
  108538:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  10853c:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  108540:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  108544:	e12fff33 	blx	r3
  108548:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    if (proto_socket >= 0)
  10854c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108550:	e3530000 	cmp	r3, #0
  108554:	ba000005 	blt	108570 <sal_socket+0x12c>
                socket_delete(socket);
                return -1;
            }
        }
#endif
        sock->user_data = (void *)(size_t)proto_socket;
  108558:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10855c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  108560:	e5832018 	str	r2, [r3, #24]
        return sock->socket;
  108564:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  108568:	e5933004 	ldr	r3, [r3, #4]
  10856c:	ea000002 	b	10857c <sal_socket+0x138>
    }
    socket_delete(socket);
  108570:	e51b0008 	ldr	r0, [fp, #-8]
  108574:	ebfffd05 	bl	107990 <socket_delete>
    return -1;
  108578:	e3e03000 	mvn	r3, #0
}
  10857c:	e1a00003 	mov	r0, r3
  108580:	e24bd004 	sub	sp, fp, #4
  108584:	e8bd8800 	pop	{fp, pc}

00108588 <sal_closesocket>:

int sal_closesocket(int socket)
{
  108588:	e92d4800 	push	{fp, lr}
  10858c:	e28db004 	add	fp, sp, #4
  108590:	e24dd018 	sub	sp, sp, #24
  108594:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    struct sal_socket *sock;
    struct sal_proto_family *pf;
    int error = 0;
  108598:	e3a03000 	mov	r3, #0
  10859c:	e50b3008 	str	r3, [fp, #-8]

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  1085a0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1085a4:	ebfffb50 	bl	1072ec <sal_get_socket>
  1085a8:	e50b000c 	str	r0, [fp, #-12]
  1085ac:	e51b300c 	ldr	r3, [fp, #-12]
  1085b0:	e3530000 	cmp	r3, #0
  1085b4:	1a000001 	bne	1085c0 <sal_closesocket+0x38>
  1085b8:	e3e03000 	mvn	r3, #0
  1085bc:	ea00001c 	b	108634 <sal_closesocket+0xac>

    /* clsoesocket operation not need to vaild network interface status */
    /* valid the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, socket);
  1085c0:	e51b300c 	ldr	r3, [fp, #-12]
  1085c4:	e5933014 	ldr	r3, [r3, #20]
  1085c8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  1085cc:	e50b3010 	str	r3, [fp, #-16]
  1085d0:	e51b3010 	ldr	r3, [fp, #-16]
  1085d4:	e5933008 	ldr	r3, [r3, #8]
  1085d8:	e5933000 	ldr	r3, [r3]
  1085dc:	e3530000 	cmp	r3, #0
  1085e0:	1a000001 	bne	1085ec <sal_closesocket+0x64>
  1085e4:	e3e03000 	mvn	r3, #0
  1085e8:	ea000011 	b	108634 <sal_closesocket+0xac>

    if (pf->skt_ops->closesocket((int)(size_t)sock->user_data) == 0)
  1085ec:	e51b3010 	ldr	r3, [fp, #-16]
  1085f0:	e5933008 	ldr	r3, [r3, #8]
  1085f4:	e5933004 	ldr	r3, [r3, #4]
  1085f8:	e51b200c 	ldr	r2, [fp, #-12]
  1085fc:	e5922018 	ldr	r2, [r2, #24]
  108600:	e1a00002 	mov	r0, r2
  108604:	e12fff33 	blx	r3
  108608:	e1a03000 	mov	r3, r0
  10860c:	e3530000 	cmp	r3, #0
  108610:	1a000002 	bne	108620 <sal_closesocket+0x98>
            {
                return -1;
            }
        }
#endif
        error = 0;
  108614:	e3a03000 	mov	r3, #0
  108618:	e50b3008 	str	r3, [fp, #-8]
  10861c:	ea000001 	b	108628 <sal_closesocket+0xa0>
    }
    else
    {
        error = -1;
  108620:	e3e03000 	mvn	r3, #0
  108624:	e50b3008 	str	r3, [fp, #-8]
    }

    /* delete socket */
    socket_delete(socket);
  108628:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  10862c:	ebfffcd7 	bl	107990 <socket_delete>

    return error;
  108630:	e51b3008 	ldr	r3, [fp, #-8]
}
  108634:	e1a00003 	mov	r0, r3
  108638:	e24bd004 	sub	sp, fp, #4
  10863c:	e8bd8800 	pop	{fp, pc}

00108640 <sal_ioctlsocket>:

int sal_ioctlsocket(int socket, long cmd, void *arg)
{
  108640:	e92d4800 	push	{fp, lr}
  108644:	e28db004 	add	fp, sp, #4
  108648:	e24dd028 	sub	sp, sp, #40	; 0x28
  10864c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  108650:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  108654:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
    struct sal_socket *sock;
    struct sal_proto_family *pf;
    struct sockaddr_in *addr_in = RT_NULL;
  108658:	e3a03000 	mov	r3, #0
  10865c:	e50b3008 	str	r3, [fp, #-8]
    struct sockaddr *addr = RT_NULL;
  108660:	e3a03000 	mov	r3, #0
  108664:	e50b300c 	str	r3, [fp, #-12]
    ip_addr_t input_ipaddr;
    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  108668:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10866c:	ebfffb1e 	bl	1072ec <sal_get_socket>
  108670:	e50b0010 	str	r0, [fp, #-16]
  108674:	e51b3010 	ldr	r3, [fp, #-16]
  108678:	e3530000 	cmp	r3, #0
  10867c:	1a000001 	bne	108688 <sal_ioctlsocket+0x48>
  108680:	e3e03000 	mvn	r3, #0
  108684:	ea000086 	b	1088a4 <sal_ioctlsocket+0x264>
    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, ioctlsocket);
  108688:	e51b3010 	ldr	r3, [fp, #-16]
  10868c:	e5933014 	ldr	r3, [r3, #20]
  108690:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108694:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  108698:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10869c:	e5933008 	ldr	r3, [r3, #8]
  1086a0:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  1086a4:	e3530000 	cmp	r3, #0
  1086a8:	1a000001 	bne	1086b4 <sal_ioctlsocket+0x74>
  1086ac:	e3e03000 	mvn	r3, #0
  1086b0:	ea00007b 	b	1088a4 <sal_ioctlsocket+0x264>

    struct sal_ifreq *ifr = (struct sal_ifreq *)arg;
  1086b4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1086b8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

    if((sock->domain == AF_INET)&&(sock->netdev)&&(ifr != RT_NULL))
  1086bc:	e51b3010 	ldr	r3, [fp, #-16]
  1086c0:	e5933008 	ldr	r3, [r3, #8]
  1086c4:	e3530002 	cmp	r3, #2
  1086c8:	1a000068 	bne	108870 <sal_ioctlsocket+0x230>
  1086cc:	e51b3010 	ldr	r3, [fp, #-16]
  1086d0:	e5933014 	ldr	r3, [r3, #20]
  1086d4:	e3530000 	cmp	r3, #0
  1086d8:	0a000064 	beq	108870 <sal_ioctlsocket+0x230>
  1086dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1086e0:	e3530000 	cmp	r3, #0
  1086e4:	0a000061 	beq	108870 <sal_ioctlsocket+0x230>
    {
        switch (cmd)
  1086e8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1086ec:	e2433c89 	sub	r3, r3, #35072	; 0x8900
  1086f0:	e2433015 	sub	r3, r3, #21
  1086f4:	e3530012 	cmp	r3, #18
  1086f8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  1086fc:	ea00005d 	b	108878 <sal_ioctlsocket+0x238>
  108700:	0010874c 	.word	0x0010874c
  108704:	00108774 	.word	0x00108774
  108708:	00108878 	.word	0x00108878
  10870c:	00108878 	.word	0x00108878
  108710:	00108878 	.word	0x00108878
  108714:	00108878 	.word	0x00108878
  108718:	001087b0 	.word	0x001087b0
  10871c:	001087d8 	.word	0x001087d8
  108720:	00108878 	.word	0x00108878
  108724:	00108878 	.word	0x00108878
  108728:	00108878 	.word	0x00108878
  10872c:	00108878 	.word	0x00108878
  108730:	00108850 	.word	0x00108850
  108734:	00108878 	.word	0x00108878
  108738:	00108878 	.word	0x00108878
  10873c:	00108878 	.word	0x00108878
  108740:	00108878 	.word	0x00108878
  108744:	00108878 	.word	0x00108878
  108748:	00108814 	.word	0x00108814
        {
        case SIOCGIFADDR:
            addr_in = (struct sockaddr_in *)&(ifr->ifr_ifru.ifru_addr);
  10874c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  108750:	e2833010 	add	r3, r3, #16
  108754:	e50b3008 	str	r3, [fp, #-8]
#if NETDEV_IPV4 && NETDEV_IPV6
            addr_in->sin_addr.s_addr = sock->netdev->ip_addr.u_addr.ip4.addr;
#elif NETDEV_IPV4
            addr_in->sin_addr.s_addr = sock->netdev->ip_addr.addr;
  108758:	e51b3010 	ldr	r3, [fp, #-16]
  10875c:	e5933014 	ldr	r3, [r3, #20]
  108760:	e593200c 	ldr	r2, [r3, #12]
  108764:	e51b3008 	ldr	r3, [fp, #-8]
  108768:	e5832004 	str	r2, [r3, #4]
#elif NETDEV_IPV6
#error "not only support IPV6"
#endif /* NETDEV_IPV4 && NETDEV_IPV6*/
            return 0;
  10876c:	e3a03000 	mov	r3, #0
  108770:	ea00004b 	b	1088a4 <sal_ioctlsocket+0x264>

        case SIOCSIFADDR:
            addr = (struct sockaddr *)&(ifr->ifr_ifru.ifru_addr);
  108774:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  108778:	e2833010 	add	r3, r3, #16
  10877c:	e50b300c 	str	r3, [fp, #-12]
            sal_sockaddr_to_ipaddr(addr,&input_ipaddr);
  108780:	e24b301c 	sub	r3, fp, #28
  108784:	e1a01003 	mov	r1, r3
  108788:	e51b000c 	ldr	r0, [fp, #-12]
  10878c:	ebfffd17 	bl	107bf0 <sal_sockaddr_to_ipaddr>
            netdev_set_ipaddr(sock->netdev,&input_ipaddr);
  108790:	e51b3010 	ldr	r3, [fp, #-16]
  108794:	e5933014 	ldr	r3, [r3, #20]
  108798:	e24b201c 	sub	r2, fp, #28
  10879c:	e1a01002 	mov	r1, r2
  1087a0:	e1a00003 	mov	r0, r3
  1087a4:	ebfff4ae 	bl	105a64 <netdev_set_ipaddr>
            return 0;    
  1087a8:	e3a03000 	mov	r3, #0
  1087ac:	ea00003c 	b	1088a4 <sal_ioctlsocket+0x264>

        case SIOCGIFNETMASK:
            addr_in = (struct sockaddr_in *)&(ifr->ifr_ifru.ifru_netmask);
  1087b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1087b4:	e2833010 	add	r3, r3, #16
  1087b8:	e50b3008 	str	r3, [fp, #-8]
#if NETDEV_IPV4 && NETDEV_IPV6
            addr_in->sin_addr.s_addr = sock->netdev->netmask.u_addr.ip4.addr;
#elif NETDEV_IPV4
            addr_in->sin_addr.s_addr = sock->netdev->netmask.addr;
  1087bc:	e51b3010 	ldr	r3, [fp, #-16]
  1087c0:	e5933014 	ldr	r3, [r3, #20]
  1087c4:	e5932010 	ldr	r2, [r3, #16]
  1087c8:	e51b3008 	ldr	r3, [fp, #-8]
  1087cc:	e5832004 	str	r2, [r3, #4]
#elif NETDEV_IPV6
#error "not only support IPV6"
#endif /* NETDEV_IPV4 && NETDEV_IPV6*/
            return 0;
  1087d0:	e3a03000 	mov	r3, #0
  1087d4:	ea000032 	b	1088a4 <sal_ioctlsocket+0x264>

        case SIOCSIFNETMASK:
            addr = (struct sockaddr *)&(ifr->ifr_ifru.ifru_netmask);
  1087d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1087dc:	e2833010 	add	r3, r3, #16
  1087e0:	e50b300c 	str	r3, [fp, #-12]
            sal_sockaddr_to_ipaddr(addr,&input_ipaddr);
  1087e4:	e24b301c 	sub	r3, fp, #28
  1087e8:	e1a01003 	mov	r1, r3
  1087ec:	e51b000c 	ldr	r0, [fp, #-12]
  1087f0:	ebfffcfe 	bl	107bf0 <sal_sockaddr_to_ipaddr>
            netdev_set_netmask(sock->netdev,&input_ipaddr);
  1087f4:	e51b3010 	ldr	r3, [fp, #-16]
  1087f8:	e5933014 	ldr	r3, [r3, #20]
  1087fc:	e24b201c 	sub	r2, fp, #28
  108800:	e1a01002 	mov	r1, r2
  108804:	e1a00003 	mov	r0, r3
  108808:	ebfff4e4 	bl	105ba0 <netdev_set_netmask>
            return 0;            
  10880c:	e3a03000 	mov	r3, #0
  108810:	ea000023 	b	1088a4 <sal_ioctlsocket+0x264>

        case SIOCGIFHWADDR:
            addr = (struct sockaddr *)&(ifr->ifr_ifru.ifru_hwaddr);
  108814:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  108818:	e2833010 	add	r3, r3, #16
  10881c:	e50b300c 	str	r3, [fp, #-12]
            rt_memcpy(addr->sa_data,sock->netdev->hwaddr,sock->netdev->hwaddr_len);
  108820:	e51b300c 	ldr	r3, [fp, #-12]
  108824:	e2830002 	add	r0, r3, #2
  108828:	e51b3010 	ldr	r3, [fp, #-16]
  10882c:	e5933014 	ldr	r3, [r3, #20]
  108830:	e2831021 	add	r1, r3, #33	; 0x21
  108834:	e51b3010 	ldr	r3, [fp, #-16]
  108838:	e5933014 	ldr	r3, [r3, #20]
  10883c:	e5d33020 	ldrb	r3, [r3, #32]
  108840:	e1a02003 	mov	r2, r3
  108844:	ebffeaad 	bl	103300 <rt_memcpy>
            return 0;
  108848:	e3a03000 	mov	r3, #0
  10884c:	ea000014 	b	1088a4 <sal_ioctlsocket+0x264>

        case SIOCGIFMTU:
            ifr->ifr_ifru.ifru_mtu = sock->netdev->mtu;
  108850:	e51b3010 	ldr	r3, [fp, #-16]
  108854:	e5933014 	ldr	r3, [r3, #20]
  108858:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  10885c:	e1a02003 	mov	r2, r3
  108860:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  108864:	e5832010 	str	r2, [r3, #16]
            return 0;            
  108868:	e3a03000 	mov	r3, #0
  10886c:	ea00000c 	b	1088a4 <sal_ioctlsocket+0x264>

        default:
            break;
        }
    }
  108870:	e320f000 	nop	{0}
  108874:	ea000000 	b	10887c <sal_ioctlsocket+0x23c>
            break;
  108878:	e320f000 	nop	{0}
    return pf->skt_ops->ioctlsocket((int)(size_t)sock->user_data, cmd, arg);
  10887c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108880:	e5933008 	ldr	r3, [r3, #8]
  108884:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  108888:	e51b2010 	ldr	r2, [fp, #-16]
  10888c:	e5922018 	ldr	r2, [r2, #24]
  108890:	e1a00002 	mov	r0, r2
  108894:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  108898:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  10889c:	e12fff33 	blx	r3
  1088a0:	e1a03000 	mov	r3, r0
}
  1088a4:	e1a00003 	mov	r0, r3
  1088a8:	e24bd004 	sub	sp, fp, #4
  1088ac:	e8bd8800 	pop	{fp, pc}

001088b0 <sal_poll>:

#ifdef SAL_USING_POSIX
int sal_poll(struct dfs_fd *file, struct rt_pollreq *req)
{
  1088b0:	e92d4800 	push	{fp, lr}
  1088b4:	e28db004 	add	fp, sp, #4
  1088b8:	e24dd018 	sub	sp, sp, #24
  1088bc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1088c0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    struct sal_socket *sock;
    struct sal_proto_family *pf;
    int socket = (int)(size_t)file->fnode->data;
  1088c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1088c8:	e5933018 	ldr	r3, [r3, #24]
  1088cc:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  1088d0:	e50b3008 	str	r3, [fp, #-8]

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  1088d4:	e51b0008 	ldr	r0, [fp, #-8]
  1088d8:	ebfffa83 	bl	1072ec <sal_get_socket>
  1088dc:	e50b000c 	str	r0, [fp, #-12]
  1088e0:	e51b300c 	ldr	r3, [fp, #-12]
  1088e4:	e3530000 	cmp	r3, #0
  1088e8:	1a000001 	bne	1088f4 <sal_poll+0x44>
  1088ec:	e3e03000 	mvn	r3, #0
  1088f0:	ea000019 	b	10895c <sal_poll+0xac>

    /* check the network interface is up status  */
    SAL_NETDEV_IS_UP(sock->netdev);
  1088f4:	e51b300c 	ldr	r3, [fp, #-12]
  1088f8:	e5933014 	ldr	r3, [r3, #20]
  1088fc:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108900:	e2033001 	and	r3, r3, #1
  108904:	e3530000 	cmp	r3, #0
  108908:	1a000001 	bne	108914 <sal_poll+0x64>
  10890c:	e3e03000 	mvn	r3, #0
  108910:	ea000011 	b	10895c <sal_poll+0xac>
    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, poll);
  108914:	e51b300c 	ldr	r3, [fp, #-12]
  108918:	e5933014 	ldr	r3, [r3, #20]
  10891c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108920:	e50b3010 	str	r3, [fp, #-16]
  108924:	e51b3010 	ldr	r3, [fp, #-16]
  108928:	e5933008 	ldr	r3, [r3, #8]
  10892c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  108930:	e3530000 	cmp	r3, #0
  108934:	1a000001 	bne	108940 <sal_poll+0x90>
  108938:	e3e03000 	mvn	r3, #0
  10893c:	ea000006 	b	10895c <sal_poll+0xac>

    return pf->skt_ops->poll(file, req);
  108940:	e51b3010 	ldr	r3, [fp, #-16]
  108944:	e5933008 	ldr	r3, [r3, #8]
  108948:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10894c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108950:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  108954:	e12fff33 	blx	r3
  108958:	e1a03000 	mov	r3, r0
}
  10895c:	e1a00003 	mov	r0, r3
  108960:	e24bd004 	sub	sp, fp, #4
  108964:	e8bd8800 	pop	{fp, pc}

00108968 <sal_gethostbyname>:
#endif

struct hostent *sal_gethostbyname(const char *name)
{
  108968:	e92d4800 	push	{fp, lr}
  10896c:	e28db004 	add	fp, sp, #4
  108970:	e24dd010 	sub	sp, sp, #16
  108974:	e50b0010 	str	r0, [fp, #-16]
    struct netdev *netdev = netdev_default;
  108978:	e30f3574 	movw	r3, #62836	; 0xf574
  10897c:	e3403014 	movt	r3, #20
  108980:	e5933000 	ldr	r3, [r3]
  108984:	e50b3008 	str	r3, [fp, #-8]
    struct sal_proto_family *pf;

    if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, gethostbyname))
  108988:	e51b3008 	ldr	r3, [fp, #-8]
  10898c:	e3530000 	cmp	r3, #0
  108990:	0a000017 	beq	1089f4 <sal_gethostbyname+0x8c>
  108994:	e51b3008 	ldr	r3, [fp, #-8]
  108998:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  10899c:	e2033001 	and	r3, r3, #1
  1089a0:	e6ef3073 	uxtb	r3, r3
  1089a4:	e3530000 	cmp	r3, #0
  1089a8:	0a000011 	beq	1089f4 <sal_gethostbyname+0x8c>
  1089ac:	e51b3008 	ldr	r3, [fp, #-8]
  1089b0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  1089b4:	e50b300c 	str	r3, [fp, #-12]
  1089b8:	e51b300c 	ldr	r3, [fp, #-12]
  1089bc:	e3530000 	cmp	r3, #0
  1089c0:	0a00000b 	beq	1089f4 <sal_gethostbyname+0x8c>
  1089c4:	e51b300c 	ldr	r3, [fp, #-12]
  1089c8:	e593300c 	ldr	r3, [r3, #12]
  1089cc:	e5933000 	ldr	r3, [r3]
  1089d0:	e3530000 	cmp	r3, #0
  1089d4:	0a000006 	beq	1089f4 <sal_gethostbyname+0x8c>
    {
        return pf->netdb_ops->gethostbyname(name);
  1089d8:	e51b300c 	ldr	r3, [fp, #-12]
  1089dc:	e593300c 	ldr	r3, [r3, #12]
  1089e0:	e5933000 	ldr	r3, [r3]
  1089e4:	e51b0010 	ldr	r0, [fp, #-16]
  1089e8:	e12fff33 	blx	r3
  1089ec:	e1a03000 	mov	r3, r0
  1089f0:	ea00001e 	b	108a70 <sal_gethostbyname+0x108>
    }
    else
    {
        /* get the first network interface device with up status */
        netdev = netdev_get_first_by_flags(NETDEV_FLAG_UP);
  1089f4:	e3a00001 	mov	r0, #1
  1089f8:	ebfff265 	bl	105394 <netdev_get_first_by_flags>
  1089fc:	e50b0008 	str	r0, [fp, #-8]
        if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, gethostbyname))
  108a00:	e51b3008 	ldr	r3, [fp, #-8]
  108a04:	e3530000 	cmp	r3, #0
  108a08:	0a000017 	beq	108a6c <sal_gethostbyname+0x104>
  108a0c:	e51b3008 	ldr	r3, [fp, #-8]
  108a10:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108a14:	e2033001 	and	r3, r3, #1
  108a18:	e6ef3073 	uxtb	r3, r3
  108a1c:	e3530000 	cmp	r3, #0
  108a20:	0a000011 	beq	108a6c <sal_gethostbyname+0x104>
  108a24:	e51b3008 	ldr	r3, [fp, #-8]
  108a28:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108a2c:	e50b300c 	str	r3, [fp, #-12]
  108a30:	e51b300c 	ldr	r3, [fp, #-12]
  108a34:	e3530000 	cmp	r3, #0
  108a38:	0a00000b 	beq	108a6c <sal_gethostbyname+0x104>
  108a3c:	e51b300c 	ldr	r3, [fp, #-12]
  108a40:	e593300c 	ldr	r3, [r3, #12]
  108a44:	e5933000 	ldr	r3, [r3]
  108a48:	e3530000 	cmp	r3, #0
  108a4c:	0a000006 	beq	108a6c <sal_gethostbyname+0x104>
        {
            return pf->netdb_ops->gethostbyname(name);
  108a50:	e51b300c 	ldr	r3, [fp, #-12]
  108a54:	e593300c 	ldr	r3, [r3, #12]
  108a58:	e5933000 	ldr	r3, [r3]
  108a5c:	e51b0010 	ldr	r0, [fp, #-16]
  108a60:	e12fff33 	blx	r3
  108a64:	e1a03000 	mov	r3, r0
  108a68:	ea000000 	b	108a70 <sal_gethostbyname+0x108>
        }
    }

    return RT_NULL;
  108a6c:	e3a03000 	mov	r3, #0
}
  108a70:	e1a00003 	mov	r0, r3
  108a74:	e24bd004 	sub	sp, fp, #4
  108a78:	e8bd8800 	pop	{fp, pc}

00108a7c <sal_gethostbyname_r>:

int sal_gethostbyname_r(const char *name, struct hostent *ret, char *buf,
                        size_t buflen, struct hostent **result, int *h_errnop)
{
  108a7c:	e92d4810 	push	{r4, fp, lr}
  108a80:	e28db008 	add	fp, sp, #8
  108a84:	e24dd024 	sub	sp, sp, #36	; 0x24
  108a88:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  108a8c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  108a90:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  108a94:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    struct netdev *netdev = netdev_default;
  108a98:	e30f3574 	movw	r3, #62836	; 0xf574
  108a9c:	e3403014 	movt	r3, #20
  108aa0:	e5933000 	ldr	r3, [r3]
  108aa4:	e50b3010 	str	r3, [fp, #-16]
    struct sal_proto_family *pf;

    if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, gethostbyname_r))
  108aa8:	e51b3010 	ldr	r3, [fp, #-16]
  108aac:	e3530000 	cmp	r3, #0
  108ab0:	0a00001e 	beq	108b30 <sal_gethostbyname_r+0xb4>
  108ab4:	e51b3010 	ldr	r3, [fp, #-16]
  108ab8:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108abc:	e2033001 	and	r3, r3, #1
  108ac0:	e6ef3073 	uxtb	r3, r3
  108ac4:	e3530000 	cmp	r3, #0
  108ac8:	0a000018 	beq	108b30 <sal_gethostbyname_r+0xb4>
  108acc:	e51b3010 	ldr	r3, [fp, #-16]
  108ad0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108ad4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  108ad8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108adc:	e3530000 	cmp	r3, #0
  108ae0:	0a000012 	beq	108b30 <sal_gethostbyname_r+0xb4>
  108ae4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108ae8:	e593300c 	ldr	r3, [r3, #12]
  108aec:	e5933004 	ldr	r3, [r3, #4]
  108af0:	e3530000 	cmp	r3, #0
  108af4:	0a00000d 	beq	108b30 <sal_gethostbyname_r+0xb4>
    {
        return pf->netdb_ops->gethostbyname_r(name, ret, buf, buflen, result, h_errnop);
  108af8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108afc:	e593300c 	ldr	r3, [r3, #12]
  108b00:	e5934004 	ldr	r4, [r3, #4]
  108b04:	e59b3008 	ldr	r3, [fp, #8]
  108b08:	e58d3004 	str	r3, [sp, #4]
  108b0c:	e59b3004 	ldr	r3, [fp, #4]
  108b10:	e58d3000 	str	r3, [sp]
  108b14:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  108b18:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  108b1c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108b20:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  108b24:	e12fff34 	blx	r4
  108b28:	e1a03000 	mov	r3, r0
  108b2c:	ea000025 	b	108bc8 <sal_gethostbyname_r+0x14c>
    }
    else
    {
        /* get the first network interface device with up status */
        netdev = netdev_get_first_by_flags(NETDEV_FLAG_UP);
  108b30:	e3a00001 	mov	r0, #1
  108b34:	ebfff216 	bl	105394 <netdev_get_first_by_flags>
  108b38:	e50b0010 	str	r0, [fp, #-16]
        if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, gethostbyname_r))
  108b3c:	e51b3010 	ldr	r3, [fp, #-16]
  108b40:	e3530000 	cmp	r3, #0
  108b44:	0a00001e 	beq	108bc4 <sal_gethostbyname_r+0x148>
  108b48:	e51b3010 	ldr	r3, [fp, #-16]
  108b4c:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108b50:	e2033001 	and	r3, r3, #1
  108b54:	e6ef3073 	uxtb	r3, r3
  108b58:	e3530000 	cmp	r3, #0
  108b5c:	0a000018 	beq	108bc4 <sal_gethostbyname_r+0x148>
  108b60:	e51b3010 	ldr	r3, [fp, #-16]
  108b64:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108b68:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  108b6c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108b70:	e3530000 	cmp	r3, #0
  108b74:	0a000012 	beq	108bc4 <sal_gethostbyname_r+0x148>
  108b78:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108b7c:	e593300c 	ldr	r3, [r3, #12]
  108b80:	e5933004 	ldr	r3, [r3, #4]
  108b84:	e3530000 	cmp	r3, #0
  108b88:	0a00000d 	beq	108bc4 <sal_gethostbyname_r+0x148>
        {
            return pf->netdb_ops->gethostbyname_r(name, ret, buf, buflen, result, h_errnop);
  108b8c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108b90:	e593300c 	ldr	r3, [r3, #12]
  108b94:	e5934004 	ldr	r4, [r3, #4]
  108b98:	e59b3008 	ldr	r3, [fp, #8]
  108b9c:	e58d3004 	str	r3, [sp, #4]
  108ba0:	e59b3004 	ldr	r3, [fp, #4]
  108ba4:	e58d3000 	str	r3, [sp]
  108ba8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  108bac:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  108bb0:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108bb4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  108bb8:	e12fff34 	blx	r4
  108bbc:	e1a03000 	mov	r3, r0
  108bc0:	ea000000 	b	108bc8 <sal_gethostbyname_r+0x14c>
        }
    }

    return -1;
  108bc4:	e3e03000 	mvn	r3, #0
}
  108bc8:	e1a00003 	mov	r0, r3
  108bcc:	e24bd008 	sub	sp, fp, #8
  108bd0:	e8bd8810 	pop	{r4, fp, pc}

00108bd4 <sal_getaddrinfo>:

int sal_getaddrinfo(const char *nodename,
                    const char *servname,
                    const struct addrinfo *hints,
                    struct addrinfo **res)
{
  108bd4:	e92d4810 	push	{r4, fp, lr}
  108bd8:	e28db008 	add	fp, sp, #8
  108bdc:	e24dd01c 	sub	sp, sp, #28
  108be0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  108be4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  108be8:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  108bec:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    struct netdev *netdev = netdev_default;
  108bf0:	e30f3574 	movw	r3, #62836	; 0xf574
  108bf4:	e3403014 	movt	r3, #20
  108bf8:	e5933000 	ldr	r3, [r3]
  108bfc:	e50b3010 	str	r3, [fp, #-16]
    struct sal_proto_family *pf;

    if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, getaddrinfo))
  108c00:	e51b3010 	ldr	r3, [fp, #-16]
  108c04:	e3530000 	cmp	r3, #0
  108c08:	0a00001a 	beq	108c78 <sal_getaddrinfo+0xa4>
  108c0c:	e51b3010 	ldr	r3, [fp, #-16]
  108c10:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108c14:	e2033001 	and	r3, r3, #1
  108c18:	e6ef3073 	uxtb	r3, r3
  108c1c:	e3530000 	cmp	r3, #0
  108c20:	0a000014 	beq	108c78 <sal_getaddrinfo+0xa4>
  108c24:	e51b3010 	ldr	r3, [fp, #-16]
  108c28:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108c2c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  108c30:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108c34:	e3530000 	cmp	r3, #0
  108c38:	0a00000e 	beq	108c78 <sal_getaddrinfo+0xa4>
  108c3c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108c40:	e593300c 	ldr	r3, [r3, #12]
  108c44:	e5933008 	ldr	r3, [r3, #8]
  108c48:	e3530000 	cmp	r3, #0
  108c4c:	0a000009 	beq	108c78 <sal_getaddrinfo+0xa4>
    {
        return pf->netdb_ops->getaddrinfo(nodename, servname, hints, res);
  108c50:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108c54:	e593300c 	ldr	r3, [r3, #12]
  108c58:	e5934008 	ldr	r4, [r3, #8]
  108c5c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  108c60:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  108c64:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108c68:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  108c6c:	e12fff34 	blx	r4
  108c70:	e1a03000 	mov	r3, r0
  108c74:	ea000021 	b	108d00 <sal_getaddrinfo+0x12c>
    }
    else
    {
        /* get the first network interface device with up status */
        netdev = netdev_get_first_by_flags(NETDEV_FLAG_UP);
  108c78:	e3a00001 	mov	r0, #1
  108c7c:	ebfff1c4 	bl	105394 <netdev_get_first_by_flags>
  108c80:	e50b0010 	str	r0, [fp, #-16]
        if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, getaddrinfo))
  108c84:	e51b3010 	ldr	r3, [fp, #-16]
  108c88:	e3530000 	cmp	r3, #0
  108c8c:	0a00001a 	beq	108cfc <sal_getaddrinfo+0x128>
  108c90:	e51b3010 	ldr	r3, [fp, #-16]
  108c94:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108c98:	e2033001 	and	r3, r3, #1
  108c9c:	e6ef3073 	uxtb	r3, r3
  108ca0:	e3530000 	cmp	r3, #0
  108ca4:	0a000014 	beq	108cfc <sal_getaddrinfo+0x128>
  108ca8:	e51b3010 	ldr	r3, [fp, #-16]
  108cac:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108cb0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  108cb4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108cb8:	e3530000 	cmp	r3, #0
  108cbc:	0a00000e 	beq	108cfc <sal_getaddrinfo+0x128>
  108cc0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108cc4:	e593300c 	ldr	r3, [r3, #12]
  108cc8:	e5933008 	ldr	r3, [r3, #8]
  108ccc:	e3530000 	cmp	r3, #0
  108cd0:	0a000009 	beq	108cfc <sal_getaddrinfo+0x128>
        {
            return pf->netdb_ops->getaddrinfo(nodename, servname, hints, res);
  108cd4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108cd8:	e593300c 	ldr	r3, [r3, #12]
  108cdc:	e5934008 	ldr	r4, [r3, #8]
  108ce0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  108ce4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  108ce8:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108cec:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  108cf0:	e12fff34 	blx	r4
  108cf4:	e1a03000 	mov	r3, r0
  108cf8:	ea000000 	b	108d00 <sal_getaddrinfo+0x12c>
        }
    }

    return -1;
  108cfc:	e3e03000 	mvn	r3, #0
}
  108d00:	e1a00003 	mov	r0, r3
  108d04:	e24bd008 	sub	sp, fp, #8
  108d08:	e8bd8810 	pop	{r4, fp, pc}

00108d0c <sal_freeaddrinfo>:

void sal_freeaddrinfo(struct addrinfo *ai)
{
  108d0c:	e92d4800 	push	{fp, lr}
  108d10:	e28db004 	add	fp, sp, #4
  108d14:	e24dd010 	sub	sp, sp, #16
  108d18:	e50b0010 	str	r0, [fp, #-16]
    struct netdev *netdev = netdev_default;
  108d1c:	e30f3574 	movw	r3, #62836	; 0xf574
  108d20:	e3403014 	movt	r3, #20
  108d24:	e5933000 	ldr	r3, [r3]
  108d28:	e50b3008 	str	r3, [fp, #-8]
    struct sal_proto_family *pf;

    if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, freeaddrinfo))
  108d2c:	e51b3008 	ldr	r3, [fp, #-8]
  108d30:	e3530000 	cmp	r3, #0
  108d34:	0a000016 	beq	108d94 <sal_freeaddrinfo+0x88>
  108d38:	e51b3008 	ldr	r3, [fp, #-8]
  108d3c:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108d40:	e2033001 	and	r3, r3, #1
  108d44:	e6ef3073 	uxtb	r3, r3
  108d48:	e3530000 	cmp	r3, #0
  108d4c:	0a000010 	beq	108d94 <sal_freeaddrinfo+0x88>
  108d50:	e51b3008 	ldr	r3, [fp, #-8]
  108d54:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108d58:	e50b300c 	str	r3, [fp, #-12]
  108d5c:	e51b300c 	ldr	r3, [fp, #-12]
  108d60:	e3530000 	cmp	r3, #0
  108d64:	0a00000a 	beq	108d94 <sal_freeaddrinfo+0x88>
  108d68:	e51b300c 	ldr	r3, [fp, #-12]
  108d6c:	e593300c 	ldr	r3, [r3, #12]
  108d70:	e593300c 	ldr	r3, [r3, #12]
  108d74:	e3530000 	cmp	r3, #0
  108d78:	0a000005 	beq	108d94 <sal_freeaddrinfo+0x88>
    {
        pf->netdb_ops->freeaddrinfo(ai);
  108d7c:	e51b300c 	ldr	r3, [fp, #-12]
  108d80:	e593300c 	ldr	r3, [r3, #12]
  108d84:	e593300c 	ldr	r3, [r3, #12]
  108d88:	e51b0010 	ldr	r0, [fp, #-16]
  108d8c:	e12fff33 	blx	r3
        if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, freeaddrinfo))
        {
            pf->netdb_ops->freeaddrinfo(ai);
        }
    }
}
  108d90:	ea00001b 	b	108e04 <sal_freeaddrinfo+0xf8>
        netdev = netdev_get_first_by_flags(NETDEV_FLAG_UP);
  108d94:	e3a00001 	mov	r0, #1
  108d98:	ebfff17d 	bl	105394 <netdev_get_first_by_flags>
  108d9c:	e50b0008 	str	r0, [fp, #-8]
        if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, freeaddrinfo))
  108da0:	e51b3008 	ldr	r3, [fp, #-8]
  108da4:	e3530000 	cmp	r3, #0
  108da8:	0a000015 	beq	108e04 <sal_freeaddrinfo+0xf8>
  108dac:	e51b3008 	ldr	r3, [fp, #-8]
  108db0:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108db4:	e2033001 	and	r3, r3, #1
  108db8:	e6ef3073 	uxtb	r3, r3
  108dbc:	e3530000 	cmp	r3, #0
  108dc0:	0a00000f 	beq	108e04 <sal_freeaddrinfo+0xf8>
  108dc4:	e51b3008 	ldr	r3, [fp, #-8]
  108dc8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108dcc:	e50b300c 	str	r3, [fp, #-12]
  108dd0:	e51b300c 	ldr	r3, [fp, #-12]
  108dd4:	e3530000 	cmp	r3, #0
  108dd8:	0a000009 	beq	108e04 <sal_freeaddrinfo+0xf8>
  108ddc:	e51b300c 	ldr	r3, [fp, #-12]
  108de0:	e593300c 	ldr	r3, [r3, #12]
  108de4:	e593300c 	ldr	r3, [r3, #12]
  108de8:	e3530000 	cmp	r3, #0
  108dec:	0a000004 	beq	108e04 <sal_freeaddrinfo+0xf8>
            pf->netdb_ops->freeaddrinfo(ai);
  108df0:	e51b300c 	ldr	r3, [fp, #-12]
  108df4:	e593300c 	ldr	r3, [r3, #12]
  108df8:	e593300c 	ldr	r3, [r3, #12]
  108dfc:	e51b0010 	ldr	r0, [fp, #-16]
  108e00:	e12fff33 	blx	r3
}
  108e04:	e320f000 	nop	{0}
  108e08:	e24bd004 	sub	sp, fp, #4
  108e0c:	e8bd8800 	pop	{fp, pc}

00108e10 <unet_socket>:
 * socket options. To solve the issue, we do it separately in 2 steps.
 */
#define INTF_SOCK_NONBLOCK  04000
#define IMPL_SOCK_NONBLOCK  1
int unet_socket(int domain, int type, int protocol)
{
  108e10:	e92d4800 	push	{fp, lr}
  108e14:	e28db004 	add	fp, sp, #4
  108e18:	e24dd018 	sub	sp, sp, #24
  108e1c:	e50b0010 	str	r0, [fp, #-16]
  108e20:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  108e24:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    int socket;

    /* filter-out socket options: SOCK_NONBLOCK & SOCK_CLOEXEC (not supported) */
    int flag = type & INTF_SOCK_NONBLOCK;
  108e28:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108e2c:	e2033b02 	and	r3, r3, #2048	; 0x800
  108e30:	e50b3008 	str	r3, [fp, #-8]
    type &= ~INTF_SOCK_NONBLOCK;
  108e34:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108e38:	e3c33b02 	bic	r3, r3, #2048	; 0x800
  108e3c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

    socket = lwip_socket(domain, type, protocol);
  108e40:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  108e44:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  108e48:	e51b0010 	ldr	r0, [fp, #-16]
  108e4c:	eb0027a4 	bl	112ce4 <lwip_socket>
  108e50:	e50b000c 	str	r0, [fp, #-12]
    // sock_wqueue_add((void*)get_socket(socket));

    /* handle the socket options */
    if (socket >= 0 && flag != 0)
  108e54:	e51b300c 	ldr	r3, [fp, #-12]
  108e58:	e3530000 	cmp	r3, #0
  108e5c:	ba000006 	blt	108e7c <unet_socket+0x6c>
  108e60:	e51b3008 	ldr	r3, [fp, #-8]
  108e64:	e3530000 	cmp	r3, #0
  108e68:	0a000003 	beq	108e7c <unet_socket+0x6c>
        unet_fcntl(socket, F_SETFL, flag);
  108e6c:	e51b2008 	ldr	r2, [fp, #-8]
  108e70:	e3a01004 	mov	r1, #4
  108e74:	e51b000c 	ldr	r0, [fp, #-12]
  108e78:	eb0000e2 	bl	109208 <unet_fcntl>

    return socket;
  108e7c:	e51b300c 	ldr	r3, [fp, #-12]
}
  108e80:	e1a00003 	mov	r0, r3
  108e84:	e24bd004 	sub	sp, fp, #4
  108e88:	e8bd8800 	pop	{fp, pc}

00108e8c <unet_close>:

int unet_close(int socket)
{
  108e8c:	e92d4800 	push	{fp, lr}
  108e90:	e28db004 	add	fp, sp, #4
  108e94:	e24dd010 	sub	sp, sp, #16
  108e98:	e50b0010 	str	r0, [fp, #-16]
    int result = lwip_close(socket);
  108e9c:	e51b0010 	ldr	r0, [fp, #-16]
  108ea0:	eb002279 	bl	11188c <lwip_close>
  108ea4:	e50b0008 	str	r0, [fp, #-8]
    // sock_wqueue_delete((void*)get_socket(socket));

    return result;
  108ea8:	e51b3008 	ldr	r3, [fp, #-8]
}
  108eac:	e1a00003 	mov	r0, r3
  108eb0:	e24bd004 	sub	sp, fp, #4
  108eb4:	e8bd8800 	pop	{fp, pc}

00108eb8 <unet_bind>:

int unet_bind(int socket, const struct sockaddr *name, socklen_t namelen)
{
  108eb8:	e92d4800 	push	{fp, lr}
  108ebc:	e28db004 	add	fp, sp, #4
  108ec0:	e24dd010 	sub	sp, sp, #16
  108ec4:	e50b0008 	str	r0, [fp, #-8]
  108ec8:	e50b100c 	str	r1, [fp, #-12]
  108ecc:	e50b2010 	str	r2, [fp, #-16]
    return lwip_bind(socket, name, namelen);
  108ed0:	e51b2010 	ldr	r2, [fp, #-16]
  108ed4:	e51b100c 	ldr	r1, [fp, #-12]
  108ed8:	e51b0008 	ldr	r0, [fp, #-8]
  108edc:	eb002204 	bl	1116f4 <lwip_bind>
  108ee0:	e1a03000 	mov	r3, r0
}
  108ee4:	e1a00003 	mov	r0, r3
  108ee8:	e24bd004 	sub	sp, fp, #4
  108eec:	e8bd8800 	pop	{fp, pc}

00108ef0 <unet_listen>:

int unet_listen(int socket, int backlog)
{
  108ef0:	e92d4800 	push	{fp, lr}
  108ef4:	e28db004 	add	fp, sp, #4
  108ef8:	e24dd008 	sub	sp, sp, #8
  108efc:	e50b0008 	str	r0, [fp, #-8]
  108f00:	e50b100c 	str	r1, [fp, #-12]
    return lwip_listen(socket, backlog);
  108f04:	e51b100c 	ldr	r1, [fp, #-12]
  108f08:	e51b0008 	ldr	r0, [fp, #-8]
  108f0c:	eb00231d 	bl	111b88 <lwip_listen>
  108f10:	e1a03000 	mov	r3, r0
}
  108f14:	e1a00003 	mov	r0, r3
  108f18:	e24bd004 	sub	sp, fp, #4
  108f1c:	e8bd8800 	pop	{fp, pc}

00108f20 <unet_connect>:

int unet_connect(int socket, const struct sockaddr *name, socklen_t namelen)
{
  108f20:	e92d4800 	push	{fp, lr}
  108f24:	e28db004 	add	fp, sp, #4
  108f28:	e24dd010 	sub	sp, sp, #16
  108f2c:	e50b0008 	str	r0, [fp, #-8]
  108f30:	e50b100c 	str	r1, [fp, #-12]
  108f34:	e50b2010 	str	r2, [fp, #-16]
    return lwip_connect(socket, name, namelen);
  108f38:	e51b2010 	ldr	r2, [fp, #-16]
  108f3c:	e51b100c 	ldr	r1, [fp, #-12]
  108f40:	e51b0008 	ldr	r0, [fp, #-8]
  108f44:	eb00229a 	bl	1119b4 <lwip_connect>
  108f48:	e1a03000 	mov	r3, r0
}
  108f4c:	e1a00003 	mov	r0, r3
  108f50:	e24bd004 	sub	sp, fp, #4
  108f54:	e8bd8800 	pop	{fp, pc}

00108f58 <unet_accept>:

int unet_accept(int socket, struct sockaddr *addr, socklen_t *addrlen)
{
  108f58:	e92d4800 	push	{fp, lr}
  108f5c:	e28db004 	add	fp, sp, #4
  108f60:	e24dd010 	sub	sp, sp, #16
  108f64:	e50b0008 	str	r0, [fp, #-8]
  108f68:	e50b100c 	str	r1, [fp, #-12]
  108f6c:	e50b2010 	str	r2, [fp, #-16]
    socket = lwip_accept(socket, addr, addrlen);
  108f70:	e51b2010 	ldr	r2, [fp, #-16]
  108f74:	e51b100c 	ldr	r1, [fp, #-12]
  108f78:	e51b0008 	ldr	r0, [fp, #-8]
  108f7c:	eb0020ce 	bl	1112bc <lwip_accept>
  108f80:	e50b0008 	str	r0, [fp, #-8]
    // sock_wqueue_add((void*)get_socket(socket));

    return socket;
  108f84:	e51b3008 	ldr	r3, [fp, #-8]
}
  108f88:	e1a00003 	mov	r0, r3
  108f8c:	e24bd004 	sub	sp, fp, #4
  108f90:	e8bd8800 	pop	{fp, pc}

00108f94 <unet_sendto>:

int unet_sendto(int socket, const void *data, size_t size, int flags, const struct sockaddr *to, socklen_t tolen)
{
  108f94:	e92d4800 	push	{fp, lr}
  108f98:	e28db004 	add	fp, sp, #4
  108f9c:	e24dd020 	sub	sp, sp, #32
  108fa0:	e50b0010 	str	r0, [fp, #-16]
  108fa4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  108fa8:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  108fac:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    int result;
    if(tolen  == 0)
  108fb0:	e59b3008 	ldr	r3, [fp, #8]
  108fb4:	e3530000 	cmp	r3, #0
  108fb8:	1a00000a 	bne	108fe8 <unet_sendto+0x54>
    {
        result = lwip_sendto(socket, data, size, flags, RT_NULL, RT_NULL);
  108fbc:	e3a03000 	mov	r3, #0
  108fc0:	e58d3004 	str	r3, [sp, #4]
  108fc4:	e3a03000 	mov	r3, #0
  108fc8:	e58d3000 	str	r3, [sp]
  108fcc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  108fd0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  108fd4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  108fd8:	e51b0010 	ldr	r0, [fp, #-16]
  108fdc:	eb0026ac 	bl	112a94 <lwip_sendto>
  108fe0:	e50b0008 	str	r0, [fp, #-8]
  108fe4:	ea000009 	b	109010 <unet_sendto+0x7c>
    }
    else
    {
        result = lwip_sendto(socket, data, size, flags, to, tolen);
  108fe8:	e59b3008 	ldr	r3, [fp, #8]
  108fec:	e58d3004 	str	r3, [sp, #4]
  108ff0:	e59b3004 	ldr	r3, [fp, #4]
  108ff4:	e58d3000 	str	r3, [sp]
  108ff8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  108ffc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  109000:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  109004:	e51b0010 	ldr	r0, [fp, #-16]
  109008:	eb0026a1 	bl	112a94 <lwip_sendto>
  10900c:	e50b0008 	str	r0, [fp, #-8]
    }
    if(result <= 0)
  109010:	e51b3008 	ldr	r3, [fp, #-8]
  109014:	e3530000 	cmp	r3, #0
  109018:	ca000005 	bgt	109034 <unet_sendto+0xa0>
    {
        rt_kprintf("%s line %d sendto error\n",__func__,__LINE__);
  10901c:	e3a02058 	mov	r2, #88	; 0x58
  109020:	e3061180 	movw	r1, #24960	; 0x6180
  109024:	e3401014 	movt	r1, #20
  109028:	e3060164 	movw	r0, #24932	; 0x6164
  10902c:	e3400014 	movt	r0, #20
  109030:	ebffe837 	bl	103114 <rt_kprintf>
    }
    return result;
  109034:	e51b3008 	ldr	r3, [fp, #-8]
}
  109038:	e1a00003 	mov	r0, r3
  10903c:	e24bd004 	sub	sp, fp, #4
  109040:	e8bd8800 	pop	{fp, pc}

00109044 <unet_recvfrom>:

int unet_recvfrom(int socket, void *mem, size_t size, int flags, struct sockaddr *from, socklen_t *fromlen)
{
  109044:	e92d4800 	push	{fp, lr}
  109048:	e28db004 	add	fp, sp, #4
  10904c:	e24dd018 	sub	sp, sp, #24
  109050:	e50b0008 	str	r0, [fp, #-8]
  109054:	e50b100c 	str	r1, [fp, #-12]
  109058:	e50b2010 	str	r2, [fp, #-16]
  10905c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    if(from && fromlen)
  109060:	e59b3004 	ldr	r3, [fp, #4]
  109064:	e3530000 	cmp	r3, #0
  109068:	0a00000d 	beq	1090a4 <unet_recvfrom+0x60>
  10906c:	e59b3008 	ldr	r3, [fp, #8]
  109070:	e3530000 	cmp	r3, #0
  109074:	0a00000a 	beq	1090a4 <unet_recvfrom+0x60>
    {
        return lwip_recvfrom(socket, mem, size, flags, from, fromlen);
  109078:	e59b3008 	ldr	r3, [fp, #8]
  10907c:	e58d3004 	str	r3, [sp, #4]
  109080:	e59b3004 	ldr	r3, [fp, #4]
  109084:	e58d3000 	str	r3, [sp]
  109088:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10908c:	e51b2010 	ldr	r2, [fp, #-16]
  109090:	e51b100c 	ldr	r1, [fp, #-12]
  109094:	e51b0008 	ldr	r0, [fp, #-8]
  109098:	eb002312 	bl	111ce8 <lwip_recvfrom>
  10909c:	e1a03000 	mov	r3, r0
  1090a0:	ea000009 	b	1090cc <unet_recvfrom+0x88>
    }
    else
    {
        return lwip_recvfrom(socket, mem, size, flags, RT_NULL, RT_NULL);
  1090a4:	e3a03000 	mov	r3, #0
  1090a8:	e58d3004 	str	r3, [sp, #4]
  1090ac:	e3a03000 	mov	r3, #0
  1090b0:	e58d3000 	str	r3, [sp]
  1090b4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1090b8:	e51b2010 	ldr	r2, [fp, #-16]
  1090bc:	e51b100c 	ldr	r1, [fp, #-12]
  1090c0:	e51b0008 	ldr	r0, [fp, #-8]
  1090c4:	eb002307 	bl	111ce8 <lwip_recvfrom>
  1090c8:	e1a03000 	mov	r3, r0
    }
}
  1090cc:	e1a00003 	mov	r0, r3
  1090d0:	e24bd004 	sub	sp, fp, #4
  1090d4:	e8bd8800 	pop	{fp, pc}

001090d8 <unet_getsockopt>:

int unet_getsockopt(int socket, int level, int optname, void *optval, socklen_t *optlen)
{
  1090d8:	e92d4800 	push	{fp, lr}
  1090dc:	e28db004 	add	fp, sp, #4
  1090e0:	e24dd018 	sub	sp, sp, #24
  1090e4:	e50b0008 	str	r0, [fp, #-8]
  1090e8:	e50b100c 	str	r1, [fp, #-12]
  1090ec:	e50b2010 	str	r2, [fp, #-16]
  1090f0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return lwip_getsockopt(socket, level, optname, optval, optlen);
  1090f4:	e59b3004 	ldr	r3, [fp, #4]
  1090f8:	e58d3000 	str	r3, [sp]
  1090fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109100:	e51b2010 	ldr	r2, [fp, #-16]
  109104:	e51b100c 	ldr	r1, [fp, #-12]
  109108:	e51b0008 	ldr	r0, [fp, #-8]
  10910c:	eb002c0a 	bl	11413c <lwip_getsockopt>
  109110:	e1a03000 	mov	r3, r0
}
  109114:	e1a00003 	mov	r0, r3
  109118:	e24bd004 	sub	sp, fp, #4
  10911c:	e8bd8800 	pop	{fp, pc}

00109120 <unet_setsockopt>:

int unet_setsockopt(int socket, int level, int optname, const void *optval, socklen_t optlen)
{
  109120:	e92d4800 	push	{fp, lr}
  109124:	e28db004 	add	fp, sp, #4
  109128:	e24dd018 	sub	sp, sp, #24
  10912c:	e50b0008 	str	r0, [fp, #-8]
  109130:	e50b100c 	str	r1, [fp, #-12]
  109134:	e50b2010 	str	r2, [fp, #-16]
  109138:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return lwip_setsockopt(socket, level, optname, optval, optlen);
  10913c:	e59b3004 	ldr	r3, [fp, #4]
  109140:	e58d3000 	str	r3, [sp]
  109144:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109148:	e51b2010 	ldr	r2, [fp, #-16]
  10914c:	e51b100c 	ldr	r1, [fp, #-12]
  109150:	e51b0008 	ldr	r0, [fp, #-8]
  109154:	eb002ec0 	bl	114c5c <lwip_setsockopt>
  109158:	e1a03000 	mov	r3, r0
}
  10915c:	e1a00003 	mov	r0, r3
  109160:	e24bd004 	sub	sp, fp, #4
  109164:	e8bd8800 	pop	{fp, pc}

00109168 <unet_shutdown>:

int unet_shutdown(int socket, int how)
{
  109168:	e92d4800 	push	{fp, lr}
  10916c:	e28db004 	add	fp, sp, #4
  109170:	e24dd008 	sub	sp, sp, #8
  109174:	e50b0008 	str	r0, [fp, #-8]
  109178:	e50b100c 	str	r1, [fp, #-12]
    return lwip_shutdown(socket, how);
  10917c:	e51b100c 	ldr	r1, [fp, #-12]
  109180:	e51b0008 	ldr	r0, [fp, #-8]
  109184:	eb002af2 	bl	113d54 <lwip_shutdown>
  109188:	e1a03000 	mov	r3, r0
}
  10918c:	e1a00003 	mov	r0, r3
  109190:	e24bd004 	sub	sp, fp, #4
  109194:	e8bd8800 	pop	{fp, pc}

00109198 <unet_getpeername>:

int unet_getpeername(int socket, struct sockaddr *name, socklen_t *namelen)
{
  109198:	e92d4800 	push	{fp, lr}
  10919c:	e28db004 	add	fp, sp, #4
  1091a0:	e24dd010 	sub	sp, sp, #16
  1091a4:	e50b0008 	str	r0, [fp, #-8]
  1091a8:	e50b100c 	str	r1, [fp, #-12]
  1091ac:	e50b2010 	str	r2, [fp, #-16]
    return lwip_getpeername(socket, name, namelen);
  1091b0:	e51b2010 	ldr	r2, [fp, #-16]
  1091b4:	e51b100c 	ldr	r1, [fp, #-12]
  1091b8:	e51b0008 	ldr	r0, [fp, #-8]
  1091bc:	eb002bc0 	bl	1140c4 <lwip_getpeername>
  1091c0:	e1a03000 	mov	r3, r0
}
  1091c4:	e1a00003 	mov	r0, r3
  1091c8:	e24bd004 	sub	sp, fp, #4
  1091cc:	e8bd8800 	pop	{fp, pc}

001091d0 <unet_getsockname>:

int unet_getsockname(int socket, struct sockaddr *name, socklen_t *namelen)
{
  1091d0:	e92d4800 	push	{fp, lr}
  1091d4:	e28db004 	add	fp, sp, #4
  1091d8:	e24dd010 	sub	sp, sp, #16
  1091dc:	e50b0008 	str	r0, [fp, #-8]
  1091e0:	e50b100c 	str	r1, [fp, #-12]
  1091e4:	e50b2010 	str	r2, [fp, #-16]
    return lwip_getsockname(socket, name, namelen);
  1091e8:	e51b2010 	ldr	r2, [fp, #-16]
  1091ec:	e51b100c 	ldr	r1, [fp, #-12]
  1091f0:	e51b0008 	ldr	r0, [fp, #-8]
  1091f4:	eb002bc1 	bl	114100 <lwip_getsockname>
  1091f8:	e1a03000 	mov	r3, r0
}
  1091fc:	e1a00003 	mov	r0, r3
  109200:	e24bd004 	sub	sp, fp, #4
  109204:	e8bd8800 	pop	{fp, pc}

00109208 <unet_fcntl>:

int unet_fcntl(int socket, int cmd, int val)
{
  109208:	e92d4800 	push	{fp, lr}
  10920c:	e28db004 	add	fp, sp, #4
  109210:	e24dd010 	sub	sp, sp, #16
  109214:	e50b0008 	str	r0, [fp, #-8]
  109218:	e50b100c 	str	r1, [fp, #-12]
  10921c:	e50b2010 	str	r2, [fp, #-16]
    return lwip_fcntl(socket, cmd, val);
  109220:	e51b2010 	ldr	r2, [fp, #-16]
  109224:	e51b100c 	ldr	r1, [fp, #-12]
  109228:	e51b0008 	ldr	r0, [fp, #-8]
  10922c:	eb0031d6 	bl	11598c <lwip_fcntl>
  109230:	e1a03000 	mov	r3, r0
}
  109234:	e1a00003 	mov	r0, r3
  109238:	e24bd004 	sub	sp, fp, #4
  10923c:	e8bd8800 	pop	{fp, pc}

00109240 <unet_ioctl>:

/* Observe the 'real' IOCTL operations in unet 'api/sockets.c' and find that
 * 'argp' is used as an integer pointer. */
int unet_ioctl(int socket, long cmd, void *argp)
{
  109240:	e92d4800 	push	{fp, lr}
  109244:	e28db004 	add	fp, sp, #4
  109248:	e24dd010 	sub	sp, sp, #16
  10924c:	e50b0008 	str	r0, [fp, #-8]
  109250:	e50b100c 	str	r1, [fp, #-12]
  109254:	e50b2010 	str	r2, [fp, #-16]
    return lwip_ioctl(socket, cmd, argp);
  109258:	e51b2010 	ldr	r2, [fp, #-16]
  10925c:	e51b100c 	ldr	r1, [fp, #-12]
  109260:	e51b0008 	ldr	r0, [fp, #-8]
  109264:	eb003121 	bl	1156f0 <lwip_ioctl>
  109268:	e1a03000 	mov	r3, r0
}
  10926c:	e1a00003 	mov	r0, r3
  109270:	e24bd004 	sub	sp, fp, #4
  109274:	e8bd8800 	pop	{fp, pc}

00109278 <unet_gethostbyname>:
#include <stdio.h>
struct hostent* unet_gethostbyname(const char *name)
{
  109278:	e92d4800 	push	{fp, lr}
  10927c:	e28db004 	add	fp, sp, #4
  109280:	e24dd008 	sub	sp, sp, #8
  109284:	e50b0008 	str	r0, [fp, #-8]
    static struct hostent s_hostent, *p_hostent = RT_NULL;
    static char *s_aliases;
    static ip_addr_t s_hostent_addr;
    static ip_addr_t *s_phostent_addr[2];
    static char s_hostname[DNS_MAX_NAME_LENGTH + 1];
    p_hostent = lwip_gethostbyname(name);
  109288:	e51b0008 	ldr	r0, [fp, #-8]
  10928c:	eb001c85 	bl	1104a8 <lwip_gethostbyname>
  109290:	e1a02000 	mov	r2, r0
  109294:	e30d3494 	movw	r3, #54420	; 0xd494
  109298:	e3403014 	movt	r3, #20
  10929c:	e5832000 	str	r2, [r3]
    memset(&s_hostent, 0, sizeof(s_hostent));
  1092a0:	e3a02014 	mov	r2, #20
  1092a4:	e3a01000 	mov	r1, #0
  1092a8:	e30d0498 	movw	r0, #54424	; 0xd498
  1092ac:	e3400014 	movt	r0, #20
  1092b0:	eb00dfef 	bl	141274 <memset>
    /* fill hostent */
    s_hostent_addr = *((ip_addr_t *) p_hostent->h_addr);
  1092b4:	e30d3494 	movw	r3, #54420	; 0xd494
  1092b8:	e3403014 	movt	r3, #20
  1092bc:	e5933000 	ldr	r3, [r3]
  1092c0:	e5933010 	ldr	r3, [r3, #16]
  1092c4:	e5932000 	ldr	r2, [r3]
  1092c8:	e30d34ac 	movw	r3, #54444	; 0xd4ac
  1092cc:	e3403014 	movt	r3, #20
  1092d0:	e5922000 	ldr	r2, [r2]
  1092d4:	e5832000 	str	r2, [r3]
    s_phostent_addr[0] = &s_hostent_addr;
  1092d8:	e30d34b0 	movw	r3, #54448	; 0xd4b0
  1092dc:	e3403014 	movt	r3, #20
  1092e0:	e30d24ac 	movw	r2, #54444	; 0xd4ac
  1092e4:	e3402014 	movt	r2, #20
  1092e8:	e5832000 	str	r2, [r3]
    s_phostent_addr[1] = NULL;
  1092ec:	e30d34b0 	movw	r3, #54448	; 0xd4b0
  1092f0:	e3403014 	movt	r3, #20
  1092f4:	e3a02000 	mov	r2, #0
  1092f8:	e5832004 	str	r2, [r3, #4]
    strncpy(s_hostname, name, DNS_MAX_NAME_LENGTH);
  1092fc:	e3a02c01 	mov	r2, #256	; 0x100
  109300:	e51b1008 	ldr	r1, [fp, #-8]
  109304:	e30d04b8 	movw	r0, #54456	; 0xd4b8
  109308:	e3400014 	movt	r0, #20
  10930c:	eb00e0ba 	bl	1415fc <strncpy>
    s_hostname[DNS_MAX_NAME_LENGTH] = 0;
  109310:	e30d34b8 	movw	r3, #54456	; 0xd4b8
  109314:	e3403014 	movt	r3, #20
  109318:	e3a02000 	mov	r2, #0
  10931c:	e5c32100 	strb	r2, [r3, #256]	; 0x100
    s_hostent.h_name = s_hostname;
  109320:	e30d3498 	movw	r3, #54424	; 0xd498
  109324:	e3403014 	movt	r3, #20
  109328:	e30d24b8 	movw	r2, #54456	; 0xd4b8
  10932c:	e3402014 	movt	r2, #20
  109330:	e5832000 	str	r2, [r3]
    s_aliases = NULL;
  109334:	e30d35bc 	movw	r3, #54716	; 0xd5bc
  109338:	e3403014 	movt	r3, #20
  10933c:	e3a02000 	mov	r2, #0
  109340:	e5832000 	str	r2, [r3]
    s_hostent.h_aliases = &s_aliases;
  109344:	e30d3498 	movw	r3, #54424	; 0xd498
  109348:	e3403014 	movt	r3, #20
  10934c:	e30d25bc 	movw	r2, #54716	; 0xd5bc
  109350:	e3402014 	movt	r2, #20
  109354:	e5832004 	str	r2, [r3, #4]
    s_hostent.h_addrtype = AF_INET;
  109358:	e30d3498 	movw	r3, #54424	; 0xd498
  10935c:	e3403014 	movt	r3, #20
  109360:	e3a02002 	mov	r2, #2
  109364:	e5832008 	str	r2, [r3, #8]
    s_hostent.h_length = sizeof(ip_addr_t);
  109368:	e30d3498 	movw	r3, #54424	; 0xd498
  10936c:	e3403014 	movt	r3, #20
  109370:	e3a02004 	mov	r2, #4
  109374:	e583200c 	str	r2, [r3, #12]
    s_hostent.h_addr_list = (char**)&s_phostent_addr;
  109378:	e30d3498 	movw	r3, #54424	; 0xd498
  10937c:	e3403014 	movt	r3, #20
  109380:	e30d24b0 	movw	r2, #54448	; 0xd4b0
  109384:	e3402014 	movt	r2, #20
  109388:	e5832010 	str	r2, [r3, #16]
    p_hostent = &s_hostent;
  10938c:	e30d3494 	movw	r3, #54420	; 0xd494
  109390:	e3403014 	movt	r3, #20
  109394:	e30d2498 	movw	r2, #54424	; 0xd498
  109398:	e3402014 	movt	r2, #20
  10939c:	e5832000 	str	r2, [r3]

    return p_hostent;
  1093a0:	e30d3494 	movw	r3, #54420	; 0xd494
  1093a4:	e3403014 	movt	r3, #20
  1093a8:	e5933000 	ldr	r3, [r3]
}
  1093ac:	e1a00003 	mov	r0, r3
  1093b0:	e24bd004 	sub	sp, fp, #4
  1093b4:	e8bd8800 	pop	{fp, pc}

001093b8 <unet_gethostbyname_r>:

int unet_gethostbyname_r(const char *name, struct hostent *ret, char *buf, size_t buflen, struct hostent **result, int *h_errnop)
{
  1093b8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1093bc:	e28db000 	add	fp, sp, #0
  1093c0:	e24dd014 	sub	sp, sp, #20
  1093c4:	e50b0008 	str	r0, [fp, #-8]
  1093c8:	e50b100c 	str	r1, [fp, #-12]
  1093cc:	e50b2010 	str	r2, [fp, #-16]
  1093d0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return 0;
  1093d4:	e3a03000 	mov	r3, #0
}
  1093d8:	e1a00003 	mov	r0, r3
  1093dc:	e28bd000 	add	sp, fp, #0
  1093e0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1093e4:	e12fff1e 	bx	lr

001093e8 <unet_getaddrinfo>:

int unet_getaddrinfo(const char *nodename, const char *servname, const struct addrinfo *hints, struct addrinfo **res)
{
  1093e8:	e92d4800 	push	{fp, lr}
  1093ec:	e28db004 	add	fp, sp, #4
  1093f0:	e24dd010 	sub	sp, sp, #16
  1093f4:	e50b0008 	str	r0, [fp, #-8]
  1093f8:	e50b100c 	str	r1, [fp, #-12]
  1093fc:	e50b2010 	str	r2, [fp, #-16]
  109400:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return lwip_getaddrinfo(nodename, servname, hints, res);
  109404:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109408:	e51b2010 	ldr	r2, [fp, #-16]
  10940c:	e51b100c 	ldr	r1, [fp, #-12]
  109410:	e51b0008 	ldr	r0, [fp, #-8]
  109414:	eb001cf1 	bl	1107e0 <lwip_getaddrinfo>
  109418:	e1a03000 	mov	r3, r0
}
  10941c:	e1a00003 	mov	r0, r3
  109420:	e24bd004 	sub	sp, fp, #4
  109424:	e8bd8800 	pop	{fp, pc}

00109428 <unet_freeaddrinfo>:

void unet_freeaddrinfo(struct addrinfo *ai)
{
  109428:	e92d4800 	push	{fp, lr}
  10942c:	e28db004 	add	fp, sp, #4
  109430:	e24dd008 	sub	sp, sp, #8
  109434:	e50b0008 	str	r0, [fp, #-8]
    lwip_freeaddrinfo(ai);
  109438:	e51b0008 	ldr	r0, [fp, #-8]
  10943c:	eb001cd4 	bl	110794 <lwip_freeaddrinfo>
}
  109440:	e320f000 	nop	{0}
  109444:	e24bd004 	sub	sp, fp, #4
  109448:	e8bd8800 	pop	{fp, pc}

0010944c <rt_list_init>:
{
  10944c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  109450:	e28db000 	add	fp, sp, #0
  109454:	e24dd00c 	sub	sp, sp, #12
  109458:	e50b0008 	str	r0, [fp, #-8]
    l->next = l->prev = l;
  10945c:	e51b3008 	ldr	r3, [fp, #-8]
  109460:	e51b2008 	ldr	r2, [fp, #-8]
  109464:	e5832004 	str	r2, [r3, #4]
  109468:	e51b3008 	ldr	r3, [fp, #-8]
  10946c:	e5932004 	ldr	r2, [r3, #4]
  109470:	e51b3008 	ldr	r3, [fp, #-8]
  109474:	e5832000 	str	r2, [r3]
}
  109478:	e320f000 	nop	{0}
  10947c:	e28bd000 	add	sp, fp, #0
  109480:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  109484:	e12fff1e 	bx	lr

00109488 <accept_internal>:
#include "dfs_net.h"

#include "sal_socket.h"

int accept_internal(int s, struct sockaddr *addr, socklen_t *addrlen)
{
  109488:	e92d4810 	push	{r4, fp, lr}
  10948c:	e28db008 	add	fp, sp, #8
  109490:	e24dd024 	sub	sp, sp, #36	; 0x24
  109494:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  109498:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  10949c:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
    int new_socket = -1;
  1094a0:	e3e03000 	mvn	r3, #0
  1094a4:	e50b3010 	str	r3, [fp, #-16]
    int socket = dfs_net_getsocket(s);
  1094a8:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1094ac:	eb000352 	bl	10a1fc <dfs_net_getsocket>
  1094b0:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec

    new_socket = sal_accept(socket, addr, addrlen);
  1094b4:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  1094b8:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  1094bc:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1094c0:	ebfff95f 	bl	107a44 <sal_accept>
  1094c4:	e50b0010 	str	r0, [fp, #-16]
    if (new_socket != -1)
  1094c8:	e51b3010 	ldr	r3, [fp, #-16]
  1094cc:	e3730001 	cmn	r3, #1
  1094d0:	0a000050 	beq	109618 <accept_internal+0x190>
        /* this is a new socket, create it in file system fd */
        int fd;
        struct dfs_fd *d;

        /* allocate a fd */
        fd = fd_new();
  1094d4:	eb000272 	bl	109ea4 <fd_new>
  1094d8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
        if (fd < 0)
  1094dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1094e0:	e3530000 	cmp	r3, #0
  1094e4:	aa000003 	bge	1094f8 <accept_internal+0x70>
        {
            sal_closesocket(new_socket);
  1094e8:	e51b0010 	ldr	r0, [fp, #-16]
  1094ec:	ebfffc25 	bl	108588 <sal_closesocket>
            return -ENOMEM;
  1094f0:	e3e0300b 	mvn	r3, #11
  1094f4:	ea000048 	b	10961c <accept_internal+0x194>
        }

        d = fd_get(fd);
  1094f8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1094fc:	eb00029d 	bl	109f78 <fd_get>
  109500:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
        if(d)
  109504:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109508:	e3530000 	cmp	r3, #0
  10950c:	0a00003d 	beq	109608 <accept_internal+0x180>
        {
            /* this is a socket fd */
            d->fnode = (struct dfs_fnode *)rt_malloc(sizeof(struct dfs_fnode));
  109510:	e3a00028 	mov	r0, #40	; 0x28
  109514:	ebffe69e 	bl	102f94 <rt_malloc>
  109518:	e1a02000 	mov	r2, r0
  10951c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109520:	e5832018 	str	r2, [r3, #24]
            if (!d->fnode)
  109524:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109528:	e5933018 	ldr	r3, [r3, #24]
  10952c:	e3530000 	cmp	r3, #0
  109530:	1a000003 	bne	109544 <accept_internal+0xbc>
            {
                /* release fd */
                fd_release(fd);
  109534:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  109538:	eb0002ed 	bl	10a0f4 <fd_release>
                return -ENOMEM;
  10953c:	e3e0300b 	mvn	r3, #11
  109540:	ea000035 	b	10961c <accept_internal+0x194>
            }
            rt_memset(d->fnode, 0, sizeof(struct dfs_fnode));
  109544:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109548:	e5933018 	ldr	r3, [r3, #24]
  10954c:	e3a02028 	mov	r2, #40	; 0x28
  109550:	e3a01000 	mov	r1, #0
  109554:	e1a00003 	mov	r0, r3
  109558:	ebffe75a 	bl	1032c8 <rt_memset>
            rt_list_init(&d->fnode->list);
  10955c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109560:	e5933018 	ldr	r3, [r3, #24]
  109564:	e2833010 	add	r3, r3, #16
  109568:	e1a00003 	mov	r0, r3
  10956c:	ebffffb6 	bl	10944c <rt_list_init>

            d->fnode->type = FT_SOCKET;
  109570:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109574:	e5933018 	ldr	r3, [r3, #24]
  109578:	e3a02001 	mov	r2, #1
  10957c:	e1c320b0 	strh	r2, [r3]
            d->fnode->path = NULL;
  109580:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109584:	e5933018 	ldr	r3, [r3, #24]
  109588:	e3a02000 	mov	r2, #0
  10958c:	e5832004 	str	r2, [r3, #4]
            d->fnode->fullpath = NULL;
  109590:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109594:	e5933018 	ldr	r3, [r3, #24]
  109598:	e3a02000 	mov	r2, #0
  10959c:	e5832008 	str	r2, [r3, #8]
            d->fnode->ref_count = 1;
  1095a0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1095a4:	e5933018 	ldr	r3, [r3, #24]
  1095a8:	e3a02001 	mov	r2, #1
  1095ac:	e583200c 	str	r2, [r3, #12]
            d->fnode->fops = dfs_net_get_fops();
  1095b0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1095b4:	e5934018 	ldr	r4, [r3, #24]
  1095b8:	eb0003ae 	bl	10a478 <dfs_net_get_fops>
  1095bc:	e1a03000 	mov	r3, r0
  1095c0:	e5843018 	str	r3, [r4, #24]
            d->flags = O_RDWR; /* set flags as read and write */
  1095c4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1095c8:	e3a02002 	mov	r2, #2
  1095cc:	e5832004 	str	r2, [r3, #4]
            d->fnode->size = 0;
  1095d0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1095d4:	e5933018 	ldr	r3, [r3, #24]
  1095d8:	e3a02000 	mov	r2, #0
  1095dc:	e5832020 	str	r2, [r3, #32]
            d->pos = 0;
  1095e0:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1095e4:	e3a02000 	mov	r2, #0
  1095e8:	e3a03000 	mov	r3, #0
  1095ec:	e1c121f0 	strd	r2, [r1, #16]

            /* set socket to the data of dfs_fd */
            d->fnode->data = (void *)(size_t)new_socket;
  1095f0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1095f4:	e5933018 	ldr	r3, [r3, #24]
  1095f8:	e51b2010 	ldr	r2, [fp, #-16]
  1095fc:	e5832024 	str	r2, [r3, #36]	; 0x24

            return fd;
  109600:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  109604:	ea000004 	b	10961c <accept_internal+0x194>
        }

        sal_closesocket(new_socket);
  109608:	e51b0010 	ldr	r0, [fp, #-16]
  10960c:	ebfffbdd 	bl	108588 <sal_closesocket>
        return -ENOMEM;
  109610:	e3e0300b 	mvn	r3, #11
  109614:	ea000000 	b	10961c <accept_internal+0x194>
    }

    return -1;
  109618:	e3e03000 	mvn	r3, #0
}
  10961c:	e1a00003 	mov	r0, r3
  109620:	e24bd008 	sub	sp, fp, #8
  109624:	e8bd8810 	pop	{r4, fp, pc}

00109628 <bind_internal>:

int bind_internal(int s, const struct sockaddr *name, socklen_t namelen)
{
  109628:	e92d4800 	push	{fp, lr}
  10962c:	e28db004 	add	fp, sp, #4
  109630:	e24dd018 	sub	sp, sp, #24
  109634:	e50b0010 	str	r0, [fp, #-16]
  109638:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10963c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    int socket = dfs_net_getsocket(s);
  109640:	e51b0010 	ldr	r0, [fp, #-16]
  109644:	eb0002ec 	bl	10a1fc <dfs_net_getsocket>
  109648:	e50b0008 	str	r0, [fp, #-8]
        server_addr.sin_addr.s_addr = inet_addr("127.0.0.1");
        return sal_bind(socket, (struct sockaddr *)&server_addr, namelen);
    }
#endif /* SAL_USING_AF_UNIX */

    return sal_bind(socket, name, namelen);
  10964c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  109650:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  109654:	e51b0008 	ldr	r0, [fp, #-8]
  109658:	ebfff973 	bl	107c2c <sal_bind>
  10965c:	e1a03000 	mov	r3, r0
}
  109660:	e1a00003 	mov	r0, r3
  109664:	e24bd004 	sub	sp, fp, #4
  109668:	e8bd8800 	pop	{fp, pc}

0010966c <connect_internal>:

int connect_internal(int s, const struct sockaddr *name, socklen_t namelen)
{
  10966c:	e92d4800 	push	{fp, lr}
  109670:	e28db004 	add	fp, sp, #4
  109674:	e24dd018 	sub	sp, sp, #24
  109678:	e50b0010 	str	r0, [fp, #-16]
  10967c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  109680:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    int socket = dfs_net_getsocket(s);
  109684:	e51b0010 	ldr	r0, [fp, #-16]
  109688:	eb0002db 	bl	10a1fc <dfs_net_getsocket>
  10968c:	e50b0008 	str	r0, [fp, #-8]
        server_addr.sin_addr.s_addr = inet_addr("127.0.0.1");
        return sal_connect(socket, (struct sockaddr *)&server_addr, namelen);
    }
#endif /* SAL_USING_AF_UNIX */

    return sal_connect(socket, name, namelen);
  109690:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  109694:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  109698:	e51b0008 	ldr	r0, [fp, #-8]
  10969c:	ebfffaad 	bl	108158 <sal_connect>
  1096a0:	e1a03000 	mov	r3, r0
}
  1096a4:	e1a00003 	mov	r0, r3
  1096a8:	e24bd004 	sub	sp, fp, #4
  1096ac:	e8bd8800 	pop	{fp, pc}

001096b0 <setsockopt_internal>:

int setsockopt_internal(int s, int level, int optname, const void *optval, socklen_t optlen)
{
  1096b0:	e92d4800 	push	{fp, lr}
  1096b4:	e28db004 	add	fp, sp, #4
  1096b8:	e24dd020 	sub	sp, sp, #32
  1096bc:	e50b0010 	str	r0, [fp, #-16]
  1096c0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1096c4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  1096c8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    int socket = dfs_net_getsocket(s);
  1096cc:	e51b0010 	ldr	r0, [fp, #-16]
  1096d0:	eb0002c9 	bl	10a1fc <dfs_net_getsocket>
  1096d4:	e50b0008 	str	r0, [fp, #-8]

    return sal_setsockopt(socket, level, optname, optval, optlen);
  1096d8:	e59b3004 	ldr	r3, [fp, #4]
  1096dc:	e58d3000 	str	r3, [sp]
  1096e0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1096e4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1096e8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1096ec:	e51b0008 	ldr	r0, [fp, #-8]
  1096f0:	ebfffa6e 	bl	1080b0 <sal_setsockopt>
  1096f4:	e1a03000 	mov	r3, r0
}
  1096f8:	e1a00003 	mov	r0, r3
  1096fc:	e24bd004 	sub	sp, fp, #4
  109700:	e8bd8800 	pop	{fp, pc}

00109704 <listen_internal>:

int listen_internal(int s, int backlog)
{
  109704:	e92d4800 	push	{fp, lr}
  109708:	e28db004 	add	fp, sp, #4
  10970c:	e24dd010 	sub	sp, sp, #16
  109710:	e50b0010 	str	r0, [fp, #-16]
  109714:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int socket = dfs_net_getsocket(s);
  109718:	e51b0010 	ldr	r0, [fp, #-16]
  10971c:	eb0002b6 	bl	10a1fc <dfs_net_getsocket>
  109720:	e50b0008 	str	r0, [fp, #-8]

    return sal_listen(socket, backlog);
  109724:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  109728:	e51b0008 	ldr	r0, [fp, #-8]
  10972c:	ebfffab8 	bl	108214 <sal_listen>
  109730:	e1a03000 	mov	r3, r0
}
  109734:	e1a00003 	mov	r0, r3
  109738:	e24bd004 	sub	sp, fp, #4
  10973c:	e8bd8800 	pop	{fp, pc}

00109740 <recv_internal>:


int recv_internal(int s, void *mem, size_t len, int flags)
{
  109740:	e92d4800 	push	{fp, lr}
  109744:	e28db004 	add	fp, sp, #4
  109748:	e24dd020 	sub	sp, sp, #32
  10974c:	e50b0010 	str	r0, [fp, #-16]
  109750:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  109754:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  109758:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    int socket = dfs_net_getsocket(s);
  10975c:	e51b0010 	ldr	r0, [fp, #-16]
  109760:	eb0002a5 	bl	10a1fc <dfs_net_getsocket>
  109764:	e50b0008 	str	r0, [fp, #-8]

    return sal_recvfrom(socket, mem, len, flags, NULL, NULL);
  109768:	e3a03000 	mov	r3, #0
  10976c:	e58d3004 	str	r3, [sp, #4]
  109770:	e3a03000 	mov	r3, #0
  109774:	e58d3000 	str	r3, [sp]
  109778:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10977c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  109780:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  109784:	e51b0008 	ldr	r0, [fp, #-8]
  109788:	ebfffac5 	bl	1082a4 <sal_recvfrom>
  10978c:	e1a03000 	mov	r3, r0
}
  109790:	e1a00003 	mov	r0, r3
  109794:	e24bd004 	sub	sp, fp, #4
  109798:	e8bd8800 	pop	{fp, pc}

0010979c <recvfrom_internal>:

int recvfrom_internal(int s, void *mem, size_t len, int flags,
             struct sockaddr *from, socklen_t *fromlen)
{
  10979c:	e92d4800 	push	{fp, lr}
  1097a0:	e28db004 	add	fp, sp, #4
  1097a4:	e24dd020 	sub	sp, sp, #32
  1097a8:	e50b0010 	str	r0, [fp, #-16]
  1097ac:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1097b0:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  1097b4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    int socket = dfs_net_getsocket(s);
  1097b8:	e51b0010 	ldr	r0, [fp, #-16]
  1097bc:	eb00028e 	bl	10a1fc <dfs_net_getsocket>
  1097c0:	e50b0008 	str	r0, [fp, #-8]

    return sal_recvfrom(socket, mem, len, flags, from, fromlen);
  1097c4:	e59b3008 	ldr	r3, [fp, #8]
  1097c8:	e58d3004 	str	r3, [sp, #4]
  1097cc:	e59b3004 	ldr	r3, [fp, #4]
  1097d0:	e58d3000 	str	r3, [sp]
  1097d4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1097d8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1097dc:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1097e0:	e51b0008 	ldr	r0, [fp, #-8]
  1097e4:	ebfffaae 	bl	1082a4 <sal_recvfrom>
  1097e8:	e1a03000 	mov	r3, r0
}
  1097ec:	e1a00003 	mov	r0, r3
  1097f0:	e24bd004 	sub	sp, fp, #4
  1097f4:	e8bd8800 	pop	{fp, pc}

001097f8 <send_internal>:

int send_internal(int s, const void *dataptr, size_t size, int flags)
{
  1097f8:	e92d4800 	push	{fp, lr}
  1097fc:	e28db004 	add	fp, sp, #4
  109800:	e24dd020 	sub	sp, sp, #32
  109804:	e50b0010 	str	r0, [fp, #-16]
  109808:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10980c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  109810:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    int socket = dfs_net_getsocket(s);
  109814:	e51b0010 	ldr	r0, [fp, #-16]
  109818:	eb000277 	bl	10a1fc <dfs_net_getsocket>
  10981c:	e50b0008 	str	r0, [fp, #-8]

    return sal_sendto(socket, dataptr, size, flags, NULL, 0);
  109820:	e3a03000 	mov	r3, #0
  109824:	e58d3004 	str	r3, [sp, #4]
  109828:	e3a03000 	mov	r3, #0
  10982c:	e58d3000 	str	r3, [sp]
  109830:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109834:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  109838:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10983c:	e51b0008 	ldr	r0, [fp, #-8]
  109840:	ebfffacb 	bl	108374 <sal_sendto>
  109844:	e1a03000 	mov	r3, r0
}
  109848:	e1a00003 	mov	r0, r3
  10984c:	e24bd004 	sub	sp, fp, #4
  109850:	e8bd8800 	pop	{fp, pc}

00109854 <sendto_internal>:

int sendto_internal(int s, const void *dataptr, size_t size, int flags,
           const struct sockaddr *to, socklen_t tolen)
{
  109854:	e92d4800 	push	{fp, lr}
  109858:	e28db004 	add	fp, sp, #4
  10985c:	e24dd020 	sub	sp, sp, #32
  109860:	e50b0010 	str	r0, [fp, #-16]
  109864:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  109868:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  10986c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    int socket = dfs_net_getsocket(s);
  109870:	e51b0010 	ldr	r0, [fp, #-16]
  109874:	eb000260 	bl	10a1fc <dfs_net_getsocket>
  109878:	e50b0008 	str	r0, [fp, #-8]

    return sal_sendto(socket, dataptr, size, flags, to, tolen);
  10987c:	e59b3008 	ldr	r3, [fp, #8]
  109880:	e58d3004 	str	r3, [sp, #4]
  109884:	e59b3004 	ldr	r3, [fp, #4]
  109888:	e58d3000 	str	r3, [sp]
  10988c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109890:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  109894:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  109898:	e51b0008 	ldr	r0, [fp, #-8]
  10989c:	ebfffab4 	bl	108374 <sal_sendto>
  1098a0:	e1a03000 	mov	r3, r0
}
  1098a4:	e1a00003 	mov	r0, r3
  1098a8:	e24bd004 	sub	sp, fp, #4
  1098ac:	e8bd8800 	pop	{fp, pc}

001098b0 <socket_internal>:

int socket_internal(int domain, int type, int protocol)
{
  1098b0:	e92d4810 	push	{r4, fp, lr}
  1098b4:	e28db008 	add	fp, sp, #8
  1098b8:	e24dd024 	sub	sp, sp, #36	; 0x24
  1098bc:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  1098c0:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  1098c4:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
    int fd;
    int socket;
    struct dfs_fd *d;

    /* allocate a fd */
    fd = fd_new();
  1098c8:	eb000175 	bl	109ea4 <fd_new>
  1098cc:	e50b0010 	str	r0, [fp, #-16]
    if (fd < 0)
  1098d0:	e51b3010 	ldr	r3, [fp, #-16]
  1098d4:	e3530000 	cmp	r3, #0
  1098d8:	aa000001 	bge	1098e4 <socket_internal+0x34>
    {
        return -ENOMEM;
  1098dc:	e3e0300b 	mvn	r3, #11
  1098e0:	ea00004f 	b	109a24 <socket_internal+0x174>
    }
    d = fd_get(fd);
  1098e4:	e51b0010 	ldr	r0, [fp, #-16]
  1098e8:	eb0001a2 	bl	109f78 <fd_get>
  1098ec:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    d->fnode = (struct dfs_fnode *)rt_malloc(sizeof(struct dfs_fnode));
  1098f0:	e3a00028 	mov	r0, #40	; 0x28
  1098f4:	ebffe5a6 	bl	102f94 <rt_malloc>
  1098f8:	e1a02000 	mov	r2, r0
  1098fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109900:	e5832018 	str	r2, [r3, #24]
    if (!d->fnode)
  109904:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109908:	e5933018 	ldr	r3, [r3, #24]
  10990c:	e3530000 	cmp	r3, #0
  109910:	1a000003 	bne	109924 <socket_internal+0x74>
    {
        /* release fd */
        fd_release(fd);
  109914:	e51b0010 	ldr	r0, [fp, #-16]
  109918:	eb0001f5 	bl	10a0f4 <fd_release>
        return -ENOMEM;
  10991c:	e3e0300b 	mvn	r3, #11
  109920:	ea00003f 	b	109a24 <socket_internal+0x174>
    {
        domain = AF_INET;
    }
#endif /* SAL_USING_AF_UNIX */
    /* create socket  and then put it to the dfs_fd */
    socket = sal_socket(domain, type, protocol);
  109924:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  109928:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  10992c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  109930:	ebfffac3 	bl	108444 <sal_socket>
  109934:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    if (socket >= 0)
  109938:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10993c:	e3530000 	cmp	r3, #0
  109940:	ba000030 	blt	109a08 <socket_internal+0x158>
    {
        rt_memset(d->fnode, 0, sizeof(struct dfs_fnode));
  109944:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109948:	e5933018 	ldr	r3, [r3, #24]
  10994c:	e3a02028 	mov	r2, #40	; 0x28
  109950:	e3a01000 	mov	r1, #0
  109954:	e1a00003 	mov	r0, r3
  109958:	ebffe65a 	bl	1032c8 <rt_memset>
        rt_list_init(&d->fnode->list);
  10995c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109960:	e5933018 	ldr	r3, [r3, #24]
  109964:	e2833010 	add	r3, r3, #16
  109968:	e1a00003 	mov	r0, r3
  10996c:	ebfffeb6 	bl	10944c <rt_list_init>
        /* this is a socket fd */
        d->fnode->type = FT_SOCKET;
  109970:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109974:	e5933018 	ldr	r3, [r3, #24]
  109978:	e3a02001 	mov	r2, #1
  10997c:	e1c320b0 	strh	r2, [r3]
        d->fnode->path = NULL;
  109980:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109984:	e5933018 	ldr	r3, [r3, #24]
  109988:	e3a02000 	mov	r2, #0
  10998c:	e5832004 	str	r2, [r3, #4]
        d->fnode->fullpath = NULL;
  109990:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109994:	e5933018 	ldr	r3, [r3, #24]
  109998:	e3a02000 	mov	r2, #0
  10999c:	e5832008 	str	r2, [r3, #8]
        d->fnode->ref_count = 1;
  1099a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1099a4:	e5933018 	ldr	r3, [r3, #24]
  1099a8:	e3a02001 	mov	r2, #1
  1099ac:	e583200c 	str	r2, [r3, #12]
        d->fnode->fops = dfs_net_get_fops();
  1099b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1099b4:	e5934018 	ldr	r4, [r3, #24]
  1099b8:	eb0002ae 	bl	10a478 <dfs_net_get_fops>
  1099bc:	e1a03000 	mov	r3, r0
  1099c0:	e5843018 	str	r3, [r4, #24]

        d->flags = O_RDWR; /* set flags as read and write */
  1099c4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1099c8:	e3a02002 	mov	r2, #2
  1099cc:	e5832004 	str	r2, [r3, #4]
        d->fnode->size = 0;
  1099d0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1099d4:	e5933018 	ldr	r3, [r3, #24]
  1099d8:	e3a02000 	mov	r2, #0
  1099dc:	e5832020 	str	r2, [r3, #32]
        d->pos = 0;
  1099e0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1099e4:	e3a02000 	mov	r2, #0
  1099e8:	e3a03000 	mov	r3, #0
  1099ec:	e1c121f0 	strd	r2, [r1, #16]

        /* set socket to the data of dfs_fd */
        d->fnode->data = (void *)(size_t)socket;
  1099f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1099f4:	e5933018 	ldr	r3, [r3, #24]
  1099f8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1099fc:	e5832024 	str	r2, [r3, #36]	; 0x24
        /* release fd */
        fd_release(fd);
        return -ENOMEM;
    }

    return fd;
  109a00:	e51b3010 	ldr	r3, [fp, #-16]
  109a04:	ea000006 	b	109a24 <socket_internal+0x174>
        rt_free(d->fnode);
  109a08:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109a0c:	e5933018 	ldr	r3, [r3, #24]
  109a10:	e1a00003 	mov	r0, r3
  109a14:	ebffe568 	bl	102fbc <rt_free>
        fd_release(fd);
  109a18:	e51b0010 	ldr	r0, [fp, #-16]
  109a1c:	eb0001b4 	bl	10a0f4 <fd_release>
        return -ENOMEM;
  109a20:	e3e0300b 	mvn	r3, #11
  109a24:	e1a00003 	mov	r0, r3
  109a28:	e24bd008 	sub	sp, fp, #8
  109a2c:	e8bd8810 	pop	{r4, fp, pc}

00109a30 <dfs_init>:

/**
 * this function will initialize device file system.
 */
int dfs_init(void)
{
  109a30:	e92d4800 	push	{fp, lr}
  109a34:	e28db004 	add	fp, sp, #4
    static rt_bool_t init_ok = RT_FALSE;

    if (init_ok)
  109a38:	e30d3618 	movw	r3, #54808	; 0xd618
  109a3c:	e3403014 	movt	r3, #20
  109a40:	e5933000 	ldr	r3, [r3]
  109a44:	e3530000 	cmp	r3, #0
  109a48:	0a000004 	beq	109a60 <dfs_init+0x30>
    {
        rt_kprintf("dfs already init.\n");
  109a4c:	e306018c 	movw	r0, #24972	; 0x618c
  109a50:	e3400014 	movt	r0, #20
  109a54:	ebffe5ae 	bl	103114 <rt_kprintf>
        return 0;
  109a58:	e3a03000 	mov	r3, #0
  109a5c:	ea000016 	b	109abc <dfs_init+0x8c>
    }

    /* init fnode hash table */
    dfs_fnode_mgr_init();
  109a60:	eb0001c6 	bl	10a180 <dfs_fnode_mgr_init>

    /* clean fd table */
    memset(&_fdtab, 0, sizeof(_fdtab));
  109a64:	e3a02008 	mov	r2, #8
  109a68:	e3a01000 	mov	r1, #0
  109a6c:	e30d0610 	movw	r0, #54800	; 0xd610
  109a70:	e3400014 	movt	r0, #20
  109a74:	eb00ddfe 	bl	141274 <memset>

    /* create device filesystem lock */
    rt_mutex_init(&fslock, "fslock", RT_IPC_FLAG_FIFO);
  109a78:	e3a02000 	mov	r2, #0
  109a7c:	e30611a0 	movw	r1, #24992	; 0x61a0
  109a80:	e3401014 	movt	r1, #20
  109a84:	e30d05c0 	movw	r0, #54720	; 0xd5c0
  109a88:	e3400014 	movt	r0, #20
  109a8c:	ebffdcad 	bl	100d48 <rt_mutex_init>
    rt_mutex_init(&fdlock, "fdlock", RT_IPC_FLAG_FIFO);
  109a90:	e3a02000 	mov	r2, #0
  109a94:	e30611a8 	movw	r1, #25000	; 0x61a8
  109a98:	e3401014 	movt	r1, #20
  109a9c:	e30d05e8 	movw	r0, #54760	; 0xd5e8
  109aa0:	e3400014 	movt	r0, #20
  109aa4:	ebffdca7 	bl	100d48 <rt_mutex_init>

    init_ok = RT_TRUE;
  109aa8:	e30d3618 	movw	r3, #54808	; 0xd618
  109aac:	e3403014 	movt	r3, #20
  109ab0:	e3a02001 	mov	r2, #1
  109ab4:	e5832000 	str	r2, [r3]

    return 0;
  109ab8:	e3a03000 	mov	r3, #0
}
  109abc:	e1a00003 	mov	r0, r3
  109ac0:	e8bd8800 	pop	{fp, pc}

00109ac4 <dfs_lock>:
 * this function will lock device file system.
 *
 * @note please don't invoke it on ISR.
 */
void dfs_lock(void)
{
  109ac4:	e92d4800 	push	{fp, lr}
  109ac8:	e28db004 	add	fp, sp, #4
  109acc:	e24dd008 	sub	sp, sp, #8
    rt_err_t result = -RT_EBUSY;
  109ad0:	e3e03006 	mvn	r3, #6
  109ad4:	e50b3008 	str	r3, [fp, #-8]

    while (result == -RT_EBUSY)
  109ad8:	ea000004 	b	109af0 <dfs_lock+0x2c>
    {
        result = rt_mutex_take(&fslock, RT_WAITING_FOREVER);
  109adc:	e3e01000 	mvn	r1, #0
  109ae0:	e30d05c0 	movw	r0, #54720	; 0xd5c0
  109ae4:	e3400014 	movt	r0, #20
  109ae8:	ebffdd04 	bl	100f00 <rt_mutex_take>
  109aec:	e50b0008 	str	r0, [fp, #-8]
    while (result == -RT_EBUSY)
  109af0:	e51b3008 	ldr	r3, [fp, #-8]
  109af4:	e3730007 	cmn	r3, #7
  109af8:	0afffff7 	beq	109adc <dfs_lock+0x18>
    }

    if (result != RT_EOK)
  109afc:	e51b3008 	ldr	r3, [fp, #-8]
  109b00:	e3530000 	cmp	r3, #0
  109b04:	0a000005 	beq	109b20 <dfs_lock+0x5c>
    {
        RT_ASSERT(0);
  109b08:	e3a0203d 	mov	r2, #61	; 0x3d
  109b0c:	e306121c 	movw	r1, #25116	; 0x621c
  109b10:	e3401014 	movt	r1, #20
  109b14:	e30601b0 	movw	r0, #25008	; 0x61b0
  109b18:	e3400014 	movt	r0, #20
  109b1c:	ebffe69d 	bl	103598 <rt_assert_handler>
    }
}
  109b20:	e320f000 	nop	{0}
  109b24:	e24bd004 	sub	sp, fp, #4
  109b28:	e8bd8800 	pop	{fp, pc}

00109b2c <dfs_fd_lock>:

void dfs_fd_lock(void)
{
  109b2c:	e92d4800 	push	{fp, lr}
  109b30:	e28db004 	add	fp, sp, #4
  109b34:	e24dd008 	sub	sp, sp, #8
    rt_err_t result = -RT_EBUSY;
  109b38:	e3e03006 	mvn	r3, #6
  109b3c:	e50b3008 	str	r3, [fp, #-8]

    while (result == -RT_EBUSY)
  109b40:	ea000004 	b	109b58 <dfs_fd_lock+0x2c>
    {
        result = rt_mutex_take(&fdlock, RT_WAITING_FOREVER);
  109b44:	e3e01000 	mvn	r1, #0
  109b48:	e30d05e8 	movw	r0, #54760	; 0xd5e8
  109b4c:	e3400014 	movt	r0, #20
  109b50:	ebffdcea 	bl	100f00 <rt_mutex_take>
  109b54:	e50b0008 	str	r0, [fp, #-8]
    while (result == -RT_EBUSY)
  109b58:	e51b3008 	ldr	r3, [fp, #-8]
  109b5c:	e3730007 	cmn	r3, #7
  109b60:	0afffff7 	beq	109b44 <dfs_fd_lock+0x18>
    }

    if (result != RT_EOK)
  109b64:	e51b3008 	ldr	r3, [fp, #-8]
  109b68:	e3530000 	cmp	r3, #0
  109b6c:	0a000005 	beq	109b88 <dfs_fd_lock+0x5c>
    {
        RT_ASSERT(0);
  109b70:	e3a0204c 	mov	r2, #76	; 0x4c
  109b74:	e3061228 	movw	r1, #25128	; 0x6228
  109b78:	e3401014 	movt	r1, #20
  109b7c:	e30601b0 	movw	r0, #25008	; 0x61b0
  109b80:	e3400014 	movt	r0, #20
  109b84:	ebffe683 	bl	103598 <rt_assert_handler>
    }
}
  109b88:	e320f000 	nop	{0}
  109b8c:	e24bd004 	sub	sp, fp, #4
  109b90:	e8bd8800 	pop	{fp, pc}

00109b94 <dfs_unlock>:
 * this function will lock device file system.
 *
 * @note please don't invoke it on ISR.
 */
void dfs_unlock(void)
{
  109b94:	e92d4800 	push	{fp, lr}
  109b98:	e28db004 	add	fp, sp, #4
    rt_mutex_release(&fslock);
  109b9c:	e30d05c0 	movw	r0, #54720	; 0xd5c0
  109ba0:	e3400014 	movt	r0, #20
  109ba4:	ebffdcf3 	bl	100f78 <rt_mutex_release>
}
  109ba8:	e320f000 	nop	{0}
  109bac:	e8bd8800 	pop	{fp, pc}

00109bb0 <dfs_fd_unlock>:

void dfs_fd_unlock(void)
{
  109bb0:	e92d4800 	push	{fp, lr}
  109bb4:	e28db004 	add	fp, sp, #4
    rt_mutex_release(&fdlock);
  109bb8:	e30d05e8 	movw	r0, #54760	; 0xd5e8
  109bbc:	e3400014 	movt	r0, #20
  109bc0:	ebffdcec 	bl	100f78 <rt_mutex_release>
}
  109bc4:	e320f000 	nop	{0}
  109bc8:	e8bd8800 	pop	{fp, pc}

00109bcc <fd_slot_expand>:

static int fd_slot_expand(struct dfs_fdtable *fdt, int fd)
{
  109bcc:	e92d4800 	push	{fp, lr}
  109bd0:	e28db004 	add	fp, sp, #4
  109bd4:	e24dd018 	sub	sp, sp, #24
  109bd8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  109bdc:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    int nr;
    int index;
    struct dfs_fd **fds = NULL;
  109be0:	e3a03000 	mov	r3, #0
  109be4:	e50b3010 	str	r3, [fp, #-16]

    if (fd < fdt->maxfd)
  109be8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  109bec:	e5932000 	ldr	r2, [r3]
  109bf0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109bf4:	e1520003 	cmp	r2, r3
  109bf8:	9a000001 	bls	109c04 <fd_slot_expand+0x38>
    {
        return fd;
  109bfc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109c00:	ea000032 	b	109cd0 <fd_slot_expand+0x104>
    }
    if (fd >= DFS_FD_MAX)
  109c04:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109c08:	e353001f 	cmp	r3, #31
  109c0c:	da000001 	ble	109c18 <fd_slot_expand+0x4c>
    {
        return -1;
  109c10:	e3e03000 	mvn	r3, #0
  109c14:	ea00002d 	b	109cd0 <fd_slot_expand+0x104>
    }

    nr = ((fd + 4) & ~3);
  109c18:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109c1c:	e2833004 	add	r3, r3, #4
  109c20:	e3c33003 	bic	r3, r3, #3
  109c24:	e50b3008 	str	r3, [fp, #-8]
    if (nr > DFS_FD_MAX)
  109c28:	e51b3008 	ldr	r3, [fp, #-8]
  109c2c:	e3530020 	cmp	r3, #32
  109c30:	da000001 	ble	109c3c <fd_slot_expand+0x70>
    {
        nr = DFS_FD_MAX;
  109c34:	e3a03020 	mov	r3, #32
  109c38:	e50b3008 	str	r3, [fp, #-8]
    }
    fds = (struct dfs_fd **)rt_realloc(fdt->fds, nr * sizeof(struct dfs_fd *));
  109c3c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  109c40:	e5932004 	ldr	r2, [r3, #4]
  109c44:	e51b3008 	ldr	r3, [fp, #-8]
  109c48:	e1a03103 	lsl	r3, r3, #2
  109c4c:	e1a01003 	mov	r1, r3
  109c50:	e1a00002 	mov	r0, r2
  109c54:	ebffe4e0 	bl	102fdc <rt_realloc>
  109c58:	e50b0010 	str	r0, [fp, #-16]
    if (!fds)
  109c5c:	e51b3010 	ldr	r3, [fp, #-16]
  109c60:	e3530000 	cmp	r3, #0
  109c64:	1a000001 	bne	109c70 <fd_slot_expand+0xa4>
    {
        return -1;
  109c68:	e3e03000 	mvn	r3, #0
  109c6c:	ea000017 	b	109cd0 <fd_slot_expand+0x104>
    }

    /* clean the new allocated fds */
    for (index = fdt->maxfd; index < nr; index++)
  109c70:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  109c74:	e5933000 	ldr	r3, [r3]
  109c78:	e50b300c 	str	r3, [fp, #-12]
  109c7c:	ea000008 	b	109ca4 <fd_slot_expand+0xd8>
    {
        fds[index] = NULL;
  109c80:	e51b300c 	ldr	r3, [fp, #-12]
  109c84:	e1a03103 	lsl	r3, r3, #2
  109c88:	e51b2010 	ldr	r2, [fp, #-16]
  109c8c:	e0823003 	add	r3, r2, r3
  109c90:	e3a02000 	mov	r2, #0
  109c94:	e5832000 	str	r2, [r3]
    for (index = fdt->maxfd; index < nr; index++)
  109c98:	e51b300c 	ldr	r3, [fp, #-12]
  109c9c:	e2833001 	add	r3, r3, #1
  109ca0:	e50b300c 	str	r3, [fp, #-12]
  109ca4:	e51b200c 	ldr	r2, [fp, #-12]
  109ca8:	e51b3008 	ldr	r3, [fp, #-8]
  109cac:	e1520003 	cmp	r2, r3
  109cb0:	bafffff2 	blt	109c80 <fd_slot_expand+0xb4>
    }
    fdt->fds   = fds;
  109cb4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  109cb8:	e51b2010 	ldr	r2, [fp, #-16]
  109cbc:	e5832004 	str	r2, [r3, #4]
    fdt->maxfd = nr;
  109cc0:	e51b2008 	ldr	r2, [fp, #-8]
  109cc4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  109cc8:	e5832000 	str	r2, [r3]

    return fd;
  109ccc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
}
  109cd0:	e1a00003 	mov	r0, r3
  109cd4:	e24bd004 	sub	sp, fp, #4
  109cd8:	e8bd8800 	pop	{fp, pc}

00109cdc <fd_slot_alloc>:

static int fd_slot_alloc(struct dfs_fdtable *fdt, int startfd)
{
  109cdc:	e92d4800 	push	{fp, lr}
  109ce0:	e28db004 	add	fp, sp, #4
  109ce4:	e24dd010 	sub	sp, sp, #16
  109ce8:	e50b0010 	str	r0, [fp, #-16]
  109cec:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int idx;

    /* find an empty fd slot */
    for (idx = startfd; idx < (int)fdt->maxfd; idx++)
  109cf0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109cf4:	e50b3008 	str	r3, [fp, #-8]
  109cf8:	ea00000c 	b	109d30 <fd_slot_alloc+0x54>
    {
        if (fdt->fds[idx] == RT_NULL)
  109cfc:	e51b3010 	ldr	r3, [fp, #-16]
  109d00:	e5932004 	ldr	r2, [r3, #4]
  109d04:	e51b3008 	ldr	r3, [fp, #-8]
  109d08:	e1a03103 	lsl	r3, r3, #2
  109d0c:	e0823003 	add	r3, r2, r3
  109d10:	e5933000 	ldr	r3, [r3]
  109d14:	e3530000 	cmp	r3, #0
  109d18:	1a000001 	bne	109d24 <fd_slot_alloc+0x48>
        {
            return idx;
  109d1c:	e51b3008 	ldr	r3, [fp, #-8]
  109d20:	ea00001a 	b	109d90 <fd_slot_alloc+0xb4>
    for (idx = startfd; idx < (int)fdt->maxfd; idx++)
  109d24:	e51b3008 	ldr	r3, [fp, #-8]
  109d28:	e2833001 	add	r3, r3, #1
  109d2c:	e50b3008 	str	r3, [fp, #-8]
  109d30:	e51b3010 	ldr	r3, [fp, #-16]
  109d34:	e5933000 	ldr	r3, [r3]
  109d38:	e1a02003 	mov	r2, r3
  109d3c:	e51b3008 	ldr	r3, [fp, #-8]
  109d40:	e1530002 	cmp	r3, r2
  109d44:	baffffec 	blt	109cfc <fd_slot_alloc+0x20>
        }
    }

    idx = fdt->maxfd;
  109d48:	e51b3010 	ldr	r3, [fp, #-16]
  109d4c:	e5933000 	ldr	r3, [r3]
  109d50:	e50b3008 	str	r3, [fp, #-8]
    if (idx < startfd)
  109d54:	e51b2008 	ldr	r2, [fp, #-8]
  109d58:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109d5c:	e1520003 	cmp	r2, r3
  109d60:	aa000001 	bge	109d6c <fd_slot_alloc+0x90>
    {
        idx = startfd;
  109d64:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109d68:	e50b3008 	str	r3, [fp, #-8]
    }
    if (fd_slot_expand(fdt, idx) < 0)
  109d6c:	e51b1008 	ldr	r1, [fp, #-8]
  109d70:	e51b0010 	ldr	r0, [fp, #-16]
  109d74:	ebffff94 	bl	109bcc <fd_slot_expand>
  109d78:	e1a03000 	mov	r3, r0
  109d7c:	e3530000 	cmp	r3, #0
  109d80:	aa000001 	bge	109d8c <fd_slot_alloc+0xb0>
    {
        return -1;
  109d84:	e3e03000 	mvn	r3, #0
  109d88:	ea000000 	b	109d90 <fd_slot_alloc+0xb4>
    }
    return idx;
  109d8c:	e51b3008 	ldr	r3, [fp, #-8]
}
  109d90:	e1a00003 	mov	r0, r3
  109d94:	e24bd004 	sub	sp, fp, #4
  109d98:	e8bd8800 	pop	{fp, pc}

00109d9c <fd_alloc>:

static int fd_alloc(struct dfs_fdtable *fdt, int startfd)
{
  109d9c:	e92d4800 	push	{fp, lr}
  109da0:	e28db004 	add	fp, sp, #4
  109da4:	e24dd010 	sub	sp, sp, #16
  109da8:	e50b0010 	str	r0, [fp, #-16]
  109dac:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int idx;
    struct dfs_fd *fd = NULL;
  109db0:	e3a03000 	mov	r3, #0
  109db4:	e50b3008 	str	r3, [fp, #-8]

    idx = fd_slot_alloc(fdt, startfd);
  109db8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  109dbc:	e51b0010 	ldr	r0, [fp, #-16]
  109dc0:	ebffffc5 	bl	109cdc <fd_slot_alloc>
  109dc4:	e50b000c 	str	r0, [fp, #-12]

    /* allocate  'struct dfs_fd' */
    if (idx < 0)
  109dc8:	e51b300c 	ldr	r3, [fp, #-12]
  109dcc:	e3530000 	cmp	r3, #0
  109dd0:	aa000001 	bge	109ddc <fd_alloc+0x40>
    {
        return -1;
  109dd4:	e3e03000 	mvn	r3, #0
  109dd8:	ea00001a 	b	109e48 <fd_alloc+0xac>
    }
    fd = (struct dfs_fd *)rt_calloc(1, sizeof(struct dfs_fd));
  109ddc:	e3a01020 	mov	r1, #32
  109de0:	e3a00001 	mov	r0, #1
  109de4:	ebffe488 	bl	10300c <rt_calloc>
  109de8:	e50b0008 	str	r0, [fp, #-8]
    if (!fd)
  109dec:	e51b3008 	ldr	r3, [fp, #-8]
  109df0:	e3530000 	cmp	r3, #0
  109df4:	1a000001 	bne	109e00 <fd_alloc+0x64>
    {
        return -1;
  109df8:	e3e03000 	mvn	r3, #0
  109dfc:	ea000011 	b	109e48 <fd_alloc+0xac>
    }
    fd->ref_count = 1;
  109e00:	e51b3008 	ldr	r3, [fp, #-8]
  109e04:	e3a02001 	mov	r2, #1
  109e08:	e5832008 	str	r2, [r3, #8]
    fd->magic = DFS_FD_MAGIC;
  109e0c:	e51b2008 	ldr	r2, [fp, #-8]
  109e10:	e30f3dfd 	movw	r3, #65021	; 0xfdfd
  109e14:	e34f3fff 	movt	r3, #65535	; 0xffff
  109e18:	e1c230b0 	strh	r3, [r2]
    fd->fnode = NULL;
  109e1c:	e51b3008 	ldr	r3, [fp, #-8]
  109e20:	e3a02000 	mov	r2, #0
  109e24:	e5832018 	str	r2, [r3, #24]
    fdt->fds[idx] = fd;
  109e28:	e51b3010 	ldr	r3, [fp, #-16]
  109e2c:	e5932004 	ldr	r2, [r3, #4]
  109e30:	e51b300c 	ldr	r3, [fp, #-12]
  109e34:	e1a03103 	lsl	r3, r3, #2
  109e38:	e0823003 	add	r3, r2, r3
  109e3c:	e51b2008 	ldr	r2, [fp, #-8]
  109e40:	e5832000 	str	r2, [r3]

    return idx;
  109e44:	e51b300c 	ldr	r3, [fp, #-12]
}
  109e48:	e1a00003 	mov	r0, r3
  109e4c:	e24bd004 	sub	sp, fp, #4
  109e50:	e8bd8800 	pop	{fp, pc}

00109e54 <fdt_fd_new>:
 * This function will allocate a file descriptor.
 *
 * @return -1 on failed or the allocated file descriptor.
 */
int fdt_fd_new(struct dfs_fdtable *fdt)
{
  109e54:	e92d4800 	push	{fp, lr}
  109e58:	e28db004 	add	fp, sp, #4
  109e5c:	e24dd010 	sub	sp, sp, #16
  109e60:	e50b0010 	str	r0, [fp, #-16]
    int idx;

    /* lock filesystem */
    dfs_fd_lock();
  109e64:	ebffff30 	bl	109b2c <dfs_fd_lock>

    /* find an empty fd entry */
    idx = fd_alloc(fdt, DFS_STDIO_OFFSET);
  109e68:	e3a01003 	mov	r1, #3
  109e6c:	e51b0010 	ldr	r0, [fp, #-16]
  109e70:	ebffffc9 	bl	109d9c <fd_alloc>
  109e74:	e50b0008 	str	r0, [fp, #-8]

    /* can't find an empty fd entry */
    if (idx < 0)
  109e78:	e51b3008 	ldr	r3, [fp, #-8]
  109e7c:	e3530000 	cmp	r3, #0
  109e80:	aa000002 	bge	109e90 <fdt_fd_new+0x3c>
    {
        rt_kprintf("DFS fd new is failed! Could not found an empty fd entry.");
  109e84:	e30601b4 	movw	r0, #25012	; 0x61b4
  109e88:	e3400014 	movt	r0, #20
  109e8c:	ebffe4a0 	bl	103114 <rt_kprintf>
    }

    dfs_fd_unlock();
  109e90:	ebffff46 	bl	109bb0 <dfs_fd_unlock>
    return idx;
  109e94:	e51b3008 	ldr	r3, [fp, #-8]
}
  109e98:	e1a00003 	mov	r0, r3
  109e9c:	e24bd004 	sub	sp, fp, #4
  109ea0:	e8bd8800 	pop	{fp, pc}

00109ea4 <fd_new>:

int fd_new(void)
{
  109ea4:	e92d4800 	push	{fp, lr}
  109ea8:	e28db004 	add	fp, sp, #4
  109eac:	e24dd008 	sub	sp, sp, #8
    struct dfs_fdtable *fdt = NULL;
  109eb0:	e3a03000 	mov	r3, #0
  109eb4:	e50b3008 	str	r3, [fp, #-8]

    fdt = dfs_fdtable_get();
  109eb8:	eb000099 	bl	10a124 <dfs_fdtable_get>
  109ebc:	e50b0008 	str	r0, [fp, #-8]
    return fdt_fd_new(fdt);
  109ec0:	e51b0008 	ldr	r0, [fp, #-8]
  109ec4:	ebffffe2 	bl	109e54 <fdt_fd_new>
  109ec8:	e1a03000 	mov	r3, r0
}
  109ecc:	e1a00003 	mov	r0, r3
  109ed0:	e24bd004 	sub	sp, fp, #4
  109ed4:	e8bd8800 	pop	{fp, pc}

00109ed8 <fdt_fd_get>:
 * @return NULL on on this file descriptor or the file descriptor structure
 * pointer.
 */

struct dfs_fd *fdt_fd_get(struct dfs_fdtable* fdt, int fd)
{
  109ed8:	e92d4800 	push	{fp, lr}
  109edc:	e28db004 	add	fp, sp, #4
  109ee0:	e24dd010 	sub	sp, sp, #16
  109ee4:	e50b0010 	str	r0, [fp, #-16]
  109ee8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    struct dfs_fd *d;

    if (fd < 0 || fd >= (int)fdt->maxfd)
  109eec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109ef0:	e3530000 	cmp	r3, #0
  109ef4:	ba000005 	blt	109f10 <fdt_fd_get+0x38>
  109ef8:	e51b3010 	ldr	r3, [fp, #-16]
  109efc:	e5933000 	ldr	r3, [r3]
  109f00:	e1a02003 	mov	r2, r3
  109f04:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109f08:	e1530002 	cmp	r3, r2
  109f0c:	ba000001 	blt	109f18 <fdt_fd_get+0x40>
    {
        return NULL;
  109f10:	e3a03000 	mov	r3, #0
  109f14:	ea000014 	b	109f6c <fdt_fd_get+0x94>
    }

    dfs_fd_lock();
  109f18:	ebffff03 	bl	109b2c <dfs_fd_lock>
    d = fdt->fds[fd];
  109f1c:	e51b3010 	ldr	r3, [fp, #-16]
  109f20:	e5932004 	ldr	r2, [r3, #4]
  109f24:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109f28:	e1a03103 	lsl	r3, r3, #2
  109f2c:	e0823003 	add	r3, r2, r3
  109f30:	e5933000 	ldr	r3, [r3]
  109f34:	e50b3008 	str	r3, [fp, #-8]

    /* check dfs_fd valid or not */
    if ((d == NULL) || (d->magic != DFS_FD_MAGIC))
  109f38:	e51b3008 	ldr	r3, [fp, #-8]
  109f3c:	e3530000 	cmp	r3, #0
  109f40:	0a000004 	beq	109f58 <fdt_fd_get+0x80>
  109f44:	e51b3008 	ldr	r3, [fp, #-8]
  109f48:	e1d330b0 	ldrh	r3, [r3]
  109f4c:	e30f2dfd 	movw	r2, #65021	; 0xfdfd
  109f50:	e1530002 	cmp	r3, r2
  109f54:	0a000002 	beq	109f64 <fdt_fd_get+0x8c>
    {
        dfs_fd_unlock();
  109f58:	ebffff14 	bl	109bb0 <dfs_fd_unlock>
        return NULL;
  109f5c:	e3a03000 	mov	r3, #0
  109f60:	ea000001 	b	109f6c <fdt_fd_get+0x94>
    }

    dfs_fd_unlock();
  109f64:	ebffff11 	bl	109bb0 <dfs_fd_unlock>

    return d;
  109f68:	e51b3008 	ldr	r3, [fp, #-8]
}
  109f6c:	e1a00003 	mov	r0, r3
  109f70:	e24bd004 	sub	sp, fp, #4
  109f74:	e8bd8800 	pop	{fp, pc}

00109f78 <fd_get>:

struct dfs_fd *fd_get(int fd)
{
  109f78:	e92d4800 	push	{fp, lr}
  109f7c:	e28db004 	add	fp, sp, #4
  109f80:	e24dd010 	sub	sp, sp, #16
  109f84:	e50b0010 	str	r0, [fp, #-16]
    struct dfs_fdtable *fdt;

    fdt = dfs_fdtable_get();
  109f88:	eb000065 	bl	10a124 <dfs_fdtable_get>
  109f8c:	e50b0008 	str	r0, [fp, #-8]
    return fdt_fd_get(fdt, fd);
  109f90:	e51b1010 	ldr	r1, [fp, #-16]
  109f94:	e51b0008 	ldr	r0, [fp, #-8]
  109f98:	ebffffce 	bl	109ed8 <fdt_fd_get>
  109f9c:	e1a03000 	mov	r3, r0
}
  109fa0:	e1a00003 	mov	r0, r3
  109fa4:	e24bd004 	sub	sp, fp, #4
  109fa8:	e8bd8800 	pop	{fp, pc}

00109fac <fdt_fd_release>:
 * @ingroup Fd
 *
 * This function will put the file descriptor.
 */
void fdt_fd_release(struct dfs_fdtable* fdt, int fd)
{
  109fac:	e92d4800 	push	{fp, lr}
  109fb0:	e28db004 	add	fp, sp, #4
  109fb4:	e24dd010 	sub	sp, sp, #16
  109fb8:	e50b0010 	str	r0, [fp, #-16]
  109fbc:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    struct dfs_fd *fd_slot = NULL;
  109fc0:	e3a03000 	mov	r3, #0
  109fc4:	e50b3008 	str	r3, [fp, #-8]

    RT_ASSERT(fdt != NULL);
  109fc8:	e51b3010 	ldr	r3, [fp, #-16]
  109fcc:	e3530000 	cmp	r3, #0
  109fd0:	1a000005 	bne	109fec <fdt_fd_release+0x40>
  109fd4:	e300210b 	movw	r2, #267	; 0x10b
  109fd8:	e3061234 	movw	r1, #25140	; 0x6234
  109fdc:	e3401014 	movt	r1, #20
  109fe0:	e30601f0 	movw	r0, #25072	; 0x61f0
  109fe4:	e3400014 	movt	r0, #20
  109fe8:	ebffe56a 	bl	103598 <rt_assert_handler>

    dfs_fd_lock();
  109fec:	ebfffece 	bl	109b2c <dfs_fd_lock>

    if ((fd < 0) || (fd >= fdt->maxfd))
  109ff0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109ff4:	e3530000 	cmp	r3, #0
  109ff8:	ba000004 	blt	10a010 <fdt_fd_release+0x64>
  109ffc:	e51b3010 	ldr	r3, [fp, #-16]
  10a000:	e5932000 	ldr	r2, [r3]
  10a004:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10a008:	e1520003 	cmp	r2, r3
  10a00c:	8a000001 	bhi	10a018 <fdt_fd_release+0x6c>
    {
        dfs_fd_unlock();
  10a010:	ebfffee6 	bl	109bb0 <dfs_fd_unlock>
        return;
  10a014:	ea000034 	b	10a0ec <fdt_fd_release+0x140>
    }

    fd_slot = fdt->fds[fd];
  10a018:	e51b3010 	ldr	r3, [fp, #-16]
  10a01c:	e5932004 	ldr	r2, [r3, #4]
  10a020:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10a024:	e1a03103 	lsl	r3, r3, #2
  10a028:	e0823003 	add	r3, r2, r3
  10a02c:	e5933000 	ldr	r3, [r3]
  10a030:	e50b3008 	str	r3, [fp, #-8]
    if (fd_slot == NULL)
  10a034:	e51b3008 	ldr	r3, [fp, #-8]
  10a038:	e3530000 	cmp	r3, #0
  10a03c:	1a000001 	bne	10a048 <fdt_fd_release+0x9c>
    {
        dfs_fd_unlock();
  10a040:	ebfffeda 	bl	109bb0 <dfs_fd_unlock>
        return;
  10a044:	ea000028 	b	10a0ec <fdt_fd_release+0x140>
    }
    fdt->fds[fd] = NULL;
  10a048:	e51b3010 	ldr	r3, [fp, #-16]
  10a04c:	e5932004 	ldr	r2, [r3, #4]
  10a050:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10a054:	e1a03103 	lsl	r3, r3, #2
  10a058:	e0823003 	add	r3, r2, r3
  10a05c:	e3a02000 	mov	r2, #0
  10a060:	e5832000 	str	r2, [r3]

    /* check fd */
    RT_ASSERT(fd_slot->magic == DFS_FD_MAGIC);
  10a064:	e51b3008 	ldr	r3, [fp, #-8]
  10a068:	e1d330b0 	ldrh	r3, [r3]
  10a06c:	e30f2dfd 	movw	r2, #65021	; 0xfdfd
  10a070:	e1530002 	cmp	r3, r2
  10a074:	0a000005 	beq	10a090 <fdt_fd_release+0xe4>
  10a078:	e300211e 	movw	r2, #286	; 0x11e
  10a07c:	e3061234 	movw	r1, #25140	; 0x6234
  10a080:	e3401014 	movt	r1, #20
  10a084:	e30601fc 	movw	r0, #25084	; 0x61fc
  10a088:	e3400014 	movt	r0, #20
  10a08c:	ebffe541 	bl	103598 <rt_assert_handler>

    fd_slot->ref_count--;
  10a090:	e51b3008 	ldr	r3, [fp, #-8]
  10a094:	e5933008 	ldr	r3, [r3, #8]
  10a098:	e2432001 	sub	r2, r3, #1
  10a09c:	e51b3008 	ldr	r3, [fp, #-8]
  10a0a0:	e5832008 	str	r2, [r3, #8]

    /* clear this fd entry */
    if (fd_slot->ref_count == 0)
  10a0a4:	e51b3008 	ldr	r3, [fp, #-8]
  10a0a8:	e5933008 	ldr	r3, [r3, #8]
  10a0ac:	e3530000 	cmp	r3, #0
  10a0b0:	1a00000c 	bne	10a0e8 <fdt_fd_release+0x13c>
    {
        struct dfs_fnode *fnode = fd_slot->fnode;
  10a0b4:	e51b3008 	ldr	r3, [fp, #-8]
  10a0b8:	e5933018 	ldr	r3, [r3, #24]
  10a0bc:	e50b300c 	str	r3, [fp, #-12]
        if (fnode)
  10a0c0:	e51b300c 	ldr	r3, [fp, #-12]
  10a0c4:	e3530000 	cmp	r3, #0
  10a0c8:	0a000004 	beq	10a0e0 <fdt_fd_release+0x134>
        {
            fnode->ref_count--;
  10a0cc:	e51b300c 	ldr	r3, [fp, #-12]
  10a0d0:	e593300c 	ldr	r3, [r3, #12]
  10a0d4:	e2432001 	sub	r2, r3, #1
  10a0d8:	e51b300c 	ldr	r3, [fp, #-12]
  10a0dc:	e583200c 	str	r2, [r3, #12]
        }
        rt_free(fd_slot);
  10a0e0:	e51b0008 	ldr	r0, [fp, #-8]
  10a0e4:	ebffe3b4 	bl	102fbc <rt_free>
    }
    dfs_fd_unlock();
  10a0e8:	ebfffeb0 	bl	109bb0 <dfs_fd_unlock>
}
  10a0ec:	e24bd004 	sub	sp, fp, #4
  10a0f0:	e8bd8800 	pop	{fp, pc}

0010a0f4 <fd_release>:

void fd_release(int fd)
{
  10a0f4:	e92d4800 	push	{fp, lr}
  10a0f8:	e28db004 	add	fp, sp, #4
  10a0fc:	e24dd010 	sub	sp, sp, #16
  10a100:	e50b0010 	str	r0, [fp, #-16]
    struct dfs_fdtable *fdt;

    fdt = dfs_fdtable_get();
  10a104:	eb000006 	bl	10a124 <dfs_fdtable_get>
  10a108:	e50b0008 	str	r0, [fp, #-8]
    fdt_fd_release(fdt, fd);
  10a10c:	e51b1010 	ldr	r1, [fp, #-16]
  10a110:	e51b0008 	ldr	r0, [fp, #-8]
  10a114:	ebffffa4 	bl	109fac <fdt_fd_release>
}
  10a118:	e320f000 	nop	{0}
  10a11c:	e24bd004 	sub	sp, fp, #4
  10a120:	e8bd8800 	pop	{fp, pc}

0010a124 <dfs_fdtable_get>:

/**
 * This function will get the file descriptor table of current process.
 */
struct dfs_fdtable *dfs_fdtable_get(void)
{
  10a124:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10a128:	e28db000 	add	fp, sp, #0
    return &_fdtab;
  10a12c:	e30d3610 	movw	r3, #54800	; 0xd610
  10a130:	e3403014 	movt	r3, #20
}
  10a134:	e1a00003 	mov	r0, r3
  10a138:	e28bd000 	add	sp, fp, #0
  10a13c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10a140:	e12fff1e 	bx	lr

0010a144 <rt_list_init>:
{
  10a144:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10a148:	e28db000 	add	fp, sp, #0
  10a14c:	e24dd00c 	sub	sp, sp, #12
  10a150:	e50b0008 	str	r0, [fp, #-8]
    l->next = l->prev = l;
  10a154:	e51b3008 	ldr	r3, [fp, #-8]
  10a158:	e51b2008 	ldr	r2, [fp, #-8]
  10a15c:	e5832004 	str	r2, [r3, #4]
  10a160:	e51b3008 	ldr	r3, [fp, #-8]
  10a164:	e5932004 	ldr	r2, [r3, #4]
  10a168:	e51b3008 	ldr	r3, [fp, #-8]
  10a16c:	e5832000 	str	r2, [r3]
}
  10a170:	e320f000 	nop	{0}
  10a174:	e28bd000 	add	sp, fp, #0
  10a178:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10a17c:	e12fff1e 	bx	lr

0010a180 <dfs_fnode_mgr_init>:
};

static struct dfs_fnode_mgr dfs_fm;

void dfs_fnode_mgr_init(void)
{
  10a180:	e92d4800 	push	{fp, lr}
  10a184:	e28db004 	add	fp, sp, #4
  10a188:	e24dd008 	sub	sp, sp, #8
    int i = 0;
  10a18c:	e3a03000 	mov	r3, #0
  10a190:	e50b3008 	str	r3, [fp, #-8]

    rt_mutex_init(&dfs_fm.lock, "dfs_mgr", RT_IPC_FLAG_PRIO);
  10a194:	e3a02001 	mov	r2, #1
  10a198:	e3061244 	movw	r1, #25156	; 0x6244
  10a19c:	e3401014 	movt	r1, #20
  10a1a0:	e30d061c 	movw	r0, #54812	; 0xd61c
  10a1a4:	e3400014 	movt	r0, #20
  10a1a8:	ebffdae6 	bl	100d48 <rt_mutex_init>
    for (i = 0; i < DFS_FNODE_HASH_NR; i++)
  10a1ac:	e3a03000 	mov	r3, #0
  10a1b0:	e50b3008 	str	r3, [fp, #-8]
  10a1b4:	ea00000a 	b	10a1e4 <dfs_fnode_mgr_init+0x64>
    {
        rt_list_init(&dfs_fm.head[i]);
  10a1b8:	e51b3008 	ldr	r3, [fp, #-8]
  10a1bc:	e2833005 	add	r3, r3, #5
  10a1c0:	e1a02183 	lsl	r2, r3, #3
  10a1c4:	e30d361c 	movw	r3, #54812	; 0xd61c
  10a1c8:	e3403014 	movt	r3, #20
  10a1cc:	e0823003 	add	r3, r2, r3
  10a1d0:	e1a00003 	mov	r0, r3
  10a1d4:	ebffffda 	bl	10a144 <rt_list_init>
    for (i = 0; i < DFS_FNODE_HASH_NR; i++)
  10a1d8:	e51b3008 	ldr	r3, [fp, #-8]
  10a1dc:	e2833001 	add	r3, r3, #1
  10a1e0:	e50b3008 	str	r3, [fp, #-8]
  10a1e4:	e51b3008 	ldr	r3, [fp, #-8]
  10a1e8:	e353007f 	cmp	r3, #127	; 0x7f
  10a1ec:	dafffff1 	ble	10a1b8 <dfs_fnode_mgr_init+0x38>
    }
  10a1f0:	e320f000 	nop	{0}
  10a1f4:	e24bd004 	sub	sp, fp, #4
  10a1f8:	e8bd8800 	pop	{fp, pc}

0010a1fc <dfs_net_getsocket>:
#include "dfs.h"
#include "dfs_net.h"
#include "../netdev/sal_socket.h"

int dfs_net_getsocket(int fd)
{
  10a1fc:	e92d4800 	push	{fp, lr}
  10a200:	e28db004 	add	fp, sp, #4
  10a204:	e24dd010 	sub	sp, sp, #16
  10a208:	e50b0010 	str	r0, [fp, #-16]
    int socket;
    struct dfs_fd *_dfs_fd;

    _dfs_fd = fd_get(fd);
  10a20c:	e51b0010 	ldr	r0, [fp, #-16]
  10a210:	ebffff58 	bl	109f78 <fd_get>
  10a214:	e50b000c 	str	r0, [fp, #-12]
    if (_dfs_fd == NULL) return -1;
  10a218:	e51b300c 	ldr	r3, [fp, #-12]
  10a21c:	e3530000 	cmp	r3, #0
  10a220:	1a000001 	bne	10a22c <dfs_net_getsocket+0x30>
  10a224:	e3e03000 	mvn	r3, #0
  10a228:	ea00000c 	b	10a260 <dfs_net_getsocket+0x64>

    if (_dfs_fd->fnode->type != FT_SOCKET) socket = -1;
  10a22c:	e51b300c 	ldr	r3, [fp, #-12]
  10a230:	e5933018 	ldr	r3, [r3, #24]
  10a234:	e1d330b0 	ldrh	r3, [r3]
  10a238:	e3530001 	cmp	r3, #1
  10a23c:	0a000002 	beq	10a24c <dfs_net_getsocket+0x50>
  10a240:	e3e03000 	mvn	r3, #0
  10a244:	e50b3008 	str	r3, [fp, #-8]
  10a248:	ea000003 	b	10a25c <dfs_net_getsocket+0x60>
    else socket = (int)(size_t)_dfs_fd->fnode->data;
  10a24c:	e51b300c 	ldr	r3, [fp, #-12]
  10a250:	e5933018 	ldr	r3, [r3, #24]
  10a254:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  10a258:	e50b3008 	str	r3, [fp, #-8]

    return socket;
  10a25c:	e51b3008 	ldr	r3, [fp, #-8]
}
  10a260:	e1a00003 	mov	r0, r3
  10a264:	e24bd004 	sub	sp, fp, #4
  10a268:	e8bd8800 	pop	{fp, pc}

0010a26c <dfs_net_ioctl>:

static int dfs_net_ioctl(struct dfs_fd* file, int cmd, void* args)
{
  10a26c:	e92d4800 	push	{fp, lr}
  10a270:	e28db004 	add	fp, sp, #4
  10a274:	e24dd018 	sub	sp, sp, #24
  10a278:	e50b0010 	str	r0, [fp, #-16]
  10a27c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10a280:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    int ret;
    int socket = (int)(size_t)file->fnode->data;
  10a284:	e51b3010 	ldr	r3, [fp, #-16]
  10a288:	e5933018 	ldr	r3, [r3, #24]
  10a28c:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  10a290:	e50b3008 	str	r3, [fp, #-8]

    ret = sal_ioctlsocket(socket, cmd, args);
  10a294:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10a298:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10a29c:	e51b0008 	ldr	r0, [fp, #-8]
  10a2a0:	ebfff8e6 	bl	108640 <sal_ioctlsocket>
  10a2a4:	e50b000c 	str	r0, [fp, #-12]
    if (ret < 0)
  10a2a8:	e51b300c 	ldr	r3, [fp, #-12]
  10a2ac:	e3530000 	cmp	r3, #0
  10a2b0:	aa000006 	bge	10a2d0 <dfs_net_ioctl+0x64>
    {
        ret = rt_get_errno();
  10a2b4:	ebffdf68 	bl	10205c <rt_get_errno>
  10a2b8:	e50b000c 	str	r0, [fp, #-12]
        return (ret > 0) ? (-ret) : ret;
  10a2bc:	e51b300c 	ldr	r3, [fp, #-12]
  10a2c0:	e3530000 	cmp	r3, #0
  10a2c4:	b2633000 	rsblt	r3, r3, #0
  10a2c8:	e2633000 	rsb	r3, r3, #0
  10a2cc:	ea000000 	b	10a2d4 <dfs_net_ioctl+0x68>
    }
    return ret;
  10a2d0:	e51b300c 	ldr	r3, [fp, #-12]
}
  10a2d4:	e1a00003 	mov	r0, r3
  10a2d8:	e24bd004 	sub	sp, fp, #4
  10a2dc:	e8bd8800 	pop	{fp, pc}

0010a2e0 <dfs_net_read>:

static int dfs_net_read(struct dfs_fd* file, void *buf, size_t count)
{
  10a2e0:	e92d4800 	push	{fp, lr}
  10a2e4:	e28db004 	add	fp, sp, #4
  10a2e8:	e24dd020 	sub	sp, sp, #32
  10a2ec:	e50b0010 	str	r0, [fp, #-16]
  10a2f0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10a2f4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    int ret;
    int socket = (int)(size_t)file->fnode->data;
  10a2f8:	e51b3010 	ldr	r3, [fp, #-16]
  10a2fc:	e5933018 	ldr	r3, [r3, #24]
  10a300:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  10a304:	e50b3008 	str	r3, [fp, #-8]

    ret = sal_recvfrom(socket, buf, count, 0, NULL, NULL);
  10a308:	e3a03000 	mov	r3, #0
  10a30c:	e58d3004 	str	r3, [sp, #4]
  10a310:	e3a03000 	mov	r3, #0
  10a314:	e58d3000 	str	r3, [sp]
  10a318:	e3a03000 	mov	r3, #0
  10a31c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10a320:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10a324:	e51b0008 	ldr	r0, [fp, #-8]
  10a328:	ebfff7dd 	bl	1082a4 <sal_recvfrom>
  10a32c:	e50b000c 	str	r0, [fp, #-12]
    if (ret < 0)
  10a330:	e51b300c 	ldr	r3, [fp, #-12]
  10a334:	e3530000 	cmp	r3, #0
  10a338:	aa000006 	bge	10a358 <dfs_net_read+0x78>
    {
        ret = rt_get_errno();
  10a33c:	ebffdf46 	bl	10205c <rt_get_errno>
  10a340:	e50b000c 	str	r0, [fp, #-12]
        return (ret > 0) ? (-ret) : ret;
  10a344:	e51b300c 	ldr	r3, [fp, #-12]
  10a348:	e3530000 	cmp	r3, #0
  10a34c:	b2633000 	rsblt	r3, r3, #0
  10a350:	e2633000 	rsb	r3, r3, #0
  10a354:	ea000000 	b	10a35c <dfs_net_read+0x7c>
    }
    return ret;
  10a358:	e51b300c 	ldr	r3, [fp, #-12]
}
  10a35c:	e1a00003 	mov	r0, r3
  10a360:	e24bd004 	sub	sp, fp, #4
  10a364:	e8bd8800 	pop	{fp, pc}

0010a368 <dfs_net_write>:

static int dfs_net_write(struct dfs_fd *file, const void *buf, size_t count)
{
  10a368:	e92d4800 	push	{fp, lr}
  10a36c:	e28db004 	add	fp, sp, #4
  10a370:	e24dd020 	sub	sp, sp, #32
  10a374:	e50b0010 	str	r0, [fp, #-16]
  10a378:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10a37c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    int ret;
    int socket = (int)(size_t)file->fnode->data;
  10a380:	e51b3010 	ldr	r3, [fp, #-16]
  10a384:	e5933018 	ldr	r3, [r3, #24]
  10a388:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  10a38c:	e50b3008 	str	r3, [fp, #-8]
    
    ret = sal_sendto(socket, buf, count, 0, NULL, 0);
  10a390:	e3a03000 	mov	r3, #0
  10a394:	e58d3004 	str	r3, [sp, #4]
  10a398:	e3a03000 	mov	r3, #0
  10a39c:	e58d3000 	str	r3, [sp]
  10a3a0:	e3a03000 	mov	r3, #0
  10a3a4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10a3a8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10a3ac:	e51b0008 	ldr	r0, [fp, #-8]
  10a3b0:	ebfff7ef 	bl	108374 <sal_sendto>
  10a3b4:	e50b000c 	str	r0, [fp, #-12]
    if (ret < 0)
  10a3b8:	e51b300c 	ldr	r3, [fp, #-12]
  10a3bc:	e3530000 	cmp	r3, #0
  10a3c0:	aa000006 	bge	10a3e0 <dfs_net_write+0x78>
    {
        ret = rt_get_errno();
  10a3c4:	ebffdf24 	bl	10205c <rt_get_errno>
  10a3c8:	e50b000c 	str	r0, [fp, #-12]
        return (ret > 0) ? (-ret) : ret;
  10a3cc:	e51b300c 	ldr	r3, [fp, #-12]
  10a3d0:	e3530000 	cmp	r3, #0
  10a3d4:	b2633000 	rsblt	r3, r3, #0
  10a3d8:	e2633000 	rsb	r3, r3, #0
  10a3dc:	ea000000 	b	10a3e4 <dfs_net_write+0x7c>
    }
    return ret;
  10a3e0:	e51b300c 	ldr	r3, [fp, #-12]
}
  10a3e4:	e1a00003 	mov	r0, r3
  10a3e8:	e24bd004 	sub	sp, fp, #4
  10a3ec:	e8bd8800 	pop	{fp, pc}

0010a3f0 <dfs_net_close>:
static int dfs_net_close(struct dfs_fd* file)
{
  10a3f0:	e92d4800 	push	{fp, lr}
  10a3f4:	e28db004 	add	fp, sp, #4
  10a3f8:	e24dd010 	sub	sp, sp, #16
  10a3fc:	e50b0010 	str	r0, [fp, #-16]
    int socket;
    int ret = 0;
  10a400:	e3a03000 	mov	r3, #0
  10a404:	e50b3008 	str	r3, [fp, #-8]

    if (file->fnode->ref_count == 1)
  10a408:	e51b3010 	ldr	r3, [fp, #-16]
  10a40c:	e5933018 	ldr	r3, [r3, #24]
  10a410:	e593300c 	ldr	r3, [r3, #12]
  10a414:	e3530001 	cmp	r3, #1
  10a418:	1a000006 	bne	10a438 <dfs_net_close+0x48>
    {
        socket = (int)(size_t)file->fnode->data;
  10a41c:	e51b3010 	ldr	r3, [fp, #-16]
  10a420:	e5933018 	ldr	r3, [r3, #24]
  10a424:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  10a428:	e50b300c 	str	r3, [fp, #-12]
        ret = sal_closesocket(socket);
  10a42c:	e51b000c 	ldr	r0, [fp, #-12]
  10a430:	ebfff854 	bl	108588 <sal_closesocket>
  10a434:	e50b0008 	str	r0, [fp, #-8]
    }
    return ret;
  10a438:	e51b3008 	ldr	r3, [fp, #-8]
}
  10a43c:	e1a00003 	mov	r0, r3
  10a440:	e24bd004 	sub	sp, fp, #4
  10a444:	e8bd8800 	pop	{fp, pc}

0010a448 <dfs_net_poll>:

static int dfs_net_poll(struct dfs_fd *file, struct rt_pollreq *req)
{
  10a448:	e92d4800 	push	{fp, lr}
  10a44c:	e28db004 	add	fp, sp, #4
  10a450:	e24dd008 	sub	sp, sp, #8
  10a454:	e50b0008 	str	r0, [fp, #-8]
  10a458:	e50b100c 	str	r1, [fp, #-12]
    extern int sal_poll(struct dfs_fd *file, struct rt_pollreq *req);

    return sal_poll(file, req);
  10a45c:	e51b100c 	ldr	r1, [fp, #-12]
  10a460:	e51b0008 	ldr	r0, [fp, #-8]
  10a464:	ebfff911 	bl	1088b0 <sal_poll>
  10a468:	e1a03000 	mov	r3, r0
}
  10a46c:	e1a00003 	mov	r0, r3
  10a470:	e24bd004 	sub	sp, fp, #4
  10a474:	e8bd8800 	pop	{fp, pc}

0010a478 <dfs_net_get_fops>:
    dfs_net_write,
    dfs_net_poll,
};

const struct dfs_file_ops *dfs_net_get_fops(void)
{
  10a478:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10a47c:	e28db000 	add	fp, sp, #0
    return &_net_fops;
  10a480:	e306324c 	movw	r3, #25164	; 0x624c
  10a484:	e3403014 	movt	r3, #20
}
  10a488:	e1a00003 	mov	r0, r3
  10a48c:	e28bd000 	add	sp, fp, #0
  10a490:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10a494:	e12fff1e 	bx	lr

0010a498 <tcpip_init_done_callback>:

/*
 * Initialize the ethernetif layer and set network interface device up
 */
static void tcpip_init_done_callback(void *arg)
{
  10a498:	e92d4800 	push	{fp, lr}
  10a49c:	e28db004 	add	fp, sp, #4
  10a4a0:	e24dd008 	sub	sp, sp, #8
  10a4a4:	e50b0008 	str	r0, [fp, #-8]
    rt_sem_release((rt_sem_t)arg);
  10a4a8:	e51b0008 	ldr	r0, [fp, #-8]
  10a4ac:	ebffdb64 	bl	101244 <rt_sem_release>
}
  10a4b0:	e320f000 	nop	{0}
  10a4b4:	e24bd004 	sub	sp, fp, #4
  10a4b8:	e8bd8800 	pop	{fp, pc}

0010a4bc <buffer_full>:
#define INPUT_BUF_LEN 3
static void* INPUT_buffer[INPUT_BUF_LEN];
static int input_ptr = 0;
static int output_ptr = 0;
static int buffer_full()
{
  10a4bc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10a4c0:	e28db000 	add	fp, sp, #0
    return output_ptr == ((input_ptr + 1) % INPUT_BUF_LEN);
  10a4c4:	e30d3a54 	movw	r3, #55892	; 0xda54
  10a4c8:	e3403014 	movt	r3, #20
  10a4cc:	e5933000 	ldr	r3, [r3]
  10a4d0:	e2831001 	add	r1, r3, #1
  10a4d4:	e3053556 	movw	r3, #21846	; 0x5556
  10a4d8:	e3453555 	movt	r3, #21845	; 0x5555
  10a4dc:	e0c32391 	smull	r2, r3, r1, r3
  10a4e0:	e1a00fc1 	asr	r0, r1, #31
  10a4e4:	e0432000 	sub	r2, r3, r0
  10a4e8:	e1a03002 	mov	r3, r2
  10a4ec:	e1a03083 	lsl	r3, r3, #1
  10a4f0:	e0833002 	add	r3, r3, r2
  10a4f4:	e0412003 	sub	r2, r1, r3
  10a4f8:	e30d3a58 	movw	r3, #55896	; 0xda58
  10a4fc:	e3403014 	movt	r3, #20
  10a500:	e5933000 	ldr	r3, [r3]
  10a504:	e1520003 	cmp	r2, r3
  10a508:	03a03001 	moveq	r3, #1
  10a50c:	13a03000 	movne	r3, #0
  10a510:	e6ef3073 	uxtb	r3, r3
}
  10a514:	e1a00003 	mov	r0, r3
  10a518:	e28bd000 	add	sp, fp, #0
  10a51c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10a520:	e12fff1e 	bx	lr

0010a524 <buffer_empty>:

static int buffer_empty()
{
  10a524:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10a528:	e28db000 	add	fp, sp, #0
    return input_ptr == output_ptr;
  10a52c:	e30d3a54 	movw	r3, #55892	; 0xda54
  10a530:	e3403014 	movt	r3, #20
  10a534:	e5932000 	ldr	r2, [r3]
  10a538:	e30d3a58 	movw	r3, #55896	; 0xda58
  10a53c:	e3403014 	movt	r3, #20
  10a540:	e5933000 	ldr	r3, [r3]
  10a544:	e1520003 	cmp	r2, r3
  10a548:	03a03001 	moveq	r3, #1
  10a54c:	13a03000 	movne	r3, #0
  10a550:	e6ef3073 	uxtb	r3, r3
}
  10a554:	e1a00003 	mov	r0, r3
  10a558:	e28bd000 	add	sp, fp, #0
  10a55c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10a560:	e12fff1e 	bx	lr

0010a564 <buffer_enqueue>:

static int buffer_enqueue(void *data)
{
  10a564:	e92d4800 	push	{fp, lr}
  10a568:	e28db004 	add	fp, sp, #4
  10a56c:	e24dd008 	sub	sp, sp, #8
  10a570:	e50b0008 	str	r0, [fp, #-8]
    if (buffer_full())
  10a574:	ebffffd0 	bl	10a4bc <buffer_full>
  10a578:	e1a03000 	mov	r3, r0
  10a57c:	e3530000 	cmp	r3, #0
  10a580:	0a000001 	beq	10a58c <buffer_enqueue+0x28>
    {
        return -1;
  10a584:	e3e03000 	mvn	r3, #0
  10a588:	ea000017 	b	10a5ec <buffer_enqueue+0x88>
    }

    INPUT_buffer[input_ptr] = data;
  10a58c:	e30d3a54 	movw	r3, #55892	; 0xda54
  10a590:	e3403014 	movt	r3, #20
  10a594:	e5932000 	ldr	r2, [r3]
  10a598:	e30d3a48 	movw	r3, #55880	; 0xda48
  10a59c:	e3403014 	movt	r3, #20
  10a5a0:	e51b1008 	ldr	r1, [fp, #-8]
  10a5a4:	e7831102 	str	r1, [r3, r2, lsl #2]
    input_ptr = (input_ptr + 1) % INPUT_BUF_LEN;
  10a5a8:	e30d3a54 	movw	r3, #55892	; 0xda54
  10a5ac:	e3403014 	movt	r3, #20
  10a5b0:	e5933000 	ldr	r3, [r3]
  10a5b4:	e2831001 	add	r1, r3, #1
  10a5b8:	e3053556 	movw	r3, #21846	; 0x5556
  10a5bc:	e3453555 	movt	r3, #21845	; 0x5555
  10a5c0:	e0c32391 	smull	r2, r3, r1, r3
  10a5c4:	e1a00fc1 	asr	r0, r1, #31
  10a5c8:	e0432000 	sub	r2, r3, r0
  10a5cc:	e1a03002 	mov	r3, r2
  10a5d0:	e1a03083 	lsl	r3, r3, #1
  10a5d4:	e0833002 	add	r3, r3, r2
  10a5d8:	e0412003 	sub	r2, r1, r3
  10a5dc:	e30d3a54 	movw	r3, #55892	; 0xda54
  10a5e0:	e3403014 	movt	r3, #20
  10a5e4:	e5832000 	str	r2, [r3]
    // printf("e %d\n", input_ptr);

    return 0;
  10a5e8:	e3a03000 	mov	r3, #0
}
  10a5ec:	e1a00003 	mov	r0, r3
  10a5f0:	e24bd004 	sub	sp, fp, #4
  10a5f4:	e8bd8800 	pop	{fp, pc}

0010a5f8 <buffer_dequeue>:

static void* buffer_dequeue()
{
  10a5f8:	e92d4800 	push	{fp, lr}
  10a5fc:	e28db004 	add	fp, sp, #4
  10a600:	e24dd008 	sub	sp, sp, #8
    if (buffer_empty())
  10a604:	ebffffc6 	bl	10a524 <buffer_empty>
  10a608:	e1a03000 	mov	r3, r0
  10a60c:	e3530000 	cmp	r3, #0
  10a610:	0a000001 	beq	10a61c <buffer_dequeue+0x24>
    {
        return RT_NULL;
  10a614:	e3a03000 	mov	r3, #0
  10a618:	ea000017 	b	10a67c <buffer_dequeue+0x84>
    }

    void *res = INPUT_buffer[output_ptr];
  10a61c:	e30d3a58 	movw	r3, #55896	; 0xda58
  10a620:	e3403014 	movt	r3, #20
  10a624:	e5932000 	ldr	r2, [r3]
  10a628:	e30d3a48 	movw	r3, #55880	; 0xda48
  10a62c:	e3403014 	movt	r3, #20
  10a630:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  10a634:	e50b3008 	str	r3, [fp, #-8]
    output_ptr = (output_ptr + 1) % INPUT_BUF_LEN;
  10a638:	e30d3a58 	movw	r3, #55896	; 0xda58
  10a63c:	e3403014 	movt	r3, #20
  10a640:	e5933000 	ldr	r3, [r3]
  10a644:	e2831001 	add	r1, r3, #1
  10a648:	e3053556 	movw	r3, #21846	; 0x5556
  10a64c:	e3453555 	movt	r3, #21845	; 0x5555
  10a650:	e0c32391 	smull	r2, r3, r1, r3
  10a654:	e1a00fc1 	asr	r0, r1, #31
  10a658:	e0432000 	sub	r2, r3, r0
  10a65c:	e1a03002 	mov	r3, r2
  10a660:	e1a03083 	lsl	r3, r3, #1
  10a664:	e0833002 	add	r3, r3, r2
  10a668:	e0412003 	sub	r2, r1, r3
  10a66c:	e30d3a58 	movw	r3, #55896	; 0xda58
  10a670:	e3403014 	movt	r3, #20
  10a674:	e5832000 	str	r2, [r3]
    // printf("d %d\n", output_ptr);

    return res;
  10a678:	e51b3008 	ldr	r3, [fp, #-8]
}
  10a67c:	e1a00003 	mov	r0, r3
  10a680:	e24bd004 	sub	sp, fp, #4
  10a684:	e8bd8800 	pop	{fp, pc}

0010a688 <tcpip_input_timer_entry>:

#define INPUT_NOTIFICATION 0x01
sys_mbox_t * mbox_global = 0;
void tcpip_input_timer_entry()
{
  10a688:	e92d4800 	push	{fp, lr}
  10a68c:	e28db004 	add	fp, sp, #4
    while (1)
    {
        rt_thread_mdelay(1);
  10a690:	e3a00001 	mov	r0, #1
  10a694:	ebffddf8 	bl	101e7c <rt_thread_mdelay>
        if (mbox_global && !buffer_empty())
  10a698:	e30d3a44 	movw	r3, #55876	; 0xda44
  10a69c:	e3403014 	movt	r3, #20
  10a6a0:	e5933000 	ldr	r3, [r3]
  10a6a4:	e3530000 	cmp	r3, #0
  10a6a8:	0afffff8 	beq	10a690 <tcpip_input_timer_entry+0x8>
  10a6ac:	ebffff9c 	bl	10a524 <buffer_empty>
  10a6b0:	e1a03000 	mov	r3, r0
  10a6b4:	e3530000 	cmp	r3, #0
  10a6b8:	1afffff4 	bne	10a690 <tcpip_input_timer_entry+0x8>
        {
            rt_mb_send(*mbox_global, INPUT_NOTIFICATION);
  10a6bc:	e30d3a44 	movw	r3, #55876	; 0xda44
  10a6c0:	e3403014 	movt	r3, #20
  10a6c4:	e5933000 	ldr	r3, [r3]
  10a6c8:	e5933000 	ldr	r3, [r3]
  10a6cc:	e3a01001 	mov	r1, #1
  10a6d0:	e1a00003 	mov	r0, r3
  10a6d4:	ebffdbca 	bl	101604 <rt_mb_send>
        rt_thread_mdelay(1);
  10a6d8:	eaffffec 	b	10a690 <tcpip_input_timer_entry+0x8>

0010a6dc <lwip_system_init>:
    }
}

extern int eth_system_device_init_private(void);
int lwip_system_init(void)
{
  10a6dc:	e92d4800 	push	{fp, lr}
  10a6e0:	e28db004 	add	fp, sp, #4
  10a6e4:	e24dd010 	sub	sp, sp, #16
    struct rt_semaphore *done_sem;
    static rt_bool_t init_ok = RT_FALSE;

    if (init_ok)
  10a6e8:	e30d3a5c 	movw	r3, #55900	; 0xda5c
  10a6ec:	e3403014 	movt	r3, #20
  10a6f0:	e5933000 	ldr	r3, [r3]
  10a6f4:	e3530000 	cmp	r3, #0
  10a6f8:	0a000004 	beq	10a710 <lwip_system_init+0x34>
    {
        rt_kprintf("lwip system already init.\n");
  10a6fc:	e3060260 	movw	r0, #25184	; 0x6260
  10a700:	e3400014 	movt	r0, #20
  10a704:	ebffe282 	bl	103114 <rt_kprintf>
        return 0;
  10a708:	e3a03000 	mov	r3, #0
  10a70c:	ea00003c 	b	10a804 <lwip_system_init+0x128>
    }

    eth_system_device_init_private();
  10a710:	eb007d93 	bl	129d64 <eth_system_device_init_private>

    /* set default netif to NULL */
    netif_default = RT_NULL;
  10a714:	e30c3a28 	movw	r3, #51752	; 0xca28
  10a718:	e3403015 	movt	r3, #21
  10a71c:	e3a02000 	mov	r2, #0
  10a720:	e5832000 	str	r2, [r3]
    done_sem = rt_sem_create("done", 0, RT_IPC_FLAG_FIFO);
  10a724:	e3a02000 	mov	r2, #0
  10a728:	e3a01000 	mov	r1, #0
  10a72c:	e306027c 	movw	r0, #25212	; 0x627c
  10a730:	e3400014 	movt	r0, #20
  10a734:	ebffda2b 	bl	100fe8 <rt_sem_create>
  10a738:	e50b0008 	str	r0, [fp, #-8]

    if (done_sem == RT_NULL)
  10a73c:	e51b3008 	ldr	r3, [fp, #-8]
  10a740:	e3530000 	cmp	r3, #0
  10a744:	1a000008 	bne	10a76c <lwip_system_init+0x90>
    {
        LWIP_ASSERT("Failed to create semaphore", 0);
  10a748:	e3060284 	movw	r0, #25220	; 0x6284
  10a74c:	e3400014 	movt	r0, #20
  10a750:	ebffe26f 	bl	103114 <rt_kprintf>
  10a754:	e3a01095 	mov	r1, #149	; 0x95
  10a758:	e30602a0 	movw	r0, #25248	; 0x62a0
  10a75c:	e3400014 	movt	r0, #20
  10a760:	eb000262 	bl	10b0f0 <sys_arch_assert>

        return -1;
  10a764:	e3e03000 	mvn	r3, #0
  10a768:	ea000025 	b	10a804 <lwip_system_init+0x128>
    }

    tcpip_init(tcpip_init_done_callback, (void *)done_sem);
  10a76c:	e51b1008 	ldr	r1, [fp, #-8]
  10a770:	e30a0498 	movw	r0, #42136	; 0xa498
  10a774:	e3400010 	movt	r0, #16
  10a778:	eb002f3b 	bl	11646c <tcpip_init>

    /* waiting for initialization done */
    if (rt_sem_take(done_sem, RT_WAITING_FOREVER) != RT_EOK)
  10a77c:	e3e01000 	mvn	r1, #0
  10a780:	e51b0008 	ldr	r0, [fp, #-8]
  10a784:	ebffdaca 	bl	1012b4 <rt_sem_take>
  10a788:	e1a03000 	mov	r3, r0
  10a78c:	e3530000 	cmp	r3, #0
  10a790:	0a000003 	beq	10a7a4 <lwip_system_init+0xc8>
    {
        rt_sem_delete(done_sem);
  10a794:	e51b0008 	ldr	r0, [fp, #-8]
  10a798:	ebffda5d 	bl	101114 <rt_sem_delete>

        return -1;
  10a79c:	e3e03000 	mvn	r3, #0
  10a7a0:	ea000017 	b	10a804 <lwip_system_init+0x128>
    }
    rt_sem_delete(done_sem);
  10a7a4:	e51b0008 	ldr	r0, [fp, #-8]
  10a7a8:	ebffda59 	bl	101114 <rt_sem_delete>

        netifapi_netif_set_addr(netif_default, &ipaddr, &netmask, &gw);
    }
#endif

    rt_thread_t tid = rt_thread_create("tcpip_input_timer", tcpip_input_timer_entry, NULL, 1024, 25, 10); 
  10a7ac:	e3a0300a 	mov	r3, #10
  10a7b0:	e58d3004 	str	r3, [sp, #4]
  10a7b4:	e3a03019 	mov	r3, #25
  10a7b8:	e58d3000 	str	r3, [sp]
  10a7bc:	e3a03b01 	mov	r3, #1024	; 0x400
  10a7c0:	e3a02000 	mov	r2, #0
  10a7c4:	e30a1688 	movw	r1, #42632	; 0xa688
  10a7c8:	e3401010 	movt	r1, #16
  10a7cc:	e30602d0 	movw	r0, #25296	; 0x62d0
  10a7d0:	e3400014 	movt	r0, #20
  10a7d4:	ebffde46 	bl	1020f4 <rt_thread_create>
  10a7d8:	e50b000c 	str	r0, [fp, #-12]
    if (tid) rt_thread_startup(tid);
  10a7dc:	e51b300c 	ldr	r3, [fp, #-12]
  10a7e0:	e3530000 	cmp	r3, #0
  10a7e4:	0a000001 	beq	10a7f0 <lwip_system_init+0x114>
  10a7e8:	e51b000c 	ldr	r0, [fp, #-12]
  10a7ec:	ebffde75 	bl	1021c8 <rt_thread_startup>

    init_ok = RT_TRUE;
  10a7f0:	e30d3a5c 	movw	r3, #55900	; 0xda5c
  10a7f4:	e3403014 	movt	r3, #20
  10a7f8:	e3a02001 	mov	r2, #1
  10a7fc:	e5832000 	str	r2, [r3]

    return 0;
  10a800:	e3a03000 	mov	r3, #0
}
  10a804:	e1a00003 	mov	r0, r3
  10a808:	e24bd004 	sub	sp, fp, #4
  10a80c:	e8bd8800 	pop	{fp, pc}

0010a810 <sys_init>:

void sys_init(void)
{
  10a810:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10a814:	e28db000 	add	fp, sp, #0
    /* nothing on RT-Thread porting */
}
  10a818:	e320f000 	nop	{0}
  10a81c:	e28bd000 	add	sp, fp, #0
  10a820:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10a824:	e12fff1e 	bx	lr

0010a828 <lwip_sys_init>:

void lwip_sys_init(void)
{
  10a828:	e92d4800 	push	{fp, lr}
  10a82c:	e28db004 	add	fp, sp, #4
    lwip_system_init();
  10a830:	ebffffa9 	bl	10a6dc <lwip_system_init>
}
  10a834:	e320f000 	nop	{0}
  10a838:	e8bd8800 	pop	{fp, pc}

0010a83c <sys_sem_new>:
 * Create a new semaphore
 *
 * @return the operation status, ERR_OK on OK; others on error
 */
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
  10a83c:	e92d4800 	push	{fp, lr}
  10a840:	e28db004 	add	fp, sp, #4
  10a844:	e24dd020 	sub	sp, sp, #32
  10a848:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10a84c:	e1a03001 	mov	r3, r1
  10a850:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
    char tname[RT_NAME_MAX];
    sys_sem_t tmpsem;

    RT_DEBUG_NOT_IN_INTERRUPT;

    rt_snprintf(tname, RT_NAME_MAX, "%s%d", SYS_LWIP_SEM_NAME, counter);
  10a854:	e30d3a60 	movw	r3, #55904	; 0xda60
  10a858:	e3403014 	movt	r3, #20
  10a85c:	e1d330b0 	ldrh	r3, [r3]
  10a860:	e24b0010 	sub	r0, fp, #16
  10a864:	e58d3000 	str	r3, [sp]
  10a868:	e30632e4 	movw	r3, #25316	; 0x62e4
  10a86c:	e3403014 	movt	r3, #20
  10a870:	e30622e8 	movw	r2, #25320	; 0x62e8
  10a874:	e3402014 	movt	r2, #20
  10a878:	e3a01008 	mov	r1, #8
  10a87c:	ebffe1ee 	bl	10303c <rt_snprintf>
    counter ++;
  10a880:	e30d3a60 	movw	r3, #55904	; 0xda60
  10a884:	e3403014 	movt	r3, #20
  10a888:	e1d330b0 	ldrh	r3, [r3]
  10a88c:	e2833001 	add	r3, r3, #1
  10a890:	e6ff2073 	uxth	r2, r3
  10a894:	e30d3a60 	movw	r3, #55904	; 0xda60
  10a898:	e3403014 	movt	r3, #20
  10a89c:	e1c320b0 	strh	r2, [r3]

    tmpsem = rt_sem_create(tname, count, RT_IPC_FLAG_FIFO);
  10a8a0:	e55b1019 	ldrb	r1, [fp, #-25]	; 0xffffffe7
  10a8a4:	e24b3010 	sub	r3, fp, #16
  10a8a8:	e3a02000 	mov	r2, #0
  10a8ac:	e1a00003 	mov	r0, r3
  10a8b0:	ebffd9cc 	bl	100fe8 <rt_sem_create>
  10a8b4:	e50b0008 	str	r0, [fp, #-8]
    if (tmpsem == RT_NULL)
  10a8b8:	e51b3008 	ldr	r3, [fp, #-8]
  10a8bc:	e3530000 	cmp	r3, #0
  10a8c0:	1a000001 	bne	10a8cc <sys_sem_new+0x90>
        return ERR_MEM;
  10a8c4:	e3e03000 	mvn	r3, #0
  10a8c8:	ea000003 	b	10a8dc <sys_sem_new+0xa0>
    else
    {
        *sem = tmpsem;
  10a8cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10a8d0:	e51b2008 	ldr	r2, [fp, #-8]
  10a8d4:	e5832000 	str	r2, [r3]

        return ERR_OK;
  10a8d8:	e3a03000 	mov	r3, #0
    }
}
  10a8dc:	e1a00003 	mov	r0, r3
  10a8e0:	e24bd004 	sub	sp, fp, #4
  10a8e4:	e8bd8800 	pop	{fp, pc}

0010a8e8 <sys_sem_free>:

/*
 * Deallocate a semaphore
 */
void sys_sem_free(sys_sem_t *sem)
{
  10a8e8:	e92d4800 	push	{fp, lr}
  10a8ec:	e28db004 	add	fp, sp, #4
  10a8f0:	e24dd008 	sub	sp, sp, #8
  10a8f4:	e50b0008 	str	r0, [fp, #-8]
    RT_DEBUG_NOT_IN_INTERRUPT;
    rt_sem_delete(*sem);
  10a8f8:	e51b3008 	ldr	r3, [fp, #-8]
  10a8fc:	e5933000 	ldr	r3, [r3]
  10a900:	e1a00003 	mov	r0, r3
  10a904:	ebffda02 	bl	101114 <rt_sem_delete>
}
  10a908:	e320f000 	nop	{0}
  10a90c:	e24bd004 	sub	sp, fp, #4
  10a910:	e8bd8800 	pop	{fp, pc}

0010a914 <sys_sem_signal>:

/*
 * Signal a semaphore
 */
void sys_sem_signal(sys_sem_t *sem)
{
  10a914:	e92d4800 	push	{fp, lr}
  10a918:	e28db004 	add	fp, sp, #4
  10a91c:	e24dd008 	sub	sp, sp, #8
  10a920:	e50b0008 	str	r0, [fp, #-8]
    rt_sem_release(*sem);
  10a924:	e51b3008 	ldr	r3, [fp, #-8]
  10a928:	e5933000 	ldr	r3, [r3]
  10a92c:	e1a00003 	mov	r0, r3
  10a930:	ebffda43 	bl	101244 <rt_sem_release>
}
  10a934:	e320f000 	nop	{0}
  10a938:	e24bd004 	sub	sp, fp, #4
  10a93c:	e8bd8800 	pop	{fp, pc}

0010a940 <sys_arch_sem_wait>:
 *         spent waiting for the semaphore to be signaled; If the semaphore isn't signaled
 *         within the specified time, it will return SYS_ARCH_TIMEOUT; If the thread doesn't
 *         wait for the semaphore, it will return zero
 */
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
  10a940:	e92d4800 	push	{fp, lr}
  10a944:	e28db004 	add	fp, sp, #4
  10a948:	e24dd018 	sub	sp, sp, #24
  10a94c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10a950:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    u32_t tick;

    RT_DEBUG_NOT_IN_INTERRUPT;

    /* get the begin tick */
    tick = rt_tick_get();
  10a954:	ebffdd41 	bl	101e60 <rt_tick_get>
  10a958:	e50b000c 	str	r0, [fp, #-12]
    if (timeout == 0)
  10a95c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10a960:	e3530000 	cmp	r3, #0
  10a964:	1a000002 	bne	10a974 <sys_arch_sem_wait+0x34>
        t = RT_WAITING_FOREVER;
  10a968:	e3e03000 	mvn	r3, #0
  10a96c:	e50b3008 	str	r3, [fp, #-8]
  10a970:	ea000007 	b	10a994 <sys_arch_sem_wait+0x54>
    else
    {
        /* convert msecond to os tick */
        if (timeout < (1000/RT_TICK_PER_SECOND))
  10a974:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10a978:	e3530000 	cmp	r3, #0
  10a97c:	1a000002 	bne	10a98c <sys_arch_sem_wait+0x4c>
            t = 1;
  10a980:	e3a03001 	mov	r3, #1
  10a984:	e50b3008 	str	r3, [fp, #-8]
  10a988:	ea000001 	b	10a994 <sys_arch_sem_wait+0x54>
        else
            t = timeout / (1000/RT_TICK_PER_SECOND);
  10a98c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10a990:	e50b3008 	str	r3, [fp, #-8]
    }

    ret = rt_sem_take(*sem, t);
  10a994:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10a998:	e5933000 	ldr	r3, [r3]
  10a99c:	e51b1008 	ldr	r1, [fp, #-8]
  10a9a0:	e1a00003 	mov	r0, r3
  10a9a4:	ebffda42 	bl	1012b4 <rt_sem_take>
  10a9a8:	e50b0010 	str	r0, [fp, #-16]

    if (ret == -RT_ETIMEOUT)
  10a9ac:	e51b3010 	ldr	r3, [fp, #-16]
  10a9b0:	e3730002 	cmn	r3, #2
  10a9b4:	1a000001 	bne	10a9c0 <sys_arch_sem_wait+0x80>
        return SYS_ARCH_TIMEOUT;
  10a9b8:	e3e03000 	mvn	r3, #0
  10a9bc:	ea00000f 	b	10aa00 <sys_arch_sem_wait+0xc0>
    else
    {
        if (ret == RT_EOK)
  10a9c0:	e51b3010 	ldr	r3, [fp, #-16]
  10a9c4:	e3530000 	cmp	r3, #0
  10a9c8:	1a000001 	bne	10a9d4 <sys_arch_sem_wait+0x94>
            ret = 1;
  10a9cc:	e3a03001 	mov	r3, #1
  10a9d0:	e50b3010 	str	r3, [fp, #-16]
    }

    /* get elapse msecond */
    tick = rt_tick_get() - tick;
  10a9d4:	ebffdd21 	bl	101e60 <rt_tick_get>
  10a9d8:	e1a02000 	mov	r2, r0
  10a9dc:	e51b300c 	ldr	r3, [fp, #-12]
  10a9e0:	e0423003 	sub	r3, r2, r3
  10a9e4:	e50b300c 	str	r3, [fp, #-12]

    /* convert tick to msecond */
    tick = tick * (1000 / RT_TICK_PER_SECOND);
    if (tick == 0)
  10a9e8:	e51b300c 	ldr	r3, [fp, #-12]
  10a9ec:	e3530000 	cmp	r3, #0
  10a9f0:	1a000001 	bne	10a9fc <sys_arch_sem_wait+0xbc>
        tick = 1;
  10a9f4:	e3a03001 	mov	r3, #1
  10a9f8:	e50b300c 	str	r3, [fp, #-12]

    return tick;
  10a9fc:	e51b300c 	ldr	r3, [fp, #-12]
}
  10aa00:	e1a00003 	mov	r0, r3
  10aa04:	e24bd004 	sub	sp, fp, #4
  10aa08:	e8bd8800 	pop	{fp, pc}

0010aa0c <sys_sem_valid>:
#ifndef sys_sem_valid
/** Check if a semaphore is valid/allocated:
 *  return 1 for valid, 0 for invalid
 */
rt_ubase_t sys_sem_valid(sys_sem_t *sem)
{
  10aa0c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10aa10:	e28db000 	add	fp, sp, #0
  10aa14:	e24dd00c 	sub	sp, sp, #12
  10aa18:	e50b0008 	str	r0, [fp, #-8]
    return (rt_ubase_t)(*sem);
  10aa1c:	e51b3008 	ldr	r3, [fp, #-8]
  10aa20:	e5933000 	ldr	r3, [r3]
}
  10aa24:	e1a00003 	mov	r0, r3
  10aa28:	e28bd000 	add	sp, fp, #0
  10aa2c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10aa30:	e12fff1e 	bx	lr

0010aa34 <sys_sem_set_invalid>:

#ifndef sys_sem_set_invalid
/** Set a semaphore invalid so that sys_sem_valid returns 0
 */
void sys_sem_set_invalid(sys_sem_t *sem)
{
  10aa34:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10aa38:	e28db000 	add	fp, sp, #0
  10aa3c:	e24dd00c 	sub	sp, sp, #12
  10aa40:	e50b0008 	str	r0, [fp, #-8]
    *sem = RT_NULL;
  10aa44:	e51b3008 	ldr	r3, [fp, #-8]
  10aa48:	e3a02000 	mov	r2, #0
  10aa4c:	e5832000 	str	r2, [r3]
}
  10aa50:	e320f000 	nop	{0}
  10aa54:	e28bd000 	add	sp, fp, #0
  10aa58:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10aa5c:	e12fff1e 	bx	lr

0010aa60 <sys_mutex_new>:
/** Create a new mutex
 * @param mutex pointer to the mutex to create
 * @return a new mutex
 */
err_t sys_mutex_new(sys_mutex_t *mutex)
{
  10aa60:	e92d4800 	push	{fp, lr}
  10aa64:	e28db004 	add	fp, sp, #4
  10aa68:	e24dd020 	sub	sp, sp, #32
  10aa6c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    char tname[RT_NAME_MAX];
    sys_mutex_t tmpmutex;

    RT_DEBUG_NOT_IN_INTERRUPT;

    rt_snprintf(tname, RT_NAME_MAX, "%s%d", SYS_LWIP_MUTEX_NAME, counter);
  10aa70:	e30d3a62 	movw	r3, #55906	; 0xda62
  10aa74:	e3403014 	movt	r3, #20
  10aa78:	e1d330b0 	ldrh	r3, [r3]
  10aa7c:	e24b0010 	sub	r0, fp, #16
  10aa80:	e58d3000 	str	r3, [sp]
  10aa84:	e30632f0 	movw	r3, #25328	; 0x62f0
  10aa88:	e3403014 	movt	r3, #20
  10aa8c:	e30622e8 	movw	r2, #25320	; 0x62e8
  10aa90:	e3402014 	movt	r2, #20
  10aa94:	e3a01008 	mov	r1, #8
  10aa98:	ebffe167 	bl	10303c <rt_snprintf>
    counter ++;
  10aa9c:	e30d3a62 	movw	r3, #55906	; 0xda62
  10aaa0:	e3403014 	movt	r3, #20
  10aaa4:	e1d330b0 	ldrh	r3, [r3]
  10aaa8:	e2833001 	add	r3, r3, #1
  10aaac:	e6ff2073 	uxth	r2, r3
  10aab0:	e30d3a62 	movw	r3, #55906	; 0xda62
  10aab4:	e3403014 	movt	r3, #20
  10aab8:	e1c320b0 	strh	r2, [r3]

    tmpmutex = rt_mutex_create(tname, RT_IPC_FLAG_FIFO);
  10aabc:	e24b3010 	sub	r3, fp, #16
  10aac0:	e3a01000 	mov	r1, #0
  10aac4:	e1a00003 	mov	r0, r3
  10aac8:	ebffd876 	bl	100ca8 <rt_mutex_create>
  10aacc:	e50b0008 	str	r0, [fp, #-8]
    if (tmpmutex == RT_NULL)
  10aad0:	e51b3008 	ldr	r3, [fp, #-8]
  10aad4:	e3530000 	cmp	r3, #0
  10aad8:	1a000001 	bne	10aae4 <sys_mutex_new+0x84>
        return ERR_MEM;
  10aadc:	e3e03000 	mvn	r3, #0
  10aae0:	ea000003 	b	10aaf4 <sys_mutex_new+0x94>
    else
    {
        *mutex = tmpmutex;
  10aae4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10aae8:	e51b2008 	ldr	r2, [fp, #-8]
  10aaec:	e5832000 	str	r2, [r3]

        return ERR_OK;
  10aaf0:	e3a03000 	mov	r3, #0
    }
}
  10aaf4:	e1a00003 	mov	r0, r3
  10aaf8:	e24bd004 	sub	sp, fp, #4
  10aafc:	e8bd8800 	pop	{fp, pc}

0010ab00 <sys_mutex_lock>:

/** Lock a mutex
 * @param mutex the mutex to lock
 */
void sys_mutex_lock(sys_mutex_t *mutex)
{
  10ab00:	e92d4800 	push	{fp, lr}
  10ab04:	e28db004 	add	fp, sp, #4
  10ab08:	e24dd008 	sub	sp, sp, #8
  10ab0c:	e50b0008 	str	r0, [fp, #-8]
    RT_DEBUG_NOT_IN_INTERRUPT;
    rt_mutex_take(*mutex, RT_WAITING_FOREVER);
  10ab10:	e51b3008 	ldr	r3, [fp, #-8]
  10ab14:	e5933000 	ldr	r3, [r3]
  10ab18:	e3e01000 	mvn	r1, #0
  10ab1c:	e1a00003 	mov	r0, r3
  10ab20:	ebffd8f6 	bl	100f00 <rt_mutex_take>

    return;
  10ab24:	e320f000 	nop	{0}
}
  10ab28:	e24bd004 	sub	sp, fp, #4
  10ab2c:	e8bd8800 	pop	{fp, pc}

0010ab30 <sys_mutex_unlock>:

/** Unlock a mutex
 * @param mutex the mutex to unlock
 */
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  10ab30:	e92d4800 	push	{fp, lr}
  10ab34:	e28db004 	add	fp, sp, #4
  10ab38:	e24dd008 	sub	sp, sp, #8
  10ab3c:	e50b0008 	str	r0, [fp, #-8]
    rt_mutex_release(*mutex);
  10ab40:	e51b3008 	ldr	r3, [fp, #-8]
  10ab44:	e5933000 	ldr	r3, [r3]
  10ab48:	e1a00003 	mov	r0, r3
  10ab4c:	ebffd909 	bl	100f78 <rt_mutex_release>
}
  10ab50:	e320f000 	nop	{0}
  10ab54:	e24bd004 	sub	sp, fp, #4
  10ab58:	e8bd8800 	pop	{fp, pc}

0010ab5c <sys_mutex_free>:

/** Delete a semaphore
 * @param mutex the mutex to delete
 */
void sys_mutex_free(sys_mutex_t *mutex)
{
  10ab5c:	e92d4800 	push	{fp, lr}
  10ab60:	e28db004 	add	fp, sp, #4
  10ab64:	e24dd008 	sub	sp, sp, #8
  10ab68:	e50b0008 	str	r0, [fp, #-8]
    RT_DEBUG_NOT_IN_INTERRUPT;

    rt_mutex_delete(*mutex);
  10ab6c:	e51b3008 	ldr	r3, [fp, #-8]
  10ab70:	e5933000 	ldr	r3, [r3]
  10ab74:	e1a00003 	mov	r0, r3
  10ab78:	ebffd894 	bl	100dd0 <rt_mutex_delete>
}
  10ab7c:	e320f000 	nop	{0}
  10ab80:	e24bd004 	sub	sp, fp, #4
  10ab84:	e8bd8800 	pop	{fp, pc}

0010ab88 <sys_mutex_valid>:
#ifndef sys_mutex_valid
/** Check if a mutex is valid/allocated:
 *  return 1 for valid, 0 for invalid
 */
rt_base_t sys_mutex_valid(sys_mutex_t *mutex)
{
  10ab88:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10ab8c:	e28db000 	add	fp, sp, #0
  10ab90:	e24dd00c 	sub	sp, sp, #12
  10ab94:	e50b0008 	str	r0, [fp, #-8]
    return (rt_base_t)(*mutex);
  10ab98:	e51b3008 	ldr	r3, [fp, #-8]
  10ab9c:	e5933000 	ldr	r3, [r3]
}
  10aba0:	e1a00003 	mov	r0, r3
  10aba4:	e28bd000 	add	sp, fp, #0
  10aba8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10abac:	e12fff1e 	bx	lr

0010abb0 <sys_mutex_set_invalid>:

#ifndef sys_mutex_set_invalid
/** Set a mutex invalid so that sys_mutex_valid returns 0
 */
void sys_mutex_set_invalid(sys_mutex_t *mutex)
{
  10abb0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10abb4:	e28db000 	add	fp, sp, #0
  10abb8:	e24dd00c 	sub	sp, sp, #12
  10abbc:	e50b0008 	str	r0, [fp, #-8]
    *mutex = RT_NULL;
  10abc0:	e51b3008 	ldr	r3, [fp, #-8]
  10abc4:	e3a02000 	mov	r2, #0
  10abc8:	e5832000 	str	r2, [r3]
}
  10abcc:	e320f000 	nop	{0}
  10abd0:	e28bd000 	add	sp, fp, #0
  10abd4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10abd8:	e12fff1e 	bx	lr

0010abdc <sys_mbox_new>:
 * Create an empty mailbox for maximum "size" elements
 *
 * @return the operation status, ERR_OK on OK; others on error
 */
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
  10abdc:	e92d4800 	push	{fp, lr}
  10abe0:	e28db004 	add	fp, sp, #4
  10abe4:	e24dd020 	sub	sp, sp, #32
  10abe8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10abec:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    if (size == RT_LWIP_TCPTHREAD_MBOX_SIZE)
  10abf0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10abf4:	e3002101 	movw	r2, #257	; 0x101
  10abf8:	e1530002 	cmp	r3, r2
  10abfc:	1a000006 	bne	10ac1c <sys_mbox_new+0x40>
    {
        printf("set mbox_global\n");
  10ac00:	e30602f4 	movw	r0, #25332	; 0x62f4
  10ac04:	e3400014 	movt	r0, #20
  10ac08:	eb00ce78 	bl	13e5f0 <puts>
        mbox_global = mbox;
  10ac0c:	e30d3a44 	movw	r3, #55876	; 0xda44
  10ac10:	e3403014 	movt	r3, #20
  10ac14:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10ac18:	e5832000 	str	r2, [r3]
    char tname[RT_NAME_MAX];
    sys_mbox_t tmpmbox;

    RT_DEBUG_NOT_IN_INTERRUPT;

    rt_snprintf(tname, RT_NAME_MAX, "%s%d", SYS_LWIP_MBOX_NAME, counter);
  10ac1c:	e30d3a64 	movw	r3, #55908	; 0xda64
  10ac20:	e3403014 	movt	r3, #20
  10ac24:	e1d330b0 	ldrh	r3, [r3]
  10ac28:	e24b0010 	sub	r0, fp, #16
  10ac2c:	e58d3000 	str	r3, [sp]
  10ac30:	e3063304 	movw	r3, #25348	; 0x6304
  10ac34:	e3403014 	movt	r3, #20
  10ac38:	e30622e8 	movw	r2, #25320	; 0x62e8
  10ac3c:	e3402014 	movt	r2, #20
  10ac40:	e3a01008 	mov	r1, #8
  10ac44:	ebffe0fc 	bl	10303c <rt_snprintf>
    counter ++;
  10ac48:	e30d3a64 	movw	r3, #55908	; 0xda64
  10ac4c:	e3403014 	movt	r3, #20
  10ac50:	e1d330b0 	ldrh	r3, [r3]
  10ac54:	e2833001 	add	r3, r3, #1
  10ac58:	e6ff2073 	uxth	r2, r3
  10ac5c:	e30d3a64 	movw	r3, #55908	; 0xda64
  10ac60:	e3403014 	movt	r3, #20
  10ac64:	e1c320b0 	strh	r2, [r3]

    tmpmbox = rt_mb_create(tname, size, RT_IPC_FLAG_FIFO);
  10ac68:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  10ac6c:	e24b3010 	sub	r3, fp, #16
  10ac70:	e3a02000 	mov	r2, #0
  10ac74:	e1a00003 	mov	r0, r3
  10ac78:	ebffd9ab 	bl	10132c <rt_mb_create>
  10ac7c:	e50b0008 	str	r0, [fp, #-8]
    if (tmpmbox != RT_NULL)
  10ac80:	e51b3008 	ldr	r3, [fp, #-8]
  10ac84:	e3530000 	cmp	r3, #0
  10ac88:	0a000004 	beq	10aca0 <sys_mbox_new+0xc4>
    {
        *mbox = tmpmbox;
  10ac8c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10ac90:	e51b2008 	ldr	r2, [fp, #-8]
  10ac94:	e5832000 	str	r2, [r3]

        return ERR_OK;
  10ac98:	e3a03000 	mov	r3, #0
  10ac9c:	ea000000 	b	10aca4 <sys_mbox_new+0xc8>
    }

    return ERR_MEM;
  10aca0:	e3e03000 	mvn	r3, #0
}
  10aca4:	e1a00003 	mov	r0, r3
  10aca8:	e24bd004 	sub	sp, fp, #4
  10acac:	e8bd8800 	pop	{fp, pc}

0010acb0 <sys_mbox_free>:

/*
 * Deallocate a mailbox
 */
void sys_mbox_free(sys_mbox_t *mbox)
{
  10acb0:	e92d4800 	push	{fp, lr}
  10acb4:	e28db004 	add	fp, sp, #4
  10acb8:	e24dd008 	sub	sp, sp, #8
  10acbc:	e50b0008 	str	r0, [fp, #-8]
    RT_DEBUG_NOT_IN_INTERRUPT;

    rt_mb_delete(*mbox);
  10acc0:	e51b3008 	ldr	r3, [fp, #-8]
  10acc4:	e5933000 	ldr	r3, [r3]
  10acc8:	e1a00003 	mov	r0, r3
  10accc:	ebffd9e1 	bl	101458 <rt_mb_delete>

    return;
  10acd0:	e320f000 	nop	{0}
}
  10acd4:	e24bd004 	sub	sp, fp, #4
  10acd8:	e8bd8800 	pop	{fp, pc}

0010acdc <post_msg>:

rt_err_t post_msg(sys_mbox_t *mbox, void **msg)
{
  10acdc:	e92d4800 	push	{fp, lr}
  10ace0:	e28db004 	add	fp, sp, #4
  10ace4:	e24dd008 	sub	sp, sp, #8
  10ace8:	e50b0008 	str	r0, [fp, #-8]
  10acec:	e50b100c 	str	r1, [fp, #-12]
    if (mbox == mbox_global)
  10acf0:	e30d3a44 	movw	r3, #55876	; 0xda44
  10acf4:	e3403014 	movt	r3, #20
  10acf8:	e5933000 	ldr	r3, [r3]
  10acfc:	e51b2008 	ldr	r2, [fp, #-8]
  10ad00:	e1520003 	cmp	r2, r3
  10ad04:	1a000010 	bne	10ad4c <post_msg+0x70>
    {
        if (((struct tcpip_msg*)msg)->type == TCPIP_MSG_INPKT)
  10ad08:	e51b300c 	ldr	r3, [fp, #-12]
  10ad0c:	e5933000 	ldr	r3, [r3]
  10ad10:	e3530002 	cmp	r3, #2
  10ad14:	1a00000c 	bne	10ad4c <post_msg+0x70>
        {
            while (buffer_enqueue(msg) == -1)
  10ad18:	ea000004 	b	10ad30 <post_msg+0x54>
            {
                rt_mb_send(*mbox, INPUT_NOTIFICATION);
  10ad1c:	e51b3008 	ldr	r3, [fp, #-8]
  10ad20:	e5933000 	ldr	r3, [r3]
  10ad24:	e3a01001 	mov	r1, #1
  10ad28:	e1a00003 	mov	r0, r3
  10ad2c:	ebffda34 	bl	101604 <rt_mb_send>
            while (buffer_enqueue(msg) == -1)
  10ad30:	e51b000c 	ldr	r0, [fp, #-12]
  10ad34:	ebfffe0a 	bl	10a564 <buffer_enqueue>
  10ad38:	e1a03000 	mov	r3, r0
  10ad3c:	e3730001 	cmn	r3, #1
  10ad40:	0afffff5 	beq	10ad1c <post_msg+0x40>
            }

            return ERR_OK;
  10ad44:	e3a03000 	mov	r3, #0
  10ad48:	ea000006 	b	10ad68 <post_msg+0x8c>
        } 
    }

    return rt_mb_send_wait(*mbox, (rt_ubase_t)msg, RT_WAITING_FOREVER);
  10ad4c:	e51b3008 	ldr	r3, [fp, #-8]
  10ad50:	e5933000 	ldr	r3, [r3]
  10ad54:	e51b100c 	ldr	r1, [fp, #-12]
  10ad58:	e3e02000 	mvn	r2, #0
  10ad5c:	e1a00003 	mov	r0, r3
  10ad60:	ebffda08 	bl	101588 <rt_mb_send_wait>
  10ad64:	e1a03000 	mov	r3, r0
}
  10ad68:	e1a00003 	mov	r0, r3
  10ad6c:	e24bd004 	sub	sp, fp, #4
  10ad70:	e8bd8800 	pop	{fp, pc}

0010ad74 <fetch_msg>:

rt_err_t fetch_msg(sys_mbox_t *mbox, void **msg, u32_t t)
{
  10ad74:	e92d4800 	push	{fp, lr}
  10ad78:	e28db004 	add	fp, sp, #4
  10ad7c:	e24dd018 	sub	sp, sp, #24
  10ad80:	e50b0010 	str	r0, [fp, #-16]
  10ad84:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10ad88:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    if (mbox == mbox_global)
  10ad8c:	e30d3a44 	movw	r3, #55876	; 0xda44
  10ad90:	e3403014 	movt	r3, #20
  10ad94:	e5933000 	ldr	r3, [r3]
  10ad98:	e51b2010 	ldr	r2, [fp, #-16]
  10ad9c:	e1520003 	cmp	r2, r3
  10ada0:	1a000016 	bne	10ae00 <fetch_msg+0x8c>
    {
        rt_err_t ret;
        do
        {
            *msg = buffer_dequeue();
  10ada4:	ebfffe13 	bl	10a5f8 <buffer_dequeue>
  10ada8:	e1a02000 	mov	r2, r0
  10adac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10adb0:	e5832000 	str	r2, [r3]
            if (*msg)
  10adb4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10adb8:	e5933000 	ldr	r3, [r3]
  10adbc:	e3530000 	cmp	r3, #0
  10adc0:	0a000001 	beq	10adcc <fetch_msg+0x58>
            {
                return RT_EOK;
  10adc4:	e3a03000 	mov	r3, #0
  10adc8:	ea000013 	b	10ae1c <fetch_msg+0xa8>
            } 
            ret = rt_mb_recv(*mbox, (rt_ubase_t *)msg, t);
  10adcc:	e51b3010 	ldr	r3, [fp, #-16]
  10add0:	e5933000 	ldr	r3, [r3]
  10add4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10add8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10addc:	e1a00003 	mov	r0, r3
  10ade0:	ebffda25 	bl	10167c <rt_mb_recv>
  10ade4:	e50b0008 	str	r0, [fp, #-8]
        } while (*msg == (void*)INPUT_NOTIFICATION);
  10ade8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10adec:	e5933000 	ldr	r3, [r3]
  10adf0:	e3530001 	cmp	r3, #1
  10adf4:	0affffea 	beq	10ada4 <fetch_msg+0x30>

        return ret;
  10adf8:	e51b3008 	ldr	r3, [fp, #-8]
  10adfc:	ea000006 	b	10ae1c <fetch_msg+0xa8>
    }
    else 
    {
        return rt_mb_recv(*mbox, (rt_ubase_t *)msg, t); 
  10ae00:	e51b3010 	ldr	r3, [fp, #-16]
  10ae04:	e5933000 	ldr	r3, [r3]
  10ae08:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10ae0c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10ae10:	e1a00003 	mov	r0, r3
  10ae14:	ebffda18 	bl	10167c <rt_mb_recv>
  10ae18:	e1a03000 	mov	r3, r0
    }
}
  10ae1c:	e1a00003 	mov	r0, r3
  10ae20:	e24bd004 	sub	sp, fp, #4
  10ae24:	e8bd8800 	pop	{fp, pc}

0010ae28 <sys_mbox_post>:
 * -> blocks if full, only used from tasks not from ISR
 * @param mbox mbox to posts the message
 * @param msg message to post (ATTENTION: can be NULL)
 */
void sys_mbox_post(sys_mbox_t *mbox, void *msg)
{
  10ae28:	e92d4800 	push	{fp, lr}
  10ae2c:	e28db004 	add	fp, sp, #4
  10ae30:	e24dd008 	sub	sp, sp, #8
  10ae34:	e50b0008 	str	r0, [fp, #-8]
  10ae38:	e50b100c 	str	r1, [fp, #-12]
    RT_DEBUG_NOT_IN_INTERRUPT;

    // rt_mb_send_wait(*mbox, (rt_ubase_t)msg, RT_WAITING_FOREVER);
    post_msg(mbox, msg);
  10ae3c:	e51b100c 	ldr	r1, [fp, #-12]
  10ae40:	e51b0008 	ldr	r0, [fp, #-8]
  10ae44:	ebffffa4 	bl	10acdc <post_msg>

    return;
  10ae48:	e320f000 	nop	{0}
}
  10ae4c:	e24bd004 	sub	sp, fp, #4
  10ae50:	e8bd8800 	pop	{fp, pc}

0010ae54 <sys_mbox_trypost>:
 *
 * @return return ERR_OK if the "msg" is posted, ERR_MEM if the mailbox is full
 */

err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
  10ae54:	e92d4800 	push	{fp, lr}
  10ae58:	e28db004 	add	fp, sp, #4
  10ae5c:	e24dd008 	sub	sp, sp, #8
  10ae60:	e50b0008 	str	r0, [fp, #-8]
  10ae64:	e50b100c 	str	r1, [fp, #-12]
    return post_msg(mbox, msg);
  10ae68:	e51b100c 	ldr	r1, [fp, #-12]
  10ae6c:	e51b0008 	ldr	r0, [fp, #-8]
  10ae70:	ebffff99 	bl	10acdc <post_msg>
  10ae74:	e1a03000 	mov	r3, r0
  10ae78:	e6af3073 	sxtb	r3, r3
}
  10ae7c:	e1a00003 	mov	r0, r3
  10ae80:	e24bd004 	sub	sp, fp, #4
  10ae84:	e8bd8800 	pop	{fp, pc}

0010ae88 <sys_arch_mbox_fetch>:
 * @return time (in milliseconds) waited for a message, may be 0 if not waited
           or SYS_ARCH_TIMEOUT on timeout
 *         The returned time has to be accurate to prevent timer jitter!
 */
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
  10ae88:	e92d4800 	push	{fp, lr}
  10ae8c:	e28db004 	add	fp, sp, #4
  10ae90:	e24dd020 	sub	sp, sp, #32
  10ae94:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10ae98:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  10ae9c:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
    u32_t tick;

    RT_DEBUG_NOT_IN_INTERRUPT;

    /* get the begin tick */
    tick = rt_tick_get();
  10aea0:	ebffdbee 	bl	101e60 <rt_tick_get>
  10aea4:	e50b000c 	str	r0, [fp, #-12]

    if(timeout == 0)
  10aea8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10aeac:	e3530000 	cmp	r3, #0
  10aeb0:	1a000002 	bne	10aec0 <sys_arch_mbox_fetch+0x38>
        t = RT_WAITING_FOREVER;
  10aeb4:	e3e03000 	mvn	r3, #0
  10aeb8:	e50b3008 	str	r3, [fp, #-8]
  10aebc:	ea000007 	b	10aee0 <sys_arch_mbox_fetch+0x58>
    else
    {
        /* convirt msecond to os tick */
        if (timeout < (1000/RT_TICK_PER_SECOND))
  10aec0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10aec4:	e3530000 	cmp	r3, #0
  10aec8:	1a000002 	bne	10aed8 <sys_arch_mbox_fetch+0x50>
            t = 1;
  10aecc:	e3a03001 	mov	r3, #1
  10aed0:	e50b3008 	str	r3, [fp, #-8]
  10aed4:	ea000001 	b	10aee0 <sys_arch_mbox_fetch+0x58>
        else
            t = timeout / (1000/RT_TICK_PER_SECOND);
  10aed8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10aedc:	e50b3008 	str	r3, [fp, #-8]
    }

    ret = fetch_msg(mbox, msg, t);
  10aee0:	e51b3008 	ldr	r3, [fp, #-8]
  10aee4:	e1a02003 	mov	r2, r3
  10aee8:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  10aeec:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  10aef0:	ebffff9f 	bl	10ad74 <fetch_msg>
  10aef4:	e50b0010 	str	r0, [fp, #-16]

    if(ret == -RT_ETIMEOUT)
  10aef8:	e51b3010 	ldr	r3, [fp, #-16]
  10aefc:	e3730002 	cmn	r3, #2
  10af00:	1a000001 	bne	10af0c <sys_arch_mbox_fetch+0x84>
        return SYS_ARCH_TIMEOUT;
  10af04:	e3e03000 	mvn	r3, #0
  10af08:	ea000014 	b	10af60 <sys_arch_mbox_fetch+0xd8>
    else
    {
        LWIP_ASSERT("rt_mb_recv returned with error!", ret == RT_EOK);
  10af0c:	e51b3010 	ldr	r3, [fp, #-16]
  10af10:	e3530000 	cmp	r3, #0
  10af14:	0a000006 	beq	10af34 <sys_arch_mbox_fetch+0xac>
  10af18:	e306030c 	movw	r0, #25356	; 0x630c
  10af1c:	e3400014 	movt	r0, #20
  10af20:	ebffe07b 	bl	103114 <rt_kprintf>
  10af24:	e3a01f86 	mov	r1, #536	; 0x218
  10af28:	e30602a0 	movw	r0, #25248	; 0x62a0
  10af2c:	e3400014 	movt	r0, #20
  10af30:	eb00006e 	bl	10b0f0 <sys_arch_assert>
    }

    /* get elapse msecond */
    tick = rt_tick_get() - tick;
  10af34:	ebffdbc9 	bl	101e60 <rt_tick_get>
  10af38:	e1a02000 	mov	r2, r0
  10af3c:	e51b300c 	ldr	r3, [fp, #-12]
  10af40:	e0423003 	sub	r3, r2, r3
  10af44:	e50b300c 	str	r3, [fp, #-12]

    /* convert tick to msecond */
    tick = tick * (1000 / RT_TICK_PER_SECOND);
    if (tick == 0)
  10af48:	e51b300c 	ldr	r3, [fp, #-12]
  10af4c:	e3530000 	cmp	r3, #0
  10af50:	1a000001 	bne	10af5c <sys_arch_mbox_fetch+0xd4>
        tick = 1;
  10af54:	e3a03001 	mov	r3, #1
  10af58:	e50b300c 	str	r3, [fp, #-12]

    return tick;
  10af5c:	e51b300c 	ldr	r3, [fp, #-12]
}
  10af60:	e1a00003 	mov	r0, r3
  10af64:	e24bd004 	sub	sp, fp, #4
  10af68:	e8bd8800 	pop	{fp, pc}

0010af6c <sys_arch_mbox_tryfetch>:
 * @param timeout maximum time (in milliseconds) to wait for a message
 * @return 0 (milliseconds) if a message has been received
 *         or SYS_MBOX_EMPTY if the mailbox is empty
 */
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
  10af6c:	e92d4800 	push	{fp, lr}
  10af70:	e28db004 	add	fp, sp, #4
  10af74:	e24dd010 	sub	sp, sp, #16
  10af78:	e50b0010 	str	r0, [fp, #-16]
  10af7c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int ret;

    ret = fetch_msg(mbox, msg, 0);
  10af80:	e3a02000 	mov	r2, #0
  10af84:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10af88:	e51b0010 	ldr	r0, [fp, #-16]
  10af8c:	ebffff78 	bl	10ad74 <fetch_msg>
  10af90:	e50b0008 	str	r0, [fp, #-8]
       
    if(ret == -RT_ETIMEOUT)
  10af94:	e51b3008 	ldr	r3, [fp, #-8]
  10af98:	e3730002 	cmn	r3, #2
  10af9c:	1a000001 	bne	10afa8 <sys_arch_mbox_tryfetch+0x3c>
        return SYS_ARCH_TIMEOUT;
  10afa0:	e3e03000 	mvn	r3, #0
  10afa4:	ea000005 	b	10afc0 <sys_arch_mbox_tryfetch+0x54>
    else
    {
        if (ret == RT_EOK)
  10afa8:	e51b3008 	ldr	r3, [fp, #-8]
  10afac:	e3530000 	cmp	r3, #0
  10afb0:	1a000001 	bne	10afbc <sys_arch_mbox_tryfetch+0x50>
            ret = 1;
  10afb4:	e3a03001 	mov	r3, #1
  10afb8:	e50b3008 	str	r3, [fp, #-8]
    }

    return ret;
  10afbc:	e51b3008 	ldr	r3, [fp, #-8]
}
  10afc0:	e1a00003 	mov	r0, r3
  10afc4:	e24bd004 	sub	sp, fp, #4
  10afc8:	e8bd8800 	pop	{fp, pc}

0010afcc <sys_mbox_valid>:
#ifndef sys_mbox_valid
/** Check if an mbox is valid/allocated:
 *  return 1 for valid, 0 for invalid
 */
rt_base_t sys_mbox_valid(sys_mbox_t *mbox)
{
  10afcc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10afd0:	e28db000 	add	fp, sp, #0
  10afd4:	e24dd00c 	sub	sp, sp, #12
  10afd8:	e50b0008 	str	r0, [fp, #-8]
    return (rt_base_t)(*mbox);
  10afdc:	e51b3008 	ldr	r3, [fp, #-8]
  10afe0:	e5933000 	ldr	r3, [r3]
}
  10afe4:	e1a00003 	mov	r0, r3
  10afe8:	e28bd000 	add	sp, fp, #0
  10afec:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10aff0:	e12fff1e 	bx	lr

0010aff4 <sys_mbox_set_invalid>:

#ifndef sys_mbox_set_invalid
/** Set an mbox invalid so that sys_mbox_valid returns 0
 */
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
  10aff4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10aff8:	e28db000 	add	fp, sp, #0
  10affc:	e24dd00c 	sub	sp, sp, #12
  10b000:	e50b0008 	str	r0, [fp, #-8]
    *mbox = RT_NULL;
  10b004:	e51b3008 	ldr	r3, [fp, #-8]
  10b008:	e3a02000 	mov	r2, #0
  10b00c:	e5832000 	str	r2, [r3]
}
  10b010:	e320f000 	nop	{0}
  10b014:	e28bd000 	add	sp, fp, #0
  10b018:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10b01c:	e12fff1e 	bx	lr

0010b020 <sys_thread_new>:
sys_thread_t sys_thread_new(const char    *name,
                            lwip_thread_fn thread,
                            void          *arg,
                            int            stacksize,
                            int            prio)
{
  10b020:	e92d4800 	push	{fp, lr}
  10b024:	e28db004 	add	fp, sp, #4
  10b028:	e24dd020 	sub	sp, sp, #32
  10b02c:	e50b0010 	str	r0, [fp, #-16]
  10b030:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10b034:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  10b038:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    rt_thread_t t;

    RT_DEBUG_NOT_IN_INTERRUPT;

    /* create thread */
    t = rt_thread_create(name, thread, arg, stacksize, prio, 20);
  10b03c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  10b040:	e59b3004 	ldr	r3, [fp, #4]
  10b044:	e6ef3073 	uxtb	r3, r3
  10b048:	e3a02014 	mov	r2, #20
  10b04c:	e58d2004 	str	r2, [sp, #4]
  10b050:	e58d3000 	str	r3, [sp]
  10b054:	e1a03001 	mov	r3, r1
  10b058:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10b05c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10b060:	e51b0010 	ldr	r0, [fp, #-16]
  10b064:	ebffdc22 	bl	1020f4 <rt_thread_create>
  10b068:	e50b0008 	str	r0, [fp, #-8]
    
    RT_ASSERT(t != RT_NULL);
  10b06c:	e51b3008 	ldr	r3, [fp, #-8]
  10b070:	e3530000 	cmp	r3, #0
  10b074:	1a000005 	bne	10b090 <sys_thread_new+0x70>
  10b078:	e3002265 	movw	r2, #613	; 0x265
  10b07c:	e3061358 	movw	r1, #25432	; 0x6358
  10b080:	e3401014 	movt	r1, #20
  10b084:	e306032c 	movw	r0, #25388	; 0x632c
  10b088:	e3400014 	movt	r0, #20
  10b08c:	ebffe141 	bl	103598 <rt_assert_handler>

    /* startup thread */
    rt_thread_startup(t);
  10b090:	e51b0008 	ldr	r0, [fp, #-8]
  10b094:	ebffdc4b 	bl	1021c8 <rt_thread_startup>

    return t;
  10b098:	e51b3008 	ldr	r3, [fp, #-8]
}
  10b09c:	e1a00003 	mov	r0, r3
  10b0a0:	e24bd004 	sub	sp, fp, #4
  10b0a4:	e8bd8800 	pop	{fp, pc}

0010b0a8 <sys_arch_protect>:

sys_prot_t sys_arch_protect(void)
{
  10b0a8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10b0ac:	e28db000 	add	fp, sp, #0
  10b0b0:	e24dd00c 	sub	sp, sp, #12
    //rt_base_t level;
    rt_base_t level = 0;
  10b0b4:	e3a03000 	mov	r3, #0
  10b0b8:	e50b3008 	str	r3, [fp, #-8]

    /* disable interrupt */
    //level = rt_hw_interrupt_disable();

    return level;
  10b0bc:	e51b3008 	ldr	r3, [fp, #-8]
}
  10b0c0:	e1a00003 	mov	r0, r3
  10b0c4:	e28bd000 	add	sp, fp, #0
  10b0c8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10b0cc:	e12fff1e 	bx	lr

0010b0d0 <sys_arch_unprotect>:

void sys_arch_unprotect(sys_prot_t pval)
{
  10b0d0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10b0d4:	e28db000 	add	fp, sp, #0
  10b0d8:	e24dd00c 	sub	sp, sp, #12
  10b0dc:	e50b0008 	str	r0, [fp, #-8]
    /* enable interrupt */
    //rt_hw_interrupt_enable(pval);

    return;
  10b0e0:	e320f000 	nop	{0}
}
  10b0e4:	e28bd000 	add	sp, fp, #0
  10b0e8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10b0ec:	e12fff1e 	bx	lr

0010b0f0 <sys_arch_assert>:

void sys_arch_assert(const char *file, int line)
{
  10b0f0:	e92d4800 	push	{fp, lr}
  10b0f4:	e28db004 	add	fp, sp, #4
  10b0f8:	e24dd008 	sub	sp, sp, #8
  10b0fc:	e50b0008 	str	r0, [fp, #-8]
  10b100:	e50b100c 	str	r1, [fp, #-12]
    rt_kprintf("\nAssertion: %d in %s\n", line, file);
  10b104:	e51b2008 	ldr	r2, [fp, #-8]
  10b108:	e51b100c 	ldr	r1, [fp, #-12]
  10b10c:	e306033c 	movw	r0, #25404	; 0x633c
  10b110:	e3400014 	movt	r0, #20
  10b114:	ebffdffe 	bl	103114 <rt_kprintf>
    RT_ASSERT(0);
  10b118:	e3002283 	movw	r2, #643	; 0x283
  10b11c:	e3061368 	movw	r1, #25448	; 0x6368
  10b120:	e3401014 	movt	r1, #20
  10b124:	e3060354 	movw	r0, #25428	; 0x6354
  10b128:	e3400014 	movt	r0, #20
  10b12c:	ebffe119 	bl	103598 <rt_assert_handler>
}
  10b130:	e320f000 	nop	{0}
  10b134:	e24bd004 	sub	sp, fp, #4
  10b138:	e8bd8800 	pop	{fp, pc}

0010b13c <sys_jiffies>:

u32_t sys_jiffies(void)
{
  10b13c:	e92d4800 	push	{fp, lr}
  10b140:	e28db004 	add	fp, sp, #4
    return rt_tick_get();
  10b144:	ebffdb45 	bl	101e60 <rt_tick_get>
  10b148:	e1a03000 	mov	r3, r0
}
  10b14c:	e1a00003 	mov	r0, r3
  10b150:	e8bd8800 	pop	{fp, pc}

0010b154 <sys_now>:

u32_t sys_now(void)
{
  10b154:	e92d4800 	push	{fp, lr}
  10b158:	e28db004 	add	fp, sp, #4
    return rt_tick_get() * (1000 / RT_TICK_PER_SECOND);
  10b15c:	ebffdb3f 	bl	101e60 <rt_tick_get>
  10b160:	e1a03000 	mov	r3, r0
}
  10b164:	e1a00003 	mov	r0, r3
  10b168:	e8bd8800 	pop	{fp, pc}

0010b16c <mem_init>:


RT_WEAK
void mem_init(void)
{
  10b16c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10b170:	e28db000 	add	fp, sp, #0
}
  10b174:	e320f000 	nop	{0}
  10b178:	e28bd000 	add	sp, fp, #0
  10b17c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10b180:	e12fff1e 	bx	lr

0010b184 <mem_calloc>:

void *mem_calloc(mem_size_t count, mem_size_t size)
{
  10b184:	e92d4800 	push	{fp, lr}
  10b188:	e28db004 	add	fp, sp, #4
  10b18c:	e24dd008 	sub	sp, sp, #8
  10b190:	e1a03000 	mov	r3, r0
  10b194:	e1a02001 	mov	r2, r1
  10b198:	e14b30b6 	strh	r3, [fp, #-6]
  10b19c:	e1a03002 	mov	r3, r2
  10b1a0:	e14b30b8 	strh	r3, [fp, #-8]
    return rt_calloc(count, size);
  10b1a4:	e15b30b6 	ldrh	r3, [fp, #-6]
  10b1a8:	e15b20b8 	ldrh	r2, [fp, #-8]
  10b1ac:	e1a01002 	mov	r1, r2
  10b1b0:	e1a00003 	mov	r0, r3
  10b1b4:	ebffdf94 	bl	10300c <rt_calloc>
  10b1b8:	e1a03000 	mov	r3, r0
}
  10b1bc:	e1a00003 	mov	r0, r3
  10b1c0:	e24bd004 	sub	sp, fp, #4
  10b1c4:	e8bd8800 	pop	{fp, pc}

0010b1c8 <mem_trim>:

void *mem_trim(void *mem, mem_size_t size)
{
  10b1c8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10b1cc:	e28db000 	add	fp, sp, #0
  10b1d0:	e24dd00c 	sub	sp, sp, #12
  10b1d4:	e50b0008 	str	r0, [fp, #-8]
  10b1d8:	e1a03001 	mov	r3, r1
  10b1dc:	e14b30ba 	strh	r3, [fp, #-10]
    /* not support trim yet */
    return mem;
  10b1e0:	e51b3008 	ldr	r3, [fp, #-8]
}
  10b1e4:	e1a00003 	mov	r0, r3
  10b1e8:	e28bd000 	add	sp, fp, #0
  10b1ec:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10b1f0:	e12fff1e 	bx	lr

0010b1f4 <mem_malloc>:

void *mem_malloc(mem_size_t size)
{
  10b1f4:	e92d4800 	push	{fp, lr}
  10b1f8:	e28db004 	add	fp, sp, #4
  10b1fc:	e24dd008 	sub	sp, sp, #8
  10b200:	e1a03000 	mov	r3, r0
  10b204:	e14b30b6 	strh	r3, [fp, #-6]
    return rt_malloc(size);
  10b208:	e15b30b6 	ldrh	r3, [fp, #-6]
  10b20c:	e1a00003 	mov	r0, r3
  10b210:	ebffdf5f 	bl	102f94 <rt_malloc>
  10b214:	e1a03000 	mov	r3, r0
}
  10b218:	e1a00003 	mov	r0, r3
  10b21c:	e24bd004 	sub	sp, fp, #4
  10b220:	e8bd8800 	pop	{fp, pc}

0010b224 <mem_free>:

void  mem_free(void *mem)
{
  10b224:	e92d4800 	push	{fp, lr}
  10b228:	e28db004 	add	fp, sp, #4
  10b22c:	e24dd008 	sub	sp, sp, #8
  10b230:	e50b0008 	str	r0, [fp, #-8]
    rt_free(mem);
  10b234:	e51b0008 	ldr	r0, [fp, #-8]
  10b238:	ebffdf5f 	bl	102fbc <rt_free>
}
  10b23c:	e320f000 	nop	{0}
  10b240:	e24bd004 	sub	sp, fp, #4
  10b244:	e8bd8800 	pop	{fp, pc}

0010b248 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
  10b248:	e92d4800 	push	{fp, lr}
  10b24c:	e28db004 	add	fp, sp, #4
  10b250:	e24dd010 	sub	sp, sp, #16
  10b254:	e50b0010 	str	r0, [fp, #-16]
  10b258:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
  10b25c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10b260:	e5933000 	ldr	r3, [r3]
  10b264:	e2833010 	add	r3, r3, #16
  10b268:	e1a02003 	mov	r2, r3
  10b26c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10b270:	e51b0010 	ldr	r0, [fp, #-16]
  10b274:	eb002c15 	bl	1162d0 <tcpip_send_msg_wait_sem>
  10b278:	e1a03000 	mov	r3, r0
  10b27c:	e54b3005 	strb	r3, [fp, #-5]
  if (err == ERR_OK) {
  10b280:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10b284:	e3530000 	cmp	r3, #0
  10b288:	1a000002 	bne	10b298 <netconn_apimsg+0x50>
    return apimsg->err;
  10b28c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10b290:	e1d330d4 	ldrsb	r3, [r3, #4]
  10b294:	ea000000 	b	10b29c <netconn_apimsg+0x54>
  }
  return err;
  10b298:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10b29c:	e1a00003 	mov	r0, r3
  10b2a0:	e24bd004 	sub	sp, fp, #4
  10b2a4:	e8bd8800 	pop	{fp, pc}

0010b2a8 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
  10b2a8:	e92d4800 	push	{fp, lr}
  10b2ac:	e28db004 	add	fp, sp, #4
  10b2b0:	e24dd030 	sub	sp, sp, #48	; 0x30
  10b2b4:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10b2b8:	e1a03001 	mov	r3, r1
  10b2bc:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  10b2c0:	e54b3029 	strb	r3, [fp, #-41]	; 0xffffffd7
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
  10b2c4:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
  10b2c8:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  10b2cc:	eb000878 	bl	10d4b4 <netconn_alloc>
  10b2d0:	e50b0008 	str	r0, [fp, #-8]
  if (conn != NULL) {
  10b2d4:	e51b3008 	ldr	r3, [fp, #-8]
  10b2d8:	e3530000 	cmp	r3, #0
  10b2dc:	0a00004f 	beq	10b420 <netconn_new_with_proto_and_callback+0x178>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
  10b2e0:	e55b3029 	ldrb	r3, [fp, #-41]	; 0xffffffd7
  10b2e4:	e54b301c 	strb	r3, [fp, #-28]	; 0xffffffe4
    API_MSG_VAR_REF(msg).conn = conn;
  10b2e8:	e51b3008 	ldr	r3, [fp, #-8]
  10b2ec:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
  10b2f0:	e24b3024 	sub	r3, fp, #36	; 0x24
  10b2f4:	e1a01003 	mov	r1, r3
  10b2f8:	e30d0428 	movw	r0, #54312	; 0xd428
  10b2fc:	e3400010 	movt	r0, #16
  10b300:	ebffffd0 	bl	10b248 <netconn_apimsg>
  10b304:	e1a03000 	mov	r3, r0
  10b308:	e54b3009 	strb	r3, [fp, #-9]
    if (err != ERR_OK) {
  10b30c:	e15b30d9 	ldrsb	r3, [fp, #-9]
  10b310:	e3530000 	cmp	r3, #0
  10b314:	0a000041 	beq	10b420 <netconn_new_with_proto_and_callback+0x178>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
  10b318:	e51b3008 	ldr	r3, [fp, #-8]
  10b31c:	e5933008 	ldr	r3, [r3, #8]
  10b320:	e3530000 	cmp	r3, #0
  10b324:	0a000006 	beq	10b344 <netconn_new_with_proto_and_callback+0x9c>
  10b328:	e3060378 	movw	r0, #25464	; 0x6378
  10b32c:	e3400014 	movt	r0, #20
  10b330:	ebffdf77 	bl	103114 <rt_kprintf>
  10b334:	e3a01089 	mov	r1, #137	; 0x89
  10b338:	e306039c 	movw	r0, #25500	; 0x639c
  10b33c:	e3400014 	movt	r0, #20
  10b340:	ebffff6a 	bl	10b0f0 <sys_arch_assert>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
  10b344:	e51b3008 	ldr	r3, [fp, #-8]
  10b348:	e2833014 	add	r3, r3, #20
  10b34c:	e1a00003 	mov	r0, r3
  10b350:	ebffff1d 	bl	10afcc <sys_mbox_valid>
  10b354:	e1a03000 	mov	r3, r0
  10b358:	e3530000 	cmp	r3, #0
  10b35c:	1a000006 	bne	10b37c <netconn_new_with_proto_and_callback+0xd4>
  10b360:	e30603cc 	movw	r0, #25548	; 0x63cc
  10b364:	e3400014 	movt	r0, #20
  10b368:	ebffdf69 	bl	103114 <rt_kprintf>
  10b36c:	e3a0108a 	mov	r1, #138	; 0x8a
  10b370:	e306039c 	movw	r0, #25500	; 0x639c
  10b374:	e3400014 	movt	r0, #20
  10b378:	ebffff5c 	bl	10b0f0 <sys_arch_assert>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
  10b37c:	e51b3008 	ldr	r3, [fp, #-8]
  10b380:	e2833018 	add	r3, r3, #24
  10b384:	e1a00003 	mov	r0, r3
  10b388:	ebffff0f 	bl	10afcc <sys_mbox_valid>
  10b38c:	e1a03000 	mov	r3, r0
  10b390:	e3530000 	cmp	r3, #0
  10b394:	0a000006 	beq	10b3b4 <netconn_new_with_proto_and_callback+0x10c>
  10b398:	e30603e4 	movw	r0, #25572	; 0x63e4
  10b39c:	e3400014 	movt	r0, #20
  10b3a0:	ebffdf5b 	bl	103114 <rt_kprintf>
  10b3a4:	e3a0108c 	mov	r1, #140	; 0x8c
  10b3a8:	e306039c 	movw	r0, #25500	; 0x639c
  10b3ac:	e3400014 	movt	r0, #20
  10b3b0:	ebffff4e 	bl	10b0f0 <sys_arch_assert>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
  10b3b4:	e51b3008 	ldr	r3, [fp, #-8]
  10b3b8:	e2833010 	add	r3, r3, #16
  10b3bc:	e1a00003 	mov	r0, r3
  10b3c0:	ebfffd91 	bl	10aa0c <sys_sem_valid>
  10b3c4:	e1a03000 	mov	r3, r0
  10b3c8:	e3530000 	cmp	r3, #0
  10b3cc:	1a000006 	bne	10b3ec <netconn_new_with_proto_and_callback+0x144>
  10b3d0:	e3060408 	movw	r0, #25608	; 0x6408
  10b3d4:	e3400014 	movt	r0, #20
  10b3d8:	ebffdf4d 	bl	103114 <rt_kprintf>
  10b3dc:	e3a0108f 	mov	r1, #143	; 0x8f
  10b3e0:	e306039c 	movw	r0, #25500	; 0x639c
  10b3e4:	e3400014 	movt	r0, #20
  10b3e8:	ebffff40 	bl	10b0f0 <sys_arch_assert>
      sys_sem_free(&conn->op_completed);
  10b3ec:	e51b3008 	ldr	r3, [fp, #-8]
  10b3f0:	e2833010 	add	r3, r3, #16
  10b3f4:	e1a00003 	mov	r0, r3
  10b3f8:	ebfffd3a 	bl	10a8e8 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
  10b3fc:	e51b3008 	ldr	r3, [fp, #-8]
  10b400:	e2833014 	add	r3, r3, #20
  10b404:	e1a00003 	mov	r0, r3
  10b408:	ebfffe28 	bl	10acb0 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
  10b40c:	e51b1008 	ldr	r1, [fp, #-8]
  10b410:	e3a00008 	mov	r0, #8
  10b414:	eb003797 	bl	119278 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
  10b418:	e3a03000 	mov	r3, #0
  10b41c:	ea000000 	b	10b424 <netconn_new_with_proto_and_callback+0x17c>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
  10b420:	e51b3008 	ldr	r3, [fp, #-8]
}
  10b424:	e1a00003 	mov	r0, r3
  10b428:	e24bd004 	sub	sp, fp, #4
  10b42c:	e8bd8800 	pop	{fp, pc}

0010b430 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
  10b430:	e92d4800 	push	{fp, lr}
  10b434:	e28db004 	add	fp, sp, #4
  10b438:	e24dd028 	sub	sp, sp, #40	; 0x28
  10b43c:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
  10b440:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b444:	e3530000 	cmp	r3, #0
  10b448:	1a000001 	bne	10b454 <netconn_delete+0x24>
    return ERR_OK;
  10b44c:	e3a03000 	mov	r3, #0
  10b450:	ea000013 	b	10b4a4 <netconn_delete+0x74>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10b454:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b458:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
#if LWIP_TCP
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
  10b45c:	ebffff3c 	bl	10b154 <sys_now>
  10b460:	e1a03000 	mov	r3, r0
  10b464:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
  10b468:	e24b3020 	sub	r3, fp, #32
  10b46c:	e1a01003 	mov	r1, r3
  10b470:	e30d0e50 	movw	r0, #56912	; 0xde50
  10b474:	e3400010 	movt	r0, #16
  10b478:	ebffff72 	bl	10b248 <netconn_apimsg>
  10b47c:	e1a03000 	mov	r3, r0
  10b480:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
  10b484:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10b488:	e3530000 	cmp	r3, #0
  10b48c:	0a000001 	beq	10b498 <netconn_delete+0x68>
    return err;
  10b490:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10b494:	ea000002 	b	10b4a4 <netconn_delete+0x74>
  }

  netconn_free(conn);
  10b498:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  10b49c:	eb000878 	bl	10d684 <netconn_free>

  return ERR_OK;
  10b4a0:	e3a03000 	mov	r3, #0
}
  10b4a4:	e1a00003 	mov	r0, r3
  10b4a8:	e24bd004 	sub	sp, fp, #4
  10b4ac:	e8bd8800 	pop	{fp, pc}

0010b4b0 <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
  10b4b0:	e92d4800 	push	{fp, lr}
  10b4b4:	e28db004 	add	fp, sp, #4
  10b4b8:	e24dd030 	sub	sp, sp, #48	; 0x30
  10b4bc:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10b4c0:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  10b4c4:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  10b4c8:	e54b3031 	strb	r3, [fp, #-49]	; 0xffffffcf
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
  10b4cc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b4d0:	e3530000 	cmp	r3, #0
  10b4d4:	1a000008 	bne	10b4fc <netconn_getaddr+0x4c>
  10b4d8:	e3060424 	movw	r0, #25636	; 0x6424
  10b4dc:	e3400014 	movt	r0, #20
  10b4e0:	ebffdf0b 	bl	103114 <rt_kprintf>
  10b4e4:	e3a010d9 	mov	r1, #217	; 0xd9
  10b4e8:	e306039c 	movw	r0, #25500	; 0x639c
  10b4ec:	e3400014 	movt	r0, #20
  10b4f0:	ebfffefe 	bl	10b0f0 <sys_arch_assert>
  10b4f4:	e3e0300f 	mvn	r3, #15
  10b4f8:	ea000027 	b	10b59c <netconn_getaddr+0xec>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
  10b4fc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b500:	e3530000 	cmp	r3, #0
  10b504:	1a000008 	bne	10b52c <netconn_getaddr+0x7c>
  10b508:	e3060444 	movw	r0, #25668	; 0x6444
  10b50c:	e3400014 	movt	r0, #20
  10b510:	ebffdeff 	bl	103114 <rt_kprintf>
  10b514:	e3a010da 	mov	r1, #218	; 0xda
  10b518:	e306039c 	movw	r0, #25500	; 0x639c
  10b51c:	e3400014 	movt	r0, #20
  10b520:	ebfffef2 	bl	10b0f0 <sys_arch_assert>
  10b524:	e3e0300f 	mvn	r3, #15
  10b528:	ea00001b 	b	10b59c <netconn_getaddr+0xec>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
  10b52c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  10b530:	e3530000 	cmp	r3, #0
  10b534:	1a000008 	bne	10b55c <netconn_getaddr+0xac>
  10b538:	e3060464 	movw	r0, #25700	; 0x6464
  10b53c:	e3400014 	movt	r0, #20
  10b540:	ebffdef3 	bl	103114 <rt_kprintf>
  10b544:	e3a010db 	mov	r1, #219	; 0xdb
  10b548:	e306039c 	movw	r0, #25500	; 0x639c
  10b54c:	e3400014 	movt	r0, #20
  10b550:	ebfffee6 	bl	10b0f0 <sys_arch_assert>
  10b554:	e3e0300f 	mvn	r3, #15
  10b558:	ea00000f 	b	10b59c <netconn_getaddr+0xec>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10b55c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b560:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  API_MSG_VAR_REF(msg).msg.ad.local = local;
  10b564:	e55b3031 	ldrb	r3, [fp, #-49]	; 0xffffffcf
  10b568:	e54b3010 	strb	r3, [fp, #-16]
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
  10b56c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b570:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  msg.msg.ad.port = port;
  10b574:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  10b578:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
  10b57c:	e24b3020 	sub	r3, fp, #32
  10b580:	e1a01003 	mov	r1, r3
  10b584:	e30f0770 	movw	r0, #63344	; 0xf770
  10b588:	e3400010 	movt	r0, #16
  10b58c:	ebffff2d 	bl	10b248 <netconn_apimsg>
  10b590:	e1a03000 	mov	r3, r0
  10b594:	e54b3005 	strb	r3, [fp, #-5]
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
  10b598:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10b59c:	e1a00003 	mov	r0, r3
  10b5a0:	e24bd004 	sub	sp, fp, #4
  10b5a4:	e8bd8800 	pop	{fp, pc}

0010b5a8 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
  10b5a8:	e92d4800 	push	{fp, lr}
  10b5ac:	e28db004 	add	fp, sp, #4
  10b5b0:	e24dd030 	sub	sp, sp, #48	; 0x30
  10b5b4:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10b5b8:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  10b5bc:	e1a03002 	mov	r3, r2
  10b5c0:	e14b32be 	strh	r3, [fp, #-46]	; 0xffffffd2
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
  10b5c4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b5c8:	e3530000 	cmp	r3, #0
  10b5cc:	1a000008 	bne	10b5f4 <netconn_bind+0x4c>
  10b5d0:	e3060484 	movw	r0, #25732	; 0x6484
  10b5d4:	e3400014 	movt	r0, #20
  10b5d8:	ebffdecd 	bl	103114 <rt_kprintf>
  10b5dc:	e3a010ff 	mov	r1, #255	; 0xff
  10b5e0:	e306039c 	movw	r0, #25500	; 0x639c
  10b5e4:	e3400014 	movt	r0, #20
  10b5e8:	ebfffec0 	bl	10b0f0 <sys_arch_assert>
  10b5ec:	e3e0300f 	mvn	r3, #15
  10b5f0:	ea000013 	b	10b644 <netconn_bind+0x9c>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
  10b5f4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b5f8:	e3530000 	cmp	r3, #0
  10b5fc:	1a000002 	bne	10b60c <netconn_bind+0x64>
    addr = IP4_ADDR_ANY;
  10b600:	e3093908 	movw	r3, #39176	; 0x9908
  10b604:	e3403014 	movt	r3, #20
  10b608:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10b60c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b610:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
  10b614:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b618:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  API_MSG_VAR_REF(msg).msg.bc.port = port;
  10b61c:	e15b32be 	ldrh	r3, [fp, #-46]	; 0xffffffd2
  10b620:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
  10b624:	e24b3020 	sub	r3, fp, #32
  10b628:	e1a01003 	mov	r1, r3
  10b62c:	e30e01fc 	movw	r0, #57852	; 0xe1fc
  10b630:	e3400010 	movt	r0, #16
  10b634:	ebffff03 	bl	10b248 <netconn_apimsg>
  10b638:	e1a03000 	mov	r3, r0
  10b63c:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  return err;
  10b640:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10b644:	e1a00003 	mov	r0, r3
  10b648:	e24bd004 	sub	sp, fp, #4
  10b64c:	e8bd8800 	pop	{fp, pc}

0010b650 <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
  10b650:	e92d4800 	push	{fp, lr}
  10b654:	e28db004 	add	fp, sp, #4
  10b658:	e24dd030 	sub	sp, sp, #48	; 0x30
  10b65c:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10b660:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  10b664:	e1a03002 	mov	r3, r2
  10b668:	e14b32be 	strh	r3, [fp, #-46]	; 0xffffffd2
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
  10b66c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b670:	e3530000 	cmp	r3, #0
  10b674:	1a000008 	bne	10b69c <netconn_connect+0x4c>
  10b678:	e30604a0 	movw	r0, #25760	; 0x64a0
  10b67c:	e3400014 	movt	r0, #20
  10b680:	ebffdea3 	bl	103114 <rt_kprintf>
  10b684:	e300112b 	movw	r1, #299	; 0x12b
  10b688:	e306039c 	movw	r0, #25500	; 0x639c
  10b68c:	e3400014 	movt	r0, #20
  10b690:	ebfffe96 	bl	10b0f0 <sys_arch_assert>
  10b694:	e3e0300f 	mvn	r3, #15
  10b698:	ea000013 	b	10b6ec <netconn_connect+0x9c>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
  10b69c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b6a0:	e3530000 	cmp	r3, #0
  10b6a4:	1a000002 	bne	10b6b4 <netconn_connect+0x64>
    addr = IP4_ADDR_ANY;
  10b6a8:	e3093908 	movw	r3, #39176	; 0x9908
  10b6ac:	e3403014 	movt	r3, #20
  10b6b0:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10b6b4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b6b8:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
  10b6bc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b6c0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  API_MSG_VAR_REF(msg).msg.bc.port = port;
  10b6c4:	e15b32be 	ldrh	r3, [fp, #-46]	; 0xffffffd2
  10b6c8:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
  10b6cc:	e24b3020 	sub	r3, fp, #32
  10b6d0:	e1a01003 	mov	r1, r3
  10b6d4:	e30e05a0 	movw	r0, #58784	; 0xe5a0
  10b6d8:	e3400010 	movt	r0, #16
  10b6dc:	ebfffed9 	bl	10b248 <netconn_apimsg>
  10b6e0:	e1a03000 	mov	r3, r0
  10b6e4:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  return err;
  10b6e8:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10b6ec:	e1a00003 	mov	r0, r3
  10b6f0:	e24bd004 	sub	sp, fp, #4
  10b6f4:	e8bd8800 	pop	{fp, pc}

0010b6f8 <netconn_disconnect>:
 * @param conn the netconn to disconnect
 * @return See @ref err_t
 */
err_t
netconn_disconnect(struct netconn *conn)
{
  10b6f8:	e92d4800 	push	{fp, lr}
  10b6fc:	e28db004 	add	fp, sp, #4
  10b700:	e24dd028 	sub	sp, sp, #40	; 0x28
  10b704:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_disconnect: invalid conn", (conn != NULL), return ERR_ARG;);
  10b708:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b70c:	e3530000 	cmp	r3, #0
  10b710:	1a000008 	bne	10b738 <netconn_disconnect+0x40>
  10b714:	e30604c0 	movw	r0, #25792	; 0x64c0
  10b718:	e3400014 	movt	r0, #20
  10b71c:	ebffde7c 	bl	103114 <rt_kprintf>
  10b720:	e300114b 	movw	r1, #331	; 0x14b
  10b724:	e306039c 	movw	r0, #25500	; 0x639c
  10b728:	e3400014 	movt	r0, #20
  10b72c:	ebfffe6f 	bl	10b0f0 <sys_arch_assert>
  10b730:	e3e0300f 	mvn	r3, #15
  10b734:	ea000009 	b	10b760 <netconn_disconnect+0x68>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10b738:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b73c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  err = netconn_apimsg(lwip_netconn_do_disconnect, &API_MSG_VAR_REF(msg));
  10b740:	e24b3020 	sub	r3, fp, #32
  10b744:	e1a01003 	mov	r1, r3
  10b748:	e30e08d8 	movw	r0, #59608	; 0xe8d8
  10b74c:	e3400010 	movt	r0, #16
  10b750:	ebfffebc 	bl	10b248 <netconn_apimsg>
  10b754:	e1a03000 	mov	r3, r0
  10b758:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  return err;
  10b75c:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10b760:	e1a00003 	mov	r0, r3
  10b764:	e24bd004 	sub	sp, fp, #4
  10b768:	e8bd8800 	pop	{fp, pc}

0010b76c <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
  10b76c:	e92d4800 	push	{fp, lr}
  10b770:	e28db004 	add	fp, sp, #4
  10b774:	e24dd028 	sub	sp, sp, #40	; 0x28
  10b778:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10b77c:	e1a03001 	mov	r3, r1
  10b780:	e54b3029 	strb	r3, [fp, #-41]	; 0xffffffd7
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
  10b784:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b788:	e3530000 	cmp	r3, #0
  10b78c:	1a000008 	bne	10b7b4 <netconn_listen_with_backlog+0x48>
  10b790:	e30604e4 	movw	r0, #25828	; 0x64e4
  10b794:	e3400014 	movt	r0, #20
  10b798:	ebffde5d 	bl	103114 <rt_kprintf>
  10b79c:	e3a01f5a 	mov	r1, #360	; 0x168
  10b7a0:	e306039c 	movw	r0, #25500	; 0x639c
  10b7a4:	e3400014 	movt	r0, #20
  10b7a8:	ebfffe50 	bl	10b0f0 <sys_arch_assert>
  10b7ac:	e3e0300f 	mvn	r3, #15
  10b7b0:	ea000009 	b	10b7dc <netconn_listen_with_backlog+0x70>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10b7b4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b7b8:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
  10b7bc:	e24b3020 	sub	r3, fp, #32
  10b7c0:	e1a01003 	mov	r1, r3
  10b7c4:	e30e0984 	movw	r0, #59780	; 0xe984
  10b7c8:	e3400010 	movt	r0, #16
  10b7cc:	ebfffe9d 	bl	10b248 <netconn_apimsg>
  10b7d0:	e1a03000 	mov	r3, r0
  10b7d4:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  return err;
  10b7d8:	e15b30d5 	ldrsb	r3, [fp, #-5]
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
  10b7dc:	e1a00003 	mov	r0, r3
  10b7e0:	e24bd004 	sub	sp, fp, #4
  10b7e4:	e8bd8800 	pop	{fp, pc}

0010b7e8 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
  10b7e8:	e92d4800 	push	{fp, lr}
  10b7ec:	e28db004 	add	fp, sp, #4
  10b7f0:	e24dd010 	sub	sp, sp, #16
  10b7f4:	e50b0010 	str	r0, [fp, #-16]
  10b7f8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
  10b7fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10b800:	e3530000 	cmp	r3, #0
  10b804:	1a000008 	bne	10b82c <netconn_accept+0x44>
  10b808:	e3060504 	movw	r0, #25860	; 0x6504
  10b80c:	e3400014 	movt	r0, #20
  10b810:	ebffde3f 	bl	103114 <rt_kprintf>
  10b814:	e300118d 	movw	r1, #397	; 0x18d
  10b818:	e306039c 	movw	r0, #25500	; 0x639c
  10b81c:	e3400014 	movt	r0, #20
  10b820:	ebfffe32 	bl	10b0f0 <sys_arch_assert>
  10b824:	e3e0300f 	mvn	r3, #15
  10b828:	ea000053 	b	10b97c <netconn_accept+0x194>
  *new_conn = NULL;
  10b82c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10b830:	e3a02000 	mov	r2, #0
  10b834:	e5832000 	str	r2, [r3]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
  10b838:	e51b3010 	ldr	r3, [fp, #-16]
  10b83c:	e3530000 	cmp	r3, #0
  10b840:	1a000008 	bne	10b868 <netconn_accept+0x80>
  10b844:	e3060524 	movw	r0, #25892	; 0x6524
  10b848:	e3400014 	movt	r0, #20
  10b84c:	ebffde30 	bl	103114 <rt_kprintf>
  10b850:	e300118f 	movw	r1, #399	; 0x18f
  10b854:	e306039c 	movw	r0, #25500	; 0x639c
  10b858:	e3400014 	movt	r0, #20
  10b85c:	ebfffe23 	bl	10b0f0 <sys_arch_assert>
  10b860:	e3e0300f 	mvn	r3, #15
  10b864:	ea000044 	b	10b97c <netconn_accept+0x194>

  if (ERR_IS_FATAL(conn->last_err)) {
  10b868:	e51b3010 	ldr	r3, [fp, #-16]
  10b86c:	e1d330dc 	ldrsb	r3, [r3, #12]
  10b870:	e373000c 	cmn	r3, #12
  10b874:	aa000002 	bge	10b884 <netconn_accept+0x9c>
    /* don't recv on fatal errors: this might block the application task
       waiting on acceptmbox forever! */
    return conn->last_err;
  10b878:	e51b3010 	ldr	r3, [fp, #-16]
  10b87c:	e1d330dc 	ldrsb	r3, [r3, #12]
  10b880:	ea00003d 	b	10b97c <netconn_accept+0x194>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
  10b884:	e51b3010 	ldr	r3, [fp, #-16]
  10b888:	e2833018 	add	r3, r3, #24
  10b88c:	e1a00003 	mov	r0, r3
  10b890:	ebfffdcd 	bl	10afcc <sys_mbox_valid>
  10b894:	e1a03000 	mov	r3, r0
  10b898:	e3530000 	cmp	r3, #0
  10b89c:	1a000001 	bne	10b8a8 <netconn_accept+0xc0>
    return ERR_CLSD;
  10b8a0:	e3e0300e 	mvn	r3, #14
  10b8a4:	ea000034 	b	10b97c <netconn_accept+0x194>
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_ALLOC(msg);
#endif /* TCP_LISTEN_BACKLOG */

#if LWIP_SO_RCVTIMEO
  if (sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
  10b8a8:	e51b3010 	ldr	r3, [fp, #-16]
  10b8ac:	e2830018 	add	r0, r3, #24
  10b8b0:	e51b3010 	ldr	r3, [fp, #-16]
  10b8b4:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  10b8b8:	e1a02003 	mov	r2, r3
  10b8bc:	e24b300c 	sub	r3, fp, #12
  10b8c0:	e1a01003 	mov	r1, r3
  10b8c4:	ebfffd6f 	bl	10ae88 <sys_arch_mbox_fetch>
  10b8c8:	e1a03000 	mov	r3, r0
  10b8cc:	e3730001 	cmn	r3, #1
  10b8d0:	1a000001 	bne	10b8dc <netconn_accept+0xf4>
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_TIMEOUT;
  10b8d4:	e3e03002 	mvn	r3, #2
  10b8d8:	ea000027 	b	10b97c <netconn_accept+0x194>
  }
#else
  sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
#endif /* LWIP_SO_RCVTIMEO*/
  newconn = (struct netconn *)accept_ptr;
  10b8dc:	e51b300c 	ldr	r3, [fp, #-12]
  10b8e0:	e50b3008 	str	r3, [fp, #-8]
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
  10b8e4:	e51b3010 	ldr	r3, [fp, #-16]
  10b8e8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10b8ec:	e3530000 	cmp	r3, #0
  10b8f0:	0a000005 	beq	10b90c <netconn_accept+0x124>
  10b8f4:	e51b3010 	ldr	r3, [fp, #-16]
  10b8f8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10b8fc:	e3a02000 	mov	r2, #0
  10b900:	e3a01001 	mov	r1, #1
  10b904:	e51b0010 	ldr	r0, [fp, #-16]
  10b908:	e12fff33 	blx	r3

  if (accept_ptr == &netconn_aborted) {
  10b90c:	e51b200c 	ldr	r2, [fp, #-12]
  10b910:	e30f358c 	movw	r3, #62860	; 0xf58c
  10b914:	e3403014 	movt	r3, #20
  10b918:	e1520003 	cmp	r2, r3
  10b91c:	1a000001 	bne	10b928 <netconn_accept+0x140>
    /* a connection has been aborted: out of pcbs or out of netconns during accept */
    /* @todo: set netconn error, but this would be fatal and thus block further accepts */
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_ABRT;
  10b920:	e3e0300c 	mvn	r3, #12
  10b924:	ea000014 	b	10b97c <netconn_accept+0x194>
  }
  if (newconn == NULL) {
  10b928:	e51b3008 	ldr	r3, [fp, #-8]
  10b92c:	e3530000 	cmp	r3, #0
  10b930:	1a00000d 	bne	10b96c <netconn_accept+0x184>
    /* connection has been aborted */
    /* in this special case, we set the netconn error from application thread, as
       on a ready-to-accept listening netconn, there should not be anything running
       in tcpip_thread */
    NETCONN_SET_SAFE_ERR(conn, ERR_CLSD);
  10b934:	e51b3010 	ldr	r3, [fp, #-16]
  10b938:	e3530000 	cmp	r3, #0
  10b93c:	0a000008 	beq	10b964 <netconn_accept+0x17c>
  10b940:	ebffda3d 	bl	10223c <rt_enter_critical>
  10b944:	e51b3010 	ldr	r3, [fp, #-16]
  10b948:	e1d330dc 	ldrsb	r3, [r3, #12]
  10b94c:	e373000c 	cmn	r3, #12
  10b950:	ba000002 	blt	10b960 <netconn_accept+0x178>
  10b954:	e51b3010 	ldr	r3, [fp, #-16]
  10b958:	e3e0200e 	mvn	r2, #14
  10b95c:	e5c3200c 	strb	r2, [r3, #12]
  10b960:	ebffda3b 	bl	102254 <rt_exit_critical>
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_CLSD;
  10b964:	e3e0300e 	mvn	r3, #14
  10b968:	ea000003 	b	10b97c <netconn_accept+0x194>
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
  10b96c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10b970:	e51b2008 	ldr	r2, [fp, #-8]
  10b974:	e5832000 	str	r2, [r3]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
  10b978:	e3a03000 	mov	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
  10b97c:	e1a00003 	mov	r0, r3
  10b980:	e24bd004 	sub	sp, fp, #4
  10b984:	e8bd8800 	pop	{fp, pc}

0010b988 <netconn_recv_data>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf)
{
  10b988:	e92d4800 	push	{fp, lr}
  10b98c:	e28db004 	add	fp, sp, #4
  10b990:	e24dd028 	sub	sp, sp, #40	; 0x28
  10b994:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10b998:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  void *buf = NULL;
  10b99c:	e3a03000 	mov	r3, #0
  10b9a0:	e50b300c 	str	r3, [fp, #-12]
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
  10b9a4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b9a8:	e3530000 	cmp	r3, #0
  10b9ac:	1a000008 	bne	10b9d4 <netconn_recv_data+0x4c>
  10b9b0:	e3060544 	movw	r0, #25924	; 0x6544
  10b9b4:	e3400014 	movt	r0, #20
  10b9b8:	ebffddd5 	bl	103114 <rt_kprintf>
  10b9bc:	e30011e7 	movw	r1, #487	; 0x1e7
  10b9c0:	e306039c 	movw	r0, #25500	; 0x639c
  10b9c4:	e3400014 	movt	r0, #20
  10b9c8:	ebfffdc8 	bl	10b0f0 <sys_arch_assert>
  10b9cc:	e3e0300f 	mvn	r3, #15
  10b9d0:	ea0000a5 	b	10bc6c <netconn_recv_data+0x2e4>
  *new_buf = NULL;
  10b9d4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b9d8:	e3a02000 	mov	r2, #0
  10b9dc:	e5832000 	str	r2, [r3]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
  10b9e0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b9e4:	e3530000 	cmp	r3, #0
  10b9e8:	1a000008 	bne	10ba10 <netconn_recv_data+0x88>
  10b9ec:	e3060564 	movw	r0, #25956	; 0x6564
  10b9f0:	e3400014 	movt	r0, #20
  10b9f4:	ebffddc6 	bl	103114 <rt_kprintf>
  10b9f8:	e30011e9 	movw	r1, #489	; 0x1e9
  10b9fc:	e306039c 	movw	r0, #25500	; 0x639c
  10ba00:	e3400014 	movt	r0, #20
  10ba04:	ebfffdb9 	bl	10b0f0 <sys_arch_assert>
  10ba08:	e3e0300f 	mvn	r3, #15
  10ba0c:	ea000096 	b	10bc6c <netconn_recv_data+0x2e4>
#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
  10ba10:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10ba14:	e5933000 	ldr	r3, [r3]
  10ba18:	e20330f0 	and	r3, r3, #240	; 0xf0
  10ba1c:	e3530010 	cmp	r3, #16
  10ba20:	1a000011 	bne	10ba6c <netconn_recv_data+0xe4>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    if (!sys_mbox_valid(&conn->recvmbox)) {
  10ba24:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10ba28:	e2833014 	add	r3, r3, #20
  10ba2c:	e1a00003 	mov	r0, r3
  10ba30:	ebfffd65 	bl	10afcc <sys_mbox_valid>
  10ba34:	e1a03000 	mov	r3, r0
  10ba38:	e3530000 	cmp	r3, #0
  10ba3c:	1a00000a 	bne	10ba6c <netconn_recv_data+0xe4>
      /* This happens when calling this function after receiving FIN */
      return sys_mbox_valid(&conn->acceptmbox) ? ERR_CONN : ERR_CLSD;
  10ba40:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10ba44:	e2833018 	add	r3, r3, #24
  10ba48:	e1a00003 	mov	r0, r3
  10ba4c:	ebfffd5e 	bl	10afcc <sys_mbox_valid>
  10ba50:	e1a03000 	mov	r3, r0
  10ba54:	e3530000 	cmp	r3, #0
  10ba58:	0a000001 	beq	10ba64 <netconn_recv_data+0xdc>
  10ba5c:	e3e0300a 	mvn	r3, #10
  10ba60:	ea000081 	b	10bc6c <netconn_recv_data+0x2e4>
  10ba64:	e3e0300e 	mvn	r3, #14
  10ba68:	ea00007f 	b	10bc6c <netconn_recv_data+0x2e4>
    }
  }
#endif /* LWIP_TCP */
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
  10ba6c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10ba70:	e2833014 	add	r3, r3, #20
  10ba74:	e1a00003 	mov	r0, r3
  10ba78:	ebfffd53 	bl	10afcc <sys_mbox_valid>
  10ba7c:	e1a03000 	mov	r3, r0
  10ba80:	e3530000 	cmp	r3, #0
  10ba84:	1a000008 	bne	10baac <netconn_recv_data+0x124>
  10ba88:	e3060580 	movw	r0, #25984	; 0x6580
  10ba8c:	e3400014 	movt	r0, #20
  10ba90:	ebffdd9f 	bl	103114 <rt_kprintf>
  10ba94:	e30011f5 	movw	r1, #501	; 0x1f5
  10ba98:	e306039c 	movw	r0, #25500	; 0x639c
  10ba9c:	e3400014 	movt	r0, #20
  10baa0:	ebfffd92 	bl	10b0f0 <sys_arch_assert>
  10baa4:	e3e0300a 	mvn	r3, #10
  10baa8:	ea00006f 	b	10bc6c <netconn_recv_data+0x2e4>

  if (ERR_IS_FATAL(conn->last_err)) {
  10baac:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bab0:	e1d330dc 	ldrsb	r3, [r3, #12]
  10bab4:	e373000c 	cmn	r3, #12
  10bab8:	aa000002 	bge	10bac8 <netconn_recv_data+0x140>
    /* don't recv on fatal errors: this might block the application task
       waiting on recvmbox forever! */
    /* @todo: this does not allow us to fetch data that has been put into recvmbox
       before the fatal error occurred - is that a problem? */
    return conn->last_err;
  10babc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bac0:	e1d330dc 	ldrsb	r3, [r3, #12]
  10bac4:	ea000068 	b	10bc6c <netconn_recv_data+0x2e4>
    API_MSG_VAR_ALLOC(msg);
  }
#endif /* LWIP_TCP */

#if LWIP_SO_RCVTIMEO
  if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
  10bac8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bacc:	e2830014 	add	r0, r3, #20
  10bad0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bad4:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  10bad8:	e1a02003 	mov	r2, r3
  10badc:	e24b300c 	sub	r3, fp, #12
  10bae0:	e1a01003 	mov	r1, r3
  10bae4:	ebfffce7 	bl	10ae88 <sys_arch_mbox_fetch>
  10bae8:	e1a03000 	mov	r3, r0
  10baec:	e3730001 	cmn	r3, #1
  10baf0:	1a000001 	bne	10bafc <netconn_recv_data+0x174>
#endif /* (LWIP_UDP || LWIP_RAW) */
    {
      API_MSG_VAR_FREE(msg);
    }
#endif /* LWIP_TCP */
    return ERR_TIMEOUT;
  10baf4:	e3e03002 	mvn	r3, #2
  10baf8:	ea00005b 	b	10bc6c <netconn_recv_data+0x2e4>
  sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
#endif /* LWIP_SO_RCVTIMEO*/

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
  10bafc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bb00:	e5933000 	ldr	r3, [r3]
  10bb04:	e20330f0 	and	r3, r3, #240	; 0xf0
  10bb08:	e3530010 	cmp	r3, #16
  10bb0c:	1a000032 	bne	10bbdc <netconn_recv_data+0x254>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    /* Let the stack know that we have taken the data. */
    /* @todo: Speedup: Don't block and wait for the answer here
       (to prevent multiple thread-switches). */
    API_MSG_VAR_REF(msg).conn = conn;
  10bb10:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bb14:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    if (buf != NULL) {
  10bb18:	e51b300c 	ldr	r3, [fp, #-12]
  10bb1c:	e3530000 	cmp	r3, #0
  10bb20:	0a000003 	beq	10bb34 <netconn_recv_data+0x1ac>
      API_MSG_VAR_REF(msg).msg.r.len = ((struct pbuf *)buf)->tot_len;
  10bb24:	e51b300c 	ldr	r3, [fp, #-12]
  10bb28:	e1d330b8 	ldrh	r3, [r3, #8]
  10bb2c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  10bb30:	ea000001 	b	10bb3c <netconn_recv_data+0x1b4>
    } else {
      API_MSG_VAR_REF(msg).msg.r.len = 1;
  10bb34:	e3a03001 	mov	r3, #1
  10bb38:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    }

    /* don't care for the return value of lwip_netconn_do_recv */
    netconn_apimsg(lwip_netconn_do_recv, &API_MSG_VAR_REF(msg));
  10bb3c:	e24b3024 	sub	r3, fp, #36	; 0x24
  10bb40:	e1a01003 	mov	r1, r3
  10bb44:	e30e0e30 	movw	r0, #60976	; 0xee30
  10bb48:	e3400010 	movt	r0, #16
  10bb4c:	ebfffdbd 	bl	10b248 <netconn_apimsg>
    API_MSG_VAR_FREE(msg);

    /* If we are closed, we indicate that we no longer wish to use the socket */
    if (buf == NULL) {
  10bb50:	e51b300c 	ldr	r3, [fp, #-12]
  10bb54:	e3530000 	cmp	r3, #0
  10bb58:	1a00001b 	bne	10bbcc <netconn_recv_data+0x244>
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
  10bb5c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bb60:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10bb64:	e3530000 	cmp	r3, #0
  10bb68:	0a000005 	beq	10bb84 <netconn_recv_data+0x1fc>
  10bb6c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bb70:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10bb74:	e3a02000 	mov	r2, #0
  10bb78:	e3a01001 	mov	r1, #1
  10bb7c:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  10bb80:	e12fff33 	blx	r3
      if (conn->pcb.ip == NULL) {
  10bb84:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bb88:	e5933008 	ldr	r3, [r3, #8]
  10bb8c:	e3530000 	cmp	r3, #0
  10bb90:	1a000008 	bne	10bbb8 <netconn_recv_data+0x230>
        /* race condition: RST during recv */
        return conn->last_err == ERR_OK ? ERR_RST : conn->last_err;
  10bb94:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bb98:	e1d330dc 	ldrsb	r3, [r3, #12]
  10bb9c:	e3530000 	cmp	r3, #0
  10bba0:	0a000002 	beq	10bbb0 <netconn_recv_data+0x228>
  10bba4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bba8:	e1d330dc 	ldrsb	r3, [r3, #12]
  10bbac:	ea00002e 	b	10bc6c <netconn_recv_data+0x2e4>
  10bbb0:	e3e0300d 	mvn	r3, #13
  10bbb4:	ea00002c 	b	10bc6c <netconn_recv_data+0x2e4>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
  10bbb8:	e3a01001 	mov	r1, #1
  10bbbc:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  10bbc0:	eb00015a 	bl	10c130 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
  10bbc4:	e3e0300e 	mvn	r3, #14
  10bbc8:	ea000027 	b	10bc6c <netconn_recv_data+0x2e4>
    }
    len = ((struct pbuf *)buf)->tot_len;
  10bbcc:	e51b300c 	ldr	r3, [fp, #-12]
  10bbd0:	e1d330b8 	ldrh	r3, [r3, #8]
  10bbd4:	e14b30b6 	strh	r3, [fp, #-6]
  10bbd8:	ea00000d 	b	10bc14 <netconn_recv_data+0x28c>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
  10bbdc:	e51b300c 	ldr	r3, [fp, #-12]
  10bbe0:	e3530000 	cmp	r3, #0
  10bbe4:	1a000006 	bne	10bc04 <netconn_recv_data+0x27c>
  10bbe8:	e30605a0 	movw	r0, #26016	; 0x65a0
  10bbec:	e3400014 	movt	r0, #20
  10bbf0:	ebffdd47 	bl	103114 <rt_kprintf>
  10bbf4:	e300123e 	movw	r1, #574	; 0x23e
  10bbf8:	e306039c 	movw	r0, #25500	; 0x639c
  10bbfc:	e3400014 	movt	r0, #20
  10bc00:	ebfffd3a 	bl	10b0f0 <sys_arch_assert>
    len = netbuf_len((struct netbuf*)buf);
  10bc04:	e51b300c 	ldr	r3, [fp, #-12]
  10bc08:	e5933000 	ldr	r3, [r3]
  10bc0c:	e1d330b8 	ldrh	r3, [r3, #8]
  10bc10:	e14b30b6 	strh	r3, [fp, #-6]
  }
#endif /* (LWIP_UDP || LWIP_RAW) */

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
  10bc14:	ebffd988 	bl	10223c <rt_enter_critical>
  10bc18:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bc1c:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
  10bc20:	e15b30b6 	ldrh	r3, [fp, #-6]
  10bc24:	e0422003 	sub	r2, r2, r3
  10bc28:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bc2c:	e583202c 	str	r2, [r3, #44]	; 0x2c
  10bc30:	ebffd987 	bl	102254 <rt_exit_critical>
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
  10bc34:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bc38:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10bc3c:	e3530000 	cmp	r3, #0
  10bc40:	0a000005 	beq	10bc5c <netconn_recv_data+0x2d4>
  10bc44:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bc48:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10bc4c:	e15b20b6 	ldrh	r2, [fp, #-6]
  10bc50:	e3a01001 	mov	r1, #1
  10bc54:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  10bc58:	e12fff33 	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
  10bc5c:	e51b200c 	ldr	r2, [fp, #-12]
  10bc60:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10bc64:	e5832000 	str	r2, [r3]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
  10bc68:	e3a03000 	mov	r3, #0
}
  10bc6c:	e1a00003 	mov	r0, r3
  10bc70:	e24bd004 	sub	sp, fp, #4
  10bc74:	e8bd8800 	pop	{fp, pc}

0010bc78 <netconn_recv_tcp_pbuf>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf(struct netconn *conn, struct pbuf **new_buf)
{
  10bc78:	e92d4800 	push	{fp, lr}
  10bc7c:	e28db004 	add	fp, sp, #4
  10bc80:	e24dd008 	sub	sp, sp, #8
  10bc84:	e50b0008 	str	r0, [fp, #-8]
  10bc88:	e50b100c 	str	r1, [fp, #-12]
  LWIP_ERROR("netconn_recv: invalid conn", (conn != NULL) &&
  10bc8c:	e51b3008 	ldr	r3, [fp, #-8]
  10bc90:	e3530000 	cmp	r3, #0
  10bc94:	0a000004 	beq	10bcac <netconn_recv_tcp_pbuf+0x34>
  10bc98:	e51b3008 	ldr	r3, [fp, #-8]
  10bc9c:	e5933000 	ldr	r3, [r3]
  10bca0:	e20330f0 	and	r3, r3, #240	; 0xf0
  10bca4:	e3530010 	cmp	r3, #16
  10bca8:	0a000008 	beq	10bcd0 <netconn_recv_tcp_pbuf+0x58>
  10bcac:	e3060564 	movw	r0, #25956	; 0x6564
  10bcb0:	e3400014 	movt	r0, #20
  10bcb4:	ebffdd16 	bl	103114 <rt_kprintf>
  10bcb8:	e300125e 	movw	r1, #606	; 0x25e
  10bcbc:	e306039c 	movw	r0, #25500	; 0x639c
  10bcc0:	e3400014 	movt	r0, #20
  10bcc4:	ebfffd09 	bl	10b0f0 <sys_arch_assert>
  10bcc8:	e3e0300f 	mvn	r3, #15
  10bccc:	ea000003 	b	10bce0 <netconn_recv_tcp_pbuf+0x68>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf);
  10bcd0:	e51b100c 	ldr	r1, [fp, #-12]
  10bcd4:	e51b0008 	ldr	r0, [fp, #-8]
  10bcd8:	ebffff2a 	bl	10b988 <netconn_recv_data>
  10bcdc:	e1a03000 	mov	r3, r0
}
  10bce0:	e1a00003 	mov	r0, r3
  10bce4:	e24bd004 	sub	sp, fp, #4
  10bce8:	e8bd8800 	pop	{fp, pc}

0010bcec <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
  10bcec:	e92d4800 	push	{fp, lr}
  10bcf0:	e28db004 	add	fp, sp, #4
  10bcf4:	e24dd018 	sub	sp, sp, #24
  10bcf8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10bcfc:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
#if LWIP_TCP
  struct netbuf *buf = NULL;
  10bd00:	e3a03000 	mov	r3, #0
  10bd04:	e50b3008 	str	r3, [fp, #-8]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
  10bd08:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10bd0c:	e3530000 	cmp	r3, #0
  10bd10:	1a000008 	bne	10bd38 <netconn_recv+0x4c>
  10bd14:	e3060544 	movw	r0, #25924	; 0x6544
  10bd18:	e3400014 	movt	r0, #20
  10bd1c:	ebffdcfc 	bl	103114 <rt_kprintf>
  10bd20:	e3a01f9d 	mov	r1, #628	; 0x274
  10bd24:	e306039c 	movw	r0, #25500	; 0x639c
  10bd28:	e3400014 	movt	r0, #20
  10bd2c:	ebfffcef 	bl	10b0f0 <sys_arch_assert>
  10bd30:	e3e0300f 	mvn	r3, #15
  10bd34:	ea00004d 	b	10be70 <netconn_recv+0x184>
  *new_buf = NULL;
  10bd38:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10bd3c:	e3a02000 	mov	r2, #0
  10bd40:	e5832000 	str	r2, [r3]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
  10bd44:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10bd48:	e3530000 	cmp	r3, #0
  10bd4c:	1a000008 	bne	10bd74 <netconn_recv+0x88>
  10bd50:	e3060564 	movw	r0, #25956	; 0x6564
  10bd54:	e3400014 	movt	r0, #20
  10bd58:	ebffdced 	bl	103114 <rt_kprintf>
  10bd5c:	e3001276 	movw	r1, #630	; 0x276
  10bd60:	e306039c 	movw	r0, #25500	; 0x639c
  10bd64:	e3400014 	movt	r0, #20
  10bd68:	ebfffce0 	bl	10b0f0 <sys_arch_assert>
  10bd6c:	e3e0300f 	mvn	r3, #15
  10bd70:	ea00003e 	b	10be70 <netconn_recv+0x184>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
  10bd74:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10bd78:	e5933000 	ldr	r3, [r3]
  10bd7c:	e20330f0 	and	r3, r3, #240	; 0xf0
  10bd80:	e3530010 	cmp	r3, #16
  10bd84:	1a000035 	bne	10be60 <netconn_recv+0x174>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
  10bd88:	e3a03000 	mov	r3, #0
  10bd8c:	e50b3010 	str	r3, [fp, #-16]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
  10bd90:	e3a02d0a 	mov	r2, #640	; 0x280
  10bd94:	e306139c 	movw	r1, #25500	; 0x639c
  10bd98:	e3401014 	movt	r1, #20
  10bd9c:	e3a00007 	mov	r0, #7
  10bda0:	eb0034cc 	bl	1190d8 <memp_malloc_fn>
  10bda4:	e50b0008 	str	r0, [fp, #-8]
    if (buf == NULL) {
  10bda8:	e51b3008 	ldr	r3, [fp, #-8]
  10bdac:	e3530000 	cmp	r3, #0
  10bdb0:	1a000001 	bne	10bdbc <netconn_recv+0xd0>
      return ERR_MEM;
  10bdb4:	e3e03000 	mvn	r3, #0
  10bdb8:	ea00002c 	b	10be70 <netconn_recv+0x184>
    }

    err = netconn_recv_data(conn, (void **)&p);
  10bdbc:	e24b3010 	sub	r3, fp, #16
  10bdc0:	e1a01003 	mov	r1, r3
  10bdc4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  10bdc8:	ebfffeee 	bl	10b988 <netconn_recv_data>
  10bdcc:	e1a03000 	mov	r3, r0
  10bdd0:	e54b3009 	strb	r3, [fp, #-9]
    if (err != ERR_OK) {
  10bdd4:	e15b30d9 	ldrsb	r3, [fp, #-9]
  10bdd8:	e3530000 	cmp	r3, #0
  10bddc:	0a000004 	beq	10bdf4 <netconn_recv+0x108>
      memp_free(MEMP_NETBUF, buf);
  10bde0:	e51b1008 	ldr	r1, [fp, #-8]
  10bde4:	e3a00007 	mov	r0, #7
  10bde8:	eb003522 	bl	119278 <memp_free>
      return err;
  10bdec:	e15b30d9 	ldrsb	r3, [fp, #-9]
  10bdf0:	ea00001e 	b	10be70 <netconn_recv+0x184>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
  10bdf4:	e51b3010 	ldr	r3, [fp, #-16]
  10bdf8:	e3530000 	cmp	r3, #0
  10bdfc:	1a000006 	bne	10be1c <netconn_recv+0x130>
  10be00:	e30605ac 	movw	r0, #26028	; 0x65ac
  10be04:	e3400014 	movt	r0, #20
  10be08:	ebffdcc1 	bl	103114 <rt_kprintf>
  10be0c:	e300128a 	movw	r1, #650	; 0x28a
  10be10:	e306039c 	movw	r0, #25500	; 0x639c
  10be14:	e3400014 	movt	r0, #20
  10be18:	ebfffcb4 	bl	10b0f0 <sys_arch_assert>

    buf->p = p;
  10be1c:	e51b2010 	ldr	r2, [fp, #-16]
  10be20:	e51b3008 	ldr	r3, [fp, #-8]
  10be24:	e5832000 	str	r2, [r3]
    buf->ptr = p;
  10be28:	e51b2010 	ldr	r2, [fp, #-16]
  10be2c:	e51b3008 	ldr	r3, [fp, #-8]
  10be30:	e5832004 	str	r2, [r3, #4]
    buf->port = 0;
  10be34:	e51b3008 	ldr	r3, [fp, #-8]
  10be38:	e3a02000 	mov	r2, #0
  10be3c:	e1c320bc 	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
  10be40:	e51b3008 	ldr	r3, [fp, #-8]
  10be44:	e3a02000 	mov	r2, #0
  10be48:	e5832008 	str	r2, [r3, #8]
    *new_buf = buf;
  10be4c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10be50:	e51b2008 	ldr	r2, [fp, #-8]
  10be54:	e5832000 	str	r2, [r3]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
  10be58:	e3a03000 	mov	r3, #0
  10be5c:	ea000003 	b	10be70 <netconn_recv+0x184>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf);
  10be60:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  10be64:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  10be68:	ebfffec6 	bl	10b988 <netconn_recv_data>
  10be6c:	e1a03000 	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
  10be70:	e1a00003 	mov	r0, r3
  10be74:	e24bd004 	sub	sp, fp, #4
  10be78:	e8bd8800 	pop	{fp, pc}

0010be7c <netconn_sendto>:
 * @param port the remote port to which to send the data
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_sendto(struct netconn *conn, struct netbuf *buf, const ip_addr_t *addr, u16_t port)
{
  10be7c:	e92d4800 	push	{fp, lr}
  10be80:	e28db004 	add	fp, sp, #4
  10be84:	e24dd010 	sub	sp, sp, #16
  10be88:	e50b0008 	str	r0, [fp, #-8]
  10be8c:	e50b100c 	str	r1, [fp, #-12]
  10be90:	e50b2010 	str	r2, [fp, #-16]
  10be94:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  if (buf != NULL) {
  10be98:	e51b300c 	ldr	r3, [fp, #-12]
  10be9c:	e3530000 	cmp	r3, #0
  10bea0:	0a000010 	beq	10bee8 <netconn_sendto+0x6c>
    ip_addr_set(&buf->addr, addr);
  10bea4:	e51b3010 	ldr	r3, [fp, #-16]
  10bea8:	e3530000 	cmp	r3, #0
  10beac:	0a000002 	beq	10bebc <netconn_sendto+0x40>
  10beb0:	e51b3010 	ldr	r3, [fp, #-16]
  10beb4:	e5933000 	ldr	r3, [r3]
  10beb8:	ea000000 	b	10bec0 <netconn_sendto+0x44>
  10bebc:	e3a03000 	mov	r3, #0
  10bec0:	e51b200c 	ldr	r2, [fp, #-12]
  10bec4:	e5823008 	str	r3, [r2, #8]
    buf->port = port;
  10bec8:	e51b300c 	ldr	r3, [fp, #-12]
  10becc:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  10bed0:	e1c320bc 	strh	r2, [r3, #12]
    return netconn_send(conn, buf);
  10bed4:	e51b100c 	ldr	r1, [fp, #-12]
  10bed8:	e51b0008 	ldr	r0, [fp, #-8]
  10bedc:	eb000005 	bl	10bef8 <netconn_send>
  10bee0:	e1a03000 	mov	r3, r0
  10bee4:	ea000000 	b	10beec <netconn_sendto+0x70>
  }
  return ERR_VAL;
  10bee8:	e3e03005 	mvn	r3, #5
}
  10beec:	e1a00003 	mov	r0, r3
  10bef0:	e24bd004 	sub	sp, fp, #4
  10bef4:	e8bd8800 	pop	{fp, pc}

0010bef8 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
  10bef8:	e92d4800 	push	{fp, lr}
  10befc:	e28db004 	add	fp, sp, #4
  10bf00:	e24dd028 	sub	sp, sp, #40	; 0x28
  10bf04:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10bf08:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
  10bf0c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bf10:	e3530000 	cmp	r3, #0
  10bf14:	1a000008 	bne	10bf3c <netconn_send+0x44>
  10bf18:	e30605b8 	movw	r0, #26040	; 0x65b8
  10bf1c:	e3400014 	movt	r0, #20
  10bf20:	ebffdc7b 	bl	103114 <rt_kprintf>
  10bf24:	e30012c3 	movw	r1, #707	; 0x2c3
  10bf28:	e306039c 	movw	r0, #25500	; 0x639c
  10bf2c:	e3400014 	movt	r0, #20
  10bf30:	ebfffc6e 	bl	10b0f0 <sys_arch_assert>
  10bf34:	e3e0300f 	mvn	r3, #15
  10bf38:	ea00000b 	b	10bf6c <netconn_send+0x74>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10bf3c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bf40:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  API_MSG_VAR_REF(msg).msg.b = buf;
  10bf44:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10bf48:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
  10bf4c:	e24b3020 	sub	r3, fp, #32
  10bf50:	e1a01003 	mov	r1, r3
  10bf54:	e30e0c24 	movw	r0, #60452	; 0xec24
  10bf58:	e3400010 	movt	r0, #16
  10bf5c:	ebfffcb9 	bl	10b248 <netconn_apimsg>
  10bf60:	e1a03000 	mov	r3, r0
  10bf64:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  return err;
  10bf68:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10bf6c:	e1a00003 	mov	r0, r3
  10bf70:	e24bd004 	sub	sp, fp, #4
  10bf74:	e8bd8800 	pop	{fp, pc}

0010bf78 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
  10bf78:	e92d4800 	push	{fp, lr}
  10bf7c:	e28db004 	add	fp, sp, #4
  10bf80:	e24dd030 	sub	sp, sp, #48	; 0x30
  10bf84:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10bf88:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  10bf8c:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  10bf90:	e54b3031 	strb	r3, [fp, #-49]	; 0xffffffcf
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  u8_t dontblock;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
  10bf94:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bf98:	e3530000 	cmp	r3, #0
  10bf9c:	1a000008 	bne	10bfc4 <netconn_write_partly+0x4c>
  10bfa0:	e30605d4 	movw	r0, #26068	; 0x65d4
  10bfa4:	e3400014 	movt	r0, #20
  10bfa8:	ebffdc59 	bl	103114 <rt_kprintf>
  10bfac:	e30012e6 	movw	r1, #742	; 0x2e6
  10bfb0:	e306039c 	movw	r0, #25500	; 0x639c
  10bfb4:	e3400014 	movt	r0, #20
  10bfb8:	ebfffc4c 	bl	10b0f0 <sys_arch_assert>
  10bfbc:	e3e0300f 	mvn	r3, #15
  10bfc0:	ea000057 	b	10c124 <netconn_write_partly+0x1ac>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
  10bfc4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bfc8:	e5933000 	ldr	r3, [r3]
  10bfcc:	e20330f0 	and	r3, r3, #240	; 0xf0
  10bfd0:	e3530010 	cmp	r3, #16
  10bfd4:	0a000008 	beq	10bffc <netconn_write_partly+0x84>
  10bfd8:	e30605f0 	movw	r0, #26096	; 0x65f0
  10bfdc:	e3400014 	movt	r0, #20
  10bfe0:	ebffdc4b 	bl	103114 <rt_kprintf>
  10bfe4:	e30012e7 	movw	r1, #743	; 0x2e7
  10bfe8:	e306039c 	movw	r0, #25500	; 0x639c
  10bfec:	e3400014 	movt	r0, #20
  10bff0:	ebfffc3e 	bl	10b0f0 <sys_arch_assert>
  10bff4:	e3e03005 	mvn	r3, #5
  10bff8:	ea000049 	b	10c124 <netconn_write_partly+0x1ac>
  if (size == 0) {
  10bffc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  10c000:	e3530000 	cmp	r3, #0
  10c004:	1a000001 	bne	10c010 <netconn_write_partly+0x98>
    return ERR_OK;
  10c008:	e3a03000 	mov	r3, #0
  10c00c:	ea000044 	b	10c124 <netconn_write_partly+0x1ac>
  }
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
  10c010:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c014:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10c018:	e2033002 	and	r3, r3, #2
  10c01c:	e3530000 	cmp	r3, #0
  10c020:	1a000003 	bne	10c034 <netconn_write_partly+0xbc>
  10c024:	e55b3031 	ldrb	r3, [fp, #-49]	; 0xffffffcf
  10c028:	e2033004 	and	r3, r3, #4
  10c02c:	e3530000 	cmp	r3, #0
  10c030:	0a000001 	beq	10c03c <netconn_write_partly+0xc4>
  10c034:	e3a03001 	mov	r3, #1
  10c038:	ea000000 	b	10c040 <netconn_write_partly+0xc8>
  10c03c:	e3a03000 	mov	r3, #0
  10c040:	e54b3005 	strb	r3, [fp, #-5]
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
  10c044:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c048:	e5933020 	ldr	r3, [r3, #32]
  10c04c:	e3530000 	cmp	r3, #0
  10c050:	0a000001 	beq	10c05c <netconn_write_partly+0xe4>
    dontblock = 1;
  10c054:	e3a03001 	mov	r3, #1
  10c058:	e54b3005 	strb	r3, [fp, #-5]
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
  10c05c:	e55b3005 	ldrb	r3, [fp, #-5]
  10c060:	e3530000 	cmp	r3, #0
  10c064:	0a000004 	beq	10c07c <netconn_write_partly+0x104>
  10c068:	e59b3004 	ldr	r3, [fp, #4]
  10c06c:	e3530000 	cmp	r3, #0
  10c070:	1a000001 	bne	10c07c <netconn_write_partly+0x104>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
  10c074:	e3e03005 	mvn	r3, #5
  10c078:	ea000029 	b	10c124 <netconn_write_partly+0x1ac>
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
  10c07c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c080:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  API_MSG_VAR_REF(msg).msg.w.dataptr = dataptr;
  10c084:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10c088:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
  10c08c:	e55b3031 	ldrb	r3, [fp, #-49]	; 0xffffffcf
  10c090:	e54b3010 	strb	r3, [fp, #-16]
  API_MSG_VAR_REF(msg).msg.w.len = size;
  10c094:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  10c098:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
  10c09c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c0a0:	e5933020 	ldr	r3, [r3, #32]
  10c0a4:	e3530000 	cmp	r3, #0
  10c0a8:	0a000003 	beq	10c0bc <netconn_write_partly+0x144>
    /* get the time we started, which is later compared to
        sys_now() + conn->send_timeout */
    API_MSG_VAR_REF(msg).msg.w.time_started = sys_now();
  10c0ac:	ebfffc28 	bl	10b154 <sys_now>
  10c0b0:	e1a03000 	mov	r3, r0
  10c0b4:	e50b300c 	str	r3, [fp, #-12]
  10c0b8:	ea000001 	b	10c0c4 <netconn_write_partly+0x14c>
  } else {
    API_MSG_VAR_REF(msg).msg.w.time_started = 0;
  10c0bc:	e3a03000 	mov	r3, #0
  10c0c0:	e50b300c 	str	r3, [fp, #-12]
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
  10c0c4:	e24b3020 	sub	r3, fp, #32
  10c0c8:	e1a01003 	mov	r1, r3
  10c0cc:	e30f051c 	movw	r0, #62748	; 0xf51c
  10c0d0:	e3400010 	movt	r0, #16
  10c0d4:	ebfffc5b 	bl	10b248 <netconn_apimsg>
  10c0d8:	e1a03000 	mov	r3, r0
  10c0dc:	e54b3006 	strb	r3, [fp, #-6]
  if ((err == ERR_OK) && (bytes_written != NULL)) {
  10c0e0:	e15b30d6 	ldrsb	r3, [fp, #-6]
  10c0e4:	e3530000 	cmp	r3, #0
  10c0e8:	1a00000c 	bne	10c120 <netconn_write_partly+0x1a8>
  10c0ec:	e59b3004 	ldr	r3, [fp, #4]
  10c0f0:	e3530000 	cmp	r3, #0
  10c0f4:	0a000009 	beq	10c120 <netconn_write_partly+0x1a8>
    if (dontblock) {
  10c0f8:	e55b3005 	ldrb	r3, [fp, #-5]
  10c0fc:	e3530000 	cmp	r3, #0
  10c100:	0a000003 	beq	10c114 <netconn_write_partly+0x19c>
      /* nonblocking write: maybe the data has been sent partly */
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.len;
  10c104:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  10c108:	e59b3004 	ldr	r3, [fp, #4]
  10c10c:	e5832000 	str	r2, [r3]
  10c110:	ea000002 	b	10c120 <netconn_write_partly+0x1a8>
    } else {
      /* blocking call succeeded: all data has been sent if it */
      *bytes_written = size;
  10c114:	e59b3004 	ldr	r3, [fp, #4]
  10c118:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  10c11c:	e5832000 	str	r2, [r3]
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
  10c120:	e15b30d6 	ldrsb	r3, [fp, #-6]
}
  10c124:	e1a00003 	mov	r0, r3
  10c128:	e24bd004 	sub	sp, fp, #4
  10c12c:	e8bd8800 	pop	{fp, pc}

0010c130 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
  10c130:	e92d4800 	push	{fp, lr}
  10c134:	e28db004 	add	fp, sp, #4
  10c138:	e24dd028 	sub	sp, sp, #40	; 0x28
  10c13c:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10c140:	e1a03001 	mov	r3, r1
  10c144:	e54b3029 	strb	r3, [fp, #-41]	; 0xffffffd7
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
  10c148:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c14c:	e3530000 	cmp	r3, #0
  10c150:	1a000008 	bne	10c178 <netconn_close_shutdown+0x48>
  10c154:	e3060614 	movw	r0, #26132	; 0x6614
  10c158:	e3400014 	movt	r0, #20
  10c15c:	ebffdbec 	bl	103114 <rt_kprintf>
  10c160:	e3a01fca 	mov	r1, #808	; 0x328
  10c164:	e306039c 	movw	r0, #25500	; 0x639c
  10c168:	e3400014 	movt	r0, #20
  10c16c:	ebfffbdf 	bl	10b0f0 <sys_arch_assert>
  10c170:	e3e0300f 	mvn	r3, #15
  10c174:	ea00000e 	b	10c1b4 <netconn_close_shutdown+0x84>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10c178:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c17c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
  10c180:	e55b3029 	ldrb	r3, [fp, #-41]	; 0xffffffd7
  10c184:	e54b3018 	strb	r3, [fp, #-24]	; 0xffffffe8
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
  10c188:	ebfffbf1 	bl	10b154 <sys_now>
  10c18c:	e1a03000 	mov	r3, r0
  10c190:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
  10c194:	e24b3020 	sub	r3, fp, #32
  10c198:	e1a01003 	mov	r1, r3
  10c19c:	e30f09f0 	movw	r0, #63984	; 0xf9f0
  10c1a0:	e3400010 	movt	r0, #16
  10c1a4:	ebfffc27 	bl	10b248 <netconn_apimsg>
  10c1a8:	e1a03000 	mov	r3, r0
  10c1ac:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  return err;
  10c1b0:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10c1b4:	e1a00003 	mov	r0, r3
  10c1b8:	e24bd004 	sub	sp, fp, #4
  10c1bc:	e8bd8800 	pop	{fp, pc}

0010c1c0 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
  10c1c0:	e92d4800 	push	{fp, lr}
  10c1c4:	e28db004 	add	fp, sp, #4
  10c1c8:	e24dd008 	sub	sp, sp, #8
  10c1cc:	e50b0008 	str	r0, [fp, #-8]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
  10c1d0:	e3a01003 	mov	r1, #3
  10c1d4:	e51b0008 	ldr	r0, [fp, #-8]
  10c1d8:	ebffffd4 	bl	10c130 <netconn_close_shutdown>
  10c1dc:	e1a03000 	mov	r3, r0
}
  10c1e0:	e1a00003 	mov	r0, r3
  10c1e4:	e24bd004 	sub	sp, fp, #4
  10c1e8:	e8bd8800 	pop	{fp, pc}

0010c1ec <netconn_shutdown>:
 * @param shut_tx shut down the TX side (no more write possible after this)
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_shutdown(struct netconn *conn, u8_t shut_rx, u8_t shut_tx)
{
  10c1ec:	e92d4800 	push	{fp, lr}
  10c1f0:	e28db004 	add	fp, sp, #4
  10c1f4:	e24dd008 	sub	sp, sp, #8
  10c1f8:	e50b0008 	str	r0, [fp, #-8]
  10c1fc:	e1a03001 	mov	r3, r1
  10c200:	e54b3009 	strb	r3, [fp, #-9]
  10c204:	e1a03002 	mov	r3, r2
  10c208:	e54b300a 	strb	r3, [fp, #-10]
  return netconn_close_shutdown(conn, (shut_rx ? NETCONN_SHUT_RD : 0) | (shut_tx ? NETCONN_SHUT_WR : 0));
  10c20c:	e55b3009 	ldrb	r3, [fp, #-9]
  10c210:	e3530000 	cmp	r3, #0
  10c214:	13a03001 	movne	r3, #1
  10c218:	03a03000 	moveq	r3, #0
  10c21c:	e6ef3073 	uxtb	r3, r3
  10c220:	e6af3073 	sxtb	r3, r3
  10c224:	e55b200a 	ldrb	r2, [fp, #-10]
  10c228:	e3520000 	cmp	r2, #0
  10c22c:	0a000001 	beq	10c238 <netconn_shutdown+0x4c>
  10c230:	e3a02002 	mov	r2, #2
  10c234:	ea000000 	b	10c23c <netconn_shutdown+0x50>
  10c238:	e3a02000 	mov	r2, #0
  10c23c:	e1823003 	orr	r3, r2, r3
  10c240:	e6af3073 	sxtb	r3, r3
  10c244:	e6ef3073 	uxtb	r3, r3
  10c248:	e1a01003 	mov	r1, r3
  10c24c:	e51b0008 	ldr	r0, [fp, #-8]
  10c250:	ebffffb6 	bl	10c130 <netconn_close_shutdown>
  10c254:	e1a03000 	mov	r3, r0
}
  10c258:	e1a00003 	mov	r0, r3
  10c25c:	e24bd004 	sub	sp, fp, #4
  10c260:	e8bd8800 	pop	{fp, pc}

0010c264 <netconn_join_leave_group>:
err_t
netconn_join_leave_group(struct netconn *conn,
                         const ip_addr_t *multiaddr,
                         const ip_addr_t *netif_addr,
                         enum netconn_igmp join_or_leave)
{
  10c264:	e92d4800 	push	{fp, lr}
  10c268:	e28db004 	add	fp, sp, #4
  10c26c:	e24dd030 	sub	sp, sp, #48	; 0x30
  10c270:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10c274:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  10c278:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  10c27c:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_join_leave_group: invalid conn",  (conn != NULL), return ERR_ARG;);
  10c280:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c284:	e3530000 	cmp	r3, #0
  10c288:	1a000008 	bne	10c2b0 <netconn_join_leave_group+0x4c>
  10c28c:	e3060630 	movw	r0, #26160	; 0x6630
  10c290:	e3400014 	movt	r0, #20
  10c294:	ebffdb9e 	bl	103114 <rt_kprintf>
  10c298:	e3a01e37 	mov	r1, #880	; 0x370
  10c29c:	e306039c 	movw	r0, #25500	; 0x639c
  10c2a0:	e3400014 	movt	r0, #20
  10c2a4:	ebfffb91 	bl	10b0f0 <sys_arch_assert>
  10c2a8:	e3e0300f 	mvn	r3, #15
  10c2ac:	ea00001b 	b	10c320 <netconn_join_leave_group+0xbc>

  API_MSG_VAR_ALLOC(msg);

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (multiaddr == NULL) {
  10c2b0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10c2b4:	e3530000 	cmp	r3, #0
  10c2b8:	1a000002 	bne	10c2c8 <netconn_join_leave_group+0x64>
    multiaddr = IP4_ADDR_ANY;
  10c2bc:	e3093908 	movw	r3, #39176	; 0x9908
  10c2c0:	e3403014 	movt	r3, #20
  10c2c4:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  }
  if (netif_addr == NULL) {
  10c2c8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  10c2cc:	e3530000 	cmp	r3, #0
  10c2d0:	1a000002 	bne	10c2e0 <netconn_join_leave_group+0x7c>
    netif_addr = IP4_ADDR_ANY;
  10c2d4:	e3093908 	movw	r3, #39176	; 0x9908
  10c2d8:	e3403014 	movt	r3, #20
  10c2dc:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_REF(msg).conn = conn;
  10c2e0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c2e4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  API_MSG_VAR_REF(msg).msg.jl.multiaddr = API_MSG_VAR_REF(multiaddr);
  10c2e8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10c2ec:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  API_MSG_VAR_REF(msg).msg.jl.netif_addr = API_MSG_VAR_REF(netif_addr);
  10c2f0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  10c2f4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  API_MSG_VAR_REF(msg).msg.jl.join_or_leave = join_or_leave;
  10c2f8:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  10c2fc:	e50b3010 	str	r3, [fp, #-16]
  err = netconn_apimsg(lwip_netconn_do_join_leave_group, &API_MSG_VAR_REF(msg));
  10c300:	e24b3020 	sub	r3, fp, #32
  10c304:	e1a01003 	mov	r1, r3
  10c308:	e30f0c30 	movw	r0, #64560	; 0xfc30
  10c30c:	e3400010 	movt	r0, #16
  10c310:	ebfffbcc 	bl	10b248 <netconn_apimsg>
  10c314:	e1a03000 	mov	r3, r0
  10c318:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  return err;
  10c31c:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10c320:	e1a00003 	mov	r0, r3
  10c324:	e24bd004 	sub	sp, fp, #4
  10c328:	e8bd8800 	pop	{fp, pc}

0010c32c <netconn_gethostbyname>:
netconn_gethostbyname_addrtype(const char *name, ip_addr_t *addr, u8_t dns_addrtype)
#else
err_t
netconn_gethostbyname(const char *name, ip_addr_t *addr)
#endif
{
  10c32c:	e92d4800 	push	{fp, lr}
  10c330:	e28db004 	add	fp, sp, #4
  10c334:	e24dd028 	sub	sp, sp, #40	; 0x28
  10c338:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10c33c:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  sys_sem_t sem;
#endif /* LWIP_MPU_COMPATIBLE */
  err_t err;
  err_t cberr;

  LWIP_ERROR("netconn_gethostbyname: invalid name", (name != NULL), return ERR_ARG;);
  10c340:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c344:	e3530000 	cmp	r3, #0
  10c348:	1a000008 	bne	10c370 <netconn_gethostbyname+0x44>
  10c34c:	e3060658 	movw	r0, #26200	; 0x6658
  10c350:	e3400014 	movt	r0, #20
  10c354:	ebffdb6e 	bl	103114 <rt_kprintf>
  10c358:	e30013a5 	movw	r1, #933	; 0x3a5
  10c35c:	e306039c 	movw	r0, #25500	; 0x639c
  10c360:	e3400014 	movt	r0, #20
  10c364:	ebfffb61 	bl	10b0f0 <sys_arch_assert>
  10c368:	e3e0300f 	mvn	r3, #15
  10c36c:	ea000036 	b	10c44c <netconn_gethostbyname+0x120>
  LWIP_ERROR("netconn_gethostbyname: invalid addr", (addr != NULL), return ERR_ARG;);
  10c370:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10c374:	e3530000 	cmp	r3, #0
  10c378:	1a000008 	bne	10c3a0 <netconn_gethostbyname+0x74>
  10c37c:	e306067c 	movw	r0, #26236	; 0x667c
  10c380:	e3400014 	movt	r0, #20
  10c384:	ebffdb62 	bl	103114 <rt_kprintf>
  10c388:	e30013a6 	movw	r1, #934	; 0x3a6
  10c38c:	e306039c 	movw	r0, #25500	; 0x639c
  10c390:	e3400014 	movt	r0, #20
  10c394:	ebfffb55 	bl	10b0f0 <sys_arch_assert>
  10c398:	e3e0300f 	mvn	r3, #15
  10c39c:	ea00002a 	b	10c44c <netconn_gethostbyname+0x120>
  API_VAR_ALLOC(struct dns_api_msg, MEMP_DNS_API_MSG, msg, ERR_MEM);
#if LWIP_MPU_COMPATIBLE
  strncpy(API_VAR_REF(msg).name, name, DNS_MAX_NAME_LENGTH-1);
  API_VAR_REF(msg).name[DNS_MAX_NAME_LENGTH-1] = 0;
#else /* LWIP_MPU_COMPATIBLE */
  msg.err = &err;
  10c3a0:	e24b301d 	sub	r3, fp, #29
  10c3a4:	e50b300c 	str	r3, [fp, #-12]
  msg.sem = &sem;
  10c3a8:	e24b301c 	sub	r3, fp, #28
  10c3ac:	e50b3010 	str	r3, [fp, #-16]
  API_VAR_REF(msg).addr = API_VAR_REF(addr);
  10c3b0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10c3b4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  API_VAR_REF(msg).name = name;
  10c3b8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c3bc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  API_VAR_REF(msg).dns_addrtype = dns_addrtype;
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_NETCONN_SEM_PER_THREAD
  API_VAR_REF(msg).sem = LWIP_NETCONN_THREAD_SEM_GET();
#else /* LWIP_NETCONN_SEM_PER_THREAD*/
  err = sys_sem_new(API_EXPR_REF(API_VAR_REF(msg).sem), 0);
  10c3c0:	e51b3010 	ldr	r3, [fp, #-16]
  10c3c4:	e3a01000 	mov	r1, #0
  10c3c8:	e1a00003 	mov	r0, r3
  10c3cc:	ebfff91a 	bl	10a83c <sys_sem_new>
  10c3d0:	e1a03000 	mov	r3, r0
  10c3d4:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  if (err != ERR_OK) {
  10c3d8:	e15b31dd 	ldrsb	r3, [fp, #-29]	; 0xffffffe3
  10c3dc:	e3530000 	cmp	r3, #0
  10c3e0:	0a000001 	beq	10c3ec <netconn_gethostbyname+0xc0>
    API_VAR_FREE(MEMP_DNS_API_MSG, msg);
    return err;
  10c3e4:	e15b31dd 	ldrsb	r3, [fp, #-29]	; 0xffffffe3
  10c3e8:	ea000017 	b	10c44c <netconn_gethostbyname+0x120>
  }
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  cberr = tcpip_callback(lwip_netconn_do_gethostbyname, &API_VAR_REF(msg));
  10c3ec:	e24b3018 	sub	r3, fp, #24
  10c3f0:	e3a02001 	mov	r2, #1
  10c3f4:	e1a01003 	mov	r1, r3
  10c3f8:	e30f0df8 	movw	r0, #65016	; 0xfdf8
  10c3fc:	e3400010 	movt	r0, #16
  10c400:	eb002772 	bl	1161d0 <tcpip_callback_with_block>
  10c404:	e1a03000 	mov	r3, r0
  10c408:	e54b3005 	strb	r3, [fp, #-5]
  if (cberr != ERR_OK) {
  10c40c:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10c410:	e3530000 	cmp	r3, #0
  10c414:	0a000004 	beq	10c42c <netconn_gethostbyname+0x100>
#if !LWIP_NETCONN_SEM_PER_THREAD
    sys_sem_free(API_EXPR_REF(API_VAR_REF(msg).sem));
  10c418:	e51b3010 	ldr	r3, [fp, #-16]
  10c41c:	e1a00003 	mov	r0, r3
  10c420:	ebfff930 	bl	10a8e8 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
    API_VAR_FREE(MEMP_DNS_API_MSG, msg);
    return cberr;
  10c424:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10c428:	ea000007 	b	10c44c <netconn_gethostbyname+0x120>
  }
  sys_sem_wait(API_EXPR_REF_SEM(API_VAR_REF(msg).sem));
  10c42c:	e51b3010 	ldr	r3, [fp, #-16]
  10c430:	e3a01000 	mov	r1, #0
  10c434:	e1a00003 	mov	r0, r3
  10c438:	ebfff940 	bl	10a940 <sys_arch_sem_wait>
#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(API_EXPR_REF(API_VAR_REF(msg).sem));
  10c43c:	e51b3010 	ldr	r3, [fp, #-16]
  10c440:	e1a00003 	mov	r0, r3
  10c444:	ebfff927 	bl	10a8e8 <sys_sem_free>
  *addr = msg->addr;
  err = msg->err;
#endif /* LWIP_MPU_COMPATIBLE */

  API_VAR_FREE(MEMP_DNS_API_MSG, msg);
  return err;
  10c448:	e15b31dd 	ldrsb	r3, [fp, #-29]	; 0xffffffe3
}
  10c44c:	e1a00003 	mov	r0, r3
  10c450:	e24bd004 	sub	sp, fp, #4
  10c454:	e8bd8800 	pop	{fp, pc}

0010c458 <recv_raw>:
 * @see raw.h (struct raw_pcb.recv) for parameters and return value
 */
static u8_t
recv_raw(void *arg, struct raw_pcb *pcb, struct pbuf *p,
    const ip_addr_t *addr)
{
  10c458:	e92d4800 	push	{fp, lr}
  10c45c:	e28db004 	add	fp, sp, #4
  10c460:	e24dd028 	sub	sp, sp, #40	; 0x28
  10c464:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  10c468:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  10c46c:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  10c470:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  struct pbuf *q;
  struct netbuf *buf;
  struct netconn *conn;

  LWIP_UNUSED_ARG(addr);
  conn = (struct netconn *)arg;
  10c474:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10c478:	e50b300c 	str	r3, [fp, #-12]

  if ((conn != NULL) && sys_mbox_valid(&conn->recvmbox)) {
  10c47c:	e51b300c 	ldr	r3, [fp, #-12]
  10c480:	e3530000 	cmp	r3, #0
  10c484:	0a00006b 	beq	10c638 <recv_raw+0x1e0>
  10c488:	e51b300c 	ldr	r3, [fp, #-12]
  10c48c:	e2833014 	add	r3, r3, #20
  10c490:	e1a00003 	mov	r0, r3
  10c494:	ebfffacc 	bl	10afcc <sys_mbox_valid>
  10c498:	e1a03000 	mov	r3, r0
  10c49c:	e3530000 	cmp	r3, #0
  10c4a0:	0a000064 	beq	10c638 <recv_raw+0x1e0>
#if LWIP_SO_RCVBUF
    int recv_avail;
    SYS_ARCH_GET(conn->recv_avail, recv_avail);
  10c4a4:	ebffd764 	bl	10223c <rt_enter_critical>
  10c4a8:	e51b300c 	ldr	r3, [fp, #-12]
  10c4ac:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  10c4b0:	e50b3010 	str	r3, [fp, #-16]
  10c4b4:	ebffd766 	bl	102254 <rt_exit_critical>
    if ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize) {
  10c4b8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c4bc:	e1d330b8 	ldrh	r3, [r3, #8]
  10c4c0:	e1a02003 	mov	r2, r3
  10c4c4:	e51b3010 	ldr	r3, [fp, #-16]
  10c4c8:	e0822003 	add	r2, r2, r3
  10c4cc:	e51b300c 	ldr	r3, [fp, #-12]
  10c4d0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  10c4d4:	e1520003 	cmp	r2, r3
  10c4d8:	da000001 	ble	10c4e4 <recv_raw+0x8c>
      return 0;
  10c4dc:	e3a03000 	mov	r3, #0
  10c4e0:	ea000055 	b	10c63c <recv_raw+0x1e4>
    }
#endif /* LWIP_SO_RCVBUF */
    /* copy the whole packet into new pbufs */
    q = pbuf_alloc(PBUF_RAW, p->tot_len, PBUF_RAM);
  10c4e4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c4e8:	e1d330b8 	ldrh	r3, [r3, #8]
  10c4ec:	e3a02000 	mov	r2, #0
  10c4f0:	e1a01003 	mov	r1, r3
  10c4f4:	e3a00004 	mov	r0, #4
  10c4f8:	eb003765 	bl	11a294 <pbuf_alloc>
  10c4fc:	e50b0008 	str	r0, [fp, #-8]
    if (q != NULL) {
  10c500:	e51b3008 	ldr	r3, [fp, #-8]
  10c504:	e3530000 	cmp	r3, #0
  10c508:	0a000009 	beq	10c534 <recv_raw+0xdc>
      if (pbuf_copy(q, p) != ERR_OK) {
  10c50c:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  10c510:	e51b0008 	ldr	r0, [fp, #-8]
  10c514:	eb003bba 	bl	11b404 <pbuf_copy>
  10c518:	e1a03000 	mov	r3, r0
  10c51c:	e3530000 	cmp	r3, #0
  10c520:	0a000003 	beq	10c534 <recv_raw+0xdc>
        pbuf_free(q);
  10c524:	e51b0008 	ldr	r0, [fp, #-8]
  10c528:	eb003a60 	bl	11aeb0 <pbuf_free>
        q = NULL;
  10c52c:	e3a03000 	mov	r3, #0
  10c530:	e50b3008 	str	r3, [fp, #-8]
      }
    }

    if (q != NULL) {
  10c534:	e51b3008 	ldr	r3, [fp, #-8]
  10c538:	e3530000 	cmp	r3, #0
  10c53c:	0a00003d 	beq	10c638 <recv_raw+0x1e0>
      u16_t len;
      buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
  10c540:	e3a02081 	mov	r2, #129	; 0x81
  10c544:	e30616a0 	movw	r1, #26272	; 0x66a0
  10c548:	e3401014 	movt	r1, #20
  10c54c:	e3a00007 	mov	r0, #7
  10c550:	eb0032e0 	bl	1190d8 <memp_malloc_fn>
  10c554:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
      if (buf == NULL) {
  10c558:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10c55c:	e3530000 	cmp	r3, #0
  10c560:	1a000003 	bne	10c574 <recv_raw+0x11c>
        pbuf_free(q);
  10c564:	e51b0008 	ldr	r0, [fp, #-8]
  10c568:	eb003a50 	bl	11aeb0 <pbuf_free>
        return 0;
  10c56c:	e3a03000 	mov	r3, #0
  10c570:	ea000031 	b	10c63c <recv_raw+0x1e4>
      }

      buf->p = q;
  10c574:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10c578:	e51b2008 	ldr	r2, [fp, #-8]
  10c57c:	e5832000 	str	r2, [r3]
      buf->ptr = q;
  10c580:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10c584:	e51b2008 	ldr	r2, [fp, #-8]
  10c588:	e5832004 	str	r2, [r3, #4]
      ip_addr_copy(buf->addr, *ip_current_src_addr());
  10c58c:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  10c590:	e3403014 	movt	r3, #20
  10c594:	e5932010 	ldr	r2, [r3, #16]
  10c598:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10c59c:	e5832008 	str	r2, [r3, #8]
      buf->port = pcb->protocol;
  10c5a0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  10c5a4:	e5d33010 	ldrb	r3, [r3, #16]
  10c5a8:	e6ff2073 	uxth	r2, r3
  10c5ac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10c5b0:	e1c320bc 	strh	r2, [r3, #12]

      len = q->tot_len;
  10c5b4:	e51b3008 	ldr	r3, [fp, #-8]
  10c5b8:	e1d330b8 	ldrh	r3, [r3, #8]
  10c5bc:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
      if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
  10c5c0:	e51b300c 	ldr	r3, [fp, #-12]
  10c5c4:	e2833014 	add	r3, r3, #20
  10c5c8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10c5cc:	e1a00003 	mov	r0, r3
  10c5d0:	ebfffa1f 	bl	10ae54 <sys_mbox_trypost>
  10c5d4:	e1a03000 	mov	r3, r0
  10c5d8:	e3530000 	cmp	r3, #0
  10c5dc:	0a000003 	beq	10c5f0 <recv_raw+0x198>
        netbuf_delete(buf);
  10c5e0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  10c5e4:	eb000e50 	bl	10ff2c <netbuf_delete>
        return 0;
  10c5e8:	e3a03000 	mov	r3, #0
  10c5ec:	ea000012 	b	10c63c <recv_raw+0x1e4>
      } else {
#if LWIP_SO_RCVBUF
        SYS_ARCH_INC(conn->recv_avail, len);
  10c5f0:	ebffd711 	bl	10223c <rt_enter_critical>
  10c5f4:	e51b300c 	ldr	r3, [fp, #-12]
  10c5f8:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
  10c5fc:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  10c600:	e0822003 	add	r2, r2, r3
  10c604:	e51b300c 	ldr	r3, [fp, #-12]
  10c608:	e583202c 	str	r2, [r3, #44]	; 0x2c
  10c60c:	ebffd710 	bl	102254 <rt_exit_critical>
#endif /* LWIP_SO_RCVBUF */
        /* Register event with callback */
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
  10c610:	e51b300c 	ldr	r3, [fp, #-12]
  10c614:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c618:	e3530000 	cmp	r3, #0
  10c61c:	0a000005 	beq	10c638 <recv_raw+0x1e0>
  10c620:	e51b300c 	ldr	r3, [fp, #-12]
  10c624:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c628:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  10c62c:	e3a01000 	mov	r1, #0
  10c630:	e51b000c 	ldr	r0, [fp, #-12]
  10c634:	e12fff33 	blx	r3
      }
    }
  }

  return 0; /* do not eat the packet */
  10c638:	e3a03000 	mov	r3, #0
}
  10c63c:	e1a00003 	mov	r0, r3
  10c640:	e24bd004 	sub	sp, fp, #4
  10c644:	e8bd8800 	pop	{fp, pc}

0010c648 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
   const ip_addr_t *addr, u16_t port)
{
  10c648:	e92d4800 	push	{fp, lr}
  10c64c:	e28db004 	add	fp, sp, #4
  10c650:	e24dd020 	sub	sp, sp, #32
  10c654:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10c658:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  10c65c:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  10c660:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
  10c664:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10c668:	e3530000 	cmp	r3, #0
  10c66c:	1a000006 	bne	10c68c <recv_udp+0x44>
  10c670:	e30606d0 	movw	r0, #26320	; 0x66d0
  10c674:	e3400014 	movt	r0, #20
  10c678:	ebffdaa5 	bl	103114 <rt_kprintf>
  10c67c:	e3a010b1 	mov	r1, #177	; 0xb1
  10c680:	e30606a0 	movw	r0, #26272	; 0x66a0
  10c684:	e3400014 	movt	r0, #20
  10c688:	ebfffa98 	bl	10b0f0 <sys_arch_assert>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
  10c68c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10c690:	e3530000 	cmp	r3, #0
  10c694:	1a000006 	bne	10c6b4 <recv_udp+0x6c>
  10c698:	e30606f4 	movw	r0, #26356	; 0x66f4
  10c69c:	e3400014 	movt	r0, #20
  10c6a0:	ebffda9b 	bl	103114 <rt_kprintf>
  10c6a4:	e3a010b2 	mov	r1, #178	; 0xb2
  10c6a8:	e30606a0 	movw	r0, #26272	; 0x66a0
  10c6ac:	e3400014 	movt	r0, #20
  10c6b0:	ebfffa8e 	bl	10b0f0 <sys_arch_assert>
  conn = (struct netconn *)arg;
  10c6b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10c6b8:	e50b3008 	str	r3, [fp, #-8]
  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
  10c6bc:	e51b3008 	ldr	r3, [fp, #-8]
  10c6c0:	e5933008 	ldr	r3, [r3, #8]
  10c6c4:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  10c6c8:	e1520003 	cmp	r2, r3
  10c6cc:	0a000006 	beq	10c6ec <recv_udp+0xa4>
  10c6d0:	e3060714 	movw	r0, #26388	; 0x6714
  10c6d4:	e3400014 	movt	r0, #20
  10c6d8:	ebffda8d 	bl	103114 <rt_kprintf>
  10c6dc:	e3a010b4 	mov	r1, #180	; 0xb4
  10c6e0:	e30606a0 	movw	r0, #26272	; 0x66a0
  10c6e4:	e3400014 	movt	r0, #20
  10c6e8:	ebfffa80 	bl	10b0f0 <sys_arch_assert>

#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  10c6ec:	ebffd6d2 	bl	10223c <rt_enter_critical>
  10c6f0:	e51b3008 	ldr	r3, [fp, #-8]
  10c6f4:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  10c6f8:	e50b300c 	str	r3, [fp, #-12]
  10c6fc:	ebffd6d4 	bl	102254 <rt_exit_critical>
  if ((conn == NULL) || !sys_mbox_valid(&conn->recvmbox) ||
  10c700:	e51b3008 	ldr	r3, [fp, #-8]
  10c704:	e3530000 	cmp	r3, #0
  10c708:	0a00000f 	beq	10c74c <recv_udp+0x104>
  10c70c:	e51b3008 	ldr	r3, [fp, #-8]
  10c710:	e2833014 	add	r3, r3, #20
  10c714:	e1a00003 	mov	r0, r3
  10c718:	ebfffa2b 	bl	10afcc <sys_mbox_valid>
  10c71c:	e1a03000 	mov	r3, r0
  10c720:	e3530000 	cmp	r3, #0
  10c724:	0a000008 	beq	10c74c <recv_udp+0x104>
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
  10c728:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10c72c:	e1d330b8 	ldrh	r3, [r3, #8]
  10c730:	e1a02003 	mov	r2, r3
  10c734:	e51b300c 	ldr	r3, [fp, #-12]
  10c738:	e0822003 	add	r2, r2, r3
  10c73c:	e51b3008 	ldr	r3, [fp, #-8]
  10c740:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  if ((conn == NULL) || !sys_mbox_valid(&conn->recvmbox) ||
  10c744:	e1520003 	cmp	r2, r3
  10c748:	da000002 	ble	10c758 <recv_udp+0x110>
#else  /* LWIP_SO_RCVBUF */
  if ((conn == NULL) || !sys_mbox_valid(&conn->recvmbox)) {
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
  10c74c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10c750:	eb0039d6 	bl	11aeb0 <pbuf_free>
    return;
  10c754:	ea00003d 	b	10c850 <recv_udp+0x208>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
  10c758:	e3a020c1 	mov	r2, #193	; 0xc1
  10c75c:	e30616a0 	movw	r1, #26272	; 0x66a0
  10c760:	e3401014 	movt	r1, #20
  10c764:	e3a00007 	mov	r0, #7
  10c768:	eb00325a 	bl	1190d8 <memp_malloc_fn>
  10c76c:	e50b0010 	str	r0, [fp, #-16]
  if (buf == NULL) {
  10c770:	e51b3010 	ldr	r3, [fp, #-16]
  10c774:	e3530000 	cmp	r3, #0
  10c778:	1a000002 	bne	10c788 <recv_udp+0x140>
    pbuf_free(p);
  10c77c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10c780:	eb0039ca 	bl	11aeb0 <pbuf_free>
    return;
  10c784:	ea000031 	b	10c850 <recv_udp+0x208>
  } else {
    buf->p = p;
  10c788:	e51b3010 	ldr	r3, [fp, #-16]
  10c78c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  10c790:	e5832000 	str	r2, [r3]
    buf->ptr = p;
  10c794:	e51b3010 	ldr	r3, [fp, #-16]
  10c798:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  10c79c:	e5832004 	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
  10c7a0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  10c7a4:	e3530000 	cmp	r3, #0
  10c7a8:	0a000002 	beq	10c7b8 <recv_udp+0x170>
  10c7ac:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  10c7b0:	e5933000 	ldr	r3, [r3]
  10c7b4:	ea000000 	b	10c7bc <recv_udp+0x174>
  10c7b8:	e3a03000 	mov	r3, #0
  10c7bc:	e51b2010 	ldr	r2, [fp, #-16]
  10c7c0:	e5823008 	str	r3, [r2, #8]
    buf->port = port;
  10c7c4:	e51b3010 	ldr	r3, [fp, #-16]
  10c7c8:	e1db20b4 	ldrh	r2, [fp, #4]
  10c7cc:	e1c320bc 	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
  10c7d0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10c7d4:	e1d330b8 	ldrh	r3, [r3, #8]
  10c7d8:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
  10c7dc:	e51b3008 	ldr	r3, [fp, #-8]
  10c7e0:	e2833014 	add	r3, r3, #20
  10c7e4:	e51b1010 	ldr	r1, [fp, #-16]
  10c7e8:	e1a00003 	mov	r0, r3
  10c7ec:	ebfff998 	bl	10ae54 <sys_mbox_trypost>
  10c7f0:	e1a03000 	mov	r3, r0
  10c7f4:	e3530000 	cmp	r3, #0
  10c7f8:	0a000002 	beq	10c808 <recv_udp+0x1c0>
    netbuf_delete(buf);
  10c7fc:	e51b0010 	ldr	r0, [fp, #-16]
  10c800:	eb000dc9 	bl	10ff2c <netbuf_delete>
    return;
  10c804:	ea000011 	b	10c850 <recv_udp+0x208>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
  10c808:	ebffd68b 	bl	10223c <rt_enter_critical>
  10c80c:	e51b3008 	ldr	r3, [fp, #-8]
  10c810:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
  10c814:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  10c818:	e0822003 	add	r2, r2, r3
  10c81c:	e51b3008 	ldr	r3, [fp, #-8]
  10c820:	e583202c 	str	r2, [r3, #44]	; 0x2c
  10c824:	ebffd68a 	bl	102254 <rt_exit_critical>
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
  10c828:	e51b3008 	ldr	r3, [fp, #-8]
  10c82c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c830:	e3530000 	cmp	r3, #0
  10c834:	0a000005 	beq	10c850 <recv_udp+0x208>
  10c838:	e51b3008 	ldr	r3, [fp, #-8]
  10c83c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c840:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  10c844:	e3a01000 	mov	r1, #0
  10c848:	e51b0008 	ldr	r0, [fp, #-8]
  10c84c:	e12fff33 	blx	r3
  }
}
  10c850:	e24bd004 	sub	sp, fp, #4
  10c854:	e8bd8800 	pop	{fp, pc}

0010c858 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
  10c858:	e92d4800 	push	{fp, lr}
  10c85c:	e28db004 	add	fp, sp, #4
  10c860:	e24dd018 	sub	sp, sp, #24
  10c864:	e50b0010 	str	r0, [fp, #-16]
  10c868:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10c86c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  10c870:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  struct netconn *conn;
  u16_t len;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
  10c874:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10c878:	e3530000 	cmp	r3, #0
  10c87c:	1a000006 	bne	10c89c <recv_tcp+0x44>
  10c880:	e3060734 	movw	r0, #26420	; 0x6734
  10c884:	e3400014 	movt	r0, #20
  10c888:	ebffda21 	bl	103114 <rt_kprintf>
  10c88c:	e3a010f3 	mov	r1, #243	; 0xf3
  10c890:	e30606a0 	movw	r0, #26272	; 0x66a0
  10c894:	e3400014 	movt	r0, #20
  10c898:	ebfffa14 	bl	10b0f0 <sys_arch_assert>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
  10c89c:	e51b3010 	ldr	r3, [fp, #-16]
  10c8a0:	e3530000 	cmp	r3, #0
  10c8a4:	1a000006 	bne	10c8c4 <recv_tcp+0x6c>
  10c8a8:	e3060758 	movw	r0, #26456	; 0x6758
  10c8ac:	e3400014 	movt	r0, #20
  10c8b0:	ebffda17 	bl	103114 <rt_kprintf>
  10c8b4:	e3a010f4 	mov	r1, #244	; 0xf4
  10c8b8:	e30606a0 	movw	r0, #26272	; 0x66a0
  10c8bc:	e3400014 	movt	r0, #20
  10c8c0:	ebfffa0a 	bl	10b0f0 <sys_arch_assert>
  conn = (struct netconn *)arg;
  10c8c4:	e51b3010 	ldr	r3, [fp, #-16]
  10c8c8:	e50b300c 	str	r3, [fp, #-12]

  if (conn == NULL) {
  10c8cc:	e51b300c 	ldr	r3, [fp, #-12]
  10c8d0:	e3530000 	cmp	r3, #0
  10c8d4:	1a000001 	bne	10c8e0 <recv_tcp+0x88>
    return ERR_VAL;
  10c8d8:	e3e03005 	mvn	r3, #5
  10c8dc:	ea000053 	b	10ca30 <recv_tcp+0x1d8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
  10c8e0:	e51b300c 	ldr	r3, [fp, #-12]
  10c8e4:	e5933008 	ldr	r3, [r3, #8]
  10c8e8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  10c8ec:	e1520003 	cmp	r2, r3
  10c8f0:	0a000006 	beq	10c910 <recv_tcp+0xb8>
  10c8f4:	e3060778 	movw	r0, #26488	; 0x6778
  10c8f8:	e3400014 	movt	r0, #20
  10c8fc:	ebffda04 	bl	103114 <rt_kprintf>
  10c900:	e3a010fa 	mov	r1, #250	; 0xfa
  10c904:	e30606a0 	movw	r0, #26272	; 0x66a0
  10c908:	e3400014 	movt	r0, #20
  10c90c:	ebfff9f7 	bl	10b0f0 <sys_arch_assert>

  if (!sys_mbox_valid(&conn->recvmbox)) {
  10c910:	e51b300c 	ldr	r3, [fp, #-12]
  10c914:	e2833014 	add	r3, r3, #20
  10c918:	e1a00003 	mov	r0, r3
  10c91c:	ebfff9aa 	bl	10afcc <sys_mbox_valid>
  10c920:	e1a03000 	mov	r3, r0
  10c924:	e3530000 	cmp	r3, #0
  10c928:	1a00000b 	bne	10c95c <recv_tcp+0x104>
    /* recvmbox already deleted */
    if (p != NULL) {
  10c92c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10c930:	e3530000 	cmp	r3, #0
  10c934:	0a000006 	beq	10c954 <recv_tcp+0xfc>
      tcp_recved(pcb, p->tot_len);
  10c938:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10c93c:	e1d330b8 	ldrh	r3, [r3, #8]
  10c940:	e1a01003 	mov	r1, r3
  10c944:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  10c948:	eb0045e0 	bl	11e0d0 <tcp_recved>
      pbuf_free(p);
  10c94c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  10c950:	eb003956 	bl	11aeb0 <pbuf_free>
    }
    return ERR_OK;
  10c954:	e3a03000 	mov	r3, #0
  10c958:	ea000034 	b	10ca30 <recv_tcp+0x1d8>
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  /* don't overwrite fatal errors! */
  if (err != ERR_OK) {
  10c95c:	e15b31d9 	ldrsb	r3, [fp, #-25]	; 0xffffffe7
  10c960:	e3530000 	cmp	r3, #0
  10c964:	0a00000b 	beq	10c998 <recv_tcp+0x140>
    NETCONN_SET_SAFE_ERR(conn, err);
  10c968:	e51b300c 	ldr	r3, [fp, #-12]
  10c96c:	e3530000 	cmp	r3, #0
  10c970:	0a000008 	beq	10c998 <recv_tcp+0x140>
  10c974:	ebffd630 	bl	10223c <rt_enter_critical>
  10c978:	e51b300c 	ldr	r3, [fp, #-12]
  10c97c:	e1d330dc 	ldrsb	r3, [r3, #12]
  10c980:	e373000c 	cmn	r3, #12
  10c984:	ba000002 	blt	10c994 <recv_tcp+0x13c>
  10c988:	e51b300c 	ldr	r3, [fp, #-12]
  10c98c:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  10c990:	e5c3200c 	strb	r2, [r3, #12]
  10c994:	ebffd62e 	bl	102254 <rt_exit_critical>
  }

  if (p != NULL) {
  10c998:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10c99c:	e3530000 	cmp	r3, #0
  10c9a0:	0a000003 	beq	10c9b4 <recv_tcp+0x15c>
    len = p->tot_len;
  10c9a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10c9a8:	e1d330b8 	ldrh	r3, [r3, #8]
  10c9ac:	e14b30b6 	strh	r3, [fp, #-6]
  10c9b0:	ea000001 	b	10c9bc <recv_tcp+0x164>
  } else {
    len = 0;
  10c9b4:	e3a03000 	mov	r3, #0
  10c9b8:	e14b30b6 	strh	r3, [fp, #-6]
  }

  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
  10c9bc:	e51b300c 	ldr	r3, [fp, #-12]
  10c9c0:	e2833014 	add	r3, r3, #20
  10c9c4:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  10c9c8:	e1a00003 	mov	r0, r3
  10c9cc:	ebfff920 	bl	10ae54 <sys_mbox_trypost>
  10c9d0:	e1a03000 	mov	r3, r0
  10c9d4:	e3530000 	cmp	r3, #0
  10c9d8:	0a000001 	beq	10c9e4 <recv_tcp+0x18c>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
  10c9dc:	e3e03000 	mvn	r3, #0
  10c9e0:	ea000012 	b	10ca30 <recv_tcp+0x1d8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
  10c9e4:	ebffd614 	bl	10223c <rt_enter_critical>
  10c9e8:	e51b300c 	ldr	r3, [fp, #-12]
  10c9ec:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
  10c9f0:	e15b30b6 	ldrh	r3, [fp, #-6]
  10c9f4:	e0822003 	add	r2, r2, r3
  10c9f8:	e51b300c 	ldr	r3, [fp, #-12]
  10c9fc:	e583202c 	str	r2, [r3, #44]	; 0x2c
  10ca00:	ebffd613 	bl	102254 <rt_exit_critical>
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
  10ca04:	e51b300c 	ldr	r3, [fp, #-12]
  10ca08:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10ca0c:	e3530000 	cmp	r3, #0
  10ca10:	0a000005 	beq	10ca2c <recv_tcp+0x1d4>
  10ca14:	e51b300c 	ldr	r3, [fp, #-12]
  10ca18:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10ca1c:	e15b20b6 	ldrh	r2, [fp, #-6]
  10ca20:	e3a01000 	mov	r1, #0
  10ca24:	e51b000c 	ldr	r0, [fp, #-12]
  10ca28:	e12fff33 	blx	r3
  }

  return ERR_OK;
  10ca2c:	e3a03000 	mov	r3, #0
}
  10ca30:	e1a00003 	mov	r0, r3
  10ca34:	e24bd004 	sub	sp, fp, #4
  10ca38:	e8bd8800 	pop	{fp, pc}

0010ca3c <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
  10ca3c:	e92d4800 	push	{fp, lr}
  10ca40:	e28db004 	add	fp, sp, #4
  10ca44:	e24dd010 	sub	sp, sp, #16
  10ca48:	e50b0010 	str	r0, [fp, #-16]
  10ca4c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct netconn *conn = (struct netconn *)arg;
  10ca50:	e51b3010 	ldr	r3, [fp, #-16]
  10ca54:	e50b3008 	str	r3, [fp, #-8]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
  10ca58:	e51b3008 	ldr	r3, [fp, #-8]
  10ca5c:	e3530000 	cmp	r3, #0
  10ca60:	1a000006 	bne	10ca80 <poll_tcp+0x44>
  10ca64:	e3060798 	movw	r0, #26520	; 0x6798
  10ca68:	e3400014 	movt	r0, #20
  10ca6c:	ebffd9a8 	bl	103114 <rt_kprintf>
  10ca70:	e3001132 	movw	r1, #306	; 0x132
  10ca74:	e30606a0 	movw	r0, #26272	; 0x66a0
  10ca78:	e3400014 	movt	r0, #20
  10ca7c:	ebfff99b 	bl	10b0f0 <sys_arch_assert>

  if (conn->state == NETCONN_WRITE) {
  10ca80:	e51b3008 	ldr	r3, [fp, #-8]
  10ca84:	e5933004 	ldr	r3, [r3, #4]
  10ca88:	e3530001 	cmp	r3, #1
  10ca8c:	1a000003 	bne	10caa0 <poll_tcp+0x64>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
  10ca90:	e3a01001 	mov	r1, #1
  10ca94:	e51b0008 	ldr	r0, [fp, #-8]
  10ca98:	eb000924 	bl	10ef30 <lwip_netconn_do_writemore>
  10ca9c:	ea000006 	b	10cabc <poll_tcp+0x80>
  } else if (conn->state == NETCONN_CLOSE) {
  10caa0:	e51b3008 	ldr	r3, [fp, #-8]
  10caa4:	e5933004 	ldr	r3, [r3, #4]
  10caa8:	e3530004 	cmp	r3, #4
  10caac:	1a000002 	bne	10cabc <poll_tcp+0x80>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
      conn->current_msg->msg.sd.polls_left--;
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
  10cab0:	e3a01001 	mov	r1, #1
  10cab4:	e51b0008 	ldr	r0, [fp, #-8]
  10cab8:	eb000394 	bl	10d910 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
  10cabc:	e51b3008 	ldr	r3, [fp, #-8]
  10cac0:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10cac4:	e2033010 	and	r3, r3, #16
  10cac8:	e3530000 	cmp	r3, #0
  10cacc:	0a00001d 	beq	10cb48 <poll_tcp+0x10c>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
  10cad0:	e51b3008 	ldr	r3, [fp, #-8]
  10cad4:	e5933008 	ldr	r3, [r3, #8]
  10cad8:	e3530000 	cmp	r3, #0
  10cadc:	0a000019 	beq	10cb48 <poll_tcp+0x10c>
  10cae0:	e51b3008 	ldr	r3, [fp, #-8]
  10cae4:	e5933008 	ldr	r3, [r3, #8]
  10cae8:	e1d336b4 	ldrh	r3, [r3, #100]	; 0x64
  10caec:	e3530a01 	cmp	r3, #4096	; 0x1000
  10caf0:	9a000014 	bls	10cb48 <poll_tcp+0x10c>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
  10caf4:	e51b3008 	ldr	r3, [fp, #-8]
  10caf8:	e5933008 	ldr	r3, [r3, #8]
  10cafc:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
  10cb00:	e353000a 	cmp	r3, #10
  10cb04:	8a00000f 	bhi	10cb48 <poll_tcp+0x10c>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
  10cb08:	e51b3008 	ldr	r3, [fp, #-8]
  10cb0c:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10cb10:	e3c33010 	bic	r3, r3, #16
  10cb14:	e6ef2073 	uxtb	r2, r3
  10cb18:	e51b3008 	ldr	r3, [fp, #-8]
  10cb1c:	e5c32030 	strb	r2, [r3, #48]	; 0x30
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
  10cb20:	e51b3008 	ldr	r3, [fp, #-8]
  10cb24:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cb28:	e3530000 	cmp	r3, #0
  10cb2c:	0a000005 	beq	10cb48 <poll_tcp+0x10c>
  10cb30:	e51b3008 	ldr	r3, [fp, #-8]
  10cb34:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cb38:	e3a02000 	mov	r2, #0
  10cb3c:	e3a01002 	mov	r1, #2
  10cb40:	e51b0008 	ldr	r0, [fp, #-8]
  10cb44:	e12fff33 	blx	r3
    }
  }

  return ERR_OK;
  10cb48:	e3a03000 	mov	r3, #0
}
  10cb4c:	e1a00003 	mov	r0, r3
  10cb50:	e24bd004 	sub	sp, fp, #4
  10cb54:	e8bd8800 	pop	{fp, pc}

0010cb58 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
  10cb58:	e92d4800 	push	{fp, lr}
  10cb5c:	e28db004 	add	fp, sp, #4
  10cb60:	e24dd018 	sub	sp, sp, #24
  10cb64:	e50b0010 	str	r0, [fp, #-16]
  10cb68:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10cb6c:	e1a03002 	mov	r3, r2
  10cb70:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  struct netconn *conn = (struct netconn *)arg;
  10cb74:	e51b3010 	ldr	r3, [fp, #-16]
  10cb78:	e50b3008 	str	r3, [fp, #-8]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
  10cb7c:	e51b3008 	ldr	r3, [fp, #-8]
  10cb80:	e3530000 	cmp	r3, #0
  10cb84:	1a000006 	bne	10cba4 <sent_tcp+0x4c>
  10cb88:	e3060798 	movw	r0, #26520	; 0x6798
  10cb8c:	e3400014 	movt	r0, #20
  10cb90:	ebffd95f 	bl	103114 <rt_kprintf>
  10cb94:	e300115b 	movw	r1, #347	; 0x15b
  10cb98:	e30606a0 	movw	r0, #26272	; 0x66a0
  10cb9c:	e3400014 	movt	r0, #20
  10cba0:	ebfff952 	bl	10b0f0 <sys_arch_assert>

  if (conn) {
  10cba4:	e51b3008 	ldr	r3, [fp, #-8]
  10cba8:	e3530000 	cmp	r3, #0
  10cbac:	0a00002c 	beq	10cc64 <sent_tcp+0x10c>
    if (conn->state == NETCONN_WRITE) {
  10cbb0:	e51b3008 	ldr	r3, [fp, #-8]
  10cbb4:	e5933004 	ldr	r3, [r3, #4]
  10cbb8:	e3530001 	cmp	r3, #1
  10cbbc:	1a000003 	bne	10cbd0 <sent_tcp+0x78>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
  10cbc0:	e3a01001 	mov	r1, #1
  10cbc4:	e51b0008 	ldr	r0, [fp, #-8]
  10cbc8:	eb0008d8 	bl	10ef30 <lwip_netconn_do_writemore>
  10cbcc:	ea000006 	b	10cbec <sent_tcp+0x94>
    } else if (conn->state == NETCONN_CLOSE) {
  10cbd0:	e51b3008 	ldr	r3, [fp, #-8]
  10cbd4:	e5933004 	ldr	r3, [r3, #4]
  10cbd8:	e3530004 	cmp	r3, #4
  10cbdc:	1a000002 	bne	10cbec <sent_tcp+0x94>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
  10cbe0:	e3a01001 	mov	r1, #1
  10cbe4:	e51b0008 	ldr	r0, [fp, #-8]
  10cbe8:	eb000348 	bl	10d910 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
  10cbec:	e51b3008 	ldr	r3, [fp, #-8]
  10cbf0:	e5933008 	ldr	r3, [r3, #8]
  10cbf4:	e3530000 	cmp	r3, #0
  10cbf8:	0a000019 	beq	10cc64 <sent_tcp+0x10c>
  10cbfc:	e51b3008 	ldr	r3, [fp, #-8]
  10cc00:	e5933008 	ldr	r3, [r3, #8]
  10cc04:	e1d336b4 	ldrh	r3, [r3, #100]	; 0x64
  10cc08:	e3530a01 	cmp	r3, #4096	; 0x1000
  10cc0c:	9a000014 	bls	10cc64 <sent_tcp+0x10c>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
  10cc10:	e51b3008 	ldr	r3, [fp, #-8]
  10cc14:	e5933008 	ldr	r3, [r3, #8]
  10cc18:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
  10cc1c:	e353000a 	cmp	r3, #10
  10cc20:	8a00000f 	bhi	10cc64 <sent_tcp+0x10c>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
  10cc24:	e51b3008 	ldr	r3, [fp, #-8]
  10cc28:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10cc2c:	e3c33010 	bic	r3, r3, #16
  10cc30:	e6ef2073 	uxtb	r2, r3
  10cc34:	e51b3008 	ldr	r3, [fp, #-8]
  10cc38:	e5c32030 	strb	r2, [r3, #48]	; 0x30
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
  10cc3c:	e51b3008 	ldr	r3, [fp, #-8]
  10cc40:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cc44:	e3530000 	cmp	r3, #0
  10cc48:	0a000005 	beq	10cc64 <sent_tcp+0x10c>
  10cc4c:	e51b3008 	ldr	r3, [fp, #-8]
  10cc50:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cc54:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  10cc58:	e3a01002 	mov	r1, #2
  10cc5c:	e51b0008 	ldr	r0, [fp, #-8]
  10cc60:	e12fff33 	blx	r3
    }
  }

  return ERR_OK;
  10cc64:	e3a03000 	mov	r3, #0
}
  10cc68:	e1a00003 	mov	r0, r3
  10cc6c:	e24bd004 	sub	sp, fp, #4
  10cc70:	e8bd8800 	pop	{fp, pc}

0010cc74 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
  10cc74:	e92d4800 	push	{fp, lr}
  10cc78:	e28db004 	add	fp, sp, #4
  10cc7c:	e24dd018 	sub	sp, sp, #24
  10cc80:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10cc84:	e1a03001 	mov	r3, r1
  10cc88:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  struct netconn *conn;
  enum netconn_state old_state;

  conn = (struct netconn *)arg;
  10cc8c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10cc90:	e50b3008 	str	r3, [fp, #-8]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
  10cc94:	e51b3008 	ldr	r3, [fp, #-8]
  10cc98:	e3530000 	cmp	r3, #0
  10cc9c:	1a000006 	bne	10ccbc <err_tcp+0x48>
  10cca0:	e3060798 	movw	r0, #26520	; 0x6798
  10cca4:	e3400014 	movt	r0, #20
  10cca8:	ebffd919 	bl	103114 <rt_kprintf>
  10ccac:	e300117e 	movw	r1, #382	; 0x17e
  10ccb0:	e30606a0 	movw	r0, #26272	; 0x66a0
  10ccb4:	e3400014 	movt	r0, #20
  10ccb8:	ebfff90c 	bl	10b0f0 <sys_arch_assert>

  conn->pcb.tcp = NULL;
  10ccbc:	e51b3008 	ldr	r3, [fp, #-8]
  10ccc0:	e3a02000 	mov	r2, #0
  10ccc4:	e5832008 	str	r2, [r3, #8]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
  10ccc8:	e51b3008 	ldr	r3, [fp, #-8]
  10cccc:	e5933004 	ldr	r3, [r3, #4]
  10ccd0:	e50b300c 	str	r3, [fp, #-12]
  conn->state = NETCONN_NONE;
  10ccd4:	e51b3008 	ldr	r3, [fp, #-8]
  10ccd8:	e3a02000 	mov	r2, #0
  10ccdc:	e5832004 	str	r2, [r3, #4]

  if (old_state == NETCONN_CLOSE) {
  10cce0:	e51b300c 	ldr	r3, [fp, #-12]
  10cce4:	e3530004 	cmp	r3, #4
  10cce8:	1a00000e 	bne	10cd28 <err_tcp+0xb4>
    /* RST during close: let close return success & dealloc the netconn */
    err = ERR_OK;
  10ccec:	e3a03000 	mov	r3, #0
  10ccf0:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
    NETCONN_SET_SAFE_ERR(conn, ERR_OK);
  10ccf4:	e51b3008 	ldr	r3, [fp, #-8]
  10ccf8:	e3530000 	cmp	r3, #0
  10ccfc:	0a00000e 	beq	10cd3c <err_tcp+0xc8>
  10cd00:	ebffd54d 	bl	10223c <rt_enter_critical>
  10cd04:	e51b3008 	ldr	r3, [fp, #-8]
  10cd08:	e1d330dc 	ldrsb	r3, [r3, #12]
  10cd0c:	e373000c 	cmn	r3, #12
  10cd10:	ba000002 	blt	10cd20 <err_tcp+0xac>
  10cd14:	e51b3008 	ldr	r3, [fp, #-8]
  10cd18:	e3a02000 	mov	r2, #0
  10cd1c:	e5c3200c 	strb	r2, [r3, #12]
  10cd20:	ebffd54b 	bl	102254 <rt_exit_critical>
  10cd24:	ea000004 	b	10cd3c <err_tcp+0xc8>
  } else {
    /* no check since this is always fatal! */
    SYS_ARCH_SET(conn->last_err, err);
  10cd28:	ebffd543 	bl	10223c <rt_enter_critical>
  10cd2c:	e51b3008 	ldr	r3, [fp, #-8]
  10cd30:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  10cd34:	e5c3200c 	strb	r2, [r3, #12]
  10cd38:	ebffd545 	bl	102254 <rt_exit_critical>
  }

  /* @todo: the type of NETCONN_EVT created should depend on 'old_state' */

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
  10cd3c:	e51b3008 	ldr	r3, [fp, #-8]
  10cd40:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cd44:	e3530000 	cmp	r3, #0
  10cd48:	0a000005 	beq	10cd64 <err_tcp+0xf0>
  10cd4c:	e51b3008 	ldr	r3, [fp, #-8]
  10cd50:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cd54:	e3a02000 	mov	r2, #0
  10cd58:	e3a01004 	mov	r1, #4
  10cd5c:	e51b0008 	ldr	r0, [fp, #-8]
  10cd60:	e12fff33 	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
  10cd64:	e51b3008 	ldr	r3, [fp, #-8]
  10cd68:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cd6c:	e3530000 	cmp	r3, #0
  10cd70:	0a000005 	beq	10cd8c <err_tcp+0x118>
  10cd74:	e51b3008 	ldr	r3, [fp, #-8]
  10cd78:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cd7c:	e3a02000 	mov	r2, #0
  10cd80:	e3a01000 	mov	r1, #0
  10cd84:	e51b0008 	ldr	r0, [fp, #-8]
  10cd88:	e12fff33 	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
  10cd8c:	e51b3008 	ldr	r3, [fp, #-8]
  10cd90:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cd94:	e3530000 	cmp	r3, #0
  10cd98:	0a000005 	beq	10cdb4 <err_tcp+0x140>
  10cd9c:	e51b3008 	ldr	r3, [fp, #-8]
  10cda0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cda4:	e3a02000 	mov	r2, #0
  10cda8:	e3a01002 	mov	r1, #2
  10cdac:	e51b0008 	ldr	r0, [fp, #-8]
  10cdb0:	e12fff33 	blx	r3

  /* pass NULL-message to recvmbox to wake up pending recv */
  if (sys_mbox_valid(&conn->recvmbox)) {
  10cdb4:	e51b3008 	ldr	r3, [fp, #-8]
  10cdb8:	e2833014 	add	r3, r3, #20
  10cdbc:	e1a00003 	mov	r0, r3
  10cdc0:	ebfff881 	bl	10afcc <sys_mbox_valid>
  10cdc4:	e1a03000 	mov	r3, r0
  10cdc8:	e3530000 	cmp	r3, #0
  10cdcc:	0a000004 	beq	10cde4 <err_tcp+0x170>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, NULL);
  10cdd0:	e51b3008 	ldr	r3, [fp, #-8]
  10cdd4:	e2833014 	add	r3, r3, #20
  10cdd8:	e3a01000 	mov	r1, #0
  10cddc:	e1a00003 	mov	r0, r3
  10cde0:	ebfff81b 	bl	10ae54 <sys_mbox_trypost>
  }
  /* pass NULL-message to acceptmbox to wake up pending accept */
  if (sys_mbox_valid(&conn->acceptmbox)) {
  10cde4:	e51b3008 	ldr	r3, [fp, #-8]
  10cde8:	e2833018 	add	r3, r3, #24
  10cdec:	e1a00003 	mov	r0, r3
  10cdf0:	ebfff875 	bl	10afcc <sys_mbox_valid>
  10cdf4:	e1a03000 	mov	r3, r0
  10cdf8:	e3530000 	cmp	r3, #0
  10cdfc:	0a000004 	beq	10ce14 <err_tcp+0x1a0>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, NULL);
  10ce00:	e51b3008 	ldr	r3, [fp, #-8]
  10ce04:	e2833018 	add	r3, r3, #24
  10ce08:	e3a01000 	mov	r1, #0
  10ce0c:	e1a00003 	mov	r0, r3
  10ce10:	ebfff80f 	bl	10ae54 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
  10ce14:	e51b300c 	ldr	r3, [fp, #-12]
  10ce18:	e3530001 	cmp	r3, #1
  10ce1c:	0a000005 	beq	10ce38 <err_tcp+0x1c4>
  10ce20:	e51b300c 	ldr	r3, [fp, #-12]
  10ce24:	e3530004 	cmp	r3, #4
  10ce28:	0a000002 	beq	10ce38 <err_tcp+0x1c4>
  10ce2c:	e51b300c 	ldr	r3, [fp, #-12]
  10ce30:	e3530003 	cmp	r3, #3
  10ce34:	1a000042 	bne	10cf44 <err_tcp+0x2d0>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
  10ce38:	e51b3008 	ldr	r3, [fp, #-8]
  10ce3c:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10ce40:	e2033004 	and	r3, r3, #4
  10ce44:	e3530000 	cmp	r3, #0
  10ce48:	13a03001 	movne	r3, #1
  10ce4c:	03a03000 	moveq	r3, #0
  10ce50:	e6ef3073 	uxtb	r3, r3
  10ce54:	e50b3010 	str	r3, [fp, #-16]
    SET_NONBLOCKING_CONNECT(conn, 0);
  10ce58:	e51b3008 	ldr	r3, [fp, #-8]
  10ce5c:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10ce60:	e3c33004 	bic	r3, r3, #4
  10ce64:	e6ef2073 	uxtb	r2, r3
  10ce68:	e51b3008 	ldr	r3, [fp, #-8]
  10ce6c:	e5c32030 	strb	r2, [r3, #48]	; 0x30

    if (!was_nonblocking_connect) {
  10ce70:	e51b3010 	ldr	r3, [fp, #-16]
  10ce74:	e3530000 	cmp	r3, #0
  10ce78:	1a00003d 	bne	10cf74 <err_tcp+0x300>
      sys_sem_t* op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
  10ce7c:	e51b3008 	ldr	r3, [fp, #-8]
  10ce80:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10ce84:	e3530000 	cmp	r3, #0
  10ce88:	1a000006 	bne	10cea8 <err_tcp+0x234>
  10ce8c:	e30607a8 	movw	r0, #26536	; 0x67a8
  10ce90:	e3400014 	movt	r0, #20
  10ce94:	ebffd89e 	bl	103114 <rt_kprintf>
  10ce98:	e30011ad 	movw	r1, #429	; 0x1ad
  10ce9c:	e30606a0 	movw	r0, #26272	; 0x66a0
  10cea0:	e3400014 	movt	r0, #20
  10cea4:	ebfff891 	bl	10b0f0 <sys_arch_assert>
      conn->current_msg->err = err;
  10cea8:	e51b3008 	ldr	r3, [fp, #-8]
  10ceac:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10ceb0:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  10ceb4:	e5c32004 	strb	r2, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
  10ceb8:	e51b3008 	ldr	r3, [fp, #-8]
  10cebc:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10cec0:	e5933000 	ldr	r3, [r3]
  10cec4:	e2833010 	add	r3, r3, #16
  10cec8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
  10cecc:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  10ced0:	ebfff6cd 	bl	10aa0c <sys_sem_valid>
  10ced4:	e1a03000 	mov	r3, r0
  10ced8:	e3530000 	cmp	r3, #0
  10cedc:	1a000006 	bne	10cefc <err_tcp+0x288>
  10cee0:	e30607c4 	movw	r0, #26564	; 0x67c4
  10cee4:	e3400014 	movt	r0, #20
  10cee8:	ebffd889 	bl	103114 <rt_kprintf>
  10ceec:	e3a01e1b 	mov	r1, #432	; 0x1b0
  10cef0:	e30606a0 	movw	r0, #26272	; 0x66a0
  10cef4:	e3400014 	movt	r0, #20
  10cef8:	ebfff87c 	bl	10b0f0 <sys_arch_assert>
      conn->current_msg = NULL;
  10cefc:	e51b3008 	ldr	r3, [fp, #-8]
  10cf00:	e3a02000 	mov	r2, #0
  10cf04:	e5832038 	str	r2, [r3, #56]	; 0x38
      /* wake up the waiting task */
      NETCONN_SET_SAFE_ERR(conn, err);
  10cf08:	e51b3008 	ldr	r3, [fp, #-8]
  10cf0c:	e3530000 	cmp	r3, #0
  10cf10:	0a000008 	beq	10cf38 <err_tcp+0x2c4>
  10cf14:	ebffd4c8 	bl	10223c <rt_enter_critical>
  10cf18:	e51b3008 	ldr	r3, [fp, #-8]
  10cf1c:	e1d330dc 	ldrsb	r3, [r3, #12]
  10cf20:	e373000c 	cmn	r3, #12
  10cf24:	ba000002 	blt	10cf34 <err_tcp+0x2c0>
  10cf28:	e51b3008 	ldr	r3, [fp, #-8]
  10cf2c:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  10cf30:	e5c3200c 	strb	r2, [r3, #12]
  10cf34:	ebffd4c6 	bl	102254 <rt_exit_critical>
      sys_sem_signal(op_completed_sem);
  10cf38:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  10cf3c:	ebfff674 	bl	10a914 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
  10cf40:	ea00000b 	b	10cf74 <err_tcp+0x300>
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
  10cf44:	e51b3008 	ldr	r3, [fp, #-8]
  10cf48:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10cf4c:	e3530000 	cmp	r3, #0
  10cf50:	0a000008 	beq	10cf78 <err_tcp+0x304>
  10cf54:	e30607e0 	movw	r0, #26592	; 0x67e0
  10cf58:	e3400014 	movt	r0, #20
  10cf5c:	ebffd86c 	bl	103114 <rt_kprintf>
  10cf60:	e30011b7 	movw	r1, #439	; 0x1b7
  10cf64:	e30606a0 	movw	r0, #26272	; 0x66a0
  10cf68:	e3400014 	movt	r0, #20
  10cf6c:	ebfff85f 	bl	10b0f0 <sys_arch_assert>
  }
}
  10cf70:	ea000000 	b	10cf78 <err_tcp+0x304>
      (old_state == NETCONN_CONNECT)) {
  10cf74:	e320f000 	nop	{0}
}
  10cf78:	e320f000 	nop	{0}
  10cf7c:	e24bd004 	sub	sp, fp, #4
  10cf80:	e8bd8800 	pop	{fp, pc}

0010cf84 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
  10cf84:	e92d4800 	push	{fp, lr}
  10cf88:	e28db004 	add	fp, sp, #4
  10cf8c:	e24dd010 	sub	sp, sp, #16
  10cf90:	e50b0010 	str	r0, [fp, #-16]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
  10cf94:	e51b3010 	ldr	r3, [fp, #-16]
  10cf98:	e5933008 	ldr	r3, [r3, #8]
  10cf9c:	e50b3008 	str	r3, [fp, #-8]
  tcp_arg(pcb, conn);
  10cfa0:	e51b1010 	ldr	r1, [fp, #-16]
  10cfa4:	e51b0008 	ldr	r0, [fp, #-8]
  10cfa8:	eb004aef 	bl	11fb6c <tcp_arg>
  tcp_recv(pcb, recv_tcp);
  10cfac:	e30c1858 	movw	r1, #51288	; 0xc858
  10cfb0:	e3401010 	movt	r1, #16
  10cfb4:	e51b0008 	ldr	r0, [fp, #-8]
  10cfb8:	eb004afa 	bl	11fba8 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
  10cfbc:	e30c1b58 	movw	r1, #52056	; 0xcb58
  10cfc0:	e3401010 	movt	r1, #16
  10cfc4:	e51b0008 	ldr	r0, [fp, #-8]
  10cfc8:	eb004b0f 	bl	11fc0c <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
  10cfcc:	e3a02002 	mov	r2, #2
  10cfd0:	e30c1a3c 	movw	r1, #51772	; 0xca3c
  10cfd4:	e3401010 	movt	r1, #16
  10cfd8:	e51b0008 	ldr	r0, [fp, #-8]
  10cfdc:	eb004b51 	bl	11fd28 <tcp_poll>
  tcp_err(pcb, err_tcp);
  10cfe0:	e30c1c74 	movw	r1, #52340	; 0xcc74
  10cfe4:	e3401010 	movt	r1, #16
  10cfe8:	e51b0008 	ldr	r0, [fp, #-8]
  10cfec:	eb004b1f 	bl	11fc70 <tcp_err>
}
  10cff0:	e320f000 	nop	{0}
  10cff4:	e24bd004 	sub	sp, fp, #4
  10cff8:	e8bd8800 	pop	{fp, pc}

0010cffc <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
  10cffc:	e92d4800 	push	{fp, lr}
  10d000:	e28db004 	add	fp, sp, #4
  10d004:	e24dd020 	sub	sp, sp, #32
  10d008:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10d00c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  10d010:	e1a03002 	mov	r3, r2
  10d014:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
  10d018:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d01c:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->tate: %s\n", tcp_debug_state_str(newpcb->state)));

  if (conn == NULL) {
  10d020:	e51b3008 	ldr	r3, [fp, #-8]
  10d024:	e3530000 	cmp	r3, #0
  10d028:	1a000001 	bne	10d034 <accept_function+0x38>
    return ERR_VAL;
  10d02c:	e3e03005 	mvn	r3, #5
  10d030:	ea00007d 	b	10d22c <accept_function+0x230>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
  10d034:	e51b3008 	ldr	r3, [fp, #-8]
  10d038:	e2833018 	add	r3, r3, #24
  10d03c:	e1a00003 	mov	r0, r3
  10d040:	ebfff7e1 	bl	10afcc <sys_mbox_valid>
  10d044:	e1a03000 	mov	r3, r0
  10d048:	e3530000 	cmp	r3, #0
  10d04c:	1a000001 	bne	10d058 <accept_function+0x5c>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
  10d050:	e3e03005 	mvn	r3, #5
  10d054:	ea000074 	b	10d22c <accept_function+0x230>
  }

  if (newpcb == NULL) {
  10d058:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10d05c:	e3530000 	cmp	r3, #0
  10d060:	1a000014 	bne	10d0b8 <accept_function+0xbc>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
  10d064:	e51b3008 	ldr	r3, [fp, #-8]
  10d068:	e2833018 	add	r3, r3, #24
  10d06c:	e30f158c 	movw	r1, #62860	; 0xf58c
  10d070:	e3401014 	movt	r1, #20
  10d074:	e1a00003 	mov	r0, r3
  10d078:	ebfff775 	bl	10ae54 <sys_mbox_trypost>
  10d07c:	e1a03000 	mov	r3, r0
  10d080:	e3530000 	cmp	r3, #0
  10d084:	1a000009 	bne	10d0b0 <accept_function+0xb4>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
  10d088:	e51b3008 	ldr	r3, [fp, #-8]
  10d08c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10d090:	e3530000 	cmp	r3, #0
  10d094:	0a000005 	beq	10d0b0 <accept_function+0xb4>
  10d098:	e51b3008 	ldr	r3, [fp, #-8]
  10d09c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10d0a0:	e3a02000 	mov	r2, #0
  10d0a4:	e3a01000 	mov	r1, #0
  10d0a8:	e51b0008 	ldr	r0, [fp, #-8]
  10d0ac:	e12fff33 	blx	r3
    }
    return ERR_VAL;
  10d0b0:	e3e03005 	mvn	r3, #5
  10d0b4:	ea00005c 	b	10d22c <accept_function+0x230>
  }

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
  10d0b8:	e51b3008 	ldr	r3, [fp, #-8]
  10d0bc:	e5932000 	ldr	r2, [r3]
  10d0c0:	e51b3008 	ldr	r3, [fp, #-8]
  10d0c4:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10d0c8:	e1a01003 	mov	r1, r3
  10d0cc:	e1a00002 	mov	r0, r2
  10d0d0:	eb0000f7 	bl	10d4b4 <netconn_alloc>
  10d0d4:	e50b000c 	str	r0, [fp, #-12]
  if (newconn == NULL) {
  10d0d8:	e51b300c 	ldr	r3, [fp, #-12]
  10d0dc:	e3530000 	cmp	r3, #0
  10d0e0:	1a000014 	bne	10d138 <accept_function+0x13c>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
  10d0e4:	e51b3008 	ldr	r3, [fp, #-8]
  10d0e8:	e2833018 	add	r3, r3, #24
  10d0ec:	e30f158c 	movw	r1, #62860	; 0xf58c
  10d0f0:	e3401014 	movt	r1, #20
  10d0f4:	e1a00003 	mov	r0, r3
  10d0f8:	ebfff755 	bl	10ae54 <sys_mbox_trypost>
  10d0fc:	e1a03000 	mov	r3, r0
  10d100:	e3530000 	cmp	r3, #0
  10d104:	1a000009 	bne	10d130 <accept_function+0x134>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
  10d108:	e51b3008 	ldr	r3, [fp, #-8]
  10d10c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10d110:	e3530000 	cmp	r3, #0
  10d114:	0a000005 	beq	10d130 <accept_function+0x134>
  10d118:	e51b3008 	ldr	r3, [fp, #-8]
  10d11c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10d120:	e3a02000 	mov	r2, #0
  10d124:	e3a01000 	mov	r1, #0
  10d128:	e51b0008 	ldr	r0, [fp, #-8]
  10d12c:	e12fff33 	blx	r3
    }
    return ERR_MEM;
  10d130:	e3e03000 	mvn	r3, #0
  10d134:	ea00003c 	b	10d22c <accept_function+0x230>
  }
  newconn->pcb.tcp = newpcb;
  10d138:	e51b300c 	ldr	r3, [fp, #-12]
  10d13c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  10d140:	e5832008 	str	r2, [r3, #8]
  setup_tcp(newconn);
  10d144:	e51b000c 	ldr	r0, [fp, #-12]
  10d148:	ebffff8d 	bl	10cf84 <setup_tcp>
  /* no protection: when creating the pcb, the netconn is not yet known
     to the application thread */
  newconn->last_err = err;
  10d14c:	e51b300c 	ldr	r3, [fp, #-12]
  10d150:	e55b201d 	ldrb	r2, [fp, #-29]	; 0xffffffe3
  10d154:	e5c3200c 	strb	r2, [r3, #12]

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
  10d158:	e51b3008 	ldr	r3, [fp, #-8]
  10d15c:	e2833018 	add	r3, r3, #24
  10d160:	e51b100c 	ldr	r1, [fp, #-12]
  10d164:	e1a00003 	mov	r0, r3
  10d168:	ebfff739 	bl	10ae54 <sys_mbox_trypost>
  10d16c:	e1a03000 	mov	r3, r0
  10d170:	e3530000 	cmp	r3, #0
  10d174:	0a000021 	beq	10d200 <accept_function+0x204>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb* pcb = newconn->pcb.tcp;
  10d178:	e51b300c 	ldr	r3, [fp, #-12]
  10d17c:	e5933008 	ldr	r3, [r3, #8]
  10d180:	e50b3010 	str	r3, [fp, #-16]
    tcp_arg(pcb, NULL);
  10d184:	e3a01000 	mov	r1, #0
  10d188:	e51b0010 	ldr	r0, [fp, #-16]
  10d18c:	eb004a76 	bl	11fb6c <tcp_arg>
    tcp_recv(pcb, NULL);
  10d190:	e3a01000 	mov	r1, #0
  10d194:	e51b0010 	ldr	r0, [fp, #-16]
  10d198:	eb004a82 	bl	11fba8 <tcp_recv>
    tcp_sent(pcb, NULL);
  10d19c:	e3a01000 	mov	r1, #0
  10d1a0:	e51b0010 	ldr	r0, [fp, #-16]
  10d1a4:	eb004a98 	bl	11fc0c <tcp_sent>
    tcp_poll(pcb, NULL, 0);
  10d1a8:	e3a02000 	mov	r2, #0
  10d1ac:	e3a01000 	mov	r1, #0
  10d1b0:	e51b0010 	ldr	r0, [fp, #-16]
  10d1b4:	eb004adb 	bl	11fd28 <tcp_poll>
    tcp_err(pcb, NULL);
  10d1b8:	e3a01000 	mov	r1, #0
  10d1bc:	e51b0010 	ldr	r0, [fp, #-16]
  10d1c0:	eb004aaa 	bl	11fc70 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
  10d1c4:	e51b300c 	ldr	r3, [fp, #-12]
  10d1c8:	e3a02000 	mov	r2, #0
  10d1cc:	e5832008 	str	r2, [r3, #8]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
  10d1d0:	e51b300c 	ldr	r3, [fp, #-12]
  10d1d4:	e2833014 	add	r3, r3, #20
  10d1d8:	e1a00003 	mov	r0, r3
  10d1dc:	ebfff6b3 	bl	10acb0 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
  10d1e0:	e51b300c 	ldr	r3, [fp, #-12]
  10d1e4:	e2833014 	add	r3, r3, #20
  10d1e8:	e1a00003 	mov	r0, r3
  10d1ec:	ebfff780 	bl	10aff4 <sys_mbox_set_invalid>
    netconn_free(newconn);
  10d1f0:	e51b000c 	ldr	r0, [fp, #-12]
  10d1f4:	eb000122 	bl	10d684 <netconn_free>
    return ERR_MEM;
  10d1f8:	e3e03000 	mvn	r3, #0
  10d1fc:	ea00000a 	b	10d22c <accept_function+0x230>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
  10d200:	e51b3008 	ldr	r3, [fp, #-8]
  10d204:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10d208:	e3530000 	cmp	r3, #0
  10d20c:	0a000005 	beq	10d228 <accept_function+0x22c>
  10d210:	e51b3008 	ldr	r3, [fp, #-8]
  10d214:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10d218:	e3a02000 	mov	r2, #0
  10d21c:	e3a01000 	mov	r1, #0
  10d220:	e51b0008 	ldr	r0, [fp, #-8]
  10d224:	e12fff33 	blx	r3
  }

  return ERR_OK;
  10d228:	e3a03000 	mov	r3, #0
}
  10d22c:	e1a00003 	mov	r0, r3
  10d230:	e24bd004 	sub	sp, fp, #4
  10d234:	e8bd8800 	pop	{fp, pc}

0010d238 <pcb_new>:
 *
 * @param msg the api_msg_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
  10d238:	e92d4810 	push	{r4, fp, lr}
  10d23c:	e28db008 	add	fp, sp, #8
  10d240:	e24dd014 	sub	sp, sp, #20
  10d244:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
  10d248:	e3a03000 	mov	r3, #0
  10d24c:	e50b3010 	str	r3, [fp, #-16]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
  10d250:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d254:	e5933000 	ldr	r3, [r3]
  10d258:	e5933008 	ldr	r3, [r3, #8]
  10d25c:	e3530000 	cmp	r3, #0
  10d260:	0a000006 	beq	10d280 <pcb_new+0x48>
  10d264:	e30607fc 	movw	r0, #26620	; 0x67fc
  10d268:	e3400014 	movt	r0, #20
  10d26c:	ebffd7a8 	bl	103114 <rt_kprintf>
  10d270:	e3001226 	movw	r1, #550	; 0x226
  10d274:	e30606a0 	movw	r0, #26272	; 0x66a0
  10d278:	e3400014 	movt	r0, #20
  10d27c:	ebfff79b 	bl	10b0f0 <sys_arch_assert>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch(NETCONNTYPE_GROUP(msg->conn->type)) {
  10d280:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d284:	e5933000 	ldr	r3, [r3]
  10d288:	e5933000 	ldr	r3, [r3]
  10d28c:	e20330f0 	and	r3, r3, #240	; 0xf0
  10d290:	e3530020 	cmp	r3, #32
  10d294:	0a00001d 	beq	10d310 <pcb_new+0xd8>
  10d298:	e3530040 	cmp	r3, #64	; 0x40
  10d29c:	0a000002 	beq	10d2ac <pcb_new+0x74>
  10d2a0:	e3530010 	cmp	r3, #16
  10d2a4:	0a00003a 	beq	10d394 <pcb_new+0x15c>
  10d2a8:	ea00004b 	b	10d3dc <pcb_new+0x1a4>
#if LWIP_RAW
  case NETCONN_RAW:
    msg->conn->pcb.raw = raw_new_ip_type(iptype, msg->msg.n.proto);
  10d2ac:	e51b3010 	ldr	r3, [fp, #-16]
  10d2b0:	e6ef2073 	uxtb	r2, r3
  10d2b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d2b8:	e5d31008 	ldrb	r1, [r3, #8]
  10d2bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d2c0:	e5934000 	ldr	r4, [r3]
  10d2c4:	e1a00002 	mov	r0, r2
  10d2c8:	eb003d6a 	bl	11c878 <raw_new_ip_type>
  10d2cc:	e1a03000 	mov	r3, r0
  10d2d0:	e5843008 	str	r3, [r4, #8]
    if (msg->conn->pcb.raw != NULL) {
  10d2d4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d2d8:	e5933000 	ldr	r3, [r3]
  10d2dc:	e5933008 	ldr	r3, [r3, #8]
  10d2e0:	e3530000 	cmp	r3, #0
  10d2e4:	0a000040 	beq	10d3ec <pcb_new+0x1b4>
      if (NETCONNTYPE_ISIPV6(msg->conn->type) && msg->conn->pcb.raw->protocol == IP6_NEXTH_ICMP6) {
        msg->conn->pcb.raw->chksum_reqd = 1;
        msg->conn->pcb.raw->chksum_offset = 2;
      }
#endif /* LWIP_IPV6 */
      raw_recv(msg->conn->pcb.raw, recv_raw, msg->conn);
  10d2e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d2ec:	e5933000 	ldr	r3, [r3]
  10d2f0:	e5930008 	ldr	r0, [r3, #8]
  10d2f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d2f8:	e5933000 	ldr	r3, [r3]
  10d2fc:	e1a02003 	mov	r2, r3
  10d300:	e30c1458 	movw	r1, #50264	; 0xc458
  10d304:	e3401010 	movt	r1, #16
  10d308:	eb003c57 	bl	11c46c <raw_recv>
    }
    break;
  10d30c:	ea000036 	b	10d3ec <pcb_new+0x1b4>
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    msg->conn->pcb.udp = udp_new_ip_type(iptype);
  10d310:	e51b3010 	ldr	r3, [fp, #-16]
  10d314:	e6ef2073 	uxtb	r2, r3
  10d318:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d31c:	e5934000 	ldr	r4, [r3]
  10d320:	e1a00002 	mov	r0, r2
  10d324:	eb006dff 	bl	128b28 <udp_new_ip_type>
  10d328:	e1a03000 	mov	r3, r0
  10d32c:	e5843008 	str	r3, [r4, #8]
    if (msg->conn->pcb.udp != NULL) {
  10d330:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d334:	e5933000 	ldr	r3, [r3]
  10d338:	e5933008 	ldr	r3, [r3, #8]
  10d33c:	e3530000 	cmp	r3, #0
  10d340:	0a00002b 	beq	10d3f4 <pcb_new+0x1bc>
#if LWIP_UDPLITE
      if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
      }
#endif /* LWIP_UDPLITE */
      if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
  10d344:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d348:	e5933000 	ldr	r3, [r3]
  10d34c:	e5933000 	ldr	r3, [r3]
  10d350:	e3530022 	cmp	r3, #34	; 0x22
  10d354:	1a000004 	bne	10d36c <pcb_new+0x134>
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
  10d358:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d35c:	e5933000 	ldr	r3, [r3]
  10d360:	e5933008 	ldr	r3, [r3, #8]
  10d364:	e3a02001 	mov	r2, #1
  10d368:	e5c32010 	strb	r2, [r3, #16]
      }
      udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
  10d36c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d370:	e5933000 	ldr	r3, [r3]
  10d374:	e5930008 	ldr	r0, [r3, #8]
  10d378:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d37c:	e5933000 	ldr	r3, [r3]
  10d380:	e1a02003 	mov	r2, r3
  10d384:	e30c1648 	movw	r1, #50760	; 0xc648
  10d388:	e3401010 	movt	r1, #16
  10d38c:	eb006d8a 	bl	1289bc <udp_recv>
    }
    break;
  10d390:	ea000017 	b	10d3f4 <pcb_new+0x1bc>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
  10d394:	e51b3010 	ldr	r3, [fp, #-16]
  10d398:	e6ef2073 	uxtb	r2, r3
  10d39c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d3a0:	e5934000 	ldr	r4, [r3]
  10d3a4:	e1a00002 	mov	r0, r2
  10d3a8:	eb0049e3 	bl	11fb3c <tcp_new_ip_type>
  10d3ac:	e1a03000 	mov	r3, r0
  10d3b0:	e5843008 	str	r3, [r4, #8]
    if (msg->conn->pcb.tcp != NULL) {
  10d3b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d3b8:	e5933000 	ldr	r3, [r3]
  10d3bc:	e5933008 	ldr	r3, [r3, #8]
  10d3c0:	e3530000 	cmp	r3, #0
  10d3c4:	0a00000c 	beq	10d3fc <pcb_new+0x1c4>
      setup_tcp(msg->conn);
  10d3c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d3cc:	e5933000 	ldr	r3, [r3]
  10d3d0:	e1a00003 	mov	r0, r3
  10d3d4:	ebfffeea 	bl	10cf84 <setup_tcp>
    }
    break;
  10d3d8:	ea000007 	b	10d3fc <pcb_new+0x1c4>
#endif /* LWIP_TCP */
  default:
    /* Unsupported netconn type, e.g. protocol disabled */
    msg->err = ERR_VAL;
  10d3dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d3e0:	e3e02005 	mvn	r2, #5
  10d3e4:	e5c32004 	strb	r2, [r3, #4]
    return;
  10d3e8:	ea00000c 	b	10d420 <pcb_new+0x1e8>
    break;
  10d3ec:	e320f000 	nop	{0}
  10d3f0:	ea000002 	b	10d400 <pcb_new+0x1c8>
    break;
  10d3f4:	e320f000 	nop	{0}
  10d3f8:	ea000000 	b	10d400 <pcb_new+0x1c8>
    break;
  10d3fc:	e320f000 	nop	{0}
  }
  if (msg->conn->pcb.ip == NULL) {
  10d400:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d404:	e5933000 	ldr	r3, [r3]
  10d408:	e5933008 	ldr	r3, [r3, #8]
  10d40c:	e3530000 	cmp	r3, #0
  10d410:	1a000002 	bne	10d420 <pcb_new+0x1e8>
    msg->err = ERR_MEM;
  10d414:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d418:	e3e02000 	mvn	r2, #0
  10d41c:	e5c32004 	strb	r2, [r3, #4]
  }
}
  10d420:	e24bd008 	sub	sp, fp, #8
  10d424:	e8bd8810 	pop	{r4, fp, pc}

0010d428 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
  10d428:	e92d4800 	push	{fp, lr}
  10d42c:	e28db004 	add	fp, sp, #4
  10d430:	e24dd010 	sub	sp, sp, #16
  10d434:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10d438:	e51b3010 	ldr	r3, [fp, #-16]
  10d43c:	e50b3008 	str	r3, [fp, #-8]

  msg->err = ERR_OK;
  10d440:	e51b3008 	ldr	r3, [fp, #-8]
  10d444:	e3a02000 	mov	r2, #0
  10d448:	e5c32004 	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
  10d44c:	e51b3008 	ldr	r3, [fp, #-8]
  10d450:	e5933000 	ldr	r3, [r3]
  10d454:	e5933008 	ldr	r3, [r3, #8]
  10d458:	e3530000 	cmp	r3, #0
  10d45c:	1a000001 	bne	10d468 <lwip_netconn_do_newconn+0x40>
    pcb_new(msg);
  10d460:	e51b0008 	ldr	r0, [fp, #-8]
  10d464:	ebffff73 	bl	10d238 <pcb_new>
  }
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
  10d468:	e51b3008 	ldr	r3, [fp, #-8]
  10d46c:	e5933000 	ldr	r3, [r3]
  10d470:	e3530000 	cmp	r3, #0
  10d474:	0a00000b 	beq	10d4a8 <lwip_netconn_do_newconn+0x80>
  10d478:	ebffd36f 	bl	10223c <rt_enter_critical>
  10d47c:	e51b3008 	ldr	r3, [fp, #-8]
  10d480:	e5933000 	ldr	r3, [r3]
  10d484:	e1d330dc 	ldrsb	r3, [r3, #12]
  10d488:	e373000c 	cmn	r3, #12
  10d48c:	ba000004 	blt	10d4a4 <lwip_netconn_do_newconn+0x7c>
  10d490:	e51b3008 	ldr	r3, [fp, #-8]
  10d494:	e5933000 	ldr	r3, [r3]
  10d498:	e51b2008 	ldr	r2, [fp, #-8]
  10d49c:	e1d220d4 	ldrsb	r2, [r2, #4]
  10d4a0:	e5c3200c 	strb	r2, [r3, #12]
  10d4a4:	ebffd36a 	bl	102254 <rt_exit_critical>
}
  10d4a8:	e320f000 	nop	{0}
  10d4ac:	e24bd004 	sub	sp, fp, #4
  10d4b0:	e8bd8800 	pop	{fp, pc}

0010d4b4 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
  10d4b4:	e92d4800 	push	{fp, lr}
  10d4b8:	e28db004 	add	fp, sp, #4
  10d4bc:	e24dd010 	sub	sp, sp, #16
  10d4c0:	e50b0010 	str	r0, [fp, #-16]
  10d4c4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct netconn *conn;
  int size;

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
  10d4c8:	e3002287 	movw	r2, #647	; 0x287
  10d4cc:	e30616a0 	movw	r1, #26272	; 0x66a0
  10d4d0:	e3401014 	movt	r1, #20
  10d4d4:	e3a00008 	mov	r0, #8
  10d4d8:	eb002efe 	bl	1190d8 <memp_malloc_fn>
  10d4dc:	e50b000c 	str	r0, [fp, #-12]
  if (conn == NULL) {
  10d4e0:	e51b300c 	ldr	r3, [fp, #-12]
  10d4e4:	e3530000 	cmp	r3, #0
  10d4e8:	1a000001 	bne	10d4f4 <netconn_alloc+0x40>
    return NULL;
  10d4ec:	e3a03000 	mov	r3, #0
  10d4f0:	ea000060 	b	10d678 <netconn_alloc+0x1c4>
  }

  conn->last_err = ERR_OK;
  10d4f4:	e51b300c 	ldr	r3, [fp, #-12]
  10d4f8:	e3a02000 	mov	r2, #0
  10d4fc:	e5c3200c 	strb	r2, [r3, #12]
  conn->type = t;
  10d500:	e51b300c 	ldr	r3, [fp, #-12]
  10d504:	e51b2010 	ldr	r2, [fp, #-16]
  10d508:	e5832000 	str	r2, [r3]
  conn->pcb.tcp = NULL;
  10d50c:	e51b300c 	ldr	r3, [fp, #-12]
  10d510:	e3a02000 	mov	r2, #0
  10d514:	e5832008 	str	r2, [r3, #8]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch(NETCONNTYPE_GROUP(t)) {
  10d518:	e51b3010 	ldr	r3, [fp, #-16]
  10d51c:	e20330f0 	and	r3, r3, #240	; 0xf0
  10d520:	e3530020 	cmp	r3, #32
  10d524:	0a000007 	beq	10d548 <netconn_alloc+0x94>
  10d528:	e3530040 	cmp	r3, #64	; 0x40
  10d52c:	0a000002 	beq	10d53c <netconn_alloc+0x88>
  10d530:	e3530010 	cmp	r3, #16
  10d534:	0a000006 	beq	10d554 <netconn_alloc+0xa0>
  10d538:	ea000008 	b	10d560 <netconn_alloc+0xac>
#if LWIP_RAW
  case NETCONN_RAW:
    size = DEFAULT_RAW_RECVMBOX_SIZE;
  10d53c:	e3a03001 	mov	r3, #1
  10d540:	e50b3008 	str	r3, [fp, #-8]
    break;
  10d544:	ea00000d 	b	10d580 <netconn_alloc+0xcc>
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    size = DEFAULT_UDP_RECVMBOX_SIZE;
  10d548:	e3a03040 	mov	r3, #64	; 0x40
  10d54c:	e50b3008 	str	r3, [fp, #-8]
    break;
  10d550:	ea00000a 	b	10d580 <netconn_alloc+0xcc>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    size = DEFAULT_TCP_RECVMBOX_SIZE;
  10d554:	e3a03040 	mov	r3, #64	; 0x40
  10d558:	e50b3008 	str	r3, [fp, #-8]
    break;
  10d55c:	ea000007 	b	10d580 <netconn_alloc+0xcc>
#endif /* LWIP_TCP */
  default:
    LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
  10d560:	e306081c 	movw	r0, #26652	; 0x681c
  10d564:	e3400014 	movt	r0, #20
  10d568:	ebffd6e9 	bl	103114 <rt_kprintf>
  10d56c:	e30012a2 	movw	r1, #674	; 0x2a2
  10d570:	e30606a0 	movw	r0, #26272	; 0x66a0
  10d574:	e3400014 	movt	r0, #20
  10d578:	ebfff6dc 	bl	10b0f0 <sys_arch_assert>
    goto free_and_return;
  10d57c:	ea000039 	b	10d668 <netconn_alloc+0x1b4>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
  10d580:	e51b300c 	ldr	r3, [fp, #-12]
  10d584:	e2833014 	add	r3, r3, #20
  10d588:	e51b1008 	ldr	r1, [fp, #-8]
  10d58c:	e1a00003 	mov	r0, r3
  10d590:	ebfff591 	bl	10abdc <sys_mbox_new>
  10d594:	e1a03000 	mov	r3, r0
  10d598:	e3530000 	cmp	r3, #0
  10d59c:	1a000030 	bne	10d664 <netconn_alloc+0x1b0>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
  10d5a0:	e51b300c 	ldr	r3, [fp, #-12]
  10d5a4:	e2833010 	add	r3, r3, #16
  10d5a8:	e3a01000 	mov	r1, #0
  10d5ac:	e1a00003 	mov	r0, r3
  10d5b0:	ebfff4a1 	bl	10a83c <sys_sem_new>
  10d5b4:	e1a03000 	mov	r3, r0
  10d5b8:	e3530000 	cmp	r3, #0
  10d5bc:	0a000004 	beq	10d5d4 <netconn_alloc+0x120>
    sys_mbox_free(&conn->recvmbox);
  10d5c0:	e51b300c 	ldr	r3, [fp, #-12]
  10d5c4:	e2833014 	add	r3, r3, #20
  10d5c8:	e1a00003 	mov	r0, r3
  10d5cc:	ebfff5b7 	bl	10acb0 <sys_mbox_free>
    goto free_and_return;
  10d5d0:	ea000024 	b	10d668 <netconn_alloc+0x1b4>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
  10d5d4:	e51b300c 	ldr	r3, [fp, #-12]
  10d5d8:	e2833018 	add	r3, r3, #24
  10d5dc:	e1a00003 	mov	r0, r3
  10d5e0:	ebfff683 	bl	10aff4 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
  10d5e4:	e51b300c 	ldr	r3, [fp, #-12]
  10d5e8:	e3a02000 	mov	r2, #0
  10d5ec:	e5832004 	str	r2, [r3, #4]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
  10d5f0:	e51b300c 	ldr	r3, [fp, #-12]
  10d5f4:	e3e02000 	mvn	r2, #0
  10d5f8:	e583201c 	str	r2, [r3, #28]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
  10d5fc:	e51b300c 	ldr	r3, [fp, #-12]
  10d600:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  10d604:	e583203c 	str	r2, [r3, #60]	; 0x3c
#if LWIP_TCP
  conn->current_msg  = NULL;
  10d608:	e51b300c 	ldr	r3, [fp, #-12]
  10d60c:	e3a02000 	mov	r2, #0
  10d610:	e5832038 	str	r2, [r3, #56]	; 0x38
  conn->write_offset = 0;
  10d614:	e51b300c 	ldr	r3, [fp, #-12]
  10d618:	e3a02000 	mov	r2, #0
  10d61c:	e5832034 	str	r2, [r3, #52]	; 0x34
#endif /* LWIP_TCP */
#if LWIP_SO_SNDTIMEO
  conn->send_timeout = 0;
  10d620:	e51b300c 	ldr	r3, [fp, #-12]
  10d624:	e3a02000 	mov	r2, #0
  10d628:	e5832020 	str	r2, [r3, #32]
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
  conn->recv_timeout = 0;
  10d62c:	e51b300c 	ldr	r3, [fp, #-12]
  10d630:	e3a02000 	mov	r2, #0
  10d634:	e5832024 	str	r2, [r3, #36]	; 0x24
#endif /* LWIP_SO_RCVTIMEO */
#if LWIP_SO_RCVBUF
  conn->recv_bufsize = RECV_BUFSIZE_DEFAULT;
  10d638:	e51b300c 	ldr	r3, [fp, #-12]
  10d63c:	e3a02601 	mov	r2, #1048576	; 0x100000
  10d640:	e5832028 	str	r2, [r3, #40]	; 0x28
  conn->recv_avail   = 0;
  10d644:	e51b300c 	ldr	r3, [fp, #-12]
  10d648:	e3a02000 	mov	r2, #0
  10d64c:	e583202c 	str	r2, [r3, #44]	; 0x2c
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = 0;
  10d650:	e51b300c 	ldr	r3, [fp, #-12]
  10d654:	e3a02000 	mov	r2, #0
  10d658:	e5c32030 	strb	r2, [r3, #48]	; 0x30
  return conn;
  10d65c:	e51b300c 	ldr	r3, [fp, #-12]
  10d660:	ea000004 	b	10d678 <netconn_alloc+0x1c4>
    goto free_and_return;
  10d664:	e320f000 	nop	{0}
free_and_return:
  memp_free(MEMP_NETCONN, conn);
  10d668:	e51b100c 	ldr	r1, [fp, #-12]
  10d66c:	e3a00008 	mov	r0, #8
  10d670:	eb002f00 	bl	119278 <memp_free>
  return NULL;
  10d674:	e3a03000 	mov	r3, #0
}
  10d678:	e1a00003 	mov	r0, r3
  10d67c:	e24bd004 	sub	sp, fp, #4
  10d680:	e8bd8800 	pop	{fp, pc}

0010d684 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
  10d684:	e92d4800 	push	{fp, lr}
  10d688:	e28db004 	add	fp, sp, #4
  10d68c:	e24dd008 	sub	sp, sp, #8
  10d690:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
  10d694:	e51b3008 	ldr	r3, [fp, #-8]
  10d698:	e5933008 	ldr	r3, [r3, #8]
  10d69c:	e3530000 	cmp	r3, #0
  10d6a0:	0a000006 	beq	10d6c0 <netconn_free+0x3c>
  10d6a4:	e3060844 	movw	r0, #26692	; 0x6844
  10d6a8:	e3400014 	movt	r0, #20
  10d6ac:	ebffd698 	bl	103114 <rt_kprintf>
  10d6b0:	e30012da 	movw	r1, #730	; 0x2da
  10d6b4:	e30606a0 	movw	r0, #26272	; 0x66a0
  10d6b8:	e3400014 	movt	r0, #20
  10d6bc:	ebfff68b 	bl	10b0f0 <sys_arch_assert>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
  10d6c0:	e51b3008 	ldr	r3, [fp, #-8]
  10d6c4:	e2833014 	add	r3, r3, #20
  10d6c8:	e1a00003 	mov	r0, r3
  10d6cc:	ebfff63e 	bl	10afcc <sys_mbox_valid>
  10d6d0:	e1a03000 	mov	r3, r0
  10d6d4:	e3530000 	cmp	r3, #0
  10d6d8:	0a000006 	beq	10d6f8 <netconn_free+0x74>
  10d6dc:	e3060874 	movw	r0, #26740	; 0x6874
  10d6e0:	e3400014 	movt	r0, #20
  10d6e4:	ebffd68a 	bl	103114 <rt_kprintf>
  10d6e8:	e3a01fb7 	mov	r1, #732	; 0x2dc
  10d6ec:	e30606a0 	movw	r0, #26272	; 0x66a0
  10d6f0:	e3400014 	movt	r0, #20
  10d6f4:	ebfff67d 	bl	10b0f0 <sys_arch_assert>
    !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
  10d6f8:	e51b3008 	ldr	r3, [fp, #-8]
  10d6fc:	e2833018 	add	r3, r3, #24
  10d700:	e1a00003 	mov	r0, r3
  10d704:	ebfff630 	bl	10afcc <sys_mbox_valid>
  10d708:	e1a03000 	mov	r3, r0
  10d70c:	e3530000 	cmp	r3, #0
  10d710:	0a000006 	beq	10d730 <netconn_free+0xac>
  10d714:	e30608b0 	movw	r0, #26800	; 0x68b0
  10d718:	e3400014 	movt	r0, #20
  10d71c:	ebffd67c 	bl	103114 <rt_kprintf>
  10d720:	e30012df 	movw	r1, #735	; 0x2df
  10d724:	e30606a0 	movw	r0, #26272	; 0x66a0
  10d728:	e3400014 	movt	r0, #20
  10d72c:	ebfff66f 	bl	10b0f0 <sys_arch_assert>
    !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
  10d730:	e51b3008 	ldr	r3, [fp, #-8]
  10d734:	e2833010 	add	r3, r3, #16
  10d738:	e1a00003 	mov	r0, r3
  10d73c:	ebfff469 	bl	10a8e8 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
  10d740:	e51b3008 	ldr	r3, [fp, #-8]
  10d744:	e2833010 	add	r3, r3, #16
  10d748:	e1a00003 	mov	r0, r3
  10d74c:	ebfff4b8 	bl	10aa34 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
  10d750:	e51b1008 	ldr	r1, [fp, #-8]
  10d754:	e3a00008 	mov	r0, #8
  10d758:	eb002ec6 	bl	119278 <memp_free>
}
  10d75c:	e320f000 	nop	{0}
  10d760:	e24bd004 	sub	sp, fp, #4
  10d764:	e8bd8800 	pop	{fp, pc}

0010d768 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
  10d768:	e92d4800 	push	{fp, lr}
  10d76c:	e28db004 	add	fp, sp, #4
  10d770:	e24dd018 	sub	sp, sp, #24
  10d774:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
#endif /* LWIP_TCP */

  /* This runs in tcpip_thread, so we don't need to lock against rx packets */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
  10d778:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d77c:	e2833014 	add	r3, r3, #20
  10d780:	e1a00003 	mov	r0, r3
  10d784:	ebfff610 	bl	10afcc <sys_mbox_valid>
  10d788:	e1a03000 	mov	r3, r0
  10d78c:	e3530000 	cmp	r3, #0
  10d790:	0a00002c 	beq	10d848 <netconn_drain+0xe0>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
  10d794:	ea00001a 	b	10d804 <netconn_drain+0x9c>
#if LWIP_TCP
      if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
  10d798:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d79c:	e5933000 	ldr	r3, [r3]
  10d7a0:	e20330f0 	and	r3, r3, #240	; 0xf0
  10d7a4:	e3530010 	cmp	r3, #16
  10d7a8:	1a000012 	bne	10d7f8 <netconn_drain+0x90>
        if (mem != NULL) {
  10d7ac:	e51b3010 	ldr	r3, [fp, #-16]
  10d7b0:	e3530000 	cmp	r3, #0
  10d7b4:	0a000012 	beq	10d804 <netconn_drain+0x9c>
          p = (struct pbuf*)mem;
  10d7b8:	e51b3010 	ldr	r3, [fp, #-16]
  10d7bc:	e50b3008 	str	r3, [fp, #-8]
          /* pcb might be set to NULL already by err_tcp() */
          if (conn->pcb.tcp != NULL) {
  10d7c0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d7c4:	e5933008 	ldr	r3, [r3, #8]
  10d7c8:	e3530000 	cmp	r3, #0
  10d7cc:	0a000006 	beq	10d7ec <netconn_drain+0x84>
            tcp_recved(conn->pcb.tcp, p->tot_len);
  10d7d0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d7d4:	e5932008 	ldr	r2, [r3, #8]
  10d7d8:	e51b3008 	ldr	r3, [fp, #-8]
  10d7dc:	e1d330b8 	ldrh	r3, [r3, #8]
  10d7e0:	e1a01003 	mov	r1, r3
  10d7e4:	e1a00002 	mov	r0, r2
  10d7e8:	eb004238 	bl	11e0d0 <tcp_recved>
          }
          pbuf_free(p);
  10d7ec:	e51b0008 	ldr	r0, [fp, #-8]
  10d7f0:	eb0035ae 	bl	11aeb0 <pbuf_free>
  10d7f4:	ea000002 	b	10d804 <netconn_drain+0x9c>
        }
      } else
#endif /* LWIP_TCP */
      {
        netbuf_delete((struct netbuf *)mem);
  10d7f8:	e51b3010 	ldr	r3, [fp, #-16]
  10d7fc:	e1a00003 	mov	r0, r3
  10d800:	eb0009c9 	bl	10ff2c <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
  10d804:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d808:	e2833014 	add	r3, r3, #20
  10d80c:	e24b2010 	sub	r2, fp, #16
  10d810:	e1a01002 	mov	r1, r2
  10d814:	e1a00003 	mov	r0, r3
  10d818:	ebfff5d3 	bl	10af6c <sys_arch_mbox_tryfetch>
  10d81c:	e1a03000 	mov	r3, r0
  10d820:	e3730001 	cmn	r3, #1
  10d824:	1affffdb 	bne	10d798 <netconn_drain+0x30>
      }
    }
    sys_mbox_free(&conn->recvmbox);
  10d828:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d82c:	e2833014 	add	r3, r3, #20
  10d830:	e1a00003 	mov	r0, r3
  10d834:	ebfff51d 	bl	10acb0 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
  10d838:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d83c:	e2833014 	add	r3, r3, #20
  10d840:	e1a00003 	mov	r0, r3
  10d844:	ebfff5ea 	bl	10aff4 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
  10d848:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d84c:	e2833018 	add	r3, r3, #24
  10d850:	e1a00003 	mov	r0, r3
  10d854:	ebfff5dc 	bl	10afcc <sys_mbox_valid>
  10d858:	e1a03000 	mov	r3, r0
  10d85c:	e3530000 	cmp	r3, #0
  10d860:	0a000027 	beq	10d904 <netconn_drain+0x19c>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
  10d864:	ea000015 	b	10d8c0 <netconn_drain+0x158>
      if (mem != &netconn_aborted) {
  10d868:	e51b2010 	ldr	r2, [fp, #-16]
  10d86c:	e30f358c 	movw	r3, #62860	; 0xf58c
  10d870:	e3403014 	movt	r3, #20
  10d874:	e1520003 	cmp	r2, r3
  10d878:	0a000010 	beq	10d8c0 <netconn_drain+0x158>
        struct netconn *newconn = (struct netconn *)mem;
  10d87c:	e51b3010 	ldr	r3, [fp, #-16]
  10d880:	e50b300c 	str	r3, [fp, #-12]
        /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
        /* pcb might be set to NULL already by err_tcp() */
        /* drain recvmbox */
        netconn_drain(newconn);
  10d884:	e51b000c 	ldr	r0, [fp, #-12]
  10d888:	ebffffb6 	bl	10d768 <netconn_drain>
        if (newconn->pcb.tcp != NULL) {
  10d88c:	e51b300c 	ldr	r3, [fp, #-12]
  10d890:	e5933008 	ldr	r3, [r3, #8]
  10d894:	e3530000 	cmp	r3, #0
  10d898:	0a000006 	beq	10d8b8 <netconn_drain+0x150>
          tcp_abort(newconn->pcb.tcp);
  10d89c:	e51b300c 	ldr	r3, [fp, #-12]
  10d8a0:	e5933008 	ldr	r3, [r3, #8]
  10d8a4:	e1a00003 	mov	r0, r3
  10d8a8:	eb004059 	bl	11da14 <tcp_abort>
          newconn->pcb.tcp = NULL;
  10d8ac:	e51b300c 	ldr	r3, [fp, #-12]
  10d8b0:	e3a02000 	mov	r2, #0
  10d8b4:	e5832008 	str	r2, [r3, #8]
        }
        netconn_free(newconn);
  10d8b8:	e51b000c 	ldr	r0, [fp, #-12]
  10d8bc:	ebffff70 	bl	10d684 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
  10d8c0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d8c4:	e2833018 	add	r3, r3, #24
  10d8c8:	e24b2010 	sub	r2, fp, #16
  10d8cc:	e1a01002 	mov	r1, r2
  10d8d0:	e1a00003 	mov	r0, r3
  10d8d4:	ebfff5a4 	bl	10af6c <sys_arch_mbox_tryfetch>
  10d8d8:	e1a03000 	mov	r3, r0
  10d8dc:	e3730001 	cmn	r3, #1
  10d8e0:	1affffe0 	bne	10d868 <netconn_drain+0x100>
      }
    }
    sys_mbox_free(&conn->acceptmbox);
  10d8e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d8e8:	e2833018 	add	r3, r3, #24
  10d8ec:	e1a00003 	mov	r0, r3
  10d8f0:	ebfff4ee 	bl	10acb0 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
  10d8f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d8f8:	e2833018 	add	r3, r3, #24
  10d8fc:	e1a00003 	mov	r0, r3
  10d900:	ebfff5bb 	bl	10aff4 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
  10d904:	e320f000 	nop	{0}
  10d908:	e24bd004 	sub	sp, fp, #4
  10d90c:	e8bd8800 	pop	{fp, pc}

0010d910 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
  10d910:	e92d4800 	push	{fp, lr}
  10d914:	e28db004 	add	fp, sp, #4
  10d918:	e24dd020 	sub	sp, sp, #32
  10d91c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  10d920:	e1a03001 	mov	r3, r1
  10d924:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  err_t err;
  u8_t shut, shut_rx, shut_tx, close;
  u8_t close_finished = 0;
  10d928:	e3a03000 	mov	r3, #0
  10d92c:	e54b3007 	strb	r3, [fp, #-7]
  struct tcp_pcb* tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
  10d930:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d934:	e3530000 	cmp	r3, #0
  10d938:	1a000006 	bne	10d958 <lwip_netconn_do_close_internal+0x48>
  10d93c:	e30608ec 	movw	r0, #26860	; 0x68ec
  10d940:	e3400014 	movt	r0, #20
  10d944:	ebffd5f2 	bl	103114 <rt_kprintf>
  10d948:	e300133d 	movw	r1, #829	; 0x33d
  10d94c:	e30606a0 	movw	r0, #26272	; 0x66a0
  10d950:	e3400014 	movt	r0, #20
  10d954:	ebfff5e5 	bl	10b0f0 <sys_arch_assert>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
  10d958:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d95c:	e5933000 	ldr	r3, [r3]
  10d960:	e20330f0 	and	r3, r3, #240	; 0xf0
  10d964:	e3530010 	cmp	r3, #16
  10d968:	0a000006 	beq	10d988 <lwip_netconn_do_close_internal+0x78>
  10d96c:	e30608fc 	movw	r0, #26876	; 0x68fc
  10d970:	e3400014 	movt	r0, #20
  10d974:	ebffd5e6 	bl	103114 <rt_kprintf>
  10d978:	e300133e 	movw	r1, #830	; 0x33e
  10d97c:	e30606a0 	movw	r0, #26272	; 0x66a0
  10d980:	e3400014 	movt	r0, #20
  10d984:	ebfff5d9 	bl	10b0f0 <sys_arch_assert>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
  10d988:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d98c:	e5933004 	ldr	r3, [r3, #4]
  10d990:	e3530004 	cmp	r3, #4
  10d994:	0a000006 	beq	10d9b4 <lwip_netconn_do_close_internal+0xa4>
  10d998:	e306091c 	movw	r0, #26908	; 0x691c
  10d99c:	e3400014 	movt	r0, #20
  10d9a0:	ebffd5db 	bl	103114 <rt_kprintf>
  10d9a4:	e300133f 	movw	r1, #831	; 0x33f
  10d9a8:	e30606a0 	movw	r0, #26272	; 0x66a0
  10d9ac:	e3400014 	movt	r0, #20
  10d9b0:	ebfff5ce 	bl	10b0f0 <sys_arch_assert>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
  10d9b4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d9b8:	e5933008 	ldr	r3, [r3, #8]
  10d9bc:	e3530000 	cmp	r3, #0
  10d9c0:	1a000006 	bne	10d9e0 <lwip_netconn_do_close_internal+0xd0>
  10d9c4:	e3060940 	movw	r0, #26944	; 0x6940
  10d9c8:	e3400014 	movt	r0, #20
  10d9cc:	ebffd5d0 	bl	103114 <rt_kprintf>
  10d9d0:	e3a01d0d 	mov	r1, #832	; 0x340
  10d9d4:	e30606a0 	movw	r0, #26272	; 0x66a0
  10d9d8:	e3400014 	movt	r0, #20
  10d9dc:	ebfff5c3 	bl	10b0f0 <sys_arch_assert>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
  10d9e0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10d9e4:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10d9e8:	e3530000 	cmp	r3, #0
  10d9ec:	1a000006 	bne	10da0c <lwip_netconn_do_close_internal+0xfc>
  10d9f0:	e30607a8 	movw	r0, #26536	; 0x67a8
  10d9f4:	e3400014 	movt	r0, #20
  10d9f8:	ebffd5c5 	bl	103114 <rt_kprintf>
  10d9fc:	e3001341 	movw	r1, #833	; 0x341
  10da00:	e30606a0 	movw	r0, #26272	; 0x66a0
  10da04:	e3400014 	movt	r0, #20
  10da08:	ebfff5b8 	bl	10b0f0 <sys_arch_assert>

  tpcb = conn->pcb.tcp;
  10da0c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10da10:	e5933008 	ldr	r3, [r3, #8]
  10da14:	e50b3010 	str	r3, [fp, #-16]
  shut = conn->current_msg->msg.sd.shut;
  10da18:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10da1c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10da20:	e5d33008 	ldrb	r3, [r3, #8]
  10da24:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  shut_rx = shut & NETCONN_SHUT_RD;
  10da28:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  10da2c:	e2033001 	and	r3, r3, #1
  10da30:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee
  shut_tx = shut & NETCONN_SHUT_WR;
  10da34:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  10da38:	e2033002 	and	r3, r3, #2
  10da3c:	e54b3013 	strb	r3, [fp, #-19]	; 0xffffffed
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
  10da40:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  10da44:	e3530003 	cmp	r3, #3
  10da48:	1a000002 	bne	10da58 <lwip_netconn_do_close_internal+0x148>
    close = 1;
  10da4c:	e3a03001 	mov	r3, #1
  10da50:	e54b3006 	strb	r3, [fp, #-6]
  10da54:	ea00001e 	b	10dad4 <lwip_netconn_do_close_internal+0x1c4>
  } else if (shut_rx &&
  10da58:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
  10da5c:	e3530000 	cmp	r3, #0
  10da60:	0a00000e 	beq	10daa0 <lwip_netconn_do_close_internal+0x190>
             ((tpcb->state == FIN_WAIT_1) ||
  10da64:	e51b3010 	ldr	r3, [fp, #-16]
  10da68:	e5933014 	ldr	r3, [r3, #20]
  } else if (shut_rx &&
  10da6c:	e3530005 	cmp	r3, #5
  10da70:	0a000007 	beq	10da94 <lwip_netconn_do_close_internal+0x184>
              (tpcb->state == FIN_WAIT_2) ||
  10da74:	e51b3010 	ldr	r3, [fp, #-16]
  10da78:	e5933014 	ldr	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
  10da7c:	e3530006 	cmp	r3, #6
  10da80:	0a000003 	beq	10da94 <lwip_netconn_do_close_internal+0x184>
              (tpcb->state == CLOSING))) {
  10da84:	e51b3010 	ldr	r3, [fp, #-16]
  10da88:	e5933014 	ldr	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
  10da8c:	e3530008 	cmp	r3, #8
  10da90:	1a000002 	bne	10daa0 <lwip_netconn_do_close_internal+0x190>
    close = 1;
  10da94:	e3a03001 	mov	r3, #1
  10da98:	e54b3006 	strb	r3, [fp, #-6]
  10da9c:	ea00000c 	b	10dad4 <lwip_netconn_do_close_internal+0x1c4>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
  10daa0:	e55b3013 	ldrb	r3, [fp, #-19]	; 0xffffffed
  10daa4:	e3530000 	cmp	r3, #0
  10daa8:	0a000007 	beq	10dacc <lwip_netconn_do_close_internal+0x1bc>
  10daac:	e51b3010 	ldr	r3, [fp, #-16]
  10dab0:	e5d3301e 	ldrb	r3, [r3, #30]
  10dab4:	e2033010 	and	r3, r3, #16
  10dab8:	e3530000 	cmp	r3, #0
  10dabc:	0a000002 	beq	10dacc <lwip_netconn_do_close_internal+0x1bc>
    close = 1;
  10dac0:	e3a03001 	mov	r3, #1
  10dac4:	e54b3006 	strb	r3, [fp, #-6]
  10dac8:	ea000001 	b	10dad4 <lwip_netconn_do_close_internal+0x1c4>
  } else {
    close = 0;
  10dacc:	e3a03000 	mov	r3, #0
  10dad0:	e54b3006 	strb	r3, [fp, #-6]
  }

  /* Set back some callback pointers */
  if (close) {
  10dad4:	e55b3006 	ldrb	r3, [fp, #-6]
  10dad8:	e3530000 	cmp	r3, #0
  10dadc:	0a000002 	beq	10daec <lwip_netconn_do_close_internal+0x1dc>
    tcp_arg(tpcb, NULL);
  10dae0:	e3a01000 	mov	r1, #0
  10dae4:	e51b0010 	ldr	r0, [fp, #-16]
  10dae8:	eb00481f 	bl	11fb6c <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
  10daec:	e51b3010 	ldr	r3, [fp, #-16]
  10daf0:	e5933014 	ldr	r3, [r3, #20]
  10daf4:	e3530001 	cmp	r3, #1
  10daf8:	1a000003 	bne	10db0c <lwip_netconn_do_close_internal+0x1fc>
    tcp_accept(tpcb, NULL);
  10dafc:	e3a01000 	mov	r1, #0
  10db00:	e51b0010 	ldr	r0, [fp, #-16]
  10db04:	eb004872 	bl	11fcd4 <tcp_accept>
  10db08:	ea000018 	b	10db70 <lwip_netconn_do_close_internal+0x260>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
  10db0c:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
  10db10:	e3530000 	cmp	r3, #0
  10db14:	0a000005 	beq	10db30 <lwip_netconn_do_close_internal+0x220>
      tcp_recv(tpcb, NULL);
  10db18:	e3a01000 	mov	r1, #0
  10db1c:	e51b0010 	ldr	r0, [fp, #-16]
  10db20:	eb004820 	bl	11fba8 <tcp_recv>
      tcp_accept(tpcb, NULL);
  10db24:	e3a01000 	mov	r1, #0
  10db28:	e51b0010 	ldr	r0, [fp, #-16]
  10db2c:	eb004868 	bl	11fcd4 <tcp_accept>
    }
    if (shut_tx) {
  10db30:	e55b3013 	ldrb	r3, [fp, #-19]	; 0xffffffed
  10db34:	e3530000 	cmp	r3, #0
  10db38:	0a000002 	beq	10db48 <lwip_netconn_do_close_internal+0x238>
      tcp_sent(tpcb, NULL);
  10db3c:	e3a01000 	mov	r1, #0
  10db40:	e51b0010 	ldr	r0, [fp, #-16]
  10db44:	eb004830 	bl	11fc0c <tcp_sent>
    }
    if (close) {
  10db48:	e55b3006 	ldrb	r3, [fp, #-6]
  10db4c:	e3530000 	cmp	r3, #0
  10db50:	0a000006 	beq	10db70 <lwip_netconn_do_close_internal+0x260>
      tcp_poll(tpcb, NULL, 0);
  10db54:	e3a02000 	mov	r2, #0
  10db58:	e3a01000 	mov	r1, #0
  10db5c:	e51b0010 	ldr	r0, [fp, #-16]
  10db60:	eb004870 	bl	11fd28 <tcp_poll>
      tcp_err(tpcb, NULL);
  10db64:	e3a01000 	mov	r1, #0
  10db68:	e51b0010 	ldr	r0, [fp, #-16]
  10db6c:	eb00483f 	bl	11fc70 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (close) {
  10db70:	e55b3006 	ldrb	r3, [fp, #-6]
  10db74:	e3530000 	cmp	r3, #0
  10db78:	0a000004 	beq	10db90 <lwip_netconn_do_close_internal+0x280>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
  10db7c:	e51b0010 	ldr	r0, [fp, #-16]
  10db80:	eb003eaf 	bl	11d644 <tcp_close>
  10db84:	e1a03000 	mov	r3, r0
  10db88:	e54b3005 	strb	r3, [fp, #-5]
  10db8c:	ea000006 	b	10dbac <lwip_netconn_do_close_internal+0x29c>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
  10db90:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
  10db94:	e55b2013 	ldrb	r2, [fp, #-19]	; 0xffffffed
  10db98:	e1a01003 	mov	r1, r3
  10db9c:	e51b0010 	ldr	r0, [fp, #-16]
  10dba0:	eb003ebc 	bl	11d698 <tcp_shutdown>
  10dba4:	e1a03000 	mov	r3, r0
  10dba8:	e54b3005 	strb	r3, [fp, #-5]
  }
  if (err == ERR_OK) {
  10dbac:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10dbb0:	e3530000 	cmp	r3, #0
  10dbb4:	1a000002 	bne	10dbc4 <lwip_netconn_do_close_internal+0x2b4>
    close_finished = 1;
  10dbb8:	e3a03001 	mov	r3, #1
  10dbbc:	e54b3007 	strb	r3, [fp, #-7]
  10dbc0:	ea000021 	b	10dc4c <lwip_netconn_do_close_internal+0x33c>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
  10dbc4:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10dbc8:	e3730001 	cmn	r3, #1
  10dbcc:	1a00001c 	bne	10dc44 <lwip_netconn_do_close_internal+0x334>
         nonblocking netconns, we have to wait since no standard socket application
         is prepared for close failing because of resource shortage.
         Check the timeout: this is kind of an lwip addition to the standard sockets:
         we wait for some time when failing to allocate a segment for the FIN */
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
      s32_t close_timeout = LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT;
  10dbd0:	e3043e20 	movw	r3, #20000	; 0x4e20
  10dbd4:	e50b300c 	str	r3, [fp, #-12]
#if LWIP_SO_SNDTIMEO
      if (conn->send_timeout > 0) {
  10dbd8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dbdc:	e5933020 	ldr	r3, [r3, #32]
  10dbe0:	e3530000 	cmp	r3, #0
  10dbe4:	da000002 	ble	10dbf4 <lwip_netconn_do_close_internal+0x2e4>
        close_timeout = conn->send_timeout;
  10dbe8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dbec:	e5933020 	ldr	r3, [r3, #32]
  10dbf0:	e50b300c 	str	r3, [fp, #-12]
      if (conn->linger >= 0) {
        /* use linger timeout (seconds) */
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
  10dbf4:	ebfff556 	bl	10b154 <sys_now>
  10dbf8:	e1a02000 	mov	r2, r0
  10dbfc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dc00:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10dc04:	e593300c 	ldr	r3, [r3, #12]
  10dc08:	e0423003 	sub	r3, r2, r3
  10dc0c:	e1a02003 	mov	r2, r3
  10dc10:	e51b300c 	ldr	r3, [fp, #-12]
  10dc14:	e1530002 	cmp	r3, r2
  10dc18:	ca00000b 	bgt	10dc4c <lwip_netconn_do_close_internal+0x33c>
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
  10dc1c:	e3a03001 	mov	r3, #1
  10dc20:	e54b3007 	strb	r3, [fp, #-7]
        if (close) {
  10dc24:	e55b3006 	ldrb	r3, [fp, #-6]
  10dc28:	e3530000 	cmp	r3, #0
  10dc2c:	0a000006 	beq	10dc4c <lwip_netconn_do_close_internal+0x33c>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
  10dc30:	e51b0010 	ldr	r0, [fp, #-16]
  10dc34:	eb003f76 	bl	11da14 <tcp_abort>
          err = ERR_OK;
  10dc38:	e3a03000 	mov	r3, #0
  10dc3c:	e54b3005 	strb	r3, [fp, #-5]
  10dc40:	ea000001 	b	10dc4c <lwip_netconn_do_close_internal+0x33c>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
  10dc44:	e3a03001 	mov	r3, #1
  10dc48:	e54b3007 	strb	r3, [fp, #-7]
    }
  }
  if (close_finished) {
  10dc4c:	e55b3007 	ldrb	r3, [fp, #-7]
  10dc50:	e3530000 	cmp	r3, #0
  10dc54:	0a00004e 	beq	10dd94 <lwip_netconn_do_close_internal+0x484>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
  10dc58:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dc5c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10dc60:	e5933000 	ldr	r3, [r3]
  10dc64:	e2833010 	add	r3, r3, #16
  10dc68:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    conn->current_msg->err = err;
  10dc6c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dc70:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10dc74:	e55b2005 	ldrb	r2, [fp, #-5]
  10dc78:	e5c32004 	strb	r2, [r3, #4]
    conn->current_msg = NULL;
  10dc7c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dc80:	e3a02000 	mov	r2, #0
  10dc84:	e5832038 	str	r2, [r3, #56]	; 0x38
    conn->state = NETCONN_NONE;
  10dc88:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dc8c:	e3a02000 	mov	r2, #0
  10dc90:	e5832004 	str	r2, [r3, #4]
    if (err == ERR_OK) {
  10dc94:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10dc98:	e3530000 	cmp	r3, #0
  10dc9c:	1a000029 	bne	10dd48 <lwip_netconn_do_close_internal+0x438>
      if (close) {
  10dca0:	e55b3006 	ldrb	r3, [fp, #-6]
  10dca4:	e3530000 	cmp	r3, #0
  10dca8:	0a00000c 	beq	10dce0 <lwip_netconn_do_close_internal+0x3d0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
  10dcac:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dcb0:	e3a02000 	mov	r2, #0
  10dcb4:	e5832008 	str	r2, [r3, #8]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
  10dcb8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dcbc:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10dcc0:	e3530000 	cmp	r3, #0
  10dcc4:	0a000005 	beq	10dce0 <lwip_netconn_do_close_internal+0x3d0>
  10dcc8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dccc:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10dcd0:	e3a02000 	mov	r2, #0
  10dcd4:	e3a01004 	mov	r1, #4
  10dcd8:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10dcdc:	e12fff33 	blx	r3
      }
      if (shut_rx) {
  10dce0:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
  10dce4:	e3530000 	cmp	r3, #0
  10dce8:	0a000009 	beq	10dd14 <lwip_netconn_do_close_internal+0x404>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
  10dcec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dcf0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10dcf4:	e3530000 	cmp	r3, #0
  10dcf8:	0a000005 	beq	10dd14 <lwip_netconn_do_close_internal+0x404>
  10dcfc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dd00:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10dd04:	e3a02000 	mov	r2, #0
  10dd08:	e3a01000 	mov	r1, #0
  10dd0c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10dd10:	e12fff33 	blx	r3
      }
      if (shut_tx) {
  10dd14:	e55b3013 	ldrb	r3, [fp, #-19]	; 0xffffffed
  10dd18:	e3530000 	cmp	r3, #0
  10dd1c:	0a000009 	beq	10dd48 <lwip_netconn_do_close_internal+0x438>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
  10dd20:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dd24:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10dd28:	e3530000 	cmp	r3, #0
  10dd2c:	0a000005 	beq	10dd48 <lwip_netconn_do_close_internal+0x438>
  10dd30:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dd34:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10dd38:	e3a02000 	mov	r2, #0
  10dd3c:	e3a01002 	mov	r1, #2
  10dd40:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10dd44:	e12fff33 	blx	r3
      }
    }
    NETCONN_SET_SAFE_ERR(conn, err);
  10dd48:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dd4c:	e3530000 	cmp	r3, #0
  10dd50:	0a000008 	beq	10dd78 <lwip_netconn_do_close_internal+0x468>
  10dd54:	ebffd138 	bl	10223c <rt_enter_critical>
  10dd58:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dd5c:	e1d330dc 	ldrsb	r3, [r3, #12]
  10dd60:	e373000c 	cmn	r3, #12
  10dd64:	ba000002 	blt	10dd74 <lwip_netconn_do_close_internal+0x464>
  10dd68:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dd6c:	e55b2005 	ldrb	r2, [fp, #-5]
  10dd70:	e5c3200c 	strb	r2, [r3, #12]
  10dd74:	ebffd136 	bl	102254 <rt_exit_critical>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
  10dd78:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  10dd7c:	e3530000 	cmp	r3, #0
  10dd80:	0a000001 	beq	10dd8c <lwip_netconn_do_close_internal+0x47c>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
  10dd84:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  10dd88:	ebfff2e1 	bl	10a914 <sys_sem_signal>
    }
    return ERR_OK;
  10dd8c:	e3a03000 	mov	r3, #0
  10dd90:	ea00002b 	b	10de44 <lwip_netconn_do_close_internal+0x534>
  }
  if (!close_finished) {
  10dd94:	e55b3007 	ldrb	r3, [fp, #-7]
  10dd98:	e3530000 	cmp	r3, #0
  10dd9c:	1a00001d 	bne	10de18 <lwip_netconn_do_close_internal+0x508>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
  10dda0:	e51b3010 	ldr	r3, [fp, #-16]
  10dda4:	e5933014 	ldr	r3, [r3, #20]
  10dda8:	e3530001 	cmp	r3, #1
  10ddac:	1a000006 	bne	10ddcc <lwip_netconn_do_close_internal+0x4bc>
  10ddb0:	e3060954 	movw	r0, #26964	; 0x6954
  10ddb4:	e3400014 	movt	r0, #20
  10ddb8:	ebffd4d5 	bl	103114 <rt_kprintf>
  10ddbc:	e30013dd 	movw	r1, #989	; 0x3dd
  10ddc0:	e30606a0 	movw	r0, #26272	; 0x66a0
  10ddc4:	e3400014 	movt	r0, #20
  10ddc8:	ebfff4c8 	bl	10b0f0 <sys_arch_assert>
    if (shut_tx) {
  10ddcc:	e55b3013 	ldrb	r3, [fp, #-19]	; 0xffffffed
  10ddd0:	e3530000 	cmp	r3, #0
  10ddd4:	0a000003 	beq	10dde8 <lwip_netconn_do_close_internal+0x4d8>
      tcp_sent(tpcb, sent_tcp);
  10ddd8:	e30c1b58 	movw	r1, #52056	; 0xcb58
  10dddc:	e3401010 	movt	r1, #16
  10dde0:	e51b0010 	ldr	r0, [fp, #-16]
  10dde4:	eb004788 	bl	11fc0c <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
  10dde8:	e3a02001 	mov	r2, #1
  10ddec:	e30c1a3c 	movw	r1, #51772	; 0xca3c
  10ddf0:	e3401010 	movt	r1, #16
  10ddf4:	e51b0010 	ldr	r0, [fp, #-16]
  10ddf8:	eb0047ca 	bl	11fd28 <tcp_poll>
    tcp_err(tpcb, err_tcp);
  10ddfc:	e30c1c74 	movw	r1, #52340	; 0xcc74
  10de00:	e3401010 	movt	r1, #16
  10de04:	e51b0010 	ldr	r0, [fp, #-16]
  10de08:	eb004798 	bl	11fc70 <tcp_err>
    tcp_arg(tpcb, conn);
  10de0c:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  10de10:	e51b0010 	ldr	r0, [fp, #-16]
  10de14:	eb004754 	bl	11fb6c <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
  10de18:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10de1c:	e3530000 	cmp	r3, #0
  10de20:	1a000006 	bne	10de40 <lwip_netconn_do_close_internal+0x530>
  10de24:	e3060978 	movw	r0, #27000	; 0x6978
  10de28:	e3400014 	movt	r0, #20
  10de2c:	ebffd4b8 	bl	103114 <rt_kprintf>
  10de30:	e30013e9 	movw	r1, #1001	; 0x3e9
  10de34:	e30606a0 	movw	r0, #26272	; 0x66a0
  10de38:	e3400014 	movt	r0, #20
  10de3c:	ebfff4ab 	bl	10b0f0 <sys_arch_assert>
  return err;
  10de40:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10de44:	e1a00003 	mov	r0, r3
  10de48:	e24bd004 	sub	sp, fp, #4
  10de4c:	e8bd8800 	pop	{fp, pc}

0010de50 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
  10de50:	e92d4800 	push	{fp, lr}
  10de54:	e28db004 	add	fp, sp, #4
  10de58:	e24dd010 	sub	sp, sp, #16
  10de5c:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10de60:	e51b3010 	ldr	r3, [fp, #-16]
  10de64:	e50b3008 	str	r3, [fp, #-8]

  enum netconn_state state = msg->conn->state;
  10de68:	e51b3008 	ldr	r3, [fp, #-8]
  10de6c:	e5933000 	ldr	r3, [r3]
  10de70:	e5933004 	ldr	r3, [r3, #4]
  10de74:	e50b300c 	str	r3, [fp, #-12]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
  10de78:	e51b300c 	ldr	r3, [fp, #-12]
  10de7c:	e3530000 	cmp	r3, #0
  10de80:	0a00000c 	beq	10deb8 <lwip_netconn_do_delconn+0x68>
  10de84:	e51b3008 	ldr	r3, [fp, #-8]
  10de88:	e5933000 	ldr	r3, [r3]
  10de8c:	e5933000 	ldr	r3, [r3]
  10de90:	e20330f0 	and	r3, r3, #240	; 0xf0
  10de94:	e3530010 	cmp	r3, #16
  10de98:	0a000006 	beq	10deb8 <lwip_netconn_do_delconn+0x68>
  10de9c:	e3060988 	movw	r0, #27016	; 0x6988
  10dea0:	e3400014 	movt	r0, #20
  10dea4:	ebffd49a 	bl	103114 <rt_kprintf>
  10dea8:	e30013fb 	movw	r1, #1019	; 0x3fb
  10deac:	e30606a0 	movw	r0, #26272	; 0x66a0
  10deb0:	e3400014 	movt	r0, #20
  10deb4:	ebfff48d 	bl	10b0f0 <sys_arch_assert>
      NETCONN_SET_SAFE_ERR(msg->conn, ERR_CLSD);
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
  10deb8:	e51b300c 	ldr	r3, [fp, #-12]
  10debc:	e3530000 	cmp	r3, #0
  10dec0:	0a000005 	beq	10dedc <lwip_netconn_do_delconn+0x8c>
  10dec4:	e51b300c 	ldr	r3, [fp, #-12]
  10dec8:	e3530002 	cmp	r3, #2
  10decc:	0a000002 	beq	10dedc <lwip_netconn_do_delconn+0x8c>
       (state != NETCONN_LISTEN) &&
  10ded0:	e51b300c 	ldr	r3, [fp, #-12]
  10ded4:	e3530003 	cmp	r3, #3
  10ded8:	1a000008 	bne	10df00 <lwip_netconn_do_delconn+0xb0>
       (state != NETCONN_CONNECT)) ||
  10dedc:	e51b300c 	ldr	r3, [fp, #-12]
  10dee0:	e3530003 	cmp	r3, #3
  10dee4:	1a000009 	bne	10df10 <lwip_netconn_do_delconn+0xc0>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
  10dee8:	e51b3008 	ldr	r3, [fp, #-8]
  10deec:	e5933000 	ldr	r3, [r3]
  10def0:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10def4:	e2033004 	and	r3, r3, #4
  10def8:	e3530000 	cmp	r3, #0
  10defc:	1a000003 	bne	10df10 <lwip_netconn_do_delconn+0xc0>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
  10df00:	e51b3008 	ldr	r3, [fp, #-8]
  10df04:	e3e02004 	mvn	r2, #4
  10df08:	e5c32004 	strb	r2, [r3, #4]
  10df0c:	ea00009e 	b	10e18c <lwip_netconn_do_delconn+0x33c>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
  10df10:	e51b300c 	ldr	r3, [fp, #-12]
  10df14:	e3530003 	cmp	r3, #3
  10df18:	1a00000c 	bne	10df50 <lwip_netconn_do_delconn+0x100>
  10df1c:	e51b3008 	ldr	r3, [fp, #-8]
  10df20:	e5933000 	ldr	r3, [r3]
  10df24:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10df28:	e2033004 	and	r3, r3, #4
  10df2c:	e3530000 	cmp	r3, #0
  10df30:	1a000006 	bne	10df50 <lwip_netconn_do_delconn+0x100>
  10df34:	e306099c 	movw	r0, #27036	; 0x699c
  10df38:	e3400014 	movt	r0, #20
  10df3c:	ebffd474 	bl	103114 <rt_kprintf>
  10df40:	e3001419 	movw	r1, #1049	; 0x419
  10df44:	e30606a0 	movw	r0, #26272	; 0x66a0
  10df48:	e3400014 	movt	r0, #20
  10df4c:	ebfff467 	bl	10b0f0 <sys_arch_assert>
      (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
  10df50:	e51b3008 	ldr	r3, [fp, #-8]
  10df54:	e3a02000 	mov	r2, #0
  10df58:	e5c32004 	strb	r2, [r3, #4]
    /* Drain and delete mboxes */
    netconn_drain(msg->conn);
  10df5c:	e51b3008 	ldr	r3, [fp, #-8]
  10df60:	e5933000 	ldr	r3, [r3]
  10df64:	e1a00003 	mov	r0, r3
  10df68:	ebfffdfe 	bl	10d768 <netconn_drain>

    if (msg->conn->pcb.tcp != NULL) {
  10df6c:	e51b3008 	ldr	r3, [fp, #-8]
  10df70:	e5933000 	ldr	r3, [r3]
  10df74:	e5933008 	ldr	r3, [r3, #8]
  10df78:	e3530000 	cmp	r3, #0
  10df7c:	0a000068 	beq	10e124 <lwip_netconn_do_delconn+0x2d4>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
  10df80:	e51b3008 	ldr	r3, [fp, #-8]
  10df84:	e5933000 	ldr	r3, [r3]
  10df88:	e5933000 	ldr	r3, [r3]
  10df8c:	e20330f0 	and	r3, r3, #240	; 0xf0
  10df90:	e3530020 	cmp	r3, #32
  10df94:	0a00000a 	beq	10dfc4 <lwip_netconn_do_delconn+0x174>
  10df98:	e3530040 	cmp	r3, #64	; 0x40
  10df9c:	0a000002 	beq	10dfac <lwip_netconn_do_delconn+0x15c>
  10dfa0:	e3530010 	cmp	r3, #16
  10dfa4:	0a000011 	beq	10dff0 <lwip_netconn_do_delconn+0x1a0>
        /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
           the application thread, so we can return at this point! */
        return;
#endif /* LWIP_TCP */
      default:
        break;
  10dfa8:	ea000059 	b	10e114 <lwip_netconn_do_delconn+0x2c4>
        raw_remove(msg->conn->pcb.raw);
  10dfac:	e51b3008 	ldr	r3, [fp, #-8]
  10dfb0:	e5933000 	ldr	r3, [r3]
  10dfb4:	e5933008 	ldr	r3, [r3, #8]
  10dfb8:	e1a00003 	mov	r0, r3
  10dfbc:	eb0039d7 	bl	11c720 <raw_remove>
        break;
  10dfc0:	ea000053 	b	10e114 <lwip_netconn_do_delconn+0x2c4>
        msg->conn->pcb.udp->recv_arg = NULL;
  10dfc4:	e51b3008 	ldr	r3, [fp, #-8]
  10dfc8:	e5933000 	ldr	r3, [r3]
  10dfcc:	e5933008 	ldr	r3, [r3, #8]
  10dfd0:	e3a02000 	mov	r2, #0
  10dfd4:	e5832024 	str	r2, [r3, #36]	; 0x24
        udp_remove(msg->conn->pcb.udp);
  10dfd8:	e51b3008 	ldr	r3, [fp, #-8]
  10dfdc:	e5933000 	ldr	r3, [r3]
  10dfe0:	e5933008 	ldr	r3, [r3, #8]
  10dfe4:	e1a00003 	mov	r0, r3
  10dfe8:	eb006a83 	bl	1289fc <udp_remove>
        break;
  10dfec:	ea000048 	b	10e114 <lwip_netconn_do_delconn+0x2c4>
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
  10dff0:	e51b3008 	ldr	r3, [fp, #-8]
  10dff4:	e5933000 	ldr	r3, [r3]
  10dff8:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10dffc:	e3530000 	cmp	r3, #0
  10e000:	1a000004 	bne	10e018 <lwip_netconn_do_delconn+0x1c8>
  10e004:	e51b3008 	ldr	r3, [fp, #-8]
  10e008:	e5933000 	ldr	r3, [r3]
  10e00c:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10e010:	e3530000 	cmp	r3, #0
  10e014:	0a000006 	beq	10e034 <lwip_netconn_do_delconn+0x1e4>
  10e018:	e30609bc 	movw	r0, #27068	; 0x69bc
  10e01c:	e3400014 	movt	r0, #20
  10e020:	ebffd43b 	bl	103114 <rt_kprintf>
  10e024:	e300142f 	movw	r1, #1071	; 0x42f
  10e028:	e30606a0 	movw	r0, #26272	; 0x66a0
  10e02c:	e3400014 	movt	r0, #20
  10e030:	ebfff42e 	bl	10b0f0 <sys_arch_assert>
        msg->conn->state = NETCONN_CLOSE;
  10e034:	e51b3008 	ldr	r3, [fp, #-8]
  10e038:	e5933000 	ldr	r3, [r3]
  10e03c:	e3a02004 	mov	r2, #4
  10e040:	e5832004 	str	r2, [r3, #4]
        msg->msg.sd.shut = NETCONN_SHUT_RDWR;
  10e044:	e51b3008 	ldr	r3, [fp, #-8]
  10e048:	e3a02003 	mov	r2, #3
  10e04c:	e5c32008 	strb	r2, [r3, #8]
        msg->conn->current_msg = msg;
  10e050:	e51b3008 	ldr	r3, [fp, #-8]
  10e054:	e5933000 	ldr	r3, [r3]
  10e058:	e51b2008 	ldr	r2, [fp, #-8]
  10e05c:	e5832038 	str	r2, [r3, #56]	; 0x38
        if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
  10e060:	e51b3008 	ldr	r3, [fp, #-8]
  10e064:	e5933000 	ldr	r3, [r3]
  10e068:	e3a01000 	mov	r1, #0
  10e06c:	e1a00003 	mov	r0, r3
  10e070:	ebfffe26 	bl	10d910 <lwip_netconn_do_close_internal>
  10e074:	e1a03000 	mov	r3, r0
  10e078:	e3530000 	cmp	r3, #0
  10e07c:	0a00005b 	beq	10e1f0 <lwip_netconn_do_delconn+0x3a0>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
  10e080:	e51b3008 	ldr	r3, [fp, #-8]
  10e084:	e5933000 	ldr	r3, [r3]
  10e088:	e5933004 	ldr	r3, [r3, #4]
  10e08c:	e3530004 	cmp	r3, #4
  10e090:	0a000006 	beq	10e0b0 <lwip_netconn_do_delconn+0x260>
  10e094:	e30609d8 	movw	r0, #27096	; 0x69d8
  10e098:	e3400014 	movt	r0, #20
  10e09c:	ebffd41c 	bl	103114 <rt_kprintf>
  10e0a0:	e3001435 	movw	r1, #1077	; 0x435
  10e0a4:	e30606a0 	movw	r0, #26272	; 0x66a0
  10e0a8:	e3400014 	movt	r0, #20
  10e0ac:	ebfff40f 	bl	10b0f0 <sys_arch_assert>
          UNLOCK_TCPIP_CORE();
  10e0b0:	e30f05f4 	movw	r0, #62964	; 0xf5f4
  10e0b4:	e3400014 	movt	r0, #20
  10e0b8:	ebfff29c 	bl	10ab30 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
  10e0bc:	e51b3008 	ldr	r3, [fp, #-8]
  10e0c0:	e5933000 	ldr	r3, [r3]
  10e0c4:	e2833010 	add	r3, r3, #16
  10e0c8:	e3a01000 	mov	r1, #0
  10e0cc:	e1a00003 	mov	r0, r3
  10e0d0:	ebfff21a 	bl	10a940 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
  10e0d4:	e30f05f4 	movw	r0, #62964	; 0xf5f4
  10e0d8:	e3400014 	movt	r0, #20
  10e0dc:	ebfff287 	bl	10ab00 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
  10e0e0:	e51b3008 	ldr	r3, [fp, #-8]
  10e0e4:	e5933000 	ldr	r3, [r3]
  10e0e8:	e5933004 	ldr	r3, [r3, #4]
  10e0ec:	e3530000 	cmp	r3, #0
  10e0f0:	0a00003e 	beq	10e1f0 <lwip_netconn_do_delconn+0x3a0>
  10e0f4:	e30609d8 	movw	r0, #27096	; 0x69d8
  10e0f8:	e3400014 	movt	r0, #20
  10e0fc:	ebffd404 	bl	103114 <rt_kprintf>
  10e100:	e3001439 	movw	r1, #1081	; 0x439
  10e104:	e30606a0 	movw	r0, #26272	; 0x66a0
  10e108:	e3400014 	movt	r0, #20
  10e10c:	ebfff3f7 	bl	10b0f0 <sys_arch_assert>
        return;
  10e110:	ea000036 	b	10e1f0 <lwip_netconn_do_delconn+0x3a0>
      }
      msg->conn->pcb.tcp = NULL;
  10e114:	e51b3008 	ldr	r3, [fp, #-8]
  10e118:	e5933000 	ldr	r3, [r3]
  10e11c:	e3a02000 	mov	r2, #0
  10e120:	e5832008 	str	r2, [r3, #8]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
  10e124:	e51b3008 	ldr	r3, [fp, #-8]
  10e128:	e5933000 	ldr	r3, [r3]
  10e12c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10e130:	e3530000 	cmp	r3, #0
  10e134:	0a000007 	beq	10e158 <lwip_netconn_do_delconn+0x308>
  10e138:	e51b3008 	ldr	r3, [fp, #-8]
  10e13c:	e5933000 	ldr	r3, [r3]
  10e140:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10e144:	e51b2008 	ldr	r2, [fp, #-8]
  10e148:	e5920000 	ldr	r0, [r2]
  10e14c:	e3a02000 	mov	r2, #0
  10e150:	e3a01000 	mov	r1, #0
  10e154:	e12fff33 	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
  10e158:	e51b3008 	ldr	r3, [fp, #-8]
  10e15c:	e5933000 	ldr	r3, [r3]
  10e160:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10e164:	e3530000 	cmp	r3, #0
  10e168:	0a000007 	beq	10e18c <lwip_netconn_do_delconn+0x33c>
  10e16c:	e51b3008 	ldr	r3, [fp, #-8]
  10e170:	e5933000 	ldr	r3, [r3]
  10e174:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10e178:	e51b2008 	ldr	r2, [fp, #-8]
  10e17c:	e5920000 	ldr	r0, [r2]
  10e180:	e3a02000 	mov	r2, #0
  10e184:	e3a01002 	mov	r1, #2
  10e188:	e12fff33 	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
  10e18c:	e51b3008 	ldr	r3, [fp, #-8]
  10e190:	e5933000 	ldr	r3, [r3]
  10e194:	e2833010 	add	r3, r3, #16
  10e198:	e1a00003 	mov	r0, r3
  10e19c:	ebfff21a 	bl	10aa0c <sys_sem_valid>
  10e1a0:	e1a03000 	mov	r3, r0
  10e1a4:	e3530000 	cmp	r3, #0
  10e1a8:	0a000011 	beq	10e1f4 <lwip_netconn_do_delconn+0x3a4>
    TCPIP_APIMSG_ACK(msg);
  10e1ac:	e51b3008 	ldr	r3, [fp, #-8]
  10e1b0:	e5933000 	ldr	r3, [r3]
  10e1b4:	e3530000 	cmp	r3, #0
  10e1b8:	0a00000d 	beq	10e1f4 <lwip_netconn_do_delconn+0x3a4>
  10e1bc:	ebffd01e 	bl	10223c <rt_enter_critical>
  10e1c0:	e51b3008 	ldr	r3, [fp, #-8]
  10e1c4:	e5933000 	ldr	r3, [r3]
  10e1c8:	e1d330dc 	ldrsb	r3, [r3, #12]
  10e1cc:	e373000c 	cmn	r3, #12
  10e1d0:	ba000004 	blt	10e1e8 <lwip_netconn_do_delconn+0x398>
  10e1d4:	e51b3008 	ldr	r3, [fp, #-8]
  10e1d8:	e5933000 	ldr	r3, [r3]
  10e1dc:	e51b2008 	ldr	r2, [fp, #-8]
  10e1e0:	e1d220d4 	ldrsb	r2, [r2, #4]
  10e1e4:	e5c3200c 	strb	r2, [r3, #12]
  10e1e8:	ebffd019 	bl	102254 <rt_exit_critical>
  10e1ec:	ea000000 	b	10e1f4 <lwip_netconn_do_delconn+0x3a4>
        return;
  10e1f0:	e320f000 	nop	{0}
  }
}
  10e1f4:	e24bd004 	sub	sp, fp, #4
  10e1f8:	e8bd8800 	pop	{fp, pc}

0010e1fc <lwip_netconn_do_bind>:
 * @param m the api_msg_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
  10e1fc:	e92d4800 	push	{fp, lr}
  10e200:	e28db004 	add	fp, sp, #4
  10e204:	e24dd010 	sub	sp, sp, #16
  10e208:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10e20c:	e51b3010 	ldr	r3, [fp, #-16]
  10e210:	e50b3008 	str	r3, [fp, #-8]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
  10e214:	e51b3008 	ldr	r3, [fp, #-8]
  10e218:	e5933000 	ldr	r3, [r3]
  10e21c:	e1d330dc 	ldrsb	r3, [r3, #12]
  10e220:	e373000c 	cmn	r3, #12
  10e224:	aa000005 	bge	10e240 <lwip_netconn_do_bind+0x44>
    msg->err = msg->conn->last_err;
  10e228:	e51b3008 	ldr	r3, [fp, #-8]
  10e22c:	e5933000 	ldr	r3, [r3]
  10e230:	e1d320dc 	ldrsb	r2, [r3, #12]
  10e234:	e51b3008 	ldr	r3, [fp, #-8]
  10e238:	e5c32004 	strb	r2, [r3, #4]
  10e23c:	ea00003c 	b	10e334 <lwip_netconn_do_bind+0x138>
  } else {
    msg->err = ERR_VAL;
  10e240:	e51b3008 	ldr	r3, [fp, #-8]
  10e244:	e3e02005 	mvn	r2, #5
  10e248:	e5c32004 	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
  10e24c:	e51b3008 	ldr	r3, [fp, #-8]
  10e250:	e5933000 	ldr	r3, [r3]
  10e254:	e5933008 	ldr	r3, [r3, #8]
  10e258:	e3530000 	cmp	r3, #0
  10e25c:	0a000033 	beq	10e330 <lwip_netconn_do_bind+0x134>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
  10e260:	e51b3008 	ldr	r3, [fp, #-8]
  10e264:	e5933000 	ldr	r3, [r3]
  10e268:	e5933000 	ldr	r3, [r3]
  10e26c:	e20330f0 	and	r3, r3, #240	; 0xf0
  10e270:	e3530020 	cmp	r3, #32
  10e274:	0a000011 	beq	10e2c0 <lwip_netconn_do_bind+0xc4>
  10e278:	e3530040 	cmp	r3, #64	; 0x40
  10e27c:	0a000002 	beq	10e28c <lwip_netconn_do_bind+0x90>
  10e280:	e3530010 	cmp	r3, #16
  10e284:	0a00001b 	beq	10e2f8 <lwip_netconn_do_bind+0xfc>
      case NETCONN_TCP:
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
        break;
#endif /* LWIP_TCP */
      default:
        break;
  10e288:	ea000029 	b	10e334 <lwip_netconn_do_bind+0x138>
        msg->err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
  10e28c:	e51b3008 	ldr	r3, [fp, #-8]
  10e290:	e5933000 	ldr	r3, [r3]
  10e294:	e5932008 	ldr	r2, [r3, #8]
  10e298:	e51b3008 	ldr	r3, [fp, #-8]
  10e29c:	e5933008 	ldr	r3, [r3, #8]
  10e2a0:	e1a01003 	mov	r1, r3
  10e2a4:	e1a00002 	mov	r0, r2
  10e2a8:	eb003839 	bl	11c394 <raw_bind>
  10e2ac:	e1a03000 	mov	r3, r0
  10e2b0:	e1a02003 	mov	r2, r3
  10e2b4:	e51b3008 	ldr	r3, [fp, #-8]
  10e2b8:	e5c32004 	strb	r2, [r3, #4]
        break;
  10e2bc:	ea00001c 	b	10e334 <lwip_netconn_do_bind+0x138>
        msg->err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
  10e2c0:	e51b3008 	ldr	r3, [fp, #-8]
  10e2c4:	e5933000 	ldr	r3, [r3]
  10e2c8:	e5930008 	ldr	r0, [r3, #8]
  10e2cc:	e51b3008 	ldr	r3, [fp, #-8]
  10e2d0:	e5931008 	ldr	r1, [r3, #8]
  10e2d4:	e51b3008 	ldr	r3, [fp, #-8]
  10e2d8:	e1d330bc 	ldrh	r3, [r3, #12]
  10e2dc:	e1a02003 	mov	r2, r3
  10e2e0:	eb0068db 	bl	128654 <udp_bind>
  10e2e4:	e1a03000 	mov	r3, r0
  10e2e8:	e1a02003 	mov	r2, r3
  10e2ec:	e51b3008 	ldr	r3, [fp, #-8]
  10e2f0:	e5c32004 	strb	r2, [r3, #4]
        break;
  10e2f4:	ea00000e 	b	10e334 <lwip_netconn_do_bind+0x138>
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
  10e2f8:	e51b3008 	ldr	r3, [fp, #-8]
  10e2fc:	e5933000 	ldr	r3, [r3]
  10e300:	e5930008 	ldr	r0, [r3, #8]
  10e304:	e51b3008 	ldr	r3, [fp, #-8]
  10e308:	e5931008 	ldr	r1, [r3, #8]
  10e30c:	e51b3008 	ldr	r3, [fp, #-8]
  10e310:	e1d330bc 	ldrh	r3, [r3, #12]
  10e314:	e1a02003 	mov	r2, r3
  10e318:	eb003dc7 	bl	11da3c <tcp_bind>
  10e31c:	e1a03000 	mov	r3, r0
  10e320:	e1a02003 	mov	r2, r3
  10e324:	e51b3008 	ldr	r3, [fp, #-8]
  10e328:	e5c32004 	strb	r2, [r3, #4]
        break;
  10e32c:	ea000000 	b	10e334 <lwip_netconn_do_bind+0x138>
      }
    }
  10e330:	e320f000 	nop	{0}
  }
  TCPIP_APIMSG_ACK(msg);
  10e334:	e51b3008 	ldr	r3, [fp, #-8]
  10e338:	e5933000 	ldr	r3, [r3]
  10e33c:	e3530000 	cmp	r3, #0
  10e340:	0a00000b 	beq	10e374 <lwip_netconn_do_bind+0x178>
  10e344:	ebffcfbc 	bl	10223c <rt_enter_critical>
  10e348:	e51b3008 	ldr	r3, [fp, #-8]
  10e34c:	e5933000 	ldr	r3, [r3]
  10e350:	e1d330dc 	ldrsb	r3, [r3, #12]
  10e354:	e373000c 	cmn	r3, #12
  10e358:	ba000004 	blt	10e370 <lwip_netconn_do_bind+0x174>
  10e35c:	e51b3008 	ldr	r3, [fp, #-8]
  10e360:	e5933000 	ldr	r3, [r3]
  10e364:	e51b2008 	ldr	r2, [fp, #-8]
  10e368:	e1d220d4 	ldrsb	r2, [r2, #4]
  10e36c:	e5c3200c 	strb	r2, [r3, #12]
  10e370:	ebffcfb7 	bl	102254 <rt_exit_critical>
}
  10e374:	e320f000 	nop	{0}
  10e378:	e24bd004 	sub	sp, fp, #4
  10e37c:	e8bd8800 	pop	{fp, pc}

0010e380 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
  10e380:	e92d4800 	push	{fp, lr}
  10e384:	e28db004 	add	fp, sp, #4
  10e388:	e24dd020 	sub	sp, sp, #32
  10e38c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10e390:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  10e394:	e1a03002 	mov	r3, r2
  10e398:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  struct netconn *conn;
  int was_blocking;
  sys_sem_t* op_completed_sem = NULL;
  10e39c:	e3a03000 	mov	r3, #0
  10e3a0:	e50b3008 	str	r3, [fp, #-8]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
  10e3a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10e3a8:	e50b300c 	str	r3, [fp, #-12]

  if (conn == NULL) {
  10e3ac:	e51b300c 	ldr	r3, [fp, #-12]
  10e3b0:	e3530000 	cmp	r3, #0
  10e3b4:	1a000001 	bne	10e3c0 <lwip_netconn_do_connected+0x40>
    return ERR_VAL;
  10e3b8:	e3e03005 	mvn	r3, #5
  10e3bc:	ea000074 	b	10e594 <lwip_netconn_do_connected+0x214>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
  10e3c0:	e51b300c 	ldr	r3, [fp, #-12]
  10e3c4:	e5933004 	ldr	r3, [r3, #4]
  10e3c8:	e3530003 	cmp	r3, #3
  10e3cc:	0a000006 	beq	10e3ec <lwip_netconn_do_connected+0x6c>
  10e3d0:	e30609e0 	movw	r0, #27104	; 0x69e0
  10e3d4:	e3400014 	movt	r0, #20
  10e3d8:	ebffd34d 	bl	103114 <rt_kprintf>
  10e3dc:	e3001492 	movw	r1, #1170	; 0x492
  10e3e0:	e30606a0 	movw	r0, #26272	; 0x66a0
  10e3e4:	e3400014 	movt	r0, #20
  10e3e8:	ebfff340 	bl	10b0f0 <sys_arch_assert>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
  10e3ec:	e51b300c 	ldr	r3, [fp, #-12]
  10e3f0:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10e3f4:	e3530000 	cmp	r3, #0
  10e3f8:	1a00000b 	bne	10e42c <lwip_netconn_do_connected+0xac>
  10e3fc:	e51b300c 	ldr	r3, [fp, #-12]
  10e400:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10e404:	e2033004 	and	r3, r3, #4
  10e408:	e3530000 	cmp	r3, #0
  10e40c:	1a000006 	bne	10e42c <lwip_netconn_do_connected+0xac>
  10e410:	e3060a00 	movw	r0, #27136	; 0x6a00
  10e414:	e3400014 	movt	r0, #20
  10e418:	ebffd33d 	bl	103114 <rt_kprintf>
  10e41c:	e3001494 	movw	r1, #1172	; 0x494
  10e420:	e30606a0 	movw	r0, #26272	; 0x66a0
  10e424:	e3400014 	movt	r0, #20
  10e428:	ebfff330 	bl	10b0f0 <sys_arch_assert>
    (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
  10e42c:	e51b300c 	ldr	r3, [fp, #-12]
  10e430:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10e434:	e3530000 	cmp	r3, #0
  10e438:	0a000008 	beq	10e460 <lwip_netconn_do_connected+0xe0>
    conn->current_msg->err = err;
  10e43c:	e51b300c 	ldr	r3, [fp, #-12]
  10e440:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10e444:	e55b201d 	ldrb	r2, [fp, #-29]	; 0xffffffe3
  10e448:	e5c32004 	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
  10e44c:	e51b300c 	ldr	r3, [fp, #-12]
  10e450:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10e454:	e5933000 	ldr	r3, [r3]
  10e458:	e2833010 	add	r3, r3, #16
  10e45c:	e50b3008 	str	r3, [fp, #-8]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
  10e460:	e51b300c 	ldr	r3, [fp, #-12]
  10e464:	e5933000 	ldr	r3, [r3]
  10e468:	e20330f0 	and	r3, r3, #240	; 0xf0
  10e46c:	e3530010 	cmp	r3, #16
  10e470:	1a000004 	bne	10e488 <lwip_netconn_do_connected+0x108>
  10e474:	e15b31dd 	ldrsb	r3, [fp, #-29]	; 0xffffffe3
  10e478:	e3530000 	cmp	r3, #0
  10e47c:	1a000001 	bne	10e488 <lwip_netconn_do_connected+0x108>
    setup_tcp(conn);
  10e480:	e51b000c 	ldr	r0, [fp, #-12]
  10e484:	ebfffabe 	bl	10cf84 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
  10e488:	e51b300c 	ldr	r3, [fp, #-12]
  10e48c:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10e490:	e2033004 	and	r3, r3, #4
  10e494:	e3530000 	cmp	r3, #0
  10e498:	03a03001 	moveq	r3, #1
  10e49c:	13a03000 	movne	r3, #0
  10e4a0:	e6ef3073 	uxtb	r3, r3
  10e4a4:	e50b3010 	str	r3, [fp, #-16]
  SET_NONBLOCKING_CONNECT(conn, 0);
  10e4a8:	e51b300c 	ldr	r3, [fp, #-12]
  10e4ac:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10e4b0:	e3c33004 	bic	r3, r3, #4
  10e4b4:	e6ef2073 	uxtb	r2, r3
  10e4b8:	e51b300c 	ldr	r3, [fp, #-12]
  10e4bc:	e5c32030 	strb	r2, [r3, #48]	; 0x30
  LWIP_ASSERT("blocking connect state error",
  10e4c0:	e51b3010 	ldr	r3, [fp, #-16]
  10e4c4:	e3530000 	cmp	r3, #0
  10e4c8:	0a000002 	beq	10e4d8 <lwip_netconn_do_connected+0x158>
  10e4cc:	e51b3008 	ldr	r3, [fp, #-8]
  10e4d0:	e3530000 	cmp	r3, #0
  10e4d4:	1a00000c 	bne	10e50c <lwip_netconn_do_connected+0x18c>
  10e4d8:	e51b3010 	ldr	r3, [fp, #-16]
  10e4dc:	e3530000 	cmp	r3, #0
  10e4e0:	1a000002 	bne	10e4f0 <lwip_netconn_do_connected+0x170>
  10e4e4:	e51b3008 	ldr	r3, [fp, #-8]
  10e4e8:	e3530000 	cmp	r3, #0
  10e4ec:	0a000006 	beq	10e50c <lwip_netconn_do_connected+0x18c>
  10e4f0:	e3060a40 	movw	r0, #27200	; 0x6a40
  10e4f4:	e3400014 	movt	r0, #20
  10e4f8:	ebffd305 	bl	103114 <rt_kprintf>
  10e4fc:	e30014a1 	movw	r1, #1185	; 0x4a1
  10e500:	e30606a0 	movw	r0, #26272	; 0x66a0
  10e504:	e3400014 	movt	r0, #20
  10e508:	ebfff2f8 	bl	10b0f0 <sys_arch_assert>
    (was_blocking && op_completed_sem != NULL) ||
    (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
  10e50c:	e51b300c 	ldr	r3, [fp, #-12]
  10e510:	e3a02000 	mov	r2, #0
  10e514:	e5832038 	str	r2, [r3, #56]	; 0x38
  conn->state = NETCONN_NONE;
  10e518:	e51b300c 	ldr	r3, [fp, #-12]
  10e51c:	e3a02000 	mov	r2, #0
  10e520:	e5832004 	str	r2, [r3, #4]
  NETCONN_SET_SAFE_ERR(conn, ERR_OK);
  10e524:	e51b300c 	ldr	r3, [fp, #-12]
  10e528:	e3530000 	cmp	r3, #0
  10e52c:	0a000008 	beq	10e554 <lwip_netconn_do_connected+0x1d4>
  10e530:	ebffcf41 	bl	10223c <rt_enter_critical>
  10e534:	e51b300c 	ldr	r3, [fp, #-12]
  10e538:	e1d330dc 	ldrsb	r3, [r3, #12]
  10e53c:	e373000c 	cmn	r3, #12
  10e540:	ba000002 	blt	10e550 <lwip_netconn_do_connected+0x1d0>
  10e544:	e51b300c 	ldr	r3, [fp, #-12]
  10e548:	e3a02000 	mov	r2, #0
  10e54c:	e5c3200c 	strb	r2, [r3, #12]
  10e550:	ebffcf3f 	bl	102254 <rt_exit_critical>
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
  10e554:	e51b300c 	ldr	r3, [fp, #-12]
  10e558:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10e55c:	e3530000 	cmp	r3, #0
  10e560:	0a000005 	beq	10e57c <lwip_netconn_do_connected+0x1fc>
  10e564:	e51b300c 	ldr	r3, [fp, #-12]
  10e568:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10e56c:	e3a02000 	mov	r2, #0
  10e570:	e3a01002 	mov	r1, #2
  10e574:	e51b000c 	ldr	r0, [fp, #-12]
  10e578:	e12fff33 	blx	r3

  if (was_blocking) {
  10e57c:	e51b3010 	ldr	r3, [fp, #-16]
  10e580:	e3530000 	cmp	r3, #0
  10e584:	0a000001 	beq	10e590 <lwip_netconn_do_connected+0x210>
    sys_sem_signal(op_completed_sem);
  10e588:	e51b0008 	ldr	r0, [fp, #-8]
  10e58c:	ebfff0e0 	bl	10a914 <sys_sem_signal>
  }
  return ERR_OK;
  10e590:	e3a03000 	mov	r3, #0
}
  10e594:	e1a00003 	mov	r0, r3
  10e598:	e24bd004 	sub	sp, fp, #4
  10e59c:	e8bd8800 	pop	{fp, pc}

0010e5a0 <lwip_netconn_do_connect>:
 * @param m the api_msg_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
  10e5a0:	e92d4800 	push	{fp, lr}
  10e5a4:	e28db004 	add	fp, sp, #4
  10e5a8:	e24dd010 	sub	sp, sp, #16
  10e5ac:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10e5b0:	e51b3010 	ldr	r3, [fp, #-16]
  10e5b4:	e50b3008 	str	r3, [fp, #-8]

  if (msg->conn->pcb.tcp == NULL) {
  10e5b8:	e51b3008 	ldr	r3, [fp, #-8]
  10e5bc:	e5933000 	ldr	r3, [r3]
  10e5c0:	e5933008 	ldr	r3, [r3, #8]
  10e5c4:	e3530000 	cmp	r3, #0
  10e5c8:	1a000003 	bne	10e5dc <lwip_netconn_do_connect+0x3c>
    /* This may happen when calling netconn_connect() a second time */
    msg->err = ERR_CLSD;
  10e5cc:	e51b3008 	ldr	r3, [fp, #-8]
  10e5d0:	e3e0200e 	mvn	r2, #14
  10e5d4:	e5c32004 	strb	r2, [r3, #4]
  10e5d8:	ea0000aa 	b	10e888 <lwip_netconn_do_connect+0x2e8>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
  10e5dc:	e51b3008 	ldr	r3, [fp, #-8]
  10e5e0:	e5933000 	ldr	r3, [r3]
  10e5e4:	e5933000 	ldr	r3, [r3]
  10e5e8:	e20330f0 	and	r3, r3, #240	; 0xf0
  10e5ec:	e3530020 	cmp	r3, #32
  10e5f0:	0a000011 	beq	10e63c <lwip_netconn_do_connect+0x9c>
  10e5f4:	e3530040 	cmp	r3, #64	; 0x40
  10e5f8:	0a000002 	beq	10e608 <lwip_netconn_do_connect+0x68>
  10e5fc:	e3530010 	cmp	r3, #16
  10e600:	0a00001b 	beq	10e674 <lwip_netconn_do_connect+0xd4>
  10e604:	ea000093 	b	10e858 <lwip_netconn_do_connect+0x2b8>
#if LWIP_RAW
    case NETCONN_RAW:
      msg->err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
  10e608:	e51b3008 	ldr	r3, [fp, #-8]
  10e60c:	e5933000 	ldr	r3, [r3]
  10e610:	e5932008 	ldr	r2, [r3, #8]
  10e614:	e51b3008 	ldr	r3, [fp, #-8]
  10e618:	e5933008 	ldr	r3, [r3, #8]
  10e61c:	e1a01003 	mov	r1, r3
  10e620:	e1a00002 	mov	r0, r2
  10e624:	eb003775 	bl	11c400 <raw_connect>
  10e628:	e1a03000 	mov	r3, r0
  10e62c:	e1a02003 	mov	r2, r3
  10e630:	e51b3008 	ldr	r3, [fp, #-8]
  10e634:	e5c32004 	strb	r2, [r3, #4]
      break;
  10e638:	ea000092 	b	10e888 <lwip_netconn_do_connect+0x2e8>
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
  10e63c:	e51b3008 	ldr	r3, [fp, #-8]
  10e640:	e5933000 	ldr	r3, [r3]
  10e644:	e5930008 	ldr	r0, [r3, #8]
  10e648:	e51b3008 	ldr	r3, [fp, #-8]
  10e64c:	e5931008 	ldr	r1, [r3, #8]
  10e650:	e51b3008 	ldr	r3, [fp, #-8]
  10e654:	e1d330bc 	ldrh	r3, [r3, #12]
  10e658:	e1a02003 	mov	r2, r3
  10e65c:	eb006872 	bl	12882c <udp_connect>
  10e660:	e1a03000 	mov	r3, r0
  10e664:	e1a02003 	mov	r2, r3
  10e668:	e51b3008 	ldr	r3, [fp, #-8]
  10e66c:	e5c32004 	strb	r2, [r3, #4]
      break;
  10e670:	ea000084 	b	10e888 <lwip_netconn_do_connect+0x2e8>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      /* Prevent connect while doing any other action. */
      if (msg->conn->state == NETCONN_CONNECT) {
  10e674:	e51b3008 	ldr	r3, [fp, #-8]
  10e678:	e5933000 	ldr	r3, [r3]
  10e67c:	e5933004 	ldr	r3, [r3, #4]
  10e680:	e3530003 	cmp	r3, #3
  10e684:	1a000003 	bne	10e698 <lwip_netconn_do_connect+0xf8>
        msg->err = ERR_ALREADY;
  10e688:	e51b3008 	ldr	r3, [fp, #-8]
  10e68c:	e3e02008 	mvn	r2, #8
  10e690:	e5c32004 	strb	r2, [r3, #4]
#endif /* LWIP_TCPIP_CORE_LOCKING */
            return;
          }
        }
      }
      break;
  10e694:	ea00007a 	b	10e884 <lwip_netconn_do_connect+0x2e4>
      } else if (msg->conn->state != NETCONN_NONE) {
  10e698:	e51b3008 	ldr	r3, [fp, #-8]
  10e69c:	e5933000 	ldr	r3, [r3]
  10e6a0:	e5933004 	ldr	r3, [r3, #4]
  10e6a4:	e3530000 	cmp	r3, #0
  10e6a8:	0a000003 	beq	10e6bc <lwip_netconn_do_connect+0x11c>
        msg->err = ERR_ISCONN;
  10e6ac:	e51b3008 	ldr	r3, [fp, #-8]
  10e6b0:	e3e02009 	mvn	r2, #9
  10e6b4:	e5c32004 	strb	r2, [r3, #4]
      break;
  10e6b8:	ea000071 	b	10e884 <lwip_netconn_do_connect+0x2e4>
        setup_tcp(msg->conn);
  10e6bc:	e51b3008 	ldr	r3, [fp, #-8]
  10e6c0:	e5933000 	ldr	r3, [r3]
  10e6c4:	e1a00003 	mov	r0, r3
  10e6c8:	ebfffa2d 	bl	10cf84 <setup_tcp>
        msg->err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
  10e6cc:	e51b3008 	ldr	r3, [fp, #-8]
  10e6d0:	e5933000 	ldr	r3, [r3]
  10e6d4:	e5930008 	ldr	r0, [r3, #8]
  10e6d8:	e51b3008 	ldr	r3, [fp, #-8]
  10e6dc:	e5931008 	ldr	r1, [r3, #8]
  10e6e0:	e51b3008 	ldr	r3, [fp, #-8]
  10e6e4:	e1d320bc 	ldrh	r2, [r3, #12]
  10e6e8:	e30e3380 	movw	r3, #58240	; 0xe380
  10e6ec:	e3403010 	movt	r3, #16
  10e6f0:	eb003eff 	bl	11e2f4 <tcp_connect>
  10e6f4:	e1a03000 	mov	r3, r0
  10e6f8:	e1a02003 	mov	r2, r3
  10e6fc:	e51b3008 	ldr	r3, [fp, #-8]
  10e700:	e5c32004 	strb	r2, [r3, #4]
        if (msg->err == ERR_OK) {
  10e704:	e51b3008 	ldr	r3, [fp, #-8]
  10e708:	e1d330d4 	ldrsb	r3, [r3, #4]
  10e70c:	e3530000 	cmp	r3, #0
  10e710:	1a00005b 	bne	10e884 <lwip_netconn_do_connect+0x2e4>
          u8_t non_blocking = netconn_is_nonblocking(msg->conn);
  10e714:	e51b3008 	ldr	r3, [fp, #-8]
  10e718:	e5933000 	ldr	r3, [r3]
  10e71c:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10e720:	e2033002 	and	r3, r3, #2
  10e724:	e3530000 	cmp	r3, #0
  10e728:	13a03001 	movne	r3, #1
  10e72c:	03a03000 	moveq	r3, #0
  10e730:	e6ef3073 	uxtb	r3, r3
  10e734:	e54b3009 	strb	r3, [fp, #-9]
          msg->conn->state = NETCONN_CONNECT;
  10e738:	e51b3008 	ldr	r3, [fp, #-8]
  10e73c:	e5933000 	ldr	r3, [r3]
  10e740:	e3a02003 	mov	r2, #3
  10e744:	e5832004 	str	r2, [r3, #4]
          SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
  10e748:	e55b3009 	ldrb	r3, [fp, #-9]
  10e74c:	e3530000 	cmp	r3, #0
  10e750:	0a000008 	beq	10e778 <lwip_netconn_do_connect+0x1d8>
  10e754:	e51b3008 	ldr	r3, [fp, #-8]
  10e758:	e5933000 	ldr	r3, [r3]
  10e75c:	e5d32030 	ldrb	r2, [r3, #48]	; 0x30
  10e760:	e51b3008 	ldr	r3, [fp, #-8]
  10e764:	e5933000 	ldr	r3, [r3]
  10e768:	e3822004 	orr	r2, r2, #4
  10e76c:	e6ef2072 	uxtb	r2, r2
  10e770:	e5c32030 	strb	r2, [r3, #48]	; 0x30
  10e774:	ea000007 	b	10e798 <lwip_netconn_do_connect+0x1f8>
  10e778:	e51b3008 	ldr	r3, [fp, #-8]
  10e77c:	e5933000 	ldr	r3, [r3]
  10e780:	e5d32030 	ldrb	r2, [r3, #48]	; 0x30
  10e784:	e51b3008 	ldr	r3, [fp, #-8]
  10e788:	e5933000 	ldr	r3, [r3]
  10e78c:	e3c22004 	bic	r2, r2, #4
  10e790:	e6ef2072 	uxtb	r2, r2
  10e794:	e5c32030 	strb	r2, [r3, #48]	; 0x30
          if (non_blocking) {
  10e798:	e55b3009 	ldrb	r3, [fp, #-9]
  10e79c:	e3530000 	cmp	r3, #0
  10e7a0:	0a000003 	beq	10e7b4 <lwip_netconn_do_connect+0x214>
            msg->err = ERR_INPROGRESS;
  10e7a4:	e51b3008 	ldr	r3, [fp, #-8]
  10e7a8:	e3e02004 	mvn	r2, #4
  10e7ac:	e5c32004 	strb	r2, [r3, #4]
      break;
  10e7b0:	ea000033 	b	10e884 <lwip_netconn_do_connect+0x2e4>
            msg->conn->current_msg = msg;
  10e7b4:	e51b3008 	ldr	r3, [fp, #-8]
  10e7b8:	e5933000 	ldr	r3, [r3]
  10e7bc:	e51b2008 	ldr	r2, [fp, #-8]
  10e7c0:	e5832038 	str	r2, [r3, #56]	; 0x38
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
  10e7c4:	e51b3008 	ldr	r3, [fp, #-8]
  10e7c8:	e5933000 	ldr	r3, [r3]
  10e7cc:	e5933004 	ldr	r3, [r3, #4]
  10e7d0:	e3530003 	cmp	r3, #3
  10e7d4:	0a000006 	beq	10e7f4 <lwip_netconn_do_connect+0x254>
  10e7d8:	e30609d8 	movw	r0, #27096	; 0x69d8
  10e7dc:	e3400014 	movt	r0, #20
  10e7e0:	ebffd24b 	bl	103114 <rt_kprintf>
  10e7e4:	e30014df 	movw	r1, #1247	; 0x4df
  10e7e8:	e30606a0 	movw	r0, #26272	; 0x66a0
  10e7ec:	e3400014 	movt	r0, #20
  10e7f0:	ebfff23e 	bl	10b0f0 <sys_arch_assert>
            UNLOCK_TCPIP_CORE();
  10e7f4:	e30f05f4 	movw	r0, #62964	; 0xf5f4
  10e7f8:	e3400014 	movt	r0, #20
  10e7fc:	ebfff0cb 	bl	10ab30 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
  10e800:	e51b3008 	ldr	r3, [fp, #-8]
  10e804:	e5933000 	ldr	r3, [r3]
  10e808:	e2833010 	add	r3, r3, #16
  10e80c:	e3a01000 	mov	r1, #0
  10e810:	e1a00003 	mov	r0, r3
  10e814:	ebfff049 	bl	10a940 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
  10e818:	e30f05f4 	movw	r0, #62964	; 0xf5f4
  10e81c:	e3400014 	movt	r0, #20
  10e820:	ebfff0b6 	bl	10ab00 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
  10e824:	e51b3008 	ldr	r3, [fp, #-8]
  10e828:	e5933000 	ldr	r3, [r3]
  10e82c:	e5933004 	ldr	r3, [r3, #4]
  10e830:	e3530003 	cmp	r3, #3
  10e834:	1a000024 	bne	10e8cc <lwip_netconn_do_connect+0x32c>
  10e838:	e30609d8 	movw	r0, #27096	; 0x69d8
  10e83c:	e3400014 	movt	r0, #20
  10e840:	ebffd233 	bl	103114 <rt_kprintf>
  10e844:	e30014e3 	movw	r1, #1251	; 0x4e3
  10e848:	e30606a0 	movw	r0, #26272	; 0x66a0
  10e84c:	e3400014 	movt	r0, #20
  10e850:	ebfff226 	bl	10b0f0 <sys_arch_assert>
            return;
  10e854:	ea00001c 	b	10e8cc <lwip_netconn_do_connect+0x32c>
#endif /* LWIP_TCP */
    default:
      LWIP_ERROR("Invalid netconn type", 0, do{ msg->err = ERR_VAL; }while(0));
  10e858:	e3060a60 	movw	r0, #27232	; 0x6a60
  10e85c:	e3400014 	movt	r0, #20
  10e860:	ebffd22b 	bl	103114 <rt_kprintf>
  10e864:	e30014ec 	movw	r1, #1260	; 0x4ec
  10e868:	e30606a0 	movw	r0, #26272	; 0x66a0
  10e86c:	e3400014 	movt	r0, #20
  10e870:	ebfff21e 	bl	10b0f0 <sys_arch_assert>
  10e874:	e51b3008 	ldr	r3, [fp, #-8]
  10e878:	e3e02005 	mvn	r2, #5
  10e87c:	e5c32004 	strb	r2, [r3, #4]
      break;
  10e880:	ea000000 	b	10e888 <lwip_netconn_do_connect+0x2e8>
      break;
  10e884:	e320f000 	nop	{0}
    }
  }
  /* For all other protocols, netconn_connect() calls TCPIP_APIMSG(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
  10e888:	e51b3008 	ldr	r3, [fp, #-8]
  10e88c:	e5933000 	ldr	r3, [r3]
  10e890:	e3530000 	cmp	r3, #0
  10e894:	0a00000d 	beq	10e8d0 <lwip_netconn_do_connect+0x330>
  10e898:	ebffce67 	bl	10223c <rt_enter_critical>
  10e89c:	e51b3008 	ldr	r3, [fp, #-8]
  10e8a0:	e5933000 	ldr	r3, [r3]
  10e8a4:	e1d330dc 	ldrsb	r3, [r3, #12]
  10e8a8:	e373000c 	cmn	r3, #12
  10e8ac:	ba000004 	blt	10e8c4 <lwip_netconn_do_connect+0x324>
  10e8b0:	e51b3008 	ldr	r3, [fp, #-8]
  10e8b4:	e5933000 	ldr	r3, [r3]
  10e8b8:	e51b2008 	ldr	r2, [fp, #-8]
  10e8bc:	e1d220d4 	ldrsb	r2, [r2, #4]
  10e8c0:	e5c3200c 	strb	r2, [r3, #12]
  10e8c4:	ebffce62 	bl	102254 <rt_exit_critical>
  10e8c8:	ea000000 	b	10e8d0 <lwip_netconn_do_connect+0x330>
            return;
  10e8cc:	e320f000 	nop	{0}
}
  10e8d0:	e24bd004 	sub	sp, fp, #4
  10e8d4:	e8bd8800 	pop	{fp, pc}

0010e8d8 <lwip_netconn_do_disconnect>:
 *
 * @param m the api_msg_msg pointing to the connection to disconnect
 */
void
lwip_netconn_do_disconnect(void *m)
{
  10e8d8:	e92d4800 	push	{fp, lr}
  10e8dc:	e28db004 	add	fp, sp, #4
  10e8e0:	e24dd010 	sub	sp, sp, #16
  10e8e4:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10e8e8:	e51b3010 	ldr	r3, [fp, #-16]
  10e8ec:	e50b3008 	str	r3, [fp, #-8]

#if LWIP_UDP
  if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
  10e8f0:	e51b3008 	ldr	r3, [fp, #-8]
  10e8f4:	e5933000 	ldr	r3, [r3]
  10e8f8:	e5933000 	ldr	r3, [r3]
  10e8fc:	e20330f0 	and	r3, r3, #240	; 0xf0
  10e900:	e3530020 	cmp	r3, #32
  10e904:	1a000008 	bne	10e92c <lwip_netconn_do_disconnect+0x54>
    udp_disconnect(msg->conn->pcb.udp);
  10e908:	e51b3008 	ldr	r3, [fp, #-8]
  10e90c:	e5933000 	ldr	r3, [r3]
  10e910:	e5933008 	ldr	r3, [r3, #8]
  10e914:	e1a00003 	mov	r0, r3
  10e918:	eb006813 	bl	12896c <udp_disconnect>
    msg->err = ERR_OK;
  10e91c:	e51b3008 	ldr	r3, [fp, #-8]
  10e920:	e3a02000 	mov	r2, #0
  10e924:	e5c32004 	strb	r2, [r3, #4]
  10e928:	ea000002 	b	10e938 <lwip_netconn_do_disconnect+0x60>
  } else
#endif /* LWIP_UDP */
  {
    msg->err = ERR_VAL;
  10e92c:	e51b3008 	ldr	r3, [fp, #-8]
  10e930:	e3e02005 	mvn	r2, #5
  10e934:	e5c32004 	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
  10e938:	e51b3008 	ldr	r3, [fp, #-8]
  10e93c:	e5933000 	ldr	r3, [r3]
  10e940:	e3530000 	cmp	r3, #0
  10e944:	0a00000b 	beq	10e978 <lwip_netconn_do_disconnect+0xa0>
  10e948:	ebffce3b 	bl	10223c <rt_enter_critical>
  10e94c:	e51b3008 	ldr	r3, [fp, #-8]
  10e950:	e5933000 	ldr	r3, [r3]
  10e954:	e1d330dc 	ldrsb	r3, [r3, #12]
  10e958:	e373000c 	cmn	r3, #12
  10e95c:	ba000004 	blt	10e974 <lwip_netconn_do_disconnect+0x9c>
  10e960:	e51b3008 	ldr	r3, [fp, #-8]
  10e964:	e5933000 	ldr	r3, [r3]
  10e968:	e51b2008 	ldr	r2, [fp, #-8]
  10e96c:	e1d220d4 	ldrsb	r2, [r2, #4]
  10e970:	e5c3200c 	strb	r2, [r3, #12]
  10e974:	ebffce36 	bl	102254 <rt_exit_critical>
}
  10e978:	e320f000 	nop	{0}
  10e97c:	e24bd004 	sub	sp, fp, #4
  10e980:	e8bd8800 	pop	{fp, pc}

0010e984 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
  10e984:	e92d4800 	push	{fp, lr}
  10e988:	e28db004 	add	fp, sp, #4
  10e98c:	e24dd018 	sub	sp, sp, #24
  10e990:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct api_msg *msg = (struct api_msg*)m;
  10e994:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10e998:	e50b3008 	str	r3, [fp, #-8]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
  10e99c:	e51b3008 	ldr	r3, [fp, #-8]
  10e9a0:	e5933000 	ldr	r3, [r3]
  10e9a4:	e1d330dc 	ldrsb	r3, [r3, #12]
  10e9a8:	e373000c 	cmn	r3, #12
  10e9ac:	aa000005 	bge	10e9c8 <lwip_netconn_do_listen+0x44>
    msg->err = msg->conn->last_err;
  10e9b0:	e51b3008 	ldr	r3, [fp, #-8]
  10e9b4:	e5933000 	ldr	r3, [r3]
  10e9b8:	e1d320dc 	ldrsb	r2, [r3, #12]
  10e9bc:	e51b3008 	ldr	r3, [fp, #-8]
  10e9c0:	e5c32004 	strb	r2, [r3, #4]
  10e9c4:	ea000083 	b	10ebd8 <lwip_netconn_do_listen+0x254>
  } else {
    msg->err = ERR_CONN;
  10e9c8:	e51b3008 	ldr	r3, [fp, #-8]
  10e9cc:	e3e0200a 	mvn	r2, #10
  10e9d0:	e5c32004 	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
  10e9d4:	e51b3008 	ldr	r3, [fp, #-8]
  10e9d8:	e5933000 	ldr	r3, [r3]
  10e9dc:	e5933008 	ldr	r3, [r3, #8]
  10e9e0:	e3530000 	cmp	r3, #0
  10e9e4:	0a00007b 	beq	10ebd8 <lwip_netconn_do_listen+0x254>
      if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
  10e9e8:	e51b3008 	ldr	r3, [fp, #-8]
  10e9ec:	e5933000 	ldr	r3, [r3]
  10e9f0:	e5933000 	ldr	r3, [r3]
  10e9f4:	e20330f0 	and	r3, r3, #240	; 0xf0
  10e9f8:	e3530010 	cmp	r3, #16
  10e9fc:	1a000072 	bne	10ebcc <lwip_netconn_do_listen+0x248>
        if (msg->conn->state == NETCONN_NONE) {
  10ea00:	e51b3008 	ldr	r3, [fp, #-8]
  10ea04:	e5933000 	ldr	r3, [r3]
  10ea08:	e5933004 	ldr	r3, [r3, #4]
  10ea0c:	e3530000 	cmp	r3, #0
  10ea10:	1a000064 	bne	10eba8 <lwip_netconn_do_listen+0x224>
          struct tcp_pcb* lpcb;
          if (msg->conn->pcb.tcp->state != CLOSED) {
  10ea14:	e51b3008 	ldr	r3, [fp, #-8]
  10ea18:	e5933000 	ldr	r3, [r3]
  10ea1c:	e5933008 	ldr	r3, [r3, #8]
  10ea20:	e5933014 	ldr	r3, [r3, #20]
  10ea24:	e3530000 	cmp	r3, #0
  10ea28:	0a000003 	beq	10ea3c <lwip_netconn_do_listen+0xb8>
            /* connection is not closed, cannot listen */
            msg->err = ERR_VAL;
  10ea2c:	e51b3008 	ldr	r3, [fp, #-8]
  10ea30:	e3e02005 	mvn	r2, #5
  10ea34:	e5c32004 	strb	r2, [r3, #4]
  10ea38:	ea000066 	b	10ebd8 <lwip_netconn_do_listen+0x254>
            err_t err;
            u8_t backlog;
#if TCP_LISTEN_BACKLOG
            backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
            backlog = TCP_DEFAULT_LISTEN_BACKLOG;
  10ea3c:	e3e03000 	mvn	r3, #0
  10ea40:	e54b3009 	strb	r3, [fp, #-9]
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
            }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

            lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
  10ea44:	e51b3008 	ldr	r3, [fp, #-8]
  10ea48:	e5933000 	ldr	r3, [r3]
  10ea4c:	e5933008 	ldr	r3, [r3, #8]
  10ea50:	e24b2011 	sub	r2, fp, #17
  10ea54:	e55b1009 	ldrb	r1, [fp, #-9]
  10ea58:	e1a00003 	mov	r0, r3
  10ea5c:	eb003ca5 	bl	11dcf8 <tcp_listen_with_backlog_and_err>
  10ea60:	e50b0010 	str	r0, [fp, #-16]

            if (lpcb == NULL) {
  10ea64:	e51b3010 	ldr	r3, [fp, #-16]
  10ea68:	e3530000 	cmp	r3, #0
  10ea6c:	1a000003 	bne	10ea80 <lwip_netconn_do_listen+0xfc>
              /* in this case, the old pcb is still allocated */
              msg->err = err;
  10ea70:	e15b21d1 	ldrsb	r2, [fp, #-17]	; 0xffffffef
  10ea74:	e51b3008 	ldr	r3, [fp, #-8]
  10ea78:	e5c32004 	strb	r2, [r3, #4]
  10ea7c:	ea000055 	b	10ebd8 <lwip_netconn_do_listen+0x254>
            } else {
              /* delete the recvmbox and allocate the acceptmbox */
              if (sys_mbox_valid(&msg->conn->recvmbox)) {
  10ea80:	e51b3008 	ldr	r3, [fp, #-8]
  10ea84:	e5933000 	ldr	r3, [r3]
  10ea88:	e2833014 	add	r3, r3, #20
  10ea8c:	e1a00003 	mov	r0, r3
  10ea90:	ebfff14d 	bl	10afcc <sys_mbox_valid>
  10ea94:	e1a03000 	mov	r3, r0
  10ea98:	e3530000 	cmp	r3, #0
  10ea9c:	0a000009 	beq	10eac8 <lwip_netconn_do_listen+0x144>
                /** @todo: should we drain the recvmbox here? */
                sys_mbox_free(&msg->conn->recvmbox);
  10eaa0:	e51b3008 	ldr	r3, [fp, #-8]
  10eaa4:	e5933000 	ldr	r3, [r3]
  10eaa8:	e2833014 	add	r3, r3, #20
  10eaac:	e1a00003 	mov	r0, r3
  10eab0:	ebfff07e 	bl	10acb0 <sys_mbox_free>
                sys_mbox_set_invalid(&msg->conn->recvmbox);
  10eab4:	e51b3008 	ldr	r3, [fp, #-8]
  10eab8:	e5933000 	ldr	r3, [r3]
  10eabc:	e2833014 	add	r3, r3, #20
  10eac0:	e1a00003 	mov	r0, r3
  10eac4:	ebfff14a 	bl	10aff4 <sys_mbox_set_invalid>
              }
              msg->err = ERR_OK;
  10eac8:	e51b3008 	ldr	r3, [fp, #-8]
  10eacc:	e3a02000 	mov	r2, #0
  10ead0:	e5c32004 	strb	r2, [r3, #4]
              if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
  10ead4:	e51b3008 	ldr	r3, [fp, #-8]
  10ead8:	e5933000 	ldr	r3, [r3]
  10eadc:	e2833018 	add	r3, r3, #24
  10eae0:	e1a00003 	mov	r0, r3
  10eae4:	ebfff138 	bl	10afcc <sys_mbox_valid>
  10eae8:	e1a03000 	mov	r3, r0
  10eaec:	e3530000 	cmp	r3, #0
  10eaf0:	1a000009 	bne	10eb1c <lwip_netconn_do_listen+0x198>
                msg->err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
  10eaf4:	e51b3008 	ldr	r3, [fp, #-8]
  10eaf8:	e5933000 	ldr	r3, [r3]
  10eafc:	e2833018 	add	r3, r3, #24
  10eb00:	e3a0100a 	mov	r1, #10
  10eb04:	e1a00003 	mov	r0, r3
  10eb08:	ebfff033 	bl	10abdc <sys_mbox_new>
  10eb0c:	e1a03000 	mov	r3, r0
  10eb10:	e1a02003 	mov	r2, r3
  10eb14:	e51b3008 	ldr	r3, [fp, #-8]
  10eb18:	e5c32004 	strb	r2, [r3, #4]
              }
              if (msg->err == ERR_OK) {
  10eb1c:	e51b3008 	ldr	r3, [fp, #-8]
  10eb20:	e1d330d4 	ldrsb	r3, [r3, #4]
  10eb24:	e3530000 	cmp	r3, #0
  10eb28:	1a000017 	bne	10eb8c <lwip_netconn_do_listen+0x208>
                msg->conn->state = NETCONN_LISTEN;
  10eb2c:	e51b3008 	ldr	r3, [fp, #-8]
  10eb30:	e5933000 	ldr	r3, [r3]
  10eb34:	e3a02002 	mov	r2, #2
  10eb38:	e5832004 	str	r2, [r3, #4]
                msg->conn->pcb.tcp = lpcb;
  10eb3c:	e51b3008 	ldr	r3, [fp, #-8]
  10eb40:	e5933000 	ldr	r3, [r3]
  10eb44:	e51b2010 	ldr	r2, [fp, #-16]
  10eb48:	e5832008 	str	r2, [r3, #8]
                tcp_arg(msg->conn->pcb.tcp, msg->conn);
  10eb4c:	e51b3008 	ldr	r3, [fp, #-8]
  10eb50:	e5933000 	ldr	r3, [r3]
  10eb54:	e5932008 	ldr	r2, [r3, #8]
  10eb58:	e51b3008 	ldr	r3, [fp, #-8]
  10eb5c:	e5933000 	ldr	r3, [r3]
  10eb60:	e1a01003 	mov	r1, r3
  10eb64:	e1a00002 	mov	r0, r2
  10eb68:	eb0043ff 	bl	11fb6c <tcp_arg>
                tcp_accept(msg->conn->pcb.tcp, accept_function);
  10eb6c:	e51b3008 	ldr	r3, [fp, #-8]
  10eb70:	e5933000 	ldr	r3, [r3]
  10eb74:	e5933008 	ldr	r3, [r3, #8]
  10eb78:	e30c1ffc 	movw	r1, #53244	; 0xcffc
  10eb7c:	e3401010 	movt	r1, #16
  10eb80:	e1a00003 	mov	r0, r3
  10eb84:	eb004452 	bl	11fcd4 <tcp_accept>
  10eb88:	ea000012 	b	10ebd8 <lwip_netconn_do_listen+0x254>
              } else {
                /* since the old pcb is already deallocated, free lpcb now */
                tcp_close(lpcb);
  10eb8c:	e51b0010 	ldr	r0, [fp, #-16]
  10eb90:	eb003aab 	bl	11d644 <tcp_close>
                msg->conn->pcb.tcp = NULL;
  10eb94:	e51b3008 	ldr	r3, [fp, #-8]
  10eb98:	e5933000 	ldr	r3, [r3]
  10eb9c:	e3a02000 	mov	r2, #0
  10eba0:	e5832008 	str	r2, [r3, #8]
  10eba4:	ea00000b 	b	10ebd8 <lwip_netconn_do_listen+0x254>
              }
            }
          }
        } else if (msg->conn->state == NETCONN_LISTEN) {
  10eba8:	e51b3008 	ldr	r3, [fp, #-8]
  10ebac:	e5933000 	ldr	r3, [r3]
  10ebb0:	e5933004 	ldr	r3, [r3, #4]
  10ebb4:	e3530002 	cmp	r3, #2
  10ebb8:	1a000006 	bne	10ebd8 <lwip_netconn_do_listen+0x254>
          /* already listening, allow updating of the backlog */
          msg->err = ERR_OK;
  10ebbc:	e51b3008 	ldr	r3, [fp, #-8]
  10ebc0:	e3a02000 	mov	r2, #0
  10ebc4:	e5c32004 	strb	r2, [r3, #4]
  10ebc8:	ea000002 	b	10ebd8 <lwip_netconn_do_listen+0x254>
          tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
        }
      } else {
        msg->err = ERR_ARG;
  10ebcc:	e51b3008 	ldr	r3, [fp, #-8]
  10ebd0:	e3e0200f 	mvn	r2, #15
  10ebd4:	e5c32004 	strb	r2, [r3, #4]
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
  10ebd8:	e51b3008 	ldr	r3, [fp, #-8]
  10ebdc:	e5933000 	ldr	r3, [r3]
  10ebe0:	e3530000 	cmp	r3, #0
  10ebe4:	0a00000b 	beq	10ec18 <lwip_netconn_do_listen+0x294>
  10ebe8:	ebffcd93 	bl	10223c <rt_enter_critical>
  10ebec:	e51b3008 	ldr	r3, [fp, #-8]
  10ebf0:	e5933000 	ldr	r3, [r3]
  10ebf4:	e1d330dc 	ldrsb	r3, [r3, #12]
  10ebf8:	e373000c 	cmn	r3, #12
  10ebfc:	ba000004 	blt	10ec14 <lwip_netconn_do_listen+0x290>
  10ec00:	e51b3008 	ldr	r3, [fp, #-8]
  10ec04:	e5933000 	ldr	r3, [r3]
  10ec08:	e51b2008 	ldr	r2, [fp, #-8]
  10ec0c:	e1d220d4 	ldrsb	r2, [r2, #4]
  10ec10:	e5c3200c 	strb	r2, [r3, #12]
  10ec14:	ebffcd8e 	bl	102254 <rt_exit_critical>
}
  10ec18:	e320f000 	nop	{0}
  10ec1c:	e24bd004 	sub	sp, fp, #4
  10ec20:	e8bd8800 	pop	{fp, pc}

0010ec24 <lwip_netconn_do_send>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
  10ec24:	e92d4800 	push	{fp, lr}
  10ec28:	e28db004 	add	fp, sp, #4
  10ec2c:	e24dd010 	sub	sp, sp, #16
  10ec30:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10ec34:	e51b3010 	ldr	r3, [fp, #-16]
  10ec38:	e50b3008 	str	r3, [fp, #-8]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
  10ec3c:	e51b3008 	ldr	r3, [fp, #-8]
  10ec40:	e5933000 	ldr	r3, [r3]
  10ec44:	e1d330dc 	ldrsb	r3, [r3, #12]
  10ec48:	e373000c 	cmn	r3, #12
  10ec4c:	aa000005 	bge	10ec68 <lwip_netconn_do_send+0x44>
    msg->err = msg->conn->last_err;
  10ec50:	e51b3008 	ldr	r3, [fp, #-8]
  10ec54:	e5933000 	ldr	r3, [r3]
  10ec58:	e1d320dc 	ldrsb	r2, [r3, #12]
  10ec5c:	e51b3008 	ldr	r3, [fp, #-8]
  10ec60:	e5c32004 	strb	r2, [r3, #4]
  10ec64:	ea00005e 	b	10ede4 <lwip_netconn_do_send+0x1c0>
  } else {
    msg->err = ERR_CONN;
  10ec68:	e51b3008 	ldr	r3, [fp, #-8]
  10ec6c:	e3e0200a 	mvn	r2, #10
  10ec70:	e5c32004 	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
  10ec74:	e51b3008 	ldr	r3, [fp, #-8]
  10ec78:	e5933000 	ldr	r3, [r3]
  10ec7c:	e5933008 	ldr	r3, [r3, #8]
  10ec80:	e3530000 	cmp	r3, #0
  10ec84:	0a000055 	beq	10ede0 <lwip_netconn_do_send+0x1bc>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
  10ec88:	e51b3008 	ldr	r3, [fp, #-8]
  10ec8c:	e5933000 	ldr	r3, [r3]
  10ec90:	e5933000 	ldr	r3, [r3]
  10ec94:	e20330f0 	and	r3, r3, #240	; 0xf0
  10ec98:	e3530020 	cmp	r3, #32
  10ec9c:	0a00002a 	beq	10ed4c <lwip_netconn_do_send+0x128>
  10eca0:	e3530040 	cmp	r3, #64	; 0x40
  10eca4:	0a000000 	beq	10ecac <lwip_netconn_do_send+0x88>
        }
#endif /* LWIP_CHECKSUM_ON_COPY */
        break;
#endif /* LWIP_UDP */
      default:
        break;
  10eca8:	ea00004d 	b	10ede4 <lwip_netconn_do_send+0x1c0>
        if (ip_addr_isany(&msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
  10ecac:	e51b3008 	ldr	r3, [fp, #-8]
  10ecb0:	e5933008 	ldr	r3, [r3, #8]
  10ecb4:	e2833008 	add	r3, r3, #8
  10ecb8:	e3530000 	cmp	r3, #0
  10ecbc:	0a000004 	beq	10ecd4 <lwip_netconn_do_send+0xb0>
  10ecc0:	e51b3008 	ldr	r3, [fp, #-8]
  10ecc4:	e5933008 	ldr	r3, [r3, #8]
  10ecc8:	e5933008 	ldr	r3, [r3, #8]
  10eccc:	e3530000 	cmp	r3, #0
  10ecd0:	1a00000d 	bne	10ed0c <lwip_netconn_do_send+0xe8>
          msg->err = raw_send(msg->conn->pcb.raw, msg->msg.b->p);
  10ecd4:	e51b3008 	ldr	r3, [fp, #-8]
  10ecd8:	e5933000 	ldr	r3, [r3]
  10ecdc:	e5932008 	ldr	r2, [r3, #8]
  10ece0:	e51b3008 	ldr	r3, [fp, #-8]
  10ece4:	e5933008 	ldr	r3, [r3, #8]
  10ece8:	e5933000 	ldr	r3, [r3]
  10ecec:	e1a01003 	mov	r1, r3
  10ecf0:	e1a00002 	mov	r0, r2
  10ecf4:	eb00367a 	bl	11c6e4 <raw_send>
  10ecf8:	e1a03000 	mov	r3, r0
  10ecfc:	e1a02003 	mov	r2, r3
  10ed00:	e51b3008 	ldr	r3, [fp, #-8]
  10ed04:	e5c32004 	strb	r2, [r3, #4]
        break;
  10ed08:	ea000035 	b	10ede4 <lwip_netconn_do_send+0x1c0>
          msg->err = raw_sendto(msg->conn->pcb.raw, msg->msg.b->p, &msg->msg.b->addr);
  10ed0c:	e51b3008 	ldr	r3, [fp, #-8]
  10ed10:	e5933000 	ldr	r3, [r3]
  10ed14:	e5930008 	ldr	r0, [r3, #8]
  10ed18:	e51b3008 	ldr	r3, [fp, #-8]
  10ed1c:	e5933008 	ldr	r3, [r3, #8]
  10ed20:	e5931000 	ldr	r1, [r3]
  10ed24:	e51b3008 	ldr	r3, [fp, #-8]
  10ed28:	e5933008 	ldr	r3, [r3, #8]
  10ed2c:	e2833008 	add	r3, r3, #8
  10ed30:	e1a02003 	mov	r2, r3
  10ed34:	eb0035dc 	bl	11c4ac <raw_sendto>
  10ed38:	e1a03000 	mov	r3, r0
  10ed3c:	e1a02003 	mov	r2, r3
  10ed40:	e51b3008 	ldr	r3, [fp, #-8]
  10ed44:	e5c32004 	strb	r2, [r3, #4]
        break;
  10ed48:	ea000025 	b	10ede4 <lwip_netconn_do_send+0x1c0>
        if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
  10ed4c:	e51b3008 	ldr	r3, [fp, #-8]
  10ed50:	e5933008 	ldr	r3, [r3, #8]
  10ed54:	e5933008 	ldr	r3, [r3, #8]
  10ed58:	e3530000 	cmp	r3, #0
  10ed5c:	1a00000d 	bne	10ed98 <lwip_netconn_do_send+0x174>
          msg->err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
  10ed60:	e51b3008 	ldr	r3, [fp, #-8]
  10ed64:	e5933000 	ldr	r3, [r3]
  10ed68:	e5932008 	ldr	r2, [r3, #8]
  10ed6c:	e51b3008 	ldr	r3, [fp, #-8]
  10ed70:	e5933008 	ldr	r3, [r3, #8]
  10ed74:	e5933000 	ldr	r3, [r3]
  10ed78:	e1a01003 	mov	r1, r3
  10ed7c:	e1a00002 	mov	r0, r2
  10ed80:	eb0064d5 	bl	1280dc <udp_send>
  10ed84:	e1a03000 	mov	r3, r0
  10ed88:	e1a02003 	mov	r2, r3
  10ed8c:	e51b3008 	ldr	r3, [fp, #-8]
  10ed90:	e5c32004 	strb	r2, [r3, #4]
        break;
  10ed94:	ea000012 	b	10ede4 <lwip_netconn_do_send+0x1c0>
          msg->err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
  10ed98:	e51b3008 	ldr	r3, [fp, #-8]
  10ed9c:	e5933000 	ldr	r3, [r3]
  10eda0:	e5930008 	ldr	r0, [r3, #8]
  10eda4:	e51b3008 	ldr	r3, [fp, #-8]
  10eda8:	e5933008 	ldr	r3, [r3, #8]
  10edac:	e5931000 	ldr	r1, [r3]
  10edb0:	e51b3008 	ldr	r3, [fp, #-8]
  10edb4:	e5933008 	ldr	r3, [r3, #8]
  10edb8:	e2832008 	add	r2, r3, #8
  10edbc:	e51b3008 	ldr	r3, [fp, #-8]
  10edc0:	e5933008 	ldr	r3, [r3, #8]
  10edc4:	e1d330bc 	ldrh	r3, [r3, #12]
  10edc8:	eb0064d8 	bl	128130 <udp_sendto>
  10edcc:	e1a03000 	mov	r3, r0
  10edd0:	e1a02003 	mov	r2, r3
  10edd4:	e51b3008 	ldr	r3, [fp, #-8]
  10edd8:	e5c32004 	strb	r2, [r3, #4]
        break;
  10eddc:	ea000000 	b	10ede4 <lwip_netconn_do_send+0x1c0>
      }
    }
  10ede0:	e320f000 	nop	{0}
  }
  TCPIP_APIMSG_ACK(msg);
  10ede4:	e51b3008 	ldr	r3, [fp, #-8]
  10ede8:	e5933000 	ldr	r3, [r3]
  10edec:	e3530000 	cmp	r3, #0
  10edf0:	0a00000b 	beq	10ee24 <lwip_netconn_do_send+0x200>
  10edf4:	ebffcd10 	bl	10223c <rt_enter_critical>
  10edf8:	e51b3008 	ldr	r3, [fp, #-8]
  10edfc:	e5933000 	ldr	r3, [r3]
  10ee00:	e1d330dc 	ldrsb	r3, [r3, #12]
  10ee04:	e373000c 	cmn	r3, #12
  10ee08:	ba000004 	blt	10ee20 <lwip_netconn_do_send+0x1fc>
  10ee0c:	e51b3008 	ldr	r3, [fp, #-8]
  10ee10:	e5933000 	ldr	r3, [r3]
  10ee14:	e51b2008 	ldr	r2, [fp, #-8]
  10ee18:	e1d220d4 	ldrsb	r2, [r2, #4]
  10ee1c:	e5c3200c 	strb	r2, [r3, #12]
  10ee20:	ebffcd0b 	bl	102254 <rt_exit_critical>
}
  10ee24:	e320f000 	nop	{0}
  10ee28:	e24bd004 	sub	sp, fp, #4
  10ee2c:	e8bd8800 	pop	{fp, pc}

0010ee30 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
  10ee30:	e92d4800 	push	{fp, lr}
  10ee34:	e28db004 	add	fp, sp, #4
  10ee38:	e24dd018 	sub	sp, sp, #24
  10ee3c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct api_msg *msg = (struct api_msg*)m;
  10ee40:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10ee44:	e50b300c 	str	r3, [fp, #-12]

  msg->err = ERR_OK;
  10ee48:	e51b300c 	ldr	r3, [fp, #-12]
  10ee4c:	e3a02000 	mov	r2, #0
  10ee50:	e5c32004 	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
  10ee54:	e51b300c 	ldr	r3, [fp, #-12]
  10ee58:	e5933000 	ldr	r3, [r3]
  10ee5c:	e5933008 	ldr	r3, [r3, #8]
  10ee60:	e3530000 	cmp	r3, #0
  10ee64:	0a00001e 	beq	10eee4 <lwip_netconn_do_recv+0xb4>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
  10ee68:	e51b300c 	ldr	r3, [fp, #-12]
  10ee6c:	e5933000 	ldr	r3, [r3]
  10ee70:	e5933000 	ldr	r3, [r3]
  10ee74:	e20330f0 	and	r3, r3, #240	; 0xf0
  10ee78:	e3530010 	cmp	r3, #16
  10ee7c:	1a000018 	bne	10eee4 <lwip_netconn_do_recv+0xb4>
      u32_t remaining = msg->msg.r.len;
  10ee80:	e51b300c 	ldr	r3, [fp, #-12]
  10ee84:	e5933008 	ldr	r3, [r3, #8]
  10ee88:	e50b3008 	str	r3, [fp, #-8]
      do {
        u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
  10ee8c:	e51b3008 	ldr	r3, [fp, #-8]
  10ee90:	e3530801 	cmp	r3, #65536	; 0x10000
  10ee94:	2a000002 	bcs	10eea4 <lwip_netconn_do_recv+0x74>
  10ee98:	e51b3008 	ldr	r3, [fp, #-8]
  10ee9c:	e6ff3073 	uxth	r3, r3
  10eea0:	ea000000 	b	10eea8 <lwip_netconn_do_recv+0x78>
  10eea4:	e30f3fff 	movw	r3, #65535	; 0xffff
  10eea8:	e14b30be 	strh	r3, [fp, #-14]
        tcp_recved(msg->conn->pcb.tcp, recved);
  10eeac:	e51b300c 	ldr	r3, [fp, #-12]
  10eeb0:	e5933000 	ldr	r3, [r3]
  10eeb4:	e5933008 	ldr	r3, [r3, #8]
  10eeb8:	e15b20be 	ldrh	r2, [fp, #-14]
  10eebc:	e1a01002 	mov	r1, r2
  10eec0:	e1a00003 	mov	r0, r3
  10eec4:	eb003c81 	bl	11e0d0 <tcp_recved>
        remaining -= recved;
  10eec8:	e15b30be 	ldrh	r3, [fp, #-14]
  10eecc:	e51b2008 	ldr	r2, [fp, #-8]
  10eed0:	e0423003 	sub	r3, r2, r3
  10eed4:	e50b3008 	str	r3, [fp, #-8]
      } while (remaining != 0);
  10eed8:	e51b3008 	ldr	r3, [fp, #-8]
  10eedc:	e3530000 	cmp	r3, #0
  10eee0:	1affffe9 	bne	10ee8c <lwip_netconn_do_recv+0x5c>
    }
  }
  TCPIP_APIMSG_ACK(msg);
  10eee4:	e51b300c 	ldr	r3, [fp, #-12]
  10eee8:	e5933000 	ldr	r3, [r3]
  10eeec:	e3530000 	cmp	r3, #0
  10eef0:	0a00000b 	beq	10ef24 <lwip_netconn_do_recv+0xf4>
  10eef4:	ebffccd0 	bl	10223c <rt_enter_critical>
  10eef8:	e51b300c 	ldr	r3, [fp, #-12]
  10eefc:	e5933000 	ldr	r3, [r3]
  10ef00:	e1d330dc 	ldrsb	r3, [r3, #12]
  10ef04:	e373000c 	cmn	r3, #12
  10ef08:	ba000004 	blt	10ef20 <lwip_netconn_do_recv+0xf0>
  10ef0c:	e51b300c 	ldr	r3, [fp, #-12]
  10ef10:	e5933000 	ldr	r3, [r3]
  10ef14:	e51b200c 	ldr	r2, [fp, #-12]
  10ef18:	e1d220d4 	ldrsb	r2, [r2, #4]
  10ef1c:	e5c3200c 	strb	r2, [r3, #12]
  10ef20:	ebffcccb 	bl	102254 <rt_exit_critical>
}
  10ef24:	e320f000 	nop	{0}
  10ef28:	e24bd004 	sub	sp, fp, #4
  10ef2c:	e8bd8800 	pop	{fp, pc}

0010ef30 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
  10ef30:	e92d4800 	push	{fp, lr}
  10ef34:	e28db004 	add	fp, sp, #4
  10ef38:	e24dd020 	sub	sp, sp, #32
  10ef3c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  10ef40:	e1a03001 	mov	r3, r1
  10ef44:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
  10ef48:	e3a03000 	mov	r3, #0
  10ef4c:	e54b3009 	strb	r3, [fp, #-9]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;

  LWIP_ASSERT("conn != NULL", conn != NULL);
  10ef50:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ef54:	e3530000 	cmp	r3, #0
  10ef58:	1a000006 	bne	10ef78 <lwip_netconn_do_writemore+0x48>
  10ef5c:	e3060798 	movw	r0, #26520	; 0x6798
  10ef60:	e3400014 	movt	r0, #20
  10ef64:	ebffd06a 	bl	103114 <rt_kprintf>
  10ef68:	e30015dd 	movw	r1, #1501	; 0x5dd
  10ef6c:	e30606a0 	movw	r0, #26272	; 0x66a0
  10ef70:	e3400014 	movt	r0, #20
  10ef74:	ebfff05d 	bl	10b0f0 <sys_arch_assert>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
  10ef78:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ef7c:	e5933004 	ldr	r3, [r3, #4]
  10ef80:	e3530001 	cmp	r3, #1
  10ef84:	0a000006 	beq	10efa4 <lwip_netconn_do_writemore+0x74>
  10ef88:	e3060a78 	movw	r0, #27256	; 0x6a78
  10ef8c:	e3400014 	movt	r0, #20
  10ef90:	ebffd05f 	bl	103114 <rt_kprintf>
  10ef94:	e30015de 	movw	r1, #1502	; 0x5de
  10ef98:	e30606a0 	movw	r0, #26272	; 0x66a0
  10ef9c:	e3400014 	movt	r0, #20
  10efa0:	ebfff052 	bl	10b0f0 <sys_arch_assert>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
  10efa4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10efa8:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10efac:	e3530000 	cmp	r3, #0
  10efb0:	1a000006 	bne	10efd0 <lwip_netconn_do_writemore+0xa0>
  10efb4:	e30607a8 	movw	r0, #26536	; 0x67a8
  10efb8:	e3400014 	movt	r0, #20
  10efbc:	ebffd054 	bl	103114 <rt_kprintf>
  10efc0:	e30015df 	movw	r1, #1503	; 0x5df
  10efc4:	e30606a0 	movw	r0, #26272	; 0x66a0
  10efc8:	e3400014 	movt	r0, #20
  10efcc:	ebfff047 	bl	10b0f0 <sys_arch_assert>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
  10efd0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10efd4:	e5933008 	ldr	r3, [r3, #8]
  10efd8:	e3530000 	cmp	r3, #0
  10efdc:	1a000006 	bne	10effc <lwip_netconn_do_writemore+0xcc>
  10efe0:	e3060a98 	movw	r0, #27288	; 0x6a98
  10efe4:	e3400014 	movt	r0, #20
  10efe8:	ebffd049 	bl	103114 <rt_kprintf>
  10efec:	e3a01e5e 	mov	r1, #1504	; 0x5e0
  10eff0:	e30606a0 	movw	r0, #26272	; 0x66a0
  10eff4:	e3400014 	movt	r0, #20
  10eff8:	ebfff03c 	bl	10b0f0 <sys_arch_assert>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
  10effc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f000:	e5932034 	ldr	r2, [r3, #52]	; 0x34
  10f004:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f008:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f00c:	e593300c 	ldr	r3, [r3, #12]
  10f010:	e1520003 	cmp	r2, r3
  10f014:	3a000006 	bcc	10f034 <lwip_netconn_do_writemore+0x104>
  10f018:	e3060ab0 	movw	r0, #27312	; 0x6ab0
  10f01c:	e3400014 	movt	r0, #20
  10f020:	ebffd03b 	bl	103114 <rt_kprintf>
  10f024:	e30015e2 	movw	r1, #1506	; 0x5e2
  10f028:	e30606a0 	movw	r0, #26272	; 0x66a0
  10f02c:	e3400014 	movt	r0, #20
  10f030:	ebfff02e 	bl	10b0f0 <sys_arch_assert>
    conn->write_offset < conn->current_msg->msg.w.len);

  apiflags = conn->current_msg->msg.w.apiflags;
  10f034:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f038:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f03c:	e5d33010 	ldrb	r3, [r3, #16]
  10f040:	e54b300a 	strb	r3, [fp, #-10]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
  10f044:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f048:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10f04c:	e2033002 	and	r3, r3, #2
  10f050:	e3530000 	cmp	r3, #0
  10f054:	1a000003 	bne	10f068 <lwip_netconn_do_writemore+0x138>
  10f058:	e55b300a 	ldrb	r3, [fp, #-10]
  10f05c:	e2033004 	and	r3, r3, #4
  10f060:	e3530000 	cmp	r3, #0
  10f064:	0a000001 	beq	10f070 <lwip_netconn_do_writemore+0x140>
  10f068:	e3a03001 	mov	r3, #1
  10f06c:	ea000000 	b	10f074 <lwip_netconn_do_writemore+0x144>
  10f070:	e3a03000 	mov	r3, #0
  10f074:	e54b300b 	strb	r3, [fp, #-11]

#if LWIP_SO_SNDTIMEO
  if ((conn->send_timeout != 0) &&
  10f078:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f07c:	e5933020 	ldr	r3, [r3, #32]
  10f080:	e3530000 	cmp	r3, #0
  10f084:	0a000022 	beq	10f114 <lwip_netconn_do_writemore+0x1e4>
      ((s32_t)(sys_now() - conn->current_msg->msg.w.time_started) >= conn->send_timeout)) {
  10f088:	ebfff031 	bl	10b154 <sys_now>
  10f08c:	e1a02000 	mov	r2, r0
  10f090:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f094:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f098:	e5933014 	ldr	r3, [r3, #20]
  10f09c:	e0423003 	sub	r3, r2, r3
  10f0a0:	e1a02003 	mov	r2, r3
  10f0a4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f0a8:	e5933020 	ldr	r3, [r3, #32]
  if ((conn->send_timeout != 0) &&
  10f0ac:	e1520003 	cmp	r2, r3
  10f0b0:	ba000017 	blt	10f114 <lwip_netconn_do_writemore+0x1e4>
    write_finished = 1;
  10f0b4:	e3a03001 	mov	r3, #1
  10f0b8:	e54b3009 	strb	r3, [fp, #-9]
    if (conn->write_offset == 0) {
  10f0bc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f0c0:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10f0c4:	e3530000 	cmp	r3, #0
  10f0c8:	1a000006 	bne	10f0e8 <lwip_netconn_do_writemore+0x1b8>
      /* nothing has been written */
      err = ERR_WOULDBLOCK;
  10f0cc:	e3e03006 	mvn	r3, #6
  10f0d0:	e54b3005 	strb	r3, [fp, #-5]
      conn->current_msg->msg.w.len = 0;
  10f0d4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f0d8:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f0dc:	e3a02000 	mov	r2, #0
  10f0e0:	e583200c 	str	r2, [r3, #12]
    if (conn->write_offset == 0) {
  10f0e4:	ea0000df 	b	10f468 <lwip_netconn_do_writemore+0x538>
    } else {
      /* partial write */
      err = ERR_OK;
  10f0e8:	e3a03000 	mov	r3, #0
  10f0ec:	e54b3005 	strb	r3, [fp, #-5]
      conn->current_msg->msg.w.len = conn->write_offset;
  10f0f0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f0f4:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f0f8:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  10f0fc:	e5922034 	ldr	r2, [r2, #52]	; 0x34
  10f100:	e583200c 	str	r2, [r3, #12]
      conn->write_offset = 0;
  10f104:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f108:	e3a02000 	mov	r2, #0
  10f10c:	e5832034 	str	r2, [r3, #52]	; 0x34
    if (conn->write_offset == 0) {
  10f110:	ea0000d4 	b	10f468 <lwip_netconn_do_writemore+0x538>
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
  10f114:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f118:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f11c:	e5932008 	ldr	r2, [r3, #8]
  10f120:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f124:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10f128:	e0823003 	add	r3, r2, r3
  10f12c:	e50b3010 	str	r3, [fp, #-16]
    diff = conn->current_msg->msg.w.len - conn->write_offset;
  10f130:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f134:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f138:	e593200c 	ldr	r2, [r3, #12]
  10f13c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f140:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10f144:	e0423003 	sub	r3, r2, r3
  10f148:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    if (diff > 0xffffUL) { /* max_u16_t */
  10f14c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10f150:	e3530801 	cmp	r3, #65536	; 0x10000
  10f154:	3a000005 	bcc	10f170 <lwip_netconn_do_writemore+0x240>
      len = 0xffff;
  10f158:	e3e03000 	mvn	r3, #0
  10f15c:	e14b30b8 	strh	r3, [fp, #-8]
      apiflags |= TCP_WRITE_FLAG_MORE;
  10f160:	e55b300a 	ldrb	r3, [fp, #-10]
  10f164:	e3833002 	orr	r3, r3, #2
  10f168:	e54b300a 	strb	r3, [fp, #-10]
  10f16c:	ea000001 	b	10f178 <lwip_netconn_do_writemore+0x248>
    } else {
      len = (u16_t)diff;
  10f170:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10f174:	e14b30b8 	strh	r3, [fp, #-8]
    }
    available = tcp_sndbuf(conn->pcb.tcp);
  10f178:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f17c:	e5933008 	ldr	r3, [r3, #8]
  10f180:	e1d336b4 	ldrh	r3, [r3, #100]	; 0x64
  10f184:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
    if (available < len) {
  10f188:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  10f18c:	e15b30b8 	ldrh	r3, [fp, #-8]
  10f190:	e1520003 	cmp	r2, r3
  10f194:	2a00000d 	bcs	10f1d0 <lwip_netconn_do_writemore+0x2a0>
      /* don't try to write more than sendbuf */
      len = available;
  10f198:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  10f19c:	e14b30b8 	strh	r3, [fp, #-8]
      if (dontblock) {
  10f1a0:	e55b300b 	ldrb	r3, [fp, #-11]
  10f1a4:	e3530000 	cmp	r3, #0
  10f1a8:	0a000005 	beq	10f1c4 <lwip_netconn_do_writemore+0x294>
        if (!len) {
  10f1ac:	e15b30b8 	ldrh	r3, [fp, #-8]
  10f1b0:	e3530000 	cmp	r3, #0
  10f1b4:	1a000005 	bne	10f1d0 <lwip_netconn_do_writemore+0x2a0>
          err = ERR_WOULDBLOCK;
  10f1b8:	e3e03006 	mvn	r3, #6
  10f1bc:	e54b3005 	strb	r3, [fp, #-5]
          goto err_mem;
  10f1c0:	ea000021 	b	10f24c <lwip_netconn_do_writemore+0x31c>
        }
      } else {
        apiflags |= TCP_WRITE_FLAG_MORE;
  10f1c4:	e55b300a 	ldrb	r3, [fp, #-10]
  10f1c8:	e3833002 	orr	r3, r3, #2
  10f1cc:	e54b300a 	strb	r3, [fp, #-10]
      }
    }
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
  10f1d0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f1d4:	e5932034 	ldr	r2, [r3, #52]	; 0x34
  10f1d8:	e15b30b8 	ldrh	r3, [fp, #-8]
  10f1dc:	e0822003 	add	r2, r2, r3
  10f1e0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f1e4:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f1e8:	e593300c 	ldr	r3, [r3, #12]
  10f1ec:	e1520003 	cmp	r2, r3
  10f1f0:	9a000006 	bls	10f210 <lwip_netconn_do_writemore+0x2e0>
  10f1f4:	e3060ae4 	movw	r0, #27364	; 0x6ae4
  10f1f8:	e3400014 	movt	r0, #20
  10f1fc:	ebffcfc4 	bl	103114 <rt_kprintf>
  10f200:	e300160d 	movw	r1, #1549	; 0x60d
  10f204:	e30606a0 	movw	r0, #26272	; 0x66a0
  10f208:	e3400014 	movt	r0, #20
  10f20c:	ebffefb7 	bl	10b0f0 <sys_arch_assert>
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
  10f210:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f214:	e5930008 	ldr	r0, [r3, #8]
  10f218:	e55b300a 	ldrb	r3, [fp, #-10]
  10f21c:	e15b20b8 	ldrh	r2, [fp, #-8]
  10f220:	e51b1010 	ldr	r1, [fp, #-16]
  10f224:	eb00571b 	bl	124e98 <tcp_write>
  10f228:	e1a03000 	mov	r3, r0
  10f22c:	e54b3005 	strb	r3, [fp, #-5]
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
  10f230:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10f234:	e3530000 	cmp	r3, #0
  10f238:	0a000002 	beq	10f248 <lwip_netconn_do_writemore+0x318>
  10f23c:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10f240:	e3730001 	cmn	r3, #1
  10f244:	1a00002e 	bne	10f304 <lwip_netconn_do_writemore+0x3d4>
err_mem:
  10f248:	e320f000 	nop	{0}
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
  10f24c:	e55b300b 	ldrb	r3, [fp, #-11]
  10f250:	e3530000 	cmp	r3, #0
  10f254:	0a000016 	beq	10f2b4 <lwip_netconn_do_writemore+0x384>
  10f258:	e15b20b8 	ldrh	r2, [fp, #-8]
  10f25c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f260:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f264:	e593300c 	ldr	r3, [r3, #12]
  10f268:	e1520003 	cmp	r2, r3
  10f26c:	2a000010 	bcs	10f2b4 <lwip_netconn_do_writemore+0x384>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
  10f270:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f274:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10f278:	e3530000 	cmp	r3, #0
  10f27c:	0a000005 	beq	10f298 <lwip_netconn_do_writemore+0x368>
  10f280:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f284:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10f288:	e15b20b8 	ldrh	r2, [fp, #-8]
  10f28c:	e3a01003 	mov	r1, #3
  10f290:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10f294:	e12fff33 	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
  10f298:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f29c:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10f2a0:	e3833010 	orr	r3, r3, #16
  10f2a4:	e6ef2073 	uxtb	r2, r3
  10f2a8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f2ac:	e5c32030 	strb	r2, [r3, #48]	; 0x30
  10f2b0:	ea000013 	b	10f304 <lwip_netconn_do_writemore+0x3d4>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
  10f2b4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f2b8:	e5933008 	ldr	r3, [r3, #8]
  10f2bc:	e1d336b4 	ldrh	r3, [r3, #100]	; 0x64
  10f2c0:	e3530a01 	cmp	r3, #4096	; 0x1000
  10f2c4:	9a000004 	bls	10f2dc <lwip_netconn_do_writemore+0x3ac>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
  10f2c8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f2cc:	e5933008 	ldr	r3, [r3, #8]
  10f2d0:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
  10f2d4:	e353000a 	cmp	r3, #10
  10f2d8:	9a000009 	bls	10f304 <lwip_netconn_do_writemore+0x3d4>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
  10f2dc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f2e0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10f2e4:	e3530000 	cmp	r3, #0
  10f2e8:	0a000005 	beq	10f304 <lwip_netconn_do_writemore+0x3d4>
  10f2ec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f2f0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10f2f4:	e15b20b8 	ldrh	r2, [fp, #-8]
  10f2f8:	e3a01003 	mov	r1, #3
  10f2fc:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10f300:	e12fff33 	blx	r3
      }
    }

    if (err == ERR_OK) {
  10f304:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10f308:	e3530000 	cmp	r3, #0
  10f30c:	1a00002b 	bne	10f3c0 <lwip_netconn_do_writemore+0x490>
      err_t out_err;
      conn->write_offset += len;
  10f310:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f314:	e5932034 	ldr	r2, [r3, #52]	; 0x34
  10f318:	e15b30b8 	ldrh	r3, [fp, #-8]
  10f31c:	e0822003 	add	r2, r2, r3
  10f320:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f324:	e5832034 	str	r2, [r3, #52]	; 0x34
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
  10f328:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f32c:	e5932034 	ldr	r2, [r3, #52]	; 0x34
  10f330:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f334:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f338:	e593300c 	ldr	r3, [r3, #12]
  10f33c:	e1520003 	cmp	r2, r3
  10f340:	0a000002 	beq	10f350 <lwip_netconn_do_writemore+0x420>
  10f344:	e55b300b 	ldrb	r3, [fp, #-11]
  10f348:	e3530000 	cmp	r3, #0
  10f34c:	0a000006 	beq	10f36c <lwip_netconn_do_writemore+0x43c>
        /* return sent length */
        conn->current_msg->msg.w.len = conn->write_offset;
  10f350:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f354:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f358:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  10f35c:	e5922034 	ldr	r2, [r2, #52]	; 0x34
  10f360:	e583200c 	str	r2, [r3, #12]
        /* everything was written */
        write_finished = 1;
  10f364:	e3a03001 	mov	r3, #1
  10f368:	e54b3009 	strb	r3, [fp, #-9]
      }
      out_err = tcp_output(conn->pcb.tcp);
  10f36c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f370:	e5933008 	ldr	r3, [r3, #8]
  10f374:	e1a00003 	mov	r0, r3
  10f378:	eb005af7 	bl	125f5c <tcp_output>
  10f37c:	e1a03000 	mov	r3, r0
  10f380:	e54b3018 	strb	r3, [fp, #-24]	; 0xffffffe8
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
  10f384:	e15b31d8 	ldrsb	r3, [fp, #-24]	; 0xffffffe8
  10f388:	e373000c 	cmn	r3, #12
  10f38c:	ba000002 	blt	10f39c <lwip_netconn_do_writemore+0x46c>
  10f390:	e15b31d8 	ldrsb	r3, [fp, #-24]	; 0xffffffe8
  10f394:	e3730004 	cmn	r3, #4
  10f398:	1a000032 	bne	10f468 <lwip_netconn_do_writemore+0x538>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
  10f39c:	e55b3018 	ldrb	r3, [fp, #-24]	; 0xffffffe8
  10f3a0:	e54b3005 	strb	r3, [fp, #-5]
        write_finished = 1;
  10f3a4:	e3a03001 	mov	r3, #1
  10f3a8:	e54b3009 	strb	r3, [fp, #-9]
        conn->current_msg->msg.w.len = 0;
  10f3ac:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f3b0:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f3b4:	e3a02000 	mov	r2, #0
  10f3b8:	e583200c 	str	r2, [r3, #12]
  10f3bc:	ea000029 	b	10f468 <lwip_netconn_do_writemore+0x538>
      }
    } else if (err == ERR_MEM) {
  10f3c0:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10f3c4:	e3730001 	cmn	r3, #1
  10f3c8:	1a000020 	bne	10f450 <lwip_netconn_do_writemore+0x520>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
  10f3cc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f3d0:	e5933008 	ldr	r3, [r3, #8]
  10f3d4:	e1a00003 	mov	r0, r3
  10f3d8:	eb005adf 	bl	125f5c <tcp_output>
  10f3dc:	e1a03000 	mov	r3, r0
  10f3e0:	e54b3017 	strb	r3, [fp, #-23]	; 0xffffffe9
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
  10f3e4:	e15b31d7 	ldrsb	r3, [fp, #-23]	; 0xffffffe9
  10f3e8:	e373000c 	cmn	r3, #12
  10f3ec:	ba000002 	blt	10f3fc <lwip_netconn_do_writemore+0x4cc>
  10f3f0:	e15b31d7 	ldrsb	r3, [fp, #-23]	; 0xffffffe9
  10f3f4:	e3730004 	cmn	r3, #4
  10f3f8:	1a000008 	bne	10f420 <lwip_netconn_do_writemore+0x4f0>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
  10f3fc:	e55b3017 	ldrb	r3, [fp, #-23]	; 0xffffffe9
  10f400:	e54b3005 	strb	r3, [fp, #-5]
        write_finished = 1;
  10f404:	e3a03001 	mov	r3, #1
  10f408:	e54b3009 	strb	r3, [fp, #-9]
        conn->current_msg->msg.w.len = 0;
  10f40c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f410:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f414:	e3a02000 	mov	r2, #0
  10f418:	e583200c 	str	r2, [r3, #12]
  10f41c:	ea000011 	b	10f468 <lwip_netconn_do_writemore+0x538>
      } else if (dontblock) {
  10f420:	e55b300b 	ldrb	r3, [fp, #-11]
  10f424:	e3530000 	cmp	r3, #0
  10f428:	0a00000e 	beq	10f468 <lwip_netconn_do_writemore+0x538>
        /* non-blocking write is done on ERR_MEM */
        err = ERR_WOULDBLOCK;
  10f42c:	e3e03006 	mvn	r3, #6
  10f430:	e54b3005 	strb	r3, [fp, #-5]
        write_finished = 1;
  10f434:	e3a03001 	mov	r3, #1
  10f438:	e54b3009 	strb	r3, [fp, #-9]
        conn->current_msg->msg.w.len = 0;
  10f43c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f440:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f444:	e3a02000 	mov	r2, #0
  10f448:	e583200c 	str	r2, [r3, #12]
  10f44c:	ea000005 	b	10f468 <lwip_netconn_do_writemore+0x538>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
  10f450:	e3a03001 	mov	r3, #1
  10f454:	e54b3009 	strb	r3, [fp, #-9]
      conn->current_msg->msg.w.len = 0;
  10f458:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f45c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f460:	e3a02000 	mov	r2, #0
  10f464:	e583200c 	str	r2, [r3, #12]
    }
  }
  if (write_finished) {
  10f468:	e55b3009 	ldrb	r3, [fp, #-9]
  10f46c:	e3530000 	cmp	r3, #0
  10f470:	0a000023 	beq	10f504 <lwip_netconn_do_writemore+0x5d4>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
  10f474:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f478:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f47c:	e5933000 	ldr	r3, [r3]
  10f480:	e2833010 	add	r3, r3, #16
  10f484:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    conn->current_msg->err = err;
  10f488:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f48c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f490:	e55b2005 	ldrb	r2, [fp, #-5]
  10f494:	e5c32004 	strb	r2, [r3, #4]
    conn->current_msg = NULL;
  10f498:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f49c:	e3a02000 	mov	r2, #0
  10f4a0:	e5832038 	str	r2, [r3, #56]	; 0x38
    conn->write_offset = 0;
  10f4a4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f4a8:	e3a02000 	mov	r2, #0
  10f4ac:	e5832034 	str	r2, [r3, #52]	; 0x34
    conn->state = NETCONN_NONE;
  10f4b0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f4b4:	e3a02000 	mov	r2, #0
  10f4b8:	e5832004 	str	r2, [r3, #4]
    NETCONN_SET_SAFE_ERR(conn, err);
  10f4bc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f4c0:	e3530000 	cmp	r3, #0
  10f4c4:	0a000008 	beq	10f4ec <lwip_netconn_do_writemore+0x5bc>
  10f4c8:	ebffcb5b 	bl	10223c <rt_enter_critical>
  10f4cc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f4d0:	e1d330dc 	ldrsb	r3, [r3, #12]
  10f4d4:	e373000c 	cmn	r3, #12
  10f4d8:	ba000002 	blt	10f4e8 <lwip_netconn_do_writemore+0x5b8>
  10f4dc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f4e0:	e55b2005 	ldrb	r2, [fp, #-5]
  10f4e4:	e5c3200c 	strb	r2, [r3, #12]
  10f4e8:	ebffcb59 	bl	102254 <rt_exit_critical>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
  10f4ec:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  10f4f0:	e3530000 	cmp	r3, #0
  10f4f4:	0a000004 	beq	10f50c <lwip_netconn_do_writemore+0x5dc>
#endif
    {
      sys_sem_signal(op_completed_sem);
  10f4f8:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  10f4fc:	ebffed04 	bl	10a914 <sys_sem_signal>
  10f500:	ea000001 	b	10f50c <lwip_netconn_do_writemore+0x5dc>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
  10f504:	e3e03000 	mvn	r3, #0
  10f508:	ea000000 	b	10f510 <lwip_netconn_do_writemore+0x5e0>
  }
#endif
  return ERR_OK;
  10f50c:	e3a03000 	mov	r3, #0
}
  10f510:	e1a00003 	mov	r0, r3
  10f514:	e24bd004 	sub	sp, fp, #4
  10f518:	e8bd8800 	pop	{fp, pc}

0010f51c <lwip_netconn_do_write>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
  10f51c:	e92d4800 	push	{fp, lr}
  10f520:	e28db004 	add	fp, sp, #4
  10f524:	e24dd010 	sub	sp, sp, #16
  10f528:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10f52c:	e51b3010 	ldr	r3, [fp, #-16]
  10f530:	e50b3008 	str	r3, [fp, #-8]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
  10f534:	e51b3008 	ldr	r3, [fp, #-8]
  10f538:	e5933000 	ldr	r3, [r3]
  10f53c:	e1d330dc 	ldrsb	r3, [r3, #12]
  10f540:	e373000c 	cmn	r3, #12
  10f544:	aa000005 	bge	10f560 <lwip_netconn_do_write+0x44>
    msg->err = msg->conn->last_err;
  10f548:	e51b3008 	ldr	r3, [fp, #-8]
  10f54c:	e5933000 	ldr	r3, [r3]
  10f550:	e1d320dc 	ldrsb	r2, [r3, #12]
  10f554:	e51b3008 	ldr	r3, [fp, #-8]
  10f558:	e5c32004 	strb	r2, [r3, #4]
  10f55c:	ea00006f 	b	10f720 <lwip_netconn_do_write+0x204>
  } else {
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
  10f560:	e51b3008 	ldr	r3, [fp, #-8]
  10f564:	e5933000 	ldr	r3, [r3]
  10f568:	e5933000 	ldr	r3, [r3]
  10f56c:	e20330f0 	and	r3, r3, #240	; 0xf0
  10f570:	e3530010 	cmp	r3, #16
  10f574:	1a000066 	bne	10f714 <lwip_netconn_do_write+0x1f8>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
  10f578:	e51b3008 	ldr	r3, [fp, #-8]
  10f57c:	e5933000 	ldr	r3, [r3]
  10f580:	e5933004 	ldr	r3, [r3, #4]
  10f584:	e3530000 	cmp	r3, #0
  10f588:	0a000003 	beq	10f59c <lwip_netconn_do_write+0x80>
        /* netconn is connecting, closing or in blocking write */
        msg->err = ERR_INPROGRESS;
  10f58c:	e51b3008 	ldr	r3, [fp, #-8]
  10f590:	e3e02004 	mvn	r2, #4
  10f594:	e5c32004 	strb	r2, [r3, #4]
  10f598:	ea000060 	b	10f720 <lwip_netconn_do_write+0x204>
      } else if (msg->conn->pcb.tcp != NULL) {
  10f59c:	e51b3008 	ldr	r3, [fp, #-8]
  10f5a0:	e5933000 	ldr	r3, [r3]
  10f5a4:	e5933008 	ldr	r3, [r3, #8]
  10f5a8:	e3530000 	cmp	r3, #0
  10f5ac:	0a000054 	beq	10f704 <lwip_netconn_do_write+0x1e8>
        msg->conn->state = NETCONN_WRITE;
  10f5b0:	e51b3008 	ldr	r3, [fp, #-8]
  10f5b4:	e5933000 	ldr	r3, [r3]
  10f5b8:	e3a02001 	mov	r2, #1
  10f5bc:	e5832004 	str	r2, [r3, #4]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
  10f5c0:	e51b3008 	ldr	r3, [fp, #-8]
  10f5c4:	e5933000 	ldr	r3, [r3]
  10f5c8:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f5cc:	e3530000 	cmp	r3, #0
  10f5d0:	1a000004 	bne	10f5e8 <lwip_netconn_do_write+0xcc>
  10f5d4:	e51b3008 	ldr	r3, [fp, #-8]
  10f5d8:	e5933000 	ldr	r3, [r3]
  10f5dc:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10f5e0:	e3530000 	cmp	r3, #0
  10f5e4:	0a000006 	beq	10f604 <lwip_netconn_do_write+0xe8>
  10f5e8:	e30609bc 	movw	r0, #27068	; 0x69bc
  10f5ec:	e3400014 	movt	r0, #20
  10f5f0:	ebffcec7 	bl	103114 <rt_kprintf>
  10f5f4:	e300167d 	movw	r1, #1661	; 0x67d
  10f5f8:	e30606a0 	movw	r0, #26272	; 0x66a0
  10f5fc:	e3400014 	movt	r0, #20
  10f600:	ebffeeba 	bl	10b0f0 <sys_arch_assert>
          msg->conn->write_offset == 0);
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
  10f604:	e51b3008 	ldr	r3, [fp, #-8]
  10f608:	e593300c 	ldr	r3, [r3, #12]
  10f60c:	e3530000 	cmp	r3, #0
  10f610:	1a000006 	bne	10f630 <lwip_netconn_do_write+0x114>
  10f614:	e3060b10 	movw	r0, #27408	; 0x6b10
  10f618:	e3400014 	movt	r0, #20
  10f61c:	ebffcebc 	bl	103114 <rt_kprintf>
  10f620:	e300167e 	movw	r1, #1662	; 0x67e
  10f624:	e30606a0 	movw	r0, #26272	; 0x66a0
  10f628:	e3400014 	movt	r0, #20
  10f62c:	ebffeeaf 	bl	10b0f0 <sys_arch_assert>
        msg->conn->current_msg = msg;
  10f630:	e51b3008 	ldr	r3, [fp, #-8]
  10f634:	e5933000 	ldr	r3, [r3]
  10f638:	e51b2008 	ldr	r2, [fp, #-8]
  10f63c:	e5832038 	str	r2, [r3, #56]	; 0x38
        msg->conn->write_offset = 0;
  10f640:	e51b3008 	ldr	r3, [fp, #-8]
  10f644:	e5933000 	ldr	r3, [r3]
  10f648:	e3a02000 	mov	r2, #0
  10f64c:	e5832034 	str	r2, [r3, #52]	; 0x34
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
  10f650:	e51b3008 	ldr	r3, [fp, #-8]
  10f654:	e5933000 	ldr	r3, [r3]
  10f658:	e3a01000 	mov	r1, #0
  10f65c:	e1a00003 	mov	r0, r3
  10f660:	ebfffe32 	bl	10ef30 <lwip_netconn_do_writemore>
  10f664:	e1a03000 	mov	r3, r0
  10f668:	e3530000 	cmp	r3, #0
  10f66c:	0a00003c 	beq	10f764 <lwip_netconn_do_write+0x248>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
  10f670:	e51b3008 	ldr	r3, [fp, #-8]
  10f674:	e5933000 	ldr	r3, [r3]
  10f678:	e5933004 	ldr	r3, [r3, #4]
  10f67c:	e3530001 	cmp	r3, #1
  10f680:	0a000006 	beq	10f6a0 <lwip_netconn_do_write+0x184>
  10f684:	e30609d8 	movw	r0, #27096	; 0x69d8
  10f688:	e3400014 	movt	r0, #20
  10f68c:	ebffcea0 	bl	103114 <rt_kprintf>
  10f690:	e3001683 	movw	r1, #1667	; 0x683
  10f694:	e30606a0 	movw	r0, #26272	; 0x66a0
  10f698:	e3400014 	movt	r0, #20
  10f69c:	ebffee93 	bl	10b0f0 <sys_arch_assert>
          UNLOCK_TCPIP_CORE();
  10f6a0:	e30f05f4 	movw	r0, #62964	; 0xf5f4
  10f6a4:	e3400014 	movt	r0, #20
  10f6a8:	ebffed20 	bl	10ab30 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
  10f6ac:	e51b3008 	ldr	r3, [fp, #-8]
  10f6b0:	e5933000 	ldr	r3, [r3]
  10f6b4:	e2833010 	add	r3, r3, #16
  10f6b8:	e3a01000 	mov	r1, #0
  10f6bc:	e1a00003 	mov	r0, r3
  10f6c0:	ebffec9e 	bl	10a940 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
  10f6c4:	e30f05f4 	movw	r0, #62964	; 0xf5f4
  10f6c8:	e3400014 	movt	r0, #20
  10f6cc:	ebffed0b 	bl	10ab00 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
  10f6d0:	e51b3008 	ldr	r3, [fp, #-8]
  10f6d4:	e5933000 	ldr	r3, [r3]
  10f6d8:	e5933004 	ldr	r3, [r3, #4]
  10f6dc:	e3530001 	cmp	r3, #1
  10f6e0:	1a00001f 	bne	10f764 <lwip_netconn_do_write+0x248>
  10f6e4:	e30609d8 	movw	r0, #27096	; 0x69d8
  10f6e8:	e3400014 	movt	r0, #20
  10f6ec:	ebffce88 	bl	103114 <rt_kprintf>
  10f6f0:	e3001687 	movw	r1, #1671	; 0x687
  10f6f4:	e30606a0 	movw	r0, #26272	; 0x66a0
  10f6f8:	e3400014 	movt	r0, #20
  10f6fc:	ebffee7b 	bl	10b0f0 <sys_arch_assert>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
  10f700:	ea000017 	b	10f764 <lwip_netconn_do_write+0x248>
      } else {
        msg->err = ERR_CONN;
  10f704:	e51b3008 	ldr	r3, [fp, #-8]
  10f708:	e3e0200a 	mvn	r2, #10
  10f70c:	e5c32004 	strb	r2, [r3, #4]
  10f710:	ea000002 	b	10f720 <lwip_netconn_do_write+0x204>
#else /* LWIP_TCP */
      msg->err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      msg->err = ERR_VAL;
  10f714:	e51b3008 	ldr	r3, [fp, #-8]
  10f718:	e3e02005 	mvn	r2, #5
  10f71c:	e5c32004 	strb	r2, [r3, #4]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
  10f720:	e51b3008 	ldr	r3, [fp, #-8]
  10f724:	e5933000 	ldr	r3, [r3]
  10f728:	e3530000 	cmp	r3, #0
  10f72c:	0a00000d 	beq	10f768 <lwip_netconn_do_write+0x24c>
  10f730:	ebffcac1 	bl	10223c <rt_enter_critical>
  10f734:	e51b3008 	ldr	r3, [fp, #-8]
  10f738:	e5933000 	ldr	r3, [r3]
  10f73c:	e1d330dc 	ldrsb	r3, [r3, #12]
  10f740:	e373000c 	cmn	r3, #12
  10f744:	ba000004 	blt	10f75c <lwip_netconn_do_write+0x240>
  10f748:	e51b3008 	ldr	r3, [fp, #-8]
  10f74c:	e5933000 	ldr	r3, [r3]
  10f750:	e51b2008 	ldr	r2, [fp, #-8]
  10f754:	e1d220d4 	ldrsb	r2, [r2, #4]
  10f758:	e5c3200c 	strb	r2, [r3, #12]
  10f75c:	ebffcabc 	bl	102254 <rt_exit_critical>
  10f760:	ea000000 	b	10f768 <lwip_netconn_do_write+0x24c>
        return;
  10f764:	e320f000 	nop	{0}
}
  10f768:	e24bd004 	sub	sp, fp, #4
  10f76c:	e8bd8800 	pop	{fp, pc}

0010f770 <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
  10f770:	e92d4800 	push	{fp, lr}
  10f774:	e28db004 	add	fp, sp, #4
  10f778:	e24dd010 	sub	sp, sp, #16
  10f77c:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10f780:	e51b3010 	ldr	r3, [fp, #-16]
  10f784:	e50b3008 	str	r3, [fp, #-8]

  if (msg->conn->pcb.ip != NULL) {
  10f788:	e51b3008 	ldr	r3, [fp, #-8]
  10f78c:	e5933000 	ldr	r3, [r3]
  10f790:	e5933008 	ldr	r3, [r3, #8]
  10f794:	e3530000 	cmp	r3, #0
  10f798:	0a00007e 	beq	10f998 <lwip_netconn_do_getaddr+0x228>
    if (msg->msg.ad.local) {
  10f79c:	e51b3008 	ldr	r3, [fp, #-8]
  10f7a0:	e5d33010 	ldrb	r3, [r3, #16]
  10f7a4:	e3530000 	cmp	r3, #0
  10f7a8:	0a000007 	beq	10f7cc <lwip_netconn_do_getaddr+0x5c>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
  10f7ac:	e51b3008 	ldr	r3, [fp, #-8]
  10f7b0:	e5933000 	ldr	r3, [r3]
  10f7b4:	e5932008 	ldr	r2, [r3, #8]
  10f7b8:	e51b3008 	ldr	r3, [fp, #-8]
  10f7bc:	e5933008 	ldr	r3, [r3, #8]
  10f7c0:	e5922000 	ldr	r2, [r2]
  10f7c4:	e5832000 	str	r2, [r3]
  10f7c8:	ea000006 	b	10f7e8 <lwip_netconn_do_getaddr+0x78>
        msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
  10f7cc:	e51b3008 	ldr	r3, [fp, #-8]
  10f7d0:	e5933000 	ldr	r3, [r3]
  10f7d4:	e5932008 	ldr	r2, [r3, #8]
  10f7d8:	e51b3008 	ldr	r3, [fp, #-8]
  10f7dc:	e5933008 	ldr	r3, [r3, #8]
  10f7e0:	e5922004 	ldr	r2, [r2, #4]
  10f7e4:	e5832000 	str	r2, [r3]
        msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
  10f7e8:	e51b3008 	ldr	r3, [fp, #-8]
  10f7ec:	e3a02000 	mov	r2, #0
  10f7f0:	e5c32004 	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
  10f7f4:	e51b3008 	ldr	r3, [fp, #-8]
  10f7f8:	e5933000 	ldr	r3, [r3]
  10f7fc:	e5933000 	ldr	r3, [r3]
  10f800:	e20330f0 	and	r3, r3, #240	; 0xf0
  10f804:	e3530020 	cmp	r3, #32
  10f808:	0a000015 	beq	10f864 <lwip_netconn_do_getaddr+0xf4>
  10f80c:	e3530040 	cmp	r3, #64	; 0x40
  10f810:	0a000002 	beq	10f820 <lwip_netconn_do_getaddr+0xb0>
  10f814:	e3530010 	cmp	r3, #16
  10f818:	0a000030 	beq	10f8e0 <lwip_netconn_do_getaddr+0x170>
  10f81c:	ea000054 	b	10f974 <lwip_netconn_do_getaddr+0x204>
#if LWIP_RAW
    case NETCONN_RAW:
      if (msg->msg.ad.local) {
  10f820:	e51b3008 	ldr	r3, [fp, #-8]
  10f824:	e5d33010 	ldrb	r3, [r3, #16]
  10f828:	e3530000 	cmp	r3, #0
  10f82c:	0a000008 	beq	10f854 <lwip_netconn_do_getaddr+0xe4>
        API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.raw->protocol;
  10f830:	e51b3008 	ldr	r3, [fp, #-8]
  10f834:	e5933000 	ldr	r3, [r3]
  10f838:	e5933008 	ldr	r3, [r3, #8]
  10f83c:	e5d32010 	ldrb	r2, [r3, #16]
  10f840:	e51b3008 	ldr	r3, [fp, #-8]
  10f844:	e593300c 	ldr	r3, [r3, #12]
  10f848:	e6ff2072 	uxth	r2, r2
  10f84c:	e1c320b0 	strh	r2, [r3]
      } else {
        /* return an error as connecting is only a helper for upper layers */
        msg->err = ERR_CONN;
      }
      break;
  10f850:	ea000053 	b	10f9a4 <lwip_netconn_do_getaddr+0x234>
        msg->err = ERR_CONN;
  10f854:	e51b3008 	ldr	r3, [fp, #-8]
  10f858:	e3e0200a 	mvn	r2, #10
  10f85c:	e5c32004 	strb	r2, [r3, #4]
      break;
  10f860:	ea00004f 	b	10f9a4 <lwip_netconn_do_getaddr+0x234>
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      if (msg->msg.ad.local) {
  10f864:	e51b3008 	ldr	r3, [fp, #-8]
  10f868:	e5d33010 	ldrb	r3, [r3, #16]
  10f86c:	e3530000 	cmp	r3, #0
  10f870:	0a000007 	beq	10f894 <lwip_netconn_do_getaddr+0x124>
        API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
  10f874:	e51b3008 	ldr	r3, [fp, #-8]
  10f878:	e5933000 	ldr	r3, [r3]
  10f87c:	e5932008 	ldr	r2, [r3, #8]
  10f880:	e51b3008 	ldr	r3, [fp, #-8]
  10f884:	e593300c 	ldr	r3, [r3, #12]
  10f888:	e1d221b2 	ldrh	r2, [r2, #18]
  10f88c:	e1c320b0 	strh	r2, [r3]
          msg->err = ERR_CONN;
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
        }
      }
      break;
  10f890:	ea000043 	b	10f9a4 <lwip_netconn_do_getaddr+0x234>
        if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
  10f894:	e51b3008 	ldr	r3, [fp, #-8]
  10f898:	e5933000 	ldr	r3, [r3]
  10f89c:	e5933008 	ldr	r3, [r3, #8]
  10f8a0:	e5d33010 	ldrb	r3, [r3, #16]
  10f8a4:	e2033004 	and	r3, r3, #4
  10f8a8:	e3530000 	cmp	r3, #0
  10f8ac:	1a000003 	bne	10f8c0 <lwip_netconn_do_getaddr+0x150>
          msg->err = ERR_CONN;
  10f8b0:	e51b3008 	ldr	r3, [fp, #-8]
  10f8b4:	e3e0200a 	mvn	r2, #10
  10f8b8:	e5c32004 	strb	r2, [r3, #4]
      break;
  10f8bc:	ea000038 	b	10f9a4 <lwip_netconn_do_getaddr+0x234>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
  10f8c0:	e51b3008 	ldr	r3, [fp, #-8]
  10f8c4:	e5933000 	ldr	r3, [r3]
  10f8c8:	e5932008 	ldr	r2, [r3, #8]
  10f8cc:	e51b3008 	ldr	r3, [fp, #-8]
  10f8d0:	e593300c 	ldr	r3, [r3, #12]
  10f8d4:	e1d221b4 	ldrh	r2, [r2, #20]
  10f8d8:	e1c320b0 	strh	r2, [r3]
      break;
  10f8dc:	ea000030 	b	10f9a4 <lwip_netconn_do_getaddr+0x234>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      if ((msg->msg.ad.local == 0) &&
  10f8e0:	e51b3008 	ldr	r3, [fp, #-8]
  10f8e4:	e5d33010 	ldrb	r3, [r3, #16]
  10f8e8:	e3530000 	cmp	r3, #0
  10f8ec:	1a00000f 	bne	10f930 <lwip_netconn_do_getaddr+0x1c0>
          ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
  10f8f0:	e51b3008 	ldr	r3, [fp, #-8]
  10f8f4:	e5933000 	ldr	r3, [r3]
  10f8f8:	e5933008 	ldr	r3, [r3, #8]
  10f8fc:	e5933014 	ldr	r3, [r3, #20]
      if ((msg->msg.ad.local == 0) &&
  10f900:	e3530000 	cmp	r3, #0
  10f904:	0a000005 	beq	10f920 <lwip_netconn_do_getaddr+0x1b0>
          ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
  10f908:	e51b3008 	ldr	r3, [fp, #-8]
  10f90c:	e5933000 	ldr	r3, [r3]
  10f910:	e5933008 	ldr	r3, [r3, #8]
  10f914:	e5933014 	ldr	r3, [r3, #20]
  10f918:	e3530001 	cmp	r3, #1
  10f91c:	1a000003 	bne	10f930 <lwip_netconn_do_getaddr+0x1c0>
        /* pcb is not connected and remote name is requested */
        msg->err = ERR_CONN;
  10f920:	e51b3008 	ldr	r3, [fp, #-8]
  10f924:	e3e0200a 	mvn	r2, #10
  10f928:	e5c32004 	strb	r2, [r3, #4]
      } else {
        API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
      }
      break;
  10f92c:	ea00001c 	b	10f9a4 <lwip_netconn_do_getaddr+0x234>
        API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
  10f930:	e51b3008 	ldr	r3, [fp, #-8]
  10f934:	e5d33010 	ldrb	r3, [r3, #16]
  10f938:	e3530000 	cmp	r3, #0
  10f93c:	0a000004 	beq	10f954 <lwip_netconn_do_getaddr+0x1e4>
  10f940:	e51b3008 	ldr	r3, [fp, #-8]
  10f944:	e5933000 	ldr	r3, [r3]
  10f948:	e5933008 	ldr	r3, [r3, #8]
  10f94c:	e1d331ba 	ldrh	r3, [r3, #26]
  10f950:	ea000003 	b	10f964 <lwip_netconn_do_getaddr+0x1f4>
  10f954:	e51b3008 	ldr	r3, [fp, #-8]
  10f958:	e5933000 	ldr	r3, [r3]
  10f95c:	e5933008 	ldr	r3, [r3, #8]
  10f960:	e1d331bc 	ldrh	r3, [r3, #28]
  10f964:	e51b2008 	ldr	r2, [fp, #-8]
  10f968:	e592200c 	ldr	r2, [r2, #12]
  10f96c:	e1c230b0 	strh	r3, [r2]
      break;
  10f970:	ea00000b 	b	10f9a4 <lwip_netconn_do_getaddr+0x234>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("invalid netconn_type", 0);
  10f974:	e3060b24 	movw	r0, #27428	; 0x6b24
  10f978:	e3400014 	movt	r0, #20
  10f97c:	ebffcde4 	bl	103114 <rt_kprintf>
  10f980:	e30016d7 	movw	r1, #1751	; 0x6d7
  10f984:	e30606a0 	movw	r0, #26272	; 0x66a0
  10f988:	e3400014 	movt	r0, #20
  10f98c:	ebffedd7 	bl	10b0f0 <sys_arch_assert>
      break;
  10f990:	e320f000 	nop	{0}
  10f994:	ea000002 	b	10f9a4 <lwip_netconn_do_getaddr+0x234>
    }
  } else {
    msg->err = ERR_CONN;
  10f998:	e51b3008 	ldr	r3, [fp, #-8]
  10f99c:	e3e0200a 	mvn	r2, #10
  10f9a0:	e5c32004 	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
  10f9a4:	e51b3008 	ldr	r3, [fp, #-8]
  10f9a8:	e5933000 	ldr	r3, [r3]
  10f9ac:	e3530000 	cmp	r3, #0
  10f9b0:	0a00000b 	beq	10f9e4 <lwip_netconn_do_getaddr+0x274>
  10f9b4:	ebffca20 	bl	10223c <rt_enter_critical>
  10f9b8:	e51b3008 	ldr	r3, [fp, #-8]
  10f9bc:	e5933000 	ldr	r3, [r3]
  10f9c0:	e1d330dc 	ldrsb	r3, [r3, #12]
  10f9c4:	e373000c 	cmn	r3, #12
  10f9c8:	ba000004 	blt	10f9e0 <lwip_netconn_do_getaddr+0x270>
  10f9cc:	e51b3008 	ldr	r3, [fp, #-8]
  10f9d0:	e5933000 	ldr	r3, [r3]
  10f9d4:	e51b2008 	ldr	r2, [fp, #-8]
  10f9d8:	e1d220d4 	ldrsb	r2, [r2, #4]
  10f9dc:	e5c3200c 	strb	r2, [r3, #12]
  10f9e0:	ebffca1b 	bl	102254 <rt_exit_critical>
}
  10f9e4:	e320f000 	nop	{0}
  10f9e8:	e24bd004 	sub	sp, fp, #4
  10f9ec:	e8bd8800 	pop	{fp, pc}

0010f9f0 <lwip_netconn_do_close>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
  10f9f0:	e92d4800 	push	{fp, lr}
  10f9f4:	e28db004 	add	fp, sp, #4
  10f9f8:	e24dd010 	sub	sp, sp, #16
  10f9fc:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10fa00:	e51b3010 	ldr	r3, [fp, #-16]
  10fa04:	e50b3008 	str	r3, [fp, #-8]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
  10fa08:	e51b3008 	ldr	r3, [fp, #-8]
  10fa0c:	e5933000 	ldr	r3, [r3]
  10fa10:	e5933004 	ldr	r3, [r3, #4]
  10fa14:	e50b300c 	str	r3, [fp, #-12]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
  10fa18:	e51b3008 	ldr	r3, [fp, #-8]
  10fa1c:	e5933000 	ldr	r3, [r3]
  10fa20:	e5933008 	ldr	r3, [r3, #8]
  10fa24:	e3530000 	cmp	r3, #0
  10fa28:	0a000069 	beq	10fbd4 <lwip_netconn_do_close+0x1e4>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
  10fa2c:	e51b3008 	ldr	r3, [fp, #-8]
  10fa30:	e5933000 	ldr	r3, [r3]
  10fa34:	e5933000 	ldr	r3, [r3]
  10fa38:	e20330f0 	and	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
  10fa3c:	e3530010 	cmp	r3, #16
  10fa40:	1a000063 	bne	10fbd4 <lwip_netconn_do_close+0x1e4>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
  10fa44:	e51b3008 	ldr	r3, [fp, #-8]
  10fa48:	e5d33008 	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
  10fa4c:	e3530003 	cmp	r3, #3
  10fa50:	0a000002 	beq	10fa60 <lwip_netconn_do_close+0x70>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
  10fa54:	e51b300c 	ldr	r3, [fp, #-12]
  10fa58:	e3530002 	cmp	r3, #2
  10fa5c:	0a00005c 	beq	10fbd4 <lwip_netconn_do_close+0x1e4>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
  10fa60:	e51b300c 	ldr	r3, [fp, #-12]
  10fa64:	e3530003 	cmp	r3, #3
  10fa68:	1a000003 	bne	10fa7c <lwip_netconn_do_close+0x8c>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
  10fa6c:	e51b3008 	ldr	r3, [fp, #-8]
  10fa70:	e3e0200a 	mvn	r2, #10
  10fa74:	e5c32004 	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
  10fa78:	ea000058 	b	10fbe0 <lwip_netconn_do_close+0x1f0>
    } else if (state == NETCONN_WRITE) {
  10fa7c:	e51b300c 	ldr	r3, [fp, #-12]
  10fa80:	e3530001 	cmp	r3, #1
  10fa84:	1a000003 	bne	10fa98 <lwip_netconn_do_close+0xa8>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
  10fa88:	e51b3008 	ldr	r3, [fp, #-8]
  10fa8c:	e3e02004 	mvn	r2, #4
  10fa90:	e5c32004 	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
  10fa94:	ea000051 	b	10fbe0 <lwip_netconn_do_close+0x1f0>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
  10fa98:	e51b3008 	ldr	r3, [fp, #-8]
  10fa9c:	e5d33008 	ldrb	r3, [r3, #8]
  10faa0:	e2033001 	and	r3, r3, #1
  10faa4:	e3530000 	cmp	r3, #0
  10faa8:	0a000003 	beq	10fabc <lwip_netconn_do_close+0xcc>
        /* Drain and delete mboxes */
        netconn_drain(msg->conn);
  10faac:	e51b3008 	ldr	r3, [fp, #-8]
  10fab0:	e5933000 	ldr	r3, [r3]
  10fab4:	e1a00003 	mov	r0, r3
  10fab8:	ebfff72a 	bl	10d768 <netconn_drain>
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
  10fabc:	e51b3008 	ldr	r3, [fp, #-8]
  10fac0:	e5933000 	ldr	r3, [r3]
  10fac4:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10fac8:	e3530000 	cmp	r3, #0
  10facc:	1a000004 	bne	10fae4 <lwip_netconn_do_close+0xf4>
  10fad0:	e51b3008 	ldr	r3, [fp, #-8]
  10fad4:	e5933000 	ldr	r3, [r3]
  10fad8:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10fadc:	e3530000 	cmp	r3, #0
  10fae0:	0a000006 	beq	10fb00 <lwip_netconn_do_close+0x110>
  10fae4:	e30609bc 	movw	r0, #27068	; 0x69bc
  10fae8:	e3400014 	movt	r0, #20
  10faec:	ebffcd88 	bl	103114 <rt_kprintf>
  10faf0:	e3001716 	movw	r1, #1814	; 0x716
  10faf4:	e30606a0 	movw	r0, #26272	; 0x66a0
  10faf8:	e3400014 	movt	r0, #20
  10fafc:	ebffed7b 	bl	10b0f0 <sys_arch_assert>
        msg->conn->write_offset == 0);
      msg->conn->state = NETCONN_CLOSE;
  10fb00:	e51b3008 	ldr	r3, [fp, #-8]
  10fb04:	e5933000 	ldr	r3, [r3]
  10fb08:	e3a02004 	mov	r2, #4
  10fb0c:	e5832004 	str	r2, [r3, #4]
      msg->conn->current_msg = msg;
  10fb10:	e51b3008 	ldr	r3, [fp, #-8]
  10fb14:	e5933000 	ldr	r3, [r3]
  10fb18:	e51b2008 	ldr	r2, [fp, #-8]
  10fb1c:	e5832038 	str	r2, [r3, #56]	; 0x38
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
  10fb20:	e51b3008 	ldr	r3, [fp, #-8]
  10fb24:	e5933000 	ldr	r3, [r3]
  10fb28:	e3a01000 	mov	r1, #0
  10fb2c:	e1a00003 	mov	r0, r3
  10fb30:	ebfff776 	bl	10d910 <lwip_netconn_do_close_internal>
  10fb34:	e1a03000 	mov	r3, r0
  10fb38:	e3530000 	cmp	r3, #0
  10fb3c:	0a000038 	beq	10fc24 <lwip_netconn_do_close+0x234>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
  10fb40:	e51b3008 	ldr	r3, [fp, #-8]
  10fb44:	e5933000 	ldr	r3, [r3]
  10fb48:	e5933004 	ldr	r3, [r3, #4]
  10fb4c:	e3530004 	cmp	r3, #4
  10fb50:	0a000006 	beq	10fb70 <lwip_netconn_do_close+0x180>
  10fb54:	e30609d8 	movw	r0, #27096	; 0x69d8
  10fb58:	e3400014 	movt	r0, #20
  10fb5c:	ebffcd6c 	bl	103114 <rt_kprintf>
  10fb60:	e300171b 	movw	r1, #1819	; 0x71b
  10fb64:	e30606a0 	movw	r0, #26272	; 0x66a0
  10fb68:	e3400014 	movt	r0, #20
  10fb6c:	ebffed5f 	bl	10b0f0 <sys_arch_assert>
        UNLOCK_TCPIP_CORE();
  10fb70:	e30f05f4 	movw	r0, #62964	; 0xf5f4
  10fb74:	e3400014 	movt	r0, #20
  10fb78:	ebffebec 	bl	10ab30 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
  10fb7c:	e51b3008 	ldr	r3, [fp, #-8]
  10fb80:	e5933000 	ldr	r3, [r3]
  10fb84:	e2833010 	add	r3, r3, #16
  10fb88:	e3a01000 	mov	r1, #0
  10fb8c:	e1a00003 	mov	r0, r3
  10fb90:	ebffeb6a 	bl	10a940 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
  10fb94:	e30f05f4 	movw	r0, #62964	; 0xf5f4
  10fb98:	e3400014 	movt	r0, #20
  10fb9c:	ebffebd7 	bl	10ab00 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
  10fba0:	e51b3008 	ldr	r3, [fp, #-8]
  10fba4:	e5933000 	ldr	r3, [r3]
  10fba8:	e5933004 	ldr	r3, [r3, #4]
  10fbac:	e3530000 	cmp	r3, #0
  10fbb0:	0a00001b 	beq	10fc24 <lwip_netconn_do_close+0x234>
  10fbb4:	e30609d8 	movw	r0, #27096	; 0x69d8
  10fbb8:	e3400014 	movt	r0, #20
  10fbbc:	ebffcd54 	bl	103114 <rt_kprintf>
  10fbc0:	e300171f 	movw	r1, #1823	; 0x71f
  10fbc4:	e30606a0 	movw	r0, #26272	; 0x66a0
  10fbc8:	e3400014 	movt	r0, #20
  10fbcc:	ebffed47 	bl	10b0f0 <sys_arch_assert>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
  10fbd0:	ea000013 	b	10fc24 <lwip_netconn_do_close+0x234>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
  10fbd4:	e51b3008 	ldr	r3, [fp, #-8]
  10fbd8:	e3e0200a 	mvn	r2, #10
  10fbdc:	e5c32004 	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
  10fbe0:	e51b3008 	ldr	r3, [fp, #-8]
  10fbe4:	e5933000 	ldr	r3, [r3]
  10fbe8:	e3530000 	cmp	r3, #0
  10fbec:	0a00000d 	beq	10fc28 <lwip_netconn_do_close+0x238>
  10fbf0:	ebffc991 	bl	10223c <rt_enter_critical>
  10fbf4:	e51b3008 	ldr	r3, [fp, #-8]
  10fbf8:	e5933000 	ldr	r3, [r3]
  10fbfc:	e1d330dc 	ldrsb	r3, [r3, #12]
  10fc00:	e373000c 	cmn	r3, #12
  10fc04:	ba000004 	blt	10fc1c <lwip_netconn_do_close+0x22c>
  10fc08:	e51b3008 	ldr	r3, [fp, #-8]
  10fc0c:	e5933000 	ldr	r3, [r3]
  10fc10:	e51b2008 	ldr	r2, [fp, #-8]
  10fc14:	e1d220d4 	ldrsb	r2, [r2, #4]
  10fc18:	e5c3200c 	strb	r2, [r3, #12]
  10fc1c:	ebffc98c 	bl	102254 <rt_exit_critical>
  10fc20:	ea000000 	b	10fc28 <lwip_netconn_do_close+0x238>
      return;
  10fc24:	e320f000 	nop	{0}
}
  10fc28:	e24bd004 	sub	sp, fp, #4
  10fc2c:	e8bd8800 	pop	{fp, pc}

0010fc30 <lwip_netconn_do_join_leave_group>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_join_leave_group(void *m)
{
  10fc30:	e92d4800 	push	{fp, lr}
  10fc34:	e28db004 	add	fp, sp, #4
  10fc38:	e24dd010 	sub	sp, sp, #16
  10fc3c:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10fc40:	e51b3010 	ldr	r3, [fp, #-16]
  10fc44:	e50b3008 	str	r3, [fp, #-8]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
  10fc48:	e51b3008 	ldr	r3, [fp, #-8]
  10fc4c:	e5933000 	ldr	r3, [r3]
  10fc50:	e1d330dc 	ldrsb	r3, [r3, #12]
  10fc54:	e373000c 	cmn	r3, #12
  10fc58:	aa000005 	bge	10fc74 <lwip_netconn_do_join_leave_group+0x44>
    msg->err = msg->conn->last_err;
  10fc5c:	e51b3008 	ldr	r3, [fp, #-8]
  10fc60:	e5933000 	ldr	r3, [r3]
  10fc64:	e1d320dc 	ldrsb	r2, [r3, #12]
  10fc68:	e51b3008 	ldr	r3, [fp, #-8]
  10fc6c:	e5c32004 	strb	r2, [r3, #4]
  10fc70:	ea00002d 	b	10fd2c <lwip_netconn_do_join_leave_group+0xfc>
  } else {
    if (msg->conn->pcb.tcp != NULL) {
  10fc74:	e51b3008 	ldr	r3, [fp, #-8]
  10fc78:	e5933000 	ldr	r3, [r3]
  10fc7c:	e5933008 	ldr	r3, [r3, #8]
  10fc80:	e3530000 	cmp	r3, #0
  10fc84:	0a000025 	beq	10fd20 <lwip_netconn_do_join_leave_group+0xf0>
      if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
  10fc88:	e51b3008 	ldr	r3, [fp, #-8]
  10fc8c:	e5933000 	ldr	r3, [r3]
  10fc90:	e5933000 	ldr	r3, [r3]
  10fc94:	e20330f0 	and	r3, r3, #240	; 0xf0
  10fc98:	e3530020 	cmp	r3, #32
  10fc9c:	1a00001b 	bne	10fd10 <lwip_netconn_do_join_leave_group+0xe0>
        }
        else
#endif /* LWIP_IPV6 && LWIP_IPV6_MLD */
        {
#if LWIP_IGMP
          if (msg->msg.jl.join_or_leave == NETCONN_JOIN) {
  10fca0:	e51b3008 	ldr	r3, [fp, #-8]
  10fca4:	e5933010 	ldr	r3, [r3, #16]
  10fca8:	e3530000 	cmp	r3, #0
  10fcac:	1a00000b 	bne	10fce0 <lwip_netconn_do_join_leave_group+0xb0>
            msg->err = igmp_joingroup(ip_2_ip4(API_EXPR_REF(msg->msg.jl.netif_addr)),
  10fcb0:	e51b3008 	ldr	r3, [fp, #-8]
  10fcb4:	e593200c 	ldr	r2, [r3, #12]
              ip_2_ip4(API_EXPR_REF(msg->msg.jl.multiaddr)));
  10fcb8:	e51b3008 	ldr	r3, [fp, #-8]
  10fcbc:	e5933008 	ldr	r3, [r3, #8]
            msg->err = igmp_joingroup(ip_2_ip4(API_EXPR_REF(msg->msg.jl.netif_addr)),
  10fcc0:	e1a01003 	mov	r1, r3
  10fcc4:	e1a00002 	mov	r0, r2
  10fcc8:	eb00828f 	bl	13070c <igmp_joingroup>
  10fccc:	e1a03000 	mov	r3, r0
  10fcd0:	e1a02003 	mov	r2, r3
  10fcd4:	e51b3008 	ldr	r3, [fp, #-8]
  10fcd8:	e5c32004 	strb	r2, [r3, #4]
  10fcdc:	ea000012 	b	10fd2c <lwip_netconn_do_join_leave_group+0xfc>
          } else {
            msg->err = igmp_leavegroup(ip_2_ip4(API_EXPR_REF(msg->msg.jl.netif_addr)),
  10fce0:	e51b3008 	ldr	r3, [fp, #-8]
  10fce4:	e593200c 	ldr	r2, [r3, #12]
              ip_2_ip4(API_EXPR_REF(msg->msg.jl.multiaddr)));
  10fce8:	e51b3008 	ldr	r3, [fp, #-8]
  10fcec:	e5933008 	ldr	r3, [r3, #8]
            msg->err = igmp_leavegroup(ip_2_ip4(API_EXPR_REF(msg->msg.jl.netif_addr)),
  10fcf0:	e1a01003 	mov	r1, r3
  10fcf4:	e1a00002 	mov	r0, r2
  10fcf8:	eb00833c 	bl	1309f0 <igmp_leavegroup>
  10fcfc:	e1a03000 	mov	r3, r0
  10fd00:	e1a02003 	mov	r2, r3
  10fd04:	e51b3008 	ldr	r3, [fp, #-8]
  10fd08:	e5c32004 	strb	r2, [r3, #4]
  10fd0c:	ea000006 	b	10fd2c <lwip_netconn_do_join_leave_group+0xfc>
#endif /* LWIP_IGMP */
        }
#endif /* LWIP_UDP */
#if (LWIP_TCP || LWIP_RAW)
      } else {
        msg->err = ERR_VAL;
  10fd10:	e51b3008 	ldr	r3, [fp, #-8]
  10fd14:	e3e02005 	mvn	r2, #5
  10fd18:	e5c32004 	strb	r2, [r3, #4]
  10fd1c:	ea000002 	b	10fd2c <lwip_netconn_do_join_leave_group+0xfc>
#endif /* (LWIP_TCP || LWIP_RAW) */
      }
    } else {
      msg->err = ERR_CONN;
  10fd20:	e51b3008 	ldr	r3, [fp, #-8]
  10fd24:	e3e0200a 	mvn	r2, #10
  10fd28:	e5c32004 	strb	r2, [r3, #4]
    }
  }
  TCPIP_APIMSG_ACK(msg);
  10fd2c:	e51b3008 	ldr	r3, [fp, #-8]
  10fd30:	e5933000 	ldr	r3, [r3]
  10fd34:	e3530000 	cmp	r3, #0
  10fd38:	0a00000b 	beq	10fd6c <lwip_netconn_do_join_leave_group+0x13c>
  10fd3c:	ebffc93e 	bl	10223c <rt_enter_critical>
  10fd40:	e51b3008 	ldr	r3, [fp, #-8]
  10fd44:	e5933000 	ldr	r3, [r3]
  10fd48:	e1d330dc 	ldrsb	r3, [r3, #12]
  10fd4c:	e373000c 	cmn	r3, #12
  10fd50:	ba000004 	blt	10fd68 <lwip_netconn_do_join_leave_group+0x138>
  10fd54:	e51b3008 	ldr	r3, [fp, #-8]
  10fd58:	e5933000 	ldr	r3, [r3]
  10fd5c:	e51b2008 	ldr	r2, [fp, #-8]
  10fd60:	e1d220d4 	ldrsb	r2, [r2, #4]
  10fd64:	e5c3200c 	strb	r2, [r3, #12]
  10fd68:	ebffc939 	bl	102254 <rt_exit_critical>
}
  10fd6c:	e320f000 	nop	{0}
  10fd70:	e24bd004 	sub	sp, fp, #4
  10fd74:	e8bd8800 	pop	{fp, pc}

0010fd78 <lwip_netconn_do_dns_found>:
 * (or on timeout). A waiting application thread is waked up by
 * signaling the semaphore.
 */
static void
lwip_netconn_do_dns_found(const char *name, const ip_addr_t *ipaddr, void *arg)
{
  10fd78:	e92d4800 	push	{fp, lr}
  10fd7c:	e28db004 	add	fp, sp, #4
  10fd80:	e24dd018 	sub	sp, sp, #24
  10fd84:	e50b0010 	str	r0, [fp, #-16]
  10fd88:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10fd8c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  struct dns_api_msg *msg = (struct dns_api_msg*)arg;
  10fd90:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10fd94:	e50b3008 	str	r3, [fp, #-8]

  /* we trust the internal implementation to be correct :-) */
  LWIP_UNUSED_ARG(name);

  if (ipaddr == NULL) {
  10fd98:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10fd9c:	e3530000 	cmp	r3, #0
  10fda0:	1a000004 	bne	10fdb8 <lwip_netconn_do_dns_found+0x40>
    /* timeout or memory error */
    API_EXPR_DEREF(msg->err) = ERR_VAL;
  10fda4:	e51b3008 	ldr	r3, [fp, #-8]
  10fda8:	e593300c 	ldr	r3, [r3, #12]
  10fdac:	e3e02005 	mvn	r2, #5
  10fdb0:	e5c32000 	strb	r2, [r3]
  10fdb4:	ea000008 	b	10fddc <lwip_netconn_do_dns_found+0x64>
  } else {
    /* address was resolved */
    API_EXPR_DEREF(msg->err) = ERR_OK;
  10fdb8:	e51b3008 	ldr	r3, [fp, #-8]
  10fdbc:	e593300c 	ldr	r3, [r3, #12]
  10fdc0:	e3a02000 	mov	r2, #0
  10fdc4:	e5c32000 	strb	r2, [r3]
    API_EXPR_DEREF(msg->addr) = *ipaddr;
  10fdc8:	e51b3008 	ldr	r3, [fp, #-8]
  10fdcc:	e5933004 	ldr	r3, [r3, #4]
  10fdd0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  10fdd4:	e5922000 	ldr	r2, [r2]
  10fdd8:	e5832000 	str	r2, [r3]
  }
  /* wake up the application task waiting in netconn_gethostbyname */
  sys_sem_signal(API_EXPR_REF_SEM(msg->sem));
  10fddc:	e51b3008 	ldr	r3, [fp, #-8]
  10fde0:	e5933008 	ldr	r3, [r3, #8]
  10fde4:	e1a00003 	mov	r0, r3
  10fde8:	ebffeac9 	bl	10a914 <sys_sem_signal>
}
  10fdec:	e320f000 	nop	{0}
  10fdf0:	e24bd004 	sub	sp, fp, #4
  10fdf4:	e8bd8800 	pop	{fp, pc}

0010fdf8 <lwip_netconn_do_gethostbyname>:
 *
 * @param arg the dns_api_msg pointing to the query
 */
void
lwip_netconn_do_gethostbyname(void *arg)
{
  10fdf8:	e92d4810 	push	{r4, fp, lr}
  10fdfc:	e28db008 	add	fp, sp, #8
  10fe00:	e24dd01c 	sub	sp, sp, #28
  10fe04:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dns_api_msg *msg = (struct dns_api_msg*)arg;
  10fe08:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10fe0c:	e50b3010 	str	r3, [fp, #-16]
  u8_t addrtype =
  10fe10:	e3a03000 	mov	r3, #0
  10fe14:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    msg->dns_addrtype;
#else
    LWIP_DNS_ADDRTYPE_DEFAULT;
#endif

  API_EXPR_DEREF(msg->err) = dns_gethostbyname_addrtype(msg->name,
  10fe18:	e51b3010 	ldr	r3, [fp, #-16]
  10fe1c:	e5930000 	ldr	r0, [r3]
  10fe20:	e51b3010 	ldr	r3, [fp, #-16]
  10fe24:	e5931004 	ldr	r1, [r3, #4]
  10fe28:	e51b3010 	ldr	r3, [fp, #-16]
  10fe2c:	e593400c 	ldr	r4, [r3, #12]
  10fe30:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  10fe34:	e58d3000 	str	r3, [sp]
  10fe38:	e51b3010 	ldr	r3, [fp, #-16]
  10fe3c:	e30f2d78 	movw	r2, #64888	; 0xfd78
  10fe40:	e3402010 	movt	r2, #16
  10fe44:	eb0020d2 	bl	118194 <dns_gethostbyname_addrtype>
  10fe48:	e1a03000 	mov	r3, r0
  10fe4c:	e5c43000 	strb	r3, [r4]
    API_EXPR_REF(msg->addr), lwip_netconn_do_dns_found, msg, addrtype);
  if (API_EXPR_DEREF(msg->err) != ERR_INPROGRESS) {
  10fe50:	e51b3010 	ldr	r3, [fp, #-16]
  10fe54:	e593300c 	ldr	r3, [r3, #12]
  10fe58:	e1d330d0 	ldrsb	r3, [r3]
  10fe5c:	e3730005 	cmn	r3, #5
  10fe60:	0a000003 	beq	10fe74 <lwip_netconn_do_gethostbyname+0x7c>
    /* on error or immediate success, wake up the application
     * task waiting in netconn_gethostbyname */
    sys_sem_signal(API_EXPR_REF_SEM(msg->sem));
  10fe64:	e51b3010 	ldr	r3, [fp, #-16]
  10fe68:	e5933008 	ldr	r3, [r3, #8]
  10fe6c:	e1a00003 	mov	r0, r3
  10fe70:	ebffeaa7 	bl	10a914 <sys_sem_signal>
  }
}
  10fe74:	e320f000 	nop	{0}
  10fe78:	e24bd008 	sub	sp, fp, #8
  10fe7c:	e8bd8810 	pop	{r4, fp, pc}

0010fe80 <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
  10fe80:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10fe84:	e28db000 	add	fp, sp, #0
  10fe88:	e24dd00c 	sub	sp, sp, #12
  10fe8c:	e1a03000 	mov	r3, r0
  10fe90:	e54b3005 	strb	r3, [fp, #-5]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
  10fe94:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10fe98:	e3530000 	cmp	r3, #0
  10fe9c:	ca000003 	bgt	10feb0 <err_to_errno+0x30>
  10fea0:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10fea4:	e2633000 	rsb	r3, r3, #0
  10fea8:	e3530010 	cmp	r3, #16
  10feac:	da000001 	ble	10feb8 <err_to_errno+0x38>
    return EIO;
  10feb0:	e3a03005 	mov	r3, #5
  10feb4:	ea000004 	b	10fecc <err_to_errno+0x4c>
  }
  return err_to_errno_table[-err];
  10feb8:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10febc:	e2632000 	rsb	r2, r3, #0
  10fec0:	e3063b3c 	movw	r3, #27452	; 0x6b3c
  10fec4:	e3403014 	movt	r3, #20
  10fec8:	e7933102 	ldr	r3, [r3, r2, lsl #2]
}
  10fecc:	e1a00003 	mov	r0, r3
  10fed0:	e28bd000 	add	sp, fp, #0
  10fed4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10fed8:	e12fff1e 	bx	lr

0010fedc <netbuf_new>:
 * @return a pointer to a new netbuf
 *         NULL on lack of memory
 */
struct
netbuf *netbuf_new(void)
{
  10fedc:	e92d4800 	push	{fp, lr}
  10fee0:	e28db004 	add	fp, sp, #4
  10fee4:	e24dd008 	sub	sp, sp, #8
  struct netbuf *buf;

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
  10fee8:	e3a02043 	mov	r2, #67	; 0x43
  10feec:	e3061b80 	movw	r1, #27520	; 0x6b80
  10fef0:	e3401014 	movt	r1, #20
  10fef4:	e3a00007 	mov	r0, #7
  10fef8:	eb002476 	bl	1190d8 <memp_malloc_fn>
  10fefc:	e50b0008 	str	r0, [fp, #-8]
  if (buf != NULL) {
  10ff00:	e51b3008 	ldr	r3, [fp, #-8]
  10ff04:	e3530000 	cmp	r3, #0
  10ff08:	0a000003 	beq	10ff1c <netbuf_new+0x40>
    memset(buf, 0, sizeof(struct netbuf));
  10ff0c:	e3a02010 	mov	r2, #16
  10ff10:	e3a01000 	mov	r1, #0
  10ff14:	e51b0008 	ldr	r0, [fp, #-8]
  10ff18:	eb00c4d5 	bl	141274 <memset>
  }
  return buf;
  10ff1c:	e51b3008 	ldr	r3, [fp, #-8]
}
  10ff20:	e1a00003 	mov	r0, r3
  10ff24:	e24bd004 	sub	sp, fp, #4
  10ff28:	e8bd8800 	pop	{fp, pc}

0010ff2c <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
  10ff2c:	e92d4800 	push	{fp, lr}
  10ff30:	e28db004 	add	fp, sp, #4
  10ff34:	e24dd008 	sub	sp, sp, #8
  10ff38:	e50b0008 	str	r0, [fp, #-8]
  if (buf != NULL) {
  10ff3c:	e51b3008 	ldr	r3, [fp, #-8]
  10ff40:	e3530000 	cmp	r3, #0
  10ff44:	0a000011 	beq	10ff90 <netbuf_delete+0x64>
    if (buf->p != NULL) {
  10ff48:	e51b3008 	ldr	r3, [fp, #-8]
  10ff4c:	e5933000 	ldr	r3, [r3]
  10ff50:	e3530000 	cmp	r3, #0
  10ff54:	0a00000a 	beq	10ff84 <netbuf_delete+0x58>
      pbuf_free(buf->p);
  10ff58:	e51b3008 	ldr	r3, [fp, #-8]
  10ff5c:	e5933000 	ldr	r3, [r3]
  10ff60:	e1a00003 	mov	r0, r3
  10ff64:	eb002bd1 	bl	11aeb0 <pbuf_free>
      buf->p = buf->ptr = NULL;
  10ff68:	e51b3008 	ldr	r3, [fp, #-8]
  10ff6c:	e3a02000 	mov	r2, #0
  10ff70:	e5832004 	str	r2, [r3, #4]
  10ff74:	e51b3008 	ldr	r3, [fp, #-8]
  10ff78:	e5932004 	ldr	r2, [r3, #4]
  10ff7c:	e51b3008 	ldr	r3, [fp, #-8]
  10ff80:	e5832000 	str	r2, [r3]
    }
    memp_free(MEMP_NETBUF, buf);
  10ff84:	e51b1008 	ldr	r1, [fp, #-8]
  10ff88:	e3a00007 	mov	r0, #7
  10ff8c:	eb0024b9 	bl	119278 <memp_free>
  }
}
  10ff90:	e320f000 	nop	{0}
  10ff94:	e24bd004 	sub	sp, fp, #4
  10ff98:	e8bd8800 	pop	{fp, pc}

0010ff9c <netbuf_alloc>:
 * @return pointer to the allocated memory
 *         NULL if no memory could be allocated
 */
void *
netbuf_alloc(struct netbuf *buf, u16_t size)
{
  10ff9c:	e92d4800 	push	{fp, lr}
  10ffa0:	e28db004 	add	fp, sp, #4
  10ffa4:	e24dd008 	sub	sp, sp, #8
  10ffa8:	e50b0008 	str	r0, [fp, #-8]
  10ffac:	e1a03001 	mov	r3, r1
  10ffb0:	e14b30ba 	strh	r3, [fp, #-10]
  LWIP_ERROR("netbuf_alloc: invalid buf", (buf != NULL), return NULL;);
  10ffb4:	e51b3008 	ldr	r3, [fp, #-8]
  10ffb8:	e3530000 	cmp	r3, #0
  10ffbc:	1a000008 	bne	10ffe4 <netbuf_alloc+0x48>
  10ffc0:	e3060bb0 	movw	r0, #27568	; 0x6bb0
  10ffc4:	e3400014 	movt	r0, #20
  10ffc8:	ebffcc51 	bl	103114 <rt_kprintf>
  10ffcc:	e3a01068 	mov	r1, #104	; 0x68
  10ffd0:	e3060b80 	movw	r0, #27520	; 0x6b80
  10ffd4:	e3400014 	movt	r0, #20
  10ffd8:	ebffec44 	bl	10b0f0 <sys_arch_assert>
  10ffdc:	e3a03000 	mov	r3, #0
  10ffe0:	ea000029 	b	11008c <netbuf_alloc+0xf0>

  /* Deallocate any previously allocated memory. */
  if (buf->p != NULL) {
  10ffe4:	e51b3008 	ldr	r3, [fp, #-8]
  10ffe8:	e5933000 	ldr	r3, [r3]
  10ffec:	e3530000 	cmp	r3, #0
  10fff0:	0a000003 	beq	110004 <netbuf_alloc+0x68>
    pbuf_free(buf->p);
  10fff4:	e51b3008 	ldr	r3, [fp, #-8]
  10fff8:	e5933000 	ldr	r3, [r3]
  10fffc:	e1a00003 	mov	r0, r3
  110000:	eb002baa 	bl	11aeb0 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, size, PBUF_RAM);
  110004:	e15b30ba 	ldrh	r3, [fp, #-10]
  110008:	e3a02000 	mov	r2, #0
  11000c:	e1a01003 	mov	r1, r3
  110010:	e3a00000 	mov	r0, #0
  110014:	eb00289e 	bl	11a294 <pbuf_alloc>
  110018:	e1a02000 	mov	r2, r0
  11001c:	e51b3008 	ldr	r3, [fp, #-8]
  110020:	e5832000 	str	r2, [r3]
  if (buf->p == NULL) {
  110024:	e51b3008 	ldr	r3, [fp, #-8]
  110028:	e5933000 	ldr	r3, [r3]
  11002c:	e3530000 	cmp	r3, #0
  110030:	1a000001 	bne	11003c <netbuf_alloc+0xa0>
     return NULL;
  110034:	e3a03000 	mov	r3, #0
  110038:	ea000013 	b	11008c <netbuf_alloc+0xf0>
  }
  LWIP_ASSERT("check that first pbuf can hold size",
  11003c:	e51b3008 	ldr	r3, [fp, #-8]
  110040:	e5933000 	ldr	r3, [r3]
  110044:	e1d330ba 	ldrh	r3, [r3, #10]
  110048:	e15b20ba 	ldrh	r2, [fp, #-10]
  11004c:	e1520003 	cmp	r2, r3
  110050:	9a000006 	bls	110070 <netbuf_alloc+0xd4>
  110054:	e3060bcc 	movw	r0, #27596	; 0x6bcc
  110058:	e3400014 	movt	r0, #20
  11005c:	ebffcc2c 	bl	103114 <rt_kprintf>
  110060:	e3a01073 	mov	r1, #115	; 0x73
  110064:	e3060b80 	movw	r0, #27520	; 0x6b80
  110068:	e3400014 	movt	r0, #20
  11006c:	ebffec1f 	bl	10b0f0 <sys_arch_assert>
             (buf->p->len >= size));
  buf->ptr = buf->p;
  110070:	e51b3008 	ldr	r3, [fp, #-8]
  110074:	e5932000 	ldr	r2, [r3]
  110078:	e51b3008 	ldr	r3, [fp, #-8]
  11007c:	e5832004 	str	r2, [r3, #4]
  return buf->p->payload;
  110080:	e51b3008 	ldr	r3, [fp, #-8]
  110084:	e5933000 	ldr	r3, [r3]
  110088:	e5933004 	ldr	r3, [r3, #4]
}
  11008c:	e1a00003 	mov	r0, r3
  110090:	e24bd004 	sub	sp, fp, #4
  110094:	e8bd8800 	pop	{fp, pc}

00110098 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
  110098:	e92d4800 	push	{fp, lr}
  11009c:	e28db004 	add	fp, sp, #4
  1100a0:	e24dd008 	sub	sp, sp, #8
  1100a4:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
  1100a8:	e51b3008 	ldr	r3, [fp, #-8]
  1100ac:	e3530000 	cmp	r3, #0
  1100b0:	1a000007 	bne	1100d4 <netbuf_free+0x3c>
  1100b4:	e3060bf0 	movw	r0, #27632	; 0x6bf0
  1100b8:	e3400014 	movt	r0, #20
  1100bc:	ebffcc14 	bl	103114 <rt_kprintf>
  1100c0:	e3a01081 	mov	r1, #129	; 0x81
  1100c4:	e3060b80 	movw	r0, #27520	; 0x6b80
  1100c8:	e3400014 	movt	r0, #20
  1100cc:	ebffec07 	bl	10b0f0 <sys_arch_assert>
  1100d0:	ea00000e 	b	110110 <netbuf_free+0x78>
  if (buf->p != NULL) {
  1100d4:	e51b3008 	ldr	r3, [fp, #-8]
  1100d8:	e5933000 	ldr	r3, [r3]
  1100dc:	e3530000 	cmp	r3, #0
  1100e0:	0a000003 	beq	1100f4 <netbuf_free+0x5c>
    pbuf_free(buf->p);
  1100e4:	e51b3008 	ldr	r3, [fp, #-8]
  1100e8:	e5933000 	ldr	r3, [r3]
  1100ec:	e1a00003 	mov	r0, r3
  1100f0:	eb002b6e 	bl	11aeb0 <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
  1100f4:	e51b3008 	ldr	r3, [fp, #-8]
  1100f8:	e3a02000 	mov	r2, #0
  1100fc:	e5832004 	str	r2, [r3, #4]
  110100:	e51b3008 	ldr	r3, [fp, #-8]
  110104:	e5932004 	ldr	r2, [r3, #4]
  110108:	e51b3008 	ldr	r3, [fp, #-8]
  11010c:	e5832000 	str	r2, [r3]
}
  110110:	e24bd004 	sub	sp, fp, #4
  110114:	e8bd8800 	pop	{fp, pc}

00110118 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
  110118:	e92d4800 	push	{fp, lr}
  11011c:	e28db004 	add	fp, sp, #4
  110120:	e24dd010 	sub	sp, sp, #16
  110124:	e50b0008 	str	r0, [fp, #-8]
  110128:	e50b100c 	str	r1, [fp, #-12]
  11012c:	e1a03002 	mov	r3, r2
  110130:	e14b30be 	strh	r3, [fp, #-14]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
  110134:	e51b3008 	ldr	r3, [fp, #-8]
  110138:	e3530000 	cmp	r3, #0
  11013c:	1a000008 	bne	110164 <netbuf_ref+0x4c>
  110140:	e3060c0c 	movw	r0, #27660	; 0x6c0c
  110144:	e3400014 	movt	r0, #20
  110148:	ebffcbf1 	bl	103114 <rt_kprintf>
  11014c:	e3a01095 	mov	r1, #149	; 0x95
  110150:	e3060b80 	movw	r0, #27520	; 0x6b80
  110154:	e3400014 	movt	r0, #20
  110158:	ebffebe4 	bl	10b0f0 <sys_arch_assert>
  11015c:	e3e0300f 	mvn	r3, #15
  110160:	ea000028 	b	110208 <netbuf_ref+0xf0>
  if (buf->p != NULL) {
  110164:	e51b3008 	ldr	r3, [fp, #-8]
  110168:	e5933000 	ldr	r3, [r3]
  11016c:	e3530000 	cmp	r3, #0
  110170:	0a000003 	beq	110184 <netbuf_ref+0x6c>
    pbuf_free(buf->p);
  110174:	e51b3008 	ldr	r3, [fp, #-8]
  110178:	e5933000 	ldr	r3, [r3]
  11017c:	e1a00003 	mov	r0, r3
  110180:	eb002b4a 	bl	11aeb0 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
  110184:	e3a02002 	mov	r2, #2
  110188:	e3a01000 	mov	r1, #0
  11018c:	e3a00000 	mov	r0, #0
  110190:	eb00283f 	bl	11a294 <pbuf_alloc>
  110194:	e1a02000 	mov	r2, r0
  110198:	e51b3008 	ldr	r3, [fp, #-8]
  11019c:	e5832000 	str	r2, [r3]
  if (buf->p == NULL) {
  1101a0:	e51b3008 	ldr	r3, [fp, #-8]
  1101a4:	e5933000 	ldr	r3, [r3]
  1101a8:	e3530000 	cmp	r3, #0
  1101ac:	1a000004 	bne	1101c4 <netbuf_ref+0xac>
    buf->ptr = NULL;
  1101b0:	e51b3008 	ldr	r3, [fp, #-8]
  1101b4:	e3a02000 	mov	r2, #0
  1101b8:	e5832004 	str	r2, [r3, #4]
    return ERR_MEM;
  1101bc:	e3e03000 	mvn	r3, #0
  1101c0:	ea000010 	b	110208 <netbuf_ref+0xf0>
  }
  ((struct pbuf_rom*)buf->p)->payload = dataptr;
  1101c4:	e51b3008 	ldr	r3, [fp, #-8]
  1101c8:	e5933000 	ldr	r3, [r3]
  1101cc:	e51b200c 	ldr	r2, [fp, #-12]
  1101d0:	e5832004 	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
  1101d4:	e51b3008 	ldr	r3, [fp, #-8]
  1101d8:	e5933000 	ldr	r3, [r3]
  1101dc:	e15b20be 	ldrh	r2, [fp, #-14]
  1101e0:	e1c320b8 	strh	r2, [r3, #8]
  1101e4:	e51b2008 	ldr	r2, [fp, #-8]
  1101e8:	e5922000 	ldr	r2, [r2]
  1101ec:	e1d330b8 	ldrh	r3, [r3, #8]
  1101f0:	e1c230ba 	strh	r3, [r2, #10]
  buf->ptr = buf->p;
  1101f4:	e51b3008 	ldr	r3, [fp, #-8]
  1101f8:	e5932000 	ldr	r2, [r3]
  1101fc:	e51b3008 	ldr	r3, [fp, #-8]
  110200:	e5832004 	str	r2, [r3, #4]
  return ERR_OK;
  110204:	e3a03000 	mov	r3, #0
}
  110208:	e1a00003 	mov	r0, r3
  11020c:	e24bd004 	sub	sp, fp, #4
  110210:	e8bd8800 	pop	{fp, pc}

00110214 <netbuf_chain>:
 * @param head the first netbuf
 * @param tail netbuf to chain after head, freed by this function, may not be reference after returning
 */
void
netbuf_chain(struct netbuf *head, struct netbuf *tail)
{
  110214:	e92d4800 	push	{fp, lr}
  110218:	e28db004 	add	fp, sp, #4
  11021c:	e24dd008 	sub	sp, sp, #8
  110220:	e50b0008 	str	r0, [fp, #-8]
  110224:	e50b100c 	str	r1, [fp, #-12]
  LWIP_ERROR("netbuf_chain: invalid head", (head != NULL), return;);
  110228:	e51b3008 	ldr	r3, [fp, #-8]
  11022c:	e3530000 	cmp	r3, #0
  110230:	1a000007 	bne	110254 <netbuf_chain+0x40>
  110234:	e3060c24 	movw	r0, #27684	; 0x6c24
  110238:	e3400014 	movt	r0, #20
  11023c:	ebffcbb4 	bl	103114 <rt_kprintf>
  110240:	e3a010ae 	mov	r1, #174	; 0xae
  110244:	e3060b80 	movw	r0, #27520	; 0x6b80
  110248:	e3400014 	movt	r0, #20
  11024c:	ebffeba7 	bl	10b0f0 <sys_arch_assert>
  110250:	ea000018 	b	1102b8 <netbuf_chain+0xa4>
  LWIP_ERROR("netbuf_chain: invalid tail", (tail != NULL), return;);
  110254:	e51b300c 	ldr	r3, [fp, #-12]
  110258:	e3530000 	cmp	r3, #0
  11025c:	1a000007 	bne	110280 <netbuf_chain+0x6c>
  110260:	e3060c40 	movw	r0, #27712	; 0x6c40
  110264:	e3400014 	movt	r0, #20
  110268:	ebffcba9 	bl	103114 <rt_kprintf>
  11026c:	e3a010af 	mov	r1, #175	; 0xaf
  110270:	e3060b80 	movw	r0, #27520	; 0x6b80
  110274:	e3400014 	movt	r0, #20
  110278:	ebffeb9c 	bl	10b0f0 <sys_arch_assert>
  11027c:	ea00000d 	b	1102b8 <netbuf_chain+0xa4>
  pbuf_cat(head->p, tail->p);
  110280:	e51b3008 	ldr	r3, [fp, #-8]
  110284:	e5932000 	ldr	r2, [r3]
  110288:	e51b300c 	ldr	r3, [fp, #-12]
  11028c:	e5933000 	ldr	r3, [r3]
  110290:	e1a01003 	mov	r1, r3
  110294:	e1a00002 	mov	r0, r2
  110298:	eb002bbb 	bl	11b18c <pbuf_cat>
  head->ptr = head->p;
  11029c:	e51b3008 	ldr	r3, [fp, #-8]
  1102a0:	e5932000 	ldr	r2, [r3]
  1102a4:	e51b3008 	ldr	r3, [fp, #-8]
  1102a8:	e5832004 	str	r2, [r3, #4]
  memp_free(MEMP_NETBUF, tail);
  1102ac:	e51b100c 	ldr	r1, [fp, #-12]
  1102b0:	e3a00007 	mov	r0, #7
  1102b4:	eb0023ef 	bl	119278 <memp_free>
}
  1102b8:	e24bd004 	sub	sp, fp, #4
  1102bc:	e8bd8800 	pop	{fp, pc}

001102c0 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
  1102c0:	e92d4800 	push	{fp, lr}
  1102c4:	e28db004 	add	fp, sp, #4
  1102c8:	e24dd010 	sub	sp, sp, #16
  1102cc:	e50b0008 	str	r0, [fp, #-8]
  1102d0:	e50b100c 	str	r1, [fp, #-12]
  1102d4:	e50b2010 	str	r2, [fp, #-16]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
  1102d8:	e51b3008 	ldr	r3, [fp, #-8]
  1102dc:	e3530000 	cmp	r3, #0
  1102e0:	1a000008 	bne	110308 <netbuf_data+0x48>
  1102e4:	e3060c5c 	movw	r0, #27740	; 0x6c5c
  1102e8:	e3400014 	movt	r0, #20
  1102ec:	ebffcb88 	bl	103114 <rt_kprintf>
  1102f0:	e3a010c2 	mov	r1, #194	; 0xc2
  1102f4:	e3060b80 	movw	r0, #27520	; 0x6b80
  1102f8:	e3400014 	movt	r0, #20
  1102fc:	ebffeb7b 	bl	10b0f0 <sys_arch_assert>
  110300:	e3e0300f 	mvn	r3, #15
  110304:	ea000028 	b	1103ac <netbuf_data+0xec>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
  110308:	e51b300c 	ldr	r3, [fp, #-12]
  11030c:	e3530000 	cmp	r3, #0
  110310:	1a000008 	bne	110338 <netbuf_data+0x78>
  110314:	e3060c78 	movw	r0, #27768	; 0x6c78
  110318:	e3400014 	movt	r0, #20
  11031c:	ebffcb7c 	bl	103114 <rt_kprintf>
  110320:	e3a010c3 	mov	r1, #195	; 0xc3
  110324:	e3060b80 	movw	r0, #27520	; 0x6b80
  110328:	e3400014 	movt	r0, #20
  11032c:	ebffeb6f 	bl	10b0f0 <sys_arch_assert>
  110330:	e3e0300f 	mvn	r3, #15
  110334:	ea00001c 	b	1103ac <netbuf_data+0xec>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
  110338:	e51b3010 	ldr	r3, [fp, #-16]
  11033c:	e3530000 	cmp	r3, #0
  110340:	1a000008 	bne	110368 <netbuf_data+0xa8>
  110344:	e3060c98 	movw	r0, #27800	; 0x6c98
  110348:	e3400014 	movt	r0, #20
  11034c:	ebffcb70 	bl	103114 <rt_kprintf>
  110350:	e3a010c4 	mov	r1, #196	; 0xc4
  110354:	e3060b80 	movw	r0, #27520	; 0x6b80
  110358:	e3400014 	movt	r0, #20
  11035c:	ebffeb63 	bl	10b0f0 <sys_arch_assert>
  110360:	e3e0300f 	mvn	r3, #15
  110364:	ea000010 	b	1103ac <netbuf_data+0xec>

  if (buf->ptr == NULL) {
  110368:	e51b3008 	ldr	r3, [fp, #-8]
  11036c:	e5933004 	ldr	r3, [r3, #4]
  110370:	e3530000 	cmp	r3, #0
  110374:	1a000001 	bne	110380 <netbuf_data+0xc0>
    return ERR_BUF;
  110378:	e3e03001 	mvn	r3, #1
  11037c:	ea00000a 	b	1103ac <netbuf_data+0xec>
  }
  *dataptr = buf->ptr->payload;
  110380:	e51b3008 	ldr	r3, [fp, #-8]
  110384:	e5933004 	ldr	r3, [r3, #4]
  110388:	e5932004 	ldr	r2, [r3, #4]
  11038c:	e51b300c 	ldr	r3, [fp, #-12]
  110390:	e5832000 	str	r2, [r3]
  *len = buf->ptr->len;
  110394:	e51b3008 	ldr	r3, [fp, #-8]
  110398:	e5933004 	ldr	r3, [r3, #4]
  11039c:	e1d320ba 	ldrh	r2, [r3, #10]
  1103a0:	e51b3010 	ldr	r3, [fp, #-16]
  1103a4:	e1c320b0 	strh	r2, [r3]
  return ERR_OK;
  1103a8:	e3a03000 	mov	r3, #0
}
  1103ac:	e1a00003 	mov	r0, r3
  1103b0:	e24bd004 	sub	sp, fp, #4
  1103b4:	e8bd8800 	pop	{fp, pc}

001103b8 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
  1103b8:	e92d4800 	push	{fp, lr}
  1103bc:	e28db004 	add	fp, sp, #4
  1103c0:	e24dd008 	sub	sp, sp, #8
  1103c4:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
  1103c8:	e51b3008 	ldr	r3, [fp, #-8]
  1103cc:	e3530000 	cmp	r3, #0
  1103d0:	1a000008 	bne	1103f8 <netbuf_next+0x40>
  1103d4:	e3060cb4 	movw	r0, #27828	; 0x6cb4
  1103d8:	e3400014 	movt	r0, #20
  1103dc:	ebffcb4c 	bl	103114 <rt_kprintf>
  1103e0:	e3a010dc 	mov	r1, #220	; 0xdc
  1103e4:	e3060b80 	movw	r0, #27520	; 0x6b80
  1103e8:	e3400014 	movt	r0, #20
  1103ec:	ebffeb3f 	bl	10b0f0 <sys_arch_assert>
  1103f0:	e3e03000 	mvn	r3, #0
  1103f4:	ea000013 	b	110448 <netbuf_next+0x90>
  if (buf->ptr->next == NULL) {
  1103f8:	e51b3008 	ldr	r3, [fp, #-8]
  1103fc:	e5933004 	ldr	r3, [r3, #4]
  110400:	e5933000 	ldr	r3, [r3]
  110404:	e3530000 	cmp	r3, #0
  110408:	1a000001 	bne	110414 <netbuf_next+0x5c>
    return -1;
  11040c:	e3e03000 	mvn	r3, #0
  110410:	ea00000c 	b	110448 <netbuf_next+0x90>
  }
  buf->ptr = buf->ptr->next;
  110414:	e51b3008 	ldr	r3, [fp, #-8]
  110418:	e5933004 	ldr	r3, [r3, #4]
  11041c:	e5932000 	ldr	r2, [r3]
  110420:	e51b3008 	ldr	r3, [fp, #-8]
  110424:	e5832004 	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
  110428:	e51b3008 	ldr	r3, [fp, #-8]
  11042c:	e5933004 	ldr	r3, [r3, #4]
  110430:	e5933000 	ldr	r3, [r3]
  110434:	e3530000 	cmp	r3, #0
  110438:	1a000001 	bne	110444 <netbuf_next+0x8c>
    return 1;
  11043c:	e3a03001 	mov	r3, #1
  110440:	ea000000 	b	110448 <netbuf_next+0x90>
  }
  return 0;
  110444:	e3a03000 	mov	r3, #0
}
  110448:	e1a00003 	mov	r0, r3
  11044c:	e24bd004 	sub	sp, fp, #4
  110450:	e8bd8800 	pop	{fp, pc}

00110454 <netbuf_first>:
 *
 * @param buf the netbuf to modify
 */
void
netbuf_first(struct netbuf *buf)
{
  110454:	e92d4800 	push	{fp, lr}
  110458:	e28db004 	add	fp, sp, #4
  11045c:	e24dd008 	sub	sp, sp, #8
  110460:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ERROR("netbuf_first: invalid buf", (buf != NULL), return;);
  110464:	e51b3008 	ldr	r3, [fp, #-8]
  110468:	e3530000 	cmp	r3, #0
  11046c:	1a000007 	bne	110490 <netbuf_first+0x3c>
  110470:	e3060cd0 	movw	r0, #27856	; 0x6cd0
  110474:	e3400014 	movt	r0, #20
  110478:	ebffcb25 	bl	103114 <rt_kprintf>
  11047c:	e3a010f2 	mov	r1, #242	; 0xf2
  110480:	e3060b80 	movw	r0, #27520	; 0x6b80
  110484:	e3400014 	movt	r0, #20
  110488:	ebffeb18 	bl	10b0f0 <sys_arch_assert>
  11048c:	ea000003 	b	1104a0 <netbuf_first+0x4c>
  buf->ptr = buf->p;
  110490:	e51b3008 	ldr	r3, [fp, #-8]
  110494:	e5932000 	ldr	r2, [r3]
  110498:	e51b3008 	ldr	r3, [fp, #-8]
  11049c:	e5832004 	str	r2, [r3, #4]
}
  1104a0:	e24bd004 	sub	sp, fp, #4
  1104a4:	e8bd8800 	pop	{fp, pc}

001104a8 <lwip_gethostbyname>:
 * @return an entry containing addresses of address family AF_INET
 *         for the host with name name
 */
struct hostent*
lwip_gethostbyname(const char *name)
{
  1104a8:	e92d4800 	push	{fp, lr}
  1104ac:	e28db004 	add	fp, sp, #4
  1104b0:	e24dd010 	sub	sp, sp, #16
  1104b4:	e50b0010 	str	r0, [fp, #-16]
  HOSTENT_STORAGE ip_addr_t s_hostent_addr;
  HOSTENT_STORAGE ip_addr_t *s_phostent_addr[2];
  HOSTENT_STORAGE char s_hostname[DNS_MAX_NAME_LENGTH + 1];

  /* query host IP address */
  err = netconn_gethostbyname(name, &addr);
  1104b8:	e24b300c 	sub	r3, fp, #12
  1104bc:	e1a01003 	mov	r1, r3
  1104c0:	e51b0010 	ldr	r0, [fp, #-16]
  1104c4:	ebffef98 	bl	10c32c <netconn_gethostbyname>
  1104c8:	e1a03000 	mov	r3, r0
  1104cc:	e54b3005 	strb	r3, [fp, #-5]
  if (err != ERR_OK) {
  1104d0:	e15b30d5 	ldrsb	r3, [fp, #-5]
  1104d4:	e3530000 	cmp	r3, #0
  1104d8:	0a000005 	beq	1104f4 <lwip_gethostbyname+0x4c>
    LWIP_DEBUGF(DNS_DEBUG, ("lwip_gethostbyname(%s) failed, err=%d\n", name, err));
    h_errno = HOST_NOT_FOUND;
  1104dc:	e30f3590 	movw	r3, #62864	; 0xf590
  1104e0:	e3403014 	movt	r3, #20
  1104e4:	e3a020d2 	mov	r2, #210	; 0xd2
  1104e8:	e5832000 	str	r2, [r3]
    return NULL;
  1104ec:	e3a03000 	mov	r3, #0
  1104f0:	ea000032 	b	1105c0 <lwip_gethostbyname+0x118>
  }

  /* fill hostent */
  s_hostent_addr = addr;
  1104f4:	e30d3a68 	movw	r3, #55912	; 0xda68
  1104f8:	e3403014 	movt	r3, #20
  1104fc:	e51b200c 	ldr	r2, [fp, #-12]
  110500:	e5832000 	str	r2, [r3]
  s_phostent_addr[0] = &s_hostent_addr;
  110504:	e30d3a6c 	movw	r3, #55916	; 0xda6c
  110508:	e3403014 	movt	r3, #20
  11050c:	e30d2a68 	movw	r2, #55912	; 0xda68
  110510:	e3402014 	movt	r2, #20
  110514:	e5832000 	str	r2, [r3]
  s_phostent_addr[1] = NULL;
  110518:	e30d3a6c 	movw	r3, #55916	; 0xda6c
  11051c:	e3403014 	movt	r3, #20
  110520:	e3a02000 	mov	r2, #0
  110524:	e5832004 	str	r2, [r3, #4]
  strncpy(s_hostname, name, DNS_MAX_NAME_LENGTH);
  110528:	e3a02c01 	mov	r2, #256	; 0x100
  11052c:	e51b1010 	ldr	r1, [fp, #-16]
  110530:	e30d0a74 	movw	r0, #55924	; 0xda74
  110534:	e3400014 	movt	r0, #20
  110538:	eb00c42f 	bl	1415fc <strncpy>
  s_hostname[DNS_MAX_NAME_LENGTH] = 0;
  11053c:	e30d3a74 	movw	r3, #55924	; 0xda74
  110540:	e3403014 	movt	r3, #20
  110544:	e3a02000 	mov	r2, #0
  110548:	e5c32100 	strb	r2, [r3, #256]	; 0x100
  s_hostent.h_name = s_hostname;
  11054c:	e30d3b78 	movw	r3, #56184	; 0xdb78
  110550:	e3403014 	movt	r3, #20
  110554:	e30d2a74 	movw	r2, #55924	; 0xda74
  110558:	e3402014 	movt	r2, #20
  11055c:	e5832000 	str	r2, [r3]
  s_aliases = NULL;
  110560:	e30d3b8c 	movw	r3, #56204	; 0xdb8c
  110564:	e3403014 	movt	r3, #20
  110568:	e3a02000 	mov	r2, #0
  11056c:	e5832000 	str	r2, [r3]
  s_hostent.h_aliases = &s_aliases;
  110570:	e30d3b78 	movw	r3, #56184	; 0xdb78
  110574:	e3403014 	movt	r3, #20
  110578:	e30d2b8c 	movw	r2, #56204	; 0xdb8c
  11057c:	e3402014 	movt	r2, #20
  110580:	e5832004 	str	r2, [r3, #4]
  s_hostent.h_addrtype = AF_INET;
  110584:	e30d3b78 	movw	r3, #56184	; 0xdb78
  110588:	e3403014 	movt	r3, #20
  11058c:	e3a02002 	mov	r2, #2
  110590:	e5832008 	str	r2, [r3, #8]
  s_hostent.h_length = sizeof(ip_addr_t);
  110594:	e30d3b78 	movw	r3, #56184	; 0xdb78
  110598:	e3403014 	movt	r3, #20
  11059c:	e3a02004 	mov	r2, #4
  1105a0:	e583200c 	str	r2, [r3, #12]
  s_hostent.h_addr_list = (char**)&s_phostent_addr;
  1105a4:	e30d3b78 	movw	r3, #56184	; 0xdb78
  1105a8:	e3403014 	movt	r3, #20
  1105ac:	e30d2a6c 	movw	r2, #55916	; 0xda6c
  1105b0:	e3402014 	movt	r2, #20
  1105b4:	e5832010 	str	r2, [r3, #16]

#if LWIP_DNS_API_HOSTENT_STORAGE
  /* this function should return the "per-thread" hostent after copy from s_hostent */
  return sys_thread_hostent(&s_hostent);
#else
  return &s_hostent;
  1105b8:	e30d3b78 	movw	r3, #56184	; 0xdb78
  1105bc:	e3403014 	movt	r3, #20
#endif /* LWIP_DNS_API_HOSTENT_STORAGE */
}
  1105c0:	e1a00003 	mov	r0, r3
  1105c4:	e24bd004 	sub	sp, fp, #4
  1105c8:	e8bd8800 	pop	{fp, pc}

001105cc <lwip_gethostbyname_r>:
 *         is stored in *h_errnop instead of h_errno to be thread-safe
 */
int
lwip_gethostbyname_r(const char *name, struct hostent *ret, char *buf,
                size_t buflen, struct hostent **result, int *h_errnop)
{
  1105cc:	e92d4800 	push	{fp, lr}
  1105d0:	e28db004 	add	fp, sp, #4
  1105d4:	e24dd028 	sub	sp, sp, #40	; 0x28
  1105d8:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  1105dc:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  1105e0:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  1105e4:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  struct gethostbyname_r_helper *h;
  char *hostname;
  size_t namelen;
  int lh_errno;

  if (h_errnop == NULL) {
  1105e8:	e59b3008 	ldr	r3, [fp, #8]
  1105ec:	e3530000 	cmp	r3, #0
  1105f0:	1a000001 	bne	1105fc <lwip_gethostbyname_r+0x30>
    /* ensure h_errnop is never NULL */
    h_errnop = &lh_errno;
  1105f4:	e24b3018 	sub	r3, fp, #24
  1105f8:	e58b3008 	str	r3, [fp, #8]
  }

  if (result == NULL) {
  1105fc:	e59b3004 	ldr	r3, [fp, #4]
  110600:	e3530000 	cmp	r3, #0
  110604:	1a000004 	bne	11061c <lwip_gethostbyname_r+0x50>
    /* not all arguments given */
    *h_errnop = EINVAL;
  110608:	e59b3008 	ldr	r3, [fp, #8]
  11060c:	e3a02016 	mov	r2, #22
  110610:	e5832000 	str	r2, [r3]
    return -1;
  110614:	e3e03000 	mvn	r3, #0
  110618:	ea00005a 	b	110788 <lwip_gethostbyname_r+0x1bc>
  }
  /* first thing to do: set *result to nothing */
  *result = NULL;
  11061c:	e59b3004 	ldr	r3, [fp, #4]
  110620:	e3a02000 	mov	r2, #0
  110624:	e5832000 	str	r2, [r3]
  if ((name == NULL) || (ret == NULL) || (buf == NULL)) {
  110628:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11062c:	e3530000 	cmp	r3, #0
  110630:	0a000005 	beq	11064c <lwip_gethostbyname_r+0x80>
  110634:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  110638:	e3530000 	cmp	r3, #0
  11063c:	0a000002 	beq	11064c <lwip_gethostbyname_r+0x80>
  110640:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  110644:	e3530000 	cmp	r3, #0
  110648:	1a000004 	bne	110660 <lwip_gethostbyname_r+0x94>
    /* not all arguments given */
    *h_errnop = EINVAL;
  11064c:	e59b3008 	ldr	r3, [fp, #8]
  110650:	e3a02016 	mov	r2, #22
  110654:	e5832000 	str	r2, [r3]
    return -1;
  110658:	e3e03000 	mvn	r3, #0
  11065c:	ea000049 	b	110788 <lwip_gethostbyname_r+0x1bc>
  }

  namelen = strlen(name);
  110660:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  110664:	eb00c393 	bl	1414b8 <strlen>
  110668:	e50b0008 	str	r0, [fp, #-8]
  if (buflen < (sizeof(struct gethostbyname_r_helper) + namelen + 1 + (MEM_ALIGNMENT - 1))) {
  11066c:	e51b3008 	ldr	r3, [fp, #-8]
  110670:	e2833014 	add	r3, r3, #20
  110674:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  110678:	e1520003 	cmp	r2, r3
  11067c:	2a000004 	bcs	110694 <lwip_gethostbyname_r+0xc8>
    /* buf can't hold the data needed + a copy of name */
    *h_errnop = ERANGE;
  110680:	e59b3008 	ldr	r3, [fp, #8]
  110684:	e3a02022 	mov	r2, #34	; 0x22
  110688:	e5832000 	str	r2, [r3]
    return -1;
  11068c:	e3e03000 	mvn	r3, #0
  110690:	ea00003c 	b	110788 <lwip_gethostbyname_r+0x1bc>
  }

  h = (struct gethostbyname_r_helper*)LWIP_MEM_ALIGN(buf);
  110694:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  110698:	e2833003 	add	r3, r3, #3
  11069c:	e3c33003 	bic	r3, r3, #3
  1106a0:	e50b300c 	str	r3, [fp, #-12]
  hostname = ((char*)h) + sizeof(struct gethostbyname_r_helper);
  1106a4:	e51b300c 	ldr	r3, [fp, #-12]
  1106a8:	e2833010 	add	r3, r3, #16
  1106ac:	e50b3010 	str	r3, [fp, #-16]

  /* query host IP address */
  err = netconn_gethostbyname(name, &h->addr);
  1106b0:	e51b300c 	ldr	r3, [fp, #-12]
  1106b4:	e2833008 	add	r3, r3, #8
  1106b8:	e1a01003 	mov	r1, r3
  1106bc:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1106c0:	ebffef19 	bl	10c32c <netconn_gethostbyname>
  1106c4:	e1a03000 	mov	r3, r0
  1106c8:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  if (err != ERR_OK) {
  1106cc:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  1106d0:	e3530000 	cmp	r3, #0
  1106d4:	0a000004 	beq	1106ec <lwip_gethostbyname_r+0x120>
    LWIP_DEBUGF(DNS_DEBUG, ("lwip_gethostbyname(%s) failed, err=%d\n", name, err));
    *h_errnop = HOST_NOT_FOUND;
  1106d8:	e59b3008 	ldr	r3, [fp, #8]
  1106dc:	e3a020d2 	mov	r2, #210	; 0xd2
  1106e0:	e5832000 	str	r2, [r3]
    return -1;
  1106e4:	e3e03000 	mvn	r3, #0
  1106e8:	ea000026 	b	110788 <lwip_gethostbyname_r+0x1bc>
  }

  /* copy the hostname into buf */
  MEMCPY(hostname, name, namelen);
  1106ec:	e51b2008 	ldr	r2, [fp, #-8]
  1106f0:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  1106f4:	e51b0010 	ldr	r0, [fp, #-16]
  1106f8:	eb00c1a5 	bl	140d94 <memcpy>
  hostname[namelen] = 0;
  1106fc:	e51b2010 	ldr	r2, [fp, #-16]
  110700:	e51b3008 	ldr	r3, [fp, #-8]
  110704:	e0823003 	add	r3, r2, r3
  110708:	e3a02000 	mov	r2, #0
  11070c:	e5c32000 	strb	r2, [r3]

  /* fill hostent */
  h->addr_list[0] = &h->addr;
  110710:	e51b300c 	ldr	r3, [fp, #-12]
  110714:	e2832008 	add	r2, r3, #8
  110718:	e51b300c 	ldr	r3, [fp, #-12]
  11071c:	e5832000 	str	r2, [r3]
  h->addr_list[1] = NULL;
  110720:	e51b300c 	ldr	r3, [fp, #-12]
  110724:	e3a02000 	mov	r2, #0
  110728:	e5832004 	str	r2, [r3, #4]
  h->aliases = NULL;
  11072c:	e51b300c 	ldr	r3, [fp, #-12]
  110730:	e3a02000 	mov	r2, #0
  110734:	e583200c 	str	r2, [r3, #12]
  ret->h_name = hostname;
  110738:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11073c:	e51b2010 	ldr	r2, [fp, #-16]
  110740:	e5832000 	str	r2, [r3]
  ret->h_aliases = &h->aliases;
  110744:	e51b300c 	ldr	r3, [fp, #-12]
  110748:	e283200c 	add	r2, r3, #12
  11074c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  110750:	e5832004 	str	r2, [r3, #4]
  ret->h_addrtype = AF_INET;
  110754:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  110758:	e3a02002 	mov	r2, #2
  11075c:	e5832008 	str	r2, [r3, #8]
  ret->h_length = sizeof(ip_addr_t);
  110760:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  110764:	e3a02004 	mov	r2, #4
  110768:	e583200c 	str	r2, [r3, #12]
  ret->h_addr_list = (char**)&h->addr_list;
  11076c:	e51b200c 	ldr	r2, [fp, #-12]
  110770:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  110774:	e5832010 	str	r2, [r3, #16]

  /* set result != NULL */
  *result = ret;
  110778:	e59b3004 	ldr	r3, [fp, #4]
  11077c:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  110780:	e5832000 	str	r2, [r3]

  /* return success */
  return 0;
  110784:	e3a03000 	mov	r3, #0
}
  110788:	e1a00003 	mov	r0, r3
  11078c:	e24bd004 	sub	sp, fp, #4
  110790:	e8bd8800 	pop	{fp, pc}

00110794 <lwip_freeaddrinfo>:
 *
 * @param ai struct addrinfo to free
 */
void
lwip_freeaddrinfo(struct addrinfo *ai)
{
  110794:	e92d4800 	push	{fp, lr}
  110798:	e28db004 	add	fp, sp, #4
  11079c:	e24dd010 	sub	sp, sp, #16
  1107a0:	e50b0010 	str	r0, [fp, #-16]
  struct addrinfo *next;

  while (ai != NULL) {
  1107a4:	ea000007 	b	1107c8 <lwip_freeaddrinfo+0x34>
    next = ai->ai_next;
  1107a8:	e51b3010 	ldr	r3, [fp, #-16]
  1107ac:	e593301c 	ldr	r3, [r3, #28]
  1107b0:	e50b3008 	str	r3, [fp, #-8]
    memp_free(MEMP_NETDB, ai);
  1107b4:	e51b1010 	ldr	r1, [fp, #-16]
  1107b8:	e3a0000e 	mov	r0, #14
  1107bc:	eb0022ad 	bl	119278 <memp_free>
    ai = next;
  1107c0:	e51b3008 	ldr	r3, [fp, #-8]
  1107c4:	e50b3010 	str	r3, [fp, #-16]
  while (ai != NULL) {
  1107c8:	e51b3010 	ldr	r3, [fp, #-16]
  1107cc:	e3530000 	cmp	r3, #0
  1107d0:	1afffff4 	bne	1107a8 <lwip_freeaddrinfo+0x14>
  }
}
  1107d4:	e320f000 	nop	{0}
  1107d8:	e24bd004 	sub	sp, fp, #4
  1107dc:	e8bd8800 	pop	{fp, pc}

001107e0 <lwip_getaddrinfo>:
 * @todo: implement AI_V4MAPPED, AI_ADDRCONFIG
 */
int
lwip_getaddrinfo(const char *nodename, const char *servname,
       const struct addrinfo *hints, struct addrinfo **res)
{
  1107e0:	e92d4800 	push	{fp, lr}
  1107e4:	e28db004 	add	fp, sp, #4
  1107e8:	e24dd038 	sub	sp, sp, #56	; 0x38
  1107ec:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  1107f0:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  1107f4:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
  1107f8:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  err_t err;
  ip_addr_t addr;
  struct addrinfo *ai;
  struct sockaddr_storage *sa = NULL;
  1107fc:	e3a03000 	mov	r3, #0
  110800:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  int port_nr = 0;
  110804:	e3a03000 	mov	r3, #0
  110808:	e50b3008 	str	r3, [fp, #-8]
  size_t total_size;
  size_t namelen = 0;
  11080c:	e3a03000 	mov	r3, #0
  110810:	e50b3010 	str	r3, [fp, #-16]
  int ai_family;

  if (res == NULL) {
  110814:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  110818:	e3530000 	cmp	r3, #0
  11081c:	1a000001 	bne	110828 <lwip_getaddrinfo+0x48>
    return EAI_FAIL;
  110820:	e3a030ca 	mov	r3, #202	; 0xca
  110824:	ea0000d0 	b	110b6c <lwip_getaddrinfo+0x38c>
  }
  *res = NULL;
  110828:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  11082c:	e3a02000 	mov	r2, #0
  110830:	e5832000 	str	r2, [r3]
  if ((nodename == NULL) && (servname == NULL)) {
  110834:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  110838:	e3530000 	cmp	r3, #0
  11083c:	1a000004 	bne	110854 <lwip_getaddrinfo+0x74>
  110840:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  110844:	e3530000 	cmp	r3, #0
  110848:	1a000001 	bne	110854 <lwip_getaddrinfo+0x74>
    return EAI_NONAME;
  11084c:	e3a030c8 	mov	r3, #200	; 0xc8
  110850:	ea0000c5 	b	110b6c <lwip_getaddrinfo+0x38c>
  }

  if (hints != NULL) {
  110854:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110858:	e3530000 	cmp	r3, #0
  11085c:	0a00000a 	beq	11088c <lwip_getaddrinfo+0xac>
    ai_family = hints->ai_family;
  110860:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110864:	e5933004 	ldr	r3, [r3, #4]
  110868:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    if ((ai_family != AF_UNSPEC)
  11086c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  110870:	e3530000 	cmp	r3, #0
  110874:	0a000006 	beq	110894 <lwip_getaddrinfo+0xb4>
#if LWIP_IPV4
      && (ai_family != AF_INET)
  110878:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11087c:	e3530002 	cmp	r3, #2
  110880:	0a000003 	beq	110894 <lwip_getaddrinfo+0xb4>
#endif /* LWIP_IPV4 */
#if LWIP_IPV6
      && (ai_family != AF_INET6)
#endif /* LWIP_IPV6 */
      ) {
      return EAI_FAMILY;
  110884:	e3a030cc 	mov	r3, #204	; 0xcc
  110888:	ea0000b7 	b	110b6c <lwip_getaddrinfo+0x38c>
    }
  } else {
    ai_family = AF_UNSPEC;
  11088c:	e3a03000 	mov	r3, #0
  110890:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  }

  if (servname != NULL) {
  110894:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  110898:	e3530000 	cmp	r3, #0
  11089c:	0a00000a 	beq	1108cc <lwip_getaddrinfo+0xec>
    /* service name specified: convert to port number
     * @todo?: currently, only ASCII integers (port numbers) are supported (AI_NUMERICSERV)! */
    port_nr = atoi(servname);
  1108a0:	e51b0034 	ldr	r0, [fp, #-52]	; 0xffffffcc
  1108a4:	eb00c10e 	bl	140ce4 <atoi>
  1108a8:	e50b0008 	str	r0, [fp, #-8]
    if ((port_nr <= 0) || (port_nr > 0xffff)) {
  1108ac:	e51b3008 	ldr	r3, [fp, #-8]
  1108b0:	e3530000 	cmp	r3, #0
  1108b4:	da000002 	ble	1108c4 <lwip_getaddrinfo+0xe4>
  1108b8:	e51b3008 	ldr	r3, [fp, #-8]
  1108bc:	e3530801 	cmp	r3, #65536	; 0x10000
  1108c0:	ba000001 	blt	1108cc <lwip_getaddrinfo+0xec>
      return EAI_SERVICE;
  1108c4:	e3a030c9 	mov	r3, #201	; 0xc9
  1108c8:	ea0000a7 	b	110b6c <lwip_getaddrinfo+0x38c>
    }
  }

  if (nodename != NULL) {
  1108cc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1108d0:	e3530000 	cmp	r3, #0
  1108d4:	0a00001b 	beq	110948 <lwip_getaddrinfo+0x168>
    /* service location specified, try to resolve */
    if ((hints != NULL) && (hints->ai_flags & AI_NUMERICHOST)) {
  1108d8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1108dc:	e3530000 	cmp	r3, #0
  1108e0:	0a00000d 	beq	11091c <lwip_getaddrinfo+0x13c>
  1108e4:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1108e8:	e5933000 	ldr	r3, [r3]
  1108ec:	e2033004 	and	r3, r3, #4
  1108f0:	e3530000 	cmp	r3, #0
  1108f4:	0a000008 	beq	11091c <lwip_getaddrinfo+0x13c>
      /* no DNS lookup, just parse for an address string */
      if (!ipaddr_aton(nodename, &addr)) {
  1108f8:	e24b3028 	sub	r3, fp, #40	; 0x28
  1108fc:	e1a01003 	mov	r1, r3
  110900:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  110904:	eb008777 	bl	1326e8 <ip4addr_aton>
  110908:	e1a03000 	mov	r3, r0
  11090c:	e3530000 	cmp	r3, #0
  110910:	1a00001a 	bne	110980 <lwip_getaddrinfo+0x1a0>
        return EAI_NONAME;
  110914:	e3a030c8 	mov	r3, #200	; 0xc8
  110918:	ea000093 	b	110b6c <lwip_getaddrinfo+0x38c>
        type = NETCONN_DNS_IPV4;
      } else if (ai_family == AF_INET6) {
        type = NETCONN_DNS_IPV6;
      }
#endif /* LWIP_IPV4 && LWIP_IPV6 */
      err = netconn_gethostbyname_addrtype(nodename, &addr, type);
  11091c:	e24b3028 	sub	r3, fp, #40	; 0x28
  110920:	e1a01003 	mov	r1, r3
  110924:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  110928:	ebffee7f 	bl	10c32c <netconn_gethostbyname>
  11092c:	e1a03000 	mov	r3, r0
  110930:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
      if (err != ERR_OK) {
  110934:	e15b31d9 	ldrsb	r3, [fp, #-25]	; 0xffffffe7
  110938:	e3530000 	cmp	r3, #0
  11093c:	0a00000f 	beq	110980 <lwip_getaddrinfo+0x1a0>
        return EAI_FAIL;
  110940:	e3a030ca 	mov	r3, #202	; 0xca
  110944:	ea000088 	b	110b6c <lwip_getaddrinfo+0x38c>
      }
    }
  } else {
    /* service location specified, use loopback address */
    if ((hints != NULL) && (hints->ai_flags & AI_PASSIVE)) {
  110948:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  11094c:	e3530000 	cmp	r3, #0
  110950:	0a000007 	beq	110974 <lwip_getaddrinfo+0x194>
  110954:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110958:	e5933000 	ldr	r3, [r3]
  11095c:	e2033001 	and	r3, r3, #1
  110960:	e3530000 	cmp	r3, #0
  110964:	0a000002 	beq	110974 <lwip_getaddrinfo+0x194>
      ip_addr_set_any(ai_family == AF_INET6, &addr);
  110968:	e3a03000 	mov	r3, #0
  11096c:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  110970:	ea000002 	b	110980 <lwip_getaddrinfo+0x1a0>
    } else {
      ip_addr_set_loopback(ai_family == AF_INET6, &addr);
  110974:	e3a0307f 	mov	r3, #127	; 0x7f
  110978:	e3403100 	movt	r3, #256	; 0x100
  11097c:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
    }
  }

  total_size = sizeof(struct addrinfo) + sizeof(struct sockaddr_storage);
  110980:	e3a03030 	mov	r3, #48	; 0x30
  110984:	e50b300c 	str	r3, [fp, #-12]
  if (nodename != NULL) {
  110988:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  11098c:	e3530000 	cmp	r3, #0
  110990:	0a00001a 	beq	110a00 <lwip_getaddrinfo+0x220>
    namelen = strlen(nodename);
  110994:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  110998:	eb00c2c6 	bl	1414b8 <strlen>
  11099c:	e50b0010 	str	r0, [fp, #-16]
    if (namelen > DNS_MAX_NAME_LENGTH) {
  1109a0:	e51b3010 	ldr	r3, [fp, #-16]
  1109a4:	e3530c01 	cmp	r3, #256	; 0x100
  1109a8:	9a000001 	bls	1109b4 <lwip_getaddrinfo+0x1d4>
      /* invalid name length */
      return EAI_FAIL;
  1109ac:	e3a030ca 	mov	r3, #202	; 0xca
  1109b0:	ea00006d 	b	110b6c <lwip_getaddrinfo+0x38c>
    }
    LWIP_ASSERT("namelen is too long", total_size + namelen + 1 > total_size);
  1109b4:	e51b200c 	ldr	r2, [fp, #-12]
  1109b8:	e51b3010 	ldr	r3, [fp, #-16]
  1109bc:	e0823003 	add	r3, r2, r3
  1109c0:	e2833001 	add	r3, r3, #1
  1109c4:	e51b200c 	ldr	r2, [fp, #-12]
  1109c8:	e1520003 	cmp	r2, r3
  1109cc:	3a000006 	bcc	1109ec <lwip_getaddrinfo+0x20c>
  1109d0:	e3060cec 	movw	r0, #27884	; 0x6cec
  1109d4:	e3400014 	movt	r0, #20
  1109d8:	ebffc9cd 	bl	103114 <rt_kprintf>
  1109dc:	e3001166 	movw	r1, #358	; 0x166
  1109e0:	e3060d00 	movw	r0, #27904	; 0x6d00
  1109e4:	e3400014 	movt	r0, #20
  1109e8:	ebffe9c0 	bl	10b0f0 <sys_arch_assert>
    total_size += namelen + 1;
  1109ec:	e51b2010 	ldr	r2, [fp, #-16]
  1109f0:	e51b300c 	ldr	r3, [fp, #-12]
  1109f4:	e0823003 	add	r3, r2, r3
  1109f8:	e2833001 	add	r3, r3, #1
  1109fc:	e50b300c 	str	r3, [fp, #-12]
  }
  /* If this fails, please report to lwip-devel! :-) */
  LWIP_ASSERT("total_size <= NETDB_ELEM_SIZE: please report this!",
  110a00:	e51b300c 	ldr	r3, [fp, #-12]
  110a04:	e3002131 	movw	r2, #305	; 0x131
  110a08:	e1530002 	cmp	r3, r2
  110a0c:	9a000006 	bls	110a2c <lwip_getaddrinfo+0x24c>
  110a10:	e3060d2c 	movw	r0, #27948	; 0x6d2c
  110a14:	e3400014 	movt	r0, #20
  110a18:	ebffc9bd 	bl	103114 <rt_kprintf>
  110a1c:	e300116b 	movw	r1, #363	; 0x16b
  110a20:	e3060d00 	movw	r0, #27904	; 0x6d00
  110a24:	e3400014 	movt	r0, #20
  110a28:	ebffe9b0 	bl	10b0f0 <sys_arch_assert>
    total_size <= NETDB_ELEM_SIZE);
  ai = (struct addrinfo *)memp_malloc(MEMP_NETDB);
  110a2c:	e3a02f5b 	mov	r2, #364	; 0x16c
  110a30:	e3061d00 	movw	r1, #27904	; 0x6d00
  110a34:	e3401014 	movt	r1, #20
  110a38:	e3a0000e 	mov	r0, #14
  110a3c:	eb0021a5 	bl	1190d8 <memp_malloc_fn>
  110a40:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  if (ai == NULL) {
  110a44:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110a48:	e3530000 	cmp	r3, #0
  110a4c:	1a000001 	bne	110a58 <lwip_getaddrinfo+0x278>
    return EAI_MEMORY;
  110a50:	e3a030cb 	mov	r3, #203	; 0xcb
  110a54:	ea000044 	b	110b6c <lwip_getaddrinfo+0x38c>
  }
  memset(ai, 0, total_size);
  110a58:	e51b200c 	ldr	r2, [fp, #-12]
  110a5c:	e3a01000 	mov	r1, #0
  110a60:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  110a64:	eb00c202 	bl	141274 <memset>
  /* cast through void* to get rid of alignment warnings */
  sa = (struct sockaddr_storage *)(void*)((u8_t*)ai + sizeof(struct addrinfo));
  110a68:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110a6c:	e2833020 	add	r3, r3, #32
  110a70:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    sa6->sin6_port = lwip_htons((u16_t)port_nr);
    ai->ai_family = AF_INET6;
#endif /* LWIP_IPV6 */
  } else {
#if LWIP_IPV4
    struct sockaddr_in *sa4 = (struct sockaddr_in*)sa;
  110a74:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  110a78:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    /* set up sockaddr */
    inet_addr_from_ip4addr(&sa4->sin_addr, ip_2_ip4(&addr));
  110a7c:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  110a80:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  110a84:	e5832004 	str	r2, [r3, #4]
    sa4->sin_family = AF_INET;
  110a88:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  110a8c:	e3a02002 	mov	r2, #2
  110a90:	e5c32001 	strb	r2, [r3, #1]
    sa4->sin_len = sizeof(struct sockaddr_in);
  110a94:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  110a98:	e3a02010 	mov	r2, #16
  110a9c:	e5c32000 	strb	r2, [r3]
    sa4->sin_port = lwip_htons((u16_t)port_nr);
  110aa0:	e51b3008 	ldr	r3, [fp, #-8]
  110aa4:	e6ff3073 	uxth	r3, r3
  110aa8:	e1a00003 	mov	r0, r3
  110aac:	eb0016c8 	bl	1165d4 <lwip_htons>
  110ab0:	e1a03000 	mov	r3, r0
  110ab4:	e1a02003 	mov	r2, r3
  110ab8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  110abc:	e1c320b2 	strh	r2, [r3, #2]
    ai->ai_family = AF_INET;
  110ac0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110ac4:	e3a02002 	mov	r2, #2
  110ac8:	e5832004 	str	r2, [r3, #4]
#endif /* LWIP_IPV4 */
  }

  /* set up addrinfo */
  if (hints != NULL) {
  110acc:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110ad0:	e3530000 	cmp	r3, #0
  110ad4:	0a000007 	beq	110af8 <lwip_getaddrinfo+0x318>
    /* copy socktype & protocol from hints if specified */
    ai->ai_socktype = hints->ai_socktype;
  110ad8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110adc:	e5932008 	ldr	r2, [r3, #8]
  110ae0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110ae4:	e5832008 	str	r2, [r3, #8]
    ai->ai_protocol = hints->ai_protocol;
  110ae8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110aec:	e593200c 	ldr	r2, [r3, #12]
  110af0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110af4:	e583200c 	str	r2, [r3, #12]
  }
  if (nodename != NULL) {
  110af8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  110afc:	e3530000 	cmp	r3, #0
  110b00:	0a00000f 	beq	110b44 <lwip_getaddrinfo+0x364>
    /* copy nodename to canonname if specified */
    ai->ai_canonname = ((char*)ai + sizeof(struct addrinfo) + sizeof(struct sockaddr_storage));
  110b04:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110b08:	e2832030 	add	r2, r3, #48	; 0x30
  110b0c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110b10:	e5832018 	str	r2, [r3, #24]
    MEMCPY(ai->ai_canonname, nodename, namelen);
  110b14:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110b18:	e5933018 	ldr	r3, [r3, #24]
  110b1c:	e51b2010 	ldr	r2, [fp, #-16]
  110b20:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
  110b24:	e1a00003 	mov	r0, r3
  110b28:	eb00c099 	bl	140d94 <memcpy>
    ai->ai_canonname[namelen] = 0;
  110b2c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110b30:	e5932018 	ldr	r2, [r3, #24]
  110b34:	e51b3010 	ldr	r3, [fp, #-16]
  110b38:	e0823003 	add	r3, r2, r3
  110b3c:	e3a02000 	mov	r2, #0
  110b40:	e5c32000 	strb	r2, [r3]
  }
  ai->ai_addrlen = sizeof(struct sockaddr_storage);
  110b44:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110b48:	e3a02010 	mov	r2, #16
  110b4c:	e5832010 	str	r2, [r3, #16]
  ai->ai_addr = (struct sockaddr*)sa;
  110b50:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110b54:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  110b58:	e5832014 	str	r2, [r3, #20]

  *res = ai;
  110b5c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  110b60:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  110b64:	e5832000 	str	r2, [r3]

  return 0;
  110b68:	e3a03000 	mov	r3, #0
}
  110b6c:	e1a00003 	mov	r0, r3
  110b70:	e24bd004 	sub	sp, fp, #4
  110b74:	e8bd8800 	pop	{fp, pc}

00110b78 <netifapi_do_netif_add>:
/**
 * Call netif_add() inside the tcpip_thread context.
 */
static err_t
netifapi_do_netif_add(struct tcpip_api_call_data *m)
{
  110b78:	e92d4810 	push	{r4, fp, lr}
  110b7c:	e28db008 	add	fp, sp, #8
  110b80:	e24dd024 	sub	sp, sp, #36	; 0x24
  110b84:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  /* cast through void* to silence alignment warnings. 
   * We know it works because the structs have been instantiated as struct netifapi_msg */
  struct netifapi_msg *msg = (struct netifapi_msg*)(void*)m;
  110b88:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  110b8c:	e50b3010 	str	r3, [fp, #-16]
  if (!netif_add( msg->netif,
  110b90:	e51b3010 	ldr	r3, [fp, #-16]
  110b94:	e5930004 	ldr	r0, [r3, #4]
  110b98:	e51b3010 	ldr	r3, [fp, #-16]
  110b9c:	e593c008 	ldr	ip, [r3, #8]
  110ba0:	e51b3010 	ldr	r3, [fp, #-16]
  110ba4:	e593e00c 	ldr	lr, [r3, #12]
  110ba8:	e51b3010 	ldr	r3, [fp, #-16]
  110bac:	e5934010 	ldr	r4, [r3, #16]
  110bb0:	e51b3010 	ldr	r3, [fp, #-16]
  110bb4:	e5933014 	ldr	r3, [r3, #20]
  110bb8:	e51b2010 	ldr	r2, [fp, #-16]
  110bbc:	e5922018 	ldr	r2, [r2, #24]
  110bc0:	e51b1010 	ldr	r1, [fp, #-16]
  110bc4:	e591101c 	ldr	r1, [r1, #28]
  110bc8:	e58d1008 	str	r1, [sp, #8]
  110bcc:	e58d2004 	str	r2, [sp, #4]
  110bd0:	e58d3000 	str	r3, [sp]
  110bd4:	e1a03004 	mov	r3, r4
  110bd8:	e1a0200e 	mov	r2, lr
  110bdc:	e1a0100c 	mov	r1, ip
  110be0:	eb0021de 	bl	119360 <netif_add>
  110be4:	e1a03000 	mov	r3, r0
  110be8:	e3530000 	cmp	r3, #0
  110bec:	1a000001 	bne	110bf8 <netifapi_do_netif_add+0x80>
                  API_EXPR_REF(msg->msg.add.gw),
#endif /* LWIP_IPV4 */
                  msg->msg.add.state,
                  msg->msg.add.init,
                  msg->msg.add.input)) {
    return ERR_IF;
  110bf0:	e3e0300b 	mvn	r3, #11
  110bf4:	ea000000 	b	110bfc <netifapi_do_netif_add+0x84>
  } else {
    return ERR_OK;
  110bf8:	e3a03000 	mov	r3, #0
  }
}
  110bfc:	e1a00003 	mov	r0, r3
  110c00:	e24bd008 	sub	sp, fp, #8
  110c04:	e8bd8810 	pop	{r4, fp, pc}

00110c08 <netifapi_do_netif_set_addr>:
/**
 * Call netif_set_addr() inside the tcpip_thread context.
 */
static err_t
netifapi_do_netif_set_addr(struct tcpip_api_call_data *m)
{
  110c08:	e92d4800 	push	{fp, lr}
  110c0c:	e28db004 	add	fp, sp, #4
  110c10:	e24dd010 	sub	sp, sp, #16
  110c14:	e50b0010 	str	r0, [fp, #-16]
  /* cast through void* to silence alignment warnings. 
   * We know it works because the structs have been instantiated as struct netifapi_msg */
  struct netifapi_msg *msg = (struct netifapi_msg*)(void*)m;
  110c18:	e51b3010 	ldr	r3, [fp, #-16]
  110c1c:	e50b3008 	str	r3, [fp, #-8]

  netif_set_addr( msg->netif,
  110c20:	e51b3008 	ldr	r3, [fp, #-8]
  110c24:	e5930004 	ldr	r0, [r3, #4]
  110c28:	e51b3008 	ldr	r3, [fp, #-8]
  110c2c:	e5931008 	ldr	r1, [r3, #8]
  110c30:	e51b3008 	ldr	r3, [fp, #-8]
  110c34:	e593200c 	ldr	r2, [r3, #12]
  110c38:	e51b3008 	ldr	r3, [fp, #-8]
  110c3c:	e5933010 	ldr	r3, [r3, #16]
  110c40:	eb00222c 	bl	1194f8 <netif_set_addr>
                  API_EXPR_REF(msg->msg.add.ipaddr),
                  API_EXPR_REF(msg->msg.add.netmask),
                  API_EXPR_REF(msg->msg.add.gw));
  return ERR_OK;
  110c44:	e3a03000 	mov	r3, #0
}
  110c48:	e1a00003 	mov	r0, r3
  110c4c:	e24bd004 	sub	sp, fp, #4
  110c50:	e8bd8800 	pop	{fp, pc}

00110c54 <netifapi_do_netif_common>:
 * Call the "errtfunc" (or the "voidfunc" if "errtfunc" is NULL) inside the
 * tcpip_thread context.
 */
static err_t
netifapi_do_netif_common(struct tcpip_api_call_data *m)
{
  110c54:	e92d4800 	push	{fp, lr}
  110c58:	e28db004 	add	fp, sp, #4
  110c5c:	e24dd010 	sub	sp, sp, #16
  110c60:	e50b0010 	str	r0, [fp, #-16]
  /* cast through void* to silence alignment warnings. 
   * We know it works because the structs have been instantiated as struct netifapi_msg */
  struct netifapi_msg *msg = (struct netifapi_msg*)(void*)m;
  110c64:	e51b3010 	ldr	r3, [fp, #-16]
  110c68:	e50b3008 	str	r3, [fp, #-8]

  if (msg->msg.common.errtfunc != NULL) {
  110c6c:	e51b3008 	ldr	r3, [fp, #-8]
  110c70:	e593300c 	ldr	r3, [r3, #12]
  110c74:	e3530000 	cmp	r3, #0
  110c78:	0a000007 	beq	110c9c <netifapi_do_netif_common+0x48>
    return msg->msg.common.errtfunc(msg->netif);
  110c7c:	e51b3008 	ldr	r3, [fp, #-8]
  110c80:	e593300c 	ldr	r3, [r3, #12]
  110c84:	e51b2008 	ldr	r2, [fp, #-8]
  110c88:	e5922004 	ldr	r2, [r2, #4]
  110c8c:	e1a00002 	mov	r0, r2
  110c90:	e12fff33 	blx	r3
  110c94:	e1a03000 	mov	r3, r0
  110c98:	ea000006 	b	110cb8 <netifapi_do_netif_common+0x64>
  } else {
    msg->msg.common.voidfunc(msg->netif);
  110c9c:	e51b3008 	ldr	r3, [fp, #-8]
  110ca0:	e5933008 	ldr	r3, [r3, #8]
  110ca4:	e51b2008 	ldr	r2, [fp, #-8]
  110ca8:	e5922004 	ldr	r2, [r2, #4]
  110cac:	e1a00002 	mov	r0, r2
  110cb0:	e12fff33 	blx	r3
    return ERR_OK;
  110cb4:	e3a03000 	mov	r3, #0
  }
}
  110cb8:	e1a00003 	mov	r0, r3
  110cbc:	e24bd004 	sub	sp, fp, #4
  110cc0:	e8bd8800 	pop	{fp, pc}

00110cc4 <netifapi_netif_add>:
netifapi_netif_add(struct netif *netif,
#if LWIP_IPV4
                   const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
                   void *state, netif_init_fn init, netif_input_fn input)
{
  110cc4:	e92d4800 	push	{fp, lr}
  110cc8:	e28db004 	add	fp, sp, #4
  110ccc:	e24dd038 	sub	sp, sp, #56	; 0x38
  110cd0:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  110cd4:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  110cd8:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
  110cdc:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  err_t err;
  NETIFAPI_VAR_DECLARE(msg);
  NETIFAPI_VAR_ALLOC(msg);

#if LWIP_IPV4
  if (ipaddr == NULL) {
  110ce0:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  110ce4:	e3530000 	cmp	r3, #0
  110ce8:	1a000002 	bne	110cf8 <netifapi_netif_add+0x34>
    ipaddr = IP4_ADDR_ANY4;
  110cec:	e3093908 	movw	r3, #39176	; 0x9908
  110cf0:	e3403014 	movt	r3, #20
  110cf4:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
  }
  if (netmask == NULL) {
  110cf8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110cfc:	e3530000 	cmp	r3, #0
  110d00:	1a000002 	bne	110d10 <netifapi_netif_add+0x4c>
    netmask = IP4_ADDR_ANY4;
  110d04:	e3093908 	movw	r3, #39176	; 0x9908
  110d08:	e3403014 	movt	r3, #20
  110d0c:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
  }
  if (gw == NULL) {
  110d10:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  110d14:	e3530000 	cmp	r3, #0
  110d18:	1a000002 	bne	110d28 <netifapi_netif_add+0x64>
    gw = IP4_ADDR_ANY4;
  110d1c:	e3093908 	movw	r3, #39176	; 0x9908
  110d20:	e3403014 	movt	r3, #20
  110d24:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  }
#endif /* LWIP_IPV4 */

  NETIFAPI_VAR_REF(msg).netif = netif;
  110d28:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  110d2c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
#if LWIP_IPV4
  NETIFAPI_VAR_REF(msg).msg.add.ipaddr  = NETIFAPI_VAR_REF(ipaddr);
  110d30:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  110d34:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  NETIFAPI_VAR_REF(msg).msg.add.netmask = NETIFAPI_VAR_REF(netmask);
  110d38:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110d3c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  NETIFAPI_VAR_REF(msg).msg.add.gw      = NETIFAPI_VAR_REF(gw);
  110d40:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  110d44:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
#endif /* LWIP_IPV4 */
  NETIFAPI_VAR_REF(msg).msg.add.state   = state;
  110d48:	e59b3004 	ldr	r3, [fp, #4]
  110d4c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  NETIFAPI_VAR_REF(msg).msg.add.init    = init;
  110d50:	e59b3008 	ldr	r3, [fp, #8]
  110d54:	e50b3010 	str	r3, [fp, #-16]
  NETIFAPI_VAR_REF(msg).msg.add.input   = input;
  110d58:	e59b300c 	ldr	r3, [fp, #12]
  110d5c:	e50b300c 	str	r3, [fp, #-12]
  err = tcpip_api_call(netifapi_do_netif_add, &API_VAR_REF(msg).call);
  110d60:	e24b3028 	sub	r3, fp, #40	; 0x28
  110d64:	e1a01003 	mov	r1, r3
  110d68:	e3000b78 	movw	r0, #2936	; 0xb78
  110d6c:	e3400011 	movt	r0, #17
  110d70:	eb001569 	bl	11631c <tcpip_api_call>
  110d74:	e1a03000 	mov	r3, r0
  110d78:	e54b3005 	strb	r3, [fp, #-5]
  NETIFAPI_VAR_FREE(msg);
  return err;
  110d7c:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  110d80:	e1a00003 	mov	r0, r3
  110d84:	e24bd004 	sub	sp, fp, #4
  110d88:	e8bd8800 	pop	{fp, pc}

00110d8c <netifapi_netif_set_addr>:
err_t
netifapi_netif_set_addr(struct netif *netif,
                        const ip4_addr_t *ipaddr,
                        const ip4_addr_t *netmask,
                        const ip4_addr_t *gw)
{
  110d8c:	e92d4800 	push	{fp, lr}
  110d90:	e28db004 	add	fp, sp, #4
  110d94:	e24dd038 	sub	sp, sp, #56	; 0x38
  110d98:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  110d9c:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  110da0:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
  110da4:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  err_t err;
  NETIFAPI_VAR_DECLARE(msg);
  NETIFAPI_VAR_ALLOC(msg);

  if (ipaddr == NULL) {
  110da8:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  110dac:	e3530000 	cmp	r3, #0
  110db0:	1a000002 	bne	110dc0 <netifapi_netif_set_addr+0x34>
    ipaddr = IP4_ADDR_ANY4;
  110db4:	e3093908 	movw	r3, #39176	; 0x9908
  110db8:	e3403014 	movt	r3, #20
  110dbc:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
  }
  if (netmask == NULL) {
  110dc0:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110dc4:	e3530000 	cmp	r3, #0
  110dc8:	1a000002 	bne	110dd8 <netifapi_netif_set_addr+0x4c>
    netmask = IP4_ADDR_ANY4;
  110dcc:	e3093908 	movw	r3, #39176	; 0x9908
  110dd0:	e3403014 	movt	r3, #20
  110dd4:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
  }
  if (gw == NULL) {
  110dd8:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  110ddc:	e3530000 	cmp	r3, #0
  110de0:	1a000002 	bne	110df0 <netifapi_netif_set_addr+0x64>
    gw = IP4_ADDR_ANY4;
  110de4:	e3093908 	movw	r3, #39176	; 0x9908
  110de8:	e3403014 	movt	r3, #20
  110dec:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  }

  NETIFAPI_VAR_REF(msg).netif = netif;
  110df0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  110df4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  NETIFAPI_VAR_REF(msg).msg.add.ipaddr  = NETIFAPI_VAR_REF(ipaddr);
  110df8:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  110dfc:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  NETIFAPI_VAR_REF(msg).msg.add.netmask = NETIFAPI_VAR_REF(netmask);
  110e00:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110e04:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  NETIFAPI_VAR_REF(msg).msg.add.gw      = NETIFAPI_VAR_REF(gw);
  110e08:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  110e0c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  err = tcpip_api_call(netifapi_do_netif_set_addr, &API_VAR_REF(msg).call);
  110e10:	e24b3028 	sub	r3, fp, #40	; 0x28
  110e14:	e1a01003 	mov	r1, r3
  110e18:	e3000c08 	movw	r0, #3080	; 0xc08
  110e1c:	e3400011 	movt	r0, #17
  110e20:	eb00153d 	bl	11631c <tcpip_api_call>
  110e24:	e1a03000 	mov	r3, r0
  110e28:	e54b3005 	strb	r3, [fp, #-5]
  NETIFAPI_VAR_FREE(msg);
  return err;
  110e2c:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  110e30:	e1a00003 	mov	r0, r3
  110e34:	e24bd004 	sub	sp, fp, #4
  110e38:	e8bd8800 	pop	{fp, pc}

00110e3c <netifapi_netif_common>:
 * @note use only for functions where there is only "netif" parameter.
 */
err_t
netifapi_netif_common(struct netif *netif, netifapi_void_fn voidfunc,
                       netifapi_errt_fn errtfunc)
{
  110e3c:	e92d4800 	push	{fp, lr}
  110e40:	e28db004 	add	fp, sp, #4
  110e44:	e24dd038 	sub	sp, sp, #56	; 0x38
  110e48:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  110e4c:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  110e50:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
  err_t err;
  NETIFAPI_VAR_DECLARE(msg);
  NETIFAPI_VAR_ALLOC(msg);

  NETIFAPI_VAR_REF(msg).netif = netif;
  110e54:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  110e58:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  NETIFAPI_VAR_REF(msg).msg.common.voidfunc = voidfunc;
  110e5c:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  110e60:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  NETIFAPI_VAR_REF(msg).msg.common.errtfunc = errtfunc;
  110e64:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110e68:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  err = tcpip_api_call(netifapi_do_netif_common, &API_VAR_REF(msg).call);
  110e6c:	e24b3028 	sub	r3, fp, #40	; 0x28
  110e70:	e1a01003 	mov	r1, r3
  110e74:	e3000c54 	movw	r0, #3156	; 0xc54
  110e78:	e3400011 	movt	r0, #17
  110e7c:	eb001526 	bl	11631c <tcpip_api_call>
  110e80:	e1a03000 	mov	r3, r0
  110e84:	e54b3005 	strb	r3, [fp, #-5]
  NETIFAPI_VAR_FREE(msg);
  return err;
  110e88:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  110e8c:	e1a00003 	mov	r0, r3
  110e90:	e24bd004 	sub	sp, fp, #4
  110e94:	e8bd8800 	pop	{fp, pc}

00110e98 <access_is_blocking>:
static u8_t lwip_getsockopt_impl(int s, int level, int optname, void *optval, socklen_t *optlen);
static u8_t lwip_setsockopt_impl(int s, int level, int optname, const void *optval, socklen_t optlen);

/* *RT-Thread* */
int access_is_blocking(u32_t flags, struct lwip_sock *sock)
{
  110e98:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  110e9c:	e28db000 	add	fp, sp, #0
  110ea0:	e24dd00c 	sub	sp, sp, #12
  110ea4:	e50b0008 	str	r0, [fp, #-8]
  110ea8:	e50b100c 	str	r1, [fp, #-12]
  return !((flags & MSG_DONTWAIT) || netconn_is_nonblocking(sock->conn));
  110eac:	e51b3008 	ldr	r3, [fp, #-8]
  110eb0:	e2033008 	and	r3, r3, #8
  110eb4:	e3530000 	cmp	r3, #0
  110eb8:	1a000007 	bne	110edc <access_is_blocking+0x44>
  110ebc:	e51b300c 	ldr	r3, [fp, #-12]
  110ec0:	e5933000 	ldr	r3, [r3]
  110ec4:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  110ec8:	e2033002 	and	r3, r3, #2
  110ecc:	e3530000 	cmp	r3, #0
  110ed0:	1a000001 	bne	110edc <access_is_blocking+0x44>
  110ed4:	e3a03001 	mov	r3, #1
  110ed8:	ea000000 	b	110ee0 <access_is_blocking+0x48>
  110edc:	e3a03000 	mov	r3, #0
}
  110ee0:	e1a00003 	mov	r0, r3
  110ee4:	e28bd000 	add	sp, fp, #0
  110ee8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  110eec:	e12fff1e 	bx	lr

00110ef0 <lwip_socket_thread_init>:
#endif /* LWIP_IPV4 && LWIP_IPV6 */

/** LWIP_NETCONN_SEM_PER_THREAD==1: initialize thread-local semaphore */
void
lwip_socket_thread_init(void)
{
  110ef0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  110ef4:	e28db000 	add	fp, sp, #0
   netconn_thread_init();
}
  110ef8:	e320f000 	nop	{0}
  110efc:	e28bd000 	add	sp, fp, #0
  110f00:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  110f04:	e12fff1e 	bx	lr

00110f08 <lwip_socket_thread_cleanup>:

/** LWIP_NETCONN_SEM_PER_THREAD==1: destroy thread-local semaphore */
void
lwip_socket_thread_cleanup(void)
{
  110f08:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  110f0c:	e28db000 	add	fp, sp, #0
   netconn_thread_cleanup();
}
  110f10:	e320f000 	nop	{0}
  110f14:	e28bd000 	add	sp, fp, #0
  110f18:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  110f1c:	e12fff1e 	bx	lr

00110f20 <get_socket>:
 * @param s externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
struct lwip_sock *
get_socket(int s)
{
  110f20:	e92d4800 	push	{fp, lr}
  110f24:	e28db004 	add	fp, sp, #4
  110f28:	e24dd010 	sub	sp, sp, #16
  110f2c:	e50b0010 	str	r0, [fp, #-16]
  struct lwip_sock *sock;

  s -= LWIP_SOCKET_OFFSET;

  if ((s < 0) || (s >= NUM_SOCKETS)) {
  110f30:	e51b3010 	ldr	r3, [fp, #-16]
  110f34:	e3530000 	cmp	r3, #0
  110f38:	ba000002 	blt	110f48 <get_socket+0x28>
  110f3c:	e51b3010 	ldr	r3, [fp, #-16]
  110f40:	e3530007 	cmp	r3, #7
  110f44:	da000005 	ble	110f60 <get_socket+0x40>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", s + LWIP_SOCKET_OFFSET));
    set_errno(EBADF);
  110f48:	eb009fe3 	bl	138edc <__errno_location>
  110f4c:	e1a02000 	mov	r2, r0
  110f50:	e3a03009 	mov	r3, #9
  110f54:	e5823000 	str	r3, [r2]
    return NULL;
  110f58:	e3a03000 	mov	r3, #0
  110f5c:	ea000011 	b	110fa8 <get_socket+0x88>
  }

  sock = &sockets[s];
  110f60:	e51b3010 	ldr	r3, [fp, #-16]
  110f64:	e3a02014 	mov	r2, #20
  110f68:	e0020392 	mul	r2, r2, r3
  110f6c:	e30d3b90 	movw	r3, #56208	; 0xdb90
  110f70:	e3403014 	movt	r3, #20
  110f74:	e0823003 	add	r3, r2, r3
  110f78:	e50b3008 	str	r3, [fp, #-8]

  if (!sock->conn) {
  110f7c:	e51b3008 	ldr	r3, [fp, #-8]
  110f80:	e5933000 	ldr	r3, [r3]
  110f84:	e3530000 	cmp	r3, #0
  110f88:	1a000005 	bne	110fa4 <get_socket+0x84>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): not active\n", s + LWIP_SOCKET_OFFSET));
    set_errno(EBADF);
  110f8c:	eb009fd2 	bl	138edc <__errno_location>
  110f90:	e1a02000 	mov	r2, r0
  110f94:	e3a03009 	mov	r3, #9
  110f98:	e5823000 	str	r3, [r2]
    return NULL;
  110f9c:	e3a03000 	mov	r3, #0
  110fa0:	ea000000 	b	110fa8 <get_socket+0x88>
  }

  return sock;
  110fa4:	e51b3008 	ldr	r3, [fp, #-8]
}
  110fa8:	e1a00003 	mov	r0, r3
  110fac:	e24bd004 	sub	sp, fp, #4
  110fb0:	e8bd8800 	pop	{fp, pc}

00110fb4 <tryget_socket>:
 * @param s externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int s)
{
  110fb4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  110fb8:	e28db000 	add	fp, sp, #0
  110fbc:	e24dd00c 	sub	sp, sp, #12
  110fc0:	e50b0008 	str	r0, [fp, #-8]
  s -= LWIP_SOCKET_OFFSET;
  if ((s < 0) || (s >= NUM_SOCKETS)) {
  110fc4:	e51b3008 	ldr	r3, [fp, #-8]
  110fc8:	e3530000 	cmp	r3, #0
  110fcc:	ba000002 	blt	110fdc <tryget_socket+0x28>
  110fd0:	e51b3008 	ldr	r3, [fp, #-8]
  110fd4:	e3530007 	cmp	r3, #7
  110fd8:	da000001 	ble	110fe4 <tryget_socket+0x30>
    return NULL;
  110fdc:	e3a03000 	mov	r3, #0
  110fe0:	ea000010 	b	111028 <tryget_socket+0x74>
  }
  if (!sockets[s].conn) {
  110fe4:	e30d3b90 	movw	r3, #56208	; 0xdb90
  110fe8:	e3403014 	movt	r3, #20
  110fec:	e51b2008 	ldr	r2, [fp, #-8]
  110ff0:	e3a01014 	mov	r1, #20
  110ff4:	e0020291 	mul	r2, r1, r2
  110ff8:	e0833002 	add	r3, r3, r2
  110ffc:	e5933000 	ldr	r3, [r3]
  111000:	e3530000 	cmp	r3, #0
  111004:	1a000001 	bne	111010 <tryget_socket+0x5c>
    return NULL;
  111008:	e3a03000 	mov	r3, #0
  11100c:	ea000005 	b	111028 <tryget_socket+0x74>
  }
  return &sockets[s];
  111010:	e51b3008 	ldr	r3, [fp, #-8]
  111014:	e3a02014 	mov	r2, #20
  111018:	e0020392 	mul	r2, r2, r3
  11101c:	e30d3b90 	movw	r3, #56208	; 0xdb90
  111020:	e3403014 	movt	r3, #20
  111024:	e0823003 	add	r3, r2, r3
}
  111028:	e1a00003 	mov	r0, r3
  11102c:	e28bd000 	add	sp, fp, #0
  111030:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  111034:	e12fff1e 	bx	lr

00111038 <lwip_tryget_socket>:
 * @param s externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
struct lwip_sock *
lwip_tryget_socket(int s)
{
  111038:	e92d4800 	push	{fp, lr}
  11103c:	e28db004 	add	fp, sp, #4
  111040:	e24dd008 	sub	sp, sp, #8
  111044:	e50b0008 	str	r0, [fp, #-8]
	return tryget_socket(s);
  111048:	e51b0008 	ldr	r0, [fp, #-8]
  11104c:	ebffffd8 	bl	110fb4 <tryget_socket>
  111050:	e1a03000 	mov	r3, r0
}
  111054:	e1a00003 	mov	r0, r3
  111058:	e24bd004 	sub	sp, fp, #4
  11105c:	e8bd8800 	pop	{fp, pc}

00111060 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
  111060:	e92d4800 	push	{fp, lr}
  111064:	e28db004 	add	fp, sp, #4
  111068:	e24dd010 	sub	sp, sp, #16
  11106c:	e50b0010 	str	r0, [fp, #-16]
  111070:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  int i;
  SYS_ARCH_DECL_PROTECT(lev);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
  111074:	e3a03000 	mov	r3, #0
  111078:	e50b3008 	str	r3, [fp, #-8]
  11107c:	ea000063 	b	111210 <alloc_socket+0x1b0>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
  111080:	ebffc46d 	bl	10223c <rt_enter_critical>
    if (!sockets[i].conn && (sockets[i].select_waiting == 0)) {
  111084:	e30d3b90 	movw	r3, #56208	; 0xdb90
  111088:	e3403014 	movt	r3, #20
  11108c:	e51b2008 	ldr	r2, [fp, #-8]
  111090:	e3a01014 	mov	r1, #20
  111094:	e0020291 	mul	r2, r1, r2
  111098:	e0833002 	add	r3, r3, r2
  11109c:	e5933000 	ldr	r3, [r3]
  1110a0:	e3530000 	cmp	r3, #0
  1110a4:	1a000055 	bne	111200 <alloc_socket+0x1a0>
  1110a8:	e30d3b90 	movw	r3, #56208	; 0xdb90
  1110ac:	e3403014 	movt	r3, #20
  1110b0:	e51b2008 	ldr	r2, [fp, #-8]
  1110b4:	e3a01014 	mov	r1, #20
  1110b8:	e0020291 	mul	r2, r1, r2
  1110bc:	e0833002 	add	r3, r3, r2
  1110c0:	e2833011 	add	r3, r3, #17
  1110c4:	e5d33000 	ldrb	r3, [r3]
  1110c8:	e3530000 	cmp	r3, #0
  1110cc:	1a00004b 	bne	111200 <alloc_socket+0x1a0>
      sockets[i].conn       = newconn;
  1110d0:	e30d3b90 	movw	r3, #56208	; 0xdb90
  1110d4:	e3403014 	movt	r3, #20
  1110d8:	e51b2008 	ldr	r2, [fp, #-8]
  1110dc:	e3a01014 	mov	r1, #20
  1110e0:	e0020291 	mul	r2, r1, r2
  1110e4:	e0833002 	add	r3, r3, r2
  1110e8:	e51b2010 	ldr	r2, [fp, #-16]
  1110ec:	e5832000 	str	r2, [r3]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
  1110f0:	ebffc457 	bl	102254 <rt_exit_critical>
      sockets[i].lastdata   = NULL;
  1110f4:	e30d3b90 	movw	r3, #56208	; 0xdb90
  1110f8:	e3403014 	movt	r3, #20
  1110fc:	e51b2008 	ldr	r2, [fp, #-8]
  111100:	e3a01014 	mov	r1, #20
  111104:	e0020291 	mul	r2, r1, r2
  111108:	e0833002 	add	r3, r3, r2
  11110c:	e2833004 	add	r3, r3, #4
  111110:	e3a02000 	mov	r2, #0
  111114:	e5832000 	str	r2, [r3]
      sockets[i].lastoffset = 0;
  111118:	e30d3b90 	movw	r3, #56208	; 0xdb90
  11111c:	e3403014 	movt	r3, #20
  111120:	e51b2008 	ldr	r2, [fp, #-8]
  111124:	e3a01014 	mov	r1, #20
  111128:	e0020291 	mul	r2, r1, r2
  11112c:	e0833002 	add	r3, r3, r2
  111130:	e2833008 	add	r3, r3, #8
  111134:	e3a02000 	mov	r2, #0
  111138:	e1c320b0 	strh	r2, [r3]
      sockets[i].rcvevent   = 0;
  11113c:	e30d3b90 	movw	r3, #56208	; 0xdb90
  111140:	e3403014 	movt	r3, #20
  111144:	e51b2008 	ldr	r2, [fp, #-8]
  111148:	e3a01014 	mov	r1, #20
  11114c:	e0020291 	mul	r2, r1, r2
  111150:	e0833002 	add	r3, r3, r2
  111154:	e283300a 	add	r3, r3, #10
  111158:	e3a02000 	mov	r2, #0
  11115c:	e1c320b0 	strh	r2, [r3]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
  111160:	e51b3010 	ldr	r3, [fp, #-16]
  111164:	e5933000 	ldr	r3, [r3]
  111168:	e20330f0 	and	r3, r3, #240	; 0xf0
  11116c:	e3530010 	cmp	r3, #16
  111170:	1a000002 	bne	111180 <alloc_socket+0x120>
  111174:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111178:	e3530000 	cmp	r3, #0
  11117c:	0a000001 	beq	111188 <alloc_socket+0x128>
  111180:	e3a03001 	mov	r3, #1
  111184:	ea000000 	b	11118c <alloc_socket+0x12c>
  111188:	e3a03000 	mov	r3, #0
  11118c:	e6ff2073 	uxth	r2, r3
  111190:	e30d3b90 	movw	r3, #56208	; 0xdb90
  111194:	e3403014 	movt	r3, #20
  111198:	e51b1008 	ldr	r1, [fp, #-8]
  11119c:	e3a00014 	mov	r0, #20
  1111a0:	e0010190 	mul	r1, r0, r1
  1111a4:	e0833001 	add	r3, r3, r1
  1111a8:	e283300c 	add	r3, r3, #12
  1111ac:	e1c320b0 	strh	r2, [r3]
      sockets[i].errevent   = 0;
  1111b0:	e30d3b90 	movw	r3, #56208	; 0xdb90
  1111b4:	e3403014 	movt	r3, #20
  1111b8:	e51b2008 	ldr	r2, [fp, #-8]
  1111bc:	e3a01014 	mov	r1, #20
  1111c0:	e0020291 	mul	r2, r1, r2
  1111c4:	e0833002 	add	r3, r3, r2
  1111c8:	e283300e 	add	r3, r3, #14
  1111cc:	e3a02000 	mov	r2, #0
  1111d0:	e1c320b0 	strh	r2, [r3]
      sockets[i].err        = 0;
  1111d4:	e30d3b90 	movw	r3, #56208	; 0xdb90
  1111d8:	e3403014 	movt	r3, #20
  1111dc:	e51b2008 	ldr	r2, [fp, #-8]
  1111e0:	e3a01014 	mov	r1, #20
  1111e4:	e0020291 	mul	r2, r1, r2
  1111e8:	e0833002 	add	r3, r3, r2
  1111ec:	e2833010 	add	r3, r3, #16
  1111f0:	e3a02000 	mov	r2, #0
  1111f4:	e5c32000 	strb	r2, [r3]
      return i + LWIP_SOCKET_OFFSET;
  1111f8:	e51b3008 	ldr	r3, [fp, #-8]
  1111fc:	ea000007 	b	111220 <alloc_socket+0x1c0>
    }
    SYS_ARCH_UNPROTECT(lev);
  111200:	ebffc413 	bl	102254 <rt_exit_critical>
  for (i = 0; i < NUM_SOCKETS; ++i) {
  111204:	e51b3008 	ldr	r3, [fp, #-8]
  111208:	e2833001 	add	r3, r3, #1
  11120c:	e50b3008 	str	r3, [fp, #-8]
  111210:	e51b3008 	ldr	r3, [fp, #-8]
  111214:	e3530007 	cmp	r3, #7
  111218:	daffff98 	ble	111080 <alloc_socket+0x20>
  }
  return -1;
  11121c:	e3e03000 	mvn	r3, #0
}
  111220:	e1a00003 	mov	r0, r3
  111224:	e24bd004 	sub	sp, fp, #4
  111228:	e8bd8800 	pop	{fp, pc}

0011122c <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
  11122c:	e92d4800 	push	{fp, lr}
  111230:	e28db004 	add	fp, sp, #4
  111234:	e24dd010 	sub	sp, sp, #16
  111238:	e50b0010 	str	r0, [fp, #-16]
  11123c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  void *lastdata;

  lastdata         = sock->lastdata;
  111240:	e51b3010 	ldr	r3, [fp, #-16]
  111244:	e5933004 	ldr	r3, [r3, #4]
  111248:	e50b3008 	str	r3, [fp, #-8]
  sock->lastdata   = NULL;
  11124c:	e51b3010 	ldr	r3, [fp, #-16]
  111250:	e3a02000 	mov	r2, #0
  111254:	e5832004 	str	r2, [r3, #4]
  sock->lastoffset = 0;
  111258:	e51b3010 	ldr	r3, [fp, #-16]
  11125c:	e3a02000 	mov	r2, #0
  111260:	e1c320b8 	strh	r2, [r3, #8]
  sock->err        = 0;
  111264:	e51b3010 	ldr	r3, [fp, #-16]
  111268:	e3a02000 	mov	r2, #0
  11126c:	e5c32010 	strb	r2, [r3, #16]

  /* Protect socket array */
  SYS_ARCH_SET(sock->conn, NULL);
  111270:	ebffc3f1 	bl	10223c <rt_enter_critical>
  111274:	e51b3010 	ldr	r3, [fp, #-16]
  111278:	e3a02000 	mov	r2, #0
  11127c:	e5832000 	str	r2, [r3]
  111280:	ebffc3f3 	bl	102254 <rt_exit_critical>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (lastdata != NULL) {
  111284:	e51b3008 	ldr	r3, [fp, #-8]
  111288:	e3530000 	cmp	r3, #0
  11128c:	0a000007 	beq	1112b0 <free_socket+0x84>
    if (is_tcp) {
  111290:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111294:	e3530000 	cmp	r3, #0
  111298:	0a000002 	beq	1112a8 <free_socket+0x7c>
      pbuf_free((struct pbuf *)lastdata);
  11129c:	e51b0008 	ldr	r0, [fp, #-8]
  1112a0:	eb002702 	bl	11aeb0 <pbuf_free>
    } else {
      netbuf_delete((struct netbuf *)lastdata);
    }
  }
}
  1112a4:	ea000001 	b	1112b0 <free_socket+0x84>
      netbuf_delete((struct netbuf *)lastdata);
  1112a8:	e51b0008 	ldr	r0, [fp, #-8]
  1112ac:	ebfffb1e 	bl	10ff2c <netbuf_delete>
}
  1112b0:	e320f000 	nop	{0}
  1112b4:	e24bd004 	sub	sp, fp, #4
  1112b8:	e8bd8800 	pop	{fp, pc}

001112bc <lwip_accept>:
 * Exceptions are documented!
 */

int
lwip_accept(int s, struct sockaddr *addr, socklen_t *addrlen)
{
  1112bc:	e92d4810 	push	{r4, fp, lr}
  1112c0:	e28db008 	add	fp, sp, #8
  1112c4:	e24dd05c 	sub	sp, sp, #92	; 0x5c
  1112c8:	e50b0058 	str	r0, [fp, #-88]	; 0xffffffa8
  1112cc:	e50b105c 	str	r1, [fp, #-92]	; 0xffffffa4
  1112d0:	e50b2060 	str	r2, [fp, #-96]	; 0xffffffa0
  struct lwip_sock *sock, *nsock;
  struct netconn *newconn;
  ip_addr_t naddr;
  u16_t port = 0;
  1112d4:	e3a03000 	mov	r3, #0
  1112d8:	e14b33be 	strh	r3, [fp, #-62]	; 0xffffffc2
  int newsock;
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d)...\n", s));
  sock = get_socket(s);
  1112dc:	e51b0058 	ldr	r0, [fp, #-88]	; 0xffffffa8
  1112e0:	ebffff0e 	bl	110f20 <get_socket>
  1112e4:	e50b0010 	str	r0, [fp, #-16]
  if (!sock) {
  1112e8:	e51b3010 	ldr	r3, [fp, #-16]
  1112ec:	e3530000 	cmp	r3, #0
  1112f0:	1a000001 	bne	1112fc <lwip_accept+0x40>
    return -1;
  1112f4:	e3e03000 	mvn	r3, #0
  1112f8:	ea0000fa 	b	1116e8 <lwip_accept+0x42c>
  }

  if (netconn_is_nonblocking(sock->conn) && (sock->rcvevent <= 0)) {
  1112fc:	e51b3010 	ldr	r3, [fp, #-16]
  111300:	e5933000 	ldr	r3, [r3]
  111304:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  111308:	e2033002 	and	r3, r3, #2
  11130c:	e3530000 	cmp	r3, #0
  111310:	0a000009 	beq	11133c <lwip_accept+0x80>
  111314:	e51b3010 	ldr	r3, [fp, #-16]
  111318:	e1d330fa 	ldrsh	r3, [r3, #10]
  11131c:	e3530000 	cmp	r3, #0
  111320:	ca000005 	bgt	11133c <lwip_accept+0x80>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): returning EWOULDBLOCK\n", s));
    set_errno(EWOULDBLOCK);
  111324:	eb009eec 	bl	138edc <__errno_location>
  111328:	e1a02000 	mov	r2, r0
  11132c:	e3a0300b 	mov	r3, #11
  111330:	e5823000 	str	r3, [r2]
    return -1;
  111334:	e3e03000 	mvn	r3, #0
  111338:	ea0000ea 	b	1116e8 <lwip_accept+0x42c>
  }

  /* wait for a new connection */
  err = netconn_accept(sock->conn, &newconn);
  11133c:	e51b3010 	ldr	r3, [fp, #-16]
  111340:	e5933000 	ldr	r3, [r3]
  111344:	e24b2038 	sub	r2, fp, #56	; 0x38
  111348:	e1a01002 	mov	r1, r2
  11134c:	e1a00003 	mov	r0, r3
  111350:	ebffe924 	bl	10b7e8 <netconn_accept>
  111354:	e1a03000 	mov	r3, r0
  111358:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  if (err != ERR_OK) {
  11135c:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  111360:	e3530000 	cmp	r3, #0
  111364:	0a000035 	beq	111440 <lwip_accept+0x184>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_acept failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
  111368:	e51b3010 	ldr	r3, [fp, #-16]
  11136c:	e5933000 	ldr	r3, [r3]
  111370:	e5933000 	ldr	r3, [r3]
  111374:	e20330f0 	and	r3, r3, #240	; 0xf0
  111378:	e3530010 	cmp	r3, #16
  11137c:	0a00000d 	beq	1113b8 <lwip_accept+0xfc>
      sock_set_errno(sock, EOPNOTSUPP);
  111380:	e3a0305f 	mov	r3, #95	; 0x5f
  111384:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
  111388:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  11138c:	e6ef2073 	uxtb	r2, r3
  111390:	e51b3010 	ldr	r3, [fp, #-16]
  111394:	e5c32010 	strb	r2, [r3, #16]
  111398:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  11139c:	e3530000 	cmp	r3, #0
  1113a0:	0a000024 	beq	111438 <lwip_accept+0x17c>
  1113a4:	eb009ecc 	bl	138edc <__errno_location>
  1113a8:	e1a02000 	mov	r2, r0
  1113ac:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  1113b0:	e5823000 	str	r3, [r2]
  1113b4:	ea00001f 	b	111438 <lwip_accept+0x17c>
    } else if (err == ERR_CLSD) {
  1113b8:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  1113bc:	e373000f 	cmn	r3, #15
  1113c0:	1a00000d 	bne	1113fc <lwip_accept+0x140>
      sock_set_errno(sock, EINVAL);
  1113c4:	e3a03016 	mov	r3, #22
  1113c8:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
  1113cc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1113d0:	e6ef2073 	uxtb	r2, r3
  1113d4:	e51b3010 	ldr	r3, [fp, #-16]
  1113d8:	e5c32010 	strb	r2, [r3, #16]
  1113dc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1113e0:	e3530000 	cmp	r3, #0
  1113e4:	0a000013 	beq	111438 <lwip_accept+0x17c>
  1113e8:	eb009ebb 	bl	138edc <__errno_location>
  1113ec:	e1a02000 	mov	r2, r0
  1113f0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1113f4:	e5823000 	str	r3, [r2]
  1113f8:	ea00000e 	b	111438 <lwip_accept+0x17c>
    } else {
      sock_set_errno(sock, err_to_errno(err));
  1113fc:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  111400:	e1a00003 	mov	r0, r3
  111404:	ebfffa9d 	bl	10fe80 <err_to_errno>
  111408:	e50b002c 	str	r0, [fp, #-44]	; 0xffffffd4
  11140c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111410:	e6ef2073 	uxtb	r2, r3
  111414:	e51b3010 	ldr	r3, [fp, #-16]
  111418:	e5c32010 	strb	r2, [r3, #16]
  11141c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111420:	e3530000 	cmp	r3, #0
  111424:	0a000003 	beq	111438 <lwip_accept+0x17c>
  111428:	eb009eab 	bl	138edc <__errno_location>
  11142c:	e1a02000 	mov	r2, r0
  111430:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111434:	e5823000 	str	r3, [r2]
    }
    return -1;
  111438:	e3e03000 	mvn	r3, #0
  11143c:	ea0000a9 	b	1116e8 <lwip_accept+0x42c>
  }
  LWIP_ASSERT("newconn != NULL", newconn != NULL);
  111440:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  111444:	e3530000 	cmp	r3, #0
  111448:	1a000006 	bne	111468 <lwip_accept+0x1ac>
  11144c:	e3060d60 	movw	r0, #28000	; 0x6d60
  111450:	e3400014 	movt	r0, #20
  111454:	ebffc72e 	bl	103114 <rt_kprintf>
  111458:	e300120a 	movw	r1, #522	; 0x20a
  11145c:	e3060d70 	movw	r0, #28016	; 0x6d70
  111460:	e3400014 	movt	r0, #20
  111464:	ebffe721 	bl	10b0f0 <sys_arch_assert>

  newsock = alloc_socket(newconn, 1);
  111468:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  11146c:	e3a01001 	mov	r1, #1
  111470:	e1a00003 	mov	r0, r3
  111474:	ebfffef9 	bl	111060 <alloc_socket>
  111478:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  if (newsock == -1) {
  11147c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111480:	e3730001 	cmn	r3, #1
  111484:	1a000011 	bne	1114d0 <lwip_accept+0x214>
    netconn_delete(newconn);
  111488:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  11148c:	e1a00003 	mov	r0, r3
  111490:	ebffe7e6 	bl	10b430 <netconn_delete>
    sock_set_errno(sock, ENFILE);
  111494:	e3a03017 	mov	r3, #23
  111498:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  11149c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1114a0:	e6ef2073 	uxtb	r2, r3
  1114a4:	e51b3010 	ldr	r3, [fp, #-16]
  1114a8:	e5c32010 	strb	r2, [r3, #16]
  1114ac:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1114b0:	e3530000 	cmp	r3, #0
  1114b4:	0a000003 	beq	1114c8 <lwip_accept+0x20c>
  1114b8:	eb009e87 	bl	138edc <__errno_location>
  1114bc:	e1a02000 	mov	r2, r0
  1114c0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1114c4:	e5823000 	str	r3, [r2]
    return -1;
  1114c8:	e3e03000 	mvn	r3, #0
  1114cc:	ea000085 	b	1116e8 <lwip_accept+0x42c>
  }
  LWIP_ASSERT("invalid socket index", (newsock >= LWIP_SOCKET_OFFSET) && (newsock < NUM_SOCKETS + LWIP_SOCKET_OFFSET));
  1114d0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1114d4:	e3530000 	cmp	r3, #0
  1114d8:	ba000002 	blt	1114e8 <lwip_accept+0x22c>
  1114dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1114e0:	e3530007 	cmp	r3, #7
  1114e4:	da000006 	ble	111504 <lwip_accept+0x248>
  1114e8:	e3060da0 	movw	r0, #28064	; 0x6da0
  1114ec:	e3400014 	movt	r0, #20
  1114f0:	ebffc707 	bl	103114 <rt_kprintf>
  1114f4:	e3001212 	movw	r1, #530	; 0x212
  1114f8:	e3060d70 	movw	r0, #28016	; 0x6d70
  1114fc:	e3400014 	movt	r0, #20
  111500:	ebffe6fa 	bl	10b0f0 <sys_arch_assert>
  // LWIP_ASSERT("newconn->callback == event_callback", newconn->callback == event_callback);
  nsock = &sockets[newsock - LWIP_SOCKET_OFFSET];
  111504:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111508:	e3a02014 	mov	r2, #20
  11150c:	e0020392 	mul	r2, r2, r3
  111510:	e30d3b90 	movw	r3, #56208	; 0xdb90
  111514:	e3403014 	movt	r3, #20
  111518:	e0823003 	add	r3, r2, r3
  11151c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  /* See event_callback: If data comes in right away after an accept, even
   * though the server task might not have created a new socket yet.
   * In that case, newconn->socket is counted down (newconn->socket--),
   * so nsock->rcvevent is >= 1 here!
   */
  SYS_ARCH_PROTECT(lev);
  111520:	ebffc345 	bl	10223c <rt_enter_critical>
  nsock->rcvevent += (s16_t)(-1 - newconn->socket);
  111524:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  111528:	e1d330fa 	ldrsh	r3, [r3, #10]
  11152c:	e6ff2073 	uxth	r2, r3
  111530:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  111534:	e593301c 	ldr	r3, [r3, #28]
  111538:	e6ff3073 	uxth	r3, r3
  11153c:	e0423003 	sub	r3, r2, r3
  111540:	e6ff3073 	uxth	r3, r3
  111544:	e2433001 	sub	r3, r3, #1
  111548:	e6ff3073 	uxth	r3, r3
  11154c:	e6bf2073 	sxth	r2, r3
  111550:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  111554:	e1c320ba 	strh	r2, [r3, #10]
  newconn->socket = newsock;
  111558:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  11155c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  111560:	e583201c 	str	r2, [r3, #28]
  SYS_ARCH_UNPROTECT(lev);
  111564:	ebffc33a 	bl	102254 <rt_exit_critical>

  /* Note that POSIX only requires us to check addr is non-NULL. addrlen must
   * not be NULL if addr is valid.
   */
  if (addr != NULL) {
  111568:	e51b305c 	ldr	r3, [fp, #-92]	; 0xffffffa4
  11156c:	e3530000 	cmp	r3, #0
  111570:	0a00004e 	beq	1116b0 <lwip_accept+0x3f4>
    union sockaddr_aligned tempaddr;
    /* get the IP address and port of the remote host */
    err = netconn_peer(newconn, &naddr, &port);
  111574:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
  111578:	e24b203e 	sub	r2, fp, #62	; 0x3e
  11157c:	e24b103c 	sub	r1, fp, #60	; 0x3c
  111580:	e3a03000 	mov	r3, #0
  111584:	ebffe7c9 	bl	10b4b0 <netconn_getaddr>
  111588:	e1a03000 	mov	r3, r0
  11158c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    if (err != ERR_OK) {
  111590:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  111594:	e3530000 	cmp	r3, #0
  111598:	0a000016 	beq	1115f8 <lwip_accept+0x33c>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_peer failed, err=%d\n", s, err));
      netconn_delete(newconn);
  11159c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1115a0:	e1a00003 	mov	r0, r3
  1115a4:	ebffe7a1 	bl	10b430 <netconn_delete>
      free_socket(nsock, 1);
  1115a8:	e3a01001 	mov	r1, #1
  1115ac:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  1115b0:	ebffff1d 	bl	11122c <free_socket>
      sock_set_errno(sock, err_to_errno(err));
  1115b4:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  1115b8:	e1a00003 	mov	r0, r3
  1115bc:	ebfffa2f 	bl	10fe80 <err_to_errno>
  1115c0:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  1115c4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1115c8:	e6ef2073 	uxtb	r2, r3
  1115cc:	e51b3010 	ldr	r3, [fp, #-16]
  1115d0:	e5c32010 	strb	r2, [r3, #16]
  1115d4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1115d8:	e3530000 	cmp	r3, #0
  1115dc:	0a000003 	beq	1115f0 <lwip_accept+0x334>
  1115e0:	eb009e3d 	bl	138edc <__errno_location>
  1115e4:	e1a02000 	mov	r2, r0
  1115e8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1115ec:	e5823000 	str	r3, [r2]
      return -1;
  1115f0:	e3e03000 	mvn	r3, #0
  1115f4:	ea00003b 	b	1116e8 <lwip_accept+0x42c>
    }
    LWIP_ASSERT("addr valid but addrlen NULL", addrlen != NULL);
  1115f8:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
  1115fc:	e3530000 	cmp	r3, #0
  111600:	1a000006 	bne	111620 <lwip_accept+0x364>
  111604:	e3060db8 	movw	r0, #28088	; 0x6db8
  111608:	e3400014 	movt	r0, #20
  11160c:	ebffc6c0 	bl	103114 <rt_kprintf>
  111610:	e300122e 	movw	r1, #558	; 0x22e
  111614:	e3060d70 	movw	r0, #28016	; 0x6d70
  111618:	e3400014 	movt	r0, #20
  11161c:	ebffe6b3 	bl	10b0f0 <sys_arch_assert>

    IPADDR_PORT_TO_SOCKADDR(&tempaddr, &naddr, port);
  111620:	e24b3050 	sub	r3, fp, #80	; 0x50
  111624:	e3a02010 	mov	r2, #16
  111628:	e5c32000 	strb	r2, [r3]
  11162c:	e24b3050 	sub	r3, fp, #80	; 0x50
  111630:	e3a02002 	mov	r2, #2
  111634:	e5c32001 	strb	r2, [r3, #1]
  111638:	e15b33be 	ldrh	r3, [fp, #-62]	; 0xffffffc2
  11163c:	e24b4050 	sub	r4, fp, #80	; 0x50
  111640:	e1a00003 	mov	r0, r3
  111644:	eb0013e2 	bl	1165d4 <lwip_htons>
  111648:	e1a03000 	mov	r3, r0
  11164c:	e1c430b2 	strh	r3, [r4, #2]
  111650:	e24b3050 	sub	r3, fp, #80	; 0x50
  111654:	e51b203c 	ldr	r2, [fp, #-60]	; 0xffffffc4
  111658:	e5832004 	str	r2, [r3, #4]
  11165c:	e24b3050 	sub	r3, fp, #80	; 0x50
  111660:	e2833008 	add	r3, r3, #8
  111664:	e3a02008 	mov	r2, #8
  111668:	e3a01000 	mov	r1, #0
  11166c:	e1a00003 	mov	r0, r3
  111670:	eb00beff 	bl	141274 <memset>
    if (*addrlen > tempaddr.sa.sa_len) {
  111674:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
  111678:	e5933000 	ldr	r3, [r3]
  11167c:	e55b2050 	ldrb	r2, [fp, #-80]	; 0xffffffb0
  111680:	e1530002 	cmp	r3, r2
  111684:	9a000003 	bls	111698 <lwip_accept+0x3dc>
      *addrlen = tempaddr.sa.sa_len;
  111688:	e55b3050 	ldrb	r3, [fp, #-80]	; 0xffffffb0
  11168c:	e1a02003 	mov	r2, r3
  111690:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
  111694:	e5832000 	str	r2, [r3]
    }
    MEMCPY(addr, &tempaddr, *addrlen);
  111698:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
  11169c:	e5932000 	ldr	r2, [r3]
  1116a0:	e24b3050 	sub	r3, fp, #80	; 0x50
  1116a4:	e1a01003 	mov	r1, r3
  1116a8:	e51b005c 	ldr	r0, [fp, #-92]	; 0xffffffa4
  1116ac:	eb00bdb8 	bl	140d94 <memcpy>
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F"\n", port));
  } else {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d) returning new sock=%d", s, newsock));
  }

  sock_set_errno(sock, 0);
  1116b0:	e3a03000 	mov	r3, #0
  1116b4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  1116b8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1116bc:	e6ef2073 	uxtb	r2, r3
  1116c0:	e51b3010 	ldr	r3, [fp, #-16]
  1116c4:	e5c32010 	strb	r2, [r3, #16]
  1116c8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1116cc:	e3530000 	cmp	r3, #0
  1116d0:	0a000003 	beq	1116e4 <lwip_accept+0x428>
  1116d4:	eb009e00 	bl	138edc <__errno_location>
  1116d8:	e1a02000 	mov	r2, r0
  1116dc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1116e0:	e5823000 	str	r3, [r2]
  return newsock;
  1116e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
}
  1116e8:	e1a00003 	mov	r0, r3
  1116ec:	e24bd008 	sub	sp, fp, #8
  1116f0:	e8bd8810 	pop	{r4, fp, pc}

001116f4 <lwip_bind>:
#include <stdio.h>
int
lwip_bind(int s, const struct sockaddr *name, socklen_t namelen)
{
  1116f4:	e92d4800 	push	{fp, lr}
  1116f8:	e28db004 	add	fp, sp, #4
  1116fc:	e24dd028 	sub	sp, sp, #40	; 0x28
  111700:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  111704:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  111708:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  struct lwip_sock *sock;
  ip_addr_t local_addr;
  u16_t local_port;
  err_t err;

  sock = get_socket(s);
  11170c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  111710:	ebfffe02 	bl	110f20 <get_socket>
  111714:	e50b0008 	str	r0, [fp, #-8]
  if (!sock) {
  111718:	e51b3008 	ldr	r3, [fp, #-8]
  11171c:	e3530000 	cmp	r3, #0
  111720:	1a000001 	bne	11172c <lwip_bind+0x38>
    return -1;
  111724:	e3e03000 	mvn	r3, #0
  111728:	ea000054 	b	111880 <lwip_bind+0x18c>
    sock_set_errno(sock, err_to_errno(ERR_VAL));
    return -1;
  }

  /* check size, family and alignment of 'name' */
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
  11172c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  111730:	e3530010 	cmp	r3, #16
  111734:	1a000007 	bne	111758 <lwip_bind+0x64>
  111738:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11173c:	e5d33001 	ldrb	r3, [r3, #1]
  111740:	e3530002 	cmp	r3, #2
  111744:	1a000003 	bne	111758 <lwip_bind+0x64>
  111748:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11174c:	e2033003 	and	r3, r3, #3
  111750:	e3530000 	cmp	r3, #0
  111754:	0a000016 	beq	1117b4 <lwip_bind+0xc0>
  111758:	e3060dd4 	movw	r0, #28116	; 0x6dd4
  11175c:	e3400014 	movt	r0, #20
  111760:	ebffc66b 	bl	103114 <rt_kprintf>
  111764:	e3001257 	movw	r1, #599	; 0x257
  111768:	e3060d70 	movw	r0, #28016	; 0x6d70
  11176c:	e3400014 	movt	r0, #20
  111770:	ebffe65e 	bl	10b0f0 <sys_arch_assert>
  111774:	e3e0000f 	mvn	r0, #15
  111778:	ebfff9c0 	bl	10fe80 <err_to_errno>
  11177c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  111780:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111784:	e6ef2073 	uxtb	r2, r3
  111788:	e51b3008 	ldr	r3, [fp, #-8]
  11178c:	e5c32010 	strb	r2, [r3, #16]
  111790:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111794:	e3530000 	cmp	r3, #0
  111798:	0a000003 	beq	1117ac <lwip_bind+0xb8>
  11179c:	eb009dce 	bl	138edc <__errno_location>
  1117a0:	e1a02000 	mov	r2, r0
  1117a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1117a8:	e5823000 	str	r3, [r2]
  1117ac:	e3e03000 	mvn	r3, #0
  1117b0:	ea000032 	b	111880 <lwip_bind+0x18c>
             IS_SOCK_ADDR_TYPE_VALID(name) && IS_SOCK_ADDR_ALIGNED(name)),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);
  LWIP_UNUSED_ARG(namelen);

  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
  1117b4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1117b8:	e5933004 	ldr	r3, [r3, #4]
  1117bc:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  1117c0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1117c4:	e1d330b2 	ldrh	r3, [r3, #2]
  1117c8:	e1a00003 	mov	r0, r3
  1117cc:	eb001380 	bl	1165d4 <lwip_htons>
  1117d0:	e1a03000 	mov	r3, r0
  1117d4:	e14b30ba 	strh	r3, [fp, #-10]
    unmap_ipv4_mapped_ipv6(ip_2_ip4(&local_addr), ip_2_ip6(&local_addr));
    IP_SET_TYPE_VAL(local_addr, IPADDR_TYPE_V4);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  err = netconn_bind(sock->conn, &local_addr, local_port);
  1117d8:	e51b3008 	ldr	r3, [fp, #-8]
  1117dc:	e5933000 	ldr	r3, [r3]
  1117e0:	e15b20ba 	ldrh	r2, [fp, #-10]
  1117e4:	e24b101c 	sub	r1, fp, #28
  1117e8:	e1a00003 	mov	r0, r3
  1117ec:	ebffe76d 	bl	10b5a8 <netconn_bind>
  1117f0:	e1a03000 	mov	r3, r0
  1117f4:	e54b300b 	strb	r3, [fp, #-11]

  if (err != ERR_OK) {
  1117f8:	e15b30db 	ldrsb	r3, [fp, #-11]
  1117fc:	e3530000 	cmp	r3, #0
  111800:	0a000010 	beq	111848 <lwip_bind+0x154>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
  111804:	e15b30db 	ldrsb	r3, [fp, #-11]
  111808:	e1a00003 	mov	r0, r3
  11180c:	ebfff99b 	bl	10fe80 <err_to_errno>
  111810:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  111814:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111818:	e6ef2073 	uxtb	r2, r3
  11181c:	e51b3008 	ldr	r3, [fp, #-8]
  111820:	e5c32010 	strb	r2, [r3, #16]
  111824:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111828:	e3530000 	cmp	r3, #0
  11182c:	0a000003 	beq	111840 <lwip_bind+0x14c>
  111830:	eb009da9 	bl	138edc <__errno_location>
  111834:	e1a02000 	mov	r2, r0
  111838:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11183c:	e5823000 	str	r3, [r2]
    return -1;
  111840:	e3e03000 	mvn	r3, #0
  111844:	ea00000d 	b	111880 <lwip_bind+0x18c>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
  111848:	e3a03000 	mov	r3, #0
  11184c:	e50b3010 	str	r3, [fp, #-16]
  111850:	e51b3010 	ldr	r3, [fp, #-16]
  111854:	e6ef2073 	uxtb	r2, r3
  111858:	e51b3008 	ldr	r3, [fp, #-8]
  11185c:	e5c32010 	strb	r2, [r3, #16]
  111860:	e51b3010 	ldr	r3, [fp, #-16]
  111864:	e3530000 	cmp	r3, #0
  111868:	0a000003 	beq	11187c <lwip_bind+0x188>
  11186c:	eb009d9a 	bl	138edc <__errno_location>
  111870:	e1a02000 	mov	r2, r0
  111874:	e51b3010 	ldr	r3, [fp, #-16]
  111878:	e5823000 	str	r3, [r2]
  return 0;
  11187c:	e3a03000 	mov	r3, #0
}
  111880:	e1a00003 	mov	r0, r3
  111884:	e24bd004 	sub	sp, fp, #4
  111888:	e8bd8800 	pop	{fp, pc}

0011188c <lwip_close>:

int
lwip_close(int s)
{
  11188c:	e92d4800 	push	{fp, lr}
  111890:	e28db004 	add	fp, sp, #4
  111894:	e24dd018 	sub	sp, sp, #24
  111898:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct lwip_sock *sock;
  int is_tcp = 0;
  11189c:	e3a03000 	mov	r3, #0
  1118a0:	e50b3008 	str	r3, [fp, #-8]
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));

  sock = get_socket(s);
  1118a4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1118a8:	ebfffd9c 	bl	110f20 <get_socket>
  1118ac:	e50b000c 	str	r0, [fp, #-12]
  if (!sock) {
  1118b0:	e51b300c 	ldr	r3, [fp, #-12]
  1118b4:	e3530000 	cmp	r3, #0
  1118b8:	1a000001 	bne	1118c4 <lwip_close+0x38>
    return -1;
  1118bc:	e3e03000 	mvn	r3, #0
  1118c0:	ea000038 	b	1119a8 <lwip_close+0x11c>
  }

  if (sock->conn != NULL) {
  1118c4:	e51b300c 	ldr	r3, [fp, #-12]
  1118c8:	e5933000 	ldr	r3, [r3]
  1118cc:	e3530000 	cmp	r3, #0
  1118d0:	0a000009 	beq	1118fc <lwip_close+0x70>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
  1118d4:	e51b300c 	ldr	r3, [fp, #-12]
  1118d8:	e5933000 	ldr	r3, [r3]
  1118dc:	e5933000 	ldr	r3, [r3]
  1118e0:	e20330f0 	and	r3, r3, #240	; 0xf0
  1118e4:	e3530010 	cmp	r3, #16
  1118e8:	03a03001 	moveq	r3, #1
  1118ec:	13a03000 	movne	r3, #0
  1118f0:	e6ef3073 	uxtb	r3, r3
  1118f4:	e50b3008 	str	r3, [fp, #-8]
  1118f8:	ea00000a 	b	111928 <lwip_close+0x9c>
  } else {
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata == NULL);
  1118fc:	e51b300c 	ldr	r3, [fp, #-12]
  111900:	e5933004 	ldr	r3, [r3, #4]
  111904:	e3530000 	cmp	r3, #0
  111908:	0a000006 	beq	111928 <lwip_close+0x9c>
  11190c:	e3060df0 	movw	r0, #28144	; 0x6df0
  111910:	e3400014 	movt	r0, #20
  111914:	ebffc5fe 	bl	103114 <rt_kprintf>
  111918:	e3001285 	movw	r1, #645	; 0x285
  11191c:	e3060d70 	movw	r0, #28016	; 0x6d70
  111920:	e3400014 	movt	r0, #20
  111924:	ebffe5f1 	bl	10b0f0 <sys_arch_assert>
  }

#if LWIP_IGMP
  /* drop all possibly joined IGMP memberships */
  lwip_socket_drop_registered_memberships(s);
  111928:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  11192c:	eb001126 	bl	115dcc <lwip_socket_drop_registered_memberships>
#endif /* LWIP_IGMP */

  err = netconn_delete(sock->conn);
  111930:	e51b300c 	ldr	r3, [fp, #-12]
  111934:	e5933000 	ldr	r3, [r3]
  111938:	e1a00003 	mov	r0, r3
  11193c:	ebffe6bb 	bl	10b430 <netconn_delete>
  111940:	e1a03000 	mov	r3, r0
  111944:	e54b300d 	strb	r3, [fp, #-13]
  if (err != ERR_OK) {
  111948:	e15b30dd 	ldrsb	r3, [fp, #-13]
  11194c:	e3530000 	cmp	r3, #0
  111950:	0a000010 	beq	111998 <lwip_close+0x10c>
    sock_set_errno(sock, err_to_errno(err));
  111954:	e15b30dd 	ldrsb	r3, [fp, #-13]
  111958:	e1a00003 	mov	r0, r3
  11195c:	ebfff947 	bl	10fe80 <err_to_errno>
  111960:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  111964:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111968:	e6ef2073 	uxtb	r2, r3
  11196c:	e51b300c 	ldr	r3, [fp, #-12]
  111970:	e5c32010 	strb	r2, [r3, #16]
  111974:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111978:	e3530000 	cmp	r3, #0
  11197c:	0a000003 	beq	111990 <lwip_close+0x104>
  111980:	eb009d55 	bl	138edc <__errno_location>
  111984:	e1a02000 	mov	r2, r0
  111988:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11198c:	e5823000 	str	r3, [r2]
    return -1;
  111990:	e3e03000 	mvn	r3, #0
  111994:	ea000003 	b	1119a8 <lwip_close+0x11c>
  }

  free_socket(sock, is_tcp);
  111998:	e51b1008 	ldr	r1, [fp, #-8]
  11199c:	e51b000c 	ldr	r0, [fp, #-12]
  1119a0:	ebfffe21 	bl	11122c <free_socket>
  set_errno(0);
  return 0;
  1119a4:	e3a03000 	mov	r3, #0
}
  1119a8:	e1a00003 	mov	r0, r3
  1119ac:	e24bd004 	sub	sp, fp, #4
  1119b0:	e8bd8800 	pop	{fp, pc}

001119b4 <lwip_connect>:

int
lwip_connect(int s, const struct sockaddr *name, socklen_t namelen)
{
  1119b4:	e92d4800 	push	{fp, lr}
  1119b8:	e28db004 	add	fp, sp, #4
  1119bc:	e24dd030 	sub	sp, sp, #48	; 0x30
  1119c0:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  1119c4:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  1119c8:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  struct lwip_sock *sock;
  err_t err;

  sock = get_socket(s);
  1119cc:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1119d0:	ebfffd52 	bl	110f20 <get_socket>
  1119d4:	e50b000c 	str	r0, [fp, #-12]
  if (!sock) {
  1119d8:	e51b300c 	ldr	r3, [fp, #-12]
  1119dc:	e3530000 	cmp	r3, #0
  1119e0:	1a000001 	bne	1119ec <lwip_connect+0x38>
    return -1;
  1119e4:	e3e03000 	mvn	r3, #0
  1119e8:	ea000063 	b	111b7c <lwip_connect+0x1c8>
    sock_set_errno(sock, err_to_errno(ERR_VAL));
    return -1;
  }

  LWIP_UNUSED_ARG(namelen);
  if (name->sa_family == AF_UNSPEC) {
  1119ec:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1119f0:	e5d33001 	ldrb	r3, [r3, #1]
  1119f4:	e3530000 	cmp	r3, #0
  1119f8:	1a000006 	bne	111a18 <lwip_connect+0x64>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d, AF_UNSPEC)\n", s));
    err = netconn_disconnect(sock->conn);
  1119fc:	e51b300c 	ldr	r3, [fp, #-12]
  111a00:	e5933000 	ldr	r3, [r3]
  111a04:	e1a00003 	mov	r0, r3
  111a08:	ebffe73a 	bl	10b6f8 <netconn_disconnect>
  111a0c:	e1a03000 	mov	r3, r0
  111a10:	e54b3005 	strb	r3, [fp, #-5]
  111a14:	ea000036 	b	111af4 <lwip_connect+0x140>
  } else {
    ip_addr_t remote_addr;
    u16_t remote_port;

    /* check size, family and alignment of 'name' */
    LWIP_ERROR("lwip_connect: invalid address", IS_SOCK_ADDR_LEN_VALID(namelen) &&
  111a18:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  111a1c:	e3530010 	cmp	r3, #16
  111a20:	1a00000b 	bne	111a54 <lwip_connect+0xa0>
  111a24:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111a28:	e5d33001 	ldrb	r3, [r3, #1]
  111a2c:	e3530000 	cmp	r3, #0
  111a30:	0a000003 	beq	111a44 <lwip_connect+0x90>
  111a34:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111a38:	e5d33001 	ldrb	r3, [r3, #1]
  111a3c:	e3530002 	cmp	r3, #2
  111a40:	1a000003 	bne	111a54 <lwip_connect+0xa0>
  111a44:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111a48:	e2033003 	and	r3, r3, #3
  111a4c:	e3530000 	cmp	r3, #0
  111a50:	0a000016 	beq	111ab0 <lwip_connect+0xfc>
  111a54:	e3060e08 	movw	r0, #28168	; 0x6e08
  111a58:	e3400014 	movt	r0, #20
  111a5c:	ebffc5ac 	bl	103114 <rt_kprintf>
  111a60:	e3a01fad 	mov	r1, #692	; 0x2b4
  111a64:	e3060d70 	movw	r0, #28016	; 0x6d70
  111a68:	e3400014 	movt	r0, #20
  111a6c:	ebffe59f 	bl	10b0f0 <sys_arch_assert>
  111a70:	e3e0000f 	mvn	r0, #15
  111a74:	ebfff901 	bl	10fe80 <err_to_errno>
  111a78:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  111a7c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111a80:	e6ef2073 	uxtb	r2, r3
  111a84:	e51b300c 	ldr	r3, [fp, #-12]
  111a88:	e5c32010 	strb	r2, [r3, #16]
  111a8c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111a90:	e3530000 	cmp	r3, #0
  111a94:	0a000003 	beq	111aa8 <lwip_connect+0xf4>
  111a98:	eb009d0f 	bl	138edc <__errno_location>
  111a9c:	e1a02000 	mov	r2, r0
  111aa0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111aa4:	e5823000 	str	r3, [r2]
  111aa8:	e3e03000 	mvn	r3, #0
  111aac:	ea000032 	b	111b7c <lwip_connect+0x1c8>
               IS_SOCK_ADDR_TYPE_VALID_OR_UNSPEC(name) && IS_SOCK_ADDR_ALIGNED(name),
               sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);

    SOCKADDR_TO_IPADDR_PORT(name, &remote_addr, remote_port);
  111ab0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111ab4:	e5933004 	ldr	r3, [r3, #4]
  111ab8:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  111abc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111ac0:	e1d330b2 	ldrh	r3, [r3, #2]
  111ac4:	e1a00003 	mov	r0, r3
  111ac8:	eb0012c1 	bl	1165d4 <lwip_htons>
  111acc:	e1a03000 	mov	r3, r0
  111ad0:	e14b30be 	strh	r3, [fp, #-14]
      unmap_ipv4_mapped_ipv6(ip_2_ip4(&remote_addr), ip_2_ip6(&remote_addr));
      IP_SET_TYPE_VAL(remote_addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    err = netconn_connect(sock->conn, &remote_addr, remote_port);
  111ad4:	e51b300c 	ldr	r3, [fp, #-12]
  111ad8:	e5933000 	ldr	r3, [r3]
  111adc:	e15b20be 	ldrh	r2, [fp, #-14]
  111ae0:	e24b1020 	sub	r1, fp, #32
  111ae4:	e1a00003 	mov	r0, r3
  111ae8:	ebffe6d8 	bl	10b650 <netconn_connect>
  111aec:	e1a03000 	mov	r3, r0
  111af0:	e54b3005 	strb	r3, [fp, #-5]
  }

  if (err != ERR_OK) {
  111af4:	e15b30d5 	ldrsb	r3, [fp, #-5]
  111af8:	e3530000 	cmp	r3, #0
  111afc:	0a000010 	beq	111b44 <lwip_connect+0x190>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
  111b00:	e15b30d5 	ldrsb	r3, [fp, #-5]
  111b04:	e1a00003 	mov	r0, r3
  111b08:	ebfff8dc 	bl	10fe80 <err_to_errno>
  111b0c:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
  111b10:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  111b14:	e6ef2073 	uxtb	r2, r3
  111b18:	e51b300c 	ldr	r3, [fp, #-12]
  111b1c:	e5c32010 	strb	r2, [r3, #16]
  111b20:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  111b24:	e3530000 	cmp	r3, #0
  111b28:	0a000003 	beq	111b3c <lwip_connect+0x188>
  111b2c:	eb009cea 	bl	138edc <__errno_location>
  111b30:	e1a02000 	mov	r2, r0
  111b34:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  111b38:	e5823000 	str	r3, [r2]
    return -1;
  111b3c:	e3e03000 	mvn	r3, #0
  111b40:	ea00000d 	b	111b7c <lwip_connect+0x1c8>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
  111b44:	e3a03000 	mov	r3, #0
  111b48:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  111b4c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111b50:	e6ef2073 	uxtb	r2, r3
  111b54:	e51b300c 	ldr	r3, [fp, #-12]
  111b58:	e5c32010 	strb	r2, [r3, #16]
  111b5c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111b60:	e3530000 	cmp	r3, #0
  111b64:	0a000003 	beq	111b78 <lwip_connect+0x1c4>
  111b68:	eb009cdb 	bl	138edc <__errno_location>
  111b6c:	e1a02000 	mov	r2, r0
  111b70:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111b74:	e5823000 	str	r3, [r2]
  return 0;
  111b78:	e3a03000 	mov	r3, #0
}
  111b7c:	e1a00003 	mov	r0, r3
  111b80:	e24bd004 	sub	sp, fp, #4
  111b84:	e8bd8800 	pop	{fp, pc}

00111b88 <lwip_listen>:
 * @param backlog (ATTENTION: needs TCP_LISTEN_BACKLOG=1)
 * @return 0 on success, non-zero on failure
 */
int
lwip_listen(int s, int backlog)
{
  111b88:	e92d4800 	push	{fp, lr}
  111b8c:	e28db004 	add	fp, sp, #4
  111b90:	e24dd020 	sub	sp, sp, #32
  111b94:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  111b98:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  struct lwip_sock *sock;
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d, backlog=%d)\n", s, backlog));

  sock = get_socket(s);
  111b9c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  111ba0:	ebfffcde 	bl	110f20 <get_socket>
  111ba4:	e50b0008 	str	r0, [fp, #-8]
  if (!sock) {
  111ba8:	e51b3008 	ldr	r3, [fp, #-8]
  111bac:	e3530000 	cmp	r3, #0
  111bb0:	1a000001 	bne	111bbc <lwip_listen+0x34>
    return -1;
  111bb4:	e3e03000 	mvn	r3, #0
  111bb8:	ea000047 	b	111cdc <lwip_listen+0x154>
  }

  /* limit the "backlog" parameter to fit in an u8_t */
  backlog = LWIP_MIN(LWIP_MAX(backlog, 0), 0xff);
  111bbc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111bc0:	e35300fe 	cmp	r3, #254	; 0xfe
  111bc4:	ca000002 	bgt	111bd4 <lwip_listen+0x4c>
  111bc8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111bcc:	e1c33fc3 	bic	r3, r3, r3, asr #31
  111bd0:	ea000000 	b	111bd8 <lwip_listen+0x50>
  111bd4:	e3a030ff 	mov	r3, #255	; 0xff
  111bd8:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc

  err = netconn_listen_with_backlog(sock->conn, (u8_t)backlog);
  111bdc:	e51b3008 	ldr	r3, [fp, #-8]
  111be0:	e5933000 	ldr	r3, [r3]
  111be4:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  111be8:	e6ef2072 	uxtb	r2, r2
  111bec:	e1a01002 	mov	r1, r2
  111bf0:	e1a00003 	mov	r0, r3
  111bf4:	ebffe6dc 	bl	10b76c <netconn_listen_with_backlog>
  111bf8:	e1a03000 	mov	r3, r0
  111bfc:	e54b3009 	strb	r3, [fp, #-9]

  if (err != ERR_OK) {
  111c00:	e15b30d9 	ldrsb	r3, [fp, #-9]
  111c04:	e3530000 	cmp	r3, #0
  111c08:	0a000025 	beq	111ca4 <lwip_listen+0x11c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d) failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
  111c0c:	e51b3008 	ldr	r3, [fp, #-8]
  111c10:	e5933000 	ldr	r3, [r3]
  111c14:	e5933000 	ldr	r3, [r3]
  111c18:	e20330f0 	and	r3, r3, #240	; 0xf0
  111c1c:	e3530010 	cmp	r3, #16
  111c20:	0a00000e 	beq	111c60 <lwip_listen+0xd8>
      sock_set_errno(sock, EOPNOTSUPP);
  111c24:	e3a0305f 	mov	r3, #95	; 0x5f
  111c28:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  111c2c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111c30:	e6ef2073 	uxtb	r2, r3
  111c34:	e51b3008 	ldr	r3, [fp, #-8]
  111c38:	e5c32010 	strb	r2, [r3, #16]
  111c3c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111c40:	e3530000 	cmp	r3, #0
  111c44:	0a000003 	beq	111c58 <lwip_listen+0xd0>
  111c48:	eb009ca3 	bl	138edc <__errno_location>
  111c4c:	e1a02000 	mov	r2, r0
  111c50:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111c54:	e5823000 	str	r3, [r2]
      return -1;
  111c58:	e3e03000 	mvn	r3, #0
  111c5c:	ea00001e 	b	111cdc <lwip_listen+0x154>
    }
    sock_set_errno(sock, err_to_errno(err));
  111c60:	e15b30d9 	ldrsb	r3, [fp, #-9]
  111c64:	e1a00003 	mov	r0, r3
  111c68:	ebfff884 	bl	10fe80 <err_to_errno>
  111c6c:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  111c70:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111c74:	e6ef2073 	uxtb	r2, r3
  111c78:	e51b3008 	ldr	r3, [fp, #-8]
  111c7c:	e5c32010 	strb	r2, [r3, #16]
  111c80:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111c84:	e3530000 	cmp	r3, #0
  111c88:	0a000003 	beq	111c9c <lwip_listen+0x114>
  111c8c:	eb009c92 	bl	138edc <__errno_location>
  111c90:	e1a02000 	mov	r2, r0
  111c94:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111c98:	e5823000 	str	r3, [r2]
    return -1;
  111c9c:	e3e03000 	mvn	r3, #0
  111ca0:	ea00000d 	b	111cdc <lwip_listen+0x154>
  }

  sock_set_errno(sock, 0);
  111ca4:	e3a03000 	mov	r3, #0
  111ca8:	e50b3010 	str	r3, [fp, #-16]
  111cac:	e51b3010 	ldr	r3, [fp, #-16]
  111cb0:	e6ef2073 	uxtb	r2, r3
  111cb4:	e51b3008 	ldr	r3, [fp, #-8]
  111cb8:	e5c32010 	strb	r2, [r3, #16]
  111cbc:	e51b3010 	ldr	r3, [fp, #-16]
  111cc0:	e3530000 	cmp	r3, #0
  111cc4:	0a000003 	beq	111cd8 <lwip_listen+0x150>
  111cc8:	eb009c83 	bl	138edc <__errno_location>
  111ccc:	e1a02000 	mov	r2, r0
  111cd0:	e51b3010 	ldr	r3, [fp, #-16]
  111cd4:	e5823000 	str	r3, [r2]
  return 0;
  111cd8:	e3a03000 	mov	r3, #0
}
  111cdc:	e1a00003 	mov	r0, r3
  111ce0:	e24bd004 	sub	sp, fp, #4
  111ce4:	e8bd8800 	pop	{fp, pc}

00111ce8 <lwip_recvfrom>:

int
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
  111ce8:	e92d4810 	push	{r4, fp, lr}
  111cec:	e28db008 	add	fp, sp, #8
  111cf0:	e24dd05c 	sub	sp, sp, #92	; 0x5c
  111cf4:	e50b0058 	str	r0, [fp, #-88]	; 0xffffffa8
  111cf8:	e50b105c 	str	r1, [fp, #-92]	; 0xffffffa4
  111cfc:	e50b2060 	str	r2, [fp, #-96]	; 0xffffffa0
  111d00:	e50b3064 	str	r3, [fp, #-100]	; 0xffffff9c
  struct lwip_sock *sock;
  void             *buf = NULL;
  111d04:	e3a03000 	mov	r3, #0
  111d08:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  struct pbuf      *p;
  u16_t            buflen, copylen;
  int              off = 0;
  111d0c:	e3a03000 	mov	r3, #0
  111d10:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  u8_t             done = 0;
  111d14:	e3a03000 	mov	r3, #0
  111d18:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  err_t            err;
  
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
  111d1c:	e51b0058 	ldr	r0, [fp, #-88]	; 0xffffffa8
  111d20:	ebfffc7e 	bl	110f20 <get_socket>
  111d24:	e50b0024 	str	r0, [fp, #-36]	; 0xffffffdc
  if (!sock) {
  111d28:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111d2c:	e3530000 	cmp	r3, #0
  111d30:	1a000001 	bne	111d3c <lwip_recvfrom+0x54>
    return -1;
  111d34:	e3e03000 	mvn	r3, #0
  111d38:	ea00015b 	b	1122ac <lwip_recvfrom+0x5c4>
  }

  do {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: top while sock->lastdata=%p\n", sock->lastdata));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata) {
  111d3c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111d40:	e5933004 	ldr	r3, [r3, #4]
  111d44:	e3530000 	cmp	r3, #0
  111d48:	0a000003 	beq	111d5c <lwip_recvfrom+0x74>
      buf = sock->lastdata;
  111d4c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111d50:	e5933004 	ldr	r3, [r3, #4]
  111d54:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  111d58:	ea00007d 	b	111f54 <lwip_recvfrom+0x26c>
    } else {
      /* If this is non-blocking call, then check first */
      if (((flags & MSG_DONTWAIT) || netconn_is_nonblocking(sock->conn)) &&
  111d5c:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
  111d60:	e2033008 	and	r3, r3, #8
  111d64:	e3530000 	cmp	r3, #0
  111d68:	1a000005 	bne	111d84 <lwip_recvfrom+0x9c>
  111d6c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111d70:	e5933000 	ldr	r3, [r3]
  111d74:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  111d78:	e2033002 	and	r3, r3, #2
  111d7c:	e3530000 	cmp	r3, #0
  111d80:	0a00001b 	beq	111df4 <lwip_recvfrom+0x10c>
          (sock->rcvevent <= 0)) {
  111d84:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111d88:	e1d330fa 	ldrsh	r3, [r3, #10]
      if (((flags & MSG_DONTWAIT) || netconn_is_nonblocking(sock->conn)) &&
  111d8c:	e3530000 	cmp	r3, #0
  111d90:	ca000017 	bgt	111df4 <lwip_recvfrom+0x10c>
        if (off > 0) {
  111d94:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111d98:	e3530000 	cmp	r3, #0
  111d9c:	da00000e 	ble	111ddc <lwip_recvfrom+0xf4>
          /* already received data, return that */
          sock_set_errno(sock, 0);
  111da0:	e3a03000 	mov	r3, #0
  111da4:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  111da8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  111dac:	e6ef2073 	uxtb	r2, r3
  111db0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111db4:	e5c32010 	strb	r2, [r3, #16]
  111db8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  111dbc:	e3530000 	cmp	r3, #0
  111dc0:	0a000003 	beq	111dd4 <lwip_recvfrom+0xec>
  111dc4:	eb009c44 	bl	138edc <__errno_location>
  111dc8:	e1a02000 	mov	r2, r0
  111dcc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  111dd0:	e5823000 	str	r3, [r2]
          return off;
  111dd4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111dd8:	ea000133 	b	1122ac <lwip_recvfrom+0x5c4>
        }

        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d): returning EWOULDBLOCK\n", s));
        set_errno(EWOULDBLOCK);
  111ddc:	eb009c3e 	bl	138edc <__errno_location>
  111de0:	e1a02000 	mov	r2, r0
  111de4:	e3a0300b 	mov	r3, #11
  111de8:	e5823000 	str	r3, [r2]
        return -1;
  111dec:	e3e03000 	mvn	r3, #0
  111df0:	ea00012d 	b	1122ac <lwip_recvfrom+0x5c4>
      }
      /* No data was left from the previous operation, so we try to get
         some from the network. */
      if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
  111df4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111df8:	e5933000 	ldr	r3, [r3]
  111dfc:	e5933000 	ldr	r3, [r3]
  111e00:	e20330f0 	and	r3, r3, #240	; 0xf0
  111e04:	e3530010 	cmp	r3, #16
  111e08:	1a000008 	bne	111e30 <lwip_recvfrom+0x148>
        err = netconn_recv_tcp_pbuf(sock->conn, (struct pbuf **)&buf);
  111e0c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111e10:	e5933000 	ldr	r3, [r3]
  111e14:	e24b203c 	sub	r2, fp, #60	; 0x3c
  111e18:	e1a01002 	mov	r1, r2
  111e1c:	e1a00003 	mov	r0, r3
  111e20:	ebffe794 	bl	10bc78 <netconn_recv_tcp_pbuf>
  111e24:	e1a03000 	mov	r3, r0
  111e28:	e54b301a 	strb	r3, [fp, #-26]	; 0xffffffe6
  111e2c:	ea000007 	b	111e50 <lwip_recvfrom+0x168>
      } else {
        err = netconn_recv(sock->conn, (struct netbuf **)&buf);
  111e30:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111e34:	e5933000 	ldr	r3, [r3]
  111e38:	e24b203c 	sub	r2, fp, #60	; 0x3c
  111e3c:	e1a01002 	mov	r1, r2
  111e40:	e1a00003 	mov	r0, r3
  111e44:	ebffe7a8 	bl	10bcec <netconn_recv>
  111e48:	e1a03000 	mov	r3, r0
  111e4c:	e54b301a 	strb	r3, [fp, #-26]	; 0xffffffe6
      }
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: netconn_recv err=%d, netbuf=%p\n",
        err, buf));

      if (err != ERR_OK) {
  111e50:	e15b31da 	ldrsb	r3, [fp, #-26]	; 0xffffffe6
  111e54:	e3530000 	cmp	r3, #0
  111e58:	0a000030 	beq	111f20 <lwip_recvfrom+0x238>
        if (off > 0) {
  111e5c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111e60:	e3530000 	cmp	r3, #0
  111e64:	da000017 	ble	111ec8 <lwip_recvfrom+0x1e0>
          if (err == ERR_CLSD) {
  111e68:	e15b31da 	ldrsb	r3, [fp, #-26]	; 0xffffffe6
  111e6c:	e373000f 	cmn	r3, #15
  111e70:	1a000005 	bne	111e8c <lwip_recvfrom+0x1a4>
            /* closed but already received data, ensure select gets the FIN, too */
            event_callback(sock->conn, NETCONN_EVT_RCVPLUS, 0);
  111e74:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111e78:	e5933000 	ldr	r3, [r3]
  111e7c:	e3a02000 	mov	r2, #0
  111e80:	e3a01000 	mov	r1, #0
  111e84:	e1a00003 	mov	r0, r3
  111e88:	eb0006bc 	bl	113980 <event_callback>
          }
          /* already received data, return that */
          sock_set_errno(sock, 0);
  111e8c:	e3a03000 	mov	r3, #0
  111e90:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
  111e94:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  111e98:	e6ef2073 	uxtb	r2, r3
  111e9c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111ea0:	e5c32010 	strb	r2, [r3, #16]
  111ea4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  111ea8:	e3530000 	cmp	r3, #0
  111eac:	0a000003 	beq	111ec0 <lwip_recvfrom+0x1d8>
  111eb0:	eb009c09 	bl	138edc <__errno_location>
  111eb4:	e1a02000 	mov	r2, r0
  111eb8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  111ebc:	e5823000 	str	r3, [r2]
          return off;
  111ec0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111ec4:	ea0000f8 	b	1122ac <lwip_recvfrom+0x5c4>
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d): buf == NULL, error is \"%s\"!\n",
          s, lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
  111ec8:	e15b31da 	ldrsb	r3, [fp, #-26]	; 0xffffffe6
  111ecc:	e1a00003 	mov	r0, r3
  111ed0:	ebfff7ea 	bl	10fe80 <err_to_errno>
  111ed4:	e50b002c 	str	r0, [fp, #-44]	; 0xffffffd4
  111ed8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111edc:	e6ef2073 	uxtb	r2, r3
  111ee0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111ee4:	e5c32010 	strb	r2, [r3, #16]
  111ee8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111eec:	e3530000 	cmp	r3, #0
  111ef0:	0a000003 	beq	111f04 <lwip_recvfrom+0x21c>
  111ef4:	eb009bf8 	bl	138edc <__errno_location>
  111ef8:	e1a02000 	mov	r2, r0
  111efc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111f00:	e5823000 	str	r3, [r2]
        if (err == ERR_CLSD) {
  111f04:	e15b31da 	ldrsb	r3, [fp, #-26]	; 0xffffffe6
  111f08:	e373000f 	cmn	r3, #15
  111f0c:	1a000001 	bne	111f18 <lwip_recvfrom+0x230>
          return 0;
  111f10:	e3a03000 	mov	r3, #0
  111f14:	ea0000e4 	b	1122ac <lwip_recvfrom+0x5c4>
        } else {
          return -1;
  111f18:	e3e03000 	mvn	r3, #0
  111f1c:	ea0000e2 	b	1122ac <lwip_recvfrom+0x5c4>
        }
      }
      LWIP_ASSERT("buf != NULL", buf != NULL);
  111f20:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  111f24:	e3530000 	cmp	r3, #0
  111f28:	1a000006 	bne	111f48 <lwip_recvfrom+0x260>
  111f2c:	e3060e28 	movw	r0, #28200	; 0x6e28
  111f30:	e3400014 	movt	r0, #20
  111f34:	ebffc476 	bl	103114 <rt_kprintf>
  111f38:	e3a01fcf 	mov	r1, #828	; 0x33c
  111f3c:	e3060d70 	movw	r0, #28016	; 0x6d70
  111f40:	e3400014 	movt	r0, #20
  111f44:	ebffe469 	bl	10b0f0 <sys_arch_assert>
      sock->lastdata = buf;
  111f48:	e51b203c 	ldr	r2, [fp, #-60]	; 0xffffffc4
  111f4c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111f50:	e5832004 	str	r2, [r3, #4]
    }

    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
  111f54:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111f58:	e5933000 	ldr	r3, [r3]
  111f5c:	e5933000 	ldr	r3, [r3]
  111f60:	e20330f0 	and	r3, r3, #240	; 0xf0
  111f64:	e3530010 	cmp	r3, #16
  111f68:	1a000002 	bne	111f78 <lwip_recvfrom+0x290>
      p = (struct pbuf *)buf;
  111f6c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  111f70:	e50b3010 	str	r3, [fp, #-16]
  111f74:	ea000002 	b	111f84 <lwip_recvfrom+0x29c>
    } else {
      p = ((struct netbuf *)buf)->p;
  111f78:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  111f7c:	e5933000 	ldr	r3, [r3]
  111f80:	e50b3010 	str	r3, [fp, #-16]
    }
    buflen = p->tot_len;
  111f84:	e51b3010 	ldr	r3, [fp, #-16]
  111f88:	e1d330b8 	ldrh	r3, [r3, #8]
  111f8c:	e14b33b2 	strh	r3, [fp, #-50]	; 0xffffffce
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: buflen=%"U16_F" len=%"SZT_F" off=%d sock->lastoffset=%"U16_F"\n",
      buflen, len, off, sock->lastoffset));

    buflen -= sock->lastoffset;
  111f90:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111f94:	e1d330b8 	ldrh	r3, [r3, #8]
  111f98:	e15b23b2 	ldrh	r2, [fp, #-50]	; 0xffffffce
  111f9c:	e0423003 	sub	r3, r2, r3
  111fa0:	e14b33b2 	strh	r3, [fp, #-50]	; 0xffffffce

    if (len > buflen) {
  111fa4:	e15b33b2 	ldrh	r3, [fp, #-50]	; 0xffffffce
  111fa8:	e51b2060 	ldr	r2, [fp, #-96]	; 0xffffffa0
  111fac:	e1520003 	cmp	r2, r3
  111fb0:	9a000002 	bls	111fc0 <lwip_recvfrom+0x2d8>
      copylen = buflen;
  111fb4:	e15b33b2 	ldrh	r3, [fp, #-50]	; 0xffffffce
  111fb8:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  111fbc:	ea000001 	b	111fc8 <lwip_recvfrom+0x2e0>
    } else {
      copylen = (u16_t)len;
  111fc0:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
  111fc4:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t*)mem + off, copylen, sock->lastoffset);
  111fc8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111fcc:	e51b205c 	ldr	r2, [fp, #-92]	; 0xffffffa4
  111fd0:	e0821003 	add	r1, r2, r3
  111fd4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111fd8:	e1d330b8 	ldrh	r3, [r3, #8]
  111fdc:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  111fe0:	e51b0010 	ldr	r0, [fp, #-16]
  111fe4:	eb0025bc 	bl	11b6dc <pbuf_copy_partial>

    off += copylen;
  111fe8:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  111fec:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  111ff0:	e0823003 	add	r3, r2, r3
  111ff4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
  111ff8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111ffc:	e5933000 	ldr	r3, [r3]
  112000:	e5933000 	ldr	r3, [r3]
  112004:	e20330f0 	and	r3, r3, #240	; 0xf0
  112008:	e3530010 	cmp	r3, #16
  11200c:	1a000021 	bne	112098 <lwip_recvfrom+0x3b0>
      LWIP_ASSERT("invalid copylen, len would underflow", len >= copylen);
  112010:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  112014:	e51b2060 	ldr	r2, [fp, #-96]	; 0xffffffa0
  112018:	e1520003 	cmp	r2, r3
  11201c:	2a000006 	bcs	11203c <lwip_recvfrom+0x354>
  112020:	e3060e34 	movw	r0, #28212	; 0x6e34
  112024:	e3400014 	movt	r0, #20
  112028:	ebffc439 	bl	103114 <rt_kprintf>
  11202c:	e3a01fd6 	mov	r1, #856	; 0x358
  112030:	e3060d70 	movw	r0, #28016	; 0x6d70
  112034:	e3400014 	movt	r0, #20
  112038:	ebffe42c 	bl	10b0f0 <sys_arch_assert>
      len -= copylen;
  11203c:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  112040:	e51b2060 	ldr	r2, [fp, #-96]	; 0xffffffa0
  112044:	e0423003 	sub	r3, r2, r3
  112048:	e50b3060 	str	r3, [fp, #-96]	; 0xffffffa0
      if ((len <= 0) ||
  11204c:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
  112050:	e3530000 	cmp	r3, #0
  112054:	0a00000c 	beq	11208c <lwip_recvfrom+0x3a4>
          (p->flags & PBUF_FLAG_PUSH) ||
  112058:	e51b3010 	ldr	r3, [fp, #-16]
  11205c:	e5d3300d 	ldrb	r3, [r3, #13]
  112060:	e2033001 	and	r3, r3, #1
      if ((len <= 0) ||
  112064:	e3530000 	cmp	r3, #0
  112068:	1a000007 	bne	11208c <lwip_recvfrom+0x3a4>
          (sock->rcvevent <= 0) ||
  11206c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112070:	e1d330fa 	ldrsh	r3, [r3, #10]
          (p->flags & PBUF_FLAG_PUSH) ||
  112074:	e3530000 	cmp	r3, #0
  112078:	da000003 	ble	11208c <lwip_recvfrom+0x3a4>
          ((flags & MSG_PEEK) != 0)) {
  11207c:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
  112080:	e2033001 	and	r3, r3, #1
          (sock->rcvevent <= 0) ||
  112084:	e3530000 	cmp	r3, #0
  112088:	0a000004 	beq	1120a0 <lwip_recvfrom+0x3b8>
        done = 1;
  11208c:	e3a03001 	mov	r3, #1
  112090:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  112094:	ea000001 	b	1120a0 <lwip_recvfrom+0x3b8>
      }
    } else {
      done = 1;
  112098:	e3a03001 	mov	r3, #1
  11209c:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
    }

    /* Check to see from where the data was.*/
    if (done) {
  1120a0:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
  1120a4:	e3530000 	cmp	r3, #0
  1120a8:	0a00003f 	beq	1121ac <lwip_recvfrom+0x4c4>
#if !SOCKETS_DEBUG
      if (from && fromlen)
  1120ac:	e59b3004 	ldr	r3, [fp, #4]
  1120b0:	e3530000 	cmp	r3, #0
  1120b4:	0a00003c 	beq	1121ac <lwip_recvfrom+0x4c4>
  1120b8:	e59b3008 	ldr	r3, [fp, #8]
  1120bc:	e3530000 	cmp	r3, #0
  1120c0:	0a000039 	beq	1121ac <lwip_recvfrom+0x4c4>
        u16_t port;
        ip_addr_t tmpaddr;
        ip_addr_t *fromaddr;
        union sockaddr_aligned saddr;
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d): addr=", s));
        if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
  1120c4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1120c8:	e5933000 	ldr	r3, [r3]
  1120cc:	e5933000 	ldr	r3, [r3]
  1120d0:	e20330f0 	and	r3, r3, #240	; 0xf0
  1120d4:	e3530010 	cmp	r3, #16
  1120d8:	1a000008 	bne	112100 <lwip_recvfrom+0x418>
          fromaddr = &tmpaddr;
  1120dc:	e24b3044 	sub	r3, fp, #68	; 0x44
  1120e0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
          netconn_getaddr(sock->conn, fromaddr, &port, 0);
  1120e4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1120e8:	e5930000 	ldr	r0, [r3]
  1120ec:	e24b203e 	sub	r2, fp, #62	; 0x3e
  1120f0:	e3a03000 	mov	r3, #0
  1120f4:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  1120f8:	ebffe4ec 	bl	10b4b0 <netconn_getaddr>
  1120fc:	ea000005 	b	112118 <lwip_recvfrom+0x430>
        } else {
          port = netbuf_fromport((struct netbuf *)buf);
  112100:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  112104:	e1d330bc 	ldrh	r3, [r3, #12]
  112108:	e14b33be 	strh	r3, [fp, #-62]	; 0xffffffc2
          fromaddr = netbuf_fromaddr((struct netbuf *)buf);
  11210c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  112110:	e2833008 	add	r3, r3, #8
  112114:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
          ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
          IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
        }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

        IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
  112118:	e24b3054 	sub	r3, fp, #84	; 0x54
  11211c:	e3a02010 	mov	r2, #16
  112120:	e5c32000 	strb	r2, [r3]
  112124:	e24b3054 	sub	r3, fp, #84	; 0x54
  112128:	e3a02002 	mov	r2, #2
  11212c:	e5c32001 	strb	r2, [r3, #1]
  112130:	e15b33be 	ldrh	r3, [fp, #-62]	; 0xffffffc2
  112134:	e24b4054 	sub	r4, fp, #84	; 0x54
  112138:	e1a00003 	mov	r0, r3
  11213c:	eb001124 	bl	1165d4 <lwip_htons>
  112140:	e1a03000 	mov	r3, r0
  112144:	e1c430b2 	strh	r3, [r4, #2]
  112148:	e24b3054 	sub	r3, fp, #84	; 0x54
  11214c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  112150:	e5922000 	ldr	r2, [r2]
  112154:	e5832004 	str	r2, [r3, #4]
  112158:	e24b3054 	sub	r3, fp, #84	; 0x54
  11215c:	e2833008 	add	r3, r3, #8
  112160:	e3a02008 	mov	r2, #8
  112164:	e3a01000 	mov	r1, #0
  112168:	e1a00003 	mov	r0, r3
  11216c:	eb00bc40 	bl	141274 <memset>
        LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, off));
#if SOCKETS_DEBUG
        if (from && fromlen)
#endif /* SOCKETS_DEBUG */
        {
          if (*fromlen > saddr.sa.sa_len) {
  112170:	e59b3008 	ldr	r3, [fp, #8]
  112174:	e5933000 	ldr	r3, [r3]
  112178:	e55b2054 	ldrb	r2, [fp, #-84]	; 0xffffffac
  11217c:	e1530002 	cmp	r3, r2
  112180:	9a000003 	bls	112194 <lwip_recvfrom+0x4ac>
            *fromlen = saddr.sa.sa_len;
  112184:	e55b3054 	ldrb	r3, [fp, #-84]	; 0xffffffac
  112188:	e1a02003 	mov	r2, r3
  11218c:	e59b3008 	ldr	r3, [fp, #8]
  112190:	e5832000 	str	r2, [r3]
          }
          MEMCPY(from, &saddr, *fromlen);
  112194:	e59b3008 	ldr	r3, [fp, #8]
  112198:	e5932000 	ldr	r2, [r3]
  11219c:	e24b3054 	sub	r3, fp, #84	; 0x54
  1121a0:	e1a01003 	mov	r1, r3
  1121a4:	e59b0004 	ldr	r0, [fp, #4]
  1121a8:	eb00baf9 	bl	140d94 <memcpy>
        }
      }
    }

    /* If we don't peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
  1121ac:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
  1121b0:	e2033001 	and	r3, r3, #1
  1121b4:	e3530000 	cmp	r3, #0
  1121b8:	1a00002a 	bne	112268 <lwip_recvfrom+0x580>
      /* If this is a TCP socket, check if there is data left in the
         buffer. If so, it should be saved in the sock structure for next
         time around. */
      if ((NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) && (buflen - copylen > 0)) {
  1121bc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1121c0:	e5933000 	ldr	r3, [r3]
  1121c4:	e5933000 	ldr	r3, [r3]
  1121c8:	e20330f0 	and	r3, r3, #240	; 0xf0
  1121cc:	e3530010 	cmp	r3, #16
  1121d0:	1a00000f 	bne	112214 <lwip_recvfrom+0x52c>
  1121d4:	e15b23b2 	ldrh	r2, [fp, #-50]	; 0xffffffce
  1121d8:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  1121dc:	e0423003 	sub	r3, r2, r3
  1121e0:	e3530000 	cmp	r3, #0
  1121e4:	da00000a 	ble	112214 <lwip_recvfrom+0x52c>
        sock->lastdata = buf;
  1121e8:	e51b203c 	ldr	r2, [fp, #-60]	; 0xffffffc4
  1121ec:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1121f0:	e5832004 	str	r2, [r3, #4]
        sock->lastoffset += copylen;
  1121f4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1121f8:	e1d320b8 	ldrh	r2, [r3, #8]
  1121fc:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  112200:	e0823003 	add	r3, r2, r3
  112204:	e6ff2073 	uxth	r2, r3
  112208:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11220c:	e1c320b8 	strh	r2, [r3, #8]
  112210:	ea000014 	b	112268 <lwip_recvfrom+0x580>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: lastdata now netbuf=%p\n", buf));
      } else {
        sock->lastdata = NULL;
  112214:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112218:	e3a02000 	mov	r2, #0
  11221c:	e5832004 	str	r2, [r3, #4]
        sock->lastoffset = 0;
  112220:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112224:	e3a02000 	mov	r2, #0
  112228:	e1c320b8 	strh	r2, [r3, #8]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: deleting netbuf=%p\n", buf));
        if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
  11222c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112230:	e5933000 	ldr	r3, [r3]
  112234:	e5933000 	ldr	r3, [r3]
  112238:	e20330f0 	and	r3, r3, #240	; 0xf0
  11223c:	e3530010 	cmp	r3, #16
  112240:	1a000003 	bne	112254 <lwip_recvfrom+0x56c>
          pbuf_free((struct pbuf *)buf);
  112244:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  112248:	e1a00003 	mov	r0, r3
  11224c:	eb002317 	bl	11aeb0 <pbuf_free>
  112250:	ea000002 	b	112260 <lwip_recvfrom+0x578>
        } else {
          netbuf_delete((struct netbuf *)buf);
  112254:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  112258:	e1a00003 	mov	r0, r3
  11225c:	ebfff732 	bl	10ff2c <netbuf_delete>
        }
        buf = NULL;
  112260:	e3a03000 	mov	r3, #0
  112264:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
      }
    }
  } while (!done);
  112268:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
  11226c:	e3530000 	cmp	r3, #0
  112270:	0afffeb1 	beq	111d3c <lwip_recvfrom+0x54>

  sock_set_errno(sock, 0);
  112274:	e3a03000 	mov	r3, #0
  112278:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
  11227c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  112280:	e6ef2073 	uxtb	r2, r3
  112284:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112288:	e5c32010 	strb	r2, [r3, #16]
  11228c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  112290:	e3530000 	cmp	r3, #0
  112294:	0a000003 	beq	1122a8 <lwip_recvfrom+0x5c0>
  112298:	eb009b0f 	bl	138edc <__errno_location>
  11229c:	e1a02000 	mov	r2, r0
  1122a0:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1122a4:	e5823000 	str	r3, [r2]
  return off;
  1122a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
}
  1122ac:	e1a00003 	mov	r0, r3
  1122b0:	e24bd008 	sub	sp, fp, #8
  1122b4:	e8bd8810 	pop	{r4, fp, pc}

001122b8 <lwip_read>:

int
lwip_read(int s, void *mem, size_t len)
{
  1122b8:	e92d4800 	push	{fp, lr}
  1122bc:	e28db004 	add	fp, sp, #4
  1122c0:	e24dd018 	sub	sp, sp, #24
  1122c4:	e50b0008 	str	r0, [fp, #-8]
  1122c8:	e50b100c 	str	r1, [fp, #-12]
  1122cc:	e50b2010 	str	r2, [fp, #-16]
  return lwip_recvfrom(s, mem, len, 0, NULL, NULL);
  1122d0:	e3a03000 	mov	r3, #0
  1122d4:	e58d3004 	str	r3, [sp, #4]
  1122d8:	e3a03000 	mov	r3, #0
  1122dc:	e58d3000 	str	r3, [sp]
  1122e0:	e3a03000 	mov	r3, #0
  1122e4:	e51b2010 	ldr	r2, [fp, #-16]
  1122e8:	e51b100c 	ldr	r1, [fp, #-12]
  1122ec:	e51b0008 	ldr	r0, [fp, #-8]
  1122f0:	ebfffe7c 	bl	111ce8 <lwip_recvfrom>
  1122f4:	e1a03000 	mov	r3, r0
}
  1122f8:	e1a00003 	mov	r0, r3
  1122fc:	e24bd004 	sub	sp, fp, #4
  112300:	e8bd8800 	pop	{fp, pc}

00112304 <lwip_recv>:

int
lwip_recv(int s, void *mem, size_t len, int flags)
{
  112304:	e92d4800 	push	{fp, lr}
  112308:	e28db004 	add	fp, sp, #4
  11230c:	e24dd018 	sub	sp, sp, #24
  112310:	e50b0008 	str	r0, [fp, #-8]
  112314:	e50b100c 	str	r1, [fp, #-12]
  112318:	e50b2010 	str	r2, [fp, #-16]
  11231c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  return lwip_recvfrom(s, mem, len, flags, NULL, NULL);
  112320:	e3a03000 	mov	r3, #0
  112324:	e58d3004 	str	r3, [sp, #4]
  112328:	e3a03000 	mov	r3, #0
  11232c:	e58d3000 	str	r3, [sp]
  112330:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112334:	e51b2010 	ldr	r2, [fp, #-16]
  112338:	e51b100c 	ldr	r1, [fp, #-12]
  11233c:	e51b0008 	ldr	r0, [fp, #-8]
  112340:	ebfffe68 	bl	111ce8 <lwip_recvfrom>
  112344:	e1a03000 	mov	r3, r0
}
  112348:	e1a00003 	mov	r0, r3
  11234c:	e24bd004 	sub	sp, fp, #4
  112350:	e8bd8800 	pop	{fp, pc}

00112354 <lwip_send>:

int
lwip_send(int s, const void *data, size_t size, int flags)
{
  112354:	e92d4800 	push	{fp, lr}
  112358:	e28db004 	add	fp, sp, #4
  11235c:	e24dd028 	sub	sp, sp, #40	; 0x28
  112360:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  112364:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  112368:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  11236c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
  112370:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  112374:	ebfffae9 	bl	110f20 <get_socket>
  112378:	e50b0008 	str	r0, [fp, #-8]
  if (!sock) {
  11237c:	e51b3008 	ldr	r3, [fp, #-8]
  112380:	e3530000 	cmp	r3, #0
  112384:	1a000001 	bne	112390 <lwip_send+0x3c>
    return -1;
  112388:	e3e03000 	mvn	r3, #0
  11238c:	ea000041 	b	112498 <lwip_send+0x144>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
  112390:	e51b3008 	ldr	r3, [fp, #-8]
  112394:	e5933000 	ldr	r3, [r3]
  112398:	e5933000 	ldr	r3, [r3]
  11239c:	e20330f0 	and	r3, r3, #240	; 0xf0
  1123a0:	e3530010 	cmp	r3, #16
  1123a4:	0a00000a 	beq	1123d4 <lwip_send+0x80>
#if (LWIP_UDP || LWIP_RAW)
    return lwip_sendto(s, data, size, flags, NULL, 0);
  1123a8:	e3a03000 	mov	r3, #0
  1123ac:	e58d3004 	str	r3, [sp, #4]
  1123b0:	e3a03000 	mov	r3, #0
  1123b4:	e58d3000 	str	r3, [sp]
  1123b8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1123bc:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1123c0:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1123c4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1123c8:	eb0001b1 	bl	112a94 <lwip_sendto>
  1123cc:	e1a03000 	mov	r3, r0
  1123d0:	ea000030 	b	112498 <lwip_send+0x144>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = NETCONN_COPY |
    ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
  1123d4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1123d8:	e1a031c3 	asr	r3, r3, #3
  1123dc:	e6af3073 	sxtb	r3, r3
  1123e0:	e2033002 	and	r3, r3, #2
  1123e4:	e6af3073 	sxtb	r3, r3
  write_flags = NETCONN_COPY |
  1123e8:	e3833001 	orr	r3, r3, #1
  1123ec:	e6af2073 	sxtb	r2, r3
    ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0);
  1123f0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1123f4:	e1a030c3 	asr	r3, r3, #1
  1123f8:	e6af3073 	sxtb	r3, r3
  1123fc:	e2033004 	and	r3, r3, #4
  112400:	e6af3073 	sxtb	r3, r3
    ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
  112404:	e1823003 	orr	r3, r2, r3
  112408:	e6af3073 	sxtb	r3, r3
  write_flags = NETCONN_COPY |
  11240c:	e54b3009 	strb	r3, [fp, #-9]
  written = 0;
  112410:	e3a03000 	mov	r3, #0
  112414:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
  112418:	e51b3008 	ldr	r3, [fp, #-8]
  11241c:	e5930000 	ldr	r0, [r3]
  112420:	e55b2009 	ldrb	r2, [fp, #-9]
  112424:	e24b3014 	sub	r3, fp, #20
  112428:	e58d3000 	str	r3, [sp]
  11242c:	e1a03002 	mov	r3, r2
  112430:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  112434:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  112438:	ebffe6ce 	bl	10bf78 <netconn_write_partly>
  11243c:	e1a03000 	mov	r3, r0
  112440:	e54b300a 	strb	r3, [fp, #-10]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
  112444:	e15b30da 	ldrsb	r3, [fp, #-10]
  112448:	e1a00003 	mov	r0, r3
  11244c:	ebfff68b 	bl	10fe80 <err_to_errno>
  112450:	e50b0010 	str	r0, [fp, #-16]
  112454:	e51b3010 	ldr	r3, [fp, #-16]
  112458:	e6ef2073 	uxtb	r2, r3
  11245c:	e51b3008 	ldr	r3, [fp, #-8]
  112460:	e5c32010 	strb	r2, [r3, #16]
  112464:	e51b3010 	ldr	r3, [fp, #-16]
  112468:	e3530000 	cmp	r3, #0
  11246c:	0a000003 	beq	112480 <lwip_send+0x12c>
  112470:	eb009a99 	bl	138edc <__errno_location>
  112474:	e1a02000 	mov	r2, r0
  112478:	e51b3010 	ldr	r3, [fp, #-16]
  11247c:	e5823000 	str	r3, [r2]
  return (err == ERR_OK ? (int)written : -1);
  112480:	e15b30da 	ldrsb	r3, [fp, #-10]
  112484:	e3530000 	cmp	r3, #0
  112488:	1a000001 	bne	112494 <lwip_send+0x140>
  11248c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112490:	ea000000 	b	112498 <lwip_send+0x144>
  112494:	e3e03000 	mvn	r3, #0
}
  112498:	e1a00003 	mov	r0, r3
  11249c:	e24bd004 	sub	sp, fp, #4
  1124a0:	e8bd8800 	pop	{fp, pc}

001124a4 <lwip_sendmsg>:

int
lwip_sendmsg(int s, const struct msghdr *msg, int flags)
{
  1124a4:	e92d4800 	push	{fp, lr}
  1124a8:	e28db004 	add	fp, sp, #4
  1124ac:	e24dd058 	sub	sp, sp, #88	; 0x58
  1124b0:	e50b0048 	str	r0, [fp, #-72]	; 0xffffffb8
  1124b4:	e50b104c 	str	r1, [fp, #-76]	; 0xffffffb4
  1124b8:	e50b2050 	str	r2, [fp, #-80]	; 0xffffffb0
  int i;
#if LWIP_TCP
  u8_t write_flags;
  size_t written;
#endif
  int size = 0;
  1124bc:	e3a03000 	mov	r3, #0
  1124c0:	e50b300c 	str	r3, [fp, #-12]
  err_t err = ERR_OK;
  1124c4:	e3a03000 	mov	r3, #0
  1124c8:	e54b300d 	strb	r3, [fp, #-13]

  sock = get_socket(s);
  1124cc:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  1124d0:	ebfffa92 	bl	110f20 <get_socket>
  1124d4:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  if (!sock) {
  1124d8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1124dc:	e3530000 	cmp	r3, #0
  1124e0:	1a000001 	bne	1124ec <lwip_sendmsg+0x48>
    return -1;
  1124e4:	e3e03000 	mvn	r3, #0
  1124e8:	ea000166 	b	112a88 <lwip_sendmsg+0x5e4>
  }

  LWIP_ERROR("lwip_sendmsg: invalid msghdr", msg != NULL,
  1124ec:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  1124f0:	e3530000 	cmp	r3, #0
  1124f4:	1a000016 	bne	112554 <lwip_sendmsg+0xb0>
  1124f8:	e3060e5c 	movw	r0, #28252	; 0x6e5c
  1124fc:	e3400014 	movt	r0, #20
  112500:	ebffc303 	bl	103114 <rt_kprintf>
  112504:	e30013eb 	movw	r1, #1003	; 0x3eb
  112508:	e3060d70 	movw	r0, #28016	; 0x6d70
  11250c:	e3400014 	movt	r0, #20
  112510:	ebffe2f6 	bl	10b0f0 <sys_arch_assert>
  112514:	e3e0000f 	mvn	r0, #15
  112518:	ebfff658 	bl	10fe80 <err_to_errno>
  11251c:	e50b003c 	str	r0, [fp, #-60]	; 0xffffffc4
  112520:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  112524:	e6ef2073 	uxtb	r2, r3
  112528:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11252c:	e5c32010 	strb	r2, [r3, #16]
  112530:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  112534:	e3530000 	cmp	r3, #0
  112538:	0a000003 	beq	11254c <lwip_sendmsg+0xa8>
  11253c:	eb009a66 	bl	138edc <__errno_location>
  112540:	e1a02000 	mov	r2, r0
  112544:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  112548:	e5823000 	str	r3, [r2]
  11254c:	e3e03000 	mvn	r3, #0
  112550:	ea00014c 	b	112a88 <lwip_sendmsg+0x5e4>
             sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);

  LWIP_UNUSED_ARG(msg->msg_control);
  LWIP_UNUSED_ARG(msg->msg_controllen);
  LWIP_UNUSED_ARG(msg->msg_flags);
  LWIP_ERROR("lwip_sendmsg: invalid msghdr iov", (msg->msg_iov != NULL && msg->msg_iovlen != 0),
  112554:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112558:	e5933008 	ldr	r3, [r3, #8]
  11255c:	e3530000 	cmp	r3, #0
  112560:	0a000003 	beq	112574 <lwip_sendmsg+0xd0>
  112564:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112568:	e593300c 	ldr	r3, [r3, #12]
  11256c:	e3530000 	cmp	r3, #0
  112570:	1a000016 	bne	1125d0 <lwip_sendmsg+0x12c>
  112574:	e3060e7c 	movw	r0, #28284	; 0x6e7c
  112578:	e3400014 	movt	r0, #20
  11257c:	ebffc2e4 	bl	103114 <rt_kprintf>
  112580:	e30013f1 	movw	r1, #1009	; 0x3f1
  112584:	e3060d70 	movw	r0, #28016	; 0x6d70
  112588:	e3400014 	movt	r0, #20
  11258c:	ebffe2d7 	bl	10b0f0 <sys_arch_assert>
  112590:	e3e0000f 	mvn	r0, #15
  112594:	ebfff639 	bl	10fe80 <err_to_errno>
  112598:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
  11259c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1125a0:	e6ef2073 	uxtb	r2, r3
  1125a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1125a8:	e5c32010 	strb	r2, [r3, #16]
  1125ac:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1125b0:	e3530000 	cmp	r3, #0
  1125b4:	0a000003 	beq	1125c8 <lwip_sendmsg+0x124>
  1125b8:	eb009a47 	bl	138edc <__errno_location>
  1125bc:	e1a02000 	mov	r2, r0
  1125c0:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1125c4:	e5823000 	str	r3, [r2]
  1125c8:	e3e03000 	mvn	r3, #0
  1125cc:	ea00012d 	b	112a88 <lwip_sendmsg+0x5e4>
             sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
  1125d0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1125d4:	e5933000 	ldr	r3, [r3]
  1125d8:	e5933000 	ldr	r3, [r3]
  1125dc:	e20330f0 	and	r3, r3, #240	; 0xf0
  1125e0:	e3530010 	cmp	r3, #16
  1125e4:	1a000069 	bne	112790 <lwip_sendmsg+0x2ec>
#if LWIP_TCP
    write_flags = NETCONN_COPY |
    ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
  1125e8:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
  1125ec:	e1a031c3 	asr	r3, r3, #3
  1125f0:	e6af3073 	sxtb	r3, r3
  1125f4:	e2033002 	and	r3, r3, #2
  1125f8:	e6af3073 	sxtb	r3, r3
    write_flags = NETCONN_COPY |
  1125fc:	e3833001 	orr	r3, r3, #1
  112600:	e6af2073 	sxtb	r2, r3
    ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0);
  112604:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
  112608:	e1a030c3 	asr	r3, r3, #1
  11260c:	e6af3073 	sxtb	r3, r3
  112610:	e2033004 	and	r3, r3, #4
  112614:	e6af3073 	sxtb	r3, r3
    ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
  112618:	e1823003 	orr	r3, r2, r3
  11261c:	e6af3073 	sxtb	r3, r3
    write_flags = NETCONN_COPY |
  112620:	e54b302d 	strb	r3, [fp, #-45]	; 0xffffffd3

    for (i = 0; i < msg->msg_iovlen; i++) {
  112624:	e3a03000 	mov	r3, #0
  112628:	e50b3008 	str	r3, [fp, #-8]
  11262c:	ea000041 	b	112738 <lwip_sendmsg+0x294>
      u8_t apiflags = write_flags;
  112630:	e55b302d 	ldrb	r3, [fp, #-45]	; 0xffffffd3
  112634:	e54b302e 	strb	r3, [fp, #-46]	; 0xffffffd2
      if (i + 1 < msg->msg_iovlen) {
  112638:	e51b3008 	ldr	r3, [fp, #-8]
  11263c:	e2832001 	add	r2, r3, #1
  112640:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112644:	e593300c 	ldr	r3, [r3, #12]
  112648:	e1520003 	cmp	r2, r3
  11264c:	aa000002 	bge	11265c <lwip_sendmsg+0x1b8>
        apiflags |= NETCONN_MORE;
  112650:	e55b302e 	ldrb	r3, [fp, #-46]	; 0xffffffd2
  112654:	e3833002 	orr	r3, r3, #2
  112658:	e54b302e 	strb	r3, [fp, #-46]	; 0xffffffd2
      }
      written = 0;
  11265c:	e3a03000 	mov	r3, #0
  112660:	e50b3040 	str	r3, [fp, #-64]	; 0xffffffc0
      err = netconn_write_partly(sock->conn, msg->msg_iov[i].iov_base, msg->msg_iov[i].iov_len, write_flags, &written);
  112664:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112668:	e5930000 	ldr	r0, [r3]
  11266c:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112670:	e5932008 	ldr	r2, [r3, #8]
  112674:	e51b3008 	ldr	r3, [fp, #-8]
  112678:	e1a03183 	lsl	r3, r3, #3
  11267c:	e0823003 	add	r3, r2, r3
  112680:	e5931000 	ldr	r1, [r3]
  112684:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112688:	e5932008 	ldr	r2, [r3, #8]
  11268c:	e51b3008 	ldr	r3, [fp, #-8]
  112690:	e1a03183 	lsl	r3, r3, #3
  112694:	e0823003 	add	r3, r2, r3
  112698:	e5932004 	ldr	r2, [r3, #4]
  11269c:	e55bc02d 	ldrb	ip, [fp, #-45]	; 0xffffffd3
  1126a0:	e24b3040 	sub	r3, fp, #64	; 0x40
  1126a4:	e58d3000 	str	r3, [sp]
  1126a8:	e1a0300c 	mov	r3, ip
  1126ac:	ebffe631 	bl	10bf78 <netconn_write_partly>
  1126b0:	e1a03000 	mov	r3, r0
  1126b4:	e54b300d 	strb	r3, [fp, #-13]
      if (err == ERR_OK) {
  1126b8:	e15b30dd 	ldrsb	r3, [fp, #-13]
  1126bc:	e3530000 	cmp	r3, #0
  1126c0:	1a00000d 	bne	1126fc <lwip_sendmsg+0x258>
        size += written;
  1126c4:	e51b200c 	ldr	r2, [fp, #-12]
  1126c8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1126cc:	e0823003 	add	r3, r2, r3
  1126d0:	e50b300c 	str	r3, [fp, #-12]
        /* check that the entire IO vector was accepected, if not return a partial write */
        if (written != msg->msg_iov[i].iov_len)
  1126d4:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  1126d8:	e5932008 	ldr	r2, [r3, #8]
  1126dc:	e51b3008 	ldr	r3, [fp, #-8]
  1126e0:	e1a03183 	lsl	r3, r3, #3
  1126e4:	e0823003 	add	r3, r2, r3
  1126e8:	e5932004 	ldr	r2, [r3, #4]
  1126ec:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1126f0:	e1520003 	cmp	r2, r3
  1126f4:	0a00000c 	beq	11272c <lwip_sendmsg+0x288>
          break;
  1126f8:	ea000013 	b	11274c <lwip_sendmsg+0x2a8>
      }
      /* none of this IO vector was accepted, but previous was, return partial write and conceal ERR_WOULDBLOCK */
      else if (err == ERR_WOULDBLOCK && size > 0) {
  1126fc:	e15b30dd 	ldrsb	r3, [fp, #-13]
  112700:	e3730007 	cmn	r3, #7
  112704:	1a000005 	bne	112720 <lwip_sendmsg+0x27c>
  112708:	e51b300c 	ldr	r3, [fp, #-12]
  11270c:	e3530000 	cmp	r3, #0
  112710:	da000002 	ble	112720 <lwip_sendmsg+0x27c>
        err = ERR_OK;
  112714:	e3a03000 	mov	r3, #0
  112718:	e54b300d 	strb	r3, [fp, #-13]
        /* let ERR_WOULDBLOCK persist on the netconn since we are returning ERR_OK */
        break;
  11271c:	ea00000a 	b	11274c <lwip_sendmsg+0x2a8>
      } else {
        size = -1;
  112720:	e3e03000 	mvn	r3, #0
  112724:	e50b300c 	str	r3, [fp, #-12]
        break;
  112728:	ea000007 	b	11274c <lwip_sendmsg+0x2a8>
    for (i = 0; i < msg->msg_iovlen; i++) {
  11272c:	e51b3008 	ldr	r3, [fp, #-8]
  112730:	e2833001 	add	r3, r3, #1
  112734:	e50b3008 	str	r3, [fp, #-8]
  112738:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  11273c:	e593300c 	ldr	r3, [r3, #12]
  112740:	e51b2008 	ldr	r2, [fp, #-8]
  112744:	e1520003 	cmp	r2, r3
  112748:	baffffb8 	blt	112630 <lwip_sendmsg+0x18c>
      }
    }
    sock_set_errno(sock, err_to_errno(err));
  11274c:	e15b30dd 	ldrsb	r3, [fp, #-13]
  112750:	e1a00003 	mov	r0, r3
  112754:	ebfff5c9 	bl	10fe80 <err_to_errno>
  112758:	e50b0034 	str	r0, [fp, #-52]	; 0xffffffcc
  11275c:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  112760:	e6ef2073 	uxtb	r2, r3
  112764:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112768:	e5c32010 	strb	r2, [r3, #16]
  11276c:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  112770:	e3530000 	cmp	r3, #0
  112774:	0a000003 	beq	112788 <lwip_sendmsg+0x2e4>
  112778:	eb0099d7 	bl	138edc <__errno_location>
  11277c:	e1a02000 	mov	r2, r0
  112780:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  112784:	e5823000 	str	r3, [r2]
    return size;
  112788:	e51b300c 	ldr	r3, [fp, #-12]
  11278c:	ea0000bd 	b	112a88 <lwip_sendmsg+0x5e4>
#if LWIP_UDP || LWIP_RAW
  {
    struct netbuf *chain_buf;

    LWIP_UNUSED_ARG(flags);
    LWIP_ERROR("lwip_sendmsg: invalid msghdr name", (((msg->msg_name == NULL) && (msg->msg_namelen == 0)) ||
  112790:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112794:	e5933000 	ldr	r3, [r3]
  112798:	e3530000 	cmp	r3, #0
  11279c:	1a000003 	bne	1127b0 <lwip_sendmsg+0x30c>
  1127a0:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  1127a4:	e5933004 	ldr	r3, [r3, #4]
  1127a8:	e3530000 	cmp	r3, #0
  1127ac:	0a00001a 	beq	11281c <lwip_sendmsg+0x378>
  1127b0:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  1127b4:	e5933004 	ldr	r3, [r3, #4]
  1127b8:	e3530010 	cmp	r3, #16
  1127bc:	0a000016 	beq	11281c <lwip_sendmsg+0x378>
  1127c0:	e3060ea0 	movw	r0, #28320	; 0x6ea0
  1127c4:	e3400014 	movt	r0, #20
  1127c8:	ebffc251 	bl	103114 <rt_kprintf>
  1127cc:	e300141f 	movw	r1, #1055	; 0x41f
  1127d0:	e3060d70 	movw	r0, #28016	; 0x6d70
  1127d4:	e3400014 	movt	r0, #20
  1127d8:	ebffe244 	bl	10b0f0 <sys_arch_assert>
  1127dc:	e3e0000f 	mvn	r0, #15
  1127e0:	ebfff5a6 	bl	10fe80 <err_to_errno>
  1127e4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1127e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1127ec:	e6ef2073 	uxtb	r2, r3
  1127f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1127f4:	e5c32010 	strb	r2, [r3, #16]
  1127f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1127fc:	e3530000 	cmp	r3, #0
  112800:	0a000003 	beq	112814 <lwip_sendmsg+0x370>
  112804:	eb0099b4 	bl	138edc <__errno_location>
  112808:	e1a02000 	mov	r2, r0
  11280c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  112810:	e5823000 	str	r3, [r2]
  112814:	e3e03000 	mvn	r3, #0
  112818:	ea00009a 	b	112a88 <lwip_sendmsg+0x5e4>
               IS_SOCK_ADDR_LEN_VALID(msg->msg_namelen)) ,
               sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);

    /* initialize chain buffer with destination */
    chain_buf = netbuf_new();
  11281c:	ebfff5ae 	bl	10fedc <netbuf_new>
  112820:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
    if (!chain_buf) {
  112824:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  112828:	e3530000 	cmp	r3, #0
  11282c:	1a00000f 	bne	112870 <lwip_sendmsg+0x3cc>
      sock_set_errno(sock, err_to_errno(ERR_MEM));
  112830:	e3e00000 	mvn	r0, #0
  112834:	ebfff591 	bl	10fe80 <err_to_errno>
  112838:	e50b002c 	str	r0, [fp, #-44]	; 0xffffffd4
  11283c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  112840:	e6ef2073 	uxtb	r2, r3
  112844:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112848:	e5c32010 	strb	r2, [r3, #16]
  11284c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  112850:	e3530000 	cmp	r3, #0
  112854:	0a000003 	beq	112868 <lwip_sendmsg+0x3c4>
  112858:	eb00999f 	bl	138edc <__errno_location>
  11285c:	e1a02000 	mov	r2, r0
  112860:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  112864:	e5823000 	str	r3, [r2]
      return -1;
  112868:	e3e03000 	mvn	r3, #0
  11286c:	ea000085 	b	112a88 <lwip_sendmsg+0x5e4>
    }
    if (msg->msg_name) {
  112870:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112874:	e5933000 	ldr	r3, [r3]
  112878:	e3530000 	cmp	r3, #0
  11287c:	0a00000e 	beq	1128bc <lwip_sendmsg+0x418>
      u16_t remote_port;
      SOCKADDR_TO_IPADDR_PORT((const struct sockaddr *)msg->msg_name, &chain_buf->addr, remote_port);
  112880:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112884:	e5933000 	ldr	r3, [r3]
  112888:	e5932004 	ldr	r2, [r3, #4]
  11288c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  112890:	e5832008 	str	r2, [r3, #8]
  112894:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112898:	e5933000 	ldr	r3, [r3]
  11289c:	e1d330b2 	ldrh	r3, [r3, #2]
  1128a0:	e1a00003 	mov	r0, r3
  1128a4:	eb000f4a 	bl	1165d4 <lwip_htons>
  1128a8:	e1a03000 	mov	r3, r0
  1128ac:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
      netbuf_fromport(chain_buf) = remote_port;
  1128b0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1128b4:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  1128b8:	e1c320bc 	strh	r2, [r3, #12]
      err = ERR_OK;
    }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
    /* create a chained netbuf from the IO vectors. NOTE: we assemble a pbuf chain
       manually to avoid having to allocate, chain, and delete a netbuf for each iov */
    for (i = 0; i < msg->msg_iovlen; i++) {
  1128bc:	e3a03000 	mov	r3, #0
  1128c0:	e50b3008 	str	r3, [fp, #-8]
  1128c4:	ea000042 	b	1129d4 <lwip_sendmsg+0x530>
      struct pbuf *p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
  1128c8:	e3a02002 	mov	r2, #2
  1128cc:	e3a01000 	mov	r1, #0
  1128d0:	e3a00000 	mov	r0, #0
  1128d4:	eb001e6e 	bl	11a294 <pbuf_alloc>
  1128d8:	e50b0024 	str	r0, [fp, #-36]	; 0xffffffdc
      if (p == NULL) {
  1128dc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1128e0:	e3530000 	cmp	r3, #0
  1128e4:	1a000002 	bne	1128f4 <lwip_sendmsg+0x450>
        err = ERR_MEM; /* let netbuf_delete() cleanup chain_buf */
  1128e8:	e3e03000 	mvn	r3, #0
  1128ec:	e54b300d 	strb	r3, [fp, #-13]
        break;
  1128f0:	ea00003c 	b	1129e8 <lwip_sendmsg+0x544>
      }
      p->payload = msg->msg_iov[i].iov_base;
  1128f4:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  1128f8:	e5932008 	ldr	r2, [r3, #8]
  1128fc:	e51b3008 	ldr	r3, [fp, #-8]
  112900:	e1a03183 	lsl	r3, r3, #3
  112904:	e0823003 	add	r3, r2, r3
  112908:	e5932000 	ldr	r2, [r3]
  11290c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112910:	e5832004 	str	r2, [r3, #4]
      LWIP_ASSERT("iov_len < u16_t", msg->msg_iov[i].iov_len <= 0xFFFF);
  112914:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112918:	e5932008 	ldr	r2, [r3, #8]
  11291c:	e51b3008 	ldr	r3, [fp, #-8]
  112920:	e1a03183 	lsl	r3, r3, #3
  112924:	e0823003 	add	r3, r2, r3
  112928:	e5933004 	ldr	r3, [r3, #4]
  11292c:	e3530801 	cmp	r3, #65536	; 0x10000
  112930:	3a000006 	bcc	112950 <lwip_sendmsg+0x4ac>
  112934:	e3060ec4 	movw	r0, #28356	; 0x6ec4
  112938:	e3400014 	movt	r0, #20
  11293c:	ebffc1f4 	bl	103114 <rt_kprintf>
  112940:	e300144d 	movw	r1, #1101	; 0x44d
  112944:	e3060d70 	movw	r0, #28016	; 0x6d70
  112948:	e3400014 	movt	r0, #20
  11294c:	ebffe1e7 	bl	10b0f0 <sys_arch_assert>
      p->len = p->tot_len = (u16_t)msg->msg_iov[i].iov_len;
  112950:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112954:	e5932008 	ldr	r2, [r3, #8]
  112958:	e51b3008 	ldr	r3, [fp, #-8]
  11295c:	e1a03183 	lsl	r3, r3, #3
  112960:	e0823003 	add	r3, r2, r3
  112964:	e5933004 	ldr	r3, [r3, #4]
  112968:	e6ff2073 	uxth	r2, r3
  11296c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112970:	e1c320b8 	strh	r2, [r3, #8]
  112974:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112978:	e1d320b8 	ldrh	r2, [r3, #8]
  11297c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112980:	e1c320ba 	strh	r2, [r3, #10]
      /* netbuf empty, add new pbuf */
      if (chain_buf->p == NULL) {
  112984:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  112988:	e5933000 	ldr	r3, [r3]
  11298c:	e3530000 	cmp	r3, #0
  112990:	1a000007 	bne	1129b4 <lwip_sendmsg+0x510>
        chain_buf->p = chain_buf->ptr = p;
  112994:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  112998:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  11299c:	e5832004 	str	r2, [r3, #4]
  1129a0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1129a4:	e5932004 	ldr	r2, [r3, #4]
  1129a8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1129ac:	e5832000 	str	r2, [r3]
  1129b0:	ea000004 	b	1129c8 <lwip_sendmsg+0x524>
        /* add pbuf to existing pbuf chain */
      } else {
        pbuf_cat(chain_buf->p, p);
  1129b4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1129b8:	e5933000 	ldr	r3, [r3]
  1129bc:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  1129c0:	e1a00003 	mov	r0, r3
  1129c4:	eb0021f0 	bl	11b18c <pbuf_cat>
    for (i = 0; i < msg->msg_iovlen; i++) {
  1129c8:	e51b3008 	ldr	r3, [fp, #-8]
  1129cc:	e2833001 	add	r3, r3, #1
  1129d0:	e50b3008 	str	r3, [fp, #-8]
  1129d4:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  1129d8:	e593300c 	ldr	r3, [r3, #12]
  1129dc:	e51b2008 	ldr	r2, [fp, #-8]
  1129e0:	e1520003 	cmp	r2, r3
  1129e4:	baffffb7 	blt	1128c8 <lwip_sendmsg+0x424>
      }
    }
    /* save size of total chain */
    if (err == ERR_OK) {
  1129e8:	e15b30dd 	ldrsb	r3, [fp, #-13]
  1129ec:	e3530000 	cmp	r3, #0
  1129f0:	1a000003 	bne	112a04 <lwip_sendmsg+0x560>
      size = netbuf_len(chain_buf);
  1129f4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1129f8:	e5933000 	ldr	r3, [r3]
  1129fc:	e1d330b8 	ldrh	r3, [r3, #8]
  112a00:	e50b300c 	str	r3, [fp, #-12]
    }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    if (err == ERR_OK) {
  112a04:	e15b30dd 	ldrsb	r3, [fp, #-13]
  112a08:	e3530000 	cmp	r3, #0
  112a0c:	1a000006 	bne	112a2c <lwip_sendmsg+0x588>
        IP_SET_TYPE_VAL(chain_buf->addr, IPADDR_TYPE_V4);
      }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

      /* send the data */
      err = netconn_send(sock->conn, chain_buf);
  112a10:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112a14:	e5933000 	ldr	r3, [r3]
  112a18:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  112a1c:	e1a00003 	mov	r0, r3
  112a20:	ebffe534 	bl	10bef8 <netconn_send>
  112a24:	e1a03000 	mov	r3, r0
  112a28:	e54b300d 	strb	r3, [fp, #-13]
    }

    /* deallocated the buffer */
    netbuf_delete(chain_buf);
  112a2c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  112a30:	ebfff53d 	bl	10ff2c <netbuf_delete>

    sock_set_errno(sock, err_to_errno(err));
  112a34:	e15b30dd 	ldrsb	r3, [fp, #-13]
  112a38:	e1a00003 	mov	r0, r3
  112a3c:	ebfff50f 	bl	10fe80 <err_to_errno>
  112a40:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  112a44:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  112a48:	e6ef2073 	uxtb	r2, r3
  112a4c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112a50:	e5c32010 	strb	r2, [r3, #16]
  112a54:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  112a58:	e3530000 	cmp	r3, #0
  112a5c:	0a000003 	beq	112a70 <lwip_sendmsg+0x5cc>
  112a60:	eb00991d 	bl	138edc <__errno_location>
  112a64:	e1a02000 	mov	r2, r0
  112a68:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  112a6c:	e5823000 	str	r3, [r2]
    return (err == ERR_OK ? size : -1);
  112a70:	e15b30dd 	ldrsb	r3, [fp, #-13]
  112a74:	e3530000 	cmp	r3, #0
  112a78:	1a000001 	bne	112a84 <lwip_sendmsg+0x5e0>
  112a7c:	e51b300c 	ldr	r3, [fp, #-12]
  112a80:	ea000000 	b	112a88 <lwip_sendmsg+0x5e4>
  112a84:	e3e03000 	mvn	r3, #0
  }
#else /* LWIP_UDP || LWIP_RAW */
  sock_set_errno(sock, err_to_errno(ERR_ARG));
  return -1;
#endif /* LWIP_UDP || LWIP_RAW */
}
  112a88:	e1a00003 	mov	r0, r3
  112a8c:	e24bd004 	sub	sp, fp, #4
  112a90:	e8bd8800 	pop	{fp, pc}

00112a94 <lwip_sendto>:

int
lwip_sendto(int s, const void *data, size_t size, int flags,
       const struct sockaddr *to, socklen_t tolen)
{
  112a94:	e92d4800 	push	{fp, lr}
  112a98:	e28db004 	add	fp, sp, #4
  112a9c:	e24dd038 	sub	sp, sp, #56	; 0x38
  112aa0:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  112aa4:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  112aa8:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
  112aac:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  struct lwip_sock *sock;
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;
  sock = get_socket(s);
  112ab0:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  112ab4:	ebfff919 	bl	110f20 <get_socket>
  112ab8:	e50b000c 	str	r0, [fp, #-12]
  if (!sock) {
  112abc:	e51b300c 	ldr	r3, [fp, #-12]
  112ac0:	e3530000 	cmp	r3, #0
  112ac4:	1a000001 	bne	112ad0 <lwip_sendto+0x3c>
    return -1;
  112ac8:	e3e03000 	mvn	r3, #0
  112acc:	ea000081 	b	112cd8 <lwip_sendto+0x244>
  }
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
  112ad0:	e51b300c 	ldr	r3, [fp, #-12]
  112ad4:	e5933000 	ldr	r3, [r3]
  112ad8:	e5933000 	ldr	r3, [r3]
  112adc:	e20330f0 	and	r3, r3, #240	; 0xf0
  112ae0:	e3530010 	cmp	r3, #16
  112ae4:	1a000006 	bne	112b04 <lwip_sendto+0x70>
#if LWIP_TCP
    return lwip_send(s, data, size, flags);
  112ae8:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  112aec:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
  112af0:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  112af4:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  112af8:	ebfffe15 	bl	112354 <lwip_send>
  112afc:	e1a03000 	mov	r3, r0
  112b00:	ea000074 	b	112cd8 <lwip_sendto+0x244>
    return -1;
#endif /* LWIP_TCP */
  }

  /* @todo: split into multiple sendto's? */
  LWIP_ASSERT("lwip_sendto: size must fit in u16_t", size <= 0xffff);
  112b04:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  112b08:	e3530801 	cmp	r3, #65536	; 0x10000
  112b0c:	3a000006 	bcc	112b2c <lwip_sendto+0x98>
  112b10:	e3060ed4 	movw	r0, #28372	; 0x6ed4
  112b14:	e3400014 	movt	r0, #20
  112b18:	ebffc17d 	bl	103114 <rt_kprintf>
  112b1c:	e300148e 	movw	r1, #1166	; 0x48e
  112b20:	e3060d70 	movw	r0, #28016	; 0x6d70
  112b24:	e3400014 	movt	r0, #20
  112b28:	ebffe170 	bl	10b0f0 <sys_arch_assert>
  short_size = (u16_t)size;
  112b2c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  112b30:	e14b30be 	strh	r3, [fp, #-14]
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
  112b34:	e59b3004 	ldr	r3, [fp, #4]
  112b38:	e3530000 	cmp	r3, #0
  112b3c:	1a000002 	bne	112b4c <lwip_sendto+0xb8>
  112b40:	e59b3008 	ldr	r3, [fp, #8]
  112b44:	e3530000 	cmp	r3, #0
  112b48:	0a000021 	beq	112bd4 <lwip_sendto+0x140>
  112b4c:	e59b3008 	ldr	r3, [fp, #8]
  112b50:	e3530010 	cmp	r3, #16
  112b54:	1a000007 	bne	112b78 <lwip_sendto+0xe4>
  112b58:	e59b3004 	ldr	r3, [fp, #4]
  112b5c:	e5d33001 	ldrb	r3, [r3, #1]
  112b60:	e3530002 	cmp	r3, #2
  112b64:	1a000003 	bne	112b78 <lwip_sendto+0xe4>
  112b68:	e59b3004 	ldr	r3, [fp, #4]
  112b6c:	e2033003 	and	r3, r3, #3
  112b70:	e3530000 	cmp	r3, #0
  112b74:	0a000016 	beq	112bd4 <lwip_sendto+0x140>
  112b78:	e3060ef8 	movw	r0, #28408	; 0x6ef8
  112b7c:	e3400014 	movt	r0, #20
  112b80:	ebffc163 	bl	103114 <rt_kprintf>
  112b84:	e3001493 	movw	r1, #1171	; 0x493
  112b88:	e3060d70 	movw	r0, #28016	; 0x6d70
  112b8c:	e3400014 	movt	r0, #20
  112b90:	ebffe156 	bl	10b0f0 <sys_arch_assert>
  112b94:	e3e0000f 	mvn	r0, #15
  112b98:	ebfff4b8 	bl	10fe80 <err_to_errno>
  112b9c:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  112ba0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112ba4:	e6ef2073 	uxtb	r2, r3
  112ba8:	e51b300c 	ldr	r3, [fp, #-12]
  112bac:	e5c32010 	strb	r2, [r3, #16]
  112bb0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112bb4:	e3530000 	cmp	r3, #0
  112bb8:	0a000003 	beq	112bcc <lwip_sendto+0x138>
  112bbc:	eb0098c6 	bl	138edc <__errno_location>
  112bc0:	e1a02000 	mov	r2, r0
  112bc4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112bc8:	e5823000 	str	r3, [r2]
  112bcc:	e3e03000 	mvn	r3, #0
  112bd0:	ea000040 	b	112cd8 <lwip_sendto+0x244>
             IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
  112bd4:	e3a03000 	mov	r3, #0
  112bd8:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  112bdc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112be0:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
  112be4:	e59b3004 	ldr	r3, [fp, #4]
  112be8:	e3530000 	cmp	r3, #0
  112bec:	0a000009 	beq	112c18 <lwip_sendto+0x184>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
  112bf0:	e59b3004 	ldr	r3, [fp, #4]
  112bf4:	e5933004 	ldr	r3, [r3, #4]
  112bf8:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  112bfc:	e59b3004 	ldr	r3, [fp, #4]
  112c00:	e1d330b2 	ldrh	r3, [r3, #2]
  112c04:	e1a00003 	mov	r0, r3
  112c08:	eb000e71 	bl	1165d4 <lwip_htons>
  112c0c:	e1a03000 	mov	r3, r0
  112c10:	e14b30b8 	strh	r3, [fp, #-8]
  112c14:	ea000003 	b	112c28 <lwip_sendto+0x194>
  } else {
    remote_port = 0;
  112c18:	e3a03000 	mov	r3, #0
  112c1c:	e14b30b8 	strh	r3, [fp, #-8]
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
  112c20:	e3a03000 	mov	r3, #0
  112c24:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  }
  netbuf_fromport(&buf) = remote_port;
  112c28:	e15b30b8 	ldrh	r3, [fp, #-8]
  112c2c:	e14b31bc 	strh	r3, [fp, #-28]	; 0xffffffe4
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
  112c30:	e15b20be 	ldrh	r2, [fp, #-14]
  112c34:	e24b3028 	sub	r3, fp, #40	; 0x28
  112c38:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  112c3c:	e1a00003 	mov	r0, r3
  112c40:	ebfff534 	bl	110118 <netbuf_ref>
  112c44:	e1a03000 	mov	r3, r0
  112c48:	e54b3005 	strb	r3, [fp, #-5]
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
  112c4c:	e15b30d5 	ldrsb	r3, [fp, #-5]
  112c50:	e3530000 	cmp	r3, #0
  112c54:	1a000007 	bne	112c78 <lwip_sendto+0x1e4>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
  112c58:	e51b300c 	ldr	r3, [fp, #-12]
  112c5c:	e5933000 	ldr	r3, [r3]
  112c60:	e24b2028 	sub	r2, fp, #40	; 0x28
  112c64:	e1a01002 	mov	r1, r2
  112c68:	e1a00003 	mov	r0, r3
  112c6c:	ebffe4a1 	bl	10bef8 <netconn_send>
  112c70:	e1a03000 	mov	r3, r0
  112c74:	e54b3005 	strb	r3, [fp, #-5]
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
  112c78:	e24b3028 	sub	r3, fp, #40	; 0x28
  112c7c:	e1a00003 	mov	r0, r3
  112c80:	ebfff504 	bl	110098 <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
  112c84:	e15b30d5 	ldrsb	r3, [fp, #-5]
  112c88:	e1a00003 	mov	r0, r3
  112c8c:	ebfff47b 	bl	10fe80 <err_to_errno>
  112c90:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  112c94:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  112c98:	e6ef2073 	uxtb	r2, r3
  112c9c:	e51b300c 	ldr	r3, [fp, #-12]
  112ca0:	e5c32010 	strb	r2, [r3, #16]
  112ca4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  112ca8:	e3530000 	cmp	r3, #0
  112cac:	0a000003 	beq	112cc0 <lwip_sendto+0x22c>
  112cb0:	eb009889 	bl	138edc <__errno_location>
  112cb4:	e1a02000 	mov	r2, r0
  112cb8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  112cbc:	e5823000 	str	r3, [r2]
  return (err == ERR_OK ? short_size : -1);
  112cc0:	e15b30d5 	ldrsb	r3, [fp, #-5]
  112cc4:	e3530000 	cmp	r3, #0
  112cc8:	1a000001 	bne	112cd4 <lwip_sendto+0x240>
  112ccc:	e15b30be 	ldrh	r3, [fp, #-14]
  112cd0:	ea000000 	b	112cd8 <lwip_sendto+0x244>
  112cd4:	e3e03000 	mvn	r3, #0
}
  112cd8:	e1a00003 	mov	r0, r3
  112cdc:	e24bd004 	sub	sp, fp, #4
  112ce0:	e8bd8800 	pop	{fp, pc}

00112ce4 <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
  112ce4:	e92d4800 	push	{fp, lr}
  112ce8:	e28db004 	add	fp, sp, #4
  112cec:	e24dd018 	sub	sp, sp, #24
  112cf0:	e50b0010 	str	r0, [fp, #-16]
  112cf4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  112cf8:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
  112cfc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112d00:	e3530002 	cmp	r3, #2
  112d04:	0a00000d 	beq	112d40 <lwip_socket+0x5c>
  112d08:	e3530003 	cmp	r3, #3
  112d0c:	0a000002 	beq	112d1c <lwip_socket+0x38>
  112d10:	e3530001 	cmp	r3, #1
  112d14:	0a000016 	beq	112d74 <lwip_socket+0x90>
  112d18:	ea00001c 	b	112d90 <lwip_socket+0xac>
  case SOCK_RAW:
    conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
  112d1c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  112d20:	e6ef3073 	uxtb	r3, r3
  112d24:	e3032980 	movw	r2, #14720	; 0x3980
  112d28:	e3402011 	movt	r2, #17
  112d2c:	e1a01003 	mov	r1, r3
  112d30:	e3a00040 	mov	r0, #64	; 0x40
  112d34:	ebffe15b 	bl	10b2a8 <netconn_new_with_proto_and_callback>
  112d38:	e50b0008 	str	r0, [fp, #-8]
                                               (u8_t)protocol, event_callback);
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                 domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
    break;
  112d3c:	ea000019 	b	112da8 <lwip_socket+0xc4>
  case SOCK_DGRAM:
    conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
  112d40:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  112d44:	e3530088 	cmp	r3, #136	; 0x88
  112d48:	1a000001 	bne	112d54 <lwip_socket+0x70>
  112d4c:	e3a03021 	mov	r3, #33	; 0x21
  112d50:	ea000000 	b	112d58 <lwip_socket+0x74>
  112d54:	e3a03020 	mov	r3, #32
  112d58:	e3032980 	movw	r2, #14720	; 0x3980
  112d5c:	e3402011 	movt	r2, #17
  112d60:	e3a01000 	mov	r1, #0
  112d64:	e1a00003 	mov	r0, r3
  112d68:	ebffe14e 	bl	10b2a8 <netconn_new_with_proto_and_callback>
  112d6c:	e50b0008 	str	r0, [fp, #-8]
                 ((protocol == IPPROTO_UDPLITE) ? NETCONN_UDPLITE : NETCONN_UDP)) ,
                 event_callback);
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_DGRAM, %d) = ",
                                 domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
    break;
  112d70:	ea00000c 	b	112da8 <lwip_socket+0xc4>
  case SOCK_STREAM:
    conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), event_callback);
  112d74:	e3032980 	movw	r2, #14720	; 0x3980
  112d78:	e3402011 	movt	r2, #17
  112d7c:	e3a01000 	mov	r1, #0
  112d80:	e3a00010 	mov	r0, #16
  112d84:	ebffe147 	bl	10b2a8 <netconn_new_with_proto_and_callback>
  112d88:	e50b0008 	str	r0, [fp, #-8]
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                 domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
    break;
  112d8c:	ea000005 	b	112da8 <lwip_socket+0xc4>
  default:
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                 domain, type, protocol));
    set_errno(EINVAL);
  112d90:	eb009851 	bl	138edc <__errno_location>
  112d94:	e1a02000 	mov	r2, r0
  112d98:	e3a03016 	mov	r3, #22
  112d9c:	e5823000 	str	r3, [r2]
    return -1;
  112da0:	e3e03000 	mvn	r3, #0
  112da4:	ea00001b 	b	112e18 <lwip_socket+0x134>
  }

  if (!conn) {
  112da8:	e51b3008 	ldr	r3, [fp, #-8]
  112dac:	e3530000 	cmp	r3, #0
  112db0:	1a000005 	bne	112dcc <lwip_socket+0xe8>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
  112db4:	eb009848 	bl	138edc <__errno_location>
  112db8:	e1a02000 	mov	r2, r0
  112dbc:	e3a03069 	mov	r3, #105	; 0x69
  112dc0:	e5823000 	str	r3, [r2]
    return -1;
  112dc4:	e3e03000 	mvn	r3, #0
  112dc8:	ea000012 	b	112e18 <lwip_socket+0x134>
  }

  i = alloc_socket(conn, 0);
  112dcc:	e3a01000 	mov	r1, #0
  112dd0:	e51b0008 	ldr	r0, [fp, #-8]
  112dd4:	ebfff8a1 	bl	111060 <alloc_socket>
  112dd8:	e50b000c 	str	r0, [fp, #-12]

  if (i == -1) {
  112ddc:	e51b300c 	ldr	r3, [fp, #-12]
  112de0:	e3730001 	cmn	r3, #1
  112de4:	1a000007 	bne	112e08 <lwip_socket+0x124>
    netconn_delete(conn);
  112de8:	e51b0008 	ldr	r0, [fp, #-8]
  112dec:	ebffe18f 	bl	10b430 <netconn_delete>
    set_errno(ENFILE);
  112df0:	eb009839 	bl	138edc <__errno_location>
  112df4:	e1a02000 	mov	r2, r0
  112df8:	e3a03017 	mov	r3, #23
  112dfc:	e5823000 	str	r3, [r2]
    return -1;
  112e00:	e3e03000 	mvn	r3, #0
  112e04:	ea000003 	b	112e18 <lwip_socket+0x134>
  }
  conn->socket = i;
  112e08:	e51b3008 	ldr	r3, [fp, #-8]
  112e0c:	e51b200c 	ldr	r2, [fp, #-12]
  112e10:	e583201c 	str	r2, [r3, #28]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
  112e14:	e51b300c 	ldr	r3, [fp, #-12]
}
  112e18:	e1a00003 	mov	r0, r3
  112e1c:	e24bd004 	sub	sp, fp, #4
  112e20:	e8bd8800 	pop	{fp, pc}

00112e24 <lwip_write>:

int
lwip_write(int s, const void *data, size_t size)
{
  112e24:	e92d4800 	push	{fp, lr}
  112e28:	e28db004 	add	fp, sp, #4
  112e2c:	e24dd010 	sub	sp, sp, #16
  112e30:	e50b0008 	str	r0, [fp, #-8]
  112e34:	e50b100c 	str	r1, [fp, #-12]
  112e38:	e50b2010 	str	r2, [fp, #-16]
  return lwip_send(s, data, size, 0);
  112e3c:	e3a03000 	mov	r3, #0
  112e40:	e51b2010 	ldr	r2, [fp, #-16]
  112e44:	e51b100c 	ldr	r1, [fp, #-12]
  112e48:	e51b0008 	ldr	r0, [fp, #-8]
  112e4c:	ebfffd40 	bl	112354 <lwip_send>
  112e50:	e1a03000 	mov	r3, r0
}
  112e54:	e1a00003 	mov	r0, r3
  112e58:	e24bd004 	sub	sp, fp, #4
  112e5c:	e8bd8800 	pop	{fp, pc}

00112e60 <lwip_writev>:

int
lwip_writev(int s, const struct iovec *iov, int iovcnt)
{
  112e60:	e92d4800 	push	{fp, lr}
  112e64:	e28db004 	add	fp, sp, #4
  112e68:	e24dd030 	sub	sp, sp, #48	; 0x30
  112e6c:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  112e70:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  112e74:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  struct msghdr msg;

  msg.msg_name = NULL;
  112e78:	e3a03000 	mov	r3, #0
  112e7c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  msg.msg_namelen = 0;
  112e80:	e3a03000 	mov	r3, #0
  112e84:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  /* Hack: we have to cast via number to cast from 'const' pointer to non-const.
     Blame the opengroup standard for this inconsistency. */
  msg.msg_iov = LWIP_CONST_CAST(struct iovec *, iov);
  112e88:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  112e8c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  msg.msg_iovlen = iovcnt;
  112e90:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  112e94:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  msg.msg_control = NULL;
  112e98:	e3a03000 	mov	r3, #0
  112e9c:	e50b3010 	str	r3, [fp, #-16]
  msg.msg_controllen = 0;
  112ea0:	e3a03000 	mov	r3, #0
  112ea4:	e50b300c 	str	r3, [fp, #-12]
  msg.msg_flags = 0;
  112ea8:	e3a03000 	mov	r3, #0
  112eac:	e50b3008 	str	r3, [fp, #-8]
  return lwip_sendmsg(s, &msg, 0);
  112eb0:	e24b3020 	sub	r3, fp, #32
  112eb4:	e3a02000 	mov	r2, #0
  112eb8:	e1a01003 	mov	r1, r3
  112ebc:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  112ec0:	ebfffd77 	bl	1124a4 <lwip_sendmsg>
  112ec4:	e1a03000 	mov	r3, r0
}
  112ec8:	e1a00003 	mov	r0, r3
  112ecc:	e24bd004 	sub	sp, fp, #4
  112ed0:	e8bd8800 	pop	{fp, pc}

00112ed4 <lwip_selscan>:
 * @return number of sockets that had events (read/write/exception) (>= 0)
 */
static int
lwip_selscan(int maxfdp1, fd_set *readset_in, fd_set *writeset_in, fd_set *exceptset_in,
             fd_set *readset_out, fd_set *writeset_out, fd_set *exceptset_out)
{
  112ed4:	e92d4800 	push	{fp, lr}
  112ed8:	e28db004 	add	fp, sp, #4
  112edc:	e24ddd07 	sub	sp, sp, #448	; 0x1c0
  112ee0:	e50b01b8 	str	r0, [fp, #-440]	; 0xfffffe48
  112ee4:	e50b11bc 	str	r1, [fp, #-444]	; 0xfffffe44
  112ee8:	e50b21c0 	str	r2, [fp, #-448]	; 0xfffffe40
  112eec:	e50b31c4 	str	r3, [fp, #-452]	; 0xfffffe3c
  int i, nready = 0;
  112ef0:	e3a03000 	mov	r3, #0
  112ef4:	e50b300c 	str	r3, [fp, #-12]
  fd_set lreadset, lwriteset, lexceptset;
  struct lwip_sock *sock;
  SYS_ARCH_DECL_PROTECT(lev);

  FD_ZERO(&lreadset);
  112ef8:	e24b30b4 	sub	r3, fp, #180	; 0xb4
  112efc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  112f00:	e3a03020 	mov	r3, #32
  112f04:	e50b3010 	str	r3, [fp, #-16]
  112f08:	ea000007 	b	112f2c <lwip_selscan+0x58>
  112f0c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112f10:	e2832004 	add	r2, r3, #4
  112f14:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
  112f18:	e3a02000 	mov	r2, #0
  112f1c:	e5832000 	str	r2, [r3]
  112f20:	e51b3010 	ldr	r3, [fp, #-16]
  112f24:	e2433001 	sub	r3, r3, #1
  112f28:	e50b3010 	str	r3, [fp, #-16]
  112f2c:	e51b3010 	ldr	r3, [fp, #-16]
  112f30:	e3530000 	cmp	r3, #0
  112f34:	1afffff4 	bne	112f0c <lwip_selscan+0x38>
  FD_ZERO(&lwriteset);
  112f38:	e24b3f4d 	sub	r3, fp, #308	; 0x134
  112f3c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  112f40:	e3a03020 	mov	r3, #32
  112f44:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  112f48:	ea000007 	b	112f6c <lwip_selscan+0x98>
  112f4c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  112f50:	e2832004 	add	r2, r3, #4
  112f54:	e50b201c 	str	r2, [fp, #-28]	; 0xffffffe4
  112f58:	e3a02000 	mov	r2, #0
  112f5c:	e5832000 	str	r2, [r3]
  112f60:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  112f64:	e2433001 	sub	r3, r3, #1
  112f68:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  112f6c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  112f70:	e3530000 	cmp	r3, #0
  112f74:	1afffff4 	bne	112f4c <lwip_selscan+0x78>
  FD_ZERO(&lexceptset);
  112f78:	e24b3f6d 	sub	r3, fp, #436	; 0x1b4
  112f7c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  112f80:	e3a03020 	mov	r3, #32
  112f84:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  112f88:	ea000007 	b	112fac <lwip_selscan+0xd8>
  112f8c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112f90:	e2832004 	add	r2, r3, #4
  112f94:	e50b2024 	str	r2, [fp, #-36]	; 0xffffffdc
  112f98:	e3a02000 	mov	r2, #0
  112f9c:	e5832000 	str	r2, [r3]
  112fa0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  112fa4:	e2433001 	sub	r3, r3, #1
  112fa8:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  112fac:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  112fb0:	e3530000 	cmp	r3, #0
  112fb4:	1afffff4 	bne	112f8c <lwip_selscan+0xb8>

  /* Go through each socket in each list to count number of sockets which
     currently match */
  for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
  112fb8:	e3a03000 	mov	r3, #0
  112fbc:	e50b3008 	str	r3, [fp, #-8]
  112fc0:	ea0000aa 	b	113270 <lwip_selscan+0x39c>
    /* if this FD is not in the set, continue */
    if (!(readset_in && FD_ISSET(i, readset_in)) &&
  112fc4:	e51b31bc 	ldr	r3, [fp, #-444]	; 0xfffffe44
  112fc8:	e3530000 	cmp	r3, #0
  112fcc:	0a000009 	beq	112ff8 <lwip_selscan+0x124>
  112fd0:	e51b3008 	ldr	r3, [fp, #-8]
  112fd4:	e1a022a3 	lsr	r2, r3, #5
  112fd8:	e51b31bc 	ldr	r3, [fp, #-444]	; 0xfffffe44
  112fdc:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  112fe0:	e51b3008 	ldr	r3, [fp, #-8]
  112fe4:	e203301f 	and	r3, r3, #31
  112fe8:	e1a03332 	lsr	r3, r2, r3
  112fec:	e2033001 	and	r3, r3, #1
  112ff0:	e3530000 	cmp	r3, #0
  112ff4:	1a000019 	bne	113060 <lwip_selscan+0x18c>
  112ff8:	e51b31c0 	ldr	r3, [fp, #-448]	; 0xfffffe40
  112ffc:	e3530000 	cmp	r3, #0
  113000:	0a000009 	beq	11302c <lwip_selscan+0x158>
        !(writeset_in && FD_ISSET(i, writeset_in)) &&
  113004:	e51b3008 	ldr	r3, [fp, #-8]
  113008:	e1a022a3 	lsr	r2, r3, #5
  11300c:	e51b31c0 	ldr	r3, [fp, #-448]	; 0xfffffe40
  113010:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  113014:	e51b3008 	ldr	r3, [fp, #-8]
  113018:	e203301f 	and	r3, r3, #31
  11301c:	e1a03332 	lsr	r3, r2, r3
  113020:	e2033001 	and	r3, r3, #1
  113024:	e3530000 	cmp	r3, #0
  113028:	1a00000c 	bne	113060 <lwip_selscan+0x18c>
  11302c:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  113030:	e3530000 	cmp	r3, #0
  113034:	0a000089 	beq	113260 <lwip_selscan+0x38c>
        !(exceptset_in && FD_ISSET(i, exceptset_in))) {
  113038:	e51b3008 	ldr	r3, [fp, #-8]
  11303c:	e1a022a3 	lsr	r2, r3, #5
  113040:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  113044:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  113048:	e51b3008 	ldr	r3, [fp, #-8]
  11304c:	e203301f 	and	r3, r3, #31
  113050:	e1a03332 	lsr	r3, r2, r3
  113054:	e2033001 	and	r3, r3, #1
  113058:	e3530000 	cmp	r3, #0
  11305c:	0a00007f 	beq	113260 <lwip_selscan+0x38c>
      continue;
    }
    /* First get the socket's status (protected)... */
    SYS_ARCH_PROTECT(lev);
  113060:	ebffbc75 	bl	10223c <rt_enter_critical>
    sock = tryget_socket(i);
  113064:	e51b0008 	ldr	r0, [fp, #-8]
  113068:	ebfff7d1 	bl	110fb4 <tryget_socket>
  11306c:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
    if (sock != NULL) {
  113070:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  113074:	e3530000 	cmp	r3, #0
  113078:	0a000076 	beq	113258 <lwip_selscan+0x384>
      void* lastdata = sock->lastdata;
  11307c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  113080:	e5933004 	ldr	r3, [r3, #4]
  113084:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
      s16_t rcvevent = sock->rcvevent;
  113088:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11308c:	e1d330ba 	ldrh	r3, [r3, #10]
  113090:	e14b32be 	strh	r3, [fp, #-46]	; 0xffffffd2
      u16_t sendevent = sock->sendevent;
  113094:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  113098:	e1d330bc 	ldrh	r3, [r3, #12]
  11309c:	e14b33b0 	strh	r3, [fp, #-48]	; 0xffffffd0
      u16_t errevent = sock->errevent;
  1130a0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1130a4:	e1d330be 	ldrh	r3, [r3, #14]
  1130a8:	e14b33b2 	strh	r3, [fp, #-50]	; 0xffffffce
      SYS_ARCH_UNPROTECT(lev);
  1130ac:	ebffbc68 	bl	102254 <rt_exit_critical>

      /* ... then examine it: */
      /* See if netconn of this socket is ready for read */
      if (readset_in && FD_ISSET(i, readset_in) && ((lastdata != NULL) || (rcvevent > 0))) {
  1130b0:	e51b31bc 	ldr	r3, [fp, #-444]	; 0xfffffe44
  1130b4:	e3530000 	cmp	r3, #0
  1130b8:	0a000021 	beq	113144 <lwip_selscan+0x270>
  1130bc:	e51b3008 	ldr	r3, [fp, #-8]
  1130c0:	e1a022a3 	lsr	r2, r3, #5
  1130c4:	e51b31bc 	ldr	r3, [fp, #-444]	; 0xfffffe44
  1130c8:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  1130cc:	e51b3008 	ldr	r3, [fp, #-8]
  1130d0:	e203301f 	and	r3, r3, #31
  1130d4:	e1a03332 	lsr	r3, r2, r3
  1130d8:	e2033001 	and	r3, r3, #1
  1130dc:	e3530000 	cmp	r3, #0
  1130e0:	0a000017 	beq	113144 <lwip_selscan+0x270>
  1130e4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1130e8:	e3530000 	cmp	r3, #0
  1130ec:	1a000002 	bne	1130fc <lwip_selscan+0x228>
  1130f0:	e15b32fe 	ldrsh	r3, [fp, #-46]	; 0xffffffd2
  1130f4:	e3530000 	cmp	r3, #0
  1130f8:	da000011 	ble	113144 <lwip_selscan+0x270>
        FD_SET(i, &lreadset);
  1130fc:	e51b3008 	ldr	r3, [fp, #-8]
  113100:	e1a022a3 	lsr	r2, r3, #5
  113104:	e1a03102 	lsl	r3, r2, #2
  113108:	e24b1004 	sub	r1, fp, #4
  11310c:	e0813003 	add	r3, r1, r3
  113110:	e51310b0 	ldr	r1, [r3, #-176]	; 0xffffff50
  113114:	e51b3008 	ldr	r3, [fp, #-8]
  113118:	e203301f 	and	r3, r3, #31
  11311c:	e3a00001 	mov	r0, #1
  113120:	e1a03310 	lsl	r3, r0, r3
  113124:	e1811003 	orr	r1, r1, r3
  113128:	e1a03102 	lsl	r3, r2, #2
  11312c:	e24b2004 	sub	r2, fp, #4
  113130:	e0823003 	add	r3, r2, r3
  113134:	e50310b0 	str	r1, [r3, #-176]	; 0xffffff50
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for reading\n", i));
        nready++;
  113138:	e51b300c 	ldr	r3, [fp, #-12]
  11313c:	e2833001 	add	r3, r3, #1
  113140:	e50b300c 	str	r3, [fp, #-12]
      }
      /* See if netconn of this socket is ready for write */
      if (writeset_in && FD_ISSET(i, writeset_in) && (sendevent != 0)) {
  113144:	e51b31c0 	ldr	r3, [fp, #-448]	; 0xfffffe40
  113148:	e3530000 	cmp	r3, #0
  11314c:	0a00001e 	beq	1131cc <lwip_selscan+0x2f8>
  113150:	e51b3008 	ldr	r3, [fp, #-8]
  113154:	e1a022a3 	lsr	r2, r3, #5
  113158:	e51b31c0 	ldr	r3, [fp, #-448]	; 0xfffffe40
  11315c:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  113160:	e51b3008 	ldr	r3, [fp, #-8]
  113164:	e203301f 	and	r3, r3, #31
  113168:	e1a03332 	lsr	r3, r2, r3
  11316c:	e2033001 	and	r3, r3, #1
  113170:	e3530000 	cmp	r3, #0
  113174:	0a000014 	beq	1131cc <lwip_selscan+0x2f8>
  113178:	e15b33b0 	ldrh	r3, [fp, #-48]	; 0xffffffd0
  11317c:	e3530000 	cmp	r3, #0
  113180:	0a000011 	beq	1131cc <lwip_selscan+0x2f8>
        FD_SET(i, &lwriteset);
  113184:	e51b3008 	ldr	r3, [fp, #-8]
  113188:	e1a022a3 	lsr	r2, r3, #5
  11318c:	e1a03102 	lsl	r3, r2, #2
  113190:	e24b1004 	sub	r1, fp, #4
  113194:	e0813003 	add	r3, r1, r3
  113198:	e5131130 	ldr	r1, [r3, #-304]	; 0xfffffed0
  11319c:	e51b3008 	ldr	r3, [fp, #-8]
  1131a0:	e203301f 	and	r3, r3, #31
  1131a4:	e3a00001 	mov	r0, #1
  1131a8:	e1a03310 	lsl	r3, r0, r3
  1131ac:	e1811003 	orr	r1, r1, r3
  1131b0:	e1a03102 	lsl	r3, r2, #2
  1131b4:	e24b2004 	sub	r2, fp, #4
  1131b8:	e0823003 	add	r3, r2, r3
  1131bc:	e5031130 	str	r1, [r3, #-304]	; 0xfffffed0
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for writing\n", i));
        nready++;
  1131c0:	e51b300c 	ldr	r3, [fp, #-12]
  1131c4:	e2833001 	add	r3, r3, #1
  1131c8:	e50b300c 	str	r3, [fp, #-12]
      }
      /* See if netconn of this socket had an error */
      if (exceptset_in && FD_ISSET(i, exceptset_in) && (errevent != 0)) {
  1131cc:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  1131d0:	e3530000 	cmp	r3, #0
  1131d4:	0a000022 	beq	113264 <lwip_selscan+0x390>
  1131d8:	e51b3008 	ldr	r3, [fp, #-8]
  1131dc:	e1a022a3 	lsr	r2, r3, #5
  1131e0:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  1131e4:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  1131e8:	e51b3008 	ldr	r3, [fp, #-8]
  1131ec:	e203301f 	and	r3, r3, #31
  1131f0:	e1a03332 	lsr	r3, r2, r3
  1131f4:	e2033001 	and	r3, r3, #1
  1131f8:	e3530000 	cmp	r3, #0
  1131fc:	0a000018 	beq	113264 <lwip_selscan+0x390>
  113200:	e15b33b2 	ldrh	r3, [fp, #-50]	; 0xffffffce
  113204:	e3530000 	cmp	r3, #0
  113208:	0a000015 	beq	113264 <lwip_selscan+0x390>
        FD_SET(i, &lexceptset);
  11320c:	e51b3008 	ldr	r3, [fp, #-8]
  113210:	e1a022a3 	lsr	r2, r3, #5
  113214:	e1a03102 	lsl	r3, r2, #2
  113218:	e24b1004 	sub	r1, fp, #4
  11321c:	e0813003 	add	r3, r1, r3
  113220:	e51311b0 	ldr	r1, [r3, #-432]	; 0xfffffe50
  113224:	e51b3008 	ldr	r3, [fp, #-8]
  113228:	e203301f 	and	r3, r3, #31
  11322c:	e3a00001 	mov	r0, #1
  113230:	e1a03310 	lsl	r3, r0, r3
  113234:	e1811003 	orr	r1, r1, r3
  113238:	e1a03102 	lsl	r3, r2, #2
  11323c:	e24b2004 	sub	r2, fp, #4
  113240:	e0823003 	add	r3, r2, r3
  113244:	e50311b0 	str	r1, [r3, #-432]	; 0xfffffe50
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for exception\n", i));
        nready++;
  113248:	e51b300c 	ldr	r3, [fp, #-12]
  11324c:	e2833001 	add	r3, r3, #1
  113250:	e50b300c 	str	r3, [fp, #-12]
  113254:	ea000002 	b	113264 <lwip_selscan+0x390>
      }
    } else {
      SYS_ARCH_UNPROTECT(lev);
  113258:	ebffbbfd 	bl	102254 <rt_exit_critical>
  11325c:	ea000000 	b	113264 <lwip_selscan+0x390>
      continue;
  113260:	e320f000 	nop	{0}
  for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
  113264:	e51b3008 	ldr	r3, [fp, #-8]
  113268:	e2833001 	add	r3, r3, #1
  11326c:	e50b3008 	str	r3, [fp, #-8]
  113270:	e51b2008 	ldr	r2, [fp, #-8]
  113274:	e51b31b8 	ldr	r3, [fp, #-440]	; 0xfffffe48
  113278:	e1520003 	cmp	r2, r3
  11327c:	baffff50 	blt	112fc4 <lwip_selscan+0xf0>
      /* continue on to next FD in list */
    }
  }
  /* copy local sets to the ones provided as arguments */
  *readset_out = lreadset;
  113280:	e59b3004 	ldr	r3, [fp, #4]
  113284:	e1a00003 	mov	r0, r3
  113288:	e24b30b4 	sub	r3, fp, #180	; 0xb4
  11328c:	e3a02080 	mov	r2, #128	; 0x80
  113290:	e1a01003 	mov	r1, r3
  113294:	eb00b6be 	bl	140d94 <memcpy>
  *writeset_out = lwriteset;
  113298:	e59b3008 	ldr	r3, [fp, #8]
  11329c:	e1a00003 	mov	r0, r3
  1132a0:	e24b3f4d 	sub	r3, fp, #308	; 0x134
  1132a4:	e3a02080 	mov	r2, #128	; 0x80
  1132a8:	e1a01003 	mov	r1, r3
  1132ac:	eb00b6b8 	bl	140d94 <memcpy>
  *exceptset_out = lexceptset;
  1132b0:	e59b300c 	ldr	r3, [fp, #12]
  1132b4:	e1a00003 	mov	r0, r3
  1132b8:	e24b3f6d 	sub	r3, fp, #436	; 0x1b4
  1132bc:	e3a02080 	mov	r2, #128	; 0x80
  1132c0:	e1a01003 	mov	r1, r3
  1132c4:	eb00b6b2 	bl	140d94 <memcpy>

  LWIP_ASSERT("nready >= 0", nready >= 0);
  1132c8:	e51b300c 	ldr	r3, [fp, #-12]
  1132cc:	e3530000 	cmp	r3, #0
  1132d0:	aa000006 	bge	1132f0 <lwip_selscan+0x41c>
  1132d4:	e3060f18 	movw	r0, #28440	; 0x6f18
  1132d8:	e3400014 	movt	r0, #20
  1132dc:	ebffbf8c 	bl	103114 <rt_kprintf>
  1132e0:	e3001569 	movw	r1, #1385	; 0x569
  1132e4:	e3060d70 	movw	r0, #28016	; 0x6d70
  1132e8:	e3400014 	movt	r0, #20
  1132ec:	ebffdf7f 	bl	10b0f0 <sys_arch_assert>
  return nready;
  1132f0:	e51b300c 	ldr	r3, [fp, #-12]
}
  1132f4:	e1a00003 	mov	r0, r3
  1132f8:	e24bd004 	sub	sp, fp, #4
  1132fc:	e8bd8800 	pop	{fp, pc}

00113300 <lwip_select>:

int
lwip_select(int maxfdp1, fd_set *readset, fd_set *writeset, fd_set *exceptset,
            struct timeval *timeout)
{
  113300:	e92d4800 	push	{fp, lr}
  113304:	e28db004 	add	fp, sp, #4
  113308:	e24ddf76 	sub	sp, sp, #472	; 0x1d8
  11330c:	e50b01c0 	str	r0, [fp, #-448]	; 0xfffffe40
  113310:	e50b11c4 	str	r1, [fp, #-452]	; 0xfffffe3c
  113314:	e50b21c8 	str	r2, [fp, #-456]	; 0xfffffe38
  113318:	e50b31cc 	str	r3, [fp, #-460]	; 0xfffffe34
  u32_t waitres = 0;
  11331c:	e3a03000 	mov	r3, #0
  113320:	e50b3008 	str	r3, [fp, #-8]
                  timeout ? (s32_t)timeout->tv_sec : (s32_t)-1,
                  timeout ? (s32_t)timeout->tv_usec : (s32_t)-1));

  /* Go through each socket in each list to count number of sockets which
     currently match */
  nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
  113324:	e24b3e1a 	sub	r3, fp, #416	; 0x1a0
  113328:	e58d3008 	str	r3, [sp, #8]
  11332c:	e24b3e12 	sub	r3, fp, #288	; 0x120
  113330:	e58d3004 	str	r3, [sp, #4]
  113334:	e24b30a0 	sub	r3, fp, #160	; 0xa0
  113338:	e58d3000 	str	r3, [sp]
  11333c:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  113340:	e51b21c8 	ldr	r2, [fp, #-456]	; 0xfffffe38
  113344:	e51b11c4 	ldr	r1, [fp, #-452]	; 0xfffffe3c
  113348:	e51b01c0 	ldr	r0, [fp, #-448]	; 0xfffffe40
  11334c:	ebfffee0 	bl	112ed4 <lwip_selscan>
  113350:	e50b000c 	str	r0, [fp, #-12]

  /* If we don't have any current events, then suspend if we are supposed to */
  if (!nready) {
  113354:	e51b300c 	ldr	r3, [fp, #-12]
  113358:	e3530000 	cmp	r3, #0
  11335c:	1a000163 	bne	1138f0 <lwip_select+0x5f0>
    if (timeout && timeout->tv_sec == 0 && timeout->tv_usec == 0) {
  113360:	e59b3004 	ldr	r3, [fp, #4]
  113364:	e3530000 	cmp	r3, #0
  113368:	0a000007 	beq	11338c <lwip_select+0x8c>
  11336c:	e59b3004 	ldr	r3, [fp, #4]
  113370:	e1c320d0 	ldrd	r2, [r3]
  113374:	e1923003 	orrs	r3, r2, r3
  113378:	1a000003 	bne	11338c <lwip_select+0x8c>
  11337c:	e59b3004 	ldr	r3, [fp, #4]
  113380:	e5933008 	ldr	r3, [r3, #8]
  113384:	e3530000 	cmp	r3, #0
  113388:	0a00015a 	beq	1138f8 <lwip_select+0x5f8>
    /* None ready: add our semaphore to list:
       We don't actually need any dynamic memory. Our entry on the
       list is only valid while we are in this function, so it's ok
       to use local variables. */

    select_cb.next = NULL;
  11338c:	e3a03000 	mov	r3, #0
  113390:	e50b31bc 	str	r3, [fp, #-444]	; 0xfffffe44
    select_cb.prev = NULL;
  113394:	e3a03000 	mov	r3, #0
  113398:	e50b31b8 	str	r3, [fp, #-440]	; 0xfffffe48
    select_cb.readset = readset;
  11339c:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  1133a0:	e50b31b4 	str	r3, [fp, #-436]	; 0xfffffe4c
    select_cb.writeset = writeset;
  1133a4:	e51b31c8 	ldr	r3, [fp, #-456]	; 0xfffffe38
  1133a8:	e50b31b0 	str	r3, [fp, #-432]	; 0xfffffe50
    select_cb.exceptset = exceptset;
  1133ac:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  1133b0:	e50b31ac 	str	r3, [fp, #-428]	; 0xfffffe54
    select_cb.sem_signalled = 0;
  1133b4:	e3a03000 	mov	r3, #0
  1133b8:	e50b31a8 	str	r3, [fp, #-424]	; 0xfffffe58
#if LWIP_NETCONN_SEM_PER_THREAD
    select_cb.sem = LWIP_NETCONN_THREAD_SEM_GET();
#else /* LWIP_NETCONN_SEM_PER_THREAD */
    if (sys_sem_new(&select_cb.sem, 0) != ERR_OK) {
  1133bc:	e24b3f6f 	sub	r3, fp, #444	; 0x1bc
  1133c0:	e2833018 	add	r3, r3, #24
  1133c4:	e3a01000 	mov	r1, #0
  1133c8:	e1a00003 	mov	r0, r3
  1133cc:	ebffdd1a 	bl	10a83c <sys_sem_new>
  1133d0:	e1a03000 	mov	r3, r0
  1133d4:	e3530000 	cmp	r3, #0
  1133d8:	0a000005 	beq	1133f4 <lwip_select+0xf4>
      /* failed to create semaphore */
      set_errno(ENOMEM);
  1133dc:	eb0096be 	bl	138edc <__errno_location>
  1133e0:	e1a02000 	mov	r2, r0
  1133e4:	e3a0300c 	mov	r3, #12
  1133e8:	e5823000 	str	r3, [r2]
      return -1;
  1133ec:	e3e03000 	mvn	r3, #0
  1133f0:	ea00015f 	b	113974 <lwip_select+0x674>
    }
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

    /* Protect the select_cb_list */
    SYS_ARCH_PROTECT(lev);
  1133f4:	ebffbb90 	bl	10223c <rt_enter_critical>

    /* Put this select_cb on top of list */
    select_cb.next = select_cb_list;
  1133f8:	e30d3c30 	movw	r3, #56368	; 0xdc30
  1133fc:	e3403014 	movt	r3, #20
  113400:	e5933000 	ldr	r3, [r3]
  113404:	e50b31bc 	str	r3, [fp, #-444]	; 0xfffffe44
    if (select_cb_list != NULL) {
  113408:	e30d3c30 	movw	r3, #56368	; 0xdc30
  11340c:	e3403014 	movt	r3, #20
  113410:	e5933000 	ldr	r3, [r3]
  113414:	e3530000 	cmp	r3, #0
  113418:	0a000004 	beq	113430 <lwip_select+0x130>
      select_cb_list->prev = &select_cb;
  11341c:	e30d3c30 	movw	r3, #56368	; 0xdc30
  113420:	e3403014 	movt	r3, #20
  113424:	e5933000 	ldr	r3, [r3]
  113428:	e24b2f6f 	sub	r2, fp, #444	; 0x1bc
  11342c:	e5832004 	str	r2, [r3, #4]
    }
    select_cb_list = &select_cb;
  113430:	e30d3c30 	movw	r3, #56368	; 0xdc30
  113434:	e3403014 	movt	r3, #20
  113438:	e24b2f6f 	sub	r2, fp, #444	; 0x1bc
  11343c:	e5832000 	str	r2, [r3]
    /* Increasing this counter tells event_callback that the list has changed. */
    select_cb_ctr++;
  113440:	e30d3c34 	movw	r3, #56372	; 0xdc34
  113444:	e3403014 	movt	r3, #20
  113448:	e5933000 	ldr	r3, [r3]
  11344c:	e2832001 	add	r2, r3, #1
  113450:	e30d3c34 	movw	r3, #56372	; 0xdc34
  113454:	e3403014 	movt	r3, #20
  113458:	e5832000 	str	r2, [r3]

    /* Now we can safely unprotect */
    SYS_ARCH_UNPROTECT(lev);
  11345c:	ebffbb7c 	bl	102254 <rt_exit_critical>

    /* Increase select_waiting for each socket we are interested in */
    maxfdp2 = maxfdp1;
  113460:	e51b31c0 	ldr	r3, [fp, #-448]	; 0xfffffe40
  113464:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
  113468:	e3a03000 	mov	r3, #0
  11346c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  113470:	ea000049 	b	11359c <lwip_select+0x29c>
      if ((readset && FD_ISSET(i, readset)) ||
  113474:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  113478:	e3530000 	cmp	r3, #0
  11347c:	0a000009 	beq	1134a8 <lwip_select+0x1a8>
  113480:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113484:	e1a022a3 	lsr	r2, r3, #5
  113488:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  11348c:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  113490:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113494:	e203301f 	and	r3, r3, #31
  113498:	e1a03332 	lsr	r3, r2, r3
  11349c:	e2033001 	and	r3, r3, #1
  1134a0:	e3530000 	cmp	r3, #0
  1134a4:	1a000019 	bne	113510 <lwip_select+0x210>
  1134a8:	e51b31c8 	ldr	r3, [fp, #-456]	; 0xfffffe38
  1134ac:	e3530000 	cmp	r3, #0
  1134b0:	0a000009 	beq	1134dc <lwip_select+0x1dc>
          (writeset && FD_ISSET(i, writeset)) ||
  1134b4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1134b8:	e1a022a3 	lsr	r2, r3, #5
  1134bc:	e51b31c8 	ldr	r3, [fp, #-456]	; 0xfffffe38
  1134c0:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  1134c4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1134c8:	e203301f 	and	r3, r3, #31
  1134cc:	e1a03332 	lsr	r3, r2, r3
  1134d0:	e2033001 	and	r3, r3, #1
  1134d4:	e3530000 	cmp	r3, #0
  1134d8:	1a00000c 	bne	113510 <lwip_select+0x210>
  1134dc:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  1134e0:	e3530000 	cmp	r3, #0
  1134e4:	0a000029 	beq	113590 <lwip_select+0x290>
          (exceptset && FD_ISSET(i, exceptset))) {
  1134e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1134ec:	e1a022a3 	lsr	r2, r3, #5
  1134f0:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  1134f4:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  1134f8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1134fc:	e203301f 	and	r3, r3, #31
  113500:	e1a03332 	lsr	r3, r2, r3
  113504:	e2033001 	and	r3, r3, #1
  113508:	e3530000 	cmp	r3, #0
  11350c:	0a00001f 	beq	113590 <lwip_select+0x290>
        struct lwip_sock *sock;
        SYS_ARCH_PROTECT(lev);
  113510:	ebffbb49 	bl	10223c <rt_enter_critical>
        sock = tryget_socket(i);
  113514:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  113518:	ebfff6a5 	bl	110fb4 <tryget_socket>
  11351c:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
        if (sock != NULL) {
  113520:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  113524:	e3530000 	cmp	r3, #0
  113528:	0a000011 	beq	113574 <lwip_select+0x274>
          sock->select_waiting++;
  11352c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  113530:	e5d33011 	ldrb	r3, [r3, #17]
  113534:	e2833001 	add	r3, r3, #1
  113538:	e6ef2073 	uxtb	r2, r3
  11353c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  113540:	e5c32011 	strb	r2, [r3, #17]
          LWIP_ASSERT("sock->select_waiting > 0", sock->select_waiting > 0);
  113544:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  113548:	e5d33011 	ldrb	r3, [r3, #17]
  11354c:	e3530000 	cmp	r3, #0
  113550:	1a00000d 	bne	11358c <lwip_select+0x28c>
  113554:	e3060f24 	movw	r0, #28452	; 0x6f24
  113558:	e3400014 	movt	r0, #20
  11355c:	ebffbeec 	bl	103114 <rt_kprintf>
  113560:	e30015be 	movw	r1, #1470	; 0x5be
  113564:	e3060d70 	movw	r0, #28016	; 0x6d70
  113568:	e3400014 	movt	r0, #20
  11356c:	ebffdedf 	bl	10b0f0 <sys_arch_assert>
  113570:	ea000005 	b	11358c <lwip_select+0x28c>
        } else {
          /* Not a valid socket */
          nready = -1;
  113574:	e3e03000 	mvn	r3, #0
  113578:	e50b300c 	str	r3, [fp, #-12]
          maxfdp2 = i;
  11357c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113580:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
          SYS_ARCH_UNPROTECT(lev);
  113584:	ebffbb32 	bl	102254 <rt_exit_critical>
          break;
  113588:	ea000007 	b	1135ac <lwip_select+0x2ac>
        }
        SYS_ARCH_UNPROTECT(lev);
  11358c:	ebffbb30 	bl	102254 <rt_exit_critical>
    for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
  113590:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113594:	e2833001 	add	r3, r3, #1
  113598:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  11359c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1135a0:	e51b31c0 	ldr	r3, [fp, #-448]	; 0xfffffe40
  1135a4:	e1520003 	cmp	r2, r3
  1135a8:	baffffb1 	blt	113474 <lwip_select+0x174>
      }
    }

    if (nready >= 0) {
  1135ac:	e51b300c 	ldr	r3, [fp, #-12]
  1135b0:	e3530000 	cmp	r3, #0
  1135b4:	ba00002e 	blt	113674 <lwip_select+0x374>
      /* Call lwip_selscan again: there could have been events between
         the last scan (without us on the list) and putting us on the list! */
      nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
  1135b8:	e24b3e1a 	sub	r3, fp, #416	; 0x1a0
  1135bc:	e58d3008 	str	r3, [sp, #8]
  1135c0:	e24b3e12 	sub	r3, fp, #288	; 0x120
  1135c4:	e58d3004 	str	r3, [sp, #4]
  1135c8:	e24b30a0 	sub	r3, fp, #160	; 0xa0
  1135cc:	e58d3000 	str	r3, [sp]
  1135d0:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  1135d4:	e51b21c8 	ldr	r2, [fp, #-456]	; 0xfffffe38
  1135d8:	e51b11c4 	ldr	r1, [fp, #-452]	; 0xfffffe3c
  1135dc:	e51b01c0 	ldr	r0, [fp, #-448]	; 0xfffffe40
  1135e0:	ebfffe3b 	bl	112ed4 <lwip_selscan>
  1135e4:	e50b000c 	str	r0, [fp, #-12]
      if (!nready) {
  1135e8:	e51b300c 	ldr	r3, [fp, #-12]
  1135ec:	e3530000 	cmp	r3, #0
  1135f0:	1a00001f 	bne	113674 <lwip_select+0x374>
        /* Still none ready, just wait to be woken */
        if (timeout == 0) {
  1135f4:	e59b3004 	ldr	r3, [fp, #4]
  1135f8:	e3530000 	cmp	r3, #0
  1135fc:	1a000002 	bne	11360c <lwip_select+0x30c>
          /* Wait forever */
          msectimeout = 0;
  113600:	e3a03000 	mov	r3, #0
  113604:	e50b3010 	str	r3, [fp, #-16]
  113608:	ea000013 	b	11365c <lwip_select+0x35c>
        } else {
          msectimeout =  ((timeout->tv_sec * 1000) + ((timeout->tv_usec + 500)/1000));
  11360c:	e59b3004 	ldr	r3, [fp, #4]
  113610:	e1c320d0 	ldrd	r2, [r3]
  113614:	e3a03ffa 	mov	r3, #1000	; 0x3e8
  113618:	e0000293 	mul	r0, r3, r2
  11361c:	e59b3004 	ldr	r3, [fp, #4]
  113620:	e5933008 	ldr	r3, [r3, #8]
  113624:	e2831f7d 	add	r1, r3, #500	; 0x1f4
  113628:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  11362c:	e3413062 	movt	r3, #4194	; 0x1062
  113630:	e0c32391 	smull	r2, r3, r1, r3
  113634:	e1a02343 	asr	r2, r3, #6
  113638:	e1a03fc1 	asr	r3, r1, #31
  11363c:	e0423003 	sub	r3, r2, r3
  113640:	e0803003 	add	r3, r0, r3
  113644:	e50b3010 	str	r3, [fp, #-16]
          if (msectimeout == 0) {
  113648:	e51b3010 	ldr	r3, [fp, #-16]
  11364c:	e3530000 	cmp	r3, #0
  113650:	1a000001 	bne	11365c <lwip_select+0x35c>
            /* Wait 1ms at least (0 means wait forever) */
            msectimeout = 1;
  113654:	e3a03001 	mov	r3, #1
  113658:	e50b3010 	str	r3, [fp, #-16]
          }
        }

        waitres = sys_arch_sem_wait(SELECT_SEM_PTR(select_cb.sem), msectimeout);
  11365c:	e24b3f6f 	sub	r3, fp, #444	; 0x1bc
  113660:	e2833018 	add	r3, r3, #24
  113664:	e51b1010 	ldr	r1, [fp, #-16]
  113668:	e1a00003 	mov	r0, r3
  11366c:	ebffdcb3 	bl	10a940 <sys_arch_sem_wait>
  113670:	e50b0008 	str	r0, [fp, #-8]
#endif
      }
    }

    /* Decrease select_waiting for each socket we are interested in */
    for (i = LWIP_SOCKET_OFFSET; i < maxfdp2; i++) {
  113674:	e3a03000 	mov	r3, #0
  113678:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  11367c:	ea000049 	b	1137a8 <lwip_select+0x4a8>
      if ((readset && FD_ISSET(i, readset)) ||
  113680:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  113684:	e3530000 	cmp	r3, #0
  113688:	0a000009 	beq	1136b4 <lwip_select+0x3b4>
  11368c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113690:	e1a022a3 	lsr	r2, r3, #5
  113694:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  113698:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  11369c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1136a0:	e203301f 	and	r3, r3, #31
  1136a4:	e1a03332 	lsr	r3, r2, r3
  1136a8:	e2033001 	and	r3, r3, #1
  1136ac:	e3530000 	cmp	r3, #0
  1136b0:	1a000019 	bne	11371c <lwip_select+0x41c>
  1136b4:	e51b31c8 	ldr	r3, [fp, #-456]	; 0xfffffe38
  1136b8:	e3530000 	cmp	r3, #0
  1136bc:	0a000009 	beq	1136e8 <lwip_select+0x3e8>
          (writeset && FD_ISSET(i, writeset)) ||
  1136c0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1136c4:	e1a022a3 	lsr	r2, r3, #5
  1136c8:	e51b31c8 	ldr	r3, [fp, #-456]	; 0xfffffe38
  1136cc:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  1136d0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1136d4:	e203301f 	and	r3, r3, #31
  1136d8:	e1a03332 	lsr	r3, r2, r3
  1136dc:	e2033001 	and	r3, r3, #1
  1136e0:	e3530000 	cmp	r3, #0
  1136e4:	1a00000c 	bne	11371c <lwip_select+0x41c>
  1136e8:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  1136ec:	e3530000 	cmp	r3, #0
  1136f0:	0a000029 	beq	11379c <lwip_select+0x49c>
          (exceptset && FD_ISSET(i, exceptset))) {
  1136f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1136f8:	e1a022a3 	lsr	r2, r3, #5
  1136fc:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  113700:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  113704:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113708:	e203301f 	and	r3, r3, #31
  11370c:	e1a03332 	lsr	r3, r2, r3
  113710:	e2033001 	and	r3, r3, #1
  113714:	e3530000 	cmp	r3, #0
  113718:	0a00001f 	beq	11379c <lwip_select+0x49c>
        struct lwip_sock *sock;
        SYS_ARCH_PROTECT(lev);
  11371c:	ebffbac6 	bl	10223c <rt_enter_critical>
        sock = tryget_socket(i);
  113720:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  113724:	ebfff622 	bl	110fb4 <tryget_socket>
  113728:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
        if (sock != NULL) {
  11372c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113730:	e3530000 	cmp	r3, #0
  113734:	0a000015 	beq	113790 <lwip_select+0x490>
          /* for now, handle select_waiting==0... */
          LWIP_ASSERT("sock->select_waiting > 0", sock->select_waiting > 0);
  113738:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11373c:	e5d33011 	ldrb	r3, [r3, #17]
  113740:	e3530000 	cmp	r3, #0
  113744:	1a000006 	bne	113764 <lwip_select+0x464>
  113748:	e3060f24 	movw	r0, #28452	; 0x6f24
  11374c:	e3400014 	movt	r0, #20
  113750:	ebffbe6f 	bl	103114 <rt_kprintf>
  113754:	e30015ec 	movw	r1, #1516	; 0x5ec
  113758:	e3060d70 	movw	r0, #28016	; 0x6d70
  11375c:	e3400014 	movt	r0, #20
  113760:	ebffde62 	bl	10b0f0 <sys_arch_assert>
          if (sock->select_waiting > 0) {
  113764:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113768:	e5d33011 	ldrb	r3, [r3, #17]
  11376c:	e3530000 	cmp	r3, #0
  113770:	0a000008 	beq	113798 <lwip_select+0x498>
            sock->select_waiting--;
  113774:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113778:	e5d33011 	ldrb	r3, [r3, #17]
  11377c:	e2433001 	sub	r3, r3, #1
  113780:	e6ef2073 	uxtb	r2, r3
  113784:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113788:	e5c32011 	strb	r2, [r3, #17]
  11378c:	ea000001 	b	113798 <lwip_select+0x498>
          }
        } else {
          /* Not a valid socket */
          nready = -1;
  113790:	e3e03000 	mvn	r3, #0
  113794:	e50b300c 	str	r3, [fp, #-12]
        }
        SYS_ARCH_UNPROTECT(lev);
  113798:	ebffbaad 	bl	102254 <rt_exit_critical>
    for (i = LWIP_SOCKET_OFFSET; i < maxfdp2; i++) {
  11379c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1137a0:	e2833001 	add	r3, r3, #1
  1137a4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1137a8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1137ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1137b0:	e1520003 	cmp	r2, r3
  1137b4:	baffffb1 	blt	113680 <lwip_select+0x380>
      }
    }
    /* Take us off the list */
    SYS_ARCH_PROTECT(lev);
  1137b8:	ebffba9f 	bl	10223c <rt_enter_critical>
    if (select_cb.next != NULL) {
  1137bc:	e51b31bc 	ldr	r3, [fp, #-444]	; 0xfffffe44
  1137c0:	e3530000 	cmp	r3, #0
  1137c4:	0a000002 	beq	1137d4 <lwip_select+0x4d4>
      select_cb.next->prev = select_cb.prev;
  1137c8:	e51b31bc 	ldr	r3, [fp, #-444]	; 0xfffffe44
  1137cc:	e51b21b8 	ldr	r2, [fp, #-440]	; 0xfffffe48
  1137d0:	e5832004 	str	r2, [r3, #4]
    }
    if (select_cb_list == &select_cb) {
  1137d4:	e30d3c30 	movw	r3, #56368	; 0xdc30
  1137d8:	e3403014 	movt	r3, #20
  1137dc:	e5932000 	ldr	r2, [r3]
  1137e0:	e24b3f6f 	sub	r3, fp, #444	; 0x1bc
  1137e4:	e1520003 	cmp	r2, r3
  1137e8:	1a00000e 	bne	113828 <lwip_select+0x528>
      LWIP_ASSERT("select_cb.prev == NULL", select_cb.prev == NULL);
  1137ec:	e51b31b8 	ldr	r3, [fp, #-440]	; 0xfffffe48
  1137f0:	e3530000 	cmp	r3, #0
  1137f4:	0a000006 	beq	113814 <lwip_select+0x514>
  1137f8:	e3060f40 	movw	r0, #28480	; 0x6f40
  1137fc:	e3400014 	movt	r0, #20
  113800:	ebffbe43 	bl	103114 <rt_kprintf>
  113804:	e30015fd 	movw	r1, #1533	; 0x5fd
  113808:	e3060d70 	movw	r0, #28016	; 0x6d70
  11380c:	e3400014 	movt	r0, #20
  113810:	ebffde36 	bl	10b0f0 <sys_arch_assert>
      select_cb_list = select_cb.next;
  113814:	e51b21bc 	ldr	r2, [fp, #-444]	; 0xfffffe44
  113818:	e30d3c30 	movw	r3, #56368	; 0xdc30
  11381c:	e3403014 	movt	r3, #20
  113820:	e5832000 	str	r2, [r3]
  113824:	ea00000c 	b	11385c <lwip_select+0x55c>
    } else {
      LWIP_ASSERT("select_cb.prev != NULL", select_cb.prev != NULL);
  113828:	e51b31b8 	ldr	r3, [fp, #-440]	; 0xfffffe48
  11382c:	e3530000 	cmp	r3, #0
  113830:	1a000006 	bne	113850 <lwip_select+0x550>
  113834:	e3060f58 	movw	r0, #28504	; 0x6f58
  113838:	e3400014 	movt	r0, #20
  11383c:	ebffbe34 	bl	103114 <rt_kprintf>
  113840:	e3a01c06 	mov	r1, #1536	; 0x600
  113844:	e3060d70 	movw	r0, #28016	; 0x6d70
  113848:	e3400014 	movt	r0, #20
  11384c:	ebffde27 	bl	10b0f0 <sys_arch_assert>
      select_cb.prev->next = select_cb.next;
  113850:	e51b31b8 	ldr	r3, [fp, #-440]	; 0xfffffe48
  113854:	e51b21bc 	ldr	r2, [fp, #-444]	; 0xfffffe44
  113858:	e5832000 	str	r2, [r3]
    }
    /* Increasing this counter tells event_callback that the list has changed. */
    select_cb_ctr++;
  11385c:	e30d3c34 	movw	r3, #56372	; 0xdc34
  113860:	e3403014 	movt	r3, #20
  113864:	e5933000 	ldr	r3, [r3]
  113868:	e2832001 	add	r2, r3, #1
  11386c:	e30d3c34 	movw	r3, #56372	; 0xdc34
  113870:	e3403014 	movt	r3, #20
  113874:	e5832000 	str	r2, [r3]
    SYS_ARCH_UNPROTECT(lev);
  113878:	ebffba75 	bl	102254 <rt_exit_critical>
    if (select_cb.sem_signalled && (!waited || (waitres == SYS_ARCH_TIMEOUT))) {
      /* don't leave the thread-local semaphore signalled */
      sys_arch_sem_wait(select_cb.sem, 1);
    }
#else /* LWIP_NETCONN_SEM_PER_THREAD */
    sys_sem_free(&select_cb.sem);
  11387c:	e24b3f6f 	sub	r3, fp, #444	; 0x1bc
  113880:	e2833018 	add	r3, r3, #24
  113884:	e1a00003 	mov	r0, r3
  113888:	ebffdc16 	bl	10a8e8 <sys_sem_free>
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

    if (nready < 0) {
  11388c:	e51b300c 	ldr	r3, [fp, #-12]
  113890:	e3530000 	cmp	r3, #0
  113894:	aa000005 	bge	1138b0 <lwip_select+0x5b0>
      /* This happens when a socket got closed while waiting */
      set_errno(EBADF);
  113898:	eb00958f 	bl	138edc <__errno_location>
  11389c:	e1a02000 	mov	r2, r0
  1138a0:	e3a03009 	mov	r3, #9
  1138a4:	e5823000 	str	r3, [r2]
      return -1;
  1138a8:	e3e03000 	mvn	r3, #0
  1138ac:	ea000030 	b	113974 <lwip_select+0x674>
    }

    if (waitres == SYS_ARCH_TIMEOUT) {
  1138b0:	e51b3008 	ldr	r3, [fp, #-8]
  1138b4:	e3730001 	cmn	r3, #1
  1138b8:	0a000010 	beq	113900 <lwip_select+0x600>
         or we would have returned earlier. */
      goto return_copy_fdsets;
    }

    /* See what's set */
    nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
  1138bc:	e24b3e1a 	sub	r3, fp, #416	; 0x1a0
  1138c0:	e58d3008 	str	r3, [sp, #8]
  1138c4:	e24b3e12 	sub	r3, fp, #288	; 0x120
  1138c8:	e58d3004 	str	r3, [sp, #4]
  1138cc:	e24b30a0 	sub	r3, fp, #160	; 0xa0
  1138d0:	e58d3000 	str	r3, [sp]
  1138d4:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  1138d8:	e51b21c8 	ldr	r2, [fp, #-456]	; 0xfffffe38
  1138dc:	e51b11c4 	ldr	r1, [fp, #-452]	; 0xfffffe3c
  1138e0:	e51b01c0 	ldr	r0, [fp, #-448]	; 0xfffffe40
  1138e4:	ebfffd7a 	bl	112ed4 <lwip_selscan>
  1138e8:	e50b000c 	str	r0, [fp, #-12]
  1138ec:	ea000004 	b	113904 <lwip_select+0x604>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select: nready=%d\n", nready));
return_copy_fdsets:
  1138f0:	e320f000 	nop	{0}
  1138f4:	ea000002 	b	113904 <lwip_select+0x604>
      goto return_copy_fdsets;
  1138f8:	e320f000 	nop	{0}
  1138fc:	ea000000 	b	113904 <lwip_select+0x604>
      goto return_copy_fdsets;
  113900:	e320f000 	nop	{0}
  set_errno(0);
  if (readset) {
  113904:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  113908:	e3530000 	cmp	r3, #0
  11390c:	0a000005 	beq	113928 <lwip_select+0x628>
    *readset = lreadset;
  113910:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  113914:	e1a00003 	mov	r0, r3
  113918:	e24b30a0 	sub	r3, fp, #160	; 0xa0
  11391c:	e3a02080 	mov	r2, #128	; 0x80
  113920:	e1a01003 	mov	r1, r3
  113924:	eb00b51a 	bl	140d94 <memcpy>
  }
  if (writeset) {
  113928:	e51b31c8 	ldr	r3, [fp, #-456]	; 0xfffffe38
  11392c:	e3530000 	cmp	r3, #0
  113930:	0a000005 	beq	11394c <lwip_select+0x64c>
    *writeset = lwriteset;
  113934:	e51b31c8 	ldr	r3, [fp, #-456]	; 0xfffffe38
  113938:	e1a00003 	mov	r0, r3
  11393c:	e24b3e12 	sub	r3, fp, #288	; 0x120
  113940:	e3a02080 	mov	r2, #128	; 0x80
  113944:	e1a01003 	mov	r1, r3
  113948:	eb00b511 	bl	140d94 <memcpy>
  }
  if (exceptset) {
  11394c:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  113950:	e3530000 	cmp	r3, #0
  113954:	0a000005 	beq	113970 <lwip_select+0x670>
    *exceptset = lexceptset;
  113958:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  11395c:	e1a00003 	mov	r0, r3
  113960:	e24b3e1a 	sub	r3, fp, #416	; 0x1a0
  113964:	e3a02080 	mov	r2, #128	; 0x80
  113968:	e1a01003 	mov	r1, r3
  11396c:	eb00b508 	bl	140d94 <memcpy>
  }
  return nready;
  113970:	e51b300c 	ldr	r3, [fp, #-12]
}
  113974:	e1a00003 	mov	r0, r3
  113978:	e24bd004 	sub	sp, fp, #4
  11397c:	e8bd8800 	pop	{fp, pc}

00113980 <event_callback>:
#define POLLOUT    0x2
#define POLLERR    0x4
#define UNET_WAKEUP_REQUEST         45
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
  113980:	e92d4800 	push	{fp, lr}
  113984:	e28db004 	add	fp, sp, #4
  113988:	e24dd028 	sub	sp, sp, #40	; 0x28
  11398c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  113990:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  113994:	e1a03002 	mov	r3, r2
  113998:	e14b32b6 	strh	r3, [fp, #-38]	; 0xffffffda
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
  11399c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1139a0:	e3530000 	cmp	r3, #0
  1139a4:	0a0000e5 	beq	113d40 <event_callback+0x3c0>
    s = conn->socket;
  1139a8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1139ac:	e593301c 	ldr	r3, [r3, #28]
  1139b0:	e50b3008 	str	r3, [fp, #-8]
    if (s < 0) {
  1139b4:	e51b3008 	ldr	r3, [fp, #-8]
  1139b8:	e3530000 	cmp	r3, #0
  1139bc:	aa000012 	bge	113a0c <event_callback+0x8c>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
  1139c0:	ebffba1d 	bl	10223c <rt_enter_critical>
      if (conn->socket < 0) {
  1139c4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1139c8:	e593301c 	ldr	r3, [r3, #28]
  1139cc:	e3530000 	cmp	r3, #0
  1139d0:	aa000009 	bge	1139fc <event_callback+0x7c>
        if (evt == NETCONN_EVT_RCVPLUS) {
  1139d4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1139d8:	e3530000 	cmp	r3, #0
  1139dc:	1a000004 	bne	1139f4 <event_callback+0x74>
          conn->socket--;
  1139e0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1139e4:	e593301c 	ldr	r3, [r3, #28]
  1139e8:	e2432001 	sub	r2, r3, #1
  1139ec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1139f0:	e583201c 	str	r2, [r3, #28]
        }
        SYS_ARCH_UNPROTECT(lev);
  1139f4:	ebffba16 	bl	102254 <rt_exit_critical>
        return;
  1139f8:	ea0000d3 	b	113d4c <event_callback+0x3cc>
      }
      s = conn->socket;
  1139fc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113a00:	e593301c 	ldr	r3, [r3, #28]
  113a04:	e50b3008 	str	r3, [fp, #-8]
      SYS_ARCH_UNPROTECT(lev);
  113a08:	ebffba11 	bl	102254 <rt_exit_critical>
    }

    sock = get_socket(s);
  113a0c:	e51b0008 	ldr	r0, [fp, #-8]
  113a10:	ebfff542 	bl	110f20 <get_socket>
  113a14:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    if (!sock) {
  113a18:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113a1c:	e3530000 	cmp	r3, #0
  113a20:	0a0000c8 	beq	113d48 <event_callback+0x3c8>
    }
  } else {
    return;
  }

  SYS_ARCH_PROTECT(lev);
  113a24:	ebffba04 	bl	10223c <rt_enter_critical>
  /* Set event as required */
  switch (evt) {
  113a28:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  113a2c:	e3530004 	cmp	r3, #4
  113a30:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  113a34:	ea000022 	b	113ac4 <event_callback+0x144>
  113a38:	00113a4c 	.word	0x00113a4c
  113a3c:	00113a70 	.word	0x00113a70
  113a40:	00113a94 	.word	0x00113a94
  113a44:	00113aa4 	.word	0x00113aa4
  113a48:	00113ab4 	.word	0x00113ab4
    case NETCONN_EVT_RCVPLUS:
      /* *RT-Thread* need to be notified in kernel */
      sock->rcvevent++;
  113a4c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113a50:	e1d330fa 	ldrsh	r3, [r3, #10]
  113a54:	e6ff3073 	uxth	r3, r3
  113a58:	e2833001 	add	r3, r3, #1
  113a5c:	e6ff3073 	uxth	r3, r3
  113a60:	e6bf2073 	sxth	r2, r3
  113a64:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113a68:	e1c320ba 	strh	r2, [r3, #10]
      break;
  113a6c:	ea00001c 	b	113ae4 <event_callback+0x164>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
  113a70:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113a74:	e1d330fa 	ldrsh	r3, [r3, #10]
  113a78:	e6ff3073 	uxth	r3, r3
  113a7c:	e2433001 	sub	r3, r3, #1
  113a80:	e6ff3073 	uxth	r3, r3
  113a84:	e6bf2073 	sxth	r2, r3
  113a88:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113a8c:	e1c320ba 	strh	r2, [r3, #10]
      break;
  113a90:	ea000013 	b	113ae4 <event_callback+0x164>
    case NETCONN_EVT_SENDPLUS:
      sock->sendevent = 1;
  113a94:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113a98:	e3a02001 	mov	r2, #1
  113a9c:	e1c320bc 	strh	r2, [r3, #12]
      break;
  113aa0:	ea00000f 	b	113ae4 <event_callback+0x164>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
  113aa4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113aa8:	e3a02000 	mov	r2, #0
  113aac:	e1c320bc 	strh	r2, [r3, #12]
      break;
  113ab0:	ea00000b 	b	113ae4 <event_callback+0x164>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
  113ab4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113ab8:	e3a02001 	mov	r2, #1
  113abc:	e1c320be 	strh	r2, [r3, #14]
      break;
  113ac0:	ea000007 	b	113ae4 <event_callback+0x164>
    default:
      LWIP_ASSERT("unknown event", 0);
  113ac4:	e3060f70 	movw	r0, #28528	; 0x6f70
  113ac8:	e3400014 	movt	r0, #20
  113acc:	ebffbd90 	bl	103114 <rt_kprintf>
  113ad0:	e3001679 	movw	r1, #1657	; 0x679
  113ad4:	e3060d70 	movw	r0, #28016	; 0x6d70
  113ad8:	e3400014 	movt	r0, #20
  113adc:	ebffdd83 	bl	10b0f0 <sys_arch_assert>
      break;
  113ae0:	e320f000 	nop	{0}
  }

  int mask = 0;
  113ae4:	e3a03000 	mov	r3, #0
  113ae8:	e50b3010 	str	r3, [fp, #-16]
  if (sock != NULL)
  113aec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113af0:	e3530000 	cmp	r3, #0
  113af4:	0a00001b 	beq	113b68 <event_callback+0x1e8>
  {
#if LWIP_VERSION >= 0x20100ff
      if ((void*)(sock->lastdata.pbuf) || sock->rcvevent)
#else
      if ((void *)(sock->lastdata) || sock->rcvevent)
  113af8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113afc:	e5933004 	ldr	r3, [r3, #4]
  113b00:	e3530000 	cmp	r3, #0
  113b04:	1a000003 	bne	113b18 <event_callback+0x198>
  113b08:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113b0c:	e1d330fa 	ldrsh	r3, [r3, #10]
  113b10:	e3530000 	cmp	r3, #0
  113b14:	0a000002 	beq	113b24 <event_callback+0x1a4>
#endif
      {
          mask |= POLLIN;
  113b18:	e51b3010 	ldr	r3, [fp, #-16]
  113b1c:	e3833001 	orr	r3, r3, #1
  113b20:	e50b3010 	str	r3, [fp, #-16]
      }
      if (sock->sendevent)
  113b24:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113b28:	e1d330bc 	ldrh	r3, [r3, #12]
  113b2c:	e3530000 	cmp	r3, #0
  113b30:	0a000002 	beq	113b40 <event_callback+0x1c0>
      {
          mask |= POLLOUT;
  113b34:	e51b3010 	ldr	r3, [fp, #-16]
  113b38:	e3833002 	orr	r3, r3, #2
  113b3c:	e50b3010 	str	r3, [fp, #-16]
      }
      if (sock->errevent)
  113b40:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113b44:	e1d330be 	ldrh	r3, [r3, #14]
  113b48:	e3530000 	cmp	r3, #0
  113b4c:	0a000005 	beq	113b68 <event_callback+0x1e8>
      {
          mask |= POLLERR;
  113b50:	e51b3010 	ldr	r3, [fp, #-16]
  113b54:	e3833004 	orr	r3, r3, #4
  113b58:	e50b3010 	str	r3, [fp, #-16]
          /* clean error event */
          sock->errevent = 0;
  113b5c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113b60:	e3a02000 	mov	r2, #0
  113b64:	e1c320be 	strh	r2, [r3, #14]
  //     {
  //       rt_kprintf("create msg error\n");
  //     }
  // }

  if (sock->select_waiting == 0) {
  113b68:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113b6c:	e5d33011 	ldrb	r3, [r3, #17]
  113b70:	e3530000 	cmp	r3, #0
  113b74:	1a000001 	bne	113b80 <event_callback+0x200>
    /* noone is waiting for this socket, no need to check select_cb_list */
    SYS_ARCH_UNPROTECT(lev);
  113b78:	ebffb9b5 	bl	102254 <rt_exit_critical>
    return;
  113b7c:	ea000072 	b	113d4c <event_callback+0x3cc>
  /* NOTE: This code goes through the select_cb_list list multiple times
     ONLY IF a select was actually waiting. We go through the list the number
     of waiting select calls + 1. This list is expected to be small. */

  /* At this point, SYS_ARCH is still protected! */
again:
  113b80:	e320f000 	nop	{0}
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
  113b84:	e30d3c30 	movw	r3, #56368	; 0xdc30
  113b88:	e3403014 	movt	r3, #20
  113b8c:	e5933000 	ldr	r3, [r3]
  113b90:	e50b300c 	str	r3, [fp, #-12]
  113b94:	ea000064 	b	113d2c <event_callback+0x3ac>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  113b98:	e30d3c34 	movw	r3, #56372	; 0xdc34
  113b9c:	e3403014 	movt	r3, #20
  113ba0:	e5933000 	ldr	r3, [r3]
  113ba4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    if (scb->sem_signalled == 0) {
  113ba8:	e51b300c 	ldr	r3, [fp, #-12]
  113bac:	e5933014 	ldr	r3, [r3, #20]
  113bb0:	e3530000 	cmp	r3, #0
  113bb4:	1a000050 	bne	113cfc <event_callback+0x37c>
      /* semaphore not signalled yet */
      int do_signal = 0;
  113bb8:	e3a03000 	mov	r3, #0
  113bbc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      /* Test this select call for our socket */
      if (sock->rcvevent > 0) {
  113bc0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113bc4:	e1d330fa 	ldrsh	r3, [r3, #10]
  113bc8:	e3530000 	cmp	r3, #0
  113bcc:	da000010 	ble	113c14 <event_callback+0x294>
        if (scb->readset && FD_ISSET(s, scb->readset)) {
  113bd0:	e51b300c 	ldr	r3, [fp, #-12]
  113bd4:	e5933008 	ldr	r3, [r3, #8]
  113bd8:	e3530000 	cmp	r3, #0
  113bdc:	0a00000c 	beq	113c14 <event_callback+0x294>
  113be0:	e51b300c 	ldr	r3, [fp, #-12]
  113be4:	e5933008 	ldr	r3, [r3, #8]
  113be8:	e51b2008 	ldr	r2, [fp, #-8]
  113bec:	e1a022a2 	lsr	r2, r2, #5
  113bf0:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  113bf4:	e51b3008 	ldr	r3, [fp, #-8]
  113bf8:	e203301f 	and	r3, r3, #31
  113bfc:	e1a03332 	lsr	r3, r2, r3
  113c00:	e2033001 	and	r3, r3, #1
  113c04:	e3530000 	cmp	r3, #0
  113c08:	0a000001 	beq	113c14 <event_callback+0x294>
          do_signal = 1;
  113c0c:	e3a03001 	mov	r3, #1
  113c10:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        }
      }
      if (sock->sendevent != 0) {
  113c14:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113c18:	e1d330bc 	ldrh	r3, [r3, #12]
  113c1c:	e3530000 	cmp	r3, #0
  113c20:	0a000013 	beq	113c74 <event_callback+0x2f4>
        if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
  113c24:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113c28:	e3530000 	cmp	r3, #0
  113c2c:	1a000010 	bne	113c74 <event_callback+0x2f4>
  113c30:	e51b300c 	ldr	r3, [fp, #-12]
  113c34:	e593300c 	ldr	r3, [r3, #12]
  113c38:	e3530000 	cmp	r3, #0
  113c3c:	0a00000c 	beq	113c74 <event_callback+0x2f4>
  113c40:	e51b300c 	ldr	r3, [fp, #-12]
  113c44:	e593300c 	ldr	r3, [r3, #12]
  113c48:	e51b2008 	ldr	r2, [fp, #-8]
  113c4c:	e1a022a2 	lsr	r2, r2, #5
  113c50:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  113c54:	e51b3008 	ldr	r3, [fp, #-8]
  113c58:	e203301f 	and	r3, r3, #31
  113c5c:	e1a03332 	lsr	r3, r2, r3
  113c60:	e2033001 	and	r3, r3, #1
  113c64:	e3530000 	cmp	r3, #0
  113c68:	0a000001 	beq	113c74 <event_callback+0x2f4>
          do_signal = 1;
  113c6c:	e3a03001 	mov	r3, #1
  113c70:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        }
      }
      if (sock->errevent != 0) {
  113c74:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113c78:	e1d330be 	ldrh	r3, [r3, #14]
  113c7c:	e3530000 	cmp	r3, #0
  113c80:	0a000013 	beq	113cd4 <event_callback+0x354>
        if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
  113c84:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113c88:	e3530000 	cmp	r3, #0
  113c8c:	1a000010 	bne	113cd4 <event_callback+0x354>
  113c90:	e51b300c 	ldr	r3, [fp, #-12]
  113c94:	e5933010 	ldr	r3, [r3, #16]
  113c98:	e3530000 	cmp	r3, #0
  113c9c:	0a00000c 	beq	113cd4 <event_callback+0x354>
  113ca0:	e51b300c 	ldr	r3, [fp, #-12]
  113ca4:	e5933010 	ldr	r3, [r3, #16]
  113ca8:	e51b2008 	ldr	r2, [fp, #-8]
  113cac:	e1a022a2 	lsr	r2, r2, #5
  113cb0:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  113cb4:	e51b3008 	ldr	r3, [fp, #-8]
  113cb8:	e203301f 	and	r3, r3, #31
  113cbc:	e1a03332 	lsr	r3, r2, r3
  113cc0:	e2033001 	and	r3, r3, #1
  113cc4:	e3530000 	cmp	r3, #0
  113cc8:	0a000001 	beq	113cd4 <event_callback+0x354>
          do_signal = 1;
  113ccc:	e3a03001 	mov	r3, #1
  113cd0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        }
      }
      if (do_signal) {
  113cd4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113cd8:	e3530000 	cmp	r3, #0
  113cdc:	0a000006 	beq	113cfc <event_callback+0x37c>
        scb->sem_signalled = 1;
  113ce0:	e51b300c 	ldr	r3, [fp, #-12]
  113ce4:	e3a02001 	mov	r2, #1
  113ce8:	e5832014 	str	r2, [r3, #20]
        /* Don't call SYS_ARCH_UNPROTECT() before signaling the semaphore, as this might
           lead to the select thread taking itself off the list, invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
  113cec:	e51b300c 	ldr	r3, [fp, #-12]
  113cf0:	e2833018 	add	r3, r3, #24
  113cf4:	e1a00003 	mov	r0, r3
  113cf8:	ebffdb05 	bl	10a914 <sys_sem_signal>
      }
    }
    /* unlock interrupts with each step */
    SYS_ARCH_UNPROTECT(lev);
  113cfc:	ebffb954 	bl	102254 <rt_exit_critical>
    /* this makes sure interrupt protection time is short */
    SYS_ARCH_PROTECT(lev);
  113d00:	ebffb94d 	bl	10223c <rt_enter_critical>
    if (last_select_cb_ctr != select_cb_ctr) {
  113d04:	e30d3c34 	movw	r3, #56372	; 0xdc34
  113d08:	e3403014 	movt	r3, #20
  113d0c:	e5933000 	ldr	r3, [r3]
  113d10:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  113d14:	e1520003 	cmp	r2, r3
  113d18:	0a000000 	beq	113d20 <event_callback+0x3a0>
      /* someone has changed select_cb_list, restart at the beginning */
      goto again;
  113d1c:	eaffff98 	b	113b84 <event_callback+0x204>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
  113d20:	e51b300c 	ldr	r3, [fp, #-12]
  113d24:	e5933000 	ldr	r3, [r3]
  113d28:	e50b300c 	str	r3, [fp, #-12]
  113d2c:	e51b300c 	ldr	r3, [fp, #-12]
  113d30:	e3530000 	cmp	r3, #0
  113d34:	1affff97 	bne	113b98 <event_callback+0x218>
    }
  }
  SYS_ARCH_UNPROTECT(lev);
  113d38:	ebffb945 	bl	102254 <rt_exit_critical>
  113d3c:	ea000002 	b	113d4c <event_callback+0x3cc>
    return;
  113d40:	e320f000 	nop	{0}
  113d44:	ea000000 	b	113d4c <event_callback+0x3cc>
      return;
  113d48:	e320f000 	nop	{0}
}
  113d4c:	e24bd004 	sub	sp, fp, #4
  113d50:	e8bd8800 	pop	{fp, pc}

00113d54 <lwip_shutdown>:
/**
 * Close one end of a full-duplex connection.
 */
int
lwip_shutdown(int s, int how)
{
  113d54:	e92d4800 	push	{fp, lr}
  113d58:	e28db004 	add	fp, sp, #4
  113d5c:	e24dd028 	sub	sp, sp, #40	; 0x28
  113d60:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  113d64:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  struct lwip_sock *sock;
  err_t err;
  u8_t shut_rx = 0, shut_tx = 0;
  113d68:	e3a03000 	mov	r3, #0
  113d6c:	e54b3005 	strb	r3, [fp, #-5]
  113d70:	e3a03000 	mov	r3, #0
  113d74:	e54b3006 	strb	r3, [fp, #-6]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_shutdown(%d, how=%d)\n", s, how));

  sock = get_socket(s);
  113d78:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  113d7c:	ebfff467 	bl	110f20 <get_socket>
  113d80:	e50b000c 	str	r0, [fp, #-12]
  if (!sock) {
  113d84:	e51b300c 	ldr	r3, [fp, #-12]
  113d88:	e3530000 	cmp	r3, #0
  113d8c:	1a000001 	bne	113d98 <lwip_shutdown+0x44>
    return -1;
  113d90:	e3e03000 	mvn	r3, #0
  113d94:	ea000067 	b	113f38 <lwip_shutdown+0x1e4>
  }

  if (sock->conn != NULL) {
  113d98:	e51b300c 	ldr	r3, [fp, #-12]
  113d9c:	e5933000 	ldr	r3, [r3]
  113da0:	e3530000 	cmp	r3, #0
  113da4:	0a000014 	beq	113dfc <lwip_shutdown+0xa8>
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
  113da8:	e51b300c 	ldr	r3, [fp, #-12]
  113dac:	e5933000 	ldr	r3, [r3]
  113db0:	e5933000 	ldr	r3, [r3]
  113db4:	e20330f0 	and	r3, r3, #240	; 0xf0
  113db8:	e3530010 	cmp	r3, #16
  113dbc:	0a00001d 	beq	113e38 <lwip_shutdown+0xe4>
      sock_set_errno(sock, EOPNOTSUPP);
  113dc0:	e3a0305f 	mov	r3, #95	; 0x5f
  113dc4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  113dc8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113dcc:	e6ef2073 	uxtb	r2, r3
  113dd0:	e51b300c 	ldr	r3, [fp, #-12]
  113dd4:	e5c32010 	strb	r2, [r3, #16]
  113dd8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113ddc:	e3530000 	cmp	r3, #0
  113de0:	0a000003 	beq	113df4 <lwip_shutdown+0xa0>
  113de4:	eb00943c 	bl	138edc <__errno_location>
  113de8:	e1a02000 	mov	r2, r0
  113dec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113df0:	e5823000 	str	r3, [r2]
      return -1;
  113df4:	e3e03000 	mvn	r3, #0
  113df8:	ea00004e 	b	113f38 <lwip_shutdown+0x1e4>
    }
  } else {
    sock_set_errno(sock, ENOTCONN);
  113dfc:	e3a0306b 	mov	r3, #107	; 0x6b
  113e00:	e50b3010 	str	r3, [fp, #-16]
  113e04:	e51b3010 	ldr	r3, [fp, #-16]
  113e08:	e6ef2073 	uxtb	r2, r3
  113e0c:	e51b300c 	ldr	r3, [fp, #-12]
  113e10:	e5c32010 	strb	r2, [r3, #16]
  113e14:	e51b3010 	ldr	r3, [fp, #-16]
  113e18:	e3530000 	cmp	r3, #0
  113e1c:	0a000003 	beq	113e30 <lwip_shutdown+0xdc>
  113e20:	eb00942d 	bl	138edc <__errno_location>
  113e24:	e1a02000 	mov	r2, r0
  113e28:	e51b3010 	ldr	r3, [fp, #-16]
  113e2c:	e5823000 	str	r3, [r2]
    return -1;
  113e30:	e3e03000 	mvn	r3, #0
  113e34:	ea00003f 	b	113f38 <lwip_shutdown+0x1e4>
  }

  if (how == SHUT_RD) {
  113e38:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  113e3c:	e3530000 	cmp	r3, #0
  113e40:	1a000002 	bne	113e50 <lwip_shutdown+0xfc>
    shut_rx = 1;
  113e44:	e3a03001 	mov	r3, #1
  113e48:	e54b3005 	strb	r3, [fp, #-5]
  113e4c:	ea00001c 	b	113ec4 <lwip_shutdown+0x170>
  } else if (how == SHUT_WR) {
  113e50:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  113e54:	e3530001 	cmp	r3, #1
  113e58:	1a000002 	bne	113e68 <lwip_shutdown+0x114>
    shut_tx = 1;
  113e5c:	e3a03001 	mov	r3, #1
  113e60:	e54b3006 	strb	r3, [fp, #-6]
  113e64:	ea000016 	b	113ec4 <lwip_shutdown+0x170>
  } else if (how == SHUT_RDWR) {
  113e68:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  113e6c:	e3530002 	cmp	r3, #2
  113e70:	1a000004 	bne	113e88 <lwip_shutdown+0x134>
    shut_rx = 1;
  113e74:	e3a03001 	mov	r3, #1
  113e78:	e54b3005 	strb	r3, [fp, #-5]
    shut_tx = 1;
  113e7c:	e3a03001 	mov	r3, #1
  113e80:	e54b3006 	strb	r3, [fp, #-6]
  113e84:	ea00000e 	b	113ec4 <lwip_shutdown+0x170>
  } else {
    sock_set_errno(sock, EINVAL);
  113e88:	e3a03016 	mov	r3, #22
  113e8c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  113e90:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113e94:	e6ef2073 	uxtb	r2, r3
  113e98:	e51b300c 	ldr	r3, [fp, #-12]
  113e9c:	e5c32010 	strb	r2, [r3, #16]
  113ea0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113ea4:	e3530000 	cmp	r3, #0
  113ea8:	0a000003 	beq	113ebc <lwip_shutdown+0x168>
  113eac:	eb00940a 	bl	138edc <__errno_location>
  113eb0:	e1a02000 	mov	r2, r0
  113eb4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113eb8:	e5823000 	str	r3, [r2]
    return -1;
  113ebc:	e3e03000 	mvn	r3, #0
  113ec0:	ea00001c 	b	113f38 <lwip_shutdown+0x1e4>
  }
  err = netconn_shutdown(sock->conn, shut_rx, shut_tx);
  113ec4:	e51b300c 	ldr	r3, [fp, #-12]
  113ec8:	e5933000 	ldr	r3, [r3]
  113ecc:	e55b2006 	ldrb	r2, [fp, #-6]
  113ed0:	e55b1005 	ldrb	r1, [fp, #-5]
  113ed4:	e1a00003 	mov	r0, r3
  113ed8:	ebffe0c3 	bl	10c1ec <netconn_shutdown>
  113edc:	e1a03000 	mov	r3, r0
  113ee0:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb

  sock_set_errno(sock, err_to_errno(err));
  113ee4:	e15b31d5 	ldrsb	r3, [fp, #-21]	; 0xffffffeb
  113ee8:	e1a00003 	mov	r0, r3
  113eec:	ebffefe3 	bl	10fe80 <err_to_errno>
  113ef0:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
  113ef4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  113ef8:	e6ef2073 	uxtb	r2, r3
  113efc:	e51b300c 	ldr	r3, [fp, #-12]
  113f00:	e5c32010 	strb	r2, [r3, #16]
  113f04:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  113f08:	e3530000 	cmp	r3, #0
  113f0c:	0a000003 	beq	113f20 <lwip_shutdown+0x1cc>
  113f10:	eb0093f1 	bl	138edc <__errno_location>
  113f14:	e1a02000 	mov	r2, r0
  113f18:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  113f1c:	e5823000 	str	r3, [r2]
  return (err == ERR_OK ? 0 : -1);
  113f20:	e15b31d5 	ldrsb	r3, [fp, #-21]	; 0xffffffeb
  113f24:	e3530000 	cmp	r3, #0
  113f28:	1a000001 	bne	113f34 <lwip_shutdown+0x1e0>
  113f2c:	e3a03000 	mov	r3, #0
  113f30:	ea000000 	b	113f38 <lwip_shutdown+0x1e4>
  113f34:	e3e03000 	mvn	r3, #0
}
  113f38:	e1a00003 	mov	r0, r3
  113f3c:	e24bd004 	sub	sp, fp, #4
  113f40:	e8bd8800 	pop	{fp, pc}

00113f44 <lwip_getaddrname>:

static int
lwip_getaddrname(int s, struct sockaddr *name, socklen_t *namelen, u8_t local)
{
  113f44:	e92d4810 	push	{r4, fp, lr}
  113f48:	e28db008 	add	fp, sp, #8
  113f4c:	e24dd03c 	sub	sp, sp, #60	; 0x3c
  113f50:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
  113f54:	e50b103c 	str	r1, [fp, #-60]	; 0xffffffc4
  113f58:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
  113f5c:	e54b3041 	strb	r3, [fp, #-65]	; 0xffffffbf
  union sockaddr_aligned saddr;
  ip_addr_t naddr;
  u16_t port;
  err_t err;

  sock = get_socket(s);
  113f60:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
  113f64:	ebfff3ed 	bl	110f20 <get_socket>
  113f68:	e50b0010 	str	r0, [fp, #-16]
  if (!sock) {
  113f6c:	e51b3010 	ldr	r3, [fp, #-16]
  113f70:	e3530000 	cmp	r3, #0
  113f74:	1a000001 	bne	113f80 <lwip_getaddrname+0x3c>
    return -1;
  113f78:	e3e03000 	mvn	r3, #0
  113f7c:	ea00004d 	b	1140b8 <lwip_getaddrname+0x174>
  }

  /* get the IP address and port */
  err = netconn_getaddr(sock->conn, &naddr, &port, local);
  113f80:	e51b3010 	ldr	r3, [fp, #-16]
  113f84:	e5930000 	ldr	r0, [r3]
  113f88:	e55b3041 	ldrb	r3, [fp, #-65]	; 0xffffffbf
  113f8c:	e24b2032 	sub	r2, fp, #50	; 0x32
  113f90:	e24b1030 	sub	r1, fp, #48	; 0x30
  113f94:	ebffdd45 	bl	10b4b0 <netconn_getaddr>
  113f98:	e1a03000 	mov	r3, r0
  113f9c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  if (err != ERR_OK) {
  113fa0:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  113fa4:	e3530000 	cmp	r3, #0
  113fa8:	0a000010 	beq	113ff0 <lwip_getaddrname+0xac>
    sock_set_errno(sock, err_to_errno(err));
  113fac:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  113fb0:	e1a00003 	mov	r0, r3
  113fb4:	ebffefb1 	bl	10fe80 <err_to_errno>
  113fb8:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
  113fbc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  113fc0:	e6ef2073 	uxtb	r2, r3
  113fc4:	e51b3010 	ldr	r3, [fp, #-16]
  113fc8:	e5c32010 	strb	r2, [r3, #16]
  113fcc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  113fd0:	e3530000 	cmp	r3, #0
  113fd4:	0a000003 	beq	113fe8 <lwip_getaddrname+0xa4>
  113fd8:	eb0093bf 	bl	138edc <__errno_location>
  113fdc:	e1a02000 	mov	r2, r0
  113fe0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  113fe4:	e5823000 	str	r3, [r2]
    return -1;
  113fe8:	e3e03000 	mvn	r3, #0
  113fec:	ea000031 	b	1140b8 <lwip_getaddrname+0x174>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(&naddr), ip_2_ip4(&naddr));
    IP_SET_TYPE_VAL(naddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, &naddr, port);
  113ff0:	e24b302c 	sub	r3, fp, #44	; 0x2c
  113ff4:	e3a02010 	mov	r2, #16
  113ff8:	e5c32000 	strb	r2, [r3]
  113ffc:	e24b302c 	sub	r3, fp, #44	; 0x2c
  114000:	e3a02002 	mov	r2, #2
  114004:	e5c32001 	strb	r2, [r3, #1]
  114008:	e15b33b2 	ldrh	r3, [fp, #-50]	; 0xffffffce
  11400c:	e24b402c 	sub	r4, fp, #44	; 0x2c
  114010:	e1a00003 	mov	r0, r3
  114014:	eb00096e 	bl	1165d4 <lwip_htons>
  114018:	e1a03000 	mov	r3, r0
  11401c:	e1c430b2 	strh	r3, [r4, #2]
  114020:	e24b302c 	sub	r3, fp, #44	; 0x2c
  114024:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  114028:	e5832004 	str	r2, [r3, #4]
  11402c:	e24b302c 	sub	r3, fp, #44	; 0x2c
  114030:	e2833008 	add	r3, r3, #8
  114034:	e3a02008 	mov	r2, #8
  114038:	e3a01000 	mov	r1, #0
  11403c:	e1a00003 	mov	r0, r3
  114040:	eb00b48b 	bl	141274 <memset>

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getaddrname(%d, addr=", s));
  ip_addr_debug_print_val(SOCKETS_DEBUG, naddr);
  LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F")\n", port));

  if (*namelen > saddr.sa.sa_len) {
  114044:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  114048:	e5933000 	ldr	r3, [r3]
  11404c:	e55b202c 	ldrb	r2, [fp, #-44]	; 0xffffffd4
  114050:	e1530002 	cmp	r3, r2
  114054:	9a000003 	bls	114068 <lwip_getaddrname+0x124>
    *namelen = saddr.sa.sa_len;
  114058:	e55b302c 	ldrb	r3, [fp, #-44]	; 0xffffffd4
  11405c:	e1a02003 	mov	r2, r3
  114060:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  114064:	e5832000 	str	r2, [r3]
  }
  MEMCPY(name, &saddr, *namelen);
  114068:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  11406c:	e5932000 	ldr	r2, [r3]
  114070:	e24b302c 	sub	r3, fp, #44	; 0x2c
  114074:	e1a01003 	mov	r1, r3
  114078:	e51b003c 	ldr	r0, [fp, #-60]	; 0xffffffc4
  11407c:	eb00b344 	bl	140d94 <memcpy>

  sock_set_errno(sock, 0);
  114080:	e3a03000 	mov	r3, #0
  114084:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  114088:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11408c:	e6ef2073 	uxtb	r2, r3
  114090:	e51b3010 	ldr	r3, [fp, #-16]
  114094:	e5c32010 	strb	r2, [r3, #16]
  114098:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11409c:	e3530000 	cmp	r3, #0
  1140a0:	0a000003 	beq	1140b4 <lwip_getaddrname+0x170>
  1140a4:	eb00938c 	bl	138edc <__errno_location>
  1140a8:	e1a02000 	mov	r2, r0
  1140ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1140b0:	e5823000 	str	r3, [r2]
  return 0;
  1140b4:	e3a03000 	mov	r3, #0
}
  1140b8:	e1a00003 	mov	r0, r3
  1140bc:	e24bd008 	sub	sp, fp, #8
  1140c0:	e8bd8810 	pop	{r4, fp, pc}

001140c4 <lwip_getpeername>:

int
lwip_getpeername(int s, struct sockaddr *name, socklen_t *namelen)
{
  1140c4:	e92d4800 	push	{fp, lr}
  1140c8:	e28db004 	add	fp, sp, #4
  1140cc:	e24dd010 	sub	sp, sp, #16
  1140d0:	e50b0008 	str	r0, [fp, #-8]
  1140d4:	e50b100c 	str	r1, [fp, #-12]
  1140d8:	e50b2010 	str	r2, [fp, #-16]
  return lwip_getaddrname(s, name, namelen, 0);
  1140dc:	e3a03000 	mov	r3, #0
  1140e0:	e51b2010 	ldr	r2, [fp, #-16]
  1140e4:	e51b100c 	ldr	r1, [fp, #-12]
  1140e8:	e51b0008 	ldr	r0, [fp, #-8]
  1140ec:	ebffff94 	bl	113f44 <lwip_getaddrname>
  1140f0:	e1a03000 	mov	r3, r0
}
  1140f4:	e1a00003 	mov	r0, r3
  1140f8:	e24bd004 	sub	sp, fp, #4
  1140fc:	e8bd8800 	pop	{fp, pc}

00114100 <lwip_getsockname>:

int
lwip_getsockname(int s, struct sockaddr *name, socklen_t *namelen)
{
  114100:	e92d4800 	push	{fp, lr}
  114104:	e28db004 	add	fp, sp, #4
  114108:	e24dd010 	sub	sp, sp, #16
  11410c:	e50b0008 	str	r0, [fp, #-8]
  114110:	e50b100c 	str	r1, [fp, #-12]
  114114:	e50b2010 	str	r2, [fp, #-16]
  return lwip_getaddrname(s, name, namelen, 1);
  114118:	e3a03001 	mov	r3, #1
  11411c:	e51b2010 	ldr	r2, [fp, #-16]
  114120:	e51b100c 	ldr	r1, [fp, #-12]
  114124:	e51b0008 	ldr	r0, [fp, #-8]
  114128:	ebffff85 	bl	113f44 <lwip_getaddrname>
  11412c:	e1a03000 	mov	r3, r0
}
  114130:	e1a00003 	mov	r0, r3
  114134:	e24bd004 	sub	sp, fp, #4
  114138:	e8bd8800 	pop	{fp, pc}

0011413c <lwip_getsockopt>:

int
lwip_getsockopt(int s, int level, int optname, void *optval, socklen_t *optlen)
{
  11413c:	e92d4800 	push	{fp, lr}
  114140:	e28db004 	add	fp, sp, #4
  114144:	e24dd028 	sub	sp, sp, #40	; 0x28
  114148:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11414c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  114150:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  114154:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  u8_t err;
  struct lwip_sock *sock = get_socket(s);
  114158:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  11415c:	ebfff36f 	bl	110f20 <get_socket>
  114160:	e50b0008 	str	r0, [fp, #-8]
#if !LWIP_TCPIP_CORE_LOCKING
  LWIP_SETGETSOCKOPT_DATA_VAR_DECLARE(data);
#endif /* !LWIP_TCPIP_CORE_LOCKING */

  if (!sock) {
  114164:	e51b3008 	ldr	r3, [fp, #-8]
  114168:	e3530000 	cmp	r3, #0
  11416c:	1a000001 	bne	114178 <lwip_getsockopt+0x3c>
    return -1;
  114170:	e3e03000 	mvn	r3, #0
  114174:	ea000036 	b	114254 <lwip_getsockopt+0x118>
  }

  if ((NULL == optval) || (NULL == optlen)) {
  114178:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11417c:	e3530000 	cmp	r3, #0
  114180:	0a000002 	beq	114190 <lwip_getsockopt+0x54>
  114184:	e59b3004 	ldr	r3, [fp, #4]
  114188:	e3530000 	cmp	r3, #0
  11418c:	1a00000e 	bne	1141cc <lwip_getsockopt+0x90>
    sock_set_errno(sock, EFAULT);
  114190:	e3a0300e 	mov	r3, #14
  114194:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  114198:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11419c:	e6ef2073 	uxtb	r2, r3
  1141a0:	e51b3008 	ldr	r3, [fp, #-8]
  1141a4:	e5c32010 	strb	r2, [r3, #16]
  1141a8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1141ac:	e3530000 	cmp	r3, #0
  1141b0:	0a000003 	beq	1141c4 <lwip_getsockopt+0x88>
  1141b4:	eb009348 	bl	138edc <__errno_location>
  1141b8:	e1a02000 	mov	r2, r0
  1141bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1141c0:	e5823000 	str	r3, [r2]
    return -1;
  1141c4:	e3e03000 	mvn	r3, #0
  1141c8:	ea000021 	b	114254 <lwip_getsockopt+0x118>
  }

#if LWIP_TCPIP_CORE_LOCKING
  /* core-locking can just call the -impl function */
  LOCK_TCPIP_CORE();
  1141cc:	e30f05f4 	movw	r0, #62964	; 0xf5f4
  1141d0:	e3400014 	movt	r0, #20
  1141d4:	ebffda49 	bl	10ab00 <sys_mutex_lock>
  err = lwip_getsockopt_impl(s, level, optname, optval, optlen);
  1141d8:	e59b3004 	ldr	r3, [fp, #4]
  1141dc:	e58d3000 	str	r3, [sp]
  1141e0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1141e4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1141e8:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1141ec:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1141f0:	eb00001a 	bl	114260 <lwip_getsockopt_impl>
  1141f4:	e1a03000 	mov	r3, r0
  1141f8:	e54b3009 	strb	r3, [fp, #-9]
  UNLOCK_TCPIP_CORE();
  1141fc:	e30f05f4 	movw	r0, #62964	; 0xf5f4
  114200:	e3400014 	movt	r0, #20
  114204:	ebffda49 	bl	10ab30 <sys_mutex_unlock>
  /* maybe lwip_getsockopt_internal has changed err */
  err = LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).err;
  LWIP_SETGETSOCKOPT_DATA_VAR_FREE(data);
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sock_set_errno(sock, err);
  114208:	e55b3009 	ldrb	r3, [fp, #-9]
  11420c:	e50b3010 	str	r3, [fp, #-16]
  114210:	e51b3010 	ldr	r3, [fp, #-16]
  114214:	e6ef2073 	uxtb	r2, r3
  114218:	e51b3008 	ldr	r3, [fp, #-8]
  11421c:	e5c32010 	strb	r2, [r3, #16]
  114220:	e51b3010 	ldr	r3, [fp, #-16]
  114224:	e3530000 	cmp	r3, #0
  114228:	0a000003 	beq	11423c <lwip_getsockopt+0x100>
  11422c:	eb00932a 	bl	138edc <__errno_location>
  114230:	e1a02000 	mov	r2, r0
  114234:	e51b3010 	ldr	r3, [fp, #-16]
  114238:	e5823000 	str	r3, [r2]
  return err ? -1 : 0;
  11423c:	e55b3009 	ldrb	r3, [fp, #-9]
  114240:	e3530000 	cmp	r3, #0
  114244:	0a000001 	beq	114250 <lwip_getsockopt+0x114>
  114248:	e3e03000 	mvn	r3, #0
  11424c:	ea000000 	b	114254 <lwip_getsockopt+0x118>
  114250:	e3a03000 	mov	r3, #0
}
  114254:	e1a00003 	mov	r0, r3
  114258:	e24bd004 	sub	sp, fp, #4
  11425c:	e8bd8800 	pop	{fp, pc}

00114260 <lwip_getsockopt_impl>:
/** lwip_getsockopt_impl: the actual implementation of getsockopt:
 * same argument as lwip_getsockopt, either called directly or through callback
 */
static u8_t
lwip_getsockopt_impl(int s, int level, int optname, void *optval, socklen_t *optlen)
{
  114260:	e92d4800 	push	{fp, lr}
  114264:	e28db004 	add	fp, sp, #4
  114268:	e24dd028 	sub	sp, sp, #40	; 0x28
  11426c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  114270:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  114274:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  114278:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  u8_t err = 0;
  11427c:	e3a03000 	mov	r3, #0
  114280:	e54b3005 	strb	r3, [fp, #-5]
  struct lwip_sock *sock = tryget_socket(s);
  114284:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  114288:	ebfff349 	bl	110fb4 <tryget_socket>
  11428c:	e50b000c 	str	r0, [fp, #-12]
  if (!sock) {
  114290:	e51b300c 	ldr	r3, [fp, #-12]
  114294:	e3530000 	cmp	r3, #0
  114298:	1a000001 	bne	1142a4 <lwip_getsockopt_impl+0x44>
    return EBADF;
  11429c:	e3a03009 	mov	r3, #9
  1142a0:	ea00026a 	b	114c50 <lwip_getsockopt_impl+0x9f0>
  }

  switch (level) {
  1142a4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1142a8:	e3530006 	cmp	r3, #6
  1142ac:	0a0001fb 	beq	114aa0 <lwip_getsockopt_impl+0x840>
  1142b0:	e3530006 	cmp	r3, #6
  1142b4:	ca000002 	bgt	1142c4 <lwip_getsockopt_impl+0x64>
  1142b8:	e3530000 	cmp	r3, #0
  1142bc:	0a000155 	beq	114818 <lwip_getsockopt_impl+0x5b8>
  1142c0:	ea00025e 	b	114c40 <lwip_getsockopt_impl+0x9e0>
  1142c4:	e35300ff 	cmp	r3, #255	; 0xff
  1142c8:	0a000258 	beq	114c30 <lwip_getsockopt_impl+0x9d0>
  1142cc:	e3002fff 	movw	r2, #4095	; 0xfff
  1142d0:	e1530002 	cmp	r3, r2
  1142d4:	1a000259 	bne	114c40 <lwip_getsockopt_impl+0x9e0>

/* Level: SOL_SOCKET */
  case SOL_SOCKET:
    switch (optname) {
  1142d8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1142dc:	e3012002 	movw	r2, #4098	; 0x1002
  1142e0:	e1530002 	cmp	r3, r2
  1142e4:	0a000114 	beq	11473c <lwip_getsockopt_impl+0x4dc>
  1142e8:	e3012002 	movw	r2, #4098	; 0x1002
  1142ec:	e1530002 	cmp	r3, r2
  1142f0:	ca00000b 	bgt	114324 <lwip_getsockopt_impl+0xc4>
  1142f4:	e3530004 	cmp	r3, #4
  1142f8:	0a000049 	beq	114424 <lwip_getsockopt_impl+0x1c4>
  1142fc:	e3530004 	cmp	r3, #4
  114300:	ca000002 	bgt	114310 <lwip_getsockopt_impl+0xb0>
  114304:	e3530002 	cmp	r3, #2
  114308:	0a000019 	beq	114374 <lwip_getsockopt_impl+0x114>
  11430c:	ea00013d 	b	114808 <lwip_getsockopt_impl+0x5a8>
  114310:	e3530008 	cmp	r3, #8
  114314:	0a000042 	beq	114424 <lwip_getsockopt_impl+0x1c4>
  114318:	e3530020 	cmp	r3, #32
  11431c:	0a000040 	beq	114424 <lwip_getsockopt_impl+0x1c4>
  114320:	ea000138 	b	114808 <lwip_getsockopt_impl+0x5a8>
  114324:	e3012007 	movw	r2, #4103	; 0x1007
  114328:	e1530002 	cmp	r3, r2
  11432c:	0a000082 	beq	11453c <lwip_getsockopt_impl+0x2dc>
  114330:	e3012007 	movw	r2, #4103	; 0x1007
  114334:	e1530002 	cmp	r3, r2
  114338:	ca000006 	bgt	114358 <lwip_getsockopt_impl+0xf8>
  11433c:	e3012005 	movw	r2, #4101	; 0x1005
  114340:	e1530002 	cmp	r3, r2
  114344:	0a0000ae 	beq	114604 <lwip_getsockopt_impl+0x3a4>
  114348:	e3012006 	movw	r2, #4102	; 0x1006
  11434c:	e1530002 	cmp	r3, r2
  114350:	0a0000d2 	beq	1146a0 <lwip_getsockopt_impl+0x440>
  114354:	ea00012b 	b	114808 <lwip_getsockopt_impl+0x5a8>
  114358:	e3012008 	movw	r2, #4104	; 0x1008
  11435c:	e1530002 	cmp	r3, r2
  114360:	0a00004a 	beq	114490 <lwip_getsockopt_impl+0x230>
  114364:	e301200a 	movw	r2, #4106	; 0x100a
  114368:	e1530002 	cmp	r3, r2
  11436c:	0a000104 	beq	114784 <lwip_getsockopt_impl+0x524>
  114370:	ea000124 	b	114808 <lwip_getsockopt_impl+0x5a8>

#if LWIP_TCP
    case SO_ACCEPTCONN:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, int);
  114374:	e59b3004 	ldr	r3, [fp, #4]
  114378:	e5933000 	ldr	r3, [r3]
  11437c:	e3530003 	cmp	r3, #3
  114380:	8a000001 	bhi	11438c <lwip_getsockopt_impl+0x12c>
  114384:	e3a03016 	mov	r3, #22
  114388:	ea000230 	b	114c50 <lwip_getsockopt_impl+0x9f0>
  11438c:	e51b300c 	ldr	r3, [fp, #-12]
  114390:	e5933000 	ldr	r3, [r3]
  114394:	e3530000 	cmp	r3, #0
  114398:	0a000004 	beq	1143b0 <lwip_getsockopt_impl+0x150>
  11439c:	e51b300c 	ldr	r3, [fp, #-12]
  1143a0:	e5933000 	ldr	r3, [r3]
  1143a4:	e5933008 	ldr	r3, [r3, #8]
  1143a8:	e3530000 	cmp	r3, #0
  1143ac:	1a000001 	bne	1143b8 <lwip_getsockopt_impl+0x158>
  1143b0:	e3a03016 	mov	r3, #22
  1143b4:	ea000225 	b	114c50 <lwip_getsockopt_impl+0x9f0>
      if (NETCONNTYPE_GROUP(sock->conn->type) != NETCONN_TCP) {
  1143b8:	e51b300c 	ldr	r3, [fp, #-12]
  1143bc:	e5933000 	ldr	r3, [r3]
  1143c0:	e5933000 	ldr	r3, [r3]
  1143c4:	e20330f0 	and	r3, r3, #240	; 0xf0
  1143c8:	e3530010 	cmp	r3, #16
  1143cc:	0a000001 	beq	1143d8 <lwip_getsockopt_impl+0x178>
        return ENOPROTOOPT;
  1143d0:	e3a0305c 	mov	r3, #92	; 0x5c
  1143d4:	ea00021d 	b	114c50 <lwip_getsockopt_impl+0x9f0>
      }
      if ((sock->conn->pcb.tcp != NULL) && (sock->conn->pcb.tcp->state == LISTEN)) {
  1143d8:	e51b300c 	ldr	r3, [fp, #-12]
  1143dc:	e5933000 	ldr	r3, [r3]
  1143e0:	e5933008 	ldr	r3, [r3, #8]
  1143e4:	e3530000 	cmp	r3, #0
  1143e8:	0a000009 	beq	114414 <lwip_getsockopt_impl+0x1b4>
  1143ec:	e51b300c 	ldr	r3, [fp, #-12]
  1143f0:	e5933000 	ldr	r3, [r3]
  1143f4:	e5933008 	ldr	r3, [r3, #8]
  1143f8:	e5933014 	ldr	r3, [r3, #20]
  1143fc:	e3530001 	cmp	r3, #1
  114400:	1a000003 	bne	114414 <lwip_getsockopt_impl+0x1b4>
        *(int*)optval = 1;
  114404:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114408:	e3a02001 	mov	r2, #1
  11440c:	e5832000 	str	r2, [r3]
      } else {
        *(int*)optval = 0;
      }
      break;
  114410:	ea0000ff 	b	114814 <lwip_getsockopt_impl+0x5b4>
        *(int*)optval = 0;
  114414:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114418:	e3a02000 	mov	r2, #0
  11441c:	e5832000 	str	r2, [r3]
      break;
  114420:	ea0000fb 	b	114814 <lwip_getsockopt_impl+0x5b4>
    case SO_BROADCAST:
    case SO_KEEPALIVE:
#if SO_REUSE
    case SO_REUSEADDR:
#endif /* SO_REUSE */
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, int);
  114424:	e59b3004 	ldr	r3, [fp, #4]
  114428:	e5933000 	ldr	r3, [r3]
  11442c:	e3530003 	cmp	r3, #3
  114430:	8a000001 	bhi	11443c <lwip_getsockopt_impl+0x1dc>
  114434:	e3a03016 	mov	r3, #22
  114438:	ea000204 	b	114c50 <lwip_getsockopt_impl+0x9f0>
  11443c:	e51b300c 	ldr	r3, [fp, #-12]
  114440:	e5933000 	ldr	r3, [r3]
  114444:	e3530000 	cmp	r3, #0
  114448:	0a000004 	beq	114460 <lwip_getsockopt_impl+0x200>
  11444c:	e51b300c 	ldr	r3, [fp, #-12]
  114450:	e5933000 	ldr	r3, [r3]
  114454:	e5933008 	ldr	r3, [r3, #8]
  114458:	e3530000 	cmp	r3, #0
  11445c:	1a000001 	bne	114468 <lwip_getsockopt_impl+0x208>
  114460:	e3a03016 	mov	r3, #22
  114464:	ea0001f9 	b	114c50 <lwip_getsockopt_impl+0x9f0>
      *(int*)optval = ip_get_option(sock->conn->pcb.ip, optname);
  114468:	e51b300c 	ldr	r3, [fp, #-12]
  11446c:	e5933000 	ldr	r3, [r3]
  114470:	e5933008 	ldr	r3, [r3, #8]
  114474:	e5d33008 	ldrb	r3, [r3, #8]
  114478:	e1a02003 	mov	r2, r3
  11447c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  114480:	e0022003 	and	r2, r2, r3
  114484:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114488:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, SOL_SOCKET, optname=0x%x, ..) = %s\n",
                                  s, optname, (*(int*)optval?"on":"off")));
      break;
  11448c:	ea0000e0 	b	114814 <lwip_getsockopt_impl+0x5b4>

    case SO_TYPE:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, *optlen, int);
  114490:	e59b3004 	ldr	r3, [fp, #4]
  114494:	e5933000 	ldr	r3, [r3]
  114498:	e3530003 	cmp	r3, #3
  11449c:	8a000001 	bhi	1144a8 <lwip_getsockopt_impl+0x248>
  1144a0:	e3a03016 	mov	r3, #22
  1144a4:	ea0001e9 	b	114c50 <lwip_getsockopt_impl+0x9f0>
  1144a8:	e51b300c 	ldr	r3, [fp, #-12]
  1144ac:	e5933000 	ldr	r3, [r3]
  1144b0:	e3530000 	cmp	r3, #0
  1144b4:	1a000001 	bne	1144c0 <lwip_getsockopt_impl+0x260>
  1144b8:	e3a03016 	mov	r3, #22
  1144bc:	ea0001e3 	b	114c50 <lwip_getsockopt_impl+0x9f0>
      switch (NETCONNTYPE_GROUP(netconn_type(sock->conn))) {
  1144c0:	e51b300c 	ldr	r3, [fp, #-12]
  1144c4:	e5933000 	ldr	r3, [r3]
  1144c8:	e5933000 	ldr	r3, [r3]
  1144cc:	e20330f0 	and	r3, r3, #240	; 0xf0
  1144d0:	e3530020 	cmp	r3, #32
  1144d4:	0a00000c 	beq	11450c <lwip_getsockopt_impl+0x2ac>
  1144d8:	e3530040 	cmp	r3, #64	; 0x40
  1144dc:	0a000002 	beq	1144ec <lwip_getsockopt_impl+0x28c>
  1144e0:	e3530010 	cmp	r3, #16
  1144e4:	0a000004 	beq	1144fc <lwip_getsockopt_impl+0x29c>
  1144e8:	ea00000b 	b	11451c <lwip_getsockopt_impl+0x2bc>
      case NETCONN_RAW:
        *(int*)optval = SOCK_RAW;
  1144ec:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1144f0:	e3a02003 	mov	r2, #3
  1144f4:	e5832000 	str	r2, [r3]
        break;
  1144f8:	ea00000e 	b	114538 <lwip_getsockopt_impl+0x2d8>
      case NETCONN_TCP:
        *(int*)optval = SOCK_STREAM;
  1144fc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114500:	e3a02001 	mov	r2, #1
  114504:	e5832000 	str	r2, [r3]
        break;
  114508:	ea00000a 	b	114538 <lwip_getsockopt_impl+0x2d8>
      case NETCONN_UDP:
        *(int*)optval = SOCK_DGRAM;
  11450c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114510:	e3a02002 	mov	r2, #2
  114514:	e5832000 	str	r2, [r3]
        break;
  114518:	ea000006 	b	114538 <lwip_getsockopt_impl+0x2d8>
      default: /* unrecognized socket type */
        *(int*)optval = netconn_type(sock->conn);
  11451c:	e51b300c 	ldr	r3, [fp, #-12]
  114520:	e5933000 	ldr	r3, [r3]
  114524:	e5933000 	ldr	r3, [r3]
  114528:	e1a02003 	mov	r2, r3
  11452c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114530:	e5832000 	str	r2, [r3]
                    ("lwip_getsockopt(%d, SOL_SOCKET, SO_TYPE): unrecognized socket type %d\n",
                    s, *(int *)optval));
      }  /* switch (netconn_type(sock->conn)) */
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, SOL_SOCKET, SO_TYPE) = %d\n",
                  s, *(int *)optval));
      break;
  114534:	ea0000b6 	b	114814 <lwip_getsockopt_impl+0x5b4>
  114538:	ea0000b5 	b	114814 <lwip_getsockopt_impl+0x5b4>

    case SO_ERROR:
      LWIP_SOCKOPT_CHECK_OPTLEN(*optlen, int);
  11453c:	e59b3004 	ldr	r3, [fp, #4]
  114540:	e5933000 	ldr	r3, [r3]
  114544:	e3530003 	cmp	r3, #3
  114548:	8a000001 	bhi	114554 <lwip_getsockopt_impl+0x2f4>
  11454c:	e3a03016 	mov	r3, #22
  114550:	ea0001be 	b	114c50 <lwip_getsockopt_impl+0x9f0>
      /* only overwrite ERR_OK or temporary errors */
      if (((sock->err == 0) || (sock->err == EINPROGRESS)) && (sock->conn != NULL)) {
  114554:	e51b300c 	ldr	r3, [fp, #-12]
  114558:	e5d33010 	ldrb	r3, [r3, #16]
  11455c:	e3530000 	cmp	r3, #0
  114560:	0a000003 	beq	114574 <lwip_getsockopt_impl+0x314>
  114564:	e51b300c 	ldr	r3, [fp, #-12]
  114568:	e5d33010 	ldrb	r3, [r3, #16]
  11456c:	e3530073 	cmp	r3, #115	; 0x73
  114570:	1a000014 	bne	1145c8 <lwip_getsockopt_impl+0x368>
  114574:	e51b300c 	ldr	r3, [fp, #-12]
  114578:	e5933000 	ldr	r3, [r3]
  11457c:	e3530000 	cmp	r3, #0
  114580:	0a000010 	beq	1145c8 <lwip_getsockopt_impl+0x368>
        sock_set_errno(sock, err_to_errno(sock->conn->last_err));
  114584:	e51b300c 	ldr	r3, [fp, #-12]
  114588:	e5933000 	ldr	r3, [r3]
  11458c:	e1d330dc 	ldrsb	r3, [r3, #12]
  114590:	e1a00003 	mov	r0, r3
  114594:	ebffee39 	bl	10fe80 <err_to_errno>
  114598:	e50b0010 	str	r0, [fp, #-16]
  11459c:	e51b3010 	ldr	r3, [fp, #-16]
  1145a0:	e6ef2073 	uxtb	r2, r3
  1145a4:	e51b300c 	ldr	r3, [fp, #-12]
  1145a8:	e5c32010 	strb	r2, [r3, #16]
  1145ac:	e51b3010 	ldr	r3, [fp, #-16]
  1145b0:	e3530000 	cmp	r3, #0
  1145b4:	0a000003 	beq	1145c8 <lwip_getsockopt_impl+0x368>
  1145b8:	eb009247 	bl	138edc <__errno_location>
  1145bc:	e1a02000 	mov	r2, r0
  1145c0:	e51b3010 	ldr	r3, [fp, #-16]
  1145c4:	e5823000 	str	r3, [r2]
      }
      *(int *)optval = (sock->err == 0xFF ? (int)-1 : (int)sock->err);
  1145c8:	e51b300c 	ldr	r3, [fp, #-12]
  1145cc:	e5d33010 	ldrb	r3, [r3, #16]
  1145d0:	e35300ff 	cmp	r3, #255	; 0xff
  1145d4:	0a000003 	beq	1145e8 <lwip_getsockopt_impl+0x388>
  1145d8:	e51b300c 	ldr	r3, [fp, #-12]
  1145dc:	e5d33010 	ldrb	r3, [r3, #16]
  1145e0:	e1a02003 	mov	r2, r3
  1145e4:	ea000000 	b	1145ec <lwip_getsockopt_impl+0x38c>
  1145e8:	e3e02000 	mvn	r2, #0
  1145ec:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1145f0:	e5832000 	str	r2, [r3]
      sock->err = 0;
  1145f4:	e51b300c 	ldr	r3, [fp, #-12]
  1145f8:	e3a02000 	mov	r2, #0
  1145fc:	e5c32010 	strb	r2, [r3, #16]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, SOL_SOCKET, SO_ERROR) = %d\n",
                  s, *(int *)optval));
      break;
  114600:	ea000083 	b	114814 <lwip_getsockopt_impl+0x5b4>

#if LWIP_SO_SNDTIMEO
    case SO_SNDTIMEO:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, *optlen, LWIP_SO_SNDRCVTIMEO_OPTTYPE);
  114604:	e59b3004 	ldr	r3, [fp, #4]
  114608:	e5933000 	ldr	r3, [r3]
  11460c:	e353000f 	cmp	r3, #15
  114610:	8a000001 	bhi	11461c <lwip_getsockopt_impl+0x3bc>
  114614:	e3a03016 	mov	r3, #22
  114618:	ea00018c 	b	114c50 <lwip_getsockopt_impl+0x9f0>
  11461c:	e51b300c 	ldr	r3, [fp, #-12]
  114620:	e5933000 	ldr	r3, [r3]
  114624:	e3530000 	cmp	r3, #0
  114628:	1a000001 	bne	114634 <lwip_getsockopt_impl+0x3d4>
  11462c:	e3a03016 	mov	r3, #22
  114630:	ea000186 	b	114c50 <lwip_getsockopt_impl+0x9f0>
      LWIP_SO_SNDRCVTIMEO_SET(optval, netconn_get_sendtimeout(sock->conn));
  114634:	e51b300c 	ldr	r3, [fp, #-12]
  114638:	e5933000 	ldr	r3, [r3]
  11463c:	e5933020 	ldr	r3, [r3, #32]
  114640:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  114644:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  114648:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  11464c:	e3413062 	movt	r3, #4194	; 0x1062
  114650:	e0832392 	umull	r2, r3, r2, r3
  114654:	e1a03323 	lsr	r3, r3, #6
  114658:	e1a02003 	mov	r2, r3
  11465c:	e3a03000 	mov	r3, #0
  114660:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  114664:	e1c120f0 	strd	r2, [r1]
  114668:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11466c:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  114670:	e3413062 	movt	r3, #4194	; 0x1062
  114674:	e0832391 	umull	r2, r3, r1, r3
  114678:	e1a03323 	lsr	r3, r3, #6
  11467c:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  114680:	e0030392 	mul	r3, r2, r3
  114684:	e0413003 	sub	r3, r1, r3
  114688:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  11468c:	e0030392 	mul	r3, r2, r3
  114690:	e1a02003 	mov	r2, r3
  114694:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114698:	e5832008 	str	r2, [r3, #8]
      break;
  11469c:	ea00005c 	b	114814 <lwip_getsockopt_impl+0x5b4>
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
    case SO_RCVTIMEO:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, *optlen, LWIP_SO_SNDRCVTIMEO_OPTTYPE);
  1146a0:	e59b3004 	ldr	r3, [fp, #4]
  1146a4:	e5933000 	ldr	r3, [r3]
  1146a8:	e353000f 	cmp	r3, #15
  1146ac:	8a000001 	bhi	1146b8 <lwip_getsockopt_impl+0x458>
  1146b0:	e3a03016 	mov	r3, #22
  1146b4:	ea000165 	b	114c50 <lwip_getsockopt_impl+0x9f0>
  1146b8:	e51b300c 	ldr	r3, [fp, #-12]
  1146bc:	e5933000 	ldr	r3, [r3]
  1146c0:	e3530000 	cmp	r3, #0
  1146c4:	1a000001 	bne	1146d0 <lwip_getsockopt_impl+0x470>
  1146c8:	e3a03016 	mov	r3, #22
  1146cc:	ea00015f 	b	114c50 <lwip_getsockopt_impl+0x9f0>
      LWIP_SO_SNDRCVTIMEO_SET(optval, netconn_get_recvtimeout(sock->conn));
  1146d0:	e51b300c 	ldr	r3, [fp, #-12]
  1146d4:	e5933000 	ldr	r3, [r3]
  1146d8:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  1146dc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1146e0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1146e4:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  1146e8:	e3413062 	movt	r3, #4194	; 0x1062
  1146ec:	e0832392 	umull	r2, r3, r2, r3
  1146f0:	e1a03323 	lsr	r3, r3, #6
  1146f4:	e1a02003 	mov	r2, r3
  1146f8:	e3a03000 	mov	r3, #0
  1146fc:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  114700:	e1c120f0 	strd	r2, [r1]
  114704:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  114708:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  11470c:	e3413062 	movt	r3, #4194	; 0x1062
  114710:	e0832391 	umull	r2, r3, r1, r3
  114714:	e1a03323 	lsr	r3, r3, #6
  114718:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  11471c:	e0030392 	mul	r3, r2, r3
  114720:	e0413003 	sub	r3, r1, r3
  114724:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  114728:	e0030392 	mul	r3, r2, r3
  11472c:	e1a02003 	mov	r2, r3
  114730:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114734:	e5832008 	str	r2, [r3, #8]
      break;
  114738:	ea000035 	b	114814 <lwip_getsockopt_impl+0x5b4>
#endif /* LWIP_SO_RCVTIMEO */
#if LWIP_SO_RCVBUF
    case SO_RCVBUF:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, *optlen, int);
  11473c:	e59b3004 	ldr	r3, [fp, #4]
  114740:	e5933000 	ldr	r3, [r3]
  114744:	e3530003 	cmp	r3, #3
  114748:	8a000001 	bhi	114754 <lwip_getsockopt_impl+0x4f4>
  11474c:	e3a03016 	mov	r3, #22
  114750:	ea00013e 	b	114c50 <lwip_getsockopt_impl+0x9f0>
  114754:	e51b300c 	ldr	r3, [fp, #-12]
  114758:	e5933000 	ldr	r3, [r3]
  11475c:	e3530000 	cmp	r3, #0
  114760:	1a000001 	bne	11476c <lwip_getsockopt_impl+0x50c>
  114764:	e3a03016 	mov	r3, #22
  114768:	ea000138 	b	114c50 <lwip_getsockopt_impl+0x9f0>
      *(int *)optval = netconn_get_recvbufsize(sock->conn);
  11476c:	e51b300c 	ldr	r3, [fp, #-12]
  114770:	e5933000 	ldr	r3, [r3]
  114774:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  114778:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11477c:	e5832000 	str	r2, [r3]
      break;
  114780:	ea000023 	b	114814 <lwip_getsockopt_impl+0x5b4>
      }
      break;
#endif /* LWIP_SO_LINGER */
#if LWIP_UDP
    case SO_NO_CHECK:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, *optlen, int, NETCONN_UDP);
  114784:	e59b3004 	ldr	r3, [fp, #4]
  114788:	e5933000 	ldr	r3, [r3]
  11478c:	e3530003 	cmp	r3, #3
  114790:	8a000001 	bhi	11479c <lwip_getsockopt_impl+0x53c>
  114794:	e3a03016 	mov	r3, #22
  114798:	ea00012c 	b	114c50 <lwip_getsockopt_impl+0x9f0>
  11479c:	e51b300c 	ldr	r3, [fp, #-12]
  1147a0:	e5933000 	ldr	r3, [r3]
  1147a4:	e3530000 	cmp	r3, #0
  1147a8:	0a000004 	beq	1147c0 <lwip_getsockopt_impl+0x560>
  1147ac:	e51b300c 	ldr	r3, [fp, #-12]
  1147b0:	e5933000 	ldr	r3, [r3]
  1147b4:	e5933008 	ldr	r3, [r3, #8]
  1147b8:	e3530000 	cmp	r3, #0
  1147bc:	1a000001 	bne	1147c8 <lwip_getsockopt_impl+0x568>
  1147c0:	e3a03016 	mov	r3, #22
  1147c4:	ea000121 	b	114c50 <lwip_getsockopt_impl+0x9f0>
  1147c8:	e51b300c 	ldr	r3, [fp, #-12]
  1147cc:	e5933000 	ldr	r3, [r3]
  1147d0:	e5933000 	ldr	r3, [r3]
  1147d4:	e20330f0 	and	r3, r3, #240	; 0xf0
  1147d8:	e3530020 	cmp	r3, #32
  1147dc:	0a000001 	beq	1147e8 <lwip_getsockopt_impl+0x588>
  1147e0:	e3a0305c 	mov	r3, #92	; 0x5c
  1147e4:	ea000119 	b	114c50 <lwip_getsockopt_impl+0x9f0>
      if ((udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_UDPLITE) != 0) {
        /* this flag is only available for UDP, not for UDP lite */
        return EAFNOSUPPORT;
      }
#endif /* LWIP_UDPLITE */
      *(int*)optval = (udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_NOCHKSUM) ? 1 : 0;
  1147e8:	e51b300c 	ldr	r3, [fp, #-12]
  1147ec:	e5933000 	ldr	r3, [r3]
  1147f0:	e5933008 	ldr	r3, [r3, #8]
  1147f4:	e5d33010 	ldrb	r3, [r3, #16]
  1147f8:	e2032001 	and	r2, r3, #1
  1147fc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114800:	e5832000 	str	r2, [r3]
      break;
  114804:	ea000002 	b	114814 <lwip_getsockopt_impl+0x5b4>
#endif /* LWIP_UDP*/
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, SOL_SOCKET, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
  114808:	e3a0305c 	mov	r3, #92	; 0x5c
  11480c:	e54b3005 	strb	r3, [fp, #-5]
      break;
  114810:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  114814:	ea00010c 	b	114c4c <lwip_getsockopt_impl+0x9ec>

/* Level: IPPROTO_IP */
  case IPPROTO_IP:
    switch (optname) {
  114818:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11481c:	e2433001 	sub	r3, r3, #1
  114820:	e3530006 	cmp	r3, #6
  114824:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  114828:	ea000098 	b	114a90 <lwip_getsockopt_impl+0x830>
  11482c:	001148ac 	.word	0x001148ac
  114830:	00114848 	.word	0x00114848
  114834:	00114a90 	.word	0x00114a90
  114838:	00114a90 	.word	0x00114a90
  11483c:	00114910 	.word	0x00114910
  114840:	00114990 	.word	0x00114990
  114844:	00114a10 	.word	0x00114a10
    case IP_TTL:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, int);
  114848:	e59b3004 	ldr	r3, [fp, #4]
  11484c:	e5933000 	ldr	r3, [r3]
  114850:	e3530003 	cmp	r3, #3
  114854:	8a000001 	bhi	114860 <lwip_getsockopt_impl+0x600>
  114858:	e3a03016 	mov	r3, #22
  11485c:	ea0000fb 	b	114c50 <lwip_getsockopt_impl+0x9f0>
  114860:	e51b300c 	ldr	r3, [fp, #-12]
  114864:	e5933000 	ldr	r3, [r3]
  114868:	e3530000 	cmp	r3, #0
  11486c:	0a000004 	beq	114884 <lwip_getsockopt_impl+0x624>
  114870:	e51b300c 	ldr	r3, [fp, #-12]
  114874:	e5933000 	ldr	r3, [r3]
  114878:	e5933008 	ldr	r3, [r3, #8]
  11487c:	e3530000 	cmp	r3, #0
  114880:	1a000001 	bne	11488c <lwip_getsockopt_impl+0x62c>
  114884:	e3a03016 	mov	r3, #22
  114888:	ea0000f0 	b	114c50 <lwip_getsockopt_impl+0x9f0>
      *(int*)optval = sock->conn->pcb.ip->ttl;
  11488c:	e51b300c 	ldr	r3, [fp, #-12]
  114890:	e5933000 	ldr	r3, [r3]
  114894:	e5933008 	ldr	r3, [r3, #8]
  114898:	e5d3300a 	ldrb	r3, [r3, #10]
  11489c:	e1a02003 	mov	r2, r3
  1148a0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1148a4:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, IP_TTL) = %d\n",
                  s, *(int *)optval));
      break;
  1148a8:	ea00007b 	b	114a9c <lwip_getsockopt_impl+0x83c>
    case IP_TOS:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, int);
  1148ac:	e59b3004 	ldr	r3, [fp, #4]
  1148b0:	e5933000 	ldr	r3, [r3]
  1148b4:	e3530003 	cmp	r3, #3
  1148b8:	8a000001 	bhi	1148c4 <lwip_getsockopt_impl+0x664>
  1148bc:	e3a03016 	mov	r3, #22
  1148c0:	ea0000e2 	b	114c50 <lwip_getsockopt_impl+0x9f0>
  1148c4:	e51b300c 	ldr	r3, [fp, #-12]
  1148c8:	e5933000 	ldr	r3, [r3]
  1148cc:	e3530000 	cmp	r3, #0
  1148d0:	0a000004 	beq	1148e8 <lwip_getsockopt_impl+0x688>
  1148d4:	e51b300c 	ldr	r3, [fp, #-12]
  1148d8:	e5933000 	ldr	r3, [r3]
  1148dc:	e5933008 	ldr	r3, [r3, #8]
  1148e0:	e3530000 	cmp	r3, #0
  1148e4:	1a000001 	bne	1148f0 <lwip_getsockopt_impl+0x690>
  1148e8:	e3a03016 	mov	r3, #22
  1148ec:	ea0000d7 	b	114c50 <lwip_getsockopt_impl+0x9f0>
      *(int*)optval = sock->conn->pcb.ip->tos;
  1148f0:	e51b300c 	ldr	r3, [fp, #-12]
  1148f4:	e5933000 	ldr	r3, [r3]
  1148f8:	e5933008 	ldr	r3, [r3, #8]
  1148fc:	e5d33009 	ldrb	r3, [r3, #9]
  114900:	e1a02003 	mov	r2, r3
  114904:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114908:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, IP_TOS) = %d\n",
                  s, *(int *)optval));
      break;
  11490c:	ea000062 	b	114a9c <lwip_getsockopt_impl+0x83c>
#if LWIP_MULTICAST_TX_OPTIONS
    case IP_MULTICAST_TTL:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, u8_t);
  114910:	e59b3004 	ldr	r3, [fp, #4]
  114914:	e5933000 	ldr	r3, [r3]
  114918:	e3530000 	cmp	r3, #0
  11491c:	1a000001 	bne	114928 <lwip_getsockopt_impl+0x6c8>
  114920:	e3a03016 	mov	r3, #22
  114924:	ea0000c9 	b	114c50 <lwip_getsockopt_impl+0x9f0>
  114928:	e51b300c 	ldr	r3, [fp, #-12]
  11492c:	e5933000 	ldr	r3, [r3]
  114930:	e3530000 	cmp	r3, #0
  114934:	0a000004 	beq	11494c <lwip_getsockopt_impl+0x6ec>
  114938:	e51b300c 	ldr	r3, [fp, #-12]
  11493c:	e5933000 	ldr	r3, [r3]
  114940:	e5933008 	ldr	r3, [r3, #8]
  114944:	e3530000 	cmp	r3, #0
  114948:	1a000001 	bne	114954 <lwip_getsockopt_impl+0x6f4>
  11494c:	e3a03016 	mov	r3, #22
  114950:	ea0000be 	b	114c50 <lwip_getsockopt_impl+0x9f0>
      if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_UDP) {
  114954:	e51b300c 	ldr	r3, [fp, #-12]
  114958:	e5933000 	ldr	r3, [r3]
  11495c:	e5933000 	ldr	r3, [r3]
  114960:	e20330f0 	and	r3, r3, #240	; 0xf0
  114964:	e3530020 	cmp	r3, #32
  114968:	0a000001 	beq	114974 <lwip_getsockopt_impl+0x714>
        return ENOPROTOOPT;
  11496c:	e3a0305c 	mov	r3, #92	; 0x5c
  114970:	ea0000b6 	b	114c50 <lwip_getsockopt_impl+0x9f0>
      }
      *(u8_t*)optval = udp_get_multicast_ttl(sock->conn->pcb.udp);
  114974:	e51b300c 	ldr	r3, [fp, #-12]
  114978:	e5933000 	ldr	r3, [r3]
  11497c:	e5933008 	ldr	r3, [r3, #8]
  114980:	e5d3201c 	ldrb	r2, [r3, #28]
  114984:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114988:	e5c32000 	strb	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, IP_MULTICAST_TTL) = %d\n",
                  s, *(int *)optval));
      break;
  11498c:	ea000042 	b	114a9c <lwip_getsockopt_impl+0x83c>
    case IP_MULTICAST_IF:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, struct in_addr);
  114990:	e59b3004 	ldr	r3, [fp, #4]
  114994:	e5933000 	ldr	r3, [r3]
  114998:	e3530003 	cmp	r3, #3
  11499c:	8a000001 	bhi	1149a8 <lwip_getsockopt_impl+0x748>
  1149a0:	e3a03016 	mov	r3, #22
  1149a4:	ea0000a9 	b	114c50 <lwip_getsockopt_impl+0x9f0>
  1149a8:	e51b300c 	ldr	r3, [fp, #-12]
  1149ac:	e5933000 	ldr	r3, [r3]
  1149b0:	e3530000 	cmp	r3, #0
  1149b4:	0a000004 	beq	1149cc <lwip_getsockopt_impl+0x76c>
  1149b8:	e51b300c 	ldr	r3, [fp, #-12]
  1149bc:	e5933000 	ldr	r3, [r3]
  1149c0:	e5933008 	ldr	r3, [r3, #8]
  1149c4:	e3530000 	cmp	r3, #0
  1149c8:	1a000001 	bne	1149d4 <lwip_getsockopt_impl+0x774>
  1149cc:	e3a03016 	mov	r3, #22
  1149d0:	ea00009e 	b	114c50 <lwip_getsockopt_impl+0x9f0>
      if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_UDP) {
  1149d4:	e51b300c 	ldr	r3, [fp, #-12]
  1149d8:	e5933000 	ldr	r3, [r3]
  1149dc:	e5933000 	ldr	r3, [r3]
  1149e0:	e20330f0 	and	r3, r3, #240	; 0xf0
  1149e4:	e3530020 	cmp	r3, #32
  1149e8:	0a000001 	beq	1149f4 <lwip_getsockopt_impl+0x794>
        return ENOPROTOOPT;
  1149ec:	e3a0305c 	mov	r3, #92	; 0x5c
  1149f0:	ea000096 	b	114c50 <lwip_getsockopt_impl+0x9f0>
      }
      inet_addr_from_ip4addr((struct in_addr*)optval, udp_get_multicast_netif_addr(sock->conn->pcb.udp));
  1149f4:	e51b300c 	ldr	r3, [fp, #-12]
  1149f8:	e5933000 	ldr	r3, [r3]
  1149fc:	e5933008 	ldr	r3, [r3, #8]
  114a00:	e5932018 	ldr	r2, [r3, #24]
  114a04:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114a08:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, IP_MULTICAST_IF) = 0x%"X32_F"\n",
                  s, *(u32_t *)optval));
      break;
  114a0c:	ea000022 	b	114a9c <lwip_getsockopt_impl+0x83c>
    case IP_MULTICAST_LOOP:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, u8_t);
  114a10:	e59b3004 	ldr	r3, [fp, #4]
  114a14:	e5933000 	ldr	r3, [r3]
  114a18:	e3530000 	cmp	r3, #0
  114a1c:	1a000001 	bne	114a28 <lwip_getsockopt_impl+0x7c8>
  114a20:	e3a03016 	mov	r3, #22
  114a24:	ea000089 	b	114c50 <lwip_getsockopt_impl+0x9f0>
  114a28:	e51b300c 	ldr	r3, [fp, #-12]
  114a2c:	e5933000 	ldr	r3, [r3]
  114a30:	e3530000 	cmp	r3, #0
  114a34:	0a000004 	beq	114a4c <lwip_getsockopt_impl+0x7ec>
  114a38:	e51b300c 	ldr	r3, [fp, #-12]
  114a3c:	e5933000 	ldr	r3, [r3]
  114a40:	e5933008 	ldr	r3, [r3, #8]
  114a44:	e3530000 	cmp	r3, #0
  114a48:	1a000001 	bne	114a54 <lwip_getsockopt_impl+0x7f4>
  114a4c:	e3a03016 	mov	r3, #22
  114a50:	ea00007e 	b	114c50 <lwip_getsockopt_impl+0x9f0>
      if ((sock->conn->pcb.udp->flags & UDP_FLAGS_MULTICAST_LOOP) != 0) {
  114a54:	e51b300c 	ldr	r3, [fp, #-12]
  114a58:	e5933000 	ldr	r3, [r3]
  114a5c:	e5933008 	ldr	r3, [r3, #8]
  114a60:	e5d33010 	ldrb	r3, [r3, #16]
  114a64:	e2033008 	and	r3, r3, #8
  114a68:	e3530000 	cmp	r3, #0
  114a6c:	0a000003 	beq	114a80 <lwip_getsockopt_impl+0x820>
        *(u8_t*)optval = 1;
  114a70:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114a74:	e3a02001 	mov	r2, #1
  114a78:	e5c32000 	strb	r2, [r3]
      } else {
        *(u8_t*)optval = 0;
      }
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, IP_MULTICAST_LOOP) = %d\n",
                  s, *(int *)optval));
      break;
  114a7c:	ea000006 	b	114a9c <lwip_getsockopt_impl+0x83c>
        *(u8_t*)optval = 0;
  114a80:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114a84:	e3a02000 	mov	r2, #0
  114a88:	e5c32000 	strb	r2, [r3]
      break;
  114a8c:	ea000002 	b	114a9c <lwip_getsockopt_impl+0x83c>
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
  114a90:	e3a0305c 	mov	r3, #92	; 0x5c
  114a94:	e54b3005 	strb	r3, [fp, #-5]
      break;
  114a98:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  114a9c:	ea00006a 	b	114c4c <lwip_getsockopt_impl+0x9ec>

#if LWIP_TCP
/* Level: IPPROTO_TCP */
  case IPPROTO_TCP:
    /* Special case: all IPPROTO_TCP option take an int */
    LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, *optlen, int, NETCONN_TCP);
  114aa0:	e59b3004 	ldr	r3, [fp, #4]
  114aa4:	e5933000 	ldr	r3, [r3]
  114aa8:	e3530003 	cmp	r3, #3
  114aac:	8a000001 	bhi	114ab8 <lwip_getsockopt_impl+0x858>
  114ab0:	e3a03016 	mov	r3, #22
  114ab4:	ea000065 	b	114c50 <lwip_getsockopt_impl+0x9f0>
  114ab8:	e51b300c 	ldr	r3, [fp, #-12]
  114abc:	e5933000 	ldr	r3, [r3]
  114ac0:	e3530000 	cmp	r3, #0
  114ac4:	0a000004 	beq	114adc <lwip_getsockopt_impl+0x87c>
  114ac8:	e51b300c 	ldr	r3, [fp, #-12]
  114acc:	e5933000 	ldr	r3, [r3]
  114ad0:	e5933008 	ldr	r3, [r3, #8]
  114ad4:	e3530000 	cmp	r3, #0
  114ad8:	1a000001 	bne	114ae4 <lwip_getsockopt_impl+0x884>
  114adc:	e3a03016 	mov	r3, #22
  114ae0:	ea00005a 	b	114c50 <lwip_getsockopt_impl+0x9f0>
  114ae4:	e51b300c 	ldr	r3, [fp, #-12]
  114ae8:	e5933000 	ldr	r3, [r3]
  114aec:	e5933000 	ldr	r3, [r3]
  114af0:	e20330f0 	and	r3, r3, #240	; 0xf0
  114af4:	e3530010 	cmp	r3, #16
  114af8:	0a000001 	beq	114b04 <lwip_getsockopt_impl+0x8a4>
  114afc:	e3a0305c 	mov	r3, #92	; 0x5c
  114b00:	ea000052 	b	114c50 <lwip_getsockopt_impl+0x9f0>
    if (sock->conn->pcb.tcp->state == LISTEN) {
  114b04:	e51b300c 	ldr	r3, [fp, #-12]
  114b08:	e5933000 	ldr	r3, [r3]
  114b0c:	e5933008 	ldr	r3, [r3, #8]
  114b10:	e5933014 	ldr	r3, [r3, #20]
  114b14:	e3530001 	cmp	r3, #1
  114b18:	1a000001 	bne	114b24 <lwip_getsockopt_impl+0x8c4>
      return EINVAL;
  114b1c:	e3a03016 	mov	r3, #22
  114b20:	ea00004a 	b	114c50 <lwip_getsockopt_impl+0x9f0>
    }
    switch (optname) {
  114b24:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  114b28:	e2433001 	sub	r3, r3, #1
  114b2c:	e3530004 	cmp	r3, #4
  114b30:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  114b34:	ea000039 	b	114c20 <lwip_getsockopt_impl+0x9c0>
  114b38:	00114b4c 	.word	0x00114b4c
  114b3c:	00114b80 	.word	0x00114b80
  114b40:	00114ba0 	.word	0x00114ba0
  114b44:	00114bd0 	.word	0x00114bd0
  114b48:	00114c00 	.word	0x00114c00
    case TCP_NODELAY:
      *(int*)optval = tcp_nagle_disabled(sock->conn->pcb.tcp);
  114b4c:	e51b300c 	ldr	r3, [fp, #-12]
  114b50:	e5933000 	ldr	r3, [r3]
  114b54:	e5933008 	ldr	r3, [r3, #8]
  114b58:	e5d3301e 	ldrb	r3, [r3, #30]
  114b5c:	e2033040 	and	r3, r3, #64	; 0x40
  114b60:	e3530000 	cmp	r3, #0
  114b64:	13a03001 	movne	r3, #1
  114b68:	03a03000 	moveq	r3, #0
  114b6c:	e6ef3073 	uxtb	r3, r3
  114b70:	e1a02003 	mov	r2, r3
  114b74:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114b78:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, TCP_NODELAY) = %s\n",
                  s, (*(int*)optval)?"on":"off") );
      break;
  114b7c:	ea00002a 	b	114c2c <lwip_getsockopt_impl+0x9cc>
    case TCP_KEEPALIVE:
      *(int*)optval = (int)sock->conn->pcb.tcp->keep_idle;
  114b80:	e51b300c 	ldr	r3, [fp, #-12]
  114b84:	e5933000 	ldr	r3, [r3]
  114b88:	e5933008 	ldr	r3, [r3, #8]
  114b8c:	e5933094 	ldr	r3, [r3, #148]	; 0x94
  114b90:	e1a02003 	mov	r2, r3
  114b94:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114b98:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, TCP_KEEPALIVE) = %d\n",
                  s, *(int *)optval));
      break;
  114b9c:	ea000022 	b	114c2c <lwip_getsockopt_impl+0x9cc>

#if LWIP_TCP_KEEPALIVE
    case TCP_KEEPIDLE:
      *(int*)optval = (int)(sock->conn->pcb.tcp->keep_idle/1000);
  114ba0:	e51b300c 	ldr	r3, [fp, #-12]
  114ba4:	e5933000 	ldr	r3, [r3]
  114ba8:	e5933008 	ldr	r3, [r3, #8]
  114bac:	e5932094 	ldr	r2, [r3, #148]	; 0x94
  114bb0:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  114bb4:	e3413062 	movt	r3, #4194	; 0x1062
  114bb8:	e0832392 	umull	r2, r3, r2, r3
  114bbc:	e1a03323 	lsr	r3, r3, #6
  114bc0:	e1a02003 	mov	r2, r3
  114bc4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114bc8:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, TCP_KEEPIDLE) = %d\n",
                  s, *(int *)optval));
      break;
  114bcc:	ea000016 	b	114c2c <lwip_getsockopt_impl+0x9cc>
    case TCP_KEEPINTVL:
      *(int*)optval = (int)(sock->conn->pcb.tcp->keep_intvl/1000);
  114bd0:	e51b300c 	ldr	r3, [fp, #-12]
  114bd4:	e5933000 	ldr	r3, [r3]
  114bd8:	e5933008 	ldr	r3, [r3, #8]
  114bdc:	e5932098 	ldr	r2, [r3, #152]	; 0x98
  114be0:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  114be4:	e3413062 	movt	r3, #4194	; 0x1062
  114be8:	e0832392 	umull	r2, r3, r2, r3
  114bec:	e1a03323 	lsr	r3, r3, #6
  114bf0:	e1a02003 	mov	r2, r3
  114bf4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114bf8:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, TCP_KEEPINTVL) = %d\n",
                  s, *(int *)optval));
      break;
  114bfc:	ea00000a 	b	114c2c <lwip_getsockopt_impl+0x9cc>
    case TCP_KEEPCNT:
      *(int*)optval = (int)sock->conn->pcb.tcp->keep_cnt;
  114c00:	e51b300c 	ldr	r3, [fp, #-12]
  114c04:	e5933000 	ldr	r3, [r3]
  114c08:	e5933008 	ldr	r3, [r3, #8]
  114c0c:	e593309c 	ldr	r3, [r3, #156]	; 0x9c
  114c10:	e1a02003 	mov	r2, r3
  114c14:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114c18:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, TCP_KEEPCNT) = %d\n",
                  s, *(int *)optval));
      break;
  114c1c:	ea000002 	b	114c2c <lwip_getsockopt_impl+0x9cc>
#endif /* LWIP_TCP_KEEPALIVE */
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
  114c20:	e3a0305c 	mov	r3, #92	; 0x5c
  114c24:	e54b3005 	strb	r3, [fp, #-5]
      break;
  114c28:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  114c2c:	ea000006 	b	114c4c <lwip_getsockopt_impl+0x9ec>
      break;
#endif /* LWIP_IPV6 && LWIP_RAW */
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_RAW, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
  114c30:	e3a0305c 	mov	r3, #92	; 0x5c
  114c34:	e54b3005 	strb	r3, [fp, #-5]
      break;
  114c38:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  114c3c:	ea000002 	b	114c4c <lwip_getsockopt_impl+0x9ec>
  default:
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, level=0x%x, UNIMPL: optname=0x%x, ..)\n",
                                s, level, optname));
    err = ENOPROTOOPT;
  114c40:	e3a0305c 	mov	r3, #92	; 0x5c
  114c44:	e54b3005 	strb	r3, [fp, #-5]
    break;
  114c48:	e320f000 	nop	{0}
  } /* switch (level) */

  return err;
  114c4c:	e55b3005 	ldrb	r3, [fp, #-5]
}
  114c50:	e1a00003 	mov	r0, r3
  114c54:	e24bd004 	sub	sp, fp, #4
  114c58:	e8bd8800 	pop	{fp, pc}

00114c5c <lwip_setsockopt>:

int
lwip_setsockopt(int s, int level, int optname, const void *optval, socklen_t optlen)
{
  114c5c:	e92d4800 	push	{fp, lr}
  114c60:	e28db004 	add	fp, sp, #4
  114c64:	e24dd028 	sub	sp, sp, #40	; 0x28
  114c68:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  114c6c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  114c70:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  114c74:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  u8_t err = 0;
  114c78:	e3a03000 	mov	r3, #0
  114c7c:	e54b3005 	strb	r3, [fp, #-5]
  struct lwip_sock *sock = get_socket(s);
  114c80:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  114c84:	ebfff0a5 	bl	110f20 <get_socket>
  114c88:	e50b000c 	str	r0, [fp, #-12]
#if !LWIP_TCPIP_CORE_LOCKING
  LWIP_SETGETSOCKOPT_DATA_VAR_DECLARE(data);
#endif /* !LWIP_TCPIP_CORE_LOCKING */

  if (!sock) {
  114c8c:	e51b300c 	ldr	r3, [fp, #-12]
  114c90:	e3530000 	cmp	r3, #0
  114c94:	1a000001 	bne	114ca0 <lwip_setsockopt+0x44>
    return -1;
  114c98:	e3e03000 	mvn	r3, #0
  114c9c:	ea000033 	b	114d70 <lwip_setsockopt+0x114>
  }

  if (NULL == optval) {
  114ca0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  114ca4:	e3530000 	cmp	r3, #0
  114ca8:	1a00000e 	bne	114ce8 <lwip_setsockopt+0x8c>
    sock_set_errno(sock, EFAULT);
  114cac:	e3a0300e 	mov	r3, #14
  114cb0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  114cb4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  114cb8:	e6ef2073 	uxtb	r2, r3
  114cbc:	e51b300c 	ldr	r3, [fp, #-12]
  114cc0:	e5c32010 	strb	r2, [r3, #16]
  114cc4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  114cc8:	e3530000 	cmp	r3, #0
  114ccc:	0a000003 	beq	114ce0 <lwip_setsockopt+0x84>
  114cd0:	eb009081 	bl	138edc <__errno_location>
  114cd4:	e1a02000 	mov	r2, r0
  114cd8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  114cdc:	e5823000 	str	r3, [r2]
    return -1;
  114ce0:	e3e03000 	mvn	r3, #0
  114ce4:	ea000021 	b	114d70 <lwip_setsockopt+0x114>
  }

#if LWIP_TCPIP_CORE_LOCKING
  /* core-locking can just call the -impl function */
  LOCK_TCPIP_CORE();
  114ce8:	e30f05f4 	movw	r0, #62964	; 0xf5f4
  114cec:	e3400014 	movt	r0, #20
  114cf0:	ebffd782 	bl	10ab00 <sys_mutex_lock>
  err = lwip_setsockopt_impl(s, level, optname, optval, optlen);
  114cf4:	e59b3004 	ldr	r3, [fp, #4]
  114cf8:	e58d3000 	str	r3, [sp]
  114cfc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  114d00:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  114d04:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  114d08:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  114d0c:	eb00001a 	bl	114d7c <lwip_setsockopt_impl>
  114d10:	e1a03000 	mov	r3, r0
  114d14:	e54b3005 	strb	r3, [fp, #-5]
  UNLOCK_TCPIP_CORE();
  114d18:	e30f05f4 	movw	r0, #62964	; 0xf5f4
  114d1c:	e3400014 	movt	r0, #20
  114d20:	ebffd782 	bl	10ab30 <sys_mutex_unlock>
  /* maybe lwip_getsockopt_internal has changed err */
  err = LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).err;
  LWIP_SETGETSOCKOPT_DATA_VAR_FREE(data);
#endif  /* LWIP_TCPIP_CORE_LOCKING */

  sock_set_errno(sock, err);
  114d24:	e55b3005 	ldrb	r3, [fp, #-5]
  114d28:	e50b3010 	str	r3, [fp, #-16]
  114d2c:	e51b3010 	ldr	r3, [fp, #-16]
  114d30:	e6ef2073 	uxtb	r2, r3
  114d34:	e51b300c 	ldr	r3, [fp, #-12]
  114d38:	e5c32010 	strb	r2, [r3, #16]
  114d3c:	e51b3010 	ldr	r3, [fp, #-16]
  114d40:	e3530000 	cmp	r3, #0
  114d44:	0a000003 	beq	114d58 <lwip_setsockopt+0xfc>
  114d48:	eb009063 	bl	138edc <__errno_location>
  114d4c:	e1a02000 	mov	r2, r0
  114d50:	e51b3010 	ldr	r3, [fp, #-16]
  114d54:	e5823000 	str	r3, [r2]
  return err ? -1 : 0;
  114d58:	e55b3005 	ldrb	r3, [fp, #-5]
  114d5c:	e3530000 	cmp	r3, #0
  114d60:	0a000001 	beq	114d6c <lwip_setsockopt+0x110>
  114d64:	e3e03000 	mvn	r3, #0
  114d68:	ea000000 	b	114d70 <lwip_setsockopt+0x114>
  114d6c:	e3a03000 	mov	r3, #0
}
  114d70:	e1a00003 	mov	r0, r3
  114d74:	e24bd004 	sub	sp, fp, #4
  114d78:	e8bd8800 	pop	{fp, pc}

00114d7c <lwip_setsockopt_impl>:
/** lwip_setsockopt_impl: the actual implementation of setsockopt:
 * same argument as lwip_setsockopt, either called directly or through callback
 */
static u8_t
lwip_setsockopt_impl(int s, int level, int optname, const void *optval, socklen_t optlen)
{
  114d7c:	e92d4800 	push	{fp, lr}
  114d80:	e28db004 	add	fp, sp, #4
  114d84:	e24dd028 	sub	sp, sp, #40	; 0x28
  114d88:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  114d8c:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  114d90:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  114d94:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  u8_t err = 0;
  114d98:	e3a03000 	mov	r3, #0
  114d9c:	e54b3005 	strb	r3, [fp, #-5]
  struct lwip_sock *sock = tryget_socket(s);
  114da0:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  114da4:	ebfff082 	bl	110fb4 <tryget_socket>
  114da8:	e50b000c 	str	r0, [fp, #-12]
  if (!sock) {
  114dac:	e51b300c 	ldr	r3, [fp, #-12]
  114db0:	e3530000 	cmp	r3, #0
  114db4:	1a000001 	bne	114dc0 <lwip_setsockopt_impl+0x44>
    return EBADF;
  114db8:	e3a03009 	mov	r3, #9
  114dbc:	ea000248 	b	1156e4 <lwip_setsockopt_impl+0x968>
  }

  switch (level) {
  114dc0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  114dc4:	e3530006 	cmp	r3, #6
  114dc8:	0a0001d3 	beq	11551c <lwip_setsockopt_impl+0x7a0>
  114dcc:	e3530006 	cmp	r3, #6
  114dd0:	ca000002 	bgt	114de0 <lwip_setsockopt_impl+0x64>
  114dd4:	e3530000 	cmp	r3, #0
  114dd8:	0a0000d2 	beq	115128 <lwip_setsockopt_impl+0x3ac>
  114ddc:	ea00023c 	b	1156d4 <lwip_setsockopt_impl+0x958>
  114de0:	e35300ff 	cmp	r3, #255	; 0xff
  114de4:	0a000236 	beq	1156c4 <lwip_setsockopt_impl+0x948>
  114de8:	e3002fff 	movw	r2, #4095	; 0xfff
  114dec:	e1530002 	cmp	r3, r2
  114df0:	1a000237 	bne	1156d4 <lwip_setsockopt_impl+0x958>

/* Level: SOL_SOCKET */
  case SOL_SOCKET:
    switch (optname) {
  114df4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  114df8:	e3012002 	movw	r2, #4098	; 0x1002
  114dfc:	e1530002 	cmp	r3, r2
  114e00:	0a000081 	beq	11500c <lwip_setsockopt_impl+0x290>
  114e04:	e3012002 	movw	r2, #4098	; 0x1002
  114e08:	e1530002 	cmp	r3, r2
  114e0c:	ca000006 	bgt	114e2c <lwip_setsockopt_impl+0xb0>
  114e10:	e3530008 	cmp	r3, #8
  114e14:	0a00000e 	beq	114e54 <lwip_setsockopt_impl+0xd8>
  114e18:	e3530020 	cmp	r3, #32
  114e1c:	0a00000c 	beq	114e54 <lwip_setsockopt_impl+0xd8>
  114e20:	e3530004 	cmp	r3, #4
  114e24:	0a00000a 	beq	114e54 <lwip_setsockopt_impl+0xd8>
  114e28:	ea0000ba 	b	115118 <lwip_setsockopt_impl+0x39c>
  114e2c:	e3012006 	movw	r2, #4102	; 0x1006
  114e30:	e1530002 	cmp	r3, r2
  114e34:	0a000057 	beq	114f98 <lwip_setsockopt_impl+0x21c>
  114e38:	e301200a 	movw	r2, #4106	; 0x100a
  114e3c:	e1530002 	cmp	r3, r2
  114e40:	0a000082 	beq	115050 <lwip_setsockopt_impl+0x2d4>
  114e44:	e3012005 	movw	r2, #4101	; 0x1005
  114e48:	e1530002 	cmp	r3, r2
  114e4c:	0a000034 	beq	114f24 <lwip_setsockopt_impl+0x1a8>
  114e50:	ea0000b0 	b	115118 <lwip_setsockopt_impl+0x39c>
    case SO_BROADCAST:
    case SO_KEEPALIVE:
#if SO_REUSE
    case SO_REUSEADDR:
#endif /* SO_REUSE */
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
  114e54:	e59b3004 	ldr	r3, [fp, #4]
  114e58:	e3530003 	cmp	r3, #3
  114e5c:	8a000001 	bhi	114e68 <lwip_setsockopt_impl+0xec>
  114e60:	e3a03016 	mov	r3, #22
  114e64:	ea00021e 	b	1156e4 <lwip_setsockopt_impl+0x968>
  114e68:	e51b300c 	ldr	r3, [fp, #-12]
  114e6c:	e5933000 	ldr	r3, [r3]
  114e70:	e3530000 	cmp	r3, #0
  114e74:	0a000004 	beq	114e8c <lwip_setsockopt_impl+0x110>
  114e78:	e51b300c 	ldr	r3, [fp, #-12]
  114e7c:	e5933000 	ldr	r3, [r3]
  114e80:	e5933008 	ldr	r3, [r3, #8]
  114e84:	e3530000 	cmp	r3, #0
  114e88:	1a000001 	bne	114e94 <lwip_setsockopt_impl+0x118>
  114e8c:	e3a03016 	mov	r3, #22
  114e90:	ea000213 	b	1156e4 <lwip_setsockopt_impl+0x968>
      if (*(const int*)optval) {
  114e94:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114e98:	e5933000 	ldr	r3, [r3]
  114e9c:	e3530000 	cmp	r3, #0
  114ea0:	0a00000e 	beq	114ee0 <lwip_setsockopt_impl+0x164>
        ip_set_option(sock->conn->pcb.ip, optname);
  114ea4:	e51b300c 	ldr	r3, [fp, #-12]
  114ea8:	e5933000 	ldr	r3, [r3]
  114eac:	e5933008 	ldr	r3, [r3, #8]
  114eb0:	e5d33008 	ldrb	r3, [r3, #8]
  114eb4:	e6af2073 	sxtb	r2, r3
  114eb8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  114ebc:	e6af3073 	sxtb	r3, r3
  114ec0:	e1823003 	orr	r3, r2, r3
  114ec4:	e6af2073 	sxtb	r2, r3
  114ec8:	e51b300c 	ldr	r3, [fp, #-12]
  114ecc:	e5933000 	ldr	r3, [r3]
  114ed0:	e5933008 	ldr	r3, [r3, #8]
  114ed4:	e6ef2072 	uxtb	r2, r2
  114ed8:	e5c32008 	strb	r2, [r3, #8]
      } else {
        ip_reset_option(sock->conn->pcb.ip, optname);
      }
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, SOL_SOCKET, optname=0x%x, ..) -> %s\n",
                  s, optname, (*(const int*)optval?"on":"off")));
      break;
  114edc:	ea000090 	b	115124 <lwip_setsockopt_impl+0x3a8>
        ip_reset_option(sock->conn->pcb.ip, optname);
  114ee0:	e51b300c 	ldr	r3, [fp, #-12]
  114ee4:	e5933000 	ldr	r3, [r3]
  114ee8:	e5933008 	ldr	r3, [r3, #8]
  114eec:	e5d33008 	ldrb	r3, [r3, #8]
  114ef0:	e6af2073 	sxtb	r2, r3
  114ef4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  114ef8:	e6af3073 	sxtb	r3, r3
  114efc:	e1e03003 	mvn	r3, r3
  114f00:	e6af3073 	sxtb	r3, r3
  114f04:	e0033002 	and	r3, r3, r2
  114f08:	e6af2073 	sxtb	r2, r3
  114f0c:	e51b300c 	ldr	r3, [fp, #-12]
  114f10:	e5933000 	ldr	r3, [r3]
  114f14:	e5933008 	ldr	r3, [r3, #8]
  114f18:	e6ef2072 	uxtb	r2, r2
  114f1c:	e5c32008 	strb	r2, [r3, #8]
      break;
  114f20:	ea00007f 	b	115124 <lwip_setsockopt_impl+0x3a8>
    /* SO_TYPE is get-only */
    /* SO_ERROR is get-only */

#if LWIP_SO_SNDTIMEO
    case SO_SNDTIMEO:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, optlen, LWIP_SO_SNDRCVTIMEO_OPTTYPE);
  114f24:	e59b3004 	ldr	r3, [fp, #4]
  114f28:	e353000f 	cmp	r3, #15
  114f2c:	8a000001 	bhi	114f38 <lwip_setsockopt_impl+0x1bc>
  114f30:	e3a03016 	mov	r3, #22
  114f34:	ea0001ea 	b	1156e4 <lwip_setsockopt_impl+0x968>
  114f38:	e51b300c 	ldr	r3, [fp, #-12]
  114f3c:	e5933000 	ldr	r3, [r3]
  114f40:	e3530000 	cmp	r3, #0
  114f44:	1a000001 	bne	114f50 <lwip_setsockopt_impl+0x1d4>
  114f48:	e3a03016 	mov	r3, #22
  114f4c:	ea0001e4 	b	1156e4 <lwip_setsockopt_impl+0x968>
      netconn_set_sendtimeout(sock->conn, LWIP_SO_SNDRCVTIMEO_GET_MS(optval));
  114f50:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114f54:	e1c320d0 	ldrd	r2, [r3]
  114f58:	e3a03ffa 	mov	r3, #1000	; 0x3e8
  114f5c:	e0010293 	mul	r1, r3, r2
  114f60:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114f64:	e5933008 	ldr	r3, [r3, #8]
  114f68:	e2833ff9 	add	r3, r3, #996	; 0x3e4
  114f6c:	e2833003 	add	r3, r3, #3
  114f70:	e1a02003 	mov	r2, r3
  114f74:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  114f78:	e3413062 	movt	r3, #4194	; 0x1062
  114f7c:	e0832392 	umull	r2, r3, r2, r3
  114f80:	e1a03323 	lsr	r3, r3, #6
  114f84:	e0812003 	add	r2, r1, r3
  114f88:	e51b300c 	ldr	r3, [fp, #-12]
  114f8c:	e5933000 	ldr	r3, [r3]
  114f90:	e5832020 	str	r2, [r3, #32]
      break;
  114f94:	ea000062 	b	115124 <lwip_setsockopt_impl+0x3a8>
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
    case SO_RCVTIMEO:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, optlen, LWIP_SO_SNDRCVTIMEO_OPTTYPE);
  114f98:	e59b3004 	ldr	r3, [fp, #4]
  114f9c:	e353000f 	cmp	r3, #15
  114fa0:	8a000001 	bhi	114fac <lwip_setsockopt_impl+0x230>
  114fa4:	e3a03016 	mov	r3, #22
  114fa8:	ea0001cd 	b	1156e4 <lwip_setsockopt_impl+0x968>
  114fac:	e51b300c 	ldr	r3, [fp, #-12]
  114fb0:	e5933000 	ldr	r3, [r3]
  114fb4:	e3530000 	cmp	r3, #0
  114fb8:	1a000001 	bne	114fc4 <lwip_setsockopt_impl+0x248>
  114fbc:	e3a03016 	mov	r3, #22
  114fc0:	ea0001c7 	b	1156e4 <lwip_setsockopt_impl+0x968>
      netconn_set_recvtimeout(sock->conn, (int)LWIP_SO_SNDRCVTIMEO_GET_MS(optval));
  114fc4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114fc8:	e1c320d0 	ldrd	r2, [r3]
  114fcc:	e3a03ffa 	mov	r3, #1000	; 0x3e8
  114fd0:	e0010293 	mul	r1, r3, r2
  114fd4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114fd8:	e5933008 	ldr	r3, [r3, #8]
  114fdc:	e2833ff9 	add	r3, r3, #996	; 0x3e4
  114fe0:	e2833003 	add	r3, r3, #3
  114fe4:	e1a02003 	mov	r2, r3
  114fe8:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  114fec:	e3413062 	movt	r3, #4194	; 0x1062
  114ff0:	e0832392 	umull	r2, r3, r2, r3
  114ff4:	e1a03323 	lsr	r3, r3, #6
  114ff8:	e0812003 	add	r2, r1, r3
  114ffc:	e51b300c 	ldr	r3, [fp, #-12]
  115000:	e5933000 	ldr	r3, [r3]
  115004:	e5832024 	str	r2, [r3, #36]	; 0x24
      break;
  115008:	ea000045 	b	115124 <lwip_setsockopt_impl+0x3a8>
#endif /* LWIP_SO_RCVTIMEO */
#if LWIP_SO_RCVBUF
    case SO_RCVBUF:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, optlen, int);
  11500c:	e59b3004 	ldr	r3, [fp, #4]
  115010:	e3530003 	cmp	r3, #3
  115014:	8a000001 	bhi	115020 <lwip_setsockopt_impl+0x2a4>
  115018:	e3a03016 	mov	r3, #22
  11501c:	ea0001b0 	b	1156e4 <lwip_setsockopt_impl+0x968>
  115020:	e51b300c 	ldr	r3, [fp, #-12]
  115024:	e5933000 	ldr	r3, [r3]
  115028:	e3530000 	cmp	r3, #0
  11502c:	1a000001 	bne	115038 <lwip_setsockopt_impl+0x2bc>
  115030:	e3a03016 	mov	r3, #22
  115034:	ea0001aa 	b	1156e4 <lwip_setsockopt_impl+0x968>
      netconn_set_recvbufsize(sock->conn, *(const int*)optval);
  115038:	e51b300c 	ldr	r3, [fp, #-12]
  11503c:	e5933000 	ldr	r3, [r3]
  115040:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  115044:	e5922000 	ldr	r2, [r2]
  115048:	e5832028 	str	r2, [r3, #40]	; 0x28
      break;
  11504c:	ea000034 	b	115124 <lwip_setsockopt_impl+0x3a8>
      }
      break;
#endif /* LWIP_SO_LINGER */
#if LWIP_UDP
    case SO_NO_CHECK:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, int, NETCONN_UDP);
  115050:	e59b3004 	ldr	r3, [fp, #4]
  115054:	e3530003 	cmp	r3, #3
  115058:	8a000001 	bhi	115064 <lwip_setsockopt_impl+0x2e8>
  11505c:	e3a03016 	mov	r3, #22
  115060:	ea00019f 	b	1156e4 <lwip_setsockopt_impl+0x968>
  115064:	e51b300c 	ldr	r3, [fp, #-12]
  115068:	e5933000 	ldr	r3, [r3]
  11506c:	e3530000 	cmp	r3, #0
  115070:	0a000004 	beq	115088 <lwip_setsockopt_impl+0x30c>
  115074:	e51b300c 	ldr	r3, [fp, #-12]
  115078:	e5933000 	ldr	r3, [r3]
  11507c:	e5933008 	ldr	r3, [r3, #8]
  115080:	e3530000 	cmp	r3, #0
  115084:	1a000001 	bne	115090 <lwip_setsockopt_impl+0x314>
  115088:	e3a03016 	mov	r3, #22
  11508c:	ea000194 	b	1156e4 <lwip_setsockopt_impl+0x968>
  115090:	e51b300c 	ldr	r3, [fp, #-12]
  115094:	e5933000 	ldr	r3, [r3]
  115098:	e5933000 	ldr	r3, [r3]
  11509c:	e20330f0 	and	r3, r3, #240	; 0xf0
  1150a0:	e3530020 	cmp	r3, #32
  1150a4:	0a000001 	beq	1150b0 <lwip_setsockopt_impl+0x334>
  1150a8:	e3a0305c 	mov	r3, #92	; 0x5c
  1150ac:	ea00018c 	b	1156e4 <lwip_setsockopt_impl+0x968>
      if ((udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_UDPLITE) != 0) {
        /* this flag is only available for UDP, not for UDP lite */
        return EAFNOSUPPORT;
      }
#endif /* LWIP_UDPLITE */
      if (*(const int*)optval) {
  1150b0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1150b4:	e5933000 	ldr	r3, [r3]
  1150b8:	e3530000 	cmp	r3, #0
  1150bc:	0a00000a 	beq	1150ec <lwip_setsockopt_impl+0x370>
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) | UDP_FLAGS_NOCHKSUM);
  1150c0:	e51b300c 	ldr	r3, [fp, #-12]
  1150c4:	e5933000 	ldr	r3, [r3]
  1150c8:	e5933008 	ldr	r3, [r3, #8]
  1150cc:	e5d32010 	ldrb	r2, [r3, #16]
  1150d0:	e51b300c 	ldr	r3, [fp, #-12]
  1150d4:	e5933000 	ldr	r3, [r3]
  1150d8:	e5933008 	ldr	r3, [r3, #8]
  1150dc:	e3822001 	orr	r2, r2, #1
  1150e0:	e6ef2072 	uxtb	r2, r2
  1150e4:	e5c32010 	strb	r2, [r3, #16]
      } else {
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) & ~UDP_FLAGS_NOCHKSUM);
      }
      break;
  1150e8:	ea00000d 	b	115124 <lwip_setsockopt_impl+0x3a8>
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) & ~UDP_FLAGS_NOCHKSUM);
  1150ec:	e51b300c 	ldr	r3, [fp, #-12]
  1150f0:	e5933000 	ldr	r3, [r3]
  1150f4:	e5933008 	ldr	r3, [r3, #8]
  1150f8:	e5d32010 	ldrb	r2, [r3, #16]
  1150fc:	e51b300c 	ldr	r3, [fp, #-12]
  115100:	e5933000 	ldr	r3, [r3]
  115104:	e5933008 	ldr	r3, [r3, #8]
  115108:	e3c22001 	bic	r2, r2, #1
  11510c:	e6ef2072 	uxtb	r2, r2
  115110:	e5c32010 	strb	r2, [r3, #16]
      break;
  115114:	ea000002 	b	115124 <lwip_setsockopt_impl+0x3a8>
#endif /* LWIP_UDP */
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, SOL_SOCKET, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
  115118:	e3a0305c 	mov	r3, #92	; 0x5c
  11511c:	e54b3005 	strb	r3, [fp, #-5]
      break;
  115120:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  115124:	ea00016d 	b	1156e0 <lwip_setsockopt_impl+0x964>

/* Level: IPPROTO_IP */
  case IPPROTO_IP:
    switch (optname) {
  115128:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11512c:	e2433001 	sub	r3, r3, #1
  115130:	e3530006 	cmp	r3, #6
  115134:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  115138:	ea0000f2 	b	115508 <lwip_setsockopt_impl+0x78c>
  11513c:	001151b8 	.word	0x001151b8
  115140:	00115158 	.word	0x00115158
  115144:	001153e0 	.word	0x001153e0
  115148:	001153e0 	.word	0x001153e0
  11514c:	00115218 	.word	0x00115218
  115150:	00115294 	.word	0x00115294
  115154:	00115318 	.word	0x00115318
    case IP_TTL:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
  115158:	e59b3004 	ldr	r3, [fp, #4]
  11515c:	e3530003 	cmp	r3, #3
  115160:	8a000001 	bhi	11516c <lwip_setsockopt_impl+0x3f0>
  115164:	e3a03016 	mov	r3, #22
  115168:	ea00015d 	b	1156e4 <lwip_setsockopt_impl+0x968>
  11516c:	e51b300c 	ldr	r3, [fp, #-12]
  115170:	e5933000 	ldr	r3, [r3]
  115174:	e3530000 	cmp	r3, #0
  115178:	0a000004 	beq	115190 <lwip_setsockopt_impl+0x414>
  11517c:	e51b300c 	ldr	r3, [fp, #-12]
  115180:	e5933000 	ldr	r3, [r3]
  115184:	e5933008 	ldr	r3, [r3, #8]
  115188:	e3530000 	cmp	r3, #0
  11518c:	1a000001 	bne	115198 <lwip_setsockopt_impl+0x41c>
  115190:	e3a03016 	mov	r3, #22
  115194:	ea000152 	b	1156e4 <lwip_setsockopt_impl+0x968>
      sock->conn->pcb.ip->ttl = (u8_t)(*(const int*)optval);
  115198:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11519c:	e5932000 	ldr	r2, [r3]
  1151a0:	e51b300c 	ldr	r3, [fp, #-12]
  1151a4:	e5933000 	ldr	r3, [r3]
  1151a8:	e5933008 	ldr	r3, [r3, #8]
  1151ac:	e6ef2072 	uxtb	r2, r2
  1151b0:	e5c3200a 	strb	r2, [r3, #10]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TTL, ..) -> %d\n",
                  s, sock->conn->pcb.ip->ttl));
      break;
  1151b4:	ea0000d7 	b	115518 <lwip_setsockopt_impl+0x79c>
    case IP_TOS:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
  1151b8:	e59b3004 	ldr	r3, [fp, #4]
  1151bc:	e3530003 	cmp	r3, #3
  1151c0:	8a000001 	bhi	1151cc <lwip_setsockopt_impl+0x450>
  1151c4:	e3a03016 	mov	r3, #22
  1151c8:	ea000145 	b	1156e4 <lwip_setsockopt_impl+0x968>
  1151cc:	e51b300c 	ldr	r3, [fp, #-12]
  1151d0:	e5933000 	ldr	r3, [r3]
  1151d4:	e3530000 	cmp	r3, #0
  1151d8:	0a000004 	beq	1151f0 <lwip_setsockopt_impl+0x474>
  1151dc:	e51b300c 	ldr	r3, [fp, #-12]
  1151e0:	e5933000 	ldr	r3, [r3]
  1151e4:	e5933008 	ldr	r3, [r3, #8]
  1151e8:	e3530000 	cmp	r3, #0
  1151ec:	1a000001 	bne	1151f8 <lwip_setsockopt_impl+0x47c>
  1151f0:	e3a03016 	mov	r3, #22
  1151f4:	ea00013a 	b	1156e4 <lwip_setsockopt_impl+0x968>
      sock->conn->pcb.ip->tos = (u8_t)(*(const int*)optval);
  1151f8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1151fc:	e5932000 	ldr	r2, [r3]
  115200:	e51b300c 	ldr	r3, [fp, #-12]
  115204:	e5933000 	ldr	r3, [r3]
  115208:	e5933008 	ldr	r3, [r3, #8]
  11520c:	e6ef2072 	uxtb	r2, r2
  115210:	e5c32009 	strb	r2, [r3, #9]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TOS, ..)-> %d\n",
                  s, sock->conn->pcb.ip->tos));
      break;
  115214:	ea0000bf 	b	115518 <lwip_setsockopt_impl+0x79c>
#if LWIP_MULTICAST_TX_OPTIONS
    case IP_MULTICAST_TTL:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, u8_t, NETCONN_UDP);
  115218:	e59b3004 	ldr	r3, [fp, #4]
  11521c:	e3530000 	cmp	r3, #0
  115220:	1a000001 	bne	11522c <lwip_setsockopt_impl+0x4b0>
  115224:	e3a03016 	mov	r3, #22
  115228:	ea00012d 	b	1156e4 <lwip_setsockopt_impl+0x968>
  11522c:	e51b300c 	ldr	r3, [fp, #-12]
  115230:	e5933000 	ldr	r3, [r3]
  115234:	e3530000 	cmp	r3, #0
  115238:	0a000004 	beq	115250 <lwip_setsockopt_impl+0x4d4>
  11523c:	e51b300c 	ldr	r3, [fp, #-12]
  115240:	e5933000 	ldr	r3, [r3]
  115244:	e5933008 	ldr	r3, [r3, #8]
  115248:	e3530000 	cmp	r3, #0
  11524c:	1a000001 	bne	115258 <lwip_setsockopt_impl+0x4dc>
  115250:	e3a03016 	mov	r3, #22
  115254:	ea000122 	b	1156e4 <lwip_setsockopt_impl+0x968>
  115258:	e51b300c 	ldr	r3, [fp, #-12]
  11525c:	e5933000 	ldr	r3, [r3]
  115260:	e5933000 	ldr	r3, [r3]
  115264:	e20330f0 	and	r3, r3, #240	; 0xf0
  115268:	e3530020 	cmp	r3, #32
  11526c:	0a000001 	beq	115278 <lwip_setsockopt_impl+0x4fc>
  115270:	e3a0305c 	mov	r3, #92	; 0x5c
  115274:	ea00011a 	b	1156e4 <lwip_setsockopt_impl+0x968>
      udp_set_multicast_ttl(sock->conn->pcb.udp, (u8_t)(*(const u8_t*)optval));
  115278:	e51b300c 	ldr	r3, [fp, #-12]
  11527c:	e5933000 	ldr	r3, [r3]
  115280:	e5933008 	ldr	r3, [r3, #8]
  115284:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  115288:	e5d22000 	ldrb	r2, [r2]
  11528c:	e5c3201c 	strb	r2, [r3, #28]
      break;
  115290:	ea0000a0 	b	115518 <lwip_setsockopt_impl+0x79c>
    case IP_MULTICAST_IF:
      {
        ip4_addr_t if_addr;
        LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, struct in_addr, NETCONN_UDP);
  115294:	e59b3004 	ldr	r3, [fp, #4]
  115298:	e3530003 	cmp	r3, #3
  11529c:	8a000001 	bhi	1152a8 <lwip_setsockopt_impl+0x52c>
  1152a0:	e3a03016 	mov	r3, #22
  1152a4:	ea00010e 	b	1156e4 <lwip_setsockopt_impl+0x968>
  1152a8:	e51b300c 	ldr	r3, [fp, #-12]
  1152ac:	e5933000 	ldr	r3, [r3]
  1152b0:	e3530000 	cmp	r3, #0
  1152b4:	0a000004 	beq	1152cc <lwip_setsockopt_impl+0x550>
  1152b8:	e51b300c 	ldr	r3, [fp, #-12]
  1152bc:	e5933000 	ldr	r3, [r3]
  1152c0:	e5933008 	ldr	r3, [r3, #8]
  1152c4:	e3530000 	cmp	r3, #0
  1152c8:	1a000001 	bne	1152d4 <lwip_setsockopt_impl+0x558>
  1152cc:	e3a03016 	mov	r3, #22
  1152d0:	ea000103 	b	1156e4 <lwip_setsockopt_impl+0x968>
  1152d4:	e51b300c 	ldr	r3, [fp, #-12]
  1152d8:	e5933000 	ldr	r3, [r3]
  1152dc:	e5933000 	ldr	r3, [r3]
  1152e0:	e20330f0 	and	r3, r3, #240	; 0xf0
  1152e4:	e3530020 	cmp	r3, #32
  1152e8:	0a000001 	beq	1152f4 <lwip_setsockopt_impl+0x578>
  1152ec:	e3a0305c 	mov	r3, #92	; 0x5c
  1152f0:	ea0000fb 	b	1156e4 <lwip_setsockopt_impl+0x968>
        inet_addr_to_ip4addr(&if_addr, (const struct in_addr*)optval);
  1152f4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1152f8:	e5933000 	ldr	r3, [r3]
  1152fc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        udp_set_multicast_netif_addr(sock->conn->pcb.udp, &if_addr);
  115300:	e51b300c 	ldr	r3, [fp, #-12]
  115304:	e5933000 	ldr	r3, [r3]
  115308:	e5933008 	ldr	r3, [r3, #8]
  11530c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  115310:	e5832018 	str	r2, [r3, #24]
      }
      break;
  115314:	ea00007f 	b	115518 <lwip_setsockopt_impl+0x79c>
    case IP_MULTICAST_LOOP:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, u8_t, NETCONN_UDP);
  115318:	e59b3004 	ldr	r3, [fp, #4]
  11531c:	e3530000 	cmp	r3, #0
  115320:	1a000001 	bne	11532c <lwip_setsockopt_impl+0x5b0>
  115324:	e3a03016 	mov	r3, #22
  115328:	ea0000ed 	b	1156e4 <lwip_setsockopt_impl+0x968>
  11532c:	e51b300c 	ldr	r3, [fp, #-12]
  115330:	e5933000 	ldr	r3, [r3]
  115334:	e3530000 	cmp	r3, #0
  115338:	0a000004 	beq	115350 <lwip_setsockopt_impl+0x5d4>
  11533c:	e51b300c 	ldr	r3, [fp, #-12]
  115340:	e5933000 	ldr	r3, [r3]
  115344:	e5933008 	ldr	r3, [r3, #8]
  115348:	e3530000 	cmp	r3, #0
  11534c:	1a000001 	bne	115358 <lwip_setsockopt_impl+0x5dc>
  115350:	e3a03016 	mov	r3, #22
  115354:	ea0000e2 	b	1156e4 <lwip_setsockopt_impl+0x968>
  115358:	e51b300c 	ldr	r3, [fp, #-12]
  11535c:	e5933000 	ldr	r3, [r3]
  115360:	e5933000 	ldr	r3, [r3]
  115364:	e20330f0 	and	r3, r3, #240	; 0xf0
  115368:	e3530020 	cmp	r3, #32
  11536c:	0a000001 	beq	115378 <lwip_setsockopt_impl+0x5fc>
  115370:	e3a0305c 	mov	r3, #92	; 0x5c
  115374:	ea0000da 	b	1156e4 <lwip_setsockopt_impl+0x968>
      if (*(const u8_t*)optval) {
  115378:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11537c:	e5d33000 	ldrb	r3, [r3]
  115380:	e3530000 	cmp	r3, #0
  115384:	0a00000a 	beq	1153b4 <lwip_setsockopt_impl+0x638>
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) | UDP_FLAGS_MULTICAST_LOOP);
  115388:	e51b300c 	ldr	r3, [fp, #-12]
  11538c:	e5933000 	ldr	r3, [r3]
  115390:	e5933008 	ldr	r3, [r3, #8]
  115394:	e5d32010 	ldrb	r2, [r3, #16]
  115398:	e51b300c 	ldr	r3, [fp, #-12]
  11539c:	e5933000 	ldr	r3, [r3]
  1153a0:	e5933008 	ldr	r3, [r3, #8]
  1153a4:	e3822008 	orr	r2, r2, #8
  1153a8:	e6ef2072 	uxtb	r2, r2
  1153ac:	e5c32010 	strb	r2, [r3, #16]
      } else {
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) & ~UDP_FLAGS_MULTICAST_LOOP);
      }
      break;
  1153b0:	ea000058 	b	115518 <lwip_setsockopt_impl+0x79c>
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) & ~UDP_FLAGS_MULTICAST_LOOP);
  1153b4:	e51b300c 	ldr	r3, [fp, #-12]
  1153b8:	e5933000 	ldr	r3, [r3]
  1153bc:	e5933008 	ldr	r3, [r3, #8]
  1153c0:	e5d32010 	ldrb	r2, [r3, #16]
  1153c4:	e51b300c 	ldr	r3, [fp, #-12]
  1153c8:	e5933000 	ldr	r3, [r3]
  1153cc:	e5933008 	ldr	r3, [r3, #8]
  1153d0:	e3c22008 	bic	r2, r2, #8
  1153d4:	e6ef2072 	uxtb	r2, r2
  1153d8:	e5c32010 	strb	r2, [r3, #16]
      break;
  1153dc:	ea00004d 	b	115518 <lwip_setsockopt_impl+0x79c>
    case IP_DROP_MEMBERSHIP:
      {
        /* If this is a TCP or a RAW socket, ignore these options. */
        /* @todo: assign membership to this socket so that it is dropped when closing the socket */
        err_t igmp_err;
        const struct ip_mreq *imr = (const struct ip_mreq *)optval;
  1153e0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1153e4:	e50b3010 	str	r3, [fp, #-16]
        ip4_addr_t if_addr;
        ip4_addr_t multi_addr;
        LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, struct ip_mreq, NETCONN_UDP);
  1153e8:	e59b3004 	ldr	r3, [fp, #4]
  1153ec:	e3530007 	cmp	r3, #7
  1153f0:	8a000001 	bhi	1153fc <lwip_setsockopt_impl+0x680>
  1153f4:	e3a03016 	mov	r3, #22
  1153f8:	ea0000b9 	b	1156e4 <lwip_setsockopt_impl+0x968>
  1153fc:	e51b300c 	ldr	r3, [fp, #-12]
  115400:	e5933000 	ldr	r3, [r3]
  115404:	e3530000 	cmp	r3, #0
  115408:	0a000004 	beq	115420 <lwip_setsockopt_impl+0x6a4>
  11540c:	e51b300c 	ldr	r3, [fp, #-12]
  115410:	e5933000 	ldr	r3, [r3]
  115414:	e5933008 	ldr	r3, [r3, #8]
  115418:	e3530000 	cmp	r3, #0
  11541c:	1a000001 	bne	115428 <lwip_setsockopt_impl+0x6ac>
  115420:	e3a03016 	mov	r3, #22
  115424:	ea0000ae 	b	1156e4 <lwip_setsockopt_impl+0x968>
  115428:	e51b300c 	ldr	r3, [fp, #-12]
  11542c:	e5933000 	ldr	r3, [r3]
  115430:	e5933000 	ldr	r3, [r3]
  115434:	e20330f0 	and	r3, r3, #240	; 0xf0
  115438:	e3530020 	cmp	r3, #32
  11543c:	0a000001 	beq	115448 <lwip_setsockopt_impl+0x6cc>
  115440:	e3a0305c 	mov	r3, #92	; 0x5c
  115444:	ea0000a6 	b	1156e4 <lwip_setsockopt_impl+0x968>
        inet_addr_to_ip4addr(&if_addr, &imr->imr_interface);
  115448:	e51b3010 	ldr	r3, [fp, #-16]
  11544c:	e5933004 	ldr	r3, [r3, #4]
  115450:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        inet_addr_to_ip4addr(&multi_addr, &imr->imr_multiaddr);
  115454:	e51b3010 	ldr	r3, [fp, #-16]
  115458:	e5933000 	ldr	r3, [r3]
  11545c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
        if (optname == IP_ADD_MEMBERSHIP) {
  115460:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  115464:	e3530003 	cmp	r3, #3
  115468:	1a000014 	bne	1154c0 <lwip_setsockopt_impl+0x744>
          if (!lwip_socket_register_membership(s, &if_addr, &multi_addr)) {
  11546c:	e24b201c 	sub	r2, fp, #28
  115470:	e24b3018 	sub	r3, fp, #24
  115474:	e1a01003 	mov	r1, r3
  115478:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  11547c:	eb0001ba 	bl	115b6c <lwip_socket_register_membership>
  115480:	e1a03000 	mov	r3, r0
  115484:	e3530000 	cmp	r3, #0
  115488:	1a000004 	bne	1154a0 <lwip_setsockopt_impl+0x724>
            /* cannot track membership (out of memory) */
            err = ENOMEM;
  11548c:	e3a0300c 	mov	r3, #12
  115490:	e54b3005 	strb	r3, [fp, #-5]
            igmp_err = ERR_OK;
  115494:	e3a03000 	mov	r3, #0
  115498:	e54b3006 	strb	r3, [fp, #-6]
  11549c:	ea000013 	b	1154f0 <lwip_setsockopt_impl+0x774>
          } else {
            igmp_err = igmp_joingroup(&if_addr, &multi_addr);
  1154a0:	e24b201c 	sub	r2, fp, #28
  1154a4:	e24b3018 	sub	r3, fp, #24
  1154a8:	e1a01002 	mov	r1, r2
  1154ac:	e1a00003 	mov	r0, r3
  1154b0:	eb006c95 	bl	13070c <igmp_joingroup>
  1154b4:	e1a03000 	mov	r3, r0
  1154b8:	e54b3006 	strb	r3, [fp, #-6]
  1154bc:	ea00000b 	b	1154f0 <lwip_setsockopt_impl+0x774>
          }
        } else {
          igmp_err = igmp_leavegroup(&if_addr, &multi_addr);
  1154c0:	e24b201c 	sub	r2, fp, #28
  1154c4:	e24b3018 	sub	r3, fp, #24
  1154c8:	e1a01002 	mov	r1, r2
  1154cc:	e1a00003 	mov	r0, r3
  1154d0:	eb006d46 	bl	1309f0 <igmp_leavegroup>
  1154d4:	e1a03000 	mov	r3, r0
  1154d8:	e54b3006 	strb	r3, [fp, #-6]
          lwip_socket_unregister_membership(s, &if_addr, &multi_addr);
  1154dc:	e24b201c 	sub	r2, fp, #28
  1154e0:	e24b3018 	sub	r3, fp, #24
  1154e4:	e1a01003 	mov	r1, r3
  1154e8:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1154ec:	eb0001e0 	bl	115c74 <lwip_socket_unregister_membership>
        }
        if (igmp_err != ERR_OK) {
  1154f0:	e15b30d6 	ldrsb	r3, [fp, #-6]
  1154f4:	e3530000 	cmp	r3, #0
  1154f8:	0a000005 	beq	115514 <lwip_setsockopt_impl+0x798>
          err = EADDRNOTAVAIL;
  1154fc:	e3a03063 	mov	r3, #99	; 0x63
  115500:	e54b3005 	strb	r3, [fp, #-5]
        }
      }
      break;
  115504:	ea000002 	b	115514 <lwip_setsockopt_impl+0x798>
#endif /* LWIP_IGMP */
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
  115508:	e3a0305c 	mov	r3, #92	; 0x5c
  11550c:	e54b3005 	strb	r3, [fp, #-5]
      break;
  115510:	ea000000 	b	115518 <lwip_setsockopt_impl+0x79c>
      break;
  115514:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  115518:	ea000070 	b	1156e0 <lwip_setsockopt_impl+0x964>

#if LWIP_TCP
/* Level: IPPROTO_TCP */
  case IPPROTO_TCP:
    /* Special case: all IPPROTO_TCP option take an int */
    LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, int, NETCONN_TCP);
  11551c:	e59b3004 	ldr	r3, [fp, #4]
  115520:	e3530003 	cmp	r3, #3
  115524:	8a000001 	bhi	115530 <lwip_setsockopt_impl+0x7b4>
  115528:	e3a03016 	mov	r3, #22
  11552c:	ea00006c 	b	1156e4 <lwip_setsockopt_impl+0x968>
  115530:	e51b300c 	ldr	r3, [fp, #-12]
  115534:	e5933000 	ldr	r3, [r3]
  115538:	e3530000 	cmp	r3, #0
  11553c:	0a000004 	beq	115554 <lwip_setsockopt_impl+0x7d8>
  115540:	e51b300c 	ldr	r3, [fp, #-12]
  115544:	e5933000 	ldr	r3, [r3]
  115548:	e5933008 	ldr	r3, [r3, #8]
  11554c:	e3530000 	cmp	r3, #0
  115550:	1a000001 	bne	11555c <lwip_setsockopt_impl+0x7e0>
  115554:	e3a03016 	mov	r3, #22
  115558:	ea000061 	b	1156e4 <lwip_setsockopt_impl+0x968>
  11555c:	e51b300c 	ldr	r3, [fp, #-12]
  115560:	e5933000 	ldr	r3, [r3]
  115564:	e5933000 	ldr	r3, [r3]
  115568:	e20330f0 	and	r3, r3, #240	; 0xf0
  11556c:	e3530010 	cmp	r3, #16
  115570:	0a000001 	beq	11557c <lwip_setsockopt_impl+0x800>
  115574:	e3a0305c 	mov	r3, #92	; 0x5c
  115578:	ea000059 	b	1156e4 <lwip_setsockopt_impl+0x968>
    if (sock->conn->pcb.tcp->state == LISTEN) {
  11557c:	e51b300c 	ldr	r3, [fp, #-12]
  115580:	e5933000 	ldr	r3, [r3]
  115584:	e5933008 	ldr	r3, [r3, #8]
  115588:	e5933014 	ldr	r3, [r3, #20]
  11558c:	e3530001 	cmp	r3, #1
  115590:	1a000001 	bne	11559c <lwip_setsockopt_impl+0x820>
      return EINVAL;
  115594:	e3a03016 	mov	r3, #22
  115598:	ea000051 	b	1156e4 <lwip_setsockopt_impl+0x968>
    }
    switch (optname) {
  11559c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1155a0:	e2433001 	sub	r3, r3, #1
  1155a4:	e3530004 	cmp	r3, #4
  1155a8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  1155ac:	ea000040 	b	1156b4 <lwip_setsockopt_impl+0x938>
  1155b0:	001155c4 	.word	0x001155c4
  1155b4:	0011562c 	.word	0x0011562c
  1155b8:	00115648 	.word	0x00115648
  1155bc:	00115670 	.word	0x00115670
  1155c0:	00115698 	.word	0x00115698
    case TCP_NODELAY:
      if (*(const int*)optval) {
  1155c4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1155c8:	e5933000 	ldr	r3, [r3]
  1155cc:	e3530000 	cmp	r3, #0
  1155d0:	0a00000a 	beq	115600 <lwip_setsockopt_impl+0x884>
        tcp_nagle_disable(sock->conn->pcb.tcp);
  1155d4:	e51b300c 	ldr	r3, [fp, #-12]
  1155d8:	e5933000 	ldr	r3, [r3]
  1155dc:	e5933008 	ldr	r3, [r3, #8]
  1155e0:	e5d3201e 	ldrb	r2, [r3, #30]
  1155e4:	e51b300c 	ldr	r3, [fp, #-12]
  1155e8:	e5933000 	ldr	r3, [r3]
  1155ec:	e5933008 	ldr	r3, [r3, #8]
  1155f0:	e3822040 	orr	r2, r2, #64	; 0x40
  1155f4:	e6ef2072 	uxtb	r2, r2
  1155f8:	e5c3201e 	strb	r2, [r3, #30]
      } else {
        tcp_nagle_enable(sock->conn->pcb.tcp);
      }
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_NODELAY) -> %s\n",
                  s, (*(const int *)optval)?"on":"off") );
      break;
  1155fc:	ea00002f 	b	1156c0 <lwip_setsockopt_impl+0x944>
        tcp_nagle_enable(sock->conn->pcb.tcp);
  115600:	e51b300c 	ldr	r3, [fp, #-12]
  115604:	e5933000 	ldr	r3, [r3]
  115608:	e5933008 	ldr	r3, [r3, #8]
  11560c:	e5d3201e 	ldrb	r2, [r3, #30]
  115610:	e51b300c 	ldr	r3, [fp, #-12]
  115614:	e5933000 	ldr	r3, [r3]
  115618:	e5933008 	ldr	r3, [r3, #8]
  11561c:	e3c22040 	bic	r2, r2, #64	; 0x40
  115620:	e6ef2072 	uxtb	r2, r2
  115624:	e5c3201e 	strb	r2, [r3, #30]
      break;
  115628:	ea000024 	b	1156c0 <lwip_setsockopt_impl+0x944>
    case TCP_KEEPALIVE:
      sock->conn->pcb.tcp->keep_idle = (u32_t)(*(const int*)optval);
  11562c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  115630:	e5932000 	ldr	r2, [r3]
  115634:	e51b300c 	ldr	r3, [fp, #-12]
  115638:	e5933000 	ldr	r3, [r3]
  11563c:	e5933008 	ldr	r3, [r3, #8]
  115640:	e5832094 	str	r2, [r3, #148]	; 0x94
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPALIVE) -> %"U32_F"\n",
                  s, sock->conn->pcb.tcp->keep_idle));
      break;
  115644:	ea00001d 	b	1156c0 <lwip_setsockopt_impl+0x944>

#if LWIP_TCP_KEEPALIVE
    case TCP_KEEPIDLE:
      sock->conn->pcb.tcp->keep_idle = 1000*(u32_t)(*(const int*)optval);
  115648:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11564c:	e5933000 	ldr	r3, [r3]
  115650:	e1a01003 	mov	r1, r3
  115654:	e51b300c 	ldr	r3, [fp, #-12]
  115658:	e5933000 	ldr	r3, [r3]
  11565c:	e5933008 	ldr	r3, [r3, #8]
  115660:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  115664:	e0020192 	mul	r2, r2, r1
  115668:	e5832094 	str	r2, [r3, #148]	; 0x94
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPIDLE) -> %"U32_F"\n",
                  s, sock->conn->pcb.tcp->keep_idle));
      break;
  11566c:	ea000013 	b	1156c0 <lwip_setsockopt_impl+0x944>
    case TCP_KEEPINTVL:
      sock->conn->pcb.tcp->keep_intvl = 1000*(u32_t)(*(const int*)optval);
  115670:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  115674:	e5933000 	ldr	r3, [r3]
  115678:	e1a01003 	mov	r1, r3
  11567c:	e51b300c 	ldr	r3, [fp, #-12]
  115680:	e5933000 	ldr	r3, [r3]
  115684:	e5933008 	ldr	r3, [r3, #8]
  115688:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  11568c:	e0020192 	mul	r2, r2, r1
  115690:	e5832098 	str	r2, [r3, #152]	; 0x98
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPINTVL) -> %"U32_F"\n",
                  s, sock->conn->pcb.tcp->keep_intvl));
      break;
  115694:	ea000009 	b	1156c0 <lwip_setsockopt_impl+0x944>
    case TCP_KEEPCNT:
      sock->conn->pcb.tcp->keep_cnt = (u32_t)(*(const int*)optval);
  115698:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11569c:	e5932000 	ldr	r2, [r3]
  1156a0:	e51b300c 	ldr	r3, [fp, #-12]
  1156a4:	e5933000 	ldr	r3, [r3]
  1156a8:	e5933008 	ldr	r3, [r3, #8]
  1156ac:	e583209c 	str	r2, [r3, #156]	; 0x9c
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPCNT) -> %"U32_F"\n",
                  s, sock->conn->pcb.tcp->keep_cnt));
      break;
  1156b0:	ea000002 	b	1156c0 <lwip_setsockopt_impl+0x944>
#endif /* LWIP_TCP_KEEPALIVE */
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
  1156b4:	e3a0305c 	mov	r3, #92	; 0x5c
  1156b8:	e54b3005 	strb	r3, [fp, #-5]
      break;
  1156bc:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  1156c0:	ea000006 	b	1156e0 <lwip_setsockopt_impl+0x964>
      break;
#endif /* LWIP_IPV6 && LWIP_RAW */
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_RAW, UNIMPL: optname=0x%x, ..)\n",
                                  s, optname));
      err = ENOPROTOOPT;
  1156c4:	e3a0305c 	mov	r3, #92	; 0x5c
  1156c8:	e54b3005 	strb	r3, [fp, #-5]
      break;
  1156cc:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  1156d0:	ea000002 	b	1156e0 <lwip_setsockopt_impl+0x964>
  default:
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, level=0x%x, UNIMPL: optname=0x%x, ..)\n",
                s, level, optname));
    err = ENOPROTOOPT;
  1156d4:	e3a0305c 	mov	r3, #92	; 0x5c
  1156d8:	e54b3005 	strb	r3, [fp, #-5]
    break;
  1156dc:	e320f000 	nop	{0}
  }  /* switch (level) */

  return err;
  1156e0:	e55b3005 	ldrb	r3, [fp, #-5]
}
  1156e4:	e1a00003 	mov	r0, r3
  1156e8:	e24bd004 	sub	sp, fp, #4
  1156ec:	e8bd8800 	pop	{fp, pc}

001156f0 <lwip_ioctl>:

int
lwip_ioctl(int s, long cmd, void *argp)
{
  1156f0:	e92d4800 	push	{fp, lr}
  1156f4:	e28db004 	add	fp, sp, #4
  1156f8:	e24dd038 	sub	sp, sp, #56	; 0x38
  1156fc:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  115700:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  115704:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
  struct lwip_sock *sock = get_socket(s);
  115708:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  11570c:	ebffee03 	bl	110f20 <get_socket>
  115710:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  u8_t val;
#if LWIP_SO_RCVBUF
  u16_t buflen = 0;
  115714:	e3a03000 	mov	r3, #0
  115718:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  if (!sock) {
  11571c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115720:	e3530000 	cmp	r3, #0
  115724:	1a000001 	bne	115730 <lwip_ioctl+0x40>
    return -1;
  115728:	e3e03000 	mvn	r3, #0
  11572c:	ea000093 	b	115980 <lwip_ioctl+0x290>
  }

  switch (cmd) {
  115730:	e51b2034 	ldr	r2, [fp, #-52]	; 0xffffffcc
  115734:	e306367f 	movw	r3, #26239	; 0x667f
  115738:	e3483004 	movt	r3, #32772	; 0x8004
  11573c:	e1520003 	cmp	r2, r3
  115740:	0a00000e 	beq	115780 <lwip_ioctl+0x90>
  115744:	e306367e 	movw	r3, #26238	; 0x667e
  115748:	e3443004 	movt	r3, #16388	; 0x4004
  11574c:	e1520003 	cmp	r2, r3
  115750:	0a000057 	beq	1158b4 <lwip_ioctl+0x1c4>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_ioctl(%d, FIONBIO, %d)\n", s, val));
    sock_set_errno(sock, 0);
    return 0;

  default:
    break;
  115754:	e320f000 	nop	{0}
  } /* switch (cmd) */
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_ioctl(%d, UNIMPL: 0x%lx, %p)\n", s, cmd, argp));
  sock_set_errno(sock, ENOSYS); /* not yet implemented */
  115758:	e3a03026 	mov	r3, #38	; 0x26
  11575c:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  115760:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  115764:	e6ef2073 	uxtb	r2, r3
  115768:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11576c:	e5c32010 	strb	r2, [r3, #16]
  115770:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  115774:	e3530000 	cmp	r3, #0
  115778:	0a00007f 	beq	11597c <lwip_ioctl+0x28c>
  11577c:	ea00007a 	b	11596c <lwip_ioctl+0x27c>
    if (!argp) {
  115780:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  115784:	e3530000 	cmp	r3, #0
  115788:	1a00000e 	bne	1157c8 <lwip_ioctl+0xd8>
      sock_set_errno(sock, EINVAL);
  11578c:	e3a03016 	mov	r3, #22
  115790:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  115794:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  115798:	e6ef2073 	uxtb	r2, r3
  11579c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1157a0:	e5c32010 	strb	r2, [r3, #16]
  1157a4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1157a8:	e3530000 	cmp	r3, #0
  1157ac:	0a000003 	beq	1157c0 <lwip_ioctl+0xd0>
  1157b0:	eb008dc9 	bl	138edc <__errno_location>
  1157b4:	e1a02000 	mov	r2, r0
  1157b8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1157bc:	e5823000 	str	r3, [r2]
      return -1;
  1157c0:	e3e03000 	mvn	r3, #0
  1157c4:	ea00006d 	b	115980 <lwip_ioctl+0x290>
    SYS_ARCH_GET(sock->conn->recv_avail, recv_avail);
  1157c8:	ebffb29b 	bl	10223c <rt_enter_critical>
  1157cc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1157d0:	e5933000 	ldr	r3, [r3]
  1157d4:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  1157d8:	e50b300c 	str	r3, [fp, #-12]
  1157dc:	ebffb29c 	bl	102254 <rt_exit_critical>
    if (recv_avail < 0) {
  1157e0:	e51b300c 	ldr	r3, [fp, #-12]
  1157e4:	e3530000 	cmp	r3, #0
  1157e8:	aa000001 	bge	1157f4 <lwip_ioctl+0x104>
      recv_avail = 0;
  1157ec:	e3a03000 	mov	r3, #0
  1157f0:	e50b300c 	str	r3, [fp, #-12]
    *((int*)argp) = recv_avail;
  1157f4:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1157f8:	e51b200c 	ldr	r2, [fp, #-12]
  1157fc:	e5832000 	str	r2, [r3]
    if (sock->lastdata) {
  115800:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115804:	e5933004 	ldr	r3, [r3, #4]
  115808:	e3530000 	cmp	r3, #0
  11580c:	0a000019 	beq	115878 <lwip_ioctl+0x188>
      struct pbuf *p = (struct pbuf *)sock->lastdata;
  115810:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115814:	e5933004 	ldr	r3, [r3, #4]
  115818:	e50b3010 	str	r3, [fp, #-16]
      if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
  11581c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115820:	e5933000 	ldr	r3, [r3]
  115824:	e5933000 	ldr	r3, [r3]
  115828:	e20330f0 	and	r3, r3, #240	; 0xf0
  11582c:	e3530010 	cmp	r3, #16
  115830:	0a000002 	beq	115840 <lwip_ioctl+0x150>
        p = ((struct netbuf *)p)->p;
  115834:	e51b3010 	ldr	r3, [fp, #-16]
  115838:	e5933000 	ldr	r3, [r3]
  11583c:	e50b3010 	str	r3, [fp, #-16]
      buflen = p->tot_len;
  115840:	e51b3010 	ldr	r3, [fp, #-16]
  115844:	e1d330b8 	ldrh	r3, [r3, #8]
  115848:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
      buflen -= sock->lastoffset;
  11584c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115850:	e1d330b8 	ldrh	r3, [r3, #8]
  115854:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  115858:	e0423003 	sub	r3, r2, r3
  11585c:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
      *((int*)argp) += buflen;
  115860:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  115864:	e5932000 	ldr	r2, [r3]
  115868:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  11586c:	e0822003 	add	r2, r2, r3
  115870:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  115874:	e5832000 	str	r2, [r3]
    sock_set_errno(sock, 0);
  115878:	e3a03000 	mov	r3, #0
  11587c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  115880:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  115884:	e6ef2073 	uxtb	r2, r3
  115888:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11588c:	e5c32010 	strb	r2, [r3, #16]
  115890:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  115894:	e3530000 	cmp	r3, #0
  115898:	0a000003 	beq	1158ac <lwip_ioctl+0x1bc>
  11589c:	eb008d8e 	bl	138edc <__errno_location>
  1158a0:	e1a02000 	mov	r2, r0
  1158a4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1158a8:	e5823000 	str	r3, [r2]
    return 0;
  1158ac:	e3a03000 	mov	r3, #0
  1158b0:	ea000032 	b	115980 <lwip_ioctl+0x290>
    val = 0;
  1158b4:	e3a03000 	mov	r3, #0
  1158b8:	e54b3005 	strb	r3, [fp, #-5]
    if (argp && *(u32_t*)argp) {
  1158bc:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1158c0:	e3530000 	cmp	r3, #0
  1158c4:	0a000005 	beq	1158e0 <lwip_ioctl+0x1f0>
  1158c8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1158cc:	e5933000 	ldr	r3, [r3]
  1158d0:	e3530000 	cmp	r3, #0
  1158d4:	0a000001 	beq	1158e0 <lwip_ioctl+0x1f0>
      val = 1;
  1158d8:	e3a03001 	mov	r3, #1
  1158dc:	e54b3005 	strb	r3, [fp, #-5]
    netconn_set_nonblocking(sock->conn, val);
  1158e0:	e55b3005 	ldrb	r3, [fp, #-5]
  1158e4:	e3530000 	cmp	r3, #0
  1158e8:	0a000008 	beq	115910 <lwip_ioctl+0x220>
  1158ec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1158f0:	e5933000 	ldr	r3, [r3]
  1158f4:	e5d32030 	ldrb	r2, [r3, #48]	; 0x30
  1158f8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1158fc:	e5933000 	ldr	r3, [r3]
  115900:	e3822002 	orr	r2, r2, #2
  115904:	e6ef2072 	uxtb	r2, r2
  115908:	e5c32030 	strb	r2, [r3, #48]	; 0x30
  11590c:	ea000007 	b	115930 <lwip_ioctl+0x240>
  115910:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115914:	e5933000 	ldr	r3, [r3]
  115918:	e5d32030 	ldrb	r2, [r3, #48]	; 0x30
  11591c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115920:	e5933000 	ldr	r3, [r3]
  115924:	e3c22002 	bic	r2, r2, #2
  115928:	e6ef2072 	uxtb	r2, r2
  11592c:	e5c32030 	strb	r2, [r3, #48]	; 0x30
    sock_set_errno(sock, 0);
  115930:	e3a03000 	mov	r3, #0
  115934:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  115938:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11593c:	e6ef2073 	uxtb	r2, r3
  115940:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115944:	e5c32010 	strb	r2, [r3, #16]
  115948:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11594c:	e3530000 	cmp	r3, #0
  115950:	0a000003 	beq	115964 <lwip_ioctl+0x274>
  115954:	eb008d60 	bl	138edc <__errno_location>
  115958:	e1a02000 	mov	r2, r0
  11595c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  115960:	e5823000 	str	r3, [r2]
    return 0;
  115964:	e3a03000 	mov	r3, #0
  115968:	ea000004 	b	115980 <lwip_ioctl+0x290>
  sock_set_errno(sock, ENOSYS); /* not yet implemented */
  11596c:	eb008d5a 	bl	138edc <__errno_location>
  115970:	e1a02000 	mov	r2, r0
  115974:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  115978:	e5823000 	str	r3, [r2]
  return -1;
  11597c:	e3e03000 	mvn	r3, #0
}
  115980:	e1a00003 	mov	r0, r3
  115984:	e24bd004 	sub	sp, fp, #4
  115988:	e8bd8800 	pop	{fp, pc}

0011598c <lwip_fcntl>:
 * Currently only the commands F_GETFL and F_SETFL are implemented.
 * Only the flag O_NONBLOCK is implemented.
 */
int
lwip_fcntl(int s, int cmd, int val)
{
  11598c:	e92d4800 	push	{fp, lr}
  115990:	e28db004 	add	fp, sp, #4
  115994:	e24dd028 	sub	sp, sp, #40	; 0x28
  115998:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  11599c:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  1159a0:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  struct lwip_sock *sock = get_socket(s);
  1159a4:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1159a8:	ebffed5c 	bl	110f20 <get_socket>
  1159ac:	e50b000c 	str	r0, [fp, #-12]
  int ret = -1;
  1159b0:	e3e03000 	mvn	r3, #0
  1159b4:	e50b3008 	str	r3, [fp, #-8]

  if (!sock) {
  1159b8:	e51b300c 	ldr	r3, [fp, #-12]
  1159bc:	e3530000 	cmp	r3, #0
  1159c0:	1a000001 	bne	1159cc <lwip_fcntl+0x40>
    return -1;
  1159c4:	e3e03000 	mvn	r3, #0
  1159c8:	ea000064 	b	115b60 <lwip_fcntl+0x1d4>
  }

  switch (cmd) {
  1159cc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1159d0:	e3530003 	cmp	r3, #3
  1159d4:	0a000002 	beq	1159e4 <lwip_fcntl+0x58>
  1159d8:	e3530004 	cmp	r3, #4
  1159dc:	0a000014 	beq	115a34 <lwip_fcntl+0xa8>
  1159e0:	ea00004a 	b	115b10 <lwip_fcntl+0x184>
  case F_GETFL:
    ret = netconn_is_nonblocking(sock->conn) ? O_NONBLOCK : 0;
  1159e4:	e51b300c 	ldr	r3, [fp, #-12]
  1159e8:	e5933000 	ldr	r3, [r3]
  1159ec:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  1159f0:	e1a03503 	lsl	r3, r3, #10
  1159f4:	e2033b02 	and	r3, r3, #2048	; 0x800
  1159f8:	e50b3008 	str	r3, [fp, #-8]
    sock_set_errno(sock, 0);
  1159fc:	e3a03000 	mov	r3, #0
  115a00:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  115a04:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  115a08:	e6ef2073 	uxtb	r2, r3
  115a0c:	e51b300c 	ldr	r3, [fp, #-12]
  115a10:	e5c32010 	strb	r2, [r3, #16]
  115a14:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  115a18:	e3530000 	cmp	r3, #0
  115a1c:	0a000049 	beq	115b48 <lwip_fcntl+0x1bc>
  115a20:	eb008d2d 	bl	138edc <__errno_location>
  115a24:	e1a02000 	mov	r2, r0
  115a28:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  115a2c:	e5823000 	str	r3, [r2]
    break;
  115a30:	ea000044 	b	115b48 <lwip_fcntl+0x1bc>
  case F_SETFL:
    if ((val & ~O_NONBLOCK) == 0) {
  115a34:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  115a38:	e3c33b02 	bic	r3, r3, #2048	; 0x800
  115a3c:	e3530000 	cmp	r3, #0
  115a40:	1a000024 	bne	115ad8 <lwip_fcntl+0x14c>
      /* only O_NONBLOCK, all other bits are zero */
      netconn_set_nonblocking(sock->conn, val & O_NONBLOCK);
  115a44:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  115a48:	e2033b02 	and	r3, r3, #2048	; 0x800
  115a4c:	e3530000 	cmp	r3, #0
  115a50:	0a000008 	beq	115a78 <lwip_fcntl+0xec>
  115a54:	e51b300c 	ldr	r3, [fp, #-12]
  115a58:	e5933000 	ldr	r3, [r3]
  115a5c:	e5d32030 	ldrb	r2, [r3, #48]	; 0x30
  115a60:	e51b300c 	ldr	r3, [fp, #-12]
  115a64:	e5933000 	ldr	r3, [r3]
  115a68:	e3822002 	orr	r2, r2, #2
  115a6c:	e6ef2072 	uxtb	r2, r2
  115a70:	e5c32030 	strb	r2, [r3, #48]	; 0x30
  115a74:	ea000007 	b	115a98 <lwip_fcntl+0x10c>
  115a78:	e51b300c 	ldr	r3, [fp, #-12]
  115a7c:	e5933000 	ldr	r3, [r3]
  115a80:	e5d32030 	ldrb	r2, [r3, #48]	; 0x30
  115a84:	e51b300c 	ldr	r3, [fp, #-12]
  115a88:	e5933000 	ldr	r3, [r3]
  115a8c:	e3c22002 	bic	r2, r2, #2
  115a90:	e6ef2072 	uxtb	r2, r2
  115a94:	e5c32030 	strb	r2, [r3, #48]	; 0x30
      ret = 0;
  115a98:	e3a03000 	mov	r3, #0
  115a9c:	e50b3008 	str	r3, [fp, #-8]
      sock_set_errno(sock, 0);
  115aa0:	e3a03000 	mov	r3, #0
  115aa4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  115aa8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115aac:	e6ef2073 	uxtb	r2, r3
  115ab0:	e51b300c 	ldr	r3, [fp, #-12]
  115ab4:	e5c32010 	strb	r2, [r3, #16]
  115ab8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115abc:	e3530000 	cmp	r3, #0
  115ac0:	0a000022 	beq	115b50 <lwip_fcntl+0x1c4>
  115ac4:	eb008d04 	bl	138edc <__errno_location>
  115ac8:	e1a02000 	mov	r2, r0
  115acc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115ad0:	e5823000 	str	r3, [r2]
    } else {
      sock_set_errno(sock, ENOSYS); /* not yet implemented */
    }
    break;
  115ad4:	ea00001d 	b	115b50 <lwip_fcntl+0x1c4>
      sock_set_errno(sock, ENOSYS); /* not yet implemented */
  115ad8:	e3a03026 	mov	r3, #38	; 0x26
  115adc:	e50b3010 	str	r3, [fp, #-16]
  115ae0:	e51b3010 	ldr	r3, [fp, #-16]
  115ae4:	e6ef2073 	uxtb	r2, r3
  115ae8:	e51b300c 	ldr	r3, [fp, #-12]
  115aec:	e5c32010 	strb	r2, [r3, #16]
  115af0:	e51b3010 	ldr	r3, [fp, #-16]
  115af4:	e3530000 	cmp	r3, #0
  115af8:	0a000014 	beq	115b50 <lwip_fcntl+0x1c4>
  115afc:	eb008cf6 	bl	138edc <__errno_location>
  115b00:	e1a02000 	mov	r2, r0
  115b04:	e51b3010 	ldr	r3, [fp, #-16]
  115b08:	e5823000 	str	r3, [r2]
    break;
  115b0c:	ea00000f 	b	115b50 <lwip_fcntl+0x1c4>
  default:
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_fcntl(%d, UNIMPL: %d, %d)\n", s, cmd, val));
    sock_set_errno(sock, ENOSYS); /* not yet implemented */
  115b10:	e3a03026 	mov	r3, #38	; 0x26
  115b14:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  115b18:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  115b1c:	e6ef2073 	uxtb	r2, r3
  115b20:	e51b300c 	ldr	r3, [fp, #-12]
  115b24:	e5c32010 	strb	r2, [r3, #16]
  115b28:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  115b2c:	e3530000 	cmp	r3, #0
  115b30:	0a000008 	beq	115b58 <lwip_fcntl+0x1cc>
  115b34:	eb008ce8 	bl	138edc <__errno_location>
  115b38:	e1a02000 	mov	r2, r0
  115b3c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  115b40:	e5823000 	str	r3, [r2]
    break;
  115b44:	ea000003 	b	115b58 <lwip_fcntl+0x1cc>
    break;
  115b48:	e320f000 	nop	{0}
  115b4c:	ea000002 	b	115b5c <lwip_fcntl+0x1d0>
    break;
  115b50:	e320f000 	nop	{0}
  115b54:	ea000000 	b	115b5c <lwip_fcntl+0x1d0>
    break;
  115b58:	e320f000 	nop	{0}
  }
  return ret;
  115b5c:	e51b3008 	ldr	r3, [fp, #-8]
}
  115b60:	e1a00003 	mov	r0, r3
  115b64:	e24bd004 	sub	sp, fp, #4
  115b68:	e8bd8800 	pop	{fp, pc}

00115b6c <lwip_socket_register_membership>:
 *
 * @return 1 on success, 0 on failure
 */
static int
lwip_socket_register_membership(int s, const ip4_addr_t *if_addr, const ip4_addr_t *multi_addr)
{
  115b6c:	e92d4800 	push	{fp, lr}
  115b70:	e28db004 	add	fp, sp, #4
  115b74:	e24dd018 	sub	sp, sp, #24
  115b78:	e50b0010 	str	r0, [fp, #-16]
  115b7c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  115b80:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  struct lwip_sock *sock = get_socket(s);
  115b84:	e51b0010 	ldr	r0, [fp, #-16]
  115b88:	ebffece4 	bl	110f20 <get_socket>
  115b8c:	e50b000c 	str	r0, [fp, #-12]
  int i;

  if (!sock) {
  115b90:	e51b300c 	ldr	r3, [fp, #-12]
  115b94:	e3530000 	cmp	r3, #0
  115b98:	1a000001 	bne	115ba4 <lwip_socket_register_membership+0x38>
    return 0;
  115b9c:	e3a03000 	mov	r3, #0
  115ba0:	ea000030 	b	115c68 <lwip_socket_register_membership+0xfc>
  }

  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
  115ba4:	e3a03000 	mov	r3, #0
  115ba8:	e50b3008 	str	r3, [fp, #-8]
  115bac:	ea000029 	b	115c58 <lwip_socket_register_membership+0xec>
    if (socket_ipv4_multicast_memberships[i].sock == NULL) {
  115bb0:	e30f3594 	movw	r3, #62868	; 0xf594
  115bb4:	e3403014 	movt	r3, #20
  115bb8:	e51b2008 	ldr	r2, [fp, #-8]
  115bbc:	e3a0100c 	mov	r1, #12
  115bc0:	e0020291 	mul	r2, r1, r2
  115bc4:	e0833002 	add	r3, r3, r2
  115bc8:	e5933000 	ldr	r3, [r3]
  115bcc:	e3530000 	cmp	r3, #0
  115bd0:	1a00001d 	bne	115c4c <lwip_socket_register_membership+0xe0>
      socket_ipv4_multicast_memberships[i].sock = sock;
  115bd4:	e30f3594 	movw	r3, #62868	; 0xf594
  115bd8:	e3403014 	movt	r3, #20
  115bdc:	e51b2008 	ldr	r2, [fp, #-8]
  115be0:	e3a0100c 	mov	r1, #12
  115be4:	e0020291 	mul	r2, r1, r2
  115be8:	e0833002 	add	r3, r3, r2
  115bec:	e51b200c 	ldr	r2, [fp, #-12]
  115bf0:	e5832000 	str	r2, [r3]
      ip4_addr_copy(socket_ipv4_multicast_memberships[i].if_addr, *if_addr);
  115bf4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115bf8:	e5932000 	ldr	r2, [r3]
  115bfc:	e30f3594 	movw	r3, #62868	; 0xf594
  115c00:	e3403014 	movt	r3, #20
  115c04:	e51b1008 	ldr	r1, [fp, #-8]
  115c08:	e3a0000c 	mov	r0, #12
  115c0c:	e0010190 	mul	r1, r0, r1
  115c10:	e0833001 	add	r3, r3, r1
  115c14:	e2833004 	add	r3, r3, #4
  115c18:	e5832000 	str	r2, [r3]
      ip4_addr_copy(socket_ipv4_multicast_memberships[i].multi_addr, *multi_addr);
  115c1c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  115c20:	e5932000 	ldr	r2, [r3]
  115c24:	e30f3594 	movw	r3, #62868	; 0xf594
  115c28:	e3403014 	movt	r3, #20
  115c2c:	e51b1008 	ldr	r1, [fp, #-8]
  115c30:	e3a0000c 	mov	r0, #12
  115c34:	e0010190 	mul	r1, r0, r1
  115c38:	e0833001 	add	r3, r3, r1
  115c3c:	e2833008 	add	r3, r3, #8
  115c40:	e5832000 	str	r2, [r3]
      return 1;
  115c44:	e3a03001 	mov	r3, #1
  115c48:	ea000006 	b	115c68 <lwip_socket_register_membership+0xfc>
  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
  115c4c:	e51b3008 	ldr	r3, [fp, #-8]
  115c50:	e2833001 	add	r3, r3, #1
  115c54:	e50b3008 	str	r3, [fp, #-8]
  115c58:	e51b3008 	ldr	r3, [fp, #-8]
  115c5c:	e3530007 	cmp	r3, #7
  115c60:	daffffd2 	ble	115bb0 <lwip_socket_register_membership+0x44>
    }
  }
  return 0;
  115c64:	e3a03000 	mov	r3, #0
}
  115c68:	e1a00003 	mov	r0, r3
  115c6c:	e24bd004 	sub	sp, fp, #4
  115c70:	e8bd8800 	pop	{fp, pc}

00115c74 <lwip_socket_unregister_membership>:
 *
 * ATTENTION: this function is called from tcpip_thread (or under CORE_LOCK).
 */
static void
lwip_socket_unregister_membership(int s, const ip4_addr_t *if_addr, const ip4_addr_t *multi_addr)
{
  115c74:	e92d4800 	push	{fp, lr}
  115c78:	e28db004 	add	fp, sp, #4
  115c7c:	e24dd018 	sub	sp, sp, #24
  115c80:	e50b0010 	str	r0, [fp, #-16]
  115c84:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  115c88:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  struct lwip_sock *sock = get_socket(s);
  115c8c:	e51b0010 	ldr	r0, [fp, #-16]
  115c90:	ebffeca2 	bl	110f20 <get_socket>
  115c94:	e50b000c 	str	r0, [fp, #-12]
  int i;

  if (!sock) {
  115c98:	e51b300c 	ldr	r3, [fp, #-12]
  115c9c:	e3530000 	cmp	r3, #0
  115ca0:	0a000046 	beq	115dc0 <lwip_socket_unregister_membership+0x14c>
    return;
  }

  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
  115ca4:	e3a03000 	mov	r3, #0
  115ca8:	e50b3008 	str	r3, [fp, #-8]
  115cac:	ea00003f 	b	115db0 <lwip_socket_unregister_membership+0x13c>
    if ((socket_ipv4_multicast_memberships[i].sock == sock) &&
  115cb0:	e30f3594 	movw	r3, #62868	; 0xf594
  115cb4:	e3403014 	movt	r3, #20
  115cb8:	e51b2008 	ldr	r2, [fp, #-8]
  115cbc:	e3a0100c 	mov	r1, #12
  115cc0:	e0020291 	mul	r2, r1, r2
  115cc4:	e0833002 	add	r3, r3, r2
  115cc8:	e5933000 	ldr	r3, [r3]
  115ccc:	e51b200c 	ldr	r2, [fp, #-12]
  115cd0:	e1520003 	cmp	r2, r3
  115cd4:	1a000032 	bne	115da4 <lwip_socket_unregister_membership+0x130>
        ip4_addr_cmp(&socket_ipv4_multicast_memberships[i].if_addr, if_addr) &&
  115cd8:	e30f3594 	movw	r3, #62868	; 0xf594
  115cdc:	e3403014 	movt	r3, #20
  115ce0:	e51b2008 	ldr	r2, [fp, #-8]
  115ce4:	e3a0100c 	mov	r1, #12
  115ce8:	e0020291 	mul	r2, r1, r2
  115cec:	e0833002 	add	r3, r3, r2
  115cf0:	e2833004 	add	r3, r3, #4
  115cf4:	e5932000 	ldr	r2, [r3]
  115cf8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115cfc:	e5933000 	ldr	r3, [r3]
    if ((socket_ipv4_multicast_memberships[i].sock == sock) &&
  115d00:	e1520003 	cmp	r2, r3
  115d04:	1a000026 	bne	115da4 <lwip_socket_unregister_membership+0x130>
        ip4_addr_cmp(&socket_ipv4_multicast_memberships[i].multi_addr, multi_addr)) {
  115d08:	e30f3594 	movw	r3, #62868	; 0xf594
  115d0c:	e3403014 	movt	r3, #20
  115d10:	e51b2008 	ldr	r2, [fp, #-8]
  115d14:	e3a0100c 	mov	r1, #12
  115d18:	e0020291 	mul	r2, r1, r2
  115d1c:	e0833002 	add	r3, r3, r2
  115d20:	e2833008 	add	r3, r3, #8
  115d24:	e5932000 	ldr	r2, [r3]
  115d28:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  115d2c:	e5933000 	ldr	r3, [r3]
        ip4_addr_cmp(&socket_ipv4_multicast_memberships[i].if_addr, if_addr) &&
  115d30:	e1520003 	cmp	r2, r3
  115d34:	1a00001a 	bne	115da4 <lwip_socket_unregister_membership+0x130>
      socket_ipv4_multicast_memberships[i].sock = NULL;
  115d38:	e30f3594 	movw	r3, #62868	; 0xf594
  115d3c:	e3403014 	movt	r3, #20
  115d40:	e51b2008 	ldr	r2, [fp, #-8]
  115d44:	e3a0100c 	mov	r1, #12
  115d48:	e0020291 	mul	r2, r1, r2
  115d4c:	e0833002 	add	r3, r3, r2
  115d50:	e3a02000 	mov	r2, #0
  115d54:	e5832000 	str	r2, [r3]
      ip4_addr_set_zero(&socket_ipv4_multicast_memberships[i].if_addr);
  115d58:	e30f3594 	movw	r3, #62868	; 0xf594
  115d5c:	e3403014 	movt	r3, #20
  115d60:	e51b2008 	ldr	r2, [fp, #-8]
  115d64:	e3a0100c 	mov	r1, #12
  115d68:	e0020291 	mul	r2, r1, r2
  115d6c:	e0833002 	add	r3, r3, r2
  115d70:	e2833004 	add	r3, r3, #4
  115d74:	e3a02000 	mov	r2, #0
  115d78:	e5832000 	str	r2, [r3]
      ip4_addr_set_zero(&socket_ipv4_multicast_memberships[i].multi_addr);
  115d7c:	e30f3594 	movw	r3, #62868	; 0xf594
  115d80:	e3403014 	movt	r3, #20
  115d84:	e51b2008 	ldr	r2, [fp, #-8]
  115d88:	e3a0100c 	mov	r1, #12
  115d8c:	e0020291 	mul	r2, r1, r2
  115d90:	e0833002 	add	r3, r3, r2
  115d94:	e2833008 	add	r3, r3, #8
  115d98:	e3a02000 	mov	r2, #0
  115d9c:	e5832000 	str	r2, [r3]
      return;
  115da0:	ea000007 	b	115dc4 <lwip_socket_unregister_membership+0x150>
  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
  115da4:	e51b3008 	ldr	r3, [fp, #-8]
  115da8:	e2833001 	add	r3, r3, #1
  115dac:	e50b3008 	str	r3, [fp, #-8]
  115db0:	e51b3008 	ldr	r3, [fp, #-8]
  115db4:	e3530007 	cmp	r3, #7
  115db8:	daffffbc 	ble	115cb0 <lwip_socket_unregister_membership+0x3c>
  115dbc:	ea000000 	b	115dc4 <lwip_socket_unregister_membership+0x150>
    return;
  115dc0:	e320f000 	nop	{0}
    }
  }
}
  115dc4:	e24bd004 	sub	sp, fp, #4
  115dc8:	e8bd8800 	pop	{fp, pc}

00115dcc <lwip_socket_drop_registered_memberships>:
 *
 * ATTENTION: this function is NOT called from tcpip_thread (or under CORE_LOCK).
 */
static void
lwip_socket_drop_registered_memberships(int s)
{
  115dcc:	e92d4800 	push	{fp, lr}
  115dd0:	e28db004 	add	fp, sp, #4
  115dd4:	e24dd018 	sub	sp, sp, #24
  115dd8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct lwip_sock *sock = get_socket(s);
  115ddc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  115de0:	ebffec4e 	bl	110f20 <get_socket>
  115de4:	e50b000c 	str	r0, [fp, #-12]
  int i;

  if (!sock) {
  115de8:	e51b300c 	ldr	r3, [fp, #-12]
  115dec:	e3530000 	cmp	r3, #0
  115df0:	0a000045 	beq	115f0c <lwip_socket_drop_registered_memberships+0x140>
    return;
  }

  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
  115df4:	e3a03000 	mov	r3, #0
  115df8:	e50b3008 	str	r3, [fp, #-8]
  115dfc:	ea00003e 	b	115efc <lwip_socket_drop_registered_memberships+0x130>
    if (socket_ipv4_multicast_memberships[i].sock == sock) {
  115e00:	e30f3594 	movw	r3, #62868	; 0xf594
  115e04:	e3403014 	movt	r3, #20
  115e08:	e51b2008 	ldr	r2, [fp, #-8]
  115e0c:	e3a0100c 	mov	r1, #12
  115e10:	e0020291 	mul	r2, r1, r2
  115e14:	e0833002 	add	r3, r3, r2
  115e18:	e5933000 	ldr	r3, [r3]
  115e1c:	e51b200c 	ldr	r2, [fp, #-12]
  115e20:	e1520003 	cmp	r2, r3
  115e24:	1a000031 	bne	115ef0 <lwip_socket_drop_registered_memberships+0x124>
      ip_addr_t multi_addr, if_addr;
      ip_addr_copy_from_ip4(multi_addr, socket_ipv4_multicast_memberships[i].multi_addr);
  115e28:	e30f3594 	movw	r3, #62868	; 0xf594
  115e2c:	e3403014 	movt	r3, #20
  115e30:	e51b2008 	ldr	r2, [fp, #-8]
  115e34:	e3a0100c 	mov	r1, #12
  115e38:	e0020291 	mul	r2, r1, r2
  115e3c:	e0833002 	add	r3, r3, r2
  115e40:	e2833008 	add	r3, r3, #8
  115e44:	e5933000 	ldr	r3, [r3]
  115e48:	e50b3010 	str	r3, [fp, #-16]
      ip_addr_copy_from_ip4(if_addr, socket_ipv4_multicast_memberships[i].if_addr);
  115e4c:	e30f3594 	movw	r3, #62868	; 0xf594
  115e50:	e3403014 	movt	r3, #20
  115e54:	e51b2008 	ldr	r2, [fp, #-8]
  115e58:	e3a0100c 	mov	r1, #12
  115e5c:	e0020291 	mul	r2, r1, r2
  115e60:	e0833002 	add	r3, r3, r2
  115e64:	e2833004 	add	r3, r3, #4
  115e68:	e5933000 	ldr	r3, [r3]
  115e6c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      socket_ipv4_multicast_memberships[i].sock = NULL;
  115e70:	e30f3594 	movw	r3, #62868	; 0xf594
  115e74:	e3403014 	movt	r3, #20
  115e78:	e51b2008 	ldr	r2, [fp, #-8]
  115e7c:	e3a0100c 	mov	r1, #12
  115e80:	e0020291 	mul	r2, r1, r2
  115e84:	e0833002 	add	r3, r3, r2
  115e88:	e3a02000 	mov	r2, #0
  115e8c:	e5832000 	str	r2, [r3]
      ip4_addr_set_zero(&socket_ipv4_multicast_memberships[i].if_addr);
  115e90:	e30f3594 	movw	r3, #62868	; 0xf594
  115e94:	e3403014 	movt	r3, #20
  115e98:	e51b2008 	ldr	r2, [fp, #-8]
  115e9c:	e3a0100c 	mov	r1, #12
  115ea0:	e0020291 	mul	r2, r1, r2
  115ea4:	e0833002 	add	r3, r3, r2
  115ea8:	e2833004 	add	r3, r3, #4
  115eac:	e3a02000 	mov	r2, #0
  115eb0:	e5832000 	str	r2, [r3]
      ip4_addr_set_zero(&socket_ipv4_multicast_memberships[i].multi_addr);
  115eb4:	e30f3594 	movw	r3, #62868	; 0xf594
  115eb8:	e3403014 	movt	r3, #20
  115ebc:	e51b2008 	ldr	r2, [fp, #-8]
  115ec0:	e3a0100c 	mov	r1, #12
  115ec4:	e0020291 	mul	r2, r1, r2
  115ec8:	e0833002 	add	r3, r3, r2
  115ecc:	e2833008 	add	r3, r3, #8
  115ed0:	e3a02000 	mov	r2, #0
  115ed4:	e5832000 	str	r2, [r3]

      netconn_join_leave_group(sock->conn, &multi_addr, &if_addr, NETCONN_LEAVE);
  115ed8:	e51b300c 	ldr	r3, [fp, #-12]
  115edc:	e5930000 	ldr	r0, [r3]
  115ee0:	e24b2014 	sub	r2, fp, #20
  115ee4:	e24b1010 	sub	r1, fp, #16
  115ee8:	e3a03001 	mov	r3, #1
  115eec:	ebffd8dc 	bl	10c264 <netconn_join_leave_group>
  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
  115ef0:	e51b3008 	ldr	r3, [fp, #-8]
  115ef4:	e2833001 	add	r3, r3, #1
  115ef8:	e50b3008 	str	r3, [fp, #-8]
  115efc:	e51b3008 	ldr	r3, [fp, #-8]
  115f00:	e3530007 	cmp	r3, #7
  115f04:	daffffbd 	ble	115e00 <lwip_socket_drop_registered_memberships+0x34>
  115f08:	ea000000 	b	115f10 <lwip_socket_drop_registered_memberships+0x144>
    return;
  115f0c:	e320f000 	nop	{0}
    }
  }
}
  115f10:	e24bd004 	sub	sp, fp, #4
  115f14:	e8bd8800 	pop	{fp, pc}

00115f18 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
  115f18:	e92d4800 	push	{fp, lr}
  115f1c:	e28db004 	add	fp, sp, #4
  115f20:	e24dd010 	sub	sp, sp, #16
  115f24:	e50b0010 	str	r0, [fp, #-16]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
  115f28:	e30d3c38 	movw	r3, #56376	; 0xdc38
  115f2c:	e3403014 	movt	r3, #20
  115f30:	e5933000 	ldr	r3, [r3]
  115f34:	e3530000 	cmp	r3, #0
  115f38:	0a000007 	beq	115f5c <tcpip_thread+0x44>
    tcpip_init_done(tcpip_init_done_arg);
  115f3c:	e30d3c38 	movw	r3, #56376	; 0xdc38
  115f40:	e3403014 	movt	r3, #20
  115f44:	e5932000 	ldr	r2, [r3]
  115f48:	e30d3c3c 	movw	r3, #56380	; 0xdc3c
  115f4c:	e3403014 	movt	r3, #20
  115f50:	e5933000 	ldr	r3, [r3]
  115f54:	e1a00003 	mov	r0, r3
  115f58:	e12fff32 	blx	r2
  }

  LOCK_TCPIP_CORE();
  115f5c:	e30f05f4 	movw	r0, #62964	; 0xf5f4
  115f60:	e3400014 	movt	r0, #20
  115f64:	ebffd2e5 	bl	10ab00 <sys_mutex_lock>
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
  115f68:	e30f05f4 	movw	r0, #62964	; 0xf5f4
  115f6c:	e3400014 	movt	r0, #20
  115f70:	ebffd2ee 	bl	10ab30 <sys_mutex_unlock>
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
  115f74:	e24b3008 	sub	r3, fp, #8
  115f78:	e1a01003 	mov	r1, r3
  115f7c:	e30d0c40 	movw	r0, #56384	; 0xdc40
  115f80:	e3400014 	movt	r0, #20
  115f84:	eb004663 	bl	127918 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
  115f88:	e30f05f4 	movw	r0, #62964	; 0xf5f4
  115f8c:	e3400014 	movt	r0, #20
  115f90:	ebffd2da 	bl	10ab00 <sys_mutex_lock>
    if (msg == NULL) {
  115f94:	e51b3008 	ldr	r3, [fp, #-8]
  115f98:	e3530000 	cmp	r3, #0
  115f9c:	1a000007 	bne	115fc0 <tcpip_thread+0xa8>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
  115fa0:	e3060f80 	movw	r0, #28544	; 0x6f80
  115fa4:	e3400014 	movt	r0, #20
  115fa8:	ebffb459 	bl	103114 <rt_kprintf>
  115fac:	e3a01069 	mov	r1, #105	; 0x69
  115fb0:	e3060fa0 	movw	r0, #28576	; 0x6fa0
  115fb4:	e3400014 	movt	r0, #20
  115fb8:	ebffd44c 	bl	10b0f0 <sys_arch_assert>
      continue;
  115fbc:	ea00002e 	b	11607c <tcpip_thread+0x164>
    }
    switch (msg->type) {
  115fc0:	e51b3008 	ldr	r3, [fp, #-8]
  115fc4:	e5933000 	ldr	r3, [r3]
  115fc8:	e3530003 	cmp	r3, #3
  115fcc:	0a000010 	beq	116014 <tcpip_thread+0xfc>
  115fd0:	e3530004 	cmp	r3, #4
  115fd4:	0a000019 	beq	116040 <tcpip_thread+0x128>
  115fd8:	e3530002 	cmp	r3, #2
  115fdc:	1a00001e 	bne	11605c <tcpip_thread+0x144>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
  115fe0:	e51b3008 	ldr	r3, [fp, #-8]
  115fe4:	e593300c 	ldr	r3, [r3, #12]
  115fe8:	e51b2008 	ldr	r2, [fp, #-8]
  115fec:	e5920004 	ldr	r0, [r2, #4]
  115ff0:	e51b2008 	ldr	r2, [fp, #-8]
  115ff4:	e5922008 	ldr	r2, [r2, #8]
  115ff8:	e1a01002 	mov	r1, r2
  115ffc:	e12fff33 	blx	r3
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
  116000:	e51b3008 	ldr	r3, [fp, #-8]
  116004:	e1a01003 	mov	r1, r3
  116008:	e3a0000a 	mov	r0, #10
  11600c:	eb000c99 	bl	119278 <memp_free>
      break;
  116010:	ea000019 	b	11607c <tcpip_thread+0x164>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
  116014:	e51b3008 	ldr	r3, [fp, #-8]
  116018:	e5933004 	ldr	r3, [r3, #4]
  11601c:	e51b2008 	ldr	r2, [fp, #-8]
  116020:	e5922008 	ldr	r2, [r2, #8]
  116024:	e1a00002 	mov	r0, r2
  116028:	e12fff33 	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
  11602c:	e51b3008 	ldr	r3, [fp, #-8]
  116030:	e1a01003 	mov	r1, r3
  116034:	e3a00009 	mov	r0, #9
  116038:	eb000c8e 	bl	119278 <memp_free>
      break;
  11603c:	ea00000e 	b	11607c <tcpip_thread+0x164>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
  116040:	e51b3008 	ldr	r3, [fp, #-8]
  116044:	e5933004 	ldr	r3, [r3, #4]
  116048:	e51b2008 	ldr	r2, [fp, #-8]
  11604c:	e5922008 	ldr	r2, [r2, #8]
  116050:	e1a00002 	mov	r0, r2
  116054:	e12fff33 	blx	r3
      break;
  116058:	ea000007 	b	11607c <tcpip_thread+0x164>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
  11605c:	e3060f80 	movw	r0, #28544	; 0x6f80
  116060:	e3400014 	movt	r0, #20
  116064:	ebffb42a 	bl	103114 <rt_kprintf>
  116068:	e3a0109b 	mov	r1, #155	; 0x9b
  11606c:	e3060fa0 	movw	r0, #28576	; 0x6fa0
  116070:	e3400014 	movt	r0, #20
  116074:	ebffd41d 	bl	10b0f0 <sys_arch_assert>
      break;
  116078:	e320f000 	nop	{0}
    UNLOCK_TCPIP_CORE();
  11607c:	eaffffb9 	b	115f68 <tcpip_thread+0x50>

00116080 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
  116080:	e92d4800 	push	{fp, lr}
  116084:	e28db004 	add	fp, sp, #4
  116088:	e24dd018 	sub	sp, sp, #24
  11608c:	e50b0010 	str	r0, [fp, #-16]
  116090:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  116094:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
  116098:	e30d0c40 	movw	r0, #56384	; 0xdc40
  11609c:	e3400014 	movt	r0, #20
  1160a0:	ebffd3c9 	bl	10afcc <sys_mbox_valid>
  1160a4:	e1a03000 	mov	r3, r0
  1160a8:	e3530000 	cmp	r3, #0
  1160ac:	1a000006 	bne	1160cc <tcpip_inpkt+0x4c>
  1160b0:	e3060fcc 	movw	r0, #28620	; 0x6fcc
  1160b4:	e3400014 	movt	r0, #20
  1160b8:	ebffb415 	bl	103114 <rt_kprintf>
  1160bc:	e3a010b5 	mov	r1, #181	; 0xb5
  1160c0:	e3060fa0 	movw	r0, #28576	; 0x6fa0
  1160c4:	e3400014 	movt	r0, #20
  1160c8:	ebffd408 	bl	10b0f0 <sys_arch_assert>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
  1160cc:	e3a020b7 	mov	r2, #183	; 0xb7
  1160d0:	e3061fa0 	movw	r1, #28576	; 0x6fa0
  1160d4:	e3401014 	movt	r1, #20
  1160d8:	e3a0000a 	mov	r0, #10
  1160dc:	eb000bfd 	bl	1190d8 <memp_malloc_fn>
  1160e0:	e50b0008 	str	r0, [fp, #-8]
  if (msg == NULL) {
  1160e4:	e51b3008 	ldr	r3, [fp, #-8]
  1160e8:	e3530000 	cmp	r3, #0
  1160ec:	1a000001 	bne	1160f8 <tcpip_inpkt+0x78>
    return ERR_MEM;
  1160f0:	e3e03000 	mvn	r3, #0
  1160f4:	ea000018 	b	11615c <tcpip_inpkt+0xdc>
  }

  msg->type = TCPIP_MSG_INPKT;
  1160f8:	e51b3008 	ldr	r3, [fp, #-8]
  1160fc:	e3a02002 	mov	r2, #2
  116100:	e5832000 	str	r2, [r3]
  msg->msg.inp.p = p;
  116104:	e51b3008 	ldr	r3, [fp, #-8]
  116108:	e51b2010 	ldr	r2, [fp, #-16]
  11610c:	e5832004 	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
  116110:	e51b3008 	ldr	r3, [fp, #-8]
  116114:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  116118:	e5832008 	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
  11611c:	e51b3008 	ldr	r3, [fp, #-8]
  116120:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  116124:	e583200c 	str	r2, [r3, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
  116128:	e51b1008 	ldr	r1, [fp, #-8]
  11612c:	e30d0c40 	movw	r0, #56384	; 0xdc40
  116130:	e3400014 	movt	r0, #20
  116134:	ebffd346 	bl	10ae54 <sys_mbox_trypost>
  116138:	e1a03000 	mov	r3, r0
  11613c:	e3530000 	cmp	r3, #0
  116140:	0a000004 	beq	116158 <tcpip_inpkt+0xd8>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
  116144:	e51b1008 	ldr	r1, [fp, #-8]
  116148:	e3a0000a 	mov	r0, #10
  11614c:	eb000c49 	bl	119278 <memp_free>
    return ERR_MEM;
  116150:	e3e03000 	mvn	r3, #0
  116154:	ea000000 	b	11615c <tcpip_inpkt+0xdc>
  }
  return ERR_OK;
  116158:	e3a03000 	mov	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
  11615c:	e1a00003 	mov	r0, r3
  116160:	e24bd004 	sub	sp, fp, #4
  116164:	e8bd8800 	pop	{fp, pc}

00116168 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
  116168:	e92d4800 	push	{fp, lr}
  11616c:	e28db004 	add	fp, sp, #4
  116170:	e24dd008 	sub	sp, sp, #8
  116174:	e50b0008 	str	r0, [fp, #-8]
  116178:	e50b100c 	str	r1, [fp, #-12]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
  11617c:	e51b300c 	ldr	r3, [fp, #-12]
  116180:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  116184:	e2033018 	and	r3, r3, #24
  116188:	e3530000 	cmp	r3, #0
  11618c:	0a000006 	beq	1161ac <tcpip_input+0x44>
    return tcpip_inpkt(p, inp, ethernet_input);
  116190:	e3082c04 	movw	r2, #35844	; 0x8c04
  116194:	e3402012 	movt	r2, #18
  116198:	e51b100c 	ldr	r1, [fp, #-12]
  11619c:	e51b0008 	ldr	r0, [fp, #-8]
  1161a0:	ebffffb6 	bl	116080 <tcpip_inpkt>
  1161a4:	e1a03000 	mov	r3, r0
  1161a8:	ea000005 	b	1161c4 <tcpip_input+0x5c>
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
  1161ac:	e3012434 	movw	r2, #5172	; 0x1434
  1161b0:	e3402013 	movt	r2, #19
  1161b4:	e51b100c 	ldr	r1, [fp, #-12]
  1161b8:	e51b0008 	ldr	r0, [fp, #-8]
  1161bc:	ebffffaf 	bl	116080 <tcpip_inpkt>
  1161c0:	e1a03000 	mov	r3, r0
}
  1161c4:	e1a00003 	mov	r0, r3
  1161c8:	e24bd004 	sub	sp, fp, #4
  1161cc:	e8bd8800 	pop	{fp, pc}

001161d0 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
  1161d0:	e92d4800 	push	{fp, lr}
  1161d4:	e28db004 	add	fp, sp, #4
  1161d8:	e24dd018 	sub	sp, sp, #24
  1161dc:	e50b0010 	str	r0, [fp, #-16]
  1161e0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1161e4:	e1a03002 	mov	r3, r2
  1161e8:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
  1161ec:	e30d0c40 	movw	r0, #56384	; 0xdc40
  1161f0:	e3400014 	movt	r0, #20
  1161f4:	ebffd374 	bl	10afcc <sys_mbox_valid>
  1161f8:	e1a03000 	mov	r3, r0
  1161fc:	e3530000 	cmp	r3, #0
  116200:	1a000006 	bne	116220 <tcpip_callback_with_block+0x50>
  116204:	e3060fcc 	movw	r0, #28620	; 0x6fcc
  116208:	e3400014 	movt	r0, #20
  11620c:	ebffb3c0 	bl	103114 <rt_kprintf>
  116210:	e3a010ee 	mov	r1, #238	; 0xee
  116214:	e3060fa0 	movw	r0, #28576	; 0x6fa0
  116218:	e3400014 	movt	r0, #20
  11621c:	ebffd3b3 	bl	10b0f0 <sys_arch_assert>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
  116220:	e3a020f0 	mov	r2, #240	; 0xf0
  116224:	e3061fa0 	movw	r1, #28576	; 0x6fa0
  116228:	e3401014 	movt	r1, #20
  11622c:	e3a00009 	mov	r0, #9
  116230:	eb000ba8 	bl	1190d8 <memp_malloc_fn>
  116234:	e50b0008 	str	r0, [fp, #-8]
  if (msg == NULL) {
  116238:	e51b3008 	ldr	r3, [fp, #-8]
  11623c:	e3530000 	cmp	r3, #0
  116240:	1a000001 	bne	11624c <tcpip_callback_with_block+0x7c>
    return ERR_MEM;
  116244:	e3e03000 	mvn	r3, #0
  116248:	ea00001d 	b	1162c4 <tcpip_callback_with_block+0xf4>
  }

  msg->type = TCPIP_MSG_CALLBACK;
  11624c:	e51b3008 	ldr	r3, [fp, #-8]
  116250:	e3a02003 	mov	r2, #3
  116254:	e5832000 	str	r2, [r3]
  msg->msg.cb.function = function;
  116258:	e51b3008 	ldr	r3, [fp, #-8]
  11625c:	e51b2010 	ldr	r2, [fp, #-16]
  116260:	e5832004 	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
  116264:	e51b3008 	ldr	r3, [fp, #-8]
  116268:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11626c:	e5832008 	str	r2, [r3, #8]
  if (block) {
  116270:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  116274:	e3530000 	cmp	r3, #0
  116278:	0a000004 	beq	116290 <tcpip_callback_with_block+0xc0>
    sys_mbox_post(&mbox, msg);
  11627c:	e51b1008 	ldr	r1, [fp, #-8]
  116280:	e30d0c40 	movw	r0, #56384	; 0xdc40
  116284:	e3400014 	movt	r0, #20
  116288:	ebffd2e6 	bl	10ae28 <sys_mbox_post>
  11628c:	ea00000b 	b	1162c0 <tcpip_callback_with_block+0xf0>
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
  116290:	e51b1008 	ldr	r1, [fp, #-8]
  116294:	e30d0c40 	movw	r0, #56384	; 0xdc40
  116298:	e3400014 	movt	r0, #20
  11629c:	ebffd2ec 	bl	10ae54 <sys_mbox_trypost>
  1162a0:	e1a03000 	mov	r3, r0
  1162a4:	e3530000 	cmp	r3, #0
  1162a8:	0a000004 	beq	1162c0 <tcpip_callback_with_block+0xf0>
      memp_free(MEMP_TCPIP_MSG_API, msg);
  1162ac:	e51b1008 	ldr	r1, [fp, #-8]
  1162b0:	e3a00009 	mov	r0, #9
  1162b4:	eb000bef 	bl	119278 <memp_free>
      return ERR_MEM;
  1162b8:	e3e03000 	mvn	r3, #0
  1162bc:	ea000000 	b	1162c4 <tcpip_callback_with_block+0xf4>
    }
  }
  return ERR_OK;
  1162c0:	e3a03000 	mov	r3, #0
}
  1162c4:	e1a00003 	mov	r0, r3
  1162c8:	e24bd004 	sub	sp, fp, #4
  1162cc:	e8bd8800 	pop	{fp, pc}

001162d0 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t* sem)
{
  1162d0:	e92d4800 	push	{fp, lr}
  1162d4:	e28db004 	add	fp, sp, #4
  1162d8:	e24dd010 	sub	sp, sp, #16
  1162dc:	e50b0008 	str	r0, [fp, #-8]
  1162e0:	e50b100c 	str	r1, [fp, #-12]
  1162e4:	e50b2010 	str	r2, [fp, #-16]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
  1162e8:	e30f05f4 	movw	r0, #62964	; 0xf5f4
  1162ec:	e3400014 	movt	r0, #20
  1162f0:	ebffd202 	bl	10ab00 <sys_mutex_lock>
  fn(apimsg);
  1162f4:	e51b3008 	ldr	r3, [fp, #-8]
  1162f8:	e51b000c 	ldr	r0, [fp, #-12]
  1162fc:	e12fff33 	blx	r3
  UNLOCK_TCPIP_CORE();
  116300:	e30f05f4 	movw	r0, #62964	; 0xf5f4
  116304:	e3400014 	movt	r0, #20
  116308:	ebffd208 	bl	10ab30 <sys_mutex_unlock>
  return ERR_OK;
  11630c:	e3a03000 	mov	r3, #0
  sys_mbox_post(&mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
  116310:	e1a00003 	mov	r0, r3
  116314:	e24bd004 	sub	sp, fp, #4
  116318:	e8bd8800 	pop	{fp, pc}

0011631c <tcpip_api_call>:
 * @param call Call parameters
 * @return Return value from tcpip_api_call_fn
 */
err_t
tcpip_api_call(tcpip_api_call_fn fn, struct tcpip_api_call_data *call)
{
  11631c:	e92d4800 	push	{fp, lr}
  116320:	e28db004 	add	fp, sp, #4
  116324:	e24dd010 	sub	sp, sp, #16
  116328:	e50b0010 	str	r0, [fp, #-16]
  11632c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
#if LWIP_TCPIP_CORE_LOCKING
  err_t err;
  LOCK_TCPIP_CORE();
  116330:	e30f05f4 	movw	r0, #62964	; 0xf5f4
  116334:	e3400014 	movt	r0, #20
  116338:	ebffd1f0 	bl	10ab00 <sys_mutex_lock>
  err = fn(call);
  11633c:	e51b3010 	ldr	r3, [fp, #-16]
  116340:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  116344:	e12fff33 	blx	r3
  116348:	e1a03000 	mov	r3, r0
  11634c:	e54b3005 	strb	r3, [fp, #-5]
  UNLOCK_TCPIP_CORE();
  116350:	e30f05f4 	movw	r0, #62964	; 0xf5f4
  116354:	e3400014 	movt	r0, #20
  116358:	ebffd1f4 	bl	10ab30 <sys_mutex_unlock>
  return err;
  11635c:	e15b30d5 	ldrsb	r3, [fp, #-5]
  sys_sem_free(&call->sem);
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  return call->err;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
  116360:	e1a00003 	mov	r0, r3
  116364:	e24bd004 	sub	sp, fp, #4
  116368:	e8bd8800 	pop	{fp, pc}

0011636c <tcpip_callbackmsg_new>:
 * @param ctx parameter passed to function
 * @return a struct pointer to pass to tcpip_trycallback().
 */
struct tcpip_callback_msg*
tcpip_callbackmsg_new(tcpip_callback_fn function, void *ctx)
{
  11636c:	e92d4800 	push	{fp, lr}
  116370:	e28db004 	add	fp, sp, #4
  116374:	e24dd010 	sub	sp, sp, #16
  116378:	e50b0010 	str	r0, [fp, #-16]
  11637c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct tcpip_msg *msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
  116380:	e30021a1 	movw	r2, #417	; 0x1a1
  116384:	e3061fa0 	movw	r1, #28576	; 0x6fa0
  116388:	e3401014 	movt	r1, #20
  11638c:	e3a00009 	mov	r0, #9
  116390:	eb000b50 	bl	1190d8 <memp_malloc_fn>
  116394:	e50b0008 	str	r0, [fp, #-8]
  if (msg == NULL) {
  116398:	e51b3008 	ldr	r3, [fp, #-8]
  11639c:	e3530000 	cmp	r3, #0
  1163a0:	1a000001 	bne	1163ac <tcpip_callbackmsg_new+0x40>
    return NULL;
  1163a4:	e3a03000 	mov	r3, #0
  1163a8:	ea000009 	b	1163d4 <tcpip_callbackmsg_new+0x68>
  }
  msg->type = TCPIP_MSG_CALLBACK_STATIC;
  1163ac:	e51b3008 	ldr	r3, [fp, #-8]
  1163b0:	e3a02004 	mov	r2, #4
  1163b4:	e5832000 	str	r2, [r3]
  msg->msg.cb.function = function;
  1163b8:	e51b3008 	ldr	r3, [fp, #-8]
  1163bc:	e51b2010 	ldr	r2, [fp, #-16]
  1163c0:	e5832004 	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
  1163c4:	e51b3008 	ldr	r3, [fp, #-8]
  1163c8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1163cc:	e5832008 	str	r2, [r3, #8]
  return (struct tcpip_callback_msg*)msg;
  1163d0:	e51b3008 	ldr	r3, [fp, #-8]
}
  1163d4:	e1a00003 	mov	r0, r3
  1163d8:	e24bd004 	sub	sp, fp, #4
  1163dc:	e8bd8800 	pop	{fp, pc}

001163e0 <tcpip_callbackmsg_delete>:
 *
 * @param msg the message to free
 */
void
tcpip_callbackmsg_delete(struct tcpip_callback_msg* msg)
{
  1163e0:	e92d4800 	push	{fp, lr}
  1163e4:	e28db004 	add	fp, sp, #4
  1163e8:	e24dd008 	sub	sp, sp, #8
  1163ec:	e50b0008 	str	r0, [fp, #-8]
  memp_free(MEMP_TCPIP_MSG_API, msg);
  1163f0:	e51b1008 	ldr	r1, [fp, #-8]
  1163f4:	e3a00009 	mov	r0, #9
  1163f8:	eb000b9e 	bl	119278 <memp_free>
}
  1163fc:	e320f000 	nop	{0}
  116400:	e24bd004 	sub	sp, fp, #4
  116404:	e8bd8800 	pop	{fp, pc}

00116408 <tcpip_trycallback>:
 * @param msg pointer to the message to post
 * @return sys_mbox_trypost() return code
 */
err_t
tcpip_trycallback(struct tcpip_callback_msg* msg)
{
  116408:	e92d4800 	push	{fp, lr}
  11640c:	e28db004 	add	fp, sp, #4
  116410:	e24dd008 	sub	sp, sp, #8
  116414:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
  116418:	e30d0c40 	movw	r0, #56384	; 0xdc40
  11641c:	e3400014 	movt	r0, #20
  116420:	ebffd2e9 	bl	10afcc <sys_mbox_valid>
  116424:	e1a03000 	mov	r3, r0
  116428:	e3530000 	cmp	r3, #0
  11642c:	1a000006 	bne	11644c <tcpip_trycallback+0x44>
  116430:	e3060fcc 	movw	r0, #28620	; 0x6fcc
  116434:	e3400014 	movt	r0, #20
  116438:	ebffb335 	bl	103114 <rt_kprintf>
  11643c:	e3a01d07 	mov	r1, #448	; 0x1c0
  116440:	e3060fa0 	movw	r0, #28576	; 0x6fa0
  116444:	e3400014 	movt	r0, #20
  116448:	ebffd328 	bl	10b0f0 <sys_arch_assert>
  return sys_mbox_trypost(&mbox, msg);
  11644c:	e51b1008 	ldr	r1, [fp, #-8]
  116450:	e30d0c40 	movw	r0, #56384	; 0xdc40
  116454:	e3400014 	movt	r0, #20
  116458:	ebffd27d 	bl	10ae54 <sys_mbox_trypost>
  11645c:	e1a03000 	mov	r3, r0
}
  116460:	e1a00003 	mov	r0, r3
  116464:	e24bd004 	sub	sp, fp, #4
  116468:	e8bd8800 	pop	{fp, pc}

0011646c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
  11646c:	e92d4800 	push	{fp, lr}
  116470:	e28db004 	add	fp, sp, #4
  116474:	e24dd010 	sub	sp, sp, #16
  116478:	e50b0008 	str	r0, [fp, #-8]
  11647c:	e50b100c 	str	r1, [fp, #-12]
  lwip_init();
  116480:	eb0009b8 	bl	118b68 <lwip_init>

  tcpip_init_done = initfunc;
  116484:	e30d3c38 	movw	r3, #56376	; 0xdc38
  116488:	e3403014 	movt	r3, #20
  11648c:	e51b2008 	ldr	r2, [fp, #-8]
  116490:	e5832000 	str	r2, [r3]
  tcpip_init_done_arg = arg;
  116494:	e30d3c3c 	movw	r3, #56380	; 0xdc3c
  116498:	e3403014 	movt	r3, #20
  11649c:	e51b200c 	ldr	r2, [fp, #-12]
  1164a0:	e5832000 	str	r2, [r3]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
  1164a4:	e3001101 	movw	r1, #257	; 0x101
  1164a8:	e30d0c40 	movw	r0, #56384	; 0xdc40
  1164ac:	e3400014 	movt	r0, #20
  1164b0:	ebffd1c9 	bl	10abdc <sys_mbox_new>
  1164b4:	e1a03000 	mov	r3, r0
  1164b8:	e3530000 	cmp	r3, #0
  1164bc:	0a000006 	beq	1164dc <tcpip_init+0x70>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
  1164c0:	e3060fdc 	movw	r0, #28636	; 0x6fdc
  1164c4:	e3400014 	movt	r0, #20
  1164c8:	ebffb311 	bl	103114 <rt_kprintf>
  1164cc:	e30011d5 	movw	r1, #469	; 0x1d5
  1164d0:	e3060fa0 	movw	r0, #28576	; 0x6fa0
  1164d4:	e3400014 	movt	r0, #20
  1164d8:	ebffd304 	bl	10b0f0 <sys_arch_assert>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
  1164dc:	e30f05f4 	movw	r0, #62964	; 0xf5f4
  1164e0:	e3400014 	movt	r0, #20
  1164e4:	ebffd15d 	bl	10aa60 <sys_mutex_new>
  1164e8:	e1a03000 	mov	r3, r0
  1164ec:	e3530000 	cmp	r3, #0
  1164f0:	0a000006 	beq	116510 <tcpip_init+0xa4>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
  1164f4:	e3070000 	movw	r0, #28672	; 0x7000
  1164f8:	e3400014 	movt	r0, #20
  1164fc:	ebffb304 	bl	103114 <rt_kprintf>
  116500:	e30011d9 	movw	r1, #473	; 0x1d9
  116504:	e3060fa0 	movw	r0, #28576	; 0x6fa0
  116508:	e3400014 	movt	r0, #20
  11650c:	ebffd2f7 	bl	10b0f0 <sys_arch_assert>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
  116510:	e3a03017 	mov	r3, #23
  116514:	e58d3000 	str	r3, [sp]
  116518:	e3a03a02 	mov	r3, #8192	; 0x2000
  11651c:	e3a02000 	mov	r2, #0
  116520:	e3051f18 	movw	r1, #24344	; 0x5f18
  116524:	e3401011 	movt	r1, #17
  116528:	e3070024 	movw	r0, #28708	; 0x7024
  11652c:	e3400014 	movt	r0, #20
  116530:	ebffd2ba 	bl	10b020 <sys_thread_new>
}
  116534:	e320f000 	nop	{0}
  116538:	e24bd004 	sub	sp, fp, #4
  11653c:	e8bd8800 	pop	{fp, pc}

00116540 <pbuf_free_int>:
 *
 * @param p The pbuf (chain) to be dereferenced.
 */
static void
pbuf_free_int(void *p)
{
  116540:	e92d4800 	push	{fp, lr}
  116544:	e28db004 	add	fp, sp, #4
  116548:	e24dd010 	sub	sp, sp, #16
  11654c:	e50b0010 	str	r0, [fp, #-16]
  struct pbuf *q = (struct pbuf *)p;
  116550:	e51b3010 	ldr	r3, [fp, #-16]
  116554:	e50b3008 	str	r3, [fp, #-8]
  pbuf_free(q);
  116558:	e51b0008 	ldr	r0, [fp, #-8]
  11655c:	eb001253 	bl	11aeb0 <pbuf_free>
}
  116560:	e320f000 	nop	{0}
  116564:	e24bd004 	sub	sp, fp, #4
  116568:	e8bd8800 	pop	{fp, pc}

0011656c <pbuf_free_callback>:
 * @param p The pbuf (chain) to be dereferenced.
 * @return ERR_OK if callback could be enqueued, an err_t if not
 */
err_t
pbuf_free_callback(struct pbuf *p)
{
  11656c:	e92d4800 	push	{fp, lr}
  116570:	e28db004 	add	fp, sp, #4
  116574:	e24dd008 	sub	sp, sp, #8
  116578:	e50b0008 	str	r0, [fp, #-8]
  return tcpip_callback_with_block(pbuf_free_int, p, 0);
  11657c:	e3a02000 	mov	r2, #0
  116580:	e51b1008 	ldr	r1, [fp, #-8]
  116584:	e3060540 	movw	r0, #25920	; 0x6540
  116588:	e3400011 	movt	r0, #17
  11658c:	ebffff0f 	bl	1161d0 <tcpip_callback_with_block>
  116590:	e1a03000 	mov	r3, r0
}
  116594:	e1a00003 	mov	r0, r3
  116598:	e24bd004 	sub	sp, fp, #4
  11659c:	e8bd8800 	pop	{fp, pc}

001165a0 <mem_free_callback>:
 * @param m the heap memory to free
 * @return ERR_OK if callback could be enqueued, an err_t if not
 */
err_t
mem_free_callback(void *m)
{
  1165a0:	e92d4800 	push	{fp, lr}
  1165a4:	e28db004 	add	fp, sp, #4
  1165a8:	e24dd008 	sub	sp, sp, #8
  1165ac:	e50b0008 	str	r0, [fp, #-8]
  return tcpip_callback_with_block(mem_free, m, 0);
  1165b0:	e3a02000 	mov	r2, #0
  1165b4:	e51b1008 	ldr	r1, [fp, #-8]
  1165b8:	e30b0224 	movw	r0, #45604	; 0xb224
  1165bc:	e3400010 	movt	r0, #16
  1165c0:	ebffff02 	bl	1161d0 <tcpip_callback_with_block>
  1165c4:	e1a03000 	mov	r3, r0
}
  1165c8:	e1a00003 	mov	r0, r3
  1165cc:	e24bd004 	sub	sp, fp, #4
  1165d0:	e8bd8800 	pop	{fp, pc}

001165d4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  1165d4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1165d8:	e28db000 	add	fp, sp, #0
  1165dc:	e24dd00c 	sub	sp, sp, #12
  1165e0:	e1a03000 	mov	r3, r0
  1165e4:	e14b30b6 	strh	r3, [fp, #-6]
  return (u16_t)PP_HTONS(n);
  1165e8:	e15b30b6 	ldrh	r3, [fp, #-6]
  1165ec:	e6bf3fb3 	rev16	r3, r3
  1165f0:	e6ff3073 	uxth	r3, r3
}
  1165f4:	e1a00003 	mov	r0, r3
  1165f8:	e28bd000 	add	sp, fp, #0
  1165fc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  116600:	e12fff1e 	bx	lr

00116604 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
  116604:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  116608:	e28db000 	add	fp, sp, #0
  11660c:	e24dd00c 	sub	sp, sp, #12
  116610:	e50b0008 	str	r0, [fp, #-8]
  return (u32_t)PP_HTONL(n);
  116614:	e51b3008 	ldr	r3, [fp, #-8]
  116618:	e1a02c03 	lsl	r2, r3, #24
  11661c:	e51b3008 	ldr	r3, [fp, #-8]
  116620:	e1a03403 	lsl	r3, r3, #8
  116624:	e20338ff 	and	r3, r3, #16711680	; 0xff0000
  116628:	e1822003 	orr	r2, r2, r3
  11662c:	e51b3008 	ldr	r3, [fp, #-8]
  116630:	e1a03423 	lsr	r3, r3, #8
  116634:	e2033cff 	and	r3, r3, #65280	; 0xff00
  116638:	e1822003 	orr	r2, r2, r3
  11663c:	e51b3008 	ldr	r3, [fp, #-8]
  116640:	e1a03c23 	lsr	r3, r3, #24
  116644:	e1823003 	orr	r3, r2, r3
}
  116648:	e1a00003 	mov	r0, r3
  11664c:	e28bd000 	add	sp, fp, #0
  116650:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  116654:	e12fff1e 	bx	lr

00116658 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char*
lwip_strnstr(const char* buffer, const char* token, size_t n)
{
  116658:	e92d4800 	push	{fp, lr}
  11665c:	e28db004 	add	fp, sp, #4
  116660:	e24dd018 	sub	sp, sp, #24
  116664:	e50b0010 	str	r0, [fp, #-16]
  116668:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  11666c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  const char* p;
  size_t tokenlen = strlen(token);
  116670:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  116674:	eb00ab8f 	bl	1414b8 <strlen>
  116678:	e50b000c 	str	r0, [fp, #-12]
  if (tokenlen == 0) {
  11667c:	e51b300c 	ldr	r3, [fp, #-12]
  116680:	e3530000 	cmp	r3, #0
  116684:	1a000001 	bne	116690 <lwip_strnstr+0x38>
    return LWIP_CONST_CAST(char *, buffer);
  116688:	e51b3010 	ldr	r3, [fp, #-16]
  11668c:	ea000021 	b	116718 <lwip_strnstr+0xc0>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
  116690:	e51b3010 	ldr	r3, [fp, #-16]
  116694:	e50b3008 	str	r3, [fp, #-8]
  116698:	ea000011 	b	1166e4 <lwip_strnstr+0x8c>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
  11669c:	e51b3008 	ldr	r3, [fp, #-8]
  1166a0:	e5d32000 	ldrb	r2, [r3]
  1166a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1166a8:	e5d33000 	ldrb	r3, [r3]
  1166ac:	e1520003 	cmp	r2, r3
  1166b0:	1a000008 	bne	1166d8 <lwip_strnstr+0x80>
  1166b4:	e51b200c 	ldr	r2, [fp, #-12]
  1166b8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1166bc:	e51b0008 	ldr	r0, [fp, #-8]
  1166c0:	eb00aba8 	bl	141568 <strncmp>
  1166c4:	e1a03000 	mov	r3, r0
  1166c8:	e3530000 	cmp	r3, #0
  1166cc:	1a000001 	bne	1166d8 <lwip_strnstr+0x80>
      return LWIP_CONST_CAST(char *, p);
  1166d0:	e51b3008 	ldr	r3, [fp, #-8]
  1166d4:	ea00000f 	b	116718 <lwip_strnstr+0xc0>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
  1166d8:	e51b3008 	ldr	r3, [fp, #-8]
  1166dc:	e2833001 	add	r3, r3, #1
  1166e0:	e50b3008 	str	r3, [fp, #-8]
  1166e4:	e51b3008 	ldr	r3, [fp, #-8]
  1166e8:	e5d33000 	ldrb	r3, [r3]
  1166ec:	e3530000 	cmp	r3, #0
  1166f0:	0a000007 	beq	116714 <lwip_strnstr+0xbc>
  1166f4:	e51b2008 	ldr	r2, [fp, #-8]
  1166f8:	e51b300c 	ldr	r3, [fp, #-12]
  1166fc:	e0822003 	add	r2, r2, r3
  116700:	e51b1010 	ldr	r1, [fp, #-16]
  116704:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  116708:	e0813003 	add	r3, r1, r3
  11670c:	e1520003 	cmp	r2, r3
  116710:	9affffe1 	bls	11669c <lwip_strnstr+0x44>
    }
  }
  return NULL;
  116714:	e3a03000 	mov	r3, #0
}
  116718:	e1a00003 	mov	r0, r3
  11671c:	e24bd004 	sub	sp, fp, #4
  116720:	e8bd8800 	pop	{fp, pc}

00116724 <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char* str1, const char* str2)
{
  116724:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  116728:	e28db000 	add	fp, sp, #0
  11672c:	e24dd014 	sub	sp, sp, #20
  116730:	e50b0010 	str	r0, [fp, #-16]
  116734:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  char c1, c2;

  do {
    c1 = *str1++;
  116738:	e51b3010 	ldr	r3, [fp, #-16]
  11673c:	e2832001 	add	r2, r3, #1
  116740:	e50b2010 	str	r2, [fp, #-16]
  116744:	e5d33000 	ldrb	r3, [r3]
  116748:	e54b3005 	strb	r3, [fp, #-5]
    c2 = *str2++;
  11674c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116750:	e2832001 	add	r2, r3, #1
  116754:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
  116758:	e5d33000 	ldrb	r3, [r3]
  11675c:	e54b3006 	strb	r3, [fp, #-6]
    if (c1 != c2) {
  116760:	e55b2005 	ldrb	r2, [fp, #-5]
  116764:	e55b3006 	ldrb	r3, [fp, #-6]
  116768:	e1520003 	cmp	r2, r3
  11676c:	0a000014 	beq	1167c4 <lwip_stricmp+0xa0>
      char c1_upc = c1 | 0x20;
  116770:	e55b3005 	ldrb	r3, [fp, #-5]
  116774:	e3833020 	orr	r3, r3, #32
  116778:	e54b3007 	strb	r3, [fp, #-7]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
  11677c:	e55b3007 	ldrb	r3, [fp, #-7]
  116780:	e3530060 	cmp	r3, #96	; 0x60
  116784:	9a00000b 	bls	1167b8 <lwip_stricmp+0x94>
  116788:	e55b3007 	ldrb	r3, [fp, #-7]
  11678c:	e353007a 	cmp	r3, #122	; 0x7a
  116790:	8a000008 	bhi	1167b8 <lwip_stricmp+0x94>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
  116794:	e55b3006 	ldrb	r3, [fp, #-6]
  116798:	e3833020 	orr	r3, r3, #32
  11679c:	e54b3008 	strb	r3, [fp, #-8]
        if (c1_upc != c2_upc) {
  1167a0:	e55b2007 	ldrb	r2, [fp, #-7]
  1167a4:	e55b3008 	ldrb	r3, [fp, #-8]
  1167a8:	e1520003 	cmp	r2, r3
  1167ac:	0a000003 	beq	1167c0 <lwip_stricmp+0x9c>
          /* still not equal */
          /* don't care for < or > */
          return 1;
  1167b0:	e3a03001 	mov	r3, #1
  1167b4:	ea000006 	b	1167d4 <lwip_stricmp+0xb0>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
  1167b8:	e3a03001 	mov	r3, #1
  1167bc:	ea000004 	b	1167d4 <lwip_stricmp+0xb0>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
  1167c0:	e320f000 	nop	{0}
      }
    }
  } while (c1 != 0);
  1167c4:	e55b3005 	ldrb	r3, [fp, #-5]
  1167c8:	e3530000 	cmp	r3, #0
  1167cc:	1affffd9 	bne	116738 <lwip_stricmp+0x14>
  return 0;
  1167d0:	e3a03000 	mov	r3, #0
}
  1167d4:	e1a00003 	mov	r0, r3
  1167d8:	e28bd000 	add	sp, fp, #0
  1167dc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1167e0:	e12fff1e 	bx	lr

001167e4 <lwip_strnicmp>:
 * lwIP default implementation for strnicmp() non-standard function.
 * This can be \#defined to strnicmp() depending on your platform port.
 */
int
lwip_strnicmp(const char* str1, const char* str2, size_t len)
{
  1167e4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1167e8:	e28db000 	add	fp, sp, #0
  1167ec:	e24dd01c 	sub	sp, sp, #28
  1167f0:	e50b0010 	str	r0, [fp, #-16]
  1167f4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1167f8:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  char c1, c2;

  do {
    c1 = *str1++;
  1167fc:	e51b3010 	ldr	r3, [fp, #-16]
  116800:	e2832001 	add	r2, r3, #1
  116804:	e50b2010 	str	r2, [fp, #-16]
  116808:	e5d33000 	ldrb	r3, [r3]
  11680c:	e54b3005 	strb	r3, [fp, #-5]
    c2 = *str2++;
  116810:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116814:	e2832001 	add	r2, r3, #1
  116818:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
  11681c:	e5d33000 	ldrb	r3, [r3]
  116820:	e54b3006 	strb	r3, [fp, #-6]
    if (c1 != c2) {
  116824:	e55b2005 	ldrb	r2, [fp, #-5]
  116828:	e55b3006 	ldrb	r3, [fp, #-6]
  11682c:	e1520003 	cmp	r2, r3
  116830:	0a000014 	beq	116888 <lwip_strnicmp+0xa4>
      char c1_upc = c1 | 0x20;
  116834:	e55b3005 	ldrb	r3, [fp, #-5]
  116838:	e3833020 	orr	r3, r3, #32
  11683c:	e54b3007 	strb	r3, [fp, #-7]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
  116840:	e55b3007 	ldrb	r3, [fp, #-7]
  116844:	e3530060 	cmp	r3, #96	; 0x60
  116848:	9a00000b 	bls	11687c <lwip_strnicmp+0x98>
  11684c:	e55b3007 	ldrb	r3, [fp, #-7]
  116850:	e353007a 	cmp	r3, #122	; 0x7a
  116854:	8a000008 	bhi	11687c <lwip_strnicmp+0x98>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
  116858:	e55b3006 	ldrb	r3, [fp, #-6]
  11685c:	e3833020 	orr	r3, r3, #32
  116860:	e54b3008 	strb	r3, [fp, #-8]
        if (c1_upc != c2_upc) {
  116864:	e55b2007 	ldrb	r2, [fp, #-7]
  116868:	e55b3008 	ldrb	r3, [fp, #-8]
  11686c:	e1520003 	cmp	r2, r3
  116870:	0a000003 	beq	116884 <lwip_strnicmp+0xa0>
          /* still not equal */
          /* don't care for < or > */
          return 1;
  116874:	e3a03001 	mov	r3, #1
  116878:	ea00000b 	b	1168ac <lwip_strnicmp+0xc8>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
  11687c:	e3a03001 	mov	r3, #1
  116880:	ea000009 	b	1168ac <lwip_strnicmp+0xc8>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
  116884:	e320f000 	nop	{0}
      }
    }
  } while (len-- && c1 != 0);
  116888:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11688c:	e2432001 	sub	r2, r3, #1
  116890:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  116894:	e3530000 	cmp	r3, #0
  116898:	0a000002 	beq	1168a8 <lwip_strnicmp+0xc4>
  11689c:	e55b3005 	ldrb	r3, [fp, #-5]
  1168a0:	e3530000 	cmp	r3, #0
  1168a4:	1affffd4 	bne	1167fc <lwip_strnicmp+0x18>
  return 0;
  1168a8:	e3a03000 	mov	r3, #0
}
  1168ac:	e1a00003 	mov	r0, r3
  1168b0:	e28bd000 	add	sp, fp, #0
  1168b4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1168b8:	e12fff1e 	bx	lr

001168bc <lwip_itoa>:
 * lwIP default implementation for itoa() non-standard function.
 * This can be \#defined to itoa() or snprintf(result, bufsize, "%d", number) depending on your platform port.
 */
void
lwip_itoa(char* result, size_t bufsize, int number)
{
  1168bc:	e92d4800 	push	{fp, lr}
  1168c0:	e28db004 	add	fp, sp, #4
  1168c4:	e24dd028 	sub	sp, sp, #40	; 0x28
  1168c8:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  1168cc:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  1168d0:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  const int base = 10;
  1168d4:	e3a0300a 	mov	r3, #10
  1168d8:	e50b3010 	str	r3, [fp, #-16]
  char* ptr = result, *ptr1 = result, tmp_char;
  1168dc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1168e0:	e50b3008 	str	r3, [fp, #-8]
  1168e4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1168e8:	e50b300c 	str	r3, [fp, #-12]
  int tmp_value;
  LWIP_UNUSED_ARG(bufsize);

  do {
    tmp_value = number;
  1168ec:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1168f0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    number /= base;
  1168f4:	e51b1010 	ldr	r1, [fp, #-16]
  1168f8:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1168fc:	eb008860 	bl	138a84 <__divsi3>
  116900:	e1a03000 	mov	r3, r0
  116904:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
    *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz"[35 + (tmp_value - number * base)];
  116908:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11690c:	e51b2010 	ldr	r2, [fp, #-16]
  116910:	e0030392 	mul	r3, r2, r3
  116914:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  116918:	e0423003 	sub	r3, r2, r3
  11691c:	e2831023 	add	r1, r3, #35	; 0x23
  116920:	e51b2008 	ldr	r2, [fp, #-8]
  116924:	e2823001 	add	r3, r2, #1
  116928:	e50b3008 	str	r3, [fp, #-8]
  11692c:	e307302c 	movw	r3, #28716	; 0x702c
  116930:	e3403014 	movt	r3, #20
  116934:	e7d33001 	ldrb	r3, [r3, r1]
  116938:	e5c23000 	strb	r3, [r2]
  } while(number);
  11693c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  116940:	e3530000 	cmp	r3, #0
  116944:	1affffe8 	bne	1168ec <lwip_itoa+0x30>

   /* Apply negative sign */
  if (tmp_value < 0) {
  116948:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11694c:	e3530000 	cmp	r3, #0
  116950:	aa000004 	bge	116968 <lwip_itoa+0xac>
     *ptr++ = '-';
  116954:	e51b3008 	ldr	r3, [fp, #-8]
  116958:	e2832001 	add	r2, r3, #1
  11695c:	e50b2008 	str	r2, [fp, #-8]
  116960:	e3a0202d 	mov	r2, #45	; 0x2d
  116964:	e5c32000 	strb	r2, [r3]
  }
  *ptr-- = '\0';
  116968:	e51b3008 	ldr	r3, [fp, #-8]
  11696c:	e2432001 	sub	r2, r3, #1
  116970:	e50b2008 	str	r2, [fp, #-8]
  116974:	e3a02000 	mov	r2, #0
  116978:	e5c32000 	strb	r2, [r3]
  while(ptr1 < ptr) {
  11697c:	ea00000d 	b	1169b8 <lwip_itoa+0xfc>
    tmp_char = *ptr;
  116980:	e51b3008 	ldr	r3, [fp, #-8]
  116984:	e5d33000 	ldrb	r3, [r3]
  116988:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
    *ptr--= *ptr1;
  11698c:	e51b3008 	ldr	r3, [fp, #-8]
  116990:	e2432001 	sub	r2, r3, #1
  116994:	e50b2008 	str	r2, [fp, #-8]
  116998:	e51b200c 	ldr	r2, [fp, #-12]
  11699c:	e5d22000 	ldrb	r2, [r2]
  1169a0:	e5c32000 	strb	r2, [r3]
    *ptr1++ = tmp_char;
  1169a4:	e51b300c 	ldr	r3, [fp, #-12]
  1169a8:	e2832001 	add	r2, r3, #1
  1169ac:	e50b200c 	str	r2, [fp, #-12]
  1169b0:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
  1169b4:	e5c32000 	strb	r2, [r3]
  while(ptr1 < ptr) {
  1169b8:	e51b200c 	ldr	r2, [fp, #-12]
  1169bc:	e51b3008 	ldr	r3, [fp, #-8]
  1169c0:	e1520003 	cmp	r2, r3
  1169c4:	3affffed 	bcc	116980 <lwip_itoa+0xc4>
  }
}
  1169c8:	e320f000 	nop	{0}
  1169cc:	e24bd004 	sub	sp, fp, #4
  1169d0:	e8bd8800 	pop	{fp, pc}

001169d4 <dns_init>:
 * Initialize the resolver: set up the UDP pcb and configure the default server
 * (if DNS_SERVER_ADDRESS is set).
 */
void
dns_init(void)
{
  1169d4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1169d8:	e28db000 	add	fp, sp, #0
#endif

#if DNS_LOCAL_HOSTLIST
  dns_init_local();
#endif
}
  1169dc:	e320f000 	nop	{0}
  1169e0:	e28bd000 	add	sp, fp, #0
  1169e4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1169e8:	e12fff1e 	bx	lr

001169ec <dns_setserver>:
 * @param numdns the index of the DNS server to set must be < DNS_MAX_SERVERS
 * @param dnsserver IP address of the DNS server to set
 */
void
dns_setserver(u8_t numdns, const ip_addr_t *dnsserver)
{
  1169ec:	e92d4800 	push	{fp, lr}
  1169f0:	e28db004 	add	fp, sp, #4
  1169f4:	e24dd008 	sub	sp, sp, #8
  1169f8:	e1a03000 	mov	r3, r0
  1169fc:	e50b100c 	str	r1, [fp, #-12]
  116a00:	e54b3005 	strb	r3, [fp, #-5]
  if (numdns < DNS_MAX_SERVERS) {
  116a04:	e55b3005 	ldrb	r3, [fp, #-5]
  116a08:	e3530001 	cmp	r3, #1
  116a0c:	8a00001f 	bhi	116a90 <dns_setserver+0xa4>
    if (dnsserver != NULL) {
  116a10:	e51b300c 	ldr	r3, [fp, #-12]
  116a14:	e3530000 	cmp	r3, #0
  116a18:	0a000015 	beq	116a74 <dns_setserver+0x88>
      dns_servers[numdns] = (*dnsserver);
  116a1c:	e55b2005 	ldrb	r2, [fp, #-5]
  116a20:	e30e30c8 	movw	r3, #57544	; 0xe0c8
  116a24:	e3403014 	movt	r3, #20
  116a28:	e51b100c 	ldr	r1, [fp, #-12]
  116a2c:	e5911000 	ldr	r1, [r1]
  116a30:	e7831102 	str	r1, [r3, r2, lsl #2]
      extern struct netif *netif_default;
      extern struct netdev *netdev_get_by_name(const char *name);
      extern void netdev_low_level_set_dns_server(struct netdev *netdev, uint8_t dns_num, const ip_addr_t *dns_server);

      /* set network interface device DNS server address */
      if (netif_default) {
  116a34:	e30c3a28 	movw	r3, #51752	; 0xca28
  116a38:	e3403015 	movt	r3, #21
  116a3c:	e5933000 	ldr	r3, [r3]
  116a40:	e3530000 	cmp	r3, #0
  116a44:	0a000011 	beq	116a90 <dns_setserver+0xa4>
        netdev_low_level_set_dns_server(netdev_get_by_name(netif_default->name), numdns, dnsserver);
  116a48:	e30c3a28 	movw	r3, #51752	; 0xca28
  116a4c:	e3403015 	movt	r3, #21
  116a50:	e5933000 	ldr	r3, [r3]
  116a54:	e2833042 	add	r3, r3, #66	; 0x42
  116a58:	e1a00003 	mov	r0, r3
  116a5c:	ebffbaa4 	bl	1054f4 <netdev_get_by_name>
  116a60:	e55b3005 	ldrb	r3, [fp, #-5]
  116a64:	e51b200c 	ldr	r2, [fp, #-12]
  116a68:	e1a01003 	mov	r1, r3
  116a6c:	ebffbe2e 	bl	10632c <netdev_low_level_set_dns_server>
#endif /* RT_USING_NETDEV */
    } else {
      dns_servers[numdns] = *IP_ADDR_ANY;
    }
  }
}
  116a70:	ea000006 	b	116a90 <dns_setserver+0xa4>
      dns_servers[numdns] = *IP_ADDR_ANY;
  116a74:	e55b1005 	ldrb	r1, [fp, #-5]
  116a78:	e30e30c8 	movw	r3, #57544	; 0xe0c8
  116a7c:	e3403014 	movt	r3, #20
  116a80:	e3092908 	movw	r2, #39176	; 0x9908
  116a84:	e3402014 	movt	r2, #20
  116a88:	e5922000 	ldr	r2, [r2]
  116a8c:	e7832101 	str	r2, [r3, r1, lsl #2]
}
  116a90:	e320f000 	nop	{0}
  116a94:	e24bd004 	sub	sp, fp, #4
  116a98:	e8bd8800 	pop	{fp, pc}

00116a9c <dns_getserver>:
 * @return IP address of the indexed DNS server or "ip_addr_any" if the DNS
 *         server has not been configured.
 */
const ip_addr_t*
dns_getserver(u8_t numdns)
{
  116a9c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  116aa0:	e28db000 	add	fp, sp, #0
  116aa4:	e24dd00c 	sub	sp, sp, #12
  116aa8:	e1a03000 	mov	r3, r0
  116aac:	e54b3005 	strb	r3, [fp, #-5]
  if (numdns < DNS_MAX_SERVERS) {
  116ab0:	e55b3005 	ldrb	r3, [fp, #-5]
  116ab4:	e3530001 	cmp	r3, #1
  116ab8:	8a000005 	bhi	116ad4 <dns_getserver+0x38>
    return &dns_servers[numdns];
  116abc:	e55b3005 	ldrb	r3, [fp, #-5]
  116ac0:	e1a02103 	lsl	r2, r3, #2
  116ac4:	e30e30c8 	movw	r3, #57544	; 0xe0c8
  116ac8:	e3403014 	movt	r3, #20
  116acc:	e0823003 	add	r3, r2, r3
  116ad0:	ea000001 	b	116adc <dns_getserver+0x40>
  } else {
    return IP_ADDR_ANY;
  116ad4:	e3093908 	movw	r3, #39176	; 0x9908
  116ad8:	e3403014 	movt	r3, #20
  }
}
  116adc:	e1a00003 	mov	r0, r3
  116ae0:	e28bd000 	add	sp, fp, #0
  116ae4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  116ae8:	e12fff1e 	bx	lr

00116aec <dns_tmr>:
 * The DNS resolver client timer - handle retries and timeouts and should
 * be called every DNS_TMR_INTERVAL milliseconds (every second by default).
 */
void
dns_tmr(void)
{
  116aec:	e92d4800 	push	{fp, lr}
  116af0:	e28db004 	add	fp, sp, #4
  LWIP_DEBUGF(DNS_DEBUG, ("dns_tmr: dns_check_entries\n"));
  dns_check_entries();
  116af4:	eb000360 	bl	11787c <dns_check_entries>
}
  116af8:	e320f000 	nop	{0}
  116afc:	e8bd8800 	pop	{fp, pc}

00116b00 <dns_lookup>:
 *         was not found in the cached dns_table.
 * @return ERR_OK if found, ERR_ARG if not found
 */
static err_t
dns_lookup(const char *name, ip_addr_t *addr LWIP_DNS_ADDRTYPE_ARG(u8_t dns_addrtype))
{
  116b00:	e92d4800 	push	{fp, lr}
  116b04:	e28db004 	add	fp, sp, #4
  116b08:	e24dd010 	sub	sp, sp, #16
  116b0c:	e50b0010 	str	r0, [fp, #-16]
  116b10:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    return ERR_OK;
  }
#endif /* DNS_LOOKUP_LOCAL_EXTERN */

  /* Walk through name list, return entry if found. If not, return NULL. */
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
  116b14:	e3a03000 	mov	r3, #0
  116b18:	e54b3005 	strb	r3, [fp, #-5]
  116b1c:	ea000029 	b	116bc8 <dns_lookup+0xc8>
    if ((dns_table[i].state == DNS_STATE_DONE) &&
  116b20:	e55b2005 	ldrb	r2, [fp, #-5]
  116b24:	e30d3c58 	movw	r3, #56408	; 0xdc58
  116b28:	e3403014 	movt	r3, #20
  116b2c:	e3a01e11 	mov	r1, #272	; 0x110
  116b30:	e0020291 	mul	r2, r1, r2
  116b34:	e0833002 	add	r3, r3, r2
  116b38:	e283300a 	add	r3, r3, #10
  116b3c:	e5d33000 	ldrb	r3, [r3]
  116b40:	e3530003 	cmp	r3, #3
  116b44:	1a00001c 	bne	116bbc <dns_lookup+0xbc>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0) &&
  116b48:	e55b3005 	ldrb	r3, [fp, #-5]
  116b4c:	e3a02e11 	mov	r2, #272	; 0x110
  116b50:	e0030392 	mul	r3, r2, r3
  116b54:	e2832010 	add	r2, r3, #16
  116b58:	e30d3c58 	movw	r3, #56408	; 0xdc58
  116b5c:	e3403014 	movt	r3, #20
  116b60:	e0823003 	add	r3, r2, r3
  116b64:	e3a02c01 	mov	r2, #256	; 0x100
  116b68:	e1a01003 	mov	r1, r3
  116b6c:	e51b0010 	ldr	r0, [fp, #-16]
  116b70:	ebffff1b 	bl	1167e4 <lwip_strnicmp>
  116b74:	e1a03000 	mov	r3, r0
    if ((dns_table[i].state == DNS_STATE_DONE) &&
  116b78:	e3530000 	cmp	r3, #0
  116b7c:	1a00000e 	bne	116bbc <dns_lookup+0xbc>
        LWIP_DNS_ADDRTYPE_MATCH_IP(dns_addrtype, dns_table[i].ipaddr)) {
      LWIP_DEBUGF(DNS_DEBUG, ("dns_lookup: \"%s\": found = ", name));
      ip_addr_debug_print(DNS_DEBUG, &(dns_table[i].ipaddr));
      LWIP_DEBUGF(DNS_DEBUG, ("\n"));
      if (addr) {
  116b80:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116b84:	e3530000 	cmp	r3, #0
  116b88:	0a000009 	beq	116bb4 <dns_lookup+0xb4>
        ip_addr_copy(*addr, dns_table[i].ipaddr);
  116b8c:	e55b2005 	ldrb	r2, [fp, #-5]
  116b90:	e30d3c58 	movw	r3, #56408	; 0xdc58
  116b94:	e3403014 	movt	r3, #20
  116b98:	e3a01e11 	mov	r1, #272	; 0x110
  116b9c:	e0020291 	mul	r2, r1, r2
  116ba0:	e0833002 	add	r3, r3, r2
  116ba4:	e2833004 	add	r3, r3, #4
  116ba8:	e5932000 	ldr	r2, [r3]
  116bac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116bb0:	e5832000 	str	r2, [r3]
      }
      return ERR_OK;
  116bb4:	e3a03000 	mov	r3, #0
  116bb8:	ea000006 	b	116bd8 <dns_lookup+0xd8>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
  116bbc:	e55b3005 	ldrb	r3, [fp, #-5]
  116bc0:	e2833001 	add	r3, r3, #1
  116bc4:	e54b3005 	strb	r3, [fp, #-5]
  116bc8:	e55b3005 	ldrb	r3, [fp, #-5]
  116bcc:	e3530003 	cmp	r3, #3
  116bd0:	9affffd2 	bls	116b20 <dns_lookup+0x20>
    }
  }

  return ERR_ARG;
  116bd4:	e3e0300f 	mvn	r3, #15
}
  116bd8:	e1a00003 	mov	r0, r3
  116bdc:	e24bd004 	sub	sp, fp, #4
  116be0:	e8bd8800 	pop	{fp, pc}

00116be4 <dns_compare_name>:
 * @param start_offset offset into p where the name starts
 * @return 0xFFFF: names differ, other: names equal -> offset behind name
 */
static u16_t
dns_compare_name(const char *query, struct pbuf* p, u16_t start_offset)
{
  116be4:	e92d4800 	push	{fp, lr}
  116be8:	e28db004 	add	fp, sp, #4
  116bec:	e24dd020 	sub	sp, sp, #32
  116bf0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  116bf4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  116bf8:	e1a03002 	mov	r3, r2
  116bfc:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
  int n;
  u16_t response_offset = start_offset;
  116c00:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  116c04:	e14b30ba 	strh	r3, [fp, #-10]

  do {
    n = pbuf_try_get_at(p, response_offset++);
  116c08:	e15b30ba 	ldrh	r3, [fp, #-10]
  116c0c:	e2832001 	add	r2, r3, #1
  116c10:	e14b20ba 	strh	r2, [fp, #-10]
  116c14:	e1a01003 	mov	r1, r3
  116c18:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  116c1c:	eb001460 	bl	11bda4 <pbuf_try_get_at>
  116c20:	e50b0008 	str	r0, [fp, #-8]
    if (n < 0) {
  116c24:	e51b3008 	ldr	r3, [fp, #-8]
  116c28:	e3530000 	cmp	r3, #0
  116c2c:	aa000001 	bge	116c38 <dns_compare_name+0x54>
      return 0xFFFF;
  116c30:	e30f3fff 	movw	r3, #65535	; 0xffff
  116c34:	ea000036 	b	116d14 <dns_compare_name+0x130>
    }
    /** @see RFC 1035 - 4.1.4. Message compression */
    if ((n & 0xc0) == 0xc0) {
  116c38:	e51b3008 	ldr	r3, [fp, #-8]
  116c3c:	e20330c0 	and	r3, r3, #192	; 0xc0
  116c40:	e35300c0 	cmp	r3, #192	; 0xc0
  116c44:	1a00001c 	bne	116cbc <dns_compare_name+0xd8>
      /* Compressed name: cannot be equal since we don't send them */
      return 0xFFFF;
  116c48:	e30f3fff 	movw	r3, #65535	; 0xffff
  116c4c:	ea000030 	b	116d14 <dns_compare_name+0x130>
    } else {
      /* Not compressed name */
      while (n > 0) {
        int c = pbuf_try_get_at(p, response_offset);
  116c50:	e15b30ba 	ldrh	r3, [fp, #-10]
  116c54:	e1a01003 	mov	r1, r3
  116c58:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  116c5c:	eb001450 	bl	11bda4 <pbuf_try_get_at>
  116c60:	e50b0010 	str	r0, [fp, #-16]
        if (c < 0) {
  116c64:	e51b3010 	ldr	r3, [fp, #-16]
  116c68:	e3530000 	cmp	r3, #0
  116c6c:	aa000001 	bge	116c78 <dns_compare_name+0x94>
          return 0xFFFF;
  116c70:	e30f3fff 	movw	r3, #65535	; 0xffff
  116c74:	ea000026 	b	116d14 <dns_compare_name+0x130>
        }
        if ((*query) != (u8_t)c) {
  116c78:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  116c7c:	e5d32000 	ldrb	r2, [r3]
  116c80:	e51b3010 	ldr	r3, [fp, #-16]
  116c84:	e6ef3073 	uxtb	r3, r3
  116c88:	e1520003 	cmp	r2, r3
  116c8c:	0a000001 	beq	116c98 <dns_compare_name+0xb4>
          return 0xFFFF;
  116c90:	e30f3fff 	movw	r3, #65535	; 0xffff
  116c94:	ea00001e 	b	116d14 <dns_compare_name+0x130>
        }
        ++response_offset;
  116c98:	e15b30ba 	ldrh	r3, [fp, #-10]
  116c9c:	e2833001 	add	r3, r3, #1
  116ca0:	e14b30ba 	strh	r3, [fp, #-10]
        ++query;
  116ca4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  116ca8:	e2833001 	add	r3, r3, #1
  116cac:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        --n;
  116cb0:	e51b3008 	ldr	r3, [fp, #-8]
  116cb4:	e2433001 	sub	r3, r3, #1
  116cb8:	e50b3008 	str	r3, [fp, #-8]
      while (n > 0) {
  116cbc:	e51b3008 	ldr	r3, [fp, #-8]
  116cc0:	e3530000 	cmp	r3, #0
  116cc4:	caffffe1 	bgt	116c50 <dns_compare_name+0x6c>
      }
      ++query;
  116cc8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  116ccc:	e2833001 	add	r3, r3, #1
  116cd0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    }
    n = pbuf_try_get_at(p, response_offset);
  116cd4:	e15b30ba 	ldrh	r3, [fp, #-10]
  116cd8:	e1a01003 	mov	r1, r3
  116cdc:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  116ce0:	eb00142f 	bl	11bda4 <pbuf_try_get_at>
  116ce4:	e50b0008 	str	r0, [fp, #-8]
    if (n < 0) {
  116ce8:	e51b3008 	ldr	r3, [fp, #-8]
  116cec:	e3530000 	cmp	r3, #0
  116cf0:	aa000001 	bge	116cfc <dns_compare_name+0x118>
      return 0xFFFF;
  116cf4:	e30f3fff 	movw	r3, #65535	; 0xffff
  116cf8:	ea000005 	b	116d14 <dns_compare_name+0x130>
    }
  } while (n != 0);
  116cfc:	e51b3008 	ldr	r3, [fp, #-8]
  116d00:	e3530000 	cmp	r3, #0
  116d04:	1affffbf 	bne	116c08 <dns_compare_name+0x24>

  return response_offset + 1;
  116d08:	e15b30ba 	ldrh	r3, [fp, #-10]
  116d0c:	e2833001 	add	r3, r3, #1
  116d10:	e6ff3073 	uxth	r3, r3
}
  116d14:	e1a00003 	mov	r0, r3
  116d18:	e24bd004 	sub	sp, fp, #4
  116d1c:	e8bd8800 	pop	{fp, pc}

00116d20 <dns_skip_name>:
 * @param query_idx start index into p pointing to encoded DNS name in the DNS server response
 * @return index to end of the name
 */
static u16_t
dns_skip_name(struct pbuf* p, u16_t query_idx)
{
  116d20:	e92d4800 	push	{fp, lr}
  116d24:	e28db004 	add	fp, sp, #4
  116d28:	e24dd010 	sub	sp, sp, #16
  116d2c:	e50b0010 	str	r0, [fp, #-16]
  116d30:	e1a03001 	mov	r3, r1
  116d34:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  int n;
  u16_t offset = query_idx;
  116d38:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  116d3c:	e14b30b6 	strh	r3, [fp, #-6]

  do {
    n = pbuf_try_get_at(p, offset++);
  116d40:	e15b30b6 	ldrh	r3, [fp, #-6]
  116d44:	e2832001 	add	r2, r3, #1
  116d48:	e14b20b6 	strh	r2, [fp, #-6]
  116d4c:	e1a01003 	mov	r1, r3
  116d50:	e51b0010 	ldr	r0, [fp, #-16]
  116d54:	eb001412 	bl	11bda4 <pbuf_try_get_at>
  116d58:	e50b000c 	str	r0, [fp, #-12]
    if (n < 0) {
  116d5c:	e51b300c 	ldr	r3, [fp, #-12]
  116d60:	e3530000 	cmp	r3, #0
  116d64:	aa000001 	bge	116d70 <dns_skip_name+0x50>
      return 0xFFFF;
  116d68:	e30f3fff 	movw	r3, #65535	; 0xffff
  116d6c:	ea000023 	b	116e00 <dns_skip_name+0xe0>
    }
    /** @see RFC 1035 - 4.1.4. Message compression */
    if ((n & 0xc0) == 0xc0) {
  116d70:	e51b300c 	ldr	r3, [fp, #-12]
  116d74:	e20330c0 	and	r3, r3, #192	; 0xc0
  116d78:	e35300c0 	cmp	r3, #192	; 0xc0
  116d7c:	0a00001b 	beq	116df0 <dns_skip_name+0xd0>
      /* Compressed name: since we only want to skip it (not check it), stop here */
      break;
    } else {
      /* Not compressed name */
      if (offset + n >= p->tot_len) {
  116d80:	e15b20b6 	ldrh	r2, [fp, #-6]
  116d84:	e51b300c 	ldr	r3, [fp, #-12]
  116d88:	e0823003 	add	r3, r2, r3
  116d8c:	e51b2010 	ldr	r2, [fp, #-16]
  116d90:	e1d220b8 	ldrh	r2, [r2, #8]
  116d94:	e1530002 	cmp	r3, r2
  116d98:	ba000001 	blt	116da4 <dns_skip_name+0x84>
        return 0xFFFF;
  116d9c:	e30f3fff 	movw	r3, #65535	; 0xffff
  116da0:	ea000016 	b	116e00 <dns_skip_name+0xe0>
      }
      offset = (u16_t)(offset + n);
  116da4:	e51b300c 	ldr	r3, [fp, #-12]
  116da8:	e6ff2073 	uxth	r2, r3
  116dac:	e15b30b6 	ldrh	r3, [fp, #-6]
  116db0:	e0823003 	add	r3, r2, r3
  116db4:	e14b30b6 	strh	r3, [fp, #-6]
    }
    n = pbuf_try_get_at(p, offset);
  116db8:	e15b30b6 	ldrh	r3, [fp, #-6]
  116dbc:	e1a01003 	mov	r1, r3
  116dc0:	e51b0010 	ldr	r0, [fp, #-16]
  116dc4:	eb0013f6 	bl	11bda4 <pbuf_try_get_at>
  116dc8:	e50b000c 	str	r0, [fp, #-12]
    if (n < 0) {
  116dcc:	e51b300c 	ldr	r3, [fp, #-12]
  116dd0:	e3530000 	cmp	r3, #0
  116dd4:	aa000001 	bge	116de0 <dns_skip_name+0xc0>
      return 0xFFFF;
  116dd8:	e30f3fff 	movw	r3, #65535	; 0xffff
  116ddc:	ea000007 	b	116e00 <dns_skip_name+0xe0>
    }
  } while (n != 0);
  116de0:	e51b300c 	ldr	r3, [fp, #-12]
  116de4:	e3530000 	cmp	r3, #0
  116de8:	1affffd4 	bne	116d40 <dns_skip_name+0x20>
  116dec:	ea000000 	b	116df4 <dns_skip_name+0xd4>
      break;
  116df0:	e320f000 	nop	{0}

  return offset + 1;
  116df4:	e15b30b6 	ldrh	r3, [fp, #-6]
  116df8:	e2833001 	add	r3, r3, #1
  116dfc:	e6ff3073 	uxth	r3, r3
}
  116e00:	e1a00003 	mov	r0, r3
  116e04:	e24bd004 	sub	sp, fp, #4
  116e08:	e8bd8800 	pop	{fp, pc}

00116e0c <dns_send>:
 * @param idx the DNS table entry index for which to send a request
 * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
 */
static err_t
dns_send(u8_t idx)
{
  116e0c:	e92d4800 	push	{fp, lr}
  116e10:	e28db004 	add	fp, sp, #4
  116e14:	e24dd040 	sub	sp, sp, #64	; 0x40
  116e18:	e1a03000 	mov	r3, r0
  116e1c:	e54b303d 	strb	r3, [fp, #-61]	; 0xffffffc3
  struct pbuf *p;
  u16_t query_idx, copy_len;
  const char *hostname, *hostname_part;
  u8_t n;
  u8_t pcb_idx;
  struct dns_table_entry* entry = &dns_table[idx];
  116e20:	e55b303d 	ldrb	r3, [fp, #-61]	; 0xffffffc3
  116e24:	e3a02e11 	mov	r2, #272	; 0x110
  116e28:	e0020392 	mul	r2, r2, r3
  116e2c:	e30d3c58 	movw	r3, #56408	; 0xdc58
  116e30:	e3403014 	movt	r3, #20
  116e34:	e0823003 	add	r3, r2, r3
  116e38:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
              (u16_t)(entry->server_idx), entry->name));
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
  116e3c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116e40:	e5d3300b 	ldrb	r3, [r3, #11]
  116e44:	e3530001 	cmp	r3, #1
  116e48:	9a000006 	bls	116e68 <dns_send+0x5c>
  116e4c:	e3070078 	movw	r0, #28792	; 0x7078
  116e50:	e3400014 	movt	r0, #20
  116e54:	ebffb0ae 	bl	103114 <rt_kprintf>
  116e58:	e30012fa 	movw	r1, #762	; 0x2fa
  116e5c:	e3070090 	movw	r0, #28816	; 0x7090
  116e60:	e3400014 	movt	r0, #20
  116e64:	ebffd0a1 	bl	10b0f0 <sys_arch_assert>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
  116e68:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116e6c:	e5d3300b 	ldrb	r3, [r3, #11]
  116e70:	e1a02003 	mov	r2, r3
  116e74:	e30e30c8 	movw	r3, #57544	; 0xe0c8
  116e78:	e3403014 	movt	r3, #20
  116e7c:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  116e80:	e3530000 	cmp	r3, #0
  116e84:	1a000008 	bne	116eac <dns_send+0xa0>
      && !entry->is_mdns
#endif
    ) {
    /* DNS server not valid anymore, e.g. PPP netif has been shut down */
    /* call specified callback function if provided */
    dns_call_found(idx, NULL);
  116e88:	e55b303d 	ldrb	r3, [fp, #-61]	; 0xffffffc3
  116e8c:	e3a01000 	mov	r1, #0
  116e90:	e1a00003 	mov	r0, r3
  116e94:	eb00010f 	bl	1172d8 <dns_call_found>
    /* flush this entry */
    entry->state = DNS_STATE_UNUSED;
  116e98:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116e9c:	e3a02000 	mov	r2, #0
  116ea0:	e5c3200a 	strb	r2, [r3, #10]
    return ERR_OK;
  116ea4:	e3a03000 	mov	r3, #0
  116ea8:	ea000089 	b	1170d4 <dns_send+0x2c8>
  }

  /* if here, we have either a new query or a retry on a previous query to process */
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
  116eac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116eb0:	e2833010 	add	r3, r3, #16
  116eb4:	e1a00003 	mov	r0, r3
  116eb8:	eb00a97e 	bl	1414b8 <strlen>
  116ebc:	e1a03000 	mov	r3, r0
  116ec0:	e6ff3073 	uxth	r3, r3
  116ec4:	e2833012 	add	r3, r3, #18
  116ec8:	e6ff3073 	uxth	r3, r3
  116ecc:	e3a02000 	mov	r2, #0
  116ed0:	e1a01003 	mov	r1, r3
  116ed4:	e3a00000 	mov	r0, #0
  116ed8:	eb000ced 	bl	11a294 <pbuf_alloc>
  116edc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
                 SIZEOF_DNS_QUERY), PBUF_RAM);
  if (p != NULL) {
  116ee0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  116ee4:	e3530000 	cmp	r3, #0
  116ee8:	0a000076 	beq	1170c8 <dns_send+0x2bc>
    const ip_addr_t* dst;
    u16_t dst_port;
    /* fill dns header */
    memset(&hdr, 0, SIZEOF_DNS_HDR);
  116eec:	e24b3034 	sub	r3, fp, #52	; 0x34
  116ef0:	e3a0200c 	mov	r2, #12
  116ef4:	e3a01000 	mov	r1, #0
  116ef8:	e1a00003 	mov	r0, r3
  116efc:	eb00a8dc 	bl	141274 <memset>
    hdr.id = lwip_htons(entry->txid);
  116f00:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116f04:	e1d330b8 	ldrh	r3, [r3, #8]
  116f08:	e1a00003 	mov	r0, r3
  116f0c:	ebfffdb0 	bl	1165d4 <lwip_htons>
  116f10:	e1a03000 	mov	r3, r0
  116f14:	e14b33b4 	strh	r3, [fp, #-52]	; 0xffffffcc
    hdr.flags1 = DNS_FLAG1_RD;
  116f18:	e3a03001 	mov	r3, #1
  116f1c:	e54b3032 	strb	r3, [fp, #-50]	; 0xffffffce
    hdr.numquestions = PP_HTONS(1);
  116f20:	e3a03c01 	mov	r3, #256	; 0x100
  116f24:	e14b33b0 	strh	r3, [fp, #-48]	; 0xffffffd0
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
  116f28:	e24b3034 	sub	r3, fp, #52	; 0x34
  116f2c:	e3a0200c 	mov	r2, #12
  116f30:	e1a01003 	mov	r1, r3
  116f34:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  116f38:	eb00128f 	bl	11b97c <pbuf_take>
    hostname = entry->name;
  116f3c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116f40:	e2833010 	add	r3, r3, #16
  116f44:	e50b300c 	str	r3, [fp, #-12]
    --hostname;
  116f48:	e51b300c 	ldr	r3, [fp, #-12]
  116f4c:	e2433001 	sub	r3, r3, #1
  116f50:	e50b300c 	str	r3, [fp, #-12]

    /* convert hostname into suitable query format. */
    query_idx = SIZEOF_DNS_HDR;
  116f54:	e3a0300c 	mov	r3, #12
  116f58:	e14b30b8 	strh	r3, [fp, #-8]
    do {
      ++hostname;
  116f5c:	e51b300c 	ldr	r3, [fp, #-12]
  116f60:	e2833001 	add	r3, r3, #1
  116f64:	e50b300c 	str	r3, [fp, #-12]
      hostname_part = hostname;
  116f68:	e51b300c 	ldr	r3, [fp, #-12]
  116f6c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
  116f70:	e3a03000 	mov	r3, #0
  116f74:	e54b300d 	strb	r3, [fp, #-13]
  116f78:	ea000005 	b	116f94 <dns_send+0x188>
        ++n;
  116f7c:	e55b300d 	ldrb	r3, [fp, #-13]
  116f80:	e2833001 	add	r3, r3, #1
  116f84:	e54b300d 	strb	r3, [fp, #-13]
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
  116f88:	e51b300c 	ldr	r3, [fp, #-12]
  116f8c:	e2833001 	add	r3, r3, #1
  116f90:	e50b300c 	str	r3, [fp, #-12]
  116f94:	e51b300c 	ldr	r3, [fp, #-12]
  116f98:	e5d33000 	ldrb	r3, [r3]
  116f9c:	e353002e 	cmp	r3, #46	; 0x2e
  116fa0:	0a000003 	beq	116fb4 <dns_send+0x1a8>
  116fa4:	e51b300c 	ldr	r3, [fp, #-12]
  116fa8:	e5d33000 	ldrb	r3, [r3]
  116fac:	e3530000 	cmp	r3, #0
  116fb0:	1afffff1 	bne	116f7c <dns_send+0x170>
      }
      copy_len = (u16_t)(hostname - hostname_part);
  116fb4:	e51b200c 	ldr	r2, [fp, #-12]
  116fb8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  116fbc:	e0423003 	sub	r3, r2, r3
  116fc0:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
      pbuf_put_at(p, query_idx, n);
  116fc4:	e55b200d 	ldrb	r2, [fp, #-13]
  116fc8:	e15b30b8 	ldrh	r3, [fp, #-8]
  116fcc:	e1a01003 	mov	r1, r3
  116fd0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  116fd4:	eb001390 	bl	11be1c <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, query_idx + 1);
  116fd8:	e15b30b8 	ldrh	r3, [fp, #-8]
  116fdc:	e2833001 	add	r3, r3, #1
  116fe0:	e6ff3073 	uxth	r3, r3
  116fe4:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  116fe8:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  116fec:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  116ff0:	eb0012de 	bl	11bb70 <pbuf_take_at>
      query_idx += n + 1;
  116ff4:	e55b300d 	ldrb	r3, [fp, #-13]
  116ff8:	e6ff2073 	uxth	r2, r3
  116ffc:	e15b30b8 	ldrh	r3, [fp, #-8]
  117000:	e0823003 	add	r3, r2, r3
  117004:	e6ff3073 	uxth	r3, r3
  117008:	e2833001 	add	r3, r3, #1
  11700c:	e14b30b8 	strh	r3, [fp, #-8]
    } while (*hostname != 0);
  117010:	e51b300c 	ldr	r3, [fp, #-12]
  117014:	e5d33000 	ldrb	r3, [r3]
  117018:	e3530000 	cmp	r3, #0
  11701c:	1affffce 	bne	116f5c <dns_send+0x150>
    pbuf_put_at(p, query_idx, 0);
  117020:	e15b30b8 	ldrh	r3, [fp, #-8]
  117024:	e3a02000 	mov	r2, #0
  117028:	e1a01003 	mov	r1, r3
  11702c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  117030:	eb001379 	bl	11be1c <pbuf_put_at>
    query_idx++;
  117034:	e15b30b8 	ldrh	r3, [fp, #-8]
  117038:	e2833001 	add	r3, r3, #1
  11703c:	e14b30b8 	strh	r3, [fp, #-8]

    /* fill dns query */
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
    } else {
      qry.type = PP_HTONS(DNS_RRTYPE_A);
  117040:	e3a03c01 	mov	r3, #256	; 0x100
  117044:	e14b33b8 	strh	r3, [fp, #-56]	; 0xffffffc8
    }
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
  117048:	e3a03c01 	mov	r3, #256	; 0x100
  11704c:	e14b33b6 	strh	r3, [fp, #-54]	; 0xffffffca
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
  117050:	e15b30b8 	ldrh	r3, [fp, #-8]
  117054:	e24b1038 	sub	r1, fp, #56	; 0x38
  117058:	e3a02004 	mov	r2, #4
  11705c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  117060:	eb0012c2 	bl	11bb70 <pbuf_take_at>

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
    pcb_idx = entry->pcb_idx;
  117064:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  117068:	e5d3300f 	ldrb	r3, [r3, #15]
  11706c:	e54b301f 	strb	r3, [fp, #-31]	; 0xffffffe1
      }
#endif
    } else
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
    {
      dst_port = DNS_SERVER_PORT;
  117070:	e3a03035 	mov	r3, #53	; 0x35
  117074:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
      dst = &dns_servers[entry->server_idx];
  117078:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11707c:	e5d3300b 	ldrb	r3, [r3, #11]
  117080:	e1a02103 	lsl	r2, r3, #2
  117084:	e30e30c8 	movw	r3, #57544	; 0xe0c8
  117088:	e3403014 	movt	r3, #20
  11708c:	e0823003 	add	r3, r2, r3
  117090:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
    }
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
  117094:	e55b201f 	ldrb	r2, [fp, #-31]	; 0xffffffe1
  117098:	e30d3c44 	movw	r3, #56388	; 0xdc44
  11709c:	e3403014 	movt	r3, #20
  1170a0:	e7930102 	ldr	r0, [r3, r2, lsl #2]
  1170a4:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  1170a8:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  1170ac:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  1170b0:	eb00441e 	bl	128130 <udp_sendto>
  1170b4:	e1a03000 	mov	r3, r0
  1170b8:	e54b3005 	strb	r3, [fp, #-5]

    /* free pbuf */
    pbuf_free(p);
  1170bc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1170c0:	eb000f7a 	bl	11aeb0 <pbuf_free>
  1170c4:	ea000001 	b	1170d0 <dns_send+0x2c4>
  } else {
    err = ERR_MEM;
  1170c8:	e3e03000 	mvn	r3, #0
  1170cc:	e54b3005 	strb	r3, [fp, #-5]
  }

  return err;
  1170d0:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  1170d4:	e1a00003 	mov	r0, r3
  1170d8:	e24bd004 	sub	sp, fp, #4
  1170dc:	e8bd8800 	pop	{fp, pc}

001170e0 <dns_alloc_random_port>:

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
static struct udp_pcb*
dns_alloc_random_port(void)
{
  1170e0:	e92d4800 	push	{fp, lr}
  1170e4:	e28db004 	add	fp, sp, #4
  1170e8:	e24dd010 	sub	sp, sp, #16
  err_t err;
  struct udp_pcb* ret;

  ret = udp_new_ip_type(IPADDR_TYPE_ANY);
  1170ec:	e3a0002e 	mov	r0, #46	; 0x2e
  1170f0:	eb00468c 	bl	128b28 <udp_new_ip_type>
  1170f4:	e50b000c 	str	r0, [fp, #-12]
  if (ret == NULL) {
  1170f8:	e51b300c 	ldr	r3, [fp, #-12]
  1170fc:	e3530000 	cmp	r3, #0
  117100:	1a000001 	bne	11710c <dns_alloc_random_port+0x2c>
    /* out of memory, have to reuse an existing pcb */
    return NULL;
  117104:	e3a03000 	mov	r3, #0
  117108:	ea000020 	b	117190 <dns_alloc_random_port+0xb0>
  }
  do {
    u16_t port = (u16_t)DNS_RAND_TXID();
  11710c:	eb009c1e 	bl	13e18c <rand>
  117110:	e1a03000 	mov	r3, r0
  117114:	e14b30be 	strh	r3, [fp, #-14]
    if (!DNS_PORT_ALLOWED(port)) {
  117118:	e15b30be 	ldrh	r3, [fp, #-14]
  11711c:	e3530b01 	cmp	r3, #1024	; 0x400
  117120:	2a000002 	bcs	117130 <dns_alloc_random_port+0x50>
      /* this port is not allowed, try again */
      err = ERR_USE;
  117124:	e3e03007 	mvn	r3, #7
  117128:	e54b3005 	strb	r3, [fp, #-5]
      continue;
  11712c:	ea000007 	b	117150 <dns_alloc_random_port+0x70>
    }
    err = udp_bind(ret, IP_ANY_TYPE, port);
  117130:	e15b30be 	ldrh	r3, [fp, #-14]
  117134:	e1a02003 	mov	r2, r3
  117138:	e3091908 	movw	r1, #39176	; 0x9908
  11713c:	e3401014 	movt	r1, #20
  117140:	e51b000c 	ldr	r0, [fp, #-12]
  117144:	eb004542 	bl	128654 <udp_bind>
  117148:	e1a03000 	mov	r3, r0
  11714c:	e54b3005 	strb	r3, [fp, #-5]
  } while (err == ERR_USE);
  117150:	e15b30d5 	ldrsb	r3, [fp, #-5]
  117154:	e3730008 	cmn	r3, #8
  117158:	0affffeb 	beq	11710c <dns_alloc_random_port+0x2c>
  if (err != ERR_OK) {
  11715c:	e15b30d5 	ldrsb	r3, [fp, #-5]
  117160:	e3530000 	cmp	r3, #0
  117164:	0a000003 	beq	117178 <dns_alloc_random_port+0x98>
    udp_remove(ret);
  117168:	e51b000c 	ldr	r0, [fp, #-12]
  11716c:	eb004622 	bl	1289fc <udp_remove>
    return NULL;
  117170:	e3a03000 	mov	r3, #0
  117174:	ea000005 	b	117190 <dns_alloc_random_port+0xb0>
  }
  udp_recv(ret, dns_recv, NULL);
  117178:	e3a02000 	mov	r2, #0
  11717c:	e3071988 	movw	r1, #31112	; 0x7988
  117180:	e3401011 	movt	r1, #17
  117184:	e51b000c 	ldr	r0, [fp, #-12]
  117188:	eb00460b 	bl	1289bc <udp_recv>
  return ret;
  11718c:	e51b300c 	ldr	r3, [fp, #-12]
}
  117190:	e1a00003 	mov	r0, r3
  117194:	e24bd004 	sub	sp, fp, #4
  117198:	e8bd8800 	pop	{fp, pc}

0011719c <dns_alloc_pcb>:
 *
 * @return an index into dns_pcbs
 */
static u8_t
dns_alloc_pcb(void)
{
  11719c:	e92d4810 	push	{r4, fp, lr}
  1171a0:	e28db008 	add	fp, sp, #8
  1171a4:	e24dd00c 	sub	sp, sp, #12
  u8_t i;
  u8_t idx;

  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
  1171a8:	e3a03000 	mov	r3, #0
  1171ac:	e54b300d 	strb	r3, [fp, #-13]
  1171b0:	ea000008 	b	1171d8 <dns_alloc_pcb+0x3c>
    if (dns_pcbs[i] == NULL) {
  1171b4:	e55b200d 	ldrb	r2, [fp, #-13]
  1171b8:	e30d3c44 	movw	r3, #56388	; 0xdc44
  1171bc:	e3403014 	movt	r3, #20
  1171c0:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  1171c4:	e3530000 	cmp	r3, #0
  1171c8:	0a000006 	beq	1171e8 <dns_alloc_pcb+0x4c>
  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
  1171cc:	e55b300d 	ldrb	r3, [fp, #-13]
  1171d0:	e2833001 	add	r3, r3, #1
  1171d4:	e54b300d 	strb	r3, [fp, #-13]
  1171d8:	e55b300d 	ldrb	r3, [fp, #-13]
  1171dc:	e3530003 	cmp	r3, #3
  1171e0:	9afffff3 	bls	1171b4 <dns_alloc_pcb+0x18>
  1171e4:	ea000000 	b	1171ec <dns_alloc_pcb+0x50>
      break;
  1171e8:	e320f000 	nop	{0}
    }
  }
  if (i < DNS_MAX_SOURCE_PORTS) {
  1171ec:	e55b300d 	ldrb	r3, [fp, #-13]
  1171f0:	e3530003 	cmp	r3, #3
  1171f4:	8a000011 	bhi	117240 <dns_alloc_pcb+0xa4>
    dns_pcbs[i] = dns_alloc_random_port();
  1171f8:	e55b400d 	ldrb	r4, [fp, #-13]
  1171fc:	ebffffb7 	bl	1170e0 <dns_alloc_random_port>
  117200:	e1a02000 	mov	r2, r0
  117204:	e30d3c44 	movw	r3, #56388	; 0xdc44
  117208:	e3403014 	movt	r3, #20
  11720c:	e7832104 	str	r2, [r3, r4, lsl #2]
    if (dns_pcbs[i] != NULL) {
  117210:	e55b200d 	ldrb	r2, [fp, #-13]
  117214:	e30d3c44 	movw	r3, #56388	; 0xdc44
  117218:	e3403014 	movt	r3, #20
  11721c:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  117220:	e3530000 	cmp	r3, #0
  117224:	0a000005 	beq	117240 <dns_alloc_pcb+0xa4>
      /* succeeded */
      dns_last_pcb_idx = i;
  117228:	e30d3c54 	movw	r3, #56404	; 0xdc54
  11722c:	e3403014 	movt	r3, #20
  117230:	e55b200d 	ldrb	r2, [fp, #-13]
  117234:	e5c32000 	strb	r2, [r3]
      return i;
  117238:	e55b300d 	ldrb	r3, [fp, #-13]
  11723c:	ea000022 	b	1172cc <dns_alloc_pcb+0x130>
    }
  }
  /* if we come here, creating a new UDP pcb failed, so we have to use
     an already existing one */
  for (i = 0, idx = dns_last_pcb_idx + 1; i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
  117240:	e3a03000 	mov	r3, #0
  117244:	e54b300d 	strb	r3, [fp, #-13]
  117248:	e30d3c54 	movw	r3, #56404	; 0xdc54
  11724c:	e3403014 	movt	r3, #20
  117250:	e5d33000 	ldrb	r3, [r3]
  117254:	e2833001 	add	r3, r3, #1
  117258:	e54b300e 	strb	r3, [fp, #-14]
  11725c:	ea000016 	b	1172bc <dns_alloc_pcb+0x120>
    if (idx >= DNS_MAX_SOURCE_PORTS) {
  117260:	e55b300e 	ldrb	r3, [fp, #-14]
  117264:	e3530003 	cmp	r3, #3
  117268:	9a000001 	bls	117274 <dns_alloc_pcb+0xd8>
      idx = 0;
  11726c:	e3a03000 	mov	r3, #0
  117270:	e54b300e 	strb	r3, [fp, #-14]
    }
    if (dns_pcbs[idx] != NULL) {
  117274:	e55b200e 	ldrb	r2, [fp, #-14]
  117278:	e30d3c44 	movw	r3, #56388	; 0xdc44
  11727c:	e3403014 	movt	r3, #20
  117280:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  117284:	e3530000 	cmp	r3, #0
  117288:	0a000005 	beq	1172a4 <dns_alloc_pcb+0x108>
      dns_last_pcb_idx = idx;
  11728c:	e30d3c54 	movw	r3, #56404	; 0xdc54
  117290:	e3403014 	movt	r3, #20
  117294:	e55b200e 	ldrb	r2, [fp, #-14]
  117298:	e5c32000 	strb	r2, [r3]
      return idx;
  11729c:	e55b300e 	ldrb	r3, [fp, #-14]
  1172a0:	ea000009 	b	1172cc <dns_alloc_pcb+0x130>
  for (i = 0, idx = dns_last_pcb_idx + 1; i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
  1172a4:	e55b300d 	ldrb	r3, [fp, #-13]
  1172a8:	e2833001 	add	r3, r3, #1
  1172ac:	e54b300d 	strb	r3, [fp, #-13]
  1172b0:	e55b300e 	ldrb	r3, [fp, #-14]
  1172b4:	e2833001 	add	r3, r3, #1
  1172b8:	e54b300e 	strb	r3, [fp, #-14]
  1172bc:	e55b300d 	ldrb	r3, [fp, #-13]
  1172c0:	e3530003 	cmp	r3, #3
  1172c4:	9affffe5 	bls	117260 <dns_alloc_pcb+0xc4>
    }
  }
  return DNS_MAX_SOURCE_PORTS;
  1172c8:	e3a03004 	mov	r3, #4
}
  1172cc:	e1a00003 	mov	r0, r3
  1172d0:	e24bd008 	sub	sp, fp, #8
  1172d4:	e8bd8810 	pop	{r4, fp, pc}

001172d8 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t* addr)
{
  1172d8:	e92d4810 	push	{r4, fp, lr}
  1172dc:	e28db008 	add	fp, sp, #8
  1172e0:	e24dd014 	sub	sp, sp, #20
  1172e4:	e1a03000 	mov	r3, r0
  1172e8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  1172ec:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
    }
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
  1172f0:	e3a03000 	mov	r3, #0
  1172f4:	e54b300d 	strb	r3, [fp, #-13]
  1172f8:	ea000037 	b	1173dc <dns_call_found+0x104>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
  1172fc:	e55b200d 	ldrb	r2, [fp, #-13]
  117300:	e30e3098 	movw	r3, #57496	; 0xe098
  117304:	e3403014 	movt	r3, #20
  117308:	e3a0100c 	mov	r1, #12
  11730c:	e0020291 	mul	r2, r1, r2
  117310:	e0833002 	add	r3, r3, r2
  117314:	e5933000 	ldr	r3, [r3]
  117318:	e3530000 	cmp	r3, #0
  11731c:	0a00002b 	beq	1173d0 <dns_call_found+0xf8>
  117320:	e55b200d 	ldrb	r2, [fp, #-13]
  117324:	e30e3098 	movw	r3, #57496	; 0xe098
  117328:	e3403014 	movt	r3, #20
  11732c:	e3a0100c 	mov	r1, #12
  117330:	e0020291 	mul	r2, r1, r2
  117334:	e0833002 	add	r3, r3, r2
  117338:	e2833008 	add	r3, r3, #8
  11733c:	e5d33000 	ldrb	r3, [r3]
  117340:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
  117344:	e1520003 	cmp	r2, r3
  117348:	1a000020 	bne	1173d0 <dns_call_found+0xf8>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
  11734c:	e55b200d 	ldrb	r2, [fp, #-13]
  117350:	e30e3098 	movw	r3, #57496	; 0xe098
  117354:	e3403014 	movt	r3, #20
  117358:	e3a0100c 	mov	r1, #12
  11735c:	e0020291 	mul	r2, r1, r2
  117360:	e0833002 	add	r3, r3, r2
  117364:	e5934000 	ldr	r4, [r3]
  117368:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  11736c:	e3a02e11 	mov	r2, #272	; 0x110
  117370:	e0030392 	mul	r3, r2, r3
  117374:	e2832010 	add	r2, r3, #16
  117378:	e30d3c58 	movw	r3, #56408	; 0xdc58
  11737c:	e3403014 	movt	r3, #20
  117380:	e0820003 	add	r0, r2, r3
  117384:	e55b200d 	ldrb	r2, [fp, #-13]
  117388:	e30e3098 	movw	r3, #57496	; 0xe098
  11738c:	e3403014 	movt	r3, #20
  117390:	e3a0100c 	mov	r1, #12
  117394:	e0020291 	mul	r2, r1, r2
  117398:	e0833002 	add	r3, r3, r2
  11739c:	e2833004 	add	r3, r3, #4
  1173a0:	e5933000 	ldr	r3, [r3]
  1173a4:	e1a02003 	mov	r2, r3
  1173a8:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1173ac:	e12fff34 	blx	r4
      /* flush this entry */
      dns_requests[i].found = NULL;
  1173b0:	e55b200d 	ldrb	r2, [fp, #-13]
  1173b4:	e30e3098 	movw	r3, #57496	; 0xe098
  1173b8:	e3403014 	movt	r3, #20
  1173bc:	e3a0100c 	mov	r1, #12
  1173c0:	e0020291 	mul	r2, r1, r2
  1173c4:	e0833002 	add	r3, r3, r2
  1173c8:	e3a02000 	mov	r2, #0
  1173cc:	e5832000 	str	r2, [r3]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
  1173d0:	e55b300d 	ldrb	r3, [fp, #-13]
  1173d4:	e2833001 	add	r3, r3, #1
  1173d8:	e54b300d 	strb	r3, [fp, #-13]
  1173dc:	e55b300d 	ldrb	r3, [fp, #-13]
  1173e0:	e3530003 	cmp	r3, #3
  1173e4:	9affffc4 	bls	1172fc <dns_call_found+0x24>
  }
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
  1173e8:	e3a03000 	mov	r3, #0
  1173ec:	e54b300d 	strb	r3, [fp, #-13]
  1173f0:	ea00002d 	b	1174ac <dns_call_found+0x1d4>
    if (i == idx) {
  1173f4:	e55b200d 	ldrb	r2, [fp, #-13]
  1173f8:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  1173fc:	e1520003 	cmp	r2, r3
  117400:	0a000025 	beq	11749c <dns_call_found+0x1c4>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
  117404:	e55b200d 	ldrb	r2, [fp, #-13]
  117408:	e30d3c58 	movw	r3, #56408	; 0xdc58
  11740c:	e3403014 	movt	r3, #20
  117410:	e3a01e11 	mov	r1, #272	; 0x110
  117414:	e0020291 	mul	r2, r1, r2
  117418:	e0833002 	add	r3, r3, r2
  11741c:	e283300a 	add	r3, r3, #10
  117420:	e5d33000 	ldrb	r3, [r3]
  117424:	e3530002 	cmp	r3, #2
  117428:	1a00001c 	bne	1174a0 <dns_call_found+0x1c8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
  11742c:	e55b200d 	ldrb	r2, [fp, #-13]
  117430:	e30d3c58 	movw	r3, #56408	; 0xdc58
  117434:	e3403014 	movt	r3, #20
  117438:	e3a01e11 	mov	r1, #272	; 0x110
  11743c:	e0020291 	mul	r2, r1, r2
  117440:	e0833002 	add	r3, r3, r2
  117444:	e283300f 	add	r3, r3, #15
  117448:	e5d32000 	ldrb	r2, [r3]
  11744c:	e55b1015 	ldrb	r1, [fp, #-21]	; 0xffffffeb
  117450:	e30d3c58 	movw	r3, #56408	; 0xdc58
  117454:	e3403014 	movt	r3, #20
  117458:	e3a00e11 	mov	r0, #272	; 0x110
  11745c:	e0010190 	mul	r1, r0, r1
  117460:	e0833001 	add	r3, r3, r1
  117464:	e283300f 	add	r3, r3, #15
  117468:	e5d33000 	ldrb	r3, [r3]
  11746c:	e1520003 	cmp	r2, r3
  117470:	1a00000a 	bne	1174a0 <dns_call_found+0x1c8>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
  117474:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
  117478:	e30d3c58 	movw	r3, #56408	; 0xdc58
  11747c:	e3403014 	movt	r3, #20
  117480:	e3a01e11 	mov	r1, #272	; 0x110
  117484:	e0020291 	mul	r2, r1, r2
  117488:	e0833002 	add	r3, r3, r2
  11748c:	e283300f 	add	r3, r3, #15
  117490:	e3a02004 	mov	r2, #4
  117494:	e5c32000 	strb	r2, [r3]
        break;
  117498:	ea000006 	b	1174b8 <dns_call_found+0x1e0>
      continue; /* only check other requests */
  11749c:	e320f000 	nop	{0}
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
  1174a0:	e55b300d 	ldrb	r3, [fp, #-13]
  1174a4:	e2833001 	add	r3, r3, #1
  1174a8:	e54b300d 	strb	r3, [fp, #-13]
  1174ac:	e55b300d 	ldrb	r3, [fp, #-13]
  1174b0:	e3530003 	cmp	r3, #3
  1174b4:	9affffce 	bls	1173f4 <dns_call_found+0x11c>
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
  1174b8:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
  1174bc:	e30d3c58 	movw	r3, #56408	; 0xdc58
  1174c0:	e3403014 	movt	r3, #20
  1174c4:	e3a01e11 	mov	r1, #272	; 0x110
  1174c8:	e0020291 	mul	r2, r1, r2
  1174cc:	e0833002 	add	r3, r3, r2
  1174d0:	e283300f 	add	r3, r3, #15
  1174d4:	e5d33000 	ldrb	r3, [r3]
  1174d8:	e3530003 	cmp	r3, #3
  1174dc:	8a000023 	bhi	117570 <dns_call_found+0x298>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
  1174e0:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
  1174e4:	e30d3c58 	movw	r3, #56408	; 0xdc58
  1174e8:	e3403014 	movt	r3, #20
  1174ec:	e3a01e11 	mov	r1, #272	; 0x110
  1174f0:	e0020291 	mul	r2, r1, r2
  1174f4:	e0833002 	add	r3, r3, r2
  1174f8:	e283300f 	add	r3, r3, #15
  1174fc:	e5d33000 	ldrb	r3, [r3]
  117500:	e1a02003 	mov	r2, r3
  117504:	e30d3c44 	movw	r3, #56388	; 0xdc44
  117508:	e3403014 	movt	r3, #20
  11750c:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  117510:	e1a00003 	mov	r0, r3
  117514:	eb004538 	bl	1289fc <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
  117518:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
  11751c:	e30d3c58 	movw	r3, #56408	; 0xdc58
  117520:	e3403014 	movt	r3, #20
  117524:	e3a01e11 	mov	r1, #272	; 0x110
  117528:	e0020291 	mul	r2, r1, r2
  11752c:	e0833002 	add	r3, r3, r2
  117530:	e283300f 	add	r3, r3, #15
  117534:	e5d33000 	ldrb	r3, [r3]
  117538:	e1a01003 	mov	r1, r3
  11753c:	e30d3c44 	movw	r3, #56388	; 0xdc44
  117540:	e3403014 	movt	r3, #20
  117544:	e3a02000 	mov	r2, #0
  117548:	e7832101 	str	r2, [r3, r1, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
  11754c:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
  117550:	e30d3c58 	movw	r3, #56408	; 0xdc58
  117554:	e3403014 	movt	r3, #20
  117558:	e3a01e11 	mov	r1, #272	; 0x110
  11755c:	e0020291 	mul	r2, r1, r2
  117560:	e0833002 	add	r3, r3, r2
  117564:	e283300f 	add	r3, r3, #15
  117568:	e3a02004 	mov	r2, #4
  11756c:	e5c32000 	strb	r2, [r3]
  }
#endif
}
  117570:	e320f000 	nop	{0}
  117574:	e24bd008 	sub	sp, fp, #8
  117578:	e8bd8810 	pop	{r4, fp, pc}

0011757c <dns_create_txid>:

/* Create a query transmission ID that is unique for all outstanding queries */
static u16_t
dns_create_txid(void)
{
  11757c:	e92d4800 	push	{fp, lr}
  117580:	e28db004 	add	fp, sp, #4
  117584:	e24dd008 	sub	sp, sp, #8
  u16_t txid;
  u8_t i;

again:
  txid = (u16_t)DNS_RAND_TXID();
  117588:	eb009aff 	bl	13e18c <rand>
  11758c:	e1a03000 	mov	r3, r0
  117590:	e14b30b8 	strh	r3, [fp, #-8]

  /* check whether the ID is unique */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
  117594:	e3a03000 	mov	r3, #0
  117598:	e54b3005 	strb	r3, [fp, #-5]
  11759c:	ea000018 	b	117604 <dns_create_txid+0x88>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
  1175a0:	e55b2005 	ldrb	r2, [fp, #-5]
  1175a4:	e30d3c58 	movw	r3, #56408	; 0xdc58
  1175a8:	e3403014 	movt	r3, #20
  1175ac:	e3a01e11 	mov	r1, #272	; 0x110
  1175b0:	e0020291 	mul	r2, r1, r2
  1175b4:	e0833002 	add	r3, r3, r2
  1175b8:	e283300a 	add	r3, r3, #10
  1175bc:	e5d33000 	ldrb	r3, [r3]
  1175c0:	e3530002 	cmp	r3, #2
  1175c4:	1a00000b 	bne	1175f8 <dns_create_txid+0x7c>
        (dns_table[i].txid == txid)) {
  1175c8:	e55b2005 	ldrb	r2, [fp, #-5]
  1175cc:	e30d3c58 	movw	r3, #56408	; 0xdc58
  1175d0:	e3403014 	movt	r3, #20
  1175d4:	e3a01e11 	mov	r1, #272	; 0x110
  1175d8:	e0020291 	mul	r2, r1, r2
  1175dc:	e0833002 	add	r3, r3, r2
  1175e0:	e2833008 	add	r3, r3, #8
  1175e4:	e1d330b0 	ldrh	r3, [r3]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
  1175e8:	e15b20b8 	ldrh	r2, [fp, #-8]
  1175ec:	e1520003 	cmp	r2, r3
  1175f0:	1a000000 	bne	1175f8 <dns_create_txid+0x7c>
      /* ID already used by another pending query */
      goto again;
  1175f4:	eaffffe3 	b	117588 <dns_create_txid+0xc>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
  1175f8:	e55b3005 	ldrb	r3, [fp, #-5]
  1175fc:	e2833001 	add	r3, r3, #1
  117600:	e54b3005 	strb	r3, [fp, #-5]
  117604:	e55b3005 	ldrb	r3, [fp, #-5]
  117608:	e3530003 	cmp	r3, #3
  11760c:	9affffe3 	bls	1175a0 <dns_create_txid+0x24>
    }
  }

  return txid;
  117610:	e15b30b8 	ldrh	r3, [fp, #-8]
}
  117614:	e1a00003 	mov	r0, r3
  117618:	e24bd004 	sub	sp, fp, #4
  11761c:	e8bd8800 	pop	{fp, pc}

00117620 <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
  117620:	e92d4800 	push	{fp, lr}
  117624:	e28db004 	add	fp, sp, #4
  117628:	e24dd010 	sub	sp, sp, #16
  11762c:	e1a03000 	mov	r3, r0
  117630:	e54b300d 	strb	r3, [fp, #-13]
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
  117634:	e55b300d 	ldrb	r3, [fp, #-13]
  117638:	e3a02e11 	mov	r2, #272	; 0x110
  11763c:	e0020392 	mul	r2, r2, r3
  117640:	e30d3c58 	movw	r3, #56408	; 0xdc58
  117644:	e3403014 	movt	r3, #20
  117648:	e0823003 	add	r3, r2, r3
  11764c:	e50b3008 	str	r3, [fp, #-8]

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
  117650:	e55b300d 	ldrb	r3, [fp, #-13]
  117654:	e3530003 	cmp	r3, #3
  117658:	9a000006 	bls	117678 <dns_check_entry+0x58>
  11765c:	e30700bc 	movw	r0, #28860	; 0x70bc
  117660:	e3400014 	movt	r0, #20
  117664:	ebffaeaa 	bl	103114 <rt_kprintf>
  117668:	e3001405 	movw	r1, #1029	; 0x405
  11766c:	e3070090 	movw	r0, #28816	; 0x7090
  117670:	e3400014 	movt	r0, #20
  117674:	ebffce9d 	bl	10b0f0 <sys_arch_assert>

  switch (entry->state) {
  117678:	e51b3008 	ldr	r3, [fp, #-8]
  11767c:	e5d3300a 	ldrb	r3, [r3, #10]
  117680:	e3530003 	cmp	r3, #3
  117684:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  117688:	ea00006b 	b	11783c <dns_check_entry+0x21c>
  11768c:	0011785c 	.word	0x0011785c
  117690:	0011769c 	.word	0x0011769c
  117694:	001176f8 	.word	0x001176f8
  117698:	001177f8 	.word	0x001177f8
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
  11769c:	ebffffb6 	bl	11757c <dns_create_txid>
  1176a0:	e1a03000 	mov	r3, r0
  1176a4:	e1a02003 	mov	r2, r3
  1176a8:	e51b3008 	ldr	r3, [fp, #-8]
  1176ac:	e1c320b8 	strh	r2, [r3, #8]
      entry->state = DNS_STATE_ASKING;
  1176b0:	e51b3008 	ldr	r3, [fp, #-8]
  1176b4:	e3a02002 	mov	r2, #2
  1176b8:	e5c3200a 	strb	r2, [r3, #10]
      entry->server_idx = 0;
  1176bc:	e51b3008 	ldr	r3, [fp, #-8]
  1176c0:	e3a02000 	mov	r2, #0
  1176c4:	e5c3200b 	strb	r2, [r3, #11]
      entry->tmr = 1;
  1176c8:	e51b3008 	ldr	r3, [fp, #-8]
  1176cc:	e3a02001 	mov	r2, #1
  1176d0:	e5c3200c 	strb	r2, [r3, #12]
      entry->retries = 0;
  1176d4:	e51b3008 	ldr	r3, [fp, #-8]
  1176d8:	e3a02000 	mov	r2, #0
  1176dc:	e5c3200d 	strb	r2, [r3, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
  1176e0:	e55b300d 	ldrb	r3, [fp, #-13]
  1176e4:	e1a00003 	mov	r0, r3
  1176e8:	ebfffdc7 	bl	116e0c <dns_send>
  1176ec:	e1a03000 	mov	r3, r0
  1176f0:	e54b3009 	strb	r3, [fp, #-9]
      if (err != ERR_OK) {
        LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                    ("dns_send returned error: %s\n", lwip_strerr(err)));
      }
      break;
  1176f4:	ea00005d 	b	117870 <dns_check_entry+0x250>
    case DNS_STATE_ASKING:
      if (--entry->tmr == 0) {
  1176f8:	e51b3008 	ldr	r3, [fp, #-8]
  1176fc:	e5d3300c 	ldrb	r3, [r3, #12]
  117700:	e2433001 	sub	r3, r3, #1
  117704:	e6ef2073 	uxtb	r2, r3
  117708:	e51b3008 	ldr	r3, [fp, #-8]
  11770c:	e5c3200c 	strb	r2, [r3, #12]
  117710:	e51b3008 	ldr	r3, [fp, #-8]
  117714:	e5d3300c 	ldrb	r3, [r3, #12]
  117718:	e3530000 	cmp	r3, #0
  11771c:	1a000050 	bne	117864 <dns_check_entry+0x244>
        if (++entry->retries == DNS_MAX_RETRIES) {
  117720:	e51b3008 	ldr	r3, [fp, #-8]
  117724:	e5d3300d 	ldrb	r3, [r3, #13]
  117728:	e2833001 	add	r3, r3, #1
  11772c:	e6ef2073 	uxtb	r2, r3
  117730:	e51b3008 	ldr	r3, [fp, #-8]
  117734:	e5c3200d 	strb	r2, [r3, #13]
  117738:	e51b3008 	ldr	r3, [fp, #-8]
  11773c:	e5d3300d 	ldrb	r3, [r3, #13]
  117740:	e3530004 	cmp	r3, #4
  117744:	1a000021 	bne	1177d0 <dns_check_entry+0x1b0>
          if ((entry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[entry->server_idx + 1])
  117748:	e51b3008 	ldr	r3, [fp, #-8]
  11774c:	e5d3300b 	ldrb	r3, [r3, #11]
  117750:	e2833001 	add	r3, r3, #1
  117754:	e3530001 	cmp	r3, #1
  117758:	ca000014 	bgt	1177b0 <dns_check_entry+0x190>
  11775c:	e51b3008 	ldr	r3, [fp, #-8]
  117760:	e5d3300b 	ldrb	r3, [r3, #11]
  117764:	e2832001 	add	r2, r3, #1
  117768:	e30e30c8 	movw	r3, #57544	; 0xe0c8
  11776c:	e3403014 	movt	r3, #20
  117770:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  117774:	e3530000 	cmp	r3, #0
  117778:	0a00000c 	beq	1177b0 <dns_check_entry+0x190>
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
            && !entry->is_mdns
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
            ) {
            /* change of server */
            entry->server_idx++;
  11777c:	e51b3008 	ldr	r3, [fp, #-8]
  117780:	e5d3300b 	ldrb	r3, [r3, #11]
  117784:	e2833001 	add	r3, r3, #1
  117788:	e6ef2073 	uxtb	r2, r3
  11778c:	e51b3008 	ldr	r3, [fp, #-8]
  117790:	e5c3200b 	strb	r2, [r3, #11]
            entry->tmr = 1;
  117794:	e51b3008 	ldr	r3, [fp, #-8]
  117798:	e3a02001 	mov	r2, #1
  11779c:	e5c3200c 	strb	r2, [r3, #12]
            entry->retries = 0;
  1177a0:	e51b3008 	ldr	r3, [fp, #-8]
  1177a4:	e3a02000 	mov	r2, #0
  1177a8:	e5c3200d 	strb	r2, [r3, #13]
  1177ac:	ea00000b 	b	1177e0 <dns_check_entry+0x1c0>
          } else {
            LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": timeout\n", entry->name));
            /* call specified callback function if provided */
            dns_call_found(i, NULL);
  1177b0:	e55b300d 	ldrb	r3, [fp, #-13]
  1177b4:	e3a01000 	mov	r1, #0
  1177b8:	e1a00003 	mov	r0, r3
  1177bc:	ebfffec5 	bl	1172d8 <dns_call_found>
            /* flush this entry */
            entry->state = DNS_STATE_UNUSED;
  1177c0:	e51b3008 	ldr	r3, [fp, #-8]
  1177c4:	e3a02000 	mov	r2, #0
  1177c8:	e5c3200a 	strb	r2, [r3, #10]
            break;
  1177cc:	ea000027 	b	117870 <dns_check_entry+0x250>
          }
        } else {
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
  1177d0:	e51b3008 	ldr	r3, [fp, #-8]
  1177d4:	e5d3200d 	ldrb	r2, [r3, #13]
  1177d8:	e51b3008 	ldr	r3, [fp, #-8]
  1177dc:	e5c3200c 	strb	r2, [r3, #12]
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
  1177e0:	e55b300d 	ldrb	r3, [fp, #-13]
  1177e4:	e1a00003 	mov	r0, r3
  1177e8:	ebfffd87 	bl	116e0c <dns_send>
  1177ec:	e1a03000 	mov	r3, r0
  1177f0:	e54b3009 	strb	r3, [fp, #-9]
        if (err != ERR_OK) {
          LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                      ("dns_send returned error: %s\n", lwip_strerr(err)));
        }
      }
      break;
  1177f4:	ea00001a 	b	117864 <dns_check_entry+0x244>
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
  1177f8:	e51b3008 	ldr	r3, [fp, #-8]
  1177fc:	e5933000 	ldr	r3, [r3]
  117800:	e3530000 	cmp	r3, #0
  117804:	0a000008 	beq	11782c <dns_check_entry+0x20c>
  117808:	e51b3008 	ldr	r3, [fp, #-8]
  11780c:	e5933000 	ldr	r3, [r3]
  117810:	e2432001 	sub	r2, r3, #1
  117814:	e51b3008 	ldr	r3, [fp, #-8]
  117818:	e5832000 	str	r2, [r3]
  11781c:	e51b3008 	ldr	r3, [fp, #-8]
  117820:	e5933000 	ldr	r3, [r3]
  117824:	e3530000 	cmp	r3, #0
  117828:	1a00000f 	bne	11786c <dns_check_entry+0x24c>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
  11782c:	e51b3008 	ldr	r3, [fp, #-8]
  117830:	e3a02000 	mov	r2, #0
  117834:	e5c3200a 	strb	r2, [r3, #10]
      }
      break;
  117838:	ea00000b 	b	11786c <dns_check_entry+0x24c>
    case DNS_STATE_UNUSED:
      /* nothing to do */
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
  11783c:	e30700d8 	movw	r0, #28888	; 0x70d8
  117840:	e3400014 	movt	r0, #20
  117844:	ebffae32 	bl	103114 <rt_kprintf>
  117848:	e3001444 	movw	r1, #1092	; 0x444
  11784c:	e3070090 	movw	r0, #28816	; 0x7090
  117850:	e3400014 	movt	r0, #20
  117854:	ebffce25 	bl	10b0f0 <sys_arch_assert>
      break;
  117858:	ea000004 	b	117870 <dns_check_entry+0x250>
      break;
  11785c:	e320f000 	nop	{0}
  117860:	ea000002 	b	117870 <dns_check_entry+0x250>
      break;
  117864:	e320f000 	nop	{0}
  117868:	ea000000 	b	117870 <dns_check_entry+0x250>
      break;
  11786c:	e320f000 	nop	{0}
  }
}
  117870:	e320f000 	nop	{0}
  117874:	e24bd004 	sub	sp, fp, #4
  117878:	e8bd8800 	pop	{fp, pc}

0011787c <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
  11787c:	e92d4800 	push	{fp, lr}
  117880:	e28db004 	add	fp, sp, #4
  117884:	e24dd008 	sub	sp, sp, #8
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
  117888:	e3a03000 	mov	r3, #0
  11788c:	e54b3005 	strb	r3, [fp, #-5]
  117890:	ea000005 	b	1178ac <dns_check_entries+0x30>
    dns_check_entry(i);
  117894:	e55b3005 	ldrb	r3, [fp, #-5]
  117898:	e1a00003 	mov	r0, r3
  11789c:	ebffff5f 	bl	117620 <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
  1178a0:	e55b3005 	ldrb	r3, [fp, #-5]
  1178a4:	e2833001 	add	r3, r3, #1
  1178a8:	e54b3005 	strb	r3, [fp, #-5]
  1178ac:	e55b3005 	ldrb	r3, [fp, #-5]
  1178b0:	e3530003 	cmp	r3, #3
  1178b4:	9afffff6 	bls	117894 <dns_check_entries+0x18>
  }
}
  1178b8:	e320f000 	nop	{0}
  1178bc:	e24bd004 	sub	sp, fp, #4
  1178c0:	e8bd8800 	pop	{fp, pc}

001178c4 <dns_correct_response>:
/**
 * Save TTL and call dns_call_found for correct response.
 */
static void
dns_correct_response(u8_t idx, u32_t ttl)
{
  1178c4:	e92d4800 	push	{fp, lr}
  1178c8:	e28db004 	add	fp, sp, #4
  1178cc:	e24dd010 	sub	sp, sp, #16
  1178d0:	e1a03000 	mov	r3, r0
  1178d4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1178d8:	e54b300d 	strb	r3, [fp, #-13]
  struct dns_table_entry *entry = &dns_table[idx];
  1178dc:	e55b300d 	ldrb	r3, [fp, #-13]
  1178e0:	e3a02e11 	mov	r2, #272	; 0x110
  1178e4:	e0020392 	mul	r2, r2, r3
  1178e8:	e30d3c58 	movw	r3, #56408	; 0xdc58
  1178ec:	e3403014 	movt	r3, #20
  1178f0:	e0823003 	add	r3, r2, r3
  1178f4:	e50b3008 	str	r3, [fp, #-8]

  entry->state = DNS_STATE_DONE;
  1178f8:	e51b3008 	ldr	r3, [fp, #-8]
  1178fc:	e3a02003 	mov	r2, #3
  117900:	e5c3200a 	strb	r2, [r3, #10]
  LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response = ", entry->name));
  ip_addr_debug_print(DNS_DEBUG, (&(entry->ipaddr)));
  LWIP_DEBUGF(DNS_DEBUG, ("\n"));

  /* read the answer resource record's TTL, and maximize it if needed */
  entry->ttl = ttl;
  117904:	e51b3008 	ldr	r3, [fp, #-8]
  117908:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11790c:	e5832000 	str	r2, [r3]
  if (entry->ttl > DNS_MAX_TTL) {
  117910:	e51b3008 	ldr	r3, [fp, #-8]
  117914:	e5932000 	ldr	r2, [r3]
  117918:	e3a03dea 	mov	r3, #14976	; 0x3a80
  11791c:	e3403009 	movt	r3, #9
  117920:	e1520003 	cmp	r2, r3
  117924:	9a000003 	bls	117938 <dns_correct_response+0x74>
    entry->ttl = DNS_MAX_TTL;
  117928:	e51b2008 	ldr	r2, [fp, #-8]
  11792c:	e3a03dea 	mov	r3, #14976	; 0x3a80
  117930:	e3403009 	movt	r3, #9
  117934:	e5823000 	str	r3, [r2]
  }
  dns_call_found(idx, &entry->ipaddr);
  117938:	e51b3008 	ldr	r3, [fp, #-8]
  11793c:	e2832004 	add	r2, r3, #4
  117940:	e55b300d 	ldrb	r3, [fp, #-13]
  117944:	e1a01002 	mov	r1, r2
  117948:	e1a00003 	mov	r0, r3
  11794c:	ebfffe61 	bl	1172d8 <dns_call_found>

  if (entry->ttl == 0) {
  117950:	e51b3008 	ldr	r3, [fp, #-8]
  117954:	e5933000 	ldr	r3, [r3]
  117958:	e3530000 	cmp	r3, #0
  11795c:	1a000006 	bne	11797c <dns_correct_response+0xb8>
    /* RFC 883, page 29: "Zero values are
       interpreted to mean that the RR can only be used for the
       transaction in progress, and should not be cached."
       -> flush this entry now */
    /* entry reused during callback? */
    if (entry->state == DNS_STATE_DONE) {
  117960:	e51b3008 	ldr	r3, [fp, #-8]
  117964:	e5d3300a 	ldrb	r3, [r3, #10]
  117968:	e3530003 	cmp	r3, #3
  11796c:	1a000002 	bne	11797c <dns_correct_response+0xb8>
      entry->state = DNS_STATE_UNUSED;
  117970:	e51b3008 	ldr	r3, [fp, #-8]
  117974:	e3a02000 	mov	r2, #0
  117978:	e5c3200a 	strb	r2, [r3, #10]
    }
  }
}
  11797c:	e320f000 	nop	{0}
  117980:	e24bd004 	sub	sp, fp, #4
  117984:	e8bd8800 	pop	{fp, pc}

00117988 <dns_recv>:
/**
 * Receive input function for DNS response packets arriving for the dns UDP pcb.
 */
static void
dns_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
  117988:	e92d4810 	push	{r4, fp, lr}
  11798c:	e28db008 	add	fp, sp, #8
  117990:	e24dd044 	sub	sp, sp, #68	; 0x44
  117994:	e50b0040 	str	r0, [fp, #-64]	; 0xffffffc0
  117998:	e50b1044 	str	r1, [fp, #-68]	; 0xffffffbc
  11799c:	e50b2048 	str	r2, [fp, #-72]	; 0xffffffb8
  1179a0:	e50b304c 	str	r3, [fp, #-76]	; 0xffffffb4
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(port);

  /* is the dns message big enough ? */
  if (p->tot_len < (SIZEOF_DNS_HDR + SIZEOF_DNS_QUERY)) {
  1179a4:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
  1179a8:	e1d330b8 	ldrh	r3, [r3, #8]
  1179ac:	e353000f 	cmp	r3, #15
  1179b0:	9a0000c8 	bls	117cd8 <dns_recv+0x350>
    /* free pbuf and return */
    goto memerr;
  }

  /* copy dns payload inside static buffer for processing */
  if (pbuf_copy_partial(p, &hdr, SIZEOF_DNS_HDR, 0) == SIZEOF_DNS_HDR) {
  1179b4:	e24b1028 	sub	r1, fp, #40	; 0x28
  1179b8:	e3a03000 	mov	r3, #0
  1179bc:	e3a0200c 	mov	r2, #12
  1179c0:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  1179c4:	eb000f44 	bl	11b6dc <pbuf_copy_partial>
  1179c8:	e1a03000 	mov	r3, r0
  1179cc:	e353000c 	cmp	r3, #12
  1179d0:	1a0000c2 	bne	117ce0 <dns_recv+0x358>
    /* Match the ID in the DNS header with the name table. */
    txid = lwip_htons(hdr.id);
  1179d4:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  1179d8:	e1a00003 	mov	r0, r3
  1179dc:	ebfffafc 	bl	1165d4 <lwip_htons>
  1179e0:	e1a03000 	mov	r3, r0
  1179e4:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
  1179e8:	e3a03000 	mov	r3, #0
  1179ec:	e54b300d 	strb	r3, [fp, #-13]
  1179f0:	ea0000b4 	b	117cc8 <dns_recv+0x340>
      const struct dns_table_entry *entry = &dns_table[i];
  1179f4:	e55b300d 	ldrb	r3, [fp, #-13]
  1179f8:	e3a02e11 	mov	r2, #272	; 0x110
  1179fc:	e0020392 	mul	r2, r2, r3
  117a00:	e30d3c58 	movw	r3, #56408	; 0xdc58
  117a04:	e3403014 	movt	r3, #20
  117a08:	e0823003 	add	r3, r2, r3
  117a0c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
      if ((entry->state == DNS_STATE_ASKING) &&
  117a10:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  117a14:	e5d3300a 	ldrb	r3, [r3, #10]
  117a18:	e3530002 	cmp	r3, #2
  117a1c:	1a0000a6 	bne	117cbc <dns_recv+0x334>
          (entry->txid == txid)) {
  117a20:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  117a24:	e1d330b8 	ldrh	r3, [r3, #8]
      if ((entry->state == DNS_STATE_ASKING) &&
  117a28:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
  117a2c:	e1520003 	cmp	r2, r3
  117a30:	1a0000a1 	bne	117cbc <dns_recv+0x334>

        /* We only care about the question(s) and the answers. The authrr
           and the extrarr are simply discarded. */
        nquestions = lwip_htons(hdr.numquestions);
  117a34:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  117a38:	e1a00003 	mov	r0, r3
  117a3c:	ebfffae4 	bl	1165d4 <lwip_htons>
  117a40:	e1a03000 	mov	r3, r0
  117a44:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
        nanswers   = lwip_htons(hdr.numanswers);
  117a48:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  117a4c:	e1a00003 	mov	r0, r3
  117a50:	ebfffadf 	bl	1165d4 <lwip_htons>
  117a54:	e1a03000 	mov	r3, r0
  117a58:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee

        /* Check for correct response. */
        if ((hdr.flags1 & DNS_FLAG1_RESPONSE) == 0) {
  117a5c:	e55b3026 	ldrb	r3, [fp, #-38]	; 0xffffffda
  117a60:	e6af3073 	sxtb	r3, r3
  117a64:	e3530000 	cmp	r3, #0
  117a68:	aa00009e 	bge	117ce8 <dns_recv+0x360>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": not a response\n", entry->name));
          goto memerr; /* ignore this packet */
        }
        if (nquestions != 1) {
  117a6c:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  117a70:	e3530001 	cmp	r3, #1
  117a74:	1a00009d 	bne	117cf0 <dns_recv+0x368>
        if (!entry->is_mdns)
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
        {
          /* Check whether response comes from the same network address to which the
             question was sent. (RFC 5452) */
          if (!ip_addr_cmp(addr, &dns_servers[entry->server_idx])) {
  117a78:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  117a7c:	e5932000 	ldr	r2, [r3]
  117a80:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  117a84:	e5d3300b 	ldrb	r3, [r3, #11]
  117a88:	e1a01003 	mov	r1, r3
  117a8c:	e30e30c8 	movw	r3, #57544	; 0xe0c8
  117a90:	e3403014 	movt	r3, #20
  117a94:	e7933101 	ldr	r3, [r3, r1, lsl #2]
  117a98:	e1520003 	cmp	r2, r3
  117a9c:	1a000095 	bne	117cf8 <dns_recv+0x370>
          }
        }

        /* Check if the name in the "question" part match with the name in the entry and
           skip it if equal. */
        res_idx = dns_compare_name(entry->name, p, SIZEOF_DNS_HDR);
  117aa0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  117aa4:	e2833010 	add	r3, r3, #16
  117aa8:	e3a0200c 	mov	r2, #12
  117aac:	e51b1048 	ldr	r1, [fp, #-72]	; 0xffffffb8
  117ab0:	e1a00003 	mov	r0, r3
  117ab4:	ebfffc4a 	bl	116be4 <dns_compare_name>
  117ab8:	e1a03000 	mov	r3, r0
  117abc:	e14b31b0 	strh	r3, [fp, #-16]
        if (res_idx == 0xFFFF) {
  117ac0:	e15b31b0 	ldrh	r3, [fp, #-16]
  117ac4:	e30f2fff 	movw	r2, #65535	; 0xffff
  117ac8:	e1530002 	cmp	r3, r2
  117acc:	0a00008b 	beq	117d00 <dns_recv+0x378>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response not match to query\n", entry->name));
          goto memerr; /* ignore this packet */
        }

        /* check if "question" part matches the request */
        if (pbuf_copy_partial(p, &qry, SIZEOF_DNS_QUERY, res_idx) != SIZEOF_DNS_QUERY) {
  117ad0:	e15b31b0 	ldrh	r3, [fp, #-16]
  117ad4:	e24b1038 	sub	r1, fp, #56	; 0x38
  117ad8:	e3a02004 	mov	r2, #4
  117adc:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  117ae0:	eb000efd 	bl	11b6dc <pbuf_copy_partial>
  117ae4:	e1a03000 	mov	r3, r0
  117ae8:	e3530004 	cmp	r3, #4
  117aec:	1a000085 	bne	117d08 <dns_recv+0x380>
          goto memerr; /* ignore this packet */
        }
        if ((qry.cls != PP_HTONS(DNS_RRCLASS_IN)) ||
  117af0:	e15b33b6 	ldrh	r3, [fp, #-54]	; 0xffffffca
  117af4:	e3530c01 	cmp	r3, #256	; 0x100
  117af8:	1a000078 	bne	117ce0 <dns_recv+0x358>
          (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
          (!LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_A)))) {
  117afc:	e15b33b8 	ldrh	r3, [fp, #-56]	; 0xffffffc8
          (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
  117b00:	e3530c01 	cmp	r3, #256	; 0x100
  117b04:	1a000075 	bne	117ce0 <dns_recv+0x358>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response not match to query\n", entry->name));
          goto memerr; /* ignore this packet */
        }
        /* skip the rest of the "question" part */
        res_idx += SIZEOF_DNS_QUERY;
  117b08:	e15b31b0 	ldrh	r3, [fp, #-16]
  117b0c:	e2833004 	add	r3, r3, #4
  117b10:	e14b31b0 	strh	r3, [fp, #-16]

        /* Check for error. If so, call callback to inform. */
        if (hdr.flags2 & DNS_FLAG2_ERR_MASK) {
  117b14:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  117b18:	e203300f 	and	r3, r3, #15
  117b1c:	e3530000 	cmp	r3, #0
  117b20:	1a000055 	bne	117c7c <dns_recv+0x2f4>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": error in flags\n", entry->name));
        } else {
          while ((nanswers > 0) && (res_idx < p->tot_len)) {
  117b24:	ea00004c 	b	117c5c <dns_recv+0x2d4>
            /* skip answer resource record's host name */
            res_idx = dns_skip_name(p, res_idx);
  117b28:	e15b31b0 	ldrh	r3, [fp, #-16]
  117b2c:	e1a01003 	mov	r1, r3
  117b30:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  117b34:	ebfffc79 	bl	116d20 <dns_skip_name>
  117b38:	e1a03000 	mov	r3, r0
  117b3c:	e14b31b0 	strh	r3, [fp, #-16]
            if (res_idx == 0xFFFF) {
  117b40:	e15b31b0 	ldrh	r3, [fp, #-16]
  117b44:	e30f2fff 	movw	r2, #65535	; 0xffff
  117b48:	e1530002 	cmp	r3, r2
  117b4c:	0a00006f 	beq	117d10 <dns_recv+0x388>
              goto memerr; /* ignore this packet */
            }

            /* Check for IP address type and Internet class. Others are discarded. */
            if (pbuf_copy_partial(p, &ans, SIZEOF_DNS_ANSWER, res_idx) != SIZEOF_DNS_ANSWER) {
  117b50:	e15b31b0 	ldrh	r3, [fp, #-16]
  117b54:	e24b1034 	sub	r1, fp, #52	; 0x34
  117b58:	e3a0200a 	mov	r2, #10
  117b5c:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  117b60:	eb000edd 	bl	11b6dc <pbuf_copy_partial>
  117b64:	e1a03000 	mov	r3, r0
  117b68:	e353000a 	cmp	r3, #10
  117b6c:	1a000069 	bne	117d18 <dns_recv+0x390>
              goto memerr; /* ignore this packet */
            }
            res_idx += SIZEOF_DNS_ANSWER;
  117b70:	e15b31b0 	ldrh	r3, [fp, #-16]
  117b74:	e283300a 	add	r3, r3, #10
  117b78:	e14b31b0 	strh	r3, [fp, #-16]

            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
  117b7c:	e15b33b2 	ldrh	r3, [fp, #-50]	; 0xffffffce
  117b80:	e3530c01 	cmp	r3, #256	; 0x100
  117b84:	1a000021 	bne	117c10 <dns_recv+0x288>
#if LWIP_IPV4
              if ((ans.type == PP_HTONS(DNS_RRTYPE_A)) && (ans.len == PP_HTONS(sizeof(ip4_addr_t)))) {
  117b88:	e15b33b4 	ldrh	r3, [fp, #-52]	; 0xffffffcc
  117b8c:	e3530c01 	cmp	r3, #256	; 0x100
  117b90:	1a00001e 	bne	117c10 <dns_recv+0x288>
  117b94:	e15b32bc 	ldrh	r3, [fp, #-44]	; 0xffffffd4
  117b98:	e3530b01 	cmp	r3, #1024	; 0x400
  117b9c:	1a00001b 	bne	117c10 <dns_recv+0x288>
                if (!LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
                {
                  ip4_addr_t ip4addr;
                  /* read the IP address after answer resource record's header */
                  if (pbuf_copy_partial(p, &ip4addr, sizeof(ip4_addr_t), res_idx) != sizeof(ip4_addr_t)) {
  117ba0:	e15b31b0 	ldrh	r3, [fp, #-16]
  117ba4:	e24b103c 	sub	r1, fp, #60	; 0x3c
  117ba8:	e3a02004 	mov	r2, #4
  117bac:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  117bb0:	eb000ec9 	bl	11b6dc <pbuf_copy_partial>
  117bb4:	e1a03000 	mov	r3, r0
  117bb8:	e3530004 	cmp	r3, #4
  117bbc:	1a000057 	bne	117d20 <dns_recv+0x398>
                    goto memerr; /* ignore this packet */
                  }
                  ip_addr_copy_from_ip4(dns_table[i].ipaddr, ip4addr);
  117bc0:	e55b100d 	ldrb	r1, [fp, #-13]
  117bc4:	e51b203c 	ldr	r2, [fp, #-60]	; 0xffffffc4
  117bc8:	e30d3c58 	movw	r3, #56408	; 0xdc58
  117bcc:	e3403014 	movt	r3, #20
  117bd0:	e3a00e11 	mov	r0, #272	; 0x110
  117bd4:	e0010190 	mul	r1, r0, r1
  117bd8:	e0833001 	add	r3, r3, r1
  117bdc:	e2833004 	add	r3, r3, #4
  117be0:	e5832000 	str	r2, [r3]
                  pbuf_free(p);
  117be4:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  117be8:	eb000cb0 	bl	11aeb0 <pbuf_free>
                  /* handle correct response */
                  dns_correct_response(i, lwip_ntohl(ans.ttl));
  117bec:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  117bf0:	e1a00003 	mov	r0, r3
  117bf4:	ebfffa82 	bl	116604 <lwip_htonl>
  117bf8:	e1a02000 	mov	r2, r0
  117bfc:	e55b300d 	ldrb	r3, [fp, #-13]
  117c00:	e1a01002 	mov	r1, r2
  117c04:	e1a00003 	mov	r0, r3
  117c08:	ebffff2d 	bl	1178c4 <dns_correct_response>
  117c0c:	ea000049 	b	117d38 <dns_recv+0x3b0>
                }
              }
#endif /* LWIP_IPV6 */
            }
            /* skip this answer */
            if ((int)(res_idx + lwip_htons(ans.len)) > 0xFFFF) {
  117c10:	e15b41b0 	ldrh	r4, [fp, #-16]
  117c14:	e15b32bc 	ldrh	r3, [fp, #-44]	; 0xffffffd4
  117c18:	e1a00003 	mov	r0, r3
  117c1c:	ebfffa6c 	bl	1165d4 <lwip_htons>
  117c20:	e1a03000 	mov	r3, r0
  117c24:	e0843003 	add	r3, r4, r3
  117c28:	e3530801 	cmp	r3, #65536	; 0x10000
  117c2c:	aa00003d 	bge	117d28 <dns_recv+0x3a0>
              goto memerr; /* ignore this packet */
            }
            res_idx += lwip_htons(ans.len);
  117c30:	e15b32bc 	ldrh	r3, [fp, #-44]	; 0xffffffd4
  117c34:	e1a00003 	mov	r0, r3
  117c38:	ebfffa65 	bl	1165d4 <lwip_htons>
  117c3c:	e1a03000 	mov	r3, r0
  117c40:	e1a02003 	mov	r2, r3
  117c44:	e15b31b0 	ldrh	r3, [fp, #-16]
  117c48:	e0823003 	add	r3, r2, r3
  117c4c:	e14b31b0 	strh	r3, [fp, #-16]
            --nanswers;
  117c50:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  117c54:	e2433001 	sub	r3, r3, #1
  117c58:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
          while ((nanswers > 0) && (res_idx < p->tot_len)) {
  117c5c:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  117c60:	e3530000 	cmp	r3, #0
  117c64:	0a000004 	beq	117c7c <dns_recv+0x2f4>
  117c68:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
  117c6c:	e1d330b8 	ldrh	r3, [r3, #8]
  117c70:	e15b21b0 	ldrh	r2, [fp, #-16]
  117c74:	e1520003 	cmp	r2, r3
  117c78:	3affffaa 	bcc	117b28 <dns_recv+0x1a0>
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": error in response\n", entry->name));
        }
        /* call callback to indicate error, clean up memory and return */
        pbuf_free(p);
  117c7c:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  117c80:	eb000c8a 	bl	11aeb0 <pbuf_free>
        dns_call_found(i, NULL);
  117c84:	e55b300d 	ldrb	r3, [fp, #-13]
  117c88:	e3a01000 	mov	r1, #0
  117c8c:	e1a00003 	mov	r0, r3
  117c90:	ebfffd90 	bl	1172d8 <dns_call_found>
        dns_table[i].state = DNS_STATE_UNUSED;
  117c94:	e55b200d 	ldrb	r2, [fp, #-13]
  117c98:	e30d3c58 	movw	r3, #56408	; 0xdc58
  117c9c:	e3403014 	movt	r3, #20
  117ca0:	e3a01e11 	mov	r1, #272	; 0x110
  117ca4:	e0020291 	mul	r2, r1, r2
  117ca8:	e0833002 	add	r3, r3, r2
  117cac:	e283300a 	add	r3, r3, #10
  117cb0:	e3a02000 	mov	r2, #0
  117cb4:	e5c32000 	strb	r2, [r3]
        return;
  117cb8:	ea00001e 	b	117d38 <dns_recv+0x3b0>
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
  117cbc:	e55b300d 	ldrb	r3, [fp, #-13]
  117cc0:	e2833001 	add	r3, r3, #1
  117cc4:	e54b300d 	strb	r3, [fp, #-13]
  117cc8:	e55b300d 	ldrb	r3, [fp, #-13]
  117ccc:	e3530003 	cmp	r3, #3
  117cd0:	9affff47 	bls	1179f4 <dns_recv+0x6c>
      }
    }
  }

memerr:
  117cd4:	ea000001 	b	117ce0 <dns_recv+0x358>
    goto memerr;
  117cd8:	e320f000 	nop	{0}
  117cdc:	ea000012 	b	117d2c <dns_recv+0x3a4>
memerr:
  117ce0:	e320f000 	nop	{0}
  117ce4:	ea000010 	b	117d2c <dns_recv+0x3a4>
          goto memerr; /* ignore this packet */
  117ce8:	e320f000 	nop	{0}
  117cec:	ea00000e 	b	117d2c <dns_recv+0x3a4>
          goto memerr; /* ignore this packet */
  117cf0:	e320f000 	nop	{0}
  117cf4:	ea00000c 	b	117d2c <dns_recv+0x3a4>
            goto memerr; /* ignore this packet */
  117cf8:	e320f000 	nop	{0}
  117cfc:	ea00000a 	b	117d2c <dns_recv+0x3a4>
          goto memerr; /* ignore this packet */
  117d00:	e320f000 	nop	{0}
  117d04:	ea000008 	b	117d2c <dns_recv+0x3a4>
          goto memerr; /* ignore this packet */
  117d08:	e320f000 	nop	{0}
  117d0c:	ea000006 	b	117d2c <dns_recv+0x3a4>
              goto memerr; /* ignore this packet */
  117d10:	e320f000 	nop	{0}
  117d14:	ea000004 	b	117d2c <dns_recv+0x3a4>
              goto memerr; /* ignore this packet */
  117d18:	e320f000 	nop	{0}
  117d1c:	ea000002 	b	117d2c <dns_recv+0x3a4>
                    goto memerr; /* ignore this packet */
  117d20:	e320f000 	nop	{0}
  117d24:	ea000000 	b	117d2c <dns_recv+0x3a4>
              goto memerr; /* ignore this packet */
  117d28:	e320f000 	nop	{0}
  /* deallocate memory and return */
  pbuf_free(p);
  117d2c:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  117d30:	eb000c5e 	bl	11aeb0 <pbuf_free>
  return;
  117d34:	e320f000 	nop	{0}
}
  117d38:	e24bd008 	sub	sp, fp, #8
  117d3c:	e8bd8810 	pop	{r4, fp, pc}

00117d40 <dns_enqueue>:
 * @return err_t return code.
 */
static err_t
dns_enqueue(const char *name, size_t hostnamelen, dns_found_callback found,
            void *callback_arg LWIP_DNS_ADDRTYPE_ARG(u8_t dns_addrtype) LWIP_DNS_ISMDNS_ARG(u8_t is_mdns))
{
  117d40:	e92d4800 	push	{fp, lr}
  117d44:	e28db004 	add	fp, sp, #4
  117d48:	e24dd028 	sub	sp, sp, #40	; 0x28
  117d4c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  117d50:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  117d54:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  117d58:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  u8_t i;
  u8_t lseq, lseqi;
  struct dns_table_entry *entry = NULL;
  117d5c:	e3a03000 	mov	r3, #0
  117d60:	e50b300c 	str	r3, [fp, #-12]
  struct dns_req_entry* req;

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  u8_t r;
  /* check for duplicate entries */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
  117d64:	e3a03000 	mov	r3, #0
  117d68:	e54b3005 	strb	r3, [fp, #-5]
  117d6c:	ea000048 	b	117e94 <dns_enqueue+0x154>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
  117d70:	e55b2005 	ldrb	r2, [fp, #-5]
  117d74:	e30d3c58 	movw	r3, #56408	; 0xdc58
  117d78:	e3403014 	movt	r3, #20
  117d7c:	e3a01e11 	mov	r1, #272	; 0x110
  117d80:	e0020291 	mul	r2, r1, r2
  117d84:	e0833002 	add	r3, r3, r2
  117d88:	e283300a 	add	r3, r3, #10
  117d8c:	e5d33000 	ldrb	r3, [r3]
  117d90:	e3530002 	cmp	r3, #2
  117d94:	1a00003b 	bne	117e88 <dns_enqueue+0x148>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0)) {
  117d98:	e55b3005 	ldrb	r3, [fp, #-5]
  117d9c:	e3a02e11 	mov	r2, #272	; 0x110
  117da0:	e0030392 	mul	r3, r2, r3
  117da4:	e2832010 	add	r2, r3, #16
  117da8:	e30d3c58 	movw	r3, #56408	; 0xdc58
  117dac:	e3403014 	movt	r3, #20
  117db0:	e0823003 	add	r3, r2, r3
  117db4:	e3a02c01 	mov	r2, #256	; 0x100
  117db8:	e1a01003 	mov	r1, r3
  117dbc:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  117dc0:	ebfffa87 	bl	1167e4 <lwip_strnicmp>
  117dc4:	e1a03000 	mov	r3, r0
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
  117dc8:	e3530000 	cmp	r3, #0
  117dcc:	1a00002d 	bne	117e88 <dns_enqueue+0x148>
           for the same host should not be that common */
        continue;
      }
#endif /* LWIP_IPV4 && LWIP_IPV6 */
      /* this is a duplicate entry, find a free request entry */
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
  117dd0:	e3a03000 	mov	r3, #0
  117dd4:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  117dd8:	ea000027 	b	117e7c <dns_enqueue+0x13c>
        if (dns_requests[r].found == 0) {
  117ddc:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  117de0:	e30e3098 	movw	r3, #57496	; 0xe098
  117de4:	e3403014 	movt	r3, #20
  117de8:	e3a0100c 	mov	r1, #12
  117dec:	e0020291 	mul	r2, r1, r2
  117df0:	e0833002 	add	r3, r3, r2
  117df4:	e5933000 	ldr	r3, [r3]
  117df8:	e3530000 	cmp	r3, #0
  117dfc:	1a00001b 	bne	117e70 <dns_enqueue+0x130>
          dns_requests[r].found = found;
  117e00:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  117e04:	e30e3098 	movw	r3, #57496	; 0xe098
  117e08:	e3403014 	movt	r3, #20
  117e0c:	e3a0100c 	mov	r1, #12
  117e10:	e0020291 	mul	r2, r1, r2
  117e14:	e0833002 	add	r3, r3, r2
  117e18:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  117e1c:	e5832000 	str	r2, [r3]
          dns_requests[r].arg = callback_arg;
  117e20:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  117e24:	e30e3098 	movw	r3, #57496	; 0xe098
  117e28:	e3403014 	movt	r3, #20
  117e2c:	e3a0100c 	mov	r1, #12
  117e30:	e0020291 	mul	r2, r1, r2
  117e34:	e0833002 	add	r3, r3, r2
  117e38:	e2833004 	add	r3, r3, #4
  117e3c:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  117e40:	e5832000 	str	r2, [r3]
          dns_requests[r].dns_table_idx = i;
  117e44:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  117e48:	e30e3098 	movw	r3, #57496	; 0xe098
  117e4c:	e3403014 	movt	r3, #20
  117e50:	e3a0100c 	mov	r1, #12
  117e54:	e0020291 	mul	r2, r1, r2
  117e58:	e0833002 	add	r3, r3, r2
  117e5c:	e2833008 	add	r3, r3, #8
  117e60:	e55b2005 	ldrb	r2, [fp, #-5]
  117e64:	e5c32000 	strb	r2, [r3]
          LWIP_DNS_SET_ADDRTYPE(dns_requests[r].reqaddrtype, dns_addrtype);
          LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": duplicate request\n", name));
          return ERR_INPROGRESS;
  117e68:	e3e03004 	mvn	r3, #4
  117e6c:	ea0000b3 	b	118140 <dns_enqueue+0x400>
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
  117e70:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  117e74:	e2833001 	add	r3, r3, #1
  117e78:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  117e7c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  117e80:	e3530003 	cmp	r3, #3
  117e84:	9affffd4 	bls	117ddc <dns_enqueue+0x9c>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
  117e88:	e55b3005 	ldrb	r3, [fp, #-5]
  117e8c:	e2833001 	add	r3, r3, #1
  117e90:	e54b3005 	strb	r3, [fp, #-5]
  117e94:	e55b3005 	ldrb	r3, [fp, #-5]
  117e98:	e3530003 	cmp	r3, #3
  117e9c:	9affffb3 	bls	117d70 <dns_enqueue+0x30>
  }
  /* no duplicate entries found */
#endif

  /* search an unused entry, or the oldest one */
  lseq = 0;
  117ea0:	e3a03000 	mov	r3, #0
  117ea4:	e54b3006 	strb	r3, [fp, #-6]
  lseqi = DNS_TABLE_SIZE;
  117ea8:	e3a03004 	mov	r3, #4
  117eac:	e54b3007 	strb	r3, [fp, #-7]
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
  117eb0:	e3a03000 	mov	r3, #0
  117eb4:	e54b3005 	strb	r3, [fp, #-5]
  117eb8:	ea000020 	b	117f40 <dns_enqueue+0x200>
    entry = &dns_table[i];
  117ebc:	e55b3005 	ldrb	r3, [fp, #-5]
  117ec0:	e3a02e11 	mov	r2, #272	; 0x110
  117ec4:	e0020392 	mul	r2, r2, r3
  117ec8:	e30d3c58 	movw	r3, #56408	; 0xdc58
  117ecc:	e3403014 	movt	r3, #20
  117ed0:	e0823003 	add	r3, r2, r3
  117ed4:	e50b300c 	str	r3, [fp, #-12]
    /* is it an unused entry ? */
    if (entry->state == DNS_STATE_UNUSED) {
  117ed8:	e51b300c 	ldr	r3, [fp, #-12]
  117edc:	e5d3300a 	ldrb	r3, [r3, #10]
  117ee0:	e3530000 	cmp	r3, #0
  117ee4:	0a000019 	beq	117f50 <dns_enqueue+0x210>
      break;
    }
    /* check if this is the oldest completed entry */
    if (entry->state == DNS_STATE_DONE) {
  117ee8:	e51b300c 	ldr	r3, [fp, #-12]
  117eec:	e5d3300a 	ldrb	r3, [r3, #10]
  117ef0:	e3530003 	cmp	r3, #3
  117ef4:	1a00000e 	bne	117f34 <dns_enqueue+0x1f4>
      u8_t age = dns_seqno - entry->seqno;
  117ef8:	e30d3c55 	movw	r3, #56405	; 0xdc55
  117efc:	e3403014 	movt	r3, #20
  117f00:	e5d32000 	ldrb	r2, [r3]
  117f04:	e51b300c 	ldr	r3, [fp, #-12]
  117f08:	e5d3300e 	ldrb	r3, [r3, #14]
  117f0c:	e0423003 	sub	r3, r2, r3
  117f10:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee
      if (age > lseq) {
  117f14:	e55b2012 	ldrb	r2, [fp, #-18]	; 0xffffffee
  117f18:	e55b3006 	ldrb	r3, [fp, #-6]
  117f1c:	e1520003 	cmp	r2, r3
  117f20:	9a000003 	bls	117f34 <dns_enqueue+0x1f4>
        lseq = age;
  117f24:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
  117f28:	e54b3006 	strb	r3, [fp, #-6]
        lseqi = i;
  117f2c:	e55b3005 	ldrb	r3, [fp, #-5]
  117f30:	e54b3007 	strb	r3, [fp, #-7]
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
  117f34:	e55b3005 	ldrb	r3, [fp, #-5]
  117f38:	e2833001 	add	r3, r3, #1
  117f3c:	e54b3005 	strb	r3, [fp, #-5]
  117f40:	e55b3005 	ldrb	r3, [fp, #-5]
  117f44:	e3530003 	cmp	r3, #3
  117f48:	9affffdb 	bls	117ebc <dns_enqueue+0x17c>
  117f4c:	ea000000 	b	117f54 <dns_enqueue+0x214>
      break;
  117f50:	e320f000 	nop	{0}
      }
    }
  }

  /* if we don't have found an unused entry, use the oldest completed one */
  if (i == DNS_TABLE_SIZE) {
  117f54:	e55b3005 	ldrb	r3, [fp, #-5]
  117f58:	e3530004 	cmp	r3, #4
  117f5c:	1a000017 	bne	117fc0 <dns_enqueue+0x280>
    if ((lseqi >= DNS_TABLE_SIZE) || (dns_table[lseqi].state != DNS_STATE_DONE)) {
  117f60:	e55b3007 	ldrb	r3, [fp, #-7]
  117f64:	e3530003 	cmp	r3, #3
  117f68:	8a000009 	bhi	117f94 <dns_enqueue+0x254>
  117f6c:	e55b2007 	ldrb	r2, [fp, #-7]
  117f70:	e30d3c58 	movw	r3, #56408	; 0xdc58
  117f74:	e3403014 	movt	r3, #20
  117f78:	e3a01e11 	mov	r1, #272	; 0x110
  117f7c:	e0020291 	mul	r2, r1, r2
  117f80:	e0833002 	add	r3, r3, r2
  117f84:	e283300a 	add	r3, r3, #10
  117f88:	e5d33000 	ldrb	r3, [r3]
  117f8c:	e3530003 	cmp	r3, #3
  117f90:	0a000001 	beq	117f9c <dns_enqueue+0x25c>
      /* no entry can be used now, table is full */
      LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": DNS entries table is full\n", name));
      return ERR_MEM;
  117f94:	e3e03000 	mvn	r3, #0
  117f98:	ea000068 	b	118140 <dns_enqueue+0x400>
    } else {
      /* use the oldest completed one */
      i = lseqi;
  117f9c:	e55b3007 	ldrb	r3, [fp, #-7]
  117fa0:	e54b3005 	strb	r3, [fp, #-5]
      entry = &dns_table[i];
  117fa4:	e55b3005 	ldrb	r3, [fp, #-5]
  117fa8:	e3a02e11 	mov	r2, #272	; 0x110
  117fac:	e0020392 	mul	r2, r2, r3
  117fb0:	e30d3c58 	movw	r3, #56408	; 0xdc58
  117fb4:	e3403014 	movt	r3, #20
  117fb8:	e0823003 	add	r3, r2, r3
  117fbc:	e50b300c 	str	r3, [fp, #-12]
    }
  }

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  /* find a free request entry */
  req = NULL;
  117fc0:	e3a03000 	mov	r3, #0
  117fc4:	e50b3010 	str	r3, [fp, #-16]
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
  117fc8:	e3a03000 	mov	r3, #0
  117fcc:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  117fd0:	ea000013 	b	118024 <dns_enqueue+0x2e4>
    if (dns_requests[r].found == NULL) {
  117fd4:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  117fd8:	e30e3098 	movw	r3, #57496	; 0xe098
  117fdc:	e3403014 	movt	r3, #20
  117fe0:	e3a0100c 	mov	r1, #12
  117fe4:	e0020291 	mul	r2, r1, r2
  117fe8:	e0833002 	add	r3, r3, r2
  117fec:	e5933000 	ldr	r3, [r3]
  117ff0:	e3530000 	cmp	r3, #0
  117ff4:	1a000007 	bne	118018 <dns_enqueue+0x2d8>
      req = &dns_requests[r];
  117ff8:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  117ffc:	e3a0200c 	mov	r2, #12
  118000:	e0020392 	mul	r2, r2, r3
  118004:	e30e3098 	movw	r3, #57496	; 0xe098
  118008:	e3403014 	movt	r3, #20
  11800c:	e0823003 	add	r3, r2, r3
  118010:	e50b3010 	str	r3, [fp, #-16]
      break;
  118014:	ea000005 	b	118030 <dns_enqueue+0x2f0>
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
  118018:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  11801c:	e2833001 	add	r3, r3, #1
  118020:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  118024:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  118028:	e3530003 	cmp	r3, #3
  11802c:	9affffe8 	bls	117fd4 <dns_enqueue+0x294>
    }
  }
  if (req == NULL) {
  118030:	e51b3010 	ldr	r3, [fp, #-16]
  118034:	e3530000 	cmp	r3, #0
  118038:	1a000001 	bne	118044 <dns_enqueue+0x304>
    /* no request entry can be used now, table is full */
    LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": DNS request entries table is full\n", name));
    return ERR_MEM;
  11803c:	e3e03000 	mvn	r3, #0
  118040:	ea00003e 	b	118140 <dns_enqueue+0x400>
  }
  req->dns_table_idx = i;
  118044:	e51b3010 	ldr	r3, [fp, #-16]
  118048:	e55b2005 	ldrb	r2, [fp, #-5]
  11804c:	e5c32008 	strb	r2, [r3, #8]

  /* use this entry */
  LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": use DNS entry %"U16_F"\n", name, (u16_t)(i)));

  /* fill the entry */
  entry->state = DNS_STATE_NEW;
  118050:	e51b300c 	ldr	r3, [fp, #-12]
  118054:	e3a02001 	mov	r2, #1
  118058:	e5c3200a 	strb	r2, [r3, #10]
  entry->seqno = dns_seqno;
  11805c:	e30d3c55 	movw	r3, #56405	; 0xdc55
  118060:	e3403014 	movt	r3, #20
  118064:	e5d32000 	ldrb	r2, [r3]
  118068:	e51b300c 	ldr	r3, [fp, #-12]
  11806c:	e5c3200e 	strb	r2, [r3, #14]
  LWIP_DNS_SET_ADDRTYPE(entry->reqaddrtype, dns_addrtype);
  LWIP_DNS_SET_ADDRTYPE(req->reqaddrtype, dns_addrtype);
  req->found = found;
  118070:	e51b3010 	ldr	r3, [fp, #-16]
  118074:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  118078:	e5832000 	str	r2, [r3]
  req->arg   = callback_arg;
  11807c:	e51b3010 	ldr	r3, [fp, #-16]
  118080:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  118084:	e5832004 	str	r2, [r3, #4]
  namelen = LWIP_MIN(hostnamelen, DNS_MAX_NAME_LENGTH-1);
  118088:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11808c:	e35300ff 	cmp	r3, #255	; 0xff
  118090:	31a03003 	movcc	r3, r3
  118094:	23a030ff 	movcs	r3, #255	; 0xff
  118098:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  MEMCPY(entry->name, name, namelen);
  11809c:	e51b300c 	ldr	r3, [fp, #-12]
  1180a0:	e2833010 	add	r3, r3, #16
  1180a4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1180a8:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  1180ac:	e1a00003 	mov	r0, r3
  1180b0:	eb00a337 	bl	140d94 <memcpy>
  entry->name[namelen] = 0;
  1180b4:	e51b200c 	ldr	r2, [fp, #-12]
  1180b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1180bc:	e0823003 	add	r3, r2, r3
  1180c0:	e2833010 	add	r3, r3, #16
  1180c4:	e3a02000 	mov	r2, #0
  1180c8:	e5c32000 	strb	r2, [r3]

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  entry->pcb_idx = dns_alloc_pcb();
  1180cc:	ebfffc32 	bl	11719c <dns_alloc_pcb>
  1180d0:	e1a03000 	mov	r3, r0
  1180d4:	e1a02003 	mov	r2, r3
  1180d8:	e51b300c 	ldr	r3, [fp, #-12]
  1180dc:	e5c3200f 	strb	r2, [r3, #15]
  if (entry->pcb_idx >= DNS_MAX_SOURCE_PORTS) {
  1180e0:	e51b300c 	ldr	r3, [fp, #-12]
  1180e4:	e5d3300f 	ldrb	r3, [r3, #15]
  1180e8:	e3530003 	cmp	r3, #3
  1180ec:	9a000007 	bls	118110 <dns_enqueue+0x3d0>
    /* failed to get a UDP pcb */
    LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": failed to allocate a pcb\n", name));
    entry->state = DNS_STATE_UNUSED;
  1180f0:	e51b300c 	ldr	r3, [fp, #-12]
  1180f4:	e3a02000 	mov	r2, #0
  1180f8:	e5c3200a 	strb	r2, [r3, #10]
    req->found = NULL;
  1180fc:	e51b3010 	ldr	r3, [fp, #-16]
  118100:	e3a02000 	mov	r2, #0
  118104:	e5832000 	str	r2, [r3]
    return ERR_MEM;
  118108:	e3e03000 	mvn	r3, #0
  11810c:	ea00000b 	b	118140 <dns_enqueue+0x400>

#if LWIP_DNS_SUPPORT_MDNS_QUERIES
  entry->is_mdns = is_mdns;
#endif

  dns_seqno++;
  118110:	e30d3c55 	movw	r3, #56405	; 0xdc55
  118114:	e3403014 	movt	r3, #20
  118118:	e5d33000 	ldrb	r3, [r3]
  11811c:	e2833001 	add	r3, r3, #1
  118120:	e6ef2073 	uxtb	r2, r3
  118124:	e30d3c55 	movw	r3, #56405	; 0xdc55
  118128:	e3403014 	movt	r3, #20
  11812c:	e5c32000 	strb	r2, [r3]

  /* force to send query without waiting timer */
  dns_check_entry(i);
  118130:	e55b3005 	ldrb	r3, [fp, #-5]
  118134:	e1a00003 	mov	r0, r3
  118138:	ebfffd38 	bl	117620 <dns_check_entry>

  /* dns query is enqueued */
  return ERR_INPROGRESS;
  11813c:	e3e03004 	mvn	r3, #4
}
  118140:	e1a00003 	mov	r0, r3
  118144:	e24bd004 	sub	sp, fp, #4
  118148:	e8bd8800 	pop	{fp, pc}

0011814c <dns_gethostbyname>:
 * @return a err_t return code.
 */
err_t
dns_gethostbyname(const char *hostname, ip_addr_t *addr, dns_found_callback found,
                  void *callback_arg)
{
  11814c:	e92d4800 	push	{fp, lr}
  118150:	e28db004 	add	fp, sp, #4
  118154:	e24dd018 	sub	sp, sp, #24
  118158:	e50b0008 	str	r0, [fp, #-8]
  11815c:	e50b100c 	str	r1, [fp, #-12]
  118160:	e50b2010 	str	r2, [fp, #-16]
  118164:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  return dns_gethostbyname_addrtype(hostname, addr, found, callback_arg, LWIP_DNS_ADDRTYPE_DEFAULT);
  118168:	e3a03000 	mov	r3, #0
  11816c:	e58d3000 	str	r3, [sp]
  118170:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  118174:	e51b2010 	ldr	r2, [fp, #-16]
  118178:	e51b100c 	ldr	r1, [fp, #-12]
  11817c:	e51b0008 	ldr	r0, [fp, #-8]
  118180:	eb000003 	bl	118194 <dns_gethostbyname_addrtype>
  118184:	e1a03000 	mov	r3, r0
}
  118188:	e1a00003 	mov	r0, r3
  11818c:	e24bd004 	sub	sp, fp, #4
  118190:	e8bd8800 	pop	{fp, pc}

00118194 <dns_gethostbyname_addrtype>:
 *                     - LWIP_DNS_ADDRTYPE_IPV6: try to resolve IPv6 only
 */
err_t
dns_gethostbyname_addrtype(const char *hostname, ip_addr_t *addr, dns_found_callback found,
                           void *callback_arg, u8_t dns_addrtype)
{
  118194:	e92d4800 	push	{fp, lr}
  118198:	e28db004 	add	fp, sp, #4
  11819c:	e24dd018 	sub	sp, sp, #24
  1181a0:	e50b0010 	str	r0, [fp, #-16]
  1181a4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1181a8:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  1181ac:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
  u8_t is_mdns;
#endif
  /* not initialized or no valid server yet, or invalid addr pointer
   * or invalid hostname or invalid hostname length */
  if ((addr == NULL) ||
  1181b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1181b4:	e3530000 	cmp	r3, #0
  1181b8:	0a000006 	beq	1181d8 <dns_gethostbyname_addrtype+0x44>
  1181bc:	e51b3010 	ldr	r3, [fp, #-16]
  1181c0:	e3530000 	cmp	r3, #0
  1181c4:	0a000003 	beq	1181d8 <dns_gethostbyname_addrtype+0x44>
      (!hostname) || (!hostname[0])) {
  1181c8:	e51b3010 	ldr	r3, [fp, #-16]
  1181cc:	e5d33000 	ldrb	r3, [r3]
  1181d0:	e3530000 	cmp	r3, #0
  1181d4:	1a000001 	bne	1181e0 <dns_gethostbyname_addrtype+0x4c>
    return ERR_ARG;
  1181d8:	e3e0300f 	mvn	r3, #15
  1181dc:	ea000024 	b	118274 <dns_gethostbyname_addrtype+0xe0>
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) == 0)
  if (dns_pcbs[0] == NULL) {
    return ERR_ARG;
  }
#endif
  hostnamelen = strlen(hostname);
  1181e0:	e51b0010 	ldr	r0, [fp, #-16]
  1181e4:	eb00a4b3 	bl	1414b8 <strlen>
  1181e8:	e50b0008 	str	r0, [fp, #-8]
  if (hostnamelen >= DNS_MAX_NAME_LENGTH) {
  1181ec:	e51b3008 	ldr	r3, [fp, #-8]
  1181f0:	e35300ff 	cmp	r3, #255	; 0xff
  1181f4:	9a000001 	bls	118200 <dns_gethostbyname_addrtype+0x6c>
    LWIP_DEBUGF(DNS_DEBUG, ("dns_gethostbyname: name too long to resolve"));
    return ERR_ARG;
  1181f8:	e3e0300f 	mvn	r3, #15
  1181fc:	ea00001c 	b	118274 <dns_gethostbyname_addrtype+0xe0>
    return ERR_OK;
  }
#endif /* LWIP_HAVE_LOOPIF */

  /* host name already in octet notation? set ip addr and return ERR_OK */
  if (ipaddr_aton(hostname, addr)) {
  118200:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  118204:	e51b0010 	ldr	r0, [fp, #-16]
  118208:	eb006936 	bl	1326e8 <ip4addr_aton>
  11820c:	e1a03000 	mov	r3, r0
  118210:	e3530000 	cmp	r3, #0
  118214:	0a000001 	beq	118220 <dns_gethostbyname_addrtype+0x8c>
#if LWIP_IPV4 && LWIP_IPV6
    if ((IP_IS_V6(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV4)) ||
        (IP_IS_V4(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV6)))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
    {
      return ERR_OK;
  118218:	e3a03000 	mov	r3, #0
  11821c:	ea000014 	b	118274 <dns_gethostbyname_addrtype+0xe0>
    }
  }
  /* already have this address cached? */
  if (dns_lookup(hostname, addr LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)) == ERR_OK) {
  118220:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  118224:	e51b0010 	ldr	r0, [fp, #-16]
  118228:	ebfffa34 	bl	116b00 <dns_lookup>
  11822c:	e1a03000 	mov	r3, r0
  118230:	e3530000 	cmp	r3, #0
  118234:	1a000001 	bne	118240 <dns_gethostbyname_addrtype+0xac>
    return ERR_OK;
  118238:	e3a03000 	mov	r3, #0
  11823c:	ea00000c 	b	118274 <dns_gethostbyname_addrtype+0xe0>

  if (!is_mdns)
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
  {
    /* prevent calling found callback if no server is set, return error instead */
    if (ip_addr_isany_val(dns_servers[0])) {
  118240:	e30e30c8 	movw	r3, #57544	; 0xe0c8
  118244:	e3403014 	movt	r3, #20
  118248:	e5933000 	ldr	r3, [r3]
  11824c:	e3530000 	cmp	r3, #0
  118250:	1a000001 	bne	11825c <dns_gethostbyname_addrtype+0xc8>
      return ERR_VAL;
  118254:	e3e03005 	mvn	r3, #5
  118258:	ea000005 	b	118274 <dns_gethostbyname_addrtype+0xe0>
    }
  }

  /* queue query with specified callback */
  return dns_enqueue(hostname, hostnamelen, found, callback_arg LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)
  11825c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  118260:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  118264:	e51b1008 	ldr	r1, [fp, #-8]
  118268:	e51b0010 	ldr	r0, [fp, #-16]
  11826c:	ebfffeb3 	bl	117d40 <dns_enqueue>
  118270:	e1a03000 	mov	r3, r0
     LWIP_DNS_ISMDNS_ARG(is_mdns));
}
  118274:	e1a00003 	mov	r0, r3
  118278:	e24bd004 	sub	sp, fp, #4
  11827c:	e8bd8800 	pop	{fp, pc}

00118280 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
  118280:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  118284:	e28db000 	add	fp, sp, #0
  118288:	e24dd024 	sub	sp, sp, #36	; 0x24
  11828c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  118290:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  const u8_t *pb = (const u8_t *)dataptr;
  118294:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  118298:	e50b3008 	str	r3, [fp, #-8]
  const u16_t *ps;
  u16_t t = 0;
  11829c:	e3a03000 	mov	r3, #0
  1182a0:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  u32_t sum = 0;
  1182a4:	e3a03000 	mov	r3, #0
  1182a8:	e50b3010 	str	r3, [fp, #-16]
  int odd = ((mem_ptr_t)pb & 1);
  1182ac:	e51b3008 	ldr	r3, [fp, #-8]
  1182b0:	e2033001 	and	r3, r3, #1
  1182b4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  /* Get aligned to u16_t */
  if (odd && len > 0) {
  1182b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1182bc:	e3530000 	cmp	r3, #0
  1182c0:	0a00000c 	beq	1182f8 <lwip_standard_chksum+0x78>
  1182c4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1182c8:	e3530000 	cmp	r3, #0
  1182cc:	da000009 	ble	1182f8 <lwip_standard_chksum+0x78>
    ((u8_t *)&t)[1] = *pb++;
  1182d0:	e51b2008 	ldr	r2, [fp, #-8]
  1182d4:	e2823001 	add	r3, r2, #1
  1182d8:	e50b3008 	str	r3, [fp, #-8]
  1182dc:	e24b3016 	sub	r3, fp, #22
  1182e0:	e2833001 	add	r3, r3, #1
  1182e4:	e5d22000 	ldrb	r2, [r2]
  1182e8:	e5c32000 	strb	r2, [r3]
    len--;
  1182ec:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1182f0:	e2433001 	sub	r3, r3, #1
  1182f4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  1182f8:	e51b3008 	ldr	r3, [fp, #-8]
  1182fc:	e50b300c 	str	r3, [fp, #-12]
  while (len > 1) {
  118300:	ea00000a 	b	118330 <lwip_standard_chksum+0xb0>
    sum += *ps++;
  118304:	e51b300c 	ldr	r3, [fp, #-12]
  118308:	e2832002 	add	r2, r3, #2
  11830c:	e50b200c 	str	r2, [fp, #-12]
  118310:	e1d330b0 	ldrh	r3, [r3]
  118314:	e1a02003 	mov	r2, r3
  118318:	e51b3010 	ldr	r3, [fp, #-16]
  11831c:	e0833002 	add	r3, r3, r2
  118320:	e50b3010 	str	r3, [fp, #-16]
    len -= 2;
  118324:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  118328:	e2433002 	sub	r3, r3, #2
  11832c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  while (len > 1) {
  118330:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  118334:	e3530001 	cmp	r3, #1
  118338:	cafffff1 	bgt	118304 <lwip_standard_chksum+0x84>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
  11833c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  118340:	e3530000 	cmp	r3, #0
  118344:	da000003 	ble	118358 <lwip_standard_chksum+0xd8>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
  118348:	e24b3016 	sub	r3, fp, #22
  11834c:	e51b200c 	ldr	r2, [fp, #-12]
  118350:	e5d22000 	ldrb	r2, [r2]
  118354:	e5c32000 	strb	r2, [r3]
  }

  /* Add end bytes */
  sum += t;
  118358:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  11835c:	e1a02003 	mov	r2, r3
  118360:	e51b3010 	ldr	r3, [fp, #-16]
  118364:	e0833002 	add	r3, r3, r2
  118368:	e50b3010 	str	r3, [fp, #-16]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
  11836c:	e51b3010 	ldr	r3, [fp, #-16]
  118370:	e1a02823 	lsr	r2, r3, #16
  118374:	e51b3010 	ldr	r3, [fp, #-16]
  118378:	e6ff3073 	uxth	r3, r3
  11837c:	e0823003 	add	r3, r2, r3
  118380:	e50b3010 	str	r3, [fp, #-16]
  sum = FOLD_U32T(sum);
  118384:	e51b3010 	ldr	r3, [fp, #-16]
  118388:	e1a02823 	lsr	r2, r3, #16
  11838c:	e51b3010 	ldr	r3, [fp, #-16]
  118390:	e6ff3073 	uxth	r3, r3
  118394:	e0823003 	add	r3, r2, r3
  118398:	e50b3010 	str	r3, [fp, #-16]

  /* Swap if alignment was odd */
  if (odd) {
  11839c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1183a0:	e3530000 	cmp	r3, #0
  1183a4:	0a000007 	beq	1183c8 <lwip_standard_chksum+0x148>
    sum = SWAP_BYTES_IN_WORD(sum);
  1183a8:	e51b3010 	ldr	r3, [fp, #-16]
  1183ac:	e1a03403 	lsl	r3, r3, #8
  1183b0:	e6ff2073 	uxth	r2, r3
  1183b4:	e51b3010 	ldr	r3, [fp, #-16]
  1183b8:	e1a03423 	lsr	r3, r3, #8
  1183bc:	e6ef3073 	uxtb	r3, r3
  1183c0:	e1823003 	orr	r3, r2, r3
  1183c4:	e50b3010 	str	r3, [fp, #-16]
  }

  return (u16_t)sum;
  1183c8:	e51b3010 	ldr	r3, [fp, #-16]
  1183cc:	e6ff3073 	uxth	r3, r3
}
  1183d0:	e1a00003 	mov	r0, r3
  1183d4:	e28bd000 	add	sp, fp, #0
  1183d8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1183dc:	e12fff1e 	bx	lr

001183e0 <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
  1183e0:	e92d4800 	push	{fp, lr}
  1183e4:	e28db004 	add	fp, sp, #4
  1183e8:	e24dd018 	sub	sp, sp, #24
  1183ec:	e50b0010 	str	r0, [fp, #-16]
  1183f0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  1183f4:	e1a03001 	mov	r3, r1
  1183f8:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  1183fc:	e1a03002 	mov	r3, r2
  118400:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  struct pbuf *q;
  u8_t swapped = 0;
  118404:	e3a03000 	mov	r3, #0
  118408:	e54b3009 	strb	r3, [fp, #-9]

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
  11840c:	e51b3010 	ldr	r3, [fp, #-16]
  118410:	e50b3008 	str	r3, [fp, #-8]
  118414:	ea000025 	b	1184b0 <inet_cksum_pseudo_base+0xd0>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
      (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
  118418:	e51b3008 	ldr	r3, [fp, #-8]
  11841c:	e5932004 	ldr	r2, [r3, #4]
  118420:	e51b3008 	ldr	r3, [fp, #-8]
  118424:	e1d330ba 	ldrh	r3, [r3, #10]
  118428:	e1a01003 	mov	r1, r3
  11842c:	e1a00002 	mov	r0, r2
  118430:	ebffff92 	bl	118280 <lwip_standard_chksum>
  118434:	e1a03000 	mov	r3, r0
  118438:	e1a02003 	mov	r2, r3
  11843c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118440:	e0833002 	add	r3, r3, r2
  118444:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
  118448:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11844c:	e1a02823 	lsr	r2, r3, #16
  118450:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118454:	e6ff3073 	uxth	r3, r3
  118458:	e0823003 	add	r3, r2, r3
  11845c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    if (q->len % 2 != 0) {
  118460:	e51b3008 	ldr	r3, [fp, #-8]
  118464:	e1d330ba 	ldrh	r3, [r3, #10]
  118468:	e2033001 	and	r3, r3, #1
  11846c:	e6ff3073 	uxth	r3, r3
  118470:	e3530000 	cmp	r3, #0
  118474:	0a00000a 	beq	1184a4 <inet_cksum_pseudo_base+0xc4>
      swapped = 1 - swapped;
  118478:	e55b3009 	ldrb	r3, [fp, #-9]
  11847c:	e2633001 	rsb	r3, r3, #1
  118480:	e54b3009 	strb	r3, [fp, #-9]
      acc = SWAP_BYTES_IN_WORD(acc);
  118484:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118488:	e1a03403 	lsl	r3, r3, #8
  11848c:	e6ff2073 	uxth	r2, r3
  118490:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118494:	e1a03423 	lsr	r3, r3, #8
  118498:	e6ef3073 	uxtb	r3, r3
  11849c:	e1823003 	orr	r3, r2, r3
  1184a0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  for (q = p; q != NULL; q = q->next) {
  1184a4:	e51b3008 	ldr	r3, [fp, #-8]
  1184a8:	e5933000 	ldr	r3, [r3]
  1184ac:	e50b3008 	str	r3, [fp, #-8]
  1184b0:	e51b3008 	ldr	r3, [fp, #-8]
  1184b4:	e3530000 	cmp	r3, #0
  1184b8:	1affffd6 	bne	118418 <inet_cksum_pseudo_base+0x38>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
  1184bc:	e55b3009 	ldrb	r3, [fp, #-9]
  1184c0:	e3530000 	cmp	r3, #0
  1184c4:	0a000007 	beq	1184e8 <inet_cksum_pseudo_base+0x108>
    acc = SWAP_BYTES_IN_WORD(acc);
  1184c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1184cc:	e1a03403 	lsl	r3, r3, #8
  1184d0:	e6ff2073 	uxth	r2, r3
  1184d4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1184d8:	e1a03423 	lsr	r3, r3, #8
  1184dc:	e6ef3073 	uxtb	r3, r3
  1184e0:	e1823003 	orr	r3, r2, r3
  1184e4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
  1184e8:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  1184ec:	e6ff3073 	uxth	r3, r3
  1184f0:	e1a00003 	mov	r0, r3
  1184f4:	ebfff836 	bl	1165d4 <lwip_htons>
  1184f8:	e1a03000 	mov	r3, r0
  1184fc:	e1a02003 	mov	r2, r3
  118500:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118504:	e0833002 	add	r3, r3, r2
  118508:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  acc += (u32_t)lwip_htons(proto_len);
  11850c:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  118510:	e1a00003 	mov	r0, r3
  118514:	ebfff82e 	bl	1165d4 <lwip_htons>
  118518:	e1a03000 	mov	r3, r0
  11851c:	e1a02003 	mov	r2, r3
  118520:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118524:	e0833002 	add	r3, r3, r2
  118528:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
  11852c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118530:	e1a02823 	lsr	r2, r3, #16
  118534:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118538:	e6ff3073 	uxth	r3, r3
  11853c:	e0823003 	add	r3, r2, r3
  118540:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  acc = FOLD_U32T(acc);
  118544:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118548:	e1a02823 	lsr	r2, r3, #16
  11854c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118550:	e6ff3073 	uxth	r3, r3
  118554:	e0823003 	add	r3, r2, r3
  118558:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
  11855c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118560:	e6ff3073 	uxth	r3, r3
  118564:	e1e03003 	mvn	r3, r3
  118568:	e6ff3073 	uxth	r3, r3
}
  11856c:	e1a00003 	mov	r0, r3
  118570:	e24bd004 	sub	sp, fp, #4
  118574:	e8bd8800 	pop	{fp, pc}

00118578 <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
       const ip4_addr_t *src, const ip4_addr_t *dest)
{
  118578:	e92d4800 	push	{fp, lr}
  11857c:	e28db004 	add	fp, sp, #4
  118580:	e24dd018 	sub	sp, sp, #24
  118584:	e50b0010 	str	r0, [fp, #-16]
  118588:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  11858c:	e1a03001 	mov	r3, r1
  118590:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  118594:	e1a03002 	mov	r3, r2
  118598:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
  11859c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1185a0:	e5933000 	ldr	r3, [r3]
  1185a4:	e50b3008 	str	r3, [fp, #-8]
  acc = (addr & 0xffffUL);
  1185a8:	e51b3008 	ldr	r3, [fp, #-8]
  1185ac:	e6ff3073 	uxth	r3, r3
  1185b0:	e50b300c 	str	r3, [fp, #-12]
  acc += ((addr >> 16) & 0xffffUL);
  1185b4:	e51b3008 	ldr	r3, [fp, #-8]
  1185b8:	e1a03823 	lsr	r3, r3, #16
  1185bc:	e51b200c 	ldr	r2, [fp, #-12]
  1185c0:	e0823003 	add	r3, r2, r3
  1185c4:	e50b300c 	str	r3, [fp, #-12]
  addr = ip4_addr_get_u32(dest);
  1185c8:	e59b3004 	ldr	r3, [fp, #4]
  1185cc:	e5933000 	ldr	r3, [r3]
  1185d0:	e50b3008 	str	r3, [fp, #-8]
  acc += (addr & 0xffffUL);
  1185d4:	e51b3008 	ldr	r3, [fp, #-8]
  1185d8:	e6ff3073 	uxth	r3, r3
  1185dc:	e51b200c 	ldr	r2, [fp, #-12]
  1185e0:	e0823003 	add	r3, r2, r3
  1185e4:	e50b300c 	str	r3, [fp, #-12]
  acc += ((addr >> 16) & 0xffffUL);
  1185e8:	e51b3008 	ldr	r3, [fp, #-8]
  1185ec:	e1a03823 	lsr	r3, r3, #16
  1185f0:	e51b200c 	ldr	r2, [fp, #-12]
  1185f4:	e0823003 	add	r3, r2, r3
  1185f8:	e50b300c 	str	r3, [fp, #-12]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
  1185fc:	e51b300c 	ldr	r3, [fp, #-12]
  118600:	e1a02823 	lsr	r2, r3, #16
  118604:	e51b300c 	ldr	r3, [fp, #-12]
  118608:	e6ff3073 	uxth	r3, r3
  11860c:	e0823003 	add	r3, r2, r3
  118610:	e50b300c 	str	r3, [fp, #-12]
  acc = FOLD_U32T(acc);
  118614:	e51b300c 	ldr	r3, [fp, #-12]
  118618:	e1a02823 	lsr	r2, r3, #16
  11861c:	e51b300c 	ldr	r3, [fp, #-12]
  118620:	e6ff3073 	uxth	r3, r3
  118624:	e0823003 	add	r3, r2, r3
  118628:	e50b300c 	str	r3, [fp, #-12]

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
  11862c:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
  118630:	e55b1011 	ldrb	r1, [fp, #-17]	; 0xffffffef
  118634:	e51b300c 	ldr	r3, [fp, #-12]
  118638:	e51b0010 	ldr	r0, [fp, #-16]
  11863c:	ebffff67 	bl	1183e0 <inet_cksum_pseudo_base>
  118640:	e1a03000 	mov	r3, r0
}
  118644:	e1a00003 	mov	r0, r3
  118648:	e24bd004 	sub	sp, fp, #4
  11864c:	e8bd8800 	pop	{fp, pc}

00118650 <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
       const ip_addr_t *src, const ip_addr_t *dest)
{
  118650:	e92d4800 	push	{fp, lr}
  118654:	e28db004 	add	fp, sp, #4
  118658:	e24dd018 	sub	sp, sp, #24
  11865c:	e50b0008 	str	r0, [fp, #-8]
  118660:	e50b3010 	str	r3, [fp, #-16]
  118664:	e1a03001 	mov	r3, r1
  118668:	e54b3009 	strb	r3, [fp, #-9]
  11866c:	e1a03002 	mov	r3, r2
  118670:	e14b30bc 	strh	r3, [fp, #-12]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
  118674:	e15b20bc 	ldrh	r2, [fp, #-12]
  118678:	e55b1009 	ldrb	r1, [fp, #-9]
  11867c:	e59b3004 	ldr	r3, [fp, #4]
  118680:	e58d3000 	str	r3, [sp]
  118684:	e51b3010 	ldr	r3, [fp, #-16]
  118688:	e51b0008 	ldr	r0, [fp, #-8]
  11868c:	ebffffb9 	bl	118578 <inet_chksum_pseudo>
  118690:	e1a03000 	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
  118694:	e1a00003 	mov	r0, r3
  118698:	e24bd004 	sub	sp, fp, #4
  11869c:	e8bd8800 	pop	{fp, pc}

001186a0 <inet_cksum_pseudo_partial_base>:

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_partial_base(struct pbuf *p, u8_t proto, u16_t proto_len,
       u16_t chksum_len, u32_t acc)
{
  1186a0:	e92d4800 	push	{fp, lr}
  1186a4:	e28db004 	add	fp, sp, #4
  1186a8:	e24dd018 	sub	sp, sp, #24
  1186ac:	e50b0010 	str	r0, [fp, #-16]
  1186b0:	e1a00001 	mov	r0, r1
  1186b4:	e1a01002 	mov	r1, r2
  1186b8:	e1a02003 	mov	r2, r3
  1186bc:	e1a03000 	mov	r3, r0
  1186c0:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  1186c4:	e1a03001 	mov	r3, r1
  1186c8:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  1186cc:	e1a03002 	mov	r3, r2
  1186d0:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  struct pbuf *q;
  u8_t swapped = 0;
  1186d4:	e3a03000 	mov	r3, #0
  1186d8:	e54b3009 	strb	r3, [fp, #-9]
  u16_t chklen;

  /* iterate through all pbuf in chain */
  for (q = p; (q != NULL) && (chksum_len > 0); q = q->next) {
  1186dc:	e51b3010 	ldr	r3, [fp, #-16]
  1186e0:	e50b3008 	str	r3, [fp, #-8]
  1186e4:	ea00003c 	b	1187dc <inet_cksum_pseudo_partial_base+0x13c>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
      (void *)q, (void *)q->next));
    chklen = q->len;
  1186e8:	e51b3008 	ldr	r3, [fp, #-8]
  1186ec:	e1d330ba 	ldrh	r3, [r3, #10]
  1186f0:	e14b30bc 	strh	r3, [fp, #-12]
    if (chklen > chksum_len) {
  1186f4:	e15b20bc 	ldrh	r2, [fp, #-12]
  1186f8:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  1186fc:	e1520003 	cmp	r2, r3
  118700:	9a000001 	bls	11870c <inet_cksum_pseudo_partial_base+0x6c>
      chklen = chksum_len;
  118704:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  118708:	e14b30bc 	strh	r3, [fp, #-12]
    }
    acc += LWIP_CHKSUM(q->payload, chklen);
  11870c:	e51b3008 	ldr	r3, [fp, #-8]
  118710:	e5933004 	ldr	r3, [r3, #4]
  118714:	e15b20bc 	ldrh	r2, [fp, #-12]
  118718:	e1a01002 	mov	r1, r2
  11871c:	e1a00003 	mov	r0, r3
  118720:	ebfffed6 	bl	118280 <lwip_standard_chksum>
  118724:	e1a03000 	mov	r3, r0
  118728:	e1a02003 	mov	r2, r3
  11872c:	e59b3004 	ldr	r3, [fp, #4]
  118730:	e0833002 	add	r3, r3, r2
  118734:	e58b3004 	str	r3, [fp, #4]
    chksum_len -= chklen;
  118738:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  11873c:	e15b30bc 	ldrh	r3, [fp, #-12]
  118740:	e0423003 	sub	r3, r2, r3
  118744:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
    LWIP_ASSERT("delete me", chksum_len < 0x7fff);
  118748:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  11874c:	e3072ffe 	movw	r2, #32766	; 0x7ffe
  118750:	e1530002 	cmp	r3, r2
  118754:	9a000006 	bls	118774 <inet_cksum_pseudo_partial_base+0xd4>
  118758:	e30700f8 	movw	r0, #28920	; 0x70f8
  11875c:	e3400014 	movt	r0, #20
  118760:	ebffaa6b 	bl	103114 <rt_kprintf>
  118764:	e3a01e1a 	mov	r1, #416	; 0x1a0
  118768:	e3070104 	movw	r0, #28932	; 0x7104
  11876c:	e3400014 	movt	r0, #20
  118770:	ebffca5e 	bl	10b0f0 <sys_arch_assert>
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* fold the upper bit down */
    acc = FOLD_U32T(acc);
  118774:	e59b3004 	ldr	r3, [fp, #4]
  118778:	e1a02823 	lsr	r2, r3, #16
  11877c:	e59b3004 	ldr	r3, [fp, #4]
  118780:	e6ff3073 	uxth	r3, r3
  118784:	e0823003 	add	r3, r2, r3
  118788:	e58b3004 	str	r3, [fp, #4]
    if (q->len % 2 != 0) {
  11878c:	e51b3008 	ldr	r3, [fp, #-8]
  118790:	e1d330ba 	ldrh	r3, [r3, #10]
  118794:	e2033001 	and	r3, r3, #1
  118798:	e6ff3073 	uxth	r3, r3
  11879c:	e3530000 	cmp	r3, #0
  1187a0:	0a00000a 	beq	1187d0 <inet_cksum_pseudo_partial_base+0x130>
      swapped = 1 - swapped;
  1187a4:	e55b3009 	ldrb	r3, [fp, #-9]
  1187a8:	e2633001 	rsb	r3, r3, #1
  1187ac:	e54b3009 	strb	r3, [fp, #-9]
      acc = SWAP_BYTES_IN_WORD(acc);
  1187b0:	e59b3004 	ldr	r3, [fp, #4]
  1187b4:	e1a03403 	lsl	r3, r3, #8
  1187b8:	e6ff2073 	uxth	r2, r3
  1187bc:	e59b3004 	ldr	r3, [fp, #4]
  1187c0:	e1a03423 	lsr	r3, r3, #8
  1187c4:	e6ef3073 	uxtb	r3, r3
  1187c8:	e1823003 	orr	r3, r2, r3
  1187cc:	e58b3004 	str	r3, [fp, #4]
  for (q = p; (q != NULL) && (chksum_len > 0); q = q->next) {
  1187d0:	e51b3008 	ldr	r3, [fp, #-8]
  1187d4:	e5933000 	ldr	r3, [r3]
  1187d8:	e50b3008 	str	r3, [fp, #-8]
  1187dc:	e51b3008 	ldr	r3, [fp, #-8]
  1187e0:	e3530000 	cmp	r3, #0
  1187e4:	0a000002 	beq	1187f4 <inet_cksum_pseudo_partial_base+0x154>
  1187e8:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  1187ec:	e3530000 	cmp	r3, #0
  1187f0:	1affffbc 	bne	1186e8 <inet_cksum_pseudo_partial_base+0x48>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
  1187f4:	e55b3009 	ldrb	r3, [fp, #-9]
  1187f8:	e3530000 	cmp	r3, #0
  1187fc:	0a000007 	beq	118820 <inet_cksum_pseudo_partial_base+0x180>
    acc = SWAP_BYTES_IN_WORD(acc);
  118800:	e59b3004 	ldr	r3, [fp, #4]
  118804:	e1a03403 	lsl	r3, r3, #8
  118808:	e6ff2073 	uxth	r2, r3
  11880c:	e59b3004 	ldr	r3, [fp, #4]
  118810:	e1a03423 	lsr	r3, r3, #8
  118814:	e6ef3073 	uxtb	r3, r3
  118818:	e1823003 	orr	r3, r2, r3
  11881c:	e58b3004 	str	r3, [fp, #4]
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
  118820:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  118824:	e6ff3073 	uxth	r3, r3
  118828:	e1a00003 	mov	r0, r3
  11882c:	ebfff768 	bl	1165d4 <lwip_htons>
  118830:	e1a03000 	mov	r3, r0
  118834:	e1a02003 	mov	r2, r3
  118838:	e59b3004 	ldr	r3, [fp, #4]
  11883c:	e0833002 	add	r3, r3, r2
  118840:	e58b3004 	str	r3, [fp, #4]
  acc += (u32_t)lwip_htons(proto_len);
  118844:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  118848:	e1a00003 	mov	r0, r3
  11884c:	ebfff760 	bl	1165d4 <lwip_htons>
  118850:	e1a03000 	mov	r3, r0
  118854:	e1a02003 	mov	r2, r3
  118858:	e59b3004 	ldr	r3, [fp, #4]
  11885c:	e0833002 	add	r3, r3, r2
  118860:	e58b3004 	str	r3, [fp, #4]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
  118864:	e59b3004 	ldr	r3, [fp, #4]
  118868:	e1a02823 	lsr	r2, r3, #16
  11886c:	e59b3004 	ldr	r3, [fp, #4]
  118870:	e6ff3073 	uxth	r3, r3
  118874:	e0823003 	add	r3, r2, r3
  118878:	e58b3004 	str	r3, [fp, #4]
  acc = FOLD_U32T(acc);
  11887c:	e59b3004 	ldr	r3, [fp, #4]
  118880:	e1a02823 	lsr	r2, r3, #16
  118884:	e59b3004 	ldr	r3, [fp, #4]
  118888:	e6ff3073 	uxth	r3, r3
  11888c:	e0823003 	add	r3, r2, r3
  118890:	e58b3004 	str	r3, [fp, #4]
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
  118894:	e59b3004 	ldr	r3, [fp, #4]
  118898:	e6ff3073 	uxth	r3, r3
  11889c:	e1e03003 	mvn	r3, r3
  1188a0:	e6ff3073 	uxth	r3, r3
}
  1188a4:	e1a00003 	mov	r0, r3
  1188a8:	e24bd004 	sub	sp, fp, #4
  1188ac:	e8bd8800 	pop	{fp, pc}

001188b0 <inet_chksum_pseudo_partial>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo_partial(struct pbuf *p, u8_t proto, u16_t proto_len,
       u16_t chksum_len, const ip4_addr_t *src, const ip4_addr_t *dest)
{
  1188b0:	e92d4800 	push	{fp, lr}
  1188b4:	e28db004 	add	fp, sp, #4
  1188b8:	e24dd020 	sub	sp, sp, #32
  1188bc:	e50b0010 	str	r0, [fp, #-16]
  1188c0:	e1a00001 	mov	r0, r1
  1188c4:	e1a01002 	mov	r1, r2
  1188c8:	e1a02003 	mov	r2, r3
  1188cc:	e1a03000 	mov	r3, r0
  1188d0:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  1188d4:	e1a03001 	mov	r3, r1
  1188d8:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  1188dc:	e1a03002 	mov	r3, r2
  1188e0:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
  1188e4:	e59b3004 	ldr	r3, [fp, #4]
  1188e8:	e5933000 	ldr	r3, [r3]
  1188ec:	e50b3008 	str	r3, [fp, #-8]
  acc = (addr & 0xffffUL);
  1188f0:	e51b3008 	ldr	r3, [fp, #-8]
  1188f4:	e6ff3073 	uxth	r3, r3
  1188f8:	e50b300c 	str	r3, [fp, #-12]
  acc += ((addr >> 16) & 0xffffUL);
  1188fc:	e51b3008 	ldr	r3, [fp, #-8]
  118900:	e1a03823 	lsr	r3, r3, #16
  118904:	e51b200c 	ldr	r2, [fp, #-12]
  118908:	e0823003 	add	r3, r2, r3
  11890c:	e50b300c 	str	r3, [fp, #-12]
  addr = ip4_addr_get_u32(dest);
  118910:	e59b3008 	ldr	r3, [fp, #8]
  118914:	e5933000 	ldr	r3, [r3]
  118918:	e50b3008 	str	r3, [fp, #-8]
  acc += (addr & 0xffffUL);
  11891c:	e51b3008 	ldr	r3, [fp, #-8]
  118920:	e6ff3073 	uxth	r3, r3
  118924:	e51b200c 	ldr	r2, [fp, #-12]
  118928:	e0823003 	add	r3, r2, r3
  11892c:	e50b300c 	str	r3, [fp, #-12]
  acc += ((addr >> 16) & 0xffffUL);
  118930:	e51b3008 	ldr	r3, [fp, #-8]
  118934:	e1a03823 	lsr	r3, r3, #16
  118938:	e51b200c 	ldr	r2, [fp, #-12]
  11893c:	e0823003 	add	r3, r2, r3
  118940:	e50b300c 	str	r3, [fp, #-12]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
  118944:	e51b300c 	ldr	r3, [fp, #-12]
  118948:	e1a02823 	lsr	r2, r3, #16
  11894c:	e51b300c 	ldr	r3, [fp, #-12]
  118950:	e6ff3073 	uxth	r3, r3
  118954:	e0823003 	add	r3, r2, r3
  118958:	e50b300c 	str	r3, [fp, #-12]
  acc = FOLD_U32T(acc);
  11895c:	e51b300c 	ldr	r3, [fp, #-12]
  118960:	e1a02823 	lsr	r2, r3, #16
  118964:	e51b300c 	ldr	r3, [fp, #-12]
  118968:	e6ff3073 	uxth	r3, r3
  11896c:	e0823003 	add	r3, r2, r3
  118970:	e50b300c 	str	r3, [fp, #-12]

  return inet_cksum_pseudo_partial_base(p, proto, proto_len, chksum_len, acc);
  118974:	e15b01b6 	ldrh	r0, [fp, #-22]	; 0xffffffea
  118978:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
  11897c:	e55b1011 	ldrb	r1, [fp, #-17]	; 0xffffffef
  118980:	e51b300c 	ldr	r3, [fp, #-12]
  118984:	e58d3000 	str	r3, [sp]
  118988:	e1a03000 	mov	r3, r0
  11898c:	e51b0010 	ldr	r0, [fp, #-16]
  118990:	ebffff42 	bl	1186a0 <inet_cksum_pseudo_partial_base>
  118994:	e1a03000 	mov	r3, r0
}
  118998:	e1a00003 	mov	r0, r3
  11899c:	e24bd004 	sub	sp, fp, #4
  1189a0:	e8bd8800 	pop	{fp, pc}

001189a4 <ip_chksum_pseudo_partial>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo_partial(struct pbuf *p, u8_t proto, u16_t proto_len,
       u16_t chksum_len, const ip_addr_t *src, const ip_addr_t *dest)
{
  1189a4:	e92d4800 	push	{fp, lr}
  1189a8:	e28db004 	add	fp, sp, #4
  1189ac:	e24dd018 	sub	sp, sp, #24
  1189b0:	e50b0008 	str	r0, [fp, #-8]
  1189b4:	e1a00001 	mov	r0, r1
  1189b8:	e1a01002 	mov	r1, r2
  1189bc:	e1a02003 	mov	r2, r3
  1189c0:	e1a03000 	mov	r3, r0
  1189c4:	e54b3009 	strb	r3, [fp, #-9]
  1189c8:	e1a03001 	mov	r3, r1
  1189cc:	e14b30bc 	strh	r3, [fp, #-12]
  1189d0:	e1a03002 	mov	r3, r2
  1189d4:	e14b30be 	strh	r3, [fp, #-14]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo_partial(p, proto, proto_len, chksum_len, ip_2_ip4(src), ip_2_ip4(dest));
  1189d8:	e15b00be 	ldrh	r0, [fp, #-14]
  1189dc:	e15b20bc 	ldrh	r2, [fp, #-12]
  1189e0:	e55b1009 	ldrb	r1, [fp, #-9]
  1189e4:	e59b3008 	ldr	r3, [fp, #8]
  1189e8:	e58d3004 	str	r3, [sp, #4]
  1189ec:	e59b3004 	ldr	r3, [fp, #4]
  1189f0:	e58d3000 	str	r3, [sp]
  1189f4:	e1a03000 	mov	r3, r0
  1189f8:	e51b0008 	ldr	r0, [fp, #-8]
  1189fc:	ebffffab 	bl	1188b0 <inet_chksum_pseudo_partial>
  118a00:	e1a03000 	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
  118a04:	e1a00003 	mov	r0, r3
  118a08:	e24bd004 	sub	sp, fp, #4
  118a0c:	e8bd8800 	pop	{fp, pc}

00118a10 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
  118a10:	e92d4800 	push	{fp, lr}
  118a14:	e28db004 	add	fp, sp, #4
  118a18:	e24dd008 	sub	sp, sp, #8
  118a1c:	e50b0008 	str	r0, [fp, #-8]
  118a20:	e1a03001 	mov	r3, r1
  118a24:	e14b30ba 	strh	r3, [fp, #-10]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
  118a28:	e15b30ba 	ldrh	r3, [fp, #-10]
  118a2c:	e1a01003 	mov	r1, r3
  118a30:	e51b0008 	ldr	r0, [fp, #-8]
  118a34:	ebfffe11 	bl	118280 <lwip_standard_chksum>
  118a38:	e1a03000 	mov	r3, r0
  118a3c:	e1e03003 	mvn	r3, r3
  118a40:	e6ff3073 	uxth	r3, r3
}
  118a44:	e1a00003 	mov	r0, r3
  118a48:	e24bd004 	sub	sp, fp, #4
  118a4c:	e8bd8800 	pop	{fp, pc}

00118a50 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
  118a50:	e92d4800 	push	{fp, lr}
  118a54:	e28db004 	add	fp, sp, #4
  118a58:	e24dd018 	sub	sp, sp, #24
  118a5c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  u32_t acc;
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
  118a60:	e3a03000 	mov	r3, #0
  118a64:	e50b3008 	str	r3, [fp, #-8]
  swapped = 0;
  118a68:	e3a03000 	mov	r3, #0
  118a6c:	e54b300d 	strb	r3, [fp, #-13]
  for (q = p; q != NULL; q = q->next) {
  118a70:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118a74:	e50b300c 	str	r3, [fp, #-12]
  118a78:	ea000025 	b	118b14 <inet_chksum_pbuf+0xc4>
    acc += LWIP_CHKSUM(q->payload, q->len);
  118a7c:	e51b300c 	ldr	r3, [fp, #-12]
  118a80:	e5932004 	ldr	r2, [r3, #4]
  118a84:	e51b300c 	ldr	r3, [fp, #-12]
  118a88:	e1d330ba 	ldrh	r3, [r3, #10]
  118a8c:	e1a01003 	mov	r1, r3
  118a90:	e1a00002 	mov	r0, r2
  118a94:	ebfffdf9 	bl	118280 <lwip_standard_chksum>
  118a98:	e1a03000 	mov	r3, r0
  118a9c:	e1a02003 	mov	r2, r3
  118aa0:	e51b3008 	ldr	r3, [fp, #-8]
  118aa4:	e0833002 	add	r3, r3, r2
  118aa8:	e50b3008 	str	r3, [fp, #-8]
    acc = FOLD_U32T(acc);
  118aac:	e51b3008 	ldr	r3, [fp, #-8]
  118ab0:	e1a02823 	lsr	r2, r3, #16
  118ab4:	e51b3008 	ldr	r3, [fp, #-8]
  118ab8:	e6ff3073 	uxth	r3, r3
  118abc:	e0823003 	add	r3, r2, r3
  118ac0:	e50b3008 	str	r3, [fp, #-8]
    if (q->len % 2 != 0) {
  118ac4:	e51b300c 	ldr	r3, [fp, #-12]
  118ac8:	e1d330ba 	ldrh	r3, [r3, #10]
  118acc:	e2033001 	and	r3, r3, #1
  118ad0:	e6ff3073 	uxth	r3, r3
  118ad4:	e3530000 	cmp	r3, #0
  118ad8:	0a00000a 	beq	118b08 <inet_chksum_pbuf+0xb8>
      swapped = 1 - swapped;
  118adc:	e55b300d 	ldrb	r3, [fp, #-13]
  118ae0:	e2633001 	rsb	r3, r3, #1
  118ae4:	e54b300d 	strb	r3, [fp, #-13]
      acc = SWAP_BYTES_IN_WORD(acc);
  118ae8:	e51b3008 	ldr	r3, [fp, #-8]
  118aec:	e1a03403 	lsl	r3, r3, #8
  118af0:	e6ff2073 	uxth	r2, r3
  118af4:	e51b3008 	ldr	r3, [fp, #-8]
  118af8:	e1a03423 	lsr	r3, r3, #8
  118afc:	e6ef3073 	uxtb	r3, r3
  118b00:	e1823003 	orr	r3, r2, r3
  118b04:	e50b3008 	str	r3, [fp, #-8]
  for (q = p; q != NULL; q = q->next) {
  118b08:	e51b300c 	ldr	r3, [fp, #-12]
  118b0c:	e5933000 	ldr	r3, [r3]
  118b10:	e50b300c 	str	r3, [fp, #-12]
  118b14:	e51b300c 	ldr	r3, [fp, #-12]
  118b18:	e3530000 	cmp	r3, #0
  118b1c:	1affffd6 	bne	118a7c <inet_chksum_pbuf+0x2c>
    }
  }

  if (swapped) {
  118b20:	e55b300d 	ldrb	r3, [fp, #-13]
  118b24:	e3530000 	cmp	r3, #0
  118b28:	0a000007 	beq	118b4c <inet_chksum_pbuf+0xfc>
    acc = SWAP_BYTES_IN_WORD(acc);
  118b2c:	e51b3008 	ldr	r3, [fp, #-8]
  118b30:	e1a03403 	lsl	r3, r3, #8
  118b34:	e6ff2073 	uxth	r2, r3
  118b38:	e51b3008 	ldr	r3, [fp, #-8]
  118b3c:	e1a03423 	lsr	r3, r3, #8
  118b40:	e6ef3073 	uxtb	r3, r3
  118b44:	e1823003 	orr	r3, r2, r3
  118b48:	e50b3008 	str	r3, [fp, #-8]
  }
  return (u16_t)~(acc & 0xffffUL);
  118b4c:	e51b3008 	ldr	r3, [fp, #-8]
  118b50:	e6ff3073 	uxth	r3, r3
  118b54:	e1e03003 	mvn	r3, r3
  118b58:	e6ff3073 	uxth	r3, r3
}
  118b5c:	e1a00003 	mov	r0, r3
  118b60:	e24bd004 	sub	sp, fp, #4
  118b64:	e8bd8800 	pop	{fp, pc}

00118b68 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
  118b68:	e92d4800 	push	{fp, lr}
  118b6c:	e28db004 	add	fp, sp, #4
  118b70:	e24dd008 	sub	sp, sp, #8
#ifndef LWIP_SKIP_PACKING_CHECK
  LWIP_ASSERT("Struct packing not implemented correctly. Check your lwIP port.", sizeof(struct packed_struct_test) == PACKED_STRUCT_TEST_EXPECTED_SIZE);
#endif

  /* Modules initialization */
  stats_init();
  118b74:	eb000f7b 	bl	11c968 <stats_init>
#if !NO_SYS
  sys_init();
  118b78:	ebffc724 	bl	10a810 <sys_init>
#endif /* !NO_SYS */
  mem_init();
  118b7c:	ebffc97a 	bl	10b16c <mem_init>
  memp_init();
  118b80:	eb0000c6 	bl	118ea0 <memp_init>
  pbuf_init();
  netif_init();
  118b84:	eb0001d9 	bl	1192f0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
  118b88:	eb003b81 	bl	127994 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
  118b8c:	eb001109 	bl	11cfb8 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
  118b90:	eb005cde 	bl	12ff10 <igmp_init>
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
  118b94:	ebfff78e 	bl	1169d4 <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
  118b98:	eb0039d8 	bl	127300 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
  118b9c:	e320f000 	nop	{0}
  118ba0:	e24bd004 	sub	sp, fp, #4
  118ba4:	e8bd8800 	pop	{fp, pc}

00118ba8 <memp_overflow_check_element_overflow>:
 * @param p the memp element to check
 * @param desc the pool p comes from
 */
static void
memp_overflow_check_element_overflow(struct memp *p, const struct memp_desc *desc)
{
  118ba8:	e92d4800 	push	{fp, lr}
  118bac:	e28db004 	add	fp, sp, #4
  118bb0:	e24dd090 	sub	sp, sp, #144	; 0x90
  118bb4:	e50b0090 	str	r0, [fp, #-144]	; 0xffffff70
  118bb8:	e50b1094 	str	r1, [fp, #-148]	; 0xffffff6c
#if MEMP_SANITY_REGION_AFTER_ALIGNED > 0
  u16_t k;
  u8_t *m;
  m = (u8_t*)p + MEMP_SIZE + desc->size;
  118bbc:	e51b3094 	ldr	r3, [fp, #-148]	; 0xffffff6c
  118bc0:	e1d330b8 	ldrh	r3, [r3, #8]
  118bc4:	e283301c 	add	r3, r3, #28
  118bc8:	e51b2090 	ldr	r2, [fp, #-144]	; 0xffffff70
  118bcc:	e0823003 	add	r3, r2, r3
  118bd0:	e50b300c 	str	r3, [fp, #-12]
  for (k = 0; k < MEMP_SANITY_REGION_AFTER_ALIGNED; k++) {
  118bd4:	e3a03000 	mov	r3, #0
  118bd8:	e14b30b6 	strh	r3, [fp, #-6]
  118bdc:	ea000022 	b	118c6c <memp_overflow_check_element_overflow+0xc4>
    if (m[k] != 0xcd) {
  118be0:	e15b30b6 	ldrh	r3, [fp, #-6]
  118be4:	e51b200c 	ldr	r2, [fp, #-12]
  118be8:	e0823003 	add	r3, r2, r3
  118bec:	e5d33000 	ldrb	r3, [r3]
  118bf0:	e35300cd 	cmp	r3, #205	; 0xcd
  118bf4:	0a000019 	beq	118c60 <memp_overflow_check_element_overflow+0xb8>
      char errstr[128] = "detected memp overflow in pool ";
  118bf8:	e30733bc 	movw	r3, #29628	; 0x73bc
  118bfc:	e3403014 	movt	r3, #20
  118c00:	e24bc08c 	sub	ip, fp, #140	; 0x8c
  118c04:	e1a0e003 	mov	lr, r3
  118c08:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
  118c0c:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
  118c10:	e89e000f 	ldm	lr, {r0, r1, r2, r3}
  118c14:	e88c000f 	stm	ip, {r0, r1, r2, r3}
  118c18:	e24b306c 	sub	r3, fp, #108	; 0x6c
  118c1c:	e3a02060 	mov	r2, #96	; 0x60
  118c20:	e3a01000 	mov	r1, #0
  118c24:	e1a00003 	mov	r0, r3
  118c28:	eb00a191 	bl	141274 <memset>
      strcat(errstr, desc->desc);
  118c2c:	e51b3094 	ldr	r3, [fp, #-148]	; 0xffffff6c
  118c30:	e5932000 	ldr	r2, [r3]
  118c34:	e24b308c 	sub	r3, fp, #140	; 0x8c
  118c38:	e1a01002 	mov	r1, r2
  118c3c:	e1a00003 	mov	r0, r3
  118c40:	eb00a1f1 	bl	14140c <strcat>
      LWIP_ASSERT(errstr, 0);
  118c44:	e24b308c 	sub	r3, fp, #140	; 0x8c
  118c48:	e1a00003 	mov	r0, r3
  118c4c:	ebffa930 	bl	103114 <rt_kprintf>
  118c50:	e3a0108a 	mov	r1, #138	; 0x8a
  118c54:	e3070390 	movw	r0, #29584	; 0x7390
  118c58:	e3400014 	movt	r0, #20
  118c5c:	ebffc923 	bl	10b0f0 <sys_arch_assert>
  for (k = 0; k < MEMP_SANITY_REGION_AFTER_ALIGNED; k++) {
  118c60:	e15b30b6 	ldrh	r3, [fp, #-6]
  118c64:	e2833001 	add	r3, r3, #1
  118c68:	e14b30b6 	strh	r3, [fp, #-6]
  118c6c:	e15b30b6 	ldrh	r3, [fp, #-6]
  118c70:	e353000f 	cmp	r3, #15
  118c74:	9affffd9 	bls	118be0 <memp_overflow_check_element_overflow+0x38>
  }
#else /* MEMP_SANITY_REGION_AFTER_ALIGNED > 0 */
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(desc);
#endif /* MEMP_SANITY_REGION_AFTER_ALIGNED > 0 */
}
  118c78:	e320f000 	nop	{0}
  118c7c:	e24bd004 	sub	sp, fp, #4
  118c80:	e8bd8800 	pop	{fp, pc}

00118c84 <memp_overflow_check_element_underflow>:
 * @param p the memp element to check
 * @param desc the pool p comes from
 */
static void
memp_overflow_check_element_underflow(struct memp *p, const struct memp_desc *desc)
{
  118c84:	e92d4800 	push	{fp, lr}
  118c88:	e28db004 	add	fp, sp, #4
  118c8c:	e24dd090 	sub	sp, sp, #144	; 0x90
  118c90:	e50b0090 	str	r0, [fp, #-144]	; 0xffffff70
  118c94:	e50b1094 	str	r1, [fp, #-148]	; 0xffffff6c
#if MEMP_SANITY_REGION_BEFORE_ALIGNED > 0
  u16_t k;
  u8_t *m;
  m = (u8_t*)p + MEMP_SIZE - MEMP_SANITY_REGION_BEFORE_ALIGNED;
  118c98:	e51b3090 	ldr	r3, [fp, #-144]	; 0xffffff70
  118c9c:	e283300c 	add	r3, r3, #12
  118ca0:	e50b300c 	str	r3, [fp, #-12]
  for (k = 0; k < MEMP_SANITY_REGION_BEFORE_ALIGNED; k++) {
  118ca4:	e3a03000 	mov	r3, #0
  118ca8:	e14b30b6 	strh	r3, [fp, #-6]
  118cac:	ea000024 	b	118d44 <memp_overflow_check_element_underflow+0xc0>
    if (m[k] != 0xcd) {
  118cb0:	e15b30b6 	ldrh	r3, [fp, #-6]
  118cb4:	e51b200c 	ldr	r2, [fp, #-12]
  118cb8:	e0823003 	add	r3, r2, r3
  118cbc:	e5d33000 	ldrb	r3, [r3]
  118cc0:	e35300cd 	cmp	r3, #205	; 0xcd
  118cc4:	0a00001b 	beq	118d38 <memp_overflow_check_element_underflow+0xb4>
      char errstr[128] = "detected memp underflow in pool ";
  118cc8:	e307343c 	movw	r3, #29756	; 0x743c
  118ccc:	e3403014 	movt	r3, #20
  118cd0:	e24bc08c 	sub	ip, fp, #140	; 0x8c
  118cd4:	e1a0e003 	mov	lr, r3
  118cd8:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
  118cdc:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
  118ce0:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
  118ce4:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
  118ce8:	e59e3000 	ldr	r3, [lr]
  118cec:	e5cc3000 	strb	r3, [ip]
  118cf0:	e24b306b 	sub	r3, fp, #107	; 0x6b
  118cf4:	e3a0205f 	mov	r2, #95	; 0x5f
  118cf8:	e3a01000 	mov	r1, #0
  118cfc:	e1a00003 	mov	r0, r3
  118d00:	eb00a15b 	bl	141274 <memset>
      strcat(errstr, desc->desc);
  118d04:	e51b3094 	ldr	r3, [fp, #-148]	; 0xffffff6c
  118d08:	e5932000 	ldr	r2, [r3]
  118d0c:	e24b308c 	sub	r3, fp, #140	; 0x8c
  118d10:	e1a01002 	mov	r1, r2
  118d14:	e1a00003 	mov	r0, r3
  118d18:	eb00a1bb 	bl	14140c <strcat>
      LWIP_ASSERT(errstr, 0);
  118d1c:	e24b308c 	sub	r3, fp, #140	; 0x8c
  118d20:	e1a00003 	mov	r0, r3
  118d24:	ebffa8fa 	bl	103114 <rt_kprintf>
  118d28:	e3a010a5 	mov	r1, #165	; 0xa5
  118d2c:	e3070390 	movw	r0, #29584	; 0x7390
  118d30:	e3400014 	movt	r0, #20
  118d34:	ebffc8ed 	bl	10b0f0 <sys_arch_assert>
  for (k = 0; k < MEMP_SANITY_REGION_BEFORE_ALIGNED; k++) {
  118d38:	e15b30b6 	ldrh	r3, [fp, #-6]
  118d3c:	e2833001 	add	r3, r3, #1
  118d40:	e14b30b6 	strh	r3, [fp, #-6]
  118d44:	e15b30b6 	ldrh	r3, [fp, #-6]
  118d48:	e353000f 	cmp	r3, #15
  118d4c:	9affffd7 	bls	118cb0 <memp_overflow_check_element_underflow+0x2c>
  }
#else /* MEMP_SANITY_REGION_BEFORE_ALIGNED > 0 */
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(desc);
#endif /* MEMP_SANITY_REGION_BEFORE_ALIGNED > 0 */
}
  118d50:	e320f000 	nop	{0}
  118d54:	e24bd004 	sub	sp, fp, #4
  118d58:	e8bd8800 	pop	{fp, pc}

00118d5c <memp_overflow_init_element>:
/**
 * Initialize the restricted area of on memp element.
 */
static void
memp_overflow_init_element(struct memp *p, const struct memp_desc *desc)
{
  118d5c:	e92d4800 	push	{fp, lr}
  118d60:	e28db004 	add	fp, sp, #4
  118d64:	e24dd010 	sub	sp, sp, #16
  118d68:	e50b0010 	str	r0, [fp, #-16]
  118d6c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
#if MEMP_SANITY_REGION_BEFORE_ALIGNED > 0 || MEMP_SANITY_REGION_AFTER_ALIGNED > 0
  u8_t *m;
#if MEMP_SANITY_REGION_BEFORE_ALIGNED > 0
  m = (u8_t*)p + MEMP_SIZE - MEMP_SANITY_REGION_BEFORE_ALIGNED;
  118d70:	e51b3010 	ldr	r3, [fp, #-16]
  118d74:	e283300c 	add	r3, r3, #12
  118d78:	e50b3008 	str	r3, [fp, #-8]
  memset(m, 0xcd, MEMP_SANITY_REGION_BEFORE_ALIGNED);
  118d7c:	e3a02010 	mov	r2, #16
  118d80:	e3a010cd 	mov	r1, #205	; 0xcd
  118d84:	e51b0008 	ldr	r0, [fp, #-8]
  118d88:	eb00a139 	bl	141274 <memset>
#endif
#if MEMP_SANITY_REGION_AFTER_ALIGNED > 0
  m = (u8_t*)p + MEMP_SIZE + desc->size;
  118d8c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  118d90:	e1d330b8 	ldrh	r3, [r3, #8]
  118d94:	e283301c 	add	r3, r3, #28
  118d98:	e51b2010 	ldr	r2, [fp, #-16]
  118d9c:	e0823003 	add	r3, r2, r3
  118da0:	e50b3008 	str	r3, [fp, #-8]
  memset(m, 0xcd, MEMP_SANITY_REGION_AFTER_ALIGNED);
  118da4:	e3a02010 	mov	r2, #16
  118da8:	e3a010cd 	mov	r1, #205	; 0xcd
  118dac:	e51b0008 	ldr	r0, [fp, #-8]
  118db0:	eb00a12f 	bl	141274 <memset>
#endif
#else /* MEMP_SANITY_REGION_BEFORE_ALIGNED > 0 || MEMP_SANITY_REGION_AFTER_ALIGNED > 0 */
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(desc);
#endif /* MEMP_SANITY_REGION_BEFORE_ALIGNED > 0 || MEMP_SANITY_REGION_AFTER_ALIGNED > 0 */
}
  118db4:	e320f000 	nop	{0}
  118db8:	e24bd004 	sub	sp, fp, #4
  118dbc:	e8bd8800 	pop	{fp, pc}

00118dc0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
  118dc0:	e92d4800 	push	{fp, lr}
  118dc4:	e28db004 	add	fp, sp, #4
  118dc8:	e24dd010 	sub	sp, sp, #16
  118dcc:	e50b0010 	str	r0, [fp, #-16]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
  118dd0:	e51b3010 	ldr	r3, [fp, #-16]
  118dd4:	e5933010 	ldr	r3, [r3, #16]
  118dd8:	e3a02000 	mov	r2, #0
  118ddc:	e5832000 	str	r2, [r3]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
  118de0:	e51b3010 	ldr	r3, [fp, #-16]
  118de4:	e593300c 	ldr	r3, [r3, #12]
  118de8:	e2833003 	add	r3, r3, #3
  118dec:	e3c33003 	bic	r3, r3, #3
  118df0:	e50b300c 	str	r3, [fp, #-12]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
  118df4:	e3a03000 	mov	r3, #0
  118df8:	e50b3008 	str	r3, [fp, #-8]
  118dfc:	ea000014 	b	118e54 <memp_init_pool+0x94>
    memp->next = *desc->tab;
  118e00:	e51b3010 	ldr	r3, [fp, #-16]
  118e04:	e5933010 	ldr	r3, [r3, #16]
  118e08:	e5932000 	ldr	r2, [r3]
  118e0c:	e51b300c 	ldr	r3, [fp, #-12]
  118e10:	e5832000 	str	r2, [r3]
    *desc->tab = memp;
  118e14:	e51b3010 	ldr	r3, [fp, #-16]
  118e18:	e5933010 	ldr	r3, [r3, #16]
  118e1c:	e51b200c 	ldr	r2, [fp, #-12]
  118e20:	e5832000 	str	r2, [r3]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
  118e24:	e51b1010 	ldr	r1, [fp, #-16]
  118e28:	e51b000c 	ldr	r0, [fp, #-12]
  118e2c:	ebffffca 	bl	118d5c <memp_overflow_init_element>
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
  118e30:	e51b3010 	ldr	r3, [fp, #-16]
  118e34:	e1d330b8 	ldrh	r3, [r3, #8]
#if MEMP_OVERFLOW_CHECK
      + MEMP_SANITY_REGION_AFTER_ALIGNED
  118e38:	e283302c 	add	r3, r3, #44	; 0x2c
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
  118e3c:	e51b200c 	ldr	r2, [fp, #-12]
  118e40:	e0823003 	add	r3, r2, r3
  118e44:	e50b300c 	str	r3, [fp, #-12]
  for (i = 0; i < desc->num; ++i) {
  118e48:	e51b3008 	ldr	r3, [fp, #-8]
  118e4c:	e2833001 	add	r3, r3, #1
  118e50:	e50b3008 	str	r3, [fp, #-8]
  118e54:	e51b3010 	ldr	r3, [fp, #-16]
  118e58:	e1d330ba 	ldrh	r3, [r3, #10]
  118e5c:	e1a02003 	mov	r2, r3
  118e60:	e51b3008 	ldr	r3, [fp, #-8]
  118e64:	e1530002 	cmp	r3, r2
  118e68:	baffffe4 	blt	118e00 <memp_init_pool+0x40>
#endif
    );
  }
#if MEMP_STATS
  desc->stats->avail = desc->num;
  118e6c:	e51b3010 	ldr	r3, [fp, #-16]
  118e70:	e5933004 	ldr	r3, [r3, #4]
  118e74:	e51b2010 	ldr	r2, [fp, #-16]
  118e78:	e1d220ba 	ldrh	r2, [r2, #10]
  118e7c:	e1c320b6 	strh	r2, [r3, #6]
#endif /* MEMP_STATS */
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
  118e80:	e51b3010 	ldr	r3, [fp, #-16]
  118e84:	e5933004 	ldr	r3, [r3, #4]
  118e88:	e51b2010 	ldr	r2, [fp, #-16]
  118e8c:	e5922000 	ldr	r2, [r2]
  118e90:	e5832000 	str	r2, [r3]
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
  118e94:	e320f000 	nop	{0}
  118e98:	e24bd004 	sub	sp, fp, #4
  118e9c:	e8bd8800 	pop	{fp, pc}

00118ea0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
  118ea0:	e92d4800 	push	{fp, lr}
  118ea4:	e28db004 	add	fp, sp, #4
  118ea8:	e24dd008 	sub	sp, sp, #8
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
  118eac:	e3a03000 	mov	r3, #0
  118eb0:	e14b30b6 	strh	r3, [fp, #-6]
  118eb4:	ea000014 	b	118f0c <memp_init+0x6c>
    memp_init_pool(memp_pools[i]);
  118eb8:	e15b20b6 	ldrh	r2, [fp, #-6]
  118ebc:	e307334c 	movw	r3, #29516	; 0x734c
  118ec0:	e3403014 	movt	r3, #20
  118ec4:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  118ec8:	e1a00003 	mov	r0, r3
  118ecc:	ebffffbb 	bl	118dc0 <memp_init_pool>

#if LWIP_STATS && MEMP_STATS
    lwip_stats.memp[i] = memp_pools[i]->stats;
  118ed0:	e15b20b6 	ldrh	r2, [fp, #-6]
  118ed4:	e307334c 	movw	r3, #29516	; 0x734c
  118ed8:	e3403014 	movt	r3, #20
  118edc:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  118ee0:	e15b30b6 	ldrh	r3, [fp, #-6]
  118ee4:	e5921004 	ldr	r1, [r2, #4]
  118ee8:	e30c2a30 	movw	r2, #51760	; 0xca30
  118eec:	e3402015 	movt	r2, #21
  118ef0:	e2833034 	add	r3, r3, #52	; 0x34
  118ef4:	e1a03103 	lsl	r3, r3, #2
  118ef8:	e0823003 	add	r3, r2, r3
  118efc:	e5831004 	str	r1, [r3, #4]
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
  118f00:	e15b30b6 	ldrh	r3, [fp, #-6]
  118f04:	e2833001 	add	r3, r3, #1
  118f08:	e14b30b6 	strh	r3, [fp, #-6]
  118f0c:	e15b30b6 	ldrh	r3, [fp, #-6]
  118f10:	e3530010 	cmp	r3, #16
  118f14:	9affffe7 	bls	118eb8 <memp_init+0x18>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
  118f18:	e320f000 	nop	{0}
  118f1c:	e24bd004 	sub	sp, fp, #4
  118f20:	e8bd8800 	pop	{fp, pc}

00118f24 <do_memp_malloc_pool_fn>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
  118f24:	e92d4800 	push	{fp, lr}
  118f28:	e28db004 	add	fp, sp, #4
  118f2c:	e24dd018 	sub	sp, sp, #24
  118f30:	e50b0010 	str	r0, [fp, #-16]
  118f34:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  118f38:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
  118f3c:	ebffa4be 	bl	10223c <rt_enter_critical>

  memp = *desc->tab;
  118f40:	e51b3010 	ldr	r3, [fp, #-16]
  118f44:	e5933010 	ldr	r3, [r3, #16]
  118f48:	e5933000 	ldr	r3, [r3]
  118f4c:	e50b3008 	str	r3, [fp, #-8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
  118f50:	e51b3008 	ldr	r3, [fp, #-8]
  118f54:	e3530000 	cmp	r3, #0
  118f58:	0a000036 	beq	119038 <do_memp_malloc_pool_fn+0x114>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
  118f5c:	e51b1010 	ldr	r1, [fp, #-16]
  118f60:	e51b0008 	ldr	r0, [fp, #-8]
  118f64:	ebffff0f 	bl	118ba8 <memp_overflow_check_element_overflow>
    memp_overflow_check_element_underflow(memp, desc);
  118f68:	e51b1010 	ldr	r1, [fp, #-16]
  118f6c:	e51b0008 	ldr	r0, [fp, #-8]
  118f70:	ebffff43 	bl	118c84 <memp_overflow_check_element_underflow>
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
  118f74:	e51b3010 	ldr	r3, [fp, #-16]
  118f78:	e5933010 	ldr	r3, [r3, #16]
  118f7c:	e51b2008 	ldr	r2, [fp, #-8]
  118f80:	e5922000 	ldr	r2, [r2]
  118f84:	e5832000 	str	r2, [r3]
#if MEMP_OVERFLOW_CHECK
    memp->next = NULL;
  118f88:	e51b3008 	ldr	r3, [fp, #-8]
  118f8c:	e3a02000 	mov	r2, #0
  118f90:	e5832000 	str	r2, [r3]
#endif /* MEMP_OVERFLOW_CHECK */
#endif /* !MEMP_MEM_MALLOC */
#if MEMP_OVERFLOW_CHECK
    memp->file = file;
  118f94:	e51b3008 	ldr	r3, [fp, #-8]
  118f98:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  118f9c:	e5832004 	str	r2, [r3, #4]
    memp->line = line;
  118fa0:	e51b3008 	ldr	r3, [fp, #-8]
  118fa4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  118fa8:	e5832008 	str	r2, [r3, #8]
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
  118fac:	e51b3008 	ldr	r3, [fp, #-8]
  118fb0:	e2033003 	and	r3, r3, #3
  118fb4:	e3530000 	cmp	r3, #0
  118fb8:	0a000006 	beq	118fd8 <do_memp_malloc_pool_fn+0xb4>
  118fbc:	e30704bc 	movw	r0, #29884	; 0x74bc
  118fc0:	e3400014 	movt	r0, #20
  118fc4:	ebffa852 	bl	103114 <rt_kprintf>
  118fc8:	e3001149 	movw	r1, #329	; 0x149
  118fcc:	e3070390 	movw	r0, #29584	; 0x7390
  118fd0:	e3400014 	movt	r0, #20
  118fd4:	ebffc845 	bl	10b0f0 <sys_arch_assert>
                ((mem_ptr_t)memp % MEM_ALIGNMENT) == 0);
#if MEMP_STATS
    desc->stats->used++;
  118fd8:	e51b3010 	ldr	r3, [fp, #-16]
  118fdc:	e5933004 	ldr	r3, [r3, #4]
  118fe0:	e1d320b8 	ldrh	r2, [r3, #8]
  118fe4:	e2822001 	add	r2, r2, #1
  118fe8:	e6ff2072 	uxth	r2, r2
  118fec:	e1c320b8 	strh	r2, [r3, #8]
    if (desc->stats->used > desc->stats->max) {
  118ff0:	e51b3010 	ldr	r3, [fp, #-16]
  118ff4:	e5933004 	ldr	r3, [r3, #4]
  118ff8:	e1d320b8 	ldrh	r2, [r3, #8]
  118ffc:	e51b3010 	ldr	r3, [fp, #-16]
  119000:	e5933004 	ldr	r3, [r3, #4]
  119004:	e1d330ba 	ldrh	r3, [r3, #10]
  119008:	e1520003 	cmp	r2, r3
  11900c:	9a000005 	bls	119028 <do_memp_malloc_pool_fn+0x104>
      desc->stats->max = desc->stats->used;
  119010:	e51b3010 	ldr	r3, [fp, #-16]
  119014:	e5932004 	ldr	r2, [r3, #4]
  119018:	e51b3010 	ldr	r3, [fp, #-16]
  11901c:	e5933004 	ldr	r3, [r3, #4]
  119020:	e1d220b8 	ldrh	r2, [r2, #8]
  119024:	e1c320ba 	strh	r2, [r3, #10]
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
  119028:	ebffa489 	bl	102254 <rt_exit_critical>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
  11902c:	e51b3008 	ldr	r3, [fp, #-8]
  119030:	e283301c 	add	r3, r3, #28
  119034:	ea000007 	b	119058 <do_memp_malloc_pool_fn+0x134>
  } else {
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
#if MEMP_STATS
    desc->stats->err++;
  119038:	e51b3010 	ldr	r3, [fp, #-16]
  11903c:	e5933004 	ldr	r3, [r3, #4]
  119040:	e1d320b4 	ldrh	r2, [r3, #4]
  119044:	e2822001 	add	r2, r2, #1
  119048:	e6ff2072 	uxth	r2, r2
  11904c:	e1c320b4 	strh	r2, [r3, #4]
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  119050:	ebffa47f 	bl	102254 <rt_exit_critical>
  return NULL;
  119054:	e3a03000 	mov	r3, #0
}
  119058:	e1a00003 	mov	r0, r3
  11905c:	e24bd004 	sub	sp, fp, #4
  119060:	e8bd8800 	pop	{fp, pc}

00119064 <memp_malloc_pool_fn>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
  119064:	e92d4800 	push	{fp, lr}
  119068:	e28db004 	add	fp, sp, #4
  11906c:	e24dd010 	sub	sp, sp, #16
  119070:	e50b0008 	str	r0, [fp, #-8]
  119074:	e50b100c 	str	r1, [fp, #-12]
  119078:	e50b2010 	str	r2, [fp, #-16]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
  11907c:	e51b3008 	ldr	r3, [fp, #-8]
  119080:	e3530000 	cmp	r3, #0
  119084:	1a000006 	bne	1190a4 <memp_malloc_pool_fn+0x40>
  119088:	e30704e0 	movw	r0, #29920	; 0x74e0
  11908c:	e3400014 	movt	r0, #20
  119090:	ebffa81f 	bl	103114 <rt_kprintf>
  119094:	e3a01f5b 	mov	r1, #364	; 0x16c
  119098:	e3070390 	movw	r0, #29584	; 0x7390
  11909c:	e3400014 	movt	r0, #20
  1190a0:	ebffc812 	bl	10b0f0 <sys_arch_assert>
  if (desc == NULL) {
  1190a4:	e51b3008 	ldr	r3, [fp, #-8]
  1190a8:	e3530000 	cmp	r3, #0
  1190ac:	1a000001 	bne	1190b8 <memp_malloc_pool_fn+0x54>
    return NULL;
  1190b0:	e3a03000 	mov	r3, #0
  1190b4:	ea000004 	b	1190cc <memp_malloc_pool_fn+0x68>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
#else
  return do_memp_malloc_pool_fn(desc, file, line);
  1190b8:	e51b2010 	ldr	r2, [fp, #-16]
  1190bc:	e51b100c 	ldr	r1, [fp, #-12]
  1190c0:	e51b0008 	ldr	r0, [fp, #-8]
  1190c4:	ebffff96 	bl	118f24 <do_memp_malloc_pool_fn>
  1190c8:	e1a03000 	mov	r3, r0
#endif
}
  1190cc:	e1a00003 	mov	r0, r3
  1190d0:	e24bd004 	sub	sp, fp, #4
  1190d4:	e8bd8800 	pop	{fp, pc}

001190d8 <memp_malloc_fn>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
  1190d8:	e92d4800 	push	{fp, lr}
  1190dc:	e28db004 	add	fp, sp, #4
  1190e0:	e24dd018 	sub	sp, sp, #24
  1190e4:	e50b0010 	str	r0, [fp, #-16]
  1190e8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1190ec:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
  1190f0:	e51b3010 	ldr	r3, [fp, #-16]
  1190f4:	e3530010 	cmp	r3, #16
  1190f8:	9a000008 	bls	119120 <memp_malloc_fn+0x48>
  1190fc:	e30704f4 	movw	r0, #29940	; 0x74f4
  119100:	e3400014 	movt	r0, #20
  119104:	ebffa802 	bl	103114 <rt_kprintf>
  119108:	e3001187 	movw	r1, #391	; 0x187
  11910c:	e3070390 	movw	r0, #29584	; 0x7390
  119110:	e3400014 	movt	r0, #20
  119114:	ebffc7f5 	bl	10b0f0 <sys_arch_assert>
  119118:	e3a03000 	mov	r3, #0
  11911c:	ea000009 	b	119148 <memp_malloc_fn+0x70>
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
  119120:	e307334c 	movw	r3, #29516	; 0x734c
  119124:	e3403014 	movt	r3, #20
  119128:	e51b2010 	ldr	r2, [fp, #-16]
  11912c:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  119130:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  119134:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  119138:	e1a00003 	mov	r0, r3
  11913c:	ebffff78 	bl	118f24 <do_memp_malloc_pool_fn>
  119140:	e50b0008 	str	r0, [fp, #-8]
#endif

  return memp;
  119144:	e51b3008 	ldr	r3, [fp, #-8]
}
  119148:	e1a00003 	mov	r0, r3
  11914c:	e24bd004 	sub	sp, fp, #4
  119150:	e8bd8800 	pop	{fp, pc}

00119154 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
  119154:	e92d4800 	push	{fp, lr}
  119158:	e28db004 	add	fp, sp, #4
  11915c:	e24dd010 	sub	sp, sp, #16
  119160:	e50b0010 	str	r0, [fp, #-16]
  119164:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
  119168:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11916c:	e2033003 	and	r3, r3, #3
  119170:	e3530000 	cmp	r3, #0
  119174:	0a000006 	beq	119194 <do_memp_free_pool+0x40>
  119178:	e3070514 	movw	r0, #29972	; 0x7514
  11917c:	e3400014 	movt	r0, #20
  119180:	ebffa7e3 	bl	103114 <rt_kprintf>
  119184:	e300119d 	movw	r1, #413	; 0x19d
  119188:	e3070390 	movw	r0, #29584	; 0x7390
  11918c:	e3400014 	movt	r0, #20
  119190:	ebffc7d6 	bl	10b0f0 <sys_arch_assert>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
  119194:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  119198:	e243301c 	sub	r3, r3, #28
  11919c:	e50b3008 	str	r3, [fp, #-8]

  SYS_ARCH_PROTECT(old_level);
  1191a0:	ebffa425 	bl	10223c <rt_enter_critical>

#if MEMP_OVERFLOW_CHECK == 1
  memp_overflow_check_element_overflow(memp, desc);
  1191a4:	e51b1010 	ldr	r1, [fp, #-16]
  1191a8:	e51b0008 	ldr	r0, [fp, #-8]
  1191ac:	ebfffe7d 	bl	118ba8 <memp_overflow_check_element_overflow>
  memp_overflow_check_element_underflow(memp, desc);
  1191b0:	e51b1010 	ldr	r1, [fp, #-16]
  1191b4:	e51b0008 	ldr	r0, [fp, #-8]
  1191b8:	ebfffeb1 	bl	118c84 <memp_overflow_check_element_underflow>
#endif /* MEMP_OVERFLOW_CHECK */

#if MEMP_STATS
  desc->stats->used--;
  1191bc:	e51b3010 	ldr	r3, [fp, #-16]
  1191c0:	e5933004 	ldr	r3, [r3, #4]
  1191c4:	e1d320b8 	ldrh	r2, [r3, #8]
  1191c8:	e2422001 	sub	r2, r2, #1
  1191cc:	e6ff2072 	uxth	r2, r2
  1191d0:	e1c320b8 	strh	r2, [r3, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
  1191d4:	e51b3010 	ldr	r3, [fp, #-16]
  1191d8:	e5933010 	ldr	r3, [r3, #16]
  1191dc:	e5932000 	ldr	r2, [r3]
  1191e0:	e51b3008 	ldr	r3, [fp, #-8]
  1191e4:	e5832000 	str	r2, [r3]
  *desc->tab = memp;
  1191e8:	e51b3010 	ldr	r3, [fp, #-16]
  1191ec:	e5933010 	ldr	r3, [r3, #16]
  1191f0:	e51b2008 	ldr	r2, [fp, #-8]
  1191f4:	e5832000 	str	r2, [r3]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
  1191f8:	ebffa415 	bl	102254 <rt_exit_critical>
#endif /* !MEMP_MEM_MALLOC */
}
  1191fc:	e320f000 	nop	{0}
  119200:	e24bd004 	sub	sp, fp, #4
  119204:	e8bd8800 	pop	{fp, pc}

00119208 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc* desc, void *mem)
{
  119208:	e92d4800 	push	{fp, lr}
  11920c:	e28db004 	add	fp, sp, #4
  119210:	e24dd008 	sub	sp, sp, #8
  119214:	e50b0008 	str	r0, [fp, #-8]
  119218:	e50b100c 	str	r1, [fp, #-12]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
  11921c:	e51b3008 	ldr	r3, [fp, #-8]
  119220:	e3530000 	cmp	r3, #0
  119224:	1a000006 	bne	119244 <memp_free_pool+0x3c>
  119228:	e30704e0 	movw	r0, #29920	; 0x74e0
  11922c:	e3400014 	movt	r0, #20
  119230:	ebffa7b7 	bl	103114 <rt_kprintf>
  119234:	e30011c6 	movw	r1, #454	; 0x1c6
  119238:	e3070390 	movw	r0, #29584	; 0x7390
  11923c:	e3400014 	movt	r0, #20
  119240:	ebffc7aa 	bl	10b0f0 <sys_arch_assert>
  if ((desc == NULL) || (mem == NULL)) {
  119244:	e51b3008 	ldr	r3, [fp, #-8]
  119248:	e3530000 	cmp	r3, #0
  11924c:	0a000006 	beq	11926c <memp_free_pool+0x64>
  119250:	e51b300c 	ldr	r3, [fp, #-12]
  119254:	e3530000 	cmp	r3, #0
  119258:	0a000003 	beq	11926c <memp_free_pool+0x64>
    return;
  }

  do_memp_free_pool(desc, mem);
  11925c:	e51b100c 	ldr	r1, [fp, #-12]
  119260:	e51b0008 	ldr	r0, [fp, #-8]
  119264:	ebffffba 	bl	119154 <do_memp_free_pool>
  119268:	ea000000 	b	119270 <memp_free_pool+0x68>
    return;
  11926c:	e320f000 	nop	{0}
}
  119270:	e24bd004 	sub	sp, fp, #4
  119274:	e8bd8800 	pop	{fp, pc}

00119278 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
  119278:	e92d4800 	push	{fp, lr}
  11927c:	e28db004 	add	fp, sp, #4
  119280:	e24dd008 	sub	sp, sp, #8
  119284:	e50b0008 	str	r0, [fp, #-8]
  119288:	e50b100c 	str	r1, [fp, #-12]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
  11928c:	e51b3008 	ldr	r3, [fp, #-8]
  119290:	e3530010 	cmp	r3, #16
  119294:	9a000007 	bls	1192b8 <memp_free+0x40>
  119298:	e3070534 	movw	r0, #30004	; 0x7534
  11929c:	e3400014 	movt	r0, #20
  1192a0:	ebffa79b 	bl	103114 <rt_kprintf>
  1192a4:	e30011db 	movw	r1, #475	; 0x1db
  1192a8:	e3070390 	movw	r0, #29584	; 0x7390
  1192ac:	e3400014 	movt	r0, #20
  1192b0:	ebffc78e 	bl	10b0f0 <sys_arch_assert>
  1192b4:	ea00000b 	b	1192e8 <memp_free+0x70>

  if (mem == NULL) {
  1192b8:	e51b300c 	ldr	r3, [fp, #-12]
  1192bc:	e3530000 	cmp	r3, #0
  1192c0:	0a000007 	beq	1192e4 <memp_free+0x6c>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
  1192c4:	e307334c 	movw	r3, #29516	; 0x734c
  1192c8:	e3403014 	movt	r3, #20
  1192cc:	e51b2008 	ldr	r2, [fp, #-8]
  1192d0:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  1192d4:	e51b100c 	ldr	r1, [fp, #-12]
  1192d8:	e1a00003 	mov	r0, r3
  1192dc:	ebffff9c 	bl	119154 <do_memp_free_pool>
  1192e0:	ea000000 	b	1192e8 <memp_free+0x70>
    return;
  1192e4:	e320f000 	nop	{0}
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
  1192e8:	e24bd004 	sub	sp, fp, #4
  1192ec:	e8bd8800 	pop	{fp, pc}

001192f0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
  1192f0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1192f4:	e28db000 	add	fp, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
  1192f8:	e320f000 	nop	{0}
  1192fc:	e28bd000 	add	sp, fp, #0
  119300:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  119304:	e12fff1e 	bx	lr

00119308 <netif_input>:
 * Only works if the netif driver correctly sets
 * NETIF_FLAG_ETHARP and/or NETIF_FLAG_ETHERNET flag!
 */
err_t
netif_input(struct pbuf *p, struct netif *inp)
{
  119308:	e92d4800 	push	{fp, lr}
  11930c:	e28db004 	add	fp, sp, #4
  119310:	e24dd008 	sub	sp, sp, #8
  119314:	e50b0008 	str	r0, [fp, #-8]
  119318:	e50b100c 	str	r1, [fp, #-12]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
  11931c:	e51b300c 	ldr	r3, [fp, #-12]
  119320:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119324:	e2033018 	and	r3, r3, #24
  119328:	e3530000 	cmp	r3, #0
  11932c:	0a000004 	beq	119344 <netif_input+0x3c>
    return ethernet_input(p, inp);
  119330:	e51b100c 	ldr	r1, [fp, #-12]
  119334:	e51b0008 	ldr	r0, [fp, #-8]
  119338:	eb003e31 	bl	128c04 <ethernet_input>
  11933c:	e1a03000 	mov	r3, r0
  119340:	ea000003 	b	119354 <netif_input+0x4c>
  } else
#endif /* LWIP_ETHERNET */
  return ip_input(p, inp);
  119344:	e51b100c 	ldr	r1, [fp, #-12]
  119348:	e51b0008 	ldr	r0, [fp, #-8]
  11934c:	eb006038 	bl	131434 <ip4_input>
  119350:	e1a03000 	mov	r3, r0
}
  119354:	e1a00003 	mov	r0, r3
  119358:	e24bd004 	sub	sp, fp, #4
  11935c:	e8bd8800 	pop	{fp, pc}

00119360 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
  119360:	e92d4800 	push	{fp, lr}
  119364:	e28db004 	add	fp, sp, #4
  119368:	e24dd010 	sub	sp, sp, #16
  11936c:	e50b0008 	str	r0, [fp, #-8]
  119370:	e50b100c 	str	r1, [fp, #-12]
  119374:	e50b2010 	str	r2, [fp, #-16]
  119378:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
#if LWIP_IPV6
  s8_t i;
#endif
  LWIP_ASSERT("No init function given", init != NULL);
  11937c:	e59b3008 	ldr	r3, [fp, #8]
  119380:	e3530000 	cmp	r3, #0
  119384:	1a000006 	bne	1193a4 <netif_add+0x44>
  119388:	e3070550 	movw	r0, #30032	; 0x7550
  11938c:	e3400014 	movt	r0, #20
  119390:	ebffa75f 	bl	103114 <rt_kprintf>
  119394:	e3001105 	movw	r1, #261	; 0x105
  119398:	e3070568 	movw	r0, #30056	; 0x7568
  11939c:	e3400014 	movt	r0, #20
  1193a0:	ebffc752 	bl	10b0f0 <sys_arch_assert>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
  1193a4:	e51b3008 	ldr	r3, [fp, #-8]
  1193a8:	e3a02000 	mov	r2, #0
  1193ac:	e5832004 	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
  1193b0:	e51b3008 	ldr	r3, [fp, #-8]
  1193b4:	e3a02000 	mov	r2, #0
  1193b8:	e5832008 	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
  1193bc:	e51b3008 	ldr	r3, [fp, #-8]
  1193c0:	e3a02000 	mov	r2, #0
  1193c4:	e583200c 	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
  1193c8:	e51b3008 	ldr	r3, [fp, #-8]
  1193cc:	e3a02000 	mov	r2, #0
  1193d0:	e5c32041 	strb	r2, [r3, #65]	; 0x41
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
  1193d4:	e51b3008 	ldr	r3, [fp, #-8]
  1193d8:	e2833028 	add	r3, r3, #40	; 0x28
  1193dc:	e3a02008 	mov	r2, #8
  1193e0:	e3a01000 	mov	r1, #0
  1193e4:	e1a00003 	mov	r0, r3
  1193e8:	eb009fa1 	bl	141274 <memset>
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
  1193ec:	e51b3008 	ldr	r3, [fp, #-8]
  1193f0:	e3a02003 	mov	r2, #3
  1193f4:	e5c32030 	strb	r2, [r3, #48]	; 0x30
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
  1193f8:	e51b3008 	ldr	r3, [fp, #-8]
  1193fc:	e3a02000 	mov	r2, #0
  119400:	e583201c 	str	r2, [r3, #28]
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
  119404:	e51b3008 	ldr	r3, [fp, #-8]
  119408:	e3a02000 	mov	r2, #0
  11940c:	e5832020 	str	r2, [r3, #32]
#endif /* LWIP_NETIF_LINK_CALLBACK */
#if LWIP_IGMP
  netif->igmp_mac_filter = NULL;
  119410:	e51b3008 	ldr	r3, [fp, #-8]
  119414:	e3a02000 	mov	r2, #0
  119418:	e583207c 	str	r2, [r3, #124]	; 0x7c
#endif /* LWIP_IGMP */
#if LWIP_IPV6 && LWIP_IPV6_MLD
  netif->mld_mac_filter = NULL;
#endif /* LWIP_IPV6 && LWIP_IPV6_MLD */
#if ENABLE_LOOPBACK
  netif->loop_first = NULL;
  11941c:	e51b3008 	ldr	r3, [fp, #-8]
  119420:	e3a02000 	mov	r2, #0
  119424:	e5832080 	str	r2, [r3, #128]	; 0x80
  netif->loop_last = NULL;
  119428:	e51b3008 	ldr	r3, [fp, #-8]
  11942c:	e3a02000 	mov	r2, #0
  119430:	e5832084 	str	r2, [r3, #132]	; 0x84
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
  119434:	e51b3008 	ldr	r3, [fp, #-8]
  119438:	e59b2004 	ldr	r2, [fp, #4]
  11943c:	e5832024 	str	r2, [r3, #36]	; 0x24
  netif->num = netif_num++;
  119440:	e30e3224 	movw	r3, #57892	; 0xe224
  119444:	e3403014 	movt	r3, #20
  119448:	e5d32000 	ldrb	r2, [r3]
  11944c:	e2823001 	add	r3, r2, #1
  119450:	e6ef1073 	uxtb	r1, r3
  119454:	e30e3224 	movw	r3, #57892	; 0xe224
  119458:	e3403014 	movt	r3, #20
  11945c:	e5c31000 	strb	r1, [r3]
  119460:	e51b3008 	ldr	r3, [fp, #-8]
  119464:	e5c32044 	strb	r2, [r3, #68]	; 0x44
  netif->input = input;
  119468:	e51b3008 	ldr	r3, [fp, #-8]
  11946c:	e59b200c 	ldr	r2, [fp, #12]
  119470:	e5832010 	str	r2, [r3, #16]
  NETIF_SET_HWADDRHINT(netif, NULL);
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */
#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
  119474:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  119478:	e51b2010 	ldr	r2, [fp, #-16]
  11947c:	e51b100c 	ldr	r1, [fp, #-12]
  119480:	e51b0008 	ldr	r0, [fp, #-8]
  119484:	eb00001b 	bl	1194f8 <netif_set_addr>
#endif /* LWIP_IPV4 */
  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
  119488:	e59b3008 	ldr	r3, [fp, #8]
  11948c:	e51b0008 	ldr	r0, [fp, #-8]
  119490:	e12fff33 	blx	r3
  119494:	e1a03000 	mov	r3, r0
  119498:	e3530000 	cmp	r3, #0
  11949c:	0a000001 	beq	1194a8 <netif_add+0x148>
    return NULL;
  1194a0:	e3a03000 	mov	r3, #0
  1194a4:	ea000010 	b	1194ec <netif_add+0x18c>
  }
  /* add this netif to the list */
  netif->next = netif_list;
  1194a8:	e30c3a24 	movw	r3, #51748	; 0xca24
  1194ac:	e3403015 	movt	r3, #21
  1194b0:	e5932000 	ldr	r2, [r3]
  1194b4:	e51b3008 	ldr	r3, [fp, #-8]
  1194b8:	e5832000 	str	r2, [r3]
  netif_list = netif;
  1194bc:	e30c3a24 	movw	r3, #51748	; 0xca24
  1194c0:	e3403015 	movt	r3, #21
  1194c4:	e51b2008 	ldr	r2, [fp, #-8]
  1194c8:	e5832000 	str	r2, [r3]
  mib2_netif_added(netif);
#if LWIP_IGMP
  /* start IGMP processing */
  if (netif->flags & NETIF_FLAG_IGMP) {
  1194cc:	e51b3008 	ldr	r3, [fp, #-8]
  1194d0:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1194d4:	e2033020 	and	r3, r3, #32
  1194d8:	e3530000 	cmp	r3, #0
  1194dc:	0a000001 	beq	1194e8 <netif_add+0x188>
    igmp_start(netif);
  1194e0:	e51b0008 	ldr	r0, [fp, #-8]
  1194e4:	eb005a99 	bl	12ff50 <igmp_start>
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
  1194e8:	e51b3008 	ldr	r3, [fp, #-8]
}
  1194ec:	e1a00003 	mov	r0, r3
  1194f0:	e24bd004 	sub	sp, fp, #4
  1194f4:	e8bd8800 	pop	{fp, pc}

001194f8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
  1194f8:	e92d4800 	push	{fp, lr}
  1194fc:	e28db004 	add	fp, sp, #4
  119500:	e24dd010 	sub	sp, sp, #16
  119504:	e50b0008 	str	r0, [fp, #-8]
  119508:	e50b100c 	str	r1, [fp, #-12]
  11950c:	e50b2010 	str	r2, [fp, #-16]
  119510:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  if (ip4_addr_isany(ipaddr)) {
  119514:	e51b300c 	ldr	r3, [fp, #-12]
  119518:	e3530000 	cmp	r3, #0
  11951c:	0a000003 	beq	119530 <netif_set_addr+0x38>
  119520:	e51b300c 	ldr	r3, [fp, #-12]
  119524:	e5933000 	ldr	r3, [r3]
  119528:	e3530000 	cmp	r3, #0
  11952c:	1a000009 	bne	119558 <netif_set_addr+0x60>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
  119530:	e51b100c 	ldr	r1, [fp, #-12]
  119534:	e51b0008 	ldr	r0, [fp, #-8]
  119538:	eb00009d 	bl	1197b4 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
  11953c:	e51b1010 	ldr	r1, [fp, #-16]
  119540:	e51b0008 	ldr	r0, [fp, #-8]
  119544:	eb0000fa 	bl	119934 <netif_set_netmask>
    netif_set_gw(netif, gw);
  119548:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  11954c:	e51b0008 	ldr	r0, [fp, #-8]
  119550:	eb0000de 	bl	1198d0 <netif_set_gw>
  119554:	ea000008 	b	11957c <netif_set_addr+0x84>
  } else {
    netif_set_netmask(netif, netmask);
  119558:	e51b1010 	ldr	r1, [fp, #-16]
  11955c:	e51b0008 	ldr	r0, [fp, #-8]
  119560:	eb0000f3 	bl	119934 <netif_set_netmask>
    netif_set_gw(netif, gw);
  119564:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  119568:	e51b0008 	ldr	r0, [fp, #-8]
  11956c:	eb0000d7 	bl	1198d0 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
  119570:	e51b100c 	ldr	r1, [fp, #-12]
  119574:	e51b0008 	ldr	r0, [fp, #-8]
  119578:	eb00008d 	bl	1197b4 <netif_set_ipaddr>
  }
}
  11957c:	e320f000 	nop	{0}
  119580:	e24bd004 	sub	sp, fp, #4
  119584:	e8bd8800 	pop	{fp, pc}

00119588 <netif_remove>:
 *
 * @param netif the network interface to remove
 */
void
netif_remove(struct netif *netif)
{
  119588:	e92d4800 	push	{fp, lr}
  11958c:	e28db004 	add	fp, sp, #4
  119590:	e24dd010 	sub	sp, sp, #16
  119594:	e50b0010 	str	r0, [fp, #-16]
#if LWIP_IPV6
  int i;
#endif

  if (netif == NULL) {
  119598:	e51b3010 	ldr	r3, [fp, #-16]
  11959c:	e3530000 	cmp	r3, #0
  1195a0:	0a00004e 	beq	1196e0 <netif_remove+0x158>
    return;
  }

#if LWIP_IPV4
  if (!ip4_addr_isany_val(*netif_ip4_addr(netif))) {
  1195a4:	e51b3010 	ldr	r3, [fp, #-16]
  1195a8:	e2833004 	add	r3, r3, #4
  1195ac:	e5933000 	ldr	r3, [r3]
  1195b0:	e3530000 	cmp	r3, #0
  1195b4:	0a00000e 	beq	1195f4 <netif_remove+0x6c>
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), NULL);
  1195b8:	e51b3010 	ldr	r3, [fp, #-16]
  1195bc:	e2833004 	add	r3, r3, #4
  1195c0:	e3a01000 	mov	r1, #0
  1195c4:	e1a00003 	mov	r0, r3
  1195c8:	eb001aec 	bl	120180 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), NULL);
  1195cc:	e51b3010 	ldr	r3, [fp, #-16]
  1195d0:	e2833004 	add	r3, r3, #4
  1195d4:	e3a01000 	mov	r1, #0
  1195d8:	e1a00003 	mov	r0, r3
  1195dc:	eb003d5c 	bl	128b54 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
    raw_netif_ip_addr_changed(netif_ip_addr4(netif), NULL);
  1195e0:	e51b3010 	ldr	r3, [fp, #-16]
  1195e4:	e2833004 	add	r3, r3, #4
  1195e8:	e3a01000 	mov	r1, #0
  1195ec:	e1a00003 	mov	r0, r3
  1195f0:	eb000cb0 	bl	11c8b8 <raw_netif_ip_addr_changed>
#endif /* LWIP_RAW */
  }

#if LWIP_IGMP
  /* stop IGMP processing */
  if (netif->flags & NETIF_FLAG_IGMP) {
  1195f4:	e51b3010 	ldr	r3, [fp, #-16]
  1195f8:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1195fc:	e2033020 	and	r3, r3, #32
  119600:	e3530000 	cmp	r3, #0
  119604:	0a000001 	beq	119610 <netif_remove+0x88>
    igmp_stop(netif);
  119608:	e51b0010 	ldr	r0, [fp, #-16]
  11960c:	eb005a75 	bl	12ffe8 <igmp_stop>
#if LWIP_IPV6_MLD
  /* stop MLD processing */
  mld6_stop(netif);
#endif /* LWIP_IPV6_MLD */
#endif /* LWIP_IPV6 */
  if (netif_is_up(netif)) {
  119610:	e51b3010 	ldr	r3, [fp, #-16]
  119614:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119618:	e2033001 	and	r3, r3, #1
  11961c:	e6ef3073 	uxtb	r3, r3
  119620:	e3530000 	cmp	r3, #0
  119624:	0a000001 	beq	119630 <netif_remove+0xa8>
    /* set netif down before removing (call callback function) */
    netif_set_down(netif);
  119628:	e51b0010 	ldr	r0, [fp, #-16]
  11962c:	eb00013a 	bl	119b1c <netif_set_down>
  }

  mib2_remove_ip4(netif);

  /* this netif is default? */
  if (netif_default == netif) {
  119630:	e30c3a28 	movw	r3, #51752	; 0xca28
  119634:	e3403015 	movt	r3, #21
  119638:	e5933000 	ldr	r3, [r3]
  11963c:	e51b2010 	ldr	r2, [fp, #-16]
  119640:	e1520003 	cmp	r2, r3
  119644:	1a000001 	bne	119650 <netif_remove+0xc8>
    /* reset default netif */
    netif_set_default(NULL);
  119648:	e3a00000 	mov	r0, #0
  11964c:	eb0000d1 	bl	119998 <netif_set_default>
  }
  /*  is it the first netif? */
  if (netif_list == netif) {
  119650:	e30c3a24 	movw	r3, #51748	; 0xca24
  119654:	e3403015 	movt	r3, #21
  119658:	e5933000 	ldr	r3, [r3]
  11965c:	e51b2010 	ldr	r2, [fp, #-16]
  119660:	e1520003 	cmp	r2, r3
  119664:	1a000005 	bne	119680 <netif_remove+0xf8>
    netif_list = netif->next;
  119668:	e51b3010 	ldr	r3, [fp, #-16]
  11966c:	e5932000 	ldr	r2, [r3]
  119670:	e30c3a24 	movw	r3, #51748	; 0xca24
  119674:	e3403015 	movt	r3, #21
  119678:	e5832000 	str	r2, [r3]
  11967c:	ea000018 	b	1196e4 <netif_remove+0x15c>
  } else {
    /*  look for netif further down the list */
    struct netif * tmp_netif;
    for (tmp_netif = netif_list; tmp_netif != NULL; tmp_netif = tmp_netif->next) {
  119680:	e30c3a24 	movw	r3, #51748	; 0xca24
  119684:	e3403015 	movt	r3, #21
  119688:	e5933000 	ldr	r3, [r3]
  11968c:	e50b3008 	str	r3, [fp, #-8]
  119690:	ea00000c 	b	1196c8 <netif_remove+0x140>
      if (tmp_netif->next == netif) {
  119694:	e51b3008 	ldr	r3, [fp, #-8]
  119698:	e5933000 	ldr	r3, [r3]
  11969c:	e51b2010 	ldr	r2, [fp, #-16]
  1196a0:	e1520003 	cmp	r2, r3
  1196a4:	1a000004 	bne	1196bc <netif_remove+0x134>
        tmp_netif->next = netif->next;
  1196a8:	e51b3010 	ldr	r3, [fp, #-16]
  1196ac:	e5932000 	ldr	r2, [r3]
  1196b0:	e51b3008 	ldr	r3, [fp, #-8]
  1196b4:	e5832000 	str	r2, [r3]
        break;
  1196b8:	ea000005 	b	1196d4 <netif_remove+0x14c>
    for (tmp_netif = netif_list; tmp_netif != NULL; tmp_netif = tmp_netif->next) {
  1196bc:	e51b3008 	ldr	r3, [fp, #-8]
  1196c0:	e5933000 	ldr	r3, [r3]
  1196c4:	e50b3008 	str	r3, [fp, #-8]
  1196c8:	e51b3008 	ldr	r3, [fp, #-8]
  1196cc:	e3530000 	cmp	r3, #0
  1196d0:	1affffef 	bne	119694 <netif_remove+0x10c>
      }
    }
    if (tmp_netif == NULL) {
  1196d4:	e51b3008 	ldr	r3, [fp, #-8]
  1196d8:	e3530000 	cmp	r3, #0
  1196dc:	ea000000 	b	1196e4 <netif_remove+0x15c>
    return;
  1196e0:	e320f000 	nop	{0}
  if (netif->remove_callback) {
    netif->remove_callback(netif);
  }
#endif /* LWIP_NETIF_REMOVE_CALLBACK */
  LWIP_DEBUGF( NETIF_DEBUG, ("netif_remove: removed netif\n") );
}
  1196e4:	e24bd004 	sub	sp, fp, #4
  1196e8:	e8bd8800 	pop	{fp, pc}

001196ec <netif_find>:
 * @param name the name of the netif (like netif->name) plus concatenated number
 * in ascii representation (e.g. 'en0')
 */
struct netif *
netif_find(const char *name)
{
  1196ec:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1196f0:	e28db000 	add	fp, sp, #0
  1196f4:	e24dd014 	sub	sp, sp, #20
  1196f8:	e50b0010 	str	r0, [fp, #-16]
  struct netif *netif;
  u8_t num;

  if (name == NULL) {
  1196fc:	e51b3010 	ldr	r3, [fp, #-16]
  119700:	e3530000 	cmp	r3, #0
  119704:	1a000001 	bne	119710 <netif_find+0x24>
    return NULL;
  119708:	e3a03000 	mov	r3, #0
  11970c:	ea000024 	b	1197a4 <netif_find+0xb8>
  }

  num = (u8_t)(name[2] - '0');
  119710:	e51b3010 	ldr	r3, [fp, #-16]
  119714:	e2833002 	add	r3, r3, #2
  119718:	e5d33000 	ldrb	r3, [r3]
  11971c:	e2433030 	sub	r3, r3, #48	; 0x30
  119720:	e54b3009 	strb	r3, [fp, #-9]

  for (netif = netif_list; netif != NULL; netif = netif->next) {
  119724:	e30c3a24 	movw	r3, #51748	; 0xca24
  119728:	e3403015 	movt	r3, #21
  11972c:	e5933000 	ldr	r3, [r3]
  119730:	e50b3008 	str	r3, [fp, #-8]
  119734:	ea000016 	b	119794 <netif_find+0xa8>
    if (num == netif->num &&
  119738:	e51b3008 	ldr	r3, [fp, #-8]
  11973c:	e5d33044 	ldrb	r3, [r3, #68]	; 0x44
  119740:	e55b2009 	ldrb	r2, [fp, #-9]
  119744:	e1520003 	cmp	r2, r3
  119748:	1a00000e 	bne	119788 <netif_find+0x9c>
       name[0] == netif->name[0] &&
  11974c:	e51b3010 	ldr	r3, [fp, #-16]
  119750:	e5d32000 	ldrb	r2, [r3]
  119754:	e51b3008 	ldr	r3, [fp, #-8]
  119758:	e5d33042 	ldrb	r3, [r3, #66]	; 0x42
    if (num == netif->num &&
  11975c:	e1520003 	cmp	r2, r3
  119760:	1a000008 	bne	119788 <netif_find+0x9c>
       name[1] == netif->name[1]) {
  119764:	e51b3010 	ldr	r3, [fp, #-16]
  119768:	e2833001 	add	r3, r3, #1
  11976c:	e5d32000 	ldrb	r2, [r3]
  119770:	e51b3008 	ldr	r3, [fp, #-8]
  119774:	e5d33043 	ldrb	r3, [r3, #67]	; 0x43
       name[0] == netif->name[0] &&
  119778:	e1520003 	cmp	r2, r3
  11977c:	1a000001 	bne	119788 <netif_find+0x9c>
      LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: found %c%c\n", name[0], name[1]));
      return netif;
  119780:	e51b3008 	ldr	r3, [fp, #-8]
  119784:	ea000006 	b	1197a4 <netif_find+0xb8>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
  119788:	e51b3008 	ldr	r3, [fp, #-8]
  11978c:	e5933000 	ldr	r3, [r3]
  119790:	e50b3008 	str	r3, [fp, #-8]
  119794:	e51b3008 	ldr	r3, [fp, #-8]
  119798:	e3530000 	cmp	r3, #0
  11979c:	1affffe5 	bne	119738 <netif_find+0x4c>
    }
  }
  LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: didn't find %c%c\n", name[0], name[1]));
  return NULL;
  1197a0:	e3a03000 	mov	r3, #0
}
  1197a4:	e1a00003 	mov	r0, r3
  1197a8:	e28bd000 	add	sp, fp, #0
  1197ac:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1197b0:	e12fff1e 	bx	lr

001197b4 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
  1197b4:	e92d4800 	push	{fp, lr}
  1197b8:	e28db004 	add	fp, sp, #4
  1197bc:	e24dd010 	sub	sp, sp, #16
  1197c0:	e50b0010 	str	r0, [fp, #-16]
  1197c4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
  1197c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1197cc:	e3530000 	cmp	r3, #0
  1197d0:	0a000003 	beq	1197e4 <netif_set_ipaddr+0x30>
  1197d4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1197d8:	e5933000 	ldr	r3, [r3]
  1197dc:	e50b3008 	str	r3, [fp, #-8]
  1197e0:	ea000003 	b	1197f4 <netif_set_ipaddr+0x40>
  1197e4:	e3093908 	movw	r3, #39176	; 0x9908
  1197e8:	e3403014 	movt	r3, #20
  1197ec:	e5933000 	ldr	r3, [r3]
  1197f0:	e50b3008 	str	r3, [fp, #-8]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
  1197f4:	e51b2008 	ldr	r2, [fp, #-8]
  1197f8:	e51b3010 	ldr	r3, [fp, #-16]
  1197fc:	e2833004 	add	r3, r3, #4
  119800:	e5933000 	ldr	r3, [r3]
  119804:	e1520003 	cmp	r2, r3
  119808:	0a00002d 	beq	1198c4 <netif_set_ipaddr+0x110>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
  11980c:	e51b3010 	ldr	r3, [fp, #-16]
  119810:	e2833004 	add	r3, r3, #4
  119814:	e24b2008 	sub	r2, fp, #8
  119818:	e1a01002 	mov	r1, r2
  11981c:	e1a00003 	mov	r0, r3
  119820:	eb001a56 	bl	120180 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
  119824:	e51b3010 	ldr	r3, [fp, #-16]
  119828:	e2833004 	add	r3, r3, #4
  11982c:	e24b2008 	sub	r2, fp, #8
  119830:	e1a01002 	mov	r1, r2
  119834:	e1a00003 	mov	r0, r3
  119838:	eb003cc5 	bl	128b54 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
    raw_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
  11983c:	e51b3010 	ldr	r3, [fp, #-16]
  119840:	e2833004 	add	r3, r3, #4
  119844:	e24b2008 	sub	r2, fp, #8
  119848:	e1a01002 	mov	r1, r2
  11984c:	e1a00003 	mov	r0, r3
  119850:	eb000c18 	bl	11c8b8 <raw_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
  119854:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  119858:	e3530000 	cmp	r3, #0
  11985c:	0a000002 	beq	11986c <netif_set_ipaddr+0xb8>
  119860:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  119864:	e5933000 	ldr	r3, [r3]
  119868:	ea000000 	b	119870 <netif_set_ipaddr+0xbc>
  11986c:	e3a03000 	mov	r3, #0
  119870:	e51b2010 	ldr	r2, [fp, #-16]
  119874:	e5823004 	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
  119878:	e3a01001 	mov	r1, #1
  11987c:	e51b0010 	ldr	r0, [fp, #-16]
  119880:	eb000082 	bl	119a90 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
  119884:	e51b3010 	ldr	r3, [fp, #-16]
  119888:	e593301c 	ldr	r3, [r3, #28]
  11988c:	e3530000 	cmp	r3, #0
  119890:	0a000003 	beq	1198a4 <netif_set_ipaddr+0xf0>
  119894:	e51b3010 	ldr	r3, [fp, #-16]
  119898:	e593301c 	ldr	r3, [r3, #28]
  11989c:	e51b0010 	ldr	r0, [fp, #-16]
  1198a0:	e12fff33 	blx	r3

#ifdef RT_USING_NETDEV
    /* rt-thread sal network interface device set IP address operations */
    netdev_low_level_set_ipaddr(netdev_get_by_name(netif->name), (ip_addr_t *)ipaddr);
  1198a4:	e51b3010 	ldr	r3, [fp, #-16]
  1198a8:	e2833042 	add	r3, r3, #66	; 0x42
  1198ac:	e1a00003 	mov	r0, r3
  1198b0:	ebffaf0f 	bl	1054f4 <netdev_get_by_name>
  1198b4:	e1a03000 	mov	r3, r0
  1198b8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1198bc:	e1a00003 	mov	r0, r3
  1198c0:	ebffb1db 	bl	106034 <netdev_low_level_set_ipaddr>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
  1198c4:	e320f000 	nop	{0}
  1198c8:	e24bd004 	sub	sp, fp, #4
  1198cc:	e8bd8800 	pop	{fp, pc}

001198d0 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
  1198d0:	e92d4800 	push	{fp, lr}
  1198d4:	e28db004 	add	fp, sp, #4
  1198d8:	e24dd008 	sub	sp, sp, #8
  1198dc:	e50b0008 	str	r0, [fp, #-8]
  1198e0:	e50b100c 	str	r1, [fp, #-12]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
  1198e4:	e51b300c 	ldr	r3, [fp, #-12]
  1198e8:	e3530000 	cmp	r3, #0
  1198ec:	0a000002 	beq	1198fc <netif_set_gw+0x2c>
  1198f0:	e51b300c 	ldr	r3, [fp, #-12]
  1198f4:	e5933000 	ldr	r3, [r3]
  1198f8:	ea000000 	b	119900 <netif_set_gw+0x30>
  1198fc:	e3a03000 	mov	r3, #0
  119900:	e51b2008 	ldr	r2, [fp, #-8]
  119904:	e582300c 	str	r3, [r2, #12]
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));

#ifdef RT_USING_NETDEV
  /* rt_thread network interface device set gateway address */
  netdev_low_level_set_gw(netdev_get_by_name(netif->name), (ip_addr_t *)gw);
  119908:	e51b3008 	ldr	r3, [fp, #-8]
  11990c:	e2833042 	add	r3, r3, #66	; 0x42
  119910:	e1a00003 	mov	r0, r3
  119914:	ebffaef6 	bl	1054f4 <netdev_get_by_name>
  119918:	e1a03000 	mov	r3, r0
  11991c:	e51b100c 	ldr	r1, [fp, #-12]
  119920:	e1a00003 	mov	r0, r3
  119924:	ebffb23e 	bl	106224 <netdev_low_level_set_gw>
#endif /* RT_USING_NETDEV */
}
  119928:	e320f000 	nop	{0}
  11992c:	e24bd004 	sub	sp, fp, #4
  119930:	e8bd8800 	pop	{fp, pc}

00119934 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
  119934:	e92d4800 	push	{fp, lr}
  119938:	e28db004 	add	fp, sp, #4
  11993c:	e24dd008 	sub	sp, sp, #8
  119940:	e50b0008 	str	r0, [fp, #-8]
  119944:	e50b100c 	str	r1, [fp, #-12]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
  119948:	e51b300c 	ldr	r3, [fp, #-12]
  11994c:	e3530000 	cmp	r3, #0
  119950:	0a000002 	beq	119960 <netif_set_netmask+0x2c>
  119954:	e51b300c 	ldr	r3, [fp, #-12]
  119958:	e5933000 	ldr	r3, [r3]
  11995c:	ea000000 	b	119964 <netif_set_netmask+0x30>
  119960:	e3a03000 	mov	r3, #0
  119964:	e51b2008 	ldr	r2, [fp, #-8]
  119968:	e5823008 	str	r3, [r2, #8]
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));

#ifdef RT_USING_NETDEV
  /* rt-thread network interface device set netmask address */
  netdev_low_level_set_netmask(netdev_get_by_name(netif->name), (ip_addr_t *)netmask);
  11996c:	e51b3008 	ldr	r3, [fp, #-8]
  119970:	e2833042 	add	r3, r3, #66	; 0x42
  119974:	e1a00003 	mov	r0, r3
  119978:	ebffaedd 	bl	1054f4 <netdev_get_by_name>
  11997c:	e1a03000 	mov	r3, r0
  119980:	e51b100c 	ldr	r1, [fp, #-12]
  119984:	e1a00003 	mov	r0, r3
  119988:	ebffb1e3 	bl	10611c <netdev_low_level_set_netmask>
#endif /* RT_USING_NETDEV */
}
  11998c:	e320f000 	nop	{0}
  119990:	e24bd004 	sub	sp, fp, #4
  119994:	e8bd8800 	pop	{fp, pc}

00119998 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
  119998:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11999c:	e28db000 	add	fp, sp, #0
  1199a0:	e24dd00c 	sub	sp, sp, #12
  1199a4:	e50b0008 	str	r0, [fp, #-8]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
  1199a8:	e30c3a28 	movw	r3, #51752	; 0xca28
  1199ac:	e3403015 	movt	r3, #21
  1199b0:	e51b2008 	ldr	r2, [fp, #-8]
  1199b4:	e5832000 	str	r2, [r3]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
  1199b8:	e320f000 	nop	{0}
  1199bc:	e28bd000 	add	sp, fp, #0
  1199c0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1199c4:	e12fff1e 	bx	lr

001199c8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
  1199c8:	e92d4800 	push	{fp, lr}
  1199cc:	e28db004 	add	fp, sp, #4
  1199d0:	e24dd008 	sub	sp, sp, #8
  1199d4:	e50b0008 	str	r0, [fp, #-8]
  if (!(netif->flags & NETIF_FLAG_UP)) {
  1199d8:	e51b3008 	ldr	r3, [fp, #-8]
  1199dc:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1199e0:	e2033001 	and	r3, r3, #1
  1199e4:	e3530000 	cmp	r3, #0
  1199e8:	1a000025 	bne	119a84 <netif_set_up+0xbc>
    netif->flags |= NETIF_FLAG_UP;
  1199ec:	e51b3008 	ldr	r3, [fp, #-8]
  1199f0:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1199f4:	e3833001 	orr	r3, r3, #1
  1199f8:	e6ef2073 	uxtb	r2, r3
  1199fc:	e51b3008 	ldr	r3, [fp, #-8]
  119a00:	e5c32041 	strb	r2, [r3, #65]	; 0x41

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);
  119a04:	ebffc5d2 	bl	10b154 <sys_now>
  119a08:	e1a02000 	mov	r2, r0
  119a0c:	e30c3ccd 	movw	r3, #52429	; 0xcccd
  119a10:	e34c3ccc 	movt	r3, #52428	; 0xcccc
  119a14:	e0832392 	umull	r2, r3, r2, r3
  119a18:	e1a021a3 	lsr	r2, r3, #3
  119a1c:	e51b3008 	ldr	r3, [fp, #-8]
  119a20:	e583204c 	str	r2, [r3, #76]	; 0x4c

    NETIF_STATUS_CALLBACK(netif);
  119a24:	e51b3008 	ldr	r3, [fp, #-8]
  119a28:	e593301c 	ldr	r3, [r3, #28]
  119a2c:	e3530000 	cmp	r3, #0
  119a30:	0a000003 	beq	119a44 <netif_set_up+0x7c>
  119a34:	e51b3008 	ldr	r3, [fp, #-8]
  119a38:	e593301c 	ldr	r3, [r3, #28]
  119a3c:	e51b0008 	ldr	r0, [fp, #-8]
  119a40:	e12fff33 	blx	r3

    if (netif->flags & NETIF_FLAG_LINK_UP) {
  119a44:	e51b3008 	ldr	r3, [fp, #-8]
  119a48:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119a4c:	e2033004 	and	r3, r3, #4
  119a50:	e3530000 	cmp	r3, #0
  119a54:	0a000002 	beq	119a64 <netif_set_up+0x9c>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
  119a58:	e3a01003 	mov	r1, #3
  119a5c:	e51b0008 	ldr	r0, [fp, #-8]
  119a60:	eb00000a 	bl	119a90 <netif_issue_reports>
    }

#ifdef RT_USING_NETDEV
    /* rt-thread network interface device set up status */
    netdev_low_level_set_status(netdev_get_by_name(netif->name), RT_TRUE);
  119a64:	e51b3008 	ldr	r3, [fp, #-8]
  119a68:	e2833042 	add	r3, r3, #66	; 0x42
  119a6c:	e1a00003 	mov	r0, r3
  119a70:	ebffae9f 	bl	1054f4 <netdev_get_by_name>
  119a74:	e1a03000 	mov	r3, r0
  119a78:	e3a01001 	mov	r1, #1
  119a7c:	e1a00003 	mov	r0, r3
  119a80:	ebffb265 	bl	10641c <netdev_low_level_set_status>
#endif /* RT_USING_NETDEV */
  }
}
  119a84:	e320f000 	nop	{0}
  119a88:	e24bd004 	sub	sp, fp, #4
  119a8c:	e8bd8800 	pop	{fp, pc}

00119a90 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
  119a90:	e92d4800 	push	{fp, lr}
  119a94:	e28db004 	add	fp, sp, #4
  119a98:	e24dd008 	sub	sp, sp, #8
  119a9c:	e50b0008 	str	r0, [fp, #-8]
  119aa0:	e1a03001 	mov	r3, r1
  119aa4:	e54b3009 	strb	r3, [fp, #-9]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
  119aa8:	e55b3009 	ldrb	r3, [fp, #-9]
  119aac:	e2033001 	and	r3, r3, #1
  119ab0:	e3530000 	cmp	r3, #0
  119ab4:	0a000015 	beq	119b10 <netif_issue_reports+0x80>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
  119ab8:	e51b3008 	ldr	r3, [fp, #-8]
  119abc:	e2833004 	add	r3, r3, #4
  119ac0:	e5933000 	ldr	r3, [r3]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
  119ac4:	e3530000 	cmp	r3, #0
  119ac8:	0a000010 	beq	119b10 <netif_issue_reports+0x80>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
  119acc:	e51b3008 	ldr	r3, [fp, #-8]
  119ad0:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119ad4:	e2033008 	and	r3, r3, #8
  119ad8:	e3530000 	cmp	r3, #0
  119adc:	0a000004 	beq	119af4 <netif_issue_reports+0x64>
      etharp_gratuitous(netif);
  119ae0:	e51b3008 	ldr	r3, [fp, #-8]
  119ae4:	e2833004 	add	r3, r3, #4
  119ae8:	e1a01003 	mov	r1, r3
  119aec:	e51b0008 	ldr	r0, [fp, #-8]
  119af0:	eb005681 	bl	12f4fc <etharp_request>
    }
#endif /* LWIP_ARP */

#if LWIP_IGMP
    /* resend IGMP memberships */
    if (netif->flags & NETIF_FLAG_IGMP) {
  119af4:	e51b3008 	ldr	r3, [fp, #-8]
  119af8:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119afc:	e2033020 	and	r3, r3, #32
  119b00:	e3530000 	cmp	r3, #0
  119b04:	0a000001 	beq	119b10 <netif_issue_reports+0x80>
      igmp_report_groups(netif);
  119b08:	e51b0008 	ldr	r0, [fp, #-8]
  119b0c:	eb00595a 	bl	13007c <igmp_report_groups>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
  119b10:	e320f000 	nop	{0}
  119b14:	e24bd004 	sub	sp, fp, #4
  119b18:	e8bd8800 	pop	{fp, pc}

00119b1c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
  119b1c:	e92d4800 	push	{fp, lr}
  119b20:	e28db004 	add	fp, sp, #4
  119b24:	e24dd008 	sub	sp, sp, #8
  119b28:	e50b0008 	str	r0, [fp, #-8]
  if (netif->flags & NETIF_FLAG_UP) {
  119b2c:	e51b3008 	ldr	r3, [fp, #-8]
  119b30:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119b34:	e2033001 	and	r3, r3, #1
  119b38:	e3530000 	cmp	r3, #0
  119b3c:	0a000024 	beq	119bd4 <netif_set_down+0xb8>
    netif->flags &= ~NETIF_FLAG_UP;
  119b40:	e51b3008 	ldr	r3, [fp, #-8]
  119b44:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119b48:	e3c33001 	bic	r3, r3, #1
  119b4c:	e6ef2073 	uxtb	r2, r3
  119b50:	e51b3008 	ldr	r3, [fp, #-8]
  119b54:	e5c32041 	strb	r2, [r3, #65]	; 0x41
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);
  119b58:	ebffc57d 	bl	10b154 <sys_now>
  119b5c:	e1a02000 	mov	r2, r0
  119b60:	e30c3ccd 	movw	r3, #52429	; 0xcccd
  119b64:	e34c3ccc 	movt	r3, #52428	; 0xcccc
  119b68:	e0832392 	umull	r2, r3, r2, r3
  119b6c:	e1a021a3 	lsr	r2, r3, #3
  119b70:	e51b3008 	ldr	r3, [fp, #-8]
  119b74:	e583204c 	str	r2, [r3, #76]	; 0x4c

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
  119b78:	e51b3008 	ldr	r3, [fp, #-8]
  119b7c:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119b80:	e2033008 	and	r3, r3, #8
  119b84:	e3530000 	cmp	r3, #0
  119b88:	0a000001 	beq	119b94 <netif_set_down+0x78>
      etharp_cleanup_netif(netif);
  119b8c:	e51b0008 	ldr	r0, [fp, #-8]
  119b90:	eb00519f 	bl	12e214 <etharp_cleanup_netif>

#if LWIP_IPV6
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  119b94:	e51b3008 	ldr	r3, [fp, #-8]
  119b98:	e593301c 	ldr	r3, [r3, #28]
  119b9c:	e3530000 	cmp	r3, #0
  119ba0:	0a000003 	beq	119bb4 <netif_set_down+0x98>
  119ba4:	e51b3008 	ldr	r3, [fp, #-8]
  119ba8:	e593301c 	ldr	r3, [r3, #28]
  119bac:	e51b0008 	ldr	r0, [fp, #-8]
  119bb0:	e12fff33 	blx	r3

#ifdef RT_USING_NETDEV
    /* rt-thread network interface device set down status */
    netdev_low_level_set_status(netdev_get_by_name(netif->name), RT_FALSE);
  119bb4:	e51b3008 	ldr	r3, [fp, #-8]
  119bb8:	e2833042 	add	r3, r3, #66	; 0x42
  119bbc:	e1a00003 	mov	r0, r3
  119bc0:	ebffae4b 	bl	1054f4 <netdev_get_by_name>
  119bc4:	e1a03000 	mov	r3, r0
  119bc8:	e3a01000 	mov	r1, #0
  119bcc:	e1a00003 	mov	r0, r3
  119bd0:	ebffb211 	bl	10641c <netdev_low_level_set_status>
#endif /* RT_USING_NETDEV */
  }
}
  119bd4:	e320f000 	nop	{0}
  119bd8:	e24bd004 	sub	sp, fp, #4
  119bdc:	e8bd8800 	pop	{fp, pc}

00119be0 <netif_set_status_callback>:
 * @ingroup netif
 * Set callback to be called when interface is brought up/down or address is changed while up
 */
void
netif_set_status_callback(struct netif *netif, netif_status_callback_fn status_callback)
{
  119be0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  119be4:	e28db000 	add	fp, sp, #0
  119be8:	e24dd00c 	sub	sp, sp, #12
  119bec:	e50b0008 	str	r0, [fp, #-8]
  119bf0:	e50b100c 	str	r1, [fp, #-12]
  if (netif) {
  119bf4:	e51b3008 	ldr	r3, [fp, #-8]
  119bf8:	e3530000 	cmp	r3, #0
  119bfc:	0a000002 	beq	119c0c <netif_set_status_callback+0x2c>
    netif->status_callback = status_callback;
  119c00:	e51b3008 	ldr	r3, [fp, #-8]
  119c04:	e51b200c 	ldr	r2, [fp, #-12]
  119c08:	e583201c 	str	r2, [r3, #28]
  }
}
  119c0c:	e320f000 	nop	{0}
  119c10:	e28bd000 	add	sp, fp, #0
  119c14:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  119c18:	e12fff1e 	bx	lr

00119c1c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
  119c1c:	e92d4800 	push	{fp, lr}
  119c20:	e28db004 	add	fp, sp, #4
  119c24:	e24dd008 	sub	sp, sp, #8
  119c28:	e50b0008 	str	r0, [fp, #-8]
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
  119c2c:	e51b3008 	ldr	r3, [fp, #-8]
  119c30:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119c34:	e2033004 	and	r3, r3, #4
  119c38:	e3530000 	cmp	r3, #0
  119c3c:	1a00001f 	bne	119cc0 <netif_set_link_up+0xa4>
    netif->flags |= NETIF_FLAG_LINK_UP;
  119c40:	e51b3008 	ldr	r3, [fp, #-8]
  119c44:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119c48:	e3833004 	orr	r3, r3, #4
  119c4c:	e6ef2073 	uxtb	r2, r3
  119c50:	e51b3008 	ldr	r3, [fp, #-8]
  119c54:	e5c32041 	strb	r2, [r3, #65]	; 0x41

#if LWIP_DHCP
    dhcp_network_changed(netif);
  119c58:	e51b0008 	ldr	r0, [fp, #-8]
  119c5c:	eb0044e0 	bl	12afe4 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    if (netif->flags & NETIF_FLAG_UP) {
  119c60:	e51b3008 	ldr	r3, [fp, #-8]
  119c64:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119c68:	e2033001 	and	r3, r3, #1
  119c6c:	e3530000 	cmp	r3, #0
  119c70:	0a000002 	beq	119c80 <netif_set_link_up+0x64>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
  119c74:	e3a01003 	mov	r1, #3
  119c78:	e51b0008 	ldr	r0, [fp, #-8]
  119c7c:	ebffff83 	bl	119a90 <netif_issue_reports>
    }
    NETIF_LINK_CALLBACK(netif);
  119c80:	e51b3008 	ldr	r3, [fp, #-8]
  119c84:	e5933020 	ldr	r3, [r3, #32]
  119c88:	e3530000 	cmp	r3, #0
  119c8c:	0a000003 	beq	119ca0 <netif_set_link_up+0x84>
  119c90:	e51b3008 	ldr	r3, [fp, #-8]
  119c94:	e5933020 	ldr	r3, [r3, #32]
  119c98:	e51b0008 	ldr	r0, [fp, #-8]
  119c9c:	e12fff33 	blx	r3

#ifdef RT_USING_NETDEV
    /* rt-thread network interface device set link up status */
    netdev_low_level_set_link_status(netdev_get_by_name(netif->name), RT_TRUE);
  119ca0:	e51b3008 	ldr	r3, [fp, #-8]
  119ca4:	e2833042 	add	r3, r3, #66	; 0x42
  119ca8:	e1a00003 	mov	r0, r3
  119cac:	ebffae10 	bl	1054f4 <netdev_get_by_name>
  119cb0:	e1a03000 	mov	r3, r0
  119cb4:	e3a01001 	mov	r1, #1
  119cb8:	e1a00003 	mov	r0, r3
  119cbc:	ebffb206 	bl	1064dc <netdev_low_level_set_link_status>
#endif /* RT_USING_NETDEV */
  }
}
  119cc0:	e320f000 	nop	{0}
  119cc4:	e24bd004 	sub	sp, fp, #4
  119cc8:	e8bd8800 	pop	{fp, pc}

00119ccc <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif )
{
  119ccc:	e92d4800 	push	{fp, lr}
  119cd0:	e28db004 	add	fp, sp, #4
  119cd4:	e24dd008 	sub	sp, sp, #8
  119cd8:	e50b0008 	str	r0, [fp, #-8]
  if (netif->flags & NETIF_FLAG_LINK_UP) {
  119cdc:	e51b3008 	ldr	r3, [fp, #-8]
  119ce0:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119ce4:	e2033004 	and	r3, r3, #4
  119ce8:	e3530000 	cmp	r3, #0
  119cec:	0a000015 	beq	119d48 <netif_set_link_down+0x7c>
    netif->flags &= ~NETIF_FLAG_LINK_UP;
  119cf0:	e51b3008 	ldr	r3, [fp, #-8]
  119cf4:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119cf8:	e3c33004 	bic	r3, r3, #4
  119cfc:	e6ef2073 	uxtb	r2, r3
  119d00:	e51b3008 	ldr	r3, [fp, #-8]
  119d04:	e5c32041 	strb	r2, [r3, #65]	; 0x41
    NETIF_LINK_CALLBACK(netif);
  119d08:	e51b3008 	ldr	r3, [fp, #-8]
  119d0c:	e5933020 	ldr	r3, [r3, #32]
  119d10:	e3530000 	cmp	r3, #0
  119d14:	0a000003 	beq	119d28 <netif_set_link_down+0x5c>
  119d18:	e51b3008 	ldr	r3, [fp, #-8]
  119d1c:	e5933020 	ldr	r3, [r3, #32]
  119d20:	e51b0008 	ldr	r0, [fp, #-8]
  119d24:	e12fff33 	blx	r3

#ifdef RT_USING_NETDEV
    /* rt-thread network interface device set link down status */
    netdev_low_level_set_link_status(netdev_get_by_name(netif->name), RT_FALSE);
  119d28:	e51b3008 	ldr	r3, [fp, #-8]
  119d2c:	e2833042 	add	r3, r3, #66	; 0x42
  119d30:	e1a00003 	mov	r0, r3
  119d34:	ebffadee 	bl	1054f4 <netdev_get_by_name>
  119d38:	e1a03000 	mov	r3, r0
  119d3c:	e3a01000 	mov	r1, #0
  119d40:	e1a00003 	mov	r0, r3
  119d44:	ebffb1e4 	bl	1064dc <netdev_low_level_set_link_status>
#endif /* RT_USING_NETDEV */
  }
}
  119d48:	e320f000 	nop	{0}
  119d4c:	e24bd004 	sub	sp, fp, #4
  119d50:	e8bd8800 	pop	{fp, pc}

00119d54 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
  119d54:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  119d58:	e28db000 	add	fp, sp, #0
  119d5c:	e24dd00c 	sub	sp, sp, #12
  119d60:	e50b0008 	str	r0, [fp, #-8]
  119d64:	e50b100c 	str	r1, [fp, #-12]
  if (netif) {
  119d68:	e51b3008 	ldr	r3, [fp, #-8]
  119d6c:	e3530000 	cmp	r3, #0
  119d70:	0a000002 	beq	119d80 <netif_set_link_callback+0x2c>
    netif->link_callback = link_callback;
  119d74:	e51b3008 	ldr	r3, [fp, #-8]
  119d78:	e51b200c 	ldr	r2, [fp, #-12]
  119d7c:	e5832020 	str	r2, [r3, #32]
  }
}
  119d80:	e320f000 	nop	{0}
  119d84:	e28bd000 	add	sp, fp, #0
  119d88:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  119d8c:	e12fff1e 	bx	lr

00119d90 <netif_loop_output>:
 * @return ERR_OK if the packet has been sent
 *         ERR_MEM if the pbuf used to copy the packet couldn't be allocated
 */
err_t
netif_loop_output(struct netif *netif, struct pbuf *p)
{
  119d90:	e92d4800 	push	{fp, lr}
  119d94:	e28db004 	add	fp, sp, #4
  119d98:	e24dd018 	sub	sp, sp, #24
  119d9c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  119da0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   * if not they are adjusted for 'netif'. */
#if MIB2_STATS
#if LWIP_HAVE_LOOPIF
  struct netif *stats_if = &loop_netif;
#else /* LWIP_HAVE_LOOPIF */
  struct netif *stats_if = netif;
  119da4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119da8:	e50b300c 	str	r3, [fp, #-12]
#endif /* LWIP_HAVE_LOOPIF */
#endif /* MIB2_STATS */
  SYS_ARCH_DECL_PROTECT(lev);

  /* Allocate a new pbuf */
  r = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
  119dac:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  119db0:	e1d330b8 	ldrh	r3, [r3, #8]
  119db4:	e3a02000 	mov	r2, #0
  119db8:	e1a01003 	mov	r1, r3
  119dbc:	e3a00002 	mov	r0, #2
  119dc0:	eb000133 	bl	11a294 <pbuf_alloc>
  119dc4:	e50b0010 	str	r0, [fp, #-16]
  if (r == NULL) {
  119dc8:	e51b3010 	ldr	r3, [fp, #-16]
  119dcc:	e3530000 	cmp	r3, #0
  119dd0:	1a000016 	bne	119e30 <netif_loop_output+0xa0>
    LINK_STATS_INC(link.memerr);
  119dd4:	e30c3a30 	movw	r3, #51760	; 0xca30
  119dd8:	e3403015 	movt	r3, #21
  119ddc:	e1d330bc 	ldrh	r3, [r3, #12]
  119de0:	e2833001 	add	r3, r3, #1
  119de4:	e6ff2073 	uxth	r2, r3
  119de8:	e30c3a30 	movw	r3, #51760	; 0xca30
  119dec:	e3403015 	movt	r3, #21
  119df0:	e1c320bc 	strh	r2, [r3, #12]
    LINK_STATS_INC(link.drop);
  119df4:	e30c3a30 	movw	r3, #51760	; 0xca30
  119df8:	e3403015 	movt	r3, #21
  119dfc:	e1d330b6 	ldrh	r3, [r3, #6]
  119e00:	e2833001 	add	r3, r3, #1
  119e04:	e6ff2073 	uxth	r2, r3
  119e08:	e30c3a30 	movw	r3, #51760	; 0xca30
  119e0c:	e3403015 	movt	r3, #21
  119e10:	e1c320b6 	strh	r2, [r3, #6]
    MIB2_STATS_NETIF_INC(stats_if, ifoutdiscards);
  119e14:	e51b300c 	ldr	r3, [fp, #-12]
  119e18:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  119e1c:	e2832001 	add	r2, r3, #1
  119e20:	e51b300c 	ldr	r3, [fp, #-12]
  119e24:	e5832074 	str	r2, [r3, #116]	; 0x74
    return ERR_MEM;
  119e28:	e3e03000 	mvn	r3, #0
  119e2c:	ea000063 	b	119fc0 <netif_loop_output+0x230>
  }
  netif->loop_cnt_current += clen;
#endif /* LWIP_LOOPBACK_MAX_PBUFS */

  /* Copy the whole pbuf queue p into the single pbuf r */
  if ((err = pbuf_copy(r, p)) != ERR_OK) {
  119e30:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  119e34:	e51b0010 	ldr	r0, [fp, #-16]
  119e38:	eb000571 	bl	11b404 <pbuf_copy>
  119e3c:	e1a03000 	mov	r3, r0
  119e40:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  119e44:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  119e48:	e3530000 	cmp	r3, #0
  119e4c:	0a000018 	beq	119eb4 <netif_loop_output+0x124>
    pbuf_free(r);
  119e50:	e51b0010 	ldr	r0, [fp, #-16]
  119e54:	eb000415 	bl	11aeb0 <pbuf_free>
    LINK_STATS_INC(link.memerr);
  119e58:	e30c3a30 	movw	r3, #51760	; 0xca30
  119e5c:	e3403015 	movt	r3, #21
  119e60:	e1d330bc 	ldrh	r3, [r3, #12]
  119e64:	e2833001 	add	r3, r3, #1
  119e68:	e6ff2073 	uxth	r2, r3
  119e6c:	e30c3a30 	movw	r3, #51760	; 0xca30
  119e70:	e3403015 	movt	r3, #21
  119e74:	e1c320bc 	strh	r2, [r3, #12]
    LINK_STATS_INC(link.drop);
  119e78:	e30c3a30 	movw	r3, #51760	; 0xca30
  119e7c:	e3403015 	movt	r3, #21
  119e80:	e1d330b6 	ldrh	r3, [r3, #6]
  119e84:	e2833001 	add	r3, r3, #1
  119e88:	e6ff2073 	uxth	r2, r3
  119e8c:	e30c3a30 	movw	r3, #51760	; 0xca30
  119e90:	e3403015 	movt	r3, #21
  119e94:	e1c320b6 	strh	r2, [r3, #6]
    MIB2_STATS_NETIF_INC(stats_if, ifoutdiscards);
  119e98:	e51b300c 	ldr	r3, [fp, #-12]
  119e9c:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  119ea0:	e2832001 	add	r2, r3, #1
  119ea4:	e51b300c 	ldr	r3, [fp, #-12]
  119ea8:	e5832074 	str	r2, [r3, #116]	; 0x74
    return err;
  119eac:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  119eb0:	ea000042 	b	119fc0 <netif_loop_output+0x230>

  /* Put the packet on a linked list which gets emptied through calling
     netif_poll(). */

  /* let last point to the last pbuf in chain r */
  for (last = r; last->next != NULL; last = last->next);
  119eb4:	e51b3010 	ldr	r3, [fp, #-16]
  119eb8:	e50b3008 	str	r3, [fp, #-8]
  119ebc:	ea000002 	b	119ecc <netif_loop_output+0x13c>
  119ec0:	e51b3008 	ldr	r3, [fp, #-8]
  119ec4:	e5933000 	ldr	r3, [r3]
  119ec8:	e50b3008 	str	r3, [fp, #-8]
  119ecc:	e51b3008 	ldr	r3, [fp, #-8]
  119ed0:	e5933000 	ldr	r3, [r3]
  119ed4:	e3530000 	cmp	r3, #0
  119ed8:	1afffff8 	bne	119ec0 <netif_loop_output+0x130>

  SYS_ARCH_PROTECT(lev);
  119edc:	ebffa0d6 	bl	10223c <rt_enter_critical>
  if (netif->loop_first != NULL) {
  119ee0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119ee4:	e5933080 	ldr	r3, [r3, #128]	; 0x80
  119ee8:	e3530000 	cmp	r3, #0
  119eec:	0a000012 	beq	119f3c <netif_loop_output+0x1ac>
    LWIP_ASSERT("if first != NULL, last must also be != NULL", netif->loop_last != NULL);
  119ef0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119ef4:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  119ef8:	e3530000 	cmp	r3, #0
  119efc:	1a000006 	bne	119f1c <netif_loop_output+0x18c>
  119f00:	e3070598 	movw	r0, #30104	; 0x7598
  119f04:	e3400014 	movt	r0, #20
  119f08:	ebffa481 	bl	103114 <rt_kprintf>
  119f0c:	e3001382 	movw	r1, #898	; 0x382
  119f10:	e3070568 	movw	r0, #30056	; 0x7568
  119f14:	e3400014 	movt	r0, #20
  119f18:	ebffc474 	bl	10b0f0 <sys_arch_assert>
    netif->loop_last->next = r;
  119f1c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119f20:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  119f24:	e51b2010 	ldr	r2, [fp, #-16]
  119f28:	e5832000 	str	r2, [r3]
    netif->loop_last = last;
  119f2c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119f30:	e51b2008 	ldr	r2, [fp, #-8]
  119f34:	e5832084 	str	r2, [r3, #132]	; 0x84
  119f38:	ea000005 	b	119f54 <netif_loop_output+0x1c4>
  } else {
    netif->loop_first = r;
  119f3c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119f40:	e51b2010 	ldr	r2, [fp, #-16]
  119f44:	e5832080 	str	r2, [r3, #128]	; 0x80
    netif->loop_last = last;
  119f48:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119f4c:	e51b2008 	ldr	r2, [fp, #-8]
  119f50:	e5832084 	str	r2, [r3, #132]	; 0x84
  }
  SYS_ARCH_UNPROTECT(lev);
  119f54:	ebffa0be 	bl	102254 <rt_exit_critical>

  LINK_STATS_INC(link.xmit);
  119f58:	e30c3a30 	movw	r3, #51760	; 0xca30
  119f5c:	e3403015 	movt	r3, #21
  119f60:	e1d330b0 	ldrh	r3, [r3]
  119f64:	e2833001 	add	r3, r3, #1
  119f68:	e6ff2073 	uxth	r2, r3
  119f6c:	e30c3a30 	movw	r3, #51760	; 0xca30
  119f70:	e3403015 	movt	r3, #21
  119f74:	e1c320b0 	strh	r2, [r3]
  MIB2_STATS_NETIF_ADD(stats_if, ifoutoctets, p->tot_len);
  119f78:	e51b300c 	ldr	r3, [fp, #-12]
  119f7c:	e5933068 	ldr	r3, [r3, #104]	; 0x68
  119f80:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  119f84:	e1d220b8 	ldrh	r2, [r2, #8]
  119f88:	e0832002 	add	r2, r3, r2
  119f8c:	e51b300c 	ldr	r3, [fp, #-12]
  119f90:	e5832068 	str	r2, [r3, #104]	; 0x68
  MIB2_STATS_NETIF_INC(stats_if, ifoutucastpkts);
  119f94:	e51b300c 	ldr	r3, [fp, #-12]
  119f98:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  119f9c:	e2832001 	add	r2, r3, #1
  119fa0:	e51b300c 	ldr	r3, [fp, #-12]
  119fa4:	e583206c 	str	r2, [r3, #108]	; 0x6c

#if LWIP_NETIF_LOOPBACK_MULTITHREADING
  /* For multithreading environment, schedule a call to netif_poll */
  tcpip_callback_with_block((tcpip_callback_fn)netif_poll, netif, 0);
  119fa8:	e3a02000 	mov	r2, #0
  119fac:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  119fb0:	e3090fcc 	movw	r0, #40908	; 0x9fcc
  119fb4:	e3400011 	movt	r0, #17
  119fb8:	ebfff084 	bl	1161d0 <tcpip_callback_with_block>
#endif /* LWIP_NETIF_LOOPBACK_MULTITHREADING */

  return ERR_OK;
  119fbc:	e3a03000 	mov	r3, #0
}
  119fc0:	e1a00003 	mov	r0, r3
  119fc4:	e24bd004 	sub	sp, fp, #4
  119fc8:	e8bd8800 	pop	{fp, pc}

00119fcc <netif_poll>:
 * netif_loop_output() are put on a list that is passed to netif->input() by
 * netif_poll().
 */
void
netif_poll(struct netif *netif)
{
  119fcc:	e92d4800 	push	{fp, lr}
  119fd0:	e28db004 	add	fp, sp, #4
  119fd4:	e24dd018 	sub	sp, sp, #24
  119fd8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   * if not they are adjusted for 'netif'. */
#if MIB2_STATS
#if LWIP_HAVE_LOOPIF
  struct netif *stats_if = &loop_netif;
#else /* LWIP_HAVE_LOOPIF */
  struct netif *stats_if = netif;
  119fdc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119fe0:	e50b300c 	str	r3, [fp, #-12]
#endif /* LWIP_HAVE_LOOPIF */
#endif /* MIB2_STATS */
  SYS_ARCH_DECL_PROTECT(lev);

  /* Get a packet from the list. With SYS_LIGHTWEIGHT_PROT=1, this is protected */
  SYS_ARCH_PROTECT(lev);
  119fe4:	ebffa094 	bl	10223c <rt_enter_critical>
  while (netif->loop_first != NULL) {
  119fe8:	ea000056 	b	11a148 <netif_poll+0x17c>
    struct pbuf *in, *in_end;
#if LWIP_LOOPBACK_MAX_PBUFS
    u8_t clen = 1;
#endif /* LWIP_LOOPBACK_MAX_PBUFS */

    in = in_end = netif->loop_first;
  119fec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119ff0:	e5933080 	ldr	r3, [r3, #128]	; 0x80
  119ff4:	e50b3008 	str	r3, [fp, #-8]
  119ff8:	e51b3008 	ldr	r3, [fp, #-8]
  119ffc:	e50b3010 	str	r3, [fp, #-16]
    while (in_end->len != in_end->tot_len) {
  11a000:	ea00000d 	b	11a03c <netif_poll+0x70>
      LWIP_ASSERT("bogus pbuf: len != tot_len but next == NULL!", in_end->next != NULL);
  11a004:	e51b3008 	ldr	r3, [fp, #-8]
  11a008:	e5933000 	ldr	r3, [r3]
  11a00c:	e3530000 	cmp	r3, #0
  11a010:	1a000006 	bne	11a030 <netif_poll+0x64>
  11a014:	e30705c4 	movw	r0, #30148	; 0x75c4
  11a018:	e3400014 	movt	r0, #20
  11a01c:	ebffa43c 	bl	103114 <rt_kprintf>
  11a020:	e30013ca 	movw	r1, #970	; 0x3ca
  11a024:	e3070568 	movw	r0, #30056	; 0x7568
  11a028:	e3400014 	movt	r0, #20
  11a02c:	ebffc42f 	bl	10b0f0 <sys_arch_assert>
      in_end = in_end->next;
  11a030:	e51b3008 	ldr	r3, [fp, #-8]
  11a034:	e5933000 	ldr	r3, [r3]
  11a038:	e50b3008 	str	r3, [fp, #-8]
    while (in_end->len != in_end->tot_len) {
  11a03c:	e51b3008 	ldr	r3, [fp, #-8]
  11a040:	e1d320ba 	ldrh	r2, [r3, #10]
  11a044:	e51b3008 	ldr	r3, [fp, #-8]
  11a048:	e1d330b8 	ldrh	r3, [r3, #8]
  11a04c:	e1520003 	cmp	r2, r3
  11a050:	1affffeb 	bne	11a004 <netif_poll+0x38>
      ((netif->loop_cnt_current - clen) < netif->loop_cnt_current));
    netif->loop_cnt_current -= clen;
#endif /* LWIP_LOOPBACK_MAX_PBUFS */

    /* 'in_end' now points to the last pbuf from 'in' */
    if (in_end == netif->loop_last) {
  11a054:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a058:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  11a05c:	e51b2008 	ldr	r2, [fp, #-8]
  11a060:	e1520003 	cmp	r2, r3
  11a064:	1a000007 	bne	11a088 <netif_poll+0xbc>
      /* this was the last pbuf in the list */
      netif->loop_first = netif->loop_last = NULL;
  11a068:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a06c:	e3a02000 	mov	r2, #0
  11a070:	e5832084 	str	r2, [r3, #132]	; 0x84
  11a074:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a078:	e5932084 	ldr	r2, [r3, #132]	; 0x84
  11a07c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a080:	e5832080 	str	r2, [r3, #128]	; 0x80
  11a084:	ea00000e 	b	11a0c4 <netif_poll+0xf8>
    } else {
      /* pop the pbuf off the list */
      netif->loop_first = in_end->next;
  11a088:	e51b3008 	ldr	r3, [fp, #-8]
  11a08c:	e5932000 	ldr	r2, [r3]
  11a090:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a094:	e5832080 	str	r2, [r3, #128]	; 0x80
      LWIP_ASSERT("should not be null since first != last!", netif->loop_first != NULL);
  11a098:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a09c:	e5933080 	ldr	r3, [r3, #128]	; 0x80
  11a0a0:	e3530000 	cmp	r3, #0
  11a0a4:	1a000006 	bne	11a0c4 <netif_poll+0xf8>
  11a0a8:	e30705f4 	movw	r0, #30196	; 0x75f4
  11a0ac:	e3400014 	movt	r0, #20
  11a0b0:	ebffa417 	bl	103114 <rt_kprintf>
  11a0b4:	e30013de 	movw	r1, #990	; 0x3de
  11a0b8:	e3070568 	movw	r0, #30056	; 0x7568
  11a0bc:	e3400014 	movt	r0, #20
  11a0c0:	ebffc40a 	bl	10b0f0 <sys_arch_assert>
    }
    /* De-queue the pbuf from its successors on the 'loop_' list. */
    in_end->next = NULL;
  11a0c4:	e51b3008 	ldr	r3, [fp, #-8]
  11a0c8:	e3a02000 	mov	r2, #0
  11a0cc:	e5832000 	str	r2, [r3]
    SYS_ARCH_UNPROTECT(lev);
  11a0d0:	ebffa05f 	bl	102254 <rt_exit_critical>

    LINK_STATS_INC(link.recv);
  11a0d4:	e30c3a30 	movw	r3, #51760	; 0xca30
  11a0d8:	e3403015 	movt	r3, #21
  11a0dc:	e1d330b2 	ldrh	r3, [r3, #2]
  11a0e0:	e2833001 	add	r3, r3, #1
  11a0e4:	e6ff2073 	uxth	r2, r3
  11a0e8:	e30c3a30 	movw	r3, #51760	; 0xca30
  11a0ec:	e3403015 	movt	r3, #21
  11a0f0:	e1c320b2 	strh	r2, [r3, #2]
    MIB2_STATS_NETIF_ADD(stats_if, ifinoctets, in->tot_len);
  11a0f4:	e51b300c 	ldr	r3, [fp, #-12]
  11a0f8:	e5933050 	ldr	r3, [r3, #80]	; 0x50
  11a0fc:	e51b2010 	ldr	r2, [fp, #-16]
  11a100:	e1d220b8 	ldrh	r2, [r2, #8]
  11a104:	e0832002 	add	r2, r3, r2
  11a108:	e51b300c 	ldr	r3, [fp, #-12]
  11a10c:	e5832050 	str	r2, [r3, #80]	; 0x50
    MIB2_STATS_NETIF_INC(stats_if, ifinucastpkts);
  11a110:	e51b300c 	ldr	r3, [fp, #-12]
  11a114:	e5933054 	ldr	r3, [r3, #84]	; 0x54
  11a118:	e2832001 	add	r2, r3, #1
  11a11c:	e51b300c 	ldr	r3, [fp, #-12]
  11a120:	e5832054 	str	r2, [r3, #84]	; 0x54
    /* loopback packets are always IP packets! */
    if (ip_input(in, netif) != ERR_OK) {
  11a124:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11a128:	e51b0010 	ldr	r0, [fp, #-16]
  11a12c:	eb005cc0 	bl	131434 <ip4_input>
  11a130:	e1a03000 	mov	r3, r0
  11a134:	e3530000 	cmp	r3, #0
  11a138:	0a000001 	beq	11a144 <netif_poll+0x178>
      pbuf_free(in);
  11a13c:	e51b0010 	ldr	r0, [fp, #-16]
  11a140:	eb00035a 	bl	11aeb0 <pbuf_free>
    }
    SYS_ARCH_PROTECT(lev);
  11a144:	ebffa03c 	bl	10223c <rt_enter_critical>
  while (netif->loop_first != NULL) {
  11a148:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a14c:	e5933080 	ldr	r3, [r3, #128]	; 0x80
  11a150:	e3530000 	cmp	r3, #0
  11a154:	1affffa4 	bne	119fec <netif_poll+0x20>
  }
  SYS_ARCH_UNPROTECT(lev);
  11a158:	ebffa03d 	bl	102254 <rt_exit_critical>
}
  11a15c:	e320f000 	nop	{0}
  11a160:	e24bd004 	sub	sp, fp, #4
  11a164:	e8bd8800 	pop	{fp, pc}

0011a168 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
  11a168:	e92d4800 	push	{fp, lr}
  11a16c:	e28db004 	add	fp, sp, #4
  11a170:	e24dd008 	sub	sp, sp, #8
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
  11a174:	ebffa030 	bl	10223c <rt_enter_critical>
  11a178:	e30c3a2c 	movw	r3, #51756	; 0xca2c
  11a17c:	e3403015 	movt	r3, #21
  11a180:	e3a02000 	mov	r2, #0
  11a184:	e5c32000 	strb	r2, [r3]
  11a188:	ebffa031 	bl	102254 <rt_exit_critical>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
  11a18c:	e30c3c20 	movw	r3, #52256	; 0xcc20
  11a190:	e3403015 	movt	r3, #21
  11a194:	e5933000 	ldr	r3, [r3]
  11a198:	e50b3008 	str	r3, [fp, #-8]
  11a19c:	ea00000e 	b	11a1dc <pbuf_free_ooseq+0x74>
    if (NULL != pcb->ooseq) {
  11a1a0:	e51b3008 	ldr	r3, [fp, #-8]
  11a1a4:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  11a1a8:	e3530000 	cmp	r3, #0
  11a1ac:	0a000007 	beq	11a1d0 <pbuf_free_ooseq+0x68>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
  11a1b0:	e51b3008 	ldr	r3, [fp, #-8]
  11a1b4:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  11a1b8:	e1a00003 	mov	r0, r3
  11a1bc:	eb00149d 	bl	11f438 <tcp_segs_free>
      pcb->ooseq = NULL;
  11a1c0:	e51b3008 	ldr	r3, [fp, #-8]
  11a1c4:	e3a02000 	mov	r2, #0
  11a1c8:	e5832074 	str	r2, [r3, #116]	; 0x74
      return;
  11a1cc:	ea000005 	b	11a1e8 <pbuf_free_ooseq+0x80>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
  11a1d0:	e51b3008 	ldr	r3, [fp, #-8]
  11a1d4:	e593300c 	ldr	r3, [r3, #12]
  11a1d8:	e50b3008 	str	r3, [fp, #-8]
  11a1dc:	e51b3008 	ldr	r3, [fp, #-8]
  11a1e0:	e3530000 	cmp	r3, #0
  11a1e4:	1affffed 	bne	11a1a0 <pbuf_free_ooseq+0x38>
    }
  }
}
  11a1e8:	e24bd004 	sub	sp, fp, #4
  11a1ec:	e8bd8800 	pop	{fp, pc}

0011a1f0 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
  11a1f0:	e92d4800 	push	{fp, lr}
  11a1f4:	e28db004 	add	fp, sp, #4
  11a1f8:	e24dd008 	sub	sp, sp, #8
  11a1fc:	e50b0008 	str	r0, [fp, #-8]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
  11a200:	ebffffd8 	bl	11a168 <pbuf_free_ooseq>
}
  11a204:	e320f000 	nop	{0}
  11a208:	e24bd004 	sub	sp, fp, #4
  11a20c:	e8bd8800 	pop	{fp, pc}

0011a210 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
  11a210:	e92d4800 	push	{fp, lr}
  11a214:	e28db004 	add	fp, sp, #4
  11a218:	e24dd008 	sub	sp, sp, #8
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
  11a21c:	ebffa006 	bl	10223c <rt_enter_critical>
  queued = pbuf_free_ooseq_pending;
  11a220:	e30c3a2c 	movw	r3, #51756	; 0xca2c
  11a224:	e3403015 	movt	r3, #21
  11a228:	e5d33000 	ldrb	r3, [r3]
  11a22c:	e54b3005 	strb	r3, [fp, #-5]
  pbuf_free_ooseq_pending = 1;
  11a230:	e30c3a2c 	movw	r3, #51756	; 0xca2c
  11a234:	e3403015 	movt	r3, #21
  11a238:	e3a02001 	mov	r2, #1
  11a23c:	e5c32000 	strb	r2, [r3]
  SYS_ARCH_UNPROTECT(old_level);
  11a240:	ebffa003 	bl	102254 <rt_exit_critical>

  if (!queued) {
  11a244:	e55b3005 	ldrb	r3, [fp, #-5]
  11a248:	e3530000 	cmp	r3, #0
  11a24c:	1a00000d 	bne	11a288 <pbuf_pool_is_empty+0x78>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  11a250:	e3a02000 	mov	r2, #0
  11a254:	e3a01000 	mov	r1, #0
  11a258:	e30a01f0 	movw	r0, #41456	; 0xa1f0
  11a25c:	e3400011 	movt	r0, #17
  11a260:	ebffefda 	bl	1161d0 <tcpip_callback_with_block>
  11a264:	e1a03000 	mov	r3, r0
  11a268:	e3530000 	cmp	r3, #0
  11a26c:	0a000005 	beq	11a288 <pbuf_pool_is_empty+0x78>
  11a270:	ebff9ff1 	bl	10223c <rt_enter_critical>
  11a274:	e30c3a2c 	movw	r3, #51756	; 0xca2c
  11a278:	e3403015 	movt	r3, #21
  11a27c:	e3a02000 	mov	r2, #0
  11a280:	e5c32000 	strb	r2, [r3]
  11a284:	ebff9ff2 	bl	102254 <rt_exit_critical>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
  11a288:	e320f000 	nop	{0}
  11a28c:	e24bd004 	sub	sp, fp, #4
  11a290:	e8bd8800 	pop	{fp, pc}

0011a294 <pbuf_alloc>:
 * is the first pbuf of a pbuf chain.
 */
#include <stdio.h>
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
  11a294:	e92d4800 	push	{fp, lr}
  11a298:	e28db004 	add	fp, sp, #4
  11a29c:	e24dd028 	sub	sp, sp, #40	; 0x28
  11a2a0:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  11a2a4:	e1a03001 	mov	r3, r1
  11a2a8:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  11a2ac:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
  11a2b0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11a2b4:	e3530004 	cmp	r3, #4
  11a2b8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  11a2bc:	ea000013 	b	11a310 <pbuf_alloc+0x7c>
  11a2c0:	0011a2d4 	.word	0x0011a2d4
  11a2c4:	0011a2e0 	.word	0x0011a2e0
  11a2c8:	0011a2ec 	.word	0x0011a2ec
  11a2cc:	0011a2f8 	.word	0x0011a2f8
  11a2d0:	0011a304 	.word	0x0011a304
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
  11a2d4:	e3a03038 	mov	r3, #56	; 0x38
  11a2d8:	e14b30be 	strh	r3, [fp, #-14]
    break;
  11a2dc:	ea000014 	b	11a334 <pbuf_alloc+0xa0>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
  11a2e0:	e3a03024 	mov	r3, #36	; 0x24
  11a2e4:	e14b30be 	strh	r3, [fp, #-14]
    break;
  11a2e8:	ea000011 	b	11a334 <pbuf_alloc+0xa0>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
  11a2ec:	e3a03010 	mov	r3, #16
  11a2f0:	e14b30be 	strh	r3, [fp, #-14]
    break;
  11a2f4:	ea00000e 	b	11a334 <pbuf_alloc+0xa0>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
  11a2f8:	e3a03000 	mov	r3, #0
  11a2fc:	e14b30be 	strh	r3, [fp, #-14]
    break;
  11a300:	ea00000b 	b	11a334 <pbuf_alloc+0xa0>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
  11a304:	e3a03000 	mov	r3, #0
  11a308:	e14b30be 	strh	r3, [fp, #-14]
    break;
  11a30c:	ea000008 	b	11a334 <pbuf_alloc+0xa0>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
  11a310:	e307061c 	movw	r0, #30236	; 0x761c
  11a314:	e3400014 	movt	r0, #20
  11a318:	ebffa37d 	bl	103114 <rt_kprintf>
  11a31c:	e3001117 	movw	r1, #279	; 0x117
  11a320:	e3070638 	movw	r0, #30264	; 0x7638
  11a324:	e3400014 	movt	r0, #20
  11a328:	ebffc370 	bl	10b0f0 <sys_arch_assert>
    return NULL;
  11a32c:	e3a03000 	mov	r3, #0
  11a330:	ea000139 	b	11a81c <pbuf_alloc+0x588>
  }

  switch (type) {
  11a334:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11a338:	e3530003 	cmp	r3, #3
  11a33c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  11a340:	ea000124 	b	11a7d8 <pbuf_alloc+0x544>
  11a344:	0011a660 	.word	0x0011a660
  11a348:	0011a764 	.word	0x0011a764
  11a34c:	0011a764 	.word	0x0011a764
  11a350:	0011a354 	.word	0x0011a354
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
  11a354:	e300211e 	movw	r2, #286	; 0x11e
  11a358:	e3071638 	movw	r1, #30264	; 0x7638
  11a35c:	e3401014 	movt	r1, #20
  11a360:	e3a00010 	mov	r0, #16
  11a364:	ebfffb5b 	bl	1190d8 <memp_malloc_fn>
  11a368:	e50b0008 	str	r0, [fp, #-8]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
  11a36c:	e51b3008 	ldr	r3, [fp, #-8]
  11a370:	e3530000 	cmp	r3, #0
  11a374:	1a000002 	bne	11a384 <pbuf_alloc+0xf0>
      PBUF_POOL_IS_EMPTY();
  11a378:	ebffffa4 	bl	11a210 <pbuf_pool_is_empty>
      return NULL;
  11a37c:	e3a03000 	mov	r3, #0
  11a380:	ea000125 	b	11a81c <pbuf_alloc+0x588>
    }
    p->type = type;
  11a384:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11a388:	e6ef2073 	uxtb	r2, r3
  11a38c:	e51b3008 	ldr	r3, [fp, #-8]
  11a390:	e5c3200c 	strb	r2, [r3, #12]
    p->next = NULL;
  11a394:	e51b3008 	ldr	r3, [fp, #-8]
  11a398:	e3a02000 	mov	r2, #0
  11a39c:	e5832000 	str	r2, [r3]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
  11a3a0:	e15b30be 	ldrh	r3, [fp, #-14]
  11a3a4:	e2833010 	add	r3, r3, #16
  11a3a8:	e51b2008 	ldr	r2, [fp, #-8]
  11a3ac:	e0823003 	add	r3, r2, r3
  11a3b0:	e2833003 	add	r3, r3, #3
  11a3b4:	e3c33003 	bic	r3, r3, #3
  11a3b8:	e1a02003 	mov	r2, r3
  11a3bc:	e51b3008 	ldr	r3, [fp, #-8]
  11a3c0:	e5832004 	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
  11a3c4:	e51b3008 	ldr	r3, [fp, #-8]
  11a3c8:	e5933004 	ldr	r3, [r3, #4]
  11a3cc:	e2033003 	and	r3, r3, #3
  11a3d0:	e3530000 	cmp	r3, #0
  11a3d4:	0a000006 	beq	11a3f4 <pbuf_alloc+0x160>
  11a3d8:	e3070664 	movw	r0, #30308	; 0x7664
  11a3dc:	e3400014 	movt	r0, #20
  11a3e0:	ebffa34b 	bl	103114 <rt_kprintf>
  11a3e4:	e300112a 	movw	r1, #298	; 0x12a
  11a3e8:	e3070638 	movw	r0, #30264	; 0x7638
  11a3ec:	e3400014 	movt	r0, #20
  11a3f0:	ebffc33e 	bl	10b0f0 <sys_arch_assert>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
  11a3f4:	e51b3008 	ldr	r3, [fp, #-8]
  11a3f8:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  11a3fc:	e1c320b8 	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
  11a400:	e15b30be 	ldrh	r3, [fp, #-14]
  11a404:	e2833003 	add	r3, r3, #3
  11a408:	e3c33003 	bic	r3, r3, #3
  11a40c:	e2633e5e 	rsb	r3, r3, #1504	; 0x5e0
  11a410:	e283300c 	add	r3, r3, #12
  11a414:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  11a418:	e1530002 	cmp	r3, r2
  11a41c:	31a03003 	movcc	r3, r3
  11a420:	21a03002 	movcs	r3, r2
  11a424:	e6ff2073 	uxth	r2, r3
  11a428:	e51b3008 	ldr	r3, [fp, #-8]
  11a42c:	e1c320ba 	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
  11a430:	e51b3008 	ldr	r3, [fp, #-8]
  11a434:	e5933004 	ldr	r3, [r3, #4]
  11a438:	e51b2008 	ldr	r2, [fp, #-8]
  11a43c:	e1d220ba 	ldrh	r2, [r2, #10]
  11a440:	e0832002 	add	r2, r3, r2
  11a444:	e51b3008 	ldr	r3, [fp, #-8]
  11a448:	e2833e5f 	add	r3, r3, #1520	; 0x5f0
  11a44c:	e283300c 	add	r3, r3, #12
  11a450:	e1520003 	cmp	r2, r3
  11a454:	9a000006 	bls	11a474 <pbuf_alloc+0x1e0>
  11a458:	e3070694 	movw	r0, #30356	; 0x7694
  11a45c:	e3400014 	movt	r0, #20
  11a460:	ebffa32b 	bl	103114 <rt_kprintf>
  11a464:	e3001131 	movw	r1, #305	; 0x131
  11a468:	e3070638 	movw	r0, #30264	; 0x7638
  11a46c:	e3400014 	movt	r0, #20
  11a470:	ebffc31e 	bl	10b0f0 <sys_arch_assert>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
  11a474:	e15b30be 	ldrh	r3, [fp, #-14]
  11a478:	e2833003 	add	r3, r3, #3
  11a47c:	e3c33003 	bic	r3, r3, #3
  11a480:	e30025ec 	movw	r2, #1516	; 0x5ec
  11a484:	e1530002 	cmp	r3, r2
  11a488:	1a000006 	bne	11a4a8 <pbuf_alloc+0x214>
  11a48c:	e30706c8 	movw	r0, #30408	; 0x76c8
  11a490:	e3400014 	movt	r0, #20
  11a494:	ebffa31e 	bl	103114 <rt_kprintf>
  11a498:	e3001133 	movw	r1, #307	; 0x133
  11a49c:	e3070638 	movw	r0, #30264	; 0x7638
  11a4a0:	e3400014 	movt	r0, #20
  11a4a4:	ebffc311 	bl	10b0f0 <sys_arch_assert>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
  11a4a8:	e51b3008 	ldr	r3, [fp, #-8]
  11a4ac:	e3a02001 	mov	r2, #1
  11a4b0:	e1c320be 	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
  11a4b4:	e51b3008 	ldr	r3, [fp, #-8]
  11a4b8:	e50b300c 	str	r3, [fp, #-12]
    /* remaining length to be allocated */
    rem_len = length - p->len;
  11a4bc:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  11a4c0:	e51b2008 	ldr	r2, [fp, #-8]
  11a4c4:	e1d220ba 	ldrh	r2, [r2, #10]
  11a4c8:	e0433002 	sub	r3, r3, r2
  11a4cc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
  11a4d0:	ea00005e 	b	11a650 <pbuf_alloc+0x3bc>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
  11a4d4:	e300213f 	movw	r2, #319	; 0x13f
  11a4d8:	e3071638 	movw	r1, #30264	; 0x7638
  11a4dc:	e3401014 	movt	r1, #20
  11a4e0:	e3a00010 	mov	r0, #16
  11a4e4:	ebfffafb 	bl	1190d8 <memp_malloc_fn>
  11a4e8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
      if (q == NULL) {
  11a4ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a4f0:	e3530000 	cmp	r3, #0
  11a4f4:	1a000004 	bne	11a50c <pbuf_alloc+0x278>
        PBUF_POOL_IS_EMPTY();
  11a4f8:	ebffff44 	bl	11a210 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
  11a4fc:	e51b0008 	ldr	r0, [fp, #-8]
  11a500:	eb00026a 	bl	11aeb0 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
  11a504:	e3a03000 	mov	r3, #0
  11a508:	ea0000c3 	b	11a81c <pbuf_alloc+0x588>
      }
      q->type = type;
  11a50c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11a510:	e6ef2073 	uxtb	r2, r3
  11a514:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a518:	e5c3200c 	strb	r2, [r3, #12]
      q->flags = 0;
  11a51c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a520:	e3a02000 	mov	r2, #0
  11a524:	e5c3200d 	strb	r2, [r3, #13]
      q->next = NULL;
  11a528:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a52c:	e3a02000 	mov	r2, #0
  11a530:	e5832000 	str	r2, [r3]
      /* make previous pbuf point to this pbuf */
      r->next = q;
  11a534:	e51b300c 	ldr	r3, [fp, #-12]
  11a538:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11a53c:	e5832000 	str	r2, [r3]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
  11a540:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11a544:	e30f2ffe 	movw	r2, #65534	; 0xfffe
  11a548:	e1530002 	cmp	r3, r2
  11a54c:	da000006 	ble	11a56c <pbuf_alloc+0x2d8>
  11a550:	e30706fc 	movw	r0, #30460	; 0x76fc
  11a554:	e3400014 	movt	r0, #20
  11a558:	ebffa2ed 	bl	103114 <rt_kprintf>
  11a55c:	e300114d 	movw	r1, #333	; 0x14d
  11a560:	e3070638 	movw	r0, #30264	; 0x7638
  11a564:	e3400014 	movt	r0, #20
  11a568:	ebffc2e0 	bl	10b0f0 <sys_arch_assert>
      q->tot_len = (u16_t)rem_len;
  11a56c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11a570:	e6ff2073 	uxth	r2, r3
  11a574:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a578:	e1c320b8 	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
  11a57c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11a580:	e6ff3073 	uxth	r3, r3
  11a584:	e30025ec 	movw	r2, #1516	; 0x5ec
  11a588:	e1530002 	cmp	r3, r2
  11a58c:	31a03003 	movcc	r3, r3
  11a590:	21a03002 	movcs	r3, r2
  11a594:	e6ff2073 	uxth	r2, r3
  11a598:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a59c:	e1c320ba 	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
  11a5a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a5a4:	e2832010 	add	r2, r3, #16
  11a5a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a5ac:	e5832004 	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
  11a5b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a5b4:	e5933004 	ldr	r3, [r3, #4]
  11a5b8:	e2033003 	and	r3, r3, #3
  11a5bc:	e3530000 	cmp	r3, #0
  11a5c0:	0a000006 	beq	11a5e0 <pbuf_alloc+0x34c>
  11a5c4:	e3070710 	movw	r0, #30480	; 0x7710
  11a5c8:	e3400014 	movt	r0, #20
  11a5cc:	ebffa2d0 	bl	103114 <rt_kprintf>
  11a5d0:	e3001153 	movw	r1, #339	; 0x153
  11a5d4:	e3070638 	movw	r0, #30264	; 0x7638
  11a5d8:	e3400014 	movt	r0, #20
  11a5dc:	ebffc2c3 	bl	10b0f0 <sys_arch_assert>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
  11a5e0:	e51b3008 	ldr	r3, [fp, #-8]
  11a5e4:	e5933004 	ldr	r3, [r3, #4]
  11a5e8:	e51b2008 	ldr	r2, [fp, #-8]
  11a5ec:	e1d220ba 	ldrh	r2, [r2, #10]
  11a5f0:	e0832002 	add	r2, r3, r2
  11a5f4:	e51b3008 	ldr	r3, [fp, #-8]
  11a5f8:	e2833e5f 	add	r3, r3, #1520	; 0x5f0
  11a5fc:	e283300c 	add	r3, r3, #12
  11a600:	e1520003 	cmp	r2, r3
  11a604:	9a000006 	bls	11a624 <pbuf_alloc+0x390>
  11a608:	e3070694 	movw	r0, #30356	; 0x7694
  11a60c:	e3400014 	movt	r0, #20
  11a610:	ebffa2bf 	bl	103114 <rt_kprintf>
  11a614:	e3001156 	movw	r1, #342	; 0x156
  11a618:	e3070638 	movw	r0, #30264	; 0x7638
  11a61c:	e3400014 	movt	r0, #20
  11a620:	ebffc2b2 	bl	10b0f0 <sys_arch_assert>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
  11a624:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a628:	e3a02001 	mov	r2, #1
  11a62c:	e1c320be 	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
  11a630:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a634:	e1d330ba 	ldrh	r3, [r3, #10]
  11a638:	e1a02003 	mov	r2, r3
  11a63c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11a640:	e0433002 	sub	r3, r3, r2
  11a644:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      /* remember this pbuf for linkage in next iteration */
      r = q;
  11a648:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a64c:	e50b300c 	str	r3, [fp, #-12]
    while (rem_len > 0) {
  11a650:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11a654:	e3530000 	cmp	r3, #0
  11a658:	caffff9d 	bgt	11a4d4 <pbuf_alloc+0x240>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
  11a65c:	ea000067 	b	11a800 <pbuf_alloc+0x56c>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
  11a660:	e15b30be 	ldrh	r3, [fp, #-14]
  11a664:	e2833013 	add	r3, r3, #19
  11a668:	e6ff3073 	uxth	r3, r3
  11a66c:	e3c33003 	bic	r3, r3, #3
  11a670:	e6ff2073 	uxth	r2, r3
  11a674:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  11a678:	e2833003 	add	r3, r3, #3
  11a67c:	e6ff3073 	uxth	r3, r3
  11a680:	e3c33003 	bic	r3, r3, #3
  11a684:	e6ff3073 	uxth	r3, r3
  11a688:	e0823003 	add	r3, r2, r3
  11a68c:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
  11a690:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
  11a694:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  11a698:	e2833003 	add	r3, r3, #3
  11a69c:	e3c33003 	bic	r3, r3, #3
  11a6a0:	e1520003 	cmp	r2, r3
  11a6a4:	2a000001 	bcs	11a6b0 <pbuf_alloc+0x41c>
        return NULL;
  11a6a8:	e3a03000 	mov	r3, #0
  11a6ac:	ea00005a 	b	11a81c <pbuf_alloc+0x588>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
  11a6b0:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  11a6b4:	e1a00003 	mov	r0, r3
  11a6b8:	ebffc2cd 	bl	10b1f4 <mem_malloc>
  11a6bc:	e50b0008 	str	r0, [fp, #-8]
    }

    if (p == NULL) {
  11a6c0:	e51b3008 	ldr	r3, [fp, #-8]
  11a6c4:	e3530000 	cmp	r3, #0
  11a6c8:	1a000001 	bne	11a6d4 <pbuf_alloc+0x440>
      return NULL;
  11a6cc:	e3a03000 	mov	r3, #0
  11a6d0:	ea000051 	b	11a81c <pbuf_alloc+0x588>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
  11a6d4:	e15b30be 	ldrh	r3, [fp, #-14]
  11a6d8:	e2833010 	add	r3, r3, #16
  11a6dc:	e51b2008 	ldr	r2, [fp, #-8]
  11a6e0:	e0823003 	add	r3, r2, r3
  11a6e4:	e2833003 	add	r3, r3, #3
  11a6e8:	e3c33003 	bic	r3, r3, #3
  11a6ec:	e1a02003 	mov	r2, r3
  11a6f0:	e51b3008 	ldr	r3, [fp, #-8]
  11a6f4:	e5832004 	str	r2, [r3, #4]
    p->len = p->tot_len = length;
  11a6f8:	e51b3008 	ldr	r3, [fp, #-8]
  11a6fc:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  11a700:	e1c320b8 	strh	r2, [r3, #8]
  11a704:	e51b3008 	ldr	r3, [fp, #-8]
  11a708:	e1d320b8 	ldrh	r2, [r3, #8]
  11a70c:	e51b3008 	ldr	r3, [fp, #-8]
  11a710:	e1c320ba 	strh	r2, [r3, #10]
    p->next = NULL;
  11a714:	e51b3008 	ldr	r3, [fp, #-8]
  11a718:	e3a02000 	mov	r2, #0
  11a71c:	e5832000 	str	r2, [r3]
    p->type = type;
  11a720:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11a724:	e6ef2073 	uxtb	r2, r3
  11a728:	e51b3008 	ldr	r3, [fp, #-8]
  11a72c:	e5c3200c 	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
  11a730:	e51b3008 	ldr	r3, [fp, #-8]
  11a734:	e5933004 	ldr	r3, [r3, #4]
  11a738:	e2033003 	and	r3, r3, #3
  11a73c:	e3530000 	cmp	r3, #0
  11a740:	0a00002d 	beq	11a7fc <pbuf_alloc+0x568>
  11a744:	e3070740 	movw	r0, #30528	; 0x7740
  11a748:	e3400014 	movt	r0, #20
  11a74c:	ebffa270 	bl	103114 <rt_kprintf>
  11a750:	e3a01f5e 	mov	r1, #376	; 0x178
  11a754:	e3070638 	movw	r0, #30264	; 0x7638
  11a758:	e3400014 	movt	r0, #20
  11a75c:	ebffc263 	bl	10b0f0 <sys_arch_assert>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
  11a760:	ea000025 	b	11a7fc <pbuf_alloc+0x568>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
  11a764:	e300217f 	movw	r2, #383	; 0x17f
  11a768:	e3071638 	movw	r1, #30264	; 0x7638
  11a76c:	e3401014 	movt	r1, #20
  11a770:	e3a0000f 	mov	r0, #15
  11a774:	ebfffa57 	bl	1190d8 <memp_malloc_fn>
  11a778:	e50b0008 	str	r0, [fp, #-8]
    if (p == NULL) {
  11a77c:	e51b3008 	ldr	r3, [fp, #-8]
  11a780:	e3530000 	cmp	r3, #0
  11a784:	1a000001 	bne	11a790 <pbuf_alloc+0x4fc>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
  11a788:	e3a03000 	mov	r3, #0
  11a78c:	ea000022 	b	11a81c <pbuf_alloc+0x588>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
  11a790:	e51b3008 	ldr	r3, [fp, #-8]
  11a794:	e3a02000 	mov	r2, #0
  11a798:	e5832004 	str	r2, [r3, #4]
    p->len = p->tot_len = length;
  11a79c:	e51b3008 	ldr	r3, [fp, #-8]
  11a7a0:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  11a7a4:	e1c320b8 	strh	r2, [r3, #8]
  11a7a8:	e51b3008 	ldr	r3, [fp, #-8]
  11a7ac:	e1d320b8 	ldrh	r2, [r3, #8]
  11a7b0:	e51b3008 	ldr	r3, [fp, #-8]
  11a7b4:	e1c320ba 	strh	r2, [r3, #10]
    p->next = NULL;
  11a7b8:	e51b3008 	ldr	r3, [fp, #-8]
  11a7bc:	e3a02000 	mov	r2, #0
  11a7c0:	e5832000 	str	r2, [r3]
    p->type = type;
  11a7c4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11a7c8:	e6ef2073 	uxtb	r2, r3
  11a7cc:	e51b3008 	ldr	r3, [fp, #-8]
  11a7d0:	e5c3200c 	strb	r2, [r3, #12]
    break;
  11a7d4:	ea000009 	b	11a800 <pbuf_alloc+0x56c>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
  11a7d8:	e307076c 	movw	r0, #30572	; 0x776c
  11a7dc:	e3400014 	movt	r0, #20
  11a7e0:	ebffa24b 	bl	103114 <rt_kprintf>
  11a7e4:	e300118d 	movw	r1, #397	; 0x18d
  11a7e8:	e3070638 	movw	r0, #30264	; 0x7638
  11a7ec:	e3400014 	movt	r0, #20
  11a7f0:	ebffc23e 	bl	10b0f0 <sys_arch_assert>
    return NULL;
  11a7f4:	e3a03000 	mov	r3, #0
  11a7f8:	ea000007 	b	11a81c <pbuf_alloc+0x588>
    break;
  11a7fc:	e320f000 	nop	{0}
  }
  /* set reference count */
  p->ref = 1;
  11a800:	e51b3008 	ldr	r3, [fp, #-8]
  11a804:	e3a02001 	mov	r2, #1
  11a808:	e1c320be 	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
  11a80c:	e51b3008 	ldr	r3, [fp, #-8]
  11a810:	e3a02000 	mov	r2, #0
  11a814:	e5c3200d 	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
  11a818:	e51b3008 	ldr	r3, [fp, #-8]
}
  11a81c:	e1a00003 	mov	r0, r3
  11a820:	e24bd004 	sub	sp, fp, #4
  11a824:	e8bd8800 	pop	{fp, pc}

0011a828 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
  11a828:	e92d4800 	push	{fp, lr}
  11a82c:	e28db004 	add	fp, sp, #4
  11a830:	e24dd018 	sub	sp, sp, #24
  11a834:	e50b0010 	str	r0, [fp, #-16]
  11a838:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  11a83c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  11a840:	e1a03001 	mov	r3, r1
  11a844:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
  11a848:	e51b3010 	ldr	r3, [fp, #-16]
  11a84c:	e3530004 	cmp	r3, #4
  11a850:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  11a854:	ea000013 	b	11a8a8 <pbuf_alloced_custom+0x80>
  11a858:	0011a86c 	.word	0x0011a86c
  11a85c:	0011a878 	.word	0x0011a878
  11a860:	0011a884 	.word	0x0011a884
  11a864:	0011a890 	.word	0x0011a890
  11a868:	0011a89c 	.word	0x0011a89c
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
  11a86c:	e3a03038 	mov	r3, #56	; 0x38
  11a870:	e14b30b6 	strh	r3, [fp, #-6]
    break;
  11a874:	ea000014 	b	11a8cc <pbuf_alloced_custom+0xa4>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
  11a878:	e3a03024 	mov	r3, #36	; 0x24
  11a87c:	e14b30b6 	strh	r3, [fp, #-6]
    break;
  11a880:	ea000011 	b	11a8cc <pbuf_alloced_custom+0xa4>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
  11a884:	e3a03010 	mov	r3, #16
  11a888:	e14b30b6 	strh	r3, [fp, #-6]
    break;
  11a88c:	ea00000e 	b	11a8cc <pbuf_alloced_custom+0xa4>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
  11a890:	e3a03000 	mov	r3, #0
  11a894:	e14b30b6 	strh	r3, [fp, #-6]
    break;
  11a898:	ea00000b 	b	11a8cc <pbuf_alloced_custom+0xa4>
  case PBUF_RAW:
    offset = 0;
  11a89c:	e3a03000 	mov	r3, #0
  11a8a0:	e14b30b6 	strh	r3, [fp, #-6]
    break;
  11a8a4:	ea000008 	b	11a8cc <pbuf_alloced_custom+0xa4>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
  11a8a8:	e3070788 	movw	r0, #30600	; 0x7788
  11a8ac:	e3400014 	movt	r0, #20
  11a8b0:	ebffa217 	bl	103114 <rt_kprintf>
  11a8b4:	e30011c6 	movw	r1, #454	; 0x1c6
  11a8b8:	e3070638 	movw	r0, #30264	; 0x7638
  11a8bc:	e3400014 	movt	r0, #20
  11a8c0:	ebffc20a 	bl	10b0f0 <sys_arch_assert>
    return NULL;
  11a8c4:	e3a03000 	mov	r3, #0
  11a8c8:	ea00002c 	b	11a980 <pbuf_alloced_custom+0x158>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
  11a8cc:	e15b30b6 	ldrh	r3, [fp, #-6]
  11a8d0:	e2833003 	add	r3, r3, #3
  11a8d4:	e3c32003 	bic	r2, r3, #3
  11a8d8:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11a8dc:	e0822003 	add	r2, r2, r3
  11a8e0:	e1db30b8 	ldrh	r3, [fp, #8]
  11a8e4:	e1520003 	cmp	r2, r3
  11a8e8:	9a000001 	bls	11a8f4 <pbuf_alloced_custom+0xcc>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
  11a8ec:	e3a03000 	mov	r3, #0
  11a8f0:	ea000022 	b	11a980 <pbuf_alloced_custom+0x158>
  }

  p->pbuf.next = NULL;
  11a8f4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a8f8:	e3a02000 	mov	r2, #0
  11a8fc:	e5832000 	str	r2, [r3]
  if (payload_mem != NULL) {
  11a900:	e59b3004 	ldr	r3, [fp, #4]
  11a904:	e3530000 	cmp	r3, #0
  11a908:	0a000007 	beq	11a92c <pbuf_alloced_custom+0x104>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
  11a90c:	e15b30b6 	ldrh	r3, [fp, #-6]
  11a910:	e2833003 	add	r3, r3, #3
  11a914:	e3c33003 	bic	r3, r3, #3
  11a918:	e59b2004 	ldr	r2, [fp, #4]
  11a91c:	e0822003 	add	r2, r2, r3
  11a920:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a924:	e5832004 	str	r2, [r3, #4]
  11a928:	ea000002 	b	11a938 <pbuf_alloced_custom+0x110>
  } else {
    p->pbuf.payload = NULL;
  11a92c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a930:	e3a02000 	mov	r2, #0
  11a934:	e5832004 	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
  11a938:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a93c:	e3a02002 	mov	r2, #2
  11a940:	e5c3200d 	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
  11a944:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a948:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  11a94c:	e1c320b8 	strh	r2, [r3, #8]
  11a950:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a954:	e1d320b8 	ldrh	r2, [r3, #8]
  11a958:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a95c:	e1c320ba 	strh	r2, [r3, #10]
  p->pbuf.type = type;
  11a960:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a964:	e6ef2073 	uxtb	r2, r3
  11a968:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a96c:	e5c3200c 	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
  11a970:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11a974:	e3a02001 	mov	r2, #1
  11a978:	e1c320be 	strh	r2, [r3, #14]
  return &p->pbuf;
  11a97c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
}
  11a980:	e1a00003 	mov	r0, r3
  11a984:	e24bd004 	sub	sp, fp, #4
  11a988:	e8bd8800 	pop	{fp, pc}

0011a98c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
  11a98c:	e92d4800 	push	{fp, lr}
  11a990:	e28db004 	add	fp, sp, #4
  11a994:	e24dd018 	sub	sp, sp, #24
  11a998:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11a99c:	e1a03001 	mov	r3, r1
  11a9a0:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
  11a9a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a9a8:	e3530000 	cmp	r3, #0
  11a9ac:	1a000006 	bne	11a9cc <pbuf_realloc+0x40>
  11a9b0:	e30707ac 	movw	r0, #30636	; 0x77ac
  11a9b4:	e3400014 	movt	r0, #20
  11a9b8:	ebffa1d5 	bl	103114 <rt_kprintf>
  11a9bc:	e3a01f7d 	mov	r1, #500	; 0x1f4
  11a9c0:	e3070638 	movw	r0, #30264	; 0x7638
  11a9c4:	e3400014 	movt	r0, #20
  11a9c8:	ebffc1c8 	bl	10b0f0 <sys_arch_assert>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
  11a9cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a9d0:	e5d3300c 	ldrb	r3, [r3, #12]
  11a9d4:	e3530003 	cmp	r3, #3
  11a9d8:	0a000012 	beq	11aa28 <pbuf_realloc+0x9c>
  11a9dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a9e0:	e5d3300c 	ldrb	r3, [r3, #12]
  11a9e4:	e3530001 	cmp	r3, #1
  11a9e8:	0a00000e 	beq	11aa28 <pbuf_realloc+0x9c>
  11a9ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a9f0:	e5d3300c 	ldrb	r3, [r3, #12]
  11a9f4:	e3530000 	cmp	r3, #0
  11a9f8:	0a00000a 	beq	11aa28 <pbuf_realloc+0x9c>
  11a9fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11aa00:	e5d3300c 	ldrb	r3, [r3, #12]
  11aa04:	e3530002 	cmp	r3, #2
  11aa08:	0a000006 	beq	11aa28 <pbuf_realloc+0x9c>
  11aa0c:	e30707c4 	movw	r0, #30660	; 0x77c4
  11aa10:	e3400014 	movt	r0, #20
  11aa14:	ebffa1be 	bl	103114 <rt_kprintf>
  11aa18:	e3a01f7e 	mov	r1, #504	; 0x1f8
  11aa1c:	e3070638 	movw	r0, #30264	; 0x7638
  11aa20:	e3400014 	movt	r0, #20
  11aa24:	ebffc1b1 	bl	10b0f0 <sys_arch_assert>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
  11aa28:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11aa2c:	e1d330b8 	ldrh	r3, [r3, #8]
  11aa30:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
  11aa34:	e1520003 	cmp	r2, r3
  11aa38:	2a00006b 	bcs	11abec <pbuf_realloc+0x260>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
  11aa3c:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  11aa40:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11aa44:	e1d220b8 	ldrh	r2, [r2, #8]
  11aa48:	e0433002 	sub	r3, r3, r2
  11aa4c:	e50b3010 	str	r3, [fp, #-16]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
  11aa50:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  11aa54:	e14b30ba 	strh	r3, [fp, #-10]
  q = p;
  11aa58:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11aa5c:	e50b3008 	str	r3, [fp, #-8]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
  11aa60:	ea000024 	b	11aaf8 <pbuf_realloc+0x16c>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
  11aa64:	e51b3008 	ldr	r3, [fp, #-8]
  11aa68:	e1d330ba 	ldrh	r3, [r3, #10]
  11aa6c:	e15b20ba 	ldrh	r2, [fp, #-10]
  11aa70:	e0423003 	sub	r3, r2, r3
  11aa74:	e14b30ba 	strh	r3, [fp, #-10]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
  11aa78:	e51b3010 	ldr	r3, [fp, #-16]
  11aa7c:	e30f2ffe 	movw	r2, #65534	; 0xfffe
  11aa80:	e1530002 	cmp	r3, r2
  11aa84:	da000006 	ble	11aaa4 <pbuf_realloc+0x118>
  11aa88:	e30707e0 	movw	r0, #30688	; 0x77e0
  11aa8c:	e3400014 	movt	r0, #20
  11aa90:	ebffa19f 	bl	103114 <rt_kprintf>
  11aa94:	e3a01f83 	mov	r1, #524	; 0x20c
  11aa98:	e3070638 	movw	r0, #30264	; 0x7638
  11aa9c:	e3400014 	movt	r0, #20
  11aaa0:	ebffc192 	bl	10b0f0 <sys_arch_assert>
    q->tot_len += (u16_t)grow;
  11aaa4:	e51b3008 	ldr	r3, [fp, #-8]
  11aaa8:	e1d320b8 	ldrh	r2, [r3, #8]
  11aaac:	e51b3010 	ldr	r3, [fp, #-16]
  11aab0:	e6ff3073 	uxth	r3, r3
  11aab4:	e0823003 	add	r3, r2, r3
  11aab8:	e6ff2073 	uxth	r2, r3
  11aabc:	e51b3008 	ldr	r3, [fp, #-8]
  11aac0:	e1c320b8 	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
  11aac4:	e51b3008 	ldr	r3, [fp, #-8]
  11aac8:	e5933000 	ldr	r3, [r3]
  11aacc:	e50b3008 	str	r3, [fp, #-8]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
  11aad0:	e51b3008 	ldr	r3, [fp, #-8]
  11aad4:	e3530000 	cmp	r3, #0
  11aad8:	1a000006 	bne	11aaf8 <pbuf_realloc+0x16c>
  11aadc:	e30707f4 	movw	r0, #30708	; 0x77f4
  11aae0:	e3400014 	movt	r0, #20
  11aae4:	ebffa18a 	bl	103114 <rt_kprintf>
  11aae8:	e3a01e21 	mov	r1, #528	; 0x210
  11aaec:	e3070638 	movw	r0, #30264	; 0x7638
  11aaf0:	e3400014 	movt	r0, #20
  11aaf4:	ebffc17d 	bl	10b0f0 <sys_arch_assert>
  while (rem_len > q->len) {
  11aaf8:	e51b3008 	ldr	r3, [fp, #-8]
  11aafc:	e1d330ba 	ldrh	r3, [r3, #10]
  11ab00:	e15b20ba 	ldrh	r2, [fp, #-10]
  11ab04:	e1520003 	cmp	r2, r3
  11ab08:	8affffd5 	bhi	11aa64 <pbuf_realloc+0xd8>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
  11ab0c:	e51b3008 	ldr	r3, [fp, #-8]
  11ab10:	e5d3300c 	ldrb	r3, [r3, #12]
  11ab14:	e3530000 	cmp	r3, #0
  11ab18:	1a000020 	bne	11aba0 <pbuf_realloc+0x214>
  11ab1c:	e51b3008 	ldr	r3, [fp, #-8]
  11ab20:	e1d330ba 	ldrh	r3, [r3, #10]
  11ab24:	e15b20ba 	ldrh	r2, [fp, #-10]
  11ab28:	e1520003 	cmp	r2, r3
  11ab2c:	0a00001b 	beq	11aba0 <pbuf_realloc+0x214>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
  11ab30:	e51b3008 	ldr	r3, [fp, #-8]
  11ab34:	e5d3300d 	ldrb	r3, [r3, #13]
  11ab38:	e2033002 	and	r3, r3, #2
  11ab3c:	e3530000 	cmp	r3, #0
  11ab40:	1a000016 	bne	11aba0 <pbuf_realloc+0x214>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
  11ab44:	e51b3008 	ldr	r3, [fp, #-8]
  11ab48:	e5933004 	ldr	r3, [r3, #4]
  11ab4c:	e1a02003 	mov	r2, r3
  11ab50:	e51b3008 	ldr	r3, [fp, #-8]
  11ab54:	e0423003 	sub	r3, r2, r3
  11ab58:	e6ff2073 	uxth	r2, r3
  11ab5c:	e15b30ba 	ldrh	r3, [fp, #-10]
  11ab60:	e0823003 	add	r3, r2, r3
  11ab64:	e6ff3073 	uxth	r3, r3
  11ab68:	e1a01003 	mov	r1, r3
  11ab6c:	e51b0008 	ldr	r0, [fp, #-8]
  11ab70:	ebffc194 	bl	10b1c8 <mem_trim>
  11ab74:	e50b0008 	str	r0, [fp, #-8]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
  11ab78:	e51b3008 	ldr	r3, [fp, #-8]
  11ab7c:	e3530000 	cmp	r3, #0
  11ab80:	1a000006 	bne	11aba0 <pbuf_realloc+0x214>
  11ab84:	e307080c 	movw	r0, #30732	; 0x780c
  11ab88:	e3400014 	movt	r0, #20
  11ab8c:	ebffa160 	bl	103114 <rt_kprintf>
  11ab90:	e300121e 	movw	r1, #542	; 0x21e
  11ab94:	e3070638 	movw	r0, #30264	; 0x7638
  11ab98:	e3400014 	movt	r0, #20
  11ab9c:	ebffc153 	bl	10b0f0 <sys_arch_assert>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
  11aba0:	e51b3008 	ldr	r3, [fp, #-8]
  11aba4:	e15b20ba 	ldrh	r2, [fp, #-10]
  11aba8:	e1c320ba 	strh	r2, [r3, #10]
  q->tot_len = q->len;
  11abac:	e51b3008 	ldr	r3, [fp, #-8]
  11abb0:	e1d320ba 	ldrh	r2, [r3, #10]
  11abb4:	e51b3008 	ldr	r3, [fp, #-8]
  11abb8:	e1c320b8 	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
  11abbc:	e51b3008 	ldr	r3, [fp, #-8]
  11abc0:	e5933000 	ldr	r3, [r3]
  11abc4:	e3530000 	cmp	r3, #0
  11abc8:	0a000003 	beq	11abdc <pbuf_realloc+0x250>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
  11abcc:	e51b3008 	ldr	r3, [fp, #-8]
  11abd0:	e5933000 	ldr	r3, [r3]
  11abd4:	e1a00003 	mov	r0, r3
  11abd8:	eb0000b4 	bl	11aeb0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
  11abdc:	e51b3008 	ldr	r3, [fp, #-8]
  11abe0:	e3a02000 	mov	r2, #0
  11abe4:	e5832000 	str	r2, [r3]
  11abe8:	ea000000 	b	11abf0 <pbuf_realloc+0x264>
    return;
  11abec:	e320f000 	nop	{0}

}
  11abf0:	e24bd004 	sub	sp, fp, #4
  11abf4:	e8bd8800 	pop	{fp, pc}

0011abf8 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
  11abf8:	e92d4800 	push	{fp, lr}
  11abfc:	e28db004 	add	fp, sp, #4
  11ac00:	e24dd010 	sub	sp, sp, #16
  11ac04:	e50b0010 	str	r0, [fp, #-16]
  11ac08:	e1a03001 	mov	r3, r1
  11ac0c:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  11ac10:	e1a03002 	mov	r3, r2
  11ac14:	e54b3013 	strb	r3, [fp, #-19]	; 0xffffffed
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
  11ac18:	e51b3010 	ldr	r3, [fp, #-16]
  11ac1c:	e3530000 	cmp	r3, #0
  11ac20:	1a000006 	bne	11ac40 <pbuf_header_impl+0x48>
  11ac24:	e3070828 	movw	r0, #30760	; 0x7828
  11ac28:	e3400014 	movt	r0, #20
  11ac2c:	ebffa138 	bl	103114 <rt_kprintf>
  11ac30:	e3a01d09 	mov	r1, #576	; 0x240
  11ac34:	e3070638 	movw	r0, #30264	; 0x7638
  11ac38:	e3400014 	movt	r0, #20
  11ac3c:	ebffc12b 	bl	10b0f0 <sys_arch_assert>
  if ((header_size_increment == 0) || (p == NULL)) {
  11ac40:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  11ac44:	e3530000 	cmp	r3, #0
  11ac48:	0a000002 	beq	11ac58 <pbuf_header_impl+0x60>
  11ac4c:	e51b3010 	ldr	r3, [fp, #-16]
  11ac50:	e3530000 	cmp	r3, #0
  11ac54:	1a000001 	bne	11ac60 <pbuf_header_impl+0x68>
    return 0;
  11ac58:	e3a03000 	mov	r3, #0
  11ac5c:	ea000072 	b	11ae2c <pbuf_header_impl+0x234>
  }

  if (header_size_increment < 0) {
  11ac60:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  11ac64:	e3530000 	cmp	r3, #0
  11ac68:	aa000010 	bge	11acb0 <pbuf_header_impl+0xb8>
    increment_magnitude = (u16_t)-header_size_increment;
  11ac6c:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11ac70:	e2633000 	rsb	r3, r3, #0
  11ac74:	e14b30b6 	strh	r3, [fp, #-6]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
  11ac78:	e51b3010 	ldr	r3, [fp, #-16]
  11ac7c:	e1d330ba 	ldrh	r3, [r3, #10]
  11ac80:	e15b20b6 	ldrh	r2, [fp, #-6]
  11ac84:	e1520003 	cmp	r2, r3
  11ac88:	9a00000a 	bls	11acb8 <pbuf_header_impl+0xc0>
  11ac8c:	e3070834 	movw	r0, #30772	; 0x7834
  11ac90:	e3400014 	movt	r0, #20
  11ac94:	ebffa11e 	bl	103114 <rt_kprintf>
  11ac98:	e3a01f92 	mov	r1, #584	; 0x248
  11ac9c:	e3070638 	movw	r0, #30264	; 0x7638
  11aca0:	e3400014 	movt	r0, #20
  11aca4:	ebffc111 	bl	10b0f0 <sys_arch_assert>
  11aca8:	e3a03001 	mov	r3, #1
  11acac:	ea00005e 	b	11ae2c <pbuf_header_impl+0x234>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
  11acb0:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11acb4:	e14b30b6 	strh	r3, [fp, #-6]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
  11acb8:	e51b3010 	ldr	r3, [fp, #-16]
  11acbc:	e5d3300c 	ldrb	r3, [r3, #12]
  11acc0:	e14b30b8 	strh	r3, [fp, #-8]
  /* remember current payload pointer */
  payload = p->payload;
  11acc4:	e51b3010 	ldr	r3, [fp, #-16]
  11acc8:	e5933004 	ldr	r3, [r3, #4]
  11accc:	e50b300c 	str	r3, [fp, #-12]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
  11acd0:	e15b30b8 	ldrh	r3, [fp, #-8]
  11acd4:	e3530000 	cmp	r3, #0
  11acd8:	0a000002 	beq	11ace8 <pbuf_header_impl+0xf0>
  11acdc:	e15b30b8 	ldrh	r3, [fp, #-8]
  11ace0:	e3530003 	cmp	r3, #3
  11ace4:	1a000011 	bne	11ad30 <pbuf_header_impl+0x138>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
  11ace8:	e51b3010 	ldr	r3, [fp, #-16]
  11acec:	e5932004 	ldr	r2, [r3, #4]
  11acf0:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  11acf4:	e2633000 	rsb	r3, r3, #0
  11acf8:	e0822003 	add	r2, r2, r3
  11acfc:	e51b3010 	ldr	r3, [fp, #-16]
  11ad00:	e5832004 	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
  11ad04:	e51b3010 	ldr	r3, [fp, #-16]
  11ad08:	e5932004 	ldr	r2, [r3, #4]
  11ad0c:	e51b3010 	ldr	r3, [fp, #-16]
  11ad10:	e2833010 	add	r3, r3, #16
  11ad14:	e1520003 	cmp	r2, r3
  11ad18:	2a000034 	bcs	11adf0 <pbuf_header_impl+0x1f8>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
  11ad1c:	e51b3010 	ldr	r3, [fp, #-16]
  11ad20:	e51b200c 	ldr	r2, [fp, #-12]
  11ad24:	e5832004 	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
  11ad28:	e3a03001 	mov	r3, #1
  11ad2c:	ea00003e 	b	11ae2c <pbuf_header_impl+0x234>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
  11ad30:	e15b30b8 	ldrh	r3, [fp, #-8]
  11ad34:	e3530002 	cmp	r3, #2
  11ad38:	0a000002 	beq	11ad48 <pbuf_header_impl+0x150>
  11ad3c:	e15b30b8 	ldrh	r3, [fp, #-8]
  11ad40:	e3530001 	cmp	r3, #1
  11ad44:	1a000020 	bne	11adcc <pbuf_header_impl+0x1d4>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
  11ad48:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  11ad4c:	e3530000 	cmp	r3, #0
  11ad50:	aa00000c 	bge	11ad88 <pbuf_header_impl+0x190>
  11ad54:	e51b3010 	ldr	r3, [fp, #-16]
  11ad58:	e1d330ba 	ldrh	r3, [r3, #10]
  11ad5c:	e15b20b6 	ldrh	r2, [fp, #-6]
  11ad60:	e1520003 	cmp	r2, r3
  11ad64:	8a000007 	bhi	11ad88 <pbuf_header_impl+0x190>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
  11ad68:	e51b3010 	ldr	r3, [fp, #-16]
  11ad6c:	e5932004 	ldr	r2, [r3, #4]
  11ad70:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  11ad74:	e2633000 	rsb	r3, r3, #0
  11ad78:	e0822003 	add	r2, r2, r3
  11ad7c:	e51b3010 	ldr	r3, [fp, #-16]
  11ad80:	e5832004 	str	r2, [r3, #4]
  11ad84:	ea00000f 	b	11adc8 <pbuf_header_impl+0x1d0>
    } else if ((header_size_increment > 0) && force) {
  11ad88:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  11ad8c:	e3530000 	cmp	r3, #0
  11ad90:	da00000a 	ble	11adc0 <pbuf_header_impl+0x1c8>
  11ad94:	e55b3013 	ldrb	r3, [fp, #-19]	; 0xffffffed
  11ad98:	e3530000 	cmp	r3, #0
  11ad9c:	0a000007 	beq	11adc0 <pbuf_header_impl+0x1c8>
      p->payload = (u8_t *)p->payload - header_size_increment;
  11ada0:	e51b3010 	ldr	r3, [fp, #-16]
  11ada4:	e5932004 	ldr	r2, [r3, #4]
  11ada8:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  11adac:	e2633000 	rsb	r3, r3, #0
  11adb0:	e0822003 	add	r2, r2, r3
  11adb4:	e51b3010 	ldr	r3, [fp, #-16]
  11adb8:	e5832004 	str	r2, [r3, #4]
  11adbc:	ea000001 	b	11adc8 <pbuf_header_impl+0x1d0>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
  11adc0:	e3a03001 	mov	r3, #1
  11adc4:	ea000018 	b	11ae2c <pbuf_header_impl+0x234>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
  11adc8:	ea000008 	b	11adf0 <pbuf_header_impl+0x1f8>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
  11adcc:	e3070854 	movw	r0, #30804	; 0x7854
  11add0:	e3400014 	movt	r0, #20
  11add4:	ebffa0ce 	bl	103114 <rt_kprintf>
  11add8:	e3a01f9e 	mov	r1, #632	; 0x278
  11addc:	e3070638 	movw	r0, #30264	; 0x7638
  11ade0:	e3400014 	movt	r0, #20
  11ade4:	ebffc0c1 	bl	10b0f0 <sys_arch_assert>
    return 1;
  11ade8:	e3a03001 	mov	r3, #1
  11adec:	ea00000e 	b	11ae2c <pbuf_header_impl+0x234>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
  11adf0:	e51b3010 	ldr	r3, [fp, #-16]
  11adf4:	e1d320ba 	ldrh	r2, [r3, #10]
  11adf8:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11adfc:	e0823003 	add	r3, r2, r3
  11ae00:	e6ff2073 	uxth	r2, r3
  11ae04:	e51b3010 	ldr	r3, [fp, #-16]
  11ae08:	e1c320ba 	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
  11ae0c:	e51b3010 	ldr	r3, [fp, #-16]
  11ae10:	e1d320b8 	ldrh	r2, [r3, #8]
  11ae14:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11ae18:	e0823003 	add	r3, r2, r3
  11ae1c:	e6ff2073 	uxth	r2, r3
  11ae20:	e51b3010 	ldr	r3, [fp, #-16]
  11ae24:	e1c320b8 	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
  11ae28:	e3a03000 	mov	r3, #0
}
  11ae2c:	e1a00003 	mov	r0, r3
  11ae30:	e24bd004 	sub	sp, fp, #4
  11ae34:	e8bd8800 	pop	{fp, pc}

0011ae38 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
  11ae38:	e92d4800 	push	{fp, lr}
  11ae3c:	e28db004 	add	fp, sp, #4
  11ae40:	e24dd008 	sub	sp, sp, #8
  11ae44:	e50b0008 	str	r0, [fp, #-8]
  11ae48:	e1a03001 	mov	r3, r1
  11ae4c:	e14b30ba 	strh	r3, [fp, #-10]
   return pbuf_header_impl(p, header_size_increment, 0);
  11ae50:	e15b30fa 	ldrsh	r3, [fp, #-10]
  11ae54:	e3a02000 	mov	r2, #0
  11ae58:	e1a01003 	mov	r1, r3
  11ae5c:	e51b0008 	ldr	r0, [fp, #-8]
  11ae60:	ebffff64 	bl	11abf8 <pbuf_header_impl>
  11ae64:	e1a03000 	mov	r3, r0
}
  11ae68:	e1a00003 	mov	r0, r3
  11ae6c:	e24bd004 	sub	sp, fp, #4
  11ae70:	e8bd8800 	pop	{fp, pc}

0011ae74 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
  11ae74:	e92d4800 	push	{fp, lr}
  11ae78:	e28db004 	add	fp, sp, #4
  11ae7c:	e24dd008 	sub	sp, sp, #8
  11ae80:	e50b0008 	str	r0, [fp, #-8]
  11ae84:	e1a03001 	mov	r3, r1
  11ae88:	e14b30ba 	strh	r3, [fp, #-10]
   return pbuf_header_impl(p, header_size_increment, 1);
  11ae8c:	e15b30fa 	ldrsh	r3, [fp, #-10]
  11ae90:	e3a02001 	mov	r2, #1
  11ae94:	e1a01003 	mov	r1, r3
  11ae98:	e51b0008 	ldr	r0, [fp, #-8]
  11ae9c:	ebffff55 	bl	11abf8 <pbuf_header_impl>
  11aea0:	e1a03000 	mov	r3, r0
}
  11aea4:	e1a00003 	mov	r0, r3
  11aea8:	e24bd004 	sub	sp, fp, #4
  11aeac:	e8bd8800 	pop	{fp, pc}

0011aeb0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
  11aeb0:	e92d4800 	push	{fp, lr}
  11aeb4:	e28db004 	add	fp, sp, #4
  11aeb8:	e24dd018 	sub	sp, sp, #24
  11aebc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
  11aec0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11aec4:	e3530000 	cmp	r3, #0
  11aec8:	1a00000b 	bne	11aefc <pbuf_free+0x4c>
    LWIP_ASSERT("p != NULL", p != NULL);
  11aecc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11aed0:	e3530000 	cmp	r3, #0
  11aed4:	1a000006 	bne	11aef4 <pbuf_free+0x44>
  11aed8:	e3070828 	movw	r0, #30760	; 0x7828
  11aedc:	e3400014 	movt	r0, #20
  11aee0:	ebffa08b 	bl	103114 <rt_kprintf>
  11aee4:	e30012d3 	movw	r1, #723	; 0x2d3
  11aee8:	e3070638 	movw	r0, #30264	; 0x7638
  11aeec:	e3400014 	movt	r0, #20
  11aef0:	ebffc07e 	bl	10b0f0 <sys_arch_assert>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
  11aef4:	e3a03000 	mov	r3, #0
  11aef8:	ea00006e 	b	11b0b8 <pbuf_free+0x208>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
  11aefc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11af00:	e5d3300c 	ldrb	r3, [r3, #12]
  11af04:	e3530000 	cmp	r3, #0
  11af08:	0a000012 	beq	11af58 <pbuf_free+0xa8>
  11af0c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11af10:	e5d3300c 	ldrb	r3, [r3, #12]
  11af14:	e3530001 	cmp	r3, #1
  11af18:	0a00000e 	beq	11af58 <pbuf_free+0xa8>
  11af1c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11af20:	e5d3300c 	ldrb	r3, [r3, #12]
  11af24:	e3530002 	cmp	r3, #2
  11af28:	0a00000a 	beq	11af58 <pbuf_free+0xa8>
  11af2c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11af30:	e5d3300c 	ldrb	r3, [r3, #12]
  11af34:	e3530003 	cmp	r3, #3
  11af38:	0a000006 	beq	11af58 <pbuf_free+0xa8>
  11af3c:	e3070864 	movw	r0, #30820	; 0x7864
  11af40:	e3400014 	movt	r0, #20
  11af44:	ebffa072 	bl	103114 <rt_kprintf>
  11af48:	e30012df 	movw	r1, #735	; 0x2df
  11af4c:	e3070638 	movw	r0, #30264	; 0x7638
  11af50:	e3400014 	movt	r0, #20
  11af54:	ebffc065 	bl	10b0f0 <sys_arch_assert>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
  11af58:	e3a03000 	mov	r3, #0
  11af5c:	e54b3005 	strb	r3, [fp, #-5]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
  11af60:	ea000050 	b	11b0a8 <pbuf_free+0x1f8>
    u16_t ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
  11af64:	ebff9cb4 	bl	10223c <rt_enter_critical>
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
  11af68:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11af6c:	e1d330be 	ldrh	r3, [r3, #14]
  11af70:	e3530000 	cmp	r3, #0
  11af74:	1a000006 	bne	11af94 <pbuf_free+0xe4>
  11af78:	e307087c 	movw	r0, #30844	; 0x787c
  11af7c:	e3400014 	movt	r0, #20
  11af80:	ebffa063 	bl	103114 <rt_kprintf>
  11af84:	e3a01fbb 	mov	r1, #748	; 0x2ec
  11af88:	e3070638 	movw	r0, #30264	; 0x7638
  11af8c:	e3400014 	movt	r0, #20
  11af90:	ebffc056 	bl	10b0f0 <sys_arch_assert>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
  11af94:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11af98:	e1d330be 	ldrh	r3, [r3, #14]
  11af9c:	e2433001 	sub	r3, r3, #1
  11afa0:	e6ff2073 	uxth	r2, r3
  11afa4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11afa8:	e1c320be 	strh	r2, [r3, #14]
  11afac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11afb0:	e1d330be 	ldrh	r3, [r3, #14]
  11afb4:	e14b30b8 	strh	r3, [fp, #-8]
    SYS_ARCH_UNPROTECT(old_level);
  11afb8:	ebff9ca5 	bl	102254 <rt_exit_critical>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
  11afbc:	e15b30b8 	ldrh	r3, [fp, #-8]
  11afc0:	e3530000 	cmp	r3, #0
  11afc4:	1a000035 	bne	11b0a0 <pbuf_free+0x1f0>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
  11afc8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11afcc:	e5933000 	ldr	r3, [r3]
  11afd0:	e50b300c 	str	r3, [fp, #-12]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
  11afd4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11afd8:	e5d3300c 	ldrb	r3, [r3, #12]
  11afdc:	e14b30be 	strh	r3, [fp, #-14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
  11afe0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11afe4:	e5d3300d 	ldrb	r3, [r3, #13]
  11afe8:	e2033002 	and	r3, r3, #2
  11afec:	e3530000 	cmp	r3, #0
  11aff0:	0a000011 	beq	11b03c <pbuf_free+0x18c>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
  11aff4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11aff8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
  11affc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b000:	e5933010 	ldr	r3, [r3, #16]
  11b004:	e3530000 	cmp	r3, #0
  11b008:	1a000006 	bne	11b028 <pbuf_free+0x178>
  11b00c:	e3070894 	movw	r0, #30868	; 0x7894
  11b010:	e3400014 	movt	r0, #20
  11b014:	ebffa03e 	bl	103114 <rt_kprintf>
  11b018:	e30012fa 	movw	r1, #762	; 0x2fa
  11b01c:	e3070638 	movw	r0, #30264	; 0x7638
  11b020:	e3400014 	movt	r0, #20
  11b024:	ebffc031 	bl	10b0f0 <sys_arch_assert>
        pc->custom_free_function(p);
  11b028:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b02c:	e5933010 	ldr	r3, [r3, #16]
  11b030:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  11b034:	e12fff33 	blx	r3
  11b038:	ea000012 	b	11b088 <pbuf_free+0x1d8>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
  11b03c:	e15b30be 	ldrh	r3, [fp, #-14]
  11b040:	e3530003 	cmp	r3, #3
  11b044:	1a000003 	bne	11b058 <pbuf_free+0x1a8>
          memp_free(MEMP_PBUF_POOL, p);
  11b048:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11b04c:	e3a00010 	mov	r0, #16
  11b050:	ebfff888 	bl	119278 <memp_free>
  11b054:	ea00000b 	b	11b088 <pbuf_free+0x1d8>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
  11b058:	e15b30be 	ldrh	r3, [fp, #-14]
  11b05c:	e3530001 	cmp	r3, #1
  11b060:	0a000002 	beq	11b070 <pbuf_free+0x1c0>
  11b064:	e15b30be 	ldrh	r3, [fp, #-14]
  11b068:	e3530002 	cmp	r3, #2
  11b06c:	1a000003 	bne	11b080 <pbuf_free+0x1d0>
          memp_free(MEMP_PBUF, p);
  11b070:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11b074:	e3a0000f 	mov	r0, #15
  11b078:	ebfff87e 	bl	119278 <memp_free>
  11b07c:	ea000001 	b	11b088 <pbuf_free+0x1d8>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
  11b080:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  11b084:	ebffc066 	bl	10b224 <mem_free>
        }
      }
      count++;
  11b088:	e55b3005 	ldrb	r3, [fp, #-5]
  11b08c:	e2833001 	add	r3, r3, #1
  11b090:	e54b3005 	strb	r3, [fp, #-5]
      /* proceed to next pbuf */
      p = q;
  11b094:	e51b300c 	ldr	r3, [fp, #-12]
  11b098:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  11b09c:	ea000001 	b	11b0a8 <pbuf_free+0x1f8>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
  11b0a0:	e3a03000 	mov	r3, #0
  11b0a4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  while (p != NULL) {
  11b0a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b0ac:	e3530000 	cmp	r3, #0
  11b0b0:	1affffab 	bne	11af64 <pbuf_free+0xb4>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
  11b0b4:	e55b3005 	ldrb	r3, [fp, #-5]
}
  11b0b8:	e1a00003 	mov	r0, r3
  11b0bc:	e24bd004 	sub	sp, fp, #4
  11b0c0:	e8bd8800 	pop	{fp, pc}

0011b0c4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
  11b0c4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11b0c8:	e28db000 	add	fp, sp, #0
  11b0cc:	e24dd014 	sub	sp, sp, #20
  11b0d0:	e50b0010 	str	r0, [fp, #-16]
  u16_t len;

  len = 0;
  11b0d4:	e3a03000 	mov	r3, #0
  11b0d8:	e14b30b6 	strh	r3, [fp, #-6]
  while (p != NULL) {
  11b0dc:	ea000005 	b	11b0f8 <pbuf_clen+0x34>
    ++len;
  11b0e0:	e15b30b6 	ldrh	r3, [fp, #-6]
  11b0e4:	e2833001 	add	r3, r3, #1
  11b0e8:	e14b30b6 	strh	r3, [fp, #-6]
    p = p->next;
  11b0ec:	e51b3010 	ldr	r3, [fp, #-16]
  11b0f0:	e5933000 	ldr	r3, [r3]
  11b0f4:	e50b3010 	str	r3, [fp, #-16]
  while (p != NULL) {
  11b0f8:	e51b3010 	ldr	r3, [fp, #-16]
  11b0fc:	e3530000 	cmp	r3, #0
  11b100:	1afffff6 	bne	11b0e0 <pbuf_clen+0x1c>
  }
  return len;
  11b104:	e15b30b6 	ldrh	r3, [fp, #-6]
}
  11b108:	e1a00003 	mov	r0, r3
  11b10c:	e28bd000 	add	sp, fp, #0
  11b110:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11b114:	e12fff1e 	bx	lr

0011b118 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
  11b118:	e92d4800 	push	{fp, lr}
  11b11c:	e28db004 	add	fp, sp, #4
  11b120:	e24dd008 	sub	sp, sp, #8
  11b124:	e50b0008 	str	r0, [fp, #-8]
  /* pbuf given? */
  if (p != NULL) {
  11b128:	e51b3008 	ldr	r3, [fp, #-8]
  11b12c:	e3530000 	cmp	r3, #0
  11b130:	0a000012 	beq	11b180 <pbuf_ref+0x68>
    SYS_ARCH_INC(p->ref, 1);
  11b134:	ebff9c40 	bl	10223c <rt_enter_critical>
  11b138:	e51b3008 	ldr	r3, [fp, #-8]
  11b13c:	e1d330be 	ldrh	r3, [r3, #14]
  11b140:	e2833001 	add	r3, r3, #1
  11b144:	e6ff2073 	uxth	r2, r3
  11b148:	e51b3008 	ldr	r3, [fp, #-8]
  11b14c:	e1c320be 	strh	r2, [r3, #14]
  11b150:	ebff9c3f 	bl	102254 <rt_exit_critical>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
  11b154:	e51b3008 	ldr	r3, [fp, #-8]
  11b158:	e1d330be 	ldrh	r3, [r3, #14]
  11b15c:	e3530000 	cmp	r3, #0
  11b160:	1a000006 	bne	11b180 <pbuf_ref+0x68>
  11b164:	e30708b8 	movw	r0, #30904	; 0x78b8
  11b168:	e3400014 	movt	r0, #20
  11b16c:	ebff9fe8 	bl	103114 <rt_kprintf>
  11b170:	e300133a 	movw	r1, #826	; 0x33a
  11b174:	e3070638 	movw	r0, #30264	; 0x7638
  11b178:	e3400014 	movt	r0, #20
  11b17c:	ebffbfdb 	bl	10b0f0 <sys_arch_assert>
  }
}
  11b180:	e320f000 	nop	{0}
  11b184:	e24bd004 	sub	sp, fp, #4
  11b188:	e8bd8800 	pop	{fp, pc}

0011b18c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
  11b18c:	e92d4800 	push	{fp, lr}
  11b190:	e28db004 	add	fp, sp, #4
  11b194:	e24dd010 	sub	sp, sp, #16
  11b198:	e50b0010 	str	r0, [fp, #-16]
  11b19c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
  11b1a0:	e51b3010 	ldr	r3, [fp, #-16]
  11b1a4:	e3530000 	cmp	r3, #0
  11b1a8:	0a000002 	beq	11b1b8 <pbuf_cat+0x2c>
  11b1ac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b1b0:	e3530000 	cmp	r3, #0
  11b1b4:	1a000007 	bne	11b1d8 <pbuf_cat+0x4c>
  11b1b8:	e30708cc 	movw	r0, #30924	; 0x78cc
  11b1bc:	e3400014 	movt	r0, #20
  11b1c0:	ebff9fd3 	bl	103114 <rt_kprintf>
  11b1c4:	e300134e 	movw	r1, #846	; 0x34e
  11b1c8:	e3070638 	movw	r0, #30264	; 0x7638
  11b1cc:	e3400014 	movt	r0, #20
  11b1d0:	ebffbfc6 	bl	10b0f0 <sys_arch_assert>
  11b1d4:	ea000034 	b	11b2ac <pbuf_cat+0x120>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
  11b1d8:	e51b3010 	ldr	r3, [fp, #-16]
  11b1dc:	e50b3008 	str	r3, [fp, #-8]
  11b1e0:	ea00000a 	b	11b210 <pbuf_cat+0x84>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
  11b1e4:	e51b3008 	ldr	r3, [fp, #-8]
  11b1e8:	e1d320b8 	ldrh	r2, [r3, #8]
  11b1ec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b1f0:	e1d330b8 	ldrh	r3, [r3, #8]
  11b1f4:	e0823003 	add	r3, r2, r3
  11b1f8:	e6ff2073 	uxth	r2, r3
  11b1fc:	e51b3008 	ldr	r3, [fp, #-8]
  11b200:	e1c320b8 	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
  11b204:	e51b3008 	ldr	r3, [fp, #-8]
  11b208:	e5933000 	ldr	r3, [r3]
  11b20c:	e50b3008 	str	r3, [fp, #-8]
  11b210:	e51b3008 	ldr	r3, [fp, #-8]
  11b214:	e5933000 	ldr	r3, [r3]
  11b218:	e3530000 	cmp	r3, #0
  11b21c:	1afffff0 	bne	11b1e4 <pbuf_cat+0x58>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
  11b220:	e51b3008 	ldr	r3, [fp, #-8]
  11b224:	e1d320b8 	ldrh	r2, [r3, #8]
  11b228:	e51b3008 	ldr	r3, [fp, #-8]
  11b22c:	e1d330ba 	ldrh	r3, [r3, #10]
  11b230:	e1520003 	cmp	r2, r3
  11b234:	0a000006 	beq	11b254 <pbuf_cat+0xc8>
  11b238:	e3070904 	movw	r0, #30980	; 0x7904
  11b23c:	e3400014 	movt	r0, #20
  11b240:	ebff9fb3 	bl	103114 <rt_kprintf>
  11b244:	e3001356 	movw	r1, #854	; 0x356
  11b248:	e3070638 	movw	r0, #30264	; 0x7638
  11b24c:	e3400014 	movt	r0, #20
  11b250:	ebffbfa6 	bl	10b0f0 <sys_arch_assert>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
  11b254:	e51b3008 	ldr	r3, [fp, #-8]
  11b258:	e5933000 	ldr	r3, [r3]
  11b25c:	e3530000 	cmp	r3, #0
  11b260:	0a000006 	beq	11b280 <pbuf_cat+0xf4>
  11b264:	e3070934 	movw	r0, #31028	; 0x7934
  11b268:	e3400014 	movt	r0, #20
  11b26c:	ebff9fa8 	bl	103114 <rt_kprintf>
  11b270:	e3001357 	movw	r1, #855	; 0x357
  11b274:	e3070638 	movw	r0, #30264	; 0x7638
  11b278:	e3400014 	movt	r0, #20
  11b27c:	ebffbf9b 	bl	10b0f0 <sys_arch_assert>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
  11b280:	e51b3008 	ldr	r3, [fp, #-8]
  11b284:	e1d320b8 	ldrh	r2, [r3, #8]
  11b288:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b28c:	e1d330b8 	ldrh	r3, [r3, #8]
  11b290:	e0823003 	add	r3, r2, r3
  11b294:	e6ff2073 	uxth	r2, r3
  11b298:	e51b3008 	ldr	r3, [fp, #-8]
  11b29c:	e1c320b8 	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
  11b2a0:	e51b3008 	ldr	r3, [fp, #-8]
  11b2a4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11b2a8:	e5832000 	str	r2, [r3]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
  11b2ac:	e24bd004 	sub	sp, fp, #4
  11b2b0:	e8bd8800 	pop	{fp, pc}

0011b2b4 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
  11b2b4:	e92d4800 	push	{fp, lr}
  11b2b8:	e28db004 	add	fp, sp, #4
  11b2bc:	e24dd008 	sub	sp, sp, #8
  11b2c0:	e50b0008 	str	r0, [fp, #-8]
  11b2c4:	e50b100c 	str	r1, [fp, #-12]
  pbuf_cat(h, t);
  11b2c8:	e51b100c 	ldr	r1, [fp, #-12]
  11b2cc:	e51b0008 	ldr	r0, [fp, #-8]
  11b2d0:	ebffffad 	bl	11b18c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
  11b2d4:	e51b000c 	ldr	r0, [fp, #-12]
  11b2d8:	ebffff8e 	bl	11b118 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
  11b2dc:	e320f000 	nop	{0}
  11b2e0:	e24bd004 	sub	sp, fp, #4
  11b2e4:	e8bd8800 	pop	{fp, pc}

0011b2e8 <pbuf_dechain>:
 * @return remainder of the pbuf chain, or NULL if it was de-allocated.
 * @note May not be called on a packet queue.
 */
struct pbuf *
pbuf_dechain(struct pbuf *p)
{
  11b2e8:	e92d4800 	push	{fp, lr}
  11b2ec:	e28db004 	add	fp, sp, #4
  11b2f0:	e24dd010 	sub	sp, sp, #16
  11b2f4:	e50b0010 	str	r0, [fp, #-16]
  struct pbuf *q;
  u8_t tail_gone = 1;
  11b2f8:	e3a03001 	mov	r3, #1
  11b2fc:	e54b3005 	strb	r3, [fp, #-5]
  /* tail */
  q = p->next;
  11b300:	e51b3010 	ldr	r3, [fp, #-16]
  11b304:	e5933000 	ldr	r3, [r3]
  11b308:	e50b300c 	str	r3, [fp, #-12]
  /* pbuf has successor in chain? */
  if (q != NULL) {
  11b30c:	e51b300c 	ldr	r3, [fp, #-12]
  11b310:	e3530000 	cmp	r3, #0
  11b314:	0a000024 	beq	11b3ac <pbuf_dechain+0xc4>
    /* assert tot_len invariant: (p->tot_len == p->len + (p->next? p->next->tot_len: 0) */
    LWIP_ASSERT("p->tot_len == p->len + q->tot_len", q->tot_len == p->tot_len - p->len);
  11b318:	e51b300c 	ldr	r3, [fp, #-12]
  11b31c:	e1d330b8 	ldrh	r3, [r3, #8]
  11b320:	e1a02003 	mov	r2, r3
  11b324:	e51b3010 	ldr	r3, [fp, #-16]
  11b328:	e1d330b8 	ldrh	r3, [r3, #8]
  11b32c:	e1a01003 	mov	r1, r3
  11b330:	e51b3010 	ldr	r3, [fp, #-16]
  11b334:	e1d330ba 	ldrh	r3, [r3, #10]
  11b338:	e0413003 	sub	r3, r1, r3
  11b33c:	e1520003 	cmp	r2, r3
  11b340:	0a000006 	beq	11b360 <pbuf_dechain+0x78>
  11b344:	e3070944 	movw	r0, #31044	; 0x7944
  11b348:	e3400014 	movt	r0, #20
  11b34c:	ebff9f70 	bl	103114 <rt_kprintf>
  11b350:	e300138d 	movw	r1, #909	; 0x38d
  11b354:	e3070638 	movw	r0, #30264	; 0x7638
  11b358:	e3400014 	movt	r0, #20
  11b35c:	ebffbf63 	bl	10b0f0 <sys_arch_assert>
    /* enforce invariant if assertion is disabled */
    q->tot_len = p->tot_len - p->len;
  11b360:	e51b3010 	ldr	r3, [fp, #-16]
  11b364:	e1d320b8 	ldrh	r2, [r3, #8]
  11b368:	e51b3010 	ldr	r3, [fp, #-16]
  11b36c:	e1d330ba 	ldrh	r3, [r3, #10]
  11b370:	e0423003 	sub	r3, r2, r3
  11b374:	e6ff2073 	uxth	r2, r3
  11b378:	e51b300c 	ldr	r3, [fp, #-12]
  11b37c:	e1c320b8 	strh	r2, [r3, #8]
    /* decouple pbuf from remainder */
    p->next = NULL;
  11b380:	e51b3010 	ldr	r3, [fp, #-16]
  11b384:	e3a02000 	mov	r2, #0
  11b388:	e5832000 	str	r2, [r3]
    /* total length of pbuf p is its own length only */
    p->tot_len = p->len;
  11b38c:	e51b3010 	ldr	r3, [fp, #-16]
  11b390:	e1d320ba 	ldrh	r2, [r3, #10]
  11b394:	e51b3010 	ldr	r3, [fp, #-16]
  11b398:	e1c320b8 	strh	r2, [r3, #8]
    /* q is no longer referenced by p, free it */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_dechain: unreferencing %p\n", (void *)q));
    tail_gone = pbuf_free(q);
  11b39c:	e51b000c 	ldr	r0, [fp, #-12]
  11b3a0:	ebfffec2 	bl	11aeb0 <pbuf_free>
  11b3a4:	e1a03000 	mov	r3, r0
  11b3a8:	e54b3005 	strb	r3, [fp, #-5]
                  ("pbuf_dechain: deallocated %p (as it is no longer referenced)\n", (void *)q));
    }
    /* return remaining tail or NULL if deallocated */
  }
  /* assert tot_len invariant: (p->tot_len == p->len + (p->next? p->next->tot_len: 0) */
  LWIP_ASSERT("p->tot_len == p->len", p->tot_len == p->len);
  11b3ac:	e51b3010 	ldr	r3, [fp, #-16]
  11b3b0:	e1d320b8 	ldrh	r2, [r3, #8]
  11b3b4:	e51b3010 	ldr	r3, [fp, #-16]
  11b3b8:	e1d330ba 	ldrh	r3, [r3, #10]
  11b3bc:	e1520003 	cmp	r2, r3
  11b3c0:	0a000006 	beq	11b3e0 <pbuf_dechain+0xf8>
  11b3c4:	e3070968 	movw	r0, #31080	; 0x7968
  11b3c8:	e3400014 	movt	r0, #20
  11b3cc:	ebff9f50 	bl	103114 <rt_kprintf>
  11b3d0:	e300139e 	movw	r1, #926	; 0x39e
  11b3d4:	e3070638 	movw	r0, #30264	; 0x7638
  11b3d8:	e3400014 	movt	r0, #20
  11b3dc:	ebffbf43 	bl	10b0f0 <sys_arch_assert>
  return ((tail_gone > 0) ? NULL : q);
  11b3e0:	e55b3005 	ldrb	r3, [fp, #-5]
  11b3e4:	e3530000 	cmp	r3, #0
  11b3e8:	1a000001 	bne	11b3f4 <pbuf_dechain+0x10c>
  11b3ec:	e51b300c 	ldr	r3, [fp, #-12]
  11b3f0:	ea000000 	b	11b3f8 <pbuf_dechain+0x110>
  11b3f4:	e3a03000 	mov	r3, #0
}
  11b3f8:	e1a00003 	mov	r0, r3
  11b3fc:	e24bd004 	sub	sp, fp, #4
  11b400:	e8bd8800 	pop	{fp, pc}

0011b404 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
  11b404:	e92d4800 	push	{fp, lr}
  11b408:	e28db004 	add	fp, sp, #4
  11b40c:	e24dd010 	sub	sp, sp, #16
  11b410:	e50b0010 	str	r0, [fp, #-16]
  11b414:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  u16_t offset_to=0, offset_from=0, len;
  11b418:	e3a03000 	mov	r3, #0
  11b41c:	e14b30b6 	strh	r3, [fp, #-6]
  11b420:	e3a03000 	mov	r3, #0
  11b424:	e14b30b8 	strh	r3, [fp, #-8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
  11b428:	e51b3010 	ldr	r3, [fp, #-16]
  11b42c:	e3530000 	cmp	r3, #0
  11b430:	0a000008 	beq	11b458 <pbuf_copy+0x54>
  11b434:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b438:	e3530000 	cmp	r3, #0
  11b43c:	0a000005 	beq	11b458 <pbuf_copy+0x54>
  11b440:	e51b3010 	ldr	r3, [fp, #-16]
  11b444:	e1d320b8 	ldrh	r2, [r3, #8]
  11b448:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b44c:	e1d330b8 	ldrh	r3, [r3, #8]
  11b450:	e1520003 	cmp	r2, r3
  11b454:	2a000008 	bcs	11b47c <pbuf_copy+0x78>
  11b458:	e3070980 	movw	r0, #31104	; 0x7980
  11b45c:	e3400014 	movt	r0, #20
  11b460:	ebff9f2b 	bl	103114 <rt_kprintf>
  11b464:	e30013be 	movw	r1, #958	; 0x3be
  11b468:	e3070638 	movw	r0, #30264	; 0x7638
  11b46c:	e3400014 	movt	r0, #20
  11b470:	ebffbf1e 	bl	10b0f0 <sys_arch_assert>
  11b474:	e3e0300f 	mvn	r3, #15
  11b478:	ea000094 	b	11b6d0 <pbuf_copy+0x2cc>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
  11b47c:	e51b3010 	ldr	r3, [fp, #-16]
  11b480:	e1d330ba 	ldrh	r3, [r3, #10]
  11b484:	e1a02003 	mov	r2, r3
  11b488:	e15b30b6 	ldrh	r3, [fp, #-6]
  11b48c:	e0422003 	sub	r2, r2, r3
  11b490:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b494:	e1d330ba 	ldrh	r3, [r3, #10]
  11b498:	e1a01003 	mov	r1, r3
  11b49c:	e15b30b8 	ldrh	r3, [fp, #-8]
  11b4a0:	e0413003 	sub	r3, r1, r3
  11b4a4:	e1520003 	cmp	r2, r3
  11b4a8:	ba000005 	blt	11b4c4 <pbuf_copy+0xc0>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
  11b4ac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b4b0:	e1d320ba 	ldrh	r2, [r3, #10]
  11b4b4:	e15b30b8 	ldrh	r3, [fp, #-8]
  11b4b8:	e0423003 	sub	r3, r2, r3
  11b4bc:	e14b30ba 	strh	r3, [fp, #-10]
  11b4c0:	ea000004 	b	11b4d8 <pbuf_copy+0xd4>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
  11b4c4:	e51b3010 	ldr	r3, [fp, #-16]
  11b4c8:	e1d320ba 	ldrh	r2, [r3, #10]
  11b4cc:	e15b30b6 	ldrh	r3, [fp, #-6]
  11b4d0:	e0423003 	sub	r3, r2, r3
  11b4d4:	e14b30ba 	strh	r3, [fp, #-10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
  11b4d8:	e51b3010 	ldr	r3, [fp, #-16]
  11b4dc:	e5932004 	ldr	r2, [r3, #4]
  11b4e0:	e15b30b6 	ldrh	r3, [fp, #-6]
  11b4e4:	e0820003 	add	r0, r2, r3
  11b4e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b4ec:	e5932004 	ldr	r2, [r3, #4]
  11b4f0:	e15b30b8 	ldrh	r3, [fp, #-8]
  11b4f4:	e0823003 	add	r3, r2, r3
  11b4f8:	e15b20ba 	ldrh	r2, [fp, #-10]
  11b4fc:	e1a01003 	mov	r1, r3
  11b500:	eb009623 	bl	140d94 <memcpy>
    offset_to += len;
  11b504:	e15b20b6 	ldrh	r2, [fp, #-6]
  11b508:	e15b30ba 	ldrh	r3, [fp, #-10]
  11b50c:	e0823003 	add	r3, r2, r3
  11b510:	e14b30b6 	strh	r3, [fp, #-6]
    offset_from += len;
  11b514:	e15b20b8 	ldrh	r2, [fp, #-8]
  11b518:	e15b30ba 	ldrh	r3, [fp, #-10]
  11b51c:	e0823003 	add	r3, r2, r3
  11b520:	e14b30b8 	strh	r3, [fp, #-8]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
  11b524:	e51b3010 	ldr	r3, [fp, #-16]
  11b528:	e1d330ba 	ldrh	r3, [r3, #10]
  11b52c:	e15b20b6 	ldrh	r2, [fp, #-6]
  11b530:	e1520003 	cmp	r2, r3
  11b534:	9a000006 	bls	11b554 <pbuf_copy+0x150>
  11b538:	e30709b0 	movw	r0, #31152	; 0x79b0
  11b53c:	e3400014 	movt	r0, #20
  11b540:	ebff9ef3 	bl	103114 <rt_kprintf>
  11b544:	e30013ce 	movw	r1, #974	; 0x3ce
  11b548:	e3070638 	movw	r0, #30264	; 0x7638
  11b54c:	e3400014 	movt	r0, #20
  11b550:	ebffbee6 	bl	10b0f0 <sys_arch_assert>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
  11b554:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b558:	e1d330ba 	ldrh	r3, [r3, #10]
  11b55c:	e15b20b8 	ldrh	r2, [fp, #-8]
  11b560:	e1520003 	cmp	r2, r3
  11b564:	9a000006 	bls	11b584 <pbuf_copy+0x180>
  11b568:	e30709c8 	movw	r0, #31176	; 0x79c8
  11b56c:	e3400014 	movt	r0, #20
  11b570:	ebff9ee7 	bl	103114 <rt_kprintf>
  11b574:	e30013cf 	movw	r1, #975	; 0x3cf
  11b578:	e3070638 	movw	r0, #30264	; 0x7638
  11b57c:	e3400014 	movt	r0, #20
  11b580:	ebffbeda 	bl	10b0f0 <sys_arch_assert>
    if (offset_from >= p_from->len) {
  11b584:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b588:	e1d330ba 	ldrh	r3, [r3, #10]
  11b58c:	e15b20b8 	ldrh	r2, [fp, #-8]
  11b590:	e1520003 	cmp	r2, r3
  11b594:	3a000004 	bcc	11b5ac <pbuf_copy+0x1a8>
      /* on to next p_from (if any) */
      offset_from = 0;
  11b598:	e3a03000 	mov	r3, #0
  11b59c:	e14b30b8 	strh	r3, [fp, #-8]
      p_from = p_from->next;
  11b5a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b5a4:	e5933000 	ldr	r3, [r3]
  11b5a8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    }
    if (offset_to == p_to->len) {
  11b5ac:	e51b3010 	ldr	r3, [fp, #-16]
  11b5b0:	e1d330ba 	ldrh	r3, [r3, #10]
  11b5b4:	e15b20b6 	ldrh	r2, [fp, #-6]
  11b5b8:	e1520003 	cmp	r2, r3
  11b5bc:	1a000013 	bne	11b610 <pbuf_copy+0x20c>
      /* on to next p_to (if any) */
      offset_to = 0;
  11b5c0:	e3a03000 	mov	r3, #0
  11b5c4:	e14b30b6 	strh	r3, [fp, #-6]
      p_to = p_to->next;
  11b5c8:	e51b3010 	ldr	r3, [fp, #-16]
  11b5cc:	e5933000 	ldr	r3, [r3]
  11b5d0:	e50b3010 	str	r3, [fp, #-16]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
  11b5d4:	e51b3010 	ldr	r3, [fp, #-16]
  11b5d8:	e3530000 	cmp	r3, #0
  11b5dc:	1a00000b 	bne	11b610 <pbuf_copy+0x20c>
  11b5e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b5e4:	e3530000 	cmp	r3, #0
  11b5e8:	0a000008 	beq	11b610 <pbuf_copy+0x20c>
  11b5ec:	e30709e4 	movw	r0, #31204	; 0x79e4
  11b5f0:	e3400014 	movt	r0, #20
  11b5f4:	ebff9ec6 	bl	103114 <rt_kprintf>
  11b5f8:	e30013d9 	movw	r1, #985	; 0x3d9
  11b5fc:	e3070638 	movw	r0, #30264	; 0x7638
  11b600:	e3400014 	movt	r0, #20
  11b604:	ebffbeb9 	bl	10b0f0 <sys_arch_assert>
  11b608:	e3e0300f 	mvn	r3, #15
  11b60c:	ea00002f 	b	11b6d0 <pbuf_copy+0x2cc>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
  11b610:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b614:	e3530000 	cmp	r3, #0
  11b618:	0a000012 	beq	11b668 <pbuf_copy+0x264>
  11b61c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b620:	e1d320ba 	ldrh	r2, [r3, #10]
  11b624:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b628:	e1d330b8 	ldrh	r3, [r3, #8]
  11b62c:	e1520003 	cmp	r2, r3
  11b630:	1a00000c 	bne	11b668 <pbuf_copy+0x264>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
  11b634:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b638:	e5933000 	ldr	r3, [r3]
  11b63c:	e3530000 	cmp	r3, #0
  11b640:	0a000008 	beq	11b668 <pbuf_copy+0x264>
  11b644:	e30709f4 	movw	r0, #31220	; 0x79f4
  11b648:	e3400014 	movt	r0, #20
  11b64c:	ebff9eb0 	bl	103114 <rt_kprintf>
  11b650:	e30013df 	movw	r1, #991	; 0x3df
  11b654:	e3070638 	movw	r0, #30264	; 0x7638
  11b658:	e3400014 	movt	r0, #20
  11b65c:	ebffbea3 	bl	10b0f0 <sys_arch_assert>
  11b660:	e3e03005 	mvn	r3, #5
  11b664:	ea000019 	b	11b6d0 <pbuf_copy+0x2cc>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
  11b668:	e51b3010 	ldr	r3, [fp, #-16]
  11b66c:	e3530000 	cmp	r3, #0
  11b670:	0a000012 	beq	11b6c0 <pbuf_copy+0x2bc>
  11b674:	e51b3010 	ldr	r3, [fp, #-16]
  11b678:	e1d320ba 	ldrh	r2, [r3, #10]
  11b67c:	e51b3010 	ldr	r3, [fp, #-16]
  11b680:	e1d330b8 	ldrh	r3, [r3, #8]
  11b684:	e1520003 	cmp	r2, r3
  11b688:	1a00000c 	bne	11b6c0 <pbuf_copy+0x2bc>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
  11b68c:	e51b3010 	ldr	r3, [fp, #-16]
  11b690:	e5933000 	ldr	r3, [r3]
  11b694:	e3530000 	cmp	r3, #0
  11b698:	0a000008 	beq	11b6c0 <pbuf_copy+0x2bc>
  11b69c:	e30709f4 	movw	r0, #31220	; 0x79f4
  11b6a0:	e3400014 	movt	r0, #20
  11b6a4:	ebff9e9a 	bl	103114 <rt_kprintf>
  11b6a8:	e3a01ff9 	mov	r1, #996	; 0x3e4
  11b6ac:	e3070638 	movw	r0, #30264	; 0x7638
  11b6b0:	e3400014 	movt	r0, #20
  11b6b4:	ebffbe8d 	bl	10b0f0 <sys_arch_assert>
  11b6b8:	e3e03005 	mvn	r3, #5
  11b6bc:	ea000003 	b	11b6d0 <pbuf_copy+0x2cc>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  11b6c0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b6c4:	e3530000 	cmp	r3, #0
  11b6c8:	1affff6b 	bne	11b47c <pbuf_copy+0x78>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
  11b6cc:	e3a03000 	mov	r3, #0
}
  11b6d0:	e1a00003 	mov	r0, r3
  11b6d4:	e24bd004 	sub	sp, fp, #4
  11b6d8:	e8bd8800 	pop	{fp, pc}

0011b6dc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
  11b6dc:	e92d4800 	push	{fp, lr}
  11b6e0:	e28db004 	add	fp, sp, #4
  11b6e4:	e24dd020 	sub	sp, sp, #32
  11b6e8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11b6ec:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  11b6f0:	e1a01002 	mov	r1, r2
  11b6f4:	e1a02003 	mov	r2, r3
  11b6f8:	e1a03001 	mov	r3, r1
  11b6fc:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
  11b700:	e1a03002 	mov	r3, r2
  11b704:	e14b32b0 	strh	r3, [fp, #-32]	; 0xffffffe0
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
  11b708:	e3a03000 	mov	r3, #0
  11b70c:	e14b30be 	strh	r3, [fp, #-14]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
  11b710:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b714:	e3530000 	cmp	r3, #0
  11b718:	1a000008 	bne	11b740 <pbuf_copy_partial+0x64>
  11b71c:	e3070a20 	movw	r0, #31264	; 0x7a20
  11b720:	e3400014 	movt	r0, #20
  11b724:	ebff9e7a 	bl	103114 <rt_kprintf>
  11b728:	e30013ff 	movw	r1, #1023	; 0x3ff
  11b72c:	e3070638 	movw	r0, #30264	; 0x7638
  11b730:	e3400014 	movt	r0, #20
  11b734:	ebffbe6d 	bl	10b0f0 <sys_arch_assert>
  11b738:	e3a03000 	mov	r3, #0
  11b73c:	ea000053 	b	11b890 <pbuf_copy_partial+0x1b4>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
  11b740:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11b744:	e3530000 	cmp	r3, #0
  11b748:	1a000008 	bne	11b770 <pbuf_copy_partial+0x94>
  11b74c:	e3070a40 	movw	r0, #31296	; 0x7a40
  11b750:	e3400014 	movt	r0, #20
  11b754:	ebff9e6e 	bl	103114 <rt_kprintf>
  11b758:	e3a01b01 	mov	r1, #1024	; 0x400
  11b75c:	e3070638 	movw	r0, #30264	; 0x7638
  11b760:	e3400014 	movt	r0, #20
  11b764:	ebffbe61 	bl	10b0f0 <sys_arch_assert>
  11b768:	e3a03000 	mov	r3, #0
  11b76c:	ea000047 	b	11b890 <pbuf_copy_partial+0x1b4>

  left = 0;
  11b770:	e3a03000 	mov	r3, #0
  11b774:	e14b30ba 	strh	r3, [fp, #-10]

  if ((buf == NULL) || (dataptr == NULL)) {
  11b778:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b77c:	e3530000 	cmp	r3, #0
  11b780:	0a000002 	beq	11b790 <pbuf_copy_partial+0xb4>
  11b784:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11b788:	e3530000 	cmp	r3, #0
  11b78c:	1a000001 	bne	11b798 <pbuf_copy_partial+0xbc>
    return 0;
  11b790:	e3a03000 	mov	r3, #0
  11b794:	ea00003d 	b	11b890 <pbuf_copy_partial+0x1b4>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
  11b798:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b79c:	e50b3008 	str	r3, [fp, #-8]
  11b7a0:	ea000033 	b	11b874 <pbuf_copy_partial+0x198>
    if ((offset != 0) && (offset >= p->len)) {
  11b7a4:	e15b32b0 	ldrh	r3, [fp, #-32]	; 0xffffffe0
  11b7a8:	e3530000 	cmp	r3, #0
  11b7ac:	0a00000a 	beq	11b7dc <pbuf_copy_partial+0x100>
  11b7b0:	e51b3008 	ldr	r3, [fp, #-8]
  11b7b4:	e1d330ba 	ldrh	r3, [r3, #10]
  11b7b8:	e15b22b0 	ldrh	r2, [fp, #-32]	; 0xffffffe0
  11b7bc:	e1520003 	cmp	r2, r3
  11b7c0:	3a000005 	bcc	11b7dc <pbuf_copy_partial+0x100>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
  11b7c4:	e51b3008 	ldr	r3, [fp, #-8]
  11b7c8:	e1d330ba 	ldrh	r3, [r3, #10]
  11b7cc:	e15b22b0 	ldrh	r2, [fp, #-32]	; 0xffffffe0
  11b7d0:	e0423003 	sub	r3, r2, r3
  11b7d4:	e14b32b0 	strh	r3, [fp, #-32]	; 0xffffffe0
  11b7d8:	ea000022 	b	11b868 <pbuf_copy_partial+0x18c>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
  11b7dc:	e51b3008 	ldr	r3, [fp, #-8]
  11b7e0:	e1d320ba 	ldrh	r2, [r3, #10]
  11b7e4:	e15b32b0 	ldrh	r3, [fp, #-32]	; 0xffffffe0
  11b7e8:	e0423003 	sub	r3, r2, r3
  11b7ec:	e14b30bc 	strh	r3, [fp, #-12]
      if (buf_copy_len > len) {
  11b7f0:	e15b20bc 	ldrh	r2, [fp, #-12]
  11b7f4:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11b7f8:	e1520003 	cmp	r2, r3
  11b7fc:	9a000001 	bls	11b808 <pbuf_copy_partial+0x12c>
        buf_copy_len = len;
  11b800:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11b804:	e14b30bc 	strh	r3, [fp, #-12]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
  11b808:	e15b30ba 	ldrh	r3, [fp, #-10]
  11b80c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  11b810:	e0820003 	add	r0, r2, r3
  11b814:	e51b3008 	ldr	r3, [fp, #-8]
  11b818:	e5932004 	ldr	r2, [r3, #4]
  11b81c:	e15b32b0 	ldrh	r3, [fp, #-32]	; 0xffffffe0
  11b820:	e0823003 	add	r3, r2, r3
  11b824:	e15b20bc 	ldrh	r2, [fp, #-12]
  11b828:	e1a01003 	mov	r1, r3
  11b82c:	eb009558 	bl	140d94 <memcpy>
      copied_total += buf_copy_len;
  11b830:	e15b20be 	ldrh	r2, [fp, #-14]
  11b834:	e15b30bc 	ldrh	r3, [fp, #-12]
  11b838:	e0823003 	add	r3, r2, r3
  11b83c:	e14b30be 	strh	r3, [fp, #-14]
      left += buf_copy_len;
  11b840:	e15b20ba 	ldrh	r2, [fp, #-10]
  11b844:	e15b30bc 	ldrh	r3, [fp, #-12]
  11b848:	e0823003 	add	r3, r2, r3
  11b84c:	e14b30ba 	strh	r3, [fp, #-10]
      len -= buf_copy_len;
  11b850:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  11b854:	e15b30bc 	ldrh	r3, [fp, #-12]
  11b858:	e0423003 	sub	r3, r2, r3
  11b85c:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
      offset = 0;
  11b860:	e3a03000 	mov	r3, #0
  11b864:	e14b32b0 	strh	r3, [fp, #-32]	; 0xffffffe0
  for (p = buf; len != 0 && p != NULL; p = p->next) {
  11b868:	e51b3008 	ldr	r3, [fp, #-8]
  11b86c:	e5933000 	ldr	r3, [r3]
  11b870:	e50b3008 	str	r3, [fp, #-8]
  11b874:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11b878:	e3530000 	cmp	r3, #0
  11b87c:	0a000002 	beq	11b88c <pbuf_copy_partial+0x1b0>
  11b880:	e51b3008 	ldr	r3, [fp, #-8]
  11b884:	e3530000 	cmp	r3, #0
  11b888:	1affffc5 	bne	11b7a4 <pbuf_copy_partial+0xc8>
    }
  }
  return copied_total;
  11b88c:	e15b30be 	ldrh	r3, [fp, #-14]
}
  11b890:	e1a00003 	mov	r0, r3
  11b894:	e24bd004 	sub	sp, fp, #4
  11b898:	e8bd8800 	pop	{fp, pc}

0011b89c <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf*
pbuf_skip_const(const struct pbuf* in, u16_t in_offset, u16_t* out_offset)
{
  11b89c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11b8a0:	e28db000 	add	fp, sp, #0
  11b8a4:	e24dd01c 	sub	sp, sp, #28
  11b8a8:	e50b0010 	str	r0, [fp, #-16]
  11b8ac:	e1a03001 	mov	r3, r1
  11b8b0:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  11b8b4:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  u16_t offset_left = in_offset;
  11b8b8:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11b8bc:	e14b30b6 	strh	r3, [fp, #-6]
  const struct pbuf* q = in;
  11b8c0:	e51b3010 	ldr	r3, [fp, #-16]
  11b8c4:	e50b300c 	str	r3, [fp, #-12]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
  11b8c8:	ea000007 	b	11b8ec <pbuf_skip_const+0x50>
    offset_left -= q->len;
  11b8cc:	e51b300c 	ldr	r3, [fp, #-12]
  11b8d0:	e1d330ba 	ldrh	r3, [r3, #10]
  11b8d4:	e15b20b6 	ldrh	r2, [fp, #-6]
  11b8d8:	e0423003 	sub	r3, r2, r3
  11b8dc:	e14b30b6 	strh	r3, [fp, #-6]
    q = q->next;
  11b8e0:	e51b300c 	ldr	r3, [fp, #-12]
  11b8e4:	e5933000 	ldr	r3, [r3]
  11b8e8:	e50b300c 	str	r3, [fp, #-12]
  while ((q != NULL) && (q->len <= offset_left)) {
  11b8ec:	e51b300c 	ldr	r3, [fp, #-12]
  11b8f0:	e3530000 	cmp	r3, #0
  11b8f4:	0a000004 	beq	11b90c <pbuf_skip_const+0x70>
  11b8f8:	e51b300c 	ldr	r3, [fp, #-12]
  11b8fc:	e1d330ba 	ldrh	r3, [r3, #10]
  11b900:	e15b20b6 	ldrh	r2, [fp, #-6]
  11b904:	e1520003 	cmp	r2, r3
  11b908:	2affffef 	bcs	11b8cc <pbuf_skip_const+0x30>
  }
  if (out_offset != NULL) {
  11b90c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b910:	e3530000 	cmp	r3, #0
  11b914:	0a000002 	beq	11b924 <pbuf_skip_const+0x88>
    *out_offset = offset_left;
  11b918:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b91c:	e15b20b6 	ldrh	r2, [fp, #-6]
  11b920:	e1c320b0 	strh	r2, [r3]
  }
  return q;
  11b924:	e51b300c 	ldr	r3, [fp, #-12]
}
  11b928:	e1a00003 	mov	r0, r3
  11b92c:	e28bd000 	add	sp, fp, #0
  11b930:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11b934:	e12fff1e 	bx	lr

0011b938 <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf*
pbuf_skip(struct pbuf* in, u16_t in_offset, u16_t* out_offset)
{
  11b938:	e92d4800 	push	{fp, lr}
  11b93c:	e28db004 	add	fp, sp, #4
  11b940:	e24dd018 	sub	sp, sp, #24
  11b944:	e50b0010 	str	r0, [fp, #-16]
  11b948:	e1a03001 	mov	r3, r1
  11b94c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  11b950:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  const struct pbuf* out = pbuf_skip_const(in, in_offset, out_offset);
  11b954:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11b958:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11b95c:	e1a01003 	mov	r1, r3
  11b960:	e51b0010 	ldr	r0, [fp, #-16]
  11b964:	ebffffcc 	bl	11b89c <pbuf_skip_const>
  11b968:	e50b0008 	str	r0, [fp, #-8]
  return LWIP_CONST_CAST(struct pbuf*, out);
  11b96c:	e51b3008 	ldr	r3, [fp, #-8]
}
  11b970:	e1a00003 	mov	r0, r3
  11b974:	e24bd004 	sub	sp, fp, #4
  11b978:	e8bd8800 	pop	{fp, pc}

0011b97c <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
  11b97c:	e92d4800 	push	{fp, lr}
  11b980:	e28db004 	add	fp, sp, #4
  11b984:	e24dd020 	sub	sp, sp, #32
  11b988:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11b98c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  11b990:	e1a03002 	mov	r3, r2
  11b994:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
  struct pbuf *p;
  u16_t buf_copy_len;
  u16_t total_copy_len = len;
  11b998:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11b99c:	e14b30bc 	strh	r3, [fp, #-12]
  u16_t copied_total = 0;
  11b9a0:	e3a03000 	mov	r3, #0
  11b9a4:	e14b30be 	strh	r3, [fp, #-14]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
  11b9a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b9ac:	e3530000 	cmp	r3, #0
  11b9b0:	1a000008 	bne	11b9d8 <pbuf_take+0x5c>
  11b9b4:	e3070a64 	movw	r0, #31332	; 0x7a64
  11b9b8:	e3400014 	movt	r0, #20
  11b9bc:	ebff9dd4 	bl	103114 <rt_kprintf>
  11b9c0:	e3001485 	movw	r1, #1157	; 0x485
  11b9c4:	e3070638 	movw	r0, #30264	; 0x7638
  11b9c8:	e3400014 	movt	r0, #20
  11b9cc:	ebffbdc7 	bl	10b0f0 <sys_arch_assert>
  11b9d0:	e3e0300f 	mvn	r3, #15
  11b9d4:	ea000062 	b	11bb64 <pbuf_take+0x1e8>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
  11b9d8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11b9dc:	e3530000 	cmp	r3, #0
  11b9e0:	1a000008 	bne	11ba08 <pbuf_take+0x8c>
  11b9e4:	e3070a7c 	movw	r0, #31356	; 0x7a7c
  11b9e8:	e3400014 	movt	r0, #20
  11b9ec:	ebff9dc8 	bl	103114 <rt_kprintf>
  11b9f0:	e3001486 	movw	r1, #1158	; 0x486
  11b9f4:	e3070638 	movw	r0, #30264	; 0x7638
  11b9f8:	e3400014 	movt	r0, #20
  11b9fc:	ebffbdbb 	bl	10b0f0 <sys_arch_assert>
  11ba00:	e3e0300f 	mvn	r3, #15
  11ba04:	ea000056 	b	11bb64 <pbuf_take+0x1e8>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
  11ba08:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ba0c:	e1d330b8 	ldrh	r3, [r3, #8]
  11ba10:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  11ba14:	e1520003 	cmp	r2, r3
  11ba18:	9a000008 	bls	11ba40 <pbuf_take+0xc4>
  11ba1c:	e3070a98 	movw	r0, #31384	; 0x7a98
  11ba20:	e3400014 	movt	r0, #20
  11ba24:	ebff9dba 	bl	103114 <rt_kprintf>
  11ba28:	e3001487 	movw	r1, #1159	; 0x487
  11ba2c:	e3070638 	movw	r0, #30264	; 0x7638
  11ba30:	e3400014 	movt	r0, #20
  11ba34:	ebffbdad 	bl	10b0f0 <sys_arch_assert>
  11ba38:	e3e03000 	mvn	r3, #0
  11ba3c:	ea000048 	b	11bb64 <pbuf_take+0x1e8>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
  11ba40:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ba44:	e3530000 	cmp	r3, #0
  11ba48:	0a000007 	beq	11ba6c <pbuf_take+0xf0>
  11ba4c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11ba50:	e3530000 	cmp	r3, #0
  11ba54:	0a000004 	beq	11ba6c <pbuf_take+0xf0>
  11ba58:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ba5c:	e1d330b8 	ldrh	r3, [r3, #8]
  11ba60:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  11ba64:	e1520003 	cmp	r2, r3
  11ba68:	9a000001 	bls	11ba74 <pbuf_take+0xf8>
    return ERR_ARG;
  11ba6c:	e3e0300f 	mvn	r3, #15
  11ba70:	ea00003b 	b	11bb64 <pbuf_take+0x1e8>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
  11ba74:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ba78:	e50b3008 	str	r3, [fp, #-8]
  11ba7c:	ea000026 	b	11bb1c <pbuf_take+0x1a0>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
  11ba80:	e51b3008 	ldr	r3, [fp, #-8]
  11ba84:	e3530000 	cmp	r3, #0
  11ba88:	1a000006 	bne	11baa8 <pbuf_take+0x12c>
  11ba8c:	e3070ab8 	movw	r0, #31416	; 0x7ab8
  11ba90:	e3400014 	movt	r0, #20
  11ba94:	ebff9d9e 	bl	103114 <rt_kprintf>
  11ba98:	e300148f 	movw	r1, #1167	; 0x48f
  11ba9c:	e3070638 	movw	r0, #30264	; 0x7638
  11baa0:	e3400014 	movt	r0, #20
  11baa4:	ebffbd91 	bl	10b0f0 <sys_arch_assert>
    buf_copy_len = total_copy_len;
  11baa8:	e15b30bc 	ldrh	r3, [fp, #-12]
  11baac:	e14b30ba 	strh	r3, [fp, #-10]
    if (buf_copy_len > p->len) {
  11bab0:	e51b3008 	ldr	r3, [fp, #-8]
  11bab4:	e1d330ba 	ldrh	r3, [r3, #10]
  11bab8:	e15b20ba 	ldrh	r2, [fp, #-10]
  11babc:	e1520003 	cmp	r2, r3
  11bac0:	9a000002 	bls	11bad0 <pbuf_take+0x154>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
  11bac4:	e51b3008 	ldr	r3, [fp, #-8]
  11bac8:	e1d330ba 	ldrh	r3, [r3, #10]
  11bacc:	e14b30ba 	strh	r3, [fp, #-10]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char*)dataptr)[copied_total], buf_copy_len);
  11bad0:	e51b3008 	ldr	r3, [fp, #-8]
  11bad4:	e5930004 	ldr	r0, [r3, #4]
  11bad8:	e15b30be 	ldrh	r3, [fp, #-14]
  11badc:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  11bae0:	e0823003 	add	r3, r2, r3
  11bae4:	e15b20ba 	ldrh	r2, [fp, #-10]
  11bae8:	e1a01003 	mov	r1, r3
  11baec:	eb0094a8 	bl	140d94 <memcpy>
    total_copy_len -= buf_copy_len;
  11baf0:	e15b20bc 	ldrh	r2, [fp, #-12]
  11baf4:	e15b30ba 	ldrh	r3, [fp, #-10]
  11baf8:	e0423003 	sub	r3, r2, r3
  11bafc:	e14b30bc 	strh	r3, [fp, #-12]
    copied_total += buf_copy_len;
  11bb00:	e15b20be 	ldrh	r2, [fp, #-14]
  11bb04:	e15b30ba 	ldrh	r3, [fp, #-10]
  11bb08:	e0823003 	add	r3, r2, r3
  11bb0c:	e14b30be 	strh	r3, [fp, #-14]
  for (p = buf; total_copy_len != 0; p = p->next) {
  11bb10:	e51b3008 	ldr	r3, [fp, #-8]
  11bb14:	e5933000 	ldr	r3, [r3]
  11bb18:	e50b3008 	str	r3, [fp, #-8]
  11bb1c:	e15b30bc 	ldrh	r3, [fp, #-12]
  11bb20:	e3530000 	cmp	r3, #0
  11bb24:	1affffd5 	bne	11ba80 <pbuf_take+0x104>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
  11bb28:	e15b30bc 	ldrh	r3, [fp, #-12]
  11bb2c:	e3530000 	cmp	r3, #0
  11bb30:	1a000003 	bne	11bb44 <pbuf_take+0x1c8>
  11bb34:	e15b20be 	ldrh	r2, [fp, #-14]
  11bb38:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11bb3c:	e1520003 	cmp	r2, r3
  11bb40:	0a000006 	beq	11bb60 <pbuf_take+0x1e4>
  11bb44:	e3070ad0 	movw	r0, #31440	; 0x7ad0
  11bb48:	e3400014 	movt	r0, #20
  11bb4c:	ebff9d70 	bl	103114 <rt_kprintf>
  11bb50:	e300149a 	movw	r1, #1178	; 0x49a
  11bb54:	e3070638 	movw	r0, #30264	; 0x7638
  11bb58:	e3400014 	movt	r0, #20
  11bb5c:	ebffbd63 	bl	10b0f0 <sys_arch_assert>
  return ERR_OK;
  11bb60:	e3a03000 	mov	r3, #0
}
  11bb64:	e1a00003 	mov	r0, r3
  11bb68:	e24bd004 	sub	sp, fp, #4
  11bb6c:	e8bd8800 	pop	{fp, pc}

0011bb70 <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
  11bb70:	e92d4800 	push	{fp, lr}
  11bb74:	e28db004 	add	fp, sp, #4
  11bb78:	e24dd020 	sub	sp, sp, #32
  11bb7c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11bb80:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  11bb84:	e1a01002 	mov	r1, r2
  11bb88:	e1a02003 	mov	r2, r3
  11bb8c:	e1a03001 	mov	r3, r1
  11bb90:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
  11bb94:	e1a03002 	mov	r3, r2
  11bb98:	e14b32b0 	strh	r3, [fp, #-32]	; 0xffffffe0
  u16_t target_offset;
  struct pbuf* q = pbuf_skip(buf, offset, &target_offset);
  11bb9c:	e24b2014 	sub	r2, fp, #20
  11bba0:	e15b32b0 	ldrh	r3, [fp, #-32]	; 0xffffffe0
  11bba4:	e1a01003 	mov	r1, r3
  11bba8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  11bbac:	ebffff61 	bl	11b938 <pbuf_skip>
  11bbb0:	e50b0008 	str	r0, [fp, #-8]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
  11bbb4:	e51b3008 	ldr	r3, [fp, #-8]
  11bbb8:	e3530000 	cmp	r3, #0
  11bbbc:	0a000033 	beq	11bc90 <pbuf_take_at+0x120>
  11bbc0:	e51b3008 	ldr	r3, [fp, #-8]
  11bbc4:	e1d330b8 	ldrh	r3, [r3, #8]
  11bbc8:	e1a02003 	mov	r2, r3
  11bbcc:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  11bbd0:	e1a01003 	mov	r1, r3
  11bbd4:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11bbd8:	e0813003 	add	r3, r1, r3
  11bbdc:	e1520003 	cmp	r2, r3
  11bbe0:	ba00002a 	blt	11bc90 <pbuf_take_at+0x120>
    u16_t remaining_len = len;
  11bbe4:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11bbe8:	e14b30ba 	strh	r3, [fp, #-10]
    const u8_t* src_ptr = (const u8_t*)dataptr;
  11bbec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11bbf0:	e50b3010 	str	r3, [fp, #-16]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len = LWIP_MIN(q->len - target_offset, len);
  11bbf4:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  11bbf8:	e51b3008 	ldr	r3, [fp, #-8]
  11bbfc:	e1d330ba 	ldrh	r3, [r3, #10]
  11bc00:	e1a01003 	mov	r1, r3
  11bc04:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  11bc08:	e0413003 	sub	r3, r1, r3
  11bc0c:	e1520003 	cmp	r2, r3
  11bc10:	b1a03002 	movlt	r3, r2
  11bc14:	a1a03003 	movge	r3, r3
  11bc18:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
    MEMCPY(((u8_t*)q->payload) + target_offset, dataptr, first_copy_len);
  11bc1c:	e51b3008 	ldr	r3, [fp, #-8]
  11bc20:	e5933004 	ldr	r3, [r3, #4]
  11bc24:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
  11bc28:	e0833002 	add	r3, r3, r2
  11bc2c:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  11bc30:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  11bc34:	e1a00003 	mov	r0, r3
  11bc38:	eb009455 	bl	140d94 <memcpy>
    remaining_len -= first_copy_len;
  11bc3c:	e15b20ba 	ldrh	r2, [fp, #-10]
  11bc40:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11bc44:	e0423003 	sub	r3, r2, r3
  11bc48:	e14b30ba 	strh	r3, [fp, #-10]
    src_ptr += first_copy_len;
  11bc4c:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11bc50:	e51b2010 	ldr	r2, [fp, #-16]
  11bc54:	e0823003 	add	r3, r2, r3
  11bc58:	e50b3010 	str	r3, [fp, #-16]
    if (remaining_len > 0) {
  11bc5c:	e15b30ba 	ldrh	r3, [fp, #-10]
  11bc60:	e3530000 	cmp	r3, #0
  11bc64:	0a000007 	beq	11bc88 <pbuf_take_at+0x118>
      return pbuf_take(q->next, src_ptr, remaining_len);
  11bc68:	e51b3008 	ldr	r3, [fp, #-8]
  11bc6c:	e5933000 	ldr	r3, [r3]
  11bc70:	e15b20ba 	ldrh	r2, [fp, #-10]
  11bc74:	e51b1010 	ldr	r1, [fp, #-16]
  11bc78:	e1a00003 	mov	r0, r3
  11bc7c:	ebffff3e 	bl	11b97c <pbuf_take>
  11bc80:	e1a03000 	mov	r3, r0
  11bc84:	ea000002 	b	11bc94 <pbuf_take_at+0x124>
    }
    return ERR_OK;
  11bc88:	e3a03000 	mov	r3, #0
  11bc8c:	ea000000 	b	11bc94 <pbuf_take_at+0x124>
  }
  return ERR_MEM;
  11bc90:	e3e03000 	mvn	r3, #0
}
  11bc94:	e1a00003 	mov	r0, r3
  11bc98:	e24bd004 	sub	sp, fp, #4
  11bc9c:	e8bd8800 	pop	{fp, pc}

0011bca0 <pbuf_coalesce>:
 * @return a new, single pbuf (p->next is NULL)
 *         or the old pbuf if allocation fails
 */
struct pbuf*
pbuf_coalesce(struct pbuf *p, pbuf_layer layer)
{
  11bca0:	e92d4800 	push	{fp, lr}
  11bca4:	e28db004 	add	fp, sp, #4
  11bca8:	e24dd010 	sub	sp, sp, #16
  11bcac:	e50b0010 	str	r0, [fp, #-16]
  11bcb0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct pbuf *q;
  err_t err;
  if (p->next == NULL) {
  11bcb4:	e51b3010 	ldr	r3, [fp, #-16]
  11bcb8:	e5933000 	ldr	r3, [r3]
  11bcbc:	e3530000 	cmp	r3, #0
  11bcc0:	1a000001 	bne	11bccc <pbuf_coalesce+0x2c>
    return p;
  11bcc4:	e51b3010 	ldr	r3, [fp, #-16]
  11bcc8:	ea00001d 	b	11bd44 <pbuf_coalesce+0xa4>
  }
  q = pbuf_alloc(layer, p->tot_len, PBUF_RAM);
  11bccc:	e51b3010 	ldr	r3, [fp, #-16]
  11bcd0:	e1d330b8 	ldrh	r3, [r3, #8]
  11bcd4:	e3a02000 	mov	r2, #0
  11bcd8:	e1a01003 	mov	r1, r3
  11bcdc:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  11bce0:	ebfff96b 	bl	11a294 <pbuf_alloc>
  11bce4:	e50b0008 	str	r0, [fp, #-8]
  if (q == NULL) {
  11bce8:	e51b3008 	ldr	r3, [fp, #-8]
  11bcec:	e3530000 	cmp	r3, #0
  11bcf0:	1a000001 	bne	11bcfc <pbuf_coalesce+0x5c>
    /* @todo: what do we do now? */
    return p;
  11bcf4:	e51b3010 	ldr	r3, [fp, #-16]
  11bcf8:	ea000011 	b	11bd44 <pbuf_coalesce+0xa4>
  }
  err = pbuf_copy(q, p);
  11bcfc:	e51b1010 	ldr	r1, [fp, #-16]
  11bd00:	e51b0008 	ldr	r0, [fp, #-8]
  11bd04:	ebfffdbe 	bl	11b404 <pbuf_copy>
  11bd08:	e1a03000 	mov	r3, r0
  11bd0c:	e54b3009 	strb	r3, [fp, #-9]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
  11bd10:	e15b30d9 	ldrsb	r3, [fp, #-9]
  11bd14:	e3530000 	cmp	r3, #0
  11bd18:	0a000006 	beq	11bd38 <pbuf_coalesce+0x98>
  11bd1c:	e3070ae8 	movw	r0, #31464	; 0x7ae8
  11bd20:	e3400014 	movt	r0, #20
  11bd24:	ebff9cfa 	bl	103114 <rt_kprintf>
  11bd28:	e30014dc 	movw	r1, #1244	; 0x4dc
  11bd2c:	e3070638 	movw	r0, #30264	; 0x7638
  11bd30:	e3400014 	movt	r0, #20
  11bd34:	ebffbced 	bl	10b0f0 <sys_arch_assert>
  pbuf_free(p);
  11bd38:	e51b0010 	ldr	r0, [fp, #-16]
  11bd3c:	ebfffc5b 	bl	11aeb0 <pbuf_free>
  return q;
  11bd40:	e51b3008 	ldr	r3, [fp, #-8]
}
  11bd44:	e1a00003 	mov	r0, r3
  11bd48:	e24bd004 	sub	sp, fp, #4
  11bd4c:	e8bd8800 	pop	{fp, pc}

0011bd50 <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf* p, u16_t offset)
{
  11bd50:	e92d4800 	push	{fp, lr}
  11bd54:	e28db004 	add	fp, sp, #4
  11bd58:	e24dd010 	sub	sp, sp, #16
  11bd5c:	e50b0010 	str	r0, [fp, #-16]
  11bd60:	e1a03001 	mov	r3, r1
  11bd64:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  int ret = pbuf_try_get_at(p, offset);
  11bd68:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11bd6c:	e1a01003 	mov	r1, r3
  11bd70:	e51b0010 	ldr	r0, [fp, #-16]
  11bd74:	eb00000a 	bl	11bda4 <pbuf_try_get_at>
  11bd78:	e50b0008 	str	r0, [fp, #-8]
  if (ret >= 0) {
  11bd7c:	e51b3008 	ldr	r3, [fp, #-8]
  11bd80:	e3530000 	cmp	r3, #0
  11bd84:	ba000002 	blt	11bd94 <pbuf_get_at+0x44>
    return (u8_t)ret;
  11bd88:	e51b3008 	ldr	r3, [fp, #-8]
  11bd8c:	e6ef3073 	uxtb	r3, r3
  11bd90:	ea000000 	b	11bd98 <pbuf_get_at+0x48>
  }
  return 0;
  11bd94:	e3a03000 	mov	r3, #0
}
  11bd98:	e1a00003 	mov	r0, r3
  11bd9c:	e24bd004 	sub	sp, fp, #4
  11bda0:	e8bd8800 	pop	{fp, pc}

0011bda4 <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf* p, u16_t offset)
{
  11bda4:	e92d4800 	push	{fp, lr}
  11bda8:	e28db004 	add	fp, sp, #4
  11bdac:	e24dd010 	sub	sp, sp, #16
  11bdb0:	e50b0010 	str	r0, [fp, #-16]
  11bdb4:	e1a03001 	mov	r3, r1
  11bdb8:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  u16_t q_idx;
  const struct pbuf* q = pbuf_skip_const(p, offset, &q_idx);
  11bdbc:	e24b200a 	sub	r2, fp, #10
  11bdc0:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11bdc4:	e1a01003 	mov	r1, r3
  11bdc8:	e51b0010 	ldr	r0, [fp, #-16]
  11bdcc:	ebfffeb2 	bl	11b89c <pbuf_skip_const>
  11bdd0:	e50b0008 	str	r0, [fp, #-8]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
  11bdd4:	e51b3008 	ldr	r3, [fp, #-8]
  11bdd8:	e3530000 	cmp	r3, #0
  11bddc:	0a00000a 	beq	11be0c <pbuf_try_get_at+0x68>
  11bde0:	e51b3008 	ldr	r3, [fp, #-8]
  11bde4:	e1d320ba 	ldrh	r2, [r3, #10]
  11bde8:	e15b30ba 	ldrh	r3, [fp, #-10]
  11bdec:	e1520003 	cmp	r2, r3
  11bdf0:	9a000005 	bls	11be0c <pbuf_try_get_at+0x68>
    return ((u8_t*)q->payload)[q_idx];
  11bdf4:	e51b3008 	ldr	r3, [fp, #-8]
  11bdf8:	e5933004 	ldr	r3, [r3, #4]
  11bdfc:	e15b20ba 	ldrh	r2, [fp, #-10]
  11be00:	e0833002 	add	r3, r3, r2
  11be04:	e5d33000 	ldrb	r3, [r3]
  11be08:	ea000000 	b	11be10 <pbuf_try_get_at+0x6c>
  }
  return -1;
  11be0c:	e3e03000 	mvn	r3, #0
}
  11be10:	e1a00003 	mov	r0, r3
  11be14:	e24bd004 	sub	sp, fp, #4
  11be18:	e8bd8800 	pop	{fp, pc}

0011be1c <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf* p, u16_t offset, u8_t data)
{
  11be1c:	e92d4800 	push	{fp, lr}
  11be20:	e28db004 	add	fp, sp, #4
  11be24:	e24dd010 	sub	sp, sp, #16
  11be28:	e50b0010 	str	r0, [fp, #-16]
  11be2c:	e1a03001 	mov	r3, r1
  11be30:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  11be34:	e1a03002 	mov	r3, r2
  11be38:	e54b3013 	strb	r3, [fp, #-19]	; 0xffffffed
  u16_t q_idx;
  struct pbuf* q = pbuf_skip(p, offset, &q_idx);
  11be3c:	e24b200a 	sub	r2, fp, #10
  11be40:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11be44:	e1a01003 	mov	r1, r3
  11be48:	e51b0010 	ldr	r0, [fp, #-16]
  11be4c:	ebfffeb9 	bl	11b938 <pbuf_skip>
  11be50:	e50b0008 	str	r0, [fp, #-8]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
  11be54:	e51b3008 	ldr	r3, [fp, #-8]
  11be58:	e3530000 	cmp	r3, #0
  11be5c:	0a00000a 	beq	11be8c <pbuf_put_at+0x70>
  11be60:	e51b3008 	ldr	r3, [fp, #-8]
  11be64:	e1d320ba 	ldrh	r2, [r3, #10]
  11be68:	e15b30ba 	ldrh	r3, [fp, #-10]
  11be6c:	e1520003 	cmp	r2, r3
  11be70:	9a000005 	bls	11be8c <pbuf_put_at+0x70>
    ((u8_t*)q->payload)[q_idx] = data;
  11be74:	e51b3008 	ldr	r3, [fp, #-8]
  11be78:	e5933004 	ldr	r3, [r3, #4]
  11be7c:	e15b20ba 	ldrh	r2, [fp, #-10]
  11be80:	e0833002 	add	r3, r3, r2
  11be84:	e55b2013 	ldrb	r2, [fp, #-19]	; 0xffffffed
  11be88:	e5c32000 	strb	r2, [r3]
  }
}
  11be8c:	e320f000 	nop	{0}
  11be90:	e24bd004 	sub	sp, fp, #4
  11be94:	e8bd8800 	pop	{fp, pc}

0011be98 <pbuf_memcmp>:
 * @return zero if equal, nonzero otherwise
 *         (0xffff if p is too short, diffoffset+1 otherwise)
 */
u16_t
pbuf_memcmp(const struct pbuf* p, u16_t offset, const void* s2, u16_t n)
{
  11be98:	e92d4800 	push	{fp, lr}
  11be9c:	e28db004 	add	fp, sp, #4
  11bea0:	e24dd020 	sub	sp, sp, #32
  11bea4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11bea8:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  11beac:	e1a02003 	mov	r2, r3
  11beb0:	e1a03001 	mov	r3, r1
  11beb4:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
  11beb8:	e1a03002 	mov	r3, r2
  11bebc:	e14b31bc 	strh	r3, [fp, #-28]	; 0xffffffe4
  u16_t start = offset;
  11bec0:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  11bec4:	e14b30b6 	strh	r3, [fp, #-6]
  const struct pbuf* q = p;
  11bec8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11becc:	e50b300c 	str	r3, [fp, #-12]
  u16_t i;
 
  /* pbuf long enough to perform check? */
  if(p->tot_len < (offset + n)) {
  11bed0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11bed4:	e1d330b8 	ldrh	r3, [r3, #8]
  11bed8:	e1a01003 	mov	r1, r3
  11bedc:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
  11bee0:	e15b31bc 	ldrh	r3, [fp, #-28]	; 0xffffffe4
  11bee4:	e0823003 	add	r3, r2, r3
  11bee8:	e1510003 	cmp	r1, r3
  11beec:	aa000009 	bge	11bf18 <pbuf_memcmp+0x80>
    return 0xffff;
  11bef0:	e30f3fff 	movw	r3, #65535	; 0xffff
  11bef4:	ea000030 	b	11bfbc <pbuf_memcmp+0x124>
  }
 
  /* get the correct pbuf from chain. We know it succeeds because of p->tot_len check above. */
  while ((q != NULL) && (q->len <= start)) {
    start -= q->len;
  11bef8:	e51b300c 	ldr	r3, [fp, #-12]
  11befc:	e1d330ba 	ldrh	r3, [r3, #10]
  11bf00:	e15b20b6 	ldrh	r2, [fp, #-6]
  11bf04:	e0423003 	sub	r3, r2, r3
  11bf08:	e14b30b6 	strh	r3, [fp, #-6]
    q = q->next;
  11bf0c:	e51b300c 	ldr	r3, [fp, #-12]
  11bf10:	e5933000 	ldr	r3, [r3]
  11bf14:	e50b300c 	str	r3, [fp, #-12]
  while ((q != NULL) && (q->len <= start)) {
  11bf18:	e51b300c 	ldr	r3, [fp, #-12]
  11bf1c:	e3530000 	cmp	r3, #0
  11bf20:	0a000004 	beq	11bf38 <pbuf_memcmp+0xa0>
  11bf24:	e51b300c 	ldr	r3, [fp, #-12]
  11bf28:	e1d330ba 	ldrh	r3, [r3, #10]
  11bf2c:	e15b20b6 	ldrh	r2, [fp, #-6]
  11bf30:	e1520003 	cmp	r2, r3
  11bf34:	2affffef 	bcs	11bef8 <pbuf_memcmp+0x60>
  }
 
  /* return requested data if pbuf is OK */
  for (i = 0; i < n; i++) {
  11bf38:	e3a03000 	mov	r3, #0
  11bf3c:	e14b30be 	strh	r3, [fp, #-14]
  11bf40:	ea000018 	b	11bfa8 <pbuf_memcmp+0x110>
    /* We know pbuf_get_at() succeeds because of p->tot_len check above. */
    u8_t a = pbuf_get_at(q, start + i);
  11bf44:	e15b20b6 	ldrh	r2, [fp, #-6]
  11bf48:	e15b30be 	ldrh	r3, [fp, #-14]
  11bf4c:	e0823003 	add	r3, r2, r3
  11bf50:	e6ff3073 	uxth	r3, r3
  11bf54:	e1a01003 	mov	r1, r3
  11bf58:	e51b000c 	ldr	r0, [fp, #-12]
  11bf5c:	ebffff7b 	bl	11bd50 <pbuf_get_at>
  11bf60:	e1a03000 	mov	r3, r0
  11bf64:	e54b300f 	strb	r3, [fp, #-15]
    u8_t b = ((const u8_t*)s2)[i];
  11bf68:	e15b30be 	ldrh	r3, [fp, #-14]
  11bf6c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  11bf70:	e0823003 	add	r3, r2, r3
  11bf74:	e5d33000 	ldrb	r3, [r3]
  11bf78:	e54b3010 	strb	r3, [fp, #-16]
    if (a != b) {
  11bf7c:	e55b200f 	ldrb	r2, [fp, #-15]
  11bf80:	e55b3010 	ldrb	r3, [fp, #-16]
  11bf84:	e1520003 	cmp	r2, r3
  11bf88:	0a000003 	beq	11bf9c <pbuf_memcmp+0x104>
      return i+1;
  11bf8c:	e15b30be 	ldrh	r3, [fp, #-14]
  11bf90:	e2833001 	add	r3, r3, #1
  11bf94:	e6ff3073 	uxth	r3, r3
  11bf98:	ea000007 	b	11bfbc <pbuf_memcmp+0x124>
  for (i = 0; i < n; i++) {
  11bf9c:	e15b30be 	ldrh	r3, [fp, #-14]
  11bfa0:	e2833001 	add	r3, r3, #1
  11bfa4:	e14b30be 	strh	r3, [fp, #-14]
  11bfa8:	e15b20be 	ldrh	r2, [fp, #-14]
  11bfac:	e15b31bc 	ldrh	r3, [fp, #-28]	; 0xffffffe4
  11bfb0:	e1520003 	cmp	r2, r3
  11bfb4:	3affffe2 	bcc	11bf44 <pbuf_memcmp+0xac>
    }
  }
  return 0;
  11bfb8:	e3a03000 	mov	r3, #0
}
  11bfbc:	e1a00003 	mov	r0, r3
  11bfc0:	e24bd004 	sub	sp, fp, #4
  11bfc4:	e8bd8800 	pop	{fp, pc}

0011bfc8 <pbuf_memfind>:
 * @param start_offset offset into p at which to start searching
 * @return 0xFFFF if substr was not found in p or the index where it was found
 */
u16_t
pbuf_memfind(const struct pbuf* p, const void* mem, u16_t mem_len, u16_t start_offset)
{
  11bfc8:	e92d4800 	push	{fp, lr}
  11bfcc:	e28db004 	add	fp, sp, #4
  11bfd0:	e24dd018 	sub	sp, sp, #24
  11bfd4:	e50b0010 	str	r0, [fp, #-16]
  11bfd8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  11bfdc:	e1a01002 	mov	r1, r2
  11bfe0:	e1a02003 	mov	r2, r3
  11bfe4:	e1a03001 	mov	r3, r1
  11bfe8:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  11bfec:	e1a03002 	mov	r3, r2
  11bff0:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8
  u16_t i;
  u16_t max = p->tot_len - mem_len;
  11bff4:	e51b3010 	ldr	r3, [fp, #-16]
  11bff8:	e1d320b8 	ldrh	r2, [r3, #8]
  11bffc:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  11c000:	e0423003 	sub	r3, r2, r3
  11c004:	e14b30b8 	strh	r3, [fp, #-8]
  if (p->tot_len >= mem_len + start_offset) {
  11c008:	e51b3010 	ldr	r3, [fp, #-16]
  11c00c:	e1d330b8 	ldrh	r3, [r3, #8]
  11c010:	e1a01003 	mov	r1, r3
  11c014:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  11c018:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
  11c01c:	e0823003 	add	r3, r2, r3
  11c020:	e1510003 	cmp	r1, r3
  11c024:	ba000015 	blt	11c080 <pbuf_memfind+0xb8>
    for (i = start_offset; i <= max; i++) {
  11c028:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
  11c02c:	e14b30b6 	strh	r3, [fp, #-6]
  11c030:	ea00000e 	b	11c070 <pbuf_memfind+0xa8>
      u16_t plus = pbuf_memcmp(p, i, mem, mem_len);
  11c034:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  11c038:	e15b10b6 	ldrh	r1, [fp, #-6]
  11c03c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11c040:	e51b0010 	ldr	r0, [fp, #-16]
  11c044:	ebffff93 	bl	11be98 <pbuf_memcmp>
  11c048:	e1a03000 	mov	r3, r0
  11c04c:	e14b30ba 	strh	r3, [fp, #-10]
      if (plus == 0) {
  11c050:	e15b30ba 	ldrh	r3, [fp, #-10]
  11c054:	e3530000 	cmp	r3, #0
  11c058:	1a000001 	bne	11c064 <pbuf_memfind+0x9c>
        return i;
  11c05c:	e15b30b6 	ldrh	r3, [fp, #-6]
  11c060:	ea000007 	b	11c084 <pbuf_memfind+0xbc>
    for (i = start_offset; i <= max; i++) {
  11c064:	e15b30b6 	ldrh	r3, [fp, #-6]
  11c068:	e2833001 	add	r3, r3, #1
  11c06c:	e14b30b6 	strh	r3, [fp, #-6]
  11c070:	e15b20b6 	ldrh	r2, [fp, #-6]
  11c074:	e15b30b8 	ldrh	r3, [fp, #-8]
  11c078:	e1520003 	cmp	r2, r3
  11c07c:	9affffec 	bls	11c034 <pbuf_memfind+0x6c>
      }
    }
  }
  return 0xFFFF;
  11c080:	e30f3fff 	movw	r3, #65535	; 0xffff
}
  11c084:	e1a00003 	mov	r0, r3
  11c088:	e24bd004 	sub	sp, fp, #4
  11c08c:	e8bd8800 	pop	{fp, pc}

0011c090 <pbuf_strstr>:
 * @param substr string to search for in p, maximum length is 0xFFFE
 * @return 0xFFFF if substr was not found in p or the index where it was found
 */
u16_t
pbuf_strstr(const struct pbuf* p, const char* substr)
{
  11c090:	e92d4800 	push	{fp, lr}
  11c094:	e28db004 	add	fp, sp, #4
  11c098:	e24dd010 	sub	sp, sp, #16
  11c09c:	e50b0010 	str	r0, [fp, #-16]
  11c0a0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  size_t substr_len;
  if ((substr == NULL) || (substr[0] == 0) || (p->tot_len == 0xFFFF)) {
  11c0a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c0a8:	e3530000 	cmp	r3, #0
  11c0ac:	0a000008 	beq	11c0d4 <pbuf_strstr+0x44>
  11c0b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c0b4:	e5d33000 	ldrb	r3, [r3]
  11c0b8:	e3530000 	cmp	r3, #0
  11c0bc:	0a000004 	beq	11c0d4 <pbuf_strstr+0x44>
  11c0c0:	e51b3010 	ldr	r3, [fp, #-16]
  11c0c4:	e1d330b8 	ldrh	r3, [r3, #8]
  11c0c8:	e30f2fff 	movw	r2, #65535	; 0xffff
  11c0cc:	e1530002 	cmp	r3, r2
  11c0d0:	1a000001 	bne	11c0dc <pbuf_strstr+0x4c>
    return 0xFFFF;
  11c0d4:	e30f3fff 	movw	r3, #65535	; 0xffff
  11c0d8:	ea00000f 	b	11c11c <pbuf_strstr+0x8c>
  }
  substr_len = strlen(substr);
  11c0dc:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  11c0e0:	eb0094f4 	bl	1414b8 <strlen>
  11c0e4:	e50b0008 	str	r0, [fp, #-8]
  if (substr_len >= 0xFFFF) {
  11c0e8:	e51b3008 	ldr	r3, [fp, #-8]
  11c0ec:	e30f2ffe 	movw	r2, #65534	; 0xfffe
  11c0f0:	e1530002 	cmp	r3, r2
  11c0f4:	9a000001 	bls	11c100 <pbuf_strstr+0x70>
    return 0xFFFF;
  11c0f8:	e30f3fff 	movw	r3, #65535	; 0xffff
  11c0fc:	ea000006 	b	11c11c <pbuf_strstr+0x8c>
  }
  return pbuf_memfind(p, substr, (u16_t)substr_len, 0);
  11c100:	e51b3008 	ldr	r3, [fp, #-8]
  11c104:	e6ff2073 	uxth	r2, r3
  11c108:	e3a03000 	mov	r3, #0
  11c10c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  11c110:	e51b0010 	ldr	r0, [fp, #-16]
  11c114:	ebffffab 	bl	11bfc8 <pbuf_memfind>
  11c118:	e1a03000 	mov	r3, r0
}
  11c11c:	e1a00003 	mov	r0, r3
  11c120:	e24bd004 	sub	sp, fp, #4
  11c124:	e8bd8800 	pop	{fp, pc}

0011c128 <raw_input_match>:
/** The list of RAW PCBs */
static struct raw_pcb *raw_pcbs;

static u8_t
raw_input_match(struct raw_pcb *pcb, u8_t broadcast)
{
  11c128:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11c12c:	e28db000 	add	fp, sp, #0
  11c130:	e24dd00c 	sub	sp, sp, #12
  11c134:	e50b0008 	str	r0, [fp, #-8]
  11c138:	e1a03001 	mov	r3, r1
  11c13c:	e54b3009 	strb	r3, [fp, #-9]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: receive all broadcasts
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
  11c140:	e55b3009 	ldrb	r3, [fp, #-9]
  11c144:	e3530000 	cmp	r3, #0
  11c148:	0a00000d 	beq	11c184 <raw_input_match+0x5c>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
  11c14c:	e51b3008 	ldr	r3, [fp, #-8]
  11c150:	e5d33008 	ldrb	r3, [r3, #8]
  11c154:	e2033020 	and	r3, r3, #32
  11c158:	e3530000 	cmp	r3, #0
  11c15c:	0a000018 	beq	11c1c4 <raw_input_match+0x9c>
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip))) {
  11c160:	e51b3008 	ldr	r3, [fp, #-8]
  11c164:	e3530000 	cmp	r3, #0
  11c168:	0a000003 	beq	11c17c <raw_input_match+0x54>
  11c16c:	e51b3008 	ldr	r3, [fp, #-8]
  11c170:	e5933000 	ldr	r3, [r3]
  11c174:	e3530000 	cmp	r3, #0
  11c178:	1a000011 	bne	11c1c4 <raw_input_match+0x9c>
          return 1;
  11c17c:	e3a03001 	mov	r3, #1
  11c180:	ea000010 	b	11c1c8 <raw_input_match+0xa0>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: catch all or exact match */
    if (ip_addr_isany(&pcb->local_ip) ||
  11c184:	e51b3008 	ldr	r3, [fp, #-8]
  11c188:	e3530000 	cmp	r3, #0
  11c18c:	0a00000a 	beq	11c1bc <raw_input_match+0x94>
  11c190:	e51b3008 	ldr	r3, [fp, #-8]
  11c194:	e5933000 	ldr	r3, [r3]
  11c198:	e3530000 	cmp	r3, #0
  11c19c:	0a000006 	beq	11c1bc <raw_input_match+0x94>
       ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
  11c1a0:	e51b3008 	ldr	r3, [fp, #-8]
  11c1a4:	e5932000 	ldr	r2, [r3]
  11c1a8:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  11c1ac:	e3403014 	movt	r3, #20
  11c1b0:	e5933014 	ldr	r3, [r3, #20]
    if (ip_addr_isany(&pcb->local_ip) ||
  11c1b4:	e1520003 	cmp	r2, r3
  11c1b8:	1a000001 	bne	11c1c4 <raw_input_match+0x9c>
      return 1;
  11c1bc:	e3a03001 	mov	r3, #1
  11c1c0:	ea000000 	b	11c1c8 <raw_input_match+0xa0>
    }
  }

  return 0;
  11c1c4:	e3a03000 	mov	r3, #0
}
  11c1c8:	e1a00003 	mov	r0, r3
  11c1cc:	e28bd000 	add	sp, fp, #0
  11c1d0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11c1d4:	e12fff1e 	bx	lr

0011c1d8 <raw_input>:
 *           caller).
 *
 */
u8_t
raw_input(struct pbuf *p, struct netif *inp)
{
  11c1d8:	e92d4810 	push	{r4, fp, lr}
  11c1dc:	e28db008 	add	fp, sp, #8
  11c1e0:	e24dd01c 	sub	sp, sp, #28
  11c1e4:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  11c1e8:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  struct raw_pcb *pcb, *prev;
  s16_t proto;
  u8_t eaten = 0;
  11c1ec:	e3a03000 	mov	r3, #0
  11c1f0:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
  11c1f4:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  11c1f8:	e3403014 	movt	r3, #20
  11c1fc:	e5932014 	ldr	r2, [r3, #20]
  11c200:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  11c204:	e3403014 	movt	r3, #20
  11c208:	e5933000 	ldr	r3, [r3]
  11c20c:	e1a01003 	mov	r1, r3
  11c210:	e1a00002 	mov	r0, r2
  11c214:	eb0058bd 	bl	132510 <ip4_addr_isbroadcast_u32>
  11c218:	e1a03000 	mov	r3, r0
  11c21c:	e54b3016 	strb	r3, [fp, #-22]	; 0xffffffea
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    proto = IPH_PROTO((struct ip_hdr *)p->payload);
  11c220:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c224:	e5933004 	ldr	r3, [r3, #4]
  11c228:	e5d33009 	ldrb	r3, [r3, #9]
  11c22c:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8
  }
#endif /* LWIP_IPV4 */

  prev = NULL;
  11c230:	e3a03000 	mov	r3, #0
  11c234:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  pcb = raw_pcbs;
  11c238:	e30e3228 	movw	r3, #57896	; 0xe228
  11c23c:	e3403014 	movt	r3, #20
  11c240:	e5933000 	ldr	r3, [r3]
  11c244:	e50b3010 	str	r3, [fp, #-16]
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while ((eaten == 0) && (pcb != NULL)) {
  11c248:	ea000046 	b	11c368 <raw_input+0x190>
    if ((pcb->protocol == proto) && raw_input_match(pcb, broadcast)) {
  11c24c:	e51b3010 	ldr	r3, [fp, #-16]
  11c250:	e5d33010 	ldrb	r3, [r3, #16]
  11c254:	e1a02003 	mov	r2, r3
  11c258:	e15b31f8 	ldrsh	r3, [fp, #-24]	; 0xffffffe8
  11c25c:	e1520003 	cmp	r2, r3
  11c260:	1a00003b 	bne	11c354 <raw_input+0x17c>
  11c264:	e55b3016 	ldrb	r3, [fp, #-22]	; 0xffffffea
  11c268:	e1a01003 	mov	r1, r3
  11c26c:	e51b0010 	ldr	r0, [fp, #-16]
  11c270:	ebffffac 	bl	11c128 <raw_input_match>
  11c274:	e1a03000 	mov	r3, r0
  11c278:	e3530000 	cmp	r3, #0
  11c27c:	0a000034 	beq	11c354 <raw_input+0x17c>
      /* receive callback function available? */
      if (pcb->recv != NULL) {
  11c280:	e51b3010 	ldr	r3, [fp, #-16]
  11c284:	e5933014 	ldr	r3, [r3, #20]
  11c288:	e3530000 	cmp	r3, #0
  11c28c:	0a000030 	beq	11c354 <raw_input+0x17c>
#ifndef LWIP_NOASSERT
        void* old_payload = p->payload;
  11c290:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c294:	e5933004 	ldr	r3, [r3, #4]
  11c298:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
#endif
        /* the receive callback function did not eat the packet? */
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
  11c29c:	e51b3010 	ldr	r3, [fp, #-16]
  11c2a0:	e5934014 	ldr	r4, [r3, #20]
  11c2a4:	e51b3010 	ldr	r3, [fp, #-16]
  11c2a8:	e5930018 	ldr	r0, [r3, #24]
  11c2ac:	e59f30dc 	ldr	r3, [pc, #220]	; 11c390 <raw_input+0x1b8>
  11c2b0:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  11c2b4:	e51b1010 	ldr	r1, [fp, #-16]
  11c2b8:	e12fff34 	blx	r4
  11c2bc:	e1a03000 	mov	r3, r0
  11c2c0:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
        if (eaten != 0) {
  11c2c4:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  11c2c8:	e3530000 	cmp	r3, #0
  11c2cc:	0a000014 	beq	11c324 <raw_input+0x14c>
          /* receive function ate the packet */
          p = NULL;
  11c2d0:	e3a03000 	mov	r3, #0
  11c2d4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
          eaten = 1;
  11c2d8:	e3a03001 	mov	r3, #1
  11c2dc:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
          if (prev != NULL) {
  11c2e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c2e4:	e3530000 	cmp	r3, #0
  11c2e8:	0a000019 	beq	11c354 <raw_input+0x17c>
          /* move the pcb to the front of raw_pcbs so that is
             found faster next time */
            prev->next = pcb->next;
  11c2ec:	e51b3010 	ldr	r3, [fp, #-16]
  11c2f0:	e593200c 	ldr	r2, [r3, #12]
  11c2f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c2f8:	e583200c 	str	r2, [r3, #12]
            pcb->next = raw_pcbs;
  11c2fc:	e30e3228 	movw	r3, #57896	; 0xe228
  11c300:	e3403014 	movt	r3, #20
  11c304:	e5932000 	ldr	r2, [r3]
  11c308:	e51b3010 	ldr	r3, [fp, #-16]
  11c30c:	e583200c 	str	r2, [r3, #12]
            raw_pcbs = pcb;
  11c310:	e30e3228 	movw	r3, #57896	; 0xe228
  11c314:	e3403014 	movt	r3, #20
  11c318:	e51b2010 	ldr	r2, [fp, #-16]
  11c31c:	e5832000 	str	r2, [r3]
  11c320:	ea00000b 	b	11c354 <raw_input+0x17c>
          }
        } else {
          /* sanity-check that the receive callback did not alter the pbuf */
          LWIP_ASSERT("raw pcb recv callback altered pbuf payload pointer without eating packet",
  11c324:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c328:	e5933004 	ldr	r3, [r3, #4]
  11c32c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  11c330:	e1520003 	cmp	r2, r3
  11c334:	0a000006 	beq	11c354 <raw_input+0x17c>
  11c338:	e3070afc 	movw	r0, #31484	; 0x7afc
  11c33c:	e3400014 	movt	r0, #20
  11c340:	ebff9b73 	bl	103114 <rt_kprintf>
  11c344:	e3a010b6 	mov	r1, #182	; 0xb6
  11c348:	e3070b48 	movw	r0, #31560	; 0x7b48
  11c34c:	e3400014 	movt	r0, #20
  11c350:	ebffbb66 	bl	10b0f0 <sys_arch_assert>
        }
      }
      /* no receive callback function was set for this raw PCB */
    }
    /* drop the packet */
    prev = pcb;
  11c354:	e51b3010 	ldr	r3, [fp, #-16]
  11c358:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    pcb = pcb->next;
  11c35c:	e51b3010 	ldr	r3, [fp, #-16]
  11c360:	e593300c 	ldr	r3, [r3, #12]
  11c364:	e50b3010 	str	r3, [fp, #-16]
  while ((eaten == 0) && (pcb != NULL)) {
  11c368:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  11c36c:	e3530000 	cmp	r3, #0
  11c370:	1a000002 	bne	11c380 <raw_input+0x1a8>
  11c374:	e51b3010 	ldr	r3, [fp, #-16]
  11c378:	e3530000 	cmp	r3, #0
  11c37c:	1affffb2 	bne	11c24c <raw_input+0x74>
  }
  return eaten;
  11c380:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
}
  11c384:	e1a00003 	mov	r0, r3
  11c388:	e24bd008 	sub	sp, fp, #8
  11c38c:	e8bd8810 	pop	{r4, fp, pc}
  11c390:	0014f608 	.word	0x0014f608

0011c394 <raw_bind>:
 *
 * @see raw_disconnect()
 */
err_t
raw_bind(struct raw_pcb *pcb, const ip_addr_t *ipaddr)
{
  11c394:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11c398:	e28db000 	add	fp, sp, #0
  11c39c:	e24dd00c 	sub	sp, sp, #12
  11c3a0:	e50b0008 	str	r0, [fp, #-8]
  11c3a4:	e50b100c 	str	r1, [fp, #-12]
  if ((pcb == NULL) || (ipaddr == NULL)) {
  11c3a8:	e51b3008 	ldr	r3, [fp, #-8]
  11c3ac:	e3530000 	cmp	r3, #0
  11c3b0:	0a000002 	beq	11c3c0 <raw_bind+0x2c>
  11c3b4:	e51b300c 	ldr	r3, [fp, #-12]
  11c3b8:	e3530000 	cmp	r3, #0
  11c3bc:	1a000001 	bne	11c3c8 <raw_bind+0x34>
    return ERR_VAL;
  11c3c0:	e3e03005 	mvn	r3, #5
  11c3c4:	ea000009 	b	11c3f0 <raw_bind+0x5c>
  }
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
  11c3c8:	e51b300c 	ldr	r3, [fp, #-12]
  11c3cc:	e3530000 	cmp	r3, #0
  11c3d0:	0a000002 	beq	11c3e0 <raw_bind+0x4c>
  11c3d4:	e51b300c 	ldr	r3, [fp, #-12]
  11c3d8:	e5933000 	ldr	r3, [r3]
  11c3dc:	ea000000 	b	11c3e4 <raw_bind+0x50>
  11c3e0:	e3a03000 	mov	r3, #0
  11c3e4:	e51b2008 	ldr	r2, [fp, #-8]
  11c3e8:	e5823000 	str	r3, [r2]
  return ERR_OK;
  11c3ec:	e3a03000 	mov	r3, #0
}
  11c3f0:	e1a00003 	mov	r0, r3
  11c3f4:	e28bd000 	add	sp, fp, #0
  11c3f8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11c3fc:	e12fff1e 	bx	lr

0011c400 <raw_connect>:
 *
 * @see raw_disconnect() and raw_sendto()
 */
err_t
raw_connect(struct raw_pcb *pcb, const ip_addr_t *ipaddr)
{
  11c400:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11c404:	e28db000 	add	fp, sp, #0
  11c408:	e24dd00c 	sub	sp, sp, #12
  11c40c:	e50b0008 	str	r0, [fp, #-8]
  11c410:	e50b100c 	str	r1, [fp, #-12]
  if ((pcb == NULL) || (ipaddr == NULL)) {
  11c414:	e51b3008 	ldr	r3, [fp, #-8]
  11c418:	e3530000 	cmp	r3, #0
  11c41c:	0a000002 	beq	11c42c <raw_connect+0x2c>
  11c420:	e51b300c 	ldr	r3, [fp, #-12]
  11c424:	e3530000 	cmp	r3, #0
  11c428:	1a000001 	bne	11c434 <raw_connect+0x34>
    return ERR_VAL;
  11c42c:	e3e03005 	mvn	r3, #5
  11c430:	ea000009 	b	11c45c <raw_connect+0x5c>
  }
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
  11c434:	e51b300c 	ldr	r3, [fp, #-12]
  11c438:	e3530000 	cmp	r3, #0
  11c43c:	0a000002 	beq	11c44c <raw_connect+0x4c>
  11c440:	e51b300c 	ldr	r3, [fp, #-12]
  11c444:	e5933000 	ldr	r3, [r3]
  11c448:	ea000000 	b	11c450 <raw_connect+0x50>
  11c44c:	e3a03000 	mov	r3, #0
  11c450:	e51b2008 	ldr	r2, [fp, #-8]
  11c454:	e5823004 	str	r3, [r2, #4]
  return ERR_OK;
  11c458:	e3a03000 	mov	r3, #0
}
  11c45c:	e1a00003 	mov	r0, r3
  11c460:	e28bd000 	add	sp, fp, #0
  11c464:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11c468:	e12fff1e 	bx	lr

0011c46c <raw_recv>:
 * - not free the packet, and return zero. The packet will be matched
 *   against further PCBs and/or forwarded to another protocol layers.
 */
void
raw_recv(struct raw_pcb *pcb, raw_recv_fn recv, void *recv_arg)
{
  11c46c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11c470:	e28db000 	add	fp, sp, #0
  11c474:	e24dd014 	sub	sp, sp, #20
  11c478:	e50b0008 	str	r0, [fp, #-8]
  11c47c:	e50b100c 	str	r1, [fp, #-12]
  11c480:	e50b2010 	str	r2, [fp, #-16]
  /* remember recv() callback and user data */
  pcb->recv = recv;
  11c484:	e51b3008 	ldr	r3, [fp, #-8]
  11c488:	e51b200c 	ldr	r2, [fp, #-12]
  11c48c:	e5832014 	str	r2, [r3, #20]
  pcb->recv_arg = recv_arg;
  11c490:	e51b3008 	ldr	r3, [fp, #-8]
  11c494:	e51b2010 	ldr	r2, [fp, #-16]
  11c498:	e5832018 	str	r2, [r3, #24]
}
  11c49c:	e320f000 	nop	{0}
  11c4a0:	e28bd000 	add	sp, fp, #0
  11c4a4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11c4a8:	e12fff1e 	bx	lr

0011c4ac <raw_sendto>:
 * @param ipaddr the destination address of the IP packet
 *
 */
err_t
raw_sendto(struct raw_pcb *pcb, struct pbuf *p, const ip_addr_t *ipaddr)
{
  11c4ac:	e92d4800 	push	{fp, lr}
  11c4b0:	e28db004 	add	fp, sp, #4
  11c4b4:	e24dd038 	sub	sp, sp, #56	; 0x38
  11c4b8:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  11c4bc:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  11c4c0:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  struct netif *netif;
  const ip_addr_t *src_ip;
  struct pbuf *q; /* q will be sent down the stack */
  s16_t header_size;

  if ((pcb == NULL) || (ipaddr == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, ipaddr)) {
  11c4c4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c4c8:	e3530000 	cmp	r3, #0
  11c4cc:	0a000002 	beq	11c4dc <raw_sendto+0x30>
  11c4d0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11c4d4:	e3530000 	cmp	r3, #0
  11c4d8:	1a000001 	bne	11c4e4 <raw_sendto+0x38>
    return ERR_VAL;
  11c4dc:	e3e03005 	mvn	r3, #5
  11c4e0:	ea00007c 	b	11c6d8 <raw_sendto+0x22c>
  }

  LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_TRACE, ("raw_sendto\n"));

  header_size = (
  11c4e4:	e3a03014 	mov	r3, #20
  11c4e8:	e14b30be 	strh	r3, [fp, #-14]
#else
    IP6_HLEN);
#endif

  /* not enough space to add an IP header to first pbuf in given p chain? */
  if (pbuf_header(p, header_size)) {
  11c4ec:	e15b30fe 	ldrsh	r3, [fp, #-14]
  11c4f0:	e1a01003 	mov	r1, r3
  11c4f4:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  11c4f8:	ebfffa4e 	bl	11ae38 <pbuf_header>
  11c4fc:	e1a03000 	mov	r3, r0
  11c500:	e3530000 	cmp	r3, #0
  11c504:	0a000011 	beq	11c550 <raw_sendto+0xa4>
    /* allocate header in new pbuf */
    q = pbuf_alloc(PBUF_IP, 0, PBUF_RAM);
  11c508:	e3a02000 	mov	r2, #0
  11c50c:	e3a01000 	mov	r1, #0
  11c510:	e3a00001 	mov	r0, #1
  11c514:	ebfff75e 	bl	11a294 <pbuf_alloc>
  11c518:	e50b000c 	str	r0, [fp, #-12]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
  11c51c:	e51b300c 	ldr	r3, [fp, #-12]
  11c520:	e3530000 	cmp	r3, #0
  11c524:	1a000001 	bne	11c530 <raw_sendto+0x84>
      LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("raw_sendto: could not allocate header\n"));
      return ERR_MEM;
  11c528:	e3e03000 	mvn	r3, #0
  11c52c:	ea000069 	b	11c6d8 <raw_sendto+0x22c>
    }
    if (p->tot_len != 0) {
  11c530:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11c534:	e1d330b8 	ldrh	r3, [r3, #8]
  11c538:	e3530000 	cmp	r3, #0
  11c53c:	0a000018 	beq	11c5a4 <raw_sendto+0xf8>
      /* chain header q in front of given pbuf p */
      pbuf_chain(q, p);
  11c540:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  11c544:	e51b000c 	ldr	r0, [fp, #-12]
  11c548:	ebfffb59 	bl	11b2b4 <pbuf_chain>
  11c54c:	ea000014 	b	11c5a4 <raw_sendto+0xf8>
    }
    /* { first pbuf q points to header pbuf } */
    LWIP_DEBUGF(RAW_DEBUG, ("raw_sendto: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* first pbuf q equals given pbuf */
    q = p;
  11c550:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11c554:	e50b300c 	str	r3, [fp, #-12]
    if (pbuf_header(q, -header_size)) {
  11c558:	e15b30be 	ldrh	r3, [fp, #-14]
  11c55c:	e2633000 	rsb	r3, r3, #0
  11c560:	e6ff3073 	uxth	r3, r3
  11c564:	e6bf3073 	sxth	r3, r3
  11c568:	e1a01003 	mov	r1, r3
  11c56c:	e51b000c 	ldr	r0, [fp, #-12]
  11c570:	ebfffa30 	bl	11ae38 <pbuf_header>
  11c574:	e1a03000 	mov	r3, r0
  11c578:	e3530000 	cmp	r3, #0
  11c57c:	0a000008 	beq	11c5a4 <raw_sendto+0xf8>
      LWIP_ASSERT("Can't restore header we just removed!", 0);
  11c580:	e3070b74 	movw	r0, #31604	; 0x7b74
  11c584:	e3400014 	movt	r0, #20
  11c588:	ebff9ae1 	bl	103114 <rt_kprintf>
  11c58c:	e300113e 	movw	r1, #318	; 0x13e
  11c590:	e3070b48 	movw	r0, #31560	; 0x7b48
  11c594:	e3400014 	movt	r0, #20
  11c598:	ebffbad4 	bl	10b0f0 <sys_arch_assert>
      return ERR_MEM;
  11c59c:	e3e03000 	mvn	r3, #0
  11c5a0:	ea00004c 	b	11c6d8 <raw_sendto+0x22c>

  if(IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    /* Don't call ip_route() with IP_ANY_TYPE */
    netif = ip_route(IP46_ADDR_ANY(IP_GET_TYPE(ipaddr)), ipaddr);
  } else {
    netif = ip_route(&pcb->local_ip, ipaddr);
  11c5a4:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  11c5a8:	eb0052f9 	bl	131194 <ip4_route>
  11c5ac:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  }

  if (netif == NULL) {
  11c5b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c5b4:	e3530000 	cmp	r3, #0
  11c5b8:	1a000007 	bne	11c5dc <raw_sendto+0x130>
    LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_LEVEL_WARNING, ("raw_sendto: No route to "));
    ip_addr_debug_print(RAW_DEBUG | LWIP_DBG_LEVEL_WARNING, ipaddr);
    /* free any temporary header pbuf allocated by pbuf_header() */
    if (q != p) {
  11c5bc:	e51b200c 	ldr	r2, [fp, #-12]
  11c5c0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11c5c4:	e1520003 	cmp	r2, r3
  11c5c8:	0a000001 	beq	11c5d4 <raw_sendto+0x128>
      pbuf_free(q);
  11c5cc:	e51b000c 	ldr	r0, [fp, #-12]
  11c5d0:	ebfffa36 	bl	11aeb0 <pbuf_free>
    }
    return ERR_RTE;
  11c5d4:	e3e03003 	mvn	r3, #3
  11c5d8:	ea00003e 	b	11c6d8 <raw_sendto+0x22c>

#if IP_SOF_BROADCAST
  if (IP_IS_V4(ipaddr))
  {
    /* broadcast filter? */
    if (!ip_get_option(pcb, SOF_BROADCAST) && ip_addr_isbroadcast(ipaddr, netif)) {
  11c5dc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c5e0:	e5d33008 	ldrb	r3, [r3, #8]
  11c5e4:	e2033020 	and	r3, r3, #32
  11c5e8:	e3530000 	cmp	r3, #0
  11c5ec:	1a00000f 	bne	11c630 <raw_sendto+0x184>
  11c5f0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11c5f4:	e5933000 	ldr	r3, [r3]
  11c5f8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  11c5fc:	e1a00003 	mov	r0, r3
  11c600:	eb0057c2 	bl	132510 <ip4_addr_isbroadcast_u32>
  11c604:	e1a03000 	mov	r3, r0
  11c608:	e3530000 	cmp	r3, #0
  11c60c:	0a000007 	beq	11c630 <raw_sendto+0x184>
      LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_LEVEL_WARNING, ("raw_sendto: SOF_BROADCAST not enabled on pcb %p\n", (void *)pcb));
      /* free any temporary header pbuf allocated by pbuf_header() */
      if (q != p) {
  11c610:	e51b200c 	ldr	r2, [fp, #-12]
  11c614:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11c618:	e1520003 	cmp	r2, r3
  11c61c:	0a000001 	beq	11c628 <raw_sendto+0x17c>
        pbuf_free(q);
  11c620:	e51b000c 	ldr	r0, [fp, #-12]
  11c624:	ebfffa21 	bl	11aeb0 <pbuf_free>
      }
      return ERR_VAL;
  11c628:	e3e03005 	mvn	r3, #5
  11c62c:	ea000029 	b	11c6d8 <raw_sendto+0x22c>
    }
  }
#endif /* IP_SOF_BROADCAST */

  if (ip_addr_isany(&pcb->local_ip)) {
  11c630:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c634:	e3530000 	cmp	r3, #0
  11c638:	0a000003 	beq	11c64c <raw_sendto+0x1a0>
  11c63c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c640:	e5933000 	ldr	r3, [r3]
  11c644:	e3530000 	cmp	r3, #0
  11c648:	1a000008 	bne	11c670 <raw_sendto+0x1c4>
    /* use outgoing network interface IP address as source address */
    src_ip = ip_netif_get_local_ip(netif, ipaddr);
  11c64c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c650:	e3530000 	cmp	r3, #0
  11c654:	0a000002 	beq	11c664 <raw_sendto+0x1b8>
  11c658:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c65c:	e2833004 	add	r3, r3, #4
  11c660:	ea000000 	b	11c668 <raw_sendto+0x1bc>
  11c664:	e3a03000 	mov	r3, #0
  11c668:	e50b3008 	str	r3, [fp, #-8]
  11c66c:	ea000001 	b	11c678 <raw_sendto+0x1cc>
      return ERR_RTE;
    }
#endif /* LWIP_IPV6 */
  } else {
    /* use RAW PCB local IP address as source address */
    src_ip = &pcb->local_ip;
  11c670:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c674:	e50b3008 	str	r3, [fp, #-8]
    SMEMCPY(((u8_t *)p->payload) + pcb->chksum_offset, &chksum, sizeof(u16_t));
  }
#endif

  NETIF_SET_HWADDRHINT(netif, &pcb->addr_hint);
  err = ip_output_if(q, src_ip, ipaddr, pcb->ttl, pcb->tos, pcb->protocol, netif);
  11c678:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c67c:	e5d3000a 	ldrb	r0, [r3, #10]
  11c680:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c684:	e5d33009 	ldrb	r3, [r3, #9]
  11c688:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  11c68c:	e5d22010 	ldrb	r2, [r2, #16]
  11c690:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  11c694:	e58d1008 	str	r1, [sp, #8]
  11c698:	e58d2004 	str	r2, [sp, #4]
  11c69c:	e58d3000 	str	r3, [sp]
  11c6a0:	e1a03000 	mov	r3, r0
  11c6a4:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11c6a8:	e51b1008 	ldr	r1, [fp, #-8]
  11c6ac:	e51b000c 	ldr	r0, [fp, #-12]
  11c6b0:	eb005590 	bl	131cf8 <ip4_output_if>
  11c6b4:	e1a03000 	mov	r3, r0
  11c6b8:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
  NETIF_SET_HWADDRHINT(netif, NULL);

  /* did we chain a header earlier? */
  if (q != p) {
  11c6bc:	e51b200c 	ldr	r2, [fp, #-12]
  11c6c0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11c6c4:	e1520003 	cmp	r2, r3
  11c6c8:	0a000001 	beq	11c6d4 <raw_sendto+0x228>
    /* free the header */
    pbuf_free(q);
  11c6cc:	e51b000c 	ldr	r0, [fp, #-12]
  11c6d0:	ebfff9f6 	bl	11aeb0 <pbuf_free>
  }
  return err;
  11c6d4:	e15b31d5 	ldrsb	r3, [fp, #-21]	; 0xffffffeb
}
  11c6d8:	e1a00003 	mov	r0, r3
  11c6dc:	e24bd004 	sub	sp, fp, #4
  11c6e0:	e8bd8800 	pop	{fp, pc}

0011c6e4 <raw_send>:
 * @param p the IP payload to send
 *
 */
err_t
raw_send(struct raw_pcb *pcb, struct pbuf *p)
{
  11c6e4:	e92d4800 	push	{fp, lr}
  11c6e8:	e28db004 	add	fp, sp, #4
  11c6ec:	e24dd008 	sub	sp, sp, #8
  11c6f0:	e50b0008 	str	r0, [fp, #-8]
  11c6f4:	e50b100c 	str	r1, [fp, #-12]
  return raw_sendto(pcb, p, &pcb->remote_ip);
  11c6f8:	e51b3008 	ldr	r3, [fp, #-8]
  11c6fc:	e2833004 	add	r3, r3, #4
  11c700:	e1a02003 	mov	r2, r3
  11c704:	e51b100c 	ldr	r1, [fp, #-12]
  11c708:	e51b0008 	ldr	r0, [fp, #-8]
  11c70c:	ebffff66 	bl	11c4ac <raw_sendto>
  11c710:	e1a03000 	mov	r3, r0
}
  11c714:	e1a00003 	mov	r0, r3
  11c718:	e24bd004 	sub	sp, fp, #4
  11c71c:	e8bd8800 	pop	{fp, pc}

0011c720 <raw_remove>:
 *
 * @see raw_new()
 */
void
raw_remove(struct raw_pcb *pcb)
{
  11c720:	e92d4800 	push	{fp, lr}
  11c724:	e28db004 	add	fp, sp, #4
  11c728:	e24dd010 	sub	sp, sp, #16
  11c72c:	e50b0010 	str	r0, [fp, #-16]
  struct raw_pcb *pcb2;
  /* pcb to be removed is first in list? */
  if (raw_pcbs == pcb) {
  11c730:	e30e3228 	movw	r3, #57896	; 0xe228
  11c734:	e3403014 	movt	r3, #20
  11c738:	e5933000 	ldr	r3, [r3]
  11c73c:	e51b2010 	ldr	r2, [fp, #-16]
  11c740:	e1520003 	cmp	r2, r3
  11c744:	1a000007 	bne	11c768 <raw_remove+0x48>
    /* make list start at 2nd pcb */
    raw_pcbs = raw_pcbs->next;
  11c748:	e30e3228 	movw	r3, #57896	; 0xe228
  11c74c:	e3403014 	movt	r3, #20
  11c750:	e5933000 	ldr	r3, [r3]
  11c754:	e593200c 	ldr	r2, [r3, #12]
  11c758:	e30e3228 	movw	r3, #57896	; 0xe228
  11c75c:	e3403014 	movt	r3, #20
  11c760:	e5832000 	str	r2, [r3]
  11c764:	ea000018 	b	11c7cc <raw_remove+0xac>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = raw_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
  11c768:	e30e3228 	movw	r3, #57896	; 0xe228
  11c76c:	e3403014 	movt	r3, #20
  11c770:	e5933000 	ldr	r3, [r3]
  11c774:	e50b3008 	str	r3, [fp, #-8]
  11c778:	ea000010 	b	11c7c0 <raw_remove+0xa0>
      /* find pcb in raw_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
  11c77c:	e51b3008 	ldr	r3, [fp, #-8]
  11c780:	e593300c 	ldr	r3, [r3, #12]
  11c784:	e3530000 	cmp	r3, #0
  11c788:	0a000009 	beq	11c7b4 <raw_remove+0x94>
  11c78c:	e51b3008 	ldr	r3, [fp, #-8]
  11c790:	e593300c 	ldr	r3, [r3, #12]
  11c794:	e51b2010 	ldr	r2, [fp, #-16]
  11c798:	e1520003 	cmp	r2, r3
  11c79c:	1a000004 	bne	11c7b4 <raw_remove+0x94>
        /* remove pcb from list */
        pcb2->next = pcb->next;
  11c7a0:	e51b3010 	ldr	r3, [fp, #-16]
  11c7a4:	e593200c 	ldr	r2, [r3, #12]
  11c7a8:	e51b3008 	ldr	r3, [fp, #-8]
  11c7ac:	e583200c 	str	r2, [r3, #12]
        break;
  11c7b0:	ea000005 	b	11c7cc <raw_remove+0xac>
    for (pcb2 = raw_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
  11c7b4:	e51b3008 	ldr	r3, [fp, #-8]
  11c7b8:	e593300c 	ldr	r3, [r3, #12]
  11c7bc:	e50b3008 	str	r3, [fp, #-8]
  11c7c0:	e51b3008 	ldr	r3, [fp, #-8]
  11c7c4:	e3530000 	cmp	r3, #0
  11c7c8:	1affffeb 	bne	11c77c <raw_remove+0x5c>
      }
    }
  }
  memp_free(MEMP_RAW_PCB, pcb);
  11c7cc:	e51b1010 	ldr	r1, [fp, #-16]
  11c7d0:	e3a00000 	mov	r0, #0
  11c7d4:	ebfff2a7 	bl	119278 <memp_free>
}
  11c7d8:	e320f000 	nop	{0}
  11c7dc:	e24bd004 	sub	sp, fp, #4
  11c7e0:	e8bd8800 	pop	{fp, pc}

0011c7e4 <raw_new>:
 *
 * @see raw_remove()
 */
struct raw_pcb *
raw_new(u8_t proto)
{
  11c7e4:	e92d4800 	push	{fp, lr}
  11c7e8:	e28db004 	add	fp, sp, #4
  11c7ec:	e24dd010 	sub	sp, sp, #16
  11c7f0:	e1a03000 	mov	r3, r0
  11c7f4:	e54b300d 	strb	r3, [fp, #-13]
  struct raw_pcb *pcb;

  LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_TRACE, ("raw_new\n"));

  pcb = (struct raw_pcb *)memp_malloc(MEMP_RAW_PCB);
  11c7f8:	e3a02f72 	mov	r2, #456	; 0x1c8
  11c7fc:	e3071b48 	movw	r1, #31560	; 0x7b48
  11c800:	e3401014 	movt	r1, #20
  11c804:	e3a00000 	mov	r0, #0
  11c808:	ebfff232 	bl	1190d8 <memp_malloc_fn>
  11c80c:	e50b0008 	str	r0, [fp, #-8]
  /* could allocate RAW PCB? */
  if (pcb != NULL) {
  11c810:	e51b3008 	ldr	r3, [fp, #-8]
  11c814:	e3530000 	cmp	r3, #0
  11c818:	0a000012 	beq	11c868 <raw_new+0x84>
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct raw_pcb));
  11c81c:	e3a0201c 	mov	r2, #28
  11c820:	e3a01000 	mov	r1, #0
  11c824:	e51b0008 	ldr	r0, [fp, #-8]
  11c828:	eb009291 	bl	141274 <memset>
    pcb->protocol = proto;
  11c82c:	e51b3008 	ldr	r3, [fp, #-8]
  11c830:	e55b200d 	ldrb	r2, [fp, #-13]
  11c834:	e5c32010 	strb	r2, [r3, #16]
    pcb->ttl = RAW_TTL;
  11c838:	e51b3008 	ldr	r3, [fp, #-8]
  11c83c:	e3e02000 	mvn	r2, #0
  11c840:	e5c3200a 	strb	r2, [r3, #10]
    pcb->next = raw_pcbs;
  11c844:	e30e3228 	movw	r3, #57896	; 0xe228
  11c848:	e3403014 	movt	r3, #20
  11c84c:	e5932000 	ldr	r2, [r3]
  11c850:	e51b3008 	ldr	r3, [fp, #-8]
  11c854:	e583200c 	str	r2, [r3, #12]
    raw_pcbs = pcb;
  11c858:	e30e3228 	movw	r3, #57896	; 0xe228
  11c85c:	e3403014 	movt	r3, #20
  11c860:	e51b2008 	ldr	r2, [fp, #-8]
  11c864:	e5832000 	str	r2, [r3]
  }
  return pcb;
  11c868:	e51b3008 	ldr	r3, [fp, #-8]
}
  11c86c:	e1a00003 	mov	r0, r3
  11c870:	e24bd004 	sub	sp, fp, #4
  11c874:	e8bd8800 	pop	{fp, pc}

0011c878 <raw_new_ip_type>:
 *
 * @see raw_remove()
 */
struct raw_pcb *
raw_new_ip_type(u8_t type, u8_t proto)
{
  11c878:	e92d4800 	push	{fp, lr}
  11c87c:	e28db004 	add	fp, sp, #4
  11c880:	e24dd010 	sub	sp, sp, #16
  11c884:	e1a03000 	mov	r3, r0
  11c888:	e1a02001 	mov	r2, r1
  11c88c:	e54b300d 	strb	r3, [fp, #-13]
  11c890:	e1a03002 	mov	r3, r2
  11c894:	e54b300e 	strb	r3, [fp, #-14]
  struct raw_pcb *pcb;
  pcb = raw_new(proto);
  11c898:	e55b300e 	ldrb	r3, [fp, #-14]
  11c89c:	e1a00003 	mov	r0, r3
  11c8a0:	ebffffcf 	bl	11c7e4 <raw_new>
  11c8a4:	e50b0008 	str	r0, [fp, #-8]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else /* LWIP_IPV4 && LWIP_IPV6 */
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
  11c8a8:	e51b3008 	ldr	r3, [fp, #-8]
}
  11c8ac:	e1a00003 	mov	r0, r3
  11c8b0:	e24bd004 	sub	sp, fp, #4
  11c8b4:	e8bd8800 	pop	{fp, pc}

0011c8b8 <raw_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void raw_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
  11c8b8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11c8bc:	e28db000 	add	fp, sp, #0
  11c8c0:	e24dd014 	sub	sp, sp, #20
  11c8c4:	e50b0010 	str	r0, [fp, #-16]
  11c8c8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct raw_pcb* rpcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
  11c8cc:	e51b3010 	ldr	r3, [fp, #-16]
  11c8d0:	e3530000 	cmp	r3, #0
  11c8d4:	0a00001f 	beq	11c958 <raw_netif_ip_addr_changed+0xa0>
  11c8d8:	e51b3010 	ldr	r3, [fp, #-16]
  11c8dc:	e5933000 	ldr	r3, [r3]
  11c8e0:	e3530000 	cmp	r3, #0
  11c8e4:	0a00001b 	beq	11c958 <raw_netif_ip_addr_changed+0xa0>
  11c8e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c8ec:	e3530000 	cmp	r3, #0
  11c8f0:	0a000018 	beq	11c958 <raw_netif_ip_addr_changed+0xa0>
  11c8f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c8f8:	e5933000 	ldr	r3, [r3]
  11c8fc:	e3530000 	cmp	r3, #0
  11c900:	0a000014 	beq	11c958 <raw_netif_ip_addr_changed+0xa0>
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
  11c904:	e30e3228 	movw	r3, #57896	; 0xe228
  11c908:	e3403014 	movt	r3, #20
  11c90c:	e5933000 	ldr	r3, [r3]
  11c910:	e50b3008 	str	r3, [fp, #-8]
  11c914:	ea00000c 	b	11c94c <raw_netif_ip_addr_changed+0x94>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&rpcb->local_ip, old_addr)) {
  11c918:	e51b3008 	ldr	r3, [fp, #-8]
  11c91c:	e5932000 	ldr	r2, [r3]
  11c920:	e51b3010 	ldr	r3, [fp, #-16]
  11c924:	e5933000 	ldr	r3, [r3]
  11c928:	e1520003 	cmp	r2, r3
  11c92c:	1a000003 	bne	11c940 <raw_netif_ip_addr_changed+0x88>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(rpcb->local_ip, *new_addr);
  11c930:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c934:	e5932000 	ldr	r2, [r3]
  11c938:	e51b3008 	ldr	r3, [fp, #-8]
  11c93c:	e5832000 	str	r2, [r3]
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
  11c940:	e51b3008 	ldr	r3, [fp, #-8]
  11c944:	e593300c 	ldr	r3, [r3, #12]
  11c948:	e50b3008 	str	r3, [fp, #-8]
  11c94c:	e51b3008 	ldr	r3, [fp, #-8]
  11c950:	e3530000 	cmp	r3, #0
  11c954:	1affffef 	bne	11c918 <raw_netif_ip_addr_changed+0x60>
      }
    }
  }
}
  11c958:	e320f000 	nop	{0}
  11c95c:	e28bd000 	add	sp, fp, #0
  11c960:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11c964:	e12fff1e 	bx	lr

0011c968 <stats_init>:

struct stats_ lwip_stats;

void
stats_init(void)
{
  11c968:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11c96c:	e28db000 	add	fp, sp, #0
#ifdef LWIP_DEBUG
#if MEM_STATS
  lwip_stats.mem.name = "MEM";
#endif /* MEM_STATS */
#endif /* LWIP_DEBUG */
}
  11c970:	e320f000 	nop	{0}
  11c974:	e28bd000 	add	sp, fp, #0
  11c978:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11c97c:	e12fff1e 	bx	lr

0011c980 <stats_display_proto>:

#if LWIP_STATS_DISPLAY
void
stats_display_proto(struct stats_proto *proto, const char *name)
{
  11c980:	e92d4800 	push	{fp, lr}
  11c984:	e28db004 	add	fp, sp, #4
  11c988:	e24dd008 	sub	sp, sp, #8
  11c98c:	e50b0008 	str	r0, [fp, #-8]
  11c990:	e50b100c 	str	r1, [fp, #-12]
  LWIP_PLATFORM_DIAG(("\n%s\n\t", name));
  11c994:	e51b100c 	ldr	r1, [fp, #-12]
  11c998:	e3070b9c 	movw	r0, #31644	; 0x7b9c
  11c99c:	e3400014 	movt	r0, #20
  11c9a0:	ebff99db 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("xmit: %"STAT_COUNTER_F"\n\t", proto->xmit));
  11c9a4:	e51b3008 	ldr	r3, [fp, #-8]
  11c9a8:	e1d330b0 	ldrh	r3, [r3]
  11c9ac:	e1a01003 	mov	r1, r3
  11c9b0:	e3070ba4 	movw	r0, #31652	; 0x7ba4
  11c9b4:	e3400014 	movt	r0, #20
  11c9b8:	ebff99d5 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("recv: %"STAT_COUNTER_F"\n\t", proto->recv));
  11c9bc:	e51b3008 	ldr	r3, [fp, #-8]
  11c9c0:	e1d330b2 	ldrh	r3, [r3, #2]
  11c9c4:	e1a01003 	mov	r1, r3
  11c9c8:	e3070bb0 	movw	r0, #31664	; 0x7bb0
  11c9cc:	e3400014 	movt	r0, #20
  11c9d0:	ebff99cf 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("fw: %"STAT_COUNTER_F"\n\t", proto->fw));
  11c9d4:	e51b3008 	ldr	r3, [fp, #-8]
  11c9d8:	e1d330b4 	ldrh	r3, [r3, #4]
  11c9dc:	e1a01003 	mov	r1, r3
  11c9e0:	e3070bbc 	movw	r0, #31676	; 0x7bbc
  11c9e4:	e3400014 	movt	r0, #20
  11c9e8:	ebff99c9 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("drop: %"STAT_COUNTER_F"\n\t", proto->drop));
  11c9ec:	e51b3008 	ldr	r3, [fp, #-8]
  11c9f0:	e1d330b6 	ldrh	r3, [r3, #6]
  11c9f4:	e1a01003 	mov	r1, r3
  11c9f8:	e3070bc8 	movw	r0, #31688	; 0x7bc8
  11c9fc:	e3400014 	movt	r0, #20
  11ca00:	ebff99c3 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("chkerr: %"STAT_COUNTER_F"\n\t", proto->chkerr));
  11ca04:	e51b3008 	ldr	r3, [fp, #-8]
  11ca08:	e1d330b8 	ldrh	r3, [r3, #8]
  11ca0c:	e1a01003 	mov	r1, r3
  11ca10:	e3070bd4 	movw	r0, #31700	; 0x7bd4
  11ca14:	e3400014 	movt	r0, #20
  11ca18:	ebff99bd 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("lenerr: %"STAT_COUNTER_F"\n\t", proto->lenerr));
  11ca1c:	e51b3008 	ldr	r3, [fp, #-8]
  11ca20:	e1d330ba 	ldrh	r3, [r3, #10]
  11ca24:	e1a01003 	mov	r1, r3
  11ca28:	e3070be4 	movw	r0, #31716	; 0x7be4
  11ca2c:	e3400014 	movt	r0, #20
  11ca30:	ebff99b7 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("memerr: %"STAT_COUNTER_F"\n\t", proto->memerr));
  11ca34:	e51b3008 	ldr	r3, [fp, #-8]
  11ca38:	e1d330bc 	ldrh	r3, [r3, #12]
  11ca3c:	e1a01003 	mov	r1, r3
  11ca40:	e3070bf4 	movw	r0, #31732	; 0x7bf4
  11ca44:	e3400014 	movt	r0, #20
  11ca48:	ebff99b1 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("rterr: %"STAT_COUNTER_F"\n\t", proto->rterr));
  11ca4c:	e51b3008 	ldr	r3, [fp, #-8]
  11ca50:	e1d330be 	ldrh	r3, [r3, #14]
  11ca54:	e1a01003 	mov	r1, r3
  11ca58:	e3070c04 	movw	r0, #31748	; 0x7c04
  11ca5c:	e3400014 	movt	r0, #20
  11ca60:	ebff99ab 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("proterr: %"STAT_COUNTER_F"\n\t", proto->proterr));
  11ca64:	e51b3008 	ldr	r3, [fp, #-8]
  11ca68:	e1d331b0 	ldrh	r3, [r3, #16]
  11ca6c:	e1a01003 	mov	r1, r3
  11ca70:	e3070c14 	movw	r0, #31764	; 0x7c14
  11ca74:	e3400014 	movt	r0, #20
  11ca78:	ebff99a5 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("opterr: %"STAT_COUNTER_F"\n\t", proto->opterr));
  11ca7c:	e51b3008 	ldr	r3, [fp, #-8]
  11ca80:	e1d331b2 	ldrh	r3, [r3, #18]
  11ca84:	e1a01003 	mov	r1, r3
  11ca88:	e3070c24 	movw	r0, #31780	; 0x7c24
  11ca8c:	e3400014 	movt	r0, #20
  11ca90:	ebff999f 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("err: %"STAT_COUNTER_F"\n\t", proto->err));
  11ca94:	e51b3008 	ldr	r3, [fp, #-8]
  11ca98:	e1d331b4 	ldrh	r3, [r3, #20]
  11ca9c:	e1a01003 	mov	r1, r3
  11caa0:	e3070c34 	movw	r0, #31796	; 0x7c34
  11caa4:	e3400014 	movt	r0, #20
  11caa8:	ebff9999 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("cachehit: %"STAT_COUNTER_F"\n", proto->cachehit));
  11caac:	e51b3008 	ldr	r3, [fp, #-8]
  11cab0:	e1d331b6 	ldrh	r3, [r3, #22]
  11cab4:	e1a01003 	mov	r1, r3
  11cab8:	e3070c40 	movw	r0, #31808	; 0x7c40
  11cabc:	e3400014 	movt	r0, #20
  11cac0:	ebff9993 	bl	103114 <rt_kprintf>
}
  11cac4:	e320f000 	nop	{0}
  11cac8:	e24bd004 	sub	sp, fp, #4
  11cacc:	e8bd8800 	pop	{fp, pc}

0011cad0 <stats_display_igmp>:

#if IGMP_STATS || MLD6_STATS
void
stats_display_igmp(struct stats_igmp *igmp, const char *name)
{
  11cad0:	e92d4800 	push	{fp, lr}
  11cad4:	e28db004 	add	fp, sp, #4
  11cad8:	e24dd008 	sub	sp, sp, #8
  11cadc:	e50b0008 	str	r0, [fp, #-8]
  11cae0:	e50b100c 	str	r1, [fp, #-12]
  LWIP_PLATFORM_DIAG(("\n%s\n\t", name));
  11cae4:	e51b100c 	ldr	r1, [fp, #-12]
  11cae8:	e3070b9c 	movw	r0, #31644	; 0x7b9c
  11caec:	e3400014 	movt	r0, #20
  11caf0:	ebff9987 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("xmit: %"STAT_COUNTER_F"\n\t", igmp->xmit));
  11caf4:	e51b3008 	ldr	r3, [fp, #-8]
  11caf8:	e1d330b0 	ldrh	r3, [r3]
  11cafc:	e1a01003 	mov	r1, r3
  11cb00:	e3070ba4 	movw	r0, #31652	; 0x7ba4
  11cb04:	e3400014 	movt	r0, #20
  11cb08:	ebff9981 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("recv: %"STAT_COUNTER_F"\n\t", igmp->recv));
  11cb0c:	e51b3008 	ldr	r3, [fp, #-8]
  11cb10:	e1d330b2 	ldrh	r3, [r3, #2]
  11cb14:	e1a01003 	mov	r1, r3
  11cb18:	e3070bb0 	movw	r0, #31664	; 0x7bb0
  11cb1c:	e3400014 	movt	r0, #20
  11cb20:	ebff997b 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("drop: %"STAT_COUNTER_F"\n\t", igmp->drop));
  11cb24:	e51b3008 	ldr	r3, [fp, #-8]
  11cb28:	e1d330b4 	ldrh	r3, [r3, #4]
  11cb2c:	e1a01003 	mov	r1, r3
  11cb30:	e3070bc8 	movw	r0, #31688	; 0x7bc8
  11cb34:	e3400014 	movt	r0, #20
  11cb38:	ebff9975 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("chkerr: %"STAT_COUNTER_F"\n\t", igmp->chkerr));
  11cb3c:	e51b3008 	ldr	r3, [fp, #-8]
  11cb40:	e1d330b6 	ldrh	r3, [r3, #6]
  11cb44:	e1a01003 	mov	r1, r3
  11cb48:	e3070bd4 	movw	r0, #31700	; 0x7bd4
  11cb4c:	e3400014 	movt	r0, #20
  11cb50:	ebff996f 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("lenerr: %"STAT_COUNTER_F"\n\t", igmp->lenerr));
  11cb54:	e51b3008 	ldr	r3, [fp, #-8]
  11cb58:	e1d330b8 	ldrh	r3, [r3, #8]
  11cb5c:	e1a01003 	mov	r1, r3
  11cb60:	e3070be4 	movw	r0, #31716	; 0x7be4
  11cb64:	e3400014 	movt	r0, #20
  11cb68:	ebff9969 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("memerr: %"STAT_COUNTER_F"\n\t", igmp->memerr));
  11cb6c:	e51b3008 	ldr	r3, [fp, #-8]
  11cb70:	e1d330ba 	ldrh	r3, [r3, #10]
  11cb74:	e1a01003 	mov	r1, r3
  11cb78:	e3070bf4 	movw	r0, #31732	; 0x7bf4
  11cb7c:	e3400014 	movt	r0, #20
  11cb80:	ebff9963 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("proterr: %"STAT_COUNTER_F"\n\t", igmp->proterr));
  11cb84:	e51b3008 	ldr	r3, [fp, #-8]
  11cb88:	e1d330bc 	ldrh	r3, [r3, #12]
  11cb8c:	e1a01003 	mov	r1, r3
  11cb90:	e3070c14 	movw	r0, #31764	; 0x7c14
  11cb94:	e3400014 	movt	r0, #20
  11cb98:	ebff995d 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("rx_v1: %"STAT_COUNTER_F"\n\t", igmp->rx_v1));
  11cb9c:	e51b3008 	ldr	r3, [fp, #-8]
  11cba0:	e1d330be 	ldrh	r3, [r3, #14]
  11cba4:	e1a01003 	mov	r1, r3
  11cba8:	e3070c50 	movw	r0, #31824	; 0x7c50
  11cbac:	e3400014 	movt	r0, #20
  11cbb0:	ebff9957 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("rx_group: %"STAT_COUNTER_F"\n\t", igmp->rx_group));
  11cbb4:	e51b3008 	ldr	r3, [fp, #-8]
  11cbb8:	e1d331b0 	ldrh	r3, [r3, #16]
  11cbbc:	e1a01003 	mov	r1, r3
  11cbc0:	e3070c60 	movw	r0, #31840	; 0x7c60
  11cbc4:	e3400014 	movt	r0, #20
  11cbc8:	ebff9951 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("rx_general: %"STAT_COUNTER_F"\n\t", igmp->rx_general));
  11cbcc:	e51b3008 	ldr	r3, [fp, #-8]
  11cbd0:	e1d331b2 	ldrh	r3, [r3, #18]
  11cbd4:	e1a01003 	mov	r1, r3
  11cbd8:	e3070c70 	movw	r0, #31856	; 0x7c70
  11cbdc:	e3400014 	movt	r0, #20
  11cbe0:	ebff994b 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("rx_report: %"STAT_COUNTER_F"\n\t", igmp->rx_report));
  11cbe4:	e51b3008 	ldr	r3, [fp, #-8]
  11cbe8:	e1d331b4 	ldrh	r3, [r3, #20]
  11cbec:	e1a01003 	mov	r1, r3
  11cbf0:	e3070c84 	movw	r0, #31876	; 0x7c84
  11cbf4:	e3400014 	movt	r0, #20
  11cbf8:	ebff9945 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("tx_join: %"STAT_COUNTER_F"\n\t", igmp->tx_join));
  11cbfc:	e51b3008 	ldr	r3, [fp, #-8]
  11cc00:	e1d331b6 	ldrh	r3, [r3, #22]
  11cc04:	e1a01003 	mov	r1, r3
  11cc08:	e3070c98 	movw	r0, #31896	; 0x7c98
  11cc0c:	e3400014 	movt	r0, #20
  11cc10:	ebff993f 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("tx_leave: %"STAT_COUNTER_F"\n\t", igmp->tx_leave));
  11cc14:	e51b3008 	ldr	r3, [fp, #-8]
  11cc18:	e1d331b8 	ldrh	r3, [r3, #24]
  11cc1c:	e1a01003 	mov	r1, r3
  11cc20:	e3070ca8 	movw	r0, #31912	; 0x7ca8
  11cc24:	e3400014 	movt	r0, #20
  11cc28:	ebff9939 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("tx_report: %"STAT_COUNTER_F"\n", igmp->tx_report));
  11cc2c:	e51b3008 	ldr	r3, [fp, #-8]
  11cc30:	e1d331ba 	ldrh	r3, [r3, #26]
  11cc34:	e1a01003 	mov	r1, r3
  11cc38:	e3070cb8 	movw	r0, #31928	; 0x7cb8
  11cc3c:	e3400014 	movt	r0, #20
  11cc40:	ebff9933 	bl	103114 <rt_kprintf>
}
  11cc44:	e320f000 	nop	{0}
  11cc48:	e24bd004 	sub	sp, fp, #4
  11cc4c:	e8bd8800 	pop	{fp, pc}

0011cc50 <stats_display_mem>:
#endif /* IGMP_STATS || MLD6_STATS */

#if MEM_STATS || MEMP_STATS
void
stats_display_mem(struct stats_mem *mem, const char *name)
{
  11cc50:	e92d4800 	push	{fp, lr}
  11cc54:	e28db004 	add	fp, sp, #4
  11cc58:	e24dd008 	sub	sp, sp, #8
  11cc5c:	e50b0008 	str	r0, [fp, #-8]
  11cc60:	e50b100c 	str	r1, [fp, #-12]
  LWIP_PLATFORM_DIAG(("\nMEM %s\n\t", name));
  11cc64:	e51b100c 	ldr	r1, [fp, #-12]
  11cc68:	e3070cc8 	movw	r0, #31944	; 0x7cc8
  11cc6c:	e3400014 	movt	r0, #20
  11cc70:	ebff9927 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("avail: %"U32_F"\n\t", (u32_t)mem->avail));
  11cc74:	e51b3008 	ldr	r3, [fp, #-8]
  11cc78:	e1d330b6 	ldrh	r3, [r3, #6]
  11cc7c:	e1a01003 	mov	r1, r3
  11cc80:	e3070cd4 	movw	r0, #31956	; 0x7cd4
  11cc84:	e3400014 	movt	r0, #20
  11cc88:	ebff9921 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("used: %"U32_F"\n\t", (u32_t)mem->used));
  11cc8c:	e51b3008 	ldr	r3, [fp, #-8]
  11cc90:	e1d330b8 	ldrh	r3, [r3, #8]
  11cc94:	e1a01003 	mov	r1, r3
  11cc98:	e3070ce4 	movw	r0, #31972	; 0x7ce4
  11cc9c:	e3400014 	movt	r0, #20
  11cca0:	ebff991b 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("max: %"U32_F"\n\t", (u32_t)mem->max));
  11cca4:	e51b3008 	ldr	r3, [fp, #-8]
  11cca8:	e1d330ba 	ldrh	r3, [r3, #10]
  11ccac:	e1a01003 	mov	r1, r3
  11ccb0:	e3070cf0 	movw	r0, #31984	; 0x7cf0
  11ccb4:	e3400014 	movt	r0, #20
  11ccb8:	ebff9915 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("err: %"U32_F"\n", (u32_t)mem->err));
  11ccbc:	e51b3008 	ldr	r3, [fp, #-8]
  11ccc0:	e1d330b4 	ldrh	r3, [r3, #4]
  11ccc4:	e1a01003 	mov	r1, r3
  11ccc8:	e3070cfc 	movw	r0, #31996	; 0x7cfc
  11cccc:	e3400014 	movt	r0, #20
  11ccd0:	ebff990f 	bl	103114 <rt_kprintf>
}
  11ccd4:	e320f000 	nop	{0}
  11ccd8:	e24bd004 	sub	sp, fp, #4
  11ccdc:	e8bd8800 	pop	{fp, pc}

0011cce0 <stats_display_memp>:

#if MEMP_STATS
void
stats_display_memp(struct stats_mem *mem, int index)
{
  11cce0:	e92d4800 	push	{fp, lr}
  11cce4:	e28db004 	add	fp, sp, #4
  11cce8:	e24dd008 	sub	sp, sp, #8
  11ccec:	e50b0008 	str	r0, [fp, #-8]
  11ccf0:	e50b100c 	str	r1, [fp, #-12]
  if (index < MEMP_MAX) {
  11ccf4:	e51b300c 	ldr	r3, [fp, #-12]
  11ccf8:	e3530010 	cmp	r3, #16
  11ccfc:	ca000004 	bgt	11cd14 <stats_display_memp+0x34>
    stats_display_mem(mem, mem->name);
  11cd00:	e51b3008 	ldr	r3, [fp, #-8]
  11cd04:	e5933000 	ldr	r3, [r3]
  11cd08:	e1a01003 	mov	r1, r3
  11cd0c:	e51b0008 	ldr	r0, [fp, #-8]
  11cd10:	ebffffce 	bl	11cc50 <stats_display_mem>
  }
}
  11cd14:	e320f000 	nop	{0}
  11cd18:	e24bd004 	sub	sp, fp, #4
  11cd1c:	e8bd8800 	pop	{fp, pc}

0011cd20 <stats_display_sys>:
#endif /* MEM_STATS || MEMP_STATS */

#if SYS_STATS
void
stats_display_sys(struct stats_sys *sys)
{
  11cd20:	e92d4800 	push	{fp, lr}
  11cd24:	e28db004 	add	fp, sp, #4
  11cd28:	e24dd008 	sub	sp, sp, #8
  11cd2c:	e50b0008 	str	r0, [fp, #-8]
  LWIP_PLATFORM_DIAG(("\nSYS\n\t"));
  11cd30:	e3070d08 	movw	r0, #32008	; 0x7d08
  11cd34:	e3400014 	movt	r0, #20
  11cd38:	ebff98f5 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("sem.used:  %"U32_F"\n\t", (u32_t)sys->sem.used));
  11cd3c:	e51b3008 	ldr	r3, [fp, #-8]
  11cd40:	e1d330b0 	ldrh	r3, [r3]
  11cd44:	e1a01003 	mov	r1, r3
  11cd48:	e3070d10 	movw	r0, #32016	; 0x7d10
  11cd4c:	e3400014 	movt	r0, #20
  11cd50:	ebff98ef 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("sem.max:   %"U32_F"\n\t", (u32_t)sys->sem.max));
  11cd54:	e51b3008 	ldr	r3, [fp, #-8]
  11cd58:	e1d330b2 	ldrh	r3, [r3, #2]
  11cd5c:	e1a01003 	mov	r1, r3
  11cd60:	e3070d24 	movw	r0, #32036	; 0x7d24
  11cd64:	e3400014 	movt	r0, #20
  11cd68:	ebff98e9 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("sem.err:   %"U32_F"\n\t", (u32_t)sys->sem.err));
  11cd6c:	e51b3008 	ldr	r3, [fp, #-8]
  11cd70:	e1d330b4 	ldrh	r3, [r3, #4]
  11cd74:	e1a01003 	mov	r1, r3
  11cd78:	e3070d38 	movw	r0, #32056	; 0x7d38
  11cd7c:	e3400014 	movt	r0, #20
  11cd80:	ebff98e3 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("mutex.used: %"U32_F"\n\t", (u32_t)sys->mutex.used));
  11cd84:	e51b3008 	ldr	r3, [fp, #-8]
  11cd88:	e1d330b6 	ldrh	r3, [r3, #6]
  11cd8c:	e1a01003 	mov	r1, r3
  11cd90:	e3070d4c 	movw	r0, #32076	; 0x7d4c
  11cd94:	e3400014 	movt	r0, #20
  11cd98:	ebff98dd 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("mutex.max:  %"U32_F"\n\t", (u32_t)sys->mutex.max));
  11cd9c:	e51b3008 	ldr	r3, [fp, #-8]
  11cda0:	e1d330b8 	ldrh	r3, [r3, #8]
  11cda4:	e1a01003 	mov	r1, r3
  11cda8:	e3070d60 	movw	r0, #32096	; 0x7d60
  11cdac:	e3400014 	movt	r0, #20
  11cdb0:	ebff98d7 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("mutex.err:  %"U32_F"\n\t", (u32_t)sys->mutex.err));
  11cdb4:	e51b3008 	ldr	r3, [fp, #-8]
  11cdb8:	e1d330ba 	ldrh	r3, [r3, #10]
  11cdbc:	e1a01003 	mov	r1, r3
  11cdc0:	e3070d74 	movw	r0, #32116	; 0x7d74
  11cdc4:	e3400014 	movt	r0, #20
  11cdc8:	ebff98d1 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("mbox.used:  %"U32_F"\n\t", (u32_t)sys->mbox.used));
  11cdcc:	e51b3008 	ldr	r3, [fp, #-8]
  11cdd0:	e1d330bc 	ldrh	r3, [r3, #12]
  11cdd4:	e1a01003 	mov	r1, r3
  11cdd8:	e3070d88 	movw	r0, #32136	; 0x7d88
  11cddc:	e3400014 	movt	r0, #20
  11cde0:	ebff98cb 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("mbox.max:   %"U32_F"\n\t", (u32_t)sys->mbox.max));
  11cde4:	e51b3008 	ldr	r3, [fp, #-8]
  11cde8:	e1d330be 	ldrh	r3, [r3, #14]
  11cdec:	e1a01003 	mov	r1, r3
  11cdf0:	e3070d9c 	movw	r0, #32156	; 0x7d9c
  11cdf4:	e3400014 	movt	r0, #20
  11cdf8:	ebff98c5 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("mbox.err:   %"U32_F"\n", (u32_t)sys->mbox.err));
  11cdfc:	e51b3008 	ldr	r3, [fp, #-8]
  11ce00:	e1d331b0 	ldrh	r3, [r3, #16]
  11ce04:	e1a01003 	mov	r1, r3
  11ce08:	e3070db0 	movw	r0, #32176	; 0x7db0
  11ce0c:	e3400014 	movt	r0, #20
  11ce10:	ebff98bf 	bl	103114 <rt_kprintf>
}
  11ce14:	e320f000 	nop	{0}
  11ce18:	e24bd004 	sub	sp, fp, #4
  11ce1c:	e8bd8800 	pop	{fp, pc}

0011ce20 <stats_display>:
#endif /* SYS_STATS */

void
stats_display(void)
{
  11ce20:	e92d4800 	push	{fp, lr}
  11ce24:	e28db004 	add	fp, sp, #4
  11ce28:	e24dd008 	sub	sp, sp, #8
  s16_t i;

  LINK_STATS_DISPLAY();
  11ce2c:	e3071dc4 	movw	r1, #32196	; 0x7dc4
  11ce30:	e3401014 	movt	r1, #20
  11ce34:	e30c0a30 	movw	r0, #51760	; 0xca30
  11ce38:	e3400015 	movt	r0, #21
  11ce3c:	ebfffecf 	bl	11c980 <stats_display_proto>
  ETHARP_STATS_DISPLAY();
  11ce40:	e3071dcc 	movw	r1, #32204	; 0x7dcc
  11ce44:	e3401014 	movt	r1, #20
  11ce48:	e59f00dc 	ldr	r0, [pc, #220]	; 11cf2c <stats_display+0x10c>
  11ce4c:	ebfffecb 	bl	11c980 <stats_display_proto>
  IPFRAG_STATS_DISPLAY();
  11ce50:	e3071dd4 	movw	r1, #32212	; 0x7dd4
  11ce54:	e3401014 	movt	r1, #20
  11ce58:	e59f00d0 	ldr	r0, [pc, #208]	; 11cf30 <stats_display+0x110>
  11ce5c:	ebfffec7 	bl	11c980 <stats_display_proto>
  IP6_FRAG_STATS_DISPLAY();
  IP_STATS_DISPLAY();
  11ce60:	e3071ddc 	movw	r1, #32220	; 0x7ddc
  11ce64:	e3401014 	movt	r1, #20
  11ce68:	e59f00c4 	ldr	r0, [pc, #196]	; 11cf34 <stats_display+0x114>
  11ce6c:	ebfffec3 	bl	11c980 <stats_display_proto>
  ND6_STATS_DISPLAY();
  IP6_STATS_DISPLAY();
  IGMP_STATS_DISPLAY();
  11ce70:	e3071de0 	movw	r1, #32224	; 0x7de0
  11ce74:	e3401014 	movt	r1, #20
  11ce78:	e59f00b8 	ldr	r0, [pc, #184]	; 11cf38 <stats_display+0x118>
  11ce7c:	ebffff13 	bl	11cad0 <stats_display_igmp>
  MLD6_STATS_DISPLAY();
  ICMP_STATS_DISPLAY();
  11ce80:	e3071de8 	movw	r1, #32232	; 0x7de8
  11ce84:	e3401014 	movt	r1, #20
  11ce88:	e59f00ac 	ldr	r0, [pc, #172]	; 11cf3c <stats_display+0x11c>
  11ce8c:	ebfffebb 	bl	11c980 <stats_display_proto>
  ICMP6_STATS_DISPLAY();
  UDP_STATS_DISPLAY();
  11ce90:	e3071df0 	movw	r1, #32240	; 0x7df0
  11ce94:	e3401014 	movt	r1, #20
  11ce98:	e59f00a0 	ldr	r0, [pc, #160]	; 11cf40 <stats_display+0x120>
  11ce9c:	ebfffeb7 	bl	11c980 <stats_display_proto>
  TCP_STATS_DISPLAY();
  11cea0:	e3071df4 	movw	r1, #32244	; 0x7df4
  11cea4:	e3401014 	movt	r1, #20
  11cea8:	e59f0094 	ldr	r0, [pc, #148]	; 11cf44 <stats_display+0x124>
  11ceac:	ebfffeb3 	bl	11c980 <stats_display_proto>
  MEM_STATS_DISPLAY();
  11ceb0:	e3071df8 	movw	r1, #32248	; 0x7df8
  11ceb4:	e3401014 	movt	r1, #20
  11ceb8:	e59f0088 	ldr	r0, [pc, #136]	; 11cf48 <stats_display+0x128>
  11cebc:	ebffff63 	bl	11cc50 <stats_display_mem>
  for (i = 0; i < MEMP_MAX; i++) {
  11cec0:	e3a03000 	mov	r3, #0
  11cec4:	e14b30b6 	strh	r3, [fp, #-6]
  11cec8:	ea00000f 	b	11cf0c <stats_display+0xec>
    MEMP_STATS_DISPLAY(i);
  11cecc:	e15b30f6 	ldrsh	r3, [fp, #-6]
  11ced0:	e30c2a30 	movw	r2, #51760	; 0xca30
  11ced4:	e3402015 	movt	r2, #21
  11ced8:	e2833034 	add	r3, r3, #52	; 0x34
  11cedc:	e1a03103 	lsl	r3, r3, #2
  11cee0:	e0823003 	add	r3, r2, r3
  11cee4:	e5933004 	ldr	r3, [r3, #4]
  11cee8:	e15b20f6 	ldrsh	r2, [fp, #-6]
  11ceec:	e1a01002 	mov	r1, r2
  11cef0:	e1a00003 	mov	r0, r3
  11cef4:	ebffff79 	bl	11cce0 <stats_display_memp>
  for (i = 0; i < MEMP_MAX; i++) {
  11cef8:	e15b30f6 	ldrsh	r3, [fp, #-6]
  11cefc:	e6ff3073 	uxth	r3, r3
  11cf00:	e2833001 	add	r3, r3, #1
  11cf04:	e6ff3073 	uxth	r3, r3
  11cf08:	e14b30b6 	strh	r3, [fp, #-6]
  11cf0c:	e15b30f6 	ldrsh	r3, [fp, #-6]
  11cf10:	e3530010 	cmp	r3, #16
  11cf14:	daffffec 	ble	11cecc <stats_display+0xac>
  }
  SYS_STATS_DISPLAY();
  11cf18:	e59f002c 	ldr	r0, [pc, #44]	; 11cf4c <stats_display+0x12c>
  11cf1c:	ebffff7f 	bl	11cd20 <stats_display_sys>
}
  11cf20:	e320f000 	nop	{0}
  11cf24:	e24bd004 	sub	sp, fp, #4
  11cf28:	e8bd8800 	pop	{fp, pc}
  11cf2c:	0015ca48 	.word	0x0015ca48
  11cf30:	0015ca60 	.word	0x0015ca60
  11cf34:	0015ca78 	.word	0x0015ca78
  11cf38:	0015caa8 	.word	0x0015caa8
  11cf3c:	0015ca90 	.word	0x0015ca90
  11cf40:	0015cac4 	.word	0x0015cac4
  11cf44:	0015cadc 	.word	0x0015cadc
  11cf48:	0015caf4 	.word	0x0015caf4
  11cf4c:	0015cb48 	.word	0x0015cb48

0011cf50 <sys_msleep>:
 *
 * @param ms number of milliseconds to sleep
 */
void
sys_msleep(u32_t ms)
{
  11cf50:	e92d4800 	push	{fp, lr}
  11cf54:	e28db004 	add	fp, sp, #4
  11cf58:	e24dd010 	sub	sp, sp, #16
  11cf5c:	e50b0010 	str	r0, [fp, #-16]
  if (ms > 0) {
  11cf60:	e51b3010 	ldr	r3, [fp, #-16]
  11cf64:	e3530000 	cmp	r3, #0
  11cf68:	0a00000f 	beq	11cfac <sys_msleep+0x5c>
    sys_sem_t delaysem;
    err_t err = sys_sem_new(&delaysem, 0);
  11cf6c:	e24b300c 	sub	r3, fp, #12
  11cf70:	e3a01000 	mov	r1, #0
  11cf74:	e1a00003 	mov	r0, r3
  11cf78:	ebffb62f 	bl	10a83c <sys_sem_new>
  11cf7c:	e1a03000 	mov	r3, r0
  11cf80:	e54b3005 	strb	r3, [fp, #-5]
    if (err == ERR_OK) {
  11cf84:	e15b30d5 	ldrsb	r3, [fp, #-5]
  11cf88:	e3530000 	cmp	r3, #0
  11cf8c:	1a000006 	bne	11cfac <sys_msleep+0x5c>
      sys_arch_sem_wait(&delaysem, ms);
  11cf90:	e24b300c 	sub	r3, fp, #12
  11cf94:	e51b1010 	ldr	r1, [fp, #-16]
  11cf98:	e1a00003 	mov	r0, r3
  11cf9c:	ebffb667 	bl	10a940 <sys_arch_sem_wait>
      sys_sem_free(&delaysem);
  11cfa0:	e24b300c 	sub	r3, fp, #12
  11cfa4:	e1a00003 	mov	r0, r3
  11cfa8:	ebffb64e 	bl	10a8e8 <sys_sem_free>
    }
  }
}
  11cfac:	e320f000 	nop	{0}
  11cfb0:	e24bd004 	sub	sp, fp, #4
  11cfb4:	e8bd8800 	pop	{fp, pc}

0011cfb8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
  11cfb8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11cfbc:	e28db000 	add	fp, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
  11cfc0:	e320f000 	nop	{0}
  11cfc4:	e28bd000 	add	sp, fp, #0
  11cfc8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11cfcc:	e12fff1e 	bx	lr

0011cfd0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
  11cfd0:	e92d4800 	push	{fp, lr}
  11cfd4:	e28db004 	add	fp, sp, #4
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
  11cfd8:	eb00084a 	bl	11f108 <tcp_fasttmr>

  if (++tcp_timer & 1) {
  11cfdc:	e30e322c 	movw	r3, #57900	; 0xe22c
  11cfe0:	e3403014 	movt	r3, #20
  11cfe4:	e5d33000 	ldrb	r3, [r3]
  11cfe8:	e2833001 	add	r3, r3, #1
  11cfec:	e6ef2073 	uxtb	r2, r3
  11cff0:	e30e322c 	movw	r3, #57900	; 0xe22c
  11cff4:	e3403014 	movt	r3, #20
  11cff8:	e5c32000 	strb	r2, [r3]
  11cffc:	e30e322c 	movw	r3, #57900	; 0xe22c
  11d000:	e3403014 	movt	r3, #20
  11d004:	e5d33000 	ldrb	r3, [r3]
  11d008:	e2033001 	and	r3, r3, #1
  11d00c:	e3530000 	cmp	r3, #0
  11d010:	0a000000 	beq	11d018 <tcp_tmr+0x48>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
  11d014:	eb0005cb 	bl	11e748 <tcp_slowtmr>
  }
}
  11d018:	e320f000 	nop	{0}
  11d01c:	e8bd8800 	pop	{fp, pc}

0011d020 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
  11d020:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11d024:	e28db000 	add	fp, sp, #0
  11d028:	e24dd014 	sub	sp, sp, #20
  11d02c:	e50b0010 	str	r0, [fp, #-16]
  11d030:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
  11d034:	e51b3010 	ldr	r3, [fp, #-16]
  11d038:	e50b3008 	str	r3, [fp, #-8]
  11d03c:	ea00000a 	b	11d06c <tcp_remove_listener+0x4c>
      if (pcb->listener == lpcb) {
  11d040:	e51b3008 	ldr	r3, [fp, #-8]
  11d044:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  11d048:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11d04c:	e1520003 	cmp	r2, r3
  11d050:	1a000002 	bne	11d060 <tcp_remove_listener+0x40>
         pcb->listener = NULL;
  11d054:	e51b3008 	ldr	r3, [fp, #-8]
  11d058:	e3a02000 	mov	r2, #0
  11d05c:	e583207c 	str	r2, [r3, #124]	; 0x7c
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
  11d060:	e51b3008 	ldr	r3, [fp, #-8]
  11d064:	e593300c 	ldr	r3, [r3, #12]
  11d068:	e50b3008 	str	r3, [fp, #-8]
  11d06c:	e51b3008 	ldr	r3, [fp, #-8]
  11d070:	e3530000 	cmp	r3, #0
  11d074:	1afffff1 	bne	11d040 <tcp_remove_listener+0x20>
      }
   }
}
  11d078:	e320f000 	nop	{0}
  11d07c:	e28bd000 	add	sp, fp, #0
  11d080:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11d084:	e12fff1e 	bx	lr

0011d088 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
  11d088:	e92d4800 	push	{fp, lr}
  11d08c:	e28db004 	add	fp, sp, #4
  11d090:	e24dd010 	sub	sp, sp, #16
  11d094:	e50b0010 	str	r0, [fp, #-16]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
  11d098:	e51b3010 	ldr	r3, [fp, #-16]
  11d09c:	e3530000 	cmp	r3, #0
  11d0a0:	1a000006 	bne	11d0c0 <tcp_listen_closed+0x38>
  11d0a4:	e3070ecc 	movw	r0, #32460	; 0x7ecc
  11d0a8:	e3400014 	movt	r0, #20
  11d0ac:	ebff9818 	bl	103114 <rt_kprintf>
  11d0b0:	e3a010c0 	mov	r1, #192	; 0xc0
  11d0b4:	e3070ed8 	movw	r0, #32472	; 0x7ed8
  11d0b8:	e3400014 	movt	r0, #20
  11d0bc:	ebffb80b 	bl	10b0f0 <sys_arch_assert>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
  11d0c0:	e51b3010 	ldr	r3, [fp, #-16]
  11d0c4:	e5933014 	ldr	r3, [r3, #20]
  11d0c8:	e3530001 	cmp	r3, #1
  11d0cc:	0a000006 	beq	11d0ec <tcp_listen_closed+0x64>
  11d0d0:	e3070f04 	movw	r0, #32516	; 0x7f04
  11d0d4:	e3400014 	movt	r0, #20
  11d0d8:	ebff980d 	bl	103114 <rt_kprintf>
  11d0dc:	e3a010c1 	mov	r1, #193	; 0xc1
  11d0e0:	e3070ed8 	movw	r0, #32472	; 0x7ed8
  11d0e4:	e3400014 	movt	r0, #20
  11d0e8:	ebffb800 	bl	10b0f0 <sys_arch_assert>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
  11d0ec:	e3a03001 	mov	r3, #1
  11d0f0:	e50b3008 	str	r3, [fp, #-8]
  11d0f4:	ea00000a 	b	11d124 <tcp_listen_closed+0x9c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
  11d0f8:	e3073ebc 	movw	r3, #32444	; 0x7ebc
  11d0fc:	e3403014 	movt	r3, #20
  11d100:	e51b2008 	ldr	r2, [fp, #-8]
  11d104:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  11d108:	e5933000 	ldr	r3, [r3]
  11d10c:	e51b1010 	ldr	r1, [fp, #-16]
  11d110:	e1a00003 	mov	r0, r3
  11d114:	ebffffc1 	bl	11d020 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
  11d118:	e51b3008 	ldr	r3, [fp, #-8]
  11d11c:	e2833001 	add	r3, r3, #1
  11d120:	e50b3008 	str	r3, [fp, #-8]
  11d124:	e51b3008 	ldr	r3, [fp, #-8]
  11d128:	e3530003 	cmp	r3, #3
  11d12c:	9afffff1 	bls	11d0f8 <tcp_listen_closed+0x70>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
  11d130:	e320f000 	nop	{0}
  11d134:	e24bd004 	sub	sp, fp, #4
  11d138:	e8bd8800 	pop	{fp, pc}

0011d13c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
  11d13c:	e92d4800 	push	{fp, lr}
  11d140:	e28db004 	add	fp, sp, #4
  11d144:	e24dd018 	sub	sp, sp, #24
  11d148:	e50b0010 	str	r0, [fp, #-16]
  11d14c:	e1a03001 	mov	r3, r1
  11d150:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
  11d154:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  11d158:	e3530000 	cmp	r3, #0
  11d15c:	0a000076 	beq	11d33c <tcp_close_shutdown+0x200>
  11d160:	e51b3010 	ldr	r3, [fp, #-16]
  11d164:	e5933014 	ldr	r3, [r3, #20]
  11d168:	e3530004 	cmp	r3, #4
  11d16c:	0a000003 	beq	11d180 <tcp_close_shutdown+0x44>
  11d170:	e51b3010 	ldr	r3, [fp, #-16]
  11d174:	e5933014 	ldr	r3, [r3, #20]
  11d178:	e3530007 	cmp	r3, #7
  11d17c:	1a00006e 	bne	11d33c <tcp_close_shutdown+0x200>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
  11d180:	e51b3010 	ldr	r3, [fp, #-16]
  11d184:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11d188:	e3530000 	cmp	r3, #0
  11d18c:	1a000003 	bne	11d1a0 <tcp_close_shutdown+0x64>
  11d190:	e51b3010 	ldr	r3, [fp, #-16]
  11d194:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  11d198:	e3530a02 	cmp	r3, #8192	; 0x2000
  11d19c:	0a000066 	beq	11d33c <tcp_close_shutdown+0x200>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
  11d1a0:	e51b3010 	ldr	r3, [fp, #-16]
  11d1a4:	e5d3301e 	ldrb	r3, [r3, #30]
  11d1a8:	e2033010 	and	r3, r3, #16
  11d1ac:	e3530000 	cmp	r3, #0
  11d1b0:	1a000006 	bne	11d1d0 <tcp_close_shutdown+0x94>
  11d1b4:	e3070f1c 	movw	r0, #32540	; 0x7f1c
  11d1b8:	e3400014 	movt	r0, #20
  11d1bc:	ebff97d4 	bl	103114 <rt_kprintf>
  11d1c0:	e300110f 	movw	r1, #271	; 0x10f
  11d1c4:	e3070ed8 	movw	r0, #32472	; 0x7ed8
  11d1c8:	e3400014 	movt	r0, #20
  11d1cc:	ebffb7c7 	bl	10b0f0 <sys_arch_assert>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
  11d1d0:	e51b3010 	ldr	r3, [fp, #-16]
  11d1d4:	e5930050 	ldr	r0, [r3, #80]	; 0x50
  11d1d8:	e51b3010 	ldr	r3, [fp, #-16]
  11d1dc:	e5931028 	ldr	r1, [r3, #40]	; 0x28
  11d1e0:	e51bc010 	ldr	ip, [fp, #-16]
  11d1e4:	e51b3010 	ldr	r3, [fp, #-16]
  11d1e8:	e283e004 	add	lr, r3, #4
  11d1ec:	e51b3010 	ldr	r3, [fp, #-16]
  11d1f0:	e1d331ba 	ldrh	r3, [r3, #26]
  11d1f4:	e51b2010 	ldr	r2, [fp, #-16]
  11d1f8:	e1d221bc 	ldrh	r2, [r2, #28]
  11d1fc:	e58d2004 	str	r2, [sp, #4]
  11d200:	e58d3000 	str	r3, [sp]
  11d204:	e1a0300e 	mov	r3, lr
  11d208:	e1a0200c 	mov	r2, ip
  11d20c:	eb0025b8 	bl	1268f4 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
  11d210:	e51b0010 	ldr	r0, [fp, #-16]
  11d214:	eb000ade 	bl	11fd94 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
  11d218:	e30c3c20 	movw	r3, #52256	; 0xcc20
  11d21c:	e3403015 	movt	r3, #21
  11d220:	e5933000 	ldr	r3, [r3]
  11d224:	e51b2010 	ldr	r2, [fp, #-16]
  11d228:	e1520003 	cmp	r2, r3
  11d22c:	1a000007 	bne	11d250 <tcp_close_shutdown+0x114>
  11d230:	e30c3c20 	movw	r3, #52256	; 0xcc20
  11d234:	e3403015 	movt	r3, #21
  11d238:	e5933000 	ldr	r3, [r3]
  11d23c:	e593200c 	ldr	r2, [r3, #12]
  11d240:	e30c3c20 	movw	r3, #52256	; 0xcc20
  11d244:	e3403015 	movt	r3, #21
  11d248:	e5832000 	str	r2, [r3]
  11d24c:	ea000014 	b	11d2a4 <tcp_close_shutdown+0x168>
  11d250:	e30c3c20 	movw	r3, #52256	; 0xcc20
  11d254:	e3403015 	movt	r3, #21
  11d258:	e5933000 	ldr	r3, [r3]
  11d25c:	e50b3008 	str	r3, [fp, #-8]
  11d260:	ea00000c 	b	11d298 <tcp_close_shutdown+0x15c>
  11d264:	e51b3008 	ldr	r3, [fp, #-8]
  11d268:	e593300c 	ldr	r3, [r3, #12]
  11d26c:	e51b2010 	ldr	r2, [fp, #-16]
  11d270:	e1520003 	cmp	r2, r3
  11d274:	1a000004 	bne	11d28c <tcp_close_shutdown+0x150>
  11d278:	e51b3010 	ldr	r3, [fp, #-16]
  11d27c:	e593200c 	ldr	r2, [r3, #12]
  11d280:	e51b3008 	ldr	r3, [fp, #-8]
  11d284:	e583200c 	str	r2, [r3, #12]
  11d288:	ea000005 	b	11d2a4 <tcp_close_shutdown+0x168>
  11d28c:	e51b3008 	ldr	r3, [fp, #-8]
  11d290:	e593300c 	ldr	r3, [r3, #12]
  11d294:	e50b3008 	str	r3, [fp, #-8]
  11d298:	e51b3008 	ldr	r3, [fp, #-8]
  11d29c:	e3530000 	cmp	r3, #0
  11d2a0:	1affffef 	bne	11d264 <tcp_close_shutdown+0x128>
  11d2a4:	e51b3010 	ldr	r3, [fp, #-16]
  11d2a8:	e3a02000 	mov	r2, #0
  11d2ac:	e583200c 	str	r2, [r3, #12]
  11d2b0:	e30c3c1c 	movw	r3, #52252	; 0xcc1c
  11d2b4:	e3403015 	movt	r3, #21
  11d2b8:	e3a02001 	mov	r2, #1
  11d2bc:	e5c32000 	strb	r2, [r3]
      if (pcb->state == ESTABLISHED) {
  11d2c0:	e51b3010 	ldr	r3, [fp, #-16]
  11d2c4:	e5933014 	ldr	r3, [r3, #20]
  11d2c8:	e3530004 	cmp	r3, #4
  11d2cc:	1a00000d 	bne	11d308 <tcp_close_shutdown+0x1cc>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
  11d2d0:	e51b3010 	ldr	r3, [fp, #-16]
  11d2d4:	e3a0200a 	mov	r2, #10
  11d2d8:	e5832014 	str	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
  11d2dc:	e30c3c30 	movw	r3, #52272	; 0xcc30
  11d2e0:	e3403015 	movt	r3, #21
  11d2e4:	e5932000 	ldr	r2, [r3]
  11d2e8:	e51b3010 	ldr	r3, [fp, #-16]
  11d2ec:	e583200c 	str	r2, [r3, #12]
  11d2f0:	e30c3c30 	movw	r3, #52272	; 0xcc30
  11d2f4:	e3403015 	movt	r3, #21
  11d2f8:	e51b2010 	ldr	r2, [fp, #-16]
  11d2fc:	e5832000 	str	r2, [r3]
  11d300:	eb0027cf 	bl	127244 <tcp_timer_needed>
  11d304:	ea00000a 	b	11d334 <tcp_close_shutdown+0x1f8>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
  11d308:	e30c3c34 	movw	r3, #52276	; 0xcc34
  11d30c:	e3403015 	movt	r3, #21
  11d310:	e5933000 	ldr	r3, [r3]
  11d314:	e51b2010 	ldr	r2, [fp, #-16]
  11d318:	e1520003 	cmp	r2, r3
  11d31c:	1a000001 	bne	11d328 <tcp_close_shutdown+0x1ec>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
  11d320:	eb001ce6 	bl	1246c0 <tcp_trigger_input_pcb_close>
  11d324:	ea000002 	b	11d334 <tcp_close_shutdown+0x1f8>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
  11d328:	e51b1010 	ldr	r1, [fp, #-16]
  11d32c:	e3a00002 	mov	r0, #2
  11d330:	ebffefd0 	bl	119278 <memp_free>
        }
      }
      return ERR_OK;
  11d334:	e3a03000 	mov	r3, #0
  11d338:	ea000058 	b	11d4a0 <tcp_close_shutdown+0x364>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
  11d33c:	e51b3010 	ldr	r3, [fp, #-16]
  11d340:	e5933014 	ldr	r3, [r3, #20]
  11d344:	e3530001 	cmp	r3, #1
  11d348:	0a000032 	beq	11d418 <tcp_close_shutdown+0x2dc>
  11d34c:	e3530001 	cmp	r3, #1
  11d350:	3a000002 	bcc	11d360 <tcp_close_shutdown+0x224>
  11d354:	e3530002 	cmp	r3, #2
  11d358:	0a000038 	beq	11d440 <tcp_close_shutdown+0x304>
  11d35c:	ea00004a 	b	11d48c <tcp_close_shutdown+0x350>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
  11d360:	e51b3010 	ldr	r3, [fp, #-16]
  11d364:	e1d331ba 	ldrh	r3, [r3, #26]
  11d368:	e3530000 	cmp	r3, #0
  11d36c:	0a000025 	beq	11d408 <tcp_close_shutdown+0x2cc>
      TCP_RMV(&tcp_bound_pcbs, pcb);
  11d370:	e30c3c2c 	movw	r3, #52268	; 0xcc2c
  11d374:	e3403015 	movt	r3, #21
  11d378:	e5933000 	ldr	r3, [r3]
  11d37c:	e51b2010 	ldr	r2, [fp, #-16]
  11d380:	e1520003 	cmp	r2, r3
  11d384:	1a000007 	bne	11d3a8 <tcp_close_shutdown+0x26c>
  11d388:	e30c3c2c 	movw	r3, #52268	; 0xcc2c
  11d38c:	e3403015 	movt	r3, #21
  11d390:	e5933000 	ldr	r3, [r3]
  11d394:	e593200c 	ldr	r2, [r3, #12]
  11d398:	e30c3c2c 	movw	r3, #52268	; 0xcc2c
  11d39c:	e3403015 	movt	r3, #21
  11d3a0:	e5832000 	str	r2, [r3]
  11d3a4:	ea000014 	b	11d3fc <tcp_close_shutdown+0x2c0>
  11d3a8:	e30c3c2c 	movw	r3, #52268	; 0xcc2c
  11d3ac:	e3403015 	movt	r3, #21
  11d3b0:	e5933000 	ldr	r3, [r3]
  11d3b4:	e50b300c 	str	r3, [fp, #-12]
  11d3b8:	ea00000c 	b	11d3f0 <tcp_close_shutdown+0x2b4>
  11d3bc:	e51b300c 	ldr	r3, [fp, #-12]
  11d3c0:	e593300c 	ldr	r3, [r3, #12]
  11d3c4:	e51b2010 	ldr	r2, [fp, #-16]
  11d3c8:	e1520003 	cmp	r2, r3
  11d3cc:	1a000004 	bne	11d3e4 <tcp_close_shutdown+0x2a8>
  11d3d0:	e51b3010 	ldr	r3, [fp, #-16]
  11d3d4:	e593200c 	ldr	r2, [r3, #12]
  11d3d8:	e51b300c 	ldr	r3, [fp, #-12]
  11d3dc:	e583200c 	str	r2, [r3, #12]
  11d3e0:	ea000005 	b	11d3fc <tcp_close_shutdown+0x2c0>
  11d3e4:	e51b300c 	ldr	r3, [fp, #-12]
  11d3e8:	e593300c 	ldr	r3, [r3, #12]
  11d3ec:	e50b300c 	str	r3, [fp, #-12]
  11d3f0:	e51b300c 	ldr	r3, [fp, #-12]
  11d3f4:	e3530000 	cmp	r3, #0
  11d3f8:	1affffef 	bne	11d3bc <tcp_close_shutdown+0x280>
  11d3fc:	e51b3010 	ldr	r3, [fp, #-16]
  11d400:	e3a02000 	mov	r2, #0
  11d404:	e583200c 	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
  11d408:	e51b1010 	ldr	r1, [fp, #-16]
  11d40c:	e3a00002 	mov	r0, #2
  11d410:	ebffef98 	bl	119278 <memp_free>
    break;
  11d414:	ea000020 	b	11d49c <tcp_close_shutdown+0x360>
  case LISTEN:
    tcp_listen_closed(pcb);
  11d418:	e51b0010 	ldr	r0, [fp, #-16]
  11d41c:	ebffff19 	bl	11d088 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
  11d420:	e51b1010 	ldr	r1, [fp, #-16]
  11d424:	e30c0c28 	movw	r0, #52264	; 0xcc28
  11d428:	e3400015 	movt	r0, #21
  11d42c:	eb000a92 	bl	11fe7c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
  11d430:	e51b1010 	ldr	r1, [fp, #-16]
  11d434:	e3a00003 	mov	r0, #3
  11d438:	ebffef8e 	bl	119278 <memp_free>
    break;
  11d43c:	ea000016 	b	11d49c <tcp_close_shutdown+0x360>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
  11d440:	e51b1010 	ldr	r1, [fp, #-16]
  11d444:	e30c0c20 	movw	r0, #52256	; 0xcc20
  11d448:	e3400015 	movt	r0, #21
  11d44c:	eb000a8a 	bl	11fe7c <tcp_pcb_remove>
  11d450:	e30c3c1c 	movw	r3, #52252	; 0xcc1c
  11d454:	e3403015 	movt	r3, #21
  11d458:	e3a02001 	mov	r2, #1
  11d45c:	e5c32000 	strb	r2, [r3]
    memp_free(MEMP_TCP_PCB, pcb);
  11d460:	e51b1010 	ldr	r1, [fp, #-16]
  11d464:	e3a00002 	mov	r0, #2
  11d468:	ebffef82 	bl	119278 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
  11d46c:	e30c3a30 	movw	r3, #51760	; 0xca30
  11d470:	e3403015 	movt	r3, #21
  11d474:	e5933174 	ldr	r3, [r3, #372]	; 0x174
  11d478:	e2832001 	add	r2, r3, #1
  11d47c:	e30c3a30 	movw	r3, #51760	; 0xca30
  11d480:	e3403015 	movt	r3, #21
  11d484:	e5832174 	str	r2, [r3, #372]	; 0x174
    break;
  11d488:	ea000003 	b	11d49c <tcp_close_shutdown+0x360>
  default:
    return tcp_close_shutdown_fin(pcb);
  11d48c:	e51b0010 	ldr	r0, [fp, #-16]
  11d490:	eb000005 	bl	11d4ac <tcp_close_shutdown_fin>
  11d494:	e1a03000 	mov	r3, r0
  11d498:	ea000000 	b	11d4a0 <tcp_close_shutdown+0x364>
  }
  return ERR_OK;
  11d49c:	e3a03000 	mov	r3, #0
}
  11d4a0:	e1a00003 	mov	r0, r3
  11d4a4:	e24bd004 	sub	sp, fp, #4
  11d4a8:	e8bd8800 	pop	{fp, pc}

0011d4ac <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
  11d4ac:	e92d4800 	push	{fp, lr}
  11d4b0:	e28db004 	add	fp, sp, #4
  11d4b4:	e24dd010 	sub	sp, sp, #16
  11d4b8:	e50b0010 	str	r0, [fp, #-16]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
  11d4bc:	e51b3010 	ldr	r3, [fp, #-16]
  11d4c0:	e3530000 	cmp	r3, #0
  11d4c4:	1a000006 	bne	11d4e4 <tcp_close_shutdown_fin+0x38>
  11d4c8:	e3070ecc 	movw	r0, #32460	; 0x7ecc
  11d4cc:	e3400014 	movt	r0, #20
  11d4d0:	ebff970f 	bl	103114 <rt_kprintf>
  11d4d4:	e300114d 	movw	r1, #333	; 0x14d
  11d4d8:	e3070ed8 	movw	r0, #32472	; 0x7ed8
  11d4dc:	e3400014 	movt	r0, #20
  11d4e0:	ebffb702 	bl	10b0f0 <sys_arch_assert>

  switch (pcb->state) {
  11d4e4:	e51b3010 	ldr	r3, [fp, #-16]
  11d4e8:	e5933014 	ldr	r3, [r3, #20]
  11d4ec:	e3530004 	cmp	r3, #4
  11d4f0:	0a000015 	beq	11d54c <tcp_close_shutdown_fin+0xa0>
  11d4f4:	e3530007 	cmp	r3, #7
  11d4f8:	0a000025 	beq	11d594 <tcp_close_shutdown_fin+0xe8>
  11d4fc:	e3530003 	cmp	r3, #3
  11d500:	1a000035 	bne	11d5dc <tcp_close_shutdown_fin+0x130>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
  11d504:	e51b0010 	ldr	r0, [fp, #-16]
  11d508:	eb001ce8 	bl	1248b0 <tcp_send_fin>
  11d50c:	e1a03000 	mov	r3, r0
  11d510:	e54b3005 	strb	r3, [fp, #-5]
    if (err == ERR_OK) {
  11d514:	e15b30d5 	ldrsb	r3, [fp, #-5]
  11d518:	e3530000 	cmp	r3, #0
  11d51c:	1a000030 	bne	11d5e4 <tcp_close_shutdown_fin+0x138>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
  11d520:	e30c3a30 	movw	r3, #51760	; 0xca30
  11d524:	e3403015 	movt	r3, #21
  11d528:	e5933174 	ldr	r3, [r3, #372]	; 0x174
  11d52c:	e2832001 	add	r2, r3, #1
  11d530:	e30c3a30 	movw	r3, #51760	; 0xca30
  11d534:	e3403015 	movt	r3, #21
  11d538:	e5832174 	str	r2, [r3, #372]	; 0x174
      pcb->state = FIN_WAIT_1;
  11d53c:	e51b3010 	ldr	r3, [fp, #-16]
  11d540:	e3a02005 	mov	r2, #5
  11d544:	e5832014 	str	r2, [r3, #20]
    }
    break;
  11d548:	ea000025 	b	11d5e4 <tcp_close_shutdown_fin+0x138>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
  11d54c:	e51b0010 	ldr	r0, [fp, #-16]
  11d550:	eb001cd6 	bl	1248b0 <tcp_send_fin>
  11d554:	e1a03000 	mov	r3, r0
  11d558:	e54b3005 	strb	r3, [fp, #-5]
    if (err == ERR_OK) {
  11d55c:	e15b30d5 	ldrsb	r3, [fp, #-5]
  11d560:	e3530000 	cmp	r3, #0
  11d564:	1a000020 	bne	11d5ec <tcp_close_shutdown_fin+0x140>
      MIB2_STATS_INC(mib2.tcpestabresets);
  11d568:	e30c3a30 	movw	r3, #51760	; 0xca30
  11d56c:	e3403015 	movt	r3, #21
  11d570:	e5933178 	ldr	r3, [r3, #376]	; 0x178
  11d574:	e2832001 	add	r2, r3, #1
  11d578:	e30c3a30 	movw	r3, #51760	; 0xca30
  11d57c:	e3403015 	movt	r3, #21
  11d580:	e5832178 	str	r2, [r3, #376]	; 0x178
      pcb->state = FIN_WAIT_1;
  11d584:	e51b3010 	ldr	r3, [fp, #-16]
  11d588:	e3a02005 	mov	r2, #5
  11d58c:	e5832014 	str	r2, [r3, #20]
    }
    break;
  11d590:	ea000015 	b	11d5ec <tcp_close_shutdown_fin+0x140>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
  11d594:	e51b0010 	ldr	r0, [fp, #-16]
  11d598:	eb001cc4 	bl	1248b0 <tcp_send_fin>
  11d59c:	e1a03000 	mov	r3, r0
  11d5a0:	e54b3005 	strb	r3, [fp, #-5]
    if (err == ERR_OK) {
  11d5a4:	e15b30d5 	ldrsb	r3, [fp, #-5]
  11d5a8:	e3530000 	cmp	r3, #0
  11d5ac:	1a000010 	bne	11d5f4 <tcp_close_shutdown_fin+0x148>
      MIB2_STATS_INC(mib2.tcpestabresets);
  11d5b0:	e30c3a30 	movw	r3, #51760	; 0xca30
  11d5b4:	e3403015 	movt	r3, #21
  11d5b8:	e5933178 	ldr	r3, [r3, #376]	; 0x178
  11d5bc:	e2832001 	add	r2, r3, #1
  11d5c0:	e30c3a30 	movw	r3, #51760	; 0xca30
  11d5c4:	e3403015 	movt	r3, #21
  11d5c8:	e5832178 	str	r2, [r3, #376]	; 0x178
      pcb->state = LAST_ACK;
  11d5cc:	e51b3010 	ldr	r3, [fp, #-16]
  11d5d0:	e3a02009 	mov	r2, #9
  11d5d4:	e5832014 	str	r2, [r3, #20]
    }
    break;
  11d5d8:	ea000005 	b	11d5f4 <tcp_close_shutdown_fin+0x148>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
  11d5dc:	e3a03000 	mov	r3, #0
  11d5e0:	ea000014 	b	11d638 <tcp_close_shutdown_fin+0x18c>
    break;
  11d5e4:	e320f000 	nop	{0}
  11d5e8:	ea000002 	b	11d5f8 <tcp_close_shutdown_fin+0x14c>
    break;
  11d5ec:	e320f000 	nop	{0}
  11d5f0:	ea000000 	b	11d5f8 <tcp_close_shutdown_fin+0x14c>
    break;
  11d5f4:	e320f000 	nop	{0}
    break;
  }

  if (err == ERR_OK) {
  11d5f8:	e15b30d5 	ldrsb	r3, [fp, #-5]
  11d5fc:	e3530000 	cmp	r3, #0
  11d600:	1a000002 	bne	11d610 <tcp_close_shutdown_fin+0x164>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
  11d604:	e51b0010 	ldr	r0, [fp, #-16]
  11d608:	eb002253 	bl	125f5c <tcp_output>
  11d60c:	ea000008 	b	11d634 <tcp_close_shutdown_fin+0x188>
  } else if (err == ERR_MEM) {
  11d610:	e15b30d5 	ldrsb	r3, [fp, #-5]
  11d614:	e3730001 	cmn	r3, #1
  11d618:	1a000005 	bne	11d634 <tcp_close_shutdown_fin+0x188>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
  11d61c:	e51b3010 	ldr	r3, [fp, #-16]
  11d620:	e5d3301e 	ldrb	r3, [r3, #30]
  11d624:	e3833008 	orr	r3, r3, #8
  11d628:	e6ef2073 	uxtb	r2, r3
  11d62c:	e51b3010 	ldr	r3, [fp, #-16]
  11d630:	e5c3201e 	strb	r2, [r3, #30]
  }
  return err;
  11d634:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  11d638:	e1a00003 	mov	r0, r3
  11d63c:	e24bd004 	sub	sp, fp, #4
  11d640:	e8bd8800 	pop	{fp, pc}

0011d644 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
  11d644:	e92d4800 	push	{fp, lr}
  11d648:	e28db004 	add	fp, sp, #4
  11d64c:	e24dd008 	sub	sp, sp, #8
  11d650:	e50b0008 	str	r0, [fp, #-8]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
  11d654:	e51b3008 	ldr	r3, [fp, #-8]
  11d658:	e5933014 	ldr	r3, [r3, #20]
  11d65c:	e3530001 	cmp	r3, #1
  11d660:	0a000005 	beq	11d67c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
  11d664:	e51b3008 	ldr	r3, [fp, #-8]
  11d668:	e5d3301e 	ldrb	r3, [r3, #30]
  11d66c:	e3833010 	orr	r3, r3, #16
  11d670:	e6ef2073 	uxtb	r2, r3
  11d674:	e51b3008 	ldr	r3, [fp, #-8]
  11d678:	e5c3201e 	strb	r2, [r3, #30]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
  11d67c:	e3a01001 	mov	r1, #1
  11d680:	e51b0008 	ldr	r0, [fp, #-8]
  11d684:	ebfffeac 	bl	11d13c <tcp_close_shutdown>
  11d688:	e1a03000 	mov	r3, r0
}
  11d68c:	e1a00003 	mov	r0, r3
  11d690:	e24bd004 	sub	sp, fp, #4
  11d694:	e8bd8800 	pop	{fp, pc}

0011d698 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
  11d698:	e92d4800 	push	{fp, lr}
  11d69c:	e28db004 	add	fp, sp, #4
  11d6a0:	e24dd010 	sub	sp, sp, #16
  11d6a4:	e50b0008 	str	r0, [fp, #-8]
  11d6a8:	e50b100c 	str	r1, [fp, #-12]
  11d6ac:	e50b2010 	str	r2, [fp, #-16]
  if (pcb->state == LISTEN) {
  11d6b0:	e51b3008 	ldr	r3, [fp, #-8]
  11d6b4:	e5933014 	ldr	r3, [r3, #20]
  11d6b8:	e3530001 	cmp	r3, #1
  11d6bc:	1a000001 	bne	11d6c8 <tcp_shutdown+0x30>
    return ERR_CONN;
  11d6c0:	e3e0300a 	mvn	r3, #10
  11d6c4:	ea000030 	b	11d78c <tcp_shutdown+0xf4>
  }
  if (shut_rx) {
  11d6c8:	e51b300c 	ldr	r3, [fp, #-12]
  11d6cc:	e3530000 	cmp	r3, #0
  11d6d0:	0a000018 	beq	11d738 <tcp_shutdown+0xa0>
    /* shut down the receive side: set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
  11d6d4:	e51b3008 	ldr	r3, [fp, #-8]
  11d6d8:	e5d3301e 	ldrb	r3, [r3, #30]
  11d6dc:	e3833010 	orr	r3, r3, #16
  11d6e0:	e6ef2073 	uxtb	r2, r3
  11d6e4:	e51b3008 	ldr	r3, [fp, #-8]
  11d6e8:	e5c3201e 	strb	r2, [r3, #30]
    if (shut_tx) {
  11d6ec:	e51b3010 	ldr	r3, [fp, #-16]
  11d6f0:	e3530000 	cmp	r3, #0
  11d6f4:	0a000004 	beq	11d70c <tcp_shutdown+0x74>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
  11d6f8:	e3a01001 	mov	r1, #1
  11d6fc:	e51b0008 	ldr	r0, [fp, #-8]
  11d700:	ebfffe8d 	bl	11d13c <tcp_close_shutdown>
  11d704:	e1a03000 	mov	r3, r0
  11d708:	ea00001f 	b	11d78c <tcp_shutdown+0xf4>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
  11d70c:	e51b3008 	ldr	r3, [fp, #-8]
  11d710:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11d714:	e3530000 	cmp	r3, #0
  11d718:	0a000006 	beq	11d738 <tcp_shutdown+0xa0>
      pbuf_free(pcb->refused_data);
  11d71c:	e51b3008 	ldr	r3, [fp, #-8]
  11d720:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11d724:	e1a00003 	mov	r0, r3
  11d728:	ebfff5e0 	bl	11aeb0 <pbuf_free>
      pcb->refused_data = NULL;
  11d72c:	e51b3008 	ldr	r3, [fp, #-8]
  11d730:	e3a02000 	mov	r2, #0
  11d734:	e5832078 	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
  11d738:	e51b3010 	ldr	r3, [fp, #-16]
  11d73c:	e3530000 	cmp	r3, #0
  11d740:	0a000010 	beq	11d788 <tcp_shutdown+0xf0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
  11d744:	e51b3008 	ldr	r3, [fp, #-8]
  11d748:	e5933014 	ldr	r3, [r3, #20]
  11d74c:	e3530003 	cmp	r3, #3
  11d750:	3a00000a 	bcc	11d780 <tcp_shutdown+0xe8>
  11d754:	e3530004 	cmp	r3, #4
  11d758:	9a000001 	bls	11d764 <tcp_shutdown+0xcc>
  11d75c:	e3530007 	cmp	r3, #7
  11d760:	1a000006 	bne	11d780 <tcp_shutdown+0xe8>
    case SYN_RCVD:
    case ESTABLISHED:
    case CLOSE_WAIT:
      return tcp_close_shutdown(pcb, (u8_t)shut_rx);
  11d764:	e51b300c 	ldr	r3, [fp, #-12]
  11d768:	e6ef3073 	uxtb	r3, r3
  11d76c:	e1a01003 	mov	r1, r3
  11d770:	e51b0008 	ldr	r0, [fp, #-8]
  11d774:	ebfffe70 	bl	11d13c <tcp_close_shutdown>
  11d778:	e1a03000 	mov	r3, r0
  11d77c:	ea000002 	b	11d78c <tcp_shutdown+0xf4>
    default:
      /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
        into CLOSED state, where the PCB is deallocated. */
      return ERR_CONN;
  11d780:	e3e0300a 	mvn	r3, #10
  11d784:	ea000000 	b	11d78c <tcp_shutdown+0xf4>
    }
  }
  return ERR_OK;
  11d788:	e3a03000 	mov	r3, #0
}
  11d78c:	e1a00003 	mov	r0, r3
  11d790:	e24bd004 	sub	sp, fp, #4
  11d794:	e8bd8800 	pop	{fp, pc}

0011d798 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
  11d798:	e92d4800 	push	{fp, lr}
  11d79c:	e28db004 	add	fp, sp, #4
  11d7a0:	e24dd030 	sub	sp, sp, #48	; 0x30
  11d7a4:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  11d7a8:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
  11d7ac:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d7b0:	e5933014 	ldr	r3, [r3, #20]
  11d7b4:	e3530001 	cmp	r3, #1
  11d7b8:	1a000006 	bne	11d7d8 <tcp_abandon+0x40>
  11d7bc:	e3070f38 	movw	r0, #32568	; 0x7f38
  11d7c0:	e3400014 	movt	r0, #20
  11d7c4:	ebff9652 	bl	103114 <rt_kprintf>
  11d7c8:	e30011db 	movw	r1, #475	; 0x1db
  11d7cc:	e3070ed8 	movw	r0, #32472	; 0x7ed8
  11d7d0:	e3400014 	movt	r0, #20
  11d7d4:	ebffb645 	bl	10b0f0 <sys_arch_assert>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
  11d7d8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d7dc:	e5933014 	ldr	r3, [r3, #20]
  11d7e0:	e353000a 	cmp	r3, #10
  11d7e4:	1a000007 	bne	11d808 <tcp_abandon+0x70>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
  11d7e8:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  11d7ec:	e30c0c30 	movw	r0, #52272	; 0xcc30
  11d7f0:	e3400015 	movt	r0, #21
  11d7f4:	eb0009a0 	bl	11fe7c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
  11d7f8:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  11d7fc:	e3a00002 	mov	r0, #2
  11d800:	ebffee9c 	bl	119278 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
  11d804:	ea00007f 	b	11da08 <tcp_abandon+0x270>
    int send_rst = 0;
  11d808:	e3a03000 	mov	r3, #0
  11d80c:	e50b3008 	str	r3, [fp, #-8]
    u16_t local_port = 0;
  11d810:	e3a03000 	mov	r3, #0
  11d814:	e14b30ba 	strh	r3, [fp, #-10]
    seqno = pcb->snd_nxt;
  11d818:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d81c:	e5933050 	ldr	r3, [r3, #80]	; 0x50
  11d820:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    ackno = pcb->rcv_nxt;
  11d824:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d828:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  11d82c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    errf = pcb->errf;
  11d830:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d834:	e5933090 	ldr	r3, [r3, #144]	; 0x90
  11d838:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    errf_arg = pcb->callback_arg;
  11d83c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d840:	e5933010 	ldr	r3, [r3, #16]
  11d844:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    if (pcb->state == CLOSED) {
  11d848:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d84c:	e5933014 	ldr	r3, [r3, #20]
  11d850:	e3530000 	cmp	r3, #0
  11d854:	1a00002a 	bne	11d904 <tcp_abandon+0x16c>
      if (pcb->local_port != 0) {
  11d858:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d85c:	e1d331ba 	ldrh	r3, [r3, #26]
  11d860:	e3530000 	cmp	r3, #0
  11d864:	0a000033 	beq	11d938 <tcp_abandon+0x1a0>
        TCP_RMV(&tcp_bound_pcbs, pcb);
  11d868:	e30c3c2c 	movw	r3, #52268	; 0xcc2c
  11d86c:	e3403015 	movt	r3, #21
  11d870:	e5933000 	ldr	r3, [r3]
  11d874:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11d878:	e1520003 	cmp	r2, r3
  11d87c:	1a000007 	bne	11d8a0 <tcp_abandon+0x108>
  11d880:	e30c3c2c 	movw	r3, #52268	; 0xcc2c
  11d884:	e3403015 	movt	r3, #21
  11d888:	e5933000 	ldr	r3, [r3]
  11d88c:	e593200c 	ldr	r2, [r3, #12]
  11d890:	e30c3c2c 	movw	r3, #52268	; 0xcc2c
  11d894:	e3403015 	movt	r3, #21
  11d898:	e5832000 	str	r2, [r3]
  11d89c:	ea000014 	b	11d8f4 <tcp_abandon+0x15c>
  11d8a0:	e30c3c2c 	movw	r3, #52268	; 0xcc2c
  11d8a4:	e3403015 	movt	r3, #21
  11d8a8:	e5933000 	ldr	r3, [r3]
  11d8ac:	e50b3010 	str	r3, [fp, #-16]
  11d8b0:	ea00000c 	b	11d8e8 <tcp_abandon+0x150>
  11d8b4:	e51b3010 	ldr	r3, [fp, #-16]
  11d8b8:	e593300c 	ldr	r3, [r3, #12]
  11d8bc:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11d8c0:	e1520003 	cmp	r2, r3
  11d8c4:	1a000004 	bne	11d8dc <tcp_abandon+0x144>
  11d8c8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d8cc:	e593200c 	ldr	r2, [r3, #12]
  11d8d0:	e51b3010 	ldr	r3, [fp, #-16]
  11d8d4:	e583200c 	str	r2, [r3, #12]
  11d8d8:	ea000005 	b	11d8f4 <tcp_abandon+0x15c>
  11d8dc:	e51b3010 	ldr	r3, [fp, #-16]
  11d8e0:	e593300c 	ldr	r3, [r3, #12]
  11d8e4:	e50b3010 	str	r3, [fp, #-16]
  11d8e8:	e51b3010 	ldr	r3, [fp, #-16]
  11d8ec:	e3530000 	cmp	r3, #0
  11d8f0:	1affffef 	bne	11d8b4 <tcp_abandon+0x11c>
  11d8f4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d8f8:	e3a02000 	mov	r2, #0
  11d8fc:	e583200c 	str	r2, [r3, #12]
  11d900:	ea00000c 	b	11d938 <tcp_abandon+0x1a0>
      send_rst = reset;
  11d904:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11d908:	e50b3008 	str	r3, [fp, #-8]
      local_port = pcb->local_port;
  11d90c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d910:	e1d331ba 	ldrh	r3, [r3, #26]
  11d914:	e14b30ba 	strh	r3, [fp, #-10]
      TCP_PCB_REMOVE_ACTIVE(pcb);
  11d918:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  11d91c:	e30c0c20 	movw	r0, #52256	; 0xcc20
  11d920:	e3400015 	movt	r0, #21
  11d924:	eb000954 	bl	11fe7c <tcp_pcb_remove>
  11d928:	e30c3c1c 	movw	r3, #52252	; 0xcc1c
  11d92c:	e3403015 	movt	r3, #21
  11d930:	e3a02001 	mov	r2, #1
  11d934:	e5c32000 	strb	r2, [r3]
    if (pcb->unacked != NULL) {
  11d938:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d93c:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  11d940:	e3530000 	cmp	r3, #0
  11d944:	0a000003 	beq	11d958 <tcp_abandon+0x1c0>
      tcp_segs_free(pcb->unacked);
  11d948:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d94c:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  11d950:	e1a00003 	mov	r0, r3
  11d954:	eb0006b7 	bl	11f438 <tcp_segs_free>
    if (pcb->unsent != NULL) {
  11d958:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d95c:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  11d960:	e3530000 	cmp	r3, #0
  11d964:	0a000003 	beq	11d978 <tcp_abandon+0x1e0>
      tcp_segs_free(pcb->unsent);
  11d968:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d96c:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  11d970:	e1a00003 	mov	r0, r3
  11d974:	eb0006af 	bl	11f438 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
  11d978:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d97c:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  11d980:	e3530000 	cmp	r3, #0
  11d984:	0a000003 	beq	11d998 <tcp_abandon+0x200>
      tcp_segs_free(pcb->ooseq);
  11d988:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d98c:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  11d990:	e1a00003 	mov	r0, r3
  11d994:	eb0006a7 	bl	11f438 <tcp_segs_free>
    if (send_rst) {
  11d998:	e51b3008 	ldr	r3, [fp, #-8]
  11d99c:	e3530000 	cmp	r3, #0
  11d9a0:	0a00000b 	beq	11d9d4 <tcp_abandon+0x23c>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
  11d9a4:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11d9a8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d9ac:	e2831004 	add	r1, r3, #4
  11d9b0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d9b4:	e1d331bc 	ldrh	r3, [r3, #28]
  11d9b8:	e58d3004 	str	r3, [sp, #4]
  11d9bc:	e15b30ba 	ldrh	r3, [fp, #-10]
  11d9c0:	e58d3000 	str	r3, [sp]
  11d9c4:	e1a03001 	mov	r3, r1
  11d9c8:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11d9cc:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  11d9d0:	eb0023c7 	bl	1268f4 <tcp_rst>
    last_state = pcb->state;
  11d9d4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d9d8:	e5933014 	ldr	r3, [r3, #20]
  11d9dc:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    memp_free(MEMP_TCP_PCB, pcb);
  11d9e0:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  11d9e4:	e3a00002 	mov	r0, #2
  11d9e8:	ebffee22 	bl	119278 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  11d9ec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11d9f0:	e3530000 	cmp	r3, #0
  11d9f4:	0a000003 	beq	11da08 <tcp_abandon+0x270>
  11d9f8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11d9fc:	e3e0100c 	mvn	r1, #12
  11da00:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  11da04:	e12fff33 	blx	r3
}
  11da08:	e320f000 	nop	{0}
  11da0c:	e24bd004 	sub	sp, fp, #4
  11da10:	e8bd8800 	pop	{fp, pc}

0011da14 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
  11da14:	e92d4800 	push	{fp, lr}
  11da18:	e28db004 	add	fp, sp, #4
  11da1c:	e24dd008 	sub	sp, sp, #8
  11da20:	e50b0008 	str	r0, [fp, #-8]
  tcp_abandon(pcb, 1);
  11da24:	e3a01001 	mov	r1, #1
  11da28:	e51b0008 	ldr	r0, [fp, #-8]
  11da2c:	ebffff59 	bl	11d798 <tcp_abandon>
}
  11da30:	e320f000 	nop	{0}
  11da34:	e24bd004 	sub	sp, fp, #4
  11da38:	e8bd8800 	pop	{fp, pc}

0011da3c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
  11da3c:	e92d4800 	push	{fp, lr}
  11da40:	e28db004 	add	fp, sp, #4
  11da44:	e24dd020 	sub	sp, sp, #32
  11da48:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11da4c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  11da50:	e1a03002 	mov	r3, r2
  11da54:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
  11da58:	e3a03004 	mov	r3, #4
  11da5c:	e50b300c 	str	r3, [fp, #-12]
  struct tcp_pcb *cpcb;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
  11da60:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11da64:	e3530000 	cmp	r3, #0
  11da68:	1a000002 	bne	11da78 <tcp_bind+0x3c>
    ipaddr = IP4_ADDR_ANY;
  11da6c:	e3093908 	movw	r3, #39176	; 0x9908
  11da70:	e3403014 	movt	r3, #20
  11da74:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
  11da78:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11da7c:	e3530000 	cmp	r3, #0
  11da80:	0a000002 	beq	11da90 <tcp_bind+0x54>
  11da84:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11da88:	e3530000 	cmp	r3, #0
  11da8c:	1a000001 	bne	11da98 <tcp_bind+0x5c>
    return ERR_VAL;
  11da90:	e3e03005 	mvn	r3, #5
  11da94:	ea000078 	b	11dc7c <tcp_bind+0x240>
  }

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
  11da98:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11da9c:	e5933014 	ldr	r3, [r3, #20]
  11daa0:	e3530000 	cmp	r3, #0
  11daa4:	0a000008 	beq	11dacc <tcp_bind+0x90>
  11daa8:	e3070f6c 	movw	r0, #32620	; 0x7f6c
  11daac:	e3400014 	movt	r0, #20
  11dab0:	ebff9597 	bl	103114 <rt_kprintf>
  11dab4:	e300123f 	movw	r1, #575	; 0x23f
  11dab8:	e3070ed8 	movw	r0, #32472	; 0x7ed8
  11dabc:	e3400014 	movt	r0, #20
  11dac0:	ebffb58a 	bl	10b0f0 <sys_arch_assert>
  11dac4:	e3e03005 	mvn	r3, #5
  11dac8:	ea00006b 	b	11dc7c <tcp_bind+0x240>
  /* Unless the REUSEADDR flag is set,
     we have to check the pcbs in TIME-WAIT state, also.
     We do not dump TIME_WAIT pcb's; they can still be matched by incoming
     packets using both local and remote IP addresses and ports to distinguish.
   */
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
  11dacc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11dad0:	e5d33008 	ldrb	r3, [r3, #8]
  11dad4:	e2033004 	and	r3, r3, #4
  11dad8:	e3530000 	cmp	r3, #0
  11dadc:	0a000001 	beq	11dae8 <tcp_bind+0xac>
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  11dae0:	e3a03003 	mov	r3, #3
  11dae4:	e50b300c 	str	r3, [fp, #-12]
  }
#endif /* SO_REUSE */

  if (port == 0) {
  11dae8:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11daec:	e3530000 	cmp	r3, #0
  11daf0:	1a000007 	bne	11db14 <tcp_bind+0xd8>
    port = tcp_new_port();
  11daf4:	eb0001be 	bl	11e1f4 <tcp_new_port>
  11daf8:	e1a03000 	mov	r3, r0
  11dafc:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
    if (port == 0) {
  11db00:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11db04:	e3530000 	cmp	r3, #0
  11db08:	1a00003d 	bne	11dc04 <tcp_bind+0x1c8>
      return ERR_BUF;
  11db0c:	e3e03001 	mvn	r3, #1
  11db10:	ea000059 	b	11dc7c <tcp_bind+0x240>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
  11db14:	e3a03000 	mov	r3, #0
  11db18:	e50b3008 	str	r3, [fp, #-8]
  11db1c:	ea000034 	b	11dbf4 <tcp_bind+0x1b8>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
  11db20:	e3073ebc 	movw	r3, #32444	; 0x7ebc
  11db24:	e3403014 	movt	r3, #20
  11db28:	e51b2008 	ldr	r2, [fp, #-8]
  11db2c:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  11db30:	e5933000 	ldr	r3, [r3]
  11db34:	e50b3010 	str	r3, [fp, #-16]
  11db38:	ea000027 	b	11dbdc <tcp_bind+0x1a0>
        if (cpcb->local_port == port) {
  11db3c:	e51b3010 	ldr	r3, [fp, #-16]
  11db40:	e1d331ba 	ldrh	r3, [r3, #26]
  11db44:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  11db48:	e1520003 	cmp	r2, r3
  11db4c:	1a00001f 	bne	11dbd0 <tcp_bind+0x194>
#if SO_REUSE
          /* Omit checking for the same port if both pcbs have REUSEADDR set.
             For SO_REUSEADDR, the duplicate-check for a 5-tuple is done in
             tcp_connect. */
          if (!ip_get_option(pcb, SOF_REUSEADDR) ||
  11db50:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11db54:	e5d33008 	ldrb	r3, [r3, #8]
  11db58:	e2033004 	and	r3, r3, #4
  11db5c:	e3530000 	cmp	r3, #0
  11db60:	0a000004 	beq	11db78 <tcp_bind+0x13c>
              !ip_get_option(cpcb, SOF_REUSEADDR))
  11db64:	e51b3010 	ldr	r3, [fp, #-16]
  11db68:	e5d33008 	ldrb	r3, [r3, #8]
  11db6c:	e2033004 	and	r3, r3, #4
          if (!ip_get_option(pcb, SOF_REUSEADDR) ||
  11db70:	e3530000 	cmp	r3, #0
  11db74:	1a000015 	bne	11dbd0 <tcp_bind+0x194>
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
  11db78:	e51b3010 	ldr	r3, [fp, #-16]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
  11db7c:	e3530000 	cmp	r3, #0
  11db80:	0a000010 	beq	11dbc8 <tcp_bind+0x18c>
                (ip_addr_isany(&cpcb->local_ip) ||
  11db84:	e51b3010 	ldr	r3, [fp, #-16]
  11db88:	e5933000 	ldr	r3, [r3]
  11db8c:	e3530000 	cmp	r3, #0
  11db90:	0a00000c 	beq	11dbc8 <tcp_bind+0x18c>
  11db94:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11db98:	e3530000 	cmp	r3, #0
  11db9c:	0a000009 	beq	11dbc8 <tcp_bind+0x18c>
                ip_addr_isany(ipaddr) ||
  11dba0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11dba4:	e5933000 	ldr	r3, [r3]
  11dba8:	e3530000 	cmp	r3, #0
  11dbac:	0a000005 	beq	11dbc8 <tcp_bind+0x18c>
                ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
  11dbb0:	e51b3010 	ldr	r3, [fp, #-16]
  11dbb4:	e5932000 	ldr	r2, [r3]
  11dbb8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11dbbc:	e5933000 	ldr	r3, [r3]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
  11dbc0:	e1520003 	cmp	r2, r3
  11dbc4:	1a000001 	bne	11dbd0 <tcp_bind+0x194>
              return ERR_USE;
  11dbc8:	e3e03007 	mvn	r3, #7
  11dbcc:	ea00002a 	b	11dc7c <tcp_bind+0x240>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
  11dbd0:	e51b3010 	ldr	r3, [fp, #-16]
  11dbd4:	e593300c 	ldr	r3, [r3, #12]
  11dbd8:	e50b3010 	str	r3, [fp, #-16]
  11dbdc:	e51b3010 	ldr	r3, [fp, #-16]
  11dbe0:	e3530000 	cmp	r3, #0
  11dbe4:	1affffd4 	bne	11db3c <tcp_bind+0x100>
    for (i = 0; i < max_pcb_list; i++) {
  11dbe8:	e51b3008 	ldr	r3, [fp, #-8]
  11dbec:	e2833001 	add	r3, r3, #1
  11dbf0:	e50b3008 	str	r3, [fp, #-8]
  11dbf4:	e51b2008 	ldr	r2, [fp, #-8]
  11dbf8:	e51b300c 	ldr	r3, [fp, #-12]
  11dbfc:	e1520003 	cmp	r2, r3
  11dc00:	baffffc6 	blt	11db20 <tcp_bind+0xe4>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
  11dc04:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11dc08:	e3530000 	cmp	r3, #0
  11dc0c:	0a00000c 	beq	11dc44 <tcp_bind+0x208>
  11dc10:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11dc14:	e5933000 	ldr	r3, [r3]
  11dc18:	e3530000 	cmp	r3, #0
  11dc1c:	0a000008 	beq	11dc44 <tcp_bind+0x208>
    ip_addr_set(&pcb->local_ip, ipaddr);
  11dc20:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11dc24:	e3530000 	cmp	r3, #0
  11dc28:	0a000002 	beq	11dc38 <tcp_bind+0x1fc>
  11dc2c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11dc30:	e5933000 	ldr	r3, [r3]
  11dc34:	ea000000 	b	11dc3c <tcp_bind+0x200>
  11dc38:	e3a03000 	mov	r3, #0
  11dc3c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11dc40:	e5823000 	str	r3, [r2]
  }
  pcb->local_port = port;
  11dc44:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11dc48:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  11dc4c:	e1c321ba 	strh	r2, [r3, #26]
  TCP_REG(&tcp_bound_pcbs, pcb);
  11dc50:	e30c3c2c 	movw	r3, #52268	; 0xcc2c
  11dc54:	e3403015 	movt	r3, #21
  11dc58:	e5932000 	ldr	r2, [r3]
  11dc5c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11dc60:	e583200c 	str	r2, [r3, #12]
  11dc64:	e30c3c2c 	movw	r3, #52268	; 0xcc2c
  11dc68:	e3403015 	movt	r3, #21
  11dc6c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11dc70:	e5832000 	str	r2, [r3]
  11dc74:	eb002572 	bl	127244 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
  11dc78:	e3a03000 	mov	r3, #0
}
  11dc7c:	e1a00003 	mov	r0, r3
  11dc80:	e24bd004 	sub	sp, fp, #4
  11dc84:	e8bd8800 	pop	{fp, pc}

0011dc88 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
  11dc88:	e92d4800 	push	{fp, lr}
  11dc8c:	e28db004 	add	fp, sp, #4
  11dc90:	e24dd010 	sub	sp, sp, #16
  11dc94:	e50b0008 	str	r0, [fp, #-8]
  11dc98:	e50b100c 	str	r1, [fp, #-12]
  11dc9c:	e1a03002 	mov	r3, r2
  11dca0:	e54b300d 	strb	r3, [fp, #-13]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcp_abort(pcb);
  11dca4:	e51b000c 	ldr	r0, [fp, #-12]
  11dca8:	ebffff59 	bl	11da14 <tcp_abort>

  return ERR_ABRT;
  11dcac:	e3e0300c 	mvn	r3, #12
}
  11dcb0:	e1a00003 	mov	r0, r3
  11dcb4:	e24bd004 	sub	sp, fp, #4
  11dcb8:	e8bd8800 	pop	{fp, pc}

0011dcbc <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
  11dcbc:	e92d4800 	push	{fp, lr}
  11dcc0:	e28db004 	add	fp, sp, #4
  11dcc4:	e24dd008 	sub	sp, sp, #8
  11dcc8:	e50b0008 	str	r0, [fp, #-8]
  11dccc:	e1a03001 	mov	r3, r1
  11dcd0:	e54b3009 	strb	r3, [fp, #-9]
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
  11dcd4:	e55b3009 	ldrb	r3, [fp, #-9]
  11dcd8:	e3a02000 	mov	r2, #0
  11dcdc:	e1a01003 	mov	r1, r3
  11dce0:	e51b0008 	ldr	r0, [fp, #-8]
  11dce4:	eb000003 	bl	11dcf8 <tcp_listen_with_backlog_and_err>
  11dce8:	e1a03000 	mov	r3, r0
}
  11dcec:	e1a00003 	mov	r0, r3
  11dcf0:	e24bd004 	sub	sp, fp, #4
  11dcf4:	e8bd8800 	pop	{fp, pc}

0011dcf8 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
  11dcf8:	e92d4800 	push	{fp, lr}
  11dcfc:	e28db004 	add	fp, sp, #4
  11dd00:	e24dd020 	sub	sp, sp, #32
  11dd04:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11dd08:	e1a03001 	mov	r3, r1
  11dd0c:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  11dd10:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  struct tcp_pcb_listen *lpcb = NULL;
  11dd14:	e3a03000 	mov	r3, #0
  11dd18:	e50b3008 	str	r3, [fp, #-8]
  err_t res;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
  11dd1c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11dd20:	e5933014 	ldr	r3, [r3, #20]
  11dd24:	e3530000 	cmp	r3, #0
  11dd28:	0a000009 	beq	11dd54 <tcp_listen_with_backlog_and_err+0x5c>
  11dd2c:	e3070f94 	movw	r0, #32660	; 0x7f94
  11dd30:	e3400014 	movt	r0, #20
  11dd34:	ebff94f6 	bl	103114 <rt_kprintf>
  11dd38:	e30012af 	movw	r1, #687	; 0x2af
  11dd3c:	e3070ed8 	movw	r0, #32472	; 0x7ed8
  11dd40:	e3400014 	movt	r0, #20
  11dd44:	ebffb4e9 	bl	10b0f0 <sys_arch_assert>
  11dd48:	e3e0300e 	mvn	r3, #14
  11dd4c:	e54b3009 	strb	r3, [fp, #-9]
  11dd50:	ea000091 	b	11df9c <tcp_listen_with_backlog_and_err+0x2a4>

  /* already listening? */
  if (pcb->state == LISTEN) {
  11dd54:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11dd58:	e5933014 	ldr	r3, [r3, #20]
  11dd5c:	e3530001 	cmp	r3, #1
  11dd60:	1a000004 	bne	11dd78 <tcp_listen_with_backlog_and_err+0x80>
    lpcb = (struct tcp_pcb_listen*)pcb;
  11dd64:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11dd68:	e50b3008 	str	r3, [fp, #-8]
    res = ERR_ALREADY;
  11dd6c:	e3e03008 	mvn	r3, #8
  11dd70:	e54b3009 	strb	r3, [fp, #-9]
    goto done;
  11dd74:	ea000088 	b	11df9c <tcp_listen_with_backlog_and_err+0x2a4>
  }
#if SO_REUSE
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
  11dd78:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11dd7c:	e5d33008 	ldrb	r3, [r3, #8]
  11dd80:	e2033004 	and	r3, r3, #4
  11dd84:	e3530000 	cmp	r3, #0
  11dd88:	0a00001b 	beq	11ddfc <tcp_listen_with_backlog_and_err+0x104>
    /* Since SOF_REUSEADDR allows reusing a local address before the pcb's usage
       is declared (listen-/connection-pcb), we have to make sure now that
       this port is only used once for every local IP. */
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  11dd8c:	e30c3c28 	movw	r3, #52264	; 0xcc28
  11dd90:	e3403015 	movt	r3, #21
  11dd94:	e5933000 	ldr	r3, [r3]
  11dd98:	e50b3008 	str	r3, [fp, #-8]
  11dd9c:	ea000013 	b	11ddf0 <tcp_listen_with_backlog_and_err+0xf8>
      if ((lpcb->local_port == pcb->local_port) &&
  11dda0:	e51b3008 	ldr	r3, [fp, #-8]
  11dda4:	e1d321ba 	ldrh	r2, [r3, #26]
  11dda8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ddac:	e1d331ba 	ldrh	r3, [r3, #26]
  11ddb0:	e1520003 	cmp	r2, r3
  11ddb4:	1a00000a 	bne	11dde4 <tcp_listen_with_backlog_and_err+0xec>
          ip_addr_cmp(&lpcb->local_ip, &pcb->local_ip)) {
  11ddb8:	e51b3008 	ldr	r3, [fp, #-8]
  11ddbc:	e5932000 	ldr	r2, [r3]
  11ddc0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ddc4:	e5933000 	ldr	r3, [r3]
      if ((lpcb->local_port == pcb->local_port) &&
  11ddc8:	e1520003 	cmp	r2, r3
  11ddcc:	1a000004 	bne	11dde4 <tcp_listen_with_backlog_and_err+0xec>
        /* this address/port is already used */
        lpcb = NULL;
  11ddd0:	e3a03000 	mov	r3, #0
  11ddd4:	e50b3008 	str	r3, [fp, #-8]
        res = ERR_USE;
  11ddd8:	e3e03007 	mvn	r3, #7
  11dddc:	e54b3009 	strb	r3, [fp, #-9]
        goto done;
  11dde0:	ea00006d 	b	11df9c <tcp_listen_with_backlog_and_err+0x2a4>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  11dde4:	e51b3008 	ldr	r3, [fp, #-8]
  11dde8:	e593300c 	ldr	r3, [r3, #12]
  11ddec:	e50b3008 	str	r3, [fp, #-8]
  11ddf0:	e51b3008 	ldr	r3, [fp, #-8]
  11ddf4:	e3530000 	cmp	r3, #0
  11ddf8:	1affffe8 	bne	11dda0 <tcp_listen_with_backlog_and_err+0xa8>
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
  11ddfc:	e30022c7 	movw	r2, #711	; 0x2c7
  11de00:	e3071ed8 	movw	r1, #32472	; 0x7ed8
  11de04:	e3401014 	movt	r1, #20
  11de08:	e3a00003 	mov	r0, #3
  11de0c:	ebffecb1 	bl	1190d8 <memp_malloc_fn>
  11de10:	e50b0008 	str	r0, [fp, #-8]
  if (lpcb == NULL) {
  11de14:	e51b3008 	ldr	r3, [fp, #-8]
  11de18:	e3530000 	cmp	r3, #0
  11de1c:	1a000002 	bne	11de2c <tcp_listen_with_backlog_and_err+0x134>
    res = ERR_MEM;
  11de20:	e3e03000 	mvn	r3, #0
  11de24:	e54b3009 	strb	r3, [fp, #-9]
    goto done;
  11de28:	ea00005b 	b	11df9c <tcp_listen_with_backlog_and_err+0x2a4>
  }
  lpcb->callback_arg = pcb->callback_arg;
  11de2c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11de30:	e5932010 	ldr	r2, [r3, #16]
  11de34:	e51b3008 	ldr	r3, [fp, #-8]
  11de38:	e5832010 	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
  11de3c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11de40:	e1d321ba 	ldrh	r2, [r3, #26]
  11de44:	e51b3008 	ldr	r3, [fp, #-8]
  11de48:	e1c321ba 	strh	r2, [r3, #26]
  lpcb->state = LISTEN;
  11de4c:	e51b3008 	ldr	r3, [fp, #-8]
  11de50:	e3a02001 	mov	r2, #1
  11de54:	e5832014 	str	r2, [r3, #20]
  lpcb->prio = pcb->prio;
  11de58:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11de5c:	e5d32018 	ldrb	r2, [r3, #24]
  11de60:	e51b3008 	ldr	r3, [fp, #-8]
  11de64:	e5c32018 	strb	r2, [r3, #24]
  lpcb->so_options = pcb->so_options;
  11de68:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11de6c:	e5d32008 	ldrb	r2, [r3, #8]
  11de70:	e51b3008 	ldr	r3, [fp, #-8]
  11de74:	e5c32008 	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
  11de78:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11de7c:	e5d3200a 	ldrb	r2, [r3, #10]
  11de80:	e51b3008 	ldr	r3, [fp, #-8]
  11de84:	e5c3200a 	strb	r2, [r3, #10]
  lpcb->tos = pcb->tos;
  11de88:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11de8c:	e5d32009 	ldrb	r2, [r3, #9]
  11de90:	e51b3008 	ldr	r3, [fp, #-8]
  11de94:	e5c32009 	strb	r2, [r3, #9]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
  11de98:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11de9c:	e5932000 	ldr	r2, [r3]
  11dea0:	e51b3008 	ldr	r3, [fp, #-8]
  11dea4:	e5832000 	str	r2, [r3]
  if (pcb->local_port != 0) {
  11dea8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11deac:	e1d331ba 	ldrh	r3, [r3, #26]
  11deb0:	e3530000 	cmp	r3, #0
  11deb4:	0a000025 	beq	11df50 <tcp_listen_with_backlog_and_err+0x258>
    TCP_RMV(&tcp_bound_pcbs, pcb);
  11deb8:	e30c3c2c 	movw	r3, #52268	; 0xcc2c
  11debc:	e3403015 	movt	r3, #21
  11dec0:	e5933000 	ldr	r3, [r3]
  11dec4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11dec8:	e1520003 	cmp	r2, r3
  11decc:	1a000007 	bne	11def0 <tcp_listen_with_backlog_and_err+0x1f8>
  11ded0:	e30c3c2c 	movw	r3, #52268	; 0xcc2c
  11ded4:	e3403015 	movt	r3, #21
  11ded8:	e5933000 	ldr	r3, [r3]
  11dedc:	e593200c 	ldr	r2, [r3, #12]
  11dee0:	e30c3c2c 	movw	r3, #52268	; 0xcc2c
  11dee4:	e3403015 	movt	r3, #21
  11dee8:	e5832000 	str	r2, [r3]
  11deec:	ea000014 	b	11df44 <tcp_listen_with_backlog_and_err+0x24c>
  11def0:	e30c3c2c 	movw	r3, #52268	; 0xcc2c
  11def4:	e3403015 	movt	r3, #21
  11def8:	e5933000 	ldr	r3, [r3]
  11defc:	e50b3010 	str	r3, [fp, #-16]
  11df00:	ea00000c 	b	11df38 <tcp_listen_with_backlog_and_err+0x240>
  11df04:	e51b3010 	ldr	r3, [fp, #-16]
  11df08:	e593300c 	ldr	r3, [r3, #12]
  11df0c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11df10:	e1520003 	cmp	r2, r3
  11df14:	1a000004 	bne	11df2c <tcp_listen_with_backlog_and_err+0x234>
  11df18:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11df1c:	e593200c 	ldr	r2, [r3, #12]
  11df20:	e51b3010 	ldr	r3, [fp, #-16]
  11df24:	e583200c 	str	r2, [r3, #12]
  11df28:	ea000005 	b	11df44 <tcp_listen_with_backlog_and_err+0x24c>
  11df2c:	e51b3010 	ldr	r3, [fp, #-16]
  11df30:	e593300c 	ldr	r3, [r3, #12]
  11df34:	e50b3010 	str	r3, [fp, #-16]
  11df38:	e51b3010 	ldr	r3, [fp, #-16]
  11df3c:	e3530000 	cmp	r3, #0
  11df40:	1affffef 	bne	11df04 <tcp_listen_with_backlog_and_err+0x20c>
  11df44:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11df48:	e3a02000 	mov	r2, #0
  11df4c:	e583200c 	str	r2, [r3, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
  11df50:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11df54:	e3a00002 	mov	r0, #2
  11df58:	ebffecc6 	bl	119278 <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
  11df5c:	e51b2008 	ldr	r2, [fp, #-8]
  11df60:	e30d3c88 	movw	r3, #56456	; 0xdc88
  11df64:	e3403011 	movt	r3, #17
  11df68:	e582301c 	str	r3, [r2, #28]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
  11df6c:	e30c3c28 	movw	r3, #52264	; 0xcc28
  11df70:	e3403015 	movt	r3, #21
  11df74:	e5932000 	ldr	r2, [r3]
  11df78:	e51b3008 	ldr	r3, [fp, #-8]
  11df7c:	e583200c 	str	r2, [r3, #12]
  11df80:	e30c3c28 	movw	r3, #52264	; 0xcc28
  11df84:	e3403015 	movt	r3, #21
  11df88:	e51b2008 	ldr	r2, [fp, #-8]
  11df8c:	e5832000 	str	r2, [r3]
  11df90:	eb0024ab 	bl	127244 <tcp_timer_needed>
  res = ERR_OK;
  11df94:	e3a03000 	mov	r3, #0
  11df98:	e54b3009 	strb	r3, [fp, #-9]
done:
  if (err != NULL) {
  11df9c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11dfa0:	e3530000 	cmp	r3, #0
  11dfa4:	0a000002 	beq	11dfb4 <tcp_listen_with_backlog_and_err+0x2bc>
    *err = res;
  11dfa8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11dfac:	e55b2009 	ldrb	r2, [fp, #-9]
  11dfb0:	e5c32000 	strb	r2, [r3]
  }
  return (struct tcp_pcb *)lpcb;
  11dfb4:	e51b3008 	ldr	r3, [fp, #-8]
}
  11dfb8:	e1a00003 	mov	r0, r3
  11dfbc:	e24bd004 	sub	sp, fp, #4
  11dfc0:	e8bd8800 	pop	{fp, pc}

0011dfc4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
  11dfc4:	e92d4800 	push	{fp, lr}
  11dfc8:	e28db004 	add	fp, sp, #4
  11dfcc:	e24dd010 	sub	sp, sp, #16
  11dfd0:	e50b0010 	str	r0, [fp, #-16]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
  11dfd4:	e51b3010 	ldr	r3, [fp, #-16]
  11dfd8:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  11dfdc:	e51b2010 	ldr	r2, [fp, #-16]
  11dfe0:	e1d222bc 	ldrh	r2, [r2, #44]	; 0x2c
  11dfe4:	e0833002 	add	r3, r3, r2
  11dfe8:	e50b3008 	str	r3, [fp, #-8]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
  11dfec:	e51b3010 	ldr	r3, [fp, #-16]
  11dff0:	e5932030 	ldr	r2, [r3, #48]	; 0x30
  11dff4:	e51b3010 	ldr	r3, [fp, #-16]
  11dff8:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  11dffc:	e3530a01 	cmp	r3, #4096	; 0x1000
  11e000:	31a03003 	movcc	r3, r3
  11e004:	23a03a01 	movcs	r3, #4096	; 0x1000
  11e008:	e6ff3073 	uxth	r3, r3
  11e00c:	e0823003 	add	r3, r2, r3
  11e010:	e51b2008 	ldr	r2, [fp, #-8]
  11e014:	e0423003 	sub	r3, r2, r3
  11e018:	e3530000 	cmp	r3, #0
  11e01c:	ba000008 	blt	11e044 <tcp_update_rcv_ann_wnd+0x80>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
  11e020:	e51b3010 	ldr	r3, [fp, #-16]
  11e024:	e1d322bc 	ldrh	r2, [r3, #44]	; 0x2c
  11e028:	e51b3010 	ldr	r3, [fp, #-16]
  11e02c:	e1c322be 	strh	r2, [r3, #46]	; 0x2e
    return new_right_edge - pcb->rcv_ann_right_edge;
  11e030:	e51b3010 	ldr	r3, [fp, #-16]
  11e034:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  11e038:	e51b2008 	ldr	r2, [fp, #-8]
  11e03c:	e0423003 	sub	r3, r2, r3
  11e040:	ea00001f 	b	11e0c4 <tcp_update_rcv_ann_wnd+0x100>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
  11e044:	e51b3010 	ldr	r3, [fp, #-16]
  11e048:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  11e04c:	e51b3010 	ldr	r3, [fp, #-16]
  11e050:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  11e054:	e0423003 	sub	r3, r2, r3
  11e058:	e3530000 	cmp	r3, #0
  11e05c:	da000003 	ble	11e070 <tcp_update_rcv_ann_wnd+0xac>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
  11e060:	e51b3010 	ldr	r3, [fp, #-16]
  11e064:	e3a02000 	mov	r2, #0
  11e068:	e1c322be 	strh	r2, [r3, #46]	; 0x2e
  11e06c:	ea000013 	b	11e0c0 <tcp_update_rcv_ann_wnd+0xfc>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
  11e070:	e51b3010 	ldr	r3, [fp, #-16]
  11e074:	e5932030 	ldr	r2, [r3, #48]	; 0x30
  11e078:	e51b3010 	ldr	r3, [fp, #-16]
  11e07c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  11e080:	e0423003 	sub	r3, r2, r3
  11e084:	e50b300c 	str	r3, [fp, #-12]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
  11e088:	e51b300c 	ldr	r3, [fp, #-12]
  11e08c:	e3530801 	cmp	r3, #65536	; 0x10000
  11e090:	3a000006 	bcc	11e0b0 <tcp_update_rcv_ann_wnd+0xec>
  11e094:	e3070fb8 	movw	r0, #32696	; 0x7fb8
  11e098:	e3400014 	movt	r0, #20
  11e09c:	ebff941c 	bl	103114 <rt_kprintf>
  11e0a0:	e3001303 	movw	r1, #771	; 0x303
  11e0a4:	e3070ed8 	movw	r0, #32472	; 0x7ed8
  11e0a8:	e3400014 	movt	r0, #20
  11e0ac:	ebffb40f 	bl	10b0f0 <sys_arch_assert>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
  11e0b0:	e51b300c 	ldr	r3, [fp, #-12]
  11e0b4:	e6ff2073 	uxth	r2, r3
  11e0b8:	e51b3010 	ldr	r3, [fp, #-16]
  11e0bc:	e1c322be 	strh	r2, [r3, #46]	; 0x2e
    }
    return 0;
  11e0c0:	e3a03000 	mov	r3, #0
  }
}
  11e0c4:	e1a00003 	mov	r0, r3
  11e0c8:	e24bd004 	sub	sp, fp, #4
  11e0cc:	e8bd8800 	pop	{fp, pc}

0011e0d0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
  11e0d0:	e92d4800 	push	{fp, lr}
  11e0d4:	e28db004 	add	fp, sp, #4
  11e0d8:	e24dd010 	sub	sp, sp, #16
  11e0dc:	e50b0010 	str	r0, [fp, #-16]
  11e0e0:	e1a03001 	mov	r3, r1
  11e0e4:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
  11e0e8:	e51b3010 	ldr	r3, [fp, #-16]
  11e0ec:	e5933014 	ldr	r3, [r3, #20]
  11e0f0:	e3530001 	cmp	r3, #1
  11e0f4:	1a000006 	bne	11e114 <tcp_recved+0x44>
  11e0f8:	e3070fd4 	movw	r0, #32724	; 0x7fd4
  11e0fc:	e3400014 	movt	r0, #20
  11e100:	ebff9403 	bl	103114 <rt_kprintf>
  11e104:	e300131b 	movw	r1, #795	; 0x31b
  11e108:	e3070ed8 	movw	r0, #32472	; 0x7ed8
  11e10c:	e3400014 	movt	r0, #20
  11e110:	ebffb3f6 	bl	10b0f0 <sys_arch_assert>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
  11e114:	e51b3010 	ldr	r3, [fp, #-16]
  11e118:	e1d322bc 	ldrh	r2, [r3, #44]	; 0x2c
  11e11c:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11e120:	e0823003 	add	r3, r2, r3
  11e124:	e6ff2073 	uxth	r2, r3
  11e128:	e51b3010 	ldr	r3, [fp, #-16]
  11e12c:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
  11e130:	e51b3010 	ldr	r3, [fp, #-16]
  11e134:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  11e138:	e3530a02 	cmp	r3, #8192	; 0x2000
  11e13c:	9a000003 	bls	11e150 <tcp_recved+0x80>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
  11e140:	e51b3010 	ldr	r3, [fp, #-16]
  11e144:	e3a02a02 	mov	r2, #8192	; 0x2000
  11e148:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
  11e14c:	ea000016 	b	11e1ac <tcp_recved+0xdc>
  } else if (pcb->rcv_wnd == 0) {
  11e150:	e51b3010 	ldr	r3, [fp, #-16]
  11e154:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  11e158:	e3530000 	cmp	r3, #0
  11e15c:	1a000012 	bne	11e1ac <tcp_recved+0xdc>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
  11e160:	e51b3010 	ldr	r3, [fp, #-16]
  11e164:	e5933014 	ldr	r3, [r3, #20]
  11e168:	e3530007 	cmp	r3, #7
  11e16c:	0a000003 	beq	11e180 <tcp_recved+0xb0>
  11e170:	e51b3010 	ldr	r3, [fp, #-16]
  11e174:	e5933014 	ldr	r3, [r3, #20]
  11e178:	e3530009 	cmp	r3, #9
  11e17c:	1a000003 	bne	11e190 <tcp_recved+0xc0>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
  11e180:	e51b3010 	ldr	r3, [fp, #-16]
  11e184:	e3a02a02 	mov	r2, #8192	; 0x2000
  11e188:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
  11e18c:	ea000006 	b	11e1ac <tcp_recved+0xdc>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
  11e190:	e3070ffc 	movw	r0, #32764	; 0x7ffc
  11e194:	e3400014 	movt	r0, #20
  11e198:	ebff93dd 	bl	103114 <rt_kprintf>
  11e19c:	e3a01fca 	mov	r1, #808	; 0x328
  11e1a0:	e3070ed8 	movw	r0, #32472	; 0x7ed8
  11e1a4:	e3400014 	movt	r0, #20
  11e1a8:	ebffb3d0 	bl	10b0f0 <sys_arch_assert>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
  11e1ac:	e51b0010 	ldr	r0, [fp, #-16]
  11e1b0:	ebffff83 	bl	11dfc4 <tcp_update_rcv_ann_wnd>
  11e1b4:	e1a03000 	mov	r3, r0
  11e1b8:	e50b3008 	str	r3, [fp, #-8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
  11e1bc:	e51b3008 	ldr	r3, [fp, #-8]
  11e1c0:	e3530b02 	cmp	r3, #2048	; 0x800
  11e1c4:	ba000007 	blt	11e1e8 <tcp_recved+0x118>
    tcp_ack_now(pcb);
  11e1c8:	e51b3010 	ldr	r3, [fp, #-16]
  11e1cc:	e5d3301e 	ldrb	r3, [r3, #30]
  11e1d0:	e3833002 	orr	r3, r3, #2
  11e1d4:	e6ef2073 	uxtb	r2, r3
  11e1d8:	e51b3010 	ldr	r3, [fp, #-16]
  11e1dc:	e5c3201e 	strb	r2, [r3, #30]
    tcp_output(pcb);
  11e1e0:	e51b0010 	ldr	r0, [fp, #-16]
  11e1e4:	eb001f5c 	bl	125f5c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
  11e1e8:	e320f000 	nop	{0}
  11e1ec:	e24bd004 	sub	sp, fp, #4
  11e1f0:	e8bd8800 	pop	{fp, pc}

0011e1f4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
  11e1f4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11e1f8:	e28db000 	add	fp, sp, #0
  11e1fc:	e24dd00c 	sub	sp, sp, #12
  u8_t i;
  u16_t n = 0;
  11e200:	e3a03000 	mov	r3, #0
  11e204:	e14b30b8 	strh	r3, [fp, #-8]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
  11e208:	e30d3030 	movw	r3, #53296	; 0xd030
  11e20c:	e3403014 	movt	r3, #20
  11e210:	e1d320b0 	ldrh	r2, [r3]
  11e214:	e2823001 	add	r3, r2, #1
  11e218:	e6ff1073 	uxth	r1, r3
  11e21c:	e30d3030 	movw	r3, #53296	; 0xd030
  11e220:	e3403014 	movt	r3, #20
  11e224:	e1c310b0 	strh	r1, [r3]
  11e228:	e30f3fff 	movw	r3, #65535	; 0xffff
  11e22c:	e1520003 	cmp	r2, r3
  11e230:	1a000003 	bne	11e244 <tcp_new_port+0x50>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  11e234:	e30d3030 	movw	r3, #53296	; 0xd030
  11e238:	e3403014 	movt	r3, #20
  11e23c:	e3a02903 	mov	r2, #49152	; 0xc000
  11e240:	e1c320b0 	strh	r2, [r3]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
  11e244:	e3a03000 	mov	r3, #0
  11e248:	e54b3005 	strb	r3, [fp, #-5]
  11e24c:	ea00001e 	b	11e2cc <tcp_new_port+0xd8>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
  11e250:	e55b2005 	ldrb	r2, [fp, #-5]
  11e254:	e3073ebc 	movw	r3, #32444	; 0x7ebc
  11e258:	e3403014 	movt	r3, #20
  11e25c:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  11e260:	e5933000 	ldr	r3, [r3]
  11e264:	e50b300c 	str	r3, [fp, #-12]
  11e268:	ea000011 	b	11e2b4 <tcp_new_port+0xc0>
      if (pcb->local_port == tcp_port) {
  11e26c:	e51b300c 	ldr	r3, [fp, #-12]
  11e270:	e1d321ba 	ldrh	r2, [r3, #26]
  11e274:	e30d3030 	movw	r3, #53296	; 0xd030
  11e278:	e3403014 	movt	r3, #20
  11e27c:	e1d330b0 	ldrh	r3, [r3]
  11e280:	e1520003 	cmp	r2, r3
  11e284:	1a000007 	bne	11e2a8 <tcp_new_port+0xb4>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
  11e288:	e15b30b8 	ldrh	r3, [fp, #-8]
  11e28c:	e2833001 	add	r3, r3, #1
  11e290:	e14b30b8 	strh	r3, [fp, #-8]
  11e294:	e15b30b8 	ldrh	r3, [fp, #-8]
  11e298:	e3530901 	cmp	r3, #16384	; 0x4000
  11e29c:	3affffd9 	bcc	11e208 <tcp_new_port+0x14>
          return 0;
  11e2a0:	e3a03000 	mov	r3, #0
  11e2a4:	ea00000e 	b	11e2e4 <tcp_new_port+0xf0>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
  11e2a8:	e51b300c 	ldr	r3, [fp, #-12]
  11e2ac:	e593300c 	ldr	r3, [r3, #12]
  11e2b0:	e50b300c 	str	r3, [fp, #-12]
  11e2b4:	e51b300c 	ldr	r3, [fp, #-12]
  11e2b8:	e3530000 	cmp	r3, #0
  11e2bc:	1affffea 	bne	11e26c <tcp_new_port+0x78>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
  11e2c0:	e55b3005 	ldrb	r3, [fp, #-5]
  11e2c4:	e2833001 	add	r3, r3, #1
  11e2c8:	e54b3005 	strb	r3, [fp, #-5]
  11e2cc:	e55b3005 	ldrb	r3, [fp, #-5]
  11e2d0:	e3530003 	cmp	r3, #3
  11e2d4:	9affffdd 	bls	11e250 <tcp_new_port+0x5c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
  11e2d8:	e30d3030 	movw	r3, #53296	; 0xd030
  11e2dc:	e3403014 	movt	r3, #20
  11e2e0:	e1d330b0 	ldrh	r3, [r3]
}
  11e2e4:	e1a00003 	mov	r0, r3
  11e2e8:	e28bd000 	add	sp, fp, #0
  11e2ec:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11e2f0:	e12fff1e 	bx	lr

0011e2f4 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
      tcp_connected_fn connected)
{
  11e2f4:	e92d4800 	push	{fp, lr}
  11e2f8:	e28db004 	add	fp, sp, #4
  11e2fc:	e24dd030 	sub	sp, sp, #48	; 0x30
  11e300:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  11e304:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  11e308:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
  11e30c:	e1a03002 	mov	r3, r2
  11e310:	e14b32be 	strh	r3, [fp, #-46]	; 0xffffffd2
  err_t ret;
  u32_t iss;
  u16_t old_local_port;

  if ((pcb == NULL) || (ipaddr == NULL)) {
  11e314:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e318:	e3530000 	cmp	r3, #0
  11e31c:	0a000002 	beq	11e32c <tcp_connect+0x38>
  11e320:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11e324:	e3530000 	cmp	r3, #0
  11e328:	1a000001 	bne	11e334 <tcp_connect+0x40>
    return ERR_VAL;
  11e32c:	e3e03005 	mvn	r3, #5
  11e330:	ea000101 	b	11e73c <tcp_connect+0x448>
  }

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
  11e334:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e338:	e5933014 	ldr	r3, [r3, #20]
  11e33c:	e3530000 	cmp	r3, #0
  11e340:	0a000008 	beq	11e368 <tcp_connect+0x74>
  11e344:	e3080020 	movw	r0, #32800	; 0x8020
  11e348:	e3400014 	movt	r0, #20
  11e34c:	ebff9370 	bl	103114 <rt_kprintf>
  11e350:	e3001373 	movw	r1, #883	; 0x373
  11e354:	e3070ed8 	movw	r0, #32472	; 0x7ed8
  11e358:	e3400014 	movt	r0, #20
  11e35c:	ebffb363 	bl	10b0f0 <sys_arch_assert>
  11e360:	e3e03009 	mvn	r3, #9
  11e364:	ea0000f4 	b	11e73c <tcp_connect+0x448>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
  11e368:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11e36c:	e3530000 	cmp	r3, #0
  11e370:	0a000002 	beq	11e380 <tcp_connect+0x8c>
  11e374:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11e378:	e5933000 	ldr	r3, [r3]
  11e37c:	ea000000 	b	11e384 <tcp_connect+0x90>
  11e380:	e3a03000 	mov	r3, #0
  11e384:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11e388:	e5823004 	str	r3, [r2, #4]
  pcb->remote_port = port;
  11e38c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e390:	e15b22be 	ldrh	r2, [fp, #-46]	; 0xffffffd2
  11e394:	e1c321bc 	strh	r2, [r3, #28]

  /* check if we have a route to the remote host */
  if (ip_addr_isany(&pcb->local_ip)) {
  11e398:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e39c:	e3530000 	cmp	r3, #0
  11e3a0:	0a000003 	beq	11e3b4 <tcp_connect+0xc0>
  11e3a4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e3a8:	e5933000 	ldr	r3, [r3]
  11e3ac:	e3530000 	cmp	r3, #0
  11e3b0:	1a000018 	bne	11e418 <tcp_connect+0x124>
    /* no local IP address set, yet. */
    struct netif *netif;
    const ip_addr_t *local_ip;
    ip_route_get_local_ip(&pcb->local_ip, &pcb->remote_ip, netif, local_ip);
  11e3b4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e3b8:	e2833004 	add	r3, r3, #4
  11e3bc:	e1a00003 	mov	r0, r3
  11e3c0:	eb004b73 	bl	131194 <ip4_route>
  11e3c4:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  11e3c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11e3cc:	e3530000 	cmp	r3, #0
  11e3d0:	0a000002 	beq	11e3e0 <tcp_connect+0xec>
  11e3d4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11e3d8:	e2833004 	add	r3, r3, #4
  11e3dc:	ea000000 	b	11e3e4 <tcp_connect+0xf0>
  11e3e0:	e3a03000 	mov	r3, #0
  11e3e4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    if ((netif == NULL) || (local_ip == NULL)) {
  11e3e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11e3ec:	e3530000 	cmp	r3, #0
  11e3f0:	0a000002 	beq	11e400 <tcp_connect+0x10c>
  11e3f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11e3f8:	e3530000 	cmp	r3, #0
  11e3fc:	1a000001 	bne	11e408 <tcp_connect+0x114>
      /* Don't even try to send a SYN packet if we have no route
         since that will fail. */
      return ERR_RTE;
  11e400:	e3e03003 	mvn	r3, #3
  11e404:	ea0000cc 	b	11e73c <tcp_connect+0x448>
    }
    /* Use the address as local address of the pcb. */
    ip_addr_copy(pcb->local_ip, *local_ip);
  11e408:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11e40c:	e5932000 	ldr	r2, [r3]
  11e410:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e414:	e5832000 	str	r2, [r3]
  }

  old_local_port = pcb->local_port;
  11e418:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e41c:	e1d331ba 	ldrh	r3, [r3, #26]
  11e420:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
  if (pcb->local_port == 0) {
  11e424:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e428:	e1d331ba 	ldrh	r3, [r3, #26]
  11e42c:	e3530000 	cmp	r3, #0
  11e430:	1a00000a 	bne	11e460 <tcp_connect+0x16c>
    pcb->local_port = tcp_new_port();
  11e434:	ebffff6e 	bl	11e1f4 <tcp_new_port>
  11e438:	e1a03000 	mov	r3, r0
  11e43c:	e1a02003 	mov	r2, r3
  11e440:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e444:	e1c321ba 	strh	r2, [r3, #26]
    if (pcb->local_port == 0) {
  11e448:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e44c:	e1d331ba 	ldrh	r3, [r3, #26]
  11e450:	e3530000 	cmp	r3, #0
  11e454:	1a000035 	bne	11e530 <tcp_connect+0x23c>
      return ERR_BUF;
  11e458:	e3e03001 	mvn	r3, #1
  11e45c:	ea0000b6 	b	11e73c <tcp_connect+0x448>
    }
  } else {
#if SO_REUSE
    if (ip_get_option(pcb, SOF_REUSEADDR)) {
  11e460:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e464:	e5d33008 	ldrb	r3, [r3, #8]
  11e468:	e2033004 	and	r3, r3, #4
  11e46c:	e3530000 	cmp	r3, #0
  11e470:	0a00002e 	beq	11e530 <tcp_connect+0x23c>
      /* Since SOF_REUSEADDR allows reusing a local address, we have to make sure
         now that the 5-tuple is unique. */
      struct tcp_pcb *cpcb;
      int i;
      /* Don't check listen- and bound-PCBs, check active- and TIME-WAIT PCBs. */
      for (i = 2; i < NUM_TCP_PCB_LISTS; i++) {
  11e474:	e3a03002 	mov	r3, #2
  11e478:	e50b300c 	str	r3, [fp, #-12]
  11e47c:	ea000028 	b	11e524 <tcp_connect+0x230>
        for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
  11e480:	e3073ebc 	movw	r3, #32444	; 0x7ebc
  11e484:	e3403014 	movt	r3, #20
  11e488:	e51b200c 	ldr	r2, [fp, #-12]
  11e48c:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  11e490:	e5933000 	ldr	r3, [r3]
  11e494:	e50b3008 	str	r3, [fp, #-8]
  11e498:	ea00001b 	b	11e50c <tcp_connect+0x218>
          if ((cpcb->local_port == pcb->local_port) &&
  11e49c:	e51b3008 	ldr	r3, [fp, #-8]
  11e4a0:	e1d321ba 	ldrh	r2, [r3, #26]
  11e4a4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e4a8:	e1d331ba 	ldrh	r3, [r3, #26]
  11e4ac:	e1520003 	cmp	r2, r3
  11e4b0:	1a000012 	bne	11e500 <tcp_connect+0x20c>
              (cpcb->remote_port == port) &&
  11e4b4:	e51b3008 	ldr	r3, [fp, #-8]
  11e4b8:	e1d331bc 	ldrh	r3, [r3, #28]
          if ((cpcb->local_port == pcb->local_port) &&
  11e4bc:	e15b22be 	ldrh	r2, [fp, #-46]	; 0xffffffd2
  11e4c0:	e1520003 	cmp	r2, r3
  11e4c4:	1a00000d 	bne	11e500 <tcp_connect+0x20c>
              ip_addr_cmp(&cpcb->local_ip, &pcb->local_ip) &&
  11e4c8:	e51b3008 	ldr	r3, [fp, #-8]
  11e4cc:	e5932000 	ldr	r2, [r3]
  11e4d0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e4d4:	e5933000 	ldr	r3, [r3]
              (cpcb->remote_port == port) &&
  11e4d8:	e1520003 	cmp	r2, r3
  11e4dc:	1a000007 	bne	11e500 <tcp_connect+0x20c>
              ip_addr_cmp(&cpcb->remote_ip, ipaddr)) {
  11e4e0:	e51b3008 	ldr	r3, [fp, #-8]
  11e4e4:	e5932004 	ldr	r2, [r3, #4]
  11e4e8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11e4ec:	e5933000 	ldr	r3, [r3]
              ip_addr_cmp(&cpcb->local_ip, &pcb->local_ip) &&
  11e4f0:	e1520003 	cmp	r2, r3
  11e4f4:	1a000001 	bne	11e500 <tcp_connect+0x20c>
            /* linux returns EISCONN here, but ERR_USE should be OK for us */
            return ERR_USE;
  11e4f8:	e3e03007 	mvn	r3, #7
  11e4fc:	ea00008e 	b	11e73c <tcp_connect+0x448>
        for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
  11e500:	e51b3008 	ldr	r3, [fp, #-8]
  11e504:	e593300c 	ldr	r3, [r3, #12]
  11e508:	e50b3008 	str	r3, [fp, #-8]
  11e50c:	e51b3008 	ldr	r3, [fp, #-8]
  11e510:	e3530000 	cmp	r3, #0
  11e514:	1affffe0 	bne	11e49c <tcp_connect+0x1a8>
      for (i = 2; i < NUM_TCP_PCB_LISTS; i++) {
  11e518:	e51b300c 	ldr	r3, [fp, #-12]
  11e51c:	e2833001 	add	r3, r3, #1
  11e520:	e50b300c 	str	r3, [fp, #-12]
  11e524:	e51b300c 	ldr	r3, [fp, #-12]
  11e528:	e3530003 	cmp	r3, #3
  11e52c:	daffffd3 	ble	11e480 <tcp_connect+0x18c>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
  11e530:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  11e534:	eb0006bc 	bl	12002c <tcp_next_iss>
  11e538:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  pcb->rcv_nxt = 0;
  11e53c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e540:	e3a02000 	mov	r2, #0
  11e544:	e5832028 	str	r2, [r3, #40]	; 0x28
  pcb->snd_nxt = iss;
  11e548:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e54c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  11e550:	e5832050 	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
  11e554:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11e558:	e2432001 	sub	r2, r3, #1
  11e55c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e560:	e5832048 	str	r2, [r3, #72]	; 0x48
  pcb->snd_wl2 = iss - 1;
  11e564:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11e568:	e2432001 	sub	r2, r3, #1
  11e56c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e570:	e5832058 	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
  11e574:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11e578:	e2432001 	sub	r2, r3, #1
  11e57c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e580:	e583205c 	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
  11e584:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e588:	e3a02a02 	mov	r2, #8192	; 0x2000
  11e58c:	e1c322be 	strh	r2, [r3, #46]	; 0x2e
  11e590:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e594:	e1d322be 	ldrh	r2, [r3, #46]	; 0x2e
  11e598:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e59c:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
  11e5a0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e5a4:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  11e5a8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e5ac:	e5832030 	str	r2, [r3, #48]	; 0x30
  pcb->snd_wnd = TCP_WND;
  11e5b0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e5b4:	e3a02a02 	mov	r2, #8192	; 0x2000
  11e5b8:	e1c326b0 	strh	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
  11e5bc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e5c0:	e3a02f86 	mov	r2, #536	; 0x218
  11e5c4:	e1c323b6 	strh	r2, [r3, #54]	; 0x36
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
  11e5c8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e5cc:	e1d323b6 	ldrh	r2, [r3, #54]	; 0x36
  11e5d0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e5d4:	e2833004 	add	r3, r3, #4
  11e5d8:	e1a01003 	mov	r1, r3
  11e5dc:	e1a00002 	mov	r0, r2
  11e5e0:	eb0006a6 	bl	120080 <tcp_eff_send_mss_impl>
  11e5e4:	e1a03000 	mov	r3, r0
  11e5e8:	e1a02003 	mov	r2, r3
  11e5ec:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e5f0:	e1c323b6 	strh	r2, [r3, #54]	; 0x36
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
  11e5f4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e5f8:	e3a02001 	mov	r2, #1
  11e5fc:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
#if LWIP_CALLBACK_API
  pcb->connected = connected;
  11e600:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e604:	e51b2034 	ldr	r2, [fp, #-52]	; 0xffffffcc
  11e608:	e5832088 	str	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
  11e60c:	e3a01002 	mov	r1, #2
  11e610:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  11e614:	eb001d01 	bl	125a20 <tcp_enqueue_flags>
  11e618:	e1a03000 	mov	r3, r0
  11e61c:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  if (ret == ERR_OK) {
  11e620:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  11e624:	e3530000 	cmp	r3, #0
  11e628:	1a000042 	bne	11e738 <tcp_connect+0x444>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
  11e62c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e630:	e3a02002 	mov	r2, #2
  11e634:	e5832014 	str	r2, [r3, #20]
    if (old_local_port != 0) {
  11e638:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  11e63c:	e3530000 	cmp	r3, #0
  11e640:	0a000025 	beq	11e6dc <tcp_connect+0x3e8>
      TCP_RMV(&tcp_bound_pcbs, pcb);
  11e644:	e30c3c2c 	movw	r3, #52268	; 0xcc2c
  11e648:	e3403015 	movt	r3, #21
  11e64c:	e5933000 	ldr	r3, [r3]
  11e650:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11e654:	e1520003 	cmp	r2, r3
  11e658:	1a000007 	bne	11e67c <tcp_connect+0x388>
  11e65c:	e30c3c2c 	movw	r3, #52268	; 0xcc2c
  11e660:	e3403015 	movt	r3, #21
  11e664:	e5933000 	ldr	r3, [r3]
  11e668:	e593200c 	ldr	r2, [r3, #12]
  11e66c:	e30c3c2c 	movw	r3, #52268	; 0xcc2c
  11e670:	e3403015 	movt	r3, #21
  11e674:	e5832000 	str	r2, [r3]
  11e678:	ea000014 	b	11e6d0 <tcp_connect+0x3dc>
  11e67c:	e30c3c2c 	movw	r3, #52268	; 0xcc2c
  11e680:	e3403015 	movt	r3, #21
  11e684:	e5933000 	ldr	r3, [r3]
  11e688:	e50b3010 	str	r3, [fp, #-16]
  11e68c:	ea00000c 	b	11e6c4 <tcp_connect+0x3d0>
  11e690:	e51b3010 	ldr	r3, [fp, #-16]
  11e694:	e593300c 	ldr	r3, [r3, #12]
  11e698:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11e69c:	e1520003 	cmp	r2, r3
  11e6a0:	1a000004 	bne	11e6b8 <tcp_connect+0x3c4>
  11e6a4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e6a8:	e593200c 	ldr	r2, [r3, #12]
  11e6ac:	e51b3010 	ldr	r3, [fp, #-16]
  11e6b0:	e583200c 	str	r2, [r3, #12]
  11e6b4:	ea000005 	b	11e6d0 <tcp_connect+0x3dc>
  11e6b8:	e51b3010 	ldr	r3, [fp, #-16]
  11e6bc:	e593300c 	ldr	r3, [r3, #12]
  11e6c0:	e50b3010 	str	r3, [fp, #-16]
  11e6c4:	e51b3010 	ldr	r3, [fp, #-16]
  11e6c8:	e3530000 	cmp	r3, #0
  11e6cc:	1affffef 	bne	11e690 <tcp_connect+0x39c>
  11e6d0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e6d4:	e3a02000 	mov	r2, #0
  11e6d8:	e583200c 	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
  11e6dc:	e30c3c20 	movw	r3, #52256	; 0xcc20
  11e6e0:	e3403015 	movt	r3, #21
  11e6e4:	e5932000 	ldr	r2, [r3]
  11e6e8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e6ec:	e583200c 	str	r2, [r3, #12]
  11e6f0:	e30c3c20 	movw	r3, #52256	; 0xcc20
  11e6f4:	e3403015 	movt	r3, #21
  11e6f8:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11e6fc:	e5832000 	str	r2, [r3]
  11e700:	eb0022cf 	bl	127244 <tcp_timer_needed>
  11e704:	e30c3c1c 	movw	r3, #52252	; 0xcc1c
  11e708:	e3403015 	movt	r3, #21
  11e70c:	e3a02001 	mov	r2, #1
  11e710:	e5c32000 	strb	r2, [r3]
    MIB2_STATS_INC(mib2.tcpactiveopens);
  11e714:	e30c3a30 	movw	r3, #51760	; 0xca30
  11e718:	e3403015 	movt	r3, #21
  11e71c:	e593316c 	ldr	r3, [r3, #364]	; 0x16c
  11e720:	e2832001 	add	r2, r3, #1
  11e724:	e30c3a30 	movw	r3, #51760	; 0xca30
  11e728:	e3403015 	movt	r3, #21
  11e72c:	e583216c 	str	r2, [r3, #364]	; 0x16c

    tcp_output(pcb);
  11e730:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  11e734:	eb001e08 	bl	125f5c <tcp_output>
  }
  return ret;
  11e738:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
}
  11e73c:	e1a00003 	mov	r0, r3
  11e740:	e24bd004 	sub	sp, fp, #4
  11e744:	e8bd8800 	pop	{fp, pc}

0011e748 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
  11e748:	e92d4800 	push	{fp, lr}
  11e74c:	e28db004 	add	fp, sp, #4
  11e750:	e24dd030 	sub	sp, sp, #48	; 0x30
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
  11e754:	e3a03000 	mov	r3, #0
  11e758:	e54b300f 	strb	r3, [fp, #-15]

  ++tcp_ticks;
  11e75c:	e30c3c24 	movw	r3, #52260	; 0xcc24
  11e760:	e3403015 	movt	r3, #21
  11e764:	e5933000 	ldr	r3, [r3]
  11e768:	e2832001 	add	r2, r3, #1
  11e76c:	e30c3c24 	movw	r3, #52260	; 0xcc24
  11e770:	e3403015 	movt	r3, #21
  11e774:	e5832000 	str	r2, [r3]
  ++tcp_timer_ctr;
  11e778:	e30e322d 	movw	r3, #57901	; 0xe22d
  11e77c:	e3403014 	movt	r3, #20
  11e780:	e5d33000 	ldrb	r3, [r3]
  11e784:	e2833001 	add	r3, r3, #1
  11e788:	e6ef2073 	uxtb	r2, r3
  11e78c:	e30e322d 	movw	r3, #57901	; 0xe22d
  11e790:	e3403014 	movt	r3, #20
  11e794:	e5c32000 	strb	r2, [r3]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
  11e798:	e3a03000 	mov	r3, #0
  11e79c:	e50b300c 	str	r3, [fp, #-12]
  pcb = tcp_active_pcbs;
  11e7a0:	e30c3c20 	movw	r3, #52256	; 0xcc20
  11e7a4:	e3403015 	movt	r3, #21
  11e7a8:	e5933000 	ldr	r3, [r3]
  11e7ac:	e50b3008 	str	r3, [fp, #-8]
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
  11e7b0:	ea0001f2 	b	11ef80 <tcp_slowtmr+0x838>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
  11e7b4:	e51b3008 	ldr	r3, [fp, #-8]
  11e7b8:	e5933014 	ldr	r3, [r3, #20]
  11e7bc:	e3530000 	cmp	r3, #0
  11e7c0:	1a000006 	bne	11e7e0 <tcp_slowtmr+0x98>
  11e7c4:	e3080050 	movw	r0, #32848	; 0x8050
  11e7c8:	e3400014 	movt	r0, #20
  11e7cc:	ebff9250 	bl	103114 <rt_kprintf>
  11e7d0:	e30013eb 	movw	r1, #1003	; 0x3eb
  11e7d4:	e3070ed8 	movw	r0, #32472	; 0x7ed8
  11e7d8:	e3400014 	movt	r0, #20
  11e7dc:	ebffb243 	bl	10b0f0 <sys_arch_assert>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
  11e7e0:	e51b3008 	ldr	r3, [fp, #-8]
  11e7e4:	e5933014 	ldr	r3, [r3, #20]
  11e7e8:	e3530001 	cmp	r3, #1
  11e7ec:	1a000006 	bne	11e80c <tcp_slowtmr+0xc4>
  11e7f0:	e308007c 	movw	r0, #32892	; 0x807c
  11e7f4:	e3400014 	movt	r0, #20
  11e7f8:	ebff9245 	bl	103114 <rt_kprintf>
  11e7fc:	e3a01ffb 	mov	r1, #1004	; 0x3ec
  11e800:	e3070ed8 	movw	r0, #32472	; 0x7ed8
  11e804:	e3400014 	movt	r0, #20
  11e808:	ebffb238 	bl	10b0f0 <sys_arch_assert>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
  11e80c:	e51b3008 	ldr	r3, [fp, #-8]
  11e810:	e5933014 	ldr	r3, [r3, #20]
  11e814:	e353000a 	cmp	r3, #10
  11e818:	1a000006 	bne	11e838 <tcp_slowtmr+0xf0>
  11e81c:	e30800a8 	movw	r0, #32936	; 0x80a8
  11e820:	e3400014 	movt	r0, #20
  11e824:	ebff923a 	bl	103114 <rt_kprintf>
  11e828:	e30013ed 	movw	r1, #1005	; 0x3ed
  11e82c:	e3070ed8 	movw	r0, #32472	; 0x7ed8
  11e830:	e3400014 	movt	r0, #20
  11e834:	ebffb22d 	bl	10b0f0 <sys_arch_assert>
    if (pcb->last_timer == tcp_timer_ctr) {
  11e838:	e51b3008 	ldr	r3, [fp, #-8]
  11e83c:	e5d32021 	ldrb	r2, [r3, #33]	; 0x21
  11e840:	e30e322d 	movw	r3, #57901	; 0xe22d
  11e844:	e3403014 	movt	r3, #20
  11e848:	e5d33000 	ldrb	r3, [r3]
  11e84c:	e1520003 	cmp	r2, r3
  11e850:	1a000003 	bne	11e864 <tcp_slowtmr+0x11c>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
  11e854:	e51b3008 	ldr	r3, [fp, #-8]
  11e858:	e593300c 	ldr	r3, [r3, #12]
  11e85c:	e50b3008 	str	r3, [fp, #-8]
      continue;
  11e860:	ea0001c6 	b	11ef80 <tcp_slowtmr+0x838>
    }
    pcb->last_timer = tcp_timer_ctr;
  11e864:	e30e322d 	movw	r3, #57901	; 0xe22d
  11e868:	e3403014 	movt	r3, #20
  11e86c:	e5d32000 	ldrb	r2, [r3]
  11e870:	e51b3008 	ldr	r3, [fp, #-8]
  11e874:	e5c32021 	strb	r2, [r3, #33]	; 0x21

    pcb_remove = 0;
  11e878:	e3a03000 	mov	r3, #0
  11e87c:	e54b300d 	strb	r3, [fp, #-13]
    pcb_reset = 0;
  11e880:	e3a03000 	mov	r3, #0
  11e884:	e54b300e 	strb	r3, [fp, #-14]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
  11e888:	e51b3008 	ldr	r3, [fp, #-8]
  11e88c:	e5933014 	ldr	r3, [r3, #20]
  11e890:	e3530002 	cmp	r3, #2
  11e894:	1a000007 	bne	11e8b8 <tcp_slowtmr+0x170>
  11e898:	e51b3008 	ldr	r3, [fp, #-8]
  11e89c:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  11e8a0:	e3530003 	cmp	r3, #3
  11e8a4:	9a000003 	bls	11e8b8 <tcp_slowtmr+0x170>
      ++pcb_remove;
  11e8a8:	e55b300d 	ldrb	r3, [fp, #-13]
  11e8ac:	e2833001 	add	r3, r3, #1
  11e8b0:	e54b300d 	strb	r3, [fp, #-13]
  11e8b4:	ea000089 	b	11eae0 <tcp_slowtmr+0x398>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
  11e8b8:	e51b3008 	ldr	r3, [fp, #-8]
  11e8bc:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  11e8c0:	e353000b 	cmp	r3, #11
  11e8c4:	9a000003 	bls	11e8d8 <tcp_slowtmr+0x190>
      ++pcb_remove;
  11e8c8:	e55b300d 	ldrb	r3, [fp, #-13]
  11e8cc:	e2833001 	add	r3, r3, #1
  11e8d0:	e54b300d 	strb	r3, [fp, #-13]
  11e8d4:	ea000081 	b	11eae0 <tcp_slowtmr+0x398>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
  11e8d8:	e51b3008 	ldr	r3, [fp, #-8]
  11e8dc:	e5d330a1 	ldrb	r3, [r3, #161]	; 0xa1
  11e8e0:	e3530000 	cmp	r3, #0
  11e8e4:	0a000029 	beq	11e990 <tcp_slowtmr+0x248>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
  11e8e8:	e51b3008 	ldr	r3, [fp, #-8]
  11e8ec:	e5d330a1 	ldrb	r3, [r3, #161]	; 0xa1
  11e8f0:	e2432001 	sub	r2, r3, #1
  11e8f4:	e3073eb4 	movw	r3, #32436	; 0x7eb4
  11e8f8:	e3403014 	movt	r3, #20
  11e8fc:	e7d33002 	ldrb	r3, [r3, r2]
  11e900:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
        if (pcb->persist_cnt < backoff_cnt) {
  11e904:	e51b3008 	ldr	r3, [fp, #-8]
  11e908:	e5d330a0 	ldrb	r3, [r3, #160]	; 0xa0
  11e90c:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  11e910:	e1520003 	cmp	r2, r3
  11e914:	9a000005 	bls	11e930 <tcp_slowtmr+0x1e8>
          pcb->persist_cnt++;
  11e918:	e51b3008 	ldr	r3, [fp, #-8]
  11e91c:	e5d330a0 	ldrb	r3, [r3, #160]	; 0xa0
  11e920:	e2833001 	add	r3, r3, #1
  11e924:	e6ef2073 	uxtb	r2, r3
  11e928:	e51b3008 	ldr	r3, [fp, #-8]
  11e92c:	e5c320a0 	strb	r2, [r3, #160]	; 0xa0
        }
        if (pcb->persist_cnt >= backoff_cnt) {
  11e930:	e51b3008 	ldr	r3, [fp, #-8]
  11e934:	e5d330a0 	ldrb	r3, [r3, #160]	; 0xa0
  11e938:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  11e93c:	e1520003 	cmp	r2, r3
  11e940:	8a000066 	bhi	11eae0 <tcp_slowtmr+0x398>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
  11e944:	e51b0008 	ldr	r0, [fp, #-8]
  11e948:	eb00217f 	bl	126f4c <tcp_zero_window_probe>
  11e94c:	e1a03000 	mov	r3, r0
  11e950:	e3530000 	cmp	r3, #0
  11e954:	1a000061 	bne	11eae0 <tcp_slowtmr+0x398>
            pcb->persist_cnt = 0;
  11e958:	e51b3008 	ldr	r3, [fp, #-8]
  11e95c:	e3a02000 	mov	r2, #0
  11e960:	e5c320a0 	strb	r2, [r3, #160]	; 0xa0
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
  11e964:	e51b3008 	ldr	r3, [fp, #-8]
  11e968:	e5d330a1 	ldrb	r3, [r3, #161]	; 0xa1
  11e96c:	e3530006 	cmp	r3, #6
  11e970:	8a00005a 	bhi	11eae0 <tcp_slowtmr+0x398>
              pcb->persist_backoff++;
  11e974:	e51b3008 	ldr	r3, [fp, #-8]
  11e978:	e5d330a1 	ldrb	r3, [r3, #161]	; 0xa1
  11e97c:	e2833001 	add	r3, r3, #1
  11e980:	e6ef2073 	uxtb	r2, r3
  11e984:	e51b3008 	ldr	r3, [fp, #-8]
  11e988:	e5c320a1 	strb	r2, [r3, #161]	; 0xa1
  11e98c:	ea000053 	b	11eae0 <tcp_slowtmr+0x398>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
  11e990:	e51b3008 	ldr	r3, [fp, #-8]
  11e994:	e1d333f4 	ldrsh	r3, [r3, #52]	; 0x34
  11e998:	e3530000 	cmp	r3, #0
  11e99c:	ba000007 	blt	11e9c0 <tcp_slowtmr+0x278>
          ++pcb->rtime;
  11e9a0:	e51b3008 	ldr	r3, [fp, #-8]
  11e9a4:	e1d333f4 	ldrsh	r3, [r3, #52]	; 0x34
  11e9a8:	e6ff3073 	uxth	r3, r3
  11e9ac:	e2833001 	add	r3, r3, #1
  11e9b0:	e6ff3073 	uxth	r3, r3
  11e9b4:	e6bf2073 	sxth	r2, r3
  11e9b8:	e51b3008 	ldr	r3, [fp, #-8]
  11e9bc:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
  11e9c0:	e51b3008 	ldr	r3, [fp, #-8]
  11e9c4:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  11e9c8:	e3530000 	cmp	r3, #0
  11e9cc:	0a000043 	beq	11eae0 <tcp_slowtmr+0x398>
  11e9d0:	e51b3008 	ldr	r3, [fp, #-8]
  11e9d4:	e1d323f4 	ldrsh	r2, [r3, #52]	; 0x34
  11e9d8:	e51b3008 	ldr	r3, [fp, #-8]
  11e9dc:	e1d334f4 	ldrsh	r3, [r3, #68]	; 0x44
  11e9e0:	e1520003 	cmp	r2, r3
  11e9e4:	ba00003d 	blt	11eae0 <tcp_slowtmr+0x398>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
  11e9e8:	e51b3008 	ldr	r3, [fp, #-8]
  11e9ec:	e5933014 	ldr	r3, [r3, #20]
  11e9f0:	e3530002 	cmp	r3, #2
  11e9f4:	0a000015 	beq	11ea50 <tcp_slowtmr+0x308>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
  11e9f8:	e51b3008 	ldr	r3, [fp, #-8]
  11e9fc:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  11ea00:	e353000c 	cmp	r3, #12
  11ea04:	31a03003 	movcc	r3, r3
  11ea08:	23a0300c 	movcs	r3, #12
  11ea0c:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
  11ea10:	e51b3008 	ldr	r3, [fp, #-8]
  11ea14:	e1d334f0 	ldrsh	r3, [r3, #64]	; 0x40
  11ea18:	e1a031c3 	asr	r3, r3, #3
  11ea1c:	e6bf3073 	sxth	r3, r3
  11ea20:	e1a02003 	mov	r2, r3
  11ea24:	e51b3008 	ldr	r3, [fp, #-8]
  11ea28:	e1d334f2 	ldrsh	r3, [r3, #66]	; 0x42
  11ea2c:	e0822003 	add	r2, r2, r3
  11ea30:	e55b1015 	ldrb	r1, [fp, #-21]	; 0xffffffeb
  11ea34:	e3073ea4 	movw	r3, #32420	; 0x7ea4
  11ea38:	e3403014 	movt	r3, #20
  11ea3c:	e7d33001 	ldrb	r3, [r3, r1]
  11ea40:	e1a03312 	lsl	r3, r2, r3
  11ea44:	e6bf2073 	sxth	r2, r3
  11ea48:	e51b3008 	ldr	r3, [fp, #-8]
  11ea4c:	e1c324b4 	strh	r2, [r3, #68]	; 0x44
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
  11ea50:	e51b3008 	ldr	r3, [fp, #-8]
  11ea54:	e3a02000 	mov	r2, #0
  11ea58:	e1c323b4 	strh	r2, [r3, #52]	; 0x34

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
  11ea5c:	e51b3008 	ldr	r3, [fp, #-8]
  11ea60:	e1d326b0 	ldrh	r2, [r3, #96]	; 0x60
  11ea64:	e51b3008 	ldr	r3, [fp, #-8]
  11ea68:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  11ea6c:	e1520003 	cmp	r2, r3
  11ea70:	31a03002 	movcc	r3, r2
  11ea74:	21a03003 	movcs	r3, r3
  11ea78:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8
          pcb->ssthresh = eff_wnd >> 1;
  11ea7c:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
  11ea80:	e1a030a3 	lsr	r3, r3, #1
  11ea84:	e6ff2073 	uxth	r2, r3
  11ea88:	e51b3008 	ldr	r3, [fp, #-8]
  11ea8c:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
  11ea90:	e51b3008 	ldr	r3, [fp, #-8]
  11ea94:	e1d324be 	ldrh	r2, [r3, #78]	; 0x4e
  11ea98:	e51b3008 	ldr	r3, [fp, #-8]
  11ea9c:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  11eaa0:	e1a03083 	lsl	r3, r3, #1
  11eaa4:	e6ff3073 	uxth	r3, r3
  11eaa8:	e1520003 	cmp	r2, r3
  11eaac:	2a000005 	bcs	11eac8 <tcp_slowtmr+0x380>
            pcb->ssthresh = (pcb->mss << 1);
  11eab0:	e51b3008 	ldr	r3, [fp, #-8]
  11eab4:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  11eab8:	e1a03083 	lsl	r3, r3, #1
  11eabc:	e6ff2073 	uxth	r2, r3
  11eac0:	e51b3008 	ldr	r3, [fp, #-8]
  11eac4:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
          }
          pcb->cwnd = pcb->mss;
  11eac8:	e51b3008 	ldr	r3, [fp, #-8]
  11eacc:	e1d323b6 	ldrh	r2, [r3, #54]	; 0x36
  11ead0:	e51b3008 	ldr	r3, [fp, #-8]
  11ead4:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
  11ead8:	e51b0008 	ldr	r0, [fp, #-8]
  11eadc:	eb002001 	bl	126ae8 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
  11eae0:	e51b3008 	ldr	r3, [fp, #-8]
  11eae4:	e5933014 	ldr	r3, [r3, #20]
  11eae8:	e3530006 	cmp	r3, #6
  11eaec:	1a00000f 	bne	11eb30 <tcp_slowtmr+0x3e8>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
  11eaf0:	e51b3008 	ldr	r3, [fp, #-8]
  11eaf4:	e5d3301e 	ldrb	r3, [r3, #30]
  11eaf8:	e2033010 	and	r3, r3, #16
  11eafc:	e3530000 	cmp	r3, #0
  11eb00:	0a00000a 	beq	11eb30 <tcp_slowtmr+0x3e8>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
  11eb04:	e30c3c24 	movw	r3, #52260	; 0xcc24
  11eb08:	e3403015 	movt	r3, #21
  11eb0c:	e5932000 	ldr	r2, [r3]
  11eb10:	e51b3008 	ldr	r3, [fp, #-8]
  11eb14:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11eb18:	e0423003 	sub	r3, r2, r3
  11eb1c:	e3530028 	cmp	r3, #40	; 0x28
  11eb20:	9a000002 	bls	11eb30 <tcp_slowtmr+0x3e8>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
  11eb24:	e55b300d 	ldrb	r3, [fp, #-13]
  11eb28:	e2833001 	add	r3, r3, #1
  11eb2c:	e54b300d 	strb	r3, [fp, #-13]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
  11eb30:	e51b3008 	ldr	r3, [fp, #-8]
  11eb34:	e5d33008 	ldrb	r3, [r3, #8]
  11eb38:	e2033008 	and	r3, r3, #8
  11eb3c:	e3530000 	cmp	r3, #0
  11eb40:	0a000044 	beq	11ec58 <tcp_slowtmr+0x510>
       ((pcb->state == ESTABLISHED) ||
  11eb44:	e51b3008 	ldr	r3, [fp, #-8]
  11eb48:	e5933014 	ldr	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
  11eb4c:	e3530004 	cmp	r3, #4
  11eb50:	0a000003 	beq	11eb64 <tcp_slowtmr+0x41c>
        (pcb->state == CLOSE_WAIT))) {
  11eb54:	e51b3008 	ldr	r3, [fp, #-8]
  11eb58:	e5933014 	ldr	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
  11eb5c:	e3530007 	cmp	r3, #7
  11eb60:	1a00003c 	bne	11ec58 <tcp_slowtmr+0x510>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
  11eb64:	e30c3c24 	movw	r3, #52260	; 0xcc24
  11eb68:	e3403015 	movt	r3, #21
  11eb6c:	e5932000 	ldr	r2, [r3]
  11eb70:	e51b3008 	ldr	r3, [fp, #-8]
  11eb74:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11eb78:	e0421003 	sub	r1, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
  11eb7c:	e51b3008 	ldr	r3, [fp, #-8]
  11eb80:	e5932094 	ldr	r2, [r3, #148]	; 0x94
  11eb84:	e51b3008 	ldr	r3, [fp, #-8]
  11eb88:	e593309c 	ldr	r3, [r3, #156]	; 0x9c
  11eb8c:	e51b0008 	ldr	r0, [fp, #-8]
  11eb90:	e5900098 	ldr	r0, [r0, #152]	; 0x98
  11eb94:	e0030390 	mul	r3, r0, r3
  11eb98:	e0822003 	add	r2, r2, r3
  11eb9c:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  11eba0:	e3413062 	movt	r3, #4194	; 0x1062
  11eba4:	e0832392 	umull	r2, r3, r2, r3
  11eba8:	e1a032a3 	lsr	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
  11ebac:	e1510003 	cmp	r1, r3
  11ebb0:	9a000006 	bls	11ebd0 <tcp_slowtmr+0x488>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
  11ebb4:	e55b300d 	ldrb	r3, [fp, #-13]
  11ebb8:	e2833001 	add	r3, r3, #1
  11ebbc:	e54b300d 	strb	r3, [fp, #-13]
        ++pcb_reset;
  11ebc0:	e55b300e 	ldrb	r3, [fp, #-14]
  11ebc4:	e2833001 	add	r3, r3, #1
  11ebc8:	e54b300e 	strb	r3, [fp, #-14]
  11ebcc:	ea000021 	b	11ec58 <tcp_slowtmr+0x510>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
  11ebd0:	e30c3c24 	movw	r3, #52260	; 0xcc24
  11ebd4:	e3403015 	movt	r3, #21
  11ebd8:	e5932000 	ldr	r2, [r3]
  11ebdc:	e51b3008 	ldr	r3, [fp, #-8]
  11ebe0:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11ebe4:	e0421003 	sub	r1, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
  11ebe8:	e51b3008 	ldr	r3, [fp, #-8]
  11ebec:	e5932094 	ldr	r2, [r3, #148]	; 0x94
  11ebf0:	e51b3008 	ldr	r3, [fp, #-8]
  11ebf4:	e5d330a2 	ldrb	r3, [r3, #162]	; 0xa2
  11ebf8:	e1a00003 	mov	r0, r3
  11ebfc:	e51b3008 	ldr	r3, [fp, #-8]
  11ec00:	e5933098 	ldr	r3, [r3, #152]	; 0x98
  11ec04:	e0030093 	mul	r3, r3, r0
  11ec08:	e0822003 	add	r2, r2, r3
                / TCP_SLOW_INTERVAL)
  11ec0c:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  11ec10:	e3413062 	movt	r3, #4194	; 0x1062
  11ec14:	e0832392 	umull	r2, r3, r2, r3
  11ec18:	e1a032a3 	lsr	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
  11ec1c:	e1510003 	cmp	r1, r3
  11ec20:	9a00000c 	bls	11ec58 <tcp_slowtmr+0x510>
      {
        err = tcp_keepalive(pcb);
  11ec24:	e51b0008 	ldr	r0, [fp, #-8]
  11ec28:	eb002079 	bl	126e14 <tcp_keepalive>
  11ec2c:	e1a03000 	mov	r3, r0
  11ec30:	e54b300f 	strb	r3, [fp, #-15]
        if (err == ERR_OK) {
  11ec34:	e15b30df 	ldrsb	r3, [fp, #-15]
  11ec38:	e3530000 	cmp	r3, #0
  11ec3c:	1a000005 	bne	11ec58 <tcp_slowtmr+0x510>
          pcb->keep_cnt_sent++;
  11ec40:	e51b3008 	ldr	r3, [fp, #-8]
  11ec44:	e5d330a2 	ldrb	r3, [r3, #162]	; 0xa2
  11ec48:	e2833001 	add	r3, r3, #1
  11ec4c:	e6ef2073 	uxtb	r2, r3
  11ec50:	e51b3008 	ldr	r3, [fp, #-8]
  11ec54:	e5c320a2 	strb	r2, [r3, #162]	; 0xa2

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
  11ec58:	e51b3008 	ldr	r3, [fp, #-8]
  11ec5c:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  11ec60:	e3530000 	cmp	r3, #0
  11ec64:	0a000013 	beq	11ecb8 <tcp_slowtmr+0x570>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
  11ec68:	e30c3c24 	movw	r3, #52260	; 0xcc24
  11ec6c:	e3403015 	movt	r3, #21
  11ec70:	e5932000 	ldr	r2, [r3]
  11ec74:	e51b3008 	ldr	r3, [fp, #-8]
  11ec78:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11ec7c:	e0422003 	sub	r2, r2, r3
  11ec80:	e51b3008 	ldr	r3, [fp, #-8]
  11ec84:	e1d334f4 	ldrsh	r3, [r3, #68]	; 0x44
  11ec88:	e1a01003 	mov	r1, r3
  11ec8c:	e3a03006 	mov	r3, #6
  11ec90:	e0030193 	mul	r3, r3, r1
    if (pcb->ooseq != NULL &&
  11ec94:	e1520003 	cmp	r2, r3
  11ec98:	3a000006 	bcc	11ecb8 <tcp_slowtmr+0x570>
      tcp_segs_free(pcb->ooseq);
  11ec9c:	e51b3008 	ldr	r3, [fp, #-8]
  11eca0:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  11eca4:	e1a00003 	mov	r0, r3
  11eca8:	eb0001e2 	bl	11f438 <tcp_segs_free>
      pcb->ooseq = NULL;
  11ecac:	e51b3008 	ldr	r3, [fp, #-8]
  11ecb0:	e3a02000 	mov	r2, #0
  11ecb4:	e5832074 	str	r2, [r3, #116]	; 0x74
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
  11ecb8:	e51b3008 	ldr	r3, [fp, #-8]
  11ecbc:	e5933014 	ldr	r3, [r3, #20]
  11ecc0:	e3530003 	cmp	r3, #3
  11ecc4:	1a00000a 	bne	11ecf4 <tcp_slowtmr+0x5ac>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
  11ecc8:	e30c3c24 	movw	r3, #52260	; 0xcc24
  11eccc:	e3403015 	movt	r3, #21
  11ecd0:	e5932000 	ldr	r2, [r3]
  11ecd4:	e51b3008 	ldr	r3, [fp, #-8]
  11ecd8:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11ecdc:	e0423003 	sub	r3, r2, r3
  11ece0:	e3530028 	cmp	r3, #40	; 0x28
  11ece4:	9a000002 	bls	11ecf4 <tcp_slowtmr+0x5ac>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
  11ece8:	e55b300d 	ldrb	r3, [fp, #-13]
  11ecec:	e2833001 	add	r3, r3, #1
  11ecf0:	e54b300d 	strb	r3, [fp, #-13]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
  11ecf4:	e51b3008 	ldr	r3, [fp, #-8]
  11ecf8:	e5933014 	ldr	r3, [r3, #20]
  11ecfc:	e3530009 	cmp	r3, #9
  11ed00:	1a00000a 	bne	11ed30 <tcp_slowtmr+0x5e8>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
  11ed04:	e30c3c24 	movw	r3, #52260	; 0xcc24
  11ed08:	e3403015 	movt	r3, #21
  11ed0c:	e5932000 	ldr	r2, [r3]
  11ed10:	e51b3008 	ldr	r3, [fp, #-8]
  11ed14:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11ed18:	e0423003 	sub	r3, r2, r3
  11ed1c:	e35300f0 	cmp	r3, #240	; 0xf0
  11ed20:	9a000002 	bls	11ed30 <tcp_slowtmr+0x5e8>
        ++pcb_remove;
  11ed24:	e55b300d 	ldrb	r3, [fp, #-13]
  11ed28:	e2833001 	add	r3, r3, #1
  11ed2c:	e54b300d 	strb	r3, [fp, #-13]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
  11ed30:	e55b300d 	ldrb	r3, [fp, #-13]
  11ed34:	e3530000 	cmp	r3, #0
  11ed38:	0a00005d 	beq	11eeb4 <tcp_slowtmr+0x76c>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
  11ed3c:	e51b3008 	ldr	r3, [fp, #-8]
  11ed40:	e5933090 	ldr	r3, [r3, #144]	; 0x90
  11ed44:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
  11ed48:	e51b0008 	ldr	r0, [fp, #-8]
  11ed4c:	eb000410 	bl	11fd94 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
  11ed50:	e51b300c 	ldr	r3, [fp, #-12]
  11ed54:	e3530000 	cmp	r3, #0
  11ed58:	0a000011 	beq	11eda4 <tcp_slowtmr+0x65c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
  11ed5c:	e30c3c20 	movw	r3, #52256	; 0xcc20
  11ed60:	e3403015 	movt	r3, #21
  11ed64:	e5933000 	ldr	r3, [r3]
  11ed68:	e51b2008 	ldr	r2, [fp, #-8]
  11ed6c:	e1520003 	cmp	r2, r3
  11ed70:	1a000006 	bne	11ed90 <tcp_slowtmr+0x648>
  11ed74:	e30800d8 	movw	r0, #32984	; 0x80d8
  11ed78:	e3400014 	movt	r0, #20
  11ed7c:	ebff90e4 	bl	103114 <rt_kprintf>
  11ed80:	e3001484 	movw	r1, #1156	; 0x484
  11ed84:	e3070ed8 	movw	r0, #32472	; 0x7ed8
  11ed88:	e3400014 	movt	r0, #20
  11ed8c:	ebffb0d7 	bl	10b0f0 <sys_arch_assert>
        prev->next = pcb->next;
  11ed90:	e51b3008 	ldr	r3, [fp, #-8]
  11ed94:	e593200c 	ldr	r2, [r3, #12]
  11ed98:	e51b300c 	ldr	r3, [fp, #-12]
  11ed9c:	e583200c 	str	r2, [r3, #12]
  11eda0:	ea000011 	b	11edec <tcp_slowtmr+0x6a4>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
  11eda4:	e30c3c20 	movw	r3, #52256	; 0xcc20
  11eda8:	e3403015 	movt	r3, #21
  11edac:	e5933000 	ldr	r3, [r3]
  11edb0:	e51b2008 	ldr	r2, [fp, #-8]
  11edb4:	e1520003 	cmp	r2, r3
  11edb8:	0a000006 	beq	11edd8 <tcp_slowtmr+0x690>
  11edbc:	e3080104 	movw	r0, #33028	; 0x8104
  11edc0:	e3400014 	movt	r0, #20
  11edc4:	ebff90d2 	bl	103114 <rt_kprintf>
  11edc8:	e3001488 	movw	r1, #1160	; 0x488
  11edcc:	e3070ed8 	movw	r0, #32472	; 0x7ed8
  11edd0:	e3400014 	movt	r0, #20
  11edd4:	ebffb0c5 	bl	10b0f0 <sys_arch_assert>
        tcp_active_pcbs = pcb->next;
  11edd8:	e51b3008 	ldr	r3, [fp, #-8]
  11eddc:	e593200c 	ldr	r2, [r3, #12]
  11ede0:	e30c3c20 	movw	r3, #52256	; 0xcc20
  11ede4:	e3403015 	movt	r3, #21
  11ede8:	e5832000 	str	r2, [r3]
      }

      if (pcb_reset) {
  11edec:	e55b300e 	ldrb	r3, [fp, #-14]
  11edf0:	e3530000 	cmp	r3, #0
  11edf4:	0a00000f 	beq	11ee38 <tcp_slowtmr+0x6f0>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
  11edf8:	e51b3008 	ldr	r3, [fp, #-8]
  11edfc:	e5930050 	ldr	r0, [r3, #80]	; 0x50
  11ee00:	e51b3008 	ldr	r3, [fp, #-8]
  11ee04:	e5931028 	ldr	r1, [r3, #40]	; 0x28
  11ee08:	e51bc008 	ldr	ip, [fp, #-8]
  11ee0c:	e51b3008 	ldr	r3, [fp, #-8]
  11ee10:	e283e004 	add	lr, r3, #4
  11ee14:	e51b3008 	ldr	r3, [fp, #-8]
  11ee18:	e1d331ba 	ldrh	r3, [r3, #26]
  11ee1c:	e51b2008 	ldr	r2, [fp, #-8]
  11ee20:	e1d221bc 	ldrh	r2, [r2, #28]
  11ee24:	e58d2004 	str	r2, [sp, #4]
  11ee28:	e58d3000 	str	r3, [sp]
  11ee2c:	e1a0300e 	mov	r3, lr
  11ee30:	e1a0200c 	mov	r2, ip
  11ee34:	eb001eae 	bl	1268f4 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
  11ee38:	e51b3008 	ldr	r3, [fp, #-8]
  11ee3c:	e5933010 	ldr	r3, [r3, #16]
  11ee40:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
      last_state = pcb->state;
  11ee44:	e51b3008 	ldr	r3, [fp, #-8]
  11ee48:	e5933014 	ldr	r3, [r3, #20]
  11ee4c:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
      pcb2 = pcb;
  11ee50:	e51b3008 	ldr	r3, [fp, #-8]
  11ee54:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
      pcb = pcb->next;
  11ee58:	e51b3008 	ldr	r3, [fp, #-8]
  11ee5c:	e593300c 	ldr	r3, [r3, #12]
  11ee60:	e50b3008 	str	r3, [fp, #-8]
      memp_free(MEMP_TCP_PCB, pcb2);
  11ee64:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  11ee68:	e3a00002 	mov	r0, #2
  11ee6c:	ebffe901 	bl	119278 <memp_free>

      tcp_active_pcbs_changed = 0;
  11ee70:	e30c3c1c 	movw	r3, #52252	; 0xcc1c
  11ee74:	e3403015 	movt	r3, #21
  11ee78:	e3a02000 	mov	r2, #0
  11ee7c:	e5c32000 	strb	r2, [r3]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
  11ee80:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11ee84:	e3530000 	cmp	r3, #0
  11ee88:	0a000003 	beq	11ee9c <tcp_slowtmr+0x754>
  11ee8c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11ee90:	e3e0100c 	mvn	r1, #12
  11ee94:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  11ee98:	e12fff33 	blx	r3
      if (tcp_active_pcbs_changed) {
  11ee9c:	e30c3c1c 	movw	r3, #52252	; 0xcc1c
  11eea0:	e3403015 	movt	r3, #21
  11eea4:	e5d33000 	ldrb	r3, [r3]
  11eea8:	e3530000 	cmp	r3, #0
  11eeac:	0a000033 	beq	11ef80 <tcp_slowtmr+0x838>
        goto tcp_slowtmr_start;
  11eeb0:	eafffe38 	b	11e798 <tcp_slowtmr+0x50>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
  11eeb4:	e51b3008 	ldr	r3, [fp, #-8]
  11eeb8:	e50b300c 	str	r3, [fp, #-12]
      pcb = pcb->next;
  11eebc:	e51b3008 	ldr	r3, [fp, #-8]
  11eec0:	e593300c 	ldr	r3, [r3, #12]
  11eec4:	e50b3008 	str	r3, [fp, #-8]

      /* We check if we should poll the connection. */
      ++prev->polltmr;
  11eec8:	e51b300c 	ldr	r3, [fp, #-12]
  11eecc:	e5d3301f 	ldrb	r3, [r3, #31]
  11eed0:	e2833001 	add	r3, r3, #1
  11eed4:	e6ef2073 	uxtb	r2, r3
  11eed8:	e51b300c 	ldr	r3, [fp, #-12]
  11eedc:	e5c3201f 	strb	r2, [r3, #31]
      if (prev->polltmr >= prev->pollinterval) {
  11eee0:	e51b300c 	ldr	r3, [fp, #-12]
  11eee4:	e5d3201f 	ldrb	r2, [r3, #31]
  11eee8:	e51b300c 	ldr	r3, [fp, #-12]
  11eeec:	e5d33020 	ldrb	r3, [r3, #32]
  11eef0:	e1520003 	cmp	r2, r3
  11eef4:	3a000021 	bcc	11ef80 <tcp_slowtmr+0x838>
        prev->polltmr = 0;
  11eef8:	e51b300c 	ldr	r3, [fp, #-12]
  11eefc:	e3a02000 	mov	r2, #0
  11ef00:	e5c3201f 	strb	r2, [r3, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
  11ef04:	e30c3c1c 	movw	r3, #52252	; 0xcc1c
  11ef08:	e3403015 	movt	r3, #21
  11ef0c:	e3a02000 	mov	r2, #0
  11ef10:	e5c32000 	strb	r2, [r3]
        TCP_EVENT_POLL(prev, err);
  11ef14:	e51b300c 	ldr	r3, [fp, #-12]
  11ef18:	e593308c 	ldr	r3, [r3, #140]	; 0x8c
  11ef1c:	e3530000 	cmp	r3, #0
  11ef20:	0a000009 	beq	11ef4c <tcp_slowtmr+0x804>
  11ef24:	e51b300c 	ldr	r3, [fp, #-12]
  11ef28:	e593308c 	ldr	r3, [r3, #140]	; 0x8c
  11ef2c:	e51b200c 	ldr	r2, [fp, #-12]
  11ef30:	e5922010 	ldr	r2, [r2, #16]
  11ef34:	e51b100c 	ldr	r1, [fp, #-12]
  11ef38:	e1a00002 	mov	r0, r2
  11ef3c:	e12fff33 	blx	r3
  11ef40:	e1a03000 	mov	r3, r0
  11ef44:	e54b300f 	strb	r3, [fp, #-15]
  11ef48:	ea000001 	b	11ef54 <tcp_slowtmr+0x80c>
  11ef4c:	e3a03000 	mov	r3, #0
  11ef50:	e54b300f 	strb	r3, [fp, #-15]
        if (tcp_active_pcbs_changed) {
  11ef54:	e30c3c1c 	movw	r3, #52252	; 0xcc1c
  11ef58:	e3403015 	movt	r3, #21
  11ef5c:	e5d33000 	ldrb	r3, [r3]
  11ef60:	e3530000 	cmp	r3, #0
  11ef64:	0a000000 	beq	11ef6c <tcp_slowtmr+0x824>
          goto tcp_slowtmr_start;
  11ef68:	eafffe0a 	b	11e798 <tcp_slowtmr+0x50>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
  11ef6c:	e15b30df 	ldrsb	r3, [fp, #-15]
  11ef70:	e3530000 	cmp	r3, #0
  11ef74:	1a000001 	bne	11ef80 <tcp_slowtmr+0x838>
          tcp_output(prev);
  11ef78:	e51b000c 	ldr	r0, [fp, #-12]
  11ef7c:	eb001bf6 	bl	125f5c <tcp_output>
  while (pcb != NULL) {
  11ef80:	e51b3008 	ldr	r3, [fp, #-8]
  11ef84:	e3530000 	cmp	r3, #0
  11ef88:	1afffe09 	bne	11e7b4 <tcp_slowtmr+0x6c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
  11ef8c:	e3a03000 	mov	r3, #0
  11ef90:	e50b300c 	str	r3, [fp, #-12]
  pcb = tcp_tw_pcbs;
  11ef94:	e30c3c30 	movw	r3, #52272	; 0xcc30
  11ef98:	e3403015 	movt	r3, #21
  11ef9c:	e5933000 	ldr	r3, [r3]
  11efa0:	e50b3008 	str	r3, [fp, #-8]
  while (pcb != NULL) {
  11efa4:	ea000051 	b	11f0f0 <tcp_slowtmr+0x9a8>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
  11efa8:	e51b3008 	ldr	r3, [fp, #-8]
  11efac:	e5933014 	ldr	r3, [r3, #20]
  11efb0:	e353000a 	cmp	r3, #10
  11efb4:	0a000006 	beq	11efd4 <tcp_slowtmr+0x88c>
  11efb8:	e3080130 	movw	r0, #33072	; 0x8130
  11efbc:	e3400014 	movt	r0, #20
  11efc0:	ebff9053 	bl	103114 <rt_kprintf>
  11efc4:	e30014b8 	movw	r1, #1208	; 0x4b8
  11efc8:	e3070ed8 	movw	r0, #32472	; 0x7ed8
  11efcc:	e3400014 	movt	r0, #20
  11efd0:	ebffb046 	bl	10b0f0 <sys_arch_assert>
    pcb_remove = 0;
  11efd4:	e3a03000 	mov	r3, #0
  11efd8:	e54b300d 	strb	r3, [fp, #-13]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
  11efdc:	e30c3c24 	movw	r3, #52260	; 0xcc24
  11efe0:	e3403015 	movt	r3, #21
  11efe4:	e5932000 	ldr	r2, [r3]
  11efe8:	e51b3008 	ldr	r3, [fp, #-8]
  11efec:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11eff0:	e0423003 	sub	r3, r2, r3
  11eff4:	e35300f0 	cmp	r3, #240	; 0xf0
  11eff8:	9a000002 	bls	11f008 <tcp_slowtmr+0x8c0>
      ++pcb_remove;
  11effc:	e55b300d 	ldrb	r3, [fp, #-13]
  11f000:	e2833001 	add	r3, r3, #1
  11f004:	e54b300d 	strb	r3, [fp, #-13]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
  11f008:	e55b300d 	ldrb	r3, [fp, #-13]
  11f00c:	e3530000 	cmp	r3, #0
  11f010:	0a000031 	beq	11f0dc <tcp_slowtmr+0x994>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
  11f014:	e51b0008 	ldr	r0, [fp, #-8]
  11f018:	eb00035d 	bl	11fd94 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
  11f01c:	e51b300c 	ldr	r3, [fp, #-12]
  11f020:	e3530000 	cmp	r3, #0
  11f024:	0a000011 	beq	11f070 <tcp_slowtmr+0x928>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
  11f028:	e30c3c30 	movw	r3, #52272	; 0xcc30
  11f02c:	e3403015 	movt	r3, #21
  11f030:	e5933000 	ldr	r3, [r3]
  11f034:	e51b2008 	ldr	r2, [fp, #-8]
  11f038:	e1520003 	cmp	r2, r3
  11f03c:	1a000006 	bne	11f05c <tcp_slowtmr+0x914>
  11f040:	e3080160 	movw	r0, #33120	; 0x8160
  11f044:	e3400014 	movt	r0, #20
  11f048:	ebff9031 	bl	103114 <rt_kprintf>
  11f04c:	e30014c6 	movw	r1, #1222	; 0x4c6
  11f050:	e3070ed8 	movw	r0, #32472	; 0x7ed8
  11f054:	e3400014 	movt	r0, #20
  11f058:	ebffb024 	bl	10b0f0 <sys_arch_assert>
        prev->next = pcb->next;
  11f05c:	e51b3008 	ldr	r3, [fp, #-8]
  11f060:	e593200c 	ldr	r2, [r3, #12]
  11f064:	e51b300c 	ldr	r3, [fp, #-12]
  11f068:	e583200c 	str	r2, [r3, #12]
  11f06c:	ea000011 	b	11f0b8 <tcp_slowtmr+0x970>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
  11f070:	e30c3c30 	movw	r3, #52272	; 0xcc30
  11f074:	e3403015 	movt	r3, #21
  11f078:	e5933000 	ldr	r3, [r3]
  11f07c:	e51b2008 	ldr	r2, [fp, #-8]
  11f080:	e1520003 	cmp	r2, r3
  11f084:	0a000006 	beq	11f0a4 <tcp_slowtmr+0x95c>
  11f088:	e3080188 	movw	r0, #33160	; 0x8188
  11f08c:	e3400014 	movt	r0, #20
  11f090:	ebff901f 	bl	103114 <rt_kprintf>
  11f094:	e30014ca 	movw	r1, #1226	; 0x4ca
  11f098:	e3070ed8 	movw	r0, #32472	; 0x7ed8
  11f09c:	e3400014 	movt	r0, #20
  11f0a0:	ebffb012 	bl	10b0f0 <sys_arch_assert>
        tcp_tw_pcbs = pcb->next;
  11f0a4:	e51b3008 	ldr	r3, [fp, #-8]
  11f0a8:	e593200c 	ldr	r2, [r3, #12]
  11f0ac:	e30c3c30 	movw	r3, #52272	; 0xcc30
  11f0b0:	e3403015 	movt	r3, #21
  11f0b4:	e5832000 	str	r2, [r3]
      }
      pcb2 = pcb;
  11f0b8:	e51b3008 	ldr	r3, [fp, #-8]
  11f0bc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      pcb = pcb->next;
  11f0c0:	e51b3008 	ldr	r3, [fp, #-8]
  11f0c4:	e593300c 	ldr	r3, [r3, #12]
  11f0c8:	e50b3008 	str	r3, [fp, #-8]
      memp_free(MEMP_TCP_PCB, pcb2);
  11f0cc:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  11f0d0:	e3a00002 	mov	r0, #2
  11f0d4:	ebffe867 	bl	119278 <memp_free>
  11f0d8:	ea000004 	b	11f0f0 <tcp_slowtmr+0x9a8>
    } else {
      prev = pcb;
  11f0dc:	e51b3008 	ldr	r3, [fp, #-8]
  11f0e0:	e50b300c 	str	r3, [fp, #-12]
      pcb = pcb->next;
  11f0e4:	e51b3008 	ldr	r3, [fp, #-8]
  11f0e8:	e593300c 	ldr	r3, [r3, #12]
  11f0ec:	e50b3008 	str	r3, [fp, #-8]
  while (pcb != NULL) {
  11f0f0:	e51b3008 	ldr	r3, [fp, #-8]
  11f0f4:	e3530000 	cmp	r3, #0
  11f0f8:	1affffaa 	bne	11efa8 <tcp_slowtmr+0x860>
    }
  }
}
  11f0fc:	e320f000 	nop	{0}
  11f100:	e24bd004 	sub	sp, fp, #4
  11f104:	e8bd8800 	pop	{fp, pc}

0011f108 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
  11f108:	e92d4800 	push	{fp, lr}
  11f10c:	e28db004 	add	fp, sp, #4
  11f110:	e24dd008 	sub	sp, sp, #8
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
  11f114:	e30e322d 	movw	r3, #57901	; 0xe22d
  11f118:	e3403014 	movt	r3, #20
  11f11c:	e5d33000 	ldrb	r3, [r3]
  11f120:	e2833001 	add	r3, r3, #1
  11f124:	e6ef2073 	uxtb	r2, r3
  11f128:	e30e322d 	movw	r3, #57901	; 0xe22d
  11f12c:	e3403014 	movt	r3, #20
  11f130:	e5c32000 	strb	r2, [r3]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
  11f134:	e30c3c20 	movw	r3, #52256	; 0xcc20
  11f138:	e3403015 	movt	r3, #21
  11f13c:	e5933000 	ldr	r3, [r3]
  11f140:	e50b3008 	str	r3, [fp, #-8]

  while (pcb != NULL) {
  11f144:	ea000044 	b	11f25c <tcp_fasttmr+0x154>
    if (pcb->last_timer != tcp_timer_ctr) {
  11f148:	e51b3008 	ldr	r3, [fp, #-8]
  11f14c:	e5d32021 	ldrb	r2, [r3, #33]	; 0x21
  11f150:	e30e322d 	movw	r3, #57901	; 0xe22d
  11f154:	e3403014 	movt	r3, #20
  11f158:	e5d33000 	ldrb	r3, [r3]
  11f15c:	e1520003 	cmp	r2, r3
  11f160:	0a00003a 	beq	11f250 <tcp_fasttmr+0x148>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
  11f164:	e30e322d 	movw	r3, #57901	; 0xe22d
  11f168:	e3403014 	movt	r3, #20
  11f16c:	e5d32000 	ldrb	r2, [r3]
  11f170:	e51b3008 	ldr	r3, [fp, #-8]
  11f174:	e5c32021 	strb	r2, [r3, #33]	; 0x21
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
  11f178:	e51b3008 	ldr	r3, [fp, #-8]
  11f17c:	e5d3301e 	ldrb	r3, [r3, #30]
  11f180:	e2033001 	and	r3, r3, #1
  11f184:	e3530000 	cmp	r3, #0
  11f188:	0a00000d 	beq	11f1c4 <tcp_fasttmr+0xbc>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
  11f18c:	e51b3008 	ldr	r3, [fp, #-8]
  11f190:	e5d3301e 	ldrb	r3, [r3, #30]
  11f194:	e3833002 	orr	r3, r3, #2
  11f198:	e6ef2073 	uxtb	r2, r3
  11f19c:	e51b3008 	ldr	r3, [fp, #-8]
  11f1a0:	e5c3201e 	strb	r2, [r3, #30]
        tcp_output(pcb);
  11f1a4:	e51b0008 	ldr	r0, [fp, #-8]
  11f1a8:	eb001b6b 	bl	125f5c <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  11f1ac:	e51b3008 	ldr	r3, [fp, #-8]
  11f1b0:	e5d3301e 	ldrb	r3, [r3, #30]
  11f1b4:	e3c33003 	bic	r3, r3, #3
  11f1b8:	e6ef2073 	uxtb	r2, r3
  11f1bc:	e51b3008 	ldr	r3, [fp, #-8]
  11f1c0:	e5c3201e 	strb	r2, [r3, #30]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
  11f1c4:	e51b3008 	ldr	r3, [fp, #-8]
  11f1c8:	e5d3301e 	ldrb	r3, [r3, #30]
  11f1cc:	e2033008 	and	r3, r3, #8
  11f1d0:	e3530000 	cmp	r3, #0
  11f1d4:	0a000007 	beq	11f1f8 <tcp_fasttmr+0xf0>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
  11f1d8:	e51b3008 	ldr	r3, [fp, #-8]
  11f1dc:	e5d3301e 	ldrb	r3, [r3, #30]
  11f1e0:	e3c33008 	bic	r3, r3, #8
  11f1e4:	e6ef2073 	uxtb	r2, r3
  11f1e8:	e51b3008 	ldr	r3, [fp, #-8]
  11f1ec:	e5c3201e 	strb	r2, [r3, #30]
        tcp_close_shutdown_fin(pcb);
  11f1f0:	e51b0008 	ldr	r0, [fp, #-8]
  11f1f4:	ebfff8ac 	bl	11d4ac <tcp_close_shutdown_fin>
      }

      next = pcb->next;
  11f1f8:	e51b3008 	ldr	r3, [fp, #-8]
  11f1fc:	e593300c 	ldr	r3, [r3, #12]
  11f200:	e50b300c 	str	r3, [fp, #-12]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
  11f204:	e51b3008 	ldr	r3, [fp, #-8]
  11f208:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11f20c:	e3530000 	cmp	r3, #0
  11f210:	0a00000b 	beq	11f244 <tcp_fasttmr+0x13c>
        tcp_active_pcbs_changed = 0;
  11f214:	e30c3c1c 	movw	r3, #52252	; 0xcc1c
  11f218:	e3403015 	movt	r3, #21
  11f21c:	e3a02000 	mov	r2, #0
  11f220:	e5c32000 	strb	r2, [r3]
        tcp_process_refused_data(pcb);
  11f224:	e51b0008 	ldr	r0, [fp, #-8]
  11f228:	eb000029 	bl	11f2d4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
  11f22c:	e30c3c1c 	movw	r3, #52252	; 0xcc1c
  11f230:	e3403015 	movt	r3, #21
  11f234:	e5d33000 	ldrb	r3, [r3]
  11f238:	e3530000 	cmp	r3, #0
  11f23c:	0a000000 	beq	11f244 <tcp_fasttmr+0x13c>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
  11f240:	eaffffbb 	b	11f134 <tcp_fasttmr+0x2c>
        }
      }
      pcb = next;
  11f244:	e51b300c 	ldr	r3, [fp, #-12]
  11f248:	e50b3008 	str	r3, [fp, #-8]
  11f24c:	ea000002 	b	11f25c <tcp_fasttmr+0x154>
    } else {
      pcb = pcb->next;
  11f250:	e51b3008 	ldr	r3, [fp, #-8]
  11f254:	e593300c 	ldr	r3, [r3, #12]
  11f258:	e50b3008 	str	r3, [fp, #-8]
  while (pcb != NULL) {
  11f25c:	e51b3008 	ldr	r3, [fp, #-8]
  11f260:	e3530000 	cmp	r3, #0
  11f264:	1affffb7 	bne	11f148 <tcp_fasttmr+0x40>
    }
  }
}
  11f268:	e320f000 	nop	{0}
  11f26c:	e24bd004 	sub	sp, fp, #4
  11f270:	e8bd8800 	pop	{fp, pc}

0011f274 <tcp_txnow>:

/** Call tcp_output for all active pcbs that have TF_NAGLEMEMERR set */
void
tcp_txnow(void)
{
  11f274:	e92d4800 	push	{fp, lr}
  11f278:	e28db004 	add	fp, sp, #4
  11f27c:	e24dd008 	sub	sp, sp, #8
  struct tcp_pcb *pcb;

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  11f280:	e30c3c20 	movw	r3, #52256	; 0xcc20
  11f284:	e3403015 	movt	r3, #21
  11f288:	e5933000 	ldr	r3, [r3]
  11f28c:	e50b3008 	str	r3, [fp, #-8]
  11f290:	ea000009 	b	11f2bc <tcp_txnow+0x48>
    if (pcb->flags & TF_NAGLEMEMERR) {
  11f294:	e51b3008 	ldr	r3, [fp, #-8]
  11f298:	e5d3301e 	ldrb	r3, [r3, #30]
  11f29c:	e6af3073 	sxtb	r3, r3
  11f2a0:	e3530000 	cmp	r3, #0
  11f2a4:	aa000001 	bge	11f2b0 <tcp_txnow+0x3c>
      tcp_output(pcb);
  11f2a8:	e51b0008 	ldr	r0, [fp, #-8]
  11f2ac:	eb001b2a 	bl	125f5c <tcp_output>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  11f2b0:	e51b3008 	ldr	r3, [fp, #-8]
  11f2b4:	e593300c 	ldr	r3, [r3, #12]
  11f2b8:	e50b3008 	str	r3, [fp, #-8]
  11f2bc:	e51b3008 	ldr	r3, [fp, #-8]
  11f2c0:	e3530000 	cmp	r3, #0
  11f2c4:	1afffff2 	bne	11f294 <tcp_txnow+0x20>
    }
  }
}
  11f2c8:	e320f000 	nop	{0}
  11f2cc:	e24bd004 	sub	sp, fp, #4
  11f2d0:	e8bd8800 	pop	{fp, pc}

0011f2d4 <tcp_process_refused_data>:

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
  11f2d4:	e92d4810 	push	{r4, fp, lr}
  11f2d8:	e28db008 	add	fp, sp, #8
  11f2dc:	e24dd014 	sub	sp, sp, #20
  11f2e0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
  11f2e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f2e8:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11f2ec:	e5d3300d 	ldrb	r3, [r3, #13]
  11f2f0:	e54b300e 	strb	r3, [fp, #-14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
  11f2f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f2f8:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11f2fc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
  11f300:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f304:	e3a02000 	mov	r2, #0
  11f308:	e5832078 	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
  11f30c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f310:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  11f314:	e3530000 	cmp	r3, #0
  11f318:	0a00000a 	beq	11f348 <tcp_process_refused_data+0x74>
  11f31c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f320:	e5934084 	ldr	r4, [r3, #132]	; 0x84
  11f324:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f328:	e5930010 	ldr	r0, [r3, #16]
  11f32c:	e3a03000 	mov	r3, #0
  11f330:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11f334:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11f338:	e12fff34 	blx	r4
  11f33c:	e1a03000 	mov	r3, r0
  11f340:	e54b300d 	strb	r3, [fp, #-13]
  11f344:	ea000006 	b	11f364 <tcp_process_refused_data+0x90>
  11f348:	e3a03000 	mov	r3, #0
  11f34c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11f350:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11f354:	e3a00000 	mov	r0, #0
  11f358:	eb000085 	bl	11f574 <tcp_recv_null>
  11f35c:	e1a03000 	mov	r3, r0
  11f360:	e54b300d 	strb	r3, [fp, #-13]
    if (err == ERR_OK) {
  11f364:	e15b30dd 	ldrsb	r3, [fp, #-13]
  11f368:	e3530000 	cmp	r3, #0
  11f36c:	1a000023 	bne	11f400 <tcp_process_refused_data+0x12c>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
  11f370:	e55b300e 	ldrb	r3, [fp, #-14]
  11f374:	e2033020 	and	r3, r3, #32
  11f378:	e3530000 	cmp	r3, #0
  11f37c:	0a000029 	beq	11f428 <tcp_process_refused_data+0x154>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
  11f380:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f384:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  11f388:	e3530a02 	cmp	r3, #8192	; 0x2000
  11f38c:	0a000005 	beq	11f3a8 <tcp_process_refused_data+0xd4>
          pcb->rcv_wnd++;
  11f390:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f394:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  11f398:	e2833001 	add	r3, r3, #1
  11f39c:	e6ff2073 	uxth	r2, r3
  11f3a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f3a4:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
        }
        TCP_EVENT_CLOSED(pcb, err);
  11f3a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f3ac:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  11f3b0:	e3530000 	cmp	r3, #0
  11f3b4:	0a00000a 	beq	11f3e4 <tcp_process_refused_data+0x110>
  11f3b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f3bc:	e5934084 	ldr	r4, [r3, #132]	; 0x84
  11f3c0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f3c4:	e5930010 	ldr	r0, [r3, #16]
  11f3c8:	e3a03000 	mov	r3, #0
  11f3cc:	e3a02000 	mov	r2, #0
  11f3d0:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11f3d4:	e12fff34 	blx	r4
  11f3d8:	e1a03000 	mov	r3, r0
  11f3dc:	e54b300d 	strb	r3, [fp, #-13]
  11f3e0:	ea000001 	b	11f3ec <tcp_process_refused_data+0x118>
  11f3e4:	e3a03000 	mov	r3, #0
  11f3e8:	e54b300d 	strb	r3, [fp, #-13]
        if (err == ERR_ABRT) {
  11f3ec:	e15b30dd 	ldrsb	r3, [fp, #-13]
  11f3f0:	e373000d 	cmn	r3, #13
  11f3f4:	1a00000b 	bne	11f428 <tcp_process_refused_data+0x154>
          return ERR_ABRT;
  11f3f8:	e3e0300c 	mvn	r3, #12
  11f3fc:	ea00000a 	b	11f42c <tcp_process_refused_data+0x158>
        }
      }
    } else if (err == ERR_ABRT) {
  11f400:	e15b30dd 	ldrsb	r3, [fp, #-13]
  11f404:	e373000d 	cmn	r3, #13
  11f408:	1a000001 	bne	11f414 <tcp_process_refused_data+0x140>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
  11f40c:	e3e0300c 	mvn	r3, #12
  11f410:	ea000005 	b	11f42c <tcp_process_refused_data+0x158>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
  11f414:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f418:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11f41c:	e5832078 	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
  11f420:	e3e03004 	mvn	r3, #4
  11f424:	ea000000 	b	11f42c <tcp_process_refused_data+0x158>
    }
  }
  return ERR_OK;
  11f428:	e3a03000 	mov	r3, #0
}
  11f42c:	e1a00003 	mov	r0, r3
  11f430:	e24bd008 	sub	sp, fp, #8
  11f434:	e8bd8810 	pop	{r4, fp, pc}

0011f438 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
  11f438:	e92d4800 	push	{fp, lr}
  11f43c:	e28db004 	add	fp, sp, #4
  11f440:	e24dd010 	sub	sp, sp, #16
  11f444:	e50b0010 	str	r0, [fp, #-16]
  while (seg != NULL) {
  11f448:	ea000006 	b	11f468 <tcp_segs_free+0x30>
    struct tcp_seg *next = seg->next;
  11f44c:	e51b3010 	ldr	r3, [fp, #-16]
  11f450:	e5933000 	ldr	r3, [r3]
  11f454:	e50b3008 	str	r3, [fp, #-8]
    tcp_seg_free(seg);
  11f458:	e51b0010 	ldr	r0, [fp, #-16]
  11f45c:	eb000007 	bl	11f480 <tcp_seg_free>
    seg = next;
  11f460:	e51b3008 	ldr	r3, [fp, #-8]
  11f464:	e50b3010 	str	r3, [fp, #-16]
  while (seg != NULL) {
  11f468:	e51b3010 	ldr	r3, [fp, #-16]
  11f46c:	e3530000 	cmp	r3, #0
  11f470:	1afffff5 	bne	11f44c <tcp_segs_free+0x14>
  }
}
  11f474:	e320f000 	nop	{0}
  11f478:	e24bd004 	sub	sp, fp, #4
  11f47c:	e8bd8800 	pop	{fp, pc}

0011f480 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
  11f480:	e92d4800 	push	{fp, lr}
  11f484:	e28db004 	add	fp, sp, #4
  11f488:	e24dd008 	sub	sp, sp, #8
  11f48c:	e50b0008 	str	r0, [fp, #-8]
  if (seg != NULL) {
  11f490:	e51b3008 	ldr	r3, [fp, #-8]
  11f494:	e3530000 	cmp	r3, #0
  11f498:	0a00000a 	beq	11f4c8 <tcp_seg_free+0x48>
    if (seg->p != NULL) {
  11f49c:	e51b3008 	ldr	r3, [fp, #-8]
  11f4a0:	e5933004 	ldr	r3, [r3, #4]
  11f4a4:	e3530000 	cmp	r3, #0
  11f4a8:	0a000003 	beq	11f4bc <tcp_seg_free+0x3c>
      pbuf_free(seg->p);
  11f4ac:	e51b3008 	ldr	r3, [fp, #-8]
  11f4b0:	e5933004 	ldr	r3, [r3, #4]
  11f4b4:	e1a00003 	mov	r0, r3
  11f4b8:	ebffee7c 	bl	11aeb0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
  11f4bc:	e51b1008 	ldr	r1, [fp, #-8]
  11f4c0:	e3a00004 	mov	r0, #4
  11f4c4:	ebffe76b 	bl	119278 <memp_free>
  }
}
  11f4c8:	e320f000 	nop	{0}
  11f4cc:	e24bd004 	sub	sp, fp, #4
  11f4d0:	e8bd8800 	pop	{fp, pc}

0011f4d4 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
  11f4d4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11f4d8:	e28db000 	add	fp, sp, #0
  11f4dc:	e24dd00c 	sub	sp, sp, #12
  11f4e0:	e50b0008 	str	r0, [fp, #-8]
  11f4e4:	e1a03001 	mov	r3, r1
  11f4e8:	e54b3009 	strb	r3, [fp, #-9]
  pcb->prio = prio;
  11f4ec:	e51b3008 	ldr	r3, [fp, #-8]
  11f4f0:	e55b2009 	ldrb	r2, [fp, #-9]
  11f4f4:	e5c32018 	strb	r2, [r3, #24]
}
  11f4f8:	e320f000 	nop	{0}
  11f4fc:	e28bd000 	add	sp, fp, #0
  11f500:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11f504:	e12fff1e 	bx	lr

0011f508 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
  11f508:	e92d4800 	push	{fp, lr}
  11f50c:	e28db004 	add	fp, sp, #4
  11f510:	e24dd010 	sub	sp, sp, #16
  11f514:	e50b0010 	str	r0, [fp, #-16]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
  11f518:	e300258f 	movw	r2, #1423	; 0x58f
  11f51c:	e3071ed8 	movw	r1, #32472	; 0x7ed8
  11f520:	e3401014 	movt	r1, #20
  11f524:	e3a00004 	mov	r0, #4
  11f528:	ebffe6ea 	bl	1190d8 <memp_malloc_fn>
  11f52c:	e50b0008 	str	r0, [fp, #-8]
  if (cseg == NULL) {
  11f530:	e51b3008 	ldr	r3, [fp, #-8]
  11f534:	e3530000 	cmp	r3, #0
  11f538:	1a000001 	bne	11f544 <tcp_seg_copy+0x3c>
    return NULL;
  11f53c:	e3a03000 	mov	r3, #0
  11f540:	ea000008 	b	11f568 <tcp_seg_copy+0x60>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
  11f544:	e3a02010 	mov	r2, #16
  11f548:	e51b1010 	ldr	r1, [fp, #-16]
  11f54c:	e51b0008 	ldr	r0, [fp, #-8]
  11f550:	eb00860f 	bl	140d94 <memcpy>
  pbuf_ref(cseg->p);
  11f554:	e51b3008 	ldr	r3, [fp, #-8]
  11f558:	e5933004 	ldr	r3, [r3, #4]
  11f55c:	e1a00003 	mov	r0, r3
  11f560:	ebffeeec 	bl	11b118 <pbuf_ref>
  return cseg;
  11f564:	e51b3008 	ldr	r3, [fp, #-8]
}
  11f568:	e1a00003 	mov	r0, r3
  11f56c:	e24bd004 	sub	sp, fp, #4
  11f570:	e8bd8800 	pop	{fp, pc}

0011f574 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
  11f574:	e92d4800 	push	{fp, lr}
  11f578:	e28db004 	add	fp, sp, #4
  11f57c:	e24dd010 	sub	sp, sp, #16
  11f580:	e50b0008 	str	r0, [fp, #-8]
  11f584:	e50b100c 	str	r1, [fp, #-12]
  11f588:	e50b2010 	str	r2, [fp, #-16]
  11f58c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
  11f590:	e51b3010 	ldr	r3, [fp, #-16]
  11f594:	e3530000 	cmp	r3, #0
  11f598:	0a000007 	beq	11f5bc <tcp_recv_null+0x48>
    tcp_recved(pcb, p->tot_len);
  11f59c:	e51b3010 	ldr	r3, [fp, #-16]
  11f5a0:	e1d330b8 	ldrh	r3, [r3, #8]
  11f5a4:	e1a01003 	mov	r1, r3
  11f5a8:	e51b000c 	ldr	r0, [fp, #-12]
  11f5ac:	ebfffac7 	bl	11e0d0 <tcp_recved>
    pbuf_free(p);
  11f5b0:	e51b0010 	ldr	r0, [fp, #-16]
  11f5b4:	ebffee3d 	bl	11aeb0 <pbuf_free>
  11f5b8:	ea000006 	b	11f5d8 <tcp_recv_null+0x64>
  } else if (err == ERR_OK) {
  11f5bc:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  11f5c0:	e3530000 	cmp	r3, #0
  11f5c4:	1a000003 	bne	11f5d8 <tcp_recv_null+0x64>
    return tcp_close(pcb);
  11f5c8:	e51b000c 	ldr	r0, [fp, #-12]
  11f5cc:	ebfff81c 	bl	11d644 <tcp_close>
  11f5d0:	e1a03000 	mov	r3, r0
  11f5d4:	ea000000 	b	11f5dc <tcp_recv_null+0x68>
  }
  return ERR_OK;
  11f5d8:	e3a03000 	mov	r3, #0
}
  11f5dc:	e1a00003 	mov	r0, r3
  11f5e0:	e24bd004 	sub	sp, fp, #4
  11f5e4:	e8bd8800 	pop	{fp, pc}

0011f5e8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
  11f5e8:	e92d4800 	push	{fp, lr}
  11f5ec:	e28db004 	add	fp, sp, #4
  11f5f0:	e24dd018 	sub	sp, sp, #24
  11f5f4:	e1a03000 	mov	r3, r0
  11f5f8:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
  11f5fc:	e15b31d5 	ldrsb	r3, [fp, #-21]	; 0xffffffeb
  11f600:	e3530000 	cmp	r3, #0
  11f604:	ba000001 	blt	11f610 <tcp_kill_prio+0x28>
  11f608:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  11f60c:	ea000000 	b	11f614 <tcp_kill_prio+0x2c>
  11f610:	e3a0307f 	mov	r3, #127	; 0x7f
  11f614:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
  11f618:	e3a03000 	mov	r3, #0
  11f61c:	e50b3010 	str	r3, [fp, #-16]
  inactive = NULL;
  11f620:	e3a03000 	mov	r3, #0
  11f624:	e50b300c 	str	r3, [fp, #-12]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  11f628:	e30c3c20 	movw	r3, #52256	; 0xcc20
  11f62c:	e3403015 	movt	r3, #21
  11f630:	e5933000 	ldr	r3, [r3]
  11f634:	e50b3008 	str	r3, [fp, #-8]
  11f638:	ea00001c 	b	11f6b0 <tcp_kill_prio+0xc8>
    if (pcb->prio <= mprio &&
  11f63c:	e51b3008 	ldr	r3, [fp, #-8]
  11f640:	e5d33018 	ldrb	r3, [r3, #24]
  11f644:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  11f648:	e1520003 	cmp	r2, r3
  11f64c:	3a000014 	bcc	11f6a4 <tcp_kill_prio+0xbc>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
  11f650:	e30c3c24 	movw	r3, #52260	; 0xcc24
  11f654:	e3403015 	movt	r3, #21
  11f658:	e5932000 	ldr	r2, [r3]
  11f65c:	e51b3008 	ldr	r3, [fp, #-8]
  11f660:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11f664:	e0423003 	sub	r3, r2, r3
    if (pcb->prio <= mprio &&
  11f668:	e51b2010 	ldr	r2, [fp, #-16]
  11f66c:	e1520003 	cmp	r2, r3
  11f670:	8a00000b 	bhi	11f6a4 <tcp_kill_prio+0xbc>
      inactivity = tcp_ticks - pcb->tmr;
  11f674:	e30c3c24 	movw	r3, #52260	; 0xcc24
  11f678:	e3403015 	movt	r3, #21
  11f67c:	e5932000 	ldr	r2, [r3]
  11f680:	e51b3008 	ldr	r3, [fp, #-8]
  11f684:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11f688:	e0423003 	sub	r3, r2, r3
  11f68c:	e50b3010 	str	r3, [fp, #-16]
      inactive = pcb;
  11f690:	e51b3008 	ldr	r3, [fp, #-8]
  11f694:	e50b300c 	str	r3, [fp, #-12]
      mprio = pcb->prio;
  11f698:	e51b3008 	ldr	r3, [fp, #-8]
  11f69c:	e5d33018 	ldrb	r3, [r3, #24]
  11f6a0:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  11f6a4:	e51b3008 	ldr	r3, [fp, #-8]
  11f6a8:	e593300c 	ldr	r3, [r3, #12]
  11f6ac:	e50b3008 	str	r3, [fp, #-8]
  11f6b0:	e51b3008 	ldr	r3, [fp, #-8]
  11f6b4:	e3530000 	cmp	r3, #0
  11f6b8:	1affffdf 	bne	11f63c <tcp_kill_prio+0x54>
    }
  }
  if (inactive != NULL) {
  11f6bc:	e51b300c 	ldr	r3, [fp, #-12]
  11f6c0:	e3530000 	cmp	r3, #0
  11f6c4:	0a000001 	beq	11f6d0 <tcp_kill_prio+0xe8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
  11f6c8:	e51b000c 	ldr	r0, [fp, #-12]
  11f6cc:	ebfff8d0 	bl	11da14 <tcp_abort>
  }
}
  11f6d0:	e320f000 	nop	{0}
  11f6d4:	e24bd004 	sub	sp, fp, #4
  11f6d8:	e8bd8800 	pop	{fp, pc}

0011f6dc <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
  11f6dc:	e92d4800 	push	{fp, lr}
  11f6e0:	e28db004 	add	fp, sp, #4
  11f6e4:	e24dd018 	sub	sp, sp, #24
  11f6e8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
  11f6ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f6f0:	e3530008 	cmp	r3, #8
  11f6f4:	0a000009 	beq	11f720 <tcp_kill_state+0x44>
  11f6f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f6fc:	e3530009 	cmp	r3, #9
  11f700:	0a000006 	beq	11f720 <tcp_kill_state+0x44>
  11f704:	e30801b0 	movw	r0, #33200	; 0x81b0
  11f708:	e3400014 	movt	r0, #20
  11f70c:	ebff8e80 	bl	103114 <rt_kprintf>
  11f710:	e30015d7 	movw	r1, #1495	; 0x5d7
  11f714:	e3070ed8 	movw	r0, #32472	; 0x7ed8
  11f718:	e3400014 	movt	r0, #20
  11f71c:	ebffae73 	bl	10b0f0 <sys_arch_assert>

  inactivity = 0;
  11f720:	e3a03000 	mov	r3, #0
  11f724:	e50b3010 	str	r3, [fp, #-16]
  inactive = NULL;
  11f728:	e3a03000 	mov	r3, #0
  11f72c:	e50b300c 	str	r3, [fp, #-12]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  11f730:	e30c3c20 	movw	r3, #52256	; 0xcc20
  11f734:	e3403015 	movt	r3, #21
  11f738:	e5933000 	ldr	r3, [r3]
  11f73c:	e50b3008 	str	r3, [fp, #-8]
  11f740:	ea000019 	b	11f7ac <tcp_kill_state+0xd0>
    if (pcb->state == state) {
  11f744:	e51b3008 	ldr	r3, [fp, #-8]
  11f748:	e5933014 	ldr	r3, [r3, #20]
  11f74c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11f750:	e1520003 	cmp	r2, r3
  11f754:	1a000011 	bne	11f7a0 <tcp_kill_state+0xc4>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
  11f758:	e30c3c24 	movw	r3, #52260	; 0xcc24
  11f75c:	e3403015 	movt	r3, #21
  11f760:	e5932000 	ldr	r2, [r3]
  11f764:	e51b3008 	ldr	r3, [fp, #-8]
  11f768:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11f76c:	e0423003 	sub	r3, r2, r3
  11f770:	e51b2010 	ldr	r2, [fp, #-16]
  11f774:	e1520003 	cmp	r2, r3
  11f778:	8a000008 	bhi	11f7a0 <tcp_kill_state+0xc4>
        inactivity = tcp_ticks - pcb->tmr;
  11f77c:	e30c3c24 	movw	r3, #52260	; 0xcc24
  11f780:	e3403015 	movt	r3, #21
  11f784:	e5932000 	ldr	r2, [r3]
  11f788:	e51b3008 	ldr	r3, [fp, #-8]
  11f78c:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11f790:	e0423003 	sub	r3, r2, r3
  11f794:	e50b3010 	str	r3, [fp, #-16]
        inactive = pcb;
  11f798:	e51b3008 	ldr	r3, [fp, #-8]
  11f79c:	e50b300c 	str	r3, [fp, #-12]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  11f7a0:	e51b3008 	ldr	r3, [fp, #-8]
  11f7a4:	e593300c 	ldr	r3, [r3, #12]
  11f7a8:	e50b3008 	str	r3, [fp, #-8]
  11f7ac:	e51b3008 	ldr	r3, [fp, #-8]
  11f7b0:	e3530000 	cmp	r3, #0
  11f7b4:	1affffe2 	bne	11f744 <tcp_kill_state+0x68>
      }
    }
  }
  if (inactive != NULL) {
  11f7b8:	e51b300c 	ldr	r3, [fp, #-12]
  11f7bc:	e3530000 	cmp	r3, #0
  11f7c0:	0a000002 	beq	11f7d0 <tcp_kill_state+0xf4>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
  11f7c4:	e3a01000 	mov	r1, #0
  11f7c8:	e51b000c 	ldr	r0, [fp, #-12]
  11f7cc:	ebfff7f1 	bl	11d798 <tcp_abandon>
  }
}
  11f7d0:	e320f000 	nop	{0}
  11f7d4:	e24bd004 	sub	sp, fp, #4
  11f7d8:	e8bd8800 	pop	{fp, pc}

0011f7dc <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
  11f7dc:	e92d4800 	push	{fp, lr}
  11f7e0:	e28db004 	add	fp, sp, #4
  11f7e4:	e24dd010 	sub	sp, sp, #16
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
  11f7e8:	e3a03000 	mov	r3, #0
  11f7ec:	e50b3010 	str	r3, [fp, #-16]
  inactive = NULL;
  11f7f0:	e3a03000 	mov	r3, #0
  11f7f4:	e50b300c 	str	r3, [fp, #-12]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  11f7f8:	e30c3c30 	movw	r3, #52272	; 0xcc30
  11f7fc:	e3403015 	movt	r3, #21
  11f800:	e5933000 	ldr	r3, [r3]
  11f804:	e50b3008 	str	r3, [fp, #-8]
  11f808:	ea000014 	b	11f860 <tcp_kill_timewait+0x84>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
  11f80c:	e30c3c24 	movw	r3, #52260	; 0xcc24
  11f810:	e3403015 	movt	r3, #21
  11f814:	e5932000 	ldr	r2, [r3]
  11f818:	e51b3008 	ldr	r3, [fp, #-8]
  11f81c:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11f820:	e0423003 	sub	r3, r2, r3
  11f824:	e51b2010 	ldr	r2, [fp, #-16]
  11f828:	e1520003 	cmp	r2, r3
  11f82c:	8a000008 	bhi	11f854 <tcp_kill_timewait+0x78>
      inactivity = tcp_ticks - pcb->tmr;
  11f830:	e30c3c24 	movw	r3, #52260	; 0xcc24
  11f834:	e3403015 	movt	r3, #21
  11f838:	e5932000 	ldr	r2, [r3]
  11f83c:	e51b3008 	ldr	r3, [fp, #-8]
  11f840:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11f844:	e0423003 	sub	r3, r2, r3
  11f848:	e50b3010 	str	r3, [fp, #-16]
      inactive = pcb;
  11f84c:	e51b3008 	ldr	r3, [fp, #-8]
  11f850:	e50b300c 	str	r3, [fp, #-12]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  11f854:	e51b3008 	ldr	r3, [fp, #-8]
  11f858:	e593300c 	ldr	r3, [r3, #12]
  11f85c:	e50b3008 	str	r3, [fp, #-8]
  11f860:	e51b3008 	ldr	r3, [fp, #-8]
  11f864:	e3530000 	cmp	r3, #0
  11f868:	1affffe7 	bne	11f80c <tcp_kill_timewait+0x30>
    }
  }
  if (inactive != NULL) {
  11f86c:	e51b300c 	ldr	r3, [fp, #-12]
  11f870:	e3530000 	cmp	r3, #0
  11f874:	0a000001 	beq	11f880 <tcp_kill_timewait+0xa4>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
  11f878:	e51b000c 	ldr	r0, [fp, #-12]
  11f87c:	ebfff864 	bl	11da14 <tcp_abort>
  }
}
  11f880:	e320f000 	nop	{0}
  11f884:	e24bd004 	sub	sp, fp, #4
  11f888:	e8bd8800 	pop	{fp, pc}

0011f88c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
  11f88c:	e92d4800 	push	{fp, lr}
  11f890:	e28db004 	add	fp, sp, #4
  11f894:	e24dd010 	sub	sp, sp, #16
  11f898:	e1a03000 	mov	r3, r0
  11f89c:	e54b300d 	strb	r3, [fp, #-13]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  11f8a0:	e3002612 	movw	r2, #1554	; 0x612
  11f8a4:	e3071ed8 	movw	r1, #32472	; 0x7ed8
  11f8a8:	e3401014 	movt	r1, #20
  11f8ac:	e3a00002 	mov	r0, #2
  11f8b0:	ebffe608 	bl	1190d8 <memp_malloc_fn>
  11f8b4:	e50b0008 	str	r0, [fp, #-8]
  if (pcb == NULL) {
  11f8b8:	e51b3008 	ldr	r3, [fp, #-8]
  11f8bc:	e3530000 	cmp	r3, #0
  11f8c0:	1a000050 	bne	11fa08 <tcp_alloc+0x17c>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
  11f8c4:	ebffffc4 	bl	11f7dc <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  11f8c8:	e3002618 	movw	r2, #1560	; 0x618
  11f8cc:	e3071ed8 	movw	r1, #32472	; 0x7ed8
  11f8d0:	e3401014 	movt	r1, #20
  11f8d4:	e3a00002 	mov	r0, #2
  11f8d8:	ebffe5fe 	bl	1190d8 <memp_malloc_fn>
  11f8dc:	e50b0008 	str	r0, [fp, #-8]
    if (pcb == NULL) {
  11f8e0:	e51b3008 	ldr	r3, [fp, #-8]
  11f8e4:	e3530000 	cmp	r3, #0
  11f8e8:	1a00003c 	bne	11f9e0 <tcp_alloc+0x154>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
  11f8ec:	e3a00009 	mov	r0, #9
  11f8f0:	ebffff79 	bl	11f6dc <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  11f8f4:	e300261e 	movw	r2, #1566	; 0x61e
  11f8f8:	e3071ed8 	movw	r1, #32472	; 0x7ed8
  11f8fc:	e3401014 	movt	r1, #20
  11f900:	e3a00002 	mov	r0, #2
  11f904:	ebffe5f3 	bl	1190d8 <memp_malloc_fn>
  11f908:	e50b0008 	str	r0, [fp, #-8]
      if (pcb == NULL) {
  11f90c:	e51b3008 	ldr	r3, [fp, #-8]
  11f910:	e3530000 	cmp	r3, #0
  11f914:	1a000027 	bne	11f9b8 <tcp_alloc+0x12c>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
  11f918:	e3a00008 	mov	r0, #8
  11f91c:	ebffff6e 	bl	11f6dc <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  11f920:	e3002624 	movw	r2, #1572	; 0x624
  11f924:	e3071ed8 	movw	r1, #32472	; 0x7ed8
  11f928:	e3401014 	movt	r1, #20
  11f92c:	e3a00002 	mov	r0, #2
  11f930:	ebffe5e8 	bl	1190d8 <memp_malloc_fn>
  11f934:	e50b0008 	str	r0, [fp, #-8]
        if (pcb == NULL) {
  11f938:	e51b3008 	ldr	r3, [fp, #-8]
  11f93c:	e3530000 	cmp	r3, #0
  11f940:	1a000012 	bne	11f990 <tcp_alloc+0x104>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
  11f944:	e55b300d 	ldrb	r3, [fp, #-13]
  11f948:	e1a00003 	mov	r0, r3
  11f94c:	ebffff25 	bl	11f5e8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  11f950:	e300262a 	movw	r2, #1578	; 0x62a
  11f954:	e3071ed8 	movw	r1, #32472	; 0x7ed8
  11f958:	e3401014 	movt	r1, #20
  11f95c:	e3a00002 	mov	r0, #2
  11f960:	ebffe5dc 	bl	1190d8 <memp_malloc_fn>
  11f964:	e50b0008 	str	r0, [fp, #-8]
          if (pcb != NULL) {
  11f968:	e51b3008 	ldr	r3, [fp, #-8]
  11f96c:	e3530000 	cmp	r3, #0
  11f970:	0a000006 	beq	11f990 <tcp_alloc+0x104>
            /* adjust err stats: memp_malloc failed multiple times before */
            MEMP_STATS_DEC(err, MEMP_TCP_PCB);
  11f974:	e30c3a30 	movw	r3, #51760	; 0xca30
  11f978:	e3403015 	movt	r3, #21
  11f97c:	e59330dc 	ldr	r3, [r3, #220]	; 0xdc
  11f980:	e1d320b4 	ldrh	r2, [r3, #4]
  11f984:	e2422001 	sub	r2, r2, #1
  11f988:	e6ff2072 	uxth	r2, r2
  11f98c:	e1c320b4 	strh	r2, [r3, #4]
          }
        }
        if (pcb != NULL) {
  11f990:	e51b3008 	ldr	r3, [fp, #-8]
  11f994:	e3530000 	cmp	r3, #0
  11f998:	0a000006 	beq	11f9b8 <tcp_alloc+0x12c>
          /* adjust err stats: memp_malloc failed multiple times before */
          MEMP_STATS_DEC(err, MEMP_TCP_PCB);
  11f99c:	e30c3a30 	movw	r3, #51760	; 0xca30
  11f9a0:	e3403015 	movt	r3, #21
  11f9a4:	e59330dc 	ldr	r3, [r3, #220]	; 0xdc
  11f9a8:	e1d320b4 	ldrh	r2, [r3, #4]
  11f9ac:	e2422001 	sub	r2, r2, #1
  11f9b0:	e6ff2072 	uxth	r2, r2
  11f9b4:	e1c320b4 	strh	r2, [r3, #4]
        }
      }
      if (pcb != NULL) {
  11f9b8:	e51b3008 	ldr	r3, [fp, #-8]
  11f9bc:	e3530000 	cmp	r3, #0
  11f9c0:	0a000006 	beq	11f9e0 <tcp_alloc+0x154>
        /* adjust err stats: memp_malloc failed multiple times before */
        MEMP_STATS_DEC(err, MEMP_TCP_PCB);
  11f9c4:	e30c3a30 	movw	r3, #51760	; 0xca30
  11f9c8:	e3403015 	movt	r3, #21
  11f9cc:	e59330dc 	ldr	r3, [r3, #220]	; 0xdc
  11f9d0:	e1d320b4 	ldrh	r2, [r3, #4]
  11f9d4:	e2422001 	sub	r2, r2, #1
  11f9d8:	e6ff2072 	uxth	r2, r2
  11f9dc:	e1c320b4 	strh	r2, [r3, #4]
      }
    }
    if (pcb != NULL) {
  11f9e0:	e51b3008 	ldr	r3, [fp, #-8]
  11f9e4:	e3530000 	cmp	r3, #0
  11f9e8:	0a000006 	beq	11fa08 <tcp_alloc+0x17c>
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
  11f9ec:	e30c3a30 	movw	r3, #51760	; 0xca30
  11f9f0:	e3403015 	movt	r3, #21
  11f9f4:	e59330dc 	ldr	r3, [r3, #220]	; 0xdc
  11f9f8:	e1d320b4 	ldrh	r2, [r3, #4]
  11f9fc:	e2422001 	sub	r2, r2, #1
  11fa00:	e6ff2072 	uxth	r2, r2
  11fa04:	e1c320b4 	strh	r2, [r3, #4]
    }
  }
  if (pcb != NULL) {
  11fa08:	e51b3008 	ldr	r3, [fp, #-8]
  11fa0c:	e3530000 	cmp	r3, #0
  11fa10:	0a00003e 	beq	11fb10 <tcp_alloc+0x284>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
  11fa14:	e3a020a4 	mov	r2, #164	; 0xa4
  11fa18:	e3a01000 	mov	r1, #0
  11fa1c:	e51b0008 	ldr	r0, [fp, #-8]
  11fa20:	eb008613 	bl	141274 <memset>
    pcb->prio = prio;
  11fa24:	e51b3008 	ldr	r3, [fp, #-8]
  11fa28:	e55b200d 	ldrb	r2, [fp, #-13]
  11fa2c:	e5c32018 	strb	r2, [r3, #24]
    pcb->snd_buf = TCP_SND_BUF;
  11fa30:	e51b3008 	ldr	r3, [fp, #-8]
  11fa34:	e3a02a02 	mov	r2, #8192	; 0x2000
  11fa38:	e1c326b4 	strh	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
  11fa3c:	e51b3008 	ldr	r3, [fp, #-8]
  11fa40:	e3a02a02 	mov	r2, #8192	; 0x2000
  11fa44:	e1c322be 	strh	r2, [r3, #46]	; 0x2e
  11fa48:	e51b3008 	ldr	r3, [fp, #-8]
  11fa4c:	e1d322be 	ldrh	r2, [r3, #46]	; 0x2e
  11fa50:	e51b3008 	ldr	r3, [fp, #-8]
  11fa54:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
    pcb->ttl = TCP_TTL;
  11fa58:	e51b3008 	ldr	r3, [fp, #-8]
  11fa5c:	e3e02000 	mvn	r2, #0
  11fa60:	e5c3200a 	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
  11fa64:	e51b3008 	ldr	r3, [fp, #-8]
  11fa68:	e3a02f86 	mov	r2, #536	; 0x218
  11fa6c:	e1c323b6 	strh	r2, [r3, #54]	; 0x36
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
  11fa70:	e51b3008 	ldr	r3, [fp, #-8]
  11fa74:	e3a02006 	mov	r2, #6
  11fa78:	e1c324b4 	strh	r2, [r3, #68]	; 0x44
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
  11fa7c:	e51b3008 	ldr	r3, [fp, #-8]
  11fa80:	e3a02006 	mov	r2, #6
  11fa84:	e1c324b2 	strh	r2, [r3, #66]	; 0x42
    pcb->rtime = -1;
  11fa88:	e51b3008 	ldr	r3, [fp, #-8]
  11fa8c:	e3e02000 	mvn	r2, #0
  11fa90:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
    pcb->cwnd = 1;
  11fa94:	e51b3008 	ldr	r3, [fp, #-8]
  11fa98:	e3a02001 	mov	r2, #1
  11fa9c:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
    pcb->tmr = tcp_ticks;
  11faa0:	e30c3c24 	movw	r3, #52260	; 0xcc24
  11faa4:	e3403015 	movt	r3, #21
  11faa8:	e5932000 	ldr	r2, [r3]
  11faac:	e51b3008 	ldr	r3, [fp, #-8]
  11fab0:	e5832024 	str	r2, [r3, #36]	; 0x24
    pcb->last_timer = tcp_timer_ctr;
  11fab4:	e30e322d 	movw	r3, #57901	; 0xe22d
  11fab8:	e3403014 	movt	r3, #20
  11fabc:	e5d32000 	ldrb	r2, [r3]
  11fac0:	e51b3008 	ldr	r3, [fp, #-8]
  11fac4:	e5c32021 	strb	r2, [r3, #33]	; 0x21
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
  11fac8:	e51b3008 	ldr	r3, [fp, #-8]
  11facc:	e3a02a02 	mov	r2, #8192	; 0x2000
  11fad0:	e1c324be 	strh	r2, [r3, #78]	; 0x4e

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
  11fad4:	e51b2008 	ldr	r2, [fp, #-8]
  11fad8:	e30f3574 	movw	r3, #62836	; 0xf574
  11fadc:	e3403011 	movt	r3, #17
  11fae0:	e5823084 	str	r3, [r2, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
  11fae4:	e51b2008 	ldr	r2, [fp, #-8]
  11fae8:	e3a03cdd 	mov	r3, #56576	; 0xdd00
  11faec:	e340306d 	movt	r3, #109	; 0x6d
  11faf0:	e5823094 	str	r3, [r2, #148]	; 0x94

#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
  11faf4:	e51b2008 	ldr	r2, [fp, #-8]
  11faf8:	e30234f8 	movw	r3, #9464	; 0x24f8
  11fafc:	e3403001 	movt	r3, #1
  11fb00:	e5823098 	str	r3, [r2, #152]	; 0x98
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
  11fb04:	e51b3008 	ldr	r3, [fp, #-8]
  11fb08:	e3a02009 	mov	r2, #9
  11fb0c:	e583209c 	str	r2, [r3, #156]	; 0x9c
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
  11fb10:	e51b3008 	ldr	r3, [fp, #-8]
}
  11fb14:	e1a00003 	mov	r0, r3
  11fb18:	e24bd004 	sub	sp, fp, #4
  11fb1c:	e8bd8800 	pop	{fp, pc}

0011fb20 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
  11fb20:	e92d4800 	push	{fp, lr}
  11fb24:	e28db004 	add	fp, sp, #4
  return tcp_alloc(TCP_PRIO_NORMAL);
  11fb28:	e3a00040 	mov	r0, #64	; 0x40
  11fb2c:	ebffff56 	bl	11f88c <tcp_alloc>
  11fb30:	e1a03000 	mov	r3, r0
}
  11fb34:	e1a00003 	mov	r0, r3
  11fb38:	e8bd8800 	pop	{fp, pc}

0011fb3c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
  11fb3c:	e92d4800 	push	{fp, lr}
  11fb40:	e28db004 	add	fp, sp, #4
  11fb44:	e24dd010 	sub	sp, sp, #16
  11fb48:	e1a03000 	mov	r3, r0
  11fb4c:	e54b300d 	strb	r3, [fp, #-13]
  struct tcp_pcb * pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
  11fb50:	e3a00040 	mov	r0, #64	; 0x40
  11fb54:	ebffff4c 	bl	11f88c <tcp_alloc>
  11fb58:	e50b0008 	str	r0, [fp, #-8]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
  11fb5c:	e51b3008 	ldr	r3, [fp, #-8]
}
  11fb60:	e1a00003 	mov	r0, r3
  11fb64:	e24bd004 	sub	sp, fp, #4
  11fb68:	e8bd8800 	pop	{fp, pc}

0011fb6c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  11fb6c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11fb70:	e28db000 	add	fp, sp, #0
  11fb74:	e24dd00c 	sub	sp, sp, #12
  11fb78:	e50b0008 	str	r0, [fp, #-8]
  11fb7c:	e50b100c 	str	r1, [fp, #-12]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
  11fb80:	e51b3008 	ldr	r3, [fp, #-8]
  11fb84:	e3530000 	cmp	r3, #0
  11fb88:	0a000002 	beq	11fb98 <tcp_arg+0x2c>
    pcb->callback_arg = arg;
  11fb8c:	e51b3008 	ldr	r3, [fp, #-8]
  11fb90:	e51b200c 	ldr	r2, [fp, #-12]
  11fb94:	e5832010 	str	r2, [r3, #16]
  }
}
  11fb98:	e320f000 	nop	{0}
  11fb9c:	e28bd000 	add	sp, fp, #0
  11fba0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11fba4:	e12fff1e 	bx	lr

0011fba8 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
  11fba8:	e92d4800 	push	{fp, lr}
  11fbac:	e28db004 	add	fp, sp, #4
  11fbb0:	e24dd008 	sub	sp, sp, #8
  11fbb4:	e50b0008 	str	r0, [fp, #-8]
  11fbb8:	e50b100c 	str	r1, [fp, #-12]
  if (pcb != NULL) {
  11fbbc:	e51b3008 	ldr	r3, [fp, #-8]
  11fbc0:	e3530000 	cmp	r3, #0
  11fbc4:	0a00000d 	beq	11fc00 <tcp_recv+0x58>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
  11fbc8:	e51b3008 	ldr	r3, [fp, #-8]
  11fbcc:	e5933014 	ldr	r3, [r3, #20]
  11fbd0:	e3530001 	cmp	r3, #1
  11fbd4:	1a000006 	bne	11fbf4 <tcp_recv+0x4c>
  11fbd8:	e30801c0 	movw	r0, #33216	; 0x81c0
  11fbdc:	e3400014 	movt	r0, #20
  11fbe0:	ebff8d4b 	bl	103114 <rt_kprintf>
  11fbe4:	e30016b6 	movw	r1, #1718	; 0x6b6
  11fbe8:	e3070ed8 	movw	r0, #32472	; 0x7ed8
  11fbec:	e3400014 	movt	r0, #20
  11fbf0:	ebffad3e 	bl	10b0f0 <sys_arch_assert>
    pcb->recv = recv;
  11fbf4:	e51b3008 	ldr	r3, [fp, #-8]
  11fbf8:	e51b200c 	ldr	r2, [fp, #-12]
  11fbfc:	e5832084 	str	r2, [r3, #132]	; 0x84
  }
}
  11fc00:	e320f000 	nop	{0}
  11fc04:	e24bd004 	sub	sp, fp, #4
  11fc08:	e8bd8800 	pop	{fp, pc}

0011fc0c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
  11fc0c:	e92d4800 	push	{fp, lr}
  11fc10:	e28db004 	add	fp, sp, #4
  11fc14:	e24dd008 	sub	sp, sp, #8
  11fc18:	e50b0008 	str	r0, [fp, #-8]
  11fc1c:	e50b100c 	str	r1, [fp, #-12]
  if (pcb != NULL) {
  11fc20:	e51b3008 	ldr	r3, [fp, #-8]
  11fc24:	e3530000 	cmp	r3, #0
  11fc28:	0a00000d 	beq	11fc64 <tcp_sent+0x58>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
  11fc2c:	e51b3008 	ldr	r3, [fp, #-8]
  11fc30:	e5933014 	ldr	r3, [r3, #20]
  11fc34:	e3530001 	cmp	r3, #1
  11fc38:	1a000006 	bne	11fc58 <tcp_sent+0x4c>
  11fc3c:	e30801e8 	movw	r0, #33256	; 0x81e8
  11fc40:	e3400014 	movt	r0, #20
  11fc44:	ebff8d32 	bl	103114 <rt_kprintf>
  11fc48:	e30016c7 	movw	r1, #1735	; 0x6c7
  11fc4c:	e3070ed8 	movw	r0, #32472	; 0x7ed8
  11fc50:	e3400014 	movt	r0, #20
  11fc54:	ebffad25 	bl	10b0f0 <sys_arch_assert>
    pcb->sent = sent;
  11fc58:	e51b3008 	ldr	r3, [fp, #-8]
  11fc5c:	e51b200c 	ldr	r2, [fp, #-12]
  11fc60:	e5832080 	str	r2, [r3, #128]	; 0x80
  }
}
  11fc64:	e320f000 	nop	{0}
  11fc68:	e24bd004 	sub	sp, fp, #4
  11fc6c:	e8bd8800 	pop	{fp, pc}

0011fc70 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
  11fc70:	e92d4800 	push	{fp, lr}
  11fc74:	e28db004 	add	fp, sp, #4
  11fc78:	e24dd008 	sub	sp, sp, #8
  11fc7c:	e50b0008 	str	r0, [fp, #-8]
  11fc80:	e50b100c 	str	r1, [fp, #-12]
  if (pcb != NULL) {
  11fc84:	e51b3008 	ldr	r3, [fp, #-8]
  11fc88:	e3530000 	cmp	r3, #0
  11fc8c:	0a00000d 	beq	11fcc8 <tcp_err+0x58>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
  11fc90:	e51b3008 	ldr	r3, [fp, #-8]
  11fc94:	e5933014 	ldr	r3, [r3, #20]
  11fc98:	e3530001 	cmp	r3, #1
  11fc9c:	1a000006 	bne	11fcbc <tcp_err+0x4c>
  11fca0:	e3080210 	movw	r0, #33296	; 0x8210
  11fca4:	e3400014 	movt	r0, #20
  11fca8:	ebff8d19 	bl	103114 <rt_kprintf>
  11fcac:	e30016db 	movw	r1, #1755	; 0x6db
  11fcb0:	e3070ed8 	movw	r0, #32472	; 0x7ed8
  11fcb4:	e3400014 	movt	r0, #20
  11fcb8:	ebffad0c 	bl	10b0f0 <sys_arch_assert>
    pcb->errf = err;
  11fcbc:	e51b3008 	ldr	r3, [fp, #-8]
  11fcc0:	e51b200c 	ldr	r2, [fp, #-12]
  11fcc4:	e5832090 	str	r2, [r3, #144]	; 0x90
  }
}
  11fcc8:	e320f000 	nop	{0}
  11fccc:	e24bd004 	sub	sp, fp, #4
  11fcd0:	e8bd8800 	pop	{fp, pc}

0011fcd4 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  11fcd4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11fcd8:	e28db000 	add	fp, sp, #0
  11fcdc:	e24dd014 	sub	sp, sp, #20
  11fce0:	e50b0010 	str	r0, [fp, #-16]
  11fce4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
  11fce8:	e51b3010 	ldr	r3, [fp, #-16]
  11fcec:	e3530000 	cmp	r3, #0
  11fcf0:	0a000008 	beq	11fd18 <tcp_accept+0x44>
  11fcf4:	e51b3010 	ldr	r3, [fp, #-16]
  11fcf8:	e5933014 	ldr	r3, [r3, #20]
  11fcfc:	e3530001 	cmp	r3, #1
  11fd00:	1a000004 	bne	11fd18 <tcp_accept+0x44>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
  11fd04:	e51b3010 	ldr	r3, [fp, #-16]
  11fd08:	e50b3008 	str	r3, [fp, #-8]
    lpcb->accept = accept;
  11fd0c:	e51b3008 	ldr	r3, [fp, #-8]
  11fd10:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11fd14:	e583201c 	str	r2, [r3, #28]
  }
}
  11fd18:	e320f000 	nop	{0}
  11fd1c:	e28bd000 	add	sp, fp, #0
  11fd20:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11fd24:	e12fff1e 	bx	lr

0011fd28 <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
  11fd28:	e92d4800 	push	{fp, lr}
  11fd2c:	e28db004 	add	fp, sp, #4
  11fd30:	e24dd010 	sub	sp, sp, #16
  11fd34:	e50b0008 	str	r0, [fp, #-8]
  11fd38:	e50b100c 	str	r1, [fp, #-12]
  11fd3c:	e1a03002 	mov	r3, r2
  11fd40:	e54b300d 	strb	r3, [fp, #-13]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
  11fd44:	e51b3008 	ldr	r3, [fp, #-8]
  11fd48:	e5933014 	ldr	r3, [r3, #20]
  11fd4c:	e3530001 	cmp	r3, #1
  11fd50:	1a000006 	bne	11fd70 <tcp_poll+0x48>
  11fd54:	e3080238 	movw	r0, #33336	; 0x8238
  11fd58:	e3400014 	movt	r0, #20
  11fd5c:	ebff8cec 	bl	103114 <rt_kprintf>
  11fd60:	e30016fe 	movw	r1, #1790	; 0x6fe
  11fd64:	e3070ed8 	movw	r0, #32472	; 0x7ed8
  11fd68:	e3400014 	movt	r0, #20
  11fd6c:	ebffacdf 	bl	10b0f0 <sys_arch_assert>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
  11fd70:	e51b3008 	ldr	r3, [fp, #-8]
  11fd74:	e51b200c 	ldr	r2, [fp, #-12]
  11fd78:	e583208c 	str	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
  11fd7c:	e51b3008 	ldr	r3, [fp, #-8]
  11fd80:	e55b200d 	ldrb	r2, [fp, #-13]
  11fd84:	e5c32020 	strb	r2, [r3, #32]
}
  11fd88:	e320f000 	nop	{0}
  11fd8c:	e24bd004 	sub	sp, fp, #4
  11fd90:	e8bd8800 	pop	{fp, pc}

0011fd94 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
  11fd94:	e92d4800 	push	{fp, lr}
  11fd98:	e28db004 	add	fp, sp, #4
  11fd9c:	e24dd008 	sub	sp, sp, #8
  11fda0:	e50b0008 	str	r0, [fp, #-8]
  if (pcb->state != CLOSED &&
  11fda4:	e51b3008 	ldr	r3, [fp, #-8]
  11fda8:	e5933014 	ldr	r3, [r3, #20]
  11fdac:	e3530000 	cmp	r3, #0
  11fdb0:	0a00002e 	beq	11fe70 <tcp_pcb_purge+0xdc>
     pcb->state != TIME_WAIT &&
  11fdb4:	e51b3008 	ldr	r3, [fp, #-8]
  11fdb8:	e5933014 	ldr	r3, [r3, #20]
  if (pcb->state != CLOSED &&
  11fdbc:	e353000a 	cmp	r3, #10
  11fdc0:	0a00002a 	beq	11fe70 <tcp_pcb_purge+0xdc>
     pcb->state != LISTEN) {
  11fdc4:	e51b3008 	ldr	r3, [fp, #-8]
  11fdc8:	e5933014 	ldr	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
  11fdcc:	e3530001 	cmp	r3, #1
  11fdd0:	0a000026 	beq	11fe70 <tcp_pcb_purge+0xdc>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
  11fdd4:	e51b3008 	ldr	r3, [fp, #-8]
  11fdd8:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11fddc:	e3530000 	cmp	r3, #0
  11fde0:	0a000006 	beq	11fe00 <tcp_pcb_purge+0x6c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
  11fde4:	e51b3008 	ldr	r3, [fp, #-8]
  11fde8:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11fdec:	e1a00003 	mov	r0, r3
  11fdf0:	ebffec2e 	bl	11aeb0 <pbuf_free>
      pcb->refused_data = NULL;
  11fdf4:	e51b3008 	ldr	r3, [fp, #-8]
  11fdf8:	e3a02000 	mov	r2, #0
  11fdfc:	e5832078 	str	r2, [r3, #120]	; 0x78
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
  11fe00:	e51b3008 	ldr	r3, [fp, #-8]
  11fe04:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  11fe08:	e1a00003 	mov	r0, r3
  11fe0c:	ebfffd89 	bl	11f438 <tcp_segs_free>
    pcb->ooseq = NULL;
  11fe10:	e51b3008 	ldr	r3, [fp, #-8]
  11fe14:	e3a02000 	mov	r2, #0
  11fe18:	e5832074 	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
  11fe1c:	e51b3008 	ldr	r3, [fp, #-8]
  11fe20:	e3e02000 	mvn	r2, #0
  11fe24:	e1c323b4 	strh	r2, [r3, #52]	; 0x34

    tcp_segs_free(pcb->unsent);
  11fe28:	e51b3008 	ldr	r3, [fp, #-8]
  11fe2c:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  11fe30:	e1a00003 	mov	r0, r3
  11fe34:	ebfffd7f 	bl	11f438 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
  11fe38:	e51b3008 	ldr	r3, [fp, #-8]
  11fe3c:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  11fe40:	e1a00003 	mov	r0, r3
  11fe44:	ebfffd7b 	bl	11f438 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
  11fe48:	e51b3008 	ldr	r3, [fp, #-8]
  11fe4c:	e3a02000 	mov	r2, #0
  11fe50:	e583206c 	str	r2, [r3, #108]	; 0x6c
  11fe54:	e51b3008 	ldr	r3, [fp, #-8]
  11fe58:	e593206c 	ldr	r2, [r3, #108]	; 0x6c
  11fe5c:	e51b3008 	ldr	r3, [fp, #-8]
  11fe60:	e5832070 	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
  11fe64:	e51b3008 	ldr	r3, [fp, #-8]
  11fe68:	e3a02000 	mov	r2, #0
  11fe6c:	e1c326b8 	strh	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
  11fe70:	e320f000 	nop	{0}
  11fe74:	e24bd004 	sub	sp, fp, #4
  11fe78:	e8bd8800 	pop	{fp, pc}

0011fe7c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
  11fe7c:	e92d4800 	push	{fp, lr}
  11fe80:	e28db004 	add	fp, sp, #4
  11fe84:	e24dd010 	sub	sp, sp, #16
  11fe88:	e50b0010 	str	r0, [fp, #-16]
  11fe8c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  TCP_RMV(pcblist, pcb);
  11fe90:	e51b3010 	ldr	r3, [fp, #-16]
  11fe94:	e5933000 	ldr	r3, [r3]
  11fe98:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11fe9c:	e1520003 	cmp	r2, r3
  11fea0:	1a000005 	bne	11febc <tcp_pcb_remove+0x40>
  11fea4:	e51b3010 	ldr	r3, [fp, #-16]
  11fea8:	e5933000 	ldr	r3, [r3]
  11feac:	e593200c 	ldr	r2, [r3, #12]
  11feb0:	e51b3010 	ldr	r3, [fp, #-16]
  11feb4:	e5832000 	str	r2, [r3]
  11feb8:	ea000013 	b	11ff0c <tcp_pcb_remove+0x90>
  11febc:	e51b3010 	ldr	r3, [fp, #-16]
  11fec0:	e5933000 	ldr	r3, [r3]
  11fec4:	e50b3008 	str	r3, [fp, #-8]
  11fec8:	ea00000c 	b	11ff00 <tcp_pcb_remove+0x84>
  11fecc:	e51b3008 	ldr	r3, [fp, #-8]
  11fed0:	e593300c 	ldr	r3, [r3, #12]
  11fed4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11fed8:	e1520003 	cmp	r2, r3
  11fedc:	1a000004 	bne	11fef4 <tcp_pcb_remove+0x78>
  11fee0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11fee4:	e593200c 	ldr	r2, [r3, #12]
  11fee8:	e51b3008 	ldr	r3, [fp, #-8]
  11feec:	e583200c 	str	r2, [r3, #12]
  11fef0:	ea000005 	b	11ff0c <tcp_pcb_remove+0x90>
  11fef4:	e51b3008 	ldr	r3, [fp, #-8]
  11fef8:	e593300c 	ldr	r3, [r3, #12]
  11fefc:	e50b3008 	str	r3, [fp, #-8]
  11ff00:	e51b3008 	ldr	r3, [fp, #-8]
  11ff04:	e3530000 	cmp	r3, #0
  11ff08:	1affffef 	bne	11fecc <tcp_pcb_remove+0x50>
  11ff0c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11ff10:	e3a02000 	mov	r2, #0
  11ff14:	e583200c 	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
  11ff18:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  11ff1c:	ebffff9c 	bl	11fd94 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
  11ff20:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11ff24:	e5933014 	ldr	r3, [r3, #20]
  11ff28:	e353000a 	cmp	r3, #10
  11ff2c:	0a000010 	beq	11ff74 <tcp_pcb_remove+0xf8>
     pcb->state != LISTEN &&
  11ff30:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11ff34:	e5933014 	ldr	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
  11ff38:	e3530001 	cmp	r3, #1
  11ff3c:	0a00000c 	beq	11ff74 <tcp_pcb_remove+0xf8>
     pcb->flags & TF_ACK_DELAY) {
  11ff40:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11ff44:	e5d3301e 	ldrb	r3, [r3, #30]
  11ff48:	e2033001 	and	r3, r3, #1
     pcb->state != LISTEN &&
  11ff4c:	e3530000 	cmp	r3, #0
  11ff50:	0a000007 	beq	11ff74 <tcp_pcb_remove+0xf8>
    pcb->flags |= TF_ACK_NOW;
  11ff54:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11ff58:	e5d3301e 	ldrb	r3, [r3, #30]
  11ff5c:	e3833002 	orr	r3, r3, #2
  11ff60:	e6ef2073 	uxtb	r2, r3
  11ff64:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11ff68:	e5c3201e 	strb	r2, [r3, #30]
    tcp_output(pcb);
  11ff6c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  11ff70:	eb0017f9 	bl	125f5c <tcp_output>
  }

  if (pcb->state != LISTEN) {
  11ff74:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11ff78:	e5933014 	ldr	r3, [r3, #20]
  11ff7c:	e3530001 	cmp	r3, #1
  11ff80:	0a000020 	beq	120008 <tcp_pcb_remove+0x18c>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
  11ff84:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11ff88:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  11ff8c:	e3530000 	cmp	r3, #0
  11ff90:	0a000006 	beq	11ffb0 <tcp_pcb_remove+0x134>
  11ff94:	e3080258 	movw	r0, #33368	; 0x8258
  11ff98:	e3400014 	movt	r0, #20
  11ff9c:	ebff8c5c 	bl	103114 <rt_kprintf>
  11ffa0:	e300174e 	movw	r1, #1870	; 0x74e
  11ffa4:	e3070ed8 	movw	r0, #32472	; 0x7ed8
  11ffa8:	e3400014 	movt	r0, #20
  11ffac:	ebffac4f 	bl	10b0f0 <sys_arch_assert>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
  11ffb0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11ffb4:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  11ffb8:	e3530000 	cmp	r3, #0
  11ffbc:	0a000006 	beq	11ffdc <tcp_pcb_remove+0x160>
  11ffc0:	e3080270 	movw	r0, #33392	; 0x8270
  11ffc4:	e3400014 	movt	r0, #20
  11ffc8:	ebff8c51 	bl	103114 <rt_kprintf>
  11ffcc:	e300174f 	movw	r1, #1871	; 0x74f
  11ffd0:	e3070ed8 	movw	r0, #32472	; 0x7ed8
  11ffd4:	e3400014 	movt	r0, #20
  11ffd8:	ebffac44 	bl	10b0f0 <sys_arch_assert>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
  11ffdc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11ffe0:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  11ffe4:	e3530000 	cmp	r3, #0
  11ffe8:	0a000006 	beq	120008 <tcp_pcb_remove+0x18c>
  11ffec:	e308028c 	movw	r0, #33420	; 0x828c
  11fff0:	e3400014 	movt	r0, #20
  11fff4:	ebff8c46 	bl	103114 <rt_kprintf>
  11fff8:	e3001751 	movw	r1, #1873	; 0x751
  11fffc:	e3070ed8 	movw	r0, #32472	; 0x7ed8
  120000:	e3400014 	movt	r0, #20
  120004:	ebffac39 	bl	10b0f0 <sys_arch_assert>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
  120008:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12000c:	e3a02000 	mov	r2, #0
  120010:	e5832014 	str	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
  120014:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  120018:	e3a02000 	mov	r2, #0
  12001c:	e1c321ba 	strh	r2, [r3, #26]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
  120020:	e320f000 	nop	{0}
  120024:	e24bd004 	sub	sp, fp, #4
  120028:	e8bd8800 	pop	{fp, pc}

0012002c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
  12002c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  120030:	e28db000 	add	fp, sp, #0
  120034:	e24dd00c 	sub	sp, sp, #12
  120038:	e50b0008 	str	r0, [fp, #-8]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
  12003c:	e30d3034 	movw	r3, #53300	; 0xd034
  120040:	e3403014 	movt	r3, #20
  120044:	e5932000 	ldr	r2, [r3]
  120048:	e30c3c24 	movw	r3, #52260	; 0xcc24
  12004c:	e3403015 	movt	r3, #21
  120050:	e5933000 	ldr	r3, [r3]
  120054:	e0822003 	add	r2, r2, r3
  120058:	e30d3034 	movw	r3, #53300	; 0xd034
  12005c:	e3403014 	movt	r3, #20
  120060:	e5832000 	str	r2, [r3]
  return iss;
  120064:	e30d3034 	movw	r3, #53300	; 0xd034
  120068:	e3403014 	movt	r3, #20
  12006c:	e5933000 	ldr	r3, [r3]
#endif /* LWIP_HOOK_TCP_ISN */
}
  120070:	e1a00003 	mov	r0, r3
  120074:	e28bd000 	add	sp, fp, #0
  120078:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  12007c:	e12fff1e 	bx	lr

00120080 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
  120080:	e92d4800 	push	{fp, lr}
  120084:	e28db004 	add	fp, sp, #4
  120088:	e24dd010 	sub	sp, sp, #16
  12008c:	e1a03000 	mov	r3, r0
  120090:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  120094:	e14b30be 	strh	r3, [fp, #-14]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
  120098:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  12009c:	eb00443c 	bl	131194 <ip4_route>
  1200a0:	e50b0008 	str	r0, [fp, #-8]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
  1200a4:	e51b3008 	ldr	r3, [fp, #-8]
  1200a8:	e3530000 	cmp	r3, #0
  1200ac:	1a000001 	bne	1200b8 <tcp_eff_send_mss_impl+0x38>
      return sendmss;
  1200b0:	e15b30be 	ldrh	r3, [fp, #-14]
  1200b4:	ea00000f 	b	1200f8 <tcp_eff_send_mss_impl+0x78>
    }
    mtu = outif->mtu;
  1200b8:	e51b3008 	ldr	r3, [fp, #-8]
  1200bc:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  1200c0:	e14b30ba 	strh	r3, [fp, #-10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
  1200c4:	e15b30fa 	ldrsh	r3, [fp, #-10]
  1200c8:	e3530000 	cmp	r3, #0
  1200cc:	0a000008 	beq	1200f4 <tcp_eff_send_mss_impl+0x74>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
  1200d0:	e15b30ba 	ldrh	r3, [fp, #-10]
  1200d4:	e2433028 	sub	r3, r3, #40	; 0x28
  1200d8:	e14b30bc 	strh	r3, [fp, #-12]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
  1200dc:	e15b20bc 	ldrh	r2, [fp, #-12]
  1200e0:	e15b30be 	ldrh	r3, [fp, #-14]
  1200e4:	e1520003 	cmp	r2, r3
  1200e8:	31a03002 	movcc	r3, r2
  1200ec:	21a03003 	movcs	r3, r3
  1200f0:	e14b30be 	strh	r3, [fp, #-14]
  }
  return sendmss;
  1200f4:	e15b30be 	ldrh	r3, [fp, #-14]
}
  1200f8:	e1a00003 	mov	r0, r3
  1200fc:	e24bd004 	sub	sp, fp, #4
  120100:	e8bd8800 	pop	{fp, pc}

00120104 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
  120104:	e92d4800 	push	{fp, lr}
  120108:	e28db004 	add	fp, sp, #4
  12010c:	e24dd010 	sub	sp, sp, #16
  120110:	e50b0010 	str	r0, [fp, #-16]
  120114:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct tcp_pcb *pcb;
  pcb = pcb_list;
  120118:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12011c:	e50b3008 	str	r3, [fp, #-8]
  while (pcb != NULL) {
  120120:	ea000010 	b	120168 <tcp_netif_ip_addr_changed_pcblist+0x64>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
  120124:	e51b3008 	ldr	r3, [fp, #-8]
  120128:	e5932000 	ldr	r2, [r3]
  12012c:	e51b3010 	ldr	r3, [fp, #-16]
  120130:	e5933000 	ldr	r3, [r3]
  120134:	e1520003 	cmp	r2, r3
  120138:	1a000007 	bne	12015c <tcp_netif_ip_addr_changed_pcblist+0x58>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
  12013c:	e51b3008 	ldr	r3, [fp, #-8]
  120140:	e593300c 	ldr	r3, [r3, #12]
  120144:	e50b300c 	str	r3, [fp, #-12]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
  120148:	e51b0008 	ldr	r0, [fp, #-8]
  12014c:	ebfff630 	bl	11da14 <tcp_abort>
      pcb = next;
  120150:	e51b300c 	ldr	r3, [fp, #-12]
  120154:	e50b3008 	str	r3, [fp, #-8]
  120158:	ea000002 	b	120168 <tcp_netif_ip_addr_changed_pcblist+0x64>
    } else {
      pcb = pcb->next;
  12015c:	e51b3008 	ldr	r3, [fp, #-8]
  120160:	e593300c 	ldr	r3, [r3, #12]
  120164:	e50b3008 	str	r3, [fp, #-8]
  while (pcb != NULL) {
  120168:	e51b3008 	ldr	r3, [fp, #-8]
  12016c:	e3530000 	cmp	r3, #0
  120170:	1affffeb 	bne	120124 <tcp_netif_ip_addr_changed_pcblist+0x20>
    }
  }
}
  120174:	e320f000 	nop	{0}
  120178:	e24bd004 	sub	sp, fp, #4
  12017c:	e8bd8800 	pop	{fp, pc}

00120180 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
  120180:	e92d4800 	push	{fp, lr}
  120184:	e28db004 	add	fp, sp, #4
  120188:	e24dd010 	sub	sp, sp, #16
  12018c:	e50b0010 	str	r0, [fp, #-16]
  120190:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
  120194:	e51b3010 	ldr	r3, [fp, #-16]
  120198:	e3530000 	cmp	r3, #0
  12019c:	0a00002d 	beq	120258 <tcp_netif_ip_addr_changed+0xd8>
  1201a0:	e51b3010 	ldr	r3, [fp, #-16]
  1201a4:	e5933000 	ldr	r3, [r3]
  1201a8:	e3530000 	cmp	r3, #0
  1201ac:	0a000029 	beq	120258 <tcp_netif_ip_addr_changed+0xd8>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
  1201b0:	e30c3c20 	movw	r3, #52256	; 0xcc20
  1201b4:	e3403015 	movt	r3, #21
  1201b8:	e5933000 	ldr	r3, [r3]
  1201bc:	e1a01003 	mov	r1, r3
  1201c0:	e51b0010 	ldr	r0, [fp, #-16]
  1201c4:	ebffffce 	bl	120104 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
  1201c8:	e30c3c2c 	movw	r3, #52268	; 0xcc2c
  1201cc:	e3403015 	movt	r3, #21
  1201d0:	e5933000 	ldr	r3, [r3]
  1201d4:	e1a01003 	mov	r1, r3
  1201d8:	e51b0010 	ldr	r0, [fp, #-16]
  1201dc:	ebffffc8 	bl	120104 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
  1201e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1201e4:	e3530000 	cmp	r3, #0
  1201e8:	0a00001a 	beq	120258 <tcp_netif_ip_addr_changed+0xd8>
  1201ec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1201f0:	e5933000 	ldr	r3, [r3]
  1201f4:	e3530000 	cmp	r3, #0
  1201f8:	0a000016 	beq	120258 <tcp_netif_ip_addr_changed+0xd8>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
  1201fc:	e30c3c28 	movw	r3, #52264	; 0xcc28
  120200:	e3403015 	movt	r3, #21
  120204:	e5933000 	ldr	r3, [r3]
  120208:	e50b3008 	str	r3, [fp, #-8]
  12020c:	ea00000e 	b	12024c <tcp_netif_ip_addr_changed+0xcc>
        next = lpcb->next;
  120210:	e51b3008 	ldr	r3, [fp, #-8]
  120214:	e593300c 	ldr	r3, [r3, #12]
  120218:	e50b300c 	str	r3, [fp, #-12]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
  12021c:	e51b3008 	ldr	r3, [fp, #-8]
  120220:	e5932000 	ldr	r2, [r3]
  120224:	e51b3010 	ldr	r3, [fp, #-16]
  120228:	e5933000 	ldr	r3, [r3]
  12022c:	e1520003 	cmp	r2, r3
  120230:	1a000003 	bne	120244 <tcp_netif_ip_addr_changed+0xc4>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
  120234:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  120238:	e5932000 	ldr	r2, [r3]
  12023c:	e51b3008 	ldr	r3, [fp, #-8]
  120240:	e5832000 	str	r2, [r3]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
  120244:	e51b300c 	ldr	r3, [fp, #-12]
  120248:	e50b3008 	str	r3, [fp, #-8]
  12024c:	e51b3008 	ldr	r3, [fp, #-8]
  120250:	e3530000 	cmp	r3, #0
  120254:	1affffed 	bne	120210 <tcp_netif_ip_addr_changed+0x90>
        }
      }
    }
  }
}
  120258:	e320f000 	nop	{0}
  12025c:	e24bd004 	sub	sp, fp, #4
  120260:	e8bd8800 	pop	{fp, pc}

00120264 <tcp_debug_state_str>:

const char*
tcp_debug_state_str(enum tcp_state s)
{
  120264:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  120268:	e28db000 	add	fp, sp, #0
  12026c:	e24dd00c 	sub	sp, sp, #12
  120270:	e50b0008 	str	r0, [fp, #-8]
  return tcp_state_str[s];
  120274:	e3073e78 	movw	r3, #32376	; 0x7e78
  120278:	e3403014 	movt	r3, #20
  12027c:	e51b2008 	ldr	r2, [fp, #-8]
  120280:	e7933102 	ldr	r3, [r3, r2, lsl #2]
}
  120284:	e1a00003 	mov	r0, r3
  120288:	e28bd000 	add	sp, fp, #0
  12028c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  120290:	e12fff1e 	bx	lr

00120294 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
  120294:	e92d4810 	push	{r4, fp, lr}
  120298:	e28db008 	add	fp, sp, #8
  12029c:	e24dd034 	sub	sp, sp, #52	; 0x34
  1202a0:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  1202a4:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  struct tcp_pcb *pcb, *prev;
  struct tcp_pcb_listen *lpcb;
#if SO_REUSE
  struct tcp_pcb *lpcb_prev = NULL;
  1202a8:	e3a03000 	mov	r3, #0
  1202ac:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  struct tcp_pcb_listen *lpcb_any = NULL;
  1202b0:	e3a03000 	mov	r3, #0
  1202b4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0

  LWIP_UNUSED_ARG(inp);

  PERF_START;

  TCP_STATS_INC(tcp.recv);
  1202b8:	e30c3a30 	movw	r3, #51760	; 0xca30
  1202bc:	e3403015 	movt	r3, #21
  1202c0:	e1d33abe 	ldrh	r3, [r3, #174]	; 0xae
  1202c4:	e2833001 	add	r3, r3, #1
  1202c8:	e6ff2073 	uxth	r2, r3
  1202cc:	e30c3a30 	movw	r3, #51760	; 0xca30
  1202d0:	e3403015 	movt	r3, #21
  1202d4:	e1c32abe 	strh	r2, [r3, #174]	; 0xae
  MIB2_STATS_INC(mib2.tcpinsegs);
  1202d8:	e30c3a30 	movw	r3, #51760	; 0xca30
  1202dc:	e3403015 	movt	r3, #21
  1202e0:	e5933184 	ldr	r3, [r3, #388]	; 0x184
  1202e4:	e2832001 	add	r2, r3, #1
  1202e8:	e30c3a30 	movw	r3, #51760	; 0xca30
  1202ec:	e3403015 	movt	r3, #21
  1202f0:	e5832184 	str	r2, [r3, #388]	; 0x184

  tcphdr = (struct tcp_hdr *)p->payload;
  1202f4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1202f8:	e5932004 	ldr	r2, [r3, #4]
  1202fc:	e30e3240 	movw	r3, #57920	; 0xe240
  120300:	e3403014 	movt	r3, #20
  120304:	e5832000 	str	r2, [r3]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
  120308:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12030c:	e1d330ba 	ldrh	r3, [r3, #10]
  120310:	e3530013 	cmp	r3, #19
  120314:	8a000008 	bhi	12033c <tcp_input+0xa8>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet (%"U16_F" bytes) discarded\n", p->tot_len));
    TCP_STATS_INC(tcp.lenerr);
  120318:	e30c3a30 	movw	r3, #51760	; 0xca30
  12031c:	e3403015 	movt	r3, #21
  120320:	e1d33bb6 	ldrh	r3, [r3, #182]	; 0xb6
  120324:	e2833001 	add	r3, r3, #1
  120328:	e6ff2073 	uxth	r2, r3
  12032c:	e30c3a30 	movw	r3, #51760	; 0xca30
  120330:	e3403015 	movt	r3, #21
  120334:	e1c32bb6 	strh	r2, [r3, #182]	; 0xb6
    goto dropped;
  120338:	ea0003d1 	b	121284 <tcp_input+0xff0>
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
  12033c:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  120340:	e3403014 	movt	r3, #20
  120344:	e5932014 	ldr	r2, [r3, #20]
  120348:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  12034c:	e3403014 	movt	r3, #20
  120350:	e5933000 	ldr	r3, [r3]
  120354:	e1a01003 	mov	r1, r3
  120358:	e1a00002 	mov	r0, r2
  12035c:	eb00486b 	bl	132510 <ip4_addr_isbroadcast_u32>
  120360:	e1a03000 	mov	r3, r0
  120364:	e3530000 	cmp	r3, #0
  120368:	1a000005 	bne	120384 <tcp_input+0xf0>
      ip_addr_ismulticast(ip_current_dest_addr())) {
  12036c:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  120370:	e3403014 	movt	r3, #20
  120374:	e5933014 	ldr	r3, [r3, #20]
  120378:	e20330f0 	and	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
  12037c:	e35300e0 	cmp	r3, #224	; 0xe0
  120380:	1a000008 	bne	1203a8 <tcp_input+0x114>
    TCP_STATS_INC(tcp.proterr);
  120384:	e30c3a30 	movw	r3, #51760	; 0xca30
  120388:	e3403015 	movt	r3, #21
  12038c:	e1d33bbc 	ldrh	r3, [r3, #188]	; 0xbc
  120390:	e2833001 	add	r3, r3, #1
  120394:	e6ff2073 	uxth	r2, r3
  120398:	e30c3a30 	movw	r3, #51760	; 0xca30
  12039c:	e3403015 	movt	r3, #21
  1203a0:	e1c32bbc 	strh	r2, [r3, #188]	; 0xbc
    goto dropped;
  1203a4:	ea0003b6 	b	121284 <tcp_input+0xff0>
  }

#if CHECKSUM_CHECK_TCP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_TCP) {
    /* Verify TCP checksum. */
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  1203a8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1203ac:	e1d320b8 	ldrh	r2, [r3, #8]
  1203b0:	e59f3f20 	ldr	r3, [pc, #3872]	; 1212d8 <tcp_input+0x1044>
  1203b4:	e58d3000 	str	r3, [sp]
  1203b8:	e59f3f1c 	ldr	r3, [pc, #3868]	; 1212dc <tcp_input+0x1048>
  1203bc:	e3a01006 	mov	r1, #6
  1203c0:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  1203c4:	ebffe0a1 	bl	118650 <ip_chksum_pseudo>
  1203c8:	e1a03000 	mov	r3, r0
  1203cc:	e14b32b4 	strh	r3, [fp, #-36]	; 0xffffffdc
                               ip_current_src_addr(), ip_current_dest_addr());
    if (chksum != 0) {
  1203d0:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  1203d4:	e3530000 	cmp	r3, #0
  1203d8:	0a000008 	beq	120400 <tcp_input+0x16c>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packet discarded due to failing checksum 0x%04"X16_F"\n",
          chksum));
      tcp_debug_print(tcphdr);
      TCP_STATS_INC(tcp.chkerr);
  1203dc:	e30c3a30 	movw	r3, #51760	; 0xca30
  1203e0:	e3403015 	movt	r3, #21
  1203e4:	e1d33bb4 	ldrh	r3, [r3, #180]	; 0xb4
  1203e8:	e2833001 	add	r3, r3, #1
  1203ec:	e6ff2073 	uxth	r2, r3
  1203f0:	e30c3a30 	movw	r3, #51760	; 0xca30
  1203f4:	e3403015 	movt	r3, #21
  1203f8:	e1c32bb4 	strh	r2, [r3, #180]	; 0xb4
      goto dropped;
  1203fc:	ea0003a0 	b	121284 <tcp_input+0xff0>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
  120400:	e30e3240 	movw	r3, #57920	; 0xe240
  120404:	e3403014 	movt	r3, #20
  120408:	e5933000 	ldr	r3, [r3]
  12040c:	e1d330bc 	ldrh	r3, [r3, #12]
  120410:	e6ff3073 	uxth	r3, r3
  120414:	e1a00003 	mov	r0, r3
  120418:	ebffd86d 	bl	1165d4 <lwip_htons>
  12041c:	e1a03000 	mov	r3, r0
  120420:	e1a03623 	lsr	r3, r3, #12
  120424:	e6ff3073 	uxth	r3, r3
  120428:	e6ef3073 	uxtb	r3, r3
  12042c:	e1a03103 	lsl	r3, r3, #2
  120430:	e54b3025 	strb	r3, [fp, #-37]	; 0xffffffdb
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
  120434:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  120438:	e3530013 	cmp	r3, #19
  12043c:	9a000005 	bls	120458 <tcp_input+0x1c4>
  120440:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  120444:	e6ff2073 	uxth	r2, r3
  120448:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12044c:	e1d330b8 	ldrh	r3, [r3, #8]
  120450:	e1520003 	cmp	r2, r3
  120454:	9a000008 	bls	12047c <tcp_input+0x1e8>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: invalid header length (%"U16_F")\n", (u16_t)hdrlen_bytes));
    TCP_STATS_INC(tcp.lenerr);
  120458:	e30c3a30 	movw	r3, #51760	; 0xca30
  12045c:	e3403015 	movt	r3, #21
  120460:	e1d33bb6 	ldrh	r3, [r3, #182]	; 0xb6
  120464:	e2833001 	add	r3, r3, #1
  120468:	e6ff2073 	uxth	r2, r3
  12046c:	e30c3a30 	movw	r3, #51760	; 0xca30
  120470:	e3403015 	movt	r3, #21
  120474:	e1c32bb6 	strh	r2, [r3, #182]	; 0xb6
    goto dropped;
  120478:	ea000381 	b	121284 <tcp_input+0xff0>
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
  12047c:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  120480:	e6ff3073 	uxth	r3, r3
  120484:	e2433014 	sub	r3, r3, #20
  120488:	e6ff2073 	uxth	r2, r3
  12048c:	e30e3244 	movw	r3, #57924	; 0xe244
  120490:	e3403014 	movt	r3, #20
  120494:	e1c320b0 	strh	r2, [r3]
  tcphdr_opt2 = NULL;
  120498:	e30e3248 	movw	r3, #57928	; 0xe248
  12049c:	e3403014 	movt	r3, #20
  1204a0:	e3a02000 	mov	r2, #0
  1204a4:	e5832000 	str	r2, [r3]
  if (p->len >= hdrlen_bytes) {
  1204a8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1204ac:	e1d320ba 	ldrh	r2, [r3, #10]
  1204b0:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  1204b4:	e6ff3073 	uxth	r3, r3
  1204b8:	e1520003 	cmp	r2, r3
  1204bc:	3a00000e 	bcc	1204fc <tcp_input+0x268>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
  1204c0:	e30e3244 	movw	r3, #57924	; 0xe244
  1204c4:	e3403014 	movt	r3, #20
  1204c8:	e1d320b0 	ldrh	r2, [r3]
  1204cc:	e30e3246 	movw	r3, #57926	; 0xe246
  1204d0:	e3403014 	movt	r3, #20
  1204d4:	e1c320b0 	strh	r2, [r3]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
  1204d8:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  1204dc:	e6ff3073 	uxth	r3, r3
  1204e0:	e2633000 	rsb	r3, r3, #0
  1204e4:	e6ff3073 	uxth	r3, r3
  1204e8:	e6bf3073 	sxth	r3, r3
  1204ec:	e1a01003 	mov	r1, r3
  1204f0:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  1204f4:	ebffea4f 	bl	11ae38 <pbuf_header>
  1204f8:	ea000061 	b	120684 <tcp_input+0x3f0>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
  1204fc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120500:	e5933000 	ldr	r3, [r3]
  120504:	e3530000 	cmp	r3, #0
  120508:	1a000006 	bne	120528 <tcp_input+0x294>
  12050c:	e30802a4 	movw	r0, #33444	; 0x82a4
  120510:	e3400014 	movt	r0, #20
  120514:	ebff8afe 	bl	103114 <rt_kprintf>
  120518:	e3a010b0 	mov	r1, #176	; 0xb0
  12051c:	e30802b4 	movw	r0, #33460	; 0x82b4
  120520:	e3400014 	movt	r0, #20
  120524:	ebffaaf1 	bl	10b0f0 <sys_arch_assert>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
  120528:	e3e01013 	mvn	r1, #19
  12052c:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  120530:	ebffea40 	bl	11ae38 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
  120534:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120538:	e1d320ba 	ldrh	r2, [r3, #10]
  12053c:	e30e3246 	movw	r3, #57926	; 0xe246
  120540:	e3403014 	movt	r3, #20
  120544:	e1c320b0 	strh	r2, [r3]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
  120548:	e30e3244 	movw	r3, #57924	; 0xe244
  12054c:	e3403014 	movt	r3, #20
  120550:	e1d320b0 	ldrh	r2, [r3]
  120554:	e30e3246 	movw	r3, #57926	; 0xe246
  120558:	e3403014 	movt	r3, #20
  12055c:	e1d330b0 	ldrh	r3, [r3]
  120560:	e0423003 	sub	r3, r2, r3
  120564:	e14b32b8 	strh	r3, [fp, #-40]	; 0xffffffd8

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
  120568:	e30e3246 	movw	r3, #57926	; 0xe246
  12056c:	e3403014 	movt	r3, #20
  120570:	e1d330b0 	ldrh	r3, [r3]
  120574:	e2633000 	rsb	r3, r3, #0
  120578:	e6ff3073 	uxth	r3, r3
  12057c:	e6bf3073 	sxth	r3, r3
  120580:	e1a01003 	mov	r1, r3
  120584:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  120588:	ebffea2a 	bl	11ae38 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
  12058c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120590:	e5933000 	ldr	r3, [r3]
  120594:	e1d330ba 	ldrh	r3, [r3, #10]
  120598:	e15b22b8 	ldrh	r2, [fp, #-40]	; 0xffffffd8
  12059c:	e1520003 	cmp	r2, r3
  1205a0:	9a000008 	bls	1205c8 <tcp_input+0x334>
      /* drop short packets */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: options overflow second pbuf (%"U16_F" bytes)\n", p->next->len));
      TCP_STATS_INC(tcp.lenerr);
  1205a4:	e30c3a30 	movw	r3, #51760	; 0xca30
  1205a8:	e3403015 	movt	r3, #21
  1205ac:	e1d33bb6 	ldrh	r3, [r3, #182]	; 0xb6
  1205b0:	e2833001 	add	r3, r3, #1
  1205b4:	e6ff2073 	uxth	r2, r3
  1205b8:	e30c3a30 	movw	r3, #51760	; 0xca30
  1205bc:	e3403015 	movt	r3, #21
  1205c0:	e1c32bb6 	strh	r2, [r3, #182]	; 0xb6
      goto dropped;
  1205c4:	ea00032e 	b	121284 <tcp_input+0xff0>
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
  1205c8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1205cc:	e5933000 	ldr	r3, [r3]
  1205d0:	e5932004 	ldr	r2, [r3, #4]
  1205d4:	e30e3248 	movw	r3, #57928	; 0xe248
  1205d8:	e3403014 	movt	r3, #20
  1205dc:	e5832000 	str	r2, [r3]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
  1205e0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1205e4:	e5932000 	ldr	r2, [r3]
  1205e8:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  1205ec:	e2633000 	rsb	r3, r3, #0
  1205f0:	e6ff3073 	uxth	r3, r3
  1205f4:	e6bf3073 	sxth	r3, r3
  1205f8:	e1a01003 	mov	r1, r3
  1205fc:	e1a00002 	mov	r0, r2
  120600:	ebffea0c 	bl	11ae38 <pbuf_header>
    p->tot_len -= opt2len;
  120604:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120608:	e1d320b8 	ldrh	r2, [r3, #8]
  12060c:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  120610:	e0423003 	sub	r3, r2, r3
  120614:	e6ff2073 	uxth	r2, r3
  120618:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12061c:	e1c320b8 	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
  120620:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120624:	e1d330ba 	ldrh	r3, [r3, #10]
  120628:	e3530000 	cmp	r3, #0
  12062c:	0a000006 	beq	12064c <tcp_input+0x3b8>
  120630:	e30802e4 	movw	r0, #33508	; 0x82e4
  120634:	e3400014 	movt	r0, #20
  120638:	ebff8ab5 	bl	103114 <rt_kprintf>
  12063c:	e3a010cd 	mov	r1, #205	; 0xcd
  120640:	e30802b4 	movw	r0, #33460	; 0x82b4
  120644:	e3400014 	movt	r0, #20
  120648:	ebffaaa8 	bl	10b0f0 <sys_arch_assert>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
  12064c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120650:	e1d320b8 	ldrh	r2, [r3, #8]
  120654:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120658:	e5933000 	ldr	r3, [r3]
  12065c:	e1d330b8 	ldrh	r3, [r3, #8]
  120660:	e1520003 	cmp	r2, r3
  120664:	0a000006 	beq	120684 <tcp_input+0x3f0>
  120668:	e30802f0 	movw	r0, #33520	; 0x82f0
  12066c:	e3400014 	movt	r0, #20
  120670:	ebff8aa7 	bl	103114 <rt_kprintf>
  120674:	e3a010ce 	mov	r1, #206	; 0xce
  120678:	e30802b4 	movw	r0, #33460	; 0x82b4
  12067c:	e3400014 	movt	r0, #20
  120680:	ebffaa9a 	bl	10b0f0 <sys_arch_assert>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
  120684:	e30e3240 	movw	r3, #57920	; 0xe240
  120688:	e3403014 	movt	r3, #20
  12068c:	e5933000 	ldr	r3, [r3]
  120690:	e1d330b0 	ldrh	r3, [r3]
  120694:	e6ff2073 	uxth	r2, r3
  120698:	e30e3240 	movw	r3, #57920	; 0xe240
  12069c:	e3403014 	movt	r3, #20
  1206a0:	e5934000 	ldr	r4, [r3]
  1206a4:	e1a00002 	mov	r0, r2
  1206a8:	ebffd7c9 	bl	1165d4 <lwip_htons>
  1206ac:	e1a03000 	mov	r3, r0
  1206b0:	e1c430b0 	strh	r3, [r4]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
  1206b4:	e30e3240 	movw	r3, #57920	; 0xe240
  1206b8:	e3403014 	movt	r3, #20
  1206bc:	e5933000 	ldr	r3, [r3]
  1206c0:	e1d330b2 	ldrh	r3, [r3, #2]
  1206c4:	e6ff2073 	uxth	r2, r3
  1206c8:	e30e3240 	movw	r3, #57920	; 0xe240
  1206cc:	e3403014 	movt	r3, #20
  1206d0:	e5934000 	ldr	r4, [r3]
  1206d4:	e1a00002 	mov	r0, r2
  1206d8:	ebffd7bd 	bl	1165d4 <lwip_htons>
  1206dc:	e1a03000 	mov	r3, r0
  1206e0:	e1c430b2 	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
  1206e4:	e30e3240 	movw	r3, #57920	; 0xe240
  1206e8:	e3403014 	movt	r3, #20
  1206ec:	e5933000 	ldr	r3, [r3]
  1206f0:	e5932004 	ldr	r2, [r3, #4]
  1206f4:	e30e3240 	movw	r3, #57920	; 0xe240
  1206f8:	e3403014 	movt	r3, #20
  1206fc:	e5934000 	ldr	r4, [r3]
  120700:	e1a00002 	mov	r0, r2
  120704:	ebffd7be 	bl	116604 <lwip_htonl>
  120708:	e1a03000 	mov	r3, r0
  12070c:	e5843004 	str	r3, [r4, #4]
  120710:	e5942004 	ldr	r2, [r4, #4]
  120714:	e30e3250 	movw	r3, #57936	; 0xe250
  120718:	e3403014 	movt	r3, #20
  12071c:	e5832000 	str	r2, [r3]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
  120720:	e30e3240 	movw	r3, #57920	; 0xe240
  120724:	e3403014 	movt	r3, #20
  120728:	e5933000 	ldr	r3, [r3]
  12072c:	e5932008 	ldr	r2, [r3, #8]
  120730:	e30e3240 	movw	r3, #57920	; 0xe240
  120734:	e3403014 	movt	r3, #20
  120738:	e5934000 	ldr	r4, [r3]
  12073c:	e1a00002 	mov	r0, r2
  120740:	ebffd7af 	bl	116604 <lwip_htonl>
  120744:	e1a03000 	mov	r3, r0
  120748:	e5843008 	str	r3, [r4, #8]
  12074c:	e5942008 	ldr	r2, [r4, #8]
  120750:	e30e3254 	movw	r3, #57940	; 0xe254
  120754:	e3403014 	movt	r3, #20
  120758:	e5832000 	str	r2, [r3]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
  12075c:	e30e3240 	movw	r3, #57920	; 0xe240
  120760:	e3403014 	movt	r3, #20
  120764:	e5933000 	ldr	r3, [r3]
  120768:	e1d330be 	ldrh	r3, [r3, #14]
  12076c:	e6ff2073 	uxth	r2, r3
  120770:	e30e3240 	movw	r3, #57920	; 0xe240
  120774:	e3403014 	movt	r3, #20
  120778:	e5934000 	ldr	r4, [r3]
  12077c:	e1a00002 	mov	r0, r2
  120780:	ebffd793 	bl	1165d4 <lwip_htons>
  120784:	e1a03000 	mov	r3, r0
  120788:	e1c430be 	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
  12078c:	e30e3240 	movw	r3, #57920	; 0xe240
  120790:	e3403014 	movt	r3, #20
  120794:	e5933000 	ldr	r3, [r3]
  120798:	e1d330bc 	ldrh	r3, [r3, #12]
  12079c:	e6ff3073 	uxth	r3, r3
  1207a0:	e1a00003 	mov	r0, r3
  1207a4:	ebffd78a 	bl	1165d4 <lwip_htons>
  1207a8:	e1a03000 	mov	r3, r0
  1207ac:	e6ef3073 	uxtb	r3, r3
  1207b0:	e203303f 	and	r3, r3, #63	; 0x3f
  1207b4:	e6ef2073 	uxtb	r2, r3
  1207b8:	e30e325c 	movw	r3, #57948	; 0xe25c
  1207bc:	e3403014 	movt	r3, #20
  1207c0:	e5c32000 	strb	r2, [r3]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
  1207c4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1207c8:	e1d320b8 	ldrh	r2, [r3, #8]
  1207cc:	e30e325c 	movw	r3, #57948	; 0xe25c
  1207d0:	e3403014 	movt	r3, #20
  1207d4:	e5d33000 	ldrb	r3, [r3]
  1207d8:	e2033003 	and	r3, r3, #3
  1207dc:	e3530000 	cmp	r3, #0
  1207e0:	13a03001 	movne	r3, #1
  1207e4:	03a03000 	moveq	r3, #0
  1207e8:	e6ef3073 	uxtb	r3, r3
  1207ec:	e6ff3073 	uxth	r3, r3
  1207f0:	e0823003 	add	r3, r2, r3
  1207f4:	e6ff2073 	uxth	r2, r3
  1207f8:	e30e325a 	movw	r3, #57946	; 0xe25a
  1207fc:	e3403014 	movt	r3, #20
  120800:	e1c320b0 	strh	r2, [r3]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
  120804:	e3a03000 	mov	r3, #0
  120808:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  12080c:	e30c3c20 	movw	r3, #52256	; 0xcc20
  120810:	e3403015 	movt	r3, #21
  120814:	e5933000 	ldr	r3, [r3]
  120818:	e50b3010 	str	r3, [fp, #-16]
  12081c:	ea000077 	b	120a00 <tcp_input+0x76c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
  120820:	e51b3010 	ldr	r3, [fp, #-16]
  120824:	e5933014 	ldr	r3, [r3, #20]
  120828:	e3530000 	cmp	r3, #0
  12082c:	1a000006 	bne	12084c <tcp_input+0x5b8>
  120830:	e3080310 	movw	r0, #33552	; 0x8310
  120834:	e3400014 	movt	r0, #20
  120838:	ebff8a35 	bl	103114 <rt_kprintf>
  12083c:	e3a010e0 	mov	r1, #224	; 0xe0
  120840:	e30802b4 	movw	r0, #33460	; 0x82b4
  120844:	e3400014 	movt	r0, #20
  120848:	ebffaa28 	bl	10b0f0 <sys_arch_assert>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
  12084c:	e51b3010 	ldr	r3, [fp, #-16]
  120850:	e5933014 	ldr	r3, [r3, #20]
  120854:	e353000a 	cmp	r3, #10
  120858:	1a000006 	bne	120878 <tcp_input+0x5e4>
  12085c:	e3080338 	movw	r0, #33592	; 0x8338
  120860:	e3400014 	movt	r0, #20
  120864:	ebff8a2a 	bl	103114 <rt_kprintf>
  120868:	e3a010e1 	mov	r1, #225	; 0xe1
  12086c:	e30802b4 	movw	r0, #33460	; 0x82b4
  120870:	e3400014 	movt	r0, #20
  120874:	ebffaa1d 	bl	10b0f0 <sys_arch_assert>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
  120878:	e51b3010 	ldr	r3, [fp, #-16]
  12087c:	e5933014 	ldr	r3, [r3, #20]
  120880:	e3530001 	cmp	r3, #1
  120884:	1a000006 	bne	1208a4 <tcp_input+0x610>
  120888:	e3080364 	movw	r0, #33636	; 0x8364
  12088c:	e3400014 	movt	r0, #20
  120890:	ebff8a1f 	bl	103114 <rt_kprintf>
  120894:	e3a010e2 	mov	r1, #226	; 0xe2
  120898:	e30802b4 	movw	r0, #33460	; 0x82b4
  12089c:	e3400014 	movt	r0, #20
  1208a0:	ebffaa12 	bl	10b0f0 <sys_arch_assert>
    if (pcb->remote_port == tcphdr->src &&
  1208a4:	e51b3010 	ldr	r3, [fp, #-16]
  1208a8:	e1d321bc 	ldrh	r2, [r3, #28]
  1208ac:	e30e3240 	movw	r3, #57920	; 0xe240
  1208b0:	e3403014 	movt	r3, #20
  1208b4:	e5933000 	ldr	r3, [r3]
  1208b8:	e1d330b0 	ldrh	r3, [r3]
  1208bc:	e6ff3073 	uxth	r3, r3
  1208c0:	e1520003 	cmp	r2, r3
  1208c4:	1a000048 	bne	1209ec <tcp_input+0x758>
        pcb->local_port == tcphdr->dest &&
  1208c8:	e51b3010 	ldr	r3, [fp, #-16]
  1208cc:	e1d321ba 	ldrh	r2, [r3, #26]
  1208d0:	e30e3240 	movw	r3, #57920	; 0xe240
  1208d4:	e3403014 	movt	r3, #20
  1208d8:	e5933000 	ldr	r3, [r3]
  1208dc:	e1d330b2 	ldrh	r3, [r3, #2]
  1208e0:	e6ff3073 	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
  1208e4:	e1520003 	cmp	r2, r3
  1208e8:	1a00003f 	bne	1209ec <tcp_input+0x758>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
  1208ec:	e51b3010 	ldr	r3, [fp, #-16]
  1208f0:	e5932004 	ldr	r2, [r3, #4]
  1208f4:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  1208f8:	e3403014 	movt	r3, #20
  1208fc:	e5933010 	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
  120900:	e1520003 	cmp	r2, r3
  120904:	1a000038 	bne	1209ec <tcp_input+0x758>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
  120908:	e51b3010 	ldr	r3, [fp, #-16]
  12090c:	e5932000 	ldr	r2, [r3]
  120910:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  120914:	e3403014 	movt	r3, #20
  120918:	e5933014 	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
  12091c:	e1520003 	cmp	r2, r3
  120920:	1a000031 	bne	1209ec <tcp_input+0x758>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
  120924:	e51b3010 	ldr	r3, [fp, #-16]
  120928:	e593300c 	ldr	r3, [r3, #12]
  12092c:	e51b2010 	ldr	r2, [fp, #-16]
  120930:	e1520003 	cmp	r2, r3
  120934:	1a000006 	bne	120954 <tcp_input+0x6c0>
  120938:	e308038c 	movw	r0, #33676	; 0x838c
  12093c:	e3400014 	movt	r0, #20
  120940:	ebff89f3 	bl	103114 <rt_kprintf>
  120944:	e3a010ea 	mov	r1, #234	; 0xea
  120948:	e30802b4 	movw	r0, #33460	; 0x82b4
  12094c:	e3400014 	movt	r0, #20
  120950:	ebffa9e6 	bl	10b0f0 <sys_arch_assert>
      if (prev != NULL) {
  120954:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  120958:	e3530000 	cmp	r3, #0
  12095c:	0a00000d 	beq	120998 <tcp_input+0x704>
        prev->next = pcb->next;
  120960:	e51b3010 	ldr	r3, [fp, #-16]
  120964:	e593200c 	ldr	r2, [r3, #12]
  120968:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12096c:	e583200c 	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
  120970:	e30c3c20 	movw	r3, #52256	; 0xcc20
  120974:	e3403015 	movt	r3, #21
  120978:	e5932000 	ldr	r2, [r3]
  12097c:	e51b3010 	ldr	r3, [fp, #-16]
  120980:	e583200c 	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
  120984:	e30c3c20 	movw	r3, #52256	; 0xcc20
  120988:	e3403015 	movt	r3, #21
  12098c:	e51b2010 	ldr	r2, [fp, #-16]
  120990:	e5832000 	str	r2, [r3]
  120994:	ea000007 	b	1209b8 <tcp_input+0x724>
      } else {
        TCP_STATS_INC(tcp.cachehit);
  120998:	e30c3a30 	movw	r3, #51760	; 0xca30
  12099c:	e3403015 	movt	r3, #21
  1209a0:	e1d33cb2 	ldrh	r3, [r3, #194]	; 0xc2
  1209a4:	e2833001 	add	r3, r3, #1
  1209a8:	e6ff2073 	uxth	r2, r3
  1209ac:	e30c3a30 	movw	r3, #51760	; 0xca30
  1209b0:	e3403015 	movt	r3, #21
  1209b4:	e1c32cb2 	strh	r2, [r3, #194]	; 0xc2
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
  1209b8:	e51b3010 	ldr	r3, [fp, #-16]
  1209bc:	e593300c 	ldr	r3, [r3, #12]
  1209c0:	e51b2010 	ldr	r2, [fp, #-16]
  1209c4:	e1520003 	cmp	r2, r3
  1209c8:	1a000010 	bne	120a10 <tcp_input+0x77c>
  1209cc:	e30803b8 	movw	r0, #33720	; 0x83b8
  1209d0:	e3400014 	movt	r0, #20
  1209d4:	ebff89ce 	bl	103114 <rt_kprintf>
  1209d8:	e3a010f2 	mov	r1, #242	; 0xf2
  1209dc:	e30802b4 	movw	r0, #33460	; 0x82b4
  1209e0:	e3400014 	movt	r0, #20
  1209e4:	ebffa9c1 	bl	10b0f0 <sys_arch_assert>
      break;
  1209e8:	ea000008 	b	120a10 <tcp_input+0x77c>
    }
    prev = pcb;
  1209ec:	e51b3010 	ldr	r3, [fp, #-16]
  1209f0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  1209f4:	e51b3010 	ldr	r3, [fp, #-16]
  1209f8:	e593300c 	ldr	r3, [r3, #12]
  1209fc:	e50b3010 	str	r3, [fp, #-16]
  120a00:	e51b3010 	ldr	r3, [fp, #-16]
  120a04:	e3530000 	cmp	r3, #0
  120a08:	1affff84 	bne	120820 <tcp_input+0x58c>
  120a0c:	ea000000 	b	120a14 <tcp_input+0x780>
      break;
  120a10:	e320f000 	nop	{0}
  }

  if (pcb == NULL) {
  120a14:	e51b3010 	ldr	r3, [fp, #-16]
  120a18:	e3530000 	cmp	r3, #0
  120a1c:	1a00008e 	bne	120c5c <tcp_input+0x9c8>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  120a20:	e30c3c30 	movw	r3, #52272	; 0xcc30
  120a24:	e3403015 	movt	r3, #21
  120a28:	e5933000 	ldr	r3, [r3]
  120a2c:	e50b3010 	str	r3, [fp, #-16]
  120a30:	ea000032 	b	120b00 <tcp_input+0x86c>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
  120a34:	e51b3010 	ldr	r3, [fp, #-16]
  120a38:	e5933014 	ldr	r3, [r3, #20]
  120a3c:	e353000a 	cmp	r3, #10
  120a40:	0a000006 	beq	120a60 <tcp_input+0x7cc>
  120a44:	e30803e4 	movw	r0, #33764	; 0x83e4
  120a48:	e3400014 	movt	r0, #20
  120a4c:	ebff89b0 	bl	103114 <rt_kprintf>
  120a50:	e3a010fc 	mov	r1, #252	; 0xfc
  120a54:	e30802b4 	movw	r0, #33460	; 0x82b4
  120a58:	e3400014 	movt	r0, #20
  120a5c:	ebffa9a3 	bl	10b0f0 <sys_arch_assert>
      if (pcb->remote_port == tcphdr->src &&
  120a60:	e51b3010 	ldr	r3, [fp, #-16]
  120a64:	e1d321bc 	ldrh	r2, [r3, #28]
  120a68:	e30e3240 	movw	r3, #57920	; 0xe240
  120a6c:	e3403014 	movt	r3, #20
  120a70:	e5933000 	ldr	r3, [r3]
  120a74:	e1d330b0 	ldrh	r3, [r3]
  120a78:	e6ff3073 	uxth	r3, r3
  120a7c:	e1520003 	cmp	r2, r3
  120a80:	1a00001b 	bne	120af4 <tcp_input+0x860>
          pcb->local_port == tcphdr->dest &&
  120a84:	e51b3010 	ldr	r3, [fp, #-16]
  120a88:	e1d321ba 	ldrh	r2, [r3, #26]
  120a8c:	e30e3240 	movw	r3, #57920	; 0xe240
  120a90:	e3403014 	movt	r3, #20
  120a94:	e5933000 	ldr	r3, [r3]
  120a98:	e1d330b2 	ldrh	r3, [r3, #2]
  120a9c:	e6ff3073 	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
  120aa0:	e1520003 	cmp	r2, r3
  120aa4:	1a000012 	bne	120af4 <tcp_input+0x860>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
  120aa8:	e51b3010 	ldr	r3, [fp, #-16]
  120aac:	e5932004 	ldr	r2, [r3, #4]
  120ab0:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  120ab4:	e3403014 	movt	r3, #20
  120ab8:	e5933010 	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
  120abc:	e1520003 	cmp	r2, r3
  120ac0:	1a00000b 	bne	120af4 <tcp_input+0x860>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
  120ac4:	e51b3010 	ldr	r3, [fp, #-16]
  120ac8:	e5932000 	ldr	r2, [r3]
  120acc:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  120ad0:	e3403014 	movt	r3, #20
  120ad4:	e5933014 	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
  120ad8:	e1520003 	cmp	r2, r3
  120adc:	1a000004 	bne	120af4 <tcp_input+0x860>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
  120ae0:	e51b0010 	ldr	r0, [fp, #-16]
  120ae4:	eb0002d7 	bl	121648 <tcp_timewait_input>
        pbuf_free(p);
  120ae8:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  120aec:	ebffe8ef 	bl	11aeb0 <pbuf_free>
        return;
  120af0:	ea0001f6 	b	1212d0 <tcp_input+0x103c>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  120af4:	e51b3010 	ldr	r3, [fp, #-16]
  120af8:	e593300c 	ldr	r3, [r3, #12]
  120afc:	e50b3010 	str	r3, [fp, #-16]
  120b00:	e51b3010 	ldr	r3, [fp, #-16]
  120b04:	e3530000 	cmp	r3, #0
  120b08:	1affffc9 	bne	120a34 <tcp_input+0x7a0>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
  120b0c:	e3a03000 	mov	r3, #0
  120b10:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  120b14:	e30c3c28 	movw	r3, #52264	; 0xcc28
  120b18:	e3403015 	movt	r3, #21
  120b1c:	e5933000 	ldr	r3, [r3]
  120b20:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  120b24:	ea00001f 	b	120ba8 <tcp_input+0x914>
      if (lpcb->local_port == tcphdr->dest) {
  120b28:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120b2c:	e1d321ba 	ldrh	r2, [r3, #26]
  120b30:	e30e3240 	movw	r3, #57920	; 0xe240
  120b34:	e3403014 	movt	r3, #20
  120b38:	e5933000 	ldr	r3, [r3]
  120b3c:	e1d330b2 	ldrh	r3, [r3, #2]
  120b40:	e6ff3073 	uxth	r3, r3
  120b44:	e1520003 	cmp	r2, r3
  120b48:	1a000011 	bne	120b94 <tcp_input+0x900>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
  120b4c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120b50:	e5932000 	ldr	r2, [r3]
  120b54:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  120b58:	e3403014 	movt	r3, #20
  120b5c:	e5933014 	ldr	r3, [r3, #20]
  120b60:	e1520003 	cmp	r2, r3
  120b64:	0a000013 	beq	120bb8 <tcp_input+0x924>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
  120b68:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120b6c:	e3530000 	cmp	r3, #0
  120b70:	0a000003 	beq	120b84 <tcp_input+0x8f0>
  120b74:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120b78:	e5933000 	ldr	r3, [r3]
  120b7c:	e3530000 	cmp	r3, #0
  120b80:	1a000003 	bne	120b94 <tcp_input+0x900>
            /* found an ANY-match */
#if SO_REUSE
            lpcb_any = lpcb;
  120b84:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120b88:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
            lpcb_prev = prev;
  120b8c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  120b90:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
  120b94:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120b98:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  120b9c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120ba0:	e593300c 	ldr	r3, [r3, #12]
  120ba4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  120ba8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120bac:	e3530000 	cmp	r3, #0
  120bb0:	1affffdc 	bne	120b28 <tcp_input+0x894>
  120bb4:	ea000000 	b	120bbc <tcp_input+0x928>
            break;
  120bb8:	e320f000 	nop	{0}
    }
#if SO_REUSE
    /* first try specific local IP */
    if (lpcb == NULL) {
  120bbc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120bc0:	e3530000 	cmp	r3, #0
  120bc4:	1a000003 	bne	120bd8 <tcp_input+0x944>
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
  120bc8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  120bcc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
      prev = lpcb_prev;
  120bd0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  120bd4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
  120bd8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120bdc:	e3530000 	cmp	r3, #0
  120be0:	0a00001d 	beq	120c5c <tcp_input+0x9c8>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
  120be4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  120be8:	e3530000 	cmp	r3, #0
  120bec:	0a00000d 	beq	120c28 <tcp_input+0x994>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
  120bf0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120bf4:	e593200c 	ldr	r2, [r3, #12]
  120bf8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  120bfc:	e583200c 	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
  120c00:	e30c3c28 	movw	r3, #52264	; 0xcc28
  120c04:	e3403015 	movt	r3, #21
  120c08:	e5932000 	ldr	r2, [r3]
  120c0c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120c10:	e583200c 	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
  120c14:	e30c3c28 	movw	r3, #52264	; 0xcc28
  120c18:	e3403015 	movt	r3, #21
  120c1c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  120c20:	e5832000 	str	r2, [r3]
  120c24:	ea000007 	b	120c48 <tcp_input+0x9b4>
      } else {
        TCP_STATS_INC(tcp.cachehit);
  120c28:	e30c3a30 	movw	r3, #51760	; 0xca30
  120c2c:	e3403015 	movt	r3, #21
  120c30:	e1d33cb2 	ldrh	r3, [r3, #194]	; 0xc2
  120c34:	e2833001 	add	r3, r3, #1
  120c38:	e6ff2073 	uxth	r2, r3
  120c3c:	e30c3a30 	movw	r3, #51760	; 0xca30
  120c40:	e3403015 	movt	r3, #21
  120c44:	e1c32cb2 	strh	r2, [r3, #194]	; 0xc2
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
  120c48:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  120c4c:	eb0001a3 	bl	1212e0 <tcp_listen_input>
      pbuf_free(p);
  120c50:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  120c54:	ebffe895 	bl	11aeb0 <pbuf_free>
      return;
  120c58:	ea00019c 	b	1212d0 <tcp_input+0x103c>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
  120c5c:	e51b3010 	ldr	r3, [fp, #-16]
  120c60:	e3530000 	cmp	r3, #0
  120c64:	0a00014e 	beq	1211a4 <tcp_input+0xf10>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
  120c68:	e30e3230 	movw	r3, #57904	; 0xe230
  120c6c:	e3403014 	movt	r3, #20
  120c70:	e3a02000 	mov	r2, #0
  120c74:	e5832000 	str	r2, [r3]
    inseg.len = p->tot_len;
  120c78:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120c7c:	e1d320b8 	ldrh	r2, [r3, #8]
  120c80:	e30e3230 	movw	r3, #57904	; 0xe230
  120c84:	e3403014 	movt	r3, #20
  120c88:	e1c320b8 	strh	r2, [r3, #8]
    inseg.p = p;
  120c8c:	e30e3230 	movw	r3, #57904	; 0xe230
  120c90:	e3403014 	movt	r3, #20
  120c94:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  120c98:	e5832004 	str	r2, [r3, #4]
    inseg.tcphdr = tcphdr;
  120c9c:	e30e3240 	movw	r3, #57920	; 0xe240
  120ca0:	e3403014 	movt	r3, #20
  120ca4:	e5932000 	ldr	r2, [r3]
  120ca8:	e30e3230 	movw	r3, #57904	; 0xe230
  120cac:	e3403014 	movt	r3, #20
  120cb0:	e583200c 	str	r2, [r3, #12]

    recv_data = NULL;
  120cb4:	e30e3260 	movw	r3, #57952	; 0xe260
  120cb8:	e3403014 	movt	r3, #20
  120cbc:	e3a02000 	mov	r2, #0
  120cc0:	e5832000 	str	r2, [r3]
    recv_flags = 0;
  120cc4:	e30e325d 	movw	r3, #57949	; 0xe25d
  120cc8:	e3403014 	movt	r3, #20
  120ccc:	e3a02000 	mov	r2, #0
  120cd0:	e5c32000 	strb	r2, [r3]
    recv_acked = 0;
  120cd4:	e30e3258 	movw	r3, #57944	; 0xe258
  120cd8:	e3403014 	movt	r3, #20
  120cdc:	e3a02000 	mov	r2, #0
  120ce0:	e1c320b0 	strh	r2, [r3]

    if (flags & TCP_PSH) {
  120ce4:	e30e325c 	movw	r3, #57948	; 0xe25c
  120ce8:	e3403014 	movt	r3, #20
  120cec:	e5d33000 	ldrb	r3, [r3]
  120cf0:	e2033008 	and	r3, r3, #8
  120cf4:	e3530000 	cmp	r3, #0
  120cf8:	0a000005 	beq	120d14 <tcp_input+0xa80>
      p->flags |= PBUF_FLAG_PUSH;
  120cfc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120d00:	e5d3300d 	ldrb	r3, [r3, #13]
  120d04:	e3833001 	orr	r3, r3, #1
  120d08:	e6ef2073 	uxtb	r2, r3
  120d0c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120d10:	e5c3200d 	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
  120d14:	e51b3010 	ldr	r3, [fp, #-16]
  120d18:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  120d1c:	e3530000 	cmp	r3, #0
  120d20:	0a000023 	beq	120db4 <tcp_input+0xb20>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
  120d24:	e51b0010 	ldr	r0, [fp, #-16]
  120d28:	ebfff969 	bl	11f2d4 <tcp_process_refused_data>
  120d2c:	e1a03000 	mov	r3, r0
  120d30:	e373000d 	cmn	r3, #13
  120d34:	0a000008 	beq	120d5c <tcp_input+0xac8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
  120d38:	e51b3010 	ldr	r3, [fp, #-16]
  120d3c:	e5933078 	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
  120d40:	e3530000 	cmp	r3, #0
  120d44:	0a00001a 	beq	120db4 <tcp_input+0xb20>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
  120d48:	e30e325a 	movw	r3, #57946	; 0xe25a
  120d4c:	e3403014 	movt	r3, #20
  120d50:	e1d330b0 	ldrh	r3, [r3]
  120d54:	e3530000 	cmp	r3, #0
  120d58:	0a000015 	beq	120db4 <tcp_input+0xb20>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
  120d5c:	e51b3010 	ldr	r3, [fp, #-16]
  120d60:	e1d332be 	ldrh	r3, [r3, #46]	; 0x2e
  120d64:	e3530000 	cmp	r3, #0
  120d68:	1a000001 	bne	120d74 <tcp_input+0xae0>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
  120d6c:	e51b0010 	ldr	r0, [fp, #-16]
  120d70:	eb001418 	bl	125dd8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
  120d74:	e30c3a30 	movw	r3, #51760	; 0xca30
  120d78:	e3403015 	movt	r3, #21
  120d7c:	e1d33bb2 	ldrh	r3, [r3, #178]	; 0xb2
  120d80:	e2833001 	add	r3, r3, #1
  120d84:	e6ff2073 	uxth	r2, r3
  120d88:	e30c3a30 	movw	r3, #51760	; 0xca30
  120d8c:	e3403015 	movt	r3, #21
  120d90:	e1c32bb2 	strh	r2, [r3, #178]	; 0xb2
        MIB2_STATS_INC(mib2.tcpinerrs);
  120d94:	e30c3a30 	movw	r3, #51760	; 0xca30
  120d98:	e3403015 	movt	r3, #21
  120d9c:	e5933188 	ldr	r3, [r3, #392]	; 0x188
  120da0:	e2832001 	add	r2, r3, #1
  120da4:	e30c3a30 	movw	r3, #51760	; 0xca30
  120da8:	e3403015 	movt	r3, #21
  120dac:	e5832188 	str	r2, [r3, #392]	; 0x188
        goto aborted;
  120db0:	ea0000e4 	b	121148 <tcp_input+0xeb4>
      }
    }
    tcp_input_pcb = pcb;
  120db4:	e30c3c34 	movw	r3, #52276	; 0xcc34
  120db8:	e3403015 	movt	r3, #21
  120dbc:	e51b2010 	ldr	r2, [fp, #-16]
  120dc0:	e5832000 	str	r2, [r3]
    err = tcp_process(pcb);
  120dc4:	e51b0010 	ldr	r0, [fp, #-16]
  120dc8:	eb00027d 	bl	1217c4 <tcp_process>
  120dcc:	e1a03000 	mov	r3, r0
  120dd0:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
  120dd4:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  120dd8:	e373000d 	cmn	r3, #13
  120ddc:	0a0000d2 	beq	12112c <tcp_input+0xe98>
      if (recv_flags & TF_RESET) {
  120de0:	e30e325d 	movw	r3, #57949	; 0xe25d
  120de4:	e3403014 	movt	r3, #20
  120de8:	e5d33000 	ldrb	r3, [r3]
  120dec:	e2033008 	and	r3, r3, #8
  120df0:	e3530000 	cmp	r3, #0
  120df4:	0a000012 	beq	120e44 <tcp_input+0xbb0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
  120df8:	e51b3010 	ldr	r3, [fp, #-16]
  120dfc:	e5933090 	ldr	r3, [r3, #144]	; 0x90
  120e00:	e3530000 	cmp	r3, #0
  120e04:	0a000006 	beq	120e24 <tcp_input+0xb90>
  120e08:	e51b3010 	ldr	r3, [fp, #-16]
  120e0c:	e5933090 	ldr	r3, [r3, #144]	; 0x90
  120e10:	e51b2010 	ldr	r2, [fp, #-16]
  120e14:	e5922010 	ldr	r2, [r2, #16]
  120e18:	e3e0100d 	mvn	r1, #13
  120e1c:	e1a00002 	mov	r0, r2
  120e20:	e12fff33 	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
  120e24:	e51b1010 	ldr	r1, [fp, #-16]
  120e28:	e30c0c20 	movw	r0, #52256	; 0xcc20
  120e2c:	e3400015 	movt	r0, #21
  120e30:	ebfffc11 	bl	11fe7c <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
  120e34:	e51b1010 	ldr	r1, [fp, #-16]
  120e38:	e3a00002 	mov	r0, #2
  120e3c:	ebffe10d 	bl	119278 <memp_free>
  120e40:	ea0000c0 	b	121148 <tcp_input+0xeb4>
      } else {
        err = ERR_OK;
  120e44:	e3a03000 	mov	r3, #0
  120e48:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
  120e4c:	e30e3258 	movw	r3, #57944	; 0xe258
  120e50:	e3403014 	movt	r3, #20
  120e54:	e1d330b0 	ldrh	r3, [r3]
  120e58:	e3530000 	cmp	r3, #0
  120e5c:	0a00001a 	beq	120ecc <tcp_input+0xc38>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
  120e60:	e30e3258 	movw	r3, #57944	; 0xe258
  120e64:	e3403014 	movt	r3, #20
  120e68:	e1d330b0 	ldrh	r3, [r3]
  120e6c:	e14b32ba 	strh	r3, [fp, #-42]	; 0xffffffd6
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
  120e70:	e51b3010 	ldr	r3, [fp, #-16]
  120e74:	e5933080 	ldr	r3, [r3, #128]	; 0x80
  120e78:	e3530000 	cmp	r3, #0
  120e7c:	0a000009 	beq	120ea8 <tcp_input+0xc14>
  120e80:	e51b3010 	ldr	r3, [fp, #-16]
  120e84:	e5933080 	ldr	r3, [r3, #128]	; 0x80
  120e88:	e51b2010 	ldr	r2, [fp, #-16]
  120e8c:	e5920010 	ldr	r0, [r2, #16]
  120e90:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
  120e94:	e51b1010 	ldr	r1, [fp, #-16]
  120e98:	e12fff33 	blx	r3
  120e9c:	e1a03000 	mov	r3, r0
  120ea0:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  120ea4:	ea000001 	b	120eb0 <tcp_input+0xc1c>
  120ea8:	e3a03000 	mov	r3, #0
  120eac:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
            if (err == ERR_ABRT) {
  120eb0:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  120eb4:	e373000d 	cmn	r3, #13
  120eb8:	0a00009d 	beq	121134 <tcp_input+0xea0>
              goto aborted;
            }
          }
          recv_acked = 0;
  120ebc:	e30e3258 	movw	r3, #57944	; 0xe258
  120ec0:	e3403014 	movt	r3, #20
  120ec4:	e3a02000 	mov	r2, #0
  120ec8:	e1c320b0 	strh	r2, [r3]
        }
        if (recv_flags & TF_CLOSED) {
  120ecc:	e30e325d 	movw	r3, #57949	; 0xe25d
  120ed0:	e3403014 	movt	r3, #20
  120ed4:	e5d33000 	ldrb	r3, [r3]
  120ed8:	e2033010 	and	r3, r3, #16
  120edc:	e3530000 	cmp	r3, #0
  120ee0:	0a000017 	beq	120f44 <tcp_input+0xcb0>
          /* The connection has been closed and we will deallocate the
             PCB. */
          if (!(pcb->flags & TF_RXCLOSED)) {
  120ee4:	e51b3010 	ldr	r3, [fp, #-16]
  120ee8:	e5d3301e 	ldrb	r3, [r3, #30]
  120eec:	e2033010 	and	r3, r3, #16
  120ef0:	e3530000 	cmp	r3, #0
  120ef4:	1a00000a 	bne	120f24 <tcp_input+0xc90>
            /* Connection closed although the application has only shut down the
               tx side: call the PCB's err callback and indicate the closure to
               ensure the application doesn't continue using the PCB. */
            TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
  120ef8:	e51b3010 	ldr	r3, [fp, #-16]
  120efc:	e5933090 	ldr	r3, [r3, #144]	; 0x90
  120f00:	e3530000 	cmp	r3, #0
  120f04:	0a000006 	beq	120f24 <tcp_input+0xc90>
  120f08:	e51b3010 	ldr	r3, [fp, #-16]
  120f0c:	e5933090 	ldr	r3, [r3, #144]	; 0x90
  120f10:	e51b2010 	ldr	r2, [fp, #-16]
  120f14:	e5922010 	ldr	r2, [r2, #16]
  120f18:	e3e0100e 	mvn	r1, #14
  120f1c:	e1a00002 	mov	r0, r2
  120f20:	e12fff33 	blx	r3
          }
          tcp_pcb_remove(&tcp_active_pcbs, pcb);
  120f24:	e51b1010 	ldr	r1, [fp, #-16]
  120f28:	e30c0c20 	movw	r0, #52256	; 0xcc20
  120f2c:	e3400015 	movt	r0, #21
  120f30:	ebfffbd1 	bl	11fe7c <tcp_pcb_remove>
          memp_free(MEMP_TCP_PCB, pcb);
  120f34:	e51b1010 	ldr	r1, [fp, #-16]
  120f38:	e3a00002 	mov	r0, #2
  120f3c:	ebffe0cd 	bl	119278 <memp_free>
          goto aborted;
  120f40:	ea000080 	b	121148 <tcp_input+0xeb4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
  120f44:	e30e3260 	movw	r3, #57952	; 0xe260
  120f48:	e3403014 	movt	r3, #20
  120f4c:	e5933000 	ldr	r3, [r3]
  120f50:	e3530000 	cmp	r3, #0
  120f54:	0a00003c 	beq	12104c <tcp_input+0xdb8>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
  120f58:	e51b3010 	ldr	r3, [fp, #-16]
  120f5c:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  120f60:	e3530000 	cmp	r3, #0
  120f64:	0a000006 	beq	120f84 <tcp_input+0xcf0>
  120f68:	e3080414 	movw	r0, #33812	; 0x8414
  120f6c:	e3400014 	movt	r0, #20
  120f70:	ebff8867 	bl	103114 <rt_kprintf>
  120f74:	e3a01f6b 	mov	r1, #428	; 0x1ac
  120f78:	e30802b4 	movw	r0, #33460	; 0x82b4
  120f7c:	e3400014 	movt	r0, #20
  120f80:	ebffa85a 	bl	10b0f0 <sys_arch_assert>
          if (pcb->flags & TF_RXCLOSED) {
  120f84:	e51b3010 	ldr	r3, [fp, #-16]
  120f88:	e5d3301e 	ldrb	r3, [r3, #30]
  120f8c:	e2033010 	and	r3, r3, #16
  120f90:	e3530000 	cmp	r3, #0
  120f94:	0a000007 	beq	120fb8 <tcp_input+0xd24>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
  120f98:	e30e3260 	movw	r3, #57952	; 0xe260
  120f9c:	e3403014 	movt	r3, #20
  120fa0:	e5933000 	ldr	r3, [r3]
  120fa4:	e1a00003 	mov	r0, r3
  120fa8:	ebffe7c0 	bl	11aeb0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
  120fac:	e51b0010 	ldr	r0, [fp, #-16]
  120fb0:	ebfff297 	bl	11da14 <tcp_abort>
            goto aborted;
  120fb4:	ea000063 	b	121148 <tcp_input+0xeb4>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
  120fb8:	e51b3010 	ldr	r3, [fp, #-16]
  120fbc:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  120fc0:	e3530000 	cmp	r3, #0
  120fc4:	0a00000c 	beq	120ffc <tcp_input+0xd68>
  120fc8:	e51b3010 	ldr	r3, [fp, #-16]
  120fcc:	e5934084 	ldr	r4, [r3, #132]	; 0x84
  120fd0:	e51b3010 	ldr	r3, [fp, #-16]
  120fd4:	e5930010 	ldr	r0, [r3, #16]
  120fd8:	e30e3260 	movw	r3, #57952	; 0xe260
  120fdc:	e3403014 	movt	r3, #20
  120fe0:	e5932000 	ldr	r2, [r3]
  120fe4:	e3a03000 	mov	r3, #0
  120fe8:	e51b1010 	ldr	r1, [fp, #-16]
  120fec:	e12fff34 	blx	r4
  120ff0:	e1a03000 	mov	r3, r0
  120ff4:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  120ff8:	ea000008 	b	121020 <tcp_input+0xd8c>
  120ffc:	e30e3260 	movw	r3, #57952	; 0xe260
  121000:	e3403014 	movt	r3, #20
  121004:	e5932000 	ldr	r2, [r3]
  121008:	e3a03000 	mov	r3, #0
  12100c:	e51b1010 	ldr	r1, [fp, #-16]
  121010:	e3a00000 	mov	r0, #0
  121014:	ebfff956 	bl	11f574 <tcp_recv_null>
  121018:	e1a03000 	mov	r3, r0
  12101c:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
          if (err == ERR_ABRT) {
  121020:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  121024:	e373000d 	cmn	r3, #13
  121028:	0a000043 	beq	12113c <tcp_input+0xea8>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
  12102c:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  121030:	e3530000 	cmp	r3, #0
  121034:	0a000004 	beq	12104c <tcp_input+0xdb8>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
  121038:	e30e3260 	movw	r3, #57952	; 0xe260
  12103c:	e3403014 	movt	r3, #20
  121040:	e5932000 	ldr	r2, [r3]
  121044:	e51b3010 	ldr	r3, [fp, #-16]
  121048:	e5832078 	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
  12104c:	e30e325d 	movw	r3, #57949	; 0xe25d
  121050:	e3403014 	movt	r3, #20
  121054:	e5d33000 	ldrb	r3, [r3]
  121058:	e2033020 	and	r3, r3, #32
  12105c:	e3530000 	cmp	r3, #0
  121060:	0a00002a 	beq	121110 <tcp_input+0xe7c>
          if (pcb->refused_data != NULL) {
  121064:	e51b3010 	ldr	r3, [fp, #-16]
  121068:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  12106c:	e3530000 	cmp	r3, #0
  121070:	0a000008 	beq	121098 <tcp_input+0xe04>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
  121074:	e51b3010 	ldr	r3, [fp, #-16]
  121078:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  12107c:	e5d3200d 	ldrb	r2, [r3, #13]
  121080:	e51b3010 	ldr	r3, [fp, #-16]
  121084:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  121088:	e3822020 	orr	r2, r2, #32
  12108c:	e6ef2072 	uxtb	r2, r2
  121090:	e5c3200d 	strb	r2, [r3, #13]
  121094:	ea00001d 	b	121110 <tcp_input+0xe7c>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
  121098:	e51b3010 	ldr	r3, [fp, #-16]
  12109c:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  1210a0:	e3530a02 	cmp	r3, #8192	; 0x2000
  1210a4:	0a000005 	beq	1210c0 <tcp_input+0xe2c>
              pcb->rcv_wnd++;
  1210a8:	e51b3010 	ldr	r3, [fp, #-16]
  1210ac:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  1210b0:	e2833001 	add	r3, r3, #1
  1210b4:	e6ff2073 	uxth	r2, r3
  1210b8:	e51b3010 	ldr	r3, [fp, #-16]
  1210bc:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
            }
            TCP_EVENT_CLOSED(pcb, err);
  1210c0:	e51b3010 	ldr	r3, [fp, #-16]
  1210c4:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  1210c8:	e3530000 	cmp	r3, #0
  1210cc:	0a00000a 	beq	1210fc <tcp_input+0xe68>
  1210d0:	e51b3010 	ldr	r3, [fp, #-16]
  1210d4:	e5934084 	ldr	r4, [r3, #132]	; 0x84
  1210d8:	e51b3010 	ldr	r3, [fp, #-16]
  1210dc:	e5930010 	ldr	r0, [r3, #16]
  1210e0:	e3a03000 	mov	r3, #0
  1210e4:	e3a02000 	mov	r2, #0
  1210e8:	e51b1010 	ldr	r1, [fp, #-16]
  1210ec:	e12fff34 	blx	r4
  1210f0:	e1a03000 	mov	r3, r0
  1210f4:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  1210f8:	ea000001 	b	121104 <tcp_input+0xe70>
  1210fc:	e3a03000 	mov	r3, #0
  121100:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
            if (err == ERR_ABRT) {
  121104:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  121108:	e373000d 	cmn	r3, #13
  12110c:	0a00000c 	beq	121144 <tcp_input+0xeb0>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
  121110:	e30c3c34 	movw	r3, #52276	; 0xcc34
  121114:	e3403015 	movt	r3, #21
  121118:	e3a02000 	mov	r2, #0
  12111c:	e5832000 	str	r2, [r3]
        /* Try to send something out. */
        tcp_output(pcb);
  121120:	e51b0010 	ldr	r0, [fp, #-16]
  121124:	eb00138c 	bl	125f5c <tcp_output>
  121128:	ea000006 	b	121148 <tcp_input+0xeb4>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
  12112c:	e320f000 	nop	{0}
  121130:	ea000004 	b	121148 <tcp_input+0xeb4>
              goto aborted;
  121134:	e320f000 	nop	{0}
  121138:	ea000002 	b	121148 <tcp_input+0xeb4>
            goto aborted;
  12113c:	e320f000 	nop	{0}
  121140:	ea000000 	b	121148 <tcp_input+0xeb4>
              goto aborted;
  121144:	e320f000 	nop	{0}
    tcp_input_pcb = NULL;
  121148:	e30c3c34 	movw	r3, #52276	; 0xcc34
  12114c:	e3403015 	movt	r3, #21
  121150:	e3a02000 	mov	r2, #0
  121154:	e5832000 	str	r2, [r3]
    recv_data = NULL;
  121158:	e30e3260 	movw	r3, #57952	; 0xe260
  12115c:	e3403014 	movt	r3, #20
  121160:	e3a02000 	mov	r2, #0
  121164:	e5832000 	str	r2, [r3]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
  121168:	e30e3230 	movw	r3, #57904	; 0xe230
  12116c:	e3403014 	movt	r3, #20
  121170:	e5933004 	ldr	r3, [r3, #4]
  121174:	e3530000 	cmp	r3, #0
  121178:	0a000053 	beq	1212cc <tcp_input+0x1038>
    {
      pbuf_free(inseg.p);
  12117c:	e30e3230 	movw	r3, #57904	; 0xe230
  121180:	e3403014 	movt	r3, #20
  121184:	e5933004 	ldr	r3, [r3, #4]
  121188:	e1a00003 	mov	r0, r3
  12118c:	ebffe747 	bl	11aeb0 <pbuf_free>
      inseg.p = NULL;
  121190:	e30e3230 	movw	r3, #57904	; 0xe230
  121194:	e3403014 	movt	r3, #20
  121198:	e3a02000 	mov	r2, #0
  12119c:	e5832004 	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
  1211a0:	ea000049 	b	1212cc <tcp_input+0x1038>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
  1211a4:	e30e3240 	movw	r3, #57920	; 0xe240
  1211a8:	e3403014 	movt	r3, #20
  1211ac:	e5933000 	ldr	r3, [r3]
  1211b0:	e1d330bc 	ldrh	r3, [r3, #12]
  1211b4:	e6ff3073 	uxth	r3, r3
  1211b8:	e1a00003 	mov	r0, r3
  1211bc:	ebffd504 	bl	1165d4 <lwip_htons>
  1211c0:	e1a03000 	mov	r3, r0
  1211c4:	e2033004 	and	r3, r3, #4
  1211c8:	e3530000 	cmp	r3, #0
  1211cc:	1a000029 	bne	121278 <tcp_input+0xfe4>
      TCP_STATS_INC(tcp.proterr);
  1211d0:	e30c3a30 	movw	r3, #51760	; 0xca30
  1211d4:	e3403015 	movt	r3, #21
  1211d8:	e1d33bbc 	ldrh	r3, [r3, #188]	; 0xbc
  1211dc:	e2833001 	add	r3, r3, #1
  1211e0:	e6ff2073 	uxth	r2, r3
  1211e4:	e30c3a30 	movw	r3, #51760	; 0xca30
  1211e8:	e3403015 	movt	r3, #21
  1211ec:	e1c32bbc 	strh	r2, [r3, #188]	; 0xbc
      TCP_STATS_INC(tcp.drop);
  1211f0:	e30c3a30 	movw	r3, #51760	; 0xca30
  1211f4:	e3403015 	movt	r3, #21
  1211f8:	e1d33bb2 	ldrh	r3, [r3, #178]	; 0xb2
  1211fc:	e2833001 	add	r3, r3, #1
  121200:	e6ff2073 	uxth	r2, r3
  121204:	e30c3a30 	movw	r3, #51760	; 0xca30
  121208:	e3403015 	movt	r3, #21
  12120c:	e1c32bb2 	strh	r2, [r3, #178]	; 0xb2
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121210:	e30e3254 	movw	r3, #57940	; 0xe254
  121214:	e3403014 	movt	r3, #20
  121218:	e5930000 	ldr	r0, [r3]
  12121c:	e30e325a 	movw	r3, #57946	; 0xe25a
  121220:	e3403014 	movt	r3, #20
  121224:	e1d330b0 	ldrh	r3, [r3]
  121228:	e1a02003 	mov	r2, r3
  12122c:	e30e3250 	movw	r3, #57936	; 0xe250
  121230:	e3403014 	movt	r3, #20
  121234:	e5933000 	ldr	r3, [r3]
  121238:	e0821003 	add	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  12123c:	e30e3240 	movw	r3, #57920	; 0xe240
  121240:	e3403014 	movt	r3, #20
  121244:	e5933000 	ldr	r3, [r3]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121248:	e1d330b2 	ldrh	r3, [r3, #2]
  12124c:	e6ff2073 	uxth	r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  121250:	e30e3240 	movw	r3, #57920	; 0xe240
  121254:	e3403014 	movt	r3, #20
  121258:	e5933000 	ldr	r3, [r3]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  12125c:	e1d330b0 	ldrh	r3, [r3]
  121260:	e6ff3073 	uxth	r3, r3
  121264:	e58d3004 	str	r3, [sp, #4]
  121268:	e58d2000 	str	r2, [sp]
  12126c:	e59f3068 	ldr	r3, [pc, #104]	; 1212dc <tcp_input+0x1048>
  121270:	e59f2060 	ldr	r2, [pc, #96]	; 1212d8 <tcp_input+0x1044>
  121274:	eb00159e 	bl	1268f4 <tcp_rst>
    pbuf_free(p);
  121278:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  12127c:	ebffe70b 	bl	11aeb0 <pbuf_free>
  return;
  121280:	ea000011 	b	1212cc <tcp_input+0x1038>
dropped:
  TCP_STATS_INC(tcp.drop);
  121284:	e30c3a30 	movw	r3, #51760	; 0xca30
  121288:	e3403015 	movt	r3, #21
  12128c:	e1d33bb2 	ldrh	r3, [r3, #178]	; 0xb2
  121290:	e2833001 	add	r3, r3, #1
  121294:	e6ff2073 	uxth	r2, r3
  121298:	e30c3a30 	movw	r3, #51760	; 0xca30
  12129c:	e3403015 	movt	r3, #21
  1212a0:	e1c32bb2 	strh	r2, [r3, #178]	; 0xb2
  MIB2_STATS_INC(mib2.tcpinerrs);
  1212a4:	e30c3a30 	movw	r3, #51760	; 0xca30
  1212a8:	e3403015 	movt	r3, #21
  1212ac:	e5933188 	ldr	r3, [r3, #392]	; 0x188
  1212b0:	e2832001 	add	r2, r3, #1
  1212b4:	e30c3a30 	movw	r3, #51760	; 0xca30
  1212b8:	e3403015 	movt	r3, #21
  1212bc:	e5832188 	str	r2, [r3, #392]	; 0x188
  pbuf_free(p);
  1212c0:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  1212c4:	ebffe6f9 	bl	11aeb0 <pbuf_free>
  1212c8:	ea000000 	b	1212d0 <tcp_input+0x103c>
  return;
  1212cc:	e320f000 	nop	{0}
}
  1212d0:	e24bd008 	sub	sp, fp, #8
  1212d4:	e8bd8810 	pop	{r4, fp, pc}
  1212d8:	0014f60c 	.word	0x0014f60c
  1212dc:	0014f608 	.word	0x0014f608

001212e0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
  1212e0:	e92d4800 	push	{fp, lr}
  1212e4:	e28db004 	add	fp, sp, #4
  1212e8:	e24dd020 	sub	sp, sp, #32
  1212ec:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
  1212f0:	e30e325c 	movw	r3, #57948	; 0xe25c
  1212f4:	e3403014 	movt	r3, #20
  1212f8:	e5d33000 	ldrb	r3, [r3]
  1212fc:	e2033004 	and	r3, r3, #4
  121300:	e3530000 	cmp	r3, #0
  121304:	1a0000c8 	bne	12162c <tcp_listen_input+0x34c>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
  121308:	e30e325c 	movw	r3, #57948	; 0xe25c
  12130c:	e3403014 	movt	r3, #20
  121310:	e5d33000 	ldrb	r3, [r3]
  121314:	e2033010 	and	r3, r3, #16
  121318:	e3530000 	cmp	r3, #0
  12131c:	0a00001a 	beq	12138c <tcp_listen_input+0xac>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121320:	e30e3254 	movw	r3, #57940	; 0xe254
  121324:	e3403014 	movt	r3, #20
  121328:	e5930000 	ldr	r0, [r3]
  12132c:	e30e325a 	movw	r3, #57946	; 0xe25a
  121330:	e3403014 	movt	r3, #20
  121334:	e1d330b0 	ldrh	r3, [r3]
  121338:	e1a02003 	mov	r2, r3
  12133c:	e30e3250 	movw	r3, #57936	; 0xe250
  121340:	e3403014 	movt	r3, #20
  121344:	e5933000 	ldr	r3, [r3]
  121348:	e0821003 	add	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  12134c:	e30e3240 	movw	r3, #57920	; 0xe240
  121350:	e3403014 	movt	r3, #20
  121354:	e5933000 	ldr	r3, [r3]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121358:	e1d330b2 	ldrh	r3, [r3, #2]
  12135c:	e6ff2073 	uxth	r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  121360:	e30e3240 	movw	r3, #57920	; 0xe240
  121364:	e3403014 	movt	r3, #20
  121368:	e5933000 	ldr	r3, [r3]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  12136c:	e1d330b0 	ldrh	r3, [r3]
  121370:	e6ff3073 	uxth	r3, r3
  121374:	e58d3004 	str	r3, [sp, #4]
  121378:	e58d2000 	str	r2, [sp]
  12137c:	e59f32bc 	ldr	r3, [pc, #700]	; 121640 <tcp_listen_input+0x360>
  121380:	e59f22bc 	ldr	r2, [pc, #700]	; 121644 <tcp_listen_input+0x364>
  121384:	eb00155a 	bl	1268f4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
  121388:	ea0000a9 	b	121634 <tcp_listen_input+0x354>
  } else if (flags & TCP_SYN) {
  12138c:	e30e325c 	movw	r3, #57948	; 0xe25c
  121390:	e3403014 	movt	r3, #20
  121394:	e5d33000 	ldrb	r3, [r3]
  121398:	e2033002 	and	r3, r3, #2
  12139c:	e3530000 	cmp	r3, #0
  1213a0:	0a0000a3 	beq	121634 <tcp_listen_input+0x354>
    npcb = tcp_alloc(pcb->prio);
  1213a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1213a8:	e5d33018 	ldrb	r3, [r3, #24]
  1213ac:	e1a00003 	mov	r0, r3
  1213b0:	ebfff935 	bl	11f88c <tcp_alloc>
  1213b4:	e50b0008 	str	r0, [fp, #-8]
    if (npcb == NULL) {
  1213b8:	e51b3008 	ldr	r3, [fp, #-8]
  1213bc:	e3530000 	cmp	r3, #0
  1213c0:	1a000018 	bne	121428 <tcp_listen_input+0x148>
      TCP_STATS_INC(tcp.memerr);
  1213c4:	e30c3a30 	movw	r3, #51760	; 0xca30
  1213c8:	e3403015 	movt	r3, #21
  1213cc:	e1d33bb8 	ldrh	r3, [r3, #184]	; 0xb8
  1213d0:	e2833001 	add	r3, r3, #1
  1213d4:	e6ff2073 	uxth	r2, r3
  1213d8:	e30c3a30 	movw	r3, #51760	; 0xca30
  1213dc:	e3403015 	movt	r3, #21
  1213e0:	e1c32bb8 	strh	r2, [r3, #184]	; 0xb8
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
  1213e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1213e8:	e593301c 	ldr	r3, [r3, #28]
  1213ec:	e3530000 	cmp	r3, #0
  1213f0:	0a000009 	beq	12141c <tcp_listen_input+0x13c>
  1213f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1213f8:	e593301c 	ldr	r3, [r3, #28]
  1213fc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  121400:	e5920010 	ldr	r0, [r2, #16]
  121404:	e3e02000 	mvn	r2, #0
  121408:	e3a01000 	mov	r1, #0
  12140c:	e12fff33 	blx	r3
  121410:	e1a03000 	mov	r3, r0
  121414:	e54b300e 	strb	r3, [fp, #-14]
      return;
  121418:	ea000086 	b	121638 <tcp_listen_input+0x358>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
  12141c:	e3e0300f 	mvn	r3, #15
  121420:	e54b300e 	strb	r3, [fp, #-14]
      return;
  121424:	ea000083 	b	121638 <tcp_listen_input+0x358>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
  121428:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  12142c:	e3403014 	movt	r3, #20
  121430:	e5932014 	ldr	r2, [r3, #20]
  121434:	e51b3008 	ldr	r3, [fp, #-8]
  121438:	e5832000 	str	r2, [r3]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
  12143c:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  121440:	e3403014 	movt	r3, #20
  121444:	e5932010 	ldr	r2, [r3, #16]
  121448:	e51b3008 	ldr	r3, [fp, #-8]
  12144c:	e5832004 	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
  121450:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  121454:	e1d321ba 	ldrh	r2, [r3, #26]
  121458:	e51b3008 	ldr	r3, [fp, #-8]
  12145c:	e1c321ba 	strh	r2, [r3, #26]
    npcb->remote_port = tcphdr->src;
  121460:	e30e3240 	movw	r3, #57920	; 0xe240
  121464:	e3403014 	movt	r3, #20
  121468:	e5933000 	ldr	r3, [r3]
  12146c:	e1d330b0 	ldrh	r3, [r3]
  121470:	e6ff2073 	uxth	r2, r3
  121474:	e51b3008 	ldr	r3, [fp, #-8]
  121478:	e1c321bc 	strh	r2, [r3, #28]
    npcb->state = SYN_RCVD;
  12147c:	e51b3008 	ldr	r3, [fp, #-8]
  121480:	e3a02003 	mov	r2, #3
  121484:	e5832014 	str	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
  121488:	e30e3250 	movw	r3, #57936	; 0xe250
  12148c:	e3403014 	movt	r3, #20
  121490:	e5933000 	ldr	r3, [r3]
  121494:	e2832001 	add	r2, r3, #1
  121498:	e51b3008 	ldr	r3, [fp, #-8]
  12149c:	e5832028 	str	r2, [r3, #40]	; 0x28
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
  1214a0:	e51b3008 	ldr	r3, [fp, #-8]
  1214a4:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  1214a8:	e51b3008 	ldr	r3, [fp, #-8]
  1214ac:	e5832030 	str	r2, [r3, #48]	; 0x30
    iss = tcp_next_iss(npcb);
  1214b0:	e51b0008 	ldr	r0, [fp, #-8]
  1214b4:	ebfffadc 	bl	12002c <tcp_next_iss>
  1214b8:	e50b000c 	str	r0, [fp, #-12]
    npcb->snd_wl2 = iss;
  1214bc:	e51b3008 	ldr	r3, [fp, #-8]
  1214c0:	e51b200c 	ldr	r2, [fp, #-12]
  1214c4:	e5832058 	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
  1214c8:	e51b3008 	ldr	r3, [fp, #-8]
  1214cc:	e51b200c 	ldr	r2, [fp, #-12]
  1214d0:	e5832050 	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
  1214d4:	e51b3008 	ldr	r3, [fp, #-8]
  1214d8:	e51b200c 	ldr	r2, [fp, #-12]
  1214dc:	e5832048 	str	r2, [r3, #72]	; 0x48
    npcb->snd_lbb = iss;
  1214e0:	e51b3008 	ldr	r3, [fp, #-8]
  1214e4:	e51b200c 	ldr	r2, [fp, #-12]
  1214e8:	e583205c 	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
  1214ec:	e30e3250 	movw	r3, #57936	; 0xe250
  1214f0:	e3403014 	movt	r3, #20
  1214f4:	e5933000 	ldr	r3, [r3]
  1214f8:	e2432001 	sub	r2, r3, #1
  1214fc:	e51b3008 	ldr	r3, [fp, #-8]
  121500:	e5832054 	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
  121504:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  121508:	e5932010 	ldr	r2, [r3, #16]
  12150c:	e51b3008 	ldr	r3, [fp, #-8]
  121510:	e5832010 	str	r2, [r3, #16]
    npcb->listener = pcb;
  121514:	e51b3008 	ldr	r3, [fp, #-8]
  121518:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  12151c:	e583207c 	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
  121520:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  121524:	e5d33008 	ldrb	r3, [r3, #8]
  121528:	e203300c 	and	r3, r3, #12
  12152c:	e6ef2073 	uxtb	r2, r3
  121530:	e51b3008 	ldr	r3, [fp, #-8]
  121534:	e5c32008 	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
  121538:	e30c3c20 	movw	r3, #52256	; 0xcc20
  12153c:	e3403015 	movt	r3, #21
  121540:	e5932000 	ldr	r2, [r3]
  121544:	e51b3008 	ldr	r3, [fp, #-8]
  121548:	e583200c 	str	r2, [r3, #12]
  12154c:	e30c3c20 	movw	r3, #52256	; 0xcc20
  121550:	e3403015 	movt	r3, #21
  121554:	e51b2008 	ldr	r2, [fp, #-8]
  121558:	e5832000 	str	r2, [r3]
  12155c:	eb001738 	bl	127244 <tcp_timer_needed>
  121560:	e30c3c1c 	movw	r3, #52252	; 0xcc1c
  121564:	e3403015 	movt	r3, #21
  121568:	e3a02001 	mov	r2, #1
  12156c:	e5c32000 	strb	r2, [r3]
    tcp_parseopt(npcb);
  121570:	e51b0008 	ldr	r0, [fp, #-8]
  121574:	eb000bf1 	bl	124540 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
  121578:	e30e3240 	movw	r3, #57920	; 0xe240
  12157c:	e3403014 	movt	r3, #20
  121580:	e5933000 	ldr	r3, [r3]
  121584:	e1d330be 	ldrh	r3, [r3, #14]
  121588:	e6ff2073 	uxth	r2, r3
  12158c:	e51b3008 	ldr	r3, [fp, #-8]
  121590:	e1c326b0 	strh	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
  121594:	e51b3008 	ldr	r3, [fp, #-8]
  121598:	e1d326b0 	ldrh	r2, [r3, #96]	; 0x60
  12159c:	e51b3008 	ldr	r3, [fp, #-8]
  1215a0:	e1c326b2 	strh	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
  1215a4:	e51b3008 	ldr	r3, [fp, #-8]
  1215a8:	e1d323b6 	ldrh	r2, [r3, #54]	; 0x36
  1215ac:	e51b3008 	ldr	r3, [fp, #-8]
  1215b0:	e2833004 	add	r3, r3, #4
  1215b4:	e1a01003 	mov	r1, r3
  1215b8:	e1a00002 	mov	r0, r2
  1215bc:	ebfffaaf 	bl	120080 <tcp_eff_send_mss_impl>
  1215c0:	e1a03000 	mov	r3, r0
  1215c4:	e1a02003 	mov	r2, r3
  1215c8:	e51b3008 	ldr	r3, [fp, #-8]
  1215cc:	e1c323b6 	strh	r2, [r3, #54]	; 0x36
    MIB2_STATS_INC(mib2.tcppassiveopens);
  1215d0:	e30c3a30 	movw	r3, #51760	; 0xca30
  1215d4:	e3403015 	movt	r3, #21
  1215d8:	e5933170 	ldr	r3, [r3, #368]	; 0x170
  1215dc:	e2832001 	add	r2, r3, #1
  1215e0:	e30c3a30 	movw	r3, #51760	; 0xca30
  1215e4:	e3403015 	movt	r3, #21
  1215e8:	e5832170 	str	r2, [r3, #368]	; 0x170
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
  1215ec:	e3a01012 	mov	r1, #18
  1215f0:	e51b0008 	ldr	r0, [fp, #-8]
  1215f4:	eb001109 	bl	125a20 <tcp_enqueue_flags>
  1215f8:	e1a03000 	mov	r3, r0
  1215fc:	e54b300d 	strb	r3, [fp, #-13]
    if (rc != ERR_OK) {
  121600:	e15b30dd 	ldrsb	r3, [fp, #-13]
  121604:	e3530000 	cmp	r3, #0
  121608:	0a000003 	beq	12161c <tcp_listen_input+0x33c>
      tcp_abandon(npcb, 0);
  12160c:	e3a01000 	mov	r1, #0
  121610:	e51b0008 	ldr	r0, [fp, #-8]
  121614:	ebfff05f 	bl	11d798 <tcp_abandon>
      return;
  121618:	ea000006 	b	121638 <tcp_listen_input+0x358>
    tcp_output(npcb);
  12161c:	e51b0008 	ldr	r0, [fp, #-8]
  121620:	eb00124d 	bl	125f5c <tcp_output>
  return;
  121624:	e320f000 	nop	{0}
  121628:	ea000001 	b	121634 <tcp_listen_input+0x354>
    return;
  12162c:	e320f000 	nop	{0}
  121630:	ea000000 	b	121638 <tcp_listen_input+0x358>
  return;
  121634:	e320f000 	nop	{0}
}
  121638:	e24bd004 	sub	sp, fp, #4
  12163c:	e8bd8800 	pop	{fp, pc}
  121640:	0014f608 	.word	0x0014f608
  121644:	0014f60c 	.word	0x0014f60c

00121648 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
  121648:	e92d4800 	push	{fp, lr}
  12164c:	e28db004 	add	fp, sp, #4
  121650:	e24dd010 	sub	sp, sp, #16
  121654:	e50b0008 	str	r0, [fp, #-8]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
  121658:	e30e325c 	movw	r3, #57948	; 0xe25c
  12165c:	e3403014 	movt	r3, #20
  121660:	e5d33000 	ldrb	r3, [r3]
  121664:	e2033004 	and	r3, r3, #4
  121668:	e3530000 	cmp	r3, #0
  12166c:	1a00004d 	bne	1217a8 <tcp_timewait_input+0x160>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
  121670:	e30e325c 	movw	r3, #57948	; 0xe25c
  121674:	e3403014 	movt	r3, #20
  121678:	e5d33000 	ldrb	r3, [r3]
  12167c:	e2033002 	and	r3, r3, #2
  121680:	e3530000 	cmp	r3, #0
  121684:	0a00002d 	beq	121740 <tcp_timewait_input+0xf8>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
  121688:	e30e3250 	movw	r3, #57936	; 0xe250
  12168c:	e3403014 	movt	r3, #20
  121690:	e5932000 	ldr	r2, [r3]
  121694:	e51b3008 	ldr	r3, [fp, #-8]
  121698:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12169c:	e0423003 	sub	r3, r2, r3
  1216a0:	e3530000 	cmp	r3, #0
  1216a4:	ba000030 	blt	12176c <tcp_timewait_input+0x124>
  1216a8:	e30e3250 	movw	r3, #57936	; 0xe250
  1216ac:	e3403014 	movt	r3, #20
  1216b0:	e5932000 	ldr	r2, [r3]
  1216b4:	e51b3008 	ldr	r3, [fp, #-8]
  1216b8:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  1216bc:	e51b1008 	ldr	r1, [fp, #-8]
  1216c0:	e1d112bc 	ldrh	r1, [r1, #44]	; 0x2c
  1216c4:	e0833001 	add	r3, r3, r1
  1216c8:	e0423003 	sub	r3, r2, r3
  1216cc:	e3530000 	cmp	r3, #0
  1216d0:	ca000025 	bgt	12176c <tcp_timewait_input+0x124>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  1216d4:	e30e3254 	movw	r3, #57940	; 0xe254
  1216d8:	e3403014 	movt	r3, #20
  1216dc:	e5930000 	ldr	r0, [r3]
  1216e0:	e30e325a 	movw	r3, #57946	; 0xe25a
  1216e4:	e3403014 	movt	r3, #20
  1216e8:	e1d330b0 	ldrh	r3, [r3]
  1216ec:	e1a02003 	mov	r2, r3
  1216f0:	e30e3250 	movw	r3, #57936	; 0xe250
  1216f4:	e3403014 	movt	r3, #20
  1216f8:	e5933000 	ldr	r3, [r3]
  1216fc:	e0821003 	add	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  121700:	e30e3240 	movw	r3, #57920	; 0xe240
  121704:	e3403014 	movt	r3, #20
  121708:	e5933000 	ldr	r3, [r3]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  12170c:	e1d330b2 	ldrh	r3, [r3, #2]
  121710:	e6ff2073 	uxth	r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  121714:	e30e3240 	movw	r3, #57920	; 0xe240
  121718:	e3403014 	movt	r3, #20
  12171c:	e5933000 	ldr	r3, [r3]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121720:	e1d330b0 	ldrh	r3, [r3]
  121724:	e6ff3073 	uxth	r3, r3
  121728:	e58d3004 	str	r3, [sp, #4]
  12172c:	e58d2000 	str	r2, [sp]
  121730:	e59f3084 	ldr	r3, [pc, #132]	; 1217bc <tcp_timewait_input+0x174>
  121734:	e59f2084 	ldr	r2, [pc, #132]	; 1217c0 <tcp_timewait_input+0x178>
  121738:	eb00146d 	bl	1268f4 <tcp_rst>
      return;
  12173c:	ea00001c 	b	1217b4 <tcp_timewait_input+0x16c>
    }
  } else if (flags & TCP_FIN) {
  121740:	e30e325c 	movw	r3, #57948	; 0xe25c
  121744:	e3403014 	movt	r3, #20
  121748:	e5d33000 	ldrb	r3, [r3]
  12174c:	e2033001 	and	r3, r3, #1
  121750:	e3530000 	cmp	r3, #0
  121754:	0a000004 	beq	12176c <tcp_timewait_input+0x124>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
  121758:	e30c3c24 	movw	r3, #52260	; 0xcc24
  12175c:	e3403015 	movt	r3, #21
  121760:	e5932000 	ldr	r2, [r3]
  121764:	e51b3008 	ldr	r3, [fp, #-8]
  121768:	e5832024 	str	r2, [r3, #36]	; 0x24
  }

  if ((tcplen > 0)) {
  12176c:	e30e325a 	movw	r3, #57946	; 0xe25a
  121770:	e3403014 	movt	r3, #20
  121774:	e1d330b0 	ldrh	r3, [r3]
  121778:	e3530000 	cmp	r3, #0
  12177c:	0a00000b 	beq	1217b0 <tcp_timewait_input+0x168>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
  121780:	e51b3008 	ldr	r3, [fp, #-8]
  121784:	e5d3301e 	ldrb	r3, [r3, #30]
  121788:	e3833002 	orr	r3, r3, #2
  12178c:	e6ef2073 	uxtb	r2, r3
  121790:	e51b3008 	ldr	r3, [fp, #-8]
  121794:	e5c3201e 	strb	r2, [r3, #30]
    tcp_output(pcb);
  121798:	e51b0008 	ldr	r0, [fp, #-8]
  12179c:	eb0011ee 	bl	125f5c <tcp_output>
  }
  return;
  1217a0:	e320f000 	nop	{0}
  1217a4:	ea000001 	b	1217b0 <tcp_timewait_input+0x168>
    return;
  1217a8:	e320f000 	nop	{0}
  1217ac:	ea000000 	b	1217b4 <tcp_timewait_input+0x16c>
  return;
  1217b0:	e320f000 	nop	{0}
}
  1217b4:	e24bd004 	sub	sp, fp, #4
  1217b8:	e8bd8800 	pop	{fp, pc}
  1217bc:	0014f608 	.word	0x0014f608
  1217c0:	0014f60c 	.word	0x0014f60c

001217c4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
  1217c4:	e92d4800 	push	{fp, lr}
  1217c8:	e28db004 	add	fp, sp, #4
  1217cc:	e24dd028 	sub	sp, sp, #40	; 0x28
  1217d0:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
  1217d4:	e3a03000 	mov	r3, #0
  1217d8:	e54b3009 	strb	r3, [fp, #-9]
  err_t err;

  err = ERR_OK;
  1217dc:	e3a03000 	mov	r3, #0
  1217e0:	e54b300a 	strb	r3, [fp, #-10]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
  1217e4:	e30e325c 	movw	r3, #57948	; 0xe25c
  1217e8:	e3403014 	movt	r3, #20
  1217ec:	e5d33000 	ldrb	r3, [r3]
  1217f0:	e2033004 	and	r3, r3, #4
  1217f4:	e3530000 	cmp	r3, #0
  1217f8:	0a000050 	beq	121940 <tcp_process+0x17c>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
  1217fc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121800:	e5933014 	ldr	r3, [r3, #20]
  121804:	e3530002 	cmp	r3, #2
  121808:	1a000009 	bne	121834 <tcp_process+0x70>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
  12180c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121810:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  121814:	e30e3254 	movw	r3, #57940	; 0xe254
  121818:	e3403014 	movt	r3, #20
  12181c:	e5933000 	ldr	r3, [r3]
  121820:	e1520003 	cmp	r2, r3
  121824:	1a000025 	bne	1218c0 <tcp_process+0xfc>
        acceptable = 1;
  121828:	e3a03001 	mov	r3, #1
  12182c:	e54b3009 	strb	r3, [fp, #-9]
  121830:	ea000022 	b	1218c0 <tcp_process+0xfc>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
  121834:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121838:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  12183c:	e30e3250 	movw	r3, #57936	; 0xe250
  121840:	e3403014 	movt	r3, #20
  121844:	e5933000 	ldr	r3, [r3]
  121848:	e1520003 	cmp	r2, r3
  12184c:	1a000002 	bne	12185c <tcp_process+0x98>
        acceptable = 1;
  121850:	e3a03001 	mov	r3, #1
  121854:	e54b3009 	strb	r3, [fp, #-9]
  121858:	ea000018 	b	1218c0 <tcp_process+0xfc>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
  12185c:	e30e3250 	movw	r3, #57936	; 0xe250
  121860:	e3403014 	movt	r3, #20
  121864:	e5932000 	ldr	r2, [r3]
  121868:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12186c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  121870:	e0423003 	sub	r3, r2, r3
  121874:	e3530000 	cmp	r3, #0
  121878:	ba000010 	blt	1218c0 <tcp_process+0xfc>
  12187c:	e30e3250 	movw	r3, #57936	; 0xe250
  121880:	e3403014 	movt	r3, #20
  121884:	e5932000 	ldr	r2, [r3]
  121888:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12188c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  121890:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  121894:	e1d112bc 	ldrh	r1, [r1, #44]	; 0x2c
  121898:	e0833001 	add	r3, r3, r1
  12189c:	e0423003 	sub	r3, r2, r3
  1218a0:	e3530000 	cmp	r3, #0
  1218a4:	ca000005 	bgt	1218c0 <tcp_process+0xfc>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
  1218a8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1218ac:	e5d3301e 	ldrb	r3, [r3, #30]
  1218b0:	e3833002 	orr	r3, r3, #2
  1218b4:	e6ef2073 	uxtb	r2, r3
  1218b8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1218bc:	e5c3201e 	strb	r2, [r3, #30]
      }
    }

    if (acceptable) {
  1218c0:	e55b3009 	ldrb	r3, [fp, #-9]
  1218c4:	e3530000 	cmp	r3, #0
  1218c8:	0a00001a 	beq	121938 <tcp_process+0x174>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
  1218cc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1218d0:	e5933014 	ldr	r3, [r3, #20]
  1218d4:	e3530000 	cmp	r3, #0
  1218d8:	1a000006 	bne	1218f8 <tcp_process+0x134>
  1218dc:	e3080430 	movw	r0, #33840	; 0x8430
  1218e0:	e3400014 	movt	r0, #20
  1218e4:	ebff860a 	bl	103114 <rt_kprintf>
  1218e8:	e3a01fb5 	mov	r1, #724	; 0x2d4
  1218ec:	e30802b4 	movw	r0, #33460	; 0x82b4
  1218f0:	e3400014 	movt	r0, #20
  1218f4:	ebffa5fd 	bl	10b0f0 <sys_arch_assert>
      recv_flags |= TF_RESET;
  1218f8:	e30e325d 	movw	r3, #57949	; 0xe25d
  1218fc:	e3403014 	movt	r3, #20
  121900:	e5d33000 	ldrb	r3, [r3]
  121904:	e3833008 	orr	r3, r3, #8
  121908:	e6ef2073 	uxtb	r2, r3
  12190c:	e30e325d 	movw	r3, #57949	; 0xe25d
  121910:	e3403014 	movt	r3, #20
  121914:	e5c32000 	strb	r2, [r3]
      pcb->flags &= ~TF_ACK_DELAY;
  121918:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12191c:	e5d3301e 	ldrb	r3, [r3, #30]
  121920:	e3c33001 	bic	r3, r3, #1
  121924:	e6ef2073 	uxtb	r2, r3
  121928:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12192c:	e5c3201e 	strb	r2, [r3, #30]
      return ERR_RST;
  121930:	e3e0300d 	mvn	r3, #13
  121934:	ea0002fd 	b	122530 <tcp_process+0xd6c>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
  121938:	e3a03000 	mov	r3, #0
  12193c:	ea0002fb 	b	122530 <tcp_process+0xd6c>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
  121940:	e30e325c 	movw	r3, #57948	; 0xe25c
  121944:	e3403014 	movt	r3, #20
  121948:	e5d33000 	ldrb	r3, [r3]
  12194c:	e2033002 	and	r3, r3, #2
  121950:	e3530000 	cmp	r3, #0
  121954:	0a00000f 	beq	121998 <tcp_process+0x1d4>
  121958:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12195c:	e5933014 	ldr	r3, [r3, #20]
  121960:	e3530002 	cmp	r3, #2
  121964:	0a00000b 	beq	121998 <tcp_process+0x1d4>
  121968:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12196c:	e5933014 	ldr	r3, [r3, #20]
  121970:	e3530003 	cmp	r3, #3
  121974:	0a000007 	beq	121998 <tcp_process+0x1d4>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
  121978:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12197c:	e5d3301e 	ldrb	r3, [r3, #30]
  121980:	e3833002 	orr	r3, r3, #2
  121984:	e6ef2073 	uxtb	r2, r3
  121988:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12198c:	e5c3201e 	strb	r2, [r3, #30]
    return ERR_OK;
  121990:	e3a03000 	mov	r3, #0
  121994:	ea0002e5 	b	122530 <tcp_process+0xd6c>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
  121998:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12199c:	e5d3301e 	ldrb	r3, [r3, #30]
  1219a0:	e2033010 	and	r3, r3, #16
  1219a4:	e3530000 	cmp	r3, #0
  1219a8:	1a000004 	bne	1219c0 <tcp_process+0x1fc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
  1219ac:	e30c3c24 	movw	r3, #52260	; 0xcc24
  1219b0:	e3403015 	movt	r3, #21
  1219b4:	e5932000 	ldr	r2, [r3]
  1219b8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1219bc:	e5832024 	str	r2, [r3, #36]	; 0x24
  }
  pcb->keep_cnt_sent = 0;
  1219c0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1219c4:	e3a02000 	mov	r2, #0
  1219c8:	e5c320a2 	strb	r2, [r3, #162]	; 0xa2

  tcp_parseopt(pcb);
  1219cc:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1219d0:	eb000ada 	bl	124540 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
  1219d4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1219d8:	e5933014 	ldr	r3, [r3, #20]
  1219dc:	e2433002 	sub	r3, r3, #2
  1219e0:	e3530007 	cmp	r3, #7
  1219e4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  1219e8:	ea0002c0 	b	1224f0 <tcp_process+0xd2c>
  1219ec:	00121a0c 	.word	0x00121a0c
  1219f0:	00121d60 	.word	0x00121d60
  1219f4:	00122004 	.word	0x00122004
  1219f8:	0012204c 	.word	0x0012204c
  1219fc:	0012222c 	.word	0x0012222c
  121a00:	00122004 	.word	0x00122004
  121a04:	0012234c 	.word	0x0012234c
  121a08:	00122480 	.word	0x00122480
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
  121a0c:	e30e325c 	movw	r3, #57948	; 0xe25c
  121a10:	e3403014 	movt	r3, #20
  121a14:	e5d33000 	ldrb	r3, [r3]
  121a18:	e2033010 	and	r3, r3, #16
  121a1c:	e3530000 	cmp	r3, #0
  121a20:	0a0000a4 	beq	121cb8 <tcp_process+0x4f4>
  121a24:	e30e325c 	movw	r3, #57948	; 0xe25c
  121a28:	e3403014 	movt	r3, #20
  121a2c:	e5d33000 	ldrb	r3, [r3]
  121a30:	e2033002 	and	r3, r3, #2
  121a34:	e3530000 	cmp	r3, #0
  121a38:	0a00009e 	beq	121cb8 <tcp_process+0x4f4>
        && (ackno == pcb->lastack + 1)) {
  121a3c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121a40:	e5933048 	ldr	r3, [r3, #72]	; 0x48
  121a44:	e2832001 	add	r2, r3, #1
  121a48:	e30e3254 	movw	r3, #57940	; 0xe254
  121a4c:	e3403014 	movt	r3, #20
  121a50:	e5933000 	ldr	r3, [r3]
  121a54:	e1520003 	cmp	r2, r3
  121a58:	1a000096 	bne	121cb8 <tcp_process+0x4f4>
      pcb->rcv_nxt = seqno + 1;
  121a5c:	e30e3250 	movw	r3, #57936	; 0xe250
  121a60:	e3403014 	movt	r3, #20
  121a64:	e5933000 	ldr	r3, [r3]
  121a68:	e2832001 	add	r2, r3, #1
  121a6c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121a70:	e5832028 	str	r2, [r3, #40]	; 0x28
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
  121a74:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121a78:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  121a7c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121a80:	e5832030 	str	r2, [r3, #48]	; 0x30
      pcb->lastack = ackno;
  121a84:	e30e3254 	movw	r3, #57940	; 0xe254
  121a88:	e3403014 	movt	r3, #20
  121a8c:	e5932000 	ldr	r2, [r3]
  121a90:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121a94:	e5832048 	str	r2, [r3, #72]	; 0x48
      pcb->snd_wnd = tcphdr->wnd;
  121a98:	e30e3240 	movw	r3, #57920	; 0xe240
  121a9c:	e3403014 	movt	r3, #20
  121aa0:	e5933000 	ldr	r3, [r3]
  121aa4:	e1d330be 	ldrh	r3, [r3, #14]
  121aa8:	e6ff2073 	uxth	r2, r3
  121aac:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121ab0:	e1c326b0 	strh	r2, [r3, #96]	; 0x60
      pcb->snd_wnd_max = pcb->snd_wnd;
  121ab4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121ab8:	e1d326b0 	ldrh	r2, [r3, #96]	; 0x60
  121abc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121ac0:	e1c326b2 	strh	r2, [r3, #98]	; 0x62
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
  121ac4:	e30e3250 	movw	r3, #57936	; 0xe250
  121ac8:	e3403014 	movt	r3, #20
  121acc:	e5933000 	ldr	r3, [r3]
  121ad0:	e2432001 	sub	r2, r3, #1
  121ad4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121ad8:	e5832054 	str	r2, [r3, #84]	; 0x54
      pcb->state = ESTABLISHED;
  121adc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121ae0:	e3a02004 	mov	r2, #4
  121ae4:	e5832014 	str	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
  121ae8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121aec:	e1d323b6 	ldrh	r2, [r3, #54]	; 0x36
  121af0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121af4:	e2833004 	add	r3, r3, #4
  121af8:	e1a01003 	mov	r1, r3
  121afc:	e1a00002 	mov	r0, r2
  121b00:	ebfff95e 	bl	120080 <tcp_eff_send_mss_impl>
  121b04:	e1a03000 	mov	r3, r0
  121b08:	e1a02003 	mov	r2, r3
  121b0c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121b10:	e1c323b6 	strh	r2, [r3, #54]	; 0x36
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
  121b14:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121b18:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  121b1c:	e1a03083 	lsl	r3, r3, #1
  121b20:	e301211c 	movw	r2, #4380	; 0x111c
  121b24:	e1530002 	cmp	r3, r2
  121b28:	21a02003 	movcs	r2, r3
  121b2c:	31a02002 	movcc	r2, r2
  121b30:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121b34:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  121b38:	e1a03103 	lsl	r3, r3, #2
  121b3c:	e1520003 	cmp	r2, r3
  121b40:	31a03002 	movcc	r3, r2
  121b44:	21a03003 	movcs	r3, r3
  121b48:	e6ff2073 	uxth	r2, r3
  121b4c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121b50:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
  121b54:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121b58:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  121b5c:	e3530000 	cmp	r3, #0
  121b60:	1a000006 	bne	121b80 <tcp_process+0x3bc>
  121b64:	e3080450 	movw	r0, #33872	; 0x8450
  121b68:	e3400014 	movt	r0, #20
  121b6c:	ebff8568 	bl	103114 <rt_kprintf>
  121b70:	e3001307 	movw	r1, #775	; 0x307
  121b74:	e30802b4 	movw	r0, #33460	; 0x82b4
  121b78:	e3400014 	movt	r0, #20
  121b7c:	ebffa55b 	bl	10b0f0 <sys_arch_assert>
      --pcb->snd_queuelen;
  121b80:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121b84:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  121b88:	e2433001 	sub	r3, r3, #1
  121b8c:	e6ff2073 	uxth	r2, r3
  121b90:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121b94:	e1c326b6 	strh	r2, [r3, #102]	; 0x66
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
  121b98:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121b9c:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  121ba0:	e50b3008 	str	r3, [fp, #-8]
      if (rseg == NULL) {
  121ba4:	e51b3008 	ldr	r3, [fp, #-8]
  121ba8:	e3530000 	cmp	r3, #0
  121bac:	1a000011 	bne	121bf8 <tcp_process+0x434>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
  121bb0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121bb4:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  121bb8:	e50b3008 	str	r3, [fp, #-8]
        LWIP_ASSERT("no segment to free", rseg != NULL);
  121bbc:	e51b3008 	ldr	r3, [fp, #-8]
  121bc0:	e3530000 	cmp	r3, #0
  121bc4:	1a000006 	bne	121be4 <tcp_process+0x420>
  121bc8:	e3080468 	movw	r0, #33896	; 0x8468
  121bcc:	e3400014 	movt	r0, #20
  121bd0:	ebff854f 	bl	103114 <rt_kprintf>
  121bd4:	e300130f 	movw	r1, #783	; 0x30f
  121bd8:	e30802b4 	movw	r0, #33460	; 0x82b4
  121bdc:	e3400014 	movt	r0, #20
  121be0:	ebffa542 	bl	10b0f0 <sys_arch_assert>
        pcb->unsent = rseg->next;
  121be4:	e51b3008 	ldr	r3, [fp, #-8]
  121be8:	e5932000 	ldr	r2, [r3]
  121bec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121bf0:	e583206c 	str	r2, [r3, #108]	; 0x6c
  121bf4:	ea000003 	b	121c08 <tcp_process+0x444>
      } else {
        pcb->unacked = rseg->next;
  121bf8:	e51b3008 	ldr	r3, [fp, #-8]
  121bfc:	e5932000 	ldr	r2, [r3]
  121c00:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121c04:	e5832070 	str	r2, [r3, #112]	; 0x70
      }
      tcp_seg_free(rseg);
  121c08:	e51b0008 	ldr	r0, [fp, #-8]
  121c0c:	ebfff61b 	bl	11f480 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
  121c10:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121c14:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  121c18:	e3530000 	cmp	r3, #0
  121c1c:	1a000003 	bne	121c30 <tcp_process+0x46c>
        pcb->rtime = -1;
  121c20:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121c24:	e3e02000 	mvn	r2, #0
  121c28:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
  121c2c:	ea000005 	b	121c48 <tcp_process+0x484>
      } else {
        pcb->rtime = 0;
  121c30:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121c34:	e3a02000 	mov	r2, #0
  121c38:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
        pcb->nrtx = 0;
  121c3c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121c40:	e3a02000 	mov	r2, #0
  121c44:	e5c32046 	strb	r2, [r3, #70]	; 0x46
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
  121c48:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121c4c:	e5933088 	ldr	r3, [r3, #136]	; 0x88
  121c50:	e3530000 	cmp	r3, #0
  121c54:	0a000009 	beq	121c80 <tcp_process+0x4bc>
  121c58:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121c5c:	e5933088 	ldr	r3, [r3, #136]	; 0x88
  121c60:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  121c64:	e5920010 	ldr	r0, [r2, #16]
  121c68:	e3a02000 	mov	r2, #0
  121c6c:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  121c70:	e12fff33 	blx	r3
  121c74:	e1a03000 	mov	r3, r0
  121c78:	e54b300a 	strb	r3, [fp, #-10]
  121c7c:	ea000001 	b	121c88 <tcp_process+0x4c4>
  121c80:	e3a03000 	mov	r3, #0
  121c84:	e54b300a 	strb	r3, [fp, #-10]
      if (err == ERR_ABRT) {
  121c88:	e15b30da 	ldrsb	r3, [fp, #-10]
  121c8c:	e373000d 	cmn	r3, #13
  121c90:	1a000001 	bne	121c9c <tcp_process+0x4d8>
        return ERR_ABRT;
  121c94:	e3e0300c 	mvn	r3, #12
  121c98:	ea000224 	b	122530 <tcp_process+0xd6c>
      }
      tcp_ack_now(pcb);
  121c9c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121ca0:	e5d3301e 	ldrb	r3, [r3, #30]
  121ca4:	e3833002 	orr	r3, r3, #2
  121ca8:	e6ef2073 	uxtb	r2, r3
  121cac:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121cb0:	e5c3201e 	strb	r2, [r3, #30]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
  121cb4:	ea00020f 	b	1224f8 <tcp_process+0xd34>
    else if (flags & TCP_ACK) {
  121cb8:	e30e325c 	movw	r3, #57948	; 0xe25c
  121cbc:	e3403014 	movt	r3, #20
  121cc0:	e5d33000 	ldrb	r3, [r3]
  121cc4:	e2033010 	and	r3, r3, #16
  121cc8:	e3530000 	cmp	r3, #0
  121ccc:	0a000209 	beq	1224f8 <tcp_process+0xd34>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121cd0:	e30e3254 	movw	r3, #57940	; 0xe254
  121cd4:	e3403014 	movt	r3, #20
  121cd8:	e5930000 	ldr	r0, [r3]
  121cdc:	e30e325a 	movw	r3, #57946	; 0xe25a
  121ce0:	e3403014 	movt	r3, #20
  121ce4:	e1d330b0 	ldrh	r3, [r3]
  121ce8:	e1a02003 	mov	r2, r3
  121cec:	e30e3250 	movw	r3, #57936	; 0xe250
  121cf0:	e3403014 	movt	r3, #20
  121cf4:	e5933000 	ldr	r3, [r3]
  121cf8:	e0821003 	add	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  121cfc:	e30e3240 	movw	r3, #57920	; 0xe240
  121d00:	e3403014 	movt	r3, #20
  121d04:	e5933000 	ldr	r3, [r3]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121d08:	e1d330b2 	ldrh	r3, [r3, #2]
  121d0c:	e6ff2073 	uxth	r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  121d10:	e30e3240 	movw	r3, #57920	; 0xe240
  121d14:	e3403014 	movt	r3, #20
  121d18:	e5933000 	ldr	r3, [r3]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121d1c:	e1d330b0 	ldrh	r3, [r3]
  121d20:	e6ff3073 	uxth	r3, r3
  121d24:	e58d3004 	str	r3, [sp, #4]
  121d28:	e58d2000 	str	r2, [sp]
  121d2c:	e59f3808 	ldr	r3, [pc, #2056]	; 12253c <tcp_process+0xd78>
  121d30:	e59f2808 	ldr	r2, [pc, #2056]	; 122540 <tcp_process+0xd7c>
  121d34:	eb0012ee 	bl	1268f4 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
  121d38:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121d3c:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  121d40:	e3530003 	cmp	r3, #3
  121d44:	8a0001eb 	bhi	1224f8 <tcp_process+0xd34>
        pcb->rtime = 0;
  121d48:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121d4c:	e3a02000 	mov	r2, #0
  121d50:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
        tcp_rexmit_rto(pcb);
  121d54:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  121d58:	eb001362 	bl	126ae8 <tcp_rexmit_rto>
    break;
  121d5c:	ea0001e5 	b	1224f8 <tcp_process+0xd34>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
  121d60:	e30e325c 	movw	r3, #57948	; 0xe25c
  121d64:	e3403014 	movt	r3, #20
  121d68:	e5d33000 	ldrb	r3, [r3]
  121d6c:	e2033010 	and	r3, r3, #16
  121d70:	e3530000 	cmp	r3, #0
  121d74:	0a000090 	beq	121fbc <tcp_process+0x7f8>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
  121d78:	e30e3254 	movw	r3, #57940	; 0xe254
  121d7c:	e3403014 	movt	r3, #20
  121d80:	e5932000 	ldr	r2, [r3]
  121d84:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121d88:	e5933048 	ldr	r3, [r3, #72]	; 0x48
  121d8c:	e0423003 	sub	r3, r2, r3
  121d90:	e2433001 	sub	r3, r3, #1
  121d94:	e3530000 	cmp	r3, #0
  121d98:	ba00006c 	blt	121f50 <tcp_process+0x78c>
  121d9c:	e30e3254 	movw	r3, #57940	; 0xe254
  121da0:	e3403014 	movt	r3, #20
  121da4:	e5932000 	ldr	r2, [r3]
  121da8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121dac:	e5933050 	ldr	r3, [r3, #80]	; 0x50
  121db0:	e0423003 	sub	r3, r2, r3
  121db4:	e3530000 	cmp	r3, #0
  121db8:	ca000064 	bgt	121f50 <tcp_process+0x78c>
        pcb->state = ESTABLISHED;
  121dbc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121dc0:	e3a02004 	mov	r2, #4
  121dc4:	e5832014 	str	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
  121dc8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121dcc:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  121dd0:	e3530000 	cmp	r3, #0
  121dd4:	0a00000b 	beq	121e08 <tcp_process+0x644>
  121dd8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121ddc:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  121de0:	e593301c 	ldr	r3, [r3, #28]
  121de4:	e3530000 	cmp	r3, #0
  121de8:	1a000006 	bne	121e08 <tcp_process+0x644>
  121dec:	e308047c 	movw	r0, #33916	; 0x847c
  121df0:	e3400014 	movt	r0, #20
  121df4:	ebff84c6 	bl	103114 <rt_kprintf>
  121df8:	e300133e 	movw	r1, #830	; 0x33e
  121dfc:	e30802b4 	movw	r0, #33460	; 0x82b4
  121e00:	e3400014 	movt	r0, #20
  121e04:	ebffa4b9 	bl	10b0f0 <sys_arch_assert>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
  121e08:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121e0c:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  121e10:	e3530000 	cmp	r3, #0
  121e14:	1a000002 	bne	121e24 <tcp_process+0x660>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
  121e18:	e3e03005 	mvn	r3, #5
  121e1c:	e54b300a 	strb	r3, [fp, #-10]
  121e20:	ea000011 	b	121e6c <tcp_process+0x6a8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
  121e24:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121e28:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  121e2c:	e593301c 	ldr	r3, [r3, #28]
  121e30:	e3530000 	cmp	r3, #0
  121e34:	0a00000a 	beq	121e64 <tcp_process+0x6a0>
  121e38:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121e3c:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  121e40:	e593301c 	ldr	r3, [r3, #28]
  121e44:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  121e48:	e5920010 	ldr	r0, [r2, #16]
  121e4c:	e3a02000 	mov	r2, #0
  121e50:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  121e54:	e12fff33 	blx	r3
  121e58:	e1a03000 	mov	r3, r0
  121e5c:	e54b300a 	strb	r3, [fp, #-10]
  121e60:	ea000001 	b	121e6c <tcp_process+0x6a8>
  121e64:	e3e0300f 	mvn	r3, #15
  121e68:	e54b300a 	strb	r3, [fp, #-10]
        }
        if (err != ERR_OK) {
  121e6c:	e15b30da 	ldrsb	r3, [fp, #-10]
  121e70:	e3530000 	cmp	r3, #0
  121e74:	0a000006 	beq	121e94 <tcp_process+0x6d0>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
  121e78:	e15b30da 	ldrsb	r3, [fp, #-10]
  121e7c:	e373000d 	cmn	r3, #13
  121e80:	0a000001 	beq	121e8c <tcp_process+0x6c8>
            tcp_abort(pcb);
  121e84:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  121e88:	ebffeee1 	bl	11da14 <tcp_abort>
          }
          return ERR_ABRT;
  121e8c:	e3e0300c 	mvn	r3, #12
  121e90:	ea0001a6 	b	122530 <tcp_process+0xd6c>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
  121e94:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  121e98:	eb000217 	bl	1226fc <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
  121e9c:	e30e3258 	movw	r3, #57944	; 0xe258
  121ea0:	e3403014 	movt	r3, #20
  121ea4:	e1d330b0 	ldrh	r3, [r3]
  121ea8:	e3530000 	cmp	r3, #0
  121eac:	0a000007 	beq	121ed0 <tcp_process+0x70c>
          recv_acked--;
  121eb0:	e30e3258 	movw	r3, #57944	; 0xe258
  121eb4:	e3403014 	movt	r3, #20
  121eb8:	e1d330b0 	ldrh	r3, [r3]
  121ebc:	e2433001 	sub	r3, r3, #1
  121ec0:	e6ff2073 	uxth	r2, r3
  121ec4:	e30e3258 	movw	r3, #57944	; 0xe258
  121ec8:	e3403014 	movt	r3, #20
  121ecc:	e1c320b0 	strh	r2, [r3]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
  121ed0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121ed4:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  121ed8:	e1a03083 	lsl	r3, r3, #1
  121edc:	e301211c 	movw	r2, #4380	; 0x111c
  121ee0:	e1530002 	cmp	r3, r2
  121ee4:	21a02003 	movcs	r2, r3
  121ee8:	31a02002 	movcc	r2, r2
  121eec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121ef0:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  121ef4:	e1a03103 	lsl	r3, r3, #2
  121ef8:	e1520003 	cmp	r2, r3
  121efc:	31a03002 	movcc	r3, r2
  121f00:	21a03003 	movcs	r3, r3
  121f04:	e6ff2073 	uxth	r2, r3
  121f08:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121f0c:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
  121f10:	e30e325d 	movw	r3, #57949	; 0xe25d
  121f14:	e3403014 	movt	r3, #20
  121f18:	e5d33000 	ldrb	r3, [r3]
  121f1c:	e2033020 	and	r3, r3, #32
  121f20:	e3530000 	cmp	r3, #0
  121f24:	0a000035 	beq	122000 <tcp_process+0x83c>
          tcp_ack_now(pcb);
  121f28:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121f2c:	e5d3301e 	ldrb	r3, [r3, #30]
  121f30:	e3833002 	orr	r3, r3, #2
  121f34:	e6ef2073 	uxtb	r2, r3
  121f38:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121f3c:	e5c3201e 	strb	r2, [r3, #30]
          pcb->state = CLOSE_WAIT;
  121f40:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121f44:	e3a02007 	mov	r2, #7
  121f48:	e5832014 	str	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
  121f4c:	ea00002b 	b	122000 <tcp_process+0x83c>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121f50:	e30e3254 	movw	r3, #57940	; 0xe254
  121f54:	e3403014 	movt	r3, #20
  121f58:	e5930000 	ldr	r0, [r3]
  121f5c:	e30e325a 	movw	r3, #57946	; 0xe25a
  121f60:	e3403014 	movt	r3, #20
  121f64:	e1d330b0 	ldrh	r3, [r3]
  121f68:	e1a02003 	mov	r2, r3
  121f6c:	e30e3250 	movw	r3, #57936	; 0xe250
  121f70:	e3403014 	movt	r3, #20
  121f74:	e5933000 	ldr	r3, [r3]
  121f78:	e0821003 	add	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  121f7c:	e30e3240 	movw	r3, #57920	; 0xe240
  121f80:	e3403014 	movt	r3, #20
  121f84:	e5933000 	ldr	r3, [r3]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121f88:	e1d330b2 	ldrh	r3, [r3, #2]
  121f8c:	e6ff2073 	uxth	r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  121f90:	e30e3240 	movw	r3, #57920	; 0xe240
  121f94:	e3403014 	movt	r3, #20
  121f98:	e5933000 	ldr	r3, [r3]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121f9c:	e1d330b0 	ldrh	r3, [r3]
  121fa0:	e6ff3073 	uxth	r3, r3
  121fa4:	e58d3004 	str	r3, [sp, #4]
  121fa8:	e58d2000 	str	r2, [sp]
  121fac:	e59f3588 	ldr	r3, [pc, #1416]	; 12253c <tcp_process+0xd78>
  121fb0:	e59f2588 	ldr	r2, [pc, #1416]	; 122540 <tcp_process+0xd7c>
  121fb4:	eb00124e 	bl	1268f4 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
  121fb8:	ea000150 	b	122500 <tcp_process+0xd3c>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
  121fbc:	e30e325c 	movw	r3, #57948	; 0xe25c
  121fc0:	e3403014 	movt	r3, #20
  121fc4:	e5d33000 	ldrb	r3, [r3]
  121fc8:	e2033002 	and	r3, r3, #2
  121fcc:	e3530000 	cmp	r3, #0
  121fd0:	0a00014a 	beq	122500 <tcp_process+0xd3c>
  121fd4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121fd8:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  121fdc:	e2432001 	sub	r2, r3, #1
  121fe0:	e30e3250 	movw	r3, #57936	; 0xe250
  121fe4:	e3403014 	movt	r3, #20
  121fe8:	e5933000 	ldr	r3, [r3]
  121fec:	e1520003 	cmp	r2, r3
  121ff0:	1a000142 	bne	122500 <tcp_process+0xd3c>
      tcp_rexmit(pcb);
  121ff4:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  121ff8:	eb0012eb 	bl	126bac <tcp_rexmit>
    break;
  121ffc:	ea00013f 	b	122500 <tcp_process+0xd3c>
  122000:	ea00013e 	b	122500 <tcp_process+0xd3c>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
  122004:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  122008:	eb0001bb 	bl	1226fc <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
  12200c:	e30e325d 	movw	r3, #57949	; 0xe25d
  122010:	e3403014 	movt	r3, #20
  122014:	e5d33000 	ldrb	r3, [r3]
  122018:	e2033020 	and	r3, r3, #32
  12201c:	e3530000 	cmp	r3, #0
  122020:	0a000138 	beq	122508 <tcp_process+0xd44>
      tcp_ack_now(pcb);
  122024:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122028:	e5d3301e 	ldrb	r3, [r3, #30]
  12202c:	e3833002 	orr	r3, r3, #2
  122030:	e6ef2073 	uxtb	r2, r3
  122034:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122038:	e5c3201e 	strb	r2, [r3, #30]
      pcb->state = CLOSE_WAIT;
  12203c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122040:	e3a02007 	mov	r2, #7
  122044:	e5832014 	str	r2, [r3, #20]
    }
    break;
  122048:	ea00012e 	b	122508 <tcp_process+0xd44>
  case FIN_WAIT_1:
    tcp_receive(pcb);
  12204c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  122050:	eb0001a9 	bl	1226fc <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
  122054:	e30e325d 	movw	r3, #57949	; 0xe25d
  122058:	e3403014 	movt	r3, #20
  12205c:	e5d33000 	ldrb	r3, [r3]
  122060:	e2033020 	and	r3, r3, #32
  122064:	e3530000 	cmp	r3, #0
  122068:	0a00005a 	beq	1221d8 <tcp_process+0xa14>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
  12206c:	e30e325c 	movw	r3, #57948	; 0xe25c
  122070:	e3403014 	movt	r3, #20
  122074:	e5d33000 	ldrb	r3, [r3]
  122078:	e2033010 	and	r3, r3, #16
  12207c:	e3530000 	cmp	r3, #0
  122080:	0a00004a 	beq	1221b0 <tcp_process+0x9ec>
  122084:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122088:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  12208c:	e30e3254 	movw	r3, #57940	; 0xe254
  122090:	e3403014 	movt	r3, #20
  122094:	e5933000 	ldr	r3, [r3]
  122098:	e1520003 	cmp	r2, r3
  12209c:	1a000043 	bne	1221b0 <tcp_process+0x9ec>
          pcb->unsent == NULL) {
  1220a0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1220a4:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
  1220a8:	e3530000 	cmp	r3, #0
  1220ac:	1a00003f 	bne	1221b0 <tcp_process+0x9ec>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
  1220b0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1220b4:	e5d3301e 	ldrb	r3, [r3, #30]
  1220b8:	e3833002 	orr	r3, r3, #2
  1220bc:	e6ef2073 	uxtb	r2, r3
  1220c0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1220c4:	e5c3201e 	strb	r2, [r3, #30]
        tcp_pcb_purge(pcb);
  1220c8:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1220cc:	ebfff730 	bl	11fd94 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
  1220d0:	e30c3c20 	movw	r3, #52256	; 0xcc20
  1220d4:	e3403015 	movt	r3, #21
  1220d8:	e5933000 	ldr	r3, [r3]
  1220dc:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1220e0:	e1520003 	cmp	r2, r3
  1220e4:	1a000007 	bne	122108 <tcp_process+0x944>
  1220e8:	e30c3c20 	movw	r3, #52256	; 0xcc20
  1220ec:	e3403015 	movt	r3, #21
  1220f0:	e5933000 	ldr	r3, [r3]
  1220f4:	e593200c 	ldr	r2, [r3, #12]
  1220f8:	e30c3c20 	movw	r3, #52256	; 0xcc20
  1220fc:	e3403015 	movt	r3, #21
  122100:	e5832000 	str	r2, [r3]
  122104:	ea000014 	b	12215c <tcp_process+0x998>
  122108:	e30c3c20 	movw	r3, #52256	; 0xcc20
  12210c:	e3403015 	movt	r3, #21
  122110:	e5933000 	ldr	r3, [r3]
  122114:	e50b3010 	str	r3, [fp, #-16]
  122118:	ea00000c 	b	122150 <tcp_process+0x98c>
  12211c:	e51b3010 	ldr	r3, [fp, #-16]
  122120:	e593300c 	ldr	r3, [r3, #12]
  122124:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  122128:	e1520003 	cmp	r2, r3
  12212c:	1a000004 	bne	122144 <tcp_process+0x980>
  122130:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122134:	e593200c 	ldr	r2, [r3, #12]
  122138:	e51b3010 	ldr	r3, [fp, #-16]
  12213c:	e583200c 	str	r2, [r3, #12]
  122140:	ea000005 	b	12215c <tcp_process+0x998>
  122144:	e51b3010 	ldr	r3, [fp, #-16]
  122148:	e593300c 	ldr	r3, [r3, #12]
  12214c:	e50b3010 	str	r3, [fp, #-16]
  122150:	e51b3010 	ldr	r3, [fp, #-16]
  122154:	e3530000 	cmp	r3, #0
  122158:	1affffef 	bne	12211c <tcp_process+0x958>
  12215c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122160:	e3a02000 	mov	r2, #0
  122164:	e583200c 	str	r2, [r3, #12]
  122168:	e30c3c1c 	movw	r3, #52252	; 0xcc1c
  12216c:	e3403015 	movt	r3, #21
  122170:	e3a02001 	mov	r2, #1
  122174:	e5c32000 	strb	r2, [r3]
        pcb->state = TIME_WAIT;
  122178:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12217c:	e3a0200a 	mov	r2, #10
  122180:	e5832014 	str	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
  122184:	e30c3c30 	movw	r3, #52272	; 0xcc30
  122188:	e3403015 	movt	r3, #21
  12218c:	e5932000 	ldr	r2, [r3]
  122190:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122194:	e583200c 	str	r2, [r3, #12]
  122198:	e30c3c30 	movw	r3, #52272	; 0xcc30
  12219c:	e3403015 	movt	r3, #21
  1221a0:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1221a4:	e5832000 	str	r2, [r3]
  1221a8:	eb001425 	bl	127244 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
  1221ac:	ea0000d7 	b	122510 <tcp_process+0xd4c>
        tcp_ack_now(pcb);
  1221b0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1221b4:	e5d3301e 	ldrb	r3, [r3, #30]
  1221b8:	e3833002 	orr	r3, r3, #2
  1221bc:	e6ef2073 	uxtb	r2, r3
  1221c0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1221c4:	e5c3201e 	strb	r2, [r3, #30]
        pcb->state = CLOSING;
  1221c8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1221cc:	e3a02008 	mov	r2, #8
  1221d0:	e5832014 	str	r2, [r3, #20]
    break;
  1221d4:	ea0000cd 	b	122510 <tcp_process+0xd4c>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
  1221d8:	e30e325c 	movw	r3, #57948	; 0xe25c
  1221dc:	e3403014 	movt	r3, #20
  1221e0:	e5d33000 	ldrb	r3, [r3]
  1221e4:	e2033010 	and	r3, r3, #16
  1221e8:	e3530000 	cmp	r3, #0
  1221ec:	0a0000c7 	beq	122510 <tcp_process+0xd4c>
  1221f0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1221f4:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  1221f8:	e30e3254 	movw	r3, #57940	; 0xe254
  1221fc:	e3403014 	movt	r3, #20
  122200:	e5933000 	ldr	r3, [r3]
  122204:	e1520003 	cmp	r2, r3
  122208:	1a0000c0 	bne	122510 <tcp_process+0xd4c>
               pcb->unsent == NULL) {
  12220c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122210:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
  122214:	e3530000 	cmp	r3, #0
  122218:	1a0000bc 	bne	122510 <tcp_process+0xd4c>
      pcb->state = FIN_WAIT_2;
  12221c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122220:	e3a02006 	mov	r2, #6
  122224:	e5832014 	str	r2, [r3, #20]
    break;
  122228:	ea0000b8 	b	122510 <tcp_process+0xd4c>
  case FIN_WAIT_2:
    tcp_receive(pcb);
  12222c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  122230:	eb000131 	bl	1226fc <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
  122234:	e30e325d 	movw	r3, #57949	; 0xe25d
  122238:	e3403014 	movt	r3, #20
  12223c:	e5d33000 	ldrb	r3, [r3]
  122240:	e2033020 	and	r3, r3, #32
  122244:	e3530000 	cmp	r3, #0
  122248:	0a0000b2 	beq	122518 <tcp_process+0xd54>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
  12224c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122250:	e5d3301e 	ldrb	r3, [r3, #30]
  122254:	e3833002 	orr	r3, r3, #2
  122258:	e6ef2073 	uxtb	r2, r3
  12225c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122260:	e5c3201e 	strb	r2, [r3, #30]
      tcp_pcb_purge(pcb);
  122264:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  122268:	ebfff6c9 	bl	11fd94 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
  12226c:	e30c3c20 	movw	r3, #52256	; 0xcc20
  122270:	e3403015 	movt	r3, #21
  122274:	e5933000 	ldr	r3, [r3]
  122278:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  12227c:	e1520003 	cmp	r2, r3
  122280:	1a000007 	bne	1222a4 <tcp_process+0xae0>
  122284:	e30c3c20 	movw	r3, #52256	; 0xcc20
  122288:	e3403015 	movt	r3, #21
  12228c:	e5933000 	ldr	r3, [r3]
  122290:	e593200c 	ldr	r2, [r3, #12]
  122294:	e30c3c20 	movw	r3, #52256	; 0xcc20
  122298:	e3403015 	movt	r3, #21
  12229c:	e5832000 	str	r2, [r3]
  1222a0:	ea000014 	b	1222f8 <tcp_process+0xb34>
  1222a4:	e30c3c20 	movw	r3, #52256	; 0xcc20
  1222a8:	e3403015 	movt	r3, #21
  1222ac:	e5933000 	ldr	r3, [r3]
  1222b0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1222b4:	ea00000c 	b	1222ec <tcp_process+0xb28>
  1222b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1222bc:	e593300c 	ldr	r3, [r3, #12]
  1222c0:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1222c4:	e1520003 	cmp	r2, r3
  1222c8:	1a000004 	bne	1222e0 <tcp_process+0xb1c>
  1222cc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1222d0:	e593200c 	ldr	r2, [r3, #12]
  1222d4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1222d8:	e583200c 	str	r2, [r3, #12]
  1222dc:	ea000005 	b	1222f8 <tcp_process+0xb34>
  1222e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1222e4:	e593300c 	ldr	r3, [r3, #12]
  1222e8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1222ec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1222f0:	e3530000 	cmp	r3, #0
  1222f4:	1affffef 	bne	1222b8 <tcp_process+0xaf4>
  1222f8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1222fc:	e3a02000 	mov	r2, #0
  122300:	e583200c 	str	r2, [r3, #12]
  122304:	e30c3c1c 	movw	r3, #52252	; 0xcc1c
  122308:	e3403015 	movt	r3, #21
  12230c:	e3a02001 	mov	r2, #1
  122310:	e5c32000 	strb	r2, [r3]
      pcb->state = TIME_WAIT;
  122314:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122318:	e3a0200a 	mov	r2, #10
  12231c:	e5832014 	str	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
  122320:	e30c3c30 	movw	r3, #52272	; 0xcc30
  122324:	e3403015 	movt	r3, #21
  122328:	e5932000 	ldr	r2, [r3]
  12232c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122330:	e583200c 	str	r2, [r3, #12]
  122334:	e30c3c30 	movw	r3, #52272	; 0xcc30
  122338:	e3403015 	movt	r3, #21
  12233c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  122340:	e5832000 	str	r2, [r3]
  122344:	eb0013be 	bl	127244 <tcp_timer_needed>
    }
    break;
  122348:	ea000072 	b	122518 <tcp_process+0xd54>
  case CLOSING:
    tcp_receive(pcb);
  12234c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  122350:	eb0000e9 	bl	1226fc <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
  122354:	e30e325c 	movw	r3, #57948	; 0xe25c
  122358:	e3403014 	movt	r3, #20
  12235c:	e5d33000 	ldrb	r3, [r3]
  122360:	e2033010 	and	r3, r3, #16
  122364:	e3530000 	cmp	r3, #0
  122368:	0a00006c 	beq	122520 <tcp_process+0xd5c>
  12236c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122370:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  122374:	e30e3254 	movw	r3, #57940	; 0xe254
  122378:	e3403014 	movt	r3, #20
  12237c:	e5933000 	ldr	r3, [r3]
  122380:	e1520003 	cmp	r2, r3
  122384:	1a000065 	bne	122520 <tcp_process+0xd5c>
  122388:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12238c:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122390:	e3530000 	cmp	r3, #0
  122394:	1a000061 	bne	122520 <tcp_process+0xd5c>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
  122398:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  12239c:	ebfff67c 	bl	11fd94 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
  1223a0:	e30c3c20 	movw	r3, #52256	; 0xcc20
  1223a4:	e3403015 	movt	r3, #21
  1223a8:	e5933000 	ldr	r3, [r3]
  1223ac:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1223b0:	e1520003 	cmp	r2, r3
  1223b4:	1a000007 	bne	1223d8 <tcp_process+0xc14>
  1223b8:	e30c3c20 	movw	r3, #52256	; 0xcc20
  1223bc:	e3403015 	movt	r3, #21
  1223c0:	e5933000 	ldr	r3, [r3]
  1223c4:	e593200c 	ldr	r2, [r3, #12]
  1223c8:	e30c3c20 	movw	r3, #52256	; 0xcc20
  1223cc:	e3403015 	movt	r3, #21
  1223d0:	e5832000 	str	r2, [r3]
  1223d4:	ea000014 	b	12242c <tcp_process+0xc68>
  1223d8:	e30c3c20 	movw	r3, #52256	; 0xcc20
  1223dc:	e3403015 	movt	r3, #21
  1223e0:	e5933000 	ldr	r3, [r3]
  1223e4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  1223e8:	ea00000c 	b	122420 <tcp_process+0xc5c>
  1223ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1223f0:	e593300c 	ldr	r3, [r3, #12]
  1223f4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1223f8:	e1520003 	cmp	r2, r3
  1223fc:	1a000004 	bne	122414 <tcp_process+0xc50>
  122400:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122404:	e593200c 	ldr	r2, [r3, #12]
  122408:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12240c:	e583200c 	str	r2, [r3, #12]
  122410:	ea000005 	b	12242c <tcp_process+0xc68>
  122414:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122418:	e593300c 	ldr	r3, [r3, #12]
  12241c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  122420:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122424:	e3530000 	cmp	r3, #0
  122428:	1affffef 	bne	1223ec <tcp_process+0xc28>
  12242c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122430:	e3a02000 	mov	r2, #0
  122434:	e583200c 	str	r2, [r3, #12]
  122438:	e30c3c1c 	movw	r3, #52252	; 0xcc1c
  12243c:	e3403015 	movt	r3, #21
  122440:	e3a02001 	mov	r2, #1
  122444:	e5c32000 	strb	r2, [r3]
      pcb->state = TIME_WAIT;
  122448:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12244c:	e3a0200a 	mov	r2, #10
  122450:	e5832014 	str	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
  122454:	e30c3c30 	movw	r3, #52272	; 0xcc30
  122458:	e3403015 	movt	r3, #21
  12245c:	e5932000 	ldr	r2, [r3]
  122460:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122464:	e583200c 	str	r2, [r3, #12]
  122468:	e30c3c30 	movw	r3, #52272	; 0xcc30
  12246c:	e3403015 	movt	r3, #21
  122470:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  122474:	e5832000 	str	r2, [r3]
  122478:	eb001371 	bl	127244 <tcp_timer_needed>
    }
    break;
  12247c:	ea000027 	b	122520 <tcp_process+0xd5c>
  case LAST_ACK:
    tcp_receive(pcb);
  122480:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  122484:	eb00009c 	bl	1226fc <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
  122488:	e30e325c 	movw	r3, #57948	; 0xe25c
  12248c:	e3403014 	movt	r3, #20
  122490:	e5d33000 	ldrb	r3, [r3]
  122494:	e2033010 	and	r3, r3, #16
  122498:	e3530000 	cmp	r3, #0
  12249c:	0a000021 	beq	122528 <tcp_process+0xd64>
  1224a0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1224a4:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  1224a8:	e30e3254 	movw	r3, #57940	; 0xe254
  1224ac:	e3403014 	movt	r3, #20
  1224b0:	e5933000 	ldr	r3, [r3]
  1224b4:	e1520003 	cmp	r2, r3
  1224b8:	1a00001a 	bne	122528 <tcp_process+0xd64>
  1224bc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1224c0:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  1224c4:	e3530000 	cmp	r3, #0
  1224c8:	1a000016 	bne	122528 <tcp_process+0xd64>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
  1224cc:	e30e325d 	movw	r3, #57949	; 0xe25d
  1224d0:	e3403014 	movt	r3, #20
  1224d4:	e5d33000 	ldrb	r3, [r3]
  1224d8:	e3833010 	orr	r3, r3, #16
  1224dc:	e6ef2073 	uxtb	r2, r3
  1224e0:	e30e325d 	movw	r3, #57949	; 0xe25d
  1224e4:	e3403014 	movt	r3, #20
  1224e8:	e5c32000 	strb	r2, [r3]
    }
    break;
  1224ec:	ea00000d 	b	122528 <tcp_process+0xd64>
  default:
    break;
  1224f0:	e320f000 	nop	{0}
  1224f4:	ea00000c 	b	12252c <tcp_process+0xd68>
    break;
  1224f8:	e320f000 	nop	{0}
  1224fc:	ea00000a 	b	12252c <tcp_process+0xd68>
    break;
  122500:	e320f000 	nop	{0}
  122504:	ea000008 	b	12252c <tcp_process+0xd68>
    break;
  122508:	e320f000 	nop	{0}
  12250c:	ea000006 	b	12252c <tcp_process+0xd68>
    break;
  122510:	e320f000 	nop	{0}
  122514:	ea000004 	b	12252c <tcp_process+0xd68>
    break;
  122518:	e320f000 	nop	{0}
  12251c:	ea000002 	b	12252c <tcp_process+0xd68>
    break;
  122520:	e320f000 	nop	{0}
  122524:	ea000000 	b	12252c <tcp_process+0xd68>
    break;
  122528:	e320f000 	nop	{0}
  }
  return ERR_OK;
  12252c:	e3a03000 	mov	r3, #0
}
  122530:	e1a00003 	mov	r0, r3
  122534:	e24bd004 	sub	sp, fp, #4
  122538:	e8bd8800 	pop	{fp, pc}
  12253c:	0014f608 	.word	0x0014f608
  122540:	0014f60c 	.word	0x0014f60c

00122544 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
  122544:	e92d4810 	push	{r4, fp, lr}
  122548:	e28db008 	add	fp, sp, #8
  12254c:	e24dd014 	sub	sp, sp, #20
  122550:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  122554:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
  122558:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12255c:	e593300c 	ldr	r3, [r3, #12]
  122560:	e1d330bc 	ldrh	r3, [r3, #12]
  122564:	e6ff3073 	uxth	r3, r3
  122568:	e1a00003 	mov	r0, r3
  12256c:	ebffd018 	bl	1165d4 <lwip_htons>
  122570:	e1a03000 	mov	r3, r0
  122574:	e2033001 	and	r3, r3, #1
  122578:	e3530000 	cmp	r3, #0
  12257c:	0a000022 	beq	12260c <tcp_oos_insert_segment+0xc8>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
  122580:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  122584:	ebfff3ab 	bl	11f438 <tcp_segs_free>
    next = NULL;
  122588:	e3a03000 	mov	r3, #0
  12258c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  122590:	ea000053 	b	1226e4 <tcp_oos_insert_segment+0x1a0>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
  122594:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  122598:	e593300c 	ldr	r3, [r3, #12]
  12259c:	e1d330bc 	ldrh	r3, [r3, #12]
  1225a0:	e6ff3073 	uxth	r3, r3
  1225a4:	e1a00003 	mov	r0, r3
  1225a8:	ebffd009 	bl	1165d4 <lwip_htons>
  1225ac:	e1a03000 	mov	r3, r0
  1225b0:	e2033001 	and	r3, r3, #1
  1225b4:	e3530000 	cmp	r3, #0
  1225b8:	0a00000c 	beq	1225f0 <tcp_oos_insert_segment+0xac>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
  1225bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1225c0:	e593300c 	ldr	r3, [r3, #12]
  1225c4:	e1d330bc 	ldrh	r3, [r3, #12]
  1225c8:	e6ff4073 	uxth	r4, r3
  1225cc:	e3a00001 	mov	r0, #1
  1225d0:	ebffcfff 	bl	1165d4 <lwip_htons>
  1225d4:	e1a03000 	mov	r3, r0
  1225d8:	e1a02003 	mov	r2, r3
  1225dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1225e0:	e593300c 	ldr	r3, [r3, #12]
  1225e4:	e1842002 	orr	r2, r4, r2
  1225e8:	e6ff2072 	uxth	r2, r2
  1225ec:	e1c320bc 	strh	r2, [r3, #12]
      }
      old_seg = next;
  1225f0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1225f4:	e50b3010 	str	r3, [fp, #-16]
      next = next->next;
  1225f8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1225fc:	e5933000 	ldr	r3, [r3]
  122600:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
      tcp_seg_free(old_seg);
  122604:	e51b0010 	ldr	r0, [fp, #-16]
  122608:	ebfff39c 	bl	11f480 <tcp_seg_free>
    while (next &&
  12260c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  122610:	e3530000 	cmp	r3, #0
  122614:	0a00000f 	beq	122658 <tcp_oos_insert_segment+0x114>
           TCP_SEQ_GEQ((seqno + cseg->len),
  122618:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12261c:	e1d330b8 	ldrh	r3, [r3, #8]
  122620:	e1a02003 	mov	r2, r3
  122624:	e30e3250 	movw	r3, #57936	; 0xe250
  122628:	e3403014 	movt	r3, #20
  12262c:	e5933000 	ldr	r3, [r3]
  122630:	e0822003 	add	r2, r2, r3
  122634:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  122638:	e593300c 	ldr	r3, [r3, #12]
  12263c:	e5933004 	ldr	r3, [r3, #4]
  122640:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  122644:	e1d110b8 	ldrh	r1, [r1, #8]
  122648:	e0833001 	add	r3, r3, r1
  12264c:	e0423003 	sub	r3, r2, r3
    while (next &&
  122650:	e3530000 	cmp	r3, #0
  122654:	aaffffce 	bge	122594 <tcp_oos_insert_segment+0x50>
    }
    if (next &&
  122658:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12265c:	e3530000 	cmp	r3, #0
  122660:	0a00001f 	beq	1226e4 <tcp_oos_insert_segment+0x1a0>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
  122664:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122668:	e1d330b8 	ldrh	r3, [r3, #8]
  12266c:	e1a02003 	mov	r2, r3
  122670:	e30e3250 	movw	r3, #57936	; 0xe250
  122674:	e3403014 	movt	r3, #20
  122678:	e5933000 	ldr	r3, [r3]
  12267c:	e0822003 	add	r2, r2, r3
  122680:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  122684:	e593300c 	ldr	r3, [r3, #12]
  122688:	e5933004 	ldr	r3, [r3, #4]
  12268c:	e0423003 	sub	r3, r2, r3
    if (next &&
  122690:	e3530000 	cmp	r3, #0
  122694:	da000012 	ble	1226e4 <tcp_oos_insert_segment+0x1a0>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
  122698:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12269c:	e593300c 	ldr	r3, [r3, #12]
  1226a0:	e5933004 	ldr	r3, [r3, #4]
  1226a4:	e6ff2073 	uxth	r2, r3
  1226a8:	e30e3250 	movw	r3, #57936	; 0xe250
  1226ac:	e3403014 	movt	r3, #20
  1226b0:	e5933000 	ldr	r3, [r3]
  1226b4:	e6ff3073 	uxth	r3, r3
  1226b8:	e0423003 	sub	r3, r2, r3
  1226bc:	e6ff2073 	uxth	r2, r3
  1226c0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1226c4:	e1c320b8 	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
  1226c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1226cc:	e5932004 	ldr	r2, [r3, #4]
  1226d0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1226d4:	e1d330b8 	ldrh	r3, [r3, #8]
  1226d8:	e1a01003 	mov	r1, r3
  1226dc:	e1a00002 	mov	r0, r2
  1226e0:	ebffe0a9 	bl	11a98c <pbuf_realloc>
    }
  }
  cseg->next = next;
  1226e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1226e8:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1226ec:	e5832000 	str	r2, [r3]
}
  1226f0:	e320f000 	nop	{0}
  1226f4:	e24bd008 	sub	sp, fp, #8
  1226f8:	e8bd8810 	pop	{r4, fp, pc}

001226fc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
  1226fc:	e92d4870 	push	{r4, r5, r6, fp, lr}
  122700:	e28db010 	add	fp, sp, #16
  122704:	e24dd034 	sub	sp, sp, #52	; 0x34
  122708:	e50b0040 	str	r0, [fp, #-64]	; 0xffffffc0
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
  12270c:	e3a03000 	mov	r3, #0
  122710:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
  122714:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122718:	e5933014 	ldr	r3, [r3, #20]
  12271c:	e3530003 	cmp	r3, #3
  122720:	8a000006 	bhi	122740 <tcp_receive+0x44>
  122724:	e308049c 	movw	r0, #33948	; 0x849c
  122728:	e3400014 	movt	r0, #20
  12272c:	ebff8278 	bl	103114 <rt_kprintf>
  122730:	e30013f5 	movw	r1, #1013	; 0x3f5
  122734:	e30802b4 	movw	r0, #33460	; 0x82b4
  122738:	e3400014 	movt	r0, #20
  12273c:	ebffa26b 	bl	10b0f0 <sys_arch_assert>

  if (flags & TCP_ACK) {
  122740:	e30e325c 	movw	r3, #57948	; 0xe25c
  122744:	e3403014 	movt	r3, #20
  122748:	e5d33000 	ldrb	r3, [r3]
  12274c:	e2033010 	and	r3, r3, #16
  122750:	e3530000 	cmp	r3, #0
  122754:	0a000268 	beq	1230fc <tcp_receive+0xa00>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
  122758:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12275c:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  122760:	e1a02003 	mov	r2, r3
  122764:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122768:	e5933058 	ldr	r3, [r3, #88]	; 0x58
  12276c:	e0823003 	add	r3, r2, r3
  122770:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
  122774:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122778:	e5932054 	ldr	r2, [r3, #84]	; 0x54
  12277c:	e30e3250 	movw	r3, #57936	; 0xe250
  122780:	e3403014 	movt	r3, #20
  122784:	e5933000 	ldr	r3, [r3]
  122788:	e0423003 	sub	r3, r2, r3
  12278c:	e3530000 	cmp	r3, #0
  122790:	ba00001e 	blt	122810 <tcp_receive+0x114>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
  122794:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122798:	e5932054 	ldr	r2, [r3, #84]	; 0x54
  12279c:	e30e3250 	movw	r3, #57936	; 0xe250
  1227a0:	e3403014 	movt	r3, #20
  1227a4:	e5933000 	ldr	r3, [r3]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
  1227a8:	e1520003 	cmp	r2, r3
  1227ac:	1a000007 	bne	1227d0 <tcp_receive+0xd4>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
  1227b0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1227b4:	e5932058 	ldr	r2, [r3, #88]	; 0x58
  1227b8:	e30e3254 	movw	r3, #57940	; 0xe254
  1227bc:	e3403014 	movt	r3, #20
  1227c0:	e5933000 	ldr	r3, [r3]
  1227c4:	e0423003 	sub	r3, r2, r3
  1227c8:	e3530000 	cmp	r3, #0
  1227cc:	ba00000f 	blt	122810 <tcp_receive+0x114>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
  1227d0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1227d4:	e5932058 	ldr	r2, [r3, #88]	; 0x58
  1227d8:	e30e3254 	movw	r3, #57940	; 0xe254
  1227dc:	e3403014 	movt	r3, #20
  1227e0:	e5933000 	ldr	r3, [r3]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
  1227e4:	e1520003 	cmp	r2, r3
  1227e8:	1a000039 	bne	1228d4 <tcp_receive+0x1d8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
  1227ec:	e30e3240 	movw	r3, #57920	; 0xe240
  1227f0:	e3403014 	movt	r3, #20
  1227f4:	e5933000 	ldr	r3, [r3]
  1227f8:	e1d330be 	ldrh	r3, [r3, #14]
  1227fc:	e6ff2073 	uxth	r2, r3
  122800:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122804:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  122808:	e1520003 	cmp	r2, r3
  12280c:	9a000030 	bls	1228d4 <tcp_receive+0x1d8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
  122810:	e30e3240 	movw	r3, #57920	; 0xe240
  122814:	e3403014 	movt	r3, #20
  122818:	e5933000 	ldr	r3, [r3]
  12281c:	e1d330be 	ldrh	r3, [r3, #14]
  122820:	e6ff2073 	uxth	r2, r3
  122824:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122828:	e1c326b0 	strh	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
  12282c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122830:	e1d326b2 	ldrh	r2, [r3, #98]	; 0x62
  122834:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122838:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  12283c:	e1520003 	cmp	r2, r3
  122840:	2a000003 	bcs	122854 <tcp_receive+0x158>
        pcb->snd_wnd_max = pcb->snd_wnd;
  122844:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122848:	e1d326b0 	ldrh	r2, [r3, #96]	; 0x60
  12284c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122850:	e1c326b2 	strh	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
  122854:	e30e3250 	movw	r3, #57936	; 0xe250
  122858:	e3403014 	movt	r3, #20
  12285c:	e5932000 	ldr	r2, [r3]
  122860:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122864:	e5832054 	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
  122868:	e30e3254 	movw	r3, #57940	; 0xe254
  12286c:	e3403014 	movt	r3, #20
  122870:	e5932000 	ldr	r2, [r3]
  122874:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122878:	e5832058 	str	r2, [r3, #88]	; 0x58
      if (pcb->snd_wnd == 0) {
  12287c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122880:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  122884:	e3530000 	cmp	r3, #0
  122888:	1a00000a 	bne	1228b8 <tcp_receive+0x1bc>
        if (pcb->persist_backoff == 0) {
  12288c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122890:	e5d330a1 	ldrb	r3, [r3, #161]	; 0xa1
  122894:	e3530000 	cmp	r3, #0
  122898:	1a00000d 	bne	1228d4 <tcp_receive+0x1d8>
          /* start persist timer */
          pcb->persist_cnt = 0;
  12289c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1228a0:	e3a02000 	mov	r2, #0
  1228a4:	e5c320a0 	strb	r2, [r3, #160]	; 0xa0
          pcb->persist_backoff = 1;
  1228a8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1228ac:	e3a02001 	mov	r2, #1
  1228b0:	e5c320a1 	strb	r2, [r3, #161]	; 0xa1
  1228b4:	ea000006 	b	1228d4 <tcp_receive+0x1d8>
        }
      } else if (pcb->persist_backoff > 0) {
  1228b8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1228bc:	e5d330a1 	ldrb	r3, [r3, #161]	; 0xa1
  1228c0:	e3530000 	cmp	r3, #0
  1228c4:	0a000002 	beq	1228d4 <tcp_receive+0x1d8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
  1228c8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1228cc:	e3a02000 	mov	r2, #0
  1228d0:	e5c320a1 	strb	r2, [r3, #161]	; 0xa1
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
  1228d4:	e30e3254 	movw	r3, #57940	; 0xe254
  1228d8:	e3403014 	movt	r3, #20
  1228dc:	e5932000 	ldr	r2, [r3]
  1228e0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1228e4:	e5933048 	ldr	r3, [r3, #72]	; 0x48
  1228e8:	e0423003 	sub	r3, r2, r3
  1228ec:	e3530000 	cmp	r3, #0
  1228f0:	ca000047 	bgt	122a14 <tcp_receive+0x318>
      /* Clause 2 */
      if (tcplen == 0) {
  1228f4:	e30e325a 	movw	r3, #57946	; 0xe25a
  1228f8:	e3403014 	movt	r3, #20
  1228fc:	e1d330b0 	ldrh	r3, [r3]
  122900:	e3530000 	cmp	r3, #0
  122904:	1a00003b 	bne	1229f8 <tcp_receive+0x2fc>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
  122908:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12290c:	e5933058 	ldr	r3, [r3, #88]	; 0x58
  122910:	e51b2040 	ldr	r2, [fp, #-64]	; 0xffffffc0
  122914:	e1d226b0 	ldrh	r2, [r2, #96]	; 0x60
  122918:	e0833002 	add	r3, r3, r2
  12291c:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  122920:	e1520003 	cmp	r2, r3
  122924:	1a000033 	bne	1229f8 <tcp_receive+0x2fc>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
  122928:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12292c:	e1d333f4 	ldrsh	r3, [r3, #52]	; 0x34
  122930:	e3530000 	cmp	r3, #0
  122934:	ba00002f 	blt	1229f8 <tcp_receive+0x2fc>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
  122938:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12293c:	e5932048 	ldr	r2, [r3, #72]	; 0x48
  122940:	e30e3254 	movw	r3, #57940	; 0xe254
  122944:	e3403014 	movt	r3, #20
  122948:	e5933000 	ldr	r3, [r3]
  12294c:	e1520003 	cmp	r2, r3
  122950:	1a000028 	bne	1229f8 <tcp_receive+0x2fc>
              found_dupack = 1;
  122954:	e3a03001 	mov	r3, #1
  122958:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
  12295c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122960:	e5d33047 	ldrb	r3, [r3, #71]	; 0x47
  122964:	e35300ff 	cmp	r3, #255	; 0xff
  122968:	0a000005 	beq	122984 <tcp_receive+0x288>
                ++pcb->dupacks;
  12296c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122970:	e5d33047 	ldrb	r3, [r3, #71]	; 0x47
  122974:	e2833001 	add	r3, r3, #1
  122978:	e6ef2073 	uxtb	r2, r3
  12297c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122980:	e5c32047 	strb	r2, [r3, #71]	; 0x47
              }
              if (pcb->dupacks > 3) {
  122984:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122988:	e5d33047 	ldrb	r3, [r3, #71]	; 0x47
  12298c:	e3530003 	cmp	r3, #3
  122990:	9a000012 	bls	1229e0 <tcp_receive+0x2e4>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
  122994:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122998:	e1d324bc 	ldrh	r2, [r3, #76]	; 0x4c
  12299c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1229a0:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  1229a4:	e0823003 	add	r3, r2, r3
  1229a8:	e6ff2073 	uxth	r2, r3
  1229ac:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1229b0:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  1229b4:	e1520003 	cmp	r2, r3
  1229b8:	9a00000e 	bls	1229f8 <tcp_receive+0x2fc>
                  pcb->cwnd += pcb->mss;
  1229bc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1229c0:	e1d324bc 	ldrh	r2, [r3, #76]	; 0x4c
  1229c4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1229c8:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  1229cc:	e0823003 	add	r3, r2, r3
  1229d0:	e6ff2073 	uxth	r2, r3
  1229d4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1229d8:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
  1229dc:	ea000005 	b	1229f8 <tcp_receive+0x2fc>
                }
              } else if (pcb->dupacks == 3) {
  1229e0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1229e4:	e5d33047 	ldrb	r3, [r3, #71]	; 0x47
  1229e8:	e3530003 	cmp	r3, #3
  1229ec:	1a000001 	bne	1229f8 <tcp_receive+0x2fc>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
  1229f0:	e51b0040 	ldr	r0, [fp, #-64]	; 0xffffffc0
  1229f4:	eb0010bc 	bl	126cec <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
  1229f8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1229fc:	e3530000 	cmp	r3, #0
  122a00:	1a000136 	bne	122ee0 <tcp_receive+0x7e4>
        pcb->dupacks = 0;
  122a04:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a08:	e3a02000 	mov	r2, #0
  122a0c:	e5c32047 	strb	r2, [r3, #71]	; 0x47
  122a10:	ea000132 	b	122ee0 <tcp_receive+0x7e4>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
  122a14:	e30e3254 	movw	r3, #57940	; 0xe254
  122a18:	e3403014 	movt	r3, #20
  122a1c:	e5932000 	ldr	r2, [r3]
  122a20:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a24:	e5933048 	ldr	r3, [r3, #72]	; 0x48
  122a28:	e0423003 	sub	r3, r2, r3
  122a2c:	e2433001 	sub	r3, r3, #1
  122a30:	e3530000 	cmp	r3, #0
  122a34:	ba0000dc 	blt	122dac <tcp_receive+0x6b0>
  122a38:	e30e3254 	movw	r3, #57940	; 0xe254
  122a3c:	e3403014 	movt	r3, #20
  122a40:	e5932000 	ldr	r2, [r3]
  122a44:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a48:	e5933050 	ldr	r3, [r3, #80]	; 0x50
  122a4c:	e0423003 	sub	r3, r2, r3
  122a50:	e3530000 	cmp	r3, #0
  122a54:	ca0000d4 	bgt	122dac <tcp_receive+0x6b0>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
  122a58:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a5c:	e5d3301e 	ldrb	r3, [r3, #30]
  122a60:	e2033004 	and	r3, r3, #4
  122a64:	e3530000 	cmp	r3, #0
  122a68:	0a000009 	beq	122a94 <tcp_receive+0x398>
        pcb->flags &= ~TF_INFR;
  122a6c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a70:	e5d3301e 	ldrb	r3, [r3, #30]
  122a74:	e3c33004 	bic	r3, r3, #4
  122a78:	e6ef2073 	uxtb	r2, r3
  122a7c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a80:	e5c3201e 	strb	r2, [r3, #30]
        pcb->cwnd = pcb->ssthresh;
  122a84:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a88:	e1d324be 	ldrh	r2, [r3, #78]	; 0x4e
  122a8c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a90:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
  122a94:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a98:	e3a02000 	mov	r2, #0
  122a9c:	e5c32046 	strb	r2, [r3, #70]	; 0x46

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
  122aa0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122aa4:	e1d334f0 	ldrsh	r3, [r3, #64]	; 0x40
  122aa8:	e1a031c3 	asr	r3, r3, #3
  122aac:	e6bf3073 	sxth	r3, r3
  122ab0:	e6ff2073 	uxth	r2, r3
  122ab4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122ab8:	e1d334f2 	ldrsh	r3, [r3, #66]	; 0x42
  122abc:	e6ff3073 	uxth	r3, r3
  122ac0:	e0823003 	add	r3, r2, r3
  122ac4:	e6ff3073 	uxth	r3, r3
  122ac8:	e6bf2073 	sxth	r2, r3
  122acc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122ad0:	e1c324b4 	strh	r2, [r3, #68]	; 0x44

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
  122ad4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122ad8:	e3a02000 	mov	r2, #0
  122adc:	e5c32047 	strb	r2, [r3, #71]	; 0x47
      pcb->lastack = ackno;
  122ae0:	e30e3254 	movw	r3, #57940	; 0xe254
  122ae4:	e3403014 	movt	r3, #20
  122ae8:	e5932000 	ldr	r2, [r3]
  122aec:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122af0:	e5832048 	str	r2, [r3, #72]	; 0x48

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
  122af4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122af8:	e5933014 	ldr	r3, [r3, #20]
  122afc:	e3530003 	cmp	r3, #3
  122b00:	9a000075 	bls	122cdc <tcp_receive+0x5e0>
        if (pcb->cwnd < pcb->ssthresh) {
  122b04:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b08:	e1d324bc 	ldrh	r2, [r3, #76]	; 0x4c
  122b0c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b10:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  122b14:	e1520003 	cmp	r2, r3
  122b18:	2a000012 	bcs	122b68 <tcp_receive+0x46c>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
  122b1c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b20:	e1d324bc 	ldrh	r2, [r3, #76]	; 0x4c
  122b24:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b28:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  122b2c:	e0823003 	add	r3, r2, r3
  122b30:	e6ff2073 	uxth	r2, r3
  122b34:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b38:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  122b3c:	e1520003 	cmp	r2, r3
  122b40:	9a000065 	bls	122cdc <tcp_receive+0x5e0>
            pcb->cwnd += pcb->mss;
  122b44:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b48:	e1d324bc 	ldrh	r2, [r3, #76]	; 0x4c
  122b4c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b50:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  122b54:	e0823003 	add	r3, r2, r3
  122b58:	e6ff2073 	uxth	r2, r3
  122b5c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b60:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
  122b64:	ea00005c 	b	122cdc <tcp_receive+0x5e0>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
  122b68:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b6c:	e1d344bc 	ldrh	r4, [r3, #76]	; 0x4c
  122b70:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b74:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  122b78:	e1a02003 	mov	r2, r3
  122b7c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b80:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  122b84:	e0020293 	mul	r2, r3, r2
  122b88:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b8c:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  122b90:	e1a01003 	mov	r1, r3
  122b94:	e1a00002 	mov	r0, r2
  122b98:	eb0057b9 	bl	138a84 <__divsi3>
  122b9c:	e1a03000 	mov	r3, r0
  122ba0:	e6ff3073 	uxth	r3, r3
  122ba4:	e0843003 	add	r3, r4, r3
  122ba8:	e14b33b2 	strh	r3, [fp, #-50]	; 0xffffffce
          if (new_cwnd > pcb->cwnd) {
  122bac:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122bb0:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  122bb4:	e15b23b2 	ldrh	r2, [fp, #-50]	; 0xffffffce
  122bb8:	e1520003 	cmp	r2, r3
  122bbc:	9a000046 	bls	122cdc <tcp_receive+0x5e0>
            pcb->cwnd = new_cwnd;
  122bc0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122bc4:	e15b23b2 	ldrh	r2, [fp, #-50]	; 0xffffffce
  122bc8:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
  122bcc:	ea000042 	b	122cdc <tcp_receive+0x5e0>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
  122bd0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122bd4:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  122bd8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        pcb->unacked = pcb->unacked->next;
  122bdc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122be0:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  122be4:	e5932000 	ldr	r2, [r3]
  122be8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122bec:	e5832070 	str	r2, [r3, #112]	; 0x70

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
  122bf0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122bf4:	e1d346b6 	ldrh	r4, [r3, #102]	; 0x66
  122bf8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122bfc:	e5933004 	ldr	r3, [r3, #4]
  122c00:	e1a00003 	mov	r0, r3
  122c04:	ebffe12e 	bl	11b0c4 <pbuf_clen>
  122c08:	e1a03000 	mov	r3, r0
  122c0c:	e1540003 	cmp	r4, r3
  122c10:	2a000006 	bcs	122c30 <tcp_receive+0x534>
  122c14:	e30804b8 	movw	r0, #33976	; 0x84b8
  122c18:	e3400014 	movt	r0, #20
  122c1c:	ebff813c 	bl	103114 <rt_kprintf>
  122c20:	e300148b 	movw	r1, #1163	; 0x48b
  122c24:	e30802b4 	movw	r0, #33460	; 0x82b4
  122c28:	e3400014 	movt	r0, #20
  122c2c:	ebffa12f 	bl	10b0f0 <sys_arch_assert>

        pcb->snd_queuelen -= pbuf_clen(next->p);
  122c30:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122c34:	e5933004 	ldr	r3, [r3, #4]
  122c38:	e1a00003 	mov	r0, r3
  122c3c:	ebffe120 	bl	11b0c4 <pbuf_clen>
  122c40:	e1a03000 	mov	r3, r0
  122c44:	e1a02003 	mov	r2, r3
  122c48:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122c4c:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  122c50:	e0433002 	sub	r3, r3, r2
  122c54:	e6ff2073 	uxth	r2, r3
  122c58:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122c5c:	e1c326b6 	strh	r2, [r3, #102]	; 0x66
        recv_acked += next->len;
  122c60:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122c64:	e1d320b8 	ldrh	r2, [r3, #8]
  122c68:	e30e3258 	movw	r3, #57944	; 0xe258
  122c6c:	e3403014 	movt	r3, #20
  122c70:	e1d330b0 	ldrh	r3, [r3]
  122c74:	e0823003 	add	r3, r2, r3
  122c78:	e6ff2073 	uxth	r2, r3
  122c7c:	e30e3258 	movw	r3, #57944	; 0xe258
  122c80:	e3403014 	movt	r3, #20
  122c84:	e1c320b0 	strh	r2, [r3]
        tcp_seg_free(next);
  122c88:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  122c8c:	ebfff1fb 	bl	11f480 <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
  122c90:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122c94:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  122c98:	e3530000 	cmp	r3, #0
  122c9c:	0a00000e 	beq	122cdc <tcp_receive+0x5e0>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
  122ca0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122ca4:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  122ca8:	e3530000 	cmp	r3, #0
  122cac:	1a00000a 	bne	122cdc <tcp_receive+0x5e0>
  122cb0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122cb4:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122cb8:	e3530000 	cmp	r3, #0
  122cbc:	1a000006 	bne	122cdc <tcp_receive+0x5e0>
  122cc0:	e30804e0 	movw	r0, #34016	; 0x84e0
  122cc4:	e3400014 	movt	r0, #20
  122cc8:	ebff8111 	bl	103114 <rt_kprintf>
  122ccc:	e3001494 	movw	r1, #1172	; 0x494
  122cd0:	e30802b4 	movw	r0, #33460	; 0x82b4
  122cd4:	e3400014 	movt	r0, #20
  122cd8:	ebffa104 	bl	10b0f0 <sys_arch_assert>
      while (pcb->unacked != NULL &&
  122cdc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122ce0:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  122ce4:	e3530000 	cmp	r3, #0
  122ce8:	0a000020 	beq	122d70 <tcp_receive+0x674>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
  122cec:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122cf0:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  122cf4:	e593300c 	ldr	r3, [r3, #12]
  122cf8:	e5933004 	ldr	r3, [r3, #4]
  122cfc:	e1a00003 	mov	r0, r3
  122d00:	ebffce3f 	bl	116604 <lwip_htonl>
  122d04:	e1a04000 	mov	r4, r0
  122d08:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122d0c:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  122d10:	e1d330b8 	ldrh	r3, [r3, #8]
  122d14:	e1a05003 	mov	r5, r3
  122d18:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122d1c:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  122d20:	e593300c 	ldr	r3, [r3, #12]
  122d24:	e1d330bc 	ldrh	r3, [r3, #12]
  122d28:	e6ff3073 	uxth	r3, r3
  122d2c:	e1a00003 	mov	r0, r3
  122d30:	ebffce27 	bl	1165d4 <lwip_htons>
  122d34:	e1a03000 	mov	r3, r0
  122d38:	e2033003 	and	r3, r3, #3
  122d3c:	e3530000 	cmp	r3, #0
  122d40:	0a000001 	beq	122d4c <tcp_receive+0x650>
  122d44:	e3a03001 	mov	r3, #1
  122d48:	ea000000 	b	122d50 <tcp_receive+0x654>
  122d4c:	e3a03000 	mov	r3, #0
  122d50:	e0833005 	add	r3, r3, r5
  122d54:	e0842003 	add	r2, r4, r3
  122d58:	e30e3254 	movw	r3, #57940	; 0xe254
  122d5c:	e3403014 	movt	r3, #20
  122d60:	e5933000 	ldr	r3, [r3]
  122d64:	e0423003 	sub	r3, r2, r3
      while (pcb->unacked != NULL &&
  122d68:	e3530000 	cmp	r3, #0
  122d6c:	daffff97 	ble	122bd0 <tcp_receive+0x4d4>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
  122d70:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122d74:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  122d78:	e3530000 	cmp	r3, #0
  122d7c:	1a000003 	bne	122d90 <tcp_receive+0x694>
        pcb->rtime = -1;
  122d80:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122d84:	e3e02000 	mvn	r2, #0
  122d88:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
  122d8c:	ea000002 	b	122d9c <tcp_receive+0x6a0>
      } else {
        pcb->rtime = 0;
  122d90:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122d94:	e3a02000 	mov	r2, #0
  122d98:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
      }

      pcb->polltmr = 0;
  122d9c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122da0:	e3a02000 	mov	r2, #0
  122da4:	e5c3201f 	strb	r2, [r3, #31]
  122da8:	ea000001 	b	122db4 <tcp_receive+0x6b8>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
  122dac:	e51b0040 	ldr	r0, [fp, #-64]	; 0xffffffc0
  122db0:	eb000c08 	bl	125dd8 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
  122db4:	ea000049 	b	122ee0 <tcp_receive+0x7e4>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
  122db8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122dbc:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122dc0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
      pcb->unsent = pcb->unsent->next;
  122dc4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122dc8:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122dcc:	e5932000 	ldr	r2, [r3]
  122dd0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122dd4:	e583206c 	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
  122dd8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122ddc:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122de0:	e3530000 	cmp	r3, #0
  122de4:	1a000002 	bne	122df4 <tcp_receive+0x6f8>
        pcb->unsent_oversize = 0;
  122de8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122dec:	e3a02000 	mov	r2, #0
  122df0:	e1c326b8 	strh	r2, [r3, #104]	; 0x68
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
  122df4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122df8:	e1d346b6 	ldrh	r4, [r3, #102]	; 0x66
  122dfc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122e00:	e5933004 	ldr	r3, [r3, #4]
  122e04:	e1a00003 	mov	r0, r3
  122e08:	ebffe0ad 	bl	11b0c4 <pbuf_clen>
  122e0c:	e1a03000 	mov	r3, r0
  122e10:	e1540003 	cmp	r4, r3
  122e14:	2a000006 	bcs	122e34 <tcp_receive+0x738>
  122e18:	e30804b8 	movw	r0, #33976	; 0x84b8
  122e1c:	e3400014 	movt	r0, #20
  122e20:	ebff80bb 	bl	103114 <rt_kprintf>
  122e24:	e30014c2 	movw	r1, #1218	; 0x4c2
  122e28:	e30802b4 	movw	r0, #33460	; 0x82b4
  122e2c:	e3400014 	movt	r0, #20
  122e30:	ebffa0ae 	bl	10b0f0 <sys_arch_assert>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
  122e34:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122e38:	e5933004 	ldr	r3, [r3, #4]
  122e3c:	e1a00003 	mov	r0, r3
  122e40:	ebffe09f 	bl	11b0c4 <pbuf_clen>
  122e44:	e1a03000 	mov	r3, r0
  122e48:	e1a02003 	mov	r2, r3
  122e4c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122e50:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  122e54:	e0433002 	sub	r3, r3, r2
  122e58:	e6ff2073 	uxth	r2, r3
  122e5c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122e60:	e1c326b6 	strh	r2, [r3, #102]	; 0x66
      recv_acked += next->len;
  122e64:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122e68:	e1d320b8 	ldrh	r2, [r3, #8]
  122e6c:	e30e3258 	movw	r3, #57944	; 0xe258
  122e70:	e3403014 	movt	r3, #20
  122e74:	e1d330b0 	ldrh	r3, [r3]
  122e78:	e0823003 	add	r3, r2, r3
  122e7c:	e6ff2073 	uxth	r2, r3
  122e80:	e30e3258 	movw	r3, #57944	; 0xe258
  122e84:	e3403014 	movt	r3, #20
  122e88:	e1c320b0 	strh	r2, [r3]
      tcp_seg_free(next);
  122e8c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  122e90:	ebfff17a 	bl	11f480 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
  122e94:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122e98:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  122e9c:	e3530000 	cmp	r3, #0
  122ea0:	0a00000e 	beq	122ee0 <tcp_receive+0x7e4>
        LWIP_ASSERT("tcp_receive: valid queue length",
  122ea4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122ea8:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  122eac:	e3530000 	cmp	r3, #0
  122eb0:	1a00000a 	bne	122ee0 <tcp_receive+0x7e4>
  122eb4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122eb8:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122ebc:	e3530000 	cmp	r3, #0
  122ec0:	1a000006 	bne	122ee0 <tcp_receive+0x7e4>
  122ec4:	e30804e0 	movw	r0, #34016	; 0x84e0
  122ec8:	e3400014 	movt	r0, #20
  122ecc:	ebff8090 	bl	103114 <rt_kprintf>
  122ed0:	e30014ca 	movw	r1, #1226	; 0x4ca
  122ed4:	e30802b4 	movw	r0, #33460	; 0x82b4
  122ed8:	e3400014 	movt	r0, #20
  122edc:	ebffa083 	bl	10b0f0 <sys_arch_assert>
    while (pcb->unsent != NULL &&
  122ee0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122ee4:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122ee8:	e3530000 	cmp	r3, #0
  122eec:	0a000028 	beq	122f94 <tcp_receive+0x898>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
  122ef0:	e30e3254 	movw	r3, #57940	; 0xe254
  122ef4:	e3403014 	movt	r3, #20
  122ef8:	e5934000 	ldr	r4, [r3]
  122efc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122f00:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122f04:	e593300c 	ldr	r3, [r3, #12]
  122f08:	e5933004 	ldr	r3, [r3, #4]
  122f0c:	e1a00003 	mov	r0, r3
  122f10:	ebffcdbb 	bl	116604 <lwip_htonl>
  122f14:	e1a05000 	mov	r5, r0
  122f18:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122f1c:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122f20:	e1d330b8 	ldrh	r3, [r3, #8]
  122f24:	e1a06003 	mov	r6, r3
  122f28:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122f2c:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122f30:	e593300c 	ldr	r3, [r3, #12]
  122f34:	e1d330bc 	ldrh	r3, [r3, #12]
  122f38:	e6ff3073 	uxth	r3, r3
  122f3c:	e1a00003 	mov	r0, r3
  122f40:	ebffcda3 	bl	1165d4 <lwip_htons>
  122f44:	e1a03000 	mov	r3, r0
  122f48:	e2033003 	and	r3, r3, #3
  122f4c:	e3530000 	cmp	r3, #0
  122f50:	0a000001 	beq	122f5c <tcp_receive+0x860>
  122f54:	e3a03001 	mov	r3, #1
  122f58:	ea000000 	b	122f60 <tcp_receive+0x864>
  122f5c:	e3a03000 	mov	r3, #0
  122f60:	e0833006 	add	r3, r3, r6
  122f64:	e0853003 	add	r3, r5, r3
  122f68:	e0443003 	sub	r3, r4, r3
    while (pcb->unsent != NULL &&
  122f6c:	e3530000 	cmp	r3, #0
  122f70:	ba000007 	blt	122f94 <tcp_receive+0x898>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
  122f74:	e30e3254 	movw	r3, #57940	; 0xe254
  122f78:	e3403014 	movt	r3, #20
  122f7c:	e5932000 	ldr	r2, [r3]
  122f80:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122f84:	e5933050 	ldr	r3, [r3, #80]	; 0x50
  122f88:	e0423003 	sub	r3, r2, r3
  122f8c:	e3530000 	cmp	r3, #0
  122f90:	daffff88 	ble	122db8 <tcp_receive+0x6bc>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
  122f94:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122f98:	e1d326b4 	ldrh	r2, [r3, #100]	; 0x64
  122f9c:	e30e3258 	movw	r3, #57944	; 0xe258
  122fa0:	e3403014 	movt	r3, #20
  122fa4:	e1d330b0 	ldrh	r3, [r3]
  122fa8:	e0823003 	add	r3, r2, r3
  122fac:	e6ff2073 	uxth	r2, r3
  122fb0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122fb4:	e1c326b4 	strh	r2, [r3, #100]	; 0x64
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
  122fb8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122fbc:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  122fc0:	e3530000 	cmp	r3, #0
  122fc4:	0a00004c 	beq	1230fc <tcp_receive+0xa00>
  122fc8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122fcc:	e593203c 	ldr	r2, [r3, #60]	; 0x3c
  122fd0:	e30e3254 	movw	r3, #57940	; 0xe254
  122fd4:	e3403014 	movt	r3, #20
  122fd8:	e5933000 	ldr	r3, [r3]
  122fdc:	e0423003 	sub	r3, r2, r3
  122fe0:	e3530000 	cmp	r3, #0
  122fe4:	aa000044 	bge	1230fc <tcp_receive+0xa00>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
  122fe8:	e30c3c24 	movw	r3, #52260	; 0xcc24
  122fec:	e3403015 	movt	r3, #21
  122ff0:	e5933000 	ldr	r3, [r3]
  122ff4:	e6ff2073 	uxth	r2, r3
  122ff8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122ffc:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  123000:	e6ff3073 	uxth	r3, r3
  123004:	e0423003 	sub	r3, r2, r3
  123008:	e6ff3073 	uxth	r3, r3
  12300c:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
  123010:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  123014:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123018:	e1d334f0 	ldrsh	r3, [r3, #64]	; 0x40
  12301c:	e1a031c3 	asr	r3, r3, #3
  123020:	e6bf3073 	sxth	r3, r3
  123024:	e6ff3073 	uxth	r3, r3
  123028:	e0423003 	sub	r3, r2, r3
  12302c:	e6ff3073 	uxth	r3, r3
  123030:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
      pcb->sa += m;
  123034:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123038:	e1d334f0 	ldrsh	r3, [r3, #64]	; 0x40
  12303c:	e6ff2073 	uxth	r2, r3
  123040:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  123044:	e0823003 	add	r3, r2, r3
  123048:	e6ff3073 	uxth	r3, r3
  12304c:	e6bf2073 	sxth	r2, r3
  123050:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123054:	e1c324b0 	strh	r2, [r3, #64]	; 0x40
      if (m < 0) {
  123058:	e15b32f2 	ldrsh	r3, [fp, #-34]	; 0xffffffde
  12305c:	e3530000 	cmp	r3, #0
  123060:	aa000003 	bge	123074 <tcp_receive+0x978>
        m = -m;
  123064:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  123068:	e2633000 	rsb	r3, r3, #0
  12306c:	e6ff3073 	uxth	r3, r3
  123070:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
      }
      m = m - (pcb->sv >> 2);
  123074:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  123078:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12307c:	e1d334f2 	ldrsh	r3, [r3, #66]	; 0x42
  123080:	e1a03143 	asr	r3, r3, #2
  123084:	e6bf3073 	sxth	r3, r3
  123088:	e6ff3073 	uxth	r3, r3
  12308c:	e0423003 	sub	r3, r2, r3
  123090:	e6ff3073 	uxth	r3, r3
  123094:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
      pcb->sv += m;
  123098:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12309c:	e1d334f2 	ldrsh	r3, [r3, #66]	; 0x42
  1230a0:	e6ff2073 	uxth	r2, r3
  1230a4:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  1230a8:	e0823003 	add	r3, r2, r3
  1230ac:	e6ff3073 	uxth	r3, r3
  1230b0:	e6bf2073 	sxth	r2, r3
  1230b4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1230b8:	e1c324b2 	strh	r2, [r3, #66]	; 0x42
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
  1230bc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1230c0:	e1d334f0 	ldrsh	r3, [r3, #64]	; 0x40
  1230c4:	e1a031c3 	asr	r3, r3, #3
  1230c8:	e6bf3073 	sxth	r3, r3
  1230cc:	e6ff2073 	uxth	r2, r3
  1230d0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1230d4:	e1d334f2 	ldrsh	r3, [r3, #66]	; 0x42
  1230d8:	e6ff3073 	uxth	r3, r3
  1230dc:	e0823003 	add	r3, r2, r3
  1230e0:	e6ff3073 	uxth	r3, r3
  1230e4:	e6bf2073 	sxth	r2, r3
  1230e8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1230ec:	e1c324b4 	strh	r2, [r3, #68]	; 0x44

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
  1230f0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1230f4:	e3a02000 	mov	r2, #0
  1230f8:	e5832038 	str	r2, [r3, #56]	; 0x38

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
  1230fc:	e30e325a 	movw	r3, #57946	; 0xe25a
  123100:	e3403014 	movt	r3, #20
  123104:	e1d330b0 	ldrh	r3, [r3]
  123108:	e3530000 	cmp	r3, #0
  12310c:	0a0004b3 	beq	1243e0 <tcp_receive+0x1ce4>
  123110:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123114:	e5933014 	ldr	r3, [r3, #20]
  123118:	e3530006 	cmp	r3, #6
  12311c:	8a0004af 	bhi	1243e0 <tcp_receive+0x1ce4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
  123120:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123124:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  123128:	e30e3250 	movw	r3, #57936	; 0xe250
  12312c:	e3403014 	movt	r3, #20
  123130:	e5933000 	ldr	r3, [r3]
  123134:	e0423003 	sub	r3, r2, r3
  123138:	e2433001 	sub	r3, r3, #1
  12313c:	e3530000 	cmp	r3, #0
  123140:	ba0000aa 	blt	1233f0 <tcp_receive+0xcf4>
  123144:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123148:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  12314c:	e30e325a 	movw	r3, #57946	; 0xe25a
  123150:	e3403014 	movt	r3, #20
  123154:	e1d330b0 	ldrh	r3, [r3]
  123158:	e1a01003 	mov	r1, r3
  12315c:	e30e3250 	movw	r3, #57936	; 0xe250
  123160:	e3403014 	movt	r3, #20
  123164:	e5933000 	ldr	r3, [r3]
  123168:	e0813003 	add	r3, r1, r3
  12316c:	e0423003 	sub	r3, r2, r3
  123170:	e2833001 	add	r3, r3, #1
  123174:	e3530000 	cmp	r3, #0
  123178:	ca00009c 	bgt	1233f0 <tcp_receive+0xcf4>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
  12317c:	e30e3230 	movw	r3, #57904	; 0xe230
  123180:	e3403014 	movt	r3, #20
  123184:	e5933004 	ldr	r3, [r3, #4]
  123188:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
      off = pcb->rcv_nxt - seqno;
  12318c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123190:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  123194:	e30e3250 	movw	r3, #57936	; 0xe250
  123198:	e3403014 	movt	r3, #20
  12319c:	e5933000 	ldr	r3, [r3]
  1231a0:	e0423003 	sub	r3, r2, r3
  1231a4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
  1231a8:	e30e3230 	movw	r3, #57904	; 0xe230
  1231ac:	e3403014 	movt	r3, #20
  1231b0:	e5933004 	ldr	r3, [r3, #4]
  1231b4:	e3530000 	cmp	r3, #0
  1231b8:	1a000006 	bne	1231d8 <tcp_receive+0xadc>
  1231bc:	e3080500 	movw	r0, #34048	; 0x8500
  1231c0:	e3400014 	movt	r0, #20
  1231c4:	ebff7fd2 	bl	103114 <rt_kprintf>
  1231c8:	e3001529 	movw	r1, #1321	; 0x529
  1231cc:	e30802b4 	movw	r0, #33460	; 0x82b4
  1231d0:	e3400014 	movt	r0, #20
  1231d4:	ebff9fc5 	bl	10b0f0 <sys_arch_assert>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
  1231d8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1231dc:	e3072ffe 	movw	r2, #32766	; 0x7ffe
  1231e0:	e1530002 	cmp	r3, r2
  1231e4:	da000006 	ble	123204 <tcp_receive+0xb08>
  1231e8:	e3080510 	movw	r0, #34064	; 0x8510
  1231ec:	e3400014 	movt	r0, #20
  1231f0:	ebff7fc7 	bl	103114 <rt_kprintf>
  1231f4:	e300152a 	movw	r1, #1322	; 0x52a
  1231f8:	e30802b4 	movw	r0, #33460	; 0x82b4
  1231fc:	e3400014 	movt	r0, #20
  123200:	ebff9fba 	bl	10b0f0 <sys_arch_assert>
      if (inseg.p->len < off) {
  123204:	e30e3230 	movw	r3, #57904	; 0xe230
  123208:	e3403014 	movt	r3, #20
  12320c:	e5933004 	ldr	r3, [r3, #4]
  123210:	e1d330ba 	ldrh	r3, [r3, #10]
  123214:	e1a02003 	mov	r2, r3
  123218:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12321c:	e1530002 	cmp	r3, r2
  123220:	da00003f 	ble	123324 <tcp_receive+0xc28>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
  123224:	e30e3230 	movw	r3, #57904	; 0xe230
  123228:	e3403014 	movt	r3, #20
  12322c:	e5933004 	ldr	r3, [r3, #4]
  123230:	e1d330b8 	ldrh	r3, [r3, #8]
  123234:	e1a02003 	mov	r2, r3
  123238:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12323c:	e1530002 	cmp	r3, r2
  123240:	da000006 	ble	123260 <tcp_receive+0xb64>
  123244:	e3080520 	movw	r0, #34080	; 0x8520
  123248:	e3400014 	movt	r0, #20
  12324c:	ebff7fb0 	bl	103114 <rt_kprintf>
  123250:	e300152c 	movw	r1, #1324	; 0x52c
  123254:	e30802b4 	movw	r0, #33460	; 0x82b4
  123258:	e3400014 	movt	r0, #20
  12325c:	ebff9fa3 	bl	10b0f0 <sys_arch_assert>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
  123260:	e30e3230 	movw	r3, #57904	; 0xe230
  123264:	e3403014 	movt	r3, #20
  123268:	e5933004 	ldr	r3, [r3, #4]
  12326c:	e1d320b8 	ldrh	r2, [r3, #8]
  123270:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  123274:	e6ff3073 	uxth	r3, r3
  123278:	e0423003 	sub	r3, r2, r3
  12327c:	e14b33b4 	strh	r3, [fp, #-52]	; 0xffffffcc
        while (p->len < off) {
  123280:	ea00000e 	b	1232c0 <tcp_receive+0xbc4>
          off -= p->len;
  123284:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  123288:	e1d330ba 	ldrh	r3, [r3, #10]
  12328c:	e1a02003 	mov	r2, r3
  123290:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  123294:	e0433002 	sub	r3, r3, r2
  123298:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
  12329c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1232a0:	e15b23b4 	ldrh	r2, [fp, #-52]	; 0xffffffcc
  1232a4:	e1c320b8 	strh	r2, [r3, #8]
          p->len = 0;
  1232a8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1232ac:	e3a02000 	mov	r2, #0
  1232b0:	e1c320ba 	strh	r2, [r3, #10]
          p = p->next;
  1232b4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1232b8:	e5933000 	ldr	r3, [r3]
  1232bc:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
        while (p->len < off) {
  1232c0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1232c4:	e1d330ba 	ldrh	r3, [r3, #10]
  1232c8:	e1a02003 	mov	r2, r3
  1232cc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1232d0:	e1530002 	cmp	r3, r2
  1232d4:	caffffea 	bgt	123284 <tcp_receive+0xb88>
        }
        if (pbuf_header(p, (s16_t)-off)) {
  1232d8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1232dc:	e6ff3073 	uxth	r3, r3
  1232e0:	e2633000 	rsb	r3, r3, #0
  1232e4:	e6ff3073 	uxth	r3, r3
  1232e8:	e6bf3073 	sxth	r3, r3
  1232ec:	e1a01003 	mov	r1, r3
  1232f0:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
  1232f4:	ebffdecf 	bl	11ae38 <pbuf_header>
  1232f8:	e1a03000 	mov	r3, r0
  1232fc:	e3530000 	cmp	r3, #0
  123300:	0a00001c 	beq	123378 <tcp_receive+0xc7c>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
  123304:	e3080530 	movw	r0, #34096	; 0x8530
  123308:	e3400014 	movt	r0, #20
  12330c:	ebff7f80 	bl	103114 <rt_kprintf>
  123310:	e3001539 	movw	r1, #1337	; 0x539
  123314:	e30802b4 	movw	r0, #33460	; 0x82b4
  123318:	e3400014 	movt	r0, #20
  12331c:	ebff9f73 	bl	10b0f0 <sys_arch_assert>
  123320:	ea000014 	b	123378 <tcp_receive+0xc7c>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
  123324:	e30e3230 	movw	r3, #57904	; 0xe230
  123328:	e3403014 	movt	r3, #20
  12332c:	e5933004 	ldr	r3, [r3, #4]
  123330:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  123334:	e6ff2072 	uxth	r2, r2
  123338:	e2622000 	rsb	r2, r2, #0
  12333c:	e6ff2072 	uxth	r2, r2
  123340:	e6bf2072 	sxth	r2, r2
  123344:	e1a01002 	mov	r1, r2
  123348:	e1a00003 	mov	r0, r3
  12334c:	ebffdeb9 	bl	11ae38 <pbuf_header>
  123350:	e1a03000 	mov	r3, r0
  123354:	e3530000 	cmp	r3, #0
  123358:	0a000006 	beq	123378 <tcp_receive+0xc7c>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
  12335c:	e3080530 	movw	r0, #34096	; 0x8530
  123360:	e3400014 	movt	r0, #20
  123364:	ebff7f6a 	bl	103114 <rt_kprintf>
  123368:	e300153e 	movw	r1, #1342	; 0x53e
  12336c:	e30802b4 	movw	r0, #33460	; 0x82b4
  123370:	e3400014 	movt	r0, #20
  123374:	ebff9f5d 	bl	10b0f0 <sys_arch_assert>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
  123378:	e30e3230 	movw	r3, #57904	; 0xe230
  12337c:	e3403014 	movt	r3, #20
  123380:	e1d320b8 	ldrh	r2, [r3, #8]
  123384:	e30e3250 	movw	r3, #57936	; 0xe250
  123388:	e3403014 	movt	r3, #20
  12338c:	e5933000 	ldr	r3, [r3]
  123390:	e6ff1073 	uxth	r1, r3
  123394:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123398:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12339c:	e6ff3073 	uxth	r3, r3
  1233a0:	e0413003 	sub	r3, r1, r3
  1233a4:	e6ff3073 	uxth	r3, r3
  1233a8:	e0823003 	add	r3, r2, r3
  1233ac:	e6ff2073 	uxth	r2, r3
  1233b0:	e30e3230 	movw	r3, #57904	; 0xe230
  1233b4:	e3403014 	movt	r3, #20
  1233b8:	e1c320b8 	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
  1233bc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1233c0:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  1233c4:	e30e3250 	movw	r3, #57936	; 0xe250
  1233c8:	e3403014 	movt	r3, #20
  1233cc:	e5832000 	str	r2, [r3]
  1233d0:	e30e3230 	movw	r3, #57904	; 0xe230
  1233d4:	e3403014 	movt	r3, #20
  1233d8:	e593200c 	ldr	r2, [r3, #12]
  1233dc:	e30e3250 	movw	r3, #57936	; 0xe250
  1233e0:	e3403014 	movt	r3, #20
  1233e4:	e5933000 	ldr	r3, [r3]
  1233e8:	e5823004 	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
  1233ec:	ea00000d 	b	123428 <tcp_receive+0xd2c>
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
  1233f0:	e30e3250 	movw	r3, #57936	; 0xe250
  1233f4:	e3403014 	movt	r3, #20
  1233f8:	e5932000 	ldr	r2, [r3]
  1233fc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123400:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  123404:	e0423003 	sub	r3, r2, r3
  123408:	e3530000 	cmp	r3, #0
  12340c:	aa000005 	bge	123428 <tcp_receive+0xd2c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
  123410:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123414:	e5d3301e 	ldrb	r3, [r3, #30]
  123418:	e3833002 	orr	r3, r3, #2
  12341c:	e6ef2073 	uxtb	r2, r3
  123420:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123424:	e5c3201e 	strb	r2, [r3, #30]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
  123428:	e30e3250 	movw	r3, #57936	; 0xe250
  12342c:	e3403014 	movt	r3, #20
  123430:	e5932000 	ldr	r2, [r3]
  123434:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123438:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12343c:	e0423003 	sub	r3, r2, r3
  123440:	e3530000 	cmp	r3, #0
  123444:	ba0003e1 	blt	1243d0 <tcp_receive+0x1cd4>
  123448:	e30e3250 	movw	r3, #57936	; 0xe250
  12344c:	e3403014 	movt	r3, #20
  123450:	e5932000 	ldr	r2, [r3]
  123454:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123458:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12345c:	e51b1040 	ldr	r1, [fp, #-64]	; 0xffffffc0
  123460:	e1d112bc 	ldrh	r1, [r1, #44]	; 0x2c
  123464:	e0833001 	add	r3, r3, r1
  123468:	e0423003 	sub	r3, r2, r3
  12346c:	e2833001 	add	r3, r3, #1
  123470:	e3530000 	cmp	r3, #0
  123474:	ca0003d5 	bgt	1243d0 <tcp_receive+0x1cd4>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
  123478:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12347c:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  123480:	e30e3250 	movw	r3, #57936	; 0xe250
  123484:	e3403014 	movt	r3, #20
  123488:	e5933000 	ldr	r3, [r3]
  12348c:	e1520003 	cmp	r2, r3
  123490:	1a00026b 	bne	123e44 <tcp_receive+0x1748>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
  123494:	e30e3230 	movw	r3, #57904	; 0xe230
  123498:	e3403014 	movt	r3, #20
  12349c:	e1d340b8 	ldrh	r4, [r3, #8]
  1234a0:	e30e3230 	movw	r3, #57904	; 0xe230
  1234a4:	e3403014 	movt	r3, #20
  1234a8:	e593300c 	ldr	r3, [r3, #12]
  1234ac:	e1d330bc 	ldrh	r3, [r3, #12]
  1234b0:	e6ff3073 	uxth	r3, r3
  1234b4:	e1a00003 	mov	r0, r3
  1234b8:	ebffcc45 	bl	1165d4 <lwip_htons>
  1234bc:	e1a03000 	mov	r3, r0
  1234c0:	e2033003 	and	r3, r3, #3
  1234c4:	e3530000 	cmp	r3, #0
  1234c8:	0a000001 	beq	1234d4 <tcp_receive+0xdd8>
  1234cc:	e3a03001 	mov	r3, #1
  1234d0:	ea000000 	b	1234d8 <tcp_receive+0xddc>
  1234d4:	e3a03000 	mov	r3, #0
  1234d8:	e0833004 	add	r3, r3, r4
  1234dc:	e6ff2073 	uxth	r2, r3
  1234e0:	e30e325a 	movw	r3, #57946	; 0xe25a
  1234e4:	e3403014 	movt	r3, #20
  1234e8:	e1c320b0 	strh	r2, [r3]

        if (tcplen > pcb->rcv_wnd) {
  1234ec:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1234f0:	e1d322bc 	ldrh	r2, [r3, #44]	; 0x2c
  1234f4:	e30e325a 	movw	r3, #57946	; 0xe25a
  1234f8:	e3403014 	movt	r3, #20
  1234fc:	e1d330b0 	ldrh	r3, [r3]
  123500:	e1520003 	cmp	r2, r3
  123504:	2a000072 	bcs	1236d4 <tcp_receive+0xfd8>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
  123508:	e30e3230 	movw	r3, #57904	; 0xe230
  12350c:	e3403014 	movt	r3, #20
  123510:	e593300c 	ldr	r3, [r3, #12]
  123514:	e1d330bc 	ldrh	r3, [r3, #12]
  123518:	e6ff3073 	uxth	r3, r3
  12351c:	e1a00003 	mov	r0, r3
  123520:	ebffcc2b 	bl	1165d4 <lwip_htons>
  123524:	e1a03000 	mov	r3, r0
  123528:	e2033001 	and	r3, r3, #1
  12352c:	e3530000 	cmp	r3, #0
  123530:	0a00001a 	beq	1235a0 <tcp_receive+0xea4>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
  123534:	e30e3230 	movw	r3, #57904	; 0xe230
  123538:	e3403014 	movt	r3, #20
  12353c:	e593300c 	ldr	r3, [r3, #12]
  123540:	e1d330bc 	ldrh	r3, [r3, #12]
  123544:	e6ff3073 	uxth	r3, r3
  123548:	e3c33c3f 	bic	r3, r3, #16128	; 0x3f00
  12354c:	e6ff4073 	uxth	r4, r3
  123550:	e30e3230 	movw	r3, #57904	; 0xe230
  123554:	e3403014 	movt	r3, #20
  123558:	e593300c 	ldr	r3, [r3, #12]
  12355c:	e1d330bc 	ldrh	r3, [r3, #12]
  123560:	e6ff3073 	uxth	r3, r3
  123564:	e1a00003 	mov	r0, r3
  123568:	ebffcc19 	bl	1165d4 <lwip_htons>
  12356c:	e1a03000 	mov	r3, r0
  123570:	e203303e 	and	r3, r3, #62	; 0x3e
  123574:	e6ff3073 	uxth	r3, r3
  123578:	e1a00003 	mov	r0, r3
  12357c:	ebffcc14 	bl	1165d4 <lwip_htons>
  123580:	e1a03000 	mov	r3, r0
  123584:	e1a02003 	mov	r2, r3
  123588:	e30e3230 	movw	r3, #57904	; 0xe230
  12358c:	e3403014 	movt	r3, #20
  123590:	e593300c 	ldr	r3, [r3, #12]
  123594:	e1842002 	orr	r2, r4, r2
  123598:	e6ff2072 	uxth	r2, r2
  12359c:	e1c320bc 	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
  1235a0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1235a4:	e1d322bc 	ldrh	r2, [r3, #44]	; 0x2c
  1235a8:	e30e3230 	movw	r3, #57904	; 0xe230
  1235ac:	e3403014 	movt	r3, #20
  1235b0:	e1c320b8 	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
  1235b4:	e30e3230 	movw	r3, #57904	; 0xe230
  1235b8:	e3403014 	movt	r3, #20
  1235bc:	e593300c 	ldr	r3, [r3, #12]
  1235c0:	e1d330bc 	ldrh	r3, [r3, #12]
  1235c4:	e6ff3073 	uxth	r3, r3
  1235c8:	e1a00003 	mov	r0, r3
  1235cc:	ebffcc00 	bl	1165d4 <lwip_htons>
  1235d0:	e1a03000 	mov	r3, r0
  1235d4:	e2033002 	and	r3, r3, #2
  1235d8:	e3530000 	cmp	r3, #0
  1235dc:	0a000007 	beq	123600 <tcp_receive+0xf04>
            inseg.len -= 1;
  1235e0:	e30e3230 	movw	r3, #57904	; 0xe230
  1235e4:	e3403014 	movt	r3, #20
  1235e8:	e1d330b8 	ldrh	r3, [r3, #8]
  1235ec:	e2433001 	sub	r3, r3, #1
  1235f0:	e6ff2073 	uxth	r2, r3
  1235f4:	e30e3230 	movw	r3, #57904	; 0xe230
  1235f8:	e3403014 	movt	r3, #20
  1235fc:	e1c320b8 	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
  123600:	e30e3230 	movw	r3, #57904	; 0xe230
  123604:	e3403014 	movt	r3, #20
  123608:	e5932004 	ldr	r2, [r3, #4]
  12360c:	e30e3230 	movw	r3, #57904	; 0xe230
  123610:	e3403014 	movt	r3, #20
  123614:	e1d330b8 	ldrh	r3, [r3, #8]
  123618:	e1a01003 	mov	r1, r3
  12361c:	e1a00002 	mov	r0, r2
  123620:	ebffdcd9 	bl	11a98c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
  123624:	e30e3230 	movw	r3, #57904	; 0xe230
  123628:	e3403014 	movt	r3, #20
  12362c:	e1d340b8 	ldrh	r4, [r3, #8]
  123630:	e30e3230 	movw	r3, #57904	; 0xe230
  123634:	e3403014 	movt	r3, #20
  123638:	e593300c 	ldr	r3, [r3, #12]
  12363c:	e1d330bc 	ldrh	r3, [r3, #12]
  123640:	e6ff3073 	uxth	r3, r3
  123644:	e1a00003 	mov	r0, r3
  123648:	ebffcbe1 	bl	1165d4 <lwip_htons>
  12364c:	e1a03000 	mov	r3, r0
  123650:	e2033003 	and	r3, r3, #3
  123654:	e3530000 	cmp	r3, #0
  123658:	0a000001 	beq	123664 <tcp_receive+0xf68>
  12365c:	e3a03001 	mov	r3, #1
  123660:	ea000000 	b	123668 <tcp_receive+0xf6c>
  123664:	e3a03000 	mov	r3, #0
  123668:	e0833004 	add	r3, r3, r4
  12366c:	e6ff2073 	uxth	r2, r3
  123670:	e30e325a 	movw	r3, #57946	; 0xe25a
  123674:	e3403014 	movt	r3, #20
  123678:	e1c320b0 	strh	r2, [r3]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
  12367c:	e30e325a 	movw	r3, #57946	; 0xe25a
  123680:	e3403014 	movt	r3, #20
  123684:	e1d330b0 	ldrh	r3, [r3]
  123688:	e1a02003 	mov	r2, r3
  12368c:	e30e3250 	movw	r3, #57936	; 0xe250
  123690:	e3403014 	movt	r3, #20
  123694:	e5933000 	ldr	r3, [r3]
  123698:	e0822003 	add	r2, r2, r3
  12369c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1236a0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  1236a4:	e51b1040 	ldr	r1, [fp, #-64]	; 0xffffffc0
  1236a8:	e1d112bc 	ldrh	r1, [r1, #44]	; 0x2c
  1236ac:	e0833001 	add	r3, r3, r1
  1236b0:	e1520003 	cmp	r2, r3
  1236b4:	0a000006 	beq	1236d4 <tcp_receive+0xfd8>
  1236b8:	e3080544 	movw	r0, #34116	; 0x8544
  1236bc:	e3400014 	movt	r0, #20
  1236c0:	ebff7e93 	bl	103114 <rt_kprintf>
  1236c4:	e300156c 	movw	r1, #1388	; 0x56c
  1236c8:	e30802b4 	movw	r0, #33460	; 0x82b4
  1236cc:	e3400014 	movt	r0, #20
  1236d0:	ebff9e86 	bl	10b0f0 <sys_arch_assert>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
  1236d4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1236d8:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  1236dc:	e3530000 	cmp	r3, #0
  1236e0:	0a0000da 	beq	123a50 <tcp_receive+0x1354>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
  1236e4:	e30e3230 	movw	r3, #57904	; 0xe230
  1236e8:	e3403014 	movt	r3, #20
  1236ec:	e593300c 	ldr	r3, [r3, #12]
  1236f0:	e1d330bc 	ldrh	r3, [r3, #12]
  1236f4:	e6ff3073 	uxth	r3, r3
  1236f8:	e1a00003 	mov	r0, r3
  1236fc:	ebffcbb4 	bl	1165d4 <lwip_htons>
  123700:	e1a03000 	mov	r3, r0
  123704:	e2033001 	and	r3, r3, #1
  123708:	e3530000 	cmp	r3, #0
  12370c:	0a00000f 	beq	123750 <tcp_receive+0x1054>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
  123710:	ea000009 	b	12373c <tcp_receive+0x1040>
              struct tcp_seg *old_ooseq = pcb->ooseq;
  123714:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123718:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  12371c:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
              pcb->ooseq = pcb->ooseq->next;
  123720:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123724:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  123728:	e5932000 	ldr	r2, [r3]
  12372c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123730:	e5832074 	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
  123734:	e51b003c 	ldr	r0, [fp, #-60]	; 0xffffffc4
  123738:	ebffef50 	bl	11f480 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
  12373c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123740:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  123744:	e3530000 	cmp	r3, #0
  123748:	1afffff1 	bne	123714 <tcp_receive+0x1018>
  12374c:	ea0000bf 	b	123a50 <tcp_receive+0x1354>
            }
          } else {
            next = pcb->ooseq;
  123750:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123754:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  123758:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
  12375c:	ea000040 	b	123864 <tcp_receive+0x1168>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
  123760:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123764:	e593300c 	ldr	r3, [r3, #12]
  123768:	e1d330bc 	ldrh	r3, [r3, #12]
  12376c:	e6ff3073 	uxth	r3, r3
  123770:	e1a00003 	mov	r0, r3
  123774:	ebffcb96 	bl	1165d4 <lwip_htons>
  123778:	e1a03000 	mov	r3, r0
  12377c:	e2033001 	and	r3, r3, #1
  123780:	e3530000 	cmp	r3, #0
  123784:	0a00002f 	beq	123848 <tcp_receive+0x114c>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
  123788:	e30e3230 	movw	r3, #57904	; 0xe230
  12378c:	e3403014 	movt	r3, #20
  123790:	e593300c 	ldr	r3, [r3, #12]
  123794:	e1d330bc 	ldrh	r3, [r3, #12]
  123798:	e6ff3073 	uxth	r3, r3
  12379c:	e1a00003 	mov	r0, r3
  1237a0:	ebffcb8b 	bl	1165d4 <lwip_htons>
  1237a4:	e1a03000 	mov	r3, r0
  1237a8:	e2033002 	and	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
  1237ac:	e3530000 	cmp	r3, #0
  1237b0:	1a000024 	bne	123848 <tcp_receive+0x114c>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
  1237b4:	e30e3230 	movw	r3, #57904	; 0xe230
  1237b8:	e3403014 	movt	r3, #20
  1237bc:	e593300c 	ldr	r3, [r3, #12]
  1237c0:	e1d330bc 	ldrh	r3, [r3, #12]
  1237c4:	e6ff4073 	uxth	r4, r3
  1237c8:	e3a00001 	mov	r0, #1
  1237cc:	ebffcb80 	bl	1165d4 <lwip_htons>
  1237d0:	e1a03000 	mov	r3, r0
  1237d4:	e1a02003 	mov	r2, r3
  1237d8:	e30e3230 	movw	r3, #57904	; 0xe230
  1237dc:	e3403014 	movt	r3, #20
  1237e0:	e593300c 	ldr	r3, [r3, #12]
  1237e4:	e1842002 	orr	r2, r4, r2
  1237e8:	e6ff2072 	uxth	r2, r2
  1237ec:	e1c320bc 	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
  1237f0:	e30e3230 	movw	r3, #57904	; 0xe230
  1237f4:	e3403014 	movt	r3, #20
  1237f8:	e1d340b8 	ldrh	r4, [r3, #8]
  1237fc:	e30e3230 	movw	r3, #57904	; 0xe230
  123800:	e3403014 	movt	r3, #20
  123804:	e593300c 	ldr	r3, [r3, #12]
  123808:	e1d330bc 	ldrh	r3, [r3, #12]
  12380c:	e6ff3073 	uxth	r3, r3
  123810:	e1a00003 	mov	r0, r3
  123814:	ebffcb6e 	bl	1165d4 <lwip_htons>
  123818:	e1a03000 	mov	r3, r0
  12381c:	e2033003 	and	r3, r3, #3
  123820:	e3530000 	cmp	r3, #0
  123824:	0a000001 	beq	123830 <tcp_receive+0x1134>
  123828:	e3a03001 	mov	r3, #1
  12382c:	ea000000 	b	123834 <tcp_receive+0x1138>
  123830:	e3a03000 	mov	r3, #0
  123834:	e0833004 	add	r3, r3, r4
  123838:	e6ff2073 	uxth	r2, r3
  12383c:	e30e325a 	movw	r3, #57946	; 0xe25a
  123840:	e3403014 	movt	r3, #20
  123844:	e1c320b0 	strh	r2, [r3]
              }
              prev = next;
  123848:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12384c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
              next = next->next;
  123850:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123854:	e5933000 	ldr	r3, [r3]
  123858:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
              tcp_seg_free(prev);
  12385c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  123860:	ebffef06 	bl	11f480 <tcp_seg_free>
            while (next &&
  123864:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123868:	e3530000 	cmp	r3, #0
  12386c:	0a000010 	beq	1238b4 <tcp_receive+0x11b8>
                   TCP_SEQ_GEQ(seqno + tcplen,
  123870:	e30e325a 	movw	r3, #57946	; 0xe25a
  123874:	e3403014 	movt	r3, #20
  123878:	e1d330b0 	ldrh	r3, [r3]
  12387c:	e1a02003 	mov	r2, r3
  123880:	e30e3250 	movw	r3, #57936	; 0xe250
  123884:	e3403014 	movt	r3, #20
  123888:	e5933000 	ldr	r3, [r3]
  12388c:	e0822003 	add	r2, r2, r3
  123890:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123894:	e593300c 	ldr	r3, [r3, #12]
  123898:	e5933004 	ldr	r3, [r3, #4]
  12389c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  1238a0:	e1d110b8 	ldrh	r1, [r1, #8]
  1238a4:	e0833001 	add	r3, r3, r1
  1238a8:	e0423003 	sub	r3, r2, r3
            while (next &&
  1238ac:	e3530000 	cmp	r3, #0
  1238b0:	aaffffaa 	bge	123760 <tcp_receive+0x1064>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
  1238b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1238b8:	e3530000 	cmp	r3, #0
  1238bc:	0a000060 	beq	123a44 <tcp_receive+0x1348>
                TCP_SEQ_GT(seqno + tcplen,
  1238c0:	e30e325a 	movw	r3, #57946	; 0xe25a
  1238c4:	e3403014 	movt	r3, #20
  1238c8:	e1d330b0 	ldrh	r3, [r3]
  1238cc:	e1a02003 	mov	r2, r3
  1238d0:	e30e3250 	movw	r3, #57936	; 0xe250
  1238d4:	e3403014 	movt	r3, #20
  1238d8:	e5933000 	ldr	r3, [r3]
  1238dc:	e0822003 	add	r2, r2, r3
  1238e0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1238e4:	e593300c 	ldr	r3, [r3, #12]
  1238e8:	e5933004 	ldr	r3, [r3, #4]
  1238ec:	e0423003 	sub	r3, r2, r3
            if (next &&
  1238f0:	e3530000 	cmp	r3, #0
  1238f4:	da000052 	ble	123a44 <tcp_receive+0x1348>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
  1238f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1238fc:	e593300c 	ldr	r3, [r3, #12]
  123900:	e5933004 	ldr	r3, [r3, #4]
  123904:	e6ff2073 	uxth	r2, r3
  123908:	e30e3250 	movw	r3, #57936	; 0xe250
  12390c:	e3403014 	movt	r3, #20
  123910:	e5933000 	ldr	r3, [r3]
  123914:	e6ff3073 	uxth	r3, r3
  123918:	e0423003 	sub	r3, r2, r3
  12391c:	e6ff2073 	uxth	r2, r3
  123920:	e30e3230 	movw	r3, #57904	; 0xe230
  123924:	e3403014 	movt	r3, #20
  123928:	e1c320b8 	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
  12392c:	e30e3230 	movw	r3, #57904	; 0xe230
  123930:	e3403014 	movt	r3, #20
  123934:	e593300c 	ldr	r3, [r3, #12]
  123938:	e1d330bc 	ldrh	r3, [r3, #12]
  12393c:	e6ff3073 	uxth	r3, r3
  123940:	e1a00003 	mov	r0, r3
  123944:	ebffcb22 	bl	1165d4 <lwip_htons>
  123948:	e1a03000 	mov	r3, r0
  12394c:	e2033002 	and	r3, r3, #2
  123950:	e3530000 	cmp	r3, #0
  123954:	0a000007 	beq	123978 <tcp_receive+0x127c>
                inseg.len -= 1;
  123958:	e30e3230 	movw	r3, #57904	; 0xe230
  12395c:	e3403014 	movt	r3, #20
  123960:	e1d330b8 	ldrh	r3, [r3, #8]
  123964:	e2433001 	sub	r3, r3, #1
  123968:	e6ff2073 	uxth	r2, r3
  12396c:	e30e3230 	movw	r3, #57904	; 0xe230
  123970:	e3403014 	movt	r3, #20
  123974:	e1c320b8 	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
  123978:	e30e3230 	movw	r3, #57904	; 0xe230
  12397c:	e3403014 	movt	r3, #20
  123980:	e5932004 	ldr	r2, [r3, #4]
  123984:	e30e3230 	movw	r3, #57904	; 0xe230
  123988:	e3403014 	movt	r3, #20
  12398c:	e1d330b8 	ldrh	r3, [r3, #8]
  123990:	e1a01003 	mov	r1, r3
  123994:	e1a00002 	mov	r0, r2
  123998:	ebffdbfb 	bl	11a98c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
  12399c:	e30e3230 	movw	r3, #57904	; 0xe230
  1239a0:	e3403014 	movt	r3, #20
  1239a4:	e1d340b8 	ldrh	r4, [r3, #8]
  1239a8:	e30e3230 	movw	r3, #57904	; 0xe230
  1239ac:	e3403014 	movt	r3, #20
  1239b0:	e593300c 	ldr	r3, [r3, #12]
  1239b4:	e1d330bc 	ldrh	r3, [r3, #12]
  1239b8:	e6ff3073 	uxth	r3, r3
  1239bc:	e1a00003 	mov	r0, r3
  1239c0:	ebffcb03 	bl	1165d4 <lwip_htons>
  1239c4:	e1a03000 	mov	r3, r0
  1239c8:	e2033003 	and	r3, r3, #3
  1239cc:	e3530000 	cmp	r3, #0
  1239d0:	0a000001 	beq	1239dc <tcp_receive+0x12e0>
  1239d4:	e3a03001 	mov	r3, #1
  1239d8:	ea000000 	b	1239e0 <tcp_receive+0x12e4>
  1239dc:	e3a03000 	mov	r3, #0
  1239e0:	e0833004 	add	r3, r3, r4
  1239e4:	e6ff2073 	uxth	r2, r3
  1239e8:	e30e325a 	movw	r3, #57946	; 0xe25a
  1239ec:	e3403014 	movt	r3, #20
  1239f0:	e1c320b0 	strh	r2, [r3]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
  1239f4:	e30e325a 	movw	r3, #57946	; 0xe25a
  1239f8:	e3403014 	movt	r3, #20
  1239fc:	e1d330b0 	ldrh	r3, [r3]
  123a00:	e1a02003 	mov	r2, r3
  123a04:	e30e3250 	movw	r3, #57936	; 0xe250
  123a08:	e3403014 	movt	r3, #20
  123a0c:	e5933000 	ldr	r3, [r3]
  123a10:	e0822003 	add	r2, r2, r3
  123a14:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123a18:	e593300c 	ldr	r3, [r3, #12]
  123a1c:	e5933004 	ldr	r3, [r3, #4]
  123a20:	e1520003 	cmp	r2, r3
  123a24:	0a000006 	beq	123a44 <tcp_receive+0x1348>
  123a28:	e308057c 	movw	r0, #34172	; 0x857c
  123a2c:	e3400014 	movt	r0, #20
  123a30:	ebff7db7 	bl	103114 <rt_kprintf>
  123a34:	e300159c 	movw	r1, #1436	; 0x59c
  123a38:	e30802b4 	movw	r0, #33460	; 0x82b4
  123a3c:	e3400014 	movt	r0, #20
  123a40:	ebff9daa 	bl	10b0f0 <sys_arch_assert>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
  123a44:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123a48:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  123a4c:	e5832074 	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
  123a50:	e30e325a 	movw	r3, #57946	; 0xe25a
  123a54:	e3403014 	movt	r3, #20
  123a58:	e1d330b0 	ldrh	r3, [r3]
  123a5c:	e1a02003 	mov	r2, r3
  123a60:	e30e3250 	movw	r3, #57936	; 0xe250
  123a64:	e3403014 	movt	r3, #20
  123a68:	e5933000 	ldr	r3, [r3]
  123a6c:	e0822003 	add	r2, r2, r3
  123a70:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123a74:	e5832028 	str	r2, [r3, #40]	; 0x28

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
  123a78:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123a7c:	e1d322bc 	ldrh	r2, [r3, #44]	; 0x2c
  123a80:	e30e325a 	movw	r3, #57946	; 0xe25a
  123a84:	e3403014 	movt	r3, #20
  123a88:	e1d330b0 	ldrh	r3, [r3]
  123a8c:	e1520003 	cmp	r2, r3
  123a90:	2a000006 	bcs	123ab0 <tcp_receive+0x13b4>
  123a94:	e30805b8 	movw	r0, #34232	; 0x85b8
  123a98:	e3400014 	movt	r0, #20
  123a9c:	ebff7d9c 	bl	103114 <rt_kprintf>
  123aa0:	e30015a6 	movw	r1, #1446	; 0x5a6
  123aa4:	e30802b4 	movw	r0, #33460	; 0x82b4
  123aa8:	e3400014 	movt	r0, #20
  123aac:	ebff9d8f 	bl	10b0f0 <sys_arch_assert>
        pcb->rcv_wnd -= tcplen;
  123ab0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123ab4:	e1d322bc 	ldrh	r2, [r3, #44]	; 0x2c
  123ab8:	e30e325a 	movw	r3, #57946	; 0xe25a
  123abc:	e3403014 	movt	r3, #20
  123ac0:	e1d330b0 	ldrh	r3, [r3]
  123ac4:	e0423003 	sub	r3, r2, r3
  123ac8:	e6ff2073 	uxth	r2, r3
  123acc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123ad0:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c

        tcp_update_rcv_ann_wnd(pcb);
  123ad4:	e51b0040 	ldr	r0, [fp, #-64]	; 0xffffffc0
  123ad8:	ebffe939 	bl	11dfc4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
  123adc:	e30e3230 	movw	r3, #57904	; 0xe230
  123ae0:	e3403014 	movt	r3, #20
  123ae4:	e5933004 	ldr	r3, [r3, #4]
  123ae8:	e1d330b8 	ldrh	r3, [r3, #8]
  123aec:	e3530000 	cmp	r3, #0
  123af0:	0a000009 	beq	123b1c <tcp_receive+0x1420>
          recv_data = inseg.p;
  123af4:	e30e3230 	movw	r3, #57904	; 0xe230
  123af8:	e3403014 	movt	r3, #20
  123afc:	e5932004 	ldr	r2, [r3, #4]
  123b00:	e30e3260 	movw	r3, #57952	; 0xe260
  123b04:	e3403014 	movt	r3, #20
  123b08:	e5832000 	str	r2, [r3]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
  123b0c:	e30e3230 	movw	r3, #57904	; 0xe230
  123b10:	e3403014 	movt	r3, #20
  123b14:	e3a02000 	mov	r2, #0
  123b18:	e5832004 	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
  123b1c:	e30e3230 	movw	r3, #57904	; 0xe230
  123b20:	e3403014 	movt	r3, #20
  123b24:	e593300c 	ldr	r3, [r3, #12]
  123b28:	e1d330bc 	ldrh	r3, [r3, #12]
  123b2c:	e6ff3073 	uxth	r3, r3
  123b30:	e1a00003 	mov	r0, r3
  123b34:	ebffcaa6 	bl	1165d4 <lwip_htons>
  123b38:	e1a03000 	mov	r3, r0
  123b3c:	e2033001 	and	r3, r3, #1
  123b40:	e3530000 	cmp	r3, #0
  123b44:	0a000099 	beq	123db0 <tcp_receive+0x16b4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
  123b48:	e30e325d 	movw	r3, #57949	; 0xe25d
  123b4c:	e3403014 	movt	r3, #20
  123b50:	e5d33000 	ldrb	r3, [r3]
  123b54:	e3833020 	orr	r3, r3, #32
  123b58:	e6ef2073 	uxtb	r2, r3
  123b5c:	e30e325d 	movw	r3, #57949	; 0xe25d
  123b60:	e3403014 	movt	r3, #20
  123b64:	e5c32000 	strb	r2, [r3]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
  123b68:	ea000090 	b	123db0 <tcp_receive+0x16b4>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
  123b6c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123b70:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  123b74:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
          seqno = pcb->ooseq->tcphdr->seqno;
  123b78:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123b7c:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  123b80:	e593300c 	ldr	r3, [r3, #12]
  123b84:	e5932004 	ldr	r2, [r3, #4]
  123b88:	e30e3250 	movw	r3, #57936	; 0xe250
  123b8c:	e3403014 	movt	r3, #20
  123b90:	e5832000 	str	r2, [r3]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
  123b94:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123b98:	e1d330b8 	ldrh	r3, [r3, #8]
  123b9c:	e1a04003 	mov	r4, r3
  123ba0:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123ba4:	e593300c 	ldr	r3, [r3, #12]
  123ba8:	e1d330bc 	ldrh	r3, [r3, #12]
  123bac:	e6ff3073 	uxth	r3, r3
  123bb0:	e1a00003 	mov	r0, r3
  123bb4:	ebffca86 	bl	1165d4 <lwip_htons>
  123bb8:	e1a03000 	mov	r3, r0
  123bbc:	e2033003 	and	r3, r3, #3
  123bc0:	e3530000 	cmp	r3, #0
  123bc4:	0a000001 	beq	123bd0 <tcp_receive+0x14d4>
  123bc8:	e3a03001 	mov	r3, #1
  123bcc:	ea000000 	b	123bd4 <tcp_receive+0x14d8>
  123bd0:	e3a03000 	mov	r3, #0
  123bd4:	e0832004 	add	r2, r3, r4
  123bd8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123bdc:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  123be0:	e0822003 	add	r2, r2, r3
  123be4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123be8:	e5832028 	str	r2, [r3, #40]	; 0x28
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
  123bec:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123bf0:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  123bf4:	e1a04003 	mov	r4, r3
  123bf8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123bfc:	e1d330b8 	ldrh	r3, [r3, #8]
  123c00:	e1a05003 	mov	r5, r3
  123c04:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123c08:	e593300c 	ldr	r3, [r3, #12]
  123c0c:	e1d330bc 	ldrh	r3, [r3, #12]
  123c10:	e6ff3073 	uxth	r3, r3
  123c14:	e1a00003 	mov	r0, r3
  123c18:	ebffca6d 	bl	1165d4 <lwip_htons>
  123c1c:	e1a03000 	mov	r3, r0
  123c20:	e2033003 	and	r3, r3, #3
  123c24:	e3530000 	cmp	r3, #0
  123c28:	0a000001 	beq	123c34 <tcp_receive+0x1538>
  123c2c:	e3a03001 	mov	r3, #1
  123c30:	ea000000 	b	123c38 <tcp_receive+0x153c>
  123c34:	e3a03000 	mov	r3, #0
  123c38:	e0833005 	add	r3, r3, r5
  123c3c:	e1540003 	cmp	r4, r3
  123c40:	2a000006 	bcs	123c60 <tcp_receive+0x1564>
  123c44:	e30805d8 	movw	r0, #34264	; 0x85d8
  123c48:	e3400014 	movt	r0, #20
  123c4c:	ebff7d30 	bl	103114 <rt_kprintf>
  123c50:	e30015cb 	movw	r1, #1483	; 0x5cb
  123c54:	e30802b4 	movw	r0, #33460	; 0x82b4
  123c58:	e3400014 	movt	r0, #20
  123c5c:	ebff9d23 	bl	10b0f0 <sys_arch_assert>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
  123c60:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123c64:	e1d330b8 	ldrh	r3, [r3, #8]
  123c68:	e1a04003 	mov	r4, r3
  123c6c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123c70:	e593300c 	ldr	r3, [r3, #12]
  123c74:	e1d330bc 	ldrh	r3, [r3, #12]
  123c78:	e6ff3073 	uxth	r3, r3
  123c7c:	e1a00003 	mov	r0, r3
  123c80:	ebffca53 	bl	1165d4 <lwip_htons>
  123c84:	e1a03000 	mov	r3, r0
  123c88:	e2033003 	and	r3, r3, #3
  123c8c:	e3530000 	cmp	r3, #0
  123c90:	0a000001 	beq	123c9c <tcp_receive+0x15a0>
  123c94:	e3a03001 	mov	r3, #1
  123c98:	ea000000 	b	123ca0 <tcp_receive+0x15a4>
  123c9c:	e3a03000 	mov	r3, #0
  123ca0:	e0831004 	add	r1, r3, r4
  123ca4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123ca8:	e1d322bc 	ldrh	r2, [r3, #44]	; 0x2c
  123cac:	e6ff3071 	uxth	r3, r1
  123cb0:	e0423003 	sub	r3, r2, r3
  123cb4:	e6ff2073 	uxth	r2, r3
  123cb8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123cbc:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c

          tcp_update_rcv_ann_wnd(pcb);
  123cc0:	e51b0040 	ldr	r0, [fp, #-64]	; 0xffffffc0
  123cc4:	ebffe8be 	bl	11dfc4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
  123cc8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123ccc:	e5933004 	ldr	r3, [r3, #4]
  123cd0:	e1d330b8 	ldrh	r3, [r3, #8]
  123cd4:	e3530000 	cmp	r3, #0
  123cd8:	0a000015 	beq	123d34 <tcp_receive+0x1638>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
  123cdc:	e30e3260 	movw	r3, #57952	; 0xe260
  123ce0:	e3403014 	movt	r3, #20
  123ce4:	e5933000 	ldr	r3, [r3]
  123ce8:	e3530000 	cmp	r3, #0
  123cec:	0a000008 	beq	123d14 <tcp_receive+0x1618>
              pbuf_cat(recv_data, cseg->p);
  123cf0:	e30e3260 	movw	r3, #57952	; 0xe260
  123cf4:	e3403014 	movt	r3, #20
  123cf8:	e5932000 	ldr	r2, [r3]
  123cfc:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123d00:	e5933004 	ldr	r3, [r3, #4]
  123d04:	e1a01003 	mov	r1, r3
  123d08:	e1a00002 	mov	r0, r2
  123d0c:	ebffdd1e 	bl	11b18c <pbuf_cat>
  123d10:	ea000004 	b	123d28 <tcp_receive+0x162c>
            } else {
              recv_data = cseg->p;
  123d14:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123d18:	e5932004 	ldr	r2, [r3, #4]
  123d1c:	e30e3260 	movw	r3, #57952	; 0xe260
  123d20:	e3403014 	movt	r3, #20
  123d24:	e5832000 	str	r2, [r3]
            }
            cseg->p = NULL;
  123d28:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123d2c:	e3a02000 	mov	r2, #0
  123d30:	e5832004 	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
  123d34:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123d38:	e593300c 	ldr	r3, [r3, #12]
  123d3c:	e1d330bc 	ldrh	r3, [r3, #12]
  123d40:	e6ff3073 	uxth	r3, r3
  123d44:	e1a00003 	mov	r0, r3
  123d48:	ebffca21 	bl	1165d4 <lwip_htons>
  123d4c:	e1a03000 	mov	r3, r0
  123d50:	e2033001 	and	r3, r3, #1
  123d54:	e3530000 	cmp	r3, #0
  123d58:	0a00000e 	beq	123d98 <tcp_receive+0x169c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
  123d5c:	e30e325d 	movw	r3, #57949	; 0xe25d
  123d60:	e3403014 	movt	r3, #20
  123d64:	e5d33000 	ldrb	r3, [r3]
  123d68:	e3833020 	orr	r3, r3, #32
  123d6c:	e6ef2073 	uxtb	r2, r3
  123d70:	e30e325d 	movw	r3, #57949	; 0xe25d
  123d74:	e3403014 	movt	r3, #20
  123d78:	e5c32000 	strb	r2, [r3]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
  123d7c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123d80:	e5933014 	ldr	r3, [r3, #20]
  123d84:	e3530004 	cmp	r3, #4
  123d88:	1a000002 	bne	123d98 <tcp_receive+0x169c>
              pcb->state = CLOSE_WAIT;
  123d8c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123d90:	e3a02007 	mov	r2, #7
  123d94:	e5832014 	str	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
  123d98:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123d9c:	e5932000 	ldr	r2, [r3]
  123da0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123da4:	e5832074 	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
  123da8:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
  123dac:	ebffedb3 	bl	11f480 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
  123db0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123db4:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  123db8:	e3530000 	cmp	r3, #0
  123dbc:	0a000007 	beq	123de0 <tcp_receive+0x16e4>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
  123dc0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123dc4:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  123dc8:	e593300c 	ldr	r3, [r3, #12]
  123dcc:	e5932004 	ldr	r2, [r3, #4]
  123dd0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123dd4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
        while (pcb->ooseq != NULL &&
  123dd8:	e1520003 	cmp	r2, r3
  123ddc:	0affff62 	beq	123b6c <tcp_receive+0x1470>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
  123de0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123de4:	e5d3301e 	ldrb	r3, [r3, #30]
  123de8:	e2033001 	and	r3, r3, #1
  123dec:	e3530000 	cmp	r3, #0
  123df0:	0a00000c 	beq	123e28 <tcp_receive+0x172c>
  123df4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123df8:	e5d3301e 	ldrb	r3, [r3, #30]
  123dfc:	e3c33001 	bic	r3, r3, #1
  123e00:	e6ef2073 	uxtb	r2, r3
  123e04:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123e08:	e5c3201e 	strb	r2, [r3, #30]
  123e0c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123e10:	e5d3301e 	ldrb	r3, [r3, #30]
  123e14:	e3833002 	orr	r3, r3, #2
  123e18:	e6ef2073 	uxtb	r2, r3
  123e1c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123e20:	e5c3201e 	strb	r2, [r3, #30]
      if (pcb->rcv_nxt == seqno) {
  123e24:	ea00016c 	b	1243dc <tcp_receive+0x1ce0>
        tcp_ack(pcb);
  123e28:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123e2c:	e5d3301e 	ldrb	r3, [r3, #30]
  123e30:	e3833001 	orr	r3, r3, #1
  123e34:	e6ef2073 	uxtb	r2, r3
  123e38:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123e3c:	e5c3201e 	strb	r2, [r3, #30]
      if (pcb->rcv_nxt == seqno) {
  123e40:	ea000165 	b	1243dc <tcp_receive+0x1ce0>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
  123e44:	e51b0040 	ldr	r0, [fp, #-64]	; 0xffffffc0
  123e48:	eb0007e2 	bl	125dd8 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
  123e4c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123e50:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  123e54:	e3530000 	cmp	r3, #0
  123e58:	1a000006 	bne	123e78 <tcp_receive+0x177c>
          pcb->ooseq = tcp_seg_copy(&inseg);
  123e5c:	e30e0230 	movw	r0, #57904	; 0xe230
  123e60:	e3400014 	movt	r0, #20
  123e64:	ebffeda7 	bl	11f508 <tcp_seg_copy>
  123e68:	e1a02000 	mov	r2, r0
  123e6c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123e70:	e5832074 	str	r2, [r3, #116]	; 0x74
      if (pcb->rcv_nxt == seqno) {
  123e74:	ea000158 	b	1243dc <tcp_receive+0x1ce0>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
  123e78:	e3a03000 	mov	r3, #0
  123e7c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
          for (next = pcb->ooseq; next != NULL; next = next->next) {
  123e80:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123e84:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  123e88:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  123e8c:	ea00013f 	b	124390 <tcp_receive+0x1c94>
            if (seqno == next->tcphdr->seqno) {
  123e90:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123e94:	e593300c 	ldr	r3, [r3, #12]
  123e98:	e5932004 	ldr	r2, [r3, #4]
  123e9c:	e30e3250 	movw	r3, #57936	; 0xe250
  123ea0:	e3403014 	movt	r3, #20
  123ea4:	e5933000 	ldr	r3, [r3]
  123ea8:	e1520003 	cmp	r2, r3
  123eac:	1a00001b 	bne	123f20 <tcp_receive+0x1824>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
  123eb0:	e30e3230 	movw	r3, #57904	; 0xe230
  123eb4:	e3403014 	movt	r3, #20
  123eb8:	e1d320b8 	ldrh	r2, [r3, #8]
  123ebc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123ec0:	e1d330b8 	ldrh	r3, [r3, #8]
  123ec4:	e1520003 	cmp	r2, r3
  123ec8:	9a000134 	bls	1243a0 <tcp_receive+0x1ca4>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
  123ecc:	e30e0230 	movw	r0, #57904	; 0xe230
  123ed0:	e3400014 	movt	r0, #20
  123ed4:	ebffed8b 	bl	11f508 <tcp_seg_copy>
  123ed8:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
                if (cseg != NULL) {
  123edc:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123ee0:	e3530000 	cmp	r3, #0
  123ee4:	0a00012f 	beq	1243a8 <tcp_receive+0x1cac>
                  if (prev != NULL) {
  123ee8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  123eec:	e3530000 	cmp	r3, #0
  123ef0:	0a000003 	beq	123f04 <tcp_receive+0x1808>
                    prev->next = cseg;
  123ef4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  123ef8:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
  123efc:	e5832000 	str	r2, [r3]
  123f00:	ea000002 	b	123f10 <tcp_receive+0x1814>
                  } else {
                    pcb->ooseq = cseg;
  123f04:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123f08:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
  123f0c:	e5832074 	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
  123f10:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  123f14:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
  123f18:	ebfff989 	bl	122544 <tcp_oos_insert_segment>
                }
                break;
  123f1c:	ea000121 	b	1243a8 <tcp_receive+0x1cac>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
  123f20:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  123f24:	e3530000 	cmp	r3, #0
  123f28:	1a000016 	bne	123f88 <tcp_receive+0x188c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
  123f2c:	e30e3250 	movw	r3, #57936	; 0xe250
  123f30:	e3403014 	movt	r3, #20
  123f34:	e5932000 	ldr	r2, [r3]
  123f38:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123f3c:	e593300c 	ldr	r3, [r3, #12]
  123f40:	e5933004 	ldr	r3, [r3, #4]
  123f44:	e0423003 	sub	r3, r2, r3
  123f48:	e3530000 	cmp	r3, #0
  123f4c:	aa00004e 	bge	12408c <tcp_receive+0x1990>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
  123f50:	e30e0230 	movw	r0, #57904	; 0xe230
  123f54:	e3400014 	movt	r0, #20
  123f58:	ebffed6a 	bl	11f508 <tcp_seg_copy>
  123f5c:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
                  if (cseg != NULL) {
  123f60:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123f64:	e3530000 	cmp	r3, #0
  123f68:	0a000110 	beq	1243b0 <tcp_receive+0x1cb4>
                    pcb->ooseq = cseg;
  123f6c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123f70:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
  123f74:	e5832074 	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
  123f78:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  123f7c:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
  123f80:	ebfff96f 	bl	122544 <tcp_oos_insert_segment>
                  }
                  break;
  123f84:	ea000109 	b	1243b0 <tcp_receive+0x1cb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
  123f88:	e30e3250 	movw	r3, #57936	; 0xe250
  123f8c:	e3403014 	movt	r3, #20
  123f90:	e5932000 	ldr	r2, [r3]
  123f94:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  123f98:	e593300c 	ldr	r3, [r3, #12]
  123f9c:	e5933004 	ldr	r3, [r3, #4]
  123fa0:	e0423003 	sub	r3, r2, r3
  123fa4:	e2433001 	sub	r3, r3, #1
  123fa8:	e3530000 	cmp	r3, #0
  123fac:	ba000036 	blt	12408c <tcp_receive+0x1990>
  123fb0:	e30e3250 	movw	r3, #57936	; 0xe250
  123fb4:	e3403014 	movt	r3, #20
  123fb8:	e5932000 	ldr	r2, [r3]
  123fbc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123fc0:	e593300c 	ldr	r3, [r3, #12]
  123fc4:	e5933004 	ldr	r3, [r3, #4]
  123fc8:	e0423003 	sub	r3, r2, r3
  123fcc:	e2833001 	add	r3, r3, #1
  123fd0:	e3530000 	cmp	r3, #0
  123fd4:	ca00002c 	bgt	12408c <tcp_receive+0x1990>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
  123fd8:	e30e0230 	movw	r0, #57904	; 0xe230
  123fdc:	e3400014 	movt	r0, #20
  123fe0:	ebffed48 	bl	11f508 <tcp_seg_copy>
  123fe4:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
                  if (cseg != NULL) {
  123fe8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123fec:	e3530000 	cmp	r3, #0
  123ff0:	0a0000f0 	beq	1243b8 <tcp_receive+0x1cbc>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
  123ff4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  123ff8:	e593300c 	ldr	r3, [r3, #12]
  123ffc:	e5933004 	ldr	r3, [r3, #4]
  124000:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  124004:	e1d220b8 	ldrh	r2, [r2, #8]
  124008:	e0832002 	add	r2, r3, r2
  12400c:	e30e3250 	movw	r3, #57936	; 0xe250
  124010:	e3403014 	movt	r3, #20
  124014:	e5933000 	ldr	r3, [r3]
  124018:	e0423003 	sub	r3, r2, r3
  12401c:	e3530000 	cmp	r3, #0
  124020:	da000012 	ble	124070 <tcp_receive+0x1974>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
  124024:	e30e3250 	movw	r3, #57936	; 0xe250
  124028:	e3403014 	movt	r3, #20
  12402c:	e5933000 	ldr	r3, [r3]
  124030:	e6ff2073 	uxth	r2, r3
  124034:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  124038:	e593300c 	ldr	r3, [r3, #12]
  12403c:	e5933004 	ldr	r3, [r3, #4]
  124040:	e6ff3073 	uxth	r3, r3
  124044:	e0423003 	sub	r3, r2, r3
  124048:	e6ff2073 	uxth	r2, r3
  12404c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  124050:	e1c320b8 	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
  124054:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  124058:	e5932004 	ldr	r2, [r3, #4]
  12405c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  124060:	e1d330b8 	ldrh	r3, [r3, #8]
  124064:	e1a01003 	mov	r1, r3
  124068:	e1a00002 	mov	r0, r2
  12406c:	ebffda46 	bl	11a98c <pbuf_realloc>
                    }
                    prev->next = cseg;
  124070:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  124074:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
  124078:	e5832000 	str	r2, [r3]
                    tcp_oos_insert_segment(cseg, next);
  12407c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  124080:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
  124084:	ebfff92e 	bl	122544 <tcp_oos_insert_segment>
                  }
                  break;
  124088:	ea0000ca 	b	1243b8 <tcp_receive+0x1cbc>
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
  12408c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124090:	e5933000 	ldr	r3, [r3]
  124094:	e3530000 	cmp	r3, #0
  124098:	1a0000b7 	bne	12437c <tcp_receive+0x1c80>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
  12409c:	e30e3250 	movw	r3, #57936	; 0xe250
  1240a0:	e3403014 	movt	r3, #20
  1240a4:	e5932000 	ldr	r2, [r3]
  1240a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1240ac:	e593300c 	ldr	r3, [r3, #12]
  1240b0:	e5933004 	ldr	r3, [r3, #4]
  1240b4:	e0423003 	sub	r3, r2, r3
              if (next->next == NULL &&
  1240b8:	e3530000 	cmp	r3, #0
  1240bc:	da0000ae 	ble	12437c <tcp_receive+0x1c80>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
  1240c0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1240c4:	e593300c 	ldr	r3, [r3, #12]
  1240c8:	e1d330bc 	ldrh	r3, [r3, #12]
  1240cc:	e6ff3073 	uxth	r3, r3
  1240d0:	e1a00003 	mov	r0, r3
  1240d4:	ebffc93e 	bl	1165d4 <lwip_htons>
  1240d8:	e1a03000 	mov	r3, r0
  1240dc:	e2033001 	and	r3, r3, #1
  1240e0:	e3530000 	cmp	r3, #0
  1240e4:	1a0000b5 	bne	1243c0 <tcp_receive+0x1cc4>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
  1240e8:	e30e0230 	movw	r0, #57904	; 0xe230
  1240ec:	e3400014 	movt	r0, #20
  1240f0:	ebffed04 	bl	11f508 <tcp_seg_copy>
  1240f4:	e1a02000 	mov	r2, r0
  1240f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1240fc:	e5832000 	str	r2, [r3]
                if (next->next != NULL) {
  124100:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124104:	e5933000 	ldr	r3, [r3]
  124108:	e3530000 	cmp	r3, #0
  12410c:	0a0000ad 	beq	1243c8 <tcp_receive+0x1ccc>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
  124110:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124114:	e593300c 	ldr	r3, [r3, #12]
  124118:	e5933004 	ldr	r3, [r3, #4]
  12411c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  124120:	e1d220b8 	ldrh	r2, [r2, #8]
  124124:	e0832002 	add	r2, r3, r2
  124128:	e30e3250 	movw	r3, #57936	; 0xe250
  12412c:	e3403014 	movt	r3, #20
  124130:	e5933000 	ldr	r3, [r3]
  124134:	e0423003 	sub	r3, r2, r3
  124138:	e3530000 	cmp	r3, #0
  12413c:	da000012 	ble	12418c <tcp_receive+0x1a90>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
  124140:	e30e3250 	movw	r3, #57936	; 0xe250
  124144:	e3403014 	movt	r3, #20
  124148:	e5933000 	ldr	r3, [r3]
  12414c:	e6ff2073 	uxth	r2, r3
  124150:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124154:	e593300c 	ldr	r3, [r3, #12]
  124158:	e5933004 	ldr	r3, [r3, #4]
  12415c:	e6ff3073 	uxth	r3, r3
  124160:	e0423003 	sub	r3, r2, r3
  124164:	e6ff2073 	uxth	r2, r3
  124168:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12416c:	e1c320b8 	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
  124170:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124174:	e5932004 	ldr	r2, [r3, #4]
  124178:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12417c:	e1d330b8 	ldrh	r3, [r3, #8]
  124180:	e1a01003 	mov	r1, r3
  124184:	e1a00002 	mov	r0, r2
  124188:	ebffd9ff 	bl	11a98c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
  12418c:	e30e325a 	movw	r3, #57946	; 0xe25a
  124190:	e3403014 	movt	r3, #20
  124194:	e1d330b0 	ldrh	r3, [r3]
  124198:	e1a02003 	mov	r2, r3
  12419c:	e30e3250 	movw	r3, #57936	; 0xe250
  1241a0:	e3403014 	movt	r3, #20
  1241a4:	e5933000 	ldr	r3, [r3]
  1241a8:	e0822003 	add	r2, r2, r3
  1241ac:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1241b0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  1241b4:	e51b1040 	ldr	r1, [fp, #-64]	; 0xffffffc0
  1241b8:	e1d112bc 	ldrh	r1, [r1, #44]	; 0x2c
  1241bc:	e0833001 	add	r3, r3, r1
  1241c0:	e0423003 	sub	r3, r2, r3
  1241c4:	e3530000 	cmp	r3, #0
  1241c8:	da00007e 	ble	1243c8 <tcp_receive+0x1ccc>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
  1241cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1241d0:	e5933000 	ldr	r3, [r3]
  1241d4:	e593300c 	ldr	r3, [r3, #12]
  1241d8:	e1d330bc 	ldrh	r3, [r3, #12]
  1241dc:	e6ff3073 	uxth	r3, r3
  1241e0:	e1a00003 	mov	r0, r3
  1241e4:	ebffc8fa 	bl	1165d4 <lwip_htons>
  1241e8:	e1a03000 	mov	r3, r0
  1241ec:	e2033001 	and	r3, r3, #1
  1241f0:	e3530000 	cmp	r3, #0
  1241f4:	0a00001a 	beq	124264 <tcp_receive+0x1b68>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
  1241f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1241fc:	e5933000 	ldr	r3, [r3]
  124200:	e593300c 	ldr	r3, [r3, #12]
  124204:	e1d330bc 	ldrh	r3, [r3, #12]
  124208:	e6ff3073 	uxth	r3, r3
  12420c:	e3c33c3f 	bic	r3, r3, #16128	; 0x3f00
  124210:	e6ff4073 	uxth	r4, r3
  124214:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124218:	e5933000 	ldr	r3, [r3]
  12421c:	e593300c 	ldr	r3, [r3, #12]
  124220:	e1d330bc 	ldrh	r3, [r3, #12]
  124224:	e6ff3073 	uxth	r3, r3
  124228:	e1a00003 	mov	r0, r3
  12422c:	ebffc8e8 	bl	1165d4 <lwip_htons>
  124230:	e1a03000 	mov	r3, r0
  124234:	e203303e 	and	r3, r3, #62	; 0x3e
  124238:	e6ff3073 	uxth	r3, r3
  12423c:	e1a00003 	mov	r0, r3
  124240:	ebffc8e3 	bl	1165d4 <lwip_htons>
  124244:	e1a03000 	mov	r3, r0
  124248:	e1a02003 	mov	r2, r3
  12424c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124250:	e5933000 	ldr	r3, [r3]
  124254:	e593300c 	ldr	r3, [r3, #12]
  124258:	e1842002 	orr	r2, r4, r2
  12425c:	e6ff2072 	uxth	r2, r2
  124260:	e1c320bc 	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
  124264:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  124268:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12426c:	e6ff2073 	uxth	r2, r3
  124270:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  124274:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  124278:	e0823003 	add	r3, r2, r3
  12427c:	e6ff1073 	uxth	r1, r3
  124280:	e30e3250 	movw	r3, #57936	; 0xe250
  124284:	e3403014 	movt	r3, #20
  124288:	e5933000 	ldr	r3, [r3]
  12428c:	e6ff2073 	uxth	r2, r3
  124290:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124294:	e5933000 	ldr	r3, [r3]
  124298:	e0412002 	sub	r2, r1, r2
  12429c:	e6ff2072 	uxth	r2, r2
  1242a0:	e1c320b8 	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
  1242a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1242a8:	e5933000 	ldr	r3, [r3]
  1242ac:	e5932004 	ldr	r2, [r3, #4]
  1242b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1242b4:	e5933000 	ldr	r3, [r3]
  1242b8:	e1d330b8 	ldrh	r3, [r3, #8]
  1242bc:	e1a01003 	mov	r1, r3
  1242c0:	e1a00002 	mov	r0, r2
  1242c4:	ebffd9b0 	bl	11a98c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
  1242c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1242cc:	e5933000 	ldr	r3, [r3]
  1242d0:	e1d340b8 	ldrh	r4, [r3, #8]
  1242d4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1242d8:	e5933000 	ldr	r3, [r3]
  1242dc:	e593300c 	ldr	r3, [r3, #12]
  1242e0:	e1d330bc 	ldrh	r3, [r3, #12]
  1242e4:	e6ff3073 	uxth	r3, r3
  1242e8:	e1a00003 	mov	r0, r3
  1242ec:	ebffc8b8 	bl	1165d4 <lwip_htons>
  1242f0:	e1a03000 	mov	r3, r0
  1242f4:	e2033003 	and	r3, r3, #3
  1242f8:	e3530000 	cmp	r3, #0
  1242fc:	0a000001 	beq	124308 <tcp_receive+0x1c0c>
  124300:	e3a03001 	mov	r3, #1
  124304:	ea000000 	b	12430c <tcp_receive+0x1c10>
  124308:	e3a03000 	mov	r3, #0
  12430c:	e0833004 	add	r3, r3, r4
  124310:	e6ff2073 	uxth	r2, r3
  124314:	e30e325a 	movw	r3, #57946	; 0xe25a
  124318:	e3403014 	movt	r3, #20
  12431c:	e1c320b0 	strh	r2, [r3]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
  124320:	e30e325a 	movw	r3, #57946	; 0xe25a
  124324:	e3403014 	movt	r3, #20
  124328:	e1d330b0 	ldrh	r3, [r3]
  12432c:	e1a02003 	mov	r2, r3
  124330:	e30e3250 	movw	r3, #57936	; 0xe250
  124334:	e3403014 	movt	r3, #20
  124338:	e5933000 	ldr	r3, [r3]
  12433c:	e0822003 	add	r2, r2, r3
  124340:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  124344:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  124348:	e51b1040 	ldr	r1, [fp, #-64]	; 0xffffffc0
  12434c:	e1d112bc 	ldrh	r1, [r1, #44]	; 0x2c
  124350:	e0833001 	add	r3, r3, r1
  124354:	e1520003 	cmp	r2, r3
  124358:	0a00001a 	beq	1243c8 <tcp_receive+0x1ccc>
  12435c:	e3080544 	movw	r0, #34116	; 0x8544
  124360:	e3400014 	movt	r0, #20
  124364:	ebff7b6a 	bl	103114 <rt_kprintf>
  124368:	e3001668 	movw	r1, #1640	; 0x668
  12436c:	e30802b4 	movw	r0, #33460	; 0x82b4
  124370:	e3400014 	movt	r0, #20
  124374:	ebff9b5d 	bl	10b0f0 <sys_arch_assert>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
  124378:	ea000012 	b	1243c8 <tcp_receive+0x1ccc>
              }
            }
            prev = next;
  12437c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124380:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
          for (next = pcb->ooseq; next != NULL; next = next->next) {
  124384:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124388:	e5933000 	ldr	r3, [r3]
  12438c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  124390:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124394:	e3530000 	cmp	r3, #0
  124398:	1afffebc 	bne	123e90 <tcp_receive+0x1794>
      if (pcb->rcv_nxt == seqno) {
  12439c:	ea00000e 	b	1243dc <tcp_receive+0x1ce0>
                break;
  1243a0:	e320f000 	nop	{0}
  1243a4:	ea00000c 	b	1243dc <tcp_receive+0x1ce0>
                break;
  1243a8:	e320f000 	nop	{0}
  1243ac:	ea00000a 	b	1243dc <tcp_receive+0x1ce0>
                  break;
  1243b0:	e320f000 	nop	{0}
  1243b4:	ea000008 	b	1243dc <tcp_receive+0x1ce0>
                  break;
  1243b8:	e320f000 	nop	{0}
  1243bc:	ea000006 	b	1243dc <tcp_receive+0x1ce0>
                  break;
  1243c0:	e320f000 	nop	{0}
  1243c4:	ea000004 	b	1243dc <tcp_receive+0x1ce0>
                break;
  1243c8:	e320f000 	nop	{0}
      if (pcb->rcv_nxt == seqno) {
  1243cc:	ea000002 	b	1243dc <tcp_receive+0x1ce0>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
  1243d0:	e51b0040 	ldr	r0, [fp, #-64]	; 0xffffffc0
  1243d4:	eb00067f 	bl	125dd8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
  1243d8:	ea00001b 	b	12444c <tcp_receive+0x1d50>
  1243dc:	ea00001a 	b	12444c <tcp_receive+0x1d50>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
  1243e0:	e30e3250 	movw	r3, #57936	; 0xe250
  1243e4:	e3403014 	movt	r3, #20
  1243e8:	e5932000 	ldr	r2, [r3]
  1243ec:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1243f0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  1243f4:	e0423003 	sub	r3, r2, r3
  1243f8:	e3530000 	cmp	r3, #0
  1243fc:	ba00000b 	blt	124430 <tcp_receive+0x1d34>
  124400:	e30e3250 	movw	r3, #57936	; 0xe250
  124404:	e3403014 	movt	r3, #20
  124408:	e5932000 	ldr	r2, [r3]
  12440c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  124410:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  124414:	e51b1040 	ldr	r1, [fp, #-64]	; 0xffffffc0
  124418:	e1d112bc 	ldrh	r1, [r1, #44]	; 0x2c
  12441c:	e0833001 	add	r3, r3, r1
  124420:	e0423003 	sub	r3, r2, r3
  124424:	e2833001 	add	r3, r3, #1
  124428:	e3530000 	cmp	r3, #0
  12442c:	da000006 	ble	12444c <tcp_receive+0x1d50>
      tcp_ack_now(pcb);
  124430:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  124434:	e5d3301e 	ldrb	r3, [r3, #30]
  124438:	e3833002 	orr	r3, r3, #2
  12443c:	e6ef2073 	uxtb	r2, r3
  124440:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  124444:	e5c3201e 	strb	r2, [r3, #30]
    }
  }
}
  124448:	eaffffff 	b	12444c <tcp_receive+0x1d50>
  12444c:	e320f000 	nop	{0}
  124450:	e24bd010 	sub	sp, fp, #16
  124454:	e8bd8870 	pop	{r4, r5, r6, fp, pc}

00124458 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
  124458:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  12445c:	e28db000 	add	fp, sp, #0
  124460:	e24dd00c 	sub	sp, sp, #12
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
  124464:	e30e3248 	movw	r3, #57928	; 0xe248
  124468:	e3403014 	movt	r3, #20
  12446c:	e5933000 	ldr	r3, [r3]
  124470:	e3530000 	cmp	r3, #0
  124474:	0a000007 	beq	124498 <tcp_getoptbyte+0x40>
  124478:	e30e324c 	movw	r3, #57932	; 0xe24c
  12447c:	e3403014 	movt	r3, #20
  124480:	e1d320b0 	ldrh	r2, [r3]
  124484:	e30e3246 	movw	r3, #57926	; 0xe246
  124488:	e3403014 	movt	r3, #20
  12448c:	e1d330b0 	ldrh	r3, [r3]
  124490:	e1520003 	cmp	r2, r3
  124494:	2a000010 	bcs	1244dc <tcp_getoptbyte+0x84>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
  124498:	e30e3240 	movw	r3, #57920	; 0xe240
  12449c:	e3403014 	movt	r3, #20
  1244a0:	e5933000 	ldr	r3, [r3]
  1244a4:	e2833014 	add	r3, r3, #20
  1244a8:	e50b300c 	str	r3, [fp, #-12]
    return opts[tcp_optidx++];
  1244ac:	e30e324c 	movw	r3, #57932	; 0xe24c
  1244b0:	e3403014 	movt	r3, #20
  1244b4:	e1d320b0 	ldrh	r2, [r3]
  1244b8:	e2823001 	add	r3, r2, #1
  1244bc:	e6ff1073 	uxth	r1, r3
  1244c0:	e30e324c 	movw	r3, #57932	; 0xe24c
  1244c4:	e3403014 	movt	r3, #20
  1244c8:	e1c310b0 	strh	r1, [r3]
  1244cc:	e51b300c 	ldr	r3, [fp, #-12]
  1244d0:	e0833002 	add	r3, r3, r2
  1244d4:	e5d33000 	ldrb	r3, [r3]
  1244d8:	ea000014 	b	124530 <tcp_getoptbyte+0xd8>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
  1244dc:	e30e324c 	movw	r3, #57932	; 0xe24c
  1244e0:	e3403014 	movt	r3, #20
  1244e4:	e1d320b0 	ldrh	r2, [r3]
  1244e8:	e2823001 	add	r3, r2, #1
  1244ec:	e6ff1073 	uxth	r1, r3
  1244f0:	e30e324c 	movw	r3, #57932	; 0xe24c
  1244f4:	e3403014 	movt	r3, #20
  1244f8:	e1c310b0 	strh	r1, [r3]
  1244fc:	e6ef2072 	uxtb	r2, r2
  124500:	e30e3246 	movw	r3, #57926	; 0xe246
  124504:	e3403014 	movt	r3, #20
  124508:	e1d330b0 	ldrh	r3, [r3]
  12450c:	e6ef3073 	uxtb	r3, r3
  124510:	e0423003 	sub	r3, r2, r3
  124514:	e54b3005 	strb	r3, [fp, #-5]
    return tcphdr_opt2[idx];
  124518:	e30e3248 	movw	r3, #57928	; 0xe248
  12451c:	e3403014 	movt	r3, #20
  124520:	e5932000 	ldr	r2, [r3]
  124524:	e55b3005 	ldrb	r3, [fp, #-5]
  124528:	e0823003 	add	r3, r2, r3
  12452c:	e5d33000 	ldrb	r3, [r3]
  }
}
  124530:	e1a00003 	mov	r0, r3
  124534:	e28bd000 	add	sp, fp, #0
  124538:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  12453c:	e12fff1e 	bx	lr

00124540 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
  124540:	e92d4800 	push	{fp, lr}
  124544:	e28db004 	add	fp, sp, #4
  124548:	e24dd010 	sub	sp, sp, #16
  12454c:	e50b0010 	str	r0, [fp, #-16]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
  124550:	e30e3244 	movw	r3, #57924	; 0xe244
  124554:	e3403014 	movt	r3, #20
  124558:	e1d330b0 	ldrh	r3, [r3]
  12455c:	e3530000 	cmp	r3, #0
  124560:	0a000054 	beq	1246b8 <tcp_parseopt+0x178>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
  124564:	e30e324c 	movw	r3, #57932	; 0xe24c
  124568:	e3403014 	movt	r3, #20
  12456c:	e3a02000 	mov	r2, #0
  124570:	e1c320b0 	strh	r2, [r3]
  124574:	ea000041 	b	124680 <tcp_parseopt+0x140>
      u8_t opt = tcp_getoptbyte();
  124578:	ebffffb6 	bl	124458 <tcp_getoptbyte>
  12457c:	e1a03000 	mov	r3, r0
  124580:	e54b3005 	strb	r3, [fp, #-5]
      switch (opt) {
  124584:	e55b3005 	ldrb	r3, [fp, #-5]
  124588:	e3530001 	cmp	r3, #1
  12458c:	0a00003b 	beq	124680 <tcp_parseopt+0x140>
  124590:	e3530002 	cmp	r3, #2
  124594:	0a000002 	beq	1245a4 <tcp_parseopt+0x64>
  124598:	e3530000 	cmp	r3, #0
  12459c:	0a000040 	beq	1246a4 <tcp_parseopt+0x164>
  1245a0:	ea000024 	b	124638 <tcp_parseopt+0xf8>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
  1245a4:	ebffffab 	bl	124458 <tcp_getoptbyte>
  1245a8:	e1a03000 	mov	r3, r0
  1245ac:	e3530004 	cmp	r3, #4
  1245b0:	1a00003d 	bne	1246ac <tcp_parseopt+0x16c>
  1245b4:	e30e324c 	movw	r3, #57932	; 0xe24c
  1245b8:	e3403014 	movt	r3, #20
  1245bc:	e1d330b0 	ldrh	r3, [r3]
  1245c0:	e2832002 	add	r2, r3, #2
  1245c4:	e30e3244 	movw	r3, #57924	; 0xe244
  1245c8:	e3403014 	movt	r3, #20
  1245cc:	e1d330b0 	ldrh	r3, [r3]
  1245d0:	e1520003 	cmp	r2, r3
  1245d4:	ca000034 	bgt	1246ac <tcp_parseopt+0x16c>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
  1245d8:	ebffff9e 	bl	124458 <tcp_getoptbyte>
  1245dc:	e1a03000 	mov	r3, r0
  1245e0:	e6ff3073 	uxth	r3, r3
  1245e4:	e1a03403 	lsl	r3, r3, #8
  1245e8:	e14b30b8 	strh	r3, [fp, #-8]
        mss |= tcp_getoptbyte();
  1245ec:	ebffff99 	bl	124458 <tcp_getoptbyte>
  1245f0:	e1a03000 	mov	r3, r0
  1245f4:	e6ff2073 	uxth	r2, r3
  1245f8:	e15b30b8 	ldrh	r3, [fp, #-8]
  1245fc:	e1823003 	orr	r3, r2, r3
  124600:	e14b30b8 	strh	r3, [fp, #-8]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
  124604:	e15b30b8 	ldrh	r3, [fp, #-8]
  124608:	e30025b4 	movw	r2, #1460	; 0x5b4
  12460c:	e1530002 	cmp	r3, r2
  124610:	8a000004 	bhi	124628 <tcp_parseopt+0xe8>
  124614:	e15b30b8 	ldrh	r3, [fp, #-8]
  124618:	e3530000 	cmp	r3, #0
  12461c:	0a000001 	beq	124628 <tcp_parseopt+0xe8>
  124620:	e15b30b8 	ldrh	r3, [fp, #-8]
  124624:	ea000000 	b	12462c <tcp_parseopt+0xec>
  124628:	e30035b4 	movw	r3, #1460	; 0x5b4
  12462c:	e51b2010 	ldr	r2, [fp, #-16]
  124630:	e1c233b6 	strh	r3, [r2, #54]	; 0x36
        break;
  124634:	ea000011 	b	124680 <tcp_parseopt+0x140>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
  124638:	ebffff86 	bl	124458 <tcp_getoptbyte>
  12463c:	e1a03000 	mov	r3, r0
  124640:	e54b3009 	strb	r3, [fp, #-9]
        if (data < 2) {
  124644:	e55b3009 	ldrb	r3, [fp, #-9]
  124648:	e3530001 	cmp	r3, #1
  12464c:	9a000018 	bls	1246b4 <tcp_parseopt+0x174>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
  124650:	e55b3009 	ldrb	r3, [fp, #-9]
  124654:	e6ff2073 	uxth	r2, r3
  124658:	e30e324c 	movw	r3, #57932	; 0xe24c
  12465c:	e3403014 	movt	r3, #20
  124660:	e1d330b0 	ldrh	r3, [r3]
  124664:	e0823003 	add	r3, r2, r3
  124668:	e6ff3073 	uxth	r3, r3
  12466c:	e2433002 	sub	r3, r3, #2
  124670:	e6ff2073 	uxth	r2, r3
  124674:	e30e324c 	movw	r3, #57932	; 0xe24c
  124678:	e3403014 	movt	r3, #20
  12467c:	e1c320b0 	strh	r2, [r3]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
  124680:	e30e324c 	movw	r3, #57932	; 0xe24c
  124684:	e3403014 	movt	r3, #20
  124688:	e1d320b0 	ldrh	r2, [r3]
  12468c:	e30e3244 	movw	r3, #57924	; 0xe244
  124690:	e3403014 	movt	r3, #20
  124694:	e1d330b0 	ldrh	r3, [r3]
  124698:	e1520003 	cmp	r2, r3
  12469c:	3affffb5 	bcc	124578 <tcp_parseopt+0x38>
  1246a0:	ea000004 	b	1246b8 <tcp_parseopt+0x178>
        return;
  1246a4:	e320f000 	nop	{0}
  1246a8:	ea000002 	b	1246b8 <tcp_parseopt+0x178>
          return;
  1246ac:	e320f000 	nop	{0}
  1246b0:	ea000000 	b	1246b8 <tcp_parseopt+0x178>
          return;
  1246b4:	e320f000 	nop	{0}
      }
    }
  }
}
  1246b8:	e24bd004 	sub	sp, fp, #4
  1246bc:	e8bd8800 	pop	{fp, pc}

001246c0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  1246c0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1246c4:	e28db000 	add	fp, sp, #0
  recv_flags |= TF_CLOSED;
  1246c8:	e30e325d 	movw	r3, #57949	; 0xe25d
  1246cc:	e3403014 	movt	r3, #20
  1246d0:	e5d33000 	ldrb	r3, [r3]
  1246d4:	e3833010 	orr	r3, r3, #16
  1246d8:	e6ef2073 	uxtb	r2, r3
  1246dc:	e30e325d 	movw	r3, #57949	; 0xe25d
  1246e0:	e3403014 	movt	r3, #20
  1246e4:	e5c32000 	strb	r2, [r3]
}
  1246e8:	e320f000 	nop	{0}
  1246ec:	e28bd000 	add	sp, fp, #0
  1246f0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1246f4:	e12fff1e 	bx	lr

001246f8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
  1246f8:	e92d4800 	push	{fp, lr}
  1246fc:	e28db004 	add	fp, sp, #4
  124700:	e24dd018 	sub	sp, sp, #24
  124704:	e50b0010 	str	r0, [fp, #-16]
  124708:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  12470c:	e1a03001 	mov	r3, r1
  124710:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  124714:	e1a03002 	mov	r3, r2
  124718:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
  12471c:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  124720:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  124724:	e0823003 	add	r3, r2, r3
  124728:	e6ff3073 	uxth	r3, r3
  12472c:	e2833014 	add	r3, r3, #20
  124730:	e6ff3073 	uxth	r3, r3
  124734:	e3a02000 	mov	r2, #0
  124738:	e1a01003 	mov	r1, r3
  12473c:	e3a00001 	mov	r0, #1
  124740:	ebffd6d3 	bl	11a294 <pbuf_alloc>
  124744:	e50b0008 	str	r0, [fp, #-8]
  if (p != NULL) {
  124748:	e51b3008 	ldr	r3, [fp, #-8]
  12474c:	e3530000 	cmp	r3, #0
  124750:	0a000052 	beq	1248a0 <tcp_output_alloc_header+0x1a8>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
  124754:	e51b3008 	ldr	r3, [fp, #-8]
  124758:	e1d330ba 	ldrh	r3, [r3, #10]
  12475c:	e1a02003 	mov	r2, r3
  124760:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  124764:	e2833014 	add	r3, r3, #20
  124768:	e1520003 	cmp	r2, r3
  12476c:	aa000006 	bge	12478c <tcp_output_alloc_header+0x94>
  124770:	e3080600 	movw	r0, #34304	; 0x8600
  124774:	e3400014 	movt	r0, #20
  124778:	ebff7a65 	bl	103114 <rt_kprintf>
  12477c:	e3a01073 	mov	r1, #115	; 0x73
  124780:	e3080630 	movw	r0, #34352	; 0x8630
  124784:	e3400014 	movt	r0, #20
  124788:	ebff9a58 	bl	10b0f0 <sys_arch_assert>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
  12478c:	e51b3008 	ldr	r3, [fp, #-8]
  124790:	e5933004 	ldr	r3, [r3, #4]
  124794:	e50b300c 	str	r3, [fp, #-12]
    tcphdr->src = lwip_htons(pcb->local_port);
  124798:	e51b3010 	ldr	r3, [fp, #-16]
  12479c:	e1d331ba 	ldrh	r3, [r3, #26]
  1247a0:	e1a00003 	mov	r0, r3
  1247a4:	ebffc78a 	bl	1165d4 <lwip_htons>
  1247a8:	e1a03000 	mov	r3, r0
  1247ac:	e1a02003 	mov	r2, r3
  1247b0:	e51b300c 	ldr	r3, [fp, #-12]
  1247b4:	e1c320b0 	strh	r2, [r3]
    tcphdr->dest = lwip_htons(pcb->remote_port);
  1247b8:	e51b3010 	ldr	r3, [fp, #-16]
  1247bc:	e1d331bc 	ldrh	r3, [r3, #28]
  1247c0:	e1a00003 	mov	r0, r3
  1247c4:	ebffc782 	bl	1165d4 <lwip_htons>
  1247c8:	e1a03000 	mov	r3, r0
  1247cc:	e1a02003 	mov	r2, r3
  1247d0:	e51b300c 	ldr	r3, [fp, #-12]
  1247d4:	e1c320b2 	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
  1247d8:	e51b300c 	ldr	r3, [fp, #-12]
  1247dc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1247e0:	e5832004 	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
  1247e4:	e51b3010 	ldr	r3, [fp, #-16]
  1247e8:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  1247ec:	e1a00003 	mov	r0, r3
  1247f0:	ebffc783 	bl	116604 <lwip_htonl>
  1247f4:	e1a02000 	mov	r2, r0
  1247f8:	e51b300c 	ldr	r3, [fp, #-12]
  1247fc:	e5832008 	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
  124800:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  124804:	e1a03123 	lsr	r3, r3, #2
  124808:	e6ff3073 	uxth	r3, r3
  12480c:	e2833005 	add	r3, r3, #5
  124810:	e6ff3073 	uxth	r3, r3
  124814:	e1a03603 	lsl	r3, r3, #12
  124818:	e6ff3073 	uxth	r3, r3
  12481c:	e3833010 	orr	r3, r3, #16
  124820:	e6ff3073 	uxth	r3, r3
  124824:	e1a00003 	mov	r0, r3
  124828:	ebffc769 	bl	1165d4 <lwip_htons>
  12482c:	e1a03000 	mov	r3, r0
  124830:	e1a02003 	mov	r2, r3
  124834:	e51b300c 	ldr	r3, [fp, #-12]
  124838:	e1c320bc 	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  12483c:	e51b3010 	ldr	r3, [fp, #-16]
  124840:	e1d332be 	ldrh	r3, [r3, #46]	; 0x2e
  124844:	e1a00003 	mov	r0, r3
  124848:	ebffc761 	bl	1165d4 <lwip_htons>
  12484c:	e1a03000 	mov	r3, r0
  124850:	e1a02003 	mov	r2, r3
  124854:	e51b300c 	ldr	r3, [fp, #-12]
  124858:	e1c320be 	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
  12485c:	e51b300c 	ldr	r3, [fp, #-12]
  124860:	e3a02000 	mov	r2, #0
  124864:	e5c32010 	strb	r2, [r3, #16]
  124868:	e3a02000 	mov	r2, #0
  12486c:	e5c32011 	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
  124870:	e51b300c 	ldr	r3, [fp, #-12]
  124874:	e3a02000 	mov	r2, #0
  124878:	e5c32012 	strb	r2, [r3, #18]
  12487c:	e3a02000 	mov	r2, #0
  124880:	e5c32013 	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
  124884:	e51b3010 	ldr	r3, [fp, #-16]
  124888:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12488c:	e51b2010 	ldr	r2, [fp, #-16]
  124890:	e1d222be 	ldrh	r2, [r2, #46]	; 0x2e
  124894:	e0832002 	add	r2, r3, r2
  124898:	e51b3010 	ldr	r3, [fp, #-16]
  12489c:	e5832030 	str	r2, [r3, #48]	; 0x30
  }
  return p;
  1248a0:	e51b3008 	ldr	r3, [fp, #-8]
}
  1248a4:	e1a00003 	mov	r0, r3
  1248a8:	e24bd004 	sub	sp, fp, #4
  1248ac:	e8bd8800 	pop	{fp, pc}

001248b0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
  1248b0:	e92d4810 	push	{r4, fp, lr}
  1248b4:	e28db008 	add	fp, sp, #8
  1248b8:	e24dd014 	sub	sp, sp, #20
  1248bc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
  1248c0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1248c4:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  1248c8:	e3530000 	cmp	r3, #0
  1248cc:	0a000029 	beq	124978 <tcp_send_fin+0xc8>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
  1248d0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1248d4:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  1248d8:	e50b3010 	str	r3, [fp, #-16]
  1248dc:	ea000002 	b	1248ec <tcp_send_fin+0x3c>
         last_unsent = last_unsent->next);
  1248e0:	e51b3010 	ldr	r3, [fp, #-16]
  1248e4:	e5933000 	ldr	r3, [r3]
  1248e8:	e50b3010 	str	r3, [fp, #-16]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
  1248ec:	e51b3010 	ldr	r3, [fp, #-16]
  1248f0:	e5933000 	ldr	r3, [r3]
  1248f4:	e3530000 	cmp	r3, #0
  1248f8:	1afffff8 	bne	1248e0 <tcp_send_fin+0x30>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
  1248fc:	e51b3010 	ldr	r3, [fp, #-16]
  124900:	e593300c 	ldr	r3, [r3, #12]
  124904:	e1d330bc 	ldrh	r3, [r3, #12]
  124908:	e6ff3073 	uxth	r3, r3
  12490c:	e1a00003 	mov	r0, r3
  124910:	ebffc72f 	bl	1165d4 <lwip_htons>
  124914:	e1a03000 	mov	r3, r0
  124918:	e2033007 	and	r3, r3, #7
  12491c:	e3530000 	cmp	r3, #0
  124920:	1a000014 	bne	124978 <tcp_send_fin+0xc8>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
  124924:	e51b3010 	ldr	r3, [fp, #-16]
  124928:	e593300c 	ldr	r3, [r3, #12]
  12492c:	e1d330bc 	ldrh	r3, [r3, #12]
  124930:	e6ff4073 	uxth	r4, r3
  124934:	e3a00001 	mov	r0, #1
  124938:	ebffc725 	bl	1165d4 <lwip_htons>
  12493c:	e1a03000 	mov	r3, r0
  124940:	e1a02003 	mov	r2, r3
  124944:	e51b3010 	ldr	r3, [fp, #-16]
  124948:	e593300c 	ldr	r3, [r3, #12]
  12494c:	e1842002 	orr	r2, r4, r2
  124950:	e6ff2072 	uxth	r2, r2
  124954:	e1c320bc 	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
  124958:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12495c:	e5d3301e 	ldrb	r3, [r3, #30]
  124960:	e3833020 	orr	r3, r3, #32
  124964:	e6ef2073 	uxtb	r2, r3
  124968:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12496c:	e5c3201e 	strb	r2, [r3, #30]
      return ERR_OK;
  124970:	e3a03000 	mov	r3, #0
  124974:	ea000003 	b	124988 <tcp_send_fin+0xd8>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
  124978:	e3a01001 	mov	r1, #1
  12497c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  124980:	eb000426 	bl	125a20 <tcp_enqueue_flags>
  124984:	e1a03000 	mov	r3, r0
}
  124988:	e1a00003 	mov	r0, r3
  12498c:	e24bd008 	sub	sp, fp, #8
  124990:	e8bd8810 	pop	{r4, fp, pc}

00124994 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
  124994:	e92d4810 	push	{r4, fp, lr}
  124998:	e28db008 	add	fp, sp, #8
  12499c:	e24dd01c 	sub	sp, sp, #28
  1249a0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1249a4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  1249a8:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  1249ac:	e1a03002 	mov	r3, r2
  1249b0:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
  1249b4:	e5db3004 	ldrb	r3, [fp, #4]
  1249b8:	e1a03103 	lsl	r3, r3, #2
  1249bc:	e6ef3073 	uxtb	r3, r3
  1249c0:	e2033004 	and	r3, r3, #4
  1249c4:	e54b300d 	strb	r3, [fp, #-13]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
  1249c8:	e3a020b2 	mov	r2, #178	; 0xb2
  1249cc:	e3081630 	movw	r1, #34352	; 0x8630
  1249d0:	e3401014 	movt	r1, #20
  1249d4:	e3a00004 	mov	r0, #4
  1249d8:	ebffd1be 	bl	1190d8 <memp_malloc_fn>
  1249dc:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  1249e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1249e4:	e3530000 	cmp	r3, #0
  1249e8:	1a000003 	bne	1249fc <tcp_create_segment+0x68>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
  1249ec:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  1249f0:	ebffd92e 	bl	11aeb0 <pbuf_free>
    return NULL;
  1249f4:	e3a03000 	mov	r3, #0
  1249f8:	ea000063 	b	124b8c <tcp_create_segment+0x1f8>
  }
  seg->flags = optflags;
  1249fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124a00:	e5db2004 	ldrb	r2, [fp, #4]
  124a04:	e5c3200a 	strb	r2, [r3, #10]
  seg->next = NULL;
  124a08:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124a0c:	e3a02000 	mov	r2, #0
  124a10:	e5832000 	str	r2, [r3]
  seg->p = p;
  124a14:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124a18:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  124a1c:	e5832004 	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
  124a20:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  124a24:	e1d320b8 	ldrh	r2, [r3, #8]
  124a28:	e55b300d 	ldrb	r3, [fp, #-13]
  124a2c:	e6ff3073 	uxth	r3, r3
  124a30:	e1520003 	cmp	r2, r3
  124a34:	2a000006 	bcs	124a54 <tcp_create_segment+0xc0>
  124a38:	e3080660 	movw	r0, #34400	; 0x8660
  124a3c:	e3400014 	movt	r0, #20
  124a40:	ebff79b3 	bl	103114 <rt_kprintf>
  124a44:	e3a010ba 	mov	r1, #186	; 0xba
  124a48:	e3080630 	movw	r0, #34352	; 0x8630
  124a4c:	e3400014 	movt	r0, #20
  124a50:	ebff99a6 	bl	10b0f0 <sys_arch_assert>
  seg->len = p->tot_len - optlen;
  124a54:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  124a58:	e1d320b8 	ldrh	r2, [r3, #8]
  124a5c:	e55b300d 	ldrb	r3, [fp, #-13]
  124a60:	e6ff3073 	uxth	r3, r3
  124a64:	e0423003 	sub	r3, r2, r3
  124a68:	e6ff2073 	uxth	r2, r3
  124a6c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124a70:	e1c320b8 	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
  124a74:	e3a01014 	mov	r1, #20
  124a78:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  124a7c:	ebffd8ed 	bl	11ae38 <pbuf_header>
  124a80:	e1a03000 	mov	r3, r0
  124a84:	e3530000 	cmp	r3, #0
  124a88:	0a00000b 	beq	124abc <tcp_create_segment+0x128>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
  124a8c:	e30c3a30 	movw	r3, #51760	; 0xca30
  124a90:	e3403015 	movt	r3, #21
  124a94:	e1d33cb0 	ldrh	r3, [r3, #192]	; 0xc0
  124a98:	e2833001 	add	r3, r3, #1
  124a9c:	e6ff2073 	uxth	r2, r3
  124aa0:	e30c3a30 	movw	r3, #51760	; 0xca30
  124aa4:	e3403015 	movt	r3, #21
  124aa8:	e1c32cb0 	strh	r2, [r3, #192]	; 0xc0
    tcp_seg_free(seg);
  124aac:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  124ab0:	ebffea72 	bl	11f480 <tcp_seg_free>
    return NULL;
  124ab4:	e3a03000 	mov	r3, #0
  124ab8:	ea000033 	b	124b8c <tcp_create_segment+0x1f8>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
  124abc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124ac0:	e5933004 	ldr	r3, [r3, #4]
  124ac4:	e5932004 	ldr	r2, [r3, #4]
  124ac8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124acc:	e583200c 	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
  124ad0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124ad4:	e1d321ba 	ldrh	r2, [r3, #26]
  124ad8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124adc:	e593400c 	ldr	r4, [r3, #12]
  124ae0:	e1a00002 	mov	r0, r2
  124ae4:	ebffc6ba 	bl	1165d4 <lwip_htons>
  124ae8:	e1a03000 	mov	r3, r0
  124aec:	e1c430b0 	strh	r3, [r4]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
  124af0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124af4:	e1d321bc 	ldrh	r2, [r3, #28]
  124af8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124afc:	e593400c 	ldr	r4, [r3, #12]
  124b00:	e1a00002 	mov	r0, r2
  124b04:	ebffc6b2 	bl	1165d4 <lwip_htons>
  124b08:	e1a03000 	mov	r3, r0
  124b0c:	e1c430b2 	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
  124b10:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124b14:	e593400c 	ldr	r4, [r3, #12]
  124b18:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  124b1c:	ebffc6b8 	bl	116604 <lwip_htonl>
  124b20:	e1a03000 	mov	r3, r0
  124b24:	e5843004 	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
  124b28:	e55b300d 	ldrb	r3, [fp, #-13]
  124b2c:	e1a03123 	lsr	r3, r3, #2
  124b30:	e6ef3073 	uxtb	r3, r3
  124b34:	e6ff3073 	uxth	r3, r3
  124b38:	e2833005 	add	r3, r3, #5
  124b3c:	e6ff3073 	uxth	r3, r3
  124b40:	e1a03603 	lsl	r3, r3, #12
  124b44:	e6ff2073 	uxth	r2, r3
  124b48:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  124b4c:	e6ff3073 	uxth	r3, r3
  124b50:	e1823003 	orr	r3, r2, r3
  124b54:	e6ff2073 	uxth	r2, r3
  124b58:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124b5c:	e593400c 	ldr	r4, [r3, #12]
  124b60:	e1a00002 	mov	r0, r2
  124b64:	ebffc69a 	bl	1165d4 <lwip_htons>
  124b68:	e1a03000 	mov	r3, r0
  124b6c:	e1c430bc 	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
  124b70:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124b74:	e593300c 	ldr	r3, [r3, #12]
  124b78:	e3a02000 	mov	r2, #0
  124b7c:	e5c32012 	strb	r2, [r3, #18]
  124b80:	e3a02000 	mov	r2, #0
  124b84:	e5c32013 	strb	r2, [r3, #19]
  return seg;
  124b88:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
}
  124b8c:	e1a00003 	mov	r0, r3
  124b90:	e24bd008 	sub	sp, fp, #8
  124b94:	e8bd8810 	pop	{r4, fp, pc}

00124b98 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
  124b98:	e92d4800 	push	{fp, lr}
  124b9c:	e28db004 	add	fp, sp, #4
  124ba0:	e24dd018 	sub	sp, sp, #24
  124ba4:	e50b0010 	str	r0, [fp, #-16]
  124ba8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  124bac:	e1a03001 	mov	r3, r1
  124bb0:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  124bb4:	e1a03002 	mov	r3, r2
  124bb8:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  struct pbuf *p;
  u16_t alloc = length;
  124bbc:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  124bc0:	e14b30b6 	strh	r3, [fp, #-6]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
  124bc4:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  124bc8:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  124bcc:	e1520003 	cmp	r2, r3
  124bd0:	2a00001c 	bcs	124c48 <tcp_pbuf_prealloc+0xb0>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
  124bd4:	e5db3008 	ldrb	r3, [fp, #8]
  124bd8:	e2033002 	and	r3, r3, #2
  124bdc:	e3530000 	cmp	r3, #0
  124be0:	1a00000f 	bne	124c24 <tcp_pbuf_prealloc+0x8c>
        (!(pcb->flags & TF_NODELAY) &&
  124be4:	e59b3004 	ldr	r3, [fp, #4]
  124be8:	e5d3301e 	ldrb	r3, [r3, #30]
  124bec:	e2033040 	and	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
  124bf0:	e3530000 	cmp	r3, #0
  124bf4:	1a000013 	bne	124c48 <tcp_pbuf_prealloc+0xb0>
        (!(pcb->flags & TF_NODELAY) &&
  124bf8:	e5db300c 	ldrb	r3, [fp, #12]
  124bfc:	e3530000 	cmp	r3, #0
  124c00:	0a000007 	beq	124c24 <tcp_pbuf_prealloc+0x8c>
         (!first_seg ||
          pcb->unsent != NULL ||
  124c04:	e59b3004 	ldr	r3, [fp, #4]
  124c08:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
  124c0c:	e3530000 	cmp	r3, #0
  124c10:	1a000003 	bne	124c24 <tcp_pbuf_prealloc+0x8c>
          pcb->unacked != NULL))) {
  124c14:	e59b3004 	ldr	r3, [fp, #4]
  124c18:	e5933070 	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
  124c1c:	e3530000 	cmp	r3, #0
  124c20:	0a000008 	beq	124c48 <tcp_pbuf_prealloc+0xb0>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
  124c24:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  124c28:	e2833e5b 	add	r3, r3, #1456	; 0x5b0
  124c2c:	e2833007 	add	r3, r3, #7
  124c30:	e3c32003 	bic	r2, r3, #3
  124c34:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  124c38:	e1520003 	cmp	r2, r3
  124c3c:	31a03002 	movcc	r3, r2
  124c40:	21a03003 	movcs	r3, r3
  124c44:	e14b30b6 	strh	r3, [fp, #-6]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
  124c48:	e15b30b6 	ldrh	r3, [fp, #-6]
  124c4c:	e3a02000 	mov	r2, #0
  124c50:	e1a01003 	mov	r1, r3
  124c54:	e51b0010 	ldr	r0, [fp, #-16]
  124c58:	ebffd58d 	bl	11a294 <pbuf_alloc>
  124c5c:	e50b000c 	str	r0, [fp, #-12]
  if (p == NULL) {
  124c60:	e51b300c 	ldr	r3, [fp, #-12]
  124c64:	e3530000 	cmp	r3, #0
  124c68:	1a000001 	bne	124c74 <tcp_pbuf_prealloc+0xdc>
    return NULL;
  124c6c:	e3a03000 	mov	r3, #0
  124c70:	ea000019 	b	124cdc <tcp_pbuf_prealloc+0x144>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
  124c74:	e51b300c 	ldr	r3, [fp, #-12]
  124c78:	e5933000 	ldr	r3, [r3]
  124c7c:	e3530000 	cmp	r3, #0
  124c80:	0a000006 	beq	124ca0 <tcp_pbuf_prealloc+0x108>
  124c84:	e3080678 	movw	r0, #34424	; 0x8678
  124c88:	e3400014 	movt	r0, #20
  124c8c:	ebff7920 	bl	103114 <rt_kprintf>
  124c90:	e3a01e11 	mov	r1, #272	; 0x110
  124c94:	e3080630 	movw	r0, #34352	; 0x8630
  124c98:	e3400014 	movt	r0, #20
  124c9c:	ebff9913 	bl	10b0f0 <sys_arch_assert>
  *oversize = p->len - length;
  124ca0:	e51b300c 	ldr	r3, [fp, #-12]
  124ca4:	e1d320ba 	ldrh	r2, [r3, #10]
  124ca8:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  124cac:	e0423003 	sub	r3, r2, r3
  124cb0:	e6ff2073 	uxth	r2, r3
  124cb4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124cb8:	e1c320b0 	strh	r2, [r3]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
  124cbc:	e51b300c 	ldr	r3, [fp, #-12]
  124cc0:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  124cc4:	e1c320b8 	strh	r2, [r3, #8]
  124cc8:	e51b300c 	ldr	r3, [fp, #-12]
  124ccc:	e1d320b8 	ldrh	r2, [r3, #8]
  124cd0:	e51b300c 	ldr	r3, [fp, #-12]
  124cd4:	e1c320ba 	strh	r2, [r3, #10]
  return p;
  124cd8:	e51b300c 	ldr	r3, [fp, #-12]
}
  124cdc:	e1a00003 	mov	r0, r3
  124ce0:	e24bd004 	sub	sp, fp, #4
  124ce4:	e8bd8800 	pop	{fp, pc}

00124ce8 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
  124ce8:	e92d4800 	push	{fp, lr}
  124cec:	e28db004 	add	fp, sp, #4
  124cf0:	e24dd008 	sub	sp, sp, #8
  124cf4:	e50b0008 	str	r0, [fp, #-8]
  124cf8:	e1a03001 	mov	r3, r1
  124cfc:	e14b30ba 	strh	r3, [fp, #-10]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
  124d00:	e51b3008 	ldr	r3, [fp, #-8]
  124d04:	e5933014 	ldr	r3, [r3, #20]
  124d08:	e3530004 	cmp	r3, #4
  124d0c:	0a00000d 	beq	124d48 <tcp_write_checks+0x60>
      (pcb->state != CLOSE_WAIT) &&
  124d10:	e51b3008 	ldr	r3, [fp, #-8]
  124d14:	e5933014 	ldr	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
  124d18:	e3530007 	cmp	r3, #7
  124d1c:	0a000009 	beq	124d48 <tcp_write_checks+0x60>
      (pcb->state != SYN_SENT) &&
  124d20:	e51b3008 	ldr	r3, [fp, #-8]
  124d24:	e5933014 	ldr	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
  124d28:	e3530002 	cmp	r3, #2
  124d2c:	0a000005 	beq	124d48 <tcp_write_checks+0x60>
      (pcb->state != SYN_RCVD)) {
  124d30:	e51b3008 	ldr	r3, [fp, #-8]
  124d34:	e5933014 	ldr	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
  124d38:	e3530003 	cmp	r3, #3
  124d3c:	0a000001 	beq	124d48 <tcp_write_checks+0x60>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
  124d40:	e3e0300a 	mvn	r3, #10
  124d44:	ea000050 	b	124e8c <tcp_write_checks+0x1a4>
  } else if (len == 0) {
  124d48:	e15b30ba 	ldrh	r3, [fp, #-10]
  124d4c:	e3530000 	cmp	r3, #0
  124d50:	1a000001 	bne	124d5c <tcp_write_checks+0x74>
    return ERR_OK;
  124d54:	e3a03000 	mov	r3, #0
  124d58:	ea00004b 	b	124e8c <tcp_write_checks+0x1a4>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
  124d5c:	e51b3008 	ldr	r3, [fp, #-8]
  124d60:	e1d336b4 	ldrh	r3, [r3, #100]	; 0x64
  124d64:	e15b20ba 	ldrh	r2, [fp, #-10]
  124d68:	e1520003 	cmp	r2, r3
  124d6c:	9a000008 	bls	124d94 <tcp_write_checks+0xac>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
  124d70:	e51b3008 	ldr	r3, [fp, #-8]
  124d74:	e5d3301e 	ldrb	r3, [r3, #30]
  124d78:	e1e03c83 	mvn	r3, r3, lsl #25
  124d7c:	e1e03ca3 	mvn	r3, r3, lsr #25
  124d80:	e6ef2073 	uxtb	r2, r3
  124d84:	e51b3008 	ldr	r3, [fp, #-8]
  124d88:	e5c3201e 	strb	r2, [r3, #30]
    return ERR_MEM;
  124d8c:	e3e03000 	mvn	r3, #0
  124d90:	ea00003d 	b	124e8c <tcp_write_checks+0x1a4>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
  124d94:	e51b3008 	ldr	r3, [fp, #-8]
  124d98:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  124d9c:	e3530015 	cmp	r3, #21
  124da0:	8a000004 	bhi	124db8 <tcp_write_checks+0xd0>
  124da4:	e51b3008 	ldr	r3, [fp, #-8]
  124da8:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  124dac:	e30f2ffc 	movw	r2, #65532	; 0xfffc
  124db0:	e1530002 	cmp	r3, r2
  124db4:	9a000010 	bls	124dfc <tcp_write_checks+0x114>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
  124db8:	e30c3a30 	movw	r3, #51760	; 0xca30
  124dbc:	e3403015 	movt	r3, #21
  124dc0:	e1d33bb8 	ldrh	r3, [r3, #184]	; 0xb8
  124dc4:	e2833001 	add	r3, r3, #1
  124dc8:	e6ff2073 	uxth	r2, r3
  124dcc:	e30c3a30 	movw	r3, #51760	; 0xca30
  124dd0:	e3403015 	movt	r3, #21
  124dd4:	e1c32bb8 	strh	r2, [r3, #184]	; 0xb8
    pcb->flags |= TF_NAGLEMEMERR;
  124dd8:	e51b3008 	ldr	r3, [fp, #-8]
  124ddc:	e5d3301e 	ldrb	r3, [r3, #30]
  124de0:	e1e03c83 	mvn	r3, r3, lsl #25
  124de4:	e1e03ca3 	mvn	r3, r3, lsr #25
  124de8:	e6ef2073 	uxtb	r2, r3
  124dec:	e51b3008 	ldr	r3, [fp, #-8]
  124df0:	e5c3201e 	strb	r2, [r3, #30]
    return ERR_MEM;
  124df4:	e3e03000 	mvn	r3, #0
  124df8:	ea000023 	b	124e8c <tcp_write_checks+0x1a4>
  }
  if (pcb->snd_queuelen != 0) {
  124dfc:	e51b3008 	ldr	r3, [fp, #-8]
  124e00:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  124e04:	e3530000 	cmp	r3, #0
  124e08:	0a00000f 	beq	124e4c <tcp_write_checks+0x164>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
  124e0c:	e51b3008 	ldr	r3, [fp, #-8]
  124e10:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  124e14:	e3530000 	cmp	r3, #0
  124e18:	1a00001a 	bne	124e88 <tcp_write_checks+0x1a0>
  124e1c:	e51b3008 	ldr	r3, [fp, #-8]
  124e20:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  124e24:	e3530000 	cmp	r3, #0
  124e28:	1a000016 	bne	124e88 <tcp_write_checks+0x1a0>
  124e2c:	e308068c 	movw	r0, #34444	; 0x868c
  124e30:	e3400014 	movt	r0, #20
  124e34:	ebff78b6 	bl	103114 <rt_kprintf>
  124e38:	e3001156 	movw	r1, #342	; 0x156
  124e3c:	e3080630 	movw	r0, #34352	; 0x8630
  124e40:	e3400014 	movt	r0, #20
  124e44:	ebff98a9 	bl	10b0f0 <sys_arch_assert>
  124e48:	ea00000e 	b	124e88 <tcp_write_checks+0x1a0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
  124e4c:	e51b3008 	ldr	r3, [fp, #-8]
  124e50:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  124e54:	e3530000 	cmp	r3, #0
  124e58:	1a000003 	bne	124e6c <tcp_write_checks+0x184>
  124e5c:	e51b3008 	ldr	r3, [fp, #-8]
  124e60:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  124e64:	e3530000 	cmp	r3, #0
  124e68:	0a000006 	beq	124e88 <tcp_write_checks+0x1a0>
  124e6c:	e30806c8 	movw	r0, #34504	; 0x86c8
  124e70:	e3400014 	movt	r0, #20
  124e74:	ebff78a6 	bl	103114 <rt_kprintf>
  124e78:	e3001159 	movw	r1, #345	; 0x159
  124e7c:	e3080630 	movw	r0, #34352	; 0x8630
  124e80:	e3400014 	movt	r0, #20
  124e84:	ebff9899 	bl	10b0f0 <sys_arch_assert>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
  124e88:	e3a03000 	mov	r3, #0
}
  124e8c:	e1a00003 	mov	r0, r3
  124e90:	e24bd004 	sub	sp, fp, #4
  124e94:	e8bd8800 	pop	{fp, pc}

00124e98 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
  124e98:	e92d4810 	push	{r4, fp, lr}
  124e9c:	e28db008 	add	fp, sp, #8
  124ea0:	e24dd06c 	sub	sp, sp, #108	; 0x6c
  124ea4:	e50b0058 	str	r0, [fp, #-88]	; 0xffffffa8
  124ea8:	e50b105c 	str	r1, [fp, #-92]	; 0xffffffa4
  124eac:	e1a01002 	mov	r1, r2
  124eb0:	e1a02003 	mov	r2, r3
  124eb4:	e1a03001 	mov	r3, r1
  124eb8:	e14b35be 	strh	r3, [fp, #-94]	; 0xffffffa2
  124ebc:	e1a03002 	mov	r3, r2
  124ec0:	e54b305f 	strb	r3, [fp, #-95]	; 0xffffffa1
  struct pbuf *concat_p = NULL;
  124ec4:	e3a03000 	mov	r3, #0
  124ec8:	e50b3010 	str	r3, [fp, #-16]
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
  124ecc:	e3a03000 	mov	r3, #0
  124ed0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  124ed4:	e3a03000 	mov	r3, #0
  124ed8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  124edc:	e3a03000 	mov	r3, #0
  124ee0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  124ee4:	e3a03000 	mov	r3, #0
  124ee8:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  u16_t pos = 0; /* position in 'arg' data */
  124eec:	e3a03000 	mov	r3, #0
  124ef0:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
  u16_t queuelen;
  u8_t optlen = 0;
  124ef4:	e3a03000 	mov	r3, #0
  124ef8:	e54b303d 	strb	r3, [fp, #-61]	; 0xffffffc3
  u8_t optflags = 0;
  124efc:	e3a03000 	mov	r3, #0
  124f00:	e54b303e 	strb	r3, [fp, #-62]	; 0xffffffc2
#if TCP_OVERSIZE
  u16_t oversize = 0;
  124f04:	e3a03000 	mov	r3, #0
  124f08:	e14b35b2 	strh	r3, [fp, #-82]	; 0xffffffae
  u16_t oversize_used = 0;
  124f0c:	e3a03000 	mov	r3, #0
  124f10:	e14b32b6 	strh	r3, [fp, #-38]	; 0xffffffda
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
  124f14:	e3a03000 	mov	r3, #0
  124f18:	e14b32b8 	strh	r3, [fp, #-40]	; 0xffffffd8
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
  124f1c:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  124f20:	e1d336b2 	ldrh	r3, [r3, #98]	; 0x62
  124f24:	e1a030a3 	lsr	r3, r3, #1
  124f28:	e6ff2073 	uxth	r2, r3
  124f2c:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  124f30:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  124f34:	e1520003 	cmp	r2, r3
  124f38:	31a03002 	movcc	r3, r2
  124f3c:	21a03003 	movcs	r3, r3
  124f40:	e14b34b0 	strh	r3, [fp, #-64]	; 0xffffffc0
  mss_local = mss_local ? mss_local : pcb->mss;
  124f44:	e15b34b0 	ldrh	r3, [fp, #-64]	; 0xffffffc0
  124f48:	e3530000 	cmp	r3, #0
  124f4c:	1a000002 	bne	124f5c <tcp_write+0xc4>
  124f50:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  124f54:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  124f58:	ea000000 	b	124f60 <tcp_write+0xc8>
  124f5c:	e15b34b0 	ldrh	r3, [fp, #-64]	; 0xffffffc0
  124f60:	e14b34b0 	strh	r3, [fp, #-64]	; 0xffffffc0
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
  124f64:	e51b305c 	ldr	r3, [fp, #-92]	; 0xffffffa4
  124f68:	e3530000 	cmp	r3, #0
  124f6c:	1a000008 	bne	124f94 <tcp_write+0xfc>
  124f70:	e30806fc 	movw	r0, #34556	; 0x86fc
  124f74:	e3400014 	movt	r0, #20
  124f78:	ebff7865 	bl	103114 <rt_kprintf>
  124f7c:	e3001192 	movw	r1, #402	; 0x192
  124f80:	e3080630 	movw	r0, #34352	; 0x8630
  124f84:	e3400014 	movt	r0, #20
  124f88:	ebff9858 	bl	10b0f0 <sys_arch_assert>
  124f8c:	e3e0300f 	mvn	r3, #15
  124f90:	ea00029f 	b	125a14 <tcp_write+0xb7c>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
  124f94:	e15b35be 	ldrh	r3, [fp, #-94]	; 0xffffffa2
  124f98:	e1a01003 	mov	r1, r3
  124f9c:	e51b0058 	ldr	r0, [fp, #-88]	; 0xffffffa8
  124fa0:	ebffff50 	bl	124ce8 <tcp_write_checks>
  124fa4:	e1a03000 	mov	r3, r0
  124fa8:	e54b3041 	strb	r3, [fp, #-65]	; 0xffffffbf
  if (err != ERR_OK) {
  124fac:	e15b34d1 	ldrsb	r3, [fp, #-65]	; 0xffffffbf
  124fb0:	e3530000 	cmp	r3, #0
  124fb4:	0a000001 	beq	124fc0 <tcp_write+0x128>
    return err;
  124fb8:	e15b34d1 	ldrsb	r3, [fp, #-65]	; 0xffffffbf
  124fbc:	ea000294 	b	125a14 <tcp_write+0xb7c>
  }
  queuelen = pcb->snd_queuelen;
  124fc0:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  124fc4:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  124fc8:	e14b32b4 	strh	r3, [fp, #-36]	; 0xffffffdc
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
  124fcc:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  124fd0:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  124fd4:	e3530000 	cmp	r3, #0
  124fd8:	0a0000d8 	beq	125340 <tcp_write+0x4a8>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
  124fdc:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  124fe0:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  124fe4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  124fe8:	ea000002 	b	124ff8 <tcp_write+0x160>
         last_unsent = last_unsent->next);
  124fec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124ff0:	e5933000 	ldr	r3, [r3]
  124ff4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
  124ff8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124ffc:	e5933000 	ldr	r3, [r3]
  125000:	e3530000 	cmp	r3, #0
  125004:	1afffff8 	bne	124fec <tcp_write+0x154>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
  125008:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12500c:	e5d3300a 	ldrb	r3, [r3, #10]
  125010:	e1a03103 	lsl	r3, r3, #2
  125014:	e6ff3073 	uxth	r3, r3
  125018:	e2033004 	and	r3, r3, #4
  12501c:	e14b34b4 	strh	r3, [fp, #-68]	; 0xffffffbc
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
  125020:	e15b24b0 	ldrh	r2, [fp, #-64]	; 0xffffffc0
  125024:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125028:	e1d330b8 	ldrh	r3, [r3, #8]
  12502c:	e1a01003 	mov	r1, r3
  125030:	e15b34b4 	ldrh	r3, [fp, #-68]	; 0xffffffbc
  125034:	e0813003 	add	r3, r1, r3
  125038:	e1520003 	cmp	r2, r3
  12503c:	aa000006 	bge	12505c <tcp_write+0x1c4>
  125040:	e3080730 	movw	r0, #34608	; 0x8730
  125044:	e3400014 	movt	r0, #20
  125048:	ebff7831 	bl	103114 <rt_kprintf>
  12504c:	e30011c7 	movw	r1, #455	; 0x1c7
  125050:	e3080630 	movw	r0, #34352	; 0x8630
  125054:	e3400014 	movt	r0, #20
  125058:	ebff9824 	bl	10b0f0 <sys_arch_assert>
    space = mss_local - (last_unsent->len + unsent_optlen);
  12505c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125060:	e1d320b8 	ldrh	r2, [r3, #8]
  125064:	e15b34b4 	ldrh	r3, [fp, #-68]	; 0xffffffbc
  125068:	e0823003 	add	r3, r2, r3
  12506c:	e6ff3073 	uxth	r3, r3
  125070:	e15b24b0 	ldrh	r2, [fp, #-64]	; 0xffffffc0
  125074:	e0423003 	sub	r3, r2, r3
  125078:	e14b32ba 	strh	r3, [fp, #-42]	; 0xffffffd6
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
  12507c:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125080:	e1d336b8 	ldrh	r3, [r3, #104]	; 0x68
  125084:	e14b35b2 	strh	r3, [fp, #-82]	; 0xffffffae
    if (oversize > 0) {
  125088:	e15b35b2 	ldrh	r3, [fp, #-82]	; 0xffffffae
  12508c:	e3530000 	cmp	r3, #0
  125090:	0a000025 	beq	12512c <tcp_write+0x294>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
  125094:	e15b35b2 	ldrh	r3, [fp, #-82]	; 0xffffffae
  125098:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
  12509c:	e1520003 	cmp	r2, r3
  1250a0:	2a000006 	bcs	1250c0 <tcp_write+0x228>
  1250a4:	e3080748 	movw	r0, #34632	; 0x8748
  1250a8:	e3400014 	movt	r0, #20
  1250ac:	ebff7818 	bl	103114 <rt_kprintf>
  1250b0:	e30011d9 	movw	r1, #473	; 0x1d9
  1250b4:	e3080630 	movw	r0, #34352	; 0x8630
  1250b8:	e3400014 	movt	r0, #20
  1250bc:	ebff980b 	bl	10b0f0 <sys_arch_assert>
      seg = last_unsent;
  1250c0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1250c4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
  1250c8:	e15b35b2 	ldrh	r3, [fp, #-82]	; 0xffffffae
  1250cc:	e15b25be 	ldrh	r2, [fp, #-94]	; 0xffffffa2
  1250d0:	e1520003 	cmp	r2, r3
  1250d4:	9a000001 	bls	1250e0 <tcp_write+0x248>
  1250d8:	e15b35b2 	ldrh	r3, [fp, #-82]	; 0xffffffae
  1250dc:	ea000000 	b	1250e4 <tcp_write+0x24c>
  1250e0:	e15b35be 	ldrh	r3, [fp, #-94]	; 0xffffffa2
  1250e4:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
  1250e8:	e1530002 	cmp	r3, r2
  1250ec:	b1a03003 	movlt	r3, r3
  1250f0:	a1a03002 	movge	r3, r2
  1250f4:	e14b32b6 	strh	r3, [fp, #-38]	; 0xffffffda
      pos += oversize_used;
  1250f8:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  1250fc:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  125100:	e0823003 	add	r3, r2, r3
  125104:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
      oversize -= oversize_used;
  125108:	e15b25b2 	ldrh	r2, [fp, #-82]	; 0xffffffae
  12510c:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  125110:	e0423003 	sub	r3, r2, r3
  125114:	e6ff3073 	uxth	r3, r3
  125118:	e14b35b2 	strh	r3, [fp, #-82]	; 0xffffffae
      space -= oversize_used;
  12511c:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
  125120:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  125124:	e0423003 	sub	r3, r2, r3
  125128:	e14b32ba 	strh	r3, [fp, #-42]	; 0xffffffd6
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
  12512c:	e15b35b2 	ldrh	r3, [fp, #-82]	; 0xffffffae
  125130:	e3530000 	cmp	r3, #0
  125134:	0a00000a 	beq	125164 <tcp_write+0x2cc>
  125138:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  12513c:	e15b35be 	ldrh	r3, [fp, #-94]	; 0xffffffa2
  125140:	e1520003 	cmp	r2, r3
  125144:	0a000006 	beq	125164 <tcp_write+0x2cc>
  125148:	e3080768 	movw	r0, #34664	; 0x8768
  12514c:	e3400014 	movt	r0, #20
  125150:	ebff77ef 	bl	103114 <rt_kprintf>
  125154:	e30011e1 	movw	r1, #481	; 0x1e1
  125158:	e3080630 	movw	r0, #34352	; 0x8630
  12515c:	e3400014 	movt	r0, #20
  125160:	ebff97e2 	bl	10b0f0 <sys_arch_assert>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
  125164:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  125168:	e15b35be 	ldrh	r3, [fp, #-94]	; 0xffffffa2
  12516c:	e1520003 	cmp	r2, r3
  125170:	2a000121 	bcs	1255fc <tcp_write+0x764>
  125174:	e15b32ba 	ldrh	r3, [fp, #-42]	; 0xffffffd6
  125178:	e3530000 	cmp	r3, #0
  12517c:	0a00011e 	beq	1255fc <tcp_write+0x764>
  125180:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125184:	e1d330b8 	ldrh	r3, [r3, #8]
  125188:	e3530000 	cmp	r3, #0
  12518c:	0a00011a 	beq	1255fc <tcp_write+0x764>
      u16_t seglen = LWIP_MIN(space, len - pos);
  125190:	e15b25be 	ldrh	r2, [fp, #-94]	; 0xffffffa2
  125194:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  125198:	e0422003 	sub	r2, r2, r3
  12519c:	e15b32ba 	ldrh	r3, [fp, #-42]	; 0xffffffd6
  1251a0:	e1520003 	cmp	r2, r3
  1251a4:	b1a03002 	movlt	r3, r2
  1251a8:	a1a03003 	movge	r3, r3
  1251ac:	e14b34b6 	strh	r3, [fp, #-70]	; 0xffffffba
      seg = last_unsent;
  1251b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1251b4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
  1251b8:	e55b305f 	ldrb	r3, [fp, #-95]	; 0xffffffa1
  1251bc:	e2033001 	and	r3, r3, #1
  1251c0:	e3530000 	cmp	r3, #0
  1251c4:	0a00001f 	beq	125248 <tcp_write+0x3b0>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
  1251c8:	e24b0052 	sub	r0, fp, #82	; 0x52
  1251cc:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
  1251d0:	e15b14b6 	ldrh	r1, [fp, #-70]	; 0xffffffba
  1251d4:	e3a03001 	mov	r3, #1
  1251d8:	e58d3008 	str	r3, [sp, #8]
  1251dc:	e55b305f 	ldrb	r3, [fp, #-95]	; 0xffffffa1
  1251e0:	e58d3004 	str	r3, [sp, #4]
  1251e4:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  1251e8:	e58d3000 	str	r3, [sp]
  1251ec:	e1a03000 	mov	r3, r0
  1251f0:	e3a00004 	mov	r0, #4
  1251f4:	ebfffe67 	bl	124b98 <tcp_pbuf_prealloc>
  1251f8:	e50b0010 	str	r0, [fp, #-16]
  1251fc:	e51b3010 	ldr	r3, [fp, #-16]
  125200:	e3530000 	cmp	r3, #0
  125204:	0a0001cc 	beq	12593c <tcp_write+0xaa4>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
  125208:	e51b3010 	ldr	r3, [fp, #-16]
  12520c:	e5930004 	ldr	r0, [r3, #4]
  125210:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  125214:	e51b205c 	ldr	r2, [fp, #-92]	; 0xffffffa4
  125218:	e0823003 	add	r3, r2, r3
  12521c:	e15b24b6 	ldrh	r2, [fp, #-70]	; 0xffffffba
  125220:	e1a01003 	mov	r1, r3
  125224:	eb006eda 	bl	140d94 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
  125228:	e51b0010 	ldr	r0, [fp, #-16]
  12522c:	ebffd7a4 	bl	11b0c4 <pbuf_clen>
  125230:	e1a03000 	mov	r3, r0
  125234:	e1a02003 	mov	r2, r3
  125238:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  12523c:	e0823003 	add	r3, r2, r3
  125240:	e14b32b4 	strh	r3, [fp, #-36]	; 0xffffffdc
  125244:	ea000038 	b	12532c <tcp_write+0x494>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
  125248:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12524c:	e5933004 	ldr	r3, [r3, #4]
  125250:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
  125254:	ea000002 	b	125264 <tcp_write+0x3cc>
  125258:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12525c:	e5933000 	ldr	r3, [r3]
  125260:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
  125264:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125268:	e5933000 	ldr	r3, [r3]
  12526c:	e3530000 	cmp	r3, #0
  125270:	1afffff8 	bne	125258 <tcp_write+0x3c0>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
  125274:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125278:	e5d3300c 	ldrb	r3, [r3, #12]
  12527c:	e3530001 	cmp	r3, #1
  125280:	1a000014 	bne	1252d8 <tcp_write+0x440>
  125284:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125288:	e5933004 	ldr	r3, [r3, #4]
  12528c:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  125290:	e1d220ba 	ldrh	r2, [r2, #10]
  125294:	e0833002 	add	r3, r3, r2
  125298:	e51b205c 	ldr	r2, [fp, #-92]	; 0xffffffa4
  12529c:	e1520003 	cmp	r2, r3
  1252a0:	1a00000c 	bne	1252d8 <tcp_write+0x440>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
  1252a4:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  1252a8:	e3530000 	cmp	r3, #0
  1252ac:	0a000006 	beq	1252cc <tcp_write+0x434>
  1252b0:	e3080788 	movw	r0, #34696	; 0x8788
  1252b4:	e3400014 	movt	r0, #20
  1252b8:	ebff7795 	bl	103114 <rt_kprintf>
  1252bc:	e3a01f83 	mov	r1, #524	; 0x20c
  1252c0:	e3080630 	movw	r0, #34352	; 0x8630
  1252c4:	e3400014 	movt	r0, #20
  1252c8:	ebff9788 	bl	10b0f0 <sys_arch_assert>
          extendlen = seglen;
  1252cc:	e15b34b6 	ldrh	r3, [fp, #-70]	; 0xffffffba
  1252d0:	e14b32b8 	strh	r3, [fp, #-40]	; 0xffffffd8
  1252d4:	ea000014 	b	12532c <tcp_write+0x494>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
  1252d8:	e15b34b6 	ldrh	r3, [fp, #-70]	; 0xffffffba
  1252dc:	e3a02001 	mov	r2, #1
  1252e0:	e1a01003 	mov	r1, r3
  1252e4:	e3a00004 	mov	r0, #4
  1252e8:	ebffd3e9 	bl	11a294 <pbuf_alloc>
  1252ec:	e50b0010 	str	r0, [fp, #-16]
  1252f0:	e51b3010 	ldr	r3, [fp, #-16]
  1252f4:	e3530000 	cmp	r3, #0
  1252f8:	0a000191 	beq	125944 <tcp_write+0xaac>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
  1252fc:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  125300:	e51b205c 	ldr	r2, [fp, #-92]	; 0xffffffa4
  125304:	e0822003 	add	r2, r2, r3
  125308:	e51b3010 	ldr	r3, [fp, #-16]
  12530c:	e5832004 	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
  125310:	e51b0010 	ldr	r0, [fp, #-16]
  125314:	ebffd76a 	bl	11b0c4 <pbuf_clen>
  125318:	e1a03000 	mov	r3, r0
  12531c:	e1a02003 	mov	r2, r3
  125320:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  125324:	e0823003 	add	r3, r2, r3
  125328:	e14b32b4 	strh	r3, [fp, #-36]	; 0xffffffdc
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
  12532c:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  125330:	e15b34b6 	ldrh	r3, [fp, #-70]	; 0xffffffba
  125334:	e0823003 	add	r3, r2, r3
  125338:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
  12533c:	ea0000ae 	b	1255fc <tcp_write+0x764>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
  125340:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125344:	e1d336b8 	ldrh	r3, [r3, #104]	; 0x68
  125348:	e3530000 	cmp	r3, #0
  12534c:	0a0000aa 	beq	1255fc <tcp_write+0x764>
  125350:	e30807b4 	movw	r0, #34740	; 0x87b4
  125354:	e3400014 	movt	r0, #20
  125358:	ebff776d 	bl	103114 <rt_kprintf>
  12535c:	e3001225 	movw	r1, #549	; 0x225
  125360:	e3080630 	movw	r0, #34352	; 0x8630
  125364:	e3400014 	movt	r0, #20
  125368:	ebff9760 	bl	10b0f0 <sys_arch_assert>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
  12536c:	ea0000a2 	b	1255fc <tcp_write+0x764>
    struct pbuf *p;
    u16_t left = len - pos;
  125370:	e15b25be 	ldrh	r2, [fp, #-94]	; 0xffffffa2
  125374:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  125378:	e0423003 	sub	r3, r2, r3
  12537c:	e14b34b8 	strh	r3, [fp, #-72]	; 0xffffffb8
    u16_t max_len = mss_local - optlen;
  125380:	e55b303d 	ldrb	r3, [fp, #-61]	; 0xffffffc3
  125384:	e6ff3073 	uxth	r3, r3
  125388:	e15b24b0 	ldrh	r2, [fp, #-64]	; 0xffffffc0
  12538c:	e0423003 	sub	r3, r2, r3
  125390:	e14b34ba 	strh	r3, [fp, #-74]	; 0xffffffb6
    u16_t seglen = LWIP_MIN(left, max_len);
  125394:	e15b24ba 	ldrh	r2, [fp, #-74]	; 0xffffffb6
  125398:	e15b34b8 	ldrh	r3, [fp, #-72]	; 0xffffffb8
  12539c:	e1520003 	cmp	r2, r3
  1253a0:	31a03002 	movcc	r3, r2
  1253a4:	21a03003 	movcs	r3, r3
  1253a8:	e14b34bc 	strh	r3, [fp, #-76]	; 0xffffffb4
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
  1253ac:	e55b305f 	ldrb	r3, [fp, #-95]	; 0xffffffa1
  1253b0:	e2033001 	and	r3, r3, #1
  1253b4:	e3530000 	cmp	r3, #0
  1253b8:	0a00002e 	beq	125478 <tcp_write+0x5e0>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
  1253bc:	e55b303d 	ldrb	r3, [fp, #-61]	; 0xffffffc3
  1253c0:	e6ff2073 	uxth	r2, r3
  1253c4:	e15b34bc 	ldrh	r3, [fp, #-76]	; 0xffffffb4
  1253c8:	e0823003 	add	r3, r2, r3
  1253cc:	e6ff1073 	uxth	r1, r3
  1253d0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1253d4:	e3530000 	cmp	r3, #0
  1253d8:	03a03001 	moveq	r3, #1
  1253dc:	13a03000 	movne	r3, #0
  1253e0:	e6ef3073 	uxtb	r3, r3
  1253e4:	e24b0052 	sub	r0, fp, #82	; 0x52
  1253e8:	e15b24b0 	ldrh	r2, [fp, #-64]	; 0xffffffc0
  1253ec:	e58d3008 	str	r3, [sp, #8]
  1253f0:	e55b305f 	ldrb	r3, [fp, #-95]	; 0xffffffa1
  1253f4:	e58d3004 	str	r3, [sp, #4]
  1253f8:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  1253fc:	e58d3000 	str	r3, [sp]
  125400:	e1a03000 	mov	r3, r0
  125404:	e3a00000 	mov	r0, #0
  125408:	ebfffde2 	bl	124b98 <tcp_pbuf_prealloc>
  12540c:	e50b0034 	str	r0, [fp, #-52]	; 0xffffffcc
  125410:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  125414:	e3530000 	cmp	r3, #0
  125418:	0a00014b 	beq	12594c <tcp_write+0xab4>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
  12541c:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  125420:	e1d330ba 	ldrh	r3, [r3, #10]
  125424:	e15b24bc 	ldrh	r2, [fp, #-76]	; 0xffffffb4
  125428:	e1520003 	cmp	r2, r3
  12542c:	9a000006 	bls	12544c <tcp_write+0x5b4>
  125430:	e30807e4 	movw	r0, #34788	; 0x87e4
  125434:	e3400014 	movt	r0, #20
  125438:	ebff7735 	bl	103114 <rt_kprintf>
  12543c:	e3001241 	movw	r1, #577	; 0x241
  125440:	e3080630 	movw	r0, #34352	; 0x8630
  125444:	e3400014 	movt	r0, #20
  125448:	ebff9728 	bl	10b0f0 <sys_arch_assert>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
  12544c:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  125450:	e5932004 	ldr	r2, [r3, #4]
  125454:	e55b303d 	ldrb	r3, [fp, #-61]	; 0xffffffc3
  125458:	e0820003 	add	r0, r2, r3
  12545c:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  125460:	e51b205c 	ldr	r2, [fp, #-92]	; 0xffffffa4
  125464:	e0823003 	add	r3, r2, r3
  125468:	e15b24bc 	ldrh	r2, [fp, #-76]	; 0xffffffb4
  12546c:	e1a01003 	mov	r1, r3
  125470:	eb006e47 	bl	140d94 <memcpy>
  125474:	ea000027 	b	125518 <tcp_write+0x680>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
  125478:	e15b35b2 	ldrh	r3, [fp, #-82]	; 0xffffffae
  12547c:	e3530000 	cmp	r3, #0
  125480:	0a000006 	beq	1254a0 <tcp_write+0x608>
  125484:	e3080824 	movw	r0, #34852	; 0x8824
  125488:	e3400014 	movt	r0, #20
  12548c:	ebff7720 	bl	103114 <rt_kprintf>
  125490:	e300124b 	movw	r1, #587	; 0x24b
  125494:	e3080630 	movw	r0, #34352	; 0x8630
  125498:	e3400014 	movt	r0, #20
  12549c:	ebff9713 	bl	10b0f0 <sys_arch_assert>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
  1254a0:	e15b34bc 	ldrh	r3, [fp, #-76]	; 0xffffffb4
  1254a4:	e3a02001 	mov	r2, #1
  1254a8:	e1a01003 	mov	r1, r3
  1254ac:	e3a00000 	mov	r0, #0
  1254b0:	ebffd377 	bl	11a294 <pbuf_alloc>
  1254b4:	e50b0050 	str	r0, [fp, #-80]	; 0xffffffb0
  1254b8:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
  1254bc:	e3530000 	cmp	r3, #0
  1254c0:	0a000123 	beq	125954 <tcp_write+0xabc>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
  1254c4:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  1254c8:	e51b205c 	ldr	r2, [fp, #-92]	; 0xffffffa4
  1254cc:	e0822003 	add	r2, r2, r3
  1254d0:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
  1254d4:	e5832004 	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
  1254d8:	e55b303d 	ldrb	r3, [fp, #-61]	; 0xffffffc3
  1254dc:	e6ff3073 	uxth	r3, r3
  1254e0:	e3a02000 	mov	r2, #0
  1254e4:	e1a01003 	mov	r1, r3
  1254e8:	e3a00000 	mov	r0, #0
  1254ec:	ebffd368 	bl	11a294 <pbuf_alloc>
  1254f0:	e50b0034 	str	r0, [fp, #-52]	; 0xffffffcc
  1254f4:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  1254f8:	e3530000 	cmp	r3, #0
  1254fc:	1a000002 	bne	12550c <tcp_write+0x674>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
  125500:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
  125504:	ebffd669 	bl	11aeb0 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
  125508:	ea000114 	b	125960 <tcp_write+0xac8>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
  12550c:	e51b1050 	ldr	r1, [fp, #-80]	; 0xffffffb0
  125510:	e51b0034 	ldr	r0, [fp, #-52]	; 0xffffffcc
  125514:	ebffd71c 	bl	11b18c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
  125518:	e51b0034 	ldr	r0, [fp, #-52]	; 0xffffffcc
  12551c:	ebffd6e8 	bl	11b0c4 <pbuf_clen>
  125520:	e1a03000 	mov	r3, r0
  125524:	e1a02003 	mov	r2, r3
  125528:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  12552c:	e0823003 	add	r3, r2, r3
  125530:	e14b32b4 	strh	r3, [fp, #-36]	; 0xffffffdc

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
  125534:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  125538:	e3530016 	cmp	r3, #22
  12553c:	8a000003 	bhi	125550 <tcp_write+0x6b8>
  125540:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  125544:	e30f2ffc 	movw	r2, #65532	; 0xfffc
  125548:	e1530002 	cmp	r3, r2
  12554c:	9a000002 	bls	12555c <tcp_write+0x6c4>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
  125550:	e51b0034 	ldr	r0, [fp, #-52]	; 0xffffffcc
  125554:	ebffd655 	bl	11aeb0 <pbuf_free>
      goto memerr;
  125558:	ea000100 	b	125960 <tcp_write+0xac8>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
  12555c:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125560:	e593205c 	ldr	r2, [r3, #92]	; 0x5c
  125564:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  125568:	e0822003 	add	r2, r2, r3
  12556c:	e55b303e 	ldrb	r3, [fp, #-62]	; 0xffffffc2
  125570:	e58d3000 	str	r3, [sp]
  125574:	e1a03002 	mov	r3, r2
  125578:	e3a02000 	mov	r2, #0
  12557c:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  125580:	e51b0058 	ldr	r0, [fp, #-88]	; 0xffffffa8
  125584:	ebfffd02 	bl	124994 <tcp_create_segment>
  125588:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12558c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  125590:	e3530000 	cmp	r3, #0
  125594:	0a0000f0 	beq	12595c <tcp_write+0xac4>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
  125598:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12559c:	e3530000 	cmp	r3, #0
  1255a0:	1a000002 	bne	1255b0 <tcp_write+0x718>
      queue = seg;
  1255a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1255a8:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  1255ac:	ea00000c 	b	1255e4 <tcp_write+0x74c>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
  1255b0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1255b4:	e3530000 	cmp	r3, #0
  1255b8:	1a000006 	bne	1255d8 <tcp_write+0x740>
  1255bc:	e3080834 	movw	r0, #34868	; 0x8834
  1255c0:	e3400014 	movt	r0, #20
  1255c4:	ebff76d2 	bl	103114 <rt_kprintf>
  1255c8:	e3001285 	movw	r1, #645	; 0x285
  1255cc:	e3080630 	movw	r0, #34352	; 0x8630
  1255d0:	e3400014 	movt	r0, #20
  1255d4:	ebff96c5 	bl	10b0f0 <sys_arch_assert>
      prev_seg->next = seg;
  1255d8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1255dc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1255e0:	e5832000 	str	r2, [r3]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
  1255e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1255e8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
  1255ec:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  1255f0:	e15b34bc 	ldrh	r3, [fp, #-76]	; 0xffffffb4
  1255f4:	e0823003 	add	r3, r2, r3
  1255f8:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
  while (pos < len) {
  1255fc:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  125600:	e15b35be 	ldrh	r3, [fp, #-94]	; 0xffffffa2
  125604:	e1520003 	cmp	r2, r3
  125608:	3affff58 	bcc	125370 <tcp_write+0x4d8>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
  12560c:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  125610:	e3530000 	cmp	r3, #0
  125614:	0a00002b 	beq	1256c8 <tcp_write+0x830>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
  125618:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12561c:	e5933004 	ldr	r3, [r3, #4]
  125620:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
  125624:	ea00001d 	b	1256a0 <tcp_write+0x808>
      p->tot_len += oversize_used;
  125628:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12562c:	e1d320b8 	ldrh	r2, [r3, #8]
  125630:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  125634:	e0823003 	add	r3, r2, r3
  125638:	e6ff2073 	uxth	r2, r3
  12563c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  125640:	e1c320b8 	strh	r2, [r3, #8]
      if (p->next == NULL) {
  125644:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  125648:	e5933000 	ldr	r3, [r3]
  12564c:	e3530000 	cmp	r3, #0
  125650:	1a00000f 	bne	125694 <tcp_write+0x7fc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
  125654:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  125658:	e5933004 	ldr	r3, [r3, #4]
  12565c:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
  125660:	e1d220ba 	ldrh	r2, [r2, #10]
  125664:	e0833002 	add	r3, r3, r2
  125668:	e15b22b6 	ldrh	r2, [fp, #-38]	; 0xffffffda
  12566c:	e51b105c 	ldr	r1, [fp, #-92]	; 0xffffffa4
  125670:	e1a00003 	mov	r0, r3
  125674:	eb006dc6 	bl	140d94 <memcpy>
        p->len += oversize_used;
  125678:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12567c:	e1d320ba 	ldrh	r2, [r3, #10]
  125680:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  125684:	e0823003 	add	r3, r2, r3
  125688:	e6ff2073 	uxth	r2, r3
  12568c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  125690:	e1c320ba 	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
  125694:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  125698:	e5933000 	ldr	r3, [r3]
  12569c:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
  1256a0:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1256a4:	e3530000 	cmp	r3, #0
  1256a8:	1affffde 	bne	125628 <tcp_write+0x790>
      }
    }
    last_unsent->len += oversize_used;
  1256ac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1256b0:	e1d320b8 	ldrh	r2, [r3, #8]
  1256b4:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  1256b8:	e0823003 	add	r3, r2, r3
  1256bc:	e6ff2073 	uxth	r2, r3
  1256c0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1256c4:	e1c320b8 	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
  1256c8:	e15b25b2 	ldrh	r2, [fp, #-82]	; 0xffffffae
  1256cc:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  1256d0:	e1c326b8 	strh	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
  1256d4:	e51b3010 	ldr	r3, [fp, #-16]
  1256d8:	e3530000 	cmp	r3, #0
  1256dc:	0a000017 	beq	125740 <tcp_write+0x8a8>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
  1256e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1256e4:	e3530000 	cmp	r3, #0
  1256e8:	1a000006 	bne	125708 <tcp_write+0x870>
  1256ec:	e3080848 	movw	r0, #34888	; 0x8848
  1256f0:	e3400014 	movt	r0, #20
  1256f4:	ebff7686 	bl	103114 <rt_kprintf>
  1256f8:	e30012bb 	movw	r1, #699	; 0x2bb
  1256fc:	e3080630 	movw	r0, #34352	; 0x8630
  125700:	e3400014 	movt	r0, #20
  125704:	ebff9679 	bl	10b0f0 <sys_arch_assert>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
  125708:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12570c:	e5933004 	ldr	r3, [r3, #4]
  125710:	e51b1010 	ldr	r1, [fp, #-16]
  125714:	e1a00003 	mov	r0, r3
  125718:	ebffd69b 	bl	11b18c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
  12571c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125720:	e1d320b8 	ldrh	r2, [r3, #8]
  125724:	e51b3010 	ldr	r3, [fp, #-16]
  125728:	e1d330b8 	ldrh	r3, [r3, #8]
  12572c:	e0823003 	add	r3, r2, r3
  125730:	e6ff2073 	uxth	r2, r3
  125734:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125738:	e1c320b8 	strh	r2, [r3, #8]
  12573c:	ea000037 	b	125820 <tcp_write+0x988>
  } else if (extendlen > 0) {
  125740:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  125744:	e3530000 	cmp	r3, #0
  125748:	0a000034 	beq	125820 <tcp_write+0x988>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
  12574c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125750:	e3530000 	cmp	r3, #0
  125754:	0a000003 	beq	125768 <tcp_write+0x8d0>
  125758:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12575c:	e5933004 	ldr	r3, [r3, #4]
  125760:	e3530000 	cmp	r3, #0
  125764:	1a000006 	bne	125784 <tcp_write+0x8ec>
  125768:	e3080880 	movw	r0, #34944	; 0x8880
  12576c:	e3400014 	movt	r0, #20
  125770:	ebff7667 	bl	103114 <rt_kprintf>
  125774:	e30012c1 	movw	r1, #705	; 0x2c1
  125778:	e3080630 	movw	r0, #34352	; 0x8630
  12577c:	e3400014 	movt	r0, #20
  125780:	ebff965a 	bl	10b0f0 <sys_arch_assert>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
  125784:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125788:	e5933004 	ldr	r3, [r3, #4]
  12578c:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  125790:	ea000009 	b	1257bc <tcp_write+0x924>
      p->tot_len += extendlen;
  125794:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  125798:	e1d320b8 	ldrh	r2, [r3, #8]
  12579c:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  1257a0:	e0823003 	add	r3, r2, r3
  1257a4:	e6ff2073 	uxth	r2, r3
  1257a8:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  1257ac:	e1c320b8 	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
  1257b0:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  1257b4:	e5933000 	ldr	r3, [r3]
  1257b8:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  1257bc:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  1257c0:	e5933000 	ldr	r3, [r3]
  1257c4:	e3530000 	cmp	r3, #0
  1257c8:	1afffff1 	bne	125794 <tcp_write+0x8fc>
    }
    p->tot_len += extendlen;
  1257cc:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  1257d0:	e1d320b8 	ldrh	r2, [r3, #8]
  1257d4:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  1257d8:	e0823003 	add	r3, r2, r3
  1257dc:	e6ff2073 	uxth	r2, r3
  1257e0:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  1257e4:	e1c320b8 	strh	r2, [r3, #8]
    p->len += extendlen;
  1257e8:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  1257ec:	e1d320ba 	ldrh	r2, [r3, #10]
  1257f0:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  1257f4:	e0823003 	add	r3, r2, r3
  1257f8:	e6ff2073 	uxth	r2, r3
  1257fc:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  125800:	e1c320ba 	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
  125804:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125808:	e1d320b8 	ldrh	r2, [r3, #8]
  12580c:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  125810:	e0823003 	add	r3, r2, r3
  125814:	e6ff2073 	uxth	r2, r3
  125818:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12581c:	e1c320b8 	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
  125820:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125824:	e3530000 	cmp	r3, #0
  125828:	1a000003 	bne	12583c <tcp_write+0x9a4>
    pcb->unsent = queue;
  12582c:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125830:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  125834:	e583206c 	str	r2, [r3, #108]	; 0x6c
  125838:	ea000002 	b	125848 <tcp_write+0x9b0>
  } else {
    last_unsent->next = queue;
  12583c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125840:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  125844:	e5832000 	str	r2, [r3]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
  125848:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  12584c:	e593205c 	ldr	r2, [r3, #92]	; 0x5c
  125850:	e15b35be 	ldrh	r3, [fp, #-94]	; 0xffffffa2
  125854:	e0822003 	add	r2, r2, r3
  125858:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  12585c:	e583205c 	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
  125860:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125864:	e1d326b4 	ldrh	r2, [r3, #100]	; 0x64
  125868:	e15b35be 	ldrh	r3, [fp, #-94]	; 0xffffffa2
  12586c:	e0423003 	sub	r3, r2, r3
  125870:	e6ff2073 	uxth	r2, r3
  125874:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125878:	e1c326b4 	strh	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
  12587c:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125880:	e15b22b4 	ldrh	r2, [fp, #-36]	; 0xffffffdc
  125884:	e1c326b6 	strh	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
  125888:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  12588c:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  125890:	e3530000 	cmp	r3, #0
  125894:	0a00000e 	beq	1258d4 <tcp_write+0xa3c>
    LWIP_ASSERT("tcp_write: valid queue length",
  125898:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  12589c:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  1258a0:	e3530000 	cmp	r3, #0
  1258a4:	1a00000a 	bne	1258d4 <tcp_write+0xa3c>
  1258a8:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  1258ac:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  1258b0:	e3530000 	cmp	r3, #0
  1258b4:	1a000006 	bne	1258d4 <tcp_write+0xa3c>
  1258b8:	e30808b8 	movw	r0, #35000	; 0x88b8
  1258bc:	e3400014 	movt	r0, #20
  1258c0:	ebff7613 	bl	103114 <rt_kprintf>
  1258c4:	e30012ed 	movw	r1, #749	; 0x2ed
  1258c8:	e3080630 	movw	r0, #34352	; 0x8630
  1258cc:	e3400014 	movt	r0, #20
  1258d0:	ebff9606 	bl	10b0f0 <sys_arch_assert>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
  1258d4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1258d8:	e3530000 	cmp	r3, #0
  1258dc:	0a000014 	beq	125934 <tcp_write+0xa9c>
  1258e0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1258e4:	e593300c 	ldr	r3, [r3, #12]
  1258e8:	e3530000 	cmp	r3, #0
  1258ec:	0a000010 	beq	125934 <tcp_write+0xa9c>
  1258f0:	e55b305f 	ldrb	r3, [fp, #-95]	; 0xffffffa1
  1258f4:	e2033002 	and	r3, r3, #2
  1258f8:	e3530000 	cmp	r3, #0
  1258fc:	1a00000c 	bne	125934 <tcp_write+0xa9c>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
  125900:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  125904:	e593300c 	ldr	r3, [r3, #12]
  125908:	e1d330bc 	ldrh	r3, [r3, #12]
  12590c:	e6ff4073 	uxth	r4, r3
  125910:	e3a00008 	mov	r0, #8
  125914:	ebffc32e 	bl	1165d4 <lwip_htons>
  125918:	e1a03000 	mov	r3, r0
  12591c:	e1a02003 	mov	r2, r3
  125920:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  125924:	e593300c 	ldr	r3, [r3, #12]
  125928:	e1842002 	orr	r2, r4, r2
  12592c:	e6ff2072 	uxth	r2, r2
  125930:	e1c320bc 	strh	r2, [r3, #12]
  }

  return ERR_OK;
  125934:	e3a03000 	mov	r3, #0
  125938:	ea000035 	b	125a14 <tcp_write+0xb7c>
          goto memerr;
  12593c:	e320f000 	nop	{0}
  125940:	ea000006 	b	125960 <tcp_write+0xac8>
            goto memerr;
  125944:	e320f000 	nop	{0}
  125948:	ea000004 	b	125960 <tcp_write+0xac8>
        goto memerr;
  12594c:	e320f000 	nop	{0}
  125950:	ea000002 	b	125960 <tcp_write+0xac8>
        goto memerr;
  125954:	e320f000 	nop	{0}
  125958:	ea000000 	b	125960 <tcp_write+0xac8>
      goto memerr;
  12595c:	e320f000 	nop	{0}
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
  125960:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125964:	e5d3301e 	ldrb	r3, [r3, #30]
  125968:	e1e03c83 	mvn	r3, r3, lsl #25
  12596c:	e1e03ca3 	mvn	r3, r3, lsr #25
  125970:	e6ef2073 	uxtb	r2, r3
  125974:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125978:	e5c3201e 	strb	r2, [r3, #30]
  TCP_STATS_INC(tcp.memerr);
  12597c:	e30c3a30 	movw	r3, #51760	; 0xca30
  125980:	e3403015 	movt	r3, #21
  125984:	e1d33bb8 	ldrh	r3, [r3, #184]	; 0xb8
  125988:	e2833001 	add	r3, r3, #1
  12598c:	e6ff2073 	uxth	r2, r3
  125990:	e30c3a30 	movw	r3, #51760	; 0xca30
  125994:	e3403015 	movt	r3, #21
  125998:	e1c32bb8 	strh	r2, [r3, #184]	; 0xb8

  if (concat_p != NULL) {
  12599c:	e51b3010 	ldr	r3, [fp, #-16]
  1259a0:	e3530000 	cmp	r3, #0
  1259a4:	0a000001 	beq	1259b0 <tcp_write+0xb18>
    pbuf_free(concat_p);
  1259a8:	e51b0010 	ldr	r0, [fp, #-16]
  1259ac:	ebffd53f 	bl	11aeb0 <pbuf_free>
  }
  if (queue != NULL) {
  1259b0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1259b4:	e3530000 	cmp	r3, #0
  1259b8:	0a000001 	beq	1259c4 <tcp_write+0xb2c>
    tcp_segs_free(queue);
  1259bc:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1259c0:	ebffe69c 	bl	11f438 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
  1259c4:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  1259c8:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  1259cc:	e3530000 	cmp	r3, #0
  1259d0:	0a00000e 	beq	125a10 <tcp_write+0xb78>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
  1259d4:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  1259d8:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  1259dc:	e3530000 	cmp	r3, #0
  1259e0:	1a00000a 	bne	125a10 <tcp_write+0xb78>
  1259e4:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  1259e8:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  1259ec:	e3530000 	cmp	r3, #0
  1259f0:	1a000006 	bne	125a10 <tcp_write+0xb78>
  1259f4:	e30808b8 	movw	r0, #35000	; 0x88b8
  1259f8:	e3400014 	movt	r0, #20
  1259fc:	ebff75c4 	bl	103114 <rt_kprintf>
  125a00:	e3001302 	movw	r1, #770	; 0x302
  125a04:	e3080630 	movw	r0, #34352	; 0x8630
  125a08:	e3400014 	movt	r0, #20
  125a0c:	ebff95b7 	bl	10b0f0 <sys_arch_assert>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
  125a10:	e3e03000 	mvn	r3, #0
}
  125a14:	e1a00003 	mov	r0, r3
  125a18:	e24bd008 	sub	sp, fp, #8
  125a1c:	e8bd8810 	pop	{r4, fp, pc}

00125a20 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
  125a20:	e92d4800 	push	{fp, lr}
  125a24:	e28db004 	add	fp, sp, #4
  125a28:	e24dd028 	sub	sp, sp, #40	; 0x28
  125a2c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  125a30:	e1a03001 	mov	r3, r1
  125a34:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
  125a38:	e3a03000 	mov	r3, #0
  125a3c:	e54b3005 	strb	r3, [fp, #-5]
  u8_t optlen = 0;
  125a40:	e3a03000 	mov	r3, #0
  125a44:	e54b300d 	strb	r3, [fp, #-13]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
  125a48:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  125a4c:	e2033003 	and	r3, r3, #3
  125a50:	e3530000 	cmp	r3, #0
  125a54:	1a000006 	bne	125a74 <tcp_enqueue_flags+0x54>
  125a58:	e30808d8 	movw	r0, #35032	; 0x88d8
  125a5c:	e3400014 	movt	r0, #20
  125a60:	ebff75ab 	bl	103114 <rt_kprintf>
  125a64:	e300131b 	movw	r1, #795	; 0x31b
  125a68:	e3080630 	movw	r0, #34352	; 0x8630
  125a6c:	e3400014 	movt	r0, #20
  125a70:	ebff959e 	bl	10b0f0 <sys_arch_assert>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
  125a74:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125a78:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  125a7c:	e3530015 	cmp	r3, #21
  125a80:	8a000004 	bhi	125a98 <tcp_enqueue_flags+0x78>
  125a84:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125a88:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  125a8c:	e30f2ffc 	movw	r2, #65532	; 0xfffc
  125a90:	e1530002 	cmp	r3, r2
  125a94:	9a000014 	bls	125aec <tcp_enqueue_flags+0xcc>
      ((flags & TCP_FIN) == 0)) {
  125a98:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  125a9c:	e2033001 	and	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
  125aa0:	e3530000 	cmp	r3, #0
  125aa4:	1a000010 	bne	125aec <tcp_enqueue_flags+0xcc>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
  125aa8:	e30c3a30 	movw	r3, #51760	; 0xca30
  125aac:	e3403015 	movt	r3, #21
  125ab0:	e1d33bb8 	ldrh	r3, [r3, #184]	; 0xb8
  125ab4:	e2833001 	add	r3, r3, #1
  125ab8:	e6ff2073 	uxth	r2, r3
  125abc:	e30c3a30 	movw	r3, #51760	; 0xca30
  125ac0:	e3403015 	movt	r3, #21
  125ac4:	e1c32bb8 	strh	r2, [r3, #184]	; 0xb8
    pcb->flags |= TF_NAGLEMEMERR;
  125ac8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125acc:	e5d3301e 	ldrb	r3, [r3, #30]
  125ad0:	e1e03c83 	mvn	r3, r3, lsl #25
  125ad4:	e1e03ca3 	mvn	r3, r3, lsr #25
  125ad8:	e6ef2073 	uxtb	r2, r3
  125adc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125ae0:	e5c3201e 	strb	r2, [r3, #30]
    return ERR_MEM;
  125ae4:	e3e03000 	mvn	r3, #0
  125ae8:	ea0000b7 	b	125dcc <tcp_enqueue_flags+0x3ac>
  }

  if (flags & TCP_SYN) {
  125aec:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  125af0:	e2033002 	and	r3, r3, #2
  125af4:	e3530000 	cmp	r3, #0
  125af8:	0a000001 	beq	125b04 <tcp_enqueue_flags+0xe4>
    optflags = TF_SEG_OPTS_MSS;
  125afc:	e3a03001 	mov	r3, #1
  125b00:	e54b3005 	strb	r3, [fp, #-5]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
  125b04:	e55b3005 	ldrb	r3, [fp, #-5]
  125b08:	e1a03103 	lsl	r3, r3, #2
  125b0c:	e6ef3073 	uxtb	r3, r3
  125b10:	e2033004 	and	r3, r3, #4
  125b14:	e54b300d 	strb	r3, [fp, #-13]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
  125b18:	e55b300d 	ldrb	r3, [fp, #-13]
  125b1c:	e6ff3073 	uxth	r3, r3
  125b20:	e3a02000 	mov	r2, #0
  125b24:	e1a01003 	mov	r1, r3
  125b28:	e3a00000 	mov	r0, #0
  125b2c:	ebffd1d8 	bl	11a294 <pbuf_alloc>
  125b30:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  125b34:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125b38:	e3530000 	cmp	r3, #0
  125b3c:	1a000010 	bne	125b84 <tcp_enqueue_flags+0x164>
    pcb->flags |= TF_NAGLEMEMERR;
  125b40:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125b44:	e5d3301e 	ldrb	r3, [r3, #30]
  125b48:	e1e03c83 	mvn	r3, r3, lsl #25
  125b4c:	e1e03ca3 	mvn	r3, r3, lsr #25
  125b50:	e6ef2073 	uxtb	r2, r3
  125b54:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125b58:	e5c3201e 	strb	r2, [r3, #30]
    TCP_STATS_INC(tcp.memerr);
  125b5c:	e30c3a30 	movw	r3, #51760	; 0xca30
  125b60:	e3403015 	movt	r3, #21
  125b64:	e1d33bb8 	ldrh	r3, [r3, #184]	; 0xb8
  125b68:	e2833001 	add	r3, r3, #1
  125b6c:	e6ff2073 	uxth	r2, r3
  125b70:	e30c3a30 	movw	r3, #51760	; 0xca30
  125b74:	e3403015 	movt	r3, #21
  125b78:	e1c32bb8 	strh	r2, [r3, #184]	; 0xb8
    return ERR_MEM;
  125b7c:	e3e03000 	mvn	r3, #0
  125b80:	ea000091 	b	125dcc <tcp_enqueue_flags+0x3ac>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
  125b84:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125b88:	e1d320ba 	ldrh	r2, [r3, #10]
  125b8c:	e55b300d 	ldrb	r3, [fp, #-13]
  125b90:	e6ff3073 	uxth	r3, r3
  125b94:	e1520003 	cmp	r2, r3
  125b98:	2a000006 	bcs	125bb8 <tcp_enqueue_flags+0x198>
  125b9c:	e3080930 	movw	r0, #35120	; 0x8930
  125ba0:	e3400014 	movt	r0, #20
  125ba4:	ebff755a 	bl	103114 <rt_kprintf>
  125ba8:	e3001341 	movw	r1, #833	; 0x341
  125bac:	e3080630 	movw	r0, #34352	; 0x8630
  125bb0:	e3400014 	movt	r0, #20
  125bb4:	ebff954d 	bl	10b0f0 <sys_arch_assert>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
  125bb8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125bbc:	e593105c 	ldr	r1, [r3, #92]	; 0x5c
  125bc0:	e55b2021 	ldrb	r2, [fp, #-33]	; 0xffffffdf
  125bc4:	e55b3005 	ldrb	r3, [fp, #-5]
  125bc8:	e58d3000 	str	r3, [sp]
  125bcc:	e1a03001 	mov	r3, r1
  125bd0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  125bd4:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  125bd8:	ebfffb6d 	bl	124994 <tcp_create_segment>
  125bdc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  125be0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  125be4:	e3530000 	cmp	r3, #0
  125be8:	1a000010 	bne	125c30 <tcp_enqueue_flags+0x210>
    pcb->flags |= TF_NAGLEMEMERR;
  125bec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125bf0:	e5d3301e 	ldrb	r3, [r3, #30]
  125bf4:	e1e03c83 	mvn	r3, r3, lsl #25
  125bf8:	e1e03ca3 	mvn	r3, r3, lsr #25
  125bfc:	e6ef2073 	uxtb	r2, r3
  125c00:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125c04:	e5c3201e 	strb	r2, [r3, #30]
    TCP_STATS_INC(tcp.memerr);
  125c08:	e30c3a30 	movw	r3, #51760	; 0xca30
  125c0c:	e3403015 	movt	r3, #21
  125c10:	e1d33bb8 	ldrh	r3, [r3, #184]	; 0xb8
  125c14:	e2833001 	add	r3, r3, #1
  125c18:	e6ff2073 	uxth	r2, r3
  125c1c:	e30c3a30 	movw	r3, #51760	; 0xca30
  125c20:	e3403015 	movt	r3, #21
  125c24:	e1c32bb8 	strh	r2, [r3, #184]	; 0xb8
    return ERR_MEM;
  125c28:	e3e03000 	mvn	r3, #0
  125c2c:	ea000066 	b	125dcc <tcp_enqueue_flags+0x3ac>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
  125c30:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  125c34:	e593300c 	ldr	r3, [r3, #12]
  125c38:	e2033003 	and	r3, r3, #3
  125c3c:	e3530000 	cmp	r3, #0
  125c40:	0a000006 	beq	125c60 <tcp_enqueue_flags+0x240>
  125c44:	e308096c 	movw	r0, #35180	; 0x896c
  125c48:	e3400014 	movt	r0, #20
  125c4c:	ebff7530 	bl	103114 <rt_kprintf>
  125c50:	e3001349 	movw	r1, #841	; 0x349
  125c54:	e3080630 	movw	r0, #34352	; 0x8630
  125c58:	e3400014 	movt	r0, #20
  125c5c:	ebff9523 	bl	10b0f0 <sys_arch_assert>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
  125c60:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  125c64:	e1d330b8 	ldrh	r3, [r3, #8]
  125c68:	e3530000 	cmp	r3, #0
  125c6c:	0a000006 	beq	125c8c <tcp_enqueue_flags+0x26c>
  125c70:	e3080984 	movw	r0, #35204	; 0x8984
  125c74:	e3400014 	movt	r0, #20
  125c78:	ebff7525 	bl	103114 <rt_kprintf>
  125c7c:	e300134a 	movw	r1, #842	; 0x34a
  125c80:	e3080630 	movw	r0, #34352	; 0x8630
  125c84:	e3400014 	movt	r0, #20
  125c88:	ebff9518 	bl	10b0f0 <sys_arch_assert>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
  125c8c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125c90:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  125c94:	e3530000 	cmp	r3, #0
  125c98:	1a000003 	bne	125cac <tcp_enqueue_flags+0x28c>
    pcb->unsent = seg;
  125c9c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125ca0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  125ca4:	e583206c 	str	r2, [r3, #108]	; 0x6c
  125ca8:	ea00000d 	b	125ce4 <tcp_enqueue_flags+0x2c4>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
  125cac:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125cb0:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  125cb4:	e50b300c 	str	r3, [fp, #-12]
  125cb8:	ea000002 	b	125cc8 <tcp_enqueue_flags+0x2a8>
  125cbc:	e51b300c 	ldr	r3, [fp, #-12]
  125cc0:	e5933000 	ldr	r3, [r3]
  125cc4:	e50b300c 	str	r3, [fp, #-12]
  125cc8:	e51b300c 	ldr	r3, [fp, #-12]
  125ccc:	e5933000 	ldr	r3, [r3]
  125cd0:	e3530000 	cmp	r3, #0
  125cd4:	1afffff8 	bne	125cbc <tcp_enqueue_flags+0x29c>
    useg->next = seg;
  125cd8:	e51b300c 	ldr	r3, [fp, #-12]
  125cdc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  125ce0:	e5832000 	str	r2, [r3]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
  125ce4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125ce8:	e3a02000 	mov	r2, #0
  125cec:	e1c326b8 	strh	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
  125cf0:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  125cf4:	e2033002 	and	r3, r3, #2
  125cf8:	e3530000 	cmp	r3, #0
  125cfc:	1a000003 	bne	125d10 <tcp_enqueue_flags+0x2f0>
  125d00:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  125d04:	e2033001 	and	r3, r3, #1
  125d08:	e3530000 	cmp	r3, #0
  125d0c:	0a000004 	beq	125d24 <tcp_enqueue_flags+0x304>
    pcb->snd_lbb++;
  125d10:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125d14:	e593305c 	ldr	r3, [r3, #92]	; 0x5c
  125d18:	e2832001 	add	r2, r3, #1
  125d1c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125d20:	e583205c 	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
  125d24:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  125d28:	e2033001 	and	r3, r3, #1
  125d2c:	e3530000 	cmp	r3, #0
  125d30:	0a000005 	beq	125d4c <tcp_enqueue_flags+0x32c>
    pcb->flags |= TF_FIN;
  125d34:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125d38:	e5d3301e 	ldrb	r3, [r3, #30]
  125d3c:	e3833020 	orr	r3, r3, #32
  125d40:	e6ef2073 	uxtb	r2, r3
  125d44:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125d48:	e5c3201e 	strb	r2, [r3, #30]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
  125d4c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  125d50:	e5933004 	ldr	r3, [r3, #4]
  125d54:	e1a00003 	mov	r0, r3
  125d58:	ebffd4d9 	bl	11b0c4 <pbuf_clen>
  125d5c:	e1a03000 	mov	r3, r0
  125d60:	e1a02003 	mov	r2, r3
  125d64:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125d68:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  125d6c:	e0823003 	add	r3, r2, r3
  125d70:	e6ff2073 	uxth	r2, r3
  125d74:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125d78:	e1c326b6 	strh	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
  125d7c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125d80:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  125d84:	e3530000 	cmp	r3, #0
  125d88:	0a00000e 	beq	125dc8 <tcp_enqueue_flags+0x3a8>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
  125d8c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125d90:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  125d94:	e3530000 	cmp	r3, #0
  125d98:	1a00000a 	bne	125dc8 <tcp_enqueue_flags+0x3a8>
  125d9c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125da0:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  125da4:	e3530000 	cmp	r3, #0
  125da8:	1a000006 	bne	125dc8 <tcp_enqueue_flags+0x3a8>
  125dac:	e30809b0 	movw	r0, #35248	; 0x89b0
  125db0:	e3400014 	movt	r0, #20
  125db4:	ebff74d6 	bl	103114 <rt_kprintf>
  125db8:	e300136d 	movw	r1, #877	; 0x36d
  125dbc:	e3080630 	movw	r0, #34352	; 0x8630
  125dc0:	e3400014 	movt	r0, #20
  125dc4:	ebff94c9 	bl	10b0f0 <sys_arch_assert>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
  125dc8:	e3a03000 	mov	r3, #0
}
  125dcc:	e1a00003 	mov	r0, r3
  125dd0:	e24bd004 	sub	sp, fp, #4
  125dd4:	e8bd8800 	pop	{fp, pc}

00125dd8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
  125dd8:	e92d4810 	push	{r4, fp, lr}
  125ddc:	e28db008 	add	fp, sp, #8
  125de0:	e24dd02c 	sub	sp, sp, #44	; 0x2c
  125de4:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
  125de8:	e3a03000 	mov	r3, #0
  125dec:	e54b300e 	strb	r3, [fp, #-14]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
  125df0:	e55b300e 	ldrb	r3, [fp, #-14]
  125df4:	e6ff4073 	uxth	r4, r3
  125df8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125dfc:	e5933050 	ldr	r3, [r3, #80]	; 0x50
  125e00:	e1a00003 	mov	r0, r3
  125e04:	ebffc1fe 	bl	116604 <lwip_htonl>
  125e08:	e1a03000 	mov	r3, r0
  125e0c:	e3a02000 	mov	r2, #0
  125e10:	e1a01004 	mov	r1, r4
  125e14:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  125e18:	ebfffa36 	bl	1246f8 <tcp_output_alloc_header>
  125e1c:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  if (p == NULL) {
  125e20:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125e24:	e3530000 	cmp	r3, #0
  125e28:	1a000007 	bne	125e4c <tcp_send_empty_ack+0x74>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
  125e2c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125e30:	e5d3301e 	ldrb	r3, [r3, #30]
  125e34:	e3833003 	orr	r3, r3, #3
  125e38:	e6ef2073 	uxtb	r2, r3
  125e3c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125e40:	e5c3201e 	strb	r2, [r3, #30]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
  125e44:	e3e03001 	mvn	r3, #1
  125e48:	ea000040 	b	125f50 <tcp_send_empty_ack+0x178>
  }
#if LWIP_TCP_TIMESTAMPS || CHECKSUM_GEN_TCP
  tcphdr = (struct tcp_hdr *)p->payload;
  125e4c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125e50:	e5933004 	ldr	r3, [r3, #4]
  125e54:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
  125e58:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125e5c:	e2833004 	add	r3, r3, #4
  125e60:	e1a00003 	mov	r0, r3
  125e64:	eb002cca 	bl	131194 <ip4_route>
  125e68:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
  if (netif == NULL) {
  125e6c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  125e70:	e3530000 	cmp	r3, #0
  125e74:	1a000002 	bne	125e84 <tcp_send_empty_ack+0xac>
    err = ERR_RTE;
  125e78:	e3e03003 	mvn	r3, #3
  125e7c:	e54b300d 	strb	r3, [fp, #-13]
  125e80:	ea00001f 	b	125f04 <tcp_send_empty_ack+0x12c>
  } else {
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  125e84:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125e88:	e1d320b8 	ldrh	r2, [r3, #8]
        &pcb->local_ip, &pcb->remote_ip);
  125e8c:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  125e90:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125e94:	e2833004 	add	r3, r3, #4
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  125e98:	e58d3000 	str	r3, [sp]
  125e9c:	e1a03001 	mov	r3, r1
  125ea0:	e3a01006 	mov	r1, #6
  125ea4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  125ea8:	ebffc9e8 	bl	118650 <ip_chksum_pseudo>
  125eac:	e1a03000 	mov	r3, r0
  125eb0:	e1a02003 	mov	r2, r3
  125eb4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  125eb8:	e1c321b0 	strh	r2, [r3, #16]
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
  125ebc:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  125ec0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125ec4:	e2830004 	add	r0, r3, #4
  125ec8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125ecc:	e5d3c00a 	ldrb	ip, [r3, #10]
  125ed0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125ed4:	e5d33009 	ldrb	r3, [r3, #9]
  125ed8:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  125edc:	e58d2008 	str	r2, [sp, #8]
  125ee0:	e3a02006 	mov	r2, #6
  125ee4:	e58d2004 	str	r2, [sp, #4]
  125ee8:	e58d3000 	str	r3, [sp]
  125eec:	e1a0300c 	mov	r3, ip
  125ef0:	e1a02000 	mov	r2, r0
  125ef4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  125ef8:	eb002f7e 	bl	131cf8 <ip4_output_if>
  125efc:	e1a03000 	mov	r3, r0
  125f00:	e54b300d 	strb	r3, [fp, #-13]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
  125f04:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  125f08:	ebffd3e8 	bl	11aeb0 <pbuf_free>

  if (err != ERR_OK) {
  125f0c:	e15b30dd 	ldrsb	r3, [fp, #-13]
  125f10:	e3530000 	cmp	r3, #0
  125f14:	0a000006 	beq	125f34 <tcp_send_empty_ack+0x15c>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
  125f18:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125f1c:	e5d3301e 	ldrb	r3, [r3, #30]
  125f20:	e3833003 	orr	r3, r3, #3
  125f24:	e6ef2073 	uxtb	r2, r3
  125f28:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125f2c:	e5c3201e 	strb	r2, [r3, #30]
  125f30:	ea000005 	b	125f4c <tcp_send_empty_ack+0x174>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  125f34:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125f38:	e5d3301e 	ldrb	r3, [r3, #30]
  125f3c:	e3c33003 	bic	r3, r3, #3
  125f40:	e6ef2073 	uxtb	r2, r3
  125f44:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125f48:	e5c3201e 	strb	r2, [r3, #30]
  }

  return err;
  125f4c:	e15b30dd 	ldrsb	r3, [fp, #-13]
}
  125f50:	e1a00003 	mov	r0, r3
  125f54:	e24bd008 	sub	sp, fp, #8
  125f58:	e8bd8810 	pop	{r4, fp, pc}

00125f5c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
  125f5c:	e92d4830 	push	{r4, r5, fp, lr}
  125f60:	e28db00c 	add	fp, sp, #12
  125f64:	e24dd028 	sub	sp, sp, #40	; 0x28
  125f68:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
  125f6c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125f70:	e5933014 	ldr	r3, [r3, #20]
  125f74:	e3530001 	cmp	r3, #1
  125f78:	1a000006 	bne	125f98 <tcp_output+0x3c>
  125f7c:	e30809d8 	movw	r0, #35288	; 0x89d8
  125f80:	e3400014 	movt	r0, #20
  125f84:	ebff7462 	bl	103114 <rt_kprintf>
  125f88:	e30013ed 	movw	r1, #1005	; 0x3ed
  125f8c:	e3080630 	movw	r0, #34352	; 0x8630
  125f90:	e3400014 	movt	r0, #20
  125f94:	ebff9455 	bl	10b0f0 <sys_arch_assert>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
  125f98:	e30c3c34 	movw	r3, #52276	; 0xcc34
  125f9c:	e3403015 	movt	r3, #21
  125fa0:	e5933000 	ldr	r3, [r3]
  125fa4:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  125fa8:	e1520003 	cmp	r2, r3
  125fac:	1a000001 	bne	125fb8 <tcp_output+0x5c>
    return ERR_OK;
  125fb0:	e3a03000 	mov	r3, #0
  125fb4:	ea000196 	b	126614 <tcp_output+0x6b8>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
  125fb8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125fbc:	e1d326b0 	ldrh	r2, [r3, #96]	; 0x60
  125fc0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125fc4:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  125fc8:	e1520003 	cmp	r2, r3
  125fcc:	2a000002 	bcs	125fdc <tcp_output+0x80>
  125fd0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125fd4:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  125fd8:	ea000001 	b	125fe4 <tcp_output+0x88>
  125fdc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125fe0:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  125fe4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

  seg = pcb->unsent;
  125fe8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125fec:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  125ff0:	e50b3010 	str	r3, [fp, #-16]
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
  125ff4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125ff8:	e5d3301e 	ldrb	r3, [r3, #30]
  125ffc:	e2033002 	and	r3, r3, #2
  126000:	e3530000 	cmp	r3, #0
  126004:	0a000015 	beq	126060 <tcp_output+0x104>
  126008:	e51b3010 	ldr	r3, [fp, #-16]
  12600c:	e3530000 	cmp	r3, #0
  126010:	0a00000e 	beq	126050 <tcp_output+0xf4>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
  126014:	e51b3010 	ldr	r3, [fp, #-16]
  126018:	e593300c 	ldr	r3, [r3, #12]
  12601c:	e5933004 	ldr	r3, [r3, #4]
  126020:	e1a00003 	mov	r0, r3
  126024:	ebffc176 	bl	116604 <lwip_htonl>
  126028:	e1a02000 	mov	r2, r0
  12602c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126030:	e5933048 	ldr	r3, [r3, #72]	; 0x48
  126034:	e0423003 	sub	r3, r2, r3
  126038:	e51b2010 	ldr	r2, [fp, #-16]
  12603c:	e1d220b8 	ldrh	r2, [r2, #8]
  126040:	e0833002 	add	r3, r3, r2
     (seg == NULL ||
  126044:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  126048:	e1520003 	cmp	r2, r3
  12604c:	2a000003 	bcs	126060 <tcp_output+0x104>
     return tcp_send_empty_ack(pcb);
  126050:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  126054:	ebffff5f 	bl	125dd8 <tcp_send_empty_ack>
  126058:	e1a03000 	mov	r3, r0
  12605c:	ea00016c 	b	126614 <tcp_output+0x6b8>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
  126060:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126064:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  126068:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  if (useg != NULL) {
  12606c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126070:	e3530000 	cmp	r3, #0
  126074:	0a000007 	beq	126098 <tcp_output+0x13c>
    for (; useg->next != NULL; useg = useg->next);
  126078:	ea000002 	b	126088 <tcp_output+0x12c>
  12607c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126080:	e5933000 	ldr	r3, [r3]
  126084:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  126088:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12608c:	e5933000 	ldr	r3, [r3]
  126090:	e3530000 	cmp	r3, #0
  126094:	1afffff8 	bne	12607c <tcp_output+0x120>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
  126098:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12609c:	e2833004 	add	r3, r3, #4
  1260a0:	e1a00003 	mov	r0, r3
  1260a4:	eb002c3a 	bl	131194 <ip4_route>
  1260a8:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  if (netif == NULL) {
  1260ac:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1260b0:	e3530000 	cmp	r3, #0
  1260b4:	1a000001 	bne	1260c0 <tcp_output+0x164>
    return ERR_RTE;
  1260b8:	e3e03003 	mvn	r3, #3
  1260bc:	ea000154 	b	126614 <tcp_output+0x6b8>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
  1260c0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1260c4:	e3530000 	cmp	r3, #0
  1260c8:	0a000003 	beq	1260dc <tcp_output+0x180>
  1260cc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1260d0:	e5933000 	ldr	r3, [r3]
  1260d4:	e3530000 	cmp	r3, #0
  1260d8:	1a000010 	bne	126120 <tcp_output+0x1c4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
  1260dc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1260e0:	e3530000 	cmp	r3, #0
  1260e4:	0a000002 	beq	1260f4 <tcp_output+0x198>
  1260e8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1260ec:	e2833004 	add	r3, r3, #4
  1260f0:	ea000000 	b	1260f8 <tcp_output+0x19c>
  1260f4:	e3a03000 	mov	r3, #0
  1260f8:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    if (local_ip == NULL) {
  1260fc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126100:	e3530000 	cmp	r3, #0
  126104:	1a000001 	bne	126110 <tcp_output+0x1b4>
      return ERR_RTE;
  126108:	e3e03003 	mvn	r3, #3
  12610c:	ea000140 	b	126614 <tcp_output+0x6b8>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
  126110:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126114:	e5932000 	ldr	r2, [r3]
  126118:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12611c:	e5832000 	str	r2, [r3]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
  126120:	e51b3010 	ldr	r3, [fp, #-16]
  126124:	e3530000 	cmp	r3, #0
  126128:	0a000113 	beq	12657c <tcp_output+0x620>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
  12612c:	e51b3010 	ldr	r3, [fp, #-16]
  126130:	e593300c 	ldr	r3, [r3, #12]
  126134:	e5933004 	ldr	r3, [r3, #4]
  126138:	e1a00003 	mov	r0, r3
  12613c:	ebffc130 	bl	116604 <lwip_htonl>
  126140:	e1a02000 	mov	r2, r0
  126144:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126148:	e5933048 	ldr	r3, [r3, #72]	; 0x48
  12614c:	e0423003 	sub	r3, r2, r3
  126150:	e51b2010 	ldr	r2, [fp, #-16]
  126154:	e1d220b8 	ldrh	r2, [r2, #8]
  126158:	e0833002 	add	r3, r3, r2
  if (seg != NULL &&
  12615c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  126160:	e1520003 	cmp	r2, r3
  126164:	2a000104 	bcs	12657c <tcp_output+0x620>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
  126168:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12616c:	e3530000 	cmp	r3, #0
  126170:	0a000101 	beq	12657c <tcp_output+0x620>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
  126174:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126178:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  12617c:	e1a02003 	mov	r2, r3
  126180:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  126184:	e1530002 	cmp	r3, r2
  126188:	1a0000fb 	bne	12657c <tcp_output+0x620>
  12618c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126190:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  126194:	e3530000 	cmp	r3, #0
  126198:	1a0000f7 	bne	12657c <tcp_output+0x620>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
  12619c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1261a0:	e5d330a1 	ldrb	r3, [r3, #161]	; 0xa1
  1261a4:	e3530000 	cmp	r3, #0
  1261a8:	1a000106 	bne	1265c8 <tcp_output+0x66c>
      pcb->persist_cnt = 0;
  1261ac:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1261b0:	e3a02000 	mov	r2, #0
  1261b4:	e5c320a0 	strb	r2, [r3, #160]	; 0xa0
      pcb->persist_backoff = 1;
  1261b8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1261bc:	e3a02001 	mov	r2, #1
  1261c0:	e5c320a1 	strb	r2, [r3, #161]	; 0xa1
    }
    goto output_done;
  1261c4:	ea0000ff 	b	1265c8 <tcp_output+0x66c>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
  1261c8:	e51b3010 	ldr	r3, [fp, #-16]
  1261cc:	e593300c 	ldr	r3, [r3, #12]
  1261d0:	e1d330bc 	ldrh	r3, [r3, #12]
  1261d4:	e6ff3073 	uxth	r3, r3
  1261d8:	e1a00003 	mov	r0, r3
  1261dc:	ebffc0fc 	bl	1165d4 <lwip_htons>
  1261e0:	e1a03000 	mov	r3, r0
  1261e4:	e2033004 	and	r3, r3, #4
  1261e8:	e3530000 	cmp	r3, #0
  1261ec:	0a000006 	beq	12620c <tcp_output+0x2b0>
  1261f0:	e3080a00 	movw	r0, #35328	; 0x8a00
  1261f4:	e3400014 	movt	r0, #20
  1261f8:	ebff73c5 	bl	103114 <rt_kprintf>
  1261fc:	e3001446 	movw	r1, #1094	; 0x446
  126200:	e3080630 	movw	r0, #34352	; 0x8630
  126204:	e3400014 	movt	r0, #20
  126208:	ebff93b8 	bl	10b0f0 <sys_arch_assert>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
  12620c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126210:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  126214:	e3530000 	cmp	r3, #0
  126218:	0a00001c 	beq	126290 <tcp_output+0x334>
  12621c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126220:	e5d3301e 	ldrb	r3, [r3, #30]
  126224:	e2033044 	and	r3, r3, #68	; 0x44
  126228:	e3530000 	cmp	r3, #0
  12622c:	1a000017 	bne	126290 <tcp_output+0x334>
  126230:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126234:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  126238:	e3530000 	cmp	r3, #0
  12623c:	0a00000b 	beq	126270 <tcp_output+0x314>
  126240:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126244:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  126248:	e5933000 	ldr	r3, [r3]
  12624c:	e3530000 	cmp	r3, #0
  126250:	1a00000e 	bne	126290 <tcp_output+0x334>
  126254:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126258:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  12625c:	e1d320b8 	ldrh	r2, [r3, #8]
  126260:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126264:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  126268:	e1520003 	cmp	r2, r3
  12626c:	2a000007 	bcs	126290 <tcp_output+0x334>
  126270:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126274:	e1d336b4 	ldrh	r3, [r3, #100]	; 0x64
  126278:	e3530000 	cmp	r3, #0
  12627c:	0a000003 	beq	126290 <tcp_output+0x334>
  126280:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126284:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  126288:	e3530015 	cmp	r3, #21
  12628c:	9a000001 	bls	126298 <tcp_output+0x33c>
  126290:	e3a03001 	mov	r3, #1
  126294:	ea000000 	b	12629c <tcp_output+0x340>
  126298:	e3a03000 	mov	r3, #0
  12629c:	e3530000 	cmp	r3, #0
  1262a0:	1a000004 	bne	1262b8 <tcp_output+0x35c>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
  1262a4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1262a8:	e5d3301e 	ldrb	r3, [r3, #30]
  1262ac:	e20330a0 	and	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
  1262b0:	e3530000 	cmp	r3, #0
  1262b4:	0a0000c5 	beq	1265d0 <tcp_output+0x674>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
  1262b8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1262bc:	e5933014 	ldr	r3, [r3, #20]
  1262c0:	e3530002 	cmp	r3, #2
  1262c4:	0a00000c 	beq	1262fc <tcp_output+0x3a0>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
  1262c8:	e51b3010 	ldr	r3, [fp, #-16]
  1262cc:	e593300c 	ldr	r3, [r3, #12]
  1262d0:	e1d330bc 	ldrh	r3, [r3, #12]
  1262d4:	e6ff4073 	uxth	r4, r3
  1262d8:	e3a00010 	mov	r0, #16
  1262dc:	ebffc0bc 	bl	1165d4 <lwip_htons>
  1262e0:	e1a03000 	mov	r3, r0
  1262e4:	e1a02003 	mov	r2, r3
  1262e8:	e51b3010 	ldr	r3, [fp, #-16]
  1262ec:	e593300c 	ldr	r3, [r3, #12]
  1262f0:	e1842002 	orr	r2, r4, r2
  1262f4:	e6ff2072 	uxth	r2, r2
  1262f8:	e1c320bc 	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
  1262fc:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  126300:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
  126304:	e51b0010 	ldr	r0, [fp, #-16]
  126308:	eb0000c4 	bl	126620 <tcp_output_segment>
  12630c:	e1a03000 	mov	r3, r0
  126310:	e54b3025 	strb	r3, [fp, #-37]	; 0xffffffdb
    if (err != ERR_OK) {
  126314:	e15b32d5 	ldrsb	r3, [fp, #-37]	; 0xffffffdb
  126318:	e3530000 	cmp	r3, #0
  12631c:	0a000008 	beq	126344 <tcp_output+0x3e8>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
  126320:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126324:	e5d3301e 	ldrb	r3, [r3, #30]
  126328:	e1e03c83 	mvn	r3, r3, lsl #25
  12632c:	e1e03ca3 	mvn	r3, r3, lsr #25
  126330:	e6ef2073 	uxtb	r2, r3
  126334:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126338:	e5c3201e 	strb	r2, [r3, #30]
      return err;
  12633c:	e15b32d5 	ldrsb	r3, [fp, #-37]	; 0xffffffdb
  126340:	ea0000b3 	b	126614 <tcp_output+0x6b8>
    }
    pcb->unsent = seg->next;
  126344:	e51b3010 	ldr	r3, [fp, #-16]
  126348:	e5932000 	ldr	r2, [r3]
  12634c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126350:	e583206c 	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
  126354:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126358:	e5933014 	ldr	r3, [r3, #20]
  12635c:	e3530002 	cmp	r3, #2
  126360:	0a000005 	beq	12637c <tcp_output+0x420>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  126364:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126368:	e5d3301e 	ldrb	r3, [r3, #30]
  12636c:	e3c33003 	bic	r3, r3, #3
  126370:	e6ef2073 	uxtb	r2, r3
  126374:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126378:	e5c3201e 	strb	r2, [r3, #30]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
  12637c:	e51b3010 	ldr	r3, [fp, #-16]
  126380:	e593300c 	ldr	r3, [r3, #12]
  126384:	e5933004 	ldr	r3, [r3, #4]
  126388:	e1a00003 	mov	r0, r3
  12638c:	ebffc09c 	bl	116604 <lwip_htonl>
  126390:	e1a04000 	mov	r4, r0
  126394:	e51b3010 	ldr	r3, [fp, #-16]
  126398:	e1d330b8 	ldrh	r3, [r3, #8]
  12639c:	e1a05003 	mov	r5, r3
  1263a0:	e51b3010 	ldr	r3, [fp, #-16]
  1263a4:	e593300c 	ldr	r3, [r3, #12]
  1263a8:	e1d330bc 	ldrh	r3, [r3, #12]
  1263ac:	e6ff3073 	uxth	r3, r3
  1263b0:	e1a00003 	mov	r0, r3
  1263b4:	ebffc086 	bl	1165d4 <lwip_htons>
  1263b8:	e1a03000 	mov	r3, r0
  1263bc:	e2033003 	and	r3, r3, #3
  1263c0:	e3530000 	cmp	r3, #0
  1263c4:	0a000001 	beq	1263d0 <tcp_output+0x474>
  1263c8:	e3a03001 	mov	r3, #1
  1263cc:	ea000000 	b	1263d4 <tcp_output+0x478>
  1263d0:	e3a03000 	mov	r3, #0
  1263d4:	e0833005 	add	r3, r3, r5
  1263d8:	e0843003 	add	r3, r4, r3
  1263dc:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
  1263e0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1263e4:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  1263e8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1263ec:	e0423003 	sub	r3, r2, r3
  1263f0:	e3530000 	cmp	r3, #0
  1263f4:	aa000002 	bge	126404 <tcp_output+0x4a8>
      pcb->snd_nxt = snd_nxt;
  1263f8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1263fc:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  126400:	e5832050 	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
  126404:	e51b3010 	ldr	r3, [fp, #-16]
  126408:	e1d330b8 	ldrh	r3, [r3, #8]
  12640c:	e1a04003 	mov	r4, r3
  126410:	e51b3010 	ldr	r3, [fp, #-16]
  126414:	e593300c 	ldr	r3, [r3, #12]
  126418:	e1d330bc 	ldrh	r3, [r3, #12]
  12641c:	e6ff3073 	uxth	r3, r3
  126420:	e1a00003 	mov	r0, r3
  126424:	ebffc06a 	bl	1165d4 <lwip_htons>
  126428:	e1a03000 	mov	r3, r0
  12642c:	e2033003 	and	r3, r3, #3
  126430:	e3530000 	cmp	r3, #0
  126434:	0a000001 	beq	126440 <tcp_output+0x4e4>
  126438:	e3a03001 	mov	r3, #1
  12643c:	ea000000 	b	126444 <tcp_output+0x4e8>
  126440:	e3a03000 	mov	r3, #0
  126444:	e0833004 	add	r3, r3, r4
  126448:	e3530000 	cmp	r3, #0
  12644c:	0a000045 	beq	126568 <tcp_output+0x60c>
      seg->next = NULL;
  126450:	e51b3010 	ldr	r3, [fp, #-16]
  126454:	e3a02000 	mov	r2, #0
  126458:	e5832000 	str	r2, [r3]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
  12645c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126460:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  126464:	e3530000 	cmp	r3, #0
  126468:	1a000005 	bne	126484 <tcp_output+0x528>
        pcb->unacked = seg;
  12646c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126470:	e51b2010 	ldr	r2, [fp, #-16]
  126474:	e5832070 	str	r2, [r3, #112]	; 0x70
        useg = seg;
  126478:	e51b3010 	ldr	r3, [fp, #-16]
  12647c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  126480:	ea00003a 	b	126570 <tcp_output+0x614>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
  126484:	e51b3010 	ldr	r3, [fp, #-16]
  126488:	e593300c 	ldr	r3, [r3, #12]
  12648c:	e5933004 	ldr	r3, [r3, #4]
  126490:	e1a00003 	mov	r0, r3
  126494:	ebffc05a 	bl	116604 <lwip_htonl>
  126498:	e1a04000 	mov	r4, r0
  12649c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1264a0:	e593300c 	ldr	r3, [r3, #12]
  1264a4:	e5933004 	ldr	r3, [r3, #4]
  1264a8:	e1a00003 	mov	r0, r3
  1264ac:	ebffc054 	bl	116604 <lwip_htonl>
  1264b0:	e1a03000 	mov	r3, r0
  1264b4:	e0443003 	sub	r3, r4, r3
  1264b8:	e3530000 	cmp	r3, #0
  1264bc:	aa000022 	bge	12654c <tcp_output+0x5f0>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
  1264c0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1264c4:	e2833070 	add	r3, r3, #112	; 0x70
  1264c8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
          while (*cur_seg &&
  1264cc:	ea000002 	b	1264dc <tcp_output+0x580>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
  1264d0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1264d4:	e5933000 	ldr	r3, [r3]
  1264d8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
          while (*cur_seg &&
  1264dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1264e0:	e5933000 	ldr	r3, [r3]
  1264e4:	e3530000 	cmp	r3, #0
  1264e8:	0a00000f 	beq	12652c <tcp_output+0x5d0>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
  1264ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1264f0:	e5933000 	ldr	r3, [r3]
  1264f4:	e593300c 	ldr	r3, [r3, #12]
  1264f8:	e5933004 	ldr	r3, [r3, #4]
  1264fc:	e1a00003 	mov	r0, r3
  126500:	ebffc03f 	bl	116604 <lwip_htonl>
  126504:	e1a04000 	mov	r4, r0
  126508:	e51b3010 	ldr	r3, [fp, #-16]
  12650c:	e593300c 	ldr	r3, [r3, #12]
  126510:	e5933004 	ldr	r3, [r3, #4]
  126514:	e1a00003 	mov	r0, r3
  126518:	ebffc039 	bl	116604 <lwip_htonl>
  12651c:	e1a03000 	mov	r3, r0
  126520:	e0443003 	sub	r3, r4, r3
          while (*cur_seg &&
  126524:	e3530000 	cmp	r3, #0
  126528:	baffffe8 	blt	1264d0 <tcp_output+0x574>
          }
          seg->next = (*cur_seg);
  12652c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126530:	e5932000 	ldr	r2, [r3]
  126534:	e51b3010 	ldr	r3, [fp, #-16]
  126538:	e5832000 	str	r2, [r3]
          (*cur_seg) = seg;
  12653c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126540:	e51b2010 	ldr	r2, [fp, #-16]
  126544:	e5832000 	str	r2, [r3]
  126548:	ea000008 	b	126570 <tcp_output+0x614>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
  12654c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126550:	e51b2010 	ldr	r2, [fp, #-16]
  126554:	e5832000 	str	r2, [r3]
          useg = useg->next;
  126558:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12655c:	e5933000 	ldr	r3, [r3]
  126560:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  126564:	ea000001 	b	126570 <tcp_output+0x614>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
  126568:	e51b0010 	ldr	r0, [fp, #-16]
  12656c:	ebffe3c3 	bl	11f480 <tcp_seg_free>
    }
    seg = pcb->unsent;
  126570:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126574:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  126578:	e50b3010 	str	r3, [fp, #-16]
  while (seg != NULL &&
  12657c:	e51b3010 	ldr	r3, [fp, #-16]
  126580:	e3530000 	cmp	r3, #0
  126584:	0a000013 	beq	1265d8 <tcp_output+0x67c>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
  126588:	e51b3010 	ldr	r3, [fp, #-16]
  12658c:	e593300c 	ldr	r3, [r3, #12]
  126590:	e5933004 	ldr	r3, [r3, #4]
  126594:	e1a00003 	mov	r0, r3
  126598:	ebffc019 	bl	116604 <lwip_htonl>
  12659c:	e1a02000 	mov	r2, r0
  1265a0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1265a4:	e5933048 	ldr	r3, [r3, #72]	; 0x48
  1265a8:	e0423003 	sub	r3, r2, r3
  1265ac:	e51b2010 	ldr	r2, [fp, #-16]
  1265b0:	e1d220b8 	ldrh	r2, [r2, #8]
  1265b4:	e0833002 	add	r3, r3, r2
  while (seg != NULL &&
  1265b8:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1265bc:	e1520003 	cmp	r2, r3
  1265c0:	2affff00 	bcs	1261c8 <tcp_output+0x26c>
  }
output_done:
  1265c4:	ea000003 	b	1265d8 <tcp_output+0x67c>
    goto output_done;
  1265c8:	e320f000 	nop	{0}
  1265cc:	ea000002 	b	1265dc <tcp_output+0x680>
      break;
  1265d0:	e320f000 	nop	{0}
  1265d4:	ea000000 	b	1265dc <tcp_output+0x680>
output_done:
  1265d8:	e320f000 	nop	{0}
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
  1265dc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1265e0:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  1265e4:	e3530000 	cmp	r3, #0
  1265e8:	1a000002 	bne	1265f8 <tcp_output+0x69c>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
  1265ec:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1265f0:	e3a02000 	mov	r2, #0
  1265f4:	e1c326b8 	strh	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
  1265f8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1265fc:	e5d3301e 	ldrb	r3, [r3, #30]
  126600:	e203307f 	and	r3, r3, #127	; 0x7f
  126604:	e6ef2073 	uxtb	r2, r3
  126608:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12660c:	e5c3201e 	strb	r2, [r3, #30]
  return ERR_OK;
  126610:	e3a03000 	mov	r3, #0
}
  126614:	e1a00003 	mov	r0, r3
  126618:	e24bd00c 	sub	sp, fp, #12
  12661c:	e8bd8830 	pop	{r4, r5, fp, pc}

00126620 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
  126620:	e92d4810 	push	{r4, fp, lr}
  126624:	e28db008 	add	fp, sp, #8
  126628:	e24dd034 	sub	sp, sp, #52	; 0x34
  12662c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  126630:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  126634:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
  126638:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12663c:	e5933004 	ldr	r3, [r3, #4]
  126640:	e1d330be 	ldrh	r3, [r3, #14]
  126644:	e3530001 	cmp	r3, #1
  126648:	0a000001 	beq	126654 <tcp_output_segment+0x34>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
  12664c:	e3a03000 	mov	r3, #0
  126650:	ea0000a4 	b	1268e8 <tcp_output_segment+0x2c8>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
  126654:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126658:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  12665c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126660:	e593400c 	ldr	r4, [r3, #12]
  126664:	e1a00002 	mov	r0, r2
  126668:	ebffbfe5 	bl	116604 <lwip_htonl>
  12666c:	e1a03000 	mov	r3, r0
  126670:	e5843008 	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  126674:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126678:	e1d322be 	ldrh	r2, [r3, #46]	; 0x2e
  12667c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126680:	e593400c 	ldr	r4, [r3, #12]
  126684:	e1a00002 	mov	r0, r2
  126688:	ebffbfd1 	bl	1165d4 <lwip_htons>
  12668c:	e1a03000 	mov	r3, r0
  126690:	e1c430be 	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
  126694:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126698:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12669c:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  1266a0:	e1d222be 	ldrh	r2, [r2, #46]	; 0x2e
  1266a4:	e0832002 	add	r2, r3, r2
  1266a8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1266ac:	e5832030 	str	r2, [r3, #48]	; 0x30

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
  1266b0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1266b4:	e593300c 	ldr	r3, [r3, #12]
  1266b8:	e2833014 	add	r3, r3, #20
  1266bc:	e50b3010 	str	r3, [fp, #-16]
  if (seg->flags & TF_SEG_OPTS_MSS) {
  1266c0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1266c4:	e5d3300a 	ldrb	r3, [r3, #10]
  1266c8:	e2033001 	and	r3, r3, #1
  1266cc:	e3530000 	cmp	r3, #0
  1266d0:	0a000010 	beq	126718 <tcp_output_segment+0xf8>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
  1266d4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1266d8:	e2833004 	add	r3, r3, #4
  1266dc:	e1a01003 	mov	r1, r3
  1266e0:	e30005b4 	movw	r0, #1460	; 0x5b4
  1266e4:	ebffe665 	bl	120080 <tcp_eff_send_mss_impl>
  1266e8:	e1a03000 	mov	r3, r0
  1266ec:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
  1266f0:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  1266f4:	e3833781 	orr	r3, r3, #33816576	; 0x2040000
  1266f8:	e1a00003 	mov	r0, r3
  1266fc:	ebffbfc0 	bl	116604 <lwip_htonl>
  126700:	e1a02000 	mov	r2, r0
  126704:	e51b3010 	ldr	r3, [fp, #-16]
  126708:	e5832000 	str	r2, [r3]
    opts += 1;
  12670c:	e51b3010 	ldr	r3, [fp, #-16]
  126710:	e2833004 	add	r3, r3, #4
  126714:	e50b3010 	str	r3, [fp, #-16]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
  126718:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  12671c:	e1d333f4 	ldrsh	r3, [r3, #52]	; 0x34
  126720:	e3530000 	cmp	r3, #0
  126724:	aa000002 	bge	126734 <tcp_output_segment+0x114>
    pcb->rtime = 0;
  126728:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  12672c:	e3a02000 	mov	r2, #0
  126730:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
  }

  if (pcb->rttest == 0) {
  126734:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126738:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  12673c:	e3530000 	cmp	r3, #0
  126740:	1a00000c 	bne	126778 <tcp_output_segment+0x158>
    pcb->rttest = tcp_ticks;
  126744:	e30c3c24 	movw	r3, #52260	; 0xcc24
  126748:	e3403015 	movt	r3, #21
  12674c:	e5932000 	ldr	r2, [r3]
  126750:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126754:	e5832038 	str	r2, [r3, #56]	; 0x38
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
  126758:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12675c:	e593300c 	ldr	r3, [r3, #12]
  126760:	e5933004 	ldr	r3, [r3, #4]
  126764:	e1a00003 	mov	r0, r3
  126768:	ebffbfa5 	bl	116604 <lwip_htonl>
  12676c:	e1a02000 	mov	r2, r0
  126770:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126774:	e583203c 	str	r2, [r3, #60]	; 0x3c
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
  126778:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12677c:	e593300c 	ldr	r3, [r3, #12]
  126780:	e1a02003 	mov	r2, r3
  126784:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126788:	e5933004 	ldr	r3, [r3, #4]
  12678c:	e5933004 	ldr	r3, [r3, #4]
  126790:	e0423003 	sub	r3, r2, r3
  126794:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  if (len == 0) {
  126798:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  12679c:	e3530000 	cmp	r3, #0
  1267a0:	1a000006 	bne	1267c0 <tcp_output_segment+0x1a0>
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  1267a4:	e30c3a30 	movw	r3, #51760	; 0xca30
  1267a8:	e3403015 	movt	r3, #21
  1267ac:	e593317c 	ldr	r3, [r3, #380]	; 0x17c
  1267b0:	e2832001 	add	r2, r3, #1
  1267b4:	e30c3a30 	movw	r3, #51760	; 0xca30
  1267b8:	e3403015 	movt	r3, #21
  1267bc:	e583217c 	str	r2, [r3, #380]	; 0x17c
  }

  seg->p->len -= len;
  1267c0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1267c4:	e5933004 	ldr	r3, [r3, #4]
  1267c8:	e1d310ba 	ldrh	r1, [r3, #10]
  1267cc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1267d0:	e5933004 	ldr	r3, [r3, #4]
  1267d4:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
  1267d8:	e0412002 	sub	r2, r1, r2
  1267dc:	e6ff2072 	uxth	r2, r2
  1267e0:	e1c320ba 	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
  1267e4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1267e8:	e5933004 	ldr	r3, [r3, #4]
  1267ec:	e1d310b8 	ldrh	r1, [r3, #8]
  1267f0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1267f4:	e5933004 	ldr	r3, [r3, #4]
  1267f8:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
  1267fc:	e0412002 	sub	r2, r1, r2
  126800:	e6ff2072 	uxth	r2, r2
  126804:	e1c320b8 	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
  126808:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12680c:	e5933004 	ldr	r3, [r3, #4]
  126810:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  126814:	e592200c 	ldr	r2, [r2, #12]
  126818:	e5832004 	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
  12681c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126820:	e593300c 	ldr	r3, [r3, #12]
  126824:	e3a02000 	mov	r2, #0
  126828:	e5c32010 	strb	r2, [r3, #16]
  12682c:	e3a02000 	mov	r2, #0
  126830:	e5c32011 	strb	r2, [r3, #17]
                  seg->tcphdr->chksum, chksum_slow));
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
#else /* TCP_CHECKSUM_ON_COPY */
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
  126834:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126838:	e5930004 	ldr	r0, [r3, #4]
      seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
  12683c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126840:	e5933004 	ldr	r3, [r3, #4]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
  126844:	e1d310b8 	ldrh	r1, [r3, #8]
      seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
  126848:	e51bc024 	ldr	ip, [fp, #-36]	; 0xffffffdc
  12684c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126850:	e2833004 	add	r3, r3, #4
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
  126854:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  126858:	e592400c 	ldr	r4, [r2, #12]
  12685c:	e58d3000 	str	r3, [sp]
  126860:	e1a0300c 	mov	r3, ip
  126864:	e1a02001 	mov	r2, r1
  126868:	e3a01006 	mov	r1, #6
  12686c:	ebffc777 	bl	118650 <ip_chksum_pseudo>
  126870:	e1a03000 	mov	r3, r0
  126874:	e1c431b0 	strh	r3, [r4, #16]
#endif /* TCP_CHECKSUM_ON_COPY */
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);
  126878:	e30c3a30 	movw	r3, #51760	; 0xca30
  12687c:	e3403015 	movt	r3, #21
  126880:	e1d33abc 	ldrh	r3, [r3, #172]	; 0xac
  126884:	e2833001 	add	r3, r3, #1
  126888:	e6ff2073 	uxth	r2, r3
  12688c:	e30c3a30 	movw	r3, #51760	; 0xca30
  126890:	e3403015 	movt	r3, #21
  126894:	e1c32abc 	strh	r2, [r3, #172]	; 0xac

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
  126898:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12689c:	e5930004 	ldr	r0, [r3, #4]
  1268a0:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  1268a4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1268a8:	e283c004 	add	ip, r3, #4
  1268ac:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1268b0:	e5d3e00a 	ldrb	lr, [r3, #10]
  1268b4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1268b8:	e5d33009 	ldrb	r3, [r3, #9]
  1268bc:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  1268c0:	e58d2008 	str	r2, [sp, #8]
  1268c4:	e3a02006 	mov	r2, #6
  1268c8:	e58d2004 	str	r2, [sp, #4]
  1268cc:	e58d3000 	str	r3, [sp]
  1268d0:	e1a0300e 	mov	r3, lr
  1268d4:	e1a0200c 	mov	r2, ip
  1268d8:	eb002d06 	bl	131cf8 <ip4_output_if>
  1268dc:	e1a03000 	mov	r3, r0
  1268e0:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
  1268e4:	e15b31d5 	ldrsb	r3, [fp, #-21]	; 0xffffffeb
}
  1268e8:	e1a00003 	mov	r0, r3
  1268ec:	e24bd008 	sub	sp, fp, #8
  1268f0:	e8bd8810 	pop	{r4, fp, pc}

001268f4 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
  1268f4:	e92d4800 	push	{fp, lr}
  1268f8:	e28db004 	add	fp, sp, #4
  1268fc:	e24dd030 	sub	sp, sp, #48	; 0x30
  126900:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  126904:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  126908:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  12690c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
  126910:	e3a02000 	mov	r2, #0
  126914:	e3a01014 	mov	r1, #20
  126918:	e3a00001 	mov	r0, #1
  12691c:	ebffce5c 	bl	11a294 <pbuf_alloc>
  126920:	e50b0008 	str	r0, [fp, #-8]
  if (p == NULL) {
  126924:	e51b3008 	ldr	r3, [fp, #-8]
  126928:	e3530000 	cmp	r3, #0
  12692c:	0a00006a 	beq	126adc <tcp_rst+0x1e8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
  126930:	e51b3008 	ldr	r3, [fp, #-8]
  126934:	e1d330ba 	ldrh	r3, [r3, #10]
  126938:	e3530013 	cmp	r3, #19
  12693c:	8a000006 	bhi	12695c <tcp_rst+0x68>
  126940:	e3080600 	movw	r0, #34304	; 0x8600
  126944:	e3400014 	movt	r0, #20
  126948:	ebff71f1 	bl	103114 <rt_kprintf>
  12694c:	e300154d 	movw	r1, #1357	; 0x54d
  126950:	e3080630 	movw	r0, #34352	; 0x8630
  126954:	e3400014 	movt	r0, #20
  126958:	ebff91e4 	bl	10b0f0 <sys_arch_assert>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
  12695c:	e51b3008 	ldr	r3, [fp, #-8]
  126960:	e5933004 	ldr	r3, [r3, #4]
  126964:	e50b300c 	str	r3, [fp, #-12]
  tcphdr->src = lwip_htons(local_port);
  126968:	e1db30b4 	ldrh	r3, [fp, #4]
  12696c:	e1a00003 	mov	r0, r3
  126970:	ebffbf17 	bl	1165d4 <lwip_htons>
  126974:	e1a03000 	mov	r3, r0
  126978:	e1a02003 	mov	r2, r3
  12697c:	e51b300c 	ldr	r3, [fp, #-12]
  126980:	e1c320b0 	strh	r2, [r3]
  tcphdr->dest = lwip_htons(remote_port);
  126984:	e1db30b8 	ldrh	r3, [fp, #8]
  126988:	e1a00003 	mov	r0, r3
  12698c:	ebffbf10 	bl	1165d4 <lwip_htons>
  126990:	e1a03000 	mov	r3, r0
  126994:	e1a02003 	mov	r2, r3
  126998:	e51b300c 	ldr	r3, [fp, #-12]
  12699c:	e1c320b2 	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
  1269a0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1269a4:	ebffbf16 	bl	116604 <lwip_htonl>
  1269a8:	e1a02000 	mov	r2, r0
  1269ac:	e51b300c 	ldr	r3, [fp, #-12]
  1269b0:	e5832004 	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
  1269b4:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  1269b8:	ebffbf11 	bl	116604 <lwip_htonl>
  1269bc:	e1a02000 	mov	r2, r0
  1269c0:	e51b300c 	ldr	r3, [fp, #-12]
  1269c4:	e5832008 	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
  1269c8:	e3050014 	movw	r0, #20500	; 0x5014
  1269cc:	ebffbf00 	bl	1165d4 <lwip_htons>
  1269d0:	e1a03000 	mov	r3, r0
  1269d4:	e1a02003 	mov	r2, r3
  1269d8:	e51b300c 	ldr	r3, [fp, #-12]
  1269dc:	e1c320bc 	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
  1269e0:	e51b300c 	ldr	r3, [fp, #-12]
  1269e4:	e3a02000 	mov	r2, #0
  1269e8:	e3822020 	orr	r2, r2, #32
  1269ec:	e5c3200e 	strb	r2, [r3, #14]
  1269f0:	e3a02000 	mov	r2, #0
  1269f4:	e5c3200f 	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
  1269f8:	e51b300c 	ldr	r3, [fp, #-12]
  1269fc:	e3a02000 	mov	r2, #0
  126a00:	e5c32010 	strb	r2, [r3, #16]
  126a04:	e3a02000 	mov	r2, #0
  126a08:	e5c32011 	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
  126a0c:	e51b300c 	ldr	r3, [fp, #-12]
  126a10:	e3a02000 	mov	r2, #0
  126a14:	e5c32012 	strb	r2, [r3, #18]
  126a18:	e3a02000 	mov	r2, #0
  126a1c:	e5c32013 	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  126a20:	e30c3a30 	movw	r3, #51760	; 0xca30
  126a24:	e3403015 	movt	r3, #21
  126a28:	e1d33abc 	ldrh	r3, [r3, #172]	; 0xac
  126a2c:	e2833001 	add	r3, r3, #1
  126a30:	e6ff2073 	uxth	r2, r3
  126a34:	e30c3a30 	movw	r3, #51760	; 0xca30
  126a38:	e3403015 	movt	r3, #21
  126a3c:	e1c32abc 	strh	r2, [r3, #172]	; 0xac
  MIB2_STATS_INC(mib2.tcpoutrsts);
  126a40:	e30c3a30 	movw	r3, #51760	; 0xca30
  126a44:	e3403015 	movt	r3, #21
  126a48:	e593318c 	ldr	r3, [r3, #396]	; 0x18c
  126a4c:	e2832001 	add	r2, r3, #1
  126a50:	e30c3a30 	movw	r3, #51760	; 0xca30
  126a54:	e3403015 	movt	r3, #21
  126a58:	e583218c 	str	r2, [r3, #396]	; 0x18c

  netif = ip_route(local_ip, remote_ip);
  126a5c:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  126a60:	eb0029cb 	bl	131194 <ip4_route>
  126a64:	e50b0010 	str	r0, [fp, #-16]
  if (netif != NULL) {
  126a68:	e51b3010 	ldr	r3, [fp, #-16]
  126a6c:	e3530000 	cmp	r3, #0
  126a70:	0a000016 	beq	126ad0 <tcp_rst+0x1dc>
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  126a74:	e51b3008 	ldr	r3, [fp, #-8]
  126a78:	e1d320b8 	ldrh	r2, [r3, #8]
  126a7c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126a80:	e58d3000 	str	r3, [sp]
  126a84:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126a88:	e3a01006 	mov	r1, #6
  126a8c:	e51b0008 	ldr	r0, [fp, #-8]
  126a90:	ebffc6ee 	bl	118650 <ip_chksum_pseudo>
  126a94:	e1a03000 	mov	r3, r0
  126a98:	e1a02003 	mov	r2, r3
  126a9c:	e51b300c 	ldr	r3, [fp, #-12]
  126aa0:	e1c321b0 	strh	r2, [r3, #16]
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
  126aa4:	e51b3010 	ldr	r3, [fp, #-16]
  126aa8:	e58d3008 	str	r3, [sp, #8]
  126aac:	e3a03006 	mov	r3, #6
  126ab0:	e58d3004 	str	r3, [sp, #4]
  126ab4:	e3a03000 	mov	r3, #0
  126ab8:	e58d3000 	str	r3, [sp]
  126abc:	e3a030ff 	mov	r3, #255	; 0xff
  126ac0:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  126ac4:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  126ac8:	e51b0008 	ldr	r0, [fp, #-8]
  126acc:	eb002c89 	bl	131cf8 <ip4_output_if>
  }
  pbuf_free(p);
  126ad0:	e51b0008 	ldr	r0, [fp, #-8]
  126ad4:	ebffd0f5 	bl	11aeb0 <pbuf_free>
  126ad8:	ea000000 	b	126ae0 <tcp_rst+0x1ec>
    return;
  126adc:	e320f000 	nop	{0}
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
  126ae0:	e24bd004 	sub	sp, fp, #4
  126ae4:	e8bd8800 	pop	{fp, pc}

00126ae8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  126ae8:	e92d4800 	push	{fp, lr}
  126aec:	e28db004 	add	fp, sp, #4
  126af0:	e24dd010 	sub	sp, sp, #16
  126af4:	e50b0010 	str	r0, [fp, #-16]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
  126af8:	e51b3010 	ldr	r3, [fp, #-16]
  126afc:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  126b00:	e3530000 	cmp	r3, #0
  126b04:	0a000025 	beq	126ba0 <tcp_rexmit_rto+0xb8>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
  126b08:	e51b3010 	ldr	r3, [fp, #-16]
  126b0c:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  126b10:	e50b3008 	str	r3, [fp, #-8]
  126b14:	ea000002 	b	126b24 <tcp_rexmit_rto+0x3c>
  126b18:	e51b3008 	ldr	r3, [fp, #-8]
  126b1c:	e5933000 	ldr	r3, [r3]
  126b20:	e50b3008 	str	r3, [fp, #-8]
  126b24:	e51b3008 	ldr	r3, [fp, #-8]
  126b28:	e5933000 	ldr	r3, [r3]
  126b2c:	e3530000 	cmp	r3, #0
  126b30:	1afffff8 	bne	126b18 <tcp_rexmit_rto+0x30>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
  126b34:	e51b3010 	ldr	r3, [fp, #-16]
  126b38:	e593206c 	ldr	r2, [r3, #108]	; 0x6c
  126b3c:	e51b3008 	ldr	r3, [fp, #-8]
  126b40:	e5832000 	str	r2, [r3]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
  126b44:	e51b3010 	ldr	r3, [fp, #-16]
  126b48:	e5932070 	ldr	r2, [r3, #112]	; 0x70
  126b4c:	e51b3010 	ldr	r3, [fp, #-16]
  126b50:	e583206c 	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
  126b54:	e51b3010 	ldr	r3, [fp, #-16]
  126b58:	e3a02000 	mov	r2, #0
  126b5c:	e5832070 	str	r2, [r3, #112]	; 0x70

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
  126b60:	e51b3010 	ldr	r3, [fp, #-16]
  126b64:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  126b68:	e35300ff 	cmp	r3, #255	; 0xff
  126b6c:	0a000005 	beq	126b88 <tcp_rexmit_rto+0xa0>
    ++pcb->nrtx;
  126b70:	e51b3010 	ldr	r3, [fp, #-16]
  126b74:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  126b78:	e2833001 	add	r3, r3, #1
  126b7c:	e6ef2073 	uxtb	r2, r3
  126b80:	e51b3010 	ldr	r3, [fp, #-16]
  126b84:	e5c32046 	strb	r2, [r3, #70]	; 0x46
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
  126b88:	e51b3010 	ldr	r3, [fp, #-16]
  126b8c:	e3a02000 	mov	r2, #0
  126b90:	e5832038 	str	r2, [r3, #56]	; 0x38

  /* Do the actual retransmission */
  tcp_output(pcb);
  126b94:	e51b0010 	ldr	r0, [fp, #-16]
  126b98:	ebfffcef 	bl	125f5c <tcp_output>
  126b9c:	ea000000 	b	126ba4 <tcp_rexmit_rto+0xbc>
    return;
  126ba0:	e320f000 	nop	{0}
}
  126ba4:	e24bd004 	sub	sp, fp, #4
  126ba8:	e8bd8800 	pop	{fp, pc}

00126bac <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
  126bac:	e92d4810 	push	{r4, fp, lr}
  126bb0:	e28db008 	add	fp, sp, #8
  126bb4:	e24dd014 	sub	sp, sp, #20
  126bb8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
  126bbc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126bc0:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  126bc4:	e3530000 	cmp	r3, #0
  126bc8:	0a000044 	beq	126ce0 <tcp_rexmit+0x134>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  126bcc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126bd0:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  126bd4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  pcb->unacked = seg->next;
  126bd8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126bdc:	e5932000 	ldr	r2, [r3]
  126be0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126be4:	e5832070 	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
  126be8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126bec:	e283306c 	add	r3, r3, #108	; 0x6c
  126bf0:	e50b3010 	str	r3, [fp, #-16]
  while (*cur_seg &&
  126bf4:	ea000002 	b	126c04 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
  126bf8:	e51b3010 	ldr	r3, [fp, #-16]
  126bfc:	e5933000 	ldr	r3, [r3]
  126c00:	e50b3010 	str	r3, [fp, #-16]
  while (*cur_seg &&
  126c04:	e51b3010 	ldr	r3, [fp, #-16]
  126c08:	e5933000 	ldr	r3, [r3]
  126c0c:	e3530000 	cmp	r3, #0
  126c10:	0a00000f 	beq	126c54 <tcp_rexmit+0xa8>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
  126c14:	e51b3010 	ldr	r3, [fp, #-16]
  126c18:	e5933000 	ldr	r3, [r3]
  126c1c:	e593300c 	ldr	r3, [r3, #12]
  126c20:	e5933004 	ldr	r3, [r3, #4]
  126c24:	e1a00003 	mov	r0, r3
  126c28:	ebffbe75 	bl	116604 <lwip_htonl>
  126c2c:	e1a04000 	mov	r4, r0
  126c30:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126c34:	e593300c 	ldr	r3, [r3, #12]
  126c38:	e5933004 	ldr	r3, [r3, #4]
  126c3c:	e1a00003 	mov	r0, r3
  126c40:	ebffbe6f 	bl	116604 <lwip_htonl>
  126c44:	e1a03000 	mov	r3, r0
  126c48:	e0443003 	sub	r3, r4, r3
  while (*cur_seg &&
  126c4c:	e3530000 	cmp	r3, #0
  126c50:	baffffe8 	blt	126bf8 <tcp_rexmit+0x4c>
  }
  seg->next = *cur_seg;
  126c54:	e51b3010 	ldr	r3, [fp, #-16]
  126c58:	e5932000 	ldr	r2, [r3]
  126c5c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126c60:	e5832000 	str	r2, [r3]
  *cur_seg = seg;
  126c64:	e51b3010 	ldr	r3, [fp, #-16]
  126c68:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  126c6c:	e5832000 	str	r2, [r3]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
  126c70:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126c74:	e5933000 	ldr	r3, [r3]
  126c78:	e3530000 	cmp	r3, #0
  126c7c:	1a000002 	bne	126c8c <tcp_rexmit+0xe0>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
  126c80:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126c84:	e3a02000 	mov	r2, #0
  126c88:	e1c326b8 	strh	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
  126c8c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126c90:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  126c94:	e35300ff 	cmp	r3, #255	; 0xff
  126c98:	0a000005 	beq	126cb4 <tcp_rexmit+0x108>
    ++pcb->nrtx;
  126c9c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126ca0:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  126ca4:	e2833001 	add	r3, r3, #1
  126ca8:	e6ef2073 	uxtb	r2, r3
  126cac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126cb0:	e5c32046 	strb	r2, [r3, #70]	; 0x46
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
  126cb4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126cb8:	e3a02000 	mov	r2, #0
  126cbc:	e5832038 	str	r2, [r3, #56]	; 0x38

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  126cc0:	e30c3a30 	movw	r3, #51760	; 0xca30
  126cc4:	e3403015 	movt	r3, #21
  126cc8:	e5933180 	ldr	r3, [r3, #384]	; 0x180
  126ccc:	e2832001 	add	r2, r3, #1
  126cd0:	e30c3a30 	movw	r3, #51760	; 0xca30
  126cd4:	e3403015 	movt	r3, #21
  126cd8:	e5832180 	str	r2, [r3, #384]	; 0x180
  126cdc:	ea000000 	b	126ce4 <tcp_rexmit+0x138>
    return;
  126ce0:	e320f000 	nop	{0}
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
  126ce4:	e24bd008 	sub	sp, fp, #8
  126ce8:	e8bd8810 	pop	{r4, fp, pc}

00126cec <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
  126cec:	e92d4800 	push	{fp, lr}
  126cf0:	e28db004 	add	fp, sp, #4
  126cf4:	e24dd008 	sub	sp, sp, #8
  126cf8:	e50b0008 	str	r0, [fp, #-8]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
  126cfc:	e51b3008 	ldr	r3, [fp, #-8]
  126d00:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  126d04:	e3530000 	cmp	r3, #0
  126d08:	0a00003e 	beq	126e08 <tcp_rexmit_fast+0x11c>
  126d0c:	e51b3008 	ldr	r3, [fp, #-8]
  126d10:	e5d3301e 	ldrb	r3, [r3, #30]
  126d14:	e2033004 	and	r3, r3, #4
  126d18:	e3530000 	cmp	r3, #0
  126d1c:	1a000039 	bne	126e08 <tcp_rexmit_fast+0x11c>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
  126d20:	e51b0008 	ldr	r0, [fp, #-8]
  126d24:	ebffffa0 	bl	126bac <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
  126d28:	e51b3008 	ldr	r3, [fp, #-8]
  126d2c:	e1d324bc 	ldrh	r2, [r3, #76]	; 0x4c
  126d30:	e51b3008 	ldr	r3, [fp, #-8]
  126d34:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  126d38:	e1520003 	cmp	r2, r3
  126d3c:	2a000006 	bcs	126d5c <tcp_rexmit_fast+0x70>
  126d40:	e51b3008 	ldr	r3, [fp, #-8]
  126d44:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  126d48:	e1a02fa3 	lsr	r2, r3, #31
  126d4c:	e0823003 	add	r3, r2, r3
  126d50:	e1a030c3 	asr	r3, r3, #1
  126d54:	e6ff3073 	uxth	r3, r3
  126d58:	ea000005 	b	126d74 <tcp_rexmit_fast+0x88>
  126d5c:	e51b3008 	ldr	r3, [fp, #-8]
  126d60:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  126d64:	e1a02fa3 	lsr	r2, r3, #31
  126d68:	e0823003 	add	r3, r2, r3
  126d6c:	e1a030c3 	asr	r3, r3, #1
  126d70:	e6ff3073 	uxth	r3, r3
  126d74:	e51b2008 	ldr	r2, [fp, #-8]
  126d78:	e1c234be 	strh	r3, [r2, #78]	; 0x4e

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
  126d7c:	e51b3008 	ldr	r3, [fp, #-8]
  126d80:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  126d84:	e1a02003 	mov	r2, r3
  126d88:	e51b3008 	ldr	r3, [fp, #-8]
  126d8c:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  126d90:	e1a03083 	lsl	r3, r3, #1
  126d94:	e1520003 	cmp	r2, r3
  126d98:	2a000005 	bcs	126db4 <tcp_rexmit_fast+0xc8>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
  126d9c:	e51b3008 	ldr	r3, [fp, #-8]
  126da0:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  126da4:	e1a03083 	lsl	r3, r3, #1
  126da8:	e6ff2073 	uxth	r2, r3
  126dac:	e51b3008 	ldr	r3, [fp, #-8]
  126db0:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
  126db4:	e51b3008 	ldr	r3, [fp, #-8]
  126db8:	e1d324be 	ldrh	r2, [r3, #78]	; 0x4e
  126dbc:	e51b3008 	ldr	r3, [fp, #-8]
  126dc0:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  126dc4:	e1a01003 	mov	r1, r3
  126dc8:	e1a01081 	lsl	r1, r1, #1
  126dcc:	e0813003 	add	r3, r1, r3
  126dd0:	e6ff3073 	uxth	r3, r3
  126dd4:	e0823003 	add	r3, r2, r3
  126dd8:	e6ff2073 	uxth	r2, r3
  126ddc:	e51b3008 	ldr	r3, [fp, #-8]
  126de0:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
    pcb->flags |= TF_INFR;
  126de4:	e51b3008 	ldr	r3, [fp, #-8]
  126de8:	e5d3301e 	ldrb	r3, [r3, #30]
  126dec:	e3833004 	orr	r3, r3, #4
  126df0:	e6ef2073 	uxtb	r2, r3
  126df4:	e51b3008 	ldr	r3, [fp, #-8]
  126df8:	e5c3201e 	strb	r2, [r3, #30]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
  126dfc:	e51b3008 	ldr	r3, [fp, #-8]
  126e00:	e3a02000 	mov	r2, #0
  126e04:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
  }
}
  126e08:	e320f000 	nop	{0}
  126e0c:	e24bd004 	sub	sp, fp, #4
  126e10:	e8bd8800 	pop	{fp, pc}

00126e14 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
  126e14:	e92d4800 	push	{fp, lr}
  126e18:	e28db004 	add	fp, sp, #4
  126e1c:	e24dd028 	sub	sp, sp, #40	; 0x28
  126e20:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
  126e24:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126e28:	e5933050 	ldr	r3, [r3, #80]	; 0x50
  126e2c:	e2433001 	sub	r3, r3, #1
  126e30:	e1a00003 	mov	r0, r3
  126e34:	ebffbdf2 	bl	116604 <lwip_htonl>
  126e38:	e1a03000 	mov	r3, r0
  126e3c:	e3a02000 	mov	r2, #0
  126e40:	e3a01000 	mov	r1, #0
  126e44:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  126e48:	ebfff62a 	bl	1246f8 <tcp_output_alloc_header>
  126e4c:	e50b000c 	str	r0, [fp, #-12]
  if (p == NULL) {
  126e50:	e51b300c 	ldr	r3, [fp, #-12]
  126e54:	e3530000 	cmp	r3, #0
  126e58:	1a000001 	bne	126e64 <tcp_keepalive+0x50>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  126e5c:	e3e03000 	mvn	r3, #0
  126e60:	ea000036 	b	126f40 <tcp_keepalive+0x12c>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
  126e64:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126e68:	e2833004 	add	r3, r3, #4
  126e6c:	e1a00003 	mov	r0, r3
  126e70:	eb0028c7 	bl	131194 <ip4_route>
  126e74:	e50b0010 	str	r0, [fp, #-16]
  if (netif == NULL) {
  126e78:	e51b3010 	ldr	r3, [fp, #-16]
  126e7c:	e3530000 	cmp	r3, #0
  126e80:	1a000002 	bne	126e90 <tcp_keepalive+0x7c>
    err = ERR_RTE;
  126e84:	e3e03003 	mvn	r3, #3
  126e88:	e54b3005 	strb	r3, [fp, #-5]
  126e8c:	ea000028 	b	126f34 <tcp_keepalive+0x120>
  } else {
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
  126e90:	e51b300c 	ldr	r3, [fp, #-12]
  126e94:	e5933004 	ldr	r3, [r3, #4]
  126e98:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  126e9c:	e51b300c 	ldr	r3, [fp, #-12]
  126ea0:	e1d320b8 	ldrh	r2, [r3, #8]
        &pcb->local_ip, &pcb->remote_ip);
  126ea4:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  126ea8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126eac:	e2833004 	add	r3, r3, #4
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  126eb0:	e58d3000 	str	r3, [sp]
  126eb4:	e1a03001 	mov	r3, r1
  126eb8:	e3a01006 	mov	r1, #6
  126ebc:	e51b000c 	ldr	r0, [fp, #-12]
  126ec0:	ebffc5e2 	bl	118650 <ip_chksum_pseudo>
  126ec4:	e1a03000 	mov	r3, r0
  126ec8:	e1a02003 	mov	r2, r3
  126ecc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126ed0:	e1c321b0 	strh	r2, [r3, #16]
    }
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);
  126ed4:	e30c3a30 	movw	r3, #51760	; 0xca30
  126ed8:	e3403015 	movt	r3, #21
  126edc:	e1d33abc 	ldrh	r3, [r3, #172]	; 0xac
  126ee0:	e2833001 	add	r3, r3, #1
  126ee4:	e6ff2073 	uxth	r2, r3
  126ee8:	e30c3a30 	movw	r3, #51760	; 0xca30
  126eec:	e3403015 	movt	r3, #21
  126ef0:	e1c32abc 	strh	r2, [r3, #172]	; 0xac

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
  126ef4:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  126ef8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126efc:	e2832004 	add	r2, r3, #4
  126f00:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126f04:	e5d3000a 	ldrb	r0, [r3, #10]
  126f08:	e51b3010 	ldr	r3, [fp, #-16]
  126f0c:	e58d3008 	str	r3, [sp, #8]
  126f10:	e3a03006 	mov	r3, #6
  126f14:	e58d3004 	str	r3, [sp, #4]
  126f18:	e3a03000 	mov	r3, #0
  126f1c:	e58d3000 	str	r3, [sp]
  126f20:	e1a03000 	mov	r3, r0
  126f24:	e51b000c 	ldr	r0, [fp, #-12]
  126f28:	eb002b72 	bl	131cf8 <ip4_output_if>
  126f2c:	e1a03000 	mov	r3, r0
  126f30:	e54b3005 	strb	r3, [fp, #-5]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
  126f34:	e51b000c 	ldr	r0, [fp, #-12]
  126f38:	ebffcfdc 	bl	11aeb0 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
  126f3c:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  126f40:	e1a00003 	mov	r0, r3
  126f44:	e24bd004 	sub	sp, fp, #4
  126f48:	e8bd8800 	pop	{fp, pc}

00126f4c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
  126f4c:	e92d4810 	push	{r4, fp, lr}
  126f50:	e28db008 	add	fp, sp, #8
  126f54:	e24dd03c 	sub	sp, sp, #60	; 0x3c
  126f58:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
  126f5c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126f60:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  126f64:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  if (seg == NULL) {
  126f68:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126f6c:	e3530000 	cmp	r3, #0
  126f70:	1a000002 	bne	126f80 <tcp_zero_window_probe+0x34>
    seg = pcb->unsent;
  126f74:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126f78:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  126f7c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  }
  if (seg == NULL) {
  126f80:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126f84:	e3530000 	cmp	r3, #0
  126f88:	1a000001 	bne	126f94 <tcp_zero_window_probe+0x48>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
  126f8c:	e3a03000 	mov	r3, #0
  126f90:	ea00008c 	b	1271c8 <tcp_zero_window_probe+0x27c>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
  126f94:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126f98:	e593300c 	ldr	r3, [r3, #12]
  126f9c:	e1d330bc 	ldrh	r3, [r3, #12]
  126fa0:	e6ff3073 	uxth	r3, r3
  126fa4:	e1a00003 	mov	r0, r3
  126fa8:	ebffbd89 	bl	1165d4 <lwip_htons>
  126fac:	e1a03000 	mov	r3, r0
  126fb0:	e2033001 	and	r3, r3, #1
  126fb4:	e3530000 	cmp	r3, #0
  126fb8:	0a000005 	beq	126fd4 <tcp_zero_window_probe+0x88>
  126fbc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126fc0:	e1d330b8 	ldrh	r3, [r3, #8]
  126fc4:	e3530000 	cmp	r3, #0
  126fc8:	1a000001 	bne	126fd4 <tcp_zero_window_probe+0x88>
  126fcc:	e3a03001 	mov	r3, #1
  126fd0:	ea000000 	b	126fd8 <tcp_zero_window_probe+0x8c>
  126fd4:	e3a03000 	mov	r3, #0
  126fd8:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
  126fdc:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  126fe0:	e3530000 	cmp	r3, #0
  126fe4:	03a03001 	moveq	r3, #1
  126fe8:	13a03000 	movne	r3, #0
  126fec:	e6ef3073 	uxtb	r3, r3
  126ff0:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
  126ff4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126ff8:	e593300c 	ldr	r3, [r3, #12]
  126ffc:	e5933004 	ldr	r3, [r3, #4]
  127000:	e15b21b8 	ldrh	r2, [fp, #-24]	; 0xffffffe8
  127004:	e3a01000 	mov	r1, #0
  127008:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  12700c:	ebfff5b9 	bl	1246f8 <tcp_output_alloc_header>
  127010:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
  if (p == NULL) {
  127014:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  127018:	e3530000 	cmp	r3, #0
  12701c:	1a000001 	bne	127028 <tcp_zero_window_probe+0xdc>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  127020:	e3e03000 	mvn	r3, #0
  127024:	ea000067 	b	1271c8 <tcp_zero_window_probe+0x27c>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
  127028:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12702c:	e5933004 	ldr	r3, [r3, #4]
  127030:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0

  if (is_fin) {
  127034:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  127038:	e3530000 	cmp	r3, #0
  12703c:	0a00000c 	beq	127074 <tcp_zero_window_probe+0x128>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
  127040:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  127044:	e1d330bc 	ldrh	r3, [r3, #12]
  127048:	e6ff3073 	uxth	r3, r3
  12704c:	e3c33c3f 	bic	r3, r3, #16128	; 0x3f00
  127050:	e6ff4073 	uxth	r4, r3
  127054:	e3a00011 	mov	r0, #17
  127058:	ebffbd5d 	bl	1165d4 <lwip_htons>
  12705c:	e1a03000 	mov	r3, r0
  127060:	e1843003 	orr	r3, r4, r3
  127064:	e6ff2073 	uxth	r2, r3
  127068:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12706c:	e1c320bc 	strh	r2, [r3, #12]
  127070:	ea00000f 	b	1270b4 <tcp_zero_window_probe+0x168>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
  127074:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  127078:	e5933004 	ldr	r3, [r3, #4]
  12707c:	e2833014 	add	r3, r3, #20
  127080:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  127084:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  127088:	e5930004 	ldr	r0, [r3, #4]
  12708c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  127090:	e5933004 	ldr	r3, [r3, #4]
  127094:	e1d320b8 	ldrh	r2, [r3, #8]
  127098:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12709c:	e1d330b8 	ldrh	r3, [r3, #8]
  1270a0:	e0423003 	sub	r3, r2, r3
  1270a4:	e6ff3073 	uxth	r3, r3
  1270a8:	e3a02001 	mov	r2, #1
  1270ac:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  1270b0:	ebffd189 	bl	11b6dc <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
  1270b4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1270b8:	e593300c 	ldr	r3, [r3, #12]
  1270bc:	e5933004 	ldr	r3, [r3, #4]
  1270c0:	e1a00003 	mov	r0, r3
  1270c4:	ebffbd4e 	bl	116604 <lwip_htonl>
  1270c8:	e1a03000 	mov	r3, r0
  1270cc:	e2833001 	add	r3, r3, #1
  1270d0:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
  1270d4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1270d8:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  1270dc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1270e0:	e0423003 	sub	r3, r2, r3
  1270e4:	e3530000 	cmp	r3, #0
  1270e8:	aa000002 	bge	1270f8 <tcp_zero_window_probe+0x1ac>
    pcb->snd_nxt = snd_nxt;
  1270ec:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1270f0:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  1270f4:	e5832050 	str	r2, [r3, #80]	; 0x50
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
  1270f8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1270fc:	e2833004 	add	r3, r3, #4
  127100:	e1a00003 	mov	r0, r3
  127104:	eb002822 	bl	131194 <ip4_route>
  127108:	e50b002c 	str	r0, [fp, #-44]	; 0xffffffd4
  if (netif == NULL) {
  12710c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  127110:	e3530000 	cmp	r3, #0
  127114:	1a000002 	bne	127124 <tcp_zero_window_probe+0x1d8>
    err = ERR_RTE;
  127118:	e3e03003 	mvn	r3, #3
  12711c:	e54b300d 	strb	r3, [fp, #-13]
  127120:	ea000025 	b	1271bc <tcp_zero_window_probe+0x270>
  } else {
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  127124:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  127128:	e1d320b8 	ldrh	r2, [r3, #8]
        &pcb->local_ip, &pcb->remote_ip);
  12712c:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
  127130:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  127134:	e2833004 	add	r3, r3, #4
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  127138:	e58d3000 	str	r3, [sp]
  12713c:	e1a03001 	mov	r3, r1
  127140:	e3a01006 	mov	r1, #6
  127144:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  127148:	ebffc540 	bl	118650 <ip_chksum_pseudo>
  12714c:	e1a03000 	mov	r3, r0
  127150:	e1a02003 	mov	r2, r3
  127154:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  127158:	e1c321b0 	strh	r2, [r3, #16]
    }
#endif
    TCP_STATS_INC(tcp.xmit);
  12715c:	e30c3a30 	movw	r3, #51760	; 0xca30
  127160:	e3403015 	movt	r3, #21
  127164:	e1d33abc 	ldrh	r3, [r3, #172]	; 0xac
  127168:	e2833001 	add	r3, r3, #1
  12716c:	e6ff2073 	uxth	r2, r3
  127170:	e30c3a30 	movw	r3, #51760	; 0xca30
  127174:	e3403015 	movt	r3, #21
  127178:	e1c32abc 	strh	r2, [r3, #172]	; 0xac

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
  12717c:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
  127180:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  127184:	e2832004 	add	r2, r3, #4
  127188:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12718c:	e5d3000a 	ldrb	r0, [r3, #10]
  127190:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  127194:	e58d3008 	str	r3, [sp, #8]
  127198:	e3a03006 	mov	r3, #6
  12719c:	e58d3004 	str	r3, [sp, #4]
  1271a0:	e3a03000 	mov	r3, #0
  1271a4:	e58d3000 	str	r3, [sp]
  1271a8:	e1a03000 	mov	r3, r0
  1271ac:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  1271b0:	eb002ad0 	bl	131cf8 <ip4_output_if>
  1271b4:	e1a03000 	mov	r3, r0
  1271b8:	e54b300d 	strb	r3, [fp, #-13]
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
  1271bc:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  1271c0:	ebffcf3a 	bl	11aeb0 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
  1271c4:	e15b30dd 	ldrsb	r3, [fp, #-13]
}
  1271c8:	e1a00003 	mov	r0, r3
  1271cc:	e24bd008 	sub	sp, fp, #8
  1271d0:	e8bd8810 	pop	{r4, fp, pc}

001271d4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
  1271d4:	e92d4800 	push	{fp, lr}
  1271d8:	e28db004 	add	fp, sp, #4
  1271dc:	e24dd008 	sub	sp, sp, #8
  1271e0:	e50b0008 	str	r0, [fp, #-8]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
  1271e4:	ebffd779 	bl	11cfd0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
  1271e8:	e30c3c20 	movw	r3, #52256	; 0xcc20
  1271ec:	e3403015 	movt	r3, #21
  1271f0:	e5933000 	ldr	r3, [r3]
  1271f4:	e3530000 	cmp	r3, #0
  1271f8:	1a000004 	bne	127210 <tcpip_tcp_timer+0x3c>
  1271fc:	e30c3c30 	movw	r3, #52272	; 0xcc30
  127200:	e3403015 	movt	r3, #21
  127204:	e5933000 	ldr	r3, [r3]
  127208:	e3530000 	cmp	r3, #0
  12720c:	0a000005 	beq	127228 <tcpip_tcp_timer+0x54>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
  127210:	e3a02000 	mov	r2, #0
  127214:	e30711d4 	movw	r1, #29140	; 0x71d4
  127218:	e3401012 	movt	r1, #18
  12721c:	e3a000fa 	mov	r0, #250	; 0xfa
  127220:	eb000057 	bl	127384 <sys_timeout>
  127224:	ea000003 	b	127238 <tcpip_tcp_timer+0x64>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
  127228:	e30e326c 	movw	r3, #57964	; 0xe26c
  12722c:	e3403014 	movt	r3, #20
  127230:	e3a02000 	mov	r2, #0
  127234:	e5832000 	str	r2, [r3]
  }
}
  127238:	e320f000 	nop	{0}
  12723c:	e24bd004 	sub	sp, fp, #4
  127240:	e8bd8800 	pop	{fp, pc}

00127244 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
  127244:	e92d4800 	push	{fp, lr}
  127248:	e28db004 	add	fp, sp, #4
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
  12724c:	e30e326c 	movw	r3, #57964	; 0xe26c
  127250:	e3403014 	movt	r3, #20
  127254:	e5933000 	ldr	r3, [r3]
  127258:	e3530000 	cmp	r3, #0
  12725c:	1a000012 	bne	1272ac <tcp_timer_needed+0x68>
  127260:	e30c3c20 	movw	r3, #52256	; 0xcc20
  127264:	e3403015 	movt	r3, #21
  127268:	e5933000 	ldr	r3, [r3]
  12726c:	e3530000 	cmp	r3, #0
  127270:	1a000004 	bne	127288 <tcp_timer_needed+0x44>
  127274:	e30c3c30 	movw	r3, #52272	; 0xcc30
  127278:	e3403015 	movt	r3, #21
  12727c:	e5933000 	ldr	r3, [r3]
  127280:	e3530000 	cmp	r3, #0
  127284:	0a000008 	beq	1272ac <tcp_timer_needed+0x68>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
  127288:	e30e326c 	movw	r3, #57964	; 0xe26c
  12728c:	e3403014 	movt	r3, #20
  127290:	e3a02001 	mov	r2, #1
  127294:	e5832000 	str	r2, [r3]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
  127298:	e3a02000 	mov	r2, #0
  12729c:	e30711d4 	movw	r1, #29140	; 0x71d4
  1272a0:	e3401012 	movt	r1, #18
  1272a4:	e3a000fa 	mov	r0, #250	; 0xfa
  1272a8:	eb000035 	bl	127384 <sys_timeout>
  }
}
  1272ac:	e320f000 	nop	{0}
  1272b0:	e8bd8800 	pop	{fp, pc}

001272b4 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
  1272b4:	e92d4800 	push	{fp, lr}
  1272b8:	e28db004 	add	fp, sp, #4
  1272bc:	e24dd010 	sub	sp, sp, #16
  1272c0:	e50b0010 	str	r0, [fp, #-16]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
  1272c4:	e51b3010 	ldr	r3, [fp, #-16]
  1272c8:	e50b3008 	str	r3, [fp, #-8]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
  1272cc:	e51b3008 	ldr	r3, [fp, #-8]
  1272d0:	e5933004 	ldr	r3, [r3, #4]
  1272d4:	e12fff33 	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
  1272d8:	e51b3008 	ldr	r3, [fp, #-8]
  1272dc:	e5933000 	ldr	r3, [r3]
  1272e0:	e51b2010 	ldr	r2, [fp, #-16]
  1272e4:	e30712b4 	movw	r1, #29364	; 0x72b4
  1272e8:	e3401012 	movt	r1, #18
  1272ec:	e1a00003 	mov	r0, r3
  1272f0:	eb000023 	bl	127384 <sys_timeout>
}
  1272f4:	e320f000 	nop	{0}
  1272f8:	e24bd004 	sub	sp, fp, #4
  1272fc:	e8bd8800 	pop	{fp, pc}

00127300 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
  127300:	e92d4800 	push	{fp, lr}
  127304:	e28db004 	add	fp, sp, #4
  127308:	e24dd008 	sub	sp, sp, #8
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = 1; i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
  12730c:	e3a03001 	mov	r3, #1
  127310:	e50b3008 	str	r3, [fp, #-8]
  127314:	ea00000f 	b	127358 <sys_timeouts_init+0x58>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
  127318:	e3083a18 	movw	r3, #35352	; 0x8a18
  12731c:	e3403014 	movt	r3, #20
  127320:	e51b2008 	ldr	r2, [fp, #-8]
  127324:	e7930182 	ldr	r0, [r3, r2, lsl #3]
  127328:	e51b3008 	ldr	r3, [fp, #-8]
  12732c:	e1a02183 	lsl	r2, r3, #3
  127330:	e3083a18 	movw	r3, #35352	; 0x8a18
  127334:	e3403014 	movt	r3, #20
  127338:	e0823003 	add	r3, r2, r3
  12733c:	e1a02003 	mov	r2, r3
  127340:	e30712b4 	movw	r1, #29364	; 0x72b4
  127344:	e3401012 	movt	r1, #18
  127348:	eb00000d 	bl	127384 <sys_timeout>
  for (i = 1; i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
  12734c:	e51b3008 	ldr	r3, [fp, #-8]
  127350:	e2833001 	add	r3, r3, #1
  127354:	e50b3008 	str	r3, [fp, #-8]
  127358:	e51b3008 	ldr	r3, [fp, #-8]
  12735c:	e3530006 	cmp	r3, #6
  127360:	9affffec 	bls	127318 <sys_timeouts_init+0x18>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
  127364:	ebff8f7a 	bl	10b154 <sys_now>
  127368:	e1a02000 	mov	r2, r0
  12736c:	e30e3268 	movw	r3, #57960	; 0xe268
  127370:	e3403014 	movt	r3, #20
  127374:	e5832000 	str	r2, [r3]
}
  127378:	e320f000 	nop	{0}
  12737c:	e24bd004 	sub	sp, fp, #4
  127380:	e8bd8800 	pop	{fp, pc}

00127384 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
  127384:	e92d4800 	push	{fp, lr}
  127388:	e28db004 	add	fp, sp, #4
  12738c:	e24dd020 	sub	sp, sp, #32
  127390:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  127394:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  127398:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
  12739c:	e3a020d2 	mov	r2, #210	; 0xd2
  1273a0:	e3081a50 	movw	r1, #35408	; 0x8a50
  1273a4:	e3401014 	movt	r1, #20
  1273a8:	e3a0000d 	mov	r0, #13
  1273ac:	ebffc749 	bl	1190d8 <memp_malloc_fn>
  1273b0:	e50b0010 	str	r0, [fp, #-16]
  if (timeout == NULL) {
  1273b4:	e51b3010 	ldr	r3, [fp, #-16]
  1273b8:	e3530000 	cmp	r3, #0
  1273bc:	1a00000a 	bne	1273ec <sys_timeout+0x68>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
  1273c0:	e51b3010 	ldr	r3, [fp, #-16]
  1273c4:	e3530000 	cmp	r3, #0
  1273c8:	1a00008f 	bne	12760c <sys_timeout+0x288>
  1273cc:	e3080a80 	movw	r0, #35456	; 0x8a80
  1273d0:	e3400014 	movt	r0, #20
  1273d4:	ebff6f4e 	bl	103114 <rt_kprintf>
  1273d8:	e3a010d4 	mov	r1, #212	; 0xd4
  1273dc:	e3080a50 	movw	r0, #35408	; 0x8a50
  1273e0:	e3400014 	movt	r0, #20
  1273e4:	ebff8f41 	bl	10b0f0 <sys_arch_assert>
    return;
  1273e8:	ea000087 	b	12760c <sys_timeout+0x288>
  }

  now = sys_now();
  1273ec:	ebff8f58 	bl	10b154 <sys_now>
  1273f0:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  if (next_timeout == NULL) {
  1273f4:	e30e3264 	movw	r3, #57956	; 0xe264
  1273f8:	e3403014 	movt	r3, #20
  1273fc:	e5933000 	ldr	r3, [r3]
  127400:	e3530000 	cmp	r3, #0
  127404:	1a000006 	bne	127424 <sys_timeout+0xa0>
    diff = 0;
  127408:	e3a03000 	mov	r3, #0
  12740c:	e50b300c 	str	r3, [fp, #-12]
    timeouts_last_time = now;
  127410:	e30e3268 	movw	r3, #57960	; 0xe268
  127414:	e3403014 	movt	r3, #20
  127418:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  12741c:	e5832000 	str	r2, [r3]
  127420:	ea000005 	b	12743c <sys_timeout+0xb8>
  } else {
    diff = now - timeouts_last_time;
  127424:	e30e3268 	movw	r3, #57960	; 0xe268
  127428:	e3403014 	movt	r3, #20
  12742c:	e5933000 	ldr	r3, [r3]
  127430:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  127434:	e0423003 	sub	r3, r2, r3
  127438:	e50b300c 	str	r3, [fp, #-12]
  }

  timeout->next = NULL;
  12743c:	e51b3010 	ldr	r3, [fp, #-16]
  127440:	e3a02000 	mov	r2, #0
  127444:	e5832000 	str	r2, [r3]
  timeout->h = handler;
  127448:	e51b3010 	ldr	r3, [fp, #-16]
  12744c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  127450:	e5832008 	str	r2, [r3, #8]
  timeout->arg = arg;
  127454:	e51b3010 	ldr	r3, [fp, #-16]
  127458:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  12745c:	e583200c 	str	r2, [r3, #12]
  timeout->time = msecs + diff;
  127460:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  127464:	e51b300c 	ldr	r3, [fp, #-12]
  127468:	e0822003 	add	r2, r2, r3
  12746c:	e51b3010 	ldr	r3, [fp, #-16]
  127470:	e5832004 	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
  127474:	e30e3264 	movw	r3, #57956	; 0xe264
  127478:	e3403014 	movt	r3, #20
  12747c:	e5933000 	ldr	r3, [r3]
  127480:	e3530000 	cmp	r3, #0
  127484:	1a000004 	bne	12749c <sys_timeout+0x118>
    next_timeout = timeout;
  127488:	e30e3264 	movw	r3, #57956	; 0xe264
  12748c:	e3403014 	movt	r3, #20
  127490:	e51b2010 	ldr	r2, [fp, #-16]
  127494:	e5832000 	str	r2, [r3]
    return;
  127498:	ea00005c 	b	127610 <sys_timeout+0x28c>
  }

  if (next_timeout->time > msecs) {
  12749c:	e30e3264 	movw	r3, #57956	; 0xe264
  1274a0:	e3403014 	movt	r3, #20
  1274a4:	e5933000 	ldr	r3, [r3]
  1274a8:	e5933004 	ldr	r3, [r3, #4]
  1274ac:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1274b0:	e1520003 	cmp	r2, r3
  1274b4:	2a000013 	bcs	127508 <sys_timeout+0x184>
    next_timeout->time -= msecs;
  1274b8:	e30e3264 	movw	r3, #57956	; 0xe264
  1274bc:	e3403014 	movt	r3, #20
  1274c0:	e5933000 	ldr	r3, [r3]
  1274c4:	e5931004 	ldr	r1, [r3, #4]
  1274c8:	e30e3264 	movw	r3, #57956	; 0xe264
  1274cc:	e3403014 	movt	r3, #20
  1274d0:	e5933000 	ldr	r3, [r3]
  1274d4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1274d8:	e0412002 	sub	r2, r1, r2
  1274dc:	e5832004 	str	r2, [r3, #4]
    timeout->next = next_timeout;
  1274e0:	e30e3264 	movw	r3, #57956	; 0xe264
  1274e4:	e3403014 	movt	r3, #20
  1274e8:	e5932000 	ldr	r2, [r3]
  1274ec:	e51b3010 	ldr	r3, [fp, #-16]
  1274f0:	e5832000 	str	r2, [r3]
    next_timeout = timeout;
  1274f4:	e30e3264 	movw	r3, #57956	; 0xe264
  1274f8:	e3403014 	movt	r3, #20
  1274fc:	e51b2010 	ldr	r2, [fp, #-16]
  127500:	e5832000 	str	r2, [r3]
  127504:	ea000041 	b	127610 <sys_timeout+0x28c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
  127508:	e30e3264 	movw	r3, #57956	; 0xe264
  12750c:	e3403014 	movt	r3, #20
  127510:	e5933000 	ldr	r3, [r3]
  127514:	e50b3008 	str	r3, [fp, #-8]
  127518:	ea000037 	b	1275fc <sys_timeout+0x278>
      timeout->time -= t->time;
  12751c:	e51b3010 	ldr	r3, [fp, #-16]
  127520:	e5932004 	ldr	r2, [r3, #4]
  127524:	e51b3008 	ldr	r3, [fp, #-8]
  127528:	e5933004 	ldr	r3, [r3, #4]
  12752c:	e0422003 	sub	r2, r2, r3
  127530:	e51b3010 	ldr	r3, [fp, #-16]
  127534:	e5832004 	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
  127538:	e51b3008 	ldr	r3, [fp, #-8]
  12753c:	e5933000 	ldr	r3, [r3]
  127540:	e3530000 	cmp	r3, #0
  127544:	0a000006 	beq	127564 <sys_timeout+0x1e0>
  127548:	e51b3008 	ldr	r3, [fp, #-8]
  12754c:	e5933000 	ldr	r3, [r3]
  127550:	e5932004 	ldr	r2, [r3, #4]
  127554:	e51b3010 	ldr	r3, [fp, #-16]
  127558:	e5933004 	ldr	r3, [r3, #4]
  12755c:	e1520003 	cmp	r2, r3
  127560:	9a000022 	bls	1275f0 <sys_timeout+0x26c>
        if (t->next != NULL) {
  127564:	e51b3008 	ldr	r3, [fp, #-8]
  127568:	e5933000 	ldr	r3, [r3]
  12756c:	e3530000 	cmp	r3, #0
  127570:	0a000009 	beq	12759c <sys_timeout+0x218>
          t->next->time -= timeout->time;
  127574:	e51b3008 	ldr	r3, [fp, #-8]
  127578:	e5933000 	ldr	r3, [r3]
  12757c:	e5931004 	ldr	r1, [r3, #4]
  127580:	e51b3010 	ldr	r3, [fp, #-16]
  127584:	e5932004 	ldr	r2, [r3, #4]
  127588:	e51b3008 	ldr	r3, [fp, #-8]
  12758c:	e5933000 	ldr	r3, [r3]
  127590:	e0412002 	sub	r2, r1, r2
  127594:	e5832004 	str	r2, [r3, #4]
  127598:	ea00000c 	b	1275d0 <sys_timeout+0x24c>
        } else if (timeout->time > msecs) {
  12759c:	e51b3010 	ldr	r3, [fp, #-16]
  1275a0:	e5933004 	ldr	r3, [r3, #4]
  1275a4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1275a8:	e1520003 	cmp	r2, r3
  1275ac:	2a000007 	bcs	1275d0 <sys_timeout+0x24c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
  1275b0:	e30e3264 	movw	r3, #57956	; 0xe264
  1275b4:	e3403014 	movt	r3, #20
  1275b8:	e5933000 	ldr	r3, [r3]
  1275bc:	e5932004 	ldr	r2, [r3, #4]
  1275c0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1275c4:	e0822003 	add	r2, r2, r3
  1275c8:	e51b3010 	ldr	r3, [fp, #-16]
  1275cc:	e5832004 	str	r2, [r3, #4]
        }
        timeout->next = t->next;
  1275d0:	e51b3008 	ldr	r3, [fp, #-8]
  1275d4:	e5932000 	ldr	r2, [r3]
  1275d8:	e51b3010 	ldr	r3, [fp, #-16]
  1275dc:	e5832000 	str	r2, [r3]
        t->next = timeout;
  1275e0:	e51b3008 	ldr	r3, [fp, #-8]
  1275e4:	e51b2010 	ldr	r2, [fp, #-16]
  1275e8:	e5832000 	str	r2, [r3]
        break;
  1275ec:	ea000007 	b	127610 <sys_timeout+0x28c>
    for (t = next_timeout; t != NULL; t = t->next) {
  1275f0:	e51b3008 	ldr	r3, [fp, #-8]
  1275f4:	e5933000 	ldr	r3, [r3]
  1275f8:	e50b3008 	str	r3, [fp, #-8]
  1275fc:	e51b3008 	ldr	r3, [fp, #-8]
  127600:	e3530000 	cmp	r3, #0
  127604:	1affffc4 	bne	12751c <sys_timeout+0x198>
  127608:	ea000000 	b	127610 <sys_timeout+0x28c>
    return;
  12760c:	e320f000 	nop	{0}
      }
    }
  }
}
  127610:	e24bd004 	sub	sp, fp, #4
  127614:	e8bd8800 	pop	{fp, pc}

00127618 <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
  127618:	e92d4800 	push	{fp, lr}
  12761c:	e28db004 	add	fp, sp, #4
  127620:	e24dd010 	sub	sp, sp, #16
  127624:	e50b0010 	str	r0, [fp, #-16]
  127628:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct sys_timeo *prev_t, *t;

  if (next_timeout == NULL) {
  12762c:	e30e3264 	movw	r3, #57956	; 0xe264
  127630:	e3403014 	movt	r3, #20
  127634:	e5933000 	ldr	r3, [r3]
  127638:	e3530000 	cmp	r3, #0
  12763c:	0a000038 	beq	127724 <sys_untimeout+0x10c>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
  127640:	e30e3264 	movw	r3, #57956	; 0xe264
  127644:	e3403014 	movt	r3, #20
  127648:	e5933000 	ldr	r3, [r3]
  12764c:	e50b300c 	str	r3, [fp, #-12]
  127650:	e3a03000 	mov	r3, #0
  127654:	e50b3008 	str	r3, [fp, #-8]
  127658:	ea00002c 	b	127710 <sys_untimeout+0xf8>
    if ((t->h == handler) && (t->arg == arg)) {
  12765c:	e51b300c 	ldr	r3, [fp, #-12]
  127660:	e5933008 	ldr	r3, [r3, #8]
  127664:	e51b2010 	ldr	r2, [fp, #-16]
  127668:	e1520003 	cmp	r2, r3
  12766c:	1a000022 	bne	1276fc <sys_untimeout+0xe4>
  127670:	e51b300c 	ldr	r3, [fp, #-12]
  127674:	e593300c 	ldr	r3, [r3, #12]
  127678:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  12767c:	e1520003 	cmp	r2, r3
  127680:	1a00001d 	bne	1276fc <sys_untimeout+0xe4>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
  127684:	e51b3008 	ldr	r3, [fp, #-8]
  127688:	e3530000 	cmp	r3, #0
  12768c:	1a000005 	bne	1276a8 <sys_untimeout+0x90>
        next_timeout = t->next;
  127690:	e51b300c 	ldr	r3, [fp, #-12]
  127694:	e5932000 	ldr	r2, [r3]
  127698:	e30e3264 	movw	r3, #57956	; 0xe264
  12769c:	e3403014 	movt	r3, #20
  1276a0:	e5832000 	str	r2, [r3]
  1276a4:	ea000003 	b	1276b8 <sys_untimeout+0xa0>
      } else {
        prev_t->next = t->next;
  1276a8:	e51b300c 	ldr	r3, [fp, #-12]
  1276ac:	e5932000 	ldr	r2, [r3]
  1276b0:	e51b3008 	ldr	r3, [fp, #-8]
  1276b4:	e5832000 	str	r2, [r3]
      }
      /* If not the last one, add time of this one back to next */
      if (t->next != NULL) {
  1276b8:	e51b300c 	ldr	r3, [fp, #-12]
  1276bc:	e5933000 	ldr	r3, [r3]
  1276c0:	e3530000 	cmp	r3, #0
  1276c4:	0a000008 	beq	1276ec <sys_untimeout+0xd4>
        t->next->time += t->time;
  1276c8:	e51b300c 	ldr	r3, [fp, #-12]
  1276cc:	e5933000 	ldr	r3, [r3]
  1276d0:	e5931004 	ldr	r1, [r3, #4]
  1276d4:	e51b300c 	ldr	r3, [fp, #-12]
  1276d8:	e5932004 	ldr	r2, [r3, #4]
  1276dc:	e51b300c 	ldr	r3, [fp, #-12]
  1276e0:	e5933000 	ldr	r3, [r3]
  1276e4:	e0812002 	add	r2, r1, r2
  1276e8:	e5832004 	str	r2, [r3, #4]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
  1276ec:	e51b100c 	ldr	r1, [fp, #-12]
  1276f0:	e3a0000d 	mov	r0, #13
  1276f4:	ebffc6df 	bl	119278 <memp_free>
      return;
  1276f8:	ea00000a 	b	127728 <sys_untimeout+0x110>
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
  1276fc:	e51b300c 	ldr	r3, [fp, #-12]
  127700:	e50b3008 	str	r3, [fp, #-8]
  127704:	e51b300c 	ldr	r3, [fp, #-12]
  127708:	e5933000 	ldr	r3, [r3]
  12770c:	e50b300c 	str	r3, [fp, #-12]
  127710:	e51b300c 	ldr	r3, [fp, #-12]
  127714:	e3530000 	cmp	r3, #0
  127718:	1affffcf 	bne	12765c <sys_untimeout+0x44>
    }
  }
  return;
  12771c:	e320f000 	nop	{0}
  127720:	ea000000 	b	127728 <sys_untimeout+0x110>
    return;
  127724:	e320f000 	nop	{0}
}
  127728:	e24bd004 	sub	sp, fp, #4
  12772c:	e8bd8800 	pop	{fp, pc}

00127730 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
  127730:	e92d4800 	push	{fp, lr}
  127734:	e28db004 	add	fp, sp, #4
  127738:	e24dd018 	sub	sp, sp, #24
  if (next_timeout) {
  12773c:	e30e3264 	movw	r3, #57956	; 0xe264
  127740:	e3403014 	movt	r3, #20
  127744:	e5933000 	ldr	r3, [r3]
  127748:	e3530000 	cmp	r3, #0
  12774c:	0a000042 	beq	12785c <sys_check_timeouts+0x12c>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
  127750:	ebff8e7f 	bl	10b154 <sys_now>
  127754:	e50b0010 	str	r0, [fp, #-16]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
  127758:	e30e3268 	movw	r3, #57960	; 0xe268
  12775c:	e3403014 	movt	r3, #20
  127760:	e5933000 	ldr	r3, [r3]
  127764:	e51b2010 	ldr	r2, [fp, #-16]
  127768:	e0423003 	sub	r3, r2, r3
  12776c:	e50b3008 	str	r3, [fp, #-8]
    do {
      PBUF_CHECK_FREE_OOSEQ();
      had_one = 0;
  127770:	e3a03000 	mov	r3, #0
  127774:	e54b3009 	strb	r3, [fp, #-9]
      tmptimeout = next_timeout;
  127778:	e30e3264 	movw	r3, #57956	; 0xe264
  12777c:	e3403014 	movt	r3, #20
  127780:	e5933000 	ldr	r3, [r3]
  127784:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      if (tmptimeout && (tmptimeout->time <= diff)) {
  127788:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12778c:	e3530000 	cmp	r3, #0
  127790:	0a00002e 	beq	127850 <sys_check_timeouts+0x120>
  127794:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  127798:	e5933004 	ldr	r3, [r3, #4]
  12779c:	e51b2008 	ldr	r2, [fp, #-8]
  1277a0:	e1520003 	cmp	r2, r3
  1277a4:	3a000029 	bcc	127850 <sys_check_timeouts+0x120>
        /* timeout has expired */
        had_one = 1;
  1277a8:	e3a03001 	mov	r3, #1
  1277ac:	e54b3009 	strb	r3, [fp, #-9]
        timeouts_last_time += tmptimeout->time;
  1277b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1277b4:	e5932004 	ldr	r2, [r3, #4]
  1277b8:	e30e3268 	movw	r3, #57960	; 0xe268
  1277bc:	e3403014 	movt	r3, #20
  1277c0:	e5933000 	ldr	r3, [r3]
  1277c4:	e0822003 	add	r2, r2, r3
  1277c8:	e30e3268 	movw	r3, #57960	; 0xe268
  1277cc:	e3403014 	movt	r3, #20
  1277d0:	e5832000 	str	r2, [r3]
        diff -= tmptimeout->time;
  1277d4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1277d8:	e5933004 	ldr	r3, [r3, #4]
  1277dc:	e51b2008 	ldr	r2, [fp, #-8]
  1277e0:	e0423003 	sub	r3, r2, r3
  1277e4:	e50b3008 	str	r3, [fp, #-8]
        next_timeout = tmptimeout->next;
  1277e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1277ec:	e5932000 	ldr	r2, [r3]
  1277f0:	e30e3264 	movw	r3, #57956	; 0xe264
  1277f4:	e3403014 	movt	r3, #20
  1277f8:	e5832000 	str	r2, [r3]
        handler = tmptimeout->h;
  1277fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  127800:	e5933008 	ldr	r3, [r3, #8]
  127804:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        arg = tmptimeout->arg;
  127808:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12780c:	e593300c 	ldr	r3, [r3, #12]
  127810:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
  127814:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  127818:	e3a0000d 	mov	r0, #13
  12781c:	ebffc695 	bl	119278 <memp_free>
        if (handler != NULL) {
  127820:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  127824:	e3530000 	cmp	r3, #0
  127828:	0a000008 	beq	127850 <sys_check_timeouts+0x120>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
  12782c:	e30f05f4 	movw	r0, #62964	; 0xf5f4
  127830:	e3400014 	movt	r0, #20
  127834:	ebff8cb1 	bl	10ab00 <sys_mutex_lock>
#endif /* !NO_SYS */
          handler(arg);
  127838:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12783c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  127840:	e12fff33 	blx	r3
#if !NO_SYS
          UNLOCK_TCPIP_CORE();
  127844:	e30f05f4 	movw	r0, #62964	; 0xf5f4
  127848:	e3400014 	movt	r0, #20
  12784c:	ebff8cb7 	bl	10ab30 <sys_mutex_unlock>
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
  127850:	e55b3009 	ldrb	r3, [fp, #-9]
  127854:	e3530000 	cmp	r3, #0
  127858:	1affffc4 	bne	127770 <sys_check_timeouts+0x40>
  }
}
  12785c:	e320f000 	nop	{0}
  127860:	e24bd004 	sub	sp, fp, #4
  127864:	e8bd8800 	pop	{fp, pc}

00127868 <sys_restart_timeouts>:
 * time (e.g. while saving energy) to prevent all timer functions of that
 * period being called.
 */
void
sys_restart_timeouts(void)
{
  127868:	e92d4800 	push	{fp, lr}
  12786c:	e28db004 	add	fp, sp, #4
  timeouts_last_time = sys_now();
  127870:	ebff8e37 	bl	10b154 <sys_now>
  127874:	e1a02000 	mov	r2, r0
  127878:	e30e3268 	movw	r3, #57960	; 0xe268
  12787c:	e3403014 	movt	r3, #20
  127880:	e5832000 	str	r2, [r3]
}
  127884:	e320f000 	nop	{0}
  127888:	e8bd8800 	pop	{fp, pc}

0012788c <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
  12788c:	e92d4800 	push	{fp, lr}
  127890:	e28db004 	add	fp, sp, #4
  127894:	e24dd008 	sub	sp, sp, #8
  u32_t diff;
  if (next_timeout == NULL) {
  127898:	e30e3264 	movw	r3, #57956	; 0xe264
  12789c:	e3403014 	movt	r3, #20
  1278a0:	e5933000 	ldr	r3, [r3]
  1278a4:	e3530000 	cmp	r3, #0
  1278a8:	1a000001 	bne	1278b4 <sys_timeouts_sleeptime+0x28>
    return 0xffffffff;
  1278ac:	e3e03000 	mvn	r3, #0
  1278b0:	ea000015 	b	12790c <sys_timeouts_sleeptime+0x80>
  }
  diff = sys_now() - timeouts_last_time;
  1278b4:	ebff8e26 	bl	10b154 <sys_now>
  1278b8:	e1a02000 	mov	r2, r0
  1278bc:	e30e3268 	movw	r3, #57960	; 0xe268
  1278c0:	e3403014 	movt	r3, #20
  1278c4:	e5933000 	ldr	r3, [r3]
  1278c8:	e0423003 	sub	r3, r2, r3
  1278cc:	e50b3008 	str	r3, [fp, #-8]
  if (diff > next_timeout->time) {
  1278d0:	e30e3264 	movw	r3, #57956	; 0xe264
  1278d4:	e3403014 	movt	r3, #20
  1278d8:	e5933000 	ldr	r3, [r3]
  1278dc:	e5933004 	ldr	r3, [r3, #4]
  1278e0:	e51b2008 	ldr	r2, [fp, #-8]
  1278e4:	e1520003 	cmp	r2, r3
  1278e8:	9a000001 	bls	1278f4 <sys_timeouts_sleeptime+0x68>
    return 0;
  1278ec:	e3a03000 	mov	r3, #0
  1278f0:	ea000005 	b	12790c <sys_timeouts_sleeptime+0x80>
  } else {
    return next_timeout->time - diff;
  1278f4:	e30e3264 	movw	r3, #57956	; 0xe264
  1278f8:	e3403014 	movt	r3, #20
  1278fc:	e5933000 	ldr	r3, [r3]
  127900:	e5932004 	ldr	r2, [r3, #4]
  127904:	e51b3008 	ldr	r3, [fp, #-8]
  127908:	e0423003 	sub	r3, r2, r3
  }
}
  12790c:	e1a00003 	mov	r0, r3
  127910:	e24bd004 	sub	sp, fp, #4
  127914:	e8bd8800 	pop	{fp, pc}

00127918 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
  127918:	e92d4800 	push	{fp, lr}
  12791c:	e28db004 	add	fp, sp, #4
  127920:	e24dd010 	sub	sp, sp, #16
  127924:	e50b0010 	str	r0, [fp, #-16]
  127928:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  u32_t sleeptime;

again:
  if (!next_timeout) {
  12792c:	e30e3264 	movw	r3, #57956	; 0xe264
  127930:	e3403014 	movt	r3, #20
  127934:	e5933000 	ldr	r3, [r3]
  127938:	e3530000 	cmp	r3, #0
  12793c:	1a000004 	bne	127954 <sys_timeouts_mbox_fetch+0x3c>
    sys_arch_mbox_fetch(mbox, msg, 0);
  127940:	e3a02000 	mov	r2, #0
  127944:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  127948:	e51b0010 	ldr	r0, [fp, #-16]
  12794c:	ebff8d4d 	bl	10ae88 <sys_arch_mbox_fetch>
    return;
  127950:	ea00000d 	b	12798c <sys_timeouts_mbox_fetch+0x74>
  }

  sleeptime = sys_timeouts_sleeptime();
  127954:	ebffffcc 	bl	12788c <sys_timeouts_sleeptime>
  127958:	e50b0008 	str	r0, [fp, #-8]
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
  12795c:	e51b3008 	ldr	r3, [fp, #-8]
  127960:	e3530000 	cmp	r3, #0
  127964:	0a000006 	beq	127984 <sys_timeouts_mbox_fetch+0x6c>
  127968:	e51b2008 	ldr	r2, [fp, #-8]
  12796c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  127970:	e51b0010 	ldr	r0, [fp, #-16]
  127974:	ebff8d43 	bl	10ae88 <sys_arch_mbox_fetch>
  127978:	e1a03000 	mov	r3, r0
  12797c:	e3730001 	cmn	r3, #1
  127980:	1a000001 	bne	12798c <sys_timeouts_mbox_fetch+0x74>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
  127984:	ebffff69 	bl	127730 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
  127988:	eaffffe7 	b	12792c <sys_timeouts_mbox_fetch+0x14>
  }
}
  12798c:	e24bd004 	sub	sp, fp, #4
  127990:	e8bd8800 	pop	{fp, pc}

00127994 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
  127994:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  127998:	e28db000 	add	fp, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
  12799c:	e320f000 	nop	{0}
  1279a0:	e28bd000 	add	sp, fp, #0
  1279a4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1279a8:	e12fff1e 	bx	lr

001279ac <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
  1279ac:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1279b0:	e28db000 	add	fp, sp, #0
  1279b4:	e24dd00c 	sub	sp, sp, #12
  u16_t n = 0;
  1279b8:	e3a03000 	mov	r3, #0
  1279bc:	e14b30b6 	strh	r3, [fp, #-6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
  1279c0:	e30d3038 	movw	r3, #53304	; 0xd038
  1279c4:	e3403014 	movt	r3, #20
  1279c8:	e1d320b0 	ldrh	r2, [r3]
  1279cc:	e2823001 	add	r3, r2, #1
  1279d0:	e6ff1073 	uxth	r1, r3
  1279d4:	e30d3038 	movw	r3, #53304	; 0xd038
  1279d8:	e3403014 	movt	r3, #20
  1279dc:	e1c310b0 	strh	r1, [r3]
  1279e0:	e30f3fff 	movw	r3, #65535	; 0xffff
  1279e4:	e1520003 	cmp	r2, r3
  1279e8:	1a000003 	bne	1279fc <udp_new_port+0x50>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
  1279ec:	e30d3038 	movw	r3, #53304	; 0xd038
  1279f0:	e3403014 	movt	r3, #20
  1279f4:	e3a02903 	mov	r2, #49152	; 0xc000
  1279f8:	e1c320b0 	strh	r2, [r3]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  1279fc:	e30c3c38 	movw	r3, #52280	; 0xcc38
  127a00:	e3403015 	movt	r3, #21
  127a04:	e5933000 	ldr	r3, [r3]
  127a08:	e50b300c 	str	r3, [fp, #-12]
  127a0c:	ea000011 	b	127a58 <udp_new_port+0xac>
    if (pcb->local_port == udp_port) {
  127a10:	e51b300c 	ldr	r3, [fp, #-12]
  127a14:	e1d321b2 	ldrh	r2, [r3, #18]
  127a18:	e30d3038 	movw	r3, #53304	; 0xd038
  127a1c:	e3403014 	movt	r3, #20
  127a20:	e1d330b0 	ldrh	r3, [r3]
  127a24:	e1520003 	cmp	r2, r3
  127a28:	1a000007 	bne	127a4c <udp_new_port+0xa0>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
  127a2c:	e15b30b6 	ldrh	r3, [fp, #-6]
  127a30:	e2833001 	add	r3, r3, #1
  127a34:	e14b30b6 	strh	r3, [fp, #-6]
  127a38:	e15b30b6 	ldrh	r3, [fp, #-6]
  127a3c:	e3530901 	cmp	r3, #16384	; 0x4000
  127a40:	3affffde 	bcc	1279c0 <udp_new_port+0x14>
        return 0;
  127a44:	e3a03000 	mov	r3, #0
  127a48:	ea000008 	b	127a70 <udp_new_port+0xc4>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  127a4c:	e51b300c 	ldr	r3, [fp, #-12]
  127a50:	e593300c 	ldr	r3, [r3, #12]
  127a54:	e50b300c 	str	r3, [fp, #-12]
  127a58:	e51b300c 	ldr	r3, [fp, #-12]
  127a5c:	e3530000 	cmp	r3, #0
  127a60:	1affffea 	bne	127a10 <udp_new_port+0x64>
      }
      goto again;
    }
  }
  return udp_port;
  127a64:	e30d3038 	movw	r3, #53304	; 0xd038
  127a68:	e3403014 	movt	r3, #20
  127a6c:	e1d330b0 	ldrh	r3, [r3]
}
  127a70:	e1a00003 	mov	r0, r3
  127a74:	e28bd000 	add	sp, fp, #0
  127a78:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  127a7c:	e12fff1e 	bx	lr

00127a80 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
  127a80:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  127a84:	e28db000 	add	fp, sp, #0
  127a88:	e24dd014 	sub	sp, sp, #20
  127a8c:	e50b0008 	str	r0, [fp, #-8]
  127a90:	e50b100c 	str	r1, [fp, #-12]
  127a94:	e1a03002 	mov	r3, r2
  127a98:	e54b300d 	strb	r3, [fp, #-13]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
  127a9c:	e55b300d 	ldrb	r3, [fp, #-13]
  127aa0:	e3530000 	cmp	r3, #0
  127aa4:	0a00001e 	beq	127b24 <udp_input_local_match+0xa4>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
  127aa8:	e51b3008 	ldr	r3, [fp, #-8]
  127aac:	e5d33008 	ldrb	r3, [r3, #8]
  127ab0:	e2033020 	and	r3, r3, #32
  127ab4:	e3530000 	cmp	r3, #0
  127ab8:	0a000029 	beq	127b64 <udp_input_local_match+0xe4>
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
  127abc:	e51b3008 	ldr	r3, [fp, #-8]
  127ac0:	e3530000 	cmp	r3, #0
  127ac4:	0a000014 	beq	127b1c <udp_input_local_match+0x9c>
  127ac8:	e51b3008 	ldr	r3, [fp, #-8]
  127acc:	e5933000 	ldr	r3, [r3]
  127ad0:	e3530000 	cmp	r3, #0
  127ad4:	0a000010 	beq	127b1c <udp_input_local_match+0x9c>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
  127ad8:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  127adc:	e3403014 	movt	r3, #20
  127ae0:	e5933014 	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
  127ae4:	e3730001 	cmn	r3, #1
  127ae8:	0a00000b 	beq	127b1c <udp_input_local_match+0x9c>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
  127aec:	e51b3008 	ldr	r3, [fp, #-8]
  127af0:	e5932000 	ldr	r2, [r3]
  127af4:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  127af8:	e3403014 	movt	r3, #20
  127afc:	e5933014 	ldr	r3, [r3, #20]
  127b00:	e0222003 	eor	r2, r2, r3
  127b04:	e51b300c 	ldr	r3, [fp, #-12]
  127b08:	e2833008 	add	r3, r3, #8
  127b0c:	e5933000 	ldr	r3, [r3]
  127b10:	e0033002 	and	r3, r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
  127b14:	e3530000 	cmp	r3, #0
  127b18:	1a000011 	bne	127b64 <udp_input_local_match+0xe4>
          return 1;
  127b1c:	e3a03001 	mov	r3, #1
  127b20:	ea000010 	b	127b68 <udp_input_local_match+0xe8>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
  127b24:	e51b3008 	ldr	r3, [fp, #-8]
  127b28:	e3530000 	cmp	r3, #0
  127b2c:	0a00000a 	beq	127b5c <udp_input_local_match+0xdc>
  127b30:	e51b3008 	ldr	r3, [fp, #-8]
  127b34:	e5933000 	ldr	r3, [r3]
  127b38:	e3530000 	cmp	r3, #0
  127b3c:	0a000006 	beq	127b5c <udp_input_local_match+0xdc>
  127b40:	e51b3008 	ldr	r3, [fp, #-8]
  127b44:	e5932000 	ldr	r2, [r3]
  127b48:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  127b4c:	e3403014 	movt	r3, #20
  127b50:	e5933014 	ldr	r3, [r3, #20]
  127b54:	e1520003 	cmp	r2, r3
  127b58:	1a000001 	bne	127b64 <udp_input_local_match+0xe4>
      return 1;
  127b5c:	e3a03001 	mov	r3, #1
  127b60:	ea000000 	b	127b68 <udp_input_local_match+0xe8>
    }
  }

  return 0;
  127b64:	e3a03000 	mov	r3, #0
}
  127b68:	e1a00003 	mov	r0, r3
  127b6c:	e28bd000 	add	sp, fp, #0
  127b70:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  127b74:	e12fff1e 	bx	lr

00127b78 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
  127b78:	e92d4810 	push	{r4, fp, lr}
  127b7c:	e28db008 	add	fp, sp, #8
  127b80:	e24dd034 	sub	sp, sp, #52	; 0x34
  127b84:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  127b88:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
  127b8c:	e3a03000 	mov	r3, #0
  127b90:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7

  LWIP_UNUSED_ARG(inp);

  PERF_START;

  UDP_STATS_INC(udp.recv);
  127b94:	e30c3a30 	movw	r3, #51760	; 0xca30
  127b98:	e3403015 	movt	r3, #21
  127b9c:	e1d339b6 	ldrh	r3, [r3, #150]	; 0x96
  127ba0:	e2833001 	add	r3, r3, #1
  127ba4:	e6ff2073 	uxth	r2, r3
  127ba8:	e30c3a30 	movw	r3, #51760	; 0xca30
  127bac:	e3403015 	movt	r3, #21
  127bb0:	e1c329b6 	strh	r2, [r3, #150]	; 0x96

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
  127bb4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  127bb8:	e1d330ba 	ldrh	r3, [r3, #10]
  127bbc:	e3530007 	cmp	r3, #7
  127bc0:	8a000019 	bhi	127c2c <udp_input+0xb4>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
  127bc4:	e30c3a30 	movw	r3, #51760	; 0xca30
  127bc8:	e3403015 	movt	r3, #21
  127bcc:	e1d339be 	ldrh	r3, [r3, #158]	; 0x9e
  127bd0:	e2833001 	add	r3, r3, #1
  127bd4:	e6ff2073 	uxth	r2, r3
  127bd8:	e30c3a30 	movw	r3, #51760	; 0xca30
  127bdc:	e3403015 	movt	r3, #21
  127be0:	e1c329be 	strh	r2, [r3, #158]	; 0x9e
    UDP_STATS_INC(udp.drop);
  127be4:	e30c3a30 	movw	r3, #51760	; 0xca30
  127be8:	e3403015 	movt	r3, #21
  127bec:	e1d339ba 	ldrh	r3, [r3, #154]	; 0x9a
  127bf0:	e2833001 	add	r3, r3, #1
  127bf4:	e6ff2073 	uxth	r2, r3
  127bf8:	e30c3a30 	movw	r3, #51760	; 0xca30
  127bfc:	e3403015 	movt	r3, #21
  127c00:	e1c329ba 	strh	r2, [r3, #154]	; 0x9a
    MIB2_STATS_INC(mib2.udpinerrors);
  127c04:	e30c3a30 	movw	r3, #51760	; 0xca30
  127c08:	e3403015 	movt	r3, #21
  127c0c:	e5933198 	ldr	r3, [r3, #408]	; 0x198
  127c10:	e2832001 	add	r2, r3, #1
  127c14:	e30c3a30 	movw	r3, #51760	; 0xca30
  127c18:	e3403015 	movt	r3, #21
  127c1c:	e5832198 	str	r2, [r3, #408]	; 0x198
    pbuf_free(p);
  127c20:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  127c24:	ebffcca1 	bl	11aeb0 <pbuf_free>
    goto end;
  127c28:	ea00010c 	b	128060 <udp_input+0x4e8>
  }

  udphdr = (struct udp_hdr *)p->payload;
  127c2c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  127c30:	e5933004 	ldr	r3, [r3, #4]
  127c34:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
  127c38:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  127c3c:	e3403014 	movt	r3, #20
  127c40:	e5932014 	ldr	r2, [r3, #20]
  127c44:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  127c48:	e3403014 	movt	r3, #20
  127c4c:	e5933000 	ldr	r3, [r3]
  127c50:	e1a01003 	mov	r1, r3
  127c54:	e1a00002 	mov	r0, r2
  127c58:	eb002a2c 	bl	132510 <ip4_addr_isbroadcast_u32>
  127c5c:	e1a03000 	mov	r3, r0
  127c60:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
  127c64:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  127c68:	e1d330b0 	ldrh	r3, [r3]
  127c6c:	e6ff3073 	uxth	r3, r3
  127c70:	e1a00003 	mov	r0, r3
  127c74:	ebffba56 	bl	1165d4 <lwip_htons>
  127c78:	e1a03000 	mov	r3, r0
  127c7c:	e14b32b4 	strh	r3, [fp, #-36]	; 0xffffffdc
  dest = lwip_ntohs(udphdr->dest);
  127c80:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  127c84:	e1d330b2 	ldrh	r3, [r3, #2]
  127c88:	e6ff3073 	uxth	r3, r3
  127c8c:	e1a00003 	mov	r0, r3
  127c90:	ebffba4f 	bl	1165d4 <lwip_htons>
  127c94:	e1a03000 	mov	r3, r0
  127c98:	e14b32b6 	strh	r3, [fp, #-38]	; 0xffffffda
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
  127c9c:	e3a03000 	mov	r3, #0
  127ca0:	e50b3010 	str	r3, [fp, #-16]
  prev = NULL;
  127ca4:	e3a03000 	mov	r3, #0
  127ca8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  uncon_pcb = NULL;
  127cac:	e3a03000 	mov	r3, #0
  127cb0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  127cb4:	e30c3c38 	movw	r3, #52280	; 0xcc38
  127cb8:	e3403015 	movt	r3, #21
  127cbc:	e5933000 	ldr	r3, [r3]
  127cc0:	e50b3010 	str	r3, [fp, #-16]
  127cc4:	ea00004c 	b	127dfc <udp_input+0x284>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
  127cc8:	e51b3010 	ldr	r3, [fp, #-16]
  127ccc:	e1d331b2 	ldrh	r3, [r3, #18]
  127cd0:	e15b22b6 	ldrh	r2, [fp, #-38]	; 0xffffffda
  127cd4:	e1520003 	cmp	r2, r3
  127cd8:	1a000042 	bne	127de8 <udp_input+0x270>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
  127cdc:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  127ce0:	e1a02003 	mov	r2, r3
  127ce4:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  127ce8:	e51b0010 	ldr	r0, [fp, #-16]
  127cec:	ebffff63 	bl	127a80 <udp_input_local_match>
  127cf0:	e1a03000 	mov	r3, r0
    if ((pcb->local_port == dest) &&
  127cf4:	e3530000 	cmp	r3, #0
  127cf8:	0a00003a 	beq	127de8 <udp_input+0x270>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
  127cfc:	e51b3010 	ldr	r3, [fp, #-16]
  127d00:	e5d33010 	ldrb	r3, [r3, #16]
  127d04:	e2033004 	and	r3, r3, #4
  127d08:	e3530000 	cmp	r3, #0
  127d0c:	1a00000b 	bne	127d40 <udp_input+0x1c8>
  127d10:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  127d14:	e3530000 	cmp	r3, #0
  127d18:	0a000006 	beq	127d38 <udp_input+0x1c0>
          ((uncon_pcb == NULL)
#if SO_REUSE
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
  127d1c:	e51b3010 	ldr	r3, [fp, #-16]
  127d20:	e3530000 	cmp	r3, #0
  127d24:	0a000005 	beq	127d40 <udp_input+0x1c8>
  127d28:	e51b3010 	ldr	r3, [fp, #-16]
  127d2c:	e5933000 	ldr	r3, [r3]
  127d30:	e3530000 	cmp	r3, #0
  127d34:	0a000001 	beq	127d40 <udp_input+0x1c8>
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
  127d38:	e51b3010 	ldr	r3, [fp, #-16]
  127d3c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
  127d40:	e51b3010 	ldr	r3, [fp, #-16]
  127d44:	e1d331b4 	ldrh	r3, [r3, #20]
  127d48:	e15b22b4 	ldrh	r2, [fp, #-36]	; 0xffffffdc
  127d4c:	e1520003 	cmp	r2, r3
  127d50:	1a000024 	bne	127de8 <udp_input+0x270>
          (ip_addr_isany_val(pcb->remote_ip) ||
  127d54:	e51b3010 	ldr	r3, [fp, #-16]
  127d58:	e5933004 	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
  127d5c:	e3530000 	cmp	r3, #0
  127d60:	0a000006 	beq	127d80 <udp_input+0x208>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
  127d64:	e51b3010 	ldr	r3, [fp, #-16]
  127d68:	e5932004 	ldr	r2, [r3, #4]
  127d6c:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  127d70:	e3403014 	movt	r3, #20
  127d74:	e5933010 	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
  127d78:	e1520003 	cmp	r2, r3
  127d7c:	1a000019 	bne	127de8 <udp_input+0x270>
        /* the first fully matching PCB */
        if (prev != NULL) {
  127d80:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  127d84:	e3530000 	cmp	r3, #0
  127d88:	0a00000d 	beq	127dc4 <udp_input+0x24c>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
  127d8c:	e51b3010 	ldr	r3, [fp, #-16]
  127d90:	e593200c 	ldr	r2, [r3, #12]
  127d94:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  127d98:	e583200c 	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
  127d9c:	e30c3c38 	movw	r3, #52280	; 0xcc38
  127da0:	e3403015 	movt	r3, #21
  127da4:	e5932000 	ldr	r2, [r3]
  127da8:	e51b3010 	ldr	r3, [fp, #-16]
  127dac:	e583200c 	str	r2, [r3, #12]
          udp_pcbs = pcb;
  127db0:	e30c3c38 	movw	r3, #52280	; 0xcc38
  127db4:	e3403015 	movt	r3, #21
  127db8:	e51b2010 	ldr	r2, [fp, #-16]
  127dbc:	e5832000 	str	r2, [r3]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
  127dc0:	ea000010 	b	127e08 <udp_input+0x290>
          UDP_STATS_INC(udp.cachehit);
  127dc4:	e30c3a30 	movw	r3, #51760	; 0xca30
  127dc8:	e3403015 	movt	r3, #21
  127dcc:	e1d33aba 	ldrh	r3, [r3, #170]	; 0xaa
  127dd0:	e2833001 	add	r3, r3, #1
  127dd4:	e6ff2073 	uxth	r2, r3
  127dd8:	e30c3a30 	movw	r3, #51760	; 0xca30
  127ddc:	e3403015 	movt	r3, #21
  127de0:	e1c32aba 	strh	r2, [r3, #170]	; 0xaa
        break;
  127de4:	ea000007 	b	127e08 <udp_input+0x290>
      }
    }

    prev = pcb;
  127de8:	e51b3010 	ldr	r3, [fp, #-16]
  127dec:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  127df0:	e51b3010 	ldr	r3, [fp, #-16]
  127df4:	e593300c 	ldr	r3, [r3, #12]
  127df8:	e50b3010 	str	r3, [fp, #-16]
  127dfc:	e51b3010 	ldr	r3, [fp, #-16]
  127e00:	e3530000 	cmp	r3, #0
  127e04:	1affffaf 	bne	127cc8 <udp_input+0x150>
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
  127e08:	e51b3010 	ldr	r3, [fp, #-16]
  127e0c:	e3530000 	cmp	r3, #0
  127e10:	1a000001 	bne	127e1c <udp_input+0x2a4>
    pcb = uncon_pcb;
  127e14:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  127e18:	e50b3010 	str	r3, [fp, #-16]
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
  127e1c:	e51b3010 	ldr	r3, [fp, #-16]
  127e20:	e3530000 	cmp	r3, #0
  127e24:	0a000002 	beq	127e34 <udp_input+0x2bc>
    for_us = 1;
  127e28:	e3a03001 	mov	r3, #1
  127e2c:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  127e30:	ea00000a 	b	127e60 <udp_input+0x2e8>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
  127e34:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  127e38:	e2833004 	add	r3, r3, #4
  127e3c:	e5932000 	ldr	r2, [r3]
  127e40:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  127e44:	e3403014 	movt	r3, #20
  127e48:	e5933014 	ldr	r3, [r3, #20]
  127e4c:	e1520003 	cmp	r2, r3
  127e50:	03a03001 	moveq	r3, #1
  127e54:	13a03000 	movne	r3, #0
  127e58:	e6ef3073 	uxtb	r3, r3
  127e5c:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
  127e60:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
  127e64:	e3530000 	cmp	r3, #0
  127e68:	0a000079 	beq	128054 <udp_input+0x4dc>
          goto chkerr;
        }
      } else
#endif /* LWIP_UDPLITE */
      {
        if (udphdr->chksum != 0) {
  127e6c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  127e70:	e1d330b6 	ldrh	r3, [r3, #6]
  127e74:	e6ff3073 	uxth	r3, r3
  127e78:	e3530000 	cmp	r3, #0
  127e7c:	0a00000a 	beq	127eac <udp_input+0x334>
          if (ip_chksum_pseudo(p, IP_PROTO_UDP, p->tot_len,
  127e80:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  127e84:	e1d320b8 	ldrh	r2, [r3, #8]
  127e88:	e59f3244 	ldr	r3, [pc, #580]	; 1280d4 <udp_input+0x55c>
  127e8c:	e58d3000 	str	r3, [sp]
  127e90:	e59f3240 	ldr	r3, [pc, #576]	; 1280d8 <udp_input+0x560>
  127e94:	e3a01011 	mov	r1, #17
  127e98:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  127e9c:	ebffc1eb 	bl	118650 <ip_chksum_pseudo>
  127ea0:	e1a03000 	mov	r3, r0
  127ea4:	e3530000 	cmp	r3, #0
  127ea8:	1a00006d 	bne	128064 <udp_input+0x4ec>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
  127eac:	e3e01007 	mvn	r1, #7
  127eb0:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  127eb4:	ebffcbdf 	bl	11ae38 <pbuf_header>
  127eb8:	e1a03000 	mov	r3, r0
  127ebc:	e3530000 	cmp	r3, #0
  127ec0:	0a000018 	beq	127f28 <udp_input+0x3b0>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
  127ec4:	e3080ac0 	movw	r0, #35520	; 0x8ac0
  127ec8:	e3400014 	movt	r0, #20
  127ecc:	ebff6c90 	bl	103114 <rt_kprintf>
  127ed0:	e3001155 	movw	r1, #341	; 0x155
  127ed4:	e3080ad4 	movw	r0, #35540	; 0x8ad4
  127ed8:	e3400014 	movt	r0, #20
  127edc:	ebff8c83 	bl	10b0f0 <sys_arch_assert>
      UDP_STATS_INC(udp.drop);
  127ee0:	e30c3a30 	movw	r3, #51760	; 0xca30
  127ee4:	e3403015 	movt	r3, #21
  127ee8:	e1d339ba 	ldrh	r3, [r3, #154]	; 0x9a
  127eec:	e2833001 	add	r3, r3, #1
  127ef0:	e6ff2073 	uxth	r2, r3
  127ef4:	e30c3a30 	movw	r3, #51760	; 0xca30
  127ef8:	e3403015 	movt	r3, #21
  127efc:	e1c329ba 	strh	r2, [r3, #154]	; 0x9a
      MIB2_STATS_INC(mib2.udpinerrors);
  127f00:	e30c3a30 	movw	r3, #51760	; 0xca30
  127f04:	e3403015 	movt	r3, #21
  127f08:	e5933198 	ldr	r3, [r3, #408]	; 0x198
  127f0c:	e2832001 	add	r2, r3, #1
  127f10:	e30c3a30 	movw	r3, #51760	; 0xca30
  127f14:	e3403015 	movt	r3, #21
  127f18:	e5832198 	str	r2, [r3, #408]	; 0x198
      pbuf_free(p);
  127f1c:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  127f20:	ebffcbe2 	bl	11aeb0 <pbuf_free>
      goto end;
  127f24:	ea00004d 	b	128060 <udp_input+0x4e8>
    }

    if (pcb != NULL) {
  127f28:	e51b3010 	ldr	r3, [fp, #-16]
  127f2c:	e3530000 	cmp	r3, #0
  127f30:	0a000018 	beq	127f98 <udp_input+0x420>
      MIB2_STATS_INC(mib2.udpindatagrams);
  127f34:	e30c3a30 	movw	r3, #51760	; 0xca30
  127f38:	e3403015 	movt	r3, #21
  127f3c:	e5933190 	ldr	r3, [r3, #400]	; 0x190
  127f40:	e2832001 	add	r2, r3, #1
  127f44:	e30c3a30 	movw	r3, #51760	; 0xca30
  127f48:	e3403015 	movt	r3, #21
  127f4c:	e5832190 	str	r2, [r3, #400]	; 0x190
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
  127f50:	e51b3010 	ldr	r3, [fp, #-16]
  127f54:	e5933020 	ldr	r3, [r3, #32]
  127f58:	e3530000 	cmp	r3, #0
  127f5c:	0a00000a 	beq	127f8c <udp_input+0x414>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
  127f60:	e51b3010 	ldr	r3, [fp, #-16]
  127f64:	e5934020 	ldr	r4, [r3, #32]
  127f68:	e51b3010 	ldr	r3, [fp, #-16]
  127f6c:	e5930024 	ldr	r0, [r3, #36]	; 0x24
  127f70:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  127f74:	e58d3000 	str	r3, [sp]
  127f78:	e59f3158 	ldr	r3, [pc, #344]	; 1280d8 <udp_input+0x560>
  127f7c:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  127f80:	e51b1010 	ldr	r1, [fp, #-16]
  127f84:	e12fff34 	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
  127f88:	ea00004f 	b	1280cc <udp_input+0x554>
        pbuf_free(p);
  127f8c:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  127f90:	ebffcbc6 	bl	11aeb0 <pbuf_free>
        goto end;
  127f94:	ea000031 	b	128060 <udp_input+0x4e8>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
  127f98:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  127f9c:	e3530000 	cmp	r3, #0
  127fa0:	1a000011 	bne	127fec <udp_input+0x474>
  127fa4:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  127fa8:	e3403014 	movt	r3, #20
  127fac:	e5933014 	ldr	r3, [r3, #20]
  127fb0:	e20330f0 	and	r3, r3, #240	; 0xf0
  127fb4:	e35300e0 	cmp	r3, #224	; 0xe0
  127fb8:	0a00000b 	beq	127fec <udp_input+0x474>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
  127fbc:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  127fc0:	e3403014 	movt	r3, #20
  127fc4:	e1d330bc 	ldrh	r3, [r3, #12]
  127fc8:	e2833008 	add	r3, r3, #8
  127fcc:	e6ff3073 	uxth	r3, r3
  127fd0:	e6bf3073 	sxth	r3, r3
  127fd4:	e1a01003 	mov	r1, r3
  127fd8:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  127fdc:	ebffcba4 	bl	11ae74 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
  127fe0:	e3a01003 	mov	r1, #3
  127fe4:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  127fe8:	eb001f27 	bl	12fc8c <icmp_dest_unreach>
      UDP_STATS_INC(udp.proterr);
  127fec:	e30c3a30 	movw	r3, #51760	; 0xca30
  127ff0:	e3403015 	movt	r3, #21
  127ff4:	e1d33ab4 	ldrh	r3, [r3, #164]	; 0xa4
  127ff8:	e2833001 	add	r3, r3, #1
  127ffc:	e6ff2073 	uxth	r2, r3
  128000:	e30c3a30 	movw	r3, #51760	; 0xca30
  128004:	e3403015 	movt	r3, #21
  128008:	e1c32ab4 	strh	r2, [r3, #164]	; 0xa4
      UDP_STATS_INC(udp.drop);
  12800c:	e30c3a30 	movw	r3, #51760	; 0xca30
  128010:	e3403015 	movt	r3, #21
  128014:	e1d339ba 	ldrh	r3, [r3, #154]	; 0x9a
  128018:	e2833001 	add	r3, r3, #1
  12801c:	e6ff2073 	uxth	r2, r3
  128020:	e30c3a30 	movw	r3, #51760	; 0xca30
  128024:	e3403015 	movt	r3, #21
  128028:	e1c329ba 	strh	r2, [r3, #154]	; 0x9a
      MIB2_STATS_INC(mib2.udpnoports);
  12802c:	e30c3a30 	movw	r3, #51760	; 0xca30
  128030:	e3403015 	movt	r3, #21
  128034:	e5933194 	ldr	r3, [r3, #404]	; 0x194
  128038:	e2832001 	add	r2, r3, #1
  12803c:	e30c3a30 	movw	r3, #51760	; 0xca30
  128040:	e3403015 	movt	r3, #21
  128044:	e5832194 	str	r2, [r3, #404]	; 0x194
      pbuf_free(p);
  128048:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  12804c:	ebffcb97 	bl	11aeb0 <pbuf_free>
  return;
  128050:	ea00001d 	b	1280cc <udp_input+0x554>
    pbuf_free(p);
  128054:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  128058:	ebffcb94 	bl	11aeb0 <pbuf_free>
  return;
  12805c:	ea00001a 	b	1280cc <udp_input+0x554>
  128060:	ea000019 	b	1280cc <udp_input+0x554>
            goto chkerr;
  128064:	e320f000 	nop	{0}
#if CHECKSUM_CHECK_UDP
chkerr:
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
              ("udp_input: UDP (or UDP Lite) datagram discarded due to failing checksum\n"));
  UDP_STATS_INC(udp.chkerr);
  128068:	e30c3a30 	movw	r3, #51760	; 0xca30
  12806c:	e3403015 	movt	r3, #21
  128070:	e1d339bc 	ldrh	r3, [r3, #156]	; 0x9c
  128074:	e2833001 	add	r3, r3, #1
  128078:	e6ff2073 	uxth	r2, r3
  12807c:	e30c3a30 	movw	r3, #51760	; 0xca30
  128080:	e3403015 	movt	r3, #21
  128084:	e1c329bc 	strh	r2, [r3, #156]	; 0x9c
  UDP_STATS_INC(udp.drop);
  128088:	e30c3a30 	movw	r3, #51760	; 0xca30
  12808c:	e3403015 	movt	r3, #21
  128090:	e1d339ba 	ldrh	r3, [r3, #154]	; 0x9a
  128094:	e2833001 	add	r3, r3, #1
  128098:	e6ff2073 	uxth	r2, r3
  12809c:	e30c3a30 	movw	r3, #51760	; 0xca30
  1280a0:	e3403015 	movt	r3, #21
  1280a4:	e1c329ba 	strh	r2, [r3, #154]	; 0x9a
  MIB2_STATS_INC(mib2.udpinerrors);
  1280a8:	e30c3a30 	movw	r3, #51760	; 0xca30
  1280ac:	e3403015 	movt	r3, #21
  1280b0:	e5933198 	ldr	r3, [r3, #408]	; 0x198
  1280b4:	e2832001 	add	r2, r3, #1
  1280b8:	e30c3a30 	movw	r3, #51760	; 0xca30
  1280bc:	e3403015 	movt	r3, #21
  1280c0:	e5832198 	str	r2, [r3, #408]	; 0x198
  pbuf_free(p);
  1280c4:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  1280c8:	ebffcb78 	bl	11aeb0 <pbuf_free>
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
  1280cc:	e24bd008 	sub	sp, fp, #8
  1280d0:	e8bd8810 	pop	{r4, fp, pc}
  1280d4:	0014f60c 	.word	0x0014f60c
  1280d8:	0014f608 	.word	0x0014f608

001280dc <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
  1280dc:	e92d4800 	push	{fp, lr}
  1280e0:	e28db004 	add	fp, sp, #4
  1280e4:	e24dd008 	sub	sp, sp, #8
  1280e8:	e50b0008 	str	r0, [fp, #-8]
  1280ec:	e50b100c 	str	r1, [fp, #-12]
  if ((pcb == NULL) || IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
  1280f0:	e51b3008 	ldr	r3, [fp, #-8]
  1280f4:	e3530000 	cmp	r3, #0
  1280f8:	1a000001 	bne	128104 <udp_send+0x28>
    return ERR_VAL;
  1280fc:	e3e03005 	mvn	r3, #5
  128100:	ea000007 	b	128124 <udp_send+0x48>
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
  128104:	e51b3008 	ldr	r3, [fp, #-8]
  128108:	e2832004 	add	r2, r3, #4
  12810c:	e51b3008 	ldr	r3, [fp, #-8]
  128110:	e1d331b4 	ldrh	r3, [r3, #20]
  128114:	e51b100c 	ldr	r1, [fp, #-12]
  128118:	e51b0008 	ldr	r0, [fp, #-8]
  12811c:	eb000003 	bl	128130 <udp_sendto>
  128120:	e1a03000 	mov	r3, r0
}
  128124:	e1a00003 	mov	r0, r3
  128128:	e24bd004 	sub	sp, fp, #4
  12812c:	e8bd8800 	pop	{fp, pc}

00128130 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port)
{
  128130:	e92d4800 	push	{fp, lr}
  128134:	e28db004 	add	fp, sp, #4
  128138:	e24dd020 	sub	sp, sp, #32
  12813c:	e50b0010 	str	r0, [fp, #-16]
  128140:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  128144:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  128148:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
udp_sendto_chksum(struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *dst_ip,
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;
  const ip_addr_t *dst_ip_route = dst_ip;
  12814c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128150:	e50b3008 	str	r3, [fp, #-8]

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
  128154:	e51b3010 	ldr	r3, [fp, #-16]
  128158:	e3530000 	cmp	r3, #0
  12815c:	0a000002 	beq	12816c <udp_sendto+0x3c>
  128160:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128164:	e3530000 	cmp	r3, #0
  128168:	1a000001 	bne	128174 <udp_sendto+0x44>
    return ERR_VAL;
  12816c:	e3e03005 	mvn	r3, #5
  128170:	ea00002b 	b	128224 <udp_sendto+0xf4>
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

#if LWIP_IPV6 || (LWIP_IPV4 && LWIP_MULTICAST_TX_OPTIONS)
  if (ip_addr_ismulticast(dst_ip_route)) {
  128174:	e51b3008 	ldr	r3, [fp, #-8]
  128178:	e5933000 	ldr	r3, [r3]
  12817c:	e20330f0 	and	r3, r3, #240	; 0xf0
  128180:	e35300e0 	cmp	r3, #224	; 0xe0
  128184:	1a00000d 	bne	1281c0 <udp_sendto+0x90>
#if LWIP_IPV4 && LWIP_MULTICAST_TX_OPTIONS
      /* IPv4 does not use source-based routing by default, so we use an
         administratively selected interface for multicast by default.
         However, this can be overridden by setting an interface address
         in pcb->multicast_ip that is used for routing. */
      if (!ip_addr_isany_val(pcb->multicast_ip) &&
  128188:	e51b3010 	ldr	r3, [fp, #-16]
  12818c:	e5933018 	ldr	r3, [r3, #24]
  128190:	e3530000 	cmp	r3, #0
  128194:	0a000009 	beq	1281c0 <udp_sendto+0x90>
          !ip4_addr_cmp(ip_2_ip4(&pcb->multicast_ip), IP4_ADDR_BROADCAST)) {
  128198:	e51b3010 	ldr	r3, [fp, #-16]
  12819c:	e5932018 	ldr	r2, [r3, #24]
  1281a0:	e309390c 	movw	r3, #39180	; 0x990c
  1281a4:	e3403014 	movt	r3, #20
  1281a8:	e5933000 	ldr	r3, [r3]
      if (!ip_addr_isany_val(pcb->multicast_ip) &&
  1281ac:	e1520003 	cmp	r2, r3
  1281b0:	0a000002 	beq	1281c0 <udp_sendto+0x90>
        dst_ip_route = &pcb->multicast_ip;
  1281b4:	e51b3010 	ldr	r3, [fp, #-16]
  1281b8:	e2833018 	add	r3, r3, #24
  1281bc:	e50b3008 	str	r3, [fp, #-8]
  /* find the outgoing network interface for this packet */
  if(IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    /* Don't call ip_route() with IP_ANY_TYPE */
    netif = ip_route(IP46_ADDR_ANY(IP_GET_TYPE(dst_ip_route)), dst_ip_route);
  } else {
    netif = ip_route(&pcb->local_ip, dst_ip_route);
  1281c0:	e51b0008 	ldr	r0, [fp, #-8]
  1281c4:	eb0023f2 	bl	131194 <ip4_route>
  1281c8:	e50b000c 	str	r0, [fp, #-12]
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
  1281cc:	e51b300c 	ldr	r3, [fp, #-12]
  1281d0:	e3530000 	cmp	r3, #0
  1281d4:	1a000009 	bne	128200 <udp_sendto+0xd0>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
  1281d8:	e30c3a30 	movw	r3, #51760	; 0xca30
  1281dc:	e3403015 	movt	r3, #21
  1281e0:	e1d33ab2 	ldrh	r3, [r3, #162]	; 0xa2
  1281e4:	e2833001 	add	r3, r3, #1
  1281e8:	e6ff2073 	uxth	r2, r3
  1281ec:	e30c3a30 	movw	r3, #51760	; 0xca30
  1281f0:	e3403015 	movt	r3, #21
  1281f4:	e1c32ab2 	strh	r2, [r3, #162]	; 0xa2
    return ERR_RTE;
  1281f8:	e3e03003 	mvn	r3, #3
  1281fc:	ea000008 	b	128224 <udp_sendto+0xf4>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
  128200:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
  128204:	e51b300c 	ldr	r3, [fp, #-12]
  128208:	e58d3000 	str	r3, [sp]
  12820c:	e1a03002 	mov	r3, r2
  128210:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  128214:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  128218:	e51b0010 	ldr	r0, [fp, #-16]
  12821c:	eb000003 	bl	128230 <udp_sendto_if>
  128220:	e1a03000 	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
  128224:	e1a00003 	mov	r0, r3
  128228:	e24bd004 	sub	sp, fp, #4
  12822c:	e8bd8800 	pop	{fp, pc}

00128230 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
  128230:	e92d4800 	push	{fp, lr}
  128234:	e28db004 	add	fp, sp, #4
  128238:	e24dd020 	sub	sp, sp, #32
  12823c:	e50b0010 	str	r0, [fp, #-16]
  128240:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  128244:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  128248:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
  12824c:	e51b3010 	ldr	r3, [fp, #-16]
  128250:	e3530000 	cmp	r3, #0
  128254:	0a000002 	beq	128264 <udp_sendto_if+0x34>
  128258:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12825c:	e3530000 	cmp	r3, #0
  128260:	1a000001 	bne	12826c <udp_sendto_if+0x3c>
    return ERR_VAL;
  128264:	e3e03005 	mvn	r3, #5
  128268:	ea000025 	b	128304 <udp_sendto_if+0xd4>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
  12826c:	e51b3010 	ldr	r3, [fp, #-16]
  128270:	e3530000 	cmp	r3, #0
  128274:	0a000008 	beq	12829c <udp_sendto_if+0x6c>
  128278:	e51b3010 	ldr	r3, [fp, #-16]
  12827c:	e5933000 	ldr	r3, [r3]
  128280:	e3530000 	cmp	r3, #0
  128284:	0a000004 	beq	12829c <udp_sendto_if+0x6c>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
  128288:	e51b3010 	ldr	r3, [fp, #-16]
  12828c:	e5933000 	ldr	r3, [r3]
  128290:	e20330f0 	and	r3, r3, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
  128294:	e35300e0 	cmp	r3, #224	; 0xe0
  128298:	1a000003 	bne	1282ac <udp_sendto_if+0x7c>
    /* if the local_ip is any or multicast
     * use the outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
  12829c:	e59b3004 	ldr	r3, [fp, #4]
  1282a0:	e2833004 	add	r3, r3, #4
  1282a4:	e50b3008 	str	r3, [fp, #-8]
  1282a8:	ea00000a 	b	1282d8 <udp_sendto_if+0xa8>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
  1282ac:	e51b3010 	ldr	r3, [fp, #-16]
  1282b0:	e5932000 	ldr	r2, [r3]
  1282b4:	e59b3004 	ldr	r3, [fp, #4]
  1282b8:	e2833004 	add	r3, r3, #4
  1282bc:	e5933000 	ldr	r3, [r3]
  1282c0:	e1520003 	cmp	r2, r3
  1282c4:	0a000001 	beq	1282d0 <udp_sendto_if+0xa0>
      /* local_ip doesn't match, drop the packet */
      return ERR_RTE;
  1282c8:	e3e03003 	mvn	r3, #3
  1282cc:	ea00000c 	b	128304 <udp_sendto_if+0xd4>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &pcb->local_ip;
  1282d0:	e51b3010 	ldr	r3, [fp, #-16]
  1282d4:	e50b3008 	str	r3, [fp, #-8]
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
  1282d8:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
  1282dc:	e51b3008 	ldr	r3, [fp, #-8]
  1282e0:	e58d3004 	str	r3, [sp, #4]
  1282e4:	e59b3004 	ldr	r3, [fp, #4]
  1282e8:	e58d3000 	str	r3, [sp]
  1282ec:	e1a03002 	mov	r3, r2
  1282f0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1282f4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1282f8:	e51b0010 	ldr	r0, [fp, #-16]
  1282fc:	eb000003 	bl	128310 <udp_sendto_if_src>
  128300:	e1a03000 	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
  128304:	e1a00003 	mov	r0, r3
  128308:	e24bd004 	sub	sp, fp, #4
  12830c:	e8bd8800 	pop	{fp, pc}

00128310 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
  128310:	e92d4800 	push	{fp, lr}
  128314:	e28db004 	add	fp, sp, #4
  128318:	e24dd030 	sub	sp, sp, #48	; 0x30
  12831c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  128320:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  128324:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  128328:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
  12832c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128330:	e3530000 	cmp	r3, #0
  128334:	0a000002 	beq	128344 <udp_sendto_if_src+0x34>
  128338:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12833c:	e3530000 	cmp	r3, #0
  128340:	1a000001 	bne	12834c <udp_sendto_if_src+0x3c>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
  128344:	e3e03005 	mvn	r3, #5
  128348:	ea0000be 	b	128648 <udp_sendto_if_src+0x338>
  }

#if LWIP_IPV4 && IP_SOF_BROADCAST
  /* broadcast filter? */
  if (!ip_get_option(pcb, SOF_BROADCAST) &&
  12834c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128350:	e5d33008 	ldrb	r3, [r3, #8]
  128354:	e2033020 	and	r3, r3, #32
  128358:	e3530000 	cmp	r3, #0
  12835c:	1a000009 	bne	128388 <udp_sendto_if_src+0x78>
#if LWIP_IPV6
      IP_IS_V4(dst_ip) &&
#endif /* LWIP_IPV6 */
      ip_addr_isbroadcast(dst_ip, netif)) {
  128360:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  128364:	e5933000 	ldr	r3, [r3]
  128368:	e59b1004 	ldr	r1, [fp, #4]
  12836c:	e1a00003 	mov	r0, r3
  128370:	eb002866 	bl	132510 <ip4_addr_isbroadcast_u32>
  128374:	e1a03000 	mov	r3, r0
  if (!ip_get_option(pcb, SOF_BROADCAST) &&
  128378:	e3530000 	cmp	r3, #0
  12837c:	0a000001 	beq	128388 <udp_sendto_if_src+0x78>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("udp_sendto_if: SOF_BROADCAST not enabled on pcb %p\n", (void *)pcb));
    return ERR_VAL;
  128380:	e3e03005 	mvn	r3, #5
  128384:	ea0000af 	b	128648 <udp_sendto_if_src+0x338>
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
  128388:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12838c:	e1d331b2 	ldrh	r3, [r3, #18]
  128390:	e3530000 	cmp	r3, #0
  128394:	1a00000c 	bne	1283cc <udp_sendto_if_src+0xbc>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
  128398:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  12839c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1283a0:	e1d331b2 	ldrh	r3, [r3, #18]
  1283a4:	e1a02003 	mov	r2, r3
  1283a8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1283ac:	eb0000a8 	bl	128654 <udp_bind>
  1283b0:	e1a03000 	mov	r3, r0
  1283b4:	e54b300b 	strb	r3, [fp, #-11]
    if (err != ERR_OK) {
  1283b8:	e15b30db 	ldrsb	r3, [fp, #-11]
  1283bc:	e3530000 	cmp	r3, #0
  1283c0:	0a000001 	beq	1283cc <udp_sendto_if_src+0xbc>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
  1283c4:	e15b30db 	ldrsb	r3, [fp, #-11]
  1283c8:	ea00009e 	b	128648 <udp_sendto_if_src+0x338>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
  1283cc:	e3a01008 	mov	r1, #8
  1283d0:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  1283d4:	ebffca97 	bl	11ae38 <pbuf_header>
  1283d8:	e1a03000 	mov	r3, r0
  1283dc:	e3530000 	cmp	r3, #0
  1283e0:	0a000011 	beq	12842c <udp_sendto_if_src+0x11c>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
  1283e4:	e3a02000 	mov	r2, #0
  1283e8:	e3a01008 	mov	r1, #8
  1283ec:	e3a00001 	mov	r0, #1
  1283f0:	ebffc7a7 	bl	11a294 <pbuf_alloc>
  1283f4:	e50b0008 	str	r0, [fp, #-8]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
  1283f8:	e51b3008 	ldr	r3, [fp, #-8]
  1283fc:	e3530000 	cmp	r3, #0
  128400:	1a000001 	bne	12840c <udp_sendto_if_src+0xfc>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
  128404:	e3e03000 	mvn	r3, #0
  128408:	ea00008e 	b	128648 <udp_sendto_if_src+0x338>
    }
    if (p->tot_len != 0) {
  12840c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  128410:	e1d330b8 	ldrh	r3, [r3, #8]
  128414:	e3530000 	cmp	r3, #0
  128418:	0a000005 	beq	128434 <udp_sendto_if_src+0x124>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
  12841c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  128420:	e51b0008 	ldr	r0, [fp, #-8]
  128424:	ebffcba2 	bl	11b2b4 <pbuf_chain>
  128428:	ea000001 	b	128434 <udp_sendto_if_src+0x124>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
  12842c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  128430:	e50b3008 	str	r3, [fp, #-8]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
  128434:	e51b3008 	ldr	r3, [fp, #-8]
  128438:	e1d330ba 	ldrh	r3, [r3, #10]
  12843c:	e3530007 	cmp	r3, #7
  128440:	8a000006 	bhi	128460 <udp_sendto_if_src+0x150>
  128444:	e3080b00 	movw	r0, #35584	; 0x8b00
  128448:	e3400014 	movt	r0, #20
  12844c:	ebff6b30 	bl	103114 <rt_kprintf>
  128450:	e3a01fb7 	mov	r1, #732	; 0x2dc
  128454:	e3080ad4 	movw	r0, #35540	; 0x8ad4
  128458:	e3400014 	movt	r0, #20
  12845c:	ebff8b23 	bl	10b0f0 <sys_arch_assert>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
  128460:	e51b3008 	ldr	r3, [fp, #-8]
  128464:	e5933004 	ldr	r3, [r3, #4]
  128468:	e50b3010 	str	r3, [fp, #-16]
  udphdr->src = lwip_htons(pcb->local_port);
  12846c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128470:	e1d331b2 	ldrh	r3, [r3, #18]
  128474:	e1a00003 	mov	r0, r3
  128478:	ebffb855 	bl	1165d4 <lwip_htons>
  12847c:	e1a03000 	mov	r3, r0
  128480:	e1a02003 	mov	r2, r3
  128484:	e51b3010 	ldr	r3, [fp, #-16]
  128488:	e1c320b0 	strh	r2, [r3]
  udphdr->dest = lwip_htons(dst_port);
  12848c:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  128490:	e1a00003 	mov	r0, r3
  128494:	ebffb84e 	bl	1165d4 <lwip_htons>
  128498:	e1a03000 	mov	r3, r0
  12849c:	e1a02003 	mov	r2, r3
  1284a0:	e51b3010 	ldr	r3, [fp, #-16]
  1284a4:	e1c320b2 	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
  1284a8:	e51b3010 	ldr	r3, [fp, #-16]
  1284ac:	e3a02000 	mov	r2, #0
  1284b0:	e5c32006 	strb	r2, [r3, #6]
  1284b4:	e3a02000 	mov	r2, #0
  1284b8:	e5c32007 	strb	r2, [r3, #7]

  /* Multicast Loop? */
#if (LWIP_IPV4 && LWIP_MULTICAST_TX_OPTIONS) || (LWIP_IPV6 && LWIP_IPV6_MLD)
  if (((pcb->flags & UDP_FLAGS_MULTICAST_LOOP) != 0) && ip_addr_ismulticast(dst_ip)) {
  1284bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1284c0:	e5d33010 	ldrb	r3, [r3, #16]
  1284c4:	e2033008 	and	r3, r3, #8
  1284c8:	e3530000 	cmp	r3, #0
  1284cc:	0a00000a 	beq	1284fc <udp_sendto_if_src+0x1ec>
  1284d0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1284d4:	e5933000 	ldr	r3, [r3]
  1284d8:	e20330f0 	and	r3, r3, #240	; 0xf0
  1284dc:	e35300e0 	cmp	r3, #224	; 0xe0
  1284e0:	1a000005 	bne	1284fc <udp_sendto_if_src+0x1ec>
    q->flags |= PBUF_FLAG_MCASTLOOP;
  1284e4:	e51b3008 	ldr	r3, [fp, #-8]
  1284e8:	e5d3300d 	ldrb	r3, [r3, #13]
  1284ec:	e3833004 	orr	r3, r3, #4
  1284f0:	e6ef2073 	uxtb	r2, r3
  1284f4:	e51b3008 	ldr	r3, [fp, #-8]
  1284f8:	e5c3200d 	strb	r2, [r3, #13]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
  1284fc:	e51b3008 	ldr	r3, [fp, #-8]
  128500:	e1d330b8 	ldrh	r3, [r3, #8]
  128504:	e1a00003 	mov	r0, r3
  128508:	ebffb831 	bl	1165d4 <lwip_htons>
  12850c:	e1a03000 	mov	r3, r0
  128510:	e1a02003 	mov	r2, r3
  128514:	e51b3010 	ldr	r3, [fp, #-16]
  128518:	e1c320b4 	strh	r2, [r3, #4]
    /* calculate checksum */
#if CHECKSUM_GEN_UDP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_UDP) {
      /* Checksum is mandatory over IPv6. */
      if (IP_IS_V6(dst_ip) || (pcb->flags & UDP_FLAGS_NOCHKSUM) == 0) {
  12851c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128520:	e5d33010 	ldrb	r3, [r3, #16]
  128524:	e2033001 	and	r3, r3, #1
  128528:	e3530000 	cmp	r3, #0
  12852c:	1a000011 	bne	128578 <udp_sendto_if_src+0x268>
          acc = udpchksum + (u16_t)~(chksum);
          udpchksum = FOLD_U32T(acc);
        } else
#endif /* LWIP_CHECKSUM_ON_COPY */
        {
          udpchksum = ip_chksum_pseudo(q, IP_PROTO_UDP, q->tot_len,
  128530:	e51b3008 	ldr	r3, [fp, #-8]
  128534:	e1d320b8 	ldrh	r2, [r3, #8]
  128538:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12853c:	e58d3000 	str	r3, [sp]
  128540:	e59b3008 	ldr	r3, [fp, #8]
  128544:	e3a01011 	mov	r1, #17
  128548:	e51b0008 	ldr	r0, [fp, #-8]
  12854c:	ebffc03f 	bl	118650 <ip_chksum_pseudo>
  128550:	e1a03000 	mov	r3, r0
  128554:	e14b30ba 	strh	r3, [fp, #-10]
            src_ip, dst_ip);
        }

        /* chksum zero must become 0xffff, as zero means 'no checksum' */
        if (udpchksum == 0x0000) {
  128558:	e15b30ba 	ldrh	r3, [fp, #-10]
  12855c:	e3530000 	cmp	r3, #0
  128560:	1a000001 	bne	12856c <udp_sendto_if_src+0x25c>
          udpchksum = 0xffff;
  128564:	e3e03000 	mvn	r3, #0
  128568:	e14b30ba 	strh	r3, [fp, #-10]
        }
        udphdr->chksum = udpchksum;
  12856c:	e51b3010 	ldr	r3, [fp, #-16]
  128570:	e15b20ba 	ldrh	r2, [fp, #-10]
  128574:	e1c320b6 	strh	r2, [r3, #6]
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
  128578:	e3a03011 	mov	r3, #17
  12857c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  }

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
  128580:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  128584:	e5933000 	ldr	r3, [r3]
  128588:	e20330f0 	and	r3, r3, #240	; 0xf0
  12858c:	e35300e0 	cmp	r3, #224	; 0xe0
  128590:	1a000002 	bne	1285a0 <udp_sendto_if_src+0x290>
  128594:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128598:	e5d3301c 	ldrb	r3, [r3, #28]
  12859c:	ea000001 	b	1285a8 <udp_sendto_if_src+0x298>
  1285a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1285a4:	e5d3300a 	ldrb	r3, [r3, #10]
  1285a8:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
  1285ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1285b0:	e5d33009 	ldrb	r3, [r3, #9]
  1285b4:	e55b1012 	ldrb	r1, [fp, #-18]	; 0xffffffee
  1285b8:	e59b2004 	ldr	r2, [fp, #4]
  1285bc:	e58d2008 	str	r2, [sp, #8]
  1285c0:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  1285c4:	e58d2004 	str	r2, [sp, #4]
  1285c8:	e58d3000 	str	r3, [sp]
  1285cc:	e1a03001 	mov	r3, r1
  1285d0:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1285d4:	e59b1008 	ldr	r1, [fp, #8]
  1285d8:	e51b0008 	ldr	r0, [fp, #-8]
  1285dc:	eb00260a 	bl	131e0c <ip4_output_if_src>
  1285e0:	e1a03000 	mov	r3, r0
  1285e4:	e54b300b 	strb	r3, [fp, #-11]
  NETIF_SET_HWADDRHINT(netif, NULL);

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);
  1285e8:	e30c3a30 	movw	r3, #51760	; 0xca30
  1285ec:	e3403015 	movt	r3, #21
  1285f0:	e593319c 	ldr	r3, [r3, #412]	; 0x19c
  1285f4:	e2832001 	add	r2, r3, #1
  1285f8:	e30c3a30 	movw	r3, #51760	; 0xca30
  1285fc:	e3403015 	movt	r3, #21
  128600:	e583219c 	str	r2, [r3, #412]	; 0x19c

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
  128604:	e51b2008 	ldr	r2, [fp, #-8]
  128608:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12860c:	e1520003 	cmp	r2, r3
  128610:	0a000003 	beq	128624 <udp_sendto_if_src+0x314>
    /* free the header pbuf */
    pbuf_free(q);
  128614:	e51b0008 	ldr	r0, [fp, #-8]
  128618:	ebffca24 	bl	11aeb0 <pbuf_free>
    q = NULL;
  12861c:	e3a03000 	mov	r3, #0
  128620:	e50b3008 	str	r3, [fp, #-8]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  128624:	e30c3a30 	movw	r3, #51760	; 0xca30
  128628:	e3403015 	movt	r3, #21
  12862c:	e1d339b4 	ldrh	r3, [r3, #148]	; 0x94
  128630:	e2833001 	add	r3, r3, #1
  128634:	e6ff2073 	uxth	r2, r3
  128638:	e30c3a30 	movw	r3, #51760	; 0xca30
  12863c:	e3403015 	movt	r3, #21
  128640:	e1c329b4 	strh	r2, [r3, #148]	; 0x94
  return err;
  128644:	e15b30db 	ldrsb	r3, [fp, #-11]
}
  128648:	e1a00003 	mov	r0, r3
  12864c:	e24bd004 	sub	sp, fp, #4
  128650:	e8bd8800 	pop	{fp, pc}

00128654 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
  128654:	e92d4800 	push	{fp, lr}
  128658:	e28db004 	add	fp, sp, #4
  12865c:	e24dd018 	sub	sp, sp, #24
  128660:	e50b0010 	str	r0, [fp, #-16]
  128664:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  128668:	e1a03002 	mov	r3, r2
  12866c:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
  128670:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128674:	e3530000 	cmp	r3, #0
  128678:	1a000002 	bne	128688 <udp_bind+0x34>
    ipaddr = IP4_ADDR_ANY;
  12867c:	e3093908 	movw	r3, #39176	; 0x9908
  128680:	e3403014 	movt	r3, #20
  128684:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
  128688:	e51b3010 	ldr	r3, [fp, #-16]
  12868c:	e3530000 	cmp	r3, #0
  128690:	0a000002 	beq	1286a0 <udp_bind+0x4c>
  128694:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128698:	e3530000 	cmp	r3, #0
  12869c:	1a000001 	bne	1286a8 <udp_bind+0x54>
    return ERR_VAL;
  1286a0:	e3e03005 	mvn	r3, #5
  1286a4:	ea00005d 	b	128820 <udp_bind+0x1cc>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  1286a8:	e3a03000 	mov	r3, #0
  1286ac:	e54b3009 	strb	r3, [fp, #-9]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  1286b0:	e30c3c38 	movw	r3, #52280	; 0xcc38
  1286b4:	e3403015 	movt	r3, #21
  1286b8:	e5933000 	ldr	r3, [r3]
  1286bc:	e50b3008 	str	r3, [fp, #-8]
  1286c0:	ea000009 	b	1286ec <udp_bind+0x98>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
  1286c4:	e51b2010 	ldr	r2, [fp, #-16]
  1286c8:	e51b3008 	ldr	r3, [fp, #-8]
  1286cc:	e1520003 	cmp	r2, r3
  1286d0:	1a000002 	bne	1286e0 <udp_bind+0x8c>
      rebind = 1;
  1286d4:	e3a03001 	mov	r3, #1
  1286d8:	e54b3009 	strb	r3, [fp, #-9]
      break;
  1286dc:	ea000005 	b	1286f8 <udp_bind+0xa4>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  1286e0:	e51b3008 	ldr	r3, [fp, #-8]
  1286e4:	e593300c 	ldr	r3, [r3, #12]
  1286e8:	e50b3008 	str	r3, [fp, #-8]
  1286ec:	e51b3008 	ldr	r3, [fp, #-8]
  1286f0:	e3530000 	cmp	r3, #0
  1286f4:	1afffff2 	bne	1286c4 <udp_bind+0x70>
    }
  }

  /* no port specified? */
  if (port == 0) {
  1286f8:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  1286fc:	e3530000 	cmp	r3, #0
  128700:	1a000007 	bne	128724 <udp_bind+0xd0>
    port = udp_new_port();
  128704:	ebfffca8 	bl	1279ac <udp_new_port>
  128708:	e1a03000 	mov	r3, r0
  12870c:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
    if (port == 0) {
  128710:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  128714:	e3530000 	cmp	r3, #0
  128718:	1a000027 	bne	1287bc <udp_bind+0x168>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
  12871c:	e3e03007 	mvn	r3, #7
  128720:	ea00003e 	b	128820 <udp_bind+0x1cc>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  128724:	e30c3c38 	movw	r3, #52280	; 0xcc38
  128728:	e3403015 	movt	r3, #21
  12872c:	e5933000 	ldr	r3, [r3]
  128730:	e50b3008 	str	r3, [fp, #-8]
  128734:	ea00001d 	b	1287b0 <udp_bind+0x15c>
      if (pcb != ipcb) {
  128738:	e51b2010 	ldr	r2, [fp, #-16]
  12873c:	e51b3008 	ldr	r3, [fp, #-8]
  128740:	e1520003 	cmp	r2, r3
  128744:	0a000016 	beq	1287a4 <udp_bind+0x150>
      /* By default, we don't allow to bind to a port that any other udp
         PCB is already bound to, unless *all* PCBs with that port have tha
         REUSEADDR flag set. */
#if SO_REUSE
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
  128748:	e51b3010 	ldr	r3, [fp, #-16]
  12874c:	e5d33008 	ldrb	r3, [r3, #8]
  128750:	e2033004 	and	r3, r3, #4
  128754:	e3530000 	cmp	r3, #0
  128758:	0a000004 	beq	128770 <udp_bind+0x11c>
            !ip_get_option(ipcb, SOF_REUSEADDR))
  12875c:	e51b3008 	ldr	r3, [fp, #-8]
  128760:	e5d33008 	ldrb	r3, [r3, #8]
  128764:	e2033004 	and	r3, r3, #4
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
  128768:	e3530000 	cmp	r3, #0
  12876c:	1a00000c 	bne	1287a4 <udp_bind+0x150>
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
  128770:	e51b3008 	ldr	r3, [fp, #-8]
  128774:	e1d331b2 	ldrh	r3, [r3, #18]
  128778:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  12877c:	e1520003 	cmp	r2, r3
  128780:	1a000007 	bne	1287a4 <udp_bind+0x150>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
  128784:	e51b3008 	ldr	r3, [fp, #-8]
  128788:	e5932000 	ldr	r2, [r3]
  12878c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128790:	e5933000 	ldr	r3, [r3]
          if ((ipcb->local_port == port) &&
  128794:	e1520003 	cmp	r2, r3
  128798:	1a000001 	bne	1287a4 <udp_bind+0x150>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
  12879c:	e3e03007 	mvn	r3, #7
  1287a0:	ea00001e 	b	128820 <udp_bind+0x1cc>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  1287a4:	e51b3008 	ldr	r3, [fp, #-8]
  1287a8:	e593300c 	ldr	r3, [r3, #12]
  1287ac:	e50b3008 	str	r3, [fp, #-8]
  1287b0:	e51b3008 	ldr	r3, [fp, #-8]
  1287b4:	e3530000 	cmp	r3, #0
  1287b8:	1affffde 	bne	128738 <udp_bind+0xe4>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
  1287bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1287c0:	e3530000 	cmp	r3, #0
  1287c4:	0a000002 	beq	1287d4 <udp_bind+0x180>
  1287c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1287cc:	e5933000 	ldr	r3, [r3]
  1287d0:	ea000000 	b	1287d8 <udp_bind+0x184>
  1287d4:	e3a03000 	mov	r3, #0
  1287d8:	e51b2010 	ldr	r2, [fp, #-16]
  1287dc:	e5823000 	str	r3, [r2]

  pcb->local_port = port;
  1287e0:	e51b3010 	ldr	r3, [fp, #-16]
  1287e4:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  1287e8:	e1c321b2 	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
  1287ec:	e55b3009 	ldrb	r3, [fp, #-9]
  1287f0:	e3530000 	cmp	r3, #0
  1287f4:	1a000008 	bne	12881c <udp_bind+0x1c8>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
  1287f8:	e30c3c38 	movw	r3, #52280	; 0xcc38
  1287fc:	e3403015 	movt	r3, #21
  128800:	e5932000 	ldr	r2, [r3]
  128804:	e51b3010 	ldr	r3, [fp, #-16]
  128808:	e583200c 	str	r2, [r3, #12]
    udp_pcbs = pcb;
  12880c:	e30c3c38 	movw	r3, #52280	; 0xcc38
  128810:	e3403015 	movt	r3, #21
  128814:	e51b2010 	ldr	r2, [fp, #-16]
  128818:	e5832000 	str	r2, [r3]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
  12881c:	e3a03000 	mov	r3, #0
}
  128820:	e1a00003 	mov	r0, r3
  128824:	e24bd004 	sub	sp, fp, #4
  128828:	e8bd8800 	pop	{fp, pc}

0012882c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
  12882c:	e92d4800 	push	{fp, lr}
  128830:	e28db004 	add	fp, sp, #4
  128834:	e24dd018 	sub	sp, sp, #24
  128838:	e50b0010 	str	r0, [fp, #-16]
  12883c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  128840:	e1a03002 	mov	r3, r2
  128844:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
  128848:	e51b3010 	ldr	r3, [fp, #-16]
  12884c:	e3530000 	cmp	r3, #0
  128850:	0a000002 	beq	128860 <udp_connect+0x34>
  128854:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128858:	e3530000 	cmp	r3, #0
  12885c:	1a000001 	bne	128868 <udp_connect+0x3c>
    return ERR_VAL;
  128860:	e3e03005 	mvn	r3, #5
  128864:	ea00003d 	b	128960 <udp_connect+0x134>
  }

  if (pcb->local_port == 0) {
  128868:	e51b3010 	ldr	r3, [fp, #-16]
  12886c:	e1d331b2 	ldrh	r3, [r3, #18]
  128870:	e3530000 	cmp	r3, #0
  128874:	1a00000c 	bne	1288ac <udp_connect+0x80>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
  128878:	e51b1010 	ldr	r1, [fp, #-16]
  12887c:	e51b3010 	ldr	r3, [fp, #-16]
  128880:	e1d331b2 	ldrh	r3, [r3, #18]
  128884:	e1a02003 	mov	r2, r3
  128888:	e51b0010 	ldr	r0, [fp, #-16]
  12888c:	ebffff70 	bl	128654 <udp_bind>
  128890:	e1a03000 	mov	r3, r0
  128894:	e54b3009 	strb	r3, [fp, #-9]
    if (err != ERR_OK) {
  128898:	e15b30d9 	ldrsb	r3, [fp, #-9]
  12889c:	e3530000 	cmp	r3, #0
  1288a0:	0a000001 	beq	1288ac <udp_connect+0x80>
      return err;
  1288a4:	e15b30d9 	ldrsb	r3, [fp, #-9]
  1288a8:	ea00002c 	b	128960 <udp_connect+0x134>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
  1288ac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1288b0:	e3530000 	cmp	r3, #0
  1288b4:	0a000002 	beq	1288c4 <udp_connect+0x98>
  1288b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1288bc:	e5933000 	ldr	r3, [r3]
  1288c0:	ea000000 	b	1288c8 <udp_connect+0x9c>
  1288c4:	e3a03000 	mov	r3, #0
  1288c8:	e51b2010 	ldr	r2, [fp, #-16]
  1288cc:	e5823004 	str	r3, [r2, #4]
  pcb->remote_port = port;
  1288d0:	e51b3010 	ldr	r3, [fp, #-16]
  1288d4:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  1288d8:	e1c321b4 	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
  1288dc:	e51b3010 	ldr	r3, [fp, #-16]
  1288e0:	e5d33010 	ldrb	r3, [r3, #16]
  1288e4:	e3833004 	orr	r3, r3, #4
  1288e8:	e6ef2073 	uxtb	r2, r3
  1288ec:	e51b3010 	ldr	r3, [fp, #-16]
  1288f0:	e5c32010 	strb	r2, [r3, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  1288f4:	e30c3c38 	movw	r3, #52280	; 0xcc38
  1288f8:	e3403015 	movt	r3, #21
  1288fc:	e5933000 	ldr	r3, [r3]
  128900:	e50b3008 	str	r3, [fp, #-8]
  128904:	ea000008 	b	12892c <udp_connect+0x100>
    if (pcb == ipcb) {
  128908:	e51b2010 	ldr	r2, [fp, #-16]
  12890c:	e51b3008 	ldr	r3, [fp, #-8]
  128910:	e1520003 	cmp	r2, r3
  128914:	1a000001 	bne	128920 <udp_connect+0xf4>
      /* already on the list, just return */
      return ERR_OK;
  128918:	e3a03000 	mov	r3, #0
  12891c:	ea00000f 	b	128960 <udp_connect+0x134>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  128920:	e51b3008 	ldr	r3, [fp, #-8]
  128924:	e593300c 	ldr	r3, [r3, #12]
  128928:	e50b3008 	str	r3, [fp, #-8]
  12892c:	e51b3008 	ldr	r3, [fp, #-8]
  128930:	e3530000 	cmp	r3, #0
  128934:	1afffff3 	bne	128908 <udp_connect+0xdc>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
  128938:	e30c3c38 	movw	r3, #52280	; 0xcc38
  12893c:	e3403015 	movt	r3, #21
  128940:	e5932000 	ldr	r2, [r3]
  128944:	e51b3010 	ldr	r3, [fp, #-16]
  128948:	e583200c 	str	r2, [r3, #12]
  udp_pcbs = pcb;
  12894c:	e30c3c38 	movw	r3, #52280	; 0xcc38
  128950:	e3403015 	movt	r3, #21
  128954:	e51b2010 	ldr	r2, [fp, #-16]
  128958:	e5832000 	str	r2, [r3]
  return ERR_OK;
  12895c:	e3a03000 	mov	r3, #0
}
  128960:	e1a00003 	mov	r0, r3
  128964:	e24bd004 	sub	sp, fp, #4
  128968:	e8bd8800 	pop	{fp, pc}

0012896c <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
  12896c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  128970:	e28db000 	add	fp, sp, #0
  128974:	e24dd00c 	sub	sp, sp, #12
  128978:	e50b0008 	str	r0, [fp, #-8]
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
  12897c:	e51b3008 	ldr	r3, [fp, #-8]
  128980:	e3a02000 	mov	r2, #0
  128984:	e5832004 	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
  128988:	e51b3008 	ldr	r3, [fp, #-8]
  12898c:	e3a02000 	mov	r2, #0
  128990:	e1c321b4 	strh	r2, [r3, #20]
  /* mark PCB as unconnected */
  pcb->flags &= ~UDP_FLAGS_CONNECTED;
  128994:	e51b3008 	ldr	r3, [fp, #-8]
  128998:	e5d33010 	ldrb	r3, [r3, #16]
  12899c:	e3c33004 	bic	r3, r3, #4
  1289a0:	e6ef2073 	uxtb	r2, r3
  1289a4:	e51b3008 	ldr	r3, [fp, #-8]
  1289a8:	e5c32010 	strb	r2, [r3, #16]
}
  1289ac:	e320f000 	nop	{0}
  1289b0:	e28bd000 	add	sp, fp, #0
  1289b4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1289b8:	e12fff1e 	bx	lr

001289bc <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  1289bc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1289c0:	e28db000 	add	fp, sp, #0
  1289c4:	e24dd014 	sub	sp, sp, #20
  1289c8:	e50b0008 	str	r0, [fp, #-8]
  1289cc:	e50b100c 	str	r1, [fp, #-12]
  1289d0:	e50b2010 	str	r2, [fp, #-16]
  /* remember recv() callback and user data */
  pcb->recv = recv;
  1289d4:	e51b3008 	ldr	r3, [fp, #-8]
  1289d8:	e51b200c 	ldr	r2, [fp, #-12]
  1289dc:	e5832020 	str	r2, [r3, #32]
  pcb->recv_arg = recv_arg;
  1289e0:	e51b3008 	ldr	r3, [fp, #-8]
  1289e4:	e51b2010 	ldr	r2, [fp, #-16]
  1289e8:	e5832024 	str	r2, [r3, #36]	; 0x24
}
  1289ec:	e320f000 	nop	{0}
  1289f0:	e28bd000 	add	sp, fp, #0
  1289f4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1289f8:	e12fff1e 	bx	lr

001289fc <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
  1289fc:	e92d4800 	push	{fp, lr}
  128a00:	e28db004 	add	fp, sp, #4
  128a04:	e24dd010 	sub	sp, sp, #16
  128a08:	e50b0010 	str	r0, [fp, #-16]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
  128a0c:	e30c3c38 	movw	r3, #52280	; 0xcc38
  128a10:	e3403015 	movt	r3, #21
  128a14:	e5933000 	ldr	r3, [r3]
  128a18:	e51b2010 	ldr	r2, [fp, #-16]
  128a1c:	e1520003 	cmp	r2, r3
  128a20:	1a000007 	bne	128a44 <udp_remove+0x48>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
  128a24:	e30c3c38 	movw	r3, #52280	; 0xcc38
  128a28:	e3403015 	movt	r3, #21
  128a2c:	e5933000 	ldr	r3, [r3]
  128a30:	e593200c 	ldr	r2, [r3, #12]
  128a34:	e30c3c38 	movw	r3, #52280	; 0xcc38
  128a38:	e3403015 	movt	r3, #21
  128a3c:	e5832000 	str	r2, [r3]
  128a40:	ea000018 	b	128aa8 <udp_remove+0xac>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
  128a44:	e30c3c38 	movw	r3, #52280	; 0xcc38
  128a48:	e3403015 	movt	r3, #21
  128a4c:	e5933000 	ldr	r3, [r3]
  128a50:	e50b3008 	str	r3, [fp, #-8]
  128a54:	ea000010 	b	128a9c <udp_remove+0xa0>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
  128a58:	e51b3008 	ldr	r3, [fp, #-8]
  128a5c:	e593300c 	ldr	r3, [r3, #12]
  128a60:	e3530000 	cmp	r3, #0
  128a64:	0a000009 	beq	128a90 <udp_remove+0x94>
  128a68:	e51b3008 	ldr	r3, [fp, #-8]
  128a6c:	e593300c 	ldr	r3, [r3, #12]
  128a70:	e51b2010 	ldr	r2, [fp, #-16]
  128a74:	e1520003 	cmp	r2, r3
  128a78:	1a000004 	bne	128a90 <udp_remove+0x94>
        /* remove pcb from list */
        pcb2->next = pcb->next;
  128a7c:	e51b3010 	ldr	r3, [fp, #-16]
  128a80:	e593200c 	ldr	r2, [r3, #12]
  128a84:	e51b3008 	ldr	r3, [fp, #-8]
  128a88:	e583200c 	str	r2, [r3, #12]
        break;
  128a8c:	ea000005 	b	128aa8 <udp_remove+0xac>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
  128a90:	e51b3008 	ldr	r3, [fp, #-8]
  128a94:	e593300c 	ldr	r3, [r3, #12]
  128a98:	e50b3008 	str	r3, [fp, #-8]
  128a9c:	e51b3008 	ldr	r3, [fp, #-8]
  128aa0:	e3530000 	cmp	r3, #0
  128aa4:	1affffeb 	bne	128a58 <udp_remove+0x5c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
  128aa8:	e51b1010 	ldr	r1, [fp, #-16]
  128aac:	e3a00001 	mov	r0, #1
  128ab0:	ebffc1f0 	bl	119278 <memp_free>
}
  128ab4:	e320f000 	nop	{0}
  128ab8:	e24bd004 	sub	sp, fp, #4
  128abc:	e8bd8800 	pop	{fp, pc}

00128ac0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
  128ac0:	e92d4800 	push	{fp, lr}
  128ac4:	e28db004 	add	fp, sp, #4
  128ac8:	e24dd008 	sub	sp, sp, #8
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
  128acc:	e3002452 	movw	r2, #1106	; 0x452
  128ad0:	e3081ad4 	movw	r1, #35540	; 0x8ad4
  128ad4:	e3401014 	movt	r1, #20
  128ad8:	e3a00001 	mov	r0, #1
  128adc:	ebffc17d 	bl	1190d8 <memp_malloc_fn>
  128ae0:	e50b0008 	str	r0, [fp, #-8]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
  128ae4:	e51b3008 	ldr	r3, [fp, #-8]
  128ae8:	e3530000 	cmp	r3, #0
  128aec:	0a000009 	beq	128b18 <udp_new+0x58>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
  128af0:	e3a02028 	mov	r2, #40	; 0x28
  128af4:	e3a01000 	mov	r1, #0
  128af8:	e51b0008 	ldr	r0, [fp, #-8]
  128afc:	eb0061dc 	bl	141274 <memset>
    pcb->ttl = UDP_TTL;
  128b00:	e51b3008 	ldr	r3, [fp, #-8]
  128b04:	e3e02000 	mvn	r2, #0
  128b08:	e5c3200a 	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
  128b0c:	e51b3008 	ldr	r3, [fp, #-8]
  128b10:	e3e02000 	mvn	r2, #0
  128b14:	e5c3201c 	strb	r2, [r3, #28]
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
  128b18:	e51b3008 	ldr	r3, [fp, #-8]
}
  128b1c:	e1a00003 	mov	r0, r3
  128b20:	e24bd004 	sub	sp, fp, #4
  128b24:	e8bd8800 	pop	{fp, pc}

00128b28 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
  128b28:	e92d4800 	push	{fp, lr}
  128b2c:	e28db004 	add	fp, sp, #4
  128b30:	e24dd010 	sub	sp, sp, #16
  128b34:	e1a03000 	mov	r3, r0
  128b38:	e54b300d 	strb	r3, [fp, #-13]
  struct udp_pcb *pcb;
  pcb = udp_new();
  128b3c:	ebffffdf 	bl	128ac0 <udp_new>
  128b40:	e50b0008 	str	r0, [fp, #-8]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
  128b44:	e51b3008 	ldr	r3, [fp, #-8]
}
  128b48:	e1a00003 	mov	r0, r3
  128b4c:	e24bd004 	sub	sp, fp, #4
  128b50:	e8bd8800 	pop	{fp, pc}

00128b54 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
  128b54:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  128b58:	e28db000 	add	fp, sp, #0
  128b5c:	e24dd014 	sub	sp, sp, #20
  128b60:	e50b0010 	str	r0, [fp, #-16]
  128b64:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
  128b68:	e51b3010 	ldr	r3, [fp, #-16]
  128b6c:	e3530000 	cmp	r3, #0
  128b70:	0a00001f 	beq	128bf4 <udp_netif_ip_addr_changed+0xa0>
  128b74:	e51b3010 	ldr	r3, [fp, #-16]
  128b78:	e5933000 	ldr	r3, [r3]
  128b7c:	e3530000 	cmp	r3, #0
  128b80:	0a00001b 	beq	128bf4 <udp_netif_ip_addr_changed+0xa0>
  128b84:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128b88:	e3530000 	cmp	r3, #0
  128b8c:	0a000018 	beq	128bf4 <udp_netif_ip_addr_changed+0xa0>
  128b90:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128b94:	e5933000 	ldr	r3, [r3]
  128b98:	e3530000 	cmp	r3, #0
  128b9c:	0a000014 	beq	128bf4 <udp_netif_ip_addr_changed+0xa0>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
  128ba0:	e30c3c38 	movw	r3, #52280	; 0xcc38
  128ba4:	e3403015 	movt	r3, #21
  128ba8:	e5933000 	ldr	r3, [r3]
  128bac:	e50b3008 	str	r3, [fp, #-8]
  128bb0:	ea00000c 	b	128be8 <udp_netif_ip_addr_changed+0x94>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
  128bb4:	e51b3008 	ldr	r3, [fp, #-8]
  128bb8:	e5932000 	ldr	r2, [r3]
  128bbc:	e51b3010 	ldr	r3, [fp, #-16]
  128bc0:	e5933000 	ldr	r3, [r3]
  128bc4:	e1520003 	cmp	r2, r3
  128bc8:	1a000003 	bne	128bdc <udp_netif_ip_addr_changed+0x88>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
  128bcc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128bd0:	e5932000 	ldr	r2, [r3]
  128bd4:	e51b3008 	ldr	r3, [fp, #-8]
  128bd8:	e5832000 	str	r2, [r3]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
  128bdc:	e51b3008 	ldr	r3, [fp, #-8]
  128be0:	e593300c 	ldr	r3, [r3, #12]
  128be4:	e50b3008 	str	r3, [fp, #-8]
  128be8:	e51b3008 	ldr	r3, [fp, #-8]
  128bec:	e3530000 	cmp	r3, #0
  128bf0:	1affffef 	bne	128bb4 <udp_netif_ip_addr_changed+0x60>
      }
    }
  }
}
  128bf4:	e320f000 	nop	{0}
  128bf8:	e28bd000 	add	sp, fp, #0
  128bfc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  128c00:	e12fff1e 	bx	lr

00128c04 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
  128c04:	e92d4800 	push	{fp, lr}
  128c08:	e28db004 	add	fp, sp, #4
  128c0c:	e24dd018 	sub	sp, sp, #24
  128c10:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  128c14:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
  128c18:	e3a0300e 	mov	r3, #14
  128c1c:	e14b30b6 	strh	r3, [fp, #-6]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
  128c20:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128c24:	e1d330ba 	ldrh	r3, [r3, #10]
  128c28:	e353000e 	cmp	r3, #14
  128c2c:	8a000015 	bhi	128c88 <ethernet_input+0x84>
    /* a packet with only an ethernet header (or less) is not valid for us */
    ETHARP_STATS_INC(etharp.proterr);
  128c30:	e30c3a30 	movw	r3, #51760	; 0xca30
  128c34:	e3403015 	movt	r3, #21
  128c38:	e1d332b8 	ldrh	r3, [r3, #40]	; 0x28
  128c3c:	e2833001 	add	r3, r3, #1
  128c40:	e6ff2073 	uxth	r2, r3
  128c44:	e30c3a30 	movw	r3, #51760	; 0xca30
  128c48:	e3403015 	movt	r3, #21
  128c4c:	e1c322b8 	strh	r2, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
  128c50:	e30c3a30 	movw	r3, #51760	; 0xca30
  128c54:	e3403015 	movt	r3, #21
  128c58:	e1d331be 	ldrh	r3, [r3, #30]
  128c5c:	e2833001 	add	r3, r3, #1
  128c60:	e6ff2073 	uxth	r2, r3
  128c64:	e30c3a30 	movw	r3, #51760	; 0xca30
  128c68:	e3403015 	movt	r3, #21
  128c6c:	e1c321be 	strh	r2, [r3, #30]
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
  128c70:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  128c74:	e5933060 	ldr	r3, [r3, #96]	; 0x60
  128c78:	e2832001 	add	r2, r3, #1
  128c7c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  128c80:	e5832060 	str	r2, [r3, #96]	; 0x60
    goto free_and_return;
  128c84:	ea000096 	b	128ee4 <ethernet_input+0x2e0>
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
  128c88:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128c8c:	e5933004 	ldr	r3, [r3, #4]
  128c90:	e50b300c 	str	r3, [fp, #-12]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
  128c94:	e51b300c 	ldr	r3, [fp, #-12]
  128c98:	e5d3200c 	ldrb	r2, [r3, #12]
  128c9c:	e5d3300d 	ldrb	r3, [r3, #13]
  128ca0:	e1a03403 	lsl	r3, r3, #8
  128ca4:	e1833002 	orr	r3, r3, r2
  128ca8:	e14b30be 	strh	r3, [fp, #-14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
  128cac:	e51b300c 	ldr	r3, [fp, #-12]
  128cb0:	e5d33000 	ldrb	r3, [r3]
  128cb4:	e2033001 	and	r3, r3, #1
  128cb8:	e3530000 	cmp	r3, #0
  128cbc:	0a000021 	beq	128d48 <ethernet_input+0x144>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
  128cc0:	e51b300c 	ldr	r3, [fp, #-12]
  128cc4:	e5d33000 	ldrb	r3, [r3]
  128cc8:	e3530001 	cmp	r3, #1
  128ccc:	1a00000e 	bne	128d0c <ethernet_input+0x108>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
  128cd0:	e51b300c 	ldr	r3, [fp, #-12]
  128cd4:	e5d33001 	ldrb	r3, [r3, #1]
  128cd8:	e3530000 	cmp	r3, #0
  128cdc:	1a000019 	bne	128d48 <ethernet_input+0x144>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
  128ce0:	e51b300c 	ldr	r3, [fp, #-12]
  128ce4:	e5d33002 	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
  128ce8:	e353005e 	cmp	r3, #94	; 0x5e
  128cec:	1a000015 	bne	128d48 <ethernet_input+0x144>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
  128cf0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128cf4:	e5d3300d 	ldrb	r3, [r3, #13]
  128cf8:	e3833010 	orr	r3, r3, #16
  128cfc:	e6ef2073 	uxtb	r2, r3
  128d00:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128d04:	e5c3200d 	strb	r2, [r3, #13]
  128d08:	ea00000e 	b	128d48 <ethernet_input+0x144>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
  128d0c:	e51b300c 	ldr	r3, [fp, #-12]
  128d10:	e3a02006 	mov	r2, #6
  128d14:	e3081b30 	movw	r1, #35632	; 0x8b30
  128d18:	e3401014 	movt	r1, #20
  128d1c:	e1a00003 	mov	r0, r3
  128d20:	eb0060da 	bl	141090 <memcmp>
  128d24:	e1a03000 	mov	r3, r0
  128d28:	e3530000 	cmp	r3, #0
  128d2c:	1a000005 	bne	128d48 <ethernet_input+0x144>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
  128d30:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128d34:	e5d3300d 	ldrb	r3, [r3, #13]
  128d38:	e3833008 	orr	r3, r3, #8
  128d3c:	e6ef2073 	uxtb	r2, r3
  128d40:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128d44:	e5c3200d 	strb	r2, [r3, #13]
    }
  }

  switch (type) {
  128d48:	e15b30be 	ldrh	r3, [fp, #-14]
  128d4c:	e3530008 	cmp	r3, #8
  128d50:	0a000003 	beq	128d64 <ethernet_input+0x160>
  128d54:	e3002608 	movw	r2, #1544	; 0x608
  128d58:	e1530002 	cmp	r3, r2
  128d5c:	0a000019 	beq	128dc8 <ethernet_input+0x1c4>
  128d60:	ea000042 	b	128e70 <ethernet_input+0x26c>
#if LWIP_IPV4 && LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
  128d64:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  128d68:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  128d6c:	e2033008 	and	r3, r3, #8
  128d70:	e3530000 	cmp	r3, #0
  128d74:	0a000055 	beq	128ed0 <ethernet_input+0x2cc>
        goto free_and_return;
      }
      /* skip Ethernet header */
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
  128d78:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128d7c:	e1d330ba 	ldrh	r3, [r3, #10]
  128d80:	e1a02003 	mov	r2, r3
  128d84:	e15b30f6 	ldrsh	r3, [fp, #-6]
  128d88:	e1520003 	cmp	r2, r3
  128d8c:	ba000051 	blt	128ed8 <ethernet_input+0x2d4>
  128d90:	e15b30b6 	ldrh	r3, [fp, #-6]
  128d94:	e2633000 	rsb	r3, r3, #0
  128d98:	e6ff3073 	uxth	r3, r3
  128d9c:	e6bf3073 	sxth	r3, r3
  128da0:	e1a01003 	mov	r1, r3
  128da4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  128da8:	ebffc822 	bl	11ae38 <pbuf_header>
  128dac:	e1a03000 	mov	r3, r0
  128db0:	e3530000 	cmp	r3, #0
  128db4:	1a000047 	bne	128ed8 <ethernet_input+0x2d4>
          p->tot_len, ip_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        goto free_and_return;
      } else {
        /* pass to IP layer */
        ip4_input(p, netif);
  128db8:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  128dbc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  128dc0:	eb00219b 	bl	131434 <ip4_input>
      }
      break;
  128dc4:	ea00003f 	b	128ec8 <ethernet_input+0x2c4>

    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
  128dc8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  128dcc:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  128dd0:	e2033008 	and	r3, r3, #8
  128dd4:	e3530000 	cmp	r3, #0
  128dd8:	0a000040 	beq	128ee0 <ethernet_input+0x2dc>
        goto free_and_return;
      }
      /* skip Ethernet header */
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
  128ddc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128de0:	e1d330ba 	ldrh	r3, [r3, #10]
  128de4:	e1a02003 	mov	r2, r3
  128de8:	e15b30f6 	ldrsh	r3, [fp, #-6]
  128dec:	e1520003 	cmp	r2, r3
  128df0:	ba000009 	blt	128e1c <ethernet_input+0x218>
  128df4:	e15b30b6 	ldrh	r3, [fp, #-6]
  128df8:	e2633000 	rsb	r3, r3, #0
  128dfc:	e6ff3073 	uxth	r3, r3
  128e00:	e6bf3073 	sxth	r3, r3
  128e04:	e1a01003 	mov	r1, r3
  128e08:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  128e0c:	ebffc809 	bl	11ae38 <pbuf_header>
  128e10:	e1a03000 	mov	r3, r0
  128e14:	e3530000 	cmp	r3, #0
  128e18:	0a000010 	beq	128e60 <ethernet_input+0x25c>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
          ("ethernet_input: ARP response packet dropped, too short (%"S16_F"/%"S16_F")\n",
          p->tot_len, ip_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        ETHARP_STATS_INC(etharp.lenerr);
  128e1c:	e30c3a30 	movw	r3, #51760	; 0xca30
  128e20:	e3403015 	movt	r3, #21
  128e24:	e1d332b2 	ldrh	r3, [r3, #34]	; 0x22
  128e28:	e2833001 	add	r3, r3, #1
  128e2c:	e6ff2073 	uxth	r2, r3
  128e30:	e30c3a30 	movw	r3, #51760	; 0xca30
  128e34:	e3403015 	movt	r3, #21
  128e38:	e1c322b2 	strh	r2, [r3, #34]	; 0x22
        ETHARP_STATS_INC(etharp.drop);
  128e3c:	e30c3a30 	movw	r3, #51760	; 0xca30
  128e40:	e3403015 	movt	r3, #21
  128e44:	e1d331be 	ldrh	r3, [r3, #30]
  128e48:	e2833001 	add	r3, r3, #1
  128e4c:	e6ff2073 	uxth	r2, r3
  128e50:	e30c3a30 	movw	r3, #51760	; 0xca30
  128e54:	e3403015 	movt	r3, #21
  128e58:	e1c321be 	strh	r2, [r3, #30]
        goto free_and_return;
  128e5c:	ea000020 	b	128ee4 <ethernet_input+0x2e0>
      } else {
        /* pass p to ARP module */
        etharp_input(p, netif);
  128e60:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  128e64:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  128e68:	eb0015a9 	bl	12e514 <etharp_input>
      }
      break;
  128e6c:	ea000015 	b	128ec8 <ethernet_input+0x2c4>
#ifdef LWIP_HOOK_UNKNOWN_ETH_PROTOCOL
      if(LWIP_HOOK_UNKNOWN_ETH_PROTOCOL(p, netif) == ERR_OK) {
        break;
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
  128e70:	e30c3a30 	movw	r3, #51760	; 0xca30
  128e74:	e3403015 	movt	r3, #21
  128e78:	e1d332b8 	ldrh	r3, [r3, #40]	; 0x28
  128e7c:	e2833001 	add	r3, r3, #1
  128e80:	e6ff2073 	uxth	r2, r3
  128e84:	e30c3a30 	movw	r3, #51760	; 0xca30
  128e88:	e3403015 	movt	r3, #21
  128e8c:	e1c322b8 	strh	r2, [r3, #40]	; 0x28
      ETHARP_STATS_INC(etharp.drop);
  128e90:	e30c3a30 	movw	r3, #51760	; 0xca30
  128e94:	e3403015 	movt	r3, #21
  128e98:	e1d331be 	ldrh	r3, [r3, #30]
  128e9c:	e2833001 	add	r3, r3, #1
  128ea0:	e6ff2073 	uxth	r2, r3
  128ea4:	e30c3a30 	movw	r3, #51760	; 0xca30
  128ea8:	e3403015 	movt	r3, #21
  128eac:	e1c321be 	strh	r2, [r3, #30]
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
  128eb0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  128eb4:	e5933064 	ldr	r3, [r3, #100]	; 0x64
  128eb8:	e2832001 	add	r2, r3, #1
  128ebc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  128ec0:	e5832064 	str	r2, [r3, #100]	; 0x64
      goto free_and_return;
  128ec4:	ea000006 	b	128ee4 <ethernet_input+0x2e0>
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
  128ec8:	e3a03000 	mov	r3, #0
  128ecc:	ea000007 	b	128ef0 <ethernet_input+0x2ec>
        goto free_and_return;
  128ed0:	e320f000 	nop	{0}
  128ed4:	ea000002 	b	128ee4 <ethernet_input+0x2e0>

free_and_return:
  128ed8:	e320f000 	nop	{0}
  128edc:	ea000000 	b	128ee4 <ethernet_input+0x2e0>
        goto free_and_return;
  128ee0:	e320f000 	nop	{0}
  pbuf_free(p);
  128ee4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  128ee8:	ebffc7f0 	bl	11aeb0 <pbuf_free>
  return ERR_OK;
  128eec:	e3a03000 	mov	r3, #0
}
  128ef0:	e1a00003 	mov	r0, r3
  128ef4:	e24bd004 	sub	sp, fp, #4
  128ef8:	e8bd8800 	pop	{fp, pc}

00128efc <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
  128efc:	e92d4800 	push	{fp, lr}
  128f00:	e28db004 	add	fp, sp, #4
  128f04:	e24dd018 	sub	sp, sp, #24
  128f08:	e50b0010 	str	r0, [fp, #-16]
  128f0c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  128f10:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  128f14:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
  128f18:	e1db30b4 	ldrh	r3, [fp, #4]
  128f1c:	e1a00003 	mov	r0, r3
  128f20:	ebffb5ab 	bl	1165d4 <lwip_htons>
  128f24:	e1a03000 	mov	r3, r0
  128f28:	e14b30b6 	strh	r3, [fp, #-6]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
  128f2c:	e3a0100e 	mov	r1, #14
  128f30:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  128f34:	ebffc7bf 	bl	11ae38 <pbuf_header>
  128f38:	e1a03000 	mov	r3, r0
  128f3c:	e3530000 	cmp	r3, #0
  128f40:	1a000022 	bne	128fd0 <ethernet_output+0xd4>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
  128f44:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128f48:	e5933004 	ldr	r3, [r3, #4]
  128f4c:	e50b300c 	str	r3, [fp, #-12]
  ethhdr->type = eth_type_be;
  128f50:	e51b300c 	ldr	r3, [fp, #-12]
  128f54:	e15b20b6 	ldrh	r2, [fp, #-6]
  128f58:	e1c320bc 	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
  128f5c:	e51b300c 	ldr	r3, [fp, #-12]
  128f60:	e3a02006 	mov	r2, #6
  128f64:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  128f68:	e1a00003 	mov	r0, r3
  128f6c:	eb005f88 	bl	140d94 <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
  128f70:	e51b300c 	ldr	r3, [fp, #-12]
  128f74:	e2833006 	add	r3, r3, #6
  128f78:	e3a02006 	mov	r2, #6
  128f7c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  128f80:	e1a00003 	mov	r0, r3
  128f84:	eb005f82 	bl	140d94 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
  128f88:	e51b3010 	ldr	r3, [fp, #-16]
  128f8c:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
  128f90:	e3530006 	cmp	r3, #6
  128f94:	0a000006 	beq	128fb4 <ethernet_output+0xb8>
  128f98:	e3080b40 	movw	r0, #35648	; 0x8b40
  128f9c:	e3400014 	movt	r0, #20
  128fa0:	ebff685b 	bl	103114 <rt_kprintf>
  128fa4:	e300112e 	movw	r1, #302	; 0x12e
  128fa8:	e3080b74 	movw	r0, #35700	; 0x8b74
  128fac:	e3400014 	movt	r0, #20
  128fb0:	ebff884e 	bl	10b0f0 <sys_arch_assert>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
  128fb4:	e51b3010 	ldr	r3, [fp, #-16]
  128fb8:	e5933018 	ldr	r3, [r3, #24]
  128fbc:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  128fc0:	e51b0010 	ldr	r0, [fp, #-16]
  128fc4:	e12fff33 	blx	r3
  128fc8:	e1a03000 	mov	r3, r0
  128fcc:	ea000009 	b	128ff8 <ethernet_output+0xfc>
      goto pbuf_header_failed;
  128fd0:	e320f000 	nop	{0}

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  128fd4:	e30c3a30 	movw	r3, #51760	; 0xca30
  128fd8:	e3403015 	movt	r3, #21
  128fdc:	e1d330ba 	ldrh	r3, [r3, #10]
  128fe0:	e2833001 	add	r3, r3, #1
  128fe4:	e6ff2073 	uxth	r2, r3
  128fe8:	e30c3a30 	movw	r3, #51760	; 0xca30
  128fec:	e3403015 	movt	r3, #21
  128ff0:	e1c320ba 	strh	r2, [r3, #10]
  return ERR_BUF;
  128ff4:	e3e03001 	mvn	r3, #1
}
  128ff8:	e1a00003 	mov	r0, r3
  128ffc:	e24bd004 	sub	sp, fp, #4
  129000:	e8bd8800 	pop	{fp, pc}

00129004 <lwip_netdev_set_up>:
#include "lwip/netdb.h"
#include "../../../netdev/netdev.h"
#include "../../../netdev/eth_device_manager.h"

static int lwip_netdev_set_up(struct netdev *netif)
{
  129004:	e92d4800 	push	{fp, lr}
  129008:	e28db004 	add	fp, sp, #4
  12900c:	e24dd008 	sub	sp, sp, #8
  129010:	e50b0008 	str	r0, [fp, #-8]
    netif_set_up((struct netif *)netif->user_data);
  129014:	e51b3008 	ldr	r3, [fp, #-8]
  129018:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  12901c:	e1a00003 	mov	r0, r3
  129020:	ebffc268 	bl	1199c8 <netif_set_up>
    return ERR_OK;
  129024:	e3a03000 	mov	r3, #0
}
  129028:	e1a00003 	mov	r0, r3
  12902c:	e24bd004 	sub	sp, fp, #4
  129030:	e8bd8800 	pop	{fp, pc}

00129034 <lwip_netdev_set_down>:

static int lwip_netdev_set_down(struct netdev *netif)
{
  129034:	e92d4800 	push	{fp, lr}
  129038:	e28db004 	add	fp, sp, #4
  12903c:	e24dd008 	sub	sp, sp, #8
  129040:	e50b0008 	str	r0, [fp, #-8]
    netif_set_down((struct netif *)netif->user_data);
  129044:	e51b3008 	ldr	r3, [fp, #-8]
  129048:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  12904c:	e1a00003 	mov	r0, r3
  129050:	ebffc2b1 	bl	119b1c <netif_set_down>
    return ERR_OK;
  129054:	e3a03000 	mov	r3, #0
}
  129058:	e1a00003 	mov	r0, r3
  12905c:	e24bd004 	sub	sp, fp, #4
  129060:	e8bd8800 	pop	{fp, pc}

00129064 <lwip_netdev_set_addr_info>:

static int lwip_netdev_set_addr_info(struct netdev *netif, ip_addr_t *ip_addr, ip_addr_t *netmask, ip_addr_t *gw)
{
  129064:	e92d4800 	push	{fp, lr}
  129068:	e28db004 	add	fp, sp, #4
  12906c:	e24dd010 	sub	sp, sp, #16
  129070:	e50b0008 	str	r0, [fp, #-8]
  129074:	e50b100c 	str	r1, [fp, #-12]
  129078:	e50b2010 	str	r2, [fp, #-16]
  12907c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    if (ip_addr && netmask && gw)
  129080:	e51b300c 	ldr	r3, [fp, #-12]
  129084:	e3530000 	cmp	r3, #0
  129088:	0a00000c 	beq	1290c0 <lwip_netdev_set_addr_info+0x5c>
  12908c:	e51b3010 	ldr	r3, [fp, #-16]
  129090:	e3530000 	cmp	r3, #0
  129094:	0a000009 	beq	1290c0 <lwip_netdev_set_addr_info+0x5c>
  129098:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12909c:	e3530000 	cmp	r3, #0
  1290a0:	0a000006 	beq	1290c0 <lwip_netdev_set_addr_info+0x5c>
    {
        netif_set_addr((struct netif *)netif->user_data, ip_2_ip4(ip_addr), ip_2_ip4(netmask), ip_2_ip4(gw));
  1290a4:	e51b3008 	ldr	r3, [fp, #-8]
  1290a8:	e5930040 	ldr	r0, [r3, #64]	; 0x40
  1290ac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1290b0:	e51b2010 	ldr	r2, [fp, #-16]
  1290b4:	e51b100c 	ldr	r1, [fp, #-12]
  1290b8:	ebffc10e 	bl	1194f8 <netif_set_addr>
  1290bc:	ea000017 	b	129120 <lwip_netdev_set_addr_info+0xbc>
    }
    else
    {
        if (ip_addr)
  1290c0:	e51b300c 	ldr	r3, [fp, #-12]
  1290c4:	e3530000 	cmp	r3, #0
  1290c8:	0a000004 	beq	1290e0 <lwip_netdev_set_addr_info+0x7c>
        {
            netif_set_ipaddr((struct netif *)netif->user_data, ip_2_ip4(ip_addr));
  1290cc:	e51b3008 	ldr	r3, [fp, #-8]
  1290d0:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  1290d4:	e51b100c 	ldr	r1, [fp, #-12]
  1290d8:	e1a00003 	mov	r0, r3
  1290dc:	ebffc1b4 	bl	1197b4 <netif_set_ipaddr>
        }

        if (netmask)
  1290e0:	e51b3010 	ldr	r3, [fp, #-16]
  1290e4:	e3530000 	cmp	r3, #0
  1290e8:	0a000004 	beq	129100 <lwip_netdev_set_addr_info+0x9c>
        {
            netif_set_netmask((struct netif *)netif->user_data, ip_2_ip4(netmask));
  1290ec:	e51b3008 	ldr	r3, [fp, #-8]
  1290f0:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  1290f4:	e51b1010 	ldr	r1, [fp, #-16]
  1290f8:	e1a00003 	mov	r0, r3
  1290fc:	ebffc20c 	bl	119934 <netif_set_netmask>
        }

        if (gw)
  129100:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  129104:	e3530000 	cmp	r3, #0
  129108:	0a000004 	beq	129120 <lwip_netdev_set_addr_info+0xbc>
        {
            netif_set_gw((struct netif *)netif->user_data, ip_2_ip4(gw));
  12910c:	e51b3008 	ldr	r3, [fp, #-8]
  129110:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  129114:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  129118:	e1a00003 	mov	r0, r3
  12911c:	ebffc1eb 	bl	1198d0 <netif_set_gw>
        }
    }

    return ERR_OK;
  129120:	e3a03000 	mov	r3, #0
}
  129124:	e1a00003 	mov	r0, r3
  129128:	e24bd004 	sub	sp, fp, #4
  12912c:	e8bd8800 	pop	{fp, pc}

00129130 <lwip_netdev_set_dns_server>:

#ifdef RT_LWIP_DNS
static int lwip_netdev_set_dns_server(struct netdev *netif, uint8_t dns_num, ip_addr_t *dns_server)
{
  129130:	e92d4800 	push	{fp, lr}
  129134:	e28db004 	add	fp, sp, #4
  129138:	e24dd010 	sub	sp, sp, #16
  12913c:	e50b0008 	str	r0, [fp, #-8]
  129140:	e1a03001 	mov	r3, r1
  129144:	e50b2010 	str	r2, [fp, #-16]
  129148:	e54b3009 	strb	r3, [fp, #-9]
    extern void dns_setserver(uint8_t dns_num, const ip_addr_t *dns_server);
    dns_setserver(dns_num, dns_server);
  12914c:	e55b3009 	ldrb	r3, [fp, #-9]
  129150:	e51b1010 	ldr	r1, [fp, #-16]
  129154:	e1a00003 	mov	r0, r3
  129158:	ebffb623 	bl	1169ec <dns_setserver>
    return ERR_OK;
  12915c:	e3a03000 	mov	r3, #0
}
  129160:	e1a00003 	mov	r0, r3
  129164:	e24bd004 	sub	sp, fp, #4
  129168:	e8bd8800 	pop	{fp, pc}

0012916c <lwip_netdev_set_dhcp>:
#endif /* RT_LWIP_DNS */

#ifdef RT_LWIP_DHCP
static int lwip_netdev_set_dhcp(struct netdev *netif, rt_bool_t is_enabled)
{
  12916c:	e92d4800 	push	{fp, lr}
  129170:	e28db004 	add	fp, sp, #4
  129174:	e24dd008 	sub	sp, sp, #8
  129178:	e50b0008 	str	r0, [fp, #-8]
  12917c:	e50b100c 	str	r1, [fp, #-12]
    if(RT_TRUE == is_enabled)
  129180:	e51b300c 	ldr	r3, [fp, #-12]
  129184:	e3530001 	cmp	r3, #1
  129188:	1a000004 	bne	1291a0 <lwip_netdev_set_dhcp+0x34>
    {
        dhcp_start((struct netif *)netif->user_data);
  12918c:	e51b3008 	ldr	r3, [fp, #-8]
  129190:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  129194:	e1a00003 	mov	r0, r3
  129198:	eb0006d5 	bl	12acf4 <dhcp_start>
  12919c:	ea000003 	b	1291b0 <lwip_netdev_set_dhcp+0x44>
    }
    else
    {
        dhcp_stop((struct netif *)netif->user_data);
  1291a0:	e51b3008 	ldr	r3, [fp, #-8]
  1291a4:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  1291a8:	e1a00003 	mov	r0, r3
  1291ac:	eb000b48 	bl	12bed4 <dhcp_stop>
    }
    netdev_low_level_set_dhcp_status(netif, is_enabled);
  1291b0:	e51b100c 	ldr	r1, [fp, #-12]
  1291b4:	e51b0008 	ldr	r0, [fp, #-8]
  1291b8:	ebff7512 	bl	106608 <netdev_low_level_set_dhcp_status>
    return ERR_OK;
  1291bc:	e3a03000 	mov	r3, #0
}
  1291c0:	e1a00003 	mov	r0, r3
  1291c4:	e24bd004 	sub	sp, fp, #4
  1291c8:	e8bd8800 	pop	{fp, pc}

001291cc <lwip_netdev_ping>:
extern int lwip_ping_recv(int s, int *ttl);
extern err_t lwip_ping_send(int s, ip_addr_t *addr, int size);

int lwip_netdev_ping(struct netdev *netif, const char *host, size_t data_len, 
                        uint32_t timeout, struct netdev_ping_resp *ping_resp)
{
  1291cc:	e92d4800 	push	{fp, lr}
  1291d0:	e28db004 	add	fp, sp, #4
  1291d4:	e24dd070 	sub	sp, sp, #112	; 0x70
  1291d8:	e50b0060 	str	r0, [fp, #-96]	; 0xffffffa0
  1291dc:	e50b1064 	str	r1, [fp, #-100]	; 0xffffff9c
  1291e0:	e50b2068 	str	r2, [fp, #-104]	; 0xffffff98
  1291e4:	e50b306c 	str	r3, [fp, #-108]	; 0xffffff94
    int s, ttl, recv_len, result = 0;
  1291e8:	e3a03000 	mov	r3, #0
  1291ec:	e50b3008 	str	r3, [fp, #-8]
    int elapsed_time;
    rt_tick_t recv_start_tick;
#if LWIP_VERSION_MAJOR >= 2U
    struct timeval recv_timeout = { timeout / RT_TICK_PER_SECOND, timeout % RT_TICK_PER_SECOND };
  1291f0:	e51b206c 	ldr	r2, [fp, #-108]	; 0xffffff94
  1291f4:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  1291f8:	e3413062 	movt	r3, #4194	; 0x1062
  1291fc:	e0832392 	umull	r2, r3, r2, r3
  129200:	e1a03323 	lsr	r3, r3, #6
  129204:	e1a02003 	mov	r2, r3
  129208:	e3a03000 	mov	r3, #0
  12920c:	e14b22fc 	strd	r2, [fp, #-44]	; 0xffffffd4
  129210:	e51b106c 	ldr	r1, [fp, #-108]	; 0xffffff94
  129214:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  129218:	e3413062 	movt	r3, #4194	; 0x1062
  12921c:	e0832391 	umull	r2, r3, r1, r3
  129220:	e1a03323 	lsr	r3, r3, #6
  129224:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  129228:	e0030392 	mul	r3, r2, r3
  12922c:	e0413003 	sub	r3, r1, r3
  129230:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
#else
    int recv_timeout = timeout * 1000UL / RT_TICK_PER_SECOND;
#endif
    ip_addr_t target_addr;
    struct addrinfo hint, *res = RT_NULL;
  129234:	e3a03000 	mov	r3, #0
  129238:	e50b3054 	str	r3, [fp, #-84]	; 0xffffffac
    struct sockaddr_in *h = RT_NULL;
  12923c:	e3a03000 	mov	r3, #0
  129240:	e50b3058 	str	r3, [fp, #-88]	; 0xffffffa8
    struct in_addr ina;
    
    RT_ASSERT(netif);
  129244:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
  129248:	e3530000 	cmp	r3, #0
  12924c:	1a000005 	bne	129268 <lwip_netdev_ping+0x9c>
  129250:	e3a020ca 	mov	r2, #202	; 0xca
  129254:	e3081cb8 	movw	r1, #36024	; 0x8cb8
  129258:	e3401014 	movt	r1, #20
  12925c:	e3080ba8 	movw	r0, #35752	; 0x8ba8
  129260:	e3400014 	movt	r0, #20
  129264:	ebff68cb 	bl	103598 <rt_assert_handler>
    RT_ASSERT(host);
  129268:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
  12926c:	e3530000 	cmp	r3, #0
  129270:	1a000005 	bne	12928c <lwip_netdev_ping+0xc0>
  129274:	e3a020cb 	mov	r2, #203	; 0xcb
  129278:	e3081cb8 	movw	r1, #36024	; 0x8cb8
  12927c:	e3401014 	movt	r1, #20
  129280:	e3080bb0 	movw	r0, #35760	; 0x8bb0
  129284:	e3400014 	movt	r0, #20
  129288:	ebff68c2 	bl	103598 <rt_assert_handler>
    RT_ASSERT(ping_resp);
  12928c:	e59b3004 	ldr	r3, [fp, #4]
  129290:	e3530000 	cmp	r3, #0
  129294:	1a000005 	bne	1292b0 <lwip_netdev_ping+0xe4>
  129298:	e3a020cc 	mov	r2, #204	; 0xcc
  12929c:	e3081cb8 	movw	r1, #36024	; 0x8cb8
  1292a0:	e3401014 	movt	r1, #20
  1292a4:	e3080bb8 	movw	r0, #35768	; 0x8bb8
  1292a8:	e3400014 	movt	r0, #20
  1292ac:	ebff68b9 	bl	103598 <rt_assert_handler>

    rt_memset(&hint, 0x00, sizeof(hint));
  1292b0:	e24b3050 	sub	r3, fp, #80	; 0x50
  1292b4:	e3a02020 	mov	r2, #32
  1292b8:	e3a01000 	mov	r1, #0
  1292bc:	e1a00003 	mov	r0, r3
  1292c0:	ebff6800 	bl	1032c8 <rt_memset>
    /* convert URL to IP */
    if (lwip_getaddrinfo(host, RT_NULL, &hint, &res) != 0)
  1292c4:	e24b3054 	sub	r3, fp, #84	; 0x54
  1292c8:	e24b2050 	sub	r2, fp, #80	; 0x50
  1292cc:	e3a01000 	mov	r1, #0
  1292d0:	e51b0064 	ldr	r0, [fp, #-100]	; 0xffffff9c
  1292d4:	ebff9d41 	bl	1107e0 <lwip_getaddrinfo>
  1292d8:	e1a03000 	mov	r3, r0
  1292dc:	e3530000 	cmp	r3, #0
  1292e0:	0a000001 	beq	1292ec <lwip_netdev_ping+0x120>
    {
        return -RT_ERROR;
  1292e4:	e3e03000 	mvn	r3, #0
  1292e8:	ea000064 	b	129480 <lwip_netdev_ping+0x2b4>
    }
    rt_memcpy(&h, &res->ai_addr, sizeof(struct sockaddr_in *));
  1292ec:	e51b3054 	ldr	r3, [fp, #-84]	; 0xffffffac
  1292f0:	e2831014 	add	r1, r3, #20
  1292f4:	e24b3058 	sub	r3, fp, #88	; 0x58
  1292f8:	e3a02004 	mov	r2, #4
  1292fc:	e1a00003 	mov	r0, r3
  129300:	ebff67fe 	bl	103300 <rt_memcpy>
    rt_memcpy(&ina, &h->sin_addr, sizeof(ina));
  129304:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  129308:	e2831004 	add	r1, r3, #4
  12930c:	e24b305c 	sub	r3, fp, #92	; 0x5c
  129310:	e3a02004 	mov	r2, #4
  129314:	e1a00003 	mov	r0, r3
  129318:	ebff67f8 	bl	103300 <rt_memcpy>
    lwip_freeaddrinfo(res);
  12931c:	e51b3054 	ldr	r3, [fp, #-84]	; 0xffffffac
  129320:	e1a00003 	mov	r0, r3
  129324:	ebff9d1a 	bl	110794 <lwip_freeaddrinfo>
    if (inet_aton(inet_ntoa(ina), &target_addr) == 0)
  129328:	e24b305c 	sub	r3, fp, #92	; 0x5c
  12932c:	e1a00003 	mov	r0, r3
  129330:	eb0025f0 	bl	132af8 <ip4addr_ntoa>
  129334:	e1a02000 	mov	r2, r0
  129338:	e24b3030 	sub	r3, fp, #48	; 0x30
  12933c:	e1a01003 	mov	r1, r3
  129340:	e1a00002 	mov	r0, r2
  129344:	eb0024e7 	bl	1326e8 <ip4addr_aton>
  129348:	e1a03000 	mov	r3, r0
  12934c:	e3530000 	cmp	r3, #0
  129350:	1a000001 	bne	12935c <lwip_netdev_ping+0x190>
    {
        return -RT_ERROR;
  129354:	e3e03000 	mvn	r3, #0
  129358:	ea000048 	b	129480 <lwip_netdev_ping+0x2b4>
    }
    rt_memcpy(&(ping_resp->ip_addr), &target_addr, sizeof(ip_addr_t));
  12935c:	e59b3004 	ldr	r3, [fp, #4]
  129360:	e24b1030 	sub	r1, fp, #48	; 0x30
  129364:	e3a02004 	mov	r2, #4
  129368:	e1a00003 	mov	r0, r3
  12936c:	ebff67e3 	bl	103300 <rt_memcpy>
    
    /* new a socket */
    if ((s = lwip_socket(AF_INET, SOCK_RAW, IP_PROTO_ICMP)) < 0)
  129370:	e3a02001 	mov	r2, #1
  129374:	e3a01003 	mov	r1, #3
  129378:	e3a00002 	mov	r0, #2
  12937c:	ebffa658 	bl	112ce4 <lwip_socket>
  129380:	e50b000c 	str	r0, [fp, #-12]
  129384:	e51b300c 	ldr	r3, [fp, #-12]
  129388:	e3530000 	cmp	r3, #0
  12938c:	aa000001 	bge	129398 <lwip_netdev_ping+0x1cc>
    {
        return -RT_ERROR;
  129390:	e3e03000 	mvn	r3, #0
  129394:	ea000039 	b	129480 <lwip_netdev_ping+0x2b4>
    }

    lwip_setsockopt(s, SOL_SOCKET, SO_RCVTIMEO, &recv_timeout, sizeof(recv_timeout));
  129398:	e24b202c 	sub	r2, fp, #44	; 0x2c
  12939c:	e3a03010 	mov	r3, #16
  1293a0:	e58d3000 	str	r3, [sp]
  1293a4:	e1a03002 	mov	r3, r2
  1293a8:	e3012006 	movw	r2, #4102	; 0x1006
  1293ac:	e3001fff 	movw	r1, #4095	; 0xfff
  1293b0:	e51b000c 	ldr	r0, [fp, #-12]
  1293b4:	ebffae28 	bl	114c5c <lwip_setsockopt>

    if (lwip_ping_send(s, &target_addr, data_len) == ERR_OK)
  1293b8:	e51b2068 	ldr	r2, [fp, #-104]	; 0xffffff98
  1293bc:	e24b3030 	sub	r3, fp, #48	; 0x30
  1293c0:	e1a01003 	mov	r1, r3
  1293c4:	e51b000c 	ldr	r0, [fp, #-12]
  1293c8:	eb002c05 	bl	1343e4 <lwip_ping_send>
  1293cc:	e1a03000 	mov	r3, r0
  1293d0:	e3530000 	cmp	r3, #0
  1293d4:	1a000023 	bne	129468 <lwip_netdev_ping+0x29c>
    {
        recv_start_tick = rt_tick_get();
  1293d8:	ebff62a0 	bl	101e60 <rt_tick_get>
  1293dc:	e50b0010 	str	r0, [fp, #-16]
        if ((recv_len = lwip_ping_recv(s, &ttl)) >= 0)
  1293e0:	e24b301c 	sub	r3, fp, #28
  1293e4:	e1a01003 	mov	r1, r3
  1293e8:	e51b000c 	ldr	r0, [fp, #-12]
  1293ec:	eb002c3a 	bl	1344dc <lwip_ping_recv>
  1293f0:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  1293f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1293f8:	e3530000 	cmp	r3, #0
  1293fc:	ba000016 	blt	12945c <lwip_netdev_ping+0x290>
        {
            elapsed_time = (rt_tick_get() - recv_start_tick) * 1000UL / RT_TICK_PER_SECOND;
  129400:	ebff6296 	bl	101e60 <rt_tick_get>
  129404:	e1a02000 	mov	r2, r0
  129408:	e51b3010 	ldr	r3, [fp, #-16]
  12940c:	e0423003 	sub	r3, r2, r3
  129410:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  129414:	e0020392 	mul	r2, r2, r3
  129418:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  12941c:	e3413062 	movt	r3, #4194	; 0x1062
  129420:	e0832392 	umull	r2, r3, r2, r3
  129424:	e1a03323 	lsr	r3, r3, #6
  129428:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
            ping_resp->data_len = recv_len;
  12942c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  129430:	e6ff2073 	uxth	r2, r3
  129434:	e59b3004 	ldr	r3, [fp, #4]
  129438:	e1c320b4 	strh	r2, [r3, #4]
            ping_resp->ttl = ttl;
  12943c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  129440:	e6ff2073 	uxth	r2, r3
  129444:	e59b3004 	ldr	r3, [fp, #4]
  129448:	e1c320b6 	strh	r2, [r3, #6]
            ping_resp->ticks = elapsed_time;
  12944c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  129450:	e59b3004 	ldr	r3, [fp, #4]
  129454:	e5832008 	str	r2, [r3, #8]
  129458:	ea000005 	b	129474 <lwip_netdev_ping+0x2a8>
        }
        else
        {
            result = -RT_ETIMEOUT;
  12945c:	e3e03001 	mvn	r3, #1
  129460:	e50b3008 	str	r3, [fp, #-8]
            goto __exit;
  129464:	ea000002 	b	129474 <lwip_netdev_ping+0x2a8>
        }
    }
    else
    {
        result = -RT_ETIMEOUT;
  129468:	e3e03001 	mvn	r3, #1
  12946c:	e50b3008 	str	r3, [fp, #-8]
        goto __exit;
  129470:	e320f000 	nop	{0}
    }

__exit:
    lwip_close(s);
  129474:	e51b000c 	ldr	r0, [fp, #-12]
  129478:	ebffa103 	bl	11188c <lwip_close>

    return result;
  12947c:	e51b3008 	ldr	r3, [fp, #-8]
}
  129480:	e1a00003 	mov	r0, r3
  129484:	e24bd004 	sub	sp, fp, #4
  129488:	e8bd8800 	pop	{fp, pc}

0012948c <lwip_netdev_set_default>:
// }
// #endif /* RT_LWIP_TCP || RT_LWIP_UDP */
#endif /* RT_USING_FINSH */

static int lwip_netdev_set_default(struct netdev *netif)
{
  12948c:	e92d4800 	push	{fp, lr}
  129490:	e28db004 	add	fp, sp, #4
  129494:	e24dd008 	sub	sp, sp, #8
  129498:	e50b0008 	str	r0, [fp, #-8]
    netif_set_default((struct netif *)netif->user_data);
  12949c:	e51b3008 	ldr	r3, [fp, #-8]
  1294a0:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  1294a4:	e1a00003 	mov	r0, r3
  1294a8:	ebffc13a 	bl	119998 <netif_set_default>
    return ERR_OK;
  1294ac:	e3a03000 	mov	r3, #0
}
  1294b0:	e1a00003 	mov	r0, r3
  1294b4:	e24bd004 	sub	sp, fp, #4
  1294b8:	e8bd8800 	pop	{fp, pc}

001294bc <netdev_add>:

    lwip_netdev_set_default,
};

static int netdev_add(struct netif *lwip_netif)
{
  1294bc:	e92d4800 	push	{fp, lr}
  1294c0:	e28db004 	add	fp, sp, #4
  1294c4:	e24dd018 	sub	sp, sp, #24
  1294c8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
#define LWIP_NETIF_NAME_LEN 2
    int result = 0;
  1294cc:	e3a03000 	mov	r3, #0
  1294d0:	e50b3008 	str	r3, [fp, #-8]
    struct netdev *netdev = RT_NULL;
  1294d4:	e3a03000 	mov	r3, #0
  1294d8:	e50b300c 	str	r3, [fp, #-12]
    char name[LWIP_NETIF_NAME_LEN + 1] = {0};
  1294dc:	e24b3010 	sub	r3, fp, #16
  1294e0:	e3a02000 	mov	r2, #0
  1294e4:	e1c320b0 	strh	r2, [r3]
  1294e8:	e5c32002 	strb	r2, [r3, #2]

    RT_ASSERT(lwip_netif);
  1294ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1294f0:	e3530000 	cmp	r3, #0
  1294f4:	1a000005 	bne	129510 <netdev_add+0x54>
  1294f8:	e3002141 	movw	r2, #321	; 0x141
  1294fc:	e3081ccc 	movw	r1, #36044	; 0x8ccc
  129500:	e3401014 	movt	r1, #20
  129504:	e3080be4 	movw	r0, #35812	; 0x8be4
  129508:	e3400014 	movt	r0, #20
  12950c:	ebff6821 	bl	103598 <rt_assert_handler>

    netdev = (struct netdev *)rt_calloc(1, sizeof(struct netdev));
  129510:	e3a01044 	mov	r1, #68	; 0x44
  129514:	e3a00001 	mov	r0, #1
  129518:	ebff66bb 	bl	10300c <rt_calloc>
  12951c:	e50b000c 	str	r0, [fp, #-12]
    if (netdev == RT_NULL)
  129520:	e51b300c 	ldr	r3, [fp, #-12]
  129524:	e3530000 	cmp	r3, #0
  129528:	1a000001 	bne	129534 <netdev_add+0x78>
    {
        return -ERR_IF;
  12952c:	e3a0300c 	mov	r3, #12
  129530:	ea000036 	b	129610 <netdev_add+0x154>
//     extern int sal_lwip_netdev_set_pf_info(struct netdev *netdev);
//     /* set the lwIP network interface device protocol family information */
//     sal_lwip_netdev_set_pf_info(netdev);
// #endif /* SAL_USING_LWIP */
    extern int sal_unet_netdev_set_pf_info(struct netdev *netdev);
    sal_unet_netdev_set_pf_info(netdev);
  129534:	e51b000c 	ldr	r0, [fp, #-12]
  129538:	ebff6cfe 	bl	104938 <sal_unet_netdev_set_pf_info>

    rt_strncpy(name, lwip_netif->name, LWIP_NETIF_NAME_LEN);
  12953c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  129540:	e2831042 	add	r1, r3, #66	; 0x42
  129544:	e24b3010 	sub	r3, fp, #16
  129548:	e3a02002 	mov	r2, #2
  12954c:	e1a00003 	mov	r0, r3
  129550:	ebff6742 	bl	103260 <rt_strncpy>
    result = netdev_register(netdev, name, (void *)lwip_netif);
  129554:	e24b3010 	sub	r3, fp, #16
  129558:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  12955c:	e1a01003 	mov	r1, r3
  129560:	e51b000c 	ldr	r0, [fp, #-12]
  129564:	ebff6ebe 	bl	105064 <netdev_register>
  129568:	e50b0008 	str	r0, [fp, #-8]
    // result = ueth_netdev_register(netdev, name, (void *)lwip_netif);
	
    /* Update netdev info after registered */
    netdev->flags = lwip_netif->flags;
  12956c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  129570:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  129574:	e6ff2073 	uxth	r2, r3
  129578:	e51b300c 	ldr	r3, [fp, #-12]
  12957c:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
    netdev->mtu = lwip_netif->mtu;
  129580:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  129584:	e1d323b8 	ldrh	r2, [r3, #56]	; 0x38
  129588:	e51b300c 	ldr	r3, [fp, #-12]
  12958c:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
    netdev->ops = &lwip_netdev_ops;
  129590:	e51b200c 	ldr	r2, [fp, #-12]
  129594:	e3083bc4 	movw	r3, #35780	; 0x8bc4
  129598:	e3403014 	movt	r3, #20
  12959c:	e5823030 	str	r3, [r2, #48]	; 0x30
    netdev->hwaddr_len =  lwip_netif->hwaddr_len;
  1295a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1295a4:	e5d3203a 	ldrb	r2, [r3, #58]	; 0x3a
  1295a8:	e51b300c 	ldr	r3, [fp, #-12]
  1295ac:	e5c32020 	strb	r2, [r3, #32]
    rt_memcpy(netdev->hwaddr, lwip_netif->hwaddr, lwip_netif->hwaddr_len);
  1295b0:	e51b300c 	ldr	r3, [fp, #-12]
  1295b4:	e2830021 	add	r0, r3, #33	; 0x21
  1295b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1295bc:	e283103b 	add	r1, r3, #59	; 0x3b
  1295c0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1295c4:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
  1295c8:	e1a02003 	mov	r2, r3
  1295cc:	ebff674b 	bl	103300 <rt_memcpy>
    netdev->ip_addr = lwip_netif->ip_addr;
  1295d0:	e51b300c 	ldr	r3, [fp, #-12]
  1295d4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1295d8:	e5922004 	ldr	r2, [r2, #4]
  1295dc:	e583200c 	str	r2, [r3, #12]
    netdev->gw = lwip_netif->gw;
  1295e0:	e51b300c 	ldr	r3, [fp, #-12]
  1295e4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1295e8:	e592200c 	ldr	r2, [r2, #12]
  1295ec:	e5832014 	str	r2, [r3, #20]
    netdev->netmask = lwip_netif->netmask;
  1295f0:	e51b300c 	ldr	r3, [fp, #-12]
  1295f4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1295f8:	e5922008 	ldr	r2, [r2, #8]
  1295fc:	e5832010 	str	r2, [r3, #16]

#ifdef RT_LWIP_DHCP
    netdev_low_level_set_dhcp_status(netdev, RT_TRUE);
  129600:	e3a01001 	mov	r1, #1
  129604:	e51b000c 	ldr	r0, [fp, #-12]
  129608:	ebff73fe 	bl	106608 <netdev_low_level_set_dhcp_status>
#endif

    return result;
  12960c:	e51b3008 	ldr	r3, [fp, #-8]
}
  129610:	e1a00003 	mov	r0, r3
  129614:	e24bd004 	sub	sp, fp, #4
  129618:	e8bd8800 	pop	{fp, pc}

0012961c <netdev_del>:

static void netdev_del(struct netif *lwip_netif)
{
  12961c:	e92d4800 	push	{fp, lr}
  129620:	e28db004 	add	fp, sp, #4
  129624:	e24dd010 	sub	sp, sp, #16
  129628:	e50b0010 	str	r0, [fp, #-16]
    char name[LWIP_NETIF_NAME_LEN + 1];
    struct netdev *netdev;

    RT_ASSERT(lwip_netif);
  12962c:	e51b3010 	ldr	r3, [fp, #-16]
  129630:	e3530000 	cmp	r3, #0
  129634:	1a000005 	bne	129650 <netdev_del+0x34>
  129638:	e300216b 	movw	r2, #363	; 0x16b
  12963c:	e3081cd8 	movw	r1, #36056	; 0x8cd8
  129640:	e3401014 	movt	r1, #20
  129644:	e3080be4 	movw	r0, #35812	; 0x8be4
  129648:	e3400014 	movt	r0, #20
  12964c:	ebff67d1 	bl	103598 <rt_assert_handler>

    rt_strncpy(name, lwip_netif->name, LWIP_NETIF_NAME_LEN);
  129650:	e51b3010 	ldr	r3, [fp, #-16]
  129654:	e2831042 	add	r1, r3, #66	; 0x42
  129658:	e24b300c 	sub	r3, fp, #12
  12965c:	e3a02002 	mov	r2, #2
  129660:	e1a00003 	mov	r0, r3
  129664:	ebff66fd 	bl	103260 <rt_strncpy>
    netdev = netdev_get_by_name(name);
  129668:	e24b300c 	sub	r3, fp, #12
  12966c:	e1a00003 	mov	r0, r3
  129670:	ebff6f9f 	bl	1054f4 <netdev_get_by_name>
  129674:	e50b0008 	str	r0, [fp, #-8]
    netdev_unregister(netdev);
  129678:	e51b0008 	ldr	r0, [fp, #-8]
  12967c:	ebff6ee3 	bl	105210 <netdev_unregister>
    rt_free(netdev);
  129680:	e51b0008 	ldr	r0, [fp, #-8]
  129684:	ebff664c 	bl	102fbc <rt_free>
}
  129688:	e320f000 	nop	{0}
  12968c:	e24bd004 	sub	sp, fp, #4
  129690:	e8bd8800 	pop	{fp, pc}

00129694 <netdev_flags_sync>:

/* synchronize lwIP network interface device and network interface device flags */
static int netdev_flags_sync(struct netif *lwip_netif)
{
  129694:	e92d4800 	push	{fp, lr}
  129698:	e28db004 	add	fp, sp, #4
  12969c:	e24dd010 	sub	sp, sp, #16
  1296a0:	e50b0010 	str	r0, [fp, #-16]
    struct netdev *netdev = NULL;
  1296a4:	e3a03000 	mov	r3, #0
  1296a8:	e50b3008 	str	r3, [fp, #-8]

    RT_ASSERT(lwip_netif);
  1296ac:	e51b3010 	ldr	r3, [fp, #-16]
  1296b0:	e3530000 	cmp	r3, #0
  1296b4:	1a000005 	bne	1296d0 <netdev_flags_sync+0x3c>
  1296b8:	e3a02f5e 	mov	r2, #376	; 0x178
  1296bc:	e3081ce4 	movw	r1, #36068	; 0x8ce4
  1296c0:	e3401014 	movt	r1, #20
  1296c4:	e3080be4 	movw	r0, #35812	; 0x8be4
  1296c8:	e3400014 	movt	r0, #20
  1296cc:	ebff67b1 	bl	103598 <rt_assert_handler>

    netdev = netdev_get_by_name(lwip_netif->name);
  1296d0:	e51b3010 	ldr	r3, [fp, #-16]
  1296d4:	e2833042 	add	r3, r3, #66	; 0x42
  1296d8:	e1a00003 	mov	r0, r3
  1296dc:	ebff6f84 	bl	1054f4 <netdev_get_by_name>
  1296e0:	e50b0008 	str	r0, [fp, #-8]
    if (netdev == RT_NULL)
  1296e4:	e51b3008 	ldr	r3, [fp, #-8]
  1296e8:	e3530000 	cmp	r3, #0
  1296ec:	1a000001 	bne	1296f8 <netdev_flags_sync+0x64>
    {
        return -ERR_IF;
  1296f0:	e3a0300c 	mov	r3, #12
  1296f4:	ea00000d 	b	129730 <netdev_flags_sync+0x9c>
    }
    
    netdev->mtu = lwip_netif->mtu;
  1296f8:	e51b3010 	ldr	r3, [fp, #-16]
  1296fc:	e1d323b8 	ldrh	r2, [r3, #56]	; 0x38
  129700:	e51b3008 	ldr	r3, [fp, #-8]
  129704:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
    netdev->flags |= lwip_netif->flags;
  129708:	e51b3008 	ldr	r3, [fp, #-8]
  12970c:	e1d322ba 	ldrh	r2, [r3, #42]	; 0x2a
  129710:	e51b3010 	ldr	r3, [fp, #-16]
  129714:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  129718:	e6ff3073 	uxth	r3, r3
  12971c:	e1823003 	orr	r3, r2, r3
  129720:	e6ff2073 	uxth	r2, r3
  129724:	e51b3008 	ldr	r3, [fp, #-8]
  129728:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a

    return ERR_OK;
  12972c:	e3a03000 	mov	r3, #0
}
  129730:	e1a00003 	mov	r0, r3
  129734:	e24bd004 	sub	sp, fp, #4
  129738:	e8bd8800 	pop	{fp, pc}

0012973c <ethernetif_linkoutput>:
// #endif /* RT_USING_NETDEV */

static err_t ethernetif_linkoutput(struct netif *netif, struct pbuf *p)
{
  12973c:	e92d4800 	push	{fp, lr}
  129740:	e28db004 	add	fp, sp, #4
  129744:	e24dd010 	sub	sp, sp, #16
  129748:	e50b0010 	str	r0, [fp, #-16]
  12974c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
//         return ERR_IF;
//     }
// #endif
    struct eth_device* enetif;

    RT_ASSERT(netif != RT_NULL);
  129750:	e51b3010 	ldr	r3, [fp, #-16]
  129754:	e3530000 	cmp	r3, #0
  129758:	1a000005 	bne	129774 <ethernetif_linkoutput+0x38>
  12975c:	e30021a5 	movw	r2, #421	; 0x1a5
  129760:	e3081cf8 	movw	r1, #36088	; 0x8cf8
  129764:	e3401014 	movt	r1, #20
  129768:	e3080bf0 	movw	r0, #35824	; 0x8bf0
  12976c:	e3400014 	movt	r0, #20
  129770:	ebff6788 	bl	103598 <rt_assert_handler>
    enetif = (struct eth_device*)netif->state;
  129774:	e51b3010 	ldr	r3, [fp, #-16]
  129778:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  12977c:	e50b3008 	str	r3, [fp, #-8]

    if (enetif->eth_tx(&(enetif->parent), p) != RT_EOK)
  129780:	e51b3008 	ldr	r3, [fp, #-8]
  129784:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  129788:	e51b2008 	ldr	r2, [fp, #-8]
  12978c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  129790:	e1a00002 	mov	r0, r2
  129794:	e12fff33 	blx	r3
  129798:	e1a03000 	mov	r3, r0
  12979c:	e3530000 	cmp	r3, #0
  1297a0:	0a000001 	beq	1297ac <ethernetif_linkoutput+0x70>
    {
        return ERR_IF;
  1297a4:	e3e0300b 	mvn	r3, #11
  1297a8:	ea000000 	b	1297b0 <ethernetif_linkoutput+0x74>
    }
    return ERR_OK;
  1297ac:	e3a03000 	mov	r3, #0
}
  1297b0:	e1a00003 	mov	r0, r3
  1297b4:	e24bd004 	sub	sp, fp, #4
  1297b8:	e8bd8800 	pop	{fp, pc}

001297bc <eth_netif_device_init>:

static err_t eth_netif_device_init(struct netif *netif)
{
  1297bc:	e92d4800 	push	{fp, lr}
  1297c0:	e28db004 	add	fp, sp, #4
  1297c4:	e24dd010 	sub	sp, sp, #16
  1297c8:	e50b0010 	str	r0, [fp, #-16]
    struct eth_device *ethif;

    ethif = (struct eth_device*)netif->state;
  1297cc:	e51b3010 	ldr	r3, [fp, #-16]
  1297d0:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  1297d4:	e50b3008 	str	r3, [fp, #-8]
    if (ethif != RT_NULL)
  1297d8:	e51b3008 	ldr	r3, [fp, #-8]
  1297dc:	e3530000 	cmp	r3, #0
  1297e0:	0a000032 	beq	1298b0 <eth_netif_device_init+0xf4>
    {
        rt_device_t device;

#ifdef RT_USING_NETDEV
    /* network interface device register */
    netdev_add(netif);
  1297e4:	e51b0010 	ldr	r0, [fp, #-16]
  1297e8:	ebffff33 	bl	1294bc <netdev_add>
#endif /* RT_USING_NETDEV */

        /* get device object */
        device = (rt_device_t) ethif;
  1297ec:	e51b3008 	ldr	r3, [fp, #-8]
  1297f0:	e50b300c 	str	r3, [fp, #-12]
        if (ueth_device_init(device) != RT_EOK)
  1297f4:	e51b000c 	ldr	r0, [fp, #-12]
  1297f8:	ebff6d1e 	bl	104c78 <ueth_device_init>
  1297fc:	e1a03000 	mov	r3, r0
  129800:	e3530000 	cmp	r3, #0
  129804:	0a000001 	beq	129810 <eth_netif_device_init+0x54>
        // if (rt_device_init(device) != RT_EOK)
        {
            return ERR_IF;
  129808:	e3e0300b 	mvn	r3, #11
  12980c:	ea000028 	b	1298b4 <eth_netif_device_init+0xf8>
        }

        /* copy device flags to netif flags */
        netif->flags = (ethif->flags & 0xff);
  129810:	e51b3008 	ldr	r3, [fp, #-8]
  129814:	e1d336bc 	ldrh	r3, [r3, #108]	; 0x6c
  129818:	e6ef2073 	uxtb	r2, r3
  12981c:	e51b3010 	ldr	r3, [fp, #-16]
  129820:	e5c32041 	strb	r2, [r3, #65]	; 0x41
        netif->mtu = ETHERNET_MTU;
  129824:	e51b3010 	ldr	r3, [fp, #-16]
  129828:	e30025dc 	movw	r2, #1500	; 0x5dc
  12982c:	e1c323b8 	strh	r2, [r3, #56]	; 0x38
        
        /* set output */
        netif->output       = etharp_output;
  129830:	e51b2010 	ldr	r2, [fp, #-16]
  129834:	e30e3978 	movw	r3, #59768	; 0xe978
  129838:	e3403012 	movt	r3, #18
  12983c:	e5823014 	str	r3, [r2, #20]
#endif /* LWIP_IPV6_MLD */

#endif /* LWIP_IPV6 */

        /* set default netif */
        if (netif_default == RT_NULL)
  129840:	e30c3a28 	movw	r3, #51752	; 0xca28
  129844:	e3403015 	movt	r3, #21
  129848:	e5933000 	ldr	r3, [r3]
  12984c:	e3530000 	cmp	r3, #0
  129850:	1a000003 	bne	129864 <eth_netif_device_init+0xa8>
            netif_set_default(ethif->netif);
  129854:	e51b3008 	ldr	r3, [fp, #-8]
  129858:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  12985c:	e1a00003 	mov	r0, r3
  129860:	ebffc04c 	bl	119998 <netif_set_default>
#if LWIP_DHCP
        /* set interface up */
        netif_set_up(ethif->netif);
  129864:	e51b3008 	ldr	r3, [fp, #-8]
  129868:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  12986c:	e1a00003 	mov	r0, r3
  129870:	ebffc054 	bl	1199c8 <netif_set_up>
        /* if this interface uses DHCP, start the DHCP client */
        dhcp_start(ethif->netif);
  129874:	e51b3008 	ldr	r3, [fp, #-8]
  129878:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  12987c:	e1a00003 	mov	r0, r3
  129880:	eb00051b 	bl	12acf4 <dhcp_start>
#else
        /* set interface up */
        netif_set_up(ethif->netif);
#endif
        if (ethif->flags & ETHIF_LINK_PHYUP)
  129884:	e51b3008 	ldr	r3, [fp, #-8]
  129888:	e1d336bc 	ldrh	r3, [r3, #108]	; 0x6c
  12988c:	e2033c01 	and	r3, r3, #256	; 0x100
  129890:	e3530000 	cmp	r3, #0
  129894:	0a000003 	beq	1298a8 <eth_netif_device_init+0xec>
        {
            /* set link_up for this netif */
            netif_set_link_up(ethif->netif);
  129898:	e51b3008 	ldr	r3, [fp, #-8]
  12989c:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  1298a0:	e1a00003 	mov	r0, r3
  1298a4:	ebffc0dc 	bl	119c1c <netif_set_link_up>
        }
        return ERR_OK;
  1298a8:	e3a03000 	mov	r3, #0
  1298ac:	ea000000 	b	1298b4 <eth_netif_device_init+0xf8>
    }

    return ERR_IF;
  1298b0:	e3e0300b 	mvn	r3, #11
}
  1298b4:	e1a00003 	mov	r0, r3
  1298b8:	e24bd004 	sub	sp, fp, #4
  1298bc:	e8bd8800 	pop	{fp, pc}

001298c0 <eth_device_init_with_flag>:

/* Keep old drivers compatible in RT-Thread */
rt_err_t eth_device_init_with_flag(struct eth_device *dev, const char *name, rt_uint16_t flags)
{
  1298c0:	e92d4800 	push	{fp, lr}
  1298c4:	e28db004 	add	fp, sp, #4
  1298c8:	e24dd038 	sub	sp, sp, #56	; 0x38
  1298cc:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  1298d0:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  1298d4:	e1a03002 	mov	r3, r2
  1298d8:	e14b32b6 	strh	r3, [fp, #-38]	; 0xffffffda
    struct netif* netif;
#if LWIP_NETIF_HOSTNAME
#define LWIP_HOSTNAME_LEN 16
    char *hostname = RT_NULL;
  1298dc:	e3a03000 	mov	r3, #0
  1298e0:	e50b3008 	str	r3, [fp, #-8]
    netif = (struct netif*) rt_calloc (1, sizeof(struct netif) + LWIP_HOSTNAME_LEN);
  1298e4:	e3a01098 	mov	r1, #152	; 0x98
  1298e8:	e3a00001 	mov	r0, #1
  1298ec:	ebff65c6 	bl	10300c <rt_calloc>
  1298f0:	e50b000c 	str	r0, [fp, #-12]
#else
    netif = (struct netif*) rt_calloc (1, sizeof(struct netif));
#endif
    if (netif == RT_NULL)
  1298f4:	e51b300c 	ldr	r3, [fp, #-12]
  1298f8:	e3530000 	cmp	r3, #0
  1298fc:	1a000004 	bne	129914 <eth_device_init_with_flag+0x54>
    {
        rt_kprintf("malloc netif failed\n");
  129900:	e3080c04 	movw	r0, #35844	; 0x8c04
  129904:	e3400014 	movt	r0, #20
  129908:	ebff6601 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  12990c:	e3e03000 	mvn	r3, #0
  129910:	ea00005b 	b	129a84 <eth_device_init_with_flag+0x1c4>
    }

    /* set netif */
    dev->netif = netif;
  129914:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  129918:	e51b200c 	ldr	r2, [fp, #-12]
  12991c:	e5832044 	str	r2, [r3, #68]	; 0x44
    /* device flags, which will be set to netif flags when initializing */
    dev->flags = flags;
  129920:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  129924:	e15b22b6 	ldrh	r2, [fp, #-38]	; 0xffffffda
  129928:	e1c326bc 	strh	r2, [r3, #108]	; 0x6c
    /* link changed status of device */
    dev->link_changed = 0x00;
  12992c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  129930:	e3a02000 	mov	r2, #0
  129934:	e5c3206e 	strb	r2, [r3, #110]	; 0x6e
    dev->parent.type = RT_Device_Class_NetIf;
  129938:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12993c:	e3a02002 	mov	r2, #2
  129940:	e5832018 	str	r2, [r3, #24]
    /* register to RT-Thread device manager */
   // rt_device_register(&(dev->parent), name, RT_DEVICE_FLAG_RDWR);
    ueth_device_register(&(dev->parent), name, RT_DEVICE_FLAG_RDWR);
  129944:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  129948:	e3a02003 	mov	r2, #3
  12994c:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  129950:	e1a00003 	mov	r0, r3
  129954:	ebff6c3a 	bl	104a44 <ueth_device_register>
    rt_sem_init(&(dev->tx_ack), name, 0, RT_IPC_FLAG_FIFO);
  129958:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12995c:	e2830048 	add	r0, r3, #72	; 0x48
  129960:	e3a03000 	mov	r3, #0
  129964:	e3a02000 	mov	r2, #0
  129968:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  12996c:	ebff5dc6 	bl	10108c <rt_sem_init>

    /* set name */
    netif->name[0] = name[0];
  129970:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  129974:	e5d32000 	ldrb	r2, [r3]
  129978:	e51b300c 	ldr	r3, [fp, #-12]
  12997c:	e5c32042 	strb	r2, [r3, #66]	; 0x42
    netif->name[1] = name[1];
  129980:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  129984:	e5d32001 	ldrb	r2, [r3, #1]
  129988:	e51b300c 	ldr	r3, [fp, #-12]
  12998c:	e5c32043 	strb	r2, [r3, #67]	; 0x43

    /* set hw address to 6 */
    netif->hwaddr_len   = 6;
  129990:	e51b300c 	ldr	r3, [fp, #-12]
  129994:	e3a02006 	mov	r2, #6
  129998:	e5c3203a 	strb	r2, [r3, #58]	; 0x3a
    /* maximum transfer unit */
    netif->mtu          = ETHERNET_MTU;
  12999c:	e51b300c 	ldr	r3, [fp, #-12]
  1299a0:	e30025dc 	movw	r2, #1500	; 0x5dc
  1299a4:	e1c323b8 	strh	r2, [r3, #56]	; 0x38

    /* set linkoutput */
    netif->linkoutput   = ethernetif_linkoutput;
  1299a8:	e51b200c 	ldr	r2, [fp, #-12]
  1299ac:	e309373c 	movw	r3, #38716	; 0x973c
  1299b0:	e3403012 	movt	r3, #18
  1299b4:	e5823018 	str	r3, [r2, #24]
        
    /* get hardware MAC address */
    ueth_device_control(&(dev->parent), NIOCTL_GADDR, netif->hwaddr);
  1299b8:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1299bc:	e51b300c 	ldr	r3, [fp, #-12]
  1299c0:	e283303b 	add	r3, r3, #59	; 0x3b
  1299c4:	e1a02003 	mov	r2, r3
  1299c8:	e3a01001 	mov	r1, #1
  1299cc:	ebff6d29 	bl	104e78 <ueth_device_control>
    

#if LWIP_NETIF_HOSTNAME
    /* Initialize interface hostname */
    hostname = (char *)netif + sizeof(struct netif);
  1299d0:	e51b300c 	ldr	r3, [fp, #-12]
  1299d4:	e2833088 	add	r3, r3, #136	; 0x88
  1299d8:	e50b3008 	str	r3, [fp, #-8]
    rt_sprintf(hostname, "rtthread_%02x%02x", name[0], name[1]);
  1299dc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1299e0:	e5d33000 	ldrb	r3, [r3]
  1299e4:	e1a02003 	mov	r2, r3
  1299e8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1299ec:	e2833001 	add	r3, r3, #1
  1299f0:	e5d33000 	ldrb	r3, [r3]
  1299f4:	e3081c1c 	movw	r1, #35868	; 0x8c1c
  1299f8:	e3401014 	movt	r1, #20
  1299fc:	e51b0008 	ldr	r0, [fp, #-8]
  129a00:	ebff65a1 	bl	10308c <rt_sprintf>
    netif->hostname = hostname;
  129a04:	e51b300c 	ldr	r3, [fp, #-12]
  129a08:	e51b2008 	ldr	r2, [fp, #-8]
  129a0c:	e5832034 	str	r2, [r3, #52]	; 0x34
#endif /* LWIP_NETIF_HOSTNAME */
    /* if tcp thread has been started up, we add this netif to the system */
    if (rt_thread_find("tcpip") != RT_NULL)
  129a10:	e3080c30 	movw	r0, #35888	; 0x8c30
  129a14:	e3400014 	movt	r0, #20
  129a18:	ebff6196 	bl	102078 <rt_thread_find>
  129a1c:	e1a03000 	mov	r3, r0
  129a20:	e3530000 	cmp	r3, #0
  129a24:	0a000013 	beq	129a78 <eth_device_init_with_flag+0x1b8>
#if !LWIP_DHCP
        ipaddr.addr = inet_addr(RT_LWIP_IPADDR);
        gw.addr = inet_addr(RT_LWIP_GWADDR);
        netmask.addr = inet_addr(RT_LWIP_MSKADDR);
#else        
        IP4_ADDR(&ipaddr, 0, 0, 0, 0);
  129a28:	e3a03000 	mov	r3, #0
  129a2c:	e50b3010 	str	r3, [fp, #-16]
        IP4_ADDR(&gw, 0, 0, 0, 0);
  129a30:	e3a03000 	mov	r3, #0
  129a34:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        IP4_ADDR(&netmask, 0, 0, 0, 0);
  129a38:	e3a03000 	mov	r3, #0
  129a3c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
#endif
        netifapi_netif_add(netif, &ipaddr, &netmask, &gw, dev, eth_netif_device_init, tcpip_input);
  129a40:	e24b0018 	sub	r0, fp, #24
  129a44:	e24b2014 	sub	r2, fp, #20
  129a48:	e24b1010 	sub	r1, fp, #16
  129a4c:	e3063168 	movw	r3, #24936	; 0x6168
  129a50:	e3403011 	movt	r3, #17
  129a54:	e58d3008 	str	r3, [sp, #8]
  129a58:	e30937bc 	movw	r3, #38844	; 0x97bc
  129a5c:	e3403012 	movt	r3, #18
  129a60:	e58d3004 	str	r3, [sp, #4]
  129a64:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  129a68:	e58d3000 	str	r3, [sp]
  129a6c:	e1a03000 	mov	r3, r0
  129a70:	e51b000c 	ldr	r0, [fp, #-12]
  129a74:	ebff9c92 	bl	110cc4 <netifapi_netif_add>
    }
#ifdef RT_USING_NETDEV
    /* network interface device flags synchronize */
    netdev_flags_sync(netif);
  129a78:	e51b000c 	ldr	r0, [fp, #-12]
  129a7c:	ebffff04 	bl	129694 <netdev_flags_sync>
#endif /* RT_USING_NETDEV */
    return RT_EOK;
  129a80:	e3a03000 	mov	r3, #0
}
  129a84:	e1a00003 	mov	r0, r3
  129a88:	e24bd004 	sub	sp, fp, #4
  129a8c:	e8bd8800 	pop	{fp, pc}

00129a90 <eth_device_init>:

rt_err_t eth_device_init(struct eth_device * dev, const char *name)
{
  129a90:	e92d4800 	push	{fp, lr}
  129a94:	e28db004 	add	fp, sp, #4
  129a98:	e24dd010 	sub	sp, sp, #16
  129a9c:	e50b0010 	str	r0, [fp, #-16]
  129aa0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    rt_uint16_t flags = NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
  129aa4:	e3a0300a 	mov	r3, #10
  129aa8:	e14b30b6 	strh	r3, [fp, #-6]

#if LWIP_IGMP
    /* IGMP support */
    flags |= NETIF_FLAG_IGMP;
  129aac:	e15b30b6 	ldrh	r3, [fp, #-6]
  129ab0:	e3833020 	orr	r3, r3, #32
  129ab4:	e14b30b6 	strh	r3, [fp, #-6]
#endif
    return eth_device_init_with_flag(dev, name, flags);
  129ab8:	e15b30b6 	ldrh	r3, [fp, #-6]
  129abc:	e1a02003 	mov	r2, r3
  129ac0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  129ac4:	e51b0010 	ldr	r0, [fp, #-16]
  129ac8:	ebffff7c 	bl	1298c0 <eth_device_init_with_flag>
  129acc:	e1a03000 	mov	r3, r0
}
  129ad0:	e1a00003 	mov	r0, r3
  129ad4:	e24bd004 	sub	sp, fp, #4
  129ad8:	e8bd8800 	pop	{fp, pc}

00129adc <eth_device_deinit>:

void eth_device_deinit(struct eth_device *dev)
{
  129adc:	e92d4800 	push	{fp, lr}
  129ae0:	e28db004 	add	fp, sp, #4
  129ae4:	e24dd010 	sub	sp, sp, #16
  129ae8:	e50b0010 	str	r0, [fp, #-16]
    struct netif* netif = dev->netif;
  129aec:	e51b3010 	ldr	r3, [fp, #-16]
  129af0:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  129af4:	e50b3008 	str	r3, [fp, #-8]

#if LWIP_DHCP
    dhcp_stop(netif);
  129af8:	e51b0008 	ldr	r0, [fp, #-8]
  129afc:	eb0008f4 	bl	12bed4 <dhcp_stop>
    dhcp_cleanup(netif);
  129b00:	e51b0008 	ldr	r0, [fp, #-8]
  129b04:	eb00045e 	bl	12ac84 <dhcp_cleanup>
#endif
    netif_set_down(netif);
  129b08:	e51b0008 	ldr	r0, [fp, #-8]
  129b0c:	ebffc002 	bl	119b1c <netif_set_down>
    netif_remove(netif);
  129b10:	e51b0008 	ldr	r0, [fp, #-8]
  129b14:	ebffbe9b 	bl	119588 <netif_remove>
// #ifdef RT_USING_NETDEV
    netdev_del(netif);
  129b18:	e51b0008 	ldr	r0, [fp, #-8]
  129b1c:	ebfffebe 	bl	12961c <netdev_del>
// #endif
    ueth_device_close(&(dev->parent));
  129b20:	e51b3010 	ldr	r3, [fp, #-16]
  129b24:	e1a00003 	mov	r0, r3
  129b28:	ebff6c8f 	bl	104d6c <ueth_device_close>
    ueth_device_unregister(&(dev->parent));
  129b2c:	e51b3010 	ldr	r3, [fp, #-16]
  129b30:	e1a00003 	mov	r0, r3
  129b34:	ebff6c14 	bl	104b8c <ueth_device_unregister>
    rt_sem_detach(&(dev->tx_ack));
  129b38:	e51b3010 	ldr	r3, [fp, #-16]
  129b3c:	e2833048 	add	r3, r3, #72	; 0x48
  129b40:	e1a00003 	mov	r0, r3
  129b44:	ebff5d96 	bl	1011a4 <rt_sem_detach>
    rt_free(netif);
  129b48:	e51b0008 	ldr	r0, [fp, #-8]
  129b4c:	ebff651a 	bl	102fbc <rt_free>
}
  129b50:	e320f000 	nop	{0}
  129b54:	e24bd004 	sub	sp, fp, #4
  129b58:	e8bd8800 	pop	{fp, pc}

00129b5c <eth_device_ready>:
}
#endif /* SAL_USING_AF_UNIX */

#ifndef LWIP_NO_RX_THREAD
rt_err_t eth_device_ready(struct eth_device* dev)
{
  129b5c:	e92d4800 	push	{fp, lr}
  129b60:	e28db004 	add	fp, sp, #4
  129b64:	e24dd008 	sub	sp, sp, #8
  129b68:	e50b0008 	str	r0, [fp, #-8]
    if (dev->netif)
  129b6c:	e51b3008 	ldr	r3, [fp, #-8]
  129b70:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  129b74:	e3530000 	cmp	r3, #0
  129b78:	0a000006 	beq	129b98 <eth_device_ready+0x3c>
    {
        /* post message to Ethernet thread */
        return rt_mb_send(&eth_rx_thread_mb, (rt_ubase_t)dev);        
  129b7c:	e51b3008 	ldr	r3, [fp, #-8]
  129b80:	e1a01003 	mov	r1, r3
  129b84:	e30e06a4 	movw	r0, #59044	; 0xe6a4
  129b88:	e3400014 	movt	r0, #20
  129b8c:	ebff5e9c 	bl	101604 <rt_mb_send>
  129b90:	e1a03000 	mov	r3, r0
  129b94:	ea000000 	b	129b9c <eth_device_ready+0x40>
    }
    else
        return ERR_OK; /* netif is not initialized yet, just return. */
  129b98:	e3a03000 	mov	r3, #0
}
  129b9c:	e1a00003 	mov	r0, r3
  129ba0:	e24bd004 	sub	sp, fp, #4
  129ba4:	e8bd8800 	pop	{fp, pc}

00129ba8 <eth_device_linkchange>:

rt_err_t eth_device_linkchange(struct eth_device* dev, rt_bool_t up)
{
  129ba8:	e92d4800 	push	{fp, lr}
  129bac:	e28db004 	add	fp, sp, #4
  129bb0:	e24dd010 	sub	sp, sp, #16
  129bb4:	e50b0010 	str	r0, [fp, #-16]
  129bb8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    // rt_uint32_t level;

    RT_ASSERT(dev != RT_NULL);
  129bbc:	e51b3010 	ldr	r3, [fp, #-16]
  129bc0:	e3530000 	cmp	r3, #0
  129bc4:	1a000005 	bne	129be0 <eth_device_linkchange+0x38>
  129bc8:	e3a02fc3 	mov	r2, #780	; 0x30c
  129bcc:	e3081d10 	movw	r1, #36112	; 0x8d10
  129bd0:	e3401014 	movt	r1, #20
  129bd4:	e3080c38 	movw	r0, #35896	; 0x8c38
  129bd8:	e3400014 	movt	r0, #20
  129bdc:	ebff666d 	bl	103598 <rt_assert_handler>

    // level = rt_hw_interrupt_disable();
    dev->link_changed = 0x01;
  129be0:	e51b3010 	ldr	r3, [fp, #-16]
  129be4:	e3a02001 	mov	r2, #1
  129be8:	e5c3206e 	strb	r2, [r3, #110]	; 0x6e
    if (up == RT_TRUE)
  129bec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  129bf0:	e3530001 	cmp	r3, #1
  129bf4:	1a000003 	bne	129c08 <eth_device_linkchange+0x60>
        dev->link_status = 0x01;
  129bf8:	e51b3010 	ldr	r3, [fp, #-16]
  129bfc:	e3a02001 	mov	r2, #1
  129c00:	e5c3206f 	strb	r2, [r3, #111]	; 0x6f
  129c04:	ea000002 	b	129c14 <eth_device_linkchange+0x6c>
    else
        dev->link_status = 0x00;
  129c08:	e51b3010 	ldr	r3, [fp, #-16]
  129c0c:	e3a02000 	mov	r2, #0
  129c10:	e5c3206f 	strb	r2, [r3, #111]	; 0x6f
    // rt_hw_interrupt_enable(level);
    
    // rt_uint32_t level;
    // level = rt_hw_interrupt_disable();
    int status = dev->link_status;
  129c14:	e51b3010 	ldr	r3, [fp, #-16]
  129c18:	e5d3306f 	ldrb	r3, [r3, #111]	; 0x6f
  129c1c:	e50b3008 	str	r3, [fp, #-8]
    dev->link_changed = 0x00;
  129c20:	e51b3010 	ldr	r3, [fp, #-16]
  129c24:	e3a02000 	mov	r2, #0
  129c28:	e5c3206e 	strb	r2, [r3, #110]	; 0x6e
    // rt_hw_interrupt_enable(level);

    if (status)
  129c2c:	e51b3008 	ldr	r3, [fp, #-8]
  129c30:	e3530000 	cmp	r3, #0
  129c34:	0a000007 	beq	129c58 <eth_device_linkchange+0xb0>
        netifapi_netif_set_link_up(dev->netif);
  129c38:	e51b3010 	ldr	r3, [fp, #-16]
  129c3c:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  129c40:	e3a02000 	mov	r2, #0
  129c44:	e3091c1c 	movw	r1, #39964	; 0x9c1c
  129c48:	e3401011 	movt	r1, #17
  129c4c:	e1a00003 	mov	r0, r3
  129c50:	ebff9c79 	bl	110e3c <netifapi_netif_common>
  129c54:	ea000006 	b	129c74 <eth_device_linkchange+0xcc>
    else
        netifapi_netif_set_link_down(dev->netif);
  129c58:	e51b3010 	ldr	r3, [fp, #-16]
  129c5c:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  129c60:	e3a02000 	mov	r2, #0
  129c64:	e3091ccc 	movw	r1, #40140	; 0x9ccc
  129c68:	e3401011 	movt	r1, #17
  129c6c:	e1a00003 	mov	r0, r3
  129c70:	ebff9c71 	bl	110e3c <netifapi_netif_common>

    return RT_EOK;
  129c74:	e3a03000 	mov	r3, #0
}
  129c78:	e1a00003 	mov	r0, r3
  129c7c:	e24bd004 	sub	sp, fp, #4
  129c80:	e8bd8800 	pop	{fp, pc}

00129c84 <eth_rx_thread_entry>:
#ifndef LWIP_NO_RX_THREAD

/* Ethernet Rx Thread */
extern void* ueth_rx_interrupt_detect(void);
static void eth_rx_thread_entry(void* parameter)
{
  129c84:	e92d4800 	push	{fp, lr}
  129c88:	e28db004 	add	fp, sp, #4
  129c8c:	e24dd010 	sub	sp, sp, #16
  129c90:	e50b0010 	str	r0, [fp, #-16]
    struct eth_device* device;
    struct pbuf *p;

    while (!eth_init_done)
  129c94:	ea000001 	b	129ca0 <eth_rx_thread_entry+0x1c>
    {
        rt_thread_mdelay(10);
  129c98:	e3a0000a 	mov	r0, #10
  129c9c:	ebff6076 	bl	101e7c <rt_thread_mdelay>
    while (!eth_init_done)
  129ca0:	e30e3c00 	movw	r3, #60416	; 0xec00
  129ca4:	e3403014 	movt	r3, #20
  129ca8:	e5933000 	ldr	r3, [r3]
  129cac:	e3530000 	cmp	r3, #0
  129cb0:	0afffff8 	beq	129c98 <eth_rx_thread_entry+0x14>
    }

    while (1)
    {
        device = (struct eth_device*)ueth_rx_interrupt_detect();
  129cb4:	eb002e61 	bl	135640 <ueth_rx_interrupt_detect>
  129cb8:	e50b0008 	str	r0, [fp, #-8]
        if(device->eth_rx == RT_NULL) break;
  129cbc:	e51b3008 	ldr	r3, [fp, #-8]
  129cc0:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  129cc4:	e3530000 	cmp	r3, #0
  129cc8:	0a00001a 	beq	129d38 <eth_rx_thread_entry+0xb4>

        /* receive all of buffer */
        while (1)
        {
            p = device->eth_rx(&(device->parent));
  129ccc:	e51b3008 	ldr	r3, [fp, #-8]
  129cd0:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  129cd4:	e51b2008 	ldr	r2, [fp, #-8]
  129cd8:	e1a00002 	mov	r0, r2
  129cdc:	e12fff33 	blx	r3
  129ce0:	e50b000c 	str	r0, [fp, #-12]
            if (p != RT_NULL)
  129ce4:	e51b300c 	ldr	r3, [fp, #-12]
  129ce8:	e3530000 	cmp	r3, #0
  129cec:	0a00000f 	beq	129d30 <eth_rx_thread_entry+0xac>
            {
                /* notify to upper layer */
                if(device->netif->input(p, device->netif) != ERR_OK)
  129cf0:	e51b3008 	ldr	r3, [fp, #-8]
  129cf4:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  129cf8:	e5933010 	ldr	r3, [r3, #16]
  129cfc:	e51b2008 	ldr	r2, [fp, #-8]
  129d00:	e5922044 	ldr	r2, [r2, #68]	; 0x44
  129d04:	e1a01002 	mov	r1, r2
  129d08:	e51b000c 	ldr	r0, [fp, #-12]
  129d0c:	e12fff33 	blx	r3
  129d10:	e1a03000 	mov	r3, r0
  129d14:	e3530000 	cmp	r3, #0
  129d18:	0affffeb 	beq	129ccc <eth_rx_thread_entry+0x48>
                {
                    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: Input error\n"));
                    pbuf_free(p);
  129d1c:	e51b000c 	ldr	r0, [fp, #-12]
  129d20:	ebffc462 	bl	11aeb0 <pbuf_free>
                    p = NULL;
  129d24:	e3a03000 	mov	r3, #0
  129d28:	e50b300c 	str	r3, [fp, #-12]
            p = device->eth_rx(&(device->parent));
  129d2c:	eaffffe6 	b	129ccc <eth_rx_thread_entry+0x48>
                }
            }
            else break;
  129d30:	e320f000 	nop	{0}
        device = (struct eth_device*)ueth_rx_interrupt_detect();
  129d34:	eaffffde 	b	129cb4 <eth_rx_thread_entry+0x30>
        if(device->eth_rx == RT_NULL) break;
  129d38:	e320f000 	nop	{0}
        }
    }
}
  129d3c:	e320f000 	nop	{0}
  129d40:	e24bd004 	sub	sp, fp, #4
  129d44:	e8bd8800 	pop	{fp, pc}

00129d48 <eth_system_device_init>:
/* this function does not need, 
 * use eth_system_device_init_private() 
 * call by lwip_system_init(). 
 */
int eth_system_device_init(void)
{
  129d48:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  129d4c:	e28db000 	add	fp, sp, #0
    return 0;
  129d50:	e3a03000 	mov	r3, #0
}
  129d54:	e1a00003 	mov	r0, r3
  129d58:	e28bd000 	add	sp, fp, #0
  129d5c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  129d60:	e12fff1e 	bx	lr

00129d64 <eth_system_device_init_private>:
int eth_system_device_init_private(void)
{
  129d64:	e92d4800 	push	{fp, lr}
  129d68:	e28db004 	add	fp, sp, #4
  129d6c:	e24dd010 	sub	sp, sp, #16
    rt_err_t result = RT_EOK;
  129d70:	e3a03000 	mov	r3, #0
  129d74:	e50b3008 	str	r3, [fp, #-8]

    /* initialize Rx thread. */
#ifndef LWIP_NO_RX_THREAD
    /* initialize mailbox and create Ethernet Rx thread */
    result = rt_mb_init(&eth_rx_thread_mb, "erxmb",
  129d78:	e3a03000 	mov	r3, #0
  129d7c:	e58d3000 	str	r3, [sp]
  129d80:	e3a03c01 	mov	r3, #256	; 0x100
  129d84:	e30e26d8 	movw	r2, #59096	; 0xe6d8
  129d88:	e3402014 	movt	r2, #20
  129d8c:	e3081c48 	movw	r1, #35912	; 0x8c48
  129d90:	e3401014 	movt	r1, #20
  129d94:	e30e06a4 	movw	r0, #59044	; 0xe6a4
  129d98:	e3400014 	movt	r0, #20
  129d9c:	ebff5d8b 	bl	1013d0 <rt_mb_init>
  129da0:	e50b0008 	str	r0, [fp, #-8]
                        &eth_rx_thread_mb_pool[0], sizeof(eth_rx_thread_mb_pool)/sizeof(void *),
                        RT_IPC_FLAG_FIFO);
    RT_ASSERT(result == RT_EOK);
  129da4:	e51b3008 	ldr	r3, [fp, #-8]
  129da8:	e3530000 	cmp	r3, #0
  129dac:	0a000005 	beq	129dc8 <eth_system_device_init_private+0x64>
  129db0:	e300238e 	movw	r2, #910	; 0x38e
  129db4:	e3081d28 	movw	r1, #36136	; 0x8d28
  129db8:	e3401014 	movt	r1, #20
  129dbc:	e3080c50 	movw	r0, #35920	; 0x8c50
  129dc0:	e3400014 	movt	r0, #20
  129dc4:	ebff65f3 	bl	103598 <rt_assert_handler>

    rt_thread_t erx_tid = rt_thread_create("erx", eth_rx_thread_entry, RT_NULL, RT_LWIP_ETHTHREAD_STACKSIZE, 25, 16);
  129dc8:	e3a03010 	mov	r3, #16
  129dcc:	e58d3004 	str	r3, [sp, #4]
  129dd0:	e3a03019 	mov	r3, #25
  129dd4:	e58d3000 	str	r3, [sp]
  129dd8:	e3a03a02 	mov	r3, #8192	; 0x2000
  129ddc:	e3a02000 	mov	r2, #0
  129de0:	e3091c84 	movw	r1, #40068	; 0x9c84
  129de4:	e3401012 	movt	r1, #18
  129de8:	e3080c64 	movw	r0, #35940	; 0x8c64
  129dec:	e3400014 	movt	r0, #20
  129df0:	ebff60bf 	bl	1020f4 <rt_thread_create>
  129df4:	e50b000c 	str	r0, [fp, #-12]
    // rt_thread_t erx_tid = rt_thread_create("erx", eth_rx_thread_entry, RT_NULL, RT_LWIP_ETHTHREAD_STACKSIZE, 30, 16);
    result = rt_thread_startup(erx_tid);
  129df8:	e51b000c 	ldr	r0, [fp, #-12]
  129dfc:	ebff60f1 	bl	1021c8 <rt_thread_startup>
  129e00:	e50b0008 	str	r0, [fp, #-8]
    RT_ASSERT(result == RT_EOK);
  129e04:	e51b3008 	ldr	r3, [fp, #-8]
  129e08:	e3530000 	cmp	r3, #0
  129e0c:	0a000005 	beq	129e28 <eth_system_device_init_private+0xc4>
  129e10:	e3002393 	movw	r2, #915	; 0x393
  129e14:	e3081d28 	movw	r1, #36136	; 0x8d28
  129e18:	e3401014 	movt	r1, #20
  129e1c:	e3080c50 	movw	r0, #35920	; 0x8c50
  129e20:	e3400014 	movt	r0, #20
  129e24:	ebff65db 	bl	103598 <rt_assert_handler>
#endif

    /* initialize Tx thread */
#ifndef LWIP_NO_TX_THREAD
    /* initialize mailbox and create Ethernet Tx thread */
    result = rt_mb_init(&eth_tx_thread_mb, "etxmb",
  129e28:	e3a03000 	mov	r3, #0
  129e2c:	e58d3000 	str	r3, [sp]
  129e30:	e3a03c01 	mov	r3, #256	; 0x100
  129e34:	e30e22a4 	movw	r2, #58020	; 0xe2a4
  129e38:	e3402014 	movt	r2, #20
  129e3c:	e3081c68 	movw	r1, #35944	; 0x8c68
  129e40:	e3401014 	movt	r1, #20
  129e44:	e30e0270 	movw	r0, #57968	; 0xe270
  129e48:	e3400014 	movt	r0, #20
  129e4c:	ebff5d5f 	bl	1013d0 <rt_mb_init>
  129e50:	e50b0008 	str	r0, [fp, #-8]
                        &eth_tx_thread_mb_pool[0], sizeof(eth_tx_thread_mb_pool)/sizeof(void *),
                        RT_IPC_FLAG_FIFO);
    RT_ASSERT(result == RT_EOK);
  129e54:	e51b3008 	ldr	r3, [fp, #-8]
  129e58:	e3530000 	cmp	r3, #0
  129e5c:	0a000005 	beq	129e78 <eth_system_device_init_private+0x114>
  129e60:	e30023a3 	movw	r2, #931	; 0x3a3
  129e64:	e3081d28 	movw	r1, #36136	; 0x8d28
  129e68:	e3401014 	movt	r1, #20
  129e6c:	e3080c50 	movw	r0, #35920	; 0x8c50
  129e70:	e3400014 	movt	r0, #20
  129e74:	ebff65c7 	bl	103598 <rt_assert_handler>

    // rt_thread_t etx_tid = rt_thread_create("etx", eth_tx_thread_entry, RT_NULL, RT_LWIP_ETHTHREAD_STACKSIZE, RT_ETHERNETIF_THREAD_PREORITY, 16);
    // result = rt_thread_startup(etx_tid);
    // RT_ASSERT(result == RT_EOK);
#endif
    return (int)result;
  129e78:	e51b3008 	ldr	r3, [fp, #-8]
}
  129e7c:	e1a00003 	mov	r0, r3
  129e80:	e24bd004 	sub	sp, fp, #4
  129e84:	e8bd8800 	pop	{fp, pc}

00129e88 <set_if>:

void set_if(char* netif_name, char* ip_addr, char* gw_addr, char* nm_addr)
{
  129e88:	e92d4800 	push	{fp, lr}
  129e8c:	e28db004 	add	fp, sp, #4
  129e90:	e24dd020 	sub	sp, sp, #32
  129e94:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  129e98:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  129e9c:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  129ea0:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    ip4_addr_t *ip;
    ip4_addr_t addr;
    struct netif * netif = netif_list;
  129ea4:	e30c3a24 	movw	r3, #51748	; 0xca24
  129ea8:	e3403015 	movt	r3, #21
  129eac:	e5933000 	ldr	r3, [r3]
  129eb0:	e50b3008 	str	r3, [fp, #-8]

    if(strlen(netif_name) > sizeof(netif->name))
  129eb4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  129eb8:	eb005d7e 	bl	1414b8 <strlen>
  129ebc:	e1a03000 	mov	r3, r0
  129ec0:	e3530002 	cmp	r3, #2
  129ec4:	9a000017 	bls	129f28 <set_if+0xa0>
    {
        rt_kprintf("network interface name too long!\r\n");
  129ec8:	e3080c70 	movw	r0, #35952	; 0x8c70
  129ecc:	e3400014 	movt	r0, #20
  129ed0:	ebff648f 	bl	103114 <rt_kprintf>
        return;
  129ed4:	ea000041 	b	129fe0 <set_if+0x158>
    }

    while(netif != RT_NULL)
    {
        if(strncmp(netif_name, netif->name, sizeof(netif->name)) == 0)
  129ed8:	e51b3008 	ldr	r3, [fp, #-8]
  129edc:	e2833042 	add	r3, r3, #66	; 0x42
  129ee0:	e3a02002 	mov	r2, #2
  129ee4:	e1a01003 	mov	r1, r3
  129ee8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  129eec:	eb005d9d 	bl	141568 <strncmp>
  129ef0:	e1a03000 	mov	r3, r0
  129ef4:	e3530000 	cmp	r3, #0
  129ef8:	0a00000e 	beq	129f38 <set_if+0xb0>
            break;

        netif = netif->next;
  129efc:	e51b3008 	ldr	r3, [fp, #-8]
  129f00:	e5933000 	ldr	r3, [r3]
  129f04:	e50b3008 	str	r3, [fp, #-8]
        if( netif == RT_NULL )
  129f08:	e51b3008 	ldr	r3, [fp, #-8]
  129f0c:	e3530000 	cmp	r3, #0
  129f10:	1a000004 	bne	129f28 <set_if+0xa0>
        {
            rt_kprintf("network interface: %s not found!\r\n", netif_name);
  129f14:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  129f18:	e3080c94 	movw	r0, #35988	; 0x8c94
  129f1c:	e3400014 	movt	r0, #20
  129f20:	ebff647b 	bl	103114 <rt_kprintf>
            return;
  129f24:	ea00002d 	b	129fe0 <set_if+0x158>
    while(netif != RT_NULL)
  129f28:	e51b3008 	ldr	r3, [fp, #-8]
  129f2c:	e3530000 	cmp	r3, #0
  129f30:	1affffe8 	bne	129ed8 <set_if+0x50>
  129f34:	ea000000 	b	129f3c <set_if+0xb4>
            break;
  129f38:	e320f000 	nop	{0}
        }
    }

    ip = (ip4_addr_t *)&addr;
  129f3c:	e24b3010 	sub	r3, fp, #16
  129f40:	e50b300c 	str	r3, [fp, #-12]

    /* set ip address */
    if ((ip_addr != RT_NULL) && ip4addr_aton(ip_addr, &addr))
  129f44:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  129f48:	e3530000 	cmp	r3, #0
  129f4c:	0a000009 	beq	129f78 <set_if+0xf0>
  129f50:	e24b3010 	sub	r3, fp, #16
  129f54:	e1a01003 	mov	r1, r3
  129f58:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  129f5c:	eb0021e1 	bl	1326e8 <ip4addr_aton>
  129f60:	e1a03000 	mov	r3, r0
  129f64:	e3530000 	cmp	r3, #0
  129f68:	0a000002 	beq	129f78 <set_if+0xf0>
    {
        netif_set_ipaddr(netif, ip);
  129f6c:	e51b100c 	ldr	r1, [fp, #-12]
  129f70:	e51b0008 	ldr	r0, [fp, #-8]
  129f74:	ebffbe0e 	bl	1197b4 <netif_set_ipaddr>
    }

    /* set gateway address */
    if ((gw_addr != RT_NULL) && ip4addr_aton(gw_addr, &addr))
  129f78:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  129f7c:	e3530000 	cmp	r3, #0
  129f80:	0a000009 	beq	129fac <set_if+0x124>
  129f84:	e24b3010 	sub	r3, fp, #16
  129f88:	e1a01003 	mov	r1, r3
  129f8c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  129f90:	eb0021d4 	bl	1326e8 <ip4addr_aton>
  129f94:	e1a03000 	mov	r3, r0
  129f98:	e3530000 	cmp	r3, #0
  129f9c:	0a000002 	beq	129fac <set_if+0x124>
    {
        netif_set_gw(netif, ip);
  129fa0:	e51b100c 	ldr	r1, [fp, #-12]
  129fa4:	e51b0008 	ldr	r0, [fp, #-8]
  129fa8:	ebffbe48 	bl	1198d0 <netif_set_gw>
    }

    /* set netmask address */
    if ((nm_addr != RT_NULL) && ip4addr_aton(nm_addr, &addr))
  129fac:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  129fb0:	e3530000 	cmp	r3, #0
  129fb4:	0a000009 	beq	129fe0 <set_if+0x158>
  129fb8:	e24b3010 	sub	r3, fp, #16
  129fbc:	e1a01003 	mov	r1, r3
  129fc0:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  129fc4:	eb0021c7 	bl	1326e8 <ip4addr_aton>
  129fc8:	e1a03000 	mov	r3, r0
  129fcc:	e3530000 	cmp	r3, #0
  129fd0:	0a000002 	beq	129fe0 <set_if+0x158>
    {
        netif_set_netmask(netif, ip);
  129fd4:	e51b100c 	ldr	r1, [fp, #-12]
  129fd8:	e51b0008 	ldr	r0, [fp, #-8]
  129fdc:	ebffbe54 	bl	119934 <netif_set_netmask>
    }
}
  129fe0:	e24bd004 	sub	sp, fp, #4
  129fe4:	e8bd8800 	pop	{fp, pc}

00129fe8 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(struct dhcp *dhcp);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
  129fe8:	e92d4800 	push	{fp, lr}
  129fec:	e28db004 	add	fp, sp, #4
  if (dhcp_pcb_refcount == 0) {
  129ff0:	e30e3adc 	movw	r3, #60124	; 0xeadc
  129ff4:	e3403014 	movt	r3, #20
  129ff8:	e5d33000 	ldrb	r3, [r3]
  129ffc:	e3530000 	cmp	r3, #0
  12a000:	1a000039 	bne	12a0ec <dhcp_inc_pcb_refcount+0x104>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
  12a004:	e30e3ad8 	movw	r3, #60120	; 0xead8
  12a008:	e3403014 	movt	r3, #20
  12a00c:	e5933000 	ldr	r3, [r3]
  12a010:	e3530000 	cmp	r3, #0
  12a014:	0a000006 	beq	12a034 <dhcp_inc_pcb_refcount+0x4c>
  12a018:	e3080d48 	movw	r0, #36168	; 0x8d48
  12a01c:	e3400014 	movt	r0, #20
  12a020:	ebff643b 	bl	103114 <rt_kprintf>
  12a024:	e3a010db 	mov	r1, #219	; 0xdb
  12a028:	e3080d70 	movw	r0, #36208	; 0x8d70
  12a02c:	e3400014 	movt	r0, #20
  12a030:	ebff842e 	bl	10b0f0 <sys_arch_assert>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
  12a034:	ebfffaa1 	bl	128ac0 <udp_new>
  12a038:	e1a02000 	mov	r2, r0
  12a03c:	e30e3ad8 	movw	r3, #60120	; 0xead8
  12a040:	e3403014 	movt	r3, #20
  12a044:	e5832000 	str	r2, [r3]

    if (dhcp_pcb == NULL) {
  12a048:	e30e3ad8 	movw	r3, #60120	; 0xead8
  12a04c:	e3403014 	movt	r3, #20
  12a050:	e5933000 	ldr	r3, [r3]
  12a054:	e3530000 	cmp	r3, #0
  12a058:	1a000001 	bne	12a064 <dhcp_inc_pcb_refcount+0x7c>
      return ERR_MEM;
  12a05c:	e3e03000 	mvn	r3, #0
  12a060:	ea00002a 	b	12a110 <dhcp_inc_pcb_refcount+0x128>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
  12a064:	e30e3ad8 	movw	r3, #60120	; 0xead8
  12a068:	e3403014 	movt	r3, #20
  12a06c:	e5933000 	ldr	r3, [r3]
  12a070:	e5d32008 	ldrb	r2, [r3, #8]
  12a074:	e30e3ad8 	movw	r3, #60120	; 0xead8
  12a078:	e3403014 	movt	r3, #20
  12a07c:	e5933000 	ldr	r3, [r3]
  12a080:	e3822020 	orr	r2, r2, #32
  12a084:	e6ef2072 	uxtb	r2, r2
  12a088:	e5c32008 	strb	r2, [r3, #8]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, DHCP_CLIENT_PORT);
  12a08c:	e30e3ad8 	movw	r3, #60120	; 0xead8
  12a090:	e3403014 	movt	r3, #20
  12a094:	e5933000 	ldr	r3, [r3]
  12a098:	e3a02044 	mov	r2, #68	; 0x44
  12a09c:	e3091908 	movw	r1, #39176	; 0x9908
  12a0a0:	e3401014 	movt	r1, #20
  12a0a4:	e1a00003 	mov	r0, r3
  12a0a8:	ebfff969 	bl	128654 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, DHCP_SERVER_PORT);
  12a0ac:	e30e3ad8 	movw	r3, #60120	; 0xead8
  12a0b0:	e3403014 	movt	r3, #20
  12a0b4:	e5933000 	ldr	r3, [r3]
  12a0b8:	e3a02043 	mov	r2, #67	; 0x43
  12a0bc:	e3091908 	movw	r1, #39176	; 0x9908
  12a0c0:	e3401014 	movt	r1, #20
  12a0c4:	e1a00003 	mov	r0, r3
  12a0c8:	ebfff9d7 	bl	12882c <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
  12a0cc:	e30e3ad8 	movw	r3, #60120	; 0xead8
  12a0d0:	e3403014 	movt	r3, #20
  12a0d4:	e5933000 	ldr	r3, [r3]
  12a0d8:	e3a02000 	mov	r2, #0
  12a0dc:	e30c1d50 	movw	r1, #52560	; 0xcd50
  12a0e0:	e3401012 	movt	r1, #18
  12a0e4:	e1a00003 	mov	r0, r3
  12a0e8:	ebfffa33 	bl	1289bc <udp_recv>
  }

  dhcp_pcb_refcount++;
  12a0ec:	e30e3adc 	movw	r3, #60124	; 0xeadc
  12a0f0:	e3403014 	movt	r3, #20
  12a0f4:	e5d33000 	ldrb	r3, [r3]
  12a0f8:	e2833001 	add	r3, r3, #1
  12a0fc:	e6ef2073 	uxtb	r2, r3
  12a100:	e30e3adc 	movw	r3, #60124	; 0xeadc
  12a104:	e3403014 	movt	r3, #20
  12a108:	e5c32000 	strb	r2, [r3]

  return ERR_OK;
  12a10c:	e3a03000 	mov	r3, #0
}
  12a110:	e1a00003 	mov	r0, r3
  12a114:	e8bd8800 	pop	{fp, pc}

0012a118 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
  12a118:	e92d4800 	push	{fp, lr}
  12a11c:	e28db004 	add	fp, sp, #4
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
  12a120:	e30e3adc 	movw	r3, #60124	; 0xeadc
  12a124:	e3403014 	movt	r3, #20
  12a128:	e5d33000 	ldrb	r3, [r3]
  12a12c:	e3530000 	cmp	r3, #0
  12a130:	1a000006 	bne	12a150 <dhcp_dec_pcb_refcount+0x38>
  12a134:	e3080da4 	movw	r0, #36260	; 0x8da4
  12a138:	e3400014 	movt	r0, #20
  12a13c:	ebff63f4 	bl	103114 <rt_kprintf>
  12a140:	e3a010f5 	mov	r1, #245	; 0xf5
  12a144:	e3080d70 	movw	r0, #36208	; 0x8d70
  12a148:	e3400014 	movt	r0, #20
  12a14c:	ebff83e7 	bl	10b0f0 <sys_arch_assert>
  dhcp_pcb_refcount--;
  12a150:	e30e3adc 	movw	r3, #60124	; 0xeadc
  12a154:	e3403014 	movt	r3, #20
  12a158:	e5d33000 	ldrb	r3, [r3]
  12a15c:	e2433001 	sub	r3, r3, #1
  12a160:	e6ef2073 	uxtb	r2, r3
  12a164:	e30e3adc 	movw	r3, #60124	; 0xeadc
  12a168:	e3403014 	movt	r3, #20
  12a16c:	e5c32000 	strb	r2, [r3]

  if (dhcp_pcb_refcount == 0) {
  12a170:	e30e3adc 	movw	r3, #60124	; 0xeadc
  12a174:	e3403014 	movt	r3, #20
  12a178:	e5d33000 	ldrb	r3, [r3]
  12a17c:	e3530000 	cmp	r3, #0
  12a180:	1a000008 	bne	12a1a8 <dhcp_dec_pcb_refcount+0x90>
    udp_remove(dhcp_pcb);
  12a184:	e30e3ad8 	movw	r3, #60120	; 0xead8
  12a188:	e3403014 	movt	r3, #20
  12a18c:	e5933000 	ldr	r3, [r3]
  12a190:	e1a00003 	mov	r0, r3
  12a194:	ebfffa18 	bl	1289fc <udp_remove>
    dhcp_pcb = NULL;
  12a198:	e30e3ad8 	movw	r3, #60120	; 0xead8
  12a19c:	e3403014 	movt	r3, #20
  12a1a0:	e3a02000 	mov	r2, #0
  12a1a4:	e5832000 	str	r2, [r3]
  }
}
  12a1a8:	e320f000 	nop	{0}
  12a1ac:	e8bd8800 	pop	{fp, pc}

0012a1b0 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
  12a1b0:	e92d4800 	push	{fp, lr}
  12a1b4:	e28db004 	add	fp, sp, #4
  12a1b8:	e24dd010 	sub	sp, sp, #16
  12a1bc:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12a1c0:	e51b3010 	ldr	r3, [fp, #-16]
  12a1c4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a1c8:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
  12a1cc:	e3a0100c 	mov	r1, #12
  12a1d0:	e51b0008 	ldr	r0, [fp, #-8]
  12a1d4:	eb00076b 	bl	12bf88 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
  12a1d8:	e3093908 	movw	r3, #39176	; 0x9908
  12a1dc:	e3403014 	movt	r3, #20
  12a1e0:	e3092908 	movw	r2, #39176	; 0x9908
  12a1e4:	e3402014 	movt	r2, #20
  12a1e8:	e3091908 	movw	r1, #39176	; 0x9908
  12a1ec:	e3401014 	movt	r1, #20
  12a1f0:	e51b0010 	ldr	r0, [fp, #-16]
  12a1f4:	ebffbcbf 	bl	1194f8 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
  12a1f8:	e51b0010 	ldr	r0, [fp, #-16]
  12a1fc:	eb000420 	bl	12b284 <dhcp_discover>
}
  12a200:	e320f000 	nop	{0}
  12a204:	e24bd004 	sub	sp, fp, #4
  12a208:	e8bd8800 	pop	{fp, pc}

0012a20c <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
  12a20c:	e92d4800 	push	{fp, lr}
  12a210:	e28db004 	add	fp, sp, #4
  12a214:	e24dd010 	sub	sp, sp, #16
  12a218:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12a21c:	e51b3010 	ldr	r3, [fp, #-16]
  12a220:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a224:	e50b3008 	str	r3, [fp, #-8]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
    (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
  12a228:	e3a01008 	mov	r1, #8
  12a22c:	e51b0008 	ldr	r0, [fp, #-8]
  12a230:	eb000754 	bl	12bf88 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
  12a234:	e51b3008 	ldr	r3, [fp, #-8]
  12a238:	e2833028 	add	r3, r3, #40	; 0x28
  12a23c:	e3a02000 	mov	r2, #0
  12a240:	e1a01003 	mov	r1, r3
  12a244:	e51b0010 	ldr	r0, [fp, #-16]
  12a248:	eb0012a0 	bl	12ecd0 <etharp_query>
  12a24c:	e1a03000 	mov	r3, r0
  12a250:	e54b3009 	strb	r3, [fp, #-9]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
  12a254:	e51b3008 	ldr	r3, [fp, #-8]
  12a258:	e5d3300a 	ldrb	r3, [r3, #10]
  12a25c:	e35300ff 	cmp	r3, #255	; 0xff
  12a260:	0a000005 	beq	12a27c <dhcp_check+0x70>
    dhcp->tries++;
  12a264:	e51b3008 	ldr	r3, [fp, #-8]
  12a268:	e5d3300a 	ldrb	r3, [r3, #10]
  12a26c:	e2833001 	add	r3, r3, #1
  12a270:	e6ef2073 	uxtb	r2, r3
  12a274:	e51b3008 	ldr	r3, [fp, #-8]
  12a278:	e5c3200a 	strb	r2, [r3, #10]
  }
  msecs = 500;
  12a27c:	e3a03f7d 	mov	r3, #500	; 0x1f4
  12a280:	e14b30bc 	strh	r3, [fp, #-12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  12a284:	e15b30bc 	ldrh	r3, [fp, #-12]
  12a288:	e2833e1f 	add	r3, r3, #496	; 0x1f0
  12a28c:	e2833003 	add	r3, r3, #3
  12a290:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  12a294:	e3412062 	movt	r2, #4194	; 0x1062
  12a298:	e0c10293 	smull	r0, r1, r3, r2
  12a29c:	e1a022c1 	asr	r2, r1, #5
  12a2a0:	e1a03fc3 	asr	r3, r3, #31
  12a2a4:	e0423003 	sub	r3, r2, r3
  12a2a8:	e6ff2073 	uxth	r2, r3
  12a2ac:	e51b3008 	ldr	r3, [fp, #-8]
  12a2b0:	e1c321b6 	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
  12a2b4:	e320f000 	nop	{0}
  12a2b8:	e24bd004 	sub	sp, fp, #4
  12a2bc:	e8bd8800 	pop	{fp, pc}

0012a2c0 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif)
{
  12a2c0:	e92d4800 	push	{fp, lr}
  12a2c4:	e28db004 	add	fp, sp, #4
  12a2c8:	e24dd010 	sub	sp, sp, #16
  12a2cc:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12a2d0:	e51b3010 	ldr	r3, [fp, #-16]
  12a2d4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a2d8:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
  12a2dc:	e30c3c3c 	movw	r3, #52284	; 0xcc3c
  12a2e0:	e3403015 	movt	r3, #21
  12a2e4:	e5d33002 	ldrb	r3, [r3, #2]
  12a2e8:	e3530000 	cmp	r3, #0
  12a2ec:	0a00000e 	beq	12a32c <dhcp_handle_offer+0x6c>
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
  12a2f0:	e30c3c48 	movw	r3, #52296	; 0xcc48
  12a2f4:	e3403015 	movt	r3, #21
  12a2f8:	e5933008 	ldr	r3, [r3, #8]
  12a2fc:	e1a00003 	mov	r0, r3
  12a300:	ebffb0bf 	bl	116604 <lwip_htonl>
  12a304:	e1a02000 	mov	r2, r0
  12a308:	e51b3008 	ldr	r3, [fp, #-8]
  12a30c:	e5832024 	str	r2, [r3, #36]	; 0x24
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
      ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
  12a310:	e51b3008 	ldr	r3, [fp, #-8]
  12a314:	e5933004 	ldr	r3, [r3, #4]
  12a318:	e5932010 	ldr	r2, [r3, #16]
  12a31c:	e51b3008 	ldr	r3, [fp, #-8]
  12a320:	e5832028 	str	r2, [r3, #40]	; 0x28
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
      ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
  12a324:	e51b0010 	ldr	r0, [fp, #-16]
  12a328:	eb000002 	bl	12a338 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void*)netif));
  }
}
  12a32c:	e320f000 	nop	{0}
  12a330:	e24bd004 	sub	sp, fp, #4
  12a334:	e8bd8800 	pop	{fp, pc}

0012a338 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
  12a338:	e92d4800 	push	{fp, lr}
  12a33c:	e28db004 	add	fp, sp, #4
  12a340:	e24dd020 	sub	sp, sp, #32
  12a344:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12a348:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12a34c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a350:	e50b300c 	str	r3, [fp, #-12]
  err_t result;
  u16_t msecs;
  u8_t i;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
  12a354:	e3a01001 	mov	r1, #1
  12a358:	e51b000c 	ldr	r0, [fp, #-12]
  12a35c:	eb000709 	bl	12bf88 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
  12a360:	e3a02003 	mov	r2, #3
  12a364:	e51b100c 	ldr	r1, [fp, #-12]
  12a368:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12a36c:	eb000b35 	bl	12d048 <dhcp_create_msg>
  12a370:	e1a03000 	mov	r3, r0
  12a374:	e54b300d 	strb	r3, [fp, #-13]
  if (result == ERR_OK) {
  12a378:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12a37c:	e3530000 	cmp	r3, #0
  12a380:	1a000052 	bne	12a4d0 <dhcp_select+0x198>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  12a384:	e3a02002 	mov	r2, #2
  12a388:	e3a01039 	mov	r1, #57	; 0x39
  12a38c:	e51b000c 	ldr	r0, [fp, #-12]
  12a390:	eb000714 	bl	12bfe8 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
  12a394:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12a398:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  12a39c:	e1a01003 	mov	r1, r3
  12a3a0:	e51b000c 	ldr	r0, [fp, #-12]
  12a3a4:	eb00075e 	bl	12c124 <dhcp_option_short>

    /* MUST request the offered IP address */
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
  12a3a8:	e3a02004 	mov	r2, #4
  12a3ac:	e3a01032 	mov	r1, #50	; 0x32
  12a3b0:	e51b000c 	ldr	r0, [fp, #-12]
  12a3b4:	eb00070b 	bl	12bfe8 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
  12a3b8:	e51b300c 	ldr	r3, [fp, #-12]
  12a3bc:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a3c0:	e1a00003 	mov	r0, r3
  12a3c4:	ebffb08e 	bl	116604 <lwip_htonl>
  12a3c8:	e1a03000 	mov	r3, r0
  12a3cc:	e1a01003 	mov	r1, r3
  12a3d0:	e51b000c 	ldr	r0, [fp, #-12]
  12a3d4:	eb000783 	bl	12c1e8 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
  12a3d8:	e3a02004 	mov	r2, #4
  12a3dc:	e3a01036 	mov	r1, #54	; 0x36
  12a3e0:	e51b000c 	ldr	r0, [fp, #-12]
  12a3e4:	eb0006ff 	bl	12bfe8 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
  12a3e8:	e51b300c 	ldr	r3, [fp, #-12]
  12a3ec:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  12a3f0:	e1a00003 	mov	r0, r3
  12a3f4:	ebffb082 	bl	116604 <lwip_htonl>
  12a3f8:	e1a03000 	mov	r3, r0
  12a3fc:	e1a01003 	mov	r1, r3
  12a400:	e51b000c 	ldr	r0, [fp, #-12]
  12a404:	eb000777 	bl	12c1e8 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
  12a408:	e3a02004 	mov	r2, #4
  12a40c:	e3a01037 	mov	r1, #55	; 0x37
  12a410:	e51b000c 	ldr	r0, [fp, #-12]
  12a414:	eb0006f3 	bl	12bfe8 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12a418:	e3a03000 	mov	r3, #0
  12a41c:	e54b3005 	strb	r3, [fp, #-5]
  12a420:	ea000009 	b	12a44c <dhcp_select+0x114>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
  12a424:	e55b2005 	ldrb	r2, [fp, #-5]
  12a428:	e30d303c 	movw	r3, #53308	; 0xd03c
  12a42c:	e3403014 	movt	r3, #20
  12a430:	e7d33002 	ldrb	r3, [r3, r2]
  12a434:	e1a01003 	mov	r1, r3
  12a438:	e51b000c 	ldr	r0, [fp, #-12]
  12a43c:	eb000719 	bl	12c0a8 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12a440:	e55b3005 	ldrb	r3, [fp, #-5]
  12a444:	e2833001 	add	r3, r3, #1
  12a448:	e54b3005 	strb	r3, [fp, #-5]
  12a44c:	e55b3005 	ldrb	r3, [fp, #-5]
  12a450:	e3530003 	cmp	r3, #3
  12a454:	9afffff2 	bls	12a424 <dhcp_select+0xec>
    }

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
  12a458:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  12a45c:	e51b000c 	ldr	r0, [fp, #-12]
  12a460:	eb0007ab 	bl	12c314 <dhcp_option_hostname>
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
  12a464:	e51b000c 	ldr	r0, [fp, #-12]
  12a468:	eb000c63 	bl	12d5fc <dhcp_option_trailer>
    /* shrink the pbuf to the actual content length */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  12a46c:	e51b300c 	ldr	r3, [fp, #-12]
  12a470:	e593200c 	ldr	r2, [r3, #12]
  12a474:	e51b300c 	ldr	r3, [fp, #-12]
  12a478:	e1d331b4 	ldrh	r3, [r3, #20]
  12a47c:	e28330f0 	add	r3, r3, #240	; 0xf0
  12a480:	e6ff3073 	uxth	r3, r3
  12a484:	e1a01003 	mov	r1, r3
  12a488:	e1a00002 	mov	r0, r2
  12a48c:	ebffc13e 	bl	11a98c <pbuf_realloc>

    /* send broadcast to any DHCP server */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
  12a490:	e30e3ad8 	movw	r3, #60120	; 0xead8
  12a494:	e3403014 	movt	r3, #20
  12a498:	e5930000 	ldr	r0, [r3]
  12a49c:	e51b300c 	ldr	r3, [fp, #-12]
  12a4a0:	e593100c 	ldr	r1, [r3, #12]
  12a4a4:	e3093908 	movw	r3, #39176	; 0x9908
  12a4a8:	e3403014 	movt	r3, #20
  12a4ac:	e58d3004 	str	r3, [sp, #4]
  12a4b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12a4b4:	e58d3000 	str	r3, [sp]
  12a4b8:	e3a03043 	mov	r3, #67	; 0x43
  12a4bc:	e309290c 	movw	r2, #39180	; 0x990c
  12a4c0:	e3402014 	movt	r2, #20
  12a4c4:	ebfff791 	bl	128310 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
  12a4c8:	e51b000c 	ldr	r0, [fp, #-12]
  12a4cc:	eb000c15 	bl	12d528 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
  12a4d0:	e51b300c 	ldr	r3, [fp, #-12]
  12a4d4:	e5d3300a 	ldrb	r3, [r3, #10]
  12a4d8:	e35300ff 	cmp	r3, #255	; 0xff
  12a4dc:	0a000005 	beq	12a4f8 <dhcp_select+0x1c0>
    dhcp->tries++;
  12a4e0:	e51b300c 	ldr	r3, [fp, #-12]
  12a4e4:	e5d3300a 	ldrb	r3, [r3, #10]
  12a4e8:	e2833001 	add	r3, r3, #1
  12a4ec:	e6ef2073 	uxtb	r2, r3
  12a4f0:	e51b300c 	ldr	r3, [fp, #-12]
  12a4f4:	e5c3200a 	strb	r2, [r3, #10]
  }
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
  12a4f8:	e51b300c 	ldr	r3, [fp, #-12]
  12a4fc:	e5d3300a 	ldrb	r3, [r3, #10]
  12a500:	e3530005 	cmp	r3, #5
  12a504:	8a000006 	bhi	12a524 <dhcp_select+0x1ec>
  12a508:	e51b300c 	ldr	r3, [fp, #-12]
  12a50c:	e5d3300a 	ldrb	r3, [r3, #10]
  12a510:	e1a02003 	mov	r2, r3
  12a514:	e3a03ffa 	mov	r3, #1000	; 0x3e8
  12a518:	e1a03213 	lsl	r3, r3, r2
  12a51c:	e6ff3073 	uxth	r3, r3
  12a520:	ea000000 	b	12a528 <dhcp_select+0x1f0>
  12a524:	e30e3a60 	movw	r3, #60000	; 0xea60
  12a528:	e14b31b0 	strh	r3, [fp, #-16]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  12a52c:	e15b31b0 	ldrh	r3, [fp, #-16]
  12a530:	e2833e1f 	add	r3, r3, #496	; 0x1f0
  12a534:	e2833003 	add	r3, r3, #3
  12a538:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  12a53c:	e3412062 	movt	r2, #4194	; 0x1062
  12a540:	e0c10293 	smull	r0, r1, r3, r2
  12a544:	e1a022c1 	asr	r2, r1, #5
  12a548:	e1a03fc3 	asr	r3, r3, #31
  12a54c:	e0423003 	sub	r3, r2, r3
  12a550:	e6ff2073 	uxth	r2, r3
  12a554:	e51b300c 	ldr	r3, [fp, #-12]
  12a558:	e1c321b6 	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  12a55c:	e15b30dd 	ldrsb	r3, [fp, #-13]
}
  12a560:	e1a00003 	mov	r0, r3
  12a564:	e24bd004 	sub	sp, fp, #4
  12a568:	e8bd8800 	pop	{fp, pc}

0012a56c <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
  12a56c:	e92d4800 	push	{fp, lr}
  12a570:	e28db004 	add	fp, sp, #4
  12a574:	e24dd008 	sub	sp, sp, #8
  struct netif *netif = netif_list;
  12a578:	e30c3a24 	movw	r3, #51748	; 0xca24
  12a57c:	e3403015 	movt	r3, #21
  12a580:	e5933000 	ldr	r3, [r3]
  12a584:	e50b3008 	str	r3, [fp, #-8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  while (netif != NULL) {
  12a588:	ea00003e 	b	12a688 <dhcp_coarse_tmr+0x11c>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
  12a58c:	e51b3008 	ldr	r3, [fp, #-8]
  12a590:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a594:	e50b300c 	str	r3, [fp, #-12]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
  12a598:	e51b300c 	ldr	r3, [fp, #-12]
  12a59c:	e3530000 	cmp	r3, #0
  12a5a0:	0a000035 	beq	12a67c <dhcp_coarse_tmr+0x110>
  12a5a4:	e51b300c 	ldr	r3, [fp, #-12]
  12a5a8:	e5d33009 	ldrb	r3, [r3, #9]
  12a5ac:	e3530000 	cmp	r3, #0
  12a5b0:	0a000031 	beq	12a67c <dhcp_coarse_tmr+0x110>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
  12a5b4:	e51b300c 	ldr	r3, [fp, #-12]
  12a5b8:	e1d332b2 	ldrh	r3, [r3, #34]	; 0x22
  12a5bc:	e3530000 	cmp	r3, #0
  12a5c0:	0a000010 	beq	12a608 <dhcp_coarse_tmr+0x9c>
  12a5c4:	e51b300c 	ldr	r3, [fp, #-12]
  12a5c8:	e1d332b0 	ldrh	r3, [r3, #32]
  12a5cc:	e2833001 	add	r3, r3, #1
  12a5d0:	e6ff2073 	uxth	r2, r3
  12a5d4:	e51b300c 	ldr	r3, [fp, #-12]
  12a5d8:	e1c322b0 	strh	r2, [r3, #32]
  12a5dc:	e51b300c 	ldr	r3, [fp, #-12]
  12a5e0:	e1d322b0 	ldrh	r2, [r3, #32]
  12a5e4:	e51b300c 	ldr	r3, [fp, #-12]
  12a5e8:	e1d332b2 	ldrh	r3, [r3, #34]	; 0x22
  12a5ec:	e1520003 	cmp	r2, r3
  12a5f0:	1a000004 	bne	12a608 <dhcp_coarse_tmr+0x9c>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release(netif);
  12a5f4:	e51b0008 	ldr	r0, [fp, #-8]
  12a5f8:	eb0005bd 	bl	12bcf4 <dhcp_release>
        dhcp_discover(netif);
  12a5fc:	e51b0008 	ldr	r0, [fp, #-8]
  12a600:	eb00031f 	bl	12b284 <dhcp_discover>
  12a604:	ea00001c 	b	12a67c <dhcp_coarse_tmr+0x110>
      /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
  12a608:	e51b300c 	ldr	r3, [fp, #-12]
  12a60c:	e1d331be 	ldrh	r3, [r3, #30]
  12a610:	e3530000 	cmp	r3, #0
  12a614:	0a00000a 	beq	12a644 <dhcp_coarse_tmr+0xd8>
  12a618:	e51b300c 	ldr	r3, [fp, #-12]
  12a61c:	e1d331be 	ldrh	r3, [r3, #30]
  12a620:	e2432001 	sub	r2, r3, #1
  12a624:	e6ff1072 	uxth	r1, r2
  12a628:	e51b200c 	ldr	r2, [fp, #-12]
  12a62c:	e1c211be 	strh	r1, [r2, #30]
  12a630:	e3530001 	cmp	r3, #1
  12a634:	1a000002 	bne	12a644 <dhcp_coarse_tmr+0xd8>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
  12a638:	e51b0008 	ldr	r0, [fp, #-8]
  12a63c:	eb0000b1 	bl	12a908 <dhcp_t2_timeout>
  12a640:	ea00000d 	b	12a67c <dhcp_coarse_tmr+0x110>
      /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
  12a644:	e51b300c 	ldr	r3, [fp, #-12]
  12a648:	e1d331bc 	ldrh	r3, [r3, #28]
  12a64c:	e3530000 	cmp	r3, #0
  12a650:	0a000009 	beq	12a67c <dhcp_coarse_tmr+0x110>
  12a654:	e51b300c 	ldr	r3, [fp, #-12]
  12a658:	e1d331bc 	ldrh	r3, [r3, #28]
  12a65c:	e2432001 	sub	r2, r3, #1
  12a660:	e6ff1072 	uxth	r1, r2
  12a664:	e51b200c 	ldr	r2, [fp, #-12]
  12a668:	e1c211bc 	strh	r1, [r2, #28]
  12a66c:	e3530001 	cmp	r3, #1
  12a670:	1a000001 	bne	12a67c <dhcp_coarse_tmr+0x110>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
  12a674:	e51b0008 	ldr	r0, [fp, #-8]
  12a678:	eb000076 	bl	12a858 <dhcp_t1_timeout>
      }
    }
    /* proceed to next netif */
    netif = netif->next;
  12a67c:	e51b3008 	ldr	r3, [fp, #-8]
  12a680:	e5933000 	ldr	r3, [r3]
  12a684:	e50b3008 	str	r3, [fp, #-8]
  while (netif != NULL) {
  12a688:	e51b3008 	ldr	r3, [fp, #-8]
  12a68c:	e3530000 	cmp	r3, #0
  12a690:	1affffbd 	bne	12a58c <dhcp_coarse_tmr+0x20>
  }
}
  12a694:	e320f000 	nop	{0}
  12a698:	e24bd004 	sub	sp, fp, #4
  12a69c:	e8bd8800 	pop	{fp, pc}

0012a6a0 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
  12a6a0:	e92d4800 	push	{fp, lr}
  12a6a4:	e28db004 	add	fp, sp, #4
  12a6a8:	e24dd008 	sub	sp, sp, #8
  struct netif *netif = netif_list;
  12a6ac:	e30c3a24 	movw	r3, #51748	; 0xca24
  12a6b0:	e3403015 	movt	r3, #21
  12a6b4:	e5933000 	ldr	r3, [r3]
  12a6b8:	e50b3008 	str	r3, [fp, #-8]
  /* loop through netif's */
  while (netif != NULL) {
  12a6bc:	ea00001f 	b	12a740 <dhcp_fine_tmr+0xa0>
    struct dhcp *dhcp = netif_dhcp_data(netif);
  12a6c0:	e51b3008 	ldr	r3, [fp, #-8]
  12a6c4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a6c8:	e50b300c 	str	r3, [fp, #-12]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
  12a6cc:	e51b300c 	ldr	r3, [fp, #-12]
  12a6d0:	e3530000 	cmp	r3, #0
  12a6d4:	0a000016 	beq	12a734 <dhcp_fine_tmr+0x94>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
  12a6d8:	e51b300c 	ldr	r3, [fp, #-12]
  12a6dc:	e1d331b6 	ldrh	r3, [r3, #22]
  12a6e0:	e3530001 	cmp	r3, #1
  12a6e4:	9a000006 	bls	12a704 <dhcp_fine_tmr+0x64>
        dhcp->request_timeout--;
  12a6e8:	e51b300c 	ldr	r3, [fp, #-12]
  12a6ec:	e1d331b6 	ldrh	r3, [r3, #22]
  12a6f0:	e2433001 	sub	r3, r3, #1
  12a6f4:	e6ff2073 	uxth	r2, r3
  12a6f8:	e51b300c 	ldr	r3, [fp, #-12]
  12a6fc:	e1c321b6 	strh	r2, [r3, #22]
  12a700:	ea00000b 	b	12a734 <dhcp_fine_tmr+0x94>
      }
      else if (dhcp->request_timeout == 1) {
  12a704:	e51b300c 	ldr	r3, [fp, #-12]
  12a708:	e1d331b6 	ldrh	r3, [r3, #22]
  12a70c:	e3530001 	cmp	r3, #1
  12a710:	1a000007 	bne	12a734 <dhcp_fine_tmr+0x94>
        dhcp->request_timeout--;
  12a714:	e51b300c 	ldr	r3, [fp, #-12]
  12a718:	e1d331b6 	ldrh	r3, [r3, #22]
  12a71c:	e2433001 	sub	r3, r3, #1
  12a720:	e6ff2073 	uxth	r2, r3
  12a724:	e51b300c 	ldr	r3, [fp, #-12]
  12a728:	e1c321b6 	strh	r2, [r3, #22]
        /* { netif->dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
  12a72c:	e51b0008 	ldr	r0, [fp, #-8]
  12a730:	eb000008 	bl	12a758 <dhcp_timeout>
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
  12a734:	e51b3008 	ldr	r3, [fp, #-8]
  12a738:	e5933000 	ldr	r3, [r3]
  12a73c:	e50b3008 	str	r3, [fp, #-8]
  while (netif != NULL) {
  12a740:	e51b3008 	ldr	r3, [fp, #-8]
  12a744:	e3530000 	cmp	r3, #0
  12a748:	1affffdc 	bne	12a6c0 <dhcp_fine_tmr+0x20>
  }
}
  12a74c:	e320f000 	nop	{0}
  12a750:	e24bd004 	sub	sp, fp, #4
  12a754:	e8bd8800 	pop	{fp, pc}

0012a758 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
  12a758:	e92d4800 	push	{fp, lr}
  12a75c:	e28db004 	add	fp, sp, #4
  12a760:	e24dd010 	sub	sp, sp, #16
  12a764:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12a768:	e51b3010 	ldr	r3, [fp, #-16]
  12a76c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a770:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
  12a774:	e51b3008 	ldr	r3, [fp, #-8]
  12a778:	e5d33009 	ldrb	r3, [r3, #9]
  12a77c:	e353000c 	cmp	r3, #12
  12a780:	0a000003 	beq	12a794 <dhcp_timeout+0x3c>
  12a784:	e51b3008 	ldr	r3, [fp, #-8]
  12a788:	e5d33009 	ldrb	r3, [r3, #9]
  12a78c:	e3530006 	cmp	r3, #6
  12a790:	1a000002 	bne	12a7a0 <dhcp_timeout+0x48>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
  12a794:	e51b0010 	ldr	r0, [fp, #-16]
  12a798:	eb0002b9 	bl	12b284 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
  12a79c:	ea00002a 	b	12a84c <dhcp_timeout+0xf4>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
  12a7a0:	e51b3008 	ldr	r3, [fp, #-8]
  12a7a4:	e5d33009 	ldrb	r3, [r3, #9]
  12a7a8:	e3530001 	cmp	r3, #1
  12a7ac:	1a00000b 	bne	12a7e0 <dhcp_timeout+0x88>
    if (dhcp->tries <= 5) {
  12a7b0:	e51b3008 	ldr	r3, [fp, #-8]
  12a7b4:	e5d3300a 	ldrb	r3, [r3, #10]
  12a7b8:	e3530005 	cmp	r3, #5
  12a7bc:	8a000002 	bhi	12a7cc <dhcp_timeout+0x74>
      dhcp_select(netif);
  12a7c0:	e51b0010 	ldr	r0, [fp, #-16]
  12a7c4:	ebfffedb 	bl	12a338 <dhcp_select>
}
  12a7c8:	ea00001f 	b	12a84c <dhcp_timeout+0xf4>
      dhcp_release(netif);
  12a7cc:	e51b0010 	ldr	r0, [fp, #-16]
  12a7d0:	eb000547 	bl	12bcf4 <dhcp_release>
      dhcp_discover(netif);
  12a7d4:	e51b0010 	ldr	r0, [fp, #-16]
  12a7d8:	eb0002a9 	bl	12b284 <dhcp_discover>
}
  12a7dc:	ea00001a 	b	12a84c <dhcp_timeout+0xf4>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
  12a7e0:	e51b3008 	ldr	r3, [fp, #-8]
  12a7e4:	e5d33009 	ldrb	r3, [r3, #9]
  12a7e8:	e3530008 	cmp	r3, #8
  12a7ec:	1a000009 	bne	12a818 <dhcp_timeout+0xc0>
    if (dhcp->tries <= 1) {
  12a7f0:	e51b3008 	ldr	r3, [fp, #-8]
  12a7f4:	e5d3300a 	ldrb	r3, [r3, #10]
  12a7f8:	e3530001 	cmp	r3, #1
  12a7fc:	8a000002 	bhi	12a80c <dhcp_timeout+0xb4>
      dhcp_check(netif);
  12a800:	e51b0010 	ldr	r0, [fp, #-16]
  12a804:	ebfffe80 	bl	12a20c <dhcp_check>
}
  12a808:	ea00000f 	b	12a84c <dhcp_timeout+0xf4>
      dhcp_bind(netif);
  12a80c:	e51b0010 	ldr	r0, [fp, #-16]
  12a810:	eb000312 	bl	12b460 <dhcp_bind>
}
  12a814:	ea00000c 	b	12a84c <dhcp_timeout+0xf4>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
  12a818:	e51b3008 	ldr	r3, [fp, #-8]
  12a81c:	e5d33009 	ldrb	r3, [r3, #9]
  12a820:	e3530003 	cmp	r3, #3
  12a824:	1a000008 	bne	12a84c <dhcp_timeout+0xf4>
    if (dhcp->tries < REBOOT_TRIES) {
  12a828:	e51b3008 	ldr	r3, [fp, #-8]
  12a82c:	e5d3300a 	ldrb	r3, [r3, #10]
  12a830:	e3530001 	cmp	r3, #1
  12a834:	8a000002 	bhi	12a844 <dhcp_timeout+0xec>
      dhcp_reboot(netif);
  12a838:	e51b0010 	ldr	r0, [fp, #-16]
  12a83c:	eb0004af 	bl	12bb00 <dhcp_reboot>
}
  12a840:	ea000001 	b	12a84c <dhcp_timeout+0xf4>
      dhcp_discover(netif);
  12a844:	e51b0010 	ldr	r0, [fp, #-16]
  12a848:	eb00028d 	bl	12b284 <dhcp_discover>
}
  12a84c:	e320f000 	nop	{0}
  12a850:	e24bd004 	sub	sp, fp, #4
  12a854:	e8bd8800 	pop	{fp, pc}

0012a858 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
  12a858:	e92d4800 	push	{fp, lr}
  12a85c:	e28db004 	add	fp, sp, #4
  12a860:	e24dd010 	sub	sp, sp, #16
  12a864:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12a868:	e51b3010 	ldr	r3, [fp, #-16]
  12a86c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a870:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
  12a874:	e51b3008 	ldr	r3, [fp, #-8]
  12a878:	e5d33009 	ldrb	r3, [r3, #9]
  12a87c:	e3530001 	cmp	r3, #1
  12a880:	0a000007 	beq	12a8a4 <dhcp_t1_timeout+0x4c>
  12a884:	e51b3008 	ldr	r3, [fp, #-8]
  12a888:	e5d33009 	ldrb	r3, [r3, #9]
  12a88c:	e353000a 	cmp	r3, #10
  12a890:	0a000003 	beq	12a8a4 <dhcp_t1_timeout+0x4c>
      (dhcp->state == DHCP_STATE_RENEWING)) {
  12a894:	e51b3008 	ldr	r3, [fp, #-8]
  12a898:	e5d33009 	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
  12a89c:	e3530005 	cmp	r3, #5
  12a8a0:	1a000015 	bne	12a8fc <dhcp_t1_timeout+0xa4>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
  12a8a4:	e51b0010 	ldr	r0, [fp, #-16]
  12a8a8:	eb0003a8 	bl	12b750 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
  12a8ac:	e51b3008 	ldr	r3, [fp, #-8]
  12a8b0:	e1d331ba 	ldrh	r3, [r3, #26]
  12a8b4:	e1a02003 	mov	r2, r3
  12a8b8:	e51b3008 	ldr	r3, [fp, #-8]
  12a8bc:	e1d332b0 	ldrh	r3, [r3, #32]
  12a8c0:	e0423003 	sub	r3, r2, r3
  12a8c4:	e3530001 	cmp	r3, #1
  12a8c8:	da00000b 	ble	12a8fc <dhcp_t1_timeout+0xa4>
    {
       dhcp->t1_renew_time = ((dhcp->t2_timeout - dhcp->lease_used) / 2);
  12a8cc:	e51b3008 	ldr	r3, [fp, #-8]
  12a8d0:	e1d331ba 	ldrh	r3, [r3, #26]
  12a8d4:	e1a02003 	mov	r2, r3
  12a8d8:	e51b3008 	ldr	r3, [fp, #-8]
  12a8dc:	e1d332b0 	ldrh	r3, [r3, #32]
  12a8e0:	e0423003 	sub	r3, r2, r3
  12a8e4:	e1a02fa3 	lsr	r2, r3, #31
  12a8e8:	e0823003 	add	r3, r2, r3
  12a8ec:	e1a030c3 	asr	r3, r3, #1
  12a8f0:	e6ff2073 	uxth	r2, r3
  12a8f4:	e51b3008 	ldr	r3, [fp, #-8]
  12a8f8:	e1c321bc 	strh	r2, [r3, #28]
    }
  }
}
  12a8fc:	e320f000 	nop	{0}
  12a900:	e24bd004 	sub	sp, fp, #4
  12a904:	e8bd8800 	pop	{fp, pc}

0012a908 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
  12a908:	e92d4800 	push	{fp, lr}
  12a90c:	e28db004 	add	fp, sp, #4
  12a910:	e24dd010 	sub	sp, sp, #16
  12a914:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12a918:	e51b3010 	ldr	r3, [fp, #-16]
  12a91c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a920:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
  12a924:	e51b3008 	ldr	r3, [fp, #-8]
  12a928:	e5d33009 	ldrb	r3, [r3, #9]
  12a92c:	e3530001 	cmp	r3, #1
  12a930:	0a00000b 	beq	12a964 <dhcp_t2_timeout+0x5c>
  12a934:	e51b3008 	ldr	r3, [fp, #-8]
  12a938:	e5d33009 	ldrb	r3, [r3, #9]
  12a93c:	e353000a 	cmp	r3, #10
  12a940:	0a000007 	beq	12a964 <dhcp_t2_timeout+0x5c>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
  12a944:	e51b3008 	ldr	r3, [fp, #-8]
  12a948:	e5d33009 	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
  12a94c:	e3530005 	cmp	r3, #5
  12a950:	0a000003 	beq	12a964 <dhcp_t2_timeout+0x5c>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
  12a954:	e51b3008 	ldr	r3, [fp, #-8]
  12a958:	e5d33009 	ldrb	r3, [r3, #9]
  12a95c:	e3530004 	cmp	r3, #4
  12a960:	1a000015 	bne	12a9bc <dhcp_t2_timeout+0xb4>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
  12a964:	e51b0010 	ldr	r0, [fp, #-16]
  12a968:	eb0003ee 	bl	12b928 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
  12a96c:	e51b3008 	ldr	r3, [fp, #-8]
  12a970:	e1d332b2 	ldrh	r3, [r3, #34]	; 0x22
  12a974:	e1a02003 	mov	r2, r3
  12a978:	e51b3008 	ldr	r3, [fp, #-8]
  12a97c:	e1d332b0 	ldrh	r3, [r3, #32]
  12a980:	e0423003 	sub	r3, r2, r3
  12a984:	e3530001 	cmp	r3, #1
  12a988:	da00000b 	ble	12a9bc <dhcp_t2_timeout+0xb4>
    {
       dhcp->t2_rebind_time = ((dhcp->t0_timeout - dhcp->lease_used) / 2);
  12a98c:	e51b3008 	ldr	r3, [fp, #-8]
  12a990:	e1d332b2 	ldrh	r3, [r3, #34]	; 0x22
  12a994:	e1a02003 	mov	r2, r3
  12a998:	e51b3008 	ldr	r3, [fp, #-8]
  12a99c:	e1d332b0 	ldrh	r3, [r3, #32]
  12a9a0:	e0423003 	sub	r3, r2, r3
  12a9a4:	e1a02fa3 	lsr	r2, r3, #31
  12a9a8:	e0823003 	add	r3, r2, r3
  12a9ac:	e1a030c3 	asr	r3, r3, #1
  12a9b0:	e6ff2073 	uxth	r2, r3
  12a9b4:	e51b3008 	ldr	r3, [fp, #-8]
  12a9b8:	e1c321be 	strh	r2, [r3, #30]
    }
  }
}
  12a9bc:	e320f000 	nop	{0}
  12a9c0:	e24bd004 	sub	sp, fp, #4
  12a9c4:	e8bd8800 	pop	{fp, pc}

0012a9c8 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif)
{
  12a9c8:	e92d4800 	push	{fp, lr}
  12a9cc:	e28db004 	add	fp, sp, #4
  12a9d0:	e24dd018 	sub	sp, sp, #24
  12a9d4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12a9d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12a9dc:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a9e0:	e50b300c 	str	r3, [fp, #-12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
  12a9e4:	e51b300c 	ldr	r3, [fp, #-12]
  12a9e8:	e3a02000 	mov	r2, #0
  12a9ec:	e583202c 	str	r2, [r3, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
  12a9f0:	e51b300c 	ldr	r3, [fp, #-12]
  12a9f4:	e3a02000 	mov	r2, #0
  12a9f8:	e5832030 	str	r2, [r3, #48]	; 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
  12a9fc:	e30c3c3c 	movw	r3, #52284	; 0xcc3c
  12aa00:	e3403015 	movt	r3, #21
  12aa04:	e5d33003 	ldrb	r3, [r3, #3]
  12aa08:	e3530000 	cmp	r3, #0
  12aa0c:	0a000004 	beq	12aa24 <dhcp_handle_ack+0x5c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
  12aa10:	e30c3c48 	movw	r3, #52296	; 0xcc48
  12aa14:	e3403015 	movt	r3, #21
  12aa18:	e593200c 	ldr	r2, [r3, #12]
  12aa1c:	e51b300c 	ldr	r3, [fp, #-12]
  12aa20:	e5832034 	str	r2, [r3, #52]	; 0x34
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
  12aa24:	e30c3c3c 	movw	r3, #52284	; 0xcc3c
  12aa28:	e3403015 	movt	r3, #21
  12aa2c:	e5d33004 	ldrb	r3, [r3, #4]
  12aa30:	e3530000 	cmp	r3, #0
  12aa34:	0a000005 	beq	12aa50 <dhcp_handle_ack+0x88>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
  12aa38:	e30c3c48 	movw	r3, #52296	; 0xcc48
  12aa3c:	e3403015 	movt	r3, #21
  12aa40:	e5932010 	ldr	r2, [r3, #16]
  12aa44:	e51b300c 	ldr	r3, [fp, #-12]
  12aa48:	e5832038 	str	r2, [r3, #56]	; 0x38
  12aa4c:	ea000004 	b	12aa64 <dhcp_handle_ack+0x9c>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
  12aa50:	e51b300c 	ldr	r3, [fp, #-12]
  12aa54:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  12aa58:	e1a020a3 	lsr	r2, r3, #1
  12aa5c:	e51b300c 	ldr	r3, [fp, #-12]
  12aa60:	e5832038 	str	r2, [r3, #56]	; 0x38
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
  12aa64:	e30c3c3c 	movw	r3, #52284	; 0xcc3c
  12aa68:	e3403015 	movt	r3, #21
  12aa6c:	e5d33005 	ldrb	r3, [r3, #5]
  12aa70:	e3530000 	cmp	r3, #0
  12aa74:	0a000005 	beq	12aa90 <dhcp_handle_ack+0xc8>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
  12aa78:	e30c3c48 	movw	r3, #52296	; 0xcc48
  12aa7c:	e3403015 	movt	r3, #21
  12aa80:	e5932014 	ldr	r2, [r3, #20]
  12aa84:	e51b300c 	ldr	r3, [fp, #-12]
  12aa88:	e583203c 	str	r2, [r3, #60]	; 0x3c
  12aa8c:	ea000007 	b	12aab0 <dhcp_handle_ack+0xe8>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
  12aa90:	e51b300c 	ldr	r3, [fp, #-12]
  12aa94:	e5932034 	ldr	r2, [r3, #52]	; 0x34
  12aa98:	e1a03002 	mov	r3, r2
  12aa9c:	e1a03183 	lsl	r3, r3, #3
  12aaa0:	e0433002 	sub	r3, r3, r2
  12aaa4:	e1a021a3 	lsr	r2, r3, #3
  12aaa8:	e51b300c 	ldr	r3, [fp, #-12]
  12aaac:	e583203c 	str	r2, [r3, #60]	; 0x3c
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
  12aab0:	e51b300c 	ldr	r3, [fp, #-12]
  12aab4:	e5933004 	ldr	r3, [r3, #4]
  12aab8:	e5932010 	ldr	r2, [r3, #16]
  12aabc:	e51b300c 	ldr	r3, [fp, #-12]
  12aac0:	e5832028 	str	r2, [r3, #40]	; 0x28
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, dhcp->msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
  12aac4:	e30c3c3c 	movw	r3, #52284	; 0xcc3c
  12aac8:	e3403015 	movt	r3, #21
  12aacc:	e5d33006 	ldrb	r3, [r3, #6]
  12aad0:	e3530000 	cmp	r3, #0
  12aad4:	0a00000b 	beq	12ab08 <dhcp_handle_ack+0x140>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
  12aad8:	e30c3c48 	movw	r3, #52296	; 0xcc48
  12aadc:	e3403015 	movt	r3, #21
  12aae0:	e5933018 	ldr	r3, [r3, #24]
  12aae4:	e1a00003 	mov	r0, r3
  12aae8:	ebffaec5 	bl	116604 <lwip_htonl>
  12aaec:	e1a02000 	mov	r2, r0
  12aaf0:	e51b300c 	ldr	r3, [fp, #-12]
  12aaf4:	e583202c 	str	r2, [r3, #44]	; 0x2c
    dhcp->subnet_mask_given = 1;
  12aaf8:	e51b300c 	ldr	r3, [fp, #-12]
  12aafc:	e3a02001 	mov	r2, #1
  12ab00:	e5c3200b 	strb	r2, [r3, #11]
  12ab04:	ea000002 	b	12ab14 <dhcp_handle_ack+0x14c>
  } else {
    dhcp->subnet_mask_given = 0;
  12ab08:	e51b300c 	ldr	r3, [fp, #-12]
  12ab0c:	e3a02000 	mov	r2, #0
  12ab10:	e5c3200b 	strb	r2, [r3, #11]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
  12ab14:	e30c3c3c 	movw	r3, #52284	; 0xcc3c
  12ab18:	e3403015 	movt	r3, #21
  12ab1c:	e5d33007 	ldrb	r3, [r3, #7]
  12ab20:	e3530000 	cmp	r3, #0
  12ab24:	0a000007 	beq	12ab48 <dhcp_handle_ack+0x180>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
  12ab28:	e30c3c48 	movw	r3, #52296	; 0xcc48
  12ab2c:	e3403015 	movt	r3, #21
  12ab30:	e593301c 	ldr	r3, [r3, #28]
  12ab34:	e1a00003 	mov	r0, r3
  12ab38:	ebffaeb1 	bl	116604 <lwip_htonl>
  12ab3c:	e1a02000 	mov	r2, r0
  12ab40:	e51b300c 	ldr	r3, [fp, #-12]
  12ab44:	e5832030 	str	r2, [r3, #48]	; 0x30
  dhcp_set_ntp_servers(n, ntp_server_addrs);
#endif /* LWIP_DHCP_GET_NTP_SRV */

#if LWIP_DHCP_PROVIDE_DNS_SERVERS
  /* DNS servers */
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
  12ab48:	e3a03000 	mov	r3, #0
  12ab4c:	e54b3005 	strb	r3, [fp, #-5]
  12ab50:	ea000010 	b	12ab98 <dhcp_handle_ack+0x1d0>
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32(&dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
  12ab54:	e55b3005 	ldrb	r3, [fp, #-5]
  12ab58:	e2832008 	add	r2, r3, #8
  12ab5c:	e30c3c48 	movw	r3, #52296	; 0xcc48
  12ab60:	e3403015 	movt	r3, #21
  12ab64:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  12ab68:	e1a00003 	mov	r0, r3
  12ab6c:	ebffaea4 	bl	116604 <lwip_htonl>
  12ab70:	e1a03000 	mov	r3, r0
  12ab74:	e50b3010 	str	r3, [fp, #-16]
    dns_setserver(n, &dns_addr);
  12ab78:	e24b2010 	sub	r2, fp, #16
  12ab7c:	e55b3005 	ldrb	r3, [fp, #-5]
  12ab80:	e1a01002 	mov	r1, r2
  12ab84:	e1a00003 	mov	r0, r3
  12ab88:	ebffaf97 	bl	1169ec <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
  12ab8c:	e55b3005 	ldrb	r3, [fp, #-5]
  12ab90:	e2833001 	add	r3, r3, #1
  12ab94:	e54b3005 	strb	r3, [fp, #-5]
  12ab98:	e55b3005 	ldrb	r3, [fp, #-5]
  12ab9c:	e3530001 	cmp	r3, #1
  12aba0:	8a000006 	bhi	12abc0 <dhcp_handle_ack+0x1f8>
  12aba4:	e55b3005 	ldrb	r3, [fp, #-5]
  12aba8:	e2832008 	add	r2, r3, #8
  12abac:	e30c3c3c 	movw	r3, #52284	; 0xcc3c
  12abb0:	e3403015 	movt	r3, #21
  12abb4:	e7d33002 	ldrb	r3, [r3, r2]
  12abb8:	e3530000 	cmp	r3, #0
  12abbc:	1affffe4 	bne	12ab54 <dhcp_handle_ack+0x18c>
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
  12abc0:	e320f000 	nop	{0}
  12abc4:	e24bd004 	sub	sp, fp, #4
  12abc8:	e8bd8800 	pop	{fp, pc}

0012abcc <dhcp_set_struct>:
 * @param netif the netif for which to set the struct dhcp
 * @param dhcp (uninitialised) dhcp struct allocated by the application
 */
void
dhcp_set_struct(struct netif *netif, struct dhcp *dhcp)
{
  12abcc:	e92d4800 	push	{fp, lr}
  12abd0:	e28db004 	add	fp, sp, #4
  12abd4:	e24dd008 	sub	sp, sp, #8
  12abd8:	e50b0008 	str	r0, [fp, #-8]
  12abdc:	e50b100c 	str	r1, [fp, #-12]
  LWIP_ASSERT("netif != NULL", netif != NULL);
  12abe0:	e51b3008 	ldr	r3, [fp, #-8]
  12abe4:	e3530000 	cmp	r3, #0
  12abe8:	1a000006 	bne	12ac08 <dhcp_set_struct+0x3c>
  12abec:	e3080dc8 	movw	r0, #36296	; 0x8dc8
  12abf0:	e3400014 	movt	r0, #20
  12abf4:	ebff6146 	bl	103114 <rt_kprintf>
  12abf8:	e3a01faa 	mov	r1, #680	; 0x2a8
  12abfc:	e3080d70 	movw	r0, #36208	; 0x8d70
  12ac00:	e3400014 	movt	r0, #20
  12ac04:	ebff8139 	bl	10b0f0 <sys_arch_assert>
  LWIP_ASSERT("dhcp != NULL", dhcp != NULL);
  12ac08:	e51b300c 	ldr	r3, [fp, #-12]
  12ac0c:	e3530000 	cmp	r3, #0
  12ac10:	1a000006 	bne	12ac30 <dhcp_set_struct+0x64>
  12ac14:	e3080dd8 	movw	r0, #36312	; 0x8dd8
  12ac18:	e3400014 	movt	r0, #20
  12ac1c:	ebff613c 	bl	103114 <rt_kprintf>
  12ac20:	e30012a9 	movw	r1, #681	; 0x2a9
  12ac24:	e3080d70 	movw	r0, #36208	; 0x8d70
  12ac28:	e3400014 	movt	r0, #20
  12ac2c:	ebff812f 	bl	10b0f0 <sys_arch_assert>
  LWIP_ASSERT("netif already has a struct dhcp set", netif_dhcp_data(netif) == NULL);
  12ac30:	e51b3008 	ldr	r3, [fp, #-8]
  12ac34:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12ac38:	e3530000 	cmp	r3, #0
  12ac3c:	0a000006 	beq	12ac5c <dhcp_set_struct+0x90>
  12ac40:	e3080de8 	movw	r0, #36328	; 0x8de8
  12ac44:	e3400014 	movt	r0, #20
  12ac48:	ebff6131 	bl	103114 <rt_kprintf>
  12ac4c:	e30012aa 	movw	r1, #682	; 0x2aa
  12ac50:	e3080d70 	movw	r0, #36208	; 0x8d70
  12ac54:	e3400014 	movt	r0, #20
  12ac58:	ebff8124 	bl	10b0f0 <sys_arch_assert>

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
  12ac5c:	e3a02040 	mov	r2, #64	; 0x40
  12ac60:	e3a01000 	mov	r1, #0
  12ac64:	e51b000c 	ldr	r0, [fp, #-12]
  12ac68:	eb005981 	bl	141274 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */
  netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
  12ac6c:	e51b3008 	ldr	r3, [fp, #-8]
  12ac70:	e51b200c 	ldr	r2, [fp, #-12]
  12ac74:	e5832028 	str	r2, [r3, #40]	; 0x28
}
  12ac78:	e320f000 	nop	{0}
  12ac7c:	e24bd004 	sub	sp, fp, #4
  12ac80:	e8bd8800 	pop	{fp, pc}

0012ac84 <dhcp_cleanup>:
 *            struct dhcp since the memory is passed back to the heap.
 *
 * @param netif the netif from which to remove the struct dhcp
 */
void dhcp_cleanup(struct netif *netif)
{
  12ac84:	e92d4800 	push	{fp, lr}
  12ac88:	e28db004 	add	fp, sp, #4
  12ac8c:	e24dd008 	sub	sp, sp, #8
  12ac90:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ASSERT("netif != NULL", netif != NULL);
  12ac94:	e51b3008 	ldr	r3, [fp, #-8]
  12ac98:	e3530000 	cmp	r3, #0
  12ac9c:	1a000006 	bne	12acbc <dhcp_cleanup+0x38>
  12aca0:	e3080dc8 	movw	r0, #36296	; 0x8dc8
  12aca4:	e3400014 	movt	r0, #20
  12aca8:	ebff6119 	bl	103114 <rt_kprintf>
  12acac:	e30012bd 	movw	r1, #701	; 0x2bd
  12acb0:	e3080d70 	movw	r0, #36208	; 0x8d70
  12acb4:	e3400014 	movt	r0, #20
  12acb8:	ebff810c 	bl	10b0f0 <sys_arch_assert>

  if (netif_dhcp_data(netif) != NULL) {
  12acbc:	e51b3008 	ldr	r3, [fp, #-8]
  12acc0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12acc4:	e3530000 	cmp	r3, #0
  12acc8:	0a000006 	beq	12ace8 <dhcp_cleanup+0x64>
    mem_free(netif_dhcp_data(netif));
  12accc:	e51b3008 	ldr	r3, [fp, #-8]
  12acd0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12acd4:	e1a00003 	mov	r0, r3
  12acd8:	ebff8151 	bl	10b224 <mem_free>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, NULL);
  12acdc:	e51b3008 	ldr	r3, [fp, #-8]
  12ace0:	e3a02000 	mov	r2, #0
  12ace4:	e5832028 	str	r2, [r3, #40]	; 0x28
  }
}
  12ace8:	e320f000 	nop	{0}
  12acec:	e24bd004 	sub	sp, fp, #4
  12acf0:	e8bd8800 	pop	{fp, pc}

0012acf4 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
  12acf4:	e92d4800 	push	{fp, lr}
  12acf8:	e28db004 	add	fp, sp, #4
  12acfc:	e24dd010 	sub	sp, sp, #16
  12ad00:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
  12ad04:	e51b3010 	ldr	r3, [fp, #-16]
  12ad08:	e3530000 	cmp	r3, #0
  12ad0c:	1a000008 	bne	12ad34 <dhcp_start+0x40>
  12ad10:	e3080dc8 	movw	r0, #36296	; 0x8dc8
  12ad14:	e3400014 	movt	r0, #20
  12ad18:	ebff60fd 	bl	103114 <rt_kprintf>
  12ad1c:	e3a01fb6 	mov	r1, #728	; 0x2d8
  12ad20:	e3080d70 	movw	r0, #36208	; 0x8d70
  12ad24:	e3400014 	movt	r0, #20
  12ad28:	ebff80f0 	bl	10b0f0 <sys_arch_assert>
  12ad2c:	e3e0300f 	mvn	r3, #15
  12ad30:	ea000059 	b	12ae9c <dhcp_start+0x1a8>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
  12ad34:	e51b3010 	ldr	r3, [fp, #-16]
  12ad38:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  12ad3c:	e2033001 	and	r3, r3, #1
  12ad40:	e3530000 	cmp	r3, #0
  12ad44:	1a000008 	bne	12ad6c <dhcp_start+0x78>
  12ad48:	e3080e0c 	movw	r0, #36364	; 0x8e0c
  12ad4c:	e3400014 	movt	r0, #20
  12ad50:	ebff60ef 	bl	103114 <rt_kprintf>
  12ad54:	e30012d9 	movw	r1, #729	; 0x2d9
  12ad58:	e3080d70 	movw	r0, #36208	; 0x8d70
  12ad5c:	e3400014 	movt	r0, #20
  12ad60:	ebff80e2 	bl	10b0f0 <sys_arch_assert>
  12ad64:	e3e0300f 	mvn	r3, #15
  12ad68:	ea00004b 	b	12ae9c <dhcp_start+0x1a8>
  dhcp = netif_dhcp_data(netif);
  12ad6c:	e51b3010 	ldr	r3, [fp, #-16]
  12ad70:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12ad74:	e50b3008 	str	r3, [fp, #-8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
  12ad78:	e51b3010 	ldr	r3, [fp, #-16]
  12ad7c:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  12ad80:	e3530d09 	cmp	r3, #576	; 0x240
  12ad84:	2a000001 	bcs	12ad90 <dhcp_start+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
  12ad88:	e3e03000 	mvn	r3, #0
  12ad8c:	ea000042 	b	12ae9c <dhcp_start+0x1a8>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
  12ad90:	e51b3008 	ldr	r3, [fp, #-8]
  12ad94:	e3530000 	cmp	r3, #0
  12ad98:	1a00000b 	bne	12adcc <dhcp_start+0xd8>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
  12ad9c:	e3a00040 	mov	r0, #64	; 0x40
  12ada0:	ebff8113 	bl	10b1f4 <mem_malloc>
  12ada4:	e50b0008 	str	r0, [fp, #-8]
    if (dhcp == NULL) {
  12ada8:	e51b3008 	ldr	r3, [fp, #-8]
  12adac:	e3530000 	cmp	r3, #0
  12adb0:	1a000001 	bne	12adbc <dhcp_start+0xc8>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
  12adb4:	e3e03000 	mvn	r3, #0
  12adb8:	ea000037 	b	12ae9c <dhcp_start+0x1a8>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
  12adbc:	e51b3010 	ldr	r3, [fp, #-16]
  12adc0:	e51b2008 	ldr	r2, [fp, #-8]
  12adc4:	e5832028 	str	r2, [r3, #40]	; 0x28
  12adc8:	ea00001a 	b	12ae38 <dhcp_start+0x144>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
  /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));
    LWIP_ASSERT("pbuf p_out wasn't freed", dhcp->p_out == NULL);
  12adcc:	e51b3008 	ldr	r3, [fp, #-8]
  12add0:	e593300c 	ldr	r3, [r3, #12]
  12add4:	e3530000 	cmp	r3, #0
  12add8:	0a000006 	beq	12adf8 <dhcp_start+0x104>
  12addc:	e3080e30 	movw	r0, #36400	; 0x8e30
  12ade0:	e3400014 	movt	r0, #20
  12ade4:	ebff60ca 	bl	103114 <rt_kprintf>
  12ade8:	e30012f2 	movw	r1, #754	; 0x2f2
  12adec:	e3080d70 	movw	r0, #36208	; 0x8d70
  12adf0:	e3400014 	movt	r0, #20
  12adf4:	ebff80bd 	bl	10b0f0 <sys_arch_assert>
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL );
  12adf8:	e51b3008 	ldr	r3, [fp, #-8]
  12adfc:	e5933004 	ldr	r3, [r3, #4]
  12ae00:	e3530000 	cmp	r3, #0
  12ae04:	0a000006 	beq	12ae24 <dhcp_start+0x130>
  12ae08:	e3080e48 	movw	r0, #36424	; 0x8e48
  12ae0c:	e3400014 	movt	r0, #20
  12ae10:	ebff60bf 	bl	103114 <rt_kprintf>
  12ae14:	e30012f3 	movw	r1, #755	; 0x2f3
  12ae18:	e3080d70 	movw	r0, #36208	; 0x8d70
  12ae1c:	e3400014 	movt	r0, #20
  12ae20:	ebff80b2 	bl	10b0f0 <sys_arch_assert>

    if (dhcp->pcb_allocated != 0) {
  12ae24:	e51b3008 	ldr	r3, [fp, #-8]
  12ae28:	e5d33008 	ldrb	r3, [r3, #8]
  12ae2c:	e3530000 	cmp	r3, #0
  12ae30:	0a000000 	beq	12ae38 <dhcp_start+0x144>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
  12ae34:	ebfffcb7 	bl	12a118 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
  12ae38:	e3a02040 	mov	r2, #64	; 0x40
  12ae3c:	e3a01000 	mov	r1, #0
  12ae40:	e51b0008 	ldr	r0, [fp, #-8]
  12ae44:	eb00590a 	bl	141274 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
  12ae48:	ebfffc66 	bl	129fe8 <dhcp_inc_pcb_refcount>
  12ae4c:	e1a03000 	mov	r3, r0
  12ae50:	e3530000 	cmp	r3, #0
  12ae54:	0a000001 	beq	12ae60 <dhcp_start+0x16c>
    return ERR_MEM;
  12ae58:	e3e03000 	mvn	r3, #0
  12ae5c:	ea00000e 	b	12ae9c <dhcp_start+0x1a8>
  }
  dhcp->pcb_allocated = 1;
  12ae60:	e51b3008 	ldr	r3, [fp, #-8]
  12ae64:	e3a02001 	mov	r2, #1
  12ae68:	e5c32008 	strb	r2, [r3, #8]
  }
#endif /* LWIP_DHCP_CHECK_LINK_UP */


  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
  12ae6c:	e51b0010 	ldr	r0, [fp, #-16]
  12ae70:	eb000103 	bl	12b284 <dhcp_discover>
  12ae74:	e1a03000 	mov	r3, r0
  12ae78:	e54b3009 	strb	r3, [fp, #-9]
  if (result != ERR_OK) {
  12ae7c:	e15b30d9 	ldrsb	r3, [fp, #-9]
  12ae80:	e3530000 	cmp	r3, #0
  12ae84:	0a000003 	beq	12ae98 <dhcp_start+0x1a4>
    /* free resources allocated above */
    dhcp_stop(netif);
  12ae88:	e51b0010 	ldr	r0, [fp, #-16]
  12ae8c:	eb000410 	bl	12bed4 <dhcp_stop>
    return ERR_MEM;
  12ae90:	e3e03000 	mvn	r3, #0
  12ae94:	ea000000 	b	12ae9c <dhcp_start+0x1a8>
  }
  return result;
  12ae98:	e15b30d9 	ldrsb	r3, [fp, #-9]
}
  12ae9c:	e1a00003 	mov	r0, r3
  12aea0:	e24bd004 	sub	sp, fp, #4
  12aea4:	e8bd8800 	pop	{fp, pc}

0012aea8 <dhcp_inform>:
 *
 * @param netif The lwIP network interface
 */
void
dhcp_inform(struct netif *netif)
{
  12aea8:	e92d4800 	push	{fp, lr}
  12aeac:	e28db004 	add	fp, sp, #4
  12aeb0:	e24dd058 	sub	sp, sp, #88	; 0x58
  12aeb4:	e50b0050 	str	r0, [fp, #-80]	; 0xffffffb0
  struct dhcp dhcp;
  err_t result = ERR_OK;
  12aeb8:	e3a03000 	mov	r3, #0
  12aebc:	e54b3005 	strb	r3, [fp, #-5]

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
  12aec0:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
  12aec4:	e3530000 	cmp	r3, #0
  12aec8:	1a000007 	bne	12aeec <dhcp_inform+0x44>
  12aecc:	e3080dc8 	movw	r0, #36296	; 0x8dc8
  12aed0:	e3400014 	movt	r0, #20
  12aed4:	ebff608e 	bl	103114 <rt_kprintf>
  12aed8:	e3001329 	movw	r1, #809	; 0x329
  12aedc:	e3080d70 	movw	r0, #36208	; 0x8d70
  12aee0:	e3400014 	movt	r0, #20
  12aee4:	ebff8081 	bl	10b0f0 <sys_arch_assert>
  12aee8:	ea00003b 	b	12afdc <dhcp_inform+0x134>

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
  12aeec:	ebfffc3d 	bl	129fe8 <dhcp_inc_pcb_refcount>
  12aef0:	e1a03000 	mov	r3, r0
  12aef4:	e3530000 	cmp	r3, #0
  12aef8:	1a000036 	bne	12afd8 <dhcp_inform+0x130>
    return;
  }

  memset(&dhcp, 0, sizeof(struct dhcp));
  12aefc:	e24b3048 	sub	r3, fp, #72	; 0x48
  12af00:	e3a02040 	mov	r2, #64	; 0x40
  12af04:	e3a01000 	mov	r1, #0
  12af08:	e1a00003 	mov	r0, r3
  12af0c:	eb0058d8 	bl	141274 <memset>
  dhcp_set_state(&dhcp, DHCP_STATE_INFORMING);
  12af10:	e24b3048 	sub	r3, fp, #72	; 0x48
  12af14:	e3a01007 	mov	r1, #7
  12af18:	e1a00003 	mov	r0, r3
  12af1c:	eb000419 	bl	12bf88 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, &dhcp, DHCP_INFORM);
  12af20:	e24b3048 	sub	r3, fp, #72	; 0x48
  12af24:	e3a02008 	mov	r2, #8
  12af28:	e1a01003 	mov	r1, r3
  12af2c:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
  12af30:	eb000844 	bl	12d048 <dhcp_create_msg>
  12af34:	e1a03000 	mov	r3, r0
  12af38:	e54b3005 	strb	r3, [fp, #-5]
  if (result == ERR_OK) {
  12af3c:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12af40:	e3530000 	cmp	r3, #0
  12af44:	1a000021 	bne	12afd0 <dhcp_inform+0x128>
    dhcp_option(&dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  12af48:	e24b3048 	sub	r3, fp, #72	; 0x48
  12af4c:	e3a02002 	mov	r2, #2
  12af50:	e3a01039 	mov	r1, #57	; 0x39
  12af54:	e1a00003 	mov	r0, r3
  12af58:	eb000422 	bl	12bfe8 <dhcp_option>
    dhcp_option_short(&dhcp, DHCP_MAX_MSG_LEN(netif));
  12af5c:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
  12af60:	e1d323b8 	ldrh	r2, [r3, #56]	; 0x38
  12af64:	e24b3048 	sub	r3, fp, #72	; 0x48
  12af68:	e1a01002 	mov	r1, r2
  12af6c:	e1a00003 	mov	r0, r3
  12af70:	eb00046b 	bl	12c124 <dhcp_option_short>

    dhcp_option_trailer(&dhcp);
  12af74:	e24b3048 	sub	r3, fp, #72	; 0x48
  12af78:	e1a00003 	mov	r0, r3
  12af7c:	eb00099e 	bl	12d5fc <dhcp_option_trailer>

    pbuf_realloc(dhcp.p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp.options_out_len);
  12af80:	e51b203c 	ldr	r2, [fp, #-60]	; 0xffffffc4
  12af84:	e15b33b4 	ldrh	r3, [fp, #-52]	; 0xffffffcc
  12af88:	e28330f0 	add	r3, r3, #240	; 0xf0
  12af8c:	e6ff3073 	uxth	r3, r3
  12af90:	e1a01003 	mov	r1, r3
  12af94:	e1a00002 	mov	r0, r2
  12af98:	ebffbe7b 	bl	11a98c <pbuf_realloc>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_inform: INFORMING\n"));

    udp_sendto_if(dhcp_pcb, dhcp.p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
  12af9c:	e30e3ad8 	movw	r3, #60120	; 0xead8
  12afa0:	e3403014 	movt	r3, #20
  12afa4:	e5930000 	ldr	r0, [r3]
  12afa8:	e51b103c 	ldr	r1, [fp, #-60]	; 0xffffffc4
  12afac:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
  12afb0:	e58d3000 	str	r3, [sp]
  12afb4:	e3a03043 	mov	r3, #67	; 0x43
  12afb8:	e309290c 	movw	r2, #39180	; 0x990c
  12afbc:	e3402014 	movt	r2, #20
  12afc0:	ebfff49a 	bl	128230 <udp_sendto_if>

    dhcp_delete_msg(&dhcp);
  12afc4:	e24b3048 	sub	r3, fp, #72	; 0x48
  12afc8:	e1a00003 	mov	r0, r3
  12afcc:	eb000955 	bl	12d528 <dhcp_delete_msg>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_inform: could not allocate DHCP request\n"));
  }

  dhcp_dec_pcb_refcount(); /* delete DHCP PCB if not needed any more */
  12afd0:	ebfffc50 	bl	12a118 <dhcp_dec_pcb_refcount>
  12afd4:	ea000000 	b	12afdc <dhcp_inform+0x134>
    return;
  12afd8:	e320f000 	nop	{0}
}
  12afdc:	e24bd004 	sub	sp, fp, #4
  12afe0:	e8bd8800 	pop	{fp, pc}

0012afe4 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
  12afe4:	e92d4800 	push	{fp, lr}
  12afe8:	e28db004 	add	fp, sp, #4
  12afec:	e24dd010 	sub	sp, sp, #16
  12aff0:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12aff4:	e51b3010 	ldr	r3, [fp, #-16]
  12aff8:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12affc:	e50b3008 	str	r3, [fp, #-8]

  if (!dhcp)
  12b000:	e51b3008 	ldr	r3, [fp, #-8]
  12b004:	e3530000 	cmp	r3, #0
  12b008:	0a00001c 	beq	12b080 <dhcp_network_changed+0x9c>
    return;
  switch (dhcp->state) {
  12b00c:	e51b3008 	ldr	r3, [fp, #-8]
  12b010:	e5d33009 	ldrb	r3, [r3, #9]
  12b014:	e353000a 	cmp	r3, #10
  12b018:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  12b01c:	ea000010 	b	12b064 <dhcp_network_changed+0x80>
  12b020:	0012b088 	.word	0x0012b088
  12b024:	0012b064 	.word	0x0012b064
  12b028:	0012b064 	.word	0x0012b064
  12b02c:	0012b04c 	.word	0x0012b04c
  12b030:	0012b04c 	.word	0x0012b04c
  12b034:	0012b04c 	.word	0x0012b04c
  12b038:	0012b064 	.word	0x0012b064
  12b03c:	0012b064 	.word	0x0012b064
  12b040:	0012b064 	.word	0x0012b064
  12b044:	0012b064 	.word	0x0012b064
  12b048:	0012b04c 	.word	0x0012b04c
  case DHCP_STATE_REBINDING:
  case DHCP_STATE_RENEWING:
  case DHCP_STATE_BOUND:
  case DHCP_STATE_REBOOTING:
    dhcp->tries = 0;
  12b04c:	e51b3008 	ldr	r3, [fp, #-8]
  12b050:	e3a02000 	mov	r2, #0
  12b054:	e5c3200a 	strb	r2, [r3, #10]
    dhcp_reboot(netif);
  12b058:	e51b0010 	ldr	r0, [fp, #-16]
  12b05c:	eb0002a7 	bl	12bb00 <dhcp_reboot>
    break;
  12b060:	ea000009 	b	12b08c <dhcp_network_changed+0xa8>
      autoip_stop(netif);
      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */
    /* ensure we start with short timeouts, even if already discovering */
    dhcp->tries = 0;
  12b064:	e51b3008 	ldr	r3, [fp, #-8]
  12b068:	e3a02000 	mov	r2, #0
  12b06c:	e5c3200a 	strb	r2, [r3, #10]
    dhcp_discover(netif);
  12b070:	e51b0010 	ldr	r0, [fp, #-16]
  12b074:	eb000082 	bl	12b284 <dhcp_discover>
    break;
  12b078:	e320f000 	nop	{0}
  12b07c:	ea000002 	b	12b08c <dhcp_network_changed+0xa8>
    return;
  12b080:	e320f000 	nop	{0}
  12b084:	ea000000 	b	12b08c <dhcp_network_changed+0xa8>
    break;
  12b088:	e320f000 	nop	{0}
  }
}
  12b08c:	e24bd004 	sub	sp, fp, #4
  12b090:	e8bd8800 	pop	{fp, pc}

0012b094 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
  12b094:	e92d4800 	push	{fp, lr}
  12b098:	e28db004 	add	fp, sp, #4
  12b09c:	e24dd010 	sub	sp, sp, #16
  12b0a0:	e50b0010 	str	r0, [fp, #-16]
  12b0a4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
  12b0a8:	e51b3010 	ldr	r3, [fp, #-16]
  12b0ac:	e3530000 	cmp	r3, #0
  12b0b0:	1a000007 	bne	12b0d4 <dhcp_arp_reply+0x40>
  12b0b4:	e3080dc8 	movw	r0, #36296	; 0x8dc8
  12b0b8:	e3400014 	movt	r0, #20
  12b0bc:	ebff6014 	bl	103114 <rt_kprintf>
  12b0c0:	e300137d 	movw	r1, #893	; 0x37d
  12b0c4:	e3080d70 	movw	r0, #36208	; 0x8d70
  12b0c8:	e3400014 	movt	r0, #20
  12b0cc:	ebff8007 	bl	10b0f0 <sys_arch_assert>
  12b0d0:	ea000011 	b	12b11c <dhcp_arp_reply+0x88>
  dhcp = netif_dhcp_data(netif);
  12b0d4:	e51b3010 	ldr	r3, [fp, #-16]
  12b0d8:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12b0dc:	e50b3008 	str	r3, [fp, #-8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
  12b0e0:	e51b3008 	ldr	r3, [fp, #-8]
  12b0e4:	e3530000 	cmp	r3, #0
  12b0e8:	0a00000b 	beq	12b11c <dhcp_arp_reply+0x88>
  12b0ec:	e51b3008 	ldr	r3, [fp, #-8]
  12b0f0:	e5d33009 	ldrb	r3, [r3, #9]
  12b0f4:	e3530008 	cmp	r3, #8
  12b0f8:	1a000007 	bne	12b11c <dhcp_arp_reply+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
      ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
  12b0fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12b100:	e5932000 	ldr	r2, [r3]
  12b104:	e51b3008 	ldr	r3, [fp, #-8]
  12b108:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12b10c:	e1520003 	cmp	r2, r3
  12b110:	1a000001 	bne	12b11c <dhcp_arp_reply+0x88>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
        ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
  12b114:	e51b0010 	ldr	r0, [fp, #-16]
  12b118:	eb000001 	bl	12b124 <dhcp_decline>
    }
  }
}
  12b11c:	e24bd004 	sub	sp, fp, #4
  12b120:	e8bd8800 	pop	{fp, pc}

0012b124 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
  12b124:	e92d4800 	push	{fp, lr}
  12b128:	e28db004 	add	fp, sp, #4
  12b12c:	e24dd018 	sub	sp, sp, #24
  12b130:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12b134:	e51b3010 	ldr	r3, [fp, #-16]
  12b138:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12b13c:	e50b3008 	str	r3, [fp, #-8]
  err_t result = ERR_OK;
  12b140:	e3a03000 	mov	r3, #0
  12b144:	e54b3009 	strb	r3, [fp, #-9]
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
  12b148:	e3a0100c 	mov	r1, #12
  12b14c:	e51b0008 	ldr	r0, [fp, #-8]
  12b150:	eb00038c 	bl	12bf88 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
  12b154:	e3a02004 	mov	r2, #4
  12b158:	e51b1008 	ldr	r1, [fp, #-8]
  12b15c:	e51b0010 	ldr	r0, [fp, #-16]
  12b160:	eb0007b8 	bl	12d048 <dhcp_create_msg>
  12b164:	e1a03000 	mov	r3, r0
  12b168:	e54b3009 	strb	r3, [fp, #-9]
  if (result == ERR_OK) {
  12b16c:	e15b30d9 	ldrsb	r3, [fp, #-9]
  12b170:	e3530000 	cmp	r3, #0
  12b174:	1a000026 	bne	12b214 <dhcp_decline+0xf0>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
  12b178:	e3a02004 	mov	r2, #4
  12b17c:	e3a01032 	mov	r1, #50	; 0x32
  12b180:	e51b0008 	ldr	r0, [fp, #-8]
  12b184:	eb000397 	bl	12bfe8 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
  12b188:	e51b3008 	ldr	r3, [fp, #-8]
  12b18c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12b190:	e1a00003 	mov	r0, r3
  12b194:	ebffad1a 	bl	116604 <lwip_htonl>
  12b198:	e1a03000 	mov	r3, r0
  12b19c:	e1a01003 	mov	r1, r3
  12b1a0:	e51b0008 	ldr	r0, [fp, #-8]
  12b1a4:	eb00040f 	bl	12c1e8 <dhcp_option_long>

    dhcp_option_trailer(dhcp);
  12b1a8:	e51b0008 	ldr	r0, [fp, #-8]
  12b1ac:	eb000912 	bl	12d5fc <dhcp_option_trailer>
    /* resize pbuf to reflect true size of options */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  12b1b0:	e51b3008 	ldr	r3, [fp, #-8]
  12b1b4:	e593200c 	ldr	r2, [r3, #12]
  12b1b8:	e51b3008 	ldr	r3, [fp, #-8]
  12b1bc:	e1d331b4 	ldrh	r3, [r3, #20]
  12b1c0:	e28330f0 	add	r3, r3, #240	; 0xf0
  12b1c4:	e6ff3073 	uxth	r3, r3
  12b1c8:	e1a01003 	mov	r1, r3
  12b1cc:	e1a00002 	mov	r0, r2
  12b1d0:	ebffbded 	bl	11a98c <pbuf_realloc>

    /* per section 4.4.4, broadcast DECLINE messages */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
  12b1d4:	e30e3ad8 	movw	r3, #60120	; 0xead8
  12b1d8:	e3403014 	movt	r3, #20
  12b1dc:	e5930000 	ldr	r0, [r3]
  12b1e0:	e51b3008 	ldr	r3, [fp, #-8]
  12b1e4:	e593100c 	ldr	r1, [r3, #12]
  12b1e8:	e3093908 	movw	r3, #39176	; 0x9908
  12b1ec:	e3403014 	movt	r3, #20
  12b1f0:	e58d3004 	str	r3, [sp, #4]
  12b1f4:	e51b3010 	ldr	r3, [fp, #-16]
  12b1f8:	e58d3000 	str	r3, [sp]
  12b1fc:	e3a03043 	mov	r3, #67	; 0x43
  12b200:	e309290c 	movw	r2, #39180	; 0x990c
  12b204:	e3402014 	movt	r2, #20
  12b208:	ebfff440 	bl	128310 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
  12b20c:	e51b0008 	ldr	r0, [fp, #-8]
  12b210:	eb0008c4 	bl	12d528 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_decline: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
  12b214:	e51b3008 	ldr	r3, [fp, #-8]
  12b218:	e5d3300a 	ldrb	r3, [r3, #10]
  12b21c:	e35300ff 	cmp	r3, #255	; 0xff
  12b220:	0a000005 	beq	12b23c <dhcp_decline+0x118>
    dhcp->tries++;
  12b224:	e51b3008 	ldr	r3, [fp, #-8]
  12b228:	e5d3300a 	ldrb	r3, [r3, #10]
  12b22c:	e2833001 	add	r3, r3, #1
  12b230:	e6ef2073 	uxtb	r2, r3
  12b234:	e51b3008 	ldr	r3, [fp, #-8]
  12b238:	e5c3200a 	strb	r2, [r3, #10]
  }
  msecs = 10*1000;
  12b23c:	e3023710 	movw	r3, #10000	; 0x2710
  12b240:	e14b30bc 	strh	r3, [fp, #-12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  12b244:	e15b30bc 	ldrh	r3, [fp, #-12]
  12b248:	e2833e1f 	add	r3, r3, #496	; 0x1f0
  12b24c:	e2833003 	add	r3, r3, #3
  12b250:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  12b254:	e3412062 	movt	r2, #4194	; 0x1062
  12b258:	e0c10293 	smull	r0, r1, r3, r2
  12b25c:	e1a022c1 	asr	r2, r1, #5
  12b260:	e1a03fc3 	asr	r3, r3, #31
  12b264:	e0423003 	sub	r3, r2, r3
  12b268:	e6ff2073 	uxth	r2, r3
  12b26c:	e51b3008 	ldr	r3, [fp, #-8]
  12b270:	e1c321b6 	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  12b274:	e15b30d9 	ldrsb	r3, [fp, #-9]
}
  12b278:	e1a00003 	mov	r0, r3
  12b27c:	e24bd004 	sub	sp, fp, #4
  12b280:	e8bd8800 	pop	{fp, pc}

0012b284 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
  12b284:	e92d4800 	push	{fp, lr}
  12b288:	e28db004 	add	fp, sp, #4
  12b28c:	e24dd020 	sub	sp, sp, #32
  12b290:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12b294:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b298:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12b29c:	e50b300c 	str	r3, [fp, #-12]
  err_t result = ERR_OK;
  12b2a0:	e3a03000 	mov	r3, #0
  12b2a4:	e54b300d 	strb	r3, [fp, #-13]
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
  ip4_addr_set_any(&dhcp->offered_ip_addr);
  12b2a8:	e51b300c 	ldr	r3, [fp, #-12]
  12b2ac:	e3a02000 	mov	r2, #0
  12b2b0:	e5832028 	str	r2, [r3, #40]	; 0x28
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
  12b2b4:	e3a01006 	mov	r1, #6
  12b2b8:	e51b000c 	ldr	r0, [fp, #-12]
  12b2bc:	eb000331 	bl	12bf88 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
  12b2c0:	e3a02001 	mov	r2, #1
  12b2c4:	e51b100c 	ldr	r1, [fp, #-12]
  12b2c8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12b2cc:	eb00075d 	bl	12d048 <dhcp_create_msg>
  12b2d0:	e1a03000 	mov	r3, r0
  12b2d4:	e54b300d 	strb	r3, [fp, #-13]
  if (result == ERR_OK) {
  12b2d8:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12b2dc:	e3530000 	cmp	r3, #0
  12b2e0:	1a000037 	bne	12b3c4 <dhcp_discover+0x140>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  12b2e4:	e3a02002 	mov	r2, #2
  12b2e8:	e3a01039 	mov	r1, #57	; 0x39
  12b2ec:	e51b000c 	ldr	r0, [fp, #-12]
  12b2f0:	eb00033c 	bl	12bfe8 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
  12b2f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b2f8:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  12b2fc:	e1a01003 	mov	r1, r3
  12b300:	e51b000c 	ldr	r0, [fp, #-12]
  12b304:	eb000386 	bl	12c124 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
  12b308:	e3a02004 	mov	r2, #4
  12b30c:	e3a01037 	mov	r1, #55	; 0x37
  12b310:	e51b000c 	ldr	r0, [fp, #-12]
  12b314:	eb000333 	bl	12bfe8 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12b318:	e3a03000 	mov	r3, #0
  12b31c:	e54b3005 	strb	r3, [fp, #-5]
  12b320:	ea000009 	b	12b34c <dhcp_discover+0xc8>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
  12b324:	e55b2005 	ldrb	r2, [fp, #-5]
  12b328:	e30d303c 	movw	r3, #53308	; 0xd03c
  12b32c:	e3403014 	movt	r3, #20
  12b330:	e7d33002 	ldrb	r3, [r3, r2]
  12b334:	e1a01003 	mov	r1, r3
  12b338:	e51b000c 	ldr	r0, [fp, #-12]
  12b33c:	eb000359 	bl	12c0a8 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12b340:	e55b3005 	ldrb	r3, [fp, #-5]
  12b344:	e2833001 	add	r3, r3, #1
  12b348:	e54b3005 	strb	r3, [fp, #-5]
  12b34c:	e55b3005 	ldrb	r3, [fp, #-5]
  12b350:	e3530003 	cmp	r3, #3
  12b354:	9afffff2 	bls	12b324 <dhcp_discover+0xa0>
    }
    dhcp_option_trailer(dhcp);
  12b358:	e51b000c 	ldr	r0, [fp, #-12]
  12b35c:	eb0008a6 	bl	12d5fc <dhcp_option_trailer>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: realloc()ing\n"));
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  12b360:	e51b300c 	ldr	r3, [fp, #-12]
  12b364:	e593200c 	ldr	r2, [r3, #12]
  12b368:	e51b300c 	ldr	r3, [fp, #-12]
  12b36c:	e1d331b4 	ldrh	r3, [r3, #20]
  12b370:	e28330f0 	add	r3, r3, #240	; 0xf0
  12b374:	e6ff3073 	uxth	r3, r3
  12b378:	e1a01003 	mov	r1, r3
  12b37c:	e1a00002 	mov	r0, r2
  12b380:	ebffbd81 	bl	11a98c <pbuf_realloc>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
  12b384:	e30e3ad8 	movw	r3, #60120	; 0xead8
  12b388:	e3403014 	movt	r3, #20
  12b38c:	e5930000 	ldr	r0, [r3]
  12b390:	e51b300c 	ldr	r3, [fp, #-12]
  12b394:	e593100c 	ldr	r1, [r3, #12]
  12b398:	e3093908 	movw	r3, #39176	; 0x9908
  12b39c:	e3403014 	movt	r3, #20
  12b3a0:	e58d3004 	str	r3, [sp, #4]
  12b3a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b3a8:	e58d3000 	str	r3, [sp]
  12b3ac:	e3a03043 	mov	r3, #67	; 0x43
  12b3b0:	e309290c 	movw	r2, #39180	; 0x990c
  12b3b4:	e3402014 	movt	r2, #20
  12b3b8:	ebfff3d4 	bl	128310 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    dhcp_delete_msg(dhcp);
  12b3bc:	e51b000c 	ldr	r0, [fp, #-12]
  12b3c0:	eb000858 	bl	12d528 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
  12b3c4:	e51b300c 	ldr	r3, [fp, #-12]
  12b3c8:	e5d3300a 	ldrb	r3, [r3, #10]
  12b3cc:	e35300ff 	cmp	r3, #255	; 0xff
  12b3d0:	0a000005 	beq	12b3ec <dhcp_discover+0x168>
    dhcp->tries++;
  12b3d4:	e51b300c 	ldr	r3, [fp, #-12]
  12b3d8:	e5d3300a 	ldrb	r3, [r3, #10]
  12b3dc:	e2833001 	add	r3, r3, #1
  12b3e0:	e6ef2073 	uxtb	r2, r3
  12b3e4:	e51b300c 	ldr	r3, [fp, #-12]
  12b3e8:	e5c3200a 	strb	r2, [r3, #10]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
  12b3ec:	e51b300c 	ldr	r3, [fp, #-12]
  12b3f0:	e5d3300a 	ldrb	r3, [r3, #10]
  12b3f4:	e3530005 	cmp	r3, #5
  12b3f8:	8a000006 	bhi	12b418 <dhcp_discover+0x194>
  12b3fc:	e51b300c 	ldr	r3, [fp, #-12]
  12b400:	e5d3300a 	ldrb	r3, [r3, #10]
  12b404:	e1a02003 	mov	r2, r3
  12b408:	e3a03ffa 	mov	r3, #1000	; 0x3e8
  12b40c:	e1a03213 	lsl	r3, r3, r2
  12b410:	e6ff3073 	uxth	r3, r3
  12b414:	ea000000 	b	12b41c <dhcp_discover+0x198>
  12b418:	e30e3a60 	movw	r3, #60000	; 0xea60
  12b41c:	e14b31b0 	strh	r3, [fp, #-16]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  12b420:	e15b31b0 	ldrh	r3, [fp, #-16]
  12b424:	e2833e1f 	add	r3, r3, #496	; 0x1f0
  12b428:	e2833003 	add	r3, r3, #3
  12b42c:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  12b430:	e3412062 	movt	r2, #4194	; 0x1062
  12b434:	e0c10293 	smull	r0, r1, r3, r2
  12b438:	e1a022c1 	asr	r2, r1, #5
  12b43c:	e1a03fc3 	asr	r3, r3, #31
  12b440:	e0423003 	sub	r3, r2, r3
  12b444:	e6ff2073 	uxth	r2, r3
  12b448:	e51b300c 	ldr	r3, [fp, #-12]
  12b44c:	e1c321b6 	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  12b450:	e15b30dd 	ldrsb	r3, [fp, #-13]
}
  12b454:	e1a00003 	mov	r0, r3
  12b458:	e24bd004 	sub	sp, fp, #4
  12b45c:	e8bd8800 	pop	{fp, pc}

0012b460 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
  12b460:	e92d4800 	push	{fp, lr}
  12b464:	e28db004 	add	fp, sp, #4
  12b468:	e24dd020 	sub	sp, sp, #32
  12b46c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
  12b470:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12b474:	e3530000 	cmp	r3, #0
  12b478:	1a000007 	bne	12b49c <dhcp_bind+0x3c>
  12b47c:	e3080e5c 	movw	r0, #36444	; 0x8e5c
  12b480:	e3400014 	movt	r0, #20
  12b484:	ebff5f22 	bl	103114 <rt_kprintf>
  12b488:	e30013ff 	movw	r1, #1023	; 0x3ff
  12b48c:	e3080d70 	movw	r0, #36208	; 0x8d70
  12b490:	e3400014 	movt	r0, #20
  12b494:	ebff7f15 	bl	10b0f0 <sys_arch_assert>
  12b498:	ea0000aa 	b	12b748 <dhcp_bind+0x2e8>
  dhcp = netif_dhcp_data(netif);
  12b49c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12b4a0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12b4a4:	e50b300c 	str	r3, [fp, #-12]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
  12b4a8:	e51b300c 	ldr	r3, [fp, #-12]
  12b4ac:	e3530000 	cmp	r3, #0
  12b4b0:	1a000007 	bne	12b4d4 <dhcp_bind+0x74>
  12b4b4:	e3080e78 	movw	r0, #36472	; 0x8e78
  12b4b8:	e3400014 	movt	r0, #20
  12b4bc:	ebff5f14 	bl	103114 <rt_kprintf>
  12b4c0:	e3001401 	movw	r1, #1025	; 0x401
  12b4c4:	e3080d70 	movw	r0, #36208	; 0x8d70
  12b4c8:	e3400014 	movt	r0, #20
  12b4cc:	ebff7f07 	bl	10b0f0 <sys_arch_assert>
  12b4d0:	ea00009c 	b	12b748 <dhcp_bind+0x2e8>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
  12b4d4:	e51b300c 	ldr	r3, [fp, #-12]
  12b4d8:	e3a02000 	mov	r2, #0
  12b4dc:	e1c322b0 	strh	r2, [r3, #32]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
  12b4e0:	e51b300c 	ldr	r3, [fp, #-12]
  12b4e4:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  12b4e8:	e3730001 	cmn	r3, #1
  12b4ec:	0a000017 	beq	12b550 <dhcp_bind+0xf0>
     /* set renewal period timer */
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
     timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
  12b4f0:	e51b300c 	ldr	r3, [fp, #-12]
  12b4f4:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  12b4f8:	e283201e 	add	r2, r3, #30
  12b4fc:	e3083889 	movw	r3, #34953	; 0x8889
  12b500:	e3483888 	movt	r3, #34952	; 0x8888
  12b504:	e0832392 	umull	r2, r3, r2, r3
  12b508:	e1a032a3 	lsr	r3, r3, #5
  12b50c:	e50b3008 	str	r3, [fp, #-8]
     if (timeout > 0xffff) {
  12b510:	e51b3008 	ldr	r3, [fp, #-8]
  12b514:	e3530801 	cmp	r3, #65536	; 0x10000
  12b518:	3a000001 	bcc	12b524 <dhcp_bind+0xc4>
       timeout = 0xffff;
  12b51c:	e30f3fff 	movw	r3, #65535	; 0xffff
  12b520:	e50b3008 	str	r3, [fp, #-8]
     }
     dhcp->t0_timeout = (u16_t)timeout;
  12b524:	e51b3008 	ldr	r3, [fp, #-8]
  12b528:	e6ff2073 	uxth	r2, r3
  12b52c:	e51b300c 	ldr	r3, [fp, #-12]
  12b530:	e1c322b2 	strh	r2, [r3, #34]	; 0x22
     if (dhcp->t0_timeout == 0) {
  12b534:	e51b300c 	ldr	r3, [fp, #-12]
  12b538:	e1d332b2 	ldrh	r3, [r3, #34]	; 0x22
  12b53c:	e3530000 	cmp	r3, #0
  12b540:	1a000002 	bne	12b550 <dhcp_bind+0xf0>
       dhcp->t0_timeout = 1;
  12b544:	e51b300c 	ldr	r3, [fp, #-12]
  12b548:	e3a02001 	mov	r2, #1
  12b54c:	e1c322b2 	strh	r2, [r3, #34]	; 0x22
     }
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease*1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
  12b550:	e51b300c 	ldr	r3, [fp, #-12]
  12b554:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  12b558:	e3730001 	cmn	r3, #1
  12b55c:	0a00001b 	beq	12b5d0 <dhcp_bind+0x170>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
  12b560:	e51b300c 	ldr	r3, [fp, #-12]
  12b564:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  12b568:	e283201e 	add	r2, r3, #30
  12b56c:	e3083889 	movw	r3, #34953	; 0x8889
  12b570:	e3483888 	movt	r3, #34952	; 0x8888
  12b574:	e0832392 	umull	r2, r3, r2, r3
  12b578:	e1a032a3 	lsr	r3, r3, #5
  12b57c:	e50b3008 	str	r3, [fp, #-8]
    if (timeout > 0xffff) {
  12b580:	e51b3008 	ldr	r3, [fp, #-8]
  12b584:	e3530801 	cmp	r3, #65536	; 0x10000
  12b588:	3a000001 	bcc	12b594 <dhcp_bind+0x134>
      timeout = 0xffff;
  12b58c:	e30f3fff 	movw	r3, #65535	; 0xffff
  12b590:	e50b3008 	str	r3, [fp, #-8]
    }
    dhcp->t1_timeout = (u16_t)timeout;
  12b594:	e51b3008 	ldr	r3, [fp, #-8]
  12b598:	e6ff2073 	uxth	r2, r3
  12b59c:	e51b300c 	ldr	r3, [fp, #-12]
  12b5a0:	e1c321b8 	strh	r2, [r3, #24]
    if (dhcp->t1_timeout == 0) {
  12b5a4:	e51b300c 	ldr	r3, [fp, #-12]
  12b5a8:	e1d331b8 	ldrh	r3, [r3, #24]
  12b5ac:	e3530000 	cmp	r3, #0
  12b5b0:	1a000002 	bne	12b5c0 <dhcp_bind+0x160>
      dhcp->t1_timeout = 1;
  12b5b4:	e51b300c 	ldr	r3, [fp, #-12]
  12b5b8:	e3a02001 	mov	r2, #1
  12b5bc:	e1c321b8 	strh	r2, [r3, #24]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew*1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
  12b5c0:	e51b300c 	ldr	r3, [fp, #-12]
  12b5c4:	e1d321b8 	ldrh	r2, [r3, #24]
  12b5c8:	e51b300c 	ldr	r3, [fp, #-12]
  12b5cc:	e1c321bc 	strh	r2, [r3, #28]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
  12b5d0:	e51b300c 	ldr	r3, [fp, #-12]
  12b5d4:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  12b5d8:	e3730001 	cmn	r3, #1
  12b5dc:	0a00001b 	beq	12b650 <dhcp_bind+0x1f0>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
  12b5e0:	e51b300c 	ldr	r3, [fp, #-12]
  12b5e4:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  12b5e8:	e283201e 	add	r2, r3, #30
  12b5ec:	e3083889 	movw	r3, #34953	; 0x8889
  12b5f0:	e3483888 	movt	r3, #34952	; 0x8888
  12b5f4:	e0832392 	umull	r2, r3, r2, r3
  12b5f8:	e1a032a3 	lsr	r3, r3, #5
  12b5fc:	e50b3008 	str	r3, [fp, #-8]
    if (timeout > 0xffff) {
  12b600:	e51b3008 	ldr	r3, [fp, #-8]
  12b604:	e3530801 	cmp	r3, #65536	; 0x10000
  12b608:	3a000001 	bcc	12b614 <dhcp_bind+0x1b4>
      timeout = 0xffff;
  12b60c:	e30f3fff 	movw	r3, #65535	; 0xffff
  12b610:	e50b3008 	str	r3, [fp, #-8]
    }
    dhcp->t2_timeout = (u16_t)timeout;
  12b614:	e51b3008 	ldr	r3, [fp, #-8]
  12b618:	e6ff2073 	uxth	r2, r3
  12b61c:	e51b300c 	ldr	r3, [fp, #-12]
  12b620:	e1c321ba 	strh	r2, [r3, #26]
    if (dhcp->t2_timeout == 0) {
  12b624:	e51b300c 	ldr	r3, [fp, #-12]
  12b628:	e1d331ba 	ldrh	r3, [r3, #26]
  12b62c:	e3530000 	cmp	r3, #0
  12b630:	1a000002 	bne	12b640 <dhcp_bind+0x1e0>
      dhcp->t2_timeout = 1;
  12b634:	e51b300c 	ldr	r3, [fp, #-12]
  12b638:	e3a02001 	mov	r2, #1
  12b63c:	e1c321ba 	strh	r2, [r3, #26]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind*1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
  12b640:	e51b300c 	ldr	r3, [fp, #-12]
  12b644:	e1d321ba 	ldrh	r2, [r3, #26]
  12b648:	e51b300c 	ldr	r3, [fp, #-12]
  12b64c:	e1c321be 	strh	r2, [r3, #30]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
  12b650:	e51b300c 	ldr	r3, [fp, #-12]
  12b654:	e1d321b8 	ldrh	r2, [r3, #24]
  12b658:	e51b300c 	ldr	r3, [fp, #-12]
  12b65c:	e1d331ba 	ldrh	r3, [r3, #26]
  12b660:	e1520003 	cmp	r2, r3
  12b664:	3a000006 	bcc	12b684 <dhcp_bind+0x224>
  12b668:	e51b300c 	ldr	r3, [fp, #-12]
  12b66c:	e1d331ba 	ldrh	r3, [r3, #26]
  12b670:	e3530000 	cmp	r3, #0
  12b674:	0a000002 	beq	12b684 <dhcp_bind+0x224>
    dhcp->t1_timeout = 0;
  12b678:	e51b300c 	ldr	r3, [fp, #-12]
  12b67c:	e3a02000 	mov	r2, #0
  12b680:	e1c321b8 	strh	r2, [r3, #24]
  }

  if (dhcp->subnet_mask_given) {
  12b684:	e51b300c 	ldr	r3, [fp, #-12]
  12b688:	e5d3300b 	ldrb	r3, [r3, #11]
  12b68c:	e3530000 	cmp	r3, #0
  12b690:	0a000003 	beq	12b6a4 <dhcp_bind+0x244>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
  12b694:	e51b300c 	ldr	r3, [fp, #-12]
  12b698:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  12b69c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  12b6a0:	ea000011 	b	12b6ec <dhcp_bind+0x28c>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
  12b6a4:	e51b300c 	ldr	r3, [fp, #-12]
  12b6a8:	e2833028 	add	r3, r3, #40	; 0x28
  12b6ac:	e5d33000 	ldrb	r3, [r3]
  12b6b0:	e54b300d 	strb	r3, [fp, #-13]
    if (first_octet <= 127) {
  12b6b4:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12b6b8:	e3530000 	cmp	r3, #0
  12b6bc:	ba000002 	blt	12b6cc <dhcp_bind+0x26c>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
  12b6c0:	e3a030ff 	mov	r3, #255	; 0xff
  12b6c4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  12b6c8:	ea000007 	b	12b6ec <dhcp_bind+0x28c>
    } else if (first_octet >= 192) {
  12b6cc:	e55b300d 	ldrb	r3, [fp, #-13]
  12b6d0:	e35300bf 	cmp	r3, #191	; 0xbf
  12b6d4:	9a000002 	bls	12b6e4 <dhcp_bind+0x284>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
  12b6d8:	e3e034ff 	mvn	r3, #-16777216	; 0xff000000
  12b6dc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  12b6e0:	ea000001 	b	12b6ec <dhcp_bind+0x28c>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
  12b6e4:	e30f3fff 	movw	r3, #65535	; 0xffff
  12b6e8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
  12b6ec:	e51b300c 	ldr	r3, [fp, #-12]
  12b6f0:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  12b6f4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
  12b6f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b6fc:	e3530000 	cmp	r3, #0
  12b700:	1a000007 	bne	12b724 <dhcp_bind+0x2c4>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
  12b704:	e51b300c 	ldr	r3, [fp, #-12]
  12b708:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  12b70c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12b710:	e0033002 	and	r3, r3, r2
  12b714:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
  12b718:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b71c:	e3833401 	orr	r3, r3, #16777216	; 0x1000000
  12b720:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
    ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
  12b724:	e3a0100a 	mov	r1, #10
  12b728:	e51b000c 	ldr	r0, [fp, #-12]
  12b72c:	eb000215 	bl	12bf88 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
  12b730:	e51b300c 	ldr	r3, [fp, #-12]
  12b734:	e2831028 	add	r1, r3, #40	; 0x28
  12b738:	e24b3018 	sub	r3, fp, #24
  12b73c:	e24b2014 	sub	r2, fp, #20
  12b740:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  12b744:	ebffb76b 	bl	1194f8 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
  12b748:	e24bd004 	sub	sp, fp, #4
  12b74c:	e8bd8800 	pop	{fp, pc}

0012b750 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
  12b750:	e92d4800 	push	{fp, lr}
  12b754:	e28db004 	add	fp, sp, #4
  12b758:	e24dd020 	sub	sp, sp, #32
  12b75c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12b760:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b764:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12b768:	e50b300c 	str	r3, [fp, #-12]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
  12b76c:	e3a01005 	mov	r1, #5
  12b770:	e51b000c 	ldr	r0, [fp, #-12]
  12b774:	eb000203 	bl	12bf88 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
  12b778:	e3a02003 	mov	r2, #3
  12b77c:	e51b100c 	ldr	r1, [fp, #-12]
  12b780:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12b784:	eb00062f 	bl	12d048 <dhcp_create_msg>
  12b788:	e1a03000 	mov	r3, r0
  12b78c:	e54b300d 	strb	r3, [fp, #-13]
  if (result == ERR_OK) {
  12b790:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12b794:	e3530000 	cmp	r3, #0
  12b798:	1a000037 	bne	12b87c <dhcp_renew+0x12c>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  12b79c:	e3a02002 	mov	r2, #2
  12b7a0:	e3a01039 	mov	r1, #57	; 0x39
  12b7a4:	e51b000c 	ldr	r0, [fp, #-12]
  12b7a8:	eb00020e 	bl	12bfe8 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
  12b7ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b7b0:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  12b7b4:	e1a01003 	mov	r1, r3
  12b7b8:	e51b000c 	ldr	r0, [fp, #-12]
  12b7bc:	eb000258 	bl	12c124 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
  12b7c0:	e3a02004 	mov	r2, #4
  12b7c4:	e3a01037 	mov	r1, #55	; 0x37
  12b7c8:	e51b000c 	ldr	r0, [fp, #-12]
  12b7cc:	eb000205 	bl	12bfe8 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12b7d0:	e3a03000 	mov	r3, #0
  12b7d4:	e54b3005 	strb	r3, [fp, #-5]
  12b7d8:	ea000009 	b	12b804 <dhcp_renew+0xb4>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
  12b7dc:	e55b2005 	ldrb	r2, [fp, #-5]
  12b7e0:	e30d303c 	movw	r3, #53308	; 0xd03c
  12b7e4:	e3403014 	movt	r3, #20
  12b7e8:	e7d33002 	ldrb	r3, [r3, r2]
  12b7ec:	e1a01003 	mov	r1, r3
  12b7f0:	e51b000c 	ldr	r0, [fp, #-12]
  12b7f4:	eb00022b 	bl	12c0a8 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12b7f8:	e55b3005 	ldrb	r3, [fp, #-5]
  12b7fc:	e2833001 	add	r3, r3, #1
  12b800:	e54b3005 	strb	r3, [fp, #-5]
  12b804:	e55b3005 	ldrb	r3, [fp, #-5]
  12b808:	e3530003 	cmp	r3, #3
  12b80c:	9afffff2 	bls	12b7dc <dhcp_renew+0x8c>
    }

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
  12b810:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  12b814:	e51b000c 	ldr	r0, [fp, #-12]
  12b818:	eb0002bd 	bl	12c314 <dhcp_option_hostname>
#endif /* LWIP_NETIF_HOSTNAME */

    /* append DHCP message trailer */
    dhcp_option_trailer(dhcp);
  12b81c:	e51b000c 	ldr	r0, [fp, #-12]
  12b820:	eb000775 	bl	12d5fc <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  12b824:	e51b300c 	ldr	r3, [fp, #-12]
  12b828:	e593200c 	ldr	r2, [r3, #12]
  12b82c:	e51b300c 	ldr	r3, [fp, #-12]
  12b830:	e1d331b4 	ldrh	r3, [r3, #20]
  12b834:	e28330f0 	add	r3, r3, #240	; 0xf0
  12b838:	e6ff3073 	uxth	r3, r3
  12b83c:	e1a01003 	mov	r1, r3
  12b840:	e1a00002 	mov	r0, r2
  12b844:	ebffbc50 	bl	11a98c <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
  12b848:	e30e3ad8 	movw	r3, #60120	; 0xead8
  12b84c:	e3403014 	movt	r3, #20
  12b850:	e5930000 	ldr	r0, [r3]
  12b854:	e51b300c 	ldr	r3, [fp, #-12]
  12b858:	e593100c 	ldr	r1, [r3, #12]
  12b85c:	e51b300c 	ldr	r3, [fp, #-12]
  12b860:	e2832024 	add	r2, r3, #36	; 0x24
  12b864:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b868:	e58d3000 	str	r3, [sp]
  12b86c:	e3a03043 	mov	r3, #67	; 0x43
  12b870:	ebfff26e 	bl	128230 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
  12b874:	e51b000c 	ldr	r0, [fp, #-12]
  12b878:	eb00072a 	bl	12d528 <dhcp_delete_msg>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
  12b87c:	e51b300c 	ldr	r3, [fp, #-12]
  12b880:	e5d3300a 	ldrb	r3, [r3, #10]
  12b884:	e35300ff 	cmp	r3, #255	; 0xff
  12b888:	0a000005 	beq	12b8a4 <dhcp_renew+0x154>
    dhcp->tries++;
  12b88c:	e51b300c 	ldr	r3, [fp, #-12]
  12b890:	e5d3300a 	ldrb	r3, [r3, #10]
  12b894:	e2833001 	add	r3, r3, #1
  12b898:	e6ef2073 	uxtb	r2, r3
  12b89c:	e51b300c 	ldr	r3, [fp, #-12]
  12b8a0:	e5c3200a 	strb	r2, [r3, #10]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
  12b8a4:	e51b300c 	ldr	r3, [fp, #-12]
  12b8a8:	e5d3300a 	ldrb	r3, [r3, #10]
  12b8ac:	e3530009 	cmp	r3, #9
  12b8b0:	8a00000a 	bhi	12b8e0 <dhcp_renew+0x190>
  12b8b4:	e51b300c 	ldr	r3, [fp, #-12]
  12b8b8:	e5d3300a 	ldrb	r3, [r3, #10]
  12b8bc:	e6ff3073 	uxth	r3, r3
  12b8c0:	e1a02003 	mov	r2, r3
  12b8c4:	e1a02282 	lsl	r2, r2, #5
  12b8c8:	e0422003 	sub	r2, r2, r3
  12b8cc:	e1a02102 	lsl	r2, r2, #2
  12b8d0:	e0823003 	add	r3, r2, r3
  12b8d4:	e1a03203 	lsl	r3, r3, #4
  12b8d8:	e6ff3073 	uxth	r3, r3
  12b8dc:	ea000000 	b	12b8e4 <dhcp_renew+0x194>
  12b8e0:	e3043e20 	movw	r3, #20000	; 0x4e20
  12b8e4:	e14b31b0 	strh	r3, [fp, #-16]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  12b8e8:	e15b31b0 	ldrh	r3, [fp, #-16]
  12b8ec:	e2833e1f 	add	r3, r3, #496	; 0x1f0
  12b8f0:	e2833003 	add	r3, r3, #3
  12b8f4:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  12b8f8:	e3412062 	movt	r2, #4194	; 0x1062
  12b8fc:	e0c10293 	smull	r0, r1, r3, r2
  12b900:	e1a022c1 	asr	r2, r1, #5
  12b904:	e1a03fc3 	asr	r3, r3, #31
  12b908:	e0423003 	sub	r3, r2, r3
  12b90c:	e6ff2073 	uxth	r2, r3
  12b910:	e51b300c 	ldr	r3, [fp, #-12]
  12b914:	e1c321b6 	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  12b918:	e15b30dd 	ldrsb	r3, [fp, #-13]
}
  12b91c:	e1a00003 	mov	r0, r3
  12b920:	e24bd004 	sub	sp, fp, #4
  12b924:	e8bd8800 	pop	{fp, pc}

0012b928 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
  12b928:	e92d4800 	push	{fp, lr}
  12b92c:	e28db004 	add	fp, sp, #4
  12b930:	e24dd020 	sub	sp, sp, #32
  12b934:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12b938:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b93c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12b940:	e50b300c 	str	r3, [fp, #-12]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
  12b944:	e3a01004 	mov	r1, #4
  12b948:	e51b000c 	ldr	r0, [fp, #-12]
  12b94c:	eb00018d 	bl	12bf88 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
  12b950:	e3a02003 	mov	r2, #3
  12b954:	e51b100c 	ldr	r1, [fp, #-12]
  12b958:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12b95c:	eb0005b9 	bl	12d048 <dhcp_create_msg>
  12b960:	e1a03000 	mov	r3, r0
  12b964:	e54b300d 	strb	r3, [fp, #-13]
  if (result == ERR_OK) {
  12b968:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12b96c:	e3530000 	cmp	r3, #0
  12b970:	1a000037 	bne	12ba54 <dhcp_rebind+0x12c>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  12b974:	e3a02002 	mov	r2, #2
  12b978:	e3a01039 	mov	r1, #57	; 0x39
  12b97c:	e51b000c 	ldr	r0, [fp, #-12]
  12b980:	eb000198 	bl	12bfe8 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
  12b984:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b988:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  12b98c:	e1a01003 	mov	r1, r3
  12b990:	e51b000c 	ldr	r0, [fp, #-12]
  12b994:	eb0001e2 	bl	12c124 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
  12b998:	e3a02004 	mov	r2, #4
  12b99c:	e3a01037 	mov	r1, #55	; 0x37
  12b9a0:	e51b000c 	ldr	r0, [fp, #-12]
  12b9a4:	eb00018f 	bl	12bfe8 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12b9a8:	e3a03000 	mov	r3, #0
  12b9ac:	e54b3005 	strb	r3, [fp, #-5]
  12b9b0:	ea000009 	b	12b9dc <dhcp_rebind+0xb4>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
  12b9b4:	e55b2005 	ldrb	r2, [fp, #-5]
  12b9b8:	e30d303c 	movw	r3, #53308	; 0xd03c
  12b9bc:	e3403014 	movt	r3, #20
  12b9c0:	e7d33002 	ldrb	r3, [r3, r2]
  12b9c4:	e1a01003 	mov	r1, r3
  12b9c8:	e51b000c 	ldr	r0, [fp, #-12]
  12b9cc:	eb0001b5 	bl	12c0a8 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12b9d0:	e55b3005 	ldrb	r3, [fp, #-5]
  12b9d4:	e2833001 	add	r3, r3, #1
  12b9d8:	e54b3005 	strb	r3, [fp, #-5]
  12b9dc:	e55b3005 	ldrb	r3, [fp, #-5]
  12b9e0:	e3530003 	cmp	r3, #3
  12b9e4:	9afffff2 	bls	12b9b4 <dhcp_rebind+0x8c>
    }

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
  12b9e8:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  12b9ec:	e51b000c 	ldr	r0, [fp, #-12]
  12b9f0:	eb000247 	bl	12c314 <dhcp_option_hostname>
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
  12b9f4:	e51b000c 	ldr	r0, [fp, #-12]
  12b9f8:	eb0006ff 	bl	12d5fc <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  12b9fc:	e51b300c 	ldr	r3, [fp, #-12]
  12ba00:	e593200c 	ldr	r2, [r3, #12]
  12ba04:	e51b300c 	ldr	r3, [fp, #-12]
  12ba08:	e1d331b4 	ldrh	r3, [r3, #20]
  12ba0c:	e28330f0 	add	r3, r3, #240	; 0xf0
  12ba10:	e6ff3073 	uxth	r3, r3
  12ba14:	e1a01003 	mov	r1, r3
  12ba18:	e1a00002 	mov	r0, r2
  12ba1c:	ebffbbda 	bl	11a98c <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
  12ba20:	e30e3ad8 	movw	r3, #60120	; 0xead8
  12ba24:	e3403014 	movt	r3, #20
  12ba28:	e5930000 	ldr	r0, [r3]
  12ba2c:	e51b300c 	ldr	r3, [fp, #-12]
  12ba30:	e593100c 	ldr	r1, [r3, #12]
  12ba34:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12ba38:	e58d3000 	str	r3, [sp]
  12ba3c:	e3a03043 	mov	r3, #67	; 0x43
  12ba40:	e309290c 	movw	r2, #39180	; 0x990c
  12ba44:	e3402014 	movt	r2, #20
  12ba48:	ebfff1f8 	bl	128230 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
  12ba4c:	e51b000c 	ldr	r0, [fp, #-12]
  12ba50:	eb0006b4 	bl	12d528 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
  12ba54:	e51b300c 	ldr	r3, [fp, #-12]
  12ba58:	e5d3300a 	ldrb	r3, [r3, #10]
  12ba5c:	e35300ff 	cmp	r3, #255	; 0xff
  12ba60:	0a000005 	beq	12ba7c <dhcp_rebind+0x154>
    dhcp->tries++;
  12ba64:	e51b300c 	ldr	r3, [fp, #-12]
  12ba68:	e5d3300a 	ldrb	r3, [r3, #10]
  12ba6c:	e2833001 	add	r3, r3, #1
  12ba70:	e6ef2073 	uxtb	r2, r3
  12ba74:	e51b300c 	ldr	r3, [fp, #-12]
  12ba78:	e5c3200a 	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
  12ba7c:	e51b300c 	ldr	r3, [fp, #-12]
  12ba80:	e5d3300a 	ldrb	r3, [r3, #10]
  12ba84:	e3530009 	cmp	r3, #9
  12ba88:	8a00000a 	bhi	12bab8 <dhcp_rebind+0x190>
  12ba8c:	e51b300c 	ldr	r3, [fp, #-12]
  12ba90:	e5d3300a 	ldrb	r3, [r3, #10]
  12ba94:	e6ff3073 	uxth	r3, r3
  12ba98:	e1a02003 	mov	r2, r3
  12ba9c:	e1a02282 	lsl	r2, r2, #5
  12baa0:	e0422003 	sub	r2, r2, r3
  12baa4:	e1a02102 	lsl	r2, r2, #2
  12baa8:	e0823003 	add	r3, r2, r3
  12baac:	e1a03183 	lsl	r3, r3, #3
  12bab0:	e6ff3073 	uxth	r3, r3
  12bab4:	ea000000 	b	12babc <dhcp_rebind+0x194>
  12bab8:	e3023710 	movw	r3, #10000	; 0x2710
  12babc:	e14b31b0 	strh	r3, [fp, #-16]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  12bac0:	e15b31b0 	ldrh	r3, [fp, #-16]
  12bac4:	e2833e1f 	add	r3, r3, #496	; 0x1f0
  12bac8:	e2833003 	add	r3, r3, #3
  12bacc:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  12bad0:	e3412062 	movt	r2, #4194	; 0x1062
  12bad4:	e0c10293 	smull	r0, r1, r3, r2
  12bad8:	e1a022c1 	asr	r2, r1, #5
  12badc:	e1a03fc3 	asr	r3, r3, #31
  12bae0:	e0423003 	sub	r3, r2, r3
  12bae4:	e6ff2073 	uxth	r2, r3
  12bae8:	e51b300c 	ldr	r3, [fp, #-12]
  12baec:	e1c321b6 	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  12baf0:	e15b30dd 	ldrsb	r3, [fp, #-13]
}
  12baf4:	e1a00003 	mov	r0, r3
  12baf8:	e24bd004 	sub	sp, fp, #4
  12bafc:	e8bd8800 	pop	{fp, pc}

0012bb00 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
  12bb00:	e92d4800 	push	{fp, lr}
  12bb04:	e28db004 	add	fp, sp, #4
  12bb08:	e24dd020 	sub	sp, sp, #32
  12bb0c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12bb10:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12bb14:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12bb18:	e50b300c 	str	r3, [fp, #-12]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
  12bb1c:	e3a01003 	mov	r1, #3
  12bb20:	e51b000c 	ldr	r0, [fp, #-12]
  12bb24:	eb000117 	bl	12bf88 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
  12bb28:	e3a02003 	mov	r2, #3
  12bb2c:	e51b100c 	ldr	r1, [fp, #-12]
  12bb30:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12bb34:	eb000543 	bl	12d048 <dhcp_create_msg>
  12bb38:	e1a03000 	mov	r3, r0
  12bb3c:	e54b300d 	strb	r3, [fp, #-13]
  if (result == ERR_OK) {
  12bb40:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12bb44:	e3530000 	cmp	r3, #0
  12bb48:	1a00003e 	bne	12bc48 <dhcp_reboot+0x148>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  12bb4c:	e3a02002 	mov	r2, #2
  12bb50:	e3a01039 	mov	r1, #57	; 0x39
  12bb54:	e51b000c 	ldr	r0, [fp, #-12]
  12bb58:	eb000122 	bl	12bfe8 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
  12bb5c:	e3a01d09 	mov	r1, #576	; 0x240
  12bb60:	e51b000c 	ldr	r0, [fp, #-12]
  12bb64:	eb00016e 	bl	12c124 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
  12bb68:	e3a02004 	mov	r2, #4
  12bb6c:	e3a01032 	mov	r1, #50	; 0x32
  12bb70:	e51b000c 	ldr	r0, [fp, #-12]
  12bb74:	eb00011b 	bl	12bfe8 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
  12bb78:	e51b300c 	ldr	r3, [fp, #-12]
  12bb7c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12bb80:	e1a00003 	mov	r0, r3
  12bb84:	ebffaa9e 	bl	116604 <lwip_htonl>
  12bb88:	e1a03000 	mov	r3, r0
  12bb8c:	e1a01003 	mov	r1, r3
  12bb90:	e51b000c 	ldr	r0, [fp, #-12]
  12bb94:	eb000193 	bl	12c1e8 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
  12bb98:	e3a02004 	mov	r2, #4
  12bb9c:	e3a01037 	mov	r1, #55	; 0x37
  12bba0:	e51b000c 	ldr	r0, [fp, #-12]
  12bba4:	eb00010f 	bl	12bfe8 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12bba8:	e3a03000 	mov	r3, #0
  12bbac:	e54b3005 	strb	r3, [fp, #-5]
  12bbb0:	ea000009 	b	12bbdc <dhcp_reboot+0xdc>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
  12bbb4:	e55b2005 	ldrb	r2, [fp, #-5]
  12bbb8:	e30d303c 	movw	r3, #53308	; 0xd03c
  12bbbc:	e3403014 	movt	r3, #20
  12bbc0:	e7d33002 	ldrb	r3, [r3, r2]
  12bbc4:	e1a01003 	mov	r1, r3
  12bbc8:	e51b000c 	ldr	r0, [fp, #-12]
  12bbcc:	eb000135 	bl	12c0a8 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12bbd0:	e55b3005 	ldrb	r3, [fp, #-5]
  12bbd4:	e2833001 	add	r3, r3, #1
  12bbd8:	e54b3005 	strb	r3, [fp, #-5]
  12bbdc:	e55b3005 	ldrb	r3, [fp, #-5]
  12bbe0:	e3530003 	cmp	r3, #3
  12bbe4:	9afffff2 	bls	12bbb4 <dhcp_reboot+0xb4>
    }

    dhcp_option_trailer(dhcp);
  12bbe8:	e51b000c 	ldr	r0, [fp, #-12]
  12bbec:	eb000682 	bl	12d5fc <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  12bbf0:	e51b300c 	ldr	r3, [fp, #-12]
  12bbf4:	e593200c 	ldr	r2, [r3, #12]
  12bbf8:	e51b300c 	ldr	r3, [fp, #-12]
  12bbfc:	e1d331b4 	ldrh	r3, [r3, #20]
  12bc00:	e28330f0 	add	r3, r3, #240	; 0xf0
  12bc04:	e6ff3073 	uxth	r3, r3
  12bc08:	e1a01003 	mov	r1, r3
  12bc0c:	e1a00002 	mov	r0, r2
  12bc10:	ebffbb5d 	bl	11a98c <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
  12bc14:	e30e3ad8 	movw	r3, #60120	; 0xead8
  12bc18:	e3403014 	movt	r3, #20
  12bc1c:	e5930000 	ldr	r0, [r3]
  12bc20:	e51b300c 	ldr	r3, [fp, #-12]
  12bc24:	e593100c 	ldr	r1, [r3, #12]
  12bc28:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12bc2c:	e58d3000 	str	r3, [sp]
  12bc30:	e3a03043 	mov	r3, #67	; 0x43
  12bc34:	e309290c 	movw	r2, #39180	; 0x990c
  12bc38:	e3402014 	movt	r2, #20
  12bc3c:	ebfff17b 	bl	128230 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
  12bc40:	e51b000c 	ldr	r0, [fp, #-12]
  12bc44:	eb000637 	bl	12d528 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
  12bc48:	e51b300c 	ldr	r3, [fp, #-12]
  12bc4c:	e5d3300a 	ldrb	r3, [r3, #10]
  12bc50:	e35300ff 	cmp	r3, #255	; 0xff
  12bc54:	0a000005 	beq	12bc70 <dhcp_reboot+0x170>
    dhcp->tries++;
  12bc58:	e51b300c 	ldr	r3, [fp, #-12]
  12bc5c:	e5d3300a 	ldrb	r3, [r3, #10]
  12bc60:	e2833001 	add	r3, r3, #1
  12bc64:	e6ef2073 	uxtb	r2, r3
  12bc68:	e51b300c 	ldr	r3, [fp, #-12]
  12bc6c:	e5c3200a 	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
  12bc70:	e51b300c 	ldr	r3, [fp, #-12]
  12bc74:	e5d3300a 	ldrb	r3, [r3, #10]
  12bc78:	e3530009 	cmp	r3, #9
  12bc7c:	8a00000a 	bhi	12bcac <dhcp_reboot+0x1ac>
  12bc80:	e51b300c 	ldr	r3, [fp, #-12]
  12bc84:	e5d3300a 	ldrb	r3, [r3, #10]
  12bc88:	e6ff3073 	uxth	r3, r3
  12bc8c:	e1a02003 	mov	r2, r3
  12bc90:	e1a02282 	lsl	r2, r2, #5
  12bc94:	e0422003 	sub	r2, r2, r3
  12bc98:	e1a02102 	lsl	r2, r2, #2
  12bc9c:	e0823003 	add	r3, r2, r3
  12bca0:	e1a03183 	lsl	r3, r3, #3
  12bca4:	e6ff3073 	uxth	r3, r3
  12bca8:	ea000000 	b	12bcb0 <dhcp_reboot+0x1b0>
  12bcac:	e3023710 	movw	r3, #10000	; 0x2710
  12bcb0:	e14b31b0 	strh	r3, [fp, #-16]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  12bcb4:	e15b31b0 	ldrh	r3, [fp, #-16]
  12bcb8:	e2833e1f 	add	r3, r3, #496	; 0x1f0
  12bcbc:	e2833003 	add	r3, r3, #3
  12bcc0:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  12bcc4:	e3412062 	movt	r2, #4194	; 0x1062
  12bcc8:	e0c10293 	smull	r0, r1, r3, r2
  12bccc:	e1a022c1 	asr	r2, r1, #5
  12bcd0:	e1a03fc3 	asr	r3, r3, #31
  12bcd4:	e0423003 	sub	r3, r2, r3
  12bcd8:	e6ff2073 	uxth	r2, r3
  12bcdc:	e51b300c 	ldr	r3, [fp, #-12]
  12bce0:	e1c321b6 	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  12bce4:	e15b30dd 	ldrsb	r3, [fp, #-13]
}
  12bce8:	e1a00003 	mov	r0, r3
  12bcec:	e24bd004 	sub	sp, fp, #4
  12bcf0:	e8bd8800 	pop	{fp, pc}

0012bcf4 <dhcp_release>:
 *
 * @param netif network interface which must release its lease
 */
err_t
dhcp_release(struct netif *netif)
{
  12bcf4:	e92d4800 	push	{fp, lr}
  12bcf8:	e28db004 	add	fp, sp, #4
  12bcfc:	e24dd020 	sub	sp, sp, #32
  12bd00:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12bd04:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12bd08:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12bd0c:	e50b3008 	str	r3, [fp, #-8]
  err_t result;
  ip_addr_t server_ip_addr;
  u8_t is_dhcp_supplied_address;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release()\n"));
  if (dhcp == NULL) {
  12bd10:	e51b3008 	ldr	r3, [fp, #-8]
  12bd14:	e3530000 	cmp	r3, #0
  12bd18:	1a000001 	bne	12bd24 <dhcp_release+0x30>
    return ERR_ARG;
  12bd1c:	e3e0300f 	mvn	r3, #15
  12bd20:	ea000068 	b	12bec8 <dhcp_release+0x1d4>
  }
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
  12bd24:	e51b3008 	ldr	r3, [fp, #-8]
  12bd28:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  12bd2c:	e50b3010 	str	r3, [fp, #-16]

  is_dhcp_supplied_address = dhcp_supplied_address(netif);
  12bd30:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12bd34:	eb00067b 	bl	12d728 <dhcp_supplied_address>
  12bd38:	e1a03000 	mov	r3, r0
  12bd3c:	e54b3009 	strb	r3, [fp, #-9]

  /* idle DHCP client */
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
  12bd40:	e3a01000 	mov	r1, #0
  12bd44:	e51b0008 	ldr	r0, [fp, #-8]
  12bd48:	eb00008e 	bl	12bf88 <dhcp_set_state>
  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
  12bd4c:	e51b3008 	ldr	r3, [fp, #-8]
  12bd50:	e3a02000 	mov	r2, #0
  12bd54:	e5832024 	str	r2, [r3, #36]	; 0x24
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
  12bd58:	e51b3008 	ldr	r3, [fp, #-8]
  12bd5c:	e3a02000 	mov	r2, #0
  12bd60:	e5832028 	str	r2, [r3, #40]	; 0x28
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
  12bd64:	e51b3008 	ldr	r3, [fp, #-8]
  12bd68:	e3a02000 	mov	r2, #0
  12bd6c:	e583202c 	str	r2, [r3, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
  12bd70:	e51b3008 	ldr	r3, [fp, #-8]
  12bd74:	e3a02000 	mov	r2, #0
  12bd78:	e5832030 	str	r2, [r3, #48]	; 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
  12bd7c:	e51b3008 	ldr	r3, [fp, #-8]
  12bd80:	e3a02000 	mov	r2, #0
  12bd84:	e583203c 	str	r2, [r3, #60]	; 0x3c
  12bd88:	e51b3008 	ldr	r3, [fp, #-8]
  12bd8c:	e593203c 	ldr	r2, [r3, #60]	; 0x3c
  12bd90:	e51b3008 	ldr	r3, [fp, #-8]
  12bd94:	e5832038 	str	r2, [r3, #56]	; 0x38
  12bd98:	e51b3008 	ldr	r3, [fp, #-8]
  12bd9c:	e5932038 	ldr	r2, [r3, #56]	; 0x38
  12bda0:	e51b3008 	ldr	r3, [fp, #-8]
  12bda4:	e5832034 	str	r2, [r3, #52]	; 0x34
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
  12bda8:	e51b3008 	ldr	r3, [fp, #-8]
  12bdac:	e3a02000 	mov	r2, #0
  12bdb0:	e1c322b2 	strh	r2, [r3, #34]	; 0x22
  12bdb4:	e51b3008 	ldr	r3, [fp, #-8]
  12bdb8:	e1d322b2 	ldrh	r2, [r3, #34]	; 0x22
  12bdbc:	e51b3008 	ldr	r3, [fp, #-8]
  12bdc0:	e1c322b0 	strh	r2, [r3, #32]
  12bdc4:	e51b3008 	ldr	r3, [fp, #-8]
  12bdc8:	e1d322b0 	ldrh	r2, [r3, #32]
  12bdcc:	e51b3008 	ldr	r3, [fp, #-8]
  12bdd0:	e1c321be 	strh	r2, [r3, #30]
  12bdd4:	e51b3008 	ldr	r3, [fp, #-8]
  12bdd8:	e1d321be 	ldrh	r2, [r3, #30]
  12bddc:	e51b3008 	ldr	r3, [fp, #-8]
  12bde0:	e1c321bc 	strh	r2, [r3, #28]

  if (!is_dhcp_supplied_address) {
  12bde4:	e55b3009 	ldrb	r3, [fp, #-9]
  12bde8:	e3530000 	cmp	r3, #0
  12bdec:	1a000001 	bne	12bdf8 <dhcp_release+0x104>
    /* don't issue release message when address is not dhcp-assigned */
    return ERR_OK;
  12bdf0:	e3a03000 	mov	r3, #0
  12bdf4:	ea000033 	b	12bec8 <dhcp_release+0x1d4>
  }

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
  12bdf8:	e3a02007 	mov	r2, #7
  12bdfc:	e51b1008 	ldr	r1, [fp, #-8]
  12be00:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12be04:	eb00048f 	bl	12d048 <dhcp_create_msg>
  12be08:	e1a03000 	mov	r3, r0
  12be0c:	e54b300a 	strb	r3, [fp, #-10]
  if (result == ERR_OK) {
  12be10:	e15b30da 	ldrsb	r3, [fp, #-10]
  12be14:	e3530000 	cmp	r3, #0
  12be18:	1a000021 	bne	12bea4 <dhcp_release+0x1b0>
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
  12be1c:	e3a02004 	mov	r2, #4
  12be20:	e3a01036 	mov	r1, #54	; 0x36
  12be24:	e51b0008 	ldr	r0, [fp, #-8]
  12be28:	eb00006e 	bl	12bfe8 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
  12be2c:	e51b3010 	ldr	r3, [fp, #-16]
  12be30:	e1a00003 	mov	r0, r3
  12be34:	ebffa9f2 	bl	116604 <lwip_htonl>
  12be38:	e1a03000 	mov	r3, r0
  12be3c:	e1a01003 	mov	r1, r3
  12be40:	e51b0008 	ldr	r0, [fp, #-8]
  12be44:	eb0000e7 	bl	12c1e8 <dhcp_option_long>

    dhcp_option_trailer(dhcp);
  12be48:	e51b0008 	ldr	r0, [fp, #-8]
  12be4c:	eb0005ea 	bl	12d5fc <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  12be50:	e51b3008 	ldr	r3, [fp, #-8]
  12be54:	e593200c 	ldr	r2, [r3, #12]
  12be58:	e51b3008 	ldr	r3, [fp, #-8]
  12be5c:	e1d331b4 	ldrh	r3, [r3, #20]
  12be60:	e28330f0 	add	r3, r3, #240	; 0xf0
  12be64:	e6ff3073 	uxth	r3, r3
  12be68:	e1a01003 	mov	r1, r3
  12be6c:	e1a00002 	mov	r0, r2
  12be70:	ebffbac5 	bl	11a98c <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &server_ip_addr, DHCP_SERVER_PORT, netif);
  12be74:	e30e3ad8 	movw	r3, #60120	; 0xead8
  12be78:	e3403014 	movt	r3, #20
  12be7c:	e5930000 	ldr	r0, [r3]
  12be80:	e51b3008 	ldr	r3, [fp, #-8]
  12be84:	e593100c 	ldr	r1, [r3, #12]
  12be88:	e24b2010 	sub	r2, fp, #16
  12be8c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12be90:	e58d3000 	str	r3, [sp]
  12be94:	e3a03043 	mov	r3, #67	; 0x43
  12be98:	ebfff0e4 	bl	128230 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
  12be9c:	e51b0008 	ldr	r0, [fp, #-8]
  12bea0:	eb0005a0 	bl	12d528 <dhcp_delete_msg>
  } else {
    /* sending release failed, but that's not a problem since the correct behaviour of dhcp does not rely on release */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
  }
  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
  12bea4:	e3093908 	movw	r3, #39176	; 0x9908
  12bea8:	e3403014 	movt	r3, #20
  12beac:	e3092908 	movw	r2, #39176	; 0x9908
  12beb0:	e3402014 	movt	r2, #20
  12beb4:	e3091908 	movw	r1, #39176	; 0x9908
  12beb8:	e3401014 	movt	r1, #20
  12bebc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12bec0:	ebffb58c 	bl	1194f8 <netif_set_addr>

  return result;
  12bec4:	e15b30da 	ldrsb	r3, [fp, #-10]
}
  12bec8:	e1a00003 	mov	r0, r3
  12becc:	e24bd004 	sub	sp, fp, #4
  12bed0:	e8bd8800 	pop	{fp, pc}

0012bed4 <dhcp_stop>:
 *
 * @param netif The network interface to stop DHCP on
 */
void
dhcp_stop(struct netif *netif)
{
  12bed4:	e92d4800 	push	{fp, lr}
  12bed8:	e28db004 	add	fp, sp, #4
  12bedc:	e24dd010 	sub	sp, sp, #16
  12bee0:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp;
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
  12bee4:	e51b3010 	ldr	r3, [fp, #-16]
  12bee8:	e3530000 	cmp	r3, #0
  12beec:	1a000007 	bne	12bf10 <dhcp_stop+0x3c>
  12bef0:	e3080e90 	movw	r0, #36496	; 0x8e90
  12bef4:	e3400014 	movt	r0, #20
  12bef8:	ebff5c85 	bl	103114 <rt_kprintf>
  12befc:	e3001543 	movw	r1, #1347	; 0x543
  12bf00:	e3080d70 	movw	r0, #36208	; 0x8d70
  12bf04:	e3400014 	movt	r0, #20
  12bf08:	ebff7c78 	bl	10b0f0 <sys_arch_assert>
  12bf0c:	ea00001b 	b	12bf80 <dhcp_stop+0xac>
  dhcp = netif_dhcp_data(netif);
  12bf10:	e51b3010 	ldr	r3, [fp, #-16]
  12bf14:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12bf18:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_stop()\n"));
  /* netif is DHCP configured? */
  if (dhcp != NULL) {
  12bf1c:	e51b3008 	ldr	r3, [fp, #-8]
  12bf20:	e3530000 	cmp	r3, #0
  12bf24:	0a000015 	beq	12bf80 <dhcp_stop+0xac>
      autoip_stop(netif);
      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */

    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
  12bf28:	e51b3008 	ldr	r3, [fp, #-8]
  12bf2c:	e5933004 	ldr	r3, [r3, #4]
  12bf30:	e3530000 	cmp	r3, #0
  12bf34:	0a000006 	beq	12bf54 <dhcp_stop+0x80>
  12bf38:	e3080e48 	movw	r0, #36424	; 0x8e48
  12bf3c:	e3400014 	movt	r0, #20
  12bf40:	ebff5c73 	bl	103114 <rt_kprintf>
  12bf44:	e3a01e55 	mov	r1, #1360	; 0x550
  12bf48:	e3080d70 	movw	r0, #36208	; 0x8d70
  12bf4c:	e3400014 	movt	r0, #20
  12bf50:	ebff7c66 	bl	10b0f0 <sys_arch_assert>
    dhcp_set_state(dhcp, DHCP_STATE_OFF);
  12bf54:	e3a01000 	mov	r1, #0
  12bf58:	e51b0008 	ldr	r0, [fp, #-8]
  12bf5c:	eb000009 	bl	12bf88 <dhcp_set_state>

    if (dhcp->pcb_allocated != 0) {
  12bf60:	e51b3008 	ldr	r3, [fp, #-8]
  12bf64:	e5d33008 	ldrb	r3, [r3, #8]
  12bf68:	e3530000 	cmp	r3, #0
  12bf6c:	0a000003 	beq	12bf80 <dhcp_stop+0xac>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
  12bf70:	ebfff868 	bl	12a118 <dhcp_dec_pcb_refcount>
      dhcp->pcb_allocated = 0;
  12bf74:	e51b3008 	ldr	r3, [fp, #-8]
  12bf78:	e3a02000 	mov	r2, #0
  12bf7c:	e5c32008 	strb	r2, [r3, #8]
    }
  }
}
  12bf80:	e24bd004 	sub	sp, fp, #4
  12bf84:	e8bd8800 	pop	{fp, pc}

0012bf88 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
  12bf88:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  12bf8c:	e28db000 	add	fp, sp, #0
  12bf90:	e24dd00c 	sub	sp, sp, #12
  12bf94:	e50b0008 	str	r0, [fp, #-8]
  12bf98:	e1a03001 	mov	r3, r1
  12bf9c:	e54b3009 	strb	r3, [fp, #-9]
  if (new_state != dhcp->state) {
  12bfa0:	e51b3008 	ldr	r3, [fp, #-8]
  12bfa4:	e5d33009 	ldrb	r3, [r3, #9]
  12bfa8:	e55b2009 	ldrb	r2, [fp, #-9]
  12bfac:	e1520003 	cmp	r2, r3
  12bfb0:	0a000008 	beq	12bfd8 <dhcp_set_state+0x50>
    dhcp->state = new_state;
  12bfb4:	e51b3008 	ldr	r3, [fp, #-8]
  12bfb8:	e55b2009 	ldrb	r2, [fp, #-9]
  12bfbc:	e5c32009 	strb	r2, [r3, #9]
    dhcp->tries = 0;
  12bfc0:	e51b3008 	ldr	r3, [fp, #-8]
  12bfc4:	e3a02000 	mov	r2, #0
  12bfc8:	e5c3200a 	strb	r2, [r3, #10]
    dhcp->request_timeout = 0;
  12bfcc:	e51b3008 	ldr	r3, [fp, #-8]
  12bfd0:	e3a02000 	mov	r2, #0
  12bfd4:	e1c321b6 	strh	r2, [r3, #22]
  }
}
  12bfd8:	e320f000 	nop	{0}
  12bfdc:	e28bd000 	add	sp, fp, #0
  12bfe0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  12bfe4:	e12fff1e 	bx	lr

0012bfe8 <dhcp_option>:
 * DHCP message.
 *
 */
static void
dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
{
  12bfe8:	e92d4800 	push	{fp, lr}
  12bfec:	e28db004 	add	fp, sp, #4
  12bff0:	e24dd008 	sub	sp, sp, #8
  12bff4:	e50b0008 	str	r0, [fp, #-8]
  12bff8:	e1a03001 	mov	r3, r1
  12bffc:	e54b3009 	strb	r3, [fp, #-9]
  12c000:	e1a03002 	mov	r3, r2
  12c004:	e54b300a 	strb	r3, [fp, #-10]
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
  12c008:	e51b3008 	ldr	r3, [fp, #-8]
  12c00c:	e1d331b4 	ldrh	r3, [r3, #20]
  12c010:	e1a02003 	mov	r2, r3
  12c014:	e55b300a 	ldrb	r3, [fp, #-10]
  12c018:	e0823003 	add	r3, r2, r3
  12c01c:	e2833002 	add	r3, r3, #2
  12c020:	e3530044 	cmp	r3, #68	; 0x44
  12c024:	9a000006 	bls	12c044 <dhcp_option+0x5c>
  12c028:	e3080eac 	movw	r0, #36524	; 0x8eac
  12c02c:	e3400014 	movt	r0, #20
  12c030:	ebff5c37 	bl	103114 <rt_kprintf>
  12c034:	e3001571 	movw	r1, #1393	; 0x571
  12c038:	e3080d70 	movw	r0, #36208	; 0x8d70
  12c03c:	e3400014 	movt	r0, #20
  12c040:	ebff7c2a 	bl	10b0f0 <sys_arch_assert>
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
  12c044:	e51b3008 	ldr	r3, [fp, #-8]
  12c048:	e5932010 	ldr	r2, [r3, #16]
  12c04c:	e51b3008 	ldr	r3, [fp, #-8]
  12c050:	e1d331b4 	ldrh	r3, [r3, #20]
  12c054:	e2831001 	add	r1, r3, #1
  12c058:	e6ff0071 	uxth	r0, r1
  12c05c:	e51b1008 	ldr	r1, [fp, #-8]
  12c060:	e1c101b4 	strh	r0, [r1, #20]
  12c064:	e0823003 	add	r3, r2, r3
  12c068:	e55b2009 	ldrb	r2, [fp, #-9]
  12c06c:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
  12c070:	e51b3008 	ldr	r3, [fp, #-8]
  12c074:	e5932010 	ldr	r2, [r3, #16]
  12c078:	e51b3008 	ldr	r3, [fp, #-8]
  12c07c:	e1d331b4 	ldrh	r3, [r3, #20]
  12c080:	e2831001 	add	r1, r3, #1
  12c084:	e6ff0071 	uxth	r0, r1
  12c088:	e51b1008 	ldr	r1, [fp, #-8]
  12c08c:	e1c101b4 	strh	r0, [r1, #20]
  12c090:	e0823003 	add	r3, r2, r3
  12c094:	e55b200a 	ldrb	r2, [fp, #-10]
  12c098:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
}
  12c09c:	e320f000 	nop	{0}
  12c0a0:	e24bd004 	sub	sp, fp, #4
  12c0a4:	e8bd8800 	pop	{fp, pc}

0012c0a8 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
  12c0a8:	e92d4800 	push	{fp, lr}
  12c0ac:	e28db004 	add	fp, sp, #4
  12c0b0:	e24dd008 	sub	sp, sp, #8
  12c0b4:	e50b0008 	str	r0, [fp, #-8]
  12c0b8:	e1a03001 	mov	r3, r1
  12c0bc:	e54b3009 	strb	r3, [fp, #-9]
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  12c0c0:	e51b3008 	ldr	r3, [fp, #-8]
  12c0c4:	e1d331b4 	ldrh	r3, [r3, #20]
  12c0c8:	e3530043 	cmp	r3, #67	; 0x43
  12c0cc:	9a000006 	bls	12c0ec <dhcp_option_byte+0x44>
  12c0d0:	e3080ef4 	movw	r0, #36596	; 0x8ef4
  12c0d4:	e3400014 	movt	r0, #20
  12c0d8:	ebff5c0d 	bl	103114 <rt_kprintf>
  12c0dc:	e300157c 	movw	r1, #1404	; 0x57c
  12c0e0:	e3080d70 	movw	r0, #36208	; 0x8d70
  12c0e4:	e3400014 	movt	r0, #20
  12c0e8:	ebff7c00 	bl	10b0f0 <sys_arch_assert>
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
  12c0ec:	e51b3008 	ldr	r3, [fp, #-8]
  12c0f0:	e5932010 	ldr	r2, [r3, #16]
  12c0f4:	e51b3008 	ldr	r3, [fp, #-8]
  12c0f8:	e1d331b4 	ldrh	r3, [r3, #20]
  12c0fc:	e2831001 	add	r1, r3, #1
  12c100:	e6ff0071 	uxth	r0, r1
  12c104:	e51b1008 	ldr	r1, [fp, #-8]
  12c108:	e1c101b4 	strh	r0, [r1, #20]
  12c10c:	e0823003 	add	r3, r2, r3
  12c110:	e55b2009 	ldrb	r2, [fp, #-9]
  12c114:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
}
  12c118:	e320f000 	nop	{0}
  12c11c:	e24bd004 	sub	sp, fp, #4
  12c120:	e8bd8800 	pop	{fp, pc}

0012c124 <dhcp_option_short>:

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
  12c124:	e92d4800 	push	{fp, lr}
  12c128:	e28db004 	add	fp, sp, #4
  12c12c:	e24dd008 	sub	sp, sp, #8
  12c130:	e50b0008 	str	r0, [fp, #-8]
  12c134:	e1a03001 	mov	r3, r1
  12c138:	e14b30ba 	strh	r3, [fp, #-10]
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
  12c13c:	e51b3008 	ldr	r3, [fp, #-8]
  12c140:	e1d331b4 	ldrh	r3, [r3, #20]
  12c144:	e2833002 	add	r3, r3, #2
  12c148:	e3530044 	cmp	r3, #68	; 0x44
  12c14c:	9a000006 	bls	12c16c <dhcp_option_short+0x48>
  12c150:	e3080f30 	movw	r0, #36656	; 0x8f30
  12c154:	e3400014 	movt	r0, #20
  12c158:	ebff5bed 	bl	103114 <rt_kprintf>
  12c15c:	e3001583 	movw	r1, #1411	; 0x583
  12c160:	e3080d70 	movw	r0, #36208	; 0x8d70
  12c164:	e3400014 	movt	r0, #20
  12c168:	ebff7be0 	bl	10b0f0 <sys_arch_assert>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
  12c16c:	e15b30ba 	ldrh	r3, [fp, #-10]
  12c170:	e1a03423 	lsr	r3, r3, #8
  12c174:	e6ffc073 	uxth	ip, r3
  12c178:	e51b3008 	ldr	r3, [fp, #-8]
  12c17c:	e5932010 	ldr	r2, [r3, #16]
  12c180:	e51b3008 	ldr	r3, [fp, #-8]
  12c184:	e1d331b4 	ldrh	r3, [r3, #20]
  12c188:	e2831001 	add	r1, r3, #1
  12c18c:	e6ff0071 	uxth	r0, r1
  12c190:	e51b1008 	ldr	r1, [fp, #-8]
  12c194:	e1c101b4 	strh	r0, [r1, #20]
  12c198:	e6ef107c 	uxtb	r1, ip
  12c19c:	e0823003 	add	r3, r2, r3
  12c1a0:	e1a02001 	mov	r2, r1
  12c1a4:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
  12c1a8:	e51b3008 	ldr	r3, [fp, #-8]
  12c1ac:	e5932010 	ldr	r2, [r3, #16]
  12c1b0:	e51b3008 	ldr	r3, [fp, #-8]
  12c1b4:	e1d331b4 	ldrh	r3, [r3, #20]
  12c1b8:	e2831001 	add	r1, r3, #1
  12c1bc:	e6ff0071 	uxth	r0, r1
  12c1c0:	e51b1008 	ldr	r1, [fp, #-8]
  12c1c4:	e1c101b4 	strh	r0, [r1, #20]
  12c1c8:	e15b10ba 	ldrh	r1, [fp, #-10]
  12c1cc:	e6ef1071 	uxtb	r1, r1
  12c1d0:	e0823003 	add	r3, r2, r3
  12c1d4:	e1a02001 	mov	r2, r1
  12c1d8:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
}
  12c1dc:	e320f000 	nop	{0}
  12c1e0:	e24bd004 	sub	sp, fp, #4
  12c1e4:	e8bd8800 	pop	{fp, pc}

0012c1e8 <dhcp_option_long>:

static void
dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
  12c1e8:	e92d4800 	push	{fp, lr}
  12c1ec:	e28db004 	add	fp, sp, #4
  12c1f0:	e24dd008 	sub	sp, sp, #8
  12c1f4:	e50b0008 	str	r0, [fp, #-8]
  12c1f8:	e50b100c 	str	r1, [fp, #-12]
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
  12c1fc:	e51b3008 	ldr	r3, [fp, #-8]
  12c200:	e1d331b4 	ldrh	r3, [r3, #20]
  12c204:	e2833004 	add	r3, r3, #4
  12c208:	e3530044 	cmp	r3, #68	; 0x44
  12c20c:	9a000006 	bls	12c22c <dhcp_option_long+0x44>
  12c210:	e3080f74 	movw	r0, #36724	; 0x8f74
  12c214:	e3400014 	movt	r0, #20
  12c218:	ebff5bbd 	bl	103114 <rt_kprintf>
  12c21c:	e300158b 	movw	r1, #1419	; 0x58b
  12c220:	e3080d70 	movw	r0, #36208	; 0x8d70
  12c224:	e3400014 	movt	r0, #20
  12c228:	ebff7bb0 	bl	10b0f0 <sys_arch_assert>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
  12c22c:	e51b300c 	ldr	r3, [fp, #-12]
  12c230:	e1a0cc23 	lsr	ip, r3, #24
  12c234:	e51b3008 	ldr	r3, [fp, #-8]
  12c238:	e5932010 	ldr	r2, [r3, #16]
  12c23c:	e51b3008 	ldr	r3, [fp, #-8]
  12c240:	e1d331b4 	ldrh	r3, [r3, #20]
  12c244:	e2831001 	add	r1, r3, #1
  12c248:	e6ff0071 	uxth	r0, r1
  12c24c:	e51b1008 	ldr	r1, [fp, #-8]
  12c250:	e1c101b4 	strh	r0, [r1, #20]
  12c254:	e6ef107c 	uxtb	r1, ip
  12c258:	e0823003 	add	r3, r2, r3
  12c25c:	e1a02001 	mov	r2, r1
  12c260:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
  12c264:	e51b300c 	ldr	r3, [fp, #-12]
  12c268:	e1a0c823 	lsr	ip, r3, #16
  12c26c:	e51b3008 	ldr	r3, [fp, #-8]
  12c270:	e5932010 	ldr	r2, [r3, #16]
  12c274:	e51b3008 	ldr	r3, [fp, #-8]
  12c278:	e1d331b4 	ldrh	r3, [r3, #20]
  12c27c:	e2831001 	add	r1, r3, #1
  12c280:	e6ff0071 	uxth	r0, r1
  12c284:	e51b1008 	ldr	r1, [fp, #-8]
  12c288:	e1c101b4 	strh	r0, [r1, #20]
  12c28c:	e6ef107c 	uxtb	r1, ip
  12c290:	e0823003 	add	r3, r2, r3
  12c294:	e1a02001 	mov	r2, r1
  12c298:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
  12c29c:	e51b300c 	ldr	r3, [fp, #-12]
  12c2a0:	e1a0c423 	lsr	ip, r3, #8
  12c2a4:	e51b3008 	ldr	r3, [fp, #-8]
  12c2a8:	e5932010 	ldr	r2, [r3, #16]
  12c2ac:	e51b3008 	ldr	r3, [fp, #-8]
  12c2b0:	e1d331b4 	ldrh	r3, [r3, #20]
  12c2b4:	e2831001 	add	r1, r3, #1
  12c2b8:	e6ff0071 	uxth	r0, r1
  12c2bc:	e51b1008 	ldr	r1, [fp, #-8]
  12c2c0:	e1c101b4 	strh	r0, [r1, #20]
  12c2c4:	e6ef107c 	uxtb	r1, ip
  12c2c8:	e0823003 	add	r3, r2, r3
  12c2cc:	e1a02001 	mov	r2, r1
  12c2d0:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
  12c2d4:	e51b3008 	ldr	r3, [fp, #-8]
  12c2d8:	e5932010 	ldr	r2, [r3, #16]
  12c2dc:	e51b3008 	ldr	r3, [fp, #-8]
  12c2e0:	e1d331b4 	ldrh	r3, [r3, #20]
  12c2e4:	e2831001 	add	r1, r3, #1
  12c2e8:	e6ff0071 	uxth	r0, r1
  12c2ec:	e51b1008 	ldr	r1, [fp, #-8]
  12c2f0:	e1c101b4 	strh	r0, [r1, #20]
  12c2f4:	e51b100c 	ldr	r1, [fp, #-12]
  12c2f8:	e6ef1071 	uxtb	r1, r1
  12c2fc:	e0823003 	add	r3, r2, r3
  12c300:	e1a02001 	mov	r2, r1
  12c304:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
}
  12c308:	e320f000 	nop	{0}
  12c30c:	e24bd004 	sub	sp, fp, #4
  12c310:	e8bd8800 	pop	{fp, pc}

0012c314 <dhcp_option_hostname>:

#if LWIP_NETIF_HOSTNAME
static void
dhcp_option_hostname(struct dhcp *dhcp, struct netif *netif)
{
  12c314:	e92d4800 	push	{fp, lr}
  12c318:	e28db004 	add	fp, sp, #4
  12c31c:	e24dd018 	sub	sp, sp, #24
  12c320:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12c324:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  if (netif->hostname != NULL) {
  12c328:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12c32c:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  12c330:	e3530000 	cmp	r3, #0
  12c334:	0a00003c 	beq	12c42c <dhcp_option_hostname+0x118>
    size_t namelen = strlen(netif->hostname);
  12c338:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12c33c:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  12c340:	e1a00003 	mov	r0, r3
  12c344:	eb00545b 	bl	1414b8 <strlen>
  12c348:	e50b0010 	str	r0, [fp, #-16]
    if (namelen > 0) {
  12c34c:	e51b3010 	ldr	r3, [fp, #-16]
  12c350:	e3530000 	cmp	r3, #0
  12c354:	0a000034 	beq	12c42c <dhcp_option_hostname+0x118>
      size_t len;
      const char *p = netif->hostname;
  12c358:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12c35c:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  12c360:	e50b300c 	str	r3, [fp, #-12]
      /* Shrink len to available bytes (need 2 bytes for OPTION_HOSTNAME
         and 1 byte for trailer) */
      size_t available = DHCP_OPTIONS_LEN - dhcp->options_out_len - 3;
  12c364:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12c368:	e1d331b4 	ldrh	r3, [r3, #20]
  12c36c:	e2633041 	rsb	r3, r3, #65	; 0x41
  12c370:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      LWIP_ASSERT("DHCP: hostname is too long!", namelen <= available);
  12c374:	e51b2010 	ldr	r2, [fp, #-16]
  12c378:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c37c:	e1520003 	cmp	r2, r3
  12c380:	9a000006 	bls	12c3a0 <dhcp_option_hostname+0x8c>
  12c384:	e3080fb4 	movw	r0, #36788	; 0x8fb4
  12c388:	e3400014 	movt	r0, #20
  12c38c:	ebff5b60 	bl	103114 <rt_kprintf>
  12c390:	e300159e 	movw	r1, #1438	; 0x59e
  12c394:	e3080d70 	movw	r0, #36208	; 0x8d70
  12c398:	e3400014 	movt	r0, #20
  12c39c:	ebff7b53 	bl	10b0f0 <sys_arch_assert>
      len = LWIP_MIN(namelen, available);
  12c3a0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  12c3a4:	e51b3010 	ldr	r3, [fp, #-16]
  12c3a8:	e1520003 	cmp	r2, r3
  12c3ac:	31a03002 	movcc	r3, r2
  12c3b0:	21a03003 	movcs	r3, r3
  12c3b4:	e50b3008 	str	r3, [fp, #-8]
      LWIP_ASSERT("DHCP: hostname is too long!", len <= 0xFF);
  12c3b8:	e51b3008 	ldr	r3, [fp, #-8]
  12c3bc:	e35300ff 	cmp	r3, #255	; 0xff
  12c3c0:	9a000006 	bls	12c3e0 <dhcp_option_hostname+0xcc>
  12c3c4:	e3080fb4 	movw	r0, #36788	; 0x8fb4
  12c3c8:	e3400014 	movt	r0, #20
  12c3cc:	ebff5b50 	bl	103114 <rt_kprintf>
  12c3d0:	e3a01e5a 	mov	r1, #1440	; 0x5a0
  12c3d4:	e3080d70 	movw	r0, #36208	; 0x8d70
  12c3d8:	e3400014 	movt	r0, #20
  12c3dc:	ebff7b43 	bl	10b0f0 <sys_arch_assert>
      dhcp_option(dhcp, DHCP_OPTION_HOSTNAME, (u8_t)len);
  12c3e0:	e51b3008 	ldr	r3, [fp, #-8]
  12c3e4:	e6ef3073 	uxtb	r3, r3
  12c3e8:	e1a02003 	mov	r2, r3
  12c3ec:	e3a0100c 	mov	r1, #12
  12c3f0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12c3f4:	ebfffefb 	bl	12bfe8 <dhcp_option>
      while (len--) {
  12c3f8:	ea000006 	b	12c418 <dhcp_option_hostname+0x104>
        dhcp_option_byte(dhcp, *p++);
  12c3fc:	e51b300c 	ldr	r3, [fp, #-12]
  12c400:	e2832001 	add	r2, r3, #1
  12c404:	e50b200c 	str	r2, [fp, #-12]
  12c408:	e5d33000 	ldrb	r3, [r3]
  12c40c:	e1a01003 	mov	r1, r3
  12c410:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12c414:	ebffff23 	bl	12c0a8 <dhcp_option_byte>
      while (len--) {
  12c418:	e51b3008 	ldr	r3, [fp, #-8]
  12c41c:	e2432001 	sub	r2, r3, #1
  12c420:	e50b2008 	str	r2, [fp, #-8]
  12c424:	e3530000 	cmp	r3, #0
  12c428:	1afffff3 	bne	12c3fc <dhcp_option_hostname+0xe8>
      }
    }
  }
}
  12c42c:	e320f000 	nop	{0}
  12c430:	e24bd004 	sub	sp, fp, #4
  12c434:	e8bd8800 	pop	{fp, pc}

0012c438 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct dhcp *dhcp, struct pbuf *p)
{
  12c438:	e92d4800 	push	{fp, lr}
  12c43c:	e28db004 	add	fp, sp, #4
  12c440:	e24dd038 	sub	sp, sp, #56	; 0x38
  12c444:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
  12c448:	e50b103c 	str	r1, [fp, #-60]	; 0xffffffc4
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
  12c44c:	e3a03000 	mov	r3, #0
  12c450:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  int parse_sname_as_options = 0;
  12c454:	e3a03000 	mov	r3, #0
  12c458:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

  /* clear received options */
  dhcp_clear_all_options(dhcp);
  12c45c:	e3a0200a 	mov	r2, #10
  12c460:	e3a01000 	mov	r1, #0
  12c464:	e30c0c3c 	movw	r0, #52284	; 0xcc3c
  12c468:	e3400015 	movt	r0, #21
  12c46c:	eb005380 	bl	141274 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
  12c470:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  12c474:	e1d330ba 	ldrh	r3, [r3, #10]
  12c478:	e353002b 	cmp	r3, #43	; 0x2b
  12c47c:	8a000001 	bhi	12c488 <dhcp_parse_reply+0x50>
    return ERR_BUF;
  12c480:	e3e03001 	mvn	r3, #1
  12c484:	ea00022e 	b	12cd44 <dhcp_parse_reply+0x90c>
  }
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
  12c488:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  12c48c:	e5932004 	ldr	r2, [r3, #4]
  12c490:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12c494:	e5832004 	str	r2, [r3, #4]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
  12c498:	e3a030f0 	mov	r3, #240	; 0xf0
  12c49c:	e14b30be 	strh	r3, [fp, #-14]
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
  12c4a0:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  12c4a4:	e1d330b8 	ldrh	r3, [r3, #8]
  12c4a8:	e14b31b0 	strh	r3, [fp, #-16]
again:
  q = p;
  12c4ac:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  12c4b0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  while ((q != NULL) && (options_idx >= q->len)) {
  12c4b4:	ea00000c 	b	12c4ec <dhcp_parse_reply+0xb4>
    options_idx -= q->len;
  12c4b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c4bc:	e1d330ba 	ldrh	r3, [r3, #10]
  12c4c0:	e15b20be 	ldrh	r2, [fp, #-14]
  12c4c4:	e0423003 	sub	r3, r2, r3
  12c4c8:	e14b30be 	strh	r3, [fp, #-14]
    options_idx_max -= q->len;
  12c4cc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c4d0:	e1d330ba 	ldrh	r3, [r3, #10]
  12c4d4:	e15b21b0 	ldrh	r2, [fp, #-16]
  12c4d8:	e0423003 	sub	r3, r2, r3
  12c4dc:	e14b31b0 	strh	r3, [fp, #-16]
    q = q->next;
  12c4e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c4e4:	e5933000 	ldr	r3, [r3]
  12c4e8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  while ((q != NULL) && (options_idx >= q->len)) {
  12c4ec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c4f0:	e3530000 	cmp	r3, #0
  12c4f4:	0a000004 	beq	12c50c <dhcp_parse_reply+0xd4>
  12c4f8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c4fc:	e1d330ba 	ldrh	r3, [r3, #10]
  12c500:	e15b20be 	ldrh	r2, [fp, #-14]
  12c504:	e1520003 	cmp	r2, r3
  12c508:	2affffea 	bcs	12c4b8 <dhcp_parse_reply+0x80>
  }
  if (q == NULL) {
  12c50c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c510:	e3530000 	cmp	r3, #0
  12c514:	1a000001 	bne	12c520 <dhcp_parse_reply+0xe8>
    return ERR_BUF;
  12c518:	e3e03001 	mvn	r3, #1
  12c51c:	ea000208 	b	12cd44 <dhcp_parse_reply+0x90c>
  }
  offset = options_idx;
  12c520:	e15b30be 	ldrh	r3, [fp, #-14]
  12c524:	e14b30ba 	strh	r3, [fp, #-10]
  offset_max = options_idx_max;
  12c528:	e15b31b0 	ldrh	r3, [fp, #-16]
  12c52c:	e14b30bc 	strh	r3, [fp, #-12]
  options = (u8_t*)q->payload;
  12c530:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c534:	e5933004 	ldr	r3, [r3, #4]
  12c538:	e50b3008 	str	r3, [fp, #-8]
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (options[offset] != DHCP_OPTION_END) && (offset < offset_max)) {
  12c53c:	ea0001be 	b	12cc3c <dhcp_parse_reply+0x804>
    u8_t op = options[offset];
  12c540:	e15b30ba 	ldrh	r3, [fp, #-10]
  12c544:	e51b2008 	ldr	r2, [fp, #-8]
  12c548:	e0823003 	add	r3, r2, r3
  12c54c:	e5d33000 	ldrb	r3, [r3]
  12c550:	e54b3027 	strb	r3, [fp, #-39]	; 0xffffffd9
    u8_t len;
    u8_t decode_len = 0;
  12c554:	e3a03000 	mov	r3, #0
  12c558:	e54b301e 	strb	r3, [fp, #-30]	; 0xffffffe2
    int decode_idx = -1;
  12c55c:	e3e03000 	mvn	r3, #0
  12c560:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    u16_t val_offset = offset + 2;
  12c564:	e15b30ba 	ldrh	r3, [fp, #-10]
  12c568:	e2833002 	add	r3, r3, #2
  12c56c:	e14b32b6 	strh	r3, [fp, #-38]	; 0xffffffda
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
  12c570:	e15b30ba 	ldrh	r3, [fp, #-10]
  12c574:	e2833001 	add	r3, r3, #1
  12c578:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  12c57c:	e1d220ba 	ldrh	r2, [r2, #10]
  12c580:	e1530002 	cmp	r3, r2
  12c584:	aa000006 	bge	12c5a4 <dhcp_parse_reply+0x16c>
      len = options[offset + 1];
  12c588:	e15b30ba 	ldrh	r3, [fp, #-10]
  12c58c:	e2833001 	add	r3, r3, #1
  12c590:	e51b2008 	ldr	r2, [fp, #-8]
  12c594:	e0823003 	add	r3, r2, r3
  12c598:	e5d33000 	ldrb	r3, [r3]
  12c59c:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  12c5a0:	ea00000a 	b	12c5d0 <dhcp_parse_reply+0x198>
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
  12c5a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c5a8:	e5933000 	ldr	r3, [r3]
  12c5ac:	e3530000 	cmp	r3, #0
  12c5b0:	0a000004 	beq	12c5c8 <dhcp_parse_reply+0x190>
  12c5b4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c5b8:	e5933000 	ldr	r3, [r3]
  12c5bc:	e5933004 	ldr	r3, [r3, #4]
  12c5c0:	e5d33000 	ldrb	r3, [r3]
  12c5c4:	ea000000 	b	12c5cc <dhcp_parse_reply+0x194>
  12c5c8:	e3a03000 	mov	r3, #0
  12c5cc:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
  12c5d0:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c5d4:	e54b301e 	strb	r3, [fp, #-30]	; 0xffffffe2
    switch(op) {
  12c5d8:	e55b3027 	ldrb	r3, [fp, #-39]	; 0xffffffd9
  12c5dc:	e353003b 	cmp	r3, #59	; 0x3b
  12c5e0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  12c5e4:	ea0000ed 	b	12c9a0 <dhcp_parse_reply+0x568>
  12c5e8:	0012c6d8 	.word	0x0012c6d8
  12c5ec:	0012c6f8 	.word	0x0012c6f8
  12c5f0:	0012c9a0 	.word	0x0012c9a0
  12c5f4:	0012c734 	.word	0x0012c734
  12c5f8:	0012c9a0 	.word	0x0012c9a0
  12c5fc:	0012c9a0 	.word	0x0012c9a0
  12c600:	0012c77c 	.word	0x0012c77c
  12c604:	0012c9a0 	.word	0x0012c9a0
  12c608:	0012c9a0 	.word	0x0012c9a0
  12c60c:	0012c9a0 	.word	0x0012c9a0
  12c610:	0012c9a0 	.word	0x0012c9a0
  12c614:	0012c9a0 	.word	0x0012c9a0
  12c618:	0012c9a0 	.word	0x0012c9a0
  12c61c:	0012c9a0 	.word	0x0012c9a0
  12c620:	0012c9a0 	.word	0x0012c9a0
  12c624:	0012c9a0 	.word	0x0012c9a0
  12c628:	0012c9a0 	.word	0x0012c9a0
  12c62c:	0012c9a0 	.word	0x0012c9a0
  12c630:	0012c9a0 	.word	0x0012c9a0
  12c634:	0012c9a0 	.word	0x0012c9a0
  12c638:	0012c9a0 	.word	0x0012c9a0
  12c63c:	0012c9a0 	.word	0x0012c9a0
  12c640:	0012c9a0 	.word	0x0012c9a0
  12c644:	0012c9a0 	.word	0x0012c9a0
  12c648:	0012c9a0 	.word	0x0012c9a0
  12c64c:	0012c9a0 	.word	0x0012c9a0
  12c650:	0012c9a0 	.word	0x0012c9a0
  12c654:	0012c9a0 	.word	0x0012c9a0
  12c658:	0012c9a0 	.word	0x0012c9a0
  12c65c:	0012c9a0 	.word	0x0012c9a0
  12c660:	0012c9a0 	.word	0x0012c9a0
  12c664:	0012c9a0 	.word	0x0012c9a0
  12c668:	0012c9a0 	.word	0x0012c9a0
  12c66c:	0012c9a0 	.word	0x0012c9a0
  12c670:	0012c9a0 	.word	0x0012c9a0
  12c674:	0012c9a0 	.word	0x0012c9a0
  12c678:	0012c9a0 	.word	0x0012c9a0
  12c67c:	0012c9a0 	.word	0x0012c9a0
  12c680:	0012c9a0 	.word	0x0012c9a0
  12c684:	0012c9a0 	.word	0x0012c9a0
  12c688:	0012c9a0 	.word	0x0012c9a0
  12c68c:	0012c9a0 	.word	0x0012c9a0
  12c690:	0012c9a0 	.word	0x0012c9a0
  12c694:	0012c9a0 	.word	0x0012c9a0
  12c698:	0012c9a0 	.word	0x0012c9a0
  12c69c:	0012c9a0 	.word	0x0012c9a0
  12c6a0:	0012c9a0 	.word	0x0012c9a0
  12c6a4:	0012c9a0 	.word	0x0012c9a0
  12c6a8:	0012c9a0 	.word	0x0012c9a0
  12c6ac:	0012c9a0 	.word	0x0012c9a0
  12c6b0:	0012c9a0 	.word	0x0012c9a0
  12c6b4:	0012c808 	.word	0x0012c808
  12c6b8:	0012c844 	.word	0x0012c844
  12c6bc:	0012c8b0 	.word	0x0012c8b0
  12c6c0:	0012c8ec 	.word	0x0012c8ec
  12c6c4:	0012c9a0 	.word	0x0012c9a0
  12c6c8:	0012c9a0 	.word	0x0012c9a0
  12c6cc:	0012c9a0 	.word	0x0012c9a0
  12c6d0:	0012c928 	.word	0x0012c928
  12c6d4:	0012c964 	.word	0x0012c964
      /* case(DHCP_OPTION_END): handled above */
      case(DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
  12c6d8:	e3a03000 	mov	r3, #0
  12c6dc:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  12c6e0:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c6e4:	e54b301e 	strb	r3, [fp, #-30]	; 0xffffffe2
        /* will be increased below */
        offset--;
  12c6e8:	e15b30ba 	ldrh	r3, [fp, #-10]
  12c6ec:	e2433001 	sub	r3, r3, #1
  12c6f0:	e14b30ba 	strh	r3, [fp, #-10]
        break;
  12c6f4:	ea0000ac 	b	12c9ac <dhcp_parse_reply+0x574>
      case(DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
  12c6f8:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c6fc:	e3530004 	cmp	r3, #4
  12c700:	0a000008 	beq	12c728 <dhcp_parse_reply+0x2f0>
  12c704:	e3080fd0 	movw	r0, #36816	; 0x8fd0
  12c708:	e3400014 	movt	r0, #20
  12c70c:	ebff5a80 	bl	103114 <rt_kprintf>
  12c710:	e30015f7 	movw	r1, #1527	; 0x5f7
  12c714:	e3080d70 	movw	r0, #36208	; 0x8d70
  12c718:	e3400014 	movt	r0, #20
  12c71c:	ebff7a73 	bl	10b0f0 <sys_arch_assert>
  12c720:	e3e03005 	mvn	r3, #5
  12c724:	ea000186 	b	12cd44 <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
  12c728:	e3a03006 	mov	r3, #6
  12c72c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c730:	ea00009d 	b	12c9ac <dhcp_parse_reply+0x574>
      case(DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
  12c734:	e3a03004 	mov	r3, #4
  12c738:	e54b301e 	strb	r3, [fp, #-30]	; 0xffffffe2
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
  12c73c:	e55b201d 	ldrb	r2, [fp, #-29]	; 0xffffffe3
  12c740:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12c744:	e1520003 	cmp	r2, r3
  12c748:	2a000008 	bcs	12c770 <dhcp_parse_reply+0x338>
  12c74c:	e3080fdc 	movw	r0, #36828	; 0x8fdc
  12c750:	e3400014 	movt	r0, #20
  12c754:	ebff5a6e 	bl	103114 <rt_kprintf>
  12c758:	e30015fc 	movw	r1, #1532	; 0x5fc
  12c75c:	e3080d70 	movw	r0, #36208	; 0x8d70
  12c760:	e3400014 	movt	r0, #20
  12c764:	ebff7a61 	bl	10b0f0 <sys_arch_assert>
  12c768:	e3e03005 	mvn	r3, #5
  12c76c:	ea000174 	b	12cd44 <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
  12c770:	e3a03007 	mov	r3, #7
  12c774:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c778:	ea00008b 	b	12c9ac <dhcp_parse_reply+0x574>
#if LWIP_DHCP_PROVIDE_DNS_SERVERS
      case(DHCP_OPTION_DNS_SERVER):
        /* special case: there might be more than one server */
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
  12c77c:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c780:	e2033003 	and	r3, r3, #3
  12c784:	e6ef3073 	uxtb	r3, r3
  12c788:	e3530000 	cmp	r3, #0
  12c78c:	0a000008 	beq	12c7b4 <dhcp_parse_reply+0x37c>
  12c790:	e3080ff0 	movw	r0, #36848	; 0x8ff0
  12c794:	e3400014 	movt	r0, #20
  12c798:	ebff5a5d 	bl	103114 <rt_kprintf>
  12c79c:	e3001602 	movw	r1, #1538	; 0x602
  12c7a0:	e3080d70 	movw	r0, #36208	; 0x8d70
  12c7a4:	e3400014 	movt	r0, #20
  12c7a8:	ebff7a50 	bl	10b0f0 <sys_arch_assert>
  12c7ac:	e3e03005 	mvn	r3, #5
  12c7b0:	ea000163 	b	12cd44 <dhcp_parse_reply+0x90c>
        /* limit number of DNS servers */
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
  12c7b4:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c7b8:	e3530008 	cmp	r3, #8
  12c7bc:	31a03003 	movcc	r3, r3
  12c7c0:	23a03008 	movcs	r3, #8
  12c7c4:	e54b301e 	strb	r3, [fp, #-30]	; 0xffffffe2
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
  12c7c8:	e55b201d 	ldrb	r2, [fp, #-29]	; 0xffffffe3
  12c7cc:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12c7d0:	e1520003 	cmp	r2, r3
  12c7d4:	2a000008 	bcs	12c7fc <dhcp_parse_reply+0x3c4>
  12c7d8:	e3080fdc 	movw	r0, #36828	; 0x8fdc
  12c7dc:	e3400014 	movt	r0, #20
  12c7e0:	ebff5a4b 	bl	103114 <rt_kprintf>
  12c7e4:	e3001605 	movw	r1, #1541	; 0x605
  12c7e8:	e3080d70 	movw	r0, #36208	; 0x8d70
  12c7ec:	e3400014 	movt	r0, #20
  12c7f0:	ebff7a3e 	bl	10b0f0 <sys_arch_assert>
  12c7f4:	e3e03005 	mvn	r3, #5
  12c7f8:	ea000151 	b	12cd44 <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
  12c7fc:	e3a03008 	mov	r3, #8
  12c800:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c804:	ea000068 	b	12c9ac <dhcp_parse_reply+0x574>
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case(DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
  12c808:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c80c:	e3530004 	cmp	r3, #4
  12c810:	0a000008 	beq	12c838 <dhcp_parse_reply+0x400>
  12c814:	e3080fd0 	movw	r0, #36816	; 0x8fd0
  12c818:	e3400014 	movt	r0, #20
  12c81c:	ebff5a3c 	bl	103114 <rt_kprintf>
  12c820:	e300160a 	movw	r1, #1546	; 0x60a
  12c824:	e3080d70 	movw	r0, #36208	; 0x8d70
  12c828:	e3400014 	movt	r0, #20
  12c82c:	ebff7a2f 	bl	10b0f0 <sys_arch_assert>
  12c830:	e3e03005 	mvn	r3, #5
  12c834:	ea000142 	b	12cd44 <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
  12c838:	e3a03003 	mov	r3, #3
  12c83c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c840:	ea000059 	b	12c9ac <dhcp_parse_reply+0x574>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case(DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
  12c844:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c848:	e3530001 	cmp	r3, #1
  12c84c:	0a000008 	beq	12c874 <dhcp_parse_reply+0x43c>
  12c850:	e3090000 	movw	r0, #36864	; 0x9000
  12c854:	e3400014 	movt	r0, #20
  12c858:	ebff5a2d 	bl	103114 <rt_kprintf>
  12c85c:	e3001618 	movw	r1, #1560	; 0x618
  12c860:	e3080d70 	movw	r0, #36208	; 0x8d70
  12c864:	e3400014 	movt	r0, #20
  12c868:	ebff7a20 	bl	10b0f0 <sys_arch_assert>
  12c86c:	e3e03005 	mvn	r3, #5
  12c870:	ea000133 	b	12cd44 <dhcp_parse_reply+0x90c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
  12c874:	e15b30be 	ldrh	r3, [fp, #-14]
  12c878:	e35300f0 	cmp	r3, #240	; 0xf0
  12c87c:	0a000008 	beq	12c8a4 <dhcp_parse_reply+0x46c>
  12c880:	e309000c 	movw	r0, #36876	; 0x900c
  12c884:	e3400014 	movt	r0, #20
  12c888:	ebff5a21 	bl	103114 <rt_kprintf>
  12c88c:	e300161a 	movw	r1, #1562	; 0x61a
  12c890:	e3080d70 	movw	r0, #36208	; 0x8d70
  12c894:	e3400014 	movt	r0, #20
  12c898:	ebff7a14 	bl	10b0f0 <sys_arch_assert>
  12c89c:	e3e03005 	mvn	r3, #5
  12c8a0:	ea000127 	b	12cd44 <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
  12c8a4:	e3a03000 	mov	r3, #0
  12c8a8:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c8ac:	ea00003e 	b	12c9ac <dhcp_parse_reply+0x574>
      case(DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
  12c8b0:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c8b4:	e3530001 	cmp	r3, #1
  12c8b8:	0a000008 	beq	12c8e0 <dhcp_parse_reply+0x4a8>
  12c8bc:	e3090000 	movw	r0, #36864	; 0x9000
  12c8c0:	e3400014 	movt	r0, #20
  12c8c4:	ebff5a12 	bl	103114 <rt_kprintf>
  12c8c8:	e300161e 	movw	r1, #1566	; 0x61e
  12c8cc:	e3080d70 	movw	r0, #36208	; 0x8d70
  12c8d0:	e3400014 	movt	r0, #20
  12c8d4:	ebff7a05 	bl	10b0f0 <sys_arch_assert>
  12c8d8:	e3e03005 	mvn	r3, #5
  12c8dc:	ea000118 	b	12cd44 <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
  12c8e0:	e3a03001 	mov	r3, #1
  12c8e4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c8e8:	ea00002f 	b	12c9ac <dhcp_parse_reply+0x574>
      case(DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
  12c8ec:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c8f0:	e3530004 	cmp	r3, #4
  12c8f4:	0a000008 	beq	12c91c <dhcp_parse_reply+0x4e4>
  12c8f8:	e3080fd0 	movw	r0, #36816	; 0x8fd0
  12c8fc:	e3400014 	movt	r0, #20
  12c900:	ebff5a03 	bl	103114 <rt_kprintf>
  12c904:	e3001622 	movw	r1, #1570	; 0x622
  12c908:	e3080d70 	movw	r0, #36208	; 0x8d70
  12c90c:	e3400014 	movt	r0, #20
  12c910:	ebff79f6 	bl	10b0f0 <sys_arch_assert>
  12c914:	e3e03005 	mvn	r3, #5
  12c918:	ea000109 	b	12cd44 <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
  12c91c:	e3a03002 	mov	r3, #2
  12c920:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c924:	ea000020 	b	12c9ac <dhcp_parse_reply+0x574>
      case(DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
  12c928:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c92c:	e3530004 	cmp	r3, #4
  12c930:	0a000008 	beq	12c958 <dhcp_parse_reply+0x520>
  12c934:	e3080fd0 	movw	r0, #36816	; 0x8fd0
  12c938:	e3400014 	movt	r0, #20
  12c93c:	ebff59f4 	bl	103114 <rt_kprintf>
  12c940:	e3001626 	movw	r1, #1574	; 0x626
  12c944:	e3080d70 	movw	r0, #36208	; 0x8d70
  12c948:	e3400014 	movt	r0, #20
  12c94c:	ebff79e7 	bl	10b0f0 <sys_arch_assert>
  12c950:	e3e03005 	mvn	r3, #5
  12c954:	ea0000fa 	b	12cd44 <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_T1;
  12c958:	e3a03004 	mov	r3, #4
  12c95c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c960:	ea000011 	b	12c9ac <dhcp_parse_reply+0x574>
      case(DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
  12c964:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c968:	e3530004 	cmp	r3, #4
  12c96c:	0a000008 	beq	12c994 <dhcp_parse_reply+0x55c>
  12c970:	e3080fd0 	movw	r0, #36816	; 0x8fd0
  12c974:	e3400014 	movt	r0, #20
  12c978:	ebff59e5 	bl	103114 <rt_kprintf>
  12c97c:	e300162a 	movw	r1, #1578	; 0x62a
  12c980:	e3080d70 	movw	r0, #36208	; 0x8d70
  12c984:	e3400014 	movt	r0, #20
  12c988:	ebff79d8 	bl	10b0f0 <sys_arch_assert>
  12c98c:	e3e03005 	mvn	r3, #5
  12c990:	ea0000eb 	b	12cd44 <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_T2;
  12c994:	e3a03005 	mov	r3, #5
  12c998:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c99c:	ea000002 	b	12c9ac <dhcp_parse_reply+0x574>
      default:
        decode_len = 0;
  12c9a0:	e3a03000 	mov	r3, #0
  12c9a4:	e54b301e 	strb	r3, [fp, #-30]	; 0xffffffe2
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        break;
  12c9a8:	e320f000 	nop	{0}
    }
    offset += len + 2;
  12c9ac:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c9b0:	e6ff2073 	uxth	r2, r3
  12c9b4:	e15b30ba 	ldrh	r3, [fp, #-10]
  12c9b8:	e0823003 	add	r3, r2, r3
  12c9bc:	e6ff3073 	uxth	r3, r3
  12c9c0:	e2833002 	add	r3, r3, #2
  12c9c4:	e14b30ba 	strh	r3, [fp, #-10]
    if (decode_len > 0) {
  12c9c8:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12c9cc:	e3530000 	cmp	r3, #0
  12c9d0:	0a000073 	beq	12cba4 <dhcp_parse_reply+0x76c>
      u32_t value = 0;
  12c9d4:	e3a03000 	mov	r3, #0
  12c9d8:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
      u16_t copy_len;
decode_next:
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
  12c9dc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  12c9e0:	e3530000 	cmp	r3, #0
  12c9e4:	ba000002 	blt	12c9f4 <dhcp_parse_reply+0x5bc>
  12c9e8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  12c9ec:	e3530009 	cmp	r3, #9
  12c9f0:	da000006 	ble	12ca10 <dhcp_parse_reply+0x5d8>
  12c9f4:	e3090024 	movw	r0, #36900	; 0x9024
  12c9f8:	e3400014 	movt	r0, #20
  12c9fc:	ebff59c4 	bl	103114 <rt_kprintf>
  12ca00:	e3001637 	movw	r1, #1591	; 0x637
  12ca04:	e3080d70 	movw	r0, #36208	; 0x8d70
  12ca08:	e3400014 	movt	r0, #20
  12ca0c:	ebff79b7 	bl	10b0f0 <sys_arch_assert>
      if (!dhcp_option_given(dhcp, decode_idx)) {
  12ca10:	e30c3c3c 	movw	r3, #52284	; 0xcc3c
  12ca14:	e3403015 	movt	r3, #21
  12ca18:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  12ca1c:	e0833002 	add	r3, r3, r2
  12ca20:	e5d33000 	ldrb	r3, [r3]
  12ca24:	e3530000 	cmp	r3, #0
  12ca28:	1a00005d 	bne	12cba4 <dhcp_parse_reply+0x76c>
        copy_len = LWIP_MIN(decode_len, 4);
  12ca2c:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12ca30:	e3530004 	cmp	r3, #4
  12ca34:	31a03003 	movcc	r3, r3
  12ca38:	23a03004 	movcs	r3, #4
  12ca3c:	e6ef3073 	uxtb	r3, r3
  12ca40:	e14b32ba 	strh	r3, [fp, #-42]	; 0xffffffd6
        if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
  12ca44:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  12ca48:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
  12ca4c:	e24b1034 	sub	r1, fp, #52	; 0x34
  12ca50:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  12ca54:	ebffbb20 	bl	11b6dc <pbuf_copy_partial>
  12ca58:	e1a03000 	mov	r3, r0
  12ca5c:	e1a02003 	mov	r2, r3
  12ca60:	e15b32ba 	ldrh	r3, [fp, #-42]	; 0xffffffd6
  12ca64:	e1530002 	cmp	r3, r2
  12ca68:	0a000001 	beq	12ca74 <dhcp_parse_reply+0x63c>
          return ERR_BUF;
  12ca6c:	e3e03001 	mvn	r3, #1
  12ca70:	ea0000b3 	b	12cd44 <dhcp_parse_reply+0x90c>
        }
        if (decode_len > 4) {
  12ca74:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12ca78:	e3530004 	cmp	r3, #4
  12ca7c:	9a000025 	bls	12cb18 <dhcp_parse_reply+0x6e0>
          /* decode more than one u32_t */
          LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
  12ca80:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12ca84:	e2033003 	and	r3, r3, #3
  12ca88:	e6ef3073 	uxtb	r3, r3
  12ca8c:	e3530000 	cmp	r3, #0
  12ca90:	0a000008 	beq	12cab8 <dhcp_parse_reply+0x680>
  12ca94:	e3090038 	movw	r0, #36920	; 0x9038
  12ca98:	e3400014 	movt	r0, #20
  12ca9c:	ebff599c 	bl	103114 <rt_kprintf>
  12caa0:	e300163f 	movw	r1, #1599	; 0x63f
  12caa4:	e3080d70 	movw	r0, #36208	; 0x8d70
  12caa8:	e3400014 	movt	r0, #20
  12caac:	ebff798f 	bl	10b0f0 <sys_arch_assert>
  12cab0:	e3e03005 	mvn	r3, #5
  12cab4:	ea0000a2 	b	12cd44 <dhcp_parse_reply+0x90c>
          dhcp_got_option(dhcp, decode_idx);
  12cab8:	e30c3c3c 	movw	r3, #52284	; 0xcc3c
  12cabc:	e3403015 	movt	r3, #21
  12cac0:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  12cac4:	e0833002 	add	r3, r3, r2
  12cac8:	e3a02001 	mov	r2, #1
  12cacc:	e5c32000 	strb	r2, [r3]
          dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
  12cad0:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  12cad4:	e1a00003 	mov	r0, r3
  12cad8:	ebffa6c9 	bl	116604 <lwip_htonl>
  12cadc:	e1a01000 	mov	r1, r0
  12cae0:	e30c3c48 	movw	r3, #52296	; 0xcc48
  12cae4:	e3403015 	movt	r3, #21
  12cae8:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  12caec:	e7831102 	str	r1, [r3, r2, lsl #2]
          decode_len -= 4;
  12caf0:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12caf4:	e2433004 	sub	r3, r3, #4
  12caf8:	e54b301e 	strb	r3, [fp, #-30]	; 0xffffffe2
          val_offset += 4;
  12cafc:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  12cb00:	e2833004 	add	r3, r3, #4
  12cb04:	e14b32b6 	strh	r3, [fp, #-38]	; 0xffffffda
          decode_idx++;
  12cb08:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  12cb0c:	e2833001 	add	r3, r3, #1
  12cb10:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
          goto decode_next;
  12cb14:	eaffffb0 	b	12c9dc <dhcp_parse_reply+0x5a4>
        } else if (decode_len == 4) {
  12cb18:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12cb1c:	e3530004 	cmp	r3, #4
  12cb20:	1a000005 	bne	12cb3c <dhcp_parse_reply+0x704>
          value = lwip_ntohl(value);
  12cb24:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  12cb28:	e1a00003 	mov	r0, r3
  12cb2c:	ebffa6b4 	bl	116604 <lwip_htonl>
  12cb30:	e1a03000 	mov	r3, r0
  12cb34:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
  12cb38:	ea00000e 	b	12cb78 <dhcp_parse_reply+0x740>
        } else {
          LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
  12cb3c:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12cb40:	e3530001 	cmp	r3, #1
  12cb44:	0a000008 	beq	12cb6c <dhcp_parse_reply+0x734>
  12cb48:	e3090050 	movw	r0, #36944	; 0x9050
  12cb4c:	e3400014 	movt	r0, #20
  12cb50:	ebff596f 	bl	103114 <rt_kprintf>
  12cb54:	e3001649 	movw	r1, #1609	; 0x649
  12cb58:	e3080d70 	movw	r0, #36208	; 0x8d70
  12cb5c:	e3400014 	movt	r0, #20
  12cb60:	ebff7962 	bl	10b0f0 <sys_arch_assert>
  12cb64:	e3e03005 	mvn	r3, #5
  12cb68:	ea000075 	b	12cd44 <dhcp_parse_reply+0x90c>
          value = ((u8_t*)&value)[0];
  12cb6c:	e24b3034 	sub	r3, fp, #52	; 0x34
  12cb70:	e5d33000 	ldrb	r3, [r3]
  12cb74:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
        }
        dhcp_got_option(dhcp, decode_idx);
  12cb78:	e30c3c3c 	movw	r3, #52284	; 0xcc3c
  12cb7c:	e3403015 	movt	r3, #21
  12cb80:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  12cb84:	e0833002 	add	r3, r3, r2
  12cb88:	e3a02001 	mov	r2, #1
  12cb8c:	e5c32000 	strb	r2, [r3]
        dhcp_set_option_value(dhcp, decode_idx, value);
  12cb90:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  12cb94:	e30c3c48 	movw	r3, #52296	; 0xcc48
  12cb98:	e3403015 	movt	r3, #21
  12cb9c:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  12cba0:	e7831102 	str	r1, [r3, r2, lsl #2]
      }
    }
    if (offset >= q->len) {
  12cba4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12cba8:	e1d330ba 	ldrh	r3, [r3, #10]
  12cbac:	e15b20ba 	ldrh	r2, [fp, #-10]
  12cbb0:	e1520003 	cmp	r2, r3
  12cbb4:	3a000020 	bcc	12cc3c <dhcp_parse_reply+0x804>
      offset -= q->len;
  12cbb8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12cbbc:	e1d330ba 	ldrh	r3, [r3, #10]
  12cbc0:	e15b20ba 	ldrh	r2, [fp, #-10]
  12cbc4:	e0423003 	sub	r3, r2, r3
  12cbc8:	e14b30ba 	strh	r3, [fp, #-10]
      offset_max -= q->len;
  12cbcc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12cbd0:	e1d330ba 	ldrh	r3, [r3, #10]
  12cbd4:	e15b20bc 	ldrh	r2, [fp, #-12]
  12cbd8:	e0423003 	sub	r3, r2, r3
  12cbdc:	e14b30bc 	strh	r3, [fp, #-12]
      if ((offset < offset_max) && offset_max) {
  12cbe0:	e15b20ba 	ldrh	r2, [fp, #-10]
  12cbe4:	e15b30bc 	ldrh	r3, [fp, #-12]
  12cbe8:	e1520003 	cmp	r2, r3
  12cbec:	2a00001f 	bcs	12cc70 <dhcp_parse_reply+0x838>
  12cbf0:	e15b30bc 	ldrh	r3, [fp, #-12]
  12cbf4:	e3530000 	cmp	r3, #0
  12cbf8:	0a00001c 	beq	12cc70 <dhcp_parse_reply+0x838>
        q = q->next;
  12cbfc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12cc00:	e5933000 	ldr	r3, [r3]
  12cc04:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        LWIP_ASSERT("next pbuf was null", q);
  12cc08:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12cc0c:	e3530000 	cmp	r3, #0
  12cc10:	1a000006 	bne	12cc30 <dhcp_parse_reply+0x7f8>
  12cc14:	e3090064 	movw	r0, #36964	; 0x9064
  12cc18:	e3400014 	movt	r0, #20
  12cc1c:	ebff593c 	bl	103114 <rt_kprintf>
  12cc20:	e3001655 	movw	r1, #1621	; 0x655
  12cc24:	e3080d70 	movw	r0, #36208	; 0x8d70
  12cc28:	e3400014 	movt	r0, #20
  12cc2c:	ebff792f 	bl	10b0f0 <sys_arch_assert>
        options = (u8_t*)q->payload;
  12cc30:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12cc34:	e5933004 	ldr	r3, [r3, #4]
  12cc38:	e50b3008 	str	r3, [fp, #-8]
  while ((q != NULL) && (options[offset] != DHCP_OPTION_END) && (offset < offset_max)) {
  12cc3c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12cc40:	e3530000 	cmp	r3, #0
  12cc44:	0a000009 	beq	12cc70 <dhcp_parse_reply+0x838>
  12cc48:	e15b30ba 	ldrh	r3, [fp, #-10]
  12cc4c:	e51b2008 	ldr	r2, [fp, #-8]
  12cc50:	e0823003 	add	r3, r2, r3
  12cc54:	e5d33000 	ldrb	r3, [r3]
  12cc58:	e35300ff 	cmp	r3, #255	; 0xff
  12cc5c:	0a000003 	beq	12cc70 <dhcp_parse_reply+0x838>
  12cc60:	e15b20ba 	ldrh	r2, [fp, #-10]
  12cc64:	e15b30bc 	ldrh	r3, [fp, #-12]
  12cc68:	e1520003 	cmp	r2, r3
  12cc6c:	3afffe33 	bcc	12c540 <dhcp_parse_reply+0x108>
        break;
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
  12cc70:	e30c3c3c 	movw	r3, #52284	; 0xcc3c
  12cc74:	e3403015 	movt	r3, #21
  12cc78:	e5d33000 	ldrb	r3, [r3]
  12cc7c:	e3530000 	cmp	r3, #0
  12cc80:	0a00001a 	beq	12ccf0 <dhcp_parse_reply+0x8b8>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
  12cc84:	e30c3c48 	movw	r3, #52296	; 0xcc48
  12cc88:	e3403015 	movt	r3, #21
  12cc8c:	e5933000 	ldr	r3, [r3]
  12cc90:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
  12cc94:	e30c3c3c 	movw	r3, #52284	; 0xcc3c
  12cc98:	e3403015 	movt	r3, #21
  12cc9c:	e3a02000 	mov	r2, #0
  12cca0:	e5c32000 	strb	r2, [r3]
    if (overload == DHCP_OVERLOAD_FILE) {
  12cca4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12cca8:	e3530001 	cmp	r3, #1
  12ccac:	1a000002 	bne	12ccbc <dhcp_parse_reply+0x884>
      parse_file_as_options = 1;
  12ccb0:	e3a03001 	mov	r3, #1
  12ccb4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  12ccb8:	ea00000c 	b	12ccf0 <dhcp_parse_reply+0x8b8>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
  12ccbc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12ccc0:	e3530002 	cmp	r3, #2
  12ccc4:	1a000002 	bne	12ccd4 <dhcp_parse_reply+0x89c>
      parse_sname_as_options = 1;
  12ccc8:	e3a03001 	mov	r3, #1
  12cccc:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  12ccd0:	ea000006 	b	12ccf0 <dhcp_parse_reply+0x8b8>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
  12ccd4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12ccd8:	e3530003 	cmp	r3, #3
  12ccdc:	1a000003 	bne	12ccf0 <dhcp_parse_reply+0x8b8>
      parse_sname_as_options = 1;
  12cce0:	e3a03001 	mov	r3, #1
  12cce4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
      parse_file_as_options = 1;
  12cce8:	e3a03001 	mov	r3, #1
  12ccec:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
      /* make sure the string is really NULL-terminated */
      dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
    }
#endif /* LWIP_DHCP_BOOTP_FILE */
  }
  if (parse_file_as_options) {
  12ccf0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12ccf4:	e3530000 	cmp	r3, #0
  12ccf8:	0a000006 	beq	12cd18 <dhcp_parse_reply+0x8e0>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
  12ccfc:	e3a03000 	mov	r3, #0
  12cd00:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    options_idx = DHCP_FILE_OFS;
  12cd04:	e3a0306c 	mov	r3, #108	; 0x6c
  12cd08:	e14b30be 	strh	r3, [fp, #-14]
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
  12cd0c:	e3a030ec 	mov	r3, #236	; 0xec
  12cd10:	e14b31b0 	strh	r3, [fp, #-16]
    goto again;
  12cd14:	eafffde4 	b	12c4ac <dhcp_parse_reply+0x74>
  } else if (parse_sname_as_options) {
  12cd18:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12cd1c:	e3530000 	cmp	r3, #0
  12cd20:	0a000006 	beq	12cd40 <dhcp_parse_reply+0x908>
    parse_sname_as_options = 0;
  12cd24:	e3a03000 	mov	r3, #0
  12cd28:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    options_idx = DHCP_SNAME_OFS;
  12cd2c:	e3a0302c 	mov	r3, #44	; 0x2c
  12cd30:	e14b30be 	strh	r3, [fp, #-14]
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
  12cd34:	e3a0306c 	mov	r3, #108	; 0x6c
  12cd38:	e14b31b0 	strh	r3, [fp, #-16]
    goto again;
  12cd3c:	eafffdda 	b	12c4ac <dhcp_parse_reply+0x74>
  }
  return ERR_OK;
  12cd40:	e3a03000 	mov	r3, #0
}
  12cd44:	e1a00003 	mov	r0, r3
  12cd48:	e24bd004 	sub	sp, fp, #4
  12cd4c:	e8bd8800 	pop	{fp, pc}

0012cd50 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
  12cd50:	e92d4800 	push	{fp, lr}
  12cd54:	e28db004 	add	fp, sp, #4
  12cd58:	e24dd028 	sub	sp, sp, #40	; 0x28
  12cd5c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  12cd60:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  12cd64:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  12cd68:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  struct netif *netif = ip_current_input_netif();
  12cd6c:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  12cd70:	e3403014 	movt	r3, #20
  12cd74:	e5933004 	ldr	r3, [r3, #4]
  12cd78:	e50b300c 	str	r3, [fp, #-12]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12cd7c:	e51b300c 	ldr	r3, [fp, #-12]
  12cd80:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12cd84:	e50b3010 	str	r3, [fp, #-16]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
  12cd88:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12cd8c:	e5933004 	ldr	r3, [r3, #4]
  12cd90:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  u8_t i;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
  12cd94:	e51b3010 	ldr	r3, [fp, #-16]
  12cd98:	e3530000 	cmp	r3, #0
  12cd9c:	0a000091 	beq	12cfe8 <dhcp_recv+0x298>
  12cda0:	e51b3010 	ldr	r3, [fp, #-16]
  12cda4:	e5d33008 	ldrb	r3, [r3, #8]
  12cda8:	e3530000 	cmp	r3, #0
  12cdac:	0a00008d 	beq	12cfe8 <dhcp_recv+0x298>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
  12cdb0:	e51b3010 	ldr	r3, [fp, #-16]
  12cdb4:	e5933004 	ldr	r3, [r3, #4]
  12cdb8:	e3530000 	cmp	r3, #0
  12cdbc:	0a000006 	beq	12cddc <dhcp_recv+0x8c>
  12cdc0:	e3080e48 	movw	r0, #36424	; 0x8e48
  12cdc4:	e3400014 	movt	r0, #20
  12cdc8:	ebff58d1 	bl	103114 <rt_kprintf>
  12cdcc:	e30016a9 	movw	r1, #1705	; 0x6a9
  12cdd0:	e3080d70 	movw	r0, #36208	; 0x8d70
  12cdd4:	e3400014 	movt	r0, #20
  12cdd8:	ebff78c4 	bl	10b0f0 <sys_arch_assert>

  if (p->len < DHCP_MIN_REPLY_LEN) {
  12cddc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12cde0:	e1d330ba 	ldrh	r3, [r3, #10]
  12cde4:	e353002b 	cmp	r3, #43	; 0x2b
  12cde8:	9a000080 	bls	12cff0 <dhcp_recv+0x2a0>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
  12cdec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12cdf0:	e5d33000 	ldrb	r3, [r3]
  12cdf4:	e3530002 	cmp	r3, #2
  12cdf8:	1a00007e 	bne	12cff8 <dhcp_recv+0x2a8>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
  12cdfc:	e3a03000 	mov	r3, #0
  12ce00:	e54b3005 	strb	r3, [fp, #-5]
  12ce04:	ea00000c 	b	12ce3c <dhcp_recv+0xec>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
  12ce08:	e55b3005 	ldrb	r3, [fp, #-5]
  12ce0c:	e51b200c 	ldr	r2, [fp, #-12]
  12ce10:	e0823003 	add	r3, r2, r3
  12ce14:	e5d3203b 	ldrb	r2, [r3, #59]	; 0x3b
  12ce18:	e55b3005 	ldrb	r3, [fp, #-5]
  12ce1c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  12ce20:	e0813003 	add	r3, r1, r3
  12ce24:	e5d3301c 	ldrb	r3, [r3, #28]
  12ce28:	e1520003 	cmp	r2, r3
  12ce2c:	1a000073 	bne	12d000 <dhcp_recv+0x2b0>
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
  12ce30:	e55b3005 	ldrb	r3, [fp, #-5]
  12ce34:	e2833001 	add	r3, r3, #1
  12ce38:	e54b3005 	strb	r3, [fp, #-5]
  12ce3c:	e51b300c 	ldr	r3, [fp, #-12]
  12ce40:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
  12ce44:	e55b2005 	ldrb	r2, [fp, #-5]
  12ce48:	e1520003 	cmp	r2, r3
  12ce4c:	2a000005 	bcs	12ce68 <dhcp_recv+0x118>
  12ce50:	e55b3005 	ldrb	r3, [fp, #-5]
  12ce54:	e3530005 	cmp	r3, #5
  12ce58:	8a000002 	bhi	12ce68 <dhcp_recv+0x118>
  12ce5c:	e55b3005 	ldrb	r3, [fp, #-5]
  12ce60:	e353000f 	cmp	r3, #15
  12ce64:	9affffe7 	bls	12ce08 <dhcp_recv+0xb8>
        (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
  12ce68:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12ce6c:	e5933004 	ldr	r3, [r3, #4]
  12ce70:	e1a00003 	mov	r0, r3
  12ce74:	ebffa5e2 	bl	116604 <lwip_htonl>
  12ce78:	e1a02000 	mov	r2, r0
  12ce7c:	e51b3010 	ldr	r3, [fp, #-16]
  12ce80:	e5933000 	ldr	r3, [r3]
  12ce84:	e1520003 	cmp	r2, r3
  12ce88:	1a00005e 	bne	12d008 <dhcp_recv+0x2b8>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n",lwip_ntohl(reply_msg->xid),dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(dhcp, p) != ERR_OK) {
  12ce8c:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  12ce90:	e51b0010 	ldr	r0, [fp, #-16]
  12ce94:	ebfffd67 	bl	12c438 <dhcp_parse_reply>
  12ce98:	e1a03000 	mov	r3, r0
  12ce9c:	e3530000 	cmp	r3, #0
  12cea0:	1a00005a 	bne	12d010 <dhcp_recv+0x2c0>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
  12cea4:	e30c3c3c 	movw	r3, #52284	; 0xcc3c
  12cea8:	e3403015 	movt	r3, #21
  12ceac:	e5d33001 	ldrb	r3, [r3, #1]
  12ceb0:	e3530000 	cmp	r3, #0
  12ceb4:	0a000057 	beq	12d018 <dhcp_recv+0x2c8>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
  12ceb8:	e30c3c48 	movw	r3, #52296	; 0xcc48
  12cebc:	e3403015 	movt	r3, #21
  12cec0:	e5933004 	ldr	r3, [r3, #4]
  12cec4:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
  12cec8:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  12cecc:	e3530005 	cmp	r3, #5
  12ced0:	1a000021 	bne	12cf5c <dhcp_recv+0x20c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
  12ced4:	e51b3010 	ldr	r3, [fp, #-16]
  12ced8:	e5d33009 	ldrb	r3, [r3, #9]
  12cedc:	e3530001 	cmp	r3, #1
  12cee0:	1a00000c 	bne	12cf18 <dhcp_recv+0x1c8>
      dhcp_handle_ack(netif);
  12cee4:	e51b000c 	ldr	r0, [fp, #-12]
  12cee8:	ebfff6b6 	bl	12a9c8 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
  12ceec:	e51b300c 	ldr	r3, [fp, #-12]
  12cef0:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  12cef4:	e2033008 	and	r3, r3, #8
  12cef8:	e3530000 	cmp	r3, #0
  12cefc:	0a000002 	beq	12cf0c <dhcp_recv+0x1bc>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
  12cf00:	e51b000c 	ldr	r0, [fp, #-12]
  12cf04:	ebfff4c0 	bl	12a20c <dhcp_check>
  12cf08:	ea000043 	b	12d01c <dhcp_recv+0x2cc>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
  12cf0c:	e51b000c 	ldr	r0, [fp, #-12]
  12cf10:	ebfff952 	bl	12b460 <dhcp_bind>
  12cf14:	ea000040 	b	12d01c <dhcp_recv+0x2cc>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
  12cf18:	e51b3010 	ldr	r3, [fp, #-16]
  12cf1c:	e5d33009 	ldrb	r3, [r3, #9]
  12cf20:	e3530003 	cmp	r3, #3
  12cf24:	0a000007 	beq	12cf48 <dhcp_recv+0x1f8>
  12cf28:	e51b3010 	ldr	r3, [fp, #-16]
  12cf2c:	e5d33009 	ldrb	r3, [r3, #9]
  12cf30:	e3530004 	cmp	r3, #4
  12cf34:	0a000003 	beq	12cf48 <dhcp_recv+0x1f8>
             (dhcp->state == DHCP_STATE_RENEWING)) {
  12cf38:	e51b3010 	ldr	r3, [fp, #-16]
  12cf3c:	e5d33009 	ldrb	r3, [r3, #9]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
  12cf40:	e3530005 	cmp	r3, #5
  12cf44:	1a000034 	bne	12d01c <dhcp_recv+0x2cc>
      dhcp_handle_ack(netif);
  12cf48:	e51b000c 	ldr	r0, [fp, #-12]
  12cf4c:	ebfff69d 	bl	12a9c8 <dhcp_handle_ack>
      dhcp_bind(netif);
  12cf50:	e51b000c 	ldr	r0, [fp, #-12]
  12cf54:	ebfff941 	bl	12b460 <dhcp_bind>
  12cf58:	ea00002f 	b	12d01c <dhcp_recv+0x2cc>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
  12cf5c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  12cf60:	e3530006 	cmp	r3, #6
  12cf64:	1a000012 	bne	12cfb4 <dhcp_recv+0x264>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
  12cf68:	e51b3010 	ldr	r3, [fp, #-16]
  12cf6c:	e5d33009 	ldrb	r3, [r3, #9]
  else if ((msg_type == DHCP_NAK) &&
  12cf70:	e3530003 	cmp	r3, #3
  12cf74:	0a00000b 	beq	12cfa8 <dhcp_recv+0x258>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
  12cf78:	e51b3010 	ldr	r3, [fp, #-16]
  12cf7c:	e5d33009 	ldrb	r3, [r3, #9]
  12cf80:	e3530001 	cmp	r3, #1
  12cf84:	0a000007 	beq	12cfa8 <dhcp_recv+0x258>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
  12cf88:	e51b3010 	ldr	r3, [fp, #-16]
  12cf8c:	e5d33009 	ldrb	r3, [r3, #9]
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
  12cf90:	e3530004 	cmp	r3, #4
  12cf94:	0a000003 	beq	12cfa8 <dhcp_recv+0x258>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
  12cf98:	e51b3010 	ldr	r3, [fp, #-16]
  12cf9c:	e5d33009 	ldrb	r3, [r3, #9]
  12cfa0:	e3530005 	cmp	r3, #5
  12cfa4:	1a000002 	bne	12cfb4 <dhcp_recv+0x264>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
  12cfa8:	e51b000c 	ldr	r0, [fp, #-12]
  12cfac:	ebfff47f 	bl	12a1b0 <dhcp_handle_nak>
  12cfb0:	ea000019 	b	12d01c <dhcp_recv+0x2cc>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
  12cfb4:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  12cfb8:	e3530002 	cmp	r3, #2
  12cfbc:	1a000009 	bne	12cfe8 <dhcp_recv+0x298>
  12cfc0:	e51b3010 	ldr	r3, [fp, #-16]
  12cfc4:	e5d33009 	ldrb	r3, [r3, #9]
  12cfc8:	e3530006 	cmp	r3, #6
  12cfcc:	1a000005 	bne	12cfe8 <dhcp_recv+0x298>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    dhcp->request_timeout = 0;
  12cfd0:	e51b3010 	ldr	r3, [fp, #-16]
  12cfd4:	e3a02000 	mov	r2, #0
  12cfd8:	e1c321b6 	strh	r2, [r3, #22]
    /* remember offered lease */
    dhcp_handle_offer(netif);
  12cfdc:	e51b000c 	ldr	r0, [fp, #-12]
  12cfe0:	ebfff4b6 	bl	12a2c0 <dhcp_handle_offer>
  12cfe4:	ea00000c 	b	12d01c <dhcp_recv+0x2cc>
  }

free_pbuf_and_return:
  12cfe8:	e320f000 	nop	{0}
  12cfec:	ea00000a 	b	12d01c <dhcp_recv+0x2cc>
    goto free_pbuf_and_return;
  12cff0:	e320f000 	nop	{0}
  12cff4:	ea000008 	b	12d01c <dhcp_recv+0x2cc>
    goto free_pbuf_and_return;
  12cff8:	e320f000 	nop	{0}
  12cffc:	ea000006 	b	12d01c <dhcp_recv+0x2cc>
      goto free_pbuf_and_return;
  12d000:	e320f000 	nop	{0}
  12d004:	ea000004 	b	12d01c <dhcp_recv+0x2cc>
    goto free_pbuf_and_return;
  12d008:	e320f000 	nop	{0}
  12d00c:	ea000002 	b	12d01c <dhcp_recv+0x2cc>
    goto free_pbuf_and_return;
  12d010:	e320f000 	nop	{0}
  12d014:	ea000000 	b	12d01c <dhcp_recv+0x2cc>
    goto free_pbuf_and_return;
  12d018:	e320f000 	nop	{0}
  if (dhcp != NULL) {
  12d01c:	e51b3010 	ldr	r3, [fp, #-16]
  12d020:	e3530000 	cmp	r3, #0
  12d024:	0a000002 	beq	12d034 <dhcp_recv+0x2e4>
    dhcp->msg_in = NULL;
  12d028:	e51b3010 	ldr	r3, [fp, #-16]
  12d02c:	e3a02000 	mov	r2, #0
  12d030:	e5832004 	str	r2, [r3, #4]
  }
  pbuf_free(p);
  12d034:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12d038:	ebffb79c 	bl	11aeb0 <pbuf_free>
}
  12d03c:	e320f000 	nop	{0}
  12d040:	e24bd004 	sub	sp, fp, #4
  12d044:	e8bd8800 	pop	{fp, pc}

0012d048 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static err_t
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
{
  12d048:	e92d4810 	push	{r4, fp, lr}
  12d04c:	e28db008 	add	fp, sp, #8
  12d050:	e24dd01c 	sub	sp, sp, #28
  12d054:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12d058:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  12d05c:	e1a03002 	mov	r3, r2
  12d060:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
  12d064:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12d068:	e3530000 	cmp	r3, #0
  12d06c:	1a000008 	bne	12d094 <dhcp_create_msg+0x4c>
  12d070:	e3090078 	movw	r0, #36984	; 0x9078
  12d074:	e3400014 	movt	r0, #20
  12d078:	ebff5825 	bl	103114 <rt_kprintf>
  12d07c:	e300171e 	movw	r1, #1822	; 0x71e
  12d080:	e3080d70 	movw	r0, #36208	; 0x8d70
  12d084:	e3400014 	movt	r0, #20
  12d088:	ebff7818 	bl	10b0f0 <sys_arch_assert>
  12d08c:	e3e0300f 	mvn	r3, #15
  12d090:	ea000121 	b	12d51c <dhcp_create_msg+0x4d4>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
  12d094:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d098:	e3530000 	cmp	r3, #0
  12d09c:	1a000008 	bne	12d0c4 <dhcp_create_msg+0x7c>
  12d0a0:	e3090098 	movw	r0, #37016	; 0x9098
  12d0a4:	e3400014 	movt	r0, #20
  12d0a8:	ebff5819 	bl	103114 <rt_kprintf>
  12d0ac:	e300171f 	movw	r1, #1823	; 0x71f
  12d0b0:	e3080d70 	movw	r0, #36208	; 0x8d70
  12d0b4:	e3400014 	movt	r0, #20
  12d0b8:	ebff780c 	bl	10b0f0 <sys_arch_assert>
  12d0bc:	e3e03005 	mvn	r3, #5
  12d0c0:	ea000115 	b	12d51c <dhcp_create_msg+0x4d4>
  LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
  12d0c4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d0c8:	e593300c 	ldr	r3, [r3, #12]
  12d0cc:	e3530000 	cmp	r3, #0
  12d0d0:	0a000006 	beq	12d0f0 <dhcp_create_msg+0xa8>
  12d0d4:	e30900b8 	movw	r0, #37048	; 0x90b8
  12d0d8:	e3400014 	movt	r0, #20
  12d0dc:	ebff580c 	bl	103114 <rt_kprintf>
  12d0e0:	e3a01e72 	mov	r1, #1824	; 0x720
  12d0e4:	e3080d70 	movw	r0, #36208	; 0x8d70
  12d0e8:	e3400014 	movt	r0, #20
  12d0ec:	ebff77ff 	bl	10b0f0 <sys_arch_assert>
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
  12d0f0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d0f4:	e5933010 	ldr	r3, [r3, #16]
  12d0f8:	e3530000 	cmp	r3, #0
  12d0fc:	0a000006 	beq	12d11c <dhcp_create_msg+0xd4>
  12d100:	e30900e0 	movw	r0, #37088	; 0x90e0
  12d104:	e3400014 	movt	r0, #20
  12d108:	ebff5801 	bl	103114 <rt_kprintf>
  12d10c:	e3001721 	movw	r1, #1825	; 0x721
  12d110:	e3080d70 	movw	r0, #36208	; 0x8d70
  12d114:	e3400014 	movt	r0, #20
  12d118:	ebff77f4 	bl	10b0f0 <sys_arch_assert>
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
  12d11c:	e3a02000 	mov	r2, #0
  12d120:	e3a01f4d 	mov	r1, #308	; 0x134
  12d124:	e3a00000 	mov	r0, #0
  12d128:	ebffb459 	bl	11a294 <pbuf_alloc>
  12d12c:	e1a02000 	mov	r2, r0
  12d130:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d134:	e583200c 	str	r2, [r3, #12]
  if (dhcp->p_out == NULL) {
  12d138:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d13c:	e593300c 	ldr	r3, [r3, #12]
  12d140:	e3530000 	cmp	r3, #0
  12d144:	1a000001 	bne	12d150 <dhcp_create_msg+0x108>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_create_msg(): could not allocate pbuf\n"));
    return ERR_MEM;
  12d148:	e3e03000 	mvn	r3, #0
  12d14c:	ea0000f2 	b	12d51c <dhcp_create_msg+0x4d4>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
  12d150:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d154:	e593300c 	ldr	r3, [r3, #12]
  12d158:	e1d330ba 	ldrh	r3, [r3, #10]
  12d15c:	e3530f4d 	cmp	r3, #308	; 0x134
  12d160:	2a000006 	bcs	12d180 <dhcp_create_msg+0x138>
  12d164:	e3090108 	movw	r0, #37128	; 0x9108
  12d168:	e3400014 	movt	r0, #20
  12d16c:	ebff57e8 	bl	103114 <rt_kprintf>
  12d170:	e3001729 	movw	r1, #1833	; 0x729
  12d174:	e3080d70 	movw	r0, #36208	; 0x8d70
  12d178:	e3400014 	movt	r0, #20
  12d17c:	ebff77db 	bl	10b0f0 <sys_arch_assert>
           (dhcp->p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if (message_type != DHCP_REQUEST) {
  12d180:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12d184:	e3530003 	cmp	r3, #3
  12d188:	0a00000e 	beq	12d1c8 <dhcp_create_msg+0x180>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
  12d18c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d190:	e5d3300a 	ldrb	r3, [r3, #10]
  12d194:	e3530000 	cmp	r3, #0
  12d198:	1a000005 	bne	12d1b4 <dhcp_create_msg+0x16c>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
  12d19c:	eb0043fa 	bl	13e18c <rand>
  12d1a0:	e1a03000 	mov	r3, r0
  12d1a4:	e1a02003 	mov	r2, r3
  12d1a8:	e30e3ae0 	movw	r3, #60128	; 0xeae0
  12d1ac:	e3403014 	movt	r3, #20
  12d1b0:	e5832000 	str	r2, [r3]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
  12d1b4:	e30e3ae0 	movw	r3, #60128	; 0xeae0
  12d1b8:	e3403014 	movt	r3, #20
  12d1bc:	e5932000 	ldr	r2, [r3]
  12d1c0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d1c4:	e5832000 	str	r2, [r3]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
  12d1c8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d1cc:	e593300c 	ldr	r3, [r3, #12]
  12d1d0:	e5932004 	ldr	r2, [r3, #4]
  12d1d4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d1d8:	e5832010 	str	r2, [r3, #16]

  dhcp->msg_out->op = DHCP_BOOTREQUEST;
  12d1dc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d1e0:	e5933010 	ldr	r3, [r3, #16]
  12d1e4:	e3a02001 	mov	r2, #1
  12d1e8:	e5c32000 	strb	r2, [r3]
  /* @todo: make link layer independent */
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
  12d1ec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d1f0:	e5933010 	ldr	r3, [r3, #16]
  12d1f4:	e3a02001 	mov	r2, #1
  12d1f8:	e5c32001 	strb	r2, [r3, #1]
  dhcp->msg_out->hlen = netif->hwaddr_len;
  12d1fc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d200:	e5933010 	ldr	r3, [r3, #16]
  12d204:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  12d208:	e5d2203a 	ldrb	r2, [r2, #58]	; 0x3a
  12d20c:	e5c32002 	strb	r2, [r3, #2]
  dhcp->msg_out->hops = 0;
  12d210:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d214:	e5933010 	ldr	r3, [r3, #16]
  12d218:	e3a02000 	mov	r2, #0
  12d21c:	e5c32003 	strb	r2, [r3, #3]
  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
  12d220:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d224:	e5932000 	ldr	r2, [r3]
  12d228:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d22c:	e5934010 	ldr	r4, [r3, #16]
  12d230:	e1a00002 	mov	r0, r2
  12d234:	ebffa4f2 	bl	116604 <lwip_htonl>
  12d238:	e1a03000 	mov	r3, r0
  12d23c:	e5843004 	str	r3, [r4, #4]
  dhcp->msg_out->secs = 0;
  12d240:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d244:	e5933010 	ldr	r3, [r3, #16]
  12d248:	e3a02000 	mov	r2, #0
  12d24c:	e5c32008 	strb	r2, [r3, #8]
  12d250:	e3a02000 	mov	r2, #0
  12d254:	e5c32009 	strb	r2, [r3, #9]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  dhcp->msg_out->flags = 0;
  12d258:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d25c:	e5933010 	ldr	r3, [r3, #16]
  12d260:	e3a02000 	mov	r2, #0
  12d264:	e5c3200a 	strb	r2, [r3, #10]
  12d268:	e3a02000 	mov	r2, #0
  12d26c:	e5c3200b 	strb	r2, [r3, #11]
  ip4_addr_set_zero(&dhcp->msg_out->ciaddr);
  12d270:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d274:	e5933010 	ldr	r3, [r3, #16]
  12d278:	e3a02000 	mov	r2, #0
  12d27c:	e5c3200c 	strb	r2, [r3, #12]
  12d280:	e3a02000 	mov	r2, #0
  12d284:	e5c3200d 	strb	r2, [r3, #13]
  12d288:	e3a02000 	mov	r2, #0
  12d28c:	e5c3200e 	strb	r2, [r3, #14]
  12d290:	e3a02000 	mov	r2, #0
  12d294:	e5c3200f 	strb	r2, [r3, #15]
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
  12d298:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12d29c:	e3530008 	cmp	r3, #8
  12d2a0:	0a000010 	beq	12d2e8 <dhcp_create_msg+0x2a0>
  12d2a4:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12d2a8:	e3530004 	cmp	r3, #4
  12d2ac:	0a00000d 	beq	12d2e8 <dhcp_create_msg+0x2a0>
  12d2b0:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12d2b4:	e3530007 	cmp	r3, #7
  12d2b8:	0a00000a 	beq	12d2e8 <dhcp_create_msg+0x2a0>
  12d2bc:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12d2c0:	e3530003 	cmp	r3, #3
  12d2c4:	1a00000d 	bne	12d300 <dhcp_create_msg+0x2b8>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
  12d2c8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d2cc:	e5d33009 	ldrb	r3, [r3, #9]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
  12d2d0:	e3530005 	cmp	r3, #5
  12d2d4:	0a000003 	beq	12d2e8 <dhcp_create_msg+0x2a0>
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
  12d2d8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d2dc:	e5d33009 	ldrb	r3, [r3, #9]
  12d2e0:	e3530004 	cmp	r3, #4
  12d2e4:	1a000005 	bne	12d300 <dhcp_create_msg+0x2b8>
    ip4_addr_copy(dhcp->msg_out->ciaddr, *netif_ip4_addr(netif));
  12d2e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12d2ec:	e2832004 	add	r2, r3, #4
  12d2f0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d2f4:	e5933010 	ldr	r3, [r3, #16]
  12d2f8:	e5922000 	ldr	r2, [r2]
  12d2fc:	e583200c 	str	r2, [r3, #12]
  }
  ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
  12d300:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d304:	e5933010 	ldr	r3, [r3, #16]
  12d308:	e3a02000 	mov	r2, #0
  12d30c:	e5c32010 	strb	r2, [r3, #16]
  12d310:	e3a02000 	mov	r2, #0
  12d314:	e5c32011 	strb	r2, [r3, #17]
  12d318:	e3a02000 	mov	r2, #0
  12d31c:	e5c32012 	strb	r2, [r3, #18]
  12d320:	e3a02000 	mov	r2, #0
  12d324:	e5c32013 	strb	r2, [r3, #19]
  ip4_addr_set_zero(&dhcp->msg_out->siaddr);
  12d328:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d32c:	e5933010 	ldr	r3, [r3, #16]
  12d330:	e3a02000 	mov	r2, #0
  12d334:	e5c32014 	strb	r2, [r3, #20]
  12d338:	e3a02000 	mov	r2, #0
  12d33c:	e5c32015 	strb	r2, [r3, #21]
  12d340:	e3a02000 	mov	r2, #0
  12d344:	e5c32016 	strb	r2, [r3, #22]
  12d348:	e3a02000 	mov	r2, #0
  12d34c:	e5c32017 	strb	r2, [r3, #23]
  ip4_addr_set_zero(&dhcp->msg_out->giaddr);
  12d350:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d354:	e5933010 	ldr	r3, [r3, #16]
  12d358:	e3a02000 	mov	r2, #0
  12d35c:	e5c32018 	strb	r2, [r3, #24]
  12d360:	e3a02000 	mov	r2, #0
  12d364:	e5c32019 	strb	r2, [r3, #25]
  12d368:	e3a02000 	mov	r2, #0
  12d36c:	e5c3201a 	strb	r2, [r3, #26]
  12d370:	e3a02000 	mov	r2, #0
  12d374:	e5c3201b 	strb	r2, [r3, #27]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
  12d378:	e3a03000 	mov	r3, #0
  12d37c:	e14b30be 	strh	r3, [fp, #-14]
  12d380:	ea000017 	b	12d3e4 <dhcp_create_msg+0x39c>
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
  12d384:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12d388:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
  12d38c:	e6ff3073 	uxth	r3, r3
  12d390:	e15b20be 	ldrh	r2, [fp, #-14]
  12d394:	e1520003 	cmp	r2, r3
  12d398:	2a000007 	bcs	12d3bc <dhcp_create_msg+0x374>
  12d39c:	e15b30be 	ldrh	r3, [fp, #-14]
  12d3a0:	e3530005 	cmp	r3, #5
  12d3a4:	8a000004 	bhi	12d3bc <dhcp_create_msg+0x374>
  12d3a8:	e15b30be 	ldrh	r3, [fp, #-14]
  12d3ac:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  12d3b0:	e0823003 	add	r3, r2, r3
  12d3b4:	e5d3103b 	ldrb	r1, [r3, #59]	; 0x3b
  12d3b8:	ea000000 	b	12d3c0 <dhcp_create_msg+0x378>
  12d3bc:	e3a01000 	mov	r1, #0
  12d3c0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d3c4:	e5932010 	ldr	r2, [r3, #16]
  12d3c8:	e15b30be 	ldrh	r3, [fp, #-14]
  12d3cc:	e0823003 	add	r3, r2, r3
  12d3d0:	e1a02001 	mov	r2, r1
  12d3d4:	e5c3201c 	strb	r2, [r3, #28]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
  12d3d8:	e15b30be 	ldrh	r3, [fp, #-14]
  12d3dc:	e2833001 	add	r3, r3, #1
  12d3e0:	e14b30be 	strh	r3, [fp, #-14]
  12d3e4:	e15b30be 	ldrh	r3, [fp, #-14]
  12d3e8:	e353000f 	cmp	r3, #15
  12d3ec:	9affffe4 	bls	12d384 <dhcp_create_msg+0x33c>
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
  12d3f0:	e3a03000 	mov	r3, #0
  12d3f4:	e14b30be 	strh	r3, [fp, #-14]
  12d3f8:	ea000008 	b	12d420 <dhcp_create_msg+0x3d8>
    dhcp->msg_out->sname[i] = 0;
  12d3fc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d400:	e5932010 	ldr	r2, [r3, #16]
  12d404:	e15b30be 	ldrh	r3, [fp, #-14]
  12d408:	e0823003 	add	r3, r2, r3
  12d40c:	e3a02000 	mov	r2, #0
  12d410:	e5c3202c 	strb	r2, [r3, #44]	; 0x2c
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
  12d414:	e15b30be 	ldrh	r3, [fp, #-14]
  12d418:	e2833001 	add	r3, r3, #1
  12d41c:	e14b30be 	strh	r3, [fp, #-14]
  12d420:	e15b30be 	ldrh	r3, [fp, #-14]
  12d424:	e353003f 	cmp	r3, #63	; 0x3f
  12d428:	9afffff3 	bls	12d3fc <dhcp_create_msg+0x3b4>
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
  12d42c:	e3a03000 	mov	r3, #0
  12d430:	e14b30be 	strh	r3, [fp, #-14]
  12d434:	ea000008 	b	12d45c <dhcp_create_msg+0x414>
    dhcp->msg_out->file[i] = 0;
  12d438:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d43c:	e5932010 	ldr	r2, [r3, #16]
  12d440:	e15b30be 	ldrh	r3, [fp, #-14]
  12d444:	e0823003 	add	r3, r2, r3
  12d448:	e3a02000 	mov	r2, #0
  12d44c:	e5c3206c 	strb	r2, [r3, #108]	; 0x6c
  for (i = 0; i < DHCP_FILE_LEN; i++) {
  12d450:	e15b30be 	ldrh	r3, [fp, #-14]
  12d454:	e2833001 	add	r3, r3, #1
  12d458:	e14b30be 	strh	r3, [fp, #-14]
  12d45c:	e15b30be 	ldrh	r3, [fp, #-14]
  12d460:	e353007f 	cmp	r3, #127	; 0x7f
  12d464:	9afffff3 	bls	12d438 <dhcp_create_msg+0x3f0>
  }
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
  12d468:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d46c:	e5932010 	ldr	r2, [r3, #16]
  12d470:	e3a03000 	mov	r3, #0
  12d474:	e3833063 	orr	r3, r3, #99	; 0x63
  12d478:	e5c230ec 	strb	r3, [r2, #236]	; 0xec
  12d47c:	e3a03000 	mov	r3, #0
  12d480:	e1e03003 	mvn	r3, r3
  12d484:	e203307d 	and	r3, r3, #125	; 0x7d
  12d488:	e1e03003 	mvn	r3, r3
  12d48c:	e5c230ed 	strb	r3, [r2, #237]	; 0xed
  12d490:	e3a03000 	mov	r3, #0
  12d494:	e3833053 	orr	r3, r3, #83	; 0x53
  12d498:	e5c230ee 	strb	r3, [r2, #238]	; 0xee
  12d49c:	e3a03000 	mov	r3, #0
  12d4a0:	e3833063 	orr	r3, r3, #99	; 0x63
  12d4a4:	e5c230ef 	strb	r3, [r2, #239]	; 0xef
  dhcp->options_out_len = 0;
  12d4a8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d4ac:	e3a02000 	mov	r2, #0
  12d4b0:	e1c321b4 	strh	r2, [r3, #20]
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
  12d4b4:	e3a03000 	mov	r3, #0
  12d4b8:	e14b30be 	strh	r3, [fp, #-14]
  12d4bc:	ea00000a 	b	12d4ec <dhcp_create_msg+0x4a4>
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
  12d4c0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d4c4:	e5932010 	ldr	r2, [r3, #16]
  12d4c8:	e15b30be 	ldrh	r3, [fp, #-14]
  12d4cc:	e15b10be 	ldrh	r1, [fp, #-14]
  12d4d0:	e6ef1071 	uxtb	r1, r1
  12d4d4:	e0823003 	add	r3, r2, r3
  12d4d8:	e1a02001 	mov	r2, r1
  12d4dc:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
  12d4e0:	e15b30be 	ldrh	r3, [fp, #-14]
  12d4e4:	e2833001 	add	r3, r3, #1
  12d4e8:	e14b30be 	strh	r3, [fp, #-14]
  12d4ec:	e15b30be 	ldrh	r3, [fp, #-14]
  12d4f0:	e3530043 	cmp	r3, #67	; 0x43
  12d4f4:	9afffff1 	bls	12d4c0 <dhcp_create_msg+0x478>
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
  12d4f8:	e3a02001 	mov	r2, #1
  12d4fc:	e3a01035 	mov	r1, #53	; 0x35
  12d500:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12d504:	ebfffab7 	bl	12bfe8 <dhcp_option>
  dhcp_option_byte(dhcp, message_type);
  12d508:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12d50c:	e1a01003 	mov	r1, r3
  12d510:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12d514:	ebfffae3 	bl	12c0a8 <dhcp_option_byte>
  return ERR_OK;
  12d518:	e3a03000 	mov	r3, #0
}
  12d51c:	e1a00003 	mov	r0, r3
  12d520:	e24bd008 	sub	sp, fp, #8
  12d524:	e8bd8810 	pop	{r4, fp, pc}

0012d528 <dhcp_delete_msg>:
 *
 * @param dhcp the dhcp struct to free the request from
 */
static void
dhcp_delete_msg(struct dhcp *dhcp)
{
  12d528:	e92d4800 	push	{fp, lr}
  12d52c:	e28db004 	add	fp, sp, #4
  12d530:	e24dd008 	sub	sp, sp, #8
  12d534:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
  12d538:	e51b3008 	ldr	r3, [fp, #-8]
  12d53c:	e3530000 	cmp	r3, #0
  12d540:	1a000007 	bne	12d564 <dhcp_delete_msg+0x3c>
  12d544:	e3090148 	movw	r0, #37192	; 0x9148
  12d548:	e3400014 	movt	r0, #20
  12d54c:	ebff56f0 	bl	103114 <rt_kprintf>
  12d550:	e300176e 	movw	r1, #1902	; 0x76e
  12d554:	e3080d70 	movw	r0, #36208	; 0x8d70
  12d558:	e3400014 	movt	r0, #20
  12d55c:	ebff76e3 	bl	10b0f0 <sys_arch_assert>
  12d560:	ea000023 	b	12d5f4 <dhcp_delete_msg+0xcc>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
  12d564:	e51b3008 	ldr	r3, [fp, #-8]
  12d568:	e593300c 	ldr	r3, [r3, #12]
  12d56c:	e3530000 	cmp	r3, #0
  12d570:	1a000006 	bne	12d590 <dhcp_delete_msg+0x68>
  12d574:	e3090168 	movw	r0, #37224	; 0x9168
  12d578:	e3400014 	movt	r0, #20
  12d57c:	ebff56e4 	bl	103114 <rt_kprintf>
  12d580:	e300176f 	movw	r1, #1903	; 0x76f
  12d584:	e3080d70 	movw	r0, #36208	; 0x8d70
  12d588:	e3400014 	movt	r0, #20
  12d58c:	ebff76d7 	bl	10b0f0 <sys_arch_assert>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
  12d590:	e51b3008 	ldr	r3, [fp, #-8]
  12d594:	e5933010 	ldr	r3, [r3, #16]
  12d598:	e3530000 	cmp	r3, #0
  12d59c:	1a000006 	bne	12d5bc <dhcp_delete_msg+0x94>
  12d5a0:	e3090190 	movw	r0, #37264	; 0x9190
  12d5a4:	e3400014 	movt	r0, #20
  12d5a8:	ebff56d9 	bl	103114 <rt_kprintf>
  12d5ac:	e3a01e77 	mov	r1, #1904	; 0x770
  12d5b0:	e3080d70 	movw	r0, #36208	; 0x8d70
  12d5b4:	e3400014 	movt	r0, #20
  12d5b8:	ebff76cc 	bl	10b0f0 <sys_arch_assert>
  if (dhcp->p_out != NULL) {
  12d5bc:	e51b3008 	ldr	r3, [fp, #-8]
  12d5c0:	e593300c 	ldr	r3, [r3, #12]
  12d5c4:	e3530000 	cmp	r3, #0
  12d5c8:	0a000003 	beq	12d5dc <dhcp_delete_msg+0xb4>
    pbuf_free(dhcp->p_out);
  12d5cc:	e51b3008 	ldr	r3, [fp, #-8]
  12d5d0:	e593300c 	ldr	r3, [r3, #12]
  12d5d4:	e1a00003 	mov	r0, r3
  12d5d8:	ebffb634 	bl	11aeb0 <pbuf_free>
  }
  dhcp->p_out = NULL;
  12d5dc:	e51b3008 	ldr	r3, [fp, #-8]
  12d5e0:	e3a02000 	mov	r2, #0
  12d5e4:	e583200c 	str	r2, [r3, #12]
  dhcp->msg_out = NULL;
  12d5e8:	e51b3008 	ldr	r3, [fp, #-8]
  12d5ec:	e3a02000 	mov	r2, #0
  12d5f0:	e5832010 	str	r2, [r3, #16]
}
  12d5f4:	e24bd004 	sub	sp, fp, #4
  12d5f8:	e8bd8800 	pop	{fp, pc}

0012d5fc <dhcp_option_trailer>:
 *
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
  12d5fc:	e92d4800 	push	{fp, lr}
  12d600:	e28db004 	add	fp, sp, #4
  12d604:	e24dd008 	sub	sp, sp, #8
  12d608:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
  12d60c:	e51b3008 	ldr	r3, [fp, #-8]
  12d610:	e3530000 	cmp	r3, #0
  12d614:	1a000007 	bne	12d638 <dhcp_option_trailer+0x3c>
  12d618:	e30901b8 	movw	r0, #37304	; 0x91b8
  12d61c:	e3400014 	movt	r0, #20
  12d620:	ebff56bb 	bl	103114 <rt_kprintf>
  12d624:	e3001783 	movw	r1, #1923	; 0x783
  12d628:	e3080d70 	movw	r0, #36208	; 0x8d70
  12d62c:	e3400014 	movt	r0, #20
  12d630:	ebff76ae 	bl	10b0f0 <sys_arch_assert>
  12d634:	ea000039 	b	12d720 <dhcp_option_trailer+0x124>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
  12d638:	e51b3008 	ldr	r3, [fp, #-8]
  12d63c:	e5933010 	ldr	r3, [r3, #16]
  12d640:	e3530000 	cmp	r3, #0
  12d644:	1a000006 	bne	12d664 <dhcp_option_trailer+0x68>
  12d648:	e30901dc 	movw	r0, #37340	; 0x91dc
  12d64c:	e3400014 	movt	r0, #20
  12d650:	ebff56af 	bl	103114 <rt_kprintf>
  12d654:	e3001784 	movw	r1, #1924	; 0x784
  12d658:	e3080d70 	movw	r0, #36208	; 0x8d70
  12d65c:	e3400014 	movt	r0, #20
  12d660:	ebff76a2 	bl	10b0f0 <sys_arch_assert>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  12d664:	e51b3008 	ldr	r3, [fp, #-8]
  12d668:	e1d331b4 	ldrh	r3, [r3, #20]
  12d66c:	e3530043 	cmp	r3, #67	; 0x43
  12d670:	9a000006 	bls	12d690 <dhcp_option_trailer+0x94>
  12d674:	e3090208 	movw	r0, #37384	; 0x9208
  12d678:	e3400014 	movt	r0, #20
  12d67c:	ebff56a4 	bl	103114 <rt_kprintf>
  12d680:	e3001785 	movw	r1, #1925	; 0x785
  12d684:	e3080d70 	movw	r0, #36208	; 0x8d70
  12d688:	e3400014 	movt	r0, #20
  12d68c:	ebff7697 	bl	10b0f0 <sys_arch_assert>
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
  12d690:	e51b3008 	ldr	r3, [fp, #-8]
  12d694:	e5932010 	ldr	r2, [r3, #16]
  12d698:	e51b3008 	ldr	r3, [fp, #-8]
  12d69c:	e1d331b4 	ldrh	r3, [r3, #20]
  12d6a0:	e2831001 	add	r1, r3, #1
  12d6a4:	e6ff0071 	uxth	r0, r1
  12d6a8:	e51b1008 	ldr	r1, [fp, #-8]
  12d6ac:	e1c101b4 	strh	r0, [r1, #20]
  12d6b0:	e0823003 	add	r3, r2, r3
  12d6b4:	e3e02000 	mvn	r2, #0
  12d6b8:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
  12d6bc:	ea00000a 	b	12d6ec <dhcp_option_trailer+0xf0>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
  12d6c0:	e51b3008 	ldr	r3, [fp, #-8]
  12d6c4:	e5932010 	ldr	r2, [r3, #16]
  12d6c8:	e51b3008 	ldr	r3, [fp, #-8]
  12d6cc:	e1d331b4 	ldrh	r3, [r3, #20]
  12d6d0:	e2831001 	add	r1, r3, #1
  12d6d4:	e6ff0071 	uxth	r0, r1
  12d6d8:	e51b1008 	ldr	r1, [fp, #-8]
  12d6dc:	e1c101b4 	strh	r0, [r1, #20]
  12d6e0:	e0823003 	add	r3, r2, r3
  12d6e4:	e3a02000 	mov	r2, #0
  12d6e8:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
  12d6ec:	e51b3008 	ldr	r3, [fp, #-8]
  12d6f0:	e1d331b4 	ldrh	r3, [r3, #20]
  12d6f4:	e3530043 	cmp	r3, #67	; 0x43
  12d6f8:	9a000004 	bls	12d710 <dhcp_option_trailer+0x114>
  12d6fc:	e51b3008 	ldr	r3, [fp, #-8]
  12d700:	e1d331b4 	ldrh	r3, [r3, #20]
  12d704:	e2033003 	and	r3, r3, #3
  12d708:	e3530000 	cmp	r3, #0
  12d70c:	0a000003 	beq	12d720 <dhcp_option_trailer+0x124>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
  12d710:	e51b3008 	ldr	r3, [fp, #-8]
  12d714:	e1d331b4 	ldrh	r3, [r3, #20]
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
  12d718:	e3530043 	cmp	r3, #67	; 0x43
  12d71c:	9affffe7 	bls	12d6c0 <dhcp_option_trailer+0xc4>
  }
}
  12d720:	e24bd004 	sub	sp, fp, #4
  12d724:	e8bd8800 	pop	{fp, pc}

0012d728 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
  12d728:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  12d72c:	e28db000 	add	fp, sp, #0
  12d730:	e24dd014 	sub	sp, sp, #20
  12d734:	e50b0010 	str	r0, [fp, #-16]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
  12d738:	e51b3010 	ldr	r3, [fp, #-16]
  12d73c:	e3530000 	cmp	r3, #0
  12d740:	0a000013 	beq	12d794 <dhcp_supplied_address+0x6c>
  12d744:	e51b3010 	ldr	r3, [fp, #-16]
  12d748:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12d74c:	e3530000 	cmp	r3, #0
  12d750:	0a00000f 	beq	12d794 <dhcp_supplied_address+0x6c>
    struct dhcp* dhcp = netif_dhcp_data(netif);
  12d754:	e51b3010 	ldr	r3, [fp, #-16]
  12d758:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12d75c:	e50b3008 	str	r3, [fp, #-8]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING);
  12d760:	e51b3008 	ldr	r3, [fp, #-8]
  12d764:	e5d33009 	ldrb	r3, [r3, #9]
  12d768:	e353000a 	cmp	r3, #10
  12d76c:	0a000003 	beq	12d780 <dhcp_supplied_address+0x58>
  12d770:	e51b3008 	ldr	r3, [fp, #-8]
  12d774:	e5d33009 	ldrb	r3, [r3, #9]
  12d778:	e3530005 	cmp	r3, #5
  12d77c:	1a000001 	bne	12d788 <dhcp_supplied_address+0x60>
  12d780:	e3a03001 	mov	r3, #1
  12d784:	ea000000 	b	12d78c <dhcp_supplied_address+0x64>
  12d788:	e3a03000 	mov	r3, #0
  12d78c:	e6ef3073 	uxtb	r3, r3
  12d790:	ea000000 	b	12d798 <dhcp_supplied_address+0x70>
  }
  return 0;
  12d794:	e3a03000 	mov	r3, #0
}
  12d798:	e1a00003 	mov	r0, r3
  12d79c:	e28bd000 	add	sp, fp, #0
  12d7a0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  12d7a4:	e12fff1e 	bx	lr

0012d7a8 <free_etharp_q>:
 *
 * @param q a qeueue of etharp_q_entry's to free
 */
static void
free_etharp_q(struct etharp_q_entry *q)
{
  12d7a8:	e92d4800 	push	{fp, lr}
  12d7ac:	e28db004 	add	fp, sp, #4
  12d7b0:	e24dd010 	sub	sp, sp, #16
  12d7b4:	e50b0010 	str	r0, [fp, #-16]
  struct etharp_q_entry *r;
  LWIP_ASSERT("q != NULL", q != NULL);
  12d7b8:	e51b3010 	ldr	r3, [fp, #-16]
  12d7bc:	e3530000 	cmp	r3, #0
  12d7c0:	1a000006 	bne	12d7e0 <free_etharp_q+0x38>
  12d7c4:	e3090248 	movw	r0, #37448	; 0x9248
  12d7c8:	e3400014 	movt	r0, #20
  12d7cc:	ebff5650 	bl	103114 <rt_kprintf>
  12d7d0:	e3a01097 	mov	r1, #151	; 0x97
  12d7d4:	e3090254 	movw	r0, #37460	; 0x9254
  12d7d8:	e3400014 	movt	r0, #20
  12d7dc:	ebff7643 	bl	10b0f0 <sys_arch_assert>
  LWIP_ASSERT("q->p != NULL", q->p != NULL);
  12d7e0:	e51b3010 	ldr	r3, [fp, #-16]
  12d7e4:	e5933004 	ldr	r3, [r3, #4]
  12d7e8:	e3530000 	cmp	r3, #0
  12d7ec:	1a00001e 	bne	12d86c <free_etharp_q+0xc4>
  12d7f0:	e3090288 	movw	r0, #37512	; 0x9288
  12d7f4:	e3400014 	movt	r0, #20
  12d7f8:	ebff5645 	bl	103114 <rt_kprintf>
  12d7fc:	e3a01098 	mov	r1, #152	; 0x98
  12d800:	e3090254 	movw	r0, #37460	; 0x9254
  12d804:	e3400014 	movt	r0, #20
  12d808:	ebff7638 	bl	10b0f0 <sys_arch_assert>
  while (q) {
  12d80c:	ea000016 	b	12d86c <free_etharp_q+0xc4>
    r = q;
  12d810:	e51b3010 	ldr	r3, [fp, #-16]
  12d814:	e50b3008 	str	r3, [fp, #-8]
    q = q->next;
  12d818:	e51b3010 	ldr	r3, [fp, #-16]
  12d81c:	e5933000 	ldr	r3, [r3]
  12d820:	e50b3010 	str	r3, [fp, #-16]
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
  12d824:	e51b3008 	ldr	r3, [fp, #-8]
  12d828:	e5933004 	ldr	r3, [r3, #4]
  12d82c:	e3530000 	cmp	r3, #0
  12d830:	1a000006 	bne	12d850 <free_etharp_q+0xa8>
  12d834:	e3090298 	movw	r0, #37528	; 0x9298
  12d838:	e3400014 	movt	r0, #20
  12d83c:	ebff5634 	bl	103114 <rt_kprintf>
  12d840:	e3a0109c 	mov	r1, #156	; 0x9c
  12d844:	e3090254 	movw	r0, #37460	; 0x9254
  12d848:	e3400014 	movt	r0, #20
  12d84c:	ebff7627 	bl	10b0f0 <sys_arch_assert>
    pbuf_free(r->p);
  12d850:	e51b3008 	ldr	r3, [fp, #-8]
  12d854:	e5933004 	ldr	r3, [r3, #4]
  12d858:	e1a00003 	mov	r0, r3
  12d85c:	ebffb593 	bl	11aeb0 <pbuf_free>
    memp_free(MEMP_ARP_QUEUE, r);
  12d860:	e51b1008 	ldr	r1, [fp, #-8]
  12d864:	e3a0000b 	mov	r0, #11
  12d868:	ebffae82 	bl	119278 <memp_free>
  while (q) {
  12d86c:	e51b3010 	ldr	r3, [fp, #-16]
  12d870:	e3530000 	cmp	r3, #0
  12d874:	1affffe5 	bne	12d810 <free_etharp_q+0x68>
  }
}
  12d878:	e320f000 	nop	{0}
  12d87c:	e24bd004 	sub	sp, fp, #4
  12d880:	e8bd8800 	pop	{fp, pc}

0012d884 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
  12d884:	e92d4800 	push	{fp, lr}
  12d888:	e28db004 	add	fp, sp, #4
  12d88c:	e24dd008 	sub	sp, sp, #8
  12d890:	e50b0008 	str	r0, [fp, #-8]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
  12d894:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12d898:	e3403014 	movt	r3, #20
  12d89c:	e51b2008 	ldr	r2, [fp, #-8]
  12d8a0:	e3a01018 	mov	r1, #24
  12d8a4:	e0020291 	mul	r2, r1, r2
  12d8a8:	e0833002 	add	r3, r3, r2
  12d8ac:	e5933000 	ldr	r3, [r3]
  12d8b0:	e3530000 	cmp	r3, #0
  12d8b4:	0a000010 	beq	12d8fc <etharp_free_entry+0x78>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
  12d8b8:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12d8bc:	e3403014 	movt	r3, #20
  12d8c0:	e51b2008 	ldr	r2, [fp, #-8]
  12d8c4:	e3a01018 	mov	r1, #24
  12d8c8:	e0020291 	mul	r2, r1, r2
  12d8cc:	e0833002 	add	r3, r3, r2
  12d8d0:	e5933000 	ldr	r3, [r3]
  12d8d4:	e1a00003 	mov	r0, r3
  12d8d8:	ebffffb2 	bl	12d7a8 <free_etharp_q>
    arp_table[i].q = NULL;
  12d8dc:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12d8e0:	e3403014 	movt	r3, #20
  12d8e4:	e51b2008 	ldr	r2, [fp, #-8]
  12d8e8:	e3a01018 	mov	r1, #24
  12d8ec:	e0020291 	mul	r2, r1, r2
  12d8f0:	e0833002 	add	r3, r3, r2
  12d8f4:	e3a02000 	mov	r2, #0
  12d8f8:	e5832000 	str	r2, [r3]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
  12d8fc:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12d900:	e3403014 	movt	r3, #20
  12d904:	e51b2008 	ldr	r2, [fp, #-8]
  12d908:	e3a01018 	mov	r1, #24
  12d90c:	e0020291 	mul	r2, r1, r2
  12d910:	e0833002 	add	r3, r3, r2
  12d914:	e2833014 	add	r3, r3, #20
  12d918:	e3a02000 	mov	r2, #0
  12d91c:	e5c32000 	strb	r2, [r3]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
  12d920:	e320f000 	nop	{0}
  12d924:	e24bd004 	sub	sp, fp, #4
  12d928:	e8bd8800 	pop	{fp, pc}

0012d92c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
  12d92c:	e92d4800 	push	{fp, lr}
  12d930:	e28db004 	add	fp, sp, #4
  12d934:	e24dd008 	sub	sp, sp, #8
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  12d938:	e3a03000 	mov	r3, #0
  12d93c:	e54b3005 	strb	r3, [fp, #-5]
  12d940:	ea000084 	b	12db58 <etharp_tmr+0x22c>
    u8_t state = arp_table[i].state;
  12d944:	e55b2005 	ldrb	r2, [fp, #-5]
  12d948:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12d94c:	e3403014 	movt	r3, #20
  12d950:	e3a01018 	mov	r1, #24
  12d954:	e0020291 	mul	r2, r1, r2
  12d958:	e0833002 	add	r3, r3, r2
  12d95c:	e2833014 	add	r3, r3, #20
  12d960:	e5d33000 	ldrb	r3, [r3]
  12d964:	e54b3006 	strb	r3, [fp, #-6]
    if (state != ETHARP_STATE_EMPTY
  12d968:	e55b3006 	ldrb	r3, [fp, #-6]
  12d96c:	e3530000 	cmp	r3, #0
  12d970:	0a000075 	beq	12db4c <etharp_tmr+0x220>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
  12d974:	e55b2005 	ldrb	r2, [fp, #-5]
  12d978:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12d97c:	e3403014 	movt	r3, #20
  12d980:	e3a01018 	mov	r1, #24
  12d984:	e0010291 	mul	r1, r1, r2
  12d988:	e0833001 	add	r3, r3, r1
  12d98c:	e2833012 	add	r3, r3, #18
  12d990:	e1d330b0 	ldrh	r3, [r3]
  12d994:	e2833001 	add	r3, r3, #1
  12d998:	e6ff1073 	uxth	r1, r3
  12d99c:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12d9a0:	e3403014 	movt	r3, #20
  12d9a4:	e3a00018 	mov	r0, #24
  12d9a8:	e0020290 	mul	r2, r0, r2
  12d9ac:	e0833002 	add	r3, r3, r2
  12d9b0:	e2833012 	add	r3, r3, #18
  12d9b4:	e1c310b0 	strh	r1, [r3]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
  12d9b8:	e55b2005 	ldrb	r2, [fp, #-5]
  12d9bc:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12d9c0:	e3403014 	movt	r3, #20
  12d9c4:	e3a01018 	mov	r1, #24
  12d9c8:	e0020291 	mul	r2, r1, r2
  12d9cc:	e0833002 	add	r3, r3, r2
  12d9d0:	e2833012 	add	r3, r3, #18
  12d9d4:	e1d330b0 	ldrh	r3, [r3]
  12d9d8:	e3530f4b 	cmp	r3, #300	; 0x12c
  12d9dc:	2a000013 	bcs	12da30 <etharp_tmr+0x104>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
  12d9e0:	e55b2005 	ldrb	r2, [fp, #-5]
  12d9e4:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12d9e8:	e3403014 	movt	r3, #20
  12d9ec:	e3a01018 	mov	r1, #24
  12d9f0:	e0020291 	mul	r2, r1, r2
  12d9f4:	e0833002 	add	r3, r3, r2
  12d9f8:	e2833014 	add	r3, r3, #20
  12d9fc:	e5d33000 	ldrb	r3, [r3]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
  12da00:	e3530001 	cmp	r3, #1
  12da04:	1a00000d 	bne	12da40 <etharp_tmr+0x114>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
  12da08:	e55b2005 	ldrb	r2, [fp, #-5]
  12da0c:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12da10:	e3403014 	movt	r3, #20
  12da14:	e3a01018 	mov	r1, #24
  12da18:	e0020291 	mul	r2, r1, r2
  12da1c:	e0833002 	add	r3, r3, r2
  12da20:	e2833012 	add	r3, r3, #18
  12da24:	e1d330b0 	ldrh	r3, [r3]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
  12da28:	e3530004 	cmp	r3, #4
  12da2c:	9a000003 	bls	12da40 <etharp_tmr+0x114>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
  12da30:	e55b3005 	ldrb	r3, [fp, #-5]
  12da34:	e1a00003 	mov	r0, r3
  12da38:	ebffff91 	bl	12d884 <etharp_free_entry>
  12da3c:	ea000042 	b	12db4c <etharp_tmr+0x220>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
  12da40:	e55b2005 	ldrb	r2, [fp, #-5]
  12da44:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12da48:	e3403014 	movt	r3, #20
  12da4c:	e3a01018 	mov	r1, #24
  12da50:	e0020291 	mul	r2, r1, r2
  12da54:	e0833002 	add	r3, r3, r2
  12da58:	e2833014 	add	r3, r3, #20
  12da5c:	e5d33000 	ldrb	r3, [r3]
  12da60:	e3530003 	cmp	r3, #3
  12da64:	1a000009 	bne	12da90 <etharp_tmr+0x164>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
  12da68:	e55b2005 	ldrb	r2, [fp, #-5]
  12da6c:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12da70:	e3403014 	movt	r3, #20
  12da74:	e3a01018 	mov	r1, #24
  12da78:	e0020291 	mul	r2, r1, r2
  12da7c:	e0833002 	add	r3, r3, r2
  12da80:	e2833014 	add	r3, r3, #20
  12da84:	e3a02004 	mov	r2, #4
  12da88:	e5c32000 	strb	r2, [r3]
  12da8c:	ea00002e 	b	12db4c <etharp_tmr+0x220>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
  12da90:	e55b2005 	ldrb	r2, [fp, #-5]
  12da94:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12da98:	e3403014 	movt	r3, #20
  12da9c:	e3a01018 	mov	r1, #24
  12daa0:	e0020291 	mul	r2, r1, r2
  12daa4:	e0833002 	add	r3, r3, r2
  12daa8:	e2833014 	add	r3, r3, #20
  12daac:	e5d33000 	ldrb	r3, [r3]
  12dab0:	e3530004 	cmp	r3, #4
  12dab4:	1a000009 	bne	12dae0 <etharp_tmr+0x1b4>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
  12dab8:	e55b2005 	ldrb	r2, [fp, #-5]
  12dabc:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12dac0:	e3403014 	movt	r3, #20
  12dac4:	e3a01018 	mov	r1, #24
  12dac8:	e0020291 	mul	r2, r1, r2
  12dacc:	e0833002 	add	r3, r3, r2
  12dad0:	e2833014 	add	r3, r3, #20
  12dad4:	e3a02002 	mov	r2, #2
  12dad8:	e5c32000 	strb	r2, [r3]
  12dadc:	ea00001a 	b	12db4c <etharp_tmr+0x220>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
  12dae0:	e55b2005 	ldrb	r2, [fp, #-5]
  12dae4:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12dae8:	e3403014 	movt	r3, #20
  12daec:	e3a01018 	mov	r1, #24
  12daf0:	e0020291 	mul	r2, r1, r2
  12daf4:	e0833002 	add	r3, r3, r2
  12daf8:	e2833014 	add	r3, r3, #20
  12dafc:	e5d33000 	ldrb	r3, [r3]
  12db00:	e3530001 	cmp	r3, #1
  12db04:	1a000010 	bne	12db4c <etharp_tmr+0x220>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
  12db08:	e55b2005 	ldrb	r2, [fp, #-5]
  12db0c:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12db10:	e3403014 	movt	r3, #20
  12db14:	e3a01018 	mov	r1, #24
  12db18:	e0020291 	mul	r2, r1, r2
  12db1c:	e0833002 	add	r3, r3, r2
  12db20:	e2833008 	add	r3, r3, #8
  12db24:	e5930000 	ldr	r0, [r3]
  12db28:	e55b3005 	ldrb	r3, [fp, #-5]
  12db2c:	e3a02018 	mov	r2, #24
  12db30:	e0020392 	mul	r2, r2, r3
  12db34:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12db38:	e3403014 	movt	r3, #20
  12db3c:	e0823003 	add	r3, r2, r3
  12db40:	e2833004 	add	r3, r3, #4
  12db44:	e1a01003 	mov	r1, r3
  12db48:	eb00066b 	bl	12f4fc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  12db4c:	e55b3005 	ldrb	r3, [fp, #-5]
  12db50:	e2833001 	add	r3, r3, #1
  12db54:	e54b3005 	strb	r3, [fp, #-5]
  12db58:	e55b3005 	ldrb	r3, [fp, #-5]
  12db5c:	e3530009 	cmp	r3, #9
  12db60:	9affff77 	bls	12d944 <etharp_tmr+0x18>
      }
    }
  }
}
  12db64:	e320f000 	nop	{0}
  12db68:	e24bd004 	sub	sp, fp, #4
  12db6c:	e8bd8800 	pop	{fp, pc}

0012db70 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
  12db70:	e92d4800 	push	{fp, lr}
  12db74:	e28db004 	add	fp, sp, #4
  12db78:	e24dd020 	sub	sp, sp, #32
  12db7c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12db80:	e1a03001 	mov	r3, r1
  12db84:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  12db88:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  12db8c:	e3a0300a 	mov	r3, #10
  12db90:	e54b3005 	strb	r3, [fp, #-5]
  12db94:	e3a0300a 	mov	r3, #10
  12db98:	e54b3006 	strb	r3, [fp, #-6]
  s8_t empty = ARP_TABLE_SIZE;
  12db9c:	e3a0300a 	mov	r3, #10
  12dba0:	e54b3007 	strb	r3, [fp, #-7]
  u8_t i = 0;
  12dba4:	e3a03000 	mov	r3, #0
  12dba8:	e54b3008 	strb	r3, [fp, #-8]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
  12dbac:	e3a0300a 	mov	r3, #10
  12dbb0:	e54b3009 	strb	r3, [fp, #-9]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
  12dbb4:	e3a03000 	mov	r3, #0
  12dbb8:	e14b30bc 	strh	r3, [fp, #-12]
  12dbbc:	e3a03000 	mov	r3, #0
  12dbc0:	e14b30be 	strh	r3, [fp, #-14]
  12dbc4:	e3a03000 	mov	r3, #0
  12dbc8:	e14b31b0 	strh	r3, [fp, #-16]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  12dbcc:	e3a03000 	mov	r3, #0
  12dbd0:	e54b3008 	strb	r3, [fp, #-8]
  12dbd4:	ea000088 	b	12ddfc <etharp_find_entry+0x28c>
    u8_t state = arp_table[i].state;
  12dbd8:	e55b2008 	ldrb	r2, [fp, #-8]
  12dbdc:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12dbe0:	e3403014 	movt	r3, #20
  12dbe4:	e3a01018 	mov	r1, #24
  12dbe8:	e0020291 	mul	r2, r1, r2
  12dbec:	e0833002 	add	r3, r3, r2
  12dbf0:	e2833014 	add	r3, r3, #20
  12dbf4:	e5d33000 	ldrb	r3, [r3]
  12dbf8:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
  12dbfc:	e15b30d7 	ldrsb	r3, [fp, #-7]
  12dc00:	e353000a 	cmp	r3, #10
  12dc04:	1a000005 	bne	12dc20 <etharp_find_entry+0xb0>
  12dc08:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  12dc0c:	e3530000 	cmp	r3, #0
  12dc10:	1a000002 	bne	12dc20 <etharp_find_entry+0xb0>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
  12dc14:	e55b3008 	ldrb	r3, [fp, #-8]
  12dc18:	e54b3007 	strb	r3, [fp, #-7]
  12dc1c:	ea000073 	b	12ddf0 <etharp_find_entry+0x280>
    } else if (state != ETHARP_STATE_EMPTY) {
  12dc20:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  12dc24:	e3530000 	cmp	r3, #0
  12dc28:	0a000070 	beq	12ddf0 <etharp_find_entry+0x280>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
  12dc2c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  12dc30:	e3530001 	cmp	r3, #1
  12dc34:	0a000009 	beq	12dc60 <etharp_find_entry+0xf0>
  12dc38:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  12dc3c:	e3530001 	cmp	r3, #1
  12dc40:	8a000006 	bhi	12dc60 <etharp_find_entry+0xf0>
  12dc44:	e30902a8 	movw	r0, #37544	; 0x92a8
  12dc48:	e3400014 	movt	r0, #20
  12dc4c:	ebff5530 	bl	103114 <rt_kprintf>
  12dc50:	e3001126 	movw	r1, #294	; 0x126
  12dc54:	e3090254 	movw	r0, #37460	; 0x9254
  12dc58:	e3400014 	movt	r0, #20
  12dc5c:	ebff7523 	bl	10b0f0 <sys_arch_assert>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
  12dc60:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12dc64:	e3530000 	cmp	r3, #0
  12dc68:	0a00000d 	beq	12dca4 <etharp_find_entry+0x134>
  12dc6c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12dc70:	e5932000 	ldr	r2, [r3]
  12dc74:	e55b1008 	ldrb	r1, [fp, #-8]
  12dc78:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12dc7c:	e3403014 	movt	r3, #20
  12dc80:	e3a00018 	mov	r0, #24
  12dc84:	e0010190 	mul	r1, r0, r1
  12dc88:	e0833001 	add	r3, r3, r1
  12dc8c:	e2833004 	add	r3, r3, #4
  12dc90:	e5933000 	ldr	r3, [r3]
  12dc94:	e1520003 	cmp	r2, r3
  12dc98:	1a000001 	bne	12dca4 <etharp_find_entry+0x134>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
  12dc9c:	e15b30d8 	ldrsb	r3, [fp, #-8]
  12dca0:	ea0000ce 	b	12dfe0 <etharp_find_entry+0x470>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
  12dca4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  12dca8:	e3530001 	cmp	r3, #1
  12dcac:	1a000036 	bne	12dd8c <etharp_find_entry+0x21c>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
  12dcb0:	e55b2008 	ldrb	r2, [fp, #-8]
  12dcb4:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12dcb8:	e3403014 	movt	r3, #20
  12dcbc:	e3a01018 	mov	r1, #24
  12dcc0:	e0020291 	mul	r2, r1, r2
  12dcc4:	e0833002 	add	r3, r3, r2
  12dcc8:	e5933000 	ldr	r3, [r3]
  12dccc:	e3530000 	cmp	r3, #0
  12dcd0:	0a000016 	beq	12dd30 <etharp_find_entry+0x1c0>
          if (arp_table[i].ctime >= age_queue) {
  12dcd4:	e55b2008 	ldrb	r2, [fp, #-8]
  12dcd8:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12dcdc:	e3403014 	movt	r3, #20
  12dce0:	e3a01018 	mov	r1, #24
  12dce4:	e0020291 	mul	r2, r1, r2
  12dce8:	e0833002 	add	r3, r3, r2
  12dcec:	e2833012 	add	r3, r3, #18
  12dcf0:	e1d330b0 	ldrh	r3, [r3]
  12dcf4:	e15b20bc 	ldrh	r2, [fp, #-12]
  12dcf8:	e1520003 	cmp	r2, r3
  12dcfc:	8a00003b 	bhi	12ddf0 <etharp_find_entry+0x280>
            old_queue = i;
  12dd00:	e55b3008 	ldrb	r3, [fp, #-8]
  12dd04:	e54b3009 	strb	r3, [fp, #-9]
            age_queue = arp_table[i].ctime;
  12dd08:	e55b2008 	ldrb	r2, [fp, #-8]
  12dd0c:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12dd10:	e3403014 	movt	r3, #20
  12dd14:	e3a01018 	mov	r1, #24
  12dd18:	e0020291 	mul	r2, r1, r2
  12dd1c:	e0833002 	add	r3, r3, r2
  12dd20:	e2833012 	add	r3, r3, #18
  12dd24:	e1d330b0 	ldrh	r3, [r3]
  12dd28:	e14b30bc 	strh	r3, [fp, #-12]
  12dd2c:	ea00002f 	b	12ddf0 <etharp_find_entry+0x280>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
  12dd30:	e55b2008 	ldrb	r2, [fp, #-8]
  12dd34:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12dd38:	e3403014 	movt	r3, #20
  12dd3c:	e3a01018 	mov	r1, #24
  12dd40:	e0020291 	mul	r2, r1, r2
  12dd44:	e0833002 	add	r3, r3, r2
  12dd48:	e2833012 	add	r3, r3, #18
  12dd4c:	e1d330b0 	ldrh	r3, [r3]
  12dd50:	e15b20be 	ldrh	r2, [fp, #-14]
  12dd54:	e1520003 	cmp	r2, r3
  12dd58:	8a000024 	bhi	12ddf0 <etharp_find_entry+0x280>
            old_pending = i;
  12dd5c:	e55b3008 	ldrb	r3, [fp, #-8]
  12dd60:	e54b3005 	strb	r3, [fp, #-5]
            age_pending = arp_table[i].ctime;
  12dd64:	e55b2008 	ldrb	r2, [fp, #-8]
  12dd68:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12dd6c:	e3403014 	movt	r3, #20
  12dd70:	e3a01018 	mov	r1, #24
  12dd74:	e0020291 	mul	r2, r1, r2
  12dd78:	e0833002 	add	r3, r3, r2
  12dd7c:	e2833012 	add	r3, r3, #18
  12dd80:	e1d330b0 	ldrh	r3, [r3]
  12dd84:	e14b30be 	strh	r3, [fp, #-14]
  12dd88:	ea000018 	b	12ddf0 <etharp_find_entry+0x280>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
  12dd8c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  12dd90:	e3530001 	cmp	r3, #1
  12dd94:	9a000015 	bls	12ddf0 <etharp_find_entry+0x280>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
  12dd98:	e55b2008 	ldrb	r2, [fp, #-8]
  12dd9c:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12dda0:	e3403014 	movt	r3, #20
  12dda4:	e3a01018 	mov	r1, #24
  12dda8:	e0020291 	mul	r2, r1, r2
  12ddac:	e0833002 	add	r3, r3, r2
  12ddb0:	e2833012 	add	r3, r3, #18
  12ddb4:	e1d330b0 	ldrh	r3, [r3]
  12ddb8:	e15b21b0 	ldrh	r2, [fp, #-16]
  12ddbc:	e1520003 	cmp	r2, r3
  12ddc0:	8a00000a 	bhi	12ddf0 <etharp_find_entry+0x280>
            old_stable = i;
  12ddc4:	e55b3008 	ldrb	r3, [fp, #-8]
  12ddc8:	e54b3006 	strb	r3, [fp, #-6]
            age_stable = arp_table[i].ctime;
  12ddcc:	e55b2008 	ldrb	r2, [fp, #-8]
  12ddd0:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12ddd4:	e3403014 	movt	r3, #20
  12ddd8:	e3a01018 	mov	r1, #24
  12dddc:	e0020291 	mul	r2, r1, r2
  12dde0:	e0833002 	add	r3, r3, r2
  12dde4:	e2833012 	add	r3, r3, #18
  12dde8:	e1d330b0 	ldrh	r3, [r3]
  12ddec:	e14b31b0 	strh	r3, [fp, #-16]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  12ddf0:	e55b3008 	ldrb	r3, [fp, #-8]
  12ddf4:	e2833001 	add	r3, r3, #1
  12ddf8:	e54b3008 	strb	r3, [fp, #-8]
  12ddfc:	e55b3008 	ldrb	r3, [fp, #-8]
  12de00:	e3530009 	cmp	r3, #9
  12de04:	9affff73 	bls	12dbd8 <etharp_find_entry+0x68>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
  12de08:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
  12de0c:	e2033002 	and	r3, r3, #2
  12de10:	e3530000 	cmp	r3, #0
  12de14:	1a000006 	bne	12de34 <etharp_find_entry+0x2c4>
  12de18:	e15b30d7 	ldrsb	r3, [fp, #-7]
  12de1c:	e353000a 	cmp	r3, #10
  12de20:	1a000005 	bne	12de3c <etharp_find_entry+0x2cc>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
  12de24:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
  12de28:	e2033001 	and	r3, r3, #1
  12de2c:	e3530000 	cmp	r3, #0
  12de30:	1a000001 	bne	12de3c <etharp_find_entry+0x2cc>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
  12de34:	e3e03000 	mvn	r3, #0
  12de38:	ea000068 	b	12dfe0 <etharp_find_entry+0x470>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
  12de3c:	e15b30d7 	ldrsb	r3, [fp, #-7]
  12de40:	e3530009 	cmp	r3, #9
  12de44:	ca000002 	bgt	12de54 <etharp_find_entry+0x2e4>
    i = empty;
  12de48:	e55b3007 	ldrb	r3, [fp, #-7]
  12de4c:	e54b3008 	strb	r3, [fp, #-8]
  12de50:	ea000030 	b	12df18 <etharp_find_entry+0x3a8>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
  12de54:	e15b30d6 	ldrsb	r3, [fp, #-6]
  12de58:	e3530009 	cmp	r3, #9
  12de5c:	ca000012 	bgt	12deac <etharp_find_entry+0x33c>
      /* recycle oldest stable*/
      i = old_stable;
  12de60:	e55b3006 	ldrb	r3, [fp, #-6]
  12de64:	e54b3008 	strb	r3, [fp, #-8]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
  12de68:	e55b2008 	ldrb	r2, [fp, #-8]
  12de6c:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12de70:	e3403014 	movt	r3, #20
  12de74:	e3a01018 	mov	r1, #24
  12de78:	e0020291 	mul	r2, r1, r2
  12de7c:	e0833002 	add	r3, r3, r2
  12de80:	e5933000 	ldr	r3, [r3]
  12de84:	e3530000 	cmp	r3, #0
  12de88:	0a000015 	beq	12dee4 <etharp_find_entry+0x374>
  12de8c:	e30902e8 	movw	r0, #37608	; 0x92e8
  12de90:	e3400014 	movt	r0, #20
  12de94:	ebff549e 	bl	103114 <rt_kprintf>
  12de98:	e300116f 	movw	r1, #367	; 0x16f
  12de9c:	e3090254 	movw	r0, #37460	; 0x9254
  12dea0:	e3400014 	movt	r0, #20
  12dea4:	ebff7491 	bl	10b0f0 <sys_arch_assert>
  12dea8:	ea00000d 	b	12dee4 <etharp_find_entry+0x374>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
  12deac:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12deb0:	e3530009 	cmp	r3, #9
  12deb4:	ca000002 	bgt	12dec4 <etharp_find_entry+0x354>
      /* recycle oldest pending */
      i = old_pending;
  12deb8:	e55b3005 	ldrb	r3, [fp, #-5]
  12debc:	e54b3008 	strb	r3, [fp, #-8]
  12dec0:	ea000007 	b	12dee4 <etharp_find_entry+0x374>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
  12dec4:	e15b30d9 	ldrsb	r3, [fp, #-9]
  12dec8:	e3530009 	cmp	r3, #9
  12decc:	ca000002 	bgt	12dedc <etharp_find_entry+0x36c>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
  12ded0:	e55b3009 	ldrb	r3, [fp, #-9]
  12ded4:	e54b3008 	strb	r3, [fp, #-8]
  12ded8:	ea000001 	b	12dee4 <etharp_find_entry+0x374>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
  12dedc:	e3e03000 	mvn	r3, #0
  12dee0:	ea00003e 	b	12dfe0 <etharp_find_entry+0x470>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  12dee4:	e55b3008 	ldrb	r3, [fp, #-8]
  12dee8:	e3530009 	cmp	r3, #9
  12deec:	9a000006 	bls	12df0c <etharp_find_entry+0x39c>
  12def0:	e3090300 	movw	r0, #37632	; 0x9300
  12def4:	e3400014 	movt	r0, #20
  12def8:	ebff5485 	bl	103114 <rt_kprintf>
  12defc:	e3001181 	movw	r1, #385	; 0x181
  12df00:	e3090254 	movw	r0, #37460	; 0x9254
  12df04:	e3400014 	movt	r0, #20
  12df08:	ebff7478 	bl	10b0f0 <sys_arch_assert>
    etharp_free_entry(i);
  12df0c:	e55b3008 	ldrb	r3, [fp, #-8]
  12df10:	e1a00003 	mov	r0, r3
  12df14:	ebfffe5a 	bl	12d884 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  12df18:	e55b3008 	ldrb	r3, [fp, #-8]
  12df1c:	e3530009 	cmp	r3, #9
  12df20:	9a000006 	bls	12df40 <etharp_find_entry+0x3d0>
  12df24:	e3090300 	movw	r0, #37632	; 0x9300
  12df28:	e3400014 	movt	r0, #20
  12df2c:	ebff5478 	bl	103114 <rt_kprintf>
  12df30:	e3001185 	movw	r1, #389	; 0x185
  12df34:	e3090254 	movw	r0, #37460	; 0x9254
  12df38:	e3400014 	movt	r0, #20
  12df3c:	ebff746b 	bl	10b0f0 <sys_arch_assert>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
  12df40:	e55b2008 	ldrb	r2, [fp, #-8]
  12df44:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12df48:	e3403014 	movt	r3, #20
  12df4c:	e3a01018 	mov	r1, #24
  12df50:	e0020291 	mul	r2, r1, r2
  12df54:	e0833002 	add	r3, r3, r2
  12df58:	e2833014 	add	r3, r3, #20
  12df5c:	e5d33000 	ldrb	r3, [r3]
  12df60:	e3530000 	cmp	r3, #0
  12df64:	0a000006 	beq	12df84 <etharp_find_entry+0x414>
  12df68:	e3090314 	movw	r0, #37652	; 0x9314
  12df6c:	e3400014 	movt	r0, #20
  12df70:	ebff5467 	bl	103114 <rt_kprintf>
  12df74:	e3001187 	movw	r1, #391	; 0x187
  12df78:	e3090254 	movw	r0, #37460	; 0x9254
  12df7c:	e3400014 	movt	r0, #20
  12df80:	ebff745a 	bl	10b0f0 <sys_arch_assert>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
  12df84:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12df88:	e3530000 	cmp	r3, #0
  12df8c:	0a000009 	beq	12dfb8 <etharp_find_entry+0x448>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
  12df90:	e55b1008 	ldrb	r1, [fp, #-8]
  12df94:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12df98:	e5932000 	ldr	r2, [r3]
  12df9c:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12dfa0:	e3403014 	movt	r3, #20
  12dfa4:	e3a00018 	mov	r0, #24
  12dfa8:	e0010190 	mul	r1, r0, r1
  12dfac:	e0833001 	add	r3, r3, r1
  12dfb0:	e2833004 	add	r3, r3, #4
  12dfb4:	e5832000 	str	r2, [r3]
  }
  arp_table[i].ctime = 0;
  12dfb8:	e55b2008 	ldrb	r2, [fp, #-8]
  12dfbc:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12dfc0:	e3403014 	movt	r3, #20
  12dfc4:	e3a01018 	mov	r1, #24
  12dfc8:	e0020291 	mul	r2, r1, r2
  12dfcc:	e0833002 	add	r3, r3, r2
  12dfd0:	e2833012 	add	r3, r3, #18
  12dfd4:	e3a02000 	mov	r2, #0
  12dfd8:	e1c320b0 	strh	r2, [r3]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
  12dfdc:	e15b30d8 	ldrsb	r3, [fp, #-8]
}
  12dfe0:	e1a00003 	mov	r0, r3
  12dfe4:	e24bd004 	sub	sp, fp, #4
  12dfe8:	e8bd8800 	pop	{fp, pc}

0012dfec <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
  12dfec:	e92d4800 	push	{fp, lr}
  12dff0:	e28db004 	add	fp, sp, #4
  12dff4:	e24dd028 	sub	sp, sp, #40	; 0x28
  12dff8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12dffc:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  12e000:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  12e004:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
  12e008:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12e00c:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
  12e010:	e3530006 	cmp	r3, #6
  12e014:	0a000006 	beq	12e034 <etharp_update_arp_entry+0x48>
  12e018:	e3090340 	movw	r0, #37696	; 0x9340
  12e01c:	e3400014 	movt	r0, #20
  12e020:	ebff543b 	bl	103114 <rt_kprintf>
  12e024:	e30011ab 	movw	r1, #427	; 0x1ab
  12e028:	e3090254 	movw	r0, #37460	; 0x9254
  12e02c:	e3400014 	movt	r0, #20
  12e030:	ebff742e 	bl	10b0f0 <sys_arch_assert>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
  12e034:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e038:	e3530000 	cmp	r3, #0
  12e03c:	0a000010 	beq	12e084 <etharp_update_arp_entry+0x98>
  12e040:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e044:	e5933000 	ldr	r3, [r3]
  12e048:	e3530000 	cmp	r3, #0
  12e04c:	0a00000c 	beq	12e084 <etharp_update_arp_entry+0x98>
      ip4_addr_isbroadcast(ipaddr, netif) ||
  12e050:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e054:	e5933000 	ldr	r3, [r3]
  12e058:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  12e05c:	e1a00003 	mov	r0, r3
  12e060:	eb00112a 	bl	132510 <ip4_addr_isbroadcast_u32>
  12e064:	e1a03000 	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
  12e068:	e3530000 	cmp	r3, #0
  12e06c:	1a000004 	bne	12e084 <etharp_update_arp_entry+0x98>
      ip4_addr_ismulticast(ipaddr)) {
  12e070:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e074:	e5933000 	ldr	r3, [r3]
  12e078:	e20330f0 	and	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
  12e07c:	e35300e0 	cmp	r3, #224	; 0xe0
  12e080:	1a000001 	bne	12e08c <etharp_update_arp_entry+0xa0>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
  12e084:	e3e0300f 	mvn	r3, #15
  12e088:	ea00005e 	b	12e208 <etharp_update_arp_entry+0x21c>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
  12e08c:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  12e090:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  12e094:	e1a01003 	mov	r1, r3
  12e098:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12e09c:	ebfffeb3 	bl	12db70 <etharp_find_entry>
  12e0a0:	e1a03000 	mov	r3, r0
  12e0a4:	e54b3005 	strb	r3, [fp, #-5]
  /* bail out if no entry could be found */
  if (i < 0) {
  12e0a8:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12e0ac:	e3530000 	cmp	r3, #0
  12e0b0:	aa000001 	bge	12e0bc <etharp_update_arp_entry+0xd0>
    return (err_t)i;
  12e0b4:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12e0b8:	ea000052 	b	12e208 <etharp_update_arp_entry+0x21c>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
  12e0bc:	e15b20d5 	ldrsb	r2, [fp, #-5]
  12e0c0:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12e0c4:	e3403014 	movt	r3, #20
  12e0c8:	e3a01018 	mov	r1, #24
  12e0cc:	e0020291 	mul	r2, r1, r2
  12e0d0:	e0833002 	add	r3, r3, r2
  12e0d4:	e2833014 	add	r3, r3, #20
  12e0d8:	e3a02002 	mov	r2, #2
  12e0dc:	e5c32000 	strb	r2, [r3]
  }

  /* record network interface */
  arp_table[i].netif = netif;
  12e0e0:	e15b20d5 	ldrsb	r2, [fp, #-5]
  12e0e4:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12e0e8:	e3403014 	movt	r3, #20
  12e0ec:	e3a01018 	mov	r1, #24
  12e0f0:	e0020291 	mul	r2, r1, r2
  12e0f4:	e0833002 	add	r3, r3, r2
  12e0f8:	e2833008 	add	r3, r3, #8
  12e0fc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  12e100:	e5832000 	str	r2, [r3]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
  12e104:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12e108:	e3a02018 	mov	r2, #24
  12e10c:	e0030392 	mul	r3, r2, r3
  12e110:	e2832008 	add	r2, r3, #8
  12e114:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12e118:	e3403014 	movt	r3, #20
  12e11c:	e0823003 	add	r3, r2, r3
  12e120:	e2833004 	add	r3, r3, #4
  12e124:	e3a02006 	mov	r2, #6
  12e128:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  12e12c:	e1a00003 	mov	r0, r3
  12e130:	eb004b17 	bl	140d94 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
  12e134:	e15b20d5 	ldrsb	r2, [fp, #-5]
  12e138:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12e13c:	e3403014 	movt	r3, #20
  12e140:	e3a01018 	mov	r1, #24
  12e144:	e0020291 	mul	r2, r1, r2
  12e148:	e0833002 	add	r3, r3, r2
  12e14c:	e2833012 	add	r3, r3, #18
  12e150:	e3a02000 	mov	r2, #0
  12e154:	e1c320b0 	strh	r2, [r3]
  /* this is where we will send out queued packets! */
#if ARP_QUEUEING
  while (arp_table[i].q != NULL) {
  12e158:	ea000020 	b	12e1e0 <etharp_update_arp_entry+0x1f4>
    struct pbuf *p;
    /* remember remainder of queue */
    struct etharp_q_entry *q = arp_table[i].q;
  12e15c:	e15b20d5 	ldrsb	r2, [fp, #-5]
  12e160:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12e164:	e3403014 	movt	r3, #20
  12e168:	e3a01018 	mov	r1, #24
  12e16c:	e0020291 	mul	r2, r1, r2
  12e170:	e0833002 	add	r3, r3, r2
  12e174:	e5933000 	ldr	r3, [r3]
  12e178:	e50b300c 	str	r3, [fp, #-12]
    /* pop first item off the queue */
    arp_table[i].q = q->next;
  12e17c:	e15b10d5 	ldrsb	r1, [fp, #-5]
  12e180:	e51b300c 	ldr	r3, [fp, #-12]
  12e184:	e5932000 	ldr	r2, [r3]
  12e188:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12e18c:	e3403014 	movt	r3, #20
  12e190:	e3a00018 	mov	r0, #24
  12e194:	e0010190 	mul	r1, r0, r1
  12e198:	e0833001 	add	r3, r3, r1
  12e19c:	e5832000 	str	r2, [r3]
    /* get the packet pointer */
    p = q->p;
  12e1a0:	e51b300c 	ldr	r3, [fp, #-12]
  12e1a4:	e5933004 	ldr	r3, [r3, #4]
  12e1a8:	e50b3010 	str	r3, [fp, #-16]
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
  12e1ac:	e51b100c 	ldr	r1, [fp, #-12]
  12e1b0:	e3a0000b 	mov	r0, #11
  12e1b4:	ebffac2f 	bl	119278 <memp_free>
  if (arp_table[i].q != NULL) {
    struct pbuf *p = arp_table[i].q;
    arp_table[i].q = NULL;
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
  12e1b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12e1bc:	e283203b 	add	r2, r3, #59	; 0x3b
  12e1c0:	e3a03b02 	mov	r3, #2048	; 0x800
  12e1c4:	e58d3000 	str	r3, [sp]
  12e1c8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12e1cc:	e51b1010 	ldr	r1, [fp, #-16]
  12e1d0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12e1d4:	ebffeb48 	bl	128efc <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
  12e1d8:	e51b0010 	ldr	r0, [fp, #-16]
  12e1dc:	ebffb333 	bl	11aeb0 <pbuf_free>
  while (arp_table[i].q != NULL) {
  12e1e0:	e15b20d5 	ldrsb	r2, [fp, #-5]
  12e1e4:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12e1e8:	e3403014 	movt	r3, #20
  12e1ec:	e3a01018 	mov	r1, #24
  12e1f0:	e0020291 	mul	r2, r1, r2
  12e1f4:	e0833002 	add	r3, r3, r2
  12e1f8:	e5933000 	ldr	r3, [r3]
  12e1fc:	e3530000 	cmp	r3, #0
  12e200:	1affffd5 	bne	12e15c <etharp_update_arp_entry+0x170>
  }
  return ERR_OK;
  12e204:	e3a03000 	mov	r3, #0
}
  12e208:	e1a00003 	mov	r0, r3
  12e20c:	e24bd004 	sub	sp, fp, #4
  12e210:	e8bd8800 	pop	{fp, pc}

0012e214 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
  12e214:	e92d4800 	push	{fp, lr}
  12e218:	e28db004 	add	fp, sp, #4
  12e21c:	e24dd010 	sub	sp, sp, #16
  12e220:	e50b0010 	str	r0, [fp, #-16]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  12e224:	e3a03000 	mov	r3, #0
  12e228:	e54b3005 	strb	r3, [fp, #-5]
  12e22c:	ea00001c 	b	12e2a4 <etharp_cleanup_netif+0x90>
    u8_t state = arp_table[i].state;
  12e230:	e55b2005 	ldrb	r2, [fp, #-5]
  12e234:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12e238:	e3403014 	movt	r3, #20
  12e23c:	e3a01018 	mov	r1, #24
  12e240:	e0020291 	mul	r2, r1, r2
  12e244:	e0833002 	add	r3, r3, r2
  12e248:	e2833014 	add	r3, r3, #20
  12e24c:	e5d33000 	ldrb	r3, [r3]
  12e250:	e54b3006 	strb	r3, [fp, #-6]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
  12e254:	e55b3006 	ldrb	r3, [fp, #-6]
  12e258:	e3530000 	cmp	r3, #0
  12e25c:	0a00000d 	beq	12e298 <etharp_cleanup_netif+0x84>
  12e260:	e55b2005 	ldrb	r2, [fp, #-5]
  12e264:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12e268:	e3403014 	movt	r3, #20
  12e26c:	e3a01018 	mov	r1, #24
  12e270:	e0020291 	mul	r2, r1, r2
  12e274:	e0833002 	add	r3, r3, r2
  12e278:	e2833008 	add	r3, r3, #8
  12e27c:	e5933000 	ldr	r3, [r3]
  12e280:	e51b2010 	ldr	r2, [fp, #-16]
  12e284:	e1520003 	cmp	r2, r3
  12e288:	1a000002 	bne	12e298 <etharp_cleanup_netif+0x84>
      etharp_free_entry(i);
  12e28c:	e55b3005 	ldrb	r3, [fp, #-5]
  12e290:	e1a00003 	mov	r0, r3
  12e294:	ebfffd7a 	bl	12d884 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  12e298:	e55b3005 	ldrb	r3, [fp, #-5]
  12e29c:	e2833001 	add	r3, r3, #1
  12e2a0:	e54b3005 	strb	r3, [fp, #-5]
  12e2a4:	e55b3005 	ldrb	r3, [fp, #-5]
  12e2a8:	e3530009 	cmp	r3, #9
  12e2ac:	9affffdf 	bls	12e230 <etharp_cleanup_netif+0x1c>
    }
  }
}
  12e2b0:	e320f000 	nop	{0}
  12e2b4:	e24bd004 	sub	sp, fp, #4
  12e2b8:	e8bd8800 	pop	{fp, pc}

0012e2bc <etharp_find_addr>:
 * @return table index if found, -1 otherwise
 */
s8_t
etharp_find_addr(struct netif *netif, const ip4_addr_t *ipaddr,
         struct eth_addr **eth_ret, const ip4_addr_t **ip_ret)
{
  12e2bc:	e92d4800 	push	{fp, lr}
  12e2c0:	e28db004 	add	fp, sp, #4
  12e2c4:	e24dd018 	sub	sp, sp, #24
  12e2c8:	e50b0010 	str	r0, [fp, #-16]
  12e2cc:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  12e2d0:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  12e2d4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  s8_t i;

  LWIP_ASSERT("eth_ret != NULL && ip_ret != NULL",
  12e2d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12e2dc:	e3530000 	cmp	r3, #0
  12e2e0:	0a000002 	beq	12e2f0 <etharp_find_addr+0x34>
  12e2e4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e2e8:	e3530000 	cmp	r3, #0
  12e2ec:	1a000006 	bne	12e30c <etharp_find_addr+0x50>
  12e2f0:	e3090364 	movw	r0, #37732	; 0x9364
  12e2f4:	e3400014 	movt	r0, #20
  12e2f8:	ebff5385 	bl	103114 <rt_kprintf>
  12e2fc:	e300124d 	movw	r1, #589	; 0x24d
  12e300:	e3090254 	movw	r0, #37460	; 0x9254
  12e304:	e3400014 	movt	r0, #20
  12e308:	ebff7378 	bl	10b0f0 <sys_arch_assert>
    eth_ret != NULL && ip_ret != NULL);

  LWIP_UNUSED_ARG(netif);

  i = etharp_find_entry(ipaddr, ETHARP_FLAG_FIND_ONLY, netif);
  12e30c:	e51b2010 	ldr	r2, [fp, #-16]
  12e310:	e3a01002 	mov	r1, #2
  12e314:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  12e318:	ebfffe14 	bl	12db70 <etharp_find_entry>
  12e31c:	e1a03000 	mov	r3, r0
  12e320:	e54b3005 	strb	r3, [fp, #-5]
  if ((i >= 0) && (arp_table[i].state >= ETHARP_STATE_STABLE)) {
  12e324:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12e328:	e3530000 	cmp	r3, #0
  12e32c:	ba00001e 	blt	12e3ac <etharp_find_addr+0xf0>
  12e330:	e15b20d5 	ldrsb	r2, [fp, #-5]
  12e334:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12e338:	e3403014 	movt	r3, #20
  12e33c:	e3a01018 	mov	r1, #24
  12e340:	e0020291 	mul	r2, r1, r2
  12e344:	e0833002 	add	r3, r3, r2
  12e348:	e2833014 	add	r3, r3, #20
  12e34c:	e5d33000 	ldrb	r3, [r3]
  12e350:	e3530001 	cmp	r3, #1
  12e354:	9a000014 	bls	12e3ac <etharp_find_addr+0xf0>
      *eth_ret = &arp_table[i].ethaddr;
  12e358:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12e35c:	e3a02018 	mov	r2, #24
  12e360:	e0030392 	mul	r3, r2, r3
  12e364:	e2832008 	add	r2, r3, #8
  12e368:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12e36c:	e3403014 	movt	r3, #20
  12e370:	e0823003 	add	r3, r2, r3
  12e374:	e2832004 	add	r2, r3, #4
  12e378:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12e37c:	e5832000 	str	r2, [r3]
      *ip_ret = &arp_table[i].ipaddr;
  12e380:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12e384:	e3a02018 	mov	r2, #24
  12e388:	e0020392 	mul	r2, r2, r3
  12e38c:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12e390:	e3403014 	movt	r3, #20
  12e394:	e0823003 	add	r3, r2, r3
  12e398:	e2832004 	add	r2, r3, #4
  12e39c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e3a0:	e5832000 	str	r2, [r3]
      return i;
  12e3a4:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12e3a8:	ea000000 	b	12e3b0 <etharp_find_addr+0xf4>
  }
  return -1;
  12e3ac:	e3e03000 	mvn	r3, #0
}
  12e3b0:	e1a00003 	mov	r0, r3
  12e3b4:	e24bd004 	sub	sp, fp, #4
  12e3b8:	e8bd8800 	pop	{fp, pc}

0012e3bc <etharp_get_entry>:
 * @param eth_ret return value: ETH address
 * @return 1 on valid index, 0 otherwise
 */
u8_t
etharp_get_entry(u8_t i, ip4_addr_t **ipaddr, struct netif **netif, struct eth_addr **eth_ret)
{
  12e3bc:	e92d4800 	push	{fp, lr}
  12e3c0:	e28db004 	add	fp, sp, #4
  12e3c4:	e24dd010 	sub	sp, sp, #16
  12e3c8:	e50b100c 	str	r1, [fp, #-12]
  12e3cc:	e50b2010 	str	r2, [fp, #-16]
  12e3d0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  12e3d4:	e1a03000 	mov	r3, r0
  12e3d8:	e54b3005 	strb	r3, [fp, #-5]
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
  12e3dc:	e51b300c 	ldr	r3, [fp, #-12]
  12e3e0:	e3530000 	cmp	r3, #0
  12e3e4:	1a000006 	bne	12e404 <etharp_get_entry+0x48>
  12e3e8:	e3090388 	movw	r0, #37768	; 0x9388
  12e3ec:	e3400014 	movt	r0, #20
  12e3f0:	ebff5347 	bl	103114 <rt_kprintf>
  12e3f4:	e3001266 	movw	r1, #614	; 0x266
  12e3f8:	e3090254 	movw	r0, #37460	; 0x9254
  12e3fc:	e3400014 	movt	r0, #20
  12e400:	ebff733a 	bl	10b0f0 <sys_arch_assert>
  LWIP_ASSERT("netif != NULL", netif != NULL);
  12e404:	e51b3010 	ldr	r3, [fp, #-16]
  12e408:	e3530000 	cmp	r3, #0
  12e40c:	1a000006 	bne	12e42c <etharp_get_entry+0x70>
  12e410:	e3090398 	movw	r0, #37784	; 0x9398
  12e414:	e3400014 	movt	r0, #20
  12e418:	ebff533d 	bl	103114 <rt_kprintf>
  12e41c:	e3001267 	movw	r1, #615	; 0x267
  12e420:	e3090254 	movw	r0, #37460	; 0x9254
  12e424:	e3400014 	movt	r0, #20
  12e428:	ebff7330 	bl	10b0f0 <sys_arch_assert>
  LWIP_ASSERT("eth_ret != NULL", eth_ret != NULL);
  12e42c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12e430:	e3530000 	cmp	r3, #0
  12e434:	1a000006 	bne	12e454 <etharp_get_entry+0x98>
  12e438:	e30903a8 	movw	r0, #37800	; 0x93a8
  12e43c:	e3400014 	movt	r0, #20
  12e440:	ebff5333 	bl	103114 <rt_kprintf>
  12e444:	e3a01f9a 	mov	r1, #616	; 0x268
  12e448:	e3090254 	movw	r0, #37460	; 0x9254
  12e44c:	e3400014 	movt	r0, #20
  12e450:	ebff7326 	bl	10b0f0 <sys_arch_assert>

  if((i < ARP_TABLE_SIZE) && (arp_table[i].state >= ETHARP_STATE_STABLE)) {
  12e454:	e55b3005 	ldrb	r3, [fp, #-5]
  12e458:	e3530009 	cmp	r3, #9
  12e45c:	8a000028 	bhi	12e504 <etharp_get_entry+0x148>
  12e460:	e55b2005 	ldrb	r2, [fp, #-5]
  12e464:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12e468:	e3403014 	movt	r3, #20
  12e46c:	e3a01018 	mov	r1, #24
  12e470:	e0020291 	mul	r2, r1, r2
  12e474:	e0833002 	add	r3, r3, r2
  12e478:	e2833014 	add	r3, r3, #20
  12e47c:	e5d33000 	ldrb	r3, [r3]
  12e480:	e3530001 	cmp	r3, #1
  12e484:	9a00001e 	bls	12e504 <etharp_get_entry+0x148>
    *ipaddr  = &arp_table[i].ipaddr;
  12e488:	e55b3005 	ldrb	r3, [fp, #-5]
  12e48c:	e3a02018 	mov	r2, #24
  12e490:	e0020392 	mul	r2, r2, r3
  12e494:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12e498:	e3403014 	movt	r3, #20
  12e49c:	e0823003 	add	r3, r2, r3
  12e4a0:	e2832004 	add	r2, r3, #4
  12e4a4:	e51b300c 	ldr	r3, [fp, #-12]
  12e4a8:	e5832000 	str	r2, [r3]
    *netif   = arp_table[i].netif;
  12e4ac:	e55b2005 	ldrb	r2, [fp, #-5]
  12e4b0:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12e4b4:	e3403014 	movt	r3, #20
  12e4b8:	e3a01018 	mov	r1, #24
  12e4bc:	e0020291 	mul	r2, r1, r2
  12e4c0:	e0833002 	add	r3, r3, r2
  12e4c4:	e2833008 	add	r3, r3, #8
  12e4c8:	e5932000 	ldr	r2, [r3]
  12e4cc:	e51b3010 	ldr	r3, [fp, #-16]
  12e4d0:	e5832000 	str	r2, [r3]
    *eth_ret = &arp_table[i].ethaddr;
  12e4d4:	e55b3005 	ldrb	r3, [fp, #-5]
  12e4d8:	e3a02018 	mov	r2, #24
  12e4dc:	e0030392 	mul	r3, r2, r3
  12e4e0:	e2832008 	add	r2, r3, #8
  12e4e4:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12e4e8:	e3403014 	movt	r3, #20
  12e4ec:	e0823003 	add	r3, r2, r3
  12e4f0:	e2832004 	add	r2, r3, #4
  12e4f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12e4f8:	e5832000 	str	r2, [r3]
    return 1;
  12e4fc:	e3a03001 	mov	r3, #1
  12e500:	ea000000 	b	12e508 <etharp_get_entry+0x14c>
  } else {
    return 0;
  12e504:	e3a03000 	mov	r3, #0
  }
}
  12e508:	e1a00003 	mov	r0, r3
  12e50c:	e24bd004 	sub	sp, fp, #4
  12e510:	e8bd8800 	pop	{fp, pc}

0012e514 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
  12e514:	e92d4800 	push	{fp, lr}
  12e518:	e28db004 	add	fp, sp, #4
  12e51c:	e24dd028 	sub	sp, sp, #40	; 0x28
  12e520:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12e524:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
  12e528:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e52c:	e3530000 	cmp	r3, #0
  12e530:	1a000007 	bne	12e554 <etharp_input+0x40>
  12e534:	e3090398 	movw	r0, #37784	; 0x9398
  12e538:	e3400014 	movt	r0, #20
  12e53c:	ebff52f4 	bl	103114 <rt_kprintf>
  12e540:	e3a01fa2 	mov	r1, #648	; 0x288
  12e544:	e3090254 	movw	r0, #37460	; 0x9254
  12e548:	e3400014 	movt	r0, #20
  12e54c:	ebff72e7 	bl	10b0f0 <sys_arch_assert>
  12e550:	ea000085 	b	12e76c <etharp_input+0x258>

  hdr = (struct etharp_hdr *)p->payload;
  12e554:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12e558:	e5933004 	ldr	r3, [r3, #4]
  12e55c:	e50b300c 	str	r3, [fp, #-12]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
  12e560:	e51b300c 	ldr	r3, [fp, #-12]
  12e564:	e1d330b0 	ldrh	r3, [r3]
  12e568:	e6ff3073 	uxth	r3, r3
  12e56c:	e3530c01 	cmp	r3, #256	; 0x100
  12e570:	1a00000c 	bne	12e5a8 <etharp_input+0x94>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
  12e574:	e51b300c 	ldr	r3, [fp, #-12]
  12e578:	e5d33004 	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
  12e57c:	e3530006 	cmp	r3, #6
  12e580:	1a000008 	bne	12e5a8 <etharp_input+0x94>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
  12e584:	e51b300c 	ldr	r3, [fp, #-12]
  12e588:	e5d33005 	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
  12e58c:	e3530004 	cmp	r3, #4
  12e590:	1a000004 	bne	12e5a8 <etharp_input+0x94>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
  12e594:	e51b300c 	ldr	r3, [fp, #-12]
  12e598:	e1d330b2 	ldrh	r3, [r3, #2]
  12e59c:	e6ff3073 	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
  12e5a0:	e3530008 	cmp	r3, #8
  12e5a4:	0a000012 	beq	12e5f4 <etharp_input+0xe0>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
  12e5a8:	e30c3a30 	movw	r3, #51760	; 0xca30
  12e5ac:	e3403015 	movt	r3, #21
  12e5b0:	e1d332b8 	ldrh	r3, [r3, #40]	; 0x28
  12e5b4:	e2833001 	add	r3, r3, #1
  12e5b8:	e6ff2073 	uxth	r2, r3
  12e5bc:	e30c3a30 	movw	r3, #51760	; 0xca30
  12e5c0:	e3403015 	movt	r3, #21
  12e5c4:	e1c322b8 	strh	r2, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
  12e5c8:	e30c3a30 	movw	r3, #51760	; 0xca30
  12e5cc:	e3403015 	movt	r3, #21
  12e5d0:	e1d331be 	ldrh	r3, [r3, #30]
  12e5d4:	e2833001 	add	r3, r3, #1
  12e5d8:	e6ff2073 	uxth	r2, r3
  12e5dc:	e30c3a30 	movw	r3, #51760	; 0xca30
  12e5e0:	e3403015 	movt	r3, #21
  12e5e4:	e1c321be 	strh	r2, [r3, #30]
    pbuf_free(p);
  12e5e8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12e5ec:	ebffb22f 	bl	11aeb0 <pbuf_free>
    return;
  12e5f0:	ea00005d 	b	12e76c <etharp_input+0x258>
  }
  ETHARP_STATS_INC(etharp.recv);
  12e5f4:	e30c3a30 	movw	r3, #51760	; 0xca30
  12e5f8:	e3403015 	movt	r3, #21
  12e5fc:	e1d331ba 	ldrh	r3, [r3, #26]
  12e600:	e2833001 	add	r3, r3, #1
  12e604:	e6ff2073 	uxth	r2, r3
  12e608:	e30c3a30 	movw	r3, #51760	; 0xca30
  12e60c:	e3403015 	movt	r3, #21
  12e610:	e1c321ba 	strh	r2, [r3, #26]
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
  12e614:	e51b300c 	ldr	r3, [fp, #-12]
  12e618:	e283300e 	add	r3, r3, #14
  12e61c:	e5933000 	ldr	r3, [r3]
  12e620:	e50b3010 	str	r3, [fp, #-16]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
  12e624:	e51b300c 	ldr	r3, [fp, #-12]
  12e628:	e2833018 	add	r3, r3, #24
  12e62c:	e5933000 	ldr	r3, [r3]
  12e630:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
  12e634:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e638:	e2833004 	add	r3, r3, #4
  12e63c:	e5933000 	ldr	r3, [r3]
  12e640:	e3530000 	cmp	r3, #0
  12e644:	1a000002 	bne	12e654 <etharp_input+0x140>
    for_us = 0;
  12e648:	e3a03000 	mov	r3, #0
  12e64c:	e54b3005 	strb	r3, [fp, #-5]
  12e650:	ea000008 	b	12e678 <etharp_input+0x164>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
  12e654:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  12e658:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e65c:	e2833004 	add	r3, r3, #4
  12e660:	e5933000 	ldr	r3, [r3]
  12e664:	e1520003 	cmp	r2, r3
  12e668:	03a03001 	moveq	r3, #1
  12e66c:	13a03000 	movne	r3, #0
  12e670:	e6ef3073 	uxtb	r3, r3
  12e674:	e54b3005 	strb	r3, [fp, #-5]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
  12e678:	e51b300c 	ldr	r3, [fp, #-12]
  12e67c:	e2832008 	add	r2, r3, #8
  12e680:	e55b3005 	ldrb	r3, [fp, #-5]
  12e684:	e3530000 	cmp	r3, #0
  12e688:	0a000001 	beq	12e694 <etharp_input+0x180>
  12e68c:	e3a03001 	mov	r3, #1
  12e690:	ea000000 	b	12e698 <etharp_input+0x184>
  12e694:	e3a03002 	mov	r3, #2
  12e698:	e24b1010 	sub	r1, fp, #16
  12e69c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12e6a0:	ebfffe51 	bl	12dfec <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
  12e6a4:	e51b300c 	ldr	r3, [fp, #-12]
  12e6a8:	e1d330b6 	ldrh	r3, [r3, #6]
  12e6ac:	e6ff3073 	uxth	r3, r3
  12e6b0:	e3530c01 	cmp	r3, #256	; 0x100
  12e6b4:	0a000002 	beq	12e6c4 <etharp_input+0x1b0>
  12e6b8:	e3530c02 	cmp	r3, #512	; 0x200
  12e6bc:	0a000019 	beq	12e728 <etharp_input+0x214>
  12e6c0:	ea00001d 	b	12e73c <etharp_input+0x228>
     * reply. In any case, we time-stamp any existing ARP entry,
     * and possibly send out an IP packet that was queued on it. */

    LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP request\n"));
    /* ARP request for our address? */
    if (for_us) {
  12e6c4:	e55b3005 	ldrb	r3, [fp, #-5]
  12e6c8:	e3530000 	cmp	r3, #0
  12e6cc:	0a000023 	beq	12e760 <etharp_input+0x24c>
      /* send ARP response */
      etharp_raw(netif,
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
  12e6d0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e6d4:	e283003b 	add	r0, r3, #59	; 0x3b
  12e6d8:	e51b300c 	ldr	r3, [fp, #-12]
  12e6dc:	e283c008 	add	ip, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
  12e6e0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e6e4:	e283e03b 	add	lr, r3, #59	; 0x3b
  12e6e8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e6ec:	e2833004 	add	r3, r3, #4
                 &hdr->shwaddr, &sipaddr,
  12e6f0:	e51b200c 	ldr	r2, [fp, #-12]
  12e6f4:	e2822008 	add	r2, r2, #8
      etharp_raw(netif,
  12e6f8:	e3a01002 	mov	r1, #2
  12e6fc:	e58d100c 	str	r1, [sp, #12]
  12e700:	e24b1010 	sub	r1, fp, #16
  12e704:	e58d1008 	str	r1, [sp, #8]
  12e708:	e58d2004 	str	r2, [sp, #4]
  12e70c:	e58d3000 	str	r3, [sp]
  12e710:	e1a0300e 	mov	r3, lr
  12e714:	e1a0200c 	mov	r2, ip
  12e718:	e1a01000 	mov	r1, r0
  12e71c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12e720:	eb0002d5 	bl	12f27c <etharp_raw>
    /* request was not directed to us */
    } else {
      /* { for_us == 0 and netif->ip_addr.addr != 0 } */
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP request was not for us.\n"));
    }
    break;
  12e724:	ea00000d 	b	12e760 <etharp_input+0x24c>
#if (LWIP_DHCP && DHCP_DOES_ARP_CHECK)
    /* DHCP wants to know about ARP replies from any host with an
     * IP address also offered to us by the DHCP server. We do not
     * want to take a duplicate IP address on a single network.
     * @todo How should we handle redundant (fail-over) interfaces? */
    dhcp_arp_reply(netif, &sipaddr);
  12e728:	e24b3010 	sub	r3, fp, #16
  12e72c:	e1a01003 	mov	r1, r3
  12e730:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12e734:	ebfff256 	bl	12b094 <dhcp_arp_reply>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  12e738:	ea000009 	b	12e764 <etharp_input+0x250>
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
  12e73c:	e30c3a30 	movw	r3, #51760	; 0xca30
  12e740:	e3403015 	movt	r3, #21
  12e744:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  12e748:	e2833001 	add	r3, r3, #1
  12e74c:	e6ff2073 	uxth	r2, r3
  12e750:	e30c3a30 	movw	r3, #51760	; 0xca30
  12e754:	e3403015 	movt	r3, #21
  12e758:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
    break;
  12e75c:	ea000000 	b	12e764 <etharp_input+0x250>
    break;
  12e760:	e320f000 	nop	{0}
  }
  /* free ARP packet */
  pbuf_free(p);
  12e764:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12e768:	ebffb1d0 	bl	11aeb0 <pbuf_free>
}
  12e76c:	e24bd004 	sub	sp, fp, #4
  12e770:	e8bd8800 	pop	{fp, pc}

0012e774 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
  12e774:	e92d4800 	push	{fp, lr}
  12e778:	e28db004 	add	fp, sp, #4
  12e77c:	e24dd018 	sub	sp, sp, #24
  12e780:	e50b0008 	str	r0, [fp, #-8]
  12e784:	e50b100c 	str	r1, [fp, #-12]
  12e788:	e1a03002 	mov	r3, r2
  12e78c:	e54b300d 	strb	r3, [fp, #-13]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
  12e790:	e55b200d 	ldrb	r2, [fp, #-13]
  12e794:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12e798:	e3403014 	movt	r3, #20
  12e79c:	e3a01018 	mov	r1, #24
  12e7a0:	e0020291 	mul	r2, r1, r2
  12e7a4:	e0833002 	add	r3, r3, r2
  12e7a8:	e2833014 	add	r3, r3, #20
  12e7ac:	e5d33000 	ldrb	r3, [r3]
  12e7b0:	e3530001 	cmp	r3, #1
  12e7b4:	8a000006 	bhi	12e7d4 <etharp_output_to_arp_index+0x60>
  12e7b8:	e30903b8 	movw	r0, #37816	; 0x93b8
  12e7bc:	e3400014 	movt	r0, #20
  12e7c0:	ebff5253 	bl	103114 <rt_kprintf>
  12e7c4:	e30012ed 	movw	r1, #749	; 0x2ed
  12e7c8:	e3090254 	movw	r0, #37460	; 0x9254
  12e7cc:	e3400014 	movt	r0, #20
  12e7d0:	ebff7246 	bl	10b0f0 <sys_arch_assert>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
  12e7d4:	e55b200d 	ldrb	r2, [fp, #-13]
  12e7d8:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12e7dc:	e3403014 	movt	r3, #20
  12e7e0:	e3a01018 	mov	r1, #24
  12e7e4:	e0020291 	mul	r2, r1, r2
  12e7e8:	e0833002 	add	r3, r3, r2
  12e7ec:	e2833014 	add	r3, r3, #20
  12e7f0:	e5d33000 	ldrb	r3, [r3]
  12e7f4:	e3530002 	cmp	r3, #2
  12e7f8:	1a000049 	bne	12e924 <etharp_output_to_arp_index+0x1b0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
  12e7fc:	e55b200d 	ldrb	r2, [fp, #-13]
  12e800:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12e804:	e3403014 	movt	r3, #20
  12e808:	e3a01018 	mov	r1, #24
  12e80c:	e0020291 	mul	r2, r1, r2
  12e810:	e0833002 	add	r3, r3, r2
  12e814:	e2833012 	add	r3, r3, #18
  12e818:	e1d330b0 	ldrh	r3, [r3]
  12e81c:	e3530f47 	cmp	r3, #284	; 0x11c
  12e820:	9a000016 	bls	12e880 <etharp_output_to_arp_index+0x10c>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
  12e824:	e55b300d 	ldrb	r3, [fp, #-13]
  12e828:	e3a02018 	mov	r2, #24
  12e82c:	e0020392 	mul	r2, r2, r3
  12e830:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12e834:	e3403014 	movt	r3, #20
  12e838:	e0823003 	add	r3, r2, r3
  12e83c:	e2833004 	add	r3, r3, #4
  12e840:	e1a01003 	mov	r1, r3
  12e844:	e51b0008 	ldr	r0, [fp, #-8]
  12e848:	eb00032b 	bl	12f4fc <etharp_request>
  12e84c:	e1a03000 	mov	r3, r0
  12e850:	e3530000 	cmp	r3, #0
  12e854:	1a000032 	bne	12e924 <etharp_output_to_arp_index+0x1b0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
  12e858:	e55b200d 	ldrb	r2, [fp, #-13]
  12e85c:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12e860:	e3403014 	movt	r3, #20
  12e864:	e3a01018 	mov	r1, #24
  12e868:	e0020291 	mul	r2, r1, r2
  12e86c:	e0833002 	add	r3, r3, r2
  12e870:	e2833014 	add	r3, r3, #20
  12e874:	e3a02003 	mov	r2, #3
  12e878:	e5c32000 	strb	r2, [r3]
  12e87c:	ea000028 	b	12e924 <etharp_output_to_arp_index+0x1b0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
  12e880:	e55b200d 	ldrb	r2, [fp, #-13]
  12e884:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12e888:	e3403014 	movt	r3, #20
  12e88c:	e3a01018 	mov	r1, #24
  12e890:	e0020291 	mul	r2, r1, r2
  12e894:	e0833002 	add	r3, r3, r2
  12e898:	e2833012 	add	r3, r3, #18
  12e89c:	e1d330b0 	ldrh	r3, [r3]
  12e8a0:	e300210d 	movw	r2, #269	; 0x10d
  12e8a4:	e1530002 	cmp	r3, r2
  12e8a8:	9a00001d 	bls	12e924 <etharp_output_to_arp_index+0x1b0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
  12e8ac:	e55b300d 	ldrb	r3, [fp, #-13]
  12e8b0:	e3a02018 	mov	r2, #24
  12e8b4:	e0020392 	mul	r2, r2, r3
  12e8b8:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12e8bc:	e3403014 	movt	r3, #20
  12e8c0:	e0823003 	add	r3, r2, r3
  12e8c4:	e2831004 	add	r1, r3, #4
  12e8c8:	e55b300d 	ldrb	r3, [fp, #-13]
  12e8cc:	e3a02018 	mov	r2, #24
  12e8d0:	e0030392 	mul	r3, r2, r3
  12e8d4:	e2832008 	add	r2, r3, #8
  12e8d8:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12e8dc:	e3403014 	movt	r3, #20
  12e8e0:	e0823003 	add	r3, r2, r3
  12e8e4:	e2833004 	add	r3, r3, #4
  12e8e8:	e1a02003 	mov	r2, r3
  12e8ec:	e51b0008 	ldr	r0, [fp, #-8]
  12e8f0:	eb0002e5 	bl	12f48c <etharp_request_dst>
  12e8f4:	e1a03000 	mov	r3, r0
  12e8f8:	e3530000 	cmp	r3, #0
  12e8fc:	1a000008 	bne	12e924 <etharp_output_to_arp_index+0x1b0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
  12e900:	e55b200d 	ldrb	r2, [fp, #-13]
  12e904:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12e908:	e3403014 	movt	r3, #20
  12e90c:	e3a01018 	mov	r1, #24
  12e910:	e0020291 	mul	r2, r1, r2
  12e914:	e0833002 	add	r3, r3, r2
  12e918:	e2833014 	add	r3, r3, #20
  12e91c:	e3a02003 	mov	r2, #3
  12e920:	e5c32000 	strb	r2, [r3]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
  12e924:	e51b3008 	ldr	r3, [fp, #-8]
  12e928:	e283103b 	add	r1, r3, #59	; 0x3b
  12e92c:	e55b300d 	ldrb	r3, [fp, #-13]
  12e930:	e3a02018 	mov	r2, #24
  12e934:	e0030392 	mul	r3, r2, r3
  12e938:	e2832008 	add	r2, r3, #8
  12e93c:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12e940:	e3403014 	movt	r3, #20
  12e944:	e0823003 	add	r3, r2, r3
  12e948:	e2832004 	add	r2, r3, #4
  12e94c:	e3a03b02 	mov	r3, #2048	; 0x800
  12e950:	e58d3000 	str	r3, [sp]
  12e954:	e1a03002 	mov	r3, r2
  12e958:	e1a02001 	mov	r2, r1
  12e95c:	e51b100c 	ldr	r1, [fp, #-12]
  12e960:	e51b0008 	ldr	r0, [fp, #-8]
  12e964:	ebffe964 	bl	128efc <ethernet_output>
  12e968:	e1a03000 	mov	r3, r0
}
  12e96c:	e1a00003 	mov	r0, r3
  12e970:	e24bd004 	sub	sp, fp, #4
  12e974:	e8bd8800 	pop	{fp, pc}

0012e978 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
  12e978:	e92d4800 	push	{fp, lr}
  12e97c:	e28db004 	add	fp, sp, #4
  12e980:	e24dd028 	sub	sp, sp, #40	; 0x28
  12e984:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12e988:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  12e98c:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
  12e990:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12e994:	e50b300c 	str	r3, [fp, #-12]

  LWIP_ASSERT("netif != NULL", netif != NULL);
  12e998:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12e99c:	e3530000 	cmp	r3, #0
  12e9a0:	1a000006 	bne	12e9c0 <etharp_output+0x48>
  12e9a4:	e3090398 	movw	r0, #37784	; 0x9398
  12e9a8:	e3400014 	movt	r0, #20
  12e9ac:	ebff51d8 	bl	103114 <rt_kprintf>
  12e9b0:	e300131b 	movw	r1, #795	; 0x31b
  12e9b4:	e3090254 	movw	r0, #37460	; 0x9254
  12e9b8:	e3400014 	movt	r0, #20
  12e9bc:	ebff71cb 	bl	10b0f0 <sys_arch_assert>
  LWIP_ASSERT("q != NULL", q != NULL);
  12e9c0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e9c4:	e3530000 	cmp	r3, #0
  12e9c8:	1a000006 	bne	12e9e8 <etharp_output+0x70>
  12e9cc:	e3090248 	movw	r0, #37448	; 0x9248
  12e9d0:	e3400014 	movt	r0, #20
  12e9d4:	ebff51ce 	bl	103114 <rt_kprintf>
  12e9d8:	e3a01fc7 	mov	r1, #796	; 0x31c
  12e9dc:	e3090254 	movw	r0, #37460	; 0x9254
  12e9e0:	e3400014 	movt	r0, #20
  12e9e4:	ebff71c1 	bl	10b0f0 <sys_arch_assert>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
  12e9e8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12e9ec:	e3530000 	cmp	r3, #0
  12e9f0:	1a000006 	bne	12ea10 <etharp_output+0x98>
  12e9f4:	e3090388 	movw	r0, #37768	; 0x9388
  12e9f8:	e3400014 	movt	r0, #20
  12e9fc:	ebff51c4 	bl	103114 <rt_kprintf>
  12ea00:	e300131d 	movw	r1, #797	; 0x31d
  12ea04:	e3090254 	movw	r0, #37460	; 0x9254
  12ea08:	e3400014 	movt	r0, #20
  12ea0c:	ebff71b7 	bl	10b0f0 <sys_arch_assert>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
  12ea10:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12ea14:	e5933000 	ldr	r3, [r3]
  12ea18:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  12ea1c:	e1a00003 	mov	r0, r3
  12ea20:	eb000eba 	bl	132510 <ip4_addr_isbroadcast_u32>
  12ea24:	e1a03000 	mov	r3, r0
  12ea28:	e3530000 	cmp	r3, #0
  12ea2c:	0a000003 	beq	12ea40 <etharp_output+0xc8>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
  12ea30:	e3083b30 	movw	r3, #35632	; 0x8b30
  12ea34:	e3403014 	movt	r3, #20
  12ea38:	e50b3008 	str	r3, [fp, #-8]
  12ea3c:	ea000097 	b	12eca0 <etharp_output+0x328>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
  12ea40:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12ea44:	e5933000 	ldr	r3, [r3]
  12ea48:	e20330f0 	and	r3, r3, #240	; 0xf0
  12ea4c:	e35300e0 	cmp	r3, #224	; 0xe0
  12ea50:	1a000016 	bne	12eab0 <etharp_output+0x138>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
  12ea54:	e3a03001 	mov	r3, #1
  12ea58:	e54b3014 	strb	r3, [fp, #-20]	; 0xffffffec
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
  12ea5c:	e3a03000 	mov	r3, #0
  12ea60:	e54b3013 	strb	r3, [fp, #-19]	; 0xffffffed
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
  12ea64:	e3a0305e 	mov	r3, #94	; 0x5e
  12ea68:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
  12ea6c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12ea70:	e2833001 	add	r3, r3, #1
  12ea74:	e5d33000 	ldrb	r3, [r3]
  12ea78:	e203307f 	and	r3, r3, #127	; 0x7f
  12ea7c:	e6ef3073 	uxtb	r3, r3
  12ea80:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
  12ea84:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12ea88:	e2833002 	add	r3, r3, #2
  12ea8c:	e5d33000 	ldrb	r3, [r3]
  12ea90:	e54b3010 	strb	r3, [fp, #-16]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
  12ea94:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12ea98:	e2833003 	add	r3, r3, #3
  12ea9c:	e5d33000 	ldrb	r3, [r3]
  12eaa0:	e54b300f 	strb	r3, [fp, #-15]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
  12eaa4:	e24b3014 	sub	r3, fp, #20
  12eaa8:	e50b3008 	str	r3, [fp, #-8]
  12eaac:	ea00007b 	b	12eca0 <etharp_output+0x328>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
  12eab0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12eab4:	e5932000 	ldr	r2, [r3]
  12eab8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12eabc:	e2833004 	add	r3, r3, #4
  12eac0:	e5933000 	ldr	r3, [r3]
  12eac4:	e0222003 	eor	r2, r2, r3
  12eac8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12eacc:	e2833008 	add	r3, r3, #8
  12ead0:	e5933000 	ldr	r3, [r3]
  12ead4:	e0033002 	and	r3, r3, r2
  12ead8:	e3530000 	cmp	r3, #0
  12eadc:	0a000010 	beq	12eb24 <etharp_output+0x1ac>
        !ip4_addr_islinklocal(ipaddr)) {
  12eae0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12eae4:	e5933000 	ldr	r3, [r3]
  12eae8:	e6ff3073 	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
  12eaec:	e30f2ea9 	movw	r2, #65193	; 0xfea9
  12eaf0:	e1530002 	cmp	r3, r2
  12eaf4:	0a00000a 	beq	12eb24 <etharp_output+0x1ac>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
  12eaf8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12eafc:	e283300c 	add	r3, r3, #12
  12eb00:	e5933000 	ldr	r3, [r3]
  12eb04:	e3530000 	cmp	r3, #0
  12eb08:	0a000003 	beq	12eb1c <etharp_output+0x1a4>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
  12eb0c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12eb10:	e283300c 	add	r3, r3, #12
  12eb14:	e50b300c 	str	r3, [fp, #-12]
  12eb18:	ea000001 	b	12eb24 <etharp_output+0x1ac>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
  12eb1c:	e3e03003 	mvn	r3, #3
  12eb20:	ea000067 	b	12ecc4 <etharp_output+0x34c>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
  12eb24:	e30e3bd4 	movw	r3, #60372	; 0xebd4
  12eb28:	e3403014 	movt	r3, #20
  12eb2c:	e5d33000 	ldrb	r3, [r3]
  12eb30:	e1a01003 	mov	r1, r3
  12eb34:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12eb38:	e3403014 	movt	r3, #20
  12eb3c:	e3a02018 	mov	r2, #24
  12eb40:	e0020192 	mul	r2, r2, r1
  12eb44:	e0833002 	add	r3, r3, r2
  12eb48:	e2833014 	add	r3, r3, #20
  12eb4c:	e5d33000 	ldrb	r3, [r3]
  12eb50:	e3530001 	cmp	r3, #1
  12eb54:	9a00001f 	bls	12ebd8 <etharp_output+0x260>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
  12eb58:	e51b300c 	ldr	r3, [fp, #-12]
  12eb5c:	e5932000 	ldr	r2, [r3]
  12eb60:	e30e3bd4 	movw	r3, #60372	; 0xebd4
  12eb64:	e3403014 	movt	r3, #20
  12eb68:	e5d33000 	ldrb	r3, [r3]
  12eb6c:	e1a00003 	mov	r0, r3
  12eb70:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12eb74:	e3403014 	movt	r3, #20
  12eb78:	e3a01018 	mov	r1, #24
  12eb7c:	e0010091 	mul	r1, r1, r0
  12eb80:	e0833001 	add	r3, r3, r1
  12eb84:	e2833004 	add	r3, r3, #4
  12eb88:	e5933000 	ldr	r3, [r3]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
  12eb8c:	e1520003 	cmp	r2, r3
  12eb90:	1a000010 	bne	12ebd8 <etharp_output+0x260>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
  12eb94:	e30c3a30 	movw	r3, #51760	; 0xca30
  12eb98:	e3403015 	movt	r3, #21
  12eb9c:	e1d332be 	ldrh	r3, [r3, #46]	; 0x2e
  12eba0:	e2833001 	add	r3, r3, #1
  12eba4:	e6ff2073 	uxth	r2, r3
  12eba8:	e30c3a30 	movw	r3, #51760	; 0xca30
  12ebac:	e3403015 	movt	r3, #21
  12ebb0:	e1c322be 	strh	r2, [r3, #46]	; 0x2e
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
  12ebb4:	e30e3bd4 	movw	r3, #60372	; 0xebd4
  12ebb8:	e3403014 	movt	r3, #20
  12ebbc:	e5d33000 	ldrb	r3, [r3]
  12ebc0:	e1a02003 	mov	r2, r3
  12ebc4:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  12ebc8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12ebcc:	ebfffee8 	bl	12e774 <etharp_output_to_arp_index>
  12ebd0:	e1a03000 	mov	r3, r0
  12ebd4:	ea00003a 	b	12ecc4 <etharp_output+0x34c>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
  12ebd8:	e3a03000 	mov	r3, #0
  12ebdc:	e54b300d 	strb	r3, [fp, #-13]
  12ebe0:	ea000025 	b	12ec7c <etharp_output+0x304>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
  12ebe4:	e15b20dd 	ldrsb	r2, [fp, #-13]
  12ebe8:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12ebec:	e3403014 	movt	r3, #20
  12ebf0:	e3a01018 	mov	r1, #24
  12ebf4:	e0020291 	mul	r2, r1, r2
  12ebf8:	e0833002 	add	r3, r3, r2
  12ebfc:	e2833014 	add	r3, r3, #20
  12ec00:	e5d33000 	ldrb	r3, [r3]
  12ec04:	e3530001 	cmp	r3, #1
  12ec08:	9a000016 	bls	12ec68 <etharp_output+0x2f0>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
  12ec0c:	e51b300c 	ldr	r3, [fp, #-12]
  12ec10:	e5932000 	ldr	r2, [r3]
  12ec14:	e15b10dd 	ldrsb	r1, [fp, #-13]
  12ec18:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12ec1c:	e3403014 	movt	r3, #20
  12ec20:	e3a00018 	mov	r0, #24
  12ec24:	e0010190 	mul	r1, r0, r1
  12ec28:	e0833001 	add	r3, r3, r1
  12ec2c:	e2833004 	add	r3, r3, #4
  12ec30:	e5933000 	ldr	r3, [r3]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
  12ec34:	e1520003 	cmp	r2, r3
  12ec38:	1a00000a 	bne	12ec68 <etharp_output+0x2f0>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
  12ec3c:	e55b200d 	ldrb	r2, [fp, #-13]
  12ec40:	e30e3bd4 	movw	r3, #60372	; 0xebd4
  12ec44:	e3403014 	movt	r3, #20
  12ec48:	e5c32000 	strb	r2, [r3]
        return etharp_output_to_arp_index(netif, q, i);
  12ec4c:	e55b300d 	ldrb	r3, [fp, #-13]
  12ec50:	e1a02003 	mov	r2, r3
  12ec54:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  12ec58:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12ec5c:	ebfffec4 	bl	12e774 <etharp_output_to_arp_index>
  12ec60:	e1a03000 	mov	r3, r0
  12ec64:	ea000016 	b	12ecc4 <etharp_output+0x34c>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
  12ec68:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12ec6c:	e6ef3073 	uxtb	r3, r3
  12ec70:	e2833001 	add	r3, r3, #1
  12ec74:	e6ef3073 	uxtb	r3, r3
  12ec78:	e54b300d 	strb	r3, [fp, #-13]
  12ec7c:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12ec80:	e3530009 	cmp	r3, #9
  12ec84:	daffffd6 	ble	12ebe4 <etharp_output+0x26c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
  12ec88:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  12ec8c:	e51b100c 	ldr	r1, [fp, #-12]
  12ec90:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12ec94:	eb00000d 	bl	12ecd0 <etharp_query>
  12ec98:	e1a03000 	mov	r3, r0
  12ec9c:	ea000008 	b	12ecc4 <etharp_output+0x34c>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
  12eca0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12eca4:	e283203b 	add	r2, r3, #59	; 0x3b
  12eca8:	e3a03b02 	mov	r3, #2048	; 0x800
  12ecac:	e58d3000 	str	r3, [sp]
  12ecb0:	e51b3008 	ldr	r3, [fp, #-8]
  12ecb4:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  12ecb8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12ecbc:	ebffe88e 	bl	128efc <ethernet_output>
  12ecc0:	e1a03000 	mov	r3, r0
}
  12ecc4:	e1a00003 	mov	r0, r3
  12ecc8:	e24bd004 	sub	sp, fp, #4
  12eccc:	e8bd8800 	pop	{fp, pc}

0012ecd0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
  12ecd0:	e92d4800 	push	{fp, lr}
  12ecd4:	e28db004 	add	fp, sp, #4
  12ecd8:	e24dd040 	sub	sp, sp, #64	; 0x40
  12ecdc:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  12ece0:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  12ece4:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
  12ece8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12ecec:	e283303b 	add	r3, r3, #59	; 0x3b
  12ecf0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  err_t result = ERR_MEM;
  12ecf4:	e3e03000 	mvn	r3, #0
  12ecf8:	e54b3005 	strb	r3, [fp, #-5]
  int is_new_entry = 0;
  12ecfc:	e3a03000 	mov	r3, #0
  12ed00:	e50b300c 	str	r3, [fp, #-12]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
  12ed04:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  12ed08:	e5933000 	ldr	r3, [r3]
  12ed0c:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
  12ed10:	e1a00003 	mov	r0, r3
  12ed14:	eb000dfd 	bl	132510 <ip4_addr_isbroadcast_u32>
  12ed18:	e1a03000 	mov	r3, r0
  12ed1c:	e3530000 	cmp	r3, #0
  12ed20:	1a00000b 	bne	12ed54 <etharp_query+0x84>
      ip4_addr_ismulticast(ipaddr) ||
  12ed24:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  12ed28:	e5933000 	ldr	r3, [r3]
  12ed2c:	e20330f0 	and	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
  12ed30:	e35300e0 	cmp	r3, #224	; 0xe0
  12ed34:	0a000006 	beq	12ed54 <etharp_query+0x84>
      ip4_addr_ismulticast(ipaddr) ||
  12ed38:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  12ed3c:	e3530000 	cmp	r3, #0
  12ed40:	0a000003 	beq	12ed54 <etharp_query+0x84>
      ip4_addr_isany(ipaddr)) {
  12ed44:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  12ed48:	e5933000 	ldr	r3, [r3]
  12ed4c:	e3530000 	cmp	r3, #0
  12ed50:	1a000001 	bne	12ed5c <etharp_query+0x8c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
  12ed54:	e3e0300f 	mvn	r3, #15
  12ed58:	ea000144 	b	12f270 <etharp_query+0x5a0>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
  12ed5c:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  12ed60:	e3a01001 	mov	r1, #1
  12ed64:	e51b0034 	ldr	r0, [fp, #-52]	; 0xffffffcc
  12ed68:	ebfffb80 	bl	12db70 <etharp_find_entry>
  12ed6c:	e1a03000 	mov	r3, r0
  12ed70:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf

  /* could not find or create entry? */
  if (i < 0) {
  12ed74:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  12ed78:	e3530000 	cmp	r3, #0
  12ed7c:	aa00000c 	bge	12edb4 <etharp_query+0xe4>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
  12ed80:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12ed84:	e3530000 	cmp	r3, #0
  12ed88:	0a000007 	beq	12edac <etharp_query+0xdc>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
  12ed8c:	e30c3a30 	movw	r3, #51760	; 0xca30
  12ed90:	e3403015 	movt	r3, #21
  12ed94:	e1d332b4 	ldrh	r3, [r3, #36]	; 0x24
  12ed98:	e2833001 	add	r3, r3, #1
  12ed9c:	e6ff2073 	uxth	r2, r3
  12eda0:	e30c3a30 	movw	r3, #51760	; 0xca30
  12eda4:	e3403015 	movt	r3, #21
  12eda8:	e1c322b4 	strh	r2, [r3, #36]	; 0x24
    }
    return (err_t)i;
  12edac:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  12edb0:	ea00012e 	b	12f270 <etharp_query+0x5a0>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
  12edb4:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12edb8:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12edbc:	e3403014 	movt	r3, #20
  12edc0:	e3a01018 	mov	r1, #24
  12edc4:	e0020291 	mul	r2, r1, r2
  12edc8:	e0833002 	add	r3, r3, r2
  12edcc:	e2833014 	add	r3, r3, #20
  12edd0:	e5d33000 	ldrb	r3, [r3]
  12edd4:	e3530000 	cmp	r3, #0
  12edd8:	1a000013 	bne	12ee2c <etharp_query+0x15c>
    is_new_entry = 1;
  12eddc:	e3a03001 	mov	r3, #1
  12ede0:	e50b300c 	str	r3, [fp, #-12]
    arp_table[i].state = ETHARP_STATE_PENDING;
  12ede4:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12ede8:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12edec:	e3403014 	movt	r3, #20
  12edf0:	e3a01018 	mov	r1, #24
  12edf4:	e0020291 	mul	r2, r1, r2
  12edf8:	e0833002 	add	r3, r3, r2
  12edfc:	e2833014 	add	r3, r3, #20
  12ee00:	e3a02001 	mov	r2, #1
  12ee04:	e5c32000 	strb	r2, [r3]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
  12ee08:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12ee0c:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12ee10:	e3403014 	movt	r3, #20
  12ee14:	e3a01018 	mov	r1, #24
  12ee18:	e0020291 	mul	r2, r1, r2
  12ee1c:	e0833002 	add	r3, r3, r2
  12ee20:	e2833008 	add	r3, r3, #8
  12ee24:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  12ee28:	e5832000 	str	r2, [r3]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
  12ee2c:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12ee30:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12ee34:	e3403014 	movt	r3, #20
  12ee38:	e3a01018 	mov	r1, #24
  12ee3c:	e0020291 	mul	r2, r1, r2
  12ee40:	e0833002 	add	r3, r3, r2
  12ee44:	e2833014 	add	r3, r3, #20
  12ee48:	e5d33000 	ldrb	r3, [r3]
  12ee4c:	e3530001 	cmp	r3, #1
  12ee50:	0a000010 	beq	12ee98 <etharp_query+0x1c8>
  12ee54:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12ee58:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12ee5c:	e3403014 	movt	r3, #20
  12ee60:	e3a01018 	mov	r1, #24
  12ee64:	e0020291 	mul	r2, r1, r2
  12ee68:	e0833002 	add	r3, r3, r2
  12ee6c:	e2833014 	add	r3, r3, #20
  12ee70:	e5d33000 	ldrb	r3, [r3]
  12ee74:	e3530001 	cmp	r3, #1
  12ee78:	8a000006 	bhi	12ee98 <etharp_query+0x1c8>
  12ee7c:	e30903e8 	movw	r0, #37864	; 0x93e8
  12ee80:	e3400014 	movt	r0, #20
  12ee84:	ebff50a2 	bl	103114 <rt_kprintf>
  12ee88:	e30013c9 	movw	r1, #969	; 0x3c9
  12ee8c:	e3090254 	movw	r0, #37460	; 0x9254
  12ee90:	e3400014 	movt	r0, #20
  12ee94:	ebff7095 	bl	10b0f0 <sys_arch_assert>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
  12ee98:	e51b300c 	ldr	r3, [fp, #-12]
  12ee9c:	e3530000 	cmp	r3, #0
  12eea0:	1a000002 	bne	12eeb0 <etharp_query+0x1e0>
  12eea4:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12eea8:	e3530000 	cmp	r3, #0
  12eeac:	1a000009 	bne	12eed8 <etharp_query+0x208>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
  12eeb0:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  12eeb4:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  12eeb8:	eb00018f 	bl	12f4fc <etharp_request>
  12eebc:	e1a03000 	mov	r3, r0
  12eec0:	e54b3005 	strb	r3, [fp, #-5]
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
  12eec4:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12eec8:	e3530000 	cmp	r3, #0
  12eecc:	1a000001 	bne	12eed8 <etharp_query+0x208>
      return result;
  12eed0:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12eed4:	ea0000e5 	b	12f270 <etharp_query+0x5a0>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
  12eed8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12eedc:	e3530000 	cmp	r3, #0
  12eee0:	1a000006 	bne	12ef00 <etharp_query+0x230>
  12eee4:	e3090248 	movw	r0, #37448	; 0x9248
  12eee8:	e3400014 	movt	r0, #20
  12eeec:	ebff5088 	bl	103114 <rt_kprintf>
  12eef0:	e30013db 	movw	r1, #987	; 0x3db
  12eef4:	e3090254 	movw	r0, #37460	; 0x9254
  12eef8:	e3400014 	movt	r0, #20
  12eefc:	ebff707b 	bl	10b0f0 <sys_arch_assert>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
  12ef00:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12ef04:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12ef08:	e3403014 	movt	r3, #20
  12ef0c:	e3a01018 	mov	r1, #24
  12ef10:	e0020291 	mul	r2, r1, r2
  12ef14:	e0833002 	add	r3, r3, r2
  12ef18:	e2833014 	add	r3, r3, #20
  12ef1c:	e5d33000 	ldrb	r3, [r3]
  12ef20:	e3530001 	cmp	r3, #1
  12ef24:	9a000015 	bls	12ef80 <etharp_query+0x2b0>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
  12ef28:	e55b2021 	ldrb	r2, [fp, #-33]	; 0xffffffdf
  12ef2c:	e30e3bd4 	movw	r3, #60372	; 0xebd4
  12ef30:	e3403014 	movt	r3, #20
  12ef34:	e5c32000 	strb	r2, [r3]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
  12ef38:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  12ef3c:	e3a02018 	mov	r2, #24
  12ef40:	e0030392 	mul	r3, r2, r3
  12ef44:	e2832008 	add	r2, r3, #8
  12ef48:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12ef4c:	e3403014 	movt	r3, #20
  12ef50:	e0823003 	add	r3, r2, r3
  12ef54:	e2832004 	add	r2, r3, #4
  12ef58:	e3a03b02 	mov	r3, #2048	; 0x800
  12ef5c:	e58d3000 	str	r3, [sp]
  12ef60:	e1a03002 	mov	r3, r2
  12ef64:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  12ef68:	e51b1038 	ldr	r1, [fp, #-56]	; 0xffffffc8
  12ef6c:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  12ef70:	ebffe7e1 	bl	128efc <ethernet_output>
  12ef74:	e1a03000 	mov	r3, r0
  12ef78:	e54b3005 	strb	r3, [fp, #-5]
  12ef7c:	ea0000ba 	b	12f26c <etharp_query+0x59c>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
  12ef80:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12ef84:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12ef88:	e3403014 	movt	r3, #20
  12ef8c:	e3a01018 	mov	r1, #24
  12ef90:	e0020291 	mul	r2, r1, r2
  12ef94:	e0833002 	add	r3, r3, r2
  12ef98:	e2833014 	add	r3, r3, #20
  12ef9c:	e5d33000 	ldrb	r3, [r3]
  12efa0:	e3530001 	cmp	r3, #1
  12efa4:	1a0000b0 	bne	12f26c <etharp_query+0x59c>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
  12efa8:	e3a03000 	mov	r3, #0
  12efac:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
  12efb0:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12efb4:	e50b3010 	str	r3, [fp, #-16]
    while (p) {
  12efb8:	ea00001a 	b	12f028 <etharp_query+0x358>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
  12efbc:	e51b3010 	ldr	r3, [fp, #-16]
  12efc0:	e1d320ba 	ldrh	r2, [r3, #10]
  12efc4:	e51b3010 	ldr	r3, [fp, #-16]
  12efc8:	e1d330b8 	ldrh	r3, [r3, #8]
  12efcc:	e1520003 	cmp	r2, r3
  12efd0:	1a00000a 	bne	12f000 <etharp_query+0x330>
  12efd4:	e51b3010 	ldr	r3, [fp, #-16]
  12efd8:	e5933000 	ldr	r3, [r3]
  12efdc:	e3530000 	cmp	r3, #0
  12efe0:	0a000006 	beq	12f000 <etharp_query+0x330>
  12efe4:	e3090410 	movw	r0, #37904	; 0x9410
  12efe8:	e3400014 	movt	r0, #20
  12efec:	ebff5048 	bl	103114 <rt_kprintf>
  12eff0:	e3a01ffb 	mov	r1, #1004	; 0x3ec
  12eff4:	e3090254 	movw	r0, #37460	; 0x9254
  12eff8:	e3400014 	movt	r0, #20
  12effc:	ebff703b 	bl	10b0f0 <sys_arch_assert>
      if (p->type != PBUF_ROM) {
  12f000:	e51b3010 	ldr	r3, [fp, #-16]
  12f004:	e5d3300c 	ldrb	r3, [r3, #12]
  12f008:	e3530001 	cmp	r3, #1
  12f00c:	0a000002 	beq	12f01c <etharp_query+0x34c>
        copy_needed = 1;
  12f010:	e3a03001 	mov	r3, #1
  12f014:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        break;
  12f018:	ea000005 	b	12f034 <etharp_query+0x364>
      }
      p = p->next;
  12f01c:	e51b3010 	ldr	r3, [fp, #-16]
  12f020:	e5933000 	ldr	r3, [r3]
  12f024:	e50b3010 	str	r3, [fp, #-16]
    while (p) {
  12f028:	e51b3010 	ldr	r3, [fp, #-16]
  12f02c:	e3530000 	cmp	r3, #0
  12f030:	1affffe1 	bne	12efbc <etharp_query+0x2ec>
    }
    if (copy_needed) {
  12f034:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12f038:	e3530000 	cmp	r3, #0
  12f03c:	0a000014 	beq	12f094 <etharp_query+0x3c4>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
  12f040:	e51b3010 	ldr	r3, [fp, #-16]
  12f044:	e1d330b8 	ldrh	r3, [r3, #8]
  12f048:	e3a02000 	mov	r2, #0
  12f04c:	e1a01003 	mov	r1, r3
  12f050:	e3a00002 	mov	r0, #2
  12f054:	ebffac8e 	bl	11a294 <pbuf_alloc>
  12f058:	e50b0010 	str	r0, [fp, #-16]
      if (p != NULL) {
  12f05c:	e51b3010 	ldr	r3, [fp, #-16]
  12f060:	e3530000 	cmp	r3, #0
  12f064:	0a00000e 	beq	12f0a4 <etharp_query+0x3d4>
        if (pbuf_copy(p, q) != ERR_OK) {
  12f068:	e51b1038 	ldr	r1, [fp, #-56]	; 0xffffffc8
  12f06c:	e51b0010 	ldr	r0, [fp, #-16]
  12f070:	ebffb0e3 	bl	11b404 <pbuf_copy>
  12f074:	e1a03000 	mov	r3, r0
  12f078:	e3530000 	cmp	r3, #0
  12f07c:	0a000008 	beq	12f0a4 <etharp_query+0x3d4>
          pbuf_free(p);
  12f080:	e51b0010 	ldr	r0, [fp, #-16]
  12f084:	ebffaf89 	bl	11aeb0 <pbuf_free>
          p = NULL;
  12f088:	e3a03000 	mov	r3, #0
  12f08c:	e50b3010 	str	r3, [fp, #-16]
  12f090:	ea000003 	b	12f0a4 <etharp_query+0x3d4>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
  12f094:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12f098:	e50b3010 	str	r3, [fp, #-16]
      pbuf_ref(p);
  12f09c:	e51b0010 	ldr	r0, [fp, #-16]
  12f0a0:	ebffb01c 	bl	11b118 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
  12f0a4:	e51b3010 	ldr	r3, [fp, #-16]
  12f0a8:	e3530000 	cmp	r3, #0
  12f0ac:	0a000064 	beq	12f244 <etharp_query+0x574>
      /* queue packet ... */
#if ARP_QUEUEING
      struct etharp_q_entry *new_entry;
      /* allocate a new arp queue entry */
      new_entry = (struct etharp_q_entry *)memp_malloc(MEMP_ARP_QUEUE);
  12f0b0:	e3002407 	movw	r2, #1031	; 0x407
  12f0b4:	e3091254 	movw	r1, #37460	; 0x9254
  12f0b8:	e3401014 	movt	r1, #20
  12f0bc:	e3a0000b 	mov	r0, #11
  12f0c0:	ebffa804 	bl	1190d8 <memp_malloc_fn>
  12f0c4:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
      if (new_entry != NULL) {
  12f0c8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12f0cc:	e3530000 	cmp	r3, #0
  12f0d0:	0a000056 	beq	12f230 <etharp_query+0x560>
        unsigned int qlen = 0;
  12f0d4:	e3a03000 	mov	r3, #0
  12f0d8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        new_entry->next = 0;
  12f0dc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12f0e0:	e3a02000 	mov	r2, #0
  12f0e4:	e5832000 	str	r2, [r3]
        new_entry->p = p;
  12f0e8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12f0ec:	e51b2010 	ldr	r2, [fp, #-16]
  12f0f0:	e5832004 	str	r2, [r3, #4]
        if (arp_table[i].q != NULL) {
  12f0f4:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12f0f8:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12f0fc:	e3403014 	movt	r3, #20
  12f100:	e3a01018 	mov	r1, #24
  12f104:	e0020291 	mul	r2, r1, r2
  12f108:	e0833002 	add	r3, r3, r2
  12f10c:	e5933000 	ldr	r3, [r3]
  12f110:	e3530000 	cmp	r3, #0
  12f114:	0a000019 	beq	12f180 <etharp_query+0x4b0>
          /* queue was already existent, append the new entry to the end */
          struct etharp_q_entry *r;
          r = arp_table[i].q;
  12f118:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12f11c:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12f120:	e3403014 	movt	r3, #20
  12f124:	e3a01018 	mov	r1, #24
  12f128:	e0020291 	mul	r2, r1, r2
  12f12c:	e0833002 	add	r3, r3, r2
  12f130:	e5933000 	ldr	r3, [r3]
  12f134:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
          qlen++;
  12f138:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f13c:	e2833001 	add	r3, r3, #1
  12f140:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
          while (r->next != NULL) {
  12f144:	ea000005 	b	12f160 <etharp_query+0x490>
            r = r->next;
  12f148:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12f14c:	e5933000 	ldr	r3, [r3]
  12f150:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
            qlen++;
  12f154:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f158:	e2833001 	add	r3, r3, #1
  12f15c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
          while (r->next != NULL) {
  12f160:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12f164:	e5933000 	ldr	r3, [r3]
  12f168:	e3530000 	cmp	r3, #0
  12f16c:	1afffff5 	bne	12f148 <etharp_query+0x478>
          }
          r->next = new_entry;
  12f170:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12f174:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  12f178:	e5832000 	str	r2, [r3]
  12f17c:	ea000007 	b	12f1a0 <etharp_query+0x4d0>
        } else {
          /* queue did not exist, first item in queue */
          arp_table[i].q = new_entry;
  12f180:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12f184:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12f188:	e3403014 	movt	r3, #20
  12f18c:	e3a01018 	mov	r1, #24
  12f190:	e0020291 	mul	r2, r1, r2
  12f194:	e0833002 	add	r3, r3, r2
  12f198:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  12f19c:	e5832000 	str	r2, [r3]
        }
#if ARP_QUEUE_LEN
        if (qlen >= ARP_QUEUE_LEN) {
  12f1a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f1a4:	e3530002 	cmp	r3, #2
  12f1a8:	9a00001d 	bls	12f224 <etharp_query+0x554>
          struct etharp_q_entry *old;
          old = arp_table[i].q;
  12f1ac:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12f1b0:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12f1b4:	e3403014 	movt	r3, #20
  12f1b8:	e3a01018 	mov	r1, #24
  12f1bc:	e0020291 	mul	r2, r1, r2
  12f1c0:	e0833002 	add	r3, r3, r2
  12f1c4:	e5933000 	ldr	r3, [r3]
  12f1c8:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
          arp_table[i].q = arp_table[i].q->next;
  12f1cc:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12f1d0:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12f1d4:	e3403014 	movt	r3, #20
  12f1d8:	e3a01018 	mov	r1, #24
  12f1dc:	e0020291 	mul	r2, r1, r2
  12f1e0:	e0833002 	add	r3, r3, r2
  12f1e4:	e5933000 	ldr	r3, [r3]
  12f1e8:	e15b12d1 	ldrsb	r1, [fp, #-33]	; 0xffffffdf
  12f1ec:	e5932000 	ldr	r2, [r3]
  12f1f0:	e30e3ae4 	movw	r3, #60132	; 0xeae4
  12f1f4:	e3403014 	movt	r3, #20
  12f1f8:	e3a00018 	mov	r0, #24
  12f1fc:	e0010190 	mul	r1, r0, r1
  12f200:	e0833001 	add	r3, r3, r1
  12f204:	e5832000 	str	r2, [r3]
          pbuf_free(old->p);
  12f208:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  12f20c:	e5933004 	ldr	r3, [r3, #4]
  12f210:	e1a00003 	mov	r0, r3
  12f214:	ebffaf25 	bl	11aeb0 <pbuf_free>
          memp_free(MEMP_ARP_QUEUE, old);
  12f218:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  12f21c:	e3a0000b 	mov	r0, #11
  12f220:	ebffa814 	bl	119278 <memp_free>
        }
#endif
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        result = ERR_OK;
  12f224:	e3a03000 	mov	r3, #0
  12f228:	e54b3005 	strb	r3, [fp, #-5]
  12f22c:	ea00000e 	b	12f26c <etharp_query+0x59c>
      } else {
        /* the pool MEMP_ARP_QUEUE is empty */
        pbuf_free(p);
  12f230:	e51b0010 	ldr	r0, [fp, #-16]
  12f234:	ebffaf1d 	bl	11aeb0 <pbuf_free>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
  12f238:	e3e03000 	mvn	r3, #0
  12f23c:	e54b3005 	strb	r3, [fp, #-5]
  12f240:	ea000009 	b	12f26c <etharp_query+0x59c>
      arp_table[i].q = p;
      result = ERR_OK;
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
  12f244:	e30c3a30 	movw	r3, #51760	; 0xca30
  12f248:	e3403015 	movt	r3, #21
  12f24c:	e1d332b4 	ldrh	r3, [r3, #36]	; 0x24
  12f250:	e2833001 	add	r3, r3, #1
  12f254:	e6ff2073 	uxth	r2, r3
  12f258:	e30c3a30 	movw	r3, #51760	; 0xca30
  12f25c:	e3403015 	movt	r3, #21
  12f260:	e1c322b4 	strh	r2, [r3, #36]	; 0x24
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
  12f264:	e3e03000 	mvn	r3, #0
  12f268:	e54b3005 	strb	r3, [fp, #-5]
    }
  }
  return result;
  12f26c:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  12f270:	e1a00003 	mov	r0, r3
  12f274:	e24bd004 	sub	sp, fp, #4
  12f278:	e8bd8800 	pop	{fp, pc}

0012f27c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
  12f27c:	e92d4800 	push	{fp, lr}
  12f280:	e28db004 	add	fp, sp, #4
  12f284:	e24dd028 	sub	sp, sp, #40	; 0x28
  12f288:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12f28c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  12f290:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  12f294:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  struct pbuf *p;
  err_t result = ERR_OK;
  12f298:	e3a03000 	mov	r3, #0
  12f29c:	e54b3005 	strb	r3, [fp, #-5]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
  12f2a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f2a4:	e3530000 	cmp	r3, #0
  12f2a8:	1a000006 	bne	12f2c8 <etharp_raw+0x4c>
  12f2ac:	e3090398 	movw	r0, #37784	; 0x9398
  12f2b0:	e3400014 	movt	r0, #20
  12f2b4:	ebff4f96 	bl	103114 <rt_kprintf>
  12f2b8:	e3001458 	movw	r1, #1112	; 0x458
  12f2bc:	e3090254 	movw	r0, #37460	; 0x9254
  12f2c0:	e3400014 	movt	r0, #20
  12f2c4:	ebff6f89 	bl	10b0f0 <sys_arch_assert>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
  12f2c8:	e3a02000 	mov	r2, #0
  12f2cc:	e3a0101c 	mov	r1, #28
  12f2d0:	e3a00002 	mov	r0, #2
  12f2d4:	ebffabee 	bl	11a294 <pbuf_alloc>
  12f2d8:	e50b000c 	str	r0, [fp, #-12]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
  12f2dc:	e51b300c 	ldr	r3, [fp, #-12]
  12f2e0:	e3530000 	cmp	r3, #0
  12f2e4:	1a000009 	bne	12f310 <etharp_raw+0x94>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
  12f2e8:	e30c3a30 	movw	r3, #51760	; 0xca30
  12f2ec:	e3403015 	movt	r3, #21
  12f2f0:	e1d332b4 	ldrh	r3, [r3, #36]	; 0x24
  12f2f4:	e2833001 	add	r3, r3, #1
  12f2f8:	e6ff2073 	uxth	r2, r3
  12f2fc:	e30c3a30 	movw	r3, #51760	; 0xca30
  12f300:	e3403015 	movt	r3, #21
  12f304:	e1c322b4 	strh	r2, [r3, #36]	; 0x24
    return ERR_MEM;
  12f308:	e3e03000 	mvn	r3, #0
  12f30c:	ea00005b 	b	12f480 <etharp_raw+0x204>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
  12f310:	e51b300c 	ldr	r3, [fp, #-12]
  12f314:	e1d330ba 	ldrh	r3, [r3, #10]
  12f318:	e353001b 	cmp	r3, #27
  12f31c:	8a000006 	bhi	12f33c <etharp_raw+0xc0>
  12f320:	e309042c 	movw	r0, #37932	; 0x942c
  12f324:	e3400014 	movt	r0, #20
  12f328:	ebff4f79 	bl	103114 <rt_kprintf>
  12f32c:	e3001464 	movw	r1, #1124	; 0x464
  12f330:	e3090254 	movw	r0, #37460	; 0x9254
  12f334:	e3400014 	movt	r0, #20
  12f338:	ebff6f6c 	bl	10b0f0 <sys_arch_assert>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
  12f33c:	e51b300c 	ldr	r3, [fp, #-12]
  12f340:	e5933004 	ldr	r3, [r3, #4]
  12f344:	e50b3010 	str	r3, [fp, #-16]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
  12f348:	e1db31b0 	ldrh	r3, [fp, #16]
  12f34c:	e1a00003 	mov	r0, r3
  12f350:	ebff9c9f 	bl	1165d4 <lwip_htons>
  12f354:	e1a03000 	mov	r3, r0
  12f358:	e1a02003 	mov	r2, r3
  12f35c:	e51b3010 	ldr	r3, [fp, #-16]
  12f360:	e1c320b6 	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
  12f364:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f368:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
  12f36c:	e3530006 	cmp	r3, #6
  12f370:	0a000006 	beq	12f390 <etharp_raw+0x114>
  12f374:	e3090460 	movw	r0, #37984	; 0x9460
  12f378:	e3400014 	movt	r0, #20
  12f37c:	ebff4f64 	bl	103114 <rt_kprintf>
  12f380:	e300146b 	movw	r1, #1131	; 0x46b
  12f384:	e3090254 	movw	r0, #37460	; 0x9254
  12f388:	e3400014 	movt	r0, #20
  12f38c:	ebff6f57 	bl	10b0f0 <sys_arch_assert>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
  12f390:	e51b3010 	ldr	r3, [fp, #-16]
  12f394:	e2833008 	add	r3, r3, #8
  12f398:	e3a02006 	mov	r2, #6
  12f39c:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  12f3a0:	e1a00003 	mov	r0, r3
  12f3a4:	eb00467a 	bl	140d94 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
  12f3a8:	e51b3010 	ldr	r3, [fp, #-16]
  12f3ac:	e2833012 	add	r3, r3, #18
  12f3b0:	e3a02006 	mov	r2, #6
  12f3b4:	e59b1008 	ldr	r1, [fp, #8]
  12f3b8:	e1a00003 	mov	r0, r3
  12f3bc:	eb004674 	bl	140d94 <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
  12f3c0:	e51b3010 	ldr	r3, [fp, #-16]
  12f3c4:	e283300e 	add	r3, r3, #14
  12f3c8:	e59b2004 	ldr	r2, [fp, #4]
  12f3cc:	e5922000 	ldr	r2, [r2]
  12f3d0:	e5832000 	str	r2, [r3]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
  12f3d4:	e51b3010 	ldr	r3, [fp, #-16]
  12f3d8:	e2833018 	add	r3, r3, #24
  12f3dc:	e59b200c 	ldr	r2, [fp, #12]
  12f3e0:	e5922000 	ldr	r2, [r2]
  12f3e4:	e5832000 	str	r2, [r3]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
  12f3e8:	e51b3010 	ldr	r3, [fp, #-16]
  12f3ec:	e3a02000 	mov	r2, #0
  12f3f0:	e5c32000 	strb	r2, [r3]
  12f3f4:	e3a02000 	mov	r2, #0
  12f3f8:	e3822001 	orr	r2, r2, #1
  12f3fc:	e5c32001 	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
  12f400:	e51b3010 	ldr	r3, [fp, #-16]
  12f404:	e3a02000 	mov	r2, #0
  12f408:	e3822008 	orr	r2, r2, #8
  12f40c:	e5c32002 	strb	r2, [r3, #2]
  12f410:	e3a02000 	mov	r2, #0
  12f414:	e5c32003 	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
  12f418:	e51b3010 	ldr	r3, [fp, #-16]
  12f41c:	e3a02006 	mov	r2, #6
  12f420:	e5c32004 	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
  12f424:	e51b3010 	ldr	r3, [fp, #-16]
  12f428:	e3a02004 	mov	r2, #4
  12f42c:	e5c32005 	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
  12f430:	e3003806 	movw	r3, #2054	; 0x806
  12f434:	e58d3000 	str	r3, [sp]
  12f438:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12f43c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  12f440:	e51b100c 	ldr	r1, [fp, #-12]
  12f444:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12f448:	ebffe6ab 	bl	128efc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  12f44c:	e30c3a30 	movw	r3, #51760	; 0xca30
  12f450:	e3403015 	movt	r3, #21
  12f454:	e1d331b8 	ldrh	r3, [r3, #24]
  12f458:	e2833001 	add	r3, r3, #1
  12f45c:	e6ff2073 	uxth	r2, r3
  12f460:	e30c3a30 	movw	r3, #51760	; 0xca30
  12f464:	e3403015 	movt	r3, #21
  12f468:	e1c321b8 	strh	r2, [r3, #24]
  /* free ARP query packet */
  pbuf_free(p);
  12f46c:	e51b000c 	ldr	r0, [fp, #-12]
  12f470:	ebffae8e 	bl	11aeb0 <pbuf_free>
  p = NULL;
  12f474:	e3a03000 	mov	r3, #0
  12f478:	e50b300c 	str	r3, [fp, #-12]
  /* could not allocate pbuf for ARP request */

  return result;
  12f47c:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  12f480:	e1a00003 	mov	r0, r3
  12f484:	e24bd004 	sub	sp, fp, #4
  12f488:	e8bd8800 	pop	{fp, pc}

0012f48c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
  12f48c:	e92d4800 	push	{fp, lr}
  12f490:	e28db004 	add	fp, sp, #4
  12f494:	e24dd020 	sub	sp, sp, #32
  12f498:	e50b0008 	str	r0, [fp, #-8]
  12f49c:	e50b100c 	str	r1, [fp, #-12]
  12f4a0:	e50b2010 	str	r2, [fp, #-16]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
  12f4a4:	e51b3008 	ldr	r3, [fp, #-8]
  12f4a8:	e283103b 	add	r1, r3, #59	; 0x3b
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
  12f4ac:	e51b3008 	ldr	r3, [fp, #-8]
  12f4b0:	e283003b 	add	r0, r3, #59	; 0x3b
  12f4b4:	e51b3008 	ldr	r3, [fp, #-8]
  12f4b8:	e2832004 	add	r2, r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
  12f4bc:	e3a03001 	mov	r3, #1
  12f4c0:	e58d300c 	str	r3, [sp, #12]
  12f4c4:	e51b300c 	ldr	r3, [fp, #-12]
  12f4c8:	e58d3008 	str	r3, [sp, #8]
  12f4cc:	e3083b38 	movw	r3, #35640	; 0x8b38
  12f4d0:	e3403014 	movt	r3, #20
  12f4d4:	e58d3004 	str	r3, [sp, #4]
  12f4d8:	e58d2000 	str	r2, [sp]
  12f4dc:	e1a03000 	mov	r3, r0
  12f4e0:	e51b2010 	ldr	r2, [fp, #-16]
  12f4e4:	e51b0008 	ldr	r0, [fp, #-8]
  12f4e8:	ebffff63 	bl	12f27c <etharp_raw>
  12f4ec:	e1a03000 	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
  12f4f0:	e1a00003 	mov	r0, r3
  12f4f4:	e24bd004 	sub	sp, fp, #4
  12f4f8:	e8bd8800 	pop	{fp, pc}

0012f4fc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
  12f4fc:	e92d4800 	push	{fp, lr}
  12f500:	e28db004 	add	fp, sp, #4
  12f504:	e24dd008 	sub	sp, sp, #8
  12f508:	e50b0008 	str	r0, [fp, #-8]
  12f50c:	e50b100c 	str	r1, [fp, #-12]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
  12f510:	e3082b30 	movw	r2, #35632	; 0x8b30
  12f514:	e3402014 	movt	r2, #20
  12f518:	e51b100c 	ldr	r1, [fp, #-12]
  12f51c:	e51b0008 	ldr	r0, [fp, #-8]
  12f520:	ebffffd9 	bl	12f48c <etharp_request_dst>
  12f524:	e1a03000 	mov	r3, r0
}
  12f528:	e1a00003 	mov	r0, r3
  12f52c:	e24bd004 	sub	sp, fp, #4
  12f530:	e8bd8800 	pop	{fp, pc}

0012f534 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
  12f534:	e92d4800 	push	{fp, lr}
  12f538:	e28db004 	add	fp, sp, #4
  12f53c:	e24dd038 	sub	sp, sp, #56	; 0x38
  12f540:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  12f544:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  struct icmp_echo_hdr *iecho;
  const struct ip_hdr *iphdr_in;
  u16_t hlen;
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  12f548:	e30c3a30 	movw	r3, #51760	; 0xca30
  12f54c:	e3403015 	movt	r3, #21
  12f550:	e1d336b2 	ldrh	r3, [r3, #98]	; 0x62
  12f554:	e2833001 	add	r3, r3, #1
  12f558:	e6ff2073 	uxth	r2, r3
  12f55c:	e30c3a30 	movw	r3, #51760	; 0xca30
  12f560:	e3403015 	movt	r3, #21
  12f564:	e1c326b2 	strh	r2, [r3, #98]	; 0x62
  MIB2_STATS_INC(mib2.icmpinmsgs);
  12f568:	e30c3a30 	movw	r3, #51760	; 0xca30
  12f56c:	e3403015 	movt	r3, #21
  12f570:	e59331a0 	ldr	r3, [r3, #416]	; 0x1a0
  12f574:	e2832001 	add	r2, r3, #1
  12f578:	e30c3a30 	movw	r3, #51760	; 0xca30
  12f57c:	e3403015 	movt	r3, #21
  12f580:	e58321a0 	str	r2, [r3, #416]	; 0x1a0

  iphdr_in = ip4_current_header();
  12f584:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  12f588:	e3403014 	movt	r3, #20
  12f58c:	e5933008 	ldr	r3, [r3, #8]
  12f590:	e50b3008 	str	r3, [fp, #-8]
  hlen = IPH_HL(iphdr_in) * 4;
  12f594:	e51b3008 	ldr	r3, [fp, #-8]
  12f598:	e5d33000 	ldrb	r3, [r3]
  12f59c:	e6ff3073 	uxth	r3, r3
  12f5a0:	e203300f 	and	r3, r3, #15
  12f5a4:	e6ff3073 	uxth	r3, r3
  12f5a8:	e1a03103 	lsl	r3, r3, #2
  12f5ac:	e14b30ba 	strh	r3, [fp, #-10]
  if (hlen < IP_HLEN) {
  12f5b0:	e15b30ba 	ldrh	r3, [fp, #-10]
  12f5b4:	e3530013 	cmp	r3, #19
  12f5b8:	9a000182 	bls	12fbc8 <icmp_input+0x694>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
  12f5bc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12f5c0:	e1d330ba 	ldrh	r3, [r3, #10]
  12f5c4:	e3530003 	cmp	r3, #3
  12f5c8:	9a000180 	bls	12fbd0 <icmp_input+0x69c>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
  12f5cc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12f5d0:	e5933004 	ldr	r3, [r3, #4]
  12f5d4:	e5d33000 	ldrb	r3, [r3]
  12f5d8:	e54b300b 	strb	r3, [fp, #-11]
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
  12f5dc:	e55b300b 	ldrb	r3, [fp, #-11]
  12f5e0:	e3530000 	cmp	r3, #0
  12f5e4:	0a000002 	beq	12f5f4 <icmp_input+0xc0>
  12f5e8:	e3530008 	cmp	r3, #8
  12f5ec:	0a000008 	beq	12f614 <icmp_input+0xe0>
  12f5f0:	ea0000fd 	b	12f9ec <icmp_input+0x4b8>
  case ICMP_ER:
    /* This is OK, echo reply might have been parsed by a raw PCB
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
  12f5f4:	e30c3a30 	movw	r3, #51760	; 0xca30
  12f5f8:	e3403015 	movt	r3, #21
  12f5fc:	e59331c0 	ldr	r3, [r3, #448]	; 0x1c0
  12f600:	e2832001 	add	r2, r3, #1
  12f604:	e30c3a30 	movw	r3, #51760	; 0xca30
  12f608:	e3403015 	movt	r3, #21
  12f60c:	e58321c0 	str	r2, [r3, #448]	; 0x1c0
    break;
  12f610:	ea000169 	b	12fbbc <icmp_input+0x688>
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
  12f614:	e30c3a30 	movw	r3, #51760	; 0xca30
  12f618:	e3403015 	movt	r3, #21
  12f61c:	e59331bc 	ldr	r3, [r3, #444]	; 0x1bc
  12f620:	e2832001 	add	r2, r3, #1
  12f624:	e30c3a30 	movw	r3, #51760	; 0xca30
  12f628:	e3403015 	movt	r3, #21
  12f62c:	e58321bc 	str	r2, [r3, #444]	; 0x1bc
    src = ip4_current_dest_addr();
  12f630:	e59f3650 	ldr	r3, [pc, #1616]	; 12fc88 <icmp_input+0x754>
  12f634:	e50b3010 	str	r3, [fp, #-16]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
  12f638:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  12f63c:	e3403014 	movt	r3, #20
  12f640:	e5933014 	ldr	r3, [r3, #20]
  12f644:	e20330f0 	and	r3, r3, #240	; 0xf0
  12f648:	e35300e0 	cmp	r3, #224	; 0xe0
  12f64c:	0a000174 	beq	12fc24 <icmp_input+0x6f0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
  12f650:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  12f654:	e3403014 	movt	r3, #20
  12f658:	e5932014 	ldr	r2, [r3, #20]
  12f65c:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  12f660:	e3403014 	movt	r3, #20
  12f664:	e5933000 	ldr	r3, [r3]
  12f668:	e1a01003 	mov	r1, r3
  12f66c:	e1a00002 	mov	r0, r2
  12f670:	eb000ba6 	bl	132510 <ip4_addr_isbroadcast_u32>
  12f674:	e1a03000 	mov	r3, r0
  12f678:	e3530000 	cmp	r3, #0
  12f67c:	1a00016a 	bne	12fc2c <icmp_input+0x6f8>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
  12f680:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12f684:	e1d330b8 	ldrh	r3, [r3, #8]
  12f688:	e3530007 	cmp	r3, #7
  12f68c:	9a000151 	bls	12fbd8 <icmp_input+0x6a4>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
      goto lenerr;
    }
#if CHECKSUM_CHECK_ICMP
    IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
      if (inet_chksum_pbuf(p) != 0) {
  12f690:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f694:	ebffa4ed 	bl	118a50 <inet_chksum_pbuf>
  12f698:	e1a03000 	mov	r3, r0
  12f69c:	e3530000 	cmp	r3, #0
  12f6a0:	0a000011 	beq	12f6ec <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
        pbuf_free(p);
  12f6a4:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f6a8:	ebffae00 	bl	11aeb0 <pbuf_free>
        ICMP_STATS_INC(icmp.chkerr);
  12f6ac:	e30c3a30 	movw	r3, #51760	; 0xca30
  12f6b0:	e3403015 	movt	r3, #21
  12f6b4:	e1d336b8 	ldrh	r3, [r3, #104]	; 0x68
  12f6b8:	e2833001 	add	r3, r3, #1
  12f6bc:	e6ff2073 	uxth	r2, r3
  12f6c0:	e30c3a30 	movw	r3, #51760	; 0xca30
  12f6c4:	e3403015 	movt	r3, #21
  12f6c8:	e1c326b8 	strh	r2, [r3, #104]	; 0x68
        MIB2_STATS_INC(mib2.icmpinerrors);
  12f6cc:	e30c3a30 	movw	r3, #51760	; 0xca30
  12f6d0:	e3403015 	movt	r3, #21
  12f6d4:	e59331a4 	ldr	r3, [r3, #420]	; 0x1a4
  12f6d8:	e2832001 	add	r2, r3, #1
  12f6dc:	e30c3a30 	movw	r3, #51760	; 0xca30
  12f6e0:	e3403015 	movt	r3, #21
  12f6e4:	e58321a4 	str	r2, [r3, #420]	; 0x1a4
        return;
  12f6e8:	ea000164 	b	12fc80 <icmp_input+0x74c>
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
  12f6ec:	e15b30ba 	ldrh	r3, [fp, #-10]
  12f6f0:	e2833010 	add	r3, r3, #16
  12f6f4:	e6ff3073 	uxth	r3, r3
  12f6f8:	e6bf3073 	sxth	r3, r3
  12f6fc:	e1a01003 	mov	r1, r3
  12f700:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f704:	ebffadcb 	bl	11ae38 <pbuf_header>
  12f708:	e1a03000 	mov	r3, r0
  12f70c:	e3530000 	cmp	r3, #0
  12f710:	0a00003e 	beq	12f810 <icmp_input+0x2dc>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
  12f714:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12f718:	e1d320b8 	ldrh	r2, [r3, #8]
  12f71c:	e15b30ba 	ldrh	r3, [fp, #-10]
  12f720:	e0823003 	add	r3, r2, r3
  12f724:	e6ff3073 	uxth	r3, r3
  12f728:	e3a02000 	mov	r2, #0
  12f72c:	e1a01003 	mov	r1, r3
  12f730:	e3a00002 	mov	r0, #2
  12f734:	ebffaad6 	bl	11a294 <pbuf_alloc>
  12f738:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
      if (r == NULL) {
  12f73c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12f740:	e3530000 	cmp	r3, #0
  12f744:	0a00013a 	beq	12fc34 <icmp_input+0x700>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
  12f748:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12f74c:	e1d330ba 	ldrh	r3, [r3, #10]
  12f750:	e1a02003 	mov	r2, r3
  12f754:	e15b30ba 	ldrh	r3, [fp, #-10]
  12f758:	e2833008 	add	r3, r3, #8
  12f75c:	e1520003 	cmp	r2, r3
  12f760:	2a000002 	bcs	12f770 <icmp_input+0x23c>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
  12f764:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  12f768:	ebffadd0 	bl	11aeb0 <pbuf_free>
        goto icmperr;
  12f76c:	ea000131 	b	12fc38 <icmp_input+0x704>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
  12f770:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12f774:	e5933004 	ldr	r3, [r3, #4]
  12f778:	e15b20ba 	ldrh	r2, [fp, #-10]
  12f77c:	e51b1008 	ldr	r1, [fp, #-8]
  12f780:	e1a00003 	mov	r0, r3
  12f784:	eb004582 	bl	140d94 <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
  12f788:	e15b30ba 	ldrh	r3, [fp, #-10]
  12f78c:	e2633000 	rsb	r3, r3, #0
  12f790:	e6ff3073 	uxth	r3, r3
  12f794:	e6bf3073 	sxth	r3, r3
  12f798:	e1a01003 	mov	r1, r3
  12f79c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  12f7a0:	ebffada4 	bl	11ae38 <pbuf_header>
  12f7a4:	e1a03000 	mov	r3, r0
  12f7a8:	e3530000 	cmp	r3, #0
  12f7ac:	0a000009 	beq	12f7d8 <icmp_input+0x2a4>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
  12f7b0:	e30904a4 	movw	r0, #38052	; 0x94a4
  12f7b4:	e3400014 	movt	r0, #20
  12f7b8:	ebff4e55 	bl	103114 <rt_kprintf>
  12f7bc:	e3a010af 	mov	r1, #175	; 0xaf
  12f7c0:	e30904dc 	movw	r0, #38108	; 0x94dc
  12f7c4:	e3400014 	movt	r0, #20
  12f7c8:	ebff6e48 	bl	10b0f0 <sys_arch_assert>
        pbuf_free(r);
  12f7cc:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  12f7d0:	ebffadb6 	bl	11aeb0 <pbuf_free>
        goto icmperr;
  12f7d4:	ea000117 	b	12fc38 <icmp_input+0x704>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
  12f7d8:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  12f7dc:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  12f7e0:	ebffaf07 	bl	11b404 <pbuf_copy>
  12f7e4:	e1a03000 	mov	r3, r0
  12f7e8:	e3530000 	cmp	r3, #0
  12f7ec:	0a000002 	beq	12f7fc <icmp_input+0x2c8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
  12f7f0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  12f7f4:	ebffadad 	bl	11aeb0 <pbuf_free>
        goto icmperr;
  12f7f8:	ea00010e 	b	12fc38 <icmp_input+0x704>
      }
      /* free the original p */
      pbuf_free(p);
  12f7fc:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f800:	ebffadaa 	bl	11aeb0 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
  12f804:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12f808:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  12f80c:	ea000014 	b	12f864 <icmp_input+0x330>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
  12f810:	e15b30ba 	ldrh	r3, [fp, #-10]
  12f814:	e26334ff 	rsb	r3, r3, #-16777216	; 0xff000000
  12f818:	e28338ff 	add	r3, r3, #16711680	; 0xff0000
  12f81c:	e2833cff 	add	r3, r3, #65280	; 0xff00
  12f820:	e28330f0 	add	r3, r3, #240	; 0xf0
  12f824:	e6ff3073 	uxth	r3, r3
  12f828:	e6bf3073 	sxth	r3, r3
  12f82c:	e1a01003 	mov	r1, r3
  12f830:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f834:	ebffad7f 	bl	11ae38 <pbuf_header>
  12f838:	e1a03000 	mov	r3, r0
  12f83c:	e3530000 	cmp	r3, #0
  12f840:	0a000007 	beq	12f864 <icmp_input+0x330>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
  12f844:	e3090510 	movw	r0, #38160	; 0x9510
  12f848:	e3400014 	movt	r0, #20
  12f84c:	ebff4e30 	bl	103114 <rt_kprintf>
  12f850:	e3a010c0 	mov	r1, #192	; 0xc0
  12f854:	e30904dc 	movw	r0, #38108	; 0x94dc
  12f858:	e3400014 	movt	r0, #20
  12f85c:	ebff6e23 	bl	10b0f0 <sys_arch_assert>
        goto icmperr;
  12f860:	ea0000f4 	b	12fc38 <icmp_input+0x704>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
  12f864:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12f868:	e5933004 	ldr	r3, [r3, #4]
  12f86c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    if (pbuf_header(p, (s16_t)hlen)) {
  12f870:	e15b30fa 	ldrsh	r3, [fp, #-10]
  12f874:	e1a01003 	mov	r1, r3
  12f878:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f87c:	ebffad6d 	bl	11ae38 <pbuf_header>
  12f880:	e1a03000 	mov	r3, r0
  12f884:	e3530000 	cmp	r3, #0
  12f888:	1a0000ca 	bne	12fbb8 <icmp_input+0x684>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
  12f88c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12f890:	e5933004 	ldr	r3, [r3, #4]
  12f894:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
      ip4_addr_copy(iphdr->src, *src);
  12f898:	e51b3010 	ldr	r3, [fp, #-16]
  12f89c:	e5932000 	ldr	r2, [r3]
  12f8a0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12f8a4:	e583200c 	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
  12f8a8:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  12f8ac:	e3403014 	movt	r3, #20
  12f8b0:	e5932010 	ldr	r2, [r3, #16]
  12f8b4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12f8b8:	e5832010 	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
  12f8bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f8c0:	e3a02000 	mov	r2, #0
  12f8c4:	e5c32000 	strb	r2, [r3]
#if CHECKSUM_GEN_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
        /* adjust the checksum */
        if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
  12f8c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f8cc:	e1d330b2 	ldrh	r3, [r3, #2]
  12f8d0:	e6ff3073 	uxth	r3, r3
  12f8d4:	e30f2ff7 	movw	r2, #65527	; 0xfff7
  12f8d8:	e1530002 	cmp	r3, r2
  12f8dc:	9a000007 	bls	12f900 <icmp_input+0x3cc>
          iecho->chksum += PP_HTONS(ICMP_ECHO << 8) + 1;
  12f8e0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f8e4:	e1d330b2 	ldrh	r3, [r3, #2]
  12f8e8:	e6ff3073 	uxth	r3, r3
  12f8ec:	e2833009 	add	r3, r3, #9
  12f8f0:	e6ff2073 	uxth	r2, r3
  12f8f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f8f8:	e1c320b2 	strh	r2, [r3, #2]
  12f8fc:	ea000006 	b	12f91c <icmp_input+0x3e8>
        } else {
          iecho->chksum += PP_HTONS(ICMP_ECHO << 8);
  12f900:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f904:	e1d330b2 	ldrh	r3, [r3, #2]
  12f908:	e6ff3073 	uxth	r3, r3
  12f90c:	e2833008 	add	r3, r3, #8
  12f910:	e6ff2073 	uxth	r2, r3
  12f914:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f918:	e1c320b2 	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
  12f91c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12f920:	e3e02000 	mvn	r2, #0
  12f924:	e5c32008 	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
  12f928:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12f92c:	e3a02000 	mov	r2, #0
  12f930:	e5c3200a 	strb	r2, [r3, #10]
  12f934:	e3a02000 	mov	r2, #0
  12f938:	e5c3200b 	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_IP) {
        IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
  12f93c:	e15b30ba 	ldrh	r3, [fp, #-10]
  12f940:	e1a01003 	mov	r1, r3
  12f944:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12f948:	ebffa430 	bl	118a10 <inet_chksum>
  12f94c:	e1a03000 	mov	r3, r0
  12f950:	e1a02003 	mov	r2, r3
  12f954:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12f958:	e1c320ba 	strh	r2, [r3, #10]
      }
#endif /* CHECKSUM_GEN_IP */

      ICMP_STATS_INC(icmp.xmit);
  12f95c:	e30c3a30 	movw	r3, #51760	; 0xca30
  12f960:	e3403015 	movt	r3, #21
  12f964:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  12f968:	e2833001 	add	r3, r3, #1
  12f96c:	e6ff2073 	uxth	r2, r3
  12f970:	e30c3a30 	movw	r3, #51760	; 0xca30
  12f974:	e3403015 	movt	r3, #21
  12f978:	e1c326b0 	strh	r2, [r3, #96]	; 0x60
      /* increase number of messages attempted to send */
      MIB2_STATS_INC(mib2.icmpoutmsgs);
  12f97c:	e30c3a30 	movw	r3, #51760	; 0xca30
  12f980:	e3403015 	movt	r3, #21
  12f984:	e59331d4 	ldr	r3, [r3, #468]	; 0x1d4
  12f988:	e2832001 	add	r2, r3, #1
  12f98c:	e30c3a30 	movw	r3, #51760	; 0xca30
  12f990:	e3403015 	movt	r3, #21
  12f994:	e58321d4 	str	r2, [r3, #468]	; 0x1d4
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);
  12f998:	e30c3a30 	movw	r3, #51760	; 0xca30
  12f99c:	e3403015 	movt	r3, #21
  12f9a0:	e59331e8 	ldr	r3, [r3, #488]	; 0x1e8
  12f9a4:	e2832001 	add	r2, r3, #1
  12f9a8:	e30c3a30 	movw	r3, #51760	; 0xca30
  12f9ac:	e3403015 	movt	r3, #21
  12f9b0:	e58321e8 	str	r2, [r3, #488]	; 0x1e8

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
  12f9b4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  12f9b8:	e58d3008 	str	r3, [sp, #8]
  12f9bc:	e3a03001 	mov	r3, #1
  12f9c0:	e58d3004 	str	r3, [sp, #4]
  12f9c4:	e3a03000 	mov	r3, #0
  12f9c8:	e58d3000 	str	r3, [sp]
  12f9cc:	e3a030ff 	mov	r3, #255	; 0xff
  12f9d0:	e3a02000 	mov	r2, #0
  12f9d4:	e51b1010 	ldr	r1, [fp, #-16]
  12f9d8:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f9dc:	eb0008c5 	bl	131cf8 <ip4_output_if>
  12f9e0:	e1a03000 	mov	r3, r0
  12f9e4:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
  12f9e8:	ea000072 	b	12fbb8 <icmp_input+0x684>
  default:
    if (type == ICMP_DUR) {
  12f9ec:	e55b300b 	ldrb	r3, [fp, #-11]
  12f9f0:	e3530003 	cmp	r3, #3
  12f9f4:	1a000007 	bne	12fa18 <icmp_input+0x4e4>
      MIB2_STATS_INC(mib2.icmpindestunreachs);
  12f9f8:	e30c3a30 	movw	r3, #51760	; 0xca30
  12f9fc:	e3403015 	movt	r3, #21
  12fa00:	e59331a8 	ldr	r3, [r3, #424]	; 0x1a8
  12fa04:	e2832001 	add	r2, r3, #1
  12fa08:	e30c3a30 	movw	r3, #51760	; 0xca30
  12fa0c:	e3403015 	movt	r3, #21
  12fa10:	e58321a8 	str	r2, [r3, #424]	; 0x1a8
  12fa14:	ea000056 	b	12fb74 <icmp_input+0x640>
    } else if (type == ICMP_TE) {
  12fa18:	e55b300b 	ldrb	r3, [fp, #-11]
  12fa1c:	e353000b 	cmp	r3, #11
  12fa20:	1a000007 	bne	12fa44 <icmp_input+0x510>
      MIB2_STATS_INC(mib2.icmpintimeexcds);
  12fa24:	e30c3a30 	movw	r3, #51760	; 0xca30
  12fa28:	e3403015 	movt	r3, #21
  12fa2c:	e59331ac 	ldr	r3, [r3, #428]	; 0x1ac
  12fa30:	e2832001 	add	r2, r3, #1
  12fa34:	e30c3a30 	movw	r3, #51760	; 0xca30
  12fa38:	e3403015 	movt	r3, #21
  12fa3c:	e58321ac 	str	r2, [r3, #428]	; 0x1ac
  12fa40:	ea00004b 	b	12fb74 <icmp_input+0x640>
    } else if (type == ICMP_PP) {
  12fa44:	e55b300b 	ldrb	r3, [fp, #-11]
  12fa48:	e353000c 	cmp	r3, #12
  12fa4c:	1a000007 	bne	12fa70 <icmp_input+0x53c>
      MIB2_STATS_INC(mib2.icmpinparmprobs);
  12fa50:	e30c3a30 	movw	r3, #51760	; 0xca30
  12fa54:	e3403015 	movt	r3, #21
  12fa58:	e59331b0 	ldr	r3, [r3, #432]	; 0x1b0
  12fa5c:	e2832001 	add	r2, r3, #1
  12fa60:	e30c3a30 	movw	r3, #51760	; 0xca30
  12fa64:	e3403015 	movt	r3, #21
  12fa68:	e58321b0 	str	r2, [r3, #432]	; 0x1b0
  12fa6c:	ea000040 	b	12fb74 <icmp_input+0x640>
    } else if (type == ICMP_SQ) {
  12fa70:	e55b300b 	ldrb	r3, [fp, #-11]
  12fa74:	e3530004 	cmp	r3, #4
  12fa78:	1a000007 	bne	12fa9c <icmp_input+0x568>
      MIB2_STATS_INC(mib2.icmpinsrcquenchs);
  12fa7c:	e30c3a30 	movw	r3, #51760	; 0xca30
  12fa80:	e3403015 	movt	r3, #21
  12fa84:	e59331b4 	ldr	r3, [r3, #436]	; 0x1b4
  12fa88:	e2832001 	add	r2, r3, #1
  12fa8c:	e30c3a30 	movw	r3, #51760	; 0xca30
  12fa90:	e3403015 	movt	r3, #21
  12fa94:	e58321b4 	str	r2, [r3, #436]	; 0x1b4
  12fa98:	ea000035 	b	12fb74 <icmp_input+0x640>
    } else if (type == ICMP_RD) {
  12fa9c:	e55b300b 	ldrb	r3, [fp, #-11]
  12faa0:	e3530005 	cmp	r3, #5
  12faa4:	1a000007 	bne	12fac8 <icmp_input+0x594>
      MIB2_STATS_INC(mib2.icmpinredirects);
  12faa8:	e30c3a30 	movw	r3, #51760	; 0xca30
  12faac:	e3403015 	movt	r3, #21
  12fab0:	e59331b8 	ldr	r3, [r3, #440]	; 0x1b8
  12fab4:	e2832001 	add	r2, r3, #1
  12fab8:	e30c3a30 	movw	r3, #51760	; 0xca30
  12fabc:	e3403015 	movt	r3, #21
  12fac0:	e58321b8 	str	r2, [r3, #440]	; 0x1b8
  12fac4:	ea00002a 	b	12fb74 <icmp_input+0x640>
    } else if (type == ICMP_TS) {
  12fac8:	e55b300b 	ldrb	r3, [fp, #-11]
  12facc:	e353000d 	cmp	r3, #13
  12fad0:	1a000007 	bne	12faf4 <icmp_input+0x5c0>
      MIB2_STATS_INC(mib2.icmpintimestamps);
  12fad4:	e30c3a30 	movw	r3, #51760	; 0xca30
  12fad8:	e3403015 	movt	r3, #21
  12fadc:	e59331c4 	ldr	r3, [r3, #452]	; 0x1c4
  12fae0:	e2832001 	add	r2, r3, #1
  12fae4:	e30c3a30 	movw	r3, #51760	; 0xca30
  12fae8:	e3403015 	movt	r3, #21
  12faec:	e58321c4 	str	r2, [r3, #452]	; 0x1c4
  12faf0:	ea00001f 	b	12fb74 <icmp_input+0x640>
    } else if (type == ICMP_TSR) {
  12faf4:	e55b300b 	ldrb	r3, [fp, #-11]
  12faf8:	e353000e 	cmp	r3, #14
  12fafc:	1a000007 	bne	12fb20 <icmp_input+0x5ec>
      MIB2_STATS_INC(mib2.icmpintimestampreps);
  12fb00:	e30c3a30 	movw	r3, #51760	; 0xca30
  12fb04:	e3403015 	movt	r3, #21
  12fb08:	e59331c8 	ldr	r3, [r3, #456]	; 0x1c8
  12fb0c:	e2832001 	add	r2, r3, #1
  12fb10:	e30c3a30 	movw	r3, #51760	; 0xca30
  12fb14:	e3403015 	movt	r3, #21
  12fb18:	e58321c8 	str	r2, [r3, #456]	; 0x1c8
  12fb1c:	ea000014 	b	12fb74 <icmp_input+0x640>
    } else if (type == ICMP_AM) {
  12fb20:	e55b300b 	ldrb	r3, [fp, #-11]
  12fb24:	e3530011 	cmp	r3, #17
  12fb28:	1a000007 	bne	12fb4c <icmp_input+0x618>
      MIB2_STATS_INC(mib2.icmpinaddrmasks);
  12fb2c:	e30c3a30 	movw	r3, #51760	; 0xca30
  12fb30:	e3403015 	movt	r3, #21
  12fb34:	e59331cc 	ldr	r3, [r3, #460]	; 0x1cc
  12fb38:	e2832001 	add	r2, r3, #1
  12fb3c:	e30c3a30 	movw	r3, #51760	; 0xca30
  12fb40:	e3403015 	movt	r3, #21
  12fb44:	e58321cc 	str	r2, [r3, #460]	; 0x1cc
  12fb48:	ea000009 	b	12fb74 <icmp_input+0x640>
    } else if (type == ICMP_AMR) {
  12fb4c:	e55b300b 	ldrb	r3, [fp, #-11]
  12fb50:	e3530012 	cmp	r3, #18
  12fb54:	1a000006 	bne	12fb74 <icmp_input+0x640>
      MIB2_STATS_INC(mib2.icmpinaddrmaskreps);
  12fb58:	e30c3a30 	movw	r3, #51760	; 0xca30
  12fb5c:	e3403015 	movt	r3, #21
  12fb60:	e59331d0 	ldr	r3, [r3, #464]	; 0x1d0
  12fb64:	e2832001 	add	r2, r3, #1
  12fb68:	e30c3a30 	movw	r3, #51760	; 0xca30
  12fb6c:	e3403015 	movt	r3, #21
  12fb70:	e58321d0 	str	r2, [r3, #464]	; 0x1d0
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
  12fb74:	e30c3a30 	movw	r3, #51760	; 0xca30
  12fb78:	e3403015 	movt	r3, #21
  12fb7c:	e1d337b0 	ldrh	r3, [r3, #112]	; 0x70
  12fb80:	e2833001 	add	r3, r3, #1
  12fb84:	e6ff2073 	uxth	r2, r3
  12fb88:	e30c3a30 	movw	r3, #51760	; 0xca30
  12fb8c:	e3403015 	movt	r3, #21
  12fb90:	e1c327b0 	strh	r2, [r3, #112]	; 0x70
    ICMP_STATS_INC(icmp.drop);
  12fb94:	e30c3a30 	movw	r3, #51760	; 0xca30
  12fb98:	e3403015 	movt	r3, #21
  12fb9c:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  12fba0:	e2833001 	add	r3, r3, #1
  12fba4:	e6ff2073 	uxth	r2, r3
  12fba8:	e30c3a30 	movw	r3, #51760	; 0xca30
  12fbac:	e3403015 	movt	r3, #21
  12fbb0:	e1c326b6 	strh	r2, [r3, #102]	; 0x66
  12fbb4:	ea000000 	b	12fbbc <icmp_input+0x688>
    break;
  12fbb8:	e320f000 	nop	{0}
  }
  pbuf_free(p);
  12fbbc:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12fbc0:	ebffacba 	bl	11aeb0 <pbuf_free>
  return;
  12fbc4:	ea00002d 	b	12fc80 <icmp_input+0x74c>
    goto lenerr;
  12fbc8:	e320f000 	nop	{0}
  12fbcc:	ea000002 	b	12fbdc <icmp_input+0x6a8>
    goto lenerr;
  12fbd0:	e320f000 	nop	{0}
  12fbd4:	ea000000 	b	12fbdc <icmp_input+0x6a8>
      goto lenerr;
  12fbd8:	e320f000 	nop	{0}
lenerr:
  pbuf_free(p);
  12fbdc:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12fbe0:	ebffacb2 	bl	11aeb0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  12fbe4:	e30c3a30 	movw	r3, #51760	; 0xca30
  12fbe8:	e3403015 	movt	r3, #21
  12fbec:	e1d336ba 	ldrh	r3, [r3, #106]	; 0x6a
  12fbf0:	e2833001 	add	r3, r3, #1
  12fbf4:	e6ff2073 	uxth	r2, r3
  12fbf8:	e30c3a30 	movw	r3, #51760	; 0xca30
  12fbfc:	e3403015 	movt	r3, #21
  12fc00:	e1c326ba 	strh	r2, [r3, #106]	; 0x6a
  MIB2_STATS_INC(mib2.icmpinerrors);
  12fc04:	e30c3a30 	movw	r3, #51760	; 0xca30
  12fc08:	e3403015 	movt	r3, #21
  12fc0c:	e59331a4 	ldr	r3, [r3, #420]	; 0x1a4
  12fc10:	e2832001 	add	r2, r3, #1
  12fc14:	e30c3a30 	movw	r3, #51760	; 0xca30
  12fc18:	e3403015 	movt	r3, #21
  12fc1c:	e58321a4 	str	r2, [r3, #420]	; 0x1a4
  return;
  12fc20:	ea000016 	b	12fc80 <icmp_input+0x74c>
      goto icmperr;
  12fc24:	e320f000 	nop	{0}
  12fc28:	ea000002 	b	12fc38 <icmp_input+0x704>
      goto icmperr;
  12fc2c:	e320f000 	nop	{0}
  12fc30:	ea000000 	b	12fc38 <icmp_input+0x704>
        goto icmperr;
  12fc34:	e320f000 	nop	{0}
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
  12fc38:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12fc3c:	ebffac9b 	bl	11aeb0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  12fc40:	e30c3a30 	movw	r3, #51760	; 0xca30
  12fc44:	e3403015 	movt	r3, #21
  12fc48:	e1d337b4 	ldrh	r3, [r3, #116]	; 0x74
  12fc4c:	e2833001 	add	r3, r3, #1
  12fc50:	e6ff2073 	uxth	r2, r3
  12fc54:	e30c3a30 	movw	r3, #51760	; 0xca30
  12fc58:	e3403015 	movt	r3, #21
  12fc5c:	e1c327b4 	strh	r2, [r3, #116]	; 0x74
  MIB2_STATS_INC(mib2.icmpinerrors);
  12fc60:	e30c3a30 	movw	r3, #51760	; 0xca30
  12fc64:	e3403015 	movt	r3, #21
  12fc68:	e59331a4 	ldr	r3, [r3, #420]	; 0x1a4
  12fc6c:	e2832001 	add	r2, r3, #1
  12fc70:	e30c3a30 	movw	r3, #51760	; 0xca30
  12fc74:	e3403015 	movt	r3, #21
  12fc78:	e58321a4 	str	r2, [r3, #420]	; 0x1a4
  return;
  12fc7c:	e320f000 	nop	{0}
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
  12fc80:	e24bd004 	sub	sp, fp, #4
  12fc84:	e8bd8800 	pop	{fp, pc}
  12fc88:	0014f60c 	.word	0x0014f60c

0012fc8c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
  12fc8c:	e92d4800 	push	{fp, lr}
  12fc90:	e28db004 	add	fp, sp, #4
  12fc94:	e24dd008 	sub	sp, sp, #8
  12fc98:	e50b0008 	str	r0, [fp, #-8]
  12fc9c:	e50b100c 	str	r1, [fp, #-12]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  12fca0:	e30c3a30 	movw	r3, #51760	; 0xca30
  12fca4:	e3403015 	movt	r3, #21
  12fca8:	e59331dc 	ldr	r3, [r3, #476]	; 0x1dc
  12fcac:	e2832001 	add	r2, r3, #1
  12fcb0:	e30c3a30 	movw	r3, #51760	; 0xca30
  12fcb4:	e3403015 	movt	r3, #21
  12fcb8:	e58321dc 	str	r2, [r3, #476]	; 0x1dc
  icmp_send_response(p, ICMP_DUR, t);
  12fcbc:	e51b300c 	ldr	r3, [fp, #-12]
  12fcc0:	e6ef3073 	uxtb	r3, r3
  12fcc4:	e1a02003 	mov	r2, r3
  12fcc8:	e3a01003 	mov	r1, #3
  12fccc:	e51b0008 	ldr	r0, [fp, #-8]
  12fcd0:	eb000017 	bl	12fd34 <icmp_send_response>
}
  12fcd4:	e320f000 	nop	{0}
  12fcd8:	e24bd004 	sub	sp, fp, #4
  12fcdc:	e8bd8800 	pop	{fp, pc}

0012fce0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
  12fce0:	e92d4800 	push	{fp, lr}
  12fce4:	e28db004 	add	fp, sp, #4
  12fce8:	e24dd008 	sub	sp, sp, #8
  12fcec:	e50b0008 	str	r0, [fp, #-8]
  12fcf0:	e50b100c 	str	r1, [fp, #-12]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  12fcf4:	e30c3a30 	movw	r3, #51760	; 0xca30
  12fcf8:	e3403015 	movt	r3, #21
  12fcfc:	e59331e0 	ldr	r3, [r3, #480]	; 0x1e0
  12fd00:	e2832001 	add	r2, r3, #1
  12fd04:	e30c3a30 	movw	r3, #51760	; 0xca30
  12fd08:	e3403015 	movt	r3, #21
  12fd0c:	e58321e0 	str	r2, [r3, #480]	; 0x1e0
  icmp_send_response(p, ICMP_TE, t);
  12fd10:	e51b300c 	ldr	r3, [fp, #-12]
  12fd14:	e6ef3073 	uxtb	r3, r3
  12fd18:	e1a02003 	mov	r2, r3
  12fd1c:	e3a0100b 	mov	r1, #11
  12fd20:	e51b0008 	ldr	r0, [fp, #-8]
  12fd24:	eb000002 	bl	12fd34 <icmp_send_response>
}
  12fd28:	e320f000 	nop	{0}
  12fd2c:	e24bd004 	sub	sp, fp, #4
  12fd30:	e8bd8800 	pop	{fp, pc}

0012fd34 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
  12fd34:	e92d4800 	push	{fp, lr}
  12fd38:	e28db004 	add	fp, sp, #4
  12fd3c:	e24dd030 	sub	sp, sp, #48	; 0x30
  12fd40:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  12fd44:	e1a03001 	mov	r3, r1
  12fd48:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  12fd4c:	e1a03002 	mov	r3, r2
  12fd50:	e54b3022 	strb	r3, [fp, #-34]	; 0xffffffde
  struct icmp_echo_hdr *icmphdr;
  ip4_addr_t iphdr_src;
  struct netif *netif;

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);
  12fd54:	e30c3a30 	movw	r3, #51760	; 0xca30
  12fd58:	e3403015 	movt	r3, #21
  12fd5c:	e59331d4 	ldr	r3, [r3, #468]	; 0x1d4
  12fd60:	e2832001 	add	r2, r3, #1
  12fd64:	e30c3a30 	movw	r3, #51760	; 0xca30
  12fd68:	e3403015 	movt	r3, #21
  12fd6c:	e58321d4 	str	r2, [r3, #468]	; 0x1d4

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
  12fd70:	e3a02000 	mov	r2, #0
  12fd74:	e3a01024 	mov	r1, #36	; 0x24
  12fd78:	e3a00001 	mov	r0, #1
  12fd7c:	ebffa944 	bl	11a294 <pbuf_alloc>
  12fd80:	e50b0008 	str	r0, [fp, #-8]
                 PBUF_RAM);
  if (q == NULL) {
  12fd84:	e51b3008 	ldr	r3, [fp, #-8]
  12fd88:	e3530000 	cmp	r3, #0
  12fd8c:	1a000007 	bne	12fdb0 <icmp_send_response+0x7c>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
  12fd90:	e30c3a30 	movw	r3, #51760	; 0xca30
  12fd94:	e3403015 	movt	r3, #21
  12fd98:	e59331d8 	ldr	r3, [r3, #472]	; 0x1d8
  12fd9c:	e2832001 	add	r2, r3, #1
  12fda0:	e30c3a30 	movw	r3, #51760	; 0xca30
  12fda4:	e3403015 	movt	r3, #21
  12fda8:	e58321d8 	str	r2, [r3, #472]	; 0x1d8
  12fdac:	ea000055 	b	12ff08 <icmp_send_response+0x1d4>
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
  12fdb0:	e51b3008 	ldr	r3, [fp, #-8]
  12fdb4:	e1d330ba 	ldrh	r3, [r3, #10]
  12fdb8:	e3530023 	cmp	r3, #35	; 0x23
  12fdbc:	8a000006 	bhi	12fddc <icmp_send_response+0xa8>
  12fdc0:	e3090544 	movw	r0, #38212	; 0x9544
  12fdc4:	e3400014 	movt	r0, #20
  12fdc8:	ebff4cd1 	bl	103114 <rt_kprintf>
  12fdcc:	e3001162 	movw	r1, #354	; 0x162
  12fdd0:	e30904dc 	movw	r0, #38108	; 0x94dc
  12fdd4:	e3400014 	movt	r0, #20
  12fdd8:	ebff6cc4 	bl	10b0f0 <sys_arch_assert>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
  12fddc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12fde0:	e5933004 	ldr	r3, [r3, #4]
  12fde4:	e50b300c 	str	r3, [fp, #-12]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
  12fde8:	e51b3008 	ldr	r3, [fp, #-8]
  12fdec:	e5933004 	ldr	r3, [r3, #4]
  12fdf0:	e50b3010 	str	r3, [fp, #-16]
  icmphdr->type = type;
  12fdf4:	e51b3010 	ldr	r3, [fp, #-16]
  12fdf8:	e55b2021 	ldrb	r2, [fp, #-33]	; 0xffffffdf
  12fdfc:	e5c32000 	strb	r2, [r3]
  icmphdr->code = code;
  12fe00:	e51b3010 	ldr	r3, [fp, #-16]
  12fe04:	e55b2022 	ldrb	r2, [fp, #-34]	; 0xffffffde
  12fe08:	e5c32001 	strb	r2, [r3, #1]
  icmphdr->id = 0;
  12fe0c:	e51b3010 	ldr	r3, [fp, #-16]
  12fe10:	e3a02000 	mov	r2, #0
  12fe14:	e5c32004 	strb	r2, [r3, #4]
  12fe18:	e3a02000 	mov	r2, #0
  12fe1c:	e5c32005 	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
  12fe20:	e51b3010 	ldr	r3, [fp, #-16]
  12fe24:	e3a02000 	mov	r2, #0
  12fe28:	e5c32006 	strb	r2, [r3, #6]
  12fe2c:	e3a02000 	mov	r2, #0
  12fe30:	e5c32007 	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
  12fe34:	e51b3008 	ldr	r3, [fp, #-8]
  12fe38:	e5933004 	ldr	r3, [r3, #4]
  12fe3c:	e2830008 	add	r0, r3, #8
  12fe40:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12fe44:	e5933004 	ldr	r3, [r3, #4]
  12fe48:	e3a0201c 	mov	r2, #28
  12fe4c:	e1a01003 	mov	r1, r3
  12fe50:	eb0043cf 	bl	140d94 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
  12fe54:	e51b300c 	ldr	r3, [fp, #-12]
  12fe58:	e593300c 	ldr	r3, [r3, #12]
  12fe5c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
  12fe60:	e24b3018 	sub	r3, fp, #24
  12fe64:	e1a00003 	mov	r0, r3
  12fe68:	eb0004c9 	bl	131194 <ip4_route>
  12fe6c:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
#endif
  if (netif != NULL) {
  12fe70:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12fe74:	e3530000 	cmp	r3, #0
  12fe78:	0a000020 	beq	12ff00 <icmp_send_response+0x1cc>
    /* calculate checksum */
    icmphdr->chksum = 0;
  12fe7c:	e51b3010 	ldr	r3, [fp, #-16]
  12fe80:	e3a02000 	mov	r2, #0
  12fe84:	e5c32002 	strb	r2, [r3, #2]
  12fe88:	e3a02000 	mov	r2, #0
  12fe8c:	e5c32003 	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
  12fe90:	e51b3008 	ldr	r3, [fp, #-8]
  12fe94:	e1d330ba 	ldrh	r3, [r3, #10]
  12fe98:	e1a01003 	mov	r1, r3
  12fe9c:	e51b0010 	ldr	r0, [fp, #-16]
  12fea0:	ebffa2da 	bl	118a10 <inet_chksum>
  12fea4:	e1a03000 	mov	r3, r0
  12fea8:	e1a02003 	mov	r2, r3
  12feac:	e51b3010 	ldr	r3, [fp, #-16]
  12feb0:	e1c320b2 	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
  12feb4:	e30c3a30 	movw	r3, #51760	; 0xca30
  12feb8:	e3403015 	movt	r3, #21
  12febc:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  12fec0:	e2833001 	add	r3, r3, #1
  12fec4:	e6ff2073 	uxth	r2, r3
  12fec8:	e30c3a30 	movw	r3, #51760	; 0xca30
  12fecc:	e3403015 	movt	r3, #21
  12fed0:	e1c326b0 	strh	r2, [r3, #96]	; 0x60
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
  12fed4:	e24b2018 	sub	r2, fp, #24
  12fed8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12fedc:	e58d3008 	str	r3, [sp, #8]
  12fee0:	e3a03001 	mov	r3, #1
  12fee4:	e58d3004 	str	r3, [sp, #4]
  12fee8:	e3a03000 	mov	r3, #0
  12feec:	e58d3000 	str	r3, [sp]
  12fef0:	e3a030ff 	mov	r3, #255	; 0xff
  12fef4:	e3a01000 	mov	r1, #0
  12fef8:	e51b0008 	ldr	r0, [fp, #-8]
  12fefc:	eb00077d 	bl	131cf8 <ip4_output_if>
  }
  pbuf_free(q);
  12ff00:	e51b0008 	ldr	r0, [fp, #-8]
  12ff04:	ebffabe9 	bl	11aeb0 <pbuf_free>
}
  12ff08:	e24bd004 	sub	sp, fp, #4
  12ff0c:	e8bd8800 	pop	{fp, pc}

0012ff10 <igmp_init>:
/**
 * Initialize the IGMP module
 */
void
igmp_init(void)
{
  12ff10:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  12ff14:	e28db000 	add	fp, sp, #0
  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_init: initializing\n"));

  IP4_ADDR(&allsystems, 224, 0, 0, 1);
  12ff18:	e30e2bd8 	movw	r2, #60376	; 0xebd8
  12ff1c:	e3402014 	movt	r2, #20
  12ff20:	e3a030e0 	mov	r3, #224	; 0xe0
  12ff24:	e3403100 	movt	r3, #256	; 0x100
  12ff28:	e5823000 	str	r3, [r2]
  IP4_ADDR(&allrouters, 224, 0, 0, 2);
  12ff2c:	e30e2bdc 	movw	r2, #60380	; 0xebdc
  12ff30:	e3402014 	movt	r2, #20
  12ff34:	e3a030e0 	mov	r3, #224	; 0xe0
  12ff38:	e3403200 	movt	r3, #512	; 0x200
  12ff3c:	e5823000 	str	r3, [r2]
}
  12ff40:	e320f000 	nop	{0}
  12ff44:	e28bd000 	add	sp, fp, #0
  12ff48:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  12ff4c:	e12fff1e 	bx	lr

0012ff50 <igmp_start>:
 *
 * @param netif network interface on which start IGMP processing
 */
err_t
igmp_start(struct netif *netif)
{
  12ff50:	e92d4800 	push	{fp, lr}
  12ff54:	e28db004 	add	fp, sp, #4
  12ff58:	e24dd010 	sub	sp, sp, #16
  12ff5c:	e50b0010 	str	r0, [fp, #-16]
  struct igmp_group* group;

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_start: starting IGMP processing on if %p\n", (void*)netif));

  group = igmp_lookup_group(netif, &allsystems);
  12ff60:	e30e1bd8 	movw	r1, #60376	; 0xebd8
  12ff64:	e3401014 	movt	r1, #20
  12ff68:	e51b0010 	ldr	r0, [fp, #-16]
  12ff6c:	eb000078 	bl	130154 <igmp_lookup_group>
  12ff70:	e50b0008 	str	r0, [fp, #-8]

  if (group != NULL) {
  12ff74:	e51b3008 	ldr	r3, [fp, #-8]
  12ff78:	e3530000 	cmp	r3, #0
  12ff7c:	0a000015 	beq	12ffd8 <igmp_start+0x88>
    group->group_state = IGMP_GROUP_IDLE_MEMBER;
  12ff80:	e51b3008 	ldr	r3, [fp, #-8]
  12ff84:	e3a02002 	mov	r2, #2
  12ff88:	e5c32009 	strb	r2, [r3, #9]
    group->use++;
  12ff8c:	e51b3008 	ldr	r3, [fp, #-8]
  12ff90:	e5d3300c 	ldrb	r3, [r3, #12]
  12ff94:	e2833001 	add	r3, r3, #1
  12ff98:	e6ef2073 	uxtb	r2, r3
  12ff9c:	e51b3008 	ldr	r3, [fp, #-8]
  12ffa0:	e5c3200c 	strb	r2, [r3, #12]

    /* Allow the igmp messages at the MAC level */
    if (netif->igmp_mac_filter != NULL) {
  12ffa4:	e51b3010 	ldr	r3, [fp, #-16]
  12ffa8:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  12ffac:	e3530000 	cmp	r3, #0
  12ffb0:	0a000006 	beq	12ffd0 <igmp_start+0x80>
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_start: igmp_mac_filter(ADD "));
      ip4_addr_debug_print_val(IGMP_DEBUG, allsystems);
      LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void*)netif));
      netif->igmp_mac_filter(netif, &allsystems, NETIF_ADD_MAC_FILTER);
  12ffb4:	e51b3010 	ldr	r3, [fp, #-16]
  12ffb8:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  12ffbc:	e3a02001 	mov	r2, #1
  12ffc0:	e30e1bd8 	movw	r1, #60376	; 0xebd8
  12ffc4:	e3401014 	movt	r1, #20
  12ffc8:	e51b0010 	ldr	r0, [fp, #-16]
  12ffcc:	e12fff33 	blx	r3
    }

    return ERR_OK;
  12ffd0:	e3a03000 	mov	r3, #0
  12ffd4:	ea000000 	b	12ffdc <igmp_start+0x8c>
  }

  return ERR_MEM;
  12ffd8:	e3e03000 	mvn	r3, #0
}
  12ffdc:	e1a00003 	mov	r0, r3
  12ffe0:	e24bd004 	sub	sp, fp, #4
  12ffe4:	e8bd8800 	pop	{fp, pc}

0012ffe8 <igmp_stop>:
 *
 * @param netif network interface on which stop IGMP processing
 */
err_t
igmp_stop(struct netif *netif)
{
  12ffe8:	e92d4800 	push	{fp, lr}
  12ffec:	e28db004 	add	fp, sp, #4
  12fff0:	e24dd010 	sub	sp, sp, #16
  12fff4:	e50b0010 	str	r0, [fp, #-16]
  struct igmp_group *group = netif_igmp_data(netif);
  12fff8:	e51b3010 	ldr	r3, [fp, #-16]
  12fffc:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  130000:	e50b3008 	str	r3, [fp, #-8]

  netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_IGMP, NULL);
  130004:	e51b3010 	ldr	r3, [fp, #-16]
  130008:	e3a02000 	mov	r2, #0
  13000c:	e583202c 	str	r2, [r3, #44]	; 0x2c

  while (group != NULL) {
  130010:	ea000012 	b	130060 <igmp_stop+0x78>
    struct igmp_group *next = group->next; /* avoid use-after-free below */
  130014:	e51b3008 	ldr	r3, [fp, #-8]
  130018:	e5933000 	ldr	r3, [r3]
  13001c:	e50b300c 	str	r3, [fp, #-12]

    /* disable the group at the MAC level */
    if (netif->igmp_mac_filter != NULL) {
  130020:	e51b3010 	ldr	r3, [fp, #-16]
  130024:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  130028:	e3530000 	cmp	r3, #0
  13002c:	0a000006 	beq	13004c <igmp_stop+0x64>
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_stop: igmp_mac_filter(DEL "));
      ip4_addr_debug_print(IGMP_DEBUG, &group->group_address);
      LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void*)netif));
      netif->igmp_mac_filter(netif, &(group->group_address), NETIF_DEL_MAC_FILTER);
  130030:	e51b3010 	ldr	r3, [fp, #-16]
  130034:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  130038:	e51b2008 	ldr	r2, [fp, #-8]
  13003c:	e2821004 	add	r1, r2, #4
  130040:	e3a02000 	mov	r2, #0
  130044:	e51b0010 	ldr	r0, [fp, #-16]
  130048:	e12fff33 	blx	r3
    }

    /* free group */
    memp_free(MEMP_IGMP_GROUP, group);
  13004c:	e51b1008 	ldr	r1, [fp, #-8]
  130050:	e3a0000c 	mov	r0, #12
  130054:	ebffa487 	bl	119278 <memp_free>

    /* move to "next" */
    group = next;
  130058:	e51b300c 	ldr	r3, [fp, #-12]
  13005c:	e50b3008 	str	r3, [fp, #-8]
  while (group != NULL) {
  130060:	e51b3008 	ldr	r3, [fp, #-8]
  130064:	e3530000 	cmp	r3, #0
  130068:	1affffe9 	bne	130014 <igmp_stop+0x2c>
  }
  return ERR_OK;
  13006c:	e3a03000 	mov	r3, #0
}
  130070:	e1a00003 	mov	r0, r3
  130074:	e24bd004 	sub	sp, fp, #4
  130078:	e8bd8800 	pop	{fp, pc}

0013007c <igmp_report_groups>:
 *
 * @param netif network interface on which report IGMP memberships
 */
void
igmp_report_groups(struct netif *netif)
{
  13007c:	e92d4800 	push	{fp, lr}
  130080:	e28db004 	add	fp, sp, #4
  130084:	e24dd010 	sub	sp, sp, #16
  130088:	e50b0010 	str	r0, [fp, #-16]
  struct igmp_group *group = netif_igmp_data(netif);
  13008c:	e51b3010 	ldr	r3, [fp, #-16]
  130090:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  130094:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_report_groups: sending IGMP reports on if %p\n", (void*)netif));

  /* Skip the first group in the list, it is always the allsystems group added in igmp_start() */
  if(group != NULL) {
  130098:	e51b3008 	ldr	r3, [fp, #-8]
  13009c:	e3530000 	cmp	r3, #0
  1300a0:	0a000009 	beq	1300cc <igmp_report_groups+0x50>
    group = group->next;
  1300a4:	e51b3008 	ldr	r3, [fp, #-8]
  1300a8:	e5933000 	ldr	r3, [r3]
  1300ac:	e50b3008 	str	r3, [fp, #-8]
  }
  
  while (group != NULL) {
  1300b0:	ea000005 	b	1300cc <igmp_report_groups+0x50>
    igmp_delaying_member(group, IGMP_JOIN_DELAYING_MEMBER_TMR);
  1300b4:	e3a01005 	mov	r1, #5
  1300b8:	e51b0008 	ldr	r0, [fp, #-8]
  1300bc:	eb000372 	bl	130e8c <igmp_delaying_member>
    group = group->next;
  1300c0:	e51b3008 	ldr	r3, [fp, #-8]
  1300c4:	e5933000 	ldr	r3, [r3]
  1300c8:	e50b3008 	str	r3, [fp, #-8]
  while (group != NULL) {
  1300cc:	e51b3008 	ldr	r3, [fp, #-8]
  1300d0:	e3530000 	cmp	r3, #0
  1300d4:	1afffff6 	bne	1300b4 <igmp_report_groups+0x38>
  }
}
  1300d8:	e320f000 	nop	{0}
  1300dc:	e24bd004 	sub	sp, fp, #4
  1300e0:	e8bd8800 	pop	{fp, pc}

001300e4 <igmp_lookfor_group>:
 * @return a struct igmp_group* if the group has been found,
 *         NULL if the group wasn't found.
 */
struct igmp_group *
igmp_lookfor_group(struct netif *ifp, const ip4_addr_t *addr)
{
  1300e4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1300e8:	e28db000 	add	fp, sp, #0
  1300ec:	e24dd014 	sub	sp, sp, #20
  1300f0:	e50b0010 	str	r0, [fp, #-16]
  1300f4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct igmp_group *group = netif_igmp_data(ifp);
  1300f8:	e51b3010 	ldr	r3, [fp, #-16]
  1300fc:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  130100:	e50b3008 	str	r3, [fp, #-8]

  while (group != NULL) {
  130104:	ea00000a 	b	130134 <igmp_lookfor_group+0x50>
    if (ip4_addr_cmp(&(group->group_address), addr)) {
  130108:	e51b3008 	ldr	r3, [fp, #-8]
  13010c:	e5932004 	ldr	r2, [r3, #4]
  130110:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  130114:	e5933000 	ldr	r3, [r3]
  130118:	e1520003 	cmp	r2, r3
  13011c:	1a000001 	bne	130128 <igmp_lookfor_group+0x44>
      return group;
  130120:	e51b3008 	ldr	r3, [fp, #-8]
  130124:	ea000006 	b	130144 <igmp_lookfor_group+0x60>
    }
    group = group->next;
  130128:	e51b3008 	ldr	r3, [fp, #-8]
  13012c:	e5933000 	ldr	r3, [r3]
  130130:	e50b3008 	str	r3, [fp, #-8]
  while (group != NULL) {
  130134:	e51b3008 	ldr	r3, [fp, #-8]
  130138:	e3530000 	cmp	r3, #0
  13013c:	1afffff1 	bne	130108 <igmp_lookfor_group+0x24>
  }

  /* to be clearer, we return NULL here instead of
   * 'group' (which is also NULL at this point).
   */
  return NULL;
  130140:	e3a03000 	mov	r3, #0
}
  130144:	e1a00003 	mov	r0, r3
  130148:	e28bd000 	add	sp, fp, #0
  13014c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  130150:	e12fff1e 	bx	lr

00130154 <igmp_lookup_group>:
 * @return a struct igmp_group*,
 *         NULL on memory error.
 */
static struct igmp_group *
igmp_lookup_group(struct netif *ifp, const ip4_addr_t *addr)
{
  130154:	e92d4800 	push	{fp, lr}
  130158:	e28db004 	add	fp, sp, #4
  13015c:	e24dd010 	sub	sp, sp, #16
  130160:	e50b0010 	str	r0, [fp, #-16]
  130164:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct igmp_group *group;
  struct igmp_group *list_head = netif_igmp_data(ifp);
  130168:	e51b3010 	ldr	r3, [fp, #-16]
  13016c:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  130170:	e50b3008 	str	r3, [fp, #-8]

  /* Search if the group already exists */
  group = igmp_lookfor_group(ifp, addr);
  130174:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  130178:	e51b0010 	ldr	r0, [fp, #-16]
  13017c:	ebffffd8 	bl	1300e4 <igmp_lookfor_group>
  130180:	e50b000c 	str	r0, [fp, #-12]
  if (group != NULL) {
  130184:	e51b300c 	ldr	r3, [fp, #-12]
  130188:	e3530000 	cmp	r3, #0
  13018c:	0a000001 	beq	130198 <igmp_lookup_group+0x44>
    /* Group already exists. */
    return group;
  130190:	e51b300c 	ldr	r3, [fp, #-12]
  130194:	ea00004b 	b	1302c8 <igmp_lookup_group+0x174>
  }
  
  /* Group doesn't exist yet, create a new one */
  group = (struct igmp_group *)memp_malloc(MEMP_IGMP_GROUP);
  130198:	e3002101 	movw	r2, #257	; 0x101
  13019c:	e3091570 	movw	r1, #38256	; 0x9570
  1301a0:	e3401014 	movt	r1, #20
  1301a4:	e3a0000c 	mov	r0, #12
  1301a8:	ebffa3ca 	bl	1190d8 <memp_malloc_fn>
  1301ac:	e50b000c 	str	r0, [fp, #-12]
  if (group != NULL) {
  1301b0:	e51b300c 	ldr	r3, [fp, #-12]
  1301b4:	e3530000 	cmp	r3, #0
  1301b8:	0a000041 	beq	1302c4 <igmp_lookup_group+0x170>
    ip4_addr_set(&(group->group_address), addr);
  1301bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1301c0:	e3530000 	cmp	r3, #0
  1301c4:	0a000002 	beq	1301d4 <igmp_lookup_group+0x80>
  1301c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1301cc:	e5933000 	ldr	r3, [r3]
  1301d0:	ea000000 	b	1301d8 <igmp_lookup_group+0x84>
  1301d4:	e3a03000 	mov	r3, #0
  1301d8:	e51b200c 	ldr	r2, [fp, #-12]
  1301dc:	e5823004 	str	r3, [r2, #4]
    group->timer              = 0; /* Not running */
  1301e0:	e51b300c 	ldr	r3, [fp, #-12]
  1301e4:	e3a02000 	mov	r2, #0
  1301e8:	e1c320ba 	strh	r2, [r3, #10]
    group->group_state        = IGMP_GROUP_NON_MEMBER;
  1301ec:	e51b300c 	ldr	r3, [fp, #-12]
  1301f0:	e3a02000 	mov	r2, #0
  1301f4:	e5c32009 	strb	r2, [r3, #9]
    group->last_reporter_flag = 0;
  1301f8:	e51b300c 	ldr	r3, [fp, #-12]
  1301fc:	e3a02000 	mov	r2, #0
  130200:	e5c32008 	strb	r2, [r3, #8]
    group->use                = 0;
  130204:	e51b300c 	ldr	r3, [fp, #-12]
  130208:	e3a02000 	mov	r2, #0
  13020c:	e5c3200c 	strb	r2, [r3, #12]

    /* Ensure allsystems group is always first in list */    
    if (list_head == NULL) {
  130210:	e51b3008 	ldr	r3, [fp, #-8]
  130214:	e3530000 	cmp	r3, #0
  130218:	1a000014 	bne	130270 <igmp_lookup_group+0x11c>
      /* this is the first entry in linked list */
      LWIP_ASSERT("igmp_lookup_group: first group must be allsystems",
  13021c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  130220:	e5932000 	ldr	r2, [r3]
  130224:	e30e3bd8 	movw	r3, #60376	; 0xebd8
  130228:	e3403014 	movt	r3, #20
  13022c:	e5933000 	ldr	r3, [r3]
  130230:	e1520003 	cmp	r2, r3
  130234:	0a000006 	beq	130254 <igmp_lookup_group+0x100>
  130238:	e30905a4 	movw	r0, #38308	; 0x95a4
  13023c:	e3400014 	movt	r0, #20
  130240:	ebff4bb3 	bl	103114 <rt_kprintf>
  130244:	e300110d 	movw	r1, #269	; 0x10d
  130248:	e3090570 	movw	r0, #38256	; 0x9570
  13024c:	e3400014 	movt	r0, #20
  130250:	ebff6ba6 	bl	10b0f0 <sys_arch_assert>
        (ip4_addr_cmp(addr, &allsystems) != 0));
      group->next = NULL;
  130254:	e51b300c 	ldr	r3, [fp, #-12]
  130258:	e3a02000 	mov	r2, #0
  13025c:	e5832000 	str	r2, [r3]
      netif_set_client_data(ifp, LWIP_NETIF_CLIENT_DATA_INDEX_IGMP, group);
  130260:	e51b3010 	ldr	r3, [fp, #-16]
  130264:	e51b200c 	ldr	r2, [fp, #-12]
  130268:	e583202c 	str	r2, [r3, #44]	; 0x2c
  13026c:	ea000014 	b	1302c4 <igmp_lookup_group+0x170>
    } else {
      /* append _after_ first entry */
      LWIP_ASSERT("igmp_lookup_group: all except first group must not be allsystems",
  130270:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  130274:	e5932000 	ldr	r2, [r3]
  130278:	e30e3bd8 	movw	r3, #60376	; 0xebd8
  13027c:	e3403014 	movt	r3, #20
  130280:	e5933000 	ldr	r3, [r3]
  130284:	e1520003 	cmp	r2, r3
  130288:	1a000006 	bne	1302a8 <igmp_lookup_group+0x154>
  13028c:	e30905d8 	movw	r0, #38360	; 0x95d8
  130290:	e3400014 	movt	r0, #20
  130294:	ebff4b9e 	bl	103114 <rt_kprintf>
  130298:	e3001113 	movw	r1, #275	; 0x113
  13029c:	e3090570 	movw	r0, #38256	; 0x9570
  1302a0:	e3400014 	movt	r0, #20
  1302a4:	ebff6b91 	bl	10b0f0 <sys_arch_assert>
        (ip4_addr_cmp(addr, &allsystems) == 0));
      group->next = list_head->next;
  1302a8:	e51b3008 	ldr	r3, [fp, #-8]
  1302ac:	e5932000 	ldr	r2, [r3]
  1302b0:	e51b300c 	ldr	r3, [fp, #-12]
  1302b4:	e5832000 	str	r2, [r3]
      list_head->next = group;
  1302b8:	e51b3008 	ldr	r3, [fp, #-8]
  1302bc:	e51b200c 	ldr	r2, [fp, #-12]
  1302c0:	e5832000 	str	r2, [r3]

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_lookup_group: %sallocated a new group with address ", (group?"":"impossible to ")));
  ip4_addr_debug_print(IGMP_DEBUG, addr);
  LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void*)ifp));

  return group;
  1302c4:	e51b300c 	ldr	r3, [fp, #-12]
}
  1302c8:	e1a00003 	mov	r0, r3
  1302cc:	e24bd004 	sub	sp, fp, #4
  1302d0:	e8bd8800 	pop	{fp, pc}

001302d4 <igmp_remove_group>:
 * @param group the group to remove from the global igmp_group_list
 * @return ERR_OK if group was removed from the list, an err_t otherwise
 */
static err_t
igmp_remove_group(struct netif* netif, struct igmp_group *group)
{
  1302d4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1302d8:	e28db000 	add	fp, sp, #0
  1302dc:	e24dd014 	sub	sp, sp, #20
  1302e0:	e50b0010 	str	r0, [fp, #-16]
  1302e4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  err_t err = ERR_OK;
  1302e8:	e3a03000 	mov	r3, #0
  1302ec:	e54b3005 	strb	r3, [fp, #-5]
  struct igmp_group *tmp_group;

  /* Skip the first group in the list, it is always the allsystems group added in igmp_start() */
  for (tmp_group = netif_igmp_data(netif); tmp_group != NULL; tmp_group = tmp_group->next) {
  1302f0:	e51b3010 	ldr	r3, [fp, #-16]
  1302f4:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  1302f8:	e50b300c 	str	r3, [fp, #-12]
  1302fc:	ea00000c 	b	130334 <igmp_remove_group+0x60>
    if (tmp_group->next == group) {
  130300:	e51b300c 	ldr	r3, [fp, #-12]
  130304:	e5933000 	ldr	r3, [r3]
  130308:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  13030c:	e1520003 	cmp	r2, r3
  130310:	1a000004 	bne	130328 <igmp_remove_group+0x54>
      tmp_group->next = group->next;
  130314:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  130318:	e5932000 	ldr	r2, [r3]
  13031c:	e51b300c 	ldr	r3, [fp, #-12]
  130320:	e5832000 	str	r2, [r3]
      break;
  130324:	ea000005 	b	130340 <igmp_remove_group+0x6c>
  for (tmp_group = netif_igmp_data(netif); tmp_group != NULL; tmp_group = tmp_group->next) {
  130328:	e51b300c 	ldr	r3, [fp, #-12]
  13032c:	e5933000 	ldr	r3, [r3]
  130330:	e50b300c 	str	r3, [fp, #-12]
  130334:	e51b300c 	ldr	r3, [fp, #-12]
  130338:	e3530000 	cmp	r3, #0
  13033c:	1affffef 	bne	130300 <igmp_remove_group+0x2c>
    }
  }
  /* Group not found in the global igmp_group_list */
  if (tmp_group == NULL) {
  130340:	e51b300c 	ldr	r3, [fp, #-12]
  130344:	e3530000 	cmp	r3, #0
  130348:	1a000001 	bne	130354 <igmp_remove_group+0x80>
    err = ERR_ARG;
  13034c:	e3e0300f 	mvn	r3, #15
  130350:	e54b3005 	strb	r3, [fp, #-5]
  }

  return err;
  130354:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  130358:	e1a00003 	mov	r0, r3
  13035c:	e28bd000 	add	sp, fp, #0
  130360:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  130364:	e12fff1e 	bx	lr

00130368 <igmp_input>:
 * @param inp network interface on which the packet was received
 * @param dest destination ip address of the igmp packet
 */
void
igmp_input(struct pbuf *p, struct netif *inp, const ip4_addr_t *dest)
{
  130368:	e92d4800 	push	{fp, lr}
  13036c:	e28db004 	add	fp, sp, #4
  130370:	e24dd020 	sub	sp, sp, #32
  130374:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  130378:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  13037c:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  struct igmp_msg*   igmp;
  struct igmp_group* group;
  struct igmp_group* groupref;

  IGMP_STATS_INC(igmp.recv);
  130380:	e30c3a30 	movw	r3, #51760	; 0xca30
  130384:	e3403015 	movt	r3, #21
  130388:	e1d337ba 	ldrh	r3, [r3, #122]	; 0x7a
  13038c:	e2833001 	add	r3, r3, #1
  130390:	e6ff2073 	uxth	r2, r3
  130394:	e30c3a30 	movw	r3, #51760	; 0xca30
  130398:	e3403015 	movt	r3, #21
  13039c:	e1c327ba 	strh	r2, [r3, #122]	; 0x7a

  /* Note that the length CAN be greater than 8 but only 8 are used - All are included in the checksum */
  if (p->len < IGMP_MINLEN) {
  1303a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1303a4:	e1d330ba 	ldrh	r3, [r3, #10]
  1303a8:	e3530007 	cmp	r3, #7
  1303ac:	8a00000a 	bhi	1303dc <igmp_input+0x74>
    pbuf_free(p);
  1303b0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1303b4:	ebffaabd 	bl	11aeb0 <pbuf_free>
    IGMP_STATS_INC(igmp.lenerr);
  1303b8:	e30c3a30 	movw	r3, #51760	; 0xca30
  1303bc:	e3403015 	movt	r3, #21
  1303c0:	e1d338b0 	ldrh	r3, [r3, #128]	; 0x80
  1303c4:	e2833001 	add	r3, r3, #1
  1303c8:	e6ff2073 	uxth	r2, r3
  1303cc:	e30c3a30 	movw	r3, #51760	; 0xca30
  1303d0:	e3403015 	movt	r3, #21
  1303d4:	e1c328b0 	strh	r2, [r3, #128]	; 0x80
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: length error\n"));
    return;
  1303d8:	ea0000c9 	b	130704 <igmp_input+0x39c>
  LWIP_DEBUGF(IGMP_DEBUG, (" to address "));
  ip4_addr_debug_print(IGMP_DEBUG, &(ip4_current_header()->dest));
  LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void*)inp));

  /* Now calculate and check the checksum */
  igmp = (struct igmp_msg *)p->payload;
  1303dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1303e0:	e5933004 	ldr	r3, [r3, #4]
  1303e4:	e50b3010 	str	r3, [fp, #-16]
  if (inet_chksum(igmp, p->len)) {
  1303e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1303ec:	e1d330ba 	ldrh	r3, [r3, #10]
  1303f0:	e1a01003 	mov	r1, r3
  1303f4:	e51b0010 	ldr	r0, [fp, #-16]
  1303f8:	ebffa184 	bl	118a10 <inet_chksum>
  1303fc:	e1a03000 	mov	r3, r0
  130400:	e3530000 	cmp	r3, #0
  130404:	0a00000a 	beq	130434 <igmp_input+0xcc>
    pbuf_free(p);
  130408:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  13040c:	ebffaaa7 	bl	11aeb0 <pbuf_free>
    IGMP_STATS_INC(igmp.chkerr);
  130410:	e30c3a30 	movw	r3, #51760	; 0xca30
  130414:	e3403015 	movt	r3, #21
  130418:	e1d337be 	ldrh	r3, [r3, #126]	; 0x7e
  13041c:	e2833001 	add	r3, r3, #1
  130420:	e6ff2073 	uxth	r2, r3
  130424:	e30c3a30 	movw	r3, #51760	; 0xca30
  130428:	e3403015 	movt	r3, #21
  13042c:	e1c327be 	strh	r2, [r3, #126]	; 0x7e
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: checksum error\n"));
    return;
  130430:	ea0000b3 	b	130704 <igmp_input+0x39c>
  }

  /* Packet is ok so find an existing group */
  group = igmp_lookfor_group(inp, dest); /* use the destination IP address of incoming packet */
  130434:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  130438:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  13043c:	ebffff28 	bl	1300e4 <igmp_lookfor_group>
  130440:	e50b0008 	str	r0, [fp, #-8]

  /* If group can be found or create... */
  if (!group) {
  130444:	e51b3008 	ldr	r3, [fp, #-8]
  130448:	e3530000 	cmp	r3, #0
  13044c:	1a00000a 	bne	13047c <igmp_input+0x114>
    pbuf_free(p);
  130450:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  130454:	ebffaa95 	bl	11aeb0 <pbuf_free>
    IGMP_STATS_INC(igmp.drop);
  130458:	e30c3a30 	movw	r3, #51760	; 0xca30
  13045c:	e3403015 	movt	r3, #21
  130460:	e1d337bc 	ldrh	r3, [r3, #124]	; 0x7c
  130464:	e2833001 	add	r3, r3, #1
  130468:	e6ff2073 	uxth	r2, r3
  13046c:	e30c3a30 	movw	r3, #51760	; 0xca30
  130470:	e3403015 	movt	r3, #21
  130474:	e1c327bc 	strh	r2, [r3, #124]	; 0x7c
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: IGMP frame not for us\n"));
    return;
  130478:	ea0000a1 	b	130704 <igmp_input+0x39c>
  }

  /* NOW ACT ON THE INCOMING MESSAGE TYPE... */
  switch (igmp->igmp_msgtype) {
  13047c:	e51b3010 	ldr	r3, [fp, #-16]
  130480:	e5d33000 	ldrb	r3, [r3]
  130484:	e3530011 	cmp	r3, #17
  130488:	0a000002 	beq	130498 <igmp_input+0x130>
  13048c:	e3530016 	cmp	r3, #22
  130490:	0a000078 	beq	130678 <igmp_input+0x310>
  130494:	ea00008d 	b	1306d0 <igmp_input+0x368>
  case IGMP_MEMB_QUERY:
    /* IGMP_MEMB_QUERY to the "all systems" address ? */
    if ((ip4_addr_cmp(dest, &allsystems)) && ip4_addr_isany(&igmp->igmp_group_address)) {
  130498:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  13049c:	e5932000 	ldr	r2, [r3]
  1304a0:	e30e3bd8 	movw	r3, #60376	; 0xebd8
  1304a4:	e3403014 	movt	r3, #20
  1304a8:	e5933000 	ldr	r3, [r3]
  1304ac:	e1520003 	cmp	r2, r3
  1304b0:	1a000035 	bne	13058c <igmp_input+0x224>
  1304b4:	e51b3010 	ldr	r3, [fp, #-16]
  1304b8:	e2833004 	add	r3, r3, #4
  1304bc:	e3530000 	cmp	r3, #0
  1304c0:	0a000003 	beq	1304d4 <igmp_input+0x16c>
  1304c4:	e51b3010 	ldr	r3, [fp, #-16]
  1304c8:	e5933004 	ldr	r3, [r3, #4]
  1304cc:	e3530000 	cmp	r3, #0
  1304d0:	1a00002d 	bne	13058c <igmp_input+0x224>
      /* THIS IS THE GENERAL QUERY */
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: General IGMP_MEMB_QUERY on \"ALL SYSTEMS\" address (224.0.0.1) [igmp_maxresp=%i]\n", (int)(igmp->igmp_maxresp)));

      if (igmp->igmp_maxresp == 0) {
  1304d4:	e51b3010 	ldr	r3, [fp, #-16]
  1304d8:	e5d33001 	ldrb	r3, [r3, #1]
  1304dc:	e3530000 	cmp	r3, #0
  1304e0:	1a00000b 	bne	130514 <igmp_input+0x1ac>
        IGMP_STATS_INC(igmp.rx_v1);
  1304e4:	e30c3a30 	movw	r3, #51760	; 0xca30
  1304e8:	e3403015 	movt	r3, #21
  1304ec:	e1d338b6 	ldrh	r3, [r3, #134]	; 0x86
  1304f0:	e2833001 	add	r3, r3, #1
  1304f4:	e6ff2073 	uxth	r2, r3
  1304f8:	e30c3a30 	movw	r3, #51760	; 0xca30
  1304fc:	e3403015 	movt	r3, #21
  130500:	e1c328b6 	strh	r2, [r3, #134]	; 0x86
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: got an all hosts query with time== 0 - this is V1 and not implemented - treat as v2\n"));
        igmp->igmp_maxresp = IGMP_V1_DELAYING_MEMBER_TMR;
  130504:	e51b3010 	ldr	r3, [fp, #-16]
  130508:	e3a0200a 	mov	r2, #10
  13050c:	e5c32001 	strb	r2, [r3, #1]
  130510:	ea000007 	b	130534 <igmp_input+0x1cc>
      } else {
        IGMP_STATS_INC(igmp.rx_general);
  130514:	e30c3a30 	movw	r3, #51760	; 0xca30
  130518:	e3403015 	movt	r3, #21
  13051c:	e1d338ba 	ldrh	r3, [r3, #138]	; 0x8a
  130520:	e2833001 	add	r3, r3, #1
  130524:	e6ff2073 	uxth	r2, r3
  130528:	e30c3a30 	movw	r3, #51760	; 0xca30
  13052c:	e3403015 	movt	r3, #21
  130530:	e1c328ba 	strh	r2, [r3, #138]	; 0x8a
      }

      groupref = netif_igmp_data(inp);
  130534:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  130538:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  13053c:	e50b300c 	str	r3, [fp, #-12]
      
      /* Do not send messages on the all systems group address! */
      /* Skip the first group in the list, it is always the allsystems group added in igmp_start() */
      if(groupref != NULL) {
  130540:	e51b300c 	ldr	r3, [fp, #-12]
  130544:	e3530000 	cmp	r3, #0
  130548:	0a00000b 	beq	13057c <igmp_input+0x214>
        groupref = groupref->next;
  13054c:	e51b300c 	ldr	r3, [fp, #-12]
  130550:	e5933000 	ldr	r3, [r3]
  130554:	e50b300c 	str	r3, [fp, #-12]
      }

      while (groupref) {
  130558:	ea000007 	b	13057c <igmp_input+0x214>
        igmp_delaying_member(groupref, igmp->igmp_maxresp);
  13055c:	e51b3010 	ldr	r3, [fp, #-16]
  130560:	e5d33001 	ldrb	r3, [r3, #1]
  130564:	e1a01003 	mov	r1, r3
  130568:	e51b000c 	ldr	r0, [fp, #-12]
  13056c:	eb000246 	bl	130e8c <igmp_delaying_member>
        groupref = groupref->next;
  130570:	e51b300c 	ldr	r3, [fp, #-12]
  130574:	e5933000 	ldr	r3, [r3]
  130578:	e50b300c 	str	r3, [fp, #-12]
      while (groupref) {
  13057c:	e51b300c 	ldr	r3, [fp, #-12]
  130580:	e3530000 	cmp	r3, #0
  130584:	1afffff4 	bne	13055c <igmp_input+0x1f4>
    if ((ip4_addr_cmp(dest, &allsystems)) && ip4_addr_isany(&igmp->igmp_group_address)) {
  130588:	ea000039 	b	130674 <igmp_input+0x30c>
      }
    } else {
      /* IGMP_MEMB_QUERY to a specific group ? */
      if (!ip4_addr_isany(&igmp->igmp_group_address)) {
  13058c:	e51b3010 	ldr	r3, [fp, #-16]
  130590:	e2833004 	add	r3, r3, #4
  130594:	e3530000 	cmp	r3, #0
  130598:	0a00002c 	beq	130650 <igmp_input+0x2e8>
  13059c:	e51b3010 	ldr	r3, [fp, #-16]
  1305a0:	e5933004 	ldr	r3, [r3, #4]
  1305a4:	e3530000 	cmp	r3, #0
  1305a8:	0a000028 	beq	130650 <igmp_input+0x2e8>
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: IGMP_MEMB_QUERY to a specific group "));
        ip4_addr_debug_print(IGMP_DEBUG, &igmp->igmp_group_address);
        if (ip4_addr_cmp(dest, &allsystems)) {
  1305ac:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1305b0:	e5932000 	ldr	r2, [r3]
  1305b4:	e30e3bd8 	movw	r3, #60376	; 0xebd8
  1305b8:	e3403014 	movt	r3, #20
  1305bc:	e5933000 	ldr	r3, [r3]
  1305c0:	e1520003 	cmp	r2, r3
  1305c4:	1a000007 	bne	1305e8 <igmp_input+0x280>
          ip4_addr_t groupaddr;
          LWIP_DEBUGF(IGMP_DEBUG, (" using \"ALL SYSTEMS\" address (224.0.0.1) [igmp_maxresp=%i]\n", (int)(igmp->igmp_maxresp)));
          /* we first need to re-look for the group since we used dest last time */
          ip4_addr_copy(groupaddr, igmp->igmp_group_address);
  1305c8:	e51b3010 	ldr	r3, [fp, #-16]
  1305cc:	e5933004 	ldr	r3, [r3, #4]
  1305d0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
          group = igmp_lookfor_group(inp, &groupaddr);
  1305d4:	e24b3014 	sub	r3, fp, #20
  1305d8:	e1a01003 	mov	r1, r3
  1305dc:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  1305e0:	ebfffebf 	bl	1300e4 <igmp_lookfor_group>
  1305e4:	e50b0008 	str	r0, [fp, #-8]
        } else {
          LWIP_DEBUGF(IGMP_DEBUG, (" with the group address as destination [igmp_maxresp=%i]\n", (int)(igmp->igmp_maxresp)));
        }

        if (group != NULL) {
  1305e8:	e51b3008 	ldr	r3, [fp, #-8]
  1305ec:	e3530000 	cmp	r3, #0
  1305f0:	0a00000d 	beq	13062c <igmp_input+0x2c4>
          IGMP_STATS_INC(igmp.rx_group);
  1305f4:	e30c3a30 	movw	r3, #51760	; 0xca30
  1305f8:	e3403015 	movt	r3, #21
  1305fc:	e1d338b8 	ldrh	r3, [r3, #136]	; 0x88
  130600:	e2833001 	add	r3, r3, #1
  130604:	e6ff2073 	uxth	r2, r3
  130608:	e30c3a30 	movw	r3, #51760	; 0xca30
  13060c:	e3403015 	movt	r3, #21
  130610:	e1c328b8 	strh	r2, [r3, #136]	; 0x88
          igmp_delaying_member(group, igmp->igmp_maxresp);
  130614:	e51b3010 	ldr	r3, [fp, #-16]
  130618:	e5d33001 	ldrb	r3, [r3, #1]
  13061c:	e1a01003 	mov	r1, r3
  130620:	e51b0008 	ldr	r0, [fp, #-8]
  130624:	eb000218 	bl	130e8c <igmp_delaying_member>
        if (group != NULL) {
  130628:	ea000011 	b	130674 <igmp_input+0x30c>
        } else {
          IGMP_STATS_INC(igmp.drop);
  13062c:	e30c3a30 	movw	r3, #51760	; 0xca30
  130630:	e3403015 	movt	r3, #21
  130634:	e1d337bc 	ldrh	r3, [r3, #124]	; 0x7c
  130638:	e2833001 	add	r3, r3, #1
  13063c:	e6ff2073 	uxth	r2, r3
  130640:	e30c3a30 	movw	r3, #51760	; 0xca30
  130644:	e3403015 	movt	r3, #21
  130648:	e1c327bc 	strh	r2, [r3, #124]	; 0x7c
        if (group != NULL) {
  13064c:	ea000008 	b	130674 <igmp_input+0x30c>
        }
      } else {
        IGMP_STATS_INC(igmp.proterr);
  130650:	e30c3a30 	movw	r3, #51760	; 0xca30
  130654:	e3403015 	movt	r3, #21
  130658:	e1d338b4 	ldrh	r3, [r3, #132]	; 0x84
  13065c:	e2833001 	add	r3, r3, #1
  130660:	e6ff2073 	uxth	r2, r3
  130664:	e30c3a30 	movw	r3, #51760	; 0xca30
  130668:	e3403015 	movt	r3, #21
  13066c:	e1c328b4 	strh	r2, [r3, #132]	; 0x84
      }
    }
    break;
  130670:	ea000020 	b	1306f8 <igmp_input+0x390>
  130674:	ea00001f 	b	1306f8 <igmp_input+0x390>
  case IGMP_V2_MEMB_REPORT:
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: IGMP_V2_MEMB_REPORT\n"));
    IGMP_STATS_INC(igmp.rx_report);
  130678:	e30c3a30 	movw	r3, #51760	; 0xca30
  13067c:	e3403015 	movt	r3, #21
  130680:	e1d338bc 	ldrh	r3, [r3, #140]	; 0x8c
  130684:	e2833001 	add	r3, r3, #1
  130688:	e6ff2073 	uxth	r2, r3
  13068c:	e30c3a30 	movw	r3, #51760	; 0xca30
  130690:	e3403015 	movt	r3, #21
  130694:	e1c328bc 	strh	r2, [r3, #140]	; 0x8c
    if (group->group_state == IGMP_GROUP_DELAYING_MEMBER) {
  130698:	e51b3008 	ldr	r3, [fp, #-8]
  13069c:	e5d33009 	ldrb	r3, [r3, #9]
  1306a0:	e3530001 	cmp	r3, #1
  1306a4:	1a000012 	bne	1306f4 <igmp_input+0x38c>
      /* This is on a specific group we have already looked up */
      group->timer = 0; /* stopped */
  1306a8:	e51b3008 	ldr	r3, [fp, #-8]
  1306ac:	e3a02000 	mov	r2, #0
  1306b0:	e1c320ba 	strh	r2, [r3, #10]
      group->group_state = IGMP_GROUP_IDLE_MEMBER;
  1306b4:	e51b3008 	ldr	r3, [fp, #-8]
  1306b8:	e3a02002 	mov	r2, #2
  1306bc:	e5c32009 	strb	r2, [r3, #9]
      group->last_reporter_flag = 0;
  1306c0:	e51b3008 	ldr	r3, [fp, #-8]
  1306c4:	e3a02000 	mov	r2, #0
  1306c8:	e5c32008 	strb	r2, [r3, #8]
    }
    break;
  1306cc:	ea000008 	b	1306f4 <igmp_input+0x38c>
  default:
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: unexpected msg %d in state %d on group %p on if %p\n",
      igmp->igmp_msgtype, group->group_state, (void*)&group, (void*)inp));
    IGMP_STATS_INC(igmp.proterr);
  1306d0:	e30c3a30 	movw	r3, #51760	; 0xca30
  1306d4:	e3403015 	movt	r3, #21
  1306d8:	e1d338b4 	ldrh	r3, [r3, #132]	; 0x84
  1306dc:	e2833001 	add	r3, r3, #1
  1306e0:	e6ff2073 	uxth	r2, r3
  1306e4:	e30c3a30 	movw	r3, #51760	; 0xca30
  1306e8:	e3403015 	movt	r3, #21
  1306ec:	e1c328b4 	strh	r2, [r3, #132]	; 0x84
    break;
  1306f0:	ea000000 	b	1306f8 <igmp_input+0x390>
    break;
  1306f4:	e320f000 	nop	{0}
  }

  pbuf_free(p);
  1306f8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1306fc:	ebffa9eb 	bl	11aeb0 <pbuf_free>
  return;
  130700:	e320f000 	nop	{0}
}
  130704:	e24bd004 	sub	sp, fp, #4
  130708:	e8bd8800 	pop	{fp, pc}

0013070c <igmp_joingroup>:
 * @param groupaddr the ip address of the group which to join
 * @return ERR_OK if group was joined on the netif(s), an err_t otherwise
 */
err_t
igmp_joingroup(const ip4_addr_t *ifaddr, const ip4_addr_t *groupaddr)
{
  13070c:	e92d4800 	push	{fp, lr}
  130710:	e28db004 	add	fp, sp, #4
  130714:	e24dd010 	sub	sp, sp, #16
  130718:	e50b0010 	str	r0, [fp, #-16]
  13071c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  err_t err = ERR_VAL; /* no matching interface */
  130720:	e3e03005 	mvn	r3, #5
  130724:	e54b3005 	strb	r3, [fp, #-5]
  struct netif *netif;

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_joingroup: attempt to join non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
  130728:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13072c:	e5933000 	ldr	r3, [r3]
  130730:	e20330f0 	and	r3, r3, #240	; 0xf0
  130734:	e35300e0 	cmp	r3, #224	; 0xe0
  130738:	0a000008 	beq	130760 <igmp_joingroup+0x54>
  13073c:	e309061c 	movw	r0, #38428	; 0x961c
  130740:	e3400014 	movt	r0, #20
  130744:	ebff4a72 	bl	103114 <rt_kprintf>
  130748:	e30011c7 	movw	r1, #455	; 0x1c7
  13074c:	e3090570 	movw	r0, #38256	; 0x9570
  130750:	e3400014 	movt	r0, #20
  130754:	ebff6a65 	bl	10b0f0 <sys_arch_assert>
  130758:	e3e03005 	mvn	r3, #5
  13075c:	ea000038 	b	130844 <igmp_joingroup+0x138>
  LWIP_ERROR("igmp_joingroup: attempt to join allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
  130760:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  130764:	e5932000 	ldr	r2, [r3]
  130768:	e30e3bd8 	movw	r3, #60376	; 0xebd8
  13076c:	e3403014 	movt	r3, #20
  130770:	e5933000 	ldr	r3, [r3]
  130774:	e1520003 	cmp	r2, r3
  130778:	1a000008 	bne	1307a0 <igmp_joingroup+0x94>
  13077c:	e3090654 	movw	r0, #38484	; 0x9654
  130780:	e3400014 	movt	r0, #20
  130784:	ebff4a62 	bl	103114 <rt_kprintf>
  130788:	e3a01f72 	mov	r1, #456	; 0x1c8
  13078c:	e3090570 	movw	r0, #38256	; 0x9570
  130790:	e3400014 	movt	r0, #20
  130794:	ebff6a55 	bl	10b0f0 <sys_arch_assert>
  130798:	e3e03005 	mvn	r3, #5
  13079c:	ea000028 	b	130844 <igmp_joingroup+0x138>

  /* loop through netif's */
  netif = netif_list;
  1307a0:	e30c3a24 	movw	r3, #51748	; 0xca24
  1307a4:	e3403015 	movt	r3, #21
  1307a8:	e5933000 	ldr	r3, [r3]
  1307ac:	e50b300c 	str	r3, [fp, #-12]
  while (netif != NULL) {
  1307b0:	ea00001f 	b	130834 <igmp_joingroup+0x128>
    /* Should we join this interface ? */
    if ((netif->flags & NETIF_FLAG_IGMP) && ((ip4_addr_isany(ifaddr) || ip4_addr_cmp(netif_ip4_addr(netif), ifaddr)))) {
  1307b4:	e51b300c 	ldr	r3, [fp, #-12]
  1307b8:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1307bc:	e2033020 	and	r3, r3, #32
  1307c0:	e3530000 	cmp	r3, #0
  1307c4:	0a000017 	beq	130828 <igmp_joingroup+0x11c>
  1307c8:	e51b3010 	ldr	r3, [fp, #-16]
  1307cc:	e3530000 	cmp	r3, #0
  1307d0:	0a00000a 	beq	130800 <igmp_joingroup+0xf4>
  1307d4:	e51b3010 	ldr	r3, [fp, #-16]
  1307d8:	e5933000 	ldr	r3, [r3]
  1307dc:	e3530000 	cmp	r3, #0
  1307e0:	0a000006 	beq	130800 <igmp_joingroup+0xf4>
  1307e4:	e51b300c 	ldr	r3, [fp, #-12]
  1307e8:	e2833004 	add	r3, r3, #4
  1307ec:	e5932000 	ldr	r2, [r3]
  1307f0:	e51b3010 	ldr	r3, [fp, #-16]
  1307f4:	e5933000 	ldr	r3, [r3]
  1307f8:	e1520003 	cmp	r2, r3
  1307fc:	1a000009 	bne	130828 <igmp_joingroup+0x11c>
      err = igmp_joingroup_netif(netif, groupaddr);
  130800:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  130804:	e51b000c 	ldr	r0, [fp, #-12]
  130808:	eb000010 	bl	130850 <igmp_joingroup_netif>
  13080c:	e1a03000 	mov	r3, r0
  130810:	e54b3005 	strb	r3, [fp, #-5]
      if (err != ERR_OK) {
  130814:	e15b30d5 	ldrsb	r3, [fp, #-5]
  130818:	e3530000 	cmp	r3, #0
  13081c:	0a000001 	beq	130828 <igmp_joingroup+0x11c>
        /* Return an error even if some network interfaces are joined */
        /** @todo undo any other netif already joined */
        return err;
  130820:	e15b30d5 	ldrsb	r3, [fp, #-5]
  130824:	ea000006 	b	130844 <igmp_joingroup+0x138>
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
  130828:	e51b300c 	ldr	r3, [fp, #-12]
  13082c:	e5933000 	ldr	r3, [r3]
  130830:	e50b300c 	str	r3, [fp, #-12]
  while (netif != NULL) {
  130834:	e51b300c 	ldr	r3, [fp, #-12]
  130838:	e3530000 	cmp	r3, #0
  13083c:	1affffdc 	bne	1307b4 <igmp_joingroup+0xa8>
  }

  return err;
  130840:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  130844:	e1a00003 	mov	r0, r3
  130848:	e24bd004 	sub	sp, fp, #4
  13084c:	e8bd8800 	pop	{fp, pc}

00130850 <igmp_joingroup_netif>:
 * @param groupaddr the ip address of the group which to join
 * @return ERR_OK if group was joined on the netif, an err_t otherwise
 */
err_t
igmp_joingroup_netif(struct netif *netif, const ip4_addr_t *groupaddr)
{
  130850:	e92d4800 	push	{fp, lr}
  130854:	e28db004 	add	fp, sp, #4
  130858:	e24dd010 	sub	sp, sp, #16
  13085c:	e50b0010 	str	r0, [fp, #-16]
  130860:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct igmp_group *group;

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_joingroup_netif: attempt to join non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
  130864:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  130868:	e5933000 	ldr	r3, [r3]
  13086c:	e20330f0 	and	r3, r3, #240	; 0xf0
  130870:	e35300e0 	cmp	r3, #224	; 0xe0
  130874:	0a000008 	beq	13089c <igmp_joingroup_netif+0x4c>
  130878:	e3090688 	movw	r0, #38536	; 0x9688
  13087c:	e3400014 	movt	r0, #20
  130880:	ebff4a23 	bl	103114 <rt_kprintf>
  130884:	e30011eb 	movw	r1, #491	; 0x1eb
  130888:	e3090570 	movw	r0, #38256	; 0x9570
  13088c:	e3400014 	movt	r0, #20
  130890:	ebff6a16 	bl	10b0f0 <sys_arch_assert>
  130894:	e3e03005 	mvn	r3, #5
  130898:	ea000051 	b	1309e4 <igmp_joingroup_netif+0x194>
  LWIP_ERROR("igmp_joingroup_netif: attempt to join allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
  13089c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1308a0:	e5932000 	ldr	r2, [r3]
  1308a4:	e30e3bd8 	movw	r3, #60376	; 0xebd8
  1308a8:	e3403014 	movt	r3, #20
  1308ac:	e5933000 	ldr	r3, [r3]
  1308b0:	e1520003 	cmp	r2, r3
  1308b4:	1a000008 	bne	1308dc <igmp_joingroup_netif+0x8c>
  1308b8:	e30906c4 	movw	r0, #38596	; 0x96c4
  1308bc:	e3400014 	movt	r0, #20
  1308c0:	ebff4a13 	bl	103114 <rt_kprintf>
  1308c4:	e3a01f7b 	mov	r1, #492	; 0x1ec
  1308c8:	e3090570 	movw	r0, #38256	; 0x9570
  1308cc:	e3400014 	movt	r0, #20
  1308d0:	ebff6a06 	bl	10b0f0 <sys_arch_assert>
  1308d4:	e3e03005 	mvn	r3, #5
  1308d8:	ea000041 	b	1309e4 <igmp_joingroup_netif+0x194>

  /* make sure it is an igmp-enabled netif */
  LWIP_ERROR("igmp_joingroup_netif: attempt to join on non-IGMP netif", netif->flags & NETIF_FLAG_IGMP, return ERR_VAL;);
  1308dc:	e51b3010 	ldr	r3, [fp, #-16]
  1308e0:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1308e4:	e2033020 	and	r3, r3, #32
  1308e8:	e3530000 	cmp	r3, #0
  1308ec:	1a000008 	bne	130914 <igmp_joingroup_netif+0xc4>
  1308f0:	e3090700 	movw	r0, #38656	; 0x9700
  1308f4:	e3400014 	movt	r0, #20
  1308f8:	ebff4a05 	bl	103114 <rt_kprintf>
  1308fc:	e30011ef 	movw	r1, #495	; 0x1ef
  130900:	e3090570 	movw	r0, #38256	; 0x9570
  130904:	e3400014 	movt	r0, #20
  130908:	ebff69f8 	bl	10b0f0 <sys_arch_assert>
  13090c:	e3e03005 	mvn	r3, #5
  130910:	ea000033 	b	1309e4 <igmp_joingroup_netif+0x194>

  /* find group or create a new one if not found */
  group = igmp_lookup_group(netif, groupaddr);
  130914:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  130918:	e51b0010 	ldr	r0, [fp, #-16]
  13091c:	ebfffe0c 	bl	130154 <igmp_lookup_group>
  130920:	e50b0008 	str	r0, [fp, #-8]

  if (group != NULL) {
  130924:	e51b3008 	ldr	r3, [fp, #-8]
  130928:	e3530000 	cmp	r3, #0
  13092c:	0a00002b 	beq	1309e0 <igmp_joingroup_netif+0x190>
    /* This should create a new group, check the state to make sure */
    if (group->group_state != IGMP_GROUP_NON_MEMBER) {
  130930:	e51b3008 	ldr	r3, [fp, #-8]
  130934:	e5d33009 	ldrb	r3, [r3, #9]
  130938:	e3530000 	cmp	r3, #0
  13093c:	1a00001f 	bne	1309c0 <igmp_joingroup_netif+0x170>
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_joingroup_netif: join to new group: "));
      ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
      LWIP_DEBUGF(IGMP_DEBUG, ("\n"));

      /* If first use of the group, allow the group at the MAC level */
      if ((group->use==0) && (netif->igmp_mac_filter != NULL)) {
  130940:	e51b3008 	ldr	r3, [fp, #-8]
  130944:	e5d3300c 	ldrb	r3, [r3, #12]
  130948:	e3530000 	cmp	r3, #0
  13094c:	1a000009 	bne	130978 <igmp_joingroup_netif+0x128>
  130950:	e51b3010 	ldr	r3, [fp, #-16]
  130954:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  130958:	e3530000 	cmp	r3, #0
  13095c:	0a000005 	beq	130978 <igmp_joingroup_netif+0x128>
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_joingroup_netif: igmp_mac_filter(ADD "));
        ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
        LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void*)netif));
        netif->igmp_mac_filter(netif, groupaddr, NETIF_ADD_MAC_FILTER);
  130960:	e51b3010 	ldr	r3, [fp, #-16]
  130964:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  130968:	e3a02001 	mov	r2, #1
  13096c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  130970:	e51b0010 	ldr	r0, [fp, #-16]
  130974:	e12fff33 	blx	r3
      }

      IGMP_STATS_INC(igmp.tx_join);
  130978:	e30c3a30 	movw	r3, #51760	; 0xca30
  13097c:	e3403015 	movt	r3, #21
  130980:	e1d338be 	ldrh	r3, [r3, #142]	; 0x8e
  130984:	e2833001 	add	r3, r3, #1
  130988:	e6ff2073 	uxth	r2, r3
  13098c:	e30c3a30 	movw	r3, #51760	; 0xca30
  130990:	e3403015 	movt	r3, #21
  130994:	e1c328be 	strh	r2, [r3, #142]	; 0x8e
      igmp_send(netif, group, IGMP_V2_MEMB_REPORT);
  130998:	e3a02016 	mov	r2, #22
  13099c:	e51b1008 	ldr	r1, [fp, #-8]
  1309a0:	e51b0010 	ldr	r0, [fp, #-16]
  1309a4:	eb000180 	bl	130fac <igmp_send>

      igmp_start_timer(group, IGMP_JOIN_DELAYING_MEMBER_TMR);
  1309a8:	e3a01005 	mov	r1, #5
  1309ac:	e51b0008 	ldr	r0, [fp, #-8]
  1309b0:	eb000116 	bl	130e10 <igmp_start_timer>

      /* Need to work out where this timer comes from */
      group->group_state = IGMP_GROUP_DELAYING_MEMBER;
  1309b4:	e51b3008 	ldr	r3, [fp, #-8]
  1309b8:	e3a02001 	mov	r2, #1
  1309bc:	e5c32009 	strb	r2, [r3, #9]
    }
    /* Increment group use */
    group->use++;
  1309c0:	e51b3008 	ldr	r3, [fp, #-8]
  1309c4:	e5d3300c 	ldrb	r3, [r3, #12]
  1309c8:	e2833001 	add	r3, r3, #1
  1309cc:	e6ef2073 	uxtb	r2, r3
  1309d0:	e51b3008 	ldr	r3, [fp, #-8]
  1309d4:	e5c3200c 	strb	r2, [r3, #12]
    /* Join on this interface */
    return ERR_OK;
  1309d8:	e3a03000 	mov	r3, #0
  1309dc:	ea000000 	b	1309e4 <igmp_joingroup_netif+0x194>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_joingroup_netif: Not enough memory to join to group\n"));
    return ERR_MEM;
  1309e0:	e3e03000 	mvn	r3, #0
  }
}
  1309e4:	e1a00003 	mov	r0, r3
  1309e8:	e24bd004 	sub	sp, fp, #4
  1309ec:	e8bd8800 	pop	{fp, pc}

001309f0 <igmp_leavegroup>:
 * @param groupaddr the ip address of the group which to leave
 * @return ERR_OK if group was left on the netif(s), an err_t otherwise
 */
err_t
igmp_leavegroup(const ip4_addr_t *ifaddr, const ip4_addr_t *groupaddr)
{
  1309f0:	e92d4800 	push	{fp, lr}
  1309f4:	e28db004 	add	fp, sp, #4
  1309f8:	e24dd018 	sub	sp, sp, #24
  1309fc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  130a00:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  err_t err = ERR_VAL; /* no matching interface */
  130a04:	e3e03005 	mvn	r3, #5
  130a08:	e54b3005 	strb	r3, [fp, #-5]
  struct netif *netif;

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_leavegroup: attempt to leave non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
  130a0c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  130a10:	e5933000 	ldr	r3, [r3]
  130a14:	e20330f0 	and	r3, r3, #240	; 0xf0
  130a18:	e35300e0 	cmp	r3, #224	; 0xe0
  130a1c:	0a000008 	beq	130a44 <igmp_leavegroup+0x54>
  130a20:	e3090738 	movw	r0, #38712	; 0x9738
  130a24:	e3400014 	movt	r0, #20
  130a28:	ebff49b9 	bl	103114 <rt_kprintf>
  130a2c:	e3001227 	movw	r1, #551	; 0x227
  130a30:	e3090570 	movw	r0, #38256	; 0x9570
  130a34:	e3400014 	movt	r0, #20
  130a38:	ebff69ac 	bl	10b0f0 <sys_arch_assert>
  130a3c:	e3e03005 	mvn	r3, #5
  130a40:	ea000038 	b	130b28 <igmp_leavegroup+0x138>
  LWIP_ERROR("igmp_leavegroup: attempt to leave allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
  130a44:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  130a48:	e5932000 	ldr	r2, [r3]
  130a4c:	e30e3bd8 	movw	r3, #60376	; 0xebd8
  130a50:	e3403014 	movt	r3, #20
  130a54:	e5933000 	ldr	r3, [r3]
  130a58:	e1520003 	cmp	r2, r3
  130a5c:	1a000008 	bne	130a84 <igmp_leavegroup+0x94>
  130a60:	e3090770 	movw	r0, #38768	; 0x9770
  130a64:	e3400014 	movt	r0, #20
  130a68:	ebff49a9 	bl	103114 <rt_kprintf>
  130a6c:	e3a01f8a 	mov	r1, #552	; 0x228
  130a70:	e3090570 	movw	r0, #38256	; 0x9570
  130a74:	e3400014 	movt	r0, #20
  130a78:	ebff699c 	bl	10b0f0 <sys_arch_assert>
  130a7c:	e3e03005 	mvn	r3, #5
  130a80:	ea000028 	b	130b28 <igmp_leavegroup+0x138>

  /* loop through netif's */
  netif = netif_list;
  130a84:	e30c3a24 	movw	r3, #51748	; 0xca24
  130a88:	e3403015 	movt	r3, #21
  130a8c:	e5933000 	ldr	r3, [r3]
  130a90:	e50b300c 	str	r3, [fp, #-12]
  while (netif != NULL) {
  130a94:	ea00001f 	b	130b18 <igmp_leavegroup+0x128>
    /* Should we leave this interface ? */
    if ((netif->flags & NETIF_FLAG_IGMP) && ((ip4_addr_isany(ifaddr) || ip4_addr_cmp(netif_ip4_addr(netif), ifaddr)))) {
  130a98:	e51b300c 	ldr	r3, [fp, #-12]
  130a9c:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  130aa0:	e2033020 	and	r3, r3, #32
  130aa4:	e3530000 	cmp	r3, #0
  130aa8:	0a000017 	beq	130b0c <igmp_leavegroup+0x11c>
  130aac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  130ab0:	e3530000 	cmp	r3, #0
  130ab4:	0a00000a 	beq	130ae4 <igmp_leavegroup+0xf4>
  130ab8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  130abc:	e5933000 	ldr	r3, [r3]
  130ac0:	e3530000 	cmp	r3, #0
  130ac4:	0a000006 	beq	130ae4 <igmp_leavegroup+0xf4>
  130ac8:	e51b300c 	ldr	r3, [fp, #-12]
  130acc:	e2833004 	add	r3, r3, #4
  130ad0:	e5932000 	ldr	r2, [r3]
  130ad4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  130ad8:	e5933000 	ldr	r3, [r3]
  130adc:	e1520003 	cmp	r2, r3
  130ae0:	1a000009 	bne	130b0c <igmp_leavegroup+0x11c>
      err_t res = igmp_leavegroup_netif(netif, groupaddr);
  130ae4:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  130ae8:	e51b000c 	ldr	r0, [fp, #-12]
  130aec:	eb000010 	bl	130b34 <igmp_leavegroup_netif>
  130af0:	e1a03000 	mov	r3, r0
  130af4:	e54b300d 	strb	r3, [fp, #-13]
      if (err != ERR_OK) {
  130af8:	e15b30d5 	ldrsb	r3, [fp, #-5]
  130afc:	e3530000 	cmp	r3, #0
  130b00:	0a000001 	beq	130b0c <igmp_leavegroup+0x11c>
        /* Store this result if we have not yet gotten a success */
        err = res;
  130b04:	e55b300d 	ldrb	r3, [fp, #-13]
  130b08:	e54b3005 	strb	r3, [fp, #-5]
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
  130b0c:	e51b300c 	ldr	r3, [fp, #-12]
  130b10:	e5933000 	ldr	r3, [r3]
  130b14:	e50b300c 	str	r3, [fp, #-12]
  while (netif != NULL) {
  130b18:	e51b300c 	ldr	r3, [fp, #-12]
  130b1c:	e3530000 	cmp	r3, #0
  130b20:	1affffdc 	bne	130a98 <igmp_leavegroup+0xa8>
  }

  return err;
  130b24:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  130b28:	e1a00003 	mov	r0, r3
  130b2c:	e24bd004 	sub	sp, fp, #4
  130b30:	e8bd8800 	pop	{fp, pc}

00130b34 <igmp_leavegroup_netif>:
 * @param groupaddr the ip address of the group which to leave
 * @return ERR_OK if group was left on the netif, an err_t otherwise
 */
err_t
igmp_leavegroup_netif(struct netif *netif, const ip4_addr_t *groupaddr)
{
  130b34:	e92d4800 	push	{fp, lr}
  130b38:	e28db004 	add	fp, sp, #4
  130b3c:	e24dd010 	sub	sp, sp, #16
  130b40:	e50b0010 	str	r0, [fp, #-16]
  130b44:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct igmp_group *group;

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_leavegroup_netif: attempt to leave non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
  130b48:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  130b4c:	e5933000 	ldr	r3, [r3]
  130b50:	e20330f0 	and	r3, r3, #240	; 0xf0
  130b54:	e35300e0 	cmp	r3, #224	; 0xe0
  130b58:	0a000008 	beq	130b80 <igmp_leavegroup_netif+0x4c>
  130b5c:	e30907a8 	movw	r0, #38824	; 0x97a8
  130b60:	e3400014 	movt	r0, #20
  130b64:	ebff496a 	bl	103114 <rt_kprintf>
  130b68:	e300124a 	movw	r1, #586	; 0x24a
  130b6c:	e3090570 	movw	r0, #38256	; 0x9570
  130b70:	e3400014 	movt	r0, #20
  130b74:	ebff695d 	bl	10b0f0 <sys_arch_assert>
  130b78:	e3e03005 	mvn	r3, #5
  130b7c:	ea000052 	b	130ccc <igmp_leavegroup_netif+0x198>
  LWIP_ERROR("igmp_leavegroup_netif: attempt to leave allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
  130b80:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  130b84:	e5932000 	ldr	r2, [r3]
  130b88:	e30e3bd8 	movw	r3, #60376	; 0xebd8
  130b8c:	e3403014 	movt	r3, #20
  130b90:	e5933000 	ldr	r3, [r3]
  130b94:	e1520003 	cmp	r2, r3
  130b98:	1a000008 	bne	130bc0 <igmp_leavegroup_netif+0x8c>
  130b9c:	e30907e8 	movw	r0, #38888	; 0x97e8
  130ba0:	e3400014 	movt	r0, #20
  130ba4:	ebff495a 	bl	103114 <rt_kprintf>
  130ba8:	e300124b 	movw	r1, #587	; 0x24b
  130bac:	e3090570 	movw	r0, #38256	; 0x9570
  130bb0:	e3400014 	movt	r0, #20
  130bb4:	ebff694d 	bl	10b0f0 <sys_arch_assert>
  130bb8:	e3e03005 	mvn	r3, #5
  130bbc:	ea000042 	b	130ccc <igmp_leavegroup_netif+0x198>

  /* make sure it is an igmp-enabled netif */
  LWIP_ERROR("igmp_leavegroup_netif: attempt to leave on non-IGMP netif", netif->flags & NETIF_FLAG_IGMP, return ERR_VAL;);
  130bc0:	e51b3010 	ldr	r3, [fp, #-16]
  130bc4:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  130bc8:	e2033020 	and	r3, r3, #32
  130bcc:	e3530000 	cmp	r3, #0
  130bd0:	1a000008 	bne	130bf8 <igmp_leavegroup_netif+0xc4>
  130bd4:	e3090824 	movw	r0, #38948	; 0x9824
  130bd8:	e3400014 	movt	r0, #20
  130bdc:	ebff494c 	bl	103114 <rt_kprintf>
  130be0:	e300124e 	movw	r1, #590	; 0x24e
  130be4:	e3090570 	movw	r0, #38256	; 0x9570
  130be8:	e3400014 	movt	r0, #20
  130bec:	ebff693f 	bl	10b0f0 <sys_arch_assert>
  130bf0:	e3e03005 	mvn	r3, #5
  130bf4:	ea000034 	b	130ccc <igmp_leavegroup_netif+0x198>

  /* find group */
  group = igmp_lookfor_group(netif, groupaddr);
  130bf8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  130bfc:	e51b0010 	ldr	r0, [fp, #-16]
  130c00:	ebfffd37 	bl	1300e4 <igmp_lookfor_group>
  130c04:	e50b0008 	str	r0, [fp, #-8]

  if (group != NULL) {
  130c08:	e51b3008 	ldr	r3, [fp, #-8]
  130c0c:	e3530000 	cmp	r3, #0
  130c10:	0a00002c 	beq	130cc8 <igmp_leavegroup_netif+0x194>
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup_netif: Leaving group: "));
    ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
    LWIP_DEBUGF(IGMP_DEBUG, ("\n"));

    /* If there is no other use of the group */
    if (group->use <= 1) {
  130c14:	e51b3008 	ldr	r3, [fp, #-8]
  130c18:	e5d3300c 	ldrb	r3, [r3, #12]
  130c1c:	e3530001 	cmp	r3, #1
  130c20:	8a000020 	bhi	130ca8 <igmp_leavegroup_netif+0x174>
      /* Remove the group from the list */
      igmp_remove_group(netif, group);
  130c24:	e51b1008 	ldr	r1, [fp, #-8]
  130c28:	e51b0010 	ldr	r0, [fp, #-16]
  130c2c:	ebfffda8 	bl	1302d4 <igmp_remove_group>

      /* If we are the last reporter for this group */
      if (group->last_reporter_flag) {
  130c30:	e51b3008 	ldr	r3, [fp, #-8]
  130c34:	e5d33008 	ldrb	r3, [r3, #8]
  130c38:	e3530000 	cmp	r3, #0
  130c3c:	0a00000b 	beq	130c70 <igmp_leavegroup_netif+0x13c>
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup_netif: sending leaving group\n"));
        IGMP_STATS_INC(igmp.tx_leave);
  130c40:	e30c3a30 	movw	r3, #51760	; 0xca30
  130c44:	e3403015 	movt	r3, #21
  130c48:	e1d339b0 	ldrh	r3, [r3, #144]	; 0x90
  130c4c:	e2833001 	add	r3, r3, #1
  130c50:	e6ff2073 	uxth	r2, r3
  130c54:	e30c3a30 	movw	r3, #51760	; 0xca30
  130c58:	e3403015 	movt	r3, #21
  130c5c:	e1c329b0 	strh	r2, [r3, #144]	; 0x90
        igmp_send(netif, group, IGMP_LEAVE_GROUP);
  130c60:	e3a02017 	mov	r2, #23
  130c64:	e51b1008 	ldr	r1, [fp, #-8]
  130c68:	e51b0010 	ldr	r0, [fp, #-16]
  130c6c:	eb0000ce 	bl	130fac <igmp_send>
      }

      /* Disable the group at the MAC level */
      if (netif->igmp_mac_filter != NULL) {
  130c70:	e51b3010 	ldr	r3, [fp, #-16]
  130c74:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  130c78:	e3530000 	cmp	r3, #0
  130c7c:	0a000005 	beq	130c98 <igmp_leavegroup_netif+0x164>
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup_netif: igmp_mac_filter(DEL "));
        ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
        LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void*)netif));
        netif->igmp_mac_filter(netif, groupaddr, NETIF_DEL_MAC_FILTER);
  130c80:	e51b3010 	ldr	r3, [fp, #-16]
  130c84:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  130c88:	e3a02000 	mov	r2, #0
  130c8c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  130c90:	e51b0010 	ldr	r0, [fp, #-16]
  130c94:	e12fff33 	blx	r3
      }

      /* Free group struct */
      memp_free(MEMP_IGMP_GROUP, group);
  130c98:	e51b1008 	ldr	r1, [fp, #-8]
  130c9c:	e3a0000c 	mov	r0, #12
  130ca0:	ebffa174 	bl	119278 <memp_free>
  130ca4:	ea000005 	b	130cc0 <igmp_leavegroup_netif+0x18c>
    } else {
      /* Decrement group use */
      group->use--;
  130ca8:	e51b3008 	ldr	r3, [fp, #-8]
  130cac:	e5d3300c 	ldrb	r3, [r3, #12]
  130cb0:	e2433001 	sub	r3, r3, #1
  130cb4:	e6ef2073 	uxtb	r2, r3
  130cb8:	e51b3008 	ldr	r3, [fp, #-8]
  130cbc:	e5c3200c 	strb	r2, [r3, #12]
    }
    return ERR_OK;
  130cc0:	e3a03000 	mov	r3, #0
  130cc4:	ea000000 	b	130ccc <igmp_leavegroup_netif+0x198>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup_netif: not member of group\n"));
    return ERR_VAL;
  130cc8:	e3e03005 	mvn	r3, #5
  }
}
  130ccc:	e1a00003 	mov	r0, r3
  130cd0:	e24bd004 	sub	sp, fp, #4
  130cd4:	e8bd8800 	pop	{fp, pc}

00130cd8 <igmp_tmr>:
 * The igmp timer function (both for NO_SYS=1 and =0)
 * Should be called every IGMP_TMR_INTERVAL milliseconds (100 ms is default).
 */
void
igmp_tmr(void)
{
  130cd8:	e92d4800 	push	{fp, lr}
  130cdc:	e28db004 	add	fp, sp, #4
  130ce0:	e24dd008 	sub	sp, sp, #8
  struct netif *netif = netif_list;
  130ce4:	e30c3a24 	movw	r3, #51748	; 0xca24
  130ce8:	e3403015 	movt	r3, #21
  130cec:	e5933000 	ldr	r3, [r3]
  130cf0:	e50b3008 	str	r3, [fp, #-8]

  while (netif != NULL) {
  130cf4:	ea00001d 	b	130d70 <igmp_tmr+0x98>
    struct igmp_group *group = netif_igmp_data(netif);
  130cf8:	e51b3008 	ldr	r3, [fp, #-8]
  130cfc:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  130d00:	e50b300c 	str	r3, [fp, #-12]

    while (group != NULL) {
  130d04:	ea000013 	b	130d58 <igmp_tmr+0x80>
      if (group->timer > 0) {
  130d08:	e51b300c 	ldr	r3, [fp, #-12]
  130d0c:	e1d330ba 	ldrh	r3, [r3, #10]
  130d10:	e3530000 	cmp	r3, #0
  130d14:	0a00000c 	beq	130d4c <igmp_tmr+0x74>
        group->timer--;
  130d18:	e51b300c 	ldr	r3, [fp, #-12]
  130d1c:	e1d330ba 	ldrh	r3, [r3, #10]
  130d20:	e2433001 	sub	r3, r3, #1
  130d24:	e6ff2073 	uxth	r2, r3
  130d28:	e51b300c 	ldr	r3, [fp, #-12]
  130d2c:	e1c320ba 	strh	r2, [r3, #10]
        if (group->timer == 0) {
  130d30:	e51b300c 	ldr	r3, [fp, #-12]
  130d34:	e1d330ba 	ldrh	r3, [r3, #10]
  130d38:	e3530000 	cmp	r3, #0
  130d3c:	1a000002 	bne	130d4c <igmp_tmr+0x74>
          igmp_timeout(netif, group);
  130d40:	e51b100c 	ldr	r1, [fp, #-12]
  130d44:	e51b0008 	ldr	r0, [fp, #-8]
  130d48:	eb00000e 	bl	130d88 <igmp_timeout>
        }
      }
      group = group->next;
  130d4c:	e51b300c 	ldr	r3, [fp, #-12]
  130d50:	e5933000 	ldr	r3, [r3]
  130d54:	e50b300c 	str	r3, [fp, #-12]
    while (group != NULL) {
  130d58:	e51b300c 	ldr	r3, [fp, #-12]
  130d5c:	e3530000 	cmp	r3, #0
  130d60:	1affffe8 	bne	130d08 <igmp_tmr+0x30>
    }
    netif = netif->next;
  130d64:	e51b3008 	ldr	r3, [fp, #-8]
  130d68:	e5933000 	ldr	r3, [r3]
  130d6c:	e50b3008 	str	r3, [fp, #-8]
  while (netif != NULL) {
  130d70:	e51b3008 	ldr	r3, [fp, #-8]
  130d74:	e3530000 	cmp	r3, #0
  130d78:	1affffde 	bne	130cf8 <igmp_tmr+0x20>
  }
}
  130d7c:	e320f000 	nop	{0}
  130d80:	e24bd004 	sub	sp, fp, #4
  130d84:	e8bd8800 	pop	{fp, pc}

00130d88 <igmp_timeout>:
 *
 * @param group an igmp_group for which a timeout is reached
 */
static void
igmp_timeout(struct netif *netif, struct igmp_group *group)
{
  130d88:	e92d4800 	push	{fp, lr}
  130d8c:	e28db004 	add	fp, sp, #4
  130d90:	e24dd008 	sub	sp, sp, #8
  130d94:	e50b0008 	str	r0, [fp, #-8]
  130d98:	e50b100c 	str	r1, [fp, #-12]
  /* If the state is IGMP_GROUP_DELAYING_MEMBER then we send a report for this group
     (unless it is the allsystems group) */
  if ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
  130d9c:	e51b300c 	ldr	r3, [fp, #-12]
  130da0:	e5d33009 	ldrb	r3, [r3, #9]
  130da4:	e3530001 	cmp	r3, #1
  130da8:	1a000015 	bne	130e04 <igmp_timeout+0x7c>
      (!(ip4_addr_cmp(&(group->group_address), &allsystems)))) {
  130dac:	e51b300c 	ldr	r3, [fp, #-12]
  130db0:	e5932004 	ldr	r2, [r3, #4]
  130db4:	e30e3bd8 	movw	r3, #60376	; 0xebd8
  130db8:	e3403014 	movt	r3, #20
  130dbc:	e5933000 	ldr	r3, [r3]
  if ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
  130dc0:	e1520003 	cmp	r2, r3
  130dc4:	0a00000e 	beq	130e04 <igmp_timeout+0x7c>
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_timeout: report membership for group with address "));
    ip4_addr_debug_print(IGMP_DEBUG, &(group->group_address));
    LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void*)netif));

    group->group_state = IGMP_GROUP_IDLE_MEMBER;
  130dc8:	e51b300c 	ldr	r3, [fp, #-12]
  130dcc:	e3a02002 	mov	r2, #2
  130dd0:	e5c32009 	strb	r2, [r3, #9]
    
    IGMP_STATS_INC(igmp.tx_report);
  130dd4:	e30c3a30 	movw	r3, #51760	; 0xca30
  130dd8:	e3403015 	movt	r3, #21
  130ddc:	e1d339b2 	ldrh	r3, [r3, #146]	; 0x92
  130de0:	e2833001 	add	r3, r3, #1
  130de4:	e6ff2073 	uxth	r2, r3
  130de8:	e30c3a30 	movw	r3, #51760	; 0xca30
  130dec:	e3403015 	movt	r3, #21
  130df0:	e1c329b2 	strh	r2, [r3, #146]	; 0x92
    igmp_send(netif, group, IGMP_V2_MEMB_REPORT);
  130df4:	e3a02016 	mov	r2, #22
  130df8:	e51b100c 	ldr	r1, [fp, #-12]
  130dfc:	e51b0008 	ldr	r0, [fp, #-8]
  130e00:	eb000069 	bl	130fac <igmp_send>
  }
}
  130e04:	e320f000 	nop	{0}
  130e08:	e24bd004 	sub	sp, fp, #4
  130e0c:	e8bd8800 	pop	{fp, pc}

00130e10 <igmp_start_timer>:
 * @param max_time the time in multiples of IGMP_TMR_INTERVAL (decrease with
 *        every call to igmp_tmr())
 */
static void
igmp_start_timer(struct igmp_group *group, u8_t max_time)
{
  130e10:	e92d4800 	push	{fp, lr}
  130e14:	e28db004 	add	fp, sp, #4
  130e18:	e24dd008 	sub	sp, sp, #8
  130e1c:	e50b0008 	str	r0, [fp, #-8]
  130e20:	e1a03001 	mov	r3, r1
  130e24:	e54b3009 	strb	r3, [fp, #-9]
#ifdef LWIP_RAND
  group->timer = max_time > 2 ? (LWIP_RAND() % max_time) : 1;
  130e28:	e55b3009 	ldrb	r3, [fp, #-9]
  130e2c:	e3530002 	cmp	r3, #2
  130e30:	9a000008 	bls	130e58 <igmp_start_timer+0x48>
  130e34:	eb0034d4 	bl	13e18c <rand>
  130e38:	e1a02000 	mov	r2, r0
  130e3c:	e55b3009 	ldrb	r3, [fp, #-9]
  130e40:	e1a01003 	mov	r1, r3
  130e44:	e1a00002 	mov	r0, r2
  130e48:	eb001f95 	bl	138ca4 <__aeabi_idivmod>
  130e4c:	e1a03001 	mov	r3, r1
  130e50:	e6ff3073 	uxth	r3, r3
  130e54:	ea000000 	b	130e5c <igmp_start_timer+0x4c>
  130e58:	e3a03001 	mov	r3, #1
  130e5c:	e51b2008 	ldr	r2, [fp, #-8]
  130e60:	e1c230ba 	strh	r3, [r2, #10]
#else /* LWIP_RAND */
  /* ATTENTION: use this only if absolutely necessary! */
  group->timer = max_time / 2;
#endif /* LWIP_RAND */

  if (group->timer == 0) {
  130e64:	e51b3008 	ldr	r3, [fp, #-8]
  130e68:	e1d330ba 	ldrh	r3, [r3, #10]
  130e6c:	e3530000 	cmp	r3, #0
  130e70:	1a000002 	bne	130e80 <igmp_start_timer+0x70>
    group->timer = 1;
  130e74:	e51b3008 	ldr	r3, [fp, #-8]
  130e78:	e3a02001 	mov	r2, #1
  130e7c:	e1c320ba 	strh	r2, [r3, #10]
  }
}
  130e80:	e320f000 	nop	{0}
  130e84:	e24bd004 	sub	sp, fp, #4
  130e88:	e8bd8800 	pop	{fp, pc}

00130e8c <igmp_delaying_member>:
 * @param group the igmp_group for which "delaying" membership report
 * @param maxresp query delay
 */
static void
igmp_delaying_member(struct igmp_group *group, u8_t maxresp)
{
  130e8c:	e92d4800 	push	{fp, lr}
  130e90:	e28db004 	add	fp, sp, #4
  130e94:	e24dd008 	sub	sp, sp, #8
  130e98:	e50b0008 	str	r0, [fp, #-8]
  130e9c:	e1a03001 	mov	r3, r1
  130ea0:	e54b3009 	strb	r3, [fp, #-9]
  if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
  130ea4:	e51b3008 	ldr	r3, [fp, #-8]
  130ea8:	e5d33009 	ldrb	r3, [r3, #9]
  130eac:	e3530002 	cmp	r3, #2
  130eb0:	0a00000d 	beq	130eec <igmp_delaying_member+0x60>
     ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
  130eb4:	e51b3008 	ldr	r3, [fp, #-8]
  130eb8:	e5d33009 	ldrb	r3, [r3, #9]
  if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
  130ebc:	e3530001 	cmp	r3, #1
  130ec0:	1a000010 	bne	130f08 <igmp_delaying_member+0x7c>
      ((group->timer == 0) || (maxresp < group->timer)))) {
  130ec4:	e51b3008 	ldr	r3, [fp, #-8]
  130ec8:	e1d330ba 	ldrh	r3, [r3, #10]
     ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
  130ecc:	e3530000 	cmp	r3, #0
  130ed0:	0a000005 	beq	130eec <igmp_delaying_member+0x60>
      ((group->timer == 0) || (maxresp < group->timer)))) {
  130ed4:	e55b3009 	ldrb	r3, [fp, #-9]
  130ed8:	e6ff2073 	uxth	r2, r3
  130edc:	e51b3008 	ldr	r3, [fp, #-8]
  130ee0:	e1d330ba 	ldrh	r3, [r3, #10]
  130ee4:	e1520003 	cmp	r2, r3
  130ee8:	2a000006 	bcs	130f08 <igmp_delaying_member+0x7c>
    igmp_start_timer(group, maxresp);
  130eec:	e55b3009 	ldrb	r3, [fp, #-9]
  130ef0:	e1a01003 	mov	r1, r3
  130ef4:	e51b0008 	ldr	r0, [fp, #-8]
  130ef8:	ebffffc4 	bl	130e10 <igmp_start_timer>
    group->group_state = IGMP_GROUP_DELAYING_MEMBER;
  130efc:	e51b3008 	ldr	r3, [fp, #-8]
  130f00:	e3a02001 	mov	r2, #1
  130f04:	e5c32009 	strb	r2, [r3, #9]
  }
}
  130f08:	e320f000 	nop	{0}
  130f0c:	e24bd004 	sub	sp, fp, #4
  130f10:	e8bd8800 	pop	{fp, pc}

00130f14 <igmp_ip_output_if>:
 *         ERR_BUF if p doesn't have enough space for IP/LINK headers
 *         returns errors returned by netif->output
 */
static err_t
igmp_ip_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest, struct netif *netif)
{
  130f14:	e92d4800 	push	{fp, lr}
  130f18:	e28db004 	add	fp, sp, #4
  130f1c:	e24dd030 	sub	sp, sp, #48	; 0x30
  130f20:	e50b0010 	str	r0, [fp, #-16]
  130f24:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  130f28:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  130f2c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  /* This is the "router alert" option */
  u16_t ra[2];
  ra[0] = PP_HTONS(ROUTER_ALERT);
  130f30:	e3003494 	movw	r3, #1172	; 0x494
  130f34:	e14b30b8 	strh	r3, [fp, #-8]
  ra[1] = 0x0000; /* Router shall examine packet */
  130f38:	e3a03000 	mov	r3, #0
  130f3c:	e14b30b6 	strh	r3, [fp, #-6]
  IGMP_STATS_INC(igmp.xmit);
  130f40:	e30c3a30 	movw	r3, #51760	; 0xca30
  130f44:	e3403015 	movt	r3, #21
  130f48:	e1d337b8 	ldrh	r3, [r3, #120]	; 0x78
  130f4c:	e2833001 	add	r3, r3, #1
  130f50:	e6ff2073 	uxth	r2, r3
  130f54:	e30c3a30 	movw	r3, #51760	; 0xca30
  130f58:	e3403015 	movt	r3, #21
  130f5c:	e1c327b8 	strh	r2, [r3, #120]	; 0x78
  return ip4_output_if_opt(p, src, dest, IGMP_TTL, 0, IP_PROTO_IGMP, netif, ra, ROUTER_ALERTLEN);
  130f60:	e3a03004 	mov	r3, #4
  130f64:	e58d3010 	str	r3, [sp, #16]
  130f68:	e24b3008 	sub	r3, fp, #8
  130f6c:	e58d300c 	str	r3, [sp, #12]
  130f70:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  130f74:	e58d3008 	str	r3, [sp, #8]
  130f78:	e3a03002 	mov	r3, #2
  130f7c:	e58d3004 	str	r3, [sp, #4]
  130f80:	e3a03000 	mov	r3, #0
  130f84:	e58d3000 	str	r3, [sp]
  130f88:	e3a03001 	mov	r3, #1
  130f8c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  130f90:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  130f94:	e51b0010 	ldr	r0, [fp, #-16]
  130f98:	eb000371 	bl	131d64 <ip4_output_if_opt>
  130f9c:	e1a03000 	mov	r3, r0
}
  130fa0:	e1a00003 	mov	r0, r3
  130fa4:	e24bd004 	sub	sp, fp, #4
  130fa8:	e8bd8800 	pop	{fp, pc}

00130fac <igmp_send>:
 * @param group the group to which to send the packet
 * @param type the type of igmp packet to send
 */
static void
igmp_send(struct netif *netif, struct igmp_group *group, u8_t type)
{
  130fac:	e92d4800 	push	{fp, lr}
  130fb0:	e28db004 	add	fp, sp, #4
  130fb4:	e24dd020 	sub	sp, sp, #32
  130fb8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  130fbc:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  130fc0:	e1a03002 	mov	r3, r2
  130fc4:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  struct pbuf*     p    = NULL;
  130fc8:	e3a03000 	mov	r3, #0
  130fcc:	e50b300c 	str	r3, [fp, #-12]
  struct igmp_msg* igmp = NULL;
  130fd0:	e3a03000 	mov	r3, #0
  130fd4:	e50b3010 	str	r3, [fp, #-16]
  ip4_addr_t   src  = *IP4_ADDR_ANY4;
  130fd8:	e3093908 	movw	r3, #39176	; 0x9908
  130fdc:	e3403014 	movt	r3, #20
  130fe0:	e5933000 	ldr	r3, [r3]
  130fe4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  ip4_addr_t*  dest = NULL;
  130fe8:	e3a03000 	mov	r3, #0
  130fec:	e50b3008 	str	r3, [fp, #-8]

  /* IP header + "router alert" option + IGMP header */
  p = pbuf_alloc(PBUF_TRANSPORT, IGMP_MINLEN, PBUF_RAM);
  130ff0:	e3a02000 	mov	r2, #0
  130ff4:	e3a01008 	mov	r1, #8
  130ff8:	e3a00000 	mov	r0, #0
  130ffc:	ebffa4a4 	bl	11a294 <pbuf_alloc>
  131000:	e50b000c 	str	r0, [fp, #-12]

  if (p) {
  131004:	e51b300c 	ldr	r3, [fp, #-12]
  131008:	e3530000 	cmp	r3, #0
  13100c:	0a000049 	beq	131138 <igmp_send+0x18c>
    igmp = (struct igmp_msg *)p->payload;
  131010:	e51b300c 	ldr	r3, [fp, #-12]
  131014:	e5933004 	ldr	r3, [r3, #4]
  131018:	e50b3010 	str	r3, [fp, #-16]
    LWIP_ASSERT("igmp_send: check that first pbuf can hold struct igmp_msg",
  13101c:	e51b300c 	ldr	r3, [fp, #-12]
  131020:	e1d330ba 	ldrh	r3, [r3, #10]
  131024:	e3530007 	cmp	r3, #7
  131028:	8a000006 	bhi	131048 <igmp_send+0x9c>
  13102c:	e3090860 	movw	r0, #39008	; 0x9860
  131030:	e3400014 	movt	r0, #20
  131034:	ebff4836 	bl	103114 <rt_kprintf>
  131038:	e3001302 	movw	r1, #770	; 0x302
  13103c:	e3090570 	movw	r0, #38256	; 0x9570
  131040:	e3400014 	movt	r0, #20
  131044:	ebff6829 	bl	10b0f0 <sys_arch_assert>
               (p->len >= sizeof(struct igmp_msg)));
    ip4_addr_copy(src, *netif_ip4_addr(netif));
  131048:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  13104c:	e2833004 	add	r3, r3, #4
  131050:	e5933000 	ldr	r3, [r3]
  131054:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

    if (type == IGMP_V2_MEMB_REPORT) {
  131058:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  13105c:	e3530016 	cmp	r3, #22
  131060:	1a00000a 	bne	131090 <igmp_send+0xe4>
      dest = &(group->group_address);
  131064:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  131068:	e2833004 	add	r3, r3, #4
  13106c:	e50b3008 	str	r3, [fp, #-8]
      ip4_addr_copy(igmp->igmp_group_address, group->group_address);
  131070:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  131074:	e5932004 	ldr	r2, [r3, #4]
  131078:	e51b3010 	ldr	r3, [fp, #-16]
  13107c:	e5832004 	str	r2, [r3, #4]
      group->last_reporter_flag = 1; /* Remember we were the last to report */
  131080:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  131084:	e3a02001 	mov	r2, #1
  131088:	e5c32008 	strb	r2, [r3, #8]
  13108c:	ea000009 	b	1310b8 <igmp_send+0x10c>
    } else {
      if (type == IGMP_LEAVE_GROUP) {
  131090:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  131094:	e3530017 	cmp	r3, #23
  131098:	1a000006 	bne	1310b8 <igmp_send+0x10c>
        dest = &allrouters;
  13109c:	e30e3bdc 	movw	r3, #60380	; 0xebdc
  1310a0:	e3403014 	movt	r3, #20
  1310a4:	e50b3008 	str	r3, [fp, #-8]
        ip4_addr_copy(igmp->igmp_group_address, group->group_address);
  1310a8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1310ac:	e5932004 	ldr	r2, [r3, #4]
  1310b0:	e51b3010 	ldr	r3, [fp, #-16]
  1310b4:	e5832004 	str	r2, [r3, #4]
      }
    }

    if ((type == IGMP_V2_MEMB_REPORT) || (type == IGMP_LEAVE_GROUP)) {
  1310b8:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  1310bc:	e3530016 	cmp	r3, #22
  1310c0:	0a000002 	beq	1310d0 <igmp_send+0x124>
  1310c4:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  1310c8:	e3530017 	cmp	r3, #23
  1310cc:	1a000016 	bne	13112c <igmp_send+0x180>
      igmp->igmp_msgtype  = type;
  1310d0:	e51b3010 	ldr	r3, [fp, #-16]
  1310d4:	e55b201d 	ldrb	r2, [fp, #-29]	; 0xffffffe3
  1310d8:	e5c32000 	strb	r2, [r3]
      igmp->igmp_maxresp  = 0;
  1310dc:	e51b3010 	ldr	r3, [fp, #-16]
  1310e0:	e3a02000 	mov	r2, #0
  1310e4:	e5c32001 	strb	r2, [r3, #1]
      igmp->igmp_checksum = 0;
  1310e8:	e51b3010 	ldr	r3, [fp, #-16]
  1310ec:	e3a02000 	mov	r2, #0
  1310f0:	e5c32002 	strb	r2, [r3, #2]
  1310f4:	e3a02000 	mov	r2, #0
  1310f8:	e5c32003 	strb	r2, [r3, #3]
      igmp->igmp_checksum = inet_chksum(igmp, IGMP_MINLEN);
  1310fc:	e3a01008 	mov	r1, #8
  131100:	e51b0010 	ldr	r0, [fp, #-16]
  131104:	ebff9e41 	bl	118a10 <inet_chksum>
  131108:	e1a03000 	mov	r3, r0
  13110c:	e1a02003 	mov	r2, r3
  131110:	e51b3010 	ldr	r3, [fp, #-16]
  131114:	e1c320b2 	strh	r2, [r3, #2]

      igmp_ip_output_if(p, &src, dest, netif);
  131118:	e24b1014 	sub	r1, fp, #20
  13111c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  131120:	e51b2008 	ldr	r2, [fp, #-8]
  131124:	e51b000c 	ldr	r0, [fp, #-12]
  131128:	ebffff79 	bl	130f14 <igmp_ip_output_if>
    }

    pbuf_free(p);
  13112c:	e51b000c 	ldr	r0, [fp, #-12]
  131130:	ebffa75e 	bl	11aeb0 <pbuf_free>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_send: not enough memory for igmp_send\n"));
    IGMP_STATS_INC(igmp.memerr);
  }
}
  131134:	ea000007 	b	131158 <igmp_send+0x1ac>
    IGMP_STATS_INC(igmp.memerr);
  131138:	e30c3a30 	movw	r3, #51760	; 0xca30
  13113c:	e3403015 	movt	r3, #21
  131140:	e1d338b2 	ldrh	r3, [r3, #130]	; 0x82
  131144:	e2833001 	add	r3, r3, #1
  131148:	e6ff2073 	uxth	r2, r3
  13114c:	e30c3a30 	movw	r3, #51760	; 0xca30
  131150:	e3403015 	movt	r3, #21
  131154:	e1c328b2 	strh	r2, [r3, #130]	; 0x82
}
  131158:	e320f000 	nop	{0}
  13115c:	e24bd004 	sub	sp, fp, #4
  131160:	e8bd8800 	pop	{fp, pc}

00131164 <ip4_set_default_multicast_netif>:
/**
 * @ingroup ip4
 * Set a default netif for IPv4 multicast. */
void
ip4_set_default_multicast_netif(struct netif* default_multicast_netif)
{
  131164:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  131168:	e28db000 	add	fp, sp, #0
  13116c:	e24dd00c 	sub	sp, sp, #12
  131170:	e50b0008 	str	r0, [fp, #-8]
  ip4_default_multicast_netif = default_multicast_netif;
  131174:	e30e3be4 	movw	r3, #60388	; 0xebe4
  131178:	e3403014 	movt	r3, #20
  13117c:	e51b2008 	ldr	r2, [fp, #-8]
  131180:	e5832000 	str	r2, [r3]
}
  131184:	e320f000 	nop	{0}
  131188:	e28bd000 	add	sp, fp, #0
  13118c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  131190:	e12fff1e 	bx	lr

00131194 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
  131194:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  131198:	e28db000 	add	fp, sp, #0
  13119c:	e24dd014 	sub	sp, sp, #20
  1311a0:	e50b0010 	str	r0, [fp, #-16]
  struct netif *netif;

#if LWIP_MULTICAST_TX_OPTIONS
  /* Use administratively selected interface for multicast by default */
  if (ip4_addr_ismulticast(dest) && ip4_default_multicast_netif) {
  1311a4:	e51b3010 	ldr	r3, [fp, #-16]
  1311a8:	e5933000 	ldr	r3, [r3]
  1311ac:	e20330f0 	and	r3, r3, #240	; 0xf0
  1311b0:	e35300e0 	cmp	r3, #224	; 0xe0
  1311b4:	1a000008 	bne	1311dc <ip4_route+0x48>
  1311b8:	e30e3be4 	movw	r3, #60388	; 0xebe4
  1311bc:	e3403014 	movt	r3, #20
  1311c0:	e5933000 	ldr	r3, [r3]
  1311c4:	e3530000 	cmp	r3, #0
  1311c8:	0a000003 	beq	1311dc <ip4_route+0x48>
    return ip4_default_multicast_netif;
  1311cc:	e30e3be4 	movw	r3, #60388	; 0xebe4
  1311d0:	e3403014 	movt	r3, #20
  1311d4:	e5933000 	ldr	r3, [r3]
  1311d8:	ea000091 	b	131424 <ip4_route+0x290>
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
  1311dc:	e30c3a24 	movw	r3, #51748	; 0xca24
  1311e0:	e3403015 	movt	r3, #21
  1311e4:	e5933000 	ldr	r3, [r3]
  1311e8:	e50b3008 	str	r3, [fp, #-8]
  1311ec:	ea000030 	b	1312b4 <ip4_route+0x120>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
  1311f0:	e51b3008 	ldr	r3, [fp, #-8]
  1311f4:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1311f8:	e2033001 	and	r3, r3, #1
  1311fc:	e6ef3073 	uxtb	r3, r3
  131200:	e3530000 	cmp	r3, #0
  131204:	0a000027 	beq	1312a8 <ip4_route+0x114>
  131208:	e51b3008 	ldr	r3, [fp, #-8]
  13120c:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  131210:	e1a03123 	lsr	r3, r3, #2
  131214:	e2033001 	and	r3, r3, #1
  131218:	e6ef3073 	uxtb	r3, r3
  13121c:	e3530000 	cmp	r3, #0
  131220:	0a000020 	beq	1312a8 <ip4_route+0x114>
  131224:	e51b3008 	ldr	r3, [fp, #-8]
  131228:	e2833004 	add	r3, r3, #4
  13122c:	e5933000 	ldr	r3, [r3]
  131230:	e3530000 	cmp	r3, #0
  131234:	0a00001b 	beq	1312a8 <ip4_route+0x114>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
  131238:	e51b3010 	ldr	r3, [fp, #-16]
  13123c:	e5932000 	ldr	r2, [r3]
  131240:	e51b3008 	ldr	r3, [fp, #-8]
  131244:	e2833004 	add	r3, r3, #4
  131248:	e5933000 	ldr	r3, [r3]
  13124c:	e0222003 	eor	r2, r2, r3
  131250:	e51b3008 	ldr	r3, [fp, #-8]
  131254:	e2833008 	add	r3, r3, #8
  131258:	e5933000 	ldr	r3, [r3]
  13125c:	e0033002 	and	r3, r3, r2
  131260:	e3530000 	cmp	r3, #0
  131264:	1a000001 	bne	131270 <ip4_route+0xdc>
        /* return netif on which to forward IP packet */
        return netif;
  131268:	e51b3008 	ldr	r3, [fp, #-8]
  13126c:	ea00006c 	b	131424 <ip4_route+0x290>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
  131270:	e51b3008 	ldr	r3, [fp, #-8]
  131274:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  131278:	e2033002 	and	r3, r3, #2
  13127c:	e3530000 	cmp	r3, #0
  131280:	1a000008 	bne	1312a8 <ip4_route+0x114>
  131284:	e51b3010 	ldr	r3, [fp, #-16]
  131288:	e5932000 	ldr	r2, [r3]
  13128c:	e51b3008 	ldr	r3, [fp, #-8]
  131290:	e283300c 	add	r3, r3, #12
  131294:	e5933000 	ldr	r3, [r3]
  131298:	e1520003 	cmp	r2, r3
  13129c:	1a000001 	bne	1312a8 <ip4_route+0x114>
        /* return netif on which to forward IP packet */
        return netif;
  1312a0:	e51b3008 	ldr	r3, [fp, #-8]
  1312a4:	ea00005e 	b	131424 <ip4_route+0x290>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
  1312a8:	e51b3008 	ldr	r3, [fp, #-8]
  1312ac:	e5933000 	ldr	r3, [r3]
  1312b0:	e50b3008 	str	r3, [fp, #-8]
  1312b4:	e51b3008 	ldr	r3, [fp, #-8]
  1312b8:	e3530000 	cmp	r3, #0
  1312bc:	1affffcb 	bne	1311f0 <ip4_route+0x5c>
    }
  }

#if LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF
  /* loopif is disabled, looopback traffic is passed through any netif */
  if (ip4_addr_isloopback(dest)) {
  1312c0:	e51b3010 	ldr	r3, [fp, #-16]
  1312c4:	e5933000 	ldr	r3, [r3]
  1312c8:	e6ef3073 	uxtb	r3, r3
  1312cc:	e353007f 	cmp	r3, #127	; 0x7f
  1312d0:	1a000025 	bne	13136c <ip4_route+0x1d8>
    /* don't check for link on loopback traffic */
    if (netif_default != NULL && netif_is_up(netif_default)) {
  1312d4:	e30c3a28 	movw	r3, #51752	; 0xca28
  1312d8:	e3403015 	movt	r3, #21
  1312dc:	e5933000 	ldr	r3, [r3]
  1312e0:	e3530000 	cmp	r3, #0
  1312e4:	0a00000b 	beq	131318 <ip4_route+0x184>
  1312e8:	e30c3a28 	movw	r3, #51752	; 0xca28
  1312ec:	e3403015 	movt	r3, #21
  1312f0:	e5933000 	ldr	r3, [r3]
  1312f4:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1312f8:	e2033001 	and	r3, r3, #1
  1312fc:	e6ef3073 	uxtb	r3, r3
  131300:	e3530000 	cmp	r3, #0
  131304:	0a000003 	beq	131318 <ip4_route+0x184>
      return netif_default;
  131308:	e30c3a28 	movw	r3, #51752	; 0xca28
  13130c:	e3403015 	movt	r3, #21
  131310:	e5933000 	ldr	r3, [r3]
  131314:	ea000042 	b	131424 <ip4_route+0x290>
    }
    /* default netif is not up, just use any netif for loopback traffic */
    for (netif = netif_list; netif != NULL; netif = netif->next) {
  131318:	e30c3a24 	movw	r3, #51748	; 0xca24
  13131c:	e3403015 	movt	r3, #21
  131320:	e5933000 	ldr	r3, [r3]
  131324:	e50b3008 	str	r3, [fp, #-8]
  131328:	ea00000a 	b	131358 <ip4_route+0x1c4>
      if (netif_is_up(netif)) {
  13132c:	e51b3008 	ldr	r3, [fp, #-8]
  131330:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  131334:	e2033001 	and	r3, r3, #1
  131338:	e6ef3073 	uxtb	r3, r3
  13133c:	e3530000 	cmp	r3, #0
  131340:	0a000001 	beq	13134c <ip4_route+0x1b8>
        return netif;
  131344:	e51b3008 	ldr	r3, [fp, #-8]
  131348:	ea000035 	b	131424 <ip4_route+0x290>
    for (netif = netif_list; netif != NULL; netif = netif->next) {
  13134c:	e51b3008 	ldr	r3, [fp, #-8]
  131350:	e5933000 	ldr	r3, [r3]
  131354:	e50b3008 	str	r3, [fp, #-8]
  131358:	e51b3008 	ldr	r3, [fp, #-8]
  13135c:	e3530000 	cmp	r3, #0
  131360:	1afffff1 	bne	13132c <ip4_route+0x198>
      }
    }
    return NULL;
  131364:	e3a03000 	mov	r3, #0
  131368:	ea00002d 	b	131424 <ip4_route+0x290>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
  13136c:	e30c3a28 	movw	r3, #51752	; 0xca28
  131370:	e3403015 	movt	r3, #21
  131374:	e5933000 	ldr	r3, [r3]
  131378:	e3530000 	cmp	r3, #0
  13137c:	0a000014 	beq	1313d4 <ip4_route+0x240>
  131380:	e30c3a28 	movw	r3, #51752	; 0xca28
  131384:	e3403015 	movt	r3, #21
  131388:	e5933000 	ldr	r3, [r3]
  13138c:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  131390:	e2033001 	and	r3, r3, #1
  131394:	e3530000 	cmp	r3, #0
  131398:	0a00000d 	beq	1313d4 <ip4_route+0x240>
  13139c:	e30c3a28 	movw	r3, #51752	; 0xca28
  1313a0:	e3403015 	movt	r3, #21
  1313a4:	e5933000 	ldr	r3, [r3]
  1313a8:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1313ac:	e2033004 	and	r3, r3, #4
  1313b0:	e3530000 	cmp	r3, #0
  1313b4:	0a000006 	beq	1313d4 <ip4_route+0x240>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
  1313b8:	e30c3a28 	movw	r3, #51752	; 0xca28
  1313bc:	e3403015 	movt	r3, #21
  1313c0:	e5933000 	ldr	r3, [r3]
  1313c4:	e2833004 	add	r3, r3, #4
  1313c8:	e5933000 	ldr	r3, [r3]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
  1313cc:	e3530000 	cmp	r3, #0
  1313d0:	1a000010 	bne	131418 <ip4_route+0x284>
    /* No matching netif found and default netif is not usable.
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
  1313d4:	e30c3a30 	movw	r3, #51760	; 0xca30
  1313d8:	e3403015 	movt	r3, #21
  1313dc:	e1d335b6 	ldrh	r3, [r3, #86]	; 0x56
  1313e0:	e2833001 	add	r3, r3, #1
  1313e4:	e6ff2073 	uxth	r2, r3
  1313e8:	e30c3a30 	movw	r3, #51760	; 0xca30
  1313ec:	e3403015 	movt	r3, #21
  1313f0:	e1c325b6 	strh	r2, [r3, #86]	; 0x56
    MIB2_STATS_INC(mib2.ipoutnoroutes);
  1313f4:	e30c3a30 	movw	r3, #51760	; 0xca30
  1313f8:	e3403015 	movt	r3, #21
  1313fc:	e5933148 	ldr	r3, [r3, #328]	; 0x148
  131400:	e2832001 	add	r2, r3, #1
  131404:	e30c3a30 	movw	r3, #51760	; 0xca30
  131408:	e3403015 	movt	r3, #21
  13140c:	e5832148 	str	r2, [r3, #328]	; 0x148
    return NULL;
  131410:	e3a03000 	mov	r3, #0
  131414:	ea000002 	b	131424 <ip4_route+0x290>
  }

  return netif_default;
  131418:	e30c3a28 	movw	r3, #51752	; 0xca28
  13141c:	e3403015 	movt	r3, #21
  131420:	e5933000 	ldr	r3, [r3]
}
  131424:	e1a00003 	mov	r0, r3
  131428:	e28bd000 	add	sp, fp, #0
  13142c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  131430:	e12fff1e 	bx	lr

00131434 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
  131434:	e92d4800 	push	{fp, lr}
  131438:	e28db004 	add	fp, sp, #4
  13143c:	e24dd028 	sub	sp, sp, #40	; 0x28
  131440:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  131444:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
  131448:	e3a03001 	mov	r3, #1
  13144c:	e50b3010 	str	r3, [fp, #-16]
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP */

  IP_STATS_INC(ip.recv);
  131450:	e30c3a30 	movw	r3, #51760	; 0xca30
  131454:	e3403015 	movt	r3, #21
  131458:	e1d334ba 	ldrh	r3, [r3, #74]	; 0x4a
  13145c:	e2833001 	add	r3, r3, #1
  131460:	e6ff2073 	uxth	r2, r3
  131464:	e30c3a30 	movw	r3, #51760	; 0xca30
  131468:	e3403015 	movt	r3, #21
  13146c:	e1c324ba 	strh	r2, [r3, #74]	; 0x4a
  MIB2_STATS_INC(mib2.ipinreceives);
  131470:	e30c3a30 	movw	r3, #51760	; 0xca30
  131474:	e3403015 	movt	r3, #21
  131478:	e5933168 	ldr	r3, [r3, #360]	; 0x168
  13147c:	e2832001 	add	r2, r3, #1
  131480:	e30c3a30 	movw	r3, #51760	; 0xca30
  131484:	e3403015 	movt	r3, #21
  131488:	e5832168 	str	r2, [r3, #360]	; 0x168

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
  13148c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  131490:	e5933004 	ldr	r3, [r3, #4]
  131494:	e50b3008 	str	r3, [fp, #-8]
  if (IPH_V(iphdr) != 4) {
  131498:	e51b3008 	ldr	r3, [fp, #-8]
  13149c:	e5d33000 	ldrb	r3, [r3]
  1314a0:	e1a03223 	lsr	r3, r3, #4
  1314a4:	e6ef3073 	uxtb	r3, r3
  1314a8:	e3530004 	cmp	r3, #4
  1314ac:	0a00001a 	beq	13151c <ip4_input+0xe8>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
  1314b0:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1314b4:	ebffa67d 	bl	11aeb0 <pbuf_free>
    IP_STATS_INC(ip.err);
  1314b8:	e30c3a30 	movw	r3, #51760	; 0xca30
  1314bc:	e3403015 	movt	r3, #21
  1314c0:	e1d335bc 	ldrh	r3, [r3, #92]	; 0x5c
  1314c4:	e2833001 	add	r3, r3, #1
  1314c8:	e6ff2073 	uxth	r2, r3
  1314cc:	e30c3a30 	movw	r3, #51760	; 0xca30
  1314d0:	e3403015 	movt	r3, #21
  1314d4:	e1c325bc 	strh	r2, [r3, #92]	; 0x5c
    IP_STATS_INC(ip.drop);
  1314d8:	e30c3a30 	movw	r3, #51760	; 0xca30
  1314dc:	e3403015 	movt	r3, #21
  1314e0:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  1314e4:	e2833001 	add	r3, r3, #1
  1314e8:	e6ff2073 	uxth	r2, r3
  1314ec:	e30c3a30 	movw	r3, #51760	; 0xca30
  1314f0:	e3403015 	movt	r3, #21
  1314f4:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
    MIB2_STATS_INC(mib2.ipinhdrerrors);
  1314f8:	e30c3a30 	movw	r3, #51760	; 0xca30
  1314fc:	e3403015 	movt	r3, #21
  131500:	e593312c 	ldr	r3, [r3, #300]	; 0x12c
  131504:	e2832001 	add	r2, r3, #1
  131508:	e30c3a30 	movw	r3, #51760	; 0xca30
  13150c:	e3403015 	movt	r3, #21
  131510:	e583212c 	str	r2, [r3, #300]	; 0x12c
    return ERR_OK;
  131514:	e3a03000 	mov	r3, #0
  131518:	ea0001f2 	b	131ce8 <ip4_input+0x8b4>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
  13151c:	e51b3008 	ldr	r3, [fp, #-8]
  131520:	e5d33000 	ldrb	r3, [r3]
  131524:	e6ff3073 	uxth	r3, r3
  131528:	e203300f 	and	r3, r3, #15
  13152c:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
  131530:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  131534:	e1a03103 	lsl	r3, r3, #2
  131538:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
  13153c:	e51b3008 	ldr	r3, [fp, #-8]
  131540:	e1d330b2 	ldrh	r3, [r3, #2]
  131544:	e6ff3073 	uxth	r3, r3
  131548:	e1a00003 	mov	r0, r3
  13154c:	ebff9420 	bl	1165d4 <lwip_htons>
  131550:	e1a03000 	mov	r3, r0
  131554:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
  131558:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  13155c:	e1d330b8 	ldrh	r3, [r3, #8]
  131560:	e15b21b8 	ldrh	r2, [fp, #-24]	; 0xffffffe8
  131564:	e1520003 	cmp	r2, r3
  131568:	2a000003 	bcs	13157c <ip4_input+0x148>
    pbuf_realloc(p, iphdr_len);
  13156c:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
  131570:	e1a01003 	mov	r1, r3
  131574:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131578:	ebffa503 	bl	11a98c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
  13157c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  131580:	e1d330ba 	ldrh	r3, [r3, #10]
  131584:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  131588:	e1520003 	cmp	r2, r3
  13158c:	8a000007 	bhi	1315b0 <ip4_input+0x17c>
  131590:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  131594:	e1d330b8 	ldrh	r3, [r3, #8]
  131598:	e15b21b8 	ldrh	r2, [fp, #-24]	; 0xffffffe8
  13159c:	e1520003 	cmp	r2, r3
  1315a0:	8a000002 	bhi	1315b0 <ip4_input+0x17c>
  1315a4:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  1315a8:	e3530013 	cmp	r3, #19
  1315ac:	8a00001a 	bhi	13161c <ip4_input+0x1e8>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
  1315b0:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1315b4:	ebffa63d 	bl	11aeb0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
  1315b8:	e30c3a30 	movw	r3, #51760	; 0xca30
  1315bc:	e3403015 	movt	r3, #21
  1315c0:	e1d335b2 	ldrh	r3, [r3, #82]	; 0x52
  1315c4:	e2833001 	add	r3, r3, #1
  1315c8:	e6ff2073 	uxth	r2, r3
  1315cc:	e30c3a30 	movw	r3, #51760	; 0xca30
  1315d0:	e3403015 	movt	r3, #21
  1315d4:	e1c325b2 	strh	r2, [r3, #82]	; 0x52
    IP_STATS_INC(ip.drop);
  1315d8:	e30c3a30 	movw	r3, #51760	; 0xca30
  1315dc:	e3403015 	movt	r3, #21
  1315e0:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  1315e4:	e2833001 	add	r3, r3, #1
  1315e8:	e6ff2073 	uxth	r2, r3
  1315ec:	e30c3a30 	movw	r3, #51760	; 0xca30
  1315f0:	e3403015 	movt	r3, #21
  1315f4:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
    MIB2_STATS_INC(mib2.ipindiscards);
  1315f8:	e30c3a30 	movw	r3, #51760	; 0xca30
  1315fc:	e3403015 	movt	r3, #21
  131600:	e5933138 	ldr	r3, [r3, #312]	; 0x138
  131604:	e2832001 	add	r2, r3, #1
  131608:	e30c3a30 	movw	r3, #51760	; 0xca30
  13160c:	e3403015 	movt	r3, #21
  131610:	e5832138 	str	r2, [r3, #312]	; 0x138
    return ERR_OK;
  131614:	e3a03000 	mov	r3, #0
  131618:	ea0001b2 	b	131ce8 <ip4_input+0x8b4>
  }

  /* verify checksum */
#if CHECKSUM_CHECK_IP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_IP) {
    if (inet_chksum(iphdr, iphdr_hlen) != 0) {
  13161c:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  131620:	e1a01003 	mov	r1, r3
  131624:	e51b0008 	ldr	r0, [fp, #-8]
  131628:	ebff9cf8 	bl	118a10 <inet_chksum>
  13162c:	e1a03000 	mov	r3, r0
  131630:	e3530000 	cmp	r3, #0
  131634:	0a00001a 	beq	1316a4 <ip4_input+0x270>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
      ip4_debug_print(p);
      pbuf_free(p);
  131638:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  13163c:	ebffa61b 	bl	11aeb0 <pbuf_free>
      IP_STATS_INC(ip.chkerr);
  131640:	e30c3a30 	movw	r3, #51760	; 0xca30
  131644:	e3403015 	movt	r3, #21
  131648:	e1d335b0 	ldrh	r3, [r3, #80]	; 0x50
  13164c:	e2833001 	add	r3, r3, #1
  131650:	e6ff2073 	uxth	r2, r3
  131654:	e30c3a30 	movw	r3, #51760	; 0xca30
  131658:	e3403015 	movt	r3, #21
  13165c:	e1c325b0 	strh	r2, [r3, #80]	; 0x50
      IP_STATS_INC(ip.drop);
  131660:	e30c3a30 	movw	r3, #51760	; 0xca30
  131664:	e3403015 	movt	r3, #21
  131668:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  13166c:	e2833001 	add	r3, r3, #1
  131670:	e6ff2073 	uxth	r2, r3
  131674:	e30c3a30 	movw	r3, #51760	; 0xca30
  131678:	e3403015 	movt	r3, #21
  13167c:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinhdrerrors);
  131680:	e30c3a30 	movw	r3, #51760	; 0xca30
  131684:	e3403015 	movt	r3, #21
  131688:	e593312c 	ldr	r3, [r3, #300]	; 0x12c
  13168c:	e2832001 	add	r2, r3, #1
  131690:	e30c3a30 	movw	r3, #51760	; 0xca30
  131694:	e3403015 	movt	r3, #21
  131698:	e583212c 	str	r2, [r3, #300]	; 0x12c
      return ERR_OK;
  13169c:	e3a03000 	mov	r3, #0
  1316a0:	ea000190 	b	131ce8 <ip4_input+0x8b4>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
  1316a4:	e51b3008 	ldr	r3, [fp, #-8]
  1316a8:	e5932010 	ldr	r2, [r3, #16]
  1316ac:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  1316b0:	e3403014 	movt	r3, #20
  1316b4:	e5832014 	str	r2, [r3, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
  1316b8:	e51b3008 	ldr	r3, [fp, #-8]
  1316bc:	e593200c 	ldr	r2, [r3, #12]
  1316c0:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  1316c4:	e3403014 	movt	r3, #20
  1316c8:	e5832010 	str	r2, [r3, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
  1316cc:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  1316d0:	e3403014 	movt	r3, #20
  1316d4:	e5933014 	ldr	r3, [r3, #20]
  1316d8:	e20330f0 	and	r3, r3, #240	; 0xf0
  1316dc:	e35300e0 	cmp	r3, #224	; 0xe0
  1316e0:	1a000020 	bne	131768 <ip4_input+0x334>
#if LWIP_IGMP
    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, ip4_current_dest_addr()))) {
  1316e4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1316e8:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1316ec:	e2033020 	and	r3, r3, #32
  1316f0:	e3530000 	cmp	r3, #0
  1316f4:	0a000018 	beq	13175c <ip4_input+0x328>
  1316f8:	e59f15f4 	ldr	r1, [pc, #1524]	; 131cf4 <ip4_input+0x8c0>
  1316fc:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
  131700:	ebfffa77 	bl	1300e4 <igmp_lookfor_group>
  131704:	e1a03000 	mov	r3, r0
  131708:	e3530000 	cmp	r3, #0
  13170c:	0a000012 	beq	13175c <ip4_input+0x328>
      /* IGMP snooping switches need 0.0.0.0 to be allowed as source address (RFC 4541) */
      ip4_addr_t allsystems;
      IP4_ADDR(&allsystems, 224, 0, 0, 1);
  131710:	e3a030e0 	mov	r3, #224	; 0xe0
  131714:	e3403100 	movt	r3, #256	; 0x100
  131718:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
      if (ip4_addr_cmp(ip4_current_dest_addr(), &allsystems) &&
  13171c:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  131720:	e3403014 	movt	r3, #20
  131724:	e5932014 	ldr	r2, [r3, #20]
  131728:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  13172c:	e1520003 	cmp	r2, r3
  131730:	1a000006 	bne	131750 <ip4_input+0x31c>
          ip4_addr_isany(ip4_current_src_addr())) {
  131734:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  131738:	e3403014 	movt	r3, #20
  13173c:	e5933010 	ldr	r3, [r3, #16]
      if (ip4_addr_cmp(ip4_current_dest_addr(), &allsystems) &&
  131740:	e3530000 	cmp	r3, #0
  131744:	1a000001 	bne	131750 <ip4_input+0x31c>
        check_ip_src = 0;
  131748:	e3a03000 	mov	r3, #0
  13174c:	e50b3010 	str	r3, [fp, #-16]
      }
      netif = inp;
  131750:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  131754:	e50b300c 	str	r3, [fp, #-12]
    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, ip4_current_dest_addr()))) {
  131758:	ea000040 	b	131860 <ip4_input+0x42c>
    } else {
      netif = NULL;
  13175c:	e3a03000 	mov	r3, #0
  131760:	e50b300c 	str	r3, [fp, #-12]
  131764:	ea00003d 	b	131860 <ip4_input+0x42c>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
  131768:	e3a03001 	mov	r3, #1
  13176c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    netif = inp;
  131770:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  131774:	e50b300c 	str	r3, [fp, #-12]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
  131778:	e51b300c 	ldr	r3, [fp, #-12]
  13177c:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  131780:	e2033001 	and	r3, r3, #1
  131784:	e6ef3073 	uxtb	r3, r3
  131788:	e3530000 	cmp	r3, #0
  13178c:	0a00001c 	beq	131804 <ip4_input+0x3d0>
  131790:	e51b300c 	ldr	r3, [fp, #-12]
  131794:	e2833004 	add	r3, r3, #4
  131798:	e5933000 	ldr	r3, [r3]
  13179c:	e3530000 	cmp	r3, #0
  1317a0:	0a000017 	beq	131804 <ip4_input+0x3d0>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
  1317a4:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  1317a8:	e3403014 	movt	r3, #20
  1317ac:	e5932014 	ldr	r2, [r3, #20]
  1317b0:	e51b300c 	ldr	r3, [fp, #-12]
  1317b4:	e2833004 	add	r3, r3, #4
  1317b8:	e5933000 	ldr	r3, [r3]
  1317bc:	e1520003 	cmp	r2, r3
  1317c0:	0a000026 	beq	131860 <ip4_input+0x42c>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
  1317c4:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  1317c8:	e3403014 	movt	r3, #20
  1317cc:	e5933014 	ldr	r3, [r3, #20]
  1317d0:	e51b100c 	ldr	r1, [fp, #-12]
  1317d4:	e1a00003 	mov	r0, r3
  1317d8:	eb00034c 	bl	132510 <ip4_addr_isbroadcast_u32>
  1317dc:	e1a03000 	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
  1317e0:	e3530000 	cmp	r3, #0
  1317e4:	1a00001d 	bne	131860 <ip4_input+0x42c>
#if LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF
            || (ip4_addr_get_u32(ip4_current_dest_addr()) == PP_HTONL(IPADDR_LOOPBACK))
  1317e8:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  1317ec:	e3403014 	movt	r3, #20
  1317f0:	e5932014 	ldr	r2, [r3, #20]
  1317f4:	e3a0307f 	mov	r3, #127	; 0x7f
  1317f8:	e3403100 	movt	r3, #256	; 0x100
  1317fc:	e1520003 	cmp	r2, r3
  131800:	0a000016 	beq	131860 <ip4_input+0x42c>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
  131804:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131808:	e3530000 	cmp	r3, #0
  13180c:	0a000006 	beq	13182c <ip4_input+0x3f8>
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
          netif = NULL;
          break;
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
  131810:	e3a03000 	mov	r3, #0
  131814:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        netif = netif_list;
  131818:	e30c3a24 	movw	r3, #51748	; 0xca24
  13181c:	e3403015 	movt	r3, #21
  131820:	e5933000 	ldr	r3, [r3]
  131824:	e50b300c 	str	r3, [fp, #-12]
  131828:	ea000002 	b	131838 <ip4_input+0x404>
      } else {
        netif = netif->next;
  13182c:	e51b300c 	ldr	r3, [fp, #-12]
  131830:	e5933000 	ldr	r3, [r3]
  131834:	e50b300c 	str	r3, [fp, #-12]
      }
      if (netif == inp) {
  131838:	e51b200c 	ldr	r2, [fp, #-12]
  13183c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  131840:	e1520003 	cmp	r2, r3
  131844:	1a000002 	bne	131854 <ip4_input+0x420>
        netif = netif->next;
  131848:	e51b300c 	ldr	r3, [fp, #-12]
  13184c:	e5933000 	ldr	r3, [r3]
  131850:	e50b300c 	str	r3, [fp, #-12]
      }
    } while (netif != NULL);
  131854:	e51b300c 	ldr	r3, [fp, #-12]
  131858:	e3530000 	cmp	r3, #0
  13185c:	1affffc5 	bne	131778 <ip4_input+0x344>
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
  131860:	e51b300c 	ldr	r3, [fp, #-12]
  131864:	e3530000 	cmp	r3, #0
  131868:	1a000010 	bne	1318b0 <ip4_input+0x47c>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
  13186c:	e51b3008 	ldr	r3, [fp, #-8]
  131870:	e5d33009 	ldrb	r3, [r3, #9]
  131874:	e3530011 	cmp	r3, #17
  131878:	1a00000c 	bne	1318b0 <ip4_input+0x47c>
      struct udp_hdr *udphdr = (struct udp_hdr *)((u8_t *)iphdr + iphdr_hlen);
  13187c:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  131880:	e51b2008 	ldr	r2, [fp, #-8]
  131884:	e0823003 	add	r3, r2, r3
  131888:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
        lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
  13188c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  131890:	e1d330b2 	ldrh	r3, [r3, #2]
  131894:	e6ff3073 	uxth	r3, r3
  131898:	e3530b11 	cmp	r3, #17408	; 0x4400
  13189c:	1a000003 	bne	1318b0 <ip4_input+0x47c>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
  1318a0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1318a4:	e50b300c 	str	r3, [fp, #-12]
        check_ip_src = 0;
  1318a8:	e3a03000 	mov	r3, #0
  1318ac:	e50b3010 	str	r3, [fp, #-16]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
  1318b0:	e51b3010 	ldr	r3, [fp, #-16]
  1318b4:	e3530000 	cmp	r3, #0
  1318b8:	0a00002d 	beq	131974 <ip4_input+0x540>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
  1318bc:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  1318c0:	e3403014 	movt	r3, #20
  1318c4:	e5933010 	ldr	r3, [r3, #16]
  1318c8:	e3530000 	cmp	r3, #0
  1318cc:	0a000028 	beq	131974 <ip4_input+0x540>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
  1318d0:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  1318d4:	e3403014 	movt	r3, #20
  1318d8:	e5933010 	ldr	r3, [r3, #16]
  1318dc:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  1318e0:	e1a00003 	mov	r0, r3
  1318e4:	eb000309 	bl	132510 <ip4_addr_isbroadcast_u32>
  1318e8:	e1a03000 	mov	r3, r0
  1318ec:	e3530000 	cmp	r3, #0
  1318f0:	1a000005 	bne	13190c <ip4_input+0x4d8>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
  1318f4:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  1318f8:	e3403014 	movt	r3, #20
  1318fc:	e5933010 	ldr	r3, [r3, #16]
  131900:	e20330f0 	and	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
  131904:	e35300e0 	cmp	r3, #224	; 0xe0
  131908:	1a000019 	bne	131974 <ip4_input+0x540>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
  13190c:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131910:	ebffa566 	bl	11aeb0 <pbuf_free>
      IP_STATS_INC(ip.drop);
  131914:	e30c3a30 	movw	r3, #51760	; 0xca30
  131918:	e3403015 	movt	r3, #21
  13191c:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  131920:	e2833001 	add	r3, r3, #1
  131924:	e6ff2073 	uxth	r2, r3
  131928:	e30c3a30 	movw	r3, #51760	; 0xca30
  13192c:	e3403015 	movt	r3, #21
  131930:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
  131934:	e30c3a30 	movw	r3, #51760	; 0xca30
  131938:	e3403015 	movt	r3, #21
  13193c:	e5933130 	ldr	r3, [r3, #304]	; 0x130
  131940:	e2832001 	add	r2, r3, #1
  131944:	e30c3a30 	movw	r3, #51760	; 0xca30
  131948:	e3403015 	movt	r3, #21
  13194c:	e5832130 	str	r2, [r3, #304]	; 0x130
      MIB2_STATS_INC(mib2.ipindiscards);
  131950:	e30c3a30 	movw	r3, #51760	; 0xca30
  131954:	e3403015 	movt	r3, #21
  131958:	e5933138 	ldr	r3, [r3, #312]	; 0x138
  13195c:	e2832001 	add	r2, r3, #1
  131960:	e30c3a30 	movw	r3, #51760	; 0xca30
  131964:	e3403015 	movt	r3, #21
  131968:	e5832138 	str	r2, [r3, #312]	; 0x138
      return ERR_OK;
  13196c:	e3a03000 	mov	r3, #0
  131970:	ea0000dc 	b	131ce8 <ip4_input+0x8b4>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
  131974:	e51b300c 	ldr	r3, [fp, #-12]
  131978:	e3530000 	cmp	r3, #0
  13197c:	1a000019 	bne	1319e8 <ip4_input+0x5b4>
      /* try to forward IP packet on (other) interfaces */
      ip4_forward(p, iphdr, inp);
    } else
#endif /* IP_FORWARD */
    {
      IP_STATS_INC(ip.drop);
  131980:	e30c3a30 	movw	r3, #51760	; 0xca30
  131984:	e3403015 	movt	r3, #21
  131988:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  13198c:	e2833001 	add	r3, r3, #1
  131990:	e6ff2073 	uxth	r2, r3
  131994:	e30c3a30 	movw	r3, #51760	; 0xca30
  131998:	e3403015 	movt	r3, #21
  13199c:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
  1319a0:	e30c3a30 	movw	r3, #51760	; 0xca30
  1319a4:	e3403015 	movt	r3, #21
  1319a8:	e5933130 	ldr	r3, [r3, #304]	; 0x130
  1319ac:	e2832001 	add	r2, r3, #1
  1319b0:	e30c3a30 	movw	r3, #51760	; 0xca30
  1319b4:	e3403015 	movt	r3, #21
  1319b8:	e5832130 	str	r2, [r3, #304]	; 0x130
      MIB2_STATS_INC(mib2.ipindiscards);
  1319bc:	e30c3a30 	movw	r3, #51760	; 0xca30
  1319c0:	e3403015 	movt	r3, #21
  1319c4:	e5933138 	ldr	r3, [r3, #312]	; 0x138
  1319c8:	e2832001 	add	r2, r3, #1
  1319cc:	e30c3a30 	movw	r3, #51760	; 0xca30
  1319d0:	e3403015 	movt	r3, #21
  1319d4:	e5832138 	str	r2, [r3, #312]	; 0x138
    }
    pbuf_free(p);
  1319d8:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1319dc:	ebffa533 	bl	11aeb0 <pbuf_free>
    return ERR_OK;
  1319e0:	e3a03000 	mov	r3, #0
  1319e4:	ea0000bf 	b	131ce8 <ip4_input+0x8b4>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
  1319e8:	e51b3008 	ldr	r3, [fp, #-8]
  1319ec:	e1d330b6 	ldrh	r3, [r3, #6]
  1319f0:	e6ff3073 	uxth	r3, r3
  1319f4:	e1a02003 	mov	r2, r3
  1319f8:	e30f3f3f 	movw	r3, #65343	; 0xff3f
  1319fc:	e0033002 	and	r3, r3, r2
  131a00:	e3530000 	cmp	r3, #0
  131a04:	0a00000a 	beq	131a34 <ip4_input+0x600>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
  131a08:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131a0c:	eb000778 	bl	1337f4 <ip4_reass>
  131a10:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
    /* packet not fully reassembled yet? */
    if (p == NULL) {
  131a14:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  131a18:	e3530000 	cmp	r3, #0
  131a1c:	1a000001 	bne	131a28 <ip4_input+0x5f4>
      return ERR_OK;
  131a20:	e3a03000 	mov	r3, #0
  131a24:	ea0000af 	b	131ce8 <ip4_input+0x8b4>
    }
    iphdr = (struct ip_hdr *)p->payload;
  131a28:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  131a2c:	e5933004 	ldr	r3, [r3, #4]
  131a30:	e50b3008 	str	r3, [fp, #-8]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
  131a34:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  131a38:	e3403014 	movt	r3, #20
  131a3c:	e51b200c 	ldr	r2, [fp, #-12]
  131a40:	e5832000 	str	r2, [r3]
  ip_data.current_input_netif = inp;
  131a44:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  131a48:	e3403014 	movt	r3, #20
  131a4c:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  131a50:	e5832004 	str	r2, [r3, #4]
  ip_data.current_ip4_header = iphdr;
  131a54:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  131a58:	e3403014 	movt	r3, #20
  131a5c:	e51b2008 	ldr	r2, [fp, #-8]
  131a60:	e5832008 	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
  131a64:	e51b3008 	ldr	r3, [fp, #-8]
  131a68:	e5d33000 	ldrb	r3, [r3]
  131a6c:	e6ff3073 	uxth	r3, r3
  131a70:	e203300f 	and	r3, r3, #15
  131a74:	e6ff3073 	uxth	r3, r3
  131a78:	e1a03103 	lsl	r3, r3, #2
  131a7c:	e6ff2073 	uxth	r2, r3
  131a80:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  131a84:	e3403014 	movt	r3, #20
  131a88:	e1c320bc 	strh	r2, [r3, #12]

#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
  131a8c:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  131a90:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131a94:	ebffa9cf 	bl	11c1d8 <raw_input>
  131a98:	e1a03000 	mov	r3, r0
  131a9c:	e3530000 	cmp	r3, #0
  131aa0:	1a000076 	bne	131c80 <ip4_input+0x84c>
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
  131aa4:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  131aa8:	e2633000 	rsb	r3, r3, #0
  131aac:	e6ff3073 	uxth	r3, r3
  131ab0:	e6bf3073 	sxth	r3, r3
  131ab4:	e1a01003 	mov	r1, r3
  131ab8:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131abc:	ebffa4dd 	bl	11ae38 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
  131ac0:	e51b3008 	ldr	r3, [fp, #-8]
  131ac4:	e5d33009 	ldrb	r3, [r3, #9]
  131ac8:	e2433001 	sub	r3, r3, #1
  131acc:	e3530010 	cmp	r3, #16
  131ad0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  131ad4:	ea000036 	b	131bb4 <ip4_input+0x780>
  131ad8:	00131b74 	.word	0x00131b74
  131adc:	00131ba0 	.word	0x00131ba0
  131ae0:	00131bb4 	.word	0x00131bb4
  131ae4:	00131bb4 	.word	0x00131bb4
  131ae8:	00131bb4 	.word	0x00131bb4
  131aec:	00131b48 	.word	0x00131b48
  131af0:	00131bb4 	.word	0x00131bb4
  131af4:	00131bb4 	.word	0x00131bb4
  131af8:	00131bb4 	.word	0x00131bb4
  131afc:	00131bb4 	.word	0x00131bb4
  131b00:	00131bb4 	.word	0x00131bb4
  131b04:	00131bb4 	.word	0x00131bb4
  131b08:	00131bb4 	.word	0x00131bb4
  131b0c:	00131bb4 	.word	0x00131bb4
  131b10:	00131bb4 	.word	0x00131bb4
  131b14:	00131bb4 	.word	0x00131bb4
  131b18:	00131b1c 	.word	0x00131b1c
#if LWIP_UDP
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
  131b1c:	e30c3a30 	movw	r3, #51760	; 0xca30
  131b20:	e3403015 	movt	r3, #21
  131b24:	e593313c 	ldr	r3, [r3, #316]	; 0x13c
  131b28:	e2832001 	add	r2, r3, #1
  131b2c:	e30c3a30 	movw	r3, #51760	; 0xca30
  131b30:	e3403015 	movt	r3, #21
  131b34:	e583213c 	str	r2, [r3, #316]	; 0x13c
      udp_input(p, inp);
  131b38:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  131b3c:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131b40:	ebffd80c 	bl	127b78 <udp_input>
      break;
  131b44:	ea00004e 	b	131c84 <ip4_input+0x850>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
  131b48:	e30c3a30 	movw	r3, #51760	; 0xca30
  131b4c:	e3403015 	movt	r3, #21
  131b50:	e593313c 	ldr	r3, [r3, #316]	; 0x13c
  131b54:	e2832001 	add	r2, r3, #1
  131b58:	e30c3a30 	movw	r3, #51760	; 0xca30
  131b5c:	e3403015 	movt	r3, #21
  131b60:	e583213c 	str	r2, [r3, #316]	; 0x13c
      tcp_input(p, inp);
  131b64:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  131b68:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131b6c:	ebffb9c8 	bl	120294 <tcp_input>
      break;
  131b70:	ea000043 	b	131c84 <ip4_input+0x850>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
  131b74:	e30c3a30 	movw	r3, #51760	; 0xca30
  131b78:	e3403015 	movt	r3, #21
  131b7c:	e593313c 	ldr	r3, [r3, #316]	; 0x13c
  131b80:	e2832001 	add	r2, r3, #1
  131b84:	e30c3a30 	movw	r3, #51760	; 0xca30
  131b88:	e3403015 	movt	r3, #21
  131b8c:	e583213c 	str	r2, [r3, #316]	; 0x13c
      icmp_input(p, inp);
  131b90:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  131b94:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131b98:	ebfff665 	bl	12f534 <icmp_input>
      break;
  131b9c:	ea000038 	b	131c84 <ip4_input+0x850>
#endif /* LWIP_ICMP */
#if LWIP_IGMP
    case IP_PROTO_IGMP:
      igmp_input(p, inp, ip4_current_dest_addr());
  131ba0:	e59f214c 	ldr	r2, [pc, #332]	; 131cf4 <ip4_input+0x8c0>
  131ba4:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  131ba8:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131bac:	ebfff9ed 	bl	130368 <igmp_input>
      break;
  131bb0:	ea000033 	b	131c84 <ip4_input+0x850>
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
  131bb4:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  131bb8:	e3403014 	movt	r3, #20
  131bbc:	e5933014 	ldr	r3, [r3, #20]
  131bc0:	e51b100c 	ldr	r1, [fp, #-12]
  131bc4:	e1a00003 	mov	r0, r3
  131bc8:	eb000250 	bl	132510 <ip4_addr_isbroadcast_u32>
  131bcc:	e1a03000 	mov	r3, r0
  131bd0:	e3530000 	cmp	r3, #0
  131bd4:	1a00000f 	bne	131c18 <ip4_input+0x7e4>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
  131bd8:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  131bdc:	e3403014 	movt	r3, #20
  131be0:	e5933014 	ldr	r3, [r3, #20]
  131be4:	e20330f0 	and	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
  131be8:	e35300e0 	cmp	r3, #224	; 0xe0
  131bec:	0a000009 	beq	131c18 <ip4_input+0x7e4>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
  131bf0:	e15b31f6 	ldrsh	r3, [fp, #-22]	; 0xffffffea
  131bf4:	e1a01003 	mov	r1, r3
  131bf8:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131bfc:	ebffa49c 	bl	11ae74 <pbuf_header_force>
        p->payload = iphdr;
  131c00:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  131c04:	e51b2008 	ldr	r2, [fp, #-8]
  131c08:	e5832004 	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
  131c0c:	e3a01002 	mov	r1, #2
  131c10:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131c14:	ebfff81c 	bl	12fc8c <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
  131c18:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131c1c:	ebffa4a3 	bl	11aeb0 <pbuf_free>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", (u16_t)IPH_PROTO(iphdr)));

      IP_STATS_INC(ip.proterr);
  131c20:	e30c3a30 	movw	r3, #51760	; 0xca30
  131c24:	e3403015 	movt	r3, #21
  131c28:	e1d335b8 	ldrh	r3, [r3, #88]	; 0x58
  131c2c:	e2833001 	add	r3, r3, #1
  131c30:	e6ff2073 	uxth	r2, r3
  131c34:	e30c3a30 	movw	r3, #51760	; 0xca30
  131c38:	e3403015 	movt	r3, #21
  131c3c:	e1c325b8 	strh	r2, [r3, #88]	; 0x58
      IP_STATS_INC(ip.drop);
  131c40:	e30c3a30 	movw	r3, #51760	; 0xca30
  131c44:	e3403015 	movt	r3, #21
  131c48:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  131c4c:	e2833001 	add	r3, r3, #1
  131c50:	e6ff2073 	uxth	r2, r3
  131c54:	e30c3a30 	movw	r3, #51760	; 0xca30
  131c58:	e3403015 	movt	r3, #21
  131c5c:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinunknownprotos);
  131c60:	e30c3a30 	movw	r3, #51760	; 0xca30
  131c64:	e3403015 	movt	r3, #21
  131c68:	e5933134 	ldr	r3, [r3, #308]	; 0x134
  131c6c:	e2832001 	add	r2, r3, #1
  131c70:	e30c3a30 	movw	r3, #51760	; 0xca30
  131c74:	e3403015 	movt	r3, #21
  131c78:	e5832134 	str	r2, [r3, #308]	; 0x134
  131c7c:	ea000000 	b	131c84 <ip4_input+0x850>
    }
  }
  131c80:	e320f000 	nop	{0}

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
  131c84:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  131c88:	e3403014 	movt	r3, #20
  131c8c:	e3a02000 	mov	r2, #0
  131c90:	e5832000 	str	r2, [r3]
  ip_data.current_input_netif = NULL;
  131c94:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  131c98:	e3403014 	movt	r3, #20
  131c9c:	e3a02000 	mov	r2, #0
  131ca0:	e5832004 	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
  131ca4:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  131ca8:	e3403014 	movt	r3, #20
  131cac:	e3a02000 	mov	r2, #0
  131cb0:	e5832008 	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
  131cb4:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  131cb8:	e3403014 	movt	r3, #20
  131cbc:	e3a02000 	mov	r2, #0
  131cc0:	e1c320bc 	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
  131cc4:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  131cc8:	e3403014 	movt	r3, #20
  131ccc:	e3a02000 	mov	r2, #0
  131cd0:	e5832010 	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
  131cd4:	e30f35f8 	movw	r3, #62968	; 0xf5f8
  131cd8:	e3403014 	movt	r3, #20
  131cdc:	e3a02000 	mov	r2, #0
  131ce0:	e5832014 	str	r2, [r3, #20]

  return ERR_OK;
  131ce4:	e3a03000 	mov	r3, #0
}
  131ce8:	e1a00003 	mov	r0, r3
  131cec:	e24bd004 	sub	sp, fp, #4
  131cf0:	e8bd8800 	pop	{fp, pc}
  131cf4:	0014f60c 	.word	0x0014f60c

00131cf8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
  131cf8:	e92d4800 	push	{fp, lr}
  131cfc:	e28db004 	add	fp, sp, #4
  131d00:	e24dd028 	sub	sp, sp, #40	; 0x28
  131d04:	e50b0008 	str	r0, [fp, #-8]
  131d08:	e50b100c 	str	r1, [fp, #-12]
  131d0c:	e50b2010 	str	r2, [fp, #-16]
  131d10:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
#if IP_OPTIONS_SEND
  return ip4_output_if_opt(p, src, dest, ttl, tos, proto, netif, NULL, 0);
  131d14:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  131d18:	e3a03000 	mov	r3, #0
  131d1c:	e58d3010 	str	r3, [sp, #16]
  131d20:	e3a03000 	mov	r3, #0
  131d24:	e58d300c 	str	r3, [sp, #12]
  131d28:	e59b300c 	ldr	r3, [fp, #12]
  131d2c:	e58d3008 	str	r3, [sp, #8]
  131d30:	e5db3008 	ldrb	r3, [fp, #8]
  131d34:	e58d3004 	str	r3, [sp, #4]
  131d38:	e5db3004 	ldrb	r3, [fp, #4]
  131d3c:	e58d3000 	str	r3, [sp]
  131d40:	e1a03002 	mov	r3, r2
  131d44:	e51b2010 	ldr	r2, [fp, #-16]
  131d48:	e51b100c 	ldr	r1, [fp, #-12]
  131d4c:	e51b0008 	ldr	r0, [fp, #-8]
  131d50:	eb000003 	bl	131d64 <ip4_output_if_opt>
  131d54:	e1a03000 	mov	r3, r0
}
  131d58:	e1a00003 	mov	r0, r3
  131d5c:	e24bd004 	sub	sp, fp, #4
  131d60:	e8bd8800 	pop	{fp, pc}

00131d64 <ip4_output_if_opt>:
 */
err_t
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
  131d64:	e92d4800 	push	{fp, lr}
  131d68:	e28db004 	add	fp, sp, #4
  131d6c:	e24dd030 	sub	sp, sp, #48	; 0x30
  131d70:	e50b0010 	str	r0, [fp, #-16]
  131d74:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  131d78:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  131d7c:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
  131d80:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131d84:	e50b3008 	str	r3, [fp, #-8]
  if (dest != LWIP_IP_HDRINCL) {
  131d88:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  131d8c:	e3530000 	cmp	r3, #0
  131d90:	0a000009 	beq	131dbc <ip4_output_if_opt+0x58>
    if (ip4_addr_isany(src)) {
  131d94:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131d98:	e3530000 	cmp	r3, #0
  131d9c:	0a000003 	beq	131db0 <ip4_output_if_opt+0x4c>
  131da0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131da4:	e5933000 	ldr	r3, [r3]
  131da8:	e3530000 	cmp	r3, #0
  131dac:	1a000002 	bne	131dbc <ip4_output_if_opt+0x58>
      src_used = netif_ip4_addr(netif);
  131db0:	e59b300c 	ldr	r3, [fp, #12]
  131db4:	e2833004 	add	r3, r3, #4
  131db8:	e50b3008 	str	r3, [fp, #-8]
    }
  }

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
  131dbc:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  131dc0:	e1db31b4 	ldrh	r3, [fp, #20]
  131dc4:	e58d3010 	str	r3, [sp, #16]
  131dc8:	e59b3010 	ldr	r3, [fp, #16]
  131dcc:	e58d300c 	str	r3, [sp, #12]
  131dd0:	e59b300c 	ldr	r3, [fp, #12]
  131dd4:	e58d3008 	str	r3, [sp, #8]
  131dd8:	e5db3008 	ldrb	r3, [fp, #8]
  131ddc:	e58d3004 	str	r3, [sp, #4]
  131de0:	e5db3004 	ldrb	r3, [fp, #4]
  131de4:	e58d3000 	str	r3, [sp]
  131de8:	e1a03002 	mov	r3, r2
  131dec:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  131df0:	e51b1008 	ldr	r1, [fp, #-8]
  131df4:	e51b0010 	ldr	r0, [fp, #-16]
  131df8:	eb00001e 	bl	131e78 <ip4_output_if_opt_src>
  131dfc:	e1a03000 	mov	r3, r0
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
#endif /* IP_OPTIONS_SEND */
}
  131e00:	e1a00003 	mov	r0, r3
  131e04:	e24bd004 	sub	sp, fp, #4
  131e08:	e8bd8800 	pop	{fp, pc}

00131e0c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
  131e0c:	e92d4800 	push	{fp, lr}
  131e10:	e28db004 	add	fp, sp, #4
  131e14:	e24dd028 	sub	sp, sp, #40	; 0x28
  131e18:	e50b0008 	str	r0, [fp, #-8]
  131e1c:	e50b100c 	str	r1, [fp, #-12]
  131e20:	e50b2010 	str	r2, [fp, #-16]
  131e24:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src, dest, ttl, tos, proto, netif, NULL, 0);
  131e28:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  131e2c:	e3a03000 	mov	r3, #0
  131e30:	e58d3010 	str	r3, [sp, #16]
  131e34:	e3a03000 	mov	r3, #0
  131e38:	e58d300c 	str	r3, [sp, #12]
  131e3c:	e59b300c 	ldr	r3, [fp, #12]
  131e40:	e58d3008 	str	r3, [sp, #8]
  131e44:	e5db3008 	ldrb	r3, [fp, #8]
  131e48:	e58d3004 	str	r3, [sp, #4]
  131e4c:	e5db3004 	ldrb	r3, [fp, #4]
  131e50:	e58d3000 	str	r3, [sp]
  131e54:	e1a03002 	mov	r3, r2
  131e58:	e51b2010 	ldr	r2, [fp, #-16]
  131e5c:	e51b100c 	ldr	r1, [fp, #-12]
  131e60:	e51b0008 	ldr	r0, [fp, #-8]
  131e64:	eb000003 	bl	131e78 <ip4_output_if_opt_src>
  131e68:	e1a03000 	mov	r3, r0
}
  131e6c:	e1a00003 	mov	r0, r3
  131e70:	e24bd004 	sub	sp, fp, #4
  131e74:	e8bd8800 	pop	{fp, pc}

00131e78 <ip4_output_if_opt_src>:
 */
err_t
ip4_output_if_opt_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
  131e78:	e92d4800 	push	{fp, lr}
  131e7c:	e28db004 	add	fp, sp, #4
  131e80:	e24dd028 	sub	sp, sp, #40	; 0x28
  131e84:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  131e88:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  131e8c:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  131e90:	e54b3029 	strb	r3, [fp, #-41]	; 0xffffffd7
#endif /* IP_OPTIONS_SEND */
  struct ip_hdr *iphdr;
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
  131e94:	e3a03000 	mov	r3, #0
  131e98:	e50b3008 	str	r3, [fp, #-8]
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
  131e9c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  131ea0:	e1d330be 	ldrh	r3, [r3, #14]
  131ea4:	e3530001 	cmp	r3, #1
  131ea8:	0a000006 	beq	131ec8 <ip4_output_if_opt_src+0x50>
  131eac:	e309089c 	movw	r0, #39068	; 0x989c
  131eb0:	e3400014 	movt	r0, #20
  131eb4:	ebff4496 	bl	103114 <rt_kprintf>
  131eb8:	e3001333 	movw	r1, #819	; 0x333
  131ebc:	e30908a8 	movw	r0, #39080	; 0x98a8
  131ec0:	e3400014 	movt	r0, #20
  131ec4:	ebff6489 	bl	10b0f0 <sys_arch_assert>

  MIB2_STATS_INC(mib2.ipoutrequests);
  131ec8:	e30c3a30 	movw	r3, #51760	; 0xca30
  131ecc:	e3403015 	movt	r3, #21
  131ed0:	e5933140 	ldr	r3, [r3, #320]	; 0x140
  131ed4:	e2832001 	add	r2, r3, #1
  131ed8:	e30c3a30 	movw	r3, #51760	; 0xca30
  131edc:	e3403015 	movt	r3, #21
  131ee0:	e5832140 	str	r2, [r3, #320]	; 0x140

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
  131ee4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  131ee8:	e3530000 	cmp	r3, #0
  131eec:	0a000112 	beq	13233c <ip4_output_if_opt_src+0x4c4>
    u16_t ip_hlen = IP_HLEN;
  131ef0:	e3a03014 	mov	r3, #20
  131ef4:	e14b30ba 	strh	r3, [fp, #-10]
#if IP_OPTIONS_SEND
    u16_t optlen_aligned = 0;
  131ef8:	e3a03000 	mov	r3, #0
  131efc:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
    if (optlen != 0) {
  131f00:	e1db31b4 	ldrh	r3, [fp, #20]
  131f04:	e3530000 	cmp	r3, #0
  131f08:	0a00004b 	beq	13203c <ip4_output_if_opt_src+0x1c4>
#if CHECKSUM_GEN_IP_INLINE
      int i;
#endif /* CHECKSUM_GEN_IP_INLINE */
      /* round up to a multiple of 4 */
      optlen_aligned = ((optlen + 3) & ~3);
  131f0c:	e1db31b4 	ldrh	r3, [fp, #20]
  131f10:	e2833003 	add	r3, r3, #3
  131f14:	e6ff3073 	uxth	r3, r3
  131f18:	e3c33003 	bic	r3, r3, #3
  131f1c:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
      ip_hlen += optlen_aligned;
  131f20:	e15b20ba 	ldrh	r2, [fp, #-10]
  131f24:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  131f28:	e0823003 	add	r3, r2, r3
  131f2c:	e14b30ba 	strh	r3, [fp, #-10]
      /* First write in the IP options */
      if (pbuf_header(p, optlen_aligned)) {
  131f30:	e15b31f6 	ldrsh	r3, [fp, #-22]	; 0xffffffea
  131f34:	e1a01003 	mov	r1, r3
  131f38:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  131f3c:	ebffa3bd 	bl	11ae38 <pbuf_header>
  131f40:	e1a03000 	mov	r3, r0
  131f44:	e3530000 	cmp	r3, #0
  131f48:	0a000010 	beq	131f90 <ip4_output_if_opt_src+0x118>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output_if_opt: not enough room for IP options in pbuf\n"));
        IP_STATS_INC(ip.err);
  131f4c:	e30c3a30 	movw	r3, #51760	; 0xca30
  131f50:	e3403015 	movt	r3, #21
  131f54:	e1d335bc 	ldrh	r3, [r3, #92]	; 0x5c
  131f58:	e2833001 	add	r3, r3, #1
  131f5c:	e6ff2073 	uxth	r2, r3
  131f60:	e30c3a30 	movw	r3, #51760	; 0xca30
  131f64:	e3403015 	movt	r3, #21
  131f68:	e1c325bc 	strh	r2, [r3, #92]	; 0x5c
        MIB2_STATS_INC(mib2.ipoutdiscards);
  131f6c:	e30c3a30 	movw	r3, #51760	; 0xca30
  131f70:	e3403015 	movt	r3, #21
  131f74:	e5933144 	ldr	r3, [r3, #324]	; 0x144
  131f78:	e2832001 	add	r2, r3, #1
  131f7c:	e30c3a30 	movw	r3, #51760	; 0xca30
  131f80:	e3403015 	movt	r3, #21
  131f84:	e5832144 	str	r2, [r3, #324]	; 0x144
        return ERR_BUF;
  131f88:	e3e03001 	mvn	r3, #1
  131f8c:	ea00012a 	b	13243c <ip4_output_if_opt_src+0x5c4>
      }
      MEMCPY(p->payload, ip_options, optlen);
  131f90:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  131f94:	e5933004 	ldr	r3, [r3, #4]
  131f98:	e1db21b4 	ldrh	r2, [fp, #20]
  131f9c:	e59b1010 	ldr	r1, [fp, #16]
  131fa0:	e1a00003 	mov	r0, r3
  131fa4:	eb003b7a 	bl	140d94 <memcpy>
      if (optlen < optlen_aligned) {
  131fa8:	e1db21b4 	ldrh	r2, [fp, #20]
  131fac:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  131fb0:	e1520003 	cmp	r2, r3
  131fb4:	2a000009 	bcs	131fe0 <ip4_output_if_opt_src+0x168>
        /* zero the remaining bytes */
        memset(((char*)p->payload) + optlen, 0, optlen_aligned - optlen);
  131fb8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  131fbc:	e5932004 	ldr	r2, [r3, #4]
  131fc0:	e1db31b4 	ldrh	r3, [fp, #20]
  131fc4:	e0820003 	add	r0, r2, r3
  131fc8:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  131fcc:	e1db31b4 	ldrh	r3, [fp, #20]
  131fd0:	e0423003 	sub	r3, r2, r3
  131fd4:	e1a02003 	mov	r2, r3
  131fd8:	e3a01000 	mov	r1, #0
  131fdc:	eb003ca4 	bl	141274 <memset>
      }
#if CHECKSUM_GEN_IP_INLINE
      for (i = 0; i < optlen_aligned/2; i++) {
  131fe0:	e3a03000 	mov	r3, #0
  131fe4:	e50b3010 	str	r3, [fp, #-16]
  131fe8:	ea00000c 	b	132020 <ip4_output_if_opt_src+0x1a8>
        chk_sum += ((u16_t*)p->payload)[i];
  131fec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  131ff0:	e5932004 	ldr	r2, [r3, #4]
  131ff4:	e51b3010 	ldr	r3, [fp, #-16]
  131ff8:	e1a03083 	lsl	r3, r3, #1
  131ffc:	e0823003 	add	r3, r2, r3
  132000:	e1d330b0 	ldrh	r3, [r3]
  132004:	e1a02003 	mov	r2, r3
  132008:	e51b3008 	ldr	r3, [fp, #-8]
  13200c:	e0833002 	add	r3, r3, r2
  132010:	e50b3008 	str	r3, [fp, #-8]
      for (i = 0; i < optlen_aligned/2; i++) {
  132014:	e51b3010 	ldr	r3, [fp, #-16]
  132018:	e2833001 	add	r3, r3, #1
  13201c:	e50b3010 	str	r3, [fp, #-16]
  132020:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  132024:	e1a030a3 	lsr	r3, r3, #1
  132028:	e6ff3073 	uxth	r3, r3
  13202c:	e1a02003 	mov	r2, r3
  132030:	e51b3010 	ldr	r3, [fp, #-16]
  132034:	e1530002 	cmp	r3, r2
  132038:	baffffeb 	blt	131fec <ip4_output_if_opt_src+0x174>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
  13203c:	e3a01014 	mov	r1, #20
  132040:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  132044:	ebffa37b 	bl	11ae38 <pbuf_header>
  132048:	e1a03000 	mov	r3, r0
  13204c:	e3530000 	cmp	r3, #0
  132050:	0a000010 	beq	132098 <ip4_output_if_opt_src+0x220>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
  132054:	e30c3a30 	movw	r3, #51760	; 0xca30
  132058:	e3403015 	movt	r3, #21
  13205c:	e1d335bc 	ldrh	r3, [r3, #92]	; 0x5c
  132060:	e2833001 	add	r3, r3, #1
  132064:	e6ff2073 	uxth	r2, r3
  132068:	e30c3a30 	movw	r3, #51760	; 0xca30
  13206c:	e3403015 	movt	r3, #21
  132070:	e1c325bc 	strh	r2, [r3, #92]	; 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
  132074:	e30c3a30 	movw	r3, #51760	; 0xca30
  132078:	e3403015 	movt	r3, #21
  13207c:	e5933144 	ldr	r3, [r3, #324]	; 0x144
  132080:	e2832001 	add	r2, r3, #1
  132084:	e30c3a30 	movw	r3, #51760	; 0xca30
  132088:	e3403015 	movt	r3, #21
  13208c:	e5832144 	str	r2, [r3, #324]	; 0x144
      return ERR_BUF;
  132090:	e3e03001 	mvn	r3, #1
  132094:	ea0000e8 	b	13243c <ip4_output_if_opt_src+0x5c4>
    }

    iphdr = (struct ip_hdr *)p->payload;
  132098:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  13209c:	e5933004 	ldr	r3, [r3, #4]
  1320a0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
  1320a4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1320a8:	e1d330ba 	ldrh	r3, [r3, #10]
  1320ac:	e3530013 	cmp	r3, #19
  1320b0:	8a000006 	bhi	1320d0 <ip4_output_if_opt_src+0x258>
  1320b4:	e30908d8 	movw	r0, #39128	; 0x98d8
  1320b8:	e3400014 	movt	r0, #20
  1320bc:	ebff4414 	bl	103114 <rt_kprintf>
  1320c0:	e3001361 	movw	r1, #865	; 0x361
  1320c4:	e30908a8 	movw	r0, #39080	; 0x98a8
  1320c8:	e3400014 	movt	r0, #20
  1320cc:	ebff6407 	bl	10b0f0 <sys_arch_assert>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
  1320d0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1320d4:	e55b2029 	ldrb	r2, [fp, #-41]	; 0xffffffd7
  1320d8:	e5c32008 	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
  1320dc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1320e0:	e5db2008 	ldrb	r2, [fp, #8]
  1320e4:	e5c32009 	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
  1320e8:	e5db2008 	ldrb	r2, [fp, #8]
  1320ec:	e55b3029 	ldrb	r3, [fp, #-41]	; 0xffffffd7
  1320f0:	e1a03403 	lsl	r3, r3, #8
  1320f4:	e1823003 	orr	r3, r2, r3
  1320f8:	e1a03403 	lsl	r3, r3, #8
  1320fc:	e6ff2073 	uxth	r2, r3
  132100:	e5db1008 	ldrb	r1, [fp, #8]
  132104:	e55b3029 	ldrb	r3, [fp, #-41]	; 0xffffffd7
  132108:	e1a03403 	lsl	r3, r3, #8
  13210c:	e1813003 	orr	r3, r1, r3
  132110:	e1a03423 	lsr	r3, r3, #8
  132114:	e6ef3073 	uxtb	r3, r3
  132118:	e1823003 	orr	r3, r2, r3
  13211c:	e51b2008 	ldr	r2, [fp, #-8]
  132120:	e0823003 	add	r3, r2, r3
  132124:	e50b3008 	str	r3, [fp, #-8]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
  132128:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  13212c:	e5932000 	ldr	r2, [r3]
  132130:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132134:	e5832010 	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
  132138:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13213c:	e5933010 	ldr	r3, [r3, #16]
  132140:	e6ff3073 	uxth	r3, r3
  132144:	e51b2008 	ldr	r2, [fp, #-8]
  132148:	e0823003 	add	r3, r2, r3
  13214c:	e50b3008 	str	r3, [fp, #-8]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
  132150:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132154:	e5933010 	ldr	r3, [r3, #16]
  132158:	e1a03823 	lsr	r3, r3, #16
  13215c:	e51b2008 	ldr	r2, [fp, #-8]
  132160:	e0823003 	add	r3, r2, r3
  132164:	e50b3008 	str	r3, [fp, #-8]
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
  132168:	e15b30ba 	ldrh	r3, [fp, #-10]
  13216c:	e1a03123 	lsr	r3, r3, #2
  132170:	e6ff3073 	uxth	r3, r3
  132174:	e6ef3073 	uxtb	r3, r3
  132178:	e3833040 	orr	r3, r3, #64	; 0x40
  13217c:	e6ef2073 	uxtb	r2, r3
  132180:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132184:	e5c32000 	strb	r2, [r3]
    IPH_TOS_SET(iphdr, tos);
  132188:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13218c:	e5db2004 	ldrb	r2, [fp, #4]
  132190:	e5c32001 	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
  132194:	e5db2004 	ldrb	r2, [fp, #4]
  132198:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13219c:	e5d33000 	ldrb	r3, [r3]
  1321a0:	e1a03403 	lsl	r3, r3, #8
  1321a4:	e1823003 	orr	r3, r2, r3
  1321a8:	e1a03403 	lsl	r3, r3, #8
  1321ac:	e6ff2073 	uxth	r2, r3
  1321b0:	e5db1004 	ldrb	r1, [fp, #4]
  1321b4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1321b8:	e5d33000 	ldrb	r3, [r3]
  1321bc:	e1a03403 	lsl	r3, r3, #8
  1321c0:	e1813003 	orr	r3, r1, r3
  1321c4:	e1a03423 	lsr	r3, r3, #8
  1321c8:	e6ef3073 	uxtb	r3, r3
  1321cc:	e1823003 	orr	r3, r2, r3
  1321d0:	e51b2008 	ldr	r2, [fp, #-8]
  1321d4:	e0823003 	add	r3, r2, r3
  1321d8:	e50b3008 	str	r3, [fp, #-8]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
  1321dc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1321e0:	e1d330b8 	ldrh	r3, [r3, #8]
  1321e4:	e1a00003 	mov	r0, r3
  1321e8:	ebff90f9 	bl	1165d4 <lwip_htons>
  1321ec:	e1a03000 	mov	r3, r0
  1321f0:	e1a02003 	mov	r2, r3
  1321f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1321f8:	e1c320b2 	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
  1321fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132200:	e1d330b2 	ldrh	r3, [r3, #2]
  132204:	e6ff3073 	uxth	r3, r3
  132208:	e1a02003 	mov	r2, r3
  13220c:	e51b3008 	ldr	r3, [fp, #-8]
  132210:	e0833002 	add	r3, r3, r2
  132214:	e50b3008 	str	r3, [fp, #-8]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
  132218:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13221c:	e3a02000 	mov	r2, #0
  132220:	e5c32006 	strb	r2, [r3, #6]
  132224:	e3a02000 	mov	r2, #0
  132228:	e5c32007 	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
  13222c:	e30e3be0 	movw	r3, #60384	; 0xebe0
  132230:	e3403014 	movt	r3, #20
  132234:	e1d330b0 	ldrh	r3, [r3]
  132238:	e1a00003 	mov	r0, r3
  13223c:	ebff90e4 	bl	1165d4 <lwip_htons>
  132240:	e1a03000 	mov	r3, r0
  132244:	e1a02003 	mov	r2, r3
  132248:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13224c:	e1c320b4 	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
  132250:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132254:	e1d330b4 	ldrh	r3, [r3, #4]
  132258:	e6ff3073 	uxth	r3, r3
  13225c:	e1a02003 	mov	r2, r3
  132260:	e51b3008 	ldr	r3, [fp, #-8]
  132264:	e0833002 	add	r3, r3, r2
  132268:	e50b3008 	str	r3, [fp, #-8]
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
  13226c:	e30e3be0 	movw	r3, #60384	; 0xebe0
  132270:	e3403014 	movt	r3, #20
  132274:	e1d330b0 	ldrh	r3, [r3]
  132278:	e2833001 	add	r3, r3, #1
  13227c:	e6ff2073 	uxth	r2, r3
  132280:	e30e3be0 	movw	r3, #60384	; 0xebe0
  132284:	e3403014 	movt	r3, #20
  132288:	e1c320b0 	strh	r2, [r3]

    if (src == NULL) {
  13228c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  132290:	e3530000 	cmp	r3, #0
  132294:	1a000005 	bne	1322b0 <ip4_output_if_opt_src+0x438>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
  132298:	e3093908 	movw	r3, #39176	; 0x9908
  13229c:	e3403014 	movt	r3, #20
  1322a0:	e5932000 	ldr	r2, [r3]
  1322a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1322a8:	e583200c 	str	r2, [r3, #12]
  1322ac:	ea000003 	b	1322c0 <ip4_output_if_opt_src+0x448>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
  1322b0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1322b4:	e5932000 	ldr	r2, [r3]
  1322b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1322bc:	e583200c 	str	r2, [r3, #12]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
  1322c0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1322c4:	e593300c 	ldr	r3, [r3, #12]
  1322c8:	e6ff3073 	uxth	r3, r3
  1322cc:	e51b2008 	ldr	r2, [fp, #-8]
  1322d0:	e0823003 	add	r3, r2, r3
  1322d4:	e50b3008 	str	r3, [fp, #-8]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
  1322d8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1322dc:	e593300c 	ldr	r3, [r3, #12]
  1322e0:	e1a03823 	lsr	r3, r3, #16
  1322e4:	e51b2008 	ldr	r2, [fp, #-8]
  1322e8:	e0823003 	add	r3, r2, r3
  1322ec:	e50b3008 	str	r3, [fp, #-8]
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
  1322f0:	e51b3008 	ldr	r3, [fp, #-8]
  1322f4:	e1a02823 	lsr	r2, r3, #16
  1322f8:	e51b3008 	ldr	r3, [fp, #-8]
  1322fc:	e6ff3073 	uxth	r3, r3
  132300:	e0823003 	add	r3, r2, r3
  132304:	e50b3008 	str	r3, [fp, #-8]
    chk_sum = (chk_sum >> 16) + chk_sum;
  132308:	e51b3008 	ldr	r3, [fp, #-8]
  13230c:	e1a03823 	lsr	r3, r3, #16
  132310:	e51b2008 	ldr	r2, [fp, #-8]
  132314:	e0823003 	add	r3, r2, r3
  132318:	e50b3008 	str	r3, [fp, #-8]
    chk_sum = ~chk_sum;
  13231c:	e51b3008 	ldr	r3, [fp, #-8]
  132320:	e1e03003 	mvn	r3, r3
  132324:	e50b3008 	str	r3, [fp, #-8]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
  132328:	e51b3008 	ldr	r3, [fp, #-8]
  13232c:	e6ff2073 	uxth	r2, r3
  132330:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132334:	e1c320ba 	strh	r2, [r3, #10]
  132338:	ea000007 	b	13235c <ip4_output_if_opt_src+0x4e4>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
  13233c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132340:	e5933004 	ldr	r3, [r3, #4]
  132344:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    ip4_addr_copy(dest_addr, iphdr->dest);
  132348:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13234c:	e5933010 	ldr	r3, [r3, #16]
  132350:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    dest = &dest_addr;
  132354:	e24b301c 	sub	r3, fp, #28
  132358:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  }

  IP_STATS_INC(ip.xmit);
  13235c:	e30c3a30 	movw	r3, #51760	; 0xca30
  132360:	e3403015 	movt	r3, #21
  132364:	e1d334b8 	ldrh	r3, [r3, #72]	; 0x48
  132368:	e2833001 	add	r3, r3, #1
  13236c:	e6ff2073 	uxth	r2, r3
  132370:	e30c3a30 	movw	r3, #51760	; 0xca30
  132374:	e3403015 	movt	r3, #21
  132378:	e1c324b8 	strh	r2, [r3, #72]	; 0x48

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: %c%c%"U16_F"\n", netif->name[0], netif->name[1], (u16_t)netif->num));
  ip4_debug_print(p);

#if ENABLE_LOOPBACK
  if (ip4_addr_cmp(dest, netif_ip4_addr(netif))
  13237c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132380:	e5932000 	ldr	r2, [r3]
  132384:	e59b300c 	ldr	r3, [fp, #12]
  132388:	e2833004 	add	r3, r3, #4
  13238c:	e5933000 	ldr	r3, [r3]
  132390:	e1520003 	cmp	r2, r3
  132394:	0a000004 	beq	1323ac <ip4_output_if_opt_src+0x534>
#if !LWIP_HAVE_LOOPIF
      || ip4_addr_isloopback(dest)
  132398:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  13239c:	e5933000 	ldr	r3, [r3]
  1323a0:	e6ef3073 	uxtb	r3, r3
  1323a4:	e353007f 	cmp	r3, #127	; 0x7f
  1323a8:	1a000004 	bne	1323c0 <ip4_output_if_opt_src+0x548>
#endif /* !LWIP_HAVE_LOOPIF */
      ) {
    /* Packet to self, enqueue it for loopback */
    LWIP_DEBUGF(IP_DEBUG, ("netif_loop_output()"));
    return netif_loop_output(netif, p);
  1323ac:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  1323b0:	e59b000c 	ldr	r0, [fp, #12]
  1323b4:	ebff9e75 	bl	119d90 <netif_loop_output>
  1323b8:	e1a03000 	mov	r3, r0
  1323bc:	ea00001e 	b	13243c <ip4_output_if_opt_src+0x5c4>
  }
#if LWIP_MULTICAST_TX_OPTIONS
  if ((p->flags & PBUF_FLAG_MCASTLOOP) != 0) {
  1323c0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1323c4:	e5d3300d 	ldrb	r3, [r3, #13]
  1323c8:	e2033004 	and	r3, r3, #4
  1323cc:	e3530000 	cmp	r3, #0
  1323d0:	0a000002 	beq	1323e0 <ip4_output_if_opt_src+0x568>
    netif_loop_output(netif, p);
  1323d4:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  1323d8:	e59b000c 	ldr	r0, [fp, #12]
  1323dc:	ebff9e6b 	bl	119d90 <netif_loop_output>
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
  1323e0:	e59b300c 	ldr	r3, [fp, #12]
  1323e4:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  1323e8:	e3530000 	cmp	r3, #0
  1323ec:	0a00000b 	beq	132420 <ip4_output_if_opt_src+0x5a8>
  1323f0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1323f4:	e1d320b8 	ldrh	r2, [r3, #8]
  1323f8:	e59b300c 	ldr	r3, [fp, #12]
  1323fc:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  132400:	e1520003 	cmp	r2, r3
  132404:	9a000005 	bls	132420 <ip4_output_if_opt_src+0x5a8>
    return ip4_frag(p, netif, dest);
  132408:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  13240c:	e59b100c 	ldr	r1, [fp, #12]
  132410:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  132414:	eb00068e 	bl	133e54 <ip4_frag>
  132418:	e1a03000 	mov	r3, r0
  13241c:	ea000006 	b	13243c <ip4_output_if_opt_src+0x5c4>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
  132420:	e59b300c 	ldr	r3, [fp, #12]
  132424:	e5933014 	ldr	r3, [r3, #20]
  132428:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  13242c:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  132430:	e59b000c 	ldr	r0, [fp, #12]
  132434:	e12fff33 	blx	r3
  132438:	e1a03000 	mov	r3, r0
}
  13243c:	e1a00003 	mov	r0, r3
  132440:	e24bd004 	sub	sp, fp, #4
  132444:	e8bd8800 	pop	{fp, pc}

00132448 <ip4_output>:
 *         see ip_output_if() for more return values
 */
err_t
ip4_output(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
          u8_t ttl, u8_t tos, u8_t proto)
{
  132448:	e92d4800 	push	{fp, lr}
  13244c:	e28db004 	add	fp, sp, #4
  132450:	e24dd028 	sub	sp, sp, #40	; 0x28
  132454:	e50b0010 	str	r0, [fp, #-16]
  132458:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  13245c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  132460:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  struct netif *netif;

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
  132464:	e51b3010 	ldr	r3, [fp, #-16]
  132468:	e1d330be 	ldrh	r3, [r3, #14]
  13246c:	e3530001 	cmp	r3, #1
  132470:	0a000006 	beq	132490 <ip4_output+0x48>
  132474:	e309089c 	movw	r0, #39068	; 0x989c
  132478:	e3400014 	movt	r0, #20
  13247c:	ebff4324 	bl	103114 <rt_kprintf>
  132480:	e30013db 	movw	r1, #987	; 0x3db
  132484:	e30908a8 	movw	r0, #39080	; 0x98a8
  132488:	e3400014 	movt	r0, #20
  13248c:	ebff6317 	bl	10b0f0 <sys_arch_assert>

  if ((netif = ip4_route_src(dest, src)) == NULL) {
  132490:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  132494:	ebfffb3e 	bl	131194 <ip4_route>
  132498:	e50b0008 	str	r0, [fp, #-8]
  13249c:	e51b3008 	ldr	r3, [fp, #-8]
  1324a0:	e3530000 	cmp	r3, #0
  1324a4:	1a000009 	bne	1324d0 <ip4_output+0x88>
    LWIP_DEBUGF(IP_DEBUG, ("ip4_output: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
  1324a8:	e30c3a30 	movw	r3, #51760	; 0xca30
  1324ac:	e3403015 	movt	r3, #21
  1324b0:	e1d335b6 	ldrh	r3, [r3, #86]	; 0x56
  1324b4:	e2833001 	add	r3, r3, #1
  1324b8:	e6ff2073 	uxth	r2, r3
  1324bc:	e30c3a30 	movw	r3, #51760	; 0xca30
  1324c0:	e3403015 	movt	r3, #21
  1324c4:	e1c325b6 	strh	r2, [r3, #86]	; 0x56
    return ERR_RTE;
  1324c8:	e3e03003 	mvn	r3, #3
  1324cc:	ea00000c 	b	132504 <ip4_output+0xbc>
  }

  return ip4_output_if(p, src, dest, ttl, tos, proto, netif);
  1324d0:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  1324d4:	e51b3008 	ldr	r3, [fp, #-8]
  1324d8:	e58d3008 	str	r3, [sp, #8]
  1324dc:	e5db3008 	ldrb	r3, [fp, #8]
  1324e0:	e58d3004 	str	r3, [sp, #4]
  1324e4:	e5db3004 	ldrb	r3, [fp, #4]
  1324e8:	e58d3000 	str	r3, [sp]
  1324ec:	e1a03002 	mov	r3, r2
  1324f0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1324f4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1324f8:	e51b0010 	ldr	r0, [fp, #-16]
  1324fc:	ebfffdfd 	bl	131cf8 <ip4_output_if>
  132500:	e1a03000 	mov	r3, r0
}
  132504:	e1a00003 	mov	r0, r3
  132508:	e24bd004 	sub	sp, fp, #4
  13250c:	e8bd8800 	pop	{fp, pc}

00132510 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
  132510:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  132514:	e28db000 	add	fp, sp, #0
  132518:	e24dd014 	sub	sp, sp, #20
  13251c:	e50b0010 	str	r0, [fp, #-16]
  132520:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
  132524:	e51b3010 	ldr	r3, [fp, #-16]
  132528:	e50b3008 	str	r3, [fp, #-8]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
  13252c:	e51b3010 	ldr	r3, [fp, #-16]
  132530:	e3730001 	cmn	r3, #1
  132534:	0a000002 	beq	132544 <ip4_addr_isbroadcast_u32+0x34>
  132538:	e51b3010 	ldr	r3, [fp, #-16]
  13253c:	e3530000 	cmp	r3, #0
  132540:	1a000001 	bne	13254c <ip4_addr_isbroadcast_u32+0x3c>
      (addr == IPADDR_ANY)) {
    return 1;
  132544:	e3a03001 	mov	r3, #1
  132548:	ea000028 	b	1325f0 <ip4_addr_isbroadcast_u32+0xe0>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
  13254c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132550:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  132554:	e2033002 	and	r3, r3, #2
  132558:	e3530000 	cmp	r3, #0
  13255c:	1a000001 	bne	132568 <ip4_addr_isbroadcast_u32+0x58>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  132560:	e3a03000 	mov	r3, #0
  132564:	ea000021 	b	1325f0 <ip4_addr_isbroadcast_u32+0xe0>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
  132568:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13256c:	e2833004 	add	r3, r3, #4
  132570:	e5933000 	ldr	r3, [r3]
  132574:	e51b2010 	ldr	r2, [fp, #-16]
  132578:	e1520003 	cmp	r2, r3
  13257c:	1a000001 	bne	132588 <ip4_addr_isbroadcast_u32+0x78>
    return 0;
  132580:	e3a03000 	mov	r3, #0
  132584:	ea000019 	b	1325f0 <ip4_addr_isbroadcast_u32+0xe0>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
  132588:	e51b2008 	ldr	r2, [fp, #-8]
  13258c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132590:	e2833004 	add	r3, r3, #4
  132594:	e5933000 	ldr	r3, [r3]
  132598:	e0222003 	eor	r2, r2, r3
  13259c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1325a0:	e2833008 	add	r3, r3, #8
  1325a4:	e5933000 	ldr	r3, [r3]
  1325a8:	e0033002 	and	r3, r3, r2
  1325ac:	e3530000 	cmp	r3, #0
  1325b0:	1a00000d 	bne	1325ec <ip4_addr_isbroadcast_u32+0xdc>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
  1325b4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1325b8:	e2833008 	add	r3, r3, #8
  1325bc:	e5933000 	ldr	r3, [r3]
  1325c0:	e1e02003 	mvn	r2, r3
  1325c4:	e51b3010 	ldr	r3, [fp, #-16]
  1325c8:	e0022003 	and	r2, r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
  1325cc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1325d0:	e2833008 	add	r3, r3, #8
  1325d4:	e5933000 	ldr	r3, [r3]
  1325d8:	e1e03003 	mvn	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
  1325dc:	e1520003 	cmp	r2, r3
  1325e0:	1a000001 	bne	1325ec <ip4_addr_isbroadcast_u32+0xdc>
    /* => network broadcast address */
    return 1;
  1325e4:	e3a03001 	mov	r3, #1
  1325e8:	ea000000 	b	1325f0 <ip4_addr_isbroadcast_u32+0xe0>
  } else {
    return 0;
  1325ec:	e3a03000 	mov	r3, #0
  }
}
  1325f0:	e1a00003 	mov	r0, r3
  1325f4:	e28bd000 	add	sp, fp, #0
  1325f8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1325fc:	e12fff1e 	bx	lr

00132600 <ip4_addr_netmask_valid>:
 * @param netmask the IPv4 netmask to check (in network byte order!)
 * @return 1 if the netmask is valid, 0 if it is not
 */
u8_t
ip4_addr_netmask_valid(u32_t netmask)
{
  132600:	e92d4800 	push	{fp, lr}
  132604:	e28db004 	add	fp, sp, #4
  132608:	e24dd010 	sub	sp, sp, #16
  13260c:	e50b0010 	str	r0, [fp, #-16]
  u32_t mask;
  u32_t nm_hostorder = lwip_htonl(netmask);
  132610:	e51b0010 	ldr	r0, [fp, #-16]
  132614:	ebff8ffa 	bl	116604 <lwip_htonl>
  132618:	e50b000c 	str	r0, [fp, #-12]

  /* first, check for the first zero */
  for (mask = 1UL << 31 ; mask != 0; mask >>= 1) {
  13261c:	e3a03102 	mov	r3, #-2147483648	; 0x80000000
  132620:	e50b3008 	str	r3, [fp, #-8]
  132624:	ea000007 	b	132648 <ip4_addr_netmask_valid+0x48>
    if ((nm_hostorder & mask) == 0) {
  132628:	e51b200c 	ldr	r2, [fp, #-12]
  13262c:	e51b3008 	ldr	r3, [fp, #-8]
  132630:	e0033002 	and	r3, r3, r2
  132634:	e3530000 	cmp	r3, #0
  132638:	0a000006 	beq	132658 <ip4_addr_netmask_valid+0x58>
  for (mask = 1UL << 31 ; mask != 0; mask >>= 1) {
  13263c:	e51b3008 	ldr	r3, [fp, #-8]
  132640:	e1a030a3 	lsr	r3, r3, #1
  132644:	e50b3008 	str	r3, [fp, #-8]
  132648:	e51b3008 	ldr	r3, [fp, #-8]
  13264c:	e3530000 	cmp	r3, #0
  132650:	1afffff4 	bne	132628 <ip4_addr_netmask_valid+0x28>
  132654:	ea00000b 	b	132688 <ip4_addr_netmask_valid+0x88>
      break;
  132658:	e320f000 	nop	{0}
    }
  }
  /* then check that there is no one */
  for (; mask != 0; mask >>= 1) {
  13265c:	ea000009 	b	132688 <ip4_addr_netmask_valid+0x88>
    if ((nm_hostorder & mask) != 0) {
  132660:	e51b200c 	ldr	r2, [fp, #-12]
  132664:	e51b3008 	ldr	r3, [fp, #-8]
  132668:	e0033002 	and	r3, r3, r2
  13266c:	e3530000 	cmp	r3, #0
  132670:	0a000001 	beq	13267c <ip4_addr_netmask_valid+0x7c>
      /* there is a one after the first zero -> invalid */
      return 0;
  132674:	e3a03000 	mov	r3, #0
  132678:	ea000006 	b	132698 <ip4_addr_netmask_valid+0x98>
  for (; mask != 0; mask >>= 1) {
  13267c:	e51b3008 	ldr	r3, [fp, #-8]
  132680:	e1a030a3 	lsr	r3, r3, #1
  132684:	e50b3008 	str	r3, [fp, #-8]
  132688:	e51b3008 	ldr	r3, [fp, #-8]
  13268c:	e3530000 	cmp	r3, #0
  132690:	1afffff2 	bne	132660 <ip4_addr_netmask_valid+0x60>
    }
  }
  /* no one after the first zero -> valid */
  return 1;
  132694:	e3a03001 	mov	r3, #1
}
  132698:	e1a00003 	mov	r0, r3
  13269c:	e24bd004 	sub	sp, fp, #4
  1326a0:	e8bd8800 	pop	{fp, pc}

001326a4 <ipaddr_addr>:
 * @param cp IP address in ascii representation (e.g. "127.0.0.1")
 * @return ip address in network order
 */
u32_t
ipaddr_addr(const char *cp)
{
  1326a4:	e92d4800 	push	{fp, lr}
  1326a8:	e28db004 	add	fp, sp, #4
  1326ac:	e24dd010 	sub	sp, sp, #16
  1326b0:	e50b0010 	str	r0, [fp, #-16]
  ip4_addr_t val;

  if (ip4addr_aton(cp, &val)) {
  1326b4:	e24b3008 	sub	r3, fp, #8
  1326b8:	e1a01003 	mov	r1, r3
  1326bc:	e51b0010 	ldr	r0, [fp, #-16]
  1326c0:	eb000008 	bl	1326e8 <ip4addr_aton>
  1326c4:	e1a03000 	mov	r3, r0
  1326c8:	e3530000 	cmp	r3, #0
  1326cc:	0a000001 	beq	1326d8 <ipaddr_addr+0x34>
    return ip4_addr_get_u32(&val);
  1326d0:	e51b3008 	ldr	r3, [fp, #-8]
  1326d4:	ea000000 	b	1326dc <ipaddr_addr+0x38>
  }
  return (IPADDR_NONE);
  1326d8:	e3e03000 	mvn	r3, #0
}
  1326dc:	e1a00003 	mov	r0, r3
  1326e0:	e24bd004 	sub	sp, fp, #4
  1326e4:	e8bd8800 	pop	{fp, pc}

001326e8 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
  1326e8:	e92d4800 	push	{fp, lr}
  1326ec:	e28db004 	add	fp, sp, #4
  1326f0:	e24dd028 	sub	sp, sp, #40	; 0x28
  1326f4:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  1326f8:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
  1326fc:	e24b3020 	sub	r3, fp, #32
  132700:	e50b3010 	str	r3, [fp, #-16]

  c = *cp;
  132704:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132708:	e5d33000 	ldrb	r3, [r3]
  13270c:	e54b300a 	strb	r3, [fp, #-10]
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!isdigit(c)) {
  132710:	e55b300a 	ldrb	r3, [fp, #-10]
  132714:	e353002f 	cmp	r3, #47	; 0x2f
  132718:	9a000002 	bls	132728 <ip4addr_aton+0x40>
  13271c:	e55b300a 	ldrb	r3, [fp, #-10]
  132720:	e3530039 	cmp	r3, #57	; 0x39
  132724:	9a000001 	bls	132730 <ip4addr_aton+0x48>
      return 0;
  132728:	e3a03000 	mov	r3, #0
  13272c:	ea0000ee 	b	132aec <ip4addr_aton+0x404>
    }
    val = 0;
  132730:	e3a03000 	mov	r3, #0
  132734:	e50b3008 	str	r3, [fp, #-8]
    base = 10;
  132738:	e3a0300a 	mov	r3, #10
  13273c:	e54b3009 	strb	r3, [fp, #-9]
    if (c == '0') {
  132740:	e55b300a 	ldrb	r3, [fp, #-10]
  132744:	e3530030 	cmp	r3, #48	; 0x30
  132748:	1a000016 	bne	1327a8 <ip4addr_aton+0xc0>
      c = *++cp;
  13274c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132750:	e2833001 	add	r3, r3, #1
  132754:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  132758:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  13275c:	e5d33000 	ldrb	r3, [r3]
  132760:	e54b300a 	strb	r3, [fp, #-10]
      if (c == 'x' || c == 'X') {
  132764:	e55b300a 	ldrb	r3, [fp, #-10]
  132768:	e3530078 	cmp	r3, #120	; 0x78
  13276c:	0a000002 	beq	13277c <ip4addr_aton+0x94>
  132770:	e55b300a 	ldrb	r3, [fp, #-10]
  132774:	e3530058 	cmp	r3, #88	; 0x58
  132778:	1a000008 	bne	1327a0 <ip4addr_aton+0xb8>
        base = 16;
  13277c:	e3a03010 	mov	r3, #16
  132780:	e54b3009 	strb	r3, [fp, #-9]
        c = *++cp;
  132784:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132788:	e2833001 	add	r3, r3, #1
  13278c:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  132790:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132794:	e5d33000 	ldrb	r3, [r3]
  132798:	e54b300a 	strb	r3, [fp, #-10]
  13279c:	ea000001 	b	1327a8 <ip4addr_aton+0xc0>
      } else {
        base = 8;
  1327a0:	e3a03008 	mov	r3, #8
  1327a4:	e54b3009 	strb	r3, [fp, #-9]
      }
    }
    for (;;) {
      if (isdigit(c)) {
  1327a8:	e55b300a 	ldrb	r3, [fp, #-10]
  1327ac:	e353002f 	cmp	r3, #47	; 0x2f
  1327b0:	9a000010 	bls	1327f8 <ip4addr_aton+0x110>
  1327b4:	e55b300a 	ldrb	r3, [fp, #-10]
  1327b8:	e3530039 	cmp	r3, #57	; 0x39
  1327bc:	8a00000d 	bhi	1327f8 <ip4addr_aton+0x110>
        val = (val * base) + (u32_t)(c - '0');
  1327c0:	e55b3009 	ldrb	r3, [fp, #-9]
  1327c4:	e51b2008 	ldr	r2, [fp, #-8]
  1327c8:	e0020392 	mul	r2, r2, r3
  1327cc:	e55b300a 	ldrb	r3, [fp, #-10]
  1327d0:	e0823003 	add	r3, r2, r3
  1327d4:	e2433030 	sub	r3, r3, #48	; 0x30
  1327d8:	e50b3008 	str	r3, [fp, #-8]
        c = *++cp;
  1327dc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1327e0:	e2833001 	add	r3, r3, #1
  1327e4:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  1327e8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1327ec:	e5d33000 	ldrb	r3, [r3]
  1327f0:	e54b300a 	strb	r3, [fp, #-10]
  1327f4:	ea00002a 	b	1328a4 <ip4addr_aton+0x1bc>
      } else if (base == 16 && isxdigit(c)) {
  1327f8:	e55b3009 	ldrb	r3, [fp, #-9]
  1327fc:	e3530010 	cmp	r3, #16
  132800:	1a000028 	bne	1328a8 <ip4addr_aton+0x1c0>
  132804:	e55b300a 	ldrb	r3, [fp, #-10]
  132808:	e353002f 	cmp	r3, #47	; 0x2f
  13280c:	9a000002 	bls	13281c <ip4addr_aton+0x134>
  132810:	e55b300a 	ldrb	r3, [fp, #-10]
  132814:	e3530039 	cmp	r3, #57	; 0x39
  132818:	9a00000b 	bls	13284c <ip4addr_aton+0x164>
  13281c:	e55b300a 	ldrb	r3, [fp, #-10]
  132820:	e3530060 	cmp	r3, #96	; 0x60
  132824:	9a000002 	bls	132834 <ip4addr_aton+0x14c>
  132828:	e55b300a 	ldrb	r3, [fp, #-10]
  13282c:	e3530066 	cmp	r3, #102	; 0x66
  132830:	9a000005 	bls	13284c <ip4addr_aton+0x164>
  132834:	e55b300a 	ldrb	r3, [fp, #-10]
  132838:	e3530040 	cmp	r3, #64	; 0x40
  13283c:	9a000019 	bls	1328a8 <ip4addr_aton+0x1c0>
  132840:	e55b300a 	ldrb	r3, [fp, #-10]
  132844:	e3530046 	cmp	r3, #70	; 0x46
  132848:	8a000016 	bhi	1328a8 <ip4addr_aton+0x1c0>
        val = (val << 4) | (u32_t)(c + 10 - (islower(c) ? 'a' : 'A'));
  13284c:	e51b3008 	ldr	r3, [fp, #-8]
  132850:	e1a03203 	lsl	r3, r3, #4
  132854:	e55b200a 	ldrb	r2, [fp, #-10]
  132858:	e282100a 	add	r1, r2, #10
  13285c:	e55b200a 	ldrb	r2, [fp, #-10]
  132860:	e3520060 	cmp	r2, #96	; 0x60
  132864:	9a000004 	bls	13287c <ip4addr_aton+0x194>
  132868:	e55b200a 	ldrb	r2, [fp, #-10]
  13286c:	e352007a 	cmp	r2, #122	; 0x7a
  132870:	8a000001 	bhi	13287c <ip4addr_aton+0x194>
  132874:	e3a02061 	mov	r2, #97	; 0x61
  132878:	ea000000 	b	132880 <ip4addr_aton+0x198>
  13287c:	e3a02041 	mov	r2, #65	; 0x41
  132880:	e0412002 	sub	r2, r1, r2
  132884:	e1833002 	orr	r3, r3, r2
  132888:	e50b3008 	str	r3, [fp, #-8]
        c = *++cp;
  13288c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132890:	e2833001 	add	r3, r3, #1
  132894:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  132898:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  13289c:	e5d33000 	ldrb	r3, [r3]
  1328a0:	e54b300a 	strb	r3, [fp, #-10]
      if (isdigit(c)) {
  1328a4:	eaffffbf 	b	1327a8 <ip4addr_aton+0xc0>
      } else {
        break;
      }
    }
    if (c == '.') {
  1328a8:	e55b300a 	ldrb	r3, [fp, #-10]
  1328ac:	e353002e 	cmp	r3, #46	; 0x2e
  1328b0:	1a000012 	bne	132900 <ip4addr_aton+0x218>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
  1328b4:	e24b3020 	sub	r3, fp, #32
  1328b8:	e283300c 	add	r3, r3, #12
  1328bc:	e51b2010 	ldr	r2, [fp, #-16]
  1328c0:	e1520003 	cmp	r2, r3
  1328c4:	3a000001 	bcc	1328d0 <ip4addr_aton+0x1e8>
        return 0;
  1328c8:	e3a03000 	mov	r3, #0
  1328cc:	ea000086 	b	132aec <ip4addr_aton+0x404>
      }
      *pp++ = val;
  1328d0:	e51b3010 	ldr	r3, [fp, #-16]
  1328d4:	e2832004 	add	r2, r3, #4
  1328d8:	e50b2010 	str	r2, [fp, #-16]
  1328dc:	e51b2008 	ldr	r2, [fp, #-8]
  1328e0:	e5832000 	str	r2, [r3]
      c = *++cp;
  1328e4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1328e8:	e2833001 	add	r3, r3, #1
  1328ec:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  1328f0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1328f4:	e5d33000 	ldrb	r3, [r3]
  1328f8:	e54b300a 	strb	r3, [fp, #-10]
    if (!isdigit(c)) {
  1328fc:	eaffff83 	b	132710 <ip4addr_aton+0x28>
    } else {
      break;
  132900:	e320f000 	nop	{0}
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !isspace(c)) {
  132904:	e55b300a 	ldrb	r3, [fp, #-10]
  132908:	e3530000 	cmp	r3, #0
  13290c:	0a000013 	beq	132960 <ip4addr_aton+0x278>
  132910:	e55b300a 	ldrb	r3, [fp, #-10]
  132914:	e3530020 	cmp	r3, #32
  132918:	0a000010 	beq	132960 <ip4addr_aton+0x278>
  13291c:	e55b300a 	ldrb	r3, [fp, #-10]
  132920:	e353000c 	cmp	r3, #12
  132924:	0a00000d 	beq	132960 <ip4addr_aton+0x278>
  132928:	e55b300a 	ldrb	r3, [fp, #-10]
  13292c:	e353000a 	cmp	r3, #10
  132930:	0a00000a 	beq	132960 <ip4addr_aton+0x278>
  132934:	e55b300a 	ldrb	r3, [fp, #-10]
  132938:	e353000d 	cmp	r3, #13
  13293c:	0a000007 	beq	132960 <ip4addr_aton+0x278>
  132940:	e55b300a 	ldrb	r3, [fp, #-10]
  132944:	e3530009 	cmp	r3, #9
  132948:	0a000004 	beq	132960 <ip4addr_aton+0x278>
  13294c:	e55b300a 	ldrb	r3, [fp, #-10]
  132950:	e353000b 	cmp	r3, #11
  132954:	0a000001 	beq	132960 <ip4addr_aton+0x278>
    return 0;
  132958:	e3a03000 	mov	r3, #0
  13295c:	ea000062 	b	132aec <ip4addr_aton+0x404>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
  132960:	e51b2010 	ldr	r2, [fp, #-16]
  132964:	e24b3020 	sub	r3, fp, #32
  132968:	e0423003 	sub	r3, r2, r3
  13296c:	e1a03143 	asr	r3, r3, #2
  132970:	e2833001 	add	r3, r3, #1
  132974:	e3530004 	cmp	r3, #4
  132978:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  13297c:	ea000048 	b	132aa4 <ip4addr_aton+0x3bc>
  132980:	00132994 	.word	0x00132994
  132984:	00132ac4 	.word	0x00132ac4
  132988:	0013299c 	.word	0x0013299c
  13298c:	001329dc 	.word	0x001329dc
  132990:	00132a34 	.word	0x00132a34

  case 0:
    return 0;       /* initial nondigit */
  132994:	e3a03000 	mov	r3, #0
  132998:	ea000053 	b	132aec <ip4addr_aton+0x404>

  case 1:             /* a -- 32 bits */
    break;

  case 2:             /* a.b -- 8.24 bits */
    if (val > 0xffffffUL) {
  13299c:	e51b3008 	ldr	r3, [fp, #-8]
  1329a0:	e3530401 	cmp	r3, #16777216	; 0x1000000
  1329a4:	3a000001 	bcc	1329b0 <ip4addr_aton+0x2c8>
      return 0;
  1329a8:	e3a03000 	mov	r3, #0
  1329ac:	ea00004e 	b	132aec <ip4addr_aton+0x404>
    }
    if (parts[0] > 0xff) {
  1329b0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1329b4:	e35300ff 	cmp	r3, #255	; 0xff
  1329b8:	9a000001 	bls	1329c4 <ip4addr_aton+0x2dc>
      return 0;
  1329bc:	e3a03000 	mov	r3, #0
  1329c0:	ea000049 	b	132aec <ip4addr_aton+0x404>
    }
    val |= parts[0] << 24;
  1329c4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1329c8:	e1a03c03 	lsl	r3, r3, #24
  1329cc:	e51b2008 	ldr	r2, [fp, #-8]
  1329d0:	e1823003 	orr	r3, r2, r3
  1329d4:	e50b3008 	str	r3, [fp, #-8]
    break;
  1329d8:	ea00003a 	b	132ac8 <ip4addr_aton+0x3e0>

  case 3:             /* a.b.c -- 8.8.16 bits */
    if (val > 0xffff) {
  1329dc:	e51b3008 	ldr	r3, [fp, #-8]
  1329e0:	e3530801 	cmp	r3, #65536	; 0x10000
  1329e4:	3a000001 	bcc	1329f0 <ip4addr_aton+0x308>
      return 0;
  1329e8:	e3a03000 	mov	r3, #0
  1329ec:	ea00003e 	b	132aec <ip4addr_aton+0x404>
    }
    if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
  1329f0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1329f4:	e35300ff 	cmp	r3, #255	; 0xff
  1329f8:	8a000002 	bhi	132a08 <ip4addr_aton+0x320>
  1329fc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  132a00:	e35300ff 	cmp	r3, #255	; 0xff
  132a04:	9a000001 	bls	132a10 <ip4addr_aton+0x328>
      return 0;
  132a08:	e3a03000 	mov	r3, #0
  132a0c:	ea000036 	b	132aec <ip4addr_aton+0x404>
    }
    val |= (parts[0] << 24) | (parts[1] << 16);
  132a10:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132a14:	e1a02c03 	lsl	r2, r3, #24
  132a18:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  132a1c:	e1a03803 	lsl	r3, r3, #16
  132a20:	e1823003 	orr	r3, r2, r3
  132a24:	e51b2008 	ldr	r2, [fp, #-8]
  132a28:	e1823003 	orr	r3, r2, r3
  132a2c:	e50b3008 	str	r3, [fp, #-8]
    break;
  132a30:	ea000024 	b	132ac8 <ip4addr_aton+0x3e0>

  case 4:             /* a.b.c.d -- 8.8.8.8 bits */
    if (val > 0xff) {
  132a34:	e51b3008 	ldr	r3, [fp, #-8]
  132a38:	e35300ff 	cmp	r3, #255	; 0xff
  132a3c:	9a000001 	bls	132a48 <ip4addr_aton+0x360>
      return 0;
  132a40:	e3a03000 	mov	r3, #0
  132a44:	ea000028 	b	132aec <ip4addr_aton+0x404>
    }
    if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
  132a48:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132a4c:	e35300ff 	cmp	r3, #255	; 0xff
  132a50:	8a000005 	bhi	132a6c <ip4addr_aton+0x384>
  132a54:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  132a58:	e35300ff 	cmp	r3, #255	; 0xff
  132a5c:	8a000002 	bhi	132a6c <ip4addr_aton+0x384>
  132a60:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  132a64:	e35300ff 	cmp	r3, #255	; 0xff
  132a68:	9a000001 	bls	132a74 <ip4addr_aton+0x38c>
      return 0;
  132a6c:	e3a03000 	mov	r3, #0
  132a70:	ea00001d 	b	132aec <ip4addr_aton+0x404>
    }
    val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
  132a74:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132a78:	e1a02c03 	lsl	r2, r3, #24
  132a7c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  132a80:	e1a03803 	lsl	r3, r3, #16
  132a84:	e1822003 	orr	r2, r2, r3
  132a88:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  132a8c:	e1a03403 	lsl	r3, r3, #8
  132a90:	e1823003 	orr	r3, r2, r3
  132a94:	e51b2008 	ldr	r2, [fp, #-8]
  132a98:	e1823003 	orr	r3, r2, r3
  132a9c:	e50b3008 	str	r3, [fp, #-8]
    break;
  132aa0:	ea000008 	b	132ac8 <ip4addr_aton+0x3e0>
  default:
    LWIP_ASSERT("unhandled", 0);
  132aa4:	e3090910 	movw	r0, #39184	; 0x9910
  132aa8:	e3400014 	movt	r0, #20
  132aac:	ebff4198 	bl	103114 <rt_kprintf>
  132ab0:	e3001103 	movw	r1, #259	; 0x103
  132ab4:	e309091c 	movw	r0, #39196	; 0x991c
  132ab8:	e3400014 	movt	r0, #20
  132abc:	ebff618b 	bl	10b0f0 <sys_arch_assert>
    break;
  132ac0:	ea000000 	b	132ac8 <ip4addr_aton+0x3e0>
    break;
  132ac4:	e320f000 	nop	{0}
  }
  if (addr) {
  132ac8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  132acc:	e3530000 	cmp	r3, #0
  132ad0:	0a000004 	beq	132ae8 <ip4addr_aton+0x400>
    ip4_addr_set_u32(addr, lwip_htonl(val));
  132ad4:	e51b0008 	ldr	r0, [fp, #-8]
  132ad8:	ebff8ec9 	bl	116604 <lwip_htonl>
  132adc:	e1a02000 	mov	r2, r0
  132ae0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  132ae4:	e5832000 	str	r2, [r3]
  }
  return 1;
  132ae8:	e3a03001 	mov	r3, #1
}
  132aec:	e1a00003 	mov	r0, r3
  132af0:	e24bd004 	sub	sp, fp, #4
  132af4:	e8bd8800 	pop	{fp, pc}

00132af8 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char*
ip4addr_ntoa(const ip4_addr_t *addr)
{
  132af8:	e92d4800 	push	{fp, lr}
  132afc:	e28db004 	add	fp, sp, #4
  132b00:	e24dd008 	sub	sp, sp, #8
  132b04:	e50b0008 	str	r0, [fp, #-8]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
  132b08:	e3a02010 	mov	r2, #16
  132b0c:	e30e1be8 	movw	r1, #60392	; 0xebe8
  132b10:	e3401014 	movt	r1, #20
  132b14:	e51b0008 	ldr	r0, [fp, #-8]
  132b18:	eb000003 	bl	132b2c <ip4addr_ntoa_r>
  132b1c:	e1a03000 	mov	r3, r0
}
  132b20:	e1a00003 	mov	r0, r3
  132b24:	e24bd004 	sub	sp, fp, #4
  132b28:	e8bd8800 	pop	{fp, pc}

00132b2c <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char*
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
  132b2c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  132b30:	e28db000 	add	fp, sp, #0
  132b34:	e24dd034 	sub	sp, sp, #52	; 0x34
  132b38:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  132b3c:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  132b40:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
  132b44:	e3a03000 	mov	r3, #0
  132b48:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  s_addr = ip4_addr_get_u32(addr);
  132b4c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132b50:	e5933000 	ldr	r3, [r3]
  132b54:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

  rp = buf;
  132b58:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  132b5c:	e50b3008 	str	r3, [fp, #-8]
  ap = (u8_t *)&s_addr;
  132b60:	e24b301c 	sub	r3, fp, #28
  132b64:	e50b300c 	str	r3, [fp, #-12]
  for (n = 0; n < 4; n++) {
  132b68:	e3a03000 	mov	r3, #0
  132b6c:	e54b300d 	strb	r3, [fp, #-13]
  132b70:	ea00004b 	b	132ca4 <ip4addr_ntoa_r+0x178>
    i = 0;
  132b74:	e3a03000 	mov	r3, #0
  132b78:	e54b300e 	strb	r3, [fp, #-14]
    do {
      rem = *ap % (u8_t)10;
  132b7c:	e51b300c 	ldr	r3, [fp, #-12]
  132b80:	e5d31000 	ldrb	r1, [r3]
  132b84:	e30c3ccd 	movw	r3, #52429	; 0xcccd
  132b88:	e34c3ccc 	movt	r3, #52428	; 0xcccc
  132b8c:	e0832391 	umull	r2, r3, r1, r3
  132b90:	e1a031a3 	lsr	r3, r3, #3
  132b94:	e3a0200a 	mov	r2, #10
  132b98:	e0030392 	mul	r3, r2, r3
  132b9c:	e0413003 	sub	r3, r1, r3
  132ba0:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
      *ap /= (u8_t)10;
  132ba4:	e51b300c 	ldr	r3, [fp, #-12]
  132ba8:	e5d32000 	ldrb	r2, [r3]
  132bac:	e30c3ccd 	movw	r3, #52429	; 0xcccd
  132bb0:	e34c3ccc 	movt	r3, #52428	; 0xcccc
  132bb4:	e0832392 	umull	r2, r3, r2, r3
  132bb8:	e1a031a3 	lsr	r3, r3, #3
  132bbc:	e6ef2073 	uxtb	r2, r3
  132bc0:	e51b300c 	ldr	r3, [fp, #-12]
  132bc4:	e5c32000 	strb	r2, [r3]
      inv[i++] = (char)('0' + rem);
  132bc8:	e55b300e 	ldrb	r3, [fp, #-14]
  132bcc:	e2832001 	add	r2, r3, #1
  132bd0:	e54b200e 	strb	r2, [fp, #-14]
  132bd4:	e1a01003 	mov	r1, r3
  132bd8:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  132bdc:	e2833030 	add	r3, r3, #48	; 0x30
  132be0:	e6ef2073 	uxtb	r2, r3
  132be4:	e24b3004 	sub	r3, fp, #4
  132be8:	e0833001 	add	r3, r3, r1
  132bec:	e543201c 	strb	r2, [r3, #-28]	; 0xffffffe4
    } while (*ap);
  132bf0:	e51b300c 	ldr	r3, [fp, #-12]
  132bf4:	e5d33000 	ldrb	r3, [r3]
  132bf8:	e3530000 	cmp	r3, #0
  132bfc:	1affffde 	bne	132b7c <ip4addr_ntoa_r+0x50>
    while (i--) {
  132c00:	ea00000f 	b	132c44 <ip4addr_ntoa_r+0x118>
      if (len++ >= buflen) {
  132c04:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132c08:	e2832001 	add	r2, r3, #1
  132c0c:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
  132c10:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  132c14:	e1520003 	cmp	r2, r3
  132c18:	ca000001 	bgt	132c24 <ip4addr_ntoa_r+0xf8>
        return NULL;
  132c1c:	e3a03000 	mov	r3, #0
  132c20:	ea000029 	b	132ccc <ip4addr_ntoa_r+0x1a0>
      }
      *rp++ = inv[i];
  132c24:	e55b200e 	ldrb	r2, [fp, #-14]
  132c28:	e51b3008 	ldr	r3, [fp, #-8]
  132c2c:	e2831001 	add	r1, r3, #1
  132c30:	e50b1008 	str	r1, [fp, #-8]
  132c34:	e24b1004 	sub	r1, fp, #4
  132c38:	e0812002 	add	r2, r1, r2
  132c3c:	e552201c 	ldrb	r2, [r2, #-28]	; 0xffffffe4
  132c40:	e5c32000 	strb	r2, [r3]
    while (i--) {
  132c44:	e55b300e 	ldrb	r3, [fp, #-14]
  132c48:	e2432001 	sub	r2, r3, #1
  132c4c:	e54b200e 	strb	r2, [fp, #-14]
  132c50:	e3530000 	cmp	r3, #0
  132c54:	1affffea 	bne	132c04 <ip4addr_ntoa_r+0xd8>
    }
    if (len++ >= buflen) {
  132c58:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132c5c:	e2832001 	add	r2, r3, #1
  132c60:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
  132c64:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  132c68:	e1520003 	cmp	r2, r3
  132c6c:	ca000001 	bgt	132c78 <ip4addr_ntoa_r+0x14c>
      return NULL;
  132c70:	e3a03000 	mov	r3, #0
  132c74:	ea000014 	b	132ccc <ip4addr_ntoa_r+0x1a0>
    }
    *rp++ = '.';
  132c78:	e51b3008 	ldr	r3, [fp, #-8]
  132c7c:	e2832001 	add	r2, r3, #1
  132c80:	e50b2008 	str	r2, [fp, #-8]
  132c84:	e3a0202e 	mov	r2, #46	; 0x2e
  132c88:	e5c32000 	strb	r2, [r3]
    ap++;
  132c8c:	e51b300c 	ldr	r3, [fp, #-12]
  132c90:	e2833001 	add	r3, r3, #1
  132c94:	e50b300c 	str	r3, [fp, #-12]
  for (n = 0; n < 4; n++) {
  132c98:	e55b300d 	ldrb	r3, [fp, #-13]
  132c9c:	e2833001 	add	r3, r3, #1
  132ca0:	e54b300d 	strb	r3, [fp, #-13]
  132ca4:	e55b300d 	ldrb	r3, [fp, #-13]
  132ca8:	e3530003 	cmp	r3, #3
  132cac:	9affffb0 	bls	132b74 <ip4addr_ntoa_r+0x48>
  }
  *--rp = 0;
  132cb0:	e51b3008 	ldr	r3, [fp, #-8]
  132cb4:	e2433001 	sub	r3, r3, #1
  132cb8:	e50b3008 	str	r3, [fp, #-8]
  132cbc:	e51b3008 	ldr	r3, [fp, #-8]
  132cc0:	e3a02000 	mov	r2, #0
  132cc4:	e5c32000 	strb	r2, [r3]
  return buf;
  132cc8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
}
  132ccc:	e1a00003 	mov	r0, r3
  132cd0:	e28bd000 	add	sp, fp, #0
  132cd4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  132cd8:	e12fff1e 	bx	lr

00132cdc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
  132cdc:	e92d4800 	push	{fp, lr}
  132ce0:	e28db004 	add	fp, sp, #4
  132ce4:	e24dd010 	sub	sp, sp, #16
  struct ip_reassdata *r, *prev = NULL;
  132ce8:	e3a03000 	mov	r3, #0
  132cec:	e50b300c 	str	r3, [fp, #-12]

  r = reassdatagrams;
  132cf0:	e30e3bf8 	movw	r3, #60408	; 0xebf8
  132cf4:	e3403014 	movt	r3, #20
  132cf8:	e5933000 	ldr	r3, [r3]
  132cfc:	e50b3008 	str	r3, [fp, #-8]
  while (r != NULL) {
  132d00:	ea000017 	b	132d64 <ip_reass_tmr+0x88>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
  132d04:	e51b3008 	ldr	r3, [fp, #-8]
  132d08:	e5d3301f 	ldrb	r3, [r3, #31]
  132d0c:	e3530000 	cmp	r3, #0
  132d10:	0a00000b 	beq	132d44 <ip_reass_tmr+0x68>
      r->timer--;
  132d14:	e51b3008 	ldr	r3, [fp, #-8]
  132d18:	e5d3301f 	ldrb	r3, [r3, #31]
  132d1c:	e2433001 	sub	r3, r3, #1
  132d20:	e6ef2073 	uxtb	r2, r3
  132d24:	e51b3008 	ldr	r3, [fp, #-8]
  132d28:	e5c3201f 	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
  132d2c:	e51b3008 	ldr	r3, [fp, #-8]
  132d30:	e50b300c 	str	r3, [fp, #-12]
      r = r->next;
  132d34:	e51b3008 	ldr	r3, [fp, #-8]
  132d38:	e5933000 	ldr	r3, [r3]
  132d3c:	e50b3008 	str	r3, [fp, #-8]
  132d40:	ea000007 	b	132d64 <ip_reass_tmr+0x88>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
  132d44:	e51b3008 	ldr	r3, [fp, #-8]
  132d48:	e50b3010 	str	r3, [fp, #-16]
      /* get the next pointer before freeing */
      r = r->next;
  132d4c:	e51b3008 	ldr	r3, [fp, #-8]
  132d50:	e5933000 	ldr	r3, [r3]
  132d54:	e50b3008 	str	r3, [fp, #-8]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
  132d58:	e51b100c 	ldr	r1, [fp, #-12]
  132d5c:	e51b0010 	ldr	r0, [fp, #-16]
  132d60:	eb000005 	bl	132d7c <ip_reass_free_complete_datagram>
  while (r != NULL) {
  132d64:	e51b3008 	ldr	r3, [fp, #-8]
  132d68:	e3530000 	cmp	r3, #0
  132d6c:	1affffe4 	bne	132d04 <ip_reass_tmr+0x28>
     }
   }
}
  132d70:	e320f000 	nop	{0}
  132d74:	e24bd004 	sub	sp, fp, #4
  132d78:	e8bd8800 	pop	{fp, pc}

00132d7c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
  132d7c:	e92d4800 	push	{fp, lr}
  132d80:	e28db004 	add	fp, sp, #4
  132d84:	e24dd020 	sub	sp, sp, #32
  132d88:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  132d8c:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  u16_t pbufs_freed = 0;
  132d90:	e3a03000 	mov	r3, #0
  132d94:	e14b30b6 	strh	r3, [fp, #-6]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
  132d98:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  132d9c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132da0:	e1520003 	cmp	r2, r3
  132da4:	1a000006 	bne	132dc4 <ip_reass_free_complete_datagram+0x48>
  132da8:	e3090954 	movw	r0, #39252	; 0x9954
  132dac:	e3400014 	movt	r0, #20
  132db0:	ebff40d7 	bl	103114 <rt_kprintf>
  132db4:	e3a010a7 	mov	r1, #167	; 0xa7
  132db8:	e3090960 	movw	r0, #39264	; 0x9960
  132dbc:	e3400014 	movt	r0, #20
  132dc0:	ebff60ca 	bl	10b0f0 <sys_arch_assert>
  if (prev != NULL) {
  132dc4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  132dc8:	e3530000 	cmp	r3, #0
  132dcc:	0a00000b 	beq	132e00 <ip_reass_free_complete_datagram+0x84>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
  132dd0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  132dd4:	e5933000 	ldr	r3, [r3]
  132dd8:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  132ddc:	e1520003 	cmp	r2, r3
  132de0:	0a000006 	beq	132e00 <ip_reass_free_complete_datagram+0x84>
  132de4:	e3090998 	movw	r0, #39320	; 0x9998
  132de8:	e3400014 	movt	r0, #20
  132dec:	ebff40c8 	bl	103114 <rt_kprintf>
  132df0:	e3a010a9 	mov	r1, #169	; 0xa9
  132df4:	e3090960 	movw	r0, #39264	; 0x9960
  132df8:	e3400014 	movt	r0, #20
  132dfc:	ebff60bb 	bl	10b0f0 <sys_arch_assert>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
  132e00:	e30c3a30 	movw	r3, #51760	; 0xca30
  132e04:	e3403015 	movt	r3, #21
  132e08:	e5933150 	ldr	r3, [r3, #336]	; 0x150
  132e0c:	e2832001 	add	r2, r3, #1
  132e10:	e30c3a30 	movw	r3, #51760	; 0xca30
  132e14:	e3403015 	movt	r3, #21
  132e18:	e5832150 	str	r2, [r3, #336]	; 0x150
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
  132e1c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132e20:	e5933004 	ldr	r3, [r3, #4]
  132e24:	e5933004 	ldr	r3, [r3, #4]
  132e28:	e50b3010 	str	r3, [fp, #-16]
  if (iprh->start == 0) {
  132e2c:	e51b3010 	ldr	r3, [fp, #-16]
  132e30:	e1d330b4 	ldrh	r3, [r3, #4]
  132e34:	e6ff3073 	uxth	r3, r3
  132e38:	e3530000 	cmp	r3, #0
  132e3c:	1a000026 	bne	132edc <ip_reass_free_complete_datagram+0x160>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
  132e40:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132e44:	e5933004 	ldr	r3, [r3, #4]
  132e48:	e50b300c 	str	r3, [fp, #-12]
    ipr->p = iprh->next_pbuf;
  132e4c:	e51b3010 	ldr	r3, [fp, #-16]
  132e50:	e5932000 	ldr	r2, [r3]
  132e54:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132e58:	e5832004 	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
  132e5c:	e51b300c 	ldr	r3, [fp, #-12]
  132e60:	e5930004 	ldr	r0, [r3, #4]
  132e64:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132e68:	e2833008 	add	r3, r3, #8
  132e6c:	e3a02014 	mov	r2, #20
  132e70:	e1a01003 	mov	r1, r3
  132e74:	eb0037c6 	bl	140d94 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
  132e78:	e3a01001 	mov	r1, #1
  132e7c:	e51b000c 	ldr	r0, [fp, #-12]
  132e80:	ebfff396 	bl	12fce0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
  132e84:	e51b000c 	ldr	r0, [fp, #-12]
  132e88:	ebffa08d 	bl	11b0c4 <pbuf_clen>
  132e8c:	e1a03000 	mov	r3, r0
  132e90:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
  132e94:	e15b20b6 	ldrh	r2, [fp, #-6]
  132e98:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  132e9c:	e0823003 	add	r3, r2, r3
  132ea0:	e3530801 	cmp	r3, #65536	; 0x10000
  132ea4:	ba000006 	blt	132ec4 <ip_reass_free_complete_datagram+0x148>
  132ea8:	e30909ac 	movw	r0, #39340	; 0x99ac
  132eac:	e3400014 	movt	r0, #20
  132eb0:	ebff4097 	bl	103114 <rt_kprintf>
  132eb4:	e3a010b8 	mov	r1, #184	; 0xb8
  132eb8:	e3090960 	movw	r0, #39264	; 0x9960
  132ebc:	e3400014 	movt	r0, #20
  132ec0:	ebff608a 	bl	10b0f0 <sys_arch_assert>
    pbufs_freed += clen;
  132ec4:	e15b20b6 	ldrh	r2, [fp, #-6]
  132ec8:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  132ecc:	e0823003 	add	r3, r2, r3
  132ed0:	e14b30b6 	strh	r3, [fp, #-6]
    pbuf_free(p);
  132ed4:	e51b000c 	ldr	r0, [fp, #-12]
  132ed8:	ebff9ff4 	bl	11aeb0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
  132edc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132ee0:	e5933004 	ldr	r3, [r3, #4]
  132ee4:	e50b300c 	str	r3, [fp, #-12]
  while (p != NULL) {
  132ee8:	ea00001d 	b	132f64 <ip_reass_free_complete_datagram+0x1e8>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
  132eec:	e51b300c 	ldr	r3, [fp, #-12]
  132ef0:	e5933004 	ldr	r3, [r3, #4]
  132ef4:	e50b3010 	str	r3, [fp, #-16]
    pcur = p;
  132ef8:	e51b300c 	ldr	r3, [fp, #-12]
  132efc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
  132f00:	e51b3010 	ldr	r3, [fp, #-16]
  132f04:	e5933000 	ldr	r3, [r3]
  132f08:	e50b300c 	str	r3, [fp, #-12]
    clen = pbuf_clen(pcur);
  132f0c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  132f10:	ebffa06b 	bl	11b0c4 <pbuf_clen>
  132f14:	e1a03000 	mov	r3, r0
  132f18:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
  132f1c:	e15b20b6 	ldrh	r2, [fp, #-6]
  132f20:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  132f24:	e0823003 	add	r3, r2, r3
  132f28:	e3530801 	cmp	r3, #65536	; 0x10000
  132f2c:	ba000006 	blt	132f4c <ip_reass_free_complete_datagram+0x1d0>
  132f30:	e30909ac 	movw	r0, #39340	; 0x99ac
  132f34:	e3400014 	movt	r0, #20
  132f38:	ebff4075 	bl	103114 <rt_kprintf>
  132f3c:	e3a010c8 	mov	r1, #200	; 0xc8
  132f40:	e3090960 	movw	r0, #39264	; 0x9960
  132f44:	e3400014 	movt	r0, #20
  132f48:	ebff6068 	bl	10b0f0 <sys_arch_assert>
    pbufs_freed += clen;
  132f4c:	e15b20b6 	ldrh	r2, [fp, #-6]
  132f50:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  132f54:	e0823003 	add	r3, r2, r3
  132f58:	e14b30b6 	strh	r3, [fp, #-6]
    pbuf_free(pcur);
  132f5c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  132f60:	ebff9fd2 	bl	11aeb0 <pbuf_free>
  while (p != NULL) {
  132f64:	e51b300c 	ldr	r3, [fp, #-12]
  132f68:	e3530000 	cmp	r3, #0
  132f6c:	1affffde 	bne	132eec <ip_reass_free_complete_datagram+0x170>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
  132f70:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  132f74:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  132f78:	eb0000b9 	bl	133264 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
  132f7c:	e30e3bfc 	movw	r3, #60412	; 0xebfc
  132f80:	e3403014 	movt	r3, #20
  132f84:	e1d330b0 	ldrh	r3, [r3]
  132f88:	e15b20b6 	ldrh	r2, [fp, #-6]
  132f8c:	e1520003 	cmp	r2, r3
  132f90:	9a000006 	bls	132fb0 <ip_reass_free_complete_datagram+0x234>
  132f94:	e30909cc 	movw	r0, #39372	; 0x99cc
  132f98:	e3400014 	movt	r0, #20
  132f9c:	ebff405c 	bl	103114 <rt_kprintf>
  132fa0:	e3a010ce 	mov	r1, #206	; 0xce
  132fa4:	e3090960 	movw	r0, #39264	; 0x9960
  132fa8:	e3400014 	movt	r0, #20
  132fac:	ebff604f 	bl	10b0f0 <sys_arch_assert>
  ip_reass_pbufcount -= pbufs_freed;
  132fb0:	e30e3bfc 	movw	r3, #60412	; 0xebfc
  132fb4:	e3403014 	movt	r3, #20
  132fb8:	e1d320b0 	ldrh	r2, [r3]
  132fbc:	e15b30b6 	ldrh	r3, [fp, #-6]
  132fc0:	e0423003 	sub	r3, r2, r3
  132fc4:	e6ff2073 	uxth	r2, r3
  132fc8:	e30e3bfc 	movw	r3, #60412	; 0xebfc
  132fcc:	e3403014 	movt	r3, #20
  132fd0:	e1c320b0 	strh	r2, [r3]

  return pbufs_freed;
  132fd4:	e15b30b6 	ldrh	r3, [fp, #-6]
}
  132fd8:	e1a00003 	mov	r0, r3
  132fdc:	e24bd004 	sub	sp, fp, #4
  132fe0:	e8bd8800 	pop	{fp, pc}

00132fe4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
  132fe4:	e92d4800 	push	{fp, lr}
  132fe8:	e28db004 	add	fp, sp, #4
  132fec:	e24dd028 	sub	sp, sp, #40	; 0x28
  132ff0:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  132ff4:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
  132ff8:	e3a03000 	mov	r3, #0
  132ffc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
  133000:	e3a03000 	mov	r3, #0
  133004:	e50b300c 	str	r3, [fp, #-12]
    prev = NULL;
  133008:	e3a03000 	mov	r3, #0
  13300c:	e50b3010 	str	r3, [fp, #-16]
    oldest_prev = NULL;
  133010:	e3a03000 	mov	r3, #0
  133014:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    other_datagrams = 0;
  133018:	e3a03000 	mov	r3, #0
  13301c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    r = reassdatagrams;
  133020:	e30e3bf8 	movw	r3, #60408	; 0xebf8
  133024:	e3403014 	movt	r3, #20
  133028:	e5933000 	ldr	r3, [r3]
  13302c:	e50b3008 	str	r3, [fp, #-8]
    while (r != NULL) {
  133030:	ea000030 	b	1330f8 <ip_reass_remove_oldest_datagram+0x114>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
  133034:	e51b3008 	ldr	r3, [fp, #-8]
  133038:	e5932014 	ldr	r2, [r3, #20]
  13303c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  133040:	e593300c 	ldr	r3, [r3, #12]
  133044:	e1520003 	cmp	r2, r3
  133048:	1a00000c 	bne	133080 <ip_reass_remove_oldest_datagram+0x9c>
  13304c:	e51b3008 	ldr	r3, [fp, #-8]
  133050:	e5932018 	ldr	r2, [r3, #24]
  133054:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  133058:	e5933010 	ldr	r3, [r3, #16]
  13305c:	e1520003 	cmp	r2, r3
  133060:	1a000006 	bne	133080 <ip_reass_remove_oldest_datagram+0x9c>
  133064:	e51b3008 	ldr	r3, [fp, #-8]
  133068:	e1d320bc 	ldrh	r2, [r3, #12]
  13306c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  133070:	e1d330b4 	ldrh	r3, [r3, #4]
  133074:	e6ff3073 	uxth	r3, r3
  133078:	e1520003 	cmp	r2, r3
  13307c:	0a000014 	beq	1330d4 <ip_reass_remove_oldest_datagram+0xf0>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
  133080:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  133084:	e2833001 	add	r3, r3, #1
  133088:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
        if (oldest == NULL) {
  13308c:	e51b300c 	ldr	r3, [fp, #-12]
  133090:	e3530000 	cmp	r3, #0
  133094:	1a000004 	bne	1330ac <ip_reass_remove_oldest_datagram+0xc8>
          oldest = r;
  133098:	e51b3008 	ldr	r3, [fp, #-8]
  13309c:	e50b300c 	str	r3, [fp, #-12]
          oldest_prev = prev;
  1330a0:	e51b3010 	ldr	r3, [fp, #-16]
  1330a4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1330a8:	ea000009 	b	1330d4 <ip_reass_remove_oldest_datagram+0xf0>
        } else if (r->timer <= oldest->timer) {
  1330ac:	e51b3008 	ldr	r3, [fp, #-8]
  1330b0:	e5d3201f 	ldrb	r2, [r3, #31]
  1330b4:	e51b300c 	ldr	r3, [fp, #-12]
  1330b8:	e5d3301f 	ldrb	r3, [r3, #31]
  1330bc:	e1520003 	cmp	r2, r3
  1330c0:	8a000003 	bhi	1330d4 <ip_reass_remove_oldest_datagram+0xf0>
          /* older than the previous oldest */
          oldest = r;
  1330c4:	e51b3008 	ldr	r3, [fp, #-8]
  1330c8:	e50b300c 	str	r3, [fp, #-12]
          oldest_prev = prev;
  1330cc:	e51b3010 	ldr	r3, [fp, #-16]
  1330d0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        }
      }
      if (r->next != NULL) {
  1330d4:	e51b3008 	ldr	r3, [fp, #-8]
  1330d8:	e5933000 	ldr	r3, [r3]
  1330dc:	e3530000 	cmp	r3, #0
  1330e0:	0a000001 	beq	1330ec <ip_reass_remove_oldest_datagram+0x108>
        prev = r;
  1330e4:	e51b3008 	ldr	r3, [fp, #-8]
  1330e8:	e50b3010 	str	r3, [fp, #-16]
      }
      r = r->next;
  1330ec:	e51b3008 	ldr	r3, [fp, #-8]
  1330f0:	e5933000 	ldr	r3, [r3]
  1330f4:	e50b3008 	str	r3, [fp, #-8]
    while (r != NULL) {
  1330f8:	e51b3008 	ldr	r3, [fp, #-8]
  1330fc:	e3530000 	cmp	r3, #0
  133100:	1affffcb 	bne	133034 <ip_reass_remove_oldest_datagram+0x50>
    }
    if (oldest != NULL) {
  133104:	e51b300c 	ldr	r3, [fp, #-12]
  133108:	e3530000 	cmp	r3, #0
  13310c:	0a000007 	beq	133130 <ip_reass_remove_oldest_datagram+0x14c>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
  133110:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  133114:	e51b000c 	ldr	r0, [fp, #-12]
  133118:	ebffff17 	bl	132d7c <ip_reass_free_complete_datagram>
  13311c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
      pbufs_freed += pbufs_freed_current;
  133120:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  133124:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  133128:	e0823003 	add	r3, r2, r3
  13312c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
  133130:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  133134:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  133138:	e1520003 	cmp	r2, r3
  13313c:	aa000002 	bge	13314c <ip_reass_remove_oldest_datagram+0x168>
  133140:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  133144:	e3530001 	cmp	r3, #1
  133148:	caffffac 	bgt	133000 <ip_reass_remove_oldest_datagram+0x1c>
  return pbufs_freed;
  13314c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
}
  133150:	e1a00003 	mov	r0, r3
  133154:	e24bd004 	sub	sp, fp, #4
  133158:	e8bd8800 	pop	{fp, pc}

0013315c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
  13315c:	e92d4800 	push	{fp, lr}
  133160:	e28db004 	add	fp, sp, #4
  133164:	e24dd010 	sub	sp, sp, #16
  133168:	e50b0010 	str	r0, [fp, #-16]
  13316c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
  133170:	e300211a 	movw	r2, #282	; 0x11a
  133174:	e3091960 	movw	r1, #39264	; 0x9960
  133178:	e3401014 	movt	r1, #20
  13317c:	e3a00005 	mov	r0, #5
  133180:	ebff97d4 	bl	1190d8 <memp_malloc_fn>
  133184:	e50b0008 	str	r0, [fp, #-8]
  if (ipr == NULL) {
  133188:	e51b3008 	ldr	r3, [fp, #-8]
  13318c:	e3530000 	cmp	r3, #0
  133190:	1a000019 	bne	1331fc <ip_reass_enqueue_new_datagram+0xa0>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
  133194:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  133198:	e51b0010 	ldr	r0, [fp, #-16]
  13319c:	ebffff90 	bl	132fe4 <ip_reass_remove_oldest_datagram>
  1331a0:	e1a02000 	mov	r2, r0
  1331a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1331a8:	e1530002 	cmp	r3, r2
  1331ac:	ca000005 	bgt	1331c8 <ip_reass_enqueue_new_datagram+0x6c>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
  1331b0:	e300211e 	movw	r2, #286	; 0x11e
  1331b4:	e3091960 	movw	r1, #39264	; 0x9960
  1331b8:	e3401014 	movt	r1, #20
  1331bc:	e3a00005 	mov	r0, #5
  1331c0:	ebff97c4 	bl	1190d8 <memp_malloc_fn>
  1331c4:	e50b0008 	str	r0, [fp, #-8]
    }
    if (ipr == NULL)
  1331c8:	e51b3008 	ldr	r3, [fp, #-8]
  1331cc:	e3530000 	cmp	r3, #0
  1331d0:	1a000009 	bne	1331fc <ip_reass_enqueue_new_datagram+0xa0>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
  1331d4:	e30c3a30 	movw	r3, #51760	; 0xca30
  1331d8:	e3403015 	movt	r3, #21
  1331dc:	e1d333bc 	ldrh	r3, [r3, #60]	; 0x3c
  1331e0:	e2833001 	add	r3, r3, #1
  1331e4:	e6ff2073 	uxth	r2, r3
  1331e8:	e30c3a30 	movw	r3, #51760	; 0xca30
  1331ec:	e3403015 	movt	r3, #21
  1331f0:	e1c323bc 	strh	r2, [r3, #60]	; 0x3c
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
  1331f4:	e3a03000 	mov	r3, #0
  1331f8:	ea000016 	b	133258 <ip_reass_enqueue_new_datagram+0xfc>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
  1331fc:	e3a02020 	mov	r2, #32
  133200:	e3a01000 	mov	r1, #0
  133204:	e51b0008 	ldr	r0, [fp, #-8]
  133208:	eb003819 	bl	141274 <memset>
  ipr->timer = IP_REASS_MAXAGE;
  13320c:	e51b3008 	ldr	r3, [fp, #-8]
  133210:	e3a02003 	mov	r2, #3
  133214:	e5c3201f 	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
  133218:	e30e3bf8 	movw	r3, #60408	; 0xebf8
  13321c:	e3403014 	movt	r3, #20
  133220:	e5932000 	ldr	r2, [r3]
  133224:	e51b3008 	ldr	r3, [fp, #-8]
  133228:	e5832000 	str	r2, [r3]
  reassdatagrams = ipr;
  13322c:	e30e3bf8 	movw	r3, #60408	; 0xebf8
  133230:	e3403014 	movt	r3, #20
  133234:	e51b2008 	ldr	r2, [fp, #-8]
  133238:	e5832000 	str	r2, [r3]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
  13323c:	e51b3008 	ldr	r3, [fp, #-8]
  133240:	e2833008 	add	r3, r3, #8
  133244:	e3a02014 	mov	r2, #20
  133248:	e51b1010 	ldr	r1, [fp, #-16]
  13324c:	e1a00003 	mov	r0, r3
  133250:	eb0036cf 	bl	140d94 <memcpy>
  return ipr;
  133254:	e51b3008 	ldr	r3, [fp, #-8]
}
  133258:	e1a00003 	mov	r0, r3
  13325c:	e24bd004 	sub	sp, fp, #4
  133260:	e8bd8800 	pop	{fp, pc}

00133264 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
  133264:	e92d4800 	push	{fp, lr}
  133268:	e28db004 	add	fp, sp, #4
  13326c:	e24dd008 	sub	sp, sp, #8
  133270:	e50b0008 	str	r0, [fp, #-8]
  133274:	e50b100c 	str	r1, [fp, #-12]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
  133278:	e30e3bf8 	movw	r3, #60408	; 0xebf8
  13327c:	e3403014 	movt	r3, #20
  133280:	e5933000 	ldr	r3, [r3]
  133284:	e51b2008 	ldr	r2, [fp, #-8]
  133288:	e1520003 	cmp	r2, r3
  13328c:	1a000005 	bne	1332a8 <ip_reass_dequeue_datagram+0x44>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
  133290:	e51b3008 	ldr	r3, [fp, #-8]
  133294:	e5932000 	ldr	r2, [r3]
  133298:	e30e3bf8 	movw	r3, #60408	; 0xebf8
  13329c:	e3403014 	movt	r3, #20
  1332a0:	e5832000 	str	r2, [r3]
  1332a4:	ea00000d 	b	1332e0 <ip_reass_dequeue_datagram+0x7c>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
  1332a8:	e51b300c 	ldr	r3, [fp, #-12]
  1332ac:	e3530000 	cmp	r3, #0
  1332b0:	1a000006 	bne	1332d0 <ip_reass_dequeue_datagram+0x6c>
  1332b4:	e30909e8 	movw	r0, #39400	; 0x99e8
  1332b8:	e3400014 	movt	r0, #20
  1332bc:	ebff3f94 	bl	103114 <rt_kprintf>
  1332c0:	e3001141 	movw	r1, #321	; 0x141
  1332c4:	e3090960 	movw	r0, #39264	; 0x9960
  1332c8:	e3400014 	movt	r0, #20
  1332cc:	ebff5f87 	bl	10b0f0 <sys_arch_assert>
    prev->next = ipr->next;
  1332d0:	e51b3008 	ldr	r3, [fp, #-8]
  1332d4:	e5932000 	ldr	r2, [r3]
  1332d8:	e51b300c 	ldr	r3, [fp, #-12]
  1332dc:	e5832000 	str	r2, [r3]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
  1332e0:	e51b1008 	ldr	r1, [fp, #-8]
  1332e4:	e3a00005 	mov	r0, #5
  1332e8:	ebff97e2 	bl	119278 <memp_free>
}
  1332ec:	e320f000 	nop	{0}
  1332f0:	e24bd004 	sub	sp, fp, #4
  1332f4:	e8bd8800 	pop	{fp, pc}

001332f8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param new_p points to the pbuf for the current fragment
 * @return 0 if invalid, >0 otherwise
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p)
{
  1332f8:	e92d4800 	push	{fp, lr}
  1332fc:	e28db004 	add	fp, sp, #4
  133300:	e24dd028 	sub	sp, sp, #40	; 0x28
  133304:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  133308:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
  13330c:	e3a03000 	mov	r3, #0
  133310:	e50b300c 	str	r3, [fp, #-12]
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
  133314:	e3a03001 	mov	r3, #1
  133318:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
  13331c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  133320:	e5933004 	ldr	r3, [r3, #4]
  133324:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
  133328:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  13332c:	e1d330b2 	ldrh	r3, [r3, #2]
  133330:	e6ff3073 	uxth	r3, r3
  133334:	e1a00003 	mov	r0, r3
  133338:	ebff8ca5 	bl	1165d4 <lwip_htons>
  13333c:	e1a03000 	mov	r3, r0
  133340:	e1a02003 	mov	r2, r3
  133344:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  133348:	e5d33000 	ldrb	r3, [r3]
  13334c:	e6ff3073 	uxth	r3, r3
  133350:	e203300f 	and	r3, r3, #15
  133354:	e6ff3073 	uxth	r3, r3
  133358:	e1a03103 	lsl	r3, r3, #2
  13335c:	e6ff3073 	uxth	r3, r3
  133360:	e0423003 	sub	r3, r2, r3
  133364:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
  133368:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  13336c:	e1d330b6 	ldrh	r3, [r3, #6]
  133370:	e6ff3073 	uxth	r3, r3
  133374:	e1a00003 	mov	r0, r3
  133378:	ebff8c95 	bl	1165d4 <lwip_htons>
  13337c:	e1a03000 	mov	r3, r0
  133380:	e7ec3053 	ubfx	r3, r3, #0, #13
  133384:	e6ff3073 	uxth	r3, r3
  133388:	e1a03183 	lsl	r3, r3, #3
  13338c:	e14b31bc 	strh	r3, [fp, #-28]	; 0xffffffe4
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
  133390:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  133394:	e5933004 	ldr	r3, [r3, #4]
  133398:	e50b3008 	str	r3, [fp, #-8]
  iprh->next_pbuf = NULL;
  13339c:	e51b3008 	ldr	r3, [fp, #-8]
  1333a0:	e3a02000 	mov	r2, #0
  1333a4:	e5c32000 	strb	r2, [r3]
  1333a8:	e3a02000 	mov	r2, #0
  1333ac:	e5c32001 	strb	r2, [r3, #1]
  1333b0:	e3a02000 	mov	r2, #0
  1333b4:	e5c32002 	strb	r2, [r3, #2]
  1333b8:	e3a02000 	mov	r2, #0
  1333bc:	e5c32003 	strb	r2, [r3, #3]
  iprh->start = offset;
  1333c0:	e51b3008 	ldr	r3, [fp, #-8]
  1333c4:	e15b21bc 	ldrh	r2, [fp, #-28]	; 0xffffffe4
  1333c8:	e1c320b4 	strh	r2, [r3, #4]
  iprh->end = offset + len;
  1333cc:	e15b21bc 	ldrh	r2, [fp, #-28]	; 0xffffffe4
  1333d0:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  1333d4:	e0823003 	add	r3, r2, r3
  1333d8:	e6ff2073 	uxth	r2, r3
  1333dc:	e51b3008 	ldr	r3, [fp, #-8]
  1333e0:	e1c320b6 	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
  1333e4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1333e8:	e5933004 	ldr	r3, [r3, #4]
  1333ec:	e50b3010 	str	r3, [fp, #-16]
  1333f0:	ea00004a 	b	133520 <ip_reass_chain_frag_into_datagram_and_validate+0x228>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
  1333f4:	e51b3010 	ldr	r3, [fp, #-16]
  1333f8:	e5933004 	ldr	r3, [r3, #4]
  1333fc:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    if (iprh->start < iprh_tmp->start) {
  133400:	e51b3008 	ldr	r3, [fp, #-8]
  133404:	e1d330b4 	ldrh	r3, [r3, #4]
  133408:	e6ff2073 	uxth	r2, r3
  13340c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  133410:	e1d330b4 	ldrh	r3, [r3, #4]
  133414:	e6ff3073 	uxth	r3, r3
  133418:	e1520003 	cmp	r2, r3
  13341c:	2a00001d 	bcs	133498 <ip_reass_chain_frag_into_datagram_and_validate+0x1a0>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
  133420:	e51b3008 	ldr	r3, [fp, #-8]
  133424:	e51b2010 	ldr	r2, [fp, #-16]
  133428:	e5832000 	str	r2, [r3]
      if (iprh_prev != NULL) {
  13342c:	e51b300c 	ldr	r3, [fp, #-12]
  133430:	e3530000 	cmp	r3, #0
  133434:	0a000013 	beq	133488 <ip_reass_chain_frag_into_datagram_and_validate+0x190>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
  133438:	e51b3008 	ldr	r3, [fp, #-8]
  13343c:	e1d330b4 	ldrh	r3, [r3, #4]
  133440:	e6ff2073 	uxth	r2, r3
  133444:	e51b300c 	ldr	r3, [fp, #-12]
  133448:	e1d330b6 	ldrh	r3, [r3, #6]
  13344c:	e6ff3073 	uxth	r3, r3
  133450:	e1520003 	cmp	r2, r3
  133454:	3a0000cf 	bcc	133798 <ip_reass_chain_frag_into_datagram_and_validate+0x4a0>
  133458:	e51b3008 	ldr	r3, [fp, #-8]
  13345c:	e1d330b6 	ldrh	r3, [r3, #6]
  133460:	e6ff2073 	uxth	r2, r3
  133464:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  133468:	e1d330b4 	ldrh	r3, [r3, #4]
  13346c:	e6ff3073 	uxth	r3, r3
  133470:	e1520003 	cmp	r2, r3
  133474:	8a0000c7 	bhi	133798 <ip_reass_chain_frag_into_datagram_and_validate+0x4a0>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
  133478:	e51b300c 	ldr	r3, [fp, #-12]
  13347c:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  133480:	e5832000 	str	r2, [r3]
      } else {
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
  133484:	ea000028 	b	13352c <ip_reass_chain_frag_into_datagram_and_validate+0x234>
        ipr->p = new_p;
  133488:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  13348c:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  133490:	e5832004 	str	r2, [r3, #4]
      break;
  133494:	ea000024 	b	13352c <ip_reass_chain_frag_into_datagram_and_validate+0x234>
    } else if (iprh->start == iprh_tmp->start) {
  133498:	e51b3008 	ldr	r3, [fp, #-8]
  13349c:	e1d330b4 	ldrh	r3, [r3, #4]
  1334a0:	e6ff2073 	uxth	r2, r3
  1334a4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1334a8:	e1d330b4 	ldrh	r3, [r3, #4]
  1334ac:	e6ff3073 	uxth	r3, r3
  1334b0:	e1520003 	cmp	r2, r3
  1334b4:	0a0000b9 	beq	1337a0 <ip_reass_chain_frag_into_datagram_and_validate+0x4a8>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
  1334b8:	e51b3008 	ldr	r3, [fp, #-8]
  1334bc:	e1d330b4 	ldrh	r3, [r3, #4]
  1334c0:	e6ff2073 	uxth	r2, r3
  1334c4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1334c8:	e1d330b6 	ldrh	r3, [r3, #6]
  1334cc:	e6ff3073 	uxth	r3, r3
  1334d0:	e1520003 	cmp	r2, r3
  1334d4:	3a0000b3 	bcc	1337a8 <ip_reass_chain_frag_into_datagram_and_validate+0x4b0>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
  1334d8:	e51b300c 	ldr	r3, [fp, #-12]
  1334dc:	e3530000 	cmp	r3, #0
  1334e0:	0a000009 	beq	13350c <ip_reass_chain_frag_into_datagram_and_validate+0x214>
        if (iprh_prev->end != iprh_tmp->start) {
  1334e4:	e51b300c 	ldr	r3, [fp, #-12]
  1334e8:	e1d330b6 	ldrh	r3, [r3, #6]
  1334ec:	e6ff2073 	uxth	r2, r3
  1334f0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1334f4:	e1d330b4 	ldrh	r3, [r3, #4]
  1334f8:	e6ff3073 	uxth	r3, r3
  1334fc:	e1520003 	cmp	r2, r3
  133500:	0a000001 	beq	13350c <ip_reass_chain_frag_into_datagram_and_validate+0x214>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
  133504:	e3a03000 	mov	r3, #0
  133508:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        }
      }
    }
    q = iprh_tmp->next_pbuf;
  13350c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  133510:	e5933000 	ldr	r3, [r3]
  133514:	e50b3010 	str	r3, [fp, #-16]
    iprh_prev = iprh_tmp;
  133518:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  13351c:	e50b300c 	str	r3, [fp, #-12]
  for (q = ipr->p; q != NULL;) {
  133520:	e51b3010 	ldr	r3, [fp, #-16]
  133524:	e3530000 	cmp	r3, #0
  133528:	1affffb1 	bne	1333f4 <ip_reass_chain_frag_into_datagram_and_validate+0xfc>
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
  13352c:	e51b3010 	ldr	r3, [fp, #-16]
  133530:	e3530000 	cmp	r3, #0
  133534:	1a00002d 	bne	1335f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2f8>
    if (iprh_prev != NULL) {
  133538:	e51b300c 	ldr	r3, [fp, #-12]
  13353c:	e3530000 	cmp	r3, #0
  133540:	0a00001c 	beq	1335b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
  133544:	e51b300c 	ldr	r3, [fp, #-12]
  133548:	e1d330b6 	ldrh	r3, [r3, #6]
  13354c:	e6ff2073 	uxth	r2, r3
  133550:	e51b3008 	ldr	r3, [fp, #-8]
  133554:	e1d330b4 	ldrh	r3, [r3, #4]
  133558:	e6ff3073 	uxth	r3, r3
  13355c:	e1520003 	cmp	r2, r3
  133560:	9a000006 	bls	133580 <ip_reass_chain_frag_into_datagram_and_validate+0x288>
  133564:	e3090a04 	movw	r0, #39428	; 0x9a04
  133568:	e3400014 	movt	r0, #20
  13356c:	ebff3ee8 	bl	103114 <rt_kprintf>
  133570:	e300119b 	movw	r1, #411	; 0x19b
  133574:	e3090960 	movw	r0, #39264	; 0x9960
  133578:	e3400014 	movt	r0, #20
  13357c:	ebff5edb 	bl	10b0f0 <sys_arch_assert>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
  133580:	e51b300c 	ldr	r3, [fp, #-12]
  133584:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  133588:	e5832000 	str	r2, [r3]
      if (iprh_prev->end != iprh->start) {
  13358c:	e51b300c 	ldr	r3, [fp, #-12]
  133590:	e1d330b6 	ldrh	r3, [r3, #6]
  133594:	e6ff2073 	uxth	r2, r3
  133598:	e51b3008 	ldr	r3, [fp, #-8]
  13359c:	e1d330b4 	ldrh	r3, [r3, #4]
  1335a0:	e6ff3073 	uxth	r3, r3
  1335a4:	e1520003 	cmp	r2, r3
  1335a8:	0a000010 	beq	1335f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2f8>
        valid = 0;
  1335ac:	e3a03000 	mov	r3, #0
  1335b0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1335b4:	ea00000d 	b	1335f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2f8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
  1335b8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1335bc:	e5933004 	ldr	r3, [r3, #4]
  1335c0:	e3530000 	cmp	r3, #0
  1335c4:	0a000006 	beq	1335e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2ec>
  1335c8:	e3090a24 	movw	r0, #39460	; 0x9a24
  1335cc:	e3400014 	movt	r0, #20
  1335d0:	ebff3ecf 	bl	103114 <rt_kprintf>
  1335d4:	e3a01f69 	mov	r1, #420	; 0x1a4
  1335d8:	e3090960 	movw	r0, #39264	; 0x9960
  1335dc:	e3400014 	movt	r0, #20
  1335e0:	ebff5ec2 	bl	10b0f0 <sys_arch_assert>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
  1335e4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1335e8:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  1335ec:	e5832004 	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0) {
  1335f0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1335f4:	e5d3301e 	ldrb	r3, [r3, #30]
  1335f8:	e2033001 	and	r3, r3, #1
  1335fc:	e3530000 	cmp	r3, #0
  133600:	0a000062 	beq	133790 <ip_reass_chain_frag_into_datagram_and_validate+0x498>
    /* and had no holes so far */
    if (valid) {
  133604:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133608:	e3530000 	cmp	r3, #0
  13360c:	0a00005d 	beq	133788 <ip_reass_chain_frag_into_datagram_and_validate+0x490>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
  133610:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  133614:	e5933004 	ldr	r3, [r3, #4]
  133618:	e3530000 	cmp	r3, #0
  13361c:	0a000006 	beq	13363c <ip_reass_chain_frag_into_datagram_and_validate+0x344>
  133620:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  133624:	e5933004 	ldr	r3, [r3, #4]
  133628:	e5933004 	ldr	r3, [r3, #4]
  13362c:	e1d330b4 	ldrh	r3, [r3, #4]
  133630:	e6ff3073 	uxth	r3, r3
  133634:	e3530000 	cmp	r3, #0
  133638:	0a000002 	beq	133648 <ip_reass_chain_frag_into_datagram_and_validate+0x350>
        valid = 0;
  13363c:	e3a03000 	mov	r3, #0
  133640:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  133644:	ea00004f 	b	133788 <ip_reass_chain_frag_into_datagram_and_validate+0x490>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
  133648:	e51b3008 	ldr	r3, [fp, #-8]
  13364c:	e50b300c 	str	r3, [fp, #-12]
        q = iprh->next_pbuf;
  133650:	e51b3008 	ldr	r3, [fp, #-8]
  133654:	e5933000 	ldr	r3, [r3]
  133658:	e50b3010 	str	r3, [fp, #-16]
        while (q != NULL) {
  13365c:	ea000012 	b	1336ac <ip_reass_chain_frag_into_datagram_and_validate+0x3b4>
          iprh = (struct ip_reass_helper*)q->payload;
  133660:	e51b3010 	ldr	r3, [fp, #-16]
  133664:	e5933004 	ldr	r3, [r3, #4]
  133668:	e50b3008 	str	r3, [fp, #-8]
          if (iprh_prev->end != iprh->start) {
  13366c:	e51b300c 	ldr	r3, [fp, #-12]
  133670:	e1d330b6 	ldrh	r3, [r3, #6]
  133674:	e6ff2073 	uxth	r2, r3
  133678:	e51b3008 	ldr	r3, [fp, #-8]
  13367c:	e1d330b4 	ldrh	r3, [r3, #4]
  133680:	e6ff3073 	uxth	r3, r3
  133684:	e1520003 	cmp	r2, r3
  133688:	0a000002 	beq	133698 <ip_reass_chain_frag_into_datagram_and_validate+0x3a0>
            valid = 0;
  13368c:	e3a03000 	mov	r3, #0
  133690:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
            break;
  133694:	ea000007 	b	1336b8 <ip_reass_chain_frag_into_datagram_and_validate+0x3c0>
          }
          iprh_prev = iprh;
  133698:	e51b3008 	ldr	r3, [fp, #-8]
  13369c:	e50b300c 	str	r3, [fp, #-12]
          q = iprh->next_pbuf;
  1336a0:	e51b3008 	ldr	r3, [fp, #-8]
  1336a4:	e5933000 	ldr	r3, [r3]
  1336a8:	e50b3010 	str	r3, [fp, #-16]
        while (q != NULL) {
  1336ac:	e51b3010 	ldr	r3, [fp, #-16]
  1336b0:	e3530000 	cmp	r3, #0
  1336b4:	1affffe9 	bne	133660 <ip_reass_chain_frag_into_datagram_and_validate+0x368>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
  1336b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1336bc:	e3530000 	cmp	r3, #0
  1336c0:	0a000030 	beq	133788 <ip_reass_chain_frag_into_datagram_and_validate+0x490>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
  1336c4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1336c8:	e5933004 	ldr	r3, [r3, #4]
  1336cc:	e3530000 	cmp	r3, #0
  1336d0:	1a000006 	bne	1336f0 <ip_reass_chain_frag_into_datagram_and_validate+0x3f8>
  1336d4:	e3090a5c 	movw	r0, #39516	; 0x9a5c
  1336d8:	e3400014 	movt	r0, #20
  1336dc:	ebff3e8c 	bl	103114 <rt_kprintf>
  1336e0:	e3a01f71 	mov	r1, #452	; 0x1c4
  1336e4:	e3090960 	movw	r0, #39264	; 0x9960
  1336e8:	e3400014 	movt	r0, #20
  1336ec:	ebff5e7f 	bl	10b0f0 <sys_arch_assert>
          LWIP_ASSERT("sanity check",
  1336f0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1336f4:	e5933004 	ldr	r3, [r3, #4]
  1336f8:	e5933004 	ldr	r3, [r3, #4]
  1336fc:	e51b2008 	ldr	r2, [fp, #-8]
  133700:	e1520003 	cmp	r2, r3
  133704:	1a000006 	bne	133724 <ip_reass_chain_frag_into_datagram_and_validate+0x42c>
  133708:	e3090a5c 	movw	r0, #39516	; 0x9a5c
  13370c:	e3400014 	movt	r0, #20
  133710:	ebff3e7f 	bl	103114 <rt_kprintf>
  133714:	e30011c6 	movw	r1, #454	; 0x1c6
  133718:	e3090960 	movw	r0, #39264	; 0x9960
  13371c:	e3400014 	movt	r0, #20
  133720:	ebff5e72 	bl	10b0f0 <sys_arch_assert>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
  133724:	e51b3008 	ldr	r3, [fp, #-8]
  133728:	e5933000 	ldr	r3, [r3]
  13372c:	e3530000 	cmp	r3, #0
  133730:	0a000006 	beq	133750 <ip_reass_chain_frag_into_datagram_and_validate+0x458>
  133734:	e3090a6c 	movw	r0, #39532	; 0x9a6c
  133738:	e3400014 	movt	r0, #20
  13373c:	ebff3e74 	bl	103114 <rt_kprintf>
  133740:	e3a01f72 	mov	r1, #456	; 0x1c8
  133744:	e3090960 	movw	r0, #39264	; 0x9960
  133748:	e3400014 	movt	r0, #20
  13374c:	ebff5e67 	bl	10b0f0 <sys_arch_assert>
            iprh->next_pbuf == NULL);
          LWIP_ASSERT("validate_datagram:datagram end!=datagram len",
  133750:	e51b3008 	ldr	r3, [fp, #-8]
  133754:	e1d330b6 	ldrh	r3, [r3, #6]
  133758:	e6ff2073 	uxth	r2, r3
  13375c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  133760:	e1d331bc 	ldrh	r3, [r3, #28]
  133764:	e1520003 	cmp	r2, r3
  133768:	0a000006 	beq	133788 <ip_reass_chain_frag_into_datagram_and_validate+0x490>
  13376c:	e3090a90 	movw	r0, #39568	; 0x9a90
  133770:	e3400014 	movt	r0, #20
  133774:	ebff3e66 	bl	103114 <rt_kprintf>
  133778:	e30011ca 	movw	r1, #458	; 0x1ca
  13377c:	e3090960 	movw	r0, #39264	; 0x9960
  133780:	e3400014 	movt	r0, #20
  133784:	ebff5e59 	bl	10b0f0 <sys_arch_assert>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid;
  133788:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13378c:	ea000015 	b	1337e8 <ip_reass_chain_frag_into_datagram_and_validate+0x4f0>
  }
  /* If we come here, not all fragments were received, yet! */
  return 0; /* not yet valid! */
  133790:	e3a03000 	mov	r3, #0
  133794:	ea000013 	b	1337e8 <ip_reass_chain_frag_into_datagram_and_validate+0x4f0>
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  133798:	e320f000 	nop	{0}
  13379c:	ea000002 	b	1337ac <ip_reass_chain_frag_into_datagram_and_validate+0x4b4>
      goto freepbuf;
  1337a0:	e320f000 	nop	{0}
  1337a4:	ea000000 	b	1337ac <ip_reass_chain_frag_into_datagram_and_validate+0x4b4>
      goto freepbuf;
  1337a8:	e320f000 	nop	{0}
  ip_reass_pbufcount -= pbuf_clen(new_p);
  1337ac:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
  1337b0:	ebff9e43 	bl	11b0c4 <pbuf_clen>
  1337b4:	e1a03000 	mov	r3, r0
  1337b8:	e1a02003 	mov	r2, r3
  1337bc:	e30e3bfc 	movw	r3, #60412	; 0xebfc
  1337c0:	e3403014 	movt	r3, #20
  1337c4:	e1d330b0 	ldrh	r3, [r3]
  1337c8:	e0433002 	sub	r3, r3, r2
  1337cc:	e6ff2073 	uxth	r2, r3
  1337d0:	e30e3bfc 	movw	r3, #60412	; 0xebfc
  1337d4:	e3403014 	movt	r3, #20
  1337d8:	e1c320b0 	strh	r2, [r3]
  pbuf_free(new_p);
  1337dc:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
  1337e0:	ebff9db2 	bl	11aeb0 <pbuf_free>
  return 0;
  1337e4:	e3a03000 	mov	r3, #0
#endif /* IP_REASS_CHECK_OVERLAP */
}
  1337e8:	e1a00003 	mov	r0, r3
  1337ec:	e24bd004 	sub	sp, fp, #4
  1337f0:	e8bd8800 	pop	{fp, pc}

001337f4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
  1337f4:	e92d4800 	push	{fp, lr}
  1337f8:	e28db004 	add	fp, sp, #4
  1337fc:	e24dd028 	sub	sp, sp, #40	; 0x28
  133800:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  struct ip_hdr *fraghdr;
  struct ip_reassdata *ipr;
  struct ip_reass_helper *iprh;
  u16_t offset, len, clen;

  IPFRAG_STATS_INC(ip_frag.recv);
  133804:	e30c3a30 	movw	r3, #51760	; 0xca30
  133808:	e3403015 	movt	r3, #21
  13380c:	e1d333b2 	ldrh	r3, [r3, #50]	; 0x32
  133810:	e2833001 	add	r3, r3, #1
  133814:	e6ff2073 	uxth	r2, r3
  133818:	e30c3a30 	movw	r3, #51760	; 0xca30
  13381c:	e3403015 	movt	r3, #21
  133820:	e1c323b2 	strh	r2, [r3, #50]	; 0x32
  MIB2_STATS_INC(mib2.ipreasmreqds);
  133824:	e30c3a30 	movw	r3, #51760	; 0xca30
  133828:	e3403015 	movt	r3, #21
  13382c:	e5933160 	ldr	r3, [r3, #352]	; 0x160
  133830:	e2832001 	add	r2, r3, #1
  133834:	e30c3a30 	movw	r3, #51760	; 0xca30
  133838:	e3403015 	movt	r3, #21
  13383c:	e5832160 	str	r2, [r3, #352]	; 0x160

  fraghdr = (struct ip_hdr*)p->payload;
  133840:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  133844:	e5933004 	ldr	r3, [r3, #4]
  133848:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
  13384c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133850:	e5d33000 	ldrb	r3, [r3]
  133854:	e203300f 	and	r3, r3, #15
  133858:	e1a03103 	lsl	r3, r3, #2
  13385c:	e3530014 	cmp	r3, #20
  133860:	0a000008 	beq	133888 <ip4_reass+0x94>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
  133864:	e30c3a30 	movw	r3, #51760	; 0xca30
  133868:	e3403015 	movt	r3, #21
  13386c:	e1d334b4 	ldrh	r3, [r3, #68]	; 0x44
  133870:	e2833001 	add	r3, r3, #1
  133874:	e6ff2073 	uxth	r2, r3
  133878:	e30c3a30 	movw	r3, #51760	; 0xca30
  13387c:	e3403015 	movt	r3, #21
  133880:	e1c324b4 	strh	r2, [r3, #68]	; 0x44
    goto nullreturn;
  133884:	ea00011e 	b	133d04 <ip4_reass+0x510>
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
  133888:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13388c:	e1d330b6 	ldrh	r3, [r3, #6]
  133890:	e6ff3073 	uxth	r3, r3
  133894:	e1a00003 	mov	r0, r3
  133898:	ebff8b4d 	bl	1165d4 <lwip_htons>
  13389c:	e1a03000 	mov	r3, r0
  1338a0:	e7ec3053 	ubfx	r3, r3, #0, #13
  1338a4:	e6ff3073 	uxth	r3, r3
  1338a8:	e1a03183 	lsl	r3, r3, #3
  1338ac:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
  1338b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1338b4:	e1d330b2 	ldrh	r3, [r3, #2]
  1338b8:	e6ff3073 	uxth	r3, r3
  1338bc:	e1a00003 	mov	r0, r3
  1338c0:	ebff8b43 	bl	1165d4 <lwip_htons>
  1338c4:	e1a03000 	mov	r3, r0
  1338c8:	e1a02003 	mov	r2, r3
  1338cc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1338d0:	e5d33000 	ldrb	r3, [r3]
  1338d4:	e6ff3073 	uxth	r3, r3
  1338d8:	e203300f 	and	r3, r3, #15
  1338dc:	e6ff3073 	uxth	r3, r3
  1338e0:	e1a03103 	lsl	r3, r3, #2
  1338e4:	e6ff3073 	uxth	r3, r3
  1338e8:	e0423003 	sub	r3, r2, r3
  1338ec:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
  1338f0:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1338f4:	ebff9df2 	bl	11b0c4 <pbuf_clen>
  1338f8:	e1a03000 	mov	r3, r0
  1338fc:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
  133900:	e30e3bfc 	movw	r3, #60412	; 0xebfc
  133904:	e3403014 	movt	r3, #20
  133908:	e1d330b0 	ldrh	r3, [r3]
  13390c:	e1a02003 	mov	r2, r3
  133910:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  133914:	e0823003 	add	r3, r2, r3
  133918:	e353000a 	cmp	r3, #10
  13391c:	da000017 	ble	133980 <ip4_reass+0x18c>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
  133920:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  133924:	e1a01003 	mov	r1, r3
  133928:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  13392c:	ebfffdac 	bl	132fe4 <ip_reass_remove_oldest_datagram>
  133930:	e1a03000 	mov	r3, r0
  133934:	e3530000 	cmp	r3, #0
  133938:	0a000007 	beq	13395c <ip4_reass+0x168>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
  13393c:	e30e3bfc 	movw	r3, #60412	; 0xebfc
  133940:	e3403014 	movt	r3, #20
  133944:	e1d330b0 	ldrh	r3, [r3]
  133948:	e1a02003 	mov	r2, r3
  13394c:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  133950:	e0823003 	add	r3, r2, r3
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
  133954:	e353000a 	cmp	r3, #10
  133958:	da000008 	ble	133980 <ip4_reass+0x18c>
#endif /* IP_REASS_FREE_OLDEST */
    {
      /* No datagram could be freed and still too many pbufs enqueued */
      LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: Overflow condition: pbufct=%d, clen=%d, MAX=%d\n",
        ip_reass_pbufcount, clen, IP_REASS_MAX_PBUFS));
      IPFRAG_STATS_INC(ip_frag.memerr);
  13395c:	e30c3a30 	movw	r3, #51760	; 0xca30
  133960:	e3403015 	movt	r3, #21
  133964:	e1d333bc 	ldrh	r3, [r3, #60]	; 0x3c
  133968:	e2833001 	add	r3, r3, #1
  13396c:	e6ff2073 	uxth	r2, r3
  133970:	e30c3a30 	movw	r3, #51760	; 0xca30
  133974:	e3403015 	movt	r3, #21
  133978:	e1c323bc 	strh	r2, [r3, #60]	; 0x3c
      /* @todo: send ICMP time exceeded here? */
      /* drop this pbuf */
      goto nullreturn;
  13397c:	ea0000e0 	b	133d04 <ip4_reass+0x510>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
  133980:	e30e3bf8 	movw	r3, #60408	; 0xebf8
  133984:	e3403014 	movt	r3, #20
  133988:	e5933000 	ldr	r3, [r3]
  13398c:	e50b300c 	str	r3, [fp, #-12]
  133990:	ea00001e 	b	133a10 <ip4_reass+0x21c>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
  133994:	e51b300c 	ldr	r3, [fp, #-12]
  133998:	e5932014 	ldr	r2, [r3, #20]
  13399c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1339a0:	e593300c 	ldr	r3, [r3, #12]
  1339a4:	e1520003 	cmp	r2, r3
  1339a8:	1a000015 	bne	133a04 <ip4_reass+0x210>
  1339ac:	e51b300c 	ldr	r3, [fp, #-12]
  1339b0:	e5932018 	ldr	r2, [r3, #24]
  1339b4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1339b8:	e5933010 	ldr	r3, [r3, #16]
  1339bc:	e1520003 	cmp	r2, r3
  1339c0:	1a00000f 	bne	133a04 <ip4_reass+0x210>
  1339c4:	e51b300c 	ldr	r3, [fp, #-12]
  1339c8:	e1d320bc 	ldrh	r2, [r3, #12]
  1339cc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1339d0:	e1d330b4 	ldrh	r3, [r3, #4]
  1339d4:	e6ff3073 	uxth	r3, r3
  1339d8:	e1520003 	cmp	r2, r3
  1339dc:	1a000008 	bne	133a04 <ip4_reass+0x210>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
  1339e0:	e30c3a30 	movw	r3, #51760	; 0xca30
  1339e4:	e3403015 	movt	r3, #21
  1339e8:	e1d334b6 	ldrh	r3, [r3, #70]	; 0x46
  1339ec:	e2833001 	add	r3, r3, #1
  1339f0:	e6ff2073 	uxth	r2, r3
  1339f4:	e30c3a30 	movw	r3, #51760	; 0xca30
  1339f8:	e3403015 	movt	r3, #21
  1339fc:	e1c324b6 	strh	r2, [r3, #70]	; 0x46
      break;
  133a00:	ea000005 	b	133a1c <ip4_reass+0x228>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
  133a04:	e51b300c 	ldr	r3, [fp, #-12]
  133a08:	e5933000 	ldr	r3, [r3]
  133a0c:	e50b300c 	str	r3, [fp, #-12]
  133a10:	e51b300c 	ldr	r3, [fp, #-12]
  133a14:	e3530000 	cmp	r3, #0
  133a18:	1affffdd 	bne	133994 <ip4_reass+0x1a0>
    }
  }

  if (ipr == NULL) {
  133a1c:	e51b300c 	ldr	r3, [fp, #-12]
  133a20:	e3530000 	cmp	r3, #0
  133a24:	1a000008 	bne	133a4c <ip4_reass+0x258>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
  133a28:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  133a2c:	e1a01003 	mov	r1, r3
  133a30:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  133a34:	ebfffdc8 	bl	13315c <ip_reass_enqueue_new_datagram>
  133a38:	e50b000c 	str	r0, [fp, #-12]
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
  133a3c:	e51b300c 	ldr	r3, [fp, #-12]
  133a40:	e3530000 	cmp	r3, #0
  133a44:	1a000017 	bne	133aa8 <ip4_reass+0x2b4>
      goto nullreturn;
  133a48:	ea0000ad 	b	133d04 <ip4_reass+0x510>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
  133a4c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133a50:	e1d330b6 	ldrh	r3, [r3, #6]
  133a54:	e6ff3073 	uxth	r3, r3
  133a58:	e1a00003 	mov	r0, r3
  133a5c:	ebff8adc 	bl	1165d4 <lwip_htons>
  133a60:	e1a03000 	mov	r3, r0
  133a64:	e7ec3053 	ubfx	r3, r3, #0, #13
  133a68:	e3530000 	cmp	r3, #0
  133a6c:	1a00000d 	bne	133aa8 <ip4_reass+0x2b4>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
  133a70:	e51b300c 	ldr	r3, [fp, #-12]
  133a74:	e1d330be 	ldrh	r3, [r3, #14]
  133a78:	e1a00003 	mov	r0, r3
  133a7c:	ebff8ad4 	bl	1165d4 <lwip_htons>
  133a80:	e1a03000 	mov	r3, r0
  133a84:	e7ec3053 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
  133a88:	e3530000 	cmp	r3, #0
  133a8c:	0a000005 	beq	133aa8 <ip4_reass+0x2b4>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
  133a90:	e51b300c 	ldr	r3, [fp, #-12]
  133a94:	e2833008 	add	r3, r3, #8
  133a98:	e3a02014 	mov	r2, #20
  133a9c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  133aa0:	e1a00003 	mov	r0, r3
  133aa4:	eb0034ba 	bl	140d94 <memcpy>
    }
  }
  /* Track the current number of pbufs current 'in-flight', in order to limit
  the number of fragments that may be enqueued at any one time */
  ip_reass_pbufcount += clen;
  133aa8:	e30e3bfc 	movw	r3, #60412	; 0xebfc
  133aac:	e3403014 	movt	r3, #20
  133ab0:	e1d320b0 	ldrh	r2, [r3]
  133ab4:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  133ab8:	e0823003 	add	r3, r2, r3
  133abc:	e6ff2073 	uxth	r2, r3
  133ac0:	e30e3bfc 	movw	r3, #60412	; 0xebfc
  133ac4:	e3403014 	movt	r3, #20
  133ac8:	e1c320b0 	strh	r2, [r3]

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  if ((IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0) {
  133acc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133ad0:	e1d330b6 	ldrh	r3, [r3, #6]
  133ad4:	e6ff3073 	uxth	r3, r3
  133ad8:	e2033020 	and	r3, r3, #32
  133adc:	e3530000 	cmp	r3, #0
  133ae0:	1a00000b 	bne	133b14 <ip4_reass+0x320>
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
  133ae4:	e51b300c 	ldr	r3, [fp, #-12]
  133ae8:	e5d3301e 	ldrb	r3, [r3, #30]
  133aec:	e3833001 	orr	r3, r3, #1
  133af0:	e6ef2073 	uxtb	r2, r3
  133af4:	e51b300c 	ldr	r3, [fp, #-12]
  133af8:	e5c3201e 	strb	r2, [r3, #30]
    ipr->datagram_len = offset + len;
  133afc:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  133b00:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
  133b04:	e0823003 	add	r3, r2, r3
  133b08:	e6ff2073 	uxth	r2, r3
  133b0c:	e51b300c 	ldr	r3, [fp, #-12]
  133b10:	e1c321bc 	strh	r2, [r3, #28]
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  if (ip_reass_chain_frag_into_datagram_and_validate(ipr, p)) {
  133b14:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  133b18:	e51b000c 	ldr	r0, [fp, #-12]
  133b1c:	ebfffdf5 	bl	1332f8 <ip_reass_chain_frag_into_datagram_and_validate>
  133b20:	e1a03000 	mov	r3, r0
  133b24:	e3530000 	cmp	r3, #0
  133b28:	0a000073 	beq	133cfc <ip4_reass+0x508>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
  133b2c:	e51b300c 	ldr	r3, [fp, #-12]
  133b30:	e1d331bc 	ldrh	r3, [r3, #28]
  133b34:	e2833014 	add	r3, r3, #20
  133b38:	e6ff2073 	uxth	r2, r3
  133b3c:	e51b300c 	ldr	r3, [fp, #-12]
  133b40:	e1c321bc 	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
  133b44:	e51b300c 	ldr	r3, [fp, #-12]
  133b48:	e5933004 	ldr	r3, [r3, #4]
  133b4c:	e5933004 	ldr	r3, [r3, #4]
  133b50:	e5933000 	ldr	r3, [r3]
  133b54:	e50b3008 	str	r3, [fp, #-8]

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
  133b58:	e51b300c 	ldr	r3, [fp, #-12]
  133b5c:	e5933004 	ldr	r3, [r3, #4]
  133b60:	e5933004 	ldr	r3, [r3, #4]
  133b64:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
  133b68:	e51b300c 	ldr	r3, [fp, #-12]
  133b6c:	e2833008 	add	r3, r3, #8
  133b70:	e3a02014 	mov	r2, #20
  133b74:	e1a01003 	mov	r1, r3
  133b78:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  133b7c:	eb003484 	bl	140d94 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
  133b80:	e51b300c 	ldr	r3, [fp, #-12]
  133b84:	e1d331bc 	ldrh	r3, [r3, #28]
  133b88:	e1a00003 	mov	r0, r3
  133b8c:	ebff8a90 	bl	1165d4 <lwip_htons>
  133b90:	e1a03000 	mov	r3, r0
  133b94:	e1a02003 	mov	r2, r3
  133b98:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133b9c:	e1c320b2 	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
  133ba0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133ba4:	e3a02000 	mov	r2, #0
  133ba8:	e5c32006 	strb	r2, [r3, #6]
  133bac:	e3a02000 	mov	r2, #0
  133bb0:	e5c32007 	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
  133bb4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133bb8:	e3a02000 	mov	r2, #0
  133bbc:	e5c3200a 	strb	r2, [r3, #10]
  133bc0:	e3a02000 	mov	r2, #0
  133bc4:	e5c3200b 	strb	r2, [r3, #11]
    /* @todo: do we need to set/calculate the correct checksum? */
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
  133bc8:	e3a01014 	mov	r1, #20
  133bcc:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  133bd0:	ebff938e 	bl	118a10 <inet_chksum>
  133bd4:	e1a03000 	mov	r3, r0
  133bd8:	e1a02003 	mov	r2, r3
  133bdc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133be0:	e1c320ba 	strh	r2, [r3, #10]
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
  133be4:	e51b300c 	ldr	r3, [fp, #-12]
  133be8:	e5933004 	ldr	r3, [r3, #4]
  133bec:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
  133bf0:	ea00000b 	b	133c24 <ip4_reass+0x430>
      iprh = (struct ip_reass_helper*)r->payload;
  133bf4:	e51b3008 	ldr	r3, [fp, #-8]
  133bf8:	e5933004 	ldr	r3, [r3, #4]
  133bfc:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
  133c00:	e3e01013 	mvn	r1, #19
  133c04:	e51b0008 	ldr	r0, [fp, #-8]
  133c08:	ebff9c8a 	bl	11ae38 <pbuf_header>
      pbuf_cat(p, r);
  133c0c:	e51b1008 	ldr	r1, [fp, #-8]
  133c10:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  133c14:	ebff9d5c 	bl	11b18c <pbuf_cat>
      r = iprh->next_pbuf;
  133c18:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  133c1c:	e5933000 	ldr	r3, [r3]
  133c20:	e50b3008 	str	r3, [fp, #-8]
    while (r != NULL) {
  133c24:	e51b3008 	ldr	r3, [fp, #-8]
  133c28:	e3530000 	cmp	r3, #0
  133c2c:	1afffff0 	bne	133bf4 <ip4_reass+0x400>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
  133c30:	e30e3bf8 	movw	r3, #60408	; 0xebf8
  133c34:	e3403014 	movt	r3, #20
  133c38:	e5933000 	ldr	r3, [r3]
  133c3c:	e51b200c 	ldr	r2, [fp, #-12]
  133c40:	e1520003 	cmp	r2, r3
  133c44:	1a000002 	bne	133c54 <ip4_reass+0x460>
      ipr_prev = NULL;
  133c48:	e3a03000 	mov	r3, #0
  133c4c:	e50b3010 	str	r3, [fp, #-16]
  133c50:	ea000011 	b	133c9c <ip4_reass+0x4a8>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
  133c54:	e30e3bf8 	movw	r3, #60408	; 0xebf8
  133c58:	e3403014 	movt	r3, #20
  133c5c:	e5933000 	ldr	r3, [r3]
  133c60:	e50b3010 	str	r3, [fp, #-16]
  133c64:	ea000007 	b	133c88 <ip4_reass+0x494>
        if (ipr_prev->next == ipr) {
  133c68:	e51b3010 	ldr	r3, [fp, #-16]
  133c6c:	e5933000 	ldr	r3, [r3]
  133c70:	e51b200c 	ldr	r2, [fp, #-12]
  133c74:	e1520003 	cmp	r2, r3
  133c78:	0a000006 	beq	133c98 <ip4_reass+0x4a4>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
  133c7c:	e51b3010 	ldr	r3, [fp, #-16]
  133c80:	e5933000 	ldr	r3, [r3]
  133c84:	e50b3010 	str	r3, [fp, #-16]
  133c88:	e51b3010 	ldr	r3, [fp, #-16]
  133c8c:	e3530000 	cmp	r3, #0
  133c90:	1afffff4 	bne	133c68 <ip4_reass+0x474>
  133c94:	ea000000 	b	133c9c <ip4_reass+0x4a8>
          break;
  133c98:	e320f000 	nop	{0}
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
  133c9c:	e51b1010 	ldr	r1, [fp, #-16]
  133ca0:	e51b000c 	ldr	r0, [fp, #-12]
  133ca4:	ebfffd6e 	bl	133264 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
  133ca8:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  133cac:	ebff9d04 	bl	11b0c4 <pbuf_clen>
  133cb0:	e1a03000 	mov	r3, r0
  133cb4:	e1a02003 	mov	r2, r3
  133cb8:	e30e3bfc 	movw	r3, #60412	; 0xebfc
  133cbc:	e3403014 	movt	r3, #20
  133cc0:	e1d330b0 	ldrh	r3, [r3]
  133cc4:	e0433002 	sub	r3, r3, r2
  133cc8:	e6ff2073 	uxth	r2, r3
  133ccc:	e30e3bfc 	movw	r3, #60412	; 0xebfc
  133cd0:	e3403014 	movt	r3, #20
  133cd4:	e1c320b0 	strh	r2, [r3]

    MIB2_STATS_INC(mib2.ipreasmoks);
  133cd8:	e30c3a30 	movw	r3, #51760	; 0xca30
  133cdc:	e3403015 	movt	r3, #21
  133ce0:	e593314c 	ldr	r3, [r3, #332]	; 0x14c
  133ce4:	e2832001 	add	r2, r3, #1
  133ce8:	e30c3a30 	movw	r3, #51760	; 0xca30
  133cec:	e3403015 	movt	r3, #21
  133cf0:	e583214c 	str	r2, [r3, #332]	; 0x14c

    /* Return the pbuf chain */
    return p;
  133cf4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  133cf8:	ea00000c 	b	133d30 <ip4_reass+0x53c>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
  133cfc:	e3a03000 	mov	r3, #0
  133d00:	ea00000a 	b	133d30 <ip4_reass+0x53c>

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  133d04:	e30c3a30 	movw	r3, #51760	; 0xca30
  133d08:	e3403015 	movt	r3, #21
  133d0c:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  133d10:	e2833001 	add	r3, r3, #1
  133d14:	e6ff2073 	uxth	r2, r3
  133d18:	e30c3a30 	movw	r3, #51760	; 0xca30
  133d1c:	e3403015 	movt	r3, #21
  133d20:	e1c323b6 	strh	r2, [r3, #54]	; 0x36
  pbuf_free(p);
  133d24:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  133d28:	ebff9c60 	bl	11aeb0 <pbuf_free>
  return NULL;
  133d2c:	e3a03000 	mov	r3, #0
}
  133d30:	e1a00003 	mov	r0, r3
  133d34:	e24bd004 	sub	sp, fp, #4
  133d38:	e8bd8800 	pop	{fp, pc}

00133d3c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
  133d3c:	e92d4800 	push	{fp, lr}
  133d40:	e28db004 	add	fp, sp, #4
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
  133d44:	e3002286 	movw	r2, #646	; 0x286
  133d48:	e3091960 	movw	r1, #39264	; 0x9960
  133d4c:	e3401014 	movt	r1, #20
  133d50:	e3a00006 	mov	r0, #6
  133d54:	ebff94df 	bl	1190d8 <memp_malloc_fn>
  133d58:	e1a03000 	mov	r3, r0
}
  133d5c:	e1a00003 	mov	r0, r3
  133d60:	e8bd8800 	pop	{fp, pc}

00133d64 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
  133d64:	e92d4800 	push	{fp, lr}
  133d68:	e28db004 	add	fp, sp, #4
  133d6c:	e24dd008 	sub	sp, sp, #8
  133d70:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ASSERT("p != NULL", p != NULL);
  133d74:	e51b3008 	ldr	r3, [fp, #-8]
  133d78:	e3530000 	cmp	r3, #0
  133d7c:	1a000006 	bne	133d9c <ip_frag_free_pbuf_custom_ref+0x38>
  133d80:	e3090ac0 	movw	r0, #39616	; 0x9ac0
  133d84:	e3400014 	movt	r0, #20
  133d88:	ebff3ce1 	bl	103114 <rt_kprintf>
  133d8c:	e300128d 	movw	r1, #653	; 0x28d
  133d90:	e3090960 	movw	r0, #39264	; 0x9960
  133d94:	e3400014 	movt	r0, #20
  133d98:	ebff5cd4 	bl	10b0f0 <sys_arch_assert>
  memp_free(MEMP_FRAG_PBUF, p);
  133d9c:	e51b1008 	ldr	r1, [fp, #-8]
  133da0:	e3a00006 	mov	r0, #6
  133da4:	ebff9533 	bl	119278 <memp_free>
}
  133da8:	e320f000 	nop	{0}
  133dac:	e24bd004 	sub	sp, fp, #4
  133db0:	e8bd8800 	pop	{fp, pc}

00133db4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
  133db4:	e92d4800 	push	{fp, lr}
  133db8:	e28db004 	add	fp, sp, #4
  133dbc:	e24dd010 	sub	sp, sp, #16
  133dc0:	e50b0010 	str	r0, [fp, #-16]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
  133dc4:	e51b3010 	ldr	r3, [fp, #-16]
  133dc8:	e50b3008 	str	r3, [fp, #-8]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
  133dcc:	e51b3008 	ldr	r3, [fp, #-8]
  133dd0:	e3530000 	cmp	r3, #0
  133dd4:	1a000006 	bne	133df4 <ipfrag_free_pbuf_custom+0x40>
  133dd8:	e3090acc 	movw	r0, #39628	; 0x9acc
  133ddc:	e3400014 	movt	r0, #20
  133de0:	ebff3ccb 	bl	103114 <rt_kprintf>
  133de4:	e3001297 	movw	r1, #663	; 0x297
  133de8:	e3090960 	movw	r0, #39264	; 0x9960
  133dec:	e3400014 	movt	r0, #20
  133df0:	ebff5cbe 	bl	10b0f0 <sys_arch_assert>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  133df4:	e51b2008 	ldr	r2, [fp, #-8]
  133df8:	e51b3010 	ldr	r3, [fp, #-16]
  133dfc:	e1520003 	cmp	r2, r3
  133e00:	0a000006 	beq	133e20 <ipfrag_free_pbuf_custom+0x6c>
  133e04:	e3090ad8 	movw	r0, #39640	; 0x9ad8
  133e08:	e3400014 	movt	r0, #20
  133e0c:	ebff3cc0 	bl	103114 <rt_kprintf>
  133e10:	e3a01fa6 	mov	r1, #664	; 0x298
  133e14:	e3090960 	movw	r0, #39264	; 0x9960
  133e18:	e3400014 	movt	r0, #20
  133e1c:	ebff5cb3 	bl	10b0f0 <sys_arch_assert>
  if (pcr->original != NULL) {
  133e20:	e51b3008 	ldr	r3, [fp, #-8]
  133e24:	e5933014 	ldr	r3, [r3, #20]
  133e28:	e3530000 	cmp	r3, #0
  133e2c:	0a000003 	beq	133e40 <ipfrag_free_pbuf_custom+0x8c>
    pbuf_free(pcr->original);
  133e30:	e51b3008 	ldr	r3, [fp, #-8]
  133e34:	e5933014 	ldr	r3, [r3, #20]
  133e38:	e1a00003 	mov	r0, r3
  133e3c:	ebff9c1b 	bl	11aeb0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
  133e40:	e51b0008 	ldr	r0, [fp, #-8]
  133e44:	ebffffc6 	bl	133d64 <ip_frag_free_pbuf_custom_ref>
}
  133e48:	e320f000 	nop	{0}
  133e4c:	e24bd004 	sub	sp, fp, #4
  133e50:	e8bd8800 	pop	{fp, pc}

00133e54 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
  133e54:	e92d4800 	push	{fp, lr}
  133e58:	e28db004 	add	fp, sp, #4
  133e5c:	e24dd048 	sub	sp, sp, #72	; 0x48
  133e60:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
  133e64:	e50b103c 	str	r1, [fp, #-60]	; 0xffffffc4
  133e68:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
  133e6c:	e3a03000 	mov	r3, #0
  133e70:	e14b30b6 	strh	r3, [fp, #-6]
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
  133e74:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  133e78:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  133e7c:	e2433014 	sub	r3, r3, #20
  133e80:	e2832007 	add	r2, r3, #7
  133e84:	e3530000 	cmp	r3, #0
  133e88:	b1a03002 	movlt	r3, r2
  133e8c:	a1a03003 	movge	r3, r3
  133e90:	e1a031c3 	asr	r3, r3, #3
  133e94:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
  133e98:	e3a03014 	mov	r3, #20
  133e9c:	e14b30be 	strh	r3, [fp, #-14]
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
  133ea0:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  133ea4:	e5933004 	ldr	r3, [r3, #4]
  133ea8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  iphdr = original_iphdr;
  133eac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  133eb0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
  133eb4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  133eb8:	e5d33000 	ldrb	r3, [r3]
  133ebc:	e203300f 	and	r3, r3, #15
  133ec0:	e1a03103 	lsl	r3, r3, #2
  133ec4:	e3530014 	cmp	r3, #20
  133ec8:	0a000008 	beq	133ef0 <ip4_frag+0x9c>
  133ecc:	e3090ae4 	movw	r0, #39652	; 0x9ae4
  133ed0:	e3400014 	movt	r0, #20
  133ed4:	ebff3c8e 	bl	103114 <rt_kprintf>
  133ed8:	e3a01d0b 	mov	r1, #704	; 0x2c0
  133edc:	e3090960 	movw	r0, #39264	; 0x9960
  133ee0:	e3400014 	movt	r0, #20
  133ee4:	ebff5c81 	bl	10b0f0 <sys_arch_assert>
  133ee8:	e3e03005 	mvn	r3, #5
  133eec:	ea0000ed 	b	1342a8 <ip4_frag+0x454>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
  133ef0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  133ef4:	e1d330b6 	ldrh	r3, [r3, #6]
  133ef8:	e6ff3073 	uxth	r3, r3
  133efc:	e1a00003 	mov	r0, r3
  133f00:	ebff89b3 	bl	1165d4 <lwip_htons>
  133f04:	e1a03000 	mov	r3, r0
  133f08:	e14b31b0 	strh	r3, [fp, #-16]
  ofo = tmp & IP_OFFMASK;
  133f0c:	e15b31b0 	ldrh	r3, [fp, #-16]
  133f10:	e7ec3053 	ubfx	r3, r3, #0, #13
  133f14:	e14b30bc 	strh	r3, [fp, #-12]
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
  133f18:	e15b31b0 	ldrh	r3, [fp, #-16]
  133f1c:	e2033a02 	and	r3, r3, #8192	; 0x2000
  133f20:	e3530000 	cmp	r3, #0
  133f24:	0a000008 	beq	133f4c <ip4_frag+0xf8>
  133f28:	e3090b0c 	movw	r0, #39692	; 0x9b0c
  133f2c:	e3400014 	movt	r0, #20
  133f30:	ebff3c77 	bl	103114 <rt_kprintf>
  133f34:	e30012c5 	movw	r1, #709	; 0x2c5
  133f38:	e3090960 	movw	r0, #39264	; 0x9960
  133f3c:	e3400014 	movt	r0, #20
  133f40:	ebff5c6a 	bl	10b0f0 <sys_arch_assert>
  133f44:	e3e03005 	mvn	r3, #5
  133f48:	ea0000d6 	b	1342a8 <ip4_frag+0x454>

  left = p->tot_len - IP_HLEN;
  133f4c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  133f50:	e1d330b8 	ldrh	r3, [r3, #8]
  133f54:	e2433014 	sub	r3, r3, #20
  133f58:	e14b30ba 	strh	r3, [fp, #-10]

  while (left) {
  133f5c:	ea0000bc 	b	134254 <ip4_frag+0x400>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
  133f60:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  133f64:	e1a02183 	lsl	r2, r3, #3
  133f68:	e15b30ba 	ldrh	r3, [fp, #-10]
  133f6c:	e1520003 	cmp	r2, r3
  133f70:	b1a03002 	movlt	r3, r2
  133f74:	a1a03003 	movge	r3, r3
  133f78:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
  133f7c:	e3a02000 	mov	r2, #0
  133f80:	e3a01014 	mov	r1, #20
  133f84:	e3a00002 	mov	r0, #2
  133f88:	ebff98c1 	bl	11a294 <pbuf_alloc>
  133f8c:	e50b0024 	str	r0, [fp, #-36]	; 0xffffffdc
    if (rambuf == NULL) {
  133f90:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  133f94:	e3530000 	cmp	r3, #0
  133f98:	0a0000b9 	beq	134284 <ip4_frag+0x430>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
  133f9c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  133fa0:	e1d330ba 	ldrh	r3, [r3, #10]
  133fa4:	e3530013 	cmp	r3, #19
  133fa8:	8a000006 	bhi	133fc8 <ip4_frag+0x174>
  133fac:	e3090b28 	movw	r0, #39720	; 0x9b28
  133fb0:	e3400014 	movt	r0, #20
  133fb4:	ebff3c56 	bl	103114 <rt_kprintf>
  133fb8:	e3a01fba 	mov	r1, #744	; 0x2e8
  133fbc:	e3090960 	movw	r0, #39264	; 0x9960
  133fc0:	e3400014 	movt	r0, #20
  133fc4:	ebff5c49 	bl	10b0f0 <sys_arch_assert>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
  133fc8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  133fcc:	e5933004 	ldr	r3, [r3, #4]
  133fd0:	e3a02014 	mov	r2, #20
  133fd4:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  133fd8:	e1a00003 	mov	r0, r3
  133fdc:	eb00336c 	bl	140d94 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
  133fe0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  133fe4:	e5933004 	ldr	r3, [r3, #4]
  133fe8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    left_to_copy = fragsize;
  133fec:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  133ff0:	e14b30b8 	strh	r3, [fp, #-8]
    while (left_to_copy) {
  133ff4:	ea000049 	b	134120 <ip4_frag+0x2cc>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
  133ff8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  133ffc:	e1d320ba 	ldrh	r2, [r3, #10]
  134000:	e15b30be 	ldrh	r3, [fp, #-14]
  134004:	e0423003 	sub	r3, r2, r3
  134008:	e14b32ba 	strh	r3, [fp, #-42]	; 0xffffffd6
      newpbuflen = LWIP_MIN(left_to_copy, plen);
  13400c:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
  134010:	e15b30b8 	ldrh	r3, [fp, #-8]
  134014:	e1520003 	cmp	r2, r3
  134018:	31a03002 	movcc	r3, r2
  13401c:	21a03003 	movcs	r3, r3
  134020:	e14b30b6 	strh	r3, [fp, #-6]
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
  134024:	e15b30b6 	ldrh	r3, [fp, #-6]
  134028:	e3530000 	cmp	r3, #0
  13402c:	1a000005 	bne	134048 <ip4_frag+0x1f4>
        poff = 0;
  134030:	e3a03000 	mov	r3, #0
  134034:	e14b30be 	strh	r3, [fp, #-14]
        p = p->next;
  134038:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  13403c:	e5933000 	ldr	r3, [r3]
  134040:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
        continue;
  134044:	ea000035 	b	134120 <ip4_frag+0x2cc>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
  134048:	ebffff3b 	bl	133d3c <ip_frag_alloc_pbuf_custom_ref>
  13404c:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
      if (pcr == NULL) {
  134050:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134054:	e3530000 	cmp	r3, #0
  134058:	1a000002 	bne	134068 <ip4_frag+0x214>
        pbuf_free(rambuf);
  13405c:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  134060:	ebff9b92 	bl	11aeb0 <pbuf_free>
        goto memerr;
  134064:	ea000087 	b	134288 <ip4_frag+0x434>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
  134068:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
        (u8_t*)p->payload + poff, newpbuflen);
  13406c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  134070:	e5932004 	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
  134074:	e15b30be 	ldrh	r3, [fp, #-14]
  134078:	e0823003 	add	r3, r2, r3
  13407c:	e15b10b6 	ldrh	r1, [fp, #-6]
  134080:	e15b20b6 	ldrh	r2, [fp, #-6]
  134084:	e58d2004 	str	r2, [sp, #4]
  134088:	e58d3000 	str	r3, [sp]
  13408c:	e1a03000 	mov	r3, r0
  134090:	e3a02002 	mov	r2, #2
  134094:	e3a00004 	mov	r0, #4
  134098:	ebff99e2 	bl	11a828 <pbuf_alloced_custom>
  13409c:	e50b0034 	str	r0, [fp, #-52]	; 0xffffffcc
      if (newpbuf == NULL) {
  1340a0:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  1340a4:	e3530000 	cmp	r3, #0
  1340a8:	1a000004 	bne	1340c0 <ip4_frag+0x26c>
        ip_frag_free_pbuf_custom_ref(pcr);
  1340ac:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  1340b0:	ebffff2b 	bl	133d64 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
  1340b4:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  1340b8:	ebff9b7c 	bl	11aeb0 <pbuf_free>
        goto memerr;
  1340bc:	ea000071 	b	134288 <ip4_frag+0x434>
      }
      pbuf_ref(p);
  1340c0:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
  1340c4:	ebff9c13 	bl	11b118 <pbuf_ref>
      pcr->original = p;
  1340c8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1340cc:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
  1340d0:	e5832014 	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
  1340d4:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  1340d8:	e3033db4 	movw	r3, #15796	; 0x3db4
  1340dc:	e3403013 	movt	r3, #19
  1340e0:	e5823010 	str	r3, [r2, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
  1340e4:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  1340e8:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  1340ec:	ebff9c26 	bl	11b18c <pbuf_cat>
      left_to_copy -= newpbuflen;
  1340f0:	e15b20b8 	ldrh	r2, [fp, #-8]
  1340f4:	e15b30b6 	ldrh	r3, [fp, #-6]
  1340f8:	e0423003 	sub	r3, r2, r3
  1340fc:	e14b30b8 	strh	r3, [fp, #-8]
      if (left_to_copy) {
  134100:	e15b30b8 	ldrh	r3, [fp, #-8]
  134104:	e3530000 	cmp	r3, #0
  134108:	0a000004 	beq	134120 <ip4_frag+0x2cc>
        poff = 0;
  13410c:	e3a03000 	mov	r3, #0
  134110:	e14b30be 	strh	r3, [fp, #-14]
        p = p->next;
  134114:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  134118:	e5933000 	ldr	r3, [r3]
  13411c:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
    while (left_to_copy) {
  134120:	e15b30b8 	ldrh	r3, [fp, #-8]
  134124:	e3530000 	cmp	r3, #0
  134128:	1affffb2 	bne	133ff8 <ip4_frag+0x1a4>
      }
    }
    poff += newpbuflen;
  13412c:	e15b20be 	ldrh	r2, [fp, #-14]
  134130:	e15b30b6 	ldrh	r3, [fp, #-6]
  134134:	e0823003 	add	r3, r2, r3
  134138:	e14b30be 	strh	r3, [fp, #-14]
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
  13413c:	e15b20ba 	ldrh	r2, [fp, #-10]
  134140:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  134144:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  134148:	e2433014 	sub	r3, r3, #20
  13414c:	e1520003 	cmp	r2, r3
  134150:	d3a03001 	movle	r3, #1
  134154:	c3a03000 	movgt	r3, #0
  134158:	e6ef3073 	uxtb	r3, r3
  13415c:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
  134160:	e15b30bc 	ldrh	r3, [fp, #-12]
  134164:	e7ec3053 	ubfx	r3, r3, #0, #13
  134168:	e14b31b0 	strh	r3, [fp, #-16]
    if (!last) {
  13416c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  134170:	e3530000 	cmp	r3, #0
  134174:	1a000002 	bne	134184 <ip4_frag+0x330>
      tmp = tmp | IP_MF;
  134178:	e15b31b0 	ldrh	r3, [fp, #-16]
  13417c:	e3833a02 	orr	r3, r3, #8192	; 0x2000
  134180:	e14b31b0 	strh	r3, [fp, #-16]
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
  134184:	e15b31b0 	ldrh	r3, [fp, #-16]
  134188:	e1a00003 	mov	r0, r3
  13418c:	ebff8910 	bl	1165d4 <lwip_htons>
  134190:	e1a03000 	mov	r3, r0
  134194:	e1a02003 	mov	r2, r3
  134198:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  13419c:	e1c320b6 	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
  1341a0:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  1341a4:	e2833014 	add	r3, r3, #20
  1341a8:	e6ff3073 	uxth	r3, r3
  1341ac:	e1a00003 	mov	r0, r3
  1341b0:	ebff8907 	bl	1165d4 <lwip_htons>
  1341b4:	e1a03000 	mov	r3, r0
  1341b8:	e1a02003 	mov	r2, r3
  1341bc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1341c0:	e1c320b2 	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
  1341c4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1341c8:	e3a02000 	mov	r2, #0
  1341cc:	e5c3200a 	strb	r2, [r3, #10]
  1341d0:	e3a02000 	mov	r2, #0
  1341d4:	e5c3200b 	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
  1341d8:	e3a01014 	mov	r1, #20
  1341dc:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  1341e0:	ebff920a 	bl	118a10 <inet_chksum>
  1341e4:	e1a03000 	mov	r3, r0
  1341e8:	e1a02003 	mov	r2, r3
  1341ec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1341f0:	e1c320ba 	strh	r2, [r3, #10]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
  1341f4:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  1341f8:	e5933014 	ldr	r3, [r3, #20]
  1341fc:	e51b2040 	ldr	r2, [fp, #-64]	; 0xffffffc0
  134200:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  134204:	e51b003c 	ldr	r0, [fp, #-60]	; 0xffffffc4
  134208:	e12fff33 	blx	r3
    IPFRAG_STATS_INC(ip_frag.xmit);
  13420c:	e30c3a30 	movw	r3, #51760	; 0xca30
  134210:	e3403015 	movt	r3, #21
  134214:	e1d333b0 	ldrh	r3, [r3, #48]	; 0x30
  134218:	e2833001 	add	r3, r3, #1
  13421c:	e6ff2073 	uxth	r2, r3
  134220:	e30c3a30 	movw	r3, #51760	; 0xca30
  134224:	e3403015 	movt	r3, #21
  134228:	e1c323b0 	strh	r2, [r3, #48]	; 0x30
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
  13422c:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  134230:	ebff9b1e 	bl	11aeb0 <pbuf_free>
    left -= fragsize;
  134234:	e15b20ba 	ldrh	r2, [fp, #-10]
  134238:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  13423c:	e0423003 	sub	r3, r2, r3
  134240:	e14b30ba 	strh	r3, [fp, #-10]
    ofo += nfb;
  134244:	e15b20bc 	ldrh	r2, [fp, #-12]
  134248:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  13424c:	e0823003 	add	r3, r2, r3
  134250:	e14b30bc 	strh	r3, [fp, #-12]
  while (left) {
  134254:	e15b30ba 	ldrh	r3, [fp, #-10]
  134258:	e3530000 	cmp	r3, #0
  13425c:	1affff3f 	bne	133f60 <ip4_frag+0x10c>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  134260:	e30c3a30 	movw	r3, #51760	; 0xca30
  134264:	e3403015 	movt	r3, #21
  134268:	e5933154 	ldr	r3, [r3, #340]	; 0x154
  13426c:	e2832001 	add	r2, r3, #1
  134270:	e30c3a30 	movw	r3, #51760	; 0xca30
  134274:	e3403015 	movt	r3, #21
  134278:	e5832154 	str	r2, [r3, #340]	; 0x154
  return ERR_OK;
  13427c:	e3a03000 	mov	r3, #0
  134280:	ea000008 	b	1342a8 <ip4_frag+0x454>
      goto memerr;
  134284:	e320f000 	nop	{0}
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  134288:	e30c3a30 	movw	r3, #51760	; 0xca30
  13428c:	e3403015 	movt	r3, #21
  134290:	e5933158 	ldr	r3, [r3, #344]	; 0x158
  134294:	e2832001 	add	r2, r3, #1
  134298:	e30c3a30 	movw	r3, #51760	; 0xca30
  13429c:	e3403015 	movt	r3, #21
  1342a0:	e5832158 	str	r2, [r3, #344]	; 0x158
  return ERR_MEM;
  1342a4:	e3e03000 	mvn	r3, #0
}
  1342a8:	e1a00003 	mov	r0, r3
  1342ac:	e24bd004 	sub	sp, fp, #4
  1342b0:	e8bd8800 	pop	{fp, pc}

001342b4 <ping_prepare_echo>:
    rt_uint8_t addr0, addr1, addr2, addr3;
};

/** Prepare a echo ICMP request */
static void ping_prepare_echo( struct icmp_echo_hdr *iecho, u16_t len)
{
  1342b4:	e92d4800 	push	{fp, lr}
  1342b8:	e28db004 	add	fp, sp, #4
  1342bc:	e24dd010 	sub	sp, sp, #16
  1342c0:	e50b0010 	str	r0, [fp, #-16]
  1342c4:	e1a03001 	mov	r3, r1
  1342c8:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
    size_t i;
    size_t data_len = len - sizeof(struct icmp_echo_hdr);
  1342cc:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  1342d0:	e2433008 	sub	r3, r3, #8
  1342d4:	e50b300c 	str	r3, [fp, #-12]

    ICMPH_TYPE_SET(iecho, ICMP_ECHO);
  1342d8:	e51b3010 	ldr	r3, [fp, #-16]
  1342dc:	e3a02008 	mov	r2, #8
  1342e0:	e5c32000 	strb	r2, [r3]
    ICMPH_CODE_SET(iecho, 0);
  1342e4:	e51b3010 	ldr	r3, [fp, #-16]
  1342e8:	e3a02000 	mov	r2, #0
  1342ec:	e5c32001 	strb	r2, [r3, #1]
    iecho->chksum = 0;
  1342f0:	e51b3010 	ldr	r3, [fp, #-16]
  1342f4:	e3a02000 	mov	r2, #0
  1342f8:	e5c32002 	strb	r2, [r3, #2]
  1342fc:	e3a02000 	mov	r2, #0
  134300:	e5c32003 	strb	r2, [r3, #3]
    iecho->id     = PING_ID;
  134304:	e51b2010 	ldr	r2, [fp, #-16]
  134308:	e3a03000 	mov	r3, #0
  13430c:	e1e03003 	mvn	r3, r3
  134310:	e2033050 	and	r3, r3, #80	; 0x50
  134314:	e1e03003 	mvn	r3, r3
  134318:	e5c23004 	strb	r3, [r2, #4]
  13431c:	e3a03000 	mov	r3, #0
  134320:	e1e03003 	mvn	r3, r3
  134324:	e2033050 	and	r3, r3, #80	; 0x50
  134328:	e1e03003 	mvn	r3, r3
  13432c:	e5c23005 	strb	r3, [r2, #5]
    iecho->seqno  = htons(++ping_seq_num);
  134330:	e30e3bfe 	movw	r3, #60414	; 0xebfe
  134334:	e3403014 	movt	r3, #20
  134338:	e1d330b0 	ldrh	r3, [r3]
  13433c:	e2833001 	add	r3, r3, #1
  134340:	e6ff2073 	uxth	r2, r3
  134344:	e30e3bfe 	movw	r3, #60414	; 0xebfe
  134348:	e3403014 	movt	r3, #20
  13434c:	e1c320b0 	strh	r2, [r3]
  134350:	e30e3bfe 	movw	r3, #60414	; 0xebfe
  134354:	e3403014 	movt	r3, #20
  134358:	e1d330b0 	ldrh	r3, [r3]
  13435c:	e1a00003 	mov	r0, r3
  134360:	ebff889b 	bl	1165d4 <lwip_htons>
  134364:	e1a03000 	mov	r3, r0
  134368:	e1a02003 	mov	r2, r3
  13436c:	e51b3010 	ldr	r3, [fp, #-16]
  134370:	e1c320b6 	strh	r2, [r3, #6]

    /* fill the additional data buffer with some data */
    for (i = 0; i < data_len; i++)
  134374:	e3a03000 	mov	r3, #0
  134378:	e50b3008 	str	r3, [fp, #-8]
  13437c:	ea000009 	b	1343a8 <ping_prepare_echo+0xf4>
    {
        ((char*) iecho)[sizeof(struct icmp_echo_hdr) + i] = (char) i;
  134380:	e51b3008 	ldr	r3, [fp, #-8]
  134384:	e2833008 	add	r3, r3, #8
  134388:	e51b2010 	ldr	r2, [fp, #-16]
  13438c:	e0823003 	add	r3, r2, r3
  134390:	e51b2008 	ldr	r2, [fp, #-8]
  134394:	e6ef2072 	uxtb	r2, r2
  134398:	e5c32000 	strb	r2, [r3]
    for (i = 0; i < data_len; i++)
  13439c:	e51b3008 	ldr	r3, [fp, #-8]
  1343a0:	e2833001 	add	r3, r3, #1
  1343a4:	e50b3008 	str	r3, [fp, #-8]
  1343a8:	e51b2008 	ldr	r2, [fp, #-8]
  1343ac:	e51b300c 	ldr	r3, [fp, #-12]
  1343b0:	e1520003 	cmp	r2, r3
  1343b4:	3afffff1 	bcc	134380 <ping_prepare_echo+0xcc>
    }

#ifdef RT_LWIP_USING_HW_CHECKSUM
      iecho->chksum = 0;
#else
      iecho->chksum = inet_chksum(iecho, len);
  1343b8:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  1343bc:	e1a01003 	mov	r1, r3
  1343c0:	e51b0010 	ldr	r0, [fp, #-16]
  1343c4:	ebff9191 	bl	118a10 <inet_chksum>
  1343c8:	e1a03000 	mov	r3, r0
  1343cc:	e1a02003 	mov	r2, r3
  1343d0:	e51b3010 	ldr	r3, [fp, #-16]
  1343d4:	e1c320b2 	strh	r2, [r3, #2]
#endif

}
  1343d8:	e320f000 	nop	{0}
  1343dc:	e24bd004 	sub	sp, fp, #4
  1343e0:	e8bd8800 	pop	{fp, pc}

001343e4 <lwip_ping_send>:

#include <stdio.h>

/* Ping using the socket ip */
err_t lwip_ping_send(int s, ip_addr_t *addr, int size)
{
  1343e4:	e92d4800 	push	{fp, lr}
  1343e8:	e28db004 	add	fp, sp, #4
  1343ec:	e24dd038 	sub	sp, sp, #56	; 0x38
  1343f0:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  1343f4:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  1343f8:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
    int err;
    struct icmp_echo_hdr *iecho;
    struct sockaddr_in to;
    int ping_size = sizeof(struct icmp_echo_hdr) + size;
  1343fc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134400:	e2833008 	add	r3, r3, #8
  134404:	e50b3008 	str	r3, [fp, #-8]
    LWIP_ASSERT("ping_size is too big", ping_size <= 0xffff);
  134408:	e51b3008 	ldr	r3, [fp, #-8]
  13440c:	e3530801 	cmp	r3, #65536	; 0x10000
  134410:	ba000006 	blt	134430 <lwip_ping_send+0x4c>
  134414:	e3090b48 	movw	r0, #39752	; 0x9b48
  134418:	e3400014 	movt	r0, #20
  13441c:	ebff3b3c 	bl	103114 <rt_kprintf>
  134420:	e3a01054 	mov	r1, #84	; 0x54
  134424:	e3090b60 	movw	r0, #39776	; 0x9b60
  134428:	e3400014 	movt	r0, #20
  13442c:	ebff5b2f 	bl	10b0f0 <sys_arch_assert>

    iecho = rt_malloc(ping_size);
  134430:	e51b3008 	ldr	r3, [fp, #-8]
  134434:	e1a00003 	mov	r0, r3
  134438:	ebff3ad5 	bl	102f94 <rt_malloc>
  13443c:	e50b000c 	str	r0, [fp, #-12]
    if (iecho == RT_NULL)
  134440:	e51b300c 	ldr	r3, [fp, #-12]
  134444:	e3530000 	cmp	r3, #0
  134448:	1a000001 	bne	134454 <lwip_ping_send+0x70>
    {
        return ERR_MEM;
  13444c:	e3e03000 	mvn	r3, #0
  134450:	ea00001e 	b	1344d0 <lwip_ping_send+0xec>
    }

    ping_prepare_echo(iecho, (u16_t) ping_size);
  134454:	e51b3008 	ldr	r3, [fp, #-8]
  134458:	e6ff3073 	uxth	r3, r3
  13445c:	e1a01003 	mov	r1, r3
  134460:	e51b000c 	ldr	r0, [fp, #-12]
  134464:	ebffff92 	bl	1342b4 <ping_prepare_echo>

    to.sin_len = sizeof(to);
  134468:	e3a03010 	mov	r3, #16
  13446c:	e54b3020 	strb	r3, [fp, #-32]	; 0xffffffe0
    to.sin_family = AF_INET;
  134470:	e3a03002 	mov	r3, #2
  134474:	e54b301f 	strb	r3, [fp, #-31]	; 0xffffffe1
#if LWIP_IPV4 && LWIP_IPV6
    to.sin_addr.s_addr = addr->u_addr.ip4.addr;
#elif LWIP_IPV4
    to.sin_addr.s_addr = addr->addr;
  134478:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  13447c:	e5933000 	ldr	r3, [r3]
  134480:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
#elif LWIP_IPV6
#error Not supported IPv6.
#endif

    err = lwip_sendto(s, iecho, ping_size, 0, (struct sockaddr*) &to, sizeof(to));
  134484:	e51b2008 	ldr	r2, [fp, #-8]
  134488:	e3a03010 	mov	r3, #16
  13448c:	e58d3004 	str	r3, [sp, #4]
  134490:	e24b3020 	sub	r3, fp, #32
  134494:	e58d3000 	str	r3, [sp]
  134498:	e3a03000 	mov	r3, #0
  13449c:	e51b100c 	ldr	r1, [fp, #-12]
  1344a0:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1344a4:	ebff797a 	bl	112a94 <lwip_sendto>
  1344a8:	e50b0010 	str	r0, [fp, #-16]
    rt_free(iecho);
  1344ac:	e51b000c 	ldr	r0, [fp, #-12]
  1344b0:	ebff3ac1 	bl	102fbc <rt_free>

    return (err == ping_size ? ERR_OK : ERR_VAL);
  1344b4:	e51b2010 	ldr	r2, [fp, #-16]
  1344b8:	e51b3008 	ldr	r3, [fp, #-8]
  1344bc:	e1520003 	cmp	r2, r3
  1344c0:	1a000001 	bne	1344cc <lwip_ping_send+0xe8>
  1344c4:	e3a03000 	mov	r3, #0
  1344c8:	ea000000 	b	1344d0 <lwip_ping_send+0xec>
  1344cc:	e3e03005 	mvn	r3, #5
}
  1344d0:	e1a00003 	mov	r0, r3
  1344d4:	e24bd004 	sub	sp, fp, #4
  1344d8:	e8bd8800 	pop	{fp, pc}

001344dc <lwip_ping_recv>:

int lwip_ping_recv(int s, int *ttl)
{
  1344dc:	e92d4810 	push	{r4, fp, lr}
  1344e0:	e28db008 	add	fp, sp, #8
  1344e4:	e24dd074 	sub	sp, sp, #116	; 0x74
  1344e8:	e50b0070 	str	r0, [fp, #-112]	; 0xffffff90
  1344ec:	e50b1074 	str	r1, [fp, #-116]	; 0xffffff8c
    char buf[64];
    int fromlen = sizeof(struct sockaddr_in), len;
  1344f0:	e3a03010 	mov	r3, #16
  1344f4:	e50b305c 	str	r3, [fp, #-92]	; 0xffffffa4
    struct sockaddr_in from;
    struct ip_hdr *iphdr;
    struct icmp_echo_hdr *iecho;

    while ((len = lwip_recvfrom(s, buf, sizeof(buf), 0, (struct sockaddr*) &from, (socklen_t*) &fromlen)) > 0)
  1344f8:	ea000024 	b	134590 <lwip_ping_recv+0xb4>
    {
        if (len >= (int)(sizeof(struct ip_hdr) + sizeof(struct icmp_echo_hdr)))
  1344fc:	e51b3010 	ldr	r3, [fp, #-16]
  134500:	e353001b 	cmp	r3, #27
  134504:	da000021 	ble	134590 <lwip_ping_recv+0xb4>
        {
            iphdr = (struct ip_hdr *) buf;
  134508:	e24b3058 	sub	r3, fp, #88	; 0x58
  13450c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
            iecho = (struct icmp_echo_hdr *) (buf + (IPH_HL(iphdr) * 4));
  134510:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  134514:	e5d33000 	ldrb	r3, [r3]
  134518:	e203300f 	and	r3, r3, #15
  13451c:	e1a03103 	lsl	r3, r3, #2
  134520:	e1a02003 	mov	r2, r3
  134524:	e24b3058 	sub	r3, fp, #88	; 0x58
  134528:	e0833002 	add	r3, r3, r2
  13452c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
            if ((iecho->id == PING_ID) && (iecho->seqno == htons(ping_seq_num)))
  134530:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  134534:	e1d330b4 	ldrh	r3, [r3, #4]
  134538:	e6ff3073 	uxth	r3, r3
  13453c:	e30a2faf 	movw	r2, #44975	; 0xafaf
  134540:	e1530002 	cmp	r3, r2
  134544:	1a000011 	bne	134590 <lwip_ping_recv+0xb4>
  134548:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  13454c:	e1d330b6 	ldrh	r3, [r3, #6]
  134550:	e6ff4073 	uxth	r4, r3
  134554:	e30e3bfe 	movw	r3, #60414	; 0xebfe
  134558:	e3403014 	movt	r3, #20
  13455c:	e1d330b0 	ldrh	r3, [r3]
  134560:	e1a00003 	mov	r0, r3
  134564:	ebff881a 	bl	1165d4 <lwip_htons>
  134568:	e1a03000 	mov	r3, r0
  13456c:	e1540003 	cmp	r4, r3
  134570:	1a000006 	bne	134590 <lwip_ping_recv+0xb4>
            {
                *ttl = iphdr->_ttl;
  134574:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  134578:	e5d33008 	ldrb	r3, [r3, #8]
  13457c:	e1a02003 	mov	r2, r3
  134580:	e51b3074 	ldr	r3, [fp, #-116]	; 0xffffff8c
  134584:	e5832000 	str	r2, [r3]
                return len;
  134588:	e51b3010 	ldr	r3, [fp, #-16]
  13458c:	ea00000d 	b	1345c8 <lwip_ping_recv+0xec>
    while ((len = lwip_recvfrom(s, buf, sizeof(buf), 0, (struct sockaddr*) &from, (socklen_t*) &fromlen)) > 0)
  134590:	e24b1058 	sub	r1, fp, #88	; 0x58
  134594:	e24b305c 	sub	r3, fp, #92	; 0x5c
  134598:	e58d3004 	str	r3, [sp, #4]
  13459c:	e24b306c 	sub	r3, fp, #108	; 0x6c
  1345a0:	e58d3000 	str	r3, [sp]
  1345a4:	e3a03000 	mov	r3, #0
  1345a8:	e3a02040 	mov	r2, #64	; 0x40
  1345ac:	e51b0070 	ldr	r0, [fp, #-112]	; 0xffffff90
  1345b0:	ebff75cc 	bl	111ce8 <lwip_recvfrom>
  1345b4:	e50b0010 	str	r0, [fp, #-16]
  1345b8:	e51b3010 	ldr	r3, [fp, #-16]
  1345bc:	e3530000 	cmp	r3, #0
  1345c0:	caffffcd 	bgt	1344fc <lwip_ping_recv+0x20>
            }
        }
    }

    return len;
  1345c4:	e51b3010 	ldr	r3, [fp, #-16]
}
  1345c8:	e1a00003 	mov	r0, r3
  1345cc:	e24bd008 	sub	sp, fp, #8
  1345d0:	e8bd8810 	pop	{r4, fp, pc}

001345d4 <ENET_ActiveRead>:
 * @note This must be called after the MAC configuration and
 * state are ready. It must be called after the ENET_Init() and
 * ENET_Ptp1588Configure(). This should be called when the ENET receive required.
 */
static inline void ENET_ActiveRead(ENET_Type *base)
{
  1345d4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1345d8:	e28db000 	add	fp, sp, #0
  1345dc:	e24dd00c 	sub	sp, sp, #12
  1345e0:	e50b0008 	str	r0, [fp, #-8]
    base->RDAR = ENET_RDAR_RDAR_MASK;
  1345e4:	e51b3008 	ldr	r3, [fp, #-8]
  1345e8:	e3a02401 	mov	r2, #16777216	; 0x1000000
  1345ec:	e5832010 	str	r2, [r3, #16]
}
  1345f0:	e320f000 	nop	{0}
  1345f4:	e28bd000 	add	sp, fp, #0
  1345f8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1345fc:	e12fff1e 	bx	lr

00134600 <ENET_EnableInterrupts>:
 * @param base  ENET peripheral base address.
 * @param mask  ENET interrupts to enable. This is a logical OR of the
 *             enumeration :: enet_interrupt_enable_t.
 */
static inline void ENET_EnableInterrupts(ENET_Type *base, uint32_t mask)
{
  134600:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  134604:	e28db000 	add	fp, sp, #0
  134608:	e24dd00c 	sub	sp, sp, #12
  13460c:	e50b0008 	str	r0, [fp, #-8]
  134610:	e50b100c 	str	r1, [fp, #-12]
    base->EIMR |= mask;
  134614:	e51b3008 	ldr	r3, [fp, #-8]
  134618:	e5932008 	ldr	r2, [r3, #8]
  13461c:	e51b300c 	ldr	r3, [fp, #-12]
  134620:	e1822003 	orr	r2, r2, r3
  134624:	e51b3008 	ldr	r3, [fp, #-8]
  134628:	e5832008 	str	r2, [r3, #8]
}
  13462c:	e320f000 	nop	{0}
  134630:	e28bd000 	add	sp, fp, #0
  134634:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  134638:	e12fff1e 	bx	lr

0013463c <ENET_DisableInterrupts>:
 * @param base  ENET peripheral base address.
 * @param mask  ENET interrupts to disable. This is a logical OR of the
 *             enumeration :: enet_interrupt_enable_t.
 */
static inline void ENET_DisableInterrupts(ENET_Type *base, uint32_t mask)
{
  13463c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  134640:	e28db000 	add	fp, sp, #0
  134644:	e24dd00c 	sub	sp, sp, #12
  134648:	e50b0008 	str	r0, [fp, #-8]
  13464c:	e50b100c 	str	r1, [fp, #-12]
    base->EIMR &= ~mask;
  134650:	e51b3008 	ldr	r3, [fp, #-8]
  134654:	e5932008 	ldr	r2, [r3, #8]
  134658:	e51b300c 	ldr	r3, [fp, #-12]
  13465c:	e1e03003 	mvn	r3, r3
  134660:	e0022003 	and	r2, r2, r3
  134664:	e51b3008 	ldr	r3, [fp, #-8]
  134668:	e5832008 	str	r2, [r3, #8]
}
  13466c:	e320f000 	nop	{0}
  134670:	e28bd000 	add	sp, fp, #0
  134674:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  134678:	e12fff1e 	bx	lr

0013467c <imx6ul_eth_link_change>:
#else
#define eth_device_linkchange(x, y)
#endif

void imx6ul_eth_link_change(struct rt_imx6ul_ethps *imx6ul_device,rt_bool_t up)
{
  13467c:	e92d4800 	push	{fp, lr}
  134680:	e28db004 	add	fp, sp, #4
  134684:	e24dd008 	sub	sp, sp, #8
  134688:	e50b0008 	str	r0, [fp, #-8]
  13468c:	e50b100c 	str	r1, [fp, #-12]
    if(up)
  134690:	e51b300c 	ldr	r3, [fp, #-12]
  134694:	e3530000 	cmp	r3, #0
  134698:	0a000013 	beq	1346ec <imx6ul_eth_link_change+0x70>
    {
        LOG_D("enet%d link up",imx6ul_device->mac_num);
  13469c:	e3090ba4 	movw	r0, #39844	; 0x9ba4
  1346a0:	e3400014 	movt	r0, #20
  1346a4:	ebff3a9a 	bl	103114 <rt_kprintf>
  1346a8:	e51b3008 	ldr	r3, [fp, #-8]
  1346ac:	e59330a4 	ldr	r3, [r3, #164]	; 0xa4
  1346b0:	e1a01003 	mov	r1, r3
  1346b4:	e3090bb8 	movw	r0, #39864	; 0x9bb8
  1346b8:	e3400014 	movt	r0, #20
  1346bc:	ebff3a94 	bl	103114 <rt_kprintf>
  1346c0:	e3090bc8 	movw	r0, #39880	; 0x9bc8
  1346c4:	e3400014 	movt	r0, #20
  1346c8:	ebff3a91 	bl	103114 <rt_kprintf>
        eth_device_linkchange(&imx6ul_device->parent, RT_TRUE);
  1346cc:	e51b3008 	ldr	r3, [fp, #-8]
  1346d0:	e3a01001 	mov	r1, #1
  1346d4:	e1a00003 	mov	r0, r3
  1346d8:	ebffd532 	bl	129ba8 <eth_device_linkchange>
        imx6ul_device->phy_link_status = RT_TRUE;
  1346dc:	e51b3008 	ldr	r3, [fp, #-8]
  1346e0:	e3a02001 	mov	r2, #1
  1346e4:	e5832088 	str	r2, [r3, #136]	; 0x88
    {
        LOG_D("enet%d link down",imx6ul_device->mac_num);
        eth_device_linkchange(&imx6ul_device->parent, RT_FALSE);
        imx6ul_device->phy_link_status = RT_FALSE;
    }
}
  1346e8:	ea000012 	b	134738 <imx6ul_eth_link_change+0xbc>
        LOG_D("enet%d link down",imx6ul_device->mac_num);
  1346ec:	e3090ba4 	movw	r0, #39844	; 0x9ba4
  1346f0:	e3400014 	movt	r0, #20
  1346f4:	ebff3a86 	bl	103114 <rt_kprintf>
  1346f8:	e51b3008 	ldr	r3, [fp, #-8]
  1346fc:	e59330a4 	ldr	r3, [r3, #164]	; 0xa4
  134700:	e1a01003 	mov	r1, r3
  134704:	e3090bd0 	movw	r0, #39888	; 0x9bd0
  134708:	e3400014 	movt	r0, #20
  13470c:	ebff3a80 	bl	103114 <rt_kprintf>
  134710:	e3090bc8 	movw	r0, #39880	; 0x9bc8
  134714:	e3400014 	movt	r0, #20
  134718:	ebff3a7d 	bl	103114 <rt_kprintf>
        eth_device_linkchange(&imx6ul_device->parent, RT_FALSE);
  13471c:	e51b3008 	ldr	r3, [fp, #-8]
  134720:	e3a01000 	mov	r1, #0
  134724:	e1a00003 	mov	r0, r3
  134728:	ebffd51e 	bl	129ba8 <eth_device_linkchange>
        imx6ul_device->phy_link_status = RT_FALSE;
  13472c:	e51b3008 	ldr	r3, [fp, #-8]
  134730:	e3a02000 	mov	r2, #0
  134734:	e5832088 	str	r2, [r3, #136]	; 0x88
}
  134738:	e320f000 	nop	{0}
  13473c:	e24bd004 	sub	sp, fp, #4
  134740:	e8bd8800 	pop	{fp, pc}

00134744 <page_alloc>:

void page_alloc(size_t memsize, void **addr)
{
  134744:	e92d4800 	push	{fp, lr}
  134748:	e28db004 	add	fp, sp, #4
  13474c:	e24dd018 	sub	sp, sp, #24
  134750:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  134754:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    size_t alloc_size = memsize + SYS_PAGE_SIZE * 2;
  134758:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  13475c:	e2833a02 	add	r3, r3, #8192	; 0x2000
  134760:	e50b3008 	str	r3, [fp, #-8]
    void * addr_start = malloc(alloc_size);
  134764:	e51b0008 	ldr	r0, [fp, #-8]
  134768:	eb0022f9 	bl	13d354 <malloc>
  13476c:	e1a03000 	mov	r3, r0
  134770:	e50b300c 	str	r3, [fp, #-12]
    rt_memset(addr_start, 0, alloc_size);
  134774:	e51b2008 	ldr	r2, [fp, #-8]
  134778:	e3a01000 	mov	r1, #0
  13477c:	e51b000c 	ldr	r0, [fp, #-12]
  134780:	ebff3ad0 	bl	1032c8 <rt_memset>

    long mask = SYS_PAGE_SIZE - 1;
  134784:	e3003fff 	movw	r3, #4095	; 0xfff
  134788:	e50b3010 	str	r3, [fp, #-16]
    *addr = (void*)((long)(addr_start + SYS_PAGE_SIZE) & ~mask);
  13478c:	e51b300c 	ldr	r3, [fp, #-12]
  134790:	e2833a01 	add	r3, r3, #4096	; 0x1000
  134794:	e1a02003 	mov	r2, r3
  134798:	e51b3010 	ldr	r3, [fp, #-16]
  13479c:	e1e03003 	mvn	r3, r3
  1347a0:	e0033002 	and	r3, r3, r2
  1347a4:	e1a02003 	mov	r2, r3
  1347a8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1347ac:	e5832000 	str	r2, [r3]

    return;
  1347b0:	e320f000 	nop	{0}
}
  1347b4:	e24bd004 	sub	sp, fp, #4
  1347b8:	e8bd8800 	pop	{fp, pc}

001347bc <enet_buffer_init>:

rt_err_t enet_buffer_init(enet_buffer_config_t *buffConfig)
{
  1347bc:	e92d4800 	push	{fp, lr}
  1347c0:	e28db004 	add	fp, sp, #4
  1347c4:	e24dd030 	sub	sp, sp, #48	; 0x30
  1347c8:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
    void *tx_buff_addr = RT_NULL;
  1347cc:	e3a03000 	mov	r3, #0
  1347d0:	e50b3008 	str	r3, [fp, #-8]
    void *rx_buff_addr = RT_NULL;
  1347d4:	e3a03000 	mov	r3, #0
  1347d8:	e50b300c 	str	r3, [fp, #-12]
    void *tx_bd_addr = RT_NULL;
  1347dc:	e3a03000 	mov	r3, #0
  1347e0:	e50b3010 	str	r3, [fp, #-16]
    void *rx_bd_addr = RT_NULL;
  1347e4:	e3a03000 	mov	r3, #0
  1347e8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

    if(((SYS_PAGE_SIZE<<RX_BUFFER_INDEX_NUM)<buffConfig->rxBufferTotalSize)||
  1347ec:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1347f0:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  1347f4:	e3530701 	cmp	r3, #262144	; 0x40000
  1347f8:	8a000003 	bhi	13480c <enet_buffer_init+0x50>
       ((SYS_PAGE_SIZE<<TX_BUFFER_INDEX_NUM)<buffConfig->txBufferTotalSize))
  1347fc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134800:	e5933030 	ldr	r3, [r3, #48]	; 0x30
    if(((SYS_PAGE_SIZE<<RX_BUFFER_INDEX_NUM)<buffConfig->rxBufferTotalSize)||
  134804:	e3530701 	cmp	r3, #262144	; 0x40000
  134808:	9a00000a 	bls	134838 <enet_buffer_init+0x7c>
    {
        LOG_E("ERROR: alloc mem not enough for enet driver");
  13480c:	e3090be4 	movw	r0, #39908	; 0x9be4
  134810:	e3400014 	movt	r0, #20
  134814:	ebff3a3e 	bl	103114 <rt_kprintf>
  134818:	e3090bf8 	movw	r0, #39928	; 0x9bf8
  13481c:	e3400014 	movt	r0, #20
  134820:	ebff3a3b 	bl	103114 <rt_kprintf>
  134824:	e3090bc8 	movw	r0, #39880	; 0x9bc8
  134828:	e3400014 	movt	r0, #20
  13482c:	ebff3a38 	bl	103114 <rt_kprintf>
        return RT_ERROR;
  134830:	e3a03001 	mov	r3, #1
  134834:	ea000093 	b	134a88 <enet_buffer_init+0x2cc>
    }

    size_t rx_buff_memsize = SYS_PAGE_SIZE<<RX_BUFFER_INDEX_NUM;
  134838:	e3a03701 	mov	r3, #262144	; 0x40000
  13483c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    size_t tx_buff_memsize = SYS_PAGE_SIZE<<TX_BUFFER_INDEX_NUM;
  134840:	e3a03701 	mov	r3, #262144	; 0x40000
  134844:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    size_t rx_bd_memsize = SYS_PAGE_SIZE<<RX_BD_INDEX_NUM;
  134848:	e3a03a01 	mov	r3, #4096	; 0x1000
  13484c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    size_t tx_bd_memsize = SYS_PAGE_SIZE<<TX_BD_INDEX_NUM;
  134850:	e3a03a01 	mov	r3, #4096	; 0x1000
  134854:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    size_t total_memsize = rx_buff_memsize + tx_buff_memsize + rx_bd_memsize + tx_bd_memsize;
  134858:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  13485c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  134860:	e0822003 	add	r2, r2, r3
  134864:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  134868:	e0823003 	add	r3, r2, r3
  13486c:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  134870:	e0823003 	add	r3, r2, r3
  134874:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8

    void *mem_align= RT_NULL;
  134878:	e3a03000 	mov	r3, #0
  13487c:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
    page_alloc(total_memsize, &mem_align);
  134880:	e24b302c 	sub	r3, fp, #44	; 0x2c
  134884:	e1a01003 	mov	r1, r3
  134888:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  13488c:	ebffffac 	bl	134744 <page_alloc>
    if (!mem_align)
  134890:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  134894:	e3530000 	cmp	r3, #0
  134898:	1a000001 	bne	1348a4 <enet_buffer_init+0xe8>
    {
        return RT_ERROR;
  13489c:	e3a03001 	mov	r3, #1
  1348a0:	ea000078 	b	134a88 <enet_buffer_init+0x2cc>
    }
    
    rx_buff_addr = mem_align;
  1348a4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1348a8:	e50b300c 	str	r3, [fp, #-12]
    mem_align += rx_buff_memsize;
  1348ac:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  1348b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1348b4:	e0823003 	add	r3, r2, r3
  1348b8:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
    if(!rx_buff_addr)
  1348bc:	e51b300c 	ldr	r3, [fp, #-12]
  1348c0:	e3530000 	cmp	r3, #0
  1348c4:	1a00000a 	bne	1348f4 <enet_buffer_init+0x138>
    {
        LOG_E("ERROR: rx buff page alloc failed");
  1348c8:	e3090be4 	movw	r0, #39908	; 0x9be4
  1348cc:	e3400014 	movt	r0, #20
  1348d0:	ebff3a0f 	bl	103114 <rt_kprintf>
  1348d4:	e3090c24 	movw	r0, #39972	; 0x9c24
  1348d8:	e3400014 	movt	r0, #20
  1348dc:	ebff3a0c 	bl	103114 <rt_kprintf>
  1348e0:	e3090bc8 	movw	r0, #39880	; 0x9bc8
  1348e4:	e3400014 	movt	r0, #20
  1348e8:	ebff3a09 	bl	103114 <rt_kprintf>
        return RT_ERROR;
  1348ec:	e3a03001 	mov	r3, #1
  1348f0:	ea000064 	b	134a88 <enet_buffer_init+0x2cc>
    }
    // buffConfig->rxBufferAlign = (void *)rt_ioremap_nocache(virtual_to_physical(rx_buff_addr), (SYS_PAGE_SIZE<<RX_BUFFER_INDEX_NUM));
    // buffConfig->rxBufferAlign = ueth_remap(ueth_v2p(rx_buff_addr), UETH_REMAP_NOCACHE, rx_buff_memsize);
    buffConfig->rxBufferAlign = rx_buff_addr;
  1348f4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1348f8:	e51b200c 	ldr	r2, [fp, #-12]
  1348fc:	e5832014 	str	r2, [r3, #20]
    buffConfig->rxPhyBufferAlign = ueth_v2p(rx_buff_addr);
  134900:	e51b000c 	ldr	r0, [fp, #-12]
  134904:	ebff3ebd 	bl	104400 <ueth_v2p>
  134908:	e1a02000 	mov	r2, r0
  13490c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134910:	e5832024 	str	r2, [r3, #36]	; 0x24
    
    // tx_buff_addr = (void*)rt_pages_alloc(TX_BUFFER_INDEX_NUM);
    tx_buff_addr = mem_align;
  134914:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  134918:	e50b3008 	str	r3, [fp, #-8]
    mem_align += tx_buff_memsize;
  13491c:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  134920:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  134924:	e0823003 	add	r3, r2, r3
  134928:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
    if(!tx_buff_addr)
  13492c:	e51b3008 	ldr	r3, [fp, #-8]
  134930:	e3530000 	cmp	r3, #0
  134934:	1a00000a 	bne	134964 <enet_buffer_init+0x1a8>
    {
        LOG_E("ERROR: tx buff page alloc failed");
  134938:	e3090be4 	movw	r0, #39908	; 0x9be4
  13493c:	e3400014 	movt	r0, #20
  134940:	ebff39f3 	bl	103114 <rt_kprintf>
  134944:	e3090c48 	movw	r0, #40008	; 0x9c48
  134948:	e3400014 	movt	r0, #20
  13494c:	ebff39f0 	bl	103114 <rt_kprintf>
  134950:	e3090bc8 	movw	r0, #39880	; 0x9bc8
  134954:	e3400014 	movt	r0, #20
  134958:	ebff39ed 	bl	103114 <rt_kprintf>
        return RT_ERROR;
  13495c:	e3a03001 	mov	r3, #1
  134960:	ea000048 	b	134a88 <enet_buffer_init+0x2cc>
    }
    // buffConfig->txBufferAlign = (void *)rt_ioremap_nocache(virtual_to_physical(tx_buff_addr), (SYS_PAGE_SIZE<<TX_BUFFER_INDEX_NUM));
    // buffConfig->txBufferAlign = ueth_remap(ueth_v2p(tx_buff_addr), UETH_REMAP_NOCACHE, tx_buff_memsize);
    buffConfig->txBufferAlign = tx_buff_addr;
  134964:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134968:	e51b2008 	ldr	r2, [fp, #-8]
  13496c:	e5832018 	str	r2, [r3, #24]
    buffConfig->txPhyBufferAlign = ueth_v2p(tx_buff_addr);
  134970:	e51b0008 	ldr	r0, [fp, #-8]
  134974:	ebff3ea1 	bl	104400 <ueth_v2p>
  134978:	e1a02000 	mov	r2, r0
  13497c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134980:	e5832028 	str	r2, [r3, #40]	; 0x28
    
    // rx_bd_addr = (void*)rt_pages_alloc(RX_BD_INDEX_NUM);
    rx_bd_addr = mem_align;
  134984:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  134988:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    mem_align += rx_bd_memsize;
  13498c:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  134990:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  134994:	e0823003 	add	r3, r2, r3
  134998:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
    if(!rx_bd_addr)
  13499c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1349a0:	e3530000 	cmp	r3, #0
  1349a4:	1a00000a 	bne	1349d4 <enet_buffer_init+0x218>
    {
        LOG_E("ERROR: rx bd page alloc failed");
  1349a8:	e3090be4 	movw	r0, #39908	; 0x9be4
  1349ac:	e3400014 	movt	r0, #20
  1349b0:	ebff39d7 	bl	103114 <rt_kprintf>
  1349b4:	e3090c6c 	movw	r0, #40044	; 0x9c6c
  1349b8:	e3400014 	movt	r0, #20
  1349bc:	ebff39d4 	bl	103114 <rt_kprintf>
  1349c0:	e3090bc8 	movw	r0, #39880	; 0x9bc8
  1349c4:	e3400014 	movt	r0, #20
  1349c8:	ebff39d1 	bl	103114 <rt_kprintf>
        return RT_ERROR;
  1349cc:	e3a03001 	mov	r3, #1
  1349d0:	ea00002c 	b	134a88 <enet_buffer_init+0x2cc>
    }
    buffConfig->rxPhyBdStartAddrAlign = ueth_v2p(rx_bd_addr);
  1349d4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1349d8:	ebff3e88 	bl	104400 <ueth_v2p>
  1349dc:	e1a02000 	mov	r2, r0
  1349e0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1349e4:	e583201c 	str	r2, [r3, #28]
    buffConfig->rxBdStartAddrAlign = ueth_remap(buffConfig->rxPhyBdStartAddrAlign, UETH_REMAP_NOCACHE, rx_bd_memsize);
  1349e8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1349ec:	e593301c 	ldr	r3, [r3, #28]
  1349f0:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1349f4:	e3a01003 	mov	r1, #3
  1349f8:	e1a00003 	mov	r0, r3
  1349fc:	ebff3eac 	bl	1044b4 <ueth_remap>
  134a00:	e1a02000 	mov	r2, r0
  134a04:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134a08:	e583200c 	str	r2, [r3, #12]
    // buffConfig->rxBdStartAddrAlign = (void *)rt_ioremap_nocache(virtual_to_physical(rx_bd_addr), (SYS_PAGE_SIZE<<RX_BD_INDEX_NUM));
    // buffConfig->rxBdStartAddrAlign = rx_bd_addr;
   
    // tx_bd_addr = (void*)rt_pages_alloc(TX_BD_INDEX_NUM);
    tx_bd_addr = mem_align;
  134a0c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  134a10:	e50b3010 	str	r3, [fp, #-16]
    if(!tx_bd_addr)
  134a14:	e51b3010 	ldr	r3, [fp, #-16]
  134a18:	e3530000 	cmp	r3, #0
  134a1c:	1a00000a 	bne	134a4c <enet_buffer_init+0x290>
    {
        LOG_E("ERROR: tx bd page alloc failed");
  134a20:	e3090be4 	movw	r0, #39908	; 0x9be4
  134a24:	e3400014 	movt	r0, #20
  134a28:	ebff39b9 	bl	103114 <rt_kprintf>
  134a2c:	e3090c8c 	movw	r0, #40076	; 0x9c8c
  134a30:	e3400014 	movt	r0, #20
  134a34:	ebff39b6 	bl	103114 <rt_kprintf>
  134a38:	e3090bc8 	movw	r0, #39880	; 0x9bc8
  134a3c:	e3400014 	movt	r0, #20
  134a40:	ebff39b3 	bl	103114 <rt_kprintf>
        return RT_ERROR;
  134a44:	e3a03001 	mov	r3, #1
  134a48:	ea00000e 	b	134a88 <enet_buffer_init+0x2cc>
    }
    // buffConfig->txBdStartAddrAlign = (void *)rt_ioremap_nocache(virtual_to_physical(tx_bd_addr), (SYS_PAGE_SIZE<<TX_BD_INDEX_NUM));
    buffConfig->txPhyBdStartAddrAlign = ueth_v2p(tx_bd_addr);
  134a4c:	e51b0010 	ldr	r0, [fp, #-16]
  134a50:	ebff3e6a 	bl	104400 <ueth_v2p>
  134a54:	e1a02000 	mov	r2, r0
  134a58:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134a5c:	e5832020 	str	r2, [r3, #32]
    buffConfig->txBdStartAddrAlign = ueth_remap(buffConfig->txPhyBdStartAddrAlign, UETH_REMAP_NOCACHE, tx_bd_memsize);
  134a60:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134a64:	e5933020 	ldr	r3, [r3, #32]
  134a68:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  134a6c:	e3a01003 	mov	r1, #3
  134a70:	e1a00003 	mov	r0, r3
  134a74:	ebff3e8e 	bl	1044b4 <ueth_remap>
  134a78:	e1a02000 	mov	r2, r0
  134a7c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134a80:	e5832010 	str	r2, [r3, #16]
    // buffConfig->txBdStartAddrAlign = tx_bd_addr;
    
    return RT_EOK;
  134a84:	e3a03000 	mov	r3, #0
}
  134a88:	e1a00003 	mov	r0, r3
  134a8c:	e24bd004 	sub	sp, fp, #4
  134a90:	e8bd8800 	pop	{fp, pc}

00134a94 <rt_imx6ul_eth_init>:

/* EMAC initialization function */
static rt_err_t rt_imx6ul_eth_init(rt_device_t dev)
{
  134a94:	e92d4800 	push	{fp, lr}
  134a98:	e28db004 	add	fp, sp, #4
  134a9c:	e24dd038 	sub	sp, sp, #56	; 0x38
  134aa0:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
    rt_err_t state;
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)dev;
  134aa4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134aa8:	e50b300c 	str	r3, [fp, #-12]
    ENET_Type *base_addr = RT_NULL;
  134aac:	e3a03000 	mov	r3, #0
  134ab0:	e50b3010 	str	r3, [fp, #-16]
    enet_handle_t *handle;
    enet_buffer_config_t *buffConfig;
    rt_uint32_t reg_value;

    // imx6ul_device->enet_virtual_base_addr = (ENET_Type *)rt_ioremap((void *)imx6ul_device->enet_phy_base_addr, SYS_PAGE_SIZE);
    imx6ul_device->enet_virtual_base_addr = (ENET_Type *)ueth_remap((void *)imx6ul_device->enet_phy_base_addr, UETH_REMAP, SYS_PAGE_SIZE);
  134ab4:	e51b300c 	ldr	r3, [fp, #-12]
  134ab8:	e593309c 	ldr	r3, [r3, #156]	; 0x9c
  134abc:	e3a02a01 	mov	r2, #4096	; 0x1000
  134ac0:	e3a01001 	mov	r1, #1
  134ac4:	e1a00003 	mov	r0, r3
  134ac8:	ebff3e79 	bl	1044b4 <ueth_remap>
  134acc:	e1a02000 	mov	r2, r0
  134ad0:	e51b300c 	ldr	r3, [fp, #-12]
  134ad4:	e58320a0 	str	r2, [r3, #160]	; 0xa0
    base_addr = imx6ul_device->enet_virtual_base_addr;
  134ad8:	e51b300c 	ldr	r3, [fp, #-12]
  134adc:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  134ae0:	e50b3010 	str	r3, [fp, #-16]
    config = &imx6ul_device->config;
  134ae4:	e51b300c 	ldr	r3, [fp, #-12]
  134ae8:	e28330dc 	add	r3, r3, #220	; 0xdc
  134aec:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    handle = &imx6ul_device->handle;
  134af0:	e51b300c 	ldr	r3, [fp, #-12]
  134af4:	e2833c01 	add	r3, r3, #256	; 0x100
  134af8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    buffConfig = &imx6ul_device->buffConfig;
  134afc:	e51b300c 	ldr	r3, [fp, #-12]
  134b00:	e28330a8 	add	r3, r3, #168	; 0xa8
  134b04:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    for (int i=0; i<GET_ARRAY_NUM(imx6ul_device->gpio); i++)
  134b08:	e3a03000 	mov	r3, #0
  134b0c:	e50b3008 	str	r3, [fp, #-8]
  134b10:	ea00000b 	b	134b44 <rt_imx6ul_eth_init+0xb0>
    {
        ueth_gpioinit((void *)&imx6ul_device->gpio[i], sizeof(imx6ul_device->gpio[i]));
  134b14:	e51b3008 	ldr	r3, [fp, #-8]
  134b18:	e3a0201c 	mov	r2, #28
  134b1c:	e0030392 	mul	r3, r2, r3
  134b20:	e2833e12 	add	r3, r3, #288	; 0x120
  134b24:	e51b200c 	ldr	r2, [fp, #-12]
  134b28:	e0823003 	add	r3, r2, r3
  134b2c:	e3a0101c 	mov	r1, #28
  134b30:	e1a00003 	mov	r0, r3
  134b34:	ebff3e92 	bl	104584 <ueth_gpioinit>
    for (int i=0; i<GET_ARRAY_NUM(imx6ul_device->gpio); i++)
  134b38:	e51b3008 	ldr	r3, [fp, #-8]
  134b3c:	e2833001 	add	r3, r3, #1
  134b40:	e50b3008 	str	r3, [fp, #-8]
  134b44:	e51b3008 	ldr	r3, [fp, #-8]
  134b48:	e3530008 	cmp	r3, #8
  134b4c:	9afffff0 	bls	134b14 <rt_imx6ul_eth_init+0x80>
    }
    
    IOMUXC_GPR_Type *GPR1 = (IOMUXC_GPR_Type *)ueth_remap((void *)IOMUXC_GPR, UETH_REMAP, 0x1000);
  134b50:	e3a02a01 	mov	r2, #4096	; 0x1000
  134b54:	e3a01001 	mov	r1, #1
  134b58:	e3a00901 	mov	r0, #16384	; 0x4000
  134b5c:	e340020e 	movt	r0, #526	; 0x20e
  134b60:	ebff3e53 	bl	1044b4 <ueth_remap>
  134b64:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
    if(imx6ul_device->mac_num == 1)
  134b68:	e51b300c 	ldr	r3, [fp, #-12]
  134b6c:	e59330a4 	ldr	r3, [r3, #164]	; 0xa4
  134b70:	e3530001 	cmp	r3, #1
  134b74:	1a00000c 	bne	134bac <rt_imx6ul_eth_init+0x118>
    {
        reg_value = GPR1->GPR1;
  134b78:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  134b7c:	e5933004 	ldr	r3, [r3, #4]
  134b80:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        reg_value &= ~(IOMUXC_GPR_GPR1_ENET1_CLK_SEL_MASK
  134b84:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  134b88:	e3c33a02 	bic	r3, r3, #8192	; 0x2000
  134b8c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
                    | IOMUXC_GPR_GPR1_ENET1_CLK_SEL_MASK);
        reg_value |=  IOMUXC_GPR_GPR1_ENET1_TX_CLK_DIR(1);
  134b90:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  134b94:	e3833802 	orr	r3, r3, #131072	; 0x20000
  134b98:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        reg_value |=  IOMUXC_GPR_GPR1_ENET1_CLK_SEL(0);
        GPR1->GPR1 = reg_value;
  134b9c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  134ba0:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  134ba4:	e5832004 	str	r2, [r3, #4]
  134ba8:	ea00000f 	b	134bec <rt_imx6ul_eth_init+0x158>
    }
    else if(imx6ul_device->mac_num == 2)
  134bac:	e51b300c 	ldr	r3, [fp, #-12]
  134bb0:	e59330a4 	ldr	r3, [r3, #164]	; 0xa4
  134bb4:	e3530002 	cmp	r3, #2
  134bb8:	1a00000b 	bne	134bec <rt_imx6ul_eth_init+0x158>
    {
        reg_value = GPR1->GPR1;
  134bbc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  134bc0:	e5933004 	ldr	r3, [r3, #4]
  134bc4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        reg_value &= ~(IOMUXC_GPR_GPR1_ENET2_CLK_SEL_MASK
  134bc8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  134bcc:	e3c33901 	bic	r3, r3, #16384	; 0x4000
  134bd0:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
                    | IOMUXC_GPR_GPR1_ENET2_CLK_SEL_MASK);
        reg_value |=  IOMUXC_GPR_GPR1_ENET2_TX_CLK_DIR(1);
  134bd4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  134bd8:	e3833701 	orr	r3, r3, #262144	; 0x40000
  134bdc:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        reg_value |=  IOMUXC_GPR_GPR1_ENET2_CLK_SEL(0);
        GPR1->GPR1 = reg_value;
  134be0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  134be4:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  134be8:	e5832004 	str	r2, [r3, #4]
    } 

    // ENET_InitModuleClock();
    ueth_init_clock();
  134bec:	ebff3e92 	bl	10463c <ueth_init_clock>
    ENET_GetDefaultConfig(config);
  134bf0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  134bf4:	eb00047c 	bl	135dec <ENET_GetDefaultConfig>
    config->interrupt |= (ENET_RX_INTERRUPT);
  134bf8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  134bfc:	e5933004 	ldr	r3, [r3, #4]
  134c00:	e3832403 	orr	r2, r3, #50331648	; 0x3000000
  134c04:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  134c08:	e5832004 	str	r2, [r3, #4]
    state = enet_buffer_init(buffConfig);
  134c0c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  134c10:	ebfffee9 	bl	1347bc <enet_buffer_init>
  134c14:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
    if(state != RT_EOK)
  134c18:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  134c1c:	e3530000 	cmp	r3, #0
  134c20:	0a000001 	beq	134c2c <rt_imx6ul_eth_init+0x198>
    {
        return state;
  134c24:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  134c28:	ea000015 	b	134c84 <rt_imx6ul_eth_init+0x1f0>
    }
    ENET_Init(base_addr, handle, config, buffConfig, imx6ul_device->dev_addr, SYS_CLOCK_HZ);
  134c2c:	e51b300c 	ldr	r3, [fp, #-12]
  134c30:	e2832078 	add	r2, r3, #120	; 0x78
  134c34:	e3a03d52 	mov	r3, #5248	; 0x1480
  134c38:	e34033ef 	movt	r3, #1007	; 0x3ef
  134c3c:	e58d3004 	str	r3, [sp, #4]
  134c40:	e58d2000 	str	r2, [sp]
  134c44:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  134c48:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  134c4c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  134c50:	e51b0010 	ldr	r0, [fp, #-16]
  134c54:	eb000488 	bl	135e7c <ENET_Init>
    ENET_ActiveRead(base_addr);
  134c58:	e51b0010 	ldr	r0, [fp, #-16]
  134c5c:	ebfffe5c 	bl	1345d4 <ENET_ActiveRead>

    // ENET_DisableInterrupts(base_addr,ENET_RX_INTERRUPT);
    // rt_hw_interrupt_install(imx6ul_device->irq_num, (rt_isr_handler_t)ENET_DriverIRQHandler, (void *)base_addr,imx6ul_device->irq_name);     
    // rt_hw_interrupt_umask(imx6ul_device->irq_num);
#ifndef POLL_INT
    ueth_hw_interrupt_install(imx6ul_device->irq_num, (void *)imx6ul_device->enet_phy_base_addr);
  134c60:	e51b300c 	ldr	r3, [fp, #-12]
  134c64:	e5933094 	ldr	r3, [r3, #148]	; 0x94
  134c68:	e1a02003 	mov	r2, r3
  134c6c:	e51b300c 	ldr	r3, [fp, #-12]
  134c70:	e593309c 	ldr	r3, [r3, #156]	; 0x9c
  134c74:	e1a01003 	mov	r1, r3
  134c78:	e1a00002 	mov	r0, r2
  134c7c:	ebff3eec 	bl	104834 <ueth_hw_interrupt_install>
#endif

    return RT_EOK;
  134c80:	e3a03000 	mov	r3, #0
}
  134c84:	e1a00003 	mov	r0, r3
  134c88:	e24bd004 	sub	sp, fp, #4
  134c8c:	e8bd8800 	pop	{fp, pc}

00134c90 <rt_imx6ul_eth_control>:

static rt_err_t rt_imx6ul_eth_control(rt_device_t dev, int cmd, void *args)
{
  134c90:	e92d4800 	push	{fp, lr}
  134c94:	e28db004 	add	fp, sp, #4
  134c98:	e24dd028 	sub	sp, sp, #40	; 0x28
  134c9c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  134ca0:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  134ca4:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)dev;
  134ca8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  134cac:	e50b3008 	str	r3, [fp, #-8]

    
    switch (cmd)
  134cb0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  134cb4:	e3530001 	cmp	r3, #1
  134cb8:	0a000000 	beq	134cc0 <rt_imx6ul_eth_control+0x30>
            return -RT_ERROR;
        }
        break;

    default :
        break;
  134cbc:	ea000070 	b	134e84 <rt_imx6ul_eth_control+0x1f4>
        if (args)
  134cc0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  134cc4:	e3530000 	cmp	r3, #0
  134cc8:	0a00006b 	beq	134e7c <rt_imx6ul_eth_control+0x1ec>
            rt_uint32_t uid_crc = 0;
  134ccc:	e3a03000 	mov	r3, #0
  134cd0:	e50b300c 	str	r3, [fp, #-12]
            ocotp_base = (OCOTP_Type *)ueth_remap((void*)OCOTP_BASE, UETH_REMAP, 0x1000);
  134cd4:	e3a02a01 	mov	r2, #4096	; 0x1000
  134cd8:	e3a01001 	mov	r1, #1
  134cdc:	e3a00903 	mov	r0, #49152	; 0xc000
  134ce0:	e340021b 	movt	r0, #539	; 0x21b
  134ce4:	ebff3df2 	bl	1044b4 <ueth_remap>
  134ce8:	e50b0010 	str	r0, [fp, #-16]
            uid[0] = ocotp_base->CFG0;
  134cec:	e51b3010 	ldr	r3, [fp, #-16]
  134cf0:	e5933410 	ldr	r3, [r3, #1040]	; 0x410
  134cf4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
            uid[1] = ocotp_base->CFG1;
  134cf8:	e51b3010 	ldr	r3, [fp, #-16]
  134cfc:	e5933420 	ldr	r3, [r3, #1056]	; 0x420
  134d00:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
            ueth_remap(ocotp_base, UETH_UNMAP, 0);
  134d04:	e3a02000 	mov	r2, #0
  134d08:	e3a01002 	mov	r1, #2
  134d0c:	e51b0010 	ldr	r0, [fp, #-16]
  134d10:	ebff3de7 	bl	1044b4 <ueth_remap>
            LOG_D("UNIQUE_ID is %x%x",uid[0], uid[1]);
  134d14:	e3090ba4 	movw	r0, #39844	; 0x9ba4
  134d18:	e3400014 	movt	r0, #20
  134d1c:	ebff38fc 	bl	103114 <rt_kprintf>
  134d20:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  134d24:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  134d28:	e1a01003 	mov	r1, r3
  134d2c:	e3090cac 	movw	r0, #40108	; 0x9cac
  134d30:	e3400014 	movt	r0, #20
  134d34:	ebff38f6 	bl	103114 <rt_kprintf>
  134d38:	e3090bc8 	movw	r0, #39880	; 0x9bc8
  134d3c:	e3400014 	movt	r0, #20
  134d40:	ebff38f3 	bl	103114 <rt_kprintf>
            uid_crc = uid[0] - uid[1];
  134d44:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  134d48:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  134d4c:	e0423003 	sub	r3, r2, r3
  134d50:	e50b300c 	str	r3, [fp, #-12]
            LOG_D("UNIQUE_ID change to 32 bits %x", uid_crc);
  134d54:	e3090ba4 	movw	r0, #39844	; 0x9ba4
  134d58:	e3400014 	movt	r0, #20
  134d5c:	ebff38ec 	bl	103114 <rt_kprintf>
  134d60:	e51b100c 	ldr	r1, [fp, #-12]
  134d64:	e3090cc0 	movw	r0, #40128	; 0x9cc0
  134d68:	e3400014 	movt	r0, #20
  134d6c:	ebff38e8 	bl	103114 <rt_kprintf>
  134d70:	e3090bc8 	movw	r0, #39880	; 0x9bc8
  134d74:	e3400014 	movt	r0, #20
  134d78:	ebff38e5 	bl	103114 <rt_kprintf>
            if (imx6ul_device->enet_phy_base_addr == ENET1)
  134d7c:	e51b3008 	ldr	r3, [fp, #-8]
  134d80:	e593209c 	ldr	r2, [r3, #156]	; 0x9c
  134d84:	e3a03902 	mov	r3, #32768	; 0x8000
  134d88:	e3403218 	movt	r3, #536	; 0x218
  134d8c:	e1520003 	cmp	r2, r3
  134d90:	1a000019 	bne	134dfc <rt_imx6ul_eth_control+0x16c>
                imx6ul_device->dev_addr[0] = 0xa8;
  134d94:	e51b3008 	ldr	r3, [fp, #-8]
  134d98:	e3e02057 	mvn	r2, #87	; 0x57
  134d9c:	e5c32078 	strb	r2, [r3, #120]	; 0x78
                imx6ul_device->dev_addr[1] = 0x5e;
  134da0:	e51b3008 	ldr	r3, [fp, #-8]
  134da4:	e3a0205e 	mov	r2, #94	; 0x5e
  134da8:	e5c32079 	strb	r2, [r3, #121]	; 0x79
                imx6ul_device->dev_addr[2] = 0x45;
  134dac:	e51b3008 	ldr	r3, [fp, #-8]
  134db0:	e3a02045 	mov	r2, #69	; 0x45
  134db4:	e5c3207a 	strb	r2, [r3, #122]	; 0x7a
                imx6ul_device->dev_addr[3] = (uid_crc>>16) & 0x7f;
  134db8:	e51b300c 	ldr	r3, [fp, #-12]
  134dbc:	e1a03823 	lsr	r3, r3, #16
  134dc0:	e6ef3073 	uxtb	r3, r3
  134dc4:	e203307f 	and	r3, r3, #127	; 0x7f
  134dc8:	e6ef2073 	uxtb	r2, r3
  134dcc:	e51b3008 	ldr	r3, [fp, #-8]
  134dd0:	e5c3207b 	strb	r2, [r3, #123]	; 0x7b
                imx6ul_device->dev_addr[4] = (uid_crc>>8) & 0xff;
  134dd4:	e51b300c 	ldr	r3, [fp, #-12]
  134dd8:	e1a03423 	lsr	r3, r3, #8
  134ddc:	e6ef2073 	uxtb	r2, r3
  134de0:	e51b3008 	ldr	r3, [fp, #-8]
  134de4:	e5c3207c 	strb	r2, [r3, #124]	; 0x7c
                imx6ul_device->dev_addr[5] = uid_crc & 0xff;
  134de8:	e51b300c 	ldr	r3, [fp, #-12]
  134dec:	e6ef2073 	uxtb	r2, r3
  134df0:	e51b3008 	ldr	r3, [fp, #-8]
  134df4:	e5c3207d 	strb	r2, [r3, #125]	; 0x7d
  134df8:	ea000018 	b	134e60 <rt_imx6ul_eth_control+0x1d0>
                imx6ul_device->dev_addr[0] = 0xa8;
  134dfc:	e51b3008 	ldr	r3, [fp, #-8]
  134e00:	e3e02057 	mvn	r2, #87	; 0x57
  134e04:	e5c32078 	strb	r2, [r3, #120]	; 0x78
                imx6ul_device->dev_addr[1] = 0x5e;
  134e08:	e51b3008 	ldr	r3, [fp, #-8]
  134e0c:	e3a0205e 	mov	r2, #94	; 0x5e
  134e10:	e5c32079 	strb	r2, [r3, #121]	; 0x79
                imx6ul_device->dev_addr[2] = 0x46;
  134e14:	e51b3008 	ldr	r3, [fp, #-8]
  134e18:	e3a02046 	mov	r2, #70	; 0x46
  134e1c:	e5c3207a 	strb	r2, [r3, #122]	; 0x7a
                imx6ul_device->dev_addr[3] = (uid_crc >> 16) & 0x7f;
  134e20:	e51b300c 	ldr	r3, [fp, #-12]
  134e24:	e1a03823 	lsr	r3, r3, #16
  134e28:	e6ef3073 	uxtb	r3, r3
  134e2c:	e203307f 	and	r3, r3, #127	; 0x7f
  134e30:	e6ef2073 	uxtb	r2, r3
  134e34:	e51b3008 	ldr	r3, [fp, #-8]
  134e38:	e5c3207b 	strb	r2, [r3, #123]	; 0x7b
                imx6ul_device->dev_addr[4] = (uid_crc >> 8) & 0xff;
  134e3c:	e51b300c 	ldr	r3, [fp, #-12]
  134e40:	e1a03423 	lsr	r3, r3, #8
  134e44:	e6ef2073 	uxtb	r2, r3
  134e48:	e51b3008 	ldr	r3, [fp, #-8]
  134e4c:	e5c3207c 	strb	r2, [r3, #124]	; 0x7c
                imx6ul_device->dev_addr[5] = uid_crc & 0xff;
  134e50:	e51b300c 	ldr	r3, [fp, #-12]
  134e54:	e6ef2073 	uxtb	r2, r3
  134e58:	e51b3008 	ldr	r3, [fp, #-8]
  134e5c:	e5c3207d 	strb	r2, [r3, #125]	; 0x7d
            memcpy(args, imx6ul_device->dev_addr, MAX_ADDR_LEN);
  134e60:	e51b3008 	ldr	r3, [fp, #-8]
  134e64:	e2833078 	add	r3, r3, #120	; 0x78
  134e68:	e3a02006 	mov	r2, #6
  134e6c:	e1a01003 	mov	r1, r3
  134e70:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  134e74:	eb002fc6 	bl	140d94 <memcpy>
        break;
  134e78:	ea000001 	b	134e84 <rt_imx6ul_eth_control+0x1f4>
            return -RT_ERROR;
  134e7c:	e3e03000 	mvn	r3, #0
  134e80:	ea000000 	b	134e88 <rt_imx6ul_eth_control+0x1f8>
    }
    return RT_EOK;
  134e84:	e3a03000 	mov	r3, #0
}
  134e88:	e1a00003 	mov	r0, r3
  134e8c:	e24bd004 	sub	sp, fp, #4
  134e90:	e8bd8800 	pop	{fp, pc}

00134e94 <read_data_from_eth>:

static status_t read_data_from_eth(rt_device_t dev,void *read_data,uint16_t *read_length)
{
  134e94:	e92d4800 	push	{fp, lr}
  134e98:	e28db004 	add	fp, sp, #4
  134e9c:	e24dd038 	sub	sp, sp, #56	; 0x38
  134ea0:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  134ea4:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  134ea8:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
    status_t status = 0;
  134eac:	e3a03000 	mov	r3, #0
  134eb0:	e50b3008 	str	r3, [fp, #-8]
    uint16_t length = 0;
  134eb4:	e3a03000 	mov	r3, #0
  134eb8:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
    ENET_Type *base_addr = RT_NULL;
  134ebc:	e3a03000 	mov	r3, #0
  134ec0:	e50b300c 	str	r3, [fp, #-12]
    enet_config_t *config;
    enet_handle_t *handle;
    enet_buffer_config_t *buffConfig;
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)dev;
  134ec4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  134ec8:	e50b3010 	str	r3, [fp, #-16]
    base_addr = imx6ul_device->enet_virtual_base_addr;
  134ecc:	e51b3010 	ldr	r3, [fp, #-16]
  134ed0:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  134ed4:	e50b300c 	str	r3, [fp, #-12]
    config = &imx6ul_device->config;
  134ed8:	e51b3010 	ldr	r3, [fp, #-16]
  134edc:	e28330dc 	add	r3, r3, #220	; 0xdc
  134ee0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    handle = &imx6ul_device->handle;
  134ee4:	e51b3010 	ldr	r3, [fp, #-16]
  134ee8:	e2833c01 	add	r3, r3, #256	; 0x100
  134eec:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    buffConfig = &imx6ul_device->buffConfig;
  134ef0:	e51b3010 	ldr	r3, [fp, #-16]
  134ef4:	e28330a8 	add	r3, r3, #168	; 0xa8
  134ef8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    /* Get the Frame size */
    status = ENET_ReadFrame(base_addr,handle,config,read_data,&length);
  134efc:	e24b301e 	sub	r3, fp, #30
  134f00:	e58d3000 	str	r3, [sp]
  134f04:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  134f08:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  134f0c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  134f10:	e51b000c 	ldr	r0, [fp, #-12]
  134f14:	eb00088e 	bl	137154 <ENET_ReadFrame>
  134f18:	e50b0008 	str	r0, [fp, #-8]
    if((status == kStatus_ENET_RxFrameEmpty)||(status == kStatus_ENET_RxFrameError))
  134f1c:	e51b3008 	ldr	r3, [fp, #-8]
  134f20:	e3002fa2 	movw	r2, #4002	; 0xfa2
  134f24:	e1530002 	cmp	r3, r2
  134f28:	0a000002 	beq	134f38 <read_data_from_eth+0xa4>
  134f2c:	e51b3008 	ldr	r3, [fp, #-8]
  134f30:	e3530efa 	cmp	r3, #4000	; 0xfa0
  134f34:	1a00001a 	bne	134fa4 <read_data_from_eth+0x110>
    {
        ENET_EnableInterrupts(base_addr,ENET_RX_INTERRUPT);
  134f38:	e3a01403 	mov	r1, #50331648	; 0x3000000
  134f3c:	e51b000c 	ldr	r0, [fp, #-12]
  134f40:	ebfffdae 	bl	134600 <ENET_EnableInterrupts>
        if(status == kStatus_ENET_RxFrameError)
  134f44:	e51b3008 	ldr	r3, [fp, #-8]
  134f48:	e3530efa 	cmp	r3, #4000	; 0xfa0
  134f4c:	1a00000e 	bne	134f8c <read_data_from_eth+0xf8>
        {
            /*recv error happend reinitialize mac*/
            ENET_Init(base_addr, handle, config, buffConfig, imx6ul_device->dev_addr, SYS_CLOCK_HZ);
  134f50:	e51b3010 	ldr	r3, [fp, #-16]
  134f54:	e2832078 	add	r2, r3, #120	; 0x78
  134f58:	e3a03d52 	mov	r3, #5248	; 0x1480
  134f5c:	e34033ef 	movt	r3, #1007	; 0x3ef
  134f60:	e58d3004 	str	r3, [sp, #4]
  134f64:	e58d2000 	str	r2, [sp]
  134f68:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  134f6c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  134f70:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  134f74:	e51b000c 	ldr	r0, [fp, #-12]
  134f78:	eb0003bf 	bl	135e7c <ENET_Init>
            ENET_ActiveRead(base_addr);
  134f7c:	e51b000c 	ldr	r0, [fp, #-12]
  134f80:	ebfffd93 	bl	1345d4 <ENET_ActiveRead>
            return kStatus_ENET_RxFrameError;
  134f84:	e3a03efa 	mov	r3, #4000	; 0xfa0
  134f88:	ea000009 	b	134fb4 <read_data_from_eth+0x120>
        }
        else if(status == kStatus_ENET_RxFrameEmpty)
  134f8c:	e51b3008 	ldr	r3, [fp, #-8]
  134f90:	e3002fa2 	movw	r2, #4002	; 0xfa2
  134f94:	e1530002 	cmp	r3, r2
  134f98:	1a000001 	bne	134fa4 <read_data_from_eth+0x110>
        {
            return kStatus_ENET_RxFrameEmpty;
  134f9c:	e3003fa2 	movw	r3, #4002	; 0xfa2
  134fa0:	ea000003 	b	134fb4 <read_data_from_eth+0x120>
        }
    }
    *read_length = length;
  134fa4:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  134fa8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134fac:	e1c320b0 	strh	r2, [r3]
    return status;
  134fb0:	e51b3008 	ldr	r3, [fp, #-8]
}
  134fb4:	e1a00003 	mov	r0, r3
  134fb8:	e24bd004 	sub	sp, fp, #4
  134fbc:	e8bd8800 	pop	{fp, pc}

00134fc0 <rt_imx6ul_eth_tx>:

#ifdef RT_USING_LWIP
/* transmit data*/
rt_err_t rt_imx6ul_eth_tx(rt_device_t dev, struct pbuf *p)
{
  134fc0:	e92d4800 	push	{fp, lr}
  134fc4:	e28db004 	add	fp, sp, #4
  134fc8:	e24dd030 	sub	sp, sp, #48	; 0x30
  134fcc:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  134fd0:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
    struct pbuf *q = RT_NULL;
  134fd4:	e3a03000 	mov	r3, #0
  134fd8:	e50b3008 	str	r3, [fp, #-8]
    uint16_t offset = 0;
  134fdc:	e3a03000 	mov	r3, #0
  134fe0:	e14b30ba 	strh	r3, [fp, #-10]
    uint32_t last_flag = 0;
  134fe4:	e3a03000 	mov	r3, #0
  134fe8:	e50b3010 	str	r3, [fp, #-16]
    status_t status;
    ENET_Type *base_addr = RT_NULL;
  134fec:	e3a03000 	mov	r3, #0
  134ff0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    enet_handle_t *handle;
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)dev;
  134ff4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  134ff8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    base_addr = imx6ul_device->enet_virtual_base_addr;
  134ffc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  135000:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  135004:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    handle = &imx6ul_device->handle;
  135008:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  13500c:	e2833c01 	add	r3, r3, #256	; 0x100
  135010:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(p);
  135014:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  135018:	e3530000 	cmp	r3, #0
  13501c:	1a000005 	bne	135038 <rt_imx6ul_eth_tx+0x78>
  135020:	e3a02e1b 	mov	r2, #432	; 0x1b0
  135024:	e3091e8c 	movw	r1, #40588	; 0x9e8c
  135028:	e3401014 	movt	r1, #20
  13502c:	e3090ce0 	movw	r0, #40160	; 0x9ce0
  135030:	e3400014 	movt	r0, #20
  135034:	ebff3957 	bl	103598 <rt_assert_handler>

    for(q = p;q != RT_NULL;q=q->next)
  135038:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  13503c:	e50b3008 	str	r3, [fp, #-8]
  135040:	ea000020 	b	1350c8 <rt_imx6ul_eth_tx+0x108>
    {
        if(q->next == RT_NULL)
  135044:	e51b3008 	ldr	r3, [fp, #-8]
  135048:	e5933000 	ldr	r3, [r3]
  13504c:	e3530000 	cmp	r3, #0
  135050:	1a000002 	bne	135060 <rt_imx6ul_eth_tx+0xa0>
        {
            last_flag = 1;
  135054:	e3a03001 	mov	r3, #1
  135058:	e50b3010 	str	r3, [fp, #-16]
  13505c:	ea000001 	b	135068 <rt_imx6ul_eth_tx+0xa8>
        }
        else
        {
            last_flag = 0;
  135060:	e3a03000 	mov	r3, #0
  135064:	e50b3010 	str	r3, [fp, #-16]
        }
        status = ENET_SendFrame(base_addr, handle, q->payload, q->len,last_flag);
  135068:	e51b3008 	ldr	r3, [fp, #-8]
  13506c:	e5932004 	ldr	r2, [r3, #4]
  135070:	e51b3008 	ldr	r3, [fp, #-8]
  135074:	e1d310ba 	ldrh	r1, [r3, #10]
  135078:	e51b3010 	ldr	r3, [fp, #-16]
  13507c:	e58d3000 	str	r3, [sp]
  135080:	e1a03001 	mov	r3, r1
  135084:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  135088:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  13508c:	eb0008fb 	bl	137480 <ENET_SendFrame>
  135090:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0

        offset = offset + q->len;
  135094:	e51b3008 	ldr	r3, [fp, #-8]
  135098:	e1d320ba 	ldrh	r2, [r3, #10]
  13509c:	e15b30ba 	ldrh	r3, [fp, #-10]
  1350a0:	e0823003 	add	r3, r2, r3
  1350a4:	e14b30ba 	strh	r3, [fp, #-10]
        if(status == kStatus_Success)
  1350a8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1350ac:	e3530000 	cmp	r3, #0
  1350b0:	0a000001 	beq	1350bc <rt_imx6ul_eth_tx+0xfc>
        {
        }
        else
        {
            return RT_ERROR;
  1350b4:	e3a03001 	mov	r3, #1
  1350b8:	ea000015 	b	135114 <rt_imx6ul_eth_tx+0x154>
    for(q = p;q != RT_NULL;q=q->next)
  1350bc:	e51b3008 	ldr	r3, [fp, #-8]
  1350c0:	e5933000 	ldr	r3, [r3]
  1350c4:	e50b3008 	str	r3, [fp, #-8]
  1350c8:	e51b3008 	ldr	r3, [fp, #-8]
  1350cc:	e3530000 	cmp	r3, #0
  1350d0:	1affffdb 	bne	135044 <rt_imx6ul_eth_tx+0x84>
        }
    }
    if(offset > ENET_FRAME_MAX_FRAMELEN)
  1350d4:	e15b30ba 	ldrh	r3, [fp, #-10]
  1350d8:	e30025ee 	movw	r2, #1518	; 0x5ee
  1350dc:	e1530002 	cmp	r3, r2
  1350e0:	9a00000a 	bls	135110 <rt_imx6ul_eth_tx+0x150>
    {
        LOG_E("net error send length %d exceed max length",offset);
  1350e4:	e3090be4 	movw	r0, #39908	; 0x9be4
  1350e8:	e3400014 	movt	r0, #20
  1350ec:	ebff3808 	bl	103114 <rt_kprintf>
  1350f0:	e15b30ba 	ldrh	r3, [fp, #-10]
  1350f4:	e1a01003 	mov	r1, r3
  1350f8:	e3090ce4 	movw	r0, #40164	; 0x9ce4
  1350fc:	e3400014 	movt	r0, #20
  135100:	ebff3803 	bl	103114 <rt_kprintf>
  135104:	e3090bc8 	movw	r0, #39880	; 0x9bc8
  135108:	e3400014 	movt	r0, #20
  13510c:	ebff3800 	bl	103114 <rt_kprintf>
    }
    return RT_EOK;
  135110:	e3a03000 	mov	r3, #0
}
  135114:	e1a00003 	mov	r0, r3
  135118:	e24bd004 	sub	sp, fp, #4
  13511c:	e8bd8800 	pop	{fp, pc}

00135120 <rt_imx6ul_eth_rx>:

struct pbuf *rt_imx6ul_eth_rx(rt_device_t dev)
{
  135120:	e92d4800 	push	{fp, lr}
  135124:	e28db004 	add	fp, sp, #4
  135128:	e24dd018 	sub	sp, sp, #24
  13512c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    static struct pbuf *p_s = RT_NULL;
    struct pbuf *p = RT_NULL;
  135130:	e3a03000 	mov	r3, #0
  135134:	e50b3008 	str	r3, [fp, #-8]
    status_t status;
    uint16_t length = 0;
  135138:	e3a03000 	mov	r3, #0
  13513c:	e14b30be 	strh	r3, [fp, #-14]

    if(p_s == RT_NULL)
  135140:	e30e3c04 	movw	r3, #60420	; 0xec04
  135144:	e3403014 	movt	r3, #20
  135148:	e5933000 	ldr	r3, [r3]
  13514c:	e3530000 	cmp	r3, #0
  135150:	1a00000e 	bne	135190 <rt_imx6ul_eth_rx+0x70>
    {
        p_s = pbuf_alloc(PBUF_RAW, ENET_FRAME_MAX_FRAMELEN, PBUF_POOL);
  135154:	e3a02003 	mov	r2, #3
  135158:	e30015ee 	movw	r1, #1518	; 0x5ee
  13515c:	e3a00004 	mov	r0, #4
  135160:	ebff944b 	bl	11a294 <pbuf_alloc>
  135164:	e1a02000 	mov	r2, r0
  135168:	e30e3c04 	movw	r3, #60420	; 0xec04
  13516c:	e3403014 	movt	r3, #20
  135170:	e5832000 	str	r2, [r3]
        if(p_s == RT_NULL)
  135174:	e30e3c04 	movw	r3, #60420	; 0xec04
  135178:	e3403014 	movt	r3, #20
  13517c:	e5933000 	ldr	r3, [r3]
  135180:	e3530000 	cmp	r3, #0
  135184:	1a000001 	bne	135190 <rt_imx6ul_eth_rx+0x70>
        {
            return RT_NULL;
  135188:	e3a03000 	mov	r3, #0
  13518c:	ea00002f 	b	135250 <rt_imx6ul_eth_rx+0x130>
        }
    }
    p = p_s;
  135190:	e30e3c04 	movw	r3, #60420	; 0xec04
  135194:	e3403014 	movt	r3, #20
  135198:	e5933000 	ldr	r3, [r3]
  13519c:	e50b3008 	str	r3, [fp, #-8]
    status = read_data_from_eth(dev,p->payload,&length);
  1351a0:	e51b3008 	ldr	r3, [fp, #-8]
  1351a4:	e5933004 	ldr	r3, [r3, #4]
  1351a8:	e24b200e 	sub	r2, fp, #14
  1351ac:	e1a01003 	mov	r1, r3
  1351b0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1351b4:	ebffff36 	bl	134e94 <read_data_from_eth>
  1351b8:	e50b000c 	str	r0, [fp, #-12]
    if(status == kStatus_ENET_RxFrameEmpty)
  1351bc:	e51b300c 	ldr	r3, [fp, #-12]
  1351c0:	e3002fa2 	movw	r2, #4002	; 0xfa2
  1351c4:	e1530002 	cmp	r3, r2
  1351c8:	1a000001 	bne	1351d4 <rt_imx6ul_eth_rx+0xb4>
    {
        return RT_NULL;
  1351cc:	e3a03000 	mov	r3, #0
  1351d0:	ea00001e 	b	135250 <rt_imx6ul_eth_rx+0x130>
    }
    else if(status == kStatus_ENET_RxFrameError)
  1351d4:	e51b300c 	ldr	r3, [fp, #-12]
  1351d8:	e3530efa 	cmp	r3, #4000	; 0xfa0
  1351dc:	1a000001 	bne	1351e8 <rt_imx6ul_eth_rx+0xc8>
    {
        return RT_NULL;
  1351e0:	e3a03000 	mov	r3, #0
  1351e4:	ea000019 	b	135250 <rt_imx6ul_eth_rx+0x130>
    }
    if(length > ENET_FRAME_MAX_FRAMELEN)
  1351e8:	e15b30be 	ldrh	r3, [fp, #-14]
  1351ec:	e30025ee 	movw	r2, #1518	; 0x5ee
  1351f0:	e1530002 	cmp	r3, r2
  1351f4:	9a00000c 	bls	13522c <rt_imx6ul_eth_rx+0x10c>
    {
        LOG_E("net error recv length %d exceed max length",length);
  1351f8:	e3090be4 	movw	r0, #39908	; 0x9be4
  1351fc:	e3400014 	movt	r0, #20
  135200:	ebff37c3 	bl	103114 <rt_kprintf>
  135204:	e15b30be 	ldrh	r3, [fp, #-14]
  135208:	e1a01003 	mov	r1, r3
  13520c:	e3090d10 	movw	r0, #40208	; 0x9d10
  135210:	e3400014 	movt	r0, #20
  135214:	ebff37be 	bl	103114 <rt_kprintf>
  135218:	e3090bc8 	movw	r0, #39880	; 0x9bc8
  13521c:	e3400014 	movt	r0, #20
  135220:	ebff37bb 	bl	103114 <rt_kprintf>
        return RT_NULL;
  135224:	e3a03000 	mov	r3, #0
  135228:	ea000008 	b	135250 <rt_imx6ul_eth_rx+0x130>
    }
    pbuf_realloc(p, length);
  13522c:	e15b30be 	ldrh	r3, [fp, #-14]
  135230:	e1a01003 	mov	r1, r3
  135234:	e51b0008 	ldr	r0, [fp, #-8]
  135238:	ebff95d3 	bl	11a98c <pbuf_realloc>
    p_s = RT_NULL;
  13523c:	e30e3c04 	movw	r3, #60420	; 0xec04
  135240:	e3403014 	movt	r3, #20
  135244:	e3a02000 	mov	r2, #0
  135248:	e5832000 	str	r2, [r3]
    return p;
  13524c:	e51b3008 	ldr	r3, [fp, #-8]
}
  135250:	e1a00003 	mov	r0, r3
  135254:	e24bd004 	sub	sp, fp, #4
  135258:	e8bd8800 	pop	{fp, pc}

0013525c <rt_imx6ul_eth_open>:
#endif

static rt_err_t rt_imx6ul_eth_open(rt_device_t dev, rt_uint16_t oflag)
{
  13525c:	e92d4800 	push	{fp, lr}
  135260:	e28db004 	add	fp, sp, #4
  135264:	e24dd010 	sub	sp, sp, #16
  135268:	e50b0010 	str	r0, [fp, #-16]
  13526c:	e1a03001 	mov	r3, r1
  135270:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)dev;
  135274:	e51b3010 	ldr	r3, [fp, #-16]
  135278:	e50b3008 	str	r3, [fp, #-8]
    ENET_Type *base_addr = imx6ul_device->enet_virtual_base_addr;
  13527c:	e51b3008 	ldr	r3, [fp, #-8]
  135280:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  135284:	e50b300c 	str	r3, [fp, #-12]
    ENET_EnableInterrupts(base_addr,ENET_RX_INTERRUPT);
  135288:	e3a01403 	mov	r1, #50331648	; 0x3000000
  13528c:	e51b000c 	ldr	r0, [fp, #-12]
  135290:	ebfffcda 	bl	134600 <ENET_EnableInterrupts>

    return RT_EOK;
  135294:	e3a03000 	mov	r3, #0
}
  135298:	e1a00003 	mov	r0, r3
  13529c:	e24bd004 	sub	sp, fp, #4
  1352a0:	e8bd8800 	pop	{fp, pc}

001352a4 <rt_imx6ul_eth_close>:

static rt_err_t rt_imx6ul_eth_close(rt_device_t dev)
{
  1352a4:	e92d4800 	push	{fp, lr}
  1352a8:	e28db004 	add	fp, sp, #4
  1352ac:	e24dd010 	sub	sp, sp, #16
  1352b0:	e50b0010 	str	r0, [fp, #-16]
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)dev;
  1352b4:	e51b3010 	ldr	r3, [fp, #-16]
  1352b8:	e50b3008 	str	r3, [fp, #-8]
    ENET_DisableInterrupts(imx6ul_device->enet_virtual_base_addr,ENET_RX_INTERRUPT);
  1352bc:	e51b3008 	ldr	r3, [fp, #-8]
  1352c0:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  1352c4:	e3a01403 	mov	r1, #50331648	; 0x3000000
  1352c8:	e1a00003 	mov	r0, r3
  1352cc:	ebfffcda 	bl	13463c <ENET_DisableInterrupts>
    return RT_EOK;
  1352d0:	e3a03000 	mov	r3, #0
}
  1352d4:	e1a00003 	mov	r0, r3
  1352d8:	e24bd004 	sub	sp, fp, #4
  1352dc:	e8bd8800 	pop	{fp, pc}

001352e0 <rt_imx6ul_eth_read>:

static rt_size_t rt_imx6ul_eth_read(rt_device_t dev, rt_off_t pos, void *buffer, rt_size_t size)
{
  1352e0:	e92d4800 	push	{fp, lr}
  1352e4:	e28db004 	add	fp, sp, #4
  1352e8:	e24dd018 	sub	sp, sp, #24
  1352ec:	e50b0010 	str	r0, [fp, #-16]
  1352f0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1352f4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  1352f8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    uint16_t length = 0;
  1352fc:	e3a03000 	mov	r3, #0
  135300:	e14b30ba 	strh	r3, [fp, #-10]
    status_t status;
    if(!buffer) 
  135304:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  135308:	e3530000 	cmp	r3, #0
  13530c:	1a00000c 	bne	135344 <rt_imx6ul_eth_read+0x64>
    {
        LOG_E("eth read invalid parameter buffer %p size %d",buffer,size);
  135310:	e3090be4 	movw	r0, #39908	; 0x9be4
  135314:	e3400014 	movt	r0, #20
  135318:	ebff377d 	bl	103114 <rt_kprintf>
  13531c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  135320:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  135324:	e3090d3c 	movw	r0, #40252	; 0x9d3c
  135328:	e3400014 	movt	r0, #20
  13532c:	ebff3778 	bl	103114 <rt_kprintf>
  135330:	e3090bc8 	movw	r0, #39880	; 0x9bc8
  135334:	e3400014 	movt	r0, #20
  135338:	ebff3775 	bl	103114 <rt_kprintf>
        return 0;
  13533c:	e3a03000 	mov	r3, #0
  135340:	ea00000f 	b	135384 <rt_imx6ul_eth_read+0xa4>
    }
    status = read_data_from_eth(dev,buffer,&length);
  135344:	e24b300a 	sub	r3, fp, #10
  135348:	e1a02003 	mov	r2, r3
  13534c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  135350:	e51b0010 	ldr	r0, [fp, #-16]
  135354:	ebfffece 	bl	134e94 <read_data_from_eth>
  135358:	e50b0008 	str	r0, [fp, #-8]
    if((status == kStatus_ENET_RxFrameEmpty) || (status == kStatus_ENET_RxFrameError))
  13535c:	e51b3008 	ldr	r3, [fp, #-8]
  135360:	e3002fa2 	movw	r2, #4002	; 0xfa2
  135364:	e1530002 	cmp	r3, r2
  135368:	0a000002 	beq	135378 <rt_imx6ul_eth_read+0x98>
  13536c:	e51b3008 	ldr	r3, [fp, #-8]
  135370:	e3530efa 	cmp	r3, #4000	; 0xfa0
  135374:	1a000001 	bne	135380 <rt_imx6ul_eth_read+0xa0>
    {
        return 0;
  135378:	e3a03000 	mov	r3, #0
  13537c:	ea000000 	b	135384 <rt_imx6ul_eth_read+0xa4>
    }
    return (rt_size_t)length;
  135380:	e15b30ba 	ldrh	r3, [fp, #-10]
}
  135384:	e1a00003 	mov	r0, r3
  135388:	e24bd004 	sub	sp, fp, #4
  13538c:	e8bd8800 	pop	{fp, pc}

00135390 <rt_imx6ul_eth_write>:

static rt_size_t rt_imx6ul_eth_write(rt_device_t dev, rt_off_t pos, const void *buffer, rt_size_t size)
{
  135390:	e92d4800 	push	{fp, lr}
  135394:	e28db004 	add	fp, sp, #4
  135398:	e24dd028 	sub	sp, sp, #40	; 0x28
  13539c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1353a0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  1353a4:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  1353a8:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    status_t status;
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)dev;
  1353ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1353b0:	e50b3008 	str	r3, [fp, #-8]
    ENET_Type *base_addr = imx6ul_device->enet_virtual_base_addr;
  1353b4:	e51b3008 	ldr	r3, [fp, #-8]
  1353b8:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  1353bc:	e50b300c 	str	r3, [fp, #-12]
    enet_handle_t *handle = &imx6ul_device->handle;
  1353c0:	e51b3008 	ldr	r3, [fp, #-8]
  1353c4:	e2833c01 	add	r3, r3, #256	; 0x100
  1353c8:	e50b3010 	str	r3, [fp, #-16]

    if((!buffer) || (size > ENET_FRAME_MAX_FRAMELEN))
  1353cc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1353d0:	e3530000 	cmp	r3, #0
  1353d4:	0a000003 	beq	1353e8 <rt_imx6ul_eth_write+0x58>
  1353d8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1353dc:	e30025ee 	movw	r2, #1518	; 0x5ee
  1353e0:	e1530002 	cmp	r3, r2
  1353e4:	9a00000a 	bls	135414 <rt_imx6ul_eth_write+0x84>
    {
        LOG_E("eth write invalid parameter buffer %p size %d",buffer,size);
  1353e8:	e3090be4 	movw	r0, #39908	; 0x9be4
  1353ec:	e3400014 	movt	r0, #20
  1353f0:	ebff3747 	bl	103114 <rt_kprintf>
  1353f4:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  1353f8:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  1353fc:	e3090d6c 	movw	r0, #40300	; 0x9d6c
  135400:	e3400014 	movt	r0, #20
  135404:	ebff3742 	bl	103114 <rt_kprintf>
  135408:	e3090bc8 	movw	r0, #39880	; 0x9bc8
  13540c:	e3400014 	movt	r0, #20
  135410:	ebff373f 	bl	103114 <rt_kprintf>
    }
    status = ENET_SendFrame(base_addr, handle, buffer, size,1);
  135414:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  135418:	e6ff2073 	uxth	r2, r3
  13541c:	e3a03001 	mov	r3, #1
  135420:	e58d3000 	str	r3, [sp]
  135424:	e1a03002 	mov	r3, r2
  135428:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  13542c:	e51b1010 	ldr	r1, [fp, #-16]
  135430:	e51b000c 	ldr	r0, [fp, #-12]
  135434:	eb000811 	bl	137480 <ENET_SendFrame>
  135438:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    if(status != kStatus_Success)
  13543c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135440:	e3530000 	cmp	r3, #0
  135444:	0a000001 	beq	135450 <rt_imx6ul_eth_write+0xc0>
    {
        return RT_ERROR;
  135448:	e3a03001 	mov	r3, #1
  13544c:	ea000000 	b	135454 <rt_imx6ul_eth_write+0xc4>
    }

    return RT_EOK;
  135450:	e3a03000 	mov	r3, #0
}
  135454:	e1a00003 	mov	r0, r3
  135458:	e24bd004 	sub	sp, fp, #4
  13545c:	e8bd8800 	pop	{fp, pc}

00135460 <get_instance_by_base>:

int32_t get_instance_by_base(void *base)
{
  135460:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  135464:	e28db000 	add	fp, sp, #0
  135468:	e24dd014 	sub	sp, sp, #20
  13546c:	e50b0010 	str	r0, [fp, #-16]
    int32_t i = 0;
  135470:	e3a03000 	mov	r3, #0
  135474:	e50b3008 	str	r3, [fp, #-8]
    int32_t instance = 0;
  135478:	e3a03000 	mov	r3, #0
  13547c:	e50b300c 	str	r3, [fp, #-12]
    for(i = 0; i < DEV_ENET_MAX; i ++)
  135480:	e3a03000 	mov	r3, #0
  135484:	e50b3008 	str	r3, [fp, #-8]
  135488:	ea00000d 	b	1354c4 <get_instance_by_base+0x64>
    {
        if((void *)_imx6ul_eth_device[i].enet_virtual_base_addr == base)
  13548c:	e30d3078 	movw	r3, #53368	; 0xd078
  135490:	e3403014 	movt	r3, #20
  135494:	e51b2008 	ldr	r2, [fp, #-8]
  135498:	e3a01f8a 	mov	r1, #552	; 0x228
  13549c:	e0020291 	mul	r2, r1, r2
  1354a0:	e0833002 	add	r3, r3, r2
  1354a4:	e28330a0 	add	r3, r3, #160	; 0xa0
  1354a8:	e5933000 	ldr	r3, [r3]
  1354ac:	e51b2010 	ldr	r2, [fp, #-16]
  1354b0:	e1520003 	cmp	r2, r3
  1354b4:	0a000006 	beq	1354d4 <get_instance_by_base+0x74>
    for(i = 0; i < DEV_ENET_MAX; i ++)
  1354b8:	e51b3008 	ldr	r3, [fp, #-8]
  1354bc:	e2833001 	add	r3, r3, #1
  1354c0:	e50b3008 	str	r3, [fp, #-8]
  1354c4:	e51b3008 	ldr	r3, [fp, #-8]
  1354c8:	e3530000 	cmp	r3, #0
  1354cc:	daffffee 	ble	13548c <get_instance_by_base+0x2c>
  1354d0:	ea000000 	b	1354d8 <get_instance_by_base+0x78>
        {
            break;
  1354d4:	e320f000 	nop	{0}
        }
    }
    if(i == DEV_ENET_MAX)
  1354d8:	e51b3008 	ldr	r3, [fp, #-8]
  1354dc:	e3530001 	cmp	r3, #1
  1354e0:	1a000001 	bne	1354ec <get_instance_by_base+0x8c>
    {
        return -1;
  1354e4:	e3e03000 	mvn	r3, #0
  1354e8:	ea000000 	b	1354f0 <get_instance_by_base+0x90>
    }
    return instance;
  1354ec:	e51b300c 	ldr	r3, [fp, #-12]
    
}
  1354f0:	e1a00003 	mov	r0, r3
  1354f4:	e28bd000 	add	sp, fp, #0
  1354f8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1354fc:	e12fff1e 	bx	lr

00135500 <rx_enet_callback>:

void rx_enet_callback(void *base)
{
  135500:	e92d4800 	push	{fp, lr}
  135504:	e28db004 	add	fp, sp, #4
  135508:	e24dd010 	sub	sp, sp, #16
  13550c:	e50b0010 	str	r0, [fp, #-16]
    int32_t instance = 0;
  135510:	e3a03000 	mov	r3, #0
  135514:	e50b3008 	str	r3, [fp, #-8]
    instance = get_instance_by_base(base);
  135518:	e51b0010 	ldr	r0, [fp, #-16]
  13551c:	ebffffcf 	bl	135460 <get_instance_by_base>
  135520:	e50b0008 	str	r0, [fp, #-8]
    if(instance == -1)
  135524:	e51b3008 	ldr	r3, [fp, #-8]
  135528:	e3730001 	cmn	r3, #1
  13552c:	1a000009 	bne	135558 <rx_enet_callback+0x58>
    {
        LOG_E("interrput match base addr error");
  135530:	e3090be4 	movw	r0, #39908	; 0x9be4
  135534:	e3400014 	movt	r0, #20
  135538:	ebff36f5 	bl	103114 <rt_kprintf>
  13553c:	e3090d9c 	movw	r0, #40348	; 0x9d9c
  135540:	e3400014 	movt	r0, #20
  135544:	ebff36f2 	bl	103114 <rt_kprintf>
  135548:	e3090bc8 	movw	r0, #39880	; 0x9bc8
  13554c:	e3400014 	movt	r0, #20
  135550:	ebff36ef 	bl	103114 <rt_kprintf>
        return;
  135554:	ea00000a 	b	135584 <rx_enet_callback+0x84>
    }
    ENET_DisableInterrupts(base,ENET_RX_INTERRUPT);
  135558:	e3a01403 	mov	r1, #50331648	; 0x3000000
  13555c:	e51b0010 	ldr	r0, [fp, #-16]
  135560:	ebfffc35 	bl	13463c <ENET_DisableInterrupts>
    eth_device_ready(&(_imx6ul_eth_device[instance].parent));
  135564:	e51b3008 	ldr	r3, [fp, #-8]
  135568:	e3a02f8a 	mov	r2, #552	; 0x228
  13556c:	e0020392 	mul	r2, r2, r3
  135570:	e30d3078 	movw	r3, #53368	; 0xd078
  135574:	e3403014 	movt	r3, #20
  135578:	e0823003 	add	r3, r2, r3
  13557c:	e1a00003 	mov	r0, r3
  135580:	ebffd175 	bl	129b5c <eth_device_ready>
}
  135584:	e24bd004 	sub	sp, fp, #4
  135588:	e8bd8800 	pop	{fp, pc}

0013558c <tx_enet_callback>:

void tx_enet_callback(void *base)
{
  13558c:	e92d4800 	push	{fp, lr}
  135590:	e28db004 	add	fp, sp, #4
  135594:	e24dd008 	sub	sp, sp, #8
  135598:	e50b0008 	str	r0, [fp, #-8]
    ENET_DisableInterrupts(base,ENET_TX_INTERRUPT);
  13559c:	e3a01303 	mov	r1, #201326592	; 0xc000000
  1355a0:	e51b0008 	ldr	r0, [fp, #-8]
  1355a4:	ebfffc24 	bl	13463c <ENET_DisableInterrupts>
}
  1355a8:	e320f000 	nop	{0}
  1355ac:	e24bd004 	sub	sp, fp, #4
  1355b0:	e8bd8800 	pop	{fp, pc}

001355b4 <ueth_rx_interrupt_handle>:

static void* ueth_rx_interrupt_handle(ENET_Type *base)
{
  1355b4:	e92d4800 	push	{fp, lr}
  1355b8:	e28db004 	add	fp, sp, #4
  1355bc:	e24dd010 	sub	sp, sp, #16
  1355c0:	e50b0010 	str	r0, [fp, #-16]
    /* Clear the transmit interrupt event. */
    base->EIR = ENET_RX_INTERRUPT;
  1355c4:	e51b3010 	ldr	r3, [fp, #-16]
  1355c8:	e3a02403 	mov	r2, #50331648	; 0x3000000
  1355cc:	e5832004 	str	r2, [r3, #4]
    int32_t instance = 0;
  1355d0:	e3a03000 	mov	r3, #0
  1355d4:	e50b3008 	str	r3, [fp, #-8]
    instance = get_instance_by_base(base);
  1355d8:	e51b0010 	ldr	r0, [fp, #-16]
  1355dc:	ebffff9f 	bl	135460 <get_instance_by_base>
  1355e0:	e50b0008 	str	r0, [fp, #-8]
    if(instance == -1)
  1355e4:	e51b3008 	ldr	r3, [fp, #-8]
  1355e8:	e3730001 	cmn	r3, #1
  1355ec:	1a00000a 	bne	13561c <ueth_rx_interrupt_handle+0x68>
    {
        LOG_E("interrput match base addr error");
  1355f0:	e3090be4 	movw	r0, #39908	; 0x9be4
  1355f4:	e3400014 	movt	r0, #20
  1355f8:	ebff36c5 	bl	103114 <rt_kprintf>
  1355fc:	e3090d9c 	movw	r0, #40348	; 0x9d9c
  135600:	e3400014 	movt	r0, #20
  135604:	ebff36c2 	bl	103114 <rt_kprintf>
  135608:	e3090bc8 	movw	r0, #39880	; 0x9bc8
  13560c:	e3400014 	movt	r0, #20
  135610:	ebff36bf 	bl	103114 <rt_kprintf>
        return RT_NULL;
  135614:	e3a03000 	mov	r3, #0
  135618:	ea000005 	b	135634 <ueth_rx_interrupt_handle+0x80>
    }
    return (void*)&(_imx6ul_eth_device[instance].parent);
  13561c:	e51b3008 	ldr	r3, [fp, #-8]
  135620:	e3a02f8a 	mov	r2, #552	; 0x228
  135624:	e0020392 	mul	r2, r2, r3
  135628:	e30d3078 	movw	r3, #53368	; 0xd078
  13562c:	e3403014 	movt	r3, #20
  135630:	e0823003 	add	r3, r2, r3
}
  135634:	e1a00003 	mov	r0, r3
  135638:	e24bd004 	sub	sp, fp, #4
  13563c:	e8bd8800 	pop	{fp, pc}

00135640 <ueth_rx_interrupt_detect>:

int eth_init_done = 0;
void* ueth_rx_interrupt_detect(void) {
  135640:	e92d4800 	push	{fp, lr}
  135644:	e28db004 	add	fp, sp, #4
  135648:	e24dd008 	sub	sp, sp, #8
    ENET_Type *base = _imx6ul_eth_device[0].enet_virtual_base_addr;
  13564c:	e30d3078 	movw	r3, #53368	; 0xd078
  135650:	e3403014 	movt	r3, #20
  135654:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  135658:	e50b3008 	str	r3, [fp, #-8]
            ENET_DisableInterrupts(base, ENET_RX_INTERRUPT);
            return ueth_rx_interrupt_handle(base);
        }
    }
#else
    ueth_int_recv();
  13565c:	ebff3b5e 	bl	1043dc <ueth_int_recv>
    return ueth_rx_interrupt_handle(base);
  135660:	e51b0008 	ldr	r0, [fp, #-8]
  135664:	ebffffd2 	bl	1355b4 <ueth_rx_interrupt_handle>
  135668:	e1a03000 	mov	r3, r0
#endif
}
  13566c:	e1a00003 	mov	r0, r3
  135670:	e24bd004 	sub	sp, fp, #4
  135674:	e8bd8800 	pop	{fp, pc}

00135678 <phy_detect_thread_entry>:

/*phy link detect thread*/
static void phy_detect_thread_entry(void *param)
{
  135678:	e92d4800 	push	{fp, lr}
  13567c:	e28db004 	add	fp, sp, #4
  135680:	e24dd020 	sub	sp, sp, #32
  135684:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
    bool link = false;
  135688:	e3a03000 	mov	r3, #0
  13568c:	e54b300d 	strb	r3, [fp, #-13]
    phy_speed_t speed;
    phy_duplex_t duplex;
    ENET_Type *base_addr = RT_NULL;
  135690:	e3a03000 	mov	r3, #0
  135694:	e50b3008 	str	r3, [fp, #-8]
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)param;
  135698:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  13569c:	e50b300c 	str	r3, [fp, #-12]
    base_addr = imx6ul_device->enet_virtual_base_addr;
  1356a0:	e51b300c 	ldr	r3, [fp, #-12]
  1356a4:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  1356a8:	e50b3008 	str	r3, [fp, #-8]

    phy_reset(imx6ul_device->phy_base_addr,imx6ul_device->phy_gpio_pin);
  1356ac:	e51b300c 	ldr	r3, [fp, #-12]
  1356b0:	e593221c 	ldr	r2, [r3, #540]	; 0x21c
  1356b4:	e51b300c 	ldr	r3, [fp, #-12]
  1356b8:	e5933220 	ldr	r3, [r3, #544]	; 0x220
  1356bc:	e1a01003 	mov	r1, r3
  1356c0:	e1a00002 	mov	r0, r2
  1356c4:	eb000a8e 	bl	138104 <phy_reset>
    PHY_Init(base_addr, imx6ul_device->phy_num, SYS_CLOCK_HZ,imx6ul_device->phy_id);
  1356c8:	e51b300c 	ldr	r3, [fp, #-12]
  1356cc:	e5d33098 	ldrb	r3, [r3, #152]	; 0x98
  1356d0:	e1a01003 	mov	r1, r3
  1356d4:	e51b300c 	ldr	r3, [fp, #-12]
  1356d8:	e5933224 	ldr	r3, [r3, #548]	; 0x224
  1356dc:	e3a02d52 	mov	r2, #5248	; 0x1480
  1356e0:	e34023ef 	movt	r2, #1007	; 0x3ef
  1356e4:	e51b0008 	ldr	r0, [fp, #-8]
  1356e8:	eb000af9 	bl	1382d4 <PHY_Init>
    PHY_GetLinkStatus(base_addr, imx6ul_device->phy_num, &link);
  1356ec:	e51b300c 	ldr	r3, [fp, #-12]
  1356f0:	e5d33098 	ldrb	r3, [r3, #152]	; 0x98
  1356f4:	e1a01003 	mov	r1, r3
  1356f8:	e24b300d 	sub	r3, fp, #13
  1356fc:	e1a02003 	mov	r2, r3
  135700:	e51b0008 	ldr	r0, [fp, #-8]
  135704:	eb000be5 	bl	1386a0 <PHY_GetLinkStatus>
    if (link)
  135708:	e55b300d 	ldrb	r3, [fp, #-13]
  13570c:	e3530000 	cmp	r3, #0
  135710:	0a00000d 	beq	13574c <phy_detect_thread_entry+0xd4>
    {
        /* Get the actual PHY link speed. */
        PHY_GetLinkSpeedDuplex(base_addr, imx6ul_device->phy_num, &speed, &duplex);
  135714:	e51b300c 	ldr	r3, [fp, #-12]
  135718:	e5d33098 	ldrb	r3, [r3, #152]	; 0x98
  13571c:	e1a01003 	mov	r1, r3
  135720:	e24b3018 	sub	r3, fp, #24
  135724:	e24b2014 	sub	r2, fp, #20
  135728:	e51b0008 	ldr	r0, [fp, #-8]
  13572c:	eb000c04 	bl	138744 <PHY_GetLinkSpeedDuplex>
        /* Change the MII speed and duplex for actual link status. */
        imx6ul_device->config.miiSpeed = (enet_mii_speed_t)speed;
  135730:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  135734:	e51b300c 	ldr	r3, [fp, #-12]
  135738:	e58320ec 	str	r2, [r3, #236]	; 0xec
        imx6ul_device->config.miiDuplex = (enet_mii_duplex_t)duplex;
  13573c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  135740:	e51b300c 	ldr	r3, [fp, #-12]
  135744:	e58320f0 	str	r2, [r3, #240]	; 0xf0
  135748:	ea000008 	b	135770 <phy_detect_thread_entry+0xf8>
    }
    else
    {
        LOG_W("PHY Link down, please check the cable connection and link partner setting.");
  13574c:	e3090dbc 	movw	r0, #40380	; 0x9dbc
  135750:	e3400014 	movt	r0, #20
  135754:	ebff366e 	bl	103114 <rt_kprintf>
  135758:	e3090dd0 	movw	r0, #40400	; 0x9dd0
  13575c:	e3400014 	movt	r0, #20
  135760:	ebff366b 	bl	103114 <rt_kprintf>
  135764:	e3090bc8 	movw	r0, #39880	; 0x9bc8
  135768:	e3400014 	movt	r0, #20
  13576c:	ebff3668 	bl	103114 <rt_kprintf>
    }

    while(1)
    {
        PHY_GetLinkStatus(base_addr, imx6ul_device->phy_num, &link);
  135770:	e51b300c 	ldr	r3, [fp, #-12]
  135774:	e5d33098 	ldrb	r3, [r3, #152]	; 0x98
  135778:	e1a01003 	mov	r1, r3
  13577c:	e24b300d 	sub	r3, fp, #13
  135780:	e1a02003 	mov	r2, r3
  135784:	e51b0008 	ldr	r0, [fp, #-8]
  135788:	eb000bc4 	bl	1386a0 <PHY_GetLinkStatus>
        if(link != imx6ul_device->phy_link_status)
  13578c:	e55b300d 	ldrb	r3, [fp, #-13]
  135790:	e1a02003 	mov	r2, r3
  135794:	e51b300c 	ldr	r3, [fp, #-12]
  135798:	e5933088 	ldr	r3, [r3, #136]	; 0x88
  13579c:	e1520003 	cmp	r2, r3
  1357a0:	0a00000b 	beq	1357d4 <phy_detect_thread_entry+0x15c>
        {
            if(link == true)
  1357a4:	e55b300d 	ldrb	r3, [fp, #-13]
  1357a8:	e3530000 	cmp	r3, #0
  1357ac:	0a000004 	beq	1357c4 <phy_detect_thread_entry+0x14c>
            {
                PHY_StartNegotiation(base_addr,imx6ul_device->phy_num);
  1357b0:	e51b300c 	ldr	r3, [fp, #-12]
  1357b4:	e5d33098 	ldrb	r3, [r3, #152]	; 0x98
  1357b8:	e1a01003 	mov	r1, r3
  1357bc:	e51b0008 	ldr	r0, [fp, #-8]
  1357c0:	eb000a74 	bl	138198 <PHY_StartNegotiation>
                
            }            
            imx6ul_eth_link_change(imx6ul_device,link);
  1357c4:	e55b300d 	ldrb	r3, [fp, #-13]
  1357c8:	e1a01003 	mov	r1, r3
  1357cc:	e51b000c 	ldr	r0, [fp, #-12]
  1357d0:	ebfffba9 	bl	13467c <imx6ul_eth_link_change>
        }
        rt_thread_mdelay(DETECT_DELAY_ONE_SECOND);
  1357d4:	e3a00ffa 	mov	r0, #1000	; 0x3e8
  1357d8:	ebff31a7 	bl	101e7c <rt_thread_mdelay>
        PHY_GetLinkStatus(base_addr, imx6ul_device->phy_num, &link);
  1357dc:	eaffffe3 	b	135770 <phy_detect_thread_entry+0xf8>

001357e0 <imx6ul_eth_init>:
    rt_imx6ul_eth_write,
    rt_imx6ul_eth_control,
};

int imx6ul_eth_init(int eth_select, const char ** eth_name)
{
  1357e0:	e92d4800 	push	{fp, lr}
  1357e4:	e28db004 	add	fp, sp, #4
  1357e8:	e24dd030 	sub	sp, sp, #48	; 0x30
  1357ec:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  1357f0:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
    rt_err_t state = RT_EOK;
  1357f4:	e3a03000 	mov	r3, #0
  1357f8:	e50b3008 	str	r3, [fp, #-8]
    char link_detect[10];
    char mac_addr[MAX_ADDR_LEN];

    if (ipc_service_init() == RT_ERROR)
  1357fc:	ebff3ac1 	bl	104308 <ipc_service_init>
  135800:	e1a03000 	mov	r3, r0
  135804:	e3530001 	cmp	r3, #1
  135808:	1a000001 	bne	135814 <imx6ul_eth_init+0x34>
    {
        return -RT_ERROR;
  13580c:	e3e03000 	mvn	r3, #0
  135810:	ea0000b1 	b	135adc <imx6ul_eth_init+0x2fc>
    }


    ueth_gpioinit((void *)&mdio_gpio[0], sizeof(mdio_gpio[0]));
  135814:	e3a0101c 	mov	r1, #28
  135818:	e30d0040 	movw	r0, #53312	; 0xd040
  13581c:	e3400014 	movt	r0, #20
  135820:	ebff3b57 	bl	104584 <ueth_gpioinit>
    ueth_gpioinit((void *)&mdio_gpio[1], sizeof(mdio_gpio[1]));
  135824:	e3a0101c 	mov	r1, #28
  135828:	e59f02b8 	ldr	r0, [pc, #696]	; 135ae8 <imx6ul_eth_init+0x308>
  13582c:	ebff3b54 	bl	104584 <ueth_gpioinit>

    for (int idx=0; idx<GET_ARRAY_NUM(_imx6ul_eth_device); idx++)
  135830:	e3a03000 	mov	r3, #0
  135834:	e50b300c 	str	r3, [fp, #-12]
  135838:	ea000090 	b	135a80 <imx6ul_eth_init+0x2a0>
    {
        _imx6ul_eth_device[idx].parent.parent.ops = &_k_enet_ops;
  13583c:	e30d3078 	movw	r3, #53368	; 0xd078
  135840:	e3403014 	movt	r3, #20
  135844:	e51b200c 	ldr	r2, [fp, #-12]
  135848:	e3a01f8a 	mov	r1, #552	; 0x228
  13584c:	e0020291 	mul	r2, r1, r2
  135850:	e0833002 	add	r3, r3, r2
  135854:	e283202c 	add	r2, r3, #44	; 0x2c
  135858:	e3093e1c 	movw	r3, #40476	; 0x9e1c
  13585c:	e3403014 	movt	r3, #20
  135860:	e5823000 	str	r3, [r2]
#ifdef RT_USING_LWIP        
        _imx6ul_eth_device[idx].parent.eth_rx     = rt_imx6ul_eth_rx;
  135864:	e30d3078 	movw	r3, #53368	; 0xd078
  135868:	e3403014 	movt	r3, #20
  13586c:	e51b200c 	ldr	r2, [fp, #-12]
  135870:	e3a01f8a 	mov	r1, #552	; 0x228
  135874:	e0020291 	mul	r2, r1, r2
  135878:	e0833002 	add	r3, r3, r2
  13587c:	e2832070 	add	r2, r3, #112	; 0x70
  135880:	e3053120 	movw	r3, #20768	; 0x5120
  135884:	e3403013 	movt	r3, #19
  135888:	e5823000 	str	r3, [r2]
        _imx6ul_eth_device[idx].parent.eth_tx     = rt_imx6ul_eth_tx;
  13588c:	e30d3078 	movw	r3, #53368	; 0xd078
  135890:	e3403014 	movt	r3, #20
  135894:	e51b200c 	ldr	r2, [fp, #-12]
  135898:	e3a01f8a 	mov	r1, #552	; 0x228
  13589c:	e0020291 	mul	r2, r1, r2
  1358a0:	e0833002 	add	r3, r3, r2
  1358a4:	e2832074 	add	r2, r3, #116	; 0x74
  1358a8:	e3043fc0 	movw	r3, #20416	; 0x4fc0
  1358ac:	e3403013 	movt	r3, #19
  1358b0:	e5823000 	str	r3, [r2]
#endif        
        _imx6ul_eth_device[idx].phy_link_status   = RT_FALSE;
  1358b4:	e30d3078 	movw	r3, #53368	; 0xd078
  1358b8:	e3403014 	movt	r3, #20
  1358bc:	e51b200c 	ldr	r2, [fp, #-12]
  1358c0:	e3a01f8a 	mov	r1, #552	; 0x228
  1358c4:	e0020291 	mul	r2, r1, r2
  1358c8:	e0833002 	add	r3, r3, r2
  1358cc:	e2833088 	add	r3, r3, #136	; 0x88
  1358d0:	e3a02000 	mov	r2, #0
  1358d4:	e5832000 	str	r2, [r3]

#ifdef SAL_USING_UNET
        rt_imx6ul_eth_control((rt_device_t)(&_imx6ul_eth_device[idx]),NIOCTL_GADDR,mac_addr);
  1358d8:	e51b300c 	ldr	r3, [fp, #-12]
  1358dc:	e3a02f8a 	mov	r2, #552	; 0x228
  1358e0:	e0020392 	mul	r2, r2, r3
  1358e4:	e30d3078 	movw	r3, #53368	; 0xd078
  1358e8:	e3403014 	movt	r3, #20
  1358ec:	e0823003 	add	r3, r2, r3
  1358f0:	e24b2024 	sub	r2, fp, #36	; 0x24
  1358f4:	e3a01001 	mov	r1, #1
  1358f8:	e1a00003 	mov	r0, r3
  1358fc:	ebfffce3 	bl	134c90 <rt_imx6ul_eth_control>
        
        rt_imx6ul_eth_init((rt_device_t)(&(_imx6ul_eth_device[idx].parent)));
  135900:	e51b300c 	ldr	r3, [fp, #-12]
  135904:	e3a02f8a 	mov	r2, #552	; 0x228
  135908:	e0020392 	mul	r2, r2, r3
  13590c:	e30d3078 	movw	r3, #53368	; 0xd078
  135910:	e3403014 	movt	r3, #20
  135914:	e0823003 	add	r3, r2, r3
  135918:	e1a00003 	mov	r0, r3
  13591c:	ebfffc5c 	bl	134a94 <rt_imx6ul_eth_init>
#endif
        eth_init_done = 1;
  135920:	e30e3c00 	movw	r3, #60416	; 0xec00
  135924:	e3403014 	movt	r3, #20
  135928:	e3a02001 	mov	r2, #1
  13592c:	e5832000 	str	r2, [r3]
        /* register eth device */
        state = eth_device_init(&(_imx6ul_eth_device[idx].parent), _imx6ul_eth_device[idx].mac_name);
  135930:	e51b300c 	ldr	r3, [fp, #-12]
  135934:	e3a02f8a 	mov	r2, #552	; 0x228
  135938:	e0020392 	mul	r2, r2, r3
  13593c:	e30d3078 	movw	r3, #53368	; 0xd078
  135940:	e3403014 	movt	r3, #20
  135944:	e0820003 	add	r0, r2, r3
  135948:	e30d3078 	movw	r3, #53368	; 0xd078
  13594c:	e3403014 	movt	r3, #20
  135950:	e51b200c 	ldr	r2, [fp, #-12]
  135954:	e3a01f8a 	mov	r1, #552	; 0x228
  135958:	e0020291 	mul	r2, r1, r2
  13595c:	e0833002 	add	r3, r3, r2
  135960:	e283308c 	add	r3, r3, #140	; 0x8c
  135964:	e5933000 	ldr	r3, [r3]
  135968:	e1a01003 	mov	r1, r3
  13596c:	ebffd047 	bl	129a90 <eth_device_init>
  135970:	e50b0008 	str	r0, [fp, #-8]
        if (RT_EOK == state)
  135974:	e51b3008 	ldr	r3, [fp, #-8]
  135978:	e3530000 	cmp	r3, #0
  13597c:	1a000009 	bne	1359a8 <imx6ul_eth_init+0x1c8>
        {
            LOG_I("emac device init success");
  135980:	e3090e34 	movw	r0, #40500	; 0x9e34
  135984:	e3400014 	movt	r0, #20
  135988:	ebff35e1 	bl	103114 <rt_kprintf>
  13598c:	e3090e48 	movw	r0, #40520	; 0x9e48
  135990:	e3400014 	movt	r0, #20
  135994:	ebff35de 	bl	103114 <rt_kprintf>
  135998:	e3090bc8 	movw	r0, #39880	; 0x9bc8
  13599c:	e3400014 	movt	r0, #20
  1359a0:	ebff35db 	bl	103114 <rt_kprintf>
  1359a4:	ea00000b 	b	1359d8 <imx6ul_eth_init+0x1f8>
        }
        else
        {
            LOG_E("emac device init faild: %d", state);
  1359a8:	e3090be4 	movw	r0, #39908	; 0x9be4
  1359ac:	e3400014 	movt	r0, #20
  1359b0:	ebff35d7 	bl	103114 <rt_kprintf>
  1359b4:	e51b1008 	ldr	r1, [fp, #-8]
  1359b8:	e3090e64 	movw	r0, #40548	; 0x9e64
  1359bc:	e3400014 	movt	r0, #20
  1359c0:	ebff35d3 	bl	103114 <rt_kprintf>
  1359c4:	e3090bc8 	movw	r0, #39880	; 0x9bc8
  1359c8:	e3400014 	movt	r0, #20
  1359cc:	ebff35d0 	bl	103114 <rt_kprintf>
            state = -RT_ERROR;
  1359d0:	e3e03000 	mvn	r3, #0
  1359d4:	e50b3008 	str	r3, [fp, #-8]
        }

        rt_sprintf(link_detect,"link_d%d",_imx6ul_eth_device[idx].mac_num);
  1359d8:	e30d3078 	movw	r3, #53368	; 0xd078
  1359dc:	e3403014 	movt	r3, #20
  1359e0:	e51b200c 	ldr	r2, [fp, #-12]
  1359e4:	e3a01f8a 	mov	r1, #552	; 0x228
  1359e8:	e0020291 	mul	r2, r1, r2
  1359ec:	e0833002 	add	r3, r3, r2
  1359f0:	e28330a4 	add	r3, r3, #164	; 0xa4
  1359f4:	e5932000 	ldr	r2, [r3]
  1359f8:	e24b301c 	sub	r3, fp, #28
  1359fc:	e3091e80 	movw	r1, #40576	; 0x9e80
  135a00:	e3401014 	movt	r1, #20
  135a04:	e1a00003 	mov	r0, r3
  135a08:	ebff359f 	bl	10308c <rt_sprintf>
        /* start phy link detect */
        rt_thread_t phy_link_tid;
        phy_link_tid = rt_thread_create(link_detect,
                                phy_detect_thread_entry,
                                &_imx6ul_eth_device[idx],
  135a0c:	e51b300c 	ldr	r3, [fp, #-12]
  135a10:	e3a02f8a 	mov	r2, #552	; 0x228
  135a14:	e0020392 	mul	r2, r2, r3
  135a18:	e30d3078 	movw	r3, #53368	; 0xd078
  135a1c:	e3403014 	movt	r3, #20
  135a20:	e0822003 	add	r2, r2, r3
        phy_link_tid = rt_thread_create(link_detect,
  135a24:	e24b001c 	sub	r0, fp, #28
  135a28:	e3a03002 	mov	r3, #2
  135a2c:	e58d3004 	str	r3, [sp, #4]
  135a30:	e3a03019 	mov	r3, #25
  135a34:	e58d3000 	str	r3, [sp]
  135a38:	e3a03a01 	mov	r3, #4096	; 0x1000
  135a3c:	e3051678 	movw	r1, #22136	; 0x5678
  135a40:	e3401013 	movt	r1, #19
  135a44:	ebff31aa 	bl	1020f4 <rt_thread_create>
  135a48:	e50b0010 	str	r0, [fp, #-16]
                                4096,
                                25,
                                2);
        if (phy_link_tid != RT_NULL)
  135a4c:	e51b3010 	ldr	r3, [fp, #-16]
  135a50:	e3530000 	cmp	r3, #0
  135a54:	0a000001 	beq	135a60 <imx6ul_eth_init+0x280>
        {
            rt_thread_startup(phy_link_tid);
  135a58:	e51b0010 	ldr	r0, [fp, #-16]
  135a5c:	ebff31d9 	bl	1021c8 <rt_thread_startup>
        }
        memset(link_detect,0,sizeof(link_detect));
  135a60:	e24b301c 	sub	r3, fp, #28
  135a64:	e3a0200a 	mov	r2, #10
  135a68:	e3a01000 	mov	r1, #0
  135a6c:	e1a00003 	mov	r0, r3
  135a70:	eb002dff 	bl	141274 <memset>
    for (int idx=0; idx<GET_ARRAY_NUM(_imx6ul_eth_device); idx++)
  135a74:	e51b300c 	ldr	r3, [fp, #-12]
  135a78:	e2833001 	add	r3, r3, #1
  135a7c:	e50b300c 	str	r3, [fp, #-12]
  135a80:	e51b300c 	ldr	r3, [fp, #-12]
  135a84:	e3530000 	cmp	r3, #0
  135a88:	0affff6b 	beq	13583c <imx6ul_eth_init+0x5c>
    }

    if (eth_select > GET_ARRAY_NUM(_imx6ul_eth_device)) 
  135a8c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  135a90:	e3530001 	cmp	r3, #1
  135a94:	9a000005 	bls	135ab0 <imx6ul_eth_init+0x2d0>
    {
        *eth_name = RT_NULL;
  135a98:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  135a9c:	e3a02000 	mov	r2, #0
  135aa0:	e5832000 	str	r2, [r3]
        state = -RT_ERROR;
  135aa4:	e3e03000 	mvn	r3, #0
  135aa8:	e50b3008 	str	r3, [fp, #-8]
  135aac:	ea000009 	b	135ad8 <imx6ul_eth_init+0x2f8>
    } 
    else 
    {
        *eth_name = _imx6ul_eth_device[eth_select].mac_name;
  135ab0:	e30d3078 	movw	r3, #53368	; 0xd078
  135ab4:	e3403014 	movt	r3, #20
  135ab8:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  135abc:	e3a01f8a 	mov	r1, #552	; 0x228
  135ac0:	e0020291 	mul	r2, r1, r2
  135ac4:	e0833002 	add	r3, r3, r2
  135ac8:	e283308c 	add	r3, r3, #140	; 0x8c
  135acc:	e5932000 	ldr	r2, [r3]
  135ad0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  135ad4:	e5832000 	str	r2, [r3]
    }

    return state;
  135ad8:	e51b3008 	ldr	r3, [fp, #-8]
}
  135adc:	e1a00003 	mov	r0, r3
  135ae0:	e24bd004 	sub	sp, fp, #4
  135ae4:	e8bd8800 	pop	{fp, pc}
  135ae8:	0014d05c 	.word	0x0014d05c

00135aec <__assert_func>:
        __BKPT(0);
    }
}
#elif(defined(__GNUC__))
void __assert_func(const char *file, int line, const char *func, const char *failedExpr)
{
  135aec:	e92d4800 	push	{fp, lr}
  135af0:	e28db004 	add	fp, sp, #4
  135af4:	e24dd018 	sub	sp, sp, #24
  135af8:	e50b0008 	str	r0, [fp, #-8]
  135afc:	e50b100c 	str	r1, [fp, #-12]
  135b00:	e50b2010 	str	r2, [fp, #-16]
  135b04:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    PRINTF("ASSERT ERROR \" %s \": file \"%s\" Line \"%d\" function name \"%s\" \n", failedExpr, file, line, func);
  135b08:	e51b3010 	ldr	r3, [fp, #-16]
  135b0c:	e58d3000 	str	r3, [sp]
  135b10:	e51b300c 	ldr	r3, [fp, #-12]
  135b14:	e51b2008 	ldr	r2, [fp, #-8]
  135b18:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  135b1c:	e3090ea0 	movw	r0, #40608	; 0x9ea0
  135b20:	e3400014 	movt	r0, #20
  135b24:	ebff357a 	bl	103114 <rt_kprintf>
    for (;;)
    {
        __BKPT(0);
  135b28:	e1200070 	bkpt	0x0000
  135b2c:	eafffffd 	b	135b28 <__assert_func+0x3c>

00135b30 <SDK_Malloc>:
                           /*   SYSCON->STARTERCLR[index] = 1u << intNumber; */
}
#endif /*CPU_QN908X */

void *SDK_Malloc(size_t size, size_t alignbytes)
{
  135b30:	e92d4800 	push	{fp, lr}
  135b34:	e28db004 	add	fp, sp, #4
  135b38:	e24dd018 	sub	sp, sp, #24
  135b3c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  135b40:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    mem_align_cb_t *p_cb = NULL;
  135b44:	e3a03000 	mov	r3, #0
  135b48:	e50b3008 	str	r3, [fp, #-8]
    uint32_t alignedsize = SDK_SIZEALIGN(size, alignbytes) + alignbytes + sizeof(mem_align_cb_t);
  135b4c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  135b50:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  135b54:	e0823003 	add	r3, r2, r3
  135b58:	e2432001 	sub	r2, r3, #1
  135b5c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  135b60:	e2633000 	rsb	r3, r3, #0
  135b64:	e0022003 	and	r2, r2, r3
  135b68:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  135b6c:	e0823003 	add	r3, r2, r3
  135b70:	e2833004 	add	r3, r3, #4
  135b74:	e50b300c 	str	r3, [fp, #-12]
    void *p_align_addr, *p_addr = malloc(alignedsize);
  135b78:	e51b000c 	ldr	r0, [fp, #-12]
  135b7c:	eb001df4 	bl	13d354 <malloc>
  135b80:	e1a03000 	mov	r3, r0
  135b84:	e50b3010 	str	r3, [fp, #-16]

    if (!p_addr)
  135b88:	e51b3010 	ldr	r3, [fp, #-16]
  135b8c:	e3530000 	cmp	r3, #0
  135b90:	1a000001 	bne	135b9c <SDK_Malloc+0x6c>
    {
        return NULL;
  135b94:	e3a03000 	mov	r3, #0
  135b98:	ea000014 	b	135bf0 <SDK_Malloc+0xc0>
    }

    p_align_addr = (void *)SDK_SIZEALIGN((uint32_t)p_addr + sizeof(mem_align_cb_t), alignbytes);
  135b9c:	e51b2010 	ldr	r2, [fp, #-16]
  135ba0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  135ba4:	e0823003 	add	r3, r2, r3
  135ba8:	e2832003 	add	r2, r3, #3
  135bac:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  135bb0:	e2633000 	rsb	r3, r3, #0
  135bb4:	e0033002 	and	r3, r3, r2
  135bb8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

    p_cb = (mem_align_cb_t *)((uint32_t)p_align_addr - 4);
  135bbc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135bc0:	e2433004 	sub	r3, r3, #4
  135bc4:	e50b3008 	str	r3, [fp, #-8]
    p_cb->identifier = SDK_MEM_MAGIC_NUMBER;
  135bc8:	e51b3008 	ldr	r3, [fp, #-8]
  135bcc:	e3032039 	movw	r2, #12345	; 0x3039
  135bd0:	e1c320b0 	strh	r2, [r3]
    p_cb->offset = (uint32_t)p_align_addr - (uint32_t)p_addr;
  135bd4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  135bd8:	e51b3010 	ldr	r3, [fp, #-16]
  135bdc:	e0423003 	sub	r3, r2, r3
  135be0:	e6ff2073 	uxth	r2, r3
  135be4:	e51b3008 	ldr	r3, [fp, #-8]
  135be8:	e1c320b2 	strh	r2, [r3, #2]

    return (void *)p_align_addr;
  135bec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
}
  135bf0:	e1a00003 	mov	r0, r3
  135bf4:	e24bd004 	sub	sp, fp, #4
  135bf8:	e8bd8800 	pop	{fp, pc}

00135bfc <SDK_Free>:

void SDK_Free(void *ptr)
{
  135bfc:	e92d4800 	push	{fp, lr}
  135c00:	e28db004 	add	fp, sp, #4
  135c04:	e24dd010 	sub	sp, sp, #16
  135c08:	e50b0010 	str	r0, [fp, #-16]
    mem_align_cb_t *p_cb = (mem_align_cb_t *)((uint32_t)ptr - 4);
  135c0c:	e51b3010 	ldr	r3, [fp, #-16]
  135c10:	e2433004 	sub	r3, r3, #4
  135c14:	e50b3008 	str	r3, [fp, #-8]

    if (p_cb->identifier != SDK_MEM_MAGIC_NUMBER)
  135c18:	e51b3008 	ldr	r3, [fp, #-8]
  135c1c:	e1d330b0 	ldrh	r3, [r3]
  135c20:	e3032039 	movw	r2, #12345	; 0x3039
  135c24:	e1530002 	cmp	r3, r2
  135c28:	1a000006 	bne	135c48 <SDK_Free+0x4c>
    {
        return;
    }

    free((void *)((uint32_t)ptr - p_cb->offset));
  135c2c:	e51b3010 	ldr	r3, [fp, #-16]
  135c30:	e51b2008 	ldr	r2, [fp, #-8]
  135c34:	e1d220b2 	ldrh	r2, [r2, #2]
  135c38:	e0433002 	sub	r3, r3, r2
  135c3c:	e1a00003 	mov	r0, r3
  135c40:	eb001f7f 	bl	13da44 <free>
  135c44:	ea000000 	b	135c4c <SDK_Free+0x50>
        return;
  135c48:	e320f000 	nop	{0}
}
  135c4c:	e24bd004 	sub	sp, fp, #4
  135c50:	e8bd8800 	pop	{fp, pc}

00135c54 <ENET_Reset>:
{
  135c54:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  135c58:	e28db000 	add	fp, sp, #0
  135c5c:	e24dd00c 	sub	sp, sp, #12
  135c60:	e50b0008 	str	r0, [fp, #-8]
    base->ECR |= ENET_ECR_RESET_MASK;
  135c64:	e51b3008 	ldr	r3, [fp, #-8]
  135c68:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  135c6c:	e3832001 	orr	r2, r3, #1
  135c70:	e51b3008 	ldr	r3, [fp, #-8]
  135c74:	e5832024 	str	r2, [r3, #36]	; 0x24
}
  135c78:	e320f000 	nop	{0}
  135c7c:	e28bd000 	add	sp, fp, #0
  135c80:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  135c84:	e12fff1e 	bx	lr

00135c88 <ENET_GetSMI>:
{
  135c88:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  135c8c:	e28db000 	add	fp, sp, #0
  135c90:	e24dd00c 	sub	sp, sp, #12
  135c94:	e50b0008 	str	r0, [fp, #-8]
    return (0 != (base->MSCR & 0x7E));
  135c98:	e51b3008 	ldr	r3, [fp, #-8]
  135c9c:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  135ca0:	e203307e 	and	r3, r3, #126	; 0x7e
  135ca4:	e3530000 	cmp	r3, #0
  135ca8:	13a03001 	movne	r3, #1
  135cac:	03a03000 	moveq	r3, #0
  135cb0:	e6ef3073 	uxtb	r3, r3
}
  135cb4:	e1a00003 	mov	r0, r3
  135cb8:	e28bd000 	add	sp, fp, #0
  135cbc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  135cc0:	e12fff1e 	bx	lr

00135cc4 <ENET_EnableSleepMode>:
{
  135cc4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  135cc8:	e28db000 	add	fp, sp, #0
  135ccc:	e24dd00c 	sub	sp, sp, #12
  135cd0:	e50b0008 	str	r0, [fp, #-8]
  135cd4:	e1a03001 	mov	r3, r1
  135cd8:	e54b3009 	strb	r3, [fp, #-9]
    if (enable)
  135cdc:	e55b3009 	ldrb	r3, [fp, #-9]
  135ce0:	e3530000 	cmp	r3, #0
  135ce4:	0a000005 	beq	135d00 <ENET_EnableSleepMode+0x3c>
        base->ECR |= ENET_ECR_SLEEP_MASK | ENET_ECR_MAGICEN_MASK;
  135ce8:	e51b3008 	ldr	r3, [fp, #-8]
  135cec:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  135cf0:	e383200c 	orr	r2, r3, #12
  135cf4:	e51b3008 	ldr	r3, [fp, #-8]
  135cf8:	e5832024 	str	r2, [r3, #36]	; 0x24
}
  135cfc:	ea000004 	b	135d14 <ENET_EnableSleepMode+0x50>
        base->ECR &= ~(ENET_ECR_SLEEP_MASK | ENET_ECR_MAGICEN_MASK);
  135d00:	e51b3008 	ldr	r3, [fp, #-8]
  135d04:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  135d08:	e3c3200c 	bic	r2, r3, #12
  135d0c:	e51b3008 	ldr	r3, [fp, #-8]
  135d10:	e5832024 	str	r2, [r3, #36]	; 0x24
}
  135d14:	e320f000 	nop	{0}
  135d18:	e28bd000 	add	sp, fp, #0
  135d1c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  135d20:	e12fff1e 	bx	lr

00135d24 <ENET_EnableInterrupts>:
{
  135d24:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  135d28:	e28db000 	add	fp, sp, #0
  135d2c:	e24dd00c 	sub	sp, sp, #12
  135d30:	e50b0008 	str	r0, [fp, #-8]
  135d34:	e50b100c 	str	r1, [fp, #-12]
    base->EIMR |= mask;
  135d38:	e51b3008 	ldr	r3, [fp, #-8]
  135d3c:	e5932008 	ldr	r2, [r3, #8]
  135d40:	e51b300c 	ldr	r3, [fp, #-12]
  135d44:	e1822003 	orr	r2, r2, r3
  135d48:	e51b3008 	ldr	r3, [fp, #-8]
  135d4c:	e5832008 	str	r2, [r3, #8]
}
  135d50:	e320f000 	nop	{0}
  135d54:	e28bd000 	add	sp, fp, #0
  135d58:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  135d5c:	e12fff1e 	bx	lr

00135d60 <ENET_GetInstance>:

/*******************************************************************************
 * Code
 ******************************************************************************/
uint32_t ENET_GetInstance(ENET_Type *base)
{
  135d60:	e92d4800 	push	{fp, lr}
  135d64:	e28db004 	add	fp, sp, #4
  135d68:	e24dd010 	sub	sp, sp, #16
  135d6c:	e50b0010 	str	r0, [fp, #-16]
    uint32_t instance;
    /* Find the instance index from base address mappings. */
    for (instance = 0; instance < ARRAY_SIZE(s_enetBases); instance++)
  135d70:	e3a03000 	mov	r3, #0
  135d74:	e50b3008 	str	r3, [fp, #-8]
  135d78:	ea000009 	b	135da4 <ENET_GetInstance+0x44>
    {
        if (s_enetBases[instance] == base)
  135d7c:	e3093ee0 	movw	r3, #40672	; 0x9ee0
  135d80:	e3403014 	movt	r3, #20
  135d84:	e51b2008 	ldr	r2, [fp, #-8]
  135d88:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  135d8c:	e51b2010 	ldr	r2, [fp, #-16]
  135d90:	e1520003 	cmp	r2, r3
  135d94:	0a000006 	beq	135db4 <ENET_GetInstance+0x54>
    for (instance = 0; instance < ARRAY_SIZE(s_enetBases); instance++)
  135d98:	e51b3008 	ldr	r3, [fp, #-8]
  135d9c:	e2833001 	add	r3, r3, #1
  135da0:	e50b3008 	str	r3, [fp, #-8]
  135da4:	e51b3008 	ldr	r3, [fp, #-8]
  135da8:	e3530002 	cmp	r3, #2
  135dac:	9afffff2 	bls	135d7c <ENET_GetInstance+0x1c>
  135db0:	ea000000 	b	135db8 <ENET_GetInstance+0x58>
        {
            break;
  135db4:	e320f000 	nop	{0}
        }
    }
    RT_ASSERT(instance < ARRAY_SIZE(s_enetBases));
  135db8:	e51b3008 	ldr	r3, [fp, #-8]
  135dbc:	e3530002 	cmp	r3, #2
  135dc0:	9a000005 	bls	135ddc <ENET_GetInstance+0x7c>
  135dc4:	e3a020d7 	mov	r2, #215	; 0xd7
  135dc8:	e30a125c 	movw	r1, #41564	; 0xa25c
  135dcc:	e3401014 	movt	r1, #20
  135dd0:	e3090eec 	movw	r0, #40684	; 0x9eec
  135dd4:	e3400014 	movt	r0, #20
  135dd8:	ebff35ee 	bl	103598 <rt_assert_handler>

    return instance;
  135ddc:	e51b3008 	ldr	r3, [fp, #-8]
}
  135de0:	e1a00003 	mov	r0, r3
  135de4:	e24bd004 	sub	sp, fp, #4
  135de8:	e8bd8800 	pop	{fp, pc}

00135dec <ENET_GetDefaultConfig>:
};

#endif

void ENET_GetDefaultConfig(enet_config_t *config)
{
  135dec:	e92d4800 	push	{fp, lr}
  135df0:	e28db004 	add	fp, sp, #4
  135df4:	e24dd008 	sub	sp, sp, #8
  135df8:	e50b0008 	str	r0, [fp, #-8]
    /* Checks input parameter. */
    RT_ASSERT(config);
  135dfc:	e51b3008 	ldr	r3, [fp, #-8]
  135e00:	e3530000 	cmp	r3, #0
  135e04:	1a000005 	bne	135e20 <ENET_GetDefaultConfig+0x34>
  135e08:	e3a020e9 	mov	r2, #233	; 0xe9
  135e0c:	e30a1270 	movw	r1, #41584	; 0xa270
  135e10:	e3401014 	movt	r1, #20
  135e14:	e3090f10 	movw	r0, #40720	; 0x9f10
  135e18:	e3400014 	movt	r0, #20
  135e1c:	ebff35dd 	bl	103598 <rt_assert_handler>

    /* Initializes the MAC configure structure to zero. */
    memset(config, 0, sizeof(enet_config_t));
  135e20:	e3a02024 	mov	r2, #36	; 0x24
  135e24:	e3a01000 	mov	r1, #0
  135e28:	e51b0008 	ldr	r0, [fp, #-8]
  135e2c:	eb002d10 	bl	141274 <memset>

    #if defined (FSL_FEATURE_ENET_HAS_INTERRUPT_COALESCE) && FSL_FEATURE_ENET_HAS_INTERRUPT_COALESCE
    config->intCoalesceCfg = &intcoalesce_config;
  135e30:	e51b2008 	ldr	r2, [fp, #-8]
  135e34:	e30d32a0 	movw	r3, #53920	; 0xd2a0
  135e38:	e3403014 	movt	r3, #20
  135e3c:	e5823020 	str	r3, [r2, #32]
    #endif

    /* Sets MII mode, full duplex, 100Mbps for MAC and PHY data interface. */
    config->miiMode = kENET_RmiiMode;
  135e40:	e51b3008 	ldr	r3, [fp, #-8]
  135e44:	e3a02001 	mov	r2, #1
  135e48:	e583200c 	str	r2, [r3, #12]
    config->miiSpeed = kENET_MiiSpeed100M;
  135e4c:	e51b3008 	ldr	r3, [fp, #-8]
  135e50:	e3a02001 	mov	r2, #1
  135e54:	e5832010 	str	r2, [r3, #16]
    config->miiDuplex = kENET_MiiFullDuplex;
  135e58:	e51b3008 	ldr	r3, [fp, #-8]
  135e5c:	e3a02001 	mov	r2, #1
  135e60:	e5832014 	str	r2, [r3, #20]

    /* Sets the maximum receive frame length. */
    config->rxMaxFrameLen = ENET_FRAME_MAX_FRAMELEN;
  135e64:	e51b3008 	ldr	r3, [fp, #-8]
  135e68:	e30025ee 	movw	r2, #1518	; 0x5ee
  135e6c:	e1c320b8 	strh	r2, [r3, #8]
}
  135e70:	e320f000 	nop	{0}
  135e74:	e24bd004 	sub	sp, fp, #4
  135e78:	e8bd8800 	pop	{fp, pc}

00135e7c <ENET_Init>:
               enet_handle_t *handle,
               const enet_config_t *config,
               const enet_buffer_config_t *bufferConfig,
               uint8_t *macAddr,
               uint32_t srcClock_Hz)
{
  135e7c:	e92d4800 	push	{fp, lr}
  135e80:	e28db004 	add	fp, sp, #4
  135e84:	e24dd018 	sub	sp, sp, #24
  135e88:	e50b0008 	str	r0, [fp, #-8]
  135e8c:	e50b100c 	str	r1, [fp, #-12]
  135e90:	e50b2010 	str	r2, [fp, #-16]
  135e94:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    /* Checks input parameters. */
    RT_ASSERT(handle);
  135e98:	e51b300c 	ldr	r3, [fp, #-12]
  135e9c:	e3530000 	cmp	r3, #0
  135ea0:	1a000005 	bne	135ebc <ENET_Init+0x40>
  135ea4:	e3002103 	movw	r2, #259	; 0x103
  135ea8:	e30a1288 	movw	r1, #41608	; 0xa288
  135eac:	e3401014 	movt	r1, #20
  135eb0:	e3090f18 	movw	r0, #40728	; 0x9f18
  135eb4:	e3400014 	movt	r0, #20
  135eb8:	ebff35b6 	bl	103598 <rt_assert_handler>
    RT_ASSERT(config);
  135ebc:	e51b3010 	ldr	r3, [fp, #-16]
  135ec0:	e3530000 	cmp	r3, #0
  135ec4:	1a000005 	bne	135ee0 <ENET_Init+0x64>
  135ec8:	e3a02f41 	mov	r2, #260	; 0x104
  135ecc:	e30a1288 	movw	r1, #41608	; 0xa288
  135ed0:	e3401014 	movt	r1, #20
  135ed4:	e3090f10 	movw	r0, #40720	; 0x9f10
  135ed8:	e3400014 	movt	r0, #20
  135edc:	ebff35ad 	bl	103598 <rt_assert_handler>
    RT_ASSERT(bufferConfig);
  135ee0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135ee4:	e3530000 	cmp	r3, #0
  135ee8:	1a000005 	bne	135f04 <ENET_Init+0x88>
  135eec:	e3002105 	movw	r2, #261	; 0x105
  135ef0:	e30a1288 	movw	r1, #41608	; 0xa288
  135ef4:	e3401014 	movt	r1, #20
  135ef8:	e3090f20 	movw	r0, #40736	; 0x9f20
  135efc:	e3400014 	movt	r0, #20
  135f00:	ebff35a4 	bl	103598 <rt_assert_handler>
    RT_ASSERT(bufferConfig->rxBdStartAddrAlign);
  135f04:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135f08:	e593300c 	ldr	r3, [r3, #12]
  135f0c:	e3530000 	cmp	r3, #0
  135f10:	1a000005 	bne	135f2c <ENET_Init+0xb0>
  135f14:	e3002106 	movw	r2, #262	; 0x106
  135f18:	e30a1288 	movw	r1, #41608	; 0xa288
  135f1c:	e3401014 	movt	r1, #20
  135f20:	e3090f30 	movw	r0, #40752	; 0x9f30
  135f24:	e3400014 	movt	r0, #20
  135f28:	ebff359a 	bl	103598 <rt_assert_handler>
    RT_ASSERT(bufferConfig->txBdStartAddrAlign);
  135f2c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135f30:	e5933010 	ldr	r3, [r3, #16]
  135f34:	e3530000 	cmp	r3, #0
  135f38:	1a000005 	bne	135f54 <ENET_Init+0xd8>
  135f3c:	e3002107 	movw	r2, #263	; 0x107
  135f40:	e30a1288 	movw	r1, #41608	; 0xa288
  135f44:	e3401014 	movt	r1, #20
  135f48:	e3090f54 	movw	r0, #40788	; 0x9f54
  135f4c:	e3400014 	movt	r0, #20
  135f50:	ebff3590 	bl	103598 <rt_assert_handler>
    RT_ASSERT(bufferConfig->rxBufferAlign);
  135f54:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135f58:	e5933014 	ldr	r3, [r3, #20]
  135f5c:	e3530000 	cmp	r3, #0
  135f60:	1a000005 	bne	135f7c <ENET_Init+0x100>
  135f64:	e3a02f42 	mov	r2, #264	; 0x108
  135f68:	e30a1288 	movw	r1, #41608	; 0xa288
  135f6c:	e3401014 	movt	r1, #20
  135f70:	e3090f78 	movw	r0, #40824	; 0x9f78
  135f74:	e3400014 	movt	r0, #20
  135f78:	ebff3586 	bl	103598 <rt_assert_handler>
    RT_ASSERT(bufferConfig->txBufferAlign);
  135f7c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135f80:	e5933018 	ldr	r3, [r3, #24]
  135f84:	e3530000 	cmp	r3, #0
  135f88:	1a000005 	bne	135fa4 <ENET_Init+0x128>
  135f8c:	e3002109 	movw	r2, #265	; 0x109
  135f90:	e30a1288 	movw	r1, #41608	; 0xa288
  135f94:	e3401014 	movt	r1, #20
  135f98:	e3090f94 	movw	r0, #40852	; 0x9f94
  135f9c:	e3400014 	movt	r0, #20
  135fa0:	ebff357c 	bl	103598 <rt_assert_handler>
    RT_ASSERT(macAddr);
  135fa4:	e59b3004 	ldr	r3, [fp, #4]
  135fa8:	e3530000 	cmp	r3, #0
  135fac:	1a000005 	bne	135fc8 <ENET_Init+0x14c>
  135fb0:	e300210a 	movw	r2, #266	; 0x10a
  135fb4:	e30a1288 	movw	r1, #41608	; 0xa288
  135fb8:	e3401014 	movt	r1, #20
  135fbc:	e3090fb0 	movw	r0, #40880	; 0x9fb0
  135fc0:	e3400014 	movt	r0, #20
  135fc4:	ebff3573 	bl	103598 <rt_assert_handler>
    RT_ASSERT(bufferConfig->rxBuffSizeAlign >= ENET_RX_MIN_BUFFERSIZE);
  135fc8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135fcc:	e5933004 	ldr	r3, [r3, #4]
  135fd0:	e35300ff 	cmp	r3, #255	; 0xff
  135fd4:	8a000005 	bhi	135ff0 <ENET_Init+0x174>
  135fd8:	e300210b 	movw	r2, #267	; 0x10b
  135fdc:	e30a1288 	movw	r1, #41608	; 0xa288
  135fe0:	e3401014 	movt	r1, #20
  135fe4:	e3090fb8 	movw	r0, #40888	; 0x9fb8
  135fe8:	e3400014 	movt	r0, #20
  135fec:	ebff3569 	bl	103598 <rt_assert_handler>
    /* Make sure the buffers should be have the capability of process at least one maximum frame. */
    if (config->macSpecialConfig & kENET_ControlVLANTagEnable)
  135ff0:	e51b3010 	ldr	r3, [fp, #-16]
  135ff4:	e5933000 	ldr	r3, [r3]
  135ff8:	e2033c02 	and	r3, r3, #512	; 0x200
  135ffc:	e3530000 	cmp	r3, #0
  136000:	0a00000e 	beq	136040 <ENET_Init+0x1c4>
    {
        RT_ASSERT(bufferConfig->txBuffSizeAlign * bufferConfig->txBdNumber > (ENET_FRAME_MAX_FRAMELEN + ENET_FRAME_VLAN_TAGLEN));
  136004:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136008:	e5933008 	ldr	r3, [r3, #8]
  13600c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  136010:	e1d220b2 	ldrh	r2, [r2, #2]
  136014:	e0030392 	mul	r3, r2, r3
  136018:	e30025f2 	movw	r2, #1522	; 0x5f2
  13601c:	e1530002 	cmp	r3, r2
  136020:	8a000023 	bhi	1360b4 <ENET_Init+0x238>
  136024:	e300210f 	movw	r2, #271	; 0x10f
  136028:	e30a1288 	movw	r1, #41608	; 0xa288
  13602c:	e3401014 	movt	r1, #20
  136030:	e3090ff0 	movw	r0, #40944	; 0x9ff0
  136034:	e3400014 	movt	r0, #20
  136038:	ebff3556 	bl	103598 <rt_assert_handler>
  13603c:	ea00001c 	b	1360b4 <ENET_Init+0x238>
    }
    else
    {
        RT_ASSERT(bufferConfig->txBuffSizeAlign * bufferConfig->txBdNumber > ENET_FRAME_MAX_FRAMELEN);
  136040:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136044:	e5933008 	ldr	r3, [r3, #8]
  136048:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  13604c:	e1d220b2 	ldrh	r2, [r2, #2]
  136050:	e0030392 	mul	r3, r2, r3
  136054:	e30025ee 	movw	r2, #1518	; 0x5ee
  136058:	e1530002 	cmp	r3, r2
  13605c:	8a000005 	bhi	136078 <ENET_Init+0x1fc>
  136060:	e3002113 	movw	r2, #275	; 0x113
  136064:	e30a1288 	movw	r1, #41608	; 0xa288
  136068:	e3401014 	movt	r1, #20
  13606c:	e30a0060 	movw	r0, #41056	; 0xa060
  136070:	e3400014 	movt	r0, #20
  136074:	ebff3547 	bl	103598 <rt_assert_handler>
        RT_ASSERT(bufferConfig->rxBuffSizeAlign * bufferConfig->rxBdNumber > config->rxMaxFrameLen);
  136078:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13607c:	e5933004 	ldr	r3, [r3, #4]
  136080:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  136084:	e1d220b0 	ldrh	r2, [r2]
  136088:	e0030392 	mul	r3, r2, r3
  13608c:	e51b2010 	ldr	r2, [fp, #-16]
  136090:	e1d220b8 	ldrh	r2, [r2, #8]
  136094:	e1530002 	cmp	r3, r2
  136098:	8a000005 	bhi	1360b4 <ENET_Init+0x238>
  13609c:	e3a02f45 	mov	r2, #276	; 0x114
  1360a0:	e30a1288 	movw	r1, #41608	; 0xa288
  1360a4:	e3401014 	movt	r1, #20
  1360a8:	e30a00b4 	movw	r0, #41140	; 0xa0b4
  1360ac:	e3400014 	movt	r0, #20
  1360b0:	ebff3538 	bl	103598 <rt_assert_handler>
    }

    /* Reset ENET module. */
    ENET_Reset(base);
  1360b4:	e51b0008 	ldr	r0, [fp, #-8]
  1360b8:	ebfffee5 	bl	135c54 <ENET_Reset>
    /* Initializes the ENET transmit buffer descriptors. */
    ENET_SetTxBufferDescriptors(bufferConfig->txBdStartAddrAlign, bufferConfig->txPhyBufferAlign, bufferConfig->txBufferAlign, 
  1360bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1360c0:	e5930010 	ldr	r0, [r3, #16]
  1360c4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1360c8:	e5931028 	ldr	r1, [r3, #40]	; 0x28
  1360cc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1360d0:	e5932018 	ldr	r2, [r3, #24]
  1360d4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1360d8:	e593c008 	ldr	ip, [r3, #8]
                                bufferConfig->txBuffSizeAlign, bufferConfig->txBdNumber);
  1360dc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1360e0:	e1d330b2 	ldrh	r3, [r3, #2]
    ENET_SetTxBufferDescriptors(bufferConfig->txBdStartAddrAlign, bufferConfig->txPhyBufferAlign, bufferConfig->txBufferAlign, 
  1360e4:	e58d3000 	str	r3, [sp]
  1360e8:	e1a0300c 	mov	r3, ip
  1360ec:	eb00018b 	bl	136720 <ENET_SetTxBufferDescriptors>
    /* Initializes the ENET receive buffer descriptors. */
    ENET_SetRxBufferDescriptors(bufferConfig->rxBdStartAddrAlign, bufferConfig->rxPhyBufferAlign, bufferConfig->rxBufferAlign, 
  1360f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1360f4:	e593000c 	ldr	r0, [r3, #12]
  1360f8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1360fc:	e5931024 	ldr	r1, [r3, #36]	; 0x24
  136100:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136104:	e5932014 	ldr	r2, [r3, #20]
  136108:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13610c:	e593c004 	ldr	ip, [r3, #4]
                                bufferConfig->rxBuffSizeAlign, bufferConfig->rxBdNumber,
  136110:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136114:	e1d330b0 	ldrh	r3, [r3]
    ENET_SetRxBufferDescriptors(bufferConfig->rxBdStartAddrAlign, bufferConfig->rxPhyBufferAlign, bufferConfig->rxBufferAlign, 
  136118:	e1a0e003 	mov	lr, r3
                                !!(config->interrupt & (kENET_RxFrameInterrupt | kENET_RxBufferInterrupt)));
  13611c:	e51b3010 	ldr	r3, [fp, #-16]
  136120:	e5933004 	ldr	r3, [r3, #4]
  136124:	e2033403 	and	r3, r3, #50331648	; 0x3000000
    ENET_SetRxBufferDescriptors(bufferConfig->rxBdStartAddrAlign, bufferConfig->rxPhyBufferAlign, bufferConfig->rxBufferAlign, 
  136128:	e3530000 	cmp	r3, #0
  13612c:	13a03001 	movne	r3, #1
  136130:	03a03000 	moveq	r3, #0
  136134:	e6ef3073 	uxtb	r3, r3
  136138:	e58d3004 	str	r3, [sp, #4]
  13613c:	e58de000 	str	lr, [sp]
  136140:	e1a0300c 	mov	r3, ip
  136144:	eb0001c7 	bl	136868 <ENET_SetRxBufferDescriptors>
    /* Initializes the ENET MAC controller. */
    ENET_SetMacController(base, config, bufferConfig, macAddr, srcClock_Hz);
  136148:	e59b3008 	ldr	r3, [fp, #8]
  13614c:	e58d3000 	str	r3, [sp]
  136150:	e59b3004 	ldr	r3, [fp, #4]
  136154:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  136158:	e51b1010 	ldr	r1, [fp, #-16]
  13615c:	e51b0008 	ldr	r0, [fp, #-8]
  136160:	eb00005e 	bl	1362e0 <ENET_SetMacController>
    /* Set all buffers or data in handler for data transmit/receive process. */
    ENET_SetHandler(base, handle, config, bufferConfig);
  136164:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136168:	e51b2010 	ldr	r2, [fp, #-16]
  13616c:	e51b100c 	ldr	r1, [fp, #-12]
  136170:	e51b0008 	ldr	r0, [fp, #-8]
  136174:	eb00002a 	bl	136224 <ENET_SetHandler>
}
  136178:	e320f000 	nop	{0}
  13617c:	e24bd004 	sub	sp, fp, #4
  136180:	e8bd8800 	pop	{fp, pc}

00136184 <ENET_Deinit>:

void ENET_Deinit(ENET_Type *base)
{
  136184:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  136188:	e28db000 	add	fp, sp, #0
  13618c:	e24dd00c 	sub	sp, sp, #12
  136190:	e50b0008 	str	r0, [fp, #-8]
    /* Disable interrupt. */
    base->EIMR = 0;
  136194:	e51b3008 	ldr	r3, [fp, #-8]
  136198:	e3a02000 	mov	r2, #0
  13619c:	e5832008 	str	r2, [r3, #8]

    /* Disable ENET. */
    base->ECR &= ~ENET_ECR_ETHEREN_MASK;
  1361a0:	e51b3008 	ldr	r3, [fp, #-8]
  1361a4:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  1361a8:	e3c32002 	bic	r2, r3, #2
  1361ac:	e51b3008 	ldr	r3, [fp, #-8]
  1361b0:	e5832024 	str	r2, [r3, #36]	; 0x24

}
  1361b4:	e320f000 	nop	{0}
  1361b8:	e28bd000 	add	sp, fp, #0
  1361bc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1361c0:	e12fff1e 	bx	lr

001361c4 <ENET_SetCallback>:

void ENET_SetCallback(enet_handle_t *handle, enet_callback_t callback, void *userData)
{
  1361c4:	e92d4800 	push	{fp, lr}
  1361c8:	e28db004 	add	fp, sp, #4
  1361cc:	e24dd010 	sub	sp, sp, #16
  1361d0:	e50b0008 	str	r0, [fp, #-8]
  1361d4:	e50b100c 	str	r1, [fp, #-12]
  1361d8:	e50b2010 	str	r2, [fp, #-16]
    RT_ASSERT(handle);
  1361dc:	e51b3008 	ldr	r3, [fp, #-8]
  1361e0:	e3530000 	cmp	r3, #0
  1361e4:	1a000005 	bne	136200 <ENET_SetCallback+0x3c>
  1361e8:	e3002132 	movw	r2, #306	; 0x132
  1361ec:	e30a1294 	movw	r1, #41620	; 0xa294
  1361f0:	e3401014 	movt	r1, #20
  1361f4:	e3090f18 	movw	r0, #40728	; 0x9f18
  1361f8:	e3400014 	movt	r0, #20
  1361fc:	ebff34e5 	bl	103598 <rt_assert_handler>

    /* Set callback and userData. */
    handle->callback = callback;
  136200:	e51b3008 	ldr	r3, [fp, #-8]
  136204:	e51b200c 	ldr	r2, [fp, #-12]
  136208:	e5832018 	str	r2, [r3, #24]
    handle->userData = userData;
  13620c:	e51b3008 	ldr	r3, [fp, #-8]
  136210:	e51b2010 	ldr	r2, [fp, #-16]
  136214:	e583201c 	str	r2, [r3, #28]
}
  136218:	e320f000 	nop	{0}
  13621c:	e24bd004 	sub	sp, fp, #4
  136220:	e8bd8800 	pop	{fp, pc}

00136224 <ENET_SetHandler>:

static void ENET_SetHandler(ENET_Type *base,
                            enet_handle_t *handle,
                            const enet_config_t *config,
                            const enet_buffer_config_t *bufferConfig)
{
  136224:	e92d4800 	push	{fp, lr}
  136228:	e28db004 	add	fp, sp, #4
  13622c:	e24dd018 	sub	sp, sp, #24
  136230:	e50b0010 	str	r0, [fp, #-16]
  136234:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  136238:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  13623c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    // struct rt_imx6ul_ethps *imx6ul_device = rt_container_of(config,struct rt_imx6ul_ethps,config);
    uint32_t instance = get_instance_by_base(base);
  136240:	e51b0010 	ldr	r0, [fp, #-16]
  136244:	ebfffc85 	bl	135460 <get_instance_by_base>
  136248:	e1a03000 	mov	r3, r0
  13624c:	e50b3008 	str	r3, [fp, #-8]
    memset(handle, 0, sizeof(enet_handle_t));
  136250:	e3a02020 	mov	r2, #32
  136254:	e3a01000 	mov	r1, #0
  136258:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  13625c:	eb002c04 	bl	141274 <memset>
    handle->rxBdBase = bufferConfig->rxBdStartAddrAlign;
  136260:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  136264:	e593200c 	ldr	r2, [r3, #12]
  136268:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13626c:	e5832000 	str	r2, [r3]
    handle->rxBdCurrent = bufferConfig->rxBdStartAddrAlign;
  136270:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  136274:	e593200c 	ldr	r2, [r3, #12]
  136278:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13627c:	e5832004 	str	r2, [r3, #4]
    handle->txBdBase = bufferConfig->txBdStartAddrAlign;
  136280:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  136284:	e5932010 	ldr	r2, [r3, #16]
  136288:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13628c:	e5832008 	str	r2, [r3, #8]
    handle->txBdCurrent = bufferConfig->txBdStartAddrAlign;
  136290:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  136294:	e5932010 	ldr	r2, [r3, #16]
  136298:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13629c:	e583200c 	str	r2, [r3, #12]
    handle->rxBuffSizeAlign = bufferConfig->rxBuffSizeAlign;
  1362a0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1362a4:	e5932004 	ldr	r2, [r3, #4]
  1362a8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1362ac:	e5832010 	str	r2, [r3, #16]
    handle->txBuffSizeAlign = bufferConfig->txBuffSizeAlign;
  1362b0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1362b4:	e5932008 	ldr	r2, [r3, #8]
  1362b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1362bc:	e5832014 	str	r2, [r3, #20]

    /* Save the handle pointer in the global variables. */
    s_ENETHandle[instance] = handle;
  1362c0:	e30e3c08 	movw	r3, #60424	; 0xec08
  1362c4:	e3403014 	movt	r3, #20
  1362c8:	e51b2008 	ldr	r2, [fp, #-8]
  1362cc:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1362d0:	e7831102 	str	r1, [r3, r2, lsl #2]
    // if (config->interrupt & ENET_ERR_INTERRUPT)
    // {
    //     s_enetErrIsr = ENET_ErrorIRQHandler;
    //     EnableIRQ(imx6ul_device->irq_num);
    // }
}
  1362d4:	e320f000 	nop	{0}
  1362d8:	e24bd004 	sub	sp, fp, #4
  1362dc:	e8bd8800 	pop	{fp, pc}

001362e0 <ENET_SetMacController>:
static void ENET_SetMacController(ENET_Type *base,
                                  const enet_config_t *config,
                                  const enet_buffer_config_t *bufferConfig,
                                  uint8_t *macAddr,
                                  uint32_t srcClock_Hz)
{
  1362e0:	e92d4800 	push	{fp, lr}
  1362e4:	e28db004 	add	fp, sp, #4
  1362e8:	e24dd030 	sub	sp, sp, #48	; 0x30
  1362ec:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  1362f0:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  1362f4:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  1362f8:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
    uint32_t rcr = 0;
  1362fc:	e3a03000 	mov	r3, #0
  136300:	e50b3008 	str	r3, [fp, #-8]
    uint32_t tcr = 0;
  136304:	e3a03000 	mov	r3, #0
  136308:	e50b3010 	str	r3, [fp, #-16]
    uint32_t ecr = 0;
  13630c:	e3a03000 	mov	r3, #0
  136310:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    uint32_t macSpecialConfig = config->macSpecialConfig;
  136314:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136318:	e5933000 	ldr	r3, [r3]
  13631c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    uint32_t maxFrameLen = config->rxMaxFrameLen;
  136320:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136324:	e1d330b8 	ldrh	r3, [r3, #8]
  136328:	e50b300c 	str	r3, [fp, #-12]

    /* Maximum frame length check. */
    if ((macSpecialConfig & kENET_ControlVLANTagEnable) && (maxFrameLen <= ENET_FRAME_MAX_FRAMELEN))
  13632c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136330:	e2033c02 	and	r3, r3, #512	; 0x200
  136334:	e3530000 	cmp	r3, #0
  136338:	0a000005 	beq	136354 <ENET_SetMacController+0x74>
  13633c:	e51b300c 	ldr	r3, [fp, #-12]
  136340:	e30025ee 	movw	r2, #1518	; 0x5ee
  136344:	e1530002 	cmp	r3, r2
  136348:	8a000001 	bhi	136354 <ENET_SetMacController+0x74>
    {
        maxFrameLen = (ENET_FRAME_MAX_FRAMELEN + ENET_FRAME_VLAN_TAGLEN);
  13634c:	e30035f2 	movw	r3, #1522	; 0x5f2
  136350:	e50b300c 	str	r3, [fp, #-12]
    }

    /* Configures MAC receive controller with user configure structure. */
    rcr = ENET_RCR_NLC(!!(macSpecialConfig & kENET_ControlRxPayloadCheckEnable)) |
  136354:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136358:	e1a03e83 	lsl	r3, r3, #29
  13635c:	e2032101 	and	r2, r3, #1073741824	; 0x40000000
          ENET_RCR_CFEN(!!(macSpecialConfig & kENET_ControlFlowControlEnable)) |
  136360:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136364:	e1a03783 	lsl	r3, r3, #15
  136368:	e6ff3073 	uxth	r3, r3
    rcr = ENET_RCR_NLC(!!(macSpecialConfig & kENET_ControlRxPayloadCheckEnable)) |
  13636c:	e1822003 	orr	r2, r2, r3
          ENET_RCR_FCE(!!(macSpecialConfig & kENET_ControlFlowControlEnable)) |
  136370:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136374:	e1a03283 	lsl	r3, r3, #5
  136378:	e2033020 	and	r3, r3, #32
          ENET_RCR_CFEN(!!(macSpecialConfig & kENET_ControlFlowControlEnable)) |
  13637c:	e1822003 	orr	r2, r2, r3
          ENET_RCR_PADEN(!!(macSpecialConfig & kENET_ControlRxPadRemoveEnable)) |
  136380:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136384:	e1a03503 	lsl	r3, r3, #10
  136388:	e2033a01 	and	r3, r3, #4096	; 0x1000
          ENET_RCR_FCE(!!(macSpecialConfig & kENET_ControlFlowControlEnable)) |
  13638c:	e1822003 	orr	r2, r2, r3
          ENET_RCR_BC_REJ(!!(macSpecialConfig & kENET_ControlRxBroadCastRejectEnable)) |
  136390:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136394:	e1a03083 	lsl	r3, r3, #1
  136398:	e2033010 	and	r3, r3, #16
          ENET_RCR_PADEN(!!(macSpecialConfig & kENET_ControlRxPadRemoveEnable)) |
  13639c:	e1822003 	orr	r2, r2, r3
          ENET_RCR_PROM(!!(macSpecialConfig & kENET_ControlPromiscuousEnable)) | ENET_RCR_MII_MODE(1) |
  1363a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1363a4:	e1a03223 	lsr	r3, r3, #4
  1363a8:	e2033008 	and	r3, r3, #8
          ENET_RCR_BC_REJ(!!(macSpecialConfig & kENET_ControlRxBroadCastRejectEnable)) |
  1363ac:	e1822003 	orr	r2, r2, r3
          ENET_RCR_RMII_MODE(config->miiMode) | ENET_RCR_RMII_10T(!config->miiSpeed) |
  1363b0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1363b4:	e593300c 	ldr	r3, [r3, #12]
  1363b8:	e1a03403 	lsl	r3, r3, #8
  1363bc:	e2033c01 	and	r3, r3, #256	; 0x100
          ENET_RCR_PROM(!!(macSpecialConfig & kENET_ControlPromiscuousEnable)) | ENET_RCR_MII_MODE(1) |
  1363c0:	e1823003 	orr	r3, r2, r3
          ENET_RCR_RMII_MODE(config->miiMode) | ENET_RCR_RMII_10T(!config->miiSpeed) |
  1363c4:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  1363c8:	e5922010 	ldr	r2, [r2, #16]
  1363cc:	e3520000 	cmp	r2, #0
  1363d0:	1a000001 	bne	1363dc <ENET_SetMacController+0xfc>
  1363d4:	e3a02c02 	mov	r2, #512	; 0x200
  1363d8:	ea000000 	b	1363e0 <ENET_SetMacController+0x100>
  1363dc:	e3a02000 	mov	r2, #0
  1363e0:	e1822003 	orr	r2, r2, r3
          ENET_RCR_MAX_FL(maxFrameLen) | ENET_RCR_CRCFWD(1);
  1363e4:	e51b300c 	ldr	r3, [fp, #-12]
  1363e8:	e1a01803 	lsl	r1, r3, #16
  1363ec:	e3a03000 	mov	r3, #0
  1363f0:	e3433fff 	movt	r3, #16383	; 0x3fff
  1363f4:	e0033001 	and	r3, r3, r1
          ENET_RCR_RMII_MODE(config->miiMode) | ENET_RCR_RMII_10T(!config->miiSpeed) |
  1363f8:	e1823003 	orr	r3, r2, r3
    rcr = ENET_RCR_NLC(!!(macSpecialConfig & kENET_ControlRxPayloadCheckEnable)) |
  1363fc:	e3833901 	orr	r3, r3, #16384	; 0x4000
  136400:	e3833004 	orr	r3, r3, #4
  136404:	e50b3008 	str	r3, [fp, #-8]
    /* Receive setting for half duplex. */
    if (config->miiDuplex == kENET_MiiHalfDuplex)
  136408:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  13640c:	e5933014 	ldr	r3, [r3, #20]
  136410:	e3530000 	cmp	r3, #0
  136414:	1a000002 	bne	136424 <ENET_SetMacController+0x144>
    {
        rcr |= ENET_RCR_DRT_MASK;
  136418:	e51b3008 	ldr	r3, [fp, #-8]
  13641c:	e3833002 	orr	r3, r3, #2
  136420:	e50b3008 	str	r3, [fp, #-8]
    }
    /* Sets internal loop only for MII mode. */
    if ((config->macSpecialConfig & kENET_ControlMIILoopEnable) && (config->miiMode == kENET_MiiMode))
  136424:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136428:	e5933000 	ldr	r3, [r3]
  13642c:	e2033c01 	and	r3, r3, #256	; 0x100
  136430:	e3530000 	cmp	r3, #0
  136434:	0a000009 	beq	136460 <ENET_SetMacController+0x180>
  136438:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  13643c:	e593300c 	ldr	r3, [r3, #12]
  136440:	e3530000 	cmp	r3, #0
  136444:	1a000005 	bne	136460 <ENET_SetMacController+0x180>
    {
        rcr |= ENET_RCR_LOOP_MASK;
  136448:	e51b3008 	ldr	r3, [fp, #-8]
  13644c:	e3833001 	orr	r3, r3, #1
  136450:	e50b3008 	str	r3, [fp, #-8]
        rcr &= ~ENET_RCR_DRT_MASK;
  136454:	e51b3008 	ldr	r3, [fp, #-8]
  136458:	e3c33002 	bic	r3, r3, #2
  13645c:	e50b3008 	str	r3, [fp, #-8]
    }
    base->RCR = rcr;
  136460:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136464:	e51b2008 	ldr	r2, [fp, #-8]
  136468:	e5832084 	str	r2, [r3, #132]	; 0x84

    /* Configures MAC transmit controller: duplex mode, mac address insertion. */
    tcr = base->TCR & ~(ENET_TCR_FDEN_MASK | ENET_TCR_ADDINS_MASK);
  13646c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136470:	e59330c4 	ldr	r3, [r3, #196]	; 0xc4
  136474:	e3c33f41 	bic	r3, r3, #260	; 0x104
  136478:	e50b3010 	str	r3, [fp, #-16]
    tcr |= ENET_TCR_FDEN(config->miiDuplex) | ENET_TCR_ADDINS(!!(macSpecialConfig & kENET_ControlMacAddrInsert));
  13647c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136480:	e5933014 	ldr	r3, [r3, #20]
  136484:	e1a03103 	lsl	r3, r3, #2
  136488:	e2032004 	and	r2, r3, #4
  13648c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136490:	e1a03203 	lsl	r3, r3, #4
  136494:	e2033c01 	and	r3, r3, #256	; 0x100
  136498:	e1823003 	orr	r3, r2, r3
  13649c:	e51b2010 	ldr	r2, [fp, #-16]
  1364a0:	e1823003 	orr	r3, r2, r3
  1364a4:	e50b3010 	str	r3, [fp, #-16]
    base->TCR = tcr;
  1364a8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1364ac:	e51b2010 	ldr	r2, [fp, #-16]
  1364b0:	e58320c4 	str	r2, [r3, #196]	; 0xc4

    /* Configures receive and transmit accelerator. */
    base->TACC = config->txAccelerConfig;
  1364b4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1364b8:	e5d33019 	ldrb	r3, [r3, #25]
  1364bc:	e1a02003 	mov	r2, r3
  1364c0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1364c4:	e58321c0 	str	r2, [r3, #448]	; 0x1c0
    base->RACC = config->rxAccelerConfig;
  1364c8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1364cc:	e5d33018 	ldrb	r3, [r3, #24]
  1364d0:	e1a02003 	mov	r2, r3
  1364d4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1364d8:	e58321c4 	str	r2, [r3, #452]	; 0x1c4

    /* Sets the pause duration and FIFO threshold for the flow control enabled case. */
    if (macSpecialConfig & kENET_ControlFlowControlEnable)
  1364dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1364e0:	e2033001 	and	r3, r3, #1
  1364e4:	e3530000 	cmp	r3, #0
  1364e8:	0a00000a 	beq	136518 <ENET_SetMacController+0x238>
    {
        uint32_t reemReg;
        base->OPD = config->pauseDuration;
  1364ec:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1364f0:	e1d331ba 	ldrh	r3, [r3, #26]
  1364f4:	e1a02003 	mov	r2, r3
  1364f8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1364fc:	e58320ec 	str	r2, [r3, #236]	; 0xec
        reemReg = ENET_RSEM_RX_SECTION_EMPTY(config->rxFifoEmptyThreshold);
  136500:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136504:	e5d3301c 	ldrb	r3, [r3, #28]
  136508:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
#if defined (FSL_FEATURE_ENET_HAS_RECEIVE_STATUS_THRESHOLD) && FSL_FEATURE_ENET_HAS_RECEIVE_STATUS_THRESHOLD
        reemReg |= ENET_RSEM_STAT_SECTION_EMPTY(config->rxFifoStatEmptyThreshold);
#endif /* FSL_FEATURE_ENET_HAS_RECEIVE_STATUS_THRESHOLD */
        base->RSEM = reemReg;
  13650c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136510:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  136514:	e5832194 	str	r2, [r3, #404]	; 0x194
    }

    /* FIFO threshold setting for store and forward enable/disable case. */
    if (macSpecialConfig & kENET_ControlStoreAndFwdDisable)
  136518:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  13651c:	e2033020 	and	r3, r3, #32
  136520:	e3530000 	cmp	r3, #0
  136524:	0a00000a 	beq	136554 <ENET_SetMacController+0x274>
    {
        /* Transmit fifo watermark settings. */
        base->TFWR = config->txFifoWatermark & ENET_TFWR_TFWR_MASK;
  136528:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  13652c:	e5d3301e 	ldrb	r3, [r3, #30]
  136530:	e203203f 	and	r2, r3, #63	; 0x3f
  136534:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136538:	e5832144 	str	r2, [r3, #324]	; 0x144
        /* Receive fifo full threshold settings. */
        base->RSFL = config->rxFifoFullThreshold & ENET_RSFL_RX_SECTION_FULL_MASK;
  13653c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136540:	e5d3301d 	ldrb	r3, [r3, #29]
  136544:	e1a02003 	mov	r2, r3
  136548:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  13654c:	e5832190 	str	r2, [r3, #400]	; 0x190
  136550:	ea000005 	b	13656c <ENET_SetMacController+0x28c>
    }
    else
    {
        /* Transmit fifo watermark settings. */
        base->TFWR = ENET_TFWR_STRFWD_MASK;
  136554:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136558:	e3a02c01 	mov	r2, #256	; 0x100
  13655c:	e5832144 	str	r2, [r3, #324]	; 0x144
        base->RSFL = 0;
  136560:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136564:	e3a02000 	mov	r2, #0
  136568:	e5832190 	str	r2, [r3, #400]	; 0x190
    }

    /* Enable store and forward when accelerator is enabled */
    if (config->txAccelerConfig & (kENET_TxAccelIpCheckEnabled | kENET_TxAccelProtoCheckEnabled))
  13656c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136570:	e5d33019 	ldrb	r3, [r3, #25]
  136574:	e2033018 	and	r3, r3, #24
  136578:	e3530000 	cmp	r3, #0
  13657c:	0a000002 	beq	13658c <ENET_SetMacController+0x2ac>
    {
        base->TFWR = ENET_TFWR_STRFWD_MASK;
  136580:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136584:	e3a02c01 	mov	r2, #256	; 0x100
  136588:	e5832144 	str	r2, [r3, #324]	; 0x144
    }
    if (config->rxAccelerConfig & (kENET_RxAccelIpCheckEnabled | kENET_RxAccelProtoCheckEnabled))
  13658c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136590:	e5d33018 	ldrb	r3, [r3, #24]
  136594:	e2033006 	and	r3, r3, #6
  136598:	e3530000 	cmp	r3, #0
  13659c:	0a000002 	beq	1365ac <ENET_SetMacController+0x2cc>
    {
        base->RSFL = 0;
  1365a0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1365a4:	e3a02000 	mov	r2, #0
  1365a8:	e5832190 	str	r2, [r3, #400]	; 0x190
    }

    /* Initializes transmit buffer descriptor rings start address, two start address should be aligned. */
    base->TDSR = (uint32_t)bufferConfig->txPhyBdStartAddrAlign;
  1365ac:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1365b0:	e5933020 	ldr	r3, [r3, #32]
  1365b4:	e1a02003 	mov	r2, r3
  1365b8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1365bc:	e5832184 	str	r2, [r3, #388]	; 0x184
    base->RDSR = (uint32_t)bufferConfig->rxPhyBdStartAddrAlign;
  1365c0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1365c4:	e593301c 	ldr	r3, [r3, #28]
  1365c8:	e1a02003 	mov	r2, r3
  1365cc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1365d0:	e5832180 	str	r2, [r3, #384]	; 0x180

    /* Initializes the maximum buffer size, the buffer size should be aligned. */

    base->MRBR = ENET_MRBR_R_BUF_SIZE(bufferConfig->rxBuffSizeAlign);
  1365d4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1365d8:	e5933004 	ldr	r3, [r3, #4]
  1365dc:	e1a02203 	lsl	r2, r3, #4
  1365e0:	e3033ff0 	movw	r3, #16368	; 0x3ff0
  1365e4:	e0033002 	and	r3, r3, r2
  1365e8:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  1365ec:	e5823188 	str	r3, [r2, #392]	; 0x188

    /* Configures the Mac address. */
    ENET_SetMacAddr(base, macAddr);
  1365f0:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  1365f4:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1365f8:	eb00011e 	bl	136a78 <ENET_SetMacAddr>

    /* Initialize the SMI if uninitialized. */
    if (!ENET_GetSMI(base))
  1365fc:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  136600:	ebfffda0 	bl	135c88 <ENET_GetSMI>
  136604:	e1a03000 	mov	r3, r0
  136608:	e2233001 	eor	r3, r3, #1
  13660c:	e6ef3073 	uxtb	r3, r3
  136610:	e3530000 	cmp	r3, #0
  136614:	0a00000a 	beq	136644 <ENET_SetMacController+0x364>
    {
        ENET_SetSMI(base, srcClock_Hz, !!(config->macSpecialConfig & kENET_ControlSMIPreambleDisable));
  136618:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  13661c:	e5933000 	ldr	r3, [r3]
  136620:	e2033040 	and	r3, r3, #64	; 0x40
  136624:	e3530000 	cmp	r3, #0
  136628:	13a03001 	movne	r3, #1
  13662c:	03a03000 	moveq	r3, #0
  136630:	e6ef3073 	uxtb	r3, r3
  136634:	e1a02003 	mov	r2, r3
  136638:	e59b1004 	ldr	r1, [fp, #4]
  13663c:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  136640:	eb000171 	bl	136c0c <ENET_SetSMI>
    }
/* Enables Ethernet interrupt and NVIC. */
#if defined(FSL_FEATURE_ENET_HAS_INTERRUPT_COALESCE) && FSL_FEATURE_ENET_HAS_INTERRUPT_COALESCE
    if (config->intCoalesceCfg)
  136644:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136648:	e5933020 	ldr	r3, [r3, #32]
  13664c:	e3530000 	cmp	r3, #0
  136650:	0a000020 	beq	1366d8 <ENET_SetMacController+0x3f8>
    {
        uint32_t intMask = (ENET_EIMR_TXB_MASK | ENET_EIMR_RXB_MASK);
  136654:	e3a03405 	mov	r3, #83886080	; 0x5000000
  136658:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0

        /* Clear all buffer interrupts. */
        base->EIMR &= ~intMask;
  13665c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136660:	e5932008 	ldr	r2, [r3, #8]
  136664:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  136668:	e1e03003 	mvn	r3, r3
  13666c:	e0022003 	and	r2, r2, r3
  136670:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136674:	e5832008 	str	r2, [r3, #8]
        /* Set the interrupt coalescence. */
        base->TXIC = ENET_TXIC_ICFT(config->intCoalesceCfg->txCoalesceFrameCount[0]) |
  136678:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  13667c:	e5933020 	ldr	r3, [r3, #32]
  136680:	e5d33000 	ldrb	r3, [r3]
  136684:	e1a03a03 	lsl	r3, r3, #20
  136688:	e20336ff 	and	r3, r3, #267386880	; 0xff00000
                     config->intCoalesceCfg->txCoalesceTimeCount[0] | ENET_TXIC_ICCS_MASK | ENET_TXIC_ICEN_MASK;
  13668c:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  136690:	e5922020 	ldr	r2, [r2, #32]
  136694:	e1d220b2 	ldrh	r2, [r2, #2]
        base->TXIC = ENET_TXIC_ICFT(config->intCoalesceCfg->txCoalesceFrameCount[0]) |
  136698:	e1833002 	orr	r3, r3, r2
                     config->intCoalesceCfg->txCoalesceTimeCount[0] | ENET_TXIC_ICCS_MASK | ENET_TXIC_ICEN_MASK;
  13669c:	e3832103 	orr	r2, r3, #-1073741824	; 0xc0000000
        base->TXIC = ENET_TXIC_ICFT(config->intCoalesceCfg->txCoalesceFrameCount[0]) |
  1366a0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1366a4:	e58320f0 	str	r2, [r3, #240]	; 0xf0
        base->RXIC = ENET_RXIC_ICFT(config->intCoalesceCfg->rxCoalesceFrameCount[0]) |
  1366a8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1366ac:	e5933020 	ldr	r3, [r3, #32]
  1366b0:	e5d33004 	ldrb	r3, [r3, #4]
  1366b4:	e1a03a03 	lsl	r3, r3, #20
  1366b8:	e20336ff 	and	r3, r3, #267386880	; 0xff00000
                     config->intCoalesceCfg->rxCoalesceTimeCount[0] | ENET_RXIC_ICCS_MASK | ENET_RXIC_ICEN_MASK;
  1366bc:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  1366c0:	e5922020 	ldr	r2, [r2, #32]
  1366c4:	e1d220b6 	ldrh	r2, [r2, #6]
        base->RXIC = ENET_RXIC_ICFT(config->intCoalesceCfg->rxCoalesceFrameCount[0]) |
  1366c8:	e1833002 	orr	r3, r3, r2
                     config->intCoalesceCfg->rxCoalesceTimeCount[0] | ENET_RXIC_ICCS_MASK | ENET_RXIC_ICEN_MASK;
  1366cc:	e3832103 	orr	r2, r3, #-1073741824	; 0xc0000000
        base->RXIC = ENET_RXIC_ICFT(config->intCoalesceCfg->rxCoalesceFrameCount[0]) |
  1366d0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1366d4:	e5832100 	str	r2, [r3, #256]	; 0x100
    }
#endif /* FSL_FEATURE_ENET_HAS_INTERRUPT_COALESCE */
    ENET_EnableInterrupts(base, config->interrupt);
  1366d8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1366dc:	e5933004 	ldr	r3, [r3, #4]
  1366e0:	e1a01003 	mov	r1, r3
  1366e4:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1366e8:	ebfffd8d 	bl	135d24 <ENET_EnableInterrupts>

    /* ENET control register setting. */
    ecr = base->ECR;
  1366ec:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1366f0:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  1366f4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

    /* Enables Ethernet module after all configuration except the buffer descriptor active. */
    ecr |= ENET_ECR_ETHEREN_MASK | ENET_ECR_DBSWP_MASK;
  1366f8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1366fc:	e3833c01 	orr	r3, r3, #256	; 0x100
  136700:	e3833002 	orr	r3, r3, #2
  136704:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    base->ECR = ecr;
  136708:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  13670c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  136710:	e5832024 	str	r2, [r3, #36]	; 0x24
}
  136714:	e320f000 	nop	{0}
  136718:	e24bd004 	sub	sp, fp, #4
  13671c:	e8bd8800 	pop	{fp, pc}

00136720 <ENET_SetTxBufferDescriptors>:
static void ENET_SetTxBufferDescriptors(volatile enet_tx_bd_struct_t *txBdStartAlign,
                                        uint8_t *txBuffStartAlign,
                                        uint8_t *txBuffStartAlign_vaddr,
                                        uint32_t txBuffSizeAlign,
                                        uint32_t txBdNumber)
{
  136720:	e92d4800 	push	{fp, lr}
  136724:	e28db004 	add	fp, sp, #4
  136728:	e24dd018 	sub	sp, sp, #24
  13672c:	e50b0010 	str	r0, [fp, #-16]
  136730:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  136734:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  136738:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(txBdStartAlign);
  13673c:	e51b3010 	ldr	r3, [fp, #-16]
  136740:	e3530000 	cmp	r3, #0
  136744:	1a000005 	bne	136760 <ENET_SetTxBufferDescriptors+0x40>
  136748:	e30021e2 	movw	r2, #482	; 0x1e2
  13674c:	e30a12a8 	movw	r1, #41640	; 0xa2a8
  136750:	e3401014 	movt	r1, #20
  136754:	e30a0108 	movw	r0, #41224	; 0xa108
  136758:	e3400014 	movt	r0, #20
  13675c:	ebff338d 	bl	103598 <rt_assert_handler>
    RT_ASSERT(txBuffStartAlign);
  136760:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136764:	e3530000 	cmp	r3, #0
  136768:	1a000005 	bne	136784 <ENET_SetTxBufferDescriptors+0x64>
  13676c:	e30021e3 	movw	r2, #483	; 0x1e3
  136770:	e30a12a8 	movw	r1, #41640	; 0xa2a8
  136774:	e3401014 	movt	r1, #20
  136778:	e30a0118 	movw	r0, #41240	; 0xa118
  13677c:	e3400014 	movt	r0, #20
  136780:	ebff3384 	bl	103598 <rt_assert_handler>
    uint32_t count;
    volatile enet_tx_bd_struct_t *curBuffDescrip = txBdStartAlign;
  136784:	e51b3010 	ldr	r3, [fp, #-16]
  136788:	e50b300c 	str	r3, [fp, #-12]
    for (count = 0; count < txBdNumber; count++)
  13678c:	e3a03000 	mov	r3, #0
  136790:	e50b3008 	str	r3, [fp, #-8]
  136794:	ea00002c 	b	13684c <ENET_SetTxBufferDescriptors+0x12c>
        /* Set data buffer address. */
        // curBuffDescrip->buffer = (uint8_t *)((uint32_t)&txBuffStartAlign[(-1) * count * txBuffSizeAlign]);
        // curBuffDescrip->buffer = (uint8_t *)ueth_v2p((void*)&txBuffStartAlign_vaddr[count * txBuffSizeAlign]);
        // curBuffDescrip->buffer_vaddr = (uint8_t *)((uint32_t)&txBuffStartAlign_vaddr[count * txBuffSizeAlign]);
        // buffer_vaddr_tx[count] = (uint8_t *)((void*)&txBuffStartAlign_vaddr[count * txBuffSizeAlign]);
        curBuffDescrip->buffer = (uint8_t *)ueth_v2p((void*)&txBuffStartAlign_vaddr[count * txBuffSizeAlign]);
  136798:	e51b3008 	ldr	r3, [fp, #-8]
  13679c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1367a0:	e0030392 	mul	r3, r2, r3
  1367a4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1367a8:	e0823003 	add	r3, r2, r3
  1367ac:	e1a00003 	mov	r0, r3
  1367b0:	ebff3712 	bl	104400 <ueth_v2p>
  1367b4:	e1a02000 	mov	r2, r0
  1367b8:	e51b300c 	ldr	r3, [fp, #-12]
  1367bc:	e5832004 	str	r2, [r3, #4]
        buffer_vaddr_tx[count] = (uint8_t *)ueth_remap(curBuffDescrip->buffer, UETH_REMAP_NOCACHE, txBuffSizeAlign);
  1367c0:	e51b300c 	ldr	r3, [fp, #-12]
  1367c4:	e5933004 	ldr	r3, [r3, #4]
  1367c8:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1367cc:	e3a01003 	mov	r1, #3
  1367d0:	e1a00003 	mov	r0, r3
  1367d4:	ebff3736 	bl	1044b4 <ueth_remap>
  1367d8:	e1a01000 	mov	r1, r0
  1367dc:	e30c3e70 	movw	r3, #52848	; 0xce70
  1367e0:	e3403015 	movt	r3, #21
  1367e4:	e51b2008 	ldr	r2, [fp, #-8]
  1367e8:	e7831102 	str	r1, [r3, r2, lsl #2]
        /* Initializes data length. */
        curBuffDescrip->length = 0;
  1367ec:	e51b300c 	ldr	r3, [fp, #-12]
  1367f0:	e3a02000 	mov	r2, #0
  1367f4:	e1c320b0 	strh	r2, [r3]
        /* Sets the crc. */
        curBuffDescrip->control = (ENET_BUFFDESCRIPTOR_TX_TRANMITCRC_MASK);
  1367f8:	e51b300c 	ldr	r3, [fp, #-12]
  1367fc:	e3a02b01 	mov	r2, #1024	; 0x400
  136800:	e1c320b2 	strh	r2, [r3, #2]
        /* Sets the last buffer descriptor with the wrap flag. */
        if (count == txBdNumber - 1)
  136804:	e59b3004 	ldr	r3, [fp, #4]
  136808:	e2433001 	sub	r3, r3, #1
  13680c:	e51b2008 	ldr	r2, [fp, #-8]
  136810:	e1520003 	cmp	r2, r3
  136814:	1a000006 	bne	136834 <ENET_SetTxBufferDescriptors+0x114>
        {
            curBuffDescrip->control |= ENET_BUFFDESCRIPTOR_TX_WRAP_MASK;
  136818:	e51b300c 	ldr	r3, [fp, #-12]
  13681c:	e1d330b2 	ldrh	r3, [r3, #2]
  136820:	e6ff3073 	uxth	r3, r3
  136824:	e3833a02 	orr	r3, r3, #8192	; 0x2000
  136828:	e6ff2073 	uxth	r2, r3
  13682c:	e51b300c 	ldr	r3, [fp, #-12]
  136830:	e1c320b2 	strh	r2, [r3, #2]

        /* Add cache clean operation. */
        // rt_hw_cpu_dcache_clean((void *)curBuffDescrip, sizeof(enet_tx_bd_struct_t));
        // ueth_dcache_clean((void *)curBuffDescrip, sizeof(enet_tx_bd_struct_t));
        /* Increase the index. */
        curBuffDescrip++;
  136834:	e51b300c 	ldr	r3, [fp, #-12]
  136838:	e2833008 	add	r3, r3, #8
  13683c:	e50b300c 	str	r3, [fp, #-12]
    for (count = 0; count < txBdNumber; count++)
  136840:	e51b3008 	ldr	r3, [fp, #-8]
  136844:	e2833001 	add	r3, r3, #1
  136848:	e50b3008 	str	r3, [fp, #-8]
  13684c:	e51b2008 	ldr	r2, [fp, #-8]
  136850:	e59b3004 	ldr	r3, [fp, #4]
  136854:	e1520003 	cmp	r2, r3
  136858:	3affffce 	bcc	136798 <ENET_SetTxBufferDescriptors+0x78>
    }
}
  13685c:	e320f000 	nop	{0}
  136860:	e24bd004 	sub	sp, fp, #4
  136864:	e8bd8800 	pop	{fp, pc}

00136868 <ENET_SetRxBufferDescriptors>:
                                        uint8_t *rxBuffStartAlign,
                                        uint8_t *rxBuffStartAlign_vaddr,
                                        uint32_t rxBuffSizeAlign,
                                        uint32_t rxBdNumber,
                                        bool enableInterrupt)
{
  136868:	e92d4800 	push	{fp, lr}
  13686c:	e28db004 	add	fp, sp, #4
  136870:	e24dd018 	sub	sp, sp, #24
  136874:	e50b0010 	str	r0, [fp, #-16]
  136878:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  13687c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  136880:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(rxBdStartAlign);
  136884:	e51b3010 	ldr	r3, [fp, #-16]
  136888:	e3530000 	cmp	r3, #0
  13688c:	1a000005 	bne	1368a8 <ENET_SetRxBufferDescriptors+0x40>
  136890:	e3002209 	movw	r2, #521	; 0x209
  136894:	e30a12c4 	movw	r1, #41668	; 0xa2c4
  136898:	e3401014 	movt	r1, #20
  13689c:	e30a012c 	movw	r0, #41260	; 0xa12c
  1368a0:	e3400014 	movt	r0, #20
  1368a4:	ebff333b 	bl	103598 <rt_assert_handler>
    RT_ASSERT(rxBuffStartAlign);
  1368a8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1368ac:	e3530000 	cmp	r3, #0
  1368b0:	1a000005 	bne	1368cc <ENET_SetRxBufferDescriptors+0x64>
  1368b4:	e300220a 	movw	r2, #522	; 0x20a
  1368b8:	e30a12c4 	movw	r1, #41668	; 0xa2c4
  1368bc:	e3401014 	movt	r1, #20
  1368c0:	e30a013c 	movw	r0, #41276	; 0xa13c
  1368c4:	e3400014 	movt	r0, #20
  1368c8:	ebff3332 	bl	103598 <rt_assert_handler>

    volatile enet_rx_bd_struct_t *curBuffDescrip = rxBdStartAlign;
  1368cc:	e51b3010 	ldr	r3, [fp, #-16]
  1368d0:	e50b3008 	str	r3, [fp, #-8]
    uint32_t count = 0;
  1368d4:	e3a03000 	mov	r3, #0
  1368d8:	e50b300c 	str	r3, [fp, #-12]

    /* Initializes receive buffer descriptors. */
    for (count = 0; count < rxBdNumber; count++)
  1368dc:	e3a03000 	mov	r3, #0
  1368e0:	e50b300c 	str	r3, [fp, #-12]
  1368e4:	ea00002c 	b	13699c <ENET_SetRxBufferDescriptors+0x134>
    {
        /* Set data buffer and the length. */
        // curBuffDescrip->buffer = (uint8_t *)((void *)&rxBuffStartAlign[(-1) * count * rxBuffSizeAlign]);
        curBuffDescrip->buffer = (uint8_t *)ueth_v2p((void*)&rxBuffStartAlign_vaddr[count * rxBuffSizeAlign]);
  1368e8:	e51b300c 	ldr	r3, [fp, #-12]
  1368ec:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1368f0:	e0030392 	mul	r3, r2, r3
  1368f4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1368f8:	e0823003 	add	r3, r2, r3
  1368fc:	e1a00003 	mov	r0, r3
  136900:	ebff36be 	bl	104400 <ueth_v2p>
  136904:	e1a02000 	mov	r2, r0
  136908:	e51b3008 	ldr	r3, [fp, #-8]
  13690c:	e5832004 	str	r2, [r3, #4]
        // curBuffDescrip->buffer_vaddr = (uint8_t *)((void *)&rxBuffStartAlign_vaddr[count * rxBuffSizeAlign]);
        buffer_vaddr_rx[count] = (uint8_t *)ueth_remap(curBuffDescrip->buffer, UETH_REMAP_NOCACHE, rxBuffSizeAlign);
  136910:	e51b3008 	ldr	r3, [fp, #-8]
  136914:	e5933004 	ldr	r3, [r3, #4]
  136918:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  13691c:	e3a01003 	mov	r1, #3
  136920:	e1a00003 	mov	r0, r3
  136924:	ebff36e2 	bl	1044b4 <ueth_remap>
  136928:	e1a01000 	mov	r1, r0
  13692c:	e30c3c70 	movw	r3, #52336	; 0xcc70
  136930:	e3403015 	movt	r3, #21
  136934:	e51b200c 	ldr	r2, [fp, #-12]
  136938:	e7831102 	str	r1, [r3, r2, lsl #2]
        curBuffDescrip->length = 0;
  13693c:	e51b3008 	ldr	r3, [fp, #-8]
  136940:	e3a02000 	mov	r2, #0
  136944:	e1c320b0 	strh	r2, [r3]
        /* Initializes the buffer descriptors with empty bit. */
        curBuffDescrip->control = ENET_BUFFDESCRIPTOR_RX_EMPTY_MASK;
  136948:	e51b3008 	ldr	r3, [fp, #-8]
  13694c:	e3a02902 	mov	r2, #32768	; 0x8000
  136950:	e1c320b2 	strh	r2, [r3, #2]
        /* Sets the last buffer descriptor with the wrap flag. */
        if (count == rxBdNumber - 1)
  136954:	e59b3004 	ldr	r3, [fp, #4]
  136958:	e2433001 	sub	r3, r3, #1
  13695c:	e51b200c 	ldr	r2, [fp, #-12]
  136960:	e1520003 	cmp	r2, r3
  136964:	1a000006 	bne	136984 <ENET_SetRxBufferDescriptors+0x11c>
        {
            curBuffDescrip->control |= ENET_BUFFDESCRIPTOR_RX_WRAP_MASK;
  136968:	e51b3008 	ldr	r3, [fp, #-8]
  13696c:	e1d330b2 	ldrh	r3, [r3, #2]
  136970:	e6ff3073 	uxth	r3, r3
  136974:	e3833a02 	orr	r3, r3, #8192	; 0x2000
  136978:	e6ff2073 	uxth	r2, r3
  13697c:	e51b3008 	ldr	r3, [fp, #-8]
  136980:	e1c320b2 	strh	r2, [r3, #2]
        
#ifdef ENET_ENHANCEDBUFFERDESCRIPTOR_MODE
        curBuffDescrip->controlExtend1 |= ENET_BUFFDESCRIPTOR_RX_INTERRUPT_MASK;
#endif

        curBuffDescrip++;
  136984:	e51b3008 	ldr	r3, [fp, #-8]
  136988:	e2833008 	add	r3, r3, #8
  13698c:	e50b3008 	str	r3, [fp, #-8]
    for (count = 0; count < rxBdNumber; count++)
  136990:	e51b300c 	ldr	r3, [fp, #-12]
  136994:	e2833001 	add	r3, r3, #1
  136998:	e50b300c 	str	r3, [fp, #-12]
  13699c:	e51b200c 	ldr	r2, [fp, #-12]
  1369a0:	e59b3004 	ldr	r3, [fp, #4]
  1369a4:	e1520003 	cmp	r2, r3
  1369a8:	3affffce 	bcc	1368e8 <ENET_SetRxBufferDescriptors+0x80>

    }
}
  1369ac:	e320f000 	nop	{0}
  1369b0:	e24bd004 	sub	sp, fp, #4
  1369b4:	e8bd8800 	pop	{fp, pc}

001369b8 <ENET_SetMII>:

void ENET_SetMII(ENET_Type *base, enet_mii_speed_t speed, enet_mii_duplex_t duplex)
{
  1369b8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1369bc:	e28db000 	add	fp, sp, #0
  1369c0:	e24dd01c 	sub	sp, sp, #28
  1369c4:	e50b0010 	str	r0, [fp, #-16]
  1369c8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1369cc:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    uint32_t rcr = base->RCR;
  1369d0:	e51b3010 	ldr	r3, [fp, #-16]
  1369d4:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  1369d8:	e50b3008 	str	r3, [fp, #-8]
    uint32_t tcr = base->TCR;
  1369dc:	e51b3010 	ldr	r3, [fp, #-16]
  1369e0:	e59330c4 	ldr	r3, [r3, #196]	; 0xc4
  1369e4:	e50b300c 	str	r3, [fp, #-12]
    /* Sets speed mode. */
    if (kENET_MiiSpeed10M == speed)
  1369e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1369ec:	e3530000 	cmp	r3, #0
  1369f0:	1a000003 	bne	136a04 <ENET_SetMII+0x4c>
    {
        rcr |= ENET_RCR_RMII_10T_MASK;
  1369f4:	e51b3008 	ldr	r3, [fp, #-8]
  1369f8:	e3833c02 	orr	r3, r3, #512	; 0x200
  1369fc:	e50b3008 	str	r3, [fp, #-8]
  136a00:	ea000002 	b	136a10 <ENET_SetMII+0x58>
    }
    else
    {
        rcr &= ~ENET_RCR_RMII_10T_MASK;
  136a04:	e51b3008 	ldr	r3, [fp, #-8]
  136a08:	e3c33c02 	bic	r3, r3, #512	; 0x200
  136a0c:	e50b3008 	str	r3, [fp, #-8]
    }
    /* Set duplex mode. */
    if (duplex == kENET_MiiHalfDuplex)
  136a10:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136a14:	e3530000 	cmp	r3, #0
  136a18:	1a000006 	bne	136a38 <ENET_SetMII+0x80>
    {
        rcr |= ENET_RCR_DRT_MASK;
  136a1c:	e51b3008 	ldr	r3, [fp, #-8]
  136a20:	e3833002 	orr	r3, r3, #2
  136a24:	e50b3008 	str	r3, [fp, #-8]
        tcr &= ~ENET_TCR_FDEN_MASK;
  136a28:	e51b300c 	ldr	r3, [fp, #-12]
  136a2c:	e3c33004 	bic	r3, r3, #4
  136a30:	e50b300c 	str	r3, [fp, #-12]
  136a34:	ea000005 	b	136a50 <ENET_SetMII+0x98>
    }
    else
    {
        rcr &= ~ENET_RCR_DRT_MASK;
  136a38:	e51b3008 	ldr	r3, [fp, #-8]
  136a3c:	e3c33002 	bic	r3, r3, #2
  136a40:	e50b3008 	str	r3, [fp, #-8]
        tcr |= ENET_TCR_FDEN_MASK;
  136a44:	e51b300c 	ldr	r3, [fp, #-12]
  136a48:	e3833004 	orr	r3, r3, #4
  136a4c:	e50b300c 	str	r3, [fp, #-12]
    }

    base->RCR = rcr;
  136a50:	e51b3010 	ldr	r3, [fp, #-16]
  136a54:	e51b2008 	ldr	r2, [fp, #-8]
  136a58:	e5832084 	str	r2, [r3, #132]	; 0x84
    base->TCR = tcr;
  136a5c:	e51b3010 	ldr	r3, [fp, #-16]
  136a60:	e51b200c 	ldr	r2, [fp, #-12]
  136a64:	e58320c4 	str	r2, [r3, #196]	; 0xc4
}
  136a68:	e320f000 	nop	{0}
  136a6c:	e28bd000 	add	sp, fp, #0
  136a70:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  136a74:	e12fff1e 	bx	lr

00136a78 <ENET_SetMacAddr>:

void ENET_SetMacAddr(ENET_Type *base, uint8_t *macAddr)
{
  136a78:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  136a7c:	e28db000 	add	fp, sp, #0
  136a80:	e24dd014 	sub	sp, sp, #20
  136a84:	e50b0010 	str	r0, [fp, #-16]
  136a88:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    uint32_t address;

    /* Set physical address lower register. */
    address = (uint32_t)(((uint32_t)macAddr[0] << 24U) | ((uint32_t)macAddr[1] << 16U) | ((uint32_t)macAddr[2] << 8U) |
  136a8c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136a90:	e5d33000 	ldrb	r3, [r3]
  136a94:	e1a02c03 	lsl	r2, r3, #24
  136a98:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136a9c:	e2833001 	add	r3, r3, #1
  136aa0:	e5d33000 	ldrb	r3, [r3]
  136aa4:	e1a03803 	lsl	r3, r3, #16
  136aa8:	e1822003 	orr	r2, r2, r3
  136aac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136ab0:	e2833002 	add	r3, r3, #2
  136ab4:	e5d33000 	ldrb	r3, [r3]
  136ab8:	e1a03403 	lsl	r3, r3, #8
  136abc:	e1823003 	orr	r3, r2, r3
                         (uint32_t)macAddr[3]);
  136ac0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  136ac4:	e2822003 	add	r2, r2, #3
  136ac8:	e5d22000 	ldrb	r2, [r2]
    address = (uint32_t)(((uint32_t)macAddr[0] << 24U) | ((uint32_t)macAddr[1] << 16U) | ((uint32_t)macAddr[2] << 8U) |
  136acc:	e1833002 	orr	r3, r3, r2
  136ad0:	e50b3008 	str	r3, [fp, #-8]
    base->PALR = address;
  136ad4:	e51b3010 	ldr	r3, [fp, #-16]
  136ad8:	e51b2008 	ldr	r2, [fp, #-8]
  136adc:	e58320e4 	str	r2, [r3, #228]	; 0xe4
    /* Set physical address high register. */
    address = (uint32_t)(((uint32_t)macAddr[4] << 8U) | ((uint32_t)macAddr[5]));
  136ae0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136ae4:	e2833004 	add	r3, r3, #4
  136ae8:	e5d33000 	ldrb	r3, [r3]
  136aec:	e1a03403 	lsl	r3, r3, #8
  136af0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  136af4:	e2822005 	add	r2, r2, #5
  136af8:	e5d22000 	ldrb	r2, [r2]
  136afc:	e1833002 	orr	r3, r3, r2
  136b00:	e50b3008 	str	r3, [fp, #-8]
    base->PAUR = address << ENET_PAUR_PADDR2_SHIFT;
  136b04:	e51b3008 	ldr	r3, [fp, #-8]
  136b08:	e1a02803 	lsl	r2, r3, #16
  136b0c:	e51b3010 	ldr	r3, [fp, #-16]
  136b10:	e58320e8 	str	r2, [r3, #232]	; 0xe8
}
  136b14:	e320f000 	nop	{0}
  136b18:	e28bd000 	add	sp, fp, #0
  136b1c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  136b20:	e12fff1e 	bx	lr

00136b24 <ENET_GetMacAddr>:

void ENET_GetMacAddr(ENET_Type *base, uint8_t *macAddr)
{
  136b24:	e92d4800 	push	{fp, lr}
  136b28:	e28db004 	add	fp, sp, #4
  136b2c:	e24dd010 	sub	sp, sp, #16
  136b30:	e50b0010 	str	r0, [fp, #-16]
  136b34:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    RT_ASSERT(macAddr);
  136b38:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136b3c:	e3530000 	cmp	r3, #0
  136b40:	1a000005 	bne	136b5c <ENET_GetMacAddr+0x38>
  136b44:	e3002259 	movw	r2, #601	; 0x259
  136b48:	e30a12e0 	movw	r1, #41696	; 0xa2e0
  136b4c:	e3401014 	movt	r1, #20
  136b50:	e3090fb0 	movw	r0, #40880	; 0x9fb0
  136b54:	e3400014 	movt	r0, #20
  136b58:	ebff328e 	bl	103598 <rt_assert_handler>

    uint32_t address;

    /* Get from physical address lower register. */
    address = base->PALR;
  136b5c:	e51b3010 	ldr	r3, [fp, #-16]
  136b60:	e59330e4 	ldr	r3, [r3, #228]	; 0xe4
  136b64:	e50b3008 	str	r3, [fp, #-8]
    macAddr[0] = 0xFFU & (address >> 24U);
  136b68:	e51b3008 	ldr	r3, [fp, #-8]
  136b6c:	e1a03c23 	lsr	r3, r3, #24
  136b70:	e6ef2073 	uxtb	r2, r3
  136b74:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136b78:	e5c32000 	strb	r2, [r3]
    macAddr[1] = 0xFFU & (address >> 16U);
  136b7c:	e51b3008 	ldr	r3, [fp, #-8]
  136b80:	e1a02823 	lsr	r2, r3, #16
  136b84:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136b88:	e2833001 	add	r3, r3, #1
  136b8c:	e6ef2072 	uxtb	r2, r2
  136b90:	e5c32000 	strb	r2, [r3]
    macAddr[2] = 0xFFU & (address >> 8U);
  136b94:	e51b3008 	ldr	r3, [fp, #-8]
  136b98:	e1a02423 	lsr	r2, r3, #8
  136b9c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136ba0:	e2833002 	add	r3, r3, #2
  136ba4:	e6ef2072 	uxtb	r2, r2
  136ba8:	e5c32000 	strb	r2, [r3]
    macAddr[3] = 0xFFU & address;
  136bac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136bb0:	e2833003 	add	r3, r3, #3
  136bb4:	e51b2008 	ldr	r2, [fp, #-8]
  136bb8:	e6ef2072 	uxtb	r2, r2
  136bbc:	e5c32000 	strb	r2, [r3]

    /* Get from physical address high register. */
    address = (base->PAUR & ENET_PAUR_PADDR2_MASK) >> ENET_PAUR_PADDR2_SHIFT;
  136bc0:	e51b3010 	ldr	r3, [fp, #-16]
  136bc4:	e59330e8 	ldr	r3, [r3, #232]	; 0xe8
  136bc8:	e1a03823 	lsr	r3, r3, #16
  136bcc:	e6ff3073 	uxth	r3, r3
  136bd0:	e50b3008 	str	r3, [fp, #-8]
    macAddr[4] = 0xFFU & (address >> 8U);
  136bd4:	e51b3008 	ldr	r3, [fp, #-8]
  136bd8:	e1a02423 	lsr	r2, r3, #8
  136bdc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136be0:	e2833004 	add	r3, r3, #4
  136be4:	e6ef2072 	uxtb	r2, r2
  136be8:	e5c32000 	strb	r2, [r3]
    macAddr[5] = 0xFFU & address;
  136bec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136bf0:	e2833005 	add	r3, r3, #5
  136bf4:	e51b2008 	ldr	r2, [fp, #-8]
  136bf8:	e6ef2072 	uxtb	r2, r2
  136bfc:	e5c32000 	strb	r2, [r3]
}
  136c00:	e320f000 	nop	{0}
  136c04:	e24bd004 	sub	sp, fp, #4
  136c08:	e8bd8800 	pop	{fp, pc}

00136c0c <ENET_SetSMI>:

void ENET_SetSMI(ENET_Type *base, uint32_t srcClock_Hz, bool isPreambleDisabled)
{
  136c0c:	e92d4810 	push	{r4, fp, lr}
  136c10:	e28db008 	add	fp, sp, #8
  136c14:	e24dd024 	sub	sp, sp, #36	; 0x24
  136c18:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  136c1c:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  136c20:	e1a03002 	mov	r3, r2
  136c24:	e54b3025 	strb	r3, [fp, #-37]	; 0xffffffdb
    RT_ASSERT(srcClock_Hz);
  136c28:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  136c2c:	e3530000 	cmp	r3, #0
  136c30:	1a000005 	bne	136c4c <ENET_SetSMI+0x40>
  136c34:	e3a02f9b 	mov	r2, #620	; 0x26c
  136c38:	e30a12f0 	movw	r1, #41712	; 0xa2f0
  136c3c:	e3401014 	movt	r1, #20
  136c40:	e30a0150 	movw	r0, #41296	; 0xa150
  136c44:	e3400014 	movt	r0, #20
  136c48:	ebff3252 	bl	103598 <rt_assert_handler>

    uint32_t clkCycle = 0;
  136c4c:	e3a03000 	mov	r3, #0
  136c50:	e50b3010 	str	r3, [fp, #-16]
    uint32_t speed = 0;
  136c54:	e3a03000 	mov	r3, #0
  136c58:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    uint32_t mscr = 0;
  136c5c:	e3a03000 	mov	r3, #0
  136c60:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

    /* Calculate the MII speed which controls the frequency of the MDC. */
    speed = srcClock_Hz / (2 * ENET_MDC_FREQUENCY);
  136c64:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  136c68:	e30c3a6b 	movw	r3, #51819	; 0xca6b
  136c6c:	e3463b5f 	movt	r3, #27487	; 0x6b5f
  136c70:	e0832392 	umull	r2, r3, r2, r3
  136c74:	e1a03aa3 	lsr	r3, r3, #21
  136c78:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    /* Calculate the hold time on the MDIO output. */
    clkCycle = (10 + ENET_NANOSECOND_ONE_SECOND / srcClock_Hz - 1) / (ENET_NANOSECOND_ONE_SECOND / srcClock_Hz) - 1;
  136c7c:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  136c80:	e3a00cca 	mov	r0, #51712	; 0xca00
  136c84:	e3430b9a 	movt	r0, #15258	; 0x3b9a
  136c88:	eb0006fa 	bl	138878 <__udivsi3>
  136c8c:	e1a03000 	mov	r3, r0
  136c90:	e2834009 	add	r4, r3, #9
  136c94:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  136c98:	e3a00cca 	mov	r0, #51712	; 0xca00
  136c9c:	e3430b9a 	movt	r0, #15258	; 0x3b9a
  136ca0:	eb0006f4 	bl	138878 <__udivsi3>
  136ca4:	e1a03000 	mov	r3, r0
  136ca8:	e1a01003 	mov	r1, r3
  136cac:	e1a00004 	mov	r0, r4
  136cb0:	eb0006f0 	bl	138878 <__udivsi3>
  136cb4:	e1a03000 	mov	r3, r0
  136cb8:	e2433001 	sub	r3, r3, #1
  136cbc:	e50b3010 	str	r3, [fp, #-16]
    /* Build the configuration for MDC/MDIO control. */
    mscr = ENET_MSCR_MII_SPEED(speed) | ENET_MSCR_DIS_PRE(isPreambleDisabled) | ENET_MSCR_HOLDTIME(clkCycle);
  136cc0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136cc4:	e1a03083 	lsl	r3, r3, #1
  136cc8:	e203207e 	and	r2, r3, #126	; 0x7e
  136ccc:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  136cd0:	e1a03383 	lsl	r3, r3, #7
  136cd4:	e6ef3073 	uxtb	r3, r3
  136cd8:	e1822003 	orr	r2, r2, r3
  136cdc:	e51b3010 	ldr	r3, [fp, #-16]
  136ce0:	e1a03403 	lsl	r3, r3, #8
  136ce4:	e2033c07 	and	r3, r3, #1792	; 0x700
  136ce8:	e1823003 	orr	r3, r2, r3
  136cec:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    base->MSCR = mscr;
  136cf0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  136cf4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  136cf8:	e5832044 	str	r2, [r3, #68]	; 0x44
}
  136cfc:	e320f000 	nop	{0}
  136d00:	e24bd008 	sub	sp, fp, #8
  136d04:	e8bd8810 	pop	{r4, fp, pc}

00136d08 <ENET_StartSMIWrite>:

void ENET_StartSMIWrite(ENET_Type *base, uint32_t phyAddr, uint32_t phyReg, enet_mii_write_t operation, uint32_t data)
{
  136d08:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  136d0c:	e28db000 	add	fp, sp, #0
  136d10:	e24dd01c 	sub	sp, sp, #28
  136d14:	e50b0010 	str	r0, [fp, #-16]
  136d18:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  136d1c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  136d20:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    uint32_t mmfr = 0;
  136d24:	e3a03000 	mov	r3, #0
  136d28:	e50b3008 	str	r3, [fp, #-8]

    /* Build MII write command. */
    mmfr = ENET_MMFR_ST(1) | ENET_MMFR_OP(operation) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(phyReg) | ENET_MMFR_TA(2) |
  136d2c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  136d30:	e1a03e03 	lsl	r3, r3, #28
  136d34:	e2032203 	and	r2, r3, #805306368	; 0x30000000
  136d38:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136d3c:	e1a03b83 	lsl	r3, r3, #23
  136d40:	e203353e 	and	r3, r3, #260046848	; 0xf800000
  136d44:	e1822003 	orr	r2, r2, r3
  136d48:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136d4c:	e1a03903 	lsl	r3, r3, #18
  136d50:	e203371f 	and	r3, r3, #8126464	; 0x7c0000
  136d54:	e1822003 	orr	r2, r2, r3
           (data & 0xFFFF);
  136d58:	e59b3004 	ldr	r3, [fp, #4]
  136d5c:	e6ff3073 	uxth	r3, r3
    mmfr = ENET_MMFR_ST(1) | ENET_MMFR_OP(operation) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(phyReg) | ENET_MMFR_TA(2) |
  136d60:	e1823003 	orr	r3, r2, r3
  136d64:	e3833101 	orr	r3, r3, #1073741824	; 0x40000000
  136d68:	e3833802 	orr	r3, r3, #131072	; 0x20000
  136d6c:	e50b3008 	str	r3, [fp, #-8]
    base->MMFR = mmfr;
  136d70:	e51b3010 	ldr	r3, [fp, #-16]
  136d74:	e51b2008 	ldr	r2, [fp, #-8]
  136d78:	e5832040 	str	r2, [r3, #64]	; 0x40
}
  136d7c:	e320f000 	nop	{0}
  136d80:	e28bd000 	add	sp, fp, #0
  136d84:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  136d88:	e12fff1e 	bx	lr

00136d8c <ENET_StartSMIRead>:

void ENET_StartSMIRead(ENET_Type *base, uint32_t phyAddr, uint32_t phyReg, enet_mii_read_t operation)
{
  136d8c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  136d90:	e28db000 	add	fp, sp, #0
  136d94:	e24dd01c 	sub	sp, sp, #28
  136d98:	e50b0010 	str	r0, [fp, #-16]
  136d9c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  136da0:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  136da4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    uint32_t mmfr = 0;
  136da8:	e3a03000 	mov	r3, #0
  136dac:	e50b3008 	str	r3, [fp, #-8]

    /* Build MII read command. */
    mmfr = ENET_MMFR_ST(1) | ENET_MMFR_OP(operation) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(phyReg) | ENET_MMFR_TA(2);
  136db0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  136db4:	e1a03e03 	lsl	r3, r3, #28
  136db8:	e2032203 	and	r2, r3, #805306368	; 0x30000000
  136dbc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136dc0:	e1a03b83 	lsl	r3, r3, #23
  136dc4:	e203353e 	and	r3, r3, #260046848	; 0xf800000
  136dc8:	e1822003 	orr	r2, r2, r3
  136dcc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136dd0:	e1a03903 	lsl	r3, r3, #18
  136dd4:	e203371f 	and	r3, r3, #8126464	; 0x7c0000
  136dd8:	e1823003 	orr	r3, r2, r3
  136ddc:	e3833101 	orr	r3, r3, #1073741824	; 0x40000000
  136de0:	e3833802 	orr	r3, r3, #131072	; 0x20000
  136de4:	e50b3008 	str	r3, [fp, #-8]
    base->MMFR = mmfr;
  136de8:	e51b3010 	ldr	r3, [fp, #-16]
  136dec:	e51b2008 	ldr	r2, [fp, #-8]
  136df0:	e5832040 	str	r2, [r3, #64]	; 0x40
}
  136df4:	e320f000 	nop	{0}
  136df8:	e28bd000 	add	sp, fp, #0
  136dfc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  136e00:	e12fff1e 	bx	lr

00136e04 <ENET_StartExtC45SMIWrite>:

#if defined(FSL_FEATURE_ENET_HAS_EXTEND_MDIO) && FSL_FEATURE_ENET_HAS_EXTEND_MDIO
void ENET_StartExtC45SMIWrite(ENET_Type *base, uint32_t phyAddr, uint32_t phyReg, uint32_t data)
{
  136e04:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  136e08:	e28db000 	add	fp, sp, #0
  136e0c:	e24dd01c 	sub	sp, sp, #28
  136e10:	e50b0010 	str	r0, [fp, #-16]
  136e14:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  136e18:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  136e1c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    uint32_t mmfr = 0;
  136e20:	e3a03000 	mov	r3, #0
  136e24:	e50b3008 	str	r3, [fp, #-8]

    /* Parse the address from the input register. */
    uint16_t devAddr = (phyReg >> ENET_MMFR_TA_SHIFT) & 0x1FU;
  136e28:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136e2c:	e1a03823 	lsr	r3, r3, #16
  136e30:	e6ff3073 	uxth	r3, r3
  136e34:	e203301f 	and	r3, r3, #31
  136e38:	e14b30ba 	strh	r3, [fp, #-10]
    uint16_t regAddr = (uint16_t)(phyReg & 0xFFFFU);
  136e3c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136e40:	e14b30bc 	strh	r3, [fp, #-12]

    /* Address write firstly. */
    mmfr = ENET_MMFR_ST(0) | ENET_MMFR_OP(kENET_MiiAddrWrite_C45) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(devAddr) |
  136e44:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136e48:	e1a03b83 	lsl	r3, r3, #23
  136e4c:	e203253e 	and	r2, r3, #260046848	; 0xf800000
  136e50:	e15b30ba 	ldrh	r3, [fp, #-10]
  136e54:	e1a03903 	lsl	r3, r3, #18
  136e58:	e203371f 	and	r3, r3, #8126464	; 0x7c0000
  136e5c:	e1822003 	orr	r2, r2, r3
           ENET_MMFR_TA(2) | ENET_MMFR_DATA(regAddr);
  136e60:	e15b30bc 	ldrh	r3, [fp, #-12]
  136e64:	e1823003 	orr	r3, r2, r3
    mmfr = ENET_MMFR_ST(0) | ENET_MMFR_OP(kENET_MiiAddrWrite_C45) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(devAddr) |
  136e68:	e3833802 	orr	r3, r3, #131072	; 0x20000
  136e6c:	e50b3008 	str	r3, [fp, #-8]
    base->MMFR = mmfr;
  136e70:	e51b3010 	ldr	r3, [fp, #-16]
  136e74:	e51b2008 	ldr	r2, [fp, #-8]
  136e78:	e5832040 	str	r2, [r3, #64]	; 0x40

    /* Build MII write command. */
    mmfr = ENET_MMFR_ST(0) | ENET_MMFR_OP(kENET_MiiWriteFrame_C45) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(devAddr) |
  136e7c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136e80:	e1a03b83 	lsl	r3, r3, #23
  136e84:	e203253e 	and	r2, r3, #260046848	; 0xf800000
  136e88:	e15b30ba 	ldrh	r3, [fp, #-10]
  136e8c:	e1a03903 	lsl	r3, r3, #18
  136e90:	e203371f 	and	r3, r3, #8126464	; 0x7c0000
  136e94:	e1822003 	orr	r2, r2, r3
           ENET_MMFR_TA(2) | ENET_MMFR_DATA(data);
  136e98:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  136e9c:	e6ff3073 	uxth	r3, r3
  136ea0:	e1823003 	orr	r3, r2, r3
    mmfr = ENET_MMFR_ST(0) | ENET_MMFR_OP(kENET_MiiWriteFrame_C45) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(devAddr) |
  136ea4:	e3833201 	orr	r3, r3, #268435456	; 0x10000000
  136ea8:	e3833802 	orr	r3, r3, #131072	; 0x20000
  136eac:	e50b3008 	str	r3, [fp, #-8]
    base->MMFR = mmfr;
  136eb0:	e51b3010 	ldr	r3, [fp, #-16]
  136eb4:	e51b2008 	ldr	r2, [fp, #-8]
  136eb8:	e5832040 	str	r2, [r3, #64]	; 0x40
}
  136ebc:	e320f000 	nop	{0}
  136ec0:	e28bd000 	add	sp, fp, #0
  136ec4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  136ec8:	e12fff1e 	bx	lr

00136ecc <ENET_StartExtC45SMIRead>:

void ENET_StartExtC45SMIRead(ENET_Type *base, uint32_t phyAddr, uint32_t phyReg)
{
  136ecc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  136ed0:	e28db000 	add	fp, sp, #0
  136ed4:	e24dd01c 	sub	sp, sp, #28
  136ed8:	e50b0010 	str	r0, [fp, #-16]
  136edc:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  136ee0:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    uint32_t mmfr = 0;
  136ee4:	e3a03000 	mov	r3, #0
  136ee8:	e50b3008 	str	r3, [fp, #-8]

    /* Parse the address from the input register. */
    uint16_t devAddr = (phyReg >> ENET_MMFR_TA_SHIFT) & 0x1FU;
  136eec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136ef0:	e1a03823 	lsr	r3, r3, #16
  136ef4:	e6ff3073 	uxth	r3, r3
  136ef8:	e203301f 	and	r3, r3, #31
  136efc:	e14b30ba 	strh	r3, [fp, #-10]
    uint16_t regAddr = (uint16_t)(phyReg & 0xFFFFU);
  136f00:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136f04:	e14b30bc 	strh	r3, [fp, #-12]

    /* Address write firstly. */
    mmfr = ENET_MMFR_ST(0) | ENET_MMFR_OP(kENET_MiiAddrWrite_C45) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(devAddr) |
  136f08:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136f0c:	e1a03b83 	lsl	r3, r3, #23
  136f10:	e203253e 	and	r2, r3, #260046848	; 0xf800000
  136f14:	e15b30ba 	ldrh	r3, [fp, #-10]
  136f18:	e1a03903 	lsl	r3, r3, #18
  136f1c:	e203371f 	and	r3, r3, #8126464	; 0x7c0000
  136f20:	e1822003 	orr	r2, r2, r3
           ENET_MMFR_TA(2) | ENET_MMFR_DATA(regAddr);
  136f24:	e15b30bc 	ldrh	r3, [fp, #-12]
  136f28:	e1823003 	orr	r3, r2, r3
    mmfr = ENET_MMFR_ST(0) | ENET_MMFR_OP(kENET_MiiAddrWrite_C45) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(devAddr) |
  136f2c:	e3833802 	orr	r3, r3, #131072	; 0x20000
  136f30:	e50b3008 	str	r3, [fp, #-8]
    base->MMFR = mmfr;
  136f34:	e51b3010 	ldr	r3, [fp, #-16]
  136f38:	e51b2008 	ldr	r2, [fp, #-8]
  136f3c:	e5832040 	str	r2, [r3, #64]	; 0x40

    /* Build MII read command. */
    mmfr = ENET_MMFR_ST(0) | ENET_MMFR_OP(kENET_MiiReadFrame_C45) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(devAddr) |
  136f40:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136f44:	e1a03b83 	lsl	r3, r3, #23
  136f48:	e203253e 	and	r2, r3, #260046848	; 0xf800000
  136f4c:	e15b30ba 	ldrh	r3, [fp, #-10]
  136f50:	e1a03903 	lsl	r3, r3, #18
  136f54:	e203371f 	and	r3, r3, #8126464	; 0x7c0000
  136f58:	e1823003 	orr	r3, r2, r3
  136f5c:	e3833203 	orr	r3, r3, #805306368	; 0x30000000
  136f60:	e3833802 	orr	r3, r3, #131072	; 0x20000
  136f64:	e50b3008 	str	r3, [fp, #-8]
           ENET_MMFR_TA(2);
    base->MMFR = mmfr;
  136f68:	e51b3010 	ldr	r3, [fp, #-16]
  136f6c:	e51b2008 	ldr	r2, [fp, #-8]
  136f70:	e5832040 	str	r2, [r3, #64]	; 0x40
}
  136f74:	e320f000 	nop	{0}
  136f78:	e28bd000 	add	sp, fp, #0
  136f7c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  136f80:	e12fff1e 	bx	lr

00136f84 <ENET_GetRxErrBeforeReadFrame>:
#endif /* FSL_FEATURE_ENET_HAS_EXTEND_MDIO */

void ENET_GetRxErrBeforeReadFrame(enet_handle_t *handle, enet_data_error_stats_t *eErrorStatic)
{
  136f84:	e92d4800 	push	{fp, lr}
  136f88:	e28db004 	add	fp, sp, #4
  136f8c:	e24dd010 	sub	sp, sp, #16
  136f90:	e50b0010 	str	r0, [fp, #-16]
  136f94:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    RT_ASSERT(handle);
  136f98:	e51b3010 	ldr	r3, [fp, #-16]
  136f9c:	e3530000 	cmp	r3, #0
  136fa0:	1a000005 	bne	136fbc <ENET_GetRxErrBeforeReadFrame+0x38>
  136fa4:	e3a02fae 	mov	r2, #696	; 0x2b8
  136fa8:	e30a12fc 	movw	r1, #41724	; 0xa2fc
  136fac:	e3401014 	movt	r1, #20
  136fb0:	e3090f18 	movw	r0, #40728	; 0x9f18
  136fb4:	e3400014 	movt	r0, #20
  136fb8:	ebff3176 	bl	103598 <rt_assert_handler>
    RT_ASSERT(handle->rxBdCurrent);
  136fbc:	e51b3010 	ldr	r3, [fp, #-16]
  136fc0:	e5933004 	ldr	r3, [r3, #4]
  136fc4:	e3530000 	cmp	r3, #0
  136fc8:	1a000005 	bne	136fe4 <ENET_GetRxErrBeforeReadFrame+0x60>
  136fcc:	e30022b9 	movw	r2, #697	; 0x2b9
  136fd0:	e30a12fc 	movw	r1, #41724	; 0xa2fc
  136fd4:	e3401014 	movt	r1, #20
  136fd8:	e30a015c 	movw	r0, #41308	; 0xa15c
  136fdc:	e3400014 	movt	r0, #20
  136fe0:	ebff316c 	bl	103598 <rt_assert_handler>
    RT_ASSERT(eErrorStatic);
  136fe4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136fe8:	e3530000 	cmp	r3, #0
  136fec:	1a000005 	bne	137008 <ENET_GetRxErrBeforeReadFrame+0x84>
  136ff0:	e30022ba 	movw	r2, #698	; 0x2ba
  136ff4:	e30a12fc 	movw	r1, #41724	; 0xa2fc
  136ff8:	e3401014 	movt	r1, #20
  136ffc:	e30a0170 	movw	r0, #41328	; 0xa170
  137000:	e3400014 	movt	r0, #20
  137004:	ebff3163 	bl	103598 <rt_assert_handler>

    uint16_t control = 0;
  137008:	e3a03000 	mov	r3, #0
  13700c:	e14b30ba 	strh	r3, [fp, #-10]
    volatile enet_rx_bd_struct_t *curBuffDescrip = handle->rxBdCurrent;
  137010:	e51b3010 	ldr	r3, [fp, #-16]
  137014:	e5933004 	ldr	r3, [r3, #4]
  137018:	e50b3008 	str	r3, [fp, #-8]
        /* Add the cache invalidate maintain. */
        // rt_hw_cpu_dcache_invalidate((void *)curBuffDescrip, sizeof(enet_rx_bd_struct_t));
        // ueth_dcache_invalid((void *)curBuffDescrip, sizeof(enet_rx_bd_struct_t));

        /* The last buffer descriptor of a frame. */
        if (curBuffDescrip->control & ENET_BUFFDESCRIPTOR_RX_LAST_MASK)
  13701c:	e51b3008 	ldr	r3, [fp, #-8]
  137020:	e1d330b2 	ldrh	r3, [r3, #2]
  137024:	e6ff3073 	uxth	r3, r3
  137028:	e2033b02 	and	r3, r3, #2048	; 0x800
  13702c:	e3530000 	cmp	r3, #0
  137030:	0a000030 	beq	1370f8 <ENET_GetRxErrBeforeReadFrame+0x174>
        {
            control = curBuffDescrip->control;
  137034:	e51b3008 	ldr	r3, [fp, #-8]
  137038:	e1d330b2 	ldrh	r3, [r3, #2]
  13703c:	e14b30ba 	strh	r3, [fp, #-10]
            if (control & ENET_BUFFDESCRIPTOR_RX_TRUNC_MASK)
  137040:	e15b30ba 	ldrh	r3, [fp, #-10]
  137044:	e2033001 	and	r3, r3, #1
  137048:	e3530000 	cmp	r3, #0
  13704c:	0a000004 	beq	137064 <ENET_GetRxErrBeforeReadFrame+0xe0>
            {
                /* The receive truncate error. */
                eErrorStatic->statsRxTruncateErr++;
  137050:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137054:	e5933010 	ldr	r3, [r3, #16]
  137058:	e2832001 	add	r2, r3, #1
  13705c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137060:	e5832010 	str	r2, [r3, #16]
            }
            if (control & ENET_BUFFDESCRIPTOR_RX_OVERRUN_MASK)
  137064:	e15b30ba 	ldrh	r3, [fp, #-10]
  137068:	e2033002 	and	r3, r3, #2
  13706c:	e3530000 	cmp	r3, #0
  137070:	0a000004 	beq	137088 <ENET_GetRxErrBeforeReadFrame+0x104>
            {
                /* The receive over run error. */
                eErrorStatic->statsRxOverRunErr++;
  137074:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137078:	e593300c 	ldr	r3, [r3, #12]
  13707c:	e2832001 	add	r2, r3, #1
  137080:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137084:	e583200c 	str	r2, [r3, #12]
            }
            if (control & ENET_BUFFDESCRIPTOR_RX_LENVLIOLATE_MASK)
  137088:	e15b30ba 	ldrh	r3, [fp, #-10]
  13708c:	e2033020 	and	r3, r3, #32
  137090:	e3530000 	cmp	r3, #0
  137094:	0a000004 	beq	1370ac <ENET_GetRxErrBeforeReadFrame+0x128>
            {
                /* The receive length violation error. */
                eErrorStatic->statsRxLenGreaterErr++;
  137098:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13709c:	e5933000 	ldr	r3, [r3]
  1370a0:	e2832001 	add	r2, r3, #1
  1370a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1370a8:	e5832000 	str	r2, [r3]
            }
            if (control & ENET_BUFFDESCRIPTOR_RX_NOOCTET_MASK)
  1370ac:	e15b30ba 	ldrh	r3, [fp, #-10]
  1370b0:	e2033010 	and	r3, r3, #16
  1370b4:	e3530000 	cmp	r3, #0
  1370b8:	0a000004 	beq	1370d0 <ENET_GetRxErrBeforeReadFrame+0x14c>
            {
                /* The receive alignment error. */
                eErrorStatic->statsRxAlignErr++;
  1370bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1370c0:	e5933004 	ldr	r3, [r3, #4]
  1370c4:	e2832001 	add	r2, r3, #1
  1370c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1370cc:	e5832004 	str	r2, [r3, #4]
            }
            if (control & ENET_BUFFDESCRIPTOR_RX_CRC_MASK)
  1370d0:	e15b30ba 	ldrh	r3, [fp, #-10]
  1370d4:	e2033004 	and	r3, r3, #4
  1370d8:	e3530000 	cmp	r3, #0
  1370dc:	0a000018 	beq	137144 <ENET_GetRxErrBeforeReadFrame+0x1c0>
            {
                /* The receive CRC error. */
                eErrorStatic->statsRxFcsErr++;
  1370e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1370e4:	e5933008 	ldr	r3, [r3, #8]
  1370e8:	e2832001 	add	r2, r3, #1
  1370ec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1370f0:	e5832008 	str	r2, [r3, #8]
            }
            break;
  1370f4:	ea000012 	b	137144 <ENET_GetRxErrBeforeReadFrame+0x1c0>
        }

        /* Increase the buffer descriptor, if it is the last one, increase to first one of the ring buffer. */
        if (curBuffDescrip->control & ENET_BUFFDESCRIPTOR_RX_WRAP_MASK)
  1370f8:	e51b3008 	ldr	r3, [fp, #-8]
  1370fc:	e1d330b2 	ldrh	r3, [r3, #2]
  137100:	e6ff3073 	uxth	r3, r3
  137104:	e2033a02 	and	r3, r3, #8192	; 0x2000
  137108:	e3530000 	cmp	r3, #0
  13710c:	0a000003 	beq	137120 <ENET_GetRxErrBeforeReadFrame+0x19c>
        {
            curBuffDescrip = handle->rxBdBase;
  137110:	e51b3010 	ldr	r3, [fp, #-16]
  137114:	e5933000 	ldr	r3, [r3]
  137118:	e50b3008 	str	r3, [fp, #-8]
  13711c:	ea000002 	b	13712c <ENET_GetRxErrBeforeReadFrame+0x1a8>
        }
        else
        {
            curBuffDescrip++;
  137120:	e51b3008 	ldr	r3, [fp, #-8]
  137124:	e2833008 	add	r3, r3, #8
  137128:	e50b3008 	str	r3, [fp, #-8]
        }

    } while (curBuffDescrip != handle->rxBdCurrent);
  13712c:	e51b3010 	ldr	r3, [fp, #-16]
  137130:	e5933004 	ldr	r3, [r3, #4]
  137134:	e51b2008 	ldr	r2, [fp, #-8]
  137138:	e1520003 	cmp	r2, r3
  13713c:	1affffb6 	bne	13701c <ENET_GetRxErrBeforeReadFrame+0x98>
}
  137140:	ea000000 	b	137148 <ENET_GetRxErrBeforeReadFrame+0x1c4>
            break;
  137144:	e320f000 	nop	{0}
}
  137148:	e320f000 	nop	{0}
  13714c:	e24bd004 	sub	sp, fp, #4
  137150:	e8bd8800 	pop	{fp, pc}

00137154 <ENET_ReadFrame>:

status_t ENET_ReadFrame(ENET_Type *base,enet_handle_t *handle,const enet_config_t *config,uint8_t *data,uint16_t *length)
{
  137154:	e92d4800 	push	{fp, lr}
  137158:	e28db004 	add	fp, sp, #4
  13715c:	e24dd018 	sub	sp, sp, #24
  137160:	e50b0010 	str	r0, [fp, #-16]
  137164:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  137168:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  13716c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(handle);
  137170:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137174:	e3530000 	cmp	r3, #0
  137178:	1a000005 	bne	137194 <ENET_ReadFrame+0x40>
  13717c:	e3a02fbd 	mov	r2, #756	; 0x2f4
  137180:	e30a131c 	movw	r1, #41756	; 0xa31c
  137184:	e3401014 	movt	r1, #20
  137188:	e3090f18 	movw	r0, #40728	; 0x9f18
  13718c:	e3400014 	movt	r0, #20
  137190:	ebff3100 	bl	103598 <rt_assert_handler>
    RT_ASSERT(handle->rxBdCurrent);
  137194:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137198:	e5933004 	ldr	r3, [r3, #4]
  13719c:	e3530000 	cmp	r3, #0
  1371a0:	1a000005 	bne	1371bc <ENET_ReadFrame+0x68>
  1371a4:	e30022f5 	movw	r2, #757	; 0x2f5
  1371a8:	e30a131c 	movw	r1, #41756	; 0xa31c
  1371ac:	e3401014 	movt	r1, #20
  1371b0:	e30a015c 	movw	r0, #41308	; 0xa15c
  1371b4:	e3400014 	movt	r0, #20
  1371b8:	ebff30f6 	bl	103598 <rt_assert_handler>
    RT_ASSERT(length);
  1371bc:	e59b3004 	ldr	r3, [fp, #4]
  1371c0:	e3530000 	cmp	r3, #0
  1371c4:	1a000005 	bne	1371e0 <ENET_ReadFrame+0x8c>
  1371c8:	e30022f6 	movw	r2, #758	; 0x2f6
  1371cc:	e30a131c 	movw	r1, #41756	; 0xa31c
  1371d0:	e3401014 	movt	r1, #20
  1371d4:	e30a0180 	movw	r0, #41344	; 0xa180
  1371d8:	e3400014 	movt	r0, #20
  1371dc:	ebff30ed 	bl	103598 <rt_assert_handler>

    /* Reset the length to zero. */
    *length = 0;
  1371e0:	e59b3004 	ldr	r3, [fp, #4]
  1371e4:	e3a02000 	mov	r2, #0
  1371e8:	e1c320b0 	strh	r2, [r3]

    uint16_t validLastMask = ENET_BUFFDESCRIPTOR_RX_LAST_MASK | ENET_BUFFDESCRIPTOR_RX_EMPTY_MASK;
  1371ec:	e3a03b22 	mov	r3, #34816	; 0x8800
  1371f0:	e14b30b6 	strh	r3, [fp, #-6]
    volatile enet_rx_bd_struct_t *curBuffDescrip = handle->rxBdCurrent;
  1371f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1371f8:	e5933004 	ldr	r3, [r3, #4]
  1371fc:	e50b300c 	str	r3, [fp, #-12]

    // rt_hw_cpu_dcache_invalidate((void *)physical_to_virtual(curBuffDescrip->buffer), handle->rxBuffSizeAlign);
    // ueth_dcache_invalid((void *)(curBuffDescrip->buffer_vaddr), handle->rxBuffSizeAlign);
    /* Check the current buffer descriptor's empty flag.  if empty means there is no frame received. */
    if (curBuffDescrip->control & ENET_BUFFDESCRIPTOR_RX_EMPTY_MASK)
  137200:	e51b300c 	ldr	r3, [fp, #-12]
  137204:	e1d330b2 	ldrh	r3, [r3, #2]
  137208:	e6ff3073 	uxth	r3, r3
  13720c:	e6bf3073 	sxth	r3, r3
  137210:	e3530000 	cmp	r3, #0
  137214:	aa000001 	bge	137220 <ENET_ReadFrame+0xcc>
    {
        return kStatus_ENET_RxFrameEmpty;
  137218:	e3003fa2 	movw	r3, #4002	; 0xfa2
  13721c:	ea00005c 	b	137394 <ENET_ReadFrame+0x240>
    }
    else
    {
        if ((curBuffDescrip->control & validLastMask) == ENET_BUFFDESCRIPTOR_RX_LAST_MASK)
  137220:	e51b300c 	ldr	r3, [fp, #-12]
  137224:	e1d330b2 	ldrh	r3, [r3, #2]
  137228:	e6ff2073 	uxth	r2, r3
  13722c:	e15b30b6 	ldrh	r3, [fp, #-6]
  137230:	e0033002 	and	r3, r3, r2
  137234:	e6ff3073 	uxth	r3, r3
  137238:	e3530b02 	cmp	r3, #2048	; 0x800
  13723c:	1a00003a 	bne	13732c <ENET_ReadFrame+0x1d8>
        {
            if(curBuffDescrip->length <= config->rxMaxFrameLen)
  137240:	e51b300c 	ldr	r3, [fp, #-12]
  137244:	e1d330b0 	ldrh	r3, [r3]
  137248:	e6ff2073 	uxth	r2, r3
  13724c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137250:	e1d330b8 	ldrh	r3, [r3, #8]
  137254:	e1520003 	cmp	r2, r3
  137258:	8a000018 	bhi	1372c0 <ENET_ReadFrame+0x16c>
            {
                *length = curBuffDescrip->length;
  13725c:	e51b300c 	ldr	r3, [fp, #-12]
  137260:	e1d330b0 	ldrh	r3, [r3]
  137264:	e6ff2073 	uxth	r2, r3
  137268:	e59b3004 	ldr	r3, [fp, #4]
  13726c:	e1c320b0 	strh	r2, [r3]
                rt_memcpy(data, buffer_vaddr_rx[curBuffDescrip - handle->rxBdBase], curBuffDescrip->length);
  137270:	e51b300c 	ldr	r3, [fp, #-12]
  137274:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  137278:	e5922000 	ldr	r2, [r2]
  13727c:	e0433002 	sub	r3, r3, r2
  137280:	e1a031c3 	asr	r3, r3, #3
  137284:	e1a02003 	mov	r2, r3
  137288:	e30c3c70 	movw	r3, #52336	; 0xcc70
  13728c:	e3403015 	movt	r3, #21
  137290:	e7931102 	ldr	r1, [r3, r2, lsl #2]
  137294:	e51b300c 	ldr	r3, [fp, #-12]
  137298:	e1d330b0 	ldrh	r3, [r3]
  13729c:	e6ff3073 	uxth	r3, r3
  1372a0:	e1a02003 	mov	r2, r3
  1372a4:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  1372a8:	ebff3014 	bl	103300 <rt_memcpy>
                /* Updates the receive buffer descriptors. */
                ENET_UpdateReadBuffers(base, handle);
  1372ac:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1372b0:	e51b0010 	ldr	r0, [fp, #-16]
  1372b4:	eb000039 	bl	1373a0 <ENET_UpdateReadBuffers>
                return kStatus_Success;
  1372b8:	e3a03000 	mov	r3, #0
  1372bc:	ea000034 	b	137394 <ENET_ReadFrame+0x240>
            }
            else
            {
                LOG_E("frame error0 curBuffDescrip->control 0x%04x length %d\n",curBuffDescrip->control,curBuffDescrip->length);
  1372c0:	e30a0188 	movw	r0, #41352	; 0xa188
  1372c4:	e3400014 	movt	r0, #20
  1372c8:	ebff2f91 	bl	103114 <rt_kprintf>
  1372cc:	e51b300c 	ldr	r3, [fp, #-12]
  1372d0:	e1d330b2 	ldrh	r3, [r3, #2]
  1372d4:	e6ff3073 	uxth	r3, r3
  1372d8:	e1a01003 	mov	r1, r3
  1372dc:	e51b300c 	ldr	r3, [fp, #-12]
  1372e0:	e1d330b0 	ldrh	r3, [r3]
  1372e4:	e6ff3073 	uxth	r3, r3
  1372e8:	e1a02003 	mov	r2, r3
  1372ec:	e30a019c 	movw	r0, #41372	; 0xa19c
  1372f0:	e3400014 	movt	r0, #20
  1372f4:	ebff2f86 	bl	103114 <rt_kprintf>
  1372f8:	e30a01d4 	movw	r0, #41428	; 0xa1d4
  1372fc:	e3400014 	movt	r0, #20
  137300:	ebff2f83 	bl	103114 <rt_kprintf>
                *length = curBuffDescrip->length;
  137304:	e51b300c 	ldr	r3, [fp, #-12]
  137308:	e1d330b0 	ldrh	r3, [r3]
  13730c:	e6ff2073 	uxth	r2, r3
  137310:	e59b3004 	ldr	r3, [fp, #4]
  137314:	e1c320b0 	strh	r2, [r3]
                /* Updates the receive buffer descriptors. */
                ENET_UpdateReadBuffers(base, handle);
  137318:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  13731c:	e51b0010 	ldr	r0, [fp, #-16]
  137320:	eb00001e 	bl	1373a0 <ENET_UpdateReadBuffers>
                return kStatus_ENET_RxFrameError;
  137324:	e3a03efa 	mov	r3, #4000	; 0xfa0
  137328:	ea000019 	b	137394 <ENET_ReadFrame+0x240>
            }
        }
        else
        {
            LOG_E("frame error1 curBuffDescrip->control 0x%04x length %d\n",curBuffDescrip->control,curBuffDescrip->length);
  13732c:	e30a0188 	movw	r0, #41352	; 0xa188
  137330:	e3400014 	movt	r0, #20
  137334:	ebff2f76 	bl	103114 <rt_kprintf>
  137338:	e51b300c 	ldr	r3, [fp, #-12]
  13733c:	e1d330b2 	ldrh	r3, [r3, #2]
  137340:	e6ff3073 	uxth	r3, r3
  137344:	e1a01003 	mov	r1, r3
  137348:	e51b300c 	ldr	r3, [fp, #-12]
  13734c:	e1d330b0 	ldrh	r3, [r3]
  137350:	e6ff3073 	uxth	r3, r3
  137354:	e1a02003 	mov	r2, r3
  137358:	e30a01dc 	movw	r0, #41436	; 0xa1dc
  13735c:	e3400014 	movt	r0, #20
  137360:	ebff2f6b 	bl	103114 <rt_kprintf>
  137364:	e30a01d4 	movw	r0, #41428	; 0xa1d4
  137368:	e3400014 	movt	r0, #20
  13736c:	ebff2f68 	bl	103114 <rt_kprintf>
            *length = curBuffDescrip->length;
  137370:	e51b300c 	ldr	r3, [fp, #-12]
  137374:	e1d330b0 	ldrh	r3, [r3]
  137378:	e6ff2073 	uxth	r2, r3
  13737c:	e59b3004 	ldr	r3, [fp, #4]
  137380:	e1c320b0 	strh	r2, [r3]
            ENET_UpdateReadBuffers(base, handle);
  137384:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  137388:	e51b0010 	ldr	r0, [fp, #-16]
  13738c:	eb000003 	bl	1373a0 <ENET_UpdateReadBuffers>
            return kStatus_ENET_RxFrameError;
  137390:	e3a03efa 	mov	r3, #4000	; 0xfa0
        }
    }
    /* The frame is on processing - set to empty status to make application to receive it next time. */
    return kStatus_ENET_RxFrameEmpty;
}
  137394:	e1a00003 	mov	r0, r3
  137398:	e24bd004 	sub	sp, fp, #4
  13739c:	e8bd8800 	pop	{fp, pc}

001373a0 <ENET_UpdateReadBuffers>:

static void ENET_UpdateReadBuffers(ENET_Type *base, enet_handle_t *handle)
{
  1373a0:	e92d4800 	push	{fp, lr}
  1373a4:	e28db004 	add	fp, sp, #4
  1373a8:	e24dd008 	sub	sp, sp, #8
  1373ac:	e50b0008 	str	r0, [fp, #-8]
  1373b0:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(handle);
  1373b4:	e51b300c 	ldr	r3, [fp, #-12]
  1373b8:	e3530000 	cmp	r3, #0
  1373bc:	1a000005 	bne	1373d8 <ENET_UpdateReadBuffers+0x38>
  1373c0:	e3a02fca 	mov	r2, #808	; 0x328
  1373c4:	e30a132c 	movw	r1, #41772	; 0xa32c
  1373c8:	e3401014 	movt	r1, #20
  1373cc:	e3090f18 	movw	r0, #40728	; 0x9f18
  1373d0:	e3400014 	movt	r0, #20
  1373d4:	ebff306f 	bl	103598 <rt_assert_handler>

    /* Clears status. */
    handle->rxBdCurrent->control &= ENET_BUFFDESCRIPTOR_RX_WRAP_MASK;
  1373d8:	e51b300c 	ldr	r3, [fp, #-12]
  1373dc:	e5933004 	ldr	r3, [r3, #4]
  1373e0:	e1d330b2 	ldrh	r3, [r3, #2]
  1373e4:	e6ff2073 	uxth	r2, r3
  1373e8:	e51b300c 	ldr	r3, [fp, #-12]
  1373ec:	e5933004 	ldr	r3, [r3, #4]
  1373f0:	e2022a02 	and	r2, r2, #8192	; 0x2000
  1373f4:	e6ff2072 	uxth	r2, r2
  1373f8:	e1c320b2 	strh	r2, [r3, #2]
    /* Sets the receive buffer descriptor with the empty flag. */
    handle->rxBdCurrent->control |= ENET_BUFFDESCRIPTOR_RX_EMPTY_MASK;
  1373fc:	e51b300c 	ldr	r3, [fp, #-12]
  137400:	e5933004 	ldr	r3, [r3, #4]
  137404:	e1d330b2 	ldrh	r3, [r3, #2]
  137408:	e6ff3073 	uxth	r3, r3
  13740c:	e51b200c 	ldr	r2, [fp, #-12]
  137410:	e5922004 	ldr	r2, [r2, #4]
  137414:	e1e03883 	mvn	r3, r3, lsl #17
  137418:	e1e038a3 	mvn	r3, r3, lsr #17
  13741c:	e6ff3073 	uxth	r3, r3
  137420:	e1c230b2 	strh	r3, [r2, #2]
    /* Increase current buffer descriptor to the next one. */
    if (handle->rxBdCurrent->control & ENET_BUFFDESCRIPTOR_RX_WRAP_MASK)
  137424:	e51b300c 	ldr	r3, [fp, #-12]
  137428:	e5933004 	ldr	r3, [r3, #4]
  13742c:	e1d330b2 	ldrh	r3, [r3, #2]
  137430:	e6ff3073 	uxth	r3, r3
  137434:	e2033a02 	and	r3, r3, #8192	; 0x2000
  137438:	e3530000 	cmp	r3, #0
  13743c:	0a000004 	beq	137454 <ENET_UpdateReadBuffers+0xb4>
    {
        handle->rxBdCurrent = handle->rxBdBase;
  137440:	e51b300c 	ldr	r3, [fp, #-12]
  137444:	e5932000 	ldr	r2, [r3]
  137448:	e51b300c 	ldr	r3, [fp, #-12]
  13744c:	e5832004 	str	r2, [r3, #4]
  137450:	ea000004 	b	137468 <ENET_UpdateReadBuffers+0xc8>
    }
    else
    {
        handle->rxBdCurrent++;
  137454:	e51b300c 	ldr	r3, [fp, #-12]
  137458:	e5933004 	ldr	r3, [r3, #4]
  13745c:	e2832008 	add	r2, r3, #8
  137460:	e51b300c 	ldr	r3, [fp, #-12]
  137464:	e5832004 	str	r2, [r3, #4]
    }
    /* Actives the receive buffer descriptor. */
    base->RDAR = ENET_RDAR_RDAR_MASK;
  137468:	e51b3008 	ldr	r3, [fp, #-8]
  13746c:	e3a02401 	mov	r2, #16777216	; 0x1000000
  137470:	e5832010 	str	r2, [r3, #16]
}
  137474:	e320f000 	nop	{0}
  137478:	e24bd004 	sub	sp, fp, #4
  13747c:	e8bd8800 	pop	{fp, pc}

00137480 <ENET_SendFrame>:

status_t ENET_SendFrame(ENET_Type *base, enet_handle_t *handle, const uint8_t *data, uint16_t length,uint32_t last_flag)
{
  137480:	e92d4800 	push	{fp, lr}
  137484:	e28db004 	add	fp, sp, #4
  137488:	e24dd018 	sub	sp, sp, #24
  13748c:	e50b0010 	str	r0, [fp, #-16]
  137490:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  137494:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  137498:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
    RT_ASSERT(handle);
  13749c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1374a0:	e3530000 	cmp	r3, #0
  1374a4:	1a000005 	bne	1374c0 <ENET_SendFrame+0x40>
  1374a8:	e300233d 	movw	r2, #829	; 0x33d
  1374ac:	e30a1344 	movw	r1, #41796	; 0xa344
  1374b0:	e3401014 	movt	r1, #20
  1374b4:	e3090f18 	movw	r0, #40728	; 0x9f18
  1374b8:	e3400014 	movt	r0, #20
  1374bc:	ebff3035 	bl	103598 <rt_assert_handler>
    RT_ASSERT(handle->txBdCurrent);
  1374c0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1374c4:	e593300c 	ldr	r3, [r3, #12]
  1374c8:	e3530000 	cmp	r3, #0
  1374cc:	1a000005 	bne	1374e8 <ENET_SendFrame+0x68>
  1374d0:	e300233e 	movw	r2, #830	; 0x33e
  1374d4:	e30a1344 	movw	r1, #41796	; 0xa344
  1374d8:	e3401014 	movt	r1, #20
  1374dc:	e30a0214 	movw	r0, #41492	; 0xa214
  1374e0:	e3400014 	movt	r0, #20
  1374e4:	ebff302b 	bl	103598 <rt_assert_handler>
    RT_ASSERT(data);
  1374e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1374ec:	e3530000 	cmp	r3, #0
  1374f0:	1a000005 	bne	13750c <ENET_SendFrame+0x8c>
  1374f4:	e300233f 	movw	r2, #831	; 0x33f
  1374f8:	e30a1344 	movw	r1, #41796	; 0xa344
  1374fc:	e3401014 	movt	r1, #20
  137500:	e30a0228 	movw	r0, #41512	; 0xa228
  137504:	e3400014 	movt	r0, #20
  137508:	ebff3022 	bl	103598 <rt_assert_handler>
    RT_ASSERT(length <= ENET_FRAME_MAX_FRAMELEN);
  13750c:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  137510:	e30025ee 	movw	r2, #1518	; 0x5ee
  137514:	e1530002 	cmp	r3, r2
  137518:	9a000005 	bls	137534 <ENET_SendFrame+0xb4>
  13751c:	e3a02d0d 	mov	r2, #832	; 0x340
  137520:	e30a1344 	movw	r1, #41796	; 0xa344
  137524:	e3401014 	movt	r1, #20
  137528:	e30a0230 	movw	r0, #41520	; 0xa230
  13752c:	e3400014 	movt	r0, #20
  137530:	ebff3018 	bl	103598 <rt_assert_handler>

    volatile enet_tx_bd_struct_t *curBuffDescrip = handle->txBdCurrent;
  137534:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137538:	e593300c 	ldr	r3, [r3, #12]
  13753c:	e50b3008 	str	r3, [fp, #-8]
    /* Check if the transmit buffer is ready. */
    if (curBuffDescrip->control & ENET_BUFFDESCRIPTOR_TX_READY_MASK)
  137540:	e51b3008 	ldr	r3, [fp, #-8]
  137544:	e1d330b2 	ldrh	r3, [r3, #2]
  137548:	e6ff3073 	uxth	r3, r3
  13754c:	e6bf3073 	sxth	r3, r3
  137550:	e3530000 	cmp	r3, #0
  137554:	aa000001 	bge	137560 <ENET_SendFrame+0xe0>
    {
        return kStatus_ENET_TxFrameBusy;
  137558:	e3003fa3 	movw	r3, #4003	; 0xfa3
  13755c:	ea00004b 	b	137690 <ENET_SendFrame+0x210>
    }
    /* One transmit buffer is enough for one frame. */
    if (handle->txBuffSizeAlign >= length)
  137560:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137564:	e5932014 	ldr	r2, [r3, #20]
  137568:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  13756c:	e1520003 	cmp	r2, r3
  137570:	3a000045 	bcc	13768c <ENET_SendFrame+0x20c>
    {
        /* Copy data to the buffer for uDMA transfer. */
        rt_memcpy(buffer_vaddr_tx[curBuffDescrip - handle->txBdBase], data, length);
  137574:	e51b3008 	ldr	r3, [fp, #-8]
  137578:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  13757c:	e5922008 	ldr	r2, [r2, #8]
  137580:	e0433002 	sub	r3, r3, r2
  137584:	e1a031c3 	asr	r3, r3, #3
  137588:	e1a02003 	mov	r2, r3
  13758c:	e30c3e70 	movw	r3, #52848	; 0xce70
  137590:	e3403015 	movt	r3, #21
  137594:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  137598:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
  13759c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  1375a0:	e1a00003 	mov	r0, r3
  1375a4:	ebff2f55 	bl	103300 <rt_memcpy>
        /* Set data length. */
        curBuffDescrip->length = length;
  1375a8:	e51b3008 	ldr	r3, [fp, #-8]
  1375ac:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
  1375b0:	e1c320b0 	strh	r2, [r3]
        if(last_flag)
  1375b4:	e59b3004 	ldr	r3, [fp, #4]
  1375b8:	e3530000 	cmp	r3, #0
  1375bc:	0a000009 	beq	1375e8 <ENET_SendFrame+0x168>
        {
            curBuffDescrip->control |= (ENET_BUFFDESCRIPTOR_TX_READY_MASK | ENET_BUFFDESCRIPTOR_TX_LAST_MASK);
  1375c0:	e51b3008 	ldr	r3, [fp, #-8]
  1375c4:	e1d330b2 	ldrh	r3, [r3, #2]
  1375c8:	e6ff2073 	uxth	r2, r3
  1375cc:	e3a03b22 	mov	r3, #34816	; 0x8800
  1375d0:	e34f3fff 	movt	r3, #65535	; 0xffff
  1375d4:	e1823003 	orr	r3, r2, r3
  1375d8:	e6ff2073 	uxth	r2, r3
  1375dc:	e51b3008 	ldr	r3, [fp, #-8]
  1375e0:	e1c320b2 	strh	r2, [r3, #2]
  1375e4:	ea00000e 	b	137624 <ENET_SendFrame+0x1a4>
        }
        else
        {
            curBuffDescrip->control &= ~ENET_BUFFDESCRIPTOR_TX_LAST_MASK;
  1375e8:	e51b3008 	ldr	r3, [fp, #-8]
  1375ec:	e1d330b2 	ldrh	r3, [r3, #2]
  1375f0:	e6ff3073 	uxth	r3, r3
  1375f4:	e3c33b02 	bic	r3, r3, #2048	; 0x800
  1375f8:	e6ff2073 	uxth	r2, r3
  1375fc:	e51b3008 	ldr	r3, [fp, #-8]
  137600:	e1c320b2 	strh	r2, [r3, #2]
            curBuffDescrip->control |= ENET_BUFFDESCRIPTOR_TX_READY_MASK;
  137604:	e51b3008 	ldr	r3, [fp, #-8]
  137608:	e1d330b2 	ldrh	r3, [r3, #2]
  13760c:	e6ff3073 	uxth	r3, r3
  137610:	e1e03883 	mvn	r3, r3, lsl #17
  137614:	e1e038a3 	mvn	r3, r3, lsr #17
  137618:	e6ff2073 	uxth	r2, r3
  13761c:	e51b3008 	ldr	r3, [fp, #-8]
  137620:	e1c320b2 	strh	r2, [r3, #2]

        // rt_hw_cpu_dcache_clean((void *)physical_to_virtual(curBuffDescrip->buffer),length);
        // ueth_dcache_clean(curBuffDescrip->buffer_vaddr, length);
        /* Active the transmit buffer descriptor. */

        base->TDAR = ENET_TDAR_TDAR_MASK;
  137624:	e51b3010 	ldr	r3, [fp, #-16]
  137628:	e3a02401 	mov	r2, #16777216	; 0x1000000
  13762c:	e5832014 	str	r2, [r3, #20]
        /* Increase the buffer descriptor address. */
        while((base->TDAR != 0))
  137630:	e320f000 	nop	{0}
  137634:	e51b3010 	ldr	r3, [fp, #-16]
  137638:	e5933014 	ldr	r3, [r3, #20]
  13763c:	e3530000 	cmp	r3, #0
  137640:	1afffffb 	bne	137634 <ENET_SendFrame+0x1b4>
        {
        }
        if (curBuffDescrip->control & ENET_BUFFDESCRIPTOR_TX_WRAP_MASK)
  137644:	e51b3008 	ldr	r3, [fp, #-8]
  137648:	e1d330b2 	ldrh	r3, [r3, #2]
  13764c:	e6ff3073 	uxth	r3, r3
  137650:	e2033a02 	and	r3, r3, #8192	; 0x2000
  137654:	e3530000 	cmp	r3, #0
  137658:	0a000004 	beq	137670 <ENET_SendFrame+0x1f0>
        {
            handle->txBdCurrent = handle->txBdBase;
  13765c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137660:	e5932008 	ldr	r2, [r3, #8]
  137664:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137668:	e583200c 	str	r2, [r3, #12]
  13766c:	ea000004 	b	137684 <ENET_SendFrame+0x204>
        }
        else
        {
            handle->txBdCurrent++;
  137670:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137674:	e593300c 	ldr	r3, [r3, #12]
  137678:	e2832008 	add	r2, r3, #8
  13767c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137680:	e583200c 	str	r2, [r3, #12]
        }
        return kStatus_Success;
  137684:	e3a03000 	mov	r3, #0
  137688:	ea000000 	b	137690 <ENET_SendFrame+0x210>
    }
    else
    {
        return kStatus_ENET_RxFrameError;
  13768c:	e3a03efa 	mov	r3, #4000	; 0xfa0
    }
}
  137690:	e1a00003 	mov	r0, r3
  137694:	e24bd004 	sub	sp, fp, #4
  137698:	e8bd8800 	pop	{fp, pc}

0013769c <ENET_AddMulticastGroup>:

void ENET_AddMulticastGroup(ENET_Type *base, uint8_t *address)
{
  13769c:	e92d4800 	push	{fp, lr}
  1376a0:	e28db004 	add	fp, sp, #4
  1376a4:	e24dd018 	sub	sp, sp, #24
  1376a8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1376ac:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(address);
  1376b0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1376b4:	e3530000 	cmp	r3, #0
  1376b8:	1a000005 	bne	1376d4 <ENET_AddMulticastGroup+0x38>
  1376bc:	e3a02fdd 	mov	r2, #884	; 0x374
  1376c0:	e30a1354 	movw	r1, #41812	; 0xa354
  1376c4:	e3401014 	movt	r1, #20
  1376c8:	e30a0254 	movw	r0, #41556	; 0xa254
  1376cc:	e3400014 	movt	r0, #20
  1376d0:	ebff2fb0 	bl	103598 <rt_assert_handler>

    uint32_t crc = 0xFFFFFFFFU;
  1376d4:	e3e03000 	mvn	r3, #0
  1376d8:	e50b3008 	str	r3, [fp, #-8]
    uint32_t count1 = 0;
  1376dc:	e3a03000 	mov	r3, #0
  1376e0:	e50b300c 	str	r3, [fp, #-12]
    uint32_t count2 = 0;
  1376e4:	e3a03000 	mov	r3, #0
  1376e8:	e50b3010 	str	r3, [fp, #-16]

    /* Calculates the CRC-32 polynomial on the multicast group address. */
    for (count1 = 0; count1 < ENET_FRAME_MACLEN; count1++)
  1376ec:	e3a03000 	mov	r3, #0
  1376f0:	e50b300c 	str	r3, [fp, #-12]
  1376f4:	ea000028 	b	13779c <ENET_AddMulticastGroup+0x100>
    {
        uint8_t c = address[count1];
  1376f8:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1376fc:	e51b300c 	ldr	r3, [fp, #-12]
  137700:	e0823003 	add	r3, r2, r3
  137704:	e5d33000 	ldrb	r3, [r3]
  137708:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
        for (count2 = 0; count2 < 0x08U; count2++)
  13770c:	e3a03000 	mov	r3, #0
  137710:	e50b3010 	str	r3, [fp, #-16]
  137714:	ea00001a 	b	137784 <ENET_AddMulticastGroup+0xe8>
        {
            if ((c ^ crc) & 1U)
  137718:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  13771c:	e51b3008 	ldr	r3, [fp, #-8]
  137720:	e0233002 	eor	r3, r3, r2
  137724:	e2033001 	and	r3, r3, #1
  137728:	e3530000 	cmp	r3, #0
  13772c:	0a00000b 	beq	137760 <ENET_AddMulticastGroup+0xc4>
            {
                crc >>= 1U;
  137730:	e51b3008 	ldr	r3, [fp, #-8]
  137734:	e1a030a3 	lsr	r3, r3, #1
  137738:	e50b3008 	str	r3, [fp, #-8]
                c >>= 1U;
  13773c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  137740:	e1a030a3 	lsr	r3, r3, #1
  137744:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
                crc ^= 0xEDB88320U;
  137748:	e51b2008 	ldr	r2, [fp, #-8]
  13774c:	e3083320 	movw	r3, #33568	; 0x8320
  137750:	e34e3db8 	movt	r3, #60856	; 0xedb8
  137754:	e0233002 	eor	r3, r3, r2
  137758:	e50b3008 	str	r3, [fp, #-8]
  13775c:	ea000005 	b	137778 <ENET_AddMulticastGroup+0xdc>
            }
            else
            {
                crc >>= 1U;
  137760:	e51b3008 	ldr	r3, [fp, #-8]
  137764:	e1a030a3 	lsr	r3, r3, #1
  137768:	e50b3008 	str	r3, [fp, #-8]
                c >>= 1U;
  13776c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  137770:	e1a030a3 	lsr	r3, r3, #1
  137774:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
        for (count2 = 0; count2 < 0x08U; count2++)
  137778:	e51b3010 	ldr	r3, [fp, #-16]
  13777c:	e2833001 	add	r3, r3, #1
  137780:	e50b3010 	str	r3, [fp, #-16]
  137784:	e51b3010 	ldr	r3, [fp, #-16]
  137788:	e3530007 	cmp	r3, #7
  13778c:	9affffe1 	bls	137718 <ENET_AddMulticastGroup+0x7c>
    for (count1 = 0; count1 < ENET_FRAME_MACLEN; count1++)
  137790:	e51b300c 	ldr	r3, [fp, #-12]
  137794:	e2833001 	add	r3, r3, #1
  137798:	e50b300c 	str	r3, [fp, #-12]
  13779c:	e51b300c 	ldr	r3, [fp, #-12]
  1377a0:	e3530005 	cmp	r3, #5
  1377a4:	9affffd3 	bls	1376f8 <ENET_AddMulticastGroup+0x5c>
            }
        }
    }

    /* Enable a multicast group address. */
    if (!((crc >> 0x1FU) & 1U))
  1377a8:	e51b3008 	ldr	r3, [fp, #-8]
  1377ac:	e3530000 	cmp	r3, #0
  1377b0:	ba00000a 	blt	1377e0 <ENET_AddMulticastGroup+0x144>
    {
        base->GALR |= 1U << ((crc >> 0x1AU) & 0x1FU);
  1377b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1377b8:	e5932124 	ldr	r2, [r3, #292]	; 0x124
  1377bc:	e51b3008 	ldr	r3, [fp, #-8]
  1377c0:	e1a03d23 	lsr	r3, r3, #26
  1377c4:	e203301f 	and	r3, r3, #31
  1377c8:	e3a01001 	mov	r1, #1
  1377cc:	e1a03311 	lsl	r3, r1, r3
  1377d0:	e1822003 	orr	r2, r2, r3
  1377d4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1377d8:	e5832124 	str	r2, [r3, #292]	; 0x124
    }
    else
    {
        base->GAUR |= 1U << ((crc >> 0x1AU) & 0x1FU);
    }
}
  1377dc:	ea000009 	b	137808 <ENET_AddMulticastGroup+0x16c>
        base->GAUR |= 1U << ((crc >> 0x1AU) & 0x1FU);
  1377e0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1377e4:	e5932120 	ldr	r2, [r3, #288]	; 0x120
  1377e8:	e51b3008 	ldr	r3, [fp, #-8]
  1377ec:	e1a03d23 	lsr	r3, r3, #26
  1377f0:	e203301f 	and	r3, r3, #31
  1377f4:	e3a01001 	mov	r1, #1
  1377f8:	e1a03311 	lsl	r3, r1, r3
  1377fc:	e1822003 	orr	r2, r2, r3
  137800:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137804:	e5832120 	str	r2, [r3, #288]	; 0x120
}
  137808:	e320f000 	nop	{0}
  13780c:	e24bd004 	sub	sp, fp, #4
  137810:	e8bd8800 	pop	{fp, pc}

00137814 <ENET_LeaveMulticastGroup>:

void ENET_LeaveMulticastGroup(ENET_Type *base, uint8_t *address)
{
  137814:	e92d4800 	push	{fp, lr}
  137818:	e28db004 	add	fp, sp, #4
  13781c:	e24dd018 	sub	sp, sp, #24
  137820:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  137824:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(address);
  137828:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  13782c:	e3530000 	cmp	r3, #0
  137830:	1a000005 	bne	13784c <ENET_LeaveMulticastGroup+0x38>
  137834:	e300239b 	movw	r2, #923	; 0x39b
  137838:	e30a136c 	movw	r1, #41836	; 0xa36c
  13783c:	e3401014 	movt	r1, #20
  137840:	e30a0254 	movw	r0, #41556	; 0xa254
  137844:	e3400014 	movt	r0, #20
  137848:	ebff2f52 	bl	103598 <rt_assert_handler>

    uint32_t crc = 0xFFFFFFFFU;
  13784c:	e3e03000 	mvn	r3, #0
  137850:	e50b3008 	str	r3, [fp, #-8]
    uint32_t count1 = 0;
  137854:	e3a03000 	mov	r3, #0
  137858:	e50b300c 	str	r3, [fp, #-12]
    uint32_t count2 = 0;
  13785c:	e3a03000 	mov	r3, #0
  137860:	e50b3010 	str	r3, [fp, #-16]

    /* Calculates the CRC-32 polynomial on the multicast group address. */
    for (count1 = 0; count1 < ENET_FRAME_MACLEN; count1++)
  137864:	e3a03000 	mov	r3, #0
  137868:	e50b300c 	str	r3, [fp, #-12]
  13786c:	ea000028 	b	137914 <ENET_LeaveMulticastGroup+0x100>
    {
        uint8_t c = address[count1];
  137870:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  137874:	e51b300c 	ldr	r3, [fp, #-12]
  137878:	e0823003 	add	r3, r2, r3
  13787c:	e5d33000 	ldrb	r3, [r3]
  137880:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
        for (count2 = 0; count2 < 0x08U; count2++)
  137884:	e3a03000 	mov	r3, #0
  137888:	e50b3010 	str	r3, [fp, #-16]
  13788c:	ea00001a 	b	1378fc <ENET_LeaveMulticastGroup+0xe8>
        {
            if ((c ^ crc) & 1U)
  137890:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  137894:	e51b3008 	ldr	r3, [fp, #-8]
  137898:	e0233002 	eor	r3, r3, r2
  13789c:	e2033001 	and	r3, r3, #1
  1378a0:	e3530000 	cmp	r3, #0
  1378a4:	0a00000b 	beq	1378d8 <ENET_LeaveMulticastGroup+0xc4>
            {
                crc >>= 1U;
  1378a8:	e51b3008 	ldr	r3, [fp, #-8]
  1378ac:	e1a030a3 	lsr	r3, r3, #1
  1378b0:	e50b3008 	str	r3, [fp, #-8]
                c >>= 1U;
  1378b4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  1378b8:	e1a030a3 	lsr	r3, r3, #1
  1378bc:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
                crc ^= 0xEDB88320U;
  1378c0:	e51b2008 	ldr	r2, [fp, #-8]
  1378c4:	e3083320 	movw	r3, #33568	; 0x8320
  1378c8:	e34e3db8 	movt	r3, #60856	; 0xedb8
  1378cc:	e0233002 	eor	r3, r3, r2
  1378d0:	e50b3008 	str	r3, [fp, #-8]
  1378d4:	ea000005 	b	1378f0 <ENET_LeaveMulticastGroup+0xdc>
            }
            else
            {
                crc >>= 1U;
  1378d8:	e51b3008 	ldr	r3, [fp, #-8]
  1378dc:	e1a030a3 	lsr	r3, r3, #1
  1378e0:	e50b3008 	str	r3, [fp, #-8]
                c >>= 1U;
  1378e4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  1378e8:	e1a030a3 	lsr	r3, r3, #1
  1378ec:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
        for (count2 = 0; count2 < 0x08U; count2++)
  1378f0:	e51b3010 	ldr	r3, [fp, #-16]
  1378f4:	e2833001 	add	r3, r3, #1
  1378f8:	e50b3010 	str	r3, [fp, #-16]
  1378fc:	e51b3010 	ldr	r3, [fp, #-16]
  137900:	e3530007 	cmp	r3, #7
  137904:	9affffe1 	bls	137890 <ENET_LeaveMulticastGroup+0x7c>
    for (count1 = 0; count1 < ENET_FRAME_MACLEN; count1++)
  137908:	e51b300c 	ldr	r3, [fp, #-12]
  13790c:	e2833001 	add	r3, r3, #1
  137910:	e50b300c 	str	r3, [fp, #-12]
  137914:	e51b300c 	ldr	r3, [fp, #-12]
  137918:	e3530005 	cmp	r3, #5
  13791c:	9affffd3 	bls	137870 <ENET_LeaveMulticastGroup+0x5c>
            }
        }
    }

    /* Set the hash table. */
    if (!((crc >> 0x1FU) & 1U))
  137920:	e51b3008 	ldr	r3, [fp, #-8]
  137924:	e3530000 	cmp	r3, #0
  137928:	ba00000b 	blt	13795c <ENET_LeaveMulticastGroup+0x148>
    {
        base->GALR &= ~(1U << ((crc >> 0x1AU) & 0x1FU));
  13792c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137930:	e5932124 	ldr	r2, [r3, #292]	; 0x124
  137934:	e51b3008 	ldr	r3, [fp, #-8]
  137938:	e1a03d23 	lsr	r3, r3, #26
  13793c:	e203301f 	and	r3, r3, #31
  137940:	e3a01001 	mov	r1, #1
  137944:	e1a03311 	lsl	r3, r1, r3
  137948:	e1e03003 	mvn	r3, r3
  13794c:	e0022003 	and	r2, r2, r3
  137950:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137954:	e5832124 	str	r2, [r3, #292]	; 0x124
    }
    else
    {
        base->GAUR &= ~(1U << ((crc >> 0x1AU) & 0x1FU));
    }
}
  137958:	ea00000a 	b	137988 <ENET_LeaveMulticastGroup+0x174>
        base->GAUR &= ~(1U << ((crc >> 0x1AU) & 0x1FU));
  13795c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137960:	e5932120 	ldr	r2, [r3, #288]	; 0x120
  137964:	e51b3008 	ldr	r3, [fp, #-8]
  137968:	e1a03d23 	lsr	r3, r3, #26
  13796c:	e203301f 	and	r3, r3, #31
  137970:	e3a01001 	mov	r1, #1
  137974:	e1a03311 	lsl	r3, r1, r3
  137978:	e1e03003 	mvn	r3, r3
  13797c:	e0022003 	and	r2, r2, r3
  137980:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137984:	e5832120 	str	r2, [r3, #288]	; 0x120
}
  137988:	e320f000 	nop	{0}
  13798c:	e24bd004 	sub	sp, fp, #4
  137990:	e8bd8800 	pop	{fp, pc}

00137994 <ENET_TransmitIRQHandler>:
void tx_enet_callback(void *base);
void ENET_TransmitIRQHandler(ENET_Type *base, enet_handle_t *handle)
{
  137994:	e92d4800 	push	{fp, lr}
  137998:	e28db004 	add	fp, sp, #4
  13799c:	e24dd008 	sub	sp, sp, #8
  1379a0:	e50b0008 	str	r0, [fp, #-8]
  1379a4:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(handle);
  1379a8:	e51b300c 	ldr	r3, [fp, #-12]
  1379ac:	e3530000 	cmp	r3, #0
  1379b0:	1a000005 	bne	1379cc <ENET_TransmitIRQHandler+0x38>
  1379b4:	e30023c2 	movw	r2, #962	; 0x3c2
  1379b8:	e30a1388 	movw	r1, #41864	; 0xa388
  1379bc:	e3401014 	movt	r1, #20
  1379c0:	e3090f18 	movw	r0, #40728	; 0x9f18
  1379c4:	e3400014 	movt	r0, #20
  1379c8:	ebff2ef2 	bl	103598 <rt_assert_handler>
    /* Check if the transmit interrupt happen. */
    if((kENET_TxBufferInterrupt | kENET_TxFrameInterrupt) & base->EIR)
  1379cc:	e51b3008 	ldr	r3, [fp, #-8]
  1379d0:	e5933004 	ldr	r3, [r3, #4]
  1379d4:	e2033303 	and	r3, r3, #201326592	; 0xc000000
  1379d8:	e3530000 	cmp	r3, #0
  1379dc:	0a000002 	beq	1379ec <ENET_TransmitIRQHandler+0x58>
    {
        /* Clear the transmit interrupt event. */
        base->EIR = kENET_TxFrameInterrupt | kENET_TxBufferInterrupt;
  1379e0:	e51b3008 	ldr	r3, [fp, #-8]
  1379e4:	e3a02303 	mov	r2, #201326592	; 0xc000000
  1379e8:	e5832004 	str	r2, [r3, #4]
    }
    tx_enet_callback((void *)base);
  1379ec:	e51b0008 	ldr	r0, [fp, #-8]
  1379f0:	ebfff6e5 	bl	13558c <tx_enet_callback>
}
  1379f4:	e320f000 	nop	{0}
  1379f8:	e24bd004 	sub	sp, fp, #4
  1379fc:	e8bd8800 	pop	{fp, pc}

00137a00 <ENET_ReceiveIRQHandler>:
void rx_enet_callback(void *base);
void ENET_ReceiveIRQHandler(ENET_Type *base, enet_handle_t *handle)
{
  137a00:	e92d4800 	push	{fp, lr}
  137a04:	e28db004 	add	fp, sp, #4
  137a08:	e24dd008 	sub	sp, sp, #8
  137a0c:	e50b0008 	str	r0, [fp, #-8]
  137a10:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(handle);
  137a14:	e51b300c 	ldr	r3, [fp, #-12]
  137a18:	e3530000 	cmp	r3, #0
  137a1c:	1a000005 	bne	137a38 <ENET_ReceiveIRQHandler+0x38>
  137a20:	e30023ce 	movw	r2, #974	; 0x3ce
  137a24:	e30a13a0 	movw	r1, #41888	; 0xa3a0
  137a28:	e3401014 	movt	r1, #20
  137a2c:	e3090f18 	movw	r0, #40728	; 0x9f18
  137a30:	e3400014 	movt	r0, #20
  137a34:	ebff2ed7 	bl	103598 <rt_assert_handler>

    /* Check if the receive interrupt happen. */
    if((kENET_RxBufferInterrupt | kENET_RxFrameInterrupt) & base->EIR)
  137a38:	e51b3008 	ldr	r3, [fp, #-8]
  137a3c:	e5933004 	ldr	r3, [r3, #4]
  137a40:	e2033403 	and	r3, r3, #50331648	; 0x3000000
  137a44:	e3530000 	cmp	r3, #0
  137a48:	0a000004 	beq	137a60 <ENET_ReceiveIRQHandler+0x60>
    {
        /* Clear the transmit interrupt event. */
        base->EIR = kENET_RxFrameInterrupt | kENET_RxBufferInterrupt;
  137a4c:	e51b3008 	ldr	r3, [fp, #-8]
  137a50:	e3a02403 	mov	r2, #50331648	; 0x3000000
  137a54:	e5832004 	str	r2, [r3, #4]
        rx_enet_callback((void *)base);
  137a58:	e51b0008 	ldr	r0, [fp, #-8]
  137a5c:	ebfff6a7 	bl	135500 <rx_enet_callback>
    }
}
  137a60:	e320f000 	nop	{0}
  137a64:	e24bd004 	sub	sp, fp, #4
  137a68:	e8bd8800 	pop	{fp, pc}

00137a6c <ENET_ErrorIRQHandler>:
void ENET_ErrorIRQHandler(ENET_Type *base, enet_handle_t *handle)
{
  137a6c:	e92d4810 	push	{r4, fp, lr}
  137a70:	e28db008 	add	fp, sp, #8
  137a74:	e24dd014 	sub	sp, sp, #20
  137a78:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  137a7c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(handle);
  137a80:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  137a84:	e3530000 	cmp	r3, #0
  137a88:	1a000005 	bne	137aa4 <ENET_ErrorIRQHandler+0x38>
  137a8c:	e30023da 	movw	r2, #986	; 0x3da
  137a90:	e30a13b8 	movw	r1, #41912	; 0xa3b8
  137a94:	e3401014 	movt	r1, #20
  137a98:	e3090f18 	movw	r0, #40728	; 0x9f18
  137a9c:	e3400014 	movt	r0, #20
  137aa0:	ebff2ebc 	bl	103598 <rt_assert_handler>

    uint32_t errMask = kENET_BabrInterrupt | kENET_BabtInterrupt | kENET_EBusERInterrupt | kENET_PayloadRxInterrupt |
  137aa4:	e3a03000 	mov	r3, #0
  137aa8:	e346307c 	movt	r3, #24700	; 0x607c
  137aac:	e50b3010 	str	r3, [fp, #-16]
                       kENET_LateCollisionInterrupt | kENET_RetryLimitInterrupt | kENET_UnderrunInterrupt;
    /* Check if the error interrupt happen. */
    if (kENET_WakeupInterrupt & base->EIR)
  137ab0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137ab4:	e5933004 	ldr	r3, [r3, #4]
  137ab8:	e2033802 	and	r3, r3, #131072	; 0x20000
  137abc:	e3530000 	cmp	r3, #0
  137ac0:	0a000012 	beq	137b10 <ENET_ErrorIRQHandler+0xa4>
    {
        /* Clear the wakeup interrupt. */
        base->EIR = kENET_WakeupInterrupt;
  137ac4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137ac8:	e3a02802 	mov	r2, #131072	; 0x20000
  137acc:	e5832004 	str	r2, [r3, #4]
        /* wake up and enter the normal mode. */
        ENET_EnableSleepMode(base, false);
  137ad0:	e3a01000 	mov	r1, #0
  137ad4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  137ad8:	ebfff879 	bl	135cc4 <ENET_EnableSleepMode>
        /* Callback function. */
        if (handle->callback)
  137adc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  137ae0:	e5933018 	ldr	r3, [r3, #24]
  137ae4:	e3530000 	cmp	r3, #0
  137ae8:	0a00001c 	beq	137b60 <ENET_ErrorIRQHandler+0xf4>
        {
            handle->callback(base, handle, kENET_WakeUpEvent, handle->userData);
  137aec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  137af0:	e5934018 	ldr	r4, [r3, #24]
  137af4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  137af8:	e593301c 	ldr	r3, [r3, #28]
  137afc:	e3a02003 	mov	r2, #3
  137b00:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  137b04:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  137b08:	e12fff34 	blx	r4
        if (handle->callback)
        {
            handle->callback(base, handle, kENET_ErrEvent, handle->userData);
        }
    }
}
  137b0c:	ea000013 	b	137b60 <ENET_ErrorIRQHandler+0xf4>
        errMask &= base->EIR;
  137b10:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137b14:	e5933004 	ldr	r3, [r3, #4]
  137b18:	e51b2010 	ldr	r2, [fp, #-16]
  137b1c:	e0033002 	and	r3, r3, r2
  137b20:	e50b3010 	str	r3, [fp, #-16]
        base->EIR = errMask;
  137b24:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137b28:	e51b2010 	ldr	r2, [fp, #-16]
  137b2c:	e5832004 	str	r2, [r3, #4]
        if (handle->callback)
  137b30:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  137b34:	e5933018 	ldr	r3, [r3, #24]
  137b38:	e3530000 	cmp	r3, #0
  137b3c:	0a000007 	beq	137b60 <ENET_ErrorIRQHandler+0xf4>
            handle->callback(base, handle, kENET_ErrEvent, handle->userData);
  137b40:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  137b44:	e5934018 	ldr	r4, [r3, #24]
  137b48:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  137b4c:	e593301c 	ldr	r3, [r3, #28]
  137b50:	e3a02002 	mov	r2, #2
  137b54:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  137b58:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  137b5c:	e12fff34 	blx	r4
}
  137b60:	e320f000 	nop	{0}
  137b64:	e24bd008 	sub	sp, fp, #8
  137b68:	e8bd8810 	pop	{r4, fp, pc}

00137b6c <ENET_CommonFrame0IRQHandler>:

void ENET_CommonFrame0IRQHandler(ENET_Type *base)
{
  137b6c:	e92d4800 	push	{fp, lr}
  137b70:	e28db004 	add	fp, sp, #4
  137b74:	e24dd010 	sub	sp, sp, #16
  137b78:	e50b0010 	str	r0, [fp, #-16]
    uint32_t event = base->EIR;
  137b7c:	e51b3010 	ldr	r3, [fp, #-16]
  137b80:	e5933004 	ldr	r3, [r3, #4]
  137b84:	e50b3008 	str	r3, [fp, #-8]
    uint32_t instance = get_instance_by_base(base);
  137b88:	e51b0010 	ldr	r0, [fp, #-16]
  137b8c:	ebfff633 	bl	135460 <get_instance_by_base>
  137b90:	e1a03000 	mov	r3, r0
  137b94:	e50b300c 	str	r3, [fp, #-12]

    if(base->EIMR & ENET_TX_INTERRUPT)
  137b98:	e51b3010 	ldr	r3, [fp, #-16]
  137b9c:	e5933008 	ldr	r3, [r3, #8]
  137ba0:	e2033303 	and	r3, r3, #201326592	; 0xc000000
  137ba4:	e3530000 	cmp	r3, #0
  137ba8:	0a000012 	beq	137bf8 <ENET_CommonFrame0IRQHandler+0x8c>
    {
        if (event & ENET_TX_INTERRUPT)
  137bac:	e51b3008 	ldr	r3, [fp, #-8]
  137bb0:	e2033303 	and	r3, r3, #201326592	; 0xc000000
  137bb4:	e3530000 	cmp	r3, #0
  137bb8:	0a00000e 	beq	137bf8 <ENET_CommonFrame0IRQHandler+0x8c>
        {
            if(s_enetTxIsr)
  137bbc:	e30e3c10 	movw	r3, #60432	; 0xec10
  137bc0:	e3403014 	movt	r3, #20
  137bc4:	e5933000 	ldr	r3, [r3]
  137bc8:	e3530000 	cmp	r3, #0
  137bcc:	0a000009 	beq	137bf8 <ENET_CommonFrame0IRQHandler+0x8c>
            {
                s_enetTxIsr(base, s_ENETHandle[instance]);
  137bd0:	e30e3c10 	movw	r3, #60432	; 0xec10
  137bd4:	e3403014 	movt	r3, #20
  137bd8:	e5932000 	ldr	r2, [r3]
  137bdc:	e30e3c08 	movw	r3, #60424	; 0xec08
  137be0:	e3403014 	movt	r3, #20
  137be4:	e51b100c 	ldr	r1, [fp, #-12]
  137be8:	e7933101 	ldr	r3, [r3, r1, lsl #2]
  137bec:	e1a01003 	mov	r1, r3
  137bf0:	e51b0010 	ldr	r0, [fp, #-16]
  137bf4:	e12fff32 	blx	r2
            }
        }
    }
    if (base->EIMR & ENET_RX_INTERRUPT)
  137bf8:	e51b3010 	ldr	r3, [fp, #-16]
  137bfc:	e5933008 	ldr	r3, [r3, #8]
  137c00:	e2033403 	and	r3, r3, #50331648	; 0x3000000
  137c04:	e3530000 	cmp	r3, #0
  137c08:	0a000012 	beq	137c58 <ENET_CommonFrame0IRQHandler+0xec>
    {
        if (event & ENET_RX_INTERRUPT)
  137c0c:	e51b3008 	ldr	r3, [fp, #-8]
  137c10:	e2033403 	and	r3, r3, #50331648	; 0x3000000
  137c14:	e3530000 	cmp	r3, #0
  137c18:	0a00000e 	beq	137c58 <ENET_CommonFrame0IRQHandler+0xec>
        {
            if(s_enetRxIsr)
  137c1c:	e30e3c14 	movw	r3, #60436	; 0xec14
  137c20:	e3403014 	movt	r3, #20
  137c24:	e5933000 	ldr	r3, [r3]
  137c28:	e3530000 	cmp	r3, #0
  137c2c:	0a000009 	beq	137c58 <ENET_CommonFrame0IRQHandler+0xec>
            {
                s_enetRxIsr(base, s_ENETHandle[instance]);
  137c30:	e30e3c14 	movw	r3, #60436	; 0xec14
  137c34:	e3403014 	movt	r3, #20
  137c38:	e5932000 	ldr	r2, [r3]
  137c3c:	e30e3c08 	movw	r3, #60424	; 0xec08
  137c40:	e3403014 	movt	r3, #20
  137c44:	e51b100c 	ldr	r1, [fp, #-12]
  137c48:	e7933101 	ldr	r3, [r3, r1, lsl #2]
  137c4c:	e1a01003 	mov	r1, r3
  137c50:	e51b0010 	ldr	r0, [fp, #-16]
  137c54:	e12fff32 	blx	r2
            }
        }
    }
    if(base->EIMR & ENET_TS_INTERRUPT)
  137c58:	e51b3010 	ldr	r3, [fp, #-16]
  137c5c:	e5933008 	ldr	r3, [r3, #8]
  137c60:	e2033906 	and	r3, r3, #98304	; 0x18000
  137c64:	e3530000 	cmp	r3, #0
  137c68:	0a000012 	beq	137cb8 <ENET_CommonFrame0IRQHandler+0x14c>
    {
        if (event & ENET_TS_INTERRUPT)
  137c6c:	e51b3008 	ldr	r3, [fp, #-8]
  137c70:	e2033906 	and	r3, r3, #98304	; 0x18000
  137c74:	e3530000 	cmp	r3, #0
  137c78:	0a00000e 	beq	137cb8 <ENET_CommonFrame0IRQHandler+0x14c>
        {
            if(s_enetTsIsr)
  137c7c:	e30e3c1c 	movw	r3, #60444	; 0xec1c
  137c80:	e3403014 	movt	r3, #20
  137c84:	e5933000 	ldr	r3, [r3]
  137c88:	e3530000 	cmp	r3, #0
  137c8c:	0a000009 	beq	137cb8 <ENET_CommonFrame0IRQHandler+0x14c>
            {
                s_enetTsIsr(base, s_ENETHandle[instance]);
  137c90:	e30e3c1c 	movw	r3, #60444	; 0xec1c
  137c94:	e3403014 	movt	r3, #20
  137c98:	e5932000 	ldr	r2, [r3]
  137c9c:	e30e3c08 	movw	r3, #60424	; 0xec08
  137ca0:	e3403014 	movt	r3, #20
  137ca4:	e51b100c 	ldr	r1, [fp, #-12]
  137ca8:	e7933101 	ldr	r3, [r3, r1, lsl #2]
  137cac:	e1a01003 	mov	r1, r3
  137cb0:	e51b0010 	ldr	r0, [fp, #-16]
  137cb4:	e12fff32 	blx	r2
            }
        }
    }
    if(base->EIMR & ENET_ERR_INTERRUPT)
  137cb8:	e51b3010 	ldr	r3, [fp, #-16]
  137cbc:	e5932008 	ldr	r2, [r3, #8]
  137cc0:	e3a03000 	mov	r3, #0
  137cc4:	e346307c 	movt	r3, #24700	; 0x607c
  137cc8:	e0033002 	and	r3, r3, r2
  137ccc:	e3530000 	cmp	r3, #0
  137cd0:	0a000014 	beq	137d28 <ENET_CommonFrame0IRQHandler+0x1bc>
    {
        if (event & ENET_ERR_INTERRUPT)
  137cd4:	e51b2008 	ldr	r2, [fp, #-8]
  137cd8:	e3a03000 	mov	r3, #0
  137cdc:	e346307c 	movt	r3, #24700	; 0x607c
  137ce0:	e0033002 	and	r3, r3, r2
  137ce4:	e3530000 	cmp	r3, #0
  137ce8:	0a00000e 	beq	137d28 <ENET_CommonFrame0IRQHandler+0x1bc>
        {
            if(s_enetErrIsr)
  137cec:	e30e3c18 	movw	r3, #60440	; 0xec18
  137cf0:	e3403014 	movt	r3, #20
  137cf4:	e5933000 	ldr	r3, [r3]
  137cf8:	e3530000 	cmp	r3, #0
  137cfc:	0a000009 	beq	137d28 <ENET_CommonFrame0IRQHandler+0x1bc>
            {
                s_enetErrIsr(base, s_ENETHandle[instance]);
  137d00:	e30e3c18 	movw	r3, #60440	; 0xec18
  137d04:	e3403014 	movt	r3, #20
  137d08:	e5932000 	ldr	r2, [r3]
  137d0c:	e30e3c08 	movw	r3, #60424	; 0xec08
  137d10:	e3403014 	movt	r3, #20
  137d14:	e51b100c 	ldr	r1, [fp, #-12]
  137d18:	e7933101 	ldr	r3, [r3, r1, lsl #2]
  137d1c:	e1a01003 	mov	r1, r3
  137d20:	e51b0010 	ldr	r0, [fp, #-16]
  137d24:	e12fff32 	blx	r2
            }
        }
    }
}
  137d28:	e320f000 	nop	{0}
  137d2c:	e24bd004 	sub	sp, fp, #4
  137d30:	e8bd8800 	pop	{fp, pc}

00137d34 <ENET_DriverIRQHandler>:
void ENET_DriverIRQHandler(int irq, void *base)
{
  137d34:	e92d4800 	push	{fp, lr}
  137d38:	e28db004 	add	fp, sp, #4
  137d3c:	e24dd008 	sub	sp, sp, #8
  137d40:	e50b0008 	str	r0, [fp, #-8]
  137d44:	e50b100c 	str	r1, [fp, #-12]
    ENET_CommonFrame0IRQHandler((ENET_Type *)base);
  137d48:	e51b000c 	ldr	r0, [fp, #-12]
  137d4c:	ebffff86 	bl	137b6c <ENET_CommonFrame0IRQHandler>
  137d50:	e320f000 	nop	{0}
  137d54:	e24bd004 	sub	sp, fp, #4
  137d58:	e8bd8800 	pop	{fp, pc}

00137d5c <GPIO_PinInit>:

//     return instance;
// }

void GPIO_PinInit(GPIO_Type* base, uint32_t pin, const gpio_pin_config_t* Config)
{
  137d5c:	e92d4800 	push	{fp, lr}
  137d60:	e28db004 	add	fp, sp, #4
  137d64:	e24dd010 	sub	sp, sp, #16
  137d68:	e50b0008 	str	r0, [fp, #-8]
  137d6c:	e50b100c 	str	r1, [fp, #-12]
  137d70:	e50b2010 	str	r2, [fp, #-16]
//     /* Enable GPIO clock. */
//     CLOCK_EnableClock(s_gpioClock[GPIO_GetInstance(base)]);
// #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */

    /* Register reset to default value */
    base->IMR &= ~(1U << pin);
  137d74:	e51b3008 	ldr	r3, [fp, #-8]
  137d78:	e5932014 	ldr	r2, [r3, #20]
  137d7c:	e3a01001 	mov	r1, #1
  137d80:	e51b300c 	ldr	r3, [fp, #-12]
  137d84:	e1a03311 	lsl	r3, r1, r3
  137d88:	e1e03003 	mvn	r3, r3
  137d8c:	e0022003 	and	r2, r2, r3
  137d90:	e51b3008 	ldr	r3, [fp, #-8]
  137d94:	e5832014 	str	r2, [r3, #20]

    /* Configure GPIO pin direction */
    if (Config->direction == kGPIO_DigitalInput)
  137d98:	e51b3010 	ldr	r3, [fp, #-16]
  137d9c:	e5933000 	ldr	r3, [r3]
  137da0:	e3530000 	cmp	r3, #0
  137da4:	1a000009 	bne	137dd0 <GPIO_PinInit+0x74>
    {
        base->GDIR &= ~(1U << pin);
  137da8:	e51b3008 	ldr	r3, [fp, #-8]
  137dac:	e5932004 	ldr	r2, [r3, #4]
  137db0:	e3a01001 	mov	r1, #1
  137db4:	e51b300c 	ldr	r3, [fp, #-12]
  137db8:	e1a03311 	lsl	r3, r1, r3
  137dbc:	e1e03003 	mvn	r3, r3
  137dc0:	e0022003 	and	r2, r2, r3
  137dc4:	e51b3008 	ldr	r3, [fp, #-8]
  137dc8:	e5832004 	str	r2, [r3, #4]
  137dcc:	ea00000d 	b	137e08 <GPIO_PinInit+0xac>
    }
    else
    {
        GPIO_WritePinOutput(base, pin, Config->outputLogic);
  137dd0:	e51b3010 	ldr	r3, [fp, #-16]
  137dd4:	e5d33004 	ldrb	r3, [r3, #4]
  137dd8:	e1a02003 	mov	r2, r3
  137ddc:	e51b100c 	ldr	r1, [fp, #-12]
  137de0:	e51b0008 	ldr	r0, [fp, #-8]
  137de4:	eb000010 	bl	137e2c <GPIO_WritePinOutput>
        base->GDIR |= (1U << pin);
  137de8:	e51b3008 	ldr	r3, [fp, #-8]
  137dec:	e5932004 	ldr	r2, [r3, #4]
  137df0:	e3a01001 	mov	r1, #1
  137df4:	e51b300c 	ldr	r3, [fp, #-12]
  137df8:	e1a03311 	lsl	r3, r1, r3
  137dfc:	e1822003 	orr	r2, r2, r3
  137e00:	e51b3008 	ldr	r3, [fp, #-8]
  137e04:	e5832004 	str	r2, [r3, #4]
    }

    /* Configure GPIO pin interrupt mode */
    GPIO_SetPinInterruptConfig(base, pin, Config->interruptMode);
  137e08:	e51b3010 	ldr	r3, [fp, #-16]
  137e0c:	e5933008 	ldr	r3, [r3, #8]
  137e10:	e1a02003 	mov	r2, r3
  137e14:	e51b100c 	ldr	r1, [fp, #-12]
  137e18:	e51b0008 	ldr	r0, [fp, #-8]
  137e1c:	eb00002c 	bl	137ed4 <GPIO_SetPinInterruptConfig>
}
  137e20:	e320f000 	nop	{0}
  137e24:	e24bd004 	sub	sp, fp, #4
  137e28:	e8bd8800 	pop	{fp, pc}

00137e2c <GPIO_WritePinOutput>:

void GPIO_WritePinOutput(GPIO_Type* base, uint32_t pin, uint8_t output)
{
  137e2c:	e92d4800 	push	{fp, lr}
  137e30:	e28db004 	add	fp, sp, #4
  137e34:	e24dd010 	sub	sp, sp, #16
  137e38:	e50b0008 	str	r0, [fp, #-8]
  137e3c:	e50b100c 	str	r1, [fp, #-12]
  137e40:	e1a03002 	mov	r3, r2
  137e44:	e54b300d 	strb	r3, [fp, #-13]
    assert(pin < 32);
  137e48:	e51b300c 	ldr	r3, [fp, #-12]
  137e4c:	e353001f 	cmp	r3, #31
  137e50:	9a000007 	bls	137e74 <GPIO_WritePinOutput+0x48>
  137e54:	e30a3408 	movw	r3, #41992	; 0xa408
  137e58:	e3403014 	movt	r3, #20
  137e5c:	e3a0206a 	mov	r2, #106	; 0x6a
  137e60:	e30a13d0 	movw	r1, #41936	; 0xa3d0
  137e64:	e3401014 	movt	r1, #20
  137e68:	e30a03fc 	movw	r0, #41980	; 0xa3fc
  137e6c:	e3400014 	movt	r0, #20
  137e70:	eb000445 	bl	138f8c <__assert_fail>
    if (output == 0U)
  137e74:	e55b300d 	ldrb	r3, [fp, #-13]
  137e78:	e3530000 	cmp	r3, #0
  137e7c:	1a000009 	bne	137ea8 <GPIO_WritePinOutput+0x7c>
    {
        base->DR &= ~(1U << pin);  /* Set pin output to low level.*/
  137e80:	e51b3008 	ldr	r3, [fp, #-8]
  137e84:	e5932000 	ldr	r2, [r3]
  137e88:	e3a01001 	mov	r1, #1
  137e8c:	e51b300c 	ldr	r3, [fp, #-12]
  137e90:	e1a03311 	lsl	r3, r1, r3
  137e94:	e1e03003 	mvn	r3, r3
  137e98:	e0022003 	and	r2, r2, r3
  137e9c:	e51b3008 	ldr	r3, [fp, #-8]
  137ea0:	e5832000 	str	r2, [r3]
    }
    else
    {
        base->DR |= (1U << pin);  /* Set pin output to high level.*/
    }
}
  137ea4:	ea000007 	b	137ec8 <GPIO_WritePinOutput+0x9c>
        base->DR |= (1U << pin);  /* Set pin output to high level.*/
  137ea8:	e51b3008 	ldr	r3, [fp, #-8]
  137eac:	e5932000 	ldr	r2, [r3]
  137eb0:	e3a01001 	mov	r1, #1
  137eb4:	e51b300c 	ldr	r3, [fp, #-12]
  137eb8:	e1a03311 	lsl	r3, r1, r3
  137ebc:	e1822003 	orr	r2, r2, r3
  137ec0:	e51b3008 	ldr	r3, [fp, #-8]
  137ec4:	e5832000 	str	r2, [r3]
}
  137ec8:	e320f000 	nop	{0}
  137ecc:	e24bd004 	sub	sp, fp, #4
  137ed0:	e8bd8800 	pop	{fp, pc}

00137ed4 <GPIO_SetPinInterruptConfig>:

void GPIO_SetPinInterruptConfig(GPIO_Type* base, uint32_t pin, gpio_interrupt_mode_t pinInterruptMode)
{
  137ed4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  137ed8:	e28db000 	add	fp, sp, #0
  137edc:	e24dd01c 	sub	sp, sp, #28
  137ee0:	e50b0010 	str	r0, [fp, #-16]
  137ee4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  137ee8:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    volatile uint32_t *icr;
    uint32_t icrShift;

    icrShift = pin;
  137eec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137ef0:	e50b300c 	str	r3, [fp, #-12]

    /* Register reset to default value */
    base->EDGE_SEL &= ~(1U << pin);
  137ef4:	e51b3010 	ldr	r3, [fp, #-16]
  137ef8:	e593201c 	ldr	r2, [r3, #28]
  137efc:	e3a01001 	mov	r1, #1
  137f00:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137f04:	e1a03311 	lsl	r3, r1, r3
  137f08:	e1e03003 	mvn	r3, r3
  137f0c:	e0022003 	and	r2, r2, r3
  137f10:	e51b3010 	ldr	r3, [fp, #-16]
  137f14:	e583201c 	str	r2, [r3, #28]

    if(pin < 16)
  137f18:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137f1c:	e353000f 	cmp	r3, #15
  137f20:	8a000003 	bhi	137f34 <GPIO_SetPinInterruptConfig+0x60>
    {
        icr = &(base->ICR1);
  137f24:	e51b3010 	ldr	r3, [fp, #-16]
  137f28:	e283300c 	add	r3, r3, #12
  137f2c:	e50b3008 	str	r3, [fp, #-8]
  137f30:	ea000005 	b	137f4c <GPIO_SetPinInterruptConfig+0x78>
    }
    else
    {
        icr = &(base->ICR2);
  137f34:	e51b3010 	ldr	r3, [fp, #-16]
  137f38:	e2833010 	add	r3, r3, #16
  137f3c:	e50b3008 	str	r3, [fp, #-8]
        icrShift -= 16;
  137f40:	e51b300c 	ldr	r3, [fp, #-12]
  137f44:	e2433010 	sub	r3, r3, #16
  137f48:	e50b300c 	str	r3, [fp, #-12]
    }
    switch(pinInterruptMode)
  137f4c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137f50:	e2433001 	sub	r3, r3, #1
  137f54:	e3530004 	cmp	r3, #4
  137f58:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  137f5c:	ea000042 	b	13806c <GPIO_SetPinInterruptConfig+0x198>
  137f60:	00137f74 	.word	0x00137f74
  137f64:	00137fa0 	.word	0x00137fa0
  137f68:	00137fe0 	.word	0x00137fe0
  137f6c:	00138020 	.word	0x00138020
  137f70:	00138048 	.word	0x00138048
    {
        case(kGPIO_IntLowLevel):
            *icr &= ~(3U << (2 * icrShift));
  137f74:	e51b3008 	ldr	r3, [fp, #-8]
  137f78:	e5932000 	ldr	r2, [r3]
  137f7c:	e51b300c 	ldr	r3, [fp, #-12]
  137f80:	e1a03083 	lsl	r3, r3, #1
  137f84:	e3a01003 	mov	r1, #3
  137f88:	e1a03311 	lsl	r3, r1, r3
  137f8c:	e1e03003 	mvn	r3, r3
  137f90:	e0022003 	and	r2, r2, r3
  137f94:	e51b3008 	ldr	r3, [fp, #-8]
  137f98:	e5832000 	str	r2, [r3]
            break;
  137f9c:	ea000033 	b	138070 <GPIO_SetPinInterruptConfig+0x19c>
        case(kGPIO_IntHighLevel):
            *icr = (*icr & (~(3U << (2 * icrShift)))) | (1U << (2 * icrShift));
  137fa0:	e51b3008 	ldr	r3, [fp, #-8]
  137fa4:	e5932000 	ldr	r2, [r3]
  137fa8:	e51b300c 	ldr	r3, [fp, #-12]
  137fac:	e1a03083 	lsl	r3, r3, #1
  137fb0:	e3a01003 	mov	r1, #3
  137fb4:	e1a03311 	lsl	r3, r1, r3
  137fb8:	e1e03003 	mvn	r3, r3
  137fbc:	e0022003 	and	r2, r2, r3
  137fc0:	e51b300c 	ldr	r3, [fp, #-12]
  137fc4:	e1a03083 	lsl	r3, r3, #1
  137fc8:	e3a01001 	mov	r1, #1
  137fcc:	e1a03311 	lsl	r3, r1, r3
  137fd0:	e1822003 	orr	r2, r2, r3
  137fd4:	e51b3008 	ldr	r3, [fp, #-8]
  137fd8:	e5832000 	str	r2, [r3]
            break;
  137fdc:	ea000023 	b	138070 <GPIO_SetPinInterruptConfig+0x19c>
        case(kGPIO_IntRisingEdge):
            *icr = (*icr & (~(3U << (2 * icrShift)))) | (2U << (2 * icrShift));
  137fe0:	e51b3008 	ldr	r3, [fp, #-8]
  137fe4:	e5932000 	ldr	r2, [r3]
  137fe8:	e51b300c 	ldr	r3, [fp, #-12]
  137fec:	e1a03083 	lsl	r3, r3, #1
  137ff0:	e3a01003 	mov	r1, #3
  137ff4:	e1a03311 	lsl	r3, r1, r3
  137ff8:	e1e03003 	mvn	r3, r3
  137ffc:	e0022003 	and	r2, r2, r3
  138000:	e51b300c 	ldr	r3, [fp, #-12]
  138004:	e1a03083 	lsl	r3, r3, #1
  138008:	e3a01002 	mov	r1, #2
  13800c:	e1a03311 	lsl	r3, r1, r3
  138010:	e1822003 	orr	r2, r2, r3
  138014:	e51b3008 	ldr	r3, [fp, #-8]
  138018:	e5832000 	str	r2, [r3]
            break;
  13801c:	ea000013 	b	138070 <GPIO_SetPinInterruptConfig+0x19c>
        case(kGPIO_IntFallingEdge):
            *icr |= (3U << (2 * icrShift));
  138020:	e51b3008 	ldr	r3, [fp, #-8]
  138024:	e5932000 	ldr	r2, [r3]
  138028:	e51b300c 	ldr	r3, [fp, #-12]
  13802c:	e1a03083 	lsl	r3, r3, #1
  138030:	e3a01003 	mov	r1, #3
  138034:	e1a03311 	lsl	r3, r1, r3
  138038:	e1822003 	orr	r2, r2, r3
  13803c:	e51b3008 	ldr	r3, [fp, #-8]
  138040:	e5832000 	str	r2, [r3]
            break;
  138044:	ea000009 	b	138070 <GPIO_SetPinInterruptConfig+0x19c>
        case(kGPIO_IntRisingOrFallingEdge):
            base->EDGE_SEL |= (1U << pin);
  138048:	e51b3010 	ldr	r3, [fp, #-16]
  13804c:	e593201c 	ldr	r2, [r3, #28]
  138050:	e3a01001 	mov	r1, #1
  138054:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  138058:	e1a03311 	lsl	r3, r1, r3
  13805c:	e1822003 	orr	r2, r2, r3
  138060:	e51b3010 	ldr	r3, [fp, #-16]
  138064:	e583201c 	str	r2, [r3, #28]
            break;
  138068:	ea000000 	b	138070 <GPIO_SetPinInterruptConfig+0x19c>
        default:
            break;
  13806c:	e320f000 	nop	{0}
    }
}
  138070:	e320f000 	nop	{0}
  138074:	e28bd000 	add	sp, fp, #0
  138078:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  13807c:	e12fff1e 	bx	lr

00138080 <ENET_ReadSMIData>:
{
  138080:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  138084:	e28db000 	add	fp, sp, #0
  138088:	e24dd00c 	sub	sp, sp, #12
  13808c:	e50b0008 	str	r0, [fp, #-8]
    return (uint32_t)((base->MMFR & ENET_MMFR_DATA_MASK) >> ENET_MMFR_DATA_SHIFT);
  138090:	e51b3008 	ldr	r3, [fp, #-8]
  138094:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  138098:	e6ff3073 	uxth	r3, r3
}
  13809c:	e1a00003 	mov	r0, r3
  1380a0:	e28bd000 	add	sp, fp, #0
  1380a4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1380a8:	e12fff1e 	bx	lr

001380ac <ENET_GetInterruptStatus>:
 * @param base  ENET peripheral base address.
 * @return The event status of the interrupt source. This is the logical OR of members
 *         of the enumeration :: enet_interrupt_enable_t.
 */
static inline uint32_t ENET_GetInterruptStatus(ENET_Type *base)
{
  1380ac:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1380b0:	e28db000 	add	fp, sp, #0
  1380b4:	e24dd00c 	sub	sp, sp, #12
  1380b8:	e50b0008 	str	r0, [fp, #-8]
    return base->EIR;
  1380bc:	e51b3008 	ldr	r3, [fp, #-8]
  1380c0:	e5933004 	ldr	r3, [r3, #4]
}
  1380c4:	e1a00003 	mov	r0, r3
  1380c8:	e28bd000 	add	sp, fp, #0
  1380cc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1380d0:	e12fff1e 	bx	lr

001380d4 <ENET_ClearInterruptStatus>:
 * @param base  ENET peripheral base address.
 * @param mask  ENET interrupt source to be cleared.
 * This is the logical OR of members of the enumeration :: enet_interrupt_enable_t.
 */
static inline void ENET_ClearInterruptStatus(ENET_Type *base, uint32_t mask)
{
  1380d4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1380d8:	e28db000 	add	fp, sp, #0
  1380dc:	e24dd00c 	sub	sp, sp, #12
  1380e0:	e50b0008 	str	r0, [fp, #-8]
  1380e4:	e50b100c 	str	r1, [fp, #-12]
    base->EIR = mask;
  1380e8:	e51b3008 	ldr	r3, [fp, #-8]
  1380ec:	e51b200c 	ldr	r2, [fp, #-12]
  1380f0:	e5832004 	str	r2, [r3, #4]
}
  1380f4:	e320f000 	nop	{0}
  1380f8:	e28bd000 	add	sp, fp, #0
  1380fc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  138100:	e12fff1e 	bx	lr

00138104 <phy_reset>:

/*******************************************************************************
 * Code
 ******************************************************************************/
status_t phy_reset(GPIO_Type *base,uint32_t pin)
{
  138104:	e92d4800 	push	{fp, lr}
  138108:	e28db004 	add	fp, sp, #4
  13810c:	e24dd018 	sub	sp, sp, #24
  138110:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  138114:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    GPIO_Type *gpio_base = NULL;
  138118:	e3a03000 	mov	r3, #0
  13811c:	e50b3008 	str	r3, [fp, #-8]
    gpio_pin_config_t sw_config =
  138120:	e3a03001 	mov	r3, #1
  138124:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  138128:	e3a03000 	mov	r3, #0
  13812c:	e54b3010 	strb	r3, [fp, #-16]
  138130:	e3a03000 	mov	r3, #0
  138134:	e50b300c 	str	r3, [fp, #-12]
        0,
        kGPIO_NoIntmode,
    };

    // gpio_base = (GPIO_Type *)rt_ioremap((void *)base,0x1000);
    gpio_base = (GPIO_Type *)ueth_remap((void *)base, UETH_REMAP, 0x1000);
  138138:	e3a02a01 	mov	r2, #4096	; 0x1000
  13813c:	e3a01001 	mov	r1, #1
  138140:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  138144:	ebff30da 	bl	1044b4 <ueth_remap>
  138148:	e50b0008 	str	r0, [fp, #-8]
    GPIO_PinInit(gpio_base, pin, &sw_config);
  13814c:	e24b3014 	sub	r3, fp, #20
  138150:	e1a02003 	mov	r2, r3
  138154:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  138158:	e51b0008 	ldr	r0, [fp, #-8]
  13815c:	ebfffefe 	bl	137d5c <GPIO_PinInit>
    GPIO_WritePinOutput(gpio_base,pin,0);
  138160:	e3a02000 	mov	r2, #0
  138164:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  138168:	e51b0008 	ldr	r0, [fp, #-8]
  13816c:	ebffff2e 	bl	137e2c <GPIO_WritePinOutput>
    rt_thread_mdelay(1);
  138170:	e3a00001 	mov	r0, #1
  138174:	ebff2740 	bl	101e7c <rt_thread_mdelay>
    GPIO_WritePinOutput(gpio_base,pin,1);
  138178:	e3a02001 	mov	r2, #1
  13817c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  138180:	e51b0008 	ldr	r0, [fp, #-8]
  138184:	ebffff28 	bl	137e2c <GPIO_WritePinOutput>

    return kStatus_Success;
  138188:	e3a03000 	mov	r3, #0

}
  13818c:	e1a00003 	mov	r0, r3
  138190:	e24bd004 	sub	sp, fp, #4
  138194:	e8bd8800 	pop	{fp, pc}

00138198 <PHY_StartNegotiation>:

status_t PHY_StartNegotiation(ENET_Type *base, uint32_t phyAddr)
{
  138198:	e92d4800 	push	{fp, lr}
  13819c:	e28db004 	add	fp, sp, #4
  1381a0:	e24dd018 	sub	sp, sp, #24
  1381a4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1381a8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    uint32_t counter = PHY_TIMEOUT_COUNT;
  1381ac:	e3e034fb 	mvn	r3, #-83886080	; 0xfb000000
  1381b0:	e50b3008 	str	r3, [fp, #-8]
    status_t result = kStatus_Success;
  1381b4:	e3a03000 	mov	r3, #0
  1381b8:	e50b3010 	str	r3, [fp, #-16]
    uint32_t bssReg;
    uint32_t timeDelay;

    result = PHY_Write(base, phyAddr, PHY_BASICCONTROL_REG, PHY_BCTL_RESET_MASK);
  1381bc:	e3a03902 	mov	r3, #32768	; 0x8000
  1381c0:	e3a02000 	mov	r2, #0
  1381c4:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1381c8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1381cc:	eb000071 	bl	138398 <PHY_Write>
  1381d0:	e50b0010 	str	r0, [fp, #-16]
    if (result == kStatus_Success)
  1381d4:	e51b3010 	ldr	r3, [fp, #-16]
  1381d8:	e3530000 	cmp	r3, #0
  1381dc:	1a000038 	bne	1382c4 <PHY_StartNegotiation+0x12c>
        {
            return result;
        }
#endif  /* FSL_FEATURE_PHYKSZ8081_USE_RMII50M_MODE */
        /* Set the negotiation. */
        result = PHY_Write(base, phyAddr, PHY_AUTONEG_ADVERTISE_REG,
  1381e0:	e30031e1 	movw	r3, #481	; 0x1e1
  1381e4:	e3a02004 	mov	r2, #4
  1381e8:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1381ec:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1381f0:	eb000068 	bl	138398 <PHY_Write>
  1381f4:	e50b0010 	str	r0, [fp, #-16]
                           (PHY_100BASETX_FULLDUPLEX_MASK | PHY_100BASETX_HALFDUPLEX_MASK |
                            PHY_10BASETX_FULLDUPLEX_MASK | PHY_10BASETX_HALFDUPLEX_MASK | 0x1U));
        if (result == kStatus_Success)
  1381f8:	e51b3010 	ldr	r3, [fp, #-16]
  1381fc:	e3530000 	cmp	r3, #0
  138200:	1a00002f 	bne	1382c4 <PHY_StartNegotiation+0x12c>
        {
            result = PHY_Write(base, phyAddr, PHY_BASICCONTROL_REG,
  138204:	e3a03c12 	mov	r3, #4608	; 0x1200
  138208:	e3a02000 	mov	r2, #0
  13820c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  138210:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  138214:	eb00005f 	bl	138398 <PHY_Write>
  138218:	e50b0010 	str	r0, [fp, #-16]
                               (PHY_BCTL_AUTONEG_MASK | PHY_BCTL_RESTART_AUTONEG_MASK));
            if (result == kStatus_Success)
  13821c:	e51b3010 	ldr	r3, [fp, #-16]
  138220:	e3530000 	cmp	r3, #0
  138224:	1a000026 	bne	1382c4 <PHY_StartNegotiation+0x12c>
            {
                /* Check auto negotiation complete. */
                while (counter --)
  138228:	ea000020 	b	1382b0 <PHY_StartNegotiation+0x118>
                {
                    result = PHY_Read(base, phyAddr, PHY_BASICSTATUS_REG, &bssReg);
  13822c:	e24b3014 	sub	r3, fp, #20
  138230:	e3a02001 	mov	r2, #1
  138234:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  138238:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  13823c:	eb000083 	bl	138450 <PHY_Read>
  138240:	e50b0010 	str	r0, [fp, #-16]
                    if ( result == kStatus_Success)
  138244:	e51b3010 	ldr	r3, [fp, #-16]
  138248:	e3530000 	cmp	r3, #0
  13824c:	1a000010 	bne	138294 <PHY_StartNegotiation+0xfc>
                    {
                        if ((bssReg & PHY_BSTATUS_AUTONEGCOMP_MASK) != 0)
  138250:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  138254:	e2033020 	and	r3, r3, #32
  138258:	e3530000 	cmp	r3, #0
  13825c:	0a00000c 	beq	138294 <PHY_StartNegotiation+0xfc>
                        {
                            /* Wait a moment for Phy status stable. */
                            for (timeDelay = 0; timeDelay < PHY_TIMEOUT_COUNT; timeDelay ++)
  138260:	e3a03000 	mov	r3, #0
  138264:	e50b300c 	str	r3, [fp, #-12]
  138268:	ea000003 	b	13827c <PHY_StartNegotiation+0xe4>
                            {
                                __ASM("nop");
  13826c:	e320f000 	nop	{0}
                            for (timeDelay = 0; timeDelay < PHY_TIMEOUT_COUNT; timeDelay ++)
  138270:	e51b300c 	ldr	r3, [fp, #-12]
  138274:	e2833001 	add	r3, r3, #1
  138278:	e50b300c 	str	r3, [fp, #-12]
  13827c:	e51b200c 	ldr	r2, [fp, #-12]
  138280:	e30f3ffe 	movw	r3, #65534	; 0xfffe
  138284:	e34034ff 	movt	r3, #1279	; 0x4ff
  138288:	e1520003 	cmp	r2, r3
  13828c:	9afffff6 	bls	13826c <PHY_StartNegotiation+0xd4>
                            }
                            break;
  138290:	ea00000b 	b	1382c4 <PHY_StartNegotiation+0x12c>
                        }
                    }
                    // rt_thread_delay(PHY_NEGOTIATION_DELAY);
                    rt_thread_mdelay(PHY_NEGOTIATION_DELAY);
  138294:	e3a00064 	mov	r0, #100	; 0x64
  138298:	ebff26f7 	bl	101e7c <rt_thread_mdelay>
                    if (!counter)
  13829c:	e51b3008 	ldr	r3, [fp, #-8]
  1382a0:	e3530000 	cmp	r3, #0
  1382a4:	1a000001 	bne	1382b0 <PHY_StartNegotiation+0x118>
                    {
                        return kStatus_PHY_AutoNegotiateFail;
  1382a8:	e3013006 	movw	r3, #4102	; 0x1006
  1382ac:	ea000005 	b	1382c8 <PHY_StartNegotiation+0x130>
                while (counter --)
  1382b0:	e51b3008 	ldr	r3, [fp, #-8]
  1382b4:	e2432001 	sub	r2, r3, #1
  1382b8:	e50b2008 	str	r2, [fp, #-8]
  1382bc:	e3530000 	cmp	r3, #0
  1382c0:	1affffd9 	bne	13822c <PHY_StartNegotiation+0x94>
                    }
                }
            }
        }
    }
    return kStatus_Success;
  1382c4:	e3a03000 	mov	r3, #0
}
  1382c8:	e1a00003 	mov	r0, r3
  1382cc:	e24bd004 	sub	sp, fp, #4
  1382d0:	e8bd8800 	pop	{fp, pc}

001382d4 <PHY_Init>:

status_t PHY_Init(ENET_Type *base, uint32_t phyAddr, uint32_t srcClock_Hz,uint32_t phy_id)
{
  1382d4:	e92d4800 	push	{fp, lr}
  1382d8:	e28db004 	add	fp, sp, #4
  1382dc:	e24dd020 	sub	sp, sp, #32
  1382e0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1382e4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  1382e8:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  1382ec:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    uint32_t counter = PHY_TIMEOUT_COUNT;
  1382f0:	e3e034fb 	mvn	r3, #-83886080	; 0xfb000000
  1382f4:	e50b3008 	str	r3, [fp, #-8]
    uint32_t idReg = 0;
  1382f8:	e3a03000 	mov	r3, #0
  1382fc:	e50b3010 	str	r3, [fp, #-16]
    status_t result = kStatus_Success;
  138300:	e3a03000 	mov	r3, #0
  138304:	e50b300c 	str	r3, [fp, #-12]

    ENET_SetSMI(base, srcClock_Hz, false);
  138308:	e3a02000 	mov	r2, #0
  13830c:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  138310:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  138314:	ebfffa3c 	bl	136c0c <ENET_SetSMI>
    PHY_Read(base, phyAddr, PHY_ID1_REG, &idReg);
  138318:	e24b3010 	sub	r3, fp, #16
  13831c:	e3a02002 	mov	r2, #2
  138320:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  138324:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  138328:	eb000048 	bl	138450 <PHY_Read>
    while ((idReg != phy_id) && (counter != 0))
  13832c:	ea000007 	b	138350 <PHY_Init+0x7c>
    {
        PHY_Read(base, phyAddr, PHY_ID1_REG, &idReg);
  138330:	e24b3010 	sub	r3, fp, #16
  138334:	e3a02002 	mov	r2, #2
  138338:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  13833c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  138340:	eb000042 	bl	138450 <PHY_Read>
        counter --;
  138344:	e51b3008 	ldr	r3, [fp, #-8]
  138348:	e2433001 	sub	r3, r3, #1
  13834c:	e50b3008 	str	r3, [fp, #-8]
    while ((idReg != phy_id) && (counter != 0))
  138350:	e51b3010 	ldr	r3, [fp, #-16]
  138354:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  138358:	e1520003 	cmp	r2, r3
  13835c:	0a000002 	beq	13836c <PHY_Init+0x98>
  138360:	e51b3008 	ldr	r3, [fp, #-8]
  138364:	e3530000 	cmp	r3, #0
  138368:	1afffff0 	bne	138330 <PHY_Init+0x5c>
    }
    if (!counter)
  13836c:	e51b3008 	ldr	r3, [fp, #-8]
  138370:	e3530000 	cmp	r3, #0
  138374:	1a000001 	bne	138380 <PHY_Init+0xac>
    {
        return kStatus_Fail;
  138378:	e3a03001 	mov	r3, #1
  13837c:	ea000002 	b	13838c <PHY_Init+0xb8>
    }
    /* Reset PHY. */
    counter = PHY_TIMEOUT_COUNT;
  138380:	e3e034fb 	mvn	r3, #-83886080	; 0xfb000000
  138384:	e50b3008 	str	r3, [fp, #-8]
    return result;
  138388:	e51b300c 	ldr	r3, [fp, #-12]
}
  13838c:	e1a00003 	mov	r0, r3
  138390:	e24bd004 	sub	sp, fp, #4
  138394:	e8bd8800 	pop	{fp, pc}

00138398 <PHY_Write>:

status_t PHY_Write(ENET_Type *base, uint32_t phyAddr, uint32_t phyReg, uint32_t data)
{
  138398:	e92d4800 	push	{fp, lr}
  13839c:	e28db004 	add	fp, sp, #4
  1383a0:	e24dd020 	sub	sp, sp, #32
  1383a4:	e50b0010 	str	r0, [fp, #-16]
  1383a8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1383ac:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  1383b0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    uint32_t counter;

    /* Clear the SMI interrupt event. */
    ENET_ClearInterruptStatus(base, ENET_EIR_MII_MASK);
  1383b4:	e3a01502 	mov	r1, #8388608	; 0x800000
  1383b8:	e51b0010 	ldr	r0, [fp, #-16]
  1383bc:	ebffff44 	bl	1380d4 <ENET_ClearInterruptStatus>

    /* Starts a SMI write command. */
    ENET_StartSMIWrite(base, phyAddr, phyReg, kENET_MiiWriteValidFrame, data);
  1383c0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1383c4:	e58d3000 	str	r3, [sp]
  1383c8:	e3a03001 	mov	r3, #1
  1383cc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1383d0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1383d4:	e51b0010 	ldr	r0, [fp, #-16]
  1383d8:	ebfffa4a 	bl	136d08 <ENET_StartSMIWrite>

    /* Wait for SMI complete. */
    for (counter = PHY_TIMEOUT_COUNT; counter > 0; counter--)
  1383dc:	e3e034fb 	mvn	r3, #-83886080	; 0xfb000000
  1383e0:	e50b3008 	str	r3, [fp, #-8]
  1383e4:	ea000008 	b	13840c <PHY_Write+0x74>
    {
        if (ENET_GetInterruptStatus(base) & ENET_EIR_MII_MASK)
  1383e8:	e51b0010 	ldr	r0, [fp, #-16]
  1383ec:	ebffff2e 	bl	1380ac <ENET_GetInterruptStatus>
  1383f0:	e1a03000 	mov	r3, r0
  1383f4:	e2033502 	and	r3, r3, #8388608	; 0x800000
  1383f8:	e3530000 	cmp	r3, #0
  1383fc:	1a000006 	bne	13841c <PHY_Write+0x84>
    for (counter = PHY_TIMEOUT_COUNT; counter > 0; counter--)
  138400:	e51b3008 	ldr	r3, [fp, #-8]
  138404:	e2433001 	sub	r3, r3, #1
  138408:	e50b3008 	str	r3, [fp, #-8]
  13840c:	e51b3008 	ldr	r3, [fp, #-8]
  138410:	e3530000 	cmp	r3, #0
  138414:	1afffff3 	bne	1383e8 <PHY_Write+0x50>
  138418:	ea000000 	b	138420 <PHY_Write+0x88>
        {
            break;
  13841c:	e320f000 	nop	{0}
        }
    }

    /* Check for timeout. */
    if (!counter)
  138420:	e51b3008 	ldr	r3, [fp, #-8]
  138424:	e3530000 	cmp	r3, #0
  138428:	1a000001 	bne	138434 <PHY_Write+0x9c>
    {
        return kStatus_PHY_SMIVisitTimeout;
  13842c:	e3013005 	movw	r3, #4101	; 0x1005
  138430:	ea000003 	b	138444 <PHY_Write+0xac>
    }

    /* Clear MII interrupt event. */
    ENET_ClearInterruptStatus(base, ENET_EIR_MII_MASK);
  138434:	e3a01502 	mov	r1, #8388608	; 0x800000
  138438:	e51b0010 	ldr	r0, [fp, #-16]
  13843c:	ebffff24 	bl	1380d4 <ENET_ClearInterruptStatus>

    return kStatus_Success;
  138440:	e3a03000 	mov	r3, #0
}
  138444:	e1a00003 	mov	r0, r3
  138448:	e24bd004 	sub	sp, fp, #4
  13844c:	e8bd8800 	pop	{fp, pc}

00138450 <PHY_Read>:

status_t PHY_Read(ENET_Type *base, uint32_t phyAddr, uint32_t phyReg, uint32_t *dataPtr)
{
  138450:	e92d4800 	push	{fp, lr}
  138454:	e28db004 	add	fp, sp, #4
  138458:	e24dd018 	sub	sp, sp, #24
  13845c:	e50b0010 	str	r0, [fp, #-16]
  138460:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  138464:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  138468:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(dataPtr);
  13846c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  138470:	e3530000 	cmp	r3, #0
  138474:	1a000005 	bne	138490 <PHY_Read+0x40>
  138478:	e3a020d0 	mov	r2, #208	; 0xd0
  13847c:	e30a1434 	movw	r1, #42036	; 0xa434
  138480:	e3401014 	movt	r1, #20
  138484:	e30a041c 	movw	r0, #42012	; 0xa41c
  138488:	e3400014 	movt	r0, #20
  13848c:	ebff2c41 	bl	103598 <rt_assert_handler>

    uint32_t counter;

    /* Clear the MII interrupt event. */
    ENET_ClearInterruptStatus(base, ENET_EIR_MII_MASK);
  138490:	e3a01502 	mov	r1, #8388608	; 0x800000
  138494:	e51b0010 	ldr	r0, [fp, #-16]
  138498:	ebffff0d 	bl	1380d4 <ENET_ClearInterruptStatus>

    /* Starts a SMI read command operation. */
    ENET_StartSMIRead(base, phyAddr, phyReg, kENET_MiiReadValidFrame);
  13849c:	e3a03002 	mov	r3, #2
  1384a0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1384a4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1384a8:	e51b0010 	ldr	r0, [fp, #-16]
  1384ac:	ebfffa36 	bl	136d8c <ENET_StartSMIRead>

    /* Wait for MII complete. */
    for (counter = PHY_TIMEOUT_COUNT; counter > 0; counter--)
  1384b0:	e3e034fb 	mvn	r3, #-83886080	; 0xfb000000
  1384b4:	e50b3008 	str	r3, [fp, #-8]
  1384b8:	ea000008 	b	1384e0 <PHY_Read+0x90>
    {
        if (ENET_GetInterruptStatus(base) & ENET_EIR_MII_MASK)
  1384bc:	e51b0010 	ldr	r0, [fp, #-16]
  1384c0:	ebfffef9 	bl	1380ac <ENET_GetInterruptStatus>
  1384c4:	e1a03000 	mov	r3, r0
  1384c8:	e2033502 	and	r3, r3, #8388608	; 0x800000
  1384cc:	e3530000 	cmp	r3, #0
  1384d0:	1a000006 	bne	1384f0 <PHY_Read+0xa0>
    for (counter = PHY_TIMEOUT_COUNT; counter > 0; counter--)
  1384d4:	e51b3008 	ldr	r3, [fp, #-8]
  1384d8:	e2433001 	sub	r3, r3, #1
  1384dc:	e50b3008 	str	r3, [fp, #-8]
  1384e0:	e51b3008 	ldr	r3, [fp, #-8]
  1384e4:	e3530000 	cmp	r3, #0
  1384e8:	1afffff3 	bne	1384bc <PHY_Read+0x6c>
  1384ec:	ea000000 	b	1384f4 <PHY_Read+0xa4>
        {
            break;
  1384f0:	e320f000 	nop	{0}
        }
    }

    /* Check for timeout. */
    if (!counter)
  1384f4:	e51b3008 	ldr	r3, [fp, #-8]
  1384f8:	e3530000 	cmp	r3, #0
  1384fc:	1a000001 	bne	138508 <PHY_Read+0xb8>
    {
        return kStatus_PHY_SMIVisitTimeout;
  138500:	e3013005 	movw	r3, #4101	; 0x1005
  138504:	ea000008 	b	13852c <PHY_Read+0xdc>
    }

    /* Get data from MII register. */
    *dataPtr = ENET_ReadSMIData(base);
  138508:	e51b0010 	ldr	r0, [fp, #-16]
  13850c:	ebfffedb 	bl	138080 <ENET_ReadSMIData>
  138510:	e1a02000 	mov	r2, r0
  138514:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  138518:	e5832000 	str	r2, [r3]

    /* Clear MII interrupt event. */
    ENET_ClearInterruptStatus(base, ENET_EIR_MII_MASK);
  13851c:	e3a01502 	mov	r1, #8388608	; 0x800000
  138520:	e51b0010 	ldr	r0, [fp, #-16]
  138524:	ebfffeea 	bl	1380d4 <ENET_ClearInterruptStatus>

    return kStatus_Success;
  138528:	e3a03000 	mov	r3, #0
}
  13852c:	e1a00003 	mov	r0, r3
  138530:	e24bd004 	sub	sp, fp, #4
  138534:	e8bd8800 	pop	{fp, pc}

00138538 <PHY_EnableLoopback>:

status_t PHY_EnableLoopback(ENET_Type *base, uint32_t phyAddr, phy_loop_t mode, bool enable)
{
  138538:	e92d4800 	push	{fp, lr}
  13853c:	e28db004 	add	fp, sp, #4
  138540:	e24dd018 	sub	sp, sp, #24
  138544:	e50b0010 	str	r0, [fp, #-16]
  138548:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  13854c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  138550:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
    status_t result;
    uint32_t data = 0;
  138554:	e3a03000 	mov	r3, #0
  138558:	e50b300c 	str	r3, [fp, #-12]

    /* Set the loop mode. */
    if (enable)
  13855c:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
  138560:	e3530000 	cmp	r3, #0
  138564:	0a000024 	beq	1385fc <PHY_EnableLoopback+0xc4>
    {
        if (mode == kPHY_LocalLoop)
  138568:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  13856c:	e3530000 	cmp	r3, #0
  138570:	1a000010 	bne	1385b8 <PHY_EnableLoopback+0x80>
        {
            /* First read the current status in control register. */
            result = PHY_Read(base, phyAddr, PHY_BASICCONTROL_REG, &data);
  138574:	e24b300c 	sub	r3, fp, #12
  138578:	e3a02000 	mov	r2, #0
  13857c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  138580:	e51b0010 	ldr	r0, [fp, #-16]
  138584:	ebffffb1 	bl	138450 <PHY_Read>
  138588:	e50b0008 	str	r0, [fp, #-8]
            if (result == kStatus_Success)
  13858c:	e51b3008 	ldr	r3, [fp, #-8]
  138590:	e3530000 	cmp	r3, #0
  138594:	1a00003d 	bne	138690 <PHY_EnableLoopback+0x158>
            {
                return PHY_Write(base, phyAddr, PHY_BASICCONTROL_REG, (data | PHY_BCTL_LOOP_MASK));
  138598:	e51b300c 	ldr	r3, [fp, #-12]
  13859c:	e3833901 	orr	r3, r3, #16384	; 0x4000
  1385a0:	e3a02000 	mov	r2, #0
  1385a4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1385a8:	e51b0010 	ldr	r0, [fp, #-16]
  1385ac:	ebffff79 	bl	138398 <PHY_Write>
  1385b0:	e1a03000 	mov	r3, r0
  1385b4:	ea000036 	b	138694 <PHY_EnableLoopback+0x15c>
            }
        }
        else
        {
            /* First read the current status in control register. */
            result = PHY_Read(base, phyAddr, PHY_CONTROL2_REG, &data);
  1385b8:	e24b300c 	sub	r3, fp, #12
  1385bc:	e3a0201f 	mov	r2, #31
  1385c0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1385c4:	e51b0010 	ldr	r0, [fp, #-16]
  1385c8:	ebffffa0 	bl	138450 <PHY_Read>
  1385cc:	e50b0008 	str	r0, [fp, #-8]
            if (result == kStatus_Success)
  1385d0:	e51b3008 	ldr	r3, [fp, #-8]
  1385d4:	e3530000 	cmp	r3, #0
  1385d8:	1a00002c 	bne	138690 <PHY_EnableLoopback+0x158>
            {
                return PHY_Write(base, phyAddr, PHY_CONTROL2_REG, (data | PHY_CTL2_REMOTELOOP_MASK));
  1385dc:	e51b300c 	ldr	r3, [fp, #-12]
  1385e0:	e3833004 	orr	r3, r3, #4
  1385e4:	e3a0201f 	mov	r2, #31
  1385e8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1385ec:	e51b0010 	ldr	r0, [fp, #-16]
  1385f0:	ebffff68 	bl	138398 <PHY_Write>
  1385f4:	e1a03000 	mov	r3, r0
  1385f8:	ea000025 	b	138694 <PHY_EnableLoopback+0x15c>
        }
    }
    else
    {
        /* Disable the loop mode. */
        if (mode == kPHY_LocalLoop)
  1385fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  138600:	e3530000 	cmp	r3, #0
  138604:	1a000010 	bne	13864c <PHY_EnableLoopback+0x114>
        {
            /* First read the current status in the basic control register. */
            result = PHY_Read(base, phyAddr, PHY_BASICCONTROL_REG, &data);
  138608:	e24b300c 	sub	r3, fp, #12
  13860c:	e3a02000 	mov	r2, #0
  138610:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  138614:	e51b0010 	ldr	r0, [fp, #-16]
  138618:	ebffff8c 	bl	138450 <PHY_Read>
  13861c:	e50b0008 	str	r0, [fp, #-8]
            if (result == kStatus_Success)
  138620:	e51b3008 	ldr	r3, [fp, #-8]
  138624:	e3530000 	cmp	r3, #0
  138628:	1a000018 	bne	138690 <PHY_EnableLoopback+0x158>
            {
                return PHY_Write(base, phyAddr, PHY_BASICCONTROL_REG, (data & ~PHY_BCTL_LOOP_MASK));
  13862c:	e51b300c 	ldr	r3, [fp, #-12]
  138630:	e3c33901 	bic	r3, r3, #16384	; 0x4000
  138634:	e3a02000 	mov	r2, #0
  138638:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  13863c:	e51b0010 	ldr	r0, [fp, #-16]
  138640:	ebffff54 	bl	138398 <PHY_Write>
  138644:	e1a03000 	mov	r3, r0
  138648:	ea000011 	b	138694 <PHY_EnableLoopback+0x15c>
            }
        }
        else
        {
            /* First read the current status in control one register. */
            result = PHY_Read(base, phyAddr, PHY_CONTROL2_REG, &data);
  13864c:	e24b300c 	sub	r3, fp, #12
  138650:	e3a0201f 	mov	r2, #31
  138654:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  138658:	e51b0010 	ldr	r0, [fp, #-16]
  13865c:	ebffff7b 	bl	138450 <PHY_Read>
  138660:	e50b0008 	str	r0, [fp, #-8]
            if (result == kStatus_Success)
  138664:	e51b3008 	ldr	r3, [fp, #-8]
  138668:	e3530000 	cmp	r3, #0
  13866c:	1a000007 	bne	138690 <PHY_EnableLoopback+0x158>
            {
                return PHY_Write(base, phyAddr, PHY_CONTROL2_REG, (data & ~PHY_CTL2_REMOTELOOP_MASK));
  138670:	e51b300c 	ldr	r3, [fp, #-12]
  138674:	e3c33004 	bic	r3, r3, #4
  138678:	e3a0201f 	mov	r2, #31
  13867c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  138680:	e51b0010 	ldr	r0, [fp, #-16]
  138684:	ebffff43 	bl	138398 <PHY_Write>
  138688:	e1a03000 	mov	r3, r0
  13868c:	ea000000 	b	138694 <PHY_EnableLoopback+0x15c>
            }
        }
    }
    return result;
  138690:	e51b3008 	ldr	r3, [fp, #-8]
}
  138694:	e1a00003 	mov	r0, r3
  138698:	e24bd004 	sub	sp, fp, #4
  13869c:	e8bd8800 	pop	{fp, pc}

001386a0 <PHY_GetLinkStatus>:

status_t PHY_GetLinkStatus(ENET_Type *base, uint32_t phyAddr, bool *status)
{
  1386a0:	e92d4800 	push	{fp, lr}
  1386a4:	e28db004 	add	fp, sp, #4
  1386a8:	e24dd018 	sub	sp, sp, #24
  1386ac:	e50b0010 	str	r0, [fp, #-16]
  1386b0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1386b4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    RT_ASSERT(status);
  1386b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1386bc:	e3530000 	cmp	r3, #0
  1386c0:	1a000005 	bne	1386dc <PHY_GetLinkStatus+0x3c>
  1386c4:	e3a02f4a 	mov	r2, #296	; 0x128
  1386c8:	e30a1440 	movw	r1, #42048	; 0xa440
  1386cc:	e3401014 	movt	r1, #20
  1386d0:	e30a0424 	movw	r0, #42020	; 0xa424
  1386d4:	e3400014 	movt	r0, #20
  1386d8:	ebff2bae 	bl	103598 <rt_assert_handler>

    status_t result = kStatus_Success;
  1386dc:	e3a03000 	mov	r3, #0
  1386e0:	e50b3008 	str	r3, [fp, #-8]
    uint32_t data;

    /* Read the basic status register. */
    result = PHY_Read(base, phyAddr, PHY_BASICSTATUS_REG, &data);
  1386e4:	e24b300c 	sub	r3, fp, #12
  1386e8:	e3a02001 	mov	r2, #1
  1386ec:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1386f0:	e51b0010 	ldr	r0, [fp, #-16]
  1386f4:	ebffff55 	bl	138450 <PHY_Read>
  1386f8:	e50b0008 	str	r0, [fp, #-8]
    if (result == kStatus_Success)
  1386fc:	e51b3008 	ldr	r3, [fp, #-8]
  138700:	e3530000 	cmp	r3, #0
  138704:	1a00000a 	bne	138734 <PHY_GetLinkStatus+0x94>
    {
        if (!(PHY_BSTATUS_LINKSTATUS_MASK & data))
  138708:	e51b300c 	ldr	r3, [fp, #-12]
  13870c:	e2033004 	and	r3, r3, #4
  138710:	e3530000 	cmp	r3, #0
  138714:	1a000003 	bne	138728 <PHY_GetLinkStatus+0x88>
        {
            /* link down. */
            *status = false;
  138718:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  13871c:	e3a02000 	mov	r2, #0
  138720:	e5c32000 	strb	r2, [r3]
  138724:	ea000002 	b	138734 <PHY_GetLinkStatus+0x94>
        }
        else
        {
            /* link up. */
            *status = true;
  138728:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  13872c:	e3a02001 	mov	r2, #1
  138730:	e5c32000 	strb	r2, [r3]
        }
    }
    return result;
  138734:	e51b3008 	ldr	r3, [fp, #-8]
}
  138738:	e1a00003 	mov	r0, r3
  13873c:	e24bd004 	sub	sp, fp, #4
  138740:	e8bd8800 	pop	{fp, pc}

00138744 <PHY_GetLinkSpeedDuplex>:

status_t PHY_GetLinkSpeedDuplex(ENET_Type *base, uint32_t phyAddr, phy_speed_t *speed, phy_duplex_t *duplex)
{
  138744:	e92d4800 	push	{fp, lr}
  138748:	e28db004 	add	fp, sp, #4
  13874c:	e24dd020 	sub	sp, sp, #32
  138750:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  138754:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  138758:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  13875c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    RT_ASSERT(duplex);
  138760:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  138764:	e3530000 	cmp	r3, #0
  138768:	1a000005 	bne	138784 <PHY_GetLinkSpeedDuplex+0x40>
  13876c:	e3002141 	movw	r2, #321	; 0x141
  138770:	e30a1454 	movw	r1, #42068	; 0xa454
  138774:	e3401014 	movt	r1, #20
  138778:	e30a042c 	movw	r0, #42028	; 0xa42c
  13877c:	e3400014 	movt	r0, #20
  138780:	ebff2b84 	bl	103598 <rt_assert_handler>

    status_t result = kStatus_Success;
  138784:	e3a03000 	mov	r3, #0
  138788:	e50b3008 	str	r3, [fp, #-8]
    uint32_t data, ctlReg;

    /* Read the control two register. */

    result = PHY_Read(base, phyAddr, 31, &ctlReg);
  13878c:	e24b3010 	sub	r3, fp, #16
  138790:	e3a0201f 	mov	r2, #31
  138794:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  138798:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  13879c:	ebffff2b 	bl	138450 <PHY_Read>
  1387a0:	e50b0008 	str	r0, [fp, #-8]

    data = ((ctlReg>>2) & 0x7);
  1387a4:	e51b3010 	ldr	r3, [fp, #-16]
  1387a8:	e1a03123 	lsr	r3, r3, #2
  1387ac:	e2033007 	and	r3, r3, #7
  1387b0:	e50b300c 	str	r3, [fp, #-12]
    switch (data)
  1387b4:	e51b300c 	ldr	r3, [fp, #-12]
  1387b8:	e2433001 	sub	r3, r3, #1
  1387bc:	e3530005 	cmp	r3, #5
  1387c0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  1387c4:	ea000021 	b	138850 <PHY_GetLinkSpeedDuplex+0x10c>
  1387c8:	001387e0 	.word	0x001387e0
  1387cc:	00138818 	.word	0x00138818
  1387d0:	00138850 	.word	0x00138850
  1387d4:	00138850 	.word	0x00138850
  1387d8:	001387fc 	.word	0x001387fc
  1387dc:	00138834 	.word	0x00138834
    {
        case 1:
            *speed = kPHY_Speed10M;
  1387e0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1387e4:	e3a02000 	mov	r2, #0
  1387e8:	e5832000 	str	r2, [r3]
            *duplex = kPHY_HalfDuplex;
  1387ec:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1387f0:	e3a02000 	mov	r2, #0
  1387f4:	e5832000 	str	r2, [r3]
            break;
  1387f8:	ea00001a 	b	138868 <PHY_GetLinkSpeedDuplex+0x124>
        case 5:
            *speed = kPHY_Speed10M;
  1387fc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  138800:	e3a02000 	mov	r2, #0
  138804:	e5832000 	str	r2, [r3]
            *duplex = kPHY_FullDuplex;
  138808:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  13880c:	e3a02001 	mov	r2, #1
  138810:	e5832000 	str	r2, [r3]
            break;
  138814:	ea000013 	b	138868 <PHY_GetLinkSpeedDuplex+0x124>
        case 2:
            *speed = kPHY_Speed100M;
  138818:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  13881c:	e3a02001 	mov	r2, #1
  138820:	e5832000 	str	r2, [r3]
            *duplex = kPHY_HalfDuplex;
  138824:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  138828:	e3a02000 	mov	r2, #0
  13882c:	e5832000 	str	r2, [r3]
            break;
  138830:	ea00000c 	b	138868 <PHY_GetLinkSpeedDuplex+0x124>
        case 6:
            *speed = kPHY_Speed100M;
  138834:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  138838:	e3a02001 	mov	r2, #1
  13883c:	e5832000 	str	r2, [r3]
            *duplex = kPHY_FullDuplex;
  138840:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  138844:	e3a02001 	mov	r2, #1
  138848:	e5832000 	str	r2, [r3]
            break;
  13884c:	ea000005 	b	138868 <PHY_GetLinkSpeedDuplex+0x124>
        default:
            *speed = kPHY_Speed100M;
  138850:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  138854:	e3a02001 	mov	r2, #1
  138858:	e5832000 	str	r2, [r3]
            *duplex = kPHY_FullDuplex;
  13885c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  138860:	e3a02001 	mov	r2, #1
  138864:	e5832000 	str	r2, [r3]
    }

    return result;
  138868:	e51b3008 	ldr	r3, [fp, #-8]
}
  13886c:	e1a00003 	mov	r0, r3
  138870:	e24bd004 	sub	sp, fp, #4
  138874:	e8bd8800 	pop	{fp, pc}

00138878 <__udivsi3>:
  138878:	e2512001 	subs	r2, r1, #1
  13887c:	012fff1e 	bxeq	lr
  138880:	3a000074 	bcc	138a58 <__udivsi3+0x1e0>
  138884:	e1500001 	cmp	r0, r1
  138888:	9a00006b 	bls	138a3c <__udivsi3+0x1c4>
  13888c:	e1110002 	tst	r1, r2
  138890:	0a00006c 	beq	138a48 <__udivsi3+0x1d0>
  138894:	e16f3f10 	clz	r3, r0
  138898:	e16f2f11 	clz	r2, r1
  13889c:	e0423003 	sub	r3, r2, r3
  1388a0:	e273301f 	rsbs	r3, r3, #31
  1388a4:	10833083 	addne	r3, r3, r3, lsl #1
  1388a8:	e3a02000 	mov	r2, #0
  1388ac:	108ff103 	addne	pc, pc, r3, lsl #2
  1388b0:	e1a00000 	nop			; (mov r0, r0)
  1388b4:	e1500f81 	cmp	r0, r1, lsl #31
  1388b8:	e0a22002 	adc	r2, r2, r2
  1388bc:	20400f81 	subcs	r0, r0, r1, lsl #31
  1388c0:	e1500f01 	cmp	r0, r1, lsl #30
  1388c4:	e0a22002 	adc	r2, r2, r2
  1388c8:	20400f01 	subcs	r0, r0, r1, lsl #30
  1388cc:	e1500e81 	cmp	r0, r1, lsl #29
  1388d0:	e0a22002 	adc	r2, r2, r2
  1388d4:	20400e81 	subcs	r0, r0, r1, lsl #29
  1388d8:	e1500e01 	cmp	r0, r1, lsl #28
  1388dc:	e0a22002 	adc	r2, r2, r2
  1388e0:	20400e01 	subcs	r0, r0, r1, lsl #28
  1388e4:	e1500d81 	cmp	r0, r1, lsl #27
  1388e8:	e0a22002 	adc	r2, r2, r2
  1388ec:	20400d81 	subcs	r0, r0, r1, lsl #27
  1388f0:	e1500d01 	cmp	r0, r1, lsl #26
  1388f4:	e0a22002 	adc	r2, r2, r2
  1388f8:	20400d01 	subcs	r0, r0, r1, lsl #26
  1388fc:	e1500c81 	cmp	r0, r1, lsl #25
  138900:	e0a22002 	adc	r2, r2, r2
  138904:	20400c81 	subcs	r0, r0, r1, lsl #25
  138908:	e1500c01 	cmp	r0, r1, lsl #24
  13890c:	e0a22002 	adc	r2, r2, r2
  138910:	20400c01 	subcs	r0, r0, r1, lsl #24
  138914:	e1500b81 	cmp	r0, r1, lsl #23
  138918:	e0a22002 	adc	r2, r2, r2
  13891c:	20400b81 	subcs	r0, r0, r1, lsl #23
  138920:	e1500b01 	cmp	r0, r1, lsl #22
  138924:	e0a22002 	adc	r2, r2, r2
  138928:	20400b01 	subcs	r0, r0, r1, lsl #22
  13892c:	e1500a81 	cmp	r0, r1, lsl #21
  138930:	e0a22002 	adc	r2, r2, r2
  138934:	20400a81 	subcs	r0, r0, r1, lsl #21
  138938:	e1500a01 	cmp	r0, r1, lsl #20
  13893c:	e0a22002 	adc	r2, r2, r2
  138940:	20400a01 	subcs	r0, r0, r1, lsl #20
  138944:	e1500981 	cmp	r0, r1, lsl #19
  138948:	e0a22002 	adc	r2, r2, r2
  13894c:	20400981 	subcs	r0, r0, r1, lsl #19
  138950:	e1500901 	cmp	r0, r1, lsl #18
  138954:	e0a22002 	adc	r2, r2, r2
  138958:	20400901 	subcs	r0, r0, r1, lsl #18
  13895c:	e1500881 	cmp	r0, r1, lsl #17
  138960:	e0a22002 	adc	r2, r2, r2
  138964:	20400881 	subcs	r0, r0, r1, lsl #17
  138968:	e1500801 	cmp	r0, r1, lsl #16
  13896c:	e0a22002 	adc	r2, r2, r2
  138970:	20400801 	subcs	r0, r0, r1, lsl #16
  138974:	e1500781 	cmp	r0, r1, lsl #15
  138978:	e0a22002 	adc	r2, r2, r2
  13897c:	20400781 	subcs	r0, r0, r1, lsl #15
  138980:	e1500701 	cmp	r0, r1, lsl #14
  138984:	e0a22002 	adc	r2, r2, r2
  138988:	20400701 	subcs	r0, r0, r1, lsl #14
  13898c:	e1500681 	cmp	r0, r1, lsl #13
  138990:	e0a22002 	adc	r2, r2, r2
  138994:	20400681 	subcs	r0, r0, r1, lsl #13
  138998:	e1500601 	cmp	r0, r1, lsl #12
  13899c:	e0a22002 	adc	r2, r2, r2
  1389a0:	20400601 	subcs	r0, r0, r1, lsl #12
  1389a4:	e1500581 	cmp	r0, r1, lsl #11
  1389a8:	e0a22002 	adc	r2, r2, r2
  1389ac:	20400581 	subcs	r0, r0, r1, lsl #11
  1389b0:	e1500501 	cmp	r0, r1, lsl #10
  1389b4:	e0a22002 	adc	r2, r2, r2
  1389b8:	20400501 	subcs	r0, r0, r1, lsl #10
  1389bc:	e1500481 	cmp	r0, r1, lsl #9
  1389c0:	e0a22002 	adc	r2, r2, r2
  1389c4:	20400481 	subcs	r0, r0, r1, lsl #9
  1389c8:	e1500401 	cmp	r0, r1, lsl #8
  1389cc:	e0a22002 	adc	r2, r2, r2
  1389d0:	20400401 	subcs	r0, r0, r1, lsl #8
  1389d4:	e1500381 	cmp	r0, r1, lsl #7
  1389d8:	e0a22002 	adc	r2, r2, r2
  1389dc:	20400381 	subcs	r0, r0, r1, lsl #7
  1389e0:	e1500301 	cmp	r0, r1, lsl #6
  1389e4:	e0a22002 	adc	r2, r2, r2
  1389e8:	20400301 	subcs	r0, r0, r1, lsl #6
  1389ec:	e1500281 	cmp	r0, r1, lsl #5
  1389f0:	e0a22002 	adc	r2, r2, r2
  1389f4:	20400281 	subcs	r0, r0, r1, lsl #5
  1389f8:	e1500201 	cmp	r0, r1, lsl #4
  1389fc:	e0a22002 	adc	r2, r2, r2
  138a00:	20400201 	subcs	r0, r0, r1, lsl #4
  138a04:	e1500181 	cmp	r0, r1, lsl #3
  138a08:	e0a22002 	adc	r2, r2, r2
  138a0c:	20400181 	subcs	r0, r0, r1, lsl #3
  138a10:	e1500101 	cmp	r0, r1, lsl #2
  138a14:	e0a22002 	adc	r2, r2, r2
  138a18:	20400101 	subcs	r0, r0, r1, lsl #2
  138a1c:	e1500081 	cmp	r0, r1, lsl #1
  138a20:	e0a22002 	adc	r2, r2, r2
  138a24:	20400081 	subcs	r0, r0, r1, lsl #1
  138a28:	e1500001 	cmp	r0, r1
  138a2c:	e0a22002 	adc	r2, r2, r2
  138a30:	20400001 	subcs	r0, r0, r1
  138a34:	e1a00002 	mov	r0, r2
  138a38:	e12fff1e 	bx	lr
  138a3c:	03a00001 	moveq	r0, #1
  138a40:	13a00000 	movne	r0, #0
  138a44:	e12fff1e 	bx	lr
  138a48:	e16f2f11 	clz	r2, r1
  138a4c:	e262201f 	rsb	r2, r2, #31
  138a50:	e1a00230 	lsr	r0, r0, r2
  138a54:	e12fff1e 	bx	lr
  138a58:	e3500000 	cmp	r0, #0
  138a5c:	13e00000 	mvnne	r0, #0
  138a60:	ea000097 	b	138cc4 <__aeabi_idiv0>

00138a64 <__aeabi_uidivmod>:
  138a64:	e3510000 	cmp	r1, #0
  138a68:	0afffffa 	beq	138a58 <__udivsi3+0x1e0>
  138a6c:	e92d4003 	push	{r0, r1, lr}
  138a70:	ebffff80 	bl	138878 <__udivsi3>
  138a74:	e8bd4006 	pop	{r1, r2, lr}
  138a78:	e0030092 	mul	r3, r2, r0
  138a7c:	e0411003 	sub	r1, r1, r3
  138a80:	e12fff1e 	bx	lr

00138a84 <__divsi3>:
  138a84:	e3510000 	cmp	r1, #0
  138a88:	0a000081 	beq	138c94 <.divsi3_skip_div0_test+0x208>

00138a8c <.divsi3_skip_div0_test>:
  138a8c:	e020c001 	eor	ip, r0, r1
  138a90:	42611000 	rsbmi	r1, r1, #0
  138a94:	e2512001 	subs	r2, r1, #1
  138a98:	0a000070 	beq	138c60 <.divsi3_skip_div0_test+0x1d4>
  138a9c:	e1b03000 	movs	r3, r0
  138aa0:	42603000 	rsbmi	r3, r0, #0
  138aa4:	e1530001 	cmp	r3, r1
  138aa8:	9a00006f 	bls	138c6c <.divsi3_skip_div0_test+0x1e0>
  138aac:	e1110002 	tst	r1, r2
  138ab0:	0a000071 	beq	138c7c <.divsi3_skip_div0_test+0x1f0>
  138ab4:	e16f2f13 	clz	r2, r3
  138ab8:	e16f0f11 	clz	r0, r1
  138abc:	e0402002 	sub	r2, r0, r2
  138ac0:	e272201f 	rsbs	r2, r2, #31
  138ac4:	10822082 	addne	r2, r2, r2, lsl #1
  138ac8:	e3a00000 	mov	r0, #0
  138acc:	108ff102 	addne	pc, pc, r2, lsl #2
  138ad0:	e1a00000 	nop			; (mov r0, r0)
  138ad4:	e1530f81 	cmp	r3, r1, lsl #31
  138ad8:	e0a00000 	adc	r0, r0, r0
  138adc:	20433f81 	subcs	r3, r3, r1, lsl #31
  138ae0:	e1530f01 	cmp	r3, r1, lsl #30
  138ae4:	e0a00000 	adc	r0, r0, r0
  138ae8:	20433f01 	subcs	r3, r3, r1, lsl #30
  138aec:	e1530e81 	cmp	r3, r1, lsl #29
  138af0:	e0a00000 	adc	r0, r0, r0
  138af4:	20433e81 	subcs	r3, r3, r1, lsl #29
  138af8:	e1530e01 	cmp	r3, r1, lsl #28
  138afc:	e0a00000 	adc	r0, r0, r0
  138b00:	20433e01 	subcs	r3, r3, r1, lsl #28
  138b04:	e1530d81 	cmp	r3, r1, lsl #27
  138b08:	e0a00000 	adc	r0, r0, r0
  138b0c:	20433d81 	subcs	r3, r3, r1, lsl #27
  138b10:	e1530d01 	cmp	r3, r1, lsl #26
  138b14:	e0a00000 	adc	r0, r0, r0
  138b18:	20433d01 	subcs	r3, r3, r1, lsl #26
  138b1c:	e1530c81 	cmp	r3, r1, lsl #25
  138b20:	e0a00000 	adc	r0, r0, r0
  138b24:	20433c81 	subcs	r3, r3, r1, lsl #25
  138b28:	e1530c01 	cmp	r3, r1, lsl #24
  138b2c:	e0a00000 	adc	r0, r0, r0
  138b30:	20433c01 	subcs	r3, r3, r1, lsl #24
  138b34:	e1530b81 	cmp	r3, r1, lsl #23
  138b38:	e0a00000 	adc	r0, r0, r0
  138b3c:	20433b81 	subcs	r3, r3, r1, lsl #23
  138b40:	e1530b01 	cmp	r3, r1, lsl #22
  138b44:	e0a00000 	adc	r0, r0, r0
  138b48:	20433b01 	subcs	r3, r3, r1, lsl #22
  138b4c:	e1530a81 	cmp	r3, r1, lsl #21
  138b50:	e0a00000 	adc	r0, r0, r0
  138b54:	20433a81 	subcs	r3, r3, r1, lsl #21
  138b58:	e1530a01 	cmp	r3, r1, lsl #20
  138b5c:	e0a00000 	adc	r0, r0, r0
  138b60:	20433a01 	subcs	r3, r3, r1, lsl #20
  138b64:	e1530981 	cmp	r3, r1, lsl #19
  138b68:	e0a00000 	adc	r0, r0, r0
  138b6c:	20433981 	subcs	r3, r3, r1, lsl #19
  138b70:	e1530901 	cmp	r3, r1, lsl #18
  138b74:	e0a00000 	adc	r0, r0, r0
  138b78:	20433901 	subcs	r3, r3, r1, lsl #18
  138b7c:	e1530881 	cmp	r3, r1, lsl #17
  138b80:	e0a00000 	adc	r0, r0, r0
  138b84:	20433881 	subcs	r3, r3, r1, lsl #17
  138b88:	e1530801 	cmp	r3, r1, lsl #16
  138b8c:	e0a00000 	adc	r0, r0, r0
  138b90:	20433801 	subcs	r3, r3, r1, lsl #16
  138b94:	e1530781 	cmp	r3, r1, lsl #15
  138b98:	e0a00000 	adc	r0, r0, r0
  138b9c:	20433781 	subcs	r3, r3, r1, lsl #15
  138ba0:	e1530701 	cmp	r3, r1, lsl #14
  138ba4:	e0a00000 	adc	r0, r0, r0
  138ba8:	20433701 	subcs	r3, r3, r1, lsl #14
  138bac:	e1530681 	cmp	r3, r1, lsl #13
  138bb0:	e0a00000 	adc	r0, r0, r0
  138bb4:	20433681 	subcs	r3, r3, r1, lsl #13
  138bb8:	e1530601 	cmp	r3, r1, lsl #12
  138bbc:	e0a00000 	adc	r0, r0, r0
  138bc0:	20433601 	subcs	r3, r3, r1, lsl #12
  138bc4:	e1530581 	cmp	r3, r1, lsl #11
  138bc8:	e0a00000 	adc	r0, r0, r0
  138bcc:	20433581 	subcs	r3, r3, r1, lsl #11
  138bd0:	e1530501 	cmp	r3, r1, lsl #10
  138bd4:	e0a00000 	adc	r0, r0, r0
  138bd8:	20433501 	subcs	r3, r3, r1, lsl #10
  138bdc:	e1530481 	cmp	r3, r1, lsl #9
  138be0:	e0a00000 	adc	r0, r0, r0
  138be4:	20433481 	subcs	r3, r3, r1, lsl #9
  138be8:	e1530401 	cmp	r3, r1, lsl #8
  138bec:	e0a00000 	adc	r0, r0, r0
  138bf0:	20433401 	subcs	r3, r3, r1, lsl #8
  138bf4:	e1530381 	cmp	r3, r1, lsl #7
  138bf8:	e0a00000 	adc	r0, r0, r0
  138bfc:	20433381 	subcs	r3, r3, r1, lsl #7
  138c00:	e1530301 	cmp	r3, r1, lsl #6
  138c04:	e0a00000 	adc	r0, r0, r0
  138c08:	20433301 	subcs	r3, r3, r1, lsl #6
  138c0c:	e1530281 	cmp	r3, r1, lsl #5
  138c10:	e0a00000 	adc	r0, r0, r0
  138c14:	20433281 	subcs	r3, r3, r1, lsl #5
  138c18:	e1530201 	cmp	r3, r1, lsl #4
  138c1c:	e0a00000 	adc	r0, r0, r0
  138c20:	20433201 	subcs	r3, r3, r1, lsl #4
  138c24:	e1530181 	cmp	r3, r1, lsl #3
  138c28:	e0a00000 	adc	r0, r0, r0
  138c2c:	20433181 	subcs	r3, r3, r1, lsl #3
  138c30:	e1530101 	cmp	r3, r1, lsl #2
  138c34:	e0a00000 	adc	r0, r0, r0
  138c38:	20433101 	subcs	r3, r3, r1, lsl #2
  138c3c:	e1530081 	cmp	r3, r1, lsl #1
  138c40:	e0a00000 	adc	r0, r0, r0
  138c44:	20433081 	subcs	r3, r3, r1, lsl #1
  138c48:	e1530001 	cmp	r3, r1
  138c4c:	e0a00000 	adc	r0, r0, r0
  138c50:	20433001 	subcs	r3, r3, r1
  138c54:	e35c0000 	cmp	ip, #0
  138c58:	42600000 	rsbmi	r0, r0, #0
  138c5c:	e12fff1e 	bx	lr
  138c60:	e13c0000 	teq	ip, r0
  138c64:	42600000 	rsbmi	r0, r0, #0
  138c68:	e12fff1e 	bx	lr
  138c6c:	33a00000 	movcc	r0, #0
  138c70:	01a00fcc 	asreq	r0, ip, #31
  138c74:	03800001 	orreq	r0, r0, #1
  138c78:	e12fff1e 	bx	lr
  138c7c:	e16f2f11 	clz	r2, r1
  138c80:	e262201f 	rsb	r2, r2, #31
  138c84:	e35c0000 	cmp	ip, #0
  138c88:	e1a00233 	lsr	r0, r3, r2
  138c8c:	42600000 	rsbmi	r0, r0, #0
  138c90:	e12fff1e 	bx	lr
  138c94:	e3500000 	cmp	r0, #0
  138c98:	c3e00102 	mvngt	r0, #-2147483648	; 0x80000000
  138c9c:	b3a00102 	movlt	r0, #-2147483648	; 0x80000000
  138ca0:	ea000007 	b	138cc4 <__aeabi_idiv0>

00138ca4 <__aeabi_idivmod>:
  138ca4:	e3510000 	cmp	r1, #0
  138ca8:	0afffff9 	beq	138c94 <.divsi3_skip_div0_test+0x208>
  138cac:	e92d4003 	push	{r0, r1, lr}
  138cb0:	ebffff75 	bl	138a8c <.divsi3_skip_div0_test>
  138cb4:	e8bd4006 	pop	{r1, r2, lr}
  138cb8:	e0030092 	mul	r3, r2, r0
  138cbc:	e0411003 	sub	r1, r1, r3
  138cc0:	e12fff1e 	bx	lr

00138cc4 <__aeabi_idiv0>:
  138cc4:	e92d4002 	push	{r1, lr}
  138cc8:	e3a00008 	mov	r0, #8
  138ccc:	eb00154f 	bl	13e210 <raise>
  138cd0:	e8bd8002 	pop	{r1, pc}

00138cd4 <dummy>:
  138cd4:	e12fff1e 	bx	lr

00138cd8 <dummy1>:
  138cd8:	e12fff1e 	bx	lr

00138cdc <__init_libc>:
  138cdc:	e92d4030 	push	{r4, r5, lr}
  138ce0:	e1a04000 	mov	r4, r0
  138ce4:	e24dd09c 	sub	sp, sp, #156	; 0x9c
  138ce8:	e3a02098 	mov	r2, #152	; 0x98
  138cec:	e1a05001 	mov	r5, r1
  138cf0:	e1a0000d 	mov	r0, sp
  138cf4:	e3a01000 	mov	r1, #0
  138cf8:	eb00215d 	bl	141274 <memset>
  138cfc:	e5942000 	ldr	r2, [r4]
  138d00:	e59f3118 	ldr	r3, [pc, #280]	; 138e20 <__init_libc+0x144>
  138d04:	e3520000 	cmp	r2, #0
  138d08:	e5834000 	str	r4, [r3]
  138d0c:	03a02004 	moveq	r2, #4
  138d10:	0a000009 	beq	138d3c <__init_libc+0x60>
  138d14:	e1a03004 	mov	r3, r4
  138d18:	e3a02000 	mov	r2, #0
  138d1c:	ea000000 	b	138d24 <__init_libc+0x48>
  138d20:	e1a02000 	mov	r2, r0
  138d24:	e5b31004 	ldr	r1, [r3, #4]!
  138d28:	e2820001 	add	r0, r2, #1
  138d2c:	e3510000 	cmp	r1, #0
  138d30:	1afffffa 	bne	138d20 <__init_libc+0x44>
  138d34:	e2822002 	add	r2, r2, #2
  138d38:	e1a02102 	lsl	r2, r2, #2
  138d3c:	e7943002 	ldr	r3, [r4, r2]
  138d40:	e59f00dc 	ldr	r0, [pc, #220]	; 138e24 <__init_libc+0x148>
  138d44:	e0842002 	add	r2, r4, r2
  138d48:	e3530000 	cmp	r3, #0
  138d4c:	e5802010 	str	r2, [r0, #16]
  138d50:	0a00002d 	beq	138e0c <__init_libc+0x130>
  138d54:	e3530025 	cmp	r3, #37	; 0x25
  138d58:	95921004 	ldrls	r1, [r2, #4]
  138d5c:	928dc098 	addls	ip, sp, #152	; 0x98
  138d60:	908c3103 	addls	r3, ip, r3, lsl #2
  138d64:	95031098 	strls	r1, [r3, #-152]	; 0xffffff68
  138d68:	e5b23008 	ldr	r3, [r2, #8]!
  138d6c:	e3530000 	cmp	r3, #0
  138d70:	1afffff7 	bne	138d54 <__init_libc+0x78>
  138d74:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
  138d78:	e59dc080 	ldr	ip, [sp, #128]	; 0x80
  138d7c:	e59d2018 	ldr	r2, [sp, #24]
  138d80:	e59f10a0 	ldr	r1, [pc, #160]	; 138e28 <__init_libc+0x14c>
  138d84:	e5802024 	str	r2, [r0, #36]	; 0x24
  138d88:	e59f209c 	ldr	r2, [pc, #156]	; 138e2c <__init_libc+0x150>
  138d8c:	e3550000 	cmp	r5, #0
  138d90:	e5813000 	str	r3, [r1]
  138d94:	e582c000 	str	ip, [r2]
  138d98:	0a000012 	beq	138de8 <__init_libc+0x10c>
  138d9c:	e59f308c 	ldr	r3, [pc, #140]	; 138e30 <__init_libc+0x154>
  138da0:	e59f208c 	ldr	r2, [pc, #140]	; 138e34 <__init_libc+0x158>
  138da4:	e5835000 	str	r5, [r3]
  138da8:	e5825000 	str	r5, [r2]
  138dac:	e5d53000 	ldrb	r3, [r5]
  138db0:	e3530000 	cmp	r3, #0
  138db4:	0a000005 	beq	138dd0 <__init_libc+0xf4>
  138db8:	e2851001 	add	r1, r5, #1
  138dbc:	e353002f 	cmp	r3, #47	; 0x2f
  138dc0:	05821000 	streq	r1, [r2]
  138dc4:	e4d13001 	ldrb	r3, [r1], #1
  138dc8:	e3530000 	cmp	r3, #0
  138dcc:	1afffffa 	bne	138dbc <__init_libc+0xe0>
  138dd0:	e1a0000d 	mov	r0, sp
  138dd4:	eb002848 	bl	142efc <__init_tls>
  138dd8:	e59d0064 	ldr	r0, [sp, #100]	; 0x64
  138ddc:	eb0028bd 	bl	1430d8 <__init_ssp>
  138de0:	e28dd09c 	add	sp, sp, #156	; 0x9c
  138de4:	e8bd8030 	pop	{r4, r5, pc}
  138de8:	e59d107c 	ldr	r1, [sp, #124]	; 0x7c
  138dec:	e3510000 	cmp	r1, #0
  138df0:	1a000008 	bne	138e18 <__init_libc+0x13c>
  138df4:	e59f303c 	ldr	r3, [pc, #60]	; 138e38 <__init_libc+0x15c>
  138df8:	e59f1030 	ldr	r1, [pc, #48]	; 138e30 <__init_libc+0x154>
  138dfc:	e59f2030 	ldr	r2, [pc, #48]	; 138e34 <__init_libc+0x158>
  138e00:	e5813000 	str	r3, [r1]
  138e04:	e5823000 	str	r3, [r2]
  138e08:	eafffff0 	b	138dd0 <__init_libc+0xf4>
  138e0c:	e1a02003 	mov	r2, r3
  138e10:	e1a0c003 	mov	ip, r3
  138e14:	eaffffd9 	b	138d80 <__init_libc+0xa4>
  138e18:	e1a05001 	mov	r5, r1
  138e1c:	eaffffde 	b	138d9c <__init_libc+0xc0>
  138e20:	0014f490 	.word	0x0014f490
  138e24:	0015d074 	.word	0x0015d074
  138e28:	0015d070 	.word	0x0015d070
  138e2c:	0015d0b4 	.word	0x0015d0b4
  138e30:	0014ec24 	.word	0x0014ec24
  138e34:	0014ec20 	.word	0x0014ec20
  138e38:	0014c6e8 	.word	0x0014c6e8

00138e3c <__libc_start_init>:
  138e3c:	e92d4070 	push	{r4, r5, r6, lr}
  138e40:	e59f4020 	ldr	r4, [pc, #32]	; 138e68 <__libc_start_init+0x2c>
  138e44:	e59f5020 	ldr	r5, [pc, #32]	; 138e6c <__libc_start_init+0x30>
  138e48:	eb003147 	bl	14536c <_init>
  138e4c:	e1540005 	cmp	r4, r5
  138e50:	28bd8070 	popcs	{r4, r5, r6, pc}
  138e54:	e4943004 	ldr	r3, [r4], #4
  138e58:	e12fff33 	blx	r3
  138e5c:	e1540005 	cmp	r4, r5
  138e60:	3afffffb 	bcc	138e54 <__libc_start_init+0x18>
  138e64:	e8bd8070 	pop	{r4, r5, r6, pc}
  138e68:	0014d3e8 	.word	0x0014d3e8
  138e6c:	0014d3ec 	.word	0x0014d3ec

00138e70 <libc_start_main_stage2>:
  138e70:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  138e74:	e1a05001 	mov	r5, r1
  138e78:	e1a06002 	mov	r6, r2
  138e7c:	e2814001 	add	r4, r1, #1
  138e80:	e0824104 	add	r4, r2, r4, lsl #2
  138e84:	e1a07000 	mov	r7, r0
  138e88:	ebffffeb 	bl	138e3c <__libc_start_init>
  138e8c:	e1a02004 	mov	r2, r4
  138e90:	e1a01006 	mov	r1, r6
  138e94:	e1a00005 	mov	r0, r5
  138e98:	e12fff37 	blx	r7
  138e9c:	eb000056 	bl	138ffc <exit>

00138ea0 <__libc_start_main>:
  138ea0:	e92d4070 	push	{r4, r5, r6, lr}
  138ea4:	e1a05001 	mov	r5, r1
  138ea8:	e1a04002 	mov	r4, r2
  138eac:	e1a06000 	mov	r6, r0
  138eb0:	e2810001 	add	r0, r1, #1
  138eb4:	e0820100 	add	r0, r2, r0, lsl #2
  138eb8:	e5921000 	ldr	r1, [r2]
  138ebc:	ebffff86 	bl	138cdc <__init_libc>
  138ec0:	e59f3010 	ldr	r3, [pc, #16]	; 138ed8 <__libc_start_main+0x38>
  138ec4:	e1a02004 	mov	r2, r4
  138ec8:	e1a01005 	mov	r1, r5
  138ecc:	e1a00006 	mov	r0, r6
  138ed0:	e8bd4070 	pop	{r4, r5, r6, lr}
  138ed4:	e12fff13 	bx	r3
  138ed8:	00138e70 	.word	0x00138e70

00138edc <__errno_location>:
  138edc:	e59f3010 	ldr	r3, [pc, #16]	; 138ef4 <__errno_location+0x18>
  138ee0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  138ee4:	e5930000 	ldr	r0, [r3]
  138ee8:	e12fff30 	blx	r0
  138eec:	e2400058 	sub	r0, r0, #88	; 0x58
  138ef0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
  138ef4:	0014d3dc 	.word	0x0014d3dc

00138ef8 <__strerror_l>:
  138ef8:	e3500054 	cmp	r0, #84	; 0x54
  138efc:	0a000013 	beq	138f50 <__strerror_l+0x58>
  138f00:	e3a0c001 	mov	ip, #1
  138f04:	e3a03021 	mov	r3, #33	; 0x21
  138f08:	e59f204c 	ldr	r2, [pc, #76]	; 138f5c <__strerror_l+0x64>
  138f0c:	e1530000 	cmp	r3, r0
  138f10:	0a000003 	beq	138f24 <__strerror_l+0x2c>
  138f14:	e4d23001 	ldrb	r3, [r2], #1
  138f18:	e28cc001 	add	ip, ip, #1
  138f1c:	e3530000 	cmp	r3, #0
  138f20:	1afffff9 	bne	138f0c <__strerror_l+0x14>
  138f24:	e3a02049 	mov	r2, #73	; 0x49
  138f28:	e59f3030 	ldr	r3, [pc, #48]	; 138f60 <__strerror_l+0x68>
  138f2c:	e3520000 	cmp	r2, #0
  138f30:	15f32001 	ldrbne	r2, [r3, #1]!
  138f34:	1afffffc 	bne	138f2c <__strerror_l+0x34>
  138f38:	e25cc001 	subs	ip, ip, #1
  138f3c:	e2830001 	add	r0, r3, #1
  138f40:	0a000003 	beq	138f54 <__strerror_l+0x5c>
  138f44:	e5d32001 	ldrb	r2, [r3, #1]
  138f48:	e1a03000 	mov	r3, r0
  138f4c:	eafffff6 	b	138f2c <__strerror_l+0x34>
  138f50:	e59f0008 	ldr	r0, [pc, #8]	; 138f60 <__strerror_l+0x68>
  138f54:	e5911014 	ldr	r1, [r1, #20]
  138f58:	ea000d54 	b	13c4b0 <__lctrans>
  138f5c:	0014a46e 	.word	0x0014a46e
  138f60:	0014a4c8 	.word	0x0014a4c8

00138f64 <strerror>:
  138f64:	e1a03000 	mov	r3, r0
  138f68:	e59f2018 	ldr	r2, [pc, #24]	; 138f88 <strerror+0x24>
  138f6c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  138f70:	e5920000 	ldr	r0, [r2]
  138f74:	e12fff30 	blx	r0
  138f78:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  138f7c:	e5101018 	ldr	r1, [r0, #-24]	; 0xffffffe8
  138f80:	e1a00003 	mov	r0, r3
  138f84:	eaffffdb 	b	138ef8 <__strerror_l>
  138f88:	0014d3dc 	.word	0x0014d3dc

00138f8c <__assert_fail>:
  138f8c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  138f90:	e24dd00c 	sub	sp, sp, #12
  138f94:	e58d2004 	str	r2, [sp, #4]
  138f98:	e58d3000 	str	r3, [sp]
  138f9c:	e1a02000 	mov	r2, r0
  138fa0:	e1a03001 	mov	r3, r1
  138fa4:	e59f0010 	ldr	r0, [pc, #16]	; 138fbc <__assert_fail+0x30>
  138fa8:	e59f1010 	ldr	r1, [pc, #16]	; 138fc0 <__assert_fail+0x34>
  138fac:	eb001522 	bl	13e43c <fprintf>
  138fb0:	e3a00000 	mov	r0, #0
  138fb4:	eb0014af 	bl	13e278 <fflush>
  138fb8:	eb00286a 	bl	143168 <abort>
  138fbc:	0014d2a8 	.word	0x0014d2a8
  138fc0:	0014abe8 	.word	0x0014abe8

00138fc4 <__funcs_on_exit>:
  138fc4:	e12fff1e 	bx	lr

00138fc8 <__libc_exit_fini>:
  138fc8:	e92d4070 	push	{r4, r5, r6, lr}
  138fcc:	e59f4020 	ldr	r4, [pc, #32]	; 138ff4 <__libc_exit_fini+0x2c>
  138fd0:	e59f5020 	ldr	r5, [pc, #32]	; 138ff8 <__libc_exit_fini+0x30>
  138fd4:	e1540005 	cmp	r4, r5
  138fd8:	9a000003 	bls	138fec <__libc_exit_fini+0x24>
  138fdc:	e5343004 	ldr	r3, [r4, #-4]!
  138fe0:	e12fff33 	blx	r3
  138fe4:	e1540005 	cmp	r4, r5
  138fe8:	8afffffb 	bhi	138fdc <__libc_exit_fini+0x14>
  138fec:	e8bd4070 	pop	{r4, r5, r6, lr}
  138ff0:	ea0030e0 	b	145378 <_fini>
  138ff4:	0014d3f0 	.word	0x0014d3f0
  138ff8:	0014d3ec 	.word	0x0014d3ec

00138ffc <exit>:
  138ffc:	e92d4010 	push	{r4, lr}
  139000:	e1a04000 	mov	r4, r0
  139004:	ebffffee 	bl	138fc4 <__funcs_on_exit>
  139008:	ebffffee 	bl	138fc8 <__libc_exit_fini>
  13900c:	eb002da2 	bl	14469c <__stdio_exit>
  139010:	e1a00004 	mov	r0, r4
  139014:	eb002846 	bl	143134 <_Exit>

00139018 <fcntl>:
  139018:	e92d000e 	push	{r1, r2, r3}
  13901c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  139020:	e24dd020 	sub	sp, sp, #32
  139024:	e59d4034 	ldr	r4, [sp, #52]	; 0x34
  139028:	e59d5038 	ldr	r5, [sp, #56]	; 0x38
  13902c:	e28d3038 	add	r3, sp, #56	; 0x38
  139030:	e3540004 	cmp	r4, #4
  139034:	e1a06000 	mov	r6, r0
  139038:	e58d3014 	str	r3, [sp, #20]
  13903c:	03855802 	orreq	r5, r5, #131072	; 0x20000
  139040:	0a00000f 	beq	139084 <fcntl+0x6c>
  139044:	e354000e 	cmp	r4, #14
  139048:	0a00001a 	beq	1390b8 <fcntl+0xa0>
  13904c:	e3540009 	cmp	r4, #9
  139050:	0a000026 	beq	1390f0 <fcntl+0xd8>
  139054:	e59f3234 	ldr	r3, [pc, #564]	; 139290 <fcntl+0x278>
  139058:	e1540003 	cmp	r4, r3
  13905c:	0a000034 	beq	139134 <fcntl+0x11c>
  139060:	e244300c 	sub	r3, r4, #12
  139064:	e3530004 	cmp	r3, #4
  139068:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  13906c:	ea000004 	b	139084 <fcntl+0x6c>
  139070:	00139084 	.word	0x00139084
  139074:	00139084 	.word	0x00139084
  139078:	00139084 	.word	0x00139084
  13907c:	00139084 	.word	0x00139084
  139080:	00139084 	.word	0x00139084
  139084:	e3a000dd 	mov	r0, #221	; 0xdd
  139088:	eb000cc9 	bl	13c3b4 <get_rtt_syscall>
  13908c:	e2503000 	subs	r3, r0, #0
  139090:	0a000046 	beq	1391b0 <fcntl+0x198>
  139094:	e1a02005 	mov	r2, r5
  139098:	e1a01004 	mov	r1, r4
  13909c:	e1a00006 	mov	r0, r6
  1390a0:	e12fff33 	blx	r3
  1390a4:	eb000cf7 	bl	13c488 <__syscall_ret>
  1390a8:	e28dd020 	add	sp, sp, #32
  1390ac:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
  1390b0:	e28dd00c 	add	sp, sp, #12
  1390b4:	e12fff1e 	bx	lr
  1390b8:	e3a00000 	mov	r0, #0
  1390bc:	e1a03005 	mov	r3, r5
  1390c0:	e1a02004 	mov	r2, r4
  1390c4:	e1a01006 	mov	r1, r6
  1390c8:	e58d0008 	str	r0, [sp, #8]
  1390cc:	e58d0004 	str	r0, [sp, #4]
  1390d0:	e58d0000 	str	r0, [sp]
  1390d4:	e3a000dd 	mov	r0, #221	; 0xdd
  1390d8:	eb00231c 	bl	141d50 <__syscall_cp>
  1390dc:	eb000ce9 	bl	13c488 <__syscall_ret>
  1390e0:	e28dd020 	add	sp, sp, #32
  1390e4:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
  1390e8:	e28dd00c 	add	sp, sp, #12
  1390ec:	e12fff1e 	bx	lr
  1390f0:	e3a000dd 	mov	r0, #221	; 0xdd
  1390f4:	eb000cae 	bl	13c3b4 <get_rtt_syscall>
  1390f8:	e2503000 	subs	r3, r0, #0
  1390fc:	0a000007 	beq	139120 <fcntl+0x108>
  139100:	e28d2018 	add	r2, sp, #24
  139104:	e3a01010 	mov	r1, #16
  139108:	e1a00006 	mov	r0, r6
  13910c:	e12fff33 	blx	r3
  139110:	e3700016 	cmn	r0, #22
  139114:	0a000027 	beq	1391b8 <fcntl+0x1a0>
  139118:	e3500000 	cmp	r0, #0
  13911c:	1affffe0 	bne	1390a4 <fcntl+0x8c>
  139120:	e59d3018 	ldr	r3, [sp, #24]
  139124:	e59d001c 	ldr	r0, [sp, #28]
  139128:	e3530002 	cmp	r3, #2
  13912c:	02600000 	rsbeq	r0, r0, #0
  139130:	eaffffdc 	b	1390a8 <fcntl+0x90>
  139134:	e3a000dd 	mov	r0, #221	; 0xdd
  139138:	eb000c9d 	bl	13c3b4 <get_rtt_syscall>
  13913c:	e2503000 	subs	r3, r0, #0
  139140:	0a00000f 	beq	139184 <fcntl+0x16c>
  139144:	e1a02005 	mov	r2, r5
  139148:	e1a01004 	mov	r1, r4
  13914c:	e1a00006 	mov	r0, r6
  139150:	e12fff33 	blx	r3
  139154:	e3700016 	cmn	r0, #22
  139158:	e1a07000 	mov	r7, r0
  13915c:	0a00001e 	beq	1391dc <fcntl+0x1c4>
  139160:	e3500000 	cmp	r0, #0
  139164:	e1a04000 	mov	r4, r0
  139168:	aa000007 	bge	13918c <fcntl+0x174>
  13916c:	e1a00004 	mov	r0, r4
  139170:	eb000cc4 	bl	13c488 <__syscall_ret>
  139174:	e28dd020 	add	sp, sp, #32
  139178:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
  13917c:	e28dd00c 	add	sp, sp, #12
  139180:	e12fff1e 	bx	lr
  139184:	e1a04003 	mov	r4, r3
  139188:	e1a07003 	mov	r7, r3
  13918c:	e3a000dd 	mov	r0, #221	; 0xdd
  139190:	eb000c87 	bl	13c3b4 <get_rtt_syscall>
  139194:	e2503000 	subs	r3, r0, #0
  139198:	0afffff3 	beq	13916c <fcntl+0x154>
  13919c:	e1a00007 	mov	r0, r7
  1391a0:	e3a02001 	mov	r2, #1
  1391a4:	e3a01002 	mov	r1, #2
  1391a8:	e12fff33 	blx	r3
  1391ac:	eaffffee 	b	13916c <fcntl+0x154>
  1391b0:	e1a00003 	mov	r0, r3
  1391b4:	eaffffba 	b	1390a4 <fcntl+0x8c>
  1391b8:	e3a000dd 	mov	r0, #221	; 0xdd
  1391bc:	eb000c7c 	bl	13c3b4 <get_rtt_syscall>
  1391c0:	e2503000 	subs	r3, r0, #0
  1391c4:	0a00002f 	beq	139288 <fcntl+0x270>
  1391c8:	e1a02005 	mov	r2, r5
  1391cc:	e1a01004 	mov	r1, r4
  1391d0:	e1a00006 	mov	r0, r6
  1391d4:	e12fff33 	blx	r3
  1391d8:	eaffffb2 	b	1390a8 <fcntl+0x90>
  1391dc:	e3a000dd 	mov	r0, #221	; 0xdd
  1391e0:	eb000c73 	bl	13c3b4 <get_rtt_syscall>
  1391e4:	e2503000 	subs	r3, r0, #0
  1391e8:	0a00000b 	beq	13921c <fcntl+0x204>
  1391ec:	e1a01004 	mov	r1, r4
  1391f0:	e3a02000 	mov	r2, #0
  1391f4:	e1a00006 	mov	r0, r6
  1391f8:	e12fff33 	blx	r3
  1391fc:	e3700016 	cmn	r0, #22
  139200:	e1a04000 	mov	r4, r0
  139204:	0a00000c 	beq	13923c <fcntl+0x224>
  139208:	e3500000 	cmp	r0, #0
  13920c:	aa000003 	bge	139220 <fcntl+0x208>
  139210:	e3e00015 	mvn	r0, #21
  139214:	eb000c9b 	bl	13c488 <__syscall_ret>
  139218:	eaffffa2 	b	1390a8 <fcntl+0x90>
  13921c:	e1a04003 	mov	r4, r3
  139220:	e3a00006 	mov	r0, #6
  139224:	eb000c62 	bl	13c3b4 <get_rtt_syscall>
  139228:	e2503000 	subs	r3, r0, #0
  13922c:	0afffff7 	beq	139210 <fcntl+0x1f8>
  139230:	e1a00004 	mov	r0, r4
  139234:	e12fff33 	blx	r3
  139238:	eafffff4 	b	139210 <fcntl+0x1f8>
  13923c:	e3a000dd 	mov	r0, #221	; 0xdd
  139240:	eb000c5b 	bl	13c3b4 <get_rtt_syscall>
  139244:	e2504000 	subs	r4, r0, #0
  139248:	0a000005 	beq	139264 <fcntl+0x24c>
  13924c:	e1a02005 	mov	r2, r5
  139250:	e1a00006 	mov	r0, r6
  139254:	e3a01000 	mov	r1, #0
  139258:	e12fff34 	blx	r4
  13925c:	e2504000 	subs	r4, r0, #0
  139260:	baffffc1 	blt	13916c <fcntl+0x154>
  139264:	e3a000dd 	mov	r0, #221	; 0xdd
  139268:	eb000c51 	bl	13c3b4 <get_rtt_syscall>
  13926c:	e2503000 	subs	r3, r0, #0
  139270:	0affffbd 	beq	13916c <fcntl+0x154>
  139274:	e3a02001 	mov	r2, #1
  139278:	e3a01002 	mov	r1, #2
  13927c:	e1a00004 	mov	r0, r4
  139280:	e12fff33 	blx	r3
  139284:	eaffffb8 	b	13916c <fcntl+0x154>
  139288:	e1a00003 	mov	r0, r3
  13928c:	eaffff85 	b	1390a8 <fcntl+0x90>
  139290:	00000406 	.word	0x00000406

00139294 <syscall_set_thread_area>:
  139294:	e1a01000 	mov	r1, r0
  139298:	e3a0007b 	mov	r0, #123	; 0x7b
  13929c:	ea000c6f 	b	13c460 <syscall>

001392a0 <syscall_trace>:
  1392a0:	e92d4070 	push	{r4, r5, r6, lr}
  1392a4:	e1a04000 	mov	r4, r0
  1392a8:	e1a05001 	mov	r5, r1
  1392ac:	e3a0201d 	mov	r2, #29
  1392b0:	e59f1018 	ldr	r1, [pc, #24]	; 1392d0 <syscall_trace+0x30>
  1392b4:	e3a000ff 	mov	r0, #255	; 0xff
  1392b8:	eb000c68 	bl	13c460 <syscall>
  1392bc:	e1a02005 	mov	r2, r5
  1392c0:	e1a01004 	mov	r1, r4
  1392c4:	e8bd4070 	pop	{r4, r5, r6, lr}
  1392c8:	e3a000ff 	mov	r0, #255	; 0xff
  1392cc:	ea000c63 	b	13c460 <syscall>
  1392d0:	0014cd2c 	.word	0x0014cd2c

001392d4 <syscall_io_pgetevents>:
  1392d4:	e92d4010 	push	{r4, lr}
  1392d8:	e3a01016 	mov	r1, #22
  1392dc:	e59f0008 	ldr	r0, [pc, #8]	; 1392ec <syscall_io_pgetevents+0x18>
  1392e0:	ebffffee 	bl	1392a0 <syscall_trace>
  1392e4:	e3a00000 	mov	r0, #0
  1392e8:	e8bd8010 	pop	{r4, pc}
  1392ec:	0014c6b4 	.word	0x0014c6b4

001392f0 <syscall_rseq>:
  1392f0:	e92d4010 	push	{r4, lr}
  1392f4:	e3a0100d 	mov	r1, #13
  1392f8:	e59f0008 	ldr	r0, [pc, #8]	; 139308 <syscall_rseq+0x18>
  1392fc:	ebffffe7 	bl	1392a0 <syscall_trace>
  139300:	e3a00000 	mov	r0, #0
  139304:	e8bd8010 	pop	{r4, pc}
  139308:	0014c6a4 	.word	0x0014c6a4

0013930c <syscall_statx>:
  13930c:	e92d4010 	push	{r4, lr}
  139310:	e3a0100e 	mov	r1, #14
  139314:	e59f0008 	ldr	r0, [pc, #8]	; 139324 <syscall_statx+0x18>
  139318:	ebffffe0 	bl	1392a0 <syscall_trace>
  13931c:	e3a00000 	mov	r0, #0
  139320:	e8bd8010 	pop	{r4, pc}
  139324:	0014c694 	.word	0x0014c694

00139328 <syscall_pkey_free>:
  139328:	e92d4010 	push	{r4, lr}
  13932c:	e3a01012 	mov	r1, #18
  139330:	e59f0008 	ldr	r0, [pc, #8]	; 139340 <syscall_pkey_free+0x18>
  139334:	ebffffd9 	bl	1392a0 <syscall_trace>
  139338:	e3a00000 	mov	r0, #0
  13933c:	e8bd8010 	pop	{r4, pc}
  139340:	0014c680 	.word	0x0014c680

00139344 <syscall_pkey_alloc>:
  139344:	e92d4010 	push	{r4, lr}
  139348:	e3a01013 	mov	r1, #19
  13934c:	e59f0008 	ldr	r0, [pc, #8]	; 13935c <syscall_pkey_alloc+0x18>
  139350:	ebffffd2 	bl	1392a0 <syscall_trace>
  139354:	e3a00000 	mov	r0, #0
  139358:	e8bd8010 	pop	{r4, pc}
  13935c:	0014c66c 	.word	0x0014c66c

00139360 <syscall_pkey_mprotect>:
  139360:	e92d4010 	push	{r4, lr}
  139364:	e3a01016 	mov	r1, #22
  139368:	e59f0008 	ldr	r0, [pc, #8]	; 139378 <syscall_pkey_mprotect+0x18>
  13936c:	ebffffcb 	bl	1392a0 <syscall_trace>
  139370:	e3a00000 	mov	r0, #0
  139374:	e8bd8010 	pop	{r4, pc}
  139378:	0014c654 	.word	0x0014c654

0013937c <syscall_pwritev2>:
  13937c:	e92d4010 	push	{r4, lr}
  139380:	e3a01011 	mov	r1, #17
  139384:	e59f0008 	ldr	r0, [pc, #8]	; 139394 <syscall_pwritev2+0x18>
  139388:	ebffffc4 	bl	1392a0 <syscall_trace>
  13938c:	e3a00000 	mov	r0, #0
  139390:	e8bd8010 	pop	{r4, pc}
  139394:	0014c640 	.word	0x0014c640

00139398 <syscall_preadv2>:
  139398:	e92d4010 	push	{r4, lr}
  13939c:	e3a01010 	mov	r1, #16
  1393a0:	e59f0008 	ldr	r0, [pc, #8]	; 1393b0 <syscall_preadv2+0x18>
  1393a4:	ebffffbd 	bl	1392a0 <syscall_trace>
  1393a8:	e3a00000 	mov	r0, #0
  1393ac:	e8bd8010 	pop	{r4, pc}
  1393b0:	0014c630 	.word	0x0014c630

001393b4 <syscall_copy_file_range>:
  1393b4:	e92d4010 	push	{r4, lr}
  1393b8:	e3a01018 	mov	r1, #24
  1393bc:	e59f0008 	ldr	r0, [pc, #8]	; 1393cc <syscall_copy_file_range+0x18>
  1393c0:	ebffffb6 	bl	1392a0 <syscall_trace>
  1393c4:	e3a00000 	mov	r0, #0
  1393c8:	e8bd8010 	pop	{r4, pc}
  1393cc:	0014c618 	.word	0x0014c618

001393d0 <syscall_mlock2>:
  1393d0:	e92d4010 	push	{r4, lr}
  1393d4:	e3a0100f 	mov	r1, #15
  1393d8:	e59f0008 	ldr	r0, [pc, #8]	; 1393e8 <syscall_mlock2+0x18>
  1393dc:	ebffffaf 	bl	1392a0 <syscall_trace>
  1393e0:	e3a00000 	mov	r0, #0
  1393e4:	e8bd8010 	pop	{r4, pc}
  1393e8:	0014c608 	.word	0x0014c608

001393ec <syscall_membarrier>:
  1393ec:	e92d4010 	push	{r4, lr}
  1393f0:	e3a01013 	mov	r1, #19
  1393f4:	e59f0008 	ldr	r0, [pc, #8]	; 139404 <syscall_membarrier+0x18>
  1393f8:	ebffffa8 	bl	1392a0 <syscall_trace>
  1393fc:	e3a00000 	mov	r0, #0
  139400:	e8bd8010 	pop	{r4, pc}
  139404:	0014c5f4 	.word	0x0014c5f4

00139408 <syscall_userfaultfd>:
  139408:	e92d4010 	push	{r4, lr}
  13940c:	e3a01014 	mov	r1, #20
  139410:	e59f0008 	ldr	r0, [pc, #8]	; 139420 <syscall_userfaultfd+0x18>
  139414:	ebffffa1 	bl	1392a0 <syscall_trace>
  139418:	e3a00000 	mov	r0, #0
  13941c:	e8bd8010 	pop	{r4, pc}
  139420:	0014c5e0 	.word	0x0014c5e0

00139424 <syscall_execveat>:
  139424:	e92d4010 	push	{r4, lr}
  139428:	e3a01011 	mov	r1, #17
  13942c:	e59f0008 	ldr	r0, [pc, #8]	; 13943c <syscall_execveat+0x18>
  139430:	ebffff9a 	bl	1392a0 <syscall_trace>
  139434:	e3a00000 	mov	r0, #0
  139438:	e8bd8010 	pop	{r4, pc}
  13943c:	0014c5cc 	.word	0x0014c5cc

00139440 <syscall_bpf>:
  139440:	e92d4010 	push	{r4, lr}
  139444:	e3a0100c 	mov	r1, #12
  139448:	e59f0008 	ldr	r0, [pc, #8]	; 139458 <syscall_bpf+0x18>
  13944c:	ebffff93 	bl	1392a0 <syscall_trace>
  139450:	e3a00000 	mov	r0, #0
  139454:	e8bd8010 	pop	{r4, pc}
  139458:	0014c5c0 	.word	0x0014c5c0

0013945c <syscall_memfd_create>:
  13945c:	e92d4010 	push	{r4, lr}
  139460:	e3a01015 	mov	r1, #21
  139464:	e59f0008 	ldr	r0, [pc, #8]	; 139474 <syscall_memfd_create+0x18>
  139468:	ebffff8c 	bl	1392a0 <syscall_trace>
  13946c:	e3a00000 	mov	r0, #0
  139470:	e8bd8010 	pop	{r4, pc}
  139474:	0014c5a8 	.word	0x0014c5a8

00139478 <syscall_seccomp>:
  139478:	e92d4010 	push	{r4, lr}
  13947c:	e3a01010 	mov	r1, #16
  139480:	e59f0008 	ldr	r0, [pc, #8]	; 139490 <syscall_seccomp+0x18>
  139484:	ebffff85 	bl	1392a0 <syscall_trace>
  139488:	e3a00000 	mov	r0, #0
  13948c:	e8bd8010 	pop	{r4, pc}
  139490:	0014c584 	.word	0x0014c584

00139494 <syscall_renameat2>:
  139494:	e92d4010 	push	{r4, lr}
  139498:	e3a01012 	mov	r1, #18
  13949c:	e59f0008 	ldr	r0, [pc, #8]	; 1394ac <syscall_renameat2+0x18>
  1394a0:	ebffff7e 	bl	1392a0 <syscall_trace>
  1394a4:	e3a00000 	mov	r0, #0
  1394a8:	e8bd8010 	pop	{r4, pc}
  1394ac:	0014c570 	.word	0x0014c570

001394b0 <syscall_sched_getattr>:
  1394b0:	e92d4010 	push	{r4, lr}
  1394b4:	e3a01016 	mov	r1, #22
  1394b8:	e59f0008 	ldr	r0, [pc, #8]	; 1394c8 <syscall_sched_getattr+0x18>
  1394bc:	ebffff77 	bl	1392a0 <syscall_trace>
  1394c0:	e3a00000 	mov	r0, #0
  1394c4:	e8bd8010 	pop	{r4, pc}
  1394c8:	0014c558 	.word	0x0014c558

001394cc <syscall_sched_setattr>:
  1394cc:	e92d4010 	push	{r4, lr}
  1394d0:	e3a01016 	mov	r1, #22
  1394d4:	e59f0008 	ldr	r0, [pc, #8]	; 1394e4 <syscall_sched_setattr+0x18>
  1394d8:	ebffff70 	bl	1392a0 <syscall_trace>
  1394dc:	e3a00000 	mov	r0, #0
  1394e0:	e8bd8010 	pop	{r4, pc}
  1394e4:	0014c540 	.word	0x0014c540

001394e8 <syscall_finit_module>:
  1394e8:	e92d4010 	push	{r4, lr}
  1394ec:	e3a01015 	mov	r1, #21
  1394f0:	e59f0008 	ldr	r0, [pc, #8]	; 139500 <syscall_finit_module+0x18>
  1394f4:	ebffff69 	bl	1392a0 <syscall_trace>
  1394f8:	e3a00000 	mov	r0, #0
  1394fc:	e8bd8010 	pop	{r4, pc}
  139500:	0014c528 	.word	0x0014c528

00139504 <syscall_kcmp>:
  139504:	e92d4010 	push	{r4, lr}
  139508:	e3a0100d 	mov	r1, #13
  13950c:	e59f0008 	ldr	r0, [pc, #8]	; 13951c <syscall_kcmp+0x18>
  139510:	ebffff62 	bl	1392a0 <syscall_trace>
  139514:	e3a00000 	mov	r0, #0
  139518:	e8bd8010 	pop	{r4, pc}
  13951c:	0014c518 	.word	0x0014c518

00139520 <syscall_process_vm_writev>:
  139520:	e92d4010 	push	{r4, lr}
  139524:	e3a0101a 	mov	r1, #26
  139528:	e59f0008 	ldr	r0, [pc, #8]	; 139538 <syscall_process_vm_writev+0x18>
  13952c:	ebffff5b 	bl	1392a0 <syscall_trace>
  139530:	e3a00000 	mov	r0, #0
  139534:	e8bd8010 	pop	{r4, pc}
  139538:	0014c4fc 	.word	0x0014c4fc

0013953c <syscall_process_vm_readv>:
  13953c:	e92d4010 	push	{r4, lr}
  139540:	e3a01019 	mov	r1, #25
  139544:	e59f0008 	ldr	r0, [pc, #8]	; 139554 <syscall_process_vm_readv+0x18>
  139548:	ebffff54 	bl	1392a0 <syscall_trace>
  13954c:	e3a00000 	mov	r0, #0
  139550:	e8bd8010 	pop	{r4, pc}
  139554:	0014c4e0 	.word	0x0014c4e0

00139558 <syscall_setns>:
  139558:	e92d4010 	push	{r4, lr}
  13955c:	e3a0100e 	mov	r1, #14
  139560:	e59f0008 	ldr	r0, [pc, #8]	; 139570 <syscall_setns+0x18>
  139564:	ebffff4d 	bl	1392a0 <syscall_trace>
  139568:	e3a00000 	mov	r0, #0
  13956c:	e8bd8010 	pop	{r4, pc}
  139570:	0014c4d0 	.word	0x0014c4d0

00139574 <syscall_sendmmsg>:
  139574:	e92d4010 	push	{r4, lr}
  139578:	e3a01011 	mov	r1, #17
  13957c:	e59f0008 	ldr	r0, [pc, #8]	; 13958c <syscall_sendmmsg+0x18>
  139580:	ebffff46 	bl	1392a0 <syscall_trace>
  139584:	e3a00000 	mov	r0, #0
  139588:	e8bd8010 	pop	{r4, pc}
  13958c:	0014c4bc 	.word	0x0014c4bc

00139590 <syscall_syncfs>:
  139590:	e92d4010 	push	{r4, lr}
  139594:	e3a0100f 	mov	r1, #15
  139598:	e59f0008 	ldr	r0, [pc, #8]	; 1395a8 <syscall_syncfs+0x18>
  13959c:	ebffff3f 	bl	1392a0 <syscall_trace>
  1395a0:	e3a00000 	mov	r0, #0
  1395a4:	e8bd8010 	pop	{r4, pc}
  1395a8:	0014c4ac 	.word	0x0014c4ac

001395ac <syscall_clock_adjtime>:
  1395ac:	e92d4010 	push	{r4, lr}
  1395b0:	e3a01016 	mov	r1, #22
  1395b4:	e59f0008 	ldr	r0, [pc, #8]	; 1395c4 <syscall_clock_adjtime+0x18>
  1395b8:	ebffff38 	bl	1392a0 <syscall_trace>
  1395bc:	e3a00000 	mov	r0, #0
  1395c0:	e8bd8010 	pop	{r4, pc}
  1395c4:	0014c494 	.word	0x0014c494

001395c8 <syscall_open_by_handle_at>:
  1395c8:	e92d4010 	push	{r4, lr}
  1395cc:	e3a0101a 	mov	r1, #26
  1395d0:	e59f0008 	ldr	r0, [pc, #8]	; 1395e0 <syscall_open_by_handle_at+0x18>
  1395d4:	ebffff31 	bl	1392a0 <syscall_trace>
  1395d8:	e3a00000 	mov	r0, #0
  1395dc:	e8bd8010 	pop	{r4, pc}
  1395e0:	0014c478 	.word	0x0014c478

001395e4 <syscall_name_to_handle_at>:
  1395e4:	e92d4010 	push	{r4, lr}
  1395e8:	e3a0101a 	mov	r1, #26
  1395ec:	e59f0008 	ldr	r0, [pc, #8]	; 1395fc <syscall_name_to_handle_at+0x18>
  1395f0:	ebffff2a 	bl	1392a0 <syscall_trace>
  1395f4:	e3a00000 	mov	r0, #0
  1395f8:	e8bd8010 	pop	{r4, pc}
  1395fc:	0014c45c 	.word	0x0014c45c

00139600 <syscall_fanotify_mark>:
  139600:	e92d4010 	push	{r4, lr}
  139604:	e3a01016 	mov	r1, #22
  139608:	e59f0008 	ldr	r0, [pc, #8]	; 139618 <syscall_fanotify_mark+0x18>
  13960c:	ebffff23 	bl	1392a0 <syscall_trace>
  139610:	e3a00000 	mov	r0, #0
  139614:	e8bd8010 	pop	{r4, pc}
  139618:	0014c430 	.word	0x0014c430

0013961c <syscall_fanotify_init>:
  13961c:	e92d4010 	push	{r4, lr}
  139620:	e3a01016 	mov	r1, #22
  139624:	e59f0008 	ldr	r0, [pc, #8]	; 139634 <syscall_fanotify_init+0x18>
  139628:	ebffff1c 	bl	1392a0 <syscall_trace>
  13962c:	e3a00000 	mov	r0, #0
  139630:	e8bd8010 	pop	{r4, pc}
  139634:	0014c418 	.word	0x0014c418

00139638 <syscall_accept4>:
  139638:	e92d4010 	push	{r4, lr}
  13963c:	e3a01010 	mov	r1, #16
  139640:	e59f0008 	ldr	r0, [pc, #8]	; 139650 <syscall_accept4+0x18>
  139644:	ebffff15 	bl	1392a0 <syscall_trace>
  139648:	e3a00000 	mov	r0, #0
  13964c:	e8bd8010 	pop	{r4, pc}
  139650:	0014c408 	.word	0x0014c408

00139654 <syscall_recvmmsg>:
  139654:	e92d4010 	push	{r4, lr}
  139658:	e3a01011 	mov	r1, #17
  13965c:	e59f0008 	ldr	r0, [pc, #8]	; 13966c <syscall_recvmmsg+0x18>
  139660:	ebffff0e 	bl	1392a0 <syscall_trace>
  139664:	e3a00000 	mov	r0, #0
  139668:	e8bd8010 	pop	{r4, pc}
  13966c:	0014c3f4 	.word	0x0014c3f4

00139670 <syscall_perf_event_open>:
  139670:	e92d4010 	push	{r4, lr}
  139674:	e3a01018 	mov	r1, #24
  139678:	e59f0008 	ldr	r0, [pc, #8]	; 139688 <syscall_perf_event_open+0x18>
  13967c:	ebffff07 	bl	1392a0 <syscall_trace>
  139680:	e3a00000 	mov	r0, #0
  139684:	e8bd8010 	pop	{r4, pc}
  139688:	0014c3dc 	.word	0x0014c3dc

0013968c <syscall_rt_tgsigqueueinfo>:
  13968c:	e92d4010 	push	{r4, lr}
  139690:	e3a0101a 	mov	r1, #26
  139694:	e59f0008 	ldr	r0, [pc, #8]	; 1396a4 <syscall_rt_tgsigqueueinfo+0x18>
  139698:	ebffff00 	bl	1392a0 <syscall_trace>
  13969c:	e3a00000 	mov	r0, #0
  1396a0:	e8bd8010 	pop	{r4, pc}
  1396a4:	0014c3c0 	.word	0x0014c3c0

001396a8 <syscall_pwritev>:
  1396a8:	e92d4010 	push	{r4, lr}
  1396ac:	e3a01010 	mov	r1, #16
  1396b0:	e59f0008 	ldr	r0, [pc, #8]	; 1396c0 <syscall_pwritev+0x18>
  1396b4:	ebfffef9 	bl	1392a0 <syscall_trace>
  1396b8:	e3a00000 	mov	r0, #0
  1396bc:	e8bd8010 	pop	{r4, pc}
  1396c0:	0014c3b0 	.word	0x0014c3b0

001396c4 <syscall_preadv>:
  1396c4:	e92d4010 	push	{r4, lr}
  1396c8:	e3a0100f 	mov	r1, #15
  1396cc:	e59f0008 	ldr	r0, [pc, #8]	; 1396dc <syscall_preadv+0x18>
  1396d0:	ebfffef2 	bl	1392a0 <syscall_trace>
  1396d4:	e3a00000 	mov	r0, #0
  1396d8:	e8bd8010 	pop	{r4, pc}
  1396dc:	0014c3a0 	.word	0x0014c3a0

001396e0 <syscall_inotify_init1>:
  1396e0:	e92d4010 	push	{r4, lr}
  1396e4:	e3a01016 	mov	r1, #22
  1396e8:	e59f0008 	ldr	r0, [pc, #8]	; 1396f8 <syscall_inotify_init1+0x18>
  1396ec:	ebfffeeb 	bl	1392a0 <syscall_trace>
  1396f0:	e3a00000 	mov	r0, #0
  1396f4:	e8bd8010 	pop	{r4, pc}
  1396f8:	0014c388 	.word	0x0014c388

001396fc <syscall_pipe2>:
  1396fc:	e92d4010 	push	{r4, lr}
  139700:	e3a0100e 	mov	r1, #14
  139704:	e59f0008 	ldr	r0, [pc, #8]	; 139714 <syscall_pipe2+0x18>
  139708:	ebfffee4 	bl	1392a0 <syscall_trace>
  13970c:	e3a00000 	mov	r0, #0
  139710:	e8bd8010 	pop	{r4, pc}
  139714:	0014c378 	.word	0x0014c378

00139718 <syscall_dup3>:
  139718:	e92d4010 	push	{r4, lr}
  13971c:	e3a0100d 	mov	r1, #13
  139720:	e59f0008 	ldr	r0, [pc, #8]	; 139730 <syscall_dup3+0x18>
  139724:	ebfffedd 	bl	1392a0 <syscall_trace>
  139728:	e3a00000 	mov	r0, #0
  13972c:	e8bd8010 	pop	{r4, pc}
  139730:	0014c368 	.word	0x0014c368

00139734 <syscall_epoll_create1>:
  139734:	e92d4010 	push	{r4, lr}
  139738:	e3a01016 	mov	r1, #22
  13973c:	e59f0008 	ldr	r0, [pc, #8]	; 13974c <syscall_epoll_create1+0x18>
  139740:	ebfffed6 	bl	1392a0 <syscall_trace>
  139744:	e3e00025 	mvn	r0, #37	; 0x25
  139748:	e8bd8010 	pop	{r4, pc}
  13974c:	0014c350 	.word	0x0014c350

00139750 <syscall_eventfd2>:
  139750:	e92d4010 	push	{r4, lr}
  139754:	e3a01011 	mov	r1, #17
  139758:	e59f0008 	ldr	r0, [pc, #8]	; 139768 <syscall_eventfd2+0x18>
  13975c:	ebfffecf 	bl	1392a0 <syscall_trace>
  139760:	e3a00000 	mov	r0, #0
  139764:	e8bd8010 	pop	{r4, pc}
  139768:	0014c33c 	.word	0x0014c33c

0013976c <syscall_signalfd4>:
  13976c:	e92d4010 	push	{r4, lr}
  139770:	e3a01012 	mov	r1, #18
  139774:	e59f0008 	ldr	r0, [pc, #8]	; 139784 <syscall_signalfd4+0x18>
  139778:	ebfffec8 	bl	1392a0 <syscall_trace>
  13977c:	e3a00000 	mov	r0, #0
  139780:	e8bd8010 	pop	{r4, pc}
  139784:	0014c328 	.word	0x0014c328

00139788 <syscall_timerfd_gettime>:
  139788:	e92d4010 	push	{r4, lr}
  13978c:	e3a01018 	mov	r1, #24
  139790:	e59f0008 	ldr	r0, [pc, #8]	; 1397a0 <syscall_timerfd_gettime+0x18>
  139794:	ebfffec1 	bl	1392a0 <syscall_trace>
  139798:	e3a00000 	mov	r0, #0
  13979c:	e8bd8010 	pop	{r4, pc}
  1397a0:	0014c310 	.word	0x0014c310

001397a4 <syscall_timerfd_settime>:
  1397a4:	e92d4010 	push	{r4, lr}
  1397a8:	e3a01018 	mov	r1, #24
  1397ac:	e59f0008 	ldr	r0, [pc, #8]	; 1397bc <syscall_timerfd_settime+0x18>
  1397b0:	ebfffeba 	bl	1392a0 <syscall_trace>
  1397b4:	e3a00000 	mov	r0, #0
  1397b8:	e8bd8010 	pop	{r4, pc}
  1397bc:	0014c2f8 	.word	0x0014c2f8

001397c0 <syscall_fallocate>:
  1397c0:	e92d4010 	push	{r4, lr}
  1397c4:	e3a01012 	mov	r1, #18
  1397c8:	e59f0008 	ldr	r0, [pc, #8]	; 1397d8 <syscall_fallocate+0x18>
  1397cc:	ebfffeb3 	bl	1392a0 <syscall_trace>
  1397d0:	e3a00000 	mov	r0, #0
  1397d4:	e8bd8010 	pop	{r4, pc}
  1397d8:	0014c2e4 	.word	0x0014c2e4

001397dc <syscall_eventfd>:
  1397dc:	e92d4010 	push	{r4, lr}
  1397e0:	e3a01010 	mov	r1, #16
  1397e4:	e59f0008 	ldr	r0, [pc, #8]	; 1397f4 <syscall_eventfd+0x18>
  1397e8:	ebfffeac 	bl	1392a0 <syscall_trace>
  1397ec:	e3a00000 	mov	r0, #0
  1397f0:	e8bd8010 	pop	{r4, pc}
  1397f4:	0014c2d4 	.word	0x0014c2d4

001397f8 <syscall_timerfd_create>:
  1397f8:	e92d4010 	push	{r4, lr}
  1397fc:	e3a01017 	mov	r1, #23
  139800:	e59f0008 	ldr	r0, [pc, #8]	; 139810 <syscall_timerfd_create+0x18>
  139804:	ebfffea5 	bl	1392a0 <syscall_trace>
  139808:	e3a00000 	mov	r0, #0
  13980c:	e8bd8010 	pop	{r4, pc}
  139810:	0014c2bc 	.word	0x0014c2bc

00139814 <syscall_signalfd>:
  139814:	e92d4010 	push	{r4, lr}
  139818:	e3a01011 	mov	r1, #17
  13981c:	e59f0008 	ldr	r0, [pc, #8]	; 13982c <syscall_signalfd+0x18>
  139820:	ebfffe9e 	bl	1392a0 <syscall_trace>
  139824:	e3a00000 	mov	r0, #0
  139828:	e8bd8010 	pop	{r4, pc}
  13982c:	0014c2a8 	.word	0x0014c2a8

00139830 <syscall_utimensat>:
  139830:	e92d4010 	push	{r4, lr}
  139834:	e3a01012 	mov	r1, #18
  139838:	e59f0008 	ldr	r0, [pc, #8]	; 139848 <syscall_utimensat+0x18>
  13983c:	ebfffe97 	bl	1392a0 <syscall_trace>
  139840:	e3a00000 	mov	r0, #0
  139844:	e8bd8010 	pop	{r4, pc}
  139848:	0014c294 	.word	0x0014c294

0013984c <syscall_kexec_load>:
  13984c:	e92d4010 	push	{r4, lr}
  139850:	e3a01013 	mov	r1, #19
  139854:	e59f0008 	ldr	r0, [pc, #8]	; 139864 <syscall_kexec_load+0x18>
  139858:	ebfffe90 	bl	1392a0 <syscall_trace>
  13985c:	e3a00000 	mov	r0, #0
  139860:	e8bd8010 	pop	{r4, pc}
  139864:	0014c280 	.word	0x0014c280

00139868 <syscall_epoll_pwait>:
  139868:	e92d4010 	push	{r4, lr}
  13986c:	e3a01014 	mov	r1, #20
  139870:	e59f0008 	ldr	r0, [pc, #8]	; 139880 <syscall_epoll_pwait+0x18>
  139874:	ebfffe89 	bl	1392a0 <syscall_trace>
  139878:	e3e00025 	mvn	r0, #37	; 0x25
  13987c:	e8bd8010 	pop	{r4, pc}
  139880:	0014c26c 	.word	0x0014c26c

00139884 <syscall_getcpu>:
  139884:	e92d4010 	push	{r4, lr}
  139888:	e3a0100f 	mov	r1, #15
  13988c:	e59f0008 	ldr	r0, [pc, #8]	; 13989c <syscall_getcpu+0x18>
  139890:	ebfffe82 	bl	1392a0 <syscall_trace>
  139894:	e3a00000 	mov	r0, #0
  139898:	e8bd8010 	pop	{r4, pc}
  13989c:	0014c25c 	.word	0x0014c25c

001398a0 <syscall_move_pages>:
  1398a0:	e92d4010 	push	{r4, lr}
  1398a4:	e3a01013 	mov	r1, #19
  1398a8:	e59f0008 	ldr	r0, [pc, #8]	; 1398b8 <syscall_move_pages+0x18>
  1398ac:	ebfffe7b 	bl	1392a0 <syscall_trace>
  1398b0:	e3a00000 	mov	r0, #0
  1398b4:	e8bd8010 	pop	{r4, pc}
  1398b8:	0014c248 	.word	0x0014c248

001398bc <syscall_vmsplice>:
  1398bc:	e92d4010 	push	{r4, lr}
  1398c0:	e3a01011 	mov	r1, #17
  1398c4:	e59f0008 	ldr	r0, [pc, #8]	; 1398d4 <syscall_vmsplice+0x18>
  1398c8:	ebfffe74 	bl	1392a0 <syscall_trace>
  1398cc:	e3a00000 	mov	r0, #0
  1398d0:	e8bd8010 	pop	{r4, pc}
  1398d4:	0014c234 	.word	0x0014c234

001398d8 <syscall_tee>:
  1398d8:	e92d4010 	push	{r4, lr}
  1398dc:	e3a0100c 	mov	r1, #12
  1398e0:	e59f0008 	ldr	r0, [pc, #8]	; 1398f0 <syscall_tee+0x18>
  1398e4:	ebfffe6d 	bl	1392a0 <syscall_trace>
  1398e8:	e3a00000 	mov	r0, #0
  1398ec:	e8bd8010 	pop	{r4, pc}
  1398f0:	0014c228 	.word	0x0014c228

001398f4 <syscall_arm_sync_file_range>:
  1398f4:	e92d4010 	push	{r4, lr}
  1398f8:	e3a0101c 	mov	r1, #28
  1398fc:	e59f0008 	ldr	r0, [pc, #8]	; 13990c <syscall_arm_sync_file_range+0x18>
  139900:	ebfffe66 	bl	1392a0 <syscall_trace>
  139904:	e3a00000 	mov	r0, #0
  139908:	e8bd8010 	pop	{r4, pc}
  13990c:	0014c20c 	.word	0x0014c20c

00139910 <syscall_splice>:
  139910:	e92d4010 	push	{r4, lr}
  139914:	e3a0100f 	mov	r1, #15
  139918:	e59f0008 	ldr	r0, [pc, #8]	; 139928 <syscall_splice+0x18>
  13991c:	ebfffe5f 	bl	1392a0 <syscall_trace>
  139920:	e3a00000 	mov	r0, #0
  139924:	e8bd8010 	pop	{r4, pc}
  139928:	0014c1fc 	.word	0x0014c1fc

0013992c <syscall_get_robust_list>:
  13992c:	e92d4010 	push	{r4, lr}
  139930:	e3a01018 	mov	r1, #24
  139934:	e59f0008 	ldr	r0, [pc, #8]	; 139944 <syscall_get_robust_list+0x18>
  139938:	ebfffe58 	bl	1392a0 <syscall_trace>
  13993c:	e3a00000 	mov	r0, #0
  139940:	e8bd8010 	pop	{r4, pc}
  139944:	0014c1e4 	.word	0x0014c1e4

00139948 <syscall_set_robust_list>:
  139948:	e92d4010 	push	{r4, lr}
  13994c:	e3a01018 	mov	r1, #24
  139950:	e59f0008 	ldr	r0, [pc, #8]	; 139960 <syscall_set_robust_list+0x18>
  139954:	ebfffe51 	bl	1392a0 <syscall_trace>
  139958:	e3a00000 	mov	r0, #0
  13995c:	e8bd8010 	pop	{r4, pc}
  139960:	0014c1cc 	.word	0x0014c1cc

00139964 <syscall_unshare>:
  139964:	e92d4010 	push	{r4, lr}
  139968:	e3a01010 	mov	r1, #16
  13996c:	e59f0008 	ldr	r0, [pc, #8]	; 13997c <syscall_unshare+0x18>
  139970:	ebfffe4a 	bl	1392a0 <syscall_trace>
  139974:	e3a00000 	mov	r0, #0
  139978:	e8bd8010 	pop	{r4, pc}
  13997c:	0014c1bc 	.word	0x0014c1bc

00139980 <syscall_ppoll>:
  139980:	e92d4010 	push	{r4, lr}
  139984:	e3a0100e 	mov	r1, #14
  139988:	e59f0008 	ldr	r0, [pc, #8]	; 139998 <syscall_ppoll+0x18>
  13998c:	ebfffe43 	bl	1392a0 <syscall_trace>
  139990:	e3a00000 	mov	r0, #0
  139994:	e8bd8010 	pop	{r4, pc}
  139998:	0014c1ac 	.word	0x0014c1ac

0013999c <syscall_pselect6>:
  13999c:	e92d4010 	push	{r4, lr}
  1399a0:	e3a01011 	mov	r1, #17
  1399a4:	e59f0008 	ldr	r0, [pc, #8]	; 1399b4 <syscall_pselect6+0x18>
  1399a8:	ebfffe3c 	bl	1392a0 <syscall_trace>
  1399ac:	e3a00000 	mov	r0, #0
  1399b0:	e8bd8010 	pop	{r4, pc}
  1399b4:	0014c198 	.word	0x0014c198

001399b8 <syscall_faccessat>:
  1399b8:	e92d4010 	push	{r4, lr}
  1399bc:	e3a01012 	mov	r1, #18
  1399c0:	e59f0008 	ldr	r0, [pc, #8]	; 1399d0 <syscall_faccessat+0x18>
  1399c4:	ebfffe35 	bl	1392a0 <syscall_trace>
  1399c8:	e3a00000 	mov	r0, #0
  1399cc:	e8bd8010 	pop	{r4, pc}
  1399d0:	0014c184 	.word	0x0014c184

001399d4 <syscall_fchmodat>:
  1399d4:	e92d4010 	push	{r4, lr}
  1399d8:	e3a01011 	mov	r1, #17
  1399dc:	e59f0008 	ldr	r0, [pc, #8]	; 1399ec <syscall_fchmodat+0x18>
  1399e0:	ebfffe2e 	bl	1392a0 <syscall_trace>
  1399e4:	e3a00000 	mov	r0, #0
  1399e8:	e8bd8010 	pop	{r4, pc}
  1399ec:	0014c170 	.word	0x0014c170

001399f0 <syscall_readlinkat>:
  1399f0:	e92d4010 	push	{r4, lr}
  1399f4:	e3a01013 	mov	r1, #19
  1399f8:	e59f0008 	ldr	r0, [pc, #8]	; 139a08 <syscall_readlinkat+0x18>
  1399fc:	ebfffe27 	bl	1392a0 <syscall_trace>
  139a00:	e3a00000 	mov	r0, #0
  139a04:	e8bd8010 	pop	{r4, pc}
  139a08:	0014c15c 	.word	0x0014c15c

00139a0c <syscall_symlinkat>:
  139a0c:	e92d4010 	push	{r4, lr}
  139a10:	e3a01012 	mov	r1, #18
  139a14:	e59f0008 	ldr	r0, [pc, #8]	; 139a24 <syscall_symlinkat+0x18>
  139a18:	ebfffe20 	bl	1392a0 <syscall_trace>
  139a1c:	e3a00000 	mov	r0, #0
  139a20:	e8bd8010 	pop	{r4, pc}
  139a24:	0014c148 	.word	0x0014c148

00139a28 <syscall_linkat>:
  139a28:	e92d4010 	push	{r4, lr}
  139a2c:	e3a0100f 	mov	r1, #15
  139a30:	e59f0008 	ldr	r0, [pc, #8]	; 139a40 <syscall_linkat+0x18>
  139a34:	ebfffe19 	bl	1392a0 <syscall_trace>
  139a38:	e3a00000 	mov	r0, #0
  139a3c:	e8bd8010 	pop	{r4, pc}
  139a40:	0014c138 	.word	0x0014c138

00139a44 <syscall_renameat>:
  139a44:	e92d4010 	push	{r4, lr}
  139a48:	e3a01011 	mov	r1, #17
  139a4c:	e59f0008 	ldr	r0, [pc, #8]	; 139a5c <syscall_renameat+0x18>
  139a50:	ebfffe12 	bl	1392a0 <syscall_trace>
  139a54:	e3a00000 	mov	r0, #0
  139a58:	e8bd8010 	pop	{r4, pc}
  139a5c:	0014c124 	.word	0x0014c124

00139a60 <syscall_unlinkat>:
  139a60:	e92d4010 	push	{r4, lr}
  139a64:	e3a01011 	mov	r1, #17
  139a68:	e59f0008 	ldr	r0, [pc, #8]	; 139a78 <syscall_unlinkat+0x18>
  139a6c:	ebfffe0b 	bl	1392a0 <syscall_trace>
  139a70:	e3a00000 	mov	r0, #0
  139a74:	e8bd8010 	pop	{r4, pc}
  139a78:	0014c110 	.word	0x0014c110

00139a7c <syscall_fstatat64>:
  139a7c:	e92d4010 	push	{r4, lr}
  139a80:	e3a01012 	mov	r1, #18
  139a84:	e59f0008 	ldr	r0, [pc, #8]	; 139a94 <syscall_fstatat64+0x18>
  139a88:	ebfffe04 	bl	1392a0 <syscall_trace>
  139a8c:	e3a00000 	mov	r0, #0
  139a90:	e8bd8010 	pop	{r4, pc}
  139a94:	0014c0fc 	.word	0x0014c0fc

00139a98 <syscall_futimesat>:
  139a98:	e92d4010 	push	{r4, lr}
  139a9c:	e3a01012 	mov	r1, #18
  139aa0:	e59f0008 	ldr	r0, [pc, #8]	; 139ab0 <syscall_futimesat+0x18>
  139aa4:	ebfffdfd 	bl	1392a0 <syscall_trace>
  139aa8:	e3a00000 	mov	r0, #0
  139aac:	e8bd8010 	pop	{r4, pc}
  139ab0:	0014c0e8 	.word	0x0014c0e8

00139ab4 <syscall_fchownat>:
  139ab4:	e92d4010 	push	{r4, lr}
  139ab8:	e3a01011 	mov	r1, #17
  139abc:	e59f0008 	ldr	r0, [pc, #8]	; 139acc <syscall_fchownat+0x18>
  139ac0:	ebfffdf6 	bl	1392a0 <syscall_trace>
  139ac4:	e3a00000 	mov	r0, #0
  139ac8:	e8bd8010 	pop	{r4, pc}
  139acc:	0014c0d4 	.word	0x0014c0d4

00139ad0 <syscall_mknodat>:
  139ad0:	e92d4010 	push	{r4, lr}
  139ad4:	e3a01010 	mov	r1, #16
  139ad8:	e59f0008 	ldr	r0, [pc, #8]	; 139ae8 <syscall_mknodat+0x18>
  139adc:	ebfffdef 	bl	1392a0 <syscall_trace>
  139ae0:	e3a00000 	mov	r0, #0
  139ae4:	e8bd8010 	pop	{r4, pc}
  139ae8:	0014c0c4 	.word	0x0014c0c4

00139aec <syscall_mkdirat>:
  139aec:	e92d4010 	push	{r4, lr}
  139af0:	e3a01010 	mov	r1, #16
  139af4:	e59f0008 	ldr	r0, [pc, #8]	; 139b04 <syscall_mkdirat+0x18>
  139af8:	ebfffde8 	bl	1392a0 <syscall_trace>
  139afc:	e3a00000 	mov	r0, #0
  139b00:	e8bd8010 	pop	{r4, pc}
  139b04:	0014c0b4 	.word	0x0014c0b4

00139b08 <syscall_openat>:
  139b08:	e92d4010 	push	{r4, lr}
  139b0c:	e3a0100f 	mov	r1, #15
  139b10:	e59f0008 	ldr	r0, [pc, #8]	; 139b20 <syscall_openat+0x18>
  139b14:	ebfffde1 	bl	1392a0 <syscall_trace>
  139b18:	e3a00000 	mov	r0, #0
  139b1c:	e8bd8010 	pop	{r4, pc}
  139b20:	0014c0a4 	.word	0x0014c0a4

00139b24 <syscall_set_mempolicy>:
  139b24:	e92d4010 	push	{r4, lr}
  139b28:	e3a01016 	mov	r1, #22
  139b2c:	e59f0008 	ldr	r0, [pc, #8]	; 139b3c <syscall_set_mempolicy+0x18>
  139b30:	ebfffdda 	bl	1392a0 <syscall_trace>
  139b34:	e3a00000 	mov	r0, #0
  139b38:	e8bd8010 	pop	{r4, pc}
  139b3c:	0014c08c 	.word	0x0014c08c

00139b40 <syscall_get_mempolicy>:
  139b40:	e92d4010 	push	{r4, lr}
  139b44:	e3a01016 	mov	r1, #22
  139b48:	e59f0008 	ldr	r0, [pc, #8]	; 139b58 <syscall_get_mempolicy+0x18>
  139b4c:	ebfffdd3 	bl	1392a0 <syscall_trace>
  139b50:	e3a00000 	mov	r0, #0
  139b54:	e8bd8010 	pop	{r4, pc}
  139b58:	0014c074 	.word	0x0014c074

00139b5c <syscall_mbind>:
  139b5c:	e92d4010 	push	{r4, lr}
  139b60:	e3a0100e 	mov	r1, #14
  139b64:	e59f0008 	ldr	r0, [pc, #8]	; 139b74 <syscall_mbind+0x18>
  139b68:	ebfffdcc 	bl	1392a0 <syscall_trace>
  139b6c:	e3a00000 	mov	r0, #0
  139b70:	e8bd8010 	pop	{r4, pc}
  139b74:	0014c064 	.word	0x0014c064

00139b78 <syscall_inotify_rm_watch>:
  139b78:	e92d4010 	push	{r4, lr}
  139b7c:	e3a01019 	mov	r1, #25
  139b80:	e59f0008 	ldr	r0, [pc, #8]	; 139b90 <syscall_inotify_rm_watch+0x18>
  139b84:	ebfffdc5 	bl	1392a0 <syscall_trace>
  139b88:	e3a00000 	mov	r0, #0
  139b8c:	e8bd8010 	pop	{r4, pc}
  139b90:	0014c048 	.word	0x0014c048

00139b94 <syscall_inotify_add_watch>:
  139b94:	e92d4010 	push	{r4, lr}
  139b98:	e3a0101a 	mov	r1, #26
  139b9c:	e59f0008 	ldr	r0, [pc, #8]	; 139bac <syscall_inotify_add_watch+0x18>
  139ba0:	ebfffdbe 	bl	1392a0 <syscall_trace>
  139ba4:	e3a00000 	mov	r0, #0
  139ba8:	e8bd8010 	pop	{r4, pc}
  139bac:	0014c02c 	.word	0x0014c02c

00139bb0 <syscall_inotify_init>:
  139bb0:	e92d4010 	push	{r4, lr}
  139bb4:	e3a01015 	mov	r1, #21
  139bb8:	e59f0008 	ldr	r0, [pc, #8]	; 139bc8 <syscall_inotify_init+0x18>
  139bbc:	ebfffdb7 	bl	1392a0 <syscall_trace>
  139bc0:	e3a00000 	mov	r0, #0
  139bc4:	e8bd8010 	pop	{r4, pc}
  139bc8:	0014c014 	.word	0x0014c014

00139bcc <syscall_ioprio_get>:
  139bcc:	e92d4010 	push	{r4, lr}
  139bd0:	e3a01013 	mov	r1, #19
  139bd4:	e59f0008 	ldr	r0, [pc, #8]	; 139be4 <syscall_ioprio_get+0x18>
  139bd8:	ebfffdb0 	bl	1392a0 <syscall_trace>
  139bdc:	e3a00000 	mov	r0, #0
  139be0:	e8bd8010 	pop	{r4, pc}
  139be4:	0014c000 	.word	0x0014c000

00139be8 <syscall_ioprio_set>:
  139be8:	e92d4010 	push	{r4, lr}
  139bec:	e3a01013 	mov	r1, #19
  139bf0:	e59f0008 	ldr	r0, [pc, #8]	; 139c00 <syscall_ioprio_set+0x18>
  139bf4:	ebfffda9 	bl	1392a0 <syscall_trace>
  139bf8:	e3a00000 	mov	r0, #0
  139bfc:	e8bd8010 	pop	{r4, pc}
  139c00:	0014bfec 	.word	0x0014bfec

00139c04 <syscall_vserver>:
  139c04:	e92d4010 	push	{r4, lr}
  139c08:	e3a01010 	mov	r1, #16
  139c0c:	e59f0008 	ldr	r0, [pc, #8]	; 139c1c <syscall_vserver+0x18>
  139c10:	ebfffda2 	bl	1392a0 <syscall_trace>
  139c14:	e3a00000 	mov	r0, #0
  139c18:	e8bd8010 	pop	{r4, pc}
  139c1c:	0014bfdc 	.word	0x0014bfdc

00139c20 <syscall_semtimedop>:
  139c20:	e92d4010 	push	{r4, lr}
  139c24:	e3a01013 	mov	r1, #19
  139c28:	e59f0008 	ldr	r0, [pc, #8]	; 139c38 <syscall_semtimedop+0x18>
  139c2c:	ebfffd9b 	bl	1392a0 <syscall_trace>
  139c30:	e3a00000 	mov	r0, #0
  139c34:	e8bd8010 	pop	{r4, pc}
  139c38:	0014bfc8 	.word	0x0014bfc8

00139c3c <syscall_keyctl>:
  139c3c:	e92d4010 	push	{r4, lr}
  139c40:	e3a0100f 	mov	r1, #15
  139c44:	e59f0008 	ldr	r0, [pc, #8]	; 139c54 <syscall_keyctl+0x18>
  139c48:	ebfffd94 	bl	1392a0 <syscall_trace>
  139c4c:	e3a00000 	mov	r0, #0
  139c50:	e8bd8010 	pop	{r4, pc}
  139c54:	0014bfb8 	.word	0x0014bfb8

00139c58 <syscall_request_key>:
  139c58:	e92d4010 	push	{r4, lr}
  139c5c:	e3a01014 	mov	r1, #20
  139c60:	e59f0008 	ldr	r0, [pc, #8]	; 139c70 <syscall_request_key+0x18>
  139c64:	ebfffd8d 	bl	1392a0 <syscall_trace>
  139c68:	e3a00000 	mov	r0, #0
  139c6c:	e8bd8010 	pop	{r4, pc}
  139c70:	0014bfa4 	.word	0x0014bfa4

00139c74 <syscall_add_key>:
  139c74:	e92d4010 	push	{r4, lr}
  139c78:	e3a01010 	mov	r1, #16
  139c7c:	e59f0008 	ldr	r0, [pc, #8]	; 139c8c <syscall_add_key+0x18>
  139c80:	ebfffd86 	bl	1392a0 <syscall_trace>
  139c84:	e3a00000 	mov	r0, #0
  139c88:	e8bd8010 	pop	{r4, pc}
  139c8c:	0014bf94 	.word	0x0014bf94

00139c90 <syscall_msgctl>:
  139c90:	e92d4010 	push	{r4, lr}
  139c94:	e3a0100f 	mov	r1, #15
  139c98:	e59f0008 	ldr	r0, [pc, #8]	; 139ca8 <syscall_msgctl+0x18>
  139c9c:	ebfffd7f 	bl	1392a0 <syscall_trace>
  139ca0:	e3a00000 	mov	r0, #0
  139ca4:	e8bd8010 	pop	{r4, pc}
  139ca8:	0014bf44 	.word	0x0014bf44

00139cac <syscall_msgget>:
  139cac:	e92d4010 	push	{r4, lr}
  139cb0:	e3a0100f 	mov	r1, #15
  139cb4:	e59f0008 	ldr	r0, [pc, #8]	; 139cc4 <syscall_msgget+0x18>
  139cb8:	ebfffd78 	bl	1392a0 <syscall_trace>
  139cbc:	e3a00000 	mov	r0, #0
  139cc0:	e8bd8010 	pop	{r4, pc}
  139cc4:	0014bf34 	.word	0x0014bf34

00139cc8 <syscall_msgrcv>:
  139cc8:	e92d4010 	push	{r4, lr}
  139ccc:	e3a0100f 	mov	r1, #15
  139cd0:	e59f0008 	ldr	r0, [pc, #8]	; 139ce0 <syscall_msgrcv+0x18>
  139cd4:	ebfffd71 	bl	1392a0 <syscall_trace>
  139cd8:	e3a00000 	mov	r0, #0
  139cdc:	e8bd8010 	pop	{r4, pc}
  139ce0:	0014bf24 	.word	0x0014bf24

00139ce4 <syscall_msgsnd>:
  139ce4:	e92d4010 	push	{r4, lr}
  139ce8:	e3a0100f 	mov	r1, #15
  139cec:	e59f0008 	ldr	r0, [pc, #8]	; 139cfc <syscall_msgsnd+0x18>
  139cf0:	ebfffd6a 	bl	1392a0 <syscall_trace>
  139cf4:	e3a00000 	mov	r0, #0
  139cf8:	e8bd8010 	pop	{r4, pc}
  139cfc:	0014bf14 	.word	0x0014bf14

00139d00 <syscall_semctl>:
  139d00:	e92d4010 	push	{r4, lr}
  139d04:	e3a0100f 	mov	r1, #15
  139d08:	e59f0008 	ldr	r0, [pc, #8]	; 139d18 <syscall_semctl+0x18>
  139d0c:	ebfffd63 	bl	1392a0 <syscall_trace>
  139d10:	e3a00000 	mov	r0, #0
  139d14:	e8bd8010 	pop	{r4, pc}
  139d18:	0014bf04 	.word	0x0014bf04

00139d1c <syscall_semget>:
  139d1c:	e92d4010 	push	{r4, lr}
  139d20:	e3a0100f 	mov	r1, #15
  139d24:	e59f0008 	ldr	r0, [pc, #8]	; 139d34 <syscall_semget+0x18>
  139d28:	ebfffd5c 	bl	1392a0 <syscall_trace>
  139d2c:	e3a00000 	mov	r0, #0
  139d30:	e8bd8010 	pop	{r4, pc}
  139d34:	0014bef4 	.word	0x0014bef4

00139d38 <syscall_semop>:
  139d38:	e92d4010 	push	{r4, lr}
  139d3c:	e3a0100e 	mov	r1, #14
  139d40:	e59f0008 	ldr	r0, [pc, #8]	; 139d50 <syscall_semop+0x18>
  139d44:	ebfffd55 	bl	1392a0 <syscall_trace>
  139d48:	e3a00000 	mov	r0, #0
  139d4c:	e8bd8010 	pop	{r4, pc}
  139d50:	0014bee4 	.word	0x0014bee4

00139d54 <syscall_recvmsg>:
  139d54:	e92d4010 	push	{r4, lr}
  139d58:	e3a01010 	mov	r1, #16
  139d5c:	e59f0008 	ldr	r0, [pc, #8]	; 139d6c <syscall_recvmsg+0x18>
  139d60:	ebfffd4e 	bl	1392a0 <syscall_trace>
  139d64:	e3a00000 	mov	r0, #0
  139d68:	e8bd8010 	pop	{r4, pc}
  139d6c:	0014bed4 	.word	0x0014bed4

00139d70 <syscall_sendmsg>:
  139d70:	e92d4010 	push	{r4, lr}
  139d74:	e3a01010 	mov	r1, #16
  139d78:	e59f0008 	ldr	r0, [pc, #8]	; 139d88 <syscall_sendmsg+0x18>
  139d7c:	ebfffd47 	bl	1392a0 <syscall_trace>
  139d80:	e3a00000 	mov	r0, #0
  139d84:	e8bd8010 	pop	{r4, pc}
  139d88:	0014bec4 	.word	0x0014bec4

00139d8c <syscall_shutdown>:
  139d8c:	e92d4010 	push	{r4, lr}
  139d90:	e3a01011 	mov	r1, #17
  139d94:	e59f0008 	ldr	r0, [pc, #8]	; 139da4 <syscall_shutdown+0x18>
  139d98:	ebfffd40 	bl	1392a0 <syscall_trace>
  139d9c:	e3a00000 	mov	r0, #0
  139da0:	e8bd8010 	pop	{r4, pc}
  139da4:	0014be88 	.word	0x0014be88

00139da8 <syscall_socketpair>:
  139da8:	e92d4010 	push	{r4, lr}
  139dac:	e3a01013 	mov	r1, #19
  139db0:	e59f0008 	ldr	r0, [pc, #8]	; 139dc0 <syscall_socketpair+0x18>
  139db4:	ebfffd39 	bl	1392a0 <syscall_trace>
  139db8:	e3a00000 	mov	r0, #0
  139dbc:	e8bd8010 	pop	{r4, pc}
  139dc0:	0014be30 	.word	0x0014be30

00139dc4 <syscall_waitid>:
  139dc4:	e92d4010 	push	{r4, lr}
  139dc8:	e3a0100f 	mov	r1, #15
  139dcc:	e59f0008 	ldr	r0, [pc, #8]	; 139ddc <syscall_waitid+0x18>
  139dd0:	ebfffd32 	bl	1392a0 <syscall_trace>
  139dd4:	e3a00000 	mov	r0, #0
  139dd8:	e8bd8010 	pop	{r4, pc}
  139ddc:	0014bda8 	.word	0x0014bda8

00139de0 <syscall_mq_getsetattr>:
  139de0:	e92d4010 	push	{r4, lr}
  139de4:	e3a01016 	mov	r1, #22
  139de8:	e59f0008 	ldr	r0, [pc, #8]	; 139df8 <syscall_mq_getsetattr+0x18>
  139dec:	ebfffd2b 	bl	1392a0 <syscall_trace>
  139df0:	e3a00000 	mov	r0, #0
  139df4:	e8bd8010 	pop	{r4, pc}
  139df8:	0014bd90 	.word	0x0014bd90

00139dfc <syscall_mq_notify>:
  139dfc:	e92d4010 	push	{r4, lr}
  139e00:	e3a01012 	mov	r1, #18
  139e04:	e59f0008 	ldr	r0, [pc, #8]	; 139e14 <syscall_mq_notify+0x18>
  139e08:	ebfffd24 	bl	1392a0 <syscall_trace>
  139e0c:	e3a00000 	mov	r0, #0
  139e10:	e8bd8010 	pop	{r4, pc}
  139e14:	0014bd7c 	.word	0x0014bd7c

00139e18 <syscall_mq_timedreceive>:
  139e18:	e92d4010 	push	{r4, lr}
  139e1c:	e3a01018 	mov	r1, #24
  139e20:	e59f0008 	ldr	r0, [pc, #8]	; 139e30 <syscall_mq_timedreceive+0x18>
  139e24:	ebfffd1d 	bl	1392a0 <syscall_trace>
  139e28:	e3a00000 	mov	r0, #0
  139e2c:	e8bd8010 	pop	{r4, pc}
  139e30:	0014bd64 	.word	0x0014bd64

00139e34 <syscall_mq_timedsend>:
  139e34:	e92d4010 	push	{r4, lr}
  139e38:	e3a01015 	mov	r1, #21
  139e3c:	e59f0008 	ldr	r0, [pc, #8]	; 139e4c <syscall_mq_timedsend+0x18>
  139e40:	ebfffd16 	bl	1392a0 <syscall_trace>
  139e44:	e3a00000 	mov	r0, #0
  139e48:	e8bd8010 	pop	{r4, pc}
  139e4c:	0014bd4c 	.word	0x0014bd4c

00139e50 <syscall_mq_unlink>:
  139e50:	e92d4010 	push	{r4, lr}
  139e54:	e3a01012 	mov	r1, #18
  139e58:	e59f0008 	ldr	r0, [pc, #8]	; 139e68 <syscall_mq_unlink+0x18>
  139e5c:	ebfffd0f 	bl	1392a0 <syscall_trace>
  139e60:	e3a00000 	mov	r0, #0
  139e64:	e8bd8010 	pop	{r4, pc}
  139e68:	0014bd38 	.word	0x0014bd38

00139e6c <syscall_mq_open>:
  139e6c:	e92d4010 	push	{r4, lr}
  139e70:	e3a01010 	mov	r1, #16
  139e74:	e59f0008 	ldr	r0, [pc, #8]	; 139e84 <syscall_mq_open+0x18>
  139e78:	ebfffd08 	bl	1392a0 <syscall_trace>
  139e7c:	e3a00000 	mov	r0, #0
  139e80:	e8bd8010 	pop	{r4, pc}
  139e84:	0014bd28 	.word	0x0014bd28

00139e88 <syscall_pciconfig_write>:
  139e88:	e92d4010 	push	{r4, lr}
  139e8c:	e3a01018 	mov	r1, #24
  139e90:	e59f0008 	ldr	r0, [pc, #8]	; 139ea0 <syscall_pciconfig_write+0x18>
  139e94:	ebfffd01 	bl	1392a0 <syscall_trace>
  139e98:	e3a00000 	mov	r0, #0
  139e9c:	e8bd8010 	pop	{r4, pc}
  139ea0:	0014bd10 	.word	0x0014bd10

00139ea4 <syscall_pciconfig_read>:
  139ea4:	e92d4010 	push	{r4, lr}
  139ea8:	e3a01017 	mov	r1, #23
  139eac:	e59f0008 	ldr	r0, [pc, #8]	; 139ebc <syscall_pciconfig_read+0x18>
  139eb0:	ebfffcfa 	bl	1392a0 <syscall_trace>
  139eb4:	e3a00000 	mov	r0, #0
  139eb8:	e8bd8010 	pop	{r4, pc}
  139ebc:	0014bcf8 	.word	0x0014bcf8

00139ec0 <syscall_pciconfig_iobase>:
  139ec0:	e92d4010 	push	{r4, lr}
  139ec4:	e3a01019 	mov	r1, #25
  139ec8:	e59f0008 	ldr	r0, [pc, #8]	; 139ed8 <syscall_pciconfig_iobase+0x18>
  139ecc:	ebfffcf3 	bl	1392a0 <syscall_trace>
  139ed0:	e3a00000 	mov	r0, #0
  139ed4:	e8bd8010 	pop	{r4, pc}
  139ed8:	0014bcdc 	.word	0x0014bcdc

00139edc <syscall_arm_fadvise64_64>:
  139edc:	e92d4010 	push	{r4, lr}
  139ee0:	e3a01019 	mov	r1, #25
  139ee4:	e59f0008 	ldr	r0, [pc, #8]	; 139ef4 <syscall_arm_fadvise64_64+0x18>
  139ee8:	ebfffcec 	bl	1392a0 <syscall_trace>
  139eec:	e3a00000 	mov	r0, #0
  139ef0:	e8bd8010 	pop	{r4, pc}
  139ef4:	0014bcc0 	.word	0x0014bcc0

00139ef8 <syscall_utimes>:
  139ef8:	e92d4010 	push	{r4, lr}
  139efc:	e3a0100f 	mov	r1, #15
  139f00:	e59f0008 	ldr	r0, [pc, #8]	; 139f10 <syscall_utimes+0x18>
  139f04:	ebfffce5 	bl	1392a0 <syscall_trace>
  139f08:	e3a00000 	mov	r0, #0
  139f0c:	e8bd8010 	pop	{r4, pc}
  139f10:	0014bcb0 	.word	0x0014bcb0

00139f14 <syscall_tgkill>:
  139f14:	e92d4010 	push	{r4, lr}
  139f18:	e3a0100f 	mov	r1, #15
  139f1c:	e59f0008 	ldr	r0, [pc, #8]	; 139f2c <syscall_tgkill+0x18>
  139f20:	ebfffcde 	bl	1392a0 <syscall_trace>
  139f24:	e3a00000 	mov	r0, #0
  139f28:	e8bd8010 	pop	{r4, pc}
  139f2c:	0014bca0 	.word	0x0014bca0

00139f30 <syscall_fstatfs64>:
  139f30:	e92d4010 	push	{r4, lr}
  139f34:	e3a01012 	mov	r1, #18
  139f38:	e59f0008 	ldr	r0, [pc, #8]	; 139f48 <syscall_fstatfs64+0x18>
  139f3c:	ebfffcd7 	bl	1392a0 <syscall_trace>
  139f40:	e3a00000 	mov	r0, #0
  139f44:	e8bd8010 	pop	{r4, pc}
  139f48:	0014bc8c 	.word	0x0014bc8c

00139f4c <syscall_statfs64>:
  139f4c:	e92d4010 	push	{r4, lr}
  139f50:	e3a01011 	mov	r1, #17
  139f54:	e59f0008 	ldr	r0, [pc, #8]	; 139f64 <syscall_statfs64+0x18>
  139f58:	ebfffcd0 	bl	1392a0 <syscall_trace>
  139f5c:	e3a00000 	mov	r0, #0
  139f60:	e8bd8010 	pop	{r4, pc}
  139f64:	0014bc78 	.word	0x0014bc78

00139f68 <syscall_clock_nanosleep>:
  139f68:	e92d4010 	push	{r4, lr}
  139f6c:	e3a01018 	mov	r1, #24
  139f70:	e59f0008 	ldr	r0, [pc, #8]	; 139f80 <syscall_clock_nanosleep+0x18>
  139f74:	ebfffcc9 	bl	1392a0 <syscall_trace>
  139f78:	e3a00000 	mov	r0, #0
  139f7c:	e8bd8010 	pop	{r4, pc}
  139f80:	0014bc60 	.word	0x0014bc60

00139f84 <syscall_timer_delete>:
  139f84:	e92d4010 	push	{r4, lr}
  139f88:	e3a01015 	mov	r1, #21
  139f8c:	e59f0008 	ldr	r0, [pc, #8]	; 139f9c <syscall_timer_delete+0x18>
  139f90:	ebfffcc2 	bl	1392a0 <syscall_trace>
  139f94:	e3a00000 	mov	r0, #0
  139f98:	e8bd8010 	pop	{r4, pc}
  139f9c:	0014bc00 	.word	0x0014bc00

00139fa0 <syscall_timer_getoverrun>:
  139fa0:	e92d4010 	push	{r4, lr}
  139fa4:	e3a01019 	mov	r1, #25
  139fa8:	e59f0008 	ldr	r0, [pc, #8]	; 139fb8 <syscall_timer_getoverrun+0x18>
  139fac:	ebfffcbb 	bl	1392a0 <syscall_trace>
  139fb0:	e3a00000 	mov	r0, #0
  139fb4:	e8bd8010 	pop	{r4, pc}
  139fb8:	0014bbe4 	.word	0x0014bbe4

00139fbc <syscall_timer_gettime>:
  139fbc:	e92d4010 	push	{r4, lr}
  139fc0:	e3a01016 	mov	r1, #22
  139fc4:	e59f0008 	ldr	r0, [pc, #8]	; 139fd4 <syscall_timer_gettime+0x18>
  139fc8:	ebfffcb4 	bl	1392a0 <syscall_trace>
  139fcc:	e3a00000 	mov	r0, #0
  139fd0:	e8bd8010 	pop	{r4, pc}
  139fd4:	0014bbcc 	.word	0x0014bbcc

00139fd8 <syscall_timer_settime>:
  139fd8:	e92d4010 	push	{r4, lr}
  139fdc:	e3a01016 	mov	r1, #22
  139fe0:	e59f0008 	ldr	r0, [pc, #8]	; 139ff0 <syscall_timer_settime+0x18>
  139fe4:	ebfffcad 	bl	1392a0 <syscall_trace>
  139fe8:	e3a00000 	mov	r0, #0
  139fec:	e8bd8010 	pop	{r4, pc}
  139ff0:	0014bbb4 	.word	0x0014bbb4

00139ff4 <syscall_timer_create>:
  139ff4:	e92d4010 	push	{r4, lr}
  139ff8:	e3a01015 	mov	r1, #21
  139ffc:	e59f0008 	ldr	r0, [pc, #8]	; 13a00c <syscall_timer_create+0x18>
  13a000:	ebfffca6 	bl	1392a0 <syscall_trace>
  13a004:	e3a00000 	mov	r0, #0
  13a008:	e8bd8010 	pop	{r4, pc}
  13a00c:	0014bb9c 	.word	0x0014bb9c

0013a010 <syscall_remap_file_pages>:
  13a010:	e92d4010 	push	{r4, lr}
  13a014:	e3a01019 	mov	r1, #25
  13a018:	e59f0008 	ldr	r0, [pc, #8]	; 13a028 <syscall_remap_file_pages+0x18>
  13a01c:	ebfffc9f 	bl	1392a0 <syscall_trace>
  13a020:	e3a00000 	mov	r0, #0
  13a024:	e8bd8010 	pop	{r4, pc}
  13a028:	0014bb68 	.word	0x0014bb68

0013a02c <syscall_epoll_wait>:
  13a02c:	e92d4010 	push	{r4, lr}
  13a030:	e3a01013 	mov	r1, #19
  13a034:	e59f0008 	ldr	r0, [pc, #8]	; 13a044 <syscall_epoll_wait+0x18>
  13a038:	ebfffc98 	bl	1392a0 <syscall_trace>
  13a03c:	e3e00025 	mvn	r0, #37	; 0x25
  13a040:	e8bd8010 	pop	{r4, pc}
  13a044:	0014bb54 	.word	0x0014bb54

0013a048 <syscall_epoll_ctl>:
  13a048:	e92d4010 	push	{r4, lr}
  13a04c:	e3a01012 	mov	r1, #18
  13a050:	e59f0008 	ldr	r0, [pc, #8]	; 13a060 <syscall_epoll_ctl+0x18>
  13a054:	ebfffc91 	bl	1392a0 <syscall_trace>
  13a058:	e3e00025 	mvn	r0, #37	; 0x25
  13a05c:	e8bd8010 	pop	{r4, pc}
  13a060:	0014bb40 	.word	0x0014bb40

0013a064 <syscall_epoll_create>:
  13a064:	e92d4010 	push	{r4, lr}
  13a068:	e3a01015 	mov	r1, #21
  13a06c:	e59f0008 	ldr	r0, [pc, #8]	; 13a07c <syscall_epoll_create+0x18>
  13a070:	ebfffc8a 	bl	1392a0 <syscall_trace>
  13a074:	e3e00025 	mvn	r0, #37	; 0x25
  13a078:	e8bd8010 	pop	{r4, pc}
  13a07c:	0014bb28 	.word	0x0014bb28

0013a080 <syscall_lookup_dcookie>:
  13a080:	e92d4010 	push	{r4, lr}
  13a084:	e3a01017 	mov	r1, #23
  13a088:	e59f0008 	ldr	r0, [pc, #8]	; 13a098 <syscall_lookup_dcookie+0x18>
  13a08c:	ebfffc83 	bl	1392a0 <syscall_trace>
  13a090:	e3a00000 	mov	r0, #0
  13a094:	e8bd8010 	pop	{r4, pc}
  13a098:	0014bb10 	.word	0x0014bb10

0013a09c <syscall_io_cancel>:
  13a09c:	e92d4010 	push	{r4, lr}
  13a0a0:	e3a01012 	mov	r1, #18
  13a0a4:	e59f0008 	ldr	r0, [pc, #8]	; 13a0b4 <syscall_io_cancel+0x18>
  13a0a8:	ebfffc7c 	bl	1392a0 <syscall_trace>
  13a0ac:	e3a00000 	mov	r0, #0
  13a0b0:	e8bd8010 	pop	{r4, pc}
  13a0b4:	0014bae8 	.word	0x0014bae8

0013a0b8 <syscall_io_submit>:
  13a0b8:	e92d4010 	push	{r4, lr}
  13a0bc:	e3a01012 	mov	r1, #18
  13a0c0:	e59f0008 	ldr	r0, [pc, #8]	; 13a0d0 <syscall_io_submit+0x18>
  13a0c4:	ebfffc75 	bl	1392a0 <syscall_trace>
  13a0c8:	e3a00000 	mov	r0, #0
  13a0cc:	e8bd8010 	pop	{r4, pc}
  13a0d0:	0014bad4 	.word	0x0014bad4

0013a0d4 <syscall_io_getevents>:
  13a0d4:	e92d4010 	push	{r4, lr}
  13a0d8:	e3a01015 	mov	r1, #21
  13a0dc:	e59f0008 	ldr	r0, [pc, #8]	; 13a0ec <syscall_io_getevents+0x18>
  13a0e0:	ebfffc6e 	bl	1392a0 <syscall_trace>
  13a0e4:	e3a00000 	mov	r0, #0
  13a0e8:	e8bd8010 	pop	{r4, pc}
  13a0ec:	0014babc 	.word	0x0014babc

0013a0f0 <syscall_io_destroy>:
  13a0f0:	e92d4010 	push	{r4, lr}
  13a0f4:	e3a01013 	mov	r1, #19
  13a0f8:	e59f0008 	ldr	r0, [pc, #8]	; 13a108 <syscall_io_destroy+0x18>
  13a0fc:	ebfffc67 	bl	1392a0 <syscall_trace>
  13a100:	e3a00000 	mov	r0, #0
  13a104:	e8bd8010 	pop	{r4, pc}
  13a108:	0014baa8 	.word	0x0014baa8

0013a10c <syscall_io_setup>:
  13a10c:	e92d4010 	push	{r4, lr}
  13a110:	e3a01011 	mov	r1, #17
  13a114:	e59f0008 	ldr	r0, [pc, #8]	; 13a124 <syscall_io_setup+0x18>
  13a118:	ebfffc60 	bl	1392a0 <syscall_trace>
  13a11c:	e3a00000 	mov	r0, #0
  13a120:	e8bd8010 	pop	{r4, pc}
  13a124:	0014ba94 	.word	0x0014ba94

0013a128 <syscall_sched_getaffinity>:
  13a128:	e92d4010 	push	{r4, lr}
  13a12c:	e3a0101a 	mov	r1, #26
  13a130:	e59f0008 	ldr	r0, [pc, #8]	; 13a140 <syscall_sched_getaffinity+0x18>
  13a134:	ebfffc59 	bl	1392a0 <syscall_trace>
  13a138:	e3a00000 	mov	r0, #0
  13a13c:	e8bd8010 	pop	{r4, pc}
  13a140:	0014ba78 	.word	0x0014ba78

0013a144 <syscall_sendfile64>:
  13a144:	e92d4010 	push	{r4, lr}
  13a148:	e3a01013 	mov	r1, #19
  13a14c:	e59f0008 	ldr	r0, [pc, #8]	; 13a15c <syscall_sendfile64+0x18>
  13a150:	ebfffc52 	bl	1392a0 <syscall_trace>
  13a154:	e3a00000 	mov	r0, #0
  13a158:	e8bd8010 	pop	{r4, pc}
  13a15c:	0014ba38 	.word	0x0014ba38

0013a160 <syscall_fremovexattr>:
  13a160:	e92d4010 	push	{r4, lr}
  13a164:	e3a01015 	mov	r1, #21
  13a168:	e59f0008 	ldr	r0, [pc, #8]	; 13a178 <syscall_fremovexattr+0x18>
  13a16c:	ebfffc4b 	bl	1392a0 <syscall_trace>
  13a170:	e3a00000 	mov	r0, #0
  13a174:	e8bd8010 	pop	{r4, pc}
  13a178:	0014ba10 	.word	0x0014ba10

0013a17c <syscall_lremovexattr>:
  13a17c:	e92d4010 	push	{r4, lr}
  13a180:	e3a01015 	mov	r1, #21
  13a184:	e59f0008 	ldr	r0, [pc, #8]	; 13a194 <syscall_lremovexattr+0x18>
  13a188:	ebfffc44 	bl	1392a0 <syscall_trace>
  13a18c:	e3a00000 	mov	r0, #0
  13a190:	e8bd8010 	pop	{r4, pc}
  13a194:	0014b9f8 	.word	0x0014b9f8

0013a198 <syscall_removexattr>:
  13a198:	e92d4010 	push	{r4, lr}
  13a19c:	e3a01014 	mov	r1, #20
  13a1a0:	e59f0008 	ldr	r0, [pc, #8]	; 13a1b0 <syscall_removexattr+0x18>
  13a1a4:	ebfffc3d 	bl	1392a0 <syscall_trace>
  13a1a8:	e3a00000 	mov	r0, #0
  13a1ac:	e8bd8010 	pop	{r4, pc}
  13a1b0:	0014b9e4 	.word	0x0014b9e4

0013a1b4 <syscall_flistxattr>:
  13a1b4:	e92d4010 	push	{r4, lr}
  13a1b8:	e3a01013 	mov	r1, #19
  13a1bc:	e59f0008 	ldr	r0, [pc, #8]	; 13a1cc <syscall_flistxattr+0x18>
  13a1c0:	ebfffc36 	bl	1392a0 <syscall_trace>
  13a1c4:	e3a00000 	mov	r0, #0
  13a1c8:	e8bd8010 	pop	{r4, pc}
  13a1cc:	0014b9d0 	.word	0x0014b9d0

0013a1d0 <syscall_llistxattr>:
  13a1d0:	e92d4010 	push	{r4, lr}
  13a1d4:	e3a01013 	mov	r1, #19
  13a1d8:	e59f0008 	ldr	r0, [pc, #8]	; 13a1e8 <syscall_llistxattr+0x18>
  13a1dc:	ebfffc2f 	bl	1392a0 <syscall_trace>
  13a1e0:	e3a00000 	mov	r0, #0
  13a1e4:	e8bd8010 	pop	{r4, pc}
  13a1e8:	0014b9bc 	.word	0x0014b9bc

0013a1ec <syscall_listxattr>:
  13a1ec:	e92d4010 	push	{r4, lr}
  13a1f0:	e3a01012 	mov	r1, #18
  13a1f4:	e59f0008 	ldr	r0, [pc, #8]	; 13a204 <syscall_listxattr+0x18>
  13a1f8:	ebfffc28 	bl	1392a0 <syscall_trace>
  13a1fc:	e3a00000 	mov	r0, #0
  13a200:	e8bd8010 	pop	{r4, pc}
  13a204:	0014b9a8 	.word	0x0014b9a8

0013a208 <syscall_fgetxattr>:
  13a208:	e92d4010 	push	{r4, lr}
  13a20c:	e3a01012 	mov	r1, #18
  13a210:	e59f0008 	ldr	r0, [pc, #8]	; 13a220 <syscall_fgetxattr+0x18>
  13a214:	ebfffc21 	bl	1392a0 <syscall_trace>
  13a218:	e3a00000 	mov	r0, #0
  13a21c:	e8bd8010 	pop	{r4, pc}
  13a220:	0014b994 	.word	0x0014b994

0013a224 <syscall_lgetxattr>:
  13a224:	e92d4010 	push	{r4, lr}
  13a228:	e3a01012 	mov	r1, #18
  13a22c:	e59f0008 	ldr	r0, [pc, #8]	; 13a23c <syscall_lgetxattr+0x18>
  13a230:	ebfffc1a 	bl	1392a0 <syscall_trace>
  13a234:	e3a00000 	mov	r0, #0
  13a238:	e8bd8010 	pop	{r4, pc}
  13a23c:	0014b980 	.word	0x0014b980

0013a240 <syscall_getxattr>:
  13a240:	e92d4010 	push	{r4, lr}
  13a244:	e3a01011 	mov	r1, #17
  13a248:	e59f0008 	ldr	r0, [pc, #8]	; 13a258 <syscall_getxattr+0x18>
  13a24c:	ebfffc13 	bl	1392a0 <syscall_trace>
  13a250:	e3a00000 	mov	r0, #0
  13a254:	e8bd8010 	pop	{r4, pc}
  13a258:	0014b96c 	.word	0x0014b96c

0013a25c <syscall_fsetxattr>:
  13a25c:	e92d4010 	push	{r4, lr}
  13a260:	e3a01012 	mov	r1, #18
  13a264:	e59f0008 	ldr	r0, [pc, #8]	; 13a274 <syscall_fsetxattr+0x18>
  13a268:	ebfffc0c 	bl	1392a0 <syscall_trace>
  13a26c:	e3a00000 	mov	r0, #0
  13a270:	e8bd8010 	pop	{r4, pc}
  13a274:	0014b958 	.word	0x0014b958

0013a278 <syscall_lsetxattr>:
  13a278:	e92d4010 	push	{r4, lr}
  13a27c:	e3a01012 	mov	r1, #18
  13a280:	e59f0008 	ldr	r0, [pc, #8]	; 13a290 <syscall_lsetxattr+0x18>
  13a284:	ebfffc05 	bl	1392a0 <syscall_trace>
  13a288:	e3a00000 	mov	r0, #0
  13a28c:	e8bd8010 	pop	{r4, pc}
  13a290:	0014b944 	.word	0x0014b944

0013a294 <syscall_setxattr>:
  13a294:	e92d4010 	push	{r4, lr}
  13a298:	e3a01011 	mov	r1, #17
  13a29c:	e59f0008 	ldr	r0, [pc, #8]	; 13a2ac <syscall_setxattr+0x18>
  13a2a0:	ebfffbfe 	bl	1392a0 <syscall_trace>
  13a2a4:	e3a00000 	mov	r0, #0
  13a2a8:	e8bd8010 	pop	{r4, pc}
  13a2ac:	0014b930 	.word	0x0014b930

0013a2b0 <syscall_readahead>:
  13a2b0:	e92d4010 	push	{r4, lr}
  13a2b4:	e3a01012 	mov	r1, #18
  13a2b8:	e59f0008 	ldr	r0, [pc, #8]	; 13a2c8 <syscall_readahead+0x18>
  13a2bc:	ebfffbf7 	bl	1392a0 <syscall_trace>
  13a2c0:	e3a00000 	mov	r0, #0
  13a2c4:	e8bd8010 	pop	{r4, pc}
  13a2c8:	0014b91c 	.word	0x0014b91c

0013a2cc <syscall_mincore>:
  13a2cc:	e92d4010 	push	{r4, lr}
  13a2d0:	e3a01010 	mov	r1, #16
  13a2d4:	e59f0008 	ldr	r0, [pc, #8]	; 13a2e4 <syscall_mincore+0x18>
  13a2d8:	ebfffbf0 	bl	1392a0 <syscall_trace>
  13a2dc:	e3a00000 	mov	r0, #0
  13a2e0:	e8bd8010 	pop	{r4, pc}
  13a2e4:	0014b8dc 	.word	0x0014b8dc

0013a2e8 <syscall_pivot_root>:
  13a2e8:	e92d4010 	push	{r4, lr}
  13a2ec:	e3a01013 	mov	r1, #19
  13a2f0:	e59f0008 	ldr	r0, [pc, #8]	; 13a300 <syscall_pivot_root+0x18>
  13a2f4:	ebfffbe9 	bl	1392a0 <syscall_trace>
  13a2f8:	e3a00000 	mov	r0, #0
  13a2fc:	e8bd8010 	pop	{r4, pc}
  13a300:	0014b8c8 	.word	0x0014b8c8

0013a304 <syscall_setfsgid32>:
  13a304:	e92d4010 	push	{r4, lr}
  13a308:	e3a01013 	mov	r1, #19
  13a30c:	e59f0008 	ldr	r0, [pc, #8]	; 13a31c <syscall_setfsgid32+0x18>
  13a310:	ebfffbe2 	bl	1392a0 <syscall_trace>
  13a314:	e3a00000 	mov	r0, #0
  13a318:	e8bd8010 	pop	{r4, pc}
  13a31c:	0014b8a0 	.word	0x0014b8a0

0013a320 <syscall_setfsuid32>:
  13a320:	e92d4010 	push	{r4, lr}
  13a324:	e3a01013 	mov	r1, #19
  13a328:	e59f0008 	ldr	r0, [pc, #8]	; 13a338 <syscall_setfsuid32+0x18>
  13a32c:	ebfffbdb 	bl	1392a0 <syscall_trace>
  13a330:	e3a00000 	mov	r0, #0
  13a334:	e8bd8010 	pop	{r4, pc}
  13a338:	0014b88c 	.word	0x0014b88c

0013a33c <syscall_setgid32>:
  13a33c:	e92d4010 	push	{r4, lr}
  13a340:	e3a01011 	mov	r1, #17
  13a344:	e59f0008 	ldr	r0, [pc, #8]	; 13a354 <syscall_setgid32+0x18>
  13a348:	ebfffbd4 	bl	1392a0 <syscall_trace>
  13a34c:	e3a00000 	mov	r0, #0
  13a350:	e8bd8010 	pop	{r4, pc}
  13a354:	0014b878 	.word	0x0014b878

0013a358 <syscall_setuid32>:
  13a358:	e92d4010 	push	{r4, lr}
  13a35c:	e3a01011 	mov	r1, #17
  13a360:	e59f0008 	ldr	r0, [pc, #8]	; 13a370 <syscall_setuid32+0x18>
  13a364:	ebfffbcd 	bl	1392a0 <syscall_trace>
  13a368:	e3a00000 	mov	r0, #0
  13a36c:	e8bd8010 	pop	{r4, pc}
  13a370:	0014b864 	.word	0x0014b864

0013a374 <syscall_chown32>:
  13a374:	e92d4010 	push	{r4, lr}
  13a378:	e3a01010 	mov	r1, #16
  13a37c:	e59f0008 	ldr	r0, [pc, #8]	; 13a38c <syscall_chown32+0x18>
  13a380:	ebfffbc6 	bl	1392a0 <syscall_trace>
  13a384:	e3a00000 	mov	r0, #0
  13a388:	e8bd8010 	pop	{r4, pc}
  13a38c:	0014b854 	.word	0x0014b854

0013a390 <syscall_getresgid32>:
  13a390:	e92d4010 	push	{r4, lr}
  13a394:	e3a01014 	mov	r1, #20
  13a398:	e59f0008 	ldr	r0, [pc, #8]	; 13a3a8 <syscall_getresgid32+0x18>
  13a39c:	ebfffbbf 	bl	1392a0 <syscall_trace>
  13a3a0:	e3a00000 	mov	r0, #0
  13a3a4:	e8bd8010 	pop	{r4, pc}
  13a3a8:	0014b840 	.word	0x0014b840

0013a3ac <syscall_setresgid32>:
  13a3ac:	e92d4010 	push	{r4, lr}
  13a3b0:	e3a01014 	mov	r1, #20
  13a3b4:	e59f0008 	ldr	r0, [pc, #8]	; 13a3c4 <syscall_setresgid32+0x18>
  13a3b8:	ebfffbb8 	bl	1392a0 <syscall_trace>
  13a3bc:	e3a00000 	mov	r0, #0
  13a3c0:	e8bd8010 	pop	{r4, pc}
  13a3c4:	0014b82c 	.word	0x0014b82c

0013a3c8 <syscall_getresuid32>:
  13a3c8:	e92d4010 	push	{r4, lr}
  13a3cc:	e3a01014 	mov	r1, #20
  13a3d0:	e59f0008 	ldr	r0, [pc, #8]	; 13a3e0 <syscall_getresuid32+0x18>
  13a3d4:	ebfffbb1 	bl	1392a0 <syscall_trace>
  13a3d8:	e3a00000 	mov	r0, #0
  13a3dc:	e8bd8010 	pop	{r4, pc}
  13a3e0:	0014b818 	.word	0x0014b818

0013a3e4 <syscall_setresuid32>:
  13a3e4:	e92d4010 	push	{r4, lr}
  13a3e8:	e3a01014 	mov	r1, #20
  13a3ec:	e59f0008 	ldr	r0, [pc, #8]	; 13a3fc <syscall_setresuid32+0x18>
  13a3f0:	ebfffbaa 	bl	1392a0 <syscall_trace>
  13a3f4:	e3a00000 	mov	r0, #0
  13a3f8:	e8bd8010 	pop	{r4, pc}
  13a3fc:	0014b804 	.word	0x0014b804

0013a400 <syscall_fchown32>:
  13a400:	e92d4010 	push	{r4, lr}
  13a404:	e3a01011 	mov	r1, #17
  13a408:	e59f0008 	ldr	r0, [pc, #8]	; 13a418 <syscall_fchown32+0x18>
  13a40c:	ebfffba3 	bl	1392a0 <syscall_trace>
  13a410:	e3a00000 	mov	r0, #0
  13a414:	e8bd8010 	pop	{r4, pc}
  13a418:	0014b7f0 	.word	0x0014b7f0

0013a41c <syscall_setgroups32>:
  13a41c:	e92d4010 	push	{r4, lr}
  13a420:	e3a01014 	mov	r1, #20
  13a424:	e59f0008 	ldr	r0, [pc, #8]	; 13a434 <syscall_setgroups32+0x18>
  13a428:	ebfffb9c 	bl	1392a0 <syscall_trace>
  13a42c:	e3a00000 	mov	r0, #0
  13a430:	e8bd8010 	pop	{r4, pc}
  13a434:	0014b7dc 	.word	0x0014b7dc

0013a438 <syscall_getgroups32>:
  13a438:	e92d4010 	push	{r4, lr}
  13a43c:	e3a01014 	mov	r1, #20
  13a440:	e59f0008 	ldr	r0, [pc, #8]	; 13a450 <syscall_getgroups32+0x18>
  13a444:	ebfffb95 	bl	1392a0 <syscall_trace>
  13a448:	e3a00000 	mov	r0, #0
  13a44c:	e8bd8010 	pop	{r4, pc}
  13a450:	0014b7c8 	.word	0x0014b7c8

0013a454 <syscall_setregid32>:
  13a454:	e92d4010 	push	{r4, lr}
  13a458:	e3a01013 	mov	r1, #19
  13a45c:	e59f0008 	ldr	r0, [pc, #8]	; 13a46c <syscall_setregid32+0x18>
  13a460:	ebfffb8e 	bl	1392a0 <syscall_trace>
  13a464:	e3a00000 	mov	r0, #0
  13a468:	e8bd8010 	pop	{r4, pc}
  13a46c:	0014b7b4 	.word	0x0014b7b4

0013a470 <syscall_setreuid32>:
  13a470:	e92d4010 	push	{r4, lr}
  13a474:	e3a01013 	mov	r1, #19
  13a478:	e59f0008 	ldr	r0, [pc, #8]	; 13a488 <syscall_setreuid32+0x18>
  13a47c:	ebfffb87 	bl	1392a0 <syscall_trace>
  13a480:	e3a00000 	mov	r0, #0
  13a484:	e8bd8010 	pop	{r4, pc}
  13a488:	0014b7a0 	.word	0x0014b7a0

0013a48c <syscall_getegid32>:
  13a48c:	e92d4010 	push	{r4, lr}
  13a490:	e3a01012 	mov	r1, #18
  13a494:	e59f0008 	ldr	r0, [pc, #8]	; 13a4a4 <syscall_getegid32+0x18>
  13a498:	ebfffb80 	bl	1392a0 <syscall_trace>
  13a49c:	e3a00000 	mov	r0, #0
  13a4a0:	e8bd8010 	pop	{r4, pc}
  13a4a4:	0014b78c 	.word	0x0014b78c

0013a4a8 <syscall_geteuid32>:
  13a4a8:	e92d4010 	push	{r4, lr}
  13a4ac:	e3a01012 	mov	r1, #18
  13a4b0:	e59f0008 	ldr	r0, [pc, #8]	; 13a4c0 <syscall_geteuid32+0x18>
  13a4b4:	ebfffb79 	bl	1392a0 <syscall_trace>
  13a4b8:	e3a00000 	mov	r0, #0
  13a4bc:	e8bd8010 	pop	{r4, pc}
  13a4c0:	0014b778 	.word	0x0014b778

0013a4c4 <syscall_getgid32>:
  13a4c4:	e92d4010 	push	{r4, lr}
  13a4c8:	e3a01011 	mov	r1, #17
  13a4cc:	e59f0008 	ldr	r0, [pc, #8]	; 13a4dc <syscall_getgid32+0x18>
  13a4d0:	ebfffb72 	bl	1392a0 <syscall_trace>
  13a4d4:	e3a00000 	mov	r0, #0
  13a4d8:	e8bd8010 	pop	{r4, pc}
  13a4dc:	0014b764 	.word	0x0014b764

0013a4e0 <syscall_getuid32>:
  13a4e0:	e92d4010 	push	{r4, lr}
  13a4e4:	e3a01011 	mov	r1, #17
  13a4e8:	e59f0008 	ldr	r0, [pc, #8]	; 13a4f8 <syscall_getuid32+0x18>
  13a4ec:	ebfffb6b 	bl	1392a0 <syscall_trace>
  13a4f0:	e3a00000 	mov	r0, #0
  13a4f4:	e8bd8010 	pop	{r4, pc}
  13a4f8:	0014b750 	.word	0x0014b750

0013a4fc <syscall_lchown32>:
  13a4fc:	e92d4010 	push	{r4, lr}
  13a500:	e3a01011 	mov	r1, #17
  13a504:	e59f0008 	ldr	r0, [pc, #8]	; 13a514 <syscall_lchown32+0x18>
  13a508:	ebfffb64 	bl	1392a0 <syscall_trace>
  13a50c:	e3a00000 	mov	r0, #0
  13a510:	e8bd8010 	pop	{r4, pc}
  13a514:	0014b73c 	.word	0x0014b73c

0013a518 <syscall_ftruncate64>:
  13a518:	e92d4010 	push	{r4, lr}
  13a51c:	e3a01014 	mov	r1, #20
  13a520:	e59f0008 	ldr	r0, [pc, #8]	; 13a530 <syscall_ftruncate64+0x18>
  13a524:	ebfffb5d 	bl	1392a0 <syscall_trace>
  13a528:	e3a00000 	mov	r0, #0
  13a52c:	e8bd8010 	pop	{r4, pc}
  13a530:	0014b6f8 	.word	0x0014b6f8

0013a534 <syscall_truncate64>:
  13a534:	e92d4010 	push	{r4, lr}
  13a538:	e3a01013 	mov	r1, #19
  13a53c:	e59f0008 	ldr	r0, [pc, #8]	; 13a54c <syscall_truncate64+0x18>
  13a540:	ebfffb56 	bl	1392a0 <syscall_trace>
  13a544:	e3a00000 	mov	r0, #0
  13a548:	e8bd8010 	pop	{r4, pc}
  13a54c:	0014b6e4 	.word	0x0014b6e4

0013a550 <syscall_sendfile>:
  13a550:	e92d4010 	push	{r4, lr}
  13a554:	e3a01011 	mov	r1, #17
  13a558:	e59f0008 	ldr	r0, [pc, #8]	; 13a568 <syscall_sendfile+0x18>
  13a55c:	ebfffb4f 	bl	1392a0 <syscall_trace>
  13a560:	e3a00000 	mov	r0, #0
  13a564:	e8bd8010 	pop	{r4, pc}
  13a568:	0014b69c 	.word	0x0014b69c

0013a56c <syscall_sigaltstack>:
  13a56c:	e92d4010 	push	{r4, lr}
  13a570:	e3a01014 	mov	r1, #20
  13a574:	e59f0008 	ldr	r0, [pc, #8]	; 13a584 <syscall_sigaltstack+0x18>
  13a578:	ebfffb48 	bl	1392a0 <syscall_trace>
  13a57c:	e3a00000 	mov	r0, #0
  13a580:	e8bd8010 	pop	{r4, pc}
  13a584:	0014b688 	.word	0x0014b688

0013a588 <syscall_capset>:
  13a588:	e92d4010 	push	{r4, lr}
  13a58c:	e3a0100f 	mov	r1, #15
  13a590:	e59f0008 	ldr	r0, [pc, #8]	; 13a5a0 <syscall_capset+0x18>
  13a594:	ebfffb41 	bl	1392a0 <syscall_trace>
  13a598:	e3a00000 	mov	r0, #0
  13a59c:	e8bd8010 	pop	{r4, pc}
  13a5a0:	0014b678 	.word	0x0014b678

0013a5a4 <syscall_capget>:
  13a5a4:	e92d4010 	push	{r4, lr}
  13a5a8:	e3a0100f 	mov	r1, #15
  13a5ac:	e59f0008 	ldr	r0, [pc, #8]	; 13a5bc <syscall_capget+0x18>
  13a5b0:	ebfffb3a 	bl	1392a0 <syscall_trace>
  13a5b4:	e3a00000 	mov	r0, #0
  13a5b8:	e8bd8010 	pop	{r4, pc}
  13a5bc:	0014b668 	.word	0x0014b668

0013a5c0 <syscall_chown>:
  13a5c0:	e92d4010 	push	{r4, lr}
  13a5c4:	e3a0100e 	mov	r1, #14
  13a5c8:	e59f0008 	ldr	r0, [pc, #8]	; 13a5d8 <syscall_chown+0x18>
  13a5cc:	ebfffb33 	bl	1392a0 <syscall_trace>
  13a5d0:	e3a00000 	mov	r0, #0
  13a5d4:	e8bd8010 	pop	{r4, pc}
  13a5d8:	0014b648 	.word	0x0014b648

0013a5dc <syscall_pwrite64>:
  13a5dc:	e92d4010 	push	{r4, lr}
  13a5e0:	e3a01011 	mov	r1, #17
  13a5e4:	e59f0008 	ldr	r0, [pc, #8]	; 13a5f4 <syscall_pwrite64+0x18>
  13a5e8:	ebfffb2c 	bl	1392a0 <syscall_trace>
  13a5ec:	e3a00000 	mov	r0, #0
  13a5f0:	e8bd8010 	pop	{r4, pc}
  13a5f4:	0014b634 	.word	0x0014b634

0013a5f8 <syscall_pread64>:
  13a5f8:	e92d4010 	push	{r4, lr}
  13a5fc:	e3a01010 	mov	r1, #16
  13a600:	e59f0008 	ldr	r0, [pc, #8]	; 13a610 <syscall_pread64+0x18>
  13a604:	ebfffb25 	bl	1392a0 <syscall_trace>
  13a608:	e3a00000 	mov	r0, #0
  13a60c:	e8bd8010 	pop	{r4, pc}
  13a610:	0014b624 	.word	0x0014b624

0013a614 <syscall_rt_sigsuspend>:
  13a614:	e92d4010 	push	{r4, lr}
  13a618:	e3a01016 	mov	r1, #22
  13a61c:	e59f0008 	ldr	r0, [pc, #8]	; 13a62c <syscall_rt_sigsuspend+0x18>
  13a620:	ebfffb1e 	bl	1392a0 <syscall_trace>
  13a624:	e3a00000 	mov	r0, #0
  13a628:	e8bd8010 	pop	{r4, pc}
  13a62c:	0014b60c 	.word	0x0014b60c

0013a630 <syscall_rt_sigqueueinfo>:
  13a630:	e92d4010 	push	{r4, lr}
  13a634:	e3a01018 	mov	r1, #24
  13a638:	e59f0008 	ldr	r0, [pc, #8]	; 13a648 <syscall_rt_sigqueueinfo+0x18>
  13a63c:	ebfffb17 	bl	1392a0 <syscall_trace>
  13a640:	e3a00000 	mov	r0, #0
  13a644:	e8bd8010 	pop	{r4, pc}
  13a648:	0014b5f4 	.word	0x0014b5f4

0013a64c <syscall_rt_sigtimedwait>:
  13a64c:	e92d4010 	push	{r4, lr}
  13a650:	e3a01018 	mov	r1, #24
  13a654:	e59f0008 	ldr	r0, [pc, #8]	; 13a664 <syscall_rt_sigtimedwait+0x18>
  13a658:	ebfffb10 	bl	1392a0 <syscall_trace>
  13a65c:	e3a00000 	mov	r0, #0
  13a660:	e8bd8010 	pop	{r4, pc}
  13a664:	0014b5dc 	.word	0x0014b5dc

0013a668 <syscall_rt_sigpending>:
  13a668:	e92d4010 	push	{r4, lr}
  13a66c:	e3a01016 	mov	r1, #22
  13a670:	e59f0008 	ldr	r0, [pc, #8]	; 13a680 <syscall_rt_sigpending+0x18>
  13a674:	ebfffb09 	bl	1392a0 <syscall_trace>
  13a678:	e3a00000 	mov	r0, #0
  13a67c:	e8bd8010 	pop	{r4, pc}
  13a680:	0014b5c4 	.word	0x0014b5c4

0013a684 <syscall_rt_sigreturn>:
  13a684:	e92d4010 	push	{r4, lr}
  13a688:	e3a01015 	mov	r1, #21
  13a68c:	e59f0008 	ldr	r0, [pc, #8]	; 13a69c <syscall_rt_sigreturn+0x18>
  13a690:	ebfffb02 	bl	1392a0 <syscall_trace>
  13a694:	e3a00000 	mov	r0, #0
  13a698:	e8bd8010 	pop	{r4, pc}
  13a69c:	0014b57c 	.word	0x0014b57c

0013a6a0 <syscall_prctl>:
  13a6a0:	e92d4010 	push	{r4, lr}
  13a6a4:	e3a0100e 	mov	r1, #14
  13a6a8:	e59f0008 	ldr	r0, [pc, #8]	; 13a6b8 <syscall_prctl+0x18>
  13a6ac:	ebfffafb 	bl	1392a0 <syscall_trace>
  13a6b0:	e3a00000 	mov	r0, #0
  13a6b4:	e8bd8010 	pop	{r4, pc}
  13a6b8:	0014b56c 	.word	0x0014b56c

0013a6bc <syscall_getresgid>:
  13a6bc:	e92d4010 	push	{r4, lr}
  13a6c0:	e3a01012 	mov	r1, #18
  13a6c4:	e59f0008 	ldr	r0, [pc, #8]	; 13a6d4 <syscall_getresgid+0x18>
  13a6c8:	ebfffaf4 	bl	1392a0 <syscall_trace>
  13a6cc:	e3a00000 	mov	r0, #0
  13a6d0:	e8bd8010 	pop	{r4, pc}
  13a6d4:	0014b558 	.word	0x0014b558

0013a6d8 <syscall_setresgid>:
  13a6d8:	e92d4010 	push	{r4, lr}
  13a6dc:	e3a01012 	mov	r1, #18
  13a6e0:	e59f0008 	ldr	r0, [pc, #8]	; 13a6f0 <syscall_setresgid+0x18>
  13a6e4:	ebfffaed 	bl	1392a0 <syscall_trace>
  13a6e8:	e3a00000 	mov	r0, #0
  13a6ec:	e8bd8010 	pop	{r4, pc}
  13a6f0:	0014b544 	.word	0x0014b544

0013a6f4 <syscall_nfsservctl>:
  13a6f4:	e92d4010 	push	{r4, lr}
  13a6f8:	e3a01013 	mov	r1, #19
  13a6fc:	e59f0008 	ldr	r0, [pc, #8]	; 13a70c <syscall_nfsservctl+0x18>
  13a700:	ebfffae6 	bl	1392a0 <syscall_trace>
  13a704:	e3a00000 	mov	r0, #0
  13a708:	e8bd8010 	pop	{r4, pc}
  13a70c:	0014b530 	.word	0x0014b530

0013a710 <syscall_getresuid>:
  13a710:	e92d4010 	push	{r4, lr}
  13a714:	e3a01012 	mov	r1, #18
  13a718:	e59f0008 	ldr	r0, [pc, #8]	; 13a728 <syscall_getresuid+0x18>
  13a71c:	ebfffadf 	bl	1392a0 <syscall_trace>
  13a720:	e3a00000 	mov	r0, #0
  13a724:	e8bd8010 	pop	{r4, pc}
  13a728:	0014b50c 	.word	0x0014b50c

0013a72c <syscall_setresuid>:
  13a72c:	e92d4010 	push	{r4, lr}
  13a730:	e3a01012 	mov	r1, #18
  13a734:	e59f0008 	ldr	r0, [pc, #8]	; 13a744 <syscall_setresuid+0x18>
  13a738:	ebfffad8 	bl	1392a0 <syscall_trace>
  13a73c:	e3a00000 	mov	r0, #0
  13a740:	e8bd8010 	pop	{r4, pc}
  13a744:	0014b4f8 	.word	0x0014b4f8

0013a748 <syscall_sched_rr_get_interval>:
  13a748:	e92d4010 	push	{r4, lr}
  13a74c:	e3a0101e 	mov	r1, #30
  13a750:	e59f0008 	ldr	r0, [pc, #8]	; 13a760 <syscall_sched_rr_get_interval+0x18>
  13a754:	ebfffad1 	bl	1392a0 <syscall_trace>
  13a758:	e3a00000 	mov	r0, #0
  13a75c:	e8bd8010 	pop	{r4, pc}
  13a760:	0014b4b4 	.word	0x0014b4b4

0013a764 <syscall_sched_yield>:
  13a764:	e92d4010 	push	{r4, lr}
  13a768:	e3a01014 	mov	r1, #20
  13a76c:	e59f0008 	ldr	r0, [pc, #8]	; 13a77c <syscall_sched_yield+0x18>
  13a770:	ebfffaca 	bl	1392a0 <syscall_trace>
  13a774:	e3a00000 	mov	r0, #0
  13a778:	e8bd8010 	pop	{r4, pc}
  13a77c:	0014b460 	.word	0x0014b460

0013a780 <syscall_munlockall>:
  13a780:	e92d4010 	push	{r4, lr}
  13a784:	e3a01013 	mov	r1, #19
  13a788:	e59f0008 	ldr	r0, [pc, #8]	; 13a798 <syscall_munlockall+0x18>
  13a78c:	ebfffac3 	bl	1392a0 <syscall_trace>
  13a790:	e3a00000 	mov	r0, #0
  13a794:	e8bd8010 	pop	{r4, pc}
  13a798:	0014b3e4 	.word	0x0014b3e4

0013a79c <syscall_mlockall>:
  13a79c:	e92d4010 	push	{r4, lr}
  13a7a0:	e3a01011 	mov	r1, #17
  13a7a4:	e59f0008 	ldr	r0, [pc, #8]	; 13a7b4 <syscall_mlockall+0x18>
  13a7a8:	ebfffabc 	bl	1392a0 <syscall_trace>
  13a7ac:	e3a00000 	mov	r0, #0
  13a7b0:	e8bd8010 	pop	{r4, pc}
  13a7b4:	0014b3d0 	.word	0x0014b3d0

0013a7b8 <syscall_munlock>:
  13a7b8:	e92d4010 	push	{r4, lr}
  13a7bc:	e3a01010 	mov	r1, #16
  13a7c0:	e59f0008 	ldr	r0, [pc, #8]	; 13a7d0 <syscall_munlock+0x18>
  13a7c4:	ebfffab5 	bl	1392a0 <syscall_trace>
  13a7c8:	e3a00000 	mov	r0, #0
  13a7cc:	e8bd8010 	pop	{r4, pc}
  13a7d0:	0014b3c0 	.word	0x0014b3c0

0013a7d4 <syscall_mlock>:
  13a7d4:	e92d4010 	push	{r4, lr}
  13a7d8:	e3a0100e 	mov	r1, #14
  13a7dc:	e59f0008 	ldr	r0, [pc, #8]	; 13a7ec <syscall_mlock+0x18>
  13a7e0:	ebfffaae 	bl	1392a0 <syscall_trace>
  13a7e4:	e3a00000 	mov	r0, #0
  13a7e8:	e8bd8010 	pop	{r4, pc}
  13a7ec:	0014b3b0 	.word	0x0014b3b0

0013a7f0 <syscall__sysctl>:
  13a7f0:	e92d4010 	push	{r4, lr}
  13a7f4:	e3a01010 	mov	r1, #16
  13a7f8:	e59f0008 	ldr	r0, [pc, #8]	; 13a808 <syscall__sysctl+0x18>
  13a7fc:	ebfffaa7 	bl	1392a0 <syscall_trace>
  13a800:	e3a00000 	mov	r0, #0
  13a804:	e8bd8010 	pop	{r4, pc}
  13a808:	0014b3a0 	.word	0x0014b3a0

0013a80c <syscall_fdatasync>:
  13a80c:	e92d4010 	push	{r4, lr}
  13a810:	e3a01012 	mov	r1, #18
  13a814:	e59f0008 	ldr	r0, [pc, #8]	; 13a824 <syscall_fdatasync+0x18>
  13a818:	ebfffaa0 	bl	1392a0 <syscall_trace>
  13a81c:	e3a00000 	mov	r0, #0
  13a820:	e8bd8010 	pop	{r4, pc}
  13a824:	0014b38c 	.word	0x0014b38c

0013a828 <syscall_getsid>:
  13a828:	e92d4010 	push	{r4, lr}
  13a82c:	e3a0100f 	mov	r1, #15
  13a830:	e59f0008 	ldr	r0, [pc, #8]	; 13a840 <syscall_getsid+0x18>
  13a834:	ebfffa99 	bl	1392a0 <syscall_trace>
  13a838:	e3a00000 	mov	r0, #0
  13a83c:	e8bd8010 	pop	{r4, pc}
  13a840:	0014b37c 	.word	0x0014b37c

0013a844 <syscall_msync>:
  13a844:	e92d4010 	push	{r4, lr}
  13a848:	e3a0100e 	mov	r1, #14
  13a84c:	e59f0008 	ldr	r0, [pc, #8]	; 13a85c <syscall_msync+0x18>
  13a850:	ebfffa92 	bl	1392a0 <syscall_trace>
  13a854:	e3a00000 	mov	r0, #0
  13a858:	e8bd8010 	pop	{r4, pc}
  13a85c:	0014b34c 	.word	0x0014b34c

0013a860 <syscall_flock>:
  13a860:	e92d4010 	push	{r4, lr}
  13a864:	e3a0100e 	mov	r1, #14
  13a868:	e59f0008 	ldr	r0, [pc, #8]	; 13a878 <syscall_flock+0x18>
  13a86c:	ebfffa8b 	bl	1392a0 <syscall_trace>
  13a870:	e3a00000 	mov	r0, #0
  13a874:	e8bd8010 	pop	{r4, pc}
  13a878:	0014b33c 	.word	0x0014b33c

0013a87c <syscall_setfsgid>:
  13a87c:	e92d4010 	push	{r4, lr}
  13a880:	e3a01011 	mov	r1, #17
  13a884:	e59f0008 	ldr	r0, [pc, #8]	; 13a894 <syscall_setfsgid+0x18>
  13a888:	ebfffa84 	bl	1392a0 <syscall_trace>
  13a88c:	e3a00000 	mov	r0, #0
  13a890:	e8bd8010 	pop	{r4, pc}
  13a894:	0014b2f0 	.word	0x0014b2f0

0013a898 <syscall_setfsuid>:
  13a898:	e92d4010 	push	{r4, lr}
  13a89c:	e3a01011 	mov	r1, #17
  13a8a0:	e59f0008 	ldr	r0, [pc, #8]	; 13a8b0 <syscall_setfsuid+0x18>
  13a8a4:	ebfffa7d 	bl	1392a0 <syscall_trace>
  13a8a8:	e3a00000 	mov	r0, #0
  13a8ac:	e8bd8010 	pop	{r4, pc}
  13a8b0:	0014b2dc 	.word	0x0014b2dc

0013a8b4 <syscall_personality>:
  13a8b4:	e92d4010 	push	{r4, lr}
  13a8b8:	e3a01014 	mov	r1, #20
  13a8bc:	e59f0008 	ldr	r0, [pc, #8]	; 13a8cc <syscall_personality+0x18>
  13a8c0:	ebfffa76 	bl	1392a0 <syscall_trace>
  13a8c4:	e3a00000 	mov	r0, #0
  13a8c8:	e8bd8010 	pop	{r4, pc}
  13a8cc:	0014b2c8 	.word	0x0014b2c8

0013a8d0 <syscall_sysfs>:
  13a8d0:	e92d4010 	push	{r4, lr}
  13a8d4:	e3a0100e 	mov	r1, #14
  13a8d8:	e59f0008 	ldr	r0, [pc, #8]	; 13a8e8 <syscall_sysfs+0x18>
  13a8dc:	ebfffa6f 	bl	1392a0 <syscall_trace>
  13a8e0:	e3a00000 	mov	r0, #0
  13a8e4:	e8bd8010 	pop	{r4, pc}
  13a8e8:	0014b2b8 	.word	0x0014b2b8

0013a8ec <syscall_bdflush>:
  13a8ec:	e92d4010 	push	{r4, lr}
  13a8f0:	e3a01010 	mov	r1, #16
  13a8f4:	e59f0008 	ldr	r0, [pc, #8]	; 13a904 <syscall_bdflush+0x18>
  13a8f8:	ebfffa68 	bl	1392a0 <syscall_trace>
  13a8fc:	e3a00000 	mov	r0, #0
  13a900:	e8bd8010 	pop	{r4, pc}
  13a904:	0014b2a8 	.word	0x0014b2a8

0013a908 <syscall_fchdir>:
  13a908:	e92d4010 	push	{r4, lr}
  13a90c:	e3a0100f 	mov	r1, #15
  13a910:	e59f0008 	ldr	r0, [pc, #8]	; 13a920 <syscall_fchdir+0x18>
  13a914:	ebfffa61 	bl	1392a0 <syscall_trace>
  13a918:	e3a00000 	mov	r0, #0
  13a91c:	e8bd8010 	pop	{r4, pc}
  13a920:	0014b298 	.word	0x0014b298

0013a924 <syscall_getpgid>:
  13a924:	e92d4010 	push	{r4, lr}
  13a928:	e3a01010 	mov	r1, #16
  13a92c:	e59f0008 	ldr	r0, [pc, #8]	; 13a93c <syscall_getpgid+0x18>
  13a930:	ebfffa5a 	bl	1392a0 <syscall_trace>
  13a934:	e3a00000 	mov	r0, #0
  13a938:	e8bd8010 	pop	{r4, pc}
  13a93c:	0014b288 	.word	0x0014b288

0013a940 <syscall_quotactl>:
  13a940:	e92d4010 	push	{r4, lr}
  13a944:	e3a01011 	mov	r1, #17
  13a948:	e59f0008 	ldr	r0, [pc, #8]	; 13a958 <syscall_quotactl+0x18>
  13a94c:	ebfffa53 	bl	1392a0 <syscall_trace>
  13a950:	e3a00000 	mov	r0, #0
  13a954:	e8bd8010 	pop	{r4, pc}
  13a958:	0014b274 	.word	0x0014b274

0013a95c <syscall_delete_module>:
  13a95c:	e92d4010 	push	{r4, lr}
  13a960:	e3a01016 	mov	r1, #22
  13a964:	e59f0008 	ldr	r0, [pc, #8]	; 13a974 <syscall_delete_module+0x18>
  13a968:	ebfffa4c 	bl	1392a0 <syscall_trace>
  13a96c:	e3a00000 	mov	r0, #0
  13a970:	e8bd8010 	pop	{r4, pc}
  13a974:	0014b25c 	.word	0x0014b25c

0013a978 <syscall_init_module>:
  13a978:	e92d4010 	push	{r4, lr}
  13a97c:	e3a01014 	mov	r1, #20
  13a980:	e59f0008 	ldr	r0, [pc, #8]	; 13a990 <syscall_init_module+0x18>
  13a984:	ebfffa45 	bl	1392a0 <syscall_trace>
  13a988:	e3a00000 	mov	r0, #0
  13a98c:	e8bd8010 	pop	{r4, pc}
  13a990:	0014b248 	.word	0x0014b248

0013a994 <syscall_mprotect>:
  13a994:	e92d4010 	push	{r4, lr}
  13a998:	e3a01011 	mov	r1, #17
  13a99c:	e59f0008 	ldr	r0, [pc, #8]	; 13a9ac <syscall_mprotect+0x18>
  13a9a0:	ebfffa3e 	bl	1392a0 <syscall_trace>
  13a9a4:	e3a00000 	mov	r0, #0
  13a9a8:	e8bd8010 	pop	{r4, pc}
  13a9ac:	0014b220 	.word	0x0014b220

0013a9b0 <syscall_adjtimex>:
  13a9b0:	e92d4010 	push	{r4, lr}
  13a9b4:	e3a01011 	mov	r1, #17
  13a9b8:	e59f0008 	ldr	r0, [pc, #8]	; 13a9c8 <syscall_adjtimex+0x18>
  13a9bc:	ebfffa37 	bl	1392a0 <syscall_trace>
  13a9c0:	e3a00000 	mov	r0, #0
  13a9c4:	e8bd8010 	pop	{r4, pc}
  13a9c8:	0014b20c 	.word	0x0014b20c

0013a9cc <syscall_uname>:
  13a9cc:	e92d4010 	push	{r4, lr}
  13a9d0:	e3a0100e 	mov	r1, #14
  13a9d4:	e59f0008 	ldr	r0, [pc, #8]	; 13a9e4 <syscall_uname+0x18>
  13a9d8:	ebfffa30 	bl	1392a0 <syscall_trace>
  13a9dc:	e3a00000 	mov	r0, #0
  13a9e0:	e8bd8010 	pop	{r4, pc}
  13a9e4:	0014b1fc 	.word	0x0014b1fc

0013a9e8 <syscall_setdomainname>:
  13a9e8:	e92d4010 	push	{r4, lr}
  13a9ec:	e3a01016 	mov	r1, #22
  13a9f0:	e59f0008 	ldr	r0, [pc, #8]	; 13aa00 <syscall_setdomainname+0x18>
  13a9f4:	ebfffa29 	bl	1392a0 <syscall_trace>
  13a9f8:	e3a00000 	mov	r0, #0
  13a9fc:	e8bd8010 	pop	{r4, pc}
  13aa00:	0014b1e4 	.word	0x0014b1e4

0013aa04 <syscall_clone>:
  13aa04:	e92d4010 	push	{r4, lr}
  13aa08:	e3a0100e 	mov	r1, #14
  13aa0c:	e59f0008 	ldr	r0, [pc, #8]	; 13aa1c <syscall_clone+0x18>
  13aa10:	ebfffa22 	bl	1392a0 <syscall_trace>
  13aa14:	e3a00000 	mov	r0, #0
  13aa18:	e8bd8010 	pop	{r4, pc}
  13aa1c:	0014b1d4 	.word	0x0014b1d4

0013aa20 <syscall_sigreturn>:
  13aa20:	e92d4010 	push	{r4, lr}
  13aa24:	e3a01012 	mov	r1, #18
  13aa28:	e59f0008 	ldr	r0, [pc, #8]	; 13aa38 <syscall_sigreturn+0x18>
  13aa2c:	ebfffa1b 	bl	1392a0 <syscall_trace>
  13aa30:	e3a00000 	mov	r0, #0
  13aa34:	e8bd8010 	pop	{r4, pc}
  13aa38:	0014b1c0 	.word	0x0014b1c0

0013aa3c <syscall_sysinfo>:
  13aa3c:	e92d4010 	push	{r4, lr}
  13aa40:	e3a01010 	mov	r1, #16
  13aa44:	e59f0008 	ldr	r0, [pc, #8]	; 13aa54 <syscall_sysinfo+0x18>
  13aa48:	ebfffa14 	bl	1392a0 <syscall_trace>
  13aa4c:	e3a00000 	mov	r0, #0
  13aa50:	e8bd8010 	pop	{r4, pc}
  13aa54:	0014b1a0 	.word	0x0014b1a0

0013aa58 <syscall_swapoff>:
  13aa58:	e92d4010 	push	{r4, lr}
  13aa5c:	e3a01010 	mov	r1, #16
  13aa60:	e59f0008 	ldr	r0, [pc, #8]	; 13aa70 <syscall_swapoff+0x18>
  13aa64:	ebfffa0d 	bl	1392a0 <syscall_trace>
  13aa68:	e3a00000 	mov	r0, #0
  13aa6c:	e8bd8010 	pop	{r4, pc}
  13aa70:	0014b190 	.word	0x0014b190

0013aa74 <syscall_wait4>:
  13aa74:	e92d4010 	push	{r4, lr}
  13aa78:	e3a0100e 	mov	r1, #14
  13aa7c:	e59f0008 	ldr	r0, [pc, #8]	; 13aa8c <syscall_wait4+0x18>
  13aa80:	ebfffa06 	bl	1392a0 <syscall_trace>
  13aa84:	e3a00000 	mov	r0, #0
  13aa88:	e8bd8010 	pop	{r4, pc}
  13aa8c:	0014b180 	.word	0x0014b180

0013aa90 <syscall_vhangup>:
  13aa90:	e92d4010 	push	{r4, lr}
  13aa94:	e3a01010 	mov	r1, #16
  13aa98:	e59f0008 	ldr	r0, [pc, #8]	; 13aaa8 <syscall_vhangup+0x18>
  13aa9c:	ebfff9ff 	bl	1392a0 <syscall_trace>
  13aaa0:	e3a00000 	mov	r0, #0
  13aaa4:	e8bd8010 	pop	{r4, pc}
  13aaa8:	0014b170 	.word	0x0014b170

0013aaac <syscall_fstat>:
  13aaac:	e92d4010 	push	{r4, lr}
  13aab0:	e3a0100e 	mov	r1, #14
  13aab4:	e59f0008 	ldr	r0, [pc, #8]	; 13aac4 <syscall_fstat+0x18>
  13aab8:	ebfff9f8 	bl	1392a0 <syscall_trace>
  13aabc:	e3a00000 	mov	r0, #0
  13aac0:	e8bd8010 	pop	{r4, pc}
  13aac4:	0014b160 	.word	0x0014b160

0013aac8 <syscall_getitimer>:
  13aac8:	e92d4010 	push	{r4, lr}
  13aacc:	e3a01012 	mov	r1, #18
  13aad0:	e59f0008 	ldr	r0, [pc, #8]	; 13aae0 <syscall_getitimer+0x18>
  13aad4:	ebfff9f1 	bl	1392a0 <syscall_trace>
  13aad8:	e3a00000 	mov	r0, #0
  13aadc:	e8bd8010 	pop	{r4, pc}
  13aae0:	0014b12c 	.word	0x0014b12c

0013aae4 <syscall_setitimer>:
  13aae4:	e92d4010 	push	{r4, lr}
  13aae8:	e3a01012 	mov	r1, #18
  13aaec:	e59f0008 	ldr	r0, [pc, #8]	; 13aafc <syscall_setitimer+0x18>
  13aaf0:	ebfff9ea 	bl	1392a0 <syscall_trace>
  13aaf4:	e3a00000 	mov	r0, #0
  13aaf8:	e8bd8010 	pop	{r4, pc}
  13aafc:	0014b118 	.word	0x0014b118

0013ab00 <syscall_syslog>:
  13ab00:	e92d4010 	push	{r4, lr}
  13ab04:	e3a0100f 	mov	r1, #15
  13ab08:	e59f0008 	ldr	r0, [pc, #8]	; 13ab18 <syscall_syslog+0x18>
  13ab0c:	ebfff9e3 	bl	1392a0 <syscall_trace>
  13ab10:	e3a00000 	mov	r0, #0
  13ab14:	e8bd8010 	pop	{r4, pc}
  13ab18:	0014b108 	.word	0x0014b108

0013ab1c <syscall_fstatfs>:
  13ab1c:	e92d4010 	push	{r4, lr}
  13ab20:	e3a01010 	mov	r1, #16
  13ab24:	e59f0008 	ldr	r0, [pc, #8]	; 13ab34 <syscall_fstatfs+0x18>
  13ab28:	ebfff9dc 	bl	1392a0 <syscall_trace>
  13ab2c:	e3a00000 	mov	r0, #0
  13ab30:	e8bd8010 	pop	{r4, pc}
  13ab34:	0014b0f8 	.word	0x0014b0f8

0013ab38 <syscall_statfs>:
  13ab38:	e92d4010 	push	{r4, lr}
  13ab3c:	e3a0100f 	mov	r1, #15
  13ab40:	e59f0008 	ldr	r0, [pc, #8]	; 13ab50 <syscall_statfs+0x18>
  13ab44:	ebfff9d5 	bl	1392a0 <syscall_trace>
  13ab48:	e3a00000 	mov	r0, #0
  13ab4c:	e8bd8010 	pop	{r4, pc}
  13ab50:	0014b0e8 	.word	0x0014b0e8

0013ab54 <syscall_setpriority>:
  13ab54:	e92d4010 	push	{r4, lr}
  13ab58:	e3a01014 	mov	r1, #20
  13ab5c:	e59f0008 	ldr	r0, [pc, #8]	; 13ab6c <syscall_setpriority+0x18>
  13ab60:	ebfff9ce 	bl	1392a0 <syscall_trace>
  13ab64:	e3a00000 	mov	r0, #0
  13ab68:	e8bd8010 	pop	{r4, pc}
  13ab6c:	0014b0d4 	.word	0x0014b0d4

0013ab70 <syscall_getpriority>:
  13ab70:	e92d4010 	push	{r4, lr}
  13ab74:	e3a01014 	mov	r1, #20
  13ab78:	e59f0008 	ldr	r0, [pc, #8]	; 13ab88 <syscall_getpriority+0x18>
  13ab7c:	ebfff9c7 	bl	1392a0 <syscall_trace>
  13ab80:	e3a00000 	mov	r0, #0
  13ab84:	e8bd8010 	pop	{r4, pc}
  13ab88:	0014b0c0 	.word	0x0014b0c0

0013ab8c <syscall_fchown>:
  13ab8c:	e92d4010 	push	{r4, lr}
  13ab90:	e3a0100f 	mov	r1, #15
  13ab94:	e59f0008 	ldr	r0, [pc, #8]	; 13aba4 <syscall_fchown+0x18>
  13ab98:	ebfff9c0 	bl	1392a0 <syscall_trace>
  13ab9c:	e3a00000 	mov	r0, #0
  13aba0:	e8bd8010 	pop	{r4, pc}
  13aba4:	0014b0b0 	.word	0x0014b0b0

0013aba8 <syscall_fchmod>:
  13aba8:	e92d4010 	push	{r4, lr}
  13abac:	e3a0100f 	mov	r1, #15
  13abb0:	e59f0008 	ldr	r0, [pc, #8]	; 13abc0 <syscall_fchmod+0x18>
  13abb4:	ebfff9b9 	bl	1392a0 <syscall_trace>
  13abb8:	e3a00000 	mov	r0, #0
  13abbc:	e8bd8010 	pop	{r4, pc}
  13abc0:	0014b0a0 	.word	0x0014b0a0

0013abc4 <syscall_ftruncate>:
  13abc4:	e92d4010 	push	{r4, lr}
  13abc8:	e3a01012 	mov	r1, #18
  13abcc:	e59f0008 	ldr	r0, [pc, #8]	; 13abdc <syscall_ftruncate+0x18>
  13abd0:	ebfff9b2 	bl	1392a0 <syscall_trace>
  13abd4:	e3a00000 	mov	r0, #0
  13abd8:	e8bd8010 	pop	{r4, pc}
  13abdc:	0014b08c 	.word	0x0014b08c

0013abe0 <syscall_truncate>:
  13abe0:	e92d4010 	push	{r4, lr}
  13abe4:	e3a01011 	mov	r1, #17
  13abe8:	e59f0008 	ldr	r0, [pc, #8]	; 13abf8 <syscall_truncate+0x18>
  13abec:	ebfff9ab 	bl	1392a0 <syscall_trace>
  13abf0:	e3a00000 	mov	r0, #0
  13abf4:	e8bd8010 	pop	{r4, pc}
  13abf8:	0014b078 	.word	0x0014b078

0013abfc <syscall_reboot>:
  13abfc:	e92d4010 	push	{r4, lr}
  13ac00:	e3a0100f 	mov	r1, #15
  13ac04:	e59f0008 	ldr	r0, [pc, #8]	; 13ac14 <syscall_reboot+0x18>
  13ac08:	ebfff9a4 	bl	1392a0 <syscall_trace>
  13ac0c:	e3a00000 	mov	r0, #0
  13ac10:	e8bd8010 	pop	{r4, pc}
  13ac14:	0014b058 	.word	0x0014b058

0013ac18 <syscall_swapon>:
  13ac18:	e92d4010 	push	{r4, lr}
  13ac1c:	e3a0100f 	mov	r1, #15
  13ac20:	e59f0008 	ldr	r0, [pc, #8]	; 13ac30 <syscall_swapon+0x18>
  13ac24:	ebfff99d 	bl	1392a0 <syscall_trace>
  13ac28:	e3a00000 	mov	r0, #0
  13ac2c:	e8bd8010 	pop	{r4, pc}
  13ac30:	0014b048 	.word	0x0014b048

0013ac34 <syscall_uselib>:
  13ac34:	e92d4010 	push	{r4, lr}
  13ac38:	e3a0100f 	mov	r1, #15
  13ac3c:	e59f0008 	ldr	r0, [pc, #8]	; 13ac4c <syscall_uselib+0x18>
  13ac40:	ebfff996 	bl	1392a0 <syscall_trace>
  13ac44:	e3a00000 	mov	r0, #0
  13ac48:	e8bd8010 	pop	{r4, pc}
  13ac4c:	0014b038 	.word	0x0014b038

0013ac50 <syscall_symlink>:
  13ac50:	e92d4010 	push	{r4, lr}
  13ac54:	e3a01010 	mov	r1, #16
  13ac58:	e59f0008 	ldr	r0, [pc, #8]	; 13ac68 <syscall_symlink+0x18>
  13ac5c:	ebfff98f 	bl	1392a0 <syscall_trace>
  13ac60:	e3a00000 	mov	r0, #0
  13ac64:	e8bd8010 	pop	{r4, pc}
  13ac68:	0014b014 	.word	0x0014b014

0013ac6c <syscall_setgroups>:
  13ac6c:	e92d4010 	push	{r4, lr}
  13ac70:	e3a01012 	mov	r1, #18
  13ac74:	e59f0008 	ldr	r0, [pc, #8]	; 13ac84 <syscall_setgroups+0x18>
  13ac78:	ebfff988 	bl	1392a0 <syscall_trace>
  13ac7c:	e3a00000 	mov	r0, #0
  13ac80:	e8bd8010 	pop	{r4, pc}
  13ac84:	0014b000 	.word	0x0014b000

0013ac88 <syscall_getgroups>:
  13ac88:	e92d4010 	push	{r4, lr}
  13ac8c:	e3a01012 	mov	r1, #18
  13ac90:	e59f0008 	ldr	r0, [pc, #8]	; 13aca0 <syscall_getgroups+0x18>
  13ac94:	ebfff981 	bl	1392a0 <syscall_trace>
  13ac98:	e3a00000 	mov	r0, #0
  13ac9c:	e8bd8010 	pop	{r4, pc}
  13aca0:	0014afec 	.word	0x0014afec

0013aca4 <syscall_settimeofday>:
  13aca4:	e92d4010 	push	{r4, lr}
  13aca8:	e3a01015 	mov	r1, #21
  13acac:	e59f0008 	ldr	r0, [pc, #8]	; 13acbc <syscall_settimeofday+0x18>
  13acb0:	ebfff97a 	bl	1392a0 <syscall_trace>
  13acb4:	e3a00000 	mov	r0, #0
  13acb8:	e8bd8010 	pop	{r4, pc}
  13acbc:	0014afd4 	.word	0x0014afd4

0013acc0 <syscall_gettimeofday>:
  13acc0:	e92d4010 	push	{r4, lr}
  13acc4:	e3a01015 	mov	r1, #21
  13acc8:	e59f0008 	ldr	r0, [pc, #8]	; 13acd8 <syscall_gettimeofday+0x18>
  13accc:	ebfff973 	bl	1392a0 <syscall_trace>
  13acd0:	e3a00000 	mov	r0, #0
  13acd4:	e8bd8010 	pop	{r4, pc}
  13acd8:	0014afbc 	.word	0x0014afbc

0013acdc <syscall_getrusage>:
  13acdc:	e92d4010 	push	{r4, lr}
  13ace0:	e3a01012 	mov	r1, #18
  13ace4:	e59f0008 	ldr	r0, [pc, #8]	; 13acf4 <syscall_getrusage+0x18>
  13ace8:	ebfff96c 	bl	1392a0 <syscall_trace>
  13acec:	e3a00000 	mov	r0, #0
  13acf0:	e8bd8010 	pop	{r4, pc}
  13acf4:	0014afa8 	.word	0x0014afa8

0013acf8 <syscall_sethostname>:
  13acf8:	e92d4010 	push	{r4, lr}
  13acfc:	e3a01014 	mov	r1, #20
  13ad00:	e59f0008 	ldr	r0, [pc, #8]	; 13ad10 <syscall_sethostname+0x18>
  13ad04:	ebfff965 	bl	1392a0 <syscall_trace>
  13ad08:	e3a00000 	mov	r0, #0
  13ad0c:	e8bd8010 	pop	{r4, pc}
  13ad10:	0014af80 	.word	0x0014af80

0013ad14 <syscall_sigpending>:
  13ad14:	e92d4010 	push	{r4, lr}
  13ad18:	e3a01013 	mov	r1, #19
  13ad1c:	e59f0008 	ldr	r0, [pc, #8]	; 13ad2c <syscall_sigpending+0x18>
  13ad20:	ebfff95e 	bl	1392a0 <syscall_trace>
  13ad24:	e3a00000 	mov	r0, #0
  13ad28:	e8bd8010 	pop	{r4, pc}
  13ad2c:	0014af6c 	.word	0x0014af6c

0013ad30 <syscall_sigsuspend>:
  13ad30:	e92d4010 	push	{r4, lr}
  13ad34:	e3a01013 	mov	r1, #19
  13ad38:	e59f0008 	ldr	r0, [pc, #8]	; 13ad48 <syscall_sigsuspend+0x18>
  13ad3c:	ebfff957 	bl	1392a0 <syscall_trace>
  13ad40:	e3a00000 	mov	r0, #0
  13ad44:	e8bd8010 	pop	{r4, pc}
  13ad48:	0014af58 	.word	0x0014af58

0013ad4c <syscall_setregid>:
  13ad4c:	e92d4010 	push	{r4, lr}
  13ad50:	e3a01011 	mov	r1, #17
  13ad54:	e59f0008 	ldr	r0, [pc, #8]	; 13ad64 <syscall_setregid+0x18>
  13ad58:	ebfff950 	bl	1392a0 <syscall_trace>
  13ad5c:	e3a00000 	mov	r0, #0
  13ad60:	e8bd8010 	pop	{r4, pc}
  13ad64:	0014af44 	.word	0x0014af44

0013ad68 <syscall_setreuid>:
  13ad68:	e92d4010 	push	{r4, lr}
  13ad6c:	e3a01011 	mov	r1, #17
  13ad70:	e59f0008 	ldr	r0, [pc, #8]	; 13ad80 <syscall_setreuid+0x18>
  13ad74:	ebfff949 	bl	1392a0 <syscall_trace>
  13ad78:	e3a00000 	mov	r0, #0
  13ad7c:	e8bd8010 	pop	{r4, pc}
  13ad80:	0014af30 	.word	0x0014af30

0013ad84 <syscall_getpgrp>:
  13ad84:	e92d4010 	push	{r4, lr}
  13ad88:	e3a01010 	mov	r1, #16
  13ad8c:	e59f0008 	ldr	r0, [pc, #8]	; 13ad9c <syscall_getpgrp+0x18>
  13ad90:	ebfff942 	bl	1392a0 <syscall_trace>
  13ad94:	e3a00000 	mov	r0, #0
  13ad98:	e8bd8010 	pop	{r4, pc}
  13ad9c:	0014aefc 	.word	0x0014aefc

0013ada0 <syscall_getppid>:
  13ada0:	e92d4010 	push	{r4, lr}
  13ada4:	e3a01010 	mov	r1, #16
  13ada8:	e59f0008 	ldr	r0, [pc, #8]	; 13adb8 <syscall_getppid+0x18>
  13adac:	ebfff93b 	bl	1392a0 <syscall_trace>
  13adb0:	e3a00000 	mov	r0, #0
  13adb4:	e8bd8010 	pop	{r4, pc}
  13adb8:	0014aeec 	.word	0x0014aeec

0013adbc <syscall_ustat>:
  13adbc:	e92d4010 	push	{r4, lr}
  13adc0:	e3a0100e 	mov	r1, #14
  13adc4:	e59f0008 	ldr	r0, [pc, #8]	; 13add4 <syscall_ustat+0x18>
  13adc8:	ebfff934 	bl	1392a0 <syscall_trace>
  13adcc:	e3a00000 	mov	r0, #0
  13add0:	e8bd8010 	pop	{r4, pc}
  13add4:	0014aecc 	.word	0x0014aecc

0013add8 <syscall_chroot>:
  13add8:	e92d4010 	push	{r4, lr}
  13addc:	e3a0100f 	mov	r1, #15
  13ade0:	e59f0008 	ldr	r0, [pc, #8]	; 13adf0 <syscall_chroot+0x18>
  13ade4:	ebfff92d 	bl	1392a0 <syscall_trace>
  13ade8:	e3a00000 	mov	r0, #0
  13adec:	e8bd8010 	pop	{r4, pc}
  13adf0:	0014aebc 	.word	0x0014aebc

0013adf4 <syscall_umask>:
  13adf4:	e92d4010 	push	{r4, lr}
  13adf8:	e3a0100e 	mov	r1, #14
  13adfc:	e59f0008 	ldr	r0, [pc, #8]	; 13ae0c <syscall_umask+0x18>
  13ae00:	ebfff926 	bl	1392a0 <syscall_trace>
  13ae04:	e3a00000 	mov	r0, #0
  13ae08:	e8bd8010 	pop	{r4, pc}
  13ae0c:	0014aeac 	.word	0x0014aeac

0013ae10 <syscall_setpgid>:
  13ae10:	e92d4010 	push	{r4, lr}
  13ae14:	e3a01010 	mov	r1, #16
  13ae18:	e59f0008 	ldr	r0, [pc, #8]	; 13ae28 <syscall_setpgid+0x18>
  13ae1c:	ebfff91f 	bl	1392a0 <syscall_trace>
  13ae20:	e3a00000 	mov	r0, #0
  13ae24:	e8bd8010 	pop	{r4, pc}
  13ae28:	0014ae9c 	.word	0x0014ae9c

0013ae2c <syscall_umount2>:
  13ae2c:	e92d4010 	push	{r4, lr}
  13ae30:	e3a01010 	mov	r1, #16
  13ae34:	e59f0008 	ldr	r0, [pc, #8]	; 13ae44 <syscall_umount2+0x18>
  13ae38:	ebfff918 	bl	1392a0 <syscall_trace>
  13ae3c:	e3a00000 	mov	r0, #0
  13ae40:	e8bd8010 	pop	{r4, pc}
  13ae44:	0014ae6c 	.word	0x0014ae6c

0013ae48 <syscall_acct>:
  13ae48:	e92d4010 	push	{r4, lr}
  13ae4c:	e3a0100d 	mov	r1, #13
  13ae50:	e59f0008 	ldr	r0, [pc, #8]	; 13ae60 <syscall_acct+0x18>
  13ae54:	ebfff911 	bl	1392a0 <syscall_trace>
  13ae58:	e3a00000 	mov	r0, #0
  13ae5c:	e8bd8010 	pop	{r4, pc}
  13ae60:	0014ae5c 	.word	0x0014ae5c

0013ae64 <syscall_getegid>:
  13ae64:	e92d4010 	push	{r4, lr}
  13ae68:	e3a01010 	mov	r1, #16
  13ae6c:	e59f0008 	ldr	r0, [pc, #8]	; 13ae7c <syscall_getegid+0x18>
  13ae70:	ebfff90a 	bl	1392a0 <syscall_trace>
  13ae74:	e3a00000 	mov	r0, #0
  13ae78:	e8bd8010 	pop	{r4, pc}
  13ae7c:	0014ae4c 	.word	0x0014ae4c

0013ae80 <syscall_geteuid>:
  13ae80:	e92d4010 	push	{r4, lr}
  13ae84:	e3a01010 	mov	r1, #16
  13ae88:	e59f0008 	ldr	r0, [pc, #8]	; 13ae98 <syscall_geteuid+0x18>
  13ae8c:	ebfff903 	bl	1392a0 <syscall_trace>
  13ae90:	e3a00000 	mov	r0, #0
  13ae94:	e8bd8010 	pop	{r4, pc}
  13ae98:	0014ae3c 	.word	0x0014ae3c

0013ae9c <syscall_getgid>:
  13ae9c:	e92d4010 	push	{r4, lr}
  13aea0:	e3a0100f 	mov	r1, #15
  13aea4:	e59f0008 	ldr	r0, [pc, #8]	; 13aeb4 <syscall_getgid+0x18>
  13aea8:	ebfff8fc 	bl	1392a0 <syscall_trace>
  13aeac:	e3a00000 	mov	r0, #0
  13aeb0:	e8bd8010 	pop	{r4, pc}
  13aeb4:	0014ae2c 	.word	0x0014ae2c

0013aeb8 <syscall_setgid>:
  13aeb8:	e92d4010 	push	{r4, lr}
  13aebc:	e3a0100f 	mov	r1, #15
  13aec0:	e59f0008 	ldr	r0, [pc, #8]	; 13aed0 <syscall_setgid+0x18>
  13aec4:	ebfff8f5 	bl	1392a0 <syscall_trace>
  13aec8:	e3a00000 	mov	r0, #0
  13aecc:	e8bd8010 	pop	{r4, pc}
  13aed0:	0014ae1c 	.word	0x0014ae1c

0013aed4 <syscall_times>:
  13aed4:	e92d4010 	push	{r4, lr}
  13aed8:	e3a0100e 	mov	r1, #14
  13aedc:	e59f0008 	ldr	r0, [pc, #8]	; 13aeec <syscall_times+0x18>
  13aee0:	ebfff8ee 	bl	1392a0 <syscall_trace>
  13aee4:	e3a00000 	mov	r0, #0
  13aee8:	e8bd8010 	pop	{r4, pc}
  13aeec:	0014ae00 	.word	0x0014ae00

0013aef0 <syscall_sync>:
  13aef0:	e92d4010 	push	{r4, lr}
  13aef4:	e3a0100d 	mov	r1, #13
  13aef8:	e59f0008 	ldr	r0, [pc, #8]	; 13af08 <syscall_sync+0x18>
  13aefc:	ebfff8e7 	bl	1392a0 <syscall_trace>
  13af00:	e3a00000 	mov	r0, #0
  13af04:	e8bd8010 	pop	{r4, pc}
  13af08:	0014ad94 	.word	0x0014ad94

0013af0c <syscall_nice>:
  13af0c:	e92d4010 	push	{r4, lr}
  13af10:	e3a0100d 	mov	r1, #13
  13af14:	e59f0008 	ldr	r0, [pc, #8]	; 13af24 <syscall_nice+0x18>
  13af18:	ebfff8e0 	bl	1392a0 <syscall_trace>
  13af1c:	e3a00000 	mov	r0, #0
  13af20:	e8bd8010 	pop	{r4, pc}
  13af24:	0014ad84 	.word	0x0014ad84

0013af28 <syscall_pause>:
  13af28:	e92d4010 	push	{r4, lr}
  13af2c:	e3a0100e 	mov	r1, #14
  13af30:	e59f0008 	ldr	r0, [pc, #8]	; 13af40 <syscall_pause+0x18>
  13af34:	ebfff8d9 	bl	1392a0 <syscall_trace>
  13af38:	e3a00000 	mov	r0, #0
  13af3c:	e8bd8010 	pop	{r4, pc}
  13af40:	0014ad64 	.word	0x0014ad64

0013af44 <syscall_ptrace>:
  13af44:	e92d4010 	push	{r4, lr}
  13af48:	e3a0100f 	mov	r1, #15
  13af4c:	e59f0008 	ldr	r0, [pc, #8]	; 13af5c <syscall_ptrace+0x18>
  13af50:	ebfff8d2 	bl	1392a0 <syscall_trace>
  13af54:	e3a00000 	mov	r0, #0
  13af58:	e8bd8010 	pop	{r4, pc}
  13af5c:	0014ad54 	.word	0x0014ad54

0013af60 <syscall_getuid>:
  13af60:	e92d4010 	push	{r4, lr}
  13af64:	e3a0100f 	mov	r1, #15
  13af68:	e59f0008 	ldr	r0, [pc, #8]	; 13af78 <syscall_getuid+0x18>
  13af6c:	ebfff8cb 	bl	1392a0 <syscall_trace>
  13af70:	e3a00000 	mov	r0, #0
  13af74:	e8bd8010 	pop	{r4, pc}
  13af78:	0014ad44 	.word	0x0014ad44

0013af7c <syscall_setuid>:
  13af7c:	e92d4010 	push	{r4, lr}
  13af80:	e3a0100f 	mov	r1, #15
  13af84:	e59f0008 	ldr	r0, [pc, #8]	; 13af94 <syscall_setuid+0x18>
  13af88:	ebfff8c4 	bl	1392a0 <syscall_trace>
  13af8c:	e3a00000 	mov	r0, #0
  13af90:	e8bd8010 	pop	{r4, pc}
  13af94:	0014ad34 	.word	0x0014ad34

0013af98 <syscall_mount>:
  13af98:	e92d4010 	push	{r4, lr}
  13af9c:	e3a0100e 	mov	r1, #14
  13afa0:	e59f0008 	ldr	r0, [pc, #8]	; 13afb0 <syscall_mount+0x18>
  13afa4:	ebfff8bd 	bl	1392a0 <syscall_trace>
  13afa8:	e3a00000 	mov	r0, #0
  13afac:	e8bd8010 	pop	{r4, pc}
  13afb0:	0014ad24 	.word	0x0014ad24

0013afb4 <syscall_lchown>:
  13afb4:	e92d4010 	push	{r4, lr}
  13afb8:	e3a0100f 	mov	r1, #15
  13afbc:	e59f0008 	ldr	r0, [pc, #8]	; 13afcc <syscall_lchown+0x18>
  13afc0:	ebfff8b6 	bl	1392a0 <syscall_trace>
  13afc4:	e3a00000 	mov	r0, #0
  13afc8:	e8bd8010 	pop	{r4, pc}
  13afcc:	0014acf4 	.word	0x0014acf4

0013afd0 <syscall_chmod>:
  13afd0:	e92d4010 	push	{r4, lr}
  13afd4:	e3a0100e 	mov	r1, #14
  13afd8:	e59f0008 	ldr	r0, [pc, #8]	; 13afe8 <syscall_chmod+0x18>
  13afdc:	ebfff8af 	bl	1392a0 <syscall_trace>
  13afe0:	e3a00000 	mov	r0, #0
  13afe4:	e8bd8010 	pop	{r4, pc}
  13afe8:	0014ace4 	.word	0x0014ace4

0013afec <syscall_mknod>:
  13afec:	e92d4010 	push	{r4, lr}
  13aff0:	e3a0100e 	mov	r1, #14
  13aff4:	e59f0008 	ldr	r0, [pc, #8]	; 13b004 <syscall_mknod+0x18>
  13aff8:	ebfff8a8 	bl	1392a0 <syscall_trace>
  13affc:	e3a00000 	mov	r0, #0
  13b000:	e8bd8010 	pop	{r4, pc}
  13b004:	0014acd4 	.word	0x0014acd4

0013b008 <syscall_link>:
  13b008:	e92d4010 	push	{r4, lr}
  13b00c:	e3a0100d 	mov	r1, #13
  13b010:	e59f0008 	ldr	r0, [pc, #8]	; 13b020 <syscall_link+0x18>
  13b014:	ebfff8a1 	bl	1392a0 <syscall_trace>
  13b018:	e3a00000 	mov	r0, #0
  13b01c:	e8bd8010 	pop	{r4, pc}
  13b020:	0014ac94 	.word	0x0014ac94

0013b024 <syscall_creat>:
  13b024:	e92d4010 	push	{r4, lr}
  13b028:	e3a0100e 	mov	r1, #14
  13b02c:	e59f0008 	ldr	r0, [pc, #8]	; 13b03c <syscall_creat+0x18>
  13b030:	ebfff89a 	bl	1392a0 <syscall_trace>
  13b034:	e3a00000 	mov	r0, #0
  13b038:	e8bd8010 	pop	{r4, pc}
  13b03c:	0014ac84 	.word	0x0014ac84

0013b040 <syscall_restart_syscall>:
  13b040:	e92d4010 	push	{r4, lr}
  13b044:	e3a01018 	mov	r1, #24
  13b048:	e59f0008 	ldr	r0, [pc, #8]	; 13b058 <syscall_restart_syscall+0x18>
  13b04c:	ebfff893 	bl	1392a0 <syscall_trace>
  13b050:	e3a00000 	mov	r0, #0
  13b054:	e8bd8010 	pop	{r4, pc}
  13b058:	0014ac0c 	.word	0x0014ac0c

0013b05c <syscall_debug>:
  13b05c:	e92d4070 	push	{r4, r5, r6, lr}
  13b060:	e1a04000 	mov	r4, r0
  13b064:	e1a05001 	mov	r5, r1
  13b068:	e3a0201d 	mov	r2, #29
  13b06c:	e59f1018 	ldr	r1, [pc, #24]	; 13b08c <syscall_debug+0x30>
  13b070:	e3a000ff 	mov	r0, #255	; 0xff
  13b074:	eb0004f9 	bl	13c460 <syscall>
  13b078:	e1a02005 	mov	r2, r5
  13b07c:	e1a01004 	mov	r1, r4
  13b080:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b084:	e3a000ff 	mov	r0, #255	; 0xff
  13b088:	ea0004f4 	b	13c460 <syscall>
  13b08c:	0014c6cc 	.word	0x0014c6cc

0013b090 <syscall_shmdt>:
  13b090:	e92d4010 	push	{r4, lr}
  13b094:	e1a04000 	mov	r4, r0
  13b098:	e3a0100e 	mov	r1, #14
  13b09c:	e59f0010 	ldr	r0, [pc, #16]	; 13b0b4 <syscall_shmdt+0x24>
  13b0a0:	ebffffed 	bl	13b05c <syscall_debug>
  13b0a4:	e1a01004 	mov	r1, r4
  13b0a8:	e8bd4010 	pop	{r4, lr}
  13b0ac:	e59f0004 	ldr	r0, [pc, #4]	; 13b0b8 <syscall_shmdt+0x28>
  13b0b0:	ea0004ea 	b	13c460 <syscall>
  13b0b4:	0014bf64 	.word	0x0014bf64
  13b0b8:	00000132 	.word	0x00000132

0013b0bc <syscall_set_tid_address>:
  13b0bc:	e92d4010 	push	{r4, lr}
  13b0c0:	e1a04000 	mov	r4, r0
  13b0c4:	e3a01018 	mov	r1, #24
  13b0c8:	e59f0010 	ldr	r0, [pc, #16]	; 13b0e0 <syscall_set_tid_address+0x24>
  13b0cc:	ebffffe2 	bl	13b05c <syscall_debug>
  13b0d0:	e1a01004 	mov	r1, r4
  13b0d4:	e8bd4010 	pop	{r4, lr}
  13b0d8:	e3a0007c 	mov	r0, #124	; 0x7c
  13b0dc:	ea0004df 	b	13c460 <syscall>
  13b0e0:	0014bb84 	.word	0x0014bb84

0013b0e4 <syscall_exit_group>:
  13b0e4:	e92d4010 	push	{r4, lr}
  13b0e8:	e1a04000 	mov	r4, r0
  13b0ec:	e3a01013 	mov	r1, #19
  13b0f0:	e59f0010 	ldr	r0, [pc, #16]	; 13b108 <syscall_exit_group+0x24>
  13b0f4:	ebffffd8 	bl	13b05c <syscall_debug>
  13b0f8:	e1a01004 	mov	r1, r4
  13b0fc:	e8bd4010 	pop	{r4, lr}
  13b100:	e3a00062 	mov	r0, #98	; 0x62
  13b104:	ea0004d5 	b	13c460 <syscall>
  13b108:	0014bafc 	.word	0x0014bafc

0013b10c <syscall_sched_get_priority_min>:
  13b10c:	e92d4010 	push	{r4, lr}
  13b110:	e1a04000 	mov	r4, r0
  13b114:	e3a0101f 	mov	r1, #31
  13b118:	e59f0010 	ldr	r0, [pc, #16]	; 13b130 <syscall_sched_get_priority_min+0x24>
  13b11c:	ebffffce 	bl	13b05c <syscall_debug>
  13b120:	e1a01004 	mov	r1, r4
  13b124:	e8bd4010 	pop	{r4, lr}
  13b128:	e3a00097 	mov	r0, #151	; 0x97
  13b12c:	ea0004cb 	b	13c460 <syscall>
  13b130:	0014b494 	.word	0x0014b494

0013b134 <syscall_sched_get_priority_max>:
  13b134:	e92d4010 	push	{r4, lr}
  13b138:	e1a04000 	mov	r4, r0
  13b13c:	e3a0101f 	mov	r1, #31
  13b140:	e59f0010 	ldr	r0, [pc, #16]	; 13b158 <syscall_sched_get_priority_max+0x24>
  13b144:	ebffffc4 	bl	13b05c <syscall_debug>
  13b148:	e1a01004 	mov	r1, r4
  13b14c:	e8bd4010 	pop	{r4, lr}
  13b150:	e3a00096 	mov	r0, #150	; 0x96
  13b154:	ea0004c1 	b	13c460 <syscall>
  13b158:	0014b474 	.word	0x0014b474

0013b15c <syscall_fsync>:
  13b15c:	e92d4010 	push	{r4, lr}
  13b160:	e1a04000 	mov	r4, r0
  13b164:	e3a0100e 	mov	r1, #14
  13b168:	e59f0010 	ldr	r0, [pc, #16]	; 13b180 <syscall_fsync+0x24>
  13b16c:	ebffffba 	bl	13b05c <syscall_debug>
  13b170:	e1a01004 	mov	r1, r4
  13b174:	e8bd4010 	pop	{r4, lr}
  13b178:	e3a0009b 	mov	r0, #155	; 0x9b
  13b17c:	ea0004b7 	b	13c460 <syscall>
  13b180:	0014b1b0 	.word	0x0014b1b0

0013b184 <syscall_brk>:
  13b184:	e92d4010 	push	{r4, lr}
  13b188:	e1a04000 	mov	r4, r0
  13b18c:	e3a0100c 	mov	r1, #12
  13b190:	e59f0010 	ldr	r0, [pc, #16]	; 13b1a8 <syscall_brk+0x24>
  13b194:	ebffffb0 	bl	13b05c <syscall_debug>
  13b198:	e1a01004 	mov	r1, r4
  13b19c:	e8bd4010 	pop	{r4, lr}
  13b1a0:	e3a00034 	mov	r0, #52	; 0x34
  13b1a4:	ea0004ad 	b	13c460 <syscall>
  13b1a8:	0014ae10 	.word	0x0014ae10

0013b1ac <syscall_pipe>:
  13b1ac:	e92d4010 	push	{r4, lr}
  13b1b0:	e1a04000 	mov	r4, r0
  13b1b4:	e3a0100d 	mov	r1, #13
  13b1b8:	e59f0010 	ldr	r0, [pc, #16]	; 13b1d0 <syscall_pipe+0x24>
  13b1bc:	ebffffa6 	bl	13b05c <syscall_debug>
  13b1c0:	e1a01004 	mov	r1, r4
  13b1c4:	e8bd4010 	pop	{r4, lr}
  13b1c8:	e3a0007e 	mov	r0, #126	; 0x7e
  13b1cc:	ea0004a3 	b	13c460 <syscall>
  13b1d0:	0014adf0 	.word	0x0014adf0

0013b1d4 <syscall_dup>:
  13b1d4:	e92d4010 	push	{r4, lr}
  13b1d8:	e1a04000 	mov	r4, r0
  13b1dc:	e3a0100c 	mov	r1, #12
  13b1e0:	e59f0010 	ldr	r0, [pc, #16]	; 13b1f8 <syscall_dup+0x24>
  13b1e4:	ebffff9c 	bl	13b05c <syscall_debug>
  13b1e8:	e1a01004 	mov	r1, r4
  13b1ec:	e8bd4010 	pop	{r4, lr}
  13b1f0:	e3a00085 	mov	r0, #133	; 0x85
  13b1f4:	ea000499 	b	13c460 <syscall>
  13b1f8:	0014ade4 	.word	0x0014ade4

0013b1fc <syscall_rmdir>:
  13b1fc:	e92d4010 	push	{r4, lr}
  13b200:	e1a04000 	mov	r4, r0
  13b204:	e3a0100e 	mov	r1, #14
  13b208:	e59f0010 	ldr	r0, [pc, #16]	; 13b220 <syscall_rmdir+0x24>
  13b20c:	ebffff92 	bl	13b05c <syscall_debug>
  13b210:	e1a01004 	mov	r1, r4
  13b214:	e8bd4010 	pop	{r4, lr}
  13b218:	e3a00078 	mov	r0, #120	; 0x78
  13b21c:	ea00048f 	b	13c460 <syscall>
  13b220:	0014add4 	.word	0x0014add4

0013b224 <syscall_chdir>:
  13b224:	e92d4010 	push	{r4, lr}
  13b228:	e1a04000 	mov	r4, r0
  13b22c:	e3a0100e 	mov	r1, #14
  13b230:	e59f0010 	ldr	r0, [pc, #16]	; 13b248 <syscall_chdir+0x24>
  13b234:	ebffff88 	bl	13b05c <syscall_debug>
  13b238:	e1a01004 	mov	r1, r4
  13b23c:	e8bd4010 	pop	{r4, lr}
  13b240:	e3a00075 	mov	r0, #117	; 0x75
  13b244:	ea000485 	b	13c460 <syscall>
  13b248:	0014acc4 	.word	0x0014acc4

0013b24c <syscall_unlink>:
  13b24c:	e92d4010 	push	{r4, lr}
  13b250:	e1a04000 	mov	r4, r0
  13b254:	e3a0100f 	mov	r1, #15
  13b258:	e59f0010 	ldr	r0, [pc, #16]	; 13b270 <syscall_unlink+0x24>
  13b25c:	ebffff7e 	bl	13b05c <syscall_debug>
  13b260:	e1a01004 	mov	r1, r4
  13b264:	e8bd4010 	pop	{r4, lr}
  13b268:	e3a00076 	mov	r0, #118	; 0x76
  13b26c:	ea00047b 	b	13c460 <syscall>
  13b270:	0014aca4 	.word	0x0014aca4

0013b274 <syscall_close>:
  13b274:	e92d4010 	push	{r4, lr}
  13b278:	e1a04000 	mov	r4, r0
  13b27c:	e3a0100e 	mov	r1, #14
  13b280:	e59f0010 	ldr	r0, [pc, #16]	; 13b298 <syscall_close+0x24>
  13b284:	ebffff74 	bl	13b05c <syscall_debug>
  13b288:	e1a01004 	mov	r1, r4
  13b28c:	e8bd4010 	pop	{r4, lr}
  13b290:	e3a00006 	mov	r0, #6
  13b294:	ea000471 	b	13c460 <syscall>
  13b298:	0014ac74 	.word	0x0014ac74

0013b29c <syscall_exit>:
  13b29c:	e92d4010 	push	{r4, lr}
  13b2a0:	e1a04000 	mov	r4, r0
  13b2a4:	e3a0100d 	mov	r1, #13
  13b2a8:	e59f0010 	ldr	r0, [pc, #16]	; 13b2c0 <syscall_exit+0x24>
  13b2ac:	ebffff6a 	bl	13b05c <syscall_debug>
  13b2b0:	e1a01004 	mov	r1, r4
  13b2b4:	e8bd4010 	pop	{r4, lr}
  13b2b8:	e3a00001 	mov	r0, #1
  13b2bc:	ea000467 	b	13c460 <syscall>
  13b2c0:	0014ac24 	.word	0x0014ac24

0013b2c4 <syscall_listen>:
  13b2c4:	e92d4070 	push	{r4, r5, r6, lr}
  13b2c8:	e1a04000 	mov	r4, r0
  13b2cc:	e1a05001 	mov	r5, r1
  13b2d0:	e59f0018 	ldr	r0, [pc, #24]	; 13b2f0 <syscall_listen+0x2c>
  13b2d4:	e3a0100f 	mov	r1, #15
  13b2d8:	ebffff5f 	bl	13b05c <syscall_debug>
  13b2dc:	e1a02005 	mov	r2, r5
  13b2e0:	e1a01004 	mov	r1, r4
  13b2e4:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b2e8:	e3a0004d 	mov	r0, #77	; 0x4d
  13b2ec:	ea00045b 	b	13c460 <syscall>
  13b2f0:	0014bde8 	.word	0x0014bde8

0013b2f4 <syscall_clock_getres>:
  13b2f4:	e92d4070 	push	{r4, r5, r6, lr}
  13b2f8:	e1a04000 	mov	r4, r0
  13b2fc:	e1a05001 	mov	r5, r1
  13b300:	e59f0018 	ldr	r0, [pc, #24]	; 13b320 <syscall_clock_getres+0x2c>
  13b304:	e3a01015 	mov	r1, #21
  13b308:	ebffff53 	bl	13b05c <syscall_debug>
  13b30c:	e1a02005 	mov	r2, r5
  13b310:	e1a01004 	mov	r1, r4
  13b314:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b318:	e3a00081 	mov	r0, #129	; 0x81
  13b31c:	ea00044f 	b	13c460 <syscall>
  13b320:	0014bc48 	.word	0x0014bc48

0013b324 <syscall_clock_gettime>:
  13b324:	e92d4070 	push	{r4, r5, r6, lr}
  13b328:	e1a04000 	mov	r4, r0
  13b32c:	e1a05001 	mov	r5, r1
  13b330:	e59f0018 	ldr	r0, [pc, #24]	; 13b350 <syscall_clock_gettime+0x2c>
  13b334:	e3a01016 	mov	r1, #22
  13b338:	ebffff47 	bl	13b05c <syscall_debug>
  13b33c:	e1a02005 	mov	r2, r5
  13b340:	e1a01004 	mov	r1, r4
  13b344:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b348:	e3a00080 	mov	r0, #128	; 0x80
  13b34c:	ea000443 	b	13c460 <syscall>
  13b350:	0014bc30 	.word	0x0014bc30

0013b354 <syscall_clock_settime>:
  13b354:	e92d4070 	push	{r4, r5, r6, lr}
  13b358:	e1a04000 	mov	r4, r0
  13b35c:	e1a05001 	mov	r5, r1
  13b360:	e59f0018 	ldr	r0, [pc, #24]	; 13b380 <syscall_clock_settime+0x2c>
  13b364:	e3a01016 	mov	r1, #22
  13b368:	ebffff3b 	bl	13b05c <syscall_debug>
  13b36c:	e1a02005 	mov	r2, r5
  13b370:	e1a01004 	mov	r1, r4
  13b374:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b378:	e3a0007f 	mov	r0, #127	; 0x7f
  13b37c:	ea000437 	b	13c460 <syscall>
  13b380:	0014bc18 	.word	0x0014bc18

0013b384 <syscall_tkill>:
  13b384:	e92d4070 	push	{r4, r5, r6, lr}
  13b388:	e1a04000 	mov	r4, r0
  13b38c:	e1a05001 	mov	r5, r1
  13b390:	e59f0018 	ldr	r0, [pc, #24]	; 13b3b0 <syscall_tkill+0x2c>
  13b394:	e3a0100e 	mov	r1, #14
  13b398:	ebffff2f 	bl	13b05c <syscall_debug>
  13b39c:	e1a02005 	mov	r2, r5
  13b3a0:	e1a01004 	mov	r1, r4
  13b3a4:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b3a8:	e3a00069 	mov	r0, #105	; 0x69
  13b3ac:	ea00042b 	b	13c460 <syscall>
  13b3b0:	0014ba28 	.word	0x0014ba28

0013b3b4 <syscall_fstat64>:
  13b3b4:	e92d4070 	push	{r4, r5, r6, lr}
  13b3b8:	e1a04000 	mov	r4, r0
  13b3bc:	e1a05001 	mov	r5, r1
  13b3c0:	e59f0018 	ldr	r0, [pc, #24]	; 13b3e0 <syscall_fstat64+0x2c>
  13b3c4:	e3a01010 	mov	r1, #16
  13b3c8:	ebffff23 	bl	13b05c <syscall_debug>
  13b3cc:	e1a02005 	mov	r2, r5
  13b3d0:	e1a01004 	mov	r1, r4
  13b3d4:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b3d8:	e3a00008 	mov	r0, #8
  13b3dc:	ea00041f 	b	13c460 <syscall>
  13b3e0:	0014b72c 	.word	0x0014b72c

0013b3e4 <syscall_lstat64>:
  13b3e4:	e92d4070 	push	{r4, r5, r6, lr}
  13b3e8:	e1a04000 	mov	r4, r0
  13b3ec:	e1a05001 	mov	r5, r1
  13b3f0:	e59f0018 	ldr	r0, [pc, #24]	; 13b410 <syscall_lstat64+0x2c>
  13b3f4:	e3a01010 	mov	r1, #16
  13b3f8:	ebffff17 	bl	13b05c <syscall_debug>
  13b3fc:	e1a02005 	mov	r2, r5
  13b400:	e1a01004 	mov	r1, r4
  13b404:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b408:	e3a00043 	mov	r0, #67	; 0x43
  13b40c:	ea000413 	b	13c460 <syscall>
  13b410:	0014b71c 	.word	0x0014b71c

0013b414 <syscall_stat64>:
  13b414:	e92d4070 	push	{r4, r5, r6, lr}
  13b418:	e1a04000 	mov	r4, r0
  13b41c:	e1a05001 	mov	r5, r1
  13b420:	e59f0018 	ldr	r0, [pc, #24]	; 13b440 <syscall_stat64+0x2c>
  13b424:	e3a0100f 	mov	r1, #15
  13b428:	ebffff0b 	bl	13b05c <syscall_debug>
  13b42c:	e1a02005 	mov	r2, r5
  13b430:	e1a01004 	mov	r1, r4
  13b434:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b438:	e3a00043 	mov	r0, #67	; 0x43
  13b43c:	ea000407 	b	13c460 <syscall>
  13b440:	0014b70c 	.word	0x0014b70c

0013b444 <syscall_ugetrlimit>:
  13b444:	e92d4070 	push	{r4, r5, r6, lr}
  13b448:	e1a04000 	mov	r4, r0
  13b44c:	e1a05001 	mov	r5, r1
  13b450:	e59f0018 	ldr	r0, [pc, #24]	; 13b470 <syscall_ugetrlimit+0x2c>
  13b454:	e3a01013 	mov	r1, #19
  13b458:	ebfffeff 	bl	13b05c <syscall_debug>
  13b45c:	e1a02005 	mov	r2, r5
  13b460:	e1a01004 	mov	r1, r4
  13b464:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b468:	e3a0008d 	mov	r0, #141	; 0x8d
  13b46c:	ea0003fb 	b	13c460 <syscall>
  13b470:	0014b6c0 	.word	0x0014b6c0

0013b474 <syscall_getcwd>:
  13b474:	e92d4070 	push	{r4, r5, r6, lr}
  13b478:	e1a04000 	mov	r4, r0
  13b47c:	e1a05001 	mov	r5, r1
  13b480:	e59f0018 	ldr	r0, [pc, #24]	; 13b4a0 <syscall_getcwd+0x2c>
  13b484:	e3a0100f 	mov	r1, #15
  13b488:	ebfffef3 	bl	13b05c <syscall_debug>
  13b48c:	e1a02005 	mov	r2, r5
  13b490:	e1a01004 	mov	r1, r4
  13b494:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b498:	e3a00074 	mov	r0, #116	; 0x74
  13b49c:	ea0003ef 	b	13c460 <syscall>
  13b4a0:	0014b658 	.word	0x0014b658

0013b4a4 <syscall_nanosleep>:
  13b4a4:	e92d4070 	push	{r4, r5, r6, lr}
  13b4a8:	e1a04000 	mov	r4, r0
  13b4ac:	e1a05001 	mov	r5, r1
  13b4b0:	e59f0018 	ldr	r0, [pc, #24]	; 13b4d0 <syscall_nanosleep+0x2c>
  13b4b4:	e3a01012 	mov	r1, #18
  13b4b8:	ebfffee7 	bl	13b05c <syscall_debug>
  13b4bc:	e1a02005 	mov	r2, r5
  13b4c0:	e1a01004 	mov	r1, r4
  13b4c4:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b4c8:	e3a0000a 	mov	r0, #10
  13b4cc:	ea0003e3 	b	13c460 <syscall>
  13b4d0:	0014b4d4 	.word	0x0014b4d4

0013b4d4 <syscall_sched_getparam>:
  13b4d4:	e92d4070 	push	{r4, r5, r6, lr}
  13b4d8:	e1a04000 	mov	r4, r0
  13b4dc:	e1a05001 	mov	r5, r1
  13b4e0:	e59f0018 	ldr	r0, [pc, #24]	; 13b500 <syscall_sched_getparam+0x2c>
  13b4e4:	e3a01017 	mov	r1, #23
  13b4e8:	ebfffedb 	bl	13b05c <syscall_debug>
  13b4ec:	e1a02005 	mov	r2, r5
  13b4f0:	e1a01004 	mov	r1, r4
  13b4f4:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b4f8:	e3a00095 	mov	r0, #149	; 0x95
  13b4fc:	ea0003d7 	b	13c460 <syscall>
  13b500:	0014b410 	.word	0x0014b410

0013b504 <syscall_sched_setparam>:
  13b504:	e92d4070 	push	{r4, r5, r6, lr}
  13b508:	e1a04000 	mov	r4, r0
  13b50c:	e1a05001 	mov	r5, r1
  13b510:	e59f0018 	ldr	r0, [pc, #24]	; 13b530 <syscall_sched_setparam+0x2c>
  13b514:	e3a01017 	mov	r1, #23
  13b518:	ebfffecf 	bl	13b05c <syscall_debug>
  13b51c:	e1a02005 	mov	r2, r5
  13b520:	e1a01004 	mov	r1, r4
  13b524:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b528:	e3a00094 	mov	r0, #148	; 0x94
  13b52c:	ea0003cb 	b	13c460 <syscall>
  13b530:	0014b3f8 	.word	0x0014b3f8

0013b534 <syscall_lstat>:
  13b534:	e92d4070 	push	{r4, r5, r6, lr}
  13b538:	e1a04000 	mov	r4, r0
  13b53c:	e1a05001 	mov	r5, r1
  13b540:	e59f0018 	ldr	r0, [pc, #24]	; 13b560 <syscall_lstat+0x2c>
  13b544:	e3a0100e 	mov	r1, #14
  13b548:	ebfffec3 	bl	13b05c <syscall_debug>
  13b54c:	e1a02005 	mov	r2, r5
  13b550:	e1a01004 	mov	r1, r4
  13b554:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b558:	e3a00043 	mov	r0, #67	; 0x43
  13b55c:	ea0003bf 	b	13c460 <syscall>
  13b560:	0014b150 	.word	0x0014b150

0013b564 <syscall_stat>:
  13b564:	e92d4070 	push	{r4, r5, r6, lr}
  13b568:	e1a04000 	mov	r4, r0
  13b56c:	e1a05001 	mov	r5, r1
  13b570:	e59f0018 	ldr	r0, [pc, #24]	; 13b590 <syscall_stat+0x2c>
  13b574:	e3a0100d 	mov	r1, #13
  13b578:	ebfffeb7 	bl	13b05c <syscall_debug>
  13b57c:	e1a02005 	mov	r2, r5
  13b580:	e1a01004 	mov	r1, r4
  13b584:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b588:	e3a00043 	mov	r0, #67	; 0x43
  13b58c:	ea0003b3 	b	13c460 <syscall>
  13b590:	0014b140 	.word	0x0014b140

0013b594 <syscall_munmap>:
  13b594:	e92d4070 	push	{r4, r5, r6, lr}
  13b598:	e1a04000 	mov	r4, r0
  13b59c:	e1a05001 	mov	r5, r1
  13b5a0:	e59f0018 	ldr	r0, [pc, #24]	; 13b5c0 <syscall_munmap+0x2c>
  13b5a4:	e3a0100f 	mov	r1, #15
  13b5a8:	ebfffeab 	bl	13b05c <syscall_debug>
  13b5ac:	e1a02005 	mov	r2, r5
  13b5b0:	e1a01004 	mov	r1, r4
  13b5b4:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b5b8:	e3a00036 	mov	r0, #54	; 0x36
  13b5bc:	ea0003a7 	b	13c460 <syscall>
  13b5c0:	0014b068 	.word	0x0014b068

0013b5c4 <syscall_setrlimit>:
  13b5c4:	e92d4070 	push	{r4, r5, r6, lr}
  13b5c8:	e1a04000 	mov	r4, r0
  13b5cc:	e1a05001 	mov	r5, r1
  13b5d0:	e59f0018 	ldr	r0, [pc, #24]	; 13b5f0 <syscall_setrlimit+0x2c>
  13b5d4:	e3a01012 	mov	r1, #18
  13b5d8:	ebfffe9f 	bl	13b05c <syscall_debug>
  13b5dc:	e1a02005 	mov	r2, r5
  13b5e0:	e1a01004 	mov	r1, r4
  13b5e4:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b5e8:	e3a0008e 	mov	r0, #142	; 0x8e
  13b5ec:	ea00039b 	b	13c460 <syscall>
  13b5f0:	0014af94 	.word	0x0014af94

0013b5f4 <syscall_dup2>:
  13b5f4:	e92d4070 	push	{r4, r5, r6, lr}
  13b5f8:	e1a04000 	mov	r4, r0
  13b5fc:	e1a05001 	mov	r5, r1
  13b600:	e59f0018 	ldr	r0, [pc, #24]	; 13b620 <syscall_dup2+0x2c>
  13b604:	e3a0100d 	mov	r1, #13
  13b608:	ebfffe93 	bl	13b05c <syscall_debug>
  13b60c:	e1a02005 	mov	r2, r5
  13b610:	e1a01004 	mov	r1, r4
  13b614:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b618:	e3a00086 	mov	r0, #134	; 0x86
  13b61c:	ea00038f 	b	13c460 <syscall>
  13b620:	0014aedc 	.word	0x0014aedc

0013b624 <syscall_mkdir>:
  13b624:	e92d4070 	push	{r4, r5, r6, lr}
  13b628:	e1a04000 	mov	r4, r0
  13b62c:	e1a05001 	mov	r5, r1
  13b630:	e59f0018 	ldr	r0, [pc, #24]	; 13b650 <syscall_mkdir+0x2c>
  13b634:	e3a0100e 	mov	r1, #14
  13b638:	ebfffe87 	bl	13b05c <syscall_debug>
  13b63c:	e1a02005 	mov	r2, r5
  13b640:	e1a01004 	mov	r1, r4
  13b644:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b648:	e3a00077 	mov	r0, #119	; 0x77
  13b64c:	ea000383 	b	13c460 <syscall>
  13b650:	0014adc4 	.word	0x0014adc4

0013b654 <syscall_rename>:
  13b654:	e92d4070 	push	{r4, r5, r6, lr}
  13b658:	e1a04000 	mov	r4, r0
  13b65c:	e1a05001 	mov	r5, r1
  13b660:	e59f0018 	ldr	r0, [pc, #24]	; 13b680 <syscall_rename+0x2c>
  13b664:	e3a0100f 	mov	r1, #15
  13b668:	ebfffe7b 	bl	13b05c <syscall_debug>
  13b66c:	e1a02005 	mov	r2, r5
  13b670:	e1a01004 	mov	r1, r4
  13b674:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b678:	e3a00087 	mov	r0, #135	; 0x87
  13b67c:	ea000377 	b	13c460 <syscall>
  13b680:	0014adb4 	.word	0x0014adb4

0013b684 <syscall_kill>:
  13b684:	e92d4070 	push	{r4, r5, r6, lr}
  13b688:	e1a04000 	mov	r4, r0
  13b68c:	e1a05001 	mov	r5, r1
  13b690:	e59f0018 	ldr	r0, [pc, #24]	; 13b6b0 <syscall_kill+0x2c>
  13b694:	e3a0100d 	mov	r1, #13
  13b698:	ebfffe6f 	bl	13b05c <syscall_debug>
  13b69c:	e1a02005 	mov	r2, r5
  13b6a0:	e1a01004 	mov	r1, r4
  13b6a4:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b6a8:	e3a0000e 	mov	r0, #14
  13b6ac:	ea00036b 	b	13c460 <syscall>
  13b6b0:	0014ada4 	.word	0x0014ada4

0013b6b4 <syscall_access>:
  13b6b4:	e92d4070 	push	{r4, r5, r6, lr}
  13b6b8:	e1a04000 	mov	r4, r0
  13b6bc:	e1a05001 	mov	r5, r1
  13b6c0:	e59f0018 	ldr	r0, [pc, #24]	; 13b6e0 <syscall_access+0x2c>
  13b6c4:	e3a0100f 	mov	r1, #15
  13b6c8:	ebfffe63 	bl	13b05c <syscall_debug>
  13b6cc:	e1a02005 	mov	r2, r5
  13b6d0:	e1a01004 	mov	r1, r4
  13b6d4:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b6d8:	e3a0007d 	mov	r0, #125	; 0x7d
  13b6dc:	ea00035f 	b	13c460 <syscall>
  13b6e0:	0014ad74 	.word	0x0014ad74

0013b6e4 <syscall_getrandom>:
  13b6e4:	e92d4070 	push	{r4, r5, r6, lr}
  13b6e8:	e1a06002 	mov	r6, r2
  13b6ec:	e1a04000 	mov	r4, r0
  13b6f0:	e1a05001 	mov	r5, r1
  13b6f4:	e59f001c 	ldr	r0, [pc, #28]	; 13b718 <syscall_getrandom+0x34>
  13b6f8:	e3a01012 	mov	r1, #18
  13b6fc:	ebfffe56 	bl	13b05c <syscall_debug>
  13b700:	e1a03006 	mov	r3, r6
  13b704:	e1a02005 	mov	r2, r5
  13b708:	e1a01004 	mov	r1, r4
  13b70c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b710:	e3a00090 	mov	r0, #144	; 0x90
  13b714:	ea000351 	b	13c460 <syscall>
  13b718:	0014c594 	.word	0x0014c594

0013b71c <syscall_shmctl>:
  13b71c:	e92d4070 	push	{r4, r5, r6, lr}
  13b720:	e1a06002 	mov	r6, r2
  13b724:	e1a04000 	mov	r4, r0
  13b728:	e1a05001 	mov	r5, r1
  13b72c:	e59f001c 	ldr	r0, [pc, #28]	; 13b750 <syscall_shmctl+0x34>
  13b730:	e3a0100f 	mov	r1, #15
  13b734:	ebfffe48 	bl	13b05c <syscall_debug>
  13b738:	e1a03006 	mov	r3, r6
  13b73c:	e1a02005 	mov	r2, r5
  13b740:	e1a01004 	mov	r1, r4
  13b744:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b748:	e3a00f4d 	mov	r0, #308	; 0x134
  13b74c:	ea000343 	b	13c460 <syscall>
  13b750:	0014bf84 	.word	0x0014bf84

0013b754 <syscall_shmget>:
  13b754:	e92d4070 	push	{r4, r5, r6, lr}
  13b758:	e1a06002 	mov	r6, r2
  13b75c:	e1a04000 	mov	r4, r0
  13b760:	e1a05001 	mov	r5, r1
  13b764:	e59f001c 	ldr	r0, [pc, #28]	; 13b788 <syscall_shmget+0x34>
  13b768:	e3a0100f 	mov	r1, #15
  13b76c:	ebfffe3a 	bl	13b05c <syscall_debug>
  13b770:	e1a03006 	mov	r3, r6
  13b774:	e1a02005 	mov	r2, r5
  13b778:	e1a01004 	mov	r1, r4
  13b77c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b780:	e59f0004 	ldr	r0, [pc, #4]	; 13b78c <syscall_shmget+0x38>
  13b784:	ea000335 	b	13c460 <syscall>
  13b788:	0014bf74 	.word	0x0014bf74
  13b78c:	00000133 	.word	0x00000133

0013b790 <syscall_shmat>:
  13b790:	e92d4070 	push	{r4, r5, r6, lr}
  13b794:	e1a06002 	mov	r6, r2
  13b798:	e1a04000 	mov	r4, r0
  13b79c:	e1a05001 	mov	r5, r1
  13b7a0:	e59f001c 	ldr	r0, [pc, #28]	; 13b7c4 <syscall_shmat+0x34>
  13b7a4:	e3a0100e 	mov	r1, #14
  13b7a8:	ebfffe2b 	bl	13b05c <syscall_debug>
  13b7ac:	e1a03006 	mov	r3, r6
  13b7b0:	e1a02005 	mov	r2, r5
  13b7b4:	e1a01004 	mov	r1, r4
  13b7b8:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b7bc:	e59f0004 	ldr	r0, [pc, #4]	; 13b7c8 <syscall_shmat+0x38>
  13b7c0:	ea000326 	b	13c460 <syscall>
  13b7c4:	0014bf54 	.word	0x0014bf54
  13b7c8:	00000131 	.word	0x00000131

0013b7cc <syscall_getpeername>:
  13b7cc:	e92d4070 	push	{r4, r5, r6, lr}
  13b7d0:	e1a06002 	mov	r6, r2
  13b7d4:	e1a04000 	mov	r4, r0
  13b7d8:	e1a05001 	mov	r5, r1
  13b7dc:	e59f001c 	ldr	r0, [pc, #28]	; 13b800 <syscall_getpeername+0x34>
  13b7e0:	e3a01014 	mov	r1, #20
  13b7e4:	ebfffe1c 	bl	13b05c <syscall_debug>
  13b7e8:	e1a03006 	mov	r3, r6
  13b7ec:	e1a02005 	mov	r2, r5
  13b7f0:	e1a01004 	mov	r1, r4
  13b7f4:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b7f8:	e3a00048 	mov	r0, #72	; 0x48
  13b7fc:	ea000317 	b	13c460 <syscall>
  13b800:	0014be1c 	.word	0x0014be1c

0013b804 <syscall_getsockname>:
  13b804:	e92d4070 	push	{r4, r5, r6, lr}
  13b808:	e1a06002 	mov	r6, r2
  13b80c:	e1a04000 	mov	r4, r0
  13b810:	e1a05001 	mov	r5, r1
  13b814:	e59f001c 	ldr	r0, [pc, #28]	; 13b838 <syscall_getsockname+0x34>
  13b818:	e3a01014 	mov	r1, #20
  13b81c:	ebfffe0e 	bl	13b05c <syscall_debug>
  13b820:	e1a03006 	mov	r3, r6
  13b824:	e1a02005 	mov	r2, r5
  13b828:	e1a01004 	mov	r1, r4
  13b82c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b830:	e3a00049 	mov	r0, #73	; 0x49
  13b834:	ea000309 	b	13c460 <syscall>
  13b838:	0014be08 	.word	0x0014be08

0013b83c <syscall_accept>:
  13b83c:	e92d4070 	push	{r4, r5, r6, lr}
  13b840:	e1a06002 	mov	r6, r2
  13b844:	e1a04000 	mov	r4, r0
  13b848:	e1a05001 	mov	r5, r1
  13b84c:	e59f001c 	ldr	r0, [pc, #28]	; 13b870 <syscall_accept+0x34>
  13b850:	e3a0100f 	mov	r1, #15
  13b854:	ebfffe00 	bl	13b05c <syscall_debug>
  13b858:	e1a03006 	mov	r3, r6
  13b85c:	e1a02005 	mov	r2, r5
  13b860:	e1a01004 	mov	r1, r4
  13b864:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b868:	e3a00045 	mov	r0, #69	; 0x45
  13b86c:	ea0002fb 	b	13c460 <syscall>
  13b870:	0014bdf8 	.word	0x0014bdf8

0013b874 <syscall_connect>:
  13b874:	e92d4070 	push	{r4, r5, r6, lr}
  13b878:	e1a06002 	mov	r6, r2
  13b87c:	e1a04000 	mov	r4, r0
  13b880:	e1a05001 	mov	r5, r1
  13b884:	e59f001c 	ldr	r0, [pc, #28]	; 13b8a8 <syscall_connect+0x34>
  13b888:	e3a01010 	mov	r1, #16
  13b88c:	ebfffdf2 	bl	13b05c <syscall_debug>
  13b890:	e1a03006 	mov	r3, r6
  13b894:	e1a02005 	mov	r2, r5
  13b898:	e1a01004 	mov	r1, r4
  13b89c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b8a0:	e3a0004c 	mov	r0, #76	; 0x4c
  13b8a4:	ea0002ed 	b	13c460 <syscall>
  13b8a8:	0014bdd8 	.word	0x0014bdd8

0013b8ac <syscall_bind>:
  13b8ac:	e92d4070 	push	{r4, r5, r6, lr}
  13b8b0:	e1a06002 	mov	r6, r2
  13b8b4:	e1a04000 	mov	r4, r0
  13b8b8:	e1a05001 	mov	r5, r1
  13b8bc:	e59f001c 	ldr	r0, [pc, #28]	; 13b8e0 <syscall_bind+0x34>
  13b8c0:	e3a0100d 	mov	r1, #13
  13b8c4:	ebfffde4 	bl	13b05c <syscall_debug>
  13b8c8:	e1a03006 	mov	r3, r6
  13b8cc:	e1a02005 	mov	r2, r5
  13b8d0:	e1a01004 	mov	r1, r4
  13b8d4:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b8d8:	e3a00046 	mov	r0, #70	; 0x46
  13b8dc:	ea0002df 	b	13c460 <syscall>
  13b8e0:	0014bdc8 	.word	0x0014bdc8

0013b8e4 <syscall_socket>:
  13b8e4:	e92d4070 	push	{r4, r5, r6, lr}
  13b8e8:	e1a06002 	mov	r6, r2
  13b8ec:	e1a04000 	mov	r4, r0
  13b8f0:	e1a05001 	mov	r5, r1
  13b8f4:	e59f001c 	ldr	r0, [pc, #28]	; 13b918 <syscall_socket+0x34>
  13b8f8:	e3a0100f 	mov	r1, #15
  13b8fc:	ebfffdd6 	bl	13b05c <syscall_debug>
  13b900:	e1a03006 	mov	r3, r6
  13b904:	e1a02005 	mov	r2, r5
  13b908:	e1a01004 	mov	r1, r4
  13b90c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b910:	e3a00052 	mov	r0, #82	; 0x52
  13b914:	ea0002d1 	b	13c460 <syscall>
  13b918:	0014bdb8 	.word	0x0014bdb8

0013b91c <syscall_sched_setaffinity>:
  13b91c:	e92d4070 	push	{r4, r5, r6, lr}
  13b920:	e1a06002 	mov	r6, r2
  13b924:	e1a04000 	mov	r4, r0
  13b928:	e1a05001 	mov	r5, r1
  13b92c:	e59f001c 	ldr	r0, [pc, #28]	; 13b950 <syscall_sched_setaffinity+0x34>
  13b930:	e3a0101a 	mov	r1, #26
  13b934:	ebfffdc8 	bl	13b05c <syscall_debug>
  13b938:	e1a03006 	mov	r3, r6
  13b93c:	e1a02005 	mov	r2, r5
  13b940:	e1a01004 	mov	r1, r4
  13b944:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b948:	e3a0009a 	mov	r0, #154	; 0x9a
  13b94c:	ea0002c3 	b	13c460 <syscall>
  13b950:	0014ba5c 	.word	0x0014ba5c

0013b954 <syscall_fcntl64>:
  13b954:	e92d4070 	push	{r4, r5, r6, lr}
  13b958:	e1a06002 	mov	r6, r2
  13b95c:	e1a04000 	mov	r4, r0
  13b960:	e1a05001 	mov	r5, r1
  13b964:	e59f001c 	ldr	r0, [pc, #28]	; 13b988 <syscall_fcntl64+0x34>
  13b968:	e3a01010 	mov	r1, #16
  13b96c:	ebfffdba 	bl	13b05c <syscall_debug>
  13b970:	e1a03006 	mov	r3, r6
  13b974:	e1a02005 	mov	r2, r5
  13b978:	e1a01004 	mov	r1, r4
  13b97c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b980:	e3a00007 	mov	r0, #7
  13b984:	ea0002b5 	b	13c460 <syscall>
  13b988:	0014b8fc 	.word	0x0014b8fc

0013b98c <syscall_madvise>:
  13b98c:	e92d4070 	push	{r4, r5, r6, lr}
  13b990:	e1a06002 	mov	r6, r2
  13b994:	e1a04000 	mov	r4, r0
  13b998:	e1a05001 	mov	r5, r1
  13b99c:	e59f001c 	ldr	r0, [pc, #28]	; 13b9c0 <syscall_madvise+0x34>
  13b9a0:	e3a01010 	mov	r1, #16
  13b9a4:	ebfffdac 	bl	13b05c <syscall_debug>
  13b9a8:	e1a03006 	mov	r3, r6
  13b9ac:	e1a02005 	mov	r2, r5
  13b9b0:	e1a01004 	mov	r1, r4
  13b9b4:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b9b8:	e3a00093 	mov	r0, #147	; 0x93
  13b9bc:	ea0002a7 	b	13c460 <syscall>
  13b9c0:	0014b8ec 	.word	0x0014b8ec

0013b9c4 <syscall_getdents64>:
  13b9c4:	e92d4070 	push	{r4, r5, r6, lr}
  13b9c8:	e1a06002 	mov	r6, r2
  13b9cc:	e1a04000 	mov	r4, r0
  13b9d0:	e1a05001 	mov	r5, r1
  13b9d4:	e59f001c 	ldr	r0, [pc, #28]	; 13b9f8 <syscall_getdents64+0x34>
  13b9d8:	e3a01013 	mov	r1, #19
  13b9dc:	ebfffd9e 	bl	13b05c <syscall_debug>
  13b9e0:	e1a03006 	mov	r3, r6
  13b9e4:	e1a02005 	mov	r2, r5
  13b9e8:	e1a01004 	mov	r1, r4
  13b9ec:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b9f0:	e3a00079 	mov	r0, #121	; 0x79
  13b9f4:	ea000299 	b	13c460 <syscall>
  13b9f8:	0014b8b4 	.word	0x0014b8b4

0013b9fc <syscall_poll>:
  13b9fc:	e92d4070 	push	{r4, r5, r6, lr}
  13ba00:	e1a06002 	mov	r6, r2
  13ba04:	e1a04000 	mov	r4, r0
  13ba08:	e1a05001 	mov	r5, r1
  13ba0c:	e59f001c 	ldr	r0, [pc, #28]	; 13ba30 <syscall_poll+0x34>
  13ba10:	e3a0100d 	mov	r1, #13
  13ba14:	ebfffd90 	bl	13b05c <syscall_debug>
  13ba18:	e1a03006 	mov	r3, r6
  13ba1c:	e1a02005 	mov	r2, r5
  13ba20:	e1a01004 	mov	r1, r4
  13ba24:	e8bd4070 	pop	{r4, r5, r6, lr}
  13ba28:	e3a00009 	mov	r0, #9
  13ba2c:	ea00028b 	b	13c460 <syscall>
  13ba30:	0014b520 	.word	0x0014b520

0013ba34 <syscall_sched_getscheduler>:
  13ba34:	e92d4070 	push	{r4, r5, r6, lr}
  13ba38:	e1a06002 	mov	r6, r2
  13ba3c:	e1a04000 	mov	r4, r0
  13ba40:	e1a05001 	mov	r5, r1
  13ba44:	e59f001c 	ldr	r0, [pc, #28]	; 13ba68 <syscall_sched_getscheduler+0x34>
  13ba48:	e3a0101b 	mov	r1, #27
  13ba4c:	ebfffd82 	bl	13b05c <syscall_debug>
  13ba50:	e1a03006 	mov	r3, r6
  13ba54:	e1a02005 	mov	r2, r5
  13ba58:	e1a01004 	mov	r1, r4
  13ba5c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13ba60:	e3a00099 	mov	r0, #153	; 0x99
  13ba64:	ea00027d 	b	13c460 <syscall>
  13ba68:	0014b444 	.word	0x0014b444

0013ba6c <syscall_sched_setscheduler>:
  13ba6c:	e92d4070 	push	{r4, r5, r6, lr}
  13ba70:	e1a06002 	mov	r6, r2
  13ba74:	e1a04000 	mov	r4, r0
  13ba78:	e1a05001 	mov	r5, r1
  13ba7c:	e59f001c 	ldr	r0, [pc, #28]	; 13baa0 <syscall_sched_setscheduler+0x34>
  13ba80:	e3a0101b 	mov	r1, #27
  13ba84:	ebfffd74 	bl	13b05c <syscall_debug>
  13ba88:	e1a03006 	mov	r3, r6
  13ba8c:	e1a02005 	mov	r2, r5
  13ba90:	e1a01004 	mov	r1, r4
  13ba94:	e8bd4070 	pop	{r4, r5, r6, lr}
  13ba98:	e3a00098 	mov	r0, #152	; 0x98
  13ba9c:	ea00026f 	b	13c460 <syscall>
  13baa0:	0014b428 	.word	0x0014b428

0013baa4 <syscall_writev>:
  13baa4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13baa8:	e1a06002 	mov	r6, r2
  13baac:	e1a08000 	mov	r8, r0
  13bab0:	e1a04001 	mov	r4, r1
  13bab4:	e59f0088 	ldr	r0, [pc, #136]	; 13bb44 <syscall_writev+0xa0>
  13bab8:	e3a0100f 	mov	r1, #15
  13babc:	ebfffd66 	bl	13b05c <syscall_debug>
  13bac0:	e3560000 	cmp	r6, #0
  13bac4:	e3a07000 	mov	r7, #0
  13bac8:	da000013 	ble	13bb1c <syscall_writev+0x78>
  13bacc:	e1a05007 	mov	r5, r7
  13bad0:	ea000003 	b	13bae4 <syscall_writev+0x40>
  13bad4:	e2855001 	add	r5, r5, #1
  13bad8:	e1560005 	cmp	r6, r5
  13badc:	e2844008 	add	r4, r4, #8
  13bae0:	0a00000d 	beq	13bb1c <syscall_writev+0x78>
  13bae4:	e5943004 	ldr	r3, [r4, #4]
  13bae8:	e3530000 	cmp	r3, #0
  13baec:	0afffff8 	beq	13bad4 <syscall_writev+0x30>
  13baf0:	e5942000 	ldr	r2, [r4]
  13baf4:	e1a01008 	mov	r1, r8
  13baf8:	e3a00003 	mov	r0, #3
  13bafc:	eb000257 	bl	13c460 <syscall>
  13bb00:	e3500000 	cmp	r0, #0
  13bb04:	da000006 	ble	13bb24 <syscall_writev+0x80>
  13bb08:	e2855001 	add	r5, r5, #1
  13bb0c:	e1560005 	cmp	r6, r5
  13bb10:	e0877000 	add	r7, r7, r0
  13bb14:	e2844008 	add	r4, r4, #8
  13bb18:	1afffff1 	bne	13bae4 <syscall_writev+0x40>
  13bb1c:	e1a00007 	mov	r0, r7
  13bb20:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13bb24:	13a03000 	movne	r3, #0
  13bb28:	03a03001 	moveq	r3, #1
  13bb2c:	e3570000 	cmp	r7, #0
  13bb30:	13a03001 	movne	r3, #1
  13bb34:	e3530000 	cmp	r3, #0
  13bb38:	01a07000 	moveq	r7, r0
  13bb3c:	e1a00007 	mov	r0, r7
  13bb40:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13bb44:	0014b36c 	.word	0x0014b36c

0013bb48 <syscall_readv>:
  13bb48:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13bb4c:	e1a06002 	mov	r6, r2
  13bb50:	e1a08000 	mov	r8, r0
  13bb54:	e1a04001 	mov	r4, r1
  13bb58:	e59f0088 	ldr	r0, [pc, #136]	; 13bbe8 <syscall_readv+0xa0>
  13bb5c:	e3a0100e 	mov	r1, #14
  13bb60:	ebfffd3d 	bl	13b05c <syscall_debug>
  13bb64:	e3560000 	cmp	r6, #0
  13bb68:	e3a07000 	mov	r7, #0
  13bb6c:	da000013 	ble	13bbc0 <syscall_readv+0x78>
  13bb70:	e1a05007 	mov	r5, r7
  13bb74:	ea000003 	b	13bb88 <syscall_readv+0x40>
  13bb78:	e2855001 	add	r5, r5, #1
  13bb7c:	e1560005 	cmp	r6, r5
  13bb80:	e2844008 	add	r4, r4, #8
  13bb84:	0a00000d 	beq	13bbc0 <syscall_readv+0x78>
  13bb88:	e5943004 	ldr	r3, [r4, #4]
  13bb8c:	e3530000 	cmp	r3, #0
  13bb90:	0afffff8 	beq	13bb78 <syscall_readv+0x30>
  13bb94:	e5942000 	ldr	r2, [r4]
  13bb98:	e1a01008 	mov	r1, r8
  13bb9c:	e3a00002 	mov	r0, #2
  13bba0:	eb00022e 	bl	13c460 <syscall>
  13bba4:	e3500000 	cmp	r0, #0
  13bba8:	da000006 	ble	13bbc8 <syscall_readv+0x80>
  13bbac:	e2855001 	add	r5, r5, #1
  13bbb0:	e1560005 	cmp	r6, r5
  13bbb4:	e0877000 	add	r7, r7, r0
  13bbb8:	e2844008 	add	r4, r4, #8
  13bbbc:	1afffff1 	bne	13bb88 <syscall_readv+0x40>
  13bbc0:	e1a00007 	mov	r0, r7
  13bbc4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13bbc8:	13a03000 	movne	r3, #0
  13bbcc:	03a03001 	moveq	r3, #1
  13bbd0:	e3570000 	cmp	r7, #0
  13bbd4:	13a03001 	movne	r3, #1
  13bbd8:	e3530000 	cmp	r3, #0
  13bbdc:	01a07000 	moveq	r7, r0
  13bbe0:	e1a00007 	mov	r0, r7
  13bbe4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13bbe8:	0014b35c 	.word	0x0014b35c

0013bbec <syscall_getdents>:
  13bbec:	e92d4070 	push	{r4, r5, r6, lr}
  13bbf0:	e1a06002 	mov	r6, r2
  13bbf4:	e1a04000 	mov	r4, r0
  13bbf8:	e1a05001 	mov	r5, r1
  13bbfc:	e59f001c 	ldr	r0, [pc, #28]	; 13bc20 <syscall_getdents+0x34>
  13bc00:	e3a01011 	mov	r1, #17
  13bc04:	ebfffd14 	bl	13b05c <syscall_debug>
  13bc08:	e1a03006 	mov	r3, r6
  13bc0c:	e1a02005 	mov	r2, r5
  13bc10:	e1a01004 	mov	r1, r4
  13bc14:	e8bd4070 	pop	{r4, r5, r6, lr}
  13bc18:	e3a00079 	mov	r0, #121	; 0x79
  13bc1c:	ea00020f 	b	13c460 <syscall>
  13bc20:	0014b314 	.word	0x0014b314

0013bc24 <syscall_readlink>:
  13bc24:	e92d4070 	push	{r4, r5, r6, lr}
  13bc28:	e1a06002 	mov	r6, r2
  13bc2c:	e1a04000 	mov	r4, r0
  13bc30:	e1a05001 	mov	r5, r1
  13bc34:	e59f001c 	ldr	r0, [pc, #28]	; 13bc58 <syscall_readlink+0x34>
  13bc38:	e3a01011 	mov	r1, #17
  13bc3c:	ebfffd06 	bl	13b05c <syscall_debug>
  13bc40:	e1a03006 	mov	r3, r6
  13bc44:	e1a02005 	mov	r2, r5
  13bc48:	e1a01004 	mov	r1, r4
  13bc4c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13bc50:	e3a00091 	mov	r0, #145	; 0x91
  13bc54:	ea000201 	b	13c460 <syscall>
  13bc58:	0014b024 	.word	0x0014b024

0013bc5c <syscall_fcntl>:
  13bc5c:	e92d4070 	push	{r4, r5, r6, lr}
  13bc60:	e1a06002 	mov	r6, r2
  13bc64:	e1a04000 	mov	r4, r0
  13bc68:	e1a05001 	mov	r5, r1
  13bc6c:	e59f001c 	ldr	r0, [pc, #28]	; 13bc90 <syscall_fcntl+0x34>
  13bc70:	e3a0100e 	mov	r1, #14
  13bc74:	ebfffcf8 	bl	13b05c <syscall_debug>
  13bc78:	e1a03006 	mov	r3, r6
  13bc7c:	e1a02005 	mov	r2, r5
  13bc80:	e1a01004 	mov	r1, r4
  13bc84:	e8bd4070 	pop	{r4, r5, r6, lr}
  13bc88:	e3a00007 	mov	r0, #7
  13bc8c:	ea0001f3 	b	13c460 <syscall>
  13bc90:	0014ae8c 	.word	0x0014ae8c

0013bc94 <syscall_execve>:
  13bc94:	e92d4070 	push	{r4, r5, r6, lr}
  13bc98:	e1a06002 	mov	r6, r2
  13bc9c:	e1a04000 	mov	r4, r0
  13bca0:	e1a05001 	mov	r5, r1
  13bca4:	e59f001c 	ldr	r0, [pc, #28]	; 13bcc8 <syscall_execve+0x34>
  13bca8:	e3a0100f 	mov	r1, #15
  13bcac:	ebfffcea 	bl	13b05c <syscall_debug>
  13bcb0:	e1a03006 	mov	r3, r6
  13bcb4:	e1a02005 	mov	r2, r5
  13bcb8:	e1a01004 	mov	r1, r4
  13bcbc:	e8bd4070 	pop	{r4, r5, r6, lr}
  13bcc0:	e3a00089 	mov	r0, #137	; 0x89
  13bcc4:	ea0001e5 	b	13c460 <syscall>
  13bcc8:	0014acb4 	.word	0x0014acb4

0013bccc <syscall_open>:
  13bccc:	e92d4070 	push	{r4, r5, r6, lr}
  13bcd0:	e1a06002 	mov	r6, r2
  13bcd4:	e1a04000 	mov	r4, r0
  13bcd8:	e1a05001 	mov	r5, r1
  13bcdc:	e59f001c 	ldr	r0, [pc, #28]	; 13bd00 <syscall_open+0x34>
  13bce0:	e3a0100d 	mov	r1, #13
  13bce4:	ebfffcdc 	bl	13b05c <syscall_debug>
  13bce8:	e1a03006 	mov	r3, r6
  13bcec:	e1a02005 	mov	r2, r5
  13bcf0:	e1a01004 	mov	r1, r4
  13bcf4:	e8bd4070 	pop	{r4, r5, r6, lr}
  13bcf8:	e3a00005 	mov	r0, #5
  13bcfc:	ea0001d7 	b	13c460 <syscall>
  13bd00:	0014ac64 	.word	0x0014ac64

0013bd04 <syscall_write>:
  13bd04:	e92d4070 	push	{r4, r5, r6, lr}
  13bd08:	e1a06002 	mov	r6, r2
  13bd0c:	e1a04000 	mov	r4, r0
  13bd10:	e1a05001 	mov	r5, r1
  13bd14:	e59f001c 	ldr	r0, [pc, #28]	; 13bd38 <syscall_write+0x34>
  13bd18:	e3a0100e 	mov	r1, #14
  13bd1c:	ebfffcce 	bl	13b05c <syscall_debug>
  13bd20:	e1a03006 	mov	r3, r6
  13bd24:	e1a02005 	mov	r2, r5
  13bd28:	e1a01004 	mov	r1, r4
  13bd2c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13bd30:	e3a00003 	mov	r0, #3
  13bd34:	ea0001c9 	b	13c460 <syscall>
  13bd38:	0014ac54 	.word	0x0014ac54

0013bd3c <syscall_read>:
  13bd3c:	e92d4070 	push	{r4, r5, r6, lr}
  13bd40:	e1a06002 	mov	r6, r2
  13bd44:	e1a04000 	mov	r4, r0
  13bd48:	e1a05001 	mov	r5, r1
  13bd4c:	e59f001c 	ldr	r0, [pc, #28]	; 13bd70 <syscall_read+0x34>
  13bd50:	e3a0100d 	mov	r1, #13
  13bd54:	ebfffcc0 	bl	13b05c <syscall_debug>
  13bd58:	e1a03006 	mov	r3, r6
  13bd5c:	e1a02005 	mov	r2, r5
  13bd60:	e1a01004 	mov	r1, r4
  13bd64:	e8bd4070 	pop	{r4, r5, r6, lr}
  13bd68:	e3a00002 	mov	r0, #2
  13bd6c:	ea0001bb 	b	13c460 <syscall>
  13bd70:	0014ac44 	.word	0x0014ac44

0013bd74 <syscall_prlimit64>:
  13bd74:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13bd78:	e1a06002 	mov	r6, r2
  13bd7c:	e1a07003 	mov	r7, r3
  13bd80:	e1a04000 	mov	r4, r0
  13bd84:	e1a05001 	mov	r5, r1
  13bd88:	e24dd00c 	sub	sp, sp, #12
  13bd8c:	e3a01012 	mov	r1, #18
  13bd90:	e59f0020 	ldr	r0, [pc, #32]	; 13bdb8 <syscall_prlimit64+0x44>
  13bd94:	ebfffcb0 	bl	13b05c <syscall_debug>
  13bd98:	e58d7000 	str	r7, [sp]
  13bd9c:	e1a03006 	mov	r3, r6
  13bda0:	e1a02005 	mov	r2, r5
  13bda4:	e1a01004 	mov	r1, r4
  13bda8:	e3a0008c 	mov	r0, #140	; 0x8c
  13bdac:	eb0001ab 	bl	13c460 <syscall>
  13bdb0:	e28dd00c 	add	sp, sp, #12
  13bdb4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  13bdb8:	0014c448 	.word	0x0014c448

0013bdbc <syscall_recv>:
  13bdbc:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13bdc0:	e1a06002 	mov	r6, r2
  13bdc4:	e1a07003 	mov	r7, r3
  13bdc8:	e1a04000 	mov	r4, r0
  13bdcc:	e1a05001 	mov	r5, r1
  13bdd0:	e24dd00c 	sub	sp, sp, #12
  13bdd4:	e3a0100d 	mov	r1, #13
  13bdd8:	e59f0020 	ldr	r0, [pc, #32]	; 13be00 <syscall_recv+0x44>
  13bddc:	ebfffc9e 	bl	13b05c <syscall_debug>
  13bde0:	e58d7000 	str	r7, [sp]
  13bde4:	e1a03006 	mov	r3, r6
  13bde8:	e1a02005 	mov	r2, r5
  13bdec:	e1a01004 	mov	r1, r4
  13bdf0:	e3a0004e 	mov	r0, #78	; 0x4e
  13bdf4:	eb000199 	bl	13c460 <syscall>
  13bdf8:	e28dd00c 	add	sp, sp, #12
  13bdfc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  13be00:	0014be64 	.word	0x0014be64

0013be04 <syscall_send>:
  13be04:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13be08:	e1a06002 	mov	r6, r2
  13be0c:	e1a07003 	mov	r7, r3
  13be10:	e1a04000 	mov	r4, r0
  13be14:	e1a05001 	mov	r5, r1
  13be18:	e24dd00c 	sub	sp, sp, #12
  13be1c:	e3a0100d 	mov	r1, #13
  13be20:	e59f0020 	ldr	r0, [pc, #32]	; 13be48 <syscall_send+0x44>
  13be24:	ebfffc8c 	bl	13b05c <syscall_debug>
  13be28:	e58d7000 	str	r7, [sp]
  13be2c:	e1a03006 	mov	r3, r6
  13be30:	e1a02005 	mov	r2, r5
  13be34:	e1a01004 	mov	r1, r4
  13be38:	e3a00050 	mov	r0, #80	; 0x50
  13be3c:	eb000187 	bl	13c460 <syscall>
  13be40:	e28dd00c 	add	sp, sp, #12
  13be44:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  13be48:	0014be44 	.word	0x0014be44

0013be4c <syscall_rt_sigprocmask>:
  13be4c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13be50:	e1a06002 	mov	r6, r2
  13be54:	e1a07003 	mov	r7, r3
  13be58:	e1a04000 	mov	r4, r0
  13be5c:	e1a05001 	mov	r5, r1
  13be60:	e24dd00c 	sub	sp, sp, #12
  13be64:	e3a01017 	mov	r1, #23
  13be68:	e59f0020 	ldr	r0, [pc, #32]	; 13be90 <syscall_rt_sigprocmask+0x44>
  13be6c:	ebfffc7a 	bl	13b05c <syscall_debug>
  13be70:	e58d7000 	str	r7, [sp]
  13be74:	e1a03006 	mov	r3, r6
  13be78:	e1a02005 	mov	r2, r5
  13be7c:	e1a01004 	mov	r1, r4
  13be80:	e3a00068 	mov	r0, #104	; 0x68
  13be84:	eb000175 	bl	13c460 <syscall>
  13be88:	e28dd00c 	add	sp, sp, #12
  13be8c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  13be90:	0014b5ac 	.word	0x0014b5ac

0013be94 <syscall_rt_sigaction>:
  13be94:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13be98:	e1a06002 	mov	r6, r2
  13be9c:	e1a07003 	mov	r7, r3
  13bea0:	e1a04000 	mov	r4, r0
  13bea4:	e1a05001 	mov	r5, r1
  13bea8:	e24dd00c 	sub	sp, sp, #12
  13beac:	e3a01015 	mov	r1, #21
  13beb0:	e59f0020 	ldr	r0, [pc, #32]	; 13bed8 <syscall_rt_sigaction+0x44>
  13beb4:	ebfffc68 	bl	13b05c <syscall_debug>
  13beb8:	e58d7000 	str	r7, [sp]
  13bebc:	e1a03006 	mov	r3, r6
  13bec0:	e1a02005 	mov	r2, r5
  13bec4:	e1a01004 	mov	r1, r4
  13bec8:	e3a00067 	mov	r0, #103	; 0x67
  13becc:	eb000163 	bl	13c460 <syscall>
  13bed0:	e28dd00c 	add	sp, sp, #12
  13bed4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  13bed8:	0014b594 	.word	0x0014b594

0013bedc <syscall_sigprocmask>:
  13bedc:	e92d4070 	push	{r4, r5, r6, lr}
  13bee0:	e1a04000 	mov	r4, r0
  13bee4:	e24dd008 	sub	sp, sp, #8
  13bee8:	e1a05001 	mov	r5, r1
  13beec:	e59f002c 	ldr	r0, [pc, #44]	; 13bf20 <syscall_sigprocmask+0x44>
  13bef0:	e3a01014 	mov	r1, #20
  13bef4:	e1a06002 	mov	r6, r2
  13bef8:	ebfffc57 	bl	13b05c <syscall_debug>
  13befc:	e3a00080 	mov	r0, #128	; 0x80
  13bf00:	e1a03006 	mov	r3, r6
  13bf04:	e58d0000 	str	r0, [sp]
  13bf08:	e1a02005 	mov	r2, r5
  13bf0c:	e1a01004 	mov	r1, r4
  13bf10:	e3a00068 	mov	r0, #104	; 0x68
  13bf14:	eb000151 	bl	13c460 <syscall>
  13bf18:	e28dd008 	add	sp, sp, #8
  13bf1c:	e8bd8070 	pop	{r4, r5, r6, pc}
  13bf20:	0014b234 	.word	0x0014b234

0013bf24 <syscall_sigaction>:
  13bf24:	e92d4070 	push	{r4, r5, r6, lr}
  13bf28:	e1a04000 	mov	r4, r0
  13bf2c:	e24dd008 	sub	sp, sp, #8
  13bf30:	e1a05001 	mov	r5, r1
  13bf34:	e59f002c 	ldr	r0, [pc, #44]	; 13bf68 <syscall_sigaction+0x44>
  13bf38:	e3a01012 	mov	r1, #18
  13bf3c:	e1a06002 	mov	r6, r2
  13bf40:	ebfffc45 	bl	13b05c <syscall_debug>
  13bf44:	e3a00080 	mov	r0, #128	; 0x80
  13bf48:	e1a03006 	mov	r3, r6
  13bf4c:	e58d0000 	str	r0, [sp]
  13bf50:	e1a02005 	mov	r2, r5
  13bf54:	e1a01004 	mov	r1, r4
  13bf58:	e3a00067 	mov	r0, #103	; 0x67
  13bf5c:	eb00013f 	bl	13c460 <syscall>
  13bf60:	e28dd008 	add	sp, sp, #8
  13bf64:	e8bd8070 	pop	{r4, r5, r6, pc}
  13bf68:	0014af1c 	.word	0x0014af1c

0013bf6c <syscall_getsockopt>:
  13bf6c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13bf70:	e1a06002 	mov	r6, r2
  13bf74:	e1a08003 	mov	r8, r3
  13bf78:	e1a04000 	mov	r4, r0
  13bf7c:	e1a05001 	mov	r5, r1
  13bf80:	e24dd008 	sub	sp, sp, #8
  13bf84:	e59d7020 	ldr	r7, [sp, #32]
  13bf88:	e3a01013 	mov	r1, #19
  13bf8c:	e59f0024 	ldr	r0, [pc, #36]	; 13bfb8 <syscall_getsockopt+0x4c>
  13bf90:	ebfffc31 	bl	13b05c <syscall_debug>
  13bf94:	e58d8000 	str	r8, [sp]
  13bf98:	e58d7004 	str	r7, [sp, #4]
  13bf9c:	e1a03006 	mov	r3, r6
  13bfa0:	e1a02005 	mov	r2, r5
  13bfa4:	e1a01004 	mov	r1, r4
  13bfa8:	e3a0004a 	mov	r0, #74	; 0x4a
  13bfac:	eb00012b 	bl	13c460 <syscall>
  13bfb0:	e28dd008 	add	sp, sp, #8
  13bfb4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13bfb8:	0014beb0 	.word	0x0014beb0

0013bfbc <syscall_setsockopt>:
  13bfbc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13bfc0:	e1a06002 	mov	r6, r2
  13bfc4:	e1a08003 	mov	r8, r3
  13bfc8:	e1a04000 	mov	r4, r0
  13bfcc:	e1a05001 	mov	r5, r1
  13bfd0:	e24dd008 	sub	sp, sp, #8
  13bfd4:	e59d7020 	ldr	r7, [sp, #32]
  13bfd8:	e3a01013 	mov	r1, #19
  13bfdc:	e59f0024 	ldr	r0, [pc, #36]	; 13c008 <syscall_setsockopt+0x4c>
  13bfe0:	ebfffc1d 	bl	13b05c <syscall_debug>
  13bfe4:	e58d8000 	str	r8, [sp]
  13bfe8:	e58d7004 	str	r7, [sp, #4]
  13bfec:	e1a03006 	mov	r3, r6
  13bff0:	e1a02005 	mov	r2, r5
  13bff4:	e1a01004 	mov	r1, r4
  13bff8:	e3a0004b 	mov	r0, #75	; 0x4b
  13bffc:	eb000117 	bl	13c460 <syscall>
  13c000:	e28dd008 	add	sp, sp, #8
  13c004:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13c008:	0014be9c 	.word	0x0014be9c

0013c00c <syscall_mremap>:
  13c00c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13c010:	e1a06002 	mov	r6, r2
  13c014:	e1a08003 	mov	r8, r3
  13c018:	e1a04000 	mov	r4, r0
  13c01c:	e1a05001 	mov	r5, r1
  13c020:	e24dd008 	sub	sp, sp, #8
  13c024:	e59d7020 	ldr	r7, [sp, #32]
  13c028:	e3a0100f 	mov	r1, #15
  13c02c:	e59f0024 	ldr	r0, [pc, #36]	; 13c058 <syscall_mremap+0x4c>
  13c030:	ebfffc09 	bl	13b05c <syscall_debug>
  13c034:	e58d8000 	str	r8, [sp]
  13c038:	e58d7004 	str	r7, [sp, #4]
  13c03c:	e1a03006 	mov	r3, r6
  13c040:	e1a02005 	mov	r2, r5
  13c044:	e1a01004 	mov	r1, r4
  13c048:	e3a00092 	mov	r0, #146	; 0x92
  13c04c:	eb000103 	bl	13c460 <syscall>
  13c050:	e28dd008 	add	sp, sp, #8
  13c054:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13c058:	0014b4e8 	.word	0x0014b4e8

0013c05c <syscall__newselect>:
  13c05c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13c060:	e1a06002 	mov	r6, r2
  13c064:	e1a08003 	mov	r8, r3
  13c068:	e1a04000 	mov	r4, r0
  13c06c:	e1a05001 	mov	r5, r1
  13c070:	e24dd008 	sub	sp, sp, #8
  13c074:	e59d7020 	ldr	r7, [sp, #32]
  13c078:	e3a01013 	mov	r1, #19
  13c07c:	e59f0024 	ldr	r0, [pc, #36]	; 13c0a8 <syscall__newselect+0x4c>
  13c080:	ebfffbf5 	bl	13b05c <syscall_debug>
  13c084:	e58d8000 	str	r8, [sp]
  13c088:	e58d7004 	str	r7, [sp, #4]
  13c08c:	e1a03006 	mov	r3, r6
  13c090:	e1a02005 	mov	r2, r5
  13c094:	e1a01004 	mov	r1, r4
  13c098:	e3a0005e 	mov	r0, #94	; 0x5e
  13c09c:	eb0000ef 	bl	13c460 <syscall>
  13c0a0:	e28dd008 	add	sp, sp, #8
  13c0a4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13c0a8:	0014b328 	.word	0x0014b328

0013c0ac <syscall__llseek>:
  13c0ac:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13c0b0:	e1a06002 	mov	r6, r2
  13c0b4:	e1a05000 	mov	r5, r0
  13c0b8:	e1a08001 	mov	r8, r1
  13c0bc:	e24dd008 	sub	sp, sp, #8
  13c0c0:	e59d7020 	ldr	r7, [sp, #32]
  13c0c4:	e3a01010 	mov	r1, #16
  13c0c8:	e59f0034 	ldr	r0, [pc, #52]	; 13c104 <syscall__llseek+0x58>
  13c0cc:	e1a04003 	mov	r4, r3
  13c0d0:	ebfffbe1 	bl	13b05c <syscall_debug>
  13c0d4:	e1a01005 	mov	r1, r5
  13c0d8:	e58d8000 	str	r8, [sp]
  13c0dc:	e58d7004 	str	r7, [sp, #4]
  13c0e0:	e1a03006 	mov	r3, r6
  13c0e4:	e3a02000 	mov	r2, #0
  13c0e8:	e3a00004 	mov	r0, #4
  13c0ec:	eb0000db 	bl	13c460 <syscall>
  13c0f0:	e1a01fc0 	asr	r1, r0, #31
  13c0f4:	e8840003 	stm	r4, {r0, r1}
  13c0f8:	e1a00fc1 	asr	r0, r1, #31
  13c0fc:	e28dd008 	add	sp, sp, #8
  13c100:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13c104:	0014b304 	.word	0x0014b304

0013c108 <syscall_recvfrom>:
  13c108:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  13c10c:	e1a06002 	mov	r6, r2
  13c110:	e1a09003 	mov	r9, r3
  13c114:	e1a04000 	mov	r4, r0
  13c118:	e1a05001 	mov	r5, r1
  13c11c:	e24dd014 	sub	sp, sp, #20
  13c120:	e59d7030 	ldr	r7, [sp, #48]	; 0x30
  13c124:	e59d8034 	ldr	r8, [sp, #52]	; 0x34
  13c128:	e3a01011 	mov	r1, #17
  13c12c:	e59f0024 	ldr	r0, [pc, #36]	; 13c158 <syscall_recvfrom+0x50>
  13c130:	ebfffbc9 	bl	13b05c <syscall_debug>
  13c134:	e58d9000 	str	r9, [sp]
  13c138:	e98d0180 	stmib	sp, {r7, r8}
  13c13c:	e1a03006 	mov	r3, r6
  13c140:	e1a02005 	mov	r2, r5
  13c144:	e1a01004 	mov	r1, r4
  13c148:	e3a0004f 	mov	r0, #79	; 0x4f
  13c14c:	eb0000c3 	bl	13c460 <syscall>
  13c150:	e28dd014 	add	sp, sp, #20
  13c154:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  13c158:	0014be74 	.word	0x0014be74

0013c15c <syscall_sendto>:
  13c15c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  13c160:	e1a06002 	mov	r6, r2
  13c164:	e1a09003 	mov	r9, r3
  13c168:	e1a04000 	mov	r4, r0
  13c16c:	e1a05001 	mov	r5, r1
  13c170:	e24dd014 	sub	sp, sp, #20
  13c174:	e59d7030 	ldr	r7, [sp, #48]	; 0x30
  13c178:	e59d8034 	ldr	r8, [sp, #52]	; 0x34
  13c17c:	e3a0100f 	mov	r1, #15
  13c180:	e59f0024 	ldr	r0, [pc, #36]	; 13c1ac <syscall_sendto+0x50>
  13c184:	ebfffbb4 	bl	13b05c <syscall_debug>
  13c188:	e58d9000 	str	r9, [sp]
  13c18c:	e98d0180 	stmib	sp, {r7, r8}
  13c190:	e1a03006 	mov	r3, r6
  13c194:	e1a02005 	mov	r2, r5
  13c198:	e1a01004 	mov	r1, r4
  13c19c:	e3a00051 	mov	r0, #81	; 0x51
  13c1a0:	eb0000ae 	bl	13c460 <syscall>
  13c1a4:	e28dd014 	add	sp, sp, #20
  13c1a8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  13c1ac:	0014be54 	.word	0x0014be54

0013c1b0 <syscall_futex>:
  13c1b0:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  13c1b4:	e1a06002 	mov	r6, r2
  13c1b8:	e1a09003 	mov	r9, r3
  13c1bc:	e1a04000 	mov	r4, r0
  13c1c0:	e1a05001 	mov	r5, r1
  13c1c4:	e24dd014 	sub	sp, sp, #20
  13c1c8:	e59d7030 	ldr	r7, [sp, #48]	; 0x30
  13c1cc:	e59d8034 	ldr	r8, [sp, #52]	; 0x34
  13c1d0:	e3a0100e 	mov	r1, #14
  13c1d4:	e59f0024 	ldr	r0, [pc, #36]	; 13c200 <syscall_futex+0x50>
  13c1d8:	ebfffb9f 	bl	13b05c <syscall_debug>
  13c1dc:	e58d9000 	str	r9, [sp]
  13c1e0:	e98d0180 	stmib	sp, {r7, r8}
  13c1e4:	e1a03006 	mov	r3, r6
  13c1e8:	e1a02005 	mov	r2, r5
  13c1ec:	e1a01004 	mov	r1, r4
  13c1f0:	e3a00083 	mov	r0, #131	; 0x83
  13c1f4:	eb000099 	bl	13c460 <syscall>
  13c1f8:	e28dd014 	add	sp, sp, #20
  13c1fc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  13c200:	0014ba4c 	.word	0x0014ba4c

0013c204 <syscall_mmap2>:
  13c204:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  13c208:	e1a06002 	mov	r6, r2
  13c20c:	e1a09003 	mov	r9, r3
  13c210:	e1a04000 	mov	r4, r0
  13c214:	e1a05001 	mov	r5, r1
  13c218:	e59d7020 	ldr	r7, [sp, #32]
  13c21c:	e59d8028 	ldr	r8, [sp, #40]	; 0x28
  13c220:	e3a0100e 	mov	r1, #14
  13c224:	e59f0024 	ldr	r0, [pc, #36]	; 13c250 <syscall_mmap2+0x4c>
  13c228:	ebfffb8b 	bl	13b05c <syscall_debug>
  13c22c:	e58d9020 	str	r9, [sp, #32]
  13c230:	e58d8028 	str	r8, [sp, #40]	; 0x28
  13c234:	e58d7024 	str	r7, [sp, #36]	; 0x24
  13c238:	e1a03006 	mov	r3, r6
  13c23c:	e1a02005 	mov	r2, r5
  13c240:	e1a01004 	mov	r1, r4
  13c244:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
  13c248:	e3a00035 	mov	r0, #53	; 0x35
  13c24c:	ea000083 	b	13c460 <syscall>
  13c250:	0014b6d4 	.word	0x0014b6d4

0013c254 <syscall_gettid>:
  13c254:	e92d4010 	push	{r4, lr}
  13c258:	e59f0010 	ldr	r0, [pc, #16]	; 13c270 <syscall_gettid+0x1c>
  13c25c:	e3a0100f 	mov	r1, #15
  13c260:	ebfffb7d 	bl	13b05c <syscall_debug>
  13c264:	e8bd4010 	pop	{r4, lr}
  13c268:	e3a0008b 	mov	r0, #139	; 0x8b
  13c26c:	ea00007b 	b	13c460 <syscall>
  13c270:	0014b90c 	.word	0x0014b90c

0013c274 <syscall_vfork>:
  13c274:	e92d4010 	push	{r4, lr}
  13c278:	e59f0010 	ldr	r0, [pc, #16]	; 13c290 <syscall_vfork+0x1c>
  13c27c:	e3a0100e 	mov	r1, #14
  13c280:	ebfffb75 	bl	13b05c <syscall_debug>
  13c284:	e8bd4010 	pop	{r4, lr}
  13c288:	e3a0008a 	mov	r0, #138	; 0x8a
  13c28c:	ea000073 	b	13c460 <syscall>
  13c290:	0014b6b0 	.word	0x0014b6b0

0013c294 <syscall_setsid>:
  13c294:	e92d4010 	push	{r4, lr}
  13c298:	e59f0010 	ldr	r0, [pc, #16]	; 13c2b0 <syscall_setsid+0x1c>
  13c29c:	e3a0100f 	mov	r1, #15
  13c2a0:	ebfffb6d 	bl	13b05c <syscall_debug>
  13c2a4:	e8bd4010 	pop	{r4, lr}
  13c2a8:	e3a0008f 	mov	r0, #143	; 0x8f
  13c2ac:	ea00006b 	b	13c460 <syscall>
  13c2b0:	0014af0c 	.word	0x0014af0c

0013c2b4 <syscall_getpid>:
  13c2b4:	e92d4010 	push	{r4, lr}
  13c2b8:	e59f0010 	ldr	r0, [pc, #16]	; 13c2d0 <syscall_getpid+0x1c>
  13c2bc:	e3a0100f 	mov	r1, #15
  13c2c0:	ebfffb65 	bl	13b05c <syscall_debug>
  13c2c4:	e8bd4010 	pop	{r4, lr}
  13c2c8:	e3a0000f 	mov	r0, #15
  13c2cc:	ea000063 	b	13c460 <syscall>
  13c2d0:	0014ad14 	.word	0x0014ad14

0013c2d4 <syscall_fork>:
  13c2d4:	e92d4010 	push	{r4, lr}
  13c2d8:	e59f0010 	ldr	r0, [pc, #16]	; 13c2f0 <syscall_fork+0x1c>
  13c2dc:	e3a0100d 	mov	r1, #13
  13c2e0:	ebfffb5d 	bl	13b05c <syscall_debug>
  13c2e4:	e8bd4010 	pop	{r4, lr}
  13c2e8:	e3a00088 	mov	r0, #136	; 0x88
  13c2ec:	ea00005b 	b	13c460 <syscall>
  13c2f0:	0014ac34 	.word	0x0014ac34

0013c2f4 <syscall_ioctl>:
  13c2f4:	e92d4070 	push	{r4, r5, r6, lr}
  13c2f8:	e1a04000 	mov	r4, r0
  13c2fc:	e1a05001 	mov	r5, r1
  13c300:	e59f0030 	ldr	r0, [pc, #48]	; 13c338 <syscall_ioctl+0x44>
  13c304:	e3a0100e 	mov	r1, #14
  13c308:	e1a06002 	mov	r6, r2
  13c30c:	ebfffb52 	bl	13b05c <syscall_debug>
  13c310:	e3540001 	cmp	r4, #1
  13c314:	0a000005 	beq	13c330 <syscall_ioctl+0x3c>
  13c318:	e1a03006 	mov	r3, r6
  13c31c:	e1a02005 	mov	r2, r5
  13c320:	e1a01004 	mov	r1, r4
  13c324:	e8bd4070 	pop	{r4, r5, r6, lr}
  13c328:	e3a00007 	mov	r0, #7
  13c32c:	ea00004b 	b	13c460 <syscall>
  13c330:	e3a00000 	mov	r0, #0
  13c334:	e8bd8070 	pop	{r4, r5, r6, pc}
  13c338:	0014ae7c 	.word	0x0014ae7c

0013c33c <syscall_lseek>:
  13c33c:	e92d4070 	push	{r4, r5, r6, lr}
  13c340:	e1a04001 	mov	r4, r1
  13c344:	e24dd008 	sub	sp, sp, #8
  13c348:	e1a05000 	mov	r5, r0
  13c34c:	e3a0100e 	mov	r1, #14
  13c350:	e59f0058 	ldr	r0, [pc, #88]	; 13c3b0 <syscall_lseek+0x74>
  13c354:	e1a06002 	mov	r6, r2
  13c358:	ebfffb3f 	bl	13b05c <syscall_debug>
  13c35c:	e3540000 	cmp	r4, #0
  13c360:	ba000008 	blt	13c388 <syscall_lseek+0x4c>
  13c364:	e3a02000 	mov	r2, #0
  13c368:	e58d6004 	str	r6, [sp, #4]
  13c36c:	e1a03004 	mov	r3, r4
  13c370:	e1a01005 	mov	r1, r5
  13c374:	e58d2000 	str	r2, [sp]
  13c378:	e3a00004 	mov	r0, #4
  13c37c:	eb000037 	bl	13c460 <syscall>
  13c380:	e28dd008 	add	sp, sp, #8
  13c384:	e8bd8070 	pop	{r4, r5, r6, pc}
  13c388:	e3e02000 	mvn	r2, #0
  13c38c:	e58d6004 	str	r6, [sp, #4]
  13c390:	e58d2000 	str	r2, [sp]
  13c394:	e1a03004 	mov	r3, r4
  13c398:	e1a01005 	mov	r1, r5
  13c39c:	e3a02000 	mov	r2, #0
  13c3a0:	e3a00004 	mov	r0, #4
  13c3a4:	eb00002d 	bl	13c460 <syscall>
  13c3a8:	e28dd008 	add	sp, sp, #8
  13c3ac:	e8bd8070 	pop	{r4, r5, r6, pc}
  13c3b0:	0014ad04 	.word	0x0014ad04

0013c3b4 <get_rtt_syscall>:
  13c3b4:	e3500e19 	cmp	r0, #400	; 0x190
  13c3b8:	3a000005 	bcc	13c3d4 <get_rtt_syscall+0x20>
  13c3bc:	e59f201c 	ldr	r2, [pc, #28]	; 13c3e0 <get_rtt_syscall+0x2c>
  13c3c0:	e59f301c 	ldr	r3, [pc, #28]	; 13c3e4 <get_rtt_syscall+0x30>
  13c3c4:	e1500002 	cmp	r0, r2
  13c3c8:	01a00003 	moveq	r0, r3
  13c3cc:	13a00000 	movne	r0, #0
  13c3d0:	e12fff1e 	bx	lr
  13c3d4:	e59f300c 	ldr	r3, [pc, #12]	; 13c3e8 <get_rtt_syscall+0x34>
  13c3d8:	e7930100 	ldr	r0, [r3, r0, lsl #2]
  13c3dc:	e12fff1e 	bx	lr
  13c3e0:	000f0005 	.word	0x000f0005
  13c3e4:	00139294 	.word	0x00139294
  13c3e8:	0014c6ec 	.word	0x0014c6ec

0013c3ec <___syscall>:
  13c3ec:	e92d4070 	push	{r4, r5, r6, lr}
  13c3f0:	e1a0c001 	mov	ip, r1
  13c3f4:	e3500e19 	cmp	r0, #400	; 0x190
  13c3f8:	e1a01002 	mov	r1, r2
  13c3fc:	e1a02003 	mov	r2, r3
  13c400:	e28d3010 	add	r3, sp, #16
  13c404:	e8930078 	ldm	r3, {r3, r4, r5, r6}
  13c408:	2a00000a 	bcs	13c438 <___syscall+0x4c>
  13c40c:	e59fe03c 	ldr	lr, [pc, #60]	; 13c450 <___syscall+0x64>
  13c410:	e79ee100 	ldr	lr, [lr, r0, lsl #2]
  13c414:	e35e0000 	cmp	lr, #0
  13c418:	0a00000a 	beq	13c448 <___syscall+0x5c>
  13c41c:	e58d6018 	str	r6, [sp, #24]
  13c420:	e58d5014 	str	r5, [sp, #20]
  13c424:	e58d4010 	str	r4, [sp, #16]
  13c428:	e1a0000c 	mov	r0, ip
  13c42c:	e1a0c00e 	mov	ip, lr
  13c430:	e8bd4070 	pop	{r4, r5, r6, lr}
  13c434:	e12fff1c 	bx	ip
  13c438:	e59fe014 	ldr	lr, [pc, #20]	; 13c454 <___syscall+0x68>
  13c43c:	e150000e 	cmp	r0, lr
  13c440:	059fe010 	ldreq	lr, [pc, #16]	; 13c458 <___syscall+0x6c>
  13c444:	0afffff4 	beq	13c41c <___syscall+0x30>
  13c448:	e3a00000 	mov	r0, #0
  13c44c:	e8bd8070 	pop	{r4, r5, r6, pc}
  13c450:	0014c6ec 	.word	0x0014c6ec
  13c454:	000f0005 	.word	0x000f0005
  13c458:	00139294 	.word	0x00139294

0013c45c <__syscall>:
  13c45c:	eaffffe2 	b	13c3ec <___syscall>

0013c460 <syscall>:
  13c460:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13c464:	e1a07000 	mov	r7, r0
  13c468:	e1a00001 	mov	r0, r1
  13c46c:	e1a01002 	mov	r1, r2
  13c470:	e1a02003 	mov	r2, r3
  13c474:	e28d6014 	add	r6, sp, #20
  13c478:	e8960038 	ldm	r6, {r3, r4, r5}
  13c47c:	ef000000 	svc	0x00000000
  13c480:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
  13c484:	e12fff1e 	bx	lr

0013c488 <__syscall_ret>:
  13c488:	e3700a01 	cmn	r0, #4096	; 0x1000
  13c48c:	912fff1e 	bxls	lr
  13c490:	e92d4010 	push	{r4, lr}
  13c494:	e1a04000 	mov	r4, r0
  13c498:	ebfff28f 	bl	138edc <__errno_location>
  13c49c:	e2644000 	rsb	r4, r4, #0
  13c4a0:	e5804000 	str	r4, [r0]
  13c4a4:	e3e00000 	mvn	r0, #0
  13c4a8:	e8bd8010 	pop	{r4, pc}

0013c4ac <__lctrans_impl>:
  13c4ac:	e12fff1e 	bx	lr

0013c4b0 <__lctrans>:
  13c4b0:	eafffffd 	b	13c4ac <__lctrans_impl>

0013c4b4 <__lctrans_cur>:
  13c4b4:	e1a02000 	mov	r2, r0
  13c4b8:	e59f301c 	ldr	r3, [pc, #28]	; 13c4dc <__lctrans_cur+0x28>
  13c4bc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13c4c0:	e5930000 	ldr	r0, [r3]
  13c4c4:	e12fff30 	blx	r0
  13c4c8:	e5103018 	ldr	r3, [r0, #-24]	; 0xffffffe8
  13c4cc:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13c4d0:	e1a00002 	mov	r0, r2
  13c4d4:	e5931014 	ldr	r1, [r3, #20]
  13c4d8:	eafffff3 	b	13c4ac <__lctrans_impl>
  13c4dc:	0014d3dc 	.word	0x0014d3dc

0013c4e0 <__simple_malloc>:
  13c4e0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13c4e4:	e2505000 	subs	r5, r0, #0
  13c4e8:	e24dd008 	sub	sp, sp, #8
  13c4ec:	0a000016 	beq	13c54c <__simple_malloc+0x6c>
  13c4f0:	e3550001 	cmp	r5, #1
  13c4f4:	9a000037 	bls	13c5d8 <__simple_malloc+0xf8>
  13c4f8:	e3a03001 	mov	r3, #1
  13c4fc:	e1a03083 	lsl	r3, r3, #1
  13c500:	e1550003 	cmp	r5, r3
  13c504:	83a02001 	movhi	r2, #1
  13c508:	93a02000 	movls	r2, #0
  13c50c:	e353000f 	cmp	r3, #15
  13c510:	83a02000 	movhi	r2, #0
  13c514:	e3520000 	cmp	r2, #0
  13c518:	1afffff7 	bne	13c4fc <__simple_malloc+0x1c>
  13c51c:	e2434001 	sub	r4, r3, #1
  13c520:	e59f60c8 	ldr	r6, [pc, #200]	; 13c5f0 <__simple_malloc+0x110>
  13c524:	e59f00c8 	ldr	r0, [pc, #200]	; 13c5f4 <__simple_malloc+0x114>
  13c528:	eb001586 	bl	141b48 <__lock>
  13c52c:	e5962000 	ldr	r2, [r6]
  13c530:	e355013e 	cmp	r5, #-2147483633	; 0x8000000f
  13c534:	e2623000 	rsb	r3, r2, #0
  13c538:	e0044003 	and	r4, r4, r3
  13c53c:	8a000009 	bhi	13c568 <__simple_malloc+0x88>
  13c540:	e0853004 	add	r3, r5, r4
  13c544:	e1a05004 	mov	r5, r4
  13c548:	ea000004 	b	13c560 <__simple_malloc+0x80>
  13c54c:	e59f00a0 	ldr	r0, [pc, #160]	; 13c5f4 <__simple_malloc+0x114>
  13c550:	eb00157c 	bl	141b48 <__lock>
  13c554:	e3a03001 	mov	r3, #1
  13c558:	e59f6090 	ldr	r6, [pc, #144]	; 13c5f0 <__simple_malloc+0x110>
  13c55c:	e5962000 	ldr	r2, [r6]
  13c560:	e1a04005 	mov	r4, r5
  13c564:	e1a05003 	mov	r5, r3
  13c568:	e59f8088 	ldr	r8, [pc, #136]	; 13c5f8 <__simple_malloc+0x118>
  13c56c:	e5981000 	ldr	r1, [r8]
  13c570:	e0411002 	sub	r1, r1, r2
  13c574:	e1510005 	cmp	r1, r5
  13c578:	20827004 	addcs	r7, r2, r4
  13c57c:	2a00000e 	bcs	13c5bc <__simple_malloc+0xdc>
  13c580:	e28d0008 	add	r0, sp, #8
  13c584:	e5205004 	str	r5, [r0, #-4]!
  13c588:	eb001b2d 	bl	143244 <__expand_heap>
  13c58c:	e2503000 	subs	r3, r0, #0
  13c590:	0a000012 	beq	13c5e0 <__simple_malloc+0x100>
  13c594:	e5982000 	ldr	r2, [r8]
  13c598:	e59d1004 	ldr	r1, [sp, #4]
  13c59c:	e1520003 	cmp	r2, r3
  13c5a0:	05962000 	ldreq	r2, [r6]
  13c5a4:	11a07003 	movne	r7, r3
  13c5a8:	11a02003 	movne	r2, r3
  13c5ac:	e0833001 	add	r3, r3, r1
  13c5b0:	00827004 	addeq	r7, r2, r4
  13c5b4:	10455004 	subne	r5, r5, r4
  13c5b8:	e5883000 	str	r3, [r8]
  13c5bc:	e0825005 	add	r5, r2, r5
  13c5c0:	e59f002c 	ldr	r0, [pc, #44]	; 13c5f4 <__simple_malloc+0x114>
  13c5c4:	e5865000 	str	r5, [r6]
  13c5c8:	eb0015b6 	bl	141ca8 <__unlock>
  13c5cc:	e1a00007 	mov	r0, r7
  13c5d0:	e28dd008 	add	sp, sp, #8
  13c5d4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13c5d8:	e3a04000 	mov	r4, #0
  13c5dc:	eaffffcf 	b	13c520 <__simple_malloc+0x40>
  13c5e0:	e59f000c 	ldr	r0, [pc, #12]	; 13c5f4 <__simple_malloc+0x114>
  13c5e4:	e1a07003 	mov	r7, r3
  13c5e8:	eb0015ae 	bl	141ca8 <__unlock>
  13c5ec:	eafffff6 	b	13c5cc <__simple_malloc+0xec>
  13c5f0:	0014ec28 	.word	0x0014ec28
  13c5f4:	0014ec30 	.word	0x0014ec30
  13c5f8:	0014ec2c 	.word	0x0014ec2c

0013c5fc <__simple_calloc>:
  13c5fc:	e3510000 	cmp	r1, #0
  13c600:	e1a0c000 	mov	ip, r0
  13c604:	0a000002 	beq	13c614 <__simple_calloc+0x18>
  13c608:	e0832190 	umull	r2, r3, r0, r1
  13c60c:	e3530000 	cmp	r3, #0
  13c610:	1a000001 	bne	13c61c <__simple_calloc+0x20>
  13c614:	e0000c91 	mul	r0, r1, ip
  13c618:	eaffffb0 	b	13c4e0 <__simple_malloc>
  13c61c:	e92d4010 	push	{r4, lr}
  13c620:	ebfff22d 	bl	138edc <__errno_location>
  13c624:	e3a0300c 	mov	r3, #12
  13c628:	e5803000 	str	r3, [r0]
  13c62c:	e3a00000 	mov	r0, #0
  13c630:	e8bd8010 	pop	{r4, pc}

0013c634 <adjust_size>:
  13c634:	e5903000 	ldr	r3, [r0]
  13c638:	e59f2058 	ldr	r2, [pc, #88]	; 13c698 <adjust_size+0x64>
  13c63c:	e2431001 	sub	r1, r3, #1
  13c640:	e1510002 	cmp	r1, r2
  13c644:	9a000006 	bls	13c664 <adjust_size+0x30>
  13c648:	e3530000 	cmp	r3, #0
  13c64c:	03a01010 	moveq	r1, #16
  13c650:	01a02003 	moveq	r2, r3
  13c654:	05801000 	streq	r1, [r0]
  13c658:	1a000007 	bne	13c67c <adjust_size+0x48>
  13c65c:	e1a00002 	mov	r0, r2
  13c660:	e12fff1e 	bx	lr
  13c664:	e3a02000 	mov	r2, #0
  13c668:	e2833017 	add	r3, r3, #23
  13c66c:	e3c3300f 	bic	r3, r3, #15
  13c670:	e5803000 	str	r3, [r0]
  13c674:	e1a00002 	mov	r0, r2
  13c678:	e12fff1e 	bx	lr
  13c67c:	e92d4010 	push	{r4, lr}
  13c680:	ebfff215 	bl	138edc <__errno_location>
  13c684:	e3a0300c 	mov	r3, #12
  13c688:	e3e02000 	mvn	r2, #0
  13c68c:	e5803000 	str	r3, [r0]
  13c690:	e1a00002 	mov	r0, r2
  13c694:	e8bd8010 	pop	{r4, pc}
  13c698:	7fffefef 	.word	0x7fffefef

0013c69c <unbin>:
  13c69c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13c6a0:	e590200c 	ldr	r2, [r0, #12]
  13c6a4:	e1a07000 	mov	r7, r0
  13c6a8:	e5900008 	ldr	r0, [r0, #8]
  13c6ac:	e24dd00c 	sub	sp, sp, #12
  13c6b0:	e1520000 	cmp	r2, r0
  13c6b4:	0a00000b 	beq	13c6e8 <unbin+0x4c>
  13c6b8:	e5973004 	ldr	r3, [r7, #4]
  13c6bc:	e5820008 	str	r0, [r2, #8]
  13c6c0:	e3c30001 	bic	r0, r3, #1
  13c6c4:	e7971000 	ldr	r1, [r7, r0]
  13c6c8:	e597c008 	ldr	ip, [r7, #8]
  13c6cc:	e3833001 	orr	r3, r3, #1
  13c6d0:	e3811001 	orr	r1, r1, #1
  13c6d4:	e58c200c 	str	r2, [ip, #12]
  13c6d8:	e5873004 	str	r3, [r7, #4]
  13c6dc:	e7871000 	str	r1, [r7, r0]
  13c6e0:	e28dd00c 	add	sp, sp, #12
  13c6e4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13c6e8:	e3a00001 	mov	r0, #1
  13c6ec:	e241c020 	sub	ip, r1, #32
  13c6f0:	e1a0a110 	lsl	sl, r0, r1
  13c6f4:	e1a0bc10 	lsl	fp, r0, ip
  13c6f8:	e261c020 	rsb	ip, r1, #32
  13c6fc:	e1e0100a 	mvn	r1, sl
  13c700:	e18bbc30 	orr	fp, fp, r0, lsr ip
  13c704:	e3710001 	cmn	r1, #1
  13c708:	e1e0200b 	mvn	r2, fp
  13c70c:	0a000014 	beq	13c764 <unbin+0xc8>
  13c710:	e59f40a4 	ldr	r4, [pc, #164]	; 13c7bc <unbin+0x120>
  13c714:	e1a0b007 	mov	fp, r7
  13c718:	e1a09004 	mov	r9, r4
  13c71c:	e1a07001 	mov	r7, r1
  13c720:	e88d0006 	stm	sp, {r1, r2}
  13c724:	e59f6094 	ldr	r6, [pc, #148]	; 13c7c0 <unbin+0x124>
  13c728:	e5945000 	ldr	r5, [r4]
  13c72c:	e0078005 	and	r8, r7, r5
  13c730:	ea000002 	b	13c740 <unbin+0xa4>
  13c734:	e5943000 	ldr	r3, [r4]
  13c738:	e1550003 	cmp	r5, r3
  13c73c:	1afffff9 	bne	13c728 <unbin+0x8c>
  13c740:	e1a00005 	mov	r0, r5
  13c744:	e1a01008 	mov	r1, r8
  13c748:	e1a02009 	mov	r2, r9
  13c74c:	e5963000 	ldr	r3, [r6]
  13c750:	e12fff33 	blx	r3
  13c754:	e3500000 	cmp	r0, #0
  13c758:	1afffff5 	bne	13c734 <unbin+0x98>
  13c75c:	e1a0700b 	mov	r7, fp
  13c760:	e89d0006 	ldm	sp, {r1, r2}
  13c764:	e3720001 	cmn	r2, #1
  13c768:	0a000010 	beq	13c7b0 <unbin+0x114>
  13c76c:	e1a0a002 	mov	sl, r2
  13c770:	e59f4044 	ldr	r4, [pc, #68]	; 13c7bc <unbin+0x120>
  13c774:	e59f6044 	ldr	r6, [pc, #68]	; 13c7c0 <unbin+0x124>
  13c778:	e2849004 	add	r9, r4, #4
  13c77c:	e5945004 	ldr	r5, [r4, #4]
  13c780:	e00a8005 	and	r8, sl, r5
  13c784:	ea000002 	b	13c794 <unbin+0xf8>
  13c788:	e5943004 	ldr	r3, [r4, #4]
  13c78c:	e1550003 	cmp	r5, r3
  13c790:	1afffff9 	bne	13c77c <unbin+0xe0>
  13c794:	e1a00005 	mov	r0, r5
  13c798:	e1a01008 	mov	r1, r8
  13c79c:	e1a02009 	mov	r2, r9
  13c7a0:	e5963000 	ldr	r3, [r6]
  13c7a4:	e12fff33 	blx	r3
  13c7a8:	e3500000 	cmp	r0, #0
  13c7ac:	1afffff5 	bne	13c788 <unbin+0xec>
  13c7b0:	e597200c 	ldr	r2, [r7, #12]
  13c7b4:	e5970008 	ldr	r0, [r7, #8]
  13c7b8:	eaffffbe 	b	13c6b8 <unbin+0x1c>
  13c7bc:	0014ec40 	.word	0x0014ec40
  13c7c0:	0014d3d8 	.word	0x0014d3d8

0013c7c4 <alloc_fwd>:
  13c7c4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13c7c8:	e59f925c 	ldr	r9, [pc, #604]	; 13ca2c <alloc_fwd+0x268>
  13c7cc:	e24dd00c 	sub	sp, sp, #12
  13c7d0:	e58d0004 	str	r0, [sp, #4]
  13c7d4:	e59f6254 	ldr	r6, [pc, #596]	; 13ca30 <alloc_fwd+0x26c>
  13c7d8:	e59d3004 	ldr	r3, [sp, #4]
  13c7dc:	e5938004 	ldr	r8, [r3, #4]
  13c7e0:	e3180001 	tst	r8, #1
  13c7e4:	1a000055 	bne	13c940 <alloc_fwd+0x17c>
  13c7e8:	e1a07228 	lsr	r7, r8, #4
  13c7ec:	e2477001 	sub	r7, r7, #1
  13c7f0:	e3570020 	cmp	r7, #32
  13c7f4:	9a000005 	bls	13c810 <alloc_fwd+0x4c>
  13c7f8:	e59f3234 	ldr	r3, [pc, #564]	; 13ca34 <alloc_fwd+0x270>
  13c7fc:	e1570003 	cmp	r7, r3
  13c800:	8a000058 	bhi	13c968 <alloc_fwd+0x1a4>
  13c804:	e59f322c 	ldr	r3, [pc, #556]	; 13ca38 <alloc_fwd+0x274>
  13c808:	e08371a7 	add	r7, r3, r7, lsr #3
  13c80c:	e5577004 	ldrb	r7, [r7, #-4]
  13c810:	e1a0b007 	mov	fp, r7
  13c814:	e1a04207 	lsl	r4, r7, #4
  13c818:	e2844008 	add	r4, r4, #8
  13c81c:	e59f3218 	ldr	r3, [pc, #536]	; 13ca3c <alloc_fwd+0x278>
  13c820:	e0894004 	add	r4, r9, r4
  13c824:	e593300c 	ldr	r3, [r3, #12]
  13c828:	e3530000 	cmp	r3, #0
  13c82c:	1284a004 	addne	sl, r4, #4
  13c830:	1a000032 	bne	13c900 <alloc_fwd+0x13c>
  13c834:	e28b3001 	add	r3, fp, #1
  13c838:	e7992203 	ldr	r2, [r9, r3, lsl #4]
  13c83c:	e3520000 	cmp	r2, #0
  13c840:	1a000053 	bne	13c994 <alloc_fwd+0x1d0>
  13c844:	e1a02008 	mov	r2, r8
  13c848:	e0891207 	add	r1, r9, r7, lsl #4
  13c84c:	e2811008 	add	r1, r1, #8
  13c850:	e0890203 	add	r0, r9, r3, lsl #4
  13c854:	e7891203 	str	r1, [r9, r3, lsl #4]
  13c858:	e5801004 	str	r1, [r0, #4]
  13c85c:	e1580002 	cmp	r8, r2
  13c860:	0a00004b 	beq	13c994 <alloc_fwd+0x1d0>
  13c864:	e5943000 	ldr	r3, [r4]
  13c868:	e3530000 	cmp	r3, #0
  13c86c:	0a000030 	beq	13c934 <alloc_fwd+0x170>
  13c870:	e59f31c8 	ldr	r3, [pc, #456]	; 13ca40 <alloc_fwd+0x27c>
  13c874:	e593c000 	ldr	ip, [r3]
  13c878:	e12fff3c 	blx	ip
  13c87c:	e3a02000 	mov	r2, #0
  13c880:	e593c000 	ldr	ip, [r3]
  13c884:	e5842000 	str	r2, [r4]
  13c888:	e12fff3c 	blx	ip
  13c88c:	e5943004 	ldr	r3, [r4, #4]
  13c890:	e1530002 	cmp	r3, r2
  13c894:	0affffcf 	beq	13c7d8 <alloc_fwd+0x14>
  13c898:	e3a000f0 	mov	r0, #240	; 0xf0
  13c89c:	ebfffec4 	bl	13c3b4 <get_rtt_syscall>
  13c8a0:	e2503000 	subs	r3, r0, #0
  13c8a4:	0affffca 	beq	13c7d4 <alloc_fwd+0x10>
  13c8a8:	e3a02001 	mov	r2, #1
  13c8ac:	e3a01081 	mov	r1, #129	; 0x81
  13c8b0:	e1a00004 	mov	r0, r4
  13c8b4:	e12fff33 	blx	r3
  13c8b8:	e3700026 	cmn	r0, #38	; 0x26
  13c8bc:	1affffc4 	bne	13c7d4 <alloc_fwd+0x10>
  13c8c0:	e3a000f0 	mov	r0, #240	; 0xf0
  13c8c4:	ebfffeba 	bl	13c3b4 <get_rtt_syscall>
  13c8c8:	e2503000 	subs	r3, r0, #0
  13c8cc:	0affffc0 	beq	13c7d4 <alloc_fwd+0x10>
  13c8d0:	e3a02001 	mov	r2, #1
  13c8d4:	e1a00004 	mov	r0, r4
  13c8d8:	e1a01002 	mov	r1, r2
  13c8dc:	e12fff33 	blx	r3
  13c8e0:	eaffffbb 	b	13c7d4 <alloc_fwd+0x10>
  13c8e4:	e3550000 	cmp	r5, #0
  13c8e8:	0a000017 	beq	13c94c <alloc_fwd+0x188>
  13c8ec:	e1a03001 	mov	r3, r1
  13c8f0:	e1a02001 	mov	r2, r1
  13c8f4:	e1a00004 	mov	r0, r4
  13c8f8:	e1a0100a 	mov	r1, sl
  13c8fc:	eb001514 	bl	141d54 <__wait>
  13c900:	e5945000 	ldr	r5, [r4]
  13c904:	ea000002 	b	13c914 <alloc_fwd+0x150>
  13c908:	e5943000 	ldr	r3, [r4]
  13c90c:	e1550003 	cmp	r5, r3
  13c910:	1afffffa 	bne	13c900 <alloc_fwd+0x13c>
  13c914:	e1a00005 	mov	r0, r5
  13c918:	e3a01001 	mov	r1, #1
  13c91c:	e1a02004 	mov	r2, r4
  13c920:	e5963000 	ldr	r3, [r6]
  13c924:	e12fff33 	blx	r3
  13c928:	e3500000 	cmp	r0, #0
  13c92c:	1afffff5 	bne	13c908 <alloc_fwd+0x144>
  13c930:	eaffffeb 	b	13c8e4 <alloc_fwd+0x120>
  13c934:	e1a08002 	mov	r8, r2
  13c938:	e3180001 	tst	r8, #1
  13c93c:	0affffa9 	beq	13c7e8 <alloc_fwd+0x24>
  13c940:	e3a00000 	mov	r0, #0
  13c944:	e28dd00c 	add	sp, sp, #12
  13c948:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13c94c:	e28b3001 	add	r3, fp, #1
  13c950:	e7991203 	ldr	r1, [r9, r3, lsl #4]
  13c954:	e59d2004 	ldr	r2, [sp, #4]
  13c958:	e3510000 	cmp	r1, #0
  13c95c:	e5922004 	ldr	r2, [r2, #4]
  13c960:	1affffbd 	bne	13c85c <alloc_fwd+0x98>
  13c964:	eaffffb7 	b	13c848 <alloc_fwd+0x84>
  13c968:	e3570b07 	cmp	r7, #7168	; 0x1c00
  13c96c:	83a0703f 	movhi	r7, #63	; 0x3f
  13c970:	959f30c0 	ldrls	r3, [pc, #192]	; 13ca38 <alloc_fwd+0x274>
  13c974:	83a04ffe 	movhi	r4, #1016	; 0x3f8
  13c978:	908373a7 	addls	r7, r3, r7, lsr #7
  13c97c:	95577004 	ldrbls	r7, [r7, #-4]
  13c980:	92877010 	addls	r7, r7, #16
  13c984:	91a04207 	lslls	r4, r7, #4
  13c988:	92844008 	addls	r4, r4, #8
  13c98c:	e1a0b007 	mov	fp, r7
  13c990:	eaffffa1 	b	13c81c <alloc_fwd+0x58>
  13c994:	e1a0100b 	mov	r1, fp
  13c998:	e59d0004 	ldr	r0, [sp, #4]
  13c99c:	ebffff3e 	bl	13c69c <unbin>
  13c9a0:	e5943000 	ldr	r3, [r4]
  13c9a4:	e3530000 	cmp	r3, #0
  13c9a8:	0a000009 	beq	13c9d4 <alloc_fwd+0x210>
  13c9ac:	e59f308c 	ldr	r3, [pc, #140]	; 13ca40 <alloc_fwd+0x27c>
  13c9b0:	e593c000 	ldr	ip, [r3]
  13c9b4:	e12fff3c 	blx	ip
  13c9b8:	e3a02000 	mov	r2, #0
  13c9bc:	e593c000 	ldr	ip, [r3]
  13c9c0:	e5842000 	str	r2, [r4]
  13c9c4:	e12fff3c 	blx	ip
  13c9c8:	e5943004 	ldr	r3, [r4, #4]
  13c9cc:	e1530002 	cmp	r3, r2
  13c9d0:	1a000002 	bne	13c9e0 <alloc_fwd+0x21c>
  13c9d4:	e3a00001 	mov	r0, #1
  13c9d8:	e28dd00c 	add	sp, sp, #12
  13c9dc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13c9e0:	e3a000f0 	mov	r0, #240	; 0xf0
  13c9e4:	ebfffe72 	bl	13c3b4 <get_rtt_syscall>
  13c9e8:	e2503000 	subs	r3, r0, #0
  13c9ec:	0afffff8 	beq	13c9d4 <alloc_fwd+0x210>
  13c9f0:	e3a02001 	mov	r2, #1
  13c9f4:	e3a01081 	mov	r1, #129	; 0x81
  13c9f8:	e1a00004 	mov	r0, r4
  13c9fc:	e12fff33 	blx	r3
  13ca00:	e3700026 	cmn	r0, #38	; 0x26
  13ca04:	1afffff2 	bne	13c9d4 <alloc_fwd+0x210>
  13ca08:	e3a000f0 	mov	r0, #240	; 0xf0
  13ca0c:	ebfffe68 	bl	13c3b4 <get_rtt_syscall>
  13ca10:	e2503000 	subs	r3, r0, #0
  13ca14:	0affffee 	beq	13c9d4 <alloc_fwd+0x210>
  13ca18:	e3a02001 	mov	r2, #1
  13ca1c:	e1a00004 	mov	r0, r4
  13ca20:	e1a01002 	mov	r1, r2
  13ca24:	e12fff33 	blx	r3
  13ca28:	eaffffe9 	b	13c9d4 <alloc_fwd+0x210>
  13ca2c:	0014ec40 	.word	0x0014ec40
  13ca30:	0014d3d8 	.word	0x0014d3d8
  13ca34:	000001ff 	.word	0x000001ff
  13ca38:	0014cd4c 	.word	0x0014cd4c
  13ca3c:	0015d074 	.word	0x0015d074
  13ca40:	0014d3d4 	.word	0x0014d3d4

0013ca44 <alloc_rev>:
  13ca44:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13ca48:	e59f9264 	ldr	r9, [pc, #612]	; 13ccb4 <alloc_rev+0x270>
  13ca4c:	e24dd00c 	sub	sp, sp, #12
  13ca50:	e58d0004 	str	r0, [sp, #4]
  13ca54:	e59f625c 	ldr	r6, [pc, #604]	; 13ccb8 <alloc_rev+0x274>
  13ca58:	e59d3004 	ldr	r3, [sp, #4]
  13ca5c:	e5938000 	ldr	r8, [r3]
  13ca60:	e3180001 	tst	r8, #1
  13ca64:	1a000055 	bne	13cbc0 <alloc_rev+0x17c>
  13ca68:	e1a07228 	lsr	r7, r8, #4
  13ca6c:	e2477001 	sub	r7, r7, #1
  13ca70:	e3570020 	cmp	r7, #32
  13ca74:	9a000005 	bls	13ca90 <alloc_rev+0x4c>
  13ca78:	e59f323c 	ldr	r3, [pc, #572]	; 13ccbc <alloc_rev+0x278>
  13ca7c:	e1570003 	cmp	r7, r3
  13ca80:	8a000058 	bhi	13cbe8 <alloc_rev+0x1a4>
  13ca84:	e59f3234 	ldr	r3, [pc, #564]	; 13ccc0 <alloc_rev+0x27c>
  13ca88:	e08371a7 	add	r7, r3, r7, lsr #3
  13ca8c:	e5577004 	ldrb	r7, [r7, #-4]
  13ca90:	e1a0b007 	mov	fp, r7
  13ca94:	e1a04207 	lsl	r4, r7, #4
  13ca98:	e2844008 	add	r4, r4, #8
  13ca9c:	e59f3220 	ldr	r3, [pc, #544]	; 13ccc4 <alloc_rev+0x280>
  13caa0:	e0894004 	add	r4, r9, r4
  13caa4:	e593300c 	ldr	r3, [r3, #12]
  13caa8:	e3530000 	cmp	r3, #0
  13caac:	1284a004 	addne	sl, r4, #4
  13cab0:	1a000032 	bne	13cb80 <alloc_rev+0x13c>
  13cab4:	e28b3001 	add	r3, fp, #1
  13cab8:	e7992203 	ldr	r2, [r9, r3, lsl #4]
  13cabc:	e3520000 	cmp	r2, #0
  13cac0:	1a000053 	bne	13cc14 <alloc_rev+0x1d0>
  13cac4:	e1a02008 	mov	r2, r8
  13cac8:	e0891207 	add	r1, r9, r7, lsl #4
  13cacc:	e2811008 	add	r1, r1, #8
  13cad0:	e0890203 	add	r0, r9, r3, lsl #4
  13cad4:	e7891203 	str	r1, [r9, r3, lsl #4]
  13cad8:	e5801004 	str	r1, [r0, #4]
  13cadc:	e1580002 	cmp	r8, r2
  13cae0:	0a00004b 	beq	13cc14 <alloc_rev+0x1d0>
  13cae4:	e5943000 	ldr	r3, [r4]
  13cae8:	e3530000 	cmp	r3, #0
  13caec:	0a000030 	beq	13cbb4 <alloc_rev+0x170>
  13caf0:	e59f31d0 	ldr	r3, [pc, #464]	; 13ccc8 <alloc_rev+0x284>
  13caf4:	e593c000 	ldr	ip, [r3]
  13caf8:	e12fff3c 	blx	ip
  13cafc:	e3a02000 	mov	r2, #0
  13cb00:	e593c000 	ldr	ip, [r3]
  13cb04:	e5842000 	str	r2, [r4]
  13cb08:	e12fff3c 	blx	ip
  13cb0c:	e5943004 	ldr	r3, [r4, #4]
  13cb10:	e1530002 	cmp	r3, r2
  13cb14:	0affffcf 	beq	13ca58 <alloc_rev+0x14>
  13cb18:	e3a000f0 	mov	r0, #240	; 0xf0
  13cb1c:	ebfffe24 	bl	13c3b4 <get_rtt_syscall>
  13cb20:	e2503000 	subs	r3, r0, #0
  13cb24:	0affffca 	beq	13ca54 <alloc_rev+0x10>
  13cb28:	e3a02001 	mov	r2, #1
  13cb2c:	e3a01081 	mov	r1, #129	; 0x81
  13cb30:	e1a00004 	mov	r0, r4
  13cb34:	e12fff33 	blx	r3
  13cb38:	e3700026 	cmn	r0, #38	; 0x26
  13cb3c:	1affffc4 	bne	13ca54 <alloc_rev+0x10>
  13cb40:	e3a000f0 	mov	r0, #240	; 0xf0
  13cb44:	ebfffe1a 	bl	13c3b4 <get_rtt_syscall>
  13cb48:	e2503000 	subs	r3, r0, #0
  13cb4c:	0affffc0 	beq	13ca54 <alloc_rev+0x10>
  13cb50:	e3a02001 	mov	r2, #1
  13cb54:	e1a00004 	mov	r0, r4
  13cb58:	e1a01002 	mov	r1, r2
  13cb5c:	e12fff33 	blx	r3
  13cb60:	eaffffbb 	b	13ca54 <alloc_rev+0x10>
  13cb64:	e3550000 	cmp	r5, #0
  13cb68:	0a000017 	beq	13cbcc <alloc_rev+0x188>
  13cb6c:	e1a03001 	mov	r3, r1
  13cb70:	e1a02001 	mov	r2, r1
  13cb74:	e1a00004 	mov	r0, r4
  13cb78:	e1a0100a 	mov	r1, sl
  13cb7c:	eb001474 	bl	141d54 <__wait>
  13cb80:	e5945000 	ldr	r5, [r4]
  13cb84:	ea000002 	b	13cb94 <alloc_rev+0x150>
  13cb88:	e5943000 	ldr	r3, [r4]
  13cb8c:	e1550003 	cmp	r5, r3
  13cb90:	1afffffa 	bne	13cb80 <alloc_rev+0x13c>
  13cb94:	e1a00005 	mov	r0, r5
  13cb98:	e3a01001 	mov	r1, #1
  13cb9c:	e1a02004 	mov	r2, r4
  13cba0:	e5963000 	ldr	r3, [r6]
  13cba4:	e12fff33 	blx	r3
  13cba8:	e3500000 	cmp	r0, #0
  13cbac:	1afffff5 	bne	13cb88 <alloc_rev+0x144>
  13cbb0:	eaffffeb 	b	13cb64 <alloc_rev+0x120>
  13cbb4:	e1a08002 	mov	r8, r2
  13cbb8:	e3180001 	tst	r8, #1
  13cbbc:	0affffa9 	beq	13ca68 <alloc_rev+0x24>
  13cbc0:	e3a00000 	mov	r0, #0
  13cbc4:	e28dd00c 	add	sp, sp, #12
  13cbc8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13cbcc:	e28b3001 	add	r3, fp, #1
  13cbd0:	e7991203 	ldr	r1, [r9, r3, lsl #4]
  13cbd4:	e59d2004 	ldr	r2, [sp, #4]
  13cbd8:	e3510000 	cmp	r1, #0
  13cbdc:	e5922000 	ldr	r2, [r2]
  13cbe0:	1affffbd 	bne	13cadc <alloc_rev+0x98>
  13cbe4:	eaffffb7 	b	13cac8 <alloc_rev+0x84>
  13cbe8:	e3570b07 	cmp	r7, #7168	; 0x1c00
  13cbec:	83a0703f 	movhi	r7, #63	; 0x3f
  13cbf0:	959f30c8 	ldrls	r3, [pc, #200]	; 13ccc0 <alloc_rev+0x27c>
  13cbf4:	83a04ffe 	movhi	r4, #1016	; 0x3f8
  13cbf8:	908373a7 	addls	r7, r3, r7, lsr #7
  13cbfc:	95577004 	ldrbls	r7, [r7, #-4]
  13cc00:	92877010 	addls	r7, r7, #16
  13cc04:	91a04207 	lslls	r4, r7, #4
  13cc08:	92844008 	addls	r4, r4, #8
  13cc0c:	e1a0b007 	mov	fp, r7
  13cc10:	eaffffa1 	b	13ca9c <alloc_rev+0x58>
  13cc14:	e59d3004 	ldr	r3, [sp, #4]
  13cc18:	e3c80001 	bic	r0, r8, #1
  13cc1c:	e0430000 	sub	r0, r3, r0
  13cc20:	e1a0100b 	mov	r1, fp
  13cc24:	ebfffe9c 	bl	13c69c <unbin>
  13cc28:	e5943000 	ldr	r3, [r4]
  13cc2c:	e3530000 	cmp	r3, #0
  13cc30:	0a000009 	beq	13cc5c <alloc_rev+0x218>
  13cc34:	e59f308c 	ldr	r3, [pc, #140]	; 13ccc8 <alloc_rev+0x284>
  13cc38:	e593c000 	ldr	ip, [r3]
  13cc3c:	e12fff3c 	blx	ip
  13cc40:	e3a02000 	mov	r2, #0
  13cc44:	e593c000 	ldr	ip, [r3]
  13cc48:	e5842000 	str	r2, [r4]
  13cc4c:	e12fff3c 	blx	ip
  13cc50:	e5943004 	ldr	r3, [r4, #4]
  13cc54:	e1530002 	cmp	r3, r2
  13cc58:	1a000002 	bne	13cc68 <alloc_rev+0x224>
  13cc5c:	e3a00001 	mov	r0, #1
  13cc60:	e28dd00c 	add	sp, sp, #12
  13cc64:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13cc68:	e3a000f0 	mov	r0, #240	; 0xf0
  13cc6c:	ebfffdd0 	bl	13c3b4 <get_rtt_syscall>
  13cc70:	e2503000 	subs	r3, r0, #0
  13cc74:	0afffff8 	beq	13cc5c <alloc_rev+0x218>
  13cc78:	e3a02001 	mov	r2, #1
  13cc7c:	e3a01081 	mov	r1, #129	; 0x81
  13cc80:	e1a00004 	mov	r0, r4
  13cc84:	e12fff33 	blx	r3
  13cc88:	e3700026 	cmn	r0, #38	; 0x26
  13cc8c:	1afffff2 	bne	13cc5c <alloc_rev+0x218>
  13cc90:	e3a000f0 	mov	r0, #240	; 0xf0
  13cc94:	ebfffdc6 	bl	13c3b4 <get_rtt_syscall>
  13cc98:	e2503000 	subs	r3, r0, #0
  13cc9c:	0affffee 	beq	13cc5c <alloc_rev+0x218>
  13cca0:	e3a02001 	mov	r2, #1
  13cca4:	e1a00004 	mov	r0, r4
  13cca8:	e1a01002 	mov	r1, r2
  13ccac:	e12fff33 	blx	r3
  13ccb0:	eaffffe9 	b	13cc5c <alloc_rev+0x218>
  13ccb4:	0014ec40 	.word	0x0014ec40
  13ccb8:	0014d3d8 	.word	0x0014d3d8
  13ccbc:	000001ff 	.word	0x000001ff
  13ccc0:	0014cd4c 	.word	0x0014cd4c
  13ccc4:	0015d074 	.word	0x0015d074
  13ccc8:	0014d3d4 	.word	0x0014d3d4

0013cccc <__bin_chunk>:
  13cccc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13ccd0:	e5903004 	ldr	r3, [r0, #4]
  13ccd4:	e24dd01c 	sub	sp, sp, #28
  13ccd8:	e3c31001 	bic	r1, r3, #1
  13ccdc:	e7902001 	ldr	r2, [r0, r1]
  13cce0:	e1a06000 	mov	r6, r0
  13cce4:	e1530002 	cmp	r3, r2
  13cce8:	e58d1010 	str	r1, [sp, #16]
  13ccec:	e080b001 	add	fp, r0, r1
  13ccf0:	0a000000 	beq	13ccf8 <__bin_chunk+0x2c>
  13ccf4:	e7f000f0 	.word	0xe7f000f0
  13ccf8:	e59d3010 	ldr	r3, [sp, #16]
  13ccfc:	e59f55e8 	ldr	r5, [pc, #1512]	; 13d2ec <__bin_chunk+0x620>
  13cd00:	e58d3000 	str	r3, [sp]
  13cd04:	e3a03000 	mov	r3, #0
  13cd08:	e58d3014 	str	r3, [sp, #20]
  13cd0c:	e2853b01 	add	r3, r5, #1024	; 0x400
  13cd10:	e283300c 	add	r3, r3, #12
  13cd14:	e59f95d4 	ldr	r9, [pc, #1492]	; 13d2f0 <__bin_chunk+0x624>
  13cd18:	e58d300c 	str	r3, [sp, #12]
  13cd1c:	e5963000 	ldr	r3, [r6]
  13cd20:	e59b2004 	ldr	r2, [fp, #4]
  13cd24:	e0033002 	and	r3, r3, r2
  13cd28:	e3130001 	tst	r3, #1
  13cd2c:	0a000038 	beq	13ce14 <__bin_chunk+0x148>
  13cd30:	e59d1000 	ldr	r1, [sp]
  13cd34:	e1a03221 	lsr	r3, r1, #4
  13cd38:	e2432001 	sub	r2, r3, #1
  13cd3c:	e3520020 	cmp	r2, #32
  13cd40:	e3813001 	orr	r3, r1, #1
  13cd44:	e5863004 	str	r3, [r6, #4]
  13cd48:	e58d2008 	str	r2, [sp, #8]
  13cd4c:	e58b3000 	str	r3, [fp]
  13cd50:	8a00006c 	bhi	13cf08 <__bin_chunk+0x23c>
  13cd54:	e1a04202 	lsl	r4, r2, #4
  13cd58:	e2844008 	add	r4, r4, #8
  13cd5c:	e58d2004 	str	r2, [sp, #4]
  13cd60:	e59f358c 	ldr	r3, [pc, #1420]	; 13d2f4 <__bin_chunk+0x628>
  13cd64:	e0854004 	add	r4, r5, r4
  13cd68:	e593300c 	ldr	r3, [r3, #12]
  13cd6c:	e3530000 	cmp	r3, #0
  13cd70:	12848004 	addne	r8, r4, #4
  13cd74:	1a000056 	bne	13ced4 <__bin_chunk+0x208>
  13cd78:	e59d3004 	ldr	r3, [sp, #4]
  13cd7c:	e2837001 	add	r7, r3, #1
  13cd80:	e7953207 	ldr	r3, [r5, r7, lsl #4]
  13cd84:	e3530000 	cmp	r3, #0
  13cd88:	0a000069 	beq	13cf34 <__bin_chunk+0x268>
  13cd8c:	e59f3560 	ldr	r3, [pc, #1376]	; 13d2f4 <__bin_chunk+0x628>
  13cd90:	e593300c 	ldr	r3, [r3, #12]
  13cd94:	e3530000 	cmp	r3, #0
  13cd98:	1a00006f 	bne	13cf5c <__bin_chunk+0x290>
  13cd9c:	e5963000 	ldr	r3, [r6]
  13cda0:	e59b2004 	ldr	r2, [fp, #4]
  13cda4:	e0033002 	and	r3, r3, r2
  13cda8:	e2133001 	ands	r3, r3, #1
  13cdac:	1a0000b5 	bne	13d088 <__bin_chunk+0x3bc>
  13cdb0:	e5952408 	ldr	r2, [r5, #1032]	; 0x408
  13cdb4:	e3520000 	cmp	r2, #0
  13cdb8:	0a000008 	beq	13cde0 <__bin_chunk+0x114>
  13cdbc:	e59f2534 	ldr	r2, [pc, #1332]	; 13d2f8 <__bin_chunk+0x62c>
  13cdc0:	e592c000 	ldr	ip, [r2]
  13cdc4:	e12fff3c 	blx	ip
  13cdc8:	e5853408 	str	r3, [r5, #1032]	; 0x408
  13cdcc:	e592c000 	ldr	ip, [r2]
  13cdd0:	e12fff3c 	blx	ip
  13cdd4:	e595340c 	ldr	r3, [r5, #1036]	; 0x40c
  13cdd8:	e3530000 	cmp	r3, #0
  13cddc:	1a000095 	bne	13d038 <__bin_chunk+0x36c>
  13cde0:	e5943000 	ldr	r3, [r4]
  13cde4:	e3530000 	cmp	r3, #0
  13cde8:	0a000009 	beq	13ce14 <__bin_chunk+0x148>
  13cdec:	e59f2504 	ldr	r2, [pc, #1284]	; 13d2f8 <__bin_chunk+0x62c>
  13cdf0:	e592c000 	ldr	ip, [r2]
  13cdf4:	e12fff3c 	blx	ip
  13cdf8:	e3a03000 	mov	r3, #0
  13cdfc:	e592c000 	ldr	ip, [r2]
  13ce00:	e5843000 	str	r3, [r4]
  13ce04:	e12fff3c 	blx	ip
  13ce08:	e5943004 	ldr	r3, [r4, #4]
  13ce0c:	e3530000 	cmp	r3, #0
  13ce10:	1a000075 	bne	13cfec <__bin_chunk+0x320>
  13ce14:	e1a00006 	mov	r0, r6
  13ce18:	ebffff09 	bl	13ca44 <alloc_rev>
  13ce1c:	e3500000 	cmp	r0, #0
  13ce20:	0a000010 	beq	13ce68 <__bin_chunk+0x19c>
  13ce24:	e5963000 	ldr	r3, [r6]
  13ce28:	e59d2010 	ldr	r2, [sp, #16]
  13ce2c:	e3c33001 	bic	r3, r3, #1
  13ce30:	e0466003 	sub	r6, r6, r3
  13ce34:	e5963004 	ldr	r3, [r6, #4]
  13ce38:	e59d1000 	ldr	r1, [sp]
  13ce3c:	e3c33001 	bic	r3, r3, #1
  13ce40:	e0822003 	add	r2, r2, r3
  13ce44:	e0811003 	add	r1, r1, r3
  13ce48:	e352090a 	cmp	r2, #163840	; 0x28000
  13ce4c:	e58d1000 	str	r1, [sp]
  13ce50:	9a000004 	bls	13ce68 <__bin_chunk+0x19c>
  13ce54:	e0222003 	eor	r2, r2, r3
  13ce58:	e1520003 	cmp	r2, r3
  13ce5c:	e59d1014 	ldr	r1, [sp, #20]
  13ce60:	83a01001 	movhi	r1, #1
  13ce64:	e58d1014 	str	r1, [sp, #20]
  13ce68:	e1a0000b 	mov	r0, fp
  13ce6c:	ebfffe54 	bl	13c7c4 <alloc_fwd>
  13ce70:	e3500000 	cmp	r0, #0
  13ce74:	0affffa8 	beq	13cd1c <__bin_chunk+0x50>
  13ce78:	e59b3004 	ldr	r3, [fp, #4]
  13ce7c:	e59d2010 	ldr	r2, [sp, #16]
  13ce80:	e3c33001 	bic	r3, r3, #1
  13ce84:	e59d1000 	ldr	r1, [sp]
  13ce88:	e0822003 	add	r2, r2, r3
  13ce8c:	e0811003 	add	r1, r1, r3
  13ce90:	e352090a 	cmp	r2, #163840	; 0x28000
  13ce94:	e58d1000 	str	r1, [sp]
  13ce98:	9a000004 	bls	13ceb0 <__bin_chunk+0x1e4>
  13ce9c:	e0222003 	eor	r2, r2, r3
  13cea0:	e1520003 	cmp	r2, r3
  13cea4:	e59d1014 	ldr	r1, [sp, #20]
  13cea8:	83a01001 	movhi	r1, #1
  13ceac:	e58d1014 	str	r1, [sp, #20]
  13ceb0:	e08bb003 	add	fp, fp, r3
  13ceb4:	eaffff98 	b	13cd1c <__bin_chunk+0x50>
  13ceb8:	e3570000 	cmp	r7, #0
  13cebc:	0affffad 	beq	13cd78 <__bin_chunk+0xac>
  13cec0:	e1a03001 	mov	r3, r1
  13cec4:	e1a02001 	mov	r2, r1
  13cec8:	e1a00004 	mov	r0, r4
  13cecc:	e1a01008 	mov	r1, r8
  13ced0:	eb00139f 	bl	141d54 <__wait>
  13ced4:	e5947000 	ldr	r7, [r4]
  13ced8:	ea000002 	b	13cee8 <__bin_chunk+0x21c>
  13cedc:	e5943000 	ldr	r3, [r4]
  13cee0:	e1570003 	cmp	r7, r3
  13cee4:	1afffffa 	bne	13ced4 <__bin_chunk+0x208>
  13cee8:	e1a00007 	mov	r0, r7
  13ceec:	e3a01001 	mov	r1, #1
  13cef0:	e1a02004 	mov	r2, r4
  13cef4:	e5993000 	ldr	r3, [r9]
  13cef8:	e12fff33 	blx	r3
  13cefc:	e3500000 	cmp	r0, #0
  13cf00:	1afffff5 	bne	13cedc <__bin_chunk+0x210>
  13cf04:	eaffffeb 	b	13ceb8 <__bin_chunk+0x1ec>
  13cf08:	e59d3008 	ldr	r3, [sp, #8]
  13cf0c:	e3530c02 	cmp	r3, #512	; 0x200
  13cf10:	2a000027 	bcs	13cfb4 <__bin_chunk+0x2e8>
  13cf14:	e59f23e0 	ldr	r2, [pc, #992]	; 13d2fc <__bin_chunk+0x630>
  13cf18:	e08231a3 	add	r3, r2, r3, lsr #3
  13cf1c:	e5533004 	ldrb	r3, [r3, #-4]
  13cf20:	e1a04203 	lsl	r4, r3, #4
  13cf24:	e58d3008 	str	r3, [sp, #8]
  13cf28:	e2844008 	add	r4, r4, #8
  13cf2c:	e58d3004 	str	r3, [sp, #4]
  13cf30:	eaffff8a 	b	13cd60 <__bin_chunk+0x94>
  13cf34:	e59d3008 	ldr	r3, [sp, #8]
  13cf38:	e0852207 	add	r2, r5, r7, lsl #4
  13cf3c:	e0853203 	add	r3, r5, r3, lsl #4
  13cf40:	e2833008 	add	r3, r3, #8
  13cf44:	e7853207 	str	r3, [r5, r7, lsl #4]
  13cf48:	e5823004 	str	r3, [r2, #4]
  13cf4c:	e59f33a0 	ldr	r3, [pc, #928]	; 13d2f4 <__bin_chunk+0x628>
  13cf50:	e593300c 	ldr	r3, [r3, #12]
  13cf54:	e3530000 	cmp	r3, #0
  13cf58:	0affff8f 	beq	13cd9c <__bin_chunk+0xd0>
  13cf5c:	e59f339c 	ldr	r3, [pc, #924]	; 13d300 <__bin_chunk+0x634>
  13cf60:	e283a008 	add	sl, r3, #8
  13cf64:	e5958408 	ldr	r8, [r5, #1032]	; 0x408
  13cf68:	ea000002 	b	13cf78 <__bin_chunk+0x2ac>
  13cf6c:	e5953408 	ldr	r3, [r5, #1032]	; 0x408
  13cf70:	e1580003 	cmp	r8, r3
  13cf74:	1afffffa 	bne	13cf64 <__bin_chunk+0x298>
  13cf78:	e1a00008 	mov	r0, r8
  13cf7c:	e3a01001 	mov	r1, #1
  13cf80:	e1a0200a 	mov	r2, sl
  13cf84:	e5993000 	ldr	r3, [r9]
  13cf88:	e12fff33 	blx	r3
  13cf8c:	e3500000 	cmp	r0, #0
  13cf90:	1afffff5 	bne	13cf6c <__bin_chunk+0x2a0>
  13cf94:	e3580000 	cmp	r8, #0
  13cf98:	0affff7f 	beq	13cd9c <__bin_chunk+0xd0>
  13cf9c:	e1a03001 	mov	r3, r1
  13cfa0:	e1a02001 	mov	r2, r1
  13cfa4:	e1a0000a 	mov	r0, sl
  13cfa8:	e59d100c 	ldr	r1, [sp, #12]
  13cfac:	eb001368 	bl	141d54 <__wait>
  13cfb0:	eaffffeb 	b	13cf64 <__bin_chunk+0x298>
  13cfb4:	e59d3008 	ldr	r3, [sp, #8]
  13cfb8:	e3530b07 	cmp	r3, #7168	; 0x1c00
  13cfbc:	83a0303f 	movhi	r3, #63	; 0x3f
  13cfc0:	959f2334 	ldrls	r2, [pc, #820]	; 13d2fc <__bin_chunk+0x630>
  13cfc4:	858d3008 	strhi	r3, [sp, #8]
  13cfc8:	908233a3 	addls	r3, r2, r3, lsr #7
  13cfcc:	95533004 	ldrbls	r3, [r3, #-4]
  13cfd0:	83a04ffe 	movhi	r4, #1016	; 0x3f8
  13cfd4:	92833010 	addls	r3, r3, #16
  13cfd8:	91a04203 	lslls	r4, r3, #4
  13cfdc:	958d3008 	strls	r3, [sp, #8]
  13cfe0:	92844008 	addls	r4, r4, #8
  13cfe4:	e58d3004 	str	r3, [sp, #4]
  13cfe8:	eaffff5c 	b	13cd60 <__bin_chunk+0x94>
  13cfec:	e3a000f0 	mov	r0, #240	; 0xf0
  13cff0:	ebfffcef 	bl	13c3b4 <get_rtt_syscall>
  13cff4:	e2503000 	subs	r3, r0, #0
  13cff8:	0affff85 	beq	13ce14 <__bin_chunk+0x148>
  13cffc:	e3a02001 	mov	r2, #1
  13d000:	e3a01081 	mov	r1, #129	; 0x81
  13d004:	e1a00004 	mov	r0, r4
  13d008:	e12fff33 	blx	r3
  13d00c:	e3700026 	cmn	r0, #38	; 0x26
  13d010:	1affff7f 	bne	13ce14 <__bin_chunk+0x148>
  13d014:	e3a000f0 	mov	r0, #240	; 0xf0
  13d018:	ebfffce5 	bl	13c3b4 <get_rtt_syscall>
  13d01c:	e2503000 	subs	r3, r0, #0
  13d020:	0affff7b 	beq	13ce14 <__bin_chunk+0x148>
  13d024:	e3a02001 	mov	r2, #1
  13d028:	e1a00004 	mov	r0, r4
  13d02c:	e1a01002 	mov	r1, r2
  13d030:	e12fff33 	blx	r3
  13d034:	eaffff76 	b	13ce14 <__bin_chunk+0x148>
  13d038:	e3a000f0 	mov	r0, #240	; 0xf0
  13d03c:	ebfffcdc 	bl	13c3b4 <get_rtt_syscall>
  13d040:	e2503000 	subs	r3, r0, #0
  13d044:	e59f72b8 	ldr	r7, [pc, #696]	; 13d304 <__bin_chunk+0x638>
  13d048:	0affff64 	beq	13cde0 <__bin_chunk+0x114>
  13d04c:	e3a02001 	mov	r2, #1
  13d050:	e3a01081 	mov	r1, #129	; 0x81
  13d054:	e1a00007 	mov	r0, r7
  13d058:	e12fff33 	blx	r3
  13d05c:	e3700026 	cmn	r0, #38	; 0x26
  13d060:	1affff5e 	bne	13cde0 <__bin_chunk+0x114>
  13d064:	e3a000f0 	mov	r0, #240	; 0xf0
  13d068:	ebfffcd1 	bl	13c3b4 <get_rtt_syscall>
  13d06c:	e2503000 	subs	r3, r0, #0
  13d070:	0affff5a 	beq	13cde0 <__bin_chunk+0x114>
  13d074:	e3a02001 	mov	r2, #1
  13d078:	e1a00007 	mov	r0, r7
  13d07c:	e1a01002 	mov	r1, r2
  13d080:	e12fff33 	blx	r3
  13d084:	eaffff55 	b	13cde0 <__bin_chunk+0x114>
  13d088:	e59d3004 	ldr	r3, [sp, #4]
  13d08c:	e8950006 	ldm	r5, {r1, r2}
  13d090:	e263c020 	rsb	ip, r3, #32
  13d094:	e1a08331 	lsr	r8, r1, r3
  13d098:	e2430020 	sub	r0, r3, #32
  13d09c:	e3a03000 	mov	r3, #0
  13d0a0:	e1888c12 	orr	r8, r8, r2, lsl ip
  13d0a4:	e1888032 	orr	r8, r8, r2, lsr r0
  13d0a8:	e2082001 	and	r2, r8, #1
  13d0ac:	e1923003 	orrs	r3, r2, r3
  13d0b0:	0a00005d 	beq	13d22c <__bin_chunk+0x560>
  13d0b4:	e59d3000 	ldr	r3, [sp]
  13d0b8:	e5863004 	str	r3, [r6, #4]
  13d0bc:	e58b3000 	str	r3, [fp]
  13d0c0:	e5953408 	ldr	r3, [r5, #1032]	; 0x408
  13d0c4:	e3530000 	cmp	r3, #0
  13d0c8:	0a000009 	beq	13d0f4 <__bin_chunk+0x428>
  13d0cc:	e59f3224 	ldr	r3, [pc, #548]	; 13d2f8 <__bin_chunk+0x62c>
  13d0d0:	e593c000 	ldr	ip, [r3]
  13d0d4:	e12fff3c 	blx	ip
  13d0d8:	e3a02000 	mov	r2, #0
  13d0dc:	e593c000 	ldr	ip, [r3]
  13d0e0:	e5852408 	str	r2, [r5, #1032]	; 0x408
  13d0e4:	e12fff3c 	blx	ip
  13d0e8:	e595340c 	ldr	r3, [r5, #1036]	; 0x40c
  13d0ec:	e1530002 	cmp	r3, r2
  13d0f0:	1a000039 	bne	13d1dc <__bin_chunk+0x510>
  13d0f4:	e59d3008 	ldr	r3, [sp, #8]
  13d0f8:	e0857207 	add	r7, r5, r7, lsl #4
  13d0fc:	e2833001 	add	r3, r3, #1
  13d100:	e5972004 	ldr	r2, [r7, #4]
  13d104:	e0855203 	add	r5, r5, r3, lsl #4
  13d108:	e2453008 	sub	r3, r5, #8
  13d10c:	e586200c 	str	r2, [r6, #12]
  13d110:	e5863008 	str	r3, [r6, #8]
  13d114:	e59d2014 	ldr	r2, [sp, #20]
  13d118:	e5856004 	str	r6, [r5, #4]
  13d11c:	e596300c 	ldr	r3, [r6, #12]
  13d120:	e3520000 	cmp	r2, #0
  13d124:	e5836008 	str	r6, [r3, #8]
  13d128:	0a000008 	beq	13d150 <__bin_chunk+0x484>
  13d12c:	e59f31d4 	ldr	r3, [pc, #468]	; 13d308 <__bin_chunk+0x63c>
  13d130:	e2866a01 	add	r6, r6, #4096	; 0x1000
  13d134:	e286600f 	add	r6, r6, #15
  13d138:	e24b1010 	sub	r1, fp, #16
  13d13c:	e0060003 	and	r0, r6, r3
  13d140:	e0011003 	and	r1, r1, r3
  13d144:	e0411000 	sub	r1, r1, r0
  13d148:	e3a02004 	mov	r2, #4
  13d14c:	eb0002ca 	bl	13dc7c <__madvise>
  13d150:	e5943000 	ldr	r3, [r4]
  13d154:	e3530000 	cmp	r3, #0
  13d158:	0a000009 	beq	13d184 <__bin_chunk+0x4b8>
  13d15c:	e59f3194 	ldr	r3, [pc, #404]	; 13d2f8 <__bin_chunk+0x62c>
  13d160:	e593c000 	ldr	ip, [r3]
  13d164:	e12fff3c 	blx	ip
  13d168:	e3a02000 	mov	r2, #0
  13d16c:	e593c000 	ldr	ip, [r3]
  13d170:	e5842000 	str	r2, [r4]
  13d174:	e12fff3c 	blx	ip
  13d178:	e5943004 	ldr	r3, [r4, #4]
  13d17c:	e1530002 	cmp	r3, r2
  13d180:	1a000001 	bne	13d18c <__bin_chunk+0x4c0>
  13d184:	e28dd01c 	add	sp, sp, #28
  13d188:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13d18c:	e3a000f0 	mov	r0, #240	; 0xf0
  13d190:	ebfffc87 	bl	13c3b4 <get_rtt_syscall>
  13d194:	e2503000 	subs	r3, r0, #0
  13d198:	0afffff9 	beq	13d184 <__bin_chunk+0x4b8>
  13d19c:	e3a02001 	mov	r2, #1
  13d1a0:	e3a01081 	mov	r1, #129	; 0x81
  13d1a4:	e1a00004 	mov	r0, r4
  13d1a8:	e12fff33 	blx	r3
  13d1ac:	e3700026 	cmn	r0, #38	; 0x26
  13d1b0:	1afffff3 	bne	13d184 <__bin_chunk+0x4b8>
  13d1b4:	e3a000f0 	mov	r0, #240	; 0xf0
  13d1b8:	ebfffc7d 	bl	13c3b4 <get_rtt_syscall>
  13d1bc:	e2503000 	subs	r3, r0, #0
  13d1c0:	0affffef 	beq	13d184 <__bin_chunk+0x4b8>
  13d1c4:	e3a02001 	mov	r2, #1
  13d1c8:	e1a00004 	mov	r0, r4
  13d1cc:	e1a01002 	mov	r1, r2
  13d1d0:	e28dd01c 	add	sp, sp, #28
  13d1d4:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13d1d8:	e12fff13 	bx	r3
  13d1dc:	e3a000f0 	mov	r0, #240	; 0xf0
  13d1e0:	ebfffc73 	bl	13c3b4 <get_rtt_syscall>
  13d1e4:	e2503000 	subs	r3, r0, #0
  13d1e8:	e59f8114 	ldr	r8, [pc, #276]	; 13d304 <__bin_chunk+0x638>
  13d1ec:	0affffc0 	beq	13d0f4 <__bin_chunk+0x428>
  13d1f0:	e3a02001 	mov	r2, #1
  13d1f4:	e3a01081 	mov	r1, #129	; 0x81
  13d1f8:	e1a00008 	mov	r0, r8
  13d1fc:	e12fff33 	blx	r3
  13d200:	e3700026 	cmn	r0, #38	; 0x26
  13d204:	1affffba 	bne	13d0f4 <__bin_chunk+0x428>
  13d208:	e3a000f0 	mov	r0, #240	; 0xf0
  13d20c:	ebfffc68 	bl	13c3b4 <get_rtt_syscall>
  13d210:	e2503000 	subs	r3, r0, #0
  13d214:	0affffb6 	beq	13d0f4 <__bin_chunk+0x428>
  13d218:	e3a02001 	mov	r2, #1
  13d21c:	e1a00008 	mov	r0, r8
  13d220:	e1a01002 	mov	r1, r2
  13d224:	e12fff33 	blx	r3
  13d228:	eaffffb1 	b	13d0f4 <__bin_chunk+0x428>
  13d22c:	e3a03001 	mov	r3, #1
  13d230:	e59d1004 	ldr	r1, [sp, #4]
  13d234:	e1a02013 	lsl	r2, r3, r0
  13d238:	e1b01113 	lsls	r1, r3, r1
  13d23c:	e1823c33 	orr	r3, r2, r3, lsr ip
  13d240:	e58d100c 	str	r1, [sp, #12]
  13d244:	e58d3004 	str	r3, [sp, #4]
  13d248:	0a000011 	beq	13d294 <__bin_chunk+0x5c8>
  13d24c:	e59f809c 	ldr	r8, [pc, #156]	; 13d2f0 <__bin_chunk+0x624>
  13d250:	e59fa094 	ldr	sl, [pc, #148]	; 13d2ec <__bin_chunk+0x620>
  13d254:	e58db010 	str	fp, [sp, #16]
  13d258:	e5959000 	ldr	r9, [r5]
  13d25c:	e59d300c 	ldr	r3, [sp, #12]
  13d260:	e183b009 	orr	fp, r3, r9
  13d264:	ea000002 	b	13d274 <__bin_chunk+0x5a8>
  13d268:	e5953000 	ldr	r3, [r5]
  13d26c:	e1590003 	cmp	r9, r3
  13d270:	1afffff8 	bne	13d258 <__bin_chunk+0x58c>
  13d274:	e1a00009 	mov	r0, r9
  13d278:	e1a0100b 	mov	r1, fp
  13d27c:	e1a0200a 	mov	r2, sl
  13d280:	e5983000 	ldr	r3, [r8]
  13d284:	e12fff33 	blx	r3
  13d288:	e3500000 	cmp	r0, #0
  13d28c:	1afffff5 	bne	13d268 <__bin_chunk+0x59c>
  13d290:	e59db010 	ldr	fp, [sp, #16]
  13d294:	e59d3004 	ldr	r3, [sp, #4]
  13d298:	e3530000 	cmp	r3, #0
  13d29c:	0affff84 	beq	13d0b4 <__bin_chunk+0x3e8>
  13d2a0:	e59f8048 	ldr	r8, [pc, #72]	; 13d2f0 <__bin_chunk+0x624>
  13d2a4:	e59fa060 	ldr	sl, [pc, #96]	; 13d30c <__bin_chunk+0x640>
  13d2a8:	e58db00c 	str	fp, [sp, #12]
  13d2ac:	e5959004 	ldr	r9, [r5, #4]
  13d2b0:	e59d3004 	ldr	r3, [sp, #4]
  13d2b4:	e183b009 	orr	fp, r3, r9
  13d2b8:	ea000002 	b	13d2c8 <__bin_chunk+0x5fc>
  13d2bc:	e5953004 	ldr	r3, [r5, #4]
  13d2c0:	e1590003 	cmp	r9, r3
  13d2c4:	1afffff8 	bne	13d2ac <__bin_chunk+0x5e0>
  13d2c8:	e1a00009 	mov	r0, r9
  13d2cc:	e1a0100b 	mov	r1, fp
  13d2d0:	e1a0200a 	mov	r2, sl
  13d2d4:	e5983000 	ldr	r3, [r8]
  13d2d8:	e12fff33 	blx	r3
  13d2dc:	e3500000 	cmp	r0, #0
  13d2e0:	1afffff5 	bne	13d2bc <__bin_chunk+0x5f0>
  13d2e4:	e59db00c 	ldr	fp, [sp, #12]
  13d2e8:	eaffff71 	b	13d0b4 <__bin_chunk+0x3e8>
  13d2ec:	0014ec40 	.word	0x0014ec40
  13d2f0:	0014d3d8 	.word	0x0014d3d8
  13d2f4:	0015d074 	.word	0x0015d074
  13d2f8:	0014d3d4 	.word	0x0014d3d4
  13d2fc:	0014cd4c 	.word	0x0014cd4c
  13d300:	0014f040 	.word	0x0014f040
  13d304:	0014f048 	.word	0x0014f048
  13d308:	fffff000 	.word	0xfffff000
  13d30c:	0014ec44 	.word	0x0014ec44

0013d310 <trim>:
  13d310:	e5903004 	ldr	r3, [r0, #4]
  13d314:	e1a02000 	mov	r2, r0
  13d318:	e3c33001 	bic	r3, r3, #1
  13d31c:	e2430010 	sub	r0, r3, #16
  13d320:	e1500001 	cmp	r0, r1
  13d324:	912fff1e 	bxls	lr
  13d328:	e043c001 	sub	ip, r3, r1
  13d32c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13d330:	e38cc001 	orr	ip, ip, #1
  13d334:	e381e001 	orr	lr, r1, #1
  13d338:	e0820001 	add	r0, r2, r1
  13d33c:	e782e001 	str	lr, [r2, r1]
  13d340:	e580c004 	str	ip, [r0, #4]
  13d344:	e782c003 	str	ip, [r2, r3]
  13d348:	e582e004 	str	lr, [r2, #4]
  13d34c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13d350:	eafffe5d 	b	13cccc <__bin_chunk>

0013d354 <malloc>:
  13d354:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13d358:	e24dd02c 	sub	sp, sp, #44	; 0x2c
  13d35c:	e28d3028 	add	r3, sp, #40	; 0x28
  13d360:	e523000c 	str	r0, [r3, #-12]!
  13d364:	e1a00003 	mov	r0, r3
  13d368:	ebfffcb1 	bl	13c634 <adjust_size>
  13d36c:	e3500000 	cmp	r0, #0
  13d370:	ba000145 	blt	13d88c <malloc+0x538>
  13d374:	e59d301c 	ldr	r3, [sp, #28]
  13d378:	e3530907 	cmp	r3, #114688	; 0x1c000
  13d37c:	8a000076 	bhi	13d55c <malloc+0x208>
  13d380:	e1a03223 	lsr	r3, r3, #4
  13d384:	e2432001 	sub	r2, r3, #1
  13d388:	e3520020 	cmp	r2, #32
  13d38c:	958d2018 	strls	r2, [sp, #24]
  13d390:	8a000066 	bhi	13d530 <malloc+0x1dc>
  13d394:	e3a01001 	mov	r1, #1
  13d398:	e59dc018 	ldr	ip, [sp, #24]
  13d39c:	e59f85a8 	ldr	r8, [pc, #1448]	; 13d94c <malloc+0x5f8>
  13d3a0:	e24c0020 	sub	r0, ip, #32
  13d3a4:	e1a03011 	lsl	r3, r1, r0
  13d3a8:	e1a02c11 	lsl	r2, r1, ip
  13d3ac:	e26c0020 	rsb	r0, ip, #32
  13d3b0:	e2722000 	rsbs	r2, r2, #0
  13d3b4:	e1833031 	orr	r3, r3, r1, lsr r0
  13d3b8:	e2e33000 	rsc	r3, r3, #0
  13d3bc:	e58d2010 	str	r2, [sp, #16]
  13d3c0:	e58d3014 	str	r3, [sp, #20]
  13d3c4:	e59fb584 	ldr	fp, [pc, #1412]	; 13d950 <malloc+0x5fc>
  13d3c8:	e59f6584 	ldr	r6, [pc, #1412]	; 13d954 <malloc+0x600>
  13d3cc:	e898000c 	ldm	r8, {r2, r3}
  13d3d0:	e28d1010 	add	r1, sp, #16
  13d3d4:	e8910003 	ldm	r1, {r0, r1}
  13d3d8:	e0011003 	and	r1, r1, r3
  13d3dc:	e0000002 	and	r0, r0, r2
  13d3e0:	e1a02000 	mov	r2, r0
  13d3e4:	e1a03001 	mov	r3, r1
  13d3e8:	e1921003 	orrs	r1, r2, r3
  13d3ec:	0a000073 	beq	13d5c0 <malloc+0x26c>
  13d3f0:	e3500000 	cmp	r0, #0
  13d3f4:	1a000048 	bne	13d51c <malloc+0x1c8>
  13d3f8:	e2637000 	rsb	r7, r3, #0
  13d3fc:	e0077003 	and	r7, r7, r3
  13d400:	e16f7f17 	clz	r7, r7
  13d404:	e267703f 	rsb	r7, r7, #63	; 0x3f
  13d408:	e59b300c 	ldr	r3, [fp, #12]
  13d40c:	e1a09207 	lsl	r9, r7, #4
  13d410:	e2899008 	add	r9, r9, #8
  13d414:	e3530000 	cmp	r3, #0
  13d418:	e0885009 	add	r5, r8, r9
  13d41c:	1285a004 	addne	sl, r5, #4
  13d420:	1a000030 	bne	13d4e8 <malloc+0x194>
  13d424:	e2873001 	add	r3, r7, #1
  13d428:	e7984203 	ldr	r4, [r8, r3, lsl #4]
  13d42c:	e0882009 	add	r2, r8, r9
  13d430:	e3540000 	cmp	r4, #0
  13d434:	00881203 	addeq	r1, r8, r3, lsl #4
  13d438:	07882203 	streq	r2, [r8, r3, lsl #4]
  13d43c:	05812004 	streq	r2, [r1, #4]
  13d440:	0a000001 	beq	13d44c <malloc+0xf8>
  13d444:	e1540002 	cmp	r4, r2
  13d448:	1a00009d 	bne	13d6c4 <malloc+0x370>
  13d44c:	e7983009 	ldr	r3, [r8, r9]
  13d450:	e3530000 	cmp	r3, #0
  13d454:	0affffdc 	beq	13d3cc <malloc+0x78>
  13d458:	e59f24f8 	ldr	r2, [pc, #1272]	; 13d958 <malloc+0x604>
  13d45c:	e592c000 	ldr	ip, [r2]
  13d460:	e12fff3c 	blx	ip
  13d464:	e3a03000 	mov	r3, #0
  13d468:	e592c000 	ldr	ip, [r2]
  13d46c:	e5853000 	str	r3, [r5]
  13d470:	e12fff3c 	blx	ip
  13d474:	e5953004 	ldr	r3, [r5, #4]
  13d478:	e3530000 	cmp	r3, #0
  13d47c:	0affffd2 	beq	13d3cc <malloc+0x78>
  13d480:	e3a000f0 	mov	r0, #240	; 0xf0
  13d484:	ebfffbca 	bl	13c3b4 <get_rtt_syscall>
  13d488:	e2503000 	subs	r3, r0, #0
  13d48c:	0affffce 	beq	13d3cc <malloc+0x78>
  13d490:	e3a02001 	mov	r2, #1
  13d494:	e3a01081 	mov	r1, #129	; 0x81
  13d498:	e1a00005 	mov	r0, r5
  13d49c:	e12fff33 	blx	r3
  13d4a0:	e3700026 	cmn	r0, #38	; 0x26
  13d4a4:	1affffc8 	bne	13d3cc <malloc+0x78>
  13d4a8:	e3a000f0 	mov	r0, #240	; 0xf0
  13d4ac:	ebfffbc0 	bl	13c3b4 <get_rtt_syscall>
  13d4b0:	e2503000 	subs	r3, r0, #0
  13d4b4:	0affffc4 	beq	13d3cc <malloc+0x78>
  13d4b8:	e3a02001 	mov	r2, #1
  13d4bc:	e1a00005 	mov	r0, r5
  13d4c0:	e1a01002 	mov	r1, r2
  13d4c4:	e12fff33 	blx	r3
  13d4c8:	eaffffbf 	b	13d3cc <malloc+0x78>
  13d4cc:	e3540000 	cmp	r4, #0
  13d4d0:	0affffd3 	beq	13d424 <malloc+0xd0>
  13d4d4:	e1a03001 	mov	r3, r1
  13d4d8:	e1a02001 	mov	r2, r1
  13d4dc:	e1a00005 	mov	r0, r5
  13d4e0:	e1a0100a 	mov	r1, sl
  13d4e4:	eb00121a 	bl	141d54 <__wait>
  13d4e8:	e5954000 	ldr	r4, [r5]
  13d4ec:	ea000002 	b	13d4fc <malloc+0x1a8>
  13d4f0:	e5953000 	ldr	r3, [r5]
  13d4f4:	e1540003 	cmp	r4, r3
  13d4f8:	1afffffa 	bne	13d4e8 <malloc+0x194>
  13d4fc:	e1a00004 	mov	r0, r4
  13d500:	e3a01001 	mov	r1, #1
  13d504:	e1a02005 	mov	r2, r5
  13d508:	e5963000 	ldr	r3, [r6]
  13d50c:	e12fff33 	blx	r3
  13d510:	e3500000 	cmp	r0, #0
  13d514:	1afffff5 	bne	13d4f0 <malloc+0x19c>
  13d518:	eaffffeb 	b	13d4cc <malloc+0x178>
  13d51c:	e2607000 	rsb	r7, r0, #0
  13d520:	e0077000 	and	r7, r7, r0
  13d524:	e16f7f17 	clz	r7, r7
  13d528:	e267701f 	rsb	r7, r7, #31
  13d52c:	eaffffb5 	b	13d408 <malloc+0xb4>
  13d530:	e2433002 	sub	r3, r3, #2
  13d534:	e59f2420 	ldr	r2, [pc, #1056]	; 13d95c <malloc+0x608>
  13d538:	e3530c02 	cmp	r3, #512	; 0x200
  13d53c:	308231a3 	addcc	r3, r2, r3, lsr #3
  13d540:	208233a3 	addcs	r3, r2, r3, lsr #7
  13d544:	35533004 	ldrbcc	r3, [r3, #-4]
  13d548:	25533004 	ldrbcs	r3, [r3, #-4]
  13d54c:	32833001 	addcc	r3, r3, #1
  13d550:	22833011 	addcs	r3, r3, #17
  13d554:	e58d3018 	str	r3, [sp, #24]
  13d558:	eaffff8d 	b	13d394 <malloc+0x40>
  13d55c:	e3e02000 	mvn	r2, #0
  13d560:	e3a06000 	mov	r6, #0
  13d564:	e3a07000 	mov	r7, #0
  13d568:	e2833a01 	add	r3, r3, #4096	; 0x1000
  13d56c:	e2833007 	add	r3, r3, #7
  13d570:	e3c34eff 	bic	r4, r3, #4080	; 0xff0
  13d574:	e3c4400f 	bic	r4, r4, #15
  13d578:	e58d2000 	str	r2, [sp]
  13d57c:	e1a01004 	mov	r1, r4
  13d580:	e58d6008 	str	r6, [sp, #8]
  13d584:	e58d700c 	str	r7, [sp, #12]
  13d588:	e3a03022 	mov	r3, #34	; 0x22
  13d58c:	e3a02003 	mov	r2, #3
  13d590:	e3a00000 	mov	r0, #0
  13d594:	eb0001c9 	bl	13dcc0 <__mmap>
  13d598:	e3700001 	cmn	r0, #1
  13d59c:	0a0000ba 	beq	13d88c <malloc+0x538>
  13d5a0:	e3a03008 	mov	r3, #8
  13d5a4:	e2444008 	sub	r4, r4, #8
  13d5a8:	e580400c 	str	r4, [r0, #12]
  13d5ac:	e5803008 	str	r3, [r0, #8]
  13d5b0:	e2804010 	add	r4, r0, #16
  13d5b4:	e1a00004 	mov	r0, r4
  13d5b8:	e28dd02c 	add	sp, sp, #44	; 0x2c
  13d5bc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13d5c0:	e59b200c 	ldr	r2, [fp, #12]
  13d5c4:	e59d301c 	ldr	r3, [sp, #28]
  13d5c8:	e3520000 	cmp	r2, #0
  13d5cc:	e2833010 	add	r3, r3, #16
  13d5d0:	e59f5388 	ldr	r5, [pc, #904]	; 13d960 <malloc+0x60c>
  13d5d4:	e58d3024 	str	r3, [sp, #36]	; 0x24
  13d5d8:	1a000094 	bne	13d830 <malloc+0x4dc>
  13d5dc:	e28d0024 	add	r0, sp, #36	; 0x24
  13d5e0:	eb001717 	bl	143244 <__expand_heap>
  13d5e4:	e2504000 	subs	r4, r0, #0
  13d5e8:	0a0000b8 	beq	13d8d0 <malloc+0x57c>
  13d5ec:	e59f1370 	ldr	r1, [pc, #880]	; 13d964 <malloc+0x610>
  13d5f0:	e3a07001 	mov	r7, #1
  13d5f4:	e5916000 	ldr	r6, [r1]
  13d5f8:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
  13d5fc:	e1540006 	cmp	r4, r6
  13d600:	13a02001 	movne	r2, #1
  13d604:	e5950000 	ldr	r0, [r5]
  13d608:	12433010 	subne	r3, r3, #16
  13d60c:	12846010 	addne	r6, r4, #16
  13d610:	15842008 	strne	r2, [r4, #8]
  13d614:	158d3024 	strne	r3, [sp, #36]	; 0x24
  13d618:	e0862003 	add	r2, r6, r3
  13d61c:	e3500000 	cmp	r0, #0
  13d620:	e1833007 	orr	r3, r3, r7
  13d624:	e9020088 	stmdb	r2, {r3, r7}
  13d628:	e5812000 	str	r2, [r1]
  13d62c:	e5063004 	str	r3, [r6, #-4]
  13d630:	e2464008 	sub	r4, r6, #8
  13d634:	0a000009 	beq	13d660 <malloc+0x30c>
  13d638:	e59f3318 	ldr	r3, [pc, #792]	; 13d958 <malloc+0x604>
  13d63c:	e593c000 	ldr	ip, [r3]
  13d640:	e12fff3c 	blx	ip
  13d644:	e3a02000 	mov	r2, #0
  13d648:	e593c000 	ldr	ip, [r3]
  13d64c:	e5852000 	str	r2, [r5]
  13d650:	e12fff3c 	blx	ip
  13d654:	e5953004 	ldr	r3, [r5, #4]
  13d658:	e1530002 	cmp	r3, r2
  13d65c:	1a000060 	bne	13d7e4 <malloc+0x490>
  13d660:	e3540000 	cmp	r4, #0
  13d664:	0a000088 	beq	13d88c <malloc+0x538>
  13d668:	e1a00004 	mov	r0, r4
  13d66c:	ebfffcf4 	bl	13ca44 <alloc_rev>
  13d670:	e3500000 	cmp	r0, #0
  13d674:	0a00000b 	beq	13d6a8 <malloc+0x354>
  13d678:	e5163008 	ldr	r3, [r6, #-8]
  13d67c:	e5161004 	ldr	r1, [r6, #-4]
  13d680:	e3c33001 	bic	r3, r3, #1
  13d684:	e0443003 	sub	r3, r4, r3
  13d688:	e5932004 	ldr	r2, [r3, #4]
  13d68c:	e3c22001 	bic	r2, r2, #1
  13d690:	e0822001 	add	r2, r2, r1
  13d694:	e5832004 	str	r2, [r3, #4]
  13d698:	e5161004 	ldr	r1, [r6, #-4]
  13d69c:	e3c11001 	bic	r1, r1, #1
  13d6a0:	e7842001 	str	r2, [r4, r1]
  13d6a4:	e1a04003 	mov	r4, r3
  13d6a8:	e1a00004 	mov	r0, r4
  13d6ac:	e59d101c 	ldr	r1, [sp, #28]
  13d6b0:	e2844008 	add	r4, r4, #8
  13d6b4:	ebffff15 	bl	13d310 <trim>
  13d6b8:	e1a00004 	mov	r0, r4
  13d6bc:	e28dd02c 	add	sp, sp, #44	; 0x2c
  13d6c0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13d6c4:	e3570027 	cmp	r7, #39	; 0x27
  13d6c8:	da000041 	ble	13d7d4 <malloc+0x480>
  13d6cc:	e59d3018 	ldr	r3, [sp, #24]
  13d6d0:	e59d001c 	ldr	r0, [sp, #28]
  13d6d4:	e2833002 	add	r3, r3, #2
  13d6d8:	e1570003 	cmp	r7, r3
  13d6dc:	da00003a 	ble	13d7cc <malloc+0x478>
  13d6e0:	e5942004 	ldr	r2, [r4, #4]
  13d6e4:	e3c22001 	bic	r2, r2, #1
  13d6e8:	e0421000 	sub	r1, r2, r0
  13d6ec:	e1a03221 	lsr	r3, r1, #4
  13d6f0:	e2433001 	sub	r3, r3, #1
  13d6f4:	e3530020 	cmp	r3, #32
  13d6f8:	9a000035 	bls	13d7d4 <malloc+0x480>
  13d6fc:	e3530c02 	cmp	r3, #512	; 0x200
  13d700:	2a000065 	bcs	13d89c <malloc+0x548>
  13d704:	e59fc250 	ldr	ip, [pc, #592]	; 13d95c <malloc+0x608>
  13d708:	e08c31a3 	add	r3, ip, r3, lsr #3
  13d70c:	e5533004 	ldrb	r3, [r3, #-4]
  13d710:	e1570003 	cmp	r7, r3
  13d714:	1a00002e 	bne	13d7d4 <malloc+0x480>
  13d718:	e594c00c 	ldr	ip, [r4, #12]
  13d71c:	e594e008 	ldr	lr, [r4, #8]
  13d720:	e0843000 	add	r3, r4, r0
  13d724:	e583c00c 	str	ip, [r3, #12]
  13d728:	e583e008 	str	lr, [r3, #8]
  13d72c:	e58c3008 	str	r3, [ip, #8]
  13d730:	e593e008 	ldr	lr, [r3, #8]
  13d734:	e380c001 	orr	ip, r0, #1
  13d738:	e58e300c 	str	r3, [lr, #12]
  13d73c:	e784c000 	str	ip, [r4, r0]
  13d740:	e5831004 	str	r1, [r3, #4]
  13d744:	e7841002 	str	r1, [r4, r2]
  13d748:	e584c004 	str	ip, [r4, #4]
  13d74c:	e5953000 	ldr	r3, [r5]
  13d750:	e3530000 	cmp	r3, #0
  13d754:	0affffd3 	beq	13d6a8 <malloc+0x354>
  13d758:	e59f31f8 	ldr	r3, [pc, #504]	; 13d958 <malloc+0x604>
  13d75c:	e593c000 	ldr	ip, [r3]
  13d760:	e12fff3c 	blx	ip
  13d764:	e3a02000 	mov	r2, #0
  13d768:	e593c000 	ldr	ip, [r3]
  13d76c:	e5852000 	str	r2, [r5]
  13d770:	e12fff3c 	blx	ip
  13d774:	e5953004 	ldr	r3, [r5, #4]
  13d778:	e1530002 	cmp	r3, r2
  13d77c:	0affffc9 	beq	13d6a8 <malloc+0x354>
  13d780:	e3a000f0 	mov	r0, #240	; 0xf0
  13d784:	ebfffb0a 	bl	13c3b4 <get_rtt_syscall>
  13d788:	e2503000 	subs	r3, r0, #0
  13d78c:	0affffc5 	beq	13d6a8 <malloc+0x354>
  13d790:	e3a02001 	mov	r2, #1
  13d794:	e3a01081 	mov	r1, #129	; 0x81
  13d798:	e1a00005 	mov	r0, r5
  13d79c:	e12fff33 	blx	r3
  13d7a0:	e3700026 	cmn	r0, #38	; 0x26
  13d7a4:	1affffbf 	bne	13d6a8 <malloc+0x354>
  13d7a8:	e3a000f0 	mov	r0, #240	; 0xf0
  13d7ac:	ebfffb00 	bl	13c3b4 <get_rtt_syscall>
  13d7b0:	e2503000 	subs	r3, r0, #0
  13d7b4:	0affffbb 	beq	13d6a8 <malloc+0x354>
  13d7b8:	e3a02001 	mov	r2, #1
  13d7bc:	e1a00005 	mov	r0, r5
  13d7c0:	e1a01002 	mov	r1, r2
  13d7c4:	e12fff33 	blx	r3
  13d7c8:	eaffffb6 	b	13d6a8 <malloc+0x354>
  13d7cc:	e357003f 	cmp	r7, #63	; 0x3f
  13d7d0:	0a000038 	beq	13d8b8 <malloc+0x564>
  13d7d4:	e1a01007 	mov	r1, r7
  13d7d8:	e1a00004 	mov	r0, r4
  13d7dc:	ebfffbae 	bl	13c69c <unbin>
  13d7e0:	eaffffd9 	b	13d74c <malloc+0x3f8>
  13d7e4:	e3a000f0 	mov	r0, #240	; 0xf0
  13d7e8:	ebfffaf1 	bl	13c3b4 <get_rtt_syscall>
  13d7ec:	e2503000 	subs	r3, r0, #0
  13d7f0:	0affff9a 	beq	13d660 <malloc+0x30c>
  13d7f4:	e1a02007 	mov	r2, r7
  13d7f8:	e3a01081 	mov	r1, #129	; 0x81
  13d7fc:	e59f015c 	ldr	r0, [pc, #348]	; 13d960 <malloc+0x60c>
  13d800:	e12fff33 	blx	r3
  13d804:	e3700026 	cmn	r0, #38	; 0x26
  13d808:	1affff94 	bne	13d660 <malloc+0x30c>
  13d80c:	e3a000f0 	mov	r0, #240	; 0xf0
  13d810:	ebfffae7 	bl	13c3b4 <get_rtt_syscall>
  13d814:	e2503000 	subs	r3, r0, #0
  13d818:	0affff90 	beq	13d660 <malloc+0x30c>
  13d81c:	e1a02007 	mov	r2, r7
  13d820:	e1a01007 	mov	r1, r7
  13d824:	e59f0134 	ldr	r0, [pc, #308]	; 13d960 <malloc+0x60c>
  13d828:	e12fff33 	blx	r3
  13d82c:	eaffff8b 	b	13d660 <malloc+0x30c>
  13d830:	e1a06005 	mov	r6, r5
  13d834:	e59f7118 	ldr	r7, [pc, #280]	; 13d954 <malloc+0x600>
  13d838:	e2858004 	add	r8, r5, #4
  13d83c:	e5954000 	ldr	r4, [r5]
  13d840:	ea000002 	b	13d850 <malloc+0x4fc>
  13d844:	e5953000 	ldr	r3, [r5]
  13d848:	e1540003 	cmp	r4, r3
  13d84c:	1afffffa 	bne	13d83c <malloc+0x4e8>
  13d850:	e1a00004 	mov	r0, r4
  13d854:	e3a01001 	mov	r1, #1
  13d858:	e1a02006 	mov	r2, r6
  13d85c:	e5973000 	ldr	r3, [r7]
  13d860:	e12fff33 	blx	r3
  13d864:	e3500000 	cmp	r0, #0
  13d868:	1afffff5 	bne	13d844 <malloc+0x4f0>
  13d86c:	e3540000 	cmp	r4, #0
  13d870:	0affff59 	beq	13d5dc <malloc+0x288>
  13d874:	e1a03001 	mov	r3, r1
  13d878:	e1a02001 	mov	r2, r1
  13d87c:	e59f00dc 	ldr	r0, [pc, #220]	; 13d960 <malloc+0x60c>
  13d880:	e1a01008 	mov	r1, r8
  13d884:	eb001132 	bl	141d54 <__wait>
  13d888:	eaffffeb 	b	13d83c <malloc+0x4e8>
  13d88c:	e3a04000 	mov	r4, #0
  13d890:	e1a00004 	mov	r0, r4
  13d894:	e28dd02c 	add	sp, sp, #44	; 0x2c
  13d898:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13d89c:	e3530b07 	cmp	r3, #7168	; 0x1c00
  13d8a0:	959fc0b4 	ldrls	ip, [pc, #180]	; 13d95c <malloc+0x608>
  13d8a4:	83a0303f 	movhi	r3, #63	; 0x3f
  13d8a8:	908c33a3 	addls	r3, ip, r3, lsr #7
  13d8ac:	95533004 	ldrbls	r3, [r3, #-4]
  13d8b0:	92833010 	addls	r3, r3, #16
  13d8b4:	eaffff95 	b	13d710 <malloc+0x3bc>
  13d8b8:	e5942004 	ldr	r2, [r4, #4]
  13d8bc:	e3c22001 	bic	r2, r2, #1
  13d8c0:	e0421000 	sub	r1, r2, r0
  13d8c4:	e3510907 	cmp	r1, #114688	; 0x1c000
  13d8c8:	8affff87 	bhi	13d6ec <malloc+0x398>
  13d8cc:	eaffffc0 	b	13d7d4 <malloc+0x480>
  13d8d0:	e5953000 	ldr	r3, [r5]
  13d8d4:	e3530000 	cmp	r3, #0
  13d8d8:	0affffeb 	beq	13d88c <malloc+0x538>
  13d8dc:	e59f3074 	ldr	r3, [pc, #116]	; 13d958 <malloc+0x604>
  13d8e0:	e593c000 	ldr	ip, [r3]
  13d8e4:	e12fff3c 	blx	ip
  13d8e8:	e5854000 	str	r4, [r5]
  13d8ec:	e593c000 	ldr	ip, [r3]
  13d8f0:	e12fff3c 	blx	ip
  13d8f4:	e5953004 	ldr	r3, [r5, #4]
  13d8f8:	e3530000 	cmp	r3, #0
  13d8fc:	0affffe2 	beq	13d88c <malloc+0x538>
  13d900:	e3a000f0 	mov	r0, #240	; 0xf0
  13d904:	ebfffaaa 	bl	13c3b4 <get_rtt_syscall>
  13d908:	e2503000 	subs	r3, r0, #0
  13d90c:	0affffde 	beq	13d88c <malloc+0x538>
  13d910:	e3a02001 	mov	r2, #1
  13d914:	e3a01081 	mov	r1, #129	; 0x81
  13d918:	e59f0040 	ldr	r0, [pc, #64]	; 13d960 <malloc+0x60c>
  13d91c:	e12fff33 	blx	r3
  13d920:	e3700026 	cmn	r0, #38	; 0x26
  13d924:	1affffd8 	bne	13d88c <malloc+0x538>
  13d928:	e3a000f0 	mov	r0, #240	; 0xf0
  13d92c:	ebfffaa0 	bl	13c3b4 <get_rtt_syscall>
  13d930:	e2503000 	subs	r3, r0, #0
  13d934:	0affffd4 	beq	13d88c <malloc+0x538>
  13d938:	e3a02001 	mov	r2, #1
  13d93c:	e59f001c 	ldr	r0, [pc, #28]	; 13d960 <malloc+0x60c>
  13d940:	e1a01002 	mov	r1, r2
  13d944:	e12fff33 	blx	r3
  13d948:	eaffff19 	b	13d5b4 <malloc+0x260>
  13d94c:	0014ec40 	.word	0x0014ec40
  13d950:	0015d074 	.word	0x0015d074
  13d954:	0014d3d8 	.word	0x0014d3d8
  13d958:	0014d3d4 	.word	0x0014d3d4
  13d95c:	0014cd4c 	.word	0x0014cd4c
  13d960:	0014ec38 	.word	0x0014ec38
  13d964:	0014ec34 	.word	0x0014ec34

0013d968 <calloc>:
  13d968:	e3510000 	cmp	r1, #0
  13d96c:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, fp, lr}
  13d970:	0a000002 	beq	13d980 <calloc+0x18>
  13d974:	e0832190 	umull	r2, r3, r0, r1
  13d978:	e3530000 	cmp	r3, #0
  13d97c:	1a000013 	bne	13d9d0 <calloc+0x68>
  13d980:	e0040190 	mul	r4, r0, r1
  13d984:	e1a00004 	mov	r0, r4
  13d988:	ebfffe71 	bl	13d354 <malloc>
  13d98c:	e2509000 	subs	r9, r0, #0
  13d990:	0a000012 	beq	13d9e0 <calloc+0x78>
  13d994:	e59f30a0 	ldr	r3, [pc, #160]	; 13da3c <calloc+0xd4>
  13d998:	e5933000 	ldr	r3, [r3]
  13d99c:	e3530000 	cmp	r3, #0
  13d9a0:	1a000005 	bne	13d9bc <calloc+0x54>
  13d9a4:	e5193004 	ldr	r3, [r9, #-4]
  13d9a8:	e3130001 	tst	r3, #1
  13d9ac:	0a00000b 	beq	13d9e0 <calloc+0x78>
  13d9b0:	e59f3088 	ldr	r3, [pc, #136]	; 13da40 <calloc+0xd8>
  13d9b4:	e1540003 	cmp	r4, r3
  13d9b8:	8a00000a 	bhi	13d9e8 <calloc+0x80>
  13d9bc:	e1a02004 	mov	r2, r4
  13d9c0:	e1a00009 	mov	r0, r9
  13d9c4:	e8bd4bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
  13d9c8:	e3a01000 	mov	r1, #0
  13d9cc:	ea000e28 	b	141274 <memset>
  13d9d0:	ebffed41 	bl	138edc <__errno_location>
  13d9d4:	e3a0300c 	mov	r3, #12
  13d9d8:	e3a09000 	mov	r9, #0
  13d9dc:	e5803000 	str	r3, [r0]
  13d9e0:	e1a00009 	mov	r0, r9
  13d9e4:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
  13d9e8:	e1a08003 	mov	r8, r3
  13d9ec:	e0890004 	add	r0, r9, r4
  13d9f0:	e0002003 	and	r2, r0, r3
  13d9f4:	e0400002 	sub	r0, r0, r2
  13d9f8:	e3a01000 	mov	r1, #0
  13d9fc:	eb000e1c 	bl	141274 <memset>
  13da00:	e0404009 	sub	r4, r0, r9
  13da04:	e1540008 	cmp	r4, r8
  13da08:	9affffeb 	bls	13d9bc <calloc+0x54>
  13da0c:	e3a02a01 	mov	r2, #4096	; 0x1000
  13da10:	e9100030 	ldmdb	r0, {r4, r5}
  13da14:	e2407010 	sub	r7, r0, #16
  13da18:	e89700c0 	ldm	r7, {r6, r7}
  13da1c:	e184b006 	orr	fp, r4, r6
  13da20:	e185c007 	orr	ip, r5, r7
  13da24:	e19b300c 	orrs	r3, fp, ip
  13da28:	1afffff1 	bne	13d9f4 <calloc+0x8c>
  13da2c:	e2522010 	subs	r2, r2, #16
  13da30:	e2400010 	sub	r0, r0, #16
  13da34:	1afffff5 	bne	13da10 <calloc+0xa8>
  13da38:	eaffffed 	b	13d9f4 <calloc+0x8c>
  13da3c:	0015d0b8 	.word	0x0015d0b8
  13da40:	00000fff 	.word	0x00000fff

0013da44 <free>:
  13da44:	e2502000 	subs	r2, r0, #0
  13da48:	012fff1e 	bxeq	lr
  13da4c:	e5123004 	ldr	r3, [r2, #-4]
  13da50:	e2420008 	sub	r0, r2, #8
  13da54:	e3130001 	tst	r3, #1
  13da58:	0a000000 	beq	13da60 <free+0x1c>
  13da5c:	eafffc9a 	b	13cccc <__bin_chunk>
  13da60:	e5121008 	ldr	r1, [r2, #-8]
  13da64:	e3c33001 	bic	r3, r3, #1
  13da68:	e3110001 	tst	r1, #1
  13da6c:	e0400001 	sub	r0, r0, r1
  13da70:	e0831001 	add	r1, r3, r1
  13da74:	0a000000 	beq	13da7c <free+0x38>
  13da78:	e7f000f0 	.word	0xe7f000f0
  13da7c:	ea0000f5 	b	13de58 <__munmap>

0013da80 <realloc>:
  13da80:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  13da84:	e2505000 	subs	r5, r0, #0
  13da88:	e24dd008 	sub	sp, sp, #8
  13da8c:	e58d1004 	str	r1, [sp, #4]
  13da90:	0a000034 	beq	13db68 <realloc+0xe8>
  13da94:	e28d0004 	add	r0, sp, #4
  13da98:	ebfffae5 	bl	13c634 <adjust_size>
  13da9c:	e3500000 	cmp	r0, #0
  13daa0:	ba00005b 	blt	13dc14 <realloc+0x194>
  13daa4:	e5153004 	ldr	r3, [r5, #-4]
  13daa8:	e2459008 	sub	r9, r5, #8
  13daac:	e3130001 	tst	r3, #1
  13dab0:	e3c36001 	bic	r6, r3, #1
  13dab4:	0a000010 	beq	13dafc <realloc+0x7c>
  13dab8:	e7992006 	ldr	r2, [r9, r6]
  13dabc:	e0894006 	add	r4, r9, r6
  13dac0:	e1530002 	cmp	r3, r2
  13dac4:	0a000000 	beq	13dacc <realloc+0x4c>
  13dac8:	e7f000f0 	.word	0xe7f000f0
  13dacc:	e59d1004 	ldr	r1, [sp, #4]
  13dad0:	e1510006 	cmp	r1, r6
  13dad4:	93866001 	orrls	r6, r6, #1
  13dad8:	95056004 	strls	r6, [r5, #-4]
  13dadc:	95846000 	strls	r6, [r4]
  13dae0:	8a000038 	bhi	13dbc8 <realloc+0x148>
  13dae4:	e1a00009 	mov	r0, r9
  13dae8:	ebfffe08 	bl	13d310 <trim>
  13daec:	e1a07005 	mov	r7, r5
  13daf0:	e1a00007 	mov	r0, r7
  13daf4:	e28dd008 	add	sp, sp, #8
  13daf8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  13dafc:	e5158008 	ldr	r8, [r5, #-8]
  13db00:	e59d4004 	ldr	r4, [sp, #4]
  13db04:	e3180001 	tst	r8, #1
  13db08:	e086a008 	add	sl, r6, r8
  13db0c:	e0884004 	add	r4, r8, r4
  13db10:	1a00001a 	bne	13db80 <realloc+0x100>
  13db14:	e3540a01 	cmp	r4, #4096	; 0x1000
  13db18:	3a00001b 	bcc	13db8c <realloc+0x10c>
  13db1c:	e2844eff 	add	r4, r4, #4080	; 0xff0
  13db20:	e284400f 	add	r4, r4, #15
  13db24:	e3c44eff 	bic	r4, r4, #4080	; 0xff0
  13db28:	e3c4400f 	bic	r4, r4, #15
  13db2c:	e15a0004 	cmp	sl, r4
  13db30:	01a07005 	moveq	r7, r5
  13db34:	0affffed 	beq	13daf0 <realloc+0x70>
  13db38:	e1a0100a 	mov	r1, sl
  13db3c:	e0490008 	sub	r0, r9, r8
  13db40:	e3a03001 	mov	r3, #1
  13db44:	e1a02004 	mov	r2, r4
  13db48:	eb000099 	bl	13ddb4 <__mremap>
  13db4c:	e3700001 	cmn	r0, #1
  13db50:	0a000031 	beq	13dc1c <realloc+0x19c>
  13db54:	e0800008 	add	r0, r0, r8
  13db58:	e0444008 	sub	r4, r4, r8
  13db5c:	e5804004 	str	r4, [r0, #4]
  13db60:	e2807008 	add	r7, r0, #8
  13db64:	eaffffe1 	b	13daf0 <realloc+0x70>
  13db68:	e1a00001 	mov	r0, r1
  13db6c:	ebfffdf8 	bl	13d354 <malloc>
  13db70:	e1a07000 	mov	r7, r0
  13db74:	e1a00007 	mov	r0, r7
  13db78:	e28dd008 	add	sp, sp, #8
  13db7c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  13db80:	e7f000f0 	.word	0xe7f000f0
  13db84:	e3540a01 	cmp	r4, #4096	; 0x1000
  13db88:	2affffe3 	bcs	13db1c <realloc+0x9c>
  13db8c:	e59d0004 	ldr	r0, [sp, #4]
  13db90:	e2400008 	sub	r0, r0, #8
  13db94:	ebfffdee 	bl	13d354 <malloc>
  13db98:	e2507000 	subs	r7, r0, #0
  13db9c:	0affffde 	beq	13db1c <realloc+0x9c>
  13dba0:	e59d6004 	ldr	r6, [sp, #4]
  13dba4:	e2462008 	sub	r2, r6, #8
  13dba8:	e1a01005 	mov	r1, r5
  13dbac:	e1a00007 	mov	r0, r7
  13dbb0:	eb000c77 	bl	140d94 <memcpy>
  13dbb4:	e1a00005 	mov	r0, r5
  13dbb8:	ebffffa1 	bl	13da44 <free>
  13dbbc:	e1a00007 	mov	r0, r7
  13dbc0:	e28dd008 	add	sp, sp, #8
  13dbc4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  13dbc8:	e1a00004 	mov	r0, r4
  13dbcc:	ebfffafc 	bl	13c7c4 <alloc_fwd>
  13dbd0:	e3500000 	cmp	r0, #0
  13dbd4:	01a03006 	moveq	r3, r6
  13dbd8:	15943004 	ldrne	r3, [r4, #4]
  13dbdc:	059d1004 	ldreq	r1, [sp, #4]
  13dbe0:	13c33001 	bicne	r3, r3, #1
  13dbe4:	159d1004 	ldrne	r1, [sp, #4]
  13dbe8:	10844003 	addne	r4, r4, r3
  13dbec:	10833006 	addne	r3, r3, r6
  13dbf0:	e1530001 	cmp	r3, r1
  13dbf4:	e3833001 	orr	r3, r3, #1
  13dbf8:	e5053004 	str	r3, [r5, #-4]
  13dbfc:	e5843000 	str	r3, [r4]
  13dc00:	2affffb7 	bcs	13dae4 <realloc+0x64>
  13dc04:	e2410008 	sub	r0, r1, #8
  13dc08:	ebfffdd1 	bl	13d354 <malloc>
  13dc0c:	e2507000 	subs	r7, r0, #0
  13dc10:	1affffe3 	bne	13dba4 <realloc+0x124>
  13dc14:	e3a07000 	mov	r7, #0
  13dc18:	eaffffb4 	b	13daf0 <realloc+0x70>
  13dc1c:	e59d1004 	ldr	r1, [sp, #4]
  13dc20:	eafffff7 	b	13dc04 <realloc+0x184>

0013dc24 <__malloc_donate>:
  13dc24:	e2602008 	rsb	r2, r0, #8
  13dc28:	e201300f 	and	r3, r1, #15
  13dc2c:	e202200f 	and	r2, r2, #15
  13dc30:	e2833008 	add	r3, r3, #8
  13dc34:	e0833002 	add	r3, r3, r2
  13dc38:	e041c000 	sub	ip, r1, r0
  13dc3c:	e15c0003 	cmp	ip, r3
  13dc40:	912fff1e 	bxls	lr
  13dc44:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13dc48:	e3a0e001 	mov	lr, #1
  13dc4c:	e2823008 	add	r3, r2, #8
  13dc50:	e0803003 	add	r3, r0, r3
  13dc54:	e3c1100f 	bic	r1, r1, #15
  13dc58:	e041c003 	sub	ip, r1, r3
  13dc5c:	e18cc00e 	orr	ip, ip, lr
  13dc60:	e501e004 	str	lr, [r1, #-4]
  13dc64:	e0800002 	add	r0, r0, r2
  13dc68:	e503e008 	str	lr, [r3, #-8]
  13dc6c:	e501c008 	str	ip, [r1, #-8]
  13dc70:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13dc74:	e503c004 	str	ip, [r3, #-4]
  13dc78:	eafffc13 	b	13cccc <__bin_chunk>

0013dc7c <__madvise>:
  13dc7c:	e92d4070 	push	{r4, r5, r6, lr}
  13dc80:	e1a04000 	mov	r4, r0
  13dc84:	e3a000dc 	mov	r0, #220	; 0xdc
  13dc88:	e1a05001 	mov	r5, r1
  13dc8c:	e1a06002 	mov	r6, r2
  13dc90:	ebfff9c7 	bl	13c3b4 <get_rtt_syscall>
  13dc94:	e2503000 	subs	r3, r0, #0
  13dc98:	0a000005 	beq	13dcb4 <__madvise+0x38>
  13dc9c:	e1a02006 	mov	r2, r6
  13dca0:	e1a01005 	mov	r1, r5
  13dca4:	e1a00004 	mov	r0, r4
  13dca8:	e12fff33 	blx	r3
  13dcac:	e8bd4070 	pop	{r4, r5, r6, lr}
  13dcb0:	eafff9f4 	b	13c488 <__syscall_ret>
  13dcb4:	e1a00003 	mov	r0, r3
  13dcb8:	eafffffb 	b	13dcac <__madvise+0x30>

0013dcbc <dummy>:
  13dcbc:	e12fff1e 	bx	lr

0013dcc0 <__mmap>:
  13dcc0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13dcc4:	e28f50dc 	add	r5, pc, #220	; 0xdc
  13dcc8:	e8950030 	ldm	r5, {r4, r5}
  13dccc:	e24dd00c 	sub	sp, sp, #12
  13dcd0:	e28d7038 	add	r7, sp, #56	; 0x38
  13dcd4:	e89700c0 	ldm	r7, {r6, r7}
  13dcd8:	e0048006 	and	r8, r4, r6
  13dcdc:	e0059007 	and	r9, r5, r7
  13dce0:	e198c009 	orrs	ip, r8, r9
  13dce4:	e59db030 	ldr	fp, [sp, #48]	; 0x30
  13dce8:	1a000024 	bne	13dd80 <__mmap+0xc0>
  13dcec:	e371010a 	cmn	r1, #-2147483646	; 0x80000002
  13dcf0:	e1a08001 	mov	r8, r1
  13dcf4:	8a00001b 	bhi	13dd68 <__mmap+0xa8>
  13dcf8:	e3130010 	tst	r3, #16
  13dcfc:	e1a09000 	mov	r9, r0
  13dd00:	e1a0a002 	mov	sl, r2
  13dd04:	e1a05003 	mov	r5, r3
  13dd08:	1a000022 	bne	13dd98 <__mmap+0xd8>
  13dd0c:	e3a000c0 	mov	r0, #192	; 0xc0
  13dd10:	ebfff9a7 	bl	13c3b4 <get_rtt_syscall>
  13dd14:	e1a03626 	lsr	r3, r6, #12
  13dd18:	e2504000 	subs	r4, r0, #0
  13dd1c:	e1833a07 	orr	r3, r3, r7, lsl #20
  13dd20:	0a00001e 	beq	13dda0 <__mmap+0xe0>
  13dd24:	e58d3004 	str	r3, [sp, #4]
  13dd28:	e58db000 	str	fp, [sp]
  13dd2c:	e1a0200a 	mov	r2, sl
  13dd30:	e1a01008 	mov	r1, r8
  13dd34:	e1a03005 	mov	r3, r5
  13dd38:	e1a00009 	mov	r0, r9
  13dd3c:	e12fff34 	blx	r4
  13dd40:	e3590000 	cmp	r9, #0
  13dd44:	03700001 	cmneq	r0, #1
  13dd48:	1a000003 	bne	13dd5c <__mmap+0x9c>
  13dd4c:	e2055030 	and	r5, r5, #48	; 0x30
  13dd50:	e3550020 	cmp	r5, #32
  13dd54:	03e0000b 	mvneq	r0, #11
  13dd58:	13e00000 	mvnne	r0, #0
  13dd5c:	e28dd00c 	add	sp, sp, #12
  13dd60:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13dd64:	eafff9c7 	b	13c488 <__syscall_ret>
  13dd68:	ebffec5b 	bl	138edc <__errno_location>
  13dd6c:	e3a0300c 	mov	r3, #12
  13dd70:	e5803000 	str	r3, [r0]
  13dd74:	e3e00000 	mvn	r0, #0
  13dd78:	e28dd00c 	add	sp, sp, #12
  13dd7c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13dd80:	ebffec55 	bl	138edc <__errno_location>
  13dd84:	e3a03016 	mov	r3, #22
  13dd88:	e5803000 	str	r3, [r0]
  13dd8c:	e3e00000 	mvn	r0, #0
  13dd90:	e28dd00c 	add	sp, sp, #12
  13dd94:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13dd98:	eb00139d 	bl	142c14 <__vm_wait>
  13dd9c:	eaffffda 	b	13dd0c <__mmap+0x4c>
  13dda0:	e1a00004 	mov	r0, r4
  13dda4:	eaffffec 	b	13dd5c <__mmap+0x9c>
  13dda8:	00000fff 	.word	0x00000fff
  13ddac:	fffff000 	.word	0xfffff000

0013ddb0 <dummy>:
  13ddb0:	e12fff1e 	bx	lr

0013ddb4 <__mremap>:
  13ddb4:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
  13ddb8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13ddbc:	e372010a 	cmn	r2, #-2147483646	; 0x80000002
  13ddc0:	e24dd014 	sub	sp, sp, #20
  13ddc4:	8a00001b 	bhi	13de38 <__mremap+0x84>
  13ddc8:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  13ddcc:	e1a05002 	mov	r5, r2
  13ddd0:	e2136002 	ands	r6, r3, #2
  13ddd4:	e1a07000 	mov	r7, r0
  13ddd8:	e1a08001 	mov	r8, r1
  13dddc:	1a000010 	bne	13de24 <__mremap+0x70>
  13dde0:	e3a000a3 	mov	r0, #163	; 0xa3
  13dde4:	ebfff972 	bl	13c3b4 <get_rtt_syscall>
  13dde8:	e2504000 	subs	r4, r0, #0
  13ddec:	0a000016 	beq	13de4c <__mremap+0x98>
  13ddf0:	e58d6000 	str	r6, [sp]
  13ddf4:	e1a02005 	mov	r2, r5
  13ddf8:	e1a01008 	mov	r1, r8
  13ddfc:	e1a00007 	mov	r0, r7
  13de00:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  13de04:	e12fff34 	blx	r4
  13de08:	ebfff99e 	bl	13c488 <__syscall_ret>
  13de0c:	e1a03000 	mov	r3, r0
  13de10:	e1a00003 	mov	r0, r3
  13de14:	e28dd014 	add	sp, sp, #20
  13de18:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
  13de1c:	e28dd004 	add	sp, sp, #4
  13de20:	e12fff1e 	bx	lr
  13de24:	eb00137a 	bl	142c14 <__vm_wait>
  13de28:	e28d3030 	add	r3, sp, #48	; 0x30
  13de2c:	e58d300c 	str	r3, [sp, #12]
  13de30:	e59d6030 	ldr	r6, [sp, #48]	; 0x30
  13de34:	eaffffe9 	b	13dde0 <__mremap+0x2c>
  13de38:	ebffec27 	bl	138edc <__errno_location>
  13de3c:	e3a0200c 	mov	r2, #12
  13de40:	e3e03000 	mvn	r3, #0
  13de44:	e5802000 	str	r2, [r0]
  13de48:	eafffff0 	b	13de10 <__mremap+0x5c>
  13de4c:	e1a00004 	mov	r0, r4
  13de50:	eaffffec 	b	13de08 <__mremap+0x54>

0013de54 <dummy>:
  13de54:	e12fff1e 	bx	lr

0013de58 <__munmap>:
  13de58:	e92d4070 	push	{r4, r5, r6, lr}
  13de5c:	e1a04000 	mov	r4, r0
  13de60:	e1a05001 	mov	r5, r1
  13de64:	eb00136a 	bl	142c14 <__vm_wait>
  13de68:	e3a0005b 	mov	r0, #91	; 0x5b
  13de6c:	ebfff950 	bl	13c3b4 <get_rtt_syscall>
  13de70:	e2503000 	subs	r3, r0, #0
  13de74:	0a000004 	beq	13de8c <__munmap+0x34>
  13de78:	e1a01005 	mov	r1, r5
  13de7c:	e1a00004 	mov	r0, r4
  13de80:	e12fff33 	blx	r3
  13de84:	e8bd4070 	pop	{r4, r5, r6, lr}
  13de88:	eafff97e 	b	13c488 <__syscall_ret>
  13de8c:	e1a00003 	mov	r0, r3
  13de90:	eafffffb 	b	13de84 <__munmap+0x2c>

0013de94 <accept>:
  13de94:	e3a0c000 	mov	ip, #0
  13de98:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13de9c:	e24dd014 	sub	sp, sp, #20
  13dea0:	e1a03002 	mov	r3, r2
  13dea4:	e58dc008 	str	ip, [sp, #8]
  13dea8:	e1a02001 	mov	r2, r1
  13deac:	e58dc004 	str	ip, [sp, #4]
  13deb0:	e1a01000 	mov	r1, r0
  13deb4:	e58dc000 	str	ip, [sp]
  13deb8:	e59f000c 	ldr	r0, [pc, #12]	; 13decc <accept+0x38>
  13debc:	eb000fa3 	bl	141d50 <__syscall_cp>
  13dec0:	e28dd014 	add	sp, sp, #20
  13dec4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13dec8:	eafff96e 	b	13c488 <__syscall_ret>
  13decc:	0000011d 	.word	0x0000011d

0013ded0 <bind>:
  13ded0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13ded4:	e1a05000 	mov	r5, r0
  13ded8:	e24dd00c 	sub	sp, sp, #12
  13dedc:	e59f0040 	ldr	r0, [pc, #64]	; 13df24 <bind+0x54>
  13dee0:	e1a06001 	mov	r6, r1
  13dee4:	e1a07002 	mov	r7, r2
  13dee8:	ebfff931 	bl	13c3b4 <get_rtt_syscall>
  13deec:	e2504000 	subs	r4, r0, #0
  13def0:	0a000009 	beq	13df1c <bind+0x4c>
  13def4:	e3a03000 	mov	r3, #0
  13def8:	e1a02007 	mov	r2, r7
  13defc:	e1a01006 	mov	r1, r6
  13df00:	e1a00005 	mov	r0, r5
  13df04:	e58d3004 	str	r3, [sp, #4]
  13df08:	e58d3000 	str	r3, [sp]
  13df0c:	e12fff34 	blx	r4
  13df10:	e28dd00c 	add	sp, sp, #12
  13df14:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
  13df18:	eafff95a 	b	13c488 <__syscall_ret>
  13df1c:	e1a00004 	mov	r0, r4
  13df20:	eafffffa 	b	13df10 <bind+0x40>
  13df24:	0000011a 	.word	0x0000011a

0013df28 <connect>:
  13df28:	e3a0c000 	mov	ip, #0
  13df2c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13df30:	e24dd014 	sub	sp, sp, #20
  13df34:	e1a03002 	mov	r3, r2
  13df38:	e58dc008 	str	ip, [sp, #8]
  13df3c:	e1a02001 	mov	r2, r1
  13df40:	e58dc004 	str	ip, [sp, #4]
  13df44:	e1a01000 	mov	r1, r0
  13df48:	e58dc000 	str	ip, [sp]
  13df4c:	e59f000c 	ldr	r0, [pc, #12]	; 13df60 <connect+0x38>
  13df50:	eb000f7e 	bl	141d50 <__syscall_cp>
  13df54:	e28dd014 	add	sp, sp, #20
  13df58:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13df5c:	eafff949 	b	13c488 <__syscall_ret>
  13df60:	0000011b 	.word	0x0000011b

0013df64 <htonl>:
  13df64:	e0203860 	eor	r3, r0, r0, ror #16
  13df68:	e1a03423 	lsr	r3, r3, #8
  13df6c:	e3c33cff 	bic	r3, r3, #65280	; 0xff00
  13df70:	e0230460 	eor	r0, r3, r0, ror #8
  13df74:	e12fff1e 	bx	lr

0013df78 <htons>:
  13df78:	e1a03420 	lsr	r3, r0, #8
  13df7c:	e1830400 	orr	r0, r3, r0, lsl #8
  13df80:	e1a00800 	lsl	r0, r0, #16
  13df84:	e1a00820 	lsr	r0, r0, #16
  13df88:	e12fff1e 	bx	lr

0013df8c <listen>:
  13df8c:	e92d4070 	push	{r4, r5, r6, lr}
  13df90:	e1a05000 	mov	r5, r0
  13df94:	e24dd008 	sub	sp, sp, #8
  13df98:	e3a00f47 	mov	r0, #284	; 0x11c
  13df9c:	e1a06001 	mov	r6, r1
  13dfa0:	ebfff903 	bl	13c3b4 <get_rtt_syscall>
  13dfa4:	e2504000 	subs	r4, r0, #0
  13dfa8:	0a000009 	beq	13dfd4 <listen+0x48>
  13dfac:	e3a03000 	mov	r3, #0
  13dfb0:	e1a01006 	mov	r1, r6
  13dfb4:	e1a00005 	mov	r0, r5
  13dfb8:	e58d3004 	str	r3, [sp, #4]
  13dfbc:	e58d3000 	str	r3, [sp]
  13dfc0:	e1a02003 	mov	r2, r3
  13dfc4:	e12fff34 	blx	r4
  13dfc8:	e28dd008 	add	sp, sp, #8
  13dfcc:	e8bd4070 	pop	{r4, r5, r6, lr}
  13dfd0:	eafff92c 	b	13c488 <__syscall_ret>
  13dfd4:	e1a00004 	mov	r0, r4
  13dfd8:	eafffffa 	b	13dfc8 <listen+0x3c>

0013dfdc <setsockopt>:
  13dfdc:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  13dfe0:	e1a05000 	mov	r5, r0
  13dfe4:	e24dd00c 	sub	sp, sp, #12
  13dfe8:	e59f004c 	ldr	r0, [pc, #76]	; 13e03c <setsockopt+0x60>
  13dfec:	e1a06001 	mov	r6, r1
  13dff0:	e1a07002 	mov	r7, r2
  13dff4:	e1a08003 	mov	r8, r3
  13dff8:	e59d9028 	ldr	r9, [sp, #40]	; 0x28
  13dffc:	ebfff8ec 	bl	13c3b4 <get_rtt_syscall>
  13e000:	e2504000 	subs	r4, r0, #0
  13e004:	0a00000a 	beq	13e034 <setsockopt+0x58>
  13e008:	e3a0c000 	mov	ip, #0
  13e00c:	e58d9000 	str	r9, [sp]
  13e010:	e1a03008 	mov	r3, r8
  13e014:	e1a02007 	mov	r2, r7
  13e018:	e1a01006 	mov	r1, r6
  13e01c:	e1a00005 	mov	r0, r5
  13e020:	e58dc004 	str	ip, [sp, #4]
  13e024:	e12fff34 	blx	r4
  13e028:	e28dd00c 	add	sp, sp, #12
  13e02c:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
  13e030:	eafff914 	b	13c488 <__syscall_ret>
  13e034:	e1a00004 	mov	r0, r4
  13e038:	eafffffa 	b	13e028 <setsockopt+0x4c>
  13e03c:	00000126 	.word	0x00000126

0013e040 <socket>:
  13e040:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13e044:	e1a06000 	mov	r6, r0
  13e048:	e24dd00c 	sub	sp, sp, #12
  13e04c:	e59f0118 	ldr	r0, [pc, #280]	; 13e16c <socket+0x12c>
  13e050:	e1a05001 	mov	r5, r1
  13e054:	e1a07002 	mov	r7, r2
  13e058:	ebfff8d5 	bl	13c3b4 <get_rtt_syscall>
  13e05c:	e2504000 	subs	r4, r0, #0
  13e060:	0a000034 	beq	13e138 <socket+0xf8>
  13e064:	e3a03000 	mov	r3, #0
  13e068:	e1a02007 	mov	r2, r7
  13e06c:	e58d3004 	str	r3, [sp, #4]
  13e070:	e58d3000 	str	r3, [sp]
  13e074:	e1a01005 	mov	r1, r5
  13e078:	e1a00006 	mov	r0, r6
  13e07c:	e12fff34 	blx	r4
  13e080:	ebfff900 	bl	13c488 <__syscall_ret>
  13e084:	e2504000 	subs	r4, r0, #0
  13e088:	ba000002 	blt	13e098 <socket+0x58>
  13e08c:	e1a00004 	mov	r0, r4
  13e090:	e28dd00c 	add	sp, sp, #12
  13e094:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  13e098:	ebffeb8f 	bl	138edc <__errno_location>
  13e09c:	e5903000 	ldr	r3, [r0]
  13e0a0:	e3530016 	cmp	r3, #22
  13e0a4:	1a00001e 	bne	13e124 <socket+0xe4>
  13e0a8:	e59f30c0 	ldr	r3, [pc, #192]	; 13e170 <socket+0x130>
  13e0ac:	e1150003 	tst	r5, r3
  13e0b0:	0afffff5 	beq	13e08c <socket+0x4c>
  13e0b4:	e59f00b0 	ldr	r0, [pc, #176]	; 13e16c <socket+0x12c>
  13e0b8:	ebfff8bd 	bl	13c3b4 <get_rtt_syscall>
  13e0bc:	e3c51702 	bic	r1, r5, #524288	; 0x80000
  13e0c0:	e2504000 	subs	r4, r0, #0
  13e0c4:	e3c11b02 	bic	r1, r1, #2048	; 0x800
  13e0c8:	0a000025 	beq	13e164 <socket+0x124>
  13e0cc:	e3a03000 	mov	r3, #0
  13e0d0:	e1a02007 	mov	r2, r7
  13e0d4:	e1a00006 	mov	r0, r6
  13e0d8:	e58d3004 	str	r3, [sp, #4]
  13e0dc:	e58d3000 	str	r3, [sp]
  13e0e0:	e12fff34 	blx	r4
  13e0e4:	ebfff8e7 	bl	13c488 <__syscall_ret>
  13e0e8:	e2504000 	subs	r4, r0, #0
  13e0ec:	baffffe6 	blt	13e08c <socket+0x4c>
  13e0f0:	e3150702 	tst	r5, #524288	; 0x80000
  13e0f4:	1a000011 	bne	13e140 <socket+0x100>
  13e0f8:	e3150b02 	tst	r5, #2048	; 0x800
  13e0fc:	0affffe2 	beq	13e08c <socket+0x4c>
  13e100:	e3a000dd 	mov	r0, #221	; 0xdd
  13e104:	ebfff8aa 	bl	13c3b4 <get_rtt_syscall>
  13e108:	e2503000 	subs	r3, r0, #0
  13e10c:	0affffde 	beq	13e08c <socket+0x4c>
  13e110:	e3a02b02 	mov	r2, #2048	; 0x800
  13e114:	e3a01004 	mov	r1, #4
  13e118:	e1a00004 	mov	r0, r4
  13e11c:	e12fff33 	blx	r3
  13e120:	eaffffd9 	b	13e08c <socket+0x4c>
  13e124:	ebffeb6c 	bl	138edc <__errno_location>
  13e128:	e5903000 	ldr	r3, [r0]
  13e12c:	e353005d 	cmp	r3, #93	; 0x5d
  13e130:	1affffd5 	bne	13e08c <socket+0x4c>
  13e134:	eaffffdb 	b	13e0a8 <socket+0x68>
  13e138:	e1a00004 	mov	r0, r4
  13e13c:	eaffffcf 	b	13e080 <socket+0x40>
  13e140:	e3a000dd 	mov	r0, #221	; 0xdd
  13e144:	ebfff89a 	bl	13c3b4 <get_rtt_syscall>
  13e148:	e2503000 	subs	r3, r0, #0
  13e14c:	0affffe9 	beq	13e0f8 <socket+0xb8>
  13e150:	e3a02001 	mov	r2, #1
  13e154:	e3a01002 	mov	r1, #2
  13e158:	e1a00004 	mov	r0, r4
  13e15c:	e12fff33 	blx	r3
  13e160:	eaffffe4 	b	13e0f8 <socket+0xb8>
  13e164:	e1a00004 	mov	r0, r4
  13e168:	eaffffdd 	b	13e0e4 <socket+0xa4>
  13e16c:	00000119 	.word	0x00000119
  13e170:	00080800 	.word	0x00080800

0013e174 <srand>:
  13e174:	e3a02000 	mov	r2, #0
  13e178:	e59f3008 	ldr	r3, [pc, #8]	; 13e188 <srand+0x14>
  13e17c:	e2400001 	sub	r0, r0, #1
  13e180:	e8830005 	stm	r3, {r0, r2}
  13e184:	e12fff1e 	bx	lr
  13e188:	0014f050 	.word	0x0014f050

0013e18c <rand>:
  13e18c:	e59f1034 	ldr	r1, [pc, #52]	; 13e1c8 <rand+0x3c>
  13e190:	e92d4800 	push	{fp, lr}
  13e194:	e59f3030 	ldr	r3, [pc, #48]	; 13e1cc <rand+0x40>
  13e198:	e591e000 	ldr	lr, [r1]
  13e19c:	e5912004 	ldr	r2, [r1, #4]
  13e1a0:	e00b039e 	mul	fp, lr, r3
  13e1a4:	e59fc024 	ldr	ip, [pc, #36]	; 13e1d0 <rand+0x44>
  13e1a8:	e020b29c 	mla	r0, ip, r2, fp
  13e1ac:	e0832c9e 	umull	r2, r3, lr, ip
  13e1b0:	e0803003 	add	r3, r0, r3
  13e1b4:	e292b001 	adds	fp, r2, #1
  13e1b8:	e2a3c000 	adc	ip, r3, #0
  13e1bc:	e8811800 	stm	r1, {fp, ip}
  13e1c0:	e1a000ac 	lsr	r0, ip, #1
  13e1c4:	e8bd8800 	pop	{fp, pc}
  13e1c8:	0014f050 	.word	0x0014f050
  13e1cc:	5851f42d 	.word	0x5851f42d
  13e1d0:	4c957f2d 	.word	0x4c957f2d

0013e1d4 <select>:
  13e1d4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13e1d8:	e3a0e000 	mov	lr, #0
  13e1dc:	e24dd014 	sub	sp, sp, #20
  13e1e0:	e59dc018 	ldr	ip, [sp, #24]
  13e1e4:	e58d3000 	str	r3, [sp]
  13e1e8:	e58de008 	str	lr, [sp, #8]
  13e1ec:	e1a03002 	mov	r3, r2
  13e1f0:	e58dc004 	str	ip, [sp, #4]
  13e1f4:	e1a02001 	mov	r2, r1
  13e1f8:	e1a01000 	mov	r1, r0
  13e1fc:	e3a0008e 	mov	r0, #142	; 0x8e
  13e200:	eb000ed2 	bl	141d50 <__syscall_cp>
  13e204:	e28dd014 	add	sp, sp, #20
  13e208:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13e20c:	eafff89d 	b	13c488 <__syscall_ret>

0013e210 <raise>:
  13e210:	e92d4030 	push	{r4, r5, lr}
  13e214:	e24dd084 	sub	sp, sp, #132	; 0x84
  13e218:	e1a05000 	mov	r5, r0
  13e21c:	e1a0000d 	mov	r0, sp
  13e220:	eb001496 	bl	143480 <__block_app_sigs>
  13e224:	e59f3048 	ldr	r3, [pc, #72]	; 13e274 <raise+0x64>
  13e228:	e5930000 	ldr	r0, [r3]
  13e22c:	e12fff30 	blx	r0
  13e230:	e510405c 	ldr	r4, [r0, #-92]	; 0xffffffa4
  13e234:	e3a000ee 	mov	r0, #238	; 0xee
  13e238:	ebfff85d 	bl	13c3b4 <get_rtt_syscall>
  13e23c:	e2503000 	subs	r3, r0, #0
  13e240:	0a000009 	beq	13e26c <raise+0x5c>
  13e244:	e1a01005 	mov	r1, r5
  13e248:	e1a00004 	mov	r0, r4
  13e24c:	e12fff33 	blx	r3
  13e250:	ebfff88c 	bl	13c488 <__syscall_ret>
  13e254:	e1a04000 	mov	r4, r0
  13e258:	e1a0000d 	mov	r0, sp
  13e25c:	eb001495 	bl	1434b8 <__restore_sigs>
  13e260:	e1a00004 	mov	r0, r4
  13e264:	e28dd084 	add	sp, sp, #132	; 0x84
  13e268:	e8bd8030 	pop	{r4, r5, pc}
  13e26c:	e1a00003 	mov	r0, r3
  13e270:	eafffff6 	b	13e250 <raise+0x40>
  13e274:	0014d3dc 	.word	0x0014d3dc

0013e278 <fflush>:
  13e278:	e92d4070 	push	{r4, r5, r6, lr}
  13e27c:	e2504000 	subs	r4, r0, #0
  13e280:	e24dd008 	sub	sp, sp, #8
  13e284:	0a000027 	beq	13e328 <fflush+0xb0>
  13e288:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
  13e28c:	e3530000 	cmp	r3, #0
  13e290:	b3a05000 	movlt	r5, #0
  13e294:	aa000020 	bge	13e31c <fflush+0xa4>
  13e298:	e5942014 	ldr	r2, [r4, #20]
  13e29c:	e594301c 	ldr	r3, [r4, #28]
  13e2a0:	e1520003 	cmp	r2, r3
  13e2a4:	0a000007 	beq	13e2c8 <fflush+0x50>
  13e2a8:	e3a02000 	mov	r2, #0
  13e2ac:	e5943024 	ldr	r3, [r4, #36]	; 0x24
  13e2b0:	e1a01002 	mov	r1, r2
  13e2b4:	e1a00004 	mov	r0, r4
  13e2b8:	e12fff33 	blx	r3
  13e2bc:	e5943014 	ldr	r3, [r4, #20]
  13e2c0:	e3530000 	cmp	r3, #0
  13e2c4:	0a00003d 	beq	13e3c0 <fflush+0x148>
  13e2c8:	e994000c 	ldmib	r4, {r2, r3}
  13e2cc:	e1520003 	cmp	r2, r3
  13e2d0:	0a000006 	beq	13e2f0 <fflush+0x78>
  13e2d4:	e3a01001 	mov	r1, #1
  13e2d8:	e0422003 	sub	r2, r2, r3
  13e2dc:	e58d1000 	str	r1, [sp]
  13e2e0:	e5941028 	ldr	r1, [r4, #40]	; 0x28
  13e2e4:	e1a03fc2 	asr	r3, r2, #31
  13e2e8:	e1a00004 	mov	r0, r4
  13e2ec:	e12fff31 	blx	r1
  13e2f0:	e3a06000 	mov	r6, #0
  13e2f4:	e1550006 	cmp	r5, r6
  13e2f8:	e5846010 	str	r6, [r4, #16]
  13e2fc:	e584601c 	str	r6, [r4, #28]
  13e300:	e5846014 	str	r6, [r4, #20]
  13e304:	e5846008 	str	r6, [r4, #8]
  13e308:	e5846004 	str	r6, [r4, #4]
  13e30c:	1a000032 	bne	13e3dc <fflush+0x164>
  13e310:	e1a00005 	mov	r0, r5
  13e314:	e28dd008 	add	sp, sp, #8
  13e318:	e8bd8070 	pop	{r4, r5, r6, pc}
  13e31c:	eb001472 	bl	1434ec <__lockfile>
  13e320:	e1a05000 	mov	r5, r0
  13e324:	eaffffdb 	b	13e298 <fflush+0x20>
  13e328:	e59f3104 	ldr	r3, [pc, #260]	; 13e434 <fflush+0x1bc>
  13e32c:	e5935000 	ldr	r5, [r3]
  13e330:	e3550000 	cmp	r5, #0
  13e334:	1a00003a 	bne	13e424 <fflush+0x1ac>
  13e338:	e59f30f8 	ldr	r3, [pc, #248]	; 13e438 <fflush+0x1c0>
  13e33c:	e5932000 	ldr	r2, [r3]
  13e340:	e3520000 	cmp	r2, #0
  13e344:	1a000032 	bne	13e414 <fflush+0x19c>
  13e348:	eb000047 	bl	13e46c <__ofl_lock>
  13e34c:	e5904000 	ldr	r4, [r0]
  13e350:	e3540000 	cmp	r4, #0
  13e354:	0a000009 	beq	13e380 <fflush+0x108>
  13e358:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
  13e35c:	e3530000 	cmp	r3, #0
  13e360:	aa00000a 	bge	13e390 <fflush+0x118>
  13e364:	e5942014 	ldr	r2, [r4, #20]
  13e368:	e594301c 	ldr	r3, [r4, #28]
  13e36c:	e1520003 	cmp	r2, r3
  13e370:	1a00001f 	bne	13e3f4 <fflush+0x17c>
  13e374:	e5944038 	ldr	r4, [r4, #56]	; 0x38
  13e378:	e3540000 	cmp	r4, #0
  13e37c:	1afffff5 	bne	13e358 <fflush+0xe0>
  13e380:	eb000040 	bl	13e488 <__ofl_unlock>
  13e384:	e1a00005 	mov	r0, r5
  13e388:	e28dd008 	add	sp, sp, #8
  13e38c:	e8bd8070 	pop	{r4, r5, r6, pc}
  13e390:	e1a00004 	mov	r0, r4
  13e394:	eb001454 	bl	1434ec <__lockfile>
  13e398:	e5942014 	ldr	r2, [r4, #20]
  13e39c:	e594301c 	ldr	r3, [r4, #28]
  13e3a0:	e1a06000 	mov	r6, r0
  13e3a4:	e1520003 	cmp	r2, r3
  13e3a8:	1a000015 	bne	13e404 <fflush+0x18c>
  13e3ac:	e3560000 	cmp	r6, #0
  13e3b0:	0affffef 	beq	13e374 <fflush+0xfc>
  13e3b4:	e1a00004 	mov	r0, r4
  13e3b8:	eb001498 	bl	143620 <__unlockfile>
  13e3bc:	eaffffec 	b	13e374 <fflush+0xfc>
  13e3c0:	e3550000 	cmp	r5, #0
  13e3c4:	03e05000 	mvneq	r5, #0
  13e3c8:	0affffd0 	beq	13e310 <fflush+0x98>
  13e3cc:	e1a00004 	mov	r0, r4
  13e3d0:	eb001492 	bl	143620 <__unlockfile>
  13e3d4:	e3e05000 	mvn	r5, #0
  13e3d8:	eaffffcc 	b	13e310 <fflush+0x98>
  13e3dc:	e1a05006 	mov	r5, r6
  13e3e0:	e1a00004 	mov	r0, r4
  13e3e4:	eb00148d 	bl	143620 <__unlockfile>
  13e3e8:	e1a00005 	mov	r0, r5
  13e3ec:	e28dd008 	add	sp, sp, #8
  13e3f0:	e8bd8070 	pop	{r4, r5, r6, pc}
  13e3f4:	e1a00004 	mov	r0, r4
  13e3f8:	ebffff9e 	bl	13e278 <fflush>
  13e3fc:	e1855000 	orr	r5, r5, r0
  13e400:	eaffffdb 	b	13e374 <fflush+0xfc>
  13e404:	e1a00004 	mov	r0, r4
  13e408:	ebffff9a 	bl	13e278 <fflush>
  13e40c:	e1855000 	orr	r5, r5, r0
  13e410:	eaffffe5 	b	13e3ac <fflush+0x134>
  13e414:	e5930000 	ldr	r0, [r3]
  13e418:	ebffff96 	bl	13e278 <fflush>
  13e41c:	e1855000 	orr	r5, r5, r0
  13e420:	eaffffc8 	b	13e348 <fflush+0xd0>
  13e424:	e5930000 	ldr	r0, [r3]
  13e428:	ebffff92 	bl	13e278 <fflush>
  13e42c:	e1a05000 	mov	r5, r0
  13e430:	eaffffc0 	b	13e338 <fflush+0xc0>
  13e434:	0014d3d0 	.word	0x0014d3d0
  13e438:	0014d338 	.word	0x0014d338

0013e43c <fprintf>:
  13e43c:	e92d000e 	push	{r1, r2, r3}
  13e440:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13e444:	e24dd008 	sub	sp, sp, #8
  13e448:	e28d3010 	add	r3, sp, #16
  13e44c:	e1a02003 	mov	r2, r3
  13e450:	e59d100c 	ldr	r1, [sp, #12]
  13e454:	e58d3004 	str	r3, [sp, #4]
  13e458:	eb000959 	bl	1409c4 <vfprintf>
  13e45c:	e28dd008 	add	sp, sp, #8
  13e460:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13e464:	e28dd00c 	add	sp, sp, #12
  13e468:	e12fff1e 	bx	lr

0013e46c <__ofl_lock>:
  13e46c:	e92d4010 	push	{r4, lr}
  13e470:	e59f0008 	ldr	r0, [pc, #8]	; 13e480 <__ofl_lock+0x14>
  13e474:	eb000db3 	bl	141b48 <__lock>
  13e478:	e59f0004 	ldr	r0, [pc, #4]	; 13e484 <__ofl_lock+0x18>
  13e47c:	e8bd8010 	pop	{r4, pc}
  13e480:	0014f060 	.word	0x0014f060
  13e484:	0014f05c 	.word	0x0014f05c

0013e488 <__ofl_unlock>:
  13e488:	e59f0000 	ldr	r0, [pc]	; 13e490 <__ofl_unlock+0x8>
  13e48c:	ea000e05 	b	141ca8 <__unlock>
  13e490:	0014f060 	.word	0x0014f060

0013e494 <perror>:
  13e494:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  13e498:	e1a05000 	mov	r5, r0
  13e49c:	ebffea8e 	bl	138edc <__errno_location>
  13e4a0:	e5900000 	ldr	r0, [r0]
  13e4a4:	ebffeaae 	bl	138f64 <strerror>
  13e4a8:	e59f4104 	ldr	r4, [pc, #260]	; 13e5b4 <perror+0x120>
  13e4ac:	e1a06000 	mov	r6, r0
  13e4b0:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
  13e4b4:	e3530000 	cmp	r3, #0
  13e4b8:	aa000026 	bge	13e558 <perror+0xc4>
  13e4bc:	e3550000 	cmp	r5, #0
  13e4c0:	e5947088 	ldr	r7, [r4, #136]	; 0x88
  13e4c4:	e5948048 	ldr	r8, [r4, #72]	; 0x48
  13e4c8:	13a09000 	movne	r9, #0
  13e4cc:	0a00002c 	beq	13e584 <perror+0xf0>
  13e4d0:	e5d53000 	ldrb	r3, [r5]
  13e4d4:	e3530000 	cmp	r3, #0
  13e4d8:	1a000010 	bne	13e520 <perror+0x8c>
  13e4dc:	e1a00006 	mov	r0, r6
  13e4e0:	eb000bf4 	bl	1414b8 <strlen>
  13e4e4:	e59f30c8 	ldr	r3, [pc, #200]	; 13e5b4 <perror+0x120>
  13e4e8:	e1a01000 	mov	r1, r0
  13e4ec:	e3a02001 	mov	r2, #1
  13e4f0:	e1a00006 	mov	r0, r6
  13e4f4:	eb0015fa 	bl	143ce4 <fwrite>
  13e4f8:	e59f10b4 	ldr	r1, [pc, #180]	; 13e5b4 <perror+0x120>
  13e4fc:	e3a0000a 	mov	r0, #10
  13e500:	eb001578 	bl	143ae8 <fputc>
  13e504:	e3590000 	cmp	r9, #0
  13e508:	e5848048 	str	r8, [r4, #72]	; 0x48
  13e50c:	e5847088 	str	r7, [r4, #136]	; 0x88
  13e510:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
  13e514:	e59f0098 	ldr	r0, [pc, #152]	; 13e5b4 <perror+0x120>
  13e518:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
  13e51c:	ea00143f 	b	143620 <__unlockfile>
  13e520:	e1a00005 	mov	r0, r5
  13e524:	eb000be3 	bl	1414b8 <strlen>
  13e528:	e59f3084 	ldr	r3, [pc, #132]	; 13e5b4 <perror+0x120>
  13e52c:	e1a01000 	mov	r1, r0
  13e530:	e3a02001 	mov	r2, #1
  13e534:	e1a00005 	mov	r0, r5
  13e538:	eb0015e9 	bl	143ce4 <fwrite>
  13e53c:	e59f1070 	ldr	r1, [pc, #112]	; 13e5b4 <perror+0x120>
  13e540:	e3a0003a 	mov	r0, #58	; 0x3a
  13e544:	eb001567 	bl	143ae8 <fputc>
  13e548:	e59f1064 	ldr	r1, [pc, #100]	; 13e5b4 <perror+0x120>
  13e54c:	e3a00020 	mov	r0, #32
  13e550:	eb001564 	bl	143ae8 <fputc>
  13e554:	eaffffe0 	b	13e4dc <perror+0x48>
  13e558:	e1a00004 	mov	r0, r4
  13e55c:	eb0013e2 	bl	1434ec <__lockfile>
  13e560:	e3550000 	cmp	r5, #0
  13e564:	e1a09000 	mov	r9, r0
  13e568:	e5947088 	ldr	r7, [r4, #136]	; 0x88
  13e56c:	e5948048 	ldr	r8, [r4, #72]	; 0x48
  13e570:	0affffd9 	beq	13e4dc <perror+0x48>
  13e574:	e5d53000 	ldrb	r3, [r5]
  13e578:	e3530000 	cmp	r3, #0
  13e57c:	0affffd6 	beq	13e4dc <perror+0x48>
  13e580:	eaffffe6 	b	13e520 <perror+0x8c>
  13e584:	eb000bcb 	bl	1414b8 <strlen>
  13e588:	e1a03004 	mov	r3, r4
  13e58c:	e1a01000 	mov	r1, r0
  13e590:	e3a02001 	mov	r2, #1
  13e594:	e1a00006 	mov	r0, r6
  13e598:	eb0015d1 	bl	143ce4 <fwrite>
  13e59c:	e1a01004 	mov	r1, r4
  13e5a0:	e3a0000a 	mov	r0, #10
  13e5a4:	eb00154f 	bl	143ae8 <fputc>
  13e5a8:	e5848048 	str	r8, [r4, #72]	; 0x48
  13e5ac:	e5847088 	str	r7, [r4, #136]	; 0x88
  13e5b0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  13e5b4:	0014d2a8 	.word	0x0014d2a8

0013e5b8 <printf>:
  13e5b8:	e92d000f 	push	{r0, r1, r2, r3}
  13e5bc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13e5c0:	e24dd00c 	sub	sp, sp, #12
  13e5c4:	e28d3014 	add	r3, sp, #20
  13e5c8:	e1a02003 	mov	r2, r3
  13e5cc:	e59d1010 	ldr	r1, [sp, #16]
  13e5d0:	e59f0014 	ldr	r0, [pc, #20]	; 13e5ec <printf+0x34>
  13e5d4:	e58d3004 	str	r3, [sp, #4]
  13e5d8:	eb0008f9 	bl	1409c4 <vfprintf>
  13e5dc:	e28dd00c 	add	sp, sp, #12
  13e5e0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13e5e4:	e28dd010 	add	sp, sp, #16
  13e5e8:	e12fff1e 	bx	lr
  13e5ec:	0014d340 	.word	0x0014d340

0013e5f0 <puts>:
  13e5f0:	e92d4070 	push	{r4, r5, r6, lr}
  13e5f4:	e59f40b0 	ldr	r4, [pc, #176]	; 13e6ac <puts+0xbc>
  13e5f8:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
  13e5fc:	e3530000 	cmp	r3, #0
  13e600:	aa00001b 	bge	13e674 <puts+0x84>
  13e604:	e1a01004 	mov	r1, r4
  13e608:	eb001569 	bl	143bb4 <fputs>
  13e60c:	e3500000 	cmp	r0, #0
  13e610:	a3a05000 	movge	r5, #0
  13e614:	ba000021 	blt	13e6a0 <puts+0xb0>
  13e618:	e5943050 	ldr	r3, [r4, #80]	; 0x50
  13e61c:	e353000a 	cmp	r3, #10
  13e620:	0a00000e 	beq	13e660 <puts+0x70>
  13e624:	e5943014 	ldr	r3, [r4, #20]
  13e628:	e5942010 	ldr	r2, [r4, #16]
  13e62c:	e1530002 	cmp	r3, r2
  13e630:	0a00000a 	beq	13e660 <puts+0x70>
  13e634:	e3a0200a 	mov	r2, #10
  13e638:	e2831001 	add	r1, r3, #1
  13e63c:	e5841014 	str	r1, [r4, #20]
  13e640:	e3a04000 	mov	r4, #0
  13e644:	e5c32000 	strb	r2, [r3]
  13e648:	e3550000 	cmp	r5, #0
  13e64c:	0a000001 	beq	13e658 <puts+0x68>
  13e650:	e59f0054 	ldr	r0, [pc, #84]	; 13e6ac <puts+0xbc>
  13e654:	eb0013f1 	bl	143620 <__unlockfile>
  13e658:	e1a00004 	mov	r0, r4
  13e65c:	e8bd8070 	pop	{r4, r5, r6, pc}
  13e660:	e3a0100a 	mov	r1, #10
  13e664:	e59f0040 	ldr	r0, [pc, #64]	; 13e6ac <puts+0xbc>
  13e668:	eb001412 	bl	1436b8 <__overflow>
  13e66c:	e1a04fc0 	asr	r4, r0, #31
  13e670:	eafffff4 	b	13e648 <puts+0x58>
  13e674:	e1a06000 	mov	r6, r0
  13e678:	e1a00004 	mov	r0, r4
  13e67c:	eb00139a 	bl	1434ec <__lockfile>
  13e680:	e1a01004 	mov	r1, r4
  13e684:	e1a05000 	mov	r5, r0
  13e688:	e1a00006 	mov	r0, r6
  13e68c:	eb001548 	bl	143bb4 <fputs>
  13e690:	e3500000 	cmp	r0, #0
  13e694:	b3e04000 	mvnlt	r4, #0
  13e698:	aaffffde 	bge	13e618 <puts+0x28>
  13e69c:	eaffffe9 	b	13e648 <puts+0x58>
  13e6a0:	e3e04000 	mvn	r4, #0
  13e6a4:	e1a00004 	mov	r0, r4
  13e6a8:	e8bd8070 	pop	{r4, r5, r6, pc}
  13e6ac:	0014d340 	.word	0x0014d340

0013e6b0 <pop_arg>:
  13e6b0:	e2411009 	sub	r1, r1, #9
  13e6b4:	e92d0030 	push	{r4, r5}
  13e6b8:	e3510011 	cmp	r1, #17
  13e6bc:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
  13e6c0:	ea000018 	b	13e728 <pop_arg+0x78>
  13e6c4:	0013e7f0 	.word	0x0013e7f0
  13e6c8:	0013e754 	.word	0x0013e754
  13e6cc:	0013e774 	.word	0x0013e774
  13e6d0:	0013e730 	.word	0x0013e730
  13e6d4:	0013e754 	.word	0x0013e754
  13e6d8:	0013e774 	.word	0x0013e774
  13e6dc:	0013e828 	.word	0x0013e828
  13e6e0:	0013e798 	.word	0x0013e798
  13e6e4:	0013e7b8 	.word	0x0013e7b8
  13e6e8:	0013e7d4 	.word	0x0013e7d4
  13e6ec:	0013e730 	.word	0x0013e730
  13e6f0:	0013e774 	.word	0x0013e774
  13e6f4:	0013e730 	.word	0x0013e730
  13e6f8:	0013e730 	.word	0x0013e730
  13e6fc:	0013e754 	.word	0x0013e754
  13e700:	0013e808 	.word	0x0013e808
  13e704:	0013e70c 	.word	0x0013e70c
  13e708:	0013e70c 	.word	0x0013e70c
  13e70c:	e5923000 	ldr	r3, [r2]
  13e710:	e2833007 	add	r3, r3, #7
  13e714:	e3c33007 	bic	r3, r3, #7
  13e718:	e2831008 	add	r1, r3, #8
  13e71c:	e5821000 	str	r1, [r2]
  13e720:	e893000c 	ldm	r3, {r2, r3}
  13e724:	e880000c 	stm	r0, {r2, r3}
  13e728:	e8bd0030 	pop	{r4, r5}
  13e72c:	e12fff1e 	bx	lr
  13e730:	e5923000 	ldr	r3, [r2]
  13e734:	e8bd0030 	pop	{r4, r5}
  13e738:	e2833007 	add	r3, r3, #7
  13e73c:	e3c33007 	bic	r3, r3, #7
  13e740:	e2831008 	add	r1, r3, #8
  13e744:	e5821000 	str	r1, [r2]
  13e748:	e893000c 	ldm	r3, {r2, r3}
  13e74c:	e880000c 	stm	r0, {r2, r3}
  13e750:	e12fff1e 	bx	lr
  13e754:	e5923000 	ldr	r3, [r2]
  13e758:	e5934000 	ldr	r4, [r3]
  13e75c:	e2833004 	add	r3, r3, #4
  13e760:	e1a05fc4 	asr	r5, r4, #31
  13e764:	e5823000 	str	r3, [r2]
  13e768:	e8800030 	stm	r0, {r4, r5}
  13e76c:	e8bd0030 	pop	{r4, r5}
  13e770:	e12fff1e 	bx	lr
  13e774:	e3a01000 	mov	r1, #0
  13e778:	e8bd0030 	pop	{r4, r5}
  13e77c:	e5923000 	ldr	r3, [r2]
  13e780:	e593c000 	ldr	ip, [r3]
  13e784:	e2833004 	add	r3, r3, #4
  13e788:	e5823000 	str	r3, [r2]
  13e78c:	e580c000 	str	ip, [r0]
  13e790:	e5801004 	str	r1, [r0, #4]
  13e794:	e12fff1e 	bx	lr
  13e798:	e3a01000 	mov	r1, #0
  13e79c:	e5923000 	ldr	r3, [r2]
  13e7a0:	e1d3c0b0 	ldrh	ip, [r3]
  13e7a4:	e2833004 	add	r3, r3, #4
  13e7a8:	e5823000 	str	r3, [r2]
  13e7ac:	e580c000 	str	ip, [r0]
  13e7b0:	e5801004 	str	r1, [r0, #4]
  13e7b4:	eaffffdb 	b	13e728 <pop_arg+0x78>
  13e7b8:	e5923000 	ldr	r3, [r2]
  13e7bc:	e1d340d0 	ldrsb	r4, [r3]
  13e7c0:	e2833004 	add	r3, r3, #4
  13e7c4:	e1a05fc4 	asr	r5, r4, #31
  13e7c8:	e5823000 	str	r3, [r2]
  13e7cc:	e8800030 	stm	r0, {r4, r5}
  13e7d0:	eaffffd4 	b	13e728 <pop_arg+0x78>
  13e7d4:	e3a05000 	mov	r5, #0
  13e7d8:	e5923000 	ldr	r3, [r2]
  13e7dc:	e5d34000 	ldrb	r4, [r3]
  13e7e0:	e2833004 	add	r3, r3, #4
  13e7e4:	e5823000 	str	r3, [r2]
  13e7e8:	e8800030 	stm	r0, {r4, r5}
  13e7ec:	eaffffcd 	b	13e728 <pop_arg+0x78>
  13e7f0:	e5923000 	ldr	r3, [r2]
  13e7f4:	e2831004 	add	r1, r3, #4
  13e7f8:	e5821000 	str	r1, [r2]
  13e7fc:	e5933000 	ldr	r3, [r3]
  13e800:	e5803000 	str	r3, [r0]
  13e804:	eaffffc7 	b	13e728 <pop_arg+0x78>
  13e808:	e3a01000 	mov	r1, #0
  13e80c:	e5923000 	ldr	r3, [r2]
  13e810:	e283c004 	add	ip, r3, #4
  13e814:	e582c000 	str	ip, [r2]
  13e818:	e5933000 	ldr	r3, [r3]
  13e81c:	e5801004 	str	r1, [r0, #4]
  13e820:	e5803000 	str	r3, [r0]
  13e824:	eaffffbf 	b	13e728 <pop_arg+0x78>
  13e828:	e5923000 	ldr	r3, [r2]
  13e82c:	e1d340f0 	ldrsh	r4, [r3]
  13e830:	e2833004 	add	r3, r3, #4
  13e834:	e1a05fc4 	asr	r5, r4, #31
  13e838:	e5823000 	str	r3, [r2]
  13e83c:	e8800030 	stm	r0, {r4, r5}
  13e840:	eaffffb8 	b	13e728 <pop_arg+0x78>

0013e844 <pad.part.0>:
  13e844:	e92d4070 	push	{r4, r5, r6, lr}
  13e848:	e0425003 	sub	r5, r2, r3
  13e84c:	e3550c01 	cmp	r5, #256	; 0x100
  13e850:	e24ddc01 	sub	sp, sp, #256	; 0x100
  13e854:	31a02005 	movcc	r2, r5
  13e858:	23a02c01 	movcs	r2, #256	; 0x100
  13e85c:	e1a06000 	mov	r6, r0
  13e860:	e1a0000d 	mov	r0, sp
  13e864:	eb000a82 	bl	141274 <memset>
  13e868:	e35500ff 	cmp	r5, #255	; 0xff
  13e86c:	9a00001b 	bls	13e8e0 <pad.part.0+0x9c>
  13e870:	e5962000 	ldr	r2, [r6]
  13e874:	e1a04005 	mov	r4, r5
  13e878:	e2022020 	and	r2, r2, #32
  13e87c:	ea000001 	b	13e888 <pad.part.0+0x44>
  13e880:	e35400ff 	cmp	r4, #255	; 0xff
  13e884:	9a00000c 	bls	13e8bc <pad.part.0+0x78>
  13e888:	e3520000 	cmp	r2, #0
  13e88c:	e2444c01 	sub	r4, r4, #256	; 0x100
  13e890:	e1a01002 	mov	r1, r2
  13e894:	1afffff9 	bne	13e880 <pad.part.0+0x3c>
  13e898:	e1a02006 	mov	r2, r6
  13e89c:	e3a01c01 	mov	r1, #256	; 0x100
  13e8a0:	e1a0000d 	mov	r0, sp
  13e8a4:	eb0014cf 	bl	143be8 <__fwritex>
  13e8a8:	e5962000 	ldr	r2, [r6]
  13e8ac:	e35400ff 	cmp	r4, #255	; 0xff
  13e8b0:	e2022020 	and	r2, r2, #32
  13e8b4:	e1a01002 	mov	r1, r2
  13e8b8:	8afffff2 	bhi	13e888 <pad.part.0+0x44>
  13e8bc:	e20550ff 	and	r5, r5, #255	; 0xff
  13e8c0:	e3510000 	cmp	r1, #0
  13e8c4:	1a000003 	bne	13e8d8 <pad.part.0+0x94>
  13e8c8:	e1a02006 	mov	r2, r6
  13e8cc:	e1a01005 	mov	r1, r5
  13e8d0:	e1a0000d 	mov	r0, sp
  13e8d4:	eb0014c3 	bl	143be8 <__fwritex>
  13e8d8:	e28ddc01 	add	sp, sp, #256	; 0x100
  13e8dc:	e8bd8070 	pop	{r4, r5, r6, pc}
  13e8e0:	e5961000 	ldr	r1, [r6]
  13e8e4:	e2011020 	and	r1, r1, #32
  13e8e8:	eafffff4 	b	13e8c0 <pad.part.0+0x7c>
  13e8ec:	00000000 	andeq	r0, r0, r0

0013e8f0 <printf_core>:
  13e8f0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13e8f4:	e3a0a000 	mov	sl, #0
  13e8f8:	e1a0b001 	mov	fp, r1
  13e8fc:	e24ddfb3 	sub	sp, sp, #716	; 0x2cc
  13e900:	e58d0004 	str	r0, [sp, #4]
  13e904:	e58d2018 	str	r2, [sp, #24]
  13e908:	e58d3028 	str	r3, [sp, #40]	; 0x28
  13e90c:	e58da000 	str	sl, [sp]
  13e910:	e58da00c 	str	sl, [sp, #12]
  13e914:	e59d2000 	ldr	r2, [sp]
  13e918:	e5db3000 	ldrb	r3, [fp]
  13e91c:	e082200a 	add	r2, r2, sl
  13e920:	e3530000 	cmp	r3, #0
  13e924:	e58d2000 	str	r2, [sp]
  13e928:	0a0001c8 	beq	13f050 <printf_core+0x760>
  13e92c:	e3530025 	cmp	r3, #37	; 0x25
  13e930:	e1a0300b 	mov	r3, fp
  13e934:	0a000005 	beq	13e950 <printf_core+0x60>
  13e938:	e5f32001 	ldrb	r2, [r3, #1]!
  13e93c:	e3520000 	cmp	r2, #0
  13e940:	13520025 	cmpne	r2, #37	; 0x25
  13e944:	1afffffb 	bne	13e938 <printf_core+0x48>
  13e948:	e3520025 	cmp	r2, #37	; 0x25
  13e94c:	1a00019c 	bne	13efc4 <printf_core+0x6d4>
  13e950:	e5d32001 	ldrb	r2, [r3, #1]
  13e954:	e1a04003 	mov	r4, r3
  13e958:	e3520025 	cmp	r2, #37	; 0x25
  13e95c:	0a000003 	beq	13e970 <printf_core+0x80>
  13e960:	ea000006 	b	13e980 <printf_core+0x90>
  13e964:	e5d42001 	ldrb	r2, [r4, #1]
  13e968:	e3520025 	cmp	r2, #37	; 0x25
  13e96c:	1a000003 	bne	13e980 <printf_core+0x90>
  13e970:	e5f42002 	ldrb	r2, [r4, #2]!
  13e974:	e2833001 	add	r3, r3, #1
  13e978:	e3520025 	cmp	r2, #37	; 0x25
  13e97c:	0afffff8 	beq	13e964 <printf_core+0x74>
  13e980:	e3e02102 	mvn	r2, #-2147483648	; 0x80000000
  13e984:	e043a00b 	sub	sl, r3, fp
  13e988:	e59d3000 	ldr	r3, [sp]
  13e98c:	e0423003 	sub	r3, r2, r3
  13e990:	e15a0003 	cmp	sl, r3
  13e994:	e58d3008 	str	r3, [sp, #8]
  13e998:	ca000181 	bgt	13efa4 <printf_core+0x6b4>
  13e99c:	e59d3004 	ldr	r3, [sp, #4]
  13e9a0:	e3530000 	cmp	r3, #0
  13e9a4:	0a000002 	beq	13e9b4 <printf_core+0xc4>
  13e9a8:	e5933000 	ldr	r3, [r3]
  13e9ac:	e3130020 	tst	r3, #32
  13e9b0:	0a000146 	beq	13eed0 <printf_core+0x5e0>
  13e9b4:	e35a0000 	cmp	sl, #0
  13e9b8:	1a0000b7 	bne	13ec9c <printf_core+0x3ac>
  13e9bc:	e5d42001 	ldrb	r2, [r4, #1]
  13e9c0:	e242c030 	sub	ip, r2, #48	; 0x30
  13e9c4:	e35c0009 	cmp	ip, #9
  13e9c8:	8a000002 	bhi	13e9d8 <printf_core+0xe8>
  13e9cc:	e5d43002 	ldrb	r3, [r4, #2]
  13e9d0:	e3530024 	cmp	r3, #36	; 0x24
  13e9d4:	0a000194 	beq	13f02c <printf_core+0x73c>
  13e9d8:	e2423020 	sub	r3, r2, #32
  13e9dc:	e353001f 	cmp	r3, #31
  13e9e0:	e3e0c000 	mvn	ip, #0
  13e9e4:	e2846001 	add	r6, r4, #1
  13e9e8:	8a000196 	bhi	13f048 <printf_core+0x758>
  13e9ec:	e59f0f44 	ldr	r0, [pc, #3908]	; 13f938 <printf_core+0x1048>
  13e9f0:	e1a01330 	lsr	r1, r0, r3
  13e9f4:	e2118001 	ands	r8, r1, #1
  13e9f8:	0a00000a 	beq	13ea28 <printf_core+0x138>
  13e9fc:	e3a08000 	mov	r8, #0
  13ea00:	e3a0e001 	mov	lr, #1
  13ea04:	ea000002 	b	13ea14 <printf_core+0x124>
  13ea08:	e1a01330 	lsr	r1, r0, r3
  13ea0c:	e3110001 	tst	r1, #1
  13ea10:	0a000004 	beq	13ea28 <printf_core+0x138>
  13ea14:	e5f62001 	ldrb	r2, [r6, #1]!
  13ea18:	e188831e 	orr	r8, r8, lr, lsl r3
  13ea1c:	e2423020 	sub	r3, r2, #32
  13ea20:	e353001f 	cmp	r3, #31
  13ea24:	9afffff7 	bls	13ea08 <printf_core+0x118>
  13ea28:	e352002a 	cmp	r2, #42	; 0x2a
  13ea2c:	0a00009c 	beq	13eca4 <printf_core+0x3b4>
  13ea30:	e5d61000 	ldrb	r1, [r6]
  13ea34:	e2413030 	sub	r3, r1, #48	; 0x30
  13ea38:	e3530009 	cmp	r3, #9
  13ea3c:	81a02001 	movhi	r2, r1
  13ea40:	83a09000 	movhi	r9, #0
  13ea44:	8a000012 	bhi	13ea94 <printf_core+0x1a4>
  13ea48:	e3a09000 	mov	r9, #0
  13ea4c:	e59f0ee8 	ldr	r0, [pc, #3816]	; 13f93c <printf_core+0x104c>
  13ea50:	e0693e89 	rsb	r3, r9, r9, lsl #29
  13ea54:	e0693103 	rsb	r3, r9, r3, lsl #2
  13ea58:	e5f62001 	ldrb	r2, [r6, #1]!
  13ea5c:	e1a03083 	lsl	r3, r3, #1
  13ea60:	e1590000 	cmp	r9, r0
  13ea64:	e2411030 	sub	r1, r1, #48	; 0x30
  13ea68:	e2433106 	sub	r3, r3, #-2147483647	; 0x80000001
  13ea6c:	e242e030 	sub	lr, r2, #48	; 0x30
  13ea70:	8a000025 	bhi	13eb0c <printf_core+0x21c>
  13ea74:	e1510003 	cmp	r1, r3
  13ea78:	e0899109 	add	r9, r9, r9, lsl #2
  13ea7c:	ca000022 	bgt	13eb0c <printf_core+0x21c>
  13ea80:	e35e0009 	cmp	lr, #9
  13ea84:	e0819089 	add	r9, r1, r9, lsl #1
  13ea88:	9a000022 	bls	13eb18 <printf_core+0x228>
  13ea8c:	e3590000 	cmp	r9, #0
  13ea90:	ba000143 	blt	13efa4 <printf_core+0x6b4>
  13ea94:	e352002e 	cmp	r2, #46	; 0x2e
  13ea98:	1a000097 	bne	13ecfc <printf_core+0x40c>
  13ea9c:	e5d62001 	ldrb	r2, [r6, #1]
  13eaa0:	e352002a 	cmp	r2, #42	; 0x2a
  13eaa4:	1a00011e 	bne	13ef24 <printf_core+0x634>
  13eaa8:	e5d62002 	ldrb	r2, [r6, #2]
  13eaac:	e2423030 	sub	r3, r2, #48	; 0x30
  13eab0:	e3530009 	cmp	r3, #9
  13eab4:	8a000002 	bhi	13eac4 <printf_core+0x1d4>
  13eab8:	e5d63003 	ldrb	r3, [r6, #3]
  13eabc:	e3530024 	cmp	r3, #36	; 0x24
  13eac0:	0a000143 	beq	13efd4 <printf_core+0x6e4>
  13eac4:	e59d300c 	ldr	r3, [sp, #12]
  13eac8:	e3530000 	cmp	r3, #0
  13eacc:	1a00009f 	bne	13ed50 <printf_core+0x460>
  13ead0:	e59d3004 	ldr	r3, [sp, #4]
  13ead4:	e2866002 	add	r6, r6, #2
  13ead8:	e3530000 	cmp	r3, #0
  13eadc:	159d1018 	ldrne	r1, [sp, #24]
  13eae0:	03a03001 	moveq	r3, #1
  13eae4:	15913000 	ldrne	r3, [r1]
  13eae8:	059d5004 	ldreq	r5, [sp, #4]
  13eaec:	15935000 	ldrne	r5, [r3]
  13eaf0:	12832004 	addne	r2, r3, #4
  13eaf4:	11e03005 	mvnne	r3, r5
  13eaf8:	15812000 	strne	r2, [r1]
  13eafc:	11a03fa3 	lsrne	r3, r3, #31
  13eb00:	15d62000 	ldrbne	r2, [r6]
  13eb04:	e58d301c 	str	r3, [sp, #28]
  13eb08:	ea00007e 	b	13ed08 <printf_core+0x418>
  13eb0c:	e35e0009 	cmp	lr, #9
  13eb10:	8a000123 	bhi	13efa4 <printf_core+0x6b4>
  13eb14:	e3e09000 	mvn	r9, #0
  13eb18:	e1a01002 	mov	r1, r2
  13eb1c:	eaffffcb 	b	13ea50 <printf_core+0x160>
  13eb20:	e28d3070 	add	r3, sp, #112	; 0x70
  13eb24:	e893000c 	ldm	r3, {r2, r3}
  13eb28:	e28da0d0 	add	sl, sp, #208	; 0xd0
  13eb2c:	e1921003 	orrs	r1, r2, r3
  13eb30:	e1a0b00a 	mov	fp, sl
  13eb34:	0a000009 	beq	13eb60 <printf_core+0x270>
  13eb38:	e1a001a2 	lsr	r0, r2, #3
  13eb3c:	e1800e83 	orr	r0, r0, r3, lsl #29
  13eb40:	e1a0c1a3 	lsr	ip, r3, #3
  13eb44:	e2021007 	and	r1, r2, #7
  13eb48:	e1a0300c 	mov	r3, ip
  13eb4c:	e1a02000 	mov	r2, r0
  13eb50:	e2811030 	add	r1, r1, #48	; 0x30
  13eb54:	e1920003 	orrs	r0, r2, r3
  13eb58:	e56b1001 	strb	r1, [fp, #-1]!
  13eb5c:	1afffff5 	bne	13eb38 <printf_core+0x248>
  13eb60:	e2183008 	ands	r3, r8, #8
  13eb64:	0a00026f 	beq	13f528 <printf_core+0xc38>
  13eb68:	e04a300b 	sub	r3, sl, fp
  13eb6c:	e1530005 	cmp	r3, r5
  13eb70:	ba00026b 	blt	13f524 <printf_core+0xc34>
  13eb74:	e2835001 	add	r5, r3, #1
  13eb78:	e3a03000 	mov	r3, #0
  13eb7c:	e58d3020 	str	r3, [sp, #32]
  13eb80:	e59f3db8 	ldr	r3, [pc, #3512]	; 13f940 <printf_core+0x1050>
  13eb84:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13eb88:	e59d301c 	ldr	r3, [sp, #28]
  13eb8c:	e0132fa5 	ands	r2, r3, r5, lsr #31
  13eb90:	1a000103 	bne	13efa4 <printf_core+0x6b4>
  13eb94:	e59d2070 	ldr	r2, [sp, #112]	; 0x70
  13eb98:	e3530000 	cmp	r3, #0
  13eb9c:	e59d3074 	ldr	r3, [sp, #116]	; 0x74
  13eba0:	13c88801 	bicne	r8, r8, #65536	; 0x10000
  13eba4:	e1923003 	orrs	r3, r2, r3
  13eba8:	03a03001 	moveq	r3, #1
  13ebac:	13a03000 	movne	r3, #0
  13ebb0:	e3550000 	cmp	r5, #0
  13ebb4:	01a02003 	moveq	r2, r3
  13ebb8:	13a02000 	movne	r2, #0
  13ebbc:	e3520000 	cmp	r2, #0
  13ebc0:	1a0002a8 	bne	13f668 <printf_core+0xd78>
  13ebc4:	e04a600b 	sub	r6, sl, fp
  13ebc8:	e1560005 	cmp	r6, r5
  13ebcc:	a1a05006 	movge	r5, r6
  13ebd0:	e0833006 	add	r3, r3, r6
  13ebd4:	e1530005 	cmp	r3, r5
  13ebd8:	e3e02102 	mvn	r2, #-2147483648	; 0x80000000
  13ebdc:	a1a05003 	movge	r5, r3
  13ebe0:	e59d3020 	ldr	r3, [sp, #32]
  13ebe4:	e0423003 	sub	r3, r2, r3
  13ebe8:	e1530005 	cmp	r3, r5
  13ebec:	ba0000ec 	blt	13efa4 <printf_core+0x6b4>
  13ebf0:	e59d3020 	ldr	r3, [sp, #32]
  13ebf4:	e0857003 	add	r7, r5, r3
  13ebf8:	e1570009 	cmp	r7, r9
  13ebfc:	a1a0a007 	movge	sl, r7
  13ec00:	b1a0a009 	movlt	sl, r9
  13ec04:	e59d3008 	ldr	r3, [sp, #8]
  13ec08:	e153000a 	cmp	r3, sl
  13ec0c:	ba0000e4 	blt	13efa4 <printf_core+0x6b4>
  13ec10:	e157000a 	cmp	r7, sl
  13ec14:	b3a09000 	movlt	r9, #0
  13ec18:	a3a09001 	movge	r9, #1
  13ec1c:	e3180a12 	tst	r8, #73728	; 0x12000
  13ec20:	01a03009 	moveq	r3, r9
  13ec24:	13a03001 	movne	r3, #1
  13ec28:	e3530000 	cmp	r3, #0
  13ec2c:	0a000281 	beq	13f638 <printf_core+0xd48>
  13ec30:	e59d3004 	ldr	r3, [sp, #4]
  13ec34:	e5933000 	ldr	r3, [r3]
  13ec38:	e3130020 	tst	r3, #32
  13ec3c:	0a000233 	beq	13f510 <printf_core+0xc20>
  13ec40:	e2283801 	eor	r3, r8, #65536	; 0x10000
  13ec44:	e3130a12 	tst	r3, #73728	; 0x12000
  13ec48:	01a03009 	moveq	r3, r9
  13ec4c:	13a03001 	movne	r3, #1
  13ec50:	e3530000 	cmp	r3, #0
  13ec54:	0a00027d 	beq	13f650 <printf_core+0xd60>
  13ec58:	e1550006 	cmp	r5, r6
  13ec5c:	ca000225 	bgt	13f4f8 <printf_core+0xc08>
  13ec60:	e59d3004 	ldr	r3, [sp, #4]
  13ec64:	e5933000 	ldr	r3, [r3]
  13ec68:	e3130020 	tst	r3, #32
  13ec6c:	0a00021c 	beq	13f4e4 <printf_core+0xbf4>
  13ec70:	e2283a02 	eor	r3, r8, #8192	; 0x2000
  13ec74:	e3130a12 	tst	r3, #73728	; 0x12000
  13ec78:	01a03009 	moveq	r3, r9
  13ec7c:	13a03001 	movne	r3, #1
  13ec80:	e3530000 	cmp	r3, #0
  13ec84:	1a000004 	bne	13ec9c <printf_core+0x3ac>
  13ec88:	e1a03007 	mov	r3, r7
  13ec8c:	e1a0200a 	mov	r2, sl
  13ec90:	e3a01020 	mov	r1, #32
  13ec94:	e59d0004 	ldr	r0, [sp, #4]
  13ec98:	ebfffee9 	bl	13e844 <pad.part.0>
  13ec9c:	e1a0b004 	mov	fp, r4
  13eca0:	eaffff1b 	b	13e914 <printf_core+0x24>
  13eca4:	e5d62001 	ldrb	r2, [r6, #1]
  13eca8:	e2423030 	sub	r3, r2, #48	; 0x30
  13ecac:	e3530009 	cmp	r3, #9
  13ecb0:	9a00008b 	bls	13eee4 <printf_core+0x5f4>
  13ecb4:	e59d300c 	ldr	r3, [sp, #12]
  13ecb8:	e3530000 	cmp	r3, #0
  13ecbc:	1a000023 	bne	13ed50 <printf_core+0x460>
  13ecc0:	e59d3004 	ldr	r3, [sp, #4]
  13ecc4:	e2866001 	add	r6, r6, #1
  13ecc8:	e3530000 	cmp	r3, #0
  13eccc:	0a0000be 	beq	13efcc <printf_core+0x6dc>
  13ecd0:	e59d1018 	ldr	r1, [sp, #24]
  13ecd4:	e5913000 	ldr	r3, [r1]
  13ecd8:	e2832004 	add	r2, r3, #4
  13ecdc:	e5939000 	ldr	r9, [r3]
  13ece0:	e5812000 	str	r2, [r1]
  13ece4:	e5d62000 	ldrb	r2, [r6]
  13ece8:	e3590000 	cmp	r9, #0
  13ecec:	b3888a02 	orrlt	r8, r8, #8192	; 0x2000
  13ecf0:	b2699000 	rsblt	r9, r9, #0
  13ecf4:	e352002e 	cmp	r2, #46	; 0x2e
  13ecf8:	0affff67 	beq	13ea9c <printf_core+0x1ac>
  13ecfc:	e3a03000 	mov	r3, #0
  13ed00:	e3e05000 	mvn	r5, #0
  13ed04:	e58d301c 	str	r3, [sp, #28]
  13ed08:	e3a07000 	mov	r7, #0
  13ed0c:	e59f0c30 	ldr	r0, [pc, #3120]	; 13f944 <printf_core+0x1054>
  13ed10:	ea000007 	b	13ed34 <printf_core+0x444>
  13ed14:	e5531041 	ldrb	r1, [r3, #-65]	; 0xffffffbf
  13ed18:	e2864001 	add	r4, r6, #1
  13ed1c:	e2413001 	sub	r3, r1, #1
  13ed20:	e3530007 	cmp	r3, #7
  13ed24:	8a000011 	bhi	13ed70 <printf_core+0x480>
  13ed28:	e5d62001 	ldrb	r2, [r6, #1]
  13ed2c:	e1a07001 	mov	r7, r1
  13ed30:	e1a06004 	mov	r6, r4
  13ed34:	e0673187 	rsb	r3, r7, r7, lsl #3
  13ed38:	e0873103 	add	r3, r7, r3, lsl #2
  13ed3c:	e0803083 	add	r3, r0, r3, lsl #1
  13ed40:	e0833002 	add	r3, r3, r2
  13ed44:	e2422041 	sub	r2, r2, #65	; 0x41
  13ed48:	e3520039 	cmp	r2, #57	; 0x39
  13ed4c:	9afffff0 	bls	13ed14 <printf_core+0x424>
  13ed50:	ebffe861 	bl	138edc <__errno_location>
  13ed54:	e3a03016 	mov	r3, #22
  13ed58:	e3e02000 	mvn	r2, #0
  13ed5c:	e58d2000 	str	r2, [sp]
  13ed60:	e5803000 	str	r3, [r0]
  13ed64:	e59d0000 	ldr	r0, [sp]
  13ed68:	e28ddfb3 	add	sp, sp, #716	; 0x2cc
  13ed6c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13ed70:	e3510000 	cmp	r1, #0
  13ed74:	0afffff5 	beq	13ed50 <printf_core+0x460>
  13ed78:	e351001b 	cmp	r1, #27
  13ed7c:	0a000080 	beq	13ef84 <printf_core+0x694>
  13ed80:	e35c0000 	cmp	ip, #0
  13ed84:	ba0000a1 	blt	13f010 <printf_core+0x720>
  13ed88:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
  13ed8c:	e59d22f0 	ldr	r2, [sp, #752]	; 0x2f0
  13ed90:	e083318c 	add	r3, r3, ip, lsl #3
  13ed94:	e782110c 	str	r1, [r2, ip, lsl #2]
  13ed98:	e893000c 	ldm	r3, {r2, r3}
  13ed9c:	e58d2070 	str	r2, [sp, #112]	; 0x70
  13eda0:	e58d3074 	str	r3, [sp, #116]	; 0x74
  13eda4:	e59d3004 	ldr	r3, [sp, #4]
  13eda8:	e3530000 	cmp	r3, #0
  13edac:	0a000079 	beq	13ef98 <printf_core+0x6a8>
  13edb0:	e5d63000 	ldrb	r3, [r6]
  13edb4:	e3570000 	cmp	r7, #0
  13edb8:	e58d3010 	str	r3, [sp, #16]
  13edbc:	0a000004 	beq	13edd4 <printf_core+0x4e4>
  13edc0:	e203300f 	and	r3, r3, #15
  13edc4:	e3530003 	cmp	r3, #3
  13edc8:	059d3010 	ldreq	r3, [sp, #16]
  13edcc:	03c33020 	biceq	r3, r3, #32
  13edd0:	058d3010 	streq	r3, [sp, #16]
  13edd4:	e59d3010 	ldr	r3, [sp, #16]
  13edd8:	e3180a02 	tst	r8, #8192	; 0x2000
  13eddc:	e2433041 	sub	r3, r3, #65	; 0x41
  13ede0:	13c88801 	bicne	r8, r8, #65536	; 0x10000
  13ede4:	e3530037 	cmp	r3, #55	; 0x37
  13ede8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  13edec:	ea0001a2 	b	13f47c <printf_core+0xb8c>
  13edf0:	0013f2d0 	.word	0x0013f2d0
  13edf4:	0013f47c 	.word	0x0013f47c
  13edf8:	0013f16c 	.word	0x0013f16c
  13edfc:	0013f47c 	.word	0x0013f47c
  13ee00:	0013f2d0 	.word	0x0013f2d0
  13ee04:	0013f2d0 	.word	0x0013f2d0
  13ee08:	0013f2d0 	.word	0x0013f2d0
  13ee0c:	0013f47c 	.word	0x0013f47c
  13ee10:	0013f47c 	.word	0x0013f47c
  13ee14:	0013f47c 	.word	0x0013f47c
  13ee18:	0013f47c 	.word	0x0013f47c
  13ee1c:	0013f47c 	.word	0x0013f47c
  13ee20:	0013f47c 	.word	0x0013f47c
  13ee24:	0013f47c 	.word	0x0013f47c
  13ee28:	0013f47c 	.word	0x0013f47c
  13ee2c:	0013f47c 	.word	0x0013f47c
  13ee30:	0013f47c 	.word	0x0013f47c
  13ee34:	0013f47c 	.word	0x0013f47c
  13ee38:	0013f1dc 	.word	0x0013f1dc
  13ee3c:	0013f47c 	.word	0x0013f47c
  13ee40:	0013f47c 	.word	0x0013f47c
  13ee44:	0013f47c 	.word	0x0013f47c
  13ee48:	0013f47c 	.word	0x0013f47c
  13ee4c:	0013f470 	.word	0x0013f470
  13ee50:	0013f47c 	.word	0x0013f47c
  13ee54:	0013f47c 	.word	0x0013f47c
  13ee58:	0013f47c 	.word	0x0013f47c
  13ee5c:	0013f47c 	.word	0x0013f47c
  13ee60:	0013f47c 	.word	0x0013f47c
  13ee64:	0013f47c 	.word	0x0013f47c
  13ee68:	0013f47c 	.word	0x0013f47c
  13ee6c:	0013f47c 	.word	0x0013f47c
  13ee70:	0013f2d0 	.word	0x0013f2d0
  13ee74:	0013f47c 	.word	0x0013f47c
  13ee78:	0013f1f0 	.word	0x0013f1f0
  13ee7c:	0013f22c 	.word	0x0013f22c
  13ee80:	0013f2d0 	.word	0x0013f2d0
  13ee84:	0013f2d0 	.word	0x0013f2d0
  13ee88:	0013f2d0 	.word	0x0013f2d0
  13ee8c:	0013f47c 	.word	0x0013f47c
  13ee90:	0013f22c 	.word	0x0013f22c
  13ee94:	0013f47c 	.word	0x0013f47c
  13ee98:	0013f47c 	.word	0x0013f47c
  13ee9c:	0013f47c 	.word	0x0013f47c
  13eea0:	0013f274 	.word	0x0013f274
  13eea4:	0013f2a4 	.word	0x0013f2a4
  13eea8:	0013eb20 	.word	0x0013eb20
  13eeac:	0013f3c4 	.word	0x0013f3c4
  13eeb0:	0013f47c 	.word	0x0013f47c
  13eeb4:	0013f47c 	.word	0x0013f47c
  13eeb8:	0013f45c 	.word	0x0013f45c
  13eebc:	0013f47c 	.word	0x0013f47c
  13eec0:	0013f0b0 	.word	0x0013f0b0
  13eec4:	0013f47c 	.word	0x0013f47c
  13eec8:	0013f47c 	.word	0x0013f47c
  13eecc:	0013f470 	.word	0x0013f470
  13eed0:	e59d2004 	ldr	r2, [sp, #4]
  13eed4:	e1a0100a 	mov	r1, sl
  13eed8:	e1a0000b 	mov	r0, fp
  13eedc:	eb001341 	bl	143be8 <__fwritex>
  13eee0:	eafffeb3 	b	13e9b4 <printf_core+0xc4>
  13eee4:	e5d63002 	ldrb	r3, [r6, #2]
  13eee8:	e3530024 	cmp	r3, #36	; 0x24
  13eeec:	1affff70 	bne	13ecb4 <printf_core+0x3c4>
  13eef0:	e3a0300a 	mov	r3, #10
  13eef4:	e59d12f0 	ldr	r1, [sp, #752]	; 0x2f0
  13eef8:	e24221c3 	sub	r2, r2, #-1073741776	; 0xc0000030
  13eefc:	e7813102 	str	r3, [r1, r2, lsl #2]
  13ef00:	e3a02001 	mov	r2, #1
  13ef04:	e5d63001 	ldrb	r3, [r6, #1]
  13ef08:	e58d200c 	str	r2, [sp, #12]
  13ef0c:	e2833202 	add	r3, r3, #536870912	; 0x20000000
  13ef10:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
  13ef14:	e2433030 	sub	r3, r3, #48	; 0x30
  13ef18:	e7929183 	ldr	r9, [r2, r3, lsl #3]
  13ef1c:	e2866003 	add	r6, r6, #3
  13ef20:	eaffff6f 	b	13ece4 <printf_core+0x3f4>
  13ef24:	e2421030 	sub	r1, r2, #48	; 0x30
  13ef28:	e3510009 	cmp	r1, #9
  13ef2c:	e3a05000 	mov	r5, #0
  13ef30:	e2866001 	add	r6, r6, #1
  13ef34:	8a00000f 	bhi	13ef78 <printf_core+0x688>
  13ef38:	e59f09fc 	ldr	r0, [pc, #2556]	; 13f93c <printf_core+0x104c>
  13ef3c:	e0653e85 	rsb	r3, r5, r5, lsl #29
  13ef40:	e0653103 	rsb	r3, r5, r3, lsl #2
  13ef44:	e1a03083 	lsl	r3, r3, #1
  13ef48:	e1550000 	cmp	r5, r0
  13ef4c:	e2433106 	sub	r3, r3, #-2147483647	; 0x80000001
  13ef50:	8a000003 	bhi	13ef64 <printf_core+0x674>
  13ef54:	e1510003 	cmp	r1, r3
  13ef58:	e0855105 	add	r5, r5, r5, lsl #2
  13ef5c:	d0815085 	addle	r5, r1, r5, lsl #1
  13ef60:	da000000 	ble	13ef68 <printf_core+0x678>
  13ef64:	e3e05000 	mvn	r5, #0
  13ef68:	e5f62001 	ldrb	r2, [r6, #1]!
  13ef6c:	e2421030 	sub	r1, r2, #48	; 0x30
  13ef70:	e3510009 	cmp	r1, #9
  13ef74:	9afffff0 	bls	13ef3c <printf_core+0x64c>
  13ef78:	e3a03001 	mov	r3, #1
  13ef7c:	e58d301c 	str	r3, [sp, #28]
  13ef80:	eaffff60 	b	13ed08 <printf_core+0x418>
  13ef84:	e35c0000 	cmp	ip, #0
  13ef88:	aaffff70 	bge	13ed50 <printf_core+0x460>
  13ef8c:	e59d3004 	ldr	r3, [sp, #4]
  13ef90:	e3530000 	cmp	r3, #0
  13ef94:	1affff85 	bne	13edb0 <printf_core+0x4c0>
  13ef98:	e59d3008 	ldr	r3, [sp, #8]
  13ef9c:	e153000a 	cmp	r3, sl
  13efa0:	aaffff3d 	bge	13ec9c <printf_core+0x3ac>
  13efa4:	ebffe7cc 	bl	138edc <__errno_location>
  13efa8:	e3e02000 	mvn	r2, #0
  13efac:	e3a0304b 	mov	r3, #75	; 0x4b
  13efb0:	e58d2000 	str	r2, [sp]
  13efb4:	e5803000 	str	r3, [r0]
  13efb8:	e59d0000 	ldr	r0, [sp]
  13efbc:	e28ddfb3 	add	sp, sp, #716	; 0x2cc
  13efc0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13efc4:	e1a04003 	mov	r4, r3
  13efc8:	eafffe6c 	b	13e980 <printf_core+0x90>
  13efcc:	e59d9004 	ldr	r9, [sp, #4]
  13efd0:	eafffeaf 	b	13ea94 <printf_core+0x1a4>
  13efd4:	e3a0300a 	mov	r3, #10
  13efd8:	e59d12f0 	ldr	r1, [sp, #752]	; 0x2f0
  13efdc:	e24221c3 	sub	r2, r2, #-1073741776	; 0xc0000030
  13efe0:	e7813102 	str	r3, [r1, r2, lsl #2]
  13efe4:	e5d63002 	ldrb	r3, [r6, #2]
  13efe8:	e59d1028 	ldr	r1, [sp, #40]	; 0x28
  13efec:	e2833202 	add	r3, r3, #536870912	; 0x20000000
  13eff0:	e2433030 	sub	r3, r3, #48	; 0x30
  13eff4:	e7915183 	ldr	r5, [r1, r3, lsl #3]
  13eff8:	e5d62004 	ldrb	r2, [r6, #4]
  13effc:	e1e03005 	mvn	r3, r5
  13f000:	e1a03fa3 	lsr	r3, r3, #31
  13f004:	e2866004 	add	r6, r6, #4
  13f008:	e58d301c 	str	r3, [sp, #28]
  13f00c:	eaffff3d 	b	13ed08 <printf_core+0x418>
  13f010:	e59d3004 	ldr	r3, [sp, #4]
  13f014:	e3530000 	cmp	r3, #0
  13f018:	0a000409 	beq	140044 <printf_core+0x1754>
  13f01c:	e59d2018 	ldr	r2, [sp, #24]
  13f020:	e28d0070 	add	r0, sp, #112	; 0x70
  13f024:	ebfffda1 	bl	13e6b0 <pop_arg>
  13f028:	eaffff60 	b	13edb0 <printf_core+0x4c0>
  13f02c:	e3a03001 	mov	r3, #1
  13f030:	e5d42003 	ldrb	r2, [r4, #3]
  13f034:	e58d300c 	str	r3, [sp, #12]
  13f038:	e2423020 	sub	r3, r2, #32
  13f03c:	e353001f 	cmp	r3, #31
  13f040:	e2846003 	add	r6, r4, #3
  13f044:	9afffe68 	bls	13e9ec <printf_core+0xfc>
  13f048:	e3a08000 	mov	r8, #0
  13f04c:	eafffe75 	b	13ea28 <printf_core+0x138>
  13f050:	e59d3004 	ldr	r3, [sp, #4]
  13f054:	e3530000 	cmp	r3, #0
  13f058:	1affff41 	bne	13ed64 <printf_core+0x474>
  13f05c:	e59d300c 	ldr	r3, [sp, #12]
  13f060:	e3530000 	cmp	r3, #0
  13f064:	0a0003f6 	beq	140044 <printf_core+0x1754>
  13f068:	e3a05001 	mov	r5, #1
  13f06c:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
  13f070:	e59d62f0 	ldr	r6, [sp, #752]	; 0x2f0
  13f074:	e59d7018 	ldr	r7, [sp, #24]
  13f078:	e2834008 	add	r4, r3, #8
  13f07c:	e5b61004 	ldr	r1, [r6, #4]!
  13f080:	e3510000 	cmp	r1, #0
  13f084:	0a0004f8 	beq	14046c <printf_core+0x1b7c>
  13f088:	e1a00004 	mov	r0, r4
  13f08c:	e2855001 	add	r5, r5, #1
  13f090:	e1a02007 	mov	r2, r7
  13f094:	ebfffd85 	bl	13e6b0 <pop_arg>
  13f098:	e355000a 	cmp	r5, #10
  13f09c:	e2844008 	add	r4, r4, #8
  13f0a0:	1afffff5 	bne	13f07c <printf_core+0x78c>
  13f0a4:	e3a03001 	mov	r3, #1
  13f0a8:	e58d3000 	str	r3, [sp]
  13f0ac:	eaffff2c 	b	13ed64 <printf_core+0x474>
  13f0b0:	e3a03000 	mov	r3, #0
  13f0b4:	e28d7070 	add	r7, sp, #112	; 0x70
  13f0b8:	e89700c0 	ldm	r7, {r6, r7}
  13f0bc:	e58d3020 	str	r3, [sp, #32]
  13f0c0:	e59f3878 	ldr	r3, [pc, #2168]	; 13f940 <printf_core+0x1050>
  13f0c4:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13f0c8:	e3a03000 	mov	r3, #0
  13f0cc:	e3e02000 	mvn	r2, #0
  13f0d0:	e1570003 	cmp	r7, r3
  13f0d4:	01560002 	cmpeq	r6, r2
  13f0d8:	e28da0d0 	add	sl, sp, #208	; 0xd0
  13f0dc:	91a0b00a 	movls	fp, sl
  13f0e0:	9a000015 	bls	13f13c <printf_core+0x84c>
  13f0e4:	e1a0b00a 	mov	fp, sl
  13f0e8:	e58d2010 	str	r2, [sp, #16]
  13f0ec:	e58d3014 	str	r3, [sp, #20]
  13f0f0:	e1a00006 	mov	r0, r6
  13f0f4:	e1a01007 	mov	r1, r7
  13f0f8:	e3a0200a 	mov	r2, #10
  13f0fc:	e3a03000 	mov	r3, #0
  13f100:	eb001834 	bl	1451d8 <__aeabi_uldivmod>
  13f104:	e2822030 	add	r2, r2, #48	; 0x30
  13f108:	e56b2001 	strb	r2, [fp, #-1]!
  13f10c:	e1a00006 	mov	r0, r6
  13f110:	e1a01007 	mov	r1, r7
  13f114:	e3a0200a 	mov	r2, #10
  13f118:	e3a03000 	mov	r3, #0
  13f11c:	eb00182d 	bl	1451d8 <__aeabi_uldivmod>
  13f120:	e28d3010 	add	r3, sp, #16
  13f124:	e893000c 	ldm	r3, {r2, r3}
  13f128:	e1510003 	cmp	r1, r3
  13f12c:	01500002 	cmpeq	r0, r2
  13f130:	e1a06000 	mov	r6, r0
  13f134:	e1a07001 	mov	r7, r1
  13f138:	8affffec 	bhi	13f0f0 <printf_core+0x800>
  13f13c:	e3560000 	cmp	r6, #0
  13f140:	0afffe90 	beq	13eb88 <printf_core+0x298>
  13f144:	e59f1838 	ldr	r1, [pc, #2104]	; 13f984 <printf_core+0x1094>
  13f148:	e0832196 	umull	r2, r3, r6, r1
  13f14c:	e1a031a3 	lsr	r3, r3, #3
  13f150:	e0832103 	add	r2, r3, r3, lsl #2
  13f154:	e0466082 	sub	r6, r6, r2, lsl #1
  13f158:	e2862030 	add	r2, r6, #48	; 0x30
  13f15c:	e2536000 	subs	r6, r3, #0
  13f160:	e56b2001 	strb	r2, [fp, #-1]!
  13f164:	1afffff6 	bne	13f144 <printf_core+0x854>
  13f168:	eafffe86 	b	13eb88 <printf_core+0x298>
  13f16c:	e3a03000 	mov	r3, #0
  13f170:	e3e0a000 	mvn	sl, #0
  13f174:	e59d1070 	ldr	r1, [sp, #112]	; 0x70
  13f178:	e28d707c 	add	r7, sp, #124	; 0x7c
  13f17c:	e58d3080 	str	r3, [sp, #128]	; 0x80
  13f180:	e58d107c 	str	r1, [sp, #124]	; 0x7c
  13f184:	e58d7070 	str	r7, [sp, #112]	; 0x70
  13f188:	e3510000 	cmp	r1, #0
  13f18c:	0a000112 	beq	13f5dc <printf_core+0xcec>
  13f190:	e3a05000 	mov	r5, #0
  13f194:	e28d6068 	add	r6, sp, #104	; 0x68
  13f198:	ea000007 	b	13f1bc <printf_core+0x8cc>
  13f19c:	e1530000 	cmp	r3, r0
  13f1a0:	3a0000e4 	bcc	13f538 <printf_core+0xc48>
  13f1a4:	e0855000 	add	r5, r5, r0
  13f1a8:	e155000a 	cmp	r5, sl
  13f1ac:	2a0000e1 	bcs	13f538 <printf_core+0xc48>
  13f1b0:	e5b71004 	ldr	r1, [r7, #4]!
  13f1b4:	e3510000 	cmp	r1, #0
  13f1b8:	0a0000de 	beq	13f538 <printf_core+0xc48>
  13f1bc:	e1a00006 	mov	r0, r6
  13f1c0:	eb00109c 	bl	143438 <wctomb>
  13f1c4:	e3500000 	cmp	r0, #0
  13f1c8:	e04a3005 	sub	r3, sl, r5
  13f1cc:	aafffff2 	bge	13f19c <printf_core+0x8ac>
  13f1d0:	e3e03000 	mvn	r3, #0
  13f1d4:	e58d3000 	str	r3, [sp]
  13f1d8:	eafffee1 	b	13ed64 <printf_core+0x474>
  13f1dc:	e255a000 	subs	sl, r5, #0
  13f1e0:	e59d7070 	ldr	r7, [sp, #112]	; 0x70
  13f1e4:	0a0000fc 	beq	13f5dc <printf_core+0xcec>
  13f1e8:	e5971000 	ldr	r1, [r7]
  13f1ec:	eaffffe5 	b	13f188 <printf_core+0x898>
  13f1f0:	e3a00001 	mov	r0, #1
  13f1f4:	e59d3070 	ldr	r3, [sp, #112]	; 0x70
  13f1f8:	e3c88801 	bic	r8, r8, #65536	; 0x10000
  13f1fc:	e5cd30cf 	strb	r3, [sp, #207]	; 0xcf
  13f200:	e28d60d0 	add	r6, sp, #208	; 0xd0
  13f204:	e28db0cf 	add	fp, sp, #207	; 0xcf
  13f208:	e3a03000 	mov	r3, #0
  13f20c:	e046600b 	sub	r6, r6, fp
  13f210:	e58d3020 	str	r3, [sp, #32]
  13f214:	e59f3724 	ldr	r3, [pc, #1828]	; 13f940 <printf_core+0x1050>
  13f218:	e1560000 	cmp	r6, r0
  13f21c:	a1a05006 	movge	r5, r6
  13f220:	b1a05000 	movlt	r5, r0
  13f224:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13f228:	eafffe70 	b	13ebf0 <printf_core+0x300>
  13f22c:	e28d7070 	add	r7, sp, #112	; 0x70
  13f230:	e89700c0 	ldm	r7, {r6, r7}
  13f234:	e3560000 	cmp	r6, #0
  13f238:	e2d73000 	sbcs	r3, r7, #0
  13f23c:	ba000122 	blt	13f6cc <printf_core+0xddc>
  13f240:	e3180b02 	tst	r8, #2048	; 0x800
  13f244:	1a000379 	bne	140030 <printf_core+0x1740>
  13f248:	e59fa6f0 	ldr	sl, [pc, #1776]	; 13f940 <printf_core+0x1050>
  13f24c:	e2083001 	and	r3, r8, #1
  13f250:	e3530000 	cmp	r3, #0
  13f254:	e28a2002 	add	r2, sl, #2
  13f258:	01a0300a 	moveq	r3, sl
  13f25c:	11a03002 	movne	r3, r2
  13f260:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13f264:	13a03001 	movne	r3, #1
  13f268:	03a03000 	moveq	r3, #0
  13f26c:	e58d3020 	str	r3, [sp, #32]
  13f270:	eaffff94 	b	13f0c8 <printf_core+0x7d8>
  13f274:	ebffe718 	bl	138edc <__errno_location>
  13f278:	e5900000 	ldr	r0, [r0]
  13f27c:	ebffe738 	bl	138f64 <strerror>
  13f280:	e1a0b000 	mov	fp, r0
  13f284:	e3550000 	cmp	r5, #0
  13f288:	ba0000fa 	blt	13f678 <printf_core+0xd88>
  13f28c:	e1a01005 	mov	r1, r5
  13f290:	e1a0000b 	mov	r0, fp
  13f294:	eb0008dd 	bl	141610 <strnlen>
  13f298:	e08b6000 	add	r6, fp, r0
  13f29c:	e3c88801 	bic	r8, r8, #65536	; 0x10000
  13f2a0:	eaffffd8 	b	13f208 <printf_core+0x918>
  13f2a4:	e3570007 	cmp	r7, #7
  13f2a8:	979ff107 	ldrls	pc, [pc, r7, lsl #2]
  13f2ac:	eaffff39 	b	13ef98 <printf_core+0x6a8>
  13f2b0:	0013f4a0 	.word	0x0013f4a0
  13f2b4:	0013f4a0 	.word	0x0013f4a0
  13f2b8:	0013f4b0 	.word	0x0013f4b0
  13f2bc:	0013f4c4 	.word	0x0013f4c4
  13f2c0:	0013f4d4 	.word	0x0013f4d4
  13f2c4:	0013ef98 	.word	0x0013ef98
  13f2c8:	0013f4a0 	.word	0x0013f4a0
  13f2cc:	0013f4b0 	.word	0x0013f4b0
  13f2d0:	e59d301c 	ldr	r3, [sp, #28]
  13f2d4:	e0133fa5 	ands	r3, r3, r5, lsr #31
  13f2d8:	1affff31 	bne	13efa4 <printf_core+0x6b4>
  13f2dc:	e28d7070 	add	r7, sp, #112	; 0x70
  13f2e0:	e89700c0 	ldm	r7, {r6, r7}
  13f2e4:	e1b02fa7 	lsrs	r2, r7, #31
  13f2e8:	e58d2030 	str	r2, [sp, #48]	; 0x30
  13f2ec:	e58d306c 	str	r3, [sp, #108]	; 0x6c
  13f2f0:	0a0000e8 	beq	13f698 <printf_core+0xda8>
  13f2f4:	e2873102 	add	r3, r7, #-2147483648	; 0x80000000
  13f2f8:	e1a07003 	mov	r7, r3
  13f2fc:	e59f3644 	ldr	r3, [pc, #1604]	; 13f948 <printf_core+0x1058>
  13f300:	e58d3034 	str	r3, [sp, #52]	; 0x34
  13f304:	e3e02000 	mvn	r2, #0
  13f308:	e59f363c 	ldr	r3, [pc, #1596]	; 13f94c <printf_core+0x105c>
  13f30c:	e3c71102 	bic	r1, r7, #-2147483648	; 0x80000000
  13f310:	e1510003 	cmp	r1, r3
  13f314:	01560002 	cmpeq	r6, r2
  13f318:	e1a00006 	mov	r0, r6
  13f31c:	9a0000fb 	bls	13f710 <printf_core+0xe20>
  13f320:	e59d3010 	ldr	r3, [sp, #16]
  13f324:	e59fe624 	ldr	lr, [pc, #1572]	; 13f950 <printf_core+0x1060>
  13f328:	e59fc624 	ldr	ip, [pc, #1572]	; 13f954 <printf_core+0x1064>
  13f32c:	e213a020 	ands	sl, r3, #32
  13f330:	e1a02006 	mov	r2, r6
  13f334:	e1a03007 	mov	r3, r7
  13f338:	e1a01007 	mov	r1, r7
  13f33c:	01a0600e 	moveq	r6, lr
  13f340:	11a0600c 	movne	r6, ip
  13f344:	eb001729 	bl	144ff0 <__aeabi_dcmpeq>
  13f348:	e3500000 	cmp	r0, #0
  13f34c:	1a000004 	bne	13f364 <printf_core+0xa74>
  13f350:	e59fe600 	ldr	lr, [pc, #1536]	; 13f958 <printf_core+0x1068>
  13f354:	e59fc600 	ldr	ip, [pc, #1536]	; 13f95c <printf_core+0x106c>
  13f358:	e35a0000 	cmp	sl, #0
  13f35c:	01a0600e 	moveq	r6, lr
  13f360:	11a0600c 	movne	r6, ip
  13f364:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
  13f368:	e283a003 	add	sl, r3, #3
  13f36c:	e159000a 	cmp	r9, sl
  13f370:	c3a07000 	movgt	r7, #0
  13f374:	d3a07001 	movle	r7, #1
  13f378:	e3180a02 	tst	r8, #8192	; 0x2000
  13f37c:	01a03007 	moveq	r3, r7
  13f380:	13a03001 	movne	r3, #1
  13f384:	e3530000 	cmp	r3, #0
  13f388:	0a00042e 	beq	140448 <printf_core+0x1b58>
  13f38c:	e59d3004 	ldr	r3, [sp, #4]
  13f390:	e5933000 	ldr	r3, [r3]
  13f394:	e3130020 	tst	r3, #32
  13f398:	0a00032c 	beq	140050 <printf_core+0x1760>
  13f39c:	e2283a02 	eor	r3, r8, #8192	; 0x2000
  13f3a0:	e3130a12 	tst	r3, #73728	; 0x12000
  13f3a4:	13a07001 	movne	r7, #1
  13f3a8:	e3570000 	cmp	r7, #0
  13f3ac:	0a00034f 	beq	1400f0 <printf_core+0x1800>
  13f3b0:	e159000a 	cmp	r9, sl
  13f3b4:	a1a0a009 	movge	sl, r9
  13f3b8:	e35a0000 	cmp	sl, #0
  13f3bc:	aafffef5 	bge	13ef98 <printf_core+0x6a8>
  13f3c0:	eafffef7 	b	13efa4 <printf_core+0x6b4>
  13f3c4:	e3550008 	cmp	r5, #8
  13f3c8:	e3a03078 	mov	r3, #120	; 0x78
  13f3cc:	33a05008 	movcc	r5, #8
  13f3d0:	e3a0c020 	mov	ip, #32
  13f3d4:	e58d3010 	str	r3, [sp, #16]
  13f3d8:	e3888008 	orr	r8, r8, #8
  13f3dc:	e28d3070 	add	r3, sp, #112	; 0x70
  13f3e0:	e893000c 	ldm	r3, {r2, r3}
  13f3e4:	e28da0d0 	add	sl, sp, #208	; 0xd0
  13f3e8:	e1921003 	orrs	r1, r2, r3
  13f3ec:	e1a0b00a 	mov	fp, sl
  13f3f0:	0a00004b 	beq	13f524 <printf_core+0xc34>
  13f3f4:	e59f6584 	ldr	r6, [pc, #1412]	; 13f980 <printf_core+0x1090>
  13f3f8:	e3a01000 	mov	r1, #0
  13f3fc:	e202000f 	and	r0, r2, #15
  13f400:	e1a0e222 	lsr	lr, r2, #4
  13f404:	e58d0020 	str	r0, [sp, #32]
  13f408:	e58d1024 	str	r1, [sp, #36]	; 0x24
  13f40c:	e18eee03 	orr	lr, lr, r3, lsl #28
  13f410:	e1a01223 	lsr	r1, r3, #4
  13f414:	e1a03001 	mov	r3, r1
  13f418:	e1a0200e 	mov	r2, lr
  13f41c:	e59d1020 	ldr	r1, [sp, #32]
  13f420:	e0860001 	add	r0, r6, r1
  13f424:	e5d01000 	ldrb	r1, [r0]
  13f428:	e1920003 	orrs	r0, r2, r3
  13f42c:	e18c1001 	orr	r1, ip, r1
  13f430:	e56b1001 	strb	r1, [fp, #-1]!
  13f434:	1affffef 	bne	13f3f8 <printf_core+0xb08>
  13f438:	e2183008 	ands	r3, r8, #8
  13f43c:	0a000039 	beq	13f528 <printf_core+0xc38>
  13f440:	e3a02002 	mov	r2, #2
  13f444:	e59f34f4 	ldr	r3, [pc, #1268]	; 13f940 <printf_core+0x1050>
  13f448:	e58d2020 	str	r2, [sp, #32]
  13f44c:	e59d2010 	ldr	r2, [sp, #16]
  13f450:	e0833242 	add	r3, r3, r2, asr #4
  13f454:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13f458:	eafffdca 	b	13eb88 <printf_core+0x298>
  13f45c:	e59db070 	ldr	fp, [sp, #112]	; 0x70
  13f460:	e59f34f8 	ldr	r3, [pc, #1272]	; 13f960 <printf_core+0x1070>
  13f464:	e35b0000 	cmp	fp, #0
  13f468:	01a0b003 	moveq	fp, r3
  13f46c:	eaffff84 	b	13f284 <printf_core+0x994>
  13f470:	e59d3010 	ldr	r3, [sp, #16]
  13f474:	e203c020 	and	ip, r3, #32
  13f478:	eaffffd7 	b	13f3dc <printf_core+0xaec>
  13f47c:	e3a03000 	mov	r3, #0
  13f480:	e28d60d0 	add	r6, sp, #208	; 0xd0
  13f484:	e046600b 	sub	r6, r6, fp
  13f488:	e58d3020 	str	r3, [sp, #32]
  13f48c:	e59f34ac 	ldr	r3, [pc, #1196]	; 13f940 <printf_core+0x1050>
  13f490:	e1560005 	cmp	r6, r5
  13f494:	a1a05006 	movge	r5, r6
  13f498:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13f49c:	eafffdd3 	b	13ebf0 <printf_core+0x300>
  13f4a0:	e59d3070 	ldr	r3, [sp, #112]	; 0x70
  13f4a4:	e59d2000 	ldr	r2, [sp]
  13f4a8:	e5832000 	str	r2, [r3]
  13f4ac:	eafffeb9 	b	13ef98 <printf_core+0x6a8>
  13f4b0:	e59d2000 	ldr	r2, [sp]
  13f4b4:	e59d1070 	ldr	r1, [sp, #112]	; 0x70
  13f4b8:	e1a03fc2 	asr	r3, r2, #31
  13f4bc:	e881000c 	stm	r1, {r2, r3}
  13f4c0:	eafffeb4 	b	13ef98 <printf_core+0x6a8>
  13f4c4:	e59d3070 	ldr	r3, [sp, #112]	; 0x70
  13f4c8:	e59d2000 	ldr	r2, [sp]
  13f4cc:	e1c320b0 	strh	r2, [r3]
  13f4d0:	eafffeb0 	b	13ef98 <printf_core+0x6a8>
  13f4d4:	e59d3070 	ldr	r3, [sp, #112]	; 0x70
  13f4d8:	e59d2000 	ldr	r2, [sp]
  13f4dc:	e5c32000 	strb	r2, [r3]
  13f4e0:	eafffeac 	b	13ef98 <printf_core+0x6a8>
  13f4e4:	e1a01006 	mov	r1, r6
  13f4e8:	e1a0000b 	mov	r0, fp
  13f4ec:	e59d2004 	ldr	r2, [sp, #4]
  13f4f0:	eb0011bc 	bl	143be8 <__fwritex>
  13f4f4:	eafffddd 	b	13ec70 <printf_core+0x380>
  13f4f8:	e1a02005 	mov	r2, r5
  13f4fc:	e1a03006 	mov	r3, r6
  13f500:	e3a01030 	mov	r1, #48	; 0x30
  13f504:	e59d0004 	ldr	r0, [sp, #4]
  13f508:	ebfffccd 	bl	13e844 <pad.part.0>
  13f50c:	eafffdd3 	b	13ec60 <printf_core+0x370>
  13f510:	e59d1020 	ldr	r1, [sp, #32]
  13f514:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
  13f518:	e59d2004 	ldr	r2, [sp, #4]
  13f51c:	eb0011b1 	bl	143be8 <__fwritex>
  13f520:	eafffdc6 	b	13ec40 <printf_core+0x350>
  13f524:	e3a03000 	mov	r3, #0
  13f528:	e58d3020 	str	r3, [sp, #32]
  13f52c:	e59f340c 	ldr	r3, [pc, #1036]	; 13f940 <printf_core+0x1050>
  13f530:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13f534:	eafffd93 	b	13eb88 <printf_core+0x298>
  13f538:	e3550000 	cmp	r5, #0
  13f53c:	e1a0b005 	mov	fp, r5
  13f540:	bafffe97 	blt	13efa4 <printf_core+0x6b4>
  13f544:	e1550009 	cmp	r5, r9
  13f548:	b3a03000 	movlt	r3, #0
  13f54c:	a3a03001 	movge	r3, #1
  13f550:	e3180a12 	tst	r8, #73728	; 0x12000
  13f554:	e58d3010 	str	r3, [sp, #16]
  13f558:	13a03001 	movne	r3, #1
  13f55c:	e3530000 	cmp	r3, #0
  13f560:	0a000062 	beq	13f6f0 <printf_core+0xe00>
  13f564:	e3550000 	cmp	r5, #0
  13f568:	e59d7070 	ldr	r7, [sp, #112]	; 0x70
  13f56c:	0a000025 	beq	13f608 <printf_core+0xd18>
  13f570:	e5971000 	ldr	r1, [r7]
  13f574:	e3510000 	cmp	r1, #0
  13f578:	0a000022 	beq	13f608 <printf_core+0xd18>
  13f57c:	e3a0a000 	mov	sl, #0
  13f580:	e58d401c 	str	r4, [sp, #28]
  13f584:	e28d6068 	add	r6, sp, #104	; 0x68
  13f588:	e1a0400a 	mov	r4, sl
  13f58c:	e59da004 	ldr	sl, [sp, #4]
  13f590:	ea000004 	b	13f5a8 <printf_core+0xcb8>
  13f594:	e1540005 	cmp	r4, r5
  13f598:	2a000024 	bcs	13f630 <printf_core+0xd40>
  13f59c:	e5b71004 	ldr	r1, [r7, #4]!
  13f5a0:	e3510000 	cmp	r1, #0
  13f5a4:	0a000021 	beq	13f630 <printf_core+0xd40>
  13f5a8:	e1a00006 	mov	r0, r6
  13f5ac:	eb000fa1 	bl	143438 <wctomb>
  13f5b0:	e0844000 	add	r4, r4, r0
  13f5b4:	e1540005 	cmp	r4, r5
  13f5b8:	8a00001c 	bhi	13f630 <printf_core+0xd40>
  13f5bc:	e59a2000 	ldr	r2, [sl]
  13f5c0:	e3120020 	tst	r2, #32
  13f5c4:	1afffff2 	bne	13f594 <printf_core+0xca4>
  13f5c8:	e1a01000 	mov	r1, r0
  13f5cc:	e1a0200a 	mov	r2, sl
  13f5d0:	e1a00006 	mov	r0, r6
  13f5d4:	eb001183 	bl	143be8 <__fwritex>
  13f5d8:	eaffffed 	b	13f594 <printf_core+0xca4>
  13f5dc:	e3590000 	cmp	r9, #0
  13f5e0:	c3a03000 	movgt	r3, #0
  13f5e4:	d3a03001 	movle	r3, #1
  13f5e8:	e3180a12 	tst	r8, #73728	; 0x12000
  13f5ec:	e58d3010 	str	r3, [sp, #16]
  13f5f0:	13a03001 	movne	r3, #1
  13f5f4:	e3530000 	cmp	r3, #0
  13f5f8:	01a0b003 	moveq	fp, r3
  13f5fc:	01a0500b 	moveq	r5, fp
  13f600:	0a00003a 	beq	13f6f0 <printf_core+0xe00>
  13f604:	e3a0b000 	mov	fp, #0
  13f608:	e2283a02 	eor	r3, r8, #8192	; 0x2000
  13f60c:	e3130a12 	tst	r3, #73728	; 0x12000
  13f610:	e59d3010 	ldr	r3, [sp, #16]
  13f614:	13a03001 	movne	r3, #1
  13f618:	e3530000 	cmp	r3, #0
  13f61c:	0a00027d 	beq	140018 <printf_core+0x1728>
  13f620:	e159000b 	cmp	r9, fp
  13f624:	a1a0a009 	movge	sl, r9
  13f628:	b1a0a00b 	movlt	sl, fp
  13f62c:	eafffe59 	b	13ef98 <printf_core+0x6a8>
  13f630:	e59d401c 	ldr	r4, [sp, #28]
  13f634:	eafffff3 	b	13f608 <printf_core+0xd18>
  13f638:	e1a03007 	mov	r3, r7
  13f63c:	e1a0200a 	mov	r2, sl
  13f640:	e3a01020 	mov	r1, #32
  13f644:	e59d0004 	ldr	r0, [sp, #4]
  13f648:	ebfffc7d 	bl	13e844 <pad.part.0>
  13f64c:	eafffd77 	b	13ec30 <printf_core+0x340>
  13f650:	e1a03007 	mov	r3, r7
  13f654:	e1a0200a 	mov	r2, sl
  13f658:	e3a01030 	mov	r1, #48	; 0x30
  13f65c:	e59d0004 	ldr	r0, [sp, #4]
  13f660:	ebfffc77 	bl	13e844 <pad.part.0>
  13f664:	eafffd7b 	b	13ec58 <printf_core+0x368>
  13f668:	e3a05000 	mov	r5, #0
  13f66c:	e1a0b00a 	mov	fp, sl
  13f670:	e1a06005 	mov	r6, r5
  13f674:	eafffd5d 	b	13ebf0 <printf_core+0x300>
  13f678:	e3e01102 	mvn	r1, #-2147483648	; 0x80000000
  13f67c:	e1a0000b 	mov	r0, fp
  13f680:	eb0007e2 	bl	141610 <strnlen>
  13f684:	e7db3000 	ldrb	r3, [fp, r0]
  13f688:	e08b6000 	add	r6, fp, r0
  13f68c:	e3530000 	cmp	r3, #0
  13f690:	0affff01 	beq	13f29c <printf_core+0x9ac>
  13f694:	eafffe42 	b	13efa4 <printf_core+0x6b4>
  13f698:	e3180b02 	tst	r8, #2048	; 0x800
  13f69c:	1a000278 	bne	140084 <printf_core+0x1794>
  13f6a0:	e59f22bc 	ldr	r2, [pc, #700]	; 13f964 <printf_core+0x1074>
  13f6a4:	e2083001 	and	r3, r8, #1
  13f6a8:	e3530000 	cmp	r3, #0
  13f6ac:	e2821005 	add	r1, r2, #5
  13f6b0:	01a03002 	moveq	r3, r2
  13f6b4:	11a03001 	movne	r3, r1
  13f6b8:	e58d3034 	str	r3, [sp, #52]	; 0x34
  13f6bc:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
  13f6c0:	13a03001 	movne	r3, #1
  13f6c4:	e58d3030 	str	r3, [sp, #48]	; 0x30
  13f6c8:	eaffff0d 	b	13f304 <printf_core+0xa14>
  13f6cc:	e3a03001 	mov	r3, #1
  13f6d0:	e2766000 	rsbs	r6, r6, #0
  13f6d4:	e58d3020 	str	r3, [sp, #32]
  13f6d8:	e59f3260 	ldr	r3, [pc, #608]	; 13f940 <printf_core+0x1050>
  13f6dc:	e2e77000 	rsc	r7, r7, #0
  13f6e0:	e58d6070 	str	r6, [sp, #112]	; 0x70
  13f6e4:	e58d7074 	str	r7, [sp, #116]	; 0x74
  13f6e8:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13f6ec:	eafffe75 	b	13f0c8 <printf_core+0x7d8>
  13f6f0:	e1a0300b 	mov	r3, fp
  13f6f4:	e1a02009 	mov	r2, r9
  13f6f8:	e3a01020 	mov	r1, #32
  13f6fc:	e59d0004 	ldr	r0, [sp, #4]
  13f700:	ebfffc4f 	bl	13e844 <pad.part.0>
  13f704:	e3a03000 	mov	r3, #0
  13f708:	e58d3010 	str	r3, [sp, #16]
  13f70c:	eaffff94 	b	13f564 <printf_core+0xc74>
  13f710:	e28d206c 	add	r2, sp, #108	; 0x6c
  13f714:	e1a01007 	mov	r1, r7
  13f718:	eb000f2f 	bl	1433dc <frexpl>
  13f71c:	e1a02000 	mov	r2, r0
  13f720:	e1a03001 	mov	r3, r1
  13f724:	eb0013f6 	bl	144704 <__adddf3>
  13f728:	e3a03000 	mov	r3, #0
  13f72c:	e3a02000 	mov	r2, #0
  13f730:	e58d001c 	str	r0, [sp, #28]
  13f734:	e58d1038 	str	r1, [sp, #56]	; 0x38
  13f738:	eb00162c 	bl	144ff0 <__aeabi_dcmpeq>
  13f73c:	e59d306c 	ldr	r3, [sp, #108]	; 0x6c
  13f740:	e3500000 	cmp	r0, #0
  13f744:	02433001 	subeq	r3, r3, #1
  13f748:	158d3020 	strne	r3, [sp, #32]
  13f74c:	058d3020 	streq	r3, [sp, #32]
  13f750:	058d306c 	streq	r3, [sp, #108]	; 0x6c
  13f754:	e59d3010 	ldr	r3, [sp, #16]
  13f758:	e3833020 	orr	r3, r3, #32
  13f75c:	e3530061 	cmp	r3, #97	; 0x61
  13f760:	e58d303c 	str	r3, [sp, #60]	; 0x3c
  13f764:	0a000267 	beq	140108 <printf_core+0x1818>
  13f768:	e3550000 	cmp	r5, #0
  13f76c:	ba000460 	blt	1408f4 <printf_core+0x2004>
  13f770:	13a03001 	movne	r3, #1
  13f774:	03a03000 	moveq	r3, #0
  13f778:	e58d3044 	str	r3, [sp, #68]	; 0x44
  13f77c:	e59d701c 	ldr	r7, [sp, #28]
  13f780:	e59d6038 	ldr	r6, [sp, #56]	; 0x38
  13f784:	e1a00007 	mov	r0, r7
  13f788:	e1a01006 	mov	r1, r6
  13f78c:	e3a02000 	mov	r2, #0
  13f790:	e3a03000 	mov	r3, #0
  13f794:	eb001615 	bl	144ff0 <__aeabi_dcmpeq>
  13f798:	e3500000 	cmp	r0, #0
  13f79c:	1a00000a 	bne	13f7cc <printf_core+0xedc>
  13f7a0:	e59f31c0 	ldr	r3, [pc, #448]	; 13f968 <printf_core+0x1078>
  13f7a4:	e1a00007 	mov	r0, r7
  13f7a8:	e1a01006 	mov	r1, r6
  13f7ac:	e3a02000 	mov	r2, #0
  13f7b0:	eb0014c0 	bl	144ab8 <__aeabi_dmul>
  13f7b4:	e59d3020 	ldr	r3, [sp, #32]
  13f7b8:	e58d001c 	str	r0, [sp, #28]
  13f7bc:	e243301c 	sub	r3, r3, #28
  13f7c0:	e58d1038 	str	r1, [sp, #56]	; 0x38
  13f7c4:	e58d3020 	str	r3, [sp, #32]
  13f7c8:	e58d306c 	str	r3, [sp, #108]	; 0x6c
  13f7cc:	e59d3020 	ldr	r3, [sp, #32]
  13f7d0:	e59d601c 	ldr	r6, [sp, #28]
  13f7d4:	e3530000 	cmp	r3, #0
  13f7d8:	a28d3e1f 	addge	r3, sp, #496	; 0x1f0
  13f7dc:	b28d30d0 	addlt	r3, sp, #208	; 0xd0
  13f7e0:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13f7e4:	e59db02c 	ldr	fp, [sp, #44]	; 0x2c
  13f7e8:	e59d7038 	ldr	r7, [sp, #56]	; 0x38
  13f7ec:	e1a01007 	mov	r1, r7
  13f7f0:	e1a00006 	mov	r0, r6
  13f7f4:	eb00162d 	bl	1450b0 <__aeabi_d2uiz>
  13f7f8:	e48b0004 	str	r0, [fp], #4
  13f7fc:	eb00146b 	bl	1449b0 <__aeabi_ui2d>
  13f800:	e1a02000 	mov	r2, r0
  13f804:	e1a03001 	mov	r3, r1
  13f808:	e1a00006 	mov	r0, r6
  13f80c:	e1a01007 	mov	r1, r7
  13f810:	eb0013ba 	bl	144700 <__aeabi_dsub>
  13f814:	e3a02000 	mov	r2, #0
  13f818:	e59f314c 	ldr	r3, [pc, #332]	; 13f96c <printf_core+0x107c>
  13f81c:	eb0014a5 	bl	144ab8 <__aeabi_dmul>
  13f820:	e3a02000 	mov	r2, #0
  13f824:	e3a03000 	mov	r3, #0
  13f828:	e1a07001 	mov	r7, r1
  13f82c:	e1a06000 	mov	r6, r0
  13f830:	eb0015ee 	bl	144ff0 <__aeabi_dcmpeq>
  13f834:	e3500000 	cmp	r0, #0
  13f838:	0affffeb 	beq	13f7ec <printf_core+0xefc>
  13f83c:	e59d2020 	ldr	r2, [sp, #32]
  13f840:	e1a0300b 	mov	r3, fp
  13f844:	e3520000 	cmp	r2, #0
  13f848:	e58db01c 	str	fp, [sp, #28]
  13f84c:	e59db02c 	ldr	fp, [sp, #44]	; 0x2c
  13f850:	da000067 	ble	13f9f4 <printf_core+0x1104>
  13f854:	e58da048 	str	sl, [sp, #72]	; 0x48
  13f858:	e1a0a003 	mov	sl, r3
  13f85c:	e58d5060 	str	r5, [sp, #96]	; 0x60
  13f860:	e58d4064 	str	r4, [sp, #100]	; 0x64
  13f864:	e58d9058 	str	r9, [sp, #88]	; 0x58
  13f868:	e58d805c 	str	r8, [sp, #92]	; 0x5c
  13f86c:	e28d9050 	add	r9, sp, #80	; 0x50
  13f870:	e8990300 	ldm	r9, {r8, r9}
  13f874:	e59d2020 	ldr	r2, [sp, #32]
  13f878:	e24a3004 	sub	r3, sl, #4
  13f87c:	e352001d 	cmp	r2, #29
  13f880:	b1a05002 	movlt	r5, r2
  13f884:	a3a0501d 	movge	r5, #29
  13f888:	e153000b 	cmp	r3, fp
  13f88c:	e58d3038 	str	r3, [sp, #56]	; 0x38
  13f890:	3a00001e 	bcc	13f910 <printf_core+0x1020>
  13f894:	e1a04003 	mov	r4, r3
  13f898:	e2453020 	sub	r3, r5, #32
  13f89c:	e58da040 	str	sl, [sp, #64]	; 0x40
  13f8a0:	e3a00000 	mov	r0, #0
  13f8a4:	e1a0a003 	mov	sl, r3
  13f8a8:	e2652020 	rsb	r2, r5, #32
  13f8ac:	e58d201c 	str	r2, [sp, #28]
  13f8b0:	e5941000 	ldr	r1, [r4]
  13f8b4:	e59dc01c 	ldr	ip, [sp, #28]
  13f8b8:	e1a09a11 	lsl	r9, r1, sl
  13f8bc:	e1a08511 	lsl	r8, r1, r5
  13f8c0:	e0986000 	adds	r6, r8, r0
  13f8c4:	e1899c31 	orr	r9, r9, r1, lsr ip
  13f8c8:	e2a97000 	adc	r7, r9, #0
  13f8cc:	e28f305c 	add	r3, pc, #92	; 0x5c
  13f8d0:	e893000c 	ldm	r3, {r2, r3}
  13f8d4:	e1a00006 	mov	r0, r6
  13f8d8:	e1a01007 	mov	r1, r7
  13f8dc:	eb00163d 	bl	1451d8 <__aeabi_uldivmod>
  13f8e0:	e1a00006 	mov	r0, r6
  13f8e4:	e4042004 	str	r2, [r4], #-4
  13f8e8:	e1a01007 	mov	r1, r7
  13f8ec:	e28f303c 	add	r3, pc, #60	; 0x3c
  13f8f0:	e893000c 	ldm	r3, {r2, r3}
  13f8f4:	eb001637 	bl	1451d8 <__aeabi_uldivmod>
  13f8f8:	e154000b 	cmp	r4, fp
  13f8fc:	2affffeb 	bcs	13f8b0 <printf_core+0xfc0>
  13f900:	e3500000 	cmp	r0, #0
  13f904:	e59da040 	ldr	sl, [sp, #64]	; 0x40
  13f908:	150b0004 	strne	r0, [fp, #-4]
  13f90c:	124bb004 	subne	fp, fp, #4
  13f910:	e15b000a 	cmp	fp, sl
  13f914:	2a000028 	bcs	13f9bc <printf_core+0x10cc>
  13f918:	e51a3004 	ldr	r3, [sl, #-4]
  13f91c:	e3530000 	cmp	r3, #0
  13f920:	059d3038 	ldreq	r3, [sp, #56]	; 0x38
  13f924:	0a000021 	beq	13f9b0 <printf_core+0x10c0>
  13f928:	ea000023 	b	13f9bc <printf_core+0x10cc>
  13f92c:	e1a00000 	nop			; (mov r0, r0)
  13f930:	3b9aca00 	.word	0x3b9aca00
  13f934:	00000000 	.word	0x00000000
  13f938:	00012889 	.word	0x00012889
  13f93c:	0ccccccc 	.word	0x0ccccccc
  13f940:	0014cd90 	.word	0x0014cd90
  13f944:	0014cdcc 	.word	0x0014cdcc
  13f948:	0014cda4 	.word	0x0014cda4
  13f94c:	7fefffff 	.word	0x7fefffff
  13f950:	0014cdbc 	.word	0x0014cdbc
  13f954:	0014cdb8 	.word	0x0014cdb8
  13f958:	0014cdc4 	.word	0x0014cdc4
  13f95c:	0014cdc0 	.word	0x0014cdc0
  13f960:	0014cd9c 	.word	0x0014cd9c
  13f964:	0014cda5 	.word	0x0014cda5
  13f968:	41b00000 	.word	0x41b00000
  13f96c:	41cdcd65 	.word	0x41cdcd65
  13f970:	38e38e39 	.word	0x38e38e39
  13f974:	3b9aca00 	.word	0x3b9aca00
  13f978:	0014cd91 	.word	0x0014cd91
  13f97c:	0014cda7 	.word	0x0014cda7
  13f980:	0014cf9c 	.word	0x0014cf9c
  13f984:	cccccccd 	.word	0xcccccccd
  13f988:	0014cdc8 	.word	0x0014cdc8
  13f98c:	3b9ac9ff 	.word	0x3b9ac9ff
  13f990:	40300000 	.word	0x40300000
  13f994:	3fe00000 	.word	0x3fe00000
  13f998:	43400000 	.word	0x43400000
  13f99c:	3ff00000 	.word	0x3ff00000
  13f9a0:	3ff80000 	.word	0x3ff80000
  13f9a4:	e5332004 	ldr	r2, [r3, #-4]!
  13f9a8:	e3520000 	cmp	r2, #0
  13f9ac:	1a000002 	bne	13f9bc <printf_core+0x10cc>
  13f9b0:	e153000b 	cmp	r3, fp
  13f9b4:	e1a0a003 	mov	sl, r3
  13f9b8:	8afffff9 	bhi	13f9a4 <printf_core+0x10b4>
  13f9bc:	e59d3020 	ldr	r3, [sp, #32]
  13f9c0:	e0433005 	sub	r3, r3, r5
  13f9c4:	e3530000 	cmp	r3, #0
  13f9c8:	e58d3020 	str	r3, [sp, #32]
  13f9cc:	caffffa8 	bgt	13f874 <printf_core+0xf84>
  13f9d0:	e58d8050 	str	r8, [sp, #80]	; 0x50
  13f9d4:	e58d9054 	str	r9, [sp, #84]	; 0x54
  13f9d8:	e58da01c 	str	sl, [sp, #28]
  13f9dc:	e59d5060 	ldr	r5, [sp, #96]	; 0x60
  13f9e0:	e59da048 	ldr	sl, [sp, #72]	; 0x48
  13f9e4:	e59d4064 	ldr	r4, [sp, #100]	; 0x64
  13f9e8:	e59d805c 	ldr	r8, [sp, #92]	; 0x5c
  13f9ec:	e59d9058 	ldr	r9, [sp, #88]	; 0x58
  13f9f0:	e58d306c 	str	r3, [sp, #108]	; 0x6c
  13f9f4:	e59dc020 	ldr	ip, [sp, #32]
  13f9f8:	e35c0000 	cmp	ip, #0
  13f9fc:	0a000037 	beq	13fae0 <printf_core+0x11f0>
  13fa00:	e58da038 	str	sl, [sp, #56]	; 0x38
  13fa04:	e1a0a00c 	mov	sl, ip
  13fa08:	e51f10a0 	ldr	r1, [pc, #-160]	; 13f970 <printf_core+0x1080>
  13fa0c:	e2850019 	add	r0, r5, #25
  13fa10:	e0832190 	umull	r2, r3, r0, r1
  13fa14:	e1a030a3 	lsr	r3, r3, #1
  13fa18:	e2836001 	add	r6, r3, #1
  13fa1c:	e1a03106 	lsl	r3, r6, #2
  13fa20:	e51f70b4 	ldr	r7, [pc, #-180]	; 13f974 <printf_core+0x1084>
  13fa24:	e59d001c 	ldr	r0, [sp, #28]
  13fa28:	e58d3020 	str	r3, [sp, #32]
  13fa2c:	e58d9040 	str	r9, [sp, #64]	; 0x40
  13fa30:	e37a0009 	cmn	sl, #9
  13fa34:	a26ac000 	rsbge	ip, sl, #0
  13fa38:	b28aa009 	addlt	sl, sl, #9
  13fa3c:	b3a0c009 	movlt	ip, #9
  13fa40:	a3a0a000 	movge	sl, #0
  13fa44:	e150000b 	cmp	r0, fp
  13fa48:	e59b1000 	ldr	r1, [fp]
  13fa4c:	9a000191 	bls	140098 <printf_core+0x17a8>
  13fa50:	e3a0e001 	mov	lr, #1
  13fa54:	e1a0ec1e 	lsl	lr, lr, ip
  13fa58:	e1a0200b 	mov	r2, fp
  13fa5c:	e3a03000 	mov	r3, #0
  13fa60:	e24ee001 	sub	lr, lr, #1
  13fa64:	e1a09c57 	asr	r9, r7, ip
  13fa68:	ea000000 	b	13fa70 <printf_core+0x1180>
  13fa6c:	e5921000 	ldr	r1, [r2]
  13fa70:	e0833c31 	add	r3, r3, r1, lsr ip
  13fa74:	e4823004 	str	r3, [r2], #4
  13fa78:	e00e3001 	and	r3, lr, r1
  13fa7c:	e0010399 	mul	r1, r9, r3
  13fa80:	e1520000 	cmp	r2, r0
  13fa84:	e1a03001 	mov	r3, r1
  13fa88:	3afffff7 	bcc	13fa6c <printf_core+0x117c>
  13fa8c:	e59b2000 	ldr	r2, [fp]
  13fa90:	e3520000 	cmp	r2, #0
  13fa94:	028bb004 	addeq	fp, fp, #4
  13fa98:	e3510000 	cmp	r1, #0
  13fa9c:	15801000 	strne	r1, [r0]
  13faa0:	12800004 	addne	r0, r0, #4
  13faa4:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
  13faa8:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  13faac:	e3520066 	cmp	r2, #102	; 0x66
  13fab0:	11a0300b 	movne	r3, fp
  13fab4:	e0402003 	sub	r2, r0, r3
  13fab8:	e1560142 	cmp	r6, r2, asr #2
  13fabc:	b59d2020 	ldrlt	r2, [sp, #32]
  13fac0:	b0830002 	addlt	r0, r3, r2
  13fac4:	e35a0000 	cmp	sl, #0
  13fac8:	1affffd8 	bne	13fa30 <printf_core+0x1140>
  13facc:	e1a0300a 	mov	r3, sl
  13fad0:	e59d9040 	ldr	r9, [sp, #64]	; 0x40
  13fad4:	e59da038 	ldr	sl, [sp, #56]	; 0x38
  13fad8:	e58d001c 	str	r0, [sp, #28]
  13fadc:	e58d306c 	str	r3, [sp, #108]	; 0x6c
  13fae0:	e59d301c 	ldr	r3, [sp, #28]
  13fae4:	e153000b 	cmp	r3, fp
  13fae8:	91a03005 	movls	r3, r5
  13faec:	93a06000 	movls	r6, #0
  13faf0:	9a000013 	bls	13fb44 <printf_core+0x1254>
  13faf4:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  13faf8:	e59b1000 	ldr	r1, [fp]
  13fafc:	e043600b 	sub	r6, r3, fp
  13fb00:	e59d303c 	ldr	r3, [sp, #60]	; 0x3c
  13fb04:	e1a06146 	asr	r6, r6, #2
  13fb08:	e2530066 	subs	r0, r3, #102	; 0x66
  13fb0c:	13a00001 	movne	r0, #1
  13fb10:	e3510009 	cmp	r1, #9
  13fb14:	e0866186 	add	r6, r6, r6, lsl #3
  13fb18:	83a0200a 	movhi	r2, #10
  13fb1c:	81a03000 	movhi	r3, r0
  13fb20:	9a000005 	bls	13fb3c <printf_core+0x124c>
  13fb24:	e0822102 	add	r2, r2, r2, lsl #2
  13fb28:	e1a02082 	lsl	r2, r2, #1
  13fb2c:	e1510002 	cmp	r1, r2
  13fb30:	e2866001 	add	r6, r6, #1
  13fb34:	2afffffa 	bcs	13fb24 <printf_core+0x1234>
  13fb38:	e1a00003 	mov	r0, r3
  13fb3c:	e0030096 	mul	r3, r6, r0
  13fb40:	e0453003 	sub	r3, r5, r3
  13fb44:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
  13fb48:	e59d1044 	ldr	r1, [sp, #68]	; 0x44
  13fb4c:	e59dc02c 	ldr	ip, [sp, #44]	; 0x2c
  13fb50:	e3520067 	cmp	r2, #103	; 0x67
  13fb54:	13a01000 	movne	r1, #0
  13fb58:	02011001 	andeq	r1, r1, #1
  13fb5c:	e59d201c 	ldr	r2, [sp, #28]
  13fb60:	e0433001 	sub	r3, r3, r1
  13fb64:	e042200c 	sub	r2, r2, ip
  13fb68:	e1a02142 	asr	r2, r2, #2
  13fb6c:	e2422001 	sub	r2, r2, #1
  13fb70:	e0822182 	add	r2, r2, r2, lsl #3
  13fb74:	e1530002 	cmp	r3, r2
  13fb78:	aa000057 	bge	13fcdc <printf_core+0x13ec>
  13fb7c:	e51f2214 	ldr	r2, [pc, #-532]	; 13f970 <printf_core+0x1080>
  13fb80:	e2833b09 	add	r3, r3, #9216	; 0x2400
  13fb84:	e0c10293 	smull	r0, r1, r3, r2
  13fb88:	e1a07fc3 	asr	r7, r3, #31
  13fb8c:	e06770c1 	rsb	r7, r7, r1, asr #1
  13fb90:	e0872187 	add	r2, r7, r7, lsl #3
  13fb94:	e0433002 	sub	r3, r3, r2
  13fb98:	e2833001 	add	r3, r3, #1
  13fb9c:	e2477fff 	sub	r7, r7, #1020	; 0x3fc
  13fba0:	e247710f 	sub	r7, r7, #-1073741821	; 0xc0000003
  13fba4:	e3530009 	cmp	r3, #9
  13fba8:	e08c7107 	add	r7, ip, r7, lsl #2
  13fbac:	0a00036b 	beq	140960 <printf_core+0x2070>
  13fbb0:	e3a0200a 	mov	r2, #10
  13fbb4:	e2833001 	add	r3, r3, #1
  13fbb8:	e0822102 	add	r2, r2, r2, lsl #2
  13fbbc:	e3530009 	cmp	r3, #9
  13fbc0:	e1a02082 	lsl	r2, r2, #1
  13fbc4:	1afffffa 	bne	13fbb4 <printf_core+0x12c4>
  13fbc8:	e58d2038 	str	r2, [sp, #56]	; 0x38
  13fbcc:	e5973000 	ldr	r3, [r7]
  13fbd0:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
  13fbd4:	e1a00003 	mov	r0, r3
  13fbd8:	e58d3048 	str	r3, [sp, #72]	; 0x48
  13fbdc:	ebffe3a0 	bl	138a64 <__aeabi_uidivmod>
  13fbe0:	e2513000 	subs	r3, r1, #0
  13fbe4:	e58d3044 	str	r3, [sp, #68]	; 0x44
  13fbe8:	1a000003 	bne	13fbfc <printf_core+0x130c>
  13fbec:	e59d301c 	ldr	r3, [sp, #28]
  13fbf0:	e287c004 	add	ip, r7, #4
  13fbf4:	e153000c 	cmp	r3, ip
  13fbf8:	0a000033 	beq	13fccc <printf_core+0x13dc>
  13fbfc:	e3100001 	tst	r0, #1
  13fc00:	1a000336 	bne	1408e0 <printf_core+0x1ff0>
  13fc04:	e51f3298 	ldr	r3, [pc, #-664]	; 13f974 <printf_core+0x1084>
  13fc08:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
  13fc0c:	e157000b 	cmp	r7, fp
  13fc10:	e0422003 	sub	r2, r2, r3
  13fc14:	e16f2f12 	clz	r2, r2
  13fc18:	e1a022a2 	lsr	r2, r2, #5
  13fc1c:	93a02000 	movls	r2, #0
  13fc20:	e3520000 	cmp	r2, #0
  13fc24:	0a000329 	beq	1408d0 <printf_core+0x1fe0>
  13fc28:	e5173004 	ldr	r3, [r7, #-4]
  13fc2c:	e51f229c 	ldr	r2, [pc, #-668]	; 13f998 <printf_core+0x10a8>
  13fc30:	e2033001 	and	r3, r3, #1
  13fc34:	e58d2020 	str	r2, [sp, #32]
  13fc38:	e58d3040 	str	r3, [sp, #64]	; 0x40
  13fc3c:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
  13fc40:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
  13fc44:	e15300c2 	cmp	r3, r2, asr #1
  13fc48:	3a00031d 	bcc	1408c4 <printf_core+0x1fd4>
  13fc4c:	13a0e000 	movne	lr, #0
  13fc50:	151fc2b8 	ldrne	ip, [pc, #-696]	; 13f9a0 <printf_core+0x10b0>
  13fc54:	0a00032a 	beq	140904 <printf_core+0x2014>
  13fc58:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
  13fc5c:	e3530000 	cmp	r3, #0
  13fc60:	0a000006 	beq	13fc80 <printf_core+0x1390>
  13fc64:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
  13fc68:	e5d33000 	ldrb	r3, [r3]
  13fc6c:	e353002d 	cmp	r3, #45	; 0x2d
  13fc70:	059d3020 	ldreq	r3, [sp, #32]
  13fc74:	028cc102 	addeq	ip, ip, #-2147483648	; 0x80000000
  13fc78:	02833102 	addeq	r3, r3, #-2147483648	; 0x80000000
  13fc7c:	058d3020 	streq	r3, [sp, #32]
  13fc80:	e1a0200e 	mov	r2, lr
  13fc84:	e1a0300c 	mov	r3, ip
  13fc88:	e59de044 	ldr	lr, [sp, #68]	; 0x44
  13fc8c:	e59dc048 	ldr	ip, [sp, #72]	; 0x48
  13fc90:	e59d0040 	ldr	r0, [sp, #64]	; 0x40
  13fc94:	e04cc00e 	sub	ip, ip, lr
  13fc98:	e59d1020 	ldr	r1, [sp, #32]
  13fc9c:	e58dc044 	str	ip, [sp, #68]	; 0x44
  13fca0:	eb001297 	bl	144704 <__adddf3>
  13fca4:	e1a02000 	mov	r2, r0
  13fca8:	e1a03001 	mov	r3, r1
  13fcac:	e59d0040 	ldr	r0, [sp, #64]	; 0x40
  13fcb0:	e59d1020 	ldr	r1, [sp, #32]
  13fcb4:	eb0014cd 	bl	144ff0 <__aeabi_dcmpeq>
  13fcb8:	e2502000 	subs	r2, r0, #0
  13fcbc:	0a0002ab 	beq	140770 <printf_core+0x1e80>
  13fcc0:	e1a0c007 	mov	ip, r7
  13fcc4:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
  13fcc8:	e48c3004 	str	r3, [ip], #4
  13fccc:	e59d301c 	ldr	r3, [sp, #28]
  13fcd0:	e153000c 	cmp	r3, ip
  13fcd4:	21a0300c 	movcs	r3, ip
  13fcd8:	e58d301c 	str	r3, [sp, #28]
  13fcdc:	e59d301c 	ldr	r3, [sp, #28]
  13fce0:	e15b0003 	cmp	fp, r3
  13fce4:	2a00000c 	bcs	13fd1c <printf_core+0x142c>
  13fce8:	e5133004 	ldr	r3, [r3, #-4]
  13fcec:	e3530000 	cmp	r3, #0
  13fcf0:	059d301c 	ldreq	r3, [sp, #28]
  13fcf4:	02433004 	subeq	r3, r3, #4
  13fcf8:	0a000003 	beq	13fd0c <printf_core+0x141c>
  13fcfc:	ea000006 	b	13fd1c <printf_core+0x142c>
  13fd00:	e5332004 	ldr	r2, [r3, #-4]!
  13fd04:	e3520000 	cmp	r2, #0
  13fd08:	1a000002 	bne	13fd18 <printf_core+0x1428>
  13fd0c:	e153000b 	cmp	r3, fp
  13fd10:	e1a01003 	mov	r1, r3
  13fd14:	8afffff9 	bhi	13fd00 <printf_core+0x1410>
  13fd18:	e58d101c 	str	r1, [sp, #28]
  13fd1c:	e59d303c 	ldr	r3, [sp, #60]	; 0x3c
  13fd20:	e3530067 	cmp	r3, #103	; 0x67
  13fd24:	0a000192 	beq	140374 <printf_core+0x1a84>
  13fd28:	e3550000 	cmp	r5, #0
  13fd2c:	1a00018b 	bne	140360 <printf_core+0x1a70>
  13fd30:	e3a02001 	mov	r2, #1
  13fd34:	e1a031a8 	lsr	r3, r8, #3
  13fd38:	e0033002 	and	r3, r3, r2
  13fd3c:	e3e0e102 	mvn	lr, #-2147483648	; 0x80000000
  13fd40:	e59d1010 	ldr	r1, [sp, #16]
  13fd44:	e0833002 	add	r3, r3, r2
  13fd48:	e381a020 	orr	sl, r1, #32
  13fd4c:	e35a0066 	cmp	sl, #102	; 0x66
  13fd50:	e04ee003 	sub	lr, lr, r3
  13fd54:	0a000280 	beq	14075c <printf_core+0x1e6c>
  13fd58:	e026cfc6 	eor	ip, r6, r6, asr #31
  13fd5c:	e28d7090 	add	r7, sp, #144	; 0x90
  13fd60:	e3560000 	cmp	r6, #0
  13fd64:	e04ccfc6 	sub	ip, ip, r6, asr #31
  13fd68:	e1a02007 	mov	r2, r7
  13fd6c:	0a00000a 	beq	13fd9c <printf_core+0x14ac>
  13fd70:	e58d3020 	str	r3, [sp, #32]
  13fd74:	e51f33f8 	ldr	r3, [pc, #-1016]	; 13f984 <printf_core+0x1094>
  13fd78:	e081039c 	umull	r0, r1, ip, r3
  13fd7c:	e1a001a1 	lsr	r0, r1, #3
  13fd80:	e0801100 	add	r1, r0, r0, lsl #2
  13fd84:	e04c1081 	sub	r1, ip, r1, lsl #1
  13fd88:	e2811030 	add	r1, r1, #48	; 0x30
  13fd8c:	e250c000 	subs	ip, r0, #0
  13fd90:	e5621001 	strb	r1, [r2, #-1]!
  13fd94:	1afffff6 	bne	13fd74 <printf_core+0x1484>
  13fd98:	e59d3020 	ldr	r3, [sp, #32]
  13fd9c:	e0471002 	sub	r1, r7, r2
  13fda0:	e3510001 	cmp	r1, #1
  13fda4:	ca000004 	bgt	13fdbc <printf_core+0x14cc>
  13fda8:	e3a01030 	mov	r1, #48	; 0x30
  13fdac:	e5621001 	strb	r1, [r2, #-1]!
  13fdb0:	e0470002 	sub	r0, r7, r2
  13fdb4:	e3500001 	cmp	r0, #1
  13fdb8:	dafffffb 	ble	13fdac <printf_core+0x14bc>
  13fdbc:	e3560000 	cmp	r6, #0
  13fdc0:	a3a0102b 	movge	r1, #43	; 0x2b
  13fdc4:	b3a0102d 	movlt	r1, #45	; 0x2d
  13fdc8:	e2420002 	sub	r0, r2, #2
  13fdcc:	e0477000 	sub	r7, r7, r0
  13fdd0:	e58d004c 	str	r0, [sp, #76]	; 0x4c
  13fdd4:	e59d0010 	ldr	r0, [sp, #16]
  13fdd8:	e157000e 	cmp	r7, lr
  13fddc:	e5420002 	strb	r0, [r2, #-2]
  13fde0:	e5421001 	strb	r1, [r2, #-1]
  13fde4:	cafffc6e 	bgt	13efa4 <printf_core+0x6b4>
  13fde8:	e0833007 	add	r3, r3, r7
  13fdec:	e3e02102 	mvn	r2, #-2147483648	; 0x80000000
  13fdf0:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
  13fdf4:	e0422001 	sub	r2, r2, r1
  13fdf8:	e1520003 	cmp	r2, r3
  13fdfc:	bafffc68 	blt	13efa4 <printf_core+0x6b4>
  13fe00:	e0813003 	add	r3, r1, r3
  13fe04:	e1590003 	cmp	r9, r3
  13fe08:	e58d3010 	str	r3, [sp, #16]
  13fe0c:	c3a03000 	movgt	r3, #0
  13fe10:	d3a03001 	movle	r3, #1
  13fe14:	e3180a12 	tst	r8, #73728	; 0x12000
  13fe18:	e58d3020 	str	r3, [sp, #32]
  13fe1c:	13a03001 	movne	r3, #1
  13fe20:	e3530000 	cmp	r3, #0
  13fe24:	0a000246 	beq	140744 <printf_core+0x1e54>
  13fe28:	e59d3004 	ldr	r3, [sp, #4]
  13fe2c:	e5933000 	ldr	r3, [r3]
  13fe30:	e3130020 	tst	r3, #32
  13fe34:	0a00023d 	beq	140730 <printf_core+0x1e40>
  13fe38:	e2283801 	eor	r3, r8, #65536	; 0x10000
  13fe3c:	e3130a12 	tst	r3, #73728	; 0x12000
  13fe40:	e59d3020 	ldr	r3, [sp, #32]
  13fe44:	13a03001 	movne	r3, #1
  13fe48:	e3530000 	cmp	r3, #0
  13fe4c:	0a000231 	beq	140718 <printf_core+0x1e28>
  13fe50:	e35a0066 	cmp	sl, #102	; 0x66
  13fe54:	0a00018f 	beq	140498 <printf_core+0x1ba8>
  13fe58:	e59d301c 	ldr	r3, [sp, #28]
  13fe5c:	e15b0003 	cmp	fp, r3
  13fe60:	228b3004 	addcs	r3, fp, #4
  13fe64:	258d301c 	strcs	r3, [sp, #28]
  13fe68:	e59d301c 	ldr	r3, [sp, #28]
  13fe6c:	e15b0003 	cmp	fp, r3
  13fe70:	23a03000 	movcs	r3, #0
  13fe74:	33a03001 	movcc	r3, #1
  13fe78:	e3550000 	cmp	r5, #0
  13fe7c:	b3a03000 	movlt	r3, #0
  13fe80:	e3530000 	cmp	r3, #0
  13fe84:	0a000036 	beq	13ff64 <printf_core+0x1674>
  13fe88:	e1a0600b 	mov	r6, fp
  13fe8c:	e28d7090 	add	r7, sp, #144	; 0x90
  13fe90:	e58d9030 	str	r9, [sp, #48]	; 0x30
  13fe94:	e59d9004 	ldr	r9, [sp, #4]
  13fe98:	e287a009 	add	sl, r7, #9
  13fe9c:	e58d802c 	str	r8, [sp, #44]	; 0x2c
  13fea0:	e58d4034 	str	r4, [sp, #52]	; 0x34
  13fea4:	e5962000 	ldr	r2, [r6]
  13fea8:	e599e000 	ldr	lr, [r9]
  13feac:	e3520000 	cmp	r2, #0
  13feb0:	1287c009 	addne	ip, r7, #9
  13feb4:	0a000046 	beq	13ffd4 <printf_core+0x16e4>
  13feb8:	e51f353c 	ldr	r3, [pc, #-1340]	; 13f984 <printf_core+0x1094>
  13febc:	e0810392 	umull	r0, r1, r2, r3
  13fec0:	e1a031a1 	lsr	r3, r1, #3
  13fec4:	e0831103 	add	r1, r3, r3, lsl #2
  13fec8:	e0422081 	sub	r2, r2, r1, lsl #1
  13fecc:	e2821030 	add	r1, r2, #48	; 0x30
  13fed0:	e2532000 	subs	r2, r3, #0
  13fed4:	e56c1001 	strb	r1, [ip, #-1]!
  13fed8:	1afffff6 	bne	13feb8 <printf_core+0x15c8>
  13fedc:	e2872009 	add	r2, r7, #9
  13fee0:	e15c0002 	cmp	ip, r2
  13fee4:	0a00003a 	beq	13ffd4 <printf_core+0x16e4>
  13fee8:	e15b0006 	cmp	fp, r6
  13feec:	e20ee020 	and	lr, lr, #32
  13fef0:	0a00003d 	beq	13ffec <printf_core+0x16fc>
  13fef4:	e15c0007 	cmp	ip, r7
  13fef8:	9a000003 	bls	13ff0c <printf_core+0x161c>
  13fefc:	e3a02030 	mov	r2, #48	; 0x30
  13ff00:	e56c2001 	strb	r2, [ip, #-1]!
  13ff04:	e15c0007 	cmp	ip, r7
  13ff08:	8afffffc 	bhi	13ff00 <printf_core+0x1610>
  13ff0c:	e04a400c 	sub	r4, sl, ip
  13ff10:	e35e0000 	cmp	lr, #0
  13ff14:	1a000005 	bne	13ff30 <printf_core+0x1640>
  13ff18:	e1550004 	cmp	r5, r4
  13ff1c:	e1a0000c 	mov	r0, ip
  13ff20:	b1a01005 	movlt	r1, r5
  13ff24:	a1a01004 	movge	r1, r4
  13ff28:	e1a02009 	mov	r2, r9
  13ff2c:	eb000f2d 	bl	143be8 <__fwritex>
  13ff30:	e59d201c 	ldr	r2, [sp, #28]
  13ff34:	e2866004 	add	r6, r6, #4
  13ff38:	e1560002 	cmp	r6, r2
  13ff3c:	e0455004 	sub	r5, r5, r4
  13ff40:	23a02000 	movcs	r2, #0
  13ff44:	33a02001 	movcc	r2, #1
  13ff48:	e3550000 	cmp	r5, #0
  13ff4c:	b3a02000 	movlt	r2, #0
  13ff50:	e3520000 	cmp	r2, #0
  13ff54:	1affffd2 	bne	13fea4 <printf_core+0x15b4>
  13ff58:	e59d9030 	ldr	r9, [sp, #48]	; 0x30
  13ff5c:	e59d802c 	ldr	r8, [sp, #44]	; 0x2c
  13ff60:	e59d4034 	ldr	r4, [sp, #52]	; 0x34
  13ff64:	e2852012 	add	r2, r5, #18
  13ff68:	e3520012 	cmp	r2, #18
  13ff6c:	da000003 	ble	13ff80 <printf_core+0x1690>
  13ff70:	e3a03012 	mov	r3, #18
  13ff74:	e3a01030 	mov	r1, #48	; 0x30
  13ff78:	e59d0004 	ldr	r0, [sp, #4]
  13ff7c:	ebfffa30 	bl	13e844 <pad.part.0>
  13ff80:	e59d3004 	ldr	r3, [sp, #4]
  13ff84:	e5933000 	ldr	r3, [r3]
  13ff88:	e3130020 	tst	r3, #32
  13ff8c:	1a000005 	bne	13ffa8 <printf_core+0x16b8>
  13ff90:	e59d304c 	ldr	r3, [sp, #76]	; 0x4c
  13ff94:	e28d7090 	add	r7, sp, #144	; 0x90
  13ff98:	e0471003 	sub	r1, r7, r3
  13ff9c:	e59d2004 	ldr	r2, [sp, #4]
  13ffa0:	e1a00003 	mov	r0, r3
  13ffa4:	eb000f0f 	bl	143be8 <__fwritex>
  13ffa8:	e2283a02 	eor	r3, r8, #8192	; 0x2000
  13ffac:	e3130a12 	tst	r3, #73728	; 0x12000
  13ffb0:	e59d3020 	ldr	r3, [sp, #32]
  13ffb4:	13a03001 	movne	r3, #1
  13ffb8:	e3530000 	cmp	r3, #0
  13ffbc:	0a00023a 	beq	1408ac <printf_core+0x1fbc>
  13ffc0:	e59d3010 	ldr	r3, [sp, #16]
  13ffc4:	e1590003 	cmp	r9, r3
  13ffc8:	a1a0a009 	movge	sl, r9
  13ffcc:	b1a0a003 	movlt	sl, r3
  13ffd0:	eafffbf0 	b	13ef98 <printf_core+0x6a8>
  13ffd4:	e3a02030 	mov	r2, #48	; 0x30
  13ffd8:	e15b0006 	cmp	fp, r6
  13ffdc:	e28dc098 	add	ip, sp, #152	; 0x98
  13ffe0:	e20ee020 	and	lr, lr, #32
  13ffe4:	e5cd2098 	strb	r2, [sp, #152]	; 0x98
  13ffe8:	1affffc3 	bne	13fefc <printf_core+0x160c>
  13ffec:	e35e0000 	cmp	lr, #0
  13fff0:	e28c8001 	add	r8, ip, #1
  13fff4:	0a00002a 	beq	1400a4 <printf_core+0x17b4>
  13fff8:	e3550000 	cmp	r5, #0
  13fffc:	e04a4008 	sub	r4, sl, r8
  140000:	1affffca 	bne	13ff30 <printf_core+0x1640>
  140004:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  140008:	e3130008 	tst	r3, #8
  14000c:	1a00002d 	bne	1400c8 <printf_core+0x17d8>
  140010:	e1a0c008 	mov	ip, r8
  140014:	eaffffbd 	b	13ff10 <printf_core+0x1620>
  140018:	e1a0300b 	mov	r3, fp
  14001c:	e1a02009 	mov	r2, r9
  140020:	e3a01020 	mov	r1, #32
  140024:	e59d0004 	ldr	r0, [sp, #4]
  140028:	ebfffa05 	bl	13e844 <pad.part.0>
  14002c:	eafffd7b 	b	13f620 <printf_core+0xd30>
  140030:	e3a03001 	mov	r3, #1
  140034:	e58d3020 	str	r3, [sp, #32]
  140038:	e51f36c8 	ldr	r3, [pc, #-1736]	; 13f978 <printf_core+0x1088>
  14003c:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  140040:	eafffc20 	b	13f0c8 <printf_core+0x7d8>
  140044:	e3a03000 	mov	r3, #0
  140048:	e58d3000 	str	r3, [sp]
  14004c:	eafffb44 	b	13ed64 <printf_core+0x474>
  140050:	e59d5004 	ldr	r5, [sp, #4]
  140054:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
  140058:	e1a02005 	mov	r2, r5
  14005c:	e59d0034 	ldr	r0, [sp, #52]	; 0x34
  140060:	eb000ee0 	bl	143be8 <__fwritex>
  140064:	e5953000 	ldr	r3, [r5]
  140068:	e1a02005 	mov	r2, r5
  14006c:	e3130020 	tst	r3, #32
  140070:	1afffcc9 	bne	13f39c <printf_core+0xaac>
  140074:	e1a00006 	mov	r0, r6
  140078:	e3a01003 	mov	r1, #3
  14007c:	eb000ed9 	bl	143be8 <__fwritex>
  140080:	eafffcc5 	b	13f39c <printf_core+0xaac>
  140084:	e3a03001 	mov	r3, #1
  140088:	e58d3030 	str	r3, [sp, #48]	; 0x30
  14008c:	e51f3718 	ldr	r3, [pc, #-1816]	; 13f97c <printf_core+0x108c>
  140090:	e58d3034 	str	r3, [sp, #52]	; 0x34
  140094:	eafffc9a 	b	13f304 <printf_core+0xa14>
  140098:	e3510000 	cmp	r1, #0
  14009c:	028bb004 	addeq	fp, fp, #4
  1400a0:	eafffe7f 	b	13faa4 <printf_core+0x11b4>
  1400a4:	e1a0000c 	mov	r0, ip
  1400a8:	e1a02009 	mov	r2, r9
  1400ac:	e3a01001 	mov	r1, #1
  1400b0:	eb000ecc 	bl	143be8 <__fwritex>
  1400b4:	e599e000 	ldr	lr, [r9]
  1400b8:	e3550000 	cmp	r5, #0
  1400bc:	e20ee020 	and	lr, lr, #32
  1400c0:	e04a4008 	sub	r4, sl, r8
  1400c4:	0affffce 	beq	140004 <printf_core+0x1714>
  1400c8:	e35e0000 	cmp	lr, #0
  1400cc:	1affff97 	bne	13ff30 <printf_core+0x1640>
  1400d0:	e1a02009 	mov	r2, r9
  1400d4:	e3a01001 	mov	r1, #1
  1400d8:	e51f0758 	ldr	r0, [pc, #-1880]	; 13f988 <printf_core+0x1098>
  1400dc:	eb000ec1 	bl	143be8 <__fwritex>
  1400e0:	e599e000 	ldr	lr, [r9]
  1400e4:	e1a0c008 	mov	ip, r8
  1400e8:	e20ee020 	and	lr, lr, #32
  1400ec:	eaffff87 	b	13ff10 <printf_core+0x1620>
  1400f0:	e1a0300a 	mov	r3, sl
  1400f4:	e1a02009 	mov	r2, r9
  1400f8:	e3a01020 	mov	r1, #32
  1400fc:	e59d0004 	ldr	r0, [sp, #4]
  140100:	ebfff9cf 	bl	13e844 <pad.part.0>
  140104:	eafffca9 	b	13f3b0 <printf_core+0xac0>
  140108:	e59d3010 	ldr	r3, [sp, #16]
  14010c:	e213b020 	ands	fp, r3, #32
  140110:	159d3034 	ldrne	r3, [sp, #52]	; 0x34
  140114:	12833009 	addne	r3, r3, #9
  140118:	158d3034 	strne	r3, [sp, #52]	; 0x34
  14011c:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
  140120:	e355000b 	cmp	r5, #11
  140124:	e2833002 	add	r3, r3, #2
  140128:	e58d3030 	str	r3, [sp, #48]	; 0x30
  14012c:	9a0001b8 	bls	140814 <printf_core+0x1f24>
  140130:	e59d2020 	ldr	r2, [sp, #32]
  140134:	e28d7090 	add	r7, sp, #144	; 0x90
  140138:	e3520000 	cmp	r2, #0
  14013c:	e1a03002 	mov	r3, r2
  140140:	b2623000 	rsblt	r3, r2, #0
  140144:	e3520000 	cmp	r2, #0
  140148:	11a0c007 	movne	ip, r7
  14014c:	0a0001ac 	beq	140804 <printf_core+0x1f14>
  140150:	e51f27d4 	ldr	r2, [pc, #-2004]	; 13f984 <printf_core+0x1094>
  140154:	e0810293 	umull	r0, r1, r3, r2
  140158:	e1a021a1 	lsr	r2, r1, #3
  14015c:	e0821102 	add	r1, r2, r2, lsl #2
  140160:	e0433081 	sub	r3, r3, r1, lsl #1
  140164:	e2831030 	add	r1, r3, #48	; 0x30
  140168:	e2523000 	subs	r3, r2, #0
  14016c:	e56c1001 	strb	r1, [ip, #-1]!
  140170:	1afffff6 	bne	140150 <printf_core+0x1860>
  140174:	e15c0007 	cmp	ip, r7
  140178:	0a0001a1 	beq	140804 <printf_core+0x1f14>
  14017c:	e59d3020 	ldr	r3, [sp, #32]
  140180:	e59d2010 	ldr	r2, [sp, #16]
  140184:	e3530000 	cmp	r3, #0
  140188:	a3a0302b 	movge	r3, #43	; 0x2b
  14018c:	b3a0302d 	movlt	r3, #45	; 0x2d
  140190:	e54c3001 	strb	r3, [ip, #-1]
  140194:	e24c3002 	sub	r3, ip, #2
  140198:	e282200f 	add	r2, r2, #15
  14019c:	e58d3010 	str	r3, [sp, #16]
  1401a0:	e2083008 	and	r3, r8, #8
  1401a4:	e58db020 	str	fp, [sp, #32]
  1401a8:	e58d8040 	str	r8, [sp, #64]	; 0x40
  1401ac:	e58d4044 	str	r4, [sp, #68]	; 0x44
  1401b0:	e1a0b007 	mov	fp, r7
  1401b4:	e51f683c 	ldr	r6, [pc, #-2108]	; 13f980 <printf_core+0x1090>
  1401b8:	e54c2002 	strb	r2, [ip, #-2]
  1401bc:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  1401c0:	e58da03c 	str	sl, [sp, #60]	; 0x3c
  1401c4:	e59d401c 	ldr	r4, [sp, #28]
  1401c8:	e59d8038 	ldr	r8, [sp, #56]	; 0x38
  1401cc:	ea000007 	b	1401f0 <printf_core+0x1900>
  1401d0:	e1a0b00a 	mov	fp, sl
  1401d4:	e1a00004 	mov	r0, r4
  1401d8:	e1a01008 	mov	r1, r8
  1401dc:	e3a02000 	mov	r2, #0
  1401e0:	e3a03000 	mov	r3, #0
  1401e4:	eb001381 	bl	144ff0 <__aeabi_dcmpeq>
  1401e8:	e3500000 	cmp	r0, #0
  1401ec:	1a000026 	bne	14028c <printf_core+0x199c>
  1401f0:	e1a01008 	mov	r1, r8
  1401f4:	e1a00004 	mov	r0, r4
  1401f8:	eb001395 	bl	145054 <__aeabi_d2iz>
  1401fc:	e59d2020 	ldr	r2, [sp, #32]
  140200:	e7d63000 	ldrb	r3, [r6, r0]
  140204:	e28ba001 	add	sl, fp, #1
  140208:	e1823003 	orr	r3, r2, r3
  14020c:	e5cb3000 	strb	r3, [fp]
  140210:	eb0011ef 	bl	1449d4 <__aeabi_i2d>
  140214:	e1a02000 	mov	r2, r0
  140218:	e1a03001 	mov	r3, r1
  14021c:	e1a00004 	mov	r0, r4
  140220:	e1a01008 	mov	r1, r8
  140224:	eb001135 	bl	144700 <__aeabi_dsub>
  140228:	e51f38a0 	ldr	r3, [pc, #-2208]	; 13f990 <printf_core+0x10a0>
  14022c:	e3a02000 	mov	r2, #0
  140230:	eb001220 	bl	144ab8 <__aeabi_dmul>
  140234:	e04a3007 	sub	r3, sl, r7
  140238:	e3530001 	cmp	r3, #1
  14023c:	e1a04000 	mov	r4, r0
  140240:	e1a08001 	mov	r8, r1
  140244:	1affffe1 	bne	1401d0 <printf_core+0x18e0>
  140248:	e3a03000 	mov	r3, #0
  14024c:	e3a02000 	mov	r2, #0
  140250:	eb001366 	bl	144ff0 <__aeabi_dcmpeq>
  140254:	e3500000 	cmp	r0, #0
  140258:	e3a03001 	mov	r3, #1
  14025c:	13a03000 	movne	r3, #0
  140260:	e3550000 	cmp	r5, #0
  140264:	c3833001 	orrgt	r3, r3, #1
  140268:	e3130001 	tst	r3, #1
  14026c:	1a000002 	bne	14027c <printf_core+0x198c>
  140270:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  140274:	e3530000 	cmp	r3, #0
  140278:	0affffd4 	beq	1401d0 <printf_core+0x18e0>
  14027c:	e3a0302e 	mov	r3, #46	; 0x2e
  140280:	e28bb002 	add	fp, fp, #2
  140284:	e54b3001 	strb	r3, [fp, #-1]
  140288:	eaffffd1 	b	1401d4 <printf_core+0x18e4>
  14028c:	e3e0310a 	mvn	r3, #-2147483646	; 0x80000002
  140290:	e59d2010 	ldr	r2, [sp, #16]
  140294:	e59da03c 	ldr	sl, [sp, #60]	; 0x3c
  140298:	e0476002 	sub	r6, r7, r2
  14029c:	e59d2030 	ldr	r2, [sp, #48]	; 0x30
  1402a0:	e0433006 	sub	r3, r3, r6
  1402a4:	e0433002 	sub	r3, r3, r2
  1402a8:	e1550003 	cmp	r5, r3
  1402ac:	e59d8040 	ldr	r8, [sp, #64]	; 0x40
  1402b0:	e59d4044 	ldr	r4, [sp, #68]	; 0x44
  1402b4:	cafffb3a 	bgt	13efa4 <printf_core+0x6b4>
  1402b8:	e04b2007 	sub	r2, fp, r7
  1402bc:	e3550000 	cmp	r5, #0
  1402c0:	e58d201c 	str	r2, [sp, #28]
  1402c4:	0a000065 	beq	140460 <printf_core+0x1b70>
  1402c8:	e2423001 	sub	r3, r2, #1
  1402cc:	e1550003 	cmp	r5, r3
  1402d0:	ba000062 	blt	140460 <printf_core+0x1b70>
  1402d4:	e2853002 	add	r3, r5, #2
  1402d8:	e0865003 	add	r5, r6, r3
  1402dc:	e043a002 	sub	sl, r3, r2
  1402e0:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
  1402e4:	e0835005 	add	r5, r3, r5
  1402e8:	e1590005 	cmp	r9, r5
  1402ec:	c3a0b000 	movgt	fp, #0
  1402f0:	d3a0b001 	movle	fp, #1
  1402f4:	e3180a12 	tst	r8, #73728	; 0x12000
  1402f8:	01a0300b 	moveq	r3, fp
  1402fc:	13a03001 	movne	r3, #1
  140300:	e3530000 	cmp	r3, #0
  140304:	0a0001a8 	beq	1409ac <printf_core+0x20bc>
  140308:	e59d3004 	ldr	r3, [sp, #4]
  14030c:	e5933000 	ldr	r3, [r3]
  140310:	e3130020 	tst	r3, #32
  140314:	0a0000e4 	beq	1406ac <printf_core+0x1dbc>
  140318:	e2283801 	eor	r3, r8, #65536	; 0x10000
  14031c:	e3130a12 	tst	r3, #73728	; 0x12000
  140320:	01a0300b 	moveq	r3, fp
  140324:	13a03001 	movne	r3, #1
  140328:	e3530000 	cmp	r3, #0
  14032c:	0a000198 	beq	140994 <printf_core+0x20a4>
  140330:	e35a0000 	cmp	sl, #0
  140334:	ca00012c 	bgt	1407ec <printf_core+0x1efc>
  140338:	e2283a02 	eor	r3, r8, #8192	; 0x2000
  14033c:	e3130a12 	tst	r3, #73728	; 0x12000
  140340:	01a0300b 	moveq	r3, fp
  140344:	13a03001 	movne	r3, #1
  140348:	e3530000 	cmp	r3, #0
  14034c:	0a000186 	beq	14096c <printf_core+0x207c>
  140350:	e1590005 	cmp	r9, r5
  140354:	a1a0a009 	movge	sl, r9
  140358:	b1a0a005 	movlt	sl, r5
  14035c:	eafffb0d 	b	13ef98 <printf_core+0x6a8>
  140360:	e375010e 	cmn	r5, #-2147483645	; 0x80000003
  140364:	cafffb0e 	bgt	13efa4 <printf_core+0x6b4>
  140368:	e2852001 	add	r2, r5, #1
  14036c:	e3a03001 	mov	r3, #1
  140370:	eafffe71 	b	13fd3c <printf_core+0x144c>
  140374:	e3550000 	cmp	r5, #0
  140378:	03a05001 	moveq	r5, #1
  14037c:	e3760004 	cmn	r6, #4
  140380:	a1550006 	cmpge	r5, r6
  140384:	c59d2010 	ldrgt	r2, [sp, #16]
  140388:	d59d3010 	ldrle	r3, [sp, #16]
  14038c:	c2863001 	addgt	r3, r6, #1
  140390:	c2422001 	subgt	r2, r2, #1
  140394:	d2433002 	suble	r3, r3, #2
  140398:	c58d2010 	strgt	r2, [sp, #16]
  14039c:	c0455003 	subgt	r5, r5, r3
  1403a0:	d58d3010 	strle	r3, [sp, #16]
  1403a4:	d2455001 	suble	r5, r5, #1
  1403a8:	e3180008 	tst	r8, #8
  1403ac:	1afffe5d 	bne	13fd28 <printf_core+0x1438>
  1403b0:	e59d301c 	ldr	r3, [sp, #28]
  1403b4:	e15b0003 	cmp	fp, r3
  1403b8:	2a000034 	bcs	140490 <printf_core+0x1ba0>
  1403bc:	e5137004 	ldr	r7, [r3, #-4]
  1403c0:	e3570000 	cmp	r7, #0
  1403c4:	0a000031 	beq	140490 <printf_core+0x1ba0>
  1403c8:	e3a0100a 	mov	r1, #10
  1403cc:	e1a00007 	mov	r0, r7
  1403d0:	ebffe1a3 	bl	138a64 <__aeabi_uidivmod>
  1403d4:	e3510000 	cmp	r1, #0
  1403d8:	1a00000b 	bne	14040c <printf_core+0x1b1c>
  1403dc:	e3a0300a 	mov	r3, #10
  1403e0:	e58d4020 	str	r4, [sp, #32]
  1403e4:	e1a04003 	mov	r4, r3
  1403e8:	e0844104 	add	r4, r4, r4, lsl #2
  1403ec:	e1a04084 	lsl	r4, r4, #1
  1403f0:	e1a01004 	mov	r1, r4
  1403f4:	e1a00007 	mov	r0, r7
  1403f8:	ebffe199 	bl	138a64 <__aeabi_uidivmod>
  1403fc:	e3510000 	cmp	r1, #0
  140400:	e28aa001 	add	sl, sl, #1
  140404:	0afffff7 	beq	1403e8 <printf_core+0x1af8>
  140408:	e59d4020 	ldr	r4, [sp, #32]
  14040c:	e59d202c 	ldr	r2, [sp, #44]	; 0x2c
  140410:	e59d301c 	ldr	r3, [sp, #28]
  140414:	e0433002 	sub	r3, r3, r2
  140418:	e59d2010 	ldr	r2, [sp, #16]
  14041c:	e1a03143 	asr	r3, r3, #2
  140420:	e3822020 	orr	r2, r2, #32
  140424:	e2433001 	sub	r3, r3, #1
  140428:	e3520066 	cmp	r2, #102	; 0x66
  14042c:	e0833183 	add	r3, r3, r3, lsl #3
  140430:	10863003 	addne	r3, r6, r3
  140434:	e043300a 	sub	r3, r3, sl
  140438:	e1c33fc3 	bic	r3, r3, r3, asr #31
  14043c:	e1550003 	cmp	r5, r3
  140440:	a1a05003 	movge	r5, r3
  140444:	eafffe37 	b	13fd28 <printf_core+0x1438>
  140448:	e1a0300a 	mov	r3, sl
  14044c:	e1a02009 	mov	r2, r9
  140450:	e3a01020 	mov	r1, #32
  140454:	e59d0004 	ldr	r0, [sp, #4]
  140458:	ebfff8f9 	bl	13e844 <pad.part.0>
  14045c:	eafffbca 	b	13f38c <printf_core+0xa9c>
  140460:	e59d301c 	ldr	r3, [sp, #28]
  140464:	e0865003 	add	r5, r6, r3
  140468:	eaffff9c 	b	1402e0 <printf_core+0x19f0>
  14046c:	e59d32f0 	ldr	r3, [sp, #752]	; 0x2f0
  140470:	e0832105 	add	r2, r3, r5, lsl #2
  140474:	e2833024 	add	r3, r3, #36	; 0x24
  140478:	e1530002 	cmp	r3, r2
  14047c:	0afffb08 	beq	13f0a4 <printf_core+0x7b4>
  140480:	e5b21004 	ldr	r1, [r2, #4]!
  140484:	e3510000 	cmp	r1, #0
  140488:	0afffffa 	beq	140478 <printf_core+0x1b88>
  14048c:	eafffa2f 	b	13ed50 <printf_core+0x460>
  140490:	e3a0a009 	mov	sl, #9
  140494:	eaffffdc 	b	14040c <printf_core+0x1b1c>
  140498:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  14049c:	e15b0003 	cmp	fp, r3
  1404a0:	31a0a00b 	movcc	sl, fp
  1404a4:	21a0a003 	movcs	sl, r3
  1404a8:	e15a0003 	cmp	sl, r3
  1404ac:	8a00002f 	bhi	140570 <printf_core+0x1c80>
  1404b0:	e28d7090 	add	r7, sp, #144	; 0x90
  1404b4:	e043b00a 	sub	fp, r3, sl
  1404b8:	e2872009 	add	r2, r7, #9
  1404bc:	e58d2030 	str	r2, [sp, #48]	; 0x30
  1404c0:	e58d2034 	str	r2, [sp, #52]	; 0x34
  1404c4:	e3cb2003 	bic	r2, fp, #3
  1404c8:	e08a3002 	add	r3, sl, r2
  1404cc:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  1404d0:	e24a3004 	sub	r3, sl, #4
  1404d4:	e58db038 	str	fp, [sp, #56]	; 0x38
  1404d8:	e3a06030 	mov	r6, #48	; 0x30
  1404dc:	e1a0b004 	mov	fp, r4
  1404e0:	e1a04003 	mov	r4, r3
  1404e4:	e5b4c004 	ldr	ip, [r4, #4]!
  1404e8:	e35c0000 	cmp	ip, #0
  1404ec:	0a000068 	beq	140694 <printf_core+0x1da4>
  1404f0:	e2870009 	add	r0, r7, #9
  1404f4:	e51f1b78 	ldr	r1, [pc, #-2936]	; 13f984 <printf_core+0x1094>
  1404f8:	e083219c 	umull	r2, r3, ip, r1
  1404fc:	e1a021a3 	lsr	r2, r3, #3
  140500:	e0823102 	add	r3, r2, r2, lsl #2
  140504:	e04c3083 	sub	r3, ip, r3, lsl #1
  140508:	e2833030 	add	r3, r3, #48	; 0x30
  14050c:	e252c000 	subs	ip, r2, #0
  140510:	e5603001 	strb	r3, [r0, #-1]!
  140514:	1afffff6 	bne	1404f4 <printf_core+0x1c04>
  140518:	e15a0004 	cmp	sl, r4
  14051c:	1a000001 	bne	140528 <printf_core+0x1c38>
  140520:	ea000117 	b	140984 <printf_core+0x2094>
  140524:	e5606001 	strb	r6, [r0, #-1]!
  140528:	e1500007 	cmp	r0, r7
  14052c:	8afffffc 	bhi	140524 <printf_core+0x1c34>
  140530:	e59d3004 	ldr	r3, [sp, #4]
  140534:	e5932000 	ldr	r2, [r3]
  140538:	e3120020 	tst	r2, #32
  14053c:	1a000003 	bne	140550 <printf_core+0x1c60>
  140540:	e1a02003 	mov	r2, r3
  140544:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
  140548:	e0431000 	sub	r1, r3, r0
  14054c:	eb000da5 	bl	143be8 <__fwritex>
  140550:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  140554:	e1530004 	cmp	r3, r4
  140558:	1affffe1 	bne	1404e4 <printf_core+0x1bf4>
  14055c:	e1a0400b 	mov	r4, fp
  140560:	e59db038 	ldr	fp, [sp, #56]	; 0x38
  140564:	e3cb3003 	bic	r3, fp, #3
  140568:	e2833004 	add	r3, r3, #4
  14056c:	e08aa003 	add	sl, sl, r3
  140570:	e3550000 	cmp	r5, #0
  140574:	0a00003b 	beq	140668 <printf_core+0x1d78>
  140578:	e59d3004 	ldr	r3, [sp, #4]
  14057c:	e5933000 	ldr	r3, [r3]
  140580:	e3130020 	tst	r3, #32
  140584:	0a00003d 	beq	140680 <printf_core+0x1d90>
  140588:	e59d201c 	ldr	r2, [sp, #28]
  14058c:	e3550000 	cmp	r5, #0
  140590:	d3a03000 	movle	r3, #0
  140594:	c3a03001 	movgt	r3, #1
  140598:	e15a0002 	cmp	sl, r2
  14059c:	23a03000 	movcs	r3, #0
  1405a0:	e3530000 	cmp	r3, #0
  1405a4:	0a000027 	beq	140648 <printf_core+0x1d58>
  1405a8:	e1a0600a 	mov	r6, sl
  1405ac:	e3a0a030 	mov	sl, #48	; 0x30
  1405b0:	e59db004 	ldr	fp, [sp, #4]
  1405b4:	e28d7090 	add	r7, sp, #144	; 0x90
  1405b8:	e4963004 	ldr	r3, [r6], #4
  1405bc:	e287c009 	add	ip, r7, #9
  1405c0:	e3530000 	cmp	r3, #0
  1405c4:	0a00000a 	beq	1405f4 <printf_core+0x1d04>
  1405c8:	e1a01003 	mov	r1, r3
  1405cc:	e51f0c50 	ldr	r0, [pc, #-3152]	; 13f984 <printf_core+0x1094>
  1405d0:	e0832091 	umull	r2, r3, r1, r0
  1405d4:	e1a031a3 	lsr	r3, r3, #3
  1405d8:	e0832103 	add	r2, r3, r3, lsl #2
  1405dc:	e0412082 	sub	r2, r1, r2, lsl #1
  1405e0:	e2822030 	add	r2, r2, #48	; 0x30
  1405e4:	e2531000 	subs	r1, r3, #0
  1405e8:	e56c2001 	strb	r2, [ip, #-1]!
  1405ec:	1afffff6 	bne	1405cc <printf_core+0x1cdc>
  1405f0:	ea000000 	b	1405f8 <printf_core+0x1d08>
  1405f4:	e56ca001 	strb	sl, [ip, #-1]!
  1405f8:	e15c0007 	cmp	ip, r7
  1405fc:	8afffffc 	bhi	1405f4 <printf_core+0x1d04>
  140600:	e59b3000 	ldr	r3, [fp]
  140604:	e3130020 	tst	r3, #32
  140608:	1a000005 	bne	140624 <printf_core+0x1d34>
  14060c:	e3550009 	cmp	r5, #9
  140610:	e1a0000c 	mov	r0, ip
  140614:	b1a01005 	movlt	r1, r5
  140618:	a3a01009 	movge	r1, #9
  14061c:	e1a0200b 	mov	r2, fp
  140620:	eb000d70 	bl	143be8 <__fwritex>
  140624:	e59d301c 	ldr	r3, [sp, #28]
  140628:	e2455009 	sub	r5, r5, #9
  14062c:	e1530006 	cmp	r3, r6
  140630:	93a03000 	movls	r3, #0
  140634:	83a03001 	movhi	r3, #1
  140638:	e3550000 	cmp	r5, #0
  14063c:	d3a03000 	movle	r3, #0
  140640:	e3530000 	cmp	r3, #0
  140644:	1affffdb 	bne	1405b8 <printf_core+0x1cc8>
  140648:	e2852009 	add	r2, r5, #9
  14064c:	e3520009 	cmp	r2, #9
  140650:	dafffe54 	ble	13ffa8 <printf_core+0x16b8>
  140654:	e3a03009 	mov	r3, #9
  140658:	e3a01030 	mov	r1, #48	; 0x30
  14065c:	e59d0004 	ldr	r0, [sp, #4]
  140660:	ebfff877 	bl	13e844 <pad.part.0>
  140664:	eafffe4f 	b	13ffa8 <printf_core+0x16b8>
  140668:	e3180008 	tst	r8, #8
  14066c:	0afffe4d 	beq	13ffa8 <printf_core+0x16b8>
  140670:	e59d3004 	ldr	r3, [sp, #4]
  140674:	e5933000 	ldr	r3, [r3]
  140678:	e3130020 	tst	r3, #32
  14067c:	1afffe49 	bne	13ffa8 <printf_core+0x16b8>
  140680:	e59d2004 	ldr	r2, [sp, #4]
  140684:	e3a01001 	mov	r1, #1
  140688:	e51f0d08 	ldr	r0, [pc, #-3336]	; 13f988 <printf_core+0x1098>
  14068c:	eb000d55 	bl	143be8 <__fwritex>
  140690:	eaffffbc 	b	140588 <printf_core+0x1c98>
  140694:	e15a0004 	cmp	sl, r4
  140698:	12870009 	addne	r0, r7, #9
  14069c:	1affffa0 	bne	140524 <printf_core+0x1c34>
  1406a0:	e28d0fb2 	add	r0, sp, #712	; 0x2c8
  1406a4:	e5606230 	strb	r6, [r0, #-560]!	; 0xfffffdd0
  1406a8:	eaffffa0 	b	140530 <printf_core+0x1c40>
  1406ac:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
  1406b0:	e59d0034 	ldr	r0, [sp, #52]	; 0x34
  1406b4:	e59d2004 	ldr	r2, [sp, #4]
  1406b8:	eb000d4a 	bl	143be8 <__fwritex>
  1406bc:	e2283801 	eor	r3, r8, #65536	; 0x10000
  1406c0:	e3130a12 	tst	r3, #73728	; 0x12000
  1406c4:	01a0300b 	moveq	r3, fp
  1406c8:	13a03001 	movne	r3, #1
  1406cc:	e3530000 	cmp	r3, #0
  1406d0:	0a0000af 	beq	140994 <printf_core+0x20a4>
  1406d4:	e59d2004 	ldr	r2, [sp, #4]
  1406d8:	e5923000 	ldr	r3, [r2]
  1406dc:	e3130020 	tst	r3, #32
  1406e0:	1affff12 	bne	140330 <printf_core+0x1a40>
  1406e4:	e59d101c 	ldr	r1, [sp, #28]
  1406e8:	e1a00007 	mov	r0, r7
  1406ec:	eb000d3d 	bl	143be8 <__fwritex>
  1406f0:	e35a0000 	cmp	sl, #0
  1406f4:	ca00003c 	bgt	1407ec <printf_core+0x1efc>
  1406f8:	e59d2004 	ldr	r2, [sp, #4]
  1406fc:	e5923000 	ldr	r3, [r2]
  140700:	e3130020 	tst	r3, #32
  140704:	1affff0b 	bne	140338 <printf_core+0x1a48>
  140708:	e1a01006 	mov	r1, r6
  14070c:	e59d0010 	ldr	r0, [sp, #16]
  140710:	eb000d34 	bl	143be8 <__fwritex>
  140714:	eaffff07 	b	140338 <printf_core+0x1a48>
  140718:	e59d3010 	ldr	r3, [sp, #16]
  14071c:	e1a02009 	mov	r2, r9
  140720:	e3a01030 	mov	r1, #48	; 0x30
  140724:	e59d0004 	ldr	r0, [sp, #4]
  140728:	ebfff845 	bl	13e844 <pad.part.0>
  14072c:	eafffdc7 	b	13fe50 <printf_core+0x1560>
  140730:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
  140734:	e59d0034 	ldr	r0, [sp, #52]	; 0x34
  140738:	e59d2004 	ldr	r2, [sp, #4]
  14073c:	eb000d29 	bl	143be8 <__fwritex>
  140740:	eafffdbc 	b	13fe38 <printf_core+0x1548>
  140744:	e59d3010 	ldr	r3, [sp, #16]
  140748:	e1a02009 	mov	r2, r9
  14074c:	e3a01020 	mov	r1, #32
  140750:	e59d0004 	ldr	r0, [sp, #4]
  140754:	ebfff83a 	bl	13e844 <pad.part.0>
  140758:	eafffdb2 	b	13fe28 <printf_core+0x1538>
  14075c:	e156000e 	cmp	r6, lr
  140760:	cafffa0f 	bgt	13efa4 <printf_core+0x6b4>
  140764:	e3560000 	cmp	r6, #0
  140768:	c0833006 	addgt	r3, r3, r6
  14076c:	eafffd9e 	b	13fdec <printf_core+0x14fc>
  140770:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
  140774:	e59d0044 	ldr	r0, [sp, #68]	; 0x44
  140778:	e51f3df4 	ldr	r3, [pc, #-3572]	; 13f98c <printf_core+0x109c>
  14077c:	e0811000 	add	r1, r1, r0
  140780:	e1510003 	cmp	r1, r3
  140784:	e5871000 	str	r1, [r7]
  140788:	9a000008 	bls	1407b0 <printf_core+0x1ec0>
  14078c:	e4072004 	str	r2, [r7], #-4
  140790:	e157000b 	cmp	r7, fp
  140794:	350b2004 	strcc	r2, [fp, #-4]
  140798:	e5971000 	ldr	r1, [r7]
  14079c:	324bb004 	subcc	fp, fp, #4
  1407a0:	e2811001 	add	r1, r1, #1
  1407a4:	e1510003 	cmp	r1, r3
  1407a8:	e5871000 	str	r1, [r7]
  1407ac:	8afffff6 	bhi	14078c <printf_core+0x1e9c>
  1407b0:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  1407b4:	e59b2000 	ldr	r2, [fp]
  1407b8:	e043600b 	sub	r6, r3, fp
  1407bc:	e1a06146 	asr	r6, r6, #2
  1407c0:	e3520009 	cmp	r2, #9
  1407c4:	e0866186 	add	r6, r6, r6, lsl #3
  1407c8:	83a0300a 	movhi	r3, #10
  1407cc:	9a000004 	bls	1407e4 <printf_core+0x1ef4>
  1407d0:	e0833103 	add	r3, r3, r3, lsl #2
  1407d4:	e1a03083 	lsl	r3, r3, #1
  1407d8:	e1520003 	cmp	r2, r3
  1407dc:	e2866001 	add	r6, r6, #1
  1407e0:	2afffffa 	bcs	1407d0 <printf_core+0x1ee0>
  1407e4:	e287c004 	add	ip, r7, #4
  1407e8:	eafffd37 	b	13fccc <printf_core+0x13dc>
  1407ec:	e1a0200a 	mov	r2, sl
  1407f0:	e3a03000 	mov	r3, #0
  1407f4:	e3a01030 	mov	r1, #48	; 0x30
  1407f8:	e59d0004 	ldr	r0, [sp, #4]
  1407fc:	ebfff810 	bl	13e844 <pad.part.0>
  140800:	eaffffbc 	b	1406f8 <printf_core+0x1e08>
  140804:	e3a03030 	mov	r3, #48	; 0x30
  140808:	e28dc08f 	add	ip, sp, #143	; 0x8f
  14080c:	e5cd308f 	strb	r3, [sp, #143]	; 0x8f
  140810:	eafffe59 	b	14017c <printf_core+0x188c>
  140814:	e265300b 	rsb	r3, r5, #11
  140818:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  14081c:	e1a0300b 	mov	r3, fp
  140820:	e3a06000 	mov	r6, #0
  140824:	e1a0b004 	mov	fp, r4
  140828:	e1a04003 	mov	r4, r3
  14082c:	e51f7ea4 	ldr	r7, [pc, #-3748]	; 13f990 <printf_core+0x10a0>
  140830:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  140834:	e1a00006 	mov	r0, r6
  140838:	e2433001 	sub	r3, r3, #1
  14083c:	e1a01007 	mov	r1, r7
  140840:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  140844:	e3a02000 	mov	r2, #0
  140848:	e51f3ec0 	ldr	r3, [pc, #-3776]	; 13f990 <printf_core+0x10a0>
  14084c:	eb001099 	bl	144ab8 <__aeabi_dmul>
  140850:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  140854:	e1a06000 	mov	r6, r0
  140858:	e3730001 	cmn	r3, #1
  14085c:	e1a07001 	mov	r7, r1
  140860:	1afffff2 	bne	140830 <printf_core+0x1f40>
  140864:	e1a03004 	mov	r3, r4
  140868:	e1a0400b 	mov	r4, fp
  14086c:	e1a0b003 	mov	fp, r3
  140870:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
  140874:	e59d001c 	ldr	r0, [sp, #28]
  140878:	e5d33000 	ldrb	r3, [r3]
  14087c:	e353002d 	cmp	r3, #45	; 0x2d
  140880:	0a000028 	beq	140928 <printf_core+0x2038>
  140884:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
  140888:	e1a02006 	mov	r2, r6
  14088c:	e1a03007 	mov	r3, r7
  140890:	eb000f9b 	bl	144704 <__adddf3>
  140894:	e1a02006 	mov	r2, r6
  140898:	e1a03007 	mov	r3, r7
  14089c:	eb000f97 	bl	144700 <__aeabi_dsub>
  1408a0:	e58d001c 	str	r0, [sp, #28]
  1408a4:	e58d1038 	str	r1, [sp, #56]	; 0x38
  1408a8:	eafffe20 	b	140130 <printf_core+0x1840>
  1408ac:	e59d3010 	ldr	r3, [sp, #16]
  1408b0:	e1a02009 	mov	r2, r9
  1408b4:	e3a01020 	mov	r1, #32
  1408b8:	e59d0004 	ldr	r0, [sp, #4]
  1408bc:	ebfff7e0 	bl	13e844 <pad.part.0>
  1408c0:	eafffdbe 	b	13ffc0 <printf_core+0x16d0>
  1408c4:	e3a0e000 	mov	lr, #0
  1408c8:	e51fcf3c 	ldr	ip, [pc, #-3900]	; 13f994 <printf_core+0x10a4>
  1408cc:	eafffce1 	b	13fc58 <printf_core+0x1368>
  1408d0:	e51f3f40 	ldr	r3, [pc, #-3904]	; 13f998 <printf_core+0x10a8>
  1408d4:	e58d2040 	str	r2, [sp, #64]	; 0x40
  1408d8:	e58d3020 	str	r3, [sp, #32]
  1408dc:	eafffcd6 	b	13fc3c <printf_core+0x134c>
  1408e0:	e3a03001 	mov	r3, #1
  1408e4:	e58d3040 	str	r3, [sp, #64]	; 0x40
  1408e8:	e51f3f58 	ldr	r3, [pc, #-3928]	; 13f998 <printf_core+0x10a8>
  1408ec:	e58d3020 	str	r3, [sp, #32]
  1408f0:	eafffcd1 	b	13fc3c <printf_core+0x134c>
  1408f4:	e3a03001 	mov	r3, #1
  1408f8:	e3a05006 	mov	r5, #6
  1408fc:	e58d3044 	str	r3, [sp, #68]	; 0x44
  140900:	eafffb9d 	b	13f77c <printf_core+0xe8c>
  140904:	e59d101c 	ldr	r1, [sp, #28]
  140908:	e287c004 	add	ip, r7, #4
  14090c:	e51f2f78 	ldr	r2, [pc, #-3960]	; 13f99c <printf_core+0x10ac>
  140910:	e51f3f78 	ldr	r3, [pc, #-3960]	; 13f9a0 <printf_core+0x10b0>
  140914:	e151000c 	cmp	r1, ip
  140918:	01a0c002 	moveq	ip, r2
  14091c:	11a0c003 	movne	ip, r3
  140920:	e3a0e000 	mov	lr, #0
  140924:	eafffccb 	b	13fc58 <printf_core+0x1368>
  140928:	e59d3038 	ldr	r3, [sp, #56]	; 0x38
  14092c:	e1a02006 	mov	r2, r6
  140930:	e2831102 	add	r1, r3, #-2147483648	; 0x80000000
  140934:	e1a03007 	mov	r3, r7
  140938:	eb000f70 	bl	144700 <__aeabi_dsub>
  14093c:	e1a03001 	mov	r3, r1
  140940:	e1a02000 	mov	r2, r0
  140944:	e1a01007 	mov	r1, r7
  140948:	e1a00006 	mov	r0, r6
  14094c:	eb000f6c 	bl	144704 <__adddf3>
  140950:	e2813102 	add	r3, r1, #-2147483648	; 0x80000000
  140954:	e58d001c 	str	r0, [sp, #28]
  140958:	e58d3038 	str	r3, [sp, #56]	; 0x38
  14095c:	eafffdf3 	b	140130 <printf_core+0x1840>
  140960:	e3a0300a 	mov	r3, #10
  140964:	e58d3038 	str	r3, [sp, #56]	; 0x38
  140968:	eafffc97 	b	13fbcc <printf_core+0x12dc>
  14096c:	e1a03005 	mov	r3, r5
  140970:	e1a02009 	mov	r2, r9
  140974:	e3a01020 	mov	r1, #32
  140978:	e59d0004 	ldr	r0, [sp, #4]
  14097c:	ebfff7b0 	bl	13e844 <pad.part.0>
  140980:	eafffe72 	b	140350 <printf_core+0x1a60>
  140984:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
  140988:	e1500003 	cmp	r0, r3
  14098c:	1afffee7 	bne	140530 <printf_core+0x1c40>
  140990:	eaffff42 	b	1406a0 <printf_core+0x1db0>
  140994:	e1a03005 	mov	r3, r5
  140998:	e1a02009 	mov	r2, r9
  14099c:	e3a01030 	mov	r1, #48	; 0x30
  1409a0:	e59d0004 	ldr	r0, [sp, #4]
  1409a4:	ebfff7a6 	bl	13e844 <pad.part.0>
  1409a8:	eaffff49 	b	1406d4 <printf_core+0x1de4>
  1409ac:	e1a03005 	mov	r3, r5
  1409b0:	e1a02009 	mov	r2, r9
  1409b4:	e3a01020 	mov	r1, #32
  1409b8:	e59d0004 	ldr	r0, [sp, #4]
  1409bc:	ebfff7a0 	bl	13e844 <pad.part.0>
  1409c0:	eafffe50 	b	140308 <printf_core+0x1a18>

001409c4 <vfprintf>:
  1409c4:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  1409c8:	e1a09001 	mov	r9, r1
  1409cc:	e1a06002 	mov	r6, r2
  1409d0:	e24dd0dc 	sub	sp, sp, #220	; 0xdc
  1409d4:	e28d5010 	add	r5, sp, #16
  1409d8:	e3a02028 	mov	r2, #40	; 0x28
  1409dc:	e3a01000 	mov	r1, #0
  1409e0:	e1a04000 	mov	r4, r0
  1409e4:	e1a00005 	mov	r0, r5
  1409e8:	eb000221 	bl	141274 <memset>
  1409ec:	e58d5000 	str	r5, [sp]
  1409f0:	e1a01009 	mov	r1, r9
  1409f4:	e28d3038 	add	r3, sp, #56	; 0x38
  1409f8:	e28d200c 	add	r2, sp, #12
  1409fc:	e3a00000 	mov	r0, #0
  140a00:	e58d600c 	str	r6, [sp, #12]
  140a04:	ebfff7b9 	bl	13e8f0 <printf_core>
  140a08:	e3500000 	cmp	r0, #0
  140a0c:	ba000047 	blt	140b30 <vfprintf+0x16c>
  140a10:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
  140a14:	e3530000 	cmp	r3, #0
  140a18:	b3a08000 	movlt	r8, #0
  140a1c:	ba000002 	blt	140a2c <vfprintf+0x68>
  140a20:	e1a00004 	mov	r0, r4
  140a24:	eb000ab0 	bl	1434ec <__lockfile>
  140a28:	e1a08000 	mov	r8, r0
  140a2c:	e5942048 	ldr	r2, [r4, #72]	; 0x48
  140a30:	e5943000 	ldr	r3, [r4]
  140a34:	e3520000 	cmp	r2, #0
  140a38:	e2036020 	and	r6, r3, #32
  140a3c:	d3c33020 	bicle	r3, r3, #32
  140a40:	d5843000 	strle	r3, [r4]
  140a44:	e5943030 	ldr	r3, [r4, #48]	; 0x30
  140a48:	e3530000 	cmp	r3, #0
  140a4c:	0a000024 	beq	140ae4 <vfprintf+0x120>
  140a50:	e5947010 	ldr	r7, [r4, #16]
  140a54:	e3570000 	cmp	r7, #0
  140a58:	13a07000 	movne	r7, #0
  140a5c:	0a000035 	beq	140b38 <vfprintf+0x174>
  140a60:	e58d5000 	str	r5, [sp]
  140a64:	e28d3038 	add	r3, sp, #56	; 0x38
  140a68:	e28d200c 	add	r2, sp, #12
  140a6c:	e1a01009 	mov	r1, r9
  140a70:	e1a00004 	mov	r0, r4
  140a74:	ebfff79d 	bl	13e8f0 <printf_core>
  140a78:	e1a05000 	mov	r5, r0
  140a7c:	e3570000 	cmp	r7, #0
  140a80:	0a00000d 	beq	140abc <vfprintf+0xf8>
  140a84:	e3a02000 	mov	r2, #0
  140a88:	e5943024 	ldr	r3, [r4, #36]	; 0x24
  140a8c:	e1a01002 	mov	r1, r2
  140a90:	e1a00004 	mov	r0, r4
  140a94:	e12fff33 	blx	r3
  140a98:	e3a03000 	mov	r3, #0
  140a9c:	e5942014 	ldr	r2, [r4, #20]
  140aa0:	e584702c 	str	r7, [r4, #44]	; 0x2c
  140aa4:	e1520003 	cmp	r2, r3
  140aa8:	03e05000 	mvneq	r5, #0
  140aac:	e5843030 	str	r3, [r4, #48]	; 0x30
  140ab0:	e5843010 	str	r3, [r4, #16]
  140ab4:	e584301c 	str	r3, [r4, #28]
  140ab8:	e5843014 	str	r3, [r4, #20]
  140abc:	e5943000 	ldr	r3, [r4]
  140ac0:	e3130020 	tst	r3, #32
  140ac4:	13e05000 	mvnne	r5, #0
  140ac8:	e1866003 	orr	r6, r6, r3
  140acc:	e3580000 	cmp	r8, #0
  140ad0:	e5846000 	str	r6, [r4]
  140ad4:	1a000010 	bne	140b1c <vfprintf+0x158>
  140ad8:	e1a00005 	mov	r0, r5
  140adc:	e28dd0dc 	add	sp, sp, #220	; 0xdc
  140ae0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  140ae4:	e3a01050 	mov	r1, #80	; 0x50
  140ae8:	e28d2088 	add	r2, sp, #136	; 0x88
  140aec:	e594702c 	ldr	r7, [r4, #44]	; 0x2c
  140af0:	e5843010 	str	r3, [r4, #16]
  140af4:	e584301c 	str	r3, [r4, #28]
  140af8:	e5843014 	str	r3, [r4, #20]
  140afc:	e5841030 	str	r1, [r4, #48]	; 0x30
  140b00:	e584202c 	str	r2, [r4, #44]	; 0x2c
  140b04:	e1a00004 	mov	r0, r4
  140b08:	eb000b95 	bl	143964 <__towrite>
  140b0c:	e3500000 	cmp	r0, #0
  140b10:	13e05000 	mvnne	r5, #0
  140b14:	1affffd8 	bne	140a7c <vfprintf+0xb8>
  140b18:	eaffffd0 	b	140a60 <vfprintf+0x9c>
  140b1c:	e1a00004 	mov	r0, r4
  140b20:	eb000abe 	bl	143620 <__unlockfile>
  140b24:	e1a00005 	mov	r0, r5
  140b28:	e28dd0dc 	add	sp, sp, #220	; 0xdc
  140b2c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  140b30:	e3e05000 	mvn	r5, #0
  140b34:	eaffffe7 	b	140ad8 <vfprintf+0x114>
  140b38:	e1a00004 	mov	r0, r4
  140b3c:	eb000b88 	bl	143964 <__towrite>
  140b40:	e3500000 	cmp	r0, #0
  140b44:	13e05000 	mvnne	r5, #0
  140b48:	1affffdb 	bne	140abc <vfprintf+0xf8>
  140b4c:	eaffffc3 	b	140a60 <vfprintf+0x9c>

00140b50 <sn_write>:
  140b50:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  140b54:	e5906054 	ldr	r6, [r0, #84]	; 0x54
  140b58:	e590c01c 	ldr	ip, [r0, #28]
  140b5c:	e1a05000 	mov	r5, r0
  140b60:	e5900014 	ldr	r0, [r0, #20]
  140b64:	e5963004 	ldr	r3, [r6, #4]
  140b68:	e040000c 	sub	r0, r0, ip
  140b6c:	e1500003 	cmp	r0, r3
  140b70:	31a04000 	movcc	r4, r0
  140b74:	21a04003 	movcs	r4, r3
  140b78:	e3540000 	cmp	r4, #0
  140b7c:	e1a08001 	mov	r8, r1
  140b80:	e1a07002 	mov	r7, r2
  140b84:	e5960000 	ldr	r0, [r6]
  140b88:	1a000012 	bne	140bd8 <sn_write+0x88>
  140b8c:	e1570003 	cmp	r7, r3
  140b90:	31a04007 	movcc	r4, r7
  140b94:	21a04003 	movcs	r4, r3
  140b98:	e3540000 	cmp	r4, #0
  140b9c:	0a000006 	beq	140bbc <sn_write+0x6c>
  140ba0:	e1a01008 	mov	r1, r8
  140ba4:	e1a02004 	mov	r2, r4
  140ba8:	eb000079 	bl	140d94 <memcpy>
  140bac:	e8960009 	ldm	r6, {r0, r3}
  140bb0:	e0800004 	add	r0, r0, r4
  140bb4:	e0433004 	sub	r3, r3, r4
  140bb8:	e8860009 	stm	r6, {r0, r3}
  140bbc:	e3a03000 	mov	r3, #0
  140bc0:	e5c03000 	strb	r3, [r0]
  140bc4:	e595302c 	ldr	r3, [r5, #44]	; 0x2c
  140bc8:	e1a00007 	mov	r0, r7
  140bcc:	e585301c 	str	r3, [r5, #28]
  140bd0:	e5853014 	str	r3, [r5, #20]
  140bd4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  140bd8:	e1a0100c 	mov	r1, ip
  140bdc:	e1a02004 	mov	r2, r4
  140be0:	eb00006b 	bl	140d94 <memcpy>
  140be4:	e8960009 	ldm	r6, {r0, r3}
  140be8:	e0800004 	add	r0, r0, r4
  140bec:	e0433004 	sub	r3, r3, r4
  140bf0:	e8860009 	stm	r6, {r0, r3}
  140bf4:	eaffffe4 	b	140b8c <sn_write+0x3c>

00140bf8 <vsnprintf>:
  140bf8:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  140bfc:	e2516000 	subs	r6, r1, #0
  140c00:	e24dd0a4 	sub	sp, sp, #164	; 0xa4
  140c04:	e1a08002 	mov	r8, r2
  140c08:	e1a09003 	mov	r9, r3
  140c0c:	1a000018 	bne	140c74 <vsnprintf+0x7c>
  140c10:	e28d7010 	add	r7, sp, #16
  140c14:	e3a02090 	mov	r2, #144	; 0x90
  140c18:	e1a00007 	mov	r0, r7
  140c1c:	e28d4004 	add	r4, sp, #4
  140c20:	e58d600c 	str	r6, [sp, #12]
  140c24:	e58d4008 	str	r4, [sp, #8]
  140c28:	eb000191 	bl	141274 <memset>
  140c2c:	e3e02000 	mvn	r2, #0
  140c30:	e59f1098 	ldr	r1, [pc, #152]	; 140cd0 <vsnprintf+0xd8>
  140c34:	e28d3008 	add	r3, sp, #8
  140c38:	e58d205c 	str	r2, [sp, #92]	; 0x5c
  140c3c:	e58d2060 	str	r2, [sp, #96]	; 0x60
  140c40:	e58d1034 	str	r1, [sp, #52]	; 0x34
  140c44:	e58dd03c 	str	sp, [sp, #60]	; 0x3c
  140c48:	e58d3064 	str	r3, [sp, #100]	; 0x64
  140c4c:	e3a0c000 	mov	ip, #0
  140c50:	e1a02009 	mov	r2, r9
  140c54:	e1a01008 	mov	r1, r8
  140c58:	e1a00007 	mov	r0, r7
  140c5c:	e5c4c000 	strb	ip, [r4]
  140c60:	ebffff57 	bl	1409c4 <vfprintf>
  140c64:	e1a05000 	mov	r5, r0
  140c68:	e1a00005 	mov	r0, r5
  140c6c:	e28dd0a4 	add	sp, sp, #164	; 0xa4
  140c70:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  140c74:	e3e05000 	mvn	r5, #0
  140c78:	e1a04000 	mov	r4, r0
  140c7c:	e28d7010 	add	r7, sp, #16
  140c80:	e0863005 	add	r3, r6, r5
  140c84:	e3a02090 	mov	r2, #144	; 0x90
  140c88:	e1a00007 	mov	r0, r7
  140c8c:	e3a01000 	mov	r1, #0
  140c90:	e58d300c 	str	r3, [sp, #12]
  140c94:	e58d4008 	str	r4, [sp, #8]
  140c98:	eb000175 	bl	141274 <memset>
  140c9c:	e59f202c 	ldr	r2, [pc, #44]	; 140cd0 <vsnprintf+0xd8>
  140ca0:	e28d3008 	add	r3, sp, #8
  140ca4:	e3560000 	cmp	r6, #0
  140ca8:	e58d505c 	str	r5, [sp, #92]	; 0x5c
  140cac:	e58d5060 	str	r5, [sp, #96]	; 0x60
  140cb0:	e58d2034 	str	r2, [sp, #52]	; 0x34
  140cb4:	e58dd03c 	str	sp, [sp, #60]	; 0x3c
  140cb8:	e58d3064 	str	r3, [sp, #100]	; 0x64
  140cbc:	aaffffe2 	bge	140c4c <vsnprintf+0x54>
  140cc0:	ebffe085 	bl	138edc <__errno_location>
  140cc4:	e3a0204b 	mov	r2, #75	; 0x4b
  140cc8:	e5802000 	str	r2, [r0]
  140ccc:	eaffffe5 	b	140c68 <vsnprintf+0x70>
  140cd0:	00140b50 	.word	0x00140b50

00140cd4 <vsprintf>:
  140cd4:	e1a03002 	mov	r3, r2
  140cd8:	e1a02001 	mov	r2, r1
  140cdc:	e3e01102 	mvn	r1, #-2147483648	; 0x80000000
  140ce0:	eaffffc4 	b	140bf8 <vsnprintf>

00140ce4 <atoi>:
  140ce4:	e5d03000 	ldrb	r3, [r0]
  140ce8:	e2432009 	sub	r2, r3, #9
  140cec:	e3530020 	cmp	r3, #32
  140cf0:	13520004 	cmpne	r2, #4
  140cf4:	8a000004 	bhi	140d0c <atoi+0x28>
  140cf8:	e5f03001 	ldrb	r3, [r0, #1]!
  140cfc:	e2432009 	sub	r2, r3, #9
  140d00:	e3530020 	cmp	r3, #32
  140d04:	13520004 	cmpne	r2, #4
  140d08:	9afffffa 	bls	140cf8 <atoi+0x14>
  140d0c:	e353002b 	cmp	r3, #43	; 0x2b
  140d10:	0a000019 	beq	140d7c <atoi+0x98>
  140d14:	e353002d 	cmp	r3, #45	; 0x2d
  140d18:	0a00000f 	beq	140d5c <atoi+0x78>
  140d1c:	e5d01000 	ldrb	r1, [r0]
  140d20:	e2412030 	sub	r2, r1, #48	; 0x30
  140d24:	e3520009 	cmp	r2, #9
  140d28:	91a03000 	movls	r3, r0
  140d2c:	8a000010 	bhi	140d74 <atoi+0x90>
  140d30:	e3a0c000 	mov	ip, #0
  140d34:	e3a00000 	mov	r0, #0
  140d38:	e5f31001 	ldrb	r1, [r3, #1]!
  140d3c:	e0800100 	add	r0, r0, r0, lsl #2
  140d40:	e0620080 	rsb	r0, r2, r0, lsl #1
  140d44:	e2412030 	sub	r2, r1, #48	; 0x30
  140d48:	e3520009 	cmp	r2, #9
  140d4c:	9afffff9 	bls	140d38 <atoi+0x54>
  140d50:	e35c0000 	cmp	ip, #0
  140d54:	02600000 	rsbeq	r0, r0, #0
  140d58:	e12fff1e 	bx	lr
  140d5c:	e5d01001 	ldrb	r1, [r0, #1]
  140d60:	e2803001 	add	r3, r0, #1
  140d64:	e2412030 	sub	r2, r1, #48	; 0x30
  140d68:	e3520009 	cmp	r2, #9
  140d6c:	93a0c001 	movls	ip, #1
  140d70:	9affffef 	bls	140d34 <atoi+0x50>
  140d74:	e3a00000 	mov	r0, #0
  140d78:	e12fff1e 	bx	lr
  140d7c:	e5d01001 	ldrb	r1, [r0, #1]
  140d80:	e2803001 	add	r3, r0, #1
  140d84:	e2412030 	sub	r2, r1, #48	; 0x30
  140d88:	e3520009 	cmp	r2, #9
  140d8c:	9affffe7 	bls	140d30 <atoi+0x4c>
  140d90:	eafffff7 	b	140d74 <atoi+0x90>

00140d94 <memcpy>:
  140d94:	e92d4011 	push	{r0, r4, lr}
  140d98:	e24dd01c 	sub	sp, sp, #28
  140d9c:	e3520004 	cmp	r2, #4
  140da0:	3a0000b0 	bcc	141068 <copy_last_3_and_return>
  140da4:	e2613000 	rsb	r3, r1, #0
  140da8:	e2133003 	ands	r3, r3, #3
  140dac:	0a000007 	beq	140dd0 <src_aligned>
  140db0:	e1b0cf83 	lsls	ip, r3, #31
  140db4:	e0422003 	sub	r2, r2, r3
  140db8:	44d13001 	ldrbmi	r3, [r1], #1
  140dbc:	24d14001 	ldrbcs	r4, [r1], #1
  140dc0:	24d1c001 	ldrbcs	ip, [r1], #1
  140dc4:	44c03001 	strbmi	r3, [r0], #1
  140dc8:	24c04001 	strbcs	r4, [r0], #1
  140dcc:	24c0c001 	strbcs	ip, [r0], #1

00140dd0 <src_aligned>:
  140dd0:	e020c001 	eor	ip, r0, r1
  140dd4:	e31c0003 	tst	ip, #3
  140dd8:	1a000027 	bne	140e7c <non_congruent>
  140ddc:	e88d0fe0 	stm	sp, {r5, r6, r7, r8, r9, sl, fp}
  140de0:	e2603000 	rsb	r3, r0, #0
  140de4:	e213301c 	ands	r3, r3, #28
  140de8:	0a00000a 	beq	140e18 <cached_aligned32>
  140dec:	e1530002 	cmp	r3, r2
  140df0:	8202301c 	andhi	r3, r2, #28
  140df4:	e1b0ce03 	lsls	ip, r3, #28
  140df8:	28b100f0 	ldmcs	r1!, {r4, r5, r6, r7}
  140dfc:	48b10300 	ldmmi	r1!, {r8, r9}
  140e00:	28a000f0 	stmiacs	r0!, {r4, r5, r6, r7}
  140e04:	48a00300 	stmiami	r0!, {r8, r9}
  140e08:	e3130004 	tst	r3, #4
  140e0c:	1491a004 	ldrne	sl, [r1], #4
  140e10:	1480a004 	strne	sl, [r0], #4
  140e14:	e0422003 	sub	r2, r2, r3

00140e18 <cached_aligned32>:
  140e18:	e2522020 	subs	r2, r2, #32
  140e1c:	3a000004 	bcc	140e34 <less_than_32_left>
  140e20:	e8b10ff0 	ldm	r1!, {r4, r5, r6, r7, r8, r9, sl, fp}
  140e24:	e2522020 	subs	r2, r2, #32
  140e28:	e8a00ff0 	stmia	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  140e2c:	2afffffb 	bcs	140e20 <cached_aligned32+0x8>
  140e30:	e2822020 	add	r2, r2, #32

00140e34 <less_than_32_left>:
  140e34:	e312001f 	tst	r2, #31
  140e38:	0a00000c 	beq	140e70 <less_than_32_left+0x3c>
  140e3c:	e1b0ce02 	lsls	ip, r2, #28
  140e40:	28b100f0 	ldmcs	r1!, {r4, r5, r6, r7}
  140e44:	48b10300 	ldmmi	r1!, {r8, r9}
  140e48:	28a000f0 	stmiacs	r0!, {r4, r5, r6, r7}
  140e4c:	48a00300 	stmiami	r0!, {r8, r9}
  140e50:	e1b0cf02 	lsls	ip, r2, #30
  140e54:	24913004 	ldrcs	r3, [r1], #4
  140e58:	40d140b2 	ldrhmi	r4, [r1], #2
  140e5c:	24803004 	strcs	r3, [r0], #4
  140e60:	40c040b2 	strhmi	r4, [r0], #2
  140e64:	e3120001 	tst	r2, #1
  140e68:	15d13000 	ldrbne	r3, [r1]
  140e6c:	15c03000 	strbne	r3, [r0]
  140e70:	e8bd0fe0 	pop	{r5, r6, r7, r8, r9, sl, fp}
  140e74:	e8bd4011 	pop	{r0, r4, lr}
  140e78:	e12fff1e 	bx	lr

00140e7c <non_congruent>:
  140e7c:	e3520004 	cmp	r2, #4
  140e80:	3a000078 	bcc	141068 <copy_last_3_and_return>
  140e84:	e88d0fe0 	stm	sp, {r5, r6, r7, r8, r9, sl, fp}
  140e88:	e2605000 	rsb	r5, r0, #0
  140e8c:	e2055003 	and	r5, r5, #3
  140e90:	e1a0c185 	lsl	ip, r5, #3
  140e94:	e26ce020 	rsb	lr, ip, #32
  140e98:	e4913004 	ldr	r3, [r1], #4
  140e9c:	e2422004 	sub	r2, r2, #4
  140ea0:	e1b05f85 	lsls	r5, r5, #31
  140ea4:	44c03001 	strbmi	r3, [r0], #1
  140ea8:	41a03423 	lsrmi	r3, r3, #8
  140eac:	24c03001 	strbcs	r3, [r0], #1
  140eb0:	21a03423 	lsrcs	r3, r3, #8
  140eb4:	24c03001 	strbcs	r3, [r0], #1
  140eb8:	21a03423 	lsrcs	r3, r3, #8
  140ebc:	e3520004 	cmp	r2, #4
  140ec0:	3a000061 	bcc	14104c <partial_word_tail>
  140ec4:	e310001c 	tst	r0, #28
  140ec8:	0a000007 	beq	140eec <non_congruent+0x70>
  140ecc:	e4915004 	ldr	r5, [r1], #4
  140ed0:	e2422004 	sub	r2, r2, #4
  140ed4:	e1834e15 	orr	r4, r3, r5, lsl lr
  140ed8:	e1a03c35 	lsr	r3, r5, ip
  140edc:	e4804004 	str	r4, [r0], #4
  140ee0:	e3520004 	cmp	r2, #4
  140ee4:	2afffff6 	bcs	140ec4 <non_congruent+0x48>
  140ee8:	3a000057 	bcc	14104c <partial_word_tail>
  140eec:	e2522020 	subs	r2, r2, #32
  140ef0:	3a00004a 	bcc	141020 <less_than_thirtytwo>
  140ef4:	e35c0018 	cmp	ip, #24
  140ef8:	0a000031 	beq	140fc4 <loop24>
  140efc:	e35c0008 	cmp	ip, #8
  140f00:	0a000017 	beq	140f64 <loop8>

00140f04 <loop16>:
  140f04:	e491c004 	ldr	ip, [r1], #4
  140f08:	e1a0400c 	mov	r4, ip
  140f0c:	e8b10fe0 	ldm	r1!, {r5, r6, r7, r8, r9, sl, fp}
  140f10:	e2522020 	subs	r2, r2, #32
  140f14:	2491c004 	ldrcs	ip, [r1], #4
  140f18:	e1833804 	orr	r3, r3, r4, lsl #16
  140f1c:	e1a04824 	lsr	r4, r4, #16
  140f20:	e1844805 	orr	r4, r4, r5, lsl #16
  140f24:	e1a05825 	lsr	r5, r5, #16
  140f28:	e1855806 	orr	r5, r5, r6, lsl #16
  140f2c:	e1a06826 	lsr	r6, r6, #16
  140f30:	e1866807 	orr	r6, r6, r7, lsl #16
  140f34:	e1a07827 	lsr	r7, r7, #16
  140f38:	e1877808 	orr	r7, r7, r8, lsl #16
  140f3c:	e1a08828 	lsr	r8, r8, #16
  140f40:	e1888809 	orr	r8, r8, r9, lsl #16
  140f44:	e1a09829 	lsr	r9, r9, #16
  140f48:	e189980a 	orr	r9, r9, sl, lsl #16
  140f4c:	e1a0a82a 	lsr	sl, sl, #16
  140f50:	e18aa80b 	orr	sl, sl, fp, lsl #16
  140f54:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
  140f58:	e1a0382b 	lsr	r3, fp, #16
  140f5c:	2affffe9 	bcs	140f08 <loop16+0x4>
  140f60:	ea00002e 	b	141020 <less_than_thirtytwo>

00140f64 <loop8>:
  140f64:	e491c004 	ldr	ip, [r1], #4
  140f68:	e1a0400c 	mov	r4, ip
  140f6c:	e8b10fe0 	ldm	r1!, {r5, r6, r7, r8, r9, sl, fp}
  140f70:	e2522020 	subs	r2, r2, #32
  140f74:	2491c004 	ldrcs	ip, [r1], #4
  140f78:	e1833c04 	orr	r3, r3, r4, lsl #24
  140f7c:	e1a04424 	lsr	r4, r4, #8
  140f80:	e1844c05 	orr	r4, r4, r5, lsl #24
  140f84:	e1a05425 	lsr	r5, r5, #8
  140f88:	e1855c06 	orr	r5, r5, r6, lsl #24
  140f8c:	e1a06426 	lsr	r6, r6, #8
  140f90:	e1866c07 	orr	r6, r6, r7, lsl #24
  140f94:	e1a07427 	lsr	r7, r7, #8
  140f98:	e1877c08 	orr	r7, r7, r8, lsl #24
  140f9c:	e1a08428 	lsr	r8, r8, #8
  140fa0:	e1888c09 	orr	r8, r8, r9, lsl #24
  140fa4:	e1a09429 	lsr	r9, r9, #8
  140fa8:	e1899c0a 	orr	r9, r9, sl, lsl #24
  140fac:	e1a0a42a 	lsr	sl, sl, #8
  140fb0:	e18aac0b 	orr	sl, sl, fp, lsl #24
  140fb4:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
  140fb8:	e1a0342b 	lsr	r3, fp, #8
  140fbc:	2affffe9 	bcs	140f68 <loop8+0x4>
  140fc0:	ea000016 	b	141020 <less_than_thirtytwo>

00140fc4 <loop24>:
  140fc4:	e491c004 	ldr	ip, [r1], #4
  140fc8:	e1a0400c 	mov	r4, ip
  140fcc:	e8b10fe0 	ldm	r1!, {r5, r6, r7, r8, r9, sl, fp}
  140fd0:	e2522020 	subs	r2, r2, #32
  140fd4:	2491c004 	ldrcs	ip, [r1], #4
  140fd8:	e1833404 	orr	r3, r3, r4, lsl #8
  140fdc:	e1a04c24 	lsr	r4, r4, #24
  140fe0:	e1844405 	orr	r4, r4, r5, lsl #8
  140fe4:	e1a05c25 	lsr	r5, r5, #24
  140fe8:	e1855406 	orr	r5, r5, r6, lsl #8
  140fec:	e1a06c26 	lsr	r6, r6, #24
  140ff0:	e1866407 	orr	r6, r6, r7, lsl #8
  140ff4:	e1a07c27 	lsr	r7, r7, #24
  140ff8:	e1877408 	orr	r7, r7, r8, lsl #8
  140ffc:	e1a08c28 	lsr	r8, r8, #24
  141000:	e1888409 	orr	r8, r8, r9, lsl #8
  141004:	e1a09c29 	lsr	r9, r9, #24
  141008:	e189940a 	orr	r9, r9, sl, lsl #8
  14100c:	e1a0ac2a 	lsr	sl, sl, #24
  141010:	e18aa40b 	orr	sl, sl, fp, lsl #8
  141014:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
  141018:	e1a03c2b 	lsr	r3, fp, #24
  14101c:	2affffe9 	bcs	140fc8 <loop24+0x4>

00141020 <less_than_thirtytwo>:
  141020:	e26ec020 	rsb	ip, lr, #32
  141024:	e2822020 	add	r2, r2, #32
  141028:	e3520004 	cmp	r2, #4
  14102c:	3a000006 	bcc	14104c <partial_word_tail>
  141030:	e4915004 	ldr	r5, [r1], #4
  141034:	e2422004 	sub	r2, r2, #4
  141038:	e1834e15 	orr	r4, r3, r5, lsl lr
  14103c:	e1a03c35 	lsr	r3, r5, ip
  141040:	e4804004 	str	r4, [r0], #4
  141044:	e3520004 	cmp	r2, #4
  141048:	2afffff8 	bcs	141030 <less_than_thirtytwo+0x10>

0014104c <partial_word_tail>:
  14104c:	e1b05e0e 	lsls	r5, lr, #28
  141050:	44c03001 	strbmi	r3, [r0], #1
  141054:	41a03423 	lsrmi	r3, r3, #8
  141058:	24c03001 	strbcs	r3, [r0], #1
  14105c:	21a03423 	lsrcs	r3, r3, #8
  141060:	24c03001 	strbcs	r3, [r0], #1
  141064:	e89d0fe0 	ldm	sp, {r5, r6, r7, r8, r9, sl, fp}

00141068 <copy_last_3_and_return>:
  141068:	e1b02f82 	lsls	r2, r2, #31
  14106c:	44d12001 	ldrbmi	r2, [r1], #1
  141070:	24d13001 	ldrbcs	r3, [r1], #1
  141074:	25d1c000 	ldrbcs	ip, [r1]
  141078:	44c02001 	strbmi	r2, [r0], #1
  14107c:	24c03001 	strbcs	r3, [r0], #1
  141080:	25c0c000 	strbcs	ip, [r0]
  141084:	e28dd01c 	add	sp, sp, #28
  141088:	e8bd4011 	pop	{r0, r4, lr}
  14108c:	e12fff1e 	bx	lr

00141090 <memcmp>:
  141090:	e3520000 	cmp	r2, #0
  141094:	0a00000c 	beq	1410cc <memcmp+0x3c>
  141098:	e5d0c000 	ldrb	ip, [r0]
  14109c:	e5d13000 	ldrb	r3, [r1]
  1410a0:	e153000c 	cmp	r3, ip
  1410a4:	1a00000a 	bne	1410d4 <memcmp+0x44>
  1410a8:	e2422001 	sub	r2, r2, #1
  1410ac:	e0812002 	add	r2, r1, r2
  1410b0:	ea000003 	b	1410c4 <memcmp+0x34>
  1410b4:	e5f0c001 	ldrb	ip, [r0, #1]!
  1410b8:	e5f13001 	ldrb	r3, [r1, #1]!
  1410bc:	e15c0003 	cmp	ip, r3
  1410c0:	1a000003 	bne	1410d4 <memcmp+0x44>
  1410c4:	e1510002 	cmp	r1, r2
  1410c8:	1afffff9 	bne	1410b4 <memcmp+0x24>
  1410cc:	e3a00000 	mov	r0, #0
  1410d0:	e12fff1e 	bx	lr
  1410d4:	e04c0003 	sub	r0, ip, r3
  1410d8:	e12fff1e 	bx	lr

001410dc <memmove>:
  1410dc:	e1500001 	cmp	r0, r1
  1410e0:	e92d4030 	push	{r4, r5, lr}
  1410e4:	e1a0e000 	mov	lr, r0
  1410e8:	0a000030 	beq	1411b0 <memmove+0xd4>
  1410ec:	e0414000 	sub	r4, r1, r0
  1410f0:	e0444002 	sub	r4, r4, r2
  1410f4:	e0625f82 	rsb	r5, r2, r2, lsl #31
  1410f8:	e1540085 	cmp	r4, r5, lsl #1
  1410fc:	e1a0c001 	mov	ip, r1
  141100:	e1a03002 	mov	r3, r2
  141104:	9a000054 	bls	14125c <memmove+0x180>
  141108:	e0212000 	eor	r2, r1, r0
  14110c:	e1500001 	cmp	r0, r1
  141110:	e2022003 	and	r2, r2, #3
  141114:	2a000027 	bcs	1411b8 <memmove+0xdc>
  141118:	e3520000 	cmp	r2, #0
  14111c:	1a00001a 	bne	14118c <memmove+0xb0>
  141120:	e3100003 	tst	r0, #3
  141124:	0a000050 	beq	14126c <memmove+0x190>
  141128:	e3530000 	cmp	r3, #0
  14112c:	11a02000 	movne	r2, r0
  141130:	e2433001 	sub	r3, r3, #1
  141134:	1a000002 	bne	141144 <memmove+0x68>
  141138:	ea00001c 	b	1411b0 <memmove+0xd4>
  14113c:	e2533001 	subs	r3, r3, #1
  141140:	3a00001a 	bcc	1411b0 <memmove+0xd4>
  141144:	e4dc1001 	ldrb	r1, [ip], #1
  141148:	e4c21001 	strb	r1, [r2], #1
  14114c:	e3120003 	tst	r2, #3
  141150:	1afffff9 	bne	14113c <memmove+0x60>
  141154:	e3530003 	cmp	r3, #3
  141158:	9a00000c 	bls	141190 <memmove+0xb4>
  14115c:	e2435004 	sub	r5, r3, #4
  141160:	e3c55003 	bic	r5, r5, #3
  141164:	e2855004 	add	r5, r5, #4
  141168:	e0824005 	add	r4, r2, r5
  14116c:	e24c1004 	sub	r1, ip, #4
  141170:	e5b10004 	ldr	r0, [r1, #4]!
  141174:	e4820004 	str	r0, [r2], #4
  141178:	e1540002 	cmp	r4, r2
  14117c:	1afffffb 	bne	141170 <memmove+0x94>
  141180:	e2033003 	and	r3, r3, #3
  141184:	e08cc005 	add	ip, ip, r5
  141188:	ea000000 	b	141190 <memmove+0xb4>
  14118c:	e1a02000 	mov	r2, r0
  141190:	e3530000 	cmp	r3, #0
  141194:	12422001 	subne	r2, r2, #1
  141198:	108c3003 	addne	r3, ip, r3
  14119c:	0a000003 	beq	1411b0 <memmove+0xd4>
  1411a0:	e4dc1001 	ldrb	r1, [ip], #1
  1411a4:	e153000c 	cmp	r3, ip
  1411a8:	e5e21001 	strb	r1, [r2, #1]!
  1411ac:	1afffffb 	bne	1411a0 <memmove+0xc4>
  1411b0:	e1a0000e 	mov	r0, lr
  1411b4:	e8bd8030 	pop	{r4, r5, pc}
  1411b8:	e3520000 	cmp	r2, #0
  1411bc:	1a00001c 	bne	141234 <memmove+0x158>
  1411c0:	e0801003 	add	r1, r0, r3
  1411c4:	e3110003 	tst	r1, #3
  1411c8:	0a000025 	beq	141264 <memmove+0x188>
  1411cc:	e3530000 	cmp	r3, #0
  1411d0:	e2432001 	sub	r2, r3, #1
  1411d4:	0afffff5 	beq	1411b0 <memmove+0xd4>
  1411d8:	e08c3003 	add	r3, ip, r3
  1411dc:	ea000001 	b	1411e8 <memmove+0x10c>
  1411e0:	e2522001 	subs	r2, r2, #1
  1411e4:	3afffff1 	bcc	1411b0 <memmove+0xd4>
  1411e8:	e5730001 	ldrb	r0, [r3, #-1]!
  1411ec:	e5610001 	strb	r0, [r1, #-1]!
  1411f0:	e3110003 	tst	r1, #3
  1411f4:	1afffff9 	bne	1411e0 <memmove+0x104>
  1411f8:	e3520003 	cmp	r2, #3
  1411fc:	91a03002 	movls	r3, r2
  141200:	9a00000b 	bls	141234 <memmove+0x158>
  141204:	e24c0004 	sub	r0, ip, #4
  141208:	e2423004 	sub	r3, r2, #4
  14120c:	e3c33003 	bic	r3, r3, #3
  141210:	e0800002 	add	r0, r0, r2
  141214:	e0400003 	sub	r0, r0, r3
  141218:	e08e1002 	add	r1, lr, r2
  14121c:	e08c3002 	add	r3, ip, r2
  141220:	e5334004 	ldr	r4, [r3, #-4]!
  141224:	e1530000 	cmp	r3, r0
  141228:	e5214004 	str	r4, [r1, #-4]!
  14122c:	1afffffb 	bne	141220 <memmove+0x144>
  141230:	e2023003 	and	r3, r2, #3
  141234:	e3530000 	cmp	r3, #0
  141238:	108c2003 	addne	r2, ip, r3
  14123c:	108e3003 	addne	r3, lr, r3
  141240:	0affffda 	beq	1411b0 <memmove+0xd4>
  141244:	e5721001 	ldrb	r1, [r2, #-1]!
  141248:	e15c0002 	cmp	ip, r2
  14124c:	e5631001 	strb	r1, [r3, #-1]!
  141250:	1afffffb 	bne	141244 <memmove+0x168>
  141254:	e1a0000e 	mov	r0, lr
  141258:	e8bd8030 	pop	{r4, r5, pc}
  14125c:	e8bd4030 	pop	{r4, r5, lr}
  141260:	eafffecb 	b	140d94 <memcpy>
  141264:	e1a02003 	mov	r2, r3
  141268:	eaffffe2 	b	1411f8 <memmove+0x11c>
  14126c:	e1a02000 	mov	r2, r0
  141270:	eaffffb7 	b	141154 <memmove+0x78>

00141274 <memset>:
  141274:	e3520000 	cmp	r2, #0
  141278:	012fff1e 	bxeq	lr
  14127c:	e1a03000 	mov	r3, r0
  141280:	e20110ff 	and	r1, r1, #255	; 0xff
  141284:	e6c31002 	strb	r1, [r3], r2
  141288:	e3520002 	cmp	r2, #2
  14128c:	e5431001 	strb	r1, [r3, #-1]
  141290:	912fff1e 	bxls	lr
  141294:	e3520006 	cmp	r2, #6
  141298:	e5c01001 	strb	r1, [r0, #1]
  14129c:	e5c01002 	strb	r1, [r0, #2]
  1412a0:	e5431002 	strb	r1, [r3, #-2]
  1412a4:	e5431003 	strb	r1, [r3, #-3]
  1412a8:	912fff1e 	bxls	lr
  1412ac:	e3520008 	cmp	r2, #8
  1412b0:	e5c01003 	strb	r1, [r0, #3]
  1412b4:	e5431004 	strb	r1, [r3, #-4]
  1412b8:	912fff1e 	bxls	lr
  1412bc:	e260c000 	rsb	ip, r0, #0
  1412c0:	e20cc003 	and	ip, ip, #3
  1412c4:	e042200c 	sub	r2, r2, ip
  1412c8:	e3c22003 	bic	r2, r2, #3
  1412cc:	e0811401 	add	r1, r1, r1, lsl #8
  1412d0:	e080300c 	add	r3, r0, ip
  1412d4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  1412d8:	e0811801 	add	r1, r1, r1, lsl #16
  1412dc:	e3520008 	cmp	r2, #8
  1412e0:	e083e002 	add	lr, r3, r2
  1412e4:	e780100c 	str	r1, [r0, ip]
  1412e8:	e50e1004 	str	r1, [lr, #-4]
  1412ec:	98bd80f0 	popls	{r4, r5, r6, r7, pc}
  1412f0:	e3520018 	cmp	r2, #24
  1412f4:	e5831004 	str	r1, [r3, #4]
  1412f8:	e5831008 	str	r1, [r3, #8]
  1412fc:	e50e100c 	str	r1, [lr, #-12]
  141300:	e50e1008 	str	r1, [lr, #-8]
  141304:	98bd80f0 	popls	{r4, r5, r6, r7, pc}
  141308:	e3a04000 	mov	r4, #0
  14130c:	e203c004 	and	ip, r3, #4
  141310:	e28cc018 	add	ip, ip, #24
  141314:	e042200c 	sub	r2, r2, ip
  141318:	e352001f 	cmp	r2, #31
  14131c:	e583100c 	str	r1, [r3, #12]
  141320:	e5831010 	str	r1, [r3, #16]
  141324:	e5831014 	str	r1, [r3, #20]
  141328:	e5831018 	str	r1, [r3, #24]
  14132c:	e1a05001 	mov	r5, r1
  141330:	e50e101c 	str	r1, [lr, #-28]	; 0xffffffe4
  141334:	e50e1018 	str	r1, [lr, #-24]	; 0xffffffe8
  141338:	e50e1014 	str	r1, [lr, #-20]	; 0xffffffec
  14133c:	e50e1010 	str	r1, [lr, #-16]
  141340:	e1846001 	orr	r6, r4, r1
  141344:	e1a07001 	mov	r7, r1
  141348:	e083100c 	add	r1, r3, ip
  14134c:	98bd80f0 	popls	{r4, r5, r6, r7, pc}
  141350:	e2422020 	sub	r2, r2, #32
  141354:	e3c2301f 	bic	r3, r2, #31
  141358:	e2812040 	add	r2, r1, #64	; 0x40
  14135c:	e0833002 	add	r3, r3, r2
  141360:	e2812020 	add	r2, r1, #32
  141364:	e5026020 	str	r6, [r2, #-32]	; 0xffffffe0
  141368:	e502701c 	str	r7, [r2, #-28]	; 0xffffffe4
  14136c:	e5026018 	str	r6, [r2, #-24]	; 0xffffffe8
  141370:	e5027014 	str	r7, [r2, #-20]	; 0xffffffec
  141374:	e5026010 	str	r6, [r2, #-16]
  141378:	e502700c 	str	r7, [r2, #-12]
  14137c:	e90200c0 	stmdb	r2, {r6, r7}
  141380:	e2822020 	add	r2, r2, #32
  141384:	e1520003 	cmp	r2, r3
  141388:	1afffff5 	bne	141364 <memset+0xf0>
  14138c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00141390 <strcasecmp>:
  141390:	e92d4070 	push	{r4, r5, r6, lr}
  141394:	e1a05000 	mov	r5, r0
  141398:	e5d00000 	ldrb	r0, [r0]
  14139c:	e1a04001 	mov	r4, r1
  1413a0:	e3500000 	cmp	r0, #0
  1413a4:	1a00000c 	bne	1413dc <strcasecmp+0x4c>
  1413a8:	ea00000e 	b	1413e8 <strcasecmp+0x58>
  1413ac:	e1500003 	cmp	r0, r3
  1413b0:	0a000005 	beq	1413cc <strcasecmp+0x3c>
  1413b4:	eb00067f 	bl	142db8 <tolower>
  1413b8:	e1a06000 	mov	r6, r0
  1413bc:	e5d40000 	ldrb	r0, [r4]
  1413c0:	eb00067c 	bl	142db8 <tolower>
  1413c4:	e1560000 	cmp	r6, r0
  1413c8:	1a00000c 	bne	141400 <strcasecmp+0x70>
  1413cc:	e5f50001 	ldrb	r0, [r5, #1]!
  1413d0:	e2844001 	add	r4, r4, #1
  1413d4:	e3500000 	cmp	r0, #0
  1413d8:	0a000002 	beq	1413e8 <strcasecmp+0x58>
  1413dc:	e5d43000 	ldrb	r3, [r4]
  1413e0:	e3530000 	cmp	r3, #0
  1413e4:	1afffff0 	bne	1413ac <strcasecmp+0x1c>
  1413e8:	eb000672 	bl	142db8 <tolower>
  1413ec:	e1a05000 	mov	r5, r0
  1413f0:	e5d40000 	ldrb	r0, [r4]
  1413f4:	eb00066f 	bl	142db8 <tolower>
  1413f8:	e0450000 	sub	r0, r5, r0
  1413fc:	e8bd8070 	pop	{r4, r5, r6, pc}
  141400:	e5d50000 	ldrb	r0, [r5]
  141404:	eafffff7 	b	1413e8 <strcasecmp+0x58>

00141408 <__strcasecmp_l>:
  141408:	eaffffe0 	b	141390 <strcasecmp>

0014140c <strcat>:
  14140c:	e92d4070 	push	{r4, r5, r6, lr}
  141410:	e1a04000 	mov	r4, r0
  141414:	e1a05001 	mov	r5, r1
  141418:	eb000026 	bl	1414b8 <strlen>
  14141c:	e1a01005 	mov	r1, r5
  141420:	e0840000 	add	r0, r4, r0
  141424:	eb000012 	bl	141474 <strcpy>
  141428:	e1a00004 	mov	r0, r4
  14142c:	e8bd8070 	pop	{r4, r5, r6, pc}

00141430 <strcmp>:
  141430:	e5d02000 	ldrb	r2, [r0]
  141434:	e5d13000 	ldrb	r3, [r1]
  141438:	e1530002 	cmp	r3, r2
  14143c:	0a000004 	beq	141454 <strcmp+0x24>
  141440:	ea000009 	b	14146c <strcmp+0x3c>
  141444:	e5f03001 	ldrb	r3, [r0, #1]!
  141448:	e5f12001 	ldrb	r2, [r1, #1]!
  14144c:	e1530002 	cmp	r3, r2
  141450:	1a000003 	bne	141464 <strcmp+0x34>
  141454:	e3530000 	cmp	r3, #0
  141458:	1afffff9 	bne	141444 <strcmp+0x14>
  14145c:	e1a00003 	mov	r0, r3
  141460:	e12fff1e 	bx	lr
  141464:	e0430002 	sub	r0, r3, r2
  141468:	e12fff1e 	bx	lr
  14146c:	e0420003 	sub	r0, r2, r3
  141470:	e12fff1e 	bx	lr

00141474 <strcpy>:
  141474:	e92d4010 	push	{r4, lr}
  141478:	e1a04000 	mov	r4, r0
  14147c:	eb000a94 	bl	143ed4 <__stpcpy>
  141480:	e1a00004 	mov	r0, r4
  141484:	e8bd8010 	pop	{r4, pc}

00141488 <strdup>:
  141488:	e92d4070 	push	{r4, r5, r6, lr}
  14148c:	e1a05000 	mov	r5, r0
  141490:	eb000008 	bl	1414b8 <strlen>
  141494:	e2804001 	add	r4, r0, #1
  141498:	e1a00004 	mov	r0, r4
  14149c:	ebffefac 	bl	13d354 <malloc>
  1414a0:	e3500000 	cmp	r0, #0
  1414a4:	08bd8070 	popeq	{r4, r5, r6, pc}
  1414a8:	e1a02004 	mov	r2, r4
  1414ac:	e1a01005 	mov	r1, r5
  1414b0:	e8bd4070 	pop	{r4, r5, r6, lr}
  1414b4:	eafffe36 	b	140d94 <memcpy>

001414b8 <strlen>:
  1414b8:	e3100003 	tst	r0, #3
  1414bc:	0a000023 	beq	141550 <strlen+0x98>
  1414c0:	e5d03000 	ldrb	r3, [r0]
  1414c4:	e3530000 	cmp	r3, #0
  1414c8:	12803001 	addne	r3, r0, #1
  1414cc:	1a000005 	bne	1414e8 <strlen+0x30>
  1414d0:	ea000020 	b	141558 <strlen+0xa0>
  1414d4:	e5d31000 	ldrb	r1, [r3]
  1414d8:	e283c001 	add	ip, r3, #1
  1414dc:	e3510000 	cmp	r1, #0
  1414e0:	0a000018 	beq	141548 <strlen+0x90>
  1414e4:	e1a0300c 	mov	r3, ip
  1414e8:	e3130003 	tst	r3, #3
  1414ec:	e1a02003 	mov	r2, r3
  1414f0:	1afffff7 	bne	1414d4 <strlen+0x1c>
  1414f4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  1414f8:	e59fe060 	ldr	lr, [pc, #96]	; 141560 <strlen+0xa8>
  1414fc:	e592c000 	ldr	ip, [r2]
  141500:	e59f305c 	ldr	r3, [pc, #92]	; 141564 <strlen+0xac>
  141504:	e08c100e 	add	r1, ip, lr
  141508:	e1c1100c 	bic	r1, r1, ip
  14150c:	e1110003 	tst	r1, r3
  141510:	1a000004 	bne	141528 <strlen+0x70>
  141514:	e5b2c004 	ldr	ip, [r2, #4]!
  141518:	e08c100e 	add	r1, ip, lr
  14151c:	e1c1100c 	bic	r1, r1, ip
  141520:	e1110003 	tst	r1, r3
  141524:	0afffffa 	beq	141514 <strlen+0x5c>
  141528:	e5d23000 	ldrb	r3, [r2]
  14152c:	e3530000 	cmp	r3, #0
  141530:	0a000002 	beq	141540 <strlen+0x88>
  141534:	e5f23001 	ldrb	r3, [r2, #1]!
  141538:	e3530000 	cmp	r3, #0
  14153c:	1afffffc 	bne	141534 <strlen+0x7c>
  141540:	e0420000 	sub	r0, r2, r0
  141544:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
  141548:	e0430000 	sub	r0, r3, r0
  14154c:	e12fff1e 	bx	lr
  141550:	e1a02000 	mov	r2, r0
  141554:	eaffffe6 	b	1414f4 <strlen+0x3c>
  141558:	e1a00003 	mov	r0, r3
  14155c:	e12fff1e 	bx	lr
  141560:	fefefeff 	.word	0xfefefeff
  141564:	80808080 	.word	0x80808080

00141568 <strncmp>:
  141568:	e3520000 	cmp	r2, #0
  14156c:	0a00001e 	beq	1415ec <strncmp+0x84>
  141570:	e92d4010 	push	{r4, lr}
  141574:	e5d04000 	ldrb	r4, [r0]
  141578:	e5d1c000 	ldrb	ip, [r1]
  14157c:	e3540000 	cmp	r4, #0
  141580:	0a00001b 	beq	1415f4 <strncmp+0x8c>
  141584:	e3520001 	cmp	r2, #1
  141588:	135c0000 	cmpne	ip, #0
  14158c:	13a03001 	movne	r3, #1
  141590:	03a03000 	moveq	r3, #0
  141594:	e154000c 	cmp	r4, ip
  141598:	13a03000 	movne	r3, #0
  14159c:	02033001 	andeq	r3, r3, #1
  1415a0:	e3530000 	cmp	r3, #0
  1415a4:	e242e001 	sub	lr, r2, #1
  1415a8:	0a000011 	beq	1415f4 <strncmp+0x8c>
  1415ac:	e5f02001 	ldrb	r2, [r0, #1]!
  1415b0:	e24ee001 	sub	lr, lr, #1
  1415b4:	e3520000 	cmp	r2, #0
  1415b8:	e5f1c001 	ldrb	ip, [r1, #1]!
  1415bc:	0a000008 	beq	1415e4 <strncmp+0x7c>
  1415c0:	e042300c 	sub	r3, r2, ip
  1415c4:	e16f3f13 	clz	r3, r3
  1415c8:	e35c0000 	cmp	ip, #0
  1415cc:	e1a032a3 	lsr	r3, r3, #5
  1415d0:	03a03000 	moveq	r3, #0
  1415d4:	e35e0000 	cmp	lr, #0
  1415d8:	03a03000 	moveq	r3, #0
  1415dc:	e3530000 	cmp	r3, #0
  1415e0:	1afffff1 	bne	1415ac <strncmp+0x44>
  1415e4:	e042000c 	sub	r0, r2, ip
  1415e8:	e8bd8010 	pop	{r4, pc}
  1415ec:	e1a00002 	mov	r0, r2
  1415f0:	e12fff1e 	bx	lr
  1415f4:	e1a02004 	mov	r2, r4
  1415f8:	eafffff9 	b	1415e4 <strncmp+0x7c>

001415fc <strncpy>:
  1415fc:	e92d4010 	push	{r4, lr}
  141600:	e1a04000 	mov	r4, r0
  141604:	eb000a63 	bl	143f98 <__stpncpy>
  141608:	e1a00004 	mov	r0, r4
  14160c:	e8bd8010 	pop	{r4, pc}

00141610 <strnlen>:
  141610:	e92d4070 	push	{r4, r5, r6, lr}
  141614:	e1a04001 	mov	r4, r1
  141618:	e3a01000 	mov	r1, #0
  14161c:	e1a02004 	mov	r2, r4
  141620:	e1a05000 	mov	r5, r0
  141624:	eb0009d4 	bl	143d7c <memchr>
  141628:	e3500000 	cmp	r0, #0
  14162c:	10400005 	subne	r0, r0, r5
  141630:	01a00004 	moveq	r0, r4
  141634:	e8bd8070 	pop	{r4, r5, r6, pc}

00141638 <twoway_strstr>:
  141638:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  14163c:	e1a08001 	mov	r8, r1
  141640:	e24dde43 	sub	sp, sp, #1072	; 0x430
  141644:	e24dd004 	sub	sp, sp, #4
  141648:	e1a09000 	mov	r9, r0
  14164c:	e3a02020 	mov	r2, #32
  141650:	e3a01000 	mov	r1, #0
  141654:	e28d0010 	add	r0, sp, #16
  141658:	ebffff05 	bl	141274 <memset>
  14165c:	e5d83000 	ldrb	r3, [r8]
  141660:	e3530000 	cmp	r3, #0
  141664:	0a0000c8 	beq	14198c <twoway_strstr+0x354>
  141668:	e5d92000 	ldrb	r2, [r9]
  14166c:	e3520000 	cmp	r2, #0
  141670:	11a0c008 	movne	ip, r8
  141674:	11a0e009 	movne	lr, r9
  141678:	13a05000 	movne	r5, #0
  14167c:	13a06001 	movne	r6, #1
  141680:	1a000003 	bne	141694 <twoway_strstr+0x5c>
  141684:	ea000075 	b	141860 <twoway_strstr+0x228>
  141688:	e5fe2001 	ldrb	r2, [lr, #1]!
  14168c:	e3520000 	cmp	r2, #0
  141690:	0a000072 	beq	141860 <twoway_strstr+0x228>
  141694:	e28d1e43 	add	r1, sp, #1072	; 0x430
  141698:	e1a022a3 	lsr	r2, r3, #5
  14169c:	e0812102 	add	r2, r1, r2, lsl #2
  1416a0:	e0810103 	add	r0, r1, r3, lsl #2
  1416a4:	e203401f 	and	r4, r3, #31
  1416a8:	e5121420 	ldr	r1, [r2, #-1056]	; 0xfffffbe0
  1416ac:	e5fc3001 	ldrb	r3, [ip, #1]!
  1416b0:	e2855001 	add	r5, r5, #1
  1416b4:	e1811416 	orr	r1, r1, r6, lsl r4
  1416b8:	e3530000 	cmp	r3, #0
  1416bc:	e5005400 	str	r5, [r0, #-1024]	; 0xfffffc00
  1416c0:	e5021420 	str	r1, [r2, #-1056]	; 0xfffffbe0
  1416c4:	1affffef 	bne	141688 <twoway_strstr+0x50>
  1416c8:	e3a00001 	mov	r0, #1
  1416cc:	e3e0c000 	mvn	ip, #0
  1416d0:	e1a01000 	mov	r1, r0
  1416d4:	e0832001 	add	r2, r3, r1
  1416d8:	e1550002 	cmp	r5, r2
  1416dc:	e088e00c 	add	lr, r8, ip
  1416e0:	9a00000b 	bls	141714 <twoway_strstr+0xdc>
  1416e4:	e7de4001 	ldrb	r4, [lr, r1]
  1416e8:	e7d8e002 	ldrb	lr, [r8, r2]
  1416ec:	e154000e 	cmp	r4, lr
  1416f0:	0a00008f 	beq	141934 <twoway_strstr+0x2fc>
  1416f4:	9a000096 	bls	141954 <twoway_strstr+0x31c>
  1416f8:	e042000c 	sub	r0, r2, ip
  1416fc:	e1a03002 	mov	r3, r2
  141700:	e3a01001 	mov	r1, #1
  141704:	e0832001 	add	r2, r3, r1
  141708:	e1550002 	cmp	r5, r2
  14170c:	e088e00c 	add	lr, r8, ip
  141710:	8afffff3 	bhi	1416e4 <twoway_strstr+0xac>
  141714:	e3a06001 	mov	r6, #1
  141718:	e3a01000 	mov	r1, #0
  14171c:	e1a02006 	mov	r2, r6
  141720:	e3e0a000 	mvn	sl, #0
  141724:	e0813002 	add	r3, r1, r2
  141728:	e1550003 	cmp	r5, r3
  14172c:	e088e002 	add	lr, r8, r2
  141730:	9a00000b 	bls	141764 <twoway_strstr+0x12c>
  141734:	e7de400a 	ldrb	r4, [lr, sl]
  141738:	e7d8e003 	ldrb	lr, [r8, r3]
  14173c:	e154000e 	cmp	r4, lr
  141740:	0a00007f 	beq	141944 <twoway_strstr+0x30c>
  141744:	2a000087 	bcs	141968 <twoway_strstr+0x330>
  141748:	e043600a 	sub	r6, r3, sl
  14174c:	e3a02001 	mov	r2, #1
  141750:	e1a01003 	mov	r1, r3
  141754:	e0813002 	add	r3, r1, r2
  141758:	e1550003 	cmp	r5, r3
  14175c:	e088e002 	add	lr, r8, r2
  141760:	8afffff3 	bhi	141734 <twoway_strstr+0xfc>
  141764:	e58d6008 	str	r6, [sp, #8]
  141768:	e28a2001 	add	r2, sl, #1
  14176c:	e28c3001 	add	r3, ip, #1
  141770:	e1520003 	cmp	r2, r3
  141774:	91a0b003 	movls	fp, r3
  141778:	81a0b002 	movhi	fp, r2
  14177c:	e59d3008 	ldr	r3, [sp, #8]
  141780:	91a03000 	movls	r3, r0
  141784:	e1a0200b 	mov	r2, fp
  141788:	e0881003 	add	r1, r8, r3
  14178c:	e1a00008 	mov	r0, r8
  141790:	91a0a00c 	movls	sl, ip
  141794:	e58d3008 	str	r3, [sp, #8]
  141798:	ebfffe3c 	bl	141090 <memcmp>
  14179c:	e3500000 	cmp	r0, #0
  1417a0:	0a000075 	beq	14197c <twoway_strstr+0x344>
  1417a4:	e2452001 	sub	r2, r5, #1
  1417a8:	e042200a 	sub	r2, r2, sl
  1417ac:	e152000a 	cmp	r2, sl
  1417b0:	e3a03000 	mov	r3, #0
  1417b4:	31a0200a 	movcc	r2, sl
  1417b8:	e58d300c 	str	r3, [sp, #12]
  1417bc:	e2823001 	add	r3, r2, #1
  1417c0:	e58d3008 	str	r3, [sp, #8]
  1417c4:	e1a04009 	mov	r4, r9
  1417c8:	e3a06000 	mov	r6, #0
  1417cc:	e3a07001 	mov	r7, #1
  1417d0:	e385303f 	orr	r3, r5, #63	; 0x3f
  1417d4:	e58d3004 	str	r3, [sp, #4]
  1417d8:	e0493004 	sub	r3, r9, r4
  1417dc:	e1530005 	cmp	r3, r5
  1417e0:	3a000014 	bcc	141838 <twoway_strstr+0x200>
  1417e4:	e0841005 	add	r1, r4, r5
  1417e8:	e5513001 	ldrb	r3, [r1, #-1]
  1417ec:	e28d0e43 	add	r0, sp, #1072	; 0x430
  1417f0:	e1a022a3 	lsr	r2, r3, #5
  1417f4:	e0802102 	add	r2, r0, r2, lsl #2
  1417f8:	e5122420 	ldr	r2, [r2, #-1056]	; 0xfffffbe0
  1417fc:	e203001f 	and	r0, r3, #31
  141800:	e0122017 	ands	r2, r2, r7, lsl r0
  141804:	0a000040 	beq	14190c <twoway_strstr+0x2d4>
  141808:	e28d2e43 	add	r2, sp, #1072	; 0x430
  14180c:	e0823103 	add	r3, r2, r3, lsl #2
  141810:	e5133400 	ldr	r3, [r3, #-1024]	; 0xfffffc00
  141814:	e0553003 	subs	r3, r5, r3
  141818:	0a000015 	beq	141874 <twoway_strstr+0x23c>
  14181c:	e1560003 	cmp	r6, r3
  141820:	20844006 	addcs	r4, r4, r6
  141824:	30844003 	addcc	r4, r4, r3
  141828:	e0493004 	sub	r3, r9, r4
  14182c:	e1530005 	cmp	r3, r5
  141830:	e3a06000 	mov	r6, #0
  141834:	2affffea 	bcs	1417e4 <twoway_strstr+0x1ac>
  141838:	e59d2004 	ldr	r2, [sp, #4]
  14183c:	e3a01000 	mov	r1, #0
  141840:	e1a00009 	mov	r0, r9
  141844:	eb00094c 	bl	143d7c <memchr>
  141848:	e3500000 	cmp	r0, #0
  14184c:	0a000035 	beq	141928 <twoway_strstr+0x2f0>
  141850:	e0403004 	sub	r3, r0, r4
  141854:	e1530005 	cmp	r3, r5
  141858:	21a09000 	movcs	r9, r0
  14185c:	2affffe0 	bcs	1417e4 <twoway_strstr+0x1ac>
  141860:	e3a04000 	mov	r4, #0
  141864:	e1a00004 	mov	r0, r4
  141868:	e28dde43 	add	sp, sp, #1072	; 0x430
  14186c:	e28dd004 	add	sp, sp, #4
  141870:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  141874:	e156000b 	cmp	r6, fp
  141878:	21a03006 	movcs	r3, r6
  14187c:	31a0300b 	movcc	r3, fp
  141880:	e7d82003 	ldrb	r2, [r8, r3]
  141884:	e0881003 	add	r1, r8, r3
  141888:	e3520000 	cmp	r2, #0
  14188c:	0a00000b 	beq	1418c0 <twoway_strstr+0x288>
  141890:	e7d4c003 	ldrb	ip, [r4, r3]
  141894:	e0840003 	add	r0, r4, r3
  141898:	e15c0002 	cmp	ip, r2
  14189c:	0a000003 	beq	1418b0 <twoway_strstr+0x278>
  1418a0:	ea00001c 	b	141918 <twoway_strstr+0x2e0>
  1418a4:	e5f0c001 	ldrb	ip, [r0, #1]!
  1418a8:	e15c0002 	cmp	ip, r2
  1418ac:	1a000019 	bne	141918 <twoway_strstr+0x2e0>
  1418b0:	e5f12001 	ldrb	r2, [r1, #1]!
  1418b4:	e2833001 	add	r3, r3, #1
  1418b8:	e3520000 	cmp	r2, #0
  1418bc:	1afffff8 	bne	1418a4 <twoway_strstr+0x26c>
  1418c0:	e156000b 	cmp	r6, fp
  1418c4:	2affffe6 	bcs	141864 <twoway_strstr+0x22c>
  1418c8:	e7d8300a 	ldrb	r3, [r8, sl]
  1418cc:	e7d4100a 	ldrb	r1, [r4, sl]
  1418d0:	e088200a 	add	r2, r8, sl
  1418d4:	e1510003 	cmp	r1, r3
  1418d8:	e084300a 	add	r3, r4, sl
  1418dc:	1a000006 	bne	1418fc <twoway_strstr+0x2c4>
  1418e0:	e0431004 	sub	r1, r3, r4
  1418e4:	e1560001 	cmp	r6, r1
  1418e8:	2affffdd 	bcs	141864 <twoway_strstr+0x22c>
  1418ec:	e5720001 	ldrb	r0, [r2, #-1]!
  1418f0:	e5731001 	ldrb	r1, [r3, #-1]!
  1418f4:	e1500001 	cmp	r0, r1
  1418f8:	0afffff8 	beq	1418e0 <twoway_strstr+0x2a8>
  1418fc:	e59d3008 	ldr	r3, [sp, #8]
  141900:	e59d600c 	ldr	r6, [sp, #12]
  141904:	e0844003 	add	r4, r4, r3
  141908:	eaffffb2 	b	1417d8 <twoway_strstr+0x1a0>
  14190c:	e1a04001 	mov	r4, r1
  141910:	e1a06002 	mov	r6, r2
  141914:	eaffffaf 	b	1417d8 <twoway_strstr+0x1a0>
  141918:	e043300a 	sub	r3, r3, sl
  14191c:	e0844003 	add	r4, r4, r3
  141920:	e3a06000 	mov	r6, #0
  141924:	eaffffab 	b	1417d8 <twoway_strstr+0x1a0>
  141928:	e59d3004 	ldr	r3, [sp, #4]
  14192c:	e0899003 	add	r9, r9, r3
  141930:	eaffffab 	b	1417e4 <twoway_strstr+0x1ac>
  141934:	e1510000 	cmp	r1, r0
  141938:	12811001 	addne	r1, r1, #1
  14193c:	1affff64 	bne	1416d4 <twoway_strstr+0x9c>
  141940:	eaffff6d 	b	1416fc <twoway_strstr+0xc4>
  141944:	e1520006 	cmp	r2, r6
  141948:	12822001 	addne	r2, r2, #1
  14194c:	1affff74 	bne	141724 <twoway_strstr+0xec>
  141950:	eaffff7d 	b	14174c <twoway_strstr+0x114>
  141954:	e3a00001 	mov	r0, #1
  141958:	e1a0c003 	mov	ip, r3
  14195c:	e1a01000 	mov	r1, r0
  141960:	e0833000 	add	r3, r3, r0
  141964:	eaffff5a 	b	1416d4 <twoway_strstr+0x9c>
  141968:	e3a06001 	mov	r6, #1
  14196c:	e1a0a001 	mov	sl, r1
  141970:	e1a02006 	mov	r2, r6
  141974:	e0811006 	add	r1, r1, r6
  141978:	eaffff69 	b	141724 <twoway_strstr+0xec>
  14197c:	e59d3008 	ldr	r3, [sp, #8]
  141980:	e0453003 	sub	r3, r5, r3
  141984:	e58d300c 	str	r3, [sp, #12]
  141988:	eaffff8d 	b	1417c4 <twoway_strstr+0x18c>
  14198c:	e3e0c000 	mvn	ip, #0
  141990:	e3a00001 	mov	r0, #1
  141994:	e1a05003 	mov	r5, r3
  141998:	e1a0a00c 	mov	sl, ip
  14199c:	e58d0008 	str	r0, [sp, #8]
  1419a0:	eaffff70 	b	141768 <twoway_strstr+0x130>

001419a4 <strstr>:
  1419a4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  1419a8:	e1a04001 	mov	r4, r1
  1419ac:	e5d11000 	ldrb	r1, [r1]
  1419b0:	e1a03000 	mov	r3, r0
  1419b4:	e3510000 	cmp	r1, #0
  1419b8:	1a000001 	bne	1419c4 <strstr+0x20>
  1419bc:	e1a00003 	mov	r0, r3
  1419c0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  1419c4:	eb0009c5 	bl	1440e0 <strchr>
  1419c8:	e2503000 	subs	r3, r0, #0
  1419cc:	0afffffa 	beq	1419bc <strstr+0x18>
  1419d0:	e5d41001 	ldrb	r1, [r4, #1]
  1419d4:	e3510000 	cmp	r1, #0
  1419d8:	0afffff7 	beq	1419bc <strstr+0x18>
  1419dc:	e5d3c001 	ldrb	ip, [r3, #1]
  1419e0:	e35c0000 	cmp	ip, #0
  1419e4:	0a000051 	beq	141b30 <strstr+0x18c>
  1419e8:	e5d4e002 	ldrb	lr, [r4, #2]
  1419ec:	e35e0000 	cmp	lr, #0
  1419f0:	0a000029 	beq	141a9c <strstr+0xf8>
  1419f4:	e5d35002 	ldrb	r5, [r3, #2]
  1419f8:	e3550000 	cmp	r5, #0
  1419fc:	0a00004d 	beq	141b38 <strstr+0x194>
  141a00:	e5d47003 	ldrb	r7, [r4, #3]
  141a04:	e3570000 	cmp	r7, #0
  141a08:	0a000032 	beq	141ad8 <strstr+0x134>
  141a0c:	e5d36003 	ldrb	r6, [r3, #3]
  141a10:	e3560000 	cmp	r6, #0
  141a14:	0a000049 	beq	141b40 <strstr+0x19c>
  141a18:	e5d42004 	ldrb	r2, [r4, #4]
  141a1c:	e3520000 	cmp	r2, #0
  141a20:	0a000002 	beq	141a30 <strstr+0x8c>
  141a24:	e1a01004 	mov	r1, r4
  141a28:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
  141a2c:	eaffff01 	b	141638 <twoway_strstr>
  141a30:	e5d40000 	ldrb	r0, [r4]
  141a34:	e4d32003 	ldrb	r2, [r3], #3
  141a38:	e1800401 	orr	r0, r0, r1, lsl #8
  141a3c:	e182240c 	orr	r2, r2, ip, lsl #8
  141a40:	e180080e 	orr	r0, r0, lr, lsl #16
  141a44:	e1822805 	orr	r2, r2, r5, lsl #16
  141a48:	e180ec07 	orr	lr, r0, r7, lsl #24
  141a4c:	e1825c06 	orr	r5, r2, r6, lsl #24
  141a50:	e0252865 	eor	r2, r5, r5, ror #16
  141a54:	e02e086e 	eor	r0, lr, lr, ror #16
  141a58:	e1a02422 	lsr	r2, r2, #8
  141a5c:	e1a00420 	lsr	r0, r0, #8
  141a60:	e3c22cff 	bic	r2, r2, #65280	; 0xff00
  141a64:	e3c00cff 	bic	r0, r0, #65280	; 0xff00
  141a68:	e0222465 	eor	r2, r2, r5, ror #8
  141a6c:	e020046e 	eor	r0, r0, lr, ror #8
  141a70:	e1520000 	cmp	r2, r0
  141a74:	1a000002 	bne	141a84 <strstr+0xe0>
  141a78:	ea000028 	b	141b20 <strstr+0x17c>
  141a7c:	e1500002 	cmp	r0, r2
  141a80:	0a000026 	beq	141b20 <strstr+0x17c>
  141a84:	e5f31001 	ldrb	r1, [r3, #1]!
  141a88:	e3510000 	cmp	r1, #0
  141a8c:	e1812402 	orr	r2, r1, r2, lsl #8
  141a90:	1afffff9 	bne	141a7c <strstr+0xd8>
  141a94:	e1a03001 	mov	r3, r1
  141a98:	eaffffc7 	b	1419bc <strstr+0x18>
  141a9c:	e5d40000 	ldrb	r0, [r4]
  141aa0:	e4d32001 	ldrb	r2, [r3], #1
  141aa4:	e1811400 	orr	r1, r1, r0, lsl #8
  141aa8:	e18c2402 	orr	r2, ip, r2, lsl #8
  141aac:	ea000005 	b	141ac8 <strstr+0x124>
  141ab0:	e5f30001 	ldrb	r0, [r3, #1]!
  141ab4:	e1802402 	orr	r2, r0, r2, lsl #8
  141ab8:	e1a02802 	lsl	r2, r2, #16
  141abc:	e3500000 	cmp	r0, #0
  141ac0:	e1a02822 	lsr	r2, r2, #16
  141ac4:	0a000017 	beq	141b28 <strstr+0x184>
  141ac8:	e1510002 	cmp	r1, r2
  141acc:	1afffff7 	bne	141ab0 <strstr+0x10c>
  141ad0:	e2433001 	sub	r3, r3, #1
  141ad4:	eaffffb8 	b	1419bc <strstr+0x18>
  141ad8:	e5d46000 	ldrb	r6, [r4]
  141adc:	e4d34002 	ldrb	r4, [r3], #2
  141ae0:	e1a00801 	lsl	r0, r1, #16
  141ae4:	e1a0280c 	lsl	r2, ip, #16
  141ae8:	e1800c06 	orr	r0, r0, r6, lsl #24
  141aec:	e1822c04 	orr	r2, r2, r4, lsl #24
  141af0:	e180040e 	orr	r0, r0, lr, lsl #8
  141af4:	e1822405 	orr	r2, r2, r5, lsl #8
  141af8:	ea000004 	b	141b10 <strstr+0x16c>
  141afc:	e5f31001 	ldrb	r1, [r3, #1]!
  141b00:	e1812002 	orr	r2, r1, r2
  141b04:	e3510000 	cmp	r1, #0
  141b08:	e1a02402 	lsl	r2, r2, #8
  141b0c:	0affffe0 	beq	141a94 <strstr+0xf0>
  141b10:	e1500002 	cmp	r0, r2
  141b14:	1afffff8 	bne	141afc <strstr+0x158>
  141b18:	e2433002 	sub	r3, r3, #2
  141b1c:	eaffffa6 	b	1419bc <strstr+0x18>
  141b20:	e2433003 	sub	r3, r3, #3
  141b24:	eaffffa4 	b	1419bc <strstr+0x18>
  141b28:	e1a03000 	mov	r3, r0
  141b2c:	eaffffa2 	b	1419bc <strstr+0x18>
  141b30:	e1a0300c 	mov	r3, ip
  141b34:	eaffffa0 	b	1419bc <strstr+0x18>
  141b38:	e1a03005 	mov	r3, r5
  141b3c:	eaffff9e 	b	1419bc <strstr+0x18>
  141b40:	e1a03006 	mov	r3, r6
  141b44:	eaffff9c 	b	1419bc <strstr+0x18>

00141b48 <__lock>:
  141b48:	e59f3150 	ldr	r3, [pc, #336]	; 141ca0 <__lock+0x158>
  141b4c:	e593300c 	ldr	r3, [r3, #12]
  141b50:	e3530000 	cmp	r3, #0
  141b54:	012fff1e 	bxeq	lr
  141b58:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  141b5c:	e1a04000 	mov	r4, r0
  141b60:	e59f613c 	ldr	r6, [pc, #316]	; 141ca4 <__lock+0x15c>
  141b64:	e3a00000 	mov	r0, #0
  141b68:	e3a01106 	mov	r1, #-2147483647	; 0x80000001
  141b6c:	e1a02004 	mov	r2, r4
  141b70:	e5963000 	ldr	r3, [r6]
  141b74:	e12fff33 	blx	r3
  141b78:	e3500000 	cmp	r0, #0
  141b7c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  141b80:	e5945000 	ldr	r5, [r4]
  141b84:	e3550000 	cmp	r5, #0
  141b88:	0afffff5 	beq	141b64 <__lock+0x1c>
  141b8c:	e3a0800a 	mov	r8, #10
  141b90:	e3550000 	cmp	r5, #0
  141b94:	b2455106 	sublt	r5, r5, #-2147483647	; 0x80000001
  141b98:	e2857106 	add	r7, r5, #-2147483647	; 0x80000001
  141b9c:	e1a00005 	mov	r0, r5
  141ba0:	e1a01007 	mov	r1, r7
  141ba4:	e1a02004 	mov	r2, r4
  141ba8:	e5963000 	ldr	r3, [r6]
  141bac:	e12fff33 	blx	r3
  141bb0:	e3500000 	cmp	r0, #0
  141bb4:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  141bb8:	e5943000 	ldr	r3, [r4]
  141bbc:	e1550003 	cmp	r5, r3
  141bc0:	0afffff5 	beq	141b9c <__lock+0x54>
  141bc4:	e2588001 	subs	r8, r8, #1
  141bc8:	e1a05003 	mov	r5, r3
  141bcc:	1affffef 	bne	141b90 <__lock+0x48>
  141bd0:	e5947000 	ldr	r7, [r4]
  141bd4:	e2875001 	add	r5, r7, #1
  141bd8:	ea000002 	b	141be8 <__lock+0xa0>
  141bdc:	e5943000 	ldr	r3, [r4]
  141be0:	e1570003 	cmp	r7, r3
  141be4:	1afffff9 	bne	141bd0 <__lock+0x88>
  141be8:	e1a00007 	mov	r0, r7
  141bec:	e1a01005 	mov	r1, r5
  141bf0:	e1a02004 	mov	r2, r4
  141bf4:	e5963000 	ldr	r3, [r6]
  141bf8:	e12fff33 	blx	r3
  141bfc:	e3500000 	cmp	r0, #0
  141c00:	1afffff5 	bne	141bdc <__lock+0x94>
  141c04:	e3550000 	cmp	r5, #0
  141c08:	ba00000d 	blt	141c44 <__lock+0xfc>
  141c0c:	e2857102 	add	r7, r5, #-2147483648	; 0x80000000
  141c10:	e1a00005 	mov	r0, r5
  141c14:	e1a01007 	mov	r1, r7
  141c18:	e1a02004 	mov	r2, r4
  141c1c:	e5963000 	ldr	r3, [r6]
  141c20:	e12fff33 	blx	r3
  141c24:	e3500000 	cmp	r0, #0
  141c28:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  141c2c:	e5943000 	ldr	r3, [r4]
  141c30:	e1550003 	cmp	r5, r3
  141c34:	0afffff5 	beq	141c10 <__lock+0xc8>
  141c38:	e1a05003 	mov	r5, r3
  141c3c:	e3550000 	cmp	r5, #0
  141c40:	aafffff1 	bge	141c0c <__lock+0xc4>
  141c44:	e3a000f0 	mov	r0, #240	; 0xf0
  141c48:	ebffe9d9 	bl	13c3b4 <get_rtt_syscall>
  141c4c:	e2507000 	subs	r7, r0, #0
  141c50:	0a000006 	beq	141c70 <__lock+0x128>
  141c54:	e3a03000 	mov	r3, #0
  141c58:	e1a02005 	mov	r2, r5
  141c5c:	e3a01080 	mov	r1, #128	; 0x80
  141c60:	e1a00004 	mov	r0, r4
  141c64:	e12fff37 	blx	r7
  141c68:	e3700026 	cmn	r0, #38	; 0x26
  141c6c:	0a000001 	beq	141c78 <__lock+0x130>
  141c70:	e2455106 	sub	r5, r5, #-2147483647	; 0x80000001
  141c74:	eaffffe4 	b	141c0c <__lock+0xc4>
  141c78:	e3a000f0 	mov	r0, #240	; 0xf0
  141c7c:	ebffe9cc 	bl	13c3b4 <get_rtt_syscall>
  141c80:	e2507000 	subs	r7, r0, #0
  141c84:	0afffff9 	beq	141c70 <__lock+0x128>
  141c88:	e3a03000 	mov	r3, #0
  141c8c:	e1a02005 	mov	r2, r5
  141c90:	e1a01003 	mov	r1, r3
  141c94:	e1a00004 	mov	r0, r4
  141c98:	e12fff37 	blx	r7
  141c9c:	eafffff3 	b	141c70 <__lock+0x128>
  141ca0:	0015d074 	.word	0x0015d074
  141ca4:	0014d3d8 	.word	0x0014d3d8

00141ca8 <__unlock>:
  141ca8:	e5903000 	ldr	r3, [r0]
  141cac:	e3530000 	cmp	r3, #0
  141cb0:	a12fff1e 	bxge	lr
  141cb4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  141cb8:	e1a05000 	mov	r5, r0
  141cbc:	e59f7084 	ldr	r7, [pc, #132]	; 141d48 <__unlock+0xa0>
  141cc0:	e5954000 	ldr	r4, [r5]
  141cc4:	e2446106 	sub	r6, r4, #-2147483647	; 0x80000001
  141cc8:	ea000002 	b	141cd8 <__unlock+0x30>
  141ccc:	e5953000 	ldr	r3, [r5]
  141cd0:	e1540003 	cmp	r4, r3
  141cd4:	1afffff9 	bne	141cc0 <__unlock+0x18>
  141cd8:	e1a00004 	mov	r0, r4
  141cdc:	e1a01006 	mov	r1, r6
  141ce0:	e1a02005 	mov	r2, r5
  141ce4:	e5973000 	ldr	r3, [r7]
  141ce8:	e12fff33 	blx	r3
  141cec:	e3500000 	cmp	r0, #0
  141cf0:	1afffff5 	bne	141ccc <__unlock+0x24>
  141cf4:	e3540106 	cmp	r4, #-2147483647	; 0x80000001
  141cf8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  141cfc:	e3a000f0 	mov	r0, #240	; 0xf0
  141d00:	ebffe9ab 	bl	13c3b4 <get_rtt_syscall>
  141d04:	e2503000 	subs	r3, r0, #0
  141d08:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  141d0c:	e3a02001 	mov	r2, #1
  141d10:	e3a01081 	mov	r1, #129	; 0x81
  141d14:	e1a00005 	mov	r0, r5
  141d18:	e12fff33 	blx	r3
  141d1c:	e3700026 	cmn	r0, #38	; 0x26
  141d20:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
  141d24:	e3a000f0 	mov	r0, #240	; 0xf0
  141d28:	ebffe9a1 	bl	13c3b4 <get_rtt_syscall>
  141d2c:	e2503000 	subs	r3, r0, #0
  141d30:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  141d34:	e3a02001 	mov	r2, #1
  141d38:	e1a00005 	mov	r0, r5
  141d3c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
  141d40:	e1a01002 	mov	r1, r2
  141d44:	e12fff13 	bx	r3
  141d48:	0014d3d8 	.word	0x0014d3d8

00141d4c <__syscall_cp_c>:
  141d4c:	eaffe9c2 	b	13c45c <__syscall>

00141d50 <__syscall_cp>:
  141d50:	eaffe9c1 	b	13c45c <__syscall>

00141d54 <__wait>:
  141d54:	e3530000 	cmp	r3, #0
  141d58:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  141d5c:	e3a03064 	mov	r3, #100	; 0x64
  141d60:	e1a04001 	mov	r4, r1
  141d64:	e1a07000 	mov	r7, r0
  141d68:	e1a08002 	mov	r8, r2
  141d6c:	13a09080 	movne	r9, #128	; 0x80
  141d70:	03a09000 	moveq	r9, #0
  141d74:	e59f1120 	ldr	r1, [pc, #288]	; 141e9c <__wait+0x148>
  141d78:	ea000006 	b	141d98 <__wait+0x44>
  141d7c:	e5972000 	ldr	r2, [r7]
  141d80:	e1520008 	cmp	r2, r8
  141d84:	18bd87f0 	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
  141d88:	e591c000 	ldr	ip, [r1]
  141d8c:	e12fff3c 	blx	ip
  141d90:	e2533001 	subs	r3, r3, #1
  141d94:	0a00003d 	beq	141e90 <__wait+0x13c>
  141d98:	e3540000 	cmp	r4, #0
  141d9c:	0afffff6 	beq	141d7c <__wait+0x28>
  141da0:	e5942000 	ldr	r2, [r4]
  141da4:	e3520000 	cmp	r2, #0
  141da8:	0afffff3 	beq	141d7c <__wait+0x28>
  141dac:	e59f60ec 	ldr	r6, [pc, #236]	; 141ea0 <__wait+0x14c>
  141db0:	e5945000 	ldr	r5, [r4]
  141db4:	e285a001 	add	sl, r5, #1
  141db8:	ea000002 	b	141dc8 <__wait+0x74>
  141dbc:	e5943000 	ldr	r3, [r4]
  141dc0:	e1550003 	cmp	r5, r3
  141dc4:	1afffff9 	bne	141db0 <__wait+0x5c>
  141dc8:	e1a00005 	mov	r0, r5
  141dcc:	e1a0100a 	mov	r1, sl
  141dd0:	e1a02004 	mov	r2, r4
  141dd4:	e5963000 	ldr	r3, [r6]
  141dd8:	e12fff33 	blx	r3
  141ddc:	e3500000 	cmp	r0, #0
  141de0:	1afffff5 	bne	141dbc <__wait+0x68>
  141de4:	e5973000 	ldr	r3, [r7]
  141de8:	e1530008 	cmp	r3, r8
  141dec:	1a000006 	bne	141e0c <__wait+0xb8>
  141df0:	e3a000f0 	mov	r0, #240	; 0xf0
  141df4:	ebffe96e 	bl	13c3b4 <get_rtt_syscall>
  141df8:	e2505000 	subs	r5, r0, #0
  141dfc:	1a000012 	bne	141e4c <__wait+0xf8>
  141e00:	e5973000 	ldr	r3, [r7]
  141e04:	e1530008 	cmp	r3, r8
  141e08:	0afffff8 	beq	141df0 <__wait+0x9c>
  141e0c:	e3540000 	cmp	r4, #0
  141e10:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
  141e14:	e59f6084 	ldr	r6, [pc, #132]	; 141ea0 <__wait+0x14c>
  141e18:	e5945000 	ldr	r5, [r4]
  141e1c:	e2457001 	sub	r7, r5, #1
  141e20:	e1a00005 	mov	r0, r5
  141e24:	e1a01007 	mov	r1, r7
  141e28:	e1a02004 	mov	r2, r4
  141e2c:	e5963000 	ldr	r3, [r6]
  141e30:	e12fff33 	blx	r3
  141e34:	e3500000 	cmp	r0, #0
  141e38:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
  141e3c:	e5943000 	ldr	r3, [r4]
  141e40:	e1550003 	cmp	r5, r3
  141e44:	0afffff5 	beq	141e20 <__wait+0xcc>
  141e48:	eafffff2 	b	141e18 <__wait+0xc4>
  141e4c:	e3a03000 	mov	r3, #0
  141e50:	e1a02008 	mov	r2, r8
  141e54:	e1a01009 	mov	r1, r9
  141e58:	e1a00007 	mov	r0, r7
  141e5c:	e12fff35 	blx	r5
  141e60:	e3700026 	cmn	r0, #38	; 0x26
  141e64:	1affffe5 	bne	141e00 <__wait+0xac>
  141e68:	e3a000f0 	mov	r0, #240	; 0xf0
  141e6c:	ebffe950 	bl	13c3b4 <get_rtt_syscall>
  141e70:	e2505000 	subs	r5, r0, #0
  141e74:	0affffe1 	beq	141e00 <__wait+0xac>
  141e78:	e3a03000 	mov	r3, #0
  141e7c:	e1a02008 	mov	r2, r8
  141e80:	e1a01003 	mov	r1, r3
  141e84:	e1a00007 	mov	r0, r7
  141e88:	e12fff35 	blx	r5
  141e8c:	eaffffdb 	b	141e00 <__wait+0xac>
  141e90:	e3540000 	cmp	r4, #0
  141e94:	0affffd9 	beq	141e00 <__wait+0xac>
  141e98:	eaffffc3 	b	141dac <__wait+0x58>
  141e9c:	0014d3d4 	.word	0x0014d3d4
  141ea0:	0014d3d8 	.word	0x0014d3d8

00141ea4 <__a_barrier_dummy>:
  141ea4:	e12fff1e 	bx	lr

00141ea8 <__a_barrier_oldkuser>:
  141ea8:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
  141eac:	e1a01000 	mov	r1, r0
  141eb0:	e1a0200d 	mov	r2, sp
  141eb4:	e59fc080 	ldr	ip, [pc, #128]	; 141f3c <__a_gettp_cp15+0x8>
  141eb8:	e1a0e00f 	mov	lr, pc
  141ebc:	e1a0f00c 	mov	pc, ip
  141ec0:	e8bd500f 	pop	{r0, r1, r2, r3, ip, lr}
  141ec4:	e12fff1e 	bx	lr

00141ec8 <__a_barrier_v6>:
  141ec8:	ee070fba 	mcr	15, 0, r0, cr7, cr10, {5}
  141ecc:	e12fff1e 	bx	lr

00141ed0 <__a_barrier_v7>:
  141ed0:	f57ff05b 	dmb	ish
  141ed4:	e12fff1e 	bx	lr

00141ed8 <__a_cas_dummy>:
  141ed8:	e1a03000 	mov	r3, r0
  141edc:	e5920000 	ldr	r0, [r2]
  141ee0:	e0530000 	subs	r0, r3, r0
  141ee4:	05821000 	streq	r1, [r2]
  141ee8:	e12fff1e 	bx	lr

00141eec <__a_cas_v6>:
  141eec:	e1a03000 	mov	r3, r0
  141ef0:	ee070fba 	mcr	15, 0, r0, cr7, cr10, {5}
  141ef4:	e1920f9f 	ldrex	r0, [r2]
  141ef8:	e0530000 	subs	r0, r3, r0
  141efc:	01820f91 	strexeq	r0, r1, [r2]
  141f00:	03300001 	teqeq	r0, #1
  141f04:	0afffffa 	beq	141ef4 <__a_cas_v6+0x8>
  141f08:	ee070fba 	mcr	15, 0, r0, cr7, cr10, {5}
  141f0c:	e12fff1e 	bx	lr

00141f10 <__a_cas_v7>:
  141f10:	e1a03000 	mov	r3, r0
  141f14:	f57ff05b 	dmb	ish
  141f18:	e1920f9f 	ldrex	r0, [r2]
  141f1c:	e0530000 	subs	r0, r3, r0
  141f20:	01820f91 	strexeq	r0, r1, [r2]
  141f24:	03300001 	teqeq	r0, #1
  141f28:	0afffffa 	beq	141f18 <__a_cas_v7+0x8>
  141f2c:	f57ff05b 	dmb	ish
  141f30:	e12fff1e 	bx	lr

00141f34 <__a_gettp_cp15>:
  141f34:	ee1d0f70 	mrc	15, 0, r0, cr13, cr0, {3}
  141f38:	e12fff1e 	bx	lr
  141f3c:	ffff0fc0 	.word	0xffff0fc0

00141f40 <__wake.constprop.2>:
  141f40:	e92d4070 	push	{r4, r5, r6, lr}
  141f44:	e3510000 	cmp	r1, #0
  141f48:	e1a04000 	mov	r4, r0
  141f4c:	e3a000f0 	mov	r0, #240	; 0xf0
  141f50:	03a05001 	moveq	r5, #1
  141f54:	13a05081 	movne	r5, #129	; 0x81
  141f58:	ebffe915 	bl	13c3b4 <get_rtt_syscall>
  141f5c:	e2503000 	subs	r3, r0, #0
  141f60:	08bd8070 	popeq	{r4, r5, r6, pc}
  141f64:	e1a01005 	mov	r1, r5
  141f68:	e3a02001 	mov	r2, #1
  141f6c:	e1a00004 	mov	r0, r4
  141f70:	e12fff33 	blx	r3
  141f74:	e3700026 	cmn	r0, #38	; 0x26
  141f78:	18bd8070 	popne	{r4, r5, r6, pc}
  141f7c:	e3a000f0 	mov	r0, #240	; 0xf0
  141f80:	ebffe90b 	bl	13c3b4 <get_rtt_syscall>
  141f84:	e2503000 	subs	r3, r0, #0
  141f88:	08bd8070 	popeq	{r4, r5, r6, pc}
  141f8c:	e3a02001 	mov	r2, #1
  141f90:	e1a00004 	mov	r0, r4
  141f94:	e8bd4070 	pop	{r4, r5, r6, lr}
  141f98:	e1a01002 	mov	r1, r2
  141f9c:	e12fff13 	bx	r3

00141fa0 <__acquire_ptc>:
  141fa0:	e12fff1e 	bx	lr

00141fa4 <__tl_lock>:
  141fa4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  141fa8:	e59f3070 	ldr	r3, [pc, #112]	; 142020 <__tl_lock+0x7c>
  141fac:	e59f4070 	ldr	r4, [pc, #112]	; 142024 <__tl_lock+0x80>
  141fb0:	e5930000 	ldr	r0, [r3]
  141fb4:	e5943000 	ldr	r3, [r4]
  141fb8:	e12fff30 	blx	r0
  141fbc:	e510505c 	ldr	r5, [r0, #-92]	; 0xffffffa4
  141fc0:	e1550003 	cmp	r5, r3
  141fc4:	0a000010 	beq	14200c <__tl_lock+0x68>
  141fc8:	e59f6058 	ldr	r6, [pc, #88]	; 142028 <__tl_lock+0x84>
  141fcc:	e59f7058 	ldr	r7, [pc, #88]	; 14202c <__tl_lock+0x88>
  141fd0:	e3a00000 	mov	r0, #0
  141fd4:	e1a01005 	mov	r1, r5
  141fd8:	e1a02004 	mov	r2, r4
  141fdc:	e5963000 	ldr	r3, [r6]
  141fe0:	e12fff33 	blx	r3
  141fe4:	e3500000 	cmp	r0, #0
  141fe8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  141fec:	e5942000 	ldr	r2, [r4]
  141ff0:	e3520000 	cmp	r2, #0
  141ff4:	0afffff5 	beq	141fd0 <__tl_lock+0x2c>
  141ff8:	e3a03000 	mov	r3, #0
  141ffc:	e1a01007 	mov	r1, r7
  142000:	e1a00004 	mov	r0, r4
  142004:	ebffff52 	bl	141d54 <__wait>
  142008:	eafffff0 	b	141fd0 <__tl_lock+0x2c>
  14200c:	e59f201c 	ldr	r2, [pc, #28]	; 142030 <__tl_lock+0x8c>
  142010:	e5923000 	ldr	r3, [r2]
  142014:	e2833001 	add	r3, r3, #1
  142018:	e5823000 	str	r3, [r2]
  14201c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  142020:	0014d3dc 	.word	0x0014d3dc
  142024:	0015d0bc 	.word	0x0015d0bc
  142028:	0014d3d8 	.word	0x0014d3d8
  14202c:	0014f484 	.word	0x0014f484
  142030:	0014f480 	.word	0x0014f480

00142034 <__tl_unlock>:
  142034:	e59f2090 	ldr	r2, [pc, #144]	; 1420cc <__tl_unlock+0x98>
  142038:	e5923000 	ldr	r3, [r2]
  14203c:	e3530000 	cmp	r3, #0
  142040:	1a00001e 	bne	1420c0 <__tl_unlock+0x8c>
  142044:	e59f2084 	ldr	r2, [pc, #132]	; 1420d0 <__tl_unlock+0x9c>
  142048:	e92d4010 	push	{r4, lr}
  14204c:	e592c000 	ldr	ip, [r2]
  142050:	e12fff3c 	blx	ip
  142054:	e59f4078 	ldr	r4, [pc, #120]	; 1420d4 <__tl_unlock+0xa0>
  142058:	e592c000 	ldr	ip, [r2]
  14205c:	e5843000 	str	r3, [r4]
  142060:	e12fff3c 	blx	ip
  142064:	e59f306c 	ldr	r3, [pc, #108]	; 1420d8 <__tl_unlock+0xa4>
  142068:	e5933000 	ldr	r3, [r3]
  14206c:	e3530000 	cmp	r3, #0
  142070:	08bd8010 	popeq	{r4, pc}
  142074:	e3a000f0 	mov	r0, #240	; 0xf0
  142078:	ebffe8cd 	bl	13c3b4 <get_rtt_syscall>
  14207c:	e2503000 	subs	r3, r0, #0
  142080:	08bd8010 	popeq	{r4, pc}
  142084:	e3a02001 	mov	r2, #1
  142088:	e1a00004 	mov	r0, r4
  14208c:	e1a01002 	mov	r1, r2
  142090:	e12fff33 	blx	r3
  142094:	e3700026 	cmn	r0, #38	; 0x26
  142098:	18bd8010 	popne	{r4, pc}
  14209c:	e3a000f0 	mov	r0, #240	; 0xf0
  1420a0:	ebffe8c3 	bl	13c3b4 <get_rtt_syscall>
  1420a4:	e2503000 	subs	r3, r0, #0
  1420a8:	08bd8010 	popeq	{r4, pc}
  1420ac:	e3a02001 	mov	r2, #1
  1420b0:	e1a00004 	mov	r0, r4
  1420b4:	e8bd4010 	pop	{r4, lr}
  1420b8:	e1a01002 	mov	r1, r2
  1420bc:	e12fff13 	bx	r3
  1420c0:	e2433001 	sub	r3, r3, #1
  1420c4:	e5823000 	str	r3, [r2]
  1420c8:	e12fff1e 	bx	lr
  1420cc:	0014f480 	.word	0x0014f480
  1420d0:	0014d3d4 	.word	0x0014d3d4
  1420d4:	0015d0bc 	.word	0x0015d0bc
  1420d8:	0014f484 	.word	0x0014f484

001420dc <__tl_sync>:
  1420dc:	e59f3084 	ldr	r3, [pc, #132]	; 142168 <__tl_sync+0x8c>
  1420e0:	e92d4070 	push	{r4, r5, r6, lr}
  1420e4:	e593c000 	ldr	ip, [r3]
  1420e8:	e12fff3c 	blx	ip
  1420ec:	e59f4078 	ldr	r4, [pc, #120]	; 14216c <__tl_sync+0x90>
  1420f0:	e5942000 	ldr	r2, [r4]
  1420f4:	e3520000 	cmp	r2, #0
  1420f8:	08bd8070 	popeq	{r4, r5, r6, pc}
  1420fc:	e59f506c 	ldr	r5, [pc, #108]	; 142170 <__tl_sync+0x94>
  142100:	e3a03000 	mov	r3, #0
  142104:	e1a01005 	mov	r1, r5
  142108:	e1a00004 	mov	r0, r4
  14210c:	ebffff10 	bl	141d54 <__wait>
  142110:	e5953000 	ldr	r3, [r5]
  142114:	e3530000 	cmp	r3, #0
  142118:	08bd8070 	popeq	{r4, r5, r6, pc}
  14211c:	e3a000f0 	mov	r0, #240	; 0xf0
  142120:	ebffe8a3 	bl	13c3b4 <get_rtt_syscall>
  142124:	e2503000 	subs	r3, r0, #0
  142128:	08bd8070 	popeq	{r4, r5, r6, pc}
  14212c:	e3a02001 	mov	r2, #1
  142130:	e1a00004 	mov	r0, r4
  142134:	e1a01002 	mov	r1, r2
  142138:	e12fff33 	blx	r3
  14213c:	e3700026 	cmn	r0, #38	; 0x26
  142140:	18bd8070 	popne	{r4, r5, r6, pc}
  142144:	e3a000f0 	mov	r0, #240	; 0xf0
  142148:	ebffe899 	bl	13c3b4 <get_rtt_syscall>
  14214c:	e2503000 	subs	r3, r0, #0
  142150:	08bd8070 	popeq	{r4, r5, r6, pc}
  142154:	e3a02001 	mov	r2, #1
  142158:	e1a00004 	mov	r0, r4
  14215c:	e8bd4070 	pop	{r4, r5, r6, lr}
  142160:	e1a01002 	mov	r1, r2
  142164:	e12fff13 	bx	r3
  142168:	0014d3d4 	.word	0x0014d3d4
  14216c:	0015d0bc 	.word	0x0015d0bc
  142170:	0014f484 	.word	0x0014f484

00142174 <__pthread_exit>:
  142174:	e3a02000 	mov	r2, #0
  142178:	e1a0c000 	mov	ip, r0
  14217c:	e3a01001 	mov	r1, #1
  142180:	e59f3224 	ldr	r3, [pc, #548]	; 1423ac <__pthread_exit+0x238>
  142184:	e92d4880 	push	{r7, fp, lr}
  142188:	e5930000 	ldr	r0, [r3]
  14218c:	e12fff30 	blx	r0
  142190:	e2404078 	sub	r4, r0, #120	; 0x78
  142194:	e5943048 	ldr	r3, [r4, #72]	; 0x48
  142198:	e5c4102c 	strb	r1, [r4, #44]	; 0x2c
  14219c:	e1530002 	cmp	r3, r2
  1421a0:	e24dd08c 	sub	sp, sp, #140	; 0x8c
  1421a4:	e584c044 	str	ip, [r4, #68]	; 0x44
  1421a8:	e5c4202d 	strb	r2, [r4, #45]	; 0x2d
  1421ac:	0a000006 	beq	1421cc <__pthread_exit+0x58>
  1421b0:	e9930005 	ldmib	r3, {r0, r2}
  1421b4:	e5933000 	ldr	r3, [r3]
  1421b8:	e5842048 	str	r2, [r4, #72]	; 0x48
  1421bc:	e12fff33 	blx	r3
  1421c0:	e5943048 	ldr	r3, [r4, #72]	; 0x48
  1421c4:	e3530000 	cmp	r3, #0
  1421c8:	1afffff8 	bne	1421b0 <__pthread_exit+0x3c>
  1421cc:	e2849064 	add	r9, r4, #100	; 0x64
  1421d0:	ebffff72 	bl	141fa0 <__acquire_ptc>
  1421d4:	e1a00009 	mov	r0, r9
  1421d8:	ebfffe5a 	bl	141b48 <__lock>
  1421dc:	e28d0008 	add	r0, sp, #8
  1421e0:	eb0004a6 	bl	143480 <__block_app_sigs>
  1421e4:	ebffff6e 	bl	141fa4 <__tl_lock>
  1421e8:	e594300c 	ldr	r3, [r4, #12]
  1421ec:	e1530004 	cmp	r3, r4
  1421f0:	0a000041 	beq	1422fc <__pthread_exit+0x188>
  1421f4:	e59f11b4 	ldr	r1, [pc, #436]	; 1423b0 <__pthread_exit+0x23c>
  1421f8:	e5940008 	ldr	r0, [r4, #8]
  1421fc:	e591200c 	ldr	r2, [r1, #12]
  142200:	e59f81ac 	ldr	r8, [pc, #428]	; 1423b4 <__pthread_exit+0x240>
  142204:	e2422001 	sub	r2, r2, #1
  142208:	e581200c 	str	r2, [r1, #12]
  14220c:	e5830008 	str	r0, [r3, #8]
  142210:	e5942008 	ldr	r2, [r4, #8]
  142214:	e582300c 	str	r3, [r2, #12]
  142218:	e584400c 	str	r4, [r4, #12]
  14221c:	e5844008 	str	r4, [r4, #8]
  142220:	eb00028a 	bl	142c50 <__vm_lock>
  142224:	e2843050 	add	r3, r4, #80	; 0x50
  142228:	e58d3004 	str	r3, [sp, #4]
  14222c:	e5946050 	ldr	r6, [r4, #80]	; 0x50
  142230:	e3560000 	cmp	r6, #0
  142234:	0a000020 	beq	1422bc <__pthread_exit+0x148>
  142238:	e59d3004 	ldr	r3, [sp, #4]
  14223c:	e1560003 	cmp	r6, r3
  142240:	0a00001d 	beq	1422bc <__pthread_exit+0x148>
  142244:	e1a07006 	mov	r7, r6
  142248:	e516b008 	ldr	fp, [r6, #-8]
  14224c:	e516a010 	ldr	sl, [r6, #-16]
  142250:	e5846058 	str	r6, [r4, #88]	; 0x58
  142254:	e417300c 	ldr	r3, [r7], #-12
  142258:	e5843050 	str	r3, [r4, #80]	; 0x50
  14225c:	e516500c 	ldr	r5, [r6, #-12]
  142260:	ea000002 	b	142270 <__pthread_exit+0xfc>
  142264:	e516300c 	ldr	r3, [r6, #-12]
  142268:	e1550003 	cmp	r5, r3
  14226c:	1afffffa 	bne	14225c <__pthread_exit+0xe8>
  142270:	e1a00005 	mov	r0, r5
  142274:	e3a01101 	mov	r1, #1073741824	; 0x40000000
  142278:	e1a02007 	mov	r2, r7
  14227c:	e5983000 	ldr	r3, [r8]
  142280:	e12fff33 	blx	r3
  142284:	e3500000 	cmp	r0, #0
  142288:	1afffff5 	bne	142264 <__pthread_exit+0xf0>
  14228c:	e29bb000 	adds	fp, fp, #0
  142290:	13a0b001 	movne	fp, #1
  142294:	e19b3fa5 	orrs	r3, fp, r5, lsr #31
  142298:	e5840058 	str	r0, [r4, #88]	; 0x58
  14229c:	0affffe2 	beq	14222c <__pthread_exit+0xb8>
  1422a0:	e1e0100a 	mvn	r1, sl
  1422a4:	e1a00007 	mov	r0, r7
  1422a8:	e2011080 	and	r1, r1, #128	; 0x80
  1422ac:	ebffff23 	bl	141f40 <__wake.constprop.2>
  1422b0:	e5946050 	ldr	r6, [r4, #80]	; 0x50
  1422b4:	e3560000 	cmp	r6, #0
  1422b8:	1affffde 	bne	142238 <__pthread_exit+0xc4>
  1422bc:	eb000276 	bl	142c9c <__vm_unlock>
  1422c0:	e2845024 	add	r5, r4, #36	; 0x24
  1422c4:	ebffff35 	bl	141fa0 <__acquire_ptc>
  1422c8:	ebffff34 	bl	141fa0 <__acquire_ptc>
  1422cc:	ea000002 	b	1422dc <__pthread_exit+0x168>
  1422d0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
  1422d4:	e3530001 	cmp	r3, #1
  1422d8:	1a00000e 	bne	142318 <__pthread_exit+0x1a4>
  1422dc:	e3a00001 	mov	r0, #1
  1422e0:	e3a01000 	mov	r1, #0
  1422e4:	e1a02005 	mov	r2, r5
  1422e8:	e5983000 	ldr	r3, [r8]
  1422ec:	e12fff33 	blx	r3
  1422f0:	e1500001 	cmp	r0, r1
  1422f4:	1afffff5 	bne	1422d0 <__pthread_exit+0x15c>
  1422f8:	ea000008 	b	142320 <__pthread_exit+0x1ac>
  1422fc:	ebffff4c 	bl	142034 <__tl_unlock>
  142300:	e28d0008 	add	r0, sp, #8
  142304:	eb00046b 	bl	1434b8 <__restore_sigs>
  142308:	e1a00009 	mov	r0, r9
  14230c:	ebfffe65 	bl	141ca8 <__unlock>
  142310:	e3a00000 	mov	r0, #0
  142314:	ebffdb38 	bl	138ffc <exit>
  142318:	e3530002 	cmp	r3, #2
  14231c:	0a00000d 	beq	142358 <__pthread_exit+0x1e4>
  142320:	e1a00005 	mov	r0, r5
  142324:	e3a01001 	mov	r1, #1
  142328:	ebffff04 	bl	141f40 <__wake.constprop.2>
  14232c:	e3a03000 	mov	r3, #0
  142330:	e1a00009 	mov	r0, r9
  142334:	e584301c 	str	r3, [r4, #28]
  142338:	ebfffe5a 	bl	141ca8 <__unlock>
  14233c:	e3a00001 	mov	r0, #1
  142340:	ebffe81b 	bl	13c3b4 <get_rtt_syscall>
  142344:	e2503000 	subs	r3, r0, #0
  142348:	0afffffb 	beq	14233c <__pthread_exit+0x1c8>
  14234c:	e3a00000 	mov	r0, #0
  142350:	e12fff33 	blx	r3
  142354:	eafffff8 	b	14233c <__pthread_exit+0x1c8>
  142358:	e5943030 	ldr	r3, [r4, #48]	; 0x30
  14235c:	e1530001 	cmp	r3, r1
  142360:	0affffee 	beq	142320 <__pthread_exit+0x1ac>
  142364:	e28d0008 	add	r0, sp, #8
  142368:	eb000436 	bl	143448 <__block_all_sigs>
  14236c:	e5943054 	ldr	r3, [r4, #84]	; 0x54
  142370:	e3530000 	cmp	r3, #0
  142374:	1a000004 	bne	14238c <__pthread_exit+0x218>
  142378:	eb000225 	bl	142c14 <__vm_wait>
  14237c:	e5941034 	ldr	r1, [r4, #52]	; 0x34
  142380:	e5940030 	ldr	r0, [r4, #48]	; 0x30
  142384:	eb0007ec 	bl	14433c <__unmapself>
  142388:	eaffffe4 	b	142320 <__pthread_exit+0x1ac>
  14238c:	e59f0024 	ldr	r0, [pc, #36]	; 1423b8 <__pthread_exit+0x244>
  142390:	ebffe807 	bl	13c3b4 <get_rtt_syscall>
  142394:	e2503000 	subs	r3, r0, #0
  142398:	0afffff6 	beq	142378 <__pthread_exit+0x204>
  14239c:	e3a0100c 	mov	r1, #12
  1423a0:	e3a00000 	mov	r0, #0
  1423a4:	e12fff33 	blx	r3
  1423a8:	eafffff2 	b	142378 <__pthread_exit+0x204>
  1423ac:	0014d3dc 	.word	0x0014d3dc
  1423b0:	0015d074 	.word	0x0015d074
  1423b4:	0014d3d8 	.word	0x0014d3d8
  1423b8:	00000152 	.word	0x00000152

001423bc <start>:
  1423bc:	e5902008 	ldr	r2, [r0, #8]
  1423c0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  1423c4:	e3520000 	cmp	r2, #0
  1423c8:	e1a08000 	mov	r8, r0
  1423cc:	0a000022 	beq	14245c <start+0xa0>
  1423d0:	e59f30d8 	ldr	r3, [pc, #216]	; 1424b0 <start+0xf4>
  1423d4:	e5926014 	ldr	r6, [r2, #20]
  1423d8:	e5930000 	ldr	r0, [r3]
  1423dc:	e12fff30 	blx	r0
  1423e0:	e2409078 	sub	r9, r0, #120	; 0x78
  1423e4:	e3a0009c 	mov	r0, #156	; 0x9c
  1423e8:	e599501c 	ldr	r5, [r9, #28]
  1423ec:	e2824018 	add	r4, r2, #24
  1423f0:	ebffe7ef 	bl	13c3b4 <get_rtt_syscall>
  1423f4:	e250a000 	subs	sl, r0, #0
  1423f8:	0a000004 	beq	142410 <start+0x54>
  1423fc:	e1a02004 	mov	r2, r4
  142400:	e1a01006 	mov	r1, r6
  142404:	e1a00005 	mov	r0, r5
  142408:	e12fff3a 	blx	sl
  14240c:	e1a0a000 	mov	sl, r0
  142410:	e598500c 	ldr	r5, [r8, #12]
  142414:	e59f7098 	ldr	r7, [pc, #152]	; 1424b4 <start+0xf8>
  142418:	e26a6000 	rsb	r6, sl, #0
  14241c:	e5954000 	ldr	r4, [r5]
  142420:	ea000002 	b	142430 <start+0x74>
  142424:	e5953000 	ldr	r3, [r5]
  142428:	e1540003 	cmp	r4, r3
  14242c:	1afffffa 	bne	14241c <start+0x60>
  142430:	e1a00004 	mov	r0, r4
  142434:	e1a01006 	mov	r1, r6
  142438:	e1a02005 	mov	r2, r5
  14243c:	e5973000 	ldr	r3, [r7]
  142440:	e12fff33 	blx	r3
  142444:	e3500000 	cmp	r0, #0
  142448:	1afffff5 	bne	142424 <start+0x68>
  14244c:	e3740002 	cmn	r4, #2
  142450:	0a000012 	beq	1424a0 <start+0xe4>
  142454:	e35a0000 	cmp	sl, #0
  142458:	1a00000c 	bne	142490 <start+0xd4>
  14245c:	e3a000af 	mov	r0, #175	; 0xaf
  142460:	ebffe7d3 	bl	13c3b4 <get_rtt_syscall>
  142464:	e2504000 	subs	r4, r0, #0
  142468:	e2881010 	add	r1, r8, #16
  14246c:	0a000003 	beq	142480 <start+0xc4>
  142470:	e3a03008 	mov	r3, #8
  142474:	e3a02000 	mov	r2, #0
  142478:	e3a00002 	mov	r0, #2
  14247c:	e12fff34 	blx	r4
  142480:	e5983000 	ldr	r3, [r8]
  142484:	e5980004 	ldr	r0, [r8, #4]
  142488:	e12fff33 	blx	r3
  14248c:	ebffff38 	bl	142174 <__pthread_exit>
  142490:	e3a03002 	mov	r3, #2
  142494:	e3a00000 	mov	r0, #0
  142498:	e5893024 	str	r3, [r9, #36]	; 0x24
  14249c:	ebffff34 	bl	142174 <__pthread_exit>
  1424a0:	e3a01001 	mov	r1, #1
  1424a4:	e598000c 	ldr	r0, [r8, #12]
  1424a8:	ebfffea4 	bl	141f40 <__wake.constprop.2>
  1424ac:	eaffffe8 	b	142454 <start+0x98>
  1424b0:	0014d3dc 	.word	0x0014d3dc
  1424b4:	0014d3d8 	.word	0x0014d3d8

001424b8 <start_c11>:
  1424b8:	e5903000 	ldr	r3, [r0]
  1424bc:	e92d4010 	push	{r4, lr}
  1424c0:	e5900004 	ldr	r0, [r0, #4]
  1424c4:	e12fff33 	blx	r3
  1424c8:	ebffff29 	bl	142174 <__pthread_exit>

001424cc <__do_cleanup_push>:
  1424cc:	e1a03000 	mov	r3, r0
  1424d0:	e59f2018 	ldr	r2, [pc, #24]	; 1424f0 <__do_cleanup_push+0x24>
  1424d4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  1424d8:	e5920000 	ldr	r0, [r2]
  1424dc:	e12fff30 	blx	r0
  1424e0:	e5102030 	ldr	r2, [r0, #-48]	; 0xffffffd0
  1424e4:	e5832008 	str	r2, [r3, #8]
  1424e8:	e5003030 	str	r3, [r0, #-48]	; 0xffffffd0
  1424ec:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
  1424f0:	0014d3dc 	.word	0x0014d3dc

001424f4 <__do_cleanup_pop>:
  1424f4:	e5903008 	ldr	r3, [r0, #8]
  1424f8:	e59f2010 	ldr	r2, [pc, #16]	; 142510 <__do_cleanup_pop+0x1c>
  1424fc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  142500:	e5920000 	ldr	r0, [r2]
  142504:	e12fff30 	blx	r0
  142508:	e5003030 	str	r3, [r0, #-48]	; 0xffffffd0
  14250c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
  142510:	0014d3dc 	.word	0x0014d3dc

00142514 <__pthread_create>:
  142514:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  142518:	e24dd0dc 	sub	sp, sp, #220	; 0xdc
  14251c:	e58d001c 	str	r0, [sp, #28]
  142520:	e58d2014 	str	r2, [sp, #20]
  142524:	e1a09001 	mov	r9, r1
  142528:	e28d0034 	add	r0, sp, #52	; 0x34
  14252c:	e3a02024 	mov	r2, #36	; 0x24
  142530:	e3a01000 	mov	r1, #0
  142534:	e58d3018 	str	r3, [sp, #24]
  142538:	ebfffb4d 	bl	141274 <memset>
  14253c:	e3e03000 	mvn	r3, #0
  142540:	e59f656c 	ldr	r6, [pc, #1388]	; 142ab4 <__pthread_create+0x5a0>
  142544:	e58d3028 	str	r3, [sp, #40]	; 0x28
  142548:	e5963000 	ldr	r3, [r6]
  14254c:	e3530000 	cmp	r3, #0
  142550:	03a00026 	moveq	r0, #38	; 0x26
  142554:	0a0000a3 	beq	1427e8 <__pthread_create+0x2d4>
  142558:	e59f3558 	ldr	r3, [pc, #1368]	; 142ab8 <__pthread_create+0x5a4>
  14255c:	e5964004 	ldr	r4, [r6, #4]
  142560:	e5930000 	ldr	r0, [r3]
  142564:	e12fff30 	blx	r0
  142568:	e3540000 	cmp	r4, #0
  14256c:	e240a078 	sub	sl, r0, #120	; 0x78
  142570:	0a0000da 	beq	1428e0 <__pthread_create+0x3cc>
  142574:	e2493001 	sub	r3, r9, #1
  142578:	e3730003 	cmn	r3, #3
  14257c:	9a00009b 	bls	1427f0 <__pthread_create+0x2dc>
  142580:	ebfffe86 	bl	141fa0 <__acquire_ptc>
  142584:	e59f2530 	ldr	r2, [pc, #1328]	; 142abc <__pthread_create+0x5a8>
  142588:	e59f3530 	ldr	r3, [pc, #1328]	; 142ac0 <__pthread_create+0x5ac>
  14258c:	e5927000 	ldr	r7, [r2]
  142590:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
  142594:	e5933000 	ldr	r3, [r3]
  142598:	e3520000 	cmp	r2, #0
  14259c:	e58d7034 	str	r7, [sp, #52]	; 0x34
  1425a0:	e58d3038 	str	r3, [sp, #56]	; 0x38
  1425a4:	e5960018 	ldr	r0, [r6, #24]
  1425a8:	0a00009e 	beq	142828 <__pthread_create+0x314>
  1425ac:	e59f4510 	ldr	r4, [pc, #1296]	; 142ac4 <__pthread_create+0x5b0>
  1425b0:	e1a031a7 	lsr	r3, r7, #3
  1425b4:	e5941000 	ldr	r1, [r4]
  1425b8:	e3c2500f 	bic	r5, r2, #15
  1425bc:	e0811000 	add	r1, r1, r0
  1425c0:	e3510b02 	cmp	r1, #2048	; 0x800
  1425c4:	23a0c000 	movcs	ip, #0
  1425c8:	33a0c001 	movcc	ip, #1
  1425cc:	e1530001 	cmp	r3, r1
  1425d0:	93a0c000 	movls	ip, #0
  1425d4:	e0423007 	sub	r3, r2, r7
  1425d8:	e35c0000 	cmp	ip, #0
  1425dc:	e58d3020 	str	r3, [sp, #32]
  1425e0:	1a000111 	bne	142a2c <__pthread_create+0x518>
  1425e4:	e2817eff 	add	r7, r1, #4080	; 0xff0
  1425e8:	e287700f 	add	r7, r7, #15
  1425ec:	e3c77eff 	bic	r7, r7, #4080	; 0xff0
  1425f0:	e3c7700f 	bic	r7, r7, #15
  1425f4:	e3a00000 	mov	r0, #0
  1425f8:	e3a01000 	mov	r1, #0
  1425fc:	e3e03000 	mvn	r3, #0
  142600:	e58d0008 	str	r0, [sp, #8]
  142604:	e58d100c 	str	r1, [sp, #12]
  142608:	e58d3000 	str	r3, [sp]
  14260c:	e3a02003 	mov	r2, #3
  142610:	e3a03022 	mov	r3, #34	; 0x22
  142614:	e1a01007 	mov	r1, r7
  142618:	ebffeda8 	bl	13dcc0 <__mmap>
  14261c:	e3700001 	cmn	r0, #1
  142620:	e1a0b000 	mov	fp, r0
  142624:	0a0000ed 	beq	1429e0 <__pthread_create+0x4cc>
  142628:	e5943000 	ldr	r3, [r4]
  14262c:	e5960018 	ldr	r0, [r6, #24]
  142630:	e0473003 	sub	r3, r7, r3
  142634:	e08b3003 	add	r3, fp, r3
  142638:	e3550000 	cmp	r5, #0
  14263c:	e58d3024 	str	r3, [sp, #36]	; 0x24
  142640:	e2600000 	rsb	r0, r0, #0
  142644:	0a000108 	beq	142a6c <__pthread_create+0x558>
  142648:	e3a08000 	mov	r8, #0
  14264c:	e0830000 	add	r0, r3, r0
  142650:	eb000202 	bl	142e60 <__copy_tls>
  142654:	e1a04000 	mov	r4, r0
  142658:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
  14265c:	e5805038 	str	r5, [r0, #56]	; 0x38
  142660:	e3530000 	cmp	r3, #0
  142664:	e59f345c 	ldr	r3, [pc, #1116]	; 142ac8 <__pthread_create+0x5b4>
  142668:	e5808040 	str	r8, [r0, #64]	; 0x40
  14266c:	e580b030 	str	fp, [r0, #48]	; 0x30
  142670:	e5807034 	str	r7, [r0, #52]	; 0x34
  142674:	e5840000 	str	r0, [r4]
  142678:	e5803060 	str	r3, [r0, #96]	; 0x60
  14267c:	13a03002 	movne	r3, #2
  142680:	03a03001 	moveq	r3, #1
  142684:	e59d2020 	ldr	r2, [sp, #32]
  142688:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
  14268c:	e0452002 	sub	r2, r5, r2
  142690:	e5803024 	str	r3, [r0, #36]	; 0x24
  142694:	e580203c 	str	r2, [r0, #60]	; 0x3c
  142698:	e59a2014 	ldr	r2, [sl, #20]
  14269c:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
  1426a0:	e5802014 	str	r2, [r0, #20]
  1426a4:	e2802050 	add	r2, r0, #80	; 0x50
  1426a8:	e5802050 	str	r2, [r0, #80]	; 0x50
  1426ac:	e59d2014 	ldr	r2, [sp, #20]
  1426b0:	e3c55003 	bic	r5, r5, #3
  1426b4:	e580104c 	str	r1, [r0, #76]	; 0x4c
  1426b8:	e5052018 	str	r2, [r5, #-24]	; 0xffffffe8
  1426bc:	e59d2018 	ldr	r2, [sp, #24]
  1426c0:	e3530000 	cmp	r3, #0
  1426c4:	128d3028 	addne	r3, sp, #40	; 0x28
  1426c8:	e5052014 	str	r2, [r5, #-20]	; 0xffffffec
  1426cc:	128d2034 	addne	r2, sp, #52	; 0x34
  1426d0:	15052010 	strne	r2, [r5, #-16]
  1426d4:	05053010 	streq	r3, [r5, #-16]
  1426d8:	e505300c 	str	r3, [r5, #-12]
  1426dc:	e28d0058 	add	r0, sp, #88	; 0x58
  1426e0:	eb000366 	bl	143480 <__block_app_sigs>
  1426e4:	e28d1058 	add	r1, sp, #88	; 0x58
  1426e8:	e3a02008 	mov	r2, #8
  1426ec:	e2450008 	sub	r0, r5, #8
  1426f0:	ebfff9a7 	bl	140d94 <memcpy>
  1426f4:	e5153004 	ldr	r3, [r5, #-4]
  1426f8:	e2458018 	sub	r8, r5, #24
  1426fc:	e3c33001 	bic	r3, r3, #1
  142700:	e5053004 	str	r3, [r5, #-4]
  142704:	ebfffe26 	bl	141fa4 <__tl_lock>
  142708:	e59f33bc 	ldr	r3, [pc, #956]	; 142acc <__pthread_create+0x5b8>
  14270c:	e596c00c 	ldr	ip, [r6, #12]
  142710:	e3790001 	cmn	r9, #1
  142714:	e59f13b4 	ldr	r1, [pc, #948]	; 142ad0 <__pthread_create+0x5bc>
  142718:	e59f03b4 	ldr	r0, [pc, #948]	; 142ad4 <__pthread_create+0x5c0>
  14271c:	e2842078 	add	r2, r4, #120	; 0x78
  142720:	01a00003 	moveq	r0, r3
  142724:	e284301c 	add	r3, r4, #28
  142728:	e28cc001 	add	ip, ip, #1
  14272c:	e58d1008 	str	r1, [sp, #8]
  142730:	e58d2004 	str	r2, [sp, #4]
  142734:	e58d3000 	str	r3, [sp]
  142738:	e1a01008 	mov	r1, r8
  14273c:	e1a03008 	mov	r3, r8
  142740:	e59f2390 	ldr	r2, [pc, #912]	; 142ad8 <__pthread_create+0x5c4>
  142744:	e586c00c 	str	ip, [r6, #12]
  142748:	eb0006ff 	bl	14434c <__clone>
  14274c:	e3500000 	cmp	r0, #0
  142750:	ba0000a5 	blt	1429ec <__pthread_create+0x4d8>
  142754:	e59a300c 	ldr	r3, [sl, #12]
  142758:	e584a008 	str	sl, [r4, #8]
  14275c:	e584300c 	str	r3, [r4, #12]
  142760:	e5834008 	str	r4, [r3, #8]
  142764:	e5943008 	ldr	r3, [r4, #8]
  142768:	e583400c 	str	r4, [r3, #12]
  14276c:	ebfffe30 	bl	142034 <__tl_unlock>
  142770:	e28d0058 	add	r0, sp, #88	; 0x58
  142774:	eb00034f 	bl	1434b8 <__restore_sigs>
  142778:	ebfffe08 	bl	141fa0 <__acquire_ptc>
  14277c:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
  142780:	e3530000 	cmp	r3, #0
  142784:	0a000014 	beq	1427dc <__pthread_create+0x2c8>
  142788:	e59f534c 	ldr	r5, [pc, #844]	; 142adc <__pthread_create+0x5c8>
  14278c:	ea000002 	b	14279c <__pthread_create+0x288>
  142790:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
  142794:	e3730001 	cmn	r3, #1
  142798:	1a00000c 	bne	1427d0 <__pthread_create+0x2bc>
  14279c:	e3e00000 	mvn	r0, #0
  1427a0:	e3e01001 	mvn	r1, #1
  1427a4:	e28d2028 	add	r2, sp, #40	; 0x28
  1427a8:	e5953000 	ldr	r3, [r5]
  1427ac:	e12fff33 	blx	r3
  1427b0:	e3500000 	cmp	r0, #0
  1427b4:	1afffff5 	bne	142790 <__pthread_create+0x27c>
  1427b8:	e1a03000 	mov	r3, r0
  1427bc:	e1a02001 	mov	r2, r1
  1427c0:	e28d0028 	add	r0, sp, #40	; 0x28
  1427c4:	e1a01003 	mov	r1, r3
  1427c8:	e3a03001 	mov	r3, #1
  1427cc:	ebfffd60 	bl	141d54 <__wait>
  1427d0:	e59d0028 	ldr	r0, [sp, #40]	; 0x28
  1427d4:	e3500000 	cmp	r0, #0
  1427d8:	1a000002 	bne	1427e8 <__pthread_create+0x2d4>
  1427dc:	e3a00000 	mov	r0, #0
  1427e0:	e59d301c 	ldr	r3, [sp, #28]
  1427e4:	e5834000 	str	r4, [r3]
  1427e8:	e28dd0dc 	add	sp, sp, #220	; 0xdc
  1427ec:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  1427f0:	e1a0e009 	mov	lr, r9
  1427f4:	e28dc034 	add	ip, sp, #52	; 0x34
  1427f8:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
  1427fc:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
  142800:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
  142804:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
  142808:	e59e3000 	ldr	r3, [lr]
  14280c:	e58c3000 	str	r3, [ip]
  142810:	ebfffde2 	bl	141fa0 <__acquire_ptc>
  142814:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
  142818:	e59d7034 	ldr	r7, [sp, #52]	; 0x34
  14281c:	e3520000 	cmp	r2, #0
  142820:	e5960018 	ldr	r0, [r6, #24]
  142824:	1affff60 	bne	1425ac <__pthread_create+0x98>
  142828:	e59f5294 	ldr	r5, [pc, #660]	; 142ac4 <__pthread_create+0x5b0>
  14282c:	e3a01000 	mov	r1, #0
  142830:	e5953000 	ldr	r3, [r5]
  142834:	e59d8038 	ldr	r8, [sp, #56]	; 0x38
  142838:	e0833000 	add	r3, r3, r0
  14283c:	e2833eff 	add	r3, r3, #4080	; 0xff0
  142840:	e283300f 	add	r3, r3, #15
  142844:	e0837007 	add	r7, r3, r7
  142848:	e3a00000 	mov	r0, #0
  14284c:	e3e03000 	mvn	r3, #0
  142850:	e59f4288 	ldr	r4, [pc, #648]	; 142ae0 <__pthread_create+0x5cc>
  142854:	e2888eff 	add	r8, r8, #4080	; 0xff0
  142858:	e288800f 	add	r8, r8, #15
  14285c:	e0088004 	and	r8, r8, r4
  142860:	e3580000 	cmp	r8, #0
  142864:	e0044007 	and	r4, r4, r7
  142868:	e58d3000 	str	r3, [sp]
  14286c:	e58d0008 	str	r0, [sp, #8]
  142870:	e58d100c 	str	r1, [sp, #12]
  142874:	e3a03022 	mov	r3, #34	; 0x22
  142878:	e0847008 	add	r7, r4, r8
  14287c:	0a00007d 	beq	142a78 <__pthread_create+0x564>
  142880:	e1a00002 	mov	r0, r2
  142884:	e1a01007 	mov	r1, r7
  142888:	ebffed0c 	bl	13dcc0 <__mmap>
  14288c:	e3700001 	cmn	r0, #1
  142890:	e1a0b000 	mov	fp, r0
  142894:	0a000051 	beq	1429e0 <__pthread_create+0x4cc>
  142898:	e0803008 	add	r3, r0, r8
  14289c:	e1a01004 	mov	r1, r4
  1428a0:	e1a00003 	mov	r0, r3
  1428a4:	e3a02003 	mov	r2, #3
  1428a8:	e58d3020 	str	r3, [sp, #32]
  1428ac:	eb0002cb 	bl	1433e0 <__mprotect>
  1428b0:	e3500000 	cmp	r0, #0
  1428b4:	1a000042 	bne	1429c4 <__pthread_create+0x4b0>
  1428b8:	e5953000 	ldr	r3, [r5]
  1428bc:	e5960018 	ldr	r0, [r6, #24]
  1428c0:	e0473003 	sub	r3, r7, r3
  1428c4:	e08b3003 	add	r3, fp, r3
  1428c8:	e58d3024 	str	r3, [sp, #36]	; 0x24
  1428cc:	e2600000 	rsb	r0, r0, #0
  1428d0:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
  1428d4:	e0835000 	add	r5, r3, r0
  1428d8:	e1a00005 	mov	r0, r5
  1428dc:	eaffff5b 	b	142650 <__pthread_create+0x13c>
  1428e0:	ebffeee1 	bl	13e46c <__ofl_lock>
  1428e4:	e5903000 	ldr	r3, [r0]
  1428e8:	e3530000 	cmp	r3, #0
  1428ec:	0a000005 	beq	142908 <__pthread_create+0x3f4>
  1428f0:	e593204c 	ldr	r2, [r3, #76]	; 0x4c
  1428f4:	e3520000 	cmp	r2, #0
  1428f8:	b583404c 	strlt	r4, [r3, #76]	; 0x4c
  1428fc:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  142900:	e3530000 	cmp	r3, #0
  142904:	1afffff9 	bne	1428f0 <__pthread_create+0x3dc>
  142908:	ebffeede 	bl	13e488 <__ofl_unlock>
  14290c:	e59f31d0 	ldr	r3, [pc, #464]	; 142ae4 <__pthread_create+0x5d0>
  142910:	e5933000 	ldr	r3, [r3]
  142914:	e3530000 	cmp	r3, #0
  142918:	0a000003 	beq	14292c <__pthread_create+0x418>
  14291c:	e593204c 	ldr	r2, [r3, #76]	; 0x4c
  142920:	e3520000 	cmp	r2, #0
  142924:	b3a02000 	movlt	r2, #0
  142928:	b583204c 	strlt	r2, [r3, #76]	; 0x4c
  14292c:	e59f31b4 	ldr	r3, [pc, #436]	; 142ae8 <__pthread_create+0x5d4>
  142930:	e5933000 	ldr	r3, [r3]
  142934:	e3530000 	cmp	r3, #0
  142938:	0a000003 	beq	14294c <__pthread_create+0x438>
  14293c:	e593204c 	ldr	r2, [r3, #76]	; 0x4c
  142940:	e3520000 	cmp	r2, #0
  142944:	b3a02000 	movlt	r2, #0
  142948:	b583204c 	strlt	r2, [r3, #76]	; 0x4c
  14294c:	e59f3198 	ldr	r3, [pc, #408]	; 142aec <__pthread_create+0x5d8>
  142950:	e5933000 	ldr	r3, [r3]
  142954:	e3530000 	cmp	r3, #0
  142958:	0a000003 	beq	14296c <__pthread_create+0x458>
  14295c:	e593204c 	ldr	r2, [r3, #76]	; 0x4c
  142960:	e3520000 	cmp	r2, #0
  142964:	b3a02000 	movlt	r2, #0
  142968:	b583204c 	strlt	r2, [r3, #76]	; 0x4c
  14296c:	e3a03003 	mov	r3, #3
  142970:	e3a04000 	mov	r4, #0
  142974:	e3a000af 	mov	r0, #175	; 0xaf
  142978:	e58d402c 	str	r4, [sp, #44]	; 0x2c
  14297c:	e58d3030 	str	r3, [sp, #48]	; 0x30
  142980:	ebffe68b 	bl	13c3b4 <get_rtt_syscall>
  142984:	e2505000 	subs	r5, r0, #0
  142988:	0a000004 	beq	1429a0 <__pthread_create+0x48c>
  14298c:	e1a02004 	mov	r2, r4
  142990:	e28d102c 	add	r1, sp, #44	; 0x2c
  142994:	e3a03008 	mov	r3, #8
  142998:	e3a00001 	mov	r0, #1
  14299c:	e12fff35 	blx	r5
  1429a0:	e59f3148 	ldr	r3, [pc, #328]	; 142af0 <__pthread_create+0x5dc>
  1429a4:	e58a304c 	str	r3, [sl, #76]	; 0x4c
  1429a8:	ebfffd7c 	bl	141fa0 <__acquire_ptc>
  1429ac:	e3a03001 	mov	r3, #1
  1429b0:	e5863004 	str	r3, [r6, #4]
  1429b4:	e2493001 	sub	r3, r9, #1
  1429b8:	e3730003 	cmn	r3, #3
  1429bc:	8afffeef 	bhi	142580 <__pthread_create+0x6c>
  1429c0:	eaffff8a 	b	1427f0 <__pthread_create+0x2dc>
  1429c4:	ebffd944 	bl	138edc <__errno_location>
  1429c8:	e5903000 	ldr	r3, [r0]
  1429cc:	e3530026 	cmp	r3, #38	; 0x26
  1429d0:	0affffb8 	beq	1428b8 <__pthread_create+0x3a4>
  1429d4:	e1a01007 	mov	r1, r7
  1429d8:	e1a0000b 	mov	r0, fp
  1429dc:	ebffed1d 	bl	13de58 <__munmap>
  1429e0:	ebfffd6e 	bl	141fa0 <__acquire_ptc>
  1429e4:	e3a0000b 	mov	r0, #11
  1429e8:	eaffff7e 	b	1427e8 <__pthread_create+0x2d4>
  1429ec:	ebfffd90 	bl	142034 <__tl_unlock>
  1429f0:	e28d0058 	add	r0, sp, #88	; 0x58
  1429f4:	eb0002af 	bl	1434b8 <__restore_sigs>
  1429f8:	ebfffd68 	bl	141fa0 <__acquire_ptc>
  1429fc:	e596300c 	ldr	r3, [r6, #12]
  142a00:	e35b0000 	cmp	fp, #0
  142a04:	e2433001 	sub	r3, r3, #1
  142a08:	e586300c 	str	r3, [r6, #12]
  142a0c:	03a0000b 	moveq	r0, #11
  142a10:	0affff74 	beq	1427e8 <__pthread_create+0x2d4>
  142a14:	e1a01007 	mov	r1, r7
  142a18:	e1a0000b 	mov	r0, fp
  142a1c:	ebffed0d 	bl	13de58 <__munmap>
  142a20:	e3a0000b 	mov	r0, #11
  142a24:	e28dd0dc 	add	sp, sp, #220	; 0xdc
  142a28:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  142a2c:	e5943000 	ldr	r3, [r4]
  142a30:	e1a02001 	mov	r2, r1
  142a34:	e0458003 	sub	r8, r5, r3
  142a38:	e0485000 	sub	r5, r8, r0
  142a3c:	e1a00005 	mov	r0, r5
  142a40:	e3a01000 	mov	r1, #0
  142a44:	e58d8024 	str	r8, [sp, #36]	; 0x24
  142a48:	ebfffa09 	bl	141274 <memset>
  142a4c:	e3580000 	cmp	r8, #0
  142a50:	e1a03008 	mov	r3, r8
  142a54:	0afffee6 	beq	1425f4 <__pthread_create+0xe0>
  142a58:	e3a08000 	mov	r8, #0
  142a5c:	e5960018 	ldr	r0, [r6, #24]
  142a60:	e1a0b008 	mov	fp, r8
  142a64:	e0430000 	sub	r0, r3, r0
  142a68:	eafffef8 	b	142650 <__pthread_create+0x13c>
  142a6c:	e1a08005 	mov	r8, r5
  142a70:	e58db020 	str	fp, [sp, #32]
  142a74:	eaffff95 	b	1428d0 <__pthread_create+0x3bc>
  142a78:	e3a02003 	mov	r2, #3
  142a7c:	e1a01007 	mov	r1, r7
  142a80:	e1a00008 	mov	r0, r8
  142a84:	ebffec8d 	bl	13dcc0 <__mmap>
  142a88:	e3700001 	cmn	r0, #1
  142a8c:	e1a0b000 	mov	fp, r0
  142a90:	0affffd2 	beq	1429e0 <__pthread_create+0x4cc>
  142a94:	e5953000 	ldr	r3, [r5]
  142a98:	e5960018 	ldr	r0, [r6, #24]
  142a9c:	e0473003 	sub	r3, r7, r3
  142aa0:	e08b3003 	add	r3, fp, r3
  142aa4:	e58d3024 	str	r3, [sp, #36]	; 0x24
  142aa8:	e2600000 	rsb	r0, r0, #0
  142aac:	e58db020 	str	fp, [sp, #32]
  142ab0:	eaffff86 	b	1428d0 <__pthread_create+0x3bc>
  142ab4:	0015d074 	.word	0x0015d074
  142ab8:	0014d3dc 	.word	0x0014d3dc
  142abc:	0014d3e4 	.word	0x0014d3e4
  142ac0:	0014d3e0 	.word	0x0014d3e0
  142ac4:	0014f474 	.word	0x0014f474
  142ac8:	0015d09c 	.word	0x0015d09c
  142acc:	001424b8 	.word	0x001424b8
  142ad0:	0015d0bc 	.word	0x0015d0bc
  142ad4:	001423bc 	.word	0x001423bc
  142ad8:	007d0f00 	.word	0x007d0f00
  142adc:	0014d3d8 	.word	0x0014d3d8
  142ae0:	fffff000 	.word	0xfffff000
  142ae4:	0014f478 	.word	0x0014f478
  142ae8:	0014d3d0 	.word	0x0014d3d0
  142aec:	0014d338 	.word	0x0014d338
  142af0:	0014f47c 	.word	0x0014f47c

00142af4 <__get_thread_map>:
  142af4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  142af8:	e2504000 	subs	r4, r0, #0
  142afc:	e24dd014 	sub	sp, sp, #20
  142b00:	0a000002 	beq	142b10 <__get_thread_map+0x1c>
  142b04:	e2840078 	add	r0, r4, #120	; 0x78
  142b08:	e28dd014 	add	sp, sp, #20
  142b0c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  142b10:	e3a06000 	mov	r6, #0
  142b14:	e3a07000 	mov	r7, #0
  142b18:	e3e03000 	mvn	r3, #0
  142b1c:	e58d6008 	str	r6, [sp, #8]
  142b20:	e58d700c 	str	r7, [sp, #12]
  142b24:	e59f5074 	ldr	r5, [pc, #116]	; 142ba0 <__get_thread_map+0xac>
  142b28:	e3a02003 	mov	r2, #3
  142b2c:	e5951018 	ldr	r1, [r5, #24]
  142b30:	e58d3000 	str	r3, [sp]
  142b34:	e3510000 	cmp	r1, #0
  142b38:	03a01078 	moveq	r1, #120	; 0x78
  142b3c:	e3a03022 	mov	r3, #34	; 0x22
  142b40:	ebffec5e 	bl	13dcc0 <__mmap>
  142b44:	e2504000 	subs	r4, r0, #0
  142b48:	0a000012 	beq	142b98 <__get_thread_map+0xa4>
  142b4c:	e59f3050 	ldr	r3, [pc, #80]	; 142ba4 <__get_thread_map+0xb0>
  142b50:	e2855028 	add	r5, r5, #40	; 0x28
  142b54:	e5932000 	ldr	r2, [r3]
  142b58:	e2843050 	add	r3, r4, #80	; 0x50
  142b5c:	e5845060 	str	r5, [r4, #96]	; 0x60
  142b60:	e5844000 	str	r4, [r4]
  142b64:	e5844008 	str	r4, [r4, #8]
  142b68:	e584400c 	str	r4, [r4, #12]
  142b6c:	e5842014 	str	r2, [r4, #20]
  142b70:	e5843050 	str	r3, [r4, #80]	; 0x50
  142b74:	e3a000e0 	mov	r0, #224	; 0xe0
  142b78:	ebffe60d 	bl	13c3b4 <get_rtt_syscall>
  142b7c:	e3500000 	cmp	r0, #0
  142b80:	0a000000 	beq	142b88 <__get_thread_map+0x94>
  142b84:	e12fff30 	blx	r0
  142b88:	e3a03000 	mov	r3, #0
  142b8c:	e584001c 	str	r0, [r4, #28]
  142b90:	e5843020 	str	r3, [r4, #32]
  142b94:	eaffffda 	b	142b04 <__get_thread_map+0x10>
  142b98:	e1a00004 	mov	r0, r4
  142b9c:	eaffffd9 	b	142b08 <__get_thread_map+0x14>
  142ba0:	0015d074 	.word	0x0015d074
  142ba4:	0015d0c0 	.word	0x0015d0c0

00142ba8 <__put_thread_map>:
  142ba8:	e3500000 	cmp	r0, #0
  142bac:	012fff1e 	bxeq	lr
  142bb0:	e59f3010 	ldr	r3, [pc, #16]	; 142bc8 <__put_thread_map+0x20>
  142bb4:	e2400078 	sub	r0, r0, #120	; 0x78
  142bb8:	e5931018 	ldr	r1, [r3, #24]
  142bbc:	e3510000 	cmp	r1, #0
  142bc0:	03a01078 	moveq	r1, #120	; 0x78
  142bc4:	eaffeca3 	b	13de58 <__munmap>
  142bc8:	0015d074 	.word	0x0015d074

00142bcc <__pthread_init_run>:
  142bcc:	e92d4070 	push	{r4, r5, r6, lr}
  142bd0:	e1a05000 	mov	r5, r0
  142bd4:	e3a00000 	mov	r0, #0
  142bd8:	e1a06001 	mov	r6, r1
  142bdc:	ebffffc4 	bl	142af4 <__get_thread_map>
  142be0:	e2504000 	subs	r4, r0, #0
  142be4:	08bd8070 	popeq	{r4, r5, r6, pc}
  142be8:	eb000582 	bl	1441f8 <__set_thread_area>
  142bec:	e1a00006 	mov	r0, r6
  142bf0:	e12fff35 	blx	r5
  142bf4:	e59f3014 	ldr	r3, [pc, #20]	; 142c10 <__pthread_init_run+0x44>
  142bf8:	e2440078 	sub	r0, r4, #120	; 0x78
  142bfc:	e5931018 	ldr	r1, [r3, #24]
  142c00:	e8bd4070 	pop	{r4, r5, r6, lr}
  142c04:	e3510000 	cmp	r1, #0
  142c08:	03a01078 	moveq	r1, #120	; 0x78
  142c0c:	eaffec91 	b	13de58 <__munmap>
  142c10:	0015d074 	.word	0x0015d074

00142c14 <__vm_wait>:
  142c14:	e92d4070 	push	{r4, r5, r6, lr}
  142c18:	e59f402c 	ldr	r4, [pc, #44]	; 142c4c <__vm_wait+0x38>
  142c1c:	e5942000 	ldr	r2, [r4]
  142c20:	e3520000 	cmp	r2, #0
  142c24:	08bd8070 	popeq	{r4, r5, r6, pc}
  142c28:	e2845004 	add	r5, r4, #4
  142c2c:	e3a03001 	mov	r3, #1
  142c30:	e1a01005 	mov	r1, r5
  142c34:	e59f0010 	ldr	r0, [pc, #16]	; 142c4c <__vm_wait+0x38>
  142c38:	ebfffc45 	bl	141d54 <__wait>
  142c3c:	e5942000 	ldr	r2, [r4]
  142c40:	e3520000 	cmp	r2, #0
  142c44:	1afffff8 	bne	142c2c <__vm_wait+0x18>
  142c48:	e8bd8070 	pop	{r4, r5, r6, pc}
  142c4c:	0014f488 	.word	0x0014f488

00142c50 <__vm_lock>:
  142c50:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  142c54:	e59f6038 	ldr	r6, [pc, #56]	; 142c94 <__vm_lock+0x44>
  142c58:	e59f8038 	ldr	r8, [pc, #56]	; 142c98 <__vm_lock+0x48>
  142c5c:	e1a07006 	mov	r7, r6
  142c60:	e5964000 	ldr	r4, [r6]
  142c64:	e2845001 	add	r5, r4, #1
  142c68:	e1a00004 	mov	r0, r4
  142c6c:	e1a01005 	mov	r1, r5
  142c70:	e1a02007 	mov	r2, r7
  142c74:	e5983000 	ldr	r3, [r8]
  142c78:	e12fff33 	blx	r3
  142c7c:	e3500000 	cmp	r0, #0
  142c80:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  142c84:	e5963000 	ldr	r3, [r6]
  142c88:	e1540003 	cmp	r4, r3
  142c8c:	0afffff5 	beq	142c68 <__vm_lock+0x18>
  142c90:	eafffff2 	b	142c60 <__vm_lock+0x10>
  142c94:	0014f488 	.word	0x0014f488
  142c98:	0014d3d8 	.word	0x0014d3d8

00142c9c <__vm_unlock>:
  142c9c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  142ca0:	e59f6098 	ldr	r6, [pc, #152]	; 142d40 <__vm_unlock+0xa4>
  142ca4:	e59f8098 	ldr	r8, [pc, #152]	; 142d44 <__vm_unlock+0xa8>
  142ca8:	e1a07006 	mov	r7, r6
  142cac:	e5964000 	ldr	r4, [r6]
  142cb0:	e2445001 	sub	r5, r4, #1
  142cb4:	ea000002 	b	142cc4 <__vm_unlock+0x28>
  142cb8:	e5963000 	ldr	r3, [r6]
  142cbc:	e1540003 	cmp	r4, r3
  142cc0:	1afffff9 	bne	142cac <__vm_unlock+0x10>
  142cc4:	e1a00004 	mov	r0, r4
  142cc8:	e1a01005 	mov	r1, r5
  142ccc:	e1a02007 	mov	r2, r7
  142cd0:	e5983000 	ldr	r3, [r8]
  142cd4:	e12fff33 	blx	r3
  142cd8:	e3500000 	cmp	r0, #0
  142cdc:	1afffff5 	bne	142cb8 <__vm_unlock+0x1c>
  142ce0:	e3540001 	cmp	r4, #1
  142ce4:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
  142ce8:	e5963004 	ldr	r3, [r6, #4]
  142cec:	e3530000 	cmp	r3, #0
  142cf0:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  142cf4:	e3a000f0 	mov	r0, #240	; 0xf0
  142cf8:	ebffe5ad 	bl	13c3b4 <get_rtt_syscall>
  142cfc:	e2503000 	subs	r3, r0, #0
  142d00:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  142d04:	e3e02102 	mvn	r2, #-2147483648	; 0x80000000
  142d08:	e3a01081 	mov	r1, #129	; 0x81
  142d0c:	e59f002c 	ldr	r0, [pc, #44]	; 142d40 <__vm_unlock+0xa4>
  142d10:	e12fff33 	blx	r3
  142d14:	e3700026 	cmn	r0, #38	; 0x26
  142d18:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
  142d1c:	e3a000f0 	mov	r0, #240	; 0xf0
  142d20:	ebffe5a3 	bl	13c3b4 <get_rtt_syscall>
  142d24:	e2503000 	subs	r3, r0, #0
  142d28:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  142d2c:	e1a01004 	mov	r1, r4
  142d30:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
  142d34:	e3e02102 	mvn	r2, #-2147483648	; 0x80000000
  142d38:	e59f0000 	ldr	r0, [pc]	; 142d40 <__vm_unlock+0xa4>
  142d3c:	e12fff13 	bx	r3
  142d40:	0014f488 	.word	0x0014f488
  142d44:	0014d3d8 	.word	0x0014d3d8

00142d48 <time>:
  142d48:	e92d4010 	push	{r4, lr}
  142d4c:	e1a04000 	mov	r4, r0
  142d50:	e24dd010 	sub	sp, sp, #16
  142d54:	e1a0100d 	mov	r1, sp
  142d58:	e3a00000 	mov	r0, #0
  142d5c:	eb000595 	bl	1443b8 <__clock_gettime>
  142d60:	e89d0003 	ldm	sp, {r0, r1}
  142d64:	e3540000 	cmp	r4, #0
  142d68:	18840003 	stmne	r4, {r0, r1}
  142d6c:	e28dd010 	add	sp, sp, #16
  142d70:	e8bd8010 	pop	{r4, pc}

00142d74 <__aio_close>:
  142d74:	e12fff1e 	bx	lr

00142d78 <close>:
  142d78:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  142d7c:	e24dd014 	sub	sp, sp, #20
  142d80:	ebfffffb 	bl	142d74 <__aio_close>
  142d84:	e3a03000 	mov	r3, #0
  142d88:	e1a01000 	mov	r1, r0
  142d8c:	e58d3008 	str	r3, [sp, #8]
  142d90:	e58d3004 	str	r3, [sp, #4]
  142d94:	e58d3000 	str	r3, [sp]
  142d98:	e1a02003 	mov	r2, r3
  142d9c:	e3a00006 	mov	r0, #6
  142da0:	ebfffbea 	bl	141d50 <__syscall_cp>
  142da4:	e3700004 	cmn	r0, #4
  142da8:	03a00000 	moveq	r0, #0
  142dac:	e28dd014 	add	sp, sp, #20
  142db0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  142db4:	eaffe5b3 	b	13c488 <__syscall_ret>

00142db8 <tolower>:
  142db8:	e2403041 	sub	r3, r0, #65	; 0x41
  142dbc:	e3530019 	cmp	r3, #25
  142dc0:	93800020 	orrls	r0, r0, #32
  142dc4:	e12fff1e 	bx	lr

00142dc8 <__tolower_l>:
  142dc8:	e2403041 	sub	r3, r0, #65	; 0x41
  142dcc:	e3530019 	cmp	r3, #25
  142dd0:	93800020 	orrls	r0, r0, #32
  142dd4:	e12fff1e 	bx	lr

00142dd8 <__init_tp>:
  142dd8:	e92d4010 	push	{r4, lr}
  142ddc:	e5800000 	str	r0, [r0]
  142de0:	e1a04000 	mov	r4, r0
  142de4:	e2800078 	add	r0, r0, #120	; 0x78
  142de8:	eb000502 	bl	1441f8 <__set_thread_area>
  142dec:	e3500000 	cmp	r0, #0
  142df0:	ba000015 	blt	142e4c <__init_tp+0x74>
  142df4:	03a02001 	moveq	r2, #1
  142df8:	059f3054 	ldreq	r3, [pc, #84]	; 142e54 <__init_tp+0x7c>
  142dfc:	e3a00c01 	mov	r0, #256	; 0x100
  142e00:	05832000 	streq	r2, [r3]
  142e04:	e3a03001 	mov	r3, #1
  142e08:	e5843024 	str	r3, [r4, #36]	; 0x24
  142e0c:	ebffe568 	bl	13c3b4 <get_rtt_syscall>
  142e10:	e2503000 	subs	r3, r0, #0
  142e14:	0a00000a 	beq	142e44 <__init_tp+0x6c>
  142e18:	e59f0038 	ldr	r0, [pc, #56]	; 142e58 <__init_tp+0x80>
  142e1c:	e12fff33 	blx	r3
  142e20:	e59f2034 	ldr	r2, [pc, #52]	; 142e5c <__init_tp+0x84>
  142e24:	e2843050 	add	r3, r4, #80	; 0x50
  142e28:	e584001c 	str	r0, [r4, #28]
  142e2c:	e5844008 	str	r4, [r4, #8]
  142e30:	e584400c 	str	r4, [r4, #12]
  142e34:	e5842060 	str	r2, [r4, #96]	; 0x60
  142e38:	e5843050 	str	r3, [r4, #80]	; 0x50
  142e3c:	e3a00000 	mov	r0, #0
  142e40:	e8bd8010 	pop	{r4, pc}
  142e44:	e1a00003 	mov	r0, r3
  142e48:	eafffff4 	b	142e20 <__init_tp+0x48>
  142e4c:	e3e00000 	mvn	r0, #0
  142e50:	e8bd8010 	pop	{r4, pc}
  142e54:	0015d074 	.word	0x0015d074
  142e58:	0015d0bc 	.word	0x0015d0bc
  142e5c:	0015d09c 	.word	0x0015d09c

00142e60 <__copy_tls>:
  142e60:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  142e64:	e59f808c 	ldr	r8, [pc, #140]	; 142ef8 <__copy_tls+0x98>
  142e68:	e3e03077 	mvn	r3, #119	; 0x77
  142e6c:	e5982020 	ldr	r2, [r8, #32]
  142e70:	e598601c 	ldr	r6, [r8, #28]
  142e74:	e1a07102 	lsl	r7, r2, #2
  142e78:	e2277003 	eor	r7, r7, #3
  142e7c:	e1e07007 	mvn	r7, r7
  142e80:	e5981018 	ldr	r1, [r8, #24]
  142e84:	e5984014 	ldr	r4, [r8, #20]
  142e88:	e2466001 	sub	r6, r6, #1
  142e8c:	e0433000 	sub	r3, r3, r0
  142e90:	e0066003 	and	r6, r6, r3
  142e94:	e0877001 	add	r7, r7, r1
  142e98:	e3540000 	cmp	r4, #0
  142e9c:	e1a09000 	mov	r9, r0
  142ea0:	e0806006 	add	r6, r0, r6
  142ea4:	e080a007 	add	sl, r0, r7
  142ea8:	0a00000d 	beq	142ee4 <__copy_tls+0x84>
  142eac:	e1a0b00a 	mov	fp, sl
  142eb0:	e2865078 	add	r5, r6, #120	; 0x78
  142eb4:	e5943014 	ldr	r3, [r4, #20]
  142eb8:	e5941004 	ldr	r1, [r4, #4]
  142ebc:	e0853003 	add	r3, r5, r3
  142ec0:	e5ab3004 	str	r3, [fp, #4]!
  142ec4:	e5940014 	ldr	r0, [r4, #20]
  142ec8:	e5942008 	ldr	r2, [r4, #8]
  142ecc:	e0850000 	add	r0, r5, r0
  142ed0:	ebfff7af 	bl	140d94 <memcpy>
  142ed4:	e5944000 	ldr	r4, [r4]
  142ed8:	e3540000 	cmp	r4, #0
  142edc:	1afffff4 	bne	142eb4 <__copy_tls+0x54>
  142ee0:	e5982020 	ldr	r2, [r8, #32]
  142ee4:	e7892007 	str	r2, [r9, r7]
  142ee8:	e1a00006 	mov	r0, r6
  142eec:	e586a074 	str	sl, [r6, #116]	; 0x74
  142ef0:	e586a004 	str	sl, [r6, #4]
  142ef4:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  142ef8:	0015d074 	.word	0x0015d074

00142efc <__init_tls>:
  142efc:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  142f00:	e5901014 	ldr	r1, [r0, #20]
  142f04:	e24dd00c 	sub	sp, sp, #12
  142f08:	e3510000 	cmp	r1, #0
  142f0c:	e590600c 	ldr	r6, [r0, #12]
  142f10:	0a000062 	beq	1430a0 <__init_tls+0x1a4>
  142f14:	e3a04000 	mov	r4, #0
  142f18:	e59f81a0 	ldr	r8, [pc, #416]	; 1430c0 <__init_tls+0x1c4>
  142f1c:	e1a02006 	mov	r2, r6
  142f20:	e1a03004 	mov	r3, r4
  142f24:	e1a0e004 	mov	lr, r4
  142f28:	e590c010 	ldr	ip, [r0, #16]
  142f2c:	e5987000 	ldr	r7, [r8]
  142f30:	e59f918c 	ldr	r9, [pc, #396]	; 1430c4 <__init_tls+0x1c8>
  142f34:	e59f518c 	ldr	r5, [pc, #396]	; 1430c8 <__init_tls+0x1cc>
  142f38:	ea000007 	b	142f5c <__init_tls+0x60>
  142f3c:	e3500002 	cmp	r0, #2
  142f40:	1a00003c 	bne	143038 <__init_tls+0x13c>
  142f44:	e3550000 	cmp	r5, #0
  142f48:	15923008 	ldrne	r3, [r2, #8]
  142f4c:	10453003 	subne	r3, r5, r3
  142f50:	e2511001 	subs	r1, r1, #1
  142f54:	e082200c 	add	r2, r2, ip
  142f58:	0a000007 	beq	142f7c <__init_tls+0x80>
  142f5c:	e5920000 	ldr	r0, [r2]
  142f60:	e3500006 	cmp	r0, #6
  142f64:	1afffff4 	bne	142f3c <__init_tls+0x40>
  142f68:	e5923008 	ldr	r3, [r2, #8]
  142f6c:	e2511001 	subs	r1, r1, #1
  142f70:	e0463003 	sub	r3, r6, r3
  142f74:	e082200c 	add	r2, r2, ip
  142f78:	1afffff7 	bne	142f5c <__init_tls+0x60>
  142f7c:	e3540000 	cmp	r4, #0
  142f80:	15887000 	strne	r7, [r8]
  142f84:	e35e0000 	cmp	lr, #0
  142f88:	0a000044 	beq	1430a0 <__init_tls+0x1a4>
  142f8c:	e3a04001 	mov	r4, #1
  142f90:	e59ec008 	ldr	ip, [lr, #8]
  142f94:	e59e1010 	ldr	r1, [lr, #16]
  142f98:	e59f212c 	ldr	r2, [pc, #300]	; 1430cc <__init_tls+0x1d0>
  142f9c:	e59e001c 	ldr	r0, [lr, #28]
  142fa0:	e083300c 	add	r3, r3, ip
  142fa4:	e59fc124 	ldr	ip, [pc, #292]	; 1430d0 <__init_tls+0x1d4>
  142fa8:	e5821008 	str	r1, [r2, #8]
  142fac:	e5823004 	str	r3, [r2, #4]
  142fb0:	e59e1014 	ldr	r1, [lr, #20]
  142fb4:	e5820010 	str	r0, [r2, #16]
  142fb8:	e58c2014 	str	r2, [ip, #20]
  142fbc:	e58c4020 	str	r4, [ip, #32]
  142fc0:	e3500003 	cmp	r0, #3
  142fc4:	93a0e004 	movls	lr, #4
  142fc8:	e0833001 	add	r3, r3, r1
  142fcc:	e2404001 	sub	r4, r0, #1
  142fd0:	e2633000 	rsb	r3, r3, #0
  142fd4:	e0033004 	and	r3, r3, r4
  142fd8:	e0833001 	add	r3, r3, r1
  142fdc:	93a01087 	movls	r1, #135	; 0x87
  142fe0:	91a0000e 	movls	r0, lr
  142fe4:	e3c44007 	bic	r4, r4, #7
  142fe8:	e2844008 	add	r4, r4, #8
  142fec:	82801083 	addhi	r1, r0, #131	; 0x83
  142ff0:	e5824014 	str	r4, [r2, #20]
  142ff4:	e0834004 	add	r4, r3, r4
  142ff8:	e0844001 	add	r4, r4, r1
  142ffc:	e3c44003 	bic	r4, r4, #3
  143000:	9582e010 	strls	lr, [r2, #16]
  143004:	e35400bc 	cmp	r4, #188	; 0xbc
  143008:	e58c001c 	str	r0, [ip, #28]
  14300c:	e582300c 	str	r3, [r2, #12]
  143010:	e58c4018 	str	r4, [ip, #24]
  143014:	959f00b8 	ldrls	r0, [pc, #184]	; 1430d4 <__init_tls+0x1d8>
  143018:	8a000013 	bhi	14306c <__init_tls+0x170>
  14301c:	ebffff8f 	bl	142e60 <__copy_tls>
  143020:	ebffff6c 	bl	142dd8 <__init_tp>
  143024:	e3500000 	cmp	r0, #0
  143028:	aa000000 	bge	143030 <__init_tls+0x134>
  14302c:	e7f000f0 	.word	0xe7f000f0
  143030:	e28dd00c 	add	sp, sp, #12
  143034:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  143038:	e3500007 	cmp	r0, #7
  14303c:	01a0e002 	moveq	lr, r2
  143040:	0affffc2 	beq	142f50 <__init_tls+0x54>
  143044:	e1500009 	cmp	r0, r9
  143048:	1affffc0 	bne	142f50 <__init_tls+0x54>
  14304c:	e5920014 	ldr	r0, [r2, #20]
  143050:	e1500007 	cmp	r0, r7
  143054:	9affffbd 	bls	142f50 <__init_tls+0x54>
  143058:	e3500502 	cmp	r0, #8388608	; 0x800000
  14305c:	31a07000 	movcc	r7, r0
  143060:	23a07502 	movcs	r7, #8388608	; 0x800000
  143064:	e3a04001 	mov	r4, #1
  143068:	eaffffb8 	b	142f50 <__init_tls+0x54>
  14306c:	e3a000c0 	mov	r0, #192	; 0xc0
  143070:	ebffe4cf 	bl	13c3b4 <get_rtt_syscall>
  143074:	e2505000 	subs	r5, r0, #0
  143078:	0a00000e 	beq	1430b8 <__init_tls+0x1bc>
  14307c:	e3e03000 	mvn	r3, #0
  143080:	e3a00000 	mov	r0, #0
  143084:	e58d3000 	str	r3, [sp]
  143088:	e1a01004 	mov	r1, r4
  14308c:	e58d0004 	str	r0, [sp, #4]
  143090:	e3a03022 	mov	r3, #34	; 0x22
  143094:	e3a02003 	mov	r2, #3
  143098:	e12fff35 	blx	r5
  14309c:	eaffffde 	b	14301c <__init_tls+0x120>
  1430a0:	e59f2024 	ldr	r2, [pc, #36]	; 1430cc <__init_tls+0x1d0>
  1430a4:	e59fc024 	ldr	ip, [pc, #36]	; 1430d0 <__init_tls+0x1d4>
  1430a8:	e592100c 	ldr	r1, [r2, #12]
  1430ac:	e5923004 	ldr	r3, [r2, #4]
  1430b0:	e5920010 	ldr	r0, [r2, #16]
  1430b4:	eaffffc1 	b	142fc0 <__init_tls+0xc4>
  1430b8:	e1a00005 	mov	r0, r5
  1430bc:	eaffffd6 	b	14301c <__init_tls+0x120>
  1430c0:	0014d3e4 	.word	0x0014d3e4
  1430c4:	6474e551 	.word	0x6474e551
  1430c8:	00000000 	.word	0x00000000
  1430cc:	0014f550 	.word	0x0014f550
  1430d0:	0015d074 	.word	0x0015d074
  1430d4:	0014f494 	.word	0x0014f494

001430d8 <__init_ssp>:
  1430d8:	e2501000 	subs	r1, r0, #0
  1430dc:	e92d4010 	push	{r4, lr}
  1430e0:	1a000009 	bne	14310c <__init_ssp+0x34>
  1430e4:	e59f3034 	ldr	r3, [pc, #52]	; 143120 <__init_ssp+0x48>
  1430e8:	e59f2034 	ldr	r2, [pc, #52]	; 143124 <__init_ssp+0x4c>
  1430ec:	e0010293 	mul	r1, r3, r2
  1430f0:	e5831000 	str	r1, [r3]
  1430f4:	e5933000 	ldr	r3, [r3]
  1430f8:	e59f2028 	ldr	r2, [pc, #40]	; 143128 <__init_ssp+0x50>
  1430fc:	e5920000 	ldr	r0, [r2]
  143100:	e12fff30 	blx	r0
  143104:	e5003064 	str	r3, [r0, #-100]	; 0xffffff9c
  143108:	e8bd8010 	pop	{r4, pc}
  14310c:	e3a02004 	mov	r2, #4
  143110:	e59f0008 	ldr	r0, [pc, #8]	; 143120 <__init_ssp+0x48>
  143114:	ebfff71e 	bl	140d94 <memcpy>
  143118:	e59f3000 	ldr	r3, [pc]	; 143120 <__init_ssp+0x48>
  14311c:	eafffff4 	b	1430f4 <__init_ssp+0x1c>
  143120:	0015d0c0 	.word	0x0015d0c0
  143124:	41c64e6d 	.word	0x41c64e6d
  143128:	0014d3dc 	.word	0x0014d3dc

0014312c <__stack_chk_fail>:
  14312c:	e7f000f0 	.word	0xe7f000f0
  143130:	e12fff1e 	bx	lr

00143134 <_Exit>:
  143134:	e92d4010 	push	{r4, lr}
  143138:	e1a04000 	mov	r4, r0
  14313c:	e3a000f8 	mov	r0, #248	; 0xf8
  143140:	ebffe49b 	bl	13c3b4 <get_rtt_syscall>
  143144:	e2503000 	subs	r3, r0, #0
  143148:	0a000001 	beq	143154 <_Exit+0x20>
  14314c:	e1a00004 	mov	r0, r4
  143150:	e12fff33 	blx	r3
  143154:	e3a00001 	mov	r0, #1
  143158:	ebffe495 	bl	13c3b4 <get_rtt_syscall>
  14315c:	e2503000 	subs	r3, r0, #0
  143160:	0afffffb 	beq	143154 <_Exit+0x20>
  143164:	eafffff8 	b	14314c <_Exit+0x18>

00143168 <abort>:
  143168:	e3a04000 	mov	r4, #0
  14316c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  143170:	e3a00006 	mov	r0, #6
  143174:	e24dd024 	sub	sp, sp, #36	; 0x24
  143178:	ebffec24 	bl	13e210 <raise>
  14317c:	e1a00004 	mov	r0, r4
  143180:	eb0000b0 	bl	143448 <__block_all_sigs>
  143184:	e59f00b0 	ldr	r0, [pc, #176]	; 14323c <abort+0xd4>
  143188:	ebfffa6e 	bl	141b48 <__lock>
  14318c:	e3a000ae 	mov	r0, #174	; 0xae
  143190:	e58d400c 	str	r4, [sp, #12]
  143194:	e58d4010 	str	r4, [sp, #16]
  143198:	e58d4014 	str	r4, [sp, #20]
  14319c:	e58d4018 	str	r4, [sp, #24]
  1431a0:	e58d401c 	str	r4, [sp, #28]
  1431a4:	ebffe482 	bl	13c3b4 <get_rtt_syscall>
  1431a8:	e2505000 	subs	r5, r0, #0
  1431ac:	0a000004 	beq	1431c4 <abort+0x5c>
  1431b0:	e1a02004 	mov	r2, r4
  1431b4:	e28d100c 	add	r1, sp, #12
  1431b8:	e3a03008 	mov	r3, #8
  1431bc:	e3a00006 	mov	r0, #6
  1431c0:	e12fff35 	blx	r5
  1431c4:	e59f3074 	ldr	r3, [pc, #116]	; 143240 <abort+0xd8>
  1431c8:	e5930000 	ldr	r0, [r3]
  1431cc:	e12fff30 	blx	r0
  1431d0:	e510405c 	ldr	r4, [r0, #-92]	; 0xffffffa4
  1431d4:	e3a000ee 	mov	r0, #238	; 0xee
  1431d8:	ebffe475 	bl	13c3b4 <get_rtt_syscall>
  1431dc:	e2503000 	subs	r3, r0, #0
  1431e0:	0a000002 	beq	1431f0 <abort+0x88>
  1431e4:	e1a00004 	mov	r0, r4
  1431e8:	e3a01006 	mov	r1, #6
  1431ec:	e12fff33 	blx	r3
  1431f0:	e3a03020 	mov	r3, #32
  1431f4:	e3a05000 	mov	r5, #0
  1431f8:	e08d4003 	add	r4, sp, r3
  1431fc:	e3a000af 	mov	r0, #175	; 0xaf
  143200:	e58d5008 	str	r5, [sp, #8]
  143204:	e524301c 	str	r3, [r4, #-28]!	; 0xffffffe4
  143208:	ebffe469 	bl	13c3b4 <get_rtt_syscall>
  14320c:	e2506000 	subs	r6, r0, #0
  143210:	0a000004 	beq	143228 <abort+0xc0>
  143214:	e1a02005 	mov	r2, r5
  143218:	e1a01004 	mov	r1, r4
  14321c:	e3a03008 	mov	r3, #8
  143220:	e3a00001 	mov	r0, #1
  143224:	e12fff36 	blx	r6
  143228:	e7f000f0 	.word	0xe7f000f0
  14322c:	e3a00009 	mov	r0, #9
  143230:	ebffebf6 	bl	13e210 <raise>
  143234:	e3a0007f 	mov	r0, #127	; 0x7f
  143238:	ebffffbd 	bl	143134 <_Exit>
  14323c:	0015d0c4 	.word	0x0015d0c4
  143240:	0014d3dc 	.word	0x0014d3dc

00143244 <__expand_heap>:
  143244:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  143248:	e59f2178 	ldr	r2, [pc, #376]	; 1433c8 <__expand_heap+0x184>
  14324c:	e5903000 	ldr	r3, [r0]
  143250:	e24dd01c 	sub	sp, sp, #28
  143254:	e1530002 	cmp	r3, r2
  143258:	8a000051 	bhi	1433a4 <__expand_heap+0x160>
  14325c:	e59f7168 	ldr	r7, [pc, #360]	; 1433cc <__expand_heap+0x188>
  143260:	e59f8168 	ldr	r8, [pc, #360]	; 1433d0 <__expand_heap+0x18c>
  143264:	e5975000 	ldr	r5, [r7]
  143268:	e2634000 	rsb	r4, r3, #0
  14326c:	e3550000 	cmp	r5, #0
  143270:	e0044008 	and	r4, r4, r8
  143274:	e0844003 	add	r4, r4, r3
  143278:	e1a06000 	mov	r6, r0
  14327c:	11e03005 	mvnne	r3, r5
  143280:	0a00003b 	beq	143374 <__expand_heap+0x130>
  143284:	e1540003 	cmp	r4, r3
  143288:	2a00001d 	bcs	143304 <__expand_heap+0xc0>
  14328c:	e59f3140 	ldr	r3, [pc, #320]	; 1433d4 <__expand_heap+0x190>
  143290:	e0848005 	add	r8, r4, r5
  143294:	e5933010 	ldr	r3, [r3, #16]
  143298:	e3530502 	cmp	r3, #8388608	; 0x800000
  14329c:	21a02003 	movcs	r2, r3
  1432a0:	33a02502 	movcc	r2, #8388608	; 0x800000
  1432a4:	e2422502 	sub	r2, r2, #8388608	; 0x800000
  1432a8:	e1580002 	cmp	r8, r2
  1432ac:	81530005 	cmphi	r3, r5
  1432b0:	8a000013 	bhi	143304 <__expand_heap+0xc0>
  1432b4:	e28d3014 	add	r3, sp, #20
  1432b8:	e3530502 	cmp	r3, #8388608	; 0x800000
  1432bc:	21a02003 	movcs	r2, r3
  1432c0:	33a02502 	movcc	r2, #8388608	; 0x800000
  1432c4:	e2422502 	sub	r2, r2, #8388608	; 0x800000
  1432c8:	e1580002 	cmp	r8, r2
  1432cc:	81530005 	cmphi	r3, r5
  1432d0:	8a00000b 	bhi	143304 <__expand_heap+0xc0>
  1432d4:	e3a0002d 	mov	r0, #45	; 0x2d
  1432d8:	ebffe435 	bl	13c3b4 <get_rtt_syscall>
  1432dc:	e2503000 	subs	r3, r0, #0
  1432e0:	0a000036 	beq	1433c0 <__expand_heap+0x17c>
  1432e4:	e1a00008 	mov	r0, r8
  1432e8:	e12fff33 	blx	r3
  1432ec:	e5972000 	ldr	r2, [r7]
  1432f0:	e0823004 	add	r3, r2, r4
  1432f4:	e1530000 	cmp	r3, r0
  1432f8:	05864000 	streq	r4, [r6]
  1432fc:	05870000 	streq	r0, [r7]
  143300:	0a000018 	beq	143368 <__expand_heap+0x124>
  143304:	e3a01a01 	mov	r1, #4096	; 0x1000
  143308:	e59f50c8 	ldr	r5, [pc, #200]	; 1433d8 <__expand_heap+0x194>
  14330c:	e3a08000 	mov	r8, #0
  143310:	e5953000 	ldr	r3, [r5]
  143314:	e3a09000 	mov	r9, #0
  143318:	e1a030a3 	lsr	r3, r3, #1
  14331c:	e1a01311 	lsl	r1, r1, r3
  143320:	e1510004 	cmp	r1, r4
  143324:	21a04001 	movcs	r4, r1
  143328:	e3e03000 	mvn	r3, #0
  14332c:	e3a02003 	mov	r2, #3
  143330:	e58d3000 	str	r3, [sp]
  143334:	e58d8008 	str	r8, [sp, #8]
  143338:	e58d900c 	str	r9, [sp, #12]
  14333c:	e3a03022 	mov	r3, #34	; 0x22
  143340:	e1a01004 	mov	r1, r4
  143344:	e3a00000 	mov	r0, #0
  143348:	ebffea5c 	bl	13dcc0 <__mmap>
  14334c:	e3700001 	cmn	r0, #1
  143350:	e1a02000 	mov	r2, r0
  143354:	03a02000 	moveq	r2, #0
  143358:	15953000 	ldrne	r3, [r5]
  14335c:	15864000 	strne	r4, [r6]
  143360:	12833001 	addne	r3, r3, #1
  143364:	15853000 	strne	r3, [r5]
  143368:	e1a00002 	mov	r0, r2
  14336c:	e28dd01c 	add	sp, sp, #28
  143370:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  143374:	e3a0002d 	mov	r0, #45	; 0x2d
  143378:	ebffe40d 	bl	13c3b4 <get_rtt_syscall>
  14337c:	e2503000 	subs	r3, r0, #0
  143380:	0a00000c 	beq	1433b8 <__expand_heap+0x174>
  143384:	e1a00005 	mov	r0, r5
  143388:	e12fff33 	blx	r3
  14338c:	e2605000 	rsb	r5, r0, #0
  143390:	e0055008 	and	r5, r5, r8
  143394:	e0855000 	add	r5, r5, r0
  143398:	e1e03005 	mvn	r3, r5
  14339c:	e5875000 	str	r5, [r7]
  1433a0:	eaffffb7 	b	143284 <__expand_heap+0x40>
  1433a4:	ebffd6cc 	bl	138edc <__errno_location>
  1433a8:	e3a0300c 	mov	r3, #12
  1433ac:	e3a02000 	mov	r2, #0
  1433b0:	e5803000 	str	r3, [r0]
  1433b4:	eaffffeb 	b	143368 <__expand_heap+0x124>
  1433b8:	e3e03000 	mvn	r3, #0
  1433bc:	eafffff6 	b	14339c <__expand_heap+0x158>
  1433c0:	e1a00003 	mov	r0, r3
  1433c4:	eaffffc8 	b	1432ec <__expand_heap+0xa8>
  1433c8:	7fffefff 	.word	0x7fffefff
  1433cc:	0014f568 	.word	0x0014f568
  1433d0:	00000fff 	.word	0x00000fff
  1433d4:	0015d074 	.word	0x0015d074
  1433d8:	0014f56c 	.word	0x0014f56c

001433dc <frexpl>:
  1433dc:	ea000417 	b	144440 <frexp>

001433e0 <__mprotect>:
  1433e0:	e2811eff 	add	r1, r1, #4080	; 0xff0
  1433e4:	e92d4070 	push	{r4, r5, r6, lr}
  1433e8:	e281100f 	add	r1, r1, #15
  1433ec:	e59f5040 	ldr	r5, [pc, #64]	; 143434 <__mprotect+0x54>
  1433f0:	e0801001 	add	r1, r0, r1
  1433f4:	e0011005 	and	r1, r1, r5
  1433f8:	e0055000 	and	r5, r5, r0
  1433fc:	e3a0007d 	mov	r0, #125	; 0x7d
  143400:	e1a06002 	mov	r6, r2
  143404:	e0414005 	sub	r4, r1, r5
  143408:	ebffe3e9 	bl	13c3b4 <get_rtt_syscall>
  14340c:	e2503000 	subs	r3, r0, #0
  143410:	0a000005 	beq	14342c <__mprotect+0x4c>
  143414:	e1a02006 	mov	r2, r6
  143418:	e1a01004 	mov	r1, r4
  14341c:	e1a00005 	mov	r0, r5
  143420:	e12fff33 	blx	r3
  143424:	e8bd4070 	pop	{r4, r5, r6, lr}
  143428:	eaffe416 	b	13c488 <__syscall_ret>
  14342c:	e1a00003 	mov	r0, r3
  143430:	eafffffb 	b	143424 <__mprotect+0x44>
  143434:	fffff000 	.word	0xfffff000

00143438 <wctomb>:
  143438:	e3500000 	cmp	r0, #0
  14343c:	012fff1e 	bxeq	lr
  143440:	e3a02000 	mov	r2, #0
  143444:	ea00042a 	b	1444f4 <wcrtomb>

00143448 <__block_all_sigs>:
  143448:	e92d4010 	push	{r4, lr}
  14344c:	e1a04000 	mov	r4, r0
  143450:	e3a000af 	mov	r0, #175	; 0xaf
  143454:	ebffe3d6 	bl	13c3b4 <get_rtt_syscall>
  143458:	e250e000 	subs	lr, r0, #0
  14345c:	08bd8010 	popeq	{r4, pc}
  143460:	e1a02004 	mov	r2, r4
  143464:	e1a0c00e 	mov	ip, lr
  143468:	e8bd4010 	pop	{r4, lr}
  14346c:	e3a03008 	mov	r3, #8
  143470:	e59f1004 	ldr	r1, [pc, #4]	; 14347c <__block_all_sigs+0x34>
  143474:	e3a00000 	mov	r0, #0
  143478:	e12fff1c 	bx	ip
  14347c:	0014cfac 	.word	0x0014cfac

00143480 <__block_app_sigs>:
  143480:	e92d4010 	push	{r4, lr}
  143484:	e1a04000 	mov	r4, r0
  143488:	e3a000af 	mov	r0, #175	; 0xaf
  14348c:	ebffe3c8 	bl	13c3b4 <get_rtt_syscall>
  143490:	e250e000 	subs	lr, r0, #0
  143494:	08bd8010 	popeq	{r4, pc}
  143498:	e1a02004 	mov	r2, r4
  14349c:	e1a0c00e 	mov	ip, lr
  1434a0:	e8bd4010 	pop	{r4, lr}
  1434a4:	e3a03008 	mov	r3, #8
  1434a8:	e59f1004 	ldr	r1, [pc, #4]	; 1434b4 <__block_app_sigs+0x34>
  1434ac:	e3a00000 	mov	r0, #0
  1434b0:	e12fff1c 	bx	ip
  1434b4:	0014cfb4 	.word	0x0014cfb4

001434b8 <__restore_sigs>:
  1434b8:	e92d4010 	push	{r4, lr}
  1434bc:	e1a04000 	mov	r4, r0
  1434c0:	e3a000af 	mov	r0, #175	; 0xaf
  1434c4:	ebffe3ba 	bl	13c3b4 <get_rtt_syscall>
  1434c8:	e250e000 	subs	lr, r0, #0
  1434cc:	08bd8010 	popeq	{r4, pc}
  1434d0:	e1a01004 	mov	r1, r4
  1434d4:	e1a0c00e 	mov	ip, lr
  1434d8:	e8bd4010 	pop	{r4, lr}
  1434dc:	e3a03008 	mov	r3, #8
  1434e0:	e3a02000 	mov	r2, #0
  1434e4:	e3a00002 	mov	r0, #2
  1434e8:	e12fff1c 	bx	ip

001434ec <__lockfile>:
  1434ec:	e59f2124 	ldr	r2, [pc, #292]	; 143618 <__lockfile+0x12c>
  1434f0:	e590304c 	ldr	r3, [r0, #76]	; 0x4c
  1434f4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  1434f8:	e1a06000 	mov	r6, r0
  1434fc:	e5920000 	ldr	r0, [r2]
  143500:	e12fff30 	blx	r0
  143504:	e510805c 	ldr	r8, [r0, #-92]	; 0xffffffa4
  143508:	e3c33101 	bic	r3, r3, #1073741824	; 0x40000000
  14350c:	e1530008 	cmp	r3, r8
  143510:	0a00003e 	beq	143610 <__lockfile+0x124>
  143514:	e59f7100 	ldr	r7, [pc, #256]	; 14361c <__lockfile+0x130>
  143518:	e286504c 	add	r5, r6, #76	; 0x4c
  14351c:	ea000002 	b	14352c <__lockfile+0x40>
  143520:	e596304c 	ldr	r3, [r6, #76]	; 0x4c
  143524:	e3530000 	cmp	r3, #0
  143528:	1a000008 	bne	143550 <__lockfile+0x64>
  14352c:	e3a00000 	mov	r0, #0
  143530:	e1a01008 	mov	r1, r8
  143534:	e1a02005 	mov	r2, r5
  143538:	e5973000 	ldr	r3, [r7]
  14353c:	e12fff33 	blx	r3
  143540:	e3500000 	cmp	r0, #0
  143544:	1afffff5 	bne	143520 <__lockfile+0x34>
  143548:	e3a00001 	mov	r0, #1
  14354c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  143550:	e3888101 	orr	r8, r8, #1073741824	; 0x40000000
  143554:	ea000002 	b	143564 <__lockfile+0x78>
  143558:	e596404c 	ldr	r4, [r6, #76]	; 0x4c
  14355c:	e3540000 	cmp	r4, #0
  143560:	1a000007 	bne	143584 <__lockfile+0x98>
  143564:	e3a00000 	mov	r0, #0
  143568:	e1a01008 	mov	r1, r8
  14356c:	e1a02005 	mov	r2, r5
  143570:	e5973000 	ldr	r3, [r7]
  143574:	e12fff33 	blx	r3
  143578:	e3500000 	cmp	r0, #0
  14357c:	1afffff5 	bne	143558 <__lockfile+0x6c>
  143580:	eafffff0 	b	143548 <__lockfile+0x5c>
  143584:	e3140101 	tst	r4, #1073741824	; 0x40000000
  143588:	e3849101 	orr	r9, r4, #1073741824	; 0x40000000
  14358c:	0a000017 	beq	1435f0 <__lockfile+0x104>
  143590:	e3a000f0 	mov	r0, #240	; 0xf0
  143594:	ebffe386 	bl	13c3b4 <get_rtt_syscall>
  143598:	e2504000 	subs	r4, r0, #0
  14359c:	0afffff0 	beq	143564 <__lockfile+0x78>
  1435a0:	e3a03000 	mov	r3, #0
  1435a4:	e1a02009 	mov	r2, r9
  1435a8:	e3a01080 	mov	r1, #128	; 0x80
  1435ac:	e1a00005 	mov	r0, r5
  1435b0:	e12fff34 	blx	r4
  1435b4:	e3700026 	cmn	r0, #38	; 0x26
  1435b8:	1affffe9 	bne	143564 <__lockfile+0x78>
  1435bc:	e3a000f0 	mov	r0, #240	; 0xf0
  1435c0:	ebffe37b 	bl	13c3b4 <get_rtt_syscall>
  1435c4:	e2504000 	subs	r4, r0, #0
  1435c8:	0affffe5 	beq	143564 <__lockfile+0x78>
  1435cc:	e3a03000 	mov	r3, #0
  1435d0:	e1a02009 	mov	r2, r9
  1435d4:	e1a01003 	mov	r1, r3
  1435d8:	e1a00005 	mov	r0, r5
  1435dc:	e12fff34 	blx	r4
  1435e0:	eaffffdf 	b	143564 <__lockfile+0x78>
  1435e4:	e596304c 	ldr	r3, [r6, #76]	; 0x4c
  1435e8:	e1530004 	cmp	r3, r4
  1435ec:	1affffdc 	bne	143564 <__lockfile+0x78>
  1435f0:	e1a00004 	mov	r0, r4
  1435f4:	e1a01009 	mov	r1, r9
  1435f8:	e1a02005 	mov	r2, r5
  1435fc:	e5973000 	ldr	r3, [r7]
  143600:	e12fff33 	blx	r3
  143604:	e3500000 	cmp	r0, #0
  143608:	1afffff5 	bne	1435e4 <__lockfile+0xf8>
  14360c:	eaffffdf 	b	143590 <__lockfile+0xa4>
  143610:	e3a00000 	mov	r0, #0
  143614:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  143618:	0014d3dc 	.word	0x0014d3dc
  14361c:	0014d3d8 	.word	0x0014d3d8

00143620 <__unlockfile>:
  143620:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  143624:	e1a05000 	mov	r5, r0
  143628:	e59f7084 	ldr	r7, [pc, #132]	; 1436b4 <__unlockfile+0x94>
  14362c:	e280604c 	add	r6, r0, #76	; 0x4c
  143630:	e595404c 	ldr	r4, [r5, #76]	; 0x4c
  143634:	ea000002 	b	143644 <__unlockfile+0x24>
  143638:	e595304c 	ldr	r3, [r5, #76]	; 0x4c
  14363c:	e1540003 	cmp	r4, r3
  143640:	1afffffa 	bne	143630 <__unlockfile+0x10>
  143644:	e1a00004 	mov	r0, r4
  143648:	e3a01000 	mov	r1, #0
  14364c:	e1a02006 	mov	r2, r6
  143650:	e5973000 	ldr	r3, [r7]
  143654:	e12fff33 	blx	r3
  143658:	e1500001 	cmp	r0, r1
  14365c:	1afffff5 	bne	143638 <__unlockfile+0x18>
  143660:	e3140101 	tst	r4, #1073741824	; 0x40000000
  143664:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  143668:	e3a000f0 	mov	r0, #240	; 0xf0
  14366c:	ebffe350 	bl	13c3b4 <get_rtt_syscall>
  143670:	e2503000 	subs	r3, r0, #0
  143674:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  143678:	e3a02001 	mov	r2, #1
  14367c:	e3a01081 	mov	r1, #129	; 0x81
  143680:	e1a00006 	mov	r0, r6
  143684:	e12fff33 	blx	r3
  143688:	e3700026 	cmn	r0, #38	; 0x26
  14368c:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
  143690:	e3a000f0 	mov	r0, #240	; 0xf0
  143694:	ebffe346 	bl	13c3b4 <get_rtt_syscall>
  143698:	e2503000 	subs	r3, r0, #0
  14369c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  1436a0:	e3a02001 	mov	r2, #1
  1436a4:	e1a00006 	mov	r0, r6
  1436a8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
  1436ac:	e1a01002 	mov	r1, r2
  1436b0:	e12fff13 	bx	r3
  1436b4:	0014d3d8 	.word	0x0014d3d8

001436b8 <__overflow>:
  1436b8:	e92d4010 	push	{r4, lr}
  1436bc:	e5903010 	ldr	r3, [r0, #16]
  1436c0:	e24dd008 	sub	sp, sp, #8
  1436c4:	e3530000 	cmp	r3, #0
  1436c8:	e1a04000 	mov	r4, r0
  1436cc:	e5cd1007 	strb	r1, [sp, #7]
  1436d0:	0a000015 	beq	14372c <__overflow+0x74>
  1436d4:	e5942014 	ldr	r2, [r4, #20]
  1436d8:	e1520003 	cmp	r2, r3
  1436dc:	1a000009 	bne	143708 <__overflow+0x50>
  1436e0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
  1436e4:	e1a00004 	mov	r0, r4
  1436e8:	e3a02001 	mov	r2, #1
  1436ec:	e28d1007 	add	r1, sp, #7
  1436f0:	e12fff33 	blx	r3
  1436f4:	e3500001 	cmp	r0, #1
  1436f8:	1a00000f 	bne	14373c <__overflow+0x84>
  1436fc:	e5dd0007 	ldrb	r0, [sp, #7]
  143700:	e28dd008 	add	sp, sp, #8
  143704:	e8bd8010 	pop	{r4, pc}
  143708:	e5dd0007 	ldrb	r0, [sp, #7]
  14370c:	e5943050 	ldr	r3, [r4, #80]	; 0x50
  143710:	e1500003 	cmp	r0, r3
  143714:	0afffff1 	beq	1436e0 <__overflow+0x28>
  143718:	e2823001 	add	r3, r2, #1
  14371c:	e5843014 	str	r3, [r4, #20]
  143720:	e5c20000 	strb	r0, [r2]
  143724:	e28dd008 	add	sp, sp, #8
  143728:	e8bd8010 	pop	{r4, pc}
  14372c:	eb00008c 	bl	143964 <__towrite>
  143730:	e3500000 	cmp	r0, #0
  143734:	05943010 	ldreq	r3, [r4, #16]
  143738:	0affffe5 	beq	1436d4 <__overflow+0x1c>
  14373c:	e3e00000 	mvn	r0, #0
  143740:	eaffffee 	b	143700 <__overflow+0x48>

00143744 <dummy>:
  143744:	e12fff1e 	bx	lr

00143748 <__stdio_close>:
  143748:	e92d4010 	push	{r4, lr}
  14374c:	e590003c 	ldr	r0, [r0, #60]	; 0x3c
  143750:	ebfffd87 	bl	142d74 <__aio_close>
  143754:	e1a04000 	mov	r4, r0
  143758:	e3a00006 	mov	r0, #6
  14375c:	ebffe314 	bl	13c3b4 <get_rtt_syscall>
  143760:	e2503000 	subs	r3, r0, #0
  143764:	0a000003 	beq	143778 <__stdio_close+0x30>
  143768:	e1a00004 	mov	r0, r4
  14376c:	e12fff33 	blx	r3
  143770:	e8bd4010 	pop	{r4, lr}
  143774:	eaffe343 	b	13c488 <__syscall_ret>
  143778:	e1a00003 	mov	r0, r3
  14377c:	eafffffb 	b	143770 <__stdio_close+0x28>

00143780 <__stdio_seek>:
  143780:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  143784:	e590503c 	ldr	r5, [r0, #60]	; 0x3c
  143788:	e24dd014 	sub	sp, sp, #20
  14378c:	e3a0008c 	mov	r0, #140	; 0x8c
  143790:	e1a07002 	mov	r7, r2
  143794:	e1a06003 	mov	r6, r3
  143798:	ebffe305 	bl	13c3b4 <get_rtt_syscall>
  14379c:	e2504000 	subs	r4, r0, #0
  1437a0:	0a00000e 	beq	1437e0 <__stdio_seek+0x60>
  1437a4:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
  1437a8:	e1a02007 	mov	r2, r7
  1437ac:	e58d3000 	str	r3, [sp]
  1437b0:	e1a01006 	mov	r1, r6
  1437b4:	e28d3008 	add	r3, sp, #8
  1437b8:	e1a00005 	mov	r0, r5
  1437bc:	e12fff34 	blx	r4
  1437c0:	ebffe330 	bl	13c488 <__syscall_ret>
  1437c4:	e3500000 	cmp	r0, #0
  1437c8:	b3e00000 	mvnlt	r0, #0
  1437cc:	b3e01000 	mvnlt	r1, #0
  1437d0:	a28d1008 	addge	r1, sp, #8
  1437d4:	a8910003 	ldmge	r1, {r0, r1}
  1437d8:	e28dd014 	add	sp, sp, #20
  1437dc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  1437e0:	e1a00004 	mov	r0, r4
  1437e4:	eafffff5 	b	1437c0 <__stdio_seek+0x40>

001437e8 <__stdio_write>:
  1437e8:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  1437ec:	e590301c 	ldr	r3, [r0, #28]
  1437f0:	e5905014 	ldr	r5, [r0, #20]
  1437f4:	e24dd014 	sub	sp, sp, #20
  1437f8:	e0455003 	sub	r5, r5, r3
  1437fc:	e88d0028 	stm	sp, {r3, r5}
  143800:	e1a06000 	mov	r6, r0
  143804:	e1a08002 	mov	r8, r2
  143808:	e3a07002 	mov	r7, #2
  14380c:	e58d200c 	str	r2, [sp, #12]
  143810:	e58d1008 	str	r1, [sp, #8]
  143814:	e0855002 	add	r5, r5, r2
  143818:	e1a0400d 	mov	r4, sp
  14381c:	ea00000d 	b	143858 <__stdio_write+0x70>
  143820:	e3500000 	cmp	r0, #0
  143824:	ba000020 	blt	1438ac <__stdio_write+0xc4>
  143828:	e5943004 	ldr	r3, [r4, #4]
  14382c:	e0455000 	sub	r5, r5, r0
  143830:	e1500003 	cmp	r0, r3
  143834:	80400003 	subhi	r0, r0, r3
  143838:	8594300c 	ldrhi	r3, [r4, #12]
  14383c:	82844008 	addhi	r4, r4, #8
  143840:	e5942000 	ldr	r2, [r4]
  143844:	e0433000 	sub	r3, r3, r0
  143848:	e0820000 	add	r0, r2, r0
  14384c:	82477001 	subhi	r7, r7, #1
  143850:	e5843004 	str	r3, [r4, #4]
  143854:	e5840000 	str	r0, [r4]
  143858:	e3a00092 	mov	r0, #146	; 0x92
  14385c:	e596903c 	ldr	r9, [r6, #60]	; 0x3c
  143860:	ebffe2d3 	bl	13c3b4 <get_rtt_syscall>
  143864:	e2503000 	subs	r3, r0, #0
  143868:	0a00001c 	beq	1438e0 <__stdio_write+0xf8>
  14386c:	e1a00009 	mov	r0, r9
  143870:	e1a02007 	mov	r2, r7
  143874:	e1a01004 	mov	r1, r4
  143878:	e12fff33 	blx	r3
  14387c:	ebffe301 	bl	13c488 <__syscall_ret>
  143880:	e1500005 	cmp	r0, r5
  143884:	1affffe5 	bne	143820 <__stdio_write+0x38>
  143888:	e1a00008 	mov	r0, r8
  14388c:	e596202c 	ldr	r2, [r6, #44]	; 0x2c
  143890:	e5963030 	ldr	r3, [r6, #48]	; 0x30
  143894:	e586201c 	str	r2, [r6, #28]
  143898:	e0823003 	add	r3, r2, r3
  14389c:	e5862014 	str	r2, [r6, #20]
  1438a0:	e5863010 	str	r3, [r6, #16]
  1438a4:	e28dd014 	add	sp, sp, #20
  1438a8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  1438ac:	e3a00000 	mov	r0, #0
  1438b0:	e5963000 	ldr	r3, [r6]
  1438b4:	e3570002 	cmp	r7, #2
  1438b8:	e3833020 	orr	r3, r3, #32
  1438bc:	e5863000 	str	r3, [r6]
  1438c0:	e5860010 	str	r0, [r6, #16]
  1438c4:	e586001c 	str	r0, [r6, #28]
  1438c8:	e5860014 	str	r0, [r6, #20]
  1438cc:	0afffff4 	beq	1438a4 <__stdio_write+0xbc>
  1438d0:	e5940004 	ldr	r0, [r4, #4]
  1438d4:	e0480000 	sub	r0, r8, r0
  1438d8:	e28dd014 	add	sp, sp, #20
  1438dc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  1438e0:	e1a00003 	mov	r0, r3
  1438e4:	eaffffe4 	b	14387c <__stdio_write+0x94>

001438e8 <__stdout_write>:
  1438e8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  1438ec:	e1a04000 	mov	r4, r0
  1438f0:	e5900000 	ldr	r0, [r0]
  1438f4:	e59f3060 	ldr	r3, [pc, #96]	; 14395c <__stdout_write+0x74>
  1438f8:	e3100040 	tst	r0, #64	; 0x40
  1438fc:	e24dd00c 	sub	sp, sp, #12
  143900:	e1a05001 	mov	r5, r1
  143904:	e1a06002 	mov	r6, r2
  143908:	e5843024 	str	r3, [r4, #36]	; 0x24
  14390c:	0a000005 	beq	143928 <__stdout_write+0x40>
  143910:	e1a02006 	mov	r2, r6
  143914:	e1a01005 	mov	r1, r5
  143918:	e1a00004 	mov	r0, r4
  14391c:	ebffffb1 	bl	1437e8 <__stdio_write>
  143920:	e28dd00c 	add	sp, sp, #12
  143924:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  143928:	e3a00036 	mov	r0, #54	; 0x36
  14392c:	e594703c 	ldr	r7, [r4, #60]	; 0x3c
  143930:	ebffe29f 	bl	13c3b4 <get_rtt_syscall>
  143934:	e2503000 	subs	r3, r0, #0
  143938:	0afffff4 	beq	143910 <__stdout_write+0x28>
  14393c:	e1a0200d 	mov	r2, sp
  143940:	e1a00007 	mov	r0, r7
  143944:	e59f1014 	ldr	r1, [pc, #20]	; 143960 <__stdout_write+0x78>
  143948:	e12fff33 	blx	r3
  14394c:	e3500000 	cmp	r0, #0
  143950:	13e03000 	mvnne	r3, #0
  143954:	15843050 	strne	r3, [r4, #80]	; 0x50
  143958:	eaffffec 	b	143910 <__stdout_write+0x28>
  14395c:	001437e8 	.word	0x001437e8
  143960:	00005413 	.word	0x00005413

00143964 <__towrite>:
  143964:	e1a03000 	mov	r3, r0
  143968:	e5901048 	ldr	r1, [r0, #72]	; 0x48
  14396c:	e5900000 	ldr	r0, [r0]
  143970:	e2412001 	sub	r2, r1, #1
  143974:	e1822001 	orr	r2, r2, r1
  143978:	e2101008 	ands	r1, r0, #8
  14397c:	e5832048 	str	r2, [r3, #72]	; 0x48
  143980:	1a000009 	bne	1439ac <__towrite+0x48>
  143984:	e593c02c 	ldr	ip, [r3, #44]	; 0x2c
  143988:	e5932030 	ldr	r2, [r3, #48]	; 0x30
  14398c:	e1a00001 	mov	r0, r1
  143990:	e08c2002 	add	r2, ip, r2
  143994:	e5831008 	str	r1, [r3, #8]
  143998:	e5831004 	str	r1, [r3, #4]
  14399c:	e583c01c 	str	ip, [r3, #28]
  1439a0:	e583c014 	str	ip, [r3, #20]
  1439a4:	e5832010 	str	r2, [r3, #16]
  1439a8:	e12fff1e 	bx	lr
  1439ac:	e3800020 	orr	r0, r0, #32
  1439b0:	e5830000 	str	r0, [r3]
  1439b4:	e3e00000 	mvn	r0, #0
  1439b8:	e12fff1e 	bx	lr

001439bc <__towrite_needs_stdio_exit>:
  1439bc:	ea000336 	b	14469c <__stdio_exit>

001439c0 <locking_putc>:
  1439c0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  1439c4:	e1a05001 	mov	r5, r1
  1439c8:	e1a04000 	mov	r4, r0
  1439cc:	e59f7110 	ldr	r7, [pc, #272]	; 143ae4 <locking_putc+0x124>
  1439d0:	e281604c 	add	r6, r1, #76	; 0x4c
  1439d4:	ea000002 	b	1439e4 <locking_putc+0x24>
  1439d8:	e595304c 	ldr	r3, [r5, #76]	; 0x4c
  1439dc:	e3530000 	cmp	r3, #0
  1439e0:	1a000021 	bne	143a6c <locking_putc+0xac>
  1439e4:	e3a00000 	mov	r0, #0
  1439e8:	e3e01103 	mvn	r1, #-1073741824	; 0xc0000000
  1439ec:	e1a02006 	mov	r2, r6
  1439f0:	e5973000 	ldr	r3, [r7]
  1439f4:	e12fff33 	blx	r3
  1439f8:	e3500000 	cmp	r0, #0
  1439fc:	1afffff5 	bne	1439d8 <locking_putc+0x18>
  143a00:	e5953050 	ldr	r3, [r5, #80]	; 0x50
  143a04:	e20480ff 	and	r8, r4, #255	; 0xff
  143a08:	e1530008 	cmp	r3, r8
  143a0c:	0a00001c 	beq	143a84 <locking_putc+0xc4>
  143a10:	e5953014 	ldr	r3, [r5, #20]
  143a14:	e5952010 	ldr	r2, [r5, #16]
  143a18:	e1530002 	cmp	r3, r2
  143a1c:	0a000018 	beq	143a84 <locking_putc+0xc4>
  143a20:	e2832001 	add	r2, r3, #1
  143a24:	e5852014 	str	r2, [r5, #20]
  143a28:	e5c34000 	strb	r4, [r3]
  143a2c:	e595404c 	ldr	r4, [r5, #76]	; 0x4c
  143a30:	ea000002 	b	143a40 <locking_putc+0x80>
  143a34:	e595304c 	ldr	r3, [r5, #76]	; 0x4c
  143a38:	e1540003 	cmp	r4, r3
  143a3c:	1afffffa 	bne	143a2c <locking_putc+0x6c>
  143a40:	e1a00004 	mov	r0, r4
  143a44:	e3a01000 	mov	r1, #0
  143a48:	e1a02006 	mov	r2, r6
  143a4c:	e5973000 	ldr	r3, [r7]
  143a50:	e12fff33 	blx	r3
  143a54:	e1500001 	cmp	r0, r1
  143a58:	1afffff5 	bne	143a34 <locking_putc+0x74>
  143a5c:	e3140101 	tst	r4, #1073741824	; 0x40000000
  143a60:	1a00000c 	bne	143a98 <locking_putc+0xd8>
  143a64:	e1a00008 	mov	r0, r8
  143a68:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  143a6c:	e1a00005 	mov	r0, r5
  143a70:	ebfffe9d 	bl	1434ec <__lockfile>
  143a74:	e5953050 	ldr	r3, [r5, #80]	; 0x50
  143a78:	e20480ff 	and	r8, r4, #255	; 0xff
  143a7c:	e1530008 	cmp	r3, r8
  143a80:	1affffe2 	bne	143a10 <locking_putc+0x50>
  143a84:	e1a01008 	mov	r1, r8
  143a88:	e1a00005 	mov	r0, r5
  143a8c:	ebffff09 	bl	1436b8 <__overflow>
  143a90:	e1a08000 	mov	r8, r0
  143a94:	eaffffe4 	b	143a2c <locking_putc+0x6c>
  143a98:	e3a000f0 	mov	r0, #240	; 0xf0
  143a9c:	ebffe244 	bl	13c3b4 <get_rtt_syscall>
  143aa0:	e2503000 	subs	r3, r0, #0
  143aa4:	0affffee 	beq	143a64 <locking_putc+0xa4>
  143aa8:	e3a02001 	mov	r2, #1
  143aac:	e3a01081 	mov	r1, #129	; 0x81
  143ab0:	e1a00006 	mov	r0, r6
  143ab4:	e12fff33 	blx	r3
  143ab8:	e3700026 	cmn	r0, #38	; 0x26
  143abc:	1affffe8 	bne	143a64 <locking_putc+0xa4>
  143ac0:	e3a000f0 	mov	r0, #240	; 0xf0
  143ac4:	ebffe23a 	bl	13c3b4 <get_rtt_syscall>
  143ac8:	e2503000 	subs	r3, r0, #0
  143acc:	0affffe4 	beq	143a64 <locking_putc+0xa4>
  143ad0:	e3a02001 	mov	r2, #1
  143ad4:	e1a00006 	mov	r0, r6
  143ad8:	e1a01002 	mov	r1, r2
  143adc:	e12fff33 	blx	r3
  143ae0:	eaffffdf 	b	143a64 <locking_putc+0xa4>
  143ae4:	0014d3d8 	.word	0x0014d3d8

00143ae8 <fputc>:
  143ae8:	e591204c 	ldr	r2, [r1, #76]	; 0x4c
  143aec:	e1a03001 	mov	r3, r1
  143af0:	e3520000 	cmp	r2, #0
  143af4:	e1a0c000 	mov	ip, r0
  143af8:	ba00001d 	blt	143b74 <fputc+0x8c>
  143afc:	0a000017 	beq	143b60 <fputc+0x78>
  143b00:	e59f10a8 	ldr	r1, [pc, #168]	; 143bb0 <fputc+0xc8>
  143b04:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  143b08:	e5910000 	ldr	r0, [r1]
  143b0c:	e12fff30 	blx	r0
  143b10:	e510105c 	ldr	r1, [r0, #-92]	; 0xffffffa4
  143b14:	e3c22101 	bic	r2, r2, #1073741824	; 0x40000000
  143b18:	e1520001 	cmp	r2, r1
  143b1c:	0a000003 	beq	143b30 <fputc+0x48>
  143b20:	e1a01003 	mov	r1, r3
  143b24:	e1a0000c 	mov	r0, ip
  143b28:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  143b2c:	eaffffa3 	b	1439c0 <locking_putc>
  143b30:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  143b34:	e20c00ff 	and	r0, ip, #255	; 0xff
  143b38:	e1500002 	cmp	r0, r2
  143b3c:	0a000008 	beq	143b64 <fputc+0x7c>
  143b40:	e5932014 	ldr	r2, [r3, #20]
  143b44:	e5931010 	ldr	r1, [r3, #16]
  143b48:	e1520001 	cmp	r2, r1
  143b4c:	0a000004 	beq	143b64 <fputc+0x7c>
  143b50:	e2821001 	add	r1, r2, #1
  143b54:	e5831014 	str	r1, [r3, #20]
  143b58:	e5c2c000 	strb	ip, [r2]
  143b5c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
  143b60:	eaffff96 	b	1439c0 <locking_putc>
  143b64:	e1a01000 	mov	r1, r0
  143b68:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  143b6c:	e1a00003 	mov	r0, r3
  143b70:	eafffed0 	b	1436b8 <__overflow>
  143b74:	e5912050 	ldr	r2, [r1, #80]	; 0x50
  143b78:	e20000ff 	and	r0, r0, #255	; 0xff
  143b7c:	e1500002 	cmp	r0, r2
  143b80:	0a000007 	beq	143ba4 <fputc+0xbc>
  143b84:	e5912014 	ldr	r2, [r1, #20]
  143b88:	e5911010 	ldr	r1, [r1, #16]
  143b8c:	e1520001 	cmp	r2, r1
  143b90:	0a000003 	beq	143ba4 <fputc+0xbc>
  143b94:	e2821001 	add	r1, r2, #1
  143b98:	e5831014 	str	r1, [r3, #20]
  143b9c:	e5c2c000 	strb	ip, [r2]
  143ba0:	e12fff1e 	bx	lr
  143ba4:	e1a01000 	mov	r1, r0
  143ba8:	e1a00003 	mov	r0, r3
  143bac:	eafffec1 	b	1436b8 <__overflow>
  143bb0:	0014d3dc 	.word	0x0014d3dc

00143bb4 <fputs>:
  143bb4:	e92d4070 	push	{r4, r5, r6, lr}
  143bb8:	e1a06001 	mov	r6, r1
  143bbc:	e1a05000 	mov	r5, r0
  143bc0:	ebfff63c 	bl	1414b8 <strlen>
  143bc4:	e1a03006 	mov	r3, r6
  143bc8:	e1a04000 	mov	r4, r0
  143bcc:	e1a02000 	mov	r2, r0
  143bd0:	e3a01001 	mov	r1, #1
  143bd4:	e1a00005 	mov	r0, r5
  143bd8:	eb000041 	bl	143ce4 <fwrite>
  143bdc:	e0500004 	subs	r0, r0, r4
  143be0:	13e00000 	mvnne	r0, #0
  143be4:	e8bd8070 	pop	{r4, r5, r6, pc}

00143be8 <__fwritex>:
  143be8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  143bec:	e5924010 	ldr	r4, [r2, #16]
  143bf0:	e1a05002 	mov	r5, r2
  143bf4:	e3540000 	cmp	r4, #0
  143bf8:	e1a06000 	mov	r6, r0
  143bfc:	e1a07001 	mov	r7, r1
  143c00:	0a000009 	beq	143c2c <__fwritex+0x44>
  143c04:	e5950014 	ldr	r0, [r5, #20]
  143c08:	e0444000 	sub	r4, r4, r0
  143c0c:	e1540007 	cmp	r4, r7
  143c10:	2a00000b 	bcs	143c44 <__fwritex+0x5c>
  143c14:	e1a02007 	mov	r2, r7
  143c18:	e1a01006 	mov	r1, r6
  143c1c:	e5953024 	ldr	r3, [r5, #36]	; 0x24
  143c20:	e1a00005 	mov	r0, r5
  143c24:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
  143c28:	e12fff13 	bx	r3
  143c2c:	e1a00002 	mov	r0, r2
  143c30:	ebffff4b 	bl	143964 <__towrite>
  143c34:	e3500000 	cmp	r0, #0
  143c38:	1a000027 	bne	143cdc <__fwritex+0xf4>
  143c3c:	e5954010 	ldr	r4, [r5, #16]
  143c40:	eaffffef 	b	143c04 <__fwritex+0x1c>
  143c44:	e5953050 	ldr	r3, [r5, #80]	; 0x50
  143c48:	e3530000 	cmp	r3, #0
  143c4c:	ba00000d 	blt	143c88 <__fwritex+0xa0>
  143c50:	e3570000 	cmp	r7, #0
  143c54:	0a00000b 	beq	143c88 <__fwritex+0xa0>
  143c58:	e2473001 	sub	r3, r7, #1
  143c5c:	e7d62003 	ldrb	r2, [r6, r3]
  143c60:	e0863003 	add	r3, r6, r3
  143c64:	e352000a 	cmp	r2, #10
  143c68:	1a000003 	bne	143c7c <__fwritex+0x94>
  143c6c:	ea00000e 	b	143cac <__fwritex+0xc4>
  143c70:	e5732001 	ldrb	r2, [r3, #-1]!
  143c74:	e352000a 	cmp	r2, #10
  143c78:	0a00000c 	beq	143cb0 <__fwritex+0xc8>
  143c7c:	e1530006 	cmp	r3, r6
  143c80:	e0434006 	sub	r4, r3, r6
  143c84:	1afffff9 	bne	143c70 <__fwritex+0x88>
  143c88:	e1a04007 	mov	r4, r7
  143c8c:	e1a02004 	mov	r2, r4
  143c90:	e1a01006 	mov	r1, r6
  143c94:	ebfff43e 	bl	140d94 <memcpy>
  143c98:	e5953014 	ldr	r3, [r5, #20]
  143c9c:	e1a00007 	mov	r0, r7
  143ca0:	e0834004 	add	r4, r3, r4
  143ca4:	e5854014 	str	r4, [r5, #20]
  143ca8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  143cac:	e1a04007 	mov	r4, r7
  143cb0:	e5953024 	ldr	r3, [r5, #36]	; 0x24
  143cb4:	e1a02004 	mov	r2, r4
  143cb8:	e1a01006 	mov	r1, r6
  143cbc:	e1a00005 	mov	r0, r5
  143cc0:	e12fff33 	blx	r3
  143cc4:	e1500004 	cmp	r0, r4
  143cc8:	38bd81f0 	popcc	{r4, r5, r6, r7, r8, pc}
  143ccc:	e0866004 	add	r6, r6, r4
  143cd0:	e5950014 	ldr	r0, [r5, #20]
  143cd4:	e0474004 	sub	r4, r7, r4
  143cd8:	eaffffeb 	b	143c8c <__fwritex+0xa4>
  143cdc:	e1a00004 	mov	r0, r4
  143ce0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00143ce4 <fwrite>:
  143ce4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  143ce8:	e1a05003 	mov	r5, r3
  143cec:	e593304c 	ldr	r3, [r3, #76]	; 0x4c
  143cf0:	e3510000 	cmp	r1, #0
  143cf4:	e1a04002 	mov	r4, r2
  143cf8:	11a04002 	movne	r4, r2
  143cfc:	03a04000 	moveq	r4, #0
  143d00:	e3530000 	cmp	r3, #0
  143d04:	e1a06001 	mov	r6, r1
  143d08:	e0070192 	mul	r7, r2, r1
  143d0c:	aa000009 	bge	143d38 <fwrite+0x54>
  143d10:	e1a02005 	mov	r2, r5
  143d14:	e1a01007 	mov	r1, r7
  143d18:	ebffffb2 	bl	143be8 <__fwritex>
  143d1c:	e1a08000 	mov	r8, r0
  143d20:	e1570008 	cmp	r7, r8
  143d24:	0a000012 	beq	143d74 <fwrite+0x90>
  143d28:	e1a01006 	mov	r1, r6
  143d2c:	e1a00008 	mov	r0, r8
  143d30:	ebffd2d0 	bl	138878 <__udivsi3>
  143d34:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  143d38:	e1a08000 	mov	r8, r0
  143d3c:	e1a00005 	mov	r0, r5
  143d40:	ebfffde9 	bl	1434ec <__lockfile>
  143d44:	e1a02005 	mov	r2, r5
  143d48:	e1a09000 	mov	r9, r0
  143d4c:	e1a01007 	mov	r1, r7
  143d50:	e1a00008 	mov	r0, r8
  143d54:	ebffffa3 	bl	143be8 <__fwritex>
  143d58:	e3590000 	cmp	r9, #0
  143d5c:	e1a08000 	mov	r8, r0
  143d60:	0affffee 	beq	143d20 <fwrite+0x3c>
  143d64:	e1a00005 	mov	r0, r5
  143d68:	ebfffe2c 	bl	143620 <__unlockfile>
  143d6c:	e1570008 	cmp	r7, r8
  143d70:	1affffec 	bne	143d28 <fwrite+0x44>
  143d74:	e1a00004 	mov	r0, r4
  143d78:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00143d7c <memchr>:
  143d7c:	e3100003 	tst	r0, #3
  143d80:	e20110ff 	and	r1, r1, #255	; 0xff
  143d84:	0a000010 	beq	143dcc <memchr+0x50>
  143d88:	e3520000 	cmp	r2, #0
  143d8c:	0a000031 	beq	143e58 <memchr+0xdc>
  143d90:	e5d03000 	ldrb	r3, [r0]
  143d94:	e1530001 	cmp	r3, r1
  143d98:	0a00003e 	beq	143e98 <memchr+0x11c>
  143d9c:	e2803001 	add	r3, r0, #1
  143da0:	ea000005 	b	143dbc <memchr+0x40>
  143da4:	e3520000 	cmp	r2, #0
  143da8:	0a00002a 	beq	143e58 <memchr+0xdc>
  143dac:	e5d3c000 	ldrb	ip, [r3]
  143db0:	e2833001 	add	r3, r3, #1
  143db4:	e15c0001 	cmp	ip, r1
  143db8:	0a000036 	beq	143e98 <memchr+0x11c>
  143dbc:	e3130003 	tst	r3, #3
  143dc0:	e2422001 	sub	r2, r2, #1
  143dc4:	e1a00003 	mov	r0, r3
  143dc8:	1afffff5 	bne	143da4 <memchr+0x28>
  143dcc:	e3520000 	cmp	r2, #0
  143dd0:	0a000020 	beq	143e58 <memchr+0xdc>
  143dd4:	e5d03000 	ldrb	r3, [r0]
  143dd8:	e1530001 	cmp	r3, r1
  143ddc:	0a00002d 	beq	143e98 <memchr+0x11c>
  143de0:	e92d4070 	push	{r4, r5, r6, lr}
  143de4:	e3520003 	cmp	r2, #3
  143de8:	e0814401 	add	r4, r1, r1, lsl #8
  143dec:	e0844804 	add	r4, r4, r4, lsl #16
  143df0:	9a00001d 	bls	143e6c <memchr+0xf0>
  143df4:	e5903000 	ldr	r3, [r0]
  143df8:	e59f60cc 	ldr	r6, [pc, #204]	; 143ecc <memchr+0x150>
  143dfc:	e0233004 	eor	r3, r3, r4
  143e00:	e083c006 	add	ip, r3, r6
  143e04:	e59f50c4 	ldr	r5, [pc, #196]	; 143ed0 <memchr+0x154>
  143e08:	e1cc3003 	bic	r3, ip, r3
  143e0c:	e1130005 	tst	r3, r5
  143e10:	1a000015 	bne	143e6c <memchr+0xf0>
  143e14:	e280e004 	add	lr, r0, #4
  143e18:	ea000006 	b	143e38 <memchr+0xbc>
  143e1c:	e59e3000 	ldr	r3, [lr]
  143e20:	e28ee004 	add	lr, lr, #4
  143e24:	e0233004 	eor	r3, r3, r4
  143e28:	e083c006 	add	ip, r3, r6
  143e2c:	e1cc3003 	bic	r3, ip, r3
  143e30:	e1130005 	tst	r3, r5
  143e34:	1a000009 	bne	143e60 <memchr+0xe4>
  143e38:	e2422004 	sub	r2, r2, #4
  143e3c:	e3520003 	cmp	r2, #3
  143e40:	e1a0000e 	mov	r0, lr
  143e44:	8afffff4 	bhi	143e1c <memchr+0xa0>
  143e48:	e3520000 	cmp	r2, #0
  143e4c:	1a000003 	bne	143e60 <memchr+0xe4>
  143e50:	e3a00000 	mov	r0, #0
  143e54:	e8bd8070 	pop	{r4, r5, r6, pc}
  143e58:	e3a00000 	mov	r0, #0
  143e5c:	e12fff1e 	bx	lr
  143e60:	e5d03000 	ldrb	r3, [r0]
  143e64:	e1510003 	cmp	r1, r3
  143e68:	08bd8070 	popeq	{r4, r5, r6, pc}
  143e6c:	e0802002 	add	r2, r0, r2
  143e70:	e2803001 	add	r3, r0, #1
  143e74:	ea000003 	b	143e88 <memchr+0x10c>
  143e78:	e5d3c000 	ldrb	ip, [r3]
  143e7c:	e2833001 	add	r3, r3, #1
  143e80:	e15c0001 	cmp	ip, r1
  143e84:	08bd8070 	popeq	{r4, r5, r6, pc}
  143e88:	e1520003 	cmp	r2, r3
  143e8c:	e1a00003 	mov	r0, r3
  143e90:	1afffff8 	bne	143e78 <memchr+0xfc>
  143e94:	eaffffed 	b	143e50 <memchr+0xd4>
  143e98:	e5d03000 	ldrb	r3, [r0]
  143e9c:	e1510003 	cmp	r1, r3
  143ea0:	012fff1e 	bxeq	lr
  143ea4:	e0802002 	add	r2, r0, r2
  143ea8:	e2803001 	add	r3, r0, #1
  143eac:	e1520003 	cmp	r2, r3
  143eb0:	e1a00003 	mov	r0, r3
  143eb4:	0affffe7 	beq	143e58 <memchr+0xdc>
  143eb8:	e5d3c000 	ldrb	ip, [r3]
  143ebc:	e2833001 	add	r3, r3, #1
  143ec0:	e15c0001 	cmp	ip, r1
  143ec4:	1afffff8 	bne	143eac <memchr+0x130>
  143ec8:	e12fff1e 	bx	lr
  143ecc:	fefefeff 	.word	0xfefefeff
  143ed0:	80808080 	.word	0x80808080

00143ed4 <__stpcpy>:
  143ed4:	e0203001 	eor	r3, r0, r1
  143ed8:	e3130003 	tst	r3, #3
  143edc:	e92d4010 	push	{r4, lr}
  143ee0:	1a00001f 	bne	143f64 <__stpcpy+0x90>
  143ee4:	e3110003 	tst	r1, #3
  143ee8:	0a00000e 	beq	143f28 <__stpcpy+0x54>
  143eec:	e5d13000 	ldrb	r3, [r1]
  143ef0:	e3530000 	cmp	r3, #0
  143ef4:	e5c03000 	strb	r3, [r0]
  143ef8:	08bd8010 	popeq	{r4, pc}
  143efc:	e2813001 	add	r3, r1, #1
  143f00:	e2802001 	add	r2, r0, #1
  143f04:	ea000003 	b	143f18 <__stpcpy+0x44>
  143f08:	e4d31001 	ldrb	r1, [r3], #1
  143f0c:	e3510000 	cmp	r1, #0
  143f10:	e4c21001 	strb	r1, [r2], #1
  143f14:	08bd8010 	popeq	{r4, pc}
  143f18:	e3130003 	tst	r3, #3
  143f1c:	e1a01003 	mov	r1, r3
  143f20:	e1a00002 	mov	r0, r2
  143f24:	1afffff7 	bne	143f08 <__stpcpy+0x34>
  143f28:	e5913000 	ldr	r3, [r1]
  143f2c:	e59f405c 	ldr	r4, [pc, #92]	; 143f90 <__stpcpy+0xbc>
  143f30:	e59fe05c 	ldr	lr, [pc, #92]	; 143f94 <__stpcpy+0xc0>
  143f34:	e0832004 	add	r2, r3, r4
  143f38:	e1c22003 	bic	r2, r2, r3
  143f3c:	e112000e 	tst	r2, lr
  143f40:	1a000007 	bne	143f64 <__stpcpy+0x90>
  143f44:	e281c004 	add	ip, r1, #4
  143f48:	e4803004 	str	r3, [r0], #4
  143f4c:	e1a0100c 	mov	r1, ip
  143f50:	e49c3004 	ldr	r3, [ip], #4
  143f54:	e0832004 	add	r2, r3, r4
  143f58:	e1c22003 	bic	r2, r2, r3
  143f5c:	e112000e 	tst	r2, lr
  143f60:	0afffff8 	beq	143f48 <__stpcpy+0x74>
  143f64:	e5d13000 	ldrb	r3, [r1]
  143f68:	e3530000 	cmp	r3, #0
  143f6c:	e5c03000 	strb	r3, [r0]
  143f70:	08bd8010 	popeq	{r4, pc}
  143f74:	e2803001 	add	r3, r0, #1
  143f78:	e5f12001 	ldrb	r2, [r1, #1]!
  143f7c:	e1a00003 	mov	r0, r3
  143f80:	e3520000 	cmp	r2, #0
  143f84:	e4c32001 	strb	r2, [r3], #1
  143f88:	1afffffa 	bne	143f78 <__stpcpy+0xa4>
  143f8c:	e8bd8010 	pop	{r4, pc}
  143f90:	fefefeff 	.word	0xfefefeff
  143f94:	80808080 	.word	0x80808080

00143f98 <__stpncpy>:
  143f98:	e0203001 	eor	r3, r0, r1
  143f9c:	e3130003 	tst	r3, #3
  143fa0:	e92d4070 	push	{r4, r5, r6, lr}
  143fa4:	1a000030 	bne	14406c <__stpncpy+0xd4>
  143fa8:	e3110003 	tst	r1, #3
  143fac:	0a000044 	beq	1440c4 <__stpncpy+0x12c>
  143fb0:	e3520000 	cmp	r2, #0
  143fb4:	0a000040 	beq	1440bc <__stpncpy+0x124>
  143fb8:	e5d13000 	ldrb	r3, [r1]
  143fbc:	e3530000 	cmp	r3, #0
  143fc0:	e5c03000 	strb	r3, [r0]
  143fc4:	0a00003c 	beq	1440bc <__stpncpy+0x124>
  143fc8:	e2813001 	add	r3, r1, #1
  143fcc:	e2800001 	add	r0, r0, #1
  143fd0:	ea000005 	b	143fec <__stpncpy+0x54>
  143fd4:	e3520000 	cmp	r2, #0
  143fd8:	0a000032 	beq	1440a8 <__stpncpy+0x110>
  143fdc:	e4d31001 	ldrb	r1, [r3], #1
  143fe0:	e3510000 	cmp	r1, #0
  143fe4:	e4c01001 	strb	r1, [r0], #1
  143fe8:	0a00002e 	beq	1440a8 <__stpncpy+0x110>
  143fec:	e3130003 	tst	r3, #3
  143ff0:	e2422001 	sub	r2, r2, #1
  143ff4:	e1a01003 	mov	r1, r3
  143ff8:	e1a04000 	mov	r4, r0
  143ffc:	1afffff4 	bne	143fd4 <__stpncpy+0x3c>
  144000:	e3520000 	cmp	r2, #0
  144004:	0a000027 	beq	1440a8 <__stpncpy+0x110>
  144008:	e5d1c000 	ldrb	ip, [r1]
  14400c:	e35c0000 	cmp	ip, #0
  144010:	0a000024 	beq	1440a8 <__stpncpy+0x110>
  144014:	e3520003 	cmp	r2, #3
  144018:	9a00002b 	bls	1440cc <__stpncpy+0x134>
  14401c:	e5913000 	ldr	r3, [r1]
  144020:	e59f60b0 	ldr	r6, [pc, #176]	; 1440d8 <__stpncpy+0x140>
  144024:	e59f50b0 	ldr	r5, [pc, #176]	; 1440dc <__stpncpy+0x144>
  144028:	e0830006 	add	r0, r3, r6
  14402c:	e1c00003 	bic	r0, r0, r3
  144030:	e1100005 	tst	r0, r5
  144034:	1a000024 	bne	1440cc <__stpncpy+0x134>
  144038:	e281e004 	add	lr, r1, #4
  14403c:	ea000004 	b	144054 <__stpncpy+0xbc>
  144040:	e49e3004 	ldr	r3, [lr], #4
  144044:	e083c006 	add	ip, r3, r6
  144048:	e1ccc003 	bic	ip, ip, r3
  14404c:	e11c0005 	tst	ip, r5
  144050:	1a000007 	bne	144074 <__stpncpy+0xdc>
  144054:	e2422004 	sub	r2, r2, #4
  144058:	e4843004 	str	r3, [r4], #4
  14405c:	e3520003 	cmp	r2, #3
  144060:	e1a00004 	mov	r0, r4
  144064:	e1a0100e 	mov	r1, lr
  144068:	8afffff4 	bhi	144040 <__stpncpy+0xa8>
  14406c:	e3520000 	cmp	r2, #0
  144070:	0a000011 	beq	1440bc <__stpncpy+0x124>
  144074:	e5d13000 	ldrb	r3, [r1]
  144078:	e3530000 	cmp	r3, #0
  14407c:	e5c03000 	strb	r3, [r0]
  144080:	0a00000d 	beq	1440bc <__stpncpy+0x124>
  144084:	e2800001 	add	r0, r0, #1
  144088:	ea000003 	b	14409c <__stpncpy+0x104>
  14408c:	e5f13001 	ldrb	r3, [r1, #1]!
  144090:	e3530000 	cmp	r3, #0
  144094:	e4c03001 	strb	r3, [r0], #1
  144098:	0a000002 	beq	1440a8 <__stpncpy+0x110>
  14409c:	e2522001 	subs	r2, r2, #1
  1440a0:	e1a04000 	mov	r4, r0
  1440a4:	1afffff8 	bne	14408c <__stpncpy+0xf4>
  1440a8:	e3a01000 	mov	r1, #0
  1440ac:	e1a00004 	mov	r0, r4
  1440b0:	ebfff46f 	bl	141274 <memset>
  1440b4:	e1a00004 	mov	r0, r4
  1440b8:	e8bd8070 	pop	{r4, r5, r6, pc}
  1440bc:	e1a04000 	mov	r4, r0
  1440c0:	eafffff8 	b	1440a8 <__stpncpy+0x110>
  1440c4:	e1a04000 	mov	r4, r0
  1440c8:	eaffffcc 	b	144000 <__stpncpy+0x68>
  1440cc:	e5c4c000 	strb	ip, [r4]
  1440d0:	e1a00004 	mov	r0, r4
  1440d4:	eaffffea 	b	144084 <__stpncpy+0xec>
  1440d8:	fefefeff 	.word	0xfefefeff
  1440dc:	80808080 	.word	0x80808080

001440e0 <strchr>:
  1440e0:	e92d4010 	push	{r4, lr}
  1440e4:	e1a04001 	mov	r4, r1
  1440e8:	eb000004 	bl	144100 <__strchrnul>
  1440ec:	e5d03000 	ldrb	r3, [r0]
  1440f0:	e20440ff 	and	r4, r4, #255	; 0xff
  1440f4:	e1540003 	cmp	r4, r3
  1440f8:	13a00000 	movne	r0, #0
  1440fc:	e8bd8010 	pop	{r4, pc}

00144100 <__strchrnul>:
  144100:	e20110ff 	and	r1, r1, #255	; 0xff
  144104:	e3510000 	cmp	r1, #0
  144108:	e92d4070 	push	{r4, r5, r6, lr}
  14410c:	e1a04000 	mov	r4, r0
  144110:	0a000031 	beq	1441dc <__strchrnul+0xdc>
  144114:	e3100003 	tst	r0, #3
  144118:	0a00000e 	beq	144158 <__strchrnul+0x58>
  14411c:	e5d02000 	ldrb	r2, [r0]
  144120:	e3520000 	cmp	r2, #0
  144124:	0a00002f 	beq	1441e8 <__strchrnul+0xe8>
  144128:	e1510002 	cmp	r1, r2
  14412c:	0a00002d 	beq	1441e8 <__strchrnul+0xe8>
  144130:	e2803001 	add	r3, r0, #1
  144134:	ea000004 	b	14414c <__strchrnul+0x4c>
  144138:	e4d32001 	ldrb	r2, [r3], #1
  14413c:	e3520000 	cmp	r2, #0
  144140:	08bd8070 	popeq	{r4, r5, r6, pc}
  144144:	e1520001 	cmp	r2, r1
  144148:	08bd8070 	popeq	{r4, r5, r6, pc}
  14414c:	e3130003 	tst	r3, #3
  144150:	e1a00003 	mov	r0, r3
  144154:	1afffff7 	bne	144138 <__strchrnul+0x38>
  144158:	e590c000 	ldr	ip, [r0]
  14415c:	e0815401 	add	r5, r1, r1, lsl #8
  144160:	e59f4088 	ldr	r4, [pc, #136]	; 1441f0 <__strchrnul+0xf0>
  144164:	e0855805 	add	r5, r5, r5, lsl #16
  144168:	e025e00c 	eor	lr, r5, ip
  14416c:	e08e2004 	add	r2, lr, r4
  144170:	e08c3004 	add	r3, ip, r4
  144174:	e1c2200e 	bic	r2, r2, lr
  144178:	e1c3300c 	bic	r3, r3, ip
  14417c:	e59f6070 	ldr	r6, [pc, #112]	; 1441f4 <__strchrnul+0xf4>
  144180:	e1833002 	orr	r3, r3, r2
  144184:	e1130006 	tst	r3, r6
  144188:	1a000008 	bne	1441b0 <__strchrnul+0xb0>
  14418c:	e5b0c004 	ldr	ip, [r0, #4]!
  144190:	e02ce005 	eor	lr, ip, r5
  144194:	e08e2004 	add	r2, lr, r4
  144198:	e08c3004 	add	r3, ip, r4
  14419c:	e1c2200e 	bic	r2, r2, lr
  1441a0:	e1c3300c 	bic	r3, r3, ip
  1441a4:	e1833002 	orr	r3, r3, r2
  1441a8:	e1130006 	tst	r3, r6
  1441ac:	0afffff6 	beq	14418c <__strchrnul+0x8c>
  1441b0:	e5d03000 	ldrb	r3, [r0]
  1441b4:	e3530000 	cmp	r3, #0
  1441b8:	08bd8070 	popeq	{r4, r5, r6, pc}
  1441bc:	e1510003 	cmp	r1, r3
  1441c0:	08bd8070 	popeq	{r4, r5, r6, pc}
  1441c4:	e5f03001 	ldrb	r3, [r0, #1]!
  1441c8:	e3530000 	cmp	r3, #0
  1441cc:	08bd8070 	popeq	{r4, r5, r6, pc}
  1441d0:	e1530001 	cmp	r3, r1
  1441d4:	1afffffa 	bne	1441c4 <__strchrnul+0xc4>
  1441d8:	e8bd8070 	pop	{r4, r5, r6, pc}
  1441dc:	ebfff4b5 	bl	1414b8 <strlen>
  1441e0:	e0840000 	add	r0, r4, r0
  1441e4:	e8bd8070 	pop	{r4, r5, r6, pc}
  1441e8:	e1a00004 	mov	r0, r4
  1441ec:	e8bd8070 	pop	{r4, r5, r6, pc}
  1441f0:	fefefeff 	.word	0xfefefeff
  1441f4:	80808080 	.word	0x80808080

001441f8 <__set_thread_area>:
  1441f8:	e59f3108 	ldr	r3, [pc, #264]	; 144308 <__set_thread_area+0x110>
  1441fc:	e92d4010 	push	{r4, lr}
  144200:	e5933000 	ldr	r3, [r3]
  144204:	e1a04000 	mov	r4, r0
  144208:	e3130902 	tst	r3, #32768	; 0x8000
  14420c:	0a000017 	beq	144270 <__set_thread_area+0x78>
  144210:	e59f20f4 	ldr	r2, [pc, #244]	; 14430c <__set_thread_area+0x114>
  144214:	e59f10f4 	ldr	r1, [pc, #244]	; 144310 <__set_thread_area+0x118>
  144218:	e59f00f4 	ldr	r0, [pc, #244]	; 144314 <__set_thread_area+0x11c>
  14421c:	e59fc0f4 	ldr	ip, [pc, #244]	; 144318 <__set_thread_area+0x120>
  144220:	e59f30f4 	ldr	r3, [pc, #244]	; 14431c <__set_thread_area+0x124>
  144224:	e5922010 	ldr	r2, [r2, #16]
  144228:	e580c000 	str	ip, [r0]
  14422c:	e5831000 	str	r1, [r3]
  144230:	e5921000 	ldr	r1, [r2]
  144234:	e3510000 	cmp	r1, #0
  144238:	0a000005 	beq	144254 <__set_thread_area+0x5c>
  14423c:	e351000f 	cmp	r1, #15
  144240:	1a00001b 	bne	1442b4 <__set_thread_area+0xbc>
  144244:	e5922004 	ldr	r2, [r2, #4]
  144248:	e5d21000 	ldrb	r1, [r2]
  14424c:	e3510076 	cmp	r1, #118	; 0x76
  144250:	0a000021 	beq	1442dc <__set_thread_area+0xe4>
  144254:	e59f00c4 	ldr	r0, [pc, #196]	; 144320 <__set_thread_area+0x128>
  144258:	ebffe055 	bl	13c3b4 <get_rtt_syscall>
  14425c:	e2503000 	subs	r3, r0, #0
  144260:	08bd8010 	popeq	{r4, pc}
  144264:	e1a00004 	mov	r0, r4
  144268:	e8bd4010 	pop	{r4, lr}
  14426c:	e12fff13 	bx	r3
  144270:	e3e03a0f 	mvn	r3, #61440	; 0xf000
  144274:	e59f10a8 	ldr	r1, [pc, #168]	; 144324 <__set_thread_area+0x12c>
  144278:	e5132003 	ldr	r2, [r3, #-3]
  14427c:	e59f30a4 	ldr	r3, [pc, #164]	; 144328 <__set_thread_area+0x130>
  144280:	e59f008c 	ldr	r0, [pc, #140]	; 144314 <__set_thread_area+0x11c>
  144284:	e5831000 	str	r1, [r3]
  144288:	e59fc09c 	ldr	ip, [pc, #156]	; 14432c <__set_thread_area+0x134>
  14428c:	e59f3088 	ldr	r3, [pc, #136]	; 14431c <__set_thread_area+0x124>
  144290:	e2411040 	sub	r1, r1, #64	; 0x40
  144294:	e3520001 	cmp	r2, #1
  144298:	e580c000 	str	ip, [r0]
  14429c:	e5831000 	str	r1, [r3]
  1442a0:	da000009 	ble	1442cc <__set_thread_area+0xd4>
  1442a4:	e3520002 	cmp	r2, #2
  1442a8:	059f2080 	ldreq	r2, [pc, #128]	; 144330 <__set_thread_area+0x138>
  1442ac:	05832000 	streq	r2, [r3]
  1442b0:	eaffffe7 	b	144254 <__set_thread_area+0x5c>
  1442b4:	e5b21008 	ldr	r1, [r2, #8]!
  1442b8:	e3510000 	cmp	r1, #0
  1442bc:	0affffe4 	beq	144254 <__set_thread_area+0x5c>
  1442c0:	e351000f 	cmp	r1, #15
  1442c4:	0affffde 	beq	144244 <__set_thread_area+0x4c>
  1442c8:	eafffff9 	b	1442b4 <__set_thread_area+0xbc>
  1442cc:	e7f000f0 	.word	0xe7f000f0
  1442d0:	e59f2058 	ldr	r2, [pc, #88]	; 144330 <__set_thread_area+0x138>
  1442d4:	e5832000 	str	r2, [r3]
  1442d8:	eaffffdd 	b	144254 <__set_thread_area+0x5c>
  1442dc:	e5d21001 	ldrb	r1, [r2, #1]
  1442e0:	e3510036 	cmp	r1, #54	; 0x36
  1442e4:	1affffda 	bne	144254 <__set_thread_area+0x5c>
  1442e8:	e5d22002 	ldrb	r2, [r2, #2]
  1442ec:	e2422030 	sub	r2, r2, #48	; 0x30
  1442f0:	e3520009 	cmp	r2, #9
  1442f4:	859f1038 	ldrhi	r1, [pc, #56]	; 144334 <__set_thread_area+0x13c>
  1442f8:	859f2038 	ldrhi	r2, [pc, #56]	; 144338 <__set_thread_area+0x140>
  1442fc:	85801000 	strhi	r1, [r0]
  144300:	85832000 	strhi	r2, [r3]
  144304:	eaffffd2 	b	144254 <__set_thread_area+0x5c>
  144308:	0015d070 	.word	0x0015d070
  14430c:	0015d074 	.word	0x0015d074
  144310:	00141ed0 	.word	0x00141ed0
  144314:	0014d3d8 	.word	0x0014d3d8
  144318:	00141f10 	.word	0x00141f10
  14431c:	0014d3d4 	.word	0x0014d3d4
  144320:	000f0005 	.word	0x000f0005
  144324:	ffff0fe0 	.word	0xffff0fe0
  144328:	0014d3dc 	.word	0x0014d3dc
  14432c:	ffff0fc0 	.word	0xffff0fc0
  144330:	00141ea8 	.word	0x00141ea8
  144334:	00141eec 	.word	0x00141eec
  144338:	00141ec8 	.word	0x00141ec8

0014433c <__unmapself>:
  14433c:	e3a07036 	mov	r7, #54	; 0x36
  144340:	ef000000 	svc	0x00000000
  144344:	e3a07001 	mov	r7, #1
  144348:	ef000000 	svc	0x00000000

0014434c <__clone>:
  14434c:	e92d00f0 	push	{r4, r5, r6, r7}
  144350:	e3a07082 	mov	r7, #130	; 0x82
  144354:	e1a06003 	mov	r6, r3
  144358:	e1a05000 	mov	r5, r0
  14435c:	e1a00002 	mov	r0, r2
  144360:	e3c1100f 	bic	r1, r1, #15
  144364:	e59d2010 	ldr	r2, [sp, #16]
  144368:	e59d3014 	ldr	r3, [sp, #20]
  14436c:	e59d4018 	ldr	r4, [sp, #24]
  144370:	e92d007f 	push	{r0, r1, r2, r3, r4, r5, r6}
  144374:	e1a0000d 	mov	r0, sp
  144378:	ef000000 	svc	0x00000000
  14437c:	e1100000 	tst	r0, r0
  144380:	0a000002 	beq	144390 <__clone+0x44>
  144384:	e28dd01c 	add	sp, sp, #28
  144388:	e8bd00f0 	pop	{r4, r5, r6, r7}
  14438c:	e12fff1e 	bx	lr
  144390:	e1a00006 	mov	r0, r6
  144394:	e3150001 	tst	r5, #1
  144398:	1a000003 	bne	1443ac <__clone+0x60>
  14439c:	e1a0e00f 	mov	lr, pc
  1443a0:	e1a0f005 	mov	pc, r5
  1443a4:	e3a07001 	mov	r7, #1
  1443a8:	ef000000 	svc	0x00000000
  1443ac:	e1a0e00f 	mov	lr, pc
  1443b0:	e12fff15 	bx	r5
  1443b4:	eafffffa 	b	1443a4 <__clone+0x58>

001443b8 <__clock_gettime>:
  1443b8:	e92d4070 	push	{r4, r5, r6, lr}
  1443bc:	e1a04000 	mov	r4, r0
  1443c0:	e59f0074 	ldr	r0, [pc, #116]	; 14443c <__clock_gettime+0x84>
  1443c4:	e1a05001 	mov	r5, r1
  1443c8:	ebffdff9 	bl	13c3b4 <get_rtt_syscall>
  1443cc:	e2503000 	subs	r3, r0, #0
  1443d0:	0a000017 	beq	144434 <__clock_gettime+0x7c>
  1443d4:	e1a01005 	mov	r1, r5
  1443d8:	e1a00004 	mov	r0, r4
  1443dc:	e12fff33 	blx	r3
  1443e0:	e3700026 	cmn	r0, #38	; 0x26
  1443e4:	0a000001 	beq	1443f0 <__clock_gettime+0x38>
  1443e8:	e8bd4070 	pop	{r4, r5, r6, lr}
  1443ec:	eaffe025 	b	13c488 <__syscall_ret>
  1443f0:	e3540000 	cmp	r4, #0
  1443f4:	13e00015 	mvnne	r0, #21
  1443f8:	1afffffa 	bne	1443e8 <__clock_gettime+0x30>
  1443fc:	e3a0004e 	mov	r0, #78	; 0x4e
  144400:	ebffdfeb 	bl	13c3b4 <get_rtt_syscall>
  144404:	e2503000 	subs	r3, r0, #0
  144408:	0a000002 	beq	144418 <__clock_gettime+0x60>
  14440c:	e1a01004 	mov	r1, r4
  144410:	e1a00005 	mov	r0, r5
  144414:	e12fff33 	blx	r3
  144418:	e5953008 	ldr	r3, [r5, #8]
  14441c:	e3a00000 	mov	r0, #0
  144420:	e0632283 	rsb	r2, r3, r3, lsl #5
  144424:	e0833102 	add	r3, r3, r2, lsl #2
  144428:	e1a03183 	lsl	r3, r3, #3
  14442c:	e5853008 	str	r3, [r5, #8]
  144430:	e8bd8070 	pop	{r4, r5, r6, pc}
  144434:	e1a00003 	mov	r0, r3
  144438:	eaffffea 	b	1443e8 <__clock_gettime+0x30>
  14443c:	00000107 	.word	0x00000107

00144440 <frexp>:
  144440:	e59fc09c 	ldr	ip, [pc, #156]	; 1444e4 <frexp+0xa4>
  144444:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  144448:	e01c6a21 	ands	r6, ip, r1, lsr #20
  14444c:	e1a04000 	mov	r4, r0
  144450:	e1a05001 	mov	r5, r1
  144454:	1a000009 	bne	144480 <frexp+0x40>
  144458:	e1a07002 	mov	r7, r2
  14445c:	e3a03000 	mov	r3, #0
  144460:	e3a02000 	mov	r2, #0
  144464:	eb0002e1 	bl	144ff0 <__aeabi_dcmpeq>
  144468:	e3500000 	cmp	r0, #0
  14446c:	0a000011 	beq	1444b8 <frexp+0x78>
  144470:	e5876000 	str	r6, [r7]
  144474:	e1a00004 	mov	r0, r4
  144478:	e1a01005 	mov	r1, r5
  14447c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  144480:	e156000c 	cmp	r6, ip
  144484:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  144488:	e3e00000 	mvn	r0, #0
  14448c:	e0007004 	and	r7, r0, r4
  144490:	e3a04000 	mov	r4, #0
  144494:	e59f104c 	ldr	r1, [pc, #76]	; 1444e8 <frexp+0xa8>
  144498:	e2463fff 	sub	r3, r6, #1020	; 0x3fc
  14449c:	e0018005 	and	r8, r1, r5
  1444a0:	e59f5044 	ldr	r5, [pc, #68]	; 1444ec <frexp+0xac>
  1444a4:	e2433002 	sub	r3, r3, #2
  1444a8:	e5823000 	str	r3, [r2]
  1444ac:	e1870004 	orr	r0, r7, r4
  1444b0:	e1881005 	orr	r1, r8, r5
  1444b4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  1444b8:	e59f3030 	ldr	r3, [pc, #48]	; 1444f0 <frexp+0xb0>
  1444bc:	e1a00004 	mov	r0, r4
  1444c0:	e1a01005 	mov	r1, r5
  1444c4:	e3a02000 	mov	r2, #0
  1444c8:	eb00017a 	bl	144ab8 <__aeabi_dmul>
  1444cc:	e1a02007 	mov	r2, r7
  1444d0:	ebffffda 	bl	144440 <frexp>
  1444d4:	e5973000 	ldr	r3, [r7]
  1444d8:	e2433040 	sub	r3, r3, #64	; 0x40
  1444dc:	e5873000 	str	r3, [r7]
  1444e0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  1444e4:	000007ff 	.word	0x000007ff
  1444e8:	800fffff 	.word	0x800fffff
  1444ec:	3fe00000 	.word	0x3fe00000
  1444f0:	43f00000 	.word	0x43f00000

001444f4 <wcrtomb>:
  1444f4:	e2502000 	subs	r2, r0, #0
  1444f8:	0a000025 	beq	144594 <wcrtomb+0xa0>
  1444fc:	e351007f 	cmp	r1, #127	; 0x7f
  144500:	9a000022 	bls	144590 <wcrtomb+0x9c>
  144504:	e59f0114 	ldr	r0, [pc, #276]	; 144620 <wcrtomb+0x12c>
  144508:	e92d4010 	push	{r4, lr}
  14450c:	e5900000 	ldr	r0, [r0]
  144510:	e12fff30 	blx	r0
  144514:	e5100018 	ldr	r0, [r0, #-24]	; 0xffffffe8
  144518:	e1a03001 	mov	r3, r1
  14451c:	e5900000 	ldr	r0, [r0]
  144520:	e1a0c002 	mov	ip, r2
  144524:	e3500000 	cmp	r0, #0
  144528:	0a000025 	beq	1445c4 <wcrtomb+0xd0>
  14452c:	e3510b02 	cmp	r1, #2048	; 0x800
  144530:	3a00001a 	bcc	1445a0 <wcrtomb+0xac>
  144534:	e2412a0e 	sub	r2, r1, #57344	; 0xe000
  144538:	e3510b36 	cmp	r1, #55296	; 0xd800
  14453c:	23520a02 	cmpcs	r2, #8192	; 0x2000
  144540:	3a00002a 	bcc	1445f0 <wcrtomb+0xfc>
  144544:	e2412801 	sub	r2, r1, #65536	; 0x10000
  144548:	e3520601 	cmp	r2, #1048576	; 0x100000
  14454c:	2a000022 	bcs	1445dc <wcrtomb+0xe8>
  144550:	e3e0e00f 	mvn	lr, #15
  144554:	e3e0207f 	mvn	r2, #127	; 0x7f
  144558:	e18ee923 	orr	lr, lr, r3, lsr #18
  14455c:	e203303f 	and	r3, r3, #63	; 0x3f
  144560:	e1823003 	orr	r3, r2, r3
  144564:	e5cc3003 	strb	r3, [ip, #3]
  144568:	e3a03004 	mov	r3, #4
  14456c:	e1a00701 	lsl	r0, r1, #14
  144570:	e1a01a01 	lsl	r1, r1, #20
  144574:	e1820d20 	orr	r0, r2, r0, lsr #26
  144578:	e1821d21 	orr	r1, r2, r1, lsr #26
  14457c:	e5cce000 	strb	lr, [ip]
  144580:	e5cc0001 	strb	r0, [ip, #1]
  144584:	e5cc1002 	strb	r1, [ip, #2]
  144588:	e1a00003 	mov	r0, r3
  14458c:	e8bd8010 	pop	{r4, pc}
  144590:	e5c21000 	strb	r1, [r2]
  144594:	e3a03001 	mov	r3, #1
  144598:	e1a00003 	mov	r0, r3
  14459c:	e12fff1e 	bx	lr
  1445a0:	e201203f 	and	r2, r1, #63	; 0x3f
  1445a4:	e1e02c82 	mvn	r2, r2, lsl #25
  1445a8:	e3e0103f 	mvn	r1, #63	; 0x3f
  1445ac:	e1e02ca2 	mvn	r2, r2, lsr #25
  1445b0:	e1813323 	orr	r3, r1, r3, lsr #6
  1445b4:	e5cc3000 	strb	r3, [ip]
  1445b8:	e5cc2001 	strb	r2, [ip, #1]
  1445bc:	e3a03002 	mov	r3, #2
  1445c0:	eafffff0 	b	144588 <wcrtomb+0x94>
  1445c4:	e2413cdf 	sub	r3, r1, #57088	; 0xdf00
  1445c8:	e2433080 	sub	r3, r3, #128	; 0x80
  1445cc:	e353007f 	cmp	r3, #127	; 0x7f
  1445d0:	95c21000 	strbls	r1, [r2]
  1445d4:	93a03001 	movls	r3, #1
  1445d8:	9affffea 	bls	144588 <wcrtomb+0x94>
  1445dc:	ebffd23e 	bl	138edc <__errno_location>
  1445e0:	e3a02054 	mov	r2, #84	; 0x54
  1445e4:	e3e03000 	mvn	r3, #0
  1445e8:	e5802000 	str	r2, [r0]
  1445ec:	eaffffe5 	b	144588 <wcrtomb+0x94>
  1445f0:	e3e0207f 	mvn	r2, #127	; 0x7f
  1445f4:	e3e0001f 	mvn	r0, #31
  1445f8:	e203e03f 	and	lr, r3, #63	; 0x3f
  1445fc:	e1a01a01 	lsl	r1, r1, #20
  144600:	e1803623 	orr	r3, r0, r3, lsr #12
  144604:	e1821d21 	orr	r1, r2, r1, lsr #26
  144608:	e182200e 	orr	r2, r2, lr
  14460c:	e5cc3000 	strb	r3, [ip]
  144610:	e5cc1001 	strb	r1, [ip, #1]
  144614:	e5cc2002 	strb	r2, [ip, #2]
  144618:	e3a03003 	mov	r3, #3
  14461c:	eaffffd9 	b	144588 <wcrtomb+0x94>
  144620:	0014d3dc 	.word	0x0014d3dc

00144624 <close_file>:
  144624:	e92d4010 	push	{r4, lr}
  144628:	e2504000 	subs	r4, r0, #0
  14462c:	e24dd008 	sub	sp, sp, #8
  144630:	0a000015 	beq	14468c <close_file+0x68>
  144634:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
  144638:	e3530000 	cmp	r3, #0
  14463c:	aa000014 	bge	144694 <close_file+0x70>
  144640:	e5942014 	ldr	r2, [r4, #20]
  144644:	e594301c 	ldr	r3, [r4, #28]
  144648:	e1520003 	cmp	r2, r3
  14464c:	0a000004 	beq	144664 <close_file+0x40>
  144650:	e3a02000 	mov	r2, #0
  144654:	e5943024 	ldr	r3, [r4, #36]	; 0x24
  144658:	e1a01002 	mov	r1, r2
  14465c:	e1a00004 	mov	r0, r4
  144660:	e12fff33 	blx	r3
  144664:	e994000c 	ldmib	r4, {r2, r3}
  144668:	e1520003 	cmp	r2, r3
  14466c:	0a000006 	beq	14468c <close_file+0x68>
  144670:	e3a01001 	mov	r1, #1
  144674:	e0422003 	sub	r2, r2, r3
  144678:	e58d1000 	str	r1, [sp]
  14467c:	e5941028 	ldr	r1, [r4, #40]	; 0x28
  144680:	e1a00004 	mov	r0, r4
  144684:	e1a03fc2 	asr	r3, r2, #31
  144688:	e12fff31 	blx	r1
  14468c:	e28dd008 	add	sp, sp, #8
  144690:	e8bd8010 	pop	{r4, pc}
  144694:	ebfffb94 	bl	1434ec <__lockfile>
  144698:	eaffffe8 	b	144640 <close_file+0x1c>

0014469c <__stdio_exit>:
  14469c:	e92d4010 	push	{r4, lr}
  1446a0:	ebffe771 	bl	13e46c <__ofl_lock>
  1446a4:	e5904000 	ldr	r4, [r0]
  1446a8:	e3540000 	cmp	r4, #0
  1446ac:	0a000004 	beq	1446c4 <__stdio_exit+0x28>
  1446b0:	e1a00004 	mov	r0, r4
  1446b4:	ebffffda 	bl	144624 <close_file>
  1446b8:	e5944038 	ldr	r4, [r4, #56]	; 0x38
  1446bc:	e3540000 	cmp	r4, #0
  1446c0:	1afffffa 	bne	1446b0 <__stdio_exit+0x14>
  1446c4:	e59f3020 	ldr	r3, [pc, #32]	; 1446ec <__stdio_exit+0x50>
  1446c8:	e5930000 	ldr	r0, [r3]
  1446cc:	ebffffd4 	bl	144624 <close_file>
  1446d0:	e59f3018 	ldr	r3, [pc, #24]	; 1446f0 <__stdio_exit+0x54>
  1446d4:	e5930000 	ldr	r0, [r3]
  1446d8:	ebffffd1 	bl	144624 <close_file>
  1446dc:	e8bd4010 	pop	{r4, lr}
  1446e0:	e59f300c 	ldr	r3, [pc, #12]	; 1446f4 <__stdio_exit+0x58>
  1446e4:	e5930000 	ldr	r0, [r3]
  1446e8:	eaffffcd 	b	144624 <close_file>
  1446ec:	0014f478 	.word	0x0014f478
  1446f0:	0014d3d0 	.word	0x0014d3d0
  1446f4:	0014d338 	.word	0x0014d338

001446f8 <__aeabi_drsub>:
  1446f8:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000
  1446fc:	ea000000 	b	144704 <__adddf3>

00144700 <__aeabi_dsub>:
  144700:	e2233102 	eor	r3, r3, #-2147483648	; 0x80000000

00144704 <__adddf3>:
  144704:	e92d4030 	push	{r4, r5, lr}
  144708:	e1a04081 	lsl	r4, r1, #1
  14470c:	e1a05083 	lsl	r5, r3, #1
  144710:	e1340005 	teq	r4, r5
  144714:	01300002 	teqeq	r0, r2
  144718:	1194c000 	orrsne	ip, r4, r0
  14471c:	1195c002 	orrsne	ip, r5, r2
  144720:	11f0cac4 	mvnsne	ip, r4, asr #21
  144724:	11f0cac5 	mvnsne	ip, r5, asr #21
  144728:	0a000079 	beq	144914 <__adddf3+0x210>
  14472c:	e1a04aa4 	lsr	r4, r4, #21
  144730:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
  144734:	b2655000 	rsblt	r5, r5, #0
  144738:	da000006 	ble	144758 <__adddf3+0x54>
  14473c:	e0844005 	add	r4, r4, r5
  144740:	e0202002 	eor	r2, r0, r2
  144744:	e0213003 	eor	r3, r1, r3
  144748:	e0220000 	eor	r0, r2, r0
  14474c:	e0231001 	eor	r1, r3, r1
  144750:	e0202002 	eor	r2, r0, r2
  144754:	e0213003 	eor	r3, r1, r3
  144758:	e3550036 	cmp	r5, #54	; 0x36
  14475c:	88bd8030 	pophi	{r4, r5, pc}
  144760:	e3110102 	tst	r1, #-2147483648	; 0x80000000
  144764:	e1a01601 	lsl	r1, r1, #12
  144768:	e3a0c601 	mov	ip, #1048576	; 0x100000
  14476c:	e18c1621 	orr	r1, ip, r1, lsr #12
  144770:	0a000001 	beq	14477c <__adddf3+0x78>
  144774:	e2700000 	rsbs	r0, r0, #0
  144778:	e2e11000 	rsc	r1, r1, #0
  14477c:	e3130102 	tst	r3, #-2147483648	; 0x80000000
  144780:	e1a03603 	lsl	r3, r3, #12
  144784:	e18c3623 	orr	r3, ip, r3, lsr #12
  144788:	0a000001 	beq	144794 <__adddf3+0x90>
  14478c:	e2722000 	rsbs	r2, r2, #0
  144790:	e2e33000 	rsc	r3, r3, #0
  144794:	e1340005 	teq	r4, r5
  144798:	0a000057 	beq	1448fc <__adddf3+0x1f8>
  14479c:	e2444001 	sub	r4, r4, #1
  1447a0:	e275e020 	rsbs	lr, r5, #32
  1447a4:	ba000005 	blt	1447c0 <__adddf3+0xbc>
  1447a8:	e1a0ce12 	lsl	ip, r2, lr
  1447ac:	e0900532 	adds	r0, r0, r2, lsr r5
  1447b0:	e2a11000 	adc	r1, r1, #0
  1447b4:	e0900e13 	adds	r0, r0, r3, lsl lr
  1447b8:	e0b11553 	adcs	r1, r1, r3, asr r5
  1447bc:	ea000006 	b	1447dc <__adddf3+0xd8>
  1447c0:	e2455020 	sub	r5, r5, #32
  1447c4:	e28ee020 	add	lr, lr, #32
  1447c8:	e3520001 	cmp	r2, #1
  1447cc:	e1a0ce13 	lsl	ip, r3, lr
  1447d0:	238cc002 	orrcs	ip, ip, #2
  1447d4:	e0900553 	adds	r0, r0, r3, asr r5
  1447d8:	e0b11fc3 	adcs	r1, r1, r3, asr #31
  1447dc:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
  1447e0:	5a000002 	bpl	1447f0 <__adddf3+0xec>
  1447e4:	e27cc000 	rsbs	ip, ip, #0
  1447e8:	e2f00000 	rscs	r0, r0, #0
  1447ec:	e2e11000 	rsc	r1, r1, #0
  1447f0:	e3510601 	cmp	r1, #1048576	; 0x100000
  1447f4:	3a00000e 	bcc	144834 <__adddf3+0x130>
  1447f8:	e3510602 	cmp	r1, #2097152	; 0x200000
  1447fc:	3a000006 	bcc	14481c <__adddf3+0x118>
  144800:	e1b010a1 	lsrs	r1, r1, #1
  144804:	e1b00060 	rrxs	r0, r0
  144808:	e1a0c06c 	rrx	ip, ip
  14480c:	e2844001 	add	r4, r4, #1
  144810:	e1a02a84 	lsl	r2, r4, #21
  144814:	e3720501 	cmn	r2, #4194304	; 0x400000
  144818:	2a000055 	bcs	144974 <__adddf3+0x270>
  14481c:	e35c0102 	cmp	ip, #-2147483648	; 0x80000000
  144820:	01b0c0a0 	lsrseq	ip, r0, #1
  144824:	e2b00000 	adcs	r0, r0, #0
  144828:	e0a11a04 	adc	r1, r1, r4, lsl #20
  14482c:	e1811005 	orr	r1, r1, r5
  144830:	e8bd8030 	pop	{r4, r5, pc}
  144834:	e1b0c08c 	lsls	ip, ip, #1
  144838:	e0b00000 	adcs	r0, r0, r0
  14483c:	e0a11001 	adc	r1, r1, r1
  144840:	e3110601 	tst	r1, #1048576	; 0x100000
  144844:	e2444001 	sub	r4, r4, #1
  144848:	1afffff3 	bne	14481c <__adddf3+0x118>
  14484c:	e3310000 	teq	r1, #0
  144850:	01a01000 	moveq	r1, r0
  144854:	03a00000 	moveq	r0, #0
  144858:	e16f3f11 	clz	r3, r1
  14485c:	02833020 	addeq	r3, r3, #32
  144860:	e243300b 	sub	r3, r3, #11
  144864:	e2532020 	subs	r2, r3, #32
  144868:	aa000007 	bge	14488c <__adddf3+0x188>
  14486c:	e292200c 	adds	r2, r2, #12
  144870:	da000004 	ble	144888 <__adddf3+0x184>
  144874:	e282c014 	add	ip, r2, #20
  144878:	e262200c 	rsb	r2, r2, #12
  14487c:	e1a00c11 	lsl	r0, r1, ip
  144880:	e1a01231 	lsr	r1, r1, r2
  144884:	ea000004 	b	14489c <__adddf3+0x198>
  144888:	e2822014 	add	r2, r2, #20
  14488c:	d262c020 	rsble	ip, r2, #32
  144890:	e1a01211 	lsl	r1, r1, r2
  144894:	d1811c30 	orrle	r1, r1, r0, lsr ip
  144898:	d1a00210 	lslle	r0, r0, r2
  14489c:	e0544003 	subs	r4, r4, r3
  1448a0:	a0811a04 	addge	r1, r1, r4, lsl #20
  1448a4:	a1811005 	orrge	r1, r1, r5
  1448a8:	a8bd8030 	popge	{r4, r5, pc}
  1448ac:	e1e04004 	mvn	r4, r4
  1448b0:	e254401f 	subs	r4, r4, #31
  1448b4:	aa00000d 	bge	1448f0 <__adddf3+0x1ec>
  1448b8:	e294400c 	adds	r4, r4, #12
  1448bc:	ca000005 	bgt	1448d8 <__adddf3+0x1d4>
  1448c0:	e2844014 	add	r4, r4, #20
  1448c4:	e2642020 	rsb	r2, r4, #32
  1448c8:	e1a00430 	lsr	r0, r0, r4
  1448cc:	e1800211 	orr	r0, r0, r1, lsl r2
  1448d0:	e1851431 	orr	r1, r5, r1, lsr r4
  1448d4:	e8bd8030 	pop	{r4, r5, pc}
  1448d8:	e264400c 	rsb	r4, r4, #12
  1448dc:	e2642020 	rsb	r2, r4, #32
  1448e0:	e1a00230 	lsr	r0, r0, r2
  1448e4:	e1800411 	orr	r0, r0, r1, lsl r4
  1448e8:	e1a01005 	mov	r1, r5
  1448ec:	e8bd8030 	pop	{r4, r5, pc}
  1448f0:	e1a00431 	lsr	r0, r1, r4
  1448f4:	e1a01005 	mov	r1, r5
  1448f8:	e8bd8030 	pop	{r4, r5, pc}
  1448fc:	e3340000 	teq	r4, #0
  144900:	e2233601 	eor	r3, r3, #1048576	; 0x100000
  144904:	02211601 	eoreq	r1, r1, #1048576	; 0x100000
  144908:	02844001 	addeq	r4, r4, #1
  14490c:	12455001 	subne	r5, r5, #1
  144910:	eaffffa1 	b	14479c <__adddf3+0x98>
  144914:	e1f0cac4 	mvns	ip, r4, asr #21
  144918:	11f0cac5 	mvnsne	ip, r5, asr #21
  14491c:	0a000018 	beq	144984 <__adddf3+0x280>
  144920:	e1340005 	teq	r4, r5
  144924:	01300002 	teqeq	r0, r2
  144928:	0a000003 	beq	14493c <__adddf3+0x238>
  14492c:	e194c000 	orrs	ip, r4, r0
  144930:	01a01003 	moveq	r1, r3
  144934:	01a00002 	moveq	r0, r2
  144938:	e8bd8030 	pop	{r4, r5, pc}
  14493c:	e1310003 	teq	r1, r3
  144940:	13a01000 	movne	r1, #0
  144944:	13a00000 	movne	r0, #0
  144948:	18bd8030 	popne	{r4, r5, pc}
  14494c:	e1b0caa4 	lsrs	ip, r4, #21
  144950:	1a000003 	bne	144964 <__adddf3+0x260>
  144954:	e1b00080 	lsls	r0, r0, #1
  144958:	e0b11001 	adcs	r1, r1, r1
  14495c:	23811102 	orrcs	r1, r1, #-2147483648	; 0x80000000
  144960:	e8bd8030 	pop	{r4, r5, pc}
  144964:	e2944501 	adds	r4, r4, #4194304	; 0x400000
  144968:	32811601 	addcc	r1, r1, #1048576	; 0x100000
  14496c:	38bd8030 	popcc	{r4, r5, pc}
  144970:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
  144974:	e385147f 	orr	r1, r5, #2130706432	; 0x7f000000
  144978:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
  14497c:	e3a00000 	mov	r0, #0
  144980:	e8bd8030 	pop	{r4, r5, pc}
  144984:	e1f0cac4 	mvns	ip, r4, asr #21
  144988:	11a01003 	movne	r1, r3
  14498c:	11a00002 	movne	r0, r2
  144990:	01f0cac5 	mvnseq	ip, r5, asr #21
  144994:	11a03001 	movne	r3, r1
  144998:	11a02000 	movne	r2, r0
  14499c:	e1904601 	orrs	r4, r0, r1, lsl #12
  1449a0:	01925603 	orrseq	r5, r2, r3, lsl #12
  1449a4:	01310003 	teqeq	r1, r3
  1449a8:	13811702 	orrne	r1, r1, #524288	; 0x80000
  1449ac:	e8bd8030 	pop	{r4, r5, pc}

001449b0 <__aeabi_ui2d>:
  1449b0:	e3300000 	teq	r0, #0
  1449b4:	03a01000 	moveq	r1, #0
  1449b8:	012fff1e 	bxeq	lr
  1449bc:	e92d4030 	push	{r4, r5, lr}
  1449c0:	e3a04b01 	mov	r4, #1024	; 0x400
  1449c4:	e2844032 	add	r4, r4, #50	; 0x32
  1449c8:	e3a05000 	mov	r5, #0
  1449cc:	e3a01000 	mov	r1, #0
  1449d0:	eaffff9d 	b	14484c <__adddf3+0x148>

001449d4 <__aeabi_i2d>:
  1449d4:	e3300000 	teq	r0, #0
  1449d8:	03a01000 	moveq	r1, #0
  1449dc:	012fff1e 	bxeq	lr
  1449e0:	e92d4030 	push	{r4, r5, lr}
  1449e4:	e3a04b01 	mov	r4, #1024	; 0x400
  1449e8:	e2844032 	add	r4, r4, #50	; 0x32
  1449ec:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
  1449f0:	42600000 	rsbmi	r0, r0, #0
  1449f4:	e3a01000 	mov	r1, #0
  1449f8:	eaffff93 	b	14484c <__adddf3+0x148>

001449fc <__aeabi_f2d>:
  1449fc:	e1b02080 	lsls	r2, r0, #1
  144a00:	e1a011c2 	asr	r1, r2, #3
  144a04:	e1a01061 	rrx	r1, r1
  144a08:	e1a00e02 	lsl	r0, r2, #28
  144a0c:	121234ff 	andsne	r3, r2, #-16777216	; 0xff000000
  144a10:	133304ff 	teqne	r3, #-16777216	; 0xff000000
  144a14:	1221130e 	eorne	r1, r1, #939524096	; 0x38000000
  144a18:	112fff1e 	bxne	lr
  144a1c:	e3d224ff 	bics	r2, r2, #-16777216	; 0xff000000
  144a20:	012fff1e 	bxeq	lr
  144a24:	e33304ff 	teq	r3, #-16777216	; 0xff000000
  144a28:	03811702 	orreq	r1, r1, #524288	; 0x80000
  144a2c:	012fff1e 	bxeq	lr
  144a30:	e92d4030 	push	{r4, r5, lr}
  144a34:	e3a04d0e 	mov	r4, #896	; 0x380
  144a38:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
  144a3c:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
  144a40:	eaffff81 	b	14484c <__adddf3+0x148>

00144a44 <__aeabi_ul2d>:
  144a44:	e1902001 	orrs	r2, r0, r1
  144a48:	012fff1e 	bxeq	lr
  144a4c:	e92d4030 	push	{r4, r5, lr}
  144a50:	e3a05000 	mov	r5, #0
  144a54:	ea000006 	b	144a74 <__aeabi_l2d+0x1c>

00144a58 <__aeabi_l2d>:
  144a58:	e1902001 	orrs	r2, r0, r1
  144a5c:	012fff1e 	bxeq	lr
  144a60:	e92d4030 	push	{r4, r5, lr}
  144a64:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
  144a68:	5a000001 	bpl	144a74 <__aeabi_l2d+0x1c>
  144a6c:	e2700000 	rsbs	r0, r0, #0
  144a70:	e2e11000 	rsc	r1, r1, #0
  144a74:	e3a04b01 	mov	r4, #1024	; 0x400
  144a78:	e2844032 	add	r4, r4, #50	; 0x32
  144a7c:	e1b0cb21 	lsrs	ip, r1, #22
  144a80:	0affff5a 	beq	1447f0 <__adddf3+0xec>
  144a84:	e3a02003 	mov	r2, #3
  144a88:	e1b0c1ac 	lsrs	ip, ip, #3
  144a8c:	12822003 	addne	r2, r2, #3
  144a90:	e1b0c1ac 	lsrs	ip, ip, #3
  144a94:	12822003 	addne	r2, r2, #3
  144a98:	e08221ac 	add	r2, r2, ip, lsr #3
  144a9c:	e2623020 	rsb	r3, r2, #32
  144aa0:	e1a0c310 	lsl	ip, r0, r3
  144aa4:	e1a00230 	lsr	r0, r0, r2
  144aa8:	e1800311 	orr	r0, r0, r1, lsl r3
  144aac:	e1a01231 	lsr	r1, r1, r2
  144ab0:	e0844002 	add	r4, r4, r2
  144ab4:	eaffff4d 	b	1447f0 <__adddf3+0xec>

00144ab8 <__aeabi_dmul>:
  144ab8:	e92d4070 	push	{r4, r5, r6, lr}
  144abc:	e3a0c0ff 	mov	ip, #255	; 0xff
  144ac0:	e38ccc07 	orr	ip, ip, #1792	; 0x700
  144ac4:	e01c4a21 	ands	r4, ip, r1, lsr #20
  144ac8:	101c5a23 	andsne	r5, ip, r3, lsr #20
  144acc:	1134000c 	teqne	r4, ip
  144ad0:	1135000c 	teqne	r5, ip
  144ad4:	0b00006f 	bleq	144c98 <__aeabi_dmul+0x1e0>
  144ad8:	e0844005 	add	r4, r4, r5
  144adc:	e0216003 	eor	r6, r1, r3
  144ae0:	e1c11a8c 	bic	r1, r1, ip, lsl #21
  144ae4:	e1c33a8c 	bic	r3, r3, ip, lsl #21
  144ae8:	e1905601 	orrs	r5, r0, r1, lsl #12
  144aec:	11925603 	orrsne	r5, r2, r3, lsl #12
  144af0:	e3811601 	orr	r1, r1, #1048576	; 0x100000
  144af4:	e3833601 	orr	r3, r3, #1048576	; 0x100000
  144af8:	0a00001c 	beq	144b70 <__aeabi_dmul+0xb8>
  144afc:	e08ec290 	umull	ip, lr, r0, r2
  144b00:	e3a05000 	mov	r5, #0
  144b04:	e0a5e291 	umlal	lr, r5, r1, r2
  144b08:	e2062102 	and	r2, r6, #-2147483648	; 0x80000000
  144b0c:	e0a5e390 	umlal	lr, r5, r0, r3
  144b10:	e3a06000 	mov	r6, #0
  144b14:	e0a65391 	umlal	r5, r6, r1, r3
  144b18:	e33c0000 	teq	ip, #0
  144b1c:	138ee001 	orrne	lr, lr, #1
  144b20:	e24440ff 	sub	r4, r4, #255	; 0xff
  144b24:	e3560c02 	cmp	r6, #512	; 0x200
  144b28:	e2c44c03 	sbc	r4, r4, #768	; 0x300
  144b2c:	2a000002 	bcs	144b3c <__aeabi_dmul+0x84>
  144b30:	e1b0e08e 	lsls	lr, lr, #1
  144b34:	e0b55005 	adcs	r5, r5, r5
  144b38:	e0a66006 	adc	r6, r6, r6
  144b3c:	e1821586 	orr	r1, r2, r6, lsl #11
  144b40:	e1811aa5 	orr	r1, r1, r5, lsr #21
  144b44:	e1a00585 	lsl	r0, r5, #11
  144b48:	e1800aae 	orr	r0, r0, lr, lsr #21
  144b4c:	e1a0e58e 	lsl	lr, lr, #11
  144b50:	e254c0fd 	subs	ip, r4, #253	; 0xfd
  144b54:	835c0c07 	cmphi	ip, #1792	; 0x700
  144b58:	8a00000f 	bhi	144b9c <__aeabi_dmul+0xe4>
  144b5c:	e35e0102 	cmp	lr, #-2147483648	; 0x80000000
  144b60:	01b0e0a0 	lsrseq	lr, r0, #1
  144b64:	e2b00000 	adcs	r0, r0, #0
  144b68:	e0a11a04 	adc	r1, r1, r4, lsl #20
  144b6c:	e8bd8070 	pop	{r4, r5, r6, pc}
  144b70:	e2066102 	and	r6, r6, #-2147483648	; 0x80000000
  144b74:	e1861001 	orr	r1, r6, r1
  144b78:	e1800002 	orr	r0, r0, r2
  144b7c:	e0211003 	eor	r1, r1, r3
  144b80:	e05440ac 	subs	r4, r4, ip, lsr #1
  144b84:	c074500c 	rsbsgt	r5, r4, ip
  144b88:	c1811a04 	orrgt	r1, r1, r4, lsl #20
  144b8c:	c8bd8070 	popgt	{r4, r5, r6, pc}
  144b90:	e3811601 	orr	r1, r1, #1048576	; 0x100000
  144b94:	e3a0e000 	mov	lr, #0
  144b98:	e2544001 	subs	r4, r4, #1
  144b9c:	ca000058 	bgt	144d04 <__aeabi_dmul+0x24c>
  144ba0:	e3740036 	cmn	r4, #54	; 0x36
  144ba4:	d3a00000 	movle	r0, #0
  144ba8:	d2011102 	andle	r1, r1, #-2147483648	; 0x80000000
  144bac:	d8bd8070 	pople	{r4, r5, r6, pc}
  144bb0:	e2644000 	rsb	r4, r4, #0
  144bb4:	e2544020 	subs	r4, r4, #32
  144bb8:	aa000018 	bge	144c20 <__aeabi_dmul+0x168>
  144bbc:	e294400c 	adds	r4, r4, #12
  144bc0:	ca00000b 	bgt	144bf4 <__aeabi_dmul+0x13c>
  144bc4:	e2844014 	add	r4, r4, #20
  144bc8:	e2645020 	rsb	r5, r4, #32
  144bcc:	e1a03510 	lsl	r3, r0, r5
  144bd0:	e1a00430 	lsr	r0, r0, r4
  144bd4:	e1800511 	orr	r0, r0, r1, lsl r5
  144bd8:	e2012102 	and	r2, r1, #-2147483648	; 0x80000000
  144bdc:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
  144be0:	e0900fa3 	adds	r0, r0, r3, lsr #31
  144be4:	e0a21431 	adc	r1, r2, r1, lsr r4
  144be8:	e19ee083 	orrs	lr, lr, r3, lsl #1
  144bec:	01c00fa3 	biceq	r0, r0, r3, lsr #31
  144bf0:	e8bd8070 	pop	{r4, r5, r6, pc}
  144bf4:	e264400c 	rsb	r4, r4, #12
  144bf8:	e2645020 	rsb	r5, r4, #32
  144bfc:	e1a03410 	lsl	r3, r0, r4
  144c00:	e1a00530 	lsr	r0, r0, r5
  144c04:	e1800411 	orr	r0, r0, r1, lsl r4
  144c08:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
  144c0c:	e0900fa3 	adds	r0, r0, r3, lsr #31
  144c10:	e2a11000 	adc	r1, r1, #0
  144c14:	e19ee083 	orrs	lr, lr, r3, lsl #1
  144c18:	01c00fa3 	biceq	r0, r0, r3, lsr #31
  144c1c:	e8bd8070 	pop	{r4, r5, r6, pc}
  144c20:	e2645020 	rsb	r5, r4, #32
  144c24:	e18ee510 	orr	lr, lr, r0, lsl r5
  144c28:	e1a03430 	lsr	r3, r0, r4
  144c2c:	e1833511 	orr	r3, r3, r1, lsl r5
  144c30:	e1a00431 	lsr	r0, r1, r4
  144c34:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
  144c38:	e1c00431 	bic	r0, r0, r1, lsr r4
  144c3c:	e0800fa3 	add	r0, r0, r3, lsr #31
  144c40:	e19ee083 	orrs	lr, lr, r3, lsl #1
  144c44:	01c00fa3 	biceq	r0, r0, r3, lsr #31
  144c48:	e8bd8070 	pop	{r4, r5, r6, pc}
  144c4c:	e3340000 	teq	r4, #0
  144c50:	1a000008 	bne	144c78 <__aeabi_dmul+0x1c0>
  144c54:	e2016102 	and	r6, r1, #-2147483648	; 0x80000000
  144c58:	e1b00080 	lsls	r0, r0, #1
  144c5c:	e0a11001 	adc	r1, r1, r1
  144c60:	e3110601 	tst	r1, #1048576	; 0x100000
  144c64:	02444001 	subeq	r4, r4, #1
  144c68:	0afffffa 	beq	144c58 <__aeabi_dmul+0x1a0>
  144c6c:	e1811006 	orr	r1, r1, r6
  144c70:	e3350000 	teq	r5, #0
  144c74:	112fff1e 	bxne	lr
  144c78:	e2036102 	and	r6, r3, #-2147483648	; 0x80000000
  144c7c:	e1b02082 	lsls	r2, r2, #1
  144c80:	e0a33003 	adc	r3, r3, r3
  144c84:	e3130601 	tst	r3, #1048576	; 0x100000
  144c88:	02455001 	subeq	r5, r5, #1
  144c8c:	0afffffa 	beq	144c7c <__aeabi_dmul+0x1c4>
  144c90:	e1833006 	orr	r3, r3, r6
  144c94:	e12fff1e 	bx	lr
  144c98:	e134000c 	teq	r4, ip
  144c9c:	e00c5a23 	and	r5, ip, r3, lsr #20
  144ca0:	1135000c 	teqne	r5, ip
  144ca4:	0a000006 	beq	144cc4 <__aeabi_dmul+0x20c>
  144ca8:	e1906081 	orrs	r6, r0, r1, lsl #1
  144cac:	11926083 	orrsne	r6, r2, r3, lsl #1
  144cb0:	1affffe5 	bne	144c4c <__aeabi_dmul+0x194>
  144cb4:	e0211003 	eor	r1, r1, r3
  144cb8:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
  144cbc:	e3a00000 	mov	r0, #0
  144cc0:	e8bd8070 	pop	{r4, r5, r6, pc}
  144cc4:	e1906081 	orrs	r6, r0, r1, lsl #1
  144cc8:	01a00002 	moveq	r0, r2
  144ccc:	01a01003 	moveq	r1, r3
  144cd0:	11926083 	orrsne	r6, r2, r3, lsl #1
  144cd4:	0a00000f 	beq	144d18 <__aeabi_dmul+0x260>
  144cd8:	e134000c 	teq	r4, ip
  144cdc:	1a000001 	bne	144ce8 <__aeabi_dmul+0x230>
  144ce0:	e1906601 	orrs	r6, r0, r1, lsl #12
  144ce4:	1a00000b 	bne	144d18 <__aeabi_dmul+0x260>
  144ce8:	e135000c 	teq	r5, ip
  144cec:	1a000003 	bne	144d00 <__aeabi_dmul+0x248>
  144cf0:	e1926603 	orrs	r6, r2, r3, lsl #12
  144cf4:	11a00002 	movne	r0, r2
  144cf8:	11a01003 	movne	r1, r3
  144cfc:	1a000005 	bne	144d18 <__aeabi_dmul+0x260>
  144d00:	e0211003 	eor	r1, r1, r3
  144d04:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
  144d08:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
  144d0c:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
  144d10:	e3a00000 	mov	r0, #0
  144d14:	e8bd8070 	pop	{r4, r5, r6, pc}
  144d18:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
  144d1c:	e381173e 	orr	r1, r1, #16252928	; 0xf80000
  144d20:	e8bd8070 	pop	{r4, r5, r6, pc}

00144d24 <__aeabi_ddiv>:
  144d24:	e92d4070 	push	{r4, r5, r6, lr}
  144d28:	e3a0c0ff 	mov	ip, #255	; 0xff
  144d2c:	e38ccc07 	orr	ip, ip, #1792	; 0x700
  144d30:	e01c4a21 	ands	r4, ip, r1, lsr #20
  144d34:	101c5a23 	andsne	r5, ip, r3, lsr #20
  144d38:	1134000c 	teqne	r4, ip
  144d3c:	1135000c 	teqne	r5, ip
  144d40:	0b00005c 	bleq	144eb8 <__aeabi_ddiv+0x194>
  144d44:	e0444005 	sub	r4, r4, r5
  144d48:	e021e003 	eor	lr, r1, r3
  144d4c:	e1925603 	orrs	r5, r2, r3, lsl #12
  144d50:	e1a01601 	lsl	r1, r1, #12
  144d54:	0a00004b 	beq	144e88 <__aeabi_ddiv+0x164>
  144d58:	e1a03603 	lsl	r3, r3, #12
  144d5c:	e3a05201 	mov	r5, #268435456	; 0x10000000
  144d60:	e1853223 	orr	r3, r5, r3, lsr #4
  144d64:	e1833c22 	orr	r3, r3, r2, lsr #24
  144d68:	e1a02402 	lsl	r2, r2, #8
  144d6c:	e1855221 	orr	r5, r5, r1, lsr #4
  144d70:	e1855c20 	orr	r5, r5, r0, lsr #24
  144d74:	e1a06400 	lsl	r6, r0, #8
  144d78:	e20e1102 	and	r1, lr, #-2147483648	; 0x80000000
  144d7c:	e1550003 	cmp	r5, r3
  144d80:	01560002 	cmpeq	r6, r2
  144d84:	e2a440fd 	adc	r4, r4, #253	; 0xfd
  144d88:	e2844c03 	add	r4, r4, #768	; 0x300
  144d8c:	2a000001 	bcs	144d98 <__aeabi_ddiv+0x74>
  144d90:	e1b030a3 	lsrs	r3, r3, #1
  144d94:	e1a02062 	rrx	r2, r2
  144d98:	e0566002 	subs	r6, r6, r2
  144d9c:	e0c55003 	sbc	r5, r5, r3
  144da0:	e1b030a3 	lsrs	r3, r3, #1
  144da4:	e1a02062 	rrx	r2, r2
  144da8:	e3a00601 	mov	r0, #1048576	; 0x100000
  144dac:	e3a0c702 	mov	ip, #524288	; 0x80000
  144db0:	e056e002 	subs	lr, r6, r2
  144db4:	e0d5e003 	sbcs	lr, r5, r3
  144db8:	20466002 	subcs	r6, r6, r2
  144dbc:	21a0500e 	movcs	r5, lr
  144dc0:	2180000c 	orrcs	r0, r0, ip
  144dc4:	e1b030a3 	lsrs	r3, r3, #1
  144dc8:	e1a02062 	rrx	r2, r2
  144dcc:	e056e002 	subs	lr, r6, r2
  144dd0:	e0d5e003 	sbcs	lr, r5, r3
  144dd4:	20466002 	subcs	r6, r6, r2
  144dd8:	21a0500e 	movcs	r5, lr
  144ddc:	218000ac 	orrcs	r0, r0, ip, lsr #1
  144de0:	e1b030a3 	lsrs	r3, r3, #1
  144de4:	e1a02062 	rrx	r2, r2
  144de8:	e056e002 	subs	lr, r6, r2
  144dec:	e0d5e003 	sbcs	lr, r5, r3
  144df0:	20466002 	subcs	r6, r6, r2
  144df4:	21a0500e 	movcs	r5, lr
  144df8:	2180012c 	orrcs	r0, r0, ip, lsr #2
  144dfc:	e1b030a3 	lsrs	r3, r3, #1
  144e00:	e1a02062 	rrx	r2, r2
  144e04:	e056e002 	subs	lr, r6, r2
  144e08:	e0d5e003 	sbcs	lr, r5, r3
  144e0c:	20466002 	subcs	r6, r6, r2
  144e10:	21a0500e 	movcs	r5, lr
  144e14:	218001ac 	orrcs	r0, r0, ip, lsr #3
  144e18:	e195e006 	orrs	lr, r5, r6
  144e1c:	0a00000d 	beq	144e58 <__aeabi_ddiv+0x134>
  144e20:	e1a05205 	lsl	r5, r5, #4
  144e24:	e1855e26 	orr	r5, r5, r6, lsr #28
  144e28:	e1a06206 	lsl	r6, r6, #4
  144e2c:	e1a03183 	lsl	r3, r3, #3
  144e30:	e1833ea2 	orr	r3, r3, r2, lsr #29
  144e34:	e1a02182 	lsl	r2, r2, #3
  144e38:	e1b0c22c 	lsrs	ip, ip, #4
  144e3c:	1affffdb 	bne	144db0 <__aeabi_ddiv+0x8c>
  144e40:	e3110601 	tst	r1, #1048576	; 0x100000
  144e44:	1a000006 	bne	144e64 <__aeabi_ddiv+0x140>
  144e48:	e1811000 	orr	r1, r1, r0
  144e4c:	e3a00000 	mov	r0, #0
  144e50:	e3a0c102 	mov	ip, #-2147483648	; 0x80000000
  144e54:	eaffffd5 	b	144db0 <__aeabi_ddiv+0x8c>
  144e58:	e3110601 	tst	r1, #1048576	; 0x100000
  144e5c:	01811000 	orreq	r1, r1, r0
  144e60:	03a00000 	moveq	r0, #0
  144e64:	e254c0fd 	subs	ip, r4, #253	; 0xfd
  144e68:	835c0c07 	cmphi	ip, #1792	; 0x700
  144e6c:	8affff4a 	bhi	144b9c <__aeabi_dmul+0xe4>
  144e70:	e055c003 	subs	ip, r5, r3
  144e74:	0056c002 	subseq	ip, r6, r2
  144e78:	01b0c0a0 	lsrseq	ip, r0, #1
  144e7c:	e2b00000 	adcs	r0, r0, #0
  144e80:	e0a11a04 	adc	r1, r1, r4, lsl #20
  144e84:	e8bd8070 	pop	{r4, r5, r6, pc}
  144e88:	e20ee102 	and	lr, lr, #-2147483648	; 0x80000000
  144e8c:	e18e1621 	orr	r1, lr, r1, lsr #12
  144e90:	e09440ac 	adds	r4, r4, ip, lsr #1
  144e94:	c074500c 	rsbsgt	r5, r4, ip
  144e98:	c1811a04 	orrgt	r1, r1, r4, lsl #20
  144e9c:	c8bd8070 	popgt	{r4, r5, r6, pc}
  144ea0:	e3811601 	orr	r1, r1, #1048576	; 0x100000
  144ea4:	e3a0e000 	mov	lr, #0
  144ea8:	e2544001 	subs	r4, r4, #1
  144eac:	eaffff3a 	b	144b9c <__aeabi_dmul+0xe4>
  144eb0:	e185e006 	orr	lr, r5, r6
  144eb4:	eaffff38 	b	144b9c <__aeabi_dmul+0xe4>
  144eb8:	e00c5a23 	and	r5, ip, r3, lsr #20
  144ebc:	e134000c 	teq	r4, ip
  144ec0:	0135000c 	teqeq	r5, ip
  144ec4:	0affff93 	beq	144d18 <__aeabi_dmul+0x260>
  144ec8:	e134000c 	teq	r4, ip
  144ecc:	1a000006 	bne	144eec <__aeabi_ddiv+0x1c8>
  144ed0:	e1904601 	orrs	r4, r0, r1, lsl #12
  144ed4:	1affff8f 	bne	144d18 <__aeabi_dmul+0x260>
  144ed8:	e135000c 	teq	r5, ip
  144edc:	1affff87 	bne	144d00 <__aeabi_dmul+0x248>
  144ee0:	e1a00002 	mov	r0, r2
  144ee4:	e1a01003 	mov	r1, r3
  144ee8:	eaffff8a 	b	144d18 <__aeabi_dmul+0x260>
  144eec:	e135000c 	teq	r5, ip
  144ef0:	1a000004 	bne	144f08 <__aeabi_ddiv+0x1e4>
  144ef4:	e1925603 	orrs	r5, r2, r3, lsl #12
  144ef8:	0affff6d 	beq	144cb4 <__aeabi_dmul+0x1fc>
  144efc:	e1a00002 	mov	r0, r2
  144f00:	e1a01003 	mov	r1, r3
  144f04:	eaffff83 	b	144d18 <__aeabi_dmul+0x260>
  144f08:	e1906081 	orrs	r6, r0, r1, lsl #1
  144f0c:	11926083 	orrsne	r6, r2, r3, lsl #1
  144f10:	1affff4d 	bne	144c4c <__aeabi_dmul+0x194>
  144f14:	e1904081 	orrs	r4, r0, r1, lsl #1
  144f18:	1affff78 	bne	144d00 <__aeabi_dmul+0x248>
  144f1c:	e1925083 	orrs	r5, r2, r3, lsl #1
  144f20:	1affff63 	bne	144cb4 <__aeabi_dmul+0x1fc>
  144f24:	eaffff7b 	b	144d18 <__aeabi_dmul+0x260>

00144f28 <__gedf2>:
  144f28:	e3e0c000 	mvn	ip, #0
  144f2c:	ea000002 	b	144f3c <__cmpdf2+0x4>

00144f30 <__ledf2>:
  144f30:	e3a0c001 	mov	ip, #1
  144f34:	ea000000 	b	144f3c <__cmpdf2+0x4>

00144f38 <__cmpdf2>:
  144f38:	e3a0c001 	mov	ip, #1
  144f3c:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
  144f40:	e1a0c081 	lsl	ip, r1, #1
  144f44:	e1f0cacc 	mvns	ip, ip, asr #21
  144f48:	e1a0c083 	lsl	ip, r3, #1
  144f4c:	11f0cacc 	mvnsne	ip, ip, asr #21
  144f50:	0a00000e 	beq	144f90 <__cmpdf2+0x58>
  144f54:	e28dd004 	add	sp, sp, #4
  144f58:	e190c081 	orrs	ip, r0, r1, lsl #1
  144f5c:	0192c083 	orrseq	ip, r2, r3, lsl #1
  144f60:	11310003 	teqne	r1, r3
  144f64:	01300002 	teqeq	r0, r2
  144f68:	03a00000 	moveq	r0, #0
  144f6c:	012fff1e 	bxeq	lr
  144f70:	e3700000 	cmn	r0, #0
  144f74:	e1310003 	teq	r1, r3
  144f78:	51510003 	cmppl	r1, r3
  144f7c:	01500002 	cmpeq	r0, r2
  144f80:	21a00fc3 	asrcs	r0, r3, #31
  144f84:	31e00fc3 	mvncc	r0, r3, asr #31
  144f88:	e3800001 	orr	r0, r0, #1
  144f8c:	e12fff1e 	bx	lr
  144f90:	e1a0c081 	lsl	ip, r1, #1
  144f94:	e1f0cacc 	mvns	ip, ip, asr #21
  144f98:	1a000001 	bne	144fa4 <__cmpdf2+0x6c>
  144f9c:	e190c601 	orrs	ip, r0, r1, lsl #12
  144fa0:	1a000004 	bne	144fb8 <__cmpdf2+0x80>
  144fa4:	e1a0c083 	lsl	ip, r3, #1
  144fa8:	e1f0cacc 	mvns	ip, ip, asr #21
  144fac:	1affffe8 	bne	144f54 <__cmpdf2+0x1c>
  144fb0:	e192c603 	orrs	ip, r2, r3, lsl #12
  144fb4:	0affffe6 	beq	144f54 <__cmpdf2+0x1c>
  144fb8:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
  144fbc:	e12fff1e 	bx	lr

00144fc0 <__aeabi_cdrcmple>:
  144fc0:	e1a0c000 	mov	ip, r0
  144fc4:	e1a00002 	mov	r0, r2
  144fc8:	e1a0200c 	mov	r2, ip
  144fcc:	e1a0c001 	mov	ip, r1
  144fd0:	e1a01003 	mov	r1, r3
  144fd4:	e1a0300c 	mov	r3, ip
  144fd8:	eaffffff 	b	144fdc <__aeabi_cdcmpeq>

00144fdc <__aeabi_cdcmpeq>:
  144fdc:	e92d4001 	push	{r0, lr}
  144fe0:	ebffffd4 	bl	144f38 <__cmpdf2>
  144fe4:	e3500000 	cmp	r0, #0
  144fe8:	43700000 	cmnmi	r0, #0
  144fec:	e8bd8001 	pop	{r0, pc}

00144ff0 <__aeabi_dcmpeq>:
  144ff0:	e52de008 	str	lr, [sp, #-8]!
  144ff4:	ebfffff8 	bl	144fdc <__aeabi_cdcmpeq>
  144ff8:	03a00001 	moveq	r0, #1
  144ffc:	13a00000 	movne	r0, #0
  145000:	e49df008 	ldr	pc, [sp], #8

00145004 <__aeabi_dcmplt>:
  145004:	e52de008 	str	lr, [sp, #-8]!
  145008:	ebfffff3 	bl	144fdc <__aeabi_cdcmpeq>
  14500c:	33a00001 	movcc	r0, #1
  145010:	23a00000 	movcs	r0, #0
  145014:	e49df008 	ldr	pc, [sp], #8

00145018 <__aeabi_dcmple>:
  145018:	e52de008 	str	lr, [sp, #-8]!
  14501c:	ebffffee 	bl	144fdc <__aeabi_cdcmpeq>
  145020:	93a00001 	movls	r0, #1
  145024:	83a00000 	movhi	r0, #0
  145028:	e49df008 	ldr	pc, [sp], #8

0014502c <__aeabi_dcmpge>:
  14502c:	e52de008 	str	lr, [sp, #-8]!
  145030:	ebffffe2 	bl	144fc0 <__aeabi_cdrcmple>
  145034:	93a00001 	movls	r0, #1
  145038:	83a00000 	movhi	r0, #0
  14503c:	e49df008 	ldr	pc, [sp], #8

00145040 <__aeabi_dcmpgt>:
  145040:	e52de008 	str	lr, [sp, #-8]!
  145044:	ebffffdd 	bl	144fc0 <__aeabi_cdrcmple>
  145048:	33a00001 	movcc	r0, #1
  14504c:	23a00000 	movcs	r0, #0
  145050:	e49df008 	ldr	pc, [sp], #8

00145054 <__aeabi_d2iz>:
  145054:	e1a02081 	lsl	r2, r1, #1
  145058:	e2922602 	adds	r2, r2, #2097152	; 0x200000
  14505c:	2a00000c 	bcs	145094 <__aeabi_d2iz+0x40>
  145060:	5a000009 	bpl	14508c <__aeabi_d2iz+0x38>
  145064:	e3e03e3e 	mvn	r3, #992	; 0x3e0
  145068:	e0532ac2 	subs	r2, r3, r2, asr #21
  14506c:	9a00000a 	bls	14509c <__aeabi_d2iz+0x48>
  145070:	e1a03581 	lsl	r3, r1, #11
  145074:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
  145078:	e1833aa0 	orr	r3, r3, r0, lsr #21
  14507c:	e3110102 	tst	r1, #-2147483648	; 0x80000000
  145080:	e1a00233 	lsr	r0, r3, r2
  145084:	12600000 	rsbne	r0, r0, #0
  145088:	e12fff1e 	bx	lr
  14508c:	e3a00000 	mov	r0, #0
  145090:	e12fff1e 	bx	lr
  145094:	e1900601 	orrs	r0, r0, r1, lsl #12
  145098:	1a000002 	bne	1450a8 <__aeabi_d2iz+0x54>
  14509c:	e2110102 	ands	r0, r1, #-2147483648	; 0x80000000
  1450a0:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
  1450a4:	e12fff1e 	bx	lr
  1450a8:	e3a00000 	mov	r0, #0
  1450ac:	e12fff1e 	bx	lr

001450b0 <__aeabi_d2uiz>:
  1450b0:	e1b02081 	lsls	r2, r1, #1
  1450b4:	2a00000a 	bcs	1450e4 <__aeabi_d2uiz+0x34>
  1450b8:	e2922602 	adds	r2, r2, #2097152	; 0x200000
  1450bc:	2a00000a 	bcs	1450ec <__aeabi_d2uiz+0x3c>
  1450c0:	5a000007 	bpl	1450e4 <__aeabi_d2uiz+0x34>
  1450c4:	e3e03e3e 	mvn	r3, #992	; 0x3e0
  1450c8:	e0532ac2 	subs	r2, r3, r2, asr #21
  1450cc:	4a000008 	bmi	1450f4 <__aeabi_d2uiz+0x44>
  1450d0:	e1a03581 	lsl	r3, r1, #11
  1450d4:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
  1450d8:	e1833aa0 	orr	r3, r3, r0, lsr #21
  1450dc:	e1a00233 	lsr	r0, r3, r2
  1450e0:	e12fff1e 	bx	lr
  1450e4:	e3a00000 	mov	r0, #0
  1450e8:	e12fff1e 	bx	lr
  1450ec:	e1900601 	orrs	r0, r0, r1, lsl #12
  1450f0:	1a000001 	bne	1450fc <__aeabi_d2uiz+0x4c>
  1450f4:	e3e00000 	mvn	r0, #0
  1450f8:	e12fff1e 	bx	lr
  1450fc:	e3a00000 	mov	r0, #0
  145100:	e12fff1e 	bx	lr

00145104 <__aeabi_ldivmod>:
  145104:	e3530000 	cmp	r3, #0
  145108:	03520000 	cmpeq	r2, #0
  14510c:	1a000007 	bne	145130 <__aeabi_ldivmod+0x2c>
  145110:	e3510000 	cmp	r1, #0
  145114:	b3a01102 	movlt	r1, #-2147483648	; 0x80000000
  145118:	b3a00000 	movlt	r0, #0
  14511c:	ba000002 	blt	14512c <__aeabi_ldivmod+0x28>
  145120:	03500000 	cmpeq	r0, #0
  145124:	13e01102 	mvnne	r1, #-2147483648	; 0x80000000
  145128:	13e00000 	mvnne	r0, #0
  14512c:	eaffcee4 	b	138cc4 <__aeabi_idiv0>
  145130:	e24dd008 	sub	sp, sp, #8
  145134:	e92d6000 	push	{sp, lr}
  145138:	e3510000 	cmp	r1, #0
  14513c:	ba000006 	blt	14515c <__aeabi_ldivmod+0x58>
  145140:	e3530000 	cmp	r3, #0
  145144:	ba000011 	blt	145190 <__aeabi_ldivmod+0x8c>
  145148:	eb000031 	bl	145214 <__udivmoddi4>
  14514c:	e59de004 	ldr	lr, [sp, #4]
  145150:	e28dd008 	add	sp, sp, #8
  145154:	e8bd000c 	pop	{r2, r3}
  145158:	e12fff1e 	bx	lr
  14515c:	e2700000 	rsbs	r0, r0, #0
  145160:	e0c11081 	sbc	r1, r1, r1, lsl #1
  145164:	e3530000 	cmp	r3, #0
  145168:	ba000011 	blt	1451b4 <__aeabi_ldivmod+0xb0>
  14516c:	eb000028 	bl	145214 <__udivmoddi4>
  145170:	e59de004 	ldr	lr, [sp, #4]
  145174:	e28dd008 	add	sp, sp, #8
  145178:	e8bd000c 	pop	{r2, r3}
  14517c:	e2700000 	rsbs	r0, r0, #0
  145180:	e0c11081 	sbc	r1, r1, r1, lsl #1
  145184:	e2722000 	rsbs	r2, r2, #0
  145188:	e0c33083 	sbc	r3, r3, r3, lsl #1
  14518c:	e12fff1e 	bx	lr
  145190:	e2722000 	rsbs	r2, r2, #0
  145194:	e0c33083 	sbc	r3, r3, r3, lsl #1
  145198:	eb00001d 	bl	145214 <__udivmoddi4>
  14519c:	e59de004 	ldr	lr, [sp, #4]
  1451a0:	e28dd008 	add	sp, sp, #8
  1451a4:	e8bd000c 	pop	{r2, r3}
  1451a8:	e2700000 	rsbs	r0, r0, #0
  1451ac:	e0c11081 	sbc	r1, r1, r1, lsl #1
  1451b0:	e12fff1e 	bx	lr
  1451b4:	e2722000 	rsbs	r2, r2, #0
  1451b8:	e0c33083 	sbc	r3, r3, r3, lsl #1
  1451bc:	eb000014 	bl	145214 <__udivmoddi4>
  1451c0:	e59de004 	ldr	lr, [sp, #4]
  1451c4:	e28dd008 	add	sp, sp, #8
  1451c8:	e8bd000c 	pop	{r2, r3}
  1451cc:	e2722000 	rsbs	r2, r2, #0
  1451d0:	e0c33083 	sbc	r3, r3, r3, lsl #1
  1451d4:	e12fff1e 	bx	lr

001451d8 <__aeabi_uldivmod>:
  1451d8:	e3530000 	cmp	r3, #0
  1451dc:	03520000 	cmpeq	r2, #0
  1451e0:	1a000004 	bne	1451f8 <__aeabi_uldivmod+0x20>
  1451e4:	e3510000 	cmp	r1, #0
  1451e8:	03500000 	cmpeq	r0, #0
  1451ec:	13e01000 	mvnne	r1, #0
  1451f0:	13e00000 	mvnne	r0, #0
  1451f4:	eaffceb2 	b	138cc4 <__aeabi_idiv0>
  1451f8:	e24dd008 	sub	sp, sp, #8
  1451fc:	e92d6000 	push	{sp, lr}
  145200:	eb000003 	bl	145214 <__udivmoddi4>
  145204:	e59de004 	ldr	lr, [sp, #4]
  145208:	e28dd008 	add	sp, sp, #8
  14520c:	e8bd000c 	pop	{r2, r3}
  145210:	e12fff1e 	bx	lr

00145214 <__udivmoddi4>:
  145214:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  145218:	e1510003 	cmp	r1, r3
  14521c:	e24dd008 	sub	sp, sp, #8
  145220:	01500002 	cmpeq	r0, r2
  145224:	e1a09000 	mov	r9, r0
  145228:	e1a0a001 	mov	sl, r1
  14522c:	e59d8028 	ldr	r8, [sp, #40]	; 0x28
  145230:	3a00003c 	bcc	145328 <__udivmoddi4+0x114>
  145234:	e1a00002 	mov	r0, r2
  145238:	e3530000 	cmp	r3, #0
  14523c:	e1a01003 	mov	r1, r3
  145240:	016f3f10 	clzeq	r3, r0
  145244:	116f2f13 	clzne	r2, r3
  145248:	02832020 	addeq	r2, r3, #32
  14524c:	e35a0000 	cmp	sl, #0
  145250:	016f3f19 	clzeq	r3, r9
  145254:	116f3f1a 	clzne	r3, sl
  145258:	02833020 	addeq	r3, r3, #32
  14525c:	e0423003 	sub	r3, r2, r3
  145260:	e243c020 	sub	ip, r3, #32
  145264:	e1a07311 	lsl	r7, r1, r3
  145268:	e1877c10 	orr	r7, r7, r0, lsl ip
  14526c:	e263e020 	rsb	lr, r3, #32
  145270:	e1877e30 	orr	r7, r7, r0, lsr lr
  145274:	e1a06310 	lsl	r6, r0, r3
  145278:	e15a0007 	cmp	sl, r7
  14527c:	01590006 	cmpeq	r9, r6
  145280:	2a000030 	bcs	145348 <__udivmoddi4+0x134>
  145284:	e3a01000 	mov	r1, #0
  145288:	e3a02000 	mov	r2, #0
  14528c:	e88d0006 	stm	sp, {r1, r2}
  145290:	e3530000 	cmp	r3, #0
  145294:	0a000026 	beq	145334 <__udivmoddi4+0x120>
  145298:	e1b070a7 	lsrs	r7, r7, #1
  14529c:	e1a06066 	rrx	r6, r6
  1452a0:	e1a02003 	mov	r2, r3
  1452a4:	ea000007 	b	1452c8 <__udivmoddi4+0xb4>
  1452a8:	e0590006 	subs	r0, r9, r6
  1452ac:	e0ca1007 	sbc	r1, sl, r7
  1452b0:	e0904000 	adds	r4, r0, r0
  1452b4:	e0a15001 	adc	r5, r1, r1
  1452b8:	e2949001 	adds	r9, r4, #1
  1452bc:	e2a5a000 	adc	sl, r5, #0
  1452c0:	e2522001 	subs	r2, r2, #1
  1452c4:	0a000006 	beq	1452e4 <__udivmoddi4+0xd0>
  1452c8:	e15a0007 	cmp	sl, r7
  1452cc:	01590006 	cmpeq	r9, r6
  1452d0:	2afffff4 	bcs	1452a8 <__udivmoddi4+0x94>
  1452d4:	e0999009 	adds	r9, r9, r9
  1452d8:	e0aaa00a 	adc	sl, sl, sl
  1452dc:	e2522001 	subs	r2, r2, #1
  1452e0:	1afffff8 	bne	1452c8 <__udivmoddi4+0xb4>
  1452e4:	e89d00c0 	ldm	sp, {r6, r7}
  1452e8:	e1a02339 	lsr	r2, r9, r3
  1452ec:	e0966009 	adds	r6, r6, r9
  1452f0:	e1822e1a 	orr	r2, r2, sl, lsl lr
  1452f4:	e1a0133a 	lsr	r1, sl, r3
  1452f8:	e1822c3a 	orr	r2, r2, sl, lsr ip
  1452fc:	e0a7700a 	adc	r7, r7, sl
  145300:	e1a0a001 	mov	sl, r1
  145304:	e1a0131a 	lsl	r1, sl, r3
  145308:	e1811c12 	orr	r1, r1, r2, lsl ip
  14530c:	e1a00312 	lsl	r0, r2, r3
  145310:	e0566000 	subs	r6, r6, r0
  145314:	e1811e32 	orr	r1, r1, r2, lsr lr
  145318:	e0c77001 	sbc	r7, r7, r1
  14531c:	e1a09002 	mov	r9, r2
  145320:	e88d00c0 	stm	sp, {r6, r7}
  145324:	ea000002 	b	145334 <__udivmoddi4+0x120>
  145328:	e3a03000 	mov	r3, #0
  14532c:	e3a04000 	mov	r4, #0
  145330:	e88d0018 	stm	sp, {r3, r4}
  145334:	e3580000 	cmp	r8, #0
  145338:	18880600 	stmne	r8, {r9, sl}
  14533c:	e89d0003 	ldm	sp, {r0, r1}
  145340:	e28dd008 	add	sp, sp, #8
  145344:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  145348:	e3a02001 	mov	r2, #1
  14534c:	e1a01c12 	lsl	r1, r2, ip
  145350:	e1811e32 	orr	r1, r1, r2, lsr lr
  145354:	e0599006 	subs	r9, r9, r6
  145358:	e1a02312 	lsl	r2, r2, r3
  14535c:	e58d1004 	str	r1, [sp, #4]
  145360:	e0caa007 	sbc	sl, sl, r7
  145364:	e58d2000 	str	r2, [sp]
  145368:	eaffffc8 	b	145290 <__udivmoddi4+0x7c>

0014536c <_init>:
  14536c:	e92d4001 	push	{r0, lr}
  145370:	e8bd4001 	pop	{r0, lr}
  145374:	e12fff1e 	bx	lr

00145378 <_fini>:
  145378:	e92d4001 	push	{r0, lr}
  14537c:	e8bd4001 	pop	{r0, lr}
  145380:	e12fff1e 	bx	lr
  145384:	706d6f63 	.word	0x706d6f63
  145388:	6974656c 	.word	0x6974656c
  14538c:	00006e6f 	.word	0x00006e6f
  145390:	20746553 	.word	0x20746553
  145394:	6c626f6e 	.word	0x6c626f6e
  145398:	696b636f 	.word	0x696b636f
  14539c:	6520676e 	.word	0x6520676e
  1453a0:	726f7272 	.word	0x726f7272
  1453a4:	00000021 	.word	0x00000021
  1453a8:	61657243 	.word	0x61657243
  1453ac:	6c206574 	.word	0x6c206574
  1453b0:	65747369 	.word	0x65747369
  1453b4:	2064666e 	.word	0x2064666e
  1453b8:	6b636f73 	.word	0x6b636f73
  1453bc:	65207465 	.word	0x65207465
  1453c0:	726f7272 	.word	0x726f7272
  1453c4:	7325203a 	.word	0x7325203a
  1453c8:	72726528 	.word	0x72726528
  1453cc:	203a6f6e 	.word	0x203a6f6e
  1453d0:	0a296425 	.word	0x0a296425
  1453d4:	00000000 	.word	0x00000000
  1453d8:	73746553 	.word	0x73746553
  1453dc:	6f6b636f 	.word	0x6f6b636f
  1453e0:	72207470 	.word	0x72207470
  1453e4:	65737565 	.word	0x65737565
  1453e8:	20646461 	.word	0x20646461
  1453ec:	6c696166 	.word	0x6c696166
  1453f0:	00006465 	.word	0x00006465
  1453f4:	646e6942 	.word	0x646e6942
  1453f8:	636f7320 	.word	0x636f7320
  1453fc:	2074656b 	.word	0x2074656b
  145400:	6f727265 	.word	0x6f727265
  145404:	25203a72 	.word	0x25203a72
  145408:	72652873 	.word	0x72652873
  14540c:	3a6f6e72 	.word	0x3a6f6e72
  145410:	29642520 	.word	0x29642520
  145414:	6466202c 	.word	0x6466202c
  145418:	0a64253d 	.word	0x0a64253d
  14541c:	00000000 	.word	0x00000000
  145420:	7473694c 	.word	0x7473694c
  145424:	73206e65 	.word	0x73206e65
  145428:	656b636f 	.word	0x656b636f
  14542c:	72652074 	.word	0x72652074
  145430:	3a726f72 	.word	0x3a726f72
  145434:	28732520 	.word	0x28732520
  145438:	6e727265 	.word	0x6e727265
  14543c:	25203a6f 	.word	0x25203a6f
  145440:	000a2964 	.word	0x000a2964
  145444:	61657243 	.word	0x61657243
  145448:	63206574 	.word	0x63206574
  14544c:	6e65696c 	.word	0x6e65696c
  145450:	20646674 	.word	0x20646674
  145454:	6b636f73 	.word	0x6b636f73
  145458:	65207465 	.word	0x65207465
  14545c:	726f7272 	.word	0x726f7272
  145460:	7325203a 	.word	0x7325203a
  145464:	72726528 	.word	0x72726528
  145468:	203a6f6e 	.word	0x203a6f6e
  14546c:	0a296425 	.word	0x0a296425
  145470:	00000000 	.word	0x00000000
  145474:	656c6573 	.word	0x656c6573
  145478:	65207463 	.word	0x65207463
  14547c:	726f7272 	.word	0x726f7272
  145480:	00000000 	.word	0x00000000
  145484:	746e6f63 	.word	0x746e6f63
  145488:	65756e69 	.word	0x65756e69
  14548c:	00000000 	.word	0x00000000
  145490:	69745f75 	.word	0x69745f75
  145494:	0072656d 	.word	0x0072656d
  145498:	5f6d7475 	.word	0x5f6d7475
  14549c:	6574756d 	.word	0x6574756d
  1454a0:	00000078 	.word	0x00000078
  1454a4:	00007325 	.word	0x00007325
  1454a8:	72657355 	.word	0x72657355
  1454ac:	3a505041 	.word	0x3a505041
  1454b0:	73252820 	.word	0x73252820
  1454b4:	73612029 	.word	0x73612029
  1454b8:	74726573 	.word	0x74726573
  1454bc:	206e6f69 	.word	0x206e6f69
  1454c0:	6c696166 	.word	0x6c696166
  1454c4:	61206465 	.word	0x61206465
  1454c8:	75662074 	.word	0x75662074
  1454cc:	6974636e 	.word	0x6974636e
  1454d0:	253a6e6f 	.word	0x253a6e6f
  1454d4:	6c202c73 	.word	0x6c202c73
  1454d8:	20656e69 	.word	0x20656e69
  1454dc:	626d756e 	.word	0x626d756e
  1454e0:	253a7265 	.word	0x253a7265
  1454e4:	000a2064 	.word	0x000a2064
  1454e8:	6e616863 	.word	0x6e616863
  1454ec:	206c656e 	.word	0x206c656e
  1454f0:	30203d3e 	.word	0x30203d3e
  1454f4:	00000000 	.word	0x00000000
  1454f8:	5049776c 	.word	0x5049776c
  1454fc:	0074694b 	.word	0x0074694b
  145500:	61746164 	.word	0x61746164
  145504:	00646e49 	.word	0x00646e49
  145508:	6c207325 	.word	0x6c207325
  14550c:	20656e69 	.word	0x20656e69
  145510:	73206425 	.word	0x73206425
  145514:	74646e65 	.word	0x74646e65
  145518:	7265206f 	.word	0x7265206f
  14551c:	0a726f72 	.word	0x0a726f72
  145520:	00000000 	.word	0x00000000
  145524:	5049776c 	.word	0x5049776c
  145528:	2074694b 	.word	0x2074694b
  14552c:	67617355 	.word	0x67617355
  145530:	090a3a65 	.word	0x090a3a65
  145534:	5049776c 	.word	0x5049776c
  145538:	2074694b 	.word	0x2074694b
  14553c:	20202020 	.word	0x20202020
  145540:	20202020 	.word	0x20202020
  145544:	20202020 	.word	0x20202020
  145548:	203a2020 	.word	0x203a2020
  14554c:	6e757220 	.word	0x6e757220
  145550:	49776c20 	.word	0x49776c20
  145554:	74694b50 	.word	0x74694b50
  145558:	6177202c 	.word	0x6177202c
  14555c:	66207469 	.word	0x66207469
  145560:	6520726f 	.word	0x6520726f
  145564:	65646874 	.word	0x65646874
  145568:	6f742076 	.word	0x6f742076
  14556c:	74746120 	.word	0x74746120
  145570:	0a686361 	.word	0x0a686361
  145574:	49776c09 	.word	0x49776c09
  145578:	74694b50 	.word	0x74694b50
  14557c:	74746120 	.word	0x74746120
  145580:	20686361 	.word	0x20686361
  145584:	653c2020 	.word	0x653c2020
  145588:	3a3e6874 	.word	0x3a3e6874
  14558c:	74612020 	.word	0x74612020
  145590:	68636174 	.word	0x68636174
  145594:	65687420 	.word	0x65687420
  145598:	76656420 	.word	0x76656420
  14559c:	20656369 	.word	0x20656369
  1455a0:	6874653c 	.word	0x6874653c
  1455a4:	6f74203e 	.word	0x6f74203e
  1455a8:	49776c20 	.word	0x49776c20
  1455ac:	74694b50 	.word	0x74694b50
  1455b0:	776c090a 	.word	0x776c090a
  1455b4:	694b5049 	.word	0x694b5049
  1455b8:	65642074 	.word	0x65642074
  1455bc:	61747461 	.word	0x61747461
  1455c0:	3c206863 	.word	0x3c206863
  1455c4:	3e687465 	.word	0x3e687465
  1455c8:	6420203a 	.word	0x6420203a
  1455cc:	74612d65 	.word	0x74612d65
  1455d0:	68636174 	.word	0x68636174
  1455d4:	65687420 	.word	0x65687420
  1455d8:	76656420 	.word	0x76656420
  1455dc:	20656369 	.word	0x20656369
  1455e0:	6874653c 	.word	0x6874653c
  1455e4:	7266203e 	.word	0x7266203e
  1455e8:	6c206d6f 	.word	0x6c206d6f
  1455ec:	4b504977 	.word	0x4b504977
  1455f0:	090a7469 	.word	0x090a7469
  1455f4:	5049776c 	.word	0x5049776c
  1455f8:	2074694b 	.word	0x2074694b
  1455fc:	61666564 	.word	0x61666564
  145600:	20746c75 	.word	0x20746c75
  145604:	74653c20 	.word	0x74653c20
  145608:	203a3e68 	.word	0x203a3e68
  14560c:	74657320 	.word	0x74657320
  145610:	74653c20 	.word	0x74653c20
  145614:	61203e68 	.word	0x61203e68
  145618:	68742073 	.word	0x68742073
  14561c:	65642065 	.word	0x65642065
  145620:	6c756166 	.word	0x6c756166
  145624:	65642074 	.word	0x65642074
  145628:	65636976 	.word	0x65636976
  14562c:	776c090a 	.word	0x776c090a
  145630:	694b5049 	.word	0x694b5049
  145634:	74732074 	.word	0x74732074
  145638:	73757461 	.word	0x73757461
  14563c:	20202020 	.word	0x20202020
  145640:	20202020 	.word	0x20202020
  145644:	7320203a 	.word	0x7320203a
  145648:	20776f68 	.word	0x20776f68
  14564c:	20656874 	.word	0x20656874
  145650:	74617473 	.word	0x74617473
  145654:	6f207375 	.word	0x6f207375
  145658:	75722066 	.word	0x75722066
  14565c:	6e696e6e 	.word	0x6e696e6e
  145660:	776c2067 	.word	0x776c2067
  145664:	494b5049 	.word	0x494b5049
  145668:	00000074 	.word	0x00000074
  14566c:	5049776c 	.word	0x5049776c
  145670:	3a74694b 	.word	0x3a74694b
  145674:	61747320 	.word	0x61747320
  145678:	20737472 	.word	0x20737472
  14567c:	72206f74 	.word	0x72206f74
  145680:	61206e75 	.word	0x61206e75
  145684:	68742073 	.word	0x68742073
  145688:	65732065 	.word	0x65732065
  14568c:	72657672 	.word	0x72657672
  145690:	00000000 	.word	0x00000000
  145694:	2e2e2e20 	.word	0x2e2e2e20
  145698:	6c696166 	.word	0x6c696166
  14569c:	00216465 	.word	0x00216465
  1456a0:	2e2e2e20 	.word	0x2e2e2e20
  1456a4:	70696b73 	.word	0x70696b73
  1456a8:	21646570 	.word	0x21646570
  1456ac:	726c4120 	.word	0x726c4120
  1456b0:	79646165 	.word	0x79646165
  1456b4:	696e6920 	.word	0x696e6920
  1456b8:	6c616974 	.word	0x6c616974
  1456bc:	64657a69 	.word	0x64657a69
  1456c0:	00000000 	.word	0x00000000
  1456c4:	2e2e2e20 	.word	0x2e2e2e20
  1456c8:	63637573 	.word	0x63637573
  1456cc:	65646565 	.word	0x65646565
  1456d0:	00002164 	.word	0x00002164
  1456d4:	5049776c 	.word	0x5049776c
  1456d8:	3a74694b 	.word	0x3a74694b
  1456dc:	696e6920 	.word	0x696e6920
  1456e0:	74652074 	.word	0x74652074
  1456e4:	65642068 	.word	0x65642068
  1456e8:	2e2e2e76 	.word	0x2e2e2e76
  1456ec:	00000000 	.word	0x00000000
  1456f0:	63637573 	.word	0x63637573
  1456f4:	65646565 	.word	0x65646565
  1456f8:	00000064 	.word	0x00000064
  1456fc:	61747461 	.word	0x61747461
  145700:	00006863 	.word	0x00006863
  145704:	5049776c 	.word	0x5049776c
  145708:	3a74694b 	.word	0x3a74694b
  14570c:	74746120 	.word	0x74746120
  145710:	20686361 	.word	0x20686361
  145714:	69766564 	.word	0x69766564
  145718:	25206563 	.word	0x25206563
  14571c:	00000a73 	.word	0x00000a73
  145720:	6e6e6163 	.word	0x6e6e6163
  145724:	6f20746f 	.word	0x6f20746f
  145728:	206e6570 	.word	0x206e6570
  14572c:	61746164 	.word	0x61746164
  145730:	6168635f 	.word	0x6168635f
  145734:	6c656e6e 	.word	0x6c656e6e
  145738:	6c70202c 	.word	0x6c70202c
  14573c:	65736165 	.word	0x65736165
  145740:	6b616d20 	.word	0x6b616d20
  145744:	75732065 	.word	0x75732065
  145748:	6c206572 	.word	0x6c206572
  14574c:	4b504977 	.word	0x4b504977
  145750:	73207469 	.word	0x73207469
  145754:	65767265 	.word	0x65767265
  145758:	73692072 	.word	0x73692072
  14575c:	6e757220 	.word	0x6e757220
  145760:	676e696e 	.word	0x676e696e
  145764:	00000021 	.word	0x00000021
  145768:	74616564 	.word	0x74616564
  14576c:	68636174 	.word	0x68636174
  145770:	00000000 	.word	0x00000000
  145774:	5049776c 	.word	0x5049776c
  145778:	3a74694b 	.word	0x3a74694b
  14577c:	2d656420 	.word	0x2d656420
  145780:	61747461 	.word	0x61747461
  145784:	64206863 	.word	0x64206863
  145788:	63697665 	.word	0x63697665
  14578c:	73252065 	.word	0x73252065
  145790:	0000000a 	.word	0x0000000a
  145794:	61666564 	.word	0x61666564
  145798:	00746c75 	.word	0x00746c75
  14579c:	5049776c 	.word	0x5049776c
  1457a0:	3a74694b 	.word	0x3a74694b
  1457a4:	74657320 	.word	0x74657320
  1457a8:	65687420 	.word	0x65687420
  1457ac:	66656420 	.word	0x66656420
  1457b0:	746c7561 	.word	0x746c7561
  1457b4:	76656420 	.word	0x76656420
  1457b8:	20656369 	.word	0x20656369
  1457bc:	00007325 	.word	0x00007325
  1457c0:	74617473 	.word	0x74617473
  1457c4:	00007375 	.word	0x00007375
  1457c8:	5049776c 	.word	0x5049776c
  1457cc:	3a74694b 	.word	0x3a74694b
  1457d0:	65687420 	.word	0x65687420
  1457d4:	61747320 	.word	0x61747320
  1457d8:	20737574 	.word	0x20737574
  1457dc:	7420666f 	.word	0x7420666f
  1457e0:	61206568 	.word	0x61206568
  1457e4:	63617474 	.word	0x63617474
  1457e8:	20646568 	.word	0x20646568
  1457ec:	69766564 	.word	0x69766564
  1457f0:	20736563 	.word	0x20736563
  1457f4:	66207361 	.word	0x66207361
  1457f8:	6f6c6c6f 	.word	0x6f6c6c6f
  1457fc:	00007377 	.word	0x00007377

00145800 <__func__.9579>:
  145800:	63617473 75725f6b 0000006e              stack_run...

0014580c <__FUNCTION__.6247>:
  14580c:	6e616863 5f6c656e 5f646d63 76636572     channel_cmd_recv
  14581c:	00000000                                ....

00145820 <__FUNCTION__.6253>:
  145820:	6e616863 5f6c656e 5f646d63 6c706572     channel_cmd_repl
  145830:	00000079                                y...

00145834 <__FUNCTION__.6242>:
  145834:	6e616863 5f6c656e 5f646d63 646e6573     channel_cmd_send
  145844:	00000000 3a207325 6c696146 206f7420     ....%s :Fail to 
  145854:	6f6c6c61 65746163 73206120 65726168     allocate a share
  145864:	656d2064 79726f6d 735f2021 6b5f6d68     d memory! _shm_k
  145874:	25207965 000a646c 20656854 6f6c6c61     ey %ld..The allo
  145884:	65746163 68732064 64657261 6d656d20     cated shared mem
  145894:	2079726f 73656f64 2074276e 65766168     ory doesn't have
  1458a4:	76206120 64696c61 64646120 73736572      a valid address
  1458b4:	00000021                                !...

001458b8 <__func__.6282>:
  1458b8:	6e616863 5f6c656e 706d6f63 5f65736f     channel_compose_
  1458c8:	00646d63 6e616863 206c656e 30203d3e     cmd.channel >= 0
  1458d8:	00000000 68746575 7672735f 00000000     ....ueth_srv....
  1458e8:	68746575 746e695f 00000000 6e65706f     ueth_int....open
  1458f8:	20732520 6c696166 000a6465               %s failed..

00145904 <__FUNCTION__.5856>:
  145904:	6e616863 5f6c656e 5f646d63 76636572     channel_cmd_recv
  145914:	00000000                                ....

00145918 <__FUNCTION__.5845>:
  145918:	6e616863 5f6c656e 5f646d63 646e6573     channel_cmd_send
  145928:	6365725f 00000076                       _recv...

00145930 <unet_socket_ops>:
  145930:	00108e10 00108e8c 00108eb8 00108ef0     ................
  145940:	00108f20 00108f58 00108f94 00109044      ...X.......D...
  145950:	001090d8 00109120 00109168 00109198     .... ...h.......
  145960:	001091d0 001048d4 00000000              .....H......

0014596c <unet_netdb_ops>:
  14596c:	00109278 001093b8 001093e8 00109428     x...........(...

0014597c <unet_inet_family>:
  14597c:	00000002 00000002 00145930 0014596c     ........0Y..lY..
  14598c:	6474656e 00007665                       netdev..

00145994 <__FUNCTION__.7159>:
  145994:	5f6c6173 74656e75 74656e5f 5f766564     sal_unet_netdev_
  1459a4:	5f746573 695f6670 006f666e 20766564     set_pf_info.dev 
  1459b4:	52203d21 554e5f54 00004c4c 2d766564     != RT_NULL..dev-
  1459c4:	7261703e 2e746e65 65707974 203d3d20     >parent.type == 
  1459d4:	4f5f5452 63656a62 6c435f74 5f737361     RT_Object_Class_
  1459e4:	69766544 00006563 69206f54 6974696e     Device..To initi
  1459f4:	7a696c61 65642065 65636976 2073253a     alize device:%s 
  145a04:	6c696166 202e6465 20656854 6f727265     failed. The erro
  145a14:	6f632072 69206564 6c252073 00000a64     r code is %ld...

00145a24 <__FUNCTION__.6035>:
  145a24:	68746575 7665645f 5f656369 65726e75     ueth_device_unre
  145a34:	74736967 00007265                       gister..

00145a3c <__FUNCTION__.6044>:
  145a3c:	68746575 7665645f 5f656369 74696e69     ueth_device_init
  145a4c:	00000000                                ....

00145a50 <__FUNCTION__.6049>:
  145a50:	68746575 7665645f 5f656369 736f6c63     ueth_device_clos
  145a60:	00000065                                e...

00145a64 <__FUNCTION__.6055>:
  145a64:	68746575 7665645f 5f656369 746e6f63     ueth_device_cont
  145a74:	006c6f72 6474656e 00007665 656d616e     rol.netdev..name
  145a84:	00000000 31335b1b 2f455b6d 6474656e     .....[31m[E/netd
  145a94:	205d7665 00000000 20656854 7774656e     ev] ....The netw
  145aa4:	206b726f 65746e69 63616672 65642065     ork interface de
  145ab4:	65636976 29732528 746f6e20 70757320     vice(%s) not sup
  145ac4:	74726f70 206f7420 20746573 74617473     port to set stat
  145ad4:	002e7375 6d305b1b 0000000a 20656854     us...[0m....The 
  145ae4:	7774656e 206b726f 65746e69 63616672     network interfac
  145af4:	65642065 65636976 29732528 746f6e20     e device(%s) not
  145b04:	70757320 74726f70 206f7420 20746573      support to set 
  145b14:	50434844 61747320 2e737574 00000000     DHCP status.....
  145b24:	615f7069 00726464 20656854 7774656e     ip_addr.The netw
  145b34:	206b726f 65746e69 63616672 65642065     ork interface de
  145b44:	65636976 29732528 746f6e20 70757320     vice(%s) not sup
  145b54:	74726f70 206f7420 20746573 61205049     port to set IP a
  145b64:	65726464 002e7373 20656854 7774656e     ddress..The netw
  145b74:	206b726f 65746e69 63616672 65642065     ork interface de
  145b84:	65636976 29732528 43484420 61632050     vice(%s) DHCP ca
  145b94:	69626170 7974696c 20736920 62616e65     pability is enab
  145ba4:	202c656c 20746f6e 70707573 2074726f     le, not support 
  145bb4:	20746573 61205049 65726464 002e7373     set IP address..
  145bc4:	6d74656e 006b7361 20656854 7774656e     netmask.The netw
  145bd4:	206b726f 65746e69 63616672 65642065     ork interface de
  145be4:	65636976 29732528 746f6e20 70757320     vice(%s) not sup
  145bf4:	74726f70 206f7420 20746573 6d74656e     port to set netm
  145c04:	206b7361 72646461 2e737365 00000000     ask address.....
  145c14:	20656854 7774656e 206b726f 65746e69     The network inte
  145c24:	63616672 65642065 65636976 29732528     rface device(%s)
  145c34:	43484420 61632050 69626170 7974696c      DHCP capability
  145c44:	20736920 62616e65 202c656c 20746f6e      is enable, not 
  145c54:	70707573 2074726f 20746573 6d74656e     support set netm
  145c64:	206b7361 72646461 2e737365 00000000     ask address.....
  145c74:	00007767 20656854 7774656e 206b726f     gw..The network 
  145c84:	65746e69 63616672 65642065 65636976     interface device
  145c94:	29732528 746f6e20 70757320 74726f70     (%s) not support
  145ca4:	206f7420 20746573 65746167 20796177      to set gateway 
  145cb4:	72646461 2e737365 00000000 20656854     address.....The 
  145cc4:	7774656e 206b726f 65746e69 63616672     network interfac
  145cd4:	65642065 65636976 29732528 43484420     e device(%s) DHC
  145ce4:	61632050 69626170 7974696c 20736920     P capability is 
  145cf4:	62616e65 202c656c 20746f6e 70707573     enable, not supp
  145d04:	2074726f 20746573 65746167 20796177     ort set gateway 
  145d14:	72646461 2e737365 00000000 5f736e64     address.....dns_
  145d24:	76726573 00007265 20656854 626d756e     server..The numb
  145d34:	6f207265 4e442066 65732053 72657672     er of DNS server
  145d44:	64252873 65732029 78652074 64656563     s(%d) set exceed
  145d54:	68742073 616d2065 756d6978 756e206d     s the maximum nu
  145d64:	7265626d 29642528 0000002e 20656854     mber(%d)....The 
  145d74:	7774656e 206b726f 65746e69 63616672     network interfac
  145d84:	65642065 65636976 29732528 746f6e20     e device(%s) not
  145d94:	70757320 74726f70 206f7420 20746573      support to set 
  145da4:	20534e44 76726573 61207265 65726464     DNS server addre
  145db4:	002e7373 74617473 635f7375 626c6c61     ss..status_callb
  145dc4:	006b6361 72646461 6c61635f 6361626c     ack.addr_callbac
  145dd4:	0000006b                                k...

00145dd8 <__FUNCTION__.6920>:
  145dd8:	6474656e 725f7665 73696765 00726574     netdev_register.

00145de8 <__FUNCTION__.6929>:
  145de8:	6474656e 755f7665 6765726e 65747369     netdev_unregiste
  145df8:	00000072                                r...

00145dfc <__FUNCTION__.6975>:
  145dfc:	6474656e 665f7665 6c696d61 65675f79     netdev_family_ge
  145e0c:	00000074                                t...

00145e10 <__FUNCTION__.6982>:
  145e10:	6474656e 735f7665 755f7465 00000070     netdev_set_up...

00145e20 <__FUNCTION__.6986>:
  145e20:	6474656e 735f7665 645f7465 006e776f     netdev_set_down.

00145e30 <__FUNCTION__.6991>:
  145e30:	6474656e 645f7665 5f706368 62616e65     netdev_dhcp_enab
  145e40:	0064656c                                led.

00145e44 <__FUNCTION__.6996>:
  145e44:	6474656e 735f7665 695f7465 64646170     netdev_set_ipadd
  145e54:	00000072                                r...

00145e58 <__FUNCTION__.7001>:
  145e58:	6474656e 735f7665 6e5f7465 616d7465     netdev_set_netma
  145e68:	00006b73                                sk..

00145e6c <__FUNCTION__.7006>:
  145e6c:	6474656e 735f7665 675f7465 00000077     netdev_set_gw...

00145e7c <__FUNCTION__.7012>:
  145e7c:	6474656e 735f7665 645f7465 735f736e     netdev_set_dns_s
  145e8c:	65767265 00000072                       erver...

00145e94 <__FUNCTION__.7017>:
  145e94:	6474656e 735f7665 735f7465 75746174     netdev_set_statu
  145ea4:	61635f73 61626c6c 00006b63              s_callback..

00145eb0 <__FUNCTION__.7022>:
  145eb0:	6474656e 735f7665 615f7465 5f726464     netdev_set_addr_
  145ec0:	6c6c6163 6b636162 00000000              callback....

00145ecc <__FUNCTION__.7027>:
  145ecc:	6474656e 6c5f7665 6c5f776f 6c657665     netdev_low_level
  145edc:	7465735f 6170695f 00726464              _set_ipaddr.

00145ee8 <__FUNCTION__.7032>:
  145ee8:	6474656e 6c5f7665 6c5f776f 6c657665     netdev_low_level
  145ef8:	7465735f 74656e5f 6b73616d 00000000     _set_netmask....

00145f08 <__FUNCTION__.7037>:
  145f08:	6474656e 6c5f7665 6c5f776f 6c657665     netdev_low_level
  145f18:	7465735f 0077675f                       _set_gw.

00145f20 <__FUNCTION__.7044>:
  145f20:	6474656e 6c5f7665 6c5f776f 6c657665     netdev_low_level
  145f30:	7465735f 736e645f 7265735f 00726576     _set_dns_server.
  145f40:	00000030                                0...

00145f44 <__FUNCTION__.5841>:
  145f44:	6474656e 695f7665 64613470 615f7264     netdev_ip4addr_a
  145f54:	006e6f74 31335b1b 2f455b6d 2e6c6173     ton..[31m[E/sal.
  145f64:	5d746b73 00000020 6d206f4e 726f6d65     skt] ...No memor
  145f74:	6f662079 6f732072 74656b63 62617420     y for socket tab
  145f84:	0a2e656c 00000000 6d305b1b 0000000a     le.......[0m....
  145f94:	5f6c6173 6b636f6c 00000000 32335b1b     sal_lock.....[32
  145fa4:	2f495b6d 2e6c6173 5d746b73 00000020     m[I/sal.skt] ...
  145fb4:	6b636f53 41207465 72747362 69746361     Socket Abstracti
  145fc4:	4c206e6f 72657961 696e6920 6c616974     on Layer initial
  145fd4:	20657a69 63637573 2e737365 00000000     ize success.....
  145fe4:	6b6e696c 2d74722e 65726874 6f2e6461     link.rt-thread.o
  145ff4:	00006772 20706553 32203220 00323230     rg..Sep  2 2022.
  146004:	00007325 006e614a 00626546 0072614d     %s..Jan.Feb.Mar.
  146014:	00727041 0079614d 006e754a 006c754a     Apr.May.Jun.Jul.
  146024:	00677541 00706553 0074634f 00766f4e     Aug.Sep.Oct.Nov.
  146034:	00636544 3e2d7473 6b636f73 5b737465     Dec.st->sockets[
  146044:	6b636f73 2d5d7465 67616d3e 3d206369     socket]->magic =
  146054:	4153203d 4f535f4c 54454b43 47414d5f     = SAL_SOCKET_MAG
  146064:	00004349 00000030 20746f6e 646e6966     IC..0...not find
  146074:	74656e20 6b726f77 746e6920 61667265      network interfa
  146084:	64206563 63697665 79622065 6f727020     ce device by pro
  146094:	6f636f74 6166206c 796c696d 29642528     tocol family(%d)
  1460a4:	0000002e 6b636f73 203d2120 4e5f5452     ....sock != RT_N
  1460b4:	004c4c55 2077654e 6b636f73 72207465     ULL.New socket r
  1460c4:	73696765 65726574 61662064 64656c69     egistered failed
  1460d4:	6572202c 6e727574 72726520 2520726f     , return error %
  1460e4:	00002e64 656d616e 00000000 204c4153     d...name....SAL 
  1460f4:	6b636f73 70207465 6f746f72 206c6f63     socket protocol 
  146104:	696d6166 6920796c 7475706e 69616620     family input fai
  146114:	2c64656c 74657220 206e7275 6f727265     led, return erro
  146124:	64252072 0000002e                       r %d....

0014612c <__FUNCTION__.6969>:
  14612c:	5f6c6173 5f746567 6b636f73 00007465     sal_get_socket..

0014613c <__FUNCTION__.6974>:
  14613c:	5f6c6173 6b636f6c 00000000              sal_lock....

00146148 <__FUNCTION__.7032>:
  146148:	6b636f73 645f7465 74656c65 00000065     socket_delete...

00146158 <__FUNCTION__.7057>:
  146158:	5f6c6173 646e6962 00000000 6c207325     sal_bind....%s l
  146168:	20656e69 73206425 74646e65 7265206f     ine %d sendto er
  146178:	0a726f72 00000000                       ror.....

00146180 <__func__.6506>:
  146180:	74656e75 6e65735f 006f7464 20736664     unet_sendto.dfs 
  146190:	65726c61 20796461 74696e69 00000a2e     already init....
  1461a0:	6f6c7366 00006b63 6f6c6466 00006b63     fslock..fdlock..
  1461b0:	00000030 20534644 6e206466 69207765     0...DFS fd new i
  1461c0:	61662073 64656c69 6f432021 20646c75     s failed! Could 
  1461d0:	20746f6e 6e756f66 6e612064 706d6520     not found an emp
  1461e0:	66207974 6e652064 2e797274 00000000     ty fd entry.....
  1461f0:	20746466 4e203d21 004c4c55 735f6466     fdt != NULL.fd_s
  146200:	2d746f6c 67616d3e 3d206369 4644203d     lot->magic == DF
  146210:	44465f53 47414d5f 00004349              S_FD_MAGIC..

0014621c <__FUNCTION__.6409>:
  14621c:	5f736664 6b636f6c 00000000              dfs_lock....

00146228 <__FUNCTION__.6417>:
  146228:	5f736664 6c5f6466 006b636f              dfs_fd_lock.

00146234 <__FUNCTION__.6470>:
  146234:	5f746466 725f6466 61656c65 00006573     fdt_fd_release..
  146244:	5f736664 0072676d                       dfs_mgr.

0014624c <_net_fops>:
  14624c:	0010a3f0 0010a26c 0010a2e0 0010a368     ....l.......h...
  14625c:	0010a448 7069776c 73797320 206d6574     H...lwip system 
  14626c:	65726c61 20796461 74696e69 00000a2e     already init....
  14627c:	656e6f64 00000000 6c696146 74206465     done....Failed t
  14628c:	7263206f 65746165 6d657320 6f687061     o create semapho
  14629c:	00006572 76726573 73656369 49776c2f     re..services/lwI
  1462ac:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  1462bc:	2f637273 68637261 7379732f 6372615f     src/arch/sys_arc
  1462cc:	00632e68 69706374 6e695f70 5f747570     h.c.tcpip_input_
  1462dc:	656d6974 00000072 006d6573 64257325     timer...sem.%s%d
  1462ec:	00000000 0000756d 20746573 786f626d     ....mu..set mbox
  1462fc:	6f6c675f 006c6162 786f626d 00000000     _global.mbox....
  14630c:	6d5f7472 65725f62 72207663 72757465     rt_mb_recv retur
  14631c:	2064656e 68746977 72726520 0021726f     ned with error!.
  14632c:	3d212074 5f545220 4c4c554e 00000000     t != RT_NULL....
  14633c:	7373410a 69747265 203a6e6f 69206425     .Assertion: %d i
  14634c:	7325206e 0000000a 00000030              n %s....0...

00146358 <__FUNCTION__.7499>:
  146358:	5f737973 65726874 6e5f6461 00007765     sys_thread_new..

00146368 <__FUNCTION__.7511>:
  146368:	5f737973 68637261 7373615f 00747265     sys_arch_assert.
  146378:	65657266 20676e69 6e6e6f63 74697720     freeing conn wit
  146388:	74756f68 65726620 676e6965 62637020     hout freeing pcb
  146398:	00000000 76726573 73656369 49776c2f     ....services/lwI
  1463a8:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  1463b8:	2f637273 2f697061 5f697061 2e62696c     src/api/api_lib.
  1463c8:	00000063 6e6e6f63 73616820 206f6e20     c...conn has no 
  1463d8:	76636572 786f626d 00000000 6e6e6f63     recvmbox....conn
  1463e8:	63613e2d 74706563 786f626d 6f687320     ->acceptmbox sho
  1463f8:	6e646c75 65207427 74736978 00000000     uldn't exist....
  146408:	6e6e6f63 73616820 206f6e20 635f706f     conn has no op_c
  146418:	6c706d6f 64657465 00000000 6374656e     ompleted....netc
  146428:	5f6e6e6f 61746567 3a726464 766e6920     onn_getaddr: inv
  146438:	64696c61 6e6f6320 0000006e 6374656e     alid conn...netc
  146448:	5f6e6e6f 61746567 3a726464 766e6920     onn_getaddr: inv
  146458:	64696c61 64646120 00000072 6374656e     alid addr...netc
  146468:	5f6e6e6f 61746567 3a726464 766e6920     onn_getaddr: inv
  146478:	64696c61 726f7020 00000074 6374656e     alid port...netc
  146488:	5f6e6e6f 646e6962 6e69203a 696c6176     onn_bind: invali
  146498:	6f632064 00006e6e 6374656e 5f6e6e6f     d conn..netconn_
  1464a8:	6e6e6f63 3a746365 766e6920 64696c61     connect: invalid
  1464b8:	6e6f6320 0000006e 6374656e 5f6e6e6f      conn...netconn_
  1464c8:	63736964 656e6e6f 203a7463 61766e69     disconnect: inva
  1464d8:	2064696c 6e6e6f63 00000000 6374656e     lid conn....netc
  1464e8:	5f6e6e6f 7473696c 203a6e65 61766e69     onn_listen: inva
  1464f8:	2064696c 6e6e6f63 00000000 6374656e     lid conn....netc
  146508:	5f6e6e6f 65636361 203a7470 61766e69     onn_accept: inva
  146518:	2064696c 6e696f70 00726574 6374656e     lid pointer.netc
  146528:	5f6e6e6f 65636361 203a7470 61766e69     onn_accept: inva
  146538:	2064696c 6e6e6f63 00000000 6374656e     lid conn....netc
  146548:	5f6e6e6f 76636572 6e69203a 696c6176     onn_recv: invali
  146558:	6f702064 65746e69 00000072 6374656e     d pointer...netc
  146568:	5f6e6e6f 76636572 6e69203a 696c6176     onn_recv: invali
  146578:	6f632064 00006e6e 6374656e 5f6e6e6f     d conn..netconn_
  146588:	76636572 6e69203a 696c6176 65722064     recv: invalid re
  146598:	626d7663 0000786f 20667562 4e203d21     cvmbox..buf != N
  1465a8:	004c4c55 3d212070 4c554e20 0000004c     ULL.p != NULL...
  1465b8:	6374656e 5f6e6e6f 646e6573 6e69203a     netconn_send: in
  1465c8:	696c6176 6f632064 00006e6e 6374656e     valid conn..netc
  1465d8:	5f6e6e6f 74697277 69203a65 6c61766e     onn_write: inval
  1465e8:	63206469 006e6e6f 6374656e 5f6e6e6f     id conn.netconn_
  1465f8:	74697277 69203a65 6c61766e 63206469     write: invalid c
  146608:	2d6e6e6f 7079743e 00000065 6374656e     onn->type...netc
  146618:	5f6e6e6f 736f6c63 69203a65 6c61766e     onn_close: inval
  146628:	63206469 006e6e6f 6374656e 5f6e6e6f     id conn.netconn_
  146638:	6e696f6a 61656c5f 675f6576 70756f72     join_leave_group
  146648:	6e69203a 696c6176 6f632064 00006e6e     : invalid conn..
  146658:	6374656e 5f6e6e6f 68746567 6274736f     netconn_gethostb
  146668:	6d616e79 69203a65 6c61766e 6e206469     yname: invalid n
  146678:	00656d61 6374656e 5f6e6e6f 68746567     ame.netconn_geth
  146688:	6274736f 6d616e79 69203a65 6c61766e     ostbyname: inval
  146698:	61206469 00726464 76726573 73656369     id addr.services
  1466a8:	49776c2f 74694b50 69776c2f 2e322d70     /lwIPKit/lwip-2.
  1466b8:	2f322e30 2f637273 2f697061 5f697061     0.2/src/api/api_
  1466c8:	2e67736d 00000063 76636572 7064755f     msg.c...recv_udp
  1466d8:	73756d20 61682074 61206576 62637020      must have a pcb
  1466e8:	67726120 6e656d75 00000074 76636572      argument...recv
  1466f8:	7064755f 73756d20 61682074 61206576     _udp must have a
  146708:	7261206e 656d7567 0000746e 76636572     n argument..recv
  146718:	7064755f 6572203a 66207663 7720726f     _udp: recv for w
  146728:	676e6f72 62637020 00000021 76636572     rong pcb!...recv
  146738:	7063745f 73756d20 61682074 61206576     _tcp must have a
  146748:	62637020 67726120 6e656d75 00000074      pcb argument...
  146758:	76636572 7063745f 73756d20 61682074     recv_tcp must ha
  146768:	61206576 7261206e 656d7567 0000746e     ve an argument..
  146778:	76636572 7063745f 6572203a 66207663     recv_tcp: recv f
  146788:	7720726f 676e6f72 62637020 00000021     or wrong pcb!...
  146798:	6e6e6f63 203d2120 4c4c554e 00000000     conn != NULL....
  1467a8:	6e6e6f63 75633e2d 6e657272 736d5f74     conn->current_ms
  1467b8:	3d212067 4c554e20 0000004c 76616e69     g != NULL...inav
  1467c8:	2064696c 635f706f 6c706d6f 64657465     lid op_completed
  1467d8:	6d65735f 00000000 6e6e6f63 75633e2d     _sem....conn->cu
  1467e8:	6e657272 736d5f74 3d3d2067 4c554e20     rrent_msg == NUL
  1467f8:	0000004c 5f626370 3a77656e 62637020     L...pcb_new: pcb
  146808:	726c6120 79646165 6c6c6120 7461636f      already allocat
  146818:	00006465 6374656e 5f6e6e6f 6f6c6c61     ed..netconn_allo
  146828:	75203a63 6665646e 64656e69 74656e20     c: undefined net
  146838:	6e6e6f63 7079745f 00000065 20424350     conn_type...PCB 
  146848:	7473756d 20656220 6c616564 61636f6c     must be dealloca
  146858:	20646574 7374756f 20656469 73696874     ted outside this
  146868:	6e756620 6f697463 0000006e 76636572      function...recv
  146878:	786f626d 73756d20 65622074 61656420     mbox must be dea
  146888:	636f6c6c 64657461 66656220 2065726f     llocated before 
  146898:	6c6c6163 20676e69 73696874 6e756620     calling this fun
  1468a8:	6f697463 0000006e 65636361 626d7470     ction...acceptmb
  1468b8:	6d20786f 20747375 64206562 6c6c6165     ox must be deall
  1468c8:	7461636f 62206465 726f6665 61632065     ocated before ca
  1468d8:	6e696c6c 68742067 66207369 74636e75     lling this funct
  1468e8:	006e6f69 61766e69 2064696c 6e6e6f63     ion.invalid conn
  1468f8:	00000000 73696874 20736920 20726f66     ....this is for 
  146908:	20706374 6374656e 736e6e6f 6c6e6f20     tcp netconns onl
  146918:	00000079 6e6e6f63 73756d20 65622074     y...conn must be
  146928:	206e6920 74617473 454e2065 4e4f4354      in state NETCON
  146938:	4c435f4e 0045534f 20626370 65726c61     N_CLOSE.pcb alre
  146948:	20796461 736f6c63 00006465 736f6c43     ady closed..Clos
  146958:	20676e69 696c2061 6e657473 62637020     ing a listen pcb
  146968:	79616d20 746f6e20 69616620 0000216c      may not fail!..
  146978:	20727265 45203d21 4f5f5252 0000004b     err != ERR_OK...
  146988:	6374656e 206e6e6f 74617473 72652065     netconn state er
  146998:	00726f72 636f6c62 676e696b 6e6f6320     ror.blocking con
  1469a8:	7463656e 206e6920 676f7270 73736572     nect in progress
  1469b8:	00000000 65726c61 20796461 74697277     ....already writ
  1469c8:	20676e69 6320726f 69736f6c 0000676e     ing or closing..
  1469d8:	74617473 00002165 6e6e6f63 74733e2d     state!..conn->st
  1469e8:	20657461 4e203d3d 4f435445 435f4e4e     ate == NETCONN_C
  1469f8:	454e4e4f 00005443 6e6f6328 633e2d6e     ONNECT..(conn->c
  146a08:	65727275 6d5f746e 21206773 554e203d     urrent_msg != NU
  146a18:	20294c4c 63207c7c 2d6e6e6f 5f6e693e     LL) || conn->in_
  146a28:	5f6e6f6e 636f6c62 676e696b 6e6f635f     non_blocking_con
  146a38:	7463656e 00000000 636f6c62 676e696b     nect....blocking
  146a48:	6e6f6320 7463656e 61747320 65206574      connect state e
  146a58:	726f7272 00000000 61766e49 2064696c     rror....Invalid 
  146a68:	6374656e 206e6e6f 65707974 00000000     netconn type....
  146a78:	6e6e6f63 74733e2d 20657461 4e203d3d     conn->state == N
  146a88:	4f435445 575f4e4e 45544952 00000000     ETCONN_WRITE....
  146a98:	6e6e6f63 63703e2d 63742e62 3d212070     conn->pcb.tcp !=
  146aa8:	4c554e20 0000004c 6e6e6f63 72773e2d      NULL...conn->wr
  146ab8:	5f657469 7366666f 3c207465 6e6f6320     ite_offset < con
  146ac8:	633e2d6e 65727275 6d5f746e 3e2d6773     n->current_msg->
  146ad8:	2e67736d 656c2e77 0000006e 7069776c     msg.w.len...lwip
  146ae8:	74656e5f 6e6e6f63 5f6f645f 74697277     _netconn_do_writ
  146af8:	726f6d65 69203a65 6c61766e 6c206469     emore: invalid l
  146b08:	74676e65 00002168 2d67736d 67736d3e     ength!..msg->msg
  146b18:	6c2e772e 21206e65 0030203d 61766e69     .w.len != 0.inva
  146b28:	2064696c 6374656e 5f6e6e6f 65707974     lid netconn_type
  146b38:	00000000                                ....

00146b3c <err_to_errno_table>:
  146b3c:	00000000 0000000c 00000069 0000000b     ........i.......
  146b4c:	00000071 00000073 00000016 0000000b     q...s...........
  146b5c:	00000062 00000072 0000006a 0000006b     b...r...j...k...
  146b6c:	ffffffff 00000067 00000068 0000006b     ....g...h...k...
  146b7c:	00000005 76726573 73656369 49776c2f     ....services/lwI
  146b8c:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  146b9c:	2f637273 2f697061 6274656e 632e6675     src/api/netbuf.c
  146bac:	00000000 6274656e 615f6675 636f6c6c     ....netbuf_alloc
  146bbc:	6e69203a 696c6176 75622064 00000066     : invalid buf...
  146bcc:	63656863 6874206b 66207461 74737269     check that first
  146bdc:	75627020 61632066 6f68206e 7320646c      pbuf can hold s
  146bec:	00657a69 6274656e 665f6675 3a656572     ize.netbuf_free:
  146bfc:	766e6920 64696c61 66756220 00000000      invalid buf....
  146c0c:	6274656e 725f6675 203a6665 61766e69     netbuf_ref: inva
  146c1c:	2064696c 00667562 6274656e 635f6675     lid buf.netbuf_c
  146c2c:	6e696168 6e69203a 696c6176 65682064     hain: invalid he
  146c3c:	00006461 6274656e 635f6675 6e696168     ad..netbuf_chain
  146c4c:	6e69203a 696c6176 61742064 00006c69     : invalid tail..
  146c5c:	6274656e 645f6675 3a617461 766e6920     netbuf_data: inv
  146c6c:	64696c61 66756220 00000000 6274656e     alid buf....netb
  146c7c:	645f6675 3a617461 766e6920 64696c61     uf_data: invalid
  146c8c:	74616420 72747061 00000000 6274656e      dataptr....netb
  146c9c:	645f6675 3a617461 766e6920 64696c61     uf_data: invalid
  146cac:	6e656c20 00000000 6274656e 6e5f6675      len....netbuf_n
  146cbc:	3a747865 766e6920 64696c61 66756220     ext: invalid buf
  146ccc:	00000000 6274656e 665f6675 74737269     ....netbuf_first
  146cdc:	6e69203a 696c6176 75622064 00000066     : invalid buf...
  146cec:	656d616e 206e656c 74207369 6c206f6f     namelen is too l
  146cfc:	00676e6f 76726573 73656369 49776c2f     ong.services/lwI
  146d0c:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  146d1c:	2f637273 2f697061 6474656e 00632e62     src/api/netdb.c.
  146d2c:	61746f74 69735f6c 3c20657a 454e203d     total_size <= NE
  146d3c:	5f424454 4d454c45 5a49535f 70203a45     TDB_ELEM_SIZE: p
  146d4c:	7361656c 65722065 74726f70 69687420     lease report thi
  146d5c:	00002173 6377656e 206e6e6f 4e203d21     s!..newconn != N
  146d6c:	004c4c55 76726573 73656369 49776c2f     ULL.services/lwI
  146d7c:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  146d8c:	2f637273 2f697061 6b636f73 2e737465     src/api/sockets.
  146d9c:	00000063 61766e69 2064696c 6b636f73     c...invalid sock
  146dac:	69207465 7865646e 00000000 72646461     et index....addr
  146dbc:	6c617620 62206469 61207475 6c726464      valid but addrl
  146dcc:	4e206e65 004c4c55 7069776c 6e69625f     en NULL.lwip_bin
  146ddc:	69203a64 6c61766e 61206469 65726464     d: invalid addre
  146dec:	00007373 6b636f73 616c3e2d 61647473     ss..sock->lastda
  146dfc:	3d206174 554e203d 00004c4c 7069776c     ta == NULL..lwip
  146e0c:	6e6f635f 7463656e 6e69203a 696c6176     _connect: invali
  146e1c:	64612064 73657264 00000073 20667562     d address...buf 
  146e2c:	4e203d21 004c4c55 61766e69 2064696c     != NULL.invalid 
  146e3c:	79706f63 2c6e656c 6e656c20 756f7720     copylen, len wou
  146e4c:	7520646c 7265646e 776f6c66 00000000     ld underflow....
  146e5c:	7069776c 6e65735f 67736d64 6e69203a     lwip_sendmsg: in
  146e6c:	696c6176 736d2064 72646867 00000000     valid msghdr....
  146e7c:	7069776c 6e65735f 67736d64 6e69203a     lwip_sendmsg: in
  146e8c:	696c6176 736d2064 72646867 766f6920     valid msghdr iov
  146e9c:	00000000 7069776c 6e65735f 67736d64     ....lwip_sendmsg
  146eac:	6e69203a 696c6176 736d2064 72646867     : invalid msghdr
  146ebc:	6d616e20 00000065 5f766f69 206e656c      name...iov_len 
  146ecc:	3175203c 00745f36 7069776c 6e65735f     < u16_t.lwip_sen
  146edc:	3a6f7464 7a697320 756d2065 66207473     dto: size must f
  146eec:	69207469 3175206e 00745f36 7069776c     it in u16_t.lwip
  146efc:	6e65735f 3a6f7464 766e6920 64696c61     _sendto: invalid
  146f0c:	64646120 73736572 00000000 6165726e      address....nrea
  146f1c:	3e207964 0030203d 6b636f73 65733e2d     dy >= 0.sock->se
  146f2c:	7463656c 6961775f 676e6974 30203e20     lect_waiting > 0
  146f3c:	00000000 656c6573 635f7463 72702e62     ....select_cb.pr
  146f4c:	3d207665 554e203d 00004c4c 656c6573     ev == NULL..sele
  146f5c:	635f7463 72702e62 21207665 554e203d     ct_cb.prev != NU
  146f6c:	00004c4c 6e6b6e75 206e776f 6e657665     LL..unknown even
  146f7c:	00000074 69706374 68745f70 64616572     t...tcpip_thread
  146f8c:	6e69203a 696c6176 656d2064 67617373     : invalid messag
  146f9c:	00000065 76726573 73656369 49776c2f     e...services/lwI
  146fac:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  146fbc:	2f637273 2f697061 69706374 00632e70     src/api/tcpip.c.
  146fcc:	61766e49 2064696c 786f626d 00000000     Invalid mbox....
  146fdc:	6c696166 74206465 7263206f 65746165     failed to create
  146fec:	70637420 745f7069 61657268 626d2064      tcpip_thread mb
  146ffc:	0000786f 6c696166 74206465 7263206f     ox..failed to cr
  14700c:	65746165 636f6c20 63745f6b 5f706970     eate lock_tcpip_
  14701c:	65726f63 00000000 69706374 00000070     core....tcpip...
  14702c:	7778797a 73747576 6f707172 6b6c6d6e     zyxwvutsrqponmlk
  14703c:	6768696a 63646566 38396162 34353637     jihgfedcba987654
  14704c:	30313233 34333231 38373635 63626139     3210123456789abc
  14705c:	67666564 6b6a6968 6f6e6d6c 73727170     defghijklmnopqrs
  14706c:	77767574 007a7978                       tuvwxyz.

00147074 <dns_mquery_v4group>:
  147074:	fb0000e0 20736e64 76726573 6f207265     ....dns server o
  147084:	6f207475 72612066 00796172 76726573     ut of array.serv
  147094:	73656369 49776c2f 74694b50 69776c2f     ices/lwIPKit/lwi
  1470a4:	2e322d70 2f322e30 2f637273 65726f63     p-2.0.2/src/core
  1470b4:	736e642f 0000632e 61727261 6e692079     /dns.c..array in
  1470c4:	20786564 2074756f 6220666f 646e756f     dex out of bound
  1470d4:	00000073 6e6b6e75 206e776f 5f736e64     s...unknown dns_
  1470e4:	6c626174 6e652065 20797274 74617473     table entry stat
  1470f4:	00003a65 656c6564 6d206574 00000065     e:..delete me...
  147104:	76726573 73656369 49776c2f 74694b50     services/lwIPKit
  147114:	69776c2f 2e322d70 2f322e30 2f637273     /lwip-2.0.2/src/
  147124:	65726f63 656e692f 68635f74 6d75736b     core/inet_chksum
  147134:	0000632e 5f574152 00424350              .c..RAW_PCB.

00147140 <memp_RAW_PCB>:
  147140:	00147138 0014e0d0 0004001c 00151b98     8q..............
  147150:	0014e0e0 5f504455 00424350              ....UDP_PCB.

0014715c <memp_UDP_PCB>:
  14715c:	00147154 0014e0e4 00080028 0015ba0c     Tq......(.......
  14716c:	0014e0f4 5f504354 00424350              ....TCP_PCB.

00147178 <memp_TCP_PCB>:
  147178:	00147170 0014e0f8 000800a4 0015c1f8     pq..............
  147188:	0014e108 5f504354 5f424350 5453494c     ....TCP_PCB_LIST
  147198:	00004e45                                EN..

0014719c <memp_TCP_PCB_LISTEN>:
  14719c:	0014718c 0014e10c 00080020 0015b4ac     .q...... .......
  1471ac:	0014e11c 5f504354 00474553              ....TCP_SEG.

001471b8 <memp_TCP_SEG>:
  1471b8:	001471b0 0014e120 00280010 00151cbc     .q.. .....(.....
  1471c8:	0014e130 53414552 54414453 00000041     0...REASSDATA...

001471d8 <memp_REASSDATA>:
  1471d8:	001471cc 0014e134 000a0020 0015b710     .q..4... .......
  1471e8:	0014e144 47415246 5542505f 00000046     D...FRAG_PBUF...

001471f8 <memp_FRAG_PBUF>:
  1471f8:	001471ec 0014e148 000f0018 00158aa4     .q..H...........
  147208:	0014e158 4254454e 00004655              X...NETBUF..

00147214 <memp_NETBUF>:
  147214:	0014720c 0014e15c 00400010 0014f774     .r..\.....@.t...
  147224:	0014e16c 4354454e 004e4e4f              l...NETCONN.

00147230 <memp_NETCONN>:
  147230:	00147228 0014e170 00080040 0015bcb0     (r..p...@.......
  147240:	0014e180 49504354 534d5f50 50415f47     ....TCPIP_MSG_AP
  147250:	00000049                                I...

00147254 <memp_TCPIP_MSG_API>:
  147254:	00147244 0014e184 00400010 00158ea4     Dr........@.....
  147264:	0014e194 49504354 534d5f50 4e495f47     ....TCPIP_MSG_IN
  147274:	00544b50                                PKT.

00147278 <memp_TCPIP_MSG_INPKT>:
  147278:	00147268 0014e198 00400010 00150678     hr........@.x...
  147288:	0014e1a8 5f505241 55455551 00000045     ....ARP_QUEUE...

00147298 <memp_ARP_QUEUE>:
  147298:	0014728c 0014e1ac 001e0008 0015157c     .r..........|...
  1472a8:	0014e1bc 504d4749 4f52475f 00005055     ....IGMP_GROUP..

001472b8 <memp_IGMP_GROUP>:
  1472b8:	001472ac 0014e1c0 00080010 0015c014     .r..............
  1472c8:	0014e1d0 5f535953 454d4954 0054554f     ....SYS_TIMEOUT.

001472d8 <memp_SYS_TIMEOUT>:
  1472d8:	001472cc 0014e1d4 00070010 0015c87c     .r..........|...
  1472e8:	0014e1e4 4454454e 00000042              ....NETDB...

001472f4 <memp_NETDB>:
  1472f4:	001472ec 0014e1e8 00010134 0014f610     .r......4.......
  147304:	0014e1f8 46554250 4645525f 4d4f522f     ....PBUF_REF/ROM
  147314:	00000000                                ....

00147318 <memp_PBUF>:
  147318:	00147308 0014e1fc 00400030 00159da8     .s......0.@.....
  147328:	0014e20c 46554250 4f4f505f 0000004c     ....PBUF_POOL...

00147338 <memp_PBUF_POOL>:
  147338:	0014732c 0014e210 0010061c 00152620     ,s.......... &..
  147348:	0014e220                                 ...

0014734c <memp_pools>:
  14734c:	00147140 0014715c 00147178 0014719c     @q..\q..xq...q..
  14735c:	001471b8 001471d8 001471f8 00147214     .q...q...q...r..
  14736c:	00147230 00147254 00147278 00147298     0r..Tr..xr...r..
  14737c:	001472b8 001472d8 001472f4 00147318     .r...r...r...s..
  14738c:	00147338 76726573 73656369 49776c2f     8s..services/lwI
  14739c:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  1473ac:	2f637273 65726f63 6d656d2f 00632e70     src/core/memp.c.
  1473bc:	65746564 64657463 6d656d20 766f2070     detected memp ov
  1473cc:	6c667265 6920776f 6f70206e 00206c6f     erflow in pool .
	...
  14743c:	65746564 64657463 6d656d20 6e752070     detected memp un
  14744c:	66726564 20776f6c 70206e69 206c6f6f     derflow in pool 
	...
  1474bc:	706d656d 6c616d5f 3a636f6c 6d656d20     memp_malloc: mem
  1474cc:	72702070 7265706f 6120796c 6e67696c     p properly align
  1474dc:	00006465 61766e69 2064696c 6c6f6f70     ed..invalid pool
  1474ec:	73656420 00000063 706d656d 6c616d5f      desc...memp_mal
  1474fc:	3a636f6c 70797420 203c2065 504d454d     loc: type < MEMP
  14750c:	58414d5f 00000000 706d656d 6572665f     _MAX....memp_fre
  14751c:	6d203a65 70206d65 65706f72 20796c72     e: mem properly 
  14752c:	67696c61 0064656e 706d656d 6572665f     aligned.memp_fre
  14753c:	74203a65 20657079 454d203c 4d5f504d     e: type < MEMP_M
  14754c:	00005841 69206f4e 2074696e 636e7566     AX..No init func
  14755c:	6e6f6974 76696720 00006e65 76726573     tion given..serv
  14756c:	73656369 49776c2f 74694b50 69776c2f     ices/lwIPKit/lwi
  14757c:	2e322d70 2f322e30 2f637273 65726f63     p-2.0.2/src/core
  14758c:	74656e2f 632e6669 00000000 66206669     /netif.c....if f
  14759c:	74737269 203d2120 4c4c554e 616c202c     irst != NULL, la
  1475ac:	6d207473 20747375 6f736c61 20656220     st must also be 
  1475bc:	4e203d21 004c4c55 75676f62 62702073     != NULL.bogus pb
  1475cc:	203a6675 206e656c 74203d21 6c5f746f     uf: len != tot_l
  1475dc:	62206e65 6e207475 20747865 4e203d3d     en but next == N
  1475ec:	214c4c55 00000000 756f6873 6e20646c     ULL!....should n
  1475fc:	6220746f 756e2065 73206c6c 65636e69     ot be null since
  14760c:	72696620 21207473 616c203d 00217473      first != last!.
  14761c:	66756270 6c6c615f 203a636f 20646162     pbuf_alloc: bad 
  14762c:	66756270 79616c20 00007265 76726573     pbuf layer..serv
  14763c:	73656369 49776c2f 74694b50 69776c2f     ices/lwIPKit/lwi
  14764c:	2e322d70 2f322e30 2f637273 65726f63     p-2.0.2/src/core
  14765c:	7562702f 00632e66 66756270 6c6c615f     /pbuf.c.pbuf_all
  14766c:	203a636f 66756270 3e2d7020 6c796170     oc: pbuf p->payl
  14767c:	2064616f 706f7270 796c7265 696c6120     oad properly ali
  14768c:	64656e67 00000000 63656863 2d70206b     gned....check p-
  14769c:	7961703e 64616f6c 70202b20 656c3e2d     >payload + p->le
  1476ac:	6f64206e 6e207365 6f20746f 66726576     n does not overf
  1476bc:	20776f6c 66756270 00000000 46554250     low pbuf....PBUF
  1476cc:	4f4f505f 55425f4c 5a495346 756d2045     _POOL_BUFSIZE mu
  1476dc:	62207473 69622065 72656767 61687420     st be bigger tha
  1476ec:	454d206e 4c415f4d 4d4e4749 00544e45     n MEM_ALIGNMENT.
  1476fc:	5f6d6572 206e656c 616d203c 31755f78     rem_len < max_u1
  14770c:	00745f36 66756270 6c6c615f 203a636f     6_t.pbuf_alloc: 
  14771c:	66756270 3e2d7120 6c796170 2064616f     pbuf q->payload 
  14772c:	706f7270 796c7265 696c6120 64656e67     properly aligned
  14773c:	00000000 66756270 6c6c615f 203a636f     ....pbuf_alloc: 
  14774c:	66756270 61703e2d 616f6c79 72702064     pbuf->payload pr
  14775c:	7265706f 6120796c 6e67696c 00006465     operly aligned..
  14776c:	66756270 6c6c615f 203a636f 6f727265     pbuf_alloc: erro
  14777c:	756f656e 79742073 00006570 66756270     neous type..pbuf
  14778c:	6c6c615f 6465636f 7375635f 3a6d6f74     _alloced_custom:
  14779c:	64616220 75627020 616c2066 00726579      bad pbuf layer.
  1477ac:	66756270 6165725f 636f6c6c 2070203a     pbuf_realloc: p 
  1477bc:	4e203d21 004c4c55 66756270 6165725f     != NULL.pbuf_rea
  1477cc:	636f6c6c 6173203a 7020656e 79743e2d     lloc: sane p->ty
  1477dc:	00006570 776f7267 6d203c20 755f7861     pe..grow < max_u
  1477ec:	745f3631 00000000 66756270 6165725f     16_t....pbuf_rea
  1477fc:	636f6c6c 2071203a 4e203d21 004c4c55     lloc: q != NULL.
  14780c:	5f6d656d 6d697274 74657220 656e7275     mem_trim returne
  14781c:	20712064 4e203d3d 004c4c55 3d212070     d q == NULL.p !=
  14782c:	4c554e20 0000004c 72636e69 6e656d65      NULL...incremen
  14783c:	616d5f74 74696e67 20656475 70203d3c     t_magnitude <= p
  14784c:	656c3e2d 0000006e 20646162 66756270     ->len...bad pbuf
  14785c:	70797420 00000065 66756270 6572665f      type...pbuf_fre
  14786c:	73203a65 20656e61 65707974 00000000     e: sane type....
  14787c:	66756270 6572665f 70203a65 65723e2d     pbuf_free: p->re
  14788c:	203e2066 00000030 3e2d6370 74737563     f > 0...pc->cust
  14789c:	665f6d6f 5f656572 636e7566 6e6f6974     om_free_function
  1478ac:	203d2120 4c4c554e 00000000 66756270      != NULL....pbuf
  1478bc:	66657220 65766f20 6f6c6672 00000077      ref overflow...
  1478cc:	21206828 554e203d 20294c4c 28202626     (h != NULL) && (
  1478dc:	3d212074 4c554e20 2820294c 676f7270     t != NULL) (prog
  1478ec:	6d6d6172 76207265 616c6f69 20736574     rammer violates 
  1478fc:	29495041 00000000 743e2d70 6c5f746f     API)....p->tot_l
  14790c:	3d206e65 2d70203d 6e656c3e 666f2820     en == p->len (of
  14791c:	73616c20 62702074 69206675 6863206e      last pbuf in ch
  14792c:	296e6961 00000000 6e3e2d70 20747865     ain)....p->next 
  14793c:	4e203d3d 004c4c55 743e2d70 6c5f746f     == NULL.p->tot_l
  14794c:	3d206e65 2d70203d 6e656c3e 71202b20     en == p->len + q
  14795c:	6f743e2d 656c5f74 0000006e 743e2d70     ->tot_len...p->t
  14796c:	6c5f746f 3d206e65 2d70203d 6e656c3e     ot_len == p->len
  14797c:	00000000 66756270 706f635f 74203a79     ....pbuf_copy: t
  14798c:	65677261 6f6e2074 69622074 6e652067     arget not big en
  14799c:	6867756f 206f7420 646c6f68 756f7320     ough to hold sou
  1479ac:	00656372 7366666f 745f7465 3d3c206f     rce.offset_to <=
  1479bc:	745f7020 6c3e2d6f 00006e65 7366666f      p_to->len..offs
  1479cc:	665f7465 206d6f72 70203d3c 6f72665f     et_from <= p_fro
  1479dc:	6c3e2d6d 00006e65 6f745f70 203d2120     m->len..p_to != 
  1479ec:	4c4c554e 00000000 66756270 706f635f     NULL....pbuf_cop
  1479fc:	20292879 73656f64 746f6e20 6c6c6120     y() does not all
  147a0c:	7020776f 656b6361 75712074 73657565     ow packet queues
  147a1c:	00000021 66756270 706f635f 61705f79     !...pbuf_copy_pa
  147a2c:	61697472 69203a6c 6c61766e 62206469     rtial: invalid b
  147a3c:	00006675 66756270 706f635f 61705f79     uf..pbuf_copy_pa
  147a4c:	61697472 69203a6c 6c61766e 64206469     rtial: invalid d
  147a5c:	70617461 00007274 66756270 6b61745f     ataptr..pbuf_tak
  147a6c:	69203a65 6c61766e 62206469 00006675     e: invalid buf..
  147a7c:	66756270 6b61745f 69203a65 6c61766e     pbuf_take: inval
  147a8c:	64206469 70617461 00007274 66756270     id dataptr..pbuf
  147a9c:	6b61745f 62203a65 6e206675 6c20746f     _take: buf not l
  147aac:	65677261 6f6e6520 00686775 66756270     arge enough.pbuf
  147abc:	6b61745f 69203a65 6c61766e 70206469     _take: invalid p
  147acc:	00667562 20646964 20746f6e 79706f63     buf.did not copy
  147adc:	6c6c6120 74616420 00000061 66756270      all data...pbuf
  147aec:	706f635f 61662079 64656c69 00000000     _copy failed....
  147afc:	20776172 20626370 76636572 6c616320     raw pcb recv cal
  147b0c:	6361626c 6c61206b 65726574 62702064     lback altered pb
  147b1c:	70206675 6f6c7961 70206461 746e696f     uf payload point
  147b2c:	77207265 6f687469 65207475 6e697461     er without eatin
  147b3c:	61702067 74656b63 00000000 76726573     g packet....serv
  147b4c:	73656369 49776c2f 74694b50 69776c2f     ices/lwIPKit/lwi
  147b5c:	2e322d70 2f322e30 2f637273 65726f63     p-2.0.2/src/core
  147b6c:	7761722f 0000632e 276e6143 65722074     /raw.c..Can't re
  147b7c:	726f7473 65682065 72656461 20657720     store header we 
  147b8c:	7473756a 6d657220 6465766f 00000021     just removed!...
  147b9c:	0a73250a 00000009 74696d78 6825203a     .%s.....xmit: %h
  147bac:	00090a75 76636572 6825203a 00090a75     u...recv: %hu...
  147bbc:	203a7766 0a756825 00000009 706f7264     fw: %hu.....drop
  147bcc:	6825203a 00090a75 656b6863 203a7272     : %hu...chkerr: 
  147bdc:	0a756825 00000009 656e656c 203a7272     %hu.....lenerr: 
  147bec:	0a756825 00000009 656d656d 203a7272     %hu.....memerr: 
  147bfc:	0a756825 00000009 72657472 25203a72     %hu.....rterr: %
  147c0c:	090a7568 00000000 746f7270 3a727265     hu......proterr:
  147c1c:	75682520 0000090a 6574706f 203a7272      %hu....opterr: 
  147c2c:	0a756825 00000009 3a727265 75682520     %hu.....err: %hu
  147c3c:	0000090a 68636163 74696865 6825203a     ....cachehit: %h
  147c4c:	00000a75 765f7872 25203a31 090a7568     u...rx_v1: %hu..
  147c5c:	00000000 675f7872 70756f72 6825203a     ....rx_group: %h
  147c6c:	00090a75 675f7872 72656e65 203a6c61     u...rx_general: 
  147c7c:	0a756825 00000009 725f7872 726f7065     %hu.....rx_repor
  147c8c:	25203a74 090a7568 00000000 6a5f7874     t: %hu......tx_j
  147c9c:	3a6e696f 75682520 0000090a 6c5f7874     oin: %hu....tx_l
  147cac:	65766165 6825203a 00090a75 725f7874     eave: %hu...tx_r
  147cbc:	726f7065 25203a74 000a7568 4d454d0a     eport: %hu...MEM
  147ccc:	0a732520 00000009 69617661 25203a6c      %s.....avail: %
  147cdc:	090a756c 00000000 64657375 6c25203a     lu......used: %l
  147cec:	00090a75 3a78616d 756c2520 0000090a     u...max: %lu....
  147cfc:	3a727265 756c2520 0000000a 5359530a     err: %lu.....SYS
  147d0c:	0000090a 2e6d6573 64657375 2520203a     ....sem.used:  %
  147d1c:	090a756c 00000000 2e6d6573 3a78616d     lu......sem.max:
  147d2c:	25202020 090a756c 00000000 2e6d6573        %lu......sem.
  147d3c:	3a727265 25202020 090a756c 00000000     err:   %lu......
  147d4c:	6574756d 73752e78 203a6465 0a756c25     mutex.used: %lu.
  147d5c:	00000009 6574756d 616d2e78 20203a78     ....mutex.max:  
  147d6c:	0a756c25 00000009 6574756d 72652e78     %lu.....mutex.er
  147d7c:	20203a72 0a756c25 00000009 786f626d     r:  %lu.....mbox
  147d8c:	6573752e 20203a64 0a756c25 00000009     .used:  %lu.....
  147d9c:	786f626d 78616d2e 2020203a 0a756c25     mbox.max:   %lu.
  147dac:	00000009 786f626d 7272652e 2020203a     ....mbox.err:   
  147dbc:	0a756c25 00000000 4b4e494c 00000000     %lu.....LINK....
  147dcc:	41485445 00005052 465f5049 00474152     ETHARP..IP_FRAG.
  147ddc:	00005049 504d4749 00000000 504d4349     IP..IGMP....ICMP
  147dec:	00000000 00504455 00504354 50414548     ....UDP.TCP.HEAP
  147dfc:	00000000 534f4c43 00004445 5453494c     ....CLOSED..LIST
  147e0c:	00004e45 5f4e5953 544e4553 00000000     EN..SYN_SENT....
  147e1c:	5f4e5953 44564352 00000000 41545345     SYN_RCVD....ESTA
  147e2c:	53494c42 00444548 5f4e4946 54494157     BLISHED.FIN_WAIT
  147e3c:	0000315f 5f4e4946 54494157 0000325f     _1..FIN_WAIT_2..
  147e4c:	534f4c43 41575f45 00005449 534f4c43     CLOSE_WAIT..CLOS
  147e5c:	00474e49 5453414c 4b43415f 00000000     ING.LAST_ACK....
  147e6c:	454d4954 4941575f 00000054              TIME_WAIT...

00147e78 <tcp_state_str>:
  147e78:	00147e00 00147e08 00147e10 00147e1c     .~...~...~...~..
  147e88:	00147e28 00147e34 00147e40 00147e4c     (~..4~..@~..L~..
  147e98:	00147e58 00147e60 00147e6c              X~..`~..l~..

00147ea4 <tcp_backoff>:
  147ea4:	04030201 07070605 07070707 00000007     ................

00147eb4 <tcp_persist_backoff>:
  147eb4:	180c0603 00786030                       ....0`x.

00147ebc <tcp_pcb_lists>:
  147ebc:	0015cc28 0015cc2c 0015cc20 0015cc30     (...,... ...0...
  147ecc:	20626370 4e203d21 004c4c55 76726573     pcb != NULL.serv
  147edc:	73656369 49776c2f 74694b50 69776c2f     ices/lwIPKit/lwi
  147eec:	2e322d70 2f322e30 2f637273 65726f63     p-2.0.2/src/core
  147efc:	7063742f 0000632e 2d626370 6174733e     /tcp.c..pcb->sta
  147f0c:	3d206574 494c203d 4e455453 00000000     te == LISTEN....
  147f1c:	2d626370 616c663e 26207367 5f465420     pcb->flags & TF_
  147f2c:	4c435852 4445534f 00000000 276e6f64     RXCLOSED....don'
  147f3c:	61632074 74206c6c 615f7063 74726f62     t call tcp_abort
  147f4c:	7063742f 6162615f 6e6f646e 726f6620     /tcp_abandon for
  147f5c:	73696c20 2d6e6574 73626370 00000000      listen-pcbs....
  147f6c:	5f706374 646e6962 6163203a 6e6f206e     tcp_bind: can on
  147f7c:	6220796c 20646e69 73206e69 65746174     ly bind in state
  147f8c:	4f4c4320 00444553 5f706374 7473696c      CLOSED.tcp_list
  147f9c:	203a6e65 20626370 65726c61 20796461     en: pcb already 
  147fac:	6e6e6f63 65746365 00000064 5f77656e     connected...new_
  147fbc:	5f766372 5f6e6e61 20646e77 30203d3c     rcv_ann_wnd <= 0
  147fcc:	66666678 00000066 276e6f64 61632074     xffff...don't ca
  147fdc:	74206c6c 725f7063 65766365 6f662064     ll tcp_recved fo
  147fec:	696c2072 6e657473 6263702d 00000073     r listen-pcbs...
  147ffc:	5f706374 76636572 203a6465 206e656c     tcp_recved: len 
  14800c:	70617277 20646570 5f766372 0a646e77     wrapped rcv_wnd.
  14801c:	00000000 5f706374 6e6e6f63 3a746365     ....tcp_connect:
  14802c:	6e616320 6c6e6f20 6f632079 63656e6e      can only connec
  14803c:	72662074 73206d6f 65746174 4f4c4320     t from state CLO
  14804c:	00444553 5f706374 776f6c73 3a726d74     SED.tcp_slowtmr:
  14805c:	74636120 20657669 2d626370 6174733e      active pcb->sta
  14806c:	21206574 4c43203d 4445534f 0000000a     te != CLOSED....
  14807c:	5f706374 776f6c73 3a726d74 74636120     tcp_slowtmr: act
  14808c:	20657669 2d626370 6174733e 21206574     ive pcb->state !
  14809c:	494c203d 4e455453 0000000a 5f706374     = LISTEN....tcp_
  1480ac:	776f6c73 3a726d74 74636120 20657669     slowtmr: active 
  1480bc:	2d626370 6174733e 21206574 4954203d     pcb->state != TI
  1480cc:	572d454d 0a544941 00000000 5f706374     ME-WAIT.....tcp_
  1480dc:	776f6c73 3a726d74 64696d20 20656c64     slowtmr: middle 
  1480ec:	20706374 74203d21 615f7063 76697463     tcp != tcp_activ
  1480fc:	63705f65 00007362 5f706374 776f6c73     e_pcbs..tcp_slow
  14810c:	3a726d74 72696620 70207473 3d206263     tmr: first pcb =
  14811c:	6374203d 63615f70 65766974 6263705f     = tcp_active_pcb
  14812c:	00000073 5f706374 776f6c73 3a726d74     s...tcp_slowtmr:
  14813c:	4d495420 41572d45 70205449 3e2d6263      TIME-WAIT pcb->
  14814c:	74617473 3d3d2065 4d495420 41572d45     state == TIME-WA
  14815c:	00005449 5f706374 776f6c73 3a726d74     IT..tcp_slowtmr:
  14816c:	64696d20 20656c64 20706374 74203d21      middle tcp != t
  14817c:	745f7063 63705f77 00007362 5f706374     cp_tw_pcbs..tcp_
  14818c:	776f6c73 3a726d74 72696620 70207473     slowtmr: first p
  14819c:	3d206263 6374203d 77745f70 6263705f     cb == tcp_tw_pcb
  1481ac:	00000073 61766e69 2064696c 74617473     s...invalid stat
  1481bc:	00000065 61766e69 2064696c 6b636f73     e...invalid sock
  1481cc:	73207465 65746174 726f6620 63657220     et state for rec
  1481dc:	61632076 61626c6c 00006b63 61766e69     v callback..inva
  1481ec:	2064696c 6b636f73 73207465 65746174     lid socket state
  1481fc:	726f6620 6e657320 61632074 61626c6c      for sent callba
  14820c:	00006b63 61766e69 2064696c 6b636f73     ck..invalid sock
  14821c:	73207465 65746174 726f6620 72726520     et state for err
  14822c:	6c616320 6361626c 0000006b 61766e69      callback...inva
  14823c:	2064696c 6b636f73 73207465 65746174     lid socket state
  14824c:	726f6620 6c6f7020 0000006c 65736e75      for poll...unse
  14825c:	7320746e 656d6765 2073746e 6b61656c     nt segments leak
  14826c:	00676e69 63616e75 2064656b 6d676573     ing.unacked segm
  14827c:	73746e65 61656c20 676e696b 00000000     ents leaking....
  14828c:	65736f6f 65732071 6e656d67 6c207374     ooseq segments l
  14829c:	696b6165 0000676e 6e3e2d70 20747865     eaking..p->next 
  1482ac:	4e203d21 004c4c55 76726573 73656369     != NULL.services
  1482bc:	49776c2f 74694b50 69776c2f 2e322d70     /lwIPKit/lwip-2.
  1482cc:	2f322e30 2f637273 65726f63 7063742f     0.2/src/core/tcp
  1482dc:	2e6e695f 00000063 6c3e2d70 3d206e65     _in.c...p->len =
  1482ec:	0030203d 743e2d70 6c5f746f 3d206e65     = 0.p->tot_len =
  1482fc:	2d70203d 78656e3e 743e2d74 6c5f746f     = p->next->tot_l
  14830c:	00006e65 5f706374 75706e69 61203a74     en..tcp_input: a
  14831c:	76697463 63702065 733e2d62 65746174     ctive pcb->state
  14832c:	203d2120 534f4c43 00004445 5f706374      != CLOSED..tcp_
  14833c:	75706e69 61203a74 76697463 63702065     input: active pc
  14834c:	733e2d62 65746174 203d2120 454d4954     b->state != TIME
  14835c:	4941572d 00000054 5f706374 75706e69     -WAIT...tcp_inpu
  14836c:	61203a74 76697463 63702065 733e2d62     t: active pcb->s
  14837c:	65746174 203d2120 5453494c 00004e45     tate != LISTEN..
  14838c:	5f706374 75706e69 70203a74 3e2d6263     tcp_input: pcb->
  14839c:	7478656e 203d2120 20626370 66656228     next != pcb (bef
  1483ac:	2065726f 68636163 00002965 5f706374     ore cache)..tcp_
  1483bc:	75706e69 70203a74 3e2d6263 7478656e     input: pcb->next
  1483cc:	203d2120 20626370 74666128 63207265      != pcb (after c
  1483dc:	65686361 00000029 5f706374 75706e69     ache)...tcp_inpu
  1483ec:	54203a74 2d454d49 54494157 62637020     t: TIME-WAIT pcb
  1483fc:	74733e2d 20657461 54203d3d 2d454d49     ->state == TIME-
  14840c:	54494157 00000000 2d626370 6665723e     WAIT....pcb->ref
  14841c:	64657375 7461645f 3d3d2061 4c554e20     used_data == NUL
  14842c:	0000004c 5f706374 75706e69 70203a74     L...tcp_input: p
  14843c:	3e2d6263 74617473 3d212065 4f4c4320     cb->state != CLO
  14844c:	00444553 2d626370 646e733e 6575715f     SED.pcb->snd_que
  14845c:	656c6575 203e206e 00000030 73206f6e     uelen > 0...no s
  14846c:	656d6765 7420746e 7266206f 00006565     egment to free..
  14847c:	2d626370 73696c3e 656e6574 613e2d72     pcb->listener->a
  14848c:	70656363 3d212074 4c554e20 0000004c     ccept != NULL...
  14849c:	5f706374 65636572 3a657669 6f727720     tcp_receive: wro
  1484ac:	7320676e 65746174 00000000 2d626370     ng state....pcb-
  1484bc:	646e733e 6575715f 656c6575 3d3e206e     >snd_queuelen >=
  1484cc:	75627020 6c635f66 6e286e65 2d747865      pbuf_clen(next-
  1484dc:	0029703e 5f706374 65636572 3a657669     >p).tcp_receive:
  1484ec:	6c617620 71206469 65756575 6e656c20      valid queue len
  1484fc:	00687467 65736e69 20702e67 4e203d21     gth.inseg.p != N
  14850c:	004c4c55 61736e69 6f20656e 65736666     ULL.insane offse
  14851c:	00002174 66756270 6f6f7420 6f687320     t!..pbuf too sho
  14852c:	00217472 66756270 6165685f 20726564     rt!.pbuf_header 
  14853c:	6c696166 00006465 5f706374 65636572     failed..tcp_rece
  14854c:	3a657669 67657320 746e656d 746f6e20     ive: segment not
  14855c:	69727420 64656d6d 726f6320 74636572      trimmed correct
  14856c:	7420796c 6372206f 6e775f76 00000a64     ly to rcv_wnd...
  14857c:	5f706374 65636572 3a657669 67657320     tcp_receive: seg
  14858c:	746e656d 746f6e20 69727420 64656d6d     ment not trimmed
  14859c:	726f6320 74636572 7420796c 6f6f206f      correctly to oo
  1485ac:	20716573 75657571 00000a65 5f706374     seq queue...tcp_
  1485bc:	65636572 3a657669 70637420 206e656c     receive: tcplen 
  1485cc:	6372203e 6e775f76 00000a64 5f706374     > rcv_wnd...tcp_
  1485dc:	65636572 3a657669 736f6f20 74207165     receive: ooseq t
  1485ec:	656c7063 203e206e 5f766372 0a646e77     cplen > rcv_wnd.
  1485fc:	00000000 63656863 6874206b 66207461     ....check that f
  14860c:	74737269 75627020 61632066 6f68206e     irst pbuf can ho
  14861c:	7320646c 63757274 63742074 64685f70     ld struct tcp_hd
  14862c:	00000072 76726573 73656369 49776c2f     r...services/lwI
  14863c:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  14864c:	2f637273 65726f63 7063742f 74756f5f     src/core/tcp_out
  14865c:	0000632e 743e2d70 6c5f746f 3e206e65     .c..p->tot_len >
  14866c:	706f203d 6e656c74 00000000 6465656e     = optlen....need
  14867c:	636e7520 6e696168 70206465 00667562      unchained pbuf.
  14868c:	5f706374 74697277 70203a65 73667562     tcp_write: pbufs
  14869c:	206e6f20 75657571 3e3d2065 20746120      on queue => at 
  1486ac:	7361656c 6e6f2074 75712065 20657565     least one queue 
  1486bc:	2d6e6f6e 74706d65 00000079 5f706374     non-empty...tcp_
  1486cc:	74697277 6e203a65 6270206f 20736675     write: no pbufs 
  1486dc:	71206e6f 65756575 203e3d20 68746f62     on queue => both
  1486ec:	65757120 20736575 74706d65 00000079      queues empty...
  1486fc:	5f706374 74697277 61203a65 3d206772     tcp_write: arg =
  14870c:	554e203d 28204c4c 676f7270 6d6d6172     = NULL (programm
  14871c:	76207265 616c6f69 20736574 29495041     er violates API)
  14872c:	00000000 5f73736d 61636f6c 7369206c     ....mss_local is
  14873c:	6f6f7420 616d7320 00006c6c 6f636e69      too small..inco
  14874c:	7369736e 746e6574 65766f20 7a697372     nsistent oversiz
  14875c:	73762065 7073202e 00656361 6f636e69     e vs. space.inco
  14876c:	7369736e 746e6574 65766f20 7a697372     nsistent oversiz
  14877c:	73762065 656c202e 0000006e 5f706374     e vs. len...tcp_
  14878c:	74697277 52203a65 70204d4f 73667562     write: ROM pbufs
  14879c:	6e616320 20746f6e 6f206562 73726576      cannot be overs
  1487ac:	64657a69 00000000 65736e75 6f5f746e     ized....unsent_o
  1487bc:	73726576 20657a69 6d73696d 68637461     versize mismatch
  1487cc:	63702820 753e2d62 6e65736e 73692074      (pcb->unsent is
  1487dc:	4c554e20 0000294c 5f706374 74697277      NULL)..tcp_writ
  1487ec:	63203a65 6b636568 61687420 69662074     e: check that fi
  1487fc:	20747372 66756270 6e616320 6c6f6820     rst pbuf can hol
  14880c:	68742064 6f632065 656c706d 73206574     d the complete s
  14881c:	656c6765 0000006e 7265766f 657a6973     eglen...oversize
  14882c:	203d3d20 00000030 76657270 6765735f      == 0...prev_seg
  14883c:	203d2120 4c4c554e 00000000 5f706374      != NULL....tcp_
  14884c:	74697277 63203a65 6f6e6e61 6f632074     write: cannot co
  14885c:	7461636e 74616e65 68772065 70206e65     ncatenate when p
  14886c:	3e2d6263 65736e75 6920746e 6d652073     cb->unsent is em
  14887c:	00797470 5f706374 74697277 65203a65     pty.tcp_write: e
  14888c:	6e657478 6e6f6973 20666f20 65666572     xtension of refe
  14889c:	636e6572 65722065 72697571 72207365     rence requires r
  1488ac:	72656665 65636e65 00000000 5f706374     eference....tcp_
  1488bc:	74697277 76203a65 64696c61 65757120     write: valid que
  1488cc:	6c206575 74676e65 00000068 5f706374     ue length...tcp_
  1488dc:	75716e65 5f657565 67616c66 6e203a73     enqueue_flags: n
  1488ec:	20646565 68746965 54207265 535f5043     eed either TCP_S
  1488fc:	6f204e59 43542072 49465f50 6e69204e     YN or TCP_FIN in
  14890c:	616c6620 28207367 676f7270 6d6d6172      flags (programm
  14891c:	76207265 616c6f69 20736574 29495041     er violates API)
  14892c:	00000000 5f706374 75716e65 5f657565     ....tcp_enqueue_
  14893c:	67616c66 63203a73 6b636568 61687420     flags: check tha
  14894c:	69662074 20747372 66756270 6e616320     t first pbuf can
  14895c:	6c6f6820 706f2064 6e656c74 00000000      hold optlen....
  14896c:	2d676573 7063743e 20726468 20746f6e     seg->tcphdr not 
  14897c:	67696c61 0064656e 5f706374 75716e65     aligned.tcp_enqu
  14898c:	5f657565 67616c66 69203a73 6c61766e     eue_flags: inval
  14899c:	73206469 656d6765 6c20746e 74676e65     id segment lengt
  1489ac:	00000068 5f706374 75716e65 5f657565     h...tcp_enqueue_
  1489bc:	67616c66 69203a73 6c61766e 71206469     flags: invalid q
  1489cc:	65756575 6e656c20 00687467 276e6f64     ueue length.don'
  1489dc:	61632074 74206c6c 6f5f7063 75707475     t call tcp_outpu
  1489ec:	6f662074 696c2072 6e657473 6263702d     t for listen-pcb
  1489fc:	00000073 20545352 20746f6e 65707865     s...RST not expe
  148a0c:	64657463 72656820 00002165              cted here!..

00148a18 <lwip_cyclic_timers>:
  148a18:	000000fa 0011cfd0 000003e8 00132cdc     .............,..
  148a28:	000003e8 0012d92c 0000ea60 0012a56c     ....,...`...l...
  148a38:	000001f4 0012a6a0 00000064 00130cd8     ........d.......
  148a48:	000003e8 00116aec 76726573 73656369     .....j..services
  148a58:	49776c2f 74694b50 69776c2f 2e322d70     /lwIPKit/lwip-2.
  148a68:	2f322e30 2f637273 65726f63 6d69742f     0.2/src/core/tim
  148a78:	74756f65 00632e73 5f737973 656d6974     eouts.c.sys_time
  148a88:	3a74756f 6d697420 74756f65 203d2120     out: timeout != 
  148a98:	4c4c554e 6f70202c 4d206c6f 5f504d45     NULL, pool MEMP_
  148aa8:	5f535953 454d4954 2054554f 65207369     SYS_TIMEOUT is e
  148ab8:	7974706d 00000000 66756270 6165685f     mpty....pbuf_hea
  148ac8:	20726564 6c696166 000a6465 76726573     der failed..serv
  148ad8:	73656369 49776c2f 74694b50 69776c2f     ices/lwIPKit/lwi
  148ae8:	2e322d70 2f322e30 2f637273 65726f63     p-2.0.2/src/core
  148af8:	7064752f 0000632e 63656863 6874206b     /udp.c..check th
  148b08:	66207461 74737269 75627020 61632066     at first pbuf ca
  148b18:	6f68206e 7320646c 63757274 64752074     n hold struct ud
  148b28:	64685f70 00000072                       p_hdr...

00148b30 <ethbroadcast>:
  148b30:	ffffffff 0000ffff                       ........

00148b38 <ethzero>:
	...
  148b40:	6974656e 683e2d66 64646177 656c5f72     netif->hwaddr_le
  148b50:	756d206e 62207473 20362065 20726f66     n must be 6 for 
  148b60:	65687465 74656e72 74756f5f 21747570     ethernet_output!
  148b70:	00000000 76726573 73656369 49776c2f     ....services/lwI
  148b80:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  148b90:	2f637273 6974656e 74652f66 6e726568     src/netif/ethern
  148ba0:	632e7465 00000000 6974656e 00000066     et.c....netif...
  148bb0:	74736f68 00000000 676e6970 7365725f     host....ping_res
  148bc0:	00000070                                p...

00148bc4 <lwip_netdev_ops>:
  148bc4:	00129004 00129034 00129064 00129130     ....4...d...0...
  148bd4:	0012916c 001291cc 00000000 0012948c     l...............
  148be4:	7069776c 74656e5f 00006669 6974656e     lwip_netif..neti
  148bf4:	3d212066 5f545220 4c4c554e 00000000     f != RT_NULL....
  148c04:	6c6c616d 6e20636f 66697465 69616620     malloc netif fai
  148c14:	0a64656c 00000000 68747472 64616572     led.....rtthread
  148c24:	3230255f 32302578 00000078 69706374     _%02x%02x...tcpi
  148c34:	00000070 20766564 52203d21 554e5f54     p...dev != RT_NU
  148c44:	00004c4c 6d787265 00000062 75736572     LL..erxmb...resu
  148c54:	3d20746c 5452203d 4b4f455f 00000000     lt == RT_EOK....
  148c64:	00787265 6d787465 00000062 7774656e     erx.etxmb...netw
  148c74:	206b726f 65746e69 63616672 616e2065     ork interface na
  148c84:	7420656d 6c206f6f 21676e6f 00000a0d     me too long!....
  148c94:	7774656e 206b726f 65746e69 63616672     network interfac
  148ca4:	25203a65 6f6e2073 6f662074 21646e75     e: %s not found!
  148cb4:	00000a0d                                ....

00148cb8 <__FUNCTION__.7782>:
  148cb8:	7069776c 74656e5f 5f766564 676e6970     lwip_netdev_ping
  148cc8:	00000000                                ....

00148ccc <__FUNCTION__.7794>:
  148ccc:	6474656e 615f7665 00006464              netdev_add..

00148cd8 <__FUNCTION__.7803>:
  148cd8:	6474656e 645f7665 00006c65              netdev_del..

00148ce4 <__FUNCTION__.7808>:
  148ce4:	6474656e 665f7665 7367616c 6e79735f     netdev_flags_syn
  148cf4:	00000063                                c...

00148cf8 <__FUNCTION__.7814>:
  148cf8:	65687465 74656e72 6c5f6669 6f6b6e69     ethernetif_linko
  148d08:	75707475 00000074                       utput...

00148d10 <__FUNCTION__.7846>:
  148d10:	5f687465 69766564 6c5f6563 636b6e69     eth_device_linkc
  148d20:	676e6168 00000065                       hange...

00148d28 <__FUNCTION__.7870>:
  148d28:	5f687465 74737973 645f6d65 63697665     eth_system_devic
  148d38:	6e695f65 705f7469 61766972 00006574     e_init_private..
  148d48:	70636864 636e695f 6263705f 6665725f     dhcp_inc_pcb_ref
  148d58:	6e756f63 3a292874 6d656d20 2079726f     count(): memory 
  148d68:	6b61656c 00000000 76726573 73656369     leak....services
  148d78:	49776c2f 74694b50 69776c2f 2e322d70     /lwIPKit/lwip-2.
  148d88:	2f322e30 2f637273 65726f63 7670692f     0.2/src/core/ipv
  148d98:	68642f34 632e7063 00000000 70636864     4/dhcp.c....dhcp
  148da8:	6263705f 6665725f 6e756f63 3a292874     _pcb_refcount():
  148db8:	66657220 6e756f63 72652074 00726f72      refcount error.
  148dc8:	6974656e 3d212066 4c554e20 0000004c     netif != NULL...
  148dd8:	70636864 203d2120 4c4c554e 00000000     dhcp != NULL....
  148de8:	6974656e 6c612066 64616572 61682079     netif already ha
  148df8:	20612073 75727473 64207463 20706368     s a struct dhcp 
  148e08:	00746573 6974656e 73692066 746f6e20     set.netif is not
  148e18:	2c707520 646c6f20 79747320 7020656c      up, old style p
  148e28:	3f74726f 00000000 66756270 6f5f7020     ort?....pbuf p_o
  148e38:	77207475 276e7361 72662074 00646565     ut wasn't freed.
  148e48:	6c706572 61772079 74276e73 65726620     reply wasn't fre
  148e58:	00006465 70636864 6e69625f 6e203a64     ed..dhcp_bind: n
  148e68:	66697465 203d2120 4c4c554e 00000000     etif != NULL....
  148e78:	70636864 6e69625f 64203a64 20706368     dhcp_bind: dhcp 
  148e88:	4e203d21 004c4c55 70636864 6f74735f     != NULL.dhcp_sto
  148e98:	6e203a70 66697465 203d2120 4c4c554e     p: netif != NULL
  148ea8:	00000000 70636864 74706f5f 3a6e6f69     ....dhcp_option:
  148eb8:	63686420 6f3e2d70 6f697470 6f5f736e      dhcp->options_o
  148ec8:	6c5f7475 2b206e65 2b203220 74706f20     ut_len + 2 + opt
  148ed8:	5f6e6f69 206e656c 44203d3c 5f504348     ion_len <= DHCP_
  148ee8:	4954504f 5f534e4f 004e454c 70636864     OPTIONS_LEN.dhcp
  148ef8:	74706f5f 5f6e6f69 65747962 6864203a     _option_byte: dh
  148f08:	3e2d7063 6974706f 5f736e6f 5f74756f     cp->options_out_
  148f18:	206e656c 4844203c 4f5f5043 4f495450     len < DHCP_OPTIO
  148f28:	4c5f534e 00004e45 70636864 74706f5f     NS_LEN..dhcp_opt
  148f38:	5f6e6f69 726f6873 64203a74 2d706368     ion_short: dhcp-
  148f48:	74706f3e 736e6f69 74756f5f 6e656c5f     >options_out_len
  148f58:	32202b20 203d3c20 50434844 54504f5f      + 2 <= DHCP_OPT
  148f68:	534e4f49 4e454c5f 00000000 70636864     IONS_LEN....dhcp
  148f78:	74706f5f 5f6e6f69 676e6f6c 6864203a     _option_long: dh
  148f88:	3e2d7063 6974706f 5f736e6f 5f74756f     cp->options_out_
  148f98:	206e656c 2034202b 44203d3c 5f504348     len + 4 <= DHCP_
  148fa8:	4954504f 5f534e4f 004e454c 50434844     OPTIONS_LEN.DHCP
  148fb8:	6f68203a 616e7473 6920656d 6f742073     : hostname is to
  148fc8:	6f6c206f 0021676e 206e656c 34203d3d     o long!.len == 4
  148fd8:	00000000 206e656c 64203d3e 646f6365     ....len >= decod
  148fe8:	656c5f65 0000006e 206e656c 34202525     e_len...len %% 4
  148ff8:	203d3d20 00000030 206e656c 31203d3d      == 0...len == 1
  149008:	00000000 7265766f 64616f6c 206e6920     ....overload in 
  149018:	656c6966 616e732f 0000656d 63656863     file/sname..chec
  149028:	6564206b 65646f63 7864695f 00000000     k decode_idx....
  149038:	6f636564 6c5f6564 25206e65 20342025     decode_len %% 4 
  149048:	30203d3d 00000000 61766e69 2064696c     == 0....invalid 
  149058:	6f636564 6c5f6564 00006e65 7478656e     decode_len..next
  149068:	75627020 61772066 756e2073 00006c6c      pbuf was null..
  149078:	70636864 6572635f 5f657461 3a67736d     dhcp_create_msg:
  149088:	74656e20 21206669 554e203d 00004c4c      netif != NULL..
  149098:	70636864 6572635f 5f657461 3a67736d     dhcp_create_msg:
  1490a8:	63686420 3d212070 4c554e20 0000004c      dhcp != NULL...
  1490b8:	70636864 6572635f 5f657461 3a67736d     dhcp_create_msg:
  1490c8:	63686420 703e2d70 74756f5f 203d3d20      dhcp->p_out == 
  1490d8:	4c4c554e 00000000 70636864 6572635f     NULL....dhcp_cre
  1490e8:	5f657461 3a67736d 63686420 6d3e2d70     ate_msg: dhcp->m
  1490f8:	6f5f6773 3d207475 554e203d 00004c4c     sg_out == NULL..
  149108:	70636864 6572635f 5f657461 3a67736d     dhcp_create_msg:
  149118:	65686320 74206b63 20746168 73726966      check that firs
  149128:	62702074 63206675 68206e61 20646c6f     t pbuf can hold 
  149138:	75727473 64207463 5f706368 0067736d     struct dhcp_msg.
  149148:	70636864 6c65645f 5f657465 3a67736d     dhcp_delete_msg:
  149158:	63686420 3d212070 4c554e20 0000004c      dhcp != NULL...
  149168:	70636864 6c65645f 5f657465 3a67736d     dhcp_delete_msg:
  149178:	63686420 703e2d70 74756f5f 203d2120      dhcp->p_out != 
  149188:	4c4c554e 00000000 70636864 6c65645f     NULL....dhcp_del
  149198:	5f657465 3a67736d 63686420 6d3e2d70     ete_msg: dhcp->m
  1491a8:	6f5f6773 21207475 554e203d 00004c4c     sg_out != NULL..
  1491b8:	70636864 74706f5f 5f6e6f69 69617274     dhcp_option_trai
  1491c8:	3a72656c 63686420 3d212070 4c554e20     ler: dhcp != NUL
  1491d8:	0000004c 70636864 74706f5f 5f6e6f69     L...dhcp_option_
  1491e8:	69617274 3a72656c 63686420 6d3e2d70     trailer: dhcp->m
  1491f8:	6f5f6773 21207475 554e203d 000a4c4c     sg_out != NULL..
  149208:	70636864 74706f5f 5f6e6f69 69617274     dhcp_option_trai
  149218:	3a72656c 63686420 6f3e2d70 6f697470     ler: dhcp->optio
  149228:	6f5f736e 6c5f7475 3c206e65 43484420     ns_out_len < DHC
  149238:	504f5f50 4e4f4954 454c5f53 00000a4e     P_OPTIONS_LEN...
  149248:	3d212071 4c554e20 0000004c 76726573     q != NULL...serv
  149258:	73656369 49776c2f 74694b50 69776c2f     ices/lwIPKit/lwi
  149268:	2e322d70 2f322e30 2f637273 65726f63     p-2.0.2/src/core
  149278:	7670692f 74652f34 70726168 0000632e     /ipv4/etharp.c..
  149288:	703e2d71 203d2120 4c4c554e 00000000     q->p != NULL....
  149298:	703e2d72 203d2120 4c4c554e 00000000     r->p != NULL....
  1492a8:	74617473 3d3d2065 48544520 5f505241     state == ETHARP_
  1492b8:	54415453 45505f45 4e49444e 7c7c2047     STATE_PENDING ||
  1492c8:	61747320 3e206574 5445203d 50524148      state >= ETHARP
  1492d8:	4154535f 535f4554 4c424154 00000045     _STATE_STABLE...
  1492e8:	5f707261 6c626174 5d695b65 3d20712e     arp_table[i].q =
  1492f8:	554e203d 00004c4c 203c2069 5f505241     = NULL..i < ARP_
  149308:	4c424154 49535f45 0000455a 5f707261     TABLE_SIZE..arp_
  149318:	6c626174 5d695b65 6174732e 3d206574     table[i].state =
  149328:	5445203d 50524148 4154535f 455f4554     = ETHARP_STATE_E
  149338:	5954504d 00000000 6974656e 683e2d66     MPTY....netif->h
  149348:	64646177 656c5f72 3d3d206e 48544520     waddr_len == ETH
  149358:	4157485f 5f524444 004e454c 5f687465     _HWADDR_LEN.eth_
  149368:	20746572 4e203d21 204c4c55 69202626     ret != NULL && i
  149378:	65725f70 3d212074 4c554e20 0000004c     p_ret != NULL...
  149388:	64617069 21207264 554e203d 00004c4c     ipaddr != NULL..
  149398:	6974656e 3d212066 4c554e20 0000004c     netif != NULL...
  1493a8:	5f687465 20746572 4e203d21 004c4c55     eth_ret != NULL.
  1493b8:	5f707261 6c626174 72615b65 64695f70     arp_table[arp_id
  1493c8:	732e5d78 65746174 203d3e20 41485445     x].state >= ETHA
  1493d8:	535f5052 45544154 4154535f 00454c42     RP_STATE_STABLE.
  1493e8:	5f707261 6c626174 5d695b65 6174732e     arp_table[i].sta
  1493f8:	3d206574 4550203d 4e49444e 726f2047     te == PENDING or
  149408:	41545320 00454c42 70206f6e 656b6361      STABLE.no packe
  149418:	75712074 73657565 6c6c6120 6465776f     t queues allowed
  149428:	00000021 63656863 6874206b 66207461     !...check that f
  149438:	74737269 75627020 61632066 6f68206e     irst pbuf can ho
  149448:	7320646c 63757274 74652074 70726168     ld struct etharp
  149458:	7264685f 00000000 6974656e 683e2d66     _hdr....netif->h
  149468:	64646177 656c5f72 756d206e 62207473     waddr_len must b
  149478:	68742065 61732065 6120656d 54452073     e the same as ET
  149488:	57485f48 52444441 4e454c5f 726f6620     H_HWADDR_LEN for
  149498:	68746520 21707261 00000000 706d6369      etharp!....icmp
  1494a8:	706e695f 203a7475 69766f6d 7220676e     _input: moving r
  1494b8:	61703e2d 616f6c79 6f742064 6d636920     ->payload to icm
  1494c8:	65682070 72656461 69616620 0a64656c     p header failed.
  1494d8:	00000000 76726573 73656369 49776c2f     ....services/lwI
  1494e8:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  1494f8:	2f637273 65726f63 7670692f 63692f34     src/core/ipv4/ic
  149508:	632e706d 00000000 706d6369 706e695f     mp.c....icmp_inp
  149518:	203a7475 74736572 6e69726f 726f2067     ut: restoring or
  149528:	6e696769 70206c61 61703e2d 616f6c79     iginal p->payloa
  149538:	61662064 64656c69 0000000a 63656863     d failed....chec
  149548:	6874206b 66207461 74737269 75627020     k that first pbu
  149558:	61632066 6f68206e 6920646c 20706d63     f can hold icmp 
  149568:	7373656d 00656761 76726573 73656369     message.services
  149578:	49776c2f 74694b50 69776c2f 2e322d70     /lwIPKit/lwip-2.
  149588:	2f322e30 2f637273 65726f63 7670692f     0.2/src/core/ipv
  149598:	67692f34 632e706d 00000000 706d6769     4/igmp.c....igmp
  1495a8:	6f6f6c5f 5f70756b 756f7267 66203a70     _lookup_group: f
  1495b8:	74737269 6f726720 6d207075 20747375     irst group must 
  1495c8:	61206562 79736c6c 6d657473 00000073     be allsystems...
  1495d8:	706d6769 6f6f6c5f 5f70756b 756f7267     igmp_lookup_grou
  1495e8:	61203a70 65206c6c 70656378 69662074     p: all except fi
  1495f8:	20747372 756f7267 756d2070 6e207473     rst group must n
  149608:	6220746f 6c612065 7379736c 736d6574     ot be allsystems
  149618:	00000000 706d6769 696f6a5f 6f72676e     ....igmp_joingro
  149628:	203a7075 65747461 2074706d 6a206f74     up: attempt to j
  149638:	206e696f 2d6e6f6e 746c756d 73616369     oin non-multicas
  149648:	64612074 73657264 00000073 706d6769     t address...igmp
  149658:	696f6a5f 6f72676e 203a7075 65747461     _joingroup: atte
  149668:	2074706d 6a206f74 206e696f 736c6c61     mpt to join alls
  149678:	65747379 6120736d 65726464 00007373     ystems address..
  149688:	706d6769 696f6a5f 6f72676e 6e5f7075     igmp_joingroup_n
  149698:	66697465 7461203a 706d6574 6f742074     etif: attempt to
  1496a8:	696f6a20 6f6e206e 756d2d6e 6369746c      join non-multic
  1496b8:	20747361 72646461 00737365 706d6769     ast address.igmp
  1496c8:	696f6a5f 6f72676e 6e5f7075 66697465     _joingroup_netif
  1496d8:	7461203a 706d6574 6f742074 696f6a20     : attempt to joi
  1496e8:	6c61206e 7379736c 736d6574 64646120     n allsystems add
  1496f8:	73736572 00000000 706d6769 696f6a5f     ress....igmp_joi
  149708:	6f72676e 6e5f7075 66697465 7461203a     ngroup_netif: at
  149718:	706d6574 6f742074 696f6a20 6e6f206e     tempt to join on
  149728:	6e6f6e20 4d47492d 656e2050 00666974      non-IGMP netif.
  149738:	706d6769 61656c5f 72676576 3a70756f     igmp_leavegroup:
  149748:	74746120 74706d65 206f7420 7661656c      attempt to leav
  149758:	6f6e2065 756d2d6e 6369746c 20747361     e non-multicast 
  149768:	72646461 00737365 706d6769 61656c5f     address.igmp_lea
  149778:	72676576 3a70756f 74746120 74706d65     vegroup: attempt
  149788:	206f7420 7661656c 6c612065 7379736c      to leave allsys
  149798:	736d6574 64646120 73736572 00000000     tems address....
  1497a8:	706d6769 61656c5f 72676576 5f70756f     igmp_leavegroup_
  1497b8:	6974656e 61203a66 6d657474 74207470     netif: attempt t
  1497c8:	656c206f 20657661 2d6e6f6e 746c756d     o leave non-mult
  1497d8:	73616369 64612074 73657264 00000073     icast address...
  1497e8:	706d6769 61656c5f 72676576 5f70756f     igmp_leavegroup_
  1497f8:	6974656e 61203a66 6d657474 74207470     netif: attempt t
  149808:	656c206f 20657661 736c6c61 65747379     o leave allsyste
  149818:	6120736d 65726464 00007373 706d6769     ms address..igmp
  149828:	61656c5f 72676576 5f70756f 6974656e     _leavegroup_neti
  149838:	61203a66 6d657474 74207470 656c206f     f: attempt to le
  149848:	20657661 6e206e6f 492d6e6f 20504d47     ave on non-IGMP 
  149858:	6974656e 00000066 706d6769 6e65735f     netif...igmp_sen
  149868:	63203a64 6b636568 61687420 69662074     d: check that fi
  149878:	20747372 66756270 6e616320 6c6f6820     rst pbuf can hol
  149888:	74732064 74637572 6d676920 736d5f70     d struct igmp_ms
  149898:	00000067 723e2d70 3d206665 0031203d     g...p->ref == 1.
  1498a8:	76726573 73656369 49776c2f 74694b50     services/lwIPKit
  1498b8:	69776c2f 2e322d70 2f322e30 2f637273     /lwip-2.0.2/src/
  1498c8:	65726f63 7670692f 70692f34 00632e34     core/ipv4/ip4.c.
  1498d8:	63656863 6874206b 66207461 74737269     check that first
  1498e8:	75627020 61632066 6f68206e 7320646c      pbuf can hold s
  1498f8:	63757274 70692074 7264685f 00000000     truct ip_hdr....

00149908 <ip_addr_any>:
  149908:	00000000                                ....

0014990c <ip_addr_broadcast>:
  14990c:	ffffffff 61686e75 656c646e 00000064     ....unhandled...
  14991c:	76726573 73656369 49776c2f 74694b50     services/lwIPKit
  14992c:	69776c2f 2e322d70 2f322e30 2f637273     /lwip-2.0.2/src/
  14993c:	65726f63 7670692f 70692f34 64615f34     core/ipv4/ip4_ad
  14994c:	632e7264 00000000 76657270 203d2120     dr.c....prev != 
  14995c:	00727069 76726573 73656369 49776c2f     ipr.services/lwI
  14996c:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  14997c:	2f637273 65726f63 7670692f 70692f34     src/core/ipv4/ip
  14998c:	72665f34 632e6761 00000000 76657270     4_frag.c....prev
  14999c:	656e3e2d 3d207478 7069203d 00000072     ->next == ipr...
  1499ac:	66756270 72665f73 20646565 6c63202b     pbufs_freed + cl
  1499bc:	3c206e65 7830203d 66666666 00000000     en <= 0xffff....
  1499cc:	725f7069 73736165 7562705f 756f6366     ip_reass_pbufcou
  1499dc:	3e20746e 6c63203d 00006e65 696e6173     nt >= clen..sani
  1499ec:	63207974 6b636568 6e696c20 2064656b     ty check linked 
  1499fc:	7473696c 00000000 63656863 7266206b     list....check fr
  149a0c:	656d6761 2073746e 276e6f64 766f2074     agments don't ov
  149a1c:	616c7265 00000070 70206f6e 69766572     erlap...no previ
  149a2c:	2073756f 67617266 746e656d 6874202c     ous fragment, th
  149a3c:	6d207369 20747375 74206562 66206568     is must be the f
  149a4c:	74737269 61726620 6e656d67 00002174     irst fragment!..
  149a5c:	696e6173 63207974 6b636568 00000000     sanity check....
  149a6c:	696c6176 65746164 7461645f 61726761     validate_datagra
  149a7c:	656e3a6d 705f7478 21667562 4c554e3d     m:next_pbuf!=NUL
  149a8c:	0000004c 696c6176 65746164 7461645f     L...validate_dat
  149a9c:	61726761 61643a6d 72676174 65206d61     agram:datagram e
  149aac:	3d21646e 61746164 6d617267 6e656c20     nd!=datagram len
  149abc:	00000000 3d212070 4c554e20 0000004c     ....p != NULL...
  149acc:	20726370 4e203d21 004c4c55 20726370     pcr != NULL.pcr 
  149adc:	70203d3d 00000000 5f347069 67617266     == p....ip4_frag
  149aec:	64202928 2073656f 20746f6e 70707573     () does not supp
  149afc:	2074726f 6f205049 6f697470 0000736e     ort IP options..
  149b0c:	665f7069 28676172 4d203a29 6c612046     ip_frag(): MF al
  149b1c:	64616572 65732079 00000074 73696874     ready set...this
  149b2c:	65656e20 61207364 75627020 6e692066      needs a pbuf in
  149b3c:	656e6f20 65697020 00216563 676e6970      one piece!.ping
  149b4c:	7a69735f 73692065 6f6f7420 67696220     _size is too big
  149b5c:	00000000 76726573 73656369 49776c2f     ....services/lwI
  149b6c:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  149b7c:	2f637273 73707061 6e69702f 69702f67     src/apps/ping/pi
  149b8c:	632e676e 00000000 00003165 63616d65     ng.c....e1..emac
  149b9c:	6e695f31 00007274 6d305b1b 642f445b     1_intr...[0m[D/d
  149bac:	652e7672 5d74656e 00000020 74656e65     rv.enet] ...enet
  149bbc:	6c206425 206b6e69 00007075 6d305b1b     %d link up...[0m
  149bcc:	0000000a 74656e65 6c206425 206b6e69     ....enet%d link 
  149bdc:	6e776f64 00000000 31335b1b 2f455b6d     down.....[31m[E/
  149bec:	2e767264 74656e65 0000205d 4f525245     drv.enet] ..ERRO
  149bfc:	61203a52 636f6c6c 6d656d20 746f6e20     R: alloc mem not
  149c0c:	6f6e6520 20686775 20726f66 74656e65      enough for enet
  149c1c:	69726420 00726576 4f525245 72203a52      driver.ERROR: r
  149c2c:	75622078 70206666 20656761 6f6c6c61     x buff page allo
  149c3c:	61662063 64656c69 00000000 4f525245     c failed....ERRO
  149c4c:	74203a52 75622078 70206666 20656761     R: tx buff page 
  149c5c:	6f6c6c61 61662063 64656c69 00000000     alloc failed....
  149c6c:	4f525245 72203a52 64622078 67617020     ERROR: rx bd pag
  149c7c:	6c612065 20636f6c 6c696166 00006465     e alloc failed..
  149c8c:	4f525245 74203a52 64622078 67617020     ERROR: tx bd pag
  149c9c:	6c612065 20636f6c 6c696166 00006465     e alloc failed..
  149cac:	51494e55 495f4555 73692044 25782520     UNIQUE_ID is %x%
  149cbc:	00000078 51494e55 495f4555 68632044     x...UNIQUE_ID ch
  149ccc:	65676e61 206f7420 62203233 20737469     ange to 32 bits 
  149cdc:	00007825 00000070 2074656e 6f727265     %x..p...net erro
  149cec:	65732072 6c20646e 74676e65 64252068     r send length %d
  149cfc:	63786520 20646565 2078616d 676e656c      exceed max leng
  149d0c:	00006874 2074656e 6f727265 65722072     th..net error re
  149d1c:	6c207663 74676e65 64252068 63786520     cv length %d exc
  149d2c:	20646565 2078616d 676e656c 00006874     eed max length..
  149d3c:	20687465 64616572 766e6920 64696c61     eth read invalid
  149d4c:	72617020 74656d61 62207265 65666675      parameter buffe
  149d5c:	70252072 7a697320 64252065 00000000     r %p size %d....
  149d6c:	20687465 74697277 6e692065 696c6176     eth write invali
  149d7c:	61702064 656d6172 20726574 66667562     d parameter buff
  149d8c:	25207265 69732070 2520657a 00000064     er %p size %d...
  149d9c:	65746e69 75707272 616d2074 20686374     interrput match 
  149dac:	65736162 64646120 72652072 00726f72     base addr error.
  149dbc:	33335b1b 2f575b6d 2e767264 74656e65     .[33m[W/drv.enet
  149dcc:	0000205d 20594850 6b6e694c 776f6420     ] ..PHY Link dow
  149ddc:	70202c6e 7361656c 68632065 206b6365     n, please check 
  149dec:	20656874 6c626163 6f632065 63656e6e     the cable connec
  149dfc:	6e6f6974 646e6120 6e696c20 6170206b     tion and link pa
  149e0c:	656e7472 65732072 6e697474 00002e67     rtner setting...

00149e1c <_k_enet_ops>:
  149e1c:	00000000 0013525c 001352a4 001352e0     ....\R...R...R..
  149e2c:	00135390 00134c90 32335b1b 2f495b6d     .S...L...[32m[I/
  149e3c:	2e767264 74656e65 0000205d 63616d65     drv.enet] ..emac
  149e4c:	76656420 20656369 74696e69 63757320      device init suc
  149e5c:	73736563 00000000 63616d65 76656420     cess....emac dev
  149e6c:	20656369 74696e69 69616620 203a646c     ice init faild: 
  149e7c:	00006425 6b6e696c 6425645f 00000000     %d..link_d%d....

00149e8c <__FUNCTION__.9268>:
  149e8c:	695f7472 7536786d 74655f6c 78745f68     rt_imx6ul_eth_tx
  149e9c:	00000000 45535341 45205452 524f5252     ....ASSERT ERROR
  149eac:	25202220 3a222073 6c696620 25222065      " %s ": file "%
  149ebc:	4c202273 20656e69 22642522 6e756620     s" Line "%d" fun
  149ecc:	6f697463 616e206e 2220656d 20227325     ction name "%s" 
  149edc:	0000000a                                ....

00149ee0 <s_enetBases>:
  149ee0:	00000000 02188000 020b4000 74736e69     .........@..inst
  149ef0:	65636e61 41203c20 59415252 5a49535f     ance < ARRAY_SIZ
  149f00:	5f732845 74656e65 65736142 00002973     E(s_enetBases)..
  149f10:	666e6f63 00006769 646e6168 0000656c     config..handle..
  149f20:	66667562 6f437265 6769666e 00000000     bufferConfig....
  149f30:	66667562 6f437265 6769666e 78723e2d     bufferConfig->rx
  149f40:	74536442 41747261 41726464 6e67696c     BdStartAddrAlign
  149f50:	00000000 66667562 6f437265 6769666e     ....bufferConfig
  149f60:	78743e2d 74536442 41747261 41726464     ->txBdStartAddrA
  149f70:	6e67696c 00000000 66667562 6f437265     lign....bufferCo
  149f80:	6769666e 78723e2d 66667542 6c417265     nfig->rxBufferAl
  149f90:	006e6769 66667562 6f437265 6769666e     ign.bufferConfig
  149fa0:	78743e2d 66667542 6c417265 006e6769     ->txBufferAlign.
  149fb0:	4163616d 00726464 66667562 6f437265     macAddr.bufferCo
  149fc0:	6769666e 78723e2d 66667542 657a6953     nfig->rxBuffSize
  149fd0:	67696c41 3d3e206e 454e4520 58525f54     Align >= ENET_RX
  149fe0:	4e494d5f 4655425f 53524546 00455a49     _MIN_BUFFERSIZE.
  149ff0:	66667562 6f437265 6769666e 78743e2d     bufferConfig->tx
  14a000:	66667542 657a6953 67696c41 202a206e     BuffSizeAlign * 
  14a010:	66667562 6f437265 6769666e 78743e2d     bufferConfig->tx
  14a020:	754e6442 7265626d 28203e20 54454e45     BdNumber > (ENET
  14a030:	4152465f 4d5f454d 465f5841 454d4152     _FRAME_MAX_FRAME
  14a040:	204e454c 4e45202b 465f5445 454d4152     LEN + ENET_FRAME
  14a050:	414c565f 41545f4e 4e454c47 00000029     _VLAN_TAGLEN)...
  14a060:	66667562 6f437265 6769666e 78743e2d     bufferConfig->tx
  14a070:	66667542 657a6953 67696c41 202a206e     BuffSizeAlign * 
  14a080:	66667562 6f437265 6769666e 78743e2d     bufferConfig->tx
  14a090:	754e6442 7265626d 45203e20 5f54454e     BdNumber > ENET_
  14a0a0:	4d415246 414d5f45 52465f58 4c454d41     FRAME_MAX_FRAMEL
  14a0b0:	00004e45 66667562 6f437265 6769666e     EN..bufferConfig
  14a0c0:	78723e2d 66667542 657a6953 67696c41     ->rxBuffSizeAlig
  14a0d0:	202a206e 66667562 6f437265 6769666e     n * bufferConfig
  14a0e0:	78723e2d 754e6442 7265626d 63203e20     ->rxBdNumber > c
  14a0f0:	69666e6f 723e2d67 78614d78 6d617246     onfig->rxMaxFram
  14a100:	6e654c65 00000000 64427874 72617453     eLen....txBdStar
  14a110:	696c4174 00006e67 75427874 74536666     tAlign..txBuffSt
  14a120:	41747261 6e67696c 00000000 64427872     artAlign....rxBd
  14a130:	72617453 696c4174 00006e67 75427872     StartAlign..rxBu
  14a140:	74536666 41747261 6e67696c 00000000     ffStartAlign....
  14a150:	43637273 6b636f6c 007a485f 646e6168     srcClock_Hz.hand
  14a160:	3e2d656c 64427872 72727543 00746e65     le->rxBdCurrent.
  14a170:	72724565 7453726f 63697461 00000000     eErrorStatic....
  14a180:	676e656c 00006874 31335b1b 2f455b6d     length...[31m[E/
  14a190:	2e767264 74656e65 0000205d 6d617266     drv.enet] ..fram
  14a1a0:	72652065 30726f72 72756320 66667542     e error0 curBuff
  14a1b0:	63736544 2d706972 6e6f633e 6c6f7274     Descrip->control
  14a1c0:	25783020 20783430 676e656c 25206874      0x%04x length %
  14a1d0:	00000a64 6d305b1b 0000000a 6d617266     d....[0m....fram
  14a1e0:	72652065 31726f72 72756320 66667542     e error1 curBuff
  14a1f0:	63736544 2d706972 6e6f633e 6c6f7274     Descrip->control
  14a200:	25783020 20783430 676e656c 25206874      0x%04x length %
  14a210:	00000a64 646e6168 3e2d656c 64427874     d...handle->txBd
  14a220:	72727543 00746e65 61746164 00000000     Current.data....
  14a230:	676e656c 3c206874 4e45203d 465f5445     length <= ENET_F
  14a240:	454d4152 58414d5f 4152465f 454c454d     RAME_MAX_FRAMELE
  14a250:	0000004e 72646461 00737365              N...address.

0014a25c <__FUNCTION__.9236>:
  14a25c:	54454e45 7465475f 74736e49 65636e61     ENET_GetInstance
  14a26c:	00000000                                ....

0014a270 <__FUNCTION__.9241>:
  14a270:	54454e45 7465475f 61666544 43746c75     ENET_GetDefaultC
  14a280:	69666e6f 00000067                       onfig...

0014a288 <__FUNCTION__.9250>:
  14a288:	54454e45 696e495f 00000074              ENET_Init...

0014a294 <__FUNCTION__.9259>:
  14a294:	54454e45 7465535f 6c6c6143 6b636162     ENET_SetCallback
  14a2a4:	00000000                                ....

0014a2a8 <__FUNCTION__.9288>:
  14a2a8:	54454e45 7465535f 75427854 72656666     ENET_SetTxBuffer
  14a2b8:	63736544 74706972 0073726f              Descriptors.

0014a2c4 <__FUNCTION__.9302>:
  14a2c4:	54454e45 7465535f 75427852 72656666     ENET_SetRxBuffer
  14a2d4:	63736544 74706972 0073726f              Descriptors.

0014a2e0 <__FUNCTION__.9324>:
  14a2e0:	54454e45 7465475f 4163614d 00726464     ENET_GetMacAddr.

0014a2f0 <__FUNCTION__.9331>:
  14a2f0:	54454e45 7465535f 00494d53              ENET_SetSMI.

0014a2fc <__FUNCTION__.9371>:
  14a2fc:	54454e45 7465475f 72457852 66654272     ENET_GetRxErrBef
  14a30c:	5265726f 46646165 656d6172 00000000     oreReadFrame....

0014a31c <__FUNCTION__.9383>:
  14a31c:	54454e45 6165525f 61724664 0000656d     ENET_ReadFrame..

0014a32c <__FUNCTION__.9390>:
  14a32c:	54454e45 6470555f 52657461 42646165     ENET_UpdateReadB
  14a33c:	65666675 00007372                       uffers..

0014a344 <__FUNCTION__.9398>:
  14a344:	54454e45 6e65535f 61724664 0000656d     ENET_SendFrame..

0014a354 <__FUNCTION__.9407>:
  14a354:	54454e45 6464415f 746c754d 73616369     ENET_AddMulticas
  14a364:	6f724774 00007075                       tGroup..

0014a36c <__FUNCTION__.9422>:
  14a36c:	54454e45 61654c5f 754d6576 6369746c     ENET_LeaveMultic
  14a37c:	47747361 70756f72 00000000              astGroup....

0014a388 <__FUNCTION__.9439>:
  14a388:	54454e45 6172545f 696d736e 51524974     ENET_TransmitIRQ
  14a398:	646e6148 0072656c                       Handler.

0014a3a0 <__FUNCTION__.9446>:
  14a3a0:	54454e45 6365525f 65766965 48515249     ENET_ReceiveIRQH
  14a3b0:	6c646e61 00007265                       andler..

0014a3b8 <__FUNCTION__.9451>:
  14a3b8:	54454e45 7272455f 5249726f 6e614851     ENET_ErrorIRQHan
  14a3c8:	72656c64 00000000 76726573 73656369     dler....services
  14a3d8:	49776c2f 74694b50 7672642f 656e655f     /lwIPKit/drv_ene
  14a3e8:	72642f74 72657669 6c73662f 6970675f     t/driver/fsl_gpi
  14a3f8:	00632e6f 206e6970 3233203c 00000000     o.c.pin < 32....

0014a408 <__func__.6332>:
  14a408:	4f495047 6972575f 69506574 74754f6e     GPIO_WritePinOut
  14a418:	00747570 61746164 00727450 74617473     put.dataPtr.stat
  14a428:	00007375 6c707564 00007865              us..duplex..

0014a434 <__FUNCTION__.8416>:
  14a434:	5f594850 64616552 00000000              PHY_Read....

0014a440 <__FUNCTION__.8434>:
  14a440:	5f594850 4c746547 536b6e69 75746174     PHY_GetLinkStatu
  14a450:	00000073                                s...

0014a454 <__FUNCTION__.8443>:
  14a454:	5f594850 4c746547 536b6e69 64656570     PHY_GetLinkSpeed
  14a464:	6c707544 00007865                       Duplex..

0014a46c <errid>:
  14a46c:	19222154 0302010d 0c1c4b11 1d0b0410     T!"......K......
  14a47c:	68271e12 71706f6e 06052062 1514130f     ..'hnopqb ......
  14a48c:	0716081a 18172428 1b0e0a09 8323251f     ....($.......%#.
  14a49c:	2a267d82 3e3d3c2b 4a47433f 5a59584d     .}&*+<=>?CGJMXYZ
  14a4ac:	5e5d5c5b 6361605f 67666564 6c6b6a69     [\]^_`acdefgijkl
  14a4bc:	79747372 487c7b7a 00000000              rstyz{|H....

0014a4c8 <errmsg>:
  14a4c8:	656c6c49 206c6167 65747962 71657320     Illegal byte seq
  14a4d8:	636e6575 6f440065 6e69616d 72726520     uence.Domain err
  14a4e8:	5200726f 6c757365 6f6e2074 65722074     or.Result not re
  14a4f8:	73657270 61746e65 00656c62 20746f4e     presentable.Not 
  14a508:	74742061 65500079 73696d72 6e6f6973     a tty.Permission
  14a518:	6e656420 00646569 7265704f 6f697461      denied.Operatio
  14a528:	6f6e206e 65702074 74696d72 00646574     n not permitted.
  14a538:	73206f4e 20686375 656c6966 20726f20     No such file or 
  14a548:	65726964 726f7463 6f4e0079 63757320     directory.No suc
  14a558:	72702068 7365636f 69460073 6520656c     h process.File e
  14a568:	74736978 61560073 2065756c 206f6f74     xists.Value too 
  14a578:	6772616c 6f662065 61642072 74206174     large for data t
  14a588:	00657079 73206f4e 65636170 66656c20     ype.No space lef
  14a598:	6e6f2074 76656420 00656369 2074754f     t on device.Out 
  14a5a8:	6d20666f 726f6d65 65520079 72756f73     of memory.Resour
  14a5b8:	62206563 00797375 65746e49 70757272     ce busy.Interrup
  14a5c8:	20646574 74737973 63206d65 006c6c61     ted system call.
  14a5d8:	6f736552 65637275 6d657420 61726f70     Resource tempora
  14a5e8:	796c6972 616e7520 6c696176 656c6261     rily unavailable
  14a5f8:	766e4900 64696c61 65657320 7243006b     .Invalid seek.Cr
  14a608:	2d73736f 69766564 6c206563 006b6e69     oss-device link.
  14a618:	64616552 6c6e6f2d 69662079 7320656c     Read-only file s
  14a628:	65747379 6944006d 74636572 2079726f     ystem.Directory 
  14a638:	20746f6e 74706d65 6f430079 63656e6e     not empty.Connec
  14a648:	6e6f6974 73657220 62207465 65702079     tion reset by pe
  14a658:	4f007265 61726570 6e6f6974 6d697420     er.Operation tim
  14a668:	6f206465 43007475 656e6e6f 6f697463     ed out.Connectio
  14a678:	6572206e 65737566 6f480064 69207473     n refused.Host i
  14a688:	6f642073 48006e77 2074736f 75207369     s down.Host is u
  14a698:	6165726e 62616863 4100656c 65726464     nreachable.Addre
  14a6a8:	69207373 7375206e 72420065 6e656b6f     ss in use.Broken
  14a6b8:	70697020 2f490065 7265204f 00726f72      pipe.I/O error.
  14a6c8:	73206f4e 20686375 69766564 6f206563     No such device o
  14a6d8:	64612072 73657264 6c420073 206b636f     r address.Block 
  14a6e8:	69766564 72206563 69757165 00646572     device required.
  14a6f8:	73206f4e 20686375 69766564 4e006563     No such device.N
  14a708:	6120746f 72696420 6f746365 49007972     ot a directory.I
  14a718:	20612073 65726964 726f7463 65540079     s a directory.Te
  14a728:	66207478 20656c69 79737562 65784500     xt file busy.Exe
  14a738:	6f662063 74616d72 72726520 4900726f     c format error.I
  14a748:	6c61766e 61206469 6d756772 00746e65     nvalid argument.
  14a758:	75677241 746e656d 73696c20 6f742074     Argument list to
  14a768:	6f6c206f 5300676e 6f626d79 2063696c     o long.Symbolic 
  14a778:	6b6e696c 6f6f6c20 69460070 616e656c     link loop.Filena
  14a788:	7420656d 6c206f6f 00676e6f 206f6f54     me too long.Too 
  14a798:	796e616d 65706f20 6966206e 2073656c     many open files 
  14a7a8:	73206e69 65747379 6f4e006d 6c696620     in system.No fil
  14a7b8:	65642065 69726373 726f7470 76612073     e descriptors av
  14a7c8:	616c6961 00656c62 20646142 656c6966     ailable.Bad file
  14a7d8:	73656420 70697263 00726f74 63206f4e      descriptor.No c
  14a7e8:	646c6968 6f727020 73736563 64614200     hild process.Bad
  14a7f8:	64646120 73736572 6c694600 6f742065      address.File to
  14a808:	616c206f 00656772 206f6f54 796e616d     o large.Too many
  14a818:	6e696c20 4e00736b 6f6c206f 20736b63      links.No locks 
  14a828:	69617661 6c62616c 65520065 72756f73     available.Resour
  14a838:	64206563 6c646165 206b636f 6c756f77     ce deadlock woul
  14a848:	636f2064 00727563 74617453 6f6e2065     d occur.State no
  14a858:	65722074 65766f63 6c626172 72500065     t recoverable.Pr
  14a868:	6f697665 6f207375 72656e77 65696420     evious owner die
  14a878:	704f0064 74617265 206e6f69 636e6163     d.Operation canc
  14a888:	64656c65 6e754600 6f697463 6f6e206e     eled.Function no
  14a898:	6d692074 6d656c70 65746e65 6f4e0064     t implemented.No
  14a8a8:	73656d20 65676173 20666f20 69736564      message of desi
  14a8b8:	20646572 65707974 65644900 6669746e     red type.Identif
  14a8c8:	20726569 6f6d6572 00646576 69766544     ier removed.Devi
  14a8d8:	6e206563 6120746f 72747320 006d6165     ce not a stream.
  14a8e8:	64206f4e 20617461 69617661 6c62616c     No data availabl
  14a8f8:	65440065 65636976 6d697420 74756f65     e.Device timeout
  14a908:	74754f00 20666f20 65727473 20736d61     .Out of streams 
  14a918:	6f736572 65637275 694c0073 68206b6e     resources.Link h
  14a928:	62207361 206e6565 65766573 00646572     as been severed.
  14a938:	746f7250 6c6f636f 72726520 4200726f     Protocol error.B
  14a948:	6d206461 61737365 46006567 20656c69     ad message.File 
  14a958:	63736564 74706972 6920726f 6162206e     descriptor in ba
  14a968:	74732064 00657461 20746f4e 6f732061     d state.Not a so
  14a978:	74656b63 73654400 616e6974 6e6f6974     cket.Destination
  14a988:	64646120 73736572 71657220 65726975      address require
  14a998:	654d0064 67617373 6f742065 616c206f     d.Message too la
  14a9a8:	00656772 746f7250 6c6f636f 6f727720     rge.Protocol wro
  14a9b8:	7420676e 20657079 20726f66 6b636f73     ng type for sock
  14a9c8:	50007465 6f746f72 206c6f63 20746f6e     et.Protocol not 
  14a9d8:	69617661 6c62616c 72500065 636f746f     available.Protoc
  14a9e8:	6e206c6f 7320746f 6f707075 64657472     ol not supported
  14a9f8:	636f5300 2074656b 65707974 746f6e20     .Socket type not
  14aa08:	70757320 74726f70 4e006465 7320746f      supported.Not s
  14aa18:	6f707075 64657472 6f725000 6f636f74     upported.Protoco
  14aa28:	6166206c 796c696d 746f6e20 70757320     l family not sup
  14aa38:	74726f70 41006465 65726464 66207373     ported.Address f
  14aa48:	6c696d61 6f6e2079 75732074 726f7070     amily not suppor
  14aa58:	20646574 70207962 6f746f72 006c6f63     ted by protocol.
  14aa68:	72646441 20737365 20746f6e 69617661     Address not avai
  14aa78:	6c62616c 654e0065 726f7774 7369206b     lable.Network is
  14aa88:	776f6420 654e006e 726f7774 6e75206b      down.Network un
  14aa98:	63616572 6c626168 6f430065 63656e6e     reachable.Connec
  14aaa8:	6e6f6974 73657220 62207465 656e2079     tion reset by ne
  14aab8:	726f7774 6f43006b 63656e6e 6e6f6974     twork.Connection
  14aac8:	6f626120 64657472 206f4e00 66667562      aborted.No buff
  14aad8:	73207265 65636170 61766120 62616c69     er space availab
  14aae8:	5300656c 656b636f 73692074 6e6f6320     le.Socket is con
  14aaf8:	7463656e 53006465 656b636f 6f6e2074     nected.Socket no
  14ab08:	6f632074 63656e6e 00646574 6e6e6143     t connected.Cann
  14ab18:	7320746f 20646e65 65746661 6f732072     ot send after so
  14ab28:	74656b63 75687320 776f6474 704f006e     cket shutdown.Op
  14ab38:	74617265 206e6f69 65726c61 20796461     eration already 
  14ab48:	70206e69 72676f72 00737365 7265704f     in progress.Oper
  14ab58:	6f697461 6e69206e 6f727020 73657267     ation in progres
  14ab68:	74530073 20656c61 656c6966 6e616820     s.Stale file han
  14ab78:	00656c64 6f6d6552 49206574 65204f2f     dle.Remote I/O e
  14ab88:	726f7272 6f755100 65206174 65656378     rror.Quota excee
  14ab98:	00646564 6d206f4e 75696465 6f66206d     ded.No medium fo
  14aba8:	00646e75 6e6f7257 656d2067 6d756964     und.Wrong medium
  14abb8:	70797420 754d0065 6869746c 6120706f      type.Multihop a
  14abc8:	6d657474 64657470 206f4e00 6f727265     ttempted.No erro
  14abd8:	6e692072 6d726f66 6f697461 0000006e     r information...
  14abe8:	65737341 6f697472 6166206e 64656c69     Assertion failed
  14abf8:	7325203a 73252820 7325203a 6425203a     : %s (%s: %s: %d
  14ac08:	00000a29                                )...

0014ac0c <__FUNCTION__.6013>:
  14ac0c:	63737973 5f6c6c61 74736572 5f747261     syscall_restart_
  14ac1c:	63737973 006c6c61                       syscall.

0014ac24 <__FUNCTION__.6017>:
  14ac24:	63737973 5f6c6c61 74697865 00000000     syscall_exit....

0014ac34 <__FUNCTION__.6020>:
  14ac34:	63737973 5f6c6c61 6b726f66 00000000     syscall_fork....

0014ac44 <__FUNCTION__.6026>:
  14ac44:	63737973 5f6c6c61 64616572 00000000     syscall_read....

0014ac54 <__FUNCTION__.6032>:
  14ac54:	63737973 5f6c6c61 74697277 00000065     syscall_write...

0014ac64 <__FUNCTION__.6038>:
  14ac64:	63737973 5f6c6c61 6e65706f 00000000     syscall_open....

0014ac74 <__FUNCTION__.6042>:
  14ac74:	63737973 5f6c6c61 736f6c63 00000065     syscall_close...

0014ac84 <__FUNCTION__.6045>:
  14ac84:	63737973 5f6c6c61 61657263 00000074     syscall_creat...

0014ac94 <__FUNCTION__.6048>:
  14ac94:	63737973 5f6c6c61 6b6e696c 00000000     syscall_link....

0014aca4 <__FUNCTION__.6052>:
  14aca4:	63737973 5f6c6c61 696c6e75 00006b6e     syscall_unlink..

0014acb4 <__FUNCTION__.6058>:
  14acb4:	63737973 5f6c6c61 63657865 00006576     syscall_execve..

0014acc4 <__FUNCTION__.6062>:
  14acc4:	63737973 5f6c6c61 69646863 00000072     syscall_chdir...

0014acd4 <__FUNCTION__.6065>:
  14acd4:	63737973 5f6c6c61 6f6e6b6d 00000064     syscall_mknod...

0014ace4 <__FUNCTION__.6068>:
  14ace4:	63737973 5f6c6c61 6f6d6863 00000064     syscall_chmod...

0014acf4 <__FUNCTION__.6071>:
  14acf4:	63737973 5f6c6c61 6f68636c 00006e77     syscall_lchown..

0014ad04 <__FUNCTION__.6077>:
  14ad04:	63737973 5f6c6c61 6565736c 0000006b     syscall_lseek...

0014ad14 <__FUNCTION__.6080>:
  14ad14:	63737973 5f6c6c61 70746567 00006469     syscall_getpid..

0014ad24 <__FUNCTION__.6083>:
  14ad24:	63737973 5f6c6c61 6e756f6d 00000074     syscall_mount...

0014ad34 <__FUNCTION__.6086>:
  14ad34:	63737973 5f6c6c61 75746573 00006469     syscall_setuid..

0014ad44 <__FUNCTION__.6089>:
  14ad44:	63737973 5f6c6c61 75746567 00006469     syscall_getuid..

0014ad54 <__FUNCTION__.6092>:
  14ad54:	63737973 5f6c6c61 61727470 00006563     syscall_ptrace..

0014ad64 <__FUNCTION__.6095>:
  14ad64:	63737973 5f6c6c61 73756170 00000065     syscall_pause...

0014ad74 <__FUNCTION__.6100>:
  14ad74:	63737973 5f6c6c61 65636361 00007373     syscall_access..

0014ad84 <__FUNCTION__.6103>:
  14ad84:	63737973 5f6c6c61 6563696e 00000000     syscall_nice....

0014ad94 <__FUNCTION__.6106>:
  14ad94:	63737973 5f6c6c61 636e7973 00000000     syscall_sync....

0014ada4 <__FUNCTION__.6111>:
  14ada4:	63737973 5f6c6c61 6c6c696b 00000000     syscall_kill....

0014adb4 <__FUNCTION__.6116>:
  14adb4:	63737973 5f6c6c61 616e6572 0000656d     syscall_rename..

0014adc4 <__FUNCTION__.6121>:
  14adc4:	63737973 5f6c6c61 69646b6d 00000072     syscall_mkdir...

0014add4 <__FUNCTION__.6125>:
  14add4:	63737973 5f6c6c61 69646d72 00000072     syscall_rmdir...

0014ade4 <__FUNCTION__.6129>:
  14ade4:	63737973 5f6c6c61 00707564              syscall_dup.

0014adf0 <__FUNCTION__.6133>:
  14adf0:	63737973 5f6c6c61 65706970 00000000     syscall_pipe....

0014ae00 <__FUNCTION__.6136>:
  14ae00:	63737973 5f6c6c61 656d6974 00000073     syscall_times...

0014ae10 <__FUNCTION__.6140>:
  14ae10:	63737973 5f6c6c61 006b7262              syscall_brk.

0014ae1c <__FUNCTION__.6143>:
  14ae1c:	63737973 5f6c6c61 67746573 00006469     syscall_setgid..

0014ae2c <__FUNCTION__.6146>:
  14ae2c:	63737973 5f6c6c61 67746567 00006469     syscall_getgid..

0014ae3c <__FUNCTION__.6149>:
  14ae3c:	63737973 5f6c6c61 65746567 00646975     syscall_geteuid.

0014ae4c <__FUNCTION__.6152>:
  14ae4c:	63737973 5f6c6c61 65746567 00646967     syscall_getegid.

0014ae5c <__FUNCTION__.6155>:
  14ae5c:	63737973 5f6c6c61 74636361 00000000     syscall_acct....

0014ae6c <__FUNCTION__.6158>:
  14ae6c:	63737973 5f6c6c61 756f6d75 0032746e     syscall_umount2.

0014ae7c <__FUNCTION__.6164>:
  14ae7c:	63737973 5f6c6c61 74636f69 0000006c     syscall_ioctl...

0014ae8c <__FUNCTION__.6170>:
  14ae8c:	63737973 5f6c6c61 746e6366 0000006c     syscall_fcntl...

0014ae9c <__FUNCTION__.6173>:
  14ae9c:	63737973 5f6c6c61 70746573 00646967     syscall_setpgid.

0014aeac <__FUNCTION__.6176>:
  14aeac:	63737973 5f6c6c61 73616d75 0000006b     syscall_umask...

0014aebc <__FUNCTION__.6179>:
  14aebc:	63737973 5f6c6c61 6f726863 0000746f     syscall_chroot..

0014aecc <__FUNCTION__.6182>:
  14aecc:	63737973 5f6c6c61 61747375 00000074     syscall_ustat...

0014aedc <__FUNCTION__.6187>:
  14aedc:	63737973 5f6c6c61 32707564 00000000     syscall_dup2....

0014aeec <__FUNCTION__.6190>:
  14aeec:	63737973 5f6c6c61 70746567 00646970     syscall_getppid.

0014aefc <__FUNCTION__.6193>:
  14aefc:	63737973 5f6c6c61 70746567 00707267     syscall_getpgrp.

0014af0c <__FUNCTION__.6196>:
  14af0c:	63737973 5f6c6c61 73746573 00006469     syscall_setsid..

0014af1c <__FUNCTION__.6203>:
  14af1c:	63737973 5f6c6c61 61676973 6f697463     syscall_sigactio
  14af2c:	0000006e                                n...

0014af30 <__FUNCTION__.6206>:
  14af30:	63737973 5f6c6c61 72746573 64697565     syscall_setreuid
  14af40:	00000000                                ....

0014af44 <__FUNCTION__.6209>:
  14af44:	63737973 5f6c6c61 72746573 64696765     syscall_setregid
  14af54:	00000000                                ....

0014af58 <__FUNCTION__.6212>:
  14af58:	63737973 5f6c6c61 73676973 65707375     syscall_sigsuspe
  14af68:	0000646e                                nd..

0014af6c <__FUNCTION__.6215>:
  14af6c:	63737973 5f6c6c61 70676973 69646e65     syscall_sigpendi
  14af7c:	0000676e                                ng..

0014af80 <__FUNCTION__.6218>:
  14af80:	63737973 5f6c6c61 68746573 6e74736f     syscall_sethostn
  14af90:	00656d61                                ame.

0014af94 <__FUNCTION__.6223>:
  14af94:	63737973 5f6c6c61 72746573 696d696c     syscall_setrlimi
  14afa4:	00000074                                t...

0014afa8 <__FUNCTION__.6226>:
  14afa8:	63737973 5f6c6c61 72746567 67617375     syscall_getrusag
  14afb8:	00000065                                e...

0014afbc <__FUNCTION__.6229>:
  14afbc:	63737973 5f6c6c61 74746567 6f656d69     syscall_gettimeo
  14afcc:	79616466 00000000                       fday....

0014afd4 <__FUNCTION__.6232>:
  14afd4:	63737973 5f6c6c61 74746573 6f656d69     syscall_settimeo
  14afe4:	79616466 00000000                       fday....

0014afec <__FUNCTION__.6235>:
  14afec:	63737973 5f6c6c61 67746567 70756f72     syscall_getgroup
  14affc:	00000073                                s...

0014b000 <__FUNCTION__.6238>:
  14b000:	63737973 5f6c6c61 67746573 70756f72     syscall_setgroup
  14b010:	00000073                                s...

0014b014 <__FUNCTION__.6241>:
  14b014:	63737973 5f6c6c61 6c6d7973 006b6e69     syscall_symlink.

0014b024 <__FUNCTION__.6247>:
  14b024:	63737973 5f6c6c61 64616572 6b6e696c     syscall_readlink
  14b034:	00000000                                ....

0014b038 <__FUNCTION__.6250>:
  14b038:	63737973 5f6c6c61 6c657375 00006269     syscall_uselib..

0014b048 <__FUNCTION__.6253>:
  14b048:	63737973 5f6c6c61 70617773 00006e6f     syscall_swapon..

0014b058 <__FUNCTION__.6256>:
  14b058:	63737973 5f6c6c61 6f626572 0000746f     syscall_reboot..

0014b068 <__FUNCTION__.6261>:
  14b068:	63737973 5f6c6c61 6d6e756d 00007061     syscall_munmap..

0014b078 <__FUNCTION__.6264>:
  14b078:	63737973 5f6c6c61 6e757274 65746163     syscall_truncate
  14b088:	00000000                                ....

0014b08c <__FUNCTION__.6267>:
  14b08c:	63737973 5f6c6c61 75727466 7461636e     syscall_ftruncat
  14b09c:	00000065                                e...

0014b0a0 <__FUNCTION__.6270>:
  14b0a0:	63737973 5f6c6c61 6d686366 0000646f     syscall_fchmod..

0014b0b0 <__FUNCTION__.6273>:
  14b0b0:	63737973 5f6c6c61 6f686366 00006e77     syscall_fchown..

0014b0c0 <__FUNCTION__.6276>:
  14b0c0:	63737973 5f6c6c61 70746567 726f6972     syscall_getprior
  14b0d0:	00797469                                ity.

0014b0d4 <__FUNCTION__.6279>:
  14b0d4:	63737973 5f6c6c61 70746573 726f6972     syscall_setprior
  14b0e4:	00797469                                ity.

0014b0e8 <__FUNCTION__.6285>:
  14b0e8:	63737973 5f6c6c61 74617473 00007366     syscall_statfs..

0014b0f8 <__FUNCTION__.6291>:
  14b0f8:	63737973 5f6c6c61 61747366 00736674     syscall_fstatfs.

0014b108 <__FUNCTION__.6294>:
  14b108:	63737973 5f6c6c61 6c737973 0000676f     syscall_syslog..

0014b118 <__FUNCTION__.6297>:
  14b118:	63737973 5f6c6c61 69746573 656d6974     syscall_setitime
  14b128:	00000072                                r...

0014b12c <__FUNCTION__.6300>:
  14b12c:	63737973 5f6c6c61 69746567 656d6974     syscall_getitime
  14b13c:	00000072                                r...

0014b140 <__FUNCTION__.6305>:
  14b140:	63737973 5f6c6c61 74617473 00000000     syscall_stat....

0014b150 <__FUNCTION__.6310>:
  14b150:	63737973 5f6c6c61 6174736c 00000074     syscall_lstat...

0014b160 <__FUNCTION__.6315>:
  14b160:	63737973 5f6c6c61 61747366 00000074     syscall_fstat...

0014b170 <__FUNCTION__.6318>:
  14b170:	63737973 5f6c6c61 6e616876 00707567     syscall_vhangup.

0014b180 <__FUNCTION__.6321>:
  14b180:	63737973 5f6c6c61 74696177 00000034     syscall_wait4...

0014b190 <__FUNCTION__.6324>:
  14b190:	63737973 5f6c6c61 70617773 0066666f     syscall_swapoff.

0014b1a0 <__FUNCTION__.6327>:
  14b1a0:	63737973 5f6c6c61 69737973 006f666e     syscall_sysinfo.

0014b1b0 <__FUNCTION__.6331>:
  14b1b0:	63737973 5f6c6c61 6e797366 00000063     syscall_fsync...

0014b1c0 <__FUNCTION__.6334>:
  14b1c0:	63737973 5f6c6c61 72676973 72757465     syscall_sigretur
  14b1d0:	0000006e                                n...

0014b1d4 <__FUNCTION__.6337>:
  14b1d4:	63737973 5f6c6c61 6e6f6c63 00000065     syscall_clone...

0014b1e4 <__FUNCTION__.6340>:
  14b1e4:	63737973 5f6c6c61 64746573 69616d6f     syscall_setdomai
  14b1f4:	6d616e6e 00000065                       nname...

0014b1fc <__FUNCTION__.6343>:
  14b1fc:	63737973 5f6c6c61 6d616e75 00000065     syscall_uname...

0014b20c <__FUNCTION__.6346>:
  14b20c:	63737973 5f6c6c61 746a6461 78656d69     syscall_adjtimex
  14b21c:	00000000                                ....

0014b220 <__FUNCTION__.6349>:
  14b220:	63737973 5f6c6c61 6f72706d 74636574     syscall_mprotect
  14b230:	00000000                                ....

0014b234 <__FUNCTION__.6356>:
  14b234:	63737973 5f6c6c61 70676973 6d636f72     syscall_sigprocm
  14b244:	006b7361                                ask.

0014b248 <__FUNCTION__.6359>:
  14b248:	63737973 5f6c6c61 74696e69 646f6d5f     syscall_init_mod
  14b258:	00656c75                                ule.

0014b25c <__FUNCTION__.6362>:
  14b25c:	63737973 5f6c6c61 656c6564 6d5f6574     syscall_delete_m
  14b26c:	6c75646f 00000065                       odule...

0014b274 <__FUNCTION__.6365>:
  14b274:	63737973 5f6c6c61 746f7571 6c746361     syscall_quotactl
  14b284:	00000000                                ....

0014b288 <__FUNCTION__.6368>:
  14b288:	63737973 5f6c6c61 70746567 00646967     syscall_getpgid.

0014b298 <__FUNCTION__.6371>:
  14b298:	63737973 5f6c6c61 64686366 00007269     syscall_fchdir..

0014b2a8 <__FUNCTION__.6374>:
  14b2a8:	63737973 5f6c6c61 6c666462 00687375     syscall_bdflush.

0014b2b8 <__FUNCTION__.6377>:
  14b2b8:	63737973 5f6c6c61 66737973 00000073     syscall_sysfs...

0014b2c8 <__FUNCTION__.6380>:
  14b2c8:	63737973 5f6c6c61 73726570 6c616e6f     syscall_personal
  14b2d8:	00797469                                ity.

0014b2dc <__FUNCTION__.6383>:
  14b2dc:	63737973 5f6c6c61 66746573 64697573     syscall_setfsuid
  14b2ec:	00000000                                ....

0014b2f0 <__FUNCTION__.6386>:
  14b2f0:	63737973 5f6c6c61 66746573 64696773     syscall_setfsgid
  14b300:	00000000                                ....

0014b304 <__FUNCTION__.6394>:
  14b304:	63737973 5f6c6c61 736c6c5f 006b6565     syscall__llseek.

0014b314 <__FUNCTION__.6400>:
  14b314:	63737973 5f6c6c61 64746567 73746e65     syscall_getdents
  14b324:	00000000                                ....

0014b328 <__FUNCTION__.6408>:
  14b328:	63737973 5f6c6c61 77656e5f 656c6573     syscall__newsele
  14b338:	00007463                                ct..

0014b33c <__FUNCTION__.6411>:
  14b33c:	63737973 5f6c6c61 636f6c66 0000006b     syscall_flock...

0014b34c <__FUNCTION__.6414>:
  14b34c:	63737973 5f6c6c61 6e79736d 00000063     syscall_msync...

0014b35c <__FUNCTION__.6422>:
  14b35c:	63737973 5f6c6c61 64616572 00000076     syscall_readv...

0014b36c <__FUNCTION__.6434>:
  14b36c:	63737973 5f6c6c61 74697277 00007665     syscall_writev..

0014b37c <__FUNCTION__.6441>:
  14b37c:	63737973 5f6c6c61 73746567 00006469     syscall_getsid..

0014b38c <__FUNCTION__.6444>:
  14b38c:	63737973 5f6c6c61 74616466 6e797361     syscall_fdatasyn
  14b39c:	00000063                                c...

0014b3a0 <__FUNCTION__.6447>:
  14b3a0:	63737973 5f6c6c61 7379735f 006c7463     syscall__sysctl.

0014b3b0 <__FUNCTION__.6450>:
  14b3b0:	63737973 5f6c6c61 636f6c6d 0000006b     syscall_mlock...

0014b3c0 <__FUNCTION__.6453>:
  14b3c0:	63737973 5f6c6c61 6c6e756d 006b636f     syscall_munlock.

0014b3d0 <__FUNCTION__.6456>:
  14b3d0:	63737973 5f6c6c61 636f6c6d 6c6c616b     syscall_mlockall
  14b3e0:	00000000                                ....

0014b3e4 <__FUNCTION__.6459>:
  14b3e4:	63737973 5f6c6c61 6c6e756d 616b636f     syscall_munlocka
  14b3f4:	00006c6c                                ll..

0014b3f8 <__FUNCTION__.6464>:
  14b3f8:	63737973 5f6c6c61 65686373 65735f64     syscall_sched_se
  14b408:	72617074 00006d61                       tparam..

0014b410 <__FUNCTION__.6469>:
  14b410:	63737973 5f6c6c61 65686373 65675f64     syscall_sched_ge
  14b420:	72617074 00006d61                       tparam..

0014b428 <__FUNCTION__.6475>:
  14b428:	63737973 5f6c6c61 65686373 65735f64     syscall_sched_se
  14b438:	68637374 6c756465 00007265              tscheduler..

0014b444 <__FUNCTION__.6481>:
  14b444:	63737973 5f6c6c61 65686373 65675f64     syscall_sched_ge
  14b454:	68637374 6c756465 00007265              tscheduler..

0014b460 <__FUNCTION__.6484>:
  14b460:	63737973 5f6c6c61 65686373 69795f64     syscall_sched_yi
  14b470:	00646c65                                eld.

0014b474 <__FUNCTION__.6488>:
  14b474:	63737973 5f6c6c61 65686373 65675f64     syscall_sched_ge
  14b484:	72705f74 69726f69 6d5f7974 00007861     t_priority_max..

0014b494 <__FUNCTION__.6492>:
  14b494:	63737973 5f6c6c61 65686373 65675f64     syscall_sched_ge
  14b4a4:	72705f74 69726f69 6d5f7974 00006e69     t_priority_min..

0014b4b4 <__FUNCTION__.6495>:
  14b4b4:	63737973 5f6c6c61 65686373 72725f64     syscall_sched_rr
  14b4c4:	7465675f 746e695f 61767265 0000006c     _get_interval...

0014b4d4 <__FUNCTION__.6500>:
  14b4d4:	63737973 5f6c6c61 6f6e616e 65656c73     syscall_nanoslee
  14b4e4:	00000070                                p...

0014b4e8 <__FUNCTION__.6508>:
  14b4e8:	63737973 5f6c6c61 6d65726d 00007061     syscall_mremap..

0014b4f8 <__FUNCTION__.6511>:
  14b4f8:	63737973 5f6c6c61 72746573 69757365     syscall_setresui
  14b508:	00000064                                d...

0014b50c <__FUNCTION__.6514>:
  14b50c:	63737973 5f6c6c61 72746567 69757365     syscall_getresui
  14b51c:	00000064                                d...

0014b520 <__FUNCTION__.6520>:
  14b520:	63737973 5f6c6c61 6c6c6f70 00000000     syscall_poll....

0014b530 <__FUNCTION__.6523>:
  14b530:	63737973 5f6c6c61 7373666e 63767265     syscall_nfsservc
  14b540:	00006c74                                tl..

0014b544 <__FUNCTION__.6526>:
  14b544:	63737973 5f6c6c61 72746573 69677365     syscall_setresgi
  14b554:	00000064                                d...

0014b558 <__FUNCTION__.6529>:
  14b558:	63737973 5f6c6c61 72746567 69677365     syscall_getresgi
  14b568:	00000064                                d...

0014b56c <__FUNCTION__.6532>:
  14b56c:	63737973 5f6c6c61 74637270 0000006c     syscall_prctl...

0014b57c <__FUNCTION__.6535>:
  14b57c:	63737973 5f6c6c61 735f7472 65726769     syscall_rt_sigre
  14b58c:	6e727574 00000000                       turn....

0014b594 <__FUNCTION__.6543>:
  14b594:	63737973 5f6c6c61 735f7472 63616769     syscall_rt_sigac
  14b5a4:	6e6f6974 00000000                       tion....

0014b5ac <__FUNCTION__.6551>:
  14b5ac:	63737973 5f6c6c61 735f7472 72706769     syscall_rt_sigpr
  14b5bc:	616d636f 00006b73                       ocmask..

0014b5c4 <__FUNCTION__.6554>:
  14b5c4:	63737973 5f6c6c61 735f7472 65706769     syscall_rt_sigpe
  14b5d4:	6e69646e 00000067                       nding...

0014b5dc <__FUNCTION__.6557>:
  14b5dc:	63737973 5f6c6c61 735f7472 69746769     syscall_rt_sigti
  14b5ec:	7764656d 00746961                       medwait.

0014b5f4 <__FUNCTION__.6560>:
  14b5f4:	63737973 5f6c6c61 735f7472 75716769     syscall_rt_sigqu
  14b604:	69657565 006f666e                       eueinfo.

0014b60c <__FUNCTION__.6563>:
  14b60c:	63737973 5f6c6c61 735f7472 75736769     syscall_rt_sigsu
  14b61c:	6e657073 00000064                       spend...

0014b624 <__FUNCTION__.6566>:
  14b624:	63737973 5f6c6c61 61657270 00343664     syscall_pread64.

0014b634 <__FUNCTION__.6569>:
  14b634:	63737973 5f6c6c61 69727770 34366574     syscall_pwrite64
  14b644:	00000000                                ....

0014b648 <__FUNCTION__.6572>:
  14b648:	63737973 5f6c6c61 776f6863 0000006e     syscall_chown...

0014b658 <__FUNCTION__.6577>:
  14b658:	63737973 5f6c6c61 63746567 00006477     syscall_getcwd..

0014b668 <__FUNCTION__.6580>:
  14b668:	63737973 5f6c6c61 67706163 00007465     syscall_capget..

0014b678 <__FUNCTION__.6583>:
  14b678:	63737973 5f6c6c61 73706163 00007465     syscall_capset..

0014b688 <__FUNCTION__.6586>:
  14b688:	63737973 5f6c6c61 61676973 7473746c     syscall_sigaltst
  14b698:	006b6361                                ack.

0014b69c <__FUNCTION__.6589>:
  14b69c:	63737973 5f6c6c61 646e6573 656c6966     syscall_sendfile
  14b6ac:	00000000                                ....

0014b6b0 <__FUNCTION__.6592>:
  14b6b0:	63737973 5f6c6c61 726f6676 0000006b     syscall_vfork...

0014b6c0 <__FUNCTION__.6597>:
  14b6c0:	63737973 5f6c6c61 74656775 6d696c72     syscall_ugetrlim
  14b6d0:	00007469                                it..

0014b6d4 <__FUNCTION__.6606>:
  14b6d4:	63737973 5f6c6c61 70616d6d 00000032     syscall_mmap2...

0014b6e4 <__FUNCTION__.6609>:
  14b6e4:	63737973 5f6c6c61 6e757274 65746163     syscall_truncate
  14b6f4:	00003436                                64..

0014b6f8 <__FUNCTION__.6612>:
  14b6f8:	63737973 5f6c6c61 75727466 7461636e     syscall_ftruncat
  14b708:	00343665                                e64.

0014b70c <__FUNCTION__.6617>:
  14b70c:	63737973 5f6c6c61 74617473 00003436     syscall_stat64..

0014b71c <__FUNCTION__.6622>:
  14b71c:	63737973 5f6c6c61 6174736c 00343674     syscall_lstat64.

0014b72c <__FUNCTION__.6627>:
  14b72c:	63737973 5f6c6c61 61747366 00343674     syscall_fstat64.

0014b73c <__FUNCTION__.6630>:
  14b73c:	63737973 5f6c6c61 6f68636c 32336e77     syscall_lchown32
  14b74c:	00000000                                ....

0014b750 <__FUNCTION__.6633>:
  14b750:	63737973 5f6c6c61 75746567 32336469     syscall_getuid32
  14b760:	00000000                                ....

0014b764 <__FUNCTION__.6636>:
  14b764:	63737973 5f6c6c61 67746567 32336469     syscall_getgid32
  14b774:	00000000                                ....

0014b778 <__FUNCTION__.6639>:
  14b778:	63737973 5f6c6c61 65746567 33646975     syscall_geteuid3
  14b788:	00000032                                2...

0014b78c <__FUNCTION__.6642>:
  14b78c:	63737973 5f6c6c61 65746567 33646967     syscall_getegid3
  14b79c:	00000032                                2...

0014b7a0 <__FUNCTION__.6645>:
  14b7a0:	63737973 5f6c6c61 72746573 64697565     syscall_setreuid
  14b7b0:	00003233                                32..

0014b7b4 <__FUNCTION__.6648>:
  14b7b4:	63737973 5f6c6c61 72746573 64696765     syscall_setregid
  14b7c4:	00003233                                32..

0014b7c8 <__FUNCTION__.6651>:
  14b7c8:	63737973 5f6c6c61 67746567 70756f72     syscall_getgroup
  14b7d8:	00323373                                s32.

0014b7dc <__FUNCTION__.6654>:
  14b7dc:	63737973 5f6c6c61 67746573 70756f72     syscall_setgroup
  14b7ec:	00323373                                s32.

0014b7f0 <__FUNCTION__.6657>:
  14b7f0:	63737973 5f6c6c61 6f686366 32336e77     syscall_fchown32
  14b800:	00000000                                ....

0014b804 <__FUNCTION__.6660>:
  14b804:	63737973 5f6c6c61 72746573 69757365     syscall_setresui
  14b814:	00323364                                d32.

0014b818 <__FUNCTION__.6663>:
  14b818:	63737973 5f6c6c61 72746567 69757365     syscall_getresui
  14b828:	00323364                                d32.

0014b82c <__FUNCTION__.6666>:
  14b82c:	63737973 5f6c6c61 72746573 69677365     syscall_setresgi
  14b83c:	00323364                                d32.

0014b840 <__FUNCTION__.6669>:
  14b840:	63737973 5f6c6c61 72746567 69677365     syscall_getresgi
  14b850:	00323364                                d32.

0014b854 <__FUNCTION__.6672>:
  14b854:	63737973 5f6c6c61 776f6863 0032336e     syscall_chown32.

0014b864 <__FUNCTION__.6675>:
  14b864:	63737973 5f6c6c61 75746573 32336469     syscall_setuid32
  14b874:	00000000                                ....

0014b878 <__FUNCTION__.6678>:
  14b878:	63737973 5f6c6c61 67746573 32336469     syscall_setgid32
  14b888:	00000000                                ....

0014b88c <__FUNCTION__.6681>:
  14b88c:	63737973 5f6c6c61 66746573 64697573     syscall_setfsuid
  14b89c:	00003233                                32..

0014b8a0 <__FUNCTION__.6684>:
  14b8a0:	63737973 5f6c6c61 66746573 64696773     syscall_setfsgid
  14b8b0:	00003233                                32..

0014b8b4 <__FUNCTION__.6690>:
  14b8b4:	63737973 5f6c6c61 64746567 73746e65     syscall_getdents
  14b8c4:	00003436                                64..

0014b8c8 <__FUNCTION__.6693>:
  14b8c8:	63737973 5f6c6c61 6f766970 6f725f74     syscall_pivot_ro
  14b8d8:	0000746f                                ot..

0014b8dc <__FUNCTION__.6696>:
  14b8dc:	63737973 5f6c6c61 636e696d 0065726f     syscall_mincore.

0014b8ec <__FUNCTION__.6702>:
  14b8ec:	63737973 5f6c6c61 7664616d 00657369     syscall_madvise.

0014b8fc <__FUNCTION__.6708>:
  14b8fc:	63737973 5f6c6c61 746e6366 0034366c     syscall_fcntl64.

0014b90c <__FUNCTION__.6711>:
  14b90c:	63737973 5f6c6c61 74746567 00006469     syscall_gettid..

0014b91c <__FUNCTION__.6714>:
  14b91c:	63737973 5f6c6c61 64616572 61656861     syscall_readahea
  14b92c:	00000064                                d...

0014b930 <__FUNCTION__.6717>:
  14b930:	63737973 5f6c6c61 78746573 72747461     syscall_setxattr
  14b940:	00000000                                ....

0014b944 <__FUNCTION__.6720>:
  14b944:	63737973 5f6c6c61 7465736c 74746178     syscall_lsetxatt
  14b954:	00000072                                r...

0014b958 <__FUNCTION__.6723>:
  14b958:	63737973 5f6c6c61 74657366 74746178     syscall_fsetxatt
  14b968:	00000072                                r...

0014b96c <__FUNCTION__.6726>:
  14b96c:	63737973 5f6c6c61 78746567 72747461     syscall_getxattr
  14b97c:	00000000                                ....

0014b980 <__FUNCTION__.6729>:
  14b980:	63737973 5f6c6c61 7465676c 74746178     syscall_lgetxatt
  14b990:	00000072                                r...

0014b994 <__FUNCTION__.6732>:
  14b994:	63737973 5f6c6c61 74656766 74746178     syscall_fgetxatt
  14b9a4:	00000072                                r...

0014b9a8 <__FUNCTION__.6735>:
  14b9a8:	63737973 5f6c6c61 7473696c 74746178     syscall_listxatt
  14b9b8:	00000072                                r...

0014b9bc <__FUNCTION__.6738>:
  14b9bc:	63737973 5f6c6c61 73696c6c 74617874     syscall_llistxat
  14b9cc:	00007274                                tr..

0014b9d0 <__FUNCTION__.6741>:
  14b9d0:	63737973 5f6c6c61 73696c66 74617874     syscall_flistxat
  14b9e0:	00007274                                tr..

0014b9e4 <__FUNCTION__.6744>:
  14b9e4:	63737973 5f6c6c61 6f6d6572 61786576     syscall_removexa
  14b9f4:	00727474                                ttr.

0014b9f8 <__FUNCTION__.6747>:
  14b9f8:	63737973 5f6c6c61 6d65726c 7865766f     syscall_lremovex
  14ba08:	72747461 00000000                       attr....

0014ba10 <__FUNCTION__.6750>:
  14ba10:	63737973 5f6c6c61 6d657266 7865766f     syscall_fremovex
  14ba20:	72747461 00000000                       attr....

0014ba28 <__FUNCTION__.6755>:
  14ba28:	63737973 5f6c6c61 6c696b74 0000006c     syscall_tkill...

0014ba38 <__FUNCTION__.6758>:
  14ba38:	63737973 5f6c6c61 646e6573 656c6966     syscall_sendfile
  14ba48:	00003436                                64..

0014ba4c <__FUNCTION__.6767>:
  14ba4c:	63737973 5f6c6c61 65747566 00000078     syscall_futex...

0014ba5c <__FUNCTION__.6773>:
  14ba5c:	63737973 5f6c6c61 65686373 65735f64     syscall_sched_se
  14ba6c:	66666174 74696e69 00000079              taffinity...

0014ba78 <__FUNCTION__.6776>:
  14ba78:	63737973 5f6c6c61 65686373 65675f64     syscall_sched_ge
  14ba88:	66666174 74696e69 00000079              taffinity...

0014ba94 <__FUNCTION__.6779>:
  14ba94:	63737973 5f6c6c61 735f6f69 70757465     syscall_io_setup
  14baa4:	00000000                                ....

0014baa8 <__FUNCTION__.6782>:
  14baa8:	63737973 5f6c6c61 645f6f69 72747365     syscall_io_destr
  14bab8:	0000796f                                oy..

0014babc <__FUNCTION__.6785>:
  14babc:	63737973 5f6c6c61 675f6f69 76657465     syscall_io_getev
  14bacc:	73746e65 00000000                       ents....

0014bad4 <__FUNCTION__.6788>:
  14bad4:	63737973 5f6c6c61 735f6f69 696d6275     syscall_io_submi
  14bae4:	00000074                                t...

0014bae8 <__FUNCTION__.6791>:
  14bae8:	63737973 5f6c6c61 635f6f69 65636e61     syscall_io_cance
  14baf8:	0000006c                                l...

0014bafc <__FUNCTION__.6795>:
  14bafc:	63737973 5f6c6c61 74697865 6f72675f     syscall_exit_gro
  14bb0c:	00007075                                up..

0014bb10 <__FUNCTION__.6798>:
  14bb10:	63737973 5f6c6c61 6b6f6f6c 645f7075     syscall_lookup_d
  14bb20:	6b6f6f63 00006569                       cookie..

0014bb28 <__FUNCTION__.6801>:
  14bb28:	63737973 5f6c6c61 6c6f7065 72635f6c     syscall_epoll_cr
  14bb38:	65746165 00000000                       eate....

0014bb40 <__FUNCTION__.6804>:
  14bb40:	63737973 5f6c6c61 6c6f7065 74635f6c     syscall_epoll_ct
  14bb50:	0000006c                                l...

0014bb54 <__FUNCTION__.6807>:
  14bb54:	63737973 5f6c6c61 6c6f7065 61775f6c     syscall_epoll_wa
  14bb64:	00007469                                it..

0014bb68 <__FUNCTION__.6810>:
  14bb68:	63737973 5f6c6c61 616d6572 69665f70     syscall_remap_fi
  14bb78:	705f656c 73656761 00000000              le_pages....

0014bb84 <__FUNCTION__.6814>:
  14bb84:	63737973 5f6c6c61 5f746573 5f646974     syscall_set_tid_
  14bb94:	72646461 00737365                       address.

0014bb9c <__FUNCTION__.6817>:
  14bb9c:	63737973 5f6c6c61 656d6974 72635f72     syscall_timer_cr
  14bbac:	65746165 00000000                       eate....

0014bbb4 <__FUNCTION__.6820>:
  14bbb4:	63737973 5f6c6c61 656d6974 65735f72     syscall_timer_se
  14bbc4:	6d697474 00000065                       ttime...

0014bbcc <__FUNCTION__.6823>:
  14bbcc:	63737973 5f6c6c61 656d6974 65675f72     syscall_timer_ge
  14bbdc:	6d697474 00000065                       ttime...

0014bbe4 <__FUNCTION__.6826>:
  14bbe4:	63737973 5f6c6c61 656d6974 65675f72     syscall_timer_ge
  14bbf4:	65766f74 6e757272 00000000              toverrun....

0014bc00 <__FUNCTION__.6829>:
  14bc00:	63737973 5f6c6c61 656d6974 65645f72     syscall_timer_de
  14bc10:	6574656c 00000000                       lete....

0014bc18 <__FUNCTION__.6834>:
  14bc18:	63737973 5f6c6c61 636f6c63 65735f6b     syscall_clock_se
  14bc28:	6d697474 00000065                       ttime...

0014bc30 <__FUNCTION__.6839>:
  14bc30:	63737973 5f6c6c61 636f6c63 65675f6b     syscall_clock_ge
  14bc40:	6d697474 00000065                       ttime...

0014bc48 <__FUNCTION__.6844>:
  14bc48:	63737973 5f6c6c61 636f6c63 65675f6b     syscall_clock_ge
  14bc58:	73657274 00000000                       tres....

0014bc60 <__FUNCTION__.6847>:
  14bc60:	63737973 5f6c6c61 636f6c63 616e5f6b     syscall_clock_na
  14bc70:	6c736f6e 00706565                       nosleep.

0014bc78 <__FUNCTION__.6853>:
  14bc78:	63737973 5f6c6c61 74617473 34367366     syscall_statfs64
  14bc88:	00000000                                ....

0014bc8c <__FUNCTION__.6859>:
  14bc8c:	63737973 5f6c6c61 61747366 36736674     syscall_fstatfs6
  14bc9c:	00000034                                4...

0014bca0 <__FUNCTION__.6862>:
  14bca0:	63737973 5f6c6c61 696b6774 00006c6c     syscall_tgkill..

0014bcb0 <__FUNCTION__.6865>:
  14bcb0:	63737973 5f6c6c61 6d697475 00007365     syscall_utimes..

0014bcc0 <__FUNCTION__.6868>:
  14bcc0:	63737973 5f6c6c61 5f6d7261 76646166     syscall_arm_fadv
  14bcd0:	36657369 34365f34 00000000              ise64_64....

0014bcdc <__FUNCTION__.6871>:
  14bcdc:	63737973 5f6c6c61 63696370 69666e6f     syscall_pciconfi
  14bcec:	6f695f67 65736162 00000000              g_iobase....

0014bcf8 <__FUNCTION__.6874>:
  14bcf8:	63737973 5f6c6c61 63696370 69666e6f     syscall_pciconfi
  14bd08:	65725f67 00006461                       g_read..

0014bd10 <__FUNCTION__.6877>:
  14bd10:	63737973 5f6c6c61 63696370 69666e6f     syscall_pciconfi
  14bd20:	72775f67 00657469                       g_write.

0014bd28 <__FUNCTION__.6880>:
  14bd28:	63737973 5f6c6c61 6f5f716d 006e6570     syscall_mq_open.

0014bd38 <__FUNCTION__.6883>:
  14bd38:	63737973 5f6c6c61 755f716d 6e696c6e     syscall_mq_unlin
  14bd48:	0000006b                                k...

0014bd4c <__FUNCTION__.6886>:
  14bd4c:	63737973 5f6c6c61 745f716d 64656d69     syscall_mq_timed
  14bd5c:	646e6573 00000000                       send....

0014bd64 <__FUNCTION__.6889>:
  14bd64:	63737973 5f6c6c61 745f716d 64656d69     syscall_mq_timed
  14bd74:	65636572 00657669                       receive.

0014bd7c <__FUNCTION__.6892>:
  14bd7c:	63737973 5f6c6c61 6e5f716d 6669746f     syscall_mq_notif
  14bd8c:	00000079                                y...

0014bd90 <__FUNCTION__.6895>:
  14bd90:	63737973 5f6c6c61 675f716d 65737465     syscall_mq_getse
  14bda0:	74746174 00000072                       tattr...

0014bda8 <__FUNCTION__.6898>:
  14bda8:	63737973 5f6c6c61 74696177 00006469     syscall_waitid..

0014bdb8 <__FUNCTION__.6904>:
  14bdb8:	63737973 5f6c6c61 6b636f73 00007465     syscall_socket..

0014bdc8 <__FUNCTION__.6910>:
  14bdc8:	63737973 5f6c6c61 646e6962 00000000     syscall_bind....

0014bdd8 <__FUNCTION__.6916>:
  14bdd8:	63737973 5f6c6c61 6e6e6f63 00746365     syscall_connect.

0014bde8 <__FUNCTION__.6921>:
  14bde8:	63737973 5f6c6c61 7473696c 00006e65     syscall_listen..

0014bdf8 <__FUNCTION__.6927>:
  14bdf8:	63737973 5f6c6c61 65636361 00007470     syscall_accept..

0014be08 <__FUNCTION__.6933>:
  14be08:	63737973 5f6c6c61 73746567 6e6b636f     syscall_getsockn
  14be18:	00656d61                                ame.

0014be1c <__FUNCTION__.6939>:
  14be1c:	63737973 5f6c6c61 70746567 6e726565     syscall_getpeern
  14be2c:	00656d61                                ame.

0014be30 <__FUNCTION__.6942>:
  14be30:	63737973 5f6c6c61 6b636f73 61707465     syscall_socketpa
  14be40:	00007269                                ir..

0014be44 <__FUNCTION__.6949>:
  14be44:	63737973 5f6c6c61 646e6573 00000000     syscall_send....

0014be54 <__FUNCTION__.6958>:
  14be54:	63737973 5f6c6c61 646e6573 00006f74     syscall_sendto..

0014be64 <__FUNCTION__.6965>:
  14be64:	63737973 5f6c6c61 76636572 00000000     syscall_recv....

0014be74 <__FUNCTION__.6974>:
  14be74:	63737973 5f6c6c61 76636572 6d6f7266     syscall_recvfrom
  14be84:	00000000                                ....

0014be88 <__FUNCTION__.6977>:
  14be88:	63737973 5f6c6c61 74756873 6e776f64     syscall_shutdown
  14be98:	00000000                                ....

0014be9c <__FUNCTION__.6985>:
  14be9c:	63737973 5f6c6c61 73746573 6f6b636f     syscall_setsocko
  14beac:	00007470                                pt..

0014beb0 <__FUNCTION__.6993>:
  14beb0:	63737973 5f6c6c61 73746567 6f6b636f     syscall_getsocko
  14bec0:	00007470                                pt..

0014bec4 <__FUNCTION__.6996>:
  14bec4:	63737973 5f6c6c61 646e6573 0067736d     syscall_sendmsg.

0014bed4 <__FUNCTION__.6999>:
  14bed4:	63737973 5f6c6c61 76636572 0067736d     syscall_recvmsg.

0014bee4 <__FUNCTION__.7002>:
  14bee4:	63737973 5f6c6c61 6f6d6573 00000070     syscall_semop...

0014bef4 <__FUNCTION__.7005>:
  14bef4:	63737973 5f6c6c61 676d6573 00007465     syscall_semget..

0014bf04 <__FUNCTION__.7008>:
  14bf04:	63737973 5f6c6c61 636d6573 00006c74     syscall_semctl..

0014bf14 <__FUNCTION__.7011>:
  14bf14:	63737973 5f6c6c61 7367736d 0000646e     syscall_msgsnd..

0014bf24 <__FUNCTION__.7014>:
  14bf24:	63737973 5f6c6c61 7267736d 00007663     syscall_msgrcv..

0014bf34 <__FUNCTION__.7017>:
  14bf34:	63737973 5f6c6c61 6767736d 00007465     syscall_msgget..

0014bf44 <__FUNCTION__.7020>:
  14bf44:	63737973 5f6c6c61 6367736d 00006c74     syscall_msgctl..

0014bf54 <__FUNCTION__.7026>:
  14bf54:	63737973 5f6c6c61 616d6873 00000074     syscall_shmat...

0014bf64 <__FUNCTION__.7030>:
  14bf64:	63737973 5f6c6c61 646d6873 00000074     syscall_shmdt...

0014bf74 <__FUNCTION__.7036>:
  14bf74:	63737973 5f6c6c61 676d6873 00007465     syscall_shmget..

0014bf84 <__FUNCTION__.7042>:
  14bf84:	63737973 5f6c6c61 636d6873 00006c74     syscall_shmctl..

0014bf94 <__FUNCTION__.7045>:
  14bf94:	63737973 5f6c6c61 5f646461 0079656b     syscall_add_key.

0014bfa4 <__FUNCTION__.7048>:
  14bfa4:	63737973 5f6c6c61 75716572 5f747365     syscall_request_
  14bfb4:	0079656b                                key.

0014bfb8 <__FUNCTION__.7051>:
  14bfb8:	63737973 5f6c6c61 6379656b 00006c74     syscall_keyctl..

0014bfc8 <__FUNCTION__.7054>:
  14bfc8:	63737973 5f6c6c61 746d6573 64656d69     syscall_semtimed
  14bfd8:	0000706f                                op..

0014bfdc <__FUNCTION__.7057>:
  14bfdc:	63737973 5f6c6c61 72657376 00726576     syscall_vserver.

0014bfec <__FUNCTION__.7060>:
  14bfec:	63737973 5f6c6c61 72706f69 735f6f69     syscall_ioprio_s
  14bffc:	00007465                                et..

0014c000 <__FUNCTION__.7063>:
  14c000:	63737973 5f6c6c61 72706f69 675f6f69     syscall_ioprio_g
  14c010:	00007465                                et..

0014c014 <__FUNCTION__.7066>:
  14c014:	63737973 5f6c6c61 746f6e69 5f796669     syscall_inotify_
  14c024:	74696e69 00000000                       init....

0014c02c <__FUNCTION__.7069>:
  14c02c:	63737973 5f6c6c61 746f6e69 5f796669     syscall_inotify_
  14c03c:	5f646461 63746177 00000068              add_watch...

0014c048 <__FUNCTION__.7072>:
  14c048:	63737973 5f6c6c61 746f6e69 5f796669     syscall_inotify_
  14c058:	775f6d72 68637461 00000000              rm_watch....

0014c064 <__FUNCTION__.7075>:
  14c064:	63737973 5f6c6c61 6e69626d 00000064     syscall_mbind...

0014c074 <__FUNCTION__.7078>:
  14c074:	63737973 5f6c6c61 5f746567 706d656d     syscall_get_memp
  14c084:	63696c6f 00000079                       olicy...

0014c08c <__FUNCTION__.7081>:
  14c08c:	63737973 5f6c6c61 5f746573 706d656d     syscall_set_memp
  14c09c:	63696c6f 00000079                       olicy...

0014c0a4 <__FUNCTION__.7084>:
  14c0a4:	63737973 5f6c6c61 6e65706f 00007461     syscall_openat..

0014c0b4 <__FUNCTION__.7087>:
  14c0b4:	63737973 5f6c6c61 69646b6d 00746172     syscall_mkdirat.

0014c0c4 <__FUNCTION__.7090>:
  14c0c4:	63737973 5f6c6c61 6f6e6b6d 00746164     syscall_mknodat.

0014c0d4 <__FUNCTION__.7093>:
  14c0d4:	63737973 5f6c6c61 6f686366 74616e77     syscall_fchownat
  14c0e4:	00000000                                ....

0014c0e8 <__FUNCTION__.7096>:
  14c0e8:	63737973 5f6c6c61 69747566 6173656d     syscall_futimesa
  14c0f8:	00000074                                t...

0014c0fc <__FUNCTION__.7099>:
  14c0fc:	63737973 5f6c6c61 61747366 36746174     syscall_fstatat6
  14c10c:	00000034                                4...

0014c110 <__FUNCTION__.7102>:
  14c110:	63737973 5f6c6c61 696c6e75 74616b6e     syscall_unlinkat
  14c120:	00000000                                ....

0014c124 <__FUNCTION__.7105>:
  14c124:	63737973 5f6c6c61 616e6572 7461656d     syscall_renameat
  14c134:	00000000                                ....

0014c138 <__FUNCTION__.7108>:
  14c138:	63737973 5f6c6c61 6b6e696c 00007461     syscall_linkat..

0014c148 <__FUNCTION__.7111>:
  14c148:	63737973 5f6c6c61 6c6d7973 616b6e69     syscall_symlinka
  14c158:	00000074                                t...

0014c15c <__FUNCTION__.7114>:
  14c15c:	63737973 5f6c6c61 64616572 6b6e696c     syscall_readlink
  14c16c:	00007461                                at..

0014c170 <__FUNCTION__.7117>:
  14c170:	63737973 5f6c6c61 6d686366 7461646f     syscall_fchmodat
  14c180:	00000000                                ....

0014c184 <__FUNCTION__.7120>:
  14c184:	63737973 5f6c6c61 63636166 61737365     syscall_faccessa
  14c194:	00000074                                t...

0014c198 <__FUNCTION__.7123>:
  14c198:	63737973 5f6c6c61 6c657370 36746365     syscall_pselect6
  14c1a8:	00000000                                ....

0014c1ac <__FUNCTION__.7126>:
  14c1ac:	63737973 5f6c6c61 6c6f7070 0000006c     syscall_ppoll...

0014c1bc <__FUNCTION__.7129>:
  14c1bc:	63737973 5f6c6c61 68736e75 00657261     syscall_unshare.

0014c1cc <__FUNCTION__.7132>:
  14c1cc:	63737973 5f6c6c61 5f746573 75626f72     syscall_set_robu
  14c1dc:	6c5f7473 00747369                       st_list.

0014c1e4 <__FUNCTION__.7135>:
  14c1e4:	63737973 5f6c6c61 5f746567 75626f72     syscall_get_robu
  14c1f4:	6c5f7473 00747369                       st_list.

0014c1fc <__FUNCTION__.7138>:
  14c1fc:	63737973 5f6c6c61 696c7073 00006563     syscall_splice..

0014c20c <__FUNCTION__.7141>:
  14c20c:	63737973 5f6c6c61 5f6d7261 636e7973     syscall_arm_sync
  14c21c:	6c69665f 61725f65 0065676e              _file_range.

0014c228 <__FUNCTION__.7144>:
  14c228:	63737973 5f6c6c61 00656574              syscall_tee.

0014c234 <__FUNCTION__.7147>:
  14c234:	63737973 5f6c6c61 70736d76 6563696c     syscall_vmsplice
  14c244:	00000000                                ....

0014c248 <__FUNCTION__.7150>:
  14c248:	63737973 5f6c6c61 65766f6d 6761705f     syscall_move_pag
  14c258:	00007365                                es..

0014c25c <__FUNCTION__.7153>:
  14c25c:	63737973 5f6c6c61 63746567 00007570     syscall_getcpu..

0014c26c <__FUNCTION__.7156>:
  14c26c:	63737973 5f6c6c61 6c6f7065 77705f6c     syscall_epoll_pw
  14c27c:	00746961                                ait.

0014c280 <__FUNCTION__.7159>:
  14c280:	63737973 5f6c6c61 6578656b 6f6c5f63     syscall_kexec_lo
  14c290:	00006461                                ad..

0014c294 <__FUNCTION__.7162>:
  14c294:	63737973 5f6c6c61 6d697475 61736e65     syscall_utimensa
  14c2a4:	00000074                                t...

0014c2a8 <__FUNCTION__.7165>:
  14c2a8:	63737973 5f6c6c61 6e676973 64666c61     syscall_signalfd
  14c2b8:	00000000                                ....

0014c2bc <__FUNCTION__.7168>:
  14c2bc:	63737973 5f6c6c61 656d6974 5f646672     syscall_timerfd_
  14c2cc:	61657263 00006574                       create..

0014c2d4 <__FUNCTION__.7171>:
  14c2d4:	63737973 5f6c6c61 6e657665 00646674     syscall_eventfd.

0014c2e4 <__FUNCTION__.7174>:
  14c2e4:	63737973 5f6c6c61 6c6c6166 7461636f     syscall_fallocat
  14c2f4:	00000065                                e...

0014c2f8 <__FUNCTION__.7177>:
  14c2f8:	63737973 5f6c6c61 656d6974 5f646672     syscall_timerfd_
  14c308:	74746573 00656d69                       settime.

0014c310 <__FUNCTION__.7180>:
  14c310:	63737973 5f6c6c61 656d6974 5f646672     syscall_timerfd_
  14c320:	74746567 00656d69                       gettime.

0014c328 <__FUNCTION__.7183>:
  14c328:	63737973 5f6c6c61 6e676973 64666c61     syscall_signalfd
  14c338:	00000034                                4...

0014c33c <__FUNCTION__.7186>:
  14c33c:	63737973 5f6c6c61 6e657665 32646674     syscall_eventfd2
  14c34c:	00000000                                ....

0014c350 <__FUNCTION__.7189>:
  14c350:	63737973 5f6c6c61 6c6f7065 72635f6c     syscall_epoll_cr
  14c360:	65746165 00000031                       eate1...

0014c368 <__FUNCTION__.7192>:
  14c368:	63737973 5f6c6c61 33707564 00000000     syscall_dup3....

0014c378 <__FUNCTION__.7195>:
  14c378:	63737973 5f6c6c61 65706970 00000032     syscall_pipe2...

0014c388 <__FUNCTION__.7198>:
  14c388:	63737973 5f6c6c61 746f6e69 5f796669     syscall_inotify_
  14c398:	74696e69 00000031                       init1...

0014c3a0 <__FUNCTION__.7201>:
  14c3a0:	63737973 5f6c6c61 61657270 00007664     syscall_preadv..

0014c3b0 <__FUNCTION__.7204>:
  14c3b0:	63737973 5f6c6c61 69727770 00766574     syscall_pwritev.

0014c3c0 <__FUNCTION__.7207>:
  14c3c0:	63737973 5f6c6c61 745f7472 67697367     syscall_rt_tgsig
  14c3d0:	75657571 666e6965 0000006f              queueinfo...

0014c3dc <__FUNCTION__.7210>:
  14c3dc:	63737973 5f6c6c61 66726570 6576655f     syscall_perf_eve
  14c3ec:	6f5f746e 006e6570                       nt_open.

0014c3f4 <__FUNCTION__.7213>:
  14c3f4:	63737973 5f6c6c61 76636572 67736d6d     syscall_recvmmsg
  14c404:	00000000                                ....

0014c408 <__FUNCTION__.7216>:
  14c408:	63737973 5f6c6c61 65636361 00347470     syscall_accept4.

0014c418 <__FUNCTION__.7219>:
  14c418:	63737973 5f6c6c61 6f6e6166 79666974     syscall_fanotify
  14c428:	696e695f 00000074                       _init...

0014c430 <__FUNCTION__.7222>:
  14c430:	63737973 5f6c6c61 6f6e6166 79666974     syscall_fanotify
  14c440:	72616d5f 0000006b                       _mark...

0014c448 <__FUNCTION__.7230>:
  14c448:	63737973 5f6c6c61 696c7270 3674696d     syscall_prlimit6
  14c458:	00000034                                4...

0014c45c <__FUNCTION__.7233>:
  14c45c:	63737973 5f6c6c61 656d616e 5f6f745f     syscall_name_to_
  14c46c:	646e6168 615f656c 00000074              handle_at...

0014c478 <__FUNCTION__.7236>:
  14c478:	63737973 5f6c6c61 6e65706f 5f79625f     syscall_open_by_
  14c488:	646e6168 615f656c 00000074              handle_at...

0014c494 <__FUNCTION__.7239>:
  14c494:	63737973 5f6c6c61 636f6c63 64615f6b     syscall_clock_ad
  14c4a4:	6d69746a 00000065                       jtime...

0014c4ac <__FUNCTION__.7242>:
  14c4ac:	63737973 5f6c6c61 636e7973 00007366     syscall_syncfs..

0014c4bc <__FUNCTION__.7245>:
  14c4bc:	63737973 5f6c6c61 646e6573 67736d6d     syscall_sendmmsg
  14c4cc:	00000000                                ....

0014c4d0 <__FUNCTION__.7248>:
  14c4d0:	63737973 5f6c6c61 6e746573 00000073     syscall_setns...

0014c4e0 <__FUNCTION__.7251>:
  14c4e0:	63737973 5f6c6c61 636f7270 5f737365     syscall_process_
  14c4f0:	725f6d76 76646165 00000000              vm_readv....

0014c4fc <__FUNCTION__.7254>:
  14c4fc:	63737973 5f6c6c61 636f7270 5f737365     syscall_process_
  14c50c:	775f6d76 65746972 00000076              vm_writev...

0014c518 <__FUNCTION__.7257>:
  14c518:	63737973 5f6c6c61 706d636b 00000000     syscall_kcmp....

0014c528 <__FUNCTION__.7260>:
  14c528:	63737973 5f6c6c61 696e6966 6f6d5f74     syscall_finit_mo
  14c538:	656c7564 00000000                       dule....

0014c540 <__FUNCTION__.7263>:
  14c540:	63737973 5f6c6c61 65686373 65735f64     syscall_sched_se
  14c550:	74746174 00000072                       tattr...

0014c558 <__FUNCTION__.7266>:
  14c558:	63737973 5f6c6c61 65686373 65675f64     syscall_sched_ge
  14c568:	74746174 00000072                       tattr...

0014c570 <__FUNCTION__.7269>:
  14c570:	63737973 5f6c6c61 616e6572 7461656d     syscall_renameat
  14c580:	00000032                                2...

0014c584 <__FUNCTION__.7272>:
  14c584:	63737973 5f6c6c61 63636573 00706d6f     syscall_seccomp.

0014c594 <__FUNCTION__.7278>:
  14c594:	63737973 5f6c6c61 72746567 6f646e61     syscall_getrando
  14c5a4:	0000006d                                m...

0014c5a8 <__FUNCTION__.7281>:
  14c5a8:	63737973 5f6c6c61 666d656d 72635f64     syscall_memfd_cr
  14c5b8:	65746165 00000000                       eate....

0014c5c0 <__FUNCTION__.7284>:
  14c5c0:	63737973 5f6c6c61 00667062              syscall_bpf.

0014c5cc <__FUNCTION__.7287>:
  14c5cc:	63737973 5f6c6c61 63657865 74616576     syscall_execveat
  14c5dc:	00000000                                ....

0014c5e0 <__FUNCTION__.7290>:
  14c5e0:	63737973 5f6c6c61 72657375 6c756166     syscall_userfaul
  14c5f0:	00646674                                tfd.

0014c5f4 <__FUNCTION__.7293>:
  14c5f4:	63737973 5f6c6c61 626d656d 69727261     syscall_membarri
  14c604:	00007265                                er..

0014c608 <__FUNCTION__.7296>:
  14c608:	63737973 5f6c6c61 636f6c6d 0000326b     syscall_mlock2..

0014c618 <__FUNCTION__.7299>:
  14c618:	63737973 5f6c6c61 79706f63 6c69665f     syscall_copy_fil
  14c628:	61725f65 0065676e                       e_range.

0014c630 <__FUNCTION__.7302>:
  14c630:	63737973 5f6c6c61 61657270 00327664     syscall_preadv2.

0014c640 <__FUNCTION__.7305>:
  14c640:	63737973 5f6c6c61 69727770 32766574     syscall_pwritev2
  14c650:	00000000                                ....

0014c654 <__FUNCTION__.7308>:
  14c654:	63737973 5f6c6c61 79656b70 72706d5f     syscall_pkey_mpr
  14c664:	6365746f 00000074                       otect...

0014c66c <__FUNCTION__.7311>:
  14c66c:	63737973 5f6c6c61 79656b70 6c6c615f     syscall_pkey_all
  14c67c:	0000636f                                oc..

0014c680 <__FUNCTION__.7314>:
  14c680:	63737973 5f6c6c61 79656b70 6572665f     syscall_pkey_fre
  14c690:	00000065                                e...

0014c694 <__FUNCTION__.7317>:
  14c694:	63737973 5f6c6c61 74617473 00000078     syscall_statx...

0014c6a4 <__FUNCTION__.7320>:
  14c6a4:	63737973 5f6c6c61 71657372 00000000     syscall_rseq....

0014c6b4 <__FUNCTION__.7323>:
  14c6b4:	63737973 5f6c6c61 705f6f69 65746567     syscall_io_pgete
  14c6c4:	746e6576 00000073 335b1a0a 5b206d34     vents.....[34m [
  14c6d4:	64202020 7973206f 6c616373 203a5d6c        do syscall]: 
  14c6e4:	6d305b1b 00000000                       .[0m....

0014c6ec <syscall_table>:
  14c6ec:	0013b040 0013b29c 0013c2d4 0013bd3c     @...........<...
  14c6fc:	0013bd04 0013bccc 0013b274 00000000     ........t.......
  14c70c:	0013b024 0013b008 0013b24c 0013bc94     $.......L.......
  14c71c:	0013b224 00000000 0013afec 0013afd0     $...............
  14c72c:	0013afb4 00000000 00000000 0013c33c     ............<...
  14c73c:	0013c2b4 0013af98 00000000 0013af7c     ............|...
  14c74c:	0013af60 00000000 0013af44 00000000     `.......D.......
  14c75c:	00000000 0013af28 00000000 00000000     ....(...........
  14c76c:	00000000 0013b6b4 0013af0c 00000000     ................
  14c77c:	0013aef0 0013b684 0013b654 0013b624     ........T...$...
  14c78c:	0013b1fc 0013b1d4 0013b1ac 0013aed4     ................
  14c79c:	00000000 0013b184 0013aeb8 0013ae9c     ................
  14c7ac:	00000000 0013ae80 0013ae64 0013ae48     ........d...H...
  14c7bc:	0013ae2c 00000000 0013c2f4 0013bc5c     ,...........\...
  14c7cc:	00000000 0013ae10 00000000 00000000     ................
  14c7dc:	0013adf4 0013add8 0013adbc 0013b5f4     ................
  14c7ec:	0013ada0 0013ad84 0013c294 0013bf24     ............$...
	...
  14c804:	0013ad68 0013ad4c 0013ad30 0013ad14     h...L...0.......
  14c814:	0013acf8 0013b5c4 00000000 0013acdc     ................
  14c824:	0013acc0 0013aca4 0013ac88 0013ac6c     ............l...
  14c834:	00000000 0013ac50 00000000 0013bc24     ....P.......$...
  14c844:	0013ac34 0013ac18 0013abfc 00000000     4...............
  14c854:	00000000 0013b594 0013abe0 0013abc4     ................
  14c864:	0013aba8 0013ab8c 0013ab70 0013ab54     ........p...T...
  14c874:	00000000 0013ab38 0013ab1c 00000000     ....8...........
  14c884:	00000000 0013ab00 0013aae4 0013aac8     ................
  14c894:	0013b564 0013b534 0013aaac 00000000     d...4...........
  14c8a4:	00000000 0013aa90 00000000 00000000     ................
  14c8b4:	0013aa74 0013aa58 0013aa3c 00000000     t...X...<.......
  14c8c4:	0013b15c 0013aa20 0013aa04 0013a9e8     \... ...........
  14c8d4:	0013a9cc 00000000 0013a9b0 0013a994     ................
  14c8e4:	0013bedc 00000000 0013a978 0013a95c     ........x...\...
  14c8f4:	00000000 0013a940 0013a924 0013a908     ....@...$.......
  14c904:	0013a8ec 0013a8d0 0013a8b4 00000000     ................
  14c914:	0013a898 0013a87c 0013c0ac 0013bbec     ....|...........
  14c924:	0013c05c 0013a860 0013a844 0013bb48     \...`...D...H...
  14c934:	0013baa4 0013a828 0013a80c 0013a7f0     ....(...........
  14c944:	0013a7d4 0013a7b8 0013a79c 0013a780     ................
  14c954:	0013b504 0013b4d4 0013ba6c 0013ba34     ........l...4...
  14c964:	0013a764 0013b134 0013b10c 0013a748     d...4.......H...
  14c974:	0013b4a4 0013c00c 0013a72c 0013a710     ........,.......
	...
  14c98c:	0013b9fc 0013a6f4 0013a6d8 0013a6bc     ................
  14c99c:	0013a6a0 0013a684 0013be94 0013be4c     ............L...
  14c9ac:	0013a668 0013a64c 0013a630 0013a614     h...L...0.......
  14c9bc:	0013a5f8 0013a5dc 0013a5c0 0013b474     ............t...
  14c9cc:	0013a5a4 0013a588 0013a56c 0013a550     ........l...P...
	...
  14c9e4:	0013c274 0013b444 0013c204 0013a534     t...D.......4...
  14c9f4:	0013a518 0013b414 0013b3e4 0013b3b4     ................
  14ca04:	0013a4fc 0013a4e0 0013a4c4 0013a4a8     ................
  14ca14:	0013a48c 0013a470 0013a454 0013a438     ....p...T...8...
  14ca24:	0013a41c 0013a400 0013a3e4 0013a3c8     ................
  14ca34:	0013a3ac 0013a390 0013a374 0013a358     ........t...X...
  14ca44:	0013a33c 0013a320 0013a304 0013b9c4     <... ...........
  14ca54:	0013a2e8 0013a2cc 0013b98c 0013b954     ............T...
	...
  14ca6c:	0013c254 0013a2b0 0013a294 0013a278     T...........x...
  14ca7c:	0013a25c 0013a240 0013a224 0013a208     \...@...$.......
  14ca8c:	0013a1ec 0013a1d0 0013a1b4 0013a198     ................
  14ca9c:	0013a17c 0013a160 0013b384 0013a144     |...`.......D...
  14caac:	0013c1b0 0013b91c 0013a128 0013a10c     ........(.......
  14cabc:	0013a0f0 0013a0d4 0013a0b8 0013a09c     ................
  14cacc:	0013b0e4 0013a080 0013a064 0013a048     ........d...H...
  14cadc:	0013a02c 0013a010 00000000 00000000     ,...............
  14caec:	0013b0bc 00139ff4 00139fd8 00139fbc     ................
  14cafc:	00139fa0 00139f84 0013b354 0013b324     ........T...$...
  14cb0c:	0013b2f4 00139f68 00139f4c 00139f30     ....h...L...0...
  14cb1c:	00139f14 00139ef8 00139edc 00139ec0     ................
  14cb2c:	00139ea4 00139e88 00139e6c 00139e50     ........l...P...
  14cb3c:	00139e34 00139e18 00139dfc 00139de0     4...............
  14cb4c:	00139dc4 0013b8e4 0013b8ac 0013b874     ............t...
  14cb5c:	0013b2c4 0013b83c 0013b804 0013b7cc     ....<...........
  14cb6c:	00139da8 0013be04 0013c15c 0013bdbc     ........\.......
  14cb7c:	0013c108 00139d8c 0013bfbc 0013bf6c     ............l...
  14cb8c:	00139d70 00139d54 00139d38 00139d1c     p...T...8.......
  14cb9c:	00139d00 00139ce4 00139cc8 00139cac     ................
  14cbac:	00139c90 0013b790 0013b090 0013b754     ............T...
  14cbbc:	0013b71c 00139c74 00139c58 00139c3c     ....t...X...<...
  14cbcc:	00139c20 00139c04 00139be8 00139bcc      ...............
  14cbdc:	00139bb0 00139b94 00139b78 00139b5c     ........x...\...
  14cbec:	00139b40 00139b24 00139b08 00139aec     @...$...........
  14cbfc:	00139ad0 00139ab4 00139a98 00139a7c     ............|...
  14cc0c:	00139a60 00139a44 00139a28 00139a0c     `...D...(.......
  14cc1c:	001399f0 001399d4 001399b8 0013999c     ................
  14cc2c:	00139980 00139964 00139948 0013992c     ....d...H...,...
  14cc3c:	00139910 001398f4 001398d8 001398bc     ................
  14cc4c:	001398a0 00139884 00139868 0013984c     ........h...L...
  14cc5c:	00139830 00139814 001397f8 001397dc     0...............
  14cc6c:	001397c0 001397a4 00139788 0013976c     ............l...
  14cc7c:	00139750 00139734 00139718 001396fc     P...4...........
  14cc8c:	001396e0 001396c4 001396a8 0013968c     ................
  14cc9c:	00139670 00139654 00139638 0013961c     p...T...8.......
  14ccac:	00139600 0013bd74 001395e4 001395c8     ....t...........
  14ccbc:	001395ac 00139590 00139574 00139558     ........t...X...
  14cccc:	0013953c 00139520 00139504 001394e8     <... ...........
  14ccdc:	001394cc 001394b0 00139494 00139478     ............x...
  14ccec:	0013b6e4 0013945c 00139440 00139424     ....\...@...$...
  14ccfc:	00139408 001393ec 001393d0 001393b4     ................
  14cd0c:	00139398 0013937c 00139360 00139344     ....|...`...D...
  14cd1c:	00139328 0013930c 001392f0 001392d4     (...............
  14cd2c:	335b1b0a 5b206d31 74706d65 79732079     ..[31m [empty sy
  14cd3c:	6c616373 203a5d6c 6d305b1b 00000000     scall]: .[0m....

0014cd4c <bin_tab>:
  14cd4c:	23222120 25252424 27272626 28282828      !"#$$%%&&''((((
  14cd5c:	29292929 2a2a2a2a 2b2b2b2b 2c2c2c2c     ))))****++++,,,,
  14cd6c:	2c2c2c2c 2d2d2d2d 2d2d2d2d 2e2e2e2e     ,,,,--------....
  14cd7c:	2e2e2e2e 2f2f2f2f 2f2f2f2f              ....////////

0014cd88 <stderr>:
  14cd88:	0014d2a8                                ....

0014cd8c <stdout>:
  14cd8c:	0014d340 20202b2d 30583020 00000078     @...-+   0X0x...
  14cd9c:	6c756e28 0000296c 2b58302d 30205830     (null)..-0X+0X 0
  14cdac:	78302d58 2078302b 00007830 00666e69     X-0x+0x 0x..inf.
  14cdbc:	00464e49 006e616e 004e414e 0000002e     INF.nan.NAN.....

0014cdcc <states>:
  14cdcc:	000a0019 00191919 05000000 00000000     ................
  14cddc:	00090000 0b000000 00000000 00000000     ................
  14cdec:	0a110019 03191919 0100070a 180b091b     ................
  14cdfc:	06090000 0b00000b 00190600 19190000     ................
  14ce0c:	00000019 00000000 00000000 00000000     ................
  14ce1c:	00000e00 00000000 00190000 19190d0a     ................
  14ce2c:	000d0019 09000200 0000000e 000e0009     ................
  14ce3c:	00000e00 00000000 00000000 00000000     ................
	...
  14ce54:	0c000000 00000000 00000000 13000000     ................
  14ce64:	00000000 00000013 000c0900 00000000     ................
  14ce74:	0c00000c 00000000 00000000 00000000     ................
	...
  14ce90:	00001000 00000000 00000000 00000f00     ................
  14cea0:	000f0400 09000000 00000010 00100000     ................
  14ceb0:	00001000 00000000 00000000 00000000     ................
	...
  14cec8:	12000000 00000000 00000000 11000000     ................
  14ced8:	00000000 00000011 00120900 00000000     ................
  14cee8:	12000012 001a0000 1a1a0000 0000001a     ................
	...
  14cf0c:	001a0000 1a1a0000 0000001a 09000000     ................
	...
  14cf3c:	14000000 00000000 00000000 17000000     ................
  14cf4c:	00000000 00000017 00140900 00000000     ................
  14cf5c:	14000014 00000000 00000000 00000000     ................
	...
  14cf78:	00001600 00000000 00000000 00001500     ................
  14cf88:	00150000 09000000 00000016 00160000     ................
  14cf98:	00001600                                ....

0014cf9c <xdigits>:
  14cf9c:	33323130 37363534 42413938 46454443     0123456789ABCDEF

0014cfac <all_mask>:
  14cfac:	ffffffff ffffffff                       ........

0014cfb4 <app_mask>:
  14cfb4:	7fffffff fffffffc                       ........

0014cfbc <__EH_FRAME_BEGIN__>:
  14cfbc:	00000000                                ....
